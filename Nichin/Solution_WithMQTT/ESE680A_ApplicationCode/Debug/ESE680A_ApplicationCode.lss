
ESE680A_ApplicationCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f3a8  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001f0  20000000  000173a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000e1c  200001f0  00017598  000201f0  2**2
                  ALLOC
  3 .stack        00002004  2000100c  000183b4  000201f0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .debug_info   0007bf03  00000000  00000000  000202e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000a2f4  00000000  00000000  0009c1e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001dd58  00000000  00000000  000a64d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000011b8  00000000  00000000  000c4231  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002080  00000000  00000000  000c53e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000255a7  00000000  00000000  000c7469  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00024dc8  00000000  00000000  000eca10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00097772  00000000  00000000  001117d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003e4c  00000000  00000000  001a8f4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <exception_table>:
    8000:	10 30 00 20 c9 da 00 00 c5 da 00 00 c5 da 00 00     .0. ............
	...
    802c:	c5 da 00 00 00 00 00 00 00 00 00 00 c5 da 00 00     ................
    803c:	c5 da 00 00 c5 da 00 00 c5 da 00 00 c5 da 00 00     ................
    804c:	f5 b9 00 00 91 b8 00 00 c5 da 00 00 c5 da 00 00     ................
    805c:	c5 da 00 00 c5 da 00 00 61 ec 00 00 71 ec 00 00     ........a...q...
    806c:	81 ec 00 00 91 ec 00 00 a1 ec 00 00 b1 ec 00 00     ................
    807c:	11 c8 00 00 21 c8 00 00 31 c8 00 00 c5 da 00 00     ....!...1.......
    808c:	c5 da 00 00 c5 da 00 00 00 00 00 00 00 00 00 00     ................
    809c:	c5 da 00 00 c5 da 00 00 c5 da 00 00 c5 da 00 00     ................
    80ac:	c5 da 00 00 00 00 00 00                             ........

000080b4 <__do_global_dtors_aux>:
    80b4:	b510      	push	{r4, lr}
    80b6:	4c06      	ldr	r4, [pc, #24]	; (80d0 <__do_global_dtors_aux+0x1c>)
    80b8:	7823      	ldrb	r3, [r4, #0]
    80ba:	2b00      	cmp	r3, #0
    80bc:	d107      	bne.n	80ce <__do_global_dtors_aux+0x1a>
    80be:	4b05      	ldr	r3, [pc, #20]	; (80d4 <__do_global_dtors_aux+0x20>)
    80c0:	2b00      	cmp	r3, #0
    80c2:	d002      	beq.n	80ca <__do_global_dtors_aux+0x16>
    80c4:	4804      	ldr	r0, [pc, #16]	; (80d8 <__do_global_dtors_aux+0x24>)
    80c6:	e000      	b.n	80ca <__do_global_dtors_aux+0x16>
    80c8:	bf00      	nop
    80ca:	2301      	movs	r3, #1
    80cc:	7023      	strb	r3, [r4, #0]
    80ce:	bd10      	pop	{r4, pc}
    80d0:	200001f0 	.word	0x200001f0
    80d4:	00000000 	.word	0x00000000
    80d8:	000173a8 	.word	0x000173a8

000080dc <frame_dummy>:
    80dc:	4b08      	ldr	r3, [pc, #32]	; (8100 <frame_dummy+0x24>)
    80de:	b510      	push	{r4, lr}
    80e0:	2b00      	cmp	r3, #0
    80e2:	d003      	beq.n	80ec <frame_dummy+0x10>
    80e4:	4907      	ldr	r1, [pc, #28]	; (8104 <frame_dummy+0x28>)
    80e6:	4808      	ldr	r0, [pc, #32]	; (8108 <frame_dummy+0x2c>)
    80e8:	e000      	b.n	80ec <frame_dummy+0x10>
    80ea:	bf00      	nop
    80ec:	4807      	ldr	r0, [pc, #28]	; (810c <frame_dummy+0x30>)
    80ee:	6803      	ldr	r3, [r0, #0]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d100      	bne.n	80f6 <frame_dummy+0x1a>
    80f4:	bd10      	pop	{r4, pc}
    80f6:	4b06      	ldr	r3, [pc, #24]	; (8110 <frame_dummy+0x34>)
    80f8:	2b00      	cmp	r3, #0
    80fa:	d0fb      	beq.n	80f4 <frame_dummy+0x18>
    80fc:	4798      	blx	r3
    80fe:	e7f9      	b.n	80f4 <frame_dummy+0x18>
    8100:	00000000 	.word	0x00000000
    8104:	200001f4 	.word	0x200001f4
    8108:	000173a8 	.word	0x000173a8
    810c:	000173a8 	.word	0x000173a8
    8110:	00000000 	.word	0x00000000

00008114 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    8114:	b510      	push	{r4, lr}
	if (gpfIsr) {
    8116:	4b03      	ldr	r3, [pc, #12]	; (8124 <chip_isr+0x10>)
    8118:	681b      	ldr	r3, [r3, #0]
    811a:	2b00      	cmp	r3, #0
    811c:	d000      	beq.n	8120 <chip_isr+0xc>
		gpfIsr();
    811e:	4798      	blx	r3
	}
}
    8120:	bd10      	pop	{r4, pc}
    8122:	46c0      	nop			; (mov r8, r8)
    8124:	2000020c 	.word	0x2000020c

00008128 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    8128:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    812a:	1e44      	subs	r4, r0, #1
    812c:	2800      	cmp	r0, #0
    812e:	d004      	beq.n	813a <nm_bsp_sleep+0x12>
		delay_ms(1);
    8130:	4d02      	ldr	r5, [pc, #8]	; (813c <nm_bsp_sleep+0x14>)
    8132:	2001      	movs	r0, #1
    8134:	47a8      	blx	r5
	while (u32TimeMsec--) {
    8136:	3c01      	subs	r4, #1
    8138:	d2fb      	bcs.n	8132 <nm_bsp_sleep+0xa>
	}
}
    813a:	bd70      	pop	{r4, r5, r6, pc}
    813c:	0000e595 	.word	0x0000e595

00008140 <nm_bsp_reset>:
{
    8140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8142:	4c08      	ldr	r4, [pc, #32]	; (8164 <nm_bsp_reset+0x24>)
    8144:	2780      	movs	r7, #128	; 0x80
    8146:	057f      	lsls	r7, r7, #21
    8148:	6167      	str	r7, [r4, #20]
    814a:	2680      	movs	r6, #128	; 0x80
    814c:	0536      	lsls	r6, r6, #20
    814e:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
    8150:	2064      	movs	r0, #100	; 0x64
    8152:	4d05      	ldr	r5, [pc, #20]	; (8168 <nm_bsp_reset+0x28>)
    8154:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    8156:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(100);
    8158:	2064      	movs	r0, #100	; 0x64
    815a:	47a8      	blx	r5
    815c:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
    815e:	2064      	movs	r0, #100	; 0x64
    8160:	47a8      	blx	r5
}
    8162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8164:	41004400 	.word	0x41004400
    8168:	00008129 	.word	0x00008129

0000816c <nm_bsp_init>:
{
    816c:	b570      	push	{r4, r5, r6, lr}
    816e:	b082      	sub	sp, #8
	gpfIsr = NULL;
    8170:	2300      	movs	r3, #0
    8172:	4a16      	ldr	r2, [pc, #88]	; (81cc <nm_bsp_init+0x60>)
    8174:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    8176:	ac01      	add	r4, sp, #4
    8178:	2501      	movs	r5, #1
    817a:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    817c:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    817e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    8180:	0021      	movs	r1, r4
    8182:	201b      	movs	r0, #27
    8184:	4e12      	ldr	r6, [pc, #72]	; (81d0 <nm_bsp_init+0x64>)
    8186:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    8188:	0021      	movs	r1, r4
    818a:	201c      	movs	r0, #28
    818c:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    818e:	0021      	movs	r1, r4
    8190:	2028      	movs	r0, #40	; 0x28
    8192:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    8194:	4b0f      	ldr	r3, [pc, #60]	; (81d4 <nm_bsp_init+0x68>)
    8196:	2280      	movs	r2, #128	; 0x80
    8198:	0552      	lsls	r2, r2, #21
    819a:	615a      	str	r2, [r3, #20]
    819c:	2280      	movs	r2, #128	; 0x80
    819e:	0512      	lsls	r2, r2, #20
    81a0:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    81a2:	4b0d      	ldr	r3, [pc, #52]	; (81d8 <nm_bsp_init+0x6c>)
    81a4:	681b      	ldr	r3, [r3, #0]
    81a6:	421d      	tst	r5, r3
    81a8:	d003      	beq.n	81b2 <nm_bsp_init+0x46>
    81aa:	4b0b      	ldr	r3, [pc, #44]	; (81d8 <nm_bsp_init+0x6c>)
    81ac:	681b      	ldr	r3, [r3, #0]
    81ae:	079b      	lsls	r3, r3, #30
    81b0:	d401      	bmi.n	81b6 <nm_bsp_init+0x4a>
	    delay_init();
    81b2:	4b0a      	ldr	r3, [pc, #40]	; (81dc <nm_bsp_init+0x70>)
    81b4:	4798      	blx	r3
	nm_bsp_reset();
    81b6:	4b0a      	ldr	r3, [pc, #40]	; (81e0 <nm_bsp_init+0x74>)
    81b8:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    81ba:	2201      	movs	r2, #1
    81bc:	4b09      	ldr	r3, [pc, #36]	; (81e4 <nm_bsp_init+0x78>)
    81be:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    81c0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    81c4:	b662      	cpsie	i
}
    81c6:	2000      	movs	r0, #0
    81c8:	b002      	add	sp, #8
    81ca:	bd70      	pop	{r4, r5, r6, pc}
    81cc:	2000020c 	.word	0x2000020c
    81d0:	0000e859 	.word	0x0000e859
    81d4:	41004400 	.word	0x41004400
    81d8:	e000e010 	.word	0xe000e010
    81dc:	0000e555 	.word	0x0000e555
    81e0:	00008141 	.word	0x00008141
    81e4:	20000002 	.word	0x20000002

000081e8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    81e8:	b510      	push	{r4, lr}
    81ea:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    81ec:	4b0e      	ldr	r3, [pc, #56]	; (8228 <nm_bsp_register_isr+0x40>)
    81ee:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    81f0:	ac01      	add	r4, sp, #4
    81f2:	0020      	movs	r0, r4
    81f4:	4b0d      	ldr	r3, [pc, #52]	; (822c <nm_bsp_register_isr+0x44>)
    81f6:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    81f8:	2329      	movs	r3, #41	; 0x29
    81fa:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    81fc:	2300      	movs	r3, #0
    81fe:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    8200:	3301      	adds	r3, #1
    8202:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    8204:	3301      	adds	r3, #1
    8206:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    8208:	0021      	movs	r1, r4
    820a:	2009      	movs	r0, #9
    820c:	4b08      	ldr	r3, [pc, #32]	; (8230 <nm_bsp_register_isr+0x48>)
    820e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    8210:	2200      	movs	r2, #0
    8212:	2109      	movs	r1, #9
    8214:	4807      	ldr	r0, [pc, #28]	; (8234 <nm_bsp_register_isr+0x4c>)
    8216:	4b08      	ldr	r3, [pc, #32]	; (8238 <nm_bsp_register_isr+0x50>)
    8218:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    821a:	2100      	movs	r1, #0
    821c:	2009      	movs	r0, #9
    821e:	4b07      	ldr	r3, [pc, #28]	; (823c <nm_bsp_register_isr+0x54>)
    8220:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    8222:	b004      	add	sp, #16
    8224:	bd10      	pop	{r4, pc}
    8226:	46c0      	nop			; (mov r8, r8)
    8228:	2000020c 	.word	0x2000020c
    822c:	0000b969 	.word	0x0000b969
    8230:	0000b97d 	.word	0x0000b97d
    8234:	00008115 	.word	0x00008115
    8238:	0000b825 	.word	0x0000b825
    823c:	0000b851 	.word	0x0000b851

00008240 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    8240:	b510      	push	{r4, lr}
	if (u8Enable) {
    8242:	2800      	cmp	r0, #0
    8244:	d104      	bne.n	8250 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    8246:	2100      	movs	r1, #0
    8248:	2009      	movs	r0, #9
    824a:	4b04      	ldr	r3, [pc, #16]	; (825c <nm_bsp_interrupt_ctrl+0x1c>)
    824c:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    824e:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    8250:	2100      	movs	r1, #0
    8252:	2009      	movs	r0, #9
    8254:	4b02      	ldr	r3, [pc, #8]	; (8260 <nm_bsp_interrupt_ctrl+0x20>)
    8256:	4798      	blx	r3
    8258:	e7f9      	b.n	824e <nm_bsp_interrupt_ctrl+0xe>
    825a:	46c0      	nop			; (mov r8, r8)
    825c:	0000b871 	.word	0x0000b871
    8260:	0000b851 	.word	0x0000b851

00008264 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    8264:	b530      	push	{r4, r5, lr}
    8266:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    8268:	4c30      	ldr	r4, [pc, #192]	; (832c <nm_bus_init+0xc8>)
    826a:	230e      	movs	r3, #14
    826c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    826e:	2300      	movs	r3, #0
    8270:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    8272:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    8274:	a901      	add	r1, sp, #4
    8276:	2201      	movs	r2, #1
    8278:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    827a:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    827c:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    827e:	200e      	movs	r0, #14
    8280:	4b2b      	ldr	r3, [pc, #172]	; (8330 <nm_bus_init+0xcc>)
    8282:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    8284:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8286:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8288:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    828a:	2900      	cmp	r1, #0
    828c:	d104      	bne.n	8298 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    828e:	0953      	lsrs	r3, r2, #5
    8290:	01db      	lsls	r3, r3, #7
    8292:	4928      	ldr	r1, [pc, #160]	; (8334 <nm_bus_init+0xd0>)
    8294:	468c      	mov	ip, r1
    8296:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8298:	211f      	movs	r1, #31
    829a:	4011      	ands	r1, r2
    829c:	2201      	movs	r2, #1
    829e:	0010      	movs	r0, r2
    82a0:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    82a2:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    82a4:	ac02      	add	r4, sp, #8
    82a6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    82a8:	2300      	movs	r3, #0
    82aa:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    82ac:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    82ae:	21c0      	movs	r1, #192	; 0xc0
    82b0:	0389      	lsls	r1, r1, #14
    82b2:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    82b4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    82b6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    82b8:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    82ba:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    82bc:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    82be:	3223      	adds	r2, #35	; 0x23
    82c0:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    82c2:	3a18      	subs	r2, #24
    82c4:	2100      	movs	r1, #0
    82c6:	a808      	add	r0, sp, #32
    82c8:	4b1b      	ldr	r3, [pc, #108]	; (8338 <nm_bus_init+0xd4>)
    82ca:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    82cc:	4b1b      	ldr	r3, [pc, #108]	; (833c <nm_bus_init+0xd8>)
    82ce:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    82d0:	4b1b      	ldr	r3, [pc, #108]	; (8340 <nm_bus_init+0xdc>)
    82d2:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    82d4:	2301      	movs	r3, #1
    82d6:	425b      	negs	r3, r3
    82d8:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    82da:	4b1a      	ldr	r3, [pc, #104]	; (8344 <nm_bus_init+0xe0>)
    82dc:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    82de:	4b1a      	ldr	r3, [pc, #104]	; (8348 <nm_bus_init+0xe4>)
    82e0:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    82e2:	0022      	movs	r2, r4
    82e4:	4919      	ldr	r1, [pc, #100]	; (834c <nm_bus_init+0xe8>)
    82e6:	481a      	ldr	r0, [pc, #104]	; (8350 <nm_bus_init+0xec>)
    82e8:	4b1a      	ldr	r3, [pc, #104]	; (8354 <nm_bus_init+0xf0>)
    82ea:	4798      	blx	r3
    82ec:	2800      	cmp	r0, #0
    82ee:	d11a      	bne.n	8326 <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    82f0:	4d17      	ldr	r5, [pc, #92]	; (8350 <nm_bus_init+0xec>)
    82f2:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    82f4:	0020      	movs	r0, r4
    82f6:	4b18      	ldr	r3, [pc, #96]	; (8358 <nm_bus_init+0xf4>)
    82f8:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    82fa:	231f      	movs	r3, #31
    82fc:	4018      	ands	r0, r3
    82fe:	3b1e      	subs	r3, #30
    8300:	4083      	lsls	r3, r0
    8302:	4a16      	ldr	r2, [pc, #88]	; (835c <nm_bus_init+0xf8>)
    8304:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8306:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    8308:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    830a:	2b00      	cmp	r3, #0
    830c:	d1fc      	bne.n	8308 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    830e:	6823      	ldr	r3, [r4, #0]
    8310:	2202      	movs	r2, #2
    8312:	4313      	orrs	r3, r2
    8314:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    8316:	4b12      	ldr	r3, [pc, #72]	; (8360 <nm_bus_init+0xfc>)
    8318:	4798      	blx	r3
	nm_bsp_sleep(1);
    831a:	2001      	movs	r0, #1
    831c:	4b11      	ldr	r3, [pc, #68]	; (8364 <nm_bus_init+0x100>)
    831e:	4798      	blx	r3
#endif
	return result;
    8320:	2000      	movs	r0, #0
}
    8322:	b011      	add	sp, #68	; 0x44
    8324:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    8326:	2006      	movs	r0, #6
    8328:	4240      	negs	r0, r0
    832a:	e7fa      	b.n	8322 <nm_bus_init+0xbe>
    832c:	200003fc 	.word	0x200003fc
    8330:	0000e859 	.word	0x0000e859
    8334:	41004400 	.word	0x41004400
    8338:	00013f7b 	.word	0x00013f7b
    833c:	000c0002 	.word	0x000c0002
    8340:	000d0002 	.word	0x000d0002
    8344:	000f0002 	.word	0x000f0002
    8348:	00b71b00 	.word	0x00b71b00
    834c:	42001000 	.word	0x42001000
    8350:	20000400 	.word	0x20000400
    8354:	0000ecc1 	.word	0x0000ecc1
    8358:	0000ec31 	.word	0x0000ec31
    835c:	e000e100 	.word	0xe000e100
    8360:	00008141 	.word	0x00008141
    8364:	00008129 	.word	0x00008129

00008368 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    8368:	b5f0      	push	{r4, r5, r6, r7, lr}
    836a:	46de      	mov	lr, fp
    836c:	4657      	mov	r7, sl
    836e:	464e      	mov	r6, r9
    8370:	4645      	mov	r5, r8
    8372:	b5e0      	push	{r5, r6, r7, lr}
    8374:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    8376:	2803      	cmp	r0, #3
    8378:	d000      	beq.n	837c <nm_bus_ioctl+0x14>
    837a:	e075      	b.n	8468 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    837c:	680e      	ldr	r6, [r1, #0]
    837e:	684d      	ldr	r5, [r1, #4]
    8380:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    8382:	2200      	movs	r2, #0
    8384:	466b      	mov	r3, sp
    8386:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    8388:	2d00      	cmp	r5, #0
    838a:	d027      	beq.n	83dc <nm_bus_ioctl+0x74>
    838c:	2c00      	cmp	r4, #0
    838e:	d065      	beq.n	845c <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    8390:	2e00      	cmp	r6, #0
    8392:	d100      	bne.n	8396 <nm_bus_ioctl+0x2e>
    8394:	e077      	b.n	8486 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    8396:	2300      	movs	r3, #0
    8398:	4698      	mov	r8, r3
    839a:	2300      	movs	r3, #0
    839c:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    839e:	2201      	movs	r2, #1
    83a0:	493b      	ldr	r1, [pc, #236]	; (8490 <nm_bus_ioctl+0x128>)
    83a2:	483c      	ldr	r0, [pc, #240]	; (8494 <nm_bus_ioctl+0x12c>)
    83a4:	4b3c      	ldr	r3, [pc, #240]	; (8498 <nm_bus_ioctl+0x130>)
    83a6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    83a8:	4b3a      	ldr	r3, [pc, #232]	; (8494 <nm_bus_ioctl+0x12c>)
    83aa:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    83ac:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    83ae:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    83b0:	4699      	mov	r9, r3
			pu8Miso++;
    83b2:	4659      	mov	r1, fp
    83b4:	424b      	negs	r3, r1
    83b6:	4159      	adcs	r1, r3
    83b8:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    83ba:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    83bc:	4653      	mov	r3, sl
    83be:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    83c0:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    83c2:	4239      	tst	r1, r7
    83c4:	d0fc      	beq.n	83c0 <nm_bus_ioctl+0x58>
    83c6:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    83c8:	4239      	tst	r1, r7
    83ca:	d0fc      	beq.n	83c6 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    83cc:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    83ce:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    83d0:	4211      	tst	r1, r2
    83d2:	d0fc      	beq.n	83ce <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    83d4:	4649      	mov	r1, r9
    83d6:	7989      	ldrb	r1, [r1, #6]
    83d8:	468c      	mov	ip, r1
    83da:	e011      	b.n	8400 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    83dc:	2e00      	cmp	r6, #0
    83de:	d03a      	beq.n	8456 <nm_bus_ioctl+0xee>
    83e0:	2c00      	cmp	r4, #0
    83e2:	d03e      	beq.n	8462 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    83e4:	2300      	movs	r3, #0
    83e6:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    83e8:	3301      	adds	r3, #1
    83ea:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    83ec:	466b      	mov	r3, sp
    83ee:	1ddd      	adds	r5, r3, #7
    83f0:	e7d5      	b.n	839e <nm_bus_ioctl+0x36>
    83f2:	4660      	mov	r0, ip
    83f4:	2801      	cmp	r0, #1
    83f6:	d00d      	beq.n	8414 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    83f8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    83fa:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    83fc:	2900      	cmp	r1, #0
    83fe:	d00d      	beq.n	841c <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8400:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    8402:	4211      	tst	r1, r2
    8404:	d0fc      	beq.n	8400 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8406:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    8408:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    840a:	4210      	tst	r0, r2
    840c:	d0f1      	beq.n	83f2 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    840e:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    8410:	311e      	adds	r1, #30
    8412:	e7ee      	b.n	83f2 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8414:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8416:	05c0      	lsls	r0, r0, #23
    8418:	0dc0      	lsrs	r0, r0, #23
    841a:	e7ef      	b.n	83fc <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    841c:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    841e:	3c01      	subs	r4, #1
    8420:	b2a4      	uxth	r4, r4
			pu8Miso++;
    8422:	445d      	add	r5, fp
			pu8Mosi++;
    8424:	4643      	mov	r3, r8
    8426:	4259      	negs	r1, r3
    8428:	414b      	adcs	r3, r1
    842a:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    842c:	2c00      	cmp	r4, #0
    842e:	d1c4      	bne.n	83ba <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8430:	4b18      	ldr	r3, [pc, #96]	; (8494 <nm_bus_ioctl+0x12c>)
    8432:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    8434:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    8436:	7e0b      	ldrb	r3, [r1, #24]
    8438:	4213      	tst	r3, r2
    843a:	d0fc      	beq.n	8436 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    843c:	2200      	movs	r2, #0
    843e:	4914      	ldr	r1, [pc, #80]	; (8490 <nm_bus_ioctl+0x128>)
    8440:	4814      	ldr	r0, [pc, #80]	; (8494 <nm_bus_ioctl+0x12c>)
    8442:	4b15      	ldr	r3, [pc, #84]	; (8498 <nm_bus_ioctl+0x130>)
    8444:	4798      	blx	r3
	return M2M_SUCCESS;
    8446:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    8448:	b003      	add	sp, #12
    844a:	bc3c      	pop	{r2, r3, r4, r5}
    844c:	4690      	mov	r8, r2
    844e:	4699      	mov	r9, r3
    8450:	46a2      	mov	sl, r4
    8452:	46ab      	mov	fp, r5
    8454:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    8456:	200f      	movs	r0, #15
    8458:	4240      	negs	r0, r0
    845a:	e7f5      	b.n	8448 <nm_bus_ioctl+0xe0>
    845c:	200f      	movs	r0, #15
    845e:	4240      	negs	r0, r0
    8460:	e7f2      	b.n	8448 <nm_bus_ioctl+0xe0>
    8462:	200f      	movs	r0, #15
    8464:	4240      	negs	r0, r0
		break;
    8466:	e7ef      	b.n	8448 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    8468:	220e      	movs	r2, #14
    846a:	32ff      	adds	r2, #255	; 0xff
    846c:	490b      	ldr	r1, [pc, #44]	; (849c <nm_bus_ioctl+0x134>)
    846e:	480c      	ldr	r0, [pc, #48]	; (84a0 <nm_bus_ioctl+0x138>)
    8470:	4b0c      	ldr	r3, [pc, #48]	; (84a4 <nm_bus_ioctl+0x13c>)
    8472:	4798      	blx	r3
    8474:	480c      	ldr	r0, [pc, #48]	; (84a8 <nm_bus_ioctl+0x140>)
    8476:	4b0d      	ldr	r3, [pc, #52]	; (84ac <nm_bus_ioctl+0x144>)
    8478:	4798      	blx	r3
    847a:	200d      	movs	r0, #13
    847c:	4b0c      	ldr	r3, [pc, #48]	; (84b0 <nm_bus_ioctl+0x148>)
    847e:	4798      	blx	r3
			s8Ret = -1;
    8480:	2001      	movs	r0, #1
    8482:	4240      	negs	r0, r0
	return s8Ret;
    8484:	e7e0      	b.n	8448 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    8486:	2301      	movs	r3, #1
    8488:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    848a:	466b      	mov	r3, sp
    848c:	1dde      	adds	r6, r3, #7
    848e:	e784      	b.n	839a <nm_bus_ioctl+0x32>
    8490:	200003fc 	.word	0x200003fc
    8494:	20000400 	.word	0x20000400
    8498:	0000eff1 	.word	0x0000eff1
    849c:	00015658 	.word	0x00015658
    84a0:	00015668 	.word	0x00015668
    84a4:	000140dd 	.word	0x000140dd
    84a8:	0001567c 	.word	0x0001567c
    84ac:	000141f9 	.word	0x000141f9
    84b0:	00014111 	.word	0x00014111

000084b4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    84b4:	b530      	push	{r4, r5, lr}
    84b6:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    84b8:	ab01      	add	r3, sp, #4
    84ba:	2200      	movs	r2, #0
    84bc:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    84be:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    84c0:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    84c2:	4d13      	ldr	r5, [pc, #76]	; (8510 <nm_bus_deinit+0x5c>)
    84c4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    84c6:	0020      	movs	r0, r4
    84c8:	4b12      	ldr	r3, [pc, #72]	; (8514 <nm_bus_deinit+0x60>)
    84ca:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    84cc:	231f      	movs	r3, #31
    84ce:	4018      	ands	r0, r3
    84d0:	3b1e      	subs	r3, #30
    84d2:	4083      	lsls	r3, r0
    84d4:	2280      	movs	r2, #128	; 0x80
    84d6:	4910      	ldr	r1, [pc, #64]	; (8518 <nm_bus_deinit+0x64>)
    84d8:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    84da:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    84dc:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    84de:	2b00      	cmp	r3, #0
    84e0:	d1fc      	bne.n	84dc <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    84e2:	338f      	adds	r3, #143	; 0x8f
    84e4:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    84e6:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    84e8:	6823      	ldr	r3, [r4, #0]
    84ea:	2202      	movs	r2, #2
    84ec:	4393      	bics	r3, r2
    84ee:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    84f0:	a901      	add	r1, sp, #4
    84f2:	200c      	movs	r0, #12
    84f4:	4c09      	ldr	r4, [pc, #36]	; (851c <nm_bus_deinit+0x68>)
    84f6:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    84f8:	a901      	add	r1, sp, #4
    84fa:	200f      	movs	r0, #15
    84fc:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    84fe:	a901      	add	r1, sp, #4
    8500:	200d      	movs	r0, #13
    8502:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    8504:	a901      	add	r1, sp, #4
    8506:	200e      	movs	r0, #14
    8508:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    850a:	2000      	movs	r0, #0
    850c:	b003      	add	sp, #12
    850e:	bd30      	pop	{r4, r5, pc}
    8510:	20000400 	.word	0x20000400
    8514:	0000ec31 	.word	0x0000ec31
    8518:	e000e100 	.word	0xe000e100
    851c:	0000e859 	.word	0x0000e859

00008520 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    8520:	2a00      	cmp	r2, #0
    8522:	d006      	beq.n	8532 <m2m_memcpy+0x12>
    8524:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    8526:	780b      	ldrb	r3, [r1, #0]
    8528:	7003      	strb	r3, [r0, #0]
		pDst++;
    852a:	3001      	adds	r0, #1
		pSrc++;
    852c:	3101      	adds	r1, #1
	}while(--sz);
    852e:	4290      	cmp	r0, r2
    8530:	d1f9      	bne.n	8526 <m2m_memcpy+0x6>
}
    8532:	4770      	bx	lr

00008534 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    8534:	2a00      	cmp	r2, #0
    8536:	d004      	beq.n	8542 <m2m_memset+0xe>
    8538:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    853a:	7001      	strb	r1, [r0, #0]
		pBuf++;
    853c:	3001      	adds	r0, #1
	}while(--sz);
    853e:	4290      	cmp	r0, r2
    8540:	d1fb      	bne.n	853a <m2m_memset+0x6>
}
    8542:	4770      	bx	lr

00008544 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    8544:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    8546:	7802      	ldrb	r2, [r0, #0]
    8548:	2a00      	cmp	r2, #0
    854a:	d007      	beq.n	855c <m2m_strlen+0x18>
    854c:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    854e:	3001      	adds	r0, #1
    8550:	b280      	uxth	r0, r0
		pcStr++;
    8552:	3301      	adds	r3, #1
	while(*pcStr)
    8554:	781a      	ldrb	r2, [r3, #0]
    8556:	2a00      	cmp	r2, #0
    8558:	d1f9      	bne.n	854e <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    855a:	4770      	bx	lr
	uint16	u16StrLen = 0;
    855c:	2000      	movs	r0, #0
    855e:	e7fc      	b.n	855a <m2m_strlen+0x16>

00008560 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    8560:	4a02      	ldr	r2, [pc, #8]	; (856c <isr+0xc>)
    8562:	78d3      	ldrb	r3, [r2, #3]
    8564:	3301      	adds	r3, #1
    8566:	b2db      	uxtb	r3, r3
    8568:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    856a:	4770      	bx	lr
    856c:	2000043c 	.word	0x2000043c

00008570 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    8570:	4770      	bx	lr
	...

00008574 <hif_set_rx_done>:
{
    8574:	b500      	push	{lr}
    8576:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    8578:	2200      	movs	r2, #0
    857a:	4b0a      	ldr	r3, [pc, #40]	; (85a4 <hif_set_rx_done+0x30>)
    857c:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    857e:	2001      	movs	r0, #1
    8580:	4b09      	ldr	r3, [pc, #36]	; (85a8 <hif_set_rx_done+0x34>)
    8582:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    8584:	a901      	add	r1, sp, #4
    8586:	4809      	ldr	r0, [pc, #36]	; (85ac <hif_set_rx_done+0x38>)
    8588:	4b09      	ldr	r3, [pc, #36]	; (85b0 <hif_set_rx_done+0x3c>)
    858a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    858c:	2800      	cmp	r0, #0
    858e:	d001      	beq.n	8594 <hif_set_rx_done+0x20>
}
    8590:	b003      	add	sp, #12
    8592:	bd00      	pop	{pc}
	reg |= NBIT1;
    8594:	2102      	movs	r1, #2
    8596:	9b01      	ldr	r3, [sp, #4]
    8598:	4319      	orrs	r1, r3
    859a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    859c:	4803      	ldr	r0, [pc, #12]	; (85ac <hif_set_rx_done+0x38>)
    859e:	4b05      	ldr	r3, [pc, #20]	; (85b4 <hif_set_rx_done+0x40>)
    85a0:	4798      	blx	r3
    85a2:	e7f5      	b.n	8590 <hif_set_rx_done+0x1c>
    85a4:	2000043c 	.word	0x2000043c
    85a8:	00008241 	.word	0x00008241
    85ac:	00001070 	.word	0x00001070
    85b0:	000099bd 	.word	0x000099bd
    85b4:	000099c9 	.word	0x000099c9

000085b8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    85b8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    85ba:	4b0c      	ldr	r3, [pc, #48]	; (85ec <hif_chip_wake+0x34>)
    85bc:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    85be:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    85c0:	2b00      	cmp	r3, #0
    85c2:	d10d      	bne.n	85e0 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    85c4:	4b09      	ldr	r3, [pc, #36]	; (85ec <hif_chip_wake+0x34>)
    85c6:	785b      	ldrb	r3, [r3, #1]
    85c8:	2b00      	cmp	r3, #0
    85ca:	d103      	bne.n	85d4 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    85cc:	4b07      	ldr	r3, [pc, #28]	; (85ec <hif_chip_wake+0x34>)
    85ce:	781b      	ldrb	r3, [r3, #0]
    85d0:	2b00      	cmp	r3, #0
    85d2:	d106      	bne.n	85e2 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    85d4:	4a05      	ldr	r2, [pc, #20]	; (85ec <hif_chip_wake+0x34>)
    85d6:	7853      	ldrb	r3, [r2, #1]
    85d8:	3301      	adds	r3, #1
    85da:	b2db      	uxtb	r3, r3
    85dc:	7053      	strb	r3, [r2, #1]
    85de:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    85e0:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    85e2:	4b03      	ldr	r3, [pc, #12]	; (85f0 <hif_chip_wake+0x38>)
    85e4:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    85e6:	2800      	cmp	r0, #0
    85e8:	d0f4      	beq.n	85d4 <hif_chip_wake+0x1c>
    85ea:	e7f9      	b.n	85e0 <hif_chip_wake+0x28>
    85ec:	2000043c 	.word	0x2000043c
    85f0:	000096a5 	.word	0x000096a5

000085f4 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    85f4:	4b05      	ldr	r3, [pc, #20]	; (860c <hif_chip_sleep_sc+0x18>)
    85f6:	785b      	ldrb	r3, [r3, #1]
    85f8:	2b00      	cmp	r3, #0
    85fa:	d004      	beq.n	8606 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    85fc:	4a03      	ldr	r2, [pc, #12]	; (860c <hif_chip_sleep_sc+0x18>)
    85fe:	7853      	ldrb	r3, [r2, #1]
    8600:	3b01      	subs	r3, #1
    8602:	b2db      	uxtb	r3, r3
    8604:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    8606:	2000      	movs	r0, #0
    8608:	4770      	bx	lr
    860a:	46c0      	nop			; (mov r8, r8)
    860c:	2000043c 	.word	0x2000043c

00008610 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    8610:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    8612:	4b0b      	ldr	r3, [pc, #44]	; (8640 <hif_chip_sleep+0x30>)
    8614:	785b      	ldrb	r3, [r3, #1]
    8616:	2b00      	cmp	r3, #0
    8618:	d004      	beq.n	8624 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    861a:	4a09      	ldr	r2, [pc, #36]	; (8640 <hif_chip_sleep+0x30>)
    861c:	7853      	ldrb	r3, [r2, #1]
    861e:	3b01      	subs	r3, #1
    8620:	b2db      	uxtb	r3, r3
    8622:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    8624:	4b06      	ldr	r3, [pc, #24]	; (8640 <hif_chip_sleep+0x30>)
    8626:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    8628:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    862a:	2b00      	cmp	r3, #0
    862c:	d103      	bne.n	8636 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    862e:	4b04      	ldr	r3, [pc, #16]	; (8640 <hif_chip_sleep+0x30>)
    8630:	781b      	ldrb	r3, [r3, #0]
    8632:	2b00      	cmp	r3, #0
    8634:	d100      	bne.n	8638 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    8636:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    8638:	4b02      	ldr	r3, [pc, #8]	; (8644 <hif_chip_sleep+0x34>)
    863a:	4798      	blx	r3
    863c:	e7fb      	b.n	8636 <hif_chip_sleep+0x26>
    863e:	46c0      	nop			; (mov r8, r8)
    8640:	2000043c 	.word	0x2000043c
    8644:	0000963d 	.word	0x0000963d

00008648 <hif_deinit>:
*    @param [in]	arg
*				Pointer to the arguments.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_deinit(void * arg)
{
    8648:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    864a:	4b05      	ldr	r3, [pc, #20]	; (8660 <hif_deinit+0x18>)
    864c:	4798      	blx	r3
    864e:	0004      	movs	r4, r0
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    8650:	2228      	movs	r2, #40	; 0x28
    8652:	2100      	movs	r1, #0
    8654:	4803      	ldr	r0, [pc, #12]	; (8664 <hif_deinit+0x1c>)
    8656:	4b04      	ldr	r3, [pc, #16]	; (8668 <hif_deinit+0x20>)
    8658:	4798      	blx	r3
	return ret;
}
    865a:	0020      	movs	r0, r4
    865c:	bd10      	pop	{r4, pc}
    865e:	46c0      	nop			; (mov r8, r8)
    8660:	000085b9 	.word	0x000085b9
    8664:	2000043c 	.word	0x2000043c
    8668:	00008535 	.word	0x00008535

0000866c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    866c:	b5f0      	push	{r4, r5, r6, r7, lr}
    866e:	46de      	mov	lr, fp
    8670:	4657      	mov	r7, sl
    8672:	b580      	push	{r7, lr}
    8674:	b089      	sub	sp, #36	; 0x24
    8676:	4683      	mov	fp, r0
    8678:	468a      	mov	sl, r1
    867a:	9201      	str	r2, [sp, #4]
    867c:	9300      	str	r3, [sp, #0]
    867e:	ab10      	add	r3, sp, #64	; 0x40
    8680:	cb80      	ldmia	r3!, {r7}
    8682:	881e      	ldrh	r6, [r3, #0]
    8684:	ab12      	add	r3, sp, #72	; 0x48
    8686:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    8688:	227f      	movs	r2, #127	; 0x7f
    868a:	400a      	ands	r2, r1
    868c:	ab07      	add	r3, sp, #28
    868e:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    8690:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    8692:	2208      	movs	r2, #8
    8694:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    8696:	2f00      	cmp	r7, #0
    8698:	d03d      	beq.n	8716 <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    869a:	885a      	ldrh	r2, [r3, #2]
    869c:	1992      	adds	r2, r2, r6
    869e:	18aa      	adds	r2, r5, r2
    86a0:	b292      	uxth	r2, r2
    86a2:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    86a4:	4b69      	ldr	r3, [pc, #420]	; (884c <hif_send+0x1e0>)
    86a6:	4798      	blx	r3
    86a8:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    86aa:	d000      	beq.n	86ae <hif_send+0x42>
    86ac:	e0c1      	b.n	8832 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    86ae:	2300      	movs	r3, #0
    86b0:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    86b2:	aa02      	add	r2, sp, #8
    86b4:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    86b6:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    86b8:	9b04      	ldr	r3, [sp, #16]
    86ba:	465a      	mov	r2, fp
    86bc:	431a      	orrs	r2, r3
    86be:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    86c0:	9a04      	ldr	r2, [sp, #16]
    86c2:	4653      	mov	r3, sl
    86c4:	021b      	lsls	r3, r3, #8
    86c6:	4313      	orrs	r3, r2
    86c8:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    86ca:	ab07      	add	r3, sp, #28
    86cc:	885b      	ldrh	r3, [r3, #2]
    86ce:	9a04      	ldr	r2, [sp, #16]
    86d0:	041b      	lsls	r3, r3, #16
    86d2:	4313      	orrs	r3, r2
    86d4:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    86d6:	9904      	ldr	r1, [sp, #16]
    86d8:	485d      	ldr	r0, [pc, #372]	; (8850 <hif_send+0x1e4>)
    86da:	4b5e      	ldr	r3, [pc, #376]	; (8854 <hif_send+0x1e8>)
    86dc:	4798      	blx	r3
    86de:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    86e0:	d157      	bne.n	8792 <hif_send+0x126>

		reg = 0UL;
    86e2:	2300      	movs	r3, #0
    86e4:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    86e6:	9b04      	ldr	r3, [sp, #16]
    86e8:	2202      	movs	r2, #2
    86ea:	4313      	orrs	r3, r2
    86ec:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    86ee:	9904      	ldr	r1, [sp, #16]
    86f0:	4859      	ldr	r0, [pc, #356]	; (8858 <hif_send+0x1ec>)
    86f2:	4b58      	ldr	r3, [pc, #352]	; (8854 <hif_send+0x1e8>)
    86f4:	4798      	blx	r3
    86f6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    86f8:	d14b      	bne.n	8792 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    86fa:	2200      	movs	r2, #0
    86fc:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    86fe:	ab02      	add	r3, sp, #8
    8700:	80da      	strh	r2, [r3, #6]
    8702:	3306      	adds	r3, #6
    8704:	881b      	ldrh	r3, [r3, #0]
    8706:	b29b      	uxth	r3, r3
    8708:	4a54      	ldr	r2, [pc, #336]	; (885c <hif_send+0x1f0>)
    870a:	4293      	cmp	r3, r2
    870c:	d849      	bhi.n	87a2 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    870e:	4c54      	ldr	r4, [pc, #336]	; (8860 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    8710:	4b54      	ldr	r3, [pc, #336]	; (8864 <hif_send+0x1f8>)
    8712:	469a      	mov	sl, r3
    8714:	e017      	b.n	8746 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    8716:	ab07      	add	r3, sp, #28
    8718:	885a      	ldrh	r2, [r3, #2]
    871a:	9900      	ldr	r1, [sp, #0]
    871c:	468c      	mov	ip, r1
    871e:	4462      	add	r2, ip
    8720:	b292      	uxth	r2, r2
    8722:	805a      	strh	r2, [r3, #2]
    8724:	e7be      	b.n	86a4 <hif_send+0x38>
				nm_bsp_sleep(1);
    8726:	2001      	movs	r0, #1
    8728:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    872a:	9b04      	ldr	r3, [sp, #16]
    872c:	079b      	lsls	r3, r3, #30
    872e:	d528      	bpl.n	8782 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    8730:	ab02      	add	r3, sp, #8
    8732:	88da      	ldrh	r2, [r3, #6]
    8734:	3201      	adds	r2, #1
    8736:	b292      	uxth	r2, r2
    8738:	80da      	strh	r2, [r3, #6]
    873a:	3306      	adds	r3, #6
    873c:	881b      	ldrh	r3, [r3, #0]
    873e:	b29b      	uxth	r3, r3
    8740:	4a46      	ldr	r2, [pc, #280]	; (885c <hif_send+0x1f0>)
    8742:	4293      	cmp	r3, r2
    8744:	d82d      	bhi.n	87a2 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    8746:	a904      	add	r1, sp, #16
    8748:	4843      	ldr	r0, [pc, #268]	; (8858 <hif_send+0x1ec>)
    874a:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    874c:	2800      	cmp	r0, #0
    874e:	d128      	bne.n	87a2 <hif_send+0x136>
			if(cnt >= 500) {
    8750:	ab02      	add	r3, sp, #8
    8752:	3306      	adds	r3, #6
    8754:	881b      	ldrh	r3, [r3, #0]
    8756:	b29b      	uxth	r3, r3
    8758:	22f4      	movs	r2, #244	; 0xf4
    875a:	32ff      	adds	r2, #255	; 0xff
    875c:	4293      	cmp	r3, r2
    875e:	d9e4      	bls.n	872a <hif_send+0xbe>
				if(cnt < 501) {
    8760:	ab02      	add	r3, sp, #8
    8762:	3306      	adds	r3, #6
    8764:	881b      	ldrh	r3, [r3, #0]
    8766:	b29b      	uxth	r3, r3
    8768:	3201      	adds	r2, #1
    876a:	4293      	cmp	r3, r2
    876c:	d8db      	bhi.n	8726 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    876e:	483e      	ldr	r0, [pc, #248]	; (8868 <hif_send+0x1fc>)
    8770:	4b3e      	ldr	r3, [pc, #248]	; (886c <hif_send+0x200>)
    8772:	4798      	blx	r3
    8774:	483e      	ldr	r0, [pc, #248]	; (8870 <hif_send+0x204>)
    8776:	4b3f      	ldr	r3, [pc, #252]	; (8874 <hif_send+0x208>)
    8778:	4798      	blx	r3
    877a:	200d      	movs	r0, #13
    877c:	4b3e      	ldr	r3, [pc, #248]	; (8878 <hif_send+0x20c>)
    877e:	4798      	blx	r3
    8780:	e7d1      	b.n	8726 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    8782:	a905      	add	r1, sp, #20
    8784:	483d      	ldr	r0, [pc, #244]	; (887c <hif_send+0x210>)
    8786:	4b36      	ldr	r3, [pc, #216]	; (8860 <hif_send+0x1f4>)
    8788:	4798      	blx	r3
    878a:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    878c:	d009      	beq.n	87a2 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    878e:	2300      	movs	r3, #0
    8790:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    8792:	4b3b      	ldr	r3, [pc, #236]	; (8880 <hif_send+0x214>)
    8794:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    8796:	0020      	movs	r0, r4
    8798:	b009      	add	sp, #36	; 0x24
    879a:	bc0c      	pop	{r2, r3}
    879c:	4692      	mov	sl, r2
    879e:	469b      	mov	fp, r3
    87a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    87a2:	9b05      	ldr	r3, [sp, #20]
    87a4:	2b00      	cmp	r3, #0
    87a6:	d03f      	beq.n	8828 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    87a8:	9b05      	ldr	r3, [sp, #20]
    87aa:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    87ac:	a907      	add	r1, sp, #28
    87ae:	884b      	ldrh	r3, [r1, #2]
    87b0:	b29b      	uxth	r3, r3
    87b2:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    87b4:	9806      	ldr	r0, [sp, #24]
    87b6:	2208      	movs	r2, #8
    87b8:	4b32      	ldr	r3, [pc, #200]	; (8884 <hif_send+0x218>)
    87ba:	4798      	blx	r3
    87bc:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    87be:	d1e8      	bne.n	8792 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    87c0:	9b06      	ldr	r3, [sp, #24]
    87c2:	3308      	adds	r3, #8
    87c4:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    87c6:	9b01      	ldr	r3, [sp, #4]
    87c8:	2b00      	cmp	r3, #0
    87ca:	d00b      	beq.n	87e4 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    87cc:	9806      	ldr	r0, [sp, #24]
    87ce:	9a00      	ldr	r2, [sp, #0]
    87d0:	0019      	movs	r1, r3
    87d2:	4b2c      	ldr	r3, [pc, #176]	; (8884 <hif_send+0x218>)
    87d4:	4798      	blx	r3
    87d6:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    87d8:	d1db      	bne.n	8792 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    87da:	9b06      	ldr	r3, [sp, #24]
    87dc:	9a00      	ldr	r2, [sp, #0]
    87de:	4694      	mov	ip, r2
    87e0:	4463      	add	r3, ip
    87e2:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    87e4:	2f00      	cmp	r7, #0
    87e6:	d00e      	beq.n	8806 <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    87e8:	9b06      	ldr	r3, [sp, #24]
    87ea:	9a00      	ldr	r2, [sp, #0]
    87ec:	1aad      	subs	r5, r5, r2
    87ee:	18ed      	adds	r5, r5, r3
    87f0:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    87f2:	9806      	ldr	r0, [sp, #24]
    87f4:	0032      	movs	r2, r6
    87f6:	0039      	movs	r1, r7
    87f8:	4b22      	ldr	r3, [pc, #136]	; (8884 <hif_send+0x218>)
    87fa:	4798      	blx	r3
    87fc:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    87fe:	d1c8      	bne.n	8792 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    8800:	9b06      	ldr	r3, [sp, #24]
    8802:	18f3      	adds	r3, r6, r3
    8804:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    8806:	9b05      	ldr	r3, [sp, #20]
    8808:	009b      	lsls	r3, r3, #2
    880a:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    880c:	9b04      	ldr	r3, [sp, #16]
    880e:	2202      	movs	r2, #2
    8810:	4313      	orrs	r3, r2
    8812:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    8814:	9904      	ldr	r1, [sp, #16]
    8816:	481c      	ldr	r0, [pc, #112]	; (8888 <hif_send+0x21c>)
    8818:	4b0e      	ldr	r3, [pc, #56]	; (8854 <hif_send+0x1e8>)
    881a:	4798      	blx	r3
    881c:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    881e:	d1b8      	bne.n	8792 <hif_send+0x126>
 	ret = hif_chip_sleep();
    8820:	4b1a      	ldr	r3, [pc, #104]	; (888c <hif_send+0x220>)
    8822:	4798      	blx	r3
    8824:	0004      	movs	r4, r0
	return ret;
    8826:	e7b6      	b.n	8796 <hif_send+0x12a>
			ret = hif_chip_sleep();
    8828:	4b18      	ldr	r3, [pc, #96]	; (888c <hif_send+0x220>)
    882a:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    882c:	2403      	movs	r4, #3
    882e:	4264      	negs	r4, r4
			goto ERR2;
    8830:	e7b1      	b.n	8796 <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    8832:	22cb      	movs	r2, #203	; 0xcb
    8834:	0052      	lsls	r2, r2, #1
    8836:	4916      	ldr	r1, [pc, #88]	; (8890 <hif_send+0x224>)
    8838:	4816      	ldr	r0, [pc, #88]	; (8894 <hif_send+0x228>)
    883a:	4b0c      	ldr	r3, [pc, #48]	; (886c <hif_send+0x200>)
    883c:	4798      	blx	r3
    883e:	4816      	ldr	r0, [pc, #88]	; (8898 <hif_send+0x22c>)
    8840:	4b0c      	ldr	r3, [pc, #48]	; (8874 <hif_send+0x208>)
    8842:	4798      	blx	r3
    8844:	200d      	movs	r0, #13
    8846:	4b0c      	ldr	r3, [pc, #48]	; (8878 <hif_send+0x20c>)
    8848:	4798      	blx	r3
		goto ERR2;
    884a:	e7a4      	b.n	8796 <hif_send+0x12a>
    884c:	000085b9 	.word	0x000085b9
    8850:	0000108c 	.word	0x0000108c
    8854:	000099c9 	.word	0x000099c9
    8858:	00001078 	.word	0x00001078
    885c:	000003e7 	.word	0x000003e7
    8860:	000099bd 	.word	0x000099bd
    8864:	00008129 	.word	0x00008129
    8868:	00015998 	.word	0x00015998
    886c:	000140dd 	.word	0x000140dd
    8870:	000159a4 	.word	0x000159a4
    8874:	000141f9 	.word	0x000141f9
    8878:	00014111 	.word	0x00014111
    887c:	00150400 	.word	0x00150400
    8880:	000085f5 	.word	0x000085f5
    8884:	00009a3d 	.word	0x00009a3d
    8888:	0000106c 	.word	0x0000106c
    888c:	00008611 	.word	0x00008611
    8890:	000156b0 	.word	0x000156b0
    8894:	00015668 	.word	0x00015668
    8898:	000159b4 	.word	0x000159b4

0000889c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    889c:	b5f0      	push	{r4, r5, r6, r7, lr}
    889e:	46ce      	mov	lr, r9
    88a0:	4647      	mov	r7, r8
    88a2:	b580      	push	{r7, lr}
    88a4:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    88a6:	4bcf      	ldr	r3, [pc, #828]	; (8be4 <hif_handle_isr+0x348>)
    88a8:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    88aa:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    88ac:	e080      	b.n	89b0 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    88ae:	4bcd      	ldr	r3, [pc, #820]	; (8be4 <hif_handle_isr+0x348>)
    88b0:	9a05      	ldr	r2, [sp, #20]
    88b2:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    88b4:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    88b6:	af04      	add	r7, sp, #16
    88b8:	2204      	movs	r2, #4
    88ba:	0039      	movs	r1, r7
    88bc:	9805      	ldr	r0, [sp, #20]
    88be:	4bca      	ldr	r3, [pc, #808]	; (8be8 <hif_handle_isr+0x34c>)
    88c0:	4798      	blx	r3
    88c2:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    88c4:	887b      	ldrh	r3, [r7, #2]
    88c6:	b29b      	uxth	r3, r3
    88c8:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    88ca:	2800      	cmp	r0, #0
    88cc:	d133      	bne.n	8936 <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    88ce:	ab04      	add	r3, sp, #16
    88d0:	885b      	ldrh	r3, [r3, #2]
    88d2:	b29b      	uxth	r3, r3
    88d4:	429d      	cmp	r5, r3
    88d6:	d004      	beq.n	88e2 <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    88d8:	ab04      	add	r3, sp, #16
    88da:	885b      	ldrh	r3, [r3, #2]
    88dc:	1aeb      	subs	r3, r5, r3
    88de:	2b04      	cmp	r3, #4
    88e0:	dc39      	bgt.n	8956 <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    88e2:	ab04      	add	r3, sp, #16
    88e4:	781b      	ldrb	r3, [r3, #0]
    88e6:	2b01      	cmp	r3, #1
    88e8:	d04e      	beq.n	8988 <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    88ea:	ab04      	add	r3, sp, #16
    88ec:	781b      	ldrb	r3, [r3, #0]
    88ee:	2b02      	cmp	r3, #2
    88f0:	d078      	beq.n	89e4 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    88f2:	ab04      	add	r3, sp, #16
    88f4:	781b      	ldrb	r3, [r3, #0]
    88f6:	2b04      	cmp	r3, #4
    88f8:	d100      	bne.n	88fc <hif_handle_isr+0x60>
    88fa:	e090      	b.n	8a1e <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    88fc:	ab04      	add	r3, sp, #16
    88fe:	781b      	ldrb	r3, [r3, #0]
    8900:	2b06      	cmp	r3, #6
    8902:	d100      	bne.n	8906 <hif_handle_isr+0x6a>
    8904:	e0a8      	b.n	8a58 <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    8906:	ab04      	add	r3, sp, #16
    8908:	781b      	ldrb	r3, [r3, #0]
    890a:	2b07      	cmp	r3, #7
    890c:	d100      	bne.n	8910 <hif_handle_isr+0x74>
    890e:	e0bf      	b.n	8a90 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    8910:	ab04      	add	r3, sp, #16
    8912:	781b      	ldrb	r3, [r3, #0]
    8914:	2b05      	cmp	r3, #5
    8916:	d100      	bne.n	891a <hif_handle_isr+0x7e>
    8918:	e0d6      	b.n	8ac8 <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    891a:	4ab4      	ldr	r2, [pc, #720]	; (8bec <hif_handle_isr+0x350>)
    891c:	49b4      	ldr	r1, [pc, #720]	; (8bf0 <hif_handle_isr+0x354>)
    891e:	48b5      	ldr	r0, [pc, #724]	; (8bf4 <hif_handle_isr+0x358>)
    8920:	4bb5      	ldr	r3, [pc, #724]	; (8bf8 <hif_handle_isr+0x35c>)
    8922:	4798      	blx	r3
    8924:	48b5      	ldr	r0, [pc, #724]	; (8bfc <hif_handle_isr+0x360>)
    8926:	4bb6      	ldr	r3, [pc, #728]	; (8c00 <hif_handle_isr+0x364>)
    8928:	4798      	blx	r3
    892a:	200d      	movs	r0, #13
    892c:	4bb5      	ldr	r3, [pc, #724]	; (8c04 <hif_handle_isr+0x368>)
    892e:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    8930:	2406      	movs	r4, #6
    8932:	4264      	negs	r4, r4
    8934:	e116      	b.n	8b64 <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    8936:	22d2      	movs	r2, #210	; 0xd2
    8938:	32ff      	adds	r2, #255	; 0xff
    893a:	49ad      	ldr	r1, [pc, #692]	; (8bf0 <hif_handle_isr+0x354>)
    893c:	48ad      	ldr	r0, [pc, #692]	; (8bf4 <hif_handle_isr+0x358>)
    893e:	4bae      	ldr	r3, [pc, #696]	; (8bf8 <hif_handle_isr+0x35c>)
    8940:	4798      	blx	r3
    8942:	48b1      	ldr	r0, [pc, #708]	; (8c08 <hif_handle_isr+0x36c>)
    8944:	4bae      	ldr	r3, [pc, #696]	; (8c00 <hif_handle_isr+0x364>)
    8946:	4798      	blx	r3
    8948:	200d      	movs	r0, #13
    894a:	4bae      	ldr	r3, [pc, #696]	; (8c04 <hif_handle_isr+0x368>)
    894c:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    894e:	2001      	movs	r0, #1
    8950:	4bae      	ldr	r3, [pc, #696]	; (8c0c <hif_handle_isr+0x370>)
    8952:	4798      	blx	r3
    8954:	e106      	b.n	8b64 <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    8956:	22ed      	movs	r2, #237	; 0xed
    8958:	0052      	lsls	r2, r2, #1
    895a:	49a5      	ldr	r1, [pc, #660]	; (8bf0 <hif_handle_isr+0x354>)
    895c:	48a5      	ldr	r0, [pc, #660]	; (8bf4 <hif_handle_isr+0x358>)
    895e:	4ca6      	ldr	r4, [pc, #664]	; (8bf8 <hif_handle_isr+0x35c>)
    8960:	47a0      	blx	r4
    8962:	a904      	add	r1, sp, #16
    8964:	884a      	ldrh	r2, [r1, #2]
    8966:	b292      	uxth	r2, r2
    8968:	780b      	ldrb	r3, [r1, #0]
    896a:	b2db      	uxtb	r3, r3
    896c:	7849      	ldrb	r1, [r1, #1]
    896e:	9100      	str	r1, [sp, #0]
    8970:	0029      	movs	r1, r5
    8972:	48a7      	ldr	r0, [pc, #668]	; (8c10 <hif_handle_isr+0x374>)
    8974:	47a0      	blx	r4
    8976:	200d      	movs	r0, #13
    8978:	4ba2      	ldr	r3, [pc, #648]	; (8c04 <hif_handle_isr+0x368>)
    897a:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    897c:	2001      	movs	r0, #1
    897e:	4ba3      	ldr	r3, [pc, #652]	; (8c0c <hif_handle_isr+0x370>)
    8980:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    8982:	2406      	movs	r4, #6
    8984:	4264      	negs	r4, r4
    8986:	e0ed      	b.n	8b64 <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    8988:	4b96      	ldr	r3, [pc, #600]	; (8be4 <hif_handle_isr+0x348>)
    898a:	68db      	ldr	r3, [r3, #12]
    898c:	2b00      	cmp	r3, #0
    898e:	d01c      	beq.n	89ca <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    8990:	4b94      	ldr	r3, [pc, #592]	; (8be4 <hif_handle_isr+0x348>)
    8992:	68db      	ldr	r3, [r3, #12]
    8994:	aa04      	add	r2, sp, #16
    8996:	7850      	ldrb	r0, [r2, #1]
    8998:	b2c0      	uxtb	r0, r0
    899a:	8851      	ldrh	r1, [r2, #2]
    899c:	9a05      	ldr	r2, [sp, #20]
    899e:	3208      	adds	r2, #8
    89a0:	3908      	subs	r1, #8
    89a2:	b289      	uxth	r1, r1
    89a4:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    89a6:	4b8f      	ldr	r3, [pc, #572]	; (8be4 <hif_handle_isr+0x348>)
    89a8:	789b      	ldrb	r3, [r3, #2]
    89aa:	2b00      	cmp	r3, #0
    89ac:	d000      	beq.n	89b0 <hif_handle_isr+0x114>
    89ae:	e09c      	b.n	8aea <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    89b0:	4643      	mov	r3, r8
    89b2:	78db      	ldrb	r3, [r3, #3]
    89b4:	2b00      	cmp	r3, #0
    89b6:	d100      	bne.n	89ba <hif_handle_isr+0x11e>
    89b8:	e158      	b.n	8c6c <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    89ba:	464b      	mov	r3, r9
    89bc:	78db      	ldrb	r3, [r3, #3]
    89be:	3b01      	subs	r3, #1
    89c0:	b2db      	uxtb	r3, r3
    89c2:	464a      	mov	r2, r9
    89c4:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    89c6:	4e93      	ldr	r6, [pc, #588]	; (8c14 <hif_handle_isr+0x378>)
    89c8:	e0d7      	b.n	8b7a <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    89ca:	22f3      	movs	r2, #243	; 0xf3
    89cc:	0052      	lsls	r2, r2, #1
    89ce:	4988      	ldr	r1, [pc, #544]	; (8bf0 <hif_handle_isr+0x354>)
    89d0:	4888      	ldr	r0, [pc, #544]	; (8bf4 <hif_handle_isr+0x358>)
    89d2:	4b89      	ldr	r3, [pc, #548]	; (8bf8 <hif_handle_isr+0x35c>)
    89d4:	4798      	blx	r3
    89d6:	4890      	ldr	r0, [pc, #576]	; (8c18 <hif_handle_isr+0x37c>)
    89d8:	4b89      	ldr	r3, [pc, #548]	; (8c00 <hif_handle_isr+0x364>)
    89da:	4798      	blx	r3
    89dc:	200d      	movs	r0, #13
    89de:	4b89      	ldr	r3, [pc, #548]	; (8c04 <hif_handle_isr+0x368>)
    89e0:	4798      	blx	r3
    89e2:	e7e0      	b.n	89a6 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    89e4:	4b7f      	ldr	r3, [pc, #508]	; (8be4 <hif_handle_isr+0x348>)
    89e6:	691b      	ldr	r3, [r3, #16]
    89e8:	2b00      	cmp	r3, #0
    89ea:	d00b      	beq.n	8a04 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    89ec:	4b7d      	ldr	r3, [pc, #500]	; (8be4 <hif_handle_isr+0x348>)
    89ee:	691b      	ldr	r3, [r3, #16]
    89f0:	aa04      	add	r2, sp, #16
    89f2:	7850      	ldrb	r0, [r2, #1]
    89f4:	b2c0      	uxtb	r0, r0
    89f6:	8851      	ldrh	r1, [r2, #2]
    89f8:	9a05      	ldr	r2, [sp, #20]
    89fa:	3208      	adds	r2, #8
    89fc:	3908      	subs	r1, #8
    89fe:	b289      	uxth	r1, r1
    8a00:	4798      	blx	r3
    8a02:	e7d0      	b.n	89a6 <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    8a04:	22f7      	movs	r2, #247	; 0xf7
    8a06:	0052      	lsls	r2, r2, #1
    8a08:	4979      	ldr	r1, [pc, #484]	; (8bf0 <hif_handle_isr+0x354>)
    8a0a:	487a      	ldr	r0, [pc, #488]	; (8bf4 <hif_handle_isr+0x358>)
    8a0c:	4b7a      	ldr	r3, [pc, #488]	; (8bf8 <hif_handle_isr+0x35c>)
    8a0e:	4798      	blx	r3
    8a10:	4882      	ldr	r0, [pc, #520]	; (8c1c <hif_handle_isr+0x380>)
    8a12:	4b7b      	ldr	r3, [pc, #492]	; (8c00 <hif_handle_isr+0x364>)
    8a14:	4798      	blx	r3
    8a16:	200d      	movs	r0, #13
    8a18:	4b7a      	ldr	r3, [pc, #488]	; (8c04 <hif_handle_isr+0x368>)
    8a1a:	4798      	blx	r3
    8a1c:	e7c3      	b.n	89a6 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    8a1e:	4b71      	ldr	r3, [pc, #452]	; (8be4 <hif_handle_isr+0x348>)
    8a20:	695b      	ldr	r3, [r3, #20]
    8a22:	2b00      	cmp	r3, #0
    8a24:	d00b      	beq.n	8a3e <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    8a26:	4b6f      	ldr	r3, [pc, #444]	; (8be4 <hif_handle_isr+0x348>)
    8a28:	695b      	ldr	r3, [r3, #20]
    8a2a:	aa04      	add	r2, sp, #16
    8a2c:	7850      	ldrb	r0, [r2, #1]
    8a2e:	b2c0      	uxtb	r0, r0
    8a30:	8851      	ldrh	r1, [r2, #2]
    8a32:	9a05      	ldr	r2, [sp, #20]
    8a34:	3208      	adds	r2, #8
    8a36:	3908      	subs	r1, #8
    8a38:	b289      	uxth	r1, r1
    8a3a:	4798      	blx	r3
    8a3c:	e7b3      	b.n	89a6 <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    8a3e:	22fb      	movs	r2, #251	; 0xfb
    8a40:	0052      	lsls	r2, r2, #1
    8a42:	496b      	ldr	r1, [pc, #428]	; (8bf0 <hif_handle_isr+0x354>)
    8a44:	486b      	ldr	r0, [pc, #428]	; (8bf4 <hif_handle_isr+0x358>)
    8a46:	4b6c      	ldr	r3, [pc, #432]	; (8bf8 <hif_handle_isr+0x35c>)
    8a48:	4798      	blx	r3
    8a4a:	4875      	ldr	r0, [pc, #468]	; (8c20 <hif_handle_isr+0x384>)
    8a4c:	4b6c      	ldr	r3, [pc, #432]	; (8c00 <hif_handle_isr+0x364>)
    8a4e:	4798      	blx	r3
    8a50:	200d      	movs	r0, #13
    8a52:	4b6c      	ldr	r3, [pc, #432]	; (8c04 <hif_handle_isr+0x368>)
    8a54:	4798      	blx	r3
    8a56:	e7a6      	b.n	89a6 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    8a58:	4b62      	ldr	r3, [pc, #392]	; (8be4 <hif_handle_isr+0x348>)
    8a5a:	6a1b      	ldr	r3, [r3, #32]
    8a5c:	2b00      	cmp	r3, #0
    8a5e:	d00b      	beq.n	8a78 <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    8a60:	4b60      	ldr	r3, [pc, #384]	; (8be4 <hif_handle_isr+0x348>)
    8a62:	6a1b      	ldr	r3, [r3, #32]
    8a64:	aa04      	add	r2, sp, #16
    8a66:	7850      	ldrb	r0, [r2, #1]
    8a68:	b2c0      	uxtb	r0, r0
    8a6a:	8851      	ldrh	r1, [r2, #2]
    8a6c:	9a05      	ldr	r2, [sp, #20]
    8a6e:	3208      	adds	r2, #8
    8a70:	3908      	subs	r1, #8
    8a72:	b289      	uxth	r1, r1
    8a74:	4798      	blx	r3
    8a76:	e796      	b.n	89a6 <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    8a78:	4a6a      	ldr	r2, [pc, #424]	; (8c24 <hif_handle_isr+0x388>)
    8a7a:	495d      	ldr	r1, [pc, #372]	; (8bf0 <hif_handle_isr+0x354>)
    8a7c:	485d      	ldr	r0, [pc, #372]	; (8bf4 <hif_handle_isr+0x358>)
    8a7e:	4b5e      	ldr	r3, [pc, #376]	; (8bf8 <hif_handle_isr+0x35c>)
    8a80:	4798      	blx	r3
    8a82:	4869      	ldr	r0, [pc, #420]	; (8c28 <hif_handle_isr+0x38c>)
    8a84:	4b5e      	ldr	r3, [pc, #376]	; (8c00 <hif_handle_isr+0x364>)
    8a86:	4798      	blx	r3
    8a88:	200d      	movs	r0, #13
    8a8a:	4b5e      	ldr	r3, [pc, #376]	; (8c04 <hif_handle_isr+0x368>)
    8a8c:	4798      	blx	r3
    8a8e:	e78a      	b.n	89a6 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    8a90:	4b54      	ldr	r3, [pc, #336]	; (8be4 <hif_handle_isr+0x348>)
    8a92:	699b      	ldr	r3, [r3, #24]
    8a94:	2b00      	cmp	r3, #0
    8a96:	d00b      	beq.n	8ab0 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    8a98:	4b52      	ldr	r3, [pc, #328]	; (8be4 <hif_handle_isr+0x348>)
    8a9a:	699b      	ldr	r3, [r3, #24]
    8a9c:	aa04      	add	r2, sp, #16
    8a9e:	7850      	ldrb	r0, [r2, #1]
    8aa0:	b2c0      	uxtb	r0, r0
    8aa2:	8851      	ldrh	r1, [r2, #2]
    8aa4:	9a05      	ldr	r2, [sp, #20]
    8aa6:	3208      	adds	r2, #8
    8aa8:	3908      	subs	r1, #8
    8aaa:	b289      	uxth	r1, r1
    8aac:	4798      	blx	r3
    8aae:	e77a      	b.n	89a6 <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    8ab0:	4a5e      	ldr	r2, [pc, #376]	; (8c2c <hif_handle_isr+0x390>)
    8ab2:	494f      	ldr	r1, [pc, #316]	; (8bf0 <hif_handle_isr+0x354>)
    8ab4:	484f      	ldr	r0, [pc, #316]	; (8bf4 <hif_handle_isr+0x358>)
    8ab6:	4b50      	ldr	r3, [pc, #320]	; (8bf8 <hif_handle_isr+0x35c>)
    8ab8:	4798      	blx	r3
    8aba:	485d      	ldr	r0, [pc, #372]	; (8c30 <hif_handle_isr+0x394>)
    8abc:	4b50      	ldr	r3, [pc, #320]	; (8c00 <hif_handle_isr+0x364>)
    8abe:	4798      	blx	r3
    8ac0:	200d      	movs	r0, #13
    8ac2:	4b50      	ldr	r3, [pc, #320]	; (8c04 <hif_handle_isr+0x368>)
    8ac4:	4798      	blx	r3
    8ac6:	e76e      	b.n	89a6 <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    8ac8:	4b46      	ldr	r3, [pc, #280]	; (8be4 <hif_handle_isr+0x348>)
    8aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8acc:	2b00      	cmp	r3, #0
    8ace:	d100      	bne.n	8ad2 <hif_handle_isr+0x236>
    8ad0:	e769      	b.n	89a6 <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    8ad2:	4b44      	ldr	r3, [pc, #272]	; (8be4 <hif_handle_isr+0x348>)
    8ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ad6:	aa04      	add	r2, sp, #16
    8ad8:	7850      	ldrb	r0, [r2, #1]
    8ada:	b2c0      	uxtb	r0, r0
    8adc:	8851      	ldrh	r1, [r2, #2]
    8ade:	9a05      	ldr	r2, [sp, #20]
    8ae0:	3208      	adds	r2, #8
    8ae2:	3908      	subs	r1, #8
    8ae4:	b289      	uxth	r1, r1
    8ae6:	4798      	blx	r3
    8ae8:	e75d      	b.n	89a6 <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    8aea:	4a52      	ldr	r2, [pc, #328]	; (8c34 <hif_handle_isr+0x398>)
    8aec:	4940      	ldr	r1, [pc, #256]	; (8bf0 <hif_handle_isr+0x354>)
    8aee:	4841      	ldr	r0, [pc, #260]	; (8bf4 <hif_handle_isr+0x358>)
    8af0:	4c41      	ldr	r4, [pc, #260]	; (8bf8 <hif_handle_isr+0x35c>)
    8af2:	47a0      	blx	r4
    8af4:	ab04      	add	r3, sp, #16
    8af6:	7819      	ldrb	r1, [r3, #0]
    8af8:	b2c9      	uxtb	r1, r1
    8afa:	785a      	ldrb	r2, [r3, #1]
    8afc:	b2d2      	uxtb	r2, r2
    8afe:	484e      	ldr	r0, [pc, #312]	; (8c38 <hif_handle_isr+0x39c>)
    8b00:	47a0      	blx	r4
    8b02:	200d      	movs	r0, #13
    8b04:	4b3f      	ldr	r3, [pc, #252]	; (8c04 <hif_handle_isr+0x368>)
    8b06:	4798      	blx	r3
					ret = hif_set_rx_done();
    8b08:	4b4c      	ldr	r3, [pc, #304]	; (8c3c <hif_handle_isr+0x3a0>)
    8b0a:	4798      	blx	r3
    8b0c:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    8b0e:	d129      	bne.n	8b64 <hif_handle_isr+0x2c8>
    8b10:	e74e      	b.n	89b0 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    8b12:	2287      	movs	r2, #135	; 0x87
    8b14:	0092      	lsls	r2, r2, #2
    8b16:	4936      	ldr	r1, [pc, #216]	; (8bf0 <hif_handle_isr+0x354>)
    8b18:	4836      	ldr	r0, [pc, #216]	; (8bf4 <hif_handle_isr+0x358>)
    8b1a:	4b37      	ldr	r3, [pc, #220]	; (8bf8 <hif_handle_isr+0x35c>)
    8b1c:	4798      	blx	r3
    8b1e:	4848      	ldr	r0, [pc, #288]	; (8c40 <hif_handle_isr+0x3a4>)
    8b20:	4b37      	ldr	r3, [pc, #220]	; (8c00 <hif_handle_isr+0x364>)
    8b22:	4798      	blx	r3
    8b24:	200d      	movs	r0, #13
    8b26:	4b37      	ldr	r3, [pc, #220]	; (8c04 <hif_handle_isr+0x368>)
    8b28:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    8b2a:	2402      	movs	r4, #2
    8b2c:	4264      	negs	r4, r4
    8b2e:	e019      	b.n	8b64 <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    8b30:	2289      	movs	r2, #137	; 0x89
    8b32:	0092      	lsls	r2, r2, #2
    8b34:	492e      	ldr	r1, [pc, #184]	; (8bf0 <hif_handle_isr+0x354>)
    8b36:	482f      	ldr	r0, [pc, #188]	; (8bf4 <hif_handle_isr+0x358>)
    8b38:	4c2f      	ldr	r4, [pc, #188]	; (8bf8 <hif_handle_isr+0x35c>)
    8b3a:	47a0      	blx	r4
    8b3c:	9903      	ldr	r1, [sp, #12]
    8b3e:	4841      	ldr	r0, [pc, #260]	; (8c44 <hif_handle_isr+0x3a8>)
    8b40:	47a0      	blx	r4
    8b42:	200d      	movs	r0, #13
    8b44:	4b2f      	ldr	r3, [pc, #188]	; (8c04 <hif_handle_isr+0x368>)
    8b46:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    8b48:	240c      	movs	r4, #12
    8b4a:	4264      	negs	r4, r4
    8b4c:	e00a      	b.n	8b64 <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    8b4e:	4a3e      	ldr	r2, [pc, #248]	; (8c48 <hif_handle_isr+0x3ac>)
    8b50:	4927      	ldr	r1, [pc, #156]	; (8bf0 <hif_handle_isr+0x354>)
    8b52:	4828      	ldr	r0, [pc, #160]	; (8bf4 <hif_handle_isr+0x358>)
    8b54:	4b28      	ldr	r3, [pc, #160]	; (8bf8 <hif_handle_isr+0x35c>)
    8b56:	4798      	blx	r3
    8b58:	483c      	ldr	r0, [pc, #240]	; (8c4c <hif_handle_isr+0x3b0>)
    8b5a:	4b29      	ldr	r3, [pc, #164]	; (8c00 <hif_handle_isr+0x364>)
    8b5c:	4798      	blx	r3
    8b5e:	200d      	movs	r0, #13
    8b60:	4b28      	ldr	r3, [pc, #160]	; (8c04 <hif_handle_isr+0x368>)
    8b62:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    8b64:	4a3a      	ldr	r2, [pc, #232]	; (8c50 <hif_handle_isr+0x3b4>)
    8b66:	493b      	ldr	r1, [pc, #236]	; (8c54 <hif_handle_isr+0x3b8>)
    8b68:	4822      	ldr	r0, [pc, #136]	; (8bf4 <hif_handle_isr+0x358>)
    8b6a:	4f23      	ldr	r7, [pc, #140]	; (8bf8 <hif_handle_isr+0x35c>)
    8b6c:	47b8      	blx	r7
    8b6e:	0021      	movs	r1, r4
    8b70:	4839      	ldr	r0, [pc, #228]	; (8c58 <hif_handle_isr+0x3bc>)
    8b72:	47b8      	blx	r7
    8b74:	200d      	movs	r0, #13
    8b76:	4b23      	ldr	r3, [pc, #140]	; (8c04 <hif_handle_isr+0x368>)
    8b78:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    8b7a:	a903      	add	r1, sp, #12
    8b7c:	4837      	ldr	r0, [pc, #220]	; (8c5c <hif_handle_isr+0x3c0>)
    8b7e:	47b0      	blx	r6
    8b80:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    8b82:	d1e4      	bne.n	8b4e <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    8b84:	9b03      	ldr	r3, [sp, #12]
    8b86:	07db      	lsls	r3, r3, #31
    8b88:	d5d2      	bpl.n	8b30 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    8b8a:	2000      	movs	r0, #0
    8b8c:	4b1f      	ldr	r3, [pc, #124]	; (8c0c <hif_handle_isr+0x370>)
    8b8e:	4798      	blx	r3
			reg &= ~NBIT0;
    8b90:	2301      	movs	r3, #1
    8b92:	9903      	ldr	r1, [sp, #12]
    8b94:	4399      	bics	r1, r3
    8b96:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    8b98:	4830      	ldr	r0, [pc, #192]	; (8c5c <hif_handle_isr+0x3c0>)
    8b9a:	4b31      	ldr	r3, [pc, #196]	; (8c60 <hif_handle_isr+0x3c4>)
    8b9c:	4798      	blx	r3
    8b9e:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    8ba0:	d1e0      	bne.n	8b64 <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    8ba2:	2201      	movs	r2, #1
    8ba4:	4b0f      	ldr	r3, [pc, #60]	; (8be4 <hif_handle_isr+0x348>)
    8ba6:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    8ba8:	9b03      	ldr	r3, [sp, #12]
    8baa:	049d      	lsls	r5, r3, #18
    8bac:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    8bae:	d0b0      	beq.n	8b12 <hif_handle_isr+0x276>
				uint32 address = 0;
    8bb0:	2300      	movs	r3, #0
    8bb2:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    8bb4:	a905      	add	r1, sp, #20
    8bb6:	482b      	ldr	r0, [pc, #172]	; (8c64 <hif_handle_isr+0x3c8>)
    8bb8:	4b16      	ldr	r3, [pc, #88]	; (8c14 <hif_handle_isr+0x378>)
    8bba:	4798      	blx	r3
    8bbc:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    8bbe:	d100      	bne.n	8bc2 <hif_handle_isr+0x326>
    8bc0:	e675      	b.n	88ae <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    8bc2:	22c8      	movs	r2, #200	; 0xc8
    8bc4:	32ff      	adds	r2, #255	; 0xff
    8bc6:	490a      	ldr	r1, [pc, #40]	; (8bf0 <hif_handle_isr+0x354>)
    8bc8:	480a      	ldr	r0, [pc, #40]	; (8bf4 <hif_handle_isr+0x358>)
    8bca:	4b0b      	ldr	r3, [pc, #44]	; (8bf8 <hif_handle_isr+0x35c>)
    8bcc:	4798      	blx	r3
    8bce:	4826      	ldr	r0, [pc, #152]	; (8c68 <hif_handle_isr+0x3cc>)
    8bd0:	4b0b      	ldr	r3, [pc, #44]	; (8c00 <hif_handle_isr+0x364>)
    8bd2:	4798      	blx	r3
    8bd4:	200d      	movs	r0, #13
    8bd6:	4b0b      	ldr	r3, [pc, #44]	; (8c04 <hif_handle_isr+0x368>)
    8bd8:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    8bda:	2001      	movs	r0, #1
    8bdc:	4b0b      	ldr	r3, [pc, #44]	; (8c0c <hif_handle_isr+0x370>)
    8bde:	4798      	blx	r3
    8be0:	e7c0      	b.n	8b64 <hif_handle_isr+0x2c8>
    8be2:	46c0      	nop			; (mov r8, r8)
    8be4:	2000043c 	.word	0x2000043c
    8be8:	000099d5 	.word	0x000099d5
    8bec:	0000020f 	.word	0x0000020f
    8bf0:	000156bc 	.word	0x000156bc
    8bf4:	00015668 	.word	0x00015668
    8bf8:	000140dd 	.word	0x000140dd
    8bfc:	00015818 	.word	0x00015818
    8c00:	000141f9 	.word	0x000141f9
    8c04:	00014111 	.word	0x00014111
    8c08:	00015714 	.word	0x00015714
    8c0c:	00008241 	.word	0x00008241
    8c10:	0001572c 	.word	0x0001572c
    8c14:	000099bd 	.word	0x000099bd
    8c18:	0001576c 	.word	0x0001576c
    8c1c:	0001578c 	.word	0x0001578c
    8c20:	000157b0 	.word	0x000157b0
    8c24:	000001ff 	.word	0x000001ff
    8c28:	000157d0 	.word	0x000157d0
    8c2c:	00000206 	.word	0x00000206
    8c30:	000157f4 	.word	0x000157f4
    8c34:	00000215 	.word	0x00000215
    8c38:	00015830 	.word	0x00015830
    8c3c:	00008575 	.word	0x00008575
    8c40:	0001585c 	.word	0x0001585c
    8c44:	00015870 	.word	0x00015870
    8c48:	0000022d 	.word	0x0000022d
    8c4c:	0001588c 	.word	0x0001588c
    8c50:	0000024a 	.word	0x0000024a
    8c54:	000156c4 	.word	0x000156c4
    8c58:	000158b0 	.word	0x000158b0
    8c5c:	00001070 	.word	0x00001070
    8c60:	000099c9 	.word	0x000099c9
    8c64:	00001084 	.word	0x00001084
    8c68:	000156f0 	.word	0x000156f0
			}
		}
	}

	return ret;
}
    8c6c:	2000      	movs	r0, #0
    8c6e:	b007      	add	sp, #28
    8c70:	bc0c      	pop	{r2, r3}
    8c72:	4690      	mov	r8, r2
    8c74:	4699      	mov	r9, r3
    8c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008c78 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    8c78:	b570      	push	{r4, r5, r6, lr}
    8c7a:	0014      	movs	r4, r2
    8c7c:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    8c7e:	2800      	cmp	r0, #0
    8c80:	d003      	beq.n	8c8a <hif_receive+0x12>
    8c82:	2900      	cmp	r1, #0
    8c84:	d001      	beq.n	8c8a <hif_receive+0x12>
    8c86:	2a00      	cmp	r2, #0
    8c88:	d112      	bne.n	8cb0 <hif_receive+0x38>
	{
		if(isDone)
    8c8a:	2d00      	cmp	r5, #0
    8c8c:	d002      	beq.n	8c94 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    8c8e:	4b27      	ldr	r3, [pc, #156]	; (8d2c <hif_receive+0xb4>)
    8c90:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    8c92:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    8c94:	4a26      	ldr	r2, [pc, #152]	; (8d30 <hif_receive+0xb8>)
    8c96:	4927      	ldr	r1, [pc, #156]	; (8d34 <hif_receive+0xbc>)
    8c98:	4827      	ldr	r0, [pc, #156]	; (8d38 <hif_receive+0xc0>)
    8c9a:	4b28      	ldr	r3, [pc, #160]	; (8d3c <hif_receive+0xc4>)
    8c9c:	4798      	blx	r3
    8c9e:	4828      	ldr	r0, [pc, #160]	; (8d40 <hif_receive+0xc8>)
    8ca0:	4b28      	ldr	r3, [pc, #160]	; (8d44 <hif_receive+0xcc>)
    8ca2:	4798      	blx	r3
    8ca4:	200d      	movs	r0, #13
    8ca6:	4b28      	ldr	r3, [pc, #160]	; (8d48 <hif_receive+0xd0>)
    8ca8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    8caa:	200c      	movs	r0, #12
    8cac:	4240      	negs	r0, r0
    8cae:	e7f0      	b.n	8c92 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    8cb0:	4b26      	ldr	r3, [pc, #152]	; (8d4c <hif_receive+0xd4>)
    8cb2:	689b      	ldr	r3, [r3, #8]
    8cb4:	429a      	cmp	r2, r3
    8cb6:	d81a      	bhi.n	8cee <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    8cb8:	4b24      	ldr	r3, [pc, #144]	; (8d4c <hif_receive+0xd4>)
    8cba:	685b      	ldr	r3, [r3, #4]
    8cbc:	4298      	cmp	r0, r3
    8cbe:	d326      	bcc.n	8d0e <hif_receive+0x96>
    8cc0:	1886      	adds	r6, r0, r2
    8cc2:	4a22      	ldr	r2, [pc, #136]	; (8d4c <hif_receive+0xd4>)
    8cc4:	6853      	ldr	r3, [r2, #4]
    8cc6:	6892      	ldr	r2, [r2, #8]
    8cc8:	189b      	adds	r3, r3, r2
    8cca:	429e      	cmp	r6, r3
    8ccc:	d81f      	bhi.n	8d0e <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    8cce:	0022      	movs	r2, r4
    8cd0:	4b1f      	ldr	r3, [pc, #124]	; (8d50 <hif_receive+0xd8>)
    8cd2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    8cd4:	2800      	cmp	r0, #0
    8cd6:	d1dc      	bne.n	8c92 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    8cd8:	4a1c      	ldr	r2, [pc, #112]	; (8d4c <hif_receive+0xd4>)
    8cda:	6853      	ldr	r3, [r2, #4]
    8cdc:	6892      	ldr	r2, [r2, #8]
    8cde:	189b      	adds	r3, r3, r2
    8ce0:	429e      	cmp	r6, r3
    8ce2:	d001      	beq.n	8ce8 <hif_receive+0x70>
    8ce4:	2d00      	cmp	r5, #0
    8ce6:	d0d4      	beq.n	8c92 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    8ce8:	4b10      	ldr	r3, [pc, #64]	; (8d2c <hif_receive+0xb4>)
    8cea:	4798      	blx	r3
    8cec:	e7d1      	b.n	8c92 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    8cee:	4a19      	ldr	r2, [pc, #100]	; (8d54 <hif_receive+0xdc>)
    8cf0:	4910      	ldr	r1, [pc, #64]	; (8d34 <hif_receive+0xbc>)
    8cf2:	4811      	ldr	r0, [pc, #68]	; (8d38 <hif_receive+0xc0>)
    8cf4:	4d11      	ldr	r5, [pc, #68]	; (8d3c <hif_receive+0xc4>)
    8cf6:	47a8      	blx	r5
    8cf8:	4b14      	ldr	r3, [pc, #80]	; (8d4c <hif_receive+0xd4>)
    8cfa:	689a      	ldr	r2, [r3, #8]
    8cfc:	0021      	movs	r1, r4
    8cfe:	4816      	ldr	r0, [pc, #88]	; (8d58 <hif_receive+0xe0>)
    8d00:	47a8      	blx	r5
    8d02:	200d      	movs	r0, #13
    8d04:	4b10      	ldr	r3, [pc, #64]	; (8d48 <hif_receive+0xd0>)
    8d06:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    8d08:	200c      	movs	r0, #12
    8d0a:	4240      	negs	r0, r0
		goto ERR1;
    8d0c:	e7c1      	b.n	8c92 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    8d0e:	4a13      	ldr	r2, [pc, #76]	; (8d5c <hif_receive+0xe4>)
    8d10:	4908      	ldr	r1, [pc, #32]	; (8d34 <hif_receive+0xbc>)
    8d12:	4809      	ldr	r0, [pc, #36]	; (8d38 <hif_receive+0xc0>)
    8d14:	4b09      	ldr	r3, [pc, #36]	; (8d3c <hif_receive+0xc4>)
    8d16:	4798      	blx	r3
    8d18:	4811      	ldr	r0, [pc, #68]	; (8d60 <hif_receive+0xe8>)
    8d1a:	4b0a      	ldr	r3, [pc, #40]	; (8d44 <hif_receive+0xcc>)
    8d1c:	4798      	blx	r3
    8d1e:	200d      	movs	r0, #13
    8d20:	4b09      	ldr	r3, [pc, #36]	; (8d48 <hif_receive+0xd0>)
    8d22:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    8d24:	200c      	movs	r0, #12
    8d26:	4240      	negs	r0, r0
		goto ERR1;
    8d28:	e7b3      	b.n	8c92 <hif_receive+0x1a>
    8d2a:	46c0      	nop			; (mov r8, r8)
    8d2c:	00008575 	.word	0x00008575
    8d30:	0000026b 	.word	0x0000026b
    8d34:	000156d4 	.word	0x000156d4
    8d38:	00015668 	.word	0x00015668
    8d3c:	000140dd 	.word	0x000140dd
    8d40:	000158e0 	.word	0x000158e0
    8d44:	000141f9 	.word	0x000141f9
    8d48:	00014111 	.word	0x00014111
    8d4c:	2000043c 	.word	0x2000043c
    8d50:	000099d5 	.word	0x000099d5
    8d54:	00000273 	.word	0x00000273
    8d58:	00015900 	.word	0x00015900
    8d5c:	00000279 	.word	0x00000279
    8d60:	00015948 	.word	0x00015948

00008d64 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    8d64:	b570      	push	{r4, r5, r6, lr}
    8d66:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    8d68:	2807      	cmp	r0, #7
    8d6a:	d81f      	bhi.n	8dac <hif_register_cb+0x48>
    8d6c:	0083      	lsls	r3, r0, #2
    8d6e:	4a16      	ldr	r2, [pc, #88]	; (8dc8 <hif_register_cb+0x64>)
    8d70:	58d3      	ldr	r3, [r2, r3]
    8d72:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    8d74:	4b15      	ldr	r3, [pc, #84]	; (8dcc <hif_register_cb+0x68>)
    8d76:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    8d78:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    8d7a:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    8d7c:	4b13      	ldr	r3, [pc, #76]	; (8dcc <hif_register_cb+0x68>)
    8d7e:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    8d80:	2000      	movs	r0, #0
			break;
    8d82:	e7fa      	b.n	8d7a <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    8d84:	4b11      	ldr	r3, [pc, #68]	; (8dcc <hif_register_cb+0x68>)
    8d86:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    8d88:	2000      	movs	r0, #0
			break;
    8d8a:	e7f6      	b.n	8d7a <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    8d8c:	4b0f      	ldr	r3, [pc, #60]	; (8dcc <hif_register_cb+0x68>)
    8d8e:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    8d90:	2000      	movs	r0, #0
			break;
    8d92:	e7f2      	b.n	8d7a <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    8d94:	4b0d      	ldr	r3, [pc, #52]	; (8dcc <hif_register_cb+0x68>)
    8d96:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    8d98:	2000      	movs	r0, #0
			break;
    8d9a:	e7ee      	b.n	8d7a <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    8d9c:	4b0b      	ldr	r3, [pc, #44]	; (8dcc <hif_register_cb+0x68>)
    8d9e:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    8da0:	2000      	movs	r0, #0
			break;
    8da2:	e7ea      	b.n	8d7a <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    8da4:	4b09      	ldr	r3, [pc, #36]	; (8dcc <hif_register_cb+0x68>)
    8da6:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    8da8:	2000      	movs	r0, #0
			break;
    8daa:	e7e6      	b.n	8d7a <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    8dac:	4a08      	ldr	r2, [pc, #32]	; (8dd0 <hif_register_cb+0x6c>)
    8dae:	4909      	ldr	r1, [pc, #36]	; (8dd4 <hif_register_cb+0x70>)
    8db0:	4809      	ldr	r0, [pc, #36]	; (8dd8 <hif_register_cb+0x74>)
    8db2:	4d0a      	ldr	r5, [pc, #40]	; (8ddc <hif_register_cb+0x78>)
    8db4:	47a8      	blx	r5
    8db6:	0021      	movs	r1, r4
    8db8:	4809      	ldr	r0, [pc, #36]	; (8de0 <hif_register_cb+0x7c>)
    8dba:	47a8      	blx	r5
    8dbc:	200d      	movs	r0, #13
    8dbe:	4b09      	ldr	r3, [pc, #36]	; (8de4 <hif_register_cb+0x80>)
    8dc0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    8dc2:	200c      	movs	r0, #12
    8dc4:	4240      	negs	r0, r0
			break;
    8dc6:	e7d8      	b.n	8d7a <hif_register_cb+0x16>
    8dc8:	00015690 	.word	0x00015690
    8dcc:	2000043c 	.word	0x2000043c
    8dd0:	000002b1 	.word	0x000002b1
    8dd4:	000156e0 	.word	0x000156e0
    8dd8:	00015668 	.word	0x00015668
    8ddc:	000140dd 	.word	0x000140dd
    8de0:	0001598c 	.word	0x0001598c
    8de4:	00014111 	.word	0x00014111

00008de8 <hif_init>:
{
    8de8:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    8dea:	2228      	movs	r2, #40	; 0x28
    8dec:	2100      	movs	r1, #0
    8dee:	4806      	ldr	r0, [pc, #24]	; (8e08 <hif_init+0x20>)
    8df0:	4b06      	ldr	r3, [pc, #24]	; (8e0c <hif_init+0x24>)
    8df2:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    8df4:	4806      	ldr	r0, [pc, #24]	; (8e10 <hif_init+0x28>)
    8df6:	4b07      	ldr	r3, [pc, #28]	; (8e14 <hif_init+0x2c>)
    8df8:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    8dfa:	4907      	ldr	r1, [pc, #28]	; (8e18 <hif_init+0x30>)
    8dfc:	2003      	movs	r0, #3
    8dfe:	4b07      	ldr	r3, [pc, #28]	; (8e1c <hif_init+0x34>)
    8e00:	4798      	blx	r3
}
    8e02:	2000      	movs	r0, #0
    8e04:	bd10      	pop	{r4, pc}
    8e06:	46c0      	nop			; (mov r8, r8)
    8e08:	2000043c 	.word	0x2000043c
    8e0c:	00008535 	.word	0x00008535
    8e10:	00008561 	.word	0x00008561
    8e14:	000081e9 	.word	0x000081e9
    8e18:	00008571 	.word	0x00008571
    8e1c:	00008d65 	.word	0x00008d65

00008e20 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    8e20:	b530      	push	{r4, r5, lr}
    8e22:	b09f      	sub	sp, #124	; 0x7c
    8e24:	0004      	movs	r4, r0
    8e26:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    8e28:	282c      	cmp	r0, #44	; 0x2c
    8e2a:	d02f      	beq.n	8e8c <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    8e2c:	281b      	cmp	r0, #27
    8e2e:	d03d      	beq.n	8eac <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    8e30:	2806      	cmp	r0, #6
    8e32:	d04b      	beq.n	8ecc <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    8e34:	280e      	cmp	r0, #14
    8e36:	d027      	beq.n	8e88 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    8e38:	2832      	cmp	r0, #50	; 0x32
    8e3a:	d057      	beq.n	8eec <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    8e3c:	282f      	cmp	r0, #47	; 0x2f
    8e3e:	d065      	beq.n	8f0c <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    8e40:	2834      	cmp	r0, #52	; 0x34
    8e42:	d100      	bne.n	8e46 <m2m_wifi_cb+0x26>
    8e44:	e077      	b.n	8f36 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    8e46:	2811      	cmp	r0, #17
    8e48:	d100      	bne.n	8e4c <m2m_wifi_cb+0x2c>
    8e4a:	e096      	b.n	8f7a <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    8e4c:	2813      	cmp	r0, #19
    8e4e:	d100      	bne.n	8e52 <m2m_wifi_cb+0x32>
    8e50:	e0ac      	b.n	8fac <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    8e52:	2804      	cmp	r0, #4
    8e54:	d100      	bne.n	8e58 <m2m_wifi_cb+0x38>
    8e56:	e0bb      	b.n	8fd0 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    8e58:	2865      	cmp	r0, #101	; 0x65
    8e5a:	d100      	bne.n	8e5e <m2m_wifi_cb+0x3e>
    8e5c:	e0ca      	b.n	8ff4 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    8e5e:	2809      	cmp	r0, #9
    8e60:	d100      	bne.n	8e64 <m2m_wifi_cb+0x44>
    8e62:	e0d9      	b.n	9018 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    8e64:	282a      	cmp	r0, #42	; 0x2a
    8e66:	d100      	bne.n	8e6a <m2m_wifi_cb+0x4a>
    8e68:	e0e8      	b.n	903c <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    8e6a:	2820      	cmp	r0, #32
    8e6c:	d100      	bne.n	8e70 <m2m_wifi_cb+0x50>
    8e6e:	e0f7      	b.n	9060 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    8e70:	2292      	movs	r2, #146	; 0x92
    8e72:	0052      	lsls	r2, r2, #1
    8e74:	4989      	ldr	r1, [pc, #548]	; (909c <m2m_wifi_cb+0x27c>)
    8e76:	488a      	ldr	r0, [pc, #552]	; (90a0 <m2m_wifi_cb+0x280>)
    8e78:	4d8a      	ldr	r5, [pc, #552]	; (90a4 <m2m_wifi_cb+0x284>)
    8e7a:	47a8      	blx	r5
    8e7c:	0021      	movs	r1, r4
    8e7e:	488a      	ldr	r0, [pc, #552]	; (90a8 <m2m_wifi_cb+0x288>)
    8e80:	47a8      	blx	r5
    8e82:	200d      	movs	r0, #13
    8e84:	4b89      	ldr	r3, [pc, #548]	; (90ac <m2m_wifi_cb+0x28c>)
    8e86:	4798      	blx	r3
	}
}
    8e88:	b01f      	add	sp, #124	; 0x7c
    8e8a:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    8e8c:	2300      	movs	r3, #0
    8e8e:	2204      	movs	r2, #4
    8e90:	a903      	add	r1, sp, #12
    8e92:	0028      	movs	r0, r5
    8e94:	4c86      	ldr	r4, [pc, #536]	; (90b0 <m2m_wifi_cb+0x290>)
    8e96:	47a0      	blx	r4
    8e98:	2800      	cmp	r0, #0
    8e9a:	d1f5      	bne.n	8e88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    8e9c:	4b85      	ldr	r3, [pc, #532]	; (90b4 <m2m_wifi_cb+0x294>)
    8e9e:	681b      	ldr	r3, [r3, #0]
    8ea0:	2b00      	cmp	r3, #0
    8ea2:	d0f1      	beq.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    8ea4:	a903      	add	r1, sp, #12
    8ea6:	302c      	adds	r0, #44	; 0x2c
    8ea8:	4798      	blx	r3
    8eaa:	e7ed      	b.n	8e88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    8eac:	2300      	movs	r3, #0
    8eae:	2208      	movs	r2, #8
    8eb0:	a903      	add	r1, sp, #12
    8eb2:	0028      	movs	r0, r5
    8eb4:	4c7e      	ldr	r4, [pc, #504]	; (90b0 <m2m_wifi_cb+0x290>)
    8eb6:	47a0      	blx	r4
    8eb8:	2800      	cmp	r0, #0
    8eba:	d1e5      	bne.n	8e88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    8ebc:	4b7d      	ldr	r3, [pc, #500]	; (90b4 <m2m_wifi_cb+0x294>)
    8ebe:	681b      	ldr	r3, [r3, #0]
    8ec0:	2b00      	cmp	r3, #0
    8ec2:	d0e1      	beq.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    8ec4:	a903      	add	r1, sp, #12
    8ec6:	301b      	adds	r0, #27
    8ec8:	4798      	blx	r3
    8eca:	e7dd      	b.n	8e88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    8ecc:	2301      	movs	r3, #1
    8ece:	2230      	movs	r2, #48	; 0x30
    8ed0:	a903      	add	r1, sp, #12
    8ed2:	0028      	movs	r0, r5
    8ed4:	4c76      	ldr	r4, [pc, #472]	; (90b0 <m2m_wifi_cb+0x290>)
    8ed6:	47a0      	blx	r4
    8ed8:	2800      	cmp	r0, #0
    8eda:	d1d5      	bne.n	8e88 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    8edc:	4b75      	ldr	r3, [pc, #468]	; (90b4 <m2m_wifi_cb+0x294>)
    8ede:	681b      	ldr	r3, [r3, #0]
    8ee0:	2b00      	cmp	r3, #0
    8ee2:	d0d1      	beq.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    8ee4:	a903      	add	r1, sp, #12
    8ee6:	3006      	adds	r0, #6
    8ee8:	4798      	blx	r3
    8eea:	e7cd      	b.n	8e88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    8eec:	2300      	movs	r3, #0
    8eee:	2214      	movs	r2, #20
    8ef0:	a903      	add	r1, sp, #12
    8ef2:	0028      	movs	r0, r5
    8ef4:	4c6e      	ldr	r4, [pc, #440]	; (90b0 <m2m_wifi_cb+0x290>)
    8ef6:	47a0      	blx	r4
    8ef8:	2800      	cmp	r0, #0
    8efa:	d1c5      	bne.n	8e88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    8efc:	4b6d      	ldr	r3, [pc, #436]	; (90b4 <m2m_wifi_cb+0x294>)
    8efe:	681b      	ldr	r3, [r3, #0]
    8f00:	2b00      	cmp	r3, #0
    8f02:	d0c1      	beq.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    8f04:	a903      	add	r1, sp, #12
    8f06:	3032      	adds	r0, #50	; 0x32
    8f08:	4798      	blx	r3
    8f0a:	e7bd      	b.n	8e88 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    8f0c:	2264      	movs	r2, #100	; 0x64
    8f0e:	2100      	movs	r1, #0
    8f10:	a803      	add	r0, sp, #12
    8f12:	4b69      	ldr	r3, [pc, #420]	; (90b8 <m2m_wifi_cb+0x298>)
    8f14:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    8f16:	2300      	movs	r3, #0
    8f18:	2264      	movs	r2, #100	; 0x64
    8f1a:	a903      	add	r1, sp, #12
    8f1c:	0028      	movs	r0, r5
    8f1e:	4c64      	ldr	r4, [pc, #400]	; (90b0 <m2m_wifi_cb+0x290>)
    8f20:	47a0      	blx	r4
    8f22:	2800      	cmp	r0, #0
    8f24:	d1b0      	bne.n	8e88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    8f26:	4b63      	ldr	r3, [pc, #396]	; (90b4 <m2m_wifi_cb+0x294>)
    8f28:	681b      	ldr	r3, [r3, #0]
    8f2a:	2b00      	cmp	r3, #0
    8f2c:	d0ac      	beq.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    8f2e:	a903      	add	r1, sp, #12
    8f30:	302f      	adds	r0, #47	; 0x2f
    8f32:	4798      	blx	r3
    8f34:	e7a8      	b.n	8e88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    8f36:	2300      	movs	r3, #0
    8f38:	2204      	movs	r2, #4
    8f3a:	a903      	add	r1, sp, #12
    8f3c:	0028      	movs	r0, r5
    8f3e:	4c5c      	ldr	r4, [pc, #368]	; (90b0 <m2m_wifi_cb+0x290>)
    8f40:	47a0      	blx	r4
    8f42:	2800      	cmp	r0, #0
    8f44:	d1a0      	bne.n	8e88 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    8f46:	485d      	ldr	r0, [pc, #372]	; (90bc <m2m_wifi_cb+0x29c>)
    8f48:	4d56      	ldr	r5, [pc, #344]	; (90a4 <m2m_wifi_cb+0x284>)
    8f4a:	47a8      	blx	r5
    8f4c:	9c03      	ldr	r4, [sp, #12]
    8f4e:	0a23      	lsrs	r3, r4, #8
    8f50:	20ff      	movs	r0, #255	; 0xff
    8f52:	4003      	ands	r3, r0
    8f54:	0c22      	lsrs	r2, r4, #16
    8f56:	4002      	ands	r2, r0
    8f58:	0e21      	lsrs	r1, r4, #24
    8f5a:	4020      	ands	r0, r4
    8f5c:	9000      	str	r0, [sp, #0]
    8f5e:	4858      	ldr	r0, [pc, #352]	; (90c0 <m2m_wifi_cb+0x2a0>)
    8f60:	47a8      	blx	r5
    8f62:	200d      	movs	r0, #13
    8f64:	4b51      	ldr	r3, [pc, #324]	; (90ac <m2m_wifi_cb+0x28c>)
    8f66:	4798      	blx	r3
			if (gpfAppWifiCb)
    8f68:	4b52      	ldr	r3, [pc, #328]	; (90b4 <m2m_wifi_cb+0x294>)
    8f6a:	681b      	ldr	r3, [r3, #0]
    8f6c:	2b00      	cmp	r3, #0
    8f6e:	d100      	bne.n	8f72 <m2m_wifi_cb+0x152>
    8f70:	e78a      	b.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    8f72:	2100      	movs	r1, #0
    8f74:	2034      	movs	r0, #52	; 0x34
    8f76:	4798      	blx	r3
    8f78:	e786      	b.n	8e88 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    8f7a:	2200      	movs	r2, #0
    8f7c:	4b51      	ldr	r3, [pc, #324]	; (90c4 <m2m_wifi_cb+0x2a4>)
    8f7e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    8f80:	2300      	movs	r3, #0
    8f82:	3204      	adds	r2, #4
    8f84:	a903      	add	r1, sp, #12
    8f86:	0028      	movs	r0, r5
    8f88:	4c49      	ldr	r4, [pc, #292]	; (90b0 <m2m_wifi_cb+0x290>)
    8f8a:	47a0      	blx	r4
    8f8c:	2800      	cmp	r0, #0
    8f8e:	d000      	beq.n	8f92 <m2m_wifi_cb+0x172>
    8f90:	e77a      	b.n	8e88 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    8f92:	ab03      	add	r3, sp, #12
    8f94:	781a      	ldrb	r2, [r3, #0]
    8f96:	4b4c      	ldr	r3, [pc, #304]	; (90c8 <m2m_wifi_cb+0x2a8>)
    8f98:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    8f9a:	4b46      	ldr	r3, [pc, #280]	; (90b4 <m2m_wifi_cb+0x294>)
    8f9c:	681b      	ldr	r3, [r3, #0]
    8f9e:	2b00      	cmp	r3, #0
    8fa0:	d100      	bne.n	8fa4 <m2m_wifi_cb+0x184>
    8fa2:	e771      	b.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    8fa4:	a903      	add	r1, sp, #12
    8fa6:	3011      	adds	r0, #17
    8fa8:	4798      	blx	r3
    8faa:	e76d      	b.n	8e88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    8fac:	2300      	movs	r3, #0
    8fae:	222c      	movs	r2, #44	; 0x2c
    8fb0:	a903      	add	r1, sp, #12
    8fb2:	0028      	movs	r0, r5
    8fb4:	4c3e      	ldr	r4, [pc, #248]	; (90b0 <m2m_wifi_cb+0x290>)
    8fb6:	47a0      	blx	r4
    8fb8:	2800      	cmp	r0, #0
    8fba:	d000      	beq.n	8fbe <m2m_wifi_cb+0x19e>
    8fbc:	e764      	b.n	8e88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    8fbe:	4b3d      	ldr	r3, [pc, #244]	; (90b4 <m2m_wifi_cb+0x294>)
    8fc0:	681b      	ldr	r3, [r3, #0]
    8fc2:	2b00      	cmp	r3, #0
    8fc4:	d100      	bne.n	8fc8 <m2m_wifi_cb+0x1a8>
    8fc6:	e75f      	b.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    8fc8:	a903      	add	r1, sp, #12
    8fca:	3013      	adds	r0, #19
    8fcc:	4798      	blx	r3
    8fce:	e75b      	b.n	8e88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    8fd0:	2300      	movs	r3, #0
    8fd2:	2204      	movs	r2, #4
    8fd4:	a91c      	add	r1, sp, #112	; 0x70
    8fd6:	0028      	movs	r0, r5
    8fd8:	4c35      	ldr	r4, [pc, #212]	; (90b0 <m2m_wifi_cb+0x290>)
    8fda:	47a0      	blx	r4
    8fdc:	2800      	cmp	r0, #0
    8fde:	d000      	beq.n	8fe2 <m2m_wifi_cb+0x1c2>
    8fe0:	e752      	b.n	8e88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    8fe2:	4b34      	ldr	r3, [pc, #208]	; (90b4 <m2m_wifi_cb+0x294>)
    8fe4:	681b      	ldr	r3, [r3, #0]
    8fe6:	2b00      	cmp	r3, #0
    8fe8:	d100      	bne.n	8fec <m2m_wifi_cb+0x1cc>
    8fea:	e74d      	b.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    8fec:	a91c      	add	r1, sp, #112	; 0x70
    8fee:	3004      	adds	r0, #4
    8ff0:	4798      	blx	r3
    8ff2:	e749      	b.n	8e88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    8ff4:	2300      	movs	r3, #0
    8ff6:	2204      	movs	r2, #4
    8ff8:	a91c      	add	r1, sp, #112	; 0x70
    8ffa:	0028      	movs	r0, r5
    8ffc:	4c2c      	ldr	r4, [pc, #176]	; (90b0 <m2m_wifi_cb+0x290>)
    8ffe:	47a0      	blx	r4
    9000:	2800      	cmp	r0, #0
    9002:	d000      	beq.n	9006 <m2m_wifi_cb+0x1e6>
    9004:	e740      	b.n	8e88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    9006:	4b2b      	ldr	r3, [pc, #172]	; (90b4 <m2m_wifi_cb+0x294>)
    9008:	681b      	ldr	r3, [r3, #0]
    900a:	2b00      	cmp	r3, #0
    900c:	d100      	bne.n	9010 <m2m_wifi_cb+0x1f0>
    900e:	e73b      	b.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    9010:	a91c      	add	r1, sp, #112	; 0x70
    9012:	3065      	adds	r0, #101	; 0x65
    9014:	4798      	blx	r3
    9016:	e737      	b.n	8e88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    9018:	2301      	movs	r3, #1
    901a:	2264      	movs	r2, #100	; 0x64
    901c:	a903      	add	r1, sp, #12
    901e:	0028      	movs	r0, r5
    9020:	4c23      	ldr	r4, [pc, #140]	; (90b0 <m2m_wifi_cb+0x290>)
    9022:	47a0      	blx	r4
    9024:	2800      	cmp	r0, #0
    9026:	d000      	beq.n	902a <m2m_wifi_cb+0x20a>
    9028:	e72e      	b.n	8e88 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    902a:	4b22      	ldr	r3, [pc, #136]	; (90b4 <m2m_wifi_cb+0x294>)
    902c:	681b      	ldr	r3, [r3, #0]
    902e:	2b00      	cmp	r3, #0
    9030:	d100      	bne.n	9034 <m2m_wifi_cb+0x214>
    9032:	e729      	b.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    9034:	a903      	add	r1, sp, #12
    9036:	3009      	adds	r0, #9
    9038:	4798      	blx	r3
    903a:	e725      	b.n	8e88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    903c:	2301      	movs	r3, #1
    903e:	2204      	movs	r2, #4
    9040:	a903      	add	r1, sp, #12
    9042:	0028      	movs	r0, r5
    9044:	4c1a      	ldr	r4, [pc, #104]	; (90b0 <m2m_wifi_cb+0x290>)
    9046:	47a0      	blx	r4
    9048:	2800      	cmp	r0, #0
    904a:	d000      	beq.n	904e <m2m_wifi_cb+0x22e>
    904c:	e71c      	b.n	8e88 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    904e:	4b19      	ldr	r3, [pc, #100]	; (90b4 <m2m_wifi_cb+0x294>)
    9050:	681b      	ldr	r3, [r3, #0]
    9052:	2b00      	cmp	r3, #0
    9054:	d100      	bne.n	9058 <m2m_wifi_cb+0x238>
    9056:	e717      	b.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    9058:	a903      	add	r1, sp, #12
    905a:	302a      	adds	r0, #42	; 0x2a
    905c:	4798      	blx	r3
    905e:	e713      	b.n	8e88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    9060:	2300      	movs	r3, #0
    9062:	2208      	movs	r2, #8
    9064:	a903      	add	r1, sp, #12
    9066:	0028      	movs	r0, r5
    9068:	4c11      	ldr	r4, [pc, #68]	; (90b0 <m2m_wifi_cb+0x290>)
    906a:	47a0      	blx	r4
    906c:	2800      	cmp	r0, #0
    906e:	d000      	beq.n	9072 <m2m_wifi_cb+0x252>
    9070:	e70a      	b.n	8e88 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    9072:	ab03      	add	r3, sp, #12
    9074:	889a      	ldrh	r2, [r3, #4]
    9076:	0028      	movs	r0, r5
    9078:	3008      	adds	r0, #8
    907a:	2301      	movs	r3, #1
    907c:	9903      	ldr	r1, [sp, #12]
    907e:	4c0c      	ldr	r4, [pc, #48]	; (90b0 <m2m_wifi_cb+0x290>)
    9080:	47a0      	blx	r4
    9082:	2800      	cmp	r0, #0
    9084:	d000      	beq.n	9088 <m2m_wifi_cb+0x268>
    9086:	e6ff      	b.n	8e88 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    9088:	4b0a      	ldr	r3, [pc, #40]	; (90b4 <m2m_wifi_cb+0x294>)
    908a:	681b      	ldr	r3, [r3, #0]
    908c:	2b00      	cmp	r3, #0
    908e:	d100      	bne.n	9092 <m2m_wifi_cb+0x272>
    9090:	e6fa      	b.n	8e88 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    9092:	a903      	add	r1, sp, #12
    9094:	3020      	adds	r0, #32
    9096:	4798      	blx	r3
    9098:	e6f6      	b.n	8e88 <m2m_wifi_cb+0x68>
    909a:	46c0      	nop			; (mov r8, r8)
    909c:	000159d0 	.word	0x000159d0
    90a0:	00015668 	.word	0x00015668
    90a4:	000140dd 	.word	0x000140dd
    90a8:	00015a20 	.word	0x00015a20
    90ac:	00014111 	.word	0x00014111
    90b0:	00008c79 	.word	0x00008c79
    90b4:	20000210 	.word	0x20000210
    90b8:	00008535 	.word	0x00008535
    90bc:	00015998 	.word	0x00015998
    90c0:	00015a00 	.word	0x00015a00
    90c4:	20000215 	.word	0x20000215
    90c8:	20000214 	.word	0x20000214

000090cc <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    90cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    90ce:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    90d0:	2201      	movs	r2, #1
    90d2:	230f      	movs	r3, #15
    90d4:	446b      	add	r3, sp
    90d6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    90d8:	2800      	cmp	r0, #0
    90da:	d061      	beq.n	91a0 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    90dc:	6802      	ldr	r2, [r0, #0]
    90de:	4b32      	ldr	r3, [pc, #200]	; (91a8 <m2m_wifi_init+0xdc>)
    90e0:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    90e2:	2200      	movs	r2, #0
    90e4:	4b31      	ldr	r3, [pc, #196]	; (91ac <m2m_wifi_init+0xe0>)
    90e6:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    90e8:	200f      	movs	r0, #15
    90ea:	4468      	add	r0, sp
    90ec:	4b30      	ldr	r3, [pc, #192]	; (91b0 <m2m_wifi_init+0xe4>)
    90ee:	4798      	blx	r3
    90f0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    90f2:	d002      	beq.n	90fa <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    90f4:	0020      	movs	r0, r4
    90f6:	b00f      	add	sp, #60	; 0x3c
    90f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    90fa:	2000      	movs	r0, #0
    90fc:	4b2d      	ldr	r3, [pc, #180]	; (91b4 <m2m_wifi_init+0xe8>)
    90fe:	4798      	blx	r3
    9100:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    9102:	d149      	bne.n	9198 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    9104:	492c      	ldr	r1, [pc, #176]	; (91b8 <m2m_wifi_init+0xec>)
    9106:	2001      	movs	r0, #1
    9108:	4b2c      	ldr	r3, [pc, #176]	; (91bc <m2m_wifi_init+0xf0>)
    910a:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    910c:	ae04      	add	r6, sp, #16
    910e:	0030      	movs	r0, r6
    9110:	4b2b      	ldr	r3, [pc, #172]	; (91c0 <m2m_wifi_init+0xf4>)
    9112:	4798      	blx	r3
    9114:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    9116:	482b      	ldr	r0, [pc, #172]	; (91c4 <m2m_wifi_init+0xf8>)
    9118:	4d2b      	ldr	r5, [pc, #172]	; (91c8 <m2m_wifi_init+0xfc>)
    911a:	47a8      	blx	r5
    911c:	79b3      	ldrb	r3, [r6, #6]
    911e:	7972      	ldrb	r2, [r6, #5]
    9120:	7931      	ldrb	r1, [r6, #4]
    9122:	8c30      	ldrh	r0, [r6, #32]
    9124:	9000      	str	r0, [sp, #0]
    9126:	4829      	ldr	r0, [pc, #164]	; (91cc <m2m_wifi_init+0x100>)
    9128:	47a8      	blx	r5
    912a:	200d      	movs	r0, #13
    912c:	4f28      	ldr	r7, [pc, #160]	; (91d0 <m2m_wifi_init+0x104>)
    912e:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    9130:	4824      	ldr	r0, [pc, #144]	; (91c4 <m2m_wifi_init+0xf8>)
    9132:	47a8      	blx	r5
    9134:	2226      	movs	r2, #38	; 0x26
    9136:	446a      	add	r2, sp
    9138:	211a      	movs	r1, #26
    913a:	4469      	add	r1, sp
    913c:	4825      	ldr	r0, [pc, #148]	; (91d4 <m2m_wifi_init+0x108>)
    913e:	47a8      	blx	r5
    9140:	200d      	movs	r0, #13
    9142:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    9144:	481f      	ldr	r0, [pc, #124]	; (91c4 <m2m_wifi_init+0xf8>)
    9146:	47a8      	blx	r5
    9148:	7a73      	ldrb	r3, [r6, #9]
    914a:	7a32      	ldrb	r2, [r6, #8]
    914c:	79f1      	ldrb	r1, [r6, #7]
    914e:	4822      	ldr	r0, [pc, #136]	; (91d8 <m2m_wifi_init+0x10c>)
    9150:	47a8      	blx	r5
    9152:	200d      	movs	r0, #13
    9154:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    9156:	481b      	ldr	r0, [pc, #108]	; (91c4 <m2m_wifi_init+0xf8>)
    9158:	47a8      	blx	r5
    915a:	2302      	movs	r3, #2
    915c:	2205      	movs	r2, #5
    915e:	2113      	movs	r1, #19
    9160:	481e      	ldr	r0, [pc, #120]	; (91dc <m2m_wifi_init+0x110>)
    9162:	47a8      	blx	r5
    9164:	200d      	movs	r0, #13
    9166:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    9168:	4816      	ldr	r0, [pc, #88]	; (91c4 <m2m_wifi_init+0xf8>)
    916a:	47a8      	blx	r5
    916c:	4a1c      	ldr	r2, [pc, #112]	; (91e0 <m2m_wifi_init+0x114>)
    916e:	491d      	ldr	r1, [pc, #116]	; (91e4 <m2m_wifi_init+0x118>)
    9170:	481d      	ldr	r0, [pc, #116]	; (91e8 <m2m_wifi_init+0x11c>)
    9172:	47a8      	blx	r5
    9174:	200d      	movs	r0, #13
    9176:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    9178:	0023      	movs	r3, r4
    917a:	330d      	adds	r3, #13
    917c:	d1ba      	bne.n	90f4 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    917e:	22e8      	movs	r2, #232	; 0xe8
    9180:	32ff      	adds	r2, #255	; 0xff
    9182:	491a      	ldr	r1, [pc, #104]	; (91ec <m2m_wifi_init+0x120>)
    9184:	481a      	ldr	r0, [pc, #104]	; (91f0 <m2m_wifi_init+0x124>)
    9186:	4b10      	ldr	r3, [pc, #64]	; (91c8 <m2m_wifi_init+0xfc>)
    9188:	4798      	blx	r3
    918a:	481a      	ldr	r0, [pc, #104]	; (91f4 <m2m_wifi_init+0x128>)
    918c:	4b1a      	ldr	r3, [pc, #104]	; (91f8 <m2m_wifi_init+0x12c>)
    918e:	4798      	blx	r3
    9190:	200d      	movs	r0, #13
    9192:	4b0f      	ldr	r3, [pc, #60]	; (91d0 <m2m_wifi_init+0x104>)
    9194:	4798      	blx	r3
    9196:	e7ad      	b.n	90f4 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    9198:	2000      	movs	r0, #0
    919a:	4b18      	ldr	r3, [pc, #96]	; (91fc <m2m_wifi_init+0x130>)
    919c:	4798      	blx	r3
    919e:	e7a9      	b.n	90f4 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    91a0:	240c      	movs	r4, #12
    91a2:	4264      	negs	r4, r4
    91a4:	e7a6      	b.n	90f4 <m2m_wifi_init+0x28>
    91a6:	46c0      	nop			; (mov r8, r8)
    91a8:	20000210 	.word	0x20000210
    91ac:	20000215 	.word	0x20000215
    91b0:	00009b89 	.word	0x00009b89
    91b4:	00008de9 	.word	0x00008de9
    91b8:	00008e21 	.word	0x00008e21
    91bc:	00008d65 	.word	0x00008d65
    91c0:	00009aa5 	.word	0x00009aa5
    91c4:	00015998 	.word	0x00015998
    91c8:	000140dd 	.word	0x000140dd
    91cc:	00015adc 	.word	0x00015adc
    91d0:	00014111 	.word	0x00014111
    91d4:	00015b04 	.word	0x00015b04
    91d8:	00015b20 	.word	0x00015b20
    91dc:	00015b44 	.word	0x00015b44
    91e0:	00015b5c 	.word	0x00015b5c
    91e4:	00015b68 	.word	0x00015b68
    91e8:	00015b74 	.word	0x00015b74
    91ec:	000159dc 	.word	0x000159dc
    91f0:	00015668 	.word	0x00015668
    91f4:	00015b8c 	.word	0x00015b8c
    91f8:	000141f9 	.word	0x000141f9
    91fc:	00009c5d 	.word	0x00009c5d

00009200 <m2m_wifi_deinit>:

sint8  m2m_wifi_deinit(void * arg)
{
    9200:	b510      	push	{r4, lr}

	hif_deinit(NULL);
    9202:	2000      	movs	r0, #0
    9204:	4b03      	ldr	r3, [pc, #12]	; (9214 <m2m_wifi_deinit+0x14>)
    9206:	4798      	blx	r3

	nm_drv_deinit(NULL);
    9208:	2000      	movs	r0, #0
    920a:	4b03      	ldr	r3, [pc, #12]	; (9218 <m2m_wifi_deinit+0x18>)
    920c:	4798      	blx	r3

	return M2M_SUCCESS;
}
    920e:	2000      	movs	r0, #0
    9210:	bd10      	pop	{r4, pc}
    9212:	46c0      	nop			; (mov r8, r8)
    9214:	00008649 	.word	0x00008649
    9218:	00009c5d 	.word	0x00009c5d

0000921c <m2m_wifi_handle_events>:


sint8 m2m_wifi_handle_events(void * arg)
{
    921c:	b510      	push	{r4, lr}
	return hif_handle_isr();
    921e:	4b01      	ldr	r3, [pc, #4]	; (9224 <m2m_wifi_handle_events+0x8>)
    9220:	4798      	blx	r3
}
    9222:	bd10      	pop	{r4, pc}
    9224:	0000889d 	.word	0x0000889d

00009228 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    9228:	b5f0      	push	{r4, r5, r6, r7, lr}
    922a:	46ce      	mov	lr, r9
    922c:	4647      	mov	r7, r8
    922e:	b580      	push	{r7, lr}
    9230:	b0a3      	sub	sp, #140	; 0x8c
    9232:	9005      	str	r0, [sp, #20]
    9234:	000c      	movs	r4, r1
    9236:	0015      	movs	r5, r2
    9238:	001f      	movs	r7, r3
    923a:	ab2a      	add	r3, sp, #168	; 0xa8
    923c:	881b      	ldrh	r3, [r3, #0]
    923e:	4699      	mov	r9, r3
    9240:	ab2b      	add	r3, sp, #172	; 0xac
    9242:	781b      	ldrb	r3, [r3, #0]
    9244:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    9246:	2a01      	cmp	r2, #1
    9248:	d003      	beq.n	9252 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    924a:	2f00      	cmp	r7, #0
    924c:	d040      	beq.n	92d0 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    924e:	2a02      	cmp	r2, #2
    9250:	d04c      	beq.n	92ec <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    9252:	1e63      	subs	r3, r4, #1
    9254:	2b1f      	cmp	r3, #31
    9256:	d900      	bls.n	925a <m2m_wifi_connect_sc+0x32>
    9258:	e078      	b.n	934c <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    925a:	464b      	mov	r3, r9
    925c:	3b01      	subs	r3, #1
    925e:	b29b      	uxth	r3, r3
    9260:	2b0d      	cmp	r3, #13
    9262:	d903      	bls.n	926c <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    9264:	464b      	mov	r3, r9
    9266:	2bff      	cmp	r3, #255	; 0xff
    9268:	d000      	beq.n	926c <m2m_wifi_connect_sc+0x44>
    926a:	e07d      	b.n	9368 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    926c:	ae07      	add	r6, sp, #28
    926e:	0022      	movs	r2, r4
    9270:	9905      	ldr	r1, [sp, #20]
    9272:	205a      	movs	r0, #90	; 0x5a
    9274:	ab02      	add	r3, sp, #8
    9276:	469c      	mov	ip, r3
    9278:	4460      	add	r0, ip
    927a:	4b78      	ldr	r3, [pc, #480]	; (945c <m2m_wifi_connect_sc+0x234>)
    927c:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    927e:	1934      	adds	r4, r6, r4
    9280:	3446      	adds	r4, #70	; 0x46
    9282:	2300      	movs	r3, #0
    9284:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    9286:	3344      	adds	r3, #68	; 0x44
    9288:	464a      	mov	r2, r9
    928a:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    928c:	4643      	mov	r3, r8
    928e:	1e5a      	subs	r2, r3, #1
    9290:	4193      	sbcs	r3, r2
    9292:	2267      	movs	r2, #103	; 0x67
    9294:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    9296:	2341      	movs	r3, #65	; 0x41
    9298:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    929a:	2d03      	cmp	r5, #3
    929c:	d100      	bne.n	92a0 <m2m_wifi_connect_sc+0x78>
    929e:	e072      	b.n	9386 <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    92a0:	2d02      	cmp	r5, #2
    92a2:	d100      	bne.n	92a6 <m2m_wifi_connect_sc+0x7e>
    92a4:	e0ab      	b.n	93fe <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    92a6:	2d04      	cmp	r5, #4
    92a8:	d100      	bne.n	92ac <m2m_wifi_connect_sc+0x84>
    92aa:	e0c3      	b.n	9434 <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    92ac:	2d01      	cmp	r5, #1
    92ae:	d000      	beq.n	92b2 <m2m_wifi_connect_sc+0x8a>
    92b0:	e0c6      	b.n	9440 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    92b2:	2300      	movs	r3, #0
    92b4:	9302      	str	r3, [sp, #8]
    92b6:	9301      	str	r3, [sp, #4]
    92b8:	9300      	str	r3, [sp, #0]
    92ba:	336c      	adds	r3, #108	; 0x6c
    92bc:	aa07      	add	r2, sp, #28
    92be:	2128      	movs	r1, #40	; 0x28
    92c0:	2001      	movs	r0, #1
    92c2:	4c67      	ldr	r4, [pc, #412]	; (9460 <m2m_wifi_connect_sc+0x238>)
    92c4:	47a0      	blx	r4

ERR1:
	return ret;
}
    92c6:	b023      	add	sp, #140	; 0x8c
    92c8:	bc0c      	pop	{r2, r3}
    92ca:	4690      	mov	r8, r2
    92cc:	4699      	mov	r9, r3
    92ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    92d0:	4a64      	ldr	r2, [pc, #400]	; (9464 <m2m_wifi_connect_sc+0x23c>)
    92d2:	4965      	ldr	r1, [pc, #404]	; (9468 <m2m_wifi_connect_sc+0x240>)
    92d4:	4865      	ldr	r0, [pc, #404]	; (946c <m2m_wifi_connect_sc+0x244>)
    92d6:	4b66      	ldr	r3, [pc, #408]	; (9470 <m2m_wifi_connect_sc+0x248>)
    92d8:	4798      	blx	r3
    92da:	4866      	ldr	r0, [pc, #408]	; (9474 <m2m_wifi_connect_sc+0x24c>)
    92dc:	4b66      	ldr	r3, [pc, #408]	; (9478 <m2m_wifi_connect_sc+0x250>)
    92de:	4798      	blx	r3
    92e0:	200d      	movs	r0, #13
    92e2:	4b66      	ldr	r3, [pc, #408]	; (947c <m2m_wifi_connect_sc+0x254>)
    92e4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    92e6:	200c      	movs	r0, #12
    92e8:	4240      	negs	r0, r0
			goto ERR1;
    92ea:	e7ec      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    92ec:	0038      	movs	r0, r7
    92ee:	4b64      	ldr	r3, [pc, #400]	; (9480 <m2m_wifi_connect_sc+0x258>)
    92f0:	4798      	blx	r3
    92f2:	2840      	cmp	r0, #64	; 0x40
    92f4:	d1ad      	bne.n	9252 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    92f6:	783b      	ldrb	r3, [r7, #0]
    92f8:	001a      	movs	r2, r3
    92fa:	3a30      	subs	r2, #48	; 0x30
    92fc:	2a36      	cmp	r2, #54	; 0x36
    92fe:	d817      	bhi.n	9330 <m2m_wifi_connect_sc+0x108>
    9300:	3a0a      	subs	r2, #10
    9302:	2a06      	cmp	r2, #6
    9304:	d914      	bls.n	9330 <m2m_wifi_connect_sc+0x108>
    9306:	3b47      	subs	r3, #71	; 0x47
    9308:	2b19      	cmp	r3, #25
    930a:	d911      	bls.n	9330 <m2m_wifi_connect_sc+0x108>
    930c:	1c7a      	adds	r2, r7, #1
    930e:	0038      	movs	r0, r7
    9310:	3040      	adds	r0, #64	; 0x40
    9312:	7813      	ldrb	r3, [r2, #0]
    9314:	0019      	movs	r1, r3
    9316:	3930      	subs	r1, #48	; 0x30
    9318:	2936      	cmp	r1, #54	; 0x36
    931a:	d809      	bhi.n	9330 <m2m_wifi_connect_sc+0x108>
    931c:	390a      	subs	r1, #10
    931e:	2906      	cmp	r1, #6
    9320:	d906      	bls.n	9330 <m2m_wifi_connect_sc+0x108>
    9322:	3b47      	subs	r3, #71	; 0x47
    9324:	2b19      	cmp	r3, #25
    9326:	d903      	bls.n	9330 <m2m_wifi_connect_sc+0x108>
    9328:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    932a:	4282      	cmp	r2, r0
    932c:	d1f1      	bne.n	9312 <m2m_wifi_connect_sc+0xea>
    932e:	e790      	b.n	9252 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    9330:	4a54      	ldr	r2, [pc, #336]	; (9484 <m2m_wifi_connect_sc+0x25c>)
    9332:	494d      	ldr	r1, [pc, #308]	; (9468 <m2m_wifi_connect_sc+0x240>)
    9334:	484d      	ldr	r0, [pc, #308]	; (946c <m2m_wifi_connect_sc+0x244>)
    9336:	4b4e      	ldr	r3, [pc, #312]	; (9470 <m2m_wifi_connect_sc+0x248>)
    9338:	4798      	blx	r3
    933a:	4853      	ldr	r0, [pc, #332]	; (9488 <m2m_wifi_connect_sc+0x260>)
    933c:	4b4e      	ldr	r3, [pc, #312]	; (9478 <m2m_wifi_connect_sc+0x250>)
    933e:	4798      	blx	r3
    9340:	200d      	movs	r0, #13
    9342:	4b4e      	ldr	r3, [pc, #312]	; (947c <m2m_wifi_connect_sc+0x254>)
    9344:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    9346:	200c      	movs	r0, #12
    9348:	4240      	negs	r0, r0
					goto ERR1;
    934a:	e7bc      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    934c:	4a4f      	ldr	r2, [pc, #316]	; (948c <m2m_wifi_connect_sc+0x264>)
    934e:	4946      	ldr	r1, [pc, #280]	; (9468 <m2m_wifi_connect_sc+0x240>)
    9350:	4846      	ldr	r0, [pc, #280]	; (946c <m2m_wifi_connect_sc+0x244>)
    9352:	4b47      	ldr	r3, [pc, #284]	; (9470 <m2m_wifi_connect_sc+0x248>)
    9354:	4798      	blx	r3
    9356:	484e      	ldr	r0, [pc, #312]	; (9490 <m2m_wifi_connect_sc+0x268>)
    9358:	4b47      	ldr	r3, [pc, #284]	; (9478 <m2m_wifi_connect_sc+0x250>)
    935a:	4798      	blx	r3
    935c:	200d      	movs	r0, #13
    935e:	4b47      	ldr	r3, [pc, #284]	; (947c <m2m_wifi_connect_sc+0x254>)
    9360:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    9362:	200c      	movs	r0, #12
    9364:	4240      	negs	r0, r0
		goto ERR1;
    9366:	e7ae      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    9368:	228d      	movs	r2, #141	; 0x8d
    936a:	0092      	lsls	r2, r2, #2
    936c:	493e      	ldr	r1, [pc, #248]	; (9468 <m2m_wifi_connect_sc+0x240>)
    936e:	483f      	ldr	r0, [pc, #252]	; (946c <m2m_wifi_connect_sc+0x244>)
    9370:	4b3f      	ldr	r3, [pc, #252]	; (9470 <m2m_wifi_connect_sc+0x248>)
    9372:	4798      	blx	r3
    9374:	4847      	ldr	r0, [pc, #284]	; (9494 <m2m_wifi_connect_sc+0x26c>)
    9376:	4b40      	ldr	r3, [pc, #256]	; (9478 <m2m_wifi_connect_sc+0x250>)
    9378:	4798      	blx	r3
    937a:	200d      	movs	r0, #13
    937c:	4b3f      	ldr	r3, [pc, #252]	; (947c <m2m_wifi_connect_sc+0x254>)
    937e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9380:	200c      	movs	r0, #12
    9382:	4240      	negs	r0, r0
			goto ERR1;
    9384:	e79f      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    9386:	783b      	ldrb	r3, [r7, #0]
    9388:	3b01      	subs	r3, #1
    938a:	b2db      	uxtb	r3, r3
    938c:	aa07      	add	r2, sp, #28
    938e:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    9390:	2b03      	cmp	r3, #3
    9392:	d817      	bhi.n	93c4 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    9394:	787a      	ldrb	r2, [r7, #1]
    9396:	1e51      	subs	r1, r2, #1
    9398:	ab07      	add	r3, sp, #28
    939a:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    939c:	2310      	movs	r3, #16
    939e:	0011      	movs	r1, r2
    93a0:	4399      	bics	r1, r3
    93a2:	290b      	cmp	r1, #11
    93a4:	d01d      	beq.n	93e2 <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    93a6:	4a3c      	ldr	r2, [pc, #240]	; (9498 <m2m_wifi_connect_sc+0x270>)
    93a8:	492f      	ldr	r1, [pc, #188]	; (9468 <m2m_wifi_connect_sc+0x240>)
    93aa:	4830      	ldr	r0, [pc, #192]	; (946c <m2m_wifi_connect_sc+0x244>)
    93ac:	4c30      	ldr	r4, [pc, #192]	; (9470 <m2m_wifi_connect_sc+0x248>)
    93ae:	47a0      	blx	r4
    93b0:	ab07      	add	r3, sp, #28
    93b2:	7859      	ldrb	r1, [r3, #1]
    93b4:	4839      	ldr	r0, [pc, #228]	; (949c <m2m_wifi_connect_sc+0x274>)
    93b6:	47a0      	blx	r4
    93b8:	200d      	movs	r0, #13
    93ba:	4b30      	ldr	r3, [pc, #192]	; (947c <m2m_wifi_connect_sc+0x254>)
    93bc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    93be:	200c      	movs	r0, #12
    93c0:	4240      	negs	r0, r0
			goto ERR1;
    93c2:	e780      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    93c4:	4a36      	ldr	r2, [pc, #216]	; (94a0 <m2m_wifi_connect_sc+0x278>)
    93c6:	4928      	ldr	r1, [pc, #160]	; (9468 <m2m_wifi_connect_sc+0x240>)
    93c8:	4828      	ldr	r0, [pc, #160]	; (946c <m2m_wifi_connect_sc+0x244>)
    93ca:	4c29      	ldr	r4, [pc, #164]	; (9470 <m2m_wifi_connect_sc+0x248>)
    93cc:	47a0      	blx	r4
    93ce:	ab07      	add	r3, sp, #28
    93d0:	7819      	ldrb	r1, [r3, #0]
    93d2:	4834      	ldr	r0, [pc, #208]	; (94a4 <m2m_wifi_connect_sc+0x27c>)
    93d4:	47a0      	blx	r4
    93d6:	200d      	movs	r0, #13
    93d8:	4b28      	ldr	r3, [pc, #160]	; (947c <m2m_wifi_connect_sc+0x254>)
    93da:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    93dc:	200c      	movs	r0, #12
    93de:	4240      	negs	r0, r0
			goto ERR1;
    93e0:	e771      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    93e2:	1cb9      	adds	r1, r7, #2
    93e4:	2016      	movs	r0, #22
    93e6:	ab02      	add	r3, sp, #8
    93e8:	469c      	mov	ip, r3
    93ea:	4460      	add	r0, ip
    93ec:	4b1b      	ldr	r3, [pc, #108]	; (945c <m2m_wifi_connect_sc+0x234>)
    93ee:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    93f0:	787b      	ldrb	r3, [r7, #1]
    93f2:	aa07      	add	r2, sp, #28
    93f4:	4694      	mov	ip, r2
    93f6:	4463      	add	r3, ip
    93f8:	2200      	movs	r2, #0
    93fa:	709a      	strb	r2, [r3, #2]
    93fc:	e759      	b.n	92b2 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    93fe:	0038      	movs	r0, r7
    9400:	4b1f      	ldr	r3, [pc, #124]	; (9480 <m2m_wifi_connect_sc+0x258>)
    9402:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    9404:	1e43      	subs	r3, r0, #1
    9406:	b29b      	uxth	r3, r3
    9408:	2b3f      	cmp	r3, #63	; 0x3f
    940a:	d805      	bhi.n	9418 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    940c:	1c42      	adds	r2, r0, #1
    940e:	0039      	movs	r1, r7
    9410:	a807      	add	r0, sp, #28
    9412:	4b12      	ldr	r3, [pc, #72]	; (945c <m2m_wifi_connect_sc+0x234>)
    9414:	4798      	blx	r3
    9416:	e74c      	b.n	92b2 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    9418:	4a23      	ldr	r2, [pc, #140]	; (94a8 <m2m_wifi_connect_sc+0x280>)
    941a:	4913      	ldr	r1, [pc, #76]	; (9468 <m2m_wifi_connect_sc+0x240>)
    941c:	4813      	ldr	r0, [pc, #76]	; (946c <m2m_wifi_connect_sc+0x244>)
    941e:	4b14      	ldr	r3, [pc, #80]	; (9470 <m2m_wifi_connect_sc+0x248>)
    9420:	4798      	blx	r3
    9422:	4822      	ldr	r0, [pc, #136]	; (94ac <m2m_wifi_connect_sc+0x284>)
    9424:	4b14      	ldr	r3, [pc, #80]	; (9478 <m2m_wifi_connect_sc+0x250>)
    9426:	4798      	blx	r3
    9428:	200d      	movs	r0, #13
    942a:	4b14      	ldr	r3, [pc, #80]	; (947c <m2m_wifi_connect_sc+0x254>)
    942c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    942e:	200c      	movs	r0, #12
    9430:	4240      	negs	r0, r0
			goto ERR1;
    9432:	e748      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    9434:	223e      	movs	r2, #62	; 0x3e
    9436:	0039      	movs	r1, r7
    9438:	a807      	add	r0, sp, #28
    943a:	4b08      	ldr	r3, [pc, #32]	; (945c <m2m_wifi_connect_sc+0x234>)
    943c:	4798      	blx	r3
    943e:	e738      	b.n	92b2 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    9440:	4a1b      	ldr	r2, [pc, #108]	; (94b0 <m2m_wifi_connect_sc+0x288>)
    9442:	4909      	ldr	r1, [pc, #36]	; (9468 <m2m_wifi_connect_sc+0x240>)
    9444:	4809      	ldr	r0, [pc, #36]	; (946c <m2m_wifi_connect_sc+0x244>)
    9446:	4b0a      	ldr	r3, [pc, #40]	; (9470 <m2m_wifi_connect_sc+0x248>)
    9448:	4798      	blx	r3
    944a:	481a      	ldr	r0, [pc, #104]	; (94b4 <m2m_wifi_connect_sc+0x28c>)
    944c:	4b0a      	ldr	r3, [pc, #40]	; (9478 <m2m_wifi_connect_sc+0x250>)
    944e:	4798      	blx	r3
    9450:	200d      	movs	r0, #13
    9452:	4b0a      	ldr	r3, [pc, #40]	; (947c <m2m_wifi_connect_sc+0x254>)
    9454:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    9456:	200c      	movs	r0, #12
    9458:	4240      	negs	r0, r0
		goto ERR1;
    945a:	e734      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
    945c:	00008521 	.word	0x00008521
    9460:	0000866d 	.word	0x0000866d
    9464:	00000215 	.word	0x00000215
    9468:	000159ec 	.word	0x000159ec
    946c:	00015668 	.word	0x00015668
    9470:	000140dd 	.word	0x000140dd
    9474:	00015a34 	.word	0x00015a34
    9478:	000141f9 	.word	0x000141f9
    947c:	00014111 	.word	0x00014111
    9480:	00008545 	.word	0x00008545
    9484:	00000221 	.word	0x00000221
    9488:	00015a48 	.word	0x00015a48
    948c:	0000022b 	.word	0x0000022b
    9490:	00015a54 	.word	0x00015a54
    9494:	00015a68 	.word	0x00015a68
    9498:	00000252 	.word	0x00000252
    949c:	00015a90 	.word	0x00015a90
    94a0:	0000024b 	.word	0x0000024b
    94a4:	00015a74 	.word	0x00015a74
    94a8:	00000261 	.word	0x00000261
    94ac:	00015aac 	.word	0x00015aac
    94b0:	00000271 	.word	0x00000271
    94b4:	00015ac8 	.word	0x00015ac8

000094b8 <m2m_wifi_connect>:
{
    94b8:	b530      	push	{r4, r5, lr}
    94ba:	b083      	sub	sp, #12
    94bc:	ac06      	add	r4, sp, #24
    94be:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    94c0:	2500      	movs	r5, #0
    94c2:	9501      	str	r5, [sp, #4]
    94c4:	9400      	str	r4, [sp, #0]
    94c6:	4c02      	ldr	r4, [pc, #8]	; (94d0 <m2m_wifi_connect+0x18>)
    94c8:	47a0      	blx	r4
}
    94ca:	b003      	add	sp, #12
    94cc:	bd30      	pop	{r4, r5, pc}
    94ce:	46c0      	nop			; (mov r8, r8)
    94d0:	00009229 	.word	0x00009229

000094d4 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    94d4:	2000      	movs	r0, #0
    94d6:	4770      	bx	lr

000094d8 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    94d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    94da:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    94dc:	2580      	movs	r5, #128	; 0x80
    94de:	006d      	lsls	r5, r5, #1
    94e0:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    94e2:	24a5      	movs	r4, #165	; 0xa5
    94e4:	0164      	lsls	r4, r4, #5
    94e6:	4f08      	ldr	r7, [pc, #32]	; (9508 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    94e8:	4e08      	ldr	r6, [pc, #32]	; (950c <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    94ea:	0029      	movs	r1, r5
    94ec:	0020      	movs	r0, r4
    94ee:	47b8      	blx	r7
			uint32 reg = 0;
    94f0:	2300      	movs	r3, #0
    94f2:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    94f4:	a901      	add	r1, sp, #4
    94f6:	0020      	movs	r0, r4
    94f8:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    94fa:	2800      	cmp	r0, #0
    94fc:	d1f5      	bne.n	94ea <chip_apply_conf+0x12>
				if(reg == val32)
    94fe:	9b01      	ldr	r3, [sp, #4]
    9500:	429d      	cmp	r5, r3
    9502:	d1f2      	bne.n	94ea <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    9504:	b003      	add	sp, #12
    9506:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9508:	000099c9 	.word	0x000099c9
    950c:	000099bd 	.word	0x000099bd

00009510 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    9510:	b500      	push	{lr}
    9512:	b083      	sub	sp, #12
	uint32 reg = 0;
    9514:	2300      	movs	r3, #0
    9516:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    9518:	a901      	add	r1, sp, #4
    951a:	4811      	ldr	r0, [pc, #68]	; (9560 <enable_interrupts+0x50>)
    951c:	4b11      	ldr	r3, [pc, #68]	; (9564 <enable_interrupts+0x54>)
    951e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    9520:	2800      	cmp	r0, #0
    9522:	d001      	beq.n	9528 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    9524:	b003      	add	sp, #12
    9526:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    9528:	2180      	movs	r1, #128	; 0x80
    952a:	0049      	lsls	r1, r1, #1
    952c:	9b01      	ldr	r3, [sp, #4]
    952e:	4319      	orrs	r1, r3
    9530:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    9532:	480b      	ldr	r0, [pc, #44]	; (9560 <enable_interrupts+0x50>)
    9534:	4b0c      	ldr	r3, [pc, #48]	; (9568 <enable_interrupts+0x58>)
    9536:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    9538:	2800      	cmp	r0, #0
    953a:	d1f3      	bne.n	9524 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    953c:	a901      	add	r1, sp, #4
    953e:	20d0      	movs	r0, #208	; 0xd0
    9540:	0140      	lsls	r0, r0, #5
    9542:	4b08      	ldr	r3, [pc, #32]	; (9564 <enable_interrupts+0x54>)
    9544:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    9546:	2800      	cmp	r0, #0
    9548:	d1ec      	bne.n	9524 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    954a:	2180      	movs	r1, #128	; 0x80
    954c:	0249      	lsls	r1, r1, #9
    954e:	9b01      	ldr	r3, [sp, #4]
    9550:	4319      	orrs	r1, r3
    9552:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    9554:	20d0      	movs	r0, #208	; 0xd0
    9556:	0140      	lsls	r0, r0, #5
    9558:	4b03      	ldr	r3, [pc, #12]	; (9568 <enable_interrupts+0x58>)
    955a:	4798      	blx	r3
    955c:	e7e2      	b.n	9524 <enable_interrupts+0x14>
    955e:	46c0      	nop			; (mov r8, r8)
    9560:	00001408 	.word	0x00001408
    9564:	000099bd 	.word	0x000099bd
    9568:	000099c9 	.word	0x000099c9

0000956c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    956c:	b510      	push	{r4, lr}
    956e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    9570:	4b28      	ldr	r3, [pc, #160]	; (9614 <nmi_get_chipid+0xa8>)
    9572:	681c      	ldr	r4, [r3, #0]
    9574:	2c00      	cmp	r4, #0
    9576:	d004      	beq.n	9582 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    9578:	4b26      	ldr	r3, [pc, #152]	; (9614 <nmi_get_chipid+0xa8>)
    957a:	681c      	ldr	r4, [r3, #0]
}
    957c:	0020      	movs	r0, r4
    957e:	b002      	add	sp, #8
    9580:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    9582:	0019      	movs	r1, r3
    9584:	2080      	movs	r0, #128	; 0x80
    9586:	0140      	lsls	r0, r0, #5
    9588:	4b23      	ldr	r3, [pc, #140]	; (9618 <nmi_get_chipid+0xac>)
    958a:	4798      	blx	r3
    958c:	2800      	cmp	r0, #0
    958e:	d003      	beq.n	9598 <nmi_get_chipid+0x2c>
			chipid = 0;
    9590:	2200      	movs	r2, #0
    9592:	4b20      	ldr	r3, [pc, #128]	; (9614 <nmi_get_chipid+0xa8>)
    9594:	601a      	str	r2, [r3, #0]
			return 0;
    9596:	e7f1      	b.n	957c <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    9598:	a901      	add	r1, sp, #4
    959a:	4820      	ldr	r0, [pc, #128]	; (961c <nmi_get_chipid+0xb0>)
    959c:	4b1e      	ldr	r3, [pc, #120]	; (9618 <nmi_get_chipid+0xac>)
    959e:	4798      	blx	r3
    95a0:	2800      	cmp	r0, #0
    95a2:	d003      	beq.n	95ac <nmi_get_chipid+0x40>
			chipid = 0;
    95a4:	2200      	movs	r2, #0
    95a6:	4b1b      	ldr	r3, [pc, #108]	; (9614 <nmi_get_chipid+0xa8>)
    95a8:	601a      	str	r2, [r3, #0]
			return 0;
    95aa:	e7e7      	b.n	957c <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    95ac:	4b19      	ldr	r3, [pc, #100]	; (9614 <nmi_get_chipid+0xa8>)
    95ae:	681b      	ldr	r3, [r3, #0]
    95b0:	4a1b      	ldr	r2, [pc, #108]	; (9620 <nmi_get_chipid+0xb4>)
    95b2:	4293      	cmp	r3, r2
    95b4:	d00e      	beq.n	95d4 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    95b6:	4a1b      	ldr	r2, [pc, #108]	; (9624 <nmi_get_chipid+0xb8>)
    95b8:	4293      	cmp	r3, r2
    95ba:	d012      	beq.n	95e2 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    95bc:	4a1a      	ldr	r2, [pc, #104]	; (9628 <nmi_get_chipid+0xbc>)
    95be:	4293      	cmp	r3, r2
    95c0:	d01c      	beq.n	95fc <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    95c2:	4914      	ldr	r1, [pc, #80]	; (9614 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    95c4:	4a19      	ldr	r2, [pc, #100]	; (962c <nmi_get_chipid+0xc0>)
    95c6:	680b      	ldr	r3, [r1, #0]
    95c8:	401a      	ands	r2, r3
		chipid |= 0x050000;
    95ca:	23a0      	movs	r3, #160	; 0xa0
    95cc:	02db      	lsls	r3, r3, #11
    95ce:	4313      	orrs	r3, r2
    95d0:	600b      	str	r3, [r1, #0]
    95d2:	e7d1      	b.n	9578 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    95d4:	9b01      	ldr	r3, [sp, #4]
    95d6:	2b01      	cmp	r3, #1
    95d8:	d0f3      	beq.n	95c2 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    95da:	4a15      	ldr	r2, [pc, #84]	; (9630 <nmi_get_chipid+0xc4>)
    95dc:	4b0d      	ldr	r3, [pc, #52]	; (9614 <nmi_get_chipid+0xa8>)
    95de:	601a      	str	r2, [r3, #0]
    95e0:	e7ef      	b.n	95c2 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    95e2:	9b01      	ldr	r3, [sp, #4]
    95e4:	2b03      	cmp	r3, #3
    95e6:	d0ec      	beq.n	95c2 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    95e8:	2b04      	cmp	r3, #4
    95ea:	d003      	beq.n	95f4 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    95ec:	4a11      	ldr	r2, [pc, #68]	; (9634 <nmi_get_chipid+0xc8>)
    95ee:	4b09      	ldr	r3, [pc, #36]	; (9614 <nmi_get_chipid+0xa8>)
    95f0:	601a      	str	r2, [r3, #0]
    95f2:	e7e6      	b.n	95c2 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    95f4:	4a10      	ldr	r2, [pc, #64]	; (9638 <nmi_get_chipid+0xcc>)
    95f6:	4b07      	ldr	r3, [pc, #28]	; (9614 <nmi_get_chipid+0xa8>)
    95f8:	601a      	str	r2, [r3, #0]
    95fa:	e7e2      	b.n	95c2 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    95fc:	4905      	ldr	r1, [pc, #20]	; (9614 <nmi_get_chipid+0xa8>)
    95fe:	20ec      	movs	r0, #236	; 0xec
    9600:	0380      	lsls	r0, r0, #14
    9602:	4b05      	ldr	r3, [pc, #20]	; (9618 <nmi_get_chipid+0xac>)
    9604:	4798      	blx	r3
    9606:	2800      	cmp	r0, #0
    9608:	d0db      	beq.n	95c2 <nmi_get_chipid+0x56>
			chipid = 0;
    960a:	2200      	movs	r2, #0
    960c:	4b01      	ldr	r3, [pc, #4]	; (9614 <nmi_get_chipid+0xa8>)
    960e:	601a      	str	r2, [r3, #0]
			return 0;
    9610:	e7b4      	b.n	957c <nmi_get_chipid+0x10>
    9612:	46c0      	nop			; (mov r8, r8)
    9614:	20000218 	.word	0x20000218
    9618:	000099bd 	.word	0x000099bd
    961c:	000013f4 	.word	0x000013f4
    9620:	001002a0 	.word	0x001002a0
    9624:	001002b0 	.word	0x001002b0
    9628:	001000f0 	.word	0x001000f0
    962c:	fff0ffff 	.word	0xfff0ffff
    9630:	001002a1 	.word	0x001002a1
    9634:	001002b2 	.word	0x001002b2
    9638:	001002b1 	.word	0x001002b1

0000963c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    963c:	b530      	push	{r4, r5, lr}
    963e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    9640:	4c16      	ldr	r4, [pc, #88]	; (969c <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    9642:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    9644:	a901      	add	r1, sp, #4
    9646:	2010      	movs	r0, #16
    9648:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    964a:	2800      	cmp	r0, #0
    964c:	d11c      	bne.n	9688 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    964e:	9b01      	ldr	r3, [sp, #4]
    9650:	422b      	tst	r3, r5
    9652:	d1f7      	bne.n	9644 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    9654:	a901      	add	r1, sp, #4
    9656:	3001      	adds	r0, #1
    9658:	4b10      	ldr	r3, [pc, #64]	; (969c <chip_sleep+0x60>)
    965a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    965c:	2800      	cmp	r0, #0
    965e:	d113      	bne.n	9688 <chip_sleep+0x4c>
	if(reg & NBIT1)
    9660:	9901      	ldr	r1, [sp, #4]
    9662:	078b      	lsls	r3, r1, #30
    9664:	d507      	bpl.n	9676 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    9666:	2302      	movs	r3, #2
    9668:	4399      	bics	r1, r3
    966a:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    966c:	3001      	adds	r0, #1
    966e:	4b0c      	ldr	r3, [pc, #48]	; (96a0 <chip_sleep+0x64>)
    9670:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    9672:	2800      	cmp	r0, #0
    9674:	d108      	bne.n	9688 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    9676:	a901      	add	r1, sp, #4
    9678:	200b      	movs	r0, #11
    967a:	4b08      	ldr	r3, [pc, #32]	; (969c <chip_sleep+0x60>)
    967c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    967e:	2800      	cmp	r0, #0
    9680:	d102      	bne.n	9688 <chip_sleep+0x4c>
	if(reg & NBIT0)
    9682:	9901      	ldr	r1, [sp, #4]
    9684:	07cb      	lsls	r3, r1, #31
    9686:	d401      	bmi.n	968c <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    9688:	b003      	add	sp, #12
    968a:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    968c:	2301      	movs	r3, #1
    968e:	4399      	bics	r1, r3
    9690:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    9692:	300b      	adds	r0, #11
    9694:	4b02      	ldr	r3, [pc, #8]	; (96a0 <chip_sleep+0x64>)
    9696:	4798      	blx	r3
    9698:	e7f6      	b.n	9688 <chip_sleep+0x4c>
    969a:	46c0      	nop			; (mov r8, r8)
    969c:	000099bd 	.word	0x000099bd
    96a0:	000099c9 	.word	0x000099c9

000096a4 <chip_wake>:
sint8 chip_wake(void)
{
    96a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    96a6:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    96a8:	2300      	movs	r3, #0
    96aa:	9301      	str	r3, [sp, #4]
    96ac:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    96ae:	a901      	add	r1, sp, #4
    96b0:	200b      	movs	r0, #11
    96b2:	4b28      	ldr	r3, [pc, #160]	; (9754 <chip_wake+0xb0>)
    96b4:	4798      	blx	r3
    96b6:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    96b8:	d130      	bne.n	971c <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    96ba:	9901      	ldr	r1, [sp, #4]
    96bc:	07cb      	lsls	r3, r1, #31
    96be:	d406      	bmi.n	96ce <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    96c0:	2301      	movs	r3, #1
    96c2:	4319      	orrs	r1, r3
    96c4:	200b      	movs	r0, #11
    96c6:	4b24      	ldr	r3, [pc, #144]	; (9758 <chip_wake+0xb4>)
    96c8:	4798      	blx	r3
    96ca:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    96cc:	d126      	bne.n	971c <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    96ce:	a901      	add	r1, sp, #4
    96d0:	2001      	movs	r0, #1
    96d2:	4b20      	ldr	r3, [pc, #128]	; (9754 <chip_wake+0xb0>)
    96d4:	4798      	blx	r3
    96d6:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    96d8:	d120      	bne.n	971c <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    96da:	9901      	ldr	r1, [sp, #4]
    96dc:	078b      	lsls	r3, r1, #30
    96de:	d520      	bpl.n	9722 <chip_wake+0x7e>
{
    96e0:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    96e2:	4f1c      	ldr	r7, [pc, #112]	; (9754 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    96e4:	4e1d      	ldr	r6, [pc, #116]	; (975c <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    96e6:	4669      	mov	r1, sp
    96e8:	200f      	movs	r0, #15
    96ea:	47b8      	blx	r7
    96ec:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    96ee:	d120      	bne.n	9732 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    96f0:	9b00      	ldr	r3, [sp, #0]
    96f2:	075b      	lsls	r3, r3, #29
    96f4:	d42b      	bmi.n	974e <chip_wake+0xaa>
		nm_bsp_sleep(2);
    96f6:	2002      	movs	r0, #2
    96f8:	47b0      	blx	r6
    96fa:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    96fc:	2d00      	cmp	r5, #0
    96fe:	d1f2      	bne.n	96e6 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    9700:	22af      	movs	r2, #175	; 0xaf
    9702:	0052      	lsls	r2, r2, #1
    9704:	4916      	ldr	r1, [pc, #88]	; (9760 <chip_wake+0xbc>)
    9706:	4817      	ldr	r0, [pc, #92]	; (9764 <chip_wake+0xc0>)
    9708:	4b17      	ldr	r3, [pc, #92]	; (9768 <chip_wake+0xc4>)
    970a:	4798      	blx	r3
    970c:	4817      	ldr	r0, [pc, #92]	; (976c <chip_wake+0xc8>)
    970e:	4b18      	ldr	r3, [pc, #96]	; (9770 <chip_wake+0xcc>)
    9710:	4798      	blx	r3
    9712:	200d      	movs	r0, #13
    9714:	4b17      	ldr	r3, [pc, #92]	; (9774 <chip_wake+0xd0>)
    9716:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    9718:	2404      	movs	r4, #4
    971a:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    971c:	0020      	movs	r0, r4
    971e:	b003      	add	sp, #12
    9720:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    9722:	2302      	movs	r3, #2
    9724:	4319      	orrs	r1, r3
    9726:	2001      	movs	r0, #1
    9728:	4b0b      	ldr	r3, [pc, #44]	; (9758 <chip_wake+0xb4>)
    972a:	4798      	blx	r3
    972c:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    972e:	d0d7      	beq.n	96e0 <chip_wake+0x3c>
    9730:	e7f4      	b.n	971c <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    9732:	22aa      	movs	r2, #170	; 0xaa
    9734:	0052      	lsls	r2, r2, #1
    9736:	490a      	ldr	r1, [pc, #40]	; (9760 <chip_wake+0xbc>)
    9738:	480a      	ldr	r0, [pc, #40]	; (9764 <chip_wake+0xc0>)
    973a:	4d0b      	ldr	r5, [pc, #44]	; (9768 <chip_wake+0xc4>)
    973c:	47a8      	blx	r5
    973e:	9a00      	ldr	r2, [sp, #0]
    9740:	0021      	movs	r1, r4
    9742:	480d      	ldr	r0, [pc, #52]	; (9778 <chip_wake+0xd4>)
    9744:	47a8      	blx	r5
    9746:	200d      	movs	r0, #13
    9748:	4b0a      	ldr	r3, [pc, #40]	; (9774 <chip_wake+0xd0>)
    974a:	4798      	blx	r3
			goto _WAKE_EXIT;
    974c:	e7e6      	b.n	971c <chip_wake+0x78>
	nm_bus_reset();
    974e:	4b0b      	ldr	r3, [pc, #44]	; (977c <chip_wake+0xd8>)
    9750:	4798      	blx	r3
    9752:	e7e3      	b.n	971c <chip_wake+0x78>
    9754:	000099bd 	.word	0x000099bd
    9758:	000099c9 	.word	0x000099c9
    975c:	00008129 	.word	0x00008129
    9760:	00015ba8 	.word	0x00015ba8
    9764:	00015668 	.word	0x00015668
    9768:	000140dd 	.word	0x000140dd
    976c:	00015bf0 	.word	0x00015bf0
    9770:	000141f9 	.word	0x000141f9
    9774:	00014111 	.word	0x00014111
    9778:	00015bd8 	.word	0x00015bd8
    977c:	000099a5 	.word	0x000099a5

00009780 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    9780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9782:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    9784:	4d2d      	ldr	r5, [pc, #180]	; (983c <wait_for_bootrom+0xbc>)
    9786:	4c2e      	ldr	r4, [pc, #184]	; (9840 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    9788:	4e2e      	ldr	r6, [pc, #184]	; (9844 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    978a:	0028      	movs	r0, r5
    978c:	47a0      	blx	r4
		if (reg & 0x80000000) {
    978e:	2800      	cmp	r0, #0
    9790:	db02      	blt.n	9798 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    9792:	2001      	movs	r0, #1
    9794:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    9796:	e7f8      	b.n	978a <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    9798:	482b      	ldr	r0, [pc, #172]	; (9848 <wait_for_bootrom+0xc8>)
    979a:	4b29      	ldr	r3, [pc, #164]	; (9840 <wait_for_bootrom+0xc0>)
    979c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    979e:	07c3      	lsls	r3, r0, #31
    97a0:	d409      	bmi.n	97b6 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    97a2:	4e28      	ldr	r6, [pc, #160]	; (9844 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    97a4:	4c29      	ldr	r4, [pc, #164]	; (984c <wait_for_bootrom+0xcc>)
    97a6:	4d26      	ldr	r5, [pc, #152]	; (9840 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    97a8:	2001      	movs	r0, #1
    97aa:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    97ac:	0020      	movs	r0, r4
    97ae:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    97b0:	4b27      	ldr	r3, [pc, #156]	; (9850 <wait_for_bootrom+0xd0>)
    97b2:	4298      	cmp	r0, r3
    97b4:	d1f8      	bne.n	97a8 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    97b6:	2f02      	cmp	r7, #2
    97b8:	d021      	beq.n	97fe <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    97ba:	2f03      	cmp	r7, #3
    97bc:	d029      	beq.n	9812 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    97be:	2f04      	cmp	r7, #4
    97c0:	d030      	beq.n	9824 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    97c2:	4924      	ldr	r1, [pc, #144]	; (9854 <wait_for_bootrom+0xd4>)
    97c4:	4824      	ldr	r0, [pc, #144]	; (9858 <wait_for_bootrom+0xd8>)
    97c6:	4b25      	ldr	r3, [pc, #148]	; (985c <wait_for_bootrom+0xdc>)
    97c8:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    97ca:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    97cc:	4b24      	ldr	r3, [pc, #144]	; (9860 <wait_for_bootrom+0xe0>)
    97ce:	4798      	blx	r3
    97d0:	0500      	lsls	r0, r0, #20
    97d2:	0d00      	lsrs	r0, r0, #20
    97d4:	4b23      	ldr	r3, [pc, #140]	; (9864 <wait_for_bootrom+0xe4>)
    97d6:	4298      	cmp	r0, r3
    97d8:	d82a      	bhi.n	9830 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    97da:	0020      	movs	r0, r4
    97dc:	4b22      	ldr	r3, [pc, #136]	; (9868 <wait_for_bootrom+0xe8>)
    97de:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    97e0:	4822      	ldr	r0, [pc, #136]	; (986c <wait_for_bootrom+0xec>)
    97e2:	4c23      	ldr	r4, [pc, #140]	; (9870 <wait_for_bootrom+0xf0>)
    97e4:	47a0      	blx	r4
    97e6:	491b      	ldr	r1, [pc, #108]	; (9854 <wait_for_bootrom+0xd4>)
    97e8:	4822      	ldr	r0, [pc, #136]	; (9874 <wait_for_bootrom+0xf4>)
    97ea:	47a0      	blx	r4
    97ec:	200d      	movs	r0, #13
    97ee:	4b22      	ldr	r3, [pc, #136]	; (9878 <wait_for_bootrom+0xf8>)
    97f0:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    97f2:	4922      	ldr	r1, [pc, #136]	; (987c <wait_for_bootrom+0xfc>)
    97f4:	4815      	ldr	r0, [pc, #84]	; (984c <wait_for_bootrom+0xcc>)
    97f6:	4b19      	ldr	r3, [pc, #100]	; (985c <wait_for_bootrom+0xdc>)
    97f8:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    97fa:	2000      	movs	r0, #0
    97fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    97fe:	4920      	ldr	r1, [pc, #128]	; (9880 <wait_for_bootrom+0x100>)
    9800:	4820      	ldr	r0, [pc, #128]	; (9884 <wait_for_bootrom+0x104>)
    9802:	4c16      	ldr	r4, [pc, #88]	; (985c <wait_for_bootrom+0xdc>)
    9804:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    9806:	2180      	movs	r1, #128	; 0x80
    9808:	0349      	lsls	r1, r1, #13
    980a:	4813      	ldr	r0, [pc, #76]	; (9858 <wait_for_bootrom+0xd8>)
    980c:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    980e:	2400      	movs	r4, #0
    9810:	e7dc      	b.n	97cc <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    9812:	491b      	ldr	r1, [pc, #108]	; (9880 <wait_for_bootrom+0x100>)
    9814:	481b      	ldr	r0, [pc, #108]	; (9884 <wait_for_bootrom+0x104>)
    9816:	4c11      	ldr	r4, [pc, #68]	; (985c <wait_for_bootrom+0xdc>)
    9818:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    981a:	2100      	movs	r1, #0
    981c:	480e      	ldr	r0, [pc, #56]	; (9858 <wait_for_bootrom+0xd8>)
    981e:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    9820:	2400      	movs	r4, #0
    9822:	e7d3      	b.n	97cc <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    9824:	490b      	ldr	r1, [pc, #44]	; (9854 <wait_for_bootrom+0xd4>)
    9826:	480c      	ldr	r0, [pc, #48]	; (9858 <wait_for_bootrom+0xd8>)
    9828:	4b0c      	ldr	r3, [pc, #48]	; (985c <wait_for_bootrom+0xdc>)
    982a:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    982c:	2480      	movs	r4, #128	; 0x80
    982e:	e7cd      	b.n	97cc <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    9830:	2002      	movs	r0, #2
    9832:	4320      	orrs	r0, r4
    9834:	4b0c      	ldr	r3, [pc, #48]	; (9868 <wait_for_bootrom+0xe8>)
    9836:	4798      	blx	r3
    9838:	e7d2      	b.n	97e0 <wait_for_bootrom+0x60>
    983a:	46c0      	nop			; (mov r8, r8)
    983c:	00001014 	.word	0x00001014
    9840:	000099b1 	.word	0x000099b1
    9844:	00008129 	.word	0x00008129
    9848:	000207bc 	.word	0x000207bc
    984c:	000c000c 	.word	0x000c000c
    9850:	10add09e 	.word	0x10add09e
    9854:	13521352 	.word	0x13521352
    9858:	0000108c 	.word	0x0000108c
    985c:	000099c9 	.word	0x000099c9
    9860:	0000956d 	.word	0x0000956d
    9864:	0000039f 	.word	0x0000039f
    9868:	000094d9 	.word	0x000094d9
    986c:	00015998 	.word	0x00015998
    9870:	000140dd 	.word	0x000140dd
    9874:	00015c0c 	.word	0x00015c0c
    9878:	00014111 	.word	0x00014111
    987c:	ef522f61 	.word	0xef522f61
    9880:	3c1cd57d 	.word	0x3c1cd57d
    9884:	000207ac 	.word	0x000207ac

00009888 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    9888:	b570      	push	{r4, r5, r6, lr}
    988a:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    988c:	4b15      	ldr	r3, [pc, #84]	; (98e4 <wait_for_firmware_start+0x5c>)
    988e:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    9890:	4b15      	ldr	r3, [pc, #84]	; (98e8 <wait_for_firmware_start+0x60>)
    9892:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    9894:	3802      	subs	r0, #2
    9896:	2801      	cmp	r0, #1
    9898:	d911      	bls.n	98be <wait_for_firmware_start+0x36>
{
    989a:	2401      	movs	r4, #1
    989c:	4264      	negs	r4, r4
    989e:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    98a0:	4e12      	ldr	r6, [pc, #72]	; (98ec <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    98a2:	4d13      	ldr	r5, [pc, #76]	; (98f0 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    98a4:	9b00      	ldr	r3, [sp, #0]
    98a6:	4298      	cmp	r0, r3
    98a8:	d00e      	beq.n	98c8 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    98aa:	2002      	movs	r0, #2
    98ac:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    98ae:	9801      	ldr	r0, [sp, #4]
    98b0:	47a8      	blx	r5
    98b2:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    98b4:	2c00      	cmp	r4, #0
    98b6:	d1f5      	bne.n	98a4 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    98b8:	2005      	movs	r0, #5
    98ba:	4240      	negs	r0, r0
    98bc:	e009      	b.n	98d2 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    98be:	4b0d      	ldr	r3, [pc, #52]	; (98f4 <wait_for_firmware_start+0x6c>)
    98c0:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    98c2:	4b0d      	ldr	r3, [pc, #52]	; (98f8 <wait_for_firmware_start+0x70>)
    98c4:	9300      	str	r3, [sp, #0]
    98c6:	e7e8      	b.n	989a <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    98c8:	9a00      	ldr	r2, [sp, #0]
    98ca:	4b07      	ldr	r3, [pc, #28]	; (98e8 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    98cc:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    98ce:	429a      	cmp	r2, r3
    98d0:	d001      	beq.n	98d6 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    98d2:	b002      	add	sp, #8
    98d4:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    98d6:	2100      	movs	r1, #0
    98d8:	4802      	ldr	r0, [pc, #8]	; (98e4 <wait_for_firmware_start+0x5c>)
    98da:	4b08      	ldr	r3, [pc, #32]	; (98fc <wait_for_firmware_start+0x74>)
    98dc:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    98de:	2000      	movs	r0, #0
    98e0:	e7f7      	b.n	98d2 <wait_for_firmware_start+0x4a>
    98e2:	46c0      	nop			; (mov r8, r8)
    98e4:	0000108c 	.word	0x0000108c
    98e8:	02532636 	.word	0x02532636
    98ec:	00008129 	.word	0x00008129
    98f0:	000099b1 	.word	0x000099b1
    98f4:	000207ac 	.word	0x000207ac
    98f8:	d75dc1c3 	.word	0xd75dc1c3
    98fc:	000099c9 	.word	0x000099c9

00009900 <chip_deinit>:

sint8 chip_deinit(void)
{
    9900:	b510      	push	{r4, lr}
    9902:	b082      	sub	sp, #8
	uint32 reg = 0;
    9904:	2300      	movs	r3, #0
    9906:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    9908:	a901      	add	r1, sp, #4
    990a:	20a0      	movs	r0, #160	; 0xa0
    990c:	0140      	lsls	r0, r0, #5
    990e:	4b14      	ldr	r3, [pc, #80]	; (9960 <chip_deinit+0x60>)
    9910:	4798      	blx	r3
    9912:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    9914:	d115      	bne.n	9942 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    9916:	4913      	ldr	r1, [pc, #76]	; (9964 <chip_deinit+0x64>)
    9918:	9b01      	ldr	r3, [sp, #4]
    991a:	4019      	ands	r1, r3
    991c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    991e:	20a0      	movs	r0, #160	; 0xa0
    9920:	0140      	lsls	r0, r0, #5
    9922:	4b11      	ldr	r3, [pc, #68]	; (9968 <chip_deinit+0x68>)
    9924:	4798      	blx	r3
    9926:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    9928:	d016      	beq.n	9958 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    992a:	4a10      	ldr	r2, [pc, #64]	; (996c <chip_deinit+0x6c>)
    992c:	4910      	ldr	r1, [pc, #64]	; (9970 <chip_deinit+0x70>)
    992e:	4811      	ldr	r0, [pc, #68]	; (9974 <chip_deinit+0x74>)
    9930:	4b11      	ldr	r3, [pc, #68]	; (9978 <chip_deinit+0x78>)
    9932:	4798      	blx	r3
    9934:	4811      	ldr	r0, [pc, #68]	; (997c <chip_deinit+0x7c>)
    9936:	4b12      	ldr	r3, [pc, #72]	; (9980 <chip_deinit+0x80>)
    9938:	4798      	blx	r3
    993a:	200d      	movs	r0, #13
    993c:	4b11      	ldr	r3, [pc, #68]	; (9984 <chip_deinit+0x84>)
    993e:	4798      	blx	r3
		goto ERR1;
    9940:	e00a      	b.n	9958 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    9942:	4a11      	ldr	r2, [pc, #68]	; (9988 <chip_deinit+0x88>)
    9944:	490a      	ldr	r1, [pc, #40]	; (9970 <chip_deinit+0x70>)
    9946:	480b      	ldr	r0, [pc, #44]	; (9974 <chip_deinit+0x74>)
    9948:	4b0b      	ldr	r3, [pc, #44]	; (9978 <chip_deinit+0x78>)
    994a:	4798      	blx	r3
    994c:	480b      	ldr	r0, [pc, #44]	; (997c <chip_deinit+0x7c>)
    994e:	4b0c      	ldr	r3, [pc, #48]	; (9980 <chip_deinit+0x80>)
    9950:	4798      	blx	r3
    9952:	200d      	movs	r0, #13
    9954:	4b0b      	ldr	r3, [pc, #44]	; (9984 <chip_deinit+0x84>)
    9956:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    9958:	0020      	movs	r0, r4
    995a:	b002      	add	sp, #8
    995c:	bd10      	pop	{r4, pc}
    995e:	46c0      	nop			; (mov r8, r8)
    9960:	000099bd 	.word	0x000099bd
    9964:	fffffbff 	.word	0xfffffbff
    9968:	000099c9 	.word	0x000099c9
    996c:	0000020b 	.word	0x0000020b
    9970:	00015bb4 	.word	0x00015bb4
    9974:	00015668 	.word	0x00015668
    9978:	000140dd 	.word	0x000140dd
    997c:	00015bc0 	.word	0x00015bc0
    9980:	000141f9 	.word	0x000141f9
    9984:	00014111 	.word	0x00014111
    9988:	00000205 	.word	0x00000205

0000998c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    998c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    998e:	4b01      	ldr	r3, [pc, #4]	; (9994 <nm_bus_iface_init+0x8>)
    9990:	4798      	blx	r3
	return ret;
}
    9992:	bd10      	pop	{r4, pc}
    9994:	00008265 	.word	0x00008265

00009998 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    9998:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    999a:	4b01      	ldr	r3, [pc, #4]	; (99a0 <nm_bus_iface_deinit+0x8>)
    999c:	4798      	blx	r3

	return ret;
}
    999e:	bd10      	pop	{r4, pc}
    99a0:	000084b5 	.word	0x000084b5

000099a4 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    99a4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    99a6:	4b01      	ldr	r3, [pc, #4]	; (99ac <nm_bus_reset+0x8>)
    99a8:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    99aa:	bd10      	pop	{r4, pc}
    99ac:	0000a355 	.word	0x0000a355

000099b0 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    99b0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    99b2:	4b01      	ldr	r3, [pc, #4]	; (99b8 <nm_read_reg+0x8>)
    99b4:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    99b6:	bd10      	pop	{r4, pc}
    99b8:	0000a38d 	.word	0x0000a38d

000099bc <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    99bc:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    99be:	4b01      	ldr	r3, [pc, #4]	; (99c4 <nm_read_reg_with_ret+0x8>)
    99c0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    99c2:	bd10      	pop	{r4, pc}
    99c4:	0000a3a1 	.word	0x0000a3a1

000099c8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    99c8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    99ca:	4b01      	ldr	r3, [pc, #4]	; (99d0 <nm_write_reg+0x8>)
    99cc:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    99ce:	bd10      	pop	{r4, pc}
    99d0:	0000a3b9 	.word	0x0000a3b9

000099d4 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    99d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    99d6:	46d6      	mov	lr, sl
    99d8:	464f      	mov	r7, r9
    99da:	4646      	mov	r6, r8
    99dc:	b5c0      	push	{r6, r7, lr}
    99de:	b082      	sub	sp, #8
    99e0:	4680      	mov	r8, r0
    99e2:	4689      	mov	r9, r1
    99e4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    99e6:	4b13      	ldr	r3, [pc, #76]	; (9a34 <nm_read_block+0x60>)
    99e8:	881f      	ldrh	r7, [r3, #0]
    99ea:	3f08      	subs	r7, #8
    99ec:	b2bb      	uxth	r3, r7
    99ee:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    99f0:	001e      	movs	r6, r3
    99f2:	0004      	movs	r4, r0
    99f4:	429a      	cmp	r2, r3
    99f6:	d91a      	bls.n	9a2e <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    99f8:	4b0f      	ldr	r3, [pc, #60]	; (9a38 <nm_read_block+0x64>)
    99fa:	469a      	mov	sl, r3
    99fc:	1a37      	subs	r7, r6, r0
    99fe:	4643      	mov	r3, r8
    9a00:	1ae1      	subs	r1, r4, r3
    9a02:	4449      	add	r1, r9
    9a04:	9a01      	ldr	r2, [sp, #4]
    9a06:	0020      	movs	r0, r4
    9a08:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    9a0a:	2800      	cmp	r0, #0
    9a0c:	d109      	bne.n	9a22 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    9a0e:	1bad      	subs	r5, r5, r6
    9a10:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    9a12:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    9a14:	42b5      	cmp	r5, r6
    9a16:	d8f2      	bhi.n	99fe <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    9a18:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    9a1a:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    9a1c:	0020      	movs	r0, r4
    9a1e:	4b06      	ldr	r3, [pc, #24]	; (9a38 <nm_read_block+0x64>)
    9a20:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    9a22:	b002      	add	sp, #8
    9a24:	bc1c      	pop	{r2, r3, r4}
    9a26:	4690      	mov	r8, r2
    9a28:	4699      	mov	r9, r3
    9a2a:	46a2      	mov	sl, r4
    9a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    9a2e:	2100      	movs	r1, #0
    9a30:	e7f2      	b.n	9a18 <nm_read_block+0x44>
    9a32:	46c0      	nop			; (mov r8, r8)
    9a34:	20000000 	.word	0x20000000
    9a38:	0000a4fd 	.word	0x0000a4fd

00009a3c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    9a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a3e:	46d6      	mov	lr, sl
    9a40:	464f      	mov	r7, r9
    9a42:	4646      	mov	r6, r8
    9a44:	b5c0      	push	{r6, r7, lr}
    9a46:	b082      	sub	sp, #8
    9a48:	4680      	mov	r8, r0
    9a4a:	4689      	mov	r9, r1
    9a4c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    9a4e:	4b13      	ldr	r3, [pc, #76]	; (9a9c <nm_write_block+0x60>)
    9a50:	881f      	ldrh	r7, [r3, #0]
    9a52:	3f08      	subs	r7, #8
    9a54:	b2bb      	uxth	r3, r7
    9a56:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    9a58:	001e      	movs	r6, r3
    9a5a:	0004      	movs	r4, r0
    9a5c:	429a      	cmp	r2, r3
    9a5e:	d91a      	bls.n	9a96 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    9a60:	4b0f      	ldr	r3, [pc, #60]	; (9aa0 <nm_write_block+0x64>)
    9a62:	469a      	mov	sl, r3
    9a64:	1a37      	subs	r7, r6, r0
    9a66:	4643      	mov	r3, r8
    9a68:	1ae1      	subs	r1, r4, r3
    9a6a:	4449      	add	r1, r9
    9a6c:	9a01      	ldr	r2, [sp, #4]
    9a6e:	0020      	movs	r0, r4
    9a70:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    9a72:	2800      	cmp	r0, #0
    9a74:	d109      	bne.n	9a8a <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    9a76:	1bad      	subs	r5, r5, r6
    9a78:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    9a7a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    9a7c:	42b5      	cmp	r5, r6
    9a7e:	d8f2      	bhi.n	9a66 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    9a80:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    9a82:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    9a84:	0020      	movs	r0, r4
    9a86:	4b06      	ldr	r3, [pc, #24]	; (9aa0 <nm_write_block+0x64>)
    9a88:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    9a8a:	b002      	add	sp, #8
    9a8c:	bc1c      	pop	{r2, r3, r4}
    9a8e:	4690      	mov	r8, r2
    9a90:	4699      	mov	r9, r3
    9a92:	46a2      	mov	sl, r4
    9a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    9a96:	2100      	movs	r1, #0
    9a98:	e7f2      	b.n	9a80 <nm_write_block+0x44>
    9a9a:	46c0      	nop			; (mov r8, r8)
    9a9c:	20000000 	.word	0x20000000
    9aa0:	0000a659 	.word	0x0000a659

00009aa4 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    9aa4:	b570      	push	{r4, r5, r6, lr}
    9aa6:	b084      	sub	sp, #16
    9aa8:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    9aaa:	2300      	movs	r3, #0
    9aac:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    9aae:	2208      	movs	r2, #8
    9ab0:	2100      	movs	r1, #0
    9ab2:	a801      	add	r0, sp, #4
    9ab4:	4b2d      	ldr	r3, [pc, #180]	; (9b6c <nm_get_firmware_full_info+0xc8>)
    9ab6:	4798      	blx	r3
	if (pstrRev != NULL)
    9ab8:	2c00      	cmp	r4, #0
    9aba:	d044      	beq.n	9b46 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    9abc:	2228      	movs	r2, #40	; 0x28
    9abe:	2100      	movs	r1, #0
    9ac0:	0020      	movs	r0, r4
    9ac2:	4b2b      	ldr	r3, [pc, #172]	; (9b70 <nm_get_firmware_full_info+0xcc>)
    9ac4:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    9ac6:	a903      	add	r1, sp, #12
    9ac8:	482a      	ldr	r0, [pc, #168]	; (9b74 <nm_get_firmware_full_info+0xd0>)
    9aca:	4b2b      	ldr	r3, [pc, #172]	; (9b78 <nm_get_firmware_full_info+0xd4>)
    9acc:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    9ace:	2800      	cmp	r0, #0
    9ad0:	d13a      	bne.n	9b48 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    9ad2:	9b03      	ldr	r3, [sp, #12]
    9ad4:	2b00      	cmp	r3, #0
    9ad6:	d039      	beq.n	9b4c <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    9ad8:	20c0      	movs	r0, #192	; 0xc0
    9ada:	0280      	lsls	r0, r0, #10
    9adc:	4318      	orrs	r0, r3
    9ade:	2208      	movs	r2, #8
    9ae0:	a901      	add	r1, sp, #4
    9ae2:	4b26      	ldr	r3, [pc, #152]	; (9b7c <nm_get_firmware_full_info+0xd8>)
    9ae4:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    9ae6:	2800      	cmp	r0, #0
    9ae8:	d12e      	bne.n	9b48 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    9aea:	9b02      	ldr	r3, [sp, #8]
    9aec:	0418      	lsls	r0, r3, #16
    9aee:	0c00      	lsrs	r0, r0, #16
    9af0:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    9af2:	d02e      	beq.n	9b52 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    9af4:	23c0      	movs	r3, #192	; 0xc0
    9af6:	029b      	lsls	r3, r3, #10
    9af8:	4318      	orrs	r0, r3
    9afa:	2228      	movs	r2, #40	; 0x28
    9afc:	0021      	movs	r1, r4
    9afe:	4b1f      	ldr	r3, [pc, #124]	; (9b7c <nm_get_firmware_full_info+0xd8>)
    9b00:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    9b02:	2800      	cmp	r0, #0
    9b04:	d120      	bne.n	9b48 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    9b06:	7921      	ldrb	r1, [r4, #4]
    9b08:	0209      	lsls	r1, r1, #8
    9b0a:	79a2      	ldrb	r2, [r4, #6]
    9b0c:	230f      	movs	r3, #15
    9b0e:	401a      	ands	r2, r3
    9b10:	430a      	orrs	r2, r1
    9b12:	7961      	ldrb	r1, [r4, #5]
    9b14:	0109      	lsls	r1, r1, #4
    9b16:	25ff      	movs	r5, #255	; 0xff
    9b18:	4029      	ands	r1, r5
    9b1a:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    9b1c:	79e1      	ldrb	r1, [r4, #7]
    9b1e:	0209      	lsls	r1, r1, #8
    9b20:	7a66      	ldrb	r6, [r4, #9]
    9b22:	4033      	ands	r3, r6
    9b24:	430b      	orrs	r3, r1
    9b26:	7a21      	ldrb	r1, [r4, #8]
    9b28:	0109      	lsls	r1, r1, #4
    9b2a:	400d      	ands	r5, r1
    9b2c:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    9b2e:	2a00      	cmp	r2, #0
    9b30:	d012      	beq.n	9b58 <nm_get_firmware_full_info+0xb4>
    9b32:	2b00      	cmp	r3, #0
    9b34:	d013      	beq.n	9b5e <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    9b36:	4912      	ldr	r1, [pc, #72]	; (9b80 <nm_get_firmware_full_info+0xdc>)
    9b38:	428b      	cmp	r3, r1
    9b3a:	d813      	bhi.n	9b64 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    9b3c:	4b11      	ldr	r3, [pc, #68]	; (9b84 <nm_get_firmware_full_info+0xe0>)
    9b3e:	429a      	cmp	r2, r3
    9b40:	d802      	bhi.n	9b48 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    9b42:	380d      	subs	r0, #13
    9b44:	e000      	b.n	9b48 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    9b46:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    9b48:	b004      	add	sp, #16
    9b4a:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    9b4c:	200c      	movs	r0, #12
    9b4e:	4240      	negs	r0, r0
    9b50:	e7fa      	b.n	9b48 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    9b52:	200c      	movs	r0, #12
    9b54:	4240      	negs	r0, r0
    9b56:	e7f7      	b.n	9b48 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    9b58:	200c      	movs	r0, #12
    9b5a:	4240      	negs	r0, r0
    9b5c:	e7f4      	b.n	9b48 <nm_get_firmware_full_info+0xa4>
    9b5e:	200c      	movs	r0, #12
    9b60:	4240      	negs	r0, r0
    9b62:	e7f1      	b.n	9b48 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    9b64:	200d      	movs	r0, #13
    9b66:	4240      	negs	r0, r0
    9b68:	e7ee      	b.n	9b48 <nm_get_firmware_full_info+0xa4>
    9b6a:	46c0      	nop			; (mov r8, r8)
    9b6c:	00013f7b 	.word	0x00013f7b
    9b70:	00008535 	.word	0x00008535
    9b74:	000c0008 	.word	0x000c0008
    9b78:	000099bd 	.word	0x000099bd
    9b7c:	000099d5 	.word	0x000099d5
    9b80:	00001352 	.word	0x00001352
    9b84:	00001351 	.word	0x00001351

00009b88 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    9b88:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    9b8a:	2800      	cmp	r0, #0
    9b8c:	d037      	beq.n	9bfe <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    9b8e:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    9b90:	1e6b      	subs	r3, r5, #1
    9b92:	2b03      	cmp	r3, #3
    9b94:	d900      	bls.n	9b98 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    9b96:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    9b98:	2000      	movs	r0, #0
    9b9a:	4b20      	ldr	r3, [pc, #128]	; (9c1c <nm_drv_init+0x94>)
    9b9c:	4798      	blx	r3
    9b9e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    9ba0:	d12f      	bne.n	9c02 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    9ba2:	481f      	ldr	r0, [pc, #124]	; (9c20 <nm_drv_init+0x98>)
    9ba4:	4c1f      	ldr	r4, [pc, #124]	; (9c24 <nm_drv_init+0x9c>)
    9ba6:	47a0      	blx	r4
    9ba8:	4b1f      	ldr	r3, [pc, #124]	; (9c28 <nm_drv_init+0xa0>)
    9baa:	4798      	blx	r3
    9bac:	0001      	movs	r1, r0
    9bae:	481f      	ldr	r0, [pc, #124]	; (9c2c <nm_drv_init+0xa4>)
    9bb0:	47a0      	blx	r4
    9bb2:	200d      	movs	r0, #13
    9bb4:	4b1e      	ldr	r3, [pc, #120]	; (9c30 <nm_drv_init+0xa8>)
    9bb6:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    9bb8:	4b1e      	ldr	r3, [pc, #120]	; (9c34 <nm_drv_init+0xac>)
    9bba:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    9bbc:	0028      	movs	r0, r5
    9bbe:	4b1e      	ldr	r3, [pc, #120]	; (9c38 <nm_drv_init+0xb0>)
    9bc0:	4798      	blx	r3
    9bc2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    9bc4:	d117      	bne.n	9bf6 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    9bc6:	0028      	movs	r0, r5
    9bc8:	4b1c      	ldr	r3, [pc, #112]	; (9c3c <nm_drv_init+0xb4>)
    9bca:	4798      	blx	r3
    9bcc:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    9bce:	d112      	bne.n	9bf6 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    9bd0:	3d02      	subs	r5, #2
    9bd2:	2d01      	cmp	r5, #1
    9bd4:	d911      	bls.n	9bfa <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    9bd6:	4b1a      	ldr	r3, [pc, #104]	; (9c40 <nm_drv_init+0xb8>)
    9bd8:	4798      	blx	r3
    9bda:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    9bdc:	d00d      	beq.n	9bfa <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    9bde:	2256      	movs	r2, #86	; 0x56
    9be0:	32ff      	adds	r2, #255	; 0xff
    9be2:	4918      	ldr	r1, [pc, #96]	; (9c44 <nm_drv_init+0xbc>)
    9be4:	4818      	ldr	r0, [pc, #96]	; (9c48 <nm_drv_init+0xc0>)
    9be6:	4b0f      	ldr	r3, [pc, #60]	; (9c24 <nm_drv_init+0x9c>)
    9be8:	4798      	blx	r3
    9bea:	4818      	ldr	r0, [pc, #96]	; (9c4c <nm_drv_init+0xc4>)
    9bec:	4b18      	ldr	r3, [pc, #96]	; (9c50 <nm_drv_init+0xc8>)
    9bee:	4798      	blx	r3
    9bf0:	200d      	movs	r0, #13
    9bf2:	4b0f      	ldr	r3, [pc, #60]	; (9c30 <nm_drv_init+0xa8>)
    9bf4:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    9bf6:	4b17      	ldr	r3, [pc, #92]	; (9c54 <nm_drv_init+0xcc>)
    9bf8:	4798      	blx	r3
ERR1:
	return ret;
}
    9bfa:	0020      	movs	r0, r4
    9bfc:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    9bfe:	2501      	movs	r5, #1
    9c00:	e7ca      	b.n	9b98 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    9c02:	2228      	movs	r2, #40	; 0x28
    9c04:	32ff      	adds	r2, #255	; 0xff
    9c06:	490f      	ldr	r1, [pc, #60]	; (9c44 <nm_drv_init+0xbc>)
    9c08:	480f      	ldr	r0, [pc, #60]	; (9c48 <nm_drv_init+0xc0>)
    9c0a:	4b06      	ldr	r3, [pc, #24]	; (9c24 <nm_drv_init+0x9c>)
    9c0c:	4798      	blx	r3
    9c0e:	4812      	ldr	r0, [pc, #72]	; (9c58 <nm_drv_init+0xd0>)
    9c10:	4b0f      	ldr	r3, [pc, #60]	; (9c50 <nm_drv_init+0xc8>)
    9c12:	4798      	blx	r3
    9c14:	200d      	movs	r0, #13
    9c16:	4b06      	ldr	r3, [pc, #24]	; (9c30 <nm_drv_init+0xa8>)
    9c18:	4798      	blx	r3
		goto ERR1;
    9c1a:	e7ee      	b.n	9bfa <nm_drv_init+0x72>
    9c1c:	0000998d 	.word	0x0000998d
    9c20:	00015998 	.word	0x00015998
    9c24:	000140dd 	.word	0x000140dd
    9c28:	0000956d 	.word	0x0000956d
    9c2c:	00015cdc 	.word	0x00015cdc
    9c30:	00014111 	.word	0x00014111
    9c34:	0000a3d1 	.word	0x0000a3d1
    9c38:	00009781 	.word	0x00009781
    9c3c:	00009889 	.word	0x00009889
    9c40:	00009511 	.word	0x00009511
    9c44:	00015c24 	.word	0x00015c24
    9c48:	00015668 	.word	0x00015668
    9c4c:	00015ca0 	.word	0x00015ca0
    9c50:	000141f9 	.word	0x000141f9
    9c54:	00009999 	.word	0x00009999
    9c58:	00015cc0 	.word	0x00015cc0

00009c5c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    9c5c:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    9c5e:	4b1c      	ldr	r3, [pc, #112]	; (9cd0 <nm_drv_deinit+0x74>)
    9c60:	4798      	blx	r3
    9c62:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    9c64:	d10b      	bne.n	9c7e <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    9c66:	2000      	movs	r0, #0
    9c68:	4b1a      	ldr	r3, [pc, #104]	; (9cd4 <nm_drv_deinit+0x78>)
    9c6a:	4798      	blx	r3
    9c6c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    9c6e:	d114      	bne.n	9c9a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    9c70:	4b19      	ldr	r3, [pc, #100]	; (9cd8 <nm_drv_deinit+0x7c>)
    9c72:	4798      	blx	r3
    9c74:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    9c76:	d11d      	bne.n	9cb4 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    9c78:	4b18      	ldr	r3, [pc, #96]	; (9cdc <nm_drv_deinit+0x80>)
    9c7a:	4798      	blx	r3
    9c7c:	e00b      	b.n	9c96 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    9c7e:	22b6      	movs	r2, #182	; 0xb6
    9c80:	0052      	lsls	r2, r2, #1
    9c82:	4917      	ldr	r1, [pc, #92]	; (9ce0 <nm_drv_deinit+0x84>)
    9c84:	4817      	ldr	r0, [pc, #92]	; (9ce4 <nm_drv_deinit+0x88>)
    9c86:	4b18      	ldr	r3, [pc, #96]	; (9ce8 <nm_drv_deinit+0x8c>)
    9c88:	4798      	blx	r3
    9c8a:	4818      	ldr	r0, [pc, #96]	; (9cec <nm_drv_deinit+0x90>)
    9c8c:	4b18      	ldr	r3, [pc, #96]	; (9cf0 <nm_drv_deinit+0x94>)
    9c8e:	4798      	blx	r3
    9c90:	200d      	movs	r0, #13
    9c92:	4b18      	ldr	r3, [pc, #96]	; (9cf4 <nm_drv_deinit+0x98>)
    9c94:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    9c96:	0020      	movs	r0, r4
    9c98:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    9c9a:	2274      	movs	r2, #116	; 0x74
    9c9c:	32ff      	adds	r2, #255	; 0xff
    9c9e:	4910      	ldr	r1, [pc, #64]	; (9ce0 <nm_drv_deinit+0x84>)
    9ca0:	4810      	ldr	r0, [pc, #64]	; (9ce4 <nm_drv_deinit+0x88>)
    9ca2:	4b11      	ldr	r3, [pc, #68]	; (9ce8 <nm_drv_deinit+0x8c>)
    9ca4:	4798      	blx	r3
    9ca6:	4814      	ldr	r0, [pc, #80]	; (9cf8 <nm_drv_deinit+0x9c>)
    9ca8:	4b11      	ldr	r3, [pc, #68]	; (9cf0 <nm_drv_deinit+0x94>)
    9caa:	4798      	blx	r3
    9cac:	200d      	movs	r0, #13
    9cae:	4b11      	ldr	r3, [pc, #68]	; (9cf4 <nm_drv_deinit+0x98>)
    9cb0:	4798      	blx	r3
		goto ERR1;
    9cb2:	e7f0      	b.n	9c96 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    9cb4:	227a      	movs	r2, #122	; 0x7a
    9cb6:	32ff      	adds	r2, #255	; 0xff
    9cb8:	4909      	ldr	r1, [pc, #36]	; (9ce0 <nm_drv_deinit+0x84>)
    9cba:	480a      	ldr	r0, [pc, #40]	; (9ce4 <nm_drv_deinit+0x88>)
    9cbc:	4b0a      	ldr	r3, [pc, #40]	; (9ce8 <nm_drv_deinit+0x8c>)
    9cbe:	4798      	blx	r3
    9cc0:	480e      	ldr	r0, [pc, #56]	; (9cfc <nm_drv_deinit+0xa0>)
    9cc2:	4b0b      	ldr	r3, [pc, #44]	; (9cf0 <nm_drv_deinit+0x94>)
    9cc4:	4798      	blx	r3
    9cc6:	200d      	movs	r0, #13
    9cc8:	4b0a      	ldr	r3, [pc, #40]	; (9cf4 <nm_drv_deinit+0x98>)
    9cca:	4798      	blx	r3
		goto ERR1;
    9ccc:	e7e3      	b.n	9c96 <nm_drv_deinit+0x3a>
    9cce:	46c0      	nop			; (mov r8, r8)
    9cd0:	00009901 	.word	0x00009901
    9cd4:	0000b22d 	.word	0x0000b22d
    9cd8:	00009999 	.word	0x00009999
    9cdc:	0000a37d 	.word	0x0000a37d
    9ce0:	00015c30 	.word	0x00015c30
    9ce4:	00015668 	.word	0x00015668
    9ce8:	000140dd 	.word	0x000140dd
    9cec:	00015c40 	.word	0x00015c40
    9cf0:	000141f9 	.word	0x000141f9
    9cf4:	00014111 	.word	0x00014111
    9cf8:	00015c60 	.word	0x00015c60
    9cfc:	00015c84 	.word	0x00015c84

00009d00 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    9d00:	b500      	push	{lr}
    9d02:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    9d04:	ab01      	add	r3, sp, #4
    9d06:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    9d08:	2200      	movs	r2, #0
    9d0a:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    9d0c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    9d0e:	0019      	movs	r1, r3
    9d10:	2003      	movs	r0, #3
    9d12:	4b02      	ldr	r3, [pc, #8]	; (9d1c <nmi_spi_write+0x1c>)
    9d14:	4798      	blx	r3
}
    9d16:	b005      	add	sp, #20
    9d18:	bd00      	pop	{pc}
    9d1a:	46c0      	nop			; (mov r8, r8)
    9d1c:	00008369 	.word	0x00008369

00009d20 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    9d20:	b570      	push	{r4, r5, r6, lr}
    9d22:	b084      	sub	sp, #16
    9d24:	ac08      	add	r4, sp, #32
    9d26:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    9d28:	ac01      	add	r4, sp, #4
    9d2a:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    9d2c:	303f      	adds	r0, #63	; 0x3f
    9d2e:	b2c4      	uxtb	r4, r0
    9d30:	2c0e      	cmp	r4, #14
    9d32:	d900      	bls.n	9d36 <spi_cmd+0x16>
    9d34:	e084      	b.n	9e40 <spi_cmd+0x120>
    9d36:	00a0      	lsls	r0, r4, #2
    9d38:	4c4f      	ldr	r4, [pc, #316]	; (9e78 <spi_cmd+0x158>)
    9d3a:	5820      	ldr	r0, [r4, r0]
    9d3c:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    9d3e:	ab01      	add	r3, sp, #4
    9d40:	0c0a      	lsrs	r2, r1, #16
    9d42:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    9d44:	0a0a      	lsrs	r2, r1, #8
    9d46:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    9d48:	70d9      	strb	r1, [r3, #3]
		len = 5;
    9d4a:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    9d4c:	4b4b      	ldr	r3, [pc, #300]	; (9e7c <spi_cmd+0x15c>)
    9d4e:	781b      	ldrb	r3, [r3, #0]
    9d50:	2b00      	cmp	r3, #0
    9d52:	d077      	beq.n	9e44 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    9d54:	3901      	subs	r1, #1
    9d56:	b2c9      	uxtb	r1, r1
    9d58:	e083      	b.n	9e62 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    9d5a:	0a0b      	lsrs	r3, r1, #8
    9d5c:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    9d5e:	2d00      	cmp	r5, #0
    9d60:	d107      	bne.n	9d72 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    9d62:	aa01      	add	r2, sp, #4
    9d64:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    9d66:	ab01      	add	r3, sp, #4
    9d68:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    9d6a:	2200      	movs	r2, #0
    9d6c:	70da      	strb	r2, [r3, #3]
		len = 5;
    9d6e:	2105      	movs	r1, #5
		break;
    9d70:	e7ec      	b.n	9d4c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    9d72:	2280      	movs	r2, #128	; 0x80
    9d74:	4252      	negs	r2, r2
    9d76:	4313      	orrs	r3, r2
    9d78:	aa01      	add	r2, sp, #4
    9d7a:	7053      	strb	r3, [r2, #1]
    9d7c:	e7f3      	b.n	9d66 <spi_cmd+0x46>
		bc[1] = 0x00;
    9d7e:	ab01      	add	r3, sp, #4
    9d80:	2200      	movs	r2, #0
    9d82:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    9d84:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    9d86:	70da      	strb	r2, [r3, #3]
		len = 5;
    9d88:	2105      	movs	r1, #5
		break;
    9d8a:	e7df      	b.n	9d4c <spi_cmd+0x2c>
		bc[1] = 0x00;
    9d8c:	ab01      	add	r3, sp, #4
    9d8e:	2200      	movs	r2, #0
    9d90:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    9d92:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    9d94:	70da      	strb	r2, [r3, #3]
		len = 5;
    9d96:	2105      	movs	r1, #5
		break;
    9d98:	e7d8      	b.n	9d4c <spi_cmd+0x2c>
		bc[1] = 0xff;
    9d9a:	ab01      	add	r3, sp, #4
    9d9c:	22ff      	movs	r2, #255	; 0xff
    9d9e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    9da0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    9da2:	70da      	strb	r2, [r3, #3]
		len = 5;
    9da4:	2105      	movs	r1, #5
		break;
    9da6:	e7d1      	b.n	9d4c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    9da8:	aa01      	add	r2, sp, #4
    9daa:	0c08      	lsrs	r0, r1, #16
    9dac:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    9dae:	0a08      	lsrs	r0, r1, #8
    9db0:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    9db2:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    9db4:	0a19      	lsrs	r1, r3, #8
    9db6:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    9db8:	7153      	strb	r3, [r2, #5]
		len = 7;
    9dba:	2107      	movs	r1, #7
		break;
    9dbc:	e7c6      	b.n	9d4c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    9dbe:	aa01      	add	r2, sp, #4
    9dc0:	0c08      	lsrs	r0, r1, #16
    9dc2:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    9dc4:	0a08      	lsrs	r0, r1, #8
    9dc6:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    9dc8:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    9dca:	0c19      	lsrs	r1, r3, #16
    9dcc:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    9dce:	0a19      	lsrs	r1, r3, #8
    9dd0:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    9dd2:	7193      	strb	r3, [r2, #6]
		len = 8;
    9dd4:	2108      	movs	r1, #8
		break;
    9dd6:	e7b9      	b.n	9d4c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    9dd8:	0a0b      	lsrs	r3, r1, #8
    9dda:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    9ddc:	2d00      	cmp	r5, #0
    9dde:	d10c      	bne.n	9dfa <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    9de0:	a801      	add	r0, sp, #4
    9de2:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    9de4:	ab01      	add	r3, sp, #4
    9de6:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    9de8:	0e11      	lsrs	r1, r2, #24
    9dea:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    9dec:	0c11      	lsrs	r1, r2, #16
    9dee:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    9df0:	0a11      	lsrs	r1, r2, #8
    9df2:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    9df4:	719a      	strb	r2, [r3, #6]
		len = 8;
    9df6:	2108      	movs	r1, #8
		break;
    9df8:	e7a8      	b.n	9d4c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    9dfa:	2080      	movs	r0, #128	; 0x80
    9dfc:	4240      	negs	r0, r0
    9dfe:	4303      	orrs	r3, r0
    9e00:	a801      	add	r0, sp, #4
    9e02:	7043      	strb	r3, [r0, #1]
    9e04:	e7ee      	b.n	9de4 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    9e06:	ab01      	add	r3, sp, #4
    9e08:	0c08      	lsrs	r0, r1, #16
    9e0a:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    9e0c:	0a08      	lsrs	r0, r1, #8
    9e0e:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    9e10:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    9e12:	0e11      	lsrs	r1, r2, #24
    9e14:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    9e16:	0c11      	lsrs	r1, r2, #16
    9e18:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    9e1a:	0a11      	lsrs	r1, r2, #8
    9e1c:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    9e1e:	71da      	strb	r2, [r3, #7]
		len = 9;
    9e20:	2109      	movs	r1, #9
		break;
    9e22:	e793      	b.n	9d4c <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    9e24:	2228      	movs	r2, #40	; 0x28
    9e26:	32ff      	adds	r2, #255	; 0xff
    9e28:	4915      	ldr	r1, [pc, #84]	; (9e80 <spi_cmd+0x160>)
    9e2a:	4816      	ldr	r0, [pc, #88]	; (9e84 <spi_cmd+0x164>)
    9e2c:	4b16      	ldr	r3, [pc, #88]	; (9e88 <spi_cmd+0x168>)
    9e2e:	4798      	blx	r3
    9e30:	4816      	ldr	r0, [pc, #88]	; (9e8c <spi_cmd+0x16c>)
    9e32:	4b17      	ldr	r3, [pc, #92]	; (9e90 <spi_cmd+0x170>)
    9e34:	4798      	blx	r3
    9e36:	200d      	movs	r0, #13
    9e38:	4b16      	ldr	r3, [pc, #88]	; (9e94 <spi_cmd+0x174>)
    9e3a:	4798      	blx	r3
			result = N_FAIL;
    9e3c:	2300      	movs	r3, #0
    9e3e:	e017      	b.n	9e70 <spi_cmd+0x150>
	switch (cmd) {
    9e40:	2300      	movs	r3, #0
    9e42:	e015      	b.n	9e70 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    9e44:	1e4e      	subs	r6, r1, #1
    9e46:	aa01      	add	r2, sp, #4
    9e48:	1995      	adds	r5, r2, r6
    9e4a:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    9e4c:	4c12      	ldr	r4, [pc, #72]	; (9e98 <spi_cmd+0x178>)
    9e4e:	005b      	lsls	r3, r3, #1
    9e50:	7810      	ldrb	r0, [r2, #0]
    9e52:	4043      	eors	r3, r0
    9e54:	5ce3      	ldrb	r3, [r4, r3]
    9e56:	3201      	adds	r2, #1
	while (len--)
    9e58:	42aa      	cmp	r2, r5
    9e5a:	d1f8      	bne.n	9e4e <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    9e5c:	005b      	lsls	r3, r3, #1
    9e5e:	aa01      	add	r2, sp, #4
    9e60:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    9e62:	b289      	uxth	r1, r1
    9e64:	a801      	add	r0, sp, #4
    9e66:	4b0d      	ldr	r3, [pc, #52]	; (9e9c <spi_cmd+0x17c>)
    9e68:	4798      	blx	r3
    9e6a:	2301      	movs	r3, #1
    9e6c:	2800      	cmp	r0, #0
    9e6e:	d1d9      	bne.n	9e24 <spi_cmd+0x104>
		}
	}

	return result;
}
    9e70:	0018      	movs	r0, r3
    9e72:	b004      	add	sp, #16
    9e74:	bd70      	pop	{r4, r5, r6, pc}
    9e76:	46c0      	nop			; (mov r8, r8)
    9e78:	00015cec 	.word	0x00015cec
    9e7c:	2000021c 	.word	0x2000021c
    9e80:	00015d2c 	.word	0x00015d2c
    9e84:	00015668 	.word	0x00015668
    9e88:	000140dd 	.word	0x000140dd
    9e8c:	000161bc 	.word	0x000161bc
    9e90:	000141f9 	.word	0x000141f9
    9e94:	00014111 	.word	0x00014111
    9e98:	00015db8 	.word	0x00015db8
    9e9c:	00009d01 	.word	0x00009d01

00009ea0 <nmi_spi_read>:
{
    9ea0:	b500      	push	{lr}
    9ea2:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    9ea4:	ab01      	add	r3, sp, #4
    9ea6:	2200      	movs	r2, #0
    9ea8:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    9eaa:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    9eac:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    9eae:	0019      	movs	r1, r3
    9eb0:	2003      	movs	r0, #3
    9eb2:	4b02      	ldr	r3, [pc, #8]	; (9ebc <nmi_spi_read+0x1c>)
    9eb4:	4798      	blx	r3
}
    9eb6:	b005      	add	sp, #20
    9eb8:	bd00      	pop	{pc}
    9eba:	46c0      	nop			; (mov r8, r8)
    9ebc:	00008369 	.word	0x00008369

00009ec0 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    9ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ec2:	46c6      	mov	lr, r8
    9ec4:	b500      	push	{lr}
    9ec6:	b082      	sub	sp, #8
    9ec8:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    9eca:	28cf      	cmp	r0, #207	; 0xcf
    9ecc:	d02b      	beq.n	9f26 <spi_cmd_rsp+0x66>
    9ece:	0003      	movs	r3, r0
    9ed0:	333b      	adds	r3, #59	; 0x3b
    9ed2:	b2db      	uxtb	r3, r3
    9ed4:	2b01      	cmp	r3, #1
    9ed6:	d926      	bls.n	9f26 <spi_cmd_rsp+0x66>
{
    9ed8:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9eda:	466b      	mov	r3, sp
    9edc:	1dde      	adds	r6, r3, #7
    9ede:	4b26      	ldr	r3, [pc, #152]	; (9f78 <spi_cmd_rsp+0xb8>)
    9ee0:	4698      	mov	r8, r3
    9ee2:	2101      	movs	r1, #1
    9ee4:	0030      	movs	r0, r6
    9ee6:	47c0      	blx	r8
    9ee8:	1e05      	subs	r5, r0, #0
    9eea:	d125      	bne.n	9f38 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    9eec:	7833      	ldrb	r3, [r6, #0]
    9eee:	42bb      	cmp	r3, r7
    9ef0:	d030      	beq.n	9f54 <spi_cmd_rsp+0x94>
    9ef2:	3c01      	subs	r4, #1
    9ef4:	b2e4      	uxtb	r4, r4
    9ef6:	2c00      	cmp	r4, #0
    9ef8:	d1f3      	bne.n	9ee2 <spi_cmd_rsp+0x22>
    9efa:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9efc:	466b      	mov	r3, sp
    9efe:	1dde      	adds	r6, r3, #7
    9f00:	4f1d      	ldr	r7, [pc, #116]	; (9f78 <spi_cmd_rsp+0xb8>)
    9f02:	2101      	movs	r1, #1
    9f04:	0030      	movs	r0, r6
    9f06:	47b8      	blx	r7
    9f08:	2800      	cmp	r0, #0
    9f0a:	d125      	bne.n	9f58 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    9f0c:	7833      	ldrb	r3, [r6, #0]
    9f0e:	2b00      	cmp	r3, #0
    9f10:	d02f      	beq.n	9f72 <spi_cmd_rsp+0xb2>
    9f12:	3c01      	subs	r4, #1
    9f14:	b2e4      	uxtb	r4, r4
    9f16:	2c00      	cmp	r4, #0
    9f18:	d1f3      	bne.n	9f02 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    9f1a:	2501      	movs	r5, #1

_fail_:

	return result;
}
    9f1c:	0028      	movs	r0, r5
    9f1e:	b002      	add	sp, #8
    9f20:	bc04      	pop	{r2}
    9f22:	4690      	mov	r8, r2
    9f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9f26:	2101      	movs	r1, #1
    9f28:	466b      	mov	r3, sp
    9f2a:	1dd8      	adds	r0, r3, #7
    9f2c:	4b12      	ldr	r3, [pc, #72]	; (9f78 <spi_cmd_rsp+0xb8>)
    9f2e:	4798      	blx	r3
			result = N_FAIL;
    9f30:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9f32:	2800      	cmp	r0, #0
    9f34:	d0d0      	beq.n	9ed8 <spi_cmd_rsp+0x18>
    9f36:	e7f1      	b.n	9f1c <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    9f38:	22b1      	movs	r2, #177	; 0xb1
    9f3a:	0052      	lsls	r2, r2, #1
    9f3c:	490f      	ldr	r1, [pc, #60]	; (9f7c <spi_cmd_rsp+0xbc>)
    9f3e:	4810      	ldr	r0, [pc, #64]	; (9f80 <spi_cmd_rsp+0xc0>)
    9f40:	4b10      	ldr	r3, [pc, #64]	; (9f84 <spi_cmd_rsp+0xc4>)
    9f42:	4798      	blx	r3
    9f44:	4810      	ldr	r0, [pc, #64]	; (9f88 <spi_cmd_rsp+0xc8>)
    9f46:	4b11      	ldr	r3, [pc, #68]	; (9f8c <spi_cmd_rsp+0xcc>)
    9f48:	4798      	blx	r3
    9f4a:	200d      	movs	r0, #13
    9f4c:	4b10      	ldr	r3, [pc, #64]	; (9f90 <spi_cmd_rsp+0xd0>)
    9f4e:	4798      	blx	r3
			result = N_FAIL;
    9f50:	2500      	movs	r5, #0
			goto _fail_;
    9f52:	e7e3      	b.n	9f1c <spi_cmd_rsp+0x5c>
    9f54:	240b      	movs	r4, #11
    9f56:	e7d1      	b.n	9efc <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    9f58:	22b8      	movs	r2, #184	; 0xb8
    9f5a:	0052      	lsls	r2, r2, #1
    9f5c:	4907      	ldr	r1, [pc, #28]	; (9f7c <spi_cmd_rsp+0xbc>)
    9f5e:	4808      	ldr	r0, [pc, #32]	; (9f80 <spi_cmd_rsp+0xc0>)
    9f60:	4b08      	ldr	r3, [pc, #32]	; (9f84 <spi_cmd_rsp+0xc4>)
    9f62:	4798      	blx	r3
    9f64:	4808      	ldr	r0, [pc, #32]	; (9f88 <spi_cmd_rsp+0xc8>)
    9f66:	4b09      	ldr	r3, [pc, #36]	; (9f8c <spi_cmd_rsp+0xcc>)
    9f68:	4798      	blx	r3
    9f6a:	200d      	movs	r0, #13
    9f6c:	4b08      	ldr	r3, [pc, #32]	; (9f90 <spi_cmd_rsp+0xd0>)
    9f6e:	4798      	blx	r3
			goto _fail_;
    9f70:	e7d4      	b.n	9f1c <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    9f72:	2501      	movs	r5, #1
    9f74:	e7d2      	b.n	9f1c <spi_cmd_rsp+0x5c>
    9f76:	46c0      	nop			; (mov r8, r8)
    9f78:	00009ea1 	.word	0x00009ea1
    9f7c:	00015d44 	.word	0x00015d44
    9f80:	00015668 	.word	0x00015668
    9f84:	000140dd 	.word	0x000140dd
    9f88:	000161e8 	.word	0x000161e8
    9f8c:	000141f9 	.word	0x000141f9
    9f90:	00014111 	.word	0x00014111

00009f94 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    9f94:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f96:	46de      	mov	lr, fp
    9f98:	4657      	mov	r7, sl
    9f9a:	464e      	mov	r6, r9
    9f9c:	4645      	mov	r5, r8
    9f9e:	b5e0      	push	{r5, r6, r7, lr}
    9fa0:	b087      	sub	sp, #28
    9fa2:	9001      	str	r0, [sp, #4]
    9fa4:	4689      	mov	r9, r1
    9fa6:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    9fa8:	2300      	movs	r3, #0
    9faa:	469a      	mov	sl, r3
    9fac:	2380      	movs	r3, #128	; 0x80
    9fae:	019b      	lsls	r3, r3, #6
    9fb0:	469b      	mov	fp, r3
    9fb2:	466a      	mov	r2, sp
    9fb4:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9fb6:	4b3b      	ldr	r3, [pc, #236]	; (a0a4 <spi_data_read+0x110>)
    9fb8:	4698      	mov	r8, r3
    9fba:	e02e      	b.n	a01a <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    9fbc:	4a3a      	ldr	r2, [pc, #232]	; (a0a8 <spi_data_read+0x114>)
    9fbe:	493b      	ldr	r1, [pc, #236]	; (a0ac <spi_data_read+0x118>)
    9fc0:	483b      	ldr	r0, [pc, #236]	; (a0b0 <spi_data_read+0x11c>)
    9fc2:	4b3c      	ldr	r3, [pc, #240]	; (a0b4 <spi_data_read+0x120>)
    9fc4:	4798      	blx	r3
    9fc6:	483c      	ldr	r0, [pc, #240]	; (a0b8 <spi_data_read+0x124>)
    9fc8:	4b3c      	ldr	r3, [pc, #240]	; (a0bc <spi_data_read+0x128>)
    9fca:	4798      	blx	r3
    9fcc:	200d      	movs	r0, #13
    9fce:	4b3c      	ldr	r3, [pc, #240]	; (a0c0 <spi_data_read+0x12c>)
    9fd0:	4798      	blx	r3
    9fd2:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    9fd4:	0028      	movs	r0, r5
    9fd6:	b007      	add	sp, #28
    9fd8:	bc3c      	pop	{r2, r3, r4, r5}
    9fda:	4690      	mov	r8, r2
    9fdc:	4699      	mov	r9, r3
    9fde:	46a2      	mov	sl, r4
    9fe0:	46ab      	mov	fp, r5
    9fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    9fe4:	2c00      	cmp	r4, #0
    9fe6:	dd2e      	ble.n	a046 <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    9fe8:	9b01      	ldr	r3, [sp, #4]
    9fea:	4453      	add	r3, sl
    9fec:	0018      	movs	r0, r3
    9fee:	0039      	movs	r1, r7
    9ff0:	4b2c      	ldr	r3, [pc, #176]	; (a0a4 <spi_data_read+0x110>)
    9ff2:	4798      	blx	r3
    9ff4:	1e04      	subs	r4, r0, #0
    9ff6:	d133      	bne.n	a060 <spi_data_read+0xcc>
		if(!clockless)
    9ff8:	9b02      	ldr	r3, [sp, #8]
    9ffa:	2b00      	cmp	r3, #0
    9ffc:	d103      	bne.n	a006 <spi_data_read+0x72>
			if (!gu8Crc_off) {
    9ffe:	4b31      	ldr	r3, [pc, #196]	; (a0c4 <spi_data_read+0x130>)
    a000:	781b      	ldrb	r3, [r3, #0]
    a002:	2b00      	cmp	r3, #0
    a004:	d039      	beq.n	a07a <spi_data_read+0xe6>
		ix += nbytes;
    a006:	4653      	mov	r3, sl
    a008:	18fb      	adds	r3, r7, r3
    a00a:	b21b      	sxth	r3, r3
    a00c:	469a      	mov	sl, r3
		sz -= nbytes;
    a00e:	464b      	mov	r3, r9
    a010:	1bdf      	subs	r7, r3, r7
    a012:	b2bb      	uxth	r3, r7
    a014:	4699      	mov	r9, r3
	} while (sz);
    a016:	2b00      	cmp	r3, #0
    a018:	d042      	beq.n	a0a0 <spi_data_read+0x10c>
    a01a:	464f      	mov	r7, r9
    a01c:	45d9      	cmp	r9, fp
    a01e:	d901      	bls.n	a024 <spi_data_read+0x90>
    a020:	466b      	mov	r3, sp
    a022:	89df      	ldrh	r7, [r3, #14]
    a024:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    a026:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    a028:	ab04      	add	r3, sp, #16
    a02a:	1cde      	adds	r6, r3, #3
    a02c:	2101      	movs	r1, #1
    a02e:	0030      	movs	r0, r6
    a030:	47c0      	blx	r8
    a032:	1e05      	subs	r5, r0, #0
    a034:	d1c2      	bne.n	9fbc <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    a036:	7833      	ldrb	r3, [r6, #0]
    a038:	091b      	lsrs	r3, r3, #4
    a03a:	2b0f      	cmp	r3, #15
    a03c:	d0d2      	beq.n	9fe4 <spi_data_read+0x50>
    a03e:	3c01      	subs	r4, #1
    a040:	b224      	sxth	r4, r4
		} while (retry--);
    a042:	1c63      	adds	r3, r4, #1
    a044:	d1f2      	bne.n	a02c <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    a046:	4a20      	ldr	r2, [pc, #128]	; (a0c8 <spi_data_read+0x134>)
    a048:	4918      	ldr	r1, [pc, #96]	; (a0ac <spi_data_read+0x118>)
    a04a:	4819      	ldr	r0, [pc, #100]	; (a0b0 <spi_data_read+0x11c>)
    a04c:	4c19      	ldr	r4, [pc, #100]	; (a0b4 <spi_data_read+0x120>)
    a04e:	47a0      	blx	r4
    a050:	ab04      	add	r3, sp, #16
    a052:	78d9      	ldrb	r1, [r3, #3]
    a054:	481d      	ldr	r0, [pc, #116]	; (a0cc <spi_data_read+0x138>)
    a056:	47a0      	blx	r4
    a058:	200d      	movs	r0, #13
    a05a:	4b19      	ldr	r3, [pc, #100]	; (a0c0 <spi_data_read+0x12c>)
    a05c:	4798      	blx	r3
			break;
    a05e:	e7b9      	b.n	9fd4 <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    a060:	22c5      	movs	r2, #197	; 0xc5
    a062:	0092      	lsls	r2, r2, #2
    a064:	4911      	ldr	r1, [pc, #68]	; (a0ac <spi_data_read+0x118>)
    a066:	4812      	ldr	r0, [pc, #72]	; (a0b0 <spi_data_read+0x11c>)
    a068:	4b12      	ldr	r3, [pc, #72]	; (a0b4 <spi_data_read+0x120>)
    a06a:	4798      	blx	r3
    a06c:	4818      	ldr	r0, [pc, #96]	; (a0d0 <spi_data_read+0x13c>)
    a06e:	4b13      	ldr	r3, [pc, #76]	; (a0bc <spi_data_read+0x128>)
    a070:	4798      	blx	r3
    a072:	200d      	movs	r0, #13
    a074:	4b12      	ldr	r3, [pc, #72]	; (a0c0 <spi_data_read+0x12c>)
    a076:	4798      	blx	r3
			break;
    a078:	e7ac      	b.n	9fd4 <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    a07a:	2102      	movs	r1, #2
    a07c:	a805      	add	r0, sp, #20
    a07e:	4b09      	ldr	r3, [pc, #36]	; (a0a4 <spi_data_read+0x110>)
    a080:	4798      	blx	r3
    a082:	2800      	cmp	r0, #0
    a084:	d0bf      	beq.n	a006 <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    a086:	4a13      	ldr	r2, [pc, #76]	; (a0d4 <spi_data_read+0x140>)
    a088:	4908      	ldr	r1, [pc, #32]	; (a0ac <spi_data_read+0x118>)
    a08a:	4809      	ldr	r0, [pc, #36]	; (a0b0 <spi_data_read+0x11c>)
    a08c:	4b09      	ldr	r3, [pc, #36]	; (a0b4 <spi_data_read+0x120>)
    a08e:	4798      	blx	r3
    a090:	4811      	ldr	r0, [pc, #68]	; (a0d8 <spi_data_read+0x144>)
    a092:	4b0a      	ldr	r3, [pc, #40]	; (a0bc <spi_data_read+0x128>)
    a094:	4798      	blx	r3
    a096:	200d      	movs	r0, #13
    a098:	4b09      	ldr	r3, [pc, #36]	; (a0c0 <spi_data_read+0x12c>)
    a09a:	4798      	blx	r3
					result = N_FAIL;
    a09c:	0025      	movs	r5, r4
					break;
    a09e:	e799      	b.n	9fd4 <spi_data_read+0x40>
    a0a0:	2501      	movs	r5, #1
    a0a2:	e797      	b.n	9fd4 <spi_data_read+0x40>
    a0a4:	00009ea1 	.word	0x00009ea1
    a0a8:	000002ff 	.word	0x000002ff
    a0ac:	00015d50 	.word	0x00015d50
    a0b0:	00015668 	.word	0x00015668
    a0b4:	000140dd 	.word	0x000140dd
    a0b8:	0001621c 	.word	0x0001621c
    a0bc:	000141f9 	.word	0x000141f9
    a0c0:	00014111 	.word	0x00014111
    a0c4:	2000021c 	.word	0x2000021c
    a0c8:	0000030b 	.word	0x0000030b
    a0cc:	00016250 	.word	0x00016250
    a0d0:	00016280 	.word	0x00016280
    a0d4:	0000031f 	.word	0x0000031f
    a0d8:	000162b0 	.word	0x000162b0

0000a0dc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    a0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0de:	46d6      	mov	lr, sl
    a0e0:	464f      	mov	r7, r9
    a0e2:	4646      	mov	r6, r8
    a0e4:	b5c0      	push	{r6, r7, lr}
    a0e6:	b086      	sub	sp, #24
    a0e8:	9003      	str	r0, [sp, #12]
    a0ea:	9104      	str	r1, [sp, #16]
    a0ec:	2830      	cmp	r0, #48	; 0x30
    a0ee:	d80f      	bhi.n	a110 <spi_write_reg+0x34>
    a0f0:	4b30      	ldr	r3, [pc, #192]	; (a1b4 <spi_write_reg+0xd8>)
    a0f2:	781f      	ldrb	r7, [r3, #0]
    a0f4:	b2fb      	uxtb	r3, r7
    a0f6:	9305      	str	r3, [sp, #20]
    a0f8:	2300      	movs	r3, #0
    a0fa:	2230      	movs	r2, #48	; 0x30
    a0fc:	9903      	ldr	r1, [sp, #12]
    a0fe:	428a      	cmp	r2, r1
    a100:	415b      	adcs	r3, r3
    a102:	b2db      	uxtb	r3, r3
    a104:	469a      	mov	sl, r3
    a106:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    a108:	4b2b      	ldr	r3, [pc, #172]	; (a1b8 <spi_write_reg+0xdc>)
    a10a:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    a10c:	46d1      	mov	r9, sl
    a10e:	e033      	b.n	a178 <spi_write_reg+0x9c>
    a110:	4b2a      	ldr	r3, [pc, #168]	; (a1bc <spi_write_reg+0xe0>)
    a112:	781f      	ldrb	r7, [r3, #0]
    a114:	e7ee      	b.n	a0f4 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    a116:	9805      	ldr	r0, [sp, #20]
    a118:	4b29      	ldr	r3, [pc, #164]	; (a1c0 <spi_write_reg+0xe4>)
    a11a:	4798      	blx	r3
    a11c:	0004      	movs	r4, r0
	if (result != N_OK) {
    a11e:	2801      	cmp	r0, #1
    a120:	d041      	beq.n	a1a6 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    a122:	22e7      	movs	r2, #231	; 0xe7
    a124:	0092      	lsls	r2, r2, #2
    a126:	4927      	ldr	r1, [pc, #156]	; (a1c4 <spi_write_reg+0xe8>)
    a128:	4827      	ldr	r0, [pc, #156]	; (a1c8 <spi_write_reg+0xec>)
    a12a:	4e28      	ldr	r6, [pc, #160]	; (a1cc <spi_write_reg+0xf0>)
    a12c:	47b0      	blx	r6
    a12e:	9903      	ldr	r1, [sp, #12]
    a130:	4827      	ldr	r0, [pc, #156]	; (a1d0 <spi_write_reg+0xf4>)
    a132:	47b0      	blx	r6
    a134:	200d      	movs	r0, #13
    a136:	4b27      	ldr	r3, [pc, #156]	; (a1d4 <spi_write_reg+0xf8>)
    a138:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    a13a:	2001      	movs	r0, #1
    a13c:	4e26      	ldr	r6, [pc, #152]	; (a1d8 <spi_write_reg+0xfc>)
    a13e:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a140:	2300      	movs	r3, #0
    a142:	9300      	str	r3, [sp, #0]
    a144:	2200      	movs	r2, #0
    a146:	2100      	movs	r1, #0
    a148:	20cf      	movs	r0, #207	; 0xcf
    a14a:	4f1b      	ldr	r7, [pc, #108]	; (a1b8 <spi_write_reg+0xdc>)
    a14c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    a14e:	20cf      	movs	r0, #207	; 0xcf
    a150:	4b1b      	ldr	r3, [pc, #108]	; (a1c0 <spi_write_reg+0xe4>)
    a152:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    a154:	4a21      	ldr	r2, [pc, #132]	; (a1dc <spi_write_reg+0x100>)
    a156:	491b      	ldr	r1, [pc, #108]	; (a1c4 <spi_write_reg+0xe8>)
    a158:	481b      	ldr	r0, [pc, #108]	; (a1c8 <spi_write_reg+0xec>)
    a15a:	4f1c      	ldr	r7, [pc, #112]	; (a1cc <spi_write_reg+0xf0>)
    a15c:	47b8      	blx	r7
    a15e:	9b04      	ldr	r3, [sp, #16]
    a160:	9a03      	ldr	r2, [sp, #12]
    a162:	0029      	movs	r1, r5
    a164:	481e      	ldr	r0, [pc, #120]	; (a1e0 <spi_write_reg+0x104>)
    a166:	47b8      	blx	r7
    a168:	200d      	movs	r0, #13
    a16a:	4b1a      	ldr	r3, [pc, #104]	; (a1d4 <spi_write_reg+0xf8>)
    a16c:	4798      	blx	r3
		nm_bsp_sleep(1);
    a16e:	2001      	movs	r0, #1
    a170:	47b0      	blx	r6
    a172:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    a174:	2d00      	cmp	r5, #0
    a176:	d016      	beq.n	a1a6 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    a178:	464b      	mov	r3, r9
    a17a:	9300      	str	r3, [sp, #0]
    a17c:	2304      	movs	r3, #4
    a17e:	9a04      	ldr	r2, [sp, #16]
    a180:	9f03      	ldr	r7, [sp, #12]
    a182:	0039      	movs	r1, r7
    a184:	9805      	ldr	r0, [sp, #20]
    a186:	47c0      	blx	r8
    a188:	0004      	movs	r4, r0
	if (result != N_OK) {
    a18a:	2801      	cmp	r0, #1
    a18c:	d0c3      	beq.n	a116 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    a18e:	4a15      	ldr	r2, [pc, #84]	; (a1e4 <spi_write_reg+0x108>)
    a190:	490c      	ldr	r1, [pc, #48]	; (a1c4 <spi_write_reg+0xe8>)
    a192:	480d      	ldr	r0, [pc, #52]	; (a1c8 <spi_write_reg+0xec>)
    a194:	4e0d      	ldr	r6, [pc, #52]	; (a1cc <spi_write_reg+0xf0>)
    a196:	47b0      	blx	r6
    a198:	0039      	movs	r1, r7
    a19a:	4813      	ldr	r0, [pc, #76]	; (a1e8 <spi_write_reg+0x10c>)
    a19c:	47b0      	blx	r6
    a19e:	200d      	movs	r0, #13
    a1a0:	4b0c      	ldr	r3, [pc, #48]	; (a1d4 <spi_write_reg+0xf8>)
    a1a2:	4798      	blx	r3
		goto _FAIL_;
    a1a4:	e7c9      	b.n	a13a <spi_write_reg+0x5e>
	}

	return result;
}
    a1a6:	0020      	movs	r0, r4
    a1a8:	b006      	add	sp, #24
    a1aa:	bc1c      	pop	{r2, r3, r4}
    a1ac:	4690      	mov	r8, r2
    a1ae:	4699      	mov	r9, r3
    a1b0:	46a2      	mov	sl, r4
    a1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a1b4:	00015d28 	.word	0x00015d28
    a1b8:	00009d21 	.word	0x00009d21
    a1bc:	00015d29 	.word	0x00015d29
    a1c0:	00009ec1 	.word	0x00009ec1
    a1c4:	00015d70 	.word	0x00015d70
    a1c8:	00015668 	.word	0x00015668
    a1cc:	000140dd 	.word	0x000140dd
    a1d0:	000163a8 	.word	0x000163a8
    a1d4:	00014111 	.word	0x00014111
    a1d8:	00008129 	.word	0x00008129
    a1dc:	000003af 	.word	0x000003af
    a1e0:	000163e0 	.word	0x000163e0
    a1e4:	00000396 	.word	0x00000396
    a1e8:	0001637c 	.word	0x0001637c

0000a1ec <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    a1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1ee:	46de      	mov	lr, fp
    a1f0:	4657      	mov	r7, sl
    a1f2:	464e      	mov	r6, r9
    a1f4:	4645      	mov	r5, r8
    a1f6:	b5e0      	push	{r5, r6, r7, lr}
    a1f8:	b087      	sub	sp, #28
    a1fa:	9002      	str	r0, [sp, #8]
    a1fc:	468b      	mov	fp, r1
    a1fe:	28ff      	cmp	r0, #255	; 0xff
    a200:	d80f      	bhi.n	a222 <spi_read_reg+0x36>
    a202:	4b41      	ldr	r3, [pc, #260]	; (a308 <spi_read_reg+0x11c>)
    a204:	781f      	ldrb	r7, [r3, #0]
    a206:	b2fb      	uxtb	r3, r7
    a208:	9303      	str	r3, [sp, #12]
    a20a:	2300      	movs	r3, #0
    a20c:	22ff      	movs	r2, #255	; 0xff
    a20e:	9902      	ldr	r1, [sp, #8]
    a210:	428a      	cmp	r2, r1
    a212:	415b      	adcs	r3, r3
    a214:	b2db      	uxtb	r3, r3
    a216:	469a      	mov	sl, r3
    a218:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    a21a:	4b3c      	ldr	r3, [pc, #240]	; (a30c <spi_read_reg+0x120>)
    a21c:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    a21e:	46d1      	mov	r9, sl
    a220:	e031      	b.n	a286 <spi_read_reg+0x9a>
    a222:	4b3b      	ldr	r3, [pc, #236]	; (a310 <spi_read_reg+0x124>)
    a224:	781f      	ldrb	r7, [r3, #0]
    a226:	e7ee      	b.n	a206 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    a228:	9803      	ldr	r0, [sp, #12]
    a22a:	4b3a      	ldr	r3, [pc, #232]	; (a314 <spi_read_reg+0x128>)
    a22c:	4798      	blx	r3
    a22e:	0004      	movs	r4, r0
	if (result != N_OK) {
    a230:	2801      	cmp	r0, #1
    a232:	d03f      	beq.n	a2b4 <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    a234:	4a38      	ldr	r2, [pc, #224]	; (a318 <spi_read_reg+0x12c>)
    a236:	4939      	ldr	r1, [pc, #228]	; (a31c <spi_read_reg+0x130>)
    a238:	4839      	ldr	r0, [pc, #228]	; (a320 <spi_read_reg+0x134>)
    a23a:	4e3a      	ldr	r6, [pc, #232]	; (a324 <spi_read_reg+0x138>)
    a23c:	47b0      	blx	r6
    a23e:	9902      	ldr	r1, [sp, #8]
    a240:	4839      	ldr	r0, [pc, #228]	; (a328 <spi_read_reg+0x13c>)
    a242:	47b0      	blx	r6
    a244:	200d      	movs	r0, #13
    a246:	4b39      	ldr	r3, [pc, #228]	; (a32c <spi_read_reg+0x140>)
    a248:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    a24a:	2001      	movs	r0, #1
    a24c:	4e38      	ldr	r6, [pc, #224]	; (a330 <spi_read_reg+0x144>)
    a24e:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a250:	2300      	movs	r3, #0
    a252:	9300      	str	r3, [sp, #0]
    a254:	2200      	movs	r2, #0
    a256:	2100      	movs	r1, #0
    a258:	20cf      	movs	r0, #207	; 0xcf
    a25a:	4f2c      	ldr	r7, [pc, #176]	; (a30c <spi_read_reg+0x120>)
    a25c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    a25e:	20cf      	movs	r0, #207	; 0xcf
    a260:	4b2c      	ldr	r3, [pc, #176]	; (a314 <spi_read_reg+0x128>)
    a262:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    a264:	4a33      	ldr	r2, [pc, #204]	; (a334 <spi_read_reg+0x148>)
    a266:	492d      	ldr	r1, [pc, #180]	; (a31c <spi_read_reg+0x130>)
    a268:	482d      	ldr	r0, [pc, #180]	; (a320 <spi_read_reg+0x134>)
    a26a:	4f2e      	ldr	r7, [pc, #184]	; (a324 <spi_read_reg+0x138>)
    a26c:	47b8      	blx	r7
    a26e:	9a02      	ldr	r2, [sp, #8]
    a270:	0029      	movs	r1, r5
    a272:	4831      	ldr	r0, [pc, #196]	; (a338 <spi_read_reg+0x14c>)
    a274:	47b8      	blx	r7
    a276:	200d      	movs	r0, #13
    a278:	4b2c      	ldr	r3, [pc, #176]	; (a32c <spi_read_reg+0x140>)
    a27a:	4798      	blx	r3
		nm_bsp_sleep(1);
    a27c:	2001      	movs	r0, #1
    a27e:	47b0      	blx	r6
    a280:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    a282:	2d00      	cmp	r5, #0
    a284:	d037      	beq.n	a2f6 <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    a286:	464b      	mov	r3, r9
    a288:	9300      	str	r3, [sp, #0]
    a28a:	2304      	movs	r3, #4
    a28c:	2200      	movs	r2, #0
    a28e:	9f02      	ldr	r7, [sp, #8]
    a290:	0039      	movs	r1, r7
    a292:	9803      	ldr	r0, [sp, #12]
    a294:	47c0      	blx	r8
    a296:	0004      	movs	r4, r0
	if (result != N_OK) {
    a298:	2801      	cmp	r0, #1
    a29a:	d0c5      	beq.n	a228 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    a29c:	4a27      	ldr	r2, [pc, #156]	; (a33c <spi_read_reg+0x150>)
    a29e:	491f      	ldr	r1, [pc, #124]	; (a31c <spi_read_reg+0x130>)
    a2a0:	481f      	ldr	r0, [pc, #124]	; (a320 <spi_read_reg+0x134>)
    a2a2:	4e20      	ldr	r6, [pc, #128]	; (a324 <spi_read_reg+0x138>)
    a2a4:	47b0      	blx	r6
    a2a6:	0039      	movs	r1, r7
    a2a8:	4825      	ldr	r0, [pc, #148]	; (a340 <spi_read_reg+0x154>)
    a2aa:	47b0      	blx	r6
    a2ac:	200d      	movs	r0, #13
    a2ae:	4b1f      	ldr	r3, [pc, #124]	; (a32c <spi_read_reg+0x140>)
    a2b0:	4798      	blx	r3
		goto _FAIL_;
    a2b2:	e7ca      	b.n	a24a <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    a2b4:	464a      	mov	r2, r9
    a2b6:	2104      	movs	r1, #4
    a2b8:	a805      	add	r0, sp, #20
    a2ba:	4b22      	ldr	r3, [pc, #136]	; (a344 <spi_read_reg+0x158>)
    a2bc:	4798      	blx	r3
    a2be:	0004      	movs	r4, r0
	if (result != N_OK) {
    a2c0:	2801      	cmp	r0, #1
    a2c2:	d00b      	beq.n	a2dc <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    a2c4:	4a20      	ldr	r2, [pc, #128]	; (a348 <spi_read_reg+0x15c>)
    a2c6:	4915      	ldr	r1, [pc, #84]	; (a31c <spi_read_reg+0x130>)
    a2c8:	4815      	ldr	r0, [pc, #84]	; (a320 <spi_read_reg+0x134>)
    a2ca:	4b16      	ldr	r3, [pc, #88]	; (a324 <spi_read_reg+0x138>)
    a2cc:	4798      	blx	r3
    a2ce:	481f      	ldr	r0, [pc, #124]	; (a34c <spi_read_reg+0x160>)
    a2d0:	4b1f      	ldr	r3, [pc, #124]	; (a350 <spi_read_reg+0x164>)
    a2d2:	4798      	blx	r3
    a2d4:	200d      	movs	r0, #13
    a2d6:	4b15      	ldr	r3, [pc, #84]	; (a32c <spi_read_reg+0x140>)
    a2d8:	4798      	blx	r3
		goto _FAIL_;
    a2da:	e7b6      	b.n	a24a <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    a2dc:	aa05      	add	r2, sp, #20
    a2de:	7853      	ldrb	r3, [r2, #1]
    a2e0:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    a2e2:	7891      	ldrb	r1, [r2, #2]
    a2e4:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    a2e6:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    a2e8:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    a2ea:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    a2ec:	78d2      	ldrb	r2, [r2, #3]
    a2ee:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    a2f0:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    a2f2:	465a      	mov	r2, fp
    a2f4:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    a2f6:	0020      	movs	r0, r4
    a2f8:	b007      	add	sp, #28
    a2fa:	bc3c      	pop	{r2, r3, r4, r5}
    a2fc:	4690      	mov	r8, r2
    a2fe:	4699      	mov	r9, r3
    a300:	46a2      	mov	sl, r4
    a302:	46ab      	mov	fp, r5
    a304:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a306:	46c0      	nop			; (mov r8, r8)
    a308:	00015d2a 	.word	0x00015d2a
    a30c:	00009d21 	.word	0x00009d21
    a310:	00015d2b 	.word	0x00015d2b
    a314:	00009ec1 	.word	0x00009ec1
    a318:	0000041d 	.word	0x0000041d
    a31c:	00015d90 	.word	0x00015d90
    a320:	00015668 	.word	0x00015668
    a324:	000140dd 	.word	0x000140dd
    a328:	00016310 	.word	0x00016310
    a32c:	00014111 	.word	0x00014111
    a330:	00008129 	.word	0x00008129
    a334:	0000043c 	.word	0x0000043c
    a338:	00016364 	.word	0x00016364
    a33c:	00000417 	.word	0x00000417
    a340:	000162e4 	.word	0x000162e4
    a344:	00009f95 	.word	0x00009f95
    a348:	00000424 	.word	0x00000424
    a34c:	00016344 	.word	0x00016344
    a350:	000141f9 	.word	0x000141f9

0000a354 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    a354:	b510      	push	{r4, lr}
    a356:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a358:	2300      	movs	r3, #0
    a35a:	9300      	str	r3, [sp, #0]
    a35c:	2200      	movs	r2, #0
    a35e:	2100      	movs	r1, #0
    a360:	20cf      	movs	r0, #207	; 0xcf
    a362:	4c04      	ldr	r4, [pc, #16]	; (a374 <nm_spi_reset+0x20>)
    a364:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    a366:	20cf      	movs	r0, #207	; 0xcf
    a368:	4b03      	ldr	r3, [pc, #12]	; (a378 <nm_spi_reset+0x24>)
    a36a:	4798      	blx	r3
	return M2M_SUCCESS;
}
    a36c:	2000      	movs	r0, #0
    a36e:	b002      	add	sp, #8
    a370:	bd10      	pop	{r4, pc}
    a372:	46c0      	nop			; (mov r8, r8)
    a374:	00009d21 	.word	0x00009d21
    a378:	00009ec1 	.word	0x00009ec1

0000a37c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    a37c:	2200      	movs	r2, #0
    a37e:	4b02      	ldr	r3, [pc, #8]	; (a388 <nm_spi_deinit+0xc>)
    a380:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    a382:	2000      	movs	r0, #0
    a384:	4770      	bx	lr
    a386:	46c0      	nop			; (mov r8, r8)
    a388:	2000021c 	.word	0x2000021c

0000a38c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    a38c:	b500      	push	{lr}
    a38e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    a390:	a901      	add	r1, sp, #4
    a392:	4b02      	ldr	r3, [pc, #8]	; (a39c <nm_spi_read_reg+0x10>)
    a394:	4798      	blx	r3

	return u32Val;
}
    a396:	9801      	ldr	r0, [sp, #4]
    a398:	b003      	add	sp, #12
    a39a:	bd00      	pop	{pc}
    a39c:	0000a1ed 	.word	0x0000a1ed

0000a3a0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    a3a0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    a3a2:	4b04      	ldr	r3, [pc, #16]	; (a3b4 <nm_spi_read_reg_with_ret+0x14>)
    a3a4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    a3a6:	2300      	movs	r3, #0
    a3a8:	2801      	cmp	r0, #1
    a3aa:	d101      	bne.n	a3b0 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    a3ac:	0018      	movs	r0, r3
    a3ae:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    a3b0:	3b06      	subs	r3, #6
    a3b2:	e7fb      	b.n	a3ac <nm_spi_read_reg_with_ret+0xc>
    a3b4:	0000a1ed 	.word	0x0000a1ed

0000a3b8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    a3b8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    a3ba:	4b04      	ldr	r3, [pc, #16]	; (a3cc <nm_spi_write_reg+0x14>)
    a3bc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    a3be:	2300      	movs	r3, #0
    a3c0:	2801      	cmp	r0, #1
    a3c2:	d101      	bne.n	a3c8 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    a3c4:	0018      	movs	r0, r3
    a3c6:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    a3c8:	3b06      	subs	r3, #6
    a3ca:	e7fb      	b.n	a3c4 <nm_spi_write_reg+0xc>
    a3cc:	0000a0dd 	.word	0x0000a0dd

0000a3d0 <nm_spi_init>:
{
    a3d0:	b510      	push	{r4, lr}
    a3d2:	b082      	sub	sp, #8
	uint32 reg = 0;
    a3d4:	2300      	movs	r3, #0
    a3d6:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    a3d8:	4a35      	ldr	r2, [pc, #212]	; (a4b0 <nm_spi_init+0xe0>)
    a3da:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    a3dc:	4669      	mov	r1, sp
    a3de:	4835      	ldr	r0, [pc, #212]	; (a4b4 <nm_spi_init+0xe4>)
    a3e0:	4b35      	ldr	r3, [pc, #212]	; (a4b8 <nm_spi_init+0xe8>)
    a3e2:	4798      	blx	r3
    a3e4:	2800      	cmp	r0, #0
    a3e6:	d028      	beq.n	a43a <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    a3e8:	4b31      	ldr	r3, [pc, #196]	; (a4b0 <nm_spi_init+0xe0>)
    a3ea:	781b      	ldrb	r3, [r3, #0]
    a3ec:	2b00      	cmp	r3, #0
    a3ee:	d10d      	bne.n	a40c <nm_spi_init+0x3c>
		reg &= ~0x70;
    a3f0:	337c      	adds	r3, #124	; 0x7c
    a3f2:	9900      	ldr	r1, [sp, #0]
    a3f4:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    a3f6:	3b2c      	subs	r3, #44	; 0x2c
    a3f8:	4319      	orrs	r1, r3
    a3fa:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    a3fc:	482d      	ldr	r0, [pc, #180]	; (a4b4 <nm_spi_init+0xe4>)
    a3fe:	4b2f      	ldr	r3, [pc, #188]	; (a4bc <nm_spi_init+0xec>)
    a400:	4798      	blx	r3
    a402:	1e04      	subs	r4, r0, #0
    a404:	d039      	beq.n	a47a <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    a406:	2201      	movs	r2, #1
    a408:	4b29      	ldr	r3, [pc, #164]	; (a4b0 <nm_spi_init+0xe0>)
    a40a:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    a40c:	a901      	add	r1, sp, #4
    a40e:	2080      	movs	r0, #128	; 0x80
    a410:	0140      	lsls	r0, r0, #5
    a412:	4b29      	ldr	r3, [pc, #164]	; (a4b8 <nm_spi_init+0xe8>)
    a414:	4798      	blx	r3
    a416:	2800      	cmp	r0, #0
    a418:	d03b      	beq.n	a492 <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    a41a:	4c26      	ldr	r4, [pc, #152]	; (a4b4 <nm_spi_init+0xe4>)
    a41c:	0020      	movs	r0, r4
    a41e:	4b28      	ldr	r3, [pc, #160]	; (a4c0 <nm_spi_init+0xf0>)
    a420:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    a422:	2370      	movs	r3, #112	; 0x70
    a424:	0001      	movs	r1, r0
    a426:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    a428:	2050      	movs	r0, #80	; 0x50
    a42a:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    a42c:	0020      	movs	r0, r4
    a42e:	4b25      	ldr	r3, [pc, #148]	; (a4c4 <nm_spi_init+0xf4>)
    a430:	4798      	blx	r3
	return M2M_SUCCESS;
    a432:	2400      	movs	r4, #0
}
    a434:	0020      	movs	r0, r4
    a436:	b002      	add	sp, #8
    a438:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    a43a:	2201      	movs	r2, #1
    a43c:	4b1c      	ldr	r3, [pc, #112]	; (a4b0 <nm_spi_init+0xe0>)
    a43e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    a440:	4a21      	ldr	r2, [pc, #132]	; (a4c8 <nm_spi_init+0xf8>)
    a442:	4922      	ldr	r1, [pc, #136]	; (a4cc <nm_spi_init+0xfc>)
    a444:	4822      	ldr	r0, [pc, #136]	; (a4d0 <nm_spi_init+0x100>)
    a446:	4b23      	ldr	r3, [pc, #140]	; (a4d4 <nm_spi_init+0x104>)
    a448:	4798      	blx	r3
    a44a:	4823      	ldr	r0, [pc, #140]	; (a4d8 <nm_spi_init+0x108>)
    a44c:	4b23      	ldr	r3, [pc, #140]	; (a4dc <nm_spi_init+0x10c>)
    a44e:	4798      	blx	r3
    a450:	200d      	movs	r0, #13
    a452:	4b23      	ldr	r3, [pc, #140]	; (a4e0 <nm_spi_init+0x110>)
    a454:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    a456:	4669      	mov	r1, sp
    a458:	4816      	ldr	r0, [pc, #88]	; (a4b4 <nm_spi_init+0xe4>)
    a45a:	4b17      	ldr	r3, [pc, #92]	; (a4b8 <nm_spi_init+0xe8>)
    a45c:	4798      	blx	r3
    a45e:	1e04      	subs	r4, r0, #0
    a460:	d1c2      	bne.n	a3e8 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    a462:	4a20      	ldr	r2, [pc, #128]	; (a4e4 <nm_spi_init+0x114>)
    a464:	4919      	ldr	r1, [pc, #100]	; (a4cc <nm_spi_init+0xfc>)
    a466:	481a      	ldr	r0, [pc, #104]	; (a4d0 <nm_spi_init+0x100>)
    a468:	4b1a      	ldr	r3, [pc, #104]	; (a4d4 <nm_spi_init+0x104>)
    a46a:	4798      	blx	r3
    a46c:	481e      	ldr	r0, [pc, #120]	; (a4e8 <nm_spi_init+0x118>)
    a46e:	4b1b      	ldr	r3, [pc, #108]	; (a4dc <nm_spi_init+0x10c>)
    a470:	4798      	blx	r3
    a472:	200d      	movs	r0, #13
    a474:	4b1a      	ldr	r3, [pc, #104]	; (a4e0 <nm_spi_init+0x110>)
    a476:	4798      	blx	r3
			return 0;
    a478:	e7dc      	b.n	a434 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    a47a:	4a1c      	ldr	r2, [pc, #112]	; (a4ec <nm_spi_init+0x11c>)
    a47c:	4913      	ldr	r1, [pc, #76]	; (a4cc <nm_spi_init+0xfc>)
    a47e:	4814      	ldr	r0, [pc, #80]	; (a4d0 <nm_spi_init+0x100>)
    a480:	4b14      	ldr	r3, [pc, #80]	; (a4d4 <nm_spi_init+0x104>)
    a482:	4798      	blx	r3
    a484:	481a      	ldr	r0, [pc, #104]	; (a4f0 <nm_spi_init+0x120>)
    a486:	4b15      	ldr	r3, [pc, #84]	; (a4dc <nm_spi_init+0x10c>)
    a488:	4798      	blx	r3
    a48a:	200d      	movs	r0, #13
    a48c:	4b14      	ldr	r3, [pc, #80]	; (a4e0 <nm_spi_init+0x110>)
    a48e:	4798      	blx	r3
			return 0;
    a490:	e7d0      	b.n	a434 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    a492:	4a18      	ldr	r2, [pc, #96]	; (a4f4 <nm_spi_init+0x124>)
    a494:	490d      	ldr	r1, [pc, #52]	; (a4cc <nm_spi_init+0xfc>)
    a496:	480e      	ldr	r0, [pc, #56]	; (a4d0 <nm_spi_init+0x100>)
    a498:	4b0e      	ldr	r3, [pc, #56]	; (a4d4 <nm_spi_init+0x104>)
    a49a:	4798      	blx	r3
    a49c:	4816      	ldr	r0, [pc, #88]	; (a4f8 <nm_spi_init+0x128>)
    a49e:	4b0f      	ldr	r3, [pc, #60]	; (a4dc <nm_spi_init+0x10c>)
    a4a0:	4798      	blx	r3
    a4a2:	200d      	movs	r0, #13
    a4a4:	4b0e      	ldr	r3, [pc, #56]	; (a4e0 <nm_spi_init+0x110>)
    a4a6:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    a4a8:	2406      	movs	r4, #6
    a4aa:	4264      	negs	r4, r4
    a4ac:	e7c2      	b.n	a434 <nm_spi_init+0x64>
    a4ae:	46c0      	nop			; (mov r8, r8)
    a4b0:	2000021c 	.word	0x2000021c
    a4b4:	0000e824 	.word	0x0000e824
    a4b8:	0000a1ed 	.word	0x0000a1ed
    a4bc:	0000a0dd 	.word	0x0000a0dd
    a4c0:	0000a38d 	.word	0x0000a38d
    a4c4:	0000a3b9 	.word	0x0000a3b9
    a4c8:	000004c7 	.word	0x000004c7
    a4cc:	00015dac 	.word	0x00015dac
    a4d0:	00015668 	.word	0x00015668
    a4d4:	000140dd 	.word	0x000140dd
    a4d8:	00015eb8 	.word	0x00015eb8
    a4dc:	000141f9 	.word	0x000141f9
    a4e0:	00014111 	.word	0x00014111
    a4e4:	000004ca 	.word	0x000004ca
    a4e8:	00015f08 	.word	0x00015f08
    a4ec:	000004d4 	.word	0x000004d4
    a4f0:	00015f34 	.word	0x00015f34
    a4f4:	000004de 	.word	0x000004de
    a4f8:	00015f68 	.word	0x00015f68

0000a4fc <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    a4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4fe:	46de      	mov	lr, fp
    a500:	4657      	mov	r7, sl
    a502:	464e      	mov	r6, r9
    a504:	4645      	mov	r5, r8
    a506:	b5e0      	push	{r5, r6, r7, lr}
    a508:	b087      	sub	sp, #28
    a50a:	9002      	str	r0, [sp, #8]
    a50c:	9103      	str	r1, [sp, #12]
    a50e:	0016      	movs	r6, r2
    a510:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    a512:	2300      	movs	r3, #0
    a514:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    a516:	2400      	movs	r4, #0
    a518:	4b3e      	ldr	r3, [pc, #248]	; (a614 <nm_spi_read_block+0x118>)
    a51a:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    a51c:	46a9      	mov	r9, r5
    a51e:	e037      	b.n	a590 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    a520:	2301      	movs	r3, #1
    a522:	469b      	mov	fp, r3
		size = 2;
    a524:	3601      	adds	r6, #1
    a526:	e035      	b.n	a594 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    a528:	20c8      	movs	r0, #200	; 0xc8
    a52a:	4b3b      	ldr	r3, [pc, #236]	; (a618 <nm_spi_read_block+0x11c>)
    a52c:	4798      	blx	r3
	if (result != N_OK) {
    a52e:	2801      	cmp	r0, #1
    a530:	d045      	beq.n	a5be <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    a532:	4a3a      	ldr	r2, [pc, #232]	; (a61c <nm_spi_read_block+0x120>)
    a534:	493a      	ldr	r1, [pc, #232]	; (a620 <nm_spi_read_block+0x124>)
    a536:	483b      	ldr	r0, [pc, #236]	; (a624 <nm_spi_read_block+0x128>)
    a538:	4f3b      	ldr	r7, [pc, #236]	; (a628 <nm_spi_read_block+0x12c>)
    a53a:	47b8      	blx	r7
    a53c:	9902      	ldr	r1, [sp, #8]
    a53e:	483b      	ldr	r0, [pc, #236]	; (a62c <nm_spi_read_block+0x130>)
    a540:	47b8      	blx	r7
    a542:	200d      	movs	r0, #13
    a544:	4b3a      	ldr	r3, [pc, #232]	; (a630 <nm_spi_read_block+0x134>)
    a546:	4798      	blx	r3
		nm_bsp_sleep(1);
    a548:	2001      	movs	r0, #1
    a54a:	4f3a      	ldr	r7, [pc, #232]	; (a634 <nm_spi_read_block+0x138>)
    a54c:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a54e:	9400      	str	r4, [sp, #0]
    a550:	0023      	movs	r3, r4
    a552:	0022      	movs	r2, r4
    a554:	0021      	movs	r1, r4
    a556:	20cf      	movs	r0, #207	; 0xcf
    a558:	4d2e      	ldr	r5, [pc, #184]	; (a614 <nm_spi_read_block+0x118>)
    a55a:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    a55c:	20cf      	movs	r0, #207	; 0xcf
    a55e:	4b2e      	ldr	r3, [pc, #184]	; (a618 <nm_spi_read_block+0x11c>)
    a560:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    a562:	4a35      	ldr	r2, [pc, #212]	; (a638 <nm_spi_read_block+0x13c>)
    a564:	492e      	ldr	r1, [pc, #184]	; (a620 <nm_spi_read_block+0x124>)
    a566:	482f      	ldr	r0, [pc, #188]	; (a624 <nm_spi_read_block+0x128>)
    a568:	4b2f      	ldr	r3, [pc, #188]	; (a628 <nm_spi_read_block+0x12c>)
    a56a:	469a      	mov	sl, r3
    a56c:	4798      	blx	r3
    a56e:	0033      	movs	r3, r6
    a570:	9a02      	ldr	r2, [sp, #8]
    a572:	4649      	mov	r1, r9
    a574:	4831      	ldr	r0, [pc, #196]	; (a63c <nm_spi_read_block+0x140>)
    a576:	47d0      	blx	sl
    a578:	200d      	movs	r0, #13
    a57a:	4b2d      	ldr	r3, [pc, #180]	; (a630 <nm_spi_read_block+0x134>)
    a57c:	4798      	blx	r3
		nm_bsp_sleep(1);
    a57e:	2001      	movs	r0, #1
    a580:	47b8      	blx	r7
    a582:	2301      	movs	r3, #1
    a584:	425b      	negs	r3, r3
    a586:	469c      	mov	ip, r3
    a588:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    a58a:	464b      	mov	r3, r9
    a58c:	2b00      	cmp	r3, #0
    a58e:	d038      	beq.n	a602 <nm_spi_read_block+0x106>
	if (size == 1)
    a590:	2e01      	cmp	r6, #1
    a592:	d0c5      	beq.n	a520 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    a594:	9400      	str	r4, [sp, #0]
    a596:	0033      	movs	r3, r6
    a598:	0022      	movs	r2, r4
    a59a:	9d02      	ldr	r5, [sp, #8]
    a59c:	0029      	movs	r1, r5
    a59e:	20c8      	movs	r0, #200	; 0xc8
    a5a0:	47c0      	blx	r8
	if (result != N_OK) {
    a5a2:	2801      	cmp	r0, #1
    a5a4:	d0c0      	beq.n	a528 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    a5a6:	4a26      	ldr	r2, [pc, #152]	; (a640 <nm_spi_read_block+0x144>)
    a5a8:	491d      	ldr	r1, [pc, #116]	; (a620 <nm_spi_read_block+0x124>)
    a5aa:	481e      	ldr	r0, [pc, #120]	; (a624 <nm_spi_read_block+0x128>)
    a5ac:	4f1e      	ldr	r7, [pc, #120]	; (a628 <nm_spi_read_block+0x12c>)
    a5ae:	47b8      	blx	r7
    a5b0:	0029      	movs	r1, r5
    a5b2:	4824      	ldr	r0, [pc, #144]	; (a644 <nm_spi_read_block+0x148>)
    a5b4:	47b8      	blx	r7
    a5b6:	200d      	movs	r0, #13
    a5b8:	4b1d      	ldr	r3, [pc, #116]	; (a630 <nm_spi_read_block+0x134>)
    a5ba:	4798      	blx	r3
    a5bc:	e7c4      	b.n	a548 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    a5be:	465b      	mov	r3, fp
    a5c0:	2b00      	cmp	r3, #0
    a5c2:	d016      	beq.n	a5f2 <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    a5c4:	af05      	add	r7, sp, #20
    a5c6:	0022      	movs	r2, r4
    a5c8:	0031      	movs	r1, r6
    a5ca:	0038      	movs	r0, r7
    a5cc:	4b1e      	ldr	r3, [pc, #120]	; (a648 <nm_spi_read_block+0x14c>)
    a5ce:	4798      	blx	r3
		buf[0] = tmp[0];
    a5d0:	783b      	ldrb	r3, [r7, #0]
    a5d2:	9a03      	ldr	r2, [sp, #12]
    a5d4:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    a5d6:	2801      	cmp	r0, #1
    a5d8:	d011      	beq.n	a5fe <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    a5da:	4a1c      	ldr	r2, [pc, #112]	; (a64c <nm_spi_read_block+0x150>)
    a5dc:	4910      	ldr	r1, [pc, #64]	; (a620 <nm_spi_read_block+0x124>)
    a5de:	4811      	ldr	r0, [pc, #68]	; (a624 <nm_spi_read_block+0x128>)
    a5e0:	4b11      	ldr	r3, [pc, #68]	; (a628 <nm_spi_read_block+0x12c>)
    a5e2:	4798      	blx	r3
    a5e4:	481a      	ldr	r0, [pc, #104]	; (a650 <nm_spi_read_block+0x154>)
    a5e6:	4b1b      	ldr	r3, [pc, #108]	; (a654 <nm_spi_read_block+0x158>)
    a5e8:	4798      	blx	r3
    a5ea:	200d      	movs	r0, #13
    a5ec:	4b10      	ldr	r3, [pc, #64]	; (a630 <nm_spi_read_block+0x134>)
    a5ee:	4798      	blx	r3
    a5f0:	e7aa      	b.n	a548 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    a5f2:	0022      	movs	r2, r4
    a5f4:	0031      	movs	r1, r6
    a5f6:	9803      	ldr	r0, [sp, #12]
    a5f8:	4b13      	ldr	r3, [pc, #76]	; (a648 <nm_spi_read_block+0x14c>)
    a5fa:	4798      	blx	r3
    a5fc:	e7eb      	b.n	a5d6 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    a5fe:	2000      	movs	r0, #0
    a600:	e001      	b.n	a606 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    a602:	2006      	movs	r0, #6
    a604:	4240      	negs	r0, r0

	return s8Ret;
}
    a606:	b007      	add	sp, #28
    a608:	bc3c      	pop	{r2, r3, r4, r5}
    a60a:	4690      	mov	r8, r2
    a60c:	4699      	mov	r9, r3
    a60e:	46a2      	mov	sl, r4
    a610:	46ab      	mov	fp, r5
    a612:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a614:	00009d21 	.word	0x00009d21
    a618:	00009ec1 	.word	0x00009ec1
    a61c:	00000463 	.word	0x00000463
    a620:	00015da0 	.word	0x00015da0
    a624:	00015668 	.word	0x00015668
    a628:	000140dd 	.word	0x000140dd
    a62c:	00015fbc 	.word	0x00015fbc
    a630:	00014111 	.word	0x00014111
    a634:	00008129 	.word	0x00008129
    a638:	00000484 	.word	0x00000484
    a63c:	0001601c 	.word	0x0001601c
    a640:	0000045d 	.word	0x0000045d
    a644:	00015f8c 	.word	0x00015f8c
    a648:	00009f95 	.word	0x00009f95
    a64c:	00000473 	.word	0x00000473
    a650:	00015ff4 	.word	0x00015ff4
    a654:	000141f9 	.word	0x000141f9

0000a658 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    a658:	b5f0      	push	{r4, r5, r6, r7, lr}
    a65a:	46de      	mov	lr, fp
    a65c:	4647      	mov	r7, r8
    a65e:	b580      	push	{r7, lr}
    a660:	b089      	sub	sp, #36	; 0x24
    a662:	9004      	str	r0, [sp, #16]
    a664:	468b      	mov	fp, r1
    a666:	9203      	str	r2, [sp, #12]
    a668:	260a      	movs	r6, #10
    a66a:	2780      	movs	r7, #128	; 0x80
    a66c:	01bf      	lsls	r7, r7, #6
    a66e:	466b      	mov	r3, sp
    a670:	82df      	strh	r7, [r3, #22]
    a672:	0035      	movs	r5, r6
    a674:	e02d      	b.n	a6d2 <nm_spi_write_block+0x7a>
		size = 2;
    a676:	3301      	adds	r3, #1
    a678:	9303      	str	r3, [sp, #12]
    a67a:	e02d      	b.n	a6d8 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    a67c:	4a83      	ldr	r2, [pc, #524]	; (a88c <nm_spi_write_block+0x234>)
    a67e:	4984      	ldr	r1, [pc, #528]	; (a890 <nm_spi_write_block+0x238>)
    a680:	4884      	ldr	r0, [pc, #528]	; (a894 <nm_spi_write_block+0x23c>)
    a682:	4c85      	ldr	r4, [pc, #532]	; (a898 <nm_spi_write_block+0x240>)
    a684:	47a0      	blx	r4
    a686:	0031      	movs	r1, r6
    a688:	4884      	ldr	r0, [pc, #528]	; (a89c <nm_spi_write_block+0x244>)
    a68a:	47a0      	blx	r4
    a68c:	200d      	movs	r0, #13
    a68e:	4b84      	ldr	r3, [pc, #528]	; (a8a0 <nm_spi_write_block+0x248>)
    a690:	4798      	blx	r3
		nm_bsp_sleep(1);
    a692:	2001      	movs	r0, #1
    a694:	4c83      	ldr	r4, [pc, #524]	; (a8a4 <nm_spi_write_block+0x24c>)
    a696:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a698:	2300      	movs	r3, #0
    a69a:	9300      	str	r3, [sp, #0]
    a69c:	2200      	movs	r2, #0
    a69e:	2100      	movs	r1, #0
    a6a0:	20cf      	movs	r0, #207	; 0xcf
    a6a2:	4e81      	ldr	r6, [pc, #516]	; (a8a8 <nm_spi_write_block+0x250>)
    a6a4:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    a6a6:	20cf      	movs	r0, #207	; 0xcf
    a6a8:	4b80      	ldr	r3, [pc, #512]	; (a8ac <nm_spi_write_block+0x254>)
    a6aa:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    a6ac:	4a80      	ldr	r2, [pc, #512]	; (a8b0 <nm_spi_write_block+0x258>)
    a6ae:	4978      	ldr	r1, [pc, #480]	; (a890 <nm_spi_write_block+0x238>)
    a6b0:	4878      	ldr	r0, [pc, #480]	; (a894 <nm_spi_write_block+0x23c>)
    a6b2:	4e79      	ldr	r6, [pc, #484]	; (a898 <nm_spi_write_block+0x240>)
    a6b4:	47b0      	blx	r6
    a6b6:	9b03      	ldr	r3, [sp, #12]
    a6b8:	9a04      	ldr	r2, [sp, #16]
    a6ba:	0029      	movs	r1, r5
    a6bc:	487d      	ldr	r0, [pc, #500]	; (a8b4 <nm_spi_write_block+0x25c>)
    a6be:	47b0      	blx	r6
    a6c0:	200d      	movs	r0, #13
    a6c2:	4b77      	ldr	r3, [pc, #476]	; (a8a0 <nm_spi_write_block+0x248>)
    a6c4:	4798      	blx	r3
		nm_bsp_sleep(1);
    a6c6:	2001      	movs	r0, #1
    a6c8:	47a0      	blx	r4
    a6ca:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    a6cc:	2d00      	cmp	r5, #0
    a6ce:	d100      	bne.n	a6d2 <nm_spi_write_block+0x7a>
    a6d0:	e0d5      	b.n	a87e <nm_spi_write_block+0x226>
	if (size == 1)
    a6d2:	9b03      	ldr	r3, [sp, #12]
    a6d4:	2b01      	cmp	r3, #1
    a6d6:	d0ce      	beq.n	a676 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    a6d8:	2300      	movs	r3, #0
    a6da:	9300      	str	r3, [sp, #0]
    a6dc:	9b03      	ldr	r3, [sp, #12]
    a6de:	2200      	movs	r2, #0
    a6e0:	9e04      	ldr	r6, [sp, #16]
    a6e2:	0031      	movs	r1, r6
    a6e4:	20c7      	movs	r0, #199	; 0xc7
    a6e6:	4c70      	ldr	r4, [pc, #448]	; (a8a8 <nm_spi_write_block+0x250>)
    a6e8:	47a0      	blx	r4
	if (result != N_OK) {
    a6ea:	2801      	cmp	r0, #1
    a6ec:	d1c6      	bne.n	a67c <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    a6ee:	20c7      	movs	r0, #199	; 0xc7
    a6f0:	4b6e      	ldr	r3, [pc, #440]	; (a8ac <nm_spi_write_block+0x254>)
    a6f2:	4798      	blx	r3
	if (result != N_OK) {
    a6f4:	2801      	cmp	r0, #1
    a6f6:	d00c      	beq.n	a712 <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    a6f8:	22f4      	movs	r2, #244	; 0xf4
    a6fa:	0092      	lsls	r2, r2, #2
    a6fc:	4964      	ldr	r1, [pc, #400]	; (a890 <nm_spi_write_block+0x238>)
    a6fe:	4865      	ldr	r0, [pc, #404]	; (a894 <nm_spi_write_block+0x23c>)
    a700:	4c65      	ldr	r4, [pc, #404]	; (a898 <nm_spi_write_block+0x240>)
    a702:	47a0      	blx	r4
    a704:	9904      	ldr	r1, [sp, #16]
    a706:	486c      	ldr	r0, [pc, #432]	; (a8b8 <nm_spi_write_block+0x260>)
    a708:	47a0      	blx	r4
    a70a:	200d      	movs	r0, #13
    a70c:	4b64      	ldr	r3, [pc, #400]	; (a8a0 <nm_spi_write_block+0x248>)
    a70e:	4798      	blx	r3
    a710:	e7bf      	b.n	a692 <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    a712:	2200      	movs	r2, #0
    a714:	ab07      	add	r3, sp, #28
    a716:	801a      	strh	r2, [r3, #0]
    a718:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    a71a:	2600      	movs	r6, #0
				order = 0x1;
    a71c:	46a8      	mov	r8, r5
    a71e:	0035      	movs	r5, r6
    a720:	0026      	movs	r6, r4
    a722:	e021      	b.n	a768 <nm_spi_write_block+0x110>
				order = 0x2;
    a724:	2300      	movs	r3, #0
    a726:	42b7      	cmp	r7, r6
    a728:	415b      	adcs	r3, r3
    a72a:	3302      	adds	r3, #2
		cmd |= order;
    a72c:	200b      	movs	r0, #11
    a72e:	aa04      	add	r2, sp, #16
    a730:	4694      	mov	ip, r2
    a732:	4460      	add	r0, ip
    a734:	2210      	movs	r2, #16
    a736:	4252      	negs	r2, r2
    a738:	4313      	orrs	r3, r2
    a73a:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    a73c:	2101      	movs	r1, #1
    a73e:	4b5f      	ldr	r3, [pc, #380]	; (a8bc <nm_spi_write_block+0x264>)
    a740:	4798      	blx	r3
    a742:	2800      	cmp	r0, #0
    a744:	d11d      	bne.n	a782 <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    a746:	465b      	mov	r3, fp
    a748:	1958      	adds	r0, r3, r5
    a74a:	0021      	movs	r1, r4
    a74c:	4b5b      	ldr	r3, [pc, #364]	; (a8bc <nm_spi_write_block+0x264>)
    a74e:	4798      	blx	r3
    a750:	2800      	cmp	r0, #0
    a752:	d130      	bne.n	a7b6 <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    a754:	4b5a      	ldr	r3, [pc, #360]	; (a8c0 <nm_spi_write_block+0x268>)
    a756:	781b      	ldrb	r3, [r3, #0]
    a758:	2b00      	cmp	r3, #0
    a75a:	d039      	beq.n	a7d0 <nm_spi_write_block+0x178>
		ix += nbytes;
    a75c:	1965      	adds	r5, r4, r5
    a75e:	b22d      	sxth	r5, r5
		sz -= nbytes;
    a760:	1b36      	subs	r6, r6, r4
    a762:	b2b6      	uxth	r6, r6
	} while (sz);
    a764:	2e00      	cmp	r6, #0
    a766:	d053      	beq.n	a810 <nm_spi_write_block+0x1b8>
    a768:	1c34      	adds	r4, r6, #0
    a76a:	42be      	cmp	r6, r7
    a76c:	d901      	bls.n	a772 <nm_spi_write_block+0x11a>
    a76e:	466b      	mov	r3, sp
    a770:	8adc      	ldrh	r4, [r3, #22]
    a772:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    a774:	2d00      	cmp	r5, #0
    a776:	d1d5      	bne.n	a724 <nm_spi_write_block+0xcc>
				order = 0x3;
    a778:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    a77a:	42be      	cmp	r6, r7
    a77c:	d9d6      	bls.n	a72c <nm_spi_write_block+0xd4>
				order = 0x1;
    a77e:	3b02      	subs	r3, #2
    a780:	e7d4      	b.n	a72c <nm_spi_write_block+0xd4>
    a782:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    a784:	22d4      	movs	r2, #212	; 0xd4
    a786:	0092      	lsls	r2, r2, #2
    a788:	494e      	ldr	r1, [pc, #312]	; (a8c4 <nm_spi_write_block+0x26c>)
    a78a:	4842      	ldr	r0, [pc, #264]	; (a894 <nm_spi_write_block+0x23c>)
    a78c:	4b42      	ldr	r3, [pc, #264]	; (a898 <nm_spi_write_block+0x240>)
    a78e:	4798      	blx	r3
    a790:	484d      	ldr	r0, [pc, #308]	; (a8c8 <nm_spi_write_block+0x270>)
    a792:	4b4e      	ldr	r3, [pc, #312]	; (a8cc <nm_spi_write_block+0x274>)
    a794:	4798      	blx	r3
    a796:	200d      	movs	r0, #13
    a798:	4b41      	ldr	r3, [pc, #260]	; (a8a0 <nm_spi_write_block+0x248>)
    a79a:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    a79c:	22f8      	movs	r2, #248	; 0xf8
    a79e:	0092      	lsls	r2, r2, #2
    a7a0:	493b      	ldr	r1, [pc, #236]	; (a890 <nm_spi_write_block+0x238>)
    a7a2:	483c      	ldr	r0, [pc, #240]	; (a894 <nm_spi_write_block+0x23c>)
    a7a4:	4b3c      	ldr	r3, [pc, #240]	; (a898 <nm_spi_write_block+0x240>)
    a7a6:	4798      	blx	r3
    a7a8:	4849      	ldr	r0, [pc, #292]	; (a8d0 <nm_spi_write_block+0x278>)
    a7aa:	4b48      	ldr	r3, [pc, #288]	; (a8cc <nm_spi_write_block+0x274>)
    a7ac:	4798      	blx	r3
    a7ae:	200d      	movs	r0, #13
    a7b0:	4b3b      	ldr	r3, [pc, #236]	; (a8a0 <nm_spi_write_block+0x248>)
    a7b2:	4798      	blx	r3
    a7b4:	e76d      	b.n	a692 <nm_spi_write_block+0x3a>
    a7b6:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    a7b8:	4a46      	ldr	r2, [pc, #280]	; (a8d4 <nm_spi_write_block+0x27c>)
    a7ba:	4942      	ldr	r1, [pc, #264]	; (a8c4 <nm_spi_write_block+0x26c>)
    a7bc:	4835      	ldr	r0, [pc, #212]	; (a894 <nm_spi_write_block+0x23c>)
    a7be:	4b36      	ldr	r3, [pc, #216]	; (a898 <nm_spi_write_block+0x240>)
    a7c0:	4798      	blx	r3
    a7c2:	4845      	ldr	r0, [pc, #276]	; (a8d8 <nm_spi_write_block+0x280>)
    a7c4:	4b41      	ldr	r3, [pc, #260]	; (a8cc <nm_spi_write_block+0x274>)
    a7c6:	4798      	blx	r3
    a7c8:	200d      	movs	r0, #13
    a7ca:	4b35      	ldr	r3, [pc, #212]	; (a8a0 <nm_spi_write_block+0x248>)
    a7cc:	4798      	blx	r3
    a7ce:	e7e5      	b.n	a79c <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    a7d0:	2102      	movs	r1, #2
    a7d2:	a807      	add	r0, sp, #28
    a7d4:	4b39      	ldr	r3, [pc, #228]	; (a8bc <nm_spi_write_block+0x264>)
    a7d6:	4798      	blx	r3
    a7d8:	2800      	cmp	r0, #0
    a7da:	d0bf      	beq.n	a75c <nm_spi_write_block+0x104>
    a7dc:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    a7de:	4a3f      	ldr	r2, [pc, #252]	; (a8dc <nm_spi_write_block+0x284>)
    a7e0:	4938      	ldr	r1, [pc, #224]	; (a8c4 <nm_spi_write_block+0x26c>)
    a7e2:	482c      	ldr	r0, [pc, #176]	; (a894 <nm_spi_write_block+0x23c>)
    a7e4:	4b2c      	ldr	r3, [pc, #176]	; (a898 <nm_spi_write_block+0x240>)
    a7e6:	4798      	blx	r3
    a7e8:	483d      	ldr	r0, [pc, #244]	; (a8e0 <nm_spi_write_block+0x288>)
    a7ea:	4b38      	ldr	r3, [pc, #224]	; (a8cc <nm_spi_write_block+0x274>)
    a7ec:	4798      	blx	r3
    a7ee:	200d      	movs	r0, #13
    a7f0:	4b2b      	ldr	r3, [pc, #172]	; (a8a0 <nm_spi_write_block+0x248>)
    a7f2:	4798      	blx	r3
    a7f4:	e7d2      	b.n	a79c <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    a7f6:	223c      	movs	r2, #60	; 0x3c
    a7f8:	32ff      	adds	r2, #255	; 0xff
    a7fa:	493a      	ldr	r1, [pc, #232]	; (a8e4 <nm_spi_write_block+0x28c>)
    a7fc:	4825      	ldr	r0, [pc, #148]	; (a894 <nm_spi_write_block+0x23c>)
    a7fe:	4b26      	ldr	r3, [pc, #152]	; (a898 <nm_spi_write_block+0x240>)
    a800:	4798      	blx	r3
    a802:	4839      	ldr	r0, [pc, #228]	; (a8e8 <nm_spi_write_block+0x290>)
    a804:	4b31      	ldr	r3, [pc, #196]	; (a8cc <nm_spi_write_block+0x274>)
    a806:	4798      	blx	r3
    a808:	200d      	movs	r0, #13
    a80a:	4b25      	ldr	r3, [pc, #148]	; (a8a0 <nm_spi_write_block+0x248>)
    a80c:	4798      	blx	r3
    a80e:	e027      	b.n	a860 <nm_spi_write_block+0x208>
    a810:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    a812:	4b2b      	ldr	r3, [pc, #172]	; (a8c0 <nm_spi_write_block+0x268>)
    a814:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    a816:	1e63      	subs	r3, r4, #1
    a818:	419c      	sbcs	r4, r3
    a81a:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    a81c:	b2a1      	uxth	r1, r4
    a81e:	a807      	add	r0, sp, #28
    a820:	4b32      	ldr	r3, [pc, #200]	; (a8ec <nm_spi_write_block+0x294>)
    a822:	4798      	blx	r3
    a824:	2800      	cmp	r0, #0
    a826:	d1e6      	bne.n	a7f6 <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    a828:	ab08      	add	r3, sp, #32
    a82a:	191b      	adds	r3, r3, r4
    a82c:	3b05      	subs	r3, #5
    a82e:	781b      	ldrb	r3, [r3, #0]
    a830:	2b00      	cmp	r3, #0
    a832:	d106      	bne.n	a842 <nm_spi_write_block+0x1ea>
    a834:	ab08      	add	r3, sp, #32
    a836:	469c      	mov	ip, r3
    a838:	4464      	add	r4, ip
    a83a:	3c06      	subs	r4, #6
    a83c:	7823      	ldrb	r3, [r4, #0]
    a83e:	2bc3      	cmp	r3, #195	; 0xc3
    a840:	d01b      	beq.n	a87a <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    a842:	22a1      	movs	r2, #161	; 0xa1
    a844:	0052      	lsls	r2, r2, #1
    a846:	4927      	ldr	r1, [pc, #156]	; (a8e4 <nm_spi_write_block+0x28c>)
    a848:	4812      	ldr	r0, [pc, #72]	; (a894 <nm_spi_write_block+0x23c>)
    a84a:	4c13      	ldr	r4, [pc, #76]	; (a898 <nm_spi_write_block+0x240>)
    a84c:	47a0      	blx	r4
    a84e:	a907      	add	r1, sp, #28
    a850:	788b      	ldrb	r3, [r1, #2]
    a852:	784a      	ldrb	r2, [r1, #1]
    a854:	7809      	ldrb	r1, [r1, #0]
    a856:	4826      	ldr	r0, [pc, #152]	; (a8f0 <nm_spi_write_block+0x298>)
    a858:	47a0      	blx	r4
    a85a:	200d      	movs	r0, #13
    a85c:	4b10      	ldr	r3, [pc, #64]	; (a8a0 <nm_spi_write_block+0x248>)
    a85e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    a860:	22fa      	movs	r2, #250	; 0xfa
    a862:	0092      	lsls	r2, r2, #2
    a864:	490a      	ldr	r1, [pc, #40]	; (a890 <nm_spi_write_block+0x238>)
    a866:	480b      	ldr	r0, [pc, #44]	; (a894 <nm_spi_write_block+0x23c>)
    a868:	4b0b      	ldr	r3, [pc, #44]	; (a898 <nm_spi_write_block+0x240>)
    a86a:	4798      	blx	r3
    a86c:	4818      	ldr	r0, [pc, #96]	; (a8d0 <nm_spi_write_block+0x278>)
    a86e:	4b17      	ldr	r3, [pc, #92]	; (a8cc <nm_spi_write_block+0x274>)
    a870:	4798      	blx	r3
    a872:	200d      	movs	r0, #13
    a874:	4b0a      	ldr	r3, [pc, #40]	; (a8a0 <nm_spi_write_block+0x248>)
    a876:	4798      	blx	r3
    a878:	e70b      	b.n	a692 <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    a87a:	2000      	movs	r0, #0
    a87c:	e001      	b.n	a882 <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    a87e:	2006      	movs	r0, #6
    a880:	4240      	negs	r0, r0

	return s8Ret;
}
    a882:	b009      	add	sp, #36	; 0x24
    a884:	bc0c      	pop	{r2, r3}
    a886:	4690      	mov	r8, r2
    a888:	469b      	mov	fp, r3
    a88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a88c:	000003ca 	.word	0x000003ca
    a890:	00015d80 	.word	0x00015d80
    a894:	00015668 	.word	0x00015668
    a898:	000140dd 	.word	0x000140dd
    a89c:	00016038 	.word	0x00016038
    a8a0:	00014111 	.word	0x00014111
    a8a4:	00008129 	.word	0x00008129
    a8a8:	00009d21 	.word	0x00009d21
    a8ac:	00009ec1 	.word	0x00009ec1
    a8b0:	000003f2 	.word	0x000003f2
    a8b4:	0001601c 	.word	0x0001601c
    a8b8:	00016068 	.word	0x00016068
    a8bc:	00009d01 	.word	0x00009d01
    a8c0:	2000021c 	.word	0x2000021c
    a8c4:	00015d60 	.word	0x00015d60
    a8c8:	000160a0 	.word	0x000160a0
    a8cc:	000141f9 	.word	0x000141f9
    a8d0:	00016194 	.word	0x00016194
    a8d4:	00000359 	.word	0x00000359
    a8d8:	000160d8 	.word	0x000160d8
    a8dc:	00000363 	.word	0x00000363
    a8e0:	0001610c 	.word	0x0001610c
    a8e4:	00015d34 	.word	0x00015d34
    a8e8:	00016144 	.word	0x00016144
    a8ec:	00009ea1 	.word	0x00009ea1
    a8f0:	00016164 	.word	0x00016164

0000a8f4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    a8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a8f6:	46de      	mov	lr, fp
    a8f8:	4657      	mov	r7, sl
    a8fa:	464e      	mov	r6, r9
    a8fc:	4645      	mov	r5, r8
    a8fe:	b5e0      	push	{r5, r6, r7, lr}
    a900:	b085      	sub	sp, #20
    a902:	9001      	str	r0, [sp, #4]
    a904:	000e      	movs	r6, r1
    a906:	9202      	str	r2, [sp, #8]
    a908:	001d      	movs	r5, r3
    a90a:	ab0e      	add	r3, sp, #56	; 0x38
    a90c:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    a90e:	2c00      	cmp	r4, #0
    a910:	d064      	beq.n	a9dc <Socket_ReadSocketData+0xe8>
    a912:	0103      	lsls	r3, r0, #4
    a914:	4935      	ldr	r1, [pc, #212]	; (a9ec <Socket_ReadSocketData+0xf8>)
    a916:	585b      	ldr	r3, [r3, r1]
    a918:	2b00      	cmp	r3, #0
    a91a:	d05f      	beq.n	a9dc <Socket_ReadSocketData+0xe8>
    a91c:	0101      	lsls	r1, r0, #4
    a91e:	4b33      	ldr	r3, [pc, #204]	; (a9ec <Socket_ReadSocketData+0xf8>)
    a920:	185b      	adds	r3, r3, r1
    a922:	889b      	ldrh	r3, [r3, #4]
    a924:	b29b      	uxth	r3, r3
    a926:	2b00      	cmp	r3, #0
    a928:	d058      	beq.n	a9dc <Socket_ReadSocketData+0xe8>
    a92a:	4b30      	ldr	r3, [pc, #192]	; (a9ec <Socket_ReadSocketData+0xf8>)
    a92c:	185b      	adds	r3, r3, r1
    a92e:	7a9b      	ldrb	r3, [r3, #10]
    a930:	2b01      	cmp	r3, #1
    a932:	d153      	bne.n	a9dc <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    a934:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    a936:	4b2d      	ldr	r3, [pc, #180]	; (a9ec <Socket_ReadSocketData+0xf8>)
    a938:	469b      	mov	fp, r3
    a93a:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    a93c:	465b      	mov	r3, fp
    a93e:	220a      	movs	r2, #10
    a940:	4690      	mov	r8, r2
    a942:	44d8      	add	r8, fp
    a944:	468a      	mov	sl, r1
    a946:	9500      	str	r5, [sp, #0]
    a948:	9303      	str	r3, [sp, #12]
    a94a:	e015      	b.n	a978 <Socket_ReadSocketData+0x84>
    a94c:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    a94e:	2301      	movs	r3, #1
    a950:	e01c      	b.n	a98c <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    a952:	3301      	adds	r3, #1
    a954:	2200      	movs	r2, #0
    a956:	2100      	movs	r1, #0
    a958:	2000      	movs	r0, #0
    a95a:	4c25      	ldr	r4, [pc, #148]	; (a9f0 <Socket_ReadSocketData+0xfc>)
    a95c:	47a0      	blx	r4
    a95e:	e03d      	b.n	a9dc <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    a960:	4824      	ldr	r0, [pc, #144]	; (a9f4 <Socket_ReadSocketData+0x100>)
    a962:	4d25      	ldr	r5, [pc, #148]	; (a9f8 <Socket_ReadSocketData+0x104>)
    a964:	47a8      	blx	r5
    a966:	0021      	movs	r1, r4
    a968:	4824      	ldr	r0, [pc, #144]	; (a9fc <Socket_ReadSocketData+0x108>)
    a96a:	47a8      	blx	r5
    a96c:	200d      	movs	r0, #13
    a96e:	4b24      	ldr	r3, [pc, #144]	; (aa00 <Socket_ReadSocketData+0x10c>)
    a970:	4798      	blx	r3
				break;
    a972:	e033      	b.n	a9dc <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    a974:	2c00      	cmp	r4, #0
    a976:	d031      	beq.n	a9dc <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    a978:	465b      	mov	r3, fp
    a97a:	889b      	ldrh	r3, [r3, #4]
    a97c:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    a97e:	b21b      	sxth	r3, r3
    a980:	2b00      	cmp	r3, #0
    a982:	dde3      	ble.n	a94c <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    a984:	9b03      	ldr	r3, [sp, #12]
    a986:	889d      	ldrh	r5, [r3, #4]
    a988:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    a98a:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    a98c:	4a17      	ldr	r2, [pc, #92]	; (a9ec <Socket_ReadSocketData+0xf8>)
    a98e:	4651      	mov	r1, sl
    a990:	5889      	ldr	r1, [r1, r2]
    a992:	002a      	movs	r2, r5
    a994:	9800      	ldr	r0, [sp, #0]
    a996:	4f16      	ldr	r7, [pc, #88]	; (a9f0 <Socket_ReadSocketData+0xfc>)
    a998:	47b8      	blx	r7
    a99a:	2800      	cmp	r0, #0
    a99c:	d1e0      	bne.n	a960 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    a99e:	4b13      	ldr	r3, [pc, #76]	; (a9ec <Socket_ReadSocketData+0xf8>)
    a9a0:	4652      	mov	r2, sl
    a9a2:	58d3      	ldr	r3, [r2, r3]
    a9a4:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    a9a6:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    a9a8:	88f3      	ldrh	r3, [r6, #6]
    a9aa:	1b5b      	subs	r3, r3, r5
    a9ac:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    a9ae:	4b15      	ldr	r3, [pc, #84]	; (aa04 <Socket_ReadSocketData+0x110>)
    a9b0:	681b      	ldr	r3, [r3, #0]
    a9b2:	2b00      	cmp	r3, #0
    a9b4:	d005      	beq.n	a9c2 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    a9b6:	4b13      	ldr	r3, [pc, #76]	; (aa04 <Socket_ReadSocketData+0x110>)
    a9b8:	681b      	ldr	r3, [r3, #0]
    a9ba:	0032      	movs	r2, r6
    a9bc:	9902      	ldr	r1, [sp, #8]
    a9be:	9801      	ldr	r0, [sp, #4]
    a9c0:	4798      	blx	r3
				u16ReadCount -= u16Read;
    a9c2:	1b64      	subs	r4, r4, r5
    a9c4:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    a9c6:	9b00      	ldr	r3, [sp, #0]
    a9c8:	469c      	mov	ip, r3
    a9ca:	44ac      	add	ip, r5
    a9cc:	4663      	mov	r3, ip
    a9ce:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    a9d0:	4643      	mov	r3, r8
    a9d2:	781b      	ldrb	r3, [r3, #0]
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	d1cd      	bne.n	a974 <Socket_ReadSocketData+0x80>
    a9d8:	2c00      	cmp	r4, #0
    a9da:	d1ba      	bne.n	a952 <Socket_ReadSocketData+0x5e>
	}
}
    a9dc:	b005      	add	sp, #20
    a9de:	bc3c      	pop	{r2, r3, r4, r5}
    a9e0:	4690      	mov	r8, r2
    a9e2:	4699      	mov	r9, r3
    a9e4:	46a2      	mov	sl, r4
    a9e6:	46ab      	mov	fp, r5
    a9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a9ea:	46c0      	nop			; (mov r8, r8)
    a9ec:	20000468 	.word	0x20000468
    a9f0:	00008c79 	.word	0x00008c79
    a9f4:	00015998 	.word	0x00015998
    a9f8:	000140dd 	.word	0x000140dd
    a9fc:	000163fc 	.word	0x000163fc
    aa00:	00014111 	.word	0x00014111
    aa04:	20000518 	.word	0x20000518

0000aa08 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    aa08:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa0a:	46d6      	mov	lr, sl
    aa0c:	464f      	mov	r7, r9
    aa0e:	4646      	mov	r6, r8
    aa10:	b5c0      	push	{r6, r7, lr}
    aa12:	b09a      	sub	sp, #104	; 0x68
    aa14:	000d      	movs	r5, r1
    aa16:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    aa18:	2841      	cmp	r0, #65	; 0x41
    aa1a:	d039      	beq.n	aa90 <m2m_ip_cb+0x88>
    aa1c:	2854      	cmp	r0, #84	; 0x54
    aa1e:	d037      	beq.n	aa90 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    aa20:	2842      	cmp	r0, #66	; 0x42
    aa22:	d053      	beq.n	aacc <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    aa24:	2843      	cmp	r0, #67	; 0x43
    aa26:	d06a      	beq.n	aafe <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    aa28:	2844      	cmp	r0, #68	; 0x44
    aa2a:	d100      	bne.n	aa2e <m2m_ip_cb+0x26>
    aa2c:	e0af      	b.n	ab8e <m2m_ip_cb+0x186>
    aa2e:	284b      	cmp	r0, #75	; 0x4b
    aa30:	d100      	bne.n	aa34 <m2m_ip_cb+0x2c>
    aa32:	e0ac      	b.n	ab8e <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    aa34:	284a      	cmp	r0, #74	; 0x4a
    aa36:	d100      	bne.n	aa3a <m2m_ip_cb+0x32>
    aa38:	e0cf      	b.n	abda <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    aa3a:	2846      	cmp	r0, #70	; 0x46
    aa3c:	d100      	bne.n	aa40 <m2m_ip_cb+0x38>
    aa3e:	e0e5      	b.n	ac0c <m2m_ip_cb+0x204>
    aa40:	2848      	cmp	r0, #72	; 0x48
    aa42:	d100      	bne.n	aa46 <m2m_ip_cb+0x3e>
    aa44:	e10e      	b.n	ac64 <m2m_ip_cb+0x25c>
    aa46:	284d      	cmp	r0, #77	; 0x4d
    aa48:	d100      	bne.n	aa4c <m2m_ip_cb+0x44>
    aa4a:	e0dc      	b.n	ac06 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    aa4c:	2845      	cmp	r0, #69	; 0x45
    aa4e:	d100      	bne.n	aa52 <m2m_ip_cb+0x4a>
    aa50:	e12c      	b.n	acac <m2m_ip_cb+0x2a4>
    aa52:	2847      	cmp	r0, #71	; 0x47
    aa54:	d100      	bne.n	aa58 <m2m_ip_cb+0x50>
    aa56:	e14d      	b.n	acf4 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    aa58:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    aa5a:	284c      	cmp	r0, #76	; 0x4c
    aa5c:	d100      	bne.n	aa60 <m2m_ip_cb+0x58>
    aa5e:	e126      	b.n	acae <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    aa60:	2852      	cmp	r0, #82	; 0x52
    aa62:	d12d      	bne.n	aac0 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    aa64:	2301      	movs	r3, #1
    aa66:	2214      	movs	r2, #20
    aa68:	a909      	add	r1, sp, #36	; 0x24
    aa6a:	0020      	movs	r0, r4
    aa6c:	4ca2      	ldr	r4, [pc, #648]	; (acf8 <m2m_ip_cb+0x2f0>)
    aa6e:	47a0      	blx	r4
    aa70:	2800      	cmp	r0, #0
    aa72:	d125      	bne.n	aac0 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    aa74:	4ba1      	ldr	r3, [pc, #644]	; (acfc <m2m_ip_cb+0x2f4>)
    aa76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    aa78:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    aa7a:	681b      	ldr	r3, [r3, #0]
    aa7c:	2b00      	cmp	r3, #0
    aa7e:	d01f      	beq.n	aac0 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    aa80:	4b9e      	ldr	r3, [pc, #632]	; (acfc <m2m_ip_cb+0x2f4>)
    aa82:	681c      	ldr	r4, [r3, #0]
    aa84:	ab09      	add	r3, sp, #36	; 0x24
    aa86:	7c1a      	ldrb	r2, [r3, #16]
    aa88:	990b      	ldr	r1, [sp, #44]	; 0x2c
    aa8a:	9809      	ldr	r0, [sp, #36]	; 0x24
    aa8c:	47a0      	blx	r4
			}
		}
	}
}
    aa8e:	e017      	b.n	aac0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    aa90:	2300      	movs	r3, #0
    aa92:	2204      	movs	r2, #4
    aa94:	a909      	add	r1, sp, #36	; 0x24
    aa96:	0020      	movs	r0, r4
    aa98:	4c97      	ldr	r4, [pc, #604]	; (acf8 <m2m_ip_cb+0x2f0>)
    aa9a:	47a0      	blx	r4
    aa9c:	2800      	cmp	r0, #0
    aa9e:	d10f      	bne.n	aac0 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    aaa0:	ab09      	add	r3, sp, #36	; 0x24
    aaa2:	785a      	ldrb	r2, [r3, #1]
    aaa4:	ab05      	add	r3, sp, #20
    aaa6:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    aaa8:	4b95      	ldr	r3, [pc, #596]	; (ad00 <m2m_ip_cb+0x2f8>)
    aaaa:	681b      	ldr	r3, [r3, #0]
    aaac:	2b00      	cmp	r3, #0
    aaae:	d007      	beq.n	aac0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    aab0:	4b93      	ldr	r3, [pc, #588]	; (ad00 <m2m_ip_cb+0x2f8>)
    aab2:	681b      	ldr	r3, [r3, #0]
    aab4:	aa09      	add	r2, sp, #36	; 0x24
    aab6:	2000      	movs	r0, #0
    aab8:	5610      	ldrsb	r0, [r2, r0]
    aaba:	aa05      	add	r2, sp, #20
    aabc:	2101      	movs	r1, #1
    aabe:	4798      	blx	r3
}
    aac0:	b01a      	add	sp, #104	; 0x68
    aac2:	bc1c      	pop	{r2, r3, r4}
    aac4:	4690      	mov	r8, r2
    aac6:	4699      	mov	r9, r3
    aac8:	46a2      	mov	sl, r4
    aaca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    aacc:	2300      	movs	r3, #0
    aace:	2204      	movs	r2, #4
    aad0:	a909      	add	r1, sp, #36	; 0x24
    aad2:	0020      	movs	r0, r4
    aad4:	4c88      	ldr	r4, [pc, #544]	; (acf8 <m2m_ip_cb+0x2f0>)
    aad6:	47a0      	blx	r4
    aad8:	2800      	cmp	r0, #0
    aada:	d1f1      	bne.n	aac0 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    aadc:	ab09      	add	r3, sp, #36	; 0x24
    aade:	785a      	ldrb	r2, [r3, #1]
    aae0:	ab05      	add	r3, sp, #20
    aae2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    aae4:	4b86      	ldr	r3, [pc, #536]	; (ad00 <m2m_ip_cb+0x2f8>)
    aae6:	681b      	ldr	r3, [r3, #0]
    aae8:	2b00      	cmp	r3, #0
    aaea:	d0e9      	beq.n	aac0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    aaec:	4b84      	ldr	r3, [pc, #528]	; (ad00 <m2m_ip_cb+0x2f8>)
    aaee:	681b      	ldr	r3, [r3, #0]
    aaf0:	aa09      	add	r2, sp, #36	; 0x24
    aaf2:	2000      	movs	r0, #0
    aaf4:	5610      	ldrsb	r0, [r2, r0]
    aaf6:	aa05      	add	r2, sp, #20
    aaf8:	2102      	movs	r1, #2
    aafa:	4798      	blx	r3
    aafc:	e7e0      	b.n	aac0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    aafe:	2300      	movs	r3, #0
    ab00:	220c      	movs	r2, #12
    ab02:	a905      	add	r1, sp, #20
    ab04:	0020      	movs	r0, r4
    ab06:	4c7c      	ldr	r4, [pc, #496]	; (acf8 <m2m_ip_cb+0x2f0>)
    ab08:	47a0      	blx	r4
    ab0a:	2800      	cmp	r0, #0
    ab0c:	d1d8      	bne.n	aac0 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    ab0e:	ab05      	add	r3, sp, #20
    ab10:	2209      	movs	r2, #9
    ab12:	569a      	ldrsb	r2, [r3, r2]
    ab14:	2a00      	cmp	r2, #0
    ab16:	db24      	blt.n	ab62 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    ab18:	0018      	movs	r0, r3
    ab1a:	2108      	movs	r1, #8
    ab1c:	5659      	ldrsb	r1, [r3, r1]
    ab1e:	4b79      	ldr	r3, [pc, #484]	; (ad04 <m2m_ip_cb+0x2fc>)
    ab20:	0109      	lsls	r1, r1, #4
    ab22:	1859      	adds	r1, r3, r1
    ab24:	7ac9      	ldrb	r1, [r1, #11]
    ab26:	b2c9      	uxtb	r1, r1
    ab28:	0114      	lsls	r4, r2, #4
    ab2a:	191b      	adds	r3, r3, r4
    ab2c:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    ab2e:	2101      	movs	r1, #1
    ab30:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    ab32:	8941      	ldrh	r1, [r0, #10]
    ab34:	3908      	subs	r1, #8
    ab36:	b289      	uxth	r1, r1
    ab38:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    ab3a:	4973      	ldr	r1, [pc, #460]	; (ad08 <m2m_ip_cb+0x300>)
    ab3c:	880b      	ldrh	r3, [r1, #0]
    ab3e:	3301      	adds	r3, #1
    ab40:	b29b      	uxth	r3, r3
    ab42:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    ab44:	880b      	ldrh	r3, [r1, #0]
    ab46:	b29b      	uxth	r3, r3
    ab48:	2b00      	cmp	r3, #0
    ab4a:	d103      	bne.n	ab54 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    ab4c:	880b      	ldrh	r3, [r1, #0]
    ab4e:	3301      	adds	r3, #1
    ab50:	b29b      	uxth	r3, r3
    ab52:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    ab54:	4b6c      	ldr	r3, [pc, #432]	; (ad08 <m2m_ip_cb+0x300>)
    ab56:	8819      	ldrh	r1, [r3, #0]
    ab58:	b289      	uxth	r1, r1
    ab5a:	0110      	lsls	r0, r2, #4
    ab5c:	4b69      	ldr	r3, [pc, #420]	; (ad04 <m2m_ip_cb+0x2fc>)
    ab5e:	181b      	adds	r3, r3, r0
    ab60:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    ab62:	ab09      	add	r3, sp, #36	; 0x24
    ab64:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    ab66:	2202      	movs	r2, #2
    ab68:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    ab6a:	aa05      	add	r2, sp, #20
    ab6c:	8851      	ldrh	r1, [r2, #2]
    ab6e:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    ab70:	9a06      	ldr	r2, [sp, #24]
    ab72:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    ab74:	4b62      	ldr	r3, [pc, #392]	; (ad00 <m2m_ip_cb+0x2f8>)
    ab76:	681b      	ldr	r3, [r3, #0]
    ab78:	2b00      	cmp	r3, #0
    ab7a:	d0a1      	beq.n	aac0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    ab7c:	4b60      	ldr	r3, [pc, #384]	; (ad00 <m2m_ip_cb+0x2f8>)
    ab7e:	681b      	ldr	r3, [r3, #0]
    ab80:	aa05      	add	r2, sp, #20
    ab82:	2008      	movs	r0, #8
    ab84:	5610      	ldrsb	r0, [r2, r0]
    ab86:	aa09      	add	r2, sp, #36	; 0x24
    ab88:	2104      	movs	r1, #4
    ab8a:	4798      	blx	r3
    ab8c:	e798      	b.n	aac0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    ab8e:	2300      	movs	r3, #0
    ab90:	2204      	movs	r2, #4
    ab92:	a909      	add	r1, sp, #36	; 0x24
    ab94:	0020      	movs	r0, r4
    ab96:	4c58      	ldr	r4, [pc, #352]	; (acf8 <m2m_ip_cb+0x2f0>)
    ab98:	47a0      	blx	r4
    ab9a:	2800      	cmp	r0, #0
    ab9c:	d000      	beq.n	aba0 <m2m_ip_cb+0x198>
    ab9e:	e78f      	b.n	aac0 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    aba0:	ab09      	add	r3, sp, #36	; 0x24
    aba2:	2000      	movs	r0, #0
    aba4:	5618      	ldrsb	r0, [r3, r0]
    aba6:	aa05      	add	r2, sp, #20
    aba8:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    abaa:	785b      	ldrb	r3, [r3, #1]
    abac:	b25b      	sxtb	r3, r3
    abae:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    abb0:	2b00      	cmp	r3, #0
    abb2:	d107      	bne.n	abc4 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    abb4:	ab09      	add	r3, sp, #36	; 0x24
    abb6:	885b      	ldrh	r3, [r3, #2]
    abb8:	3b08      	subs	r3, #8
    abba:	b29b      	uxth	r3, r3
    abbc:	0101      	lsls	r1, r0, #4
    abbe:	4a51      	ldr	r2, [pc, #324]	; (ad04 <m2m_ip_cb+0x2fc>)
    abc0:	1852      	adds	r2, r2, r1
    abc2:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    abc4:	4b4e      	ldr	r3, [pc, #312]	; (ad00 <m2m_ip_cb+0x2f8>)
    abc6:	681b      	ldr	r3, [r3, #0]
    abc8:	2b00      	cmp	r3, #0
    abca:	d100      	bne.n	abce <m2m_ip_cb+0x1c6>
    abcc:	e778      	b.n	aac0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    abce:	4b4c      	ldr	r3, [pc, #304]	; (ad00 <m2m_ip_cb+0x2f8>)
    abd0:	681b      	ldr	r3, [r3, #0]
    abd2:	aa05      	add	r2, sp, #20
    abd4:	2105      	movs	r1, #5
    abd6:	4798      	blx	r3
	{
    abd8:	e772      	b.n	aac0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    abda:	2300      	movs	r3, #0
    abdc:	2244      	movs	r2, #68	; 0x44
    abde:	a909      	add	r1, sp, #36	; 0x24
    abe0:	0020      	movs	r0, r4
    abe2:	4c45      	ldr	r4, [pc, #276]	; (acf8 <m2m_ip_cb+0x2f0>)
    abe4:	47a0      	blx	r4
    abe6:	2800      	cmp	r0, #0
    abe8:	d000      	beq.n	abec <m2m_ip_cb+0x1e4>
    abea:	e769      	b.n	aac0 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    abec:	4b47      	ldr	r3, [pc, #284]	; (ad0c <m2m_ip_cb+0x304>)
    abee:	681b      	ldr	r3, [r3, #0]
    abf0:	2b00      	cmp	r3, #0
    abf2:	d100      	bne.n	abf6 <m2m_ip_cb+0x1ee>
    abf4:	e764      	b.n	aac0 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    abf6:	4b45      	ldr	r3, [pc, #276]	; (ad0c <m2m_ip_cb+0x304>)
    abf8:	681b      	ldr	r3, [r3, #0]
    abfa:	9a19      	ldr	r2, [sp, #100]	; 0x64
    abfc:	9203      	str	r2, [sp, #12]
    abfe:	0011      	movs	r1, r2
    ac00:	a809      	add	r0, sp, #36	; 0x24
    ac02:	4798      	blx	r3
    ac04:	e75c      	b.n	aac0 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    ac06:	2306      	movs	r3, #6
    ac08:	469a      	mov	sl, r3
    ac0a:	e001      	b.n	ac10 <m2m_ip_cb+0x208>
    ac0c:	2306      	movs	r3, #6
    ac0e:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    ac10:	2300      	movs	r3, #0
    ac12:	2210      	movs	r2, #16
    ac14:	a905      	add	r1, sp, #20
    ac16:	0020      	movs	r0, r4
    ac18:	4f37      	ldr	r7, [pc, #220]	; (acf8 <m2m_ip_cb+0x2f0>)
    ac1a:	47b8      	blx	r7
    ac1c:	2800      	cmp	r0, #0
    ac1e:	d000      	beq.n	ac22 <m2m_ip_cb+0x21a>
    ac20:	e74e      	b.n	aac0 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    ac22:	aa05      	add	r2, sp, #20
    ac24:	200c      	movs	r0, #12
    ac26:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    ac28:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    ac2a:	0107      	lsls	r7, r0, #4
    ac2c:	4935      	ldr	r1, [pc, #212]	; (ad04 <m2m_ip_cb+0x2fc>)
    ac2e:	19c9      	adds	r1, r1, r7
    ac30:	2700      	movs	r7, #0
    ac32:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    ac34:	2608      	movs	r6, #8
    ac36:	5f97      	ldrsh	r7, [r2, r6]
    ac38:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    ac3a:	8957      	ldrh	r7, [r2, #10]
    ac3c:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    ac3e:	af09      	add	r7, sp, #36	; 0x24
    ac40:	8856      	ldrh	r6, [r2, #2]
    ac42:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    ac44:	9a06      	ldr	r2, [sp, #24]
    ac46:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    ac48:	88ca      	ldrh	r2, [r1, #6]
    ac4a:	b292      	uxth	r2, r2
    ac4c:	4293      	cmp	r3, r2
    ac4e:	d00c      	beq.n	ac6a <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    ac50:	2d10      	cmp	r5, #16
    ac52:	d800      	bhi.n	ac56 <m2m_ip_cb+0x24e>
    ac54:	e734      	b.n	aac0 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    ac56:	2301      	movs	r3, #1
    ac58:	2200      	movs	r2, #0
    ac5a:	2100      	movs	r1, #0
    ac5c:	2000      	movs	r0, #0
    ac5e:	4c26      	ldr	r4, [pc, #152]	; (acf8 <m2m_ip_cb+0x2f0>)
    ac60:	47a0      	blx	r4
	{
    ac62:	e72d      	b.n	aac0 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    ac64:	2309      	movs	r3, #9
    ac66:	469a      	mov	sl, r3
    ac68:	e7d2      	b.n	ac10 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    ac6a:	4643      	mov	r3, r8
    ac6c:	2b00      	cmp	r3, #0
    ac6e:	dd01      	ble.n	ac74 <m2m_ip_cb+0x26c>
    ac70:	45a8      	cmp	r8, r5
    ac72:	db0f      	blt.n	ac94 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    ac74:	ab09      	add	r3, sp, #36	; 0x24
    ac76:	4642      	mov	r2, r8
    ac78:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    ac7a:	2300      	movs	r3, #0
    ac7c:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    ac7e:	4b20      	ldr	r3, [pc, #128]	; (ad00 <m2m_ip_cb+0x2f8>)
    ac80:	681b      	ldr	r3, [r3, #0]
    ac82:	2b00      	cmp	r3, #0
    ac84:	d100      	bne.n	ac88 <m2m_ip_cb+0x280>
    ac86:	e71b      	b.n	aac0 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    ac88:	4b1d      	ldr	r3, [pc, #116]	; (ad00 <m2m_ip_cb+0x2f8>)
    ac8a:	681b      	ldr	r3, [r3, #0]
    ac8c:	aa09      	add	r2, sp, #36	; 0x24
    ac8e:	4651      	mov	r1, sl
    ac90:	4798      	blx	r3
    ac92:	e715      	b.n	aac0 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    ac94:	0023      	movs	r3, r4
    ac96:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    ac98:	4642      	mov	r2, r8
    ac9a:	4669      	mov	r1, sp
    ac9c:	818a      	strh	r2, [r1, #12]
    ac9e:	898a      	ldrh	r2, [r1, #12]
    aca0:	9200      	str	r2, [sp, #0]
    aca2:	4652      	mov	r2, sl
    aca4:	0039      	movs	r1, r7
    aca6:	4c1a      	ldr	r4, [pc, #104]	; (ad10 <m2m_ip_cb+0x308>)
    aca8:	47a0      	blx	r4
    acaa:	e709      	b.n	aac0 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    acac:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    acae:	2300      	movs	r3, #0
    acb0:	2208      	movs	r2, #8
    acb2:	a909      	add	r1, sp, #36	; 0x24
    acb4:	0020      	movs	r0, r4
    acb6:	4c10      	ldr	r4, [pc, #64]	; (acf8 <m2m_ip_cb+0x2f0>)
    acb8:	47a0      	blx	r4
    acba:	2800      	cmp	r0, #0
    acbc:	d000      	beq.n	acc0 <m2m_ip_cb+0x2b8>
    acbe:	e6ff      	b.n	aac0 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    acc0:	ab09      	add	r3, sp, #36	; 0x24
    acc2:	2000      	movs	r0, #0
    acc4:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    acc6:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    acc8:	8859      	ldrh	r1, [r3, #2]
    acca:	ab05      	add	r3, sp, #20
    accc:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    acce:	0101      	lsls	r1, r0, #4
    acd0:	4b0c      	ldr	r3, [pc, #48]	; (ad04 <m2m_ip_cb+0x2fc>)
    acd2:	185b      	adds	r3, r3, r1
    acd4:	88db      	ldrh	r3, [r3, #6]
    acd6:	b29b      	uxth	r3, r3
    acd8:	429a      	cmp	r2, r3
    acda:	d000      	beq.n	acde <m2m_ip_cb+0x2d6>
    acdc:	e6f0      	b.n	aac0 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    acde:	4b08      	ldr	r3, [pc, #32]	; (ad00 <m2m_ip_cb+0x2f8>)
    ace0:	681b      	ldr	r3, [r3, #0]
    ace2:	2b00      	cmp	r3, #0
    ace4:	d100      	bne.n	ace8 <m2m_ip_cb+0x2e0>
    ace6:	e6eb      	b.n	aac0 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    ace8:	4b05      	ldr	r3, [pc, #20]	; (ad00 <m2m_ip_cb+0x2f8>)
    acea:	681b      	ldr	r3, [r3, #0]
    acec:	aa05      	add	r2, sp, #20
    acee:	0029      	movs	r1, r5
    acf0:	4798      	blx	r3
	{
    acf2:	e6e5      	b.n	aac0 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    acf4:	2508      	movs	r5, #8
    acf6:	e7da      	b.n	acae <m2m_ip_cb+0x2a6>
    acf8:	00008c79 	.word	0x00008c79
    acfc:	2000051c 	.word	0x2000051c
    ad00:	20000518 	.word	0x20000518
    ad04:	20000468 	.word	0x20000468
    ad08:	2000021e 	.word	0x2000021e
    ad0c:	20000520 	.word	0x20000520
    ad10:	0000a8f5 	.word	0x0000a8f5

0000ad14 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    ad14:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    ad16:	4b0a      	ldr	r3, [pc, #40]	; (ad40 <socketInit+0x2c>)
    ad18:	781b      	ldrb	r3, [r3, #0]
    ad1a:	2b00      	cmp	r3, #0
    ad1c:	d000      	beq.n	ad20 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    ad1e:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    ad20:	22b0      	movs	r2, #176	; 0xb0
    ad22:	2100      	movs	r1, #0
    ad24:	4807      	ldr	r0, [pc, #28]	; (ad44 <socketInit+0x30>)
    ad26:	4b08      	ldr	r3, [pc, #32]	; (ad48 <socketInit+0x34>)
    ad28:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    ad2a:	4908      	ldr	r1, [pc, #32]	; (ad4c <socketInit+0x38>)
    ad2c:	2002      	movs	r0, #2
    ad2e:	4b08      	ldr	r3, [pc, #32]	; (ad50 <socketInit+0x3c>)
    ad30:	4798      	blx	r3
		gbSocketInit	= 1;
    ad32:	2201      	movs	r2, #1
    ad34:	4b02      	ldr	r3, [pc, #8]	; (ad40 <socketInit+0x2c>)
    ad36:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    ad38:	2200      	movs	r2, #0
    ad3a:	4b06      	ldr	r3, [pc, #24]	; (ad54 <socketInit+0x40>)
    ad3c:	801a      	strh	r2, [r3, #0]
}
    ad3e:	e7ee      	b.n	ad1e <socketInit+0xa>
    ad40:	2000021d 	.word	0x2000021d
    ad44:	20000468 	.word	0x20000468
    ad48:	00008535 	.word	0x00008535
    ad4c:	0000aa09 	.word	0x0000aa09
    ad50:	00008d65 	.word	0x00008d65
    ad54:	2000021e 	.word	0x2000021e

0000ad58 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    ad58:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    ad5a:	22b0      	movs	r2, #176	; 0xb0
    ad5c:	2100      	movs	r1, #0
    ad5e:	4807      	ldr	r0, [pc, #28]	; (ad7c <socketDeinit+0x24>)
    ad60:	4b07      	ldr	r3, [pc, #28]	; (ad80 <socketDeinit+0x28>)
    ad62:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    ad64:	2100      	movs	r1, #0
    ad66:	2002      	movs	r0, #2
    ad68:	4b06      	ldr	r3, [pc, #24]	; (ad84 <socketDeinit+0x2c>)
    ad6a:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    ad6c:	2300      	movs	r3, #0
    ad6e:	4a06      	ldr	r2, [pc, #24]	; (ad88 <socketDeinit+0x30>)
    ad70:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    ad72:	4a06      	ldr	r2, [pc, #24]	; (ad8c <socketDeinit+0x34>)
    ad74:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    ad76:	4a06      	ldr	r2, [pc, #24]	; (ad90 <socketDeinit+0x38>)
    ad78:	7013      	strb	r3, [r2, #0]
}
    ad7a:	bd10      	pop	{r4, pc}
    ad7c:	20000468 	.word	0x20000468
    ad80:	00008535 	.word	0x00008535
    ad84:	00008d65 	.word	0x00008d65
    ad88:	20000518 	.word	0x20000518
    ad8c:	20000520 	.word	0x20000520
    ad90:	2000021d 	.word	0x2000021d

0000ad94 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    ad94:	4b02      	ldr	r3, [pc, #8]	; (ada0 <registerSocketCallback+0xc>)
    ad96:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    ad98:	4b02      	ldr	r3, [pc, #8]	; (ada4 <registerSocketCallback+0x10>)
    ad9a:	6019      	str	r1, [r3, #0]
}
    ad9c:	4770      	bx	lr
    ad9e:	46c0      	nop			; (mov r8, r8)
    ada0:	20000518 	.word	0x20000518
    ada4:	20000520 	.word	0x20000520

0000ada8 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    ada8:	b5f0      	push	{r4, r5, r6, r7, lr}
    adaa:	46d6      	mov	lr, sl
    adac:	4647      	mov	r7, r8
    adae:	b580      	push	{r7, lr}
    adb0:	b089      	sub	sp, #36	; 0x24
    adb2:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    adb4:	2802      	cmp	r0, #2
    adb6:	d000      	beq.n	adba <socket+0x12>
    adb8:	e09c      	b.n	aef4 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    adba:	2901      	cmp	r1, #1
    adbc:	d00a      	beq.n	add4 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    adbe:	2902      	cmp	r1, #2
    adc0:	d100      	bne.n	adc4 <socket+0x1c>
    adc2:	e070      	b.n	aea6 <socket+0xfe>
	SOCKET					sock = -1;
    adc4:	2501      	movs	r5, #1
    adc6:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    adc8:	0028      	movs	r0, r5
    adca:	b009      	add	sp, #36	; 0x24
    adcc:	bc0c      	pop	{r2, r3}
    adce:	4690      	mov	r8, r2
    add0:	469a      	mov	sl, r3
    add2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    add4:	4c49      	ldr	r4, [pc, #292]	; (aefc <socket+0x154>)
    add6:	7827      	ldrb	r7, [r4, #0]
    add8:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    adda:	7826      	ldrb	r6, [r4, #0]
    addc:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    adde:	7820      	ldrb	r0, [r4, #0]
    ade0:	3001      	adds	r0, #1
    ade2:	3106      	adds	r1, #6
    ade4:	4b46      	ldr	r3, [pc, #280]	; (af00 <socket+0x158>)
    ade6:	4798      	blx	r3
    ade8:	b2c9      	uxtb	r1, r1
    adea:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    adec:	0132      	lsls	r2, r6, #4
    adee:	4b45      	ldr	r3, [pc, #276]	; (af04 <socket+0x15c>)
    adf0:	189b      	adds	r3, r3, r2
    adf2:	7a9b      	ldrb	r3, [r3, #10]
    adf4:	2506      	movs	r5, #6
    adf6:	2b00      	cmp	r3, #0
    adf8:	d018      	beq.n	ae2c <socket+0x84>
				u8SockID	= u8NextTcpSock;
    adfa:	4e40      	ldr	r6, [pc, #256]	; (aefc <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    adfc:	4b40      	ldr	r3, [pc, #256]	; (af00 <socket+0x158>)
    adfe:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    ae00:	4b40      	ldr	r3, [pc, #256]	; (af04 <socket+0x15c>)
    ae02:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    ae04:	7837      	ldrb	r7, [r6, #0]
    ae06:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    ae08:	7834      	ldrb	r4, [r6, #0]
    ae0a:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    ae0c:	7830      	ldrb	r0, [r6, #0]
    ae0e:	3001      	adds	r0, #1
    ae10:	2107      	movs	r1, #7
    ae12:	47d0      	blx	sl
    ae14:	b2c9      	uxtb	r1, r1
    ae16:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    ae18:	0123      	lsls	r3, r4, #4
    ae1a:	4443      	add	r3, r8
    ae1c:	7a9b      	ldrb	r3, [r3, #10]
    ae1e:	2b00      	cmp	r3, #0
    ae20:	d007      	beq.n	ae32 <socket+0x8a>
    ae22:	3d01      	subs	r5, #1
    ae24:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    ae26:	2d00      	cmp	r5, #0
    ae28:	d1ec      	bne.n	ae04 <socket+0x5c>
    ae2a:	e7cb      	b.n	adc4 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    ae2c:	4b35      	ldr	r3, [pc, #212]	; (af04 <socket+0x15c>)
    ae2e:	18d4      	adds	r4, r2, r3
    ae30:	e002      	b.n	ae38 <socket+0x90>
    ae32:	0124      	lsls	r4, r4, #4
    ae34:	4b33      	ldr	r3, [pc, #204]	; (af04 <socket+0x15c>)
    ae36:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    ae38:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    ae3a:	2d00      	cmp	r5, #0
    ae3c:	dbc4      	blt.n	adc8 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    ae3e:	2210      	movs	r2, #16
    ae40:	2100      	movs	r1, #0
    ae42:	0020      	movs	r0, r4
    ae44:	4b30      	ldr	r3, [pc, #192]	; (af08 <socket+0x160>)
    ae46:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    ae48:	2301      	movs	r3, #1
    ae4a:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    ae4c:	4a2f      	ldr	r2, [pc, #188]	; (af0c <socket+0x164>)
    ae4e:	8813      	ldrh	r3, [r2, #0]
    ae50:	3301      	adds	r3, #1
    ae52:	b29b      	uxth	r3, r3
    ae54:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    ae56:	8813      	ldrh	r3, [r2, #0]
    ae58:	b29b      	uxth	r3, r3
    ae5a:	2b00      	cmp	r3, #0
    ae5c:	d103      	bne.n	ae66 <socket+0xbe>
				++gu16SessionID;
    ae5e:	8813      	ldrh	r3, [r2, #0]
    ae60:	3301      	adds	r3, #1
    ae62:	b29b      	uxth	r3, r3
    ae64:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    ae66:	4e29      	ldr	r6, [pc, #164]	; (af0c <socket+0x164>)
    ae68:	8833      	ldrh	r3, [r6, #0]
    ae6a:	b29b      	uxth	r3, r3
    ae6c:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    ae6e:	4828      	ldr	r0, [pc, #160]	; (af10 <socket+0x168>)
    ae70:	4f28      	ldr	r7, [pc, #160]	; (af14 <socket+0x16c>)
    ae72:	47b8      	blx	r7
    ae74:	8832      	ldrh	r2, [r6, #0]
    ae76:	b292      	uxth	r2, r2
    ae78:	0029      	movs	r1, r5
    ae7a:	4827      	ldr	r0, [pc, #156]	; (af18 <socket+0x170>)
    ae7c:	47b8      	blx	r7
    ae7e:	200d      	movs	r0, #13
    ae80:	4b26      	ldr	r3, [pc, #152]	; (af1c <socket+0x174>)
    ae82:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    ae84:	9b05      	ldr	r3, [sp, #20]
    ae86:	07db      	lsls	r3, r3, #31
    ae88:	d59e      	bpl.n	adc8 <socket+0x20>
				strSSLCreate.sslSock = sock;
    ae8a:	aa07      	add	r2, sp, #28
    ae8c:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    ae8e:	2321      	movs	r3, #33	; 0x21
    ae90:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    ae92:	2300      	movs	r3, #0
    ae94:	9302      	str	r3, [sp, #8]
    ae96:	9301      	str	r3, [sp, #4]
    ae98:	9300      	str	r3, [sp, #0]
    ae9a:	3304      	adds	r3, #4
    ae9c:	2150      	movs	r1, #80	; 0x50
    ae9e:	2002      	movs	r0, #2
    aea0:	4c1f      	ldr	r4, [pc, #124]	; (af20 <socket+0x178>)
    aea2:	47a0      	blx	r4
    aea4:	e790      	b.n	adc8 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    aea6:	4b1f      	ldr	r3, [pc, #124]	; (af24 <socket+0x17c>)
    aea8:	781d      	ldrb	r5, [r3, #0]
    aeaa:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    aeac:	781c      	ldrb	r4, [r3, #0]
    aeae:	0124      	lsls	r4, r4, #4
    aeb0:	4a1d      	ldr	r2, [pc, #116]	; (af28 <socket+0x180>)
    aeb2:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    aeb4:	7819      	ldrb	r1, [r3, #0]
    aeb6:	3101      	adds	r1, #1
    aeb8:	2203      	movs	r2, #3
    aeba:	400a      	ands	r2, r1
    aebc:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    aebe:	7aa3      	ldrb	r3, [r4, #10]
    aec0:	2b00      	cmp	r3, #0
    aec2:	d014      	beq.n	aeee <socket+0x146>
    aec4:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    aec6:	4917      	ldr	r1, [pc, #92]	; (af24 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    aec8:	4f17      	ldr	r7, [pc, #92]	; (af28 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    aeca:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    aecc:	780d      	ldrb	r5, [r1, #0]
    aece:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    aed0:	780c      	ldrb	r4, [r1, #0]
    aed2:	0124      	lsls	r4, r4, #4
    aed4:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    aed6:	780b      	ldrb	r3, [r1, #0]
    aed8:	3301      	adds	r3, #1
    aeda:	4003      	ands	r3, r0
    aedc:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    aede:	7aa3      	ldrb	r3, [r4, #10]
    aee0:	2b00      	cmp	r3, #0
    aee2:	d004      	beq.n	aeee <socket+0x146>
    aee4:	3a01      	subs	r2, #1
    aee6:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    aee8:	2a00      	cmp	r2, #0
    aeea:	d1ef      	bne.n	aecc <socket+0x124>
    aeec:	e76a      	b.n	adc4 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    aeee:	3507      	adds	r5, #7
    aef0:	b26d      	sxtb	r5, r5
					break;
    aef2:	e7a2      	b.n	ae3a <socket+0x92>
	SOCKET					sock = -1;
    aef4:	2501      	movs	r5, #1
    aef6:	426d      	negs	r5, r5
    aef8:	e766      	b.n	adc8 <socket+0x20>
    aefa:	46c0      	nop			; (mov r8, r8)
    aefc:	20000220 	.word	0x20000220
    af00:	000125a1 	.word	0x000125a1
    af04:	20000468 	.word	0x20000468
    af08:	00008535 	.word	0x00008535
    af0c:	2000021e 	.word	0x2000021e
    af10:	00015998 	.word	0x00015998
    af14:	000140dd 	.word	0x000140dd
    af18:	00016428 	.word	0x00016428
    af1c:	00014111 	.word	0x00014111
    af20:	0000866d 	.word	0x0000866d
    af24:	20000221 	.word	0x20000221
    af28:	200004d8 	.word	0x200004d8

0000af2c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    af2c:	b570      	push	{r4, r5, r6, lr}
    af2e:	b088      	sub	sp, #32
    af30:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    af32:	db30      	blt.n	af96 <connect+0x6a>
    af34:	2900      	cmp	r1, #0
    af36:	d031      	beq.n	af9c <connect+0x70>
    af38:	0100      	lsls	r0, r0, #4
    af3a:	4b1d      	ldr	r3, [pc, #116]	; (afb0 <connect+0x84>)
    af3c:	181b      	adds	r3, r3, r0
    af3e:	7a9b      	ldrb	r3, [r3, #10]
    af40:	2b01      	cmp	r3, #1
    af42:	d12e      	bne.n	afa2 <connect+0x76>
    af44:	2a00      	cmp	r2, #0
    af46:	d02f      	beq.n	afa8 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    af48:	4b19      	ldr	r3, [pc, #100]	; (afb0 <connect+0x84>)
    af4a:	181b      	adds	r3, r3, r0
    af4c:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    af4e:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    af50:	07db      	lsls	r3, r3, #31
    af52:	d505      	bpl.n	af60 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    af54:	4b16      	ldr	r3, [pc, #88]	; (afb0 <connect+0x84>)
    af56:	181b      	adds	r3, r3, r0
    af58:	7ada      	ldrb	r2, [r3, #11]
    af5a:	ab05      	add	r3, sp, #20
    af5c:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    af5e:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    af60:	ad05      	add	r5, sp, #20
    af62:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    af64:	2208      	movs	r2, #8
    af66:	0028      	movs	r0, r5
    af68:	4b12      	ldr	r3, [pc, #72]	; (afb4 <connect+0x88>)
    af6a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    af6c:	0124      	lsls	r4, r4, #4
    af6e:	4b10      	ldr	r3, [pc, #64]	; (afb0 <connect+0x84>)
    af70:	191c      	adds	r4, r3, r4
    af72:	88e3      	ldrh	r3, [r4, #6]
    af74:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    af76:	2300      	movs	r3, #0
    af78:	9302      	str	r3, [sp, #8]
    af7a:	9301      	str	r3, [sp, #4]
    af7c:	9300      	str	r3, [sp, #0]
    af7e:	330c      	adds	r3, #12
    af80:	002a      	movs	r2, r5
    af82:	0031      	movs	r1, r6
    af84:	2002      	movs	r0, #2
    af86:	4c0c      	ldr	r4, [pc, #48]	; (afb8 <connect+0x8c>)
    af88:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    af8a:	2800      	cmp	r0, #0
    af8c:	d001      	beq.n	af92 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    af8e:	2009      	movs	r0, #9
    af90:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    af92:	b008      	add	sp, #32
    af94:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    af96:	2006      	movs	r0, #6
    af98:	4240      	negs	r0, r0
    af9a:	e7fa      	b.n	af92 <connect+0x66>
    af9c:	2006      	movs	r0, #6
    af9e:	4240      	negs	r0, r0
    afa0:	e7f7      	b.n	af92 <connect+0x66>
    afa2:	2006      	movs	r0, #6
    afa4:	4240      	negs	r0, r0
    afa6:	e7f4      	b.n	af92 <connect+0x66>
    afa8:	2006      	movs	r0, #6
    afaa:	4240      	negs	r0, r0
    afac:	e7f1      	b.n	af92 <connect+0x66>
    afae:	46c0      	nop			; (mov r8, r8)
    afb0:	20000468 	.word	0x20000468
    afb4:	00008521 	.word	0x00008521
    afb8:	0000866d 	.word	0x0000866d

0000afbc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    afbc:	b530      	push	{r4, r5, lr}
    afbe:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    afc0:	2800      	cmp	r0, #0
    afc2:	db36      	blt.n	b032 <send+0x76>
    afc4:	2900      	cmp	r1, #0
    afc6:	d037      	beq.n	b038 <send+0x7c>
    afc8:	23af      	movs	r3, #175	; 0xaf
    afca:	00db      	lsls	r3, r3, #3
    afcc:	429a      	cmp	r2, r3
    afce:	d836      	bhi.n	b03e <send+0x82>
    afd0:	0104      	lsls	r4, r0, #4
    afd2:	4b1e      	ldr	r3, [pc, #120]	; (b04c <send+0x90>)
    afd4:	191b      	adds	r3, r3, r4
    afd6:	7a9b      	ldrb	r3, [r3, #10]
    afd8:	2b01      	cmp	r3, #1
    afda:	d133      	bne.n	b044 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    afdc:	ab04      	add	r3, sp, #16
    afde:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    afe0:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    afe2:	0025      	movs	r5, r4
    afe4:	4c19      	ldr	r4, [pc, #100]	; (b04c <send+0x90>)
    afe6:	1964      	adds	r4, r4, r5
    afe8:	88e4      	ldrh	r4, [r4, #6]
    afea:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    afec:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    afee:	2806      	cmp	r0, #6
    aff0:	dd00      	ble.n	aff4 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    aff2:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    aff4:	0104      	lsls	r4, r0, #4
    aff6:	4b15      	ldr	r3, [pc, #84]	; (b04c <send+0x90>)
    aff8:	191b      	adds	r3, r3, r4
    affa:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    affc:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    affe:	07e4      	lsls	r4, r4, #31
    b000:	d505      	bpl.n	b00e <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    b002:	0100      	lsls	r0, r0, #4
    b004:	4b11      	ldr	r3, [pc, #68]	; (b04c <send+0x90>)
    b006:	1818      	adds	r0, r3, r0
    b008:	8905      	ldrh	r5, [r0, #8]
    b00a:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    b00c:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    b00e:	2080      	movs	r0, #128	; 0x80
    b010:	4318      	orrs	r0, r3
    b012:	9502      	str	r5, [sp, #8]
    b014:	9201      	str	r2, [sp, #4]
    b016:	9100      	str	r1, [sp, #0]
    b018:	2310      	movs	r3, #16
    b01a:	aa04      	add	r2, sp, #16
    b01c:	0001      	movs	r1, r0
    b01e:	2002      	movs	r0, #2
    b020:	4c0b      	ldr	r4, [pc, #44]	; (b050 <send+0x94>)
    b022:	47a0      	blx	r4
    b024:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    b026:	2800      	cmp	r0, #0
    b028:	d000      	beq.n	b02c <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    b02a:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    b02c:	0018      	movs	r0, r3
    b02e:	b009      	add	sp, #36	; 0x24
    b030:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    b032:	2306      	movs	r3, #6
    b034:	425b      	negs	r3, r3
    b036:	e7f9      	b.n	b02c <send+0x70>
    b038:	2306      	movs	r3, #6
    b03a:	425b      	negs	r3, r3
    b03c:	e7f6      	b.n	b02c <send+0x70>
    b03e:	2306      	movs	r3, #6
    b040:	425b      	negs	r3, r3
    b042:	e7f3      	b.n	b02c <send+0x70>
    b044:	2306      	movs	r3, #6
    b046:	425b      	negs	r3, r3
    b048:	e7f0      	b.n	b02c <send+0x70>
    b04a:	46c0      	nop			; (mov r8, r8)
    b04c:	20000468 	.word	0x20000468
    b050:	0000866d 	.word	0x0000866d

0000b054 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    b054:	b530      	push	{r4, r5, lr}
    b056:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    b058:	2800      	cmp	r0, #0
    b05a:	db34      	blt.n	b0c6 <recv+0x72>
    b05c:	2900      	cmp	r1, #0
    b05e:	d035      	beq.n	b0cc <recv+0x78>
    b060:	2a00      	cmp	r2, #0
    b062:	d036      	beq.n	b0d2 <recv+0x7e>
    b064:	0105      	lsls	r5, r0, #4
    b066:	4c1e      	ldr	r4, [pc, #120]	; (b0e0 <recv+0x8c>)
    b068:	1964      	adds	r4, r4, r5
    b06a:	7aa4      	ldrb	r4, [r4, #10]
    b06c:	2c01      	cmp	r4, #1
    b06e:	d133      	bne.n	b0d8 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    b070:	4c1b      	ldr	r4, [pc, #108]	; (b0e0 <recv+0x8c>)
    b072:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    b074:	1964      	adds	r4, r4, r5
    b076:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    b078:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    b07a:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    b07c:	2900      	cmp	r1, #0
    b07e:	d11d      	bne.n	b0bc <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    b080:	2101      	movs	r1, #1
    b082:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    b084:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    b086:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    b088:	07d2      	lsls	r2, r2, #31
    b08a:	d500      	bpl.n	b08e <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    b08c:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    b08e:	2b00      	cmp	r3, #0
    b090:	d117      	bne.n	b0c2 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    b092:	3b01      	subs	r3, #1
    b094:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    b096:	aa04      	add	r2, sp, #16
    b098:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    b09a:	0100      	lsls	r0, r0, #4
    b09c:	4b10      	ldr	r3, [pc, #64]	; (b0e0 <recv+0x8c>)
    b09e:	1818      	adds	r0, r3, r0
    b0a0:	88c3      	ldrh	r3, [r0, #6]
    b0a2:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    b0a4:	2300      	movs	r3, #0
    b0a6:	9302      	str	r3, [sp, #8]
    b0a8:	9301      	str	r3, [sp, #4]
    b0aa:	9300      	str	r3, [sp, #0]
    b0ac:	3308      	adds	r3, #8
    b0ae:	2002      	movs	r0, #2
    b0b0:	4c0c      	ldr	r4, [pc, #48]	; (b0e4 <recv+0x90>)
    b0b2:	47a0      	blx	r4
    b0b4:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    b0b6:	2800      	cmp	r0, #0
    b0b8:	d000      	beq.n	b0bc <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    b0ba:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    b0bc:	0010      	movs	r0, r2
    b0be:	b007      	add	sp, #28
    b0c0:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    b0c2:	9304      	str	r3, [sp, #16]
    b0c4:	e7e7      	b.n	b096 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    b0c6:	2206      	movs	r2, #6
    b0c8:	4252      	negs	r2, r2
    b0ca:	e7f7      	b.n	b0bc <recv+0x68>
    b0cc:	2206      	movs	r2, #6
    b0ce:	4252      	negs	r2, r2
    b0d0:	e7f4      	b.n	b0bc <recv+0x68>
    b0d2:	2206      	movs	r2, #6
    b0d4:	4252      	negs	r2, r2
    b0d6:	e7f1      	b.n	b0bc <recv+0x68>
    b0d8:	2206      	movs	r2, #6
    b0da:	4252      	negs	r2, r2
    b0dc:	e7ee      	b.n	b0bc <recv+0x68>
    b0de:	46c0      	nop			; (mov r8, r8)
    b0e0:	20000468 	.word	0x20000468
    b0e4:	0000866d 	.word	0x0000866d

0000b0e8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    b0e8:	b530      	push	{r4, r5, lr}
    b0ea:	b087      	sub	sp, #28
    b0ec:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    b0ee:	481e      	ldr	r0, [pc, #120]	; (b168 <close+0x80>)
    b0f0:	4d1e      	ldr	r5, [pc, #120]	; (b16c <close+0x84>)
    b0f2:	47a8      	blx	r5
    b0f4:	0021      	movs	r1, r4
    b0f6:	481e      	ldr	r0, [pc, #120]	; (b170 <close+0x88>)
    b0f8:	47a8      	blx	r5
    b0fa:	200d      	movs	r0, #13
    b0fc:	4b1d      	ldr	r3, [pc, #116]	; (b174 <close+0x8c>)
    b0fe:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    b100:	2c00      	cmp	r4, #0
    b102:	db2a      	blt.n	b15a <close+0x72>
    b104:	0122      	lsls	r2, r4, #4
    b106:	4b1c      	ldr	r3, [pc, #112]	; (b178 <close+0x90>)
    b108:	189b      	adds	r3, r3, r2
    b10a:	7a9b      	ldrb	r3, [r3, #10]
    b10c:	2b01      	cmp	r3, #1
    b10e:	d127      	bne.n	b160 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    b110:	a905      	add	r1, sp, #20
    b112:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    b114:	4b18      	ldr	r3, [pc, #96]	; (b178 <close+0x90>)
    b116:	189b      	adds	r3, r3, r2
    b118:	88da      	ldrh	r2, [r3, #6]
    b11a:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    b11c:	2200      	movs	r2, #0
    b11e:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    b120:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    b122:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    b124:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    b126:	07db      	lsls	r3, r3, #31
    b128:	d500      	bpl.n	b12c <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    b12a:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    b12c:	2300      	movs	r3, #0
    b12e:	9302      	str	r3, [sp, #8]
    b130:	9301      	str	r3, [sp, #4]
    b132:	9300      	str	r3, [sp, #0]
    b134:	3304      	adds	r3, #4
    b136:	aa05      	add	r2, sp, #20
    b138:	2002      	movs	r0, #2
    b13a:	4d10      	ldr	r5, [pc, #64]	; (b17c <close+0x94>)
    b13c:	47a8      	blx	r5
    b13e:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    b140:	d001      	beq.n	b146 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    b142:	2509      	movs	r5, #9
    b144:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    b146:	0124      	lsls	r4, r4, #4
    b148:	480b      	ldr	r0, [pc, #44]	; (b178 <close+0x90>)
    b14a:	1820      	adds	r0, r4, r0
    b14c:	2210      	movs	r2, #16
    b14e:	2100      	movs	r1, #0
    b150:	4b0b      	ldr	r3, [pc, #44]	; (b180 <close+0x98>)
    b152:	4798      	blx	r3
	}
	return s8Ret;
}
    b154:	0028      	movs	r0, r5
    b156:	b007      	add	sp, #28
    b158:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    b15a:	2506      	movs	r5, #6
    b15c:	426d      	negs	r5, r5
    b15e:	e7f9      	b.n	b154 <close+0x6c>
    b160:	2506      	movs	r5, #6
    b162:	426d      	negs	r5, r5
    b164:	e7f6      	b.n	b154 <close+0x6c>
    b166:	46c0      	nop			; (mov r8, r8)
    b168:	00015998 	.word	0x00015998
    b16c:	000140dd 	.word	0x000140dd
    b170:	00016410 	.word	0x00016410
    b174:	00014111 	.word	0x00014111
    b178:	20000468 	.word	0x20000468
    b17c:	0000866d 	.word	0x0000866d
    b180:	00008535 	.word	0x00008535

0000b184 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    b184:	b570      	push	{r4, r5, r6, lr}
    b186:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    b188:	2300      	movs	r3, #0
    b18a:	9301      	str	r3, [sp, #4]
    b18c:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    b18e:	2100      	movs	r1, #0
    b190:	7802      	ldrb	r2, [r0, #0]
    b192:	1c44      	adds	r4, r0, #1
    b194:	3005      	adds	r0, #5
    b196:	000b      	movs	r3, r1
    b198:	e009      	b.n	b1ae <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    b19a:	009d      	lsls	r5, r3, #2
    b19c:	195b      	adds	r3, r3, r5
    b19e:	005b      	lsls	r3, r3, #1
    b1a0:	189b      	adds	r3, r3, r2
    b1a2:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    b1a4:	0022      	movs	r2, r4
    b1a6:	3401      	adds	r4, #1
			if(j > 4)
    b1a8:	42a0      	cmp	r0, r4
    b1aa:	d00a      	beq.n	b1c2 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    b1ac:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    b1ae:	2a2e      	cmp	r2, #46	; 0x2e
    b1b0:	d00a      	beq.n	b1c8 <nmi_inet_addr+0x44>
    b1b2:	2a00      	cmp	r2, #0
    b1b4:	d00c      	beq.n	b1d0 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    b1b6:	3a30      	subs	r2, #48	; 0x30
    b1b8:	b2d2      	uxtb	r2, r2
    b1ba:	2a09      	cmp	r2, #9
    b1bc:	d9ed      	bls.n	b19a <nmi_inet_addr+0x16>
				return 0;
    b1be:	2000      	movs	r0, #0
    b1c0:	e000      	b.n	b1c4 <nmi_inet_addr+0x40>
				return 0;
    b1c2:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    b1c4:	b002      	add	sp, #8
    b1c6:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    b1c8:	466a      	mov	r2, sp
    b1ca:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    b1cc:	0020      	movs	r0, r4
    b1ce:	e002      	b.n	b1d6 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    b1d0:	466a      	mov	r2, sp
    b1d2:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    b1d4:	0020      	movs	r0, r4
    b1d6:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    b1d8:	2e04      	cmp	r6, #4
    b1da:	d1d9      	bne.n	b190 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    b1dc:	2204      	movs	r2, #4
    b1de:	4669      	mov	r1, sp
    b1e0:	a801      	add	r0, sp, #4
    b1e2:	4b02      	ldr	r3, [pc, #8]	; (b1ec <nmi_inet_addr+0x68>)
    b1e4:	4798      	blx	r3
	return u32IP;
    b1e6:	9801      	ldr	r0, [sp, #4]
    b1e8:	e7ec      	b.n	b1c4 <nmi_inet_addr+0x40>
    b1ea:	46c0      	nop			; (mov r8, r8)
    b1ec:	00008521 	.word	0x00008521

0000b1f0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    b1f0:	b510      	push	{r4, lr}
    b1f2:	b084      	sub	sp, #16
    b1f4:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    b1f6:	4b0b      	ldr	r3, [pc, #44]	; (b224 <gethostbyname+0x34>)
    b1f8:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    b1fa:	b2c3      	uxtb	r3, r0
    b1fc:	2b40      	cmp	r3, #64	; 0x40
    b1fe:	d80d      	bhi.n	b21c <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    b200:	23ff      	movs	r3, #255	; 0xff
    b202:	4003      	ands	r3, r0
    b204:	3301      	adds	r3, #1
    b206:	2200      	movs	r2, #0
    b208:	9202      	str	r2, [sp, #8]
    b20a:	9201      	str	r2, [sp, #4]
    b20c:	9200      	str	r2, [sp, #0]
    b20e:	0022      	movs	r2, r4
    b210:	214a      	movs	r1, #74	; 0x4a
    b212:	2002      	movs	r0, #2
    b214:	4c04      	ldr	r4, [pc, #16]	; (b228 <gethostbyname+0x38>)
    b216:	47a0      	blx	r4
	}
	return s8Err;
}
    b218:	b004      	add	sp, #16
    b21a:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    b21c:	2006      	movs	r0, #6
    b21e:	4240      	negs	r0, r0
    b220:	e7fa      	b.n	b218 <gethostbyname+0x28>
    b222:	46c0      	nop			; (mov r8, r8)
    b224:	00008545 	.word	0x00008545
    b228:	0000866d 	.word	0x0000866d

0000b22c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    b22c:	b570      	push	{r4, r5, r6, lr}
    b22e:	b082      	sub	sp, #8
    b230:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    b232:	4b2a      	ldr	r3, [pc, #168]	; (b2dc <spi_flash_enable+0xb0>)
    b234:	4798      	blx	r3
    b236:	0500      	lsls	r0, r0, #20
    b238:	0d00      	lsrs	r0, r0, #20
    b23a:	4b29      	ldr	r3, [pc, #164]	; (b2e0 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    b23c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    b23e:	4298      	cmp	r0, r3
    b240:	d802      	bhi.n	b248 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    b242:	0028      	movs	r0, r5
    b244:	b002      	add	sp, #8
    b246:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    b248:	a901      	add	r1, sp, #4
    b24a:	4826      	ldr	r0, [pc, #152]	; (b2e4 <spi_flash_enable+0xb8>)
    b24c:	4b26      	ldr	r3, [pc, #152]	; (b2e8 <spi_flash_enable+0xbc>)
    b24e:	4798      	blx	r3
    b250:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    b252:	d1f6      	bne.n	b242 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    b254:	4b25      	ldr	r3, [pc, #148]	; (b2ec <spi_flash_enable+0xc0>)
    b256:	9a01      	ldr	r2, [sp, #4]
    b258:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    b25a:	4925      	ldr	r1, [pc, #148]	; (b2f0 <spi_flash_enable+0xc4>)
    b25c:	4319      	orrs	r1, r3
    b25e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    b260:	4820      	ldr	r0, [pc, #128]	; (b2e4 <spi_flash_enable+0xb8>)
    b262:	4b24      	ldr	r3, [pc, #144]	; (b2f4 <spi_flash_enable+0xc8>)
    b264:	4798      	blx	r3
		if(enable) {
    b266:	2c00      	cmp	r4, #0
    b268:	d020      	beq.n	b2ac <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    b26a:	2100      	movs	r1, #0
    b26c:	4822      	ldr	r0, [pc, #136]	; (b2f8 <spi_flash_enable+0xcc>)
    b26e:	4c21      	ldr	r4, [pc, #132]	; (b2f4 <spi_flash_enable+0xc8>)
    b270:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    b272:	21ab      	movs	r1, #171	; 0xab
    b274:	4821      	ldr	r0, [pc, #132]	; (b2fc <spi_flash_enable+0xd0>)
    b276:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    b278:	2101      	movs	r1, #1
    b27a:	4821      	ldr	r0, [pc, #132]	; (b300 <spi_flash_enable+0xd4>)
    b27c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    b27e:	2100      	movs	r1, #0
    b280:	4820      	ldr	r0, [pc, #128]	; (b304 <spi_flash_enable+0xd8>)
    b282:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    b284:	2181      	movs	r1, #129	; 0x81
    b286:	4820      	ldr	r0, [pc, #128]	; (b308 <spi_flash_enable+0xdc>)
    b288:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    b28a:	4e20      	ldr	r6, [pc, #128]	; (b30c <spi_flash_enable+0xe0>)
    b28c:	4c20      	ldr	r4, [pc, #128]	; (b310 <spi_flash_enable+0xe4>)
    b28e:	0030      	movs	r0, r6
    b290:	47a0      	blx	r4
    b292:	2801      	cmp	r0, #1
    b294:	d1fb      	bne.n	b28e <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    b296:	4b15      	ldr	r3, [pc, #84]	; (b2ec <spi_flash_enable+0xc0>)
    b298:	9a01      	ldr	r2, [sp, #4]
    b29a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    b29c:	2180      	movs	r1, #128	; 0x80
    b29e:	0249      	lsls	r1, r1, #9
    b2a0:	4319      	orrs	r1, r3
    b2a2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    b2a4:	480f      	ldr	r0, [pc, #60]	; (b2e4 <spi_flash_enable+0xb8>)
    b2a6:	4b13      	ldr	r3, [pc, #76]	; (b2f4 <spi_flash_enable+0xc8>)
    b2a8:	4798      	blx	r3
    b2aa:	e7ca      	b.n	b242 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    b2ac:	2100      	movs	r1, #0
    b2ae:	4812      	ldr	r0, [pc, #72]	; (b2f8 <spi_flash_enable+0xcc>)
    b2b0:	4c10      	ldr	r4, [pc, #64]	; (b2f4 <spi_flash_enable+0xc8>)
    b2b2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    b2b4:	21b9      	movs	r1, #185	; 0xb9
    b2b6:	4811      	ldr	r0, [pc, #68]	; (b2fc <spi_flash_enable+0xd0>)
    b2b8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    b2ba:	2101      	movs	r1, #1
    b2bc:	4810      	ldr	r0, [pc, #64]	; (b300 <spi_flash_enable+0xd4>)
    b2be:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    b2c0:	2100      	movs	r1, #0
    b2c2:	4810      	ldr	r0, [pc, #64]	; (b304 <spi_flash_enable+0xd8>)
    b2c4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    b2c6:	2181      	movs	r1, #129	; 0x81
    b2c8:	480f      	ldr	r0, [pc, #60]	; (b308 <spi_flash_enable+0xdc>)
    b2ca:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    b2cc:	4e0f      	ldr	r6, [pc, #60]	; (b30c <spi_flash_enable+0xe0>)
    b2ce:	4c10      	ldr	r4, [pc, #64]	; (b310 <spi_flash_enable+0xe4>)
    b2d0:	0030      	movs	r0, r6
    b2d2:	47a0      	blx	r4
    b2d4:	2801      	cmp	r0, #1
    b2d6:	d1fb      	bne.n	b2d0 <spi_flash_enable+0xa4>
    b2d8:	e7dd      	b.n	b296 <spi_flash_enable+0x6a>
    b2da:	46c0      	nop			; (mov r8, r8)
    b2dc:	0000956d 	.word	0x0000956d
    b2e0:	0000039f 	.word	0x0000039f
    b2e4:	00001410 	.word	0x00001410
    b2e8:	000099bd 	.word	0x000099bd
    b2ec:	f8888fff 	.word	0xf8888fff
    b2f0:	01111000 	.word	0x01111000
    b2f4:	000099c9 	.word	0x000099c9
    b2f8:	00010208 	.word	0x00010208
    b2fc:	0001020c 	.word	0x0001020c
    b300:	00010214 	.word	0x00010214
    b304:	0001021c 	.word	0x0001021c
    b308:	00010204 	.word	0x00010204
    b30c:	00010218 	.word	0x00010218
    b310:	000099b1 	.word	0x000099b1

0000b314 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    b314:	b5f0      	push	{r4, r5, r6, r7, lr}
    b316:	46c6      	mov	lr, r8
    b318:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    b31a:	2303      	movs	r3, #3
    b31c:	0007      	movs	r7, r0
    b31e:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    b320:	6813      	ldr	r3, [r2, #0]
    b322:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    b324:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    b326:	2903      	cmp	r1, #3
    b328:	d902      	bls.n	b330 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    b32a:	4244      	negs	r4, r0
    b32c:	2003      	movs	r0, #3
    b32e:	4004      	ands	r4, r0
	}

	if (temp_length) {
    b330:	2c00      	cmp	r4, #0
    b332:	d016      	beq.n	b362 <crc32_recalculate+0x4e>
		length -= temp_length;
    b334:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    b336:	1d3e      	adds	r6, r7, #4
    b338:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    b33a:	00e0      	lsls	r0, r4, #3
    b33c:	4240      	negs	r0, r0
    b33e:	3020      	adds	r0, #32
    b340:	40c5      	lsrs	r5, r0
	crc ^= data;
    b342:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    b344:	00e0      	lsls	r0, r4, #3
    b346:	d019      	beq.n	b37c <crc32_recalculate+0x68>
		if (crc & 1) {
    b348:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b34a:	4d27      	ldr	r5, [pc, #156]	; (b3e8 <crc32_recalculate+0xd4>)
    b34c:	e003      	b.n	b356 <crc32_recalculate+0x42>
			crc >>= 1;
    b34e:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    b350:	3801      	subs	r0, #1
    b352:	2800      	cmp	r0, #0
    b354:	d004      	beq.n	b360 <crc32_recalculate+0x4c>
		if (crc & 1) {
    b356:	421c      	tst	r4, r3
    b358:	d0f9      	beq.n	b34e <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b35a:	085b      	lsrs	r3, r3, #1
    b35c:	406b      	eors	r3, r5
    b35e:	e7f7      	b.n	b350 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    b360:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    b362:	2003      	movs	r0, #3
    b364:	000c      	movs	r4, r1
    b366:	4384      	bics	r4, r0

	if (temp_length) {
    b368:	d01e      	beq.n	b3a8 <crc32_recalculate+0x94>
		length -= temp_length;
    b36a:	1b08      	subs	r0, r1, r4
    b36c:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    b36e:	0889      	lsrs	r1, r1, #2
    b370:	4688      	mov	r8, r1
    b372:	003e      	movs	r6, r7
    b374:	000d      	movs	r5, r1
		if (crc & 1) {
    b376:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b378:	4c1b      	ldr	r4, [pc, #108]	; (b3e8 <crc32_recalculate+0xd4>)

		while (temp_length--) {
    b37a:	e00b      	b.n	b394 <crc32_recalculate+0x80>
		word = *(word_ptr++);
    b37c:	0037      	movs	r7, r6
    b37e:	e7f0      	b.n	b362 <crc32_recalculate+0x4e>
			crc >>= 1;
    b380:	085b      	lsrs	r3, r3, #1
    b382:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    b384:	2900      	cmp	r1, #0
    b386:	d004      	beq.n	b392 <crc32_recalculate+0x7e>
		if (crc & 1) {
    b388:	4218      	tst	r0, r3
    b38a:	d0f9      	beq.n	b380 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b38c:	085b      	lsrs	r3, r3, #1
    b38e:	4063      	eors	r3, r4
    b390:	e7f7      	b.n	b382 <crc32_recalculate+0x6e>
    b392:	3604      	adds	r6, #4
		while (temp_length--) {
    b394:	3d01      	subs	r5, #1
    b396:	d303      	bcc.n	b3a0 <crc32_recalculate+0x8c>
	crc ^= data;
    b398:	6831      	ldr	r1, [r6, #0]
    b39a:	404b      	eors	r3, r1
    b39c:	2120      	movs	r1, #32
    b39e:	e7f3      	b.n	b388 <crc32_recalculate+0x74>
    b3a0:	4641      	mov	r1, r8
    b3a2:	0089      	lsls	r1, r1, #2
    b3a4:	187f      	adds	r7, r7, r1
		length -= temp_length;
    b3a6:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    b3a8:	2900      	cmp	r1, #0
    b3aa:	d017      	beq.n	b3dc <crc32_recalculate+0xc8>
		word = *word_ptr;
    b3ac:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    b3ae:	00c8      	lsls	r0, r1, #3
    b3b0:	4240      	negs	r0, r0
    b3b2:	3020      	adds	r0, #32
    b3b4:	2501      	movs	r5, #1
    b3b6:	426d      	negs	r5, r5
    b3b8:	40c5      	lsrs	r5, r0
    b3ba:	0028      	movs	r0, r5
    b3bc:	4020      	ands	r0, r4
	crc ^= data;
    b3be:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    b3c0:	00c9      	lsls	r1, r1, #3
    b3c2:	d00b      	beq.n	b3dc <crc32_recalculate+0xc8>
		if (crc & 1) {
    b3c4:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b3c6:	4c08      	ldr	r4, [pc, #32]	; (b3e8 <crc32_recalculate+0xd4>)
    b3c8:	e003      	b.n	b3d2 <crc32_recalculate+0xbe>
			crc >>= 1;
    b3ca:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    b3cc:	3901      	subs	r1, #1
    b3ce:	2900      	cmp	r1, #0
    b3d0:	d004      	beq.n	b3dc <crc32_recalculate+0xc8>
		if (crc & 1) {
    b3d2:	4218      	tst	r0, r3
    b3d4:	d0f9      	beq.n	b3ca <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b3d6:	085b      	lsrs	r3, r3, #1
    b3d8:	4063      	eors	r3, r4
    b3da:	e7f7      	b.n	b3cc <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    b3dc:	43db      	mvns	r3, r3
    b3de:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    b3e0:	2000      	movs	r0, #0
    b3e2:	bc04      	pop	{r2}
    b3e4:	4690      	mov	r8, r2
    b3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3e8:	edb88320 	.word	0xedb88320

0000b3ec <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    b3ec:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    b3ee:	2200      	movs	r2, #0
    b3f0:	2300      	movs	r3, #0
    b3f2:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    b3f4:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    b3f6:	2100      	movs	r1, #0
    b3f8:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    b3fa:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    b3fc:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    b3fe:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    b400:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    b402:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    b404:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    b406:	24c0      	movs	r4, #192	; 0xc0
    b408:	0164      	lsls	r4, r4, #5
    b40a:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    b40c:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    b40e:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    b410:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    b412:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    b414:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    b416:	242a      	movs	r4, #42	; 0x2a
    b418:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    b41a:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    b41c:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    b41e:	3c06      	subs	r4, #6
    b420:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    b422:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    b424:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    b426:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    b428:	232b      	movs	r3, #43	; 0x2b
    b42a:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    b42c:	3301      	adds	r3, #1
    b42e:	54c1      	strb	r1, [r0, r3]
}
    b430:	bd10      	pop	{r4, pc}
	...

0000b434 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    b434:	b5f0      	push	{r4, r5, r6, r7, lr}
    b436:	46d6      	mov	lr, sl
    b438:	464f      	mov	r7, r9
    b43a:	4646      	mov	r6, r8
    b43c:	b5c0      	push	{r6, r7, lr}
    b43e:	b096      	sub	sp, #88	; 0x58
    b440:	0007      	movs	r7, r0
    b442:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    b444:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    b446:	4acb      	ldr	r2, [pc, #812]	; (b774 <adc_init+0x340>)
    b448:	6a10      	ldr	r0, [r2, #32]
    b44a:	2380      	movs	r3, #128	; 0x80
    b44c:	025b      	lsls	r3, r3, #9
    b44e:	4303      	orrs	r3, r0
    b450:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    b452:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    b454:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    b456:	07db      	lsls	r3, r3, #31
    b458:	d505      	bpl.n	b466 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    b45a:	b016      	add	sp, #88	; 0x58
    b45c:	bc1c      	pop	{r2, r3, r4}
    b45e:	4690      	mov	r8, r2
    b460:	4699      	mov	r9, r3
    b462:	46a2      	mov	sl, r4
    b464:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    b466:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    b468:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    b46a:	079b      	lsls	r3, r3, #30
    b46c:	d4f5      	bmi.n	b45a <adc_init+0x26>
	module_inst->reference = config->reference;
    b46e:	7873      	ldrb	r3, [r6, #1]
    b470:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    b472:	2b00      	cmp	r3, #0
    b474:	d104      	bne.n	b480 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    b476:	4ac0      	ldr	r2, [pc, #768]	; (b778 <adc_init+0x344>)
    b478:	6c13      	ldr	r3, [r2, #64]	; 0x40
    b47a:	2104      	movs	r1, #4
    b47c:	430b      	orrs	r3, r1
    b47e:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
    b480:	683b      	ldr	r3, [r7, #0]
    b482:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    b484:	7833      	ldrb	r3, [r6, #0]
    b486:	466a      	mov	r2, sp
    b488:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    b48a:	4669      	mov	r1, sp
    b48c:	201e      	movs	r0, #30
    b48e:	4bbb      	ldr	r3, [pc, #748]	; (b77c <adc_init+0x348>)
    b490:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    b492:	201e      	movs	r0, #30
    b494:	4bba      	ldr	r3, [pc, #744]	; (b780 <adc_init+0x34c>)
    b496:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    b498:	232c      	movs	r3, #44	; 0x2c
    b49a:	5cf2      	ldrb	r2, [r6, r3]
    b49c:	2a00      	cmp	r2, #0
    b49e:	d054      	beq.n	b54a <adc_init+0x116>
		uint8_t offset = config->pin_scan.offset_start_scan;
    b4a0:	3b01      	subs	r3, #1
    b4a2:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    b4a4:	7b33      	ldrb	r3, [r6, #12]
    b4a6:	18eb      	adds	r3, r5, r3
    b4a8:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    b4aa:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    b4ac:	b2c9      	uxtb	r1, r1
    b4ae:	428b      	cmp	r3, r1
    b4b0:	d221      	bcs.n	b4f6 <adc_init+0xc2>
    b4b2:	1952      	adds	r2, r2, r5
    b4b4:	b2d3      	uxtb	r3, r2
    b4b6:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    b4b8:	4bb2      	ldr	r3, [pc, #712]	; (b784 <adc_init+0x350>)
    b4ba:	469a      	mov	sl, r3
    b4bc:	e003      	b.n	b4c6 <adc_init+0x92>
			offset++;
    b4be:	3501      	adds	r5, #1
    b4c0:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    b4c2:	45a9      	cmp	r9, r5
    b4c4:	d017      	beq.n	b4f6 <adc_init+0xc2>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    b4c6:	240f      	movs	r4, #15
    b4c8:	402c      	ands	r4, r5
    b4ca:	7b33      	ldrb	r3, [r6, #12]
    b4cc:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    b4ce:	2250      	movs	r2, #80	; 0x50
    b4d0:	49ad      	ldr	r1, [pc, #692]	; (b788 <adc_init+0x354>)
    b4d2:	a802      	add	r0, sp, #8
    b4d4:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    b4d6:	2c13      	cmp	r4, #19
    b4d8:	d8f1      	bhi.n	b4be <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    b4da:	00a4      	lsls	r4, r4, #2
    b4dc:	ab02      	add	r3, sp, #8
    b4de:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b4e0:	a901      	add	r1, sp, #4
    b4e2:	2300      	movs	r3, #0
    b4e4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    b4e6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    b4e8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    b4ea:	3301      	adds	r3, #1
    b4ec:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    b4ee:	b2c0      	uxtb	r0, r0
    b4f0:	4ba6      	ldr	r3, [pc, #664]	; (b78c <adc_init+0x358>)
    b4f2:	4798      	blx	r3
    b4f4:	e7e3      	b.n	b4be <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
    b4f6:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    b4f8:	2250      	movs	r2, #80	; 0x50
    b4fa:	49a3      	ldr	r1, [pc, #652]	; (b788 <adc_init+0x354>)
    b4fc:	a802      	add	r0, sp, #8
    b4fe:	4ba1      	ldr	r3, [pc, #644]	; (b784 <adc_init+0x350>)
    b500:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    b502:	2c13      	cmp	r4, #19
    b504:	d913      	bls.n	b52e <adc_init+0xfa>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    b506:	7d73      	ldrb	r3, [r6, #21]
    b508:	009b      	lsls	r3, r3, #2
    b50a:	b2db      	uxtb	r3, r3
    b50c:	4642      	mov	r2, r8
    b50e:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    b510:	7db3      	ldrb	r3, [r6, #22]
    b512:	01db      	lsls	r3, r3, #7
    b514:	7872      	ldrb	r2, [r6, #1]
    b516:	4313      	orrs	r3, r2
    b518:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    b51a:	4642      	mov	r2, r8
    b51c:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    b51e:	7933      	ldrb	r3, [r6, #4]
    b520:	2b34      	cmp	r3, #52	; 0x34
    b522:	d900      	bls.n	b526 <adc_init+0xf2>
    b524:	e178      	b.n	b818 <adc_init+0x3e4>
    b526:	009b      	lsls	r3, r3, #2
    b528:	4a99      	ldr	r2, [pc, #612]	; (b790 <adc_init+0x35c>)
    b52a:	58d3      	ldr	r3, [r2, r3]
    b52c:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    b52e:	00a4      	lsls	r4, r4, #2
    b530:	ab02      	add	r3, sp, #8
    b532:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b534:	a901      	add	r1, sp, #4
    b536:	2300      	movs	r3, #0
    b538:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    b53a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    b53c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    b53e:	3301      	adds	r3, #1
    b540:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    b542:	b2c0      	uxtb	r0, r0
    b544:	4b91      	ldr	r3, [pc, #580]	; (b78c <adc_init+0x358>)
    b546:	4798      	blx	r3
    b548:	e7dd      	b.n	b506 <adc_init+0xd2>
		_adc_configure_ain_pin(config->positive_input);
    b54a:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    b54c:	2250      	movs	r2, #80	; 0x50
    b54e:	498e      	ldr	r1, [pc, #568]	; (b788 <adc_init+0x354>)
    b550:	a802      	add	r0, sp, #8
    b552:	4b8c      	ldr	r3, [pc, #560]	; (b784 <adc_init+0x350>)
    b554:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    b556:	2c13      	cmp	r4, #19
    b558:	d915      	bls.n	b586 <adc_init+0x152>
		_adc_configure_ain_pin(config->negative_input);
    b55a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    b55c:	2250      	movs	r2, #80	; 0x50
    b55e:	498a      	ldr	r1, [pc, #552]	; (b788 <adc_init+0x354>)
    b560:	a802      	add	r0, sp, #8
    b562:	4b88      	ldr	r3, [pc, #544]	; (b784 <adc_init+0x350>)
    b564:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    b566:	2c13      	cmp	r4, #19
    b568:	d8cd      	bhi.n	b506 <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    b56a:	00a4      	lsls	r4, r4, #2
    b56c:	ab02      	add	r3, sp, #8
    b56e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b570:	a901      	add	r1, sp, #4
    b572:	2300      	movs	r3, #0
    b574:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    b576:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    b578:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    b57a:	3301      	adds	r3, #1
    b57c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    b57e:	b2c0      	uxtb	r0, r0
    b580:	4b82      	ldr	r3, [pc, #520]	; (b78c <adc_init+0x358>)
    b582:	4798      	blx	r3
    b584:	e7bf      	b.n	b506 <adc_init+0xd2>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    b586:	00a4      	lsls	r4, r4, #2
    b588:	ab02      	add	r3, sp, #8
    b58a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b58c:	a901      	add	r1, sp, #4
    b58e:	2300      	movs	r3, #0
    b590:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    b592:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    b594:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    b596:	3301      	adds	r3, #1
    b598:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    b59a:	b2c0      	uxtb	r0, r0
    b59c:	4b7b      	ldr	r3, [pc, #492]	; (b78c <adc_init+0x358>)
    b59e:	4798      	blx	r3
    b5a0:	e7db      	b.n	b55a <adc_init+0x126>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    b5a2:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    b5a4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    b5a6:	2102      	movs	r1, #2
    b5a8:	e01a      	b.n	b5e0 <adc_init+0x1ac>
		adjres = config->divide_result;
    b5aa:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    b5ac:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    b5ae:	2410      	movs	r4, #16
    b5b0:	e016      	b.n	b5e0 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    b5b2:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    b5b4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    b5b6:	2101      	movs	r1, #1
    b5b8:	e012      	b.n	b5e0 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    b5ba:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    b5bc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    b5be:	2100      	movs	r1, #0
    b5c0:	e00e      	b.n	b5e0 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    b5c2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    b5c4:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    b5c6:	2100      	movs	r1, #0
    b5c8:	e00a      	b.n	b5e0 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    b5ca:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    b5cc:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    b5ce:	2100      	movs	r1, #0
    b5d0:	e006      	b.n	b5e0 <adc_init+0x1ac>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    b5d2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    b5d4:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    b5d6:	2100      	movs	r1, #0
    b5d8:	e002      	b.n	b5e0 <adc_init+0x1ac>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    b5da:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    b5dc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    b5de:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    b5e0:	0109      	lsls	r1, r1, #4
    b5e2:	2270      	movs	r2, #112	; 0x70
    b5e4:	400a      	ands	r2, r1
    b5e6:	4313      	orrs	r3, r2
    b5e8:	4642      	mov	r2, r8
    b5ea:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    b5ec:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    b5ee:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    b5f0:	2b3f      	cmp	r3, #63	; 0x3f
    b5f2:	d900      	bls.n	b5f6 <adc_init+0x1c2>
    b5f4:	e731      	b.n	b45a <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    b5f6:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    b5f8:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    b5fa:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    b5fc:	b25b      	sxtb	r3, r3
    b5fe:	2b00      	cmp	r3, #0
    b600:	dbfb      	blt.n	b5fa <adc_init+0x1c6>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    b602:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    b604:	8872      	ldrh	r2, [r6, #2]
    b606:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    b608:	2224      	movs	r2, #36	; 0x24
    b60a:	5cb2      	ldrb	r2, [r6, r2]
    b60c:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    b60e:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    b610:	7d32      	ldrb	r2, [r6, #20]
    b612:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    b614:	4313      	orrs	r3, r2
    b616:	7cb2      	ldrb	r2, [r6, #18]
    b618:	0052      	lsls	r2, r2, #1
    b61a:	4313      	orrs	r3, r2
    b61c:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    b61e:	4642      	mov	r2, r8
    b620:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    b622:	7e33      	ldrb	r3, [r6, #24]
    b624:	2b00      	cmp	r3, #0
    b626:	d020      	beq.n	b66a <adc_init+0x236>
		switch (resolution) {
    b628:	2c10      	cmp	r4, #16
    b62a:	d100      	bne.n	b62e <adc_init+0x1fa>
    b62c:	e0d6      	b.n	b7dc <adc_init+0x3a8>
    b62e:	d800      	bhi.n	b632 <adc_init+0x1fe>
    b630:	e080      	b.n	b734 <adc_init+0x300>
    b632:	2c20      	cmp	r4, #32
    b634:	d100      	bne.n	b638 <adc_init+0x204>
    b636:	e0b3      	b.n	b7a0 <adc_init+0x36c>
    b638:	2c30      	cmp	r4, #48	; 0x30
    b63a:	d116      	bne.n	b66a <adc_init+0x236>
			if (config->differential_mode &&
    b63c:	7cf2      	ldrb	r2, [r6, #19]
    b63e:	2a00      	cmp	r2, #0
    b640:	d00a      	beq.n	b658 <adc_init+0x224>
					(config->window.window_lower_value > 127 ||
    b642:	69f2      	ldr	r2, [r6, #28]
    b644:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    b646:	2017      	movs	r0, #23
			if (config->differential_mode &&
    b648:	2aff      	cmp	r2, #255	; 0xff
    b64a:	d900      	bls.n	b64e <adc_init+0x21a>
    b64c:	e705      	b.n	b45a <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    b64e:	6a32      	ldr	r2, [r6, #32]
    b650:	3280      	adds	r2, #128	; 0x80
    b652:	2aff      	cmp	r2, #255	; 0xff
    b654:	d900      	bls.n	b658 <adc_init+0x224>
    b656:	e700      	b.n	b45a <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    b658:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    b65a:	69f2      	ldr	r2, [r6, #28]
    b65c:	2aff      	cmp	r2, #255	; 0xff
    b65e:	dd00      	ble.n	b662 <adc_init+0x22e>
    b660:	e6fb      	b.n	b45a <adc_init+0x26>
    b662:	6a32      	ldr	r2, [r6, #32]
    b664:	2aff      	cmp	r2, #255	; 0xff
    b666:	dd00      	ble.n	b66a <adc_init+0x236>
    b668:	e6f7      	b.n	b45a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    b66a:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    b66c:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    b66e:	b252      	sxtb	r2, r2
    b670:	2a00      	cmp	r2, #0
    b672:	dbfb      	blt.n	b66c <adc_init+0x238>
	adc_module->WINCTRL.reg = config->window.window_mode;
    b674:	4642      	mov	r2, r8
    b676:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    b678:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    b67a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    b67c:	b25b      	sxtb	r3, r3
    b67e:	2b00      	cmp	r3, #0
    b680:	dbfb      	blt.n	b67a <adc_init+0x246>
	adc_module->WINLT.reg =
    b682:	8bb3      	ldrh	r3, [r6, #28]
    b684:	4642      	mov	r2, r8
    b686:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    b688:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    b68a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    b68c:	b25b      	sxtb	r3, r3
    b68e:	2b00      	cmp	r3, #0
    b690:	dbfb      	blt.n	b68a <adc_init+0x256>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    b692:	8c33      	ldrh	r3, [r6, #32]
    b694:	4642      	mov	r2, r8
    b696:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    b698:	232c      	movs	r3, #44	; 0x2c
    b69a:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    b69c:	2b00      	cmp	r3, #0
    b69e:	d005      	beq.n	b6ac <adc_init+0x278>
		inputs_to_scan--;
    b6a0:	3b01      	subs	r3, #1
    b6a2:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    b6a4:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    b6a6:	2b0f      	cmp	r3, #15
    b6a8:	d900      	bls.n	b6ac <adc_init+0x278>
    b6aa:	e6d6      	b.n	b45a <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    b6ac:	222b      	movs	r2, #43	; 0x2b
    b6ae:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    b6b0:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    b6b2:	290f      	cmp	r1, #15
    b6b4:	d900      	bls.n	b6b8 <adc_init+0x284>
    b6b6:	e6d0      	b.n	b45a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    b6b8:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    b6ba:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    b6bc:	b252      	sxtb	r2, r2
    b6be:	2a00      	cmp	r2, #0
    b6c0:	dbfb      	blt.n	b6ba <adc_init+0x286>
			config->negative_input |
    b6c2:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    b6c4:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    b6c6:	4302      	orrs	r2, r0
    b6c8:	68b0      	ldr	r0, [r6, #8]
    b6ca:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    b6cc:	0509      	lsls	r1, r1, #20
			config->negative_input |
    b6ce:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    b6d0:	041b      	lsls	r3, r3, #16
			config->negative_input |
    b6d2:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    b6d4:	4642      	mov	r2, r8
    b6d6:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    b6d8:	232a      	movs	r3, #42	; 0x2a
    b6da:	5cf3      	ldrb	r3, [r6, r3]
    b6dc:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    b6de:	230f      	movs	r3, #15
    b6e0:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    b6e2:	3315      	adds	r3, #21
    b6e4:	5cf3      	ldrb	r3, [r6, r3]
    b6e6:	2b00      	cmp	r3, #0
    b6e8:	d012      	beq.n	b710 <adc_init+0x2dc>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    b6ea:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    b6ec:	4a29      	ldr	r2, [pc, #164]	; (b794 <adc_init+0x360>)
			return STATUS_ERR_INVALID_ARG;
    b6ee:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    b6f0:	4293      	cmp	r3, r2
    b6f2:	d900      	bls.n	b6f6 <adc_init+0x2c2>
    b6f4:	e6b1      	b.n	b45a <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    b6f6:	4642      	mov	r2, r8
    b6f8:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    b6fa:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    b6fc:	2380      	movs	r3, #128	; 0x80
    b6fe:	011b      	lsls	r3, r3, #4
    b700:	18d3      	adds	r3, r2, r3
    b702:	4924      	ldr	r1, [pc, #144]	; (b794 <adc_init+0x360>)
    b704:	b29b      	uxth	r3, r3
    b706:	428b      	cmp	r3, r1
    b708:	d900      	bls.n	b70c <adc_init+0x2d8>
    b70a:	e6a6      	b.n	b45a <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    b70c:	4643      	mov	r3, r8
    b70e:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    b710:	4b21      	ldr	r3, [pc, #132]	; (b798 <adc_init+0x364>)
    b712:	681b      	ldr	r3, [r3, #0]
    b714:	015b      	lsls	r3, r3, #5
    b716:	22e0      	movs	r2, #224	; 0xe0
    b718:	00d2      	lsls	r2, r2, #3
    b71a:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    b71c:	4a1f      	ldr	r2, [pc, #124]	; (b79c <adc_init+0x368>)
    b71e:	6851      	ldr	r1, [r2, #4]
    b720:	0149      	lsls	r1, r1, #5
    b722:	6812      	ldr	r2, [r2, #0]
    b724:	0ed2      	lsrs	r2, r2, #27
    b726:	430a      	orrs	r2, r1
    b728:	b2d2      	uxtb	r2, r2
			) |
    b72a:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    b72c:	4642      	mov	r2, r8
    b72e:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    b730:	2000      	movs	r0, #0
    b732:	e692      	b.n	b45a <adc_init+0x26>
		switch (resolution) {
    b734:	2c00      	cmp	r4, #0
    b736:	d198      	bne.n	b66a <adc_init+0x236>
			if (config->differential_mode &&
    b738:	7cf2      	ldrb	r2, [r6, #19]
    b73a:	2a00      	cmp	r2, #0
    b73c:	d00f      	beq.n	b75e <adc_init+0x32a>
					(config->window.window_lower_value > 2047 ||
    b73e:	69f2      	ldr	r2, [r6, #28]
    b740:	2180      	movs	r1, #128	; 0x80
    b742:	0109      	lsls	r1, r1, #4
    b744:	468c      	mov	ip, r1
    b746:	4462      	add	r2, ip
			if (config->differential_mode &&
    b748:	4912      	ldr	r1, [pc, #72]	; (b794 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
    b74a:	2017      	movs	r0, #23
			if (config->differential_mode &&
    b74c:	428a      	cmp	r2, r1
    b74e:	d900      	bls.n	b752 <adc_init+0x31e>
    b750:	e683      	b.n	b45a <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    b752:	6a32      	ldr	r2, [r6, #32]
    b754:	4462      	add	r2, ip
    b756:	490f      	ldr	r1, [pc, #60]	; (b794 <adc_init+0x360>)
    b758:	428a      	cmp	r2, r1
    b75a:	d900      	bls.n	b75e <adc_init+0x32a>
    b75c:	e67d      	b.n	b45a <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    b75e:	4a0d      	ldr	r2, [pc, #52]	; (b794 <adc_init+0x360>)
				return STATUS_ERR_INVALID_ARG;
    b760:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    b762:	69f1      	ldr	r1, [r6, #28]
    b764:	4291      	cmp	r1, r2
    b766:	dd00      	ble.n	b76a <adc_init+0x336>
    b768:	e677      	b.n	b45a <adc_init+0x26>
    b76a:	6a31      	ldr	r1, [r6, #32]
    b76c:	4291      	cmp	r1, r2
    b76e:	dd00      	ble.n	b772 <adc_init+0x33e>
    b770:	e673      	b.n	b45a <adc_init+0x26>
    b772:	e77a      	b.n	b66a <adc_init+0x236>
    b774:	40000400 	.word	0x40000400
    b778:	40000800 	.word	0x40000800
    b77c:	00010131 	.word	0x00010131
    b780:	000100a5 	.word	0x000100a5
    b784:	00013f45 	.word	0x00013f45
    b788:	00016518 	.word	0x00016518
    b78c:	00010229 	.word	0x00010229
    b790:	00016444 	.word	0x00016444
    b794:	00000fff 	.word	0x00000fff
    b798:	00806024 	.word	0x00806024
    b79c:	00806020 	.word	0x00806020
			if (config->differential_mode &&
    b7a0:	7cf2      	ldrb	r2, [r6, #19]
    b7a2:	2a00      	cmp	r2, #0
    b7a4:	d00f      	beq.n	b7c6 <adc_init+0x392>
					(config->window.window_lower_value > 511 ||
    b7a6:	69f2      	ldr	r2, [r6, #28]
    b7a8:	2180      	movs	r1, #128	; 0x80
    b7aa:	0089      	lsls	r1, r1, #2
    b7ac:	468c      	mov	ip, r1
    b7ae:	4462      	add	r2, ip
			if (config->differential_mode &&
    b7b0:	491a      	ldr	r1, [pc, #104]	; (b81c <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
    b7b2:	2017      	movs	r0, #23
			if (config->differential_mode &&
    b7b4:	428a      	cmp	r2, r1
    b7b6:	d900      	bls.n	b7ba <adc_init+0x386>
    b7b8:	e64f      	b.n	b45a <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    b7ba:	6a32      	ldr	r2, [r6, #32]
    b7bc:	4462      	add	r2, ip
    b7be:	4917      	ldr	r1, [pc, #92]	; (b81c <adc_init+0x3e8>)
    b7c0:	428a      	cmp	r2, r1
    b7c2:	d900      	bls.n	b7c6 <adc_init+0x392>
    b7c4:	e649      	b.n	b45a <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    b7c6:	4a15      	ldr	r2, [pc, #84]	; (b81c <adc_init+0x3e8>)
				return STATUS_ERR_INVALID_ARG;
    b7c8:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    b7ca:	69f1      	ldr	r1, [r6, #28]
    b7cc:	4291      	cmp	r1, r2
    b7ce:	dd00      	ble.n	b7d2 <adc_init+0x39e>
    b7d0:	e643      	b.n	b45a <adc_init+0x26>
    b7d2:	6a31      	ldr	r1, [r6, #32]
    b7d4:	4291      	cmp	r1, r2
    b7d6:	dd00      	ble.n	b7da <adc_init+0x3a6>
    b7d8:	e63f      	b.n	b45a <adc_init+0x26>
    b7da:	e746      	b.n	b66a <adc_init+0x236>
			if (config->differential_mode &&
    b7dc:	7cf2      	ldrb	r2, [r6, #19]
    b7de:	2a00      	cmp	r2, #0
    b7e0:	d00f      	beq.n	b802 <adc_init+0x3ce>
					(config->window.window_lower_value > 32767 ||
    b7e2:	69f2      	ldr	r2, [r6, #28]
    b7e4:	2180      	movs	r1, #128	; 0x80
    b7e6:	0209      	lsls	r1, r1, #8
    b7e8:	468c      	mov	ip, r1
    b7ea:	4462      	add	r2, ip
			if (config->differential_mode &&
    b7ec:	490c      	ldr	r1, [pc, #48]	; (b820 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
    b7ee:	2017      	movs	r0, #23
			if (config->differential_mode &&
    b7f0:	428a      	cmp	r2, r1
    b7f2:	d900      	bls.n	b7f6 <adc_init+0x3c2>
    b7f4:	e631      	b.n	b45a <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    b7f6:	6a32      	ldr	r2, [r6, #32]
    b7f8:	4462      	add	r2, ip
    b7fa:	4909      	ldr	r1, [pc, #36]	; (b820 <adc_init+0x3ec>)
    b7fc:	428a      	cmp	r2, r1
    b7fe:	d900      	bls.n	b802 <adc_init+0x3ce>
    b800:	e62b      	b.n	b45a <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    b802:	4a07      	ldr	r2, [pc, #28]	; (b820 <adc_init+0x3ec>)
				return STATUS_ERR_INVALID_ARG;
    b804:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    b806:	69f1      	ldr	r1, [r6, #28]
    b808:	4291      	cmp	r1, r2
    b80a:	dd00      	ble.n	b80e <adc_init+0x3da>
    b80c:	e625      	b.n	b45a <adc_init+0x26>
    b80e:	6a31      	ldr	r1, [r6, #32]
    b810:	4291      	cmp	r1, r2
    b812:	dd00      	ble.n	b816 <adc_init+0x3e2>
    b814:	e621      	b.n	b45a <adc_init+0x26>
    b816:	e728      	b.n	b66a <adc_init+0x236>
		return STATUS_ERR_INVALID_ARG;
    b818:	2017      	movs	r0, #23
    b81a:	e61e      	b.n	b45a <adc_init+0x26>
    b81c:	000003ff 	.word	0x000003ff
    b820:	0000ffff 	.word	0x0000ffff

0000b824 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    b824:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    b826:	2a00      	cmp	r2, #0
    b828:	d001      	beq.n	b82e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    b82a:	0018      	movs	r0, r3
    b82c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    b82e:	008b      	lsls	r3, r1, #2
    b830:	4a06      	ldr	r2, [pc, #24]	; (b84c <extint_register_callback+0x28>)
    b832:	589b      	ldr	r3, [r3, r2]
    b834:	2b00      	cmp	r3, #0
    b836:	d003      	beq.n	b840 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    b838:	4283      	cmp	r3, r0
    b83a:	d005      	beq.n	b848 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    b83c:	231d      	movs	r3, #29
    b83e:	e7f4      	b.n	b82a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    b840:	0089      	lsls	r1, r1, #2
    b842:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    b844:	2300      	movs	r3, #0
    b846:	e7f0      	b.n	b82a <extint_register_callback+0x6>
		return STATUS_OK;
    b848:	2300      	movs	r3, #0
    b84a:	e7ee      	b.n	b82a <extint_register_callback+0x6>
    b84c:	20000528 	.word	0x20000528

0000b850 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    b850:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    b852:	2900      	cmp	r1, #0
    b854:	d001      	beq.n	b85a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    b856:	0018      	movs	r0, r3
    b858:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    b85a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    b85c:	281f      	cmp	r0, #31
    b85e:	d800      	bhi.n	b862 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    b860:	4a02      	ldr	r2, [pc, #8]	; (b86c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    b862:	2301      	movs	r3, #1
    b864:	4083      	lsls	r3, r0
    b866:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    b868:	2300      	movs	r3, #0
    b86a:	e7f4      	b.n	b856 <extint_chan_enable_callback+0x6>
    b86c:	40001800 	.word	0x40001800

0000b870 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    b870:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    b872:	2900      	cmp	r1, #0
    b874:	d001      	beq.n	b87a <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    b876:	0018      	movs	r0, r3
    b878:	4770      	bx	lr
		return NULL;
    b87a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    b87c:	281f      	cmp	r0, #31
    b87e:	d800      	bhi.n	b882 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    b880:	4a02      	ldr	r2, [pc, #8]	; (b88c <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    b882:	2301      	movs	r3, #1
    b884:	4083      	lsls	r3, r0
    b886:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    b888:	2300      	movs	r3, #0
    b88a:	e7f4      	b.n	b876 <extint_chan_disable_callback+0x6>
    b88c:	40001800 	.word	0x40001800

0000b890 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    b890:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    b892:	2200      	movs	r2, #0
    b894:	4b10      	ldr	r3, [pc, #64]	; (b8d8 <EIC_Handler+0x48>)
    b896:	701a      	strb	r2, [r3, #0]
    b898:	2300      	movs	r3, #0
    b89a:	4910      	ldr	r1, [pc, #64]	; (b8dc <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    b89c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    b89e:	4e10      	ldr	r6, [pc, #64]	; (b8e0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    b8a0:	4c0d      	ldr	r4, [pc, #52]	; (b8d8 <EIC_Handler+0x48>)
    b8a2:	e00a      	b.n	b8ba <EIC_Handler+0x2a>
		return eics[eic_index];
    b8a4:	490d      	ldr	r1, [pc, #52]	; (b8dc <EIC_Handler+0x4c>)
    b8a6:	e008      	b.n	b8ba <EIC_Handler+0x2a>
    b8a8:	7823      	ldrb	r3, [r4, #0]
    b8aa:	3301      	adds	r3, #1
    b8ac:	b2db      	uxtb	r3, r3
    b8ae:	7023      	strb	r3, [r4, #0]
    b8b0:	2b0f      	cmp	r3, #15
    b8b2:	d810      	bhi.n	b8d6 <EIC_Handler+0x46>
		return NULL;
    b8b4:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    b8b6:	2b1f      	cmp	r3, #31
    b8b8:	d9f4      	bls.n	b8a4 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    b8ba:	0028      	movs	r0, r5
    b8bc:	4018      	ands	r0, r3
    b8be:	2201      	movs	r2, #1
    b8c0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    b8c2:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    b8c4:	4210      	tst	r0, r2
    b8c6:	d0ef      	beq.n	b8a8 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    b8c8:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    b8ca:	009b      	lsls	r3, r3, #2
    b8cc:	599b      	ldr	r3, [r3, r6]
    b8ce:	2b00      	cmp	r3, #0
    b8d0:	d0ea      	beq.n	b8a8 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    b8d2:	4798      	blx	r3
    b8d4:	e7e8      	b.n	b8a8 <EIC_Handler+0x18>
			}
		}
	}
}
    b8d6:	bd70      	pop	{r4, r5, r6, pc}
    b8d8:	20000524 	.word	0x20000524
    b8dc:	40001800 	.word	0x40001800
    b8e0:	20000528 	.word	0x20000528

0000b8e4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    b8e4:	4a04      	ldr	r2, [pc, #16]	; (b8f8 <_extint_enable+0x14>)
    b8e6:	7813      	ldrb	r3, [r2, #0]
    b8e8:	2102      	movs	r1, #2
    b8ea:	430b      	orrs	r3, r1
    b8ec:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    b8ee:	7853      	ldrb	r3, [r2, #1]
    b8f0:	b25b      	sxtb	r3, r3
    b8f2:	2b00      	cmp	r3, #0
    b8f4:	dbfb      	blt.n	b8ee <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    b8f6:	4770      	bx	lr
    b8f8:	40001800 	.word	0x40001800

0000b8fc <_system_extint_init>:
{
    b8fc:	b500      	push	{lr}
    b8fe:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    b900:	4a12      	ldr	r2, [pc, #72]	; (b94c <_system_extint_init+0x50>)
    b902:	6993      	ldr	r3, [r2, #24]
    b904:	2140      	movs	r1, #64	; 0x40
    b906:	430b      	orrs	r3, r1
    b908:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    b90a:	a901      	add	r1, sp, #4
    b90c:	2300      	movs	r3, #0
    b90e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    b910:	2005      	movs	r0, #5
    b912:	4b0f      	ldr	r3, [pc, #60]	; (b950 <_system_extint_init+0x54>)
    b914:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    b916:	2005      	movs	r0, #5
    b918:	4b0e      	ldr	r3, [pc, #56]	; (b954 <_system_extint_init+0x58>)
    b91a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    b91c:	4a0e      	ldr	r2, [pc, #56]	; (b958 <_system_extint_init+0x5c>)
    b91e:	7813      	ldrb	r3, [r2, #0]
    b920:	2101      	movs	r1, #1
    b922:	430b      	orrs	r3, r1
    b924:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    b926:	7853      	ldrb	r3, [r2, #1]
    b928:	b25b      	sxtb	r3, r3
    b92a:	2b00      	cmp	r3, #0
    b92c:	dbfb      	blt.n	b926 <_system_extint_init+0x2a>
    b92e:	4b0b      	ldr	r3, [pc, #44]	; (b95c <_system_extint_init+0x60>)
    b930:	0019      	movs	r1, r3
    b932:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    b934:	2200      	movs	r2, #0
    b936:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    b938:	4299      	cmp	r1, r3
    b93a:	d1fc      	bne.n	b936 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b93c:	2210      	movs	r2, #16
    b93e:	4b08      	ldr	r3, [pc, #32]	; (b960 <_system_extint_init+0x64>)
    b940:	601a      	str	r2, [r3, #0]
	_extint_enable();
    b942:	4b08      	ldr	r3, [pc, #32]	; (b964 <_system_extint_init+0x68>)
    b944:	4798      	blx	r3
}
    b946:	b003      	add	sp, #12
    b948:	bd00      	pop	{pc}
    b94a:	46c0      	nop			; (mov r8, r8)
    b94c:	40000400 	.word	0x40000400
    b950:	00010131 	.word	0x00010131
    b954:	000100a5 	.word	0x000100a5
    b958:	40001800 	.word	0x40001800
    b95c:	20000528 	.word	0x20000528
    b960:	e000e100 	.word	0xe000e100
    b964:	0000b8e5 	.word	0x0000b8e5

0000b968 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    b968:	2300      	movs	r3, #0
    b96a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    b96c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    b96e:	2201      	movs	r2, #1
    b970:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    b972:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    b974:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    b976:	3302      	adds	r3, #2
    b978:	72c3      	strb	r3, [r0, #11]
}
    b97a:	4770      	bx	lr

0000b97c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    b97c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b97e:	b083      	sub	sp, #12
    b980:	0005      	movs	r5, r0
    b982:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b984:	a901      	add	r1, sp, #4
    b986:	2300      	movs	r3, #0
    b988:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    b98a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    b98c:	7923      	ldrb	r3, [r4, #4]
    b98e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    b990:	7a23      	ldrb	r3, [r4, #8]
    b992:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    b994:	7820      	ldrb	r0, [r4, #0]
    b996:	4b15      	ldr	r3, [pc, #84]	; (b9ec <extint_chan_set_config+0x70>)
    b998:	4798      	blx	r3
		return NULL;
    b99a:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    b99c:	2d1f      	cmp	r5, #31
    b99e:	d800      	bhi.n	b9a2 <extint_chan_set_config+0x26>
		return eics[eic_index];
    b9a0:	4813      	ldr	r0, [pc, #76]	; (b9f0 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    b9a2:	2207      	movs	r2, #7
    b9a4:	402a      	ands	r2, r5
    b9a6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    b9a8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    b9aa:	7aa3      	ldrb	r3, [r4, #10]
    b9ac:	2b00      	cmp	r3, #0
    b9ae:	d001      	beq.n	b9b4 <extint_chan_set_config+0x38>
    b9b0:	2308      	movs	r3, #8
    b9b2:	431f      	orrs	r7, r3
    b9b4:	08eb      	lsrs	r3, r5, #3
    b9b6:	009b      	lsls	r3, r3, #2
    b9b8:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    b9ba:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    b9bc:	260f      	movs	r6, #15
    b9be:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    b9c0:	43b1      	bics	r1, r6
			(new_config << config_pos);
    b9c2:	4097      	lsls	r7, r2
    b9c4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    b9c6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    b9c8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    b9ca:	7a63      	ldrb	r3, [r4, #9]
    b9cc:	2b00      	cmp	r3, #0
    b9ce:	d106      	bne.n	b9de <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    b9d0:	6943      	ldr	r3, [r0, #20]
    b9d2:	2201      	movs	r2, #1
    b9d4:	40aa      	lsls	r2, r5
    b9d6:	4393      	bics	r3, r2
    b9d8:	6143      	str	r3, [r0, #20]
	}
}
    b9da:	b003      	add	sp, #12
    b9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    b9de:	6942      	ldr	r2, [r0, #20]
    b9e0:	2301      	movs	r3, #1
    b9e2:	40ab      	lsls	r3, r5
    b9e4:	4313      	orrs	r3, r2
    b9e6:	6143      	str	r3, [r0, #20]
    b9e8:	e7f7      	b.n	b9da <extint_chan_set_config+0x5e>
    b9ea:	46c0      	nop			; (mov r8, r8)
    b9ec:	00010229 	.word	0x00010229
    b9f0:	40001800 	.word	0x40001800

0000b9f4 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    b9f4:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    b9f6:	4b0f      	ldr	r3, [pc, #60]	; (ba34 <RTC_Handler+0x40>)
    b9f8:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    b9fa:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    b9fc:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    b9fe:	8a13      	ldrh	r3, [r2, #16]
    ba00:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    ba02:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    ba04:	79e3      	ldrb	r3, [r4, #7]
    ba06:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    ba08:	b258      	sxtb	r0, r3
    ba0a:	2800      	cmp	r0, #0
    ba0c:	db06      	blt.n	ba1c <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    ba0e:	07db      	lsls	r3, r3, #31
    ba10:	d503      	bpl.n	ba1a <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    ba12:	07cb      	lsls	r3, r1, #31
    ba14:	d40a      	bmi.n	ba2c <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    ba16:	2301      	movs	r3, #1
    ba18:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    ba1a:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    ba1c:	078b      	lsls	r3, r1, #30
    ba1e:	d402      	bmi.n	ba26 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    ba20:	2380      	movs	r3, #128	; 0x80
    ba22:	7223      	strb	r3, [r4, #8]
    ba24:	e7f9      	b.n	ba1a <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    ba26:	68d3      	ldr	r3, [r2, #12]
    ba28:	4798      	blx	r3
    ba2a:	e7f9      	b.n	ba20 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    ba2c:	6893      	ldr	r3, [r2, #8]
    ba2e:	4798      	blx	r3
    ba30:	e7f1      	b.n	ba16 <RTC_Handler+0x22>
    ba32:	46c0      	nop			; (mov r8, r8)
    ba34:	20000568 	.word	0x20000568

0000ba38 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    ba38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba3a:	46d6      	mov	lr, sl
    ba3c:	464f      	mov	r7, r9
    ba3e:	4646      	mov	r6, r8
    ba40:	b5c0      	push	{r6, r7, lr}
    ba42:	b08a      	sub	sp, #40	; 0x28
    ba44:	0006      	movs	r6, r0
    ba46:	000f      	movs	r7, r1
    ba48:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    ba4a:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    ba4c:	0008      	movs	r0, r1
    ba4e:	4ba0      	ldr	r3, [pc, #640]	; (bcd0 <i2c_master_init+0x298>)
    ba50:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    ba52:	4aa0      	ldr	r2, [pc, #640]	; (bcd4 <i2c_master_init+0x29c>)
    ba54:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    ba56:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    ba58:	2301      	movs	r3, #1
    ba5a:	40ab      	lsls	r3, r5
    ba5c:	430b      	orrs	r3, r1
    ba5e:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    ba60:	a909      	add	r1, sp, #36	; 0x24
    ba62:	7b23      	ldrb	r3, [r4, #12]
    ba64:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    ba66:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    ba68:	b2c5      	uxtb	r5, r0
    ba6a:	0028      	movs	r0, r5
    ba6c:	4b9a      	ldr	r3, [pc, #616]	; (bcd8 <i2c_master_init+0x2a0>)
    ba6e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    ba70:	0028      	movs	r0, r5
    ba72:	4b9a      	ldr	r3, [pc, #616]	; (bcdc <i2c_master_init+0x2a4>)
    ba74:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    ba76:	7b20      	ldrb	r0, [r4, #12]
    ba78:	2100      	movs	r1, #0
    ba7a:	4b99      	ldr	r3, [pc, #612]	; (bce0 <i2c_master_init+0x2a8>)
    ba7c:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    ba7e:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    ba80:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    ba82:	079b      	lsls	r3, r3, #30
    ba84:	d505      	bpl.n	ba92 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    ba86:	b00a      	add	sp, #40	; 0x28
    ba88:	bc1c      	pop	{r2, r3, r4}
    ba8a:	4690      	mov	r8, r2
    ba8c:	4699      	mov	r9, r3
    ba8e:	46a2      	mov	sl, r4
    ba90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    ba92:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    ba94:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    ba96:	07db      	lsls	r3, r3, #31
    ba98:	d4f5      	bmi.n	ba86 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    ba9a:	6830      	ldr	r0, [r6, #0]
    ba9c:	4b8c      	ldr	r3, [pc, #560]	; (bcd0 <i2c_master_init+0x298>)
    ba9e:	4699      	mov	r9, r3
    baa0:	4798      	blx	r3
    baa2:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    baa4:	498f      	ldr	r1, [pc, #572]	; (bce4 <i2c_master_init+0x2ac>)
    baa6:	4b90      	ldr	r3, [pc, #576]	; (bce8 <i2c_master_init+0x2b0>)
    baa8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    baaa:	00ad      	lsls	r5, r5, #2
    baac:	4b8f      	ldr	r3, [pc, #572]	; (bcec <i2c_master_init+0x2b4>)
    baae:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
    bab0:	2300      	movs	r3, #0
    bab2:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
    bab4:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
    bab6:	2500      	movs	r5, #0
    bab8:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
    baba:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
    babc:	2225      	movs	r2, #37	; 0x25
    babe:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
    bac0:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    bac2:	3314      	adds	r3, #20
    bac4:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    bac6:	6833      	ldr	r3, [r6, #0]
    bac8:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    baca:	0018      	movs	r0, r3
    bacc:	47c8      	blx	r9
    bace:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    bad0:	2380      	movs	r3, #128	; 0x80
    bad2:	aa08      	add	r2, sp, #32
    bad4:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    bad6:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    bad8:	2301      	movs	r3, #1
    bada:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    badc:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    bade:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    bae0:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    bae2:	2800      	cmp	r0, #0
    bae4:	d100      	bne.n	bae8 <i2c_master_init+0xb0>
    bae6:	e0af      	b.n	bc48 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
    bae8:	ab08      	add	r3, sp, #32
    baea:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    baec:	2302      	movs	r3, #2
    baee:	aa08      	add	r2, sp, #32
    baf0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    baf2:	0c00      	lsrs	r0, r0, #16
    baf4:	b2c0      	uxtb	r0, r0
    baf6:	0011      	movs	r1, r2
    baf8:	4b7d      	ldr	r3, [pc, #500]	; (bcf0 <i2c_master_init+0x2b8>)
    bafa:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    bafc:	2f00      	cmp	r7, #0
    bafe:	d100      	bne.n	bb02 <i2c_master_init+0xca>
    bb00:	e0a7      	b.n	bc52 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
    bb02:	ab08      	add	r3, sp, #32
    bb04:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    bb06:	2302      	movs	r3, #2
    bb08:	aa08      	add	r2, sp, #32
    bb0a:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    bb0c:	0c3f      	lsrs	r7, r7, #16
    bb0e:	b2f8      	uxtb	r0, r7
    bb10:	0011      	movs	r1, r2
    bb12:	4b77      	ldr	r3, [pc, #476]	; (bcf0 <i2c_master_init+0x2b8>)
    bb14:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    bb16:	8aa3      	ldrh	r3, [r4, #20]
    bb18:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    bb1a:	8ae3      	ldrh	r3, [r4, #22]
    bb1c:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    bb1e:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    bb20:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    bb22:	2b00      	cmp	r3, #0
    bb24:	d104      	bne.n	bb30 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    bb26:	4b73      	ldr	r3, [pc, #460]	; (bcf4 <i2c_master_init+0x2bc>)
    bb28:	789b      	ldrb	r3, [r3, #2]
    bb2a:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    bb2c:	0fdb      	lsrs	r3, r3, #31
    bb2e:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    bb30:	68a1      	ldr	r1, [r4, #8]
    bb32:	6923      	ldr	r3, [r4, #16]
    bb34:	430b      	orrs	r3, r1
    bb36:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    bb38:	2224      	movs	r2, #36	; 0x24
    bb3a:	5ca2      	ldrb	r2, [r4, r2]
    bb3c:	2a00      	cmp	r2, #0
    bb3e:	d002      	beq.n	bb46 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    bb40:	2280      	movs	r2, #128	; 0x80
    bb42:	05d2      	lsls	r2, r2, #23
    bb44:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    bb46:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    bb48:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    bb4a:	222c      	movs	r2, #44	; 0x2c
    bb4c:	5ca2      	ldrb	r2, [r4, r2]
    bb4e:	2a00      	cmp	r2, #0
    bb50:	d103      	bne.n	bb5a <i2c_master_init+0x122>
    bb52:	2280      	movs	r2, #128	; 0x80
    bb54:	0492      	lsls	r2, r2, #18
    bb56:	4291      	cmp	r1, r2
    bb58:	d102      	bne.n	bb60 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    bb5a:	2280      	movs	r2, #128	; 0x80
    bb5c:	0512      	lsls	r2, r2, #20
    bb5e:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    bb60:	222d      	movs	r2, #45	; 0x2d
    bb62:	5ca2      	ldrb	r2, [r4, r2]
    bb64:	2a00      	cmp	r2, #0
    bb66:	d002      	beq.n	bb6e <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    bb68:	2280      	movs	r2, #128	; 0x80
    bb6a:	0412      	lsls	r2, r2, #16
    bb6c:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    bb6e:	222e      	movs	r2, #46	; 0x2e
    bb70:	5ca2      	ldrb	r2, [r4, r2]
    bb72:	2a00      	cmp	r2, #0
    bb74:	d002      	beq.n	bb7c <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    bb76:	2280      	movs	r2, #128	; 0x80
    bb78:	03d2      	lsls	r2, r2, #15
    bb7a:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    bb7c:	4642      	mov	r2, r8
    bb7e:	6812      	ldr	r2, [r2, #0]
    bb80:	4313      	orrs	r3, r2
    bb82:	4642      	mov	r2, r8
    bb84:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    bb86:	2380      	movs	r3, #128	; 0x80
    bb88:	005b      	lsls	r3, r3, #1
    bb8a:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    bb8c:	4648      	mov	r0, r9
    bb8e:	3014      	adds	r0, #20
    bb90:	b2c0      	uxtb	r0, r0
    bb92:	4b59      	ldr	r3, [pc, #356]	; (bcf8 <i2c_master_init+0x2c0>)
    bb94:	4798      	blx	r3
    bb96:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    bb98:	23fa      	movs	r3, #250	; 0xfa
    bb9a:	009b      	lsls	r3, r3, #2
    bb9c:	6822      	ldr	r2, [r4, #0]
    bb9e:	435a      	muls	r2, r3
    bba0:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    bba2:	6863      	ldr	r3, [r4, #4]
    bba4:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    bba6:	4d55      	ldr	r5, [pc, #340]	; (bcfc <i2c_master_init+0x2c4>)
    bba8:	47a8      	blx	r5
    bbaa:	9000      	str	r0, [sp, #0]
    bbac:	9101      	str	r1, [sp, #4]
    bbae:	464b      	mov	r3, r9
    bbb0:	0058      	lsls	r0, r3, #1
    bbb2:	47a8      	blx	r5
    bbb4:	9002      	str	r0, [sp, #8]
    bbb6:	9103      	str	r1, [sp, #12]
    bbb8:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    bbba:	47a8      	blx	r5
    bbbc:	9004      	str	r0, [sp, #16]
    bbbe:	9105      	str	r1, [sp, #20]
    bbc0:	4f4f      	ldr	r7, [pc, #316]	; (bd00 <i2c_master_init+0x2c8>)
    bbc2:	4a50      	ldr	r2, [pc, #320]	; (bd04 <i2c_master_init+0x2cc>)
    bbc4:	4b50      	ldr	r3, [pc, #320]	; (bd08 <i2c_master_init+0x2d0>)
    bbc6:	9800      	ldr	r0, [sp, #0]
    bbc8:	9901      	ldr	r1, [sp, #4]
    bbca:	47b8      	blx	r7
    bbcc:	0002      	movs	r2, r0
    bbce:	000b      	movs	r3, r1
    bbd0:	9804      	ldr	r0, [sp, #16]
    bbd2:	9905      	ldr	r1, [sp, #20]
    bbd4:	47b8      	blx	r7
    bbd6:	4e4d      	ldr	r6, [pc, #308]	; (bd0c <i2c_master_init+0x2d4>)
    bbd8:	2200      	movs	r2, #0
    bbda:	4b4d      	ldr	r3, [pc, #308]	; (bd10 <i2c_master_init+0x2d8>)
    bbdc:	47b0      	blx	r6
    bbde:	9004      	str	r0, [sp, #16]
    bbe0:	9105      	str	r1, [sp, #20]
    bbe2:	4648      	mov	r0, r9
    bbe4:	47a8      	blx	r5
    bbe6:	0002      	movs	r2, r0
    bbe8:	000b      	movs	r3, r1
    bbea:	9804      	ldr	r0, [sp, #16]
    bbec:	9905      	ldr	r1, [sp, #20]
    bbee:	47b8      	blx	r7
    bbf0:	0002      	movs	r2, r0
    bbf2:	000b      	movs	r3, r1
    bbf4:	4d47      	ldr	r5, [pc, #284]	; (bd14 <i2c_master_init+0x2dc>)
    bbf6:	9800      	ldr	r0, [sp, #0]
    bbf8:	9901      	ldr	r1, [sp, #4]
    bbfa:	47a8      	blx	r5
    bbfc:	9a02      	ldr	r2, [sp, #8]
    bbfe:	9b03      	ldr	r3, [sp, #12]
    bc00:	47b0      	blx	r6
    bc02:	2200      	movs	r2, #0
    bc04:	4b44      	ldr	r3, [pc, #272]	; (bd18 <i2c_master_init+0x2e0>)
    bc06:	47a8      	blx	r5
    bc08:	9a02      	ldr	r2, [sp, #8]
    bc0a:	9b03      	ldr	r3, [sp, #12]
    bc0c:	4d43      	ldr	r5, [pc, #268]	; (bd1c <i2c_master_init+0x2e4>)
    bc0e:	47a8      	blx	r5
    bc10:	4b43      	ldr	r3, [pc, #268]	; (bd20 <i2c_master_init+0x2e8>)
    bc12:	4798      	blx	r3
    bc14:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    bc16:	2380      	movs	r3, #128	; 0x80
    bc18:	049b      	lsls	r3, r3, #18
    bc1a:	68a2      	ldr	r2, [r4, #8]
    bc1c:	429a      	cmp	r2, r3
    bc1e:	d01e      	beq.n	bc5e <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    bc20:	0003      	movs	r3, r0
    bc22:	2040      	movs	r0, #64	; 0x40
    bc24:	2dff      	cmp	r5, #255	; 0xff
    bc26:	d900      	bls.n	bc2a <i2c_master_init+0x1f2>
    bc28:	e72d      	b.n	ba86 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    bc2a:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    bc2c:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    bc2e:	25ff      	movs	r5, #255	; 0xff
    bc30:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    bc32:	0624      	lsls	r4, r4, #24
    bc34:	4325      	orrs	r5, r4
    bc36:	0400      	lsls	r0, r0, #16
    bc38:	23ff      	movs	r3, #255	; 0xff
    bc3a:	041b      	lsls	r3, r3, #16
    bc3c:	4018      	ands	r0, r3
    bc3e:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    bc40:	4643      	mov	r3, r8
    bc42:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    bc44:	2000      	movs	r0, #0
    bc46:	e71e      	b.n	ba86 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    bc48:	2100      	movs	r1, #0
    bc4a:	4640      	mov	r0, r8
    bc4c:	4b35      	ldr	r3, [pc, #212]	; (bd24 <i2c_master_init+0x2ec>)
    bc4e:	4798      	blx	r3
    bc50:	e74a      	b.n	bae8 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    bc52:	2101      	movs	r1, #1
    bc54:	4640      	mov	r0, r8
    bc56:	4b33      	ldr	r3, [pc, #204]	; (bd24 <i2c_master_init+0x2ec>)
    bc58:	4798      	blx	r3
    bc5a:	0007      	movs	r7, r0
    bc5c:	e751      	b.n	bb02 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    bc5e:	26fa      	movs	r6, #250	; 0xfa
    bc60:	00b6      	lsls	r6, r6, #2
    bc62:	4653      	mov	r3, sl
    bc64:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    bc66:	9800      	ldr	r0, [sp, #0]
    bc68:	9901      	ldr	r1, [sp, #4]
    bc6a:	0002      	movs	r2, r0
    bc6c:	000b      	movs	r3, r1
    bc6e:	4c27      	ldr	r4, [pc, #156]	; (bd0c <i2c_master_init+0x2d4>)
    bc70:	47a0      	blx	r4
    bc72:	9000      	str	r0, [sp, #0]
    bc74:	9101      	str	r1, [sp, #4]
    bc76:	0030      	movs	r0, r6
    bc78:	4b20      	ldr	r3, [pc, #128]	; (bcfc <i2c_master_init+0x2c4>)
    bc7a:	4798      	blx	r3
    bc7c:	2200      	movs	r2, #0
    bc7e:	4b2a      	ldr	r3, [pc, #168]	; (bd28 <i2c_master_init+0x2f0>)
    bc80:	47b8      	blx	r7
    bc82:	0002      	movs	r2, r0
    bc84:	000b      	movs	r3, r1
    bc86:	9800      	ldr	r0, [sp, #0]
    bc88:	9901      	ldr	r1, [sp, #4]
    bc8a:	4c24      	ldr	r4, [pc, #144]	; (bd1c <i2c_master_init+0x2e4>)
    bc8c:	47a0      	blx	r4
    bc8e:	2200      	movs	r2, #0
    bc90:	4b21      	ldr	r3, [pc, #132]	; (bd18 <i2c_master_init+0x2e0>)
    bc92:	4c20      	ldr	r4, [pc, #128]	; (bd14 <i2c_master_init+0x2dc>)
    bc94:	47a0      	blx	r4
    bc96:	4b22      	ldr	r3, [pc, #136]	; (bd20 <i2c_master_init+0x2e8>)
    bc98:	4798      	blx	r3
    bc9a:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    bc9c:	d00c      	beq.n	bcb8 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    bc9e:	0031      	movs	r1, r6
    bca0:	9807      	ldr	r0, [sp, #28]
    bca2:	4b22      	ldr	r3, [pc, #136]	; (bd2c <i2c_master_init+0x2f4>)
    bca4:	4798      	blx	r3
    bca6:	3802      	subs	r0, #2
    bca8:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    bcaa:	002b      	movs	r3, r5
    bcac:	2dff      	cmp	r5, #255	; 0xff
    bcae:	d80c      	bhi.n	bcca <i2c_master_init+0x292>
    bcb0:	28ff      	cmp	r0, #255	; 0xff
    bcb2:	d9bc      	bls.n	bc2e <i2c_master_init+0x1f6>
    bcb4:	2040      	movs	r0, #64	; 0x40
    bcb6:	e6e6      	b.n	ba86 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    bcb8:	0071      	lsls	r1, r6, #1
    bcba:	1e48      	subs	r0, r1, #1
    bcbc:	9b07      	ldr	r3, [sp, #28]
    bcbe:	469c      	mov	ip, r3
    bcc0:	4460      	add	r0, ip
    bcc2:	4b1a      	ldr	r3, [pc, #104]	; (bd2c <i2c_master_init+0x2f4>)
    bcc4:	4798      	blx	r3
    bcc6:	3801      	subs	r0, #1
    bcc8:	e7ef      	b.n	bcaa <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    bcca:	2040      	movs	r0, #64	; 0x40
    bccc:	e6db      	b.n	ba86 <i2c_master_init+0x4e>
    bcce:	46c0      	nop			; (mov r8, r8)
    bcd0:	0000ebb9 	.word	0x0000ebb9
    bcd4:	40000400 	.word	0x40000400
    bcd8:	00010131 	.word	0x00010131
    bcdc:	000100a5 	.word	0x000100a5
    bce0:	0000e9f5 	.word	0x0000e9f5
    bce4:	0000bff5 	.word	0x0000bff5
    bce8:	0000ebf5 	.word	0x0000ebf5
    bcec:	20000578 	.word	0x20000578
    bcf0:	00010229 	.word	0x00010229
    bcf4:	41002000 	.word	0x41002000
    bcf8:	0001014d 	.word	0x0001014d
    bcfc:	00013e1d 	.word	0x00013e1d
    bd00:	00013289 	.word	0x00013289
    bd04:	e826d695 	.word	0xe826d695
    bd08:	3e112e0b 	.word	0x3e112e0b
    bd0c:	00012601 	.word	0x00012601
    bd10:	40240000 	.word	0x40240000
    bd14:	00013789 	.word	0x00013789
    bd18:	3ff00000 	.word	0x3ff00000
    bd1c:	00012c21 	.word	0x00012c21
    bd20:	00013db5 	.word	0x00013db5
    bd24:	0000ea41 	.word	0x0000ea41
    bd28:	40080000 	.word	0x40080000
    bd2c:	000122c1 	.word	0x000122c1

0000bd30 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    bd30:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    bd32:	7e1a      	ldrb	r2, [r3, #24]
    bd34:	0792      	lsls	r2, r2, #30
    bd36:	d507      	bpl.n	bd48 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    bd38:	2202      	movs	r2, #2
    bd3a:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    bd3c:	8b5b      	ldrh	r3, [r3, #26]
    bd3e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    bd40:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    bd42:	17db      	asrs	r3, r3, #31
    bd44:	4018      	ands	r0, r3
}
    bd46:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    bd48:	8b5a      	ldrh	r2, [r3, #26]
    bd4a:	0752      	lsls	r2, r2, #29
    bd4c:	d506      	bpl.n	bd5c <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    bd4e:	6859      	ldr	r1, [r3, #4]
    bd50:	22c0      	movs	r2, #192	; 0xc0
    bd52:	0292      	lsls	r2, r2, #10
    bd54:	430a      	orrs	r2, r1
    bd56:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    bd58:	2018      	movs	r0, #24
    bd5a:	e7f4      	b.n	bd46 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    bd5c:	2000      	movs	r0, #0
    bd5e:	e7f2      	b.n	bd46 <_i2c_master_address_response+0x16>

0000bd60 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    bd60:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    bd62:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    bd64:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    bd66:	2401      	movs	r4, #1
    bd68:	2502      	movs	r5, #2
    bd6a:	7e11      	ldrb	r1, [r2, #24]
    bd6c:	4221      	tst	r1, r4
    bd6e:	d10b      	bne.n	bd88 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    bd70:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    bd72:	4229      	tst	r1, r5
    bd74:	d106      	bne.n	bd84 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    bd76:	3301      	adds	r3, #1
    bd78:	b29b      	uxth	r3, r3
    bd7a:	8901      	ldrh	r1, [r0, #8]
    bd7c:	4299      	cmp	r1, r3
    bd7e:	d8f4      	bhi.n	bd6a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    bd80:	2012      	movs	r0, #18
    bd82:	e002      	b.n	bd8a <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    bd84:	2000      	movs	r0, #0
    bd86:	e000      	b.n	bd8a <_i2c_master_wait_for_bus+0x2a>
    bd88:	2000      	movs	r0, #0
}
    bd8a:	bd30      	pop	{r4, r5, pc}

0000bd8c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    bd8c:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    bd8e:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    bd90:	6862      	ldr	r2, [r4, #4]
    bd92:	2380      	movs	r3, #128	; 0x80
    bd94:	02db      	lsls	r3, r3, #11
    bd96:	4313      	orrs	r3, r2
    bd98:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    bd9a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    bd9c:	4b02      	ldr	r3, [pc, #8]	; (bda8 <_i2c_master_send_hs_master_code+0x1c>)
    bd9e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    bda0:	2301      	movs	r3, #1
    bda2:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    bda4:	bd10      	pop	{r4, pc}
    bda6:	46c0      	nop			; (mov r8, r8)
    bda8:	0000bd61 	.word	0x0000bd61

0000bdac <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    bdac:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    bdae:	2207      	movs	r2, #7
    bdb0:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    bdb2:	421a      	tst	r2, r3
    bdb4:	d1fc      	bne.n	bdb0 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    bdb6:	4770      	bx	lr

0000bdb8 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    bdb8:	b570      	push	{r4, r5, r6, lr}
    bdba:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    bdbc:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    bdbe:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    bdc0:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    bdc2:	8b83      	ldrh	r3, [r0, #28]
    bdc4:	1aed      	subs	r5, r5, r3
    bdc6:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    bdc8:	8b83      	ldrh	r3, [r0, #28]
    bdca:	3b01      	subs	r3, #1
    bdcc:	b29b      	uxth	r3, r3
    bdce:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    bdd0:	0113      	lsls	r3, r2, #4
    bdd2:	d51d      	bpl.n	be10 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    bdd4:	7ac3      	ldrb	r3, [r0, #11]
    bdd6:	2b00      	cmp	r3, #0
    bdd8:	d003      	beq.n	bde2 <_i2c_master_read+0x2a>
    bdda:	8b83      	ldrh	r3, [r0, #28]
    bddc:	b29b      	uxth	r3, r3
    bdde:	2b01      	cmp	r3, #1
    bde0:	d010      	beq.n	be04 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    bde2:	8ba3      	ldrh	r3, [r4, #28]
    bde4:	b29b      	uxth	r3, r3
    bde6:	2b00      	cmp	r3, #0
    bde8:	d102      	bne.n	bdf0 <_i2c_master_read+0x38>
		if (module->send_stop) {
    bdea:	7aa3      	ldrb	r3, [r4, #10]
    bdec:	2b00      	cmp	r3, #0
    bdee:	d11c      	bne.n	be2a <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    bdf0:	0020      	movs	r0, r4
    bdf2:	4b12      	ldr	r3, [pc, #72]	; (be3c <_i2c_master_read+0x84>)
    bdf4:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    bdf6:	6a23      	ldr	r3, [r4, #32]
    bdf8:	195d      	adds	r5, r3, r5
    bdfa:	2328      	movs	r3, #40	; 0x28
    bdfc:	5cf3      	ldrb	r3, [r6, r3]
    bdfe:	b2db      	uxtb	r3, r3
    be00:	702b      	strb	r3, [r5, #0]
}
    be02:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    be04:	6872      	ldr	r2, [r6, #4]
    be06:	2380      	movs	r3, #128	; 0x80
    be08:	02db      	lsls	r3, r3, #11
    be0a:	4313      	orrs	r3, r2
    be0c:	6073      	str	r3, [r6, #4]
    be0e:	e7e8      	b.n	bde2 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    be10:	7ac3      	ldrb	r3, [r0, #11]
    be12:	2b00      	cmp	r3, #0
    be14:	d0e5      	beq.n	bde2 <_i2c_master_read+0x2a>
    be16:	8b83      	ldrh	r3, [r0, #28]
    be18:	b29b      	uxth	r3, r3
    be1a:	2b00      	cmp	r3, #0
    be1c:	d1e1      	bne.n	bde2 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    be1e:	6872      	ldr	r2, [r6, #4]
    be20:	2380      	movs	r3, #128	; 0x80
    be22:	02db      	lsls	r3, r3, #11
    be24:	4313      	orrs	r3, r2
    be26:	6073      	str	r3, [r6, #4]
    be28:	e7db      	b.n	bde2 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    be2a:	0020      	movs	r0, r4
    be2c:	4b03      	ldr	r3, [pc, #12]	; (be3c <_i2c_master_read+0x84>)
    be2e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    be30:	6872      	ldr	r2, [r6, #4]
    be32:	23c0      	movs	r3, #192	; 0xc0
    be34:	029b      	lsls	r3, r3, #10
    be36:	4313      	orrs	r3, r2
    be38:	6073      	str	r3, [r6, #4]
    be3a:	e7d9      	b.n	bdf0 <_i2c_master_read+0x38>
    be3c:	0000bdad 	.word	0x0000bdad

0000be40 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    be40:	b570      	push	{r4, r5, r6, lr}
    be42:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    be44:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    be46:	8b6b      	ldrh	r3, [r5, #26]
    be48:	075b      	lsls	r3, r3, #29
    be4a:	d503      	bpl.n	be54 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    be4c:	221e      	movs	r2, #30
    be4e:	2325      	movs	r3, #37	; 0x25
    be50:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    be52:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    be54:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    be56:	8b83      	ldrh	r3, [r0, #28]
    be58:	1af6      	subs	r6, r6, r3
    be5a:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    be5c:	8b83      	ldrh	r3, [r0, #28]
    be5e:	3b01      	subs	r3, #1
    be60:	b29b      	uxth	r3, r3
    be62:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    be64:	4b04      	ldr	r3, [pc, #16]	; (be78 <_i2c_master_write+0x38>)
    be66:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    be68:	6a23      	ldr	r3, [r4, #32]
    be6a:	199e      	adds	r6, r3, r6
    be6c:	7833      	ldrb	r3, [r6, #0]
    be6e:	b2db      	uxtb	r3, r3
    be70:	2228      	movs	r2, #40	; 0x28
    be72:	54ab      	strb	r3, [r5, r2]
    be74:	e7ed      	b.n	be52 <_i2c_master_write+0x12>
    be76:	46c0      	nop			; (mov r8, r8)
    be78:	0000bdad 	.word	0x0000bdad

0000be7c <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    be7c:	b570      	push	{r4, r5, r6, lr}
    be7e:	0005      	movs	r5, r0
    be80:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    be82:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    be84:	7a4b      	ldrb	r3, [r1, #9]
    be86:	2b00      	cmp	r3, #0
    be88:	d11a      	bne.n	bec0 <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    be8a:	6873      	ldr	r3, [r6, #4]
    be8c:	4a13      	ldr	r2, [pc, #76]	; (bedc <_i2c_master_write_packet+0x60>)
    be8e:	4013      	ands	r3, r2
    be90:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
    be92:	6863      	ldr	r3, [r4, #4]
    be94:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
    be96:	8863      	ldrh	r3, [r4, #2]
    be98:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
    be9a:	2200      	movs	r2, #0
    be9c:	2324      	movs	r3, #36	; 0x24
    be9e:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
    bea0:	3205      	adds	r2, #5
    bea2:	3301      	adds	r3, #1
    bea4:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
    bea6:	3b22      	subs	r3, #34	; 0x22
    bea8:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
    beaa:	7a23      	ldrb	r3, [r4, #8]
    beac:	2b00      	cmp	r3, #0
    beae:	d10b      	bne.n	bec8 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    beb0:	8823      	ldrh	r3, [r4, #0]
    beb2:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    beb4:	7a62      	ldrb	r2, [r4, #9]
    beb6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    beb8:	4313      	orrs	r3, r2
    beba:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
    bebc:	2000      	movs	r0, #0
    bebe:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    bec0:	7a89      	ldrb	r1, [r1, #10]
    bec2:	4b07      	ldr	r3, [pc, #28]	; (bee0 <_i2c_master_write_packet+0x64>)
    bec4:	4798      	blx	r3
    bec6:	e7e0      	b.n	be8a <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    bec8:	8823      	ldrh	r3, [r4, #0]
    beca:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    becc:	7a62      	ldrb	r2, [r4, #9]
    bece:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    bed0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    bed2:	2280      	movs	r2, #128	; 0x80
    bed4:	0212      	lsls	r2, r2, #8
    bed6:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    bed8:	6273      	str	r3, [r6, #36]	; 0x24
    beda:	e7ef      	b.n	bebc <_i2c_master_write_packet+0x40>
    bedc:	fffbffff 	.word	0xfffbffff
    bee0:	0000bd8d 	.word	0x0000bd8d

0000bee4 <_i2c_master_read_packet>:
{
    bee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bee6:	0005      	movs	r5, r0
    bee8:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    beea:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
    beec:	684b      	ldr	r3, [r1, #4]
    beee:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
    bef0:	884b      	ldrh	r3, [r1, #2]
    bef2:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
    bef4:	2201      	movs	r2, #1
    bef6:	2324      	movs	r3, #36	; 0x24
    bef8:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
    befa:	3204      	adds	r2, #4
    befc:	3301      	adds	r3, #1
    befe:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    bf00:	6837      	ldr	r7, [r6, #0]
    bf02:	013f      	lsls	r7, r7, #4
    bf04:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
    bf06:	7a4b      	ldrb	r3, [r1, #9]
    bf08:	2b00      	cmp	r3, #0
    bf0a:	d117      	bne.n	bf3c <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
    bf0c:	2f00      	cmp	r7, #0
    bf0e:	d002      	beq.n	bf16 <_i2c_master_read_packet+0x32>
    bf10:	8863      	ldrh	r3, [r4, #2]
    bf12:	2b01      	cmp	r3, #1
    bf14:	d016      	beq.n	bf44 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    bf16:	6873      	ldr	r3, [r6, #4]
    bf18:	4a20      	ldr	r2, [pc, #128]	; (bf9c <_i2c_master_read_packet+0xb8>)
    bf1a:	4013      	ands	r3, r2
    bf1c:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
    bf1e:	7a23      	ldrb	r3, [r4, #8]
    bf20:	2b00      	cmp	r3, #0
    bf22:	d115      	bne.n	bf50 <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
    bf24:	2303      	movs	r3, #3
    bf26:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    bf28:	8823      	ldrh	r3, [r4, #0]
    bf2a:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    bf2c:	7a62      	ldrb	r2, [r4, #9]
    bf2e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    bf30:	4313      	orrs	r3, r2
    bf32:	2201      	movs	r2, #1
    bf34:	4313      	orrs	r3, r2
    bf36:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
    bf38:	2000      	movs	r0, #0
}
    bf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    bf3c:	7a89      	ldrb	r1, [r1, #10]
    bf3e:	4b18      	ldr	r3, [pc, #96]	; (bfa0 <_i2c_master_read_packet+0xbc>)
    bf40:	4798      	blx	r3
    bf42:	e7e3      	b.n	bf0c <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    bf44:	6872      	ldr	r2, [r6, #4]
    bf46:	2380      	movs	r3, #128	; 0x80
    bf48:	02db      	lsls	r3, r3, #11
    bf4a:	4313      	orrs	r3, r2
    bf4c:	6073      	str	r3, [r6, #4]
    bf4e:	e7e6      	b.n	bf1e <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
    bf50:	8823      	ldrh	r3, [r4, #0]
    bf52:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    bf54:	7a62      	ldrb	r2, [r4, #9]
    bf56:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    bf58:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    bf5a:	2280      	movs	r2, #128	; 0x80
    bf5c:	0212      	lsls	r2, r2, #8
    bf5e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    bf60:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    bf62:	0028      	movs	r0, r5
    bf64:	4b0f      	ldr	r3, [pc, #60]	; (bfa4 <_i2c_master_read_packet+0xc0>)
    bf66:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    bf68:	6873      	ldr	r3, [r6, #4]
    bf6a:	4a0c      	ldr	r2, [pc, #48]	; (bf9c <_i2c_master_read_packet+0xb8>)
    bf6c:	4013      	ands	r3, r2
    bf6e:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
    bf70:	2800      	cmp	r0, #0
    bf72:	d1e2      	bne.n	bf3a <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
    bf74:	0028      	movs	r0, r5
    bf76:	4b0c      	ldr	r3, [pc, #48]	; (bfa8 <_i2c_master_read_packet+0xc4>)
    bf78:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
    bf7a:	2800      	cmp	r0, #0
    bf7c:	d1dd      	bne.n	bf3a <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
    bf7e:	2303      	movs	r3, #3
    bf80:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    bf82:	8823      	ldrh	r3, [r4, #0]
    bf84:	0a1b      	lsrs	r3, r3, #8
    bf86:	2278      	movs	r2, #120	; 0x78
    bf88:	4313      	orrs	r3, r2
    bf8a:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    bf8c:	7a62      	ldrb	r2, [r4, #9]
    bf8e:	0392      	lsls	r2, r2, #14
    bf90:	2101      	movs	r1, #1
    bf92:	430a      	orrs	r2, r1
    bf94:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    bf96:	6273      	str	r3, [r6, #36]	; 0x24
    bf98:	e7cf      	b.n	bf3a <_i2c_master_read_packet+0x56>
    bf9a:	46c0      	nop			; (mov r8, r8)
    bf9c:	fffbffff 	.word	0xfffbffff
    bfa0:	0000bd8d 	.word	0x0000bd8d
    bfa4:	0000bd61 	.word	0x0000bd61
    bfa8:	0000bd31 	.word	0x0000bd31

0000bfac <i2c_master_read_packet_job>:
{
    bfac:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    bfae:	8b83      	ldrh	r3, [r0, #28]
    bfb0:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    bfb2:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    bfb4:	2b00      	cmp	r3, #0
    bfb6:	d001      	beq.n	bfbc <i2c_master_read_packet_job+0x10>
}
    bfb8:	0010      	movs	r0, r2
    bfba:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    bfbc:	3301      	adds	r3, #1
    bfbe:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    bfc0:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    bfc2:	4b02      	ldr	r3, [pc, #8]	; (bfcc <i2c_master_read_packet_job+0x20>)
    bfc4:	4798      	blx	r3
    bfc6:	0002      	movs	r2, r0
    bfc8:	e7f6      	b.n	bfb8 <i2c_master_read_packet_job+0xc>
    bfca:	46c0      	nop			; (mov r8, r8)
    bfcc:	0000bee5 	.word	0x0000bee5

0000bfd0 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    bfd0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
    bfd2:	8b83      	ldrh	r3, [r0, #28]
    bfd4:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    bfd6:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    bfd8:	2b00      	cmp	r3, #0
    bfda:	d001      	beq.n	bfe0 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
    bfdc:	0010      	movs	r0, r2
    bfde:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    bfe0:	3301      	adds	r3, #1
    bfe2:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    bfe4:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    bfe6:	4b02      	ldr	r3, [pc, #8]	; (bff0 <i2c_master_write_packet_job+0x20>)
    bfe8:	4798      	blx	r3
    bfea:	0002      	movs	r2, r0
    bfec:	e7f6      	b.n	bfdc <i2c_master_write_packet_job+0xc>
    bfee:	46c0      	nop			; (mov r8, r8)
    bff0:	0000be7d 	.word	0x0000be7d

0000bff4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    bff4:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    bff6:	0080      	lsls	r0, r0, #2
    bff8:	4b75      	ldr	r3, [pc, #468]	; (c1d0 <_i2c_master_interrupt_handler+0x1dc>)
    bffa:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    bffc:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    bffe:	682b      	ldr	r3, [r5, #0]
    c000:	011b      	lsls	r3, r3, #4
    c002:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    c004:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    c006:	7e26      	ldrb	r6, [r4, #24]
    c008:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    c00a:	8b63      	ldrh	r3, [r4, #26]
    c00c:	b29b      	uxth	r3, r3
    c00e:	2b00      	cmp	r3, #0
    c010:	d103      	bne.n	c01a <_i2c_master_interrupt_handler+0x26>
    c012:	8ba3      	ldrh	r3, [r4, #28]
    c014:	b29b      	uxth	r3, r3
    c016:	2b00      	cmp	r3, #0
    c018:	d123      	bne.n	c062 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    c01a:	8b63      	ldrh	r3, [r4, #26]
    c01c:	b29b      	uxth	r3, r3
    c01e:	2b00      	cmp	r3, #0
    c020:	d008      	beq.n	c034 <_i2c_master_interrupt_handler+0x40>
    c022:	8ba3      	ldrh	r3, [r4, #28]
    c024:	b29b      	uxth	r3, r3
    c026:	2b00      	cmp	r3, #0
    c028:	d104      	bne.n	c034 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    c02a:	3325      	adds	r3, #37	; 0x25
    c02c:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    c02e:	2b05      	cmp	r3, #5
    c030:	d100      	bne.n	c034 <_i2c_master_interrupt_handler+0x40>
    c032:	e06d      	b.n	c110 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    c034:	8b63      	ldrh	r3, [r4, #26]
    c036:	b29b      	uxth	r3, r3
    c038:	2b00      	cmp	r3, #0
    c03a:	d024      	beq.n	c086 <_i2c_master_interrupt_handler+0x92>
    c03c:	8ba3      	ldrh	r3, [r4, #28]
    c03e:	b29b      	uxth	r3, r3
    c040:	2b00      	cmp	r3, #0
    c042:	d020      	beq.n	c086 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    c044:	8b6b      	ldrh	r3, [r5, #26]
    c046:	069b      	lsls	r3, r3, #26
    c048:	d500      	bpl.n	c04c <_i2c_master_interrupt_handler+0x58>
    c04a:	e081      	b.n	c150 <_i2c_master_interrupt_handler+0x15c>
    c04c:	2a00      	cmp	r2, #0
    c04e:	d004      	beq.n	c05a <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    c050:	8ba3      	ldrh	r3, [r4, #28]
    c052:	b29b      	uxth	r3, r3
    c054:	2b01      	cmp	r3, #1
    c056:	d100      	bne.n	c05a <_i2c_master_interrupt_handler+0x66>
    c058:	e07a      	b.n	c150 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    c05a:	2241      	movs	r2, #65	; 0x41
    c05c:	2325      	movs	r3, #37	; 0x25
    c05e:	54e2      	strb	r2, [r4, r3]
    c060:	e011      	b.n	c086 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    c062:	7e2b      	ldrb	r3, [r5, #24]
    c064:	07db      	lsls	r3, r3, #31
    c066:	d507      	bpl.n	c078 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    c068:	2301      	movs	r3, #1
    c06a:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    c06c:	8b6b      	ldrh	r3, [r5, #26]
    c06e:	079b      	lsls	r3, r3, #30
    c070:	d52e      	bpl.n	c0d0 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    c072:	2241      	movs	r2, #65	; 0x41
    c074:	2325      	movs	r3, #37	; 0x25
    c076:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    c078:	8ba3      	ldrh	r3, [r4, #28]
    c07a:	b29b      	uxth	r3, r3
    c07c:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    c07e:	2325      	movs	r3, #37	; 0x25
    c080:	5ce3      	ldrb	r3, [r4, r3]
    c082:	2b05      	cmp	r3, #5
    c084:	d038      	beq.n	c0f8 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    c086:	8b63      	ldrh	r3, [r4, #26]
    c088:	b29b      	uxth	r3, r3
    c08a:	2b00      	cmp	r3, #0
    c08c:	d007      	beq.n	c09e <_i2c_master_interrupt_handler+0xaa>
    c08e:	8ba3      	ldrh	r3, [r4, #28]
    c090:	b29b      	uxth	r3, r3
    c092:	2b00      	cmp	r3, #0
    c094:	d103      	bne.n	c09e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    c096:	3325      	adds	r3, #37	; 0x25
    c098:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    c09a:	2b05      	cmp	r3, #5
    c09c:	d064      	beq.n	c168 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    c09e:	2325      	movs	r3, #37	; 0x25
    c0a0:	5ce3      	ldrb	r3, [r4, r3]
    c0a2:	2b05      	cmp	r3, #5
    c0a4:	d013      	beq.n	c0ce <_i2c_master_interrupt_handler+0xda>
    c0a6:	2325      	movs	r3, #37	; 0x25
    c0a8:	5ce3      	ldrb	r3, [r4, r3]
    c0aa:	2b00      	cmp	r3, #0
    c0ac:	d00f      	beq.n	c0ce <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    c0ae:	2303      	movs	r3, #3
    c0b0:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    c0b2:	2300      	movs	r3, #0
    c0b4:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    c0b6:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    c0b8:	3325      	adds	r3, #37	; 0x25
    c0ba:	5ce3      	ldrb	r3, [r4, r3]
    c0bc:	2b41      	cmp	r3, #65	; 0x41
    c0be:	d003      	beq.n	c0c8 <_i2c_master_interrupt_handler+0xd4>
    c0c0:	7aa3      	ldrb	r3, [r4, #10]
    c0c2:	2b00      	cmp	r3, #0
    c0c4:	d000      	beq.n	c0c8 <_i2c_master_interrupt_handler+0xd4>
    c0c6:	e075      	b.n	c1b4 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    c0c8:	0773      	lsls	r3, r6, #29
    c0ca:	d500      	bpl.n	c0ce <_i2c_master_interrupt_handler+0xda>
    c0cc:	e07b      	b.n	c1c6 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    c0ce:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    c0d0:	8b6b      	ldrh	r3, [r5, #26]
    c0d2:	075b      	lsls	r3, r3, #29
    c0d4:	d5d0      	bpl.n	c078 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    c0d6:	2218      	movs	r2, #24
    c0d8:	2325      	movs	r3, #37	; 0x25
    c0da:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    c0dc:	2300      	movs	r3, #0
    c0de:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    c0e0:	7aa3      	ldrb	r3, [r4, #10]
    c0e2:	2b00      	cmp	r3, #0
    c0e4:	d0c8      	beq.n	c078 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    c0e6:	0020      	movs	r0, r4
    c0e8:	4b3a      	ldr	r3, [pc, #232]	; (c1d4 <_i2c_master_interrupt_handler+0x1e0>)
    c0ea:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    c0ec:	686a      	ldr	r2, [r5, #4]
    c0ee:	23c0      	movs	r3, #192	; 0xc0
    c0f0:	029b      	lsls	r3, r3, #10
    c0f2:	4313      	orrs	r3, r2
    c0f4:	606b      	str	r3, [r5, #4]
    c0f6:	e7bf      	b.n	c078 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    c0f8:	331f      	adds	r3, #31
    c0fa:	5ce3      	ldrb	r3, [r4, r3]
    c0fc:	2b00      	cmp	r3, #0
    c0fe:	d003      	beq.n	c108 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    c100:	0020      	movs	r0, r4
    c102:	4b35      	ldr	r3, [pc, #212]	; (c1d8 <_i2c_master_interrupt_handler+0x1e4>)
    c104:	4798      	blx	r3
    c106:	e7be      	b.n	c086 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    c108:	0020      	movs	r0, r4
    c10a:	4b34      	ldr	r3, [pc, #208]	; (c1dc <_i2c_master_interrupt_handler+0x1e8>)
    c10c:	4798      	blx	r3
    c10e:	e7ba      	b.n	c086 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    c110:	331f      	adds	r3, #31
    c112:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    c114:	2b00      	cmp	r3, #0
    c116:	d000      	beq.n	c11a <_i2c_master_interrupt_handler+0x126>
    c118:	e78c      	b.n	c034 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    c11a:	3303      	adds	r3, #3
    c11c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    c11e:	2300      	movs	r3, #0
    c120:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    c122:	3325      	adds	r3, #37	; 0x25
    c124:	2200      	movs	r2, #0
    c126:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    c128:	7aa3      	ldrb	r3, [r4, #10]
    c12a:	2b00      	cmp	r3, #0
    c12c:	d107      	bne.n	c13e <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    c12e:	2301      	movs	r3, #1
    c130:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    c132:	07f3      	lsls	r3, r6, #31
    c134:	d5a7      	bpl.n	c086 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    c136:	68e3      	ldr	r3, [r4, #12]
    c138:	0020      	movs	r0, r4
    c13a:	4798      	blx	r3
    c13c:	e7a3      	b.n	c086 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    c13e:	0020      	movs	r0, r4
    c140:	4b24      	ldr	r3, [pc, #144]	; (c1d4 <_i2c_master_interrupt_handler+0x1e0>)
    c142:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    c144:	686a      	ldr	r2, [r5, #4]
    c146:	23c0      	movs	r3, #192	; 0xc0
    c148:	029b      	lsls	r3, r3, #10
    c14a:	4313      	orrs	r3, r2
    c14c:	606b      	str	r3, [r5, #4]
    c14e:	e7f0      	b.n	c132 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    c150:	2324      	movs	r3, #36	; 0x24
    c152:	5ce3      	ldrb	r3, [r4, r3]
    c154:	2b00      	cmp	r3, #0
    c156:	d103      	bne.n	c160 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    c158:	0020      	movs	r0, r4
    c15a:	4b20      	ldr	r3, [pc, #128]	; (c1dc <_i2c_master_interrupt_handler+0x1e8>)
    c15c:	4798      	blx	r3
    c15e:	e792      	b.n	c086 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    c160:	0020      	movs	r0, r4
    c162:	4b1d      	ldr	r3, [pc, #116]	; (c1d8 <_i2c_master_interrupt_handler+0x1e4>)
    c164:	4798      	blx	r3
    c166:	e78e      	b.n	c086 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    c168:	331f      	adds	r3, #31
    c16a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    c16c:	2b01      	cmp	r3, #1
    c16e:	d196      	bne.n	c09e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    c170:	7e2b      	ldrb	r3, [r5, #24]
    c172:	079b      	lsls	r3, r3, #30
    c174:	d501      	bpl.n	c17a <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    c176:	2302      	movs	r3, #2
    c178:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    c17a:	2303      	movs	r3, #3
    c17c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    c17e:	2300      	movs	r3, #0
    c180:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    c182:	3325      	adds	r3, #37	; 0x25
    c184:	2200      	movs	r2, #0
    c186:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    c188:	07b3      	lsls	r3, r6, #30
    c18a:	d503      	bpl.n	c194 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    c18c:	2324      	movs	r3, #36	; 0x24
    c18e:	5ce3      	ldrb	r3, [r4, r3]
    c190:	2b01      	cmp	r3, #1
    c192:	d00b      	beq.n	c1ac <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    c194:	07f3      	lsls	r3, r6, #31
    c196:	d400      	bmi.n	c19a <_i2c_master_interrupt_handler+0x1a6>
    c198:	e781      	b.n	c09e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    c19a:	2324      	movs	r3, #36	; 0x24
    c19c:	5ce3      	ldrb	r3, [r4, r3]
    c19e:	2b00      	cmp	r3, #0
    c1a0:	d000      	beq.n	c1a4 <_i2c_master_interrupt_handler+0x1b0>
    c1a2:	e77c      	b.n	c09e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    c1a4:	68e3      	ldr	r3, [r4, #12]
    c1a6:	0020      	movs	r0, r4
    c1a8:	4798      	blx	r3
    c1aa:	e778      	b.n	c09e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    c1ac:	6923      	ldr	r3, [r4, #16]
    c1ae:	0020      	movs	r0, r4
    c1b0:	4798      	blx	r3
    c1b2:	e774      	b.n	c09e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    c1b4:	0020      	movs	r0, r4
    c1b6:	4b07      	ldr	r3, [pc, #28]	; (c1d4 <_i2c_master_interrupt_handler+0x1e0>)
    c1b8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    c1ba:	686a      	ldr	r2, [r5, #4]
    c1bc:	23e0      	movs	r3, #224	; 0xe0
    c1be:	02db      	lsls	r3, r3, #11
    c1c0:	4313      	orrs	r3, r2
    c1c2:	606b      	str	r3, [r5, #4]
    c1c4:	e780      	b.n	c0c8 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    c1c6:	6963      	ldr	r3, [r4, #20]
    c1c8:	0020      	movs	r0, r4
    c1ca:	4798      	blx	r3
}
    c1cc:	e77f      	b.n	c0ce <_i2c_master_interrupt_handler+0xda>
    c1ce:	46c0      	nop			; (mov r8, r8)
    c1d0:	20000578 	.word	0x20000578
    c1d4:	0000bdad 	.word	0x0000bdad
    c1d8:	0000bdb9 	.word	0x0000bdb9
    c1dc:	0000be41 	.word	0x0000be41

0000c1e0 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    c1e0:	4b09      	ldr	r3, [pc, #36]	; (c208 <_tcc_get_inst_index+0x28>)
    c1e2:	4298      	cmp	r0, r3
    c1e4:	d00c      	beq.n	c200 <_tcc_get_inst_index+0x20>
    c1e6:	4b09      	ldr	r3, [pc, #36]	; (c20c <_tcc_get_inst_index+0x2c>)
    c1e8:	4298      	cmp	r0, r3
    c1ea:	d007      	beq.n	c1fc <_tcc_get_inst_index+0x1c>
    c1ec:	4a08      	ldr	r2, [pc, #32]	; (c210 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    c1ee:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    c1f0:	4290      	cmp	r0, r2
    c1f2:	d001      	beq.n	c1f8 <_tcc_get_inst_index+0x18>
}
    c1f4:	0018      	movs	r0, r3
    c1f6:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    c1f8:	3302      	adds	r3, #2
    c1fa:	e002      	b.n	c202 <_tcc_get_inst_index+0x22>
    c1fc:	2301      	movs	r3, #1
    c1fe:	e000      	b.n	c202 <_tcc_get_inst_index+0x22>
    c200:	2300      	movs	r3, #0
			return i;
    c202:	b2db      	uxtb	r3, r3
    c204:	e7f6      	b.n	c1f4 <_tcc_get_inst_index+0x14>
    c206:	46c0      	nop			; (mov r8, r8)
    c208:	42002000 	.word	0x42002000
    c20c:	42002400 	.word	0x42002400
    c210:	42002800 	.word	0x42002800

0000c214 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    c214:	b510      	push	{r4, lr}
    c216:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    c218:	0008      	movs	r0, r1
    c21a:	4b4f      	ldr	r3, [pc, #316]	; (c358 <tcc_get_config_defaults+0x144>)
    c21c:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    c21e:	2300      	movs	r3, #0
    c220:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    c222:	0080      	lsls	r0, r0, #2
    c224:	4a4d      	ldr	r2, [pc, #308]	; (c35c <tcc_get_config_defaults+0x148>)
    c226:	5882      	ldr	r2, [r0, r2]
    c228:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    c22a:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    c22c:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    c22e:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    c230:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    c232:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    c234:	61e3      	str	r3, [r4, #28]
    c236:	6223      	str	r3, [r4, #32]
    c238:	6263      	str	r3, [r4, #36]	; 0x24
    c23a:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    c23c:	7523      	strb	r3, [r4, #20]
    c23e:	7563      	strb	r3, [r4, #21]
    c240:	75a3      	strb	r3, [r4, #22]
    c242:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    c244:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    c246:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    c248:	7423      	strb	r3, [r4, #16]
    c24a:	7463      	strb	r3, [r4, #17]
    c24c:	74a3      	strb	r3, [r4, #18]
    c24e:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    c250:	222c      	movs	r2, #44	; 0x2c
    c252:	54a3      	strb	r3, [r4, r2]
    c254:	3201      	adds	r2, #1
    c256:	54a3      	strb	r3, [r4, r2]
    c258:	3201      	adds	r2, #1
    c25a:	54a3      	strb	r3, [r4, r2]
    c25c:	3201      	adds	r2, #1
    c25e:	54a3      	strb	r3, [r4, r2]
    c260:	3201      	adds	r2, #1
    c262:	54a3      	strb	r3, [r4, r2]
    c264:	3201      	adds	r2, #1
    c266:	54a3      	strb	r3, [r4, r2]
    c268:	3201      	adds	r2, #1
    c26a:	54a3      	strb	r3, [r4, r2]
    c26c:	3201      	adds	r2, #1
    c26e:	54a3      	strb	r3, [r4, r2]
    c270:	3201      	adds	r2, #1
    c272:	54a3      	strb	r3, [r4, r2]
    c274:	3201      	adds	r2, #1
    c276:	54a3      	strb	r3, [r4, r2]
    c278:	3201      	adds	r2, #1
    c27a:	54a3      	strb	r3, [r4, r2]
    c27c:	3201      	adds	r2, #1
    c27e:	54a3      	strb	r3, [r4, r2]
    c280:	3201      	adds	r2, #1
    c282:	54a3      	strb	r3, [r4, r2]
    c284:	3201      	adds	r2, #1
    c286:	54a3      	strb	r3, [r4, r2]
    c288:	3201      	adds	r2, #1
    c28a:	54a3      	strb	r3, [r4, r2]
    c28c:	3201      	adds	r2, #1
    c28e:	54a3      	strb	r3, [r4, r2]
    c290:	3201      	adds	r2, #1
    c292:	54a3      	strb	r3, [r4, r2]
    c294:	3201      	adds	r2, #1
    c296:	54a3      	strb	r3, [r4, r2]
    c298:	3201      	adds	r2, #1
    c29a:	54a3      	strb	r3, [r4, r2]
    c29c:	3201      	adds	r2, #1
    c29e:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    c2a0:	3201      	adds	r2, #1
    c2a2:	54a3      	strb	r3, [r4, r2]
    c2a4:	3201      	adds	r2, #1
    c2a6:	54a3      	strb	r3, [r4, r2]
    c2a8:	3201      	adds	r2, #1
    c2aa:	54a3      	strb	r3, [r4, r2]
    c2ac:	3201      	adds	r2, #1
    c2ae:	54a3      	strb	r3, [r4, r2]
    c2b0:	3201      	adds	r2, #1
    c2b2:	54a3      	strb	r3, [r4, r2]
    c2b4:	3201      	adds	r2, #1
    c2b6:	54a3      	strb	r3, [r4, r2]
    c2b8:	3201      	adds	r2, #1
    c2ba:	54a3      	strb	r3, [r4, r2]
    c2bc:	3201      	adds	r2, #1
    c2be:	54a3      	strb	r3, [r4, r2]
    c2c0:	3201      	adds	r2, #1
    c2c2:	54a3      	strb	r3, [r4, r2]
    c2c4:	3201      	adds	r2, #1
    c2c6:	54a3      	strb	r3, [r4, r2]
    c2c8:	3201      	adds	r2, #1
    c2ca:	54a3      	strb	r3, [r4, r2]
    c2cc:	3201      	adds	r2, #1
    c2ce:	54a3      	strb	r3, [r4, r2]
    c2d0:	3201      	adds	r2, #1
    c2d2:	54a3      	strb	r3, [r4, r2]
    c2d4:	3201      	adds	r2, #1
    c2d6:	54a3      	strb	r3, [r4, r2]
    c2d8:	3201      	adds	r2, #1
    c2da:	54a3      	strb	r3, [r4, r2]
    c2dc:	3201      	adds	r2, #1
    c2de:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    c2e0:	3201      	adds	r2, #1
    c2e2:	54a3      	strb	r3, [r4, r2]
    c2e4:	3201      	adds	r2, #1
    c2e6:	54a3      	strb	r3, [r4, r2]
    c2e8:	3201      	adds	r2, #1
    c2ea:	54a3      	strb	r3, [r4, r2]
    c2ec:	3201      	adds	r2, #1
    c2ee:	54a3      	strb	r3, [r4, r2]
    c2f0:	3201      	adds	r2, #1
    c2f2:	54a3      	strb	r3, [r4, r2]
    c2f4:	3201      	adds	r2, #1
    c2f6:	54a3      	strb	r3, [r4, r2]
    c2f8:	3201      	adds	r2, #1
    c2fa:	54a3      	strb	r3, [r4, r2]
    c2fc:	3201      	adds	r2, #1
    c2fe:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    c300:	3241      	adds	r2, #65	; 0x41
    c302:	54a3      	strb	r3, [r4, r2]
    c304:	65a3      	str	r3, [r4, #88]	; 0x58
    c306:	67a3      	str	r3, [r4, #120]	; 0x78
    c308:	3201      	adds	r2, #1
    c30a:	54a3      	strb	r3, [r4, r2]
    c30c:	65e3      	str	r3, [r4, #92]	; 0x5c
    c30e:	67e3      	str	r3, [r4, #124]	; 0x7c
    c310:	3201      	adds	r2, #1
    c312:	54a3      	strb	r3, [r4, r2]
    c314:	6623      	str	r3, [r4, #96]	; 0x60
    c316:	3a1a      	subs	r2, #26
    c318:	50a3      	str	r3, [r4, r2]
    c31a:	321b      	adds	r2, #27
    c31c:	54a3      	strb	r3, [r4, r2]
    c31e:	6663      	str	r3, [r4, #100]	; 0x64
    c320:	3a17      	subs	r2, #23
    c322:	50a3      	str	r3, [r4, r2]
    c324:	3218      	adds	r2, #24
    c326:	54a3      	strb	r3, [r4, r2]
    c328:	66a3      	str	r3, [r4, #104]	; 0x68
    c32a:	3a14      	subs	r2, #20
    c32c:	50a3      	str	r3, [r4, r2]
    c32e:	3215      	adds	r2, #21
    c330:	54a3      	strb	r3, [r4, r2]
    c332:	66e3      	str	r3, [r4, #108]	; 0x6c
    c334:	3a11      	subs	r2, #17
    c336:	50a3      	str	r3, [r4, r2]
    c338:	3212      	adds	r2, #18
    c33a:	54a3      	strb	r3, [r4, r2]
    c33c:	6723      	str	r3, [r4, #112]	; 0x70
    c33e:	3a0e      	subs	r2, #14
    c340:	50a3      	str	r3, [r4, r2]
    c342:	320f      	adds	r2, #15
    c344:	54a3      	strb	r3, [r4, r2]
    c346:	6763      	str	r3, [r4, #116]	; 0x74
    c348:	3a0b      	subs	r2, #11
    c34a:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    c34c:	2101      	movs	r1, #1
    c34e:	320c      	adds	r2, #12
    c350:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    c352:	3201      	adds	r2, #1
    c354:	54a3      	strb	r3, [r4, r2]
}
    c356:	bd10      	pop	{r4, pc}
    c358:	0000c1e1 	.word	0x0000c1e1
    c35c:	0001657c 	.word	0x0001657c

0000c360 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    c360:	b5f0      	push	{r4, r5, r6, r7, lr}
    c362:	46de      	mov	lr, fp
    c364:	4657      	mov	r7, sl
    c366:	464e      	mov	r6, r9
    c368:	4645      	mov	r5, r8
    c36a:	b5e0      	push	{r5, r6, r7, lr}
    c36c:	b091      	sub	sp, #68	; 0x44
    c36e:	9001      	str	r0, [sp, #4]
    c370:	000c      	movs	r4, r1
    c372:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    c374:	0008      	movs	r0, r1
    c376:	4bc3      	ldr	r3, [pc, #780]	; (c684 <tcc_init+0x324>)
    c378:	4798      	blx	r3
    c37a:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    c37c:	0001      	movs	r1, r0
    c37e:	48c2      	ldr	r0, [pc, #776]	; (c688 <tcc_init+0x328>)
    c380:	6a02      	ldr	r2, [r0, #32]
    c382:	009e      	lsls	r6, r3, #2
    c384:	4fc1      	ldr	r7, [pc, #772]	; (c68c <tcc_init+0x32c>)
    c386:	59f7      	ldr	r7, [r6, r7]
    c388:	433a      	orrs	r2, r7
    c38a:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    c38c:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    c38e:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    c390:	0792      	lsls	r2, r2, #30
    c392:	d506      	bpl.n	c3a2 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    c394:	b011      	add	sp, #68	; 0x44
    c396:	bc3c      	pop	{r2, r3, r4, r5}
    c398:	4690      	mov	r8, r2
    c39a:	4699      	mov	r9, r3
    c39c:	46a2      	mov	sl, r4
    c39e:	46ab      	mov	fp, r5
    c3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    c3a2:	6822      	ldr	r2, [r4, #0]
    c3a4:	2701      	movs	r7, #1
    c3a6:	4017      	ands	r7, r2
    c3a8:	d1f4      	bne.n	c394 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    c3aa:	48b9      	ldr	r0, [pc, #740]	; (c690 <tcc_init+0x330>)
    c3ac:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    c3ae:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    c3b0:	682e      	ldr	r6, [r5, #0]
    c3b2:	42b2      	cmp	r2, r6
    c3b4:	d3ee      	bcc.n	c394 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    c3b6:	686e      	ldr	r6, [r5, #4]
    c3b8:	42b2      	cmp	r2, r6
    c3ba:	d3eb      	bcc.n	c394 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    c3bc:	69e8      	ldr	r0, [r5, #28]
    c3be:	4282      	cmp	r2, r0
    c3c0:	d200      	bcs.n	c3c4 <tcc_init+0x64>
    c3c2:	e1b9      	b.n	c738 <tcc_init+0x3d8>
    c3c4:	6a28      	ldr	r0, [r5, #32]
    c3c6:	4282      	cmp	r2, r0
    c3c8:	d200      	bcs.n	c3cc <tcc_init+0x6c>
    c3ca:	e1b7      	b.n	c73c <tcc_init+0x3dc>
    c3cc:	6a68      	ldr	r0, [r5, #36]	; 0x24
    c3ce:	4282      	cmp	r2, r0
    c3d0:	d200      	bcs.n	c3d4 <tcc_init+0x74>
    c3d2:	e1b5      	b.n	c740 <tcc_init+0x3e0>
    c3d4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    c3d6:	4282      	cmp	r2, r0
    c3d8:	d200      	bcs.n	c3dc <tcc_init+0x7c>
    c3da:	e1b3      	b.n	c744 <tcc_init+0x3e4>
    c3dc:	2298      	movs	r2, #152	; 0x98
    c3de:	4694      	mov	ip, r2
    c3e0:	44ac      	add	ip, r5
    c3e2:	4662      	mov	r2, ip
    c3e4:	9208      	str	r2, [sp, #32]
    c3e6:	2000      	movs	r0, #0
    c3e8:	e003      	b.n	c3f2 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    c3ea:	3001      	adds	r0, #1
    c3ec:	3201      	adds	r2, #1
    c3ee:	2808      	cmp	r0, #8
    c3f0:	d008      	beq.n	c404 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    c3f2:	7816      	ldrb	r6, [r2, #0]
    c3f4:	2e00      	cmp	r6, #0
    c3f6:	d0f8      	beq.n	c3ea <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    c3f8:	4ea6      	ldr	r6, [pc, #664]	; (c694 <tcc_init+0x334>)
    c3fa:	5c76      	ldrb	r6, [r6, r1]
    c3fc:	4286      	cmp	r6, r0
    c3fe:	dcf4      	bgt.n	c3ea <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    c400:	2017      	movs	r0, #23
    c402:	e7c7      	b.n	c394 <tcc_init+0x34>
    c404:	2200      	movs	r2, #0
    c406:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    c408:	2080      	movs	r0, #128	; 0x80
    c40a:	0440      	lsls	r0, r0, #17
    c40c:	4684      	mov	ip, r0
    c40e:	e002      	b.n	c416 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    c410:	3201      	adds	r2, #1
    c412:	2a04      	cmp	r2, #4
    c414:	d00e      	beq.n	c434 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    c416:	18a8      	adds	r0, r5, r2
    c418:	7c00      	ldrb	r0, [r0, #16]
    c41a:	2801      	cmp	r0, #1
    c41c:	d1f8      	bne.n	c410 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    c41e:	489e      	ldr	r0, [pc, #632]	; (c698 <tcc_init+0x338>)
    c420:	5c40      	ldrb	r0, [r0, r1]
    c422:	4290      	cmp	r0, r2
    c424:	da00      	bge.n	c428 <tcc_init+0xc8>
    c426:	e18f      	b.n	c748 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    c428:	4660      	mov	r0, ip
    c42a:	4090      	lsls	r0, r2
    c42c:	9e02      	ldr	r6, [sp, #8]
    c42e:	4306      	orrs	r6, r0
    c430:	9602      	str	r6, [sp, #8]
    c432:	e7ed      	b.n	c410 <tcc_init+0xb0>
	if (config->run_in_standby) {
    c434:	329d      	adds	r2, #157	; 0x9d
    c436:	5caa      	ldrb	r2, [r5, r2]
    c438:	2a00      	cmp	r2, #0
    c43a:	d004      	beq.n	c446 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    c43c:	2280      	movs	r2, #128	; 0x80
    c43e:	0112      	lsls	r2, r2, #4
    c440:	9902      	ldr	r1, [sp, #8]
    c442:	4311      	orrs	r1, r2
    c444:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    c446:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    c448:	1e51      	subs	r1, r2, #1
    c44a:	418a      	sbcs	r2, r1
    c44c:	0092      	lsls	r2, r2, #2
    c44e:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    c450:	7a6a      	ldrb	r2, [r5, #9]
    c452:	2a01      	cmp	r2, #1
    c454:	d022      	beq.n	c49c <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    c456:	4a90      	ldr	r2, [pc, #576]	; (c698 <tcc_init+0x338>)
    c458:	5cd2      	ldrb	r2, [r2, r3]
    c45a:	0011      	movs	r1, r2
    c45c:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    c45e:	2235      	movs	r2, #53	; 0x35
    c460:	5caa      	ldrb	r2, [r5, r2]
    c462:	428a      	cmp	r2, r1
    c464:	d300      	bcc.n	c468 <tcc_init+0x108>
    c466:	e179      	b.n	c75c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    c468:	212c      	movs	r1, #44	; 0x2c
    c46a:	5c69      	ldrb	r1, [r5, r1]
    c46c:	290f      	cmp	r1, #15
    c46e:	d900      	bls.n	c472 <tcc_init+0x112>
    c470:	e174      	b.n	c75c <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    c472:	7b28      	ldrb	r0, [r5, #12]
    c474:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    c476:	7ae8      	ldrb	r0, [r5, #11]
    c478:	900b      	str	r0, [sp, #44]	; 0x2c
    c47a:	202d      	movs	r0, #45	; 0x2d
    c47c:	4682      	mov	sl, r0
    c47e:	44aa      	add	sl, r5
    c480:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    c482:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    c484:	ae0e      	add	r6, sp, #56	; 0x38
    c486:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    c488:	26c0      	movs	r6, #192	; 0xc0
    c48a:	0136      	lsls	r6, r6, #4
    c48c:	46b1      	mov	r9, r6
    c48e:	4684      	mov	ip, r0
    c490:	46a0      	mov	r8, r4
    c492:	0028      	movs	r0, r5
    c494:	4655      	mov	r5, sl
    c496:	9309      	str	r3, [sp, #36]	; 0x24
    c498:	4682      	mov	sl, r0
    c49a:	e035      	b.n	c508 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    c49c:	9906      	ldr	r1, [sp, #24]
    c49e:	4311      	orrs	r1, r2
    c4a0:	9106      	str	r1, [sp, #24]
    c4a2:	e7d8      	b.n	c456 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    c4a4:	0292      	lsls	r2, r2, #10
    c4a6:	464f      	mov	r7, r9
    c4a8:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    c4aa:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    c4ac:	7919      	ldrb	r1, [r3, #4]
    c4ae:	468b      	mov	fp, r1
    c4b0:	2103      	movs	r1, #3
    c4b2:	465f      	mov	r7, fp
    c4b4:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    c4b6:	430a      	orrs	r2, r1
    c4b8:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    c4ba:	795a      	ldrb	r2, [r3, #5]
    c4bc:	0152      	lsls	r2, r2, #5
    c4be:	2160      	movs	r1, #96	; 0x60
    c4c0:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    c4c2:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    c4c4:	7999      	ldrb	r1, [r3, #6]
    c4c6:	0209      	lsls	r1, r1, #8
    c4c8:	26c0      	movs	r6, #192	; 0xc0
    c4ca:	00b6      	lsls	r6, r6, #2
    c4cc:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    c4ce:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    c4d0:	79da      	ldrb	r2, [r3, #7]
    c4d2:	0312      	lsls	r2, r2, #12
    c4d4:	21e0      	movs	r1, #224	; 0xe0
    c4d6:	01c9      	lsls	r1, r1, #7
    c4d8:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    c4da:	4316      	orrs	r6, r2
    c4dc:	4334      	orrs	r4, r6
    c4de:	9a03      	ldr	r2, [sp, #12]
    c4e0:	4314      	orrs	r4, r2
    c4e2:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    c4e4:	4662      	mov	r2, ip
    c4e6:	9907      	ldr	r1, [sp, #28]
    c4e8:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    c4ea:	2a04      	cmp	r2, #4
    c4ec:	d02a      	beq.n	c544 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    c4ee:	7c9a      	ldrb	r2, [r3, #18]
    c4f0:	9905      	ldr	r1, [sp, #20]
    c4f2:	4291      	cmp	r1, r2
    c4f4:	d800      	bhi.n	c4f8 <tcc_init+0x198>
    c4f6:	e131      	b.n	c75c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    c4f8:	7a59      	ldrb	r1, [r3, #9]
    c4fa:	350a      	adds	r5, #10
    c4fc:	2304      	movs	r3, #4
    c4fe:	469b      	mov	fp, r3
    c500:	44dc      	add	ip, fp
    c502:	290f      	cmp	r1, #15
    c504:	d900      	bls.n	c508 <tcc_init+0x1a8>
    c506:	e129      	b.n	c75c <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    c508:	0609      	lsls	r1, r1, #24
    c50a:	23f0      	movs	r3, #240	; 0xf0
    c50c:	051b      	lsls	r3, r3, #20
    c50e:	4019      	ands	r1, r3
    c510:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    c512:	782e      	ldrb	r6, [r5, #0]
    c514:	0436      	lsls	r6, r6, #16
    c516:	20ff      	movs	r0, #255	; 0xff
    c518:	0400      	lsls	r0, r0, #16
    c51a:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    c51c:	7868      	ldrb	r0, [r5, #1]
    c51e:	2480      	movs	r4, #128	; 0x80
    c520:	2800      	cmp	r0, #0
    c522:	d100      	bne.n	c526 <tcc_init+0x1c6>
    c524:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    c526:	7898      	ldrb	r0, [r3, #2]
    c528:	2708      	movs	r7, #8
    c52a:	9703      	str	r7, [sp, #12]
    c52c:	2800      	cmp	r0, #0
    c52e:	d101      	bne.n	c534 <tcc_init+0x1d4>
    c530:	9804      	ldr	r0, [sp, #16]
    c532:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    c534:	78d8      	ldrb	r0, [r3, #3]
    c536:	4683      	mov	fp, r0
    c538:	2010      	movs	r0, #16
    c53a:	465f      	mov	r7, fp
    c53c:	2f00      	cmp	r7, #0
    c53e:	d1b1      	bne.n	c4a4 <tcc_init+0x144>
    c540:	9804      	ldr	r0, [sp, #16]
    c542:	e7af      	b.n	c4a4 <tcc_init+0x144>
    c544:	4644      	mov	r4, r8
    c546:	4655      	mov	r5, sl
    c548:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    c54a:	4a52      	ldr	r2, [pc, #328]	; (c694 <tcc_init+0x334>)
    c54c:	5cd2      	ldrb	r2, [r2, r3]
    c54e:	4691      	mov	r9, r2
    c550:	4651      	mov	r1, sl
    c552:	3150      	adds	r1, #80	; 0x50
    c554:	4650      	mov	r0, sl
    c556:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    c558:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    c55a:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    c55c:	2601      	movs	r6, #1
    c55e:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    c560:	2602      	movs	r6, #2
    c562:	36ff      	adds	r6, #255	; 0xff
    c564:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    c566:	2680      	movs	r6, #128	; 0x80
    c568:	0276      	lsls	r6, r6, #9
    c56a:	46b0      	mov	r8, r6
    c56c:	46a4      	mov	ip, r4
    c56e:	001c      	movs	r4, r3
    c570:	464b      	mov	r3, r9
    c572:	e00f      	b.n	c594 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    c574:	7806      	ldrb	r6, [r0, #0]
    c576:	2e00      	cmp	r6, #0
    c578:	d007      	beq.n	c58a <tcc_init+0x22a>
			if (i >= ow_num) {
    c57a:	4293      	cmp	r3, r2
    c57c:	d800      	bhi.n	c580 <tcc_init+0x220>
    c57e:	e0e7      	b.n	c750 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    c580:	2e02      	cmp	r6, #2
    c582:	d014      	beq.n	c5ae <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    c584:	4656      	mov	r6, sl
    c586:	4096      	lsls	r6, r2
    c588:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    c58a:	3201      	adds	r2, #1
    c58c:	3101      	adds	r1, #1
    c58e:	3002      	adds	r0, #2
    c590:	2a08      	cmp	r2, #8
    c592:	d010      	beq.n	c5b6 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    c594:	780e      	ldrb	r6, [r1, #0]
    c596:	2e00      	cmp	r6, #0
    c598:	d0ec      	beq.n	c574 <tcc_init+0x214>
			if (i >= ow_num) {
    c59a:	4293      	cmp	r3, r2
    c59c:	d800      	bhi.n	c5a0 <tcc_init+0x240>
    c59e:	e0d5      	b.n	c74c <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    c5a0:	4646      	mov	r6, r8
    c5a2:	4096      	lsls	r6, r2
    c5a4:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    c5a6:	7806      	ldrb	r6, [r0, #0]
    c5a8:	2e00      	cmp	r6, #0
    c5aa:	d1e9      	bne.n	c580 <tcc_init+0x220>
    c5ac:	e7ed      	b.n	c58a <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    c5ae:	465e      	mov	r6, fp
    c5b0:	4096      	lsls	r6, r2
    c5b2:	4337      	orrs	r7, r6
    c5b4:	e7e9      	b.n	c58a <tcc_init+0x22a>
    c5b6:	4699      	mov	r9, r3
    c5b8:	0023      	movs	r3, r4
    c5ba:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    c5bc:	7e6a      	ldrb	r2, [r5, #25]
    c5be:	0112      	lsls	r2, r2, #4
    c5c0:	2130      	movs	r1, #48	; 0x30
    c5c2:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    c5c4:	7e28      	ldrb	r0, [r5, #24]
    c5c6:	2207      	movs	r2, #7
    c5c8:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    c5ca:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    c5cc:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    c5ce:	2080      	movs	r0, #128	; 0x80
    c5d0:	0240      	lsls	r0, r0, #9
    c5d2:	000e      	movs	r6, r1
    c5d4:	e002      	b.n	c5dc <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    c5d6:	3201      	adds	r2, #1
    c5d8:	2a04      	cmp	r2, #4
    c5da:	d00b      	beq.n	c5f4 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    c5dc:	18a9      	adds	r1, r5, r2
    c5de:	7d09      	ldrb	r1, [r1, #20]
    c5e0:	2900      	cmp	r1, #0
    c5e2:	d0f8      	beq.n	c5d6 <tcc_init+0x276>
			if (n >= cc_num) {
    c5e4:	9905      	ldr	r1, [sp, #20]
    c5e6:	4291      	cmp	r1, r2
    c5e8:	dc00      	bgt.n	c5ec <tcc_init+0x28c>
    c5ea:	e0b3      	b.n	c754 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    c5ec:	0001      	movs	r1, r0
    c5ee:	4091      	lsls	r1, r2
    c5f0:	430e      	orrs	r6, r1
    c5f2:	e7f0      	b.n	c5d6 <tcc_init+0x276>
    c5f4:	46b2      	mov	sl, r6
    c5f6:	9801      	ldr	r0, [sp, #4]
    c5f8:	0002      	movs	r2, r0
    c5fa:	3204      	adds	r2, #4
    c5fc:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    c5fe:	2100      	movs	r1, #0
    c600:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    c602:	4282      	cmp	r2, r0
    c604:	d1fc      	bne.n	c600 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    c606:	2200      	movs	r2, #0
    c608:	9801      	ldr	r0, [sp, #4]
    c60a:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    c60c:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    c60e:	0099      	lsls	r1, r3, #2
    c610:	4a22      	ldr	r2, [pc, #136]	; (c69c <tcc_init+0x33c>)
    c612:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    c614:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    c616:	22a0      	movs	r2, #160	; 0xa0
    c618:	5ca9      	ldrb	r1, [r5, r2]
    c61a:	3a64      	subs	r2, #100	; 0x64
    c61c:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    c61e:	a90d      	add	r1, sp, #52	; 0x34
    c620:	7aaa      	ldrb	r2, [r5, #10]
    c622:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    c624:	4a1e      	ldr	r2, [pc, #120]	; (c6a0 <tcc_init+0x340>)
    c626:	5cd6      	ldrb	r6, [r2, r3]
    c628:	0030      	movs	r0, r6
    c62a:	4b1e      	ldr	r3, [pc, #120]	; (c6a4 <tcc_init+0x344>)
    c62c:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    c62e:	0030      	movs	r0, r6
    c630:	4b1d      	ldr	r3, [pc, #116]	; (c6a8 <tcc_init+0x348>)
    c632:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    c634:	464b      	mov	r3, r9
    c636:	2b00      	cmp	r3, #0
    c638:	dd3c      	ble.n	c6b4 <tcc_init+0x354>
    c63a:	002e      	movs	r6, r5
    c63c:	3658      	adds	r6, #88	; 0x58
    c63e:	3398      	adds	r3, #152	; 0x98
    c640:	4698      	mov	r8, r3
    c642:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    c644:	2301      	movs	r3, #1
    c646:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    c648:	46ab      	mov	fp, r5
    c64a:	4645      	mov	r5, r8
    c64c:	46a0      	mov	r8, r4
    c64e:	9c08      	ldr	r4, [sp, #32]
    c650:	e003      	b.n	c65a <tcc_init+0x2fa>
    c652:	3401      	adds	r4, #1
    c654:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    c656:	42ac      	cmp	r4, r5
    c658:	d02a      	beq.n	c6b0 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    c65a:	7823      	ldrb	r3, [r4, #0]
    c65c:	2b00      	cmp	r3, #0
    c65e:	d0f8      	beq.n	c652 <tcc_init+0x2f2>
    c660:	ab0c      	add	r3, sp, #48	; 0x30
    c662:	464a      	mov	r2, r9
    c664:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    c666:	2300      	movs	r3, #0
    c668:	aa0c      	add	r2, sp, #48	; 0x30
    c66a:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    c66c:	0013      	movs	r3, r2
    c66e:	2220      	movs	r2, #32
    c670:	18b2      	adds	r2, r6, r2
    c672:	7812      	ldrb	r2, [r2, #0]
    c674:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    c676:	464a      	mov	r2, r9
    c678:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    c67a:	7830      	ldrb	r0, [r6, #0]
    c67c:	0019      	movs	r1, r3
    c67e:	4b0b      	ldr	r3, [pc, #44]	; (c6ac <tcc_init+0x34c>)
    c680:	4798      	blx	r3
    c682:	e7e6      	b.n	c652 <tcc_init+0x2f2>
    c684:	0000c1e1 	.word	0x0000c1e1
    c688:	40000400 	.word	0x40000400
    c68c:	00016568 	.word	0x00016568
    c690:	0001657c 	.word	0x0001657c
    c694:	00016588 	.word	0x00016588
    c698:	00016574 	.word	0x00016574
    c69c:	2000056c 	.word	0x2000056c
    c6a0:	00016578 	.word	0x00016578
    c6a4:	00010131 	.word	0x00010131
    c6a8:	000100a5 	.word	0x000100a5
    c6ac:	00010229 	.word	0x00010229
    c6b0:	4644      	mov	r4, r8
    c6b2:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    c6b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c6b6:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    c6b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c6ba:	0212      	lsls	r2, r2, #8
    c6bc:	4313      	orrs	r3, r2
    c6be:	9a02      	ldr	r2, [sp, #8]
    c6c0:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    c6c2:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    c6c4:	2204      	movs	r2, #4
    c6c6:	68a3      	ldr	r3, [r4, #8]
    c6c8:	421a      	tst	r2, r3
    c6ca:	d1fc      	bne.n	c6c6 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    c6cc:	23ff      	movs	r3, #255	; 0xff
    c6ce:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    c6d0:	2204      	movs	r2, #4
    c6d2:	68a3      	ldr	r3, [r4, #8]
    c6d4:	421a      	tst	r2, r3
    c6d6:	d1fc      	bne.n	c6d2 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    c6d8:	466b      	mov	r3, sp
    c6da:	7e1b      	ldrb	r3, [r3, #24]
    c6dc:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    c6de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c6e0:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    c6e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c6e4:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    c6e6:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    c6e8:	4a1d      	ldr	r2, [pc, #116]	; (c760 <tcc_init+0x400>)
    c6ea:	68a3      	ldr	r3, [r4, #8]
    c6ec:	4213      	tst	r3, r2
    c6ee:	d1fc      	bne.n	c6ea <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    c6f0:	4653      	mov	r3, sl
    c6f2:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    c6f4:	2210      	movs	r2, #16
    c6f6:	68a3      	ldr	r3, [r4, #8]
    c6f8:	421a      	tst	r2, r3
    c6fa:	d1fc      	bne.n	c6f6 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    c6fc:	682b      	ldr	r3, [r5, #0]
    c6fe:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    c700:	4a18      	ldr	r2, [pc, #96]	; (c764 <tcc_init+0x404>)
    c702:	68a3      	ldr	r3, [r4, #8]
    c704:	4213      	tst	r3, r2
    c706:	d1fc      	bne.n	c702 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    c708:	686b      	ldr	r3, [r5, #4]
    c70a:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    c70c:	9805      	ldr	r0, [sp, #20]
    c70e:	2800      	cmp	r0, #0
    c710:	dd22      	ble.n	c758 <tcc_init+0x3f8>
    c712:	351c      	adds	r5, #28
    c714:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    c716:	4e14      	ldr	r6, [pc, #80]	; (c768 <tcc_init+0x408>)
    c718:	0032      	movs	r2, r6
    c71a:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    c71c:	68a3      	ldr	r3, [r4, #8]
    c71e:	421a      	tst	r2, r3
    c720:	d1fc      	bne.n	c71c <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    c722:	cd04      	ldmia	r5!, {r2}
    c724:	000b      	movs	r3, r1
    c726:	3310      	adds	r3, #16
    c728:	009b      	lsls	r3, r3, #2
    c72a:	18e3      	adds	r3, r4, r3
    c72c:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    c72e:	3101      	adds	r1, #1
    c730:	4288      	cmp	r0, r1
    c732:	dcf1      	bgt.n	c718 <tcc_init+0x3b8>
	return STATUS_OK;
    c734:	2000      	movs	r0, #0
    c736:	e62d      	b.n	c394 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    c738:	2017      	movs	r0, #23
    c73a:	e62b      	b.n	c394 <tcc_init+0x34>
    c73c:	2017      	movs	r0, #23
    c73e:	e629      	b.n	c394 <tcc_init+0x34>
    c740:	2017      	movs	r0, #23
    c742:	e627      	b.n	c394 <tcc_init+0x34>
    c744:	2017      	movs	r0, #23
    c746:	e625      	b.n	c394 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    c748:	2017      	movs	r0, #23
    c74a:	e623      	b.n	c394 <tcc_init+0x34>
			if (i >= ow_num) {
    c74c:	2017      	movs	r0, #23
    c74e:	e621      	b.n	c394 <tcc_init+0x34>
			if (i >= ow_num) {
    c750:	2017      	movs	r0, #23
    c752:	e61f      	b.n	c394 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    c754:	2017      	movs	r0, #23
    c756:	e61d      	b.n	c394 <tcc_init+0x34>
	return STATUS_OK;
    c758:	2000      	movs	r0, #0
    c75a:	e61b      	b.n	c394 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    c75c:	2017      	movs	r0, #23
    c75e:	e619      	b.n	c394 <tcc_init+0x34>
    c760:	00020040 	.word	0x00020040
    c764:	00040080 	.word	0x00040080
    c768:	00080100 	.word	0x00080100

0000c76c <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    c76c:	0092      	lsls	r2, r2, #2
    c76e:	1883      	adds	r3, r0, r2
    c770:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    c772:	4b03      	ldr	r3, [pc, #12]	; (c780 <tcc_register_callback+0x14>)
    c774:	58d3      	ldr	r3, [r2, r3]
    c776:	6b42      	ldr	r2, [r0, #52]	; 0x34
    c778:	4313      	orrs	r3, r2
    c77a:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    c77c:	2000      	movs	r0, #0
    c77e:	4770      	bx	lr
    c780:	0001658c 	.word	0x0001658c

0000c784 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    c784:	b570      	push	{r4, r5, r6, lr}
    c786:	0004      	movs	r4, r0
    c788:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    c78a:	6800      	ldr	r0, [r0, #0]
    c78c:	4b09      	ldr	r3, [pc, #36]	; (c7b4 <tcc_enable_callback+0x30>)
    c78e:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    c790:	4b09      	ldr	r3, [pc, #36]	; (c7b8 <tcc_enable_callback+0x34>)
    c792:	5c1b      	ldrb	r3, [r3, r0]
    c794:	221f      	movs	r2, #31
    c796:	401a      	ands	r2, r3
    c798:	2301      	movs	r3, #1
    c79a:	4093      	lsls	r3, r2
    c79c:	4a07      	ldr	r2, [pc, #28]	; (c7bc <tcc_enable_callback+0x38>)
    c79e:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    c7a0:	00ad      	lsls	r5, r5, #2
    c7a2:	4b07      	ldr	r3, [pc, #28]	; (c7c0 <tcc_enable_callback+0x3c>)
    c7a4:	58ea      	ldr	r2, [r5, r3]
    c7a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c7a8:	4313      	orrs	r3, r2
    c7aa:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    c7ac:	6823      	ldr	r3, [r4, #0]
    c7ae:	629a      	str	r2, [r3, #40]	; 0x28
}
    c7b0:	bd70      	pop	{r4, r5, r6, pc}
    c7b2:	46c0      	nop			; (mov r8, r8)
    c7b4:	0000c1e1 	.word	0x0000c1e1
    c7b8:	000165bc 	.word	0x000165bc
    c7bc:	e000e100 	.word	0xe000e100
    c7c0:	0001658c 	.word	0x0001658c

0000c7c4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    c7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7c6:	46c6      	mov	lr, r8
    c7c8:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    c7ca:	0080      	lsls	r0, r0, #2
    c7cc:	4b0e      	ldr	r3, [pc, #56]	; (c808 <_tcc_interrupt_handler+0x44>)
    c7ce:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    c7d0:	683b      	ldr	r3, [r7, #0]
    c7d2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    c7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    c7d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    c7d8:	4013      	ands	r3, r2
    c7da:	401e      	ands	r6, r3
    c7dc:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    c7de:	4b0b      	ldr	r3, [pc, #44]	; (c80c <_tcc_interrupt_handler+0x48>)
    c7e0:	4698      	mov	r8, r3
    c7e2:	e002      	b.n	c7ea <_tcc_interrupt_handler+0x26>
    c7e4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    c7e6:	2c30      	cmp	r4, #48	; 0x30
    c7e8:	d00a      	beq.n	c800 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    c7ea:	4643      	mov	r3, r8
    c7ec:	58e5      	ldr	r5, [r4, r3]
    c7ee:	4235      	tst	r5, r6
    c7f0:	d0f8      	beq.n	c7e4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    c7f2:	193b      	adds	r3, r7, r4
    c7f4:	685b      	ldr	r3, [r3, #4]
    c7f6:	0038      	movs	r0, r7
    c7f8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    c7fa:	683b      	ldr	r3, [r7, #0]
    c7fc:	62dd      	str	r5, [r3, #44]	; 0x2c
    c7fe:	e7f1      	b.n	c7e4 <_tcc_interrupt_handler+0x20>
		}
	}
}
    c800:	bc04      	pop	{r2}
    c802:	4690      	mov	r8, r2
    c804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c806:	46c0      	nop			; (mov r8, r8)
    c808:	2000056c 	.word	0x2000056c
    c80c:	0001658c 	.word	0x0001658c

0000c810 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    c810:	b510      	push	{r4, lr}
    c812:	2000      	movs	r0, #0
    c814:	4b01      	ldr	r3, [pc, #4]	; (c81c <TCC0_Handler+0xc>)
    c816:	4798      	blx	r3
    c818:	bd10      	pop	{r4, pc}
    c81a:	46c0      	nop			; (mov r8, r8)
    c81c:	0000c7c5 	.word	0x0000c7c5

0000c820 <TCC1_Handler>:
    c820:	b510      	push	{r4, lr}
    c822:	2001      	movs	r0, #1
    c824:	4b01      	ldr	r3, [pc, #4]	; (c82c <TCC1_Handler+0xc>)
    c826:	4798      	blx	r3
    c828:	bd10      	pop	{r4, pc}
    c82a:	46c0      	nop			; (mov r8, r8)
    c82c:	0000c7c5 	.word	0x0000c7c5

0000c830 <TCC2_Handler>:
    c830:	b510      	push	{r4, lr}
    c832:	2002      	movs	r0, #2
    c834:	4b01      	ldr	r3, [pc, #4]	; (c83c <TCC2_Handler+0xc>)
    c836:	4798      	blx	r3
    c838:	bd10      	pop	{r4, pc}
    c83a:	46c0      	nop			; (mov r8, r8)
    c83c:	0000c7c5 	.word	0x0000c7c5

0000c840 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    c840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c842:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    c844:	2041      	movs	r0, #65	; 0x41
    c846:	5c23      	ldrb	r3, [r4, r0]
    c848:	2501      	movs	r5, #1
    c84a:	432b      	orrs	r3, r5
    c84c:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    c84e:	b292      	uxth	r2, r2
    c850:	2000      	movs	r0, #0
    c852:	5620      	ldrsb	r0, [r4, r0]
    c854:	2300      	movs	r3, #0
    c856:	4d12      	ldr	r5, [pc, #72]	; (c8a0 <_http_client_send_wait+0x60>)
    c858:	47a8      	blx	r5
    c85a:	2800      	cmp	r0, #0
    c85c:	db16      	blt.n	c88c <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    c85e:	2341      	movs	r3, #65	; 0x41
    c860:	5ce3      	ldrb	r3, [r4, r3]
    c862:	07db      	lsls	r3, r3, #31
    c864:	d518      	bpl.n	c898 <_http_client_send_wait+0x58>
    c866:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    c868:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    c86a:	2b02      	cmp	r3, #2
    c86c:	d917      	bls.n	c89e <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    c86e:	4f0d      	ldr	r7, [pc, #52]	; (c8a4 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    c870:	4e0d      	ldr	r6, [pc, #52]	; (c8a8 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    c872:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    c874:	2000      	movs	r0, #0
    c876:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    c878:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c87a:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    c87c:	5d63      	ldrb	r3, [r4, r5]
    c87e:	07db      	lsls	r3, r3, #31
    c880:	d50c      	bpl.n	c89c <_http_client_send_wait+0x5c>
    c882:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    c884:	2b02      	cmp	r3, #2
    c886:	d8f5      	bhi.n	c874 <_http_client_send_wait+0x34>
	return 0;
    c888:	2000      	movs	r0, #0
    c88a:	e008      	b.n	c89e <_http_client_send_wait+0x5e>
		module->sending = 0;
    c88c:	2241      	movs	r2, #65	; 0x41
    c88e:	5ca3      	ldrb	r3, [r4, r2]
    c890:	2101      	movs	r1, #1
    c892:	438b      	bics	r3, r1
    c894:	54a3      	strb	r3, [r4, r2]
		return result;
    c896:	e002      	b.n	c89e <_http_client_send_wait+0x5e>
	return 0;
    c898:	2000      	movs	r0, #0
    c89a:	e000      	b.n	c89e <_http_client_send_wait+0x5e>
    c89c:	2000      	movs	r0, #0
}
    c89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c8a0:	0000afbd 	.word	0x0000afbd
    c8a4:	0000921d 	.word	0x0000921d
    c8a8:	0000d9fd 	.word	0x0000d9fd

0000c8ac <http_client_get_config_defaults>:
	config->port = 80;
    c8ac:	2350      	movs	r3, #80	; 0x50
    c8ae:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    c8b0:	2300      	movs	r3, #0
    c8b2:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    c8b4:	4a05      	ldr	r2, [pc, #20]	; (c8cc <http_client_get_config_defaults+0x20>)
    c8b6:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    c8b8:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    c8ba:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    c8bc:	3301      	adds	r3, #1
    c8be:	33ff      	adds	r3, #255	; 0xff
    c8c0:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    c8c2:	3bae      	subs	r3, #174	; 0xae
    c8c4:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    c8c6:	4b02      	ldr	r3, [pc, #8]	; (c8d0 <http_client_get_config_defaults+0x24>)
    c8c8:	6183      	str	r3, [r0, #24]
}
    c8ca:	4770      	bx	lr
    c8cc:	00004e20 	.word	0x00004e20
    c8d0:	00016788 	.word	0x00016788

0000c8d4 <http_client_init>:
{
    c8d4:	b570      	push	{r4, r5, r6, lr}
    c8d6:	0004      	movs	r4, r0
    c8d8:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    c8da:	2800      	cmp	r0, #0
    c8dc:	d038      	beq.n	c950 <http_client_init+0x7c>
    c8de:	2900      	cmp	r1, #0
    c8e0:	d039      	beq.n	c956 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    c8e2:	690b      	ldr	r3, [r1, #16]
    c8e4:	2b00      	cmp	r3, #0
    c8e6:	d039      	beq.n	c95c <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    c8e8:	684b      	ldr	r3, [r1, #4]
    c8ea:	2b00      	cmp	r3, #0
    c8ec:	d039      	beq.n	c962 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    c8ee:	694b      	ldr	r3, [r1, #20]
    c8f0:	2b51      	cmp	r3, #81	; 0x51
    c8f2:	d939      	bls.n	c968 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    c8f4:	22e8      	movs	r2, #232	; 0xe8
    c8f6:	2100      	movs	r1, #0
    c8f8:	4b1e      	ldr	r3, [pc, #120]	; (c974 <http_client_init+0xa0>)
    c8fa:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    c8fc:	0020      	movs	r0, r4
    c8fe:	3050      	adds	r0, #80	; 0x50
    c900:	221c      	movs	r2, #28
    c902:	0029      	movs	r1, r5
    c904:	4b1c      	ldr	r3, [pc, #112]	; (c978 <http_client_init+0xa4>)
    c906:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    c908:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    c90a:	2b00      	cmp	r3, #0
    c90c:	d008      	beq.n	c920 <http_client_init+0x4c>
	if (config->timeout > 0) {
    c90e:	892b      	ldrh	r3, [r5, #8]
    c910:	2b00      	cmp	r3, #0
    c912:	d111      	bne.n	c938 <http_client_init+0x64>
	module->req.state = STATE_INIT;
    c914:	2300      	movs	r3, #0
    c916:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    c918:	22d8      	movs	r2, #216	; 0xd8
    c91a:	50a3      	str	r3, [r4, r2]
	return 0;
    c91c:	2000      	movs	r0, #0
}
    c91e:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    c920:	6928      	ldr	r0, [r5, #16]
    c922:	4b16      	ldr	r3, [pc, #88]	; (c97c <http_client_init+0xa8>)
    c924:	4798      	blx	r3
    c926:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    c928:	2800      	cmp	r0, #0
    c92a:	d020      	beq.n	c96e <http_client_init+0x9a>
		module->alloc_buffer = 1;
    c92c:	2241      	movs	r2, #65	; 0x41
    c92e:	5ca3      	ldrb	r3, [r4, r2]
    c930:	2104      	movs	r1, #4
    c932:	430b      	orrs	r3, r1
    c934:	54a3      	strb	r3, [r4, r2]
    c936:	e7ea      	b.n	c90e <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    c938:	6868      	ldr	r0, [r5, #4]
    c93a:	2300      	movs	r3, #0
    c93c:	0022      	movs	r2, r4
    c93e:	4910      	ldr	r1, [pc, #64]	; (c980 <http_client_init+0xac>)
    c940:	4d10      	ldr	r5, [pc, #64]	; (c984 <http_client_init+0xb0>)
    c942:	47a8      	blx	r5
    c944:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    c946:	2800      	cmp	r0, #0
    c948:	dae4      	bge.n	c914 <http_client_init+0x40>
			return -ENOSPC;
    c94a:	201c      	movs	r0, #28
    c94c:	4240      	negs	r0, r0
    c94e:	e7e6      	b.n	c91e <http_client_init+0x4a>
		return -EINVAL;
    c950:	2016      	movs	r0, #22
    c952:	4240      	negs	r0, r0
    c954:	e7e3      	b.n	c91e <http_client_init+0x4a>
    c956:	2016      	movs	r0, #22
    c958:	4240      	negs	r0, r0
    c95a:	e7e0      	b.n	c91e <http_client_init+0x4a>
		return -EINVAL;
    c95c:	2016      	movs	r0, #22
    c95e:	4240      	negs	r0, r0
    c960:	e7dd      	b.n	c91e <http_client_init+0x4a>
		return -EINVAL;
    c962:	2016      	movs	r0, #22
    c964:	4240      	negs	r0, r0
    c966:	e7da      	b.n	c91e <http_client_init+0x4a>
		return -EINVAL;
    c968:	2016      	movs	r0, #22
    c96a:	4240      	negs	r0, r0
    c96c:	e7d7      	b.n	c91e <http_client_init+0x4a>
			return -ENOMEM;
    c96e:	200c      	movs	r0, #12
    c970:	4240      	negs	r0, r0
    c972:	e7d4      	b.n	c91e <http_client_init+0x4a>
    c974:	00013f7b 	.word	0x00013f7b
    c978:	00013f45 	.word	0x00013f45
    c97c:	00013f1d 	.word	0x00013f1d
    c980:	0000ca99 	.word	0x0000ca99
    c984:	0000d979 	.word	0x0000d979

0000c988 <http_client_register_callback>:
	if (module == NULL) {
    c988:	2800      	cmp	r0, #0
    c98a:	d002      	beq.n	c992 <http_client_register_callback+0xa>
	module->cb = callback;
    c98c:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    c98e:	2000      	movs	r0, #0
}
    c990:	4770      	bx	lr
		return -EINVAL;
    c992:	2016      	movs	r0, #22
    c994:	4240      	negs	r0, r0
    c996:	e7fb      	b.n	c990 <http_client_register_callback+0x8>

0000c998 <_http_client_clear_conn>:
{
    c998:	b5f0      	push	{r4, r5, r6, r7, lr}
    c99a:	b085      	sub	sp, #20
    c99c:	0004      	movs	r4, r0
    c99e:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    c9a0:	23c0      	movs	r3, #192	; 0xc0
    c9a2:	58c3      	ldr	r3, [r0, r3]
    c9a4:	2b00      	cmp	r3, #0
    c9a6:	d002      	beq.n	c9ae <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    c9a8:	22c4      	movs	r2, #196	; 0xc4
    c9aa:	5880      	ldr	r0, [r0, r2]
    c9ac:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    c9ae:	0020      	movs	r0, r4
    c9b0:	30b0      	adds	r0, #176	; 0xb0
    c9b2:	2218      	movs	r2, #24
    c9b4:	2100      	movs	r1, #0
    c9b6:	4b17      	ldr	r3, [pc, #92]	; (ca14 <_http_client_clear_conn+0x7c>)
    c9b8:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    c9ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    c9bc:	2b00      	cmp	r3, #0
    c9be:	d124      	bne.n	ca0a <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    c9c0:	2300      	movs	r3, #0
    c9c2:	56e3      	ldrsb	r3, [r4, r3]
    c9c4:	009b      	lsls	r3, r3, #2
    c9c6:	2500      	movs	r5, #0
    c9c8:	4a13      	ldr	r2, [pc, #76]	; (ca18 <_http_client_clear_conn+0x80>)
    c9ca:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    c9cc:	0020      	movs	r0, r4
    c9ce:	306c      	adds	r0, #108	; 0x6c
    c9d0:	226c      	movs	r2, #108	; 0x6c
    c9d2:	2100      	movs	r1, #0
    c9d4:	4f0f      	ldr	r7, [pc, #60]	; (ca14 <_http_client_clear_conn+0x7c>)
    c9d6:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    c9d8:	0020      	movs	r0, r4
    c9da:	30d8      	adds	r0, #216	; 0xd8
    c9dc:	2210      	movs	r2, #16
    c9de:	2100      	movs	r1, #0
    c9e0:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    c9e2:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    c9e4:	23d8      	movs	r3, #216	; 0xd8
    c9e6:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    c9e8:	2241      	movs	r2, #65	; 0x41
    c9ea:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    c9ec:	2101      	movs	r1, #1
    c9ee:	438b      	bics	r3, r1
    c9f0:	3101      	adds	r1, #1
    c9f2:	438b      	bics	r3, r1
    c9f4:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    c9f6:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    c9f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c9fa:	2b00      	cmp	r3, #0
    c9fc:	d003      	beq.n	ca06 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    c9fe:	aa01      	add	r2, sp, #4
    ca00:	3102      	adds	r1, #2
    ca02:	0020      	movs	r0, r4
    ca04:	4798      	blx	r3
}
    ca06:	b005      	add	sp, #20
    ca08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    ca0a:	2000      	movs	r0, #0
    ca0c:	5620      	ldrsb	r0, [r4, r0]
    ca0e:	4b03      	ldr	r3, [pc, #12]	; (ca1c <_http_client_clear_conn+0x84>)
    ca10:	4798      	blx	r3
    ca12:	e7d5      	b.n	c9c0 <_http_client_clear_conn+0x28>
    ca14:	00013f7b 	.word	0x00013f7b
    ca18:	20000224 	.word	0x20000224
    ca1c:	0000b0e9 	.word	0x0000b0e9

0000ca20 <http_client_socket_resolve_handler>:
{
    ca20:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca22:	b087      	sub	sp, #28
    ca24:	9000      	str	r0, [sp, #0]
    ca26:	9101      	str	r1, [sp, #4]
    ca28:	4c17      	ldr	r4, [pc, #92]	; (ca88 <http_client_socket_resolve_handler+0x68>)
    ca2a:	0026      	movs	r6, r4
    ca2c:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    ca2e:	4f17      	ldr	r7, [pc, #92]	; (ca8c <http_client_socket_resolve_handler+0x6c>)
    ca30:	e015      	b.n	ca5e <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
    ca32:	2302      	movs	r3, #2
    ca34:	aa02      	add	r2, sp, #8
    ca36:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    ca38:	334e      	adds	r3, #78	; 0x4e
    ca3a:	5aeb      	ldrh	r3, [r5, r3]
    ca3c:	021a      	lsls	r2, r3, #8
    ca3e:	0a1b      	lsrs	r3, r3, #8
    ca40:	4313      	orrs	r3, r2
    ca42:	aa02      	add	r2, sp, #8
    ca44:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    ca46:	9b01      	ldr	r3, [sp, #4]
    ca48:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    ca4a:	2000      	movs	r0, #0
    ca4c:	5628      	ldrsb	r0, [r5, r0]
    ca4e:	2210      	movs	r2, #16
    ca50:	a902      	add	r1, sp, #8
    ca52:	4b0f      	ldr	r3, [pc, #60]	; (ca90 <http_client_socket_resolve_handler+0x70>)
    ca54:	4798      	blx	r3
				return;
    ca56:	e015      	b.n	ca84 <http_client_socket_resolve_handler+0x64>
    ca58:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    ca5a:	42b4      	cmp	r4, r6
    ca5c:	d012      	beq.n	ca84 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
    ca5e:	6825      	ldr	r5, [r4, #0]
    ca60:	2d00      	cmp	r5, #0
    ca62:	d0f9      	beq.n	ca58 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    ca64:	1c69      	adds	r1, r5, #1
    ca66:	9800      	ldr	r0, [sp, #0]
    ca68:	47b8      	blx	r7
    ca6a:	2800      	cmp	r0, #0
    ca6c:	d1f4      	bne.n	ca58 <http_client_socket_resolve_handler+0x38>
    ca6e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    ca70:	2b01      	cmp	r3, #1
    ca72:	d1f1      	bne.n	ca58 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    ca74:	9b01      	ldr	r3, [sp, #4]
    ca76:	2b00      	cmp	r3, #0
    ca78:	d1db      	bne.n	ca32 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    ca7a:	2176      	movs	r1, #118	; 0x76
    ca7c:	4249      	negs	r1, r1
    ca7e:	0028      	movs	r0, r5
    ca80:	4b04      	ldr	r3, [pc, #16]	; (ca94 <http_client_socket_resolve_handler+0x74>)
    ca82:	4798      	blx	r3
}
    ca84:	b007      	add	sp, #28
    ca86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca88:	20000224 	.word	0x20000224
    ca8c:	000143e1 	.word	0x000143e1
    ca90:	0000af2d 	.word	0x0000af2d
    ca94:	0000c999 	.word	0x0000c999

0000ca98 <http_client_timer_callback>:
{
    ca98:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    ca9a:	2a00      	cmp	r2, #0
    ca9c:	d004      	beq.n	caa8 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    ca9e:	213e      	movs	r1, #62	; 0x3e
    caa0:	4249      	negs	r1, r1
    caa2:	0010      	movs	r0, r2
    caa4:	4b01      	ldr	r3, [pc, #4]	; (caac <http_client_timer_callback+0x14>)
    caa6:	4798      	blx	r3
}
    caa8:	bd10      	pop	{r4, pc}
    caaa:	46c0      	nop			; (mov r8, r8)
    caac:	0000c999 	.word	0x0000c999

0000cab0 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    cab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cab2:	46de      	mov	lr, fp
    cab4:	4657      	mov	r7, sl
    cab6:	b580      	push	{r7, lr}
    cab8:	b095      	sub	sp, #84	; 0x54
    caba:	af02      	add	r7, sp, #8
    cabc:	0004      	movs	r4, r0
    cabe:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    cac0:	2210      	movs	r2, #16
    cac2:	49b2      	ldr	r1, [pc, #712]	; (cd8c <_http_client_request+0x2dc>)
    cac4:	2310      	movs	r3, #16
    cac6:	2008      	movs	r0, #8
    cac8:	1838      	adds	r0, r7, r0
    caca:	18c0      	adds	r0, r0, r3
    cacc:	4bb0      	ldr	r3, [pc, #704]	; (cd90 <_http_client_request+0x2e0>)
    cace:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    cad0:	6e62      	ldr	r2, [r4, #100]	; 0x64
    cad2:	1dd3      	adds	r3, r2, #7
    cad4:	08db      	lsrs	r3, r3, #3
    cad6:	00db      	lsls	r3, r3, #3
    cad8:	4669      	mov	r1, sp
    cada:	1acb      	subs	r3, r1, r3
    cadc:	469d      	mov	sp, r3
    cade:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    cae0:	2c00      	cmp	r4, #0
    cae2:	d100      	bne.n	cae6 <_http_client_request+0x36>
    cae4:	e1f1      	b.n	ceca <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    cae6:	2341      	movs	r3, #65	; 0x41
    cae8:	5ce3      	ldrb	r3, [r4, r3]
    caea:	07db      	lsls	r3, r3, #31
    caec:	d500      	bpl.n	caf0 <_http_client_request+0x40>
    caee:	e1ec      	b.n	ceca <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    caf0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    caf2:	2b03      	cmp	r3, #3
    caf4:	d004      	beq.n	cb00 <_http_client_request+0x50>
    caf6:	2b04      	cmp	r3, #4
    caf8:	d100      	bne.n	cafc <_http_client_request+0x4c>
    cafa:	e120      	b.n	cd3e <_http_client_request+0x28e>
    cafc:	46dd      	mov	sp, fp
    cafe:	e1e5      	b.n	cecc <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    cb00:	2300      	movs	r3, #0
    cb02:	21cc      	movs	r1, #204	; 0xcc
    cb04:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    cb06:	3104      	adds	r1, #4
    cb08:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    cb0a:	9400      	str	r4, [sp, #0]
    cb0c:	4ba1      	ldr	r3, [pc, #644]	; (cd94 <_http_client_request+0x2e4>)
    cb0e:	0031      	movs	r1, r6
    cb10:	202c      	movs	r0, #44	; 0x2c
    cb12:	2508      	movs	r5, #8
    cb14:	46ac      	mov	ip, r5
    cb16:	44bc      	add	ip, r7
    cb18:	4460      	add	r0, ip
    cb1a:	4d9f      	ldr	r5, [pc, #636]	; (cd98 <_http_client_request+0x2e8>)
    cb1c:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    cb1e:	23c8      	movs	r3, #200	; 0xc8
    cb20:	5ce3      	ldrb	r3, [r4, r3]
    cb22:	2b01      	cmp	r3, #1
    cb24:	d100      	bne.n	cb28 <_http_client_request+0x78>
    cb26:	e0a9      	b.n	cc7c <_http_client_request+0x1cc>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    cb28:	2b02      	cmp	r3, #2
    cb2a:	d100      	bne.n	cb2e <_http_client_request+0x7e>
    cb2c:	e0af      	b.n	cc8e <_http_client_request+0x1de>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    cb2e:	2b03      	cmp	r3, #3
    cb30:	d100      	bne.n	cb34 <_http_client_request+0x84>
    cb32:	e0b5      	b.n	cca0 <_http_client_request+0x1f0>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    cb34:	2b04      	cmp	r3, #4
    cb36:	d100      	bne.n	cb3a <_http_client_request+0x8a>
    cb38:	e0bb      	b.n	ccb2 <_http_client_request+0x202>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    cb3a:	2b05      	cmp	r3, #5
    cb3c:	d100      	bne.n	cb40 <_http_client_request+0x90>
    cb3e:	e0c1      	b.n	ccc4 <_http_client_request+0x214>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    cb40:	2b06      	cmp	r3, #6
    cb42:	d100      	bne.n	cb46 <_http_client_request+0x96>
    cb44:	e0c7      	b.n	ccd6 <_http_client_request+0x226>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    cb46:	0025      	movs	r5, r4
    cb48:	3570      	adds	r5, #112	; 0x70
    cb4a:	0028      	movs	r0, r5
    cb4c:	4b93      	ldr	r3, [pc, #588]	; (cd9c <_http_client_request+0x2ec>)
    cb4e:	469a      	mov	sl, r3
    cb50:	4798      	blx	r3
    cb52:	0002      	movs	r2, r0
    cb54:	0029      	movs	r1, r5
    cb56:	232c      	movs	r3, #44	; 0x2c
    cb58:	2008      	movs	r0, #8
    cb5a:	1838      	adds	r0, r7, r0
    cb5c:	18c0      	adds	r0, r0, r3
    cb5e:	4d90      	ldr	r5, [pc, #576]	; (cda0 <_http_client_request+0x2f0>)
    cb60:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    cb62:	220b      	movs	r2, #11
    cb64:	498f      	ldr	r1, [pc, #572]	; (cda4 <_http_client_request+0x2f4>)
    cb66:	232c      	movs	r3, #44	; 0x2c
    cb68:	2008      	movs	r0, #8
    cb6a:	1838      	adds	r0, r7, r0
    cb6c:	18c0      	adds	r0, r0, r3
    cb6e:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    cb70:	220c      	movs	r2, #12
    cb72:	498d      	ldr	r1, [pc, #564]	; (cda8 <_http_client_request+0x2f8>)
    cb74:	232c      	movs	r3, #44	; 0x2c
    cb76:	2008      	movs	r0, #8
    cb78:	1838      	adds	r0, r7, r0
    cb7a:	18c0      	adds	r0, r0, r3
    cb7c:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    cb7e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    cb80:	607b      	str	r3, [r7, #4]
    cb82:	0018      	movs	r0, r3
    cb84:	47d0      	blx	sl
    cb86:	0002      	movs	r2, r0
    cb88:	6879      	ldr	r1, [r7, #4]
    cb8a:	232c      	movs	r3, #44	; 0x2c
    cb8c:	2008      	movs	r0, #8
    cb8e:	1838      	adds	r0, r7, r0
    cb90:	18c0      	adds	r0, r0, r3
    cb92:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    cb94:	2202      	movs	r2, #2
    cb96:	4985      	ldr	r1, [pc, #532]	; (cdac <_http_client_request+0x2fc>)
    cb98:	232c      	movs	r3, #44	; 0x2c
    cb9a:	2008      	movs	r0, #8
    cb9c:	1838      	adds	r0, r7, r0
    cb9e:	18c0      	adds	r0, r0, r3
    cba0:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    cba2:	2206      	movs	r2, #6
    cba4:	4982      	ldr	r1, [pc, #520]	; (cdb0 <_http_client_request+0x300>)
    cba6:	232c      	movs	r3, #44	; 0x2c
    cba8:	2008      	movs	r0, #8
    cbaa:	1838      	adds	r0, r7, r0
    cbac:	18c0      	adds	r0, r0, r3
    cbae:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    cbb0:	1c63      	adds	r3, r4, #1
    cbb2:	607b      	str	r3, [r7, #4]
    cbb4:	0018      	movs	r0, r3
    cbb6:	47d0      	blx	sl
    cbb8:	0002      	movs	r2, r0
    cbba:	6879      	ldr	r1, [r7, #4]
    cbbc:	232c      	movs	r3, #44	; 0x2c
    cbbe:	2008      	movs	r0, #8
    cbc0:	1838      	adds	r0, r7, r0
    cbc2:	18c0      	adds	r0, r0, r3
    cbc4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    cbc6:	2202      	movs	r2, #2
    cbc8:	4978      	ldr	r1, [pc, #480]	; (cdac <_http_client_request+0x2fc>)
    cbca:	232c      	movs	r3, #44	; 0x2c
    cbcc:	2008      	movs	r0, #8
    cbce:	1838      	adds	r0, r7, r0
    cbd0:	18c0      	adds	r0, r0, r3
    cbd2:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    cbd4:	2218      	movs	r2, #24
    cbd6:	4977      	ldr	r1, [pc, #476]	; (cdb4 <_http_client_request+0x304>)
    cbd8:	232c      	movs	r3, #44	; 0x2c
    cbda:	2008      	movs	r0, #8
    cbdc:	1838      	adds	r0, r7, r0
    cbde:	18c0      	adds	r0, r0, r3
    cbe0:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    cbe2:	2213      	movs	r2, #19
    cbe4:	4974      	ldr	r1, [pc, #464]	; (cdb8 <_http_client_request+0x308>)
    cbe6:	232c      	movs	r3, #44	; 0x2c
    cbe8:	2008      	movs	r0, #8
    cbea:	1838      	adds	r0, r7, r0
    cbec:	18c0      	adds	r0, r0, r3
    cbee:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    cbf0:	2217      	movs	r2, #23
    cbf2:	4972      	ldr	r1, [pc, #456]	; (cdbc <_http_client_request+0x30c>)
    cbf4:	232c      	movs	r3, #44	; 0x2c
    cbf6:	2008      	movs	r0, #8
    cbf8:	1838      	adds	r0, r7, r0
    cbfa:	18c0      	adds	r0, r0, r3
    cbfc:	47a8      	blx	r5

		if (entity->read != NULL) {
    cbfe:	0023      	movs	r3, r4
    cc00:	33b0      	adds	r3, #176	; 0xb0
    cc02:	68db      	ldr	r3, [r3, #12]
    cc04:	2b00      	cmp	r3, #0
    cc06:	d07b      	beq.n	cd00 <_http_client_request+0x250>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    cc08:	23b0      	movs	r3, #176	; 0xb0
    cc0a:	5ce3      	ldrb	r3, [r4, r3]
    cc0c:	2b00      	cmp	r3, #0
    cc0e:	d16b      	bne.n	cce8 <_http_client_request+0x238>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    cc10:	0023      	movs	r3, r4
    cc12:	33b0      	adds	r3, #176	; 0xb0
    cc14:	689b      	ldr	r3, [r3, #8]
    cc16:	2b00      	cmp	r3, #0
    cc18:	d072      	beq.n	cd00 <_http_client_request+0x250>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    cc1a:	0022      	movs	r2, r4
    cc1c:	32b0      	adds	r2, #176	; 0xb0
    cc1e:	6950      	ldr	r0, [r2, #20]
    cc20:	4798      	blx	r3
    cc22:	23cc      	movs	r3, #204	; 0xcc
    cc24:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    cc26:	2800      	cmp	r0, #0
    cc28:	da00      	bge.n	cc2c <_http_client_request+0x17c>
    cc2a:	e0ac      	b.n	cd86 <_http_client_request+0x2d6>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    cc2c:	0002      	movs	r2, r0
    cc2e:	4964      	ldr	r1, [pc, #400]	; (cdc0 <_http_client_request+0x310>)
    cc30:	2320      	movs	r3, #32
    cc32:	2008      	movs	r0, #8
    cc34:	1838      	adds	r0, r7, r0
    cc36:	18c0      	adds	r0, r0, r3
    cc38:	4b62      	ldr	r3, [pc, #392]	; (cdc4 <_http_client_request+0x314>)
    cc3a:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    cc3c:	2210      	movs	r2, #16
    cc3e:	4962      	ldr	r1, [pc, #392]	; (cdc8 <_http_client_request+0x318>)
    cc40:	232c      	movs	r3, #44	; 0x2c
    cc42:	2008      	movs	r0, #8
    cc44:	1838      	adds	r0, r7, r0
    cc46:	18c0      	adds	r0, r0, r3
    cc48:	4d55      	ldr	r5, [pc, #340]	; (cda0 <_http_client_request+0x2f0>)
    cc4a:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    cc4c:	2320      	movs	r3, #32
    cc4e:	2208      	movs	r2, #8
    cc50:	18ba      	adds	r2, r7, r2
    cc52:	18d0      	adds	r0, r2, r3
    cc54:	4b51      	ldr	r3, [pc, #324]	; (cd9c <_http_client_request+0x2ec>)
    cc56:	4798      	blx	r3
    cc58:	0002      	movs	r2, r0
    cc5a:	2320      	movs	r3, #32
    cc5c:	2108      	movs	r1, #8
    cc5e:	1879      	adds	r1, r7, r1
    cc60:	18c9      	adds	r1, r1, r3
    cc62:	330c      	adds	r3, #12
    cc64:	2008      	movs	r0, #8
    cc66:	1838      	adds	r0, r7, r0
    cc68:	18c0      	adds	r0, r0, r3
    cc6a:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    cc6c:	2202      	movs	r2, #2
    cc6e:	494f      	ldr	r1, [pc, #316]	; (cdac <_http_client_request+0x2fc>)
    cc70:	232c      	movs	r3, #44	; 0x2c
    cc72:	2008      	movs	r0, #8
    cc74:	1838      	adds	r0, r7, r0
    cc76:	18c0      	adds	r0, r0, r3
    cc78:	47a8      	blx	r5
    cc7a:	e041      	b.n	cd00 <_http_client_request+0x250>
			stream_writer_send_buffer(&writer, "GET ", 4);
    cc7c:	2204      	movs	r2, #4
    cc7e:	4953      	ldr	r1, [pc, #332]	; (cdcc <_http_client_request+0x31c>)
    cc80:	332b      	adds	r3, #43	; 0x2b
    cc82:	2008      	movs	r0, #8
    cc84:	1838      	adds	r0, r7, r0
    cc86:	18c0      	adds	r0, r0, r3
    cc88:	4b45      	ldr	r3, [pc, #276]	; (cda0 <_http_client_request+0x2f0>)
    cc8a:	4798      	blx	r3
    cc8c:	e75b      	b.n	cb46 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "POST ", 5);
    cc8e:	2205      	movs	r2, #5
    cc90:	494f      	ldr	r1, [pc, #316]	; (cdd0 <_http_client_request+0x320>)
    cc92:	332a      	adds	r3, #42	; 0x2a
    cc94:	2008      	movs	r0, #8
    cc96:	1838      	adds	r0, r7, r0
    cc98:	18c0      	adds	r0, r0, r3
    cc9a:	4b41      	ldr	r3, [pc, #260]	; (cda0 <_http_client_request+0x2f0>)
    cc9c:	4798      	blx	r3
    cc9e:	e752      	b.n	cb46 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    cca0:	2207      	movs	r2, #7
    cca2:	494c      	ldr	r1, [pc, #304]	; (cdd4 <_http_client_request+0x324>)
    cca4:	3329      	adds	r3, #41	; 0x29
    cca6:	2008      	movs	r0, #8
    cca8:	1838      	adds	r0, r7, r0
    ccaa:	18c0      	adds	r0, r0, r3
    ccac:	4b3c      	ldr	r3, [pc, #240]	; (cda0 <_http_client_request+0x2f0>)
    ccae:	4798      	blx	r3
    ccb0:	e749      	b.n	cb46 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    ccb2:	2204      	movs	r2, #4
    ccb4:	4948      	ldr	r1, [pc, #288]	; (cdd8 <_http_client_request+0x328>)
    ccb6:	3328      	adds	r3, #40	; 0x28
    ccb8:	2008      	movs	r0, #8
    ccba:	1838      	adds	r0, r7, r0
    ccbc:	18c0      	adds	r0, r0, r3
    ccbe:	4b38      	ldr	r3, [pc, #224]	; (cda0 <_http_client_request+0x2f0>)
    ccc0:	4798      	blx	r3
    ccc2:	e740      	b.n	cb46 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    ccc4:	2208      	movs	r2, #8
    ccc6:	4945      	ldr	r1, [pc, #276]	; (cddc <_http_client_request+0x32c>)
    ccc8:	3327      	adds	r3, #39	; 0x27
    ccca:	2008      	movs	r0, #8
    cccc:	1838      	adds	r0, r7, r0
    ccce:	18c0      	adds	r0, r0, r3
    ccd0:	4b33      	ldr	r3, [pc, #204]	; (cda0 <_http_client_request+0x2f0>)
    ccd2:	4798      	blx	r3
    ccd4:	e737      	b.n	cb46 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    ccd6:	2205      	movs	r2, #5
    ccd8:	4941      	ldr	r1, [pc, #260]	; (cde0 <_http_client_request+0x330>)
    ccda:	3326      	adds	r3, #38	; 0x26
    ccdc:	2008      	movs	r0, #8
    ccde:	1838      	adds	r0, r7, r0
    cce0:	18c0      	adds	r0, r0, r3
    cce2:	4b2f      	ldr	r3, [pc, #188]	; (cda0 <_http_client_request+0x2f0>)
    cce4:	4798      	blx	r3
    cce6:	e72e      	b.n	cb46 <_http_client_request+0x96>
				module->req.content_length = -1;
    cce8:	2201      	movs	r2, #1
    ccea:	4252      	negs	r2, r2
    ccec:	23cc      	movs	r3, #204	; 0xcc
    ccee:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    ccf0:	321d      	adds	r2, #29
    ccf2:	493c      	ldr	r1, [pc, #240]	; (cde4 <_http_client_request+0x334>)
    ccf4:	3ba0      	subs	r3, #160	; 0xa0
    ccf6:	2008      	movs	r0, #8
    ccf8:	1838      	adds	r0, r7, r0
    ccfa:	18c0      	adds	r0, r0, r3
    ccfc:	4b28      	ldr	r3, [pc, #160]	; (cda0 <_http_client_request+0x2f0>)
    ccfe:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    cd00:	23d4      	movs	r3, #212	; 0xd4
    cd02:	58e5      	ldr	r5, [r4, r3]
    cd04:	2d00      	cmp	r5, #0
    cd06:	d00a      	beq.n	cd1e <_http_client_request+0x26e>
			stream_writer_send_buffer(&writer,
    cd08:	0028      	movs	r0, r5
    cd0a:	4b24      	ldr	r3, [pc, #144]	; (cd9c <_http_client_request+0x2ec>)
    cd0c:	4798      	blx	r3
    cd0e:	0002      	movs	r2, r0
    cd10:	0029      	movs	r1, r5
    cd12:	232c      	movs	r3, #44	; 0x2c
    cd14:	2008      	movs	r0, #8
    cd16:	1838      	adds	r0, r7, r0
    cd18:	18c0      	adds	r0, r0, r3
    cd1a:	4b21      	ldr	r3, [pc, #132]	; (cda0 <_http_client_request+0x2f0>)
    cd1c:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    cd1e:	2202      	movs	r2, #2
    cd20:	4922      	ldr	r1, [pc, #136]	; (cdac <_http_client_request+0x2fc>)
    cd22:	232c      	movs	r3, #44	; 0x2c
    cd24:	2008      	movs	r0, #8
    cd26:	1838      	adds	r0, r7, r0
    cd28:	18c0      	adds	r0, r0, r3
    cd2a:	4b1d      	ldr	r3, [pc, #116]	; (cda0 <_http_client_request+0x2f0>)
    cd2c:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    cd2e:	232c      	movs	r3, #44	; 0x2c
    cd30:	2208      	movs	r2, #8
    cd32:	18ba      	adds	r2, r7, r2
    cd34:	18d0      	adds	r0, r2, r3
    cd36:	4b2c      	ldr	r3, [pc, #176]	; (cde8 <_http_client_request+0x338>)
    cd38:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    cd3a:	2304      	movs	r3, #4
    cd3c:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    cd3e:	23cc      	movs	r3, #204	; 0xcc
    cd40:	58e2      	ldr	r2, [r4, r3]
    cd42:	2a00      	cmp	r2, #0
    cd44:	db52      	blt.n	cdec <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    cd46:	dc00      	bgt.n	cd4a <_http_client_request+0x29a>
    cd48:	e0f1      	b.n	cf2e <_http_client_request+0x47e>
    cd4a:	0023      	movs	r3, r4
    cd4c:	33b0      	adds	r3, #176	; 0xb0
    cd4e:	68dd      	ldr	r5, [r3, #12]
    cd50:	2d00      	cmp	r5, #0
    cd52:	d100      	bne.n	cd56 <_http_client_request+0x2a6>
    cd54:	e0eb      	b.n	cf2e <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    cd56:	23d0      	movs	r3, #208	; 0xd0
    cd58:	58e3      	ldr	r3, [r4, r3]
    cd5a:	429a      	cmp	r2, r3
    cd5c:	dd00      	ble.n	cd60 <_http_client_request+0x2b0>
    cd5e:	e0bb      	b.n	ced8 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    cd60:	23c0      	movs	r3, #192	; 0xc0
    cd62:	58e3      	ldr	r3, [r4, r3]
    cd64:	2b00      	cmp	r3, #0
    cd66:	d002      	beq.n	cd6e <_http_client_request+0x2be>
					module->req.entity.close(module->req.entity.priv_data);
    cd68:	22c4      	movs	r2, #196	; 0xc4
    cd6a:	58a0      	ldr	r0, [r4, r2]
    cd6c:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    cd6e:	2302      	movs	r3, #2
    cd70:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    cd72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    cd74:	2b00      	cmp	r3, #0
    cd76:	d100      	bne.n	cd7a <_http_client_request+0x2ca>
    cd78:	e6c0      	b.n	cafc <_http_client_request+0x4c>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    cd7a:	220c      	movs	r2, #12
    cd7c:	18ba      	adds	r2, r7, r2
    cd7e:	2101      	movs	r1, #1
    cd80:	0020      	movs	r0, r4
    cd82:	4798      	blx	r3
    cd84:	e6ba      	b.n	cafc <_http_client_request+0x4c>
					module->req.content_length = 0;
    cd86:	2200      	movs	r2, #0
    cd88:	50e2      	str	r2, [r4, r3]
    cd8a:	e7b9      	b.n	cd00 <_http_client_request+0x250>
    cd8c:	00016670 	.word	0x00016670
    cd90:	00013f45 	.word	0x00013f45
    cd94:	0000c841 	.word	0x0000c841
    cd98:	0000d80d 	.word	0x0000d80d
    cd9c:	0001443f 	.word	0x0001443f
    cda0:	0000d879 	.word	0x0000d879
    cda4:	000166e4 	.word	0x000166e4
    cda8:	000166f0 	.word	0x000166f0
    cdac:	00016cbc 	.word	0x00016cbc
    cdb0:	00016700 	.word	0x00016700
    cdb4:	00016708 	.word	0x00016708
    cdb8:	00016724 	.word	0x00016724
    cdbc:	00016738 	.word	0x00016738
    cdc0:	00016770 	.word	0x00016770
    cdc4:	0001439d 	.word	0x0001439d
    cdc8:	00016774 	.word	0x00016774
    cdcc:	000166b0 	.word	0x000166b0
    cdd0:	000166b8 	.word	0x000166b8
    cdd4:	000166c0 	.word	0x000166c0
    cdd8:	000166c8 	.word	0x000166c8
    cddc:	000166d0 	.word	0x000166d0
    cde0:	000166dc 	.word	0x000166dc
    cde4:	00016750 	.word	0x00016750
    cde8:	0000d81d 	.word	0x0000d81d
		if (module->req.content_length < 0 && entity->read) {
    cdec:	0023      	movs	r3, r4
    cdee:	33b0      	adds	r3, #176	; 0xb0
    cdf0:	68dd      	ldr	r5, [r3, #12]
    cdf2:	2d00      	cmp	r5, #0
    cdf4:	d100      	bne.n	cdf8 <_http_client_request+0x348>
    cdf6:	e09a      	b.n	cf2e <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    cdf8:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    cdfa:	58e3      	ldr	r3, [r4, r3]
    cdfc:	6e62      	ldr	r2, [r4, #100]	; 0x64
    cdfe:	3a07      	subs	r2, #7
    ce00:	1d71      	adds	r1, r6, #5
    ce02:	0020      	movs	r0, r4
    ce04:	30b0      	adds	r0, #176	; 0xb0
    ce06:	6940      	ldr	r0, [r0, #20]
    ce08:	47a8      	blx	r5
    ce0a:	0005      	movs	r5, r0
    ce0c:	43c3      	mvns	r3, r0
    ce0e:	17db      	asrs	r3, r3, #31
    ce10:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    ce12:	220a      	movs	r2, #10
    ce14:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    ce16:	210d      	movs	r1, #13
    ce18:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    ce1a:	1973      	adds	r3, r6, r5
    ce1c:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    ce1e:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    ce20:	230f      	movs	r3, #15
    ce22:	402b      	ands	r3, r5
    ce24:	3206      	adds	r2, #6
    ce26:	3905      	subs	r1, #5
    ce28:	468c      	mov	ip, r1
    ce2a:	44bc      	add	ip, r7
    ce2c:	4462      	add	r2, ip
    ce2e:	5cd3      	ldrb	r3, [r2, r3]
    ce30:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    ce32:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    ce34:	2d0f      	cmp	r5, #15
    ce36:	dd0d      	ble.n	ce54 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    ce38:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    ce3a:	17eb      	asrs	r3, r5, #31
    ce3c:	220f      	movs	r2, #15
    ce3e:	4013      	ands	r3, r2
    ce40:	195b      	adds	r3, r3, r5
    ce42:	111b      	asrs	r3, r3, #4
    ce44:	4013      	ands	r3, r2
    ce46:	3201      	adds	r2, #1
    ce48:	2008      	movs	r0, #8
    ce4a:	4684      	mov	ip, r0
    ce4c:	44bc      	add	ip, r7
    ce4e:	4462      	add	r2, ip
    ce50:	5cd3      	ldrb	r3, [r2, r3]
    ce52:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    ce54:	2dff      	cmp	r5, #255	; 0xff
    ce56:	dd0d      	ble.n	ce74 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    ce58:	17ea      	asrs	r2, r5, #31
    ce5a:	23ff      	movs	r3, #255	; 0xff
    ce5c:	4013      	ands	r3, r2
    ce5e:	195b      	adds	r3, r3, r5
    ce60:	051b      	lsls	r3, r3, #20
    ce62:	0f1b      	lsrs	r3, r3, #28
    ce64:	2210      	movs	r2, #16
    ce66:	2108      	movs	r1, #8
    ce68:	468c      	mov	ip, r1
    ce6a:	44bc      	add	ip, r7
    ce6c:	4462      	add	r2, ip
    ce6e:	5cd3      	ldrb	r3, [r2, r3]
    ce70:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    ce72:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    ce74:	1cca      	adds	r2, r1, #3
    ce76:	1b92      	subs	r2, r2, r6
    ce78:	1d2b      	adds	r3, r5, #4
    ce7a:	18d2      	adds	r2, r2, r3
    ce7c:	b292      	uxth	r2, r2
    ce7e:	2000      	movs	r0, #0
    ce80:	5620      	ldrsb	r0, [r4, r0]
    ce82:	2300      	movs	r3, #0
    ce84:	4e30      	ldr	r6, [pc, #192]	; (cf48 <_http_client_request+0x498>)
    ce86:	47b0      	blx	r6
    ce88:	2800      	cmp	r0, #0
    ce8a:	db19      	blt.n	cec0 <_http_client_request+0x410>
			module->req.sent_length += size;
    ce8c:	22d0      	movs	r2, #208	; 0xd0
    ce8e:	58a3      	ldr	r3, [r4, r2]
    ce90:	195b      	adds	r3, r3, r5
    ce92:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    ce94:	2d00      	cmp	r5, #0
    ce96:	d000      	beq.n	ce9a <_http_client_request+0x3ea>
    ce98:	e630      	b.n	cafc <_http_client_request+0x4c>
				if (module->req.entity.close) {
    ce9a:	23c0      	movs	r3, #192	; 0xc0
    ce9c:	58e3      	ldr	r3, [r4, r3]
    ce9e:	2b00      	cmp	r3, #0
    cea0:	d002      	beq.n	cea8 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    cea2:	3a0c      	subs	r2, #12
    cea4:	58a0      	ldr	r0, [r4, r2]
    cea6:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    cea8:	2302      	movs	r3, #2
    ceaa:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    ceac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    ceae:	2b00      	cmp	r3, #0
    ceb0:	d100      	bne.n	ceb4 <_http_client_request+0x404>
    ceb2:	e623      	b.n	cafc <_http_client_request+0x4c>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    ceb4:	220c      	movs	r2, #12
    ceb6:	18ba      	adds	r2, r7, r2
    ceb8:	2101      	movs	r1, #1
    ceba:	0020      	movs	r0, r4
    cebc:	4798      	blx	r3
    cebe:	e61d      	b.n	cafc <_http_client_request+0x4c>
				_http_client_clear_conn(module, -EIO);
    cec0:	2105      	movs	r1, #5
    cec2:	4249      	negs	r1, r1
    cec4:	0020      	movs	r0, r4
    cec6:	4b21      	ldr	r3, [pc, #132]	; (cf4c <_http_client_request+0x49c>)
    cec8:	4798      	blx	r3
    ceca:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    cecc:	46bd      	mov	sp, r7
    cece:	b013      	add	sp, #76	; 0x4c
    ced0:	bc0c      	pop	{r2, r3}
    ced2:	4692      	mov	sl, r2
    ced4:	469b      	mov	fp, r3
    ced6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    ced8:	0022      	movs	r2, r4
    ceda:	32b0      	adds	r2, #176	; 0xb0
    cedc:	6950      	ldr	r0, [r2, #20]
    cede:	6e62      	ldr	r2, [r4, #100]	; 0x64
    cee0:	0031      	movs	r1, r6
    cee2:	47a8      	blx	r5
			if (size < 0) {
    cee4:	2800      	cmp	r0, #0
    cee6:	db16      	blt.n	cf16 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    cee8:	23cc      	movs	r3, #204	; 0xcc
    ceea:	58e5      	ldr	r5, [r4, r3]
    ceec:	3304      	adds	r3, #4
    ceee:	58e3      	ldr	r3, [r4, r3]
    cef0:	1aed      	subs	r5, r5, r3
    cef2:	4285      	cmp	r5, r0
    cef4:	dd00      	ble.n	cef8 <_http_client_request+0x448>
    cef6:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    cef8:	b2aa      	uxth	r2, r5
    cefa:	2000      	movs	r0, #0
    cefc:	5620      	ldrsb	r0, [r4, r0]
    cefe:	2300      	movs	r3, #0
    cf00:	0031      	movs	r1, r6
    cf02:	4e11      	ldr	r6, [pc, #68]	; (cf48 <_http_client_request+0x498>)
    cf04:	47b0      	blx	r6
    cf06:	2800      	cmp	r0, #0
    cf08:	db0b      	blt.n	cf22 <_http_client_request+0x472>
				module->req.sent_length += size;
    cf0a:	23d0      	movs	r3, #208	; 0xd0
    cf0c:	58e2      	ldr	r2, [r4, r3]
    cf0e:	4694      	mov	ip, r2
    cf10:	4465      	add	r5, ip
    cf12:	50e5      	str	r5, [r4, r3]
    cf14:	e5f2      	b.n	cafc <_http_client_request+0x4c>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    cf16:	2105      	movs	r1, #5
    cf18:	4249      	negs	r1, r1
    cf1a:	0020      	movs	r0, r4
    cf1c:	4b0b      	ldr	r3, [pc, #44]	; (cf4c <_http_client_request+0x49c>)
    cf1e:	4798      	blx	r3
    cf20:	e5ec      	b.n	cafc <_http_client_request+0x4c>
					_http_client_clear_conn(module, -EIO);
    cf22:	2105      	movs	r1, #5
    cf24:	4249      	negs	r1, r1
    cf26:	0020      	movs	r0, r4
    cf28:	4b08      	ldr	r3, [pc, #32]	; (cf4c <_http_client_request+0x49c>)
    cf2a:	4798      	blx	r3
					return;
    cf2c:	e7cd      	b.n	ceca <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    cf2e:	2302      	movs	r3, #2
    cf30:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    cf32:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    cf34:	2b00      	cmp	r3, #0
    cf36:	d100      	bne.n	cf3a <_http_client_request+0x48a>
    cf38:	e5e0      	b.n	cafc <_http_client_request+0x4c>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    cf3a:	220c      	movs	r2, #12
    cf3c:	18ba      	adds	r2, r7, r2
    cf3e:	2101      	movs	r1, #1
    cf40:	0020      	movs	r0, r4
    cf42:	4798      	blx	r3
    cf44:	e5da      	b.n	cafc <_http_client_request+0x4c>
    cf46:	46c0      	nop			; (mov r8, r8)
    cf48:	0000afbd 	.word	0x0000afbd
    cf4c:	0000c999 	.word	0x0000c999

0000cf50 <http_client_send_request>:
{
    cf50:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf52:	46d6      	mov	lr, sl
    cf54:	b500      	push	{lr}
    cf56:	b088      	sub	sp, #32
    cf58:	0004      	movs	r4, r0
    cf5a:	000f      	movs	r7, r1
    cf5c:	4692      	mov	sl, r2
    cf5e:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    cf60:	2800      	cmp	r0, #0
    cf62:	d100      	bne.n	cf66 <http_client_send_request+0x16>
    cf64:	e0d3      	b.n	d10e <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    cf66:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    cf68:	2b02      	cmp	r3, #2
    cf6a:	d900      	bls.n	cf6e <http_client_send_request+0x1e>
    cf6c:	e0d3      	b.n	d116 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    cf6e:	2207      	movs	r2, #7
    cf70:	4981      	ldr	r1, [pc, #516]	; (d178 <http_client_send_request+0x228>)
    cf72:	0038      	movs	r0, r7
    cf74:	4b81      	ldr	r3, [pc, #516]	; (d17c <http_client_send_request+0x22c>)
    cf76:	4798      	blx	r3
		i = 7;
    cf78:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    cf7a:	2800      	cmp	r0, #0
    cf7c:	d007      	beq.n	cf8e <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    cf7e:	2208      	movs	r2, #8
    cf80:	497f      	ldr	r1, [pc, #508]	; (d180 <http_client_send_request+0x230>)
    cf82:	0038      	movs	r0, r7
    cf84:	4b7d      	ldr	r3, [pc, #500]	; (d17c <http_client_send_request+0x22c>)
    cf86:	4798      	blx	r3
		i = 8;
    cf88:	4246      	negs	r6, r0
    cf8a:	4146      	adcs	r6, r0
    cf8c:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    cf8e:	1c63      	adds	r3, r4, #1
    cf90:	19bd      	adds	r5, r7, r6
    cf92:	9302      	str	r3, [sp, #8]
    cf94:	0018      	movs	r0, r3
    cf96:	4b7b      	ldr	r3, [pc, #492]	; (d184 <http_client_send_request+0x234>)
    cf98:	4798      	blx	r3
    cf9a:	0002      	movs	r2, r0
    cf9c:	0029      	movs	r1, r5
    cf9e:	9802      	ldr	r0, [sp, #8]
    cfa0:	4b76      	ldr	r3, [pc, #472]	; (d17c <http_client_send_request+0x22c>)
    cfa2:	4798      	blx	r3
    cfa4:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    cfa6:	782b      	ldrb	r3, [r5, #0]
    cfa8:	2b00      	cmp	r3, #0
    cfaa:	d052      	beq.n	d052 <http_client_send_request+0x102>
    cfac:	2b2f      	cmp	r3, #47	; 0x2f
    cfae:	d052      	beq.n	d056 <http_client_send_request+0x106>
    cfb0:	1c71      	adds	r1, r6, #1
    cfb2:	1879      	adds	r1, r7, r1
    cfb4:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    cfb6:	3201      	adds	r2, #1
    cfb8:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    cfba:	000d      	movs	r5, r1
    cfbc:	780b      	ldrb	r3, [r1, #0]
    cfbe:	2b00      	cmp	r3, #0
    cfc0:	d002      	beq.n	cfc8 <http_client_send_request+0x78>
    cfc2:	3101      	adds	r1, #1
    cfc4:	2b2f      	cmp	r3, #47	; 0x2f
    cfc6:	d1f6      	bne.n	cfb6 <http_client_send_request+0x66>
	module->host[j] = '\0';
    cfc8:	18a2      	adds	r2, r4, r2
    cfca:	2300      	movs	r3, #0
    cfcc:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    cfce:	7863      	ldrb	r3, [r4, #1]
    cfd0:	2b00      	cmp	r3, #0
    cfd2:	d100      	bne.n	cfd6 <http_client_send_request+0x86>
    cfd4:	e0a3      	b.n	d11e <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    cfd6:	0028      	movs	r0, r5
    cfd8:	4b6a      	ldr	r3, [pc, #424]	; (d184 <http_client_send_request+0x234>)
    cfda:	4798      	blx	r3
    cfdc:	283f      	cmp	r0, #63	; 0x3f
    cfde:	d900      	bls.n	cfe2 <http_client_send_request+0x92>
    cfe0:	e0a1      	b.n	d126 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    cfe2:	23d4      	movs	r3, #212	; 0xd4
    cfe4:	58e0      	ldr	r0, [r4, r3]
    cfe6:	2800      	cmp	r0, #0
    cfe8:	d001      	beq.n	cfee <http_client_send_request+0x9e>
		free(module->req.ext_header);
    cfea:	4b67      	ldr	r3, [pc, #412]	; (d188 <http_client_send_request+0x238>)
    cfec:	4798      	blx	r3
	if (ext_header != NULL) {
    cfee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cff0:	2b00      	cmp	r3, #0
    cff2:	d032      	beq.n	d05a <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    cff4:	0018      	movs	r0, r3
    cff6:	4b65      	ldr	r3, [pc, #404]	; (d18c <http_client_send_request+0x23c>)
    cff8:	4798      	blx	r3
    cffa:	23d4      	movs	r3, #212	; 0xd4
    cffc:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    cffe:	2800      	cmp	r0, #0
    d000:	d100      	bne.n	d004 <http_client_send_request+0xb4>
    d002:	e094      	b.n	d12e <http_client_send_request+0x1de>
	module->sending = 0;
    d004:	2241      	movs	r2, #65	; 0x41
    d006:	5ca3      	ldrb	r3, [r4, r2]
    d008:	2101      	movs	r1, #1
    d00a:	438b      	bics	r3, r1
    d00c:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    d00e:	2300      	movs	r3, #0
    d010:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    d012:	782b      	ldrb	r3, [r5, #0]
    d014:	2b2f      	cmp	r3, #47	; 0x2f
    d016:	d024      	beq.n	d062 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    d018:	222f      	movs	r2, #47	; 0x2f
    d01a:	2370      	movs	r3, #112	; 0x70
    d01c:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    d01e:	782b      	ldrb	r3, [r5, #0]
    d020:	2b00      	cmp	r3, #0
    d022:	d124      	bne.n	d06e <http_client_send_request+0x11e>
	if (entity != NULL) {
    d024:	9b03      	ldr	r3, [sp, #12]
    d026:	2b00      	cmp	r3, #0
    d028:	d027      	beq.n	d07a <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    d02a:	0020      	movs	r0, r4
    d02c:	30b0      	adds	r0, #176	; 0xb0
    d02e:	2218      	movs	r2, #24
    d030:	0019      	movs	r1, r3
    d032:	4b57      	ldr	r3, [pc, #348]	; (d190 <http_client_send_request+0x240>)
    d034:	4798      	blx	r3
	module->req.method = method;
    d036:	23c8      	movs	r3, #200	; 0xc8
    d038:	4652      	mov	r2, sl
    d03a:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    d03c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    d03e:	2b01      	cmp	r3, #1
    d040:	d022      	beq.n	d088 <http_client_send_request+0x138>
    d042:	2b00      	cmp	r3, #0
    d044:	d027      	beq.n	d096 <http_client_send_request+0x146>
    d046:	2b02      	cmp	r3, #2
    d048:	d03a      	beq.n	d0c0 <http_client_send_request+0x170>
		return -EAGAIN;
    d04a:	230b      	movs	r3, #11
    d04c:	425b      	negs	r3, r3
    d04e:	9301      	str	r3, [sp, #4]
    d050:	e08d      	b.n	d16e <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    d052:	2200      	movs	r2, #0
    d054:	e7b8      	b.n	cfc8 <http_client_send_request+0x78>
    d056:	2200      	movs	r2, #0
    d058:	e7b6      	b.n	cfc8 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    d05a:	2200      	movs	r2, #0
    d05c:	23d4      	movs	r3, #212	; 0xd4
    d05e:	50e2      	str	r2, [r4, r3]
    d060:	e7d0      	b.n	d004 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    d062:	0020      	movs	r0, r4
    d064:	3070      	adds	r0, #112	; 0x70
    d066:	0029      	movs	r1, r5
    d068:	4b4a      	ldr	r3, [pc, #296]	; (d194 <http_client_send_request+0x244>)
    d06a:	4798      	blx	r3
    d06c:	e7da      	b.n	d024 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    d06e:	0029      	movs	r1, r5
    d070:	0020      	movs	r0, r4
    d072:	3071      	adds	r0, #113	; 0x71
    d074:	4b47      	ldr	r3, [pc, #284]	; (d194 <http_client_send_request+0x244>)
    d076:	4798      	blx	r3
    d078:	e7d4      	b.n	d024 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    d07a:	0020      	movs	r0, r4
    d07c:	30b0      	adds	r0, #176	; 0xb0
    d07e:	2218      	movs	r2, #24
    d080:	2100      	movs	r1, #0
    d082:	4b45      	ldr	r3, [pc, #276]	; (d198 <http_client_send_request+0x248>)
    d084:	4798      	blx	r3
    d086:	e7d6      	b.n	d036 <http_client_send_request+0xe6>
		if (!reconnect) {
    d088:	9b01      	ldr	r3, [sp, #4]
    d08a:	2b00      	cmp	r3, #0
    d08c:	d06f      	beq.n	d16e <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    d08e:	2100      	movs	r1, #0
    d090:	0020      	movs	r0, r4
    d092:	4b42      	ldr	r3, [pc, #264]	; (d19c <http_client_send_request+0x24c>)
    d094:	4798      	blx	r3
		if (module->config.tls) {
    d096:	2352      	movs	r3, #82	; 0x52
    d098:	5ce2      	ldrb	r2, [r4, r3]
    d09a:	1e53      	subs	r3, r2, #1
    d09c:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    d09e:	b2d2      	uxtb	r2, r2
    d0a0:	2101      	movs	r1, #1
    d0a2:	2002      	movs	r0, #2
    d0a4:	4b3e      	ldr	r3, [pc, #248]	; (d1a0 <http_client_send_request+0x250>)
    d0a6:	4798      	blx	r3
    d0a8:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    d0aa:	2800      	cmp	r0, #0
    d0ac:	db43      	blt.n	d136 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    d0ae:	0080      	lsls	r0, r0, #2
    d0b0:	4b3c      	ldr	r3, [pc, #240]	; (d1a4 <http_client_send_request+0x254>)
    d0b2:	50c4      	str	r4, [r0, r3]
    d0b4:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    d0b6:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    d0b8:	2620      	movs	r6, #32
			isv6 = 1;
    d0ba:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    d0bc:	2730      	movs	r7, #48	; 0x30
    d0be:	e00c      	b.n	d0da <http_client_send_request+0x18a>
		if (!reconnect) {
    d0c0:	9b01      	ldr	r3, [sp, #4]
    d0c2:	2b00      	cmp	r3, #0
    d0c4:	d1e3      	bne.n	d08e <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    d0c6:	3303      	adds	r3, #3
    d0c8:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    d0ca:	0020      	movs	r0, r4
    d0cc:	4b36      	ldr	r3, [pc, #216]	; (d1a8 <http_client_send_request+0x258>)
    d0ce:	4798      	blx	r3
			break;
    d0d0:	e04d      	b.n	d16e <http_client_send_request+0x21e>
			if (isv6) {
    d0d2:	2900      	cmp	r1, #0
    d0d4:	d001      	beq.n	d0da <http_client_send_request+0x18a>
    d0d6:	e012      	b.n	d0fe <http_client_send_request+0x1ae>
			isv6 = 1;
    d0d8:	0001      	movs	r1, r0
	while (*host != '\0') {
    d0da:	782a      	ldrb	r2, [r5, #0]
    d0dc:	2a00      	cmp	r2, #0
    d0de:	d02e      	beq.n	d13e <http_client_send_request+0x1ee>
		ch = *host++;
    d0e0:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    d0e2:	0013      	movs	r3, r2
    d0e4:	43b3      	bics	r3, r6
    d0e6:	3b41      	subs	r3, #65	; 0x41
    d0e8:	2b05      	cmp	r3, #5
    d0ea:	d9f5      	bls.n	d0d8 <http_client_send_request+0x188>
    d0ec:	2a3a      	cmp	r2, #58	; 0x3a
    d0ee:	d00a      	beq.n	d106 <http_client_send_request+0x1b6>
    d0f0:	2a2f      	cmp	r2, #47	; 0x2f
    d0f2:	d00a      	beq.n	d10a <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    d0f4:	2a2e      	cmp	r2, #46	; 0x2e
    d0f6:	d0ec      	beq.n	d0d2 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    d0f8:	403a      	ands	r2, r7
    d0fa:	2a30      	cmp	r2, #48	; 0x30
    d0fc:	d0ed      	beq.n	d0da <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    d0fe:	9802      	ldr	r0, [sp, #8]
    d100:	4b2a      	ldr	r3, [pc, #168]	; (d1ac <http_client_send_request+0x25c>)
    d102:	4798      	blx	r3
    d104:	e02f      	b.n	d166 <http_client_send_request+0x216>
			isv6 = 1;
    d106:	0001      	movs	r1, r0
    d108:	e7e7      	b.n	d0da <http_client_send_request+0x18a>
    d10a:	0001      	movs	r1, r0
    d10c:	e7e5      	b.n	d0da <http_client_send_request+0x18a>
		return -EINVAL;
    d10e:	2316      	movs	r3, #22
    d110:	425b      	negs	r3, r3
    d112:	9301      	str	r3, [sp, #4]
    d114:	e02b      	b.n	d16e <http_client_send_request+0x21e>
		return -EBUSY;
    d116:	2310      	movs	r3, #16
    d118:	425b      	negs	r3, r3
    d11a:	9301      	str	r3, [sp, #4]
    d11c:	e027      	b.n	d16e <http_client_send_request+0x21e>
		return -EINVAL;
    d11e:	2316      	movs	r3, #22
    d120:	425b      	negs	r3, r3
    d122:	9301      	str	r3, [sp, #4]
    d124:	e023      	b.n	d16e <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    d126:	235b      	movs	r3, #91	; 0x5b
    d128:	425b      	negs	r3, r3
    d12a:	9301      	str	r3, [sp, #4]
    d12c:	e01f      	b.n	d16e <http_client_send_request+0x21e>
			return -ENOMEM;
    d12e:	230c      	movs	r3, #12
    d130:	425b      	negs	r3, r3
    d132:	9301      	str	r3, [sp, #4]
    d134:	e01b      	b.n	d16e <http_client_send_request+0x21e>
			return -ENOSPC;
    d136:	231c      	movs	r3, #28
    d138:	425b      	negs	r3, r3
    d13a:	9301      	str	r3, [sp, #4]
    d13c:	e017      	b.n	d16e <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    d13e:	2302      	movs	r3, #2
    d140:	aa04      	add	r2, sp, #16
    d142:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    d144:	334e      	adds	r3, #78	; 0x4e
    d146:	5ae3      	ldrh	r3, [r4, r3]
    d148:	021a      	lsls	r2, r3, #8
    d14a:	0a1b      	lsrs	r3, r3, #8
    d14c:	4313      	orrs	r3, r2
    d14e:	aa04      	add	r2, sp, #16
    d150:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    d152:	9802      	ldr	r0, [sp, #8]
    d154:	4b16      	ldr	r3, [pc, #88]	; (d1b0 <http_client_send_request+0x260>)
    d156:	4798      	blx	r3
    d158:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    d15a:	2000      	movs	r0, #0
    d15c:	5620      	ldrsb	r0, [r4, r0]
    d15e:	2210      	movs	r2, #16
    d160:	a904      	add	r1, sp, #16
    d162:	4b14      	ldr	r3, [pc, #80]	; (d1b4 <http_client_send_request+0x264>)
    d164:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    d166:	2301      	movs	r3, #1
    d168:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    d16a:	2300      	movs	r3, #0
    d16c:	9301      	str	r3, [sp, #4]
}
    d16e:	9801      	ldr	r0, [sp, #4]
    d170:	b008      	add	sp, #32
    d172:	bc04      	pop	{r2}
    d174:	4692      	mov	sl, r2
    d176:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d178:	00016794 	.word	0x00016794
    d17c:	0001444d 	.word	0x0001444d
    d180:	0001679c 	.word	0x0001679c
    d184:	0001443f 	.word	0x0001443f
    d188:	00013f31 	.word	0x00013f31
    d18c:	00014405 	.word	0x00014405
    d190:	00013f45 	.word	0x00013f45
    d194:	000143f5 	.word	0x000143f5
    d198:	00013f7b 	.word	0x00013f7b
    d19c:	0000c999 	.word	0x0000c999
    d1a0:	0000ada9 	.word	0x0000ada9
    d1a4:	20000224 	.word	0x20000224
    d1a8:	0000cab1 	.word	0x0000cab1
    d1ac:	0000b1f1 	.word	0x0000b1f1
    d1b0:	0000b185 	.word	0x0000b185
    d1b4:	0000af2d 	.word	0x0000af2d

0000d1b8 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    d1b8:	b510      	push	{r4, lr}
	if (module == NULL) {
    d1ba:	2800      	cmp	r0, #0
    d1bc:	d00d      	beq.n	d1da <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    d1be:	6c41      	ldr	r1, [r0, #68]	; 0x44
    d1c0:	6e02      	ldr	r2, [r0, #96]	; 0x60
    d1c2:	4291      	cmp	r1, r2
    d1c4:	d20a      	bcs.n	d1dc <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    d1c6:	1a52      	subs	r2, r2, r1
    d1c8:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    d1ca:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    d1cc:	469c      	mov	ip, r3
    d1ce:	4461      	add	r1, ip
	recv(module->sock,
    d1d0:	7800      	ldrb	r0, [r0, #0]
    d1d2:	b240      	sxtb	r0, r0
    d1d4:	2300      	movs	r3, #0
    d1d6:	4c04      	ldr	r4, [pc, #16]	; (d1e8 <_http_client_recv_packet+0x30>)
    d1d8:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    d1da:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    d1dc:	218b      	movs	r1, #139	; 0x8b
    d1de:	4249      	negs	r1, r1
    d1e0:	4b02      	ldr	r3, [pc, #8]	; (d1ec <_http_client_recv_packet+0x34>)
    d1e2:	4798      	blx	r3
		return;
    d1e4:	e7f9      	b.n	d1da <_http_client_recv_packet+0x22>
    d1e6:	46c0      	nop			; (mov r8, r8)
    d1e8:	0000b055 	.word	0x0000b055
    d1ec:	0000c999 	.word	0x0000c999

0000d1f0 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    d1f0:	b570      	push	{r4, r5, r6, lr}
    d1f2:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    d1f4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    d1f6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    d1f8:	1a5c      	subs	r4, r3, r1
    d1fa:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    d1fc:	2c00      	cmp	r4, #0
    d1fe:	dc02      	bgt.n	d206 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    d200:	2300      	movs	r3, #0
    d202:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    d204:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    d206:	0022      	movs	r2, r4
    d208:	4b01      	ldr	r3, [pc, #4]	; (d210 <_http_client_move_buffer+0x20>)
    d20a:	4798      	blx	r3
		module->recved_size = remain;
    d20c:	646c      	str	r4, [r5, #68]	; 0x44
    d20e:	e7f9      	b.n	d204 <_http_client_move_buffer+0x14>
    d210:	00013f57 	.word	0x00013f57

0000d214 <_http_client_handle_header>:
{
    d214:	b5f0      	push	{r4, r5, r6, r7, lr}
    d216:	46ce      	mov	lr, r9
    d218:	b500      	push	{lr}
    d21a:	b084      	sub	sp, #16
    d21c:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
    d21e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    d220:	4b62      	ldr	r3, [pc, #392]	; (d3ac <_http_client_handle_header+0x198>)
    d222:	4699      	mov	r9, r3
    d224:	e049      	b.n	d2ba <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
    d226:	0021      	movs	r1, r4
    d228:	0038      	movs	r0, r7
    d22a:	4b61      	ldr	r3, [pc, #388]	; (d3b0 <_http_client_handle_header+0x19c>)
    d22c:	4798      	blx	r3
			return 0;
    d22e:	2600      	movs	r6, #0
}
    d230:	0030      	movs	r0, r6
    d232:	b004      	add	sp, #16
    d234:	bc04      	pop	{r2}
    d236:	4691      	mov	r9, r2
    d238:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    d23a:	1ca1      	adds	r1, r4, #2
    d23c:	0038      	movs	r0, r7
    d23e:	4b5c      	ldr	r3, [pc, #368]	; (d3b0 <_http_client_handle_header+0x19c>)
    d240:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    d242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d244:	2b00      	cmp	r3, #0
    d246:	d00a      	beq.n	d25e <_http_client_handle_header+0x4a>
    d248:	22e4      	movs	r2, #228	; 0xe4
    d24a:	5ab9      	ldrh	r1, [r7, r2]
    d24c:	2900      	cmp	r1, #0
    d24e:	d006      	beq.n	d25e <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
    d250:	3a08      	subs	r2, #8
    d252:	58b8      	ldr	r0, [r7, r2]
    d254:	2800      	cmp	r0, #0
    d256:	db07      	blt.n	d268 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    d258:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    d25a:	4290      	cmp	r0, r2
    d25c:	dc10      	bgt.n	d280 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
    d25e:	2201      	movs	r2, #1
    d260:	23d8      	movs	r3, #216	; 0xd8
    d262:	50fa      	str	r2, [r7, r3]
			return 1;
    d264:	2601      	movs	r6, #1
    d266:	e7e3      	b.n	d230 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
    d268:	aa01      	add	r2, sp, #4
    d26a:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    d26c:	2101      	movs	r1, #1
    d26e:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    d270:	2100      	movs	r1, #0
    d272:	20e0      	movs	r0, #224	; 0xe0
    d274:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    d276:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    d278:	3102      	adds	r1, #2
    d27a:	0038      	movs	r0, r7
    d27c:	4798      	blx	r3
    d27e:	e7ee      	b.n	d25e <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
    d280:	aa01      	add	r2, sp, #4
    d282:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    d284:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    d286:	2100      	movs	r1, #0
    d288:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    d28a:	20e0      	movs	r0, #224	; 0xe0
    d28c:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    d28e:	3102      	adds	r1, #2
    d290:	0038      	movs	r0, r7
    d292:	4798      	blx	r3
    d294:	e7e3      	b.n	d25e <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    d296:	0020      	movs	r0, r4
    d298:	3010      	adds	r0, #16
    d29a:	4b46      	ldr	r3, [pc, #280]	; (d3b4 <_http_client_handle_header+0x1a0>)
    d29c:	4798      	blx	r3
    d29e:	23dc      	movs	r3, #220	; 0xdc
    d2a0:	50f8      	str	r0, [r7, r3]
    d2a2:	e009      	b.n	d2b8 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    d2a4:	3201      	adds	r2, #1
    d2a6:	4295      	cmp	r5, r2
    d2a8:	d006      	beq.n	d2b8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    d2aa:	7813      	ldrb	r3, [r2, #0]
    d2ac:	2b20      	cmp	r3, #32
    d2ae:	d12b      	bne.n	d308 <_http_client_handle_header+0xf4>
    d2b0:	e7f8      	b.n	d2a4 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
    d2b2:	3a21      	subs	r2, #33	; 0x21
    d2b4:	3389      	adds	r3, #137	; 0x89
    d2b6:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    d2b8:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    d2ba:	493f      	ldr	r1, [pc, #252]	; (d3b8 <_http_client_handle_header+0x1a4>)
    d2bc:	0020      	movs	r0, r4
    d2be:	47c8      	blx	r9
    d2c0:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    d2c2:	d0b0      	beq.n	d226 <_http_client_handle_header+0x12>
    d2c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    d2c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    d2c8:	4694      	mov	ip, r2
    d2ca:	4463      	add	r3, ip
    d2cc:	4298      	cmp	r0, r3
    d2ce:	d2aa      	bcs.n	d226 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    d2d0:	2202      	movs	r2, #2
    d2d2:	4939      	ldr	r1, [pc, #228]	; (d3b8 <_http_client_handle_header+0x1a4>)
    d2d4:	0020      	movs	r0, r4
    d2d6:	4b39      	ldr	r3, [pc, #228]	; (d3bc <_http_client_handle_header+0x1a8>)
    d2d8:	4798      	blx	r3
    d2da:	2800      	cmp	r0, #0
    d2dc:	d0ad      	beq.n	d23a <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    d2de:	2210      	movs	r2, #16
    d2e0:	4937      	ldr	r1, [pc, #220]	; (d3c0 <_http_client_handle_header+0x1ac>)
    d2e2:	0020      	movs	r0, r4
    d2e4:	4b35      	ldr	r3, [pc, #212]	; (d3bc <_http_client_handle_header+0x1a8>)
    d2e6:	4798      	blx	r3
    d2e8:	2800      	cmp	r0, #0
    d2ea:	d0d4      	beq.n	d296 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    d2ec:	2213      	movs	r2, #19
    d2ee:	4935      	ldr	r1, [pc, #212]	; (d3c4 <_http_client_handle_header+0x1b0>)
    d2f0:	0020      	movs	r0, r4
    d2f2:	4b32      	ldr	r3, [pc, #200]	; (d3bc <_http_client_handle_header+0x1a8>)
    d2f4:	4798      	blx	r3
    d2f6:	1e06      	subs	r6, r0, #0
    d2f8:	d110      	bne.n	d31c <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    d2fa:	0022      	movs	r2, r4
    d2fc:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    d2fe:	4295      	cmp	r5, r2
    d300:	d9da      	bls.n	d2b8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    d302:	7ce3      	ldrb	r3, [r4, #19]
    d304:	2b20      	cmp	r3, #32
    d306:	d0cd      	beq.n	d2a4 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    d308:	2220      	movs	r2, #32
    d30a:	4393      	bics	r3, r2
    d30c:	2b43      	cmp	r3, #67	; 0x43
    d30e:	d0d0      	beq.n	d2b2 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
    d310:	2186      	movs	r1, #134	; 0x86
    d312:	4249      	negs	r1, r1
    d314:	0038      	movs	r0, r7
    d316:	4b2c      	ldr	r3, [pc, #176]	; (d3c8 <_http_client_handle_header+0x1b4>)
    d318:	4798      	blx	r3
					return 0;
    d31a:	e789      	b.n	d230 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    d31c:	220c      	movs	r2, #12
    d31e:	492b      	ldr	r1, [pc, #172]	; (d3cc <_http_client_handle_header+0x1b8>)
    d320:	0020      	movs	r0, r4
    d322:	4b26      	ldr	r3, [pc, #152]	; (d3bc <_http_client_handle_header+0x1a8>)
    d324:	4798      	blx	r3
    d326:	2800      	cmp	r0, #0
    d328:	d11d      	bne.n	d366 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
    d32a:	0022      	movs	r2, r4
    d32c:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    d32e:	4295      	cmp	r5, r2
    d330:	d9c2      	bls.n	d2b8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    d332:	7b23      	ldrb	r3, [r4, #12]
    d334:	2b20      	cmp	r3, #32
    d336:	d009      	beq.n	d34c <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    d338:	2220      	movs	r2, #32
    d33a:	4393      	bics	r3, r2
    d33c:	2b4b      	cmp	r3, #75	; 0x4b
    d33e:	d00c      	beq.n	d35a <_http_client_handle_header+0x146>
					module->permanent = 0;
    d340:	2241      	movs	r2, #65	; 0x41
    d342:	5cbb      	ldrb	r3, [r7, r2]
    d344:	2102      	movs	r1, #2
    d346:	438b      	bics	r3, r1
    d348:	54bb      	strb	r3, [r7, r2]
    d34a:	e7b5      	b.n	d2b8 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    d34c:	3201      	adds	r2, #1
    d34e:	4295      	cmp	r5, r2
    d350:	d0b2      	beq.n	d2b8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    d352:	7813      	ldrb	r3, [r2, #0]
    d354:	2b20      	cmp	r3, #32
    d356:	d1ef      	bne.n	d338 <_http_client_handle_header+0x124>
    d358:	e7f8      	b.n	d34c <_http_client_handle_header+0x138>
					module->permanent = 1;
    d35a:	3221      	adds	r2, #33	; 0x21
    d35c:	5cbb      	ldrb	r3, [r7, r2]
    d35e:	2102      	movs	r1, #2
    d360:	430b      	orrs	r3, r1
    d362:	54bb      	strb	r3, [r7, r2]
    d364:	e7a8      	b.n	d2b8 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    d366:	2205      	movs	r2, #5
    d368:	4919      	ldr	r1, [pc, #100]	; (d3d0 <_http_client_handle_header+0x1bc>)
    d36a:	0020      	movs	r0, r4
    d36c:	4b13      	ldr	r3, [pc, #76]	; (d3bc <_http_client_handle_header+0x1a8>)
    d36e:	4798      	blx	r3
    d370:	2800      	cmp	r0, #0
    d372:	d1a1      	bne.n	d2b8 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    d374:	0020      	movs	r0, r4
    d376:	3009      	adds	r0, #9
    d378:	4b0e      	ldr	r3, [pc, #56]	; (d3b4 <_http_client_handle_header+0x1a0>)
    d37a:	4798      	blx	r3
    d37c:	23e4      	movs	r3, #228	; 0xe4
    d37e:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    d380:	2200      	movs	r2, #0
    d382:	3b08      	subs	r3, #8
    d384:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    d386:	7963      	ldrb	r3, [r4, #5]
    d388:	2b31      	cmp	r3, #49	; 0x31
    d38a:	d802      	bhi.n	d392 <_http_client_handle_header+0x17e>
    d38c:	79e3      	ldrb	r3, [r4, #7]
    d38e:	2b30      	cmp	r3, #48	; 0x30
    d390:	d905      	bls.n	d39e <_http_client_handle_header+0x18a>
				module->permanent = 1;
    d392:	2241      	movs	r2, #65	; 0x41
    d394:	5cbb      	ldrb	r3, [r7, r2]
    d396:	2102      	movs	r1, #2
    d398:	430b      	orrs	r3, r1
    d39a:	54bb      	strb	r3, [r7, r2]
    d39c:	e78c      	b.n	d2b8 <_http_client_handle_header+0xa4>
				module->permanent = 0;
    d39e:	2241      	movs	r2, #65	; 0x41
    d3a0:	5cbb      	ldrb	r3, [r7, r2]
    d3a2:	2102      	movs	r1, #2
    d3a4:	438b      	bics	r3, r1
    d3a6:	54bb      	strb	r3, [r7, r2]
    d3a8:	e786      	b.n	d2b8 <_http_client_handle_header+0xa4>
    d3aa:	46c0      	nop			; (mov r8, r8)
    d3ac:	0001446f 	.word	0x0001446f
    d3b0:	0000d1f1 	.word	0x0000d1f1
    d3b4:	00013ec9 	.word	0x00013ec9
    d3b8:	00016cbc 	.word	0x00016cbc
    d3bc:	0001444d 	.word	0x0001444d
    d3c0:	00016774 	.word	0x00016774
    d3c4:	00016684 	.word	0x00016684
    d3c8:	0000c999 	.word	0x0000c999
    d3cc:	00016698 	.word	0x00016698
    d3d0:	000166a8 	.word	0x000166a8

0000d3d4 <_http_client_handle_entity>:
{
    d3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3d6:	46ce      	mov	lr, r9
    d3d8:	b500      	push	{lr}
    d3da:	b086      	sub	sp, #24
    d3dc:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    d3de:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    d3e0:	23dc      	movs	r3, #220	; 0xdc
    d3e2:	58c3      	ldr	r3, [r0, r3]
    d3e4:	2b00      	cmp	r3, #0
    d3e6:	db69      	blt.n	d4bc <_http_client_handle_entity+0xe8>
    d3e8:	6e02      	ldr	r2, [r0, #96]	; 0x60
    d3ea:	4293      	cmp	r3, r2
    d3ec:	dc2b      	bgt.n	d446 <_http_client_handle_entity+0x72>
	return 0;
    d3ee:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    d3f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    d3f2:	4293      	cmp	r3, r2
    d3f4:	dc4e      	bgt.n	d494 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
    d3f6:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    d3f8:	2e00      	cmp	r6, #0
    d3fa:	d003      	beq.n	d404 <_http_client_handle_entity+0x30>
    d3fc:	22e4      	movs	r2, #228	; 0xe4
    d3fe:	5aa1      	ldrh	r1, [r4, r2]
    d400:	2900      	cmp	r1, #0
    d402:	d10e      	bne.n	d422 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
    d404:	2300      	movs	r3, #0
    d406:	22d8      	movs	r2, #216	; 0xd8
    d408:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    d40a:	320c      	adds	r2, #12
    d40c:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    d40e:	3341      	adds	r3, #65	; 0x41
    d410:	5ce3      	ldrb	r3, [r4, r3]
    d412:	079b      	lsls	r3, r3, #30
    d414:	d40f      	bmi.n	d436 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
    d416:	2100      	movs	r1, #0
    d418:	0020      	movs	r0, r4
    d41a:	4b71      	ldr	r3, [pc, #452]	; (d5e0 <_http_client_handle_entity+0x20c>)
    d41c:	4798      	blx	r3
	return 0;
    d41e:	2000      	movs	r0, #0
    d420:	e038      	b.n	d494 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
    d422:	aa03      	add	r2, sp, #12
    d424:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    d426:	2100      	movs	r1, #0
    d428:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    d42a:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    d42c:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    d42e:	3102      	adds	r1, #2
    d430:	0020      	movs	r0, r4
    d432:	47b0      	blx	r6
    d434:	e7e6      	b.n	d404 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    d436:	23dc      	movs	r3, #220	; 0xdc
    d438:	58e1      	ldr	r1, [r4, r3]
    d43a:	1869      	adds	r1, r5, r1
    d43c:	0020      	movs	r0, r4
    d43e:	4b69      	ldr	r3, [pc, #420]	; (d5e4 <_http_client_handle_entity+0x210>)
    d440:	4798      	blx	r3
				return module->recved_size;
    d442:	6c60      	ldr	r0, [r4, #68]	; 0x44
    d444:	e026      	b.n	d494 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
    d446:	6c42      	ldr	r2, [r0, #68]	; 0x44
    d448:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    d44a:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    d44c:	21e0      	movs	r1, #224	; 0xe0
    d44e:	5840      	ldr	r0, [r0, r1]
    d450:	4684      	mov	ip, r0
    d452:	4462      	add	r2, ip
    d454:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    d456:	4293      	cmp	r3, r2
    d458:	dc20      	bgt.n	d49c <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
    d45a:	2300      	movs	r3, #0
    d45c:	22d8      	movs	r2, #216	; 0xd8
    d45e:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    d460:	320c      	adds	r2, #12
    d462:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    d464:	3ae3      	subs	r2, #227	; 0xe3
    d466:	ab03      	add	r3, sp, #12
    d468:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    d46a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    d46c:	2b00      	cmp	r3, #0
    d46e:	d007      	beq.n	d480 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    d470:	ae03      	add	r6, sp, #12
    d472:	0032      	movs	r2, r6
    d474:	2103      	movs	r1, #3
    d476:	0020      	movs	r0, r4
    d478:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    d47a:	7a33      	ldrb	r3, [r6, #8]
    d47c:	2b01      	cmp	r3, #1
    d47e:	d103      	bne.n	d488 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
    d480:	2341      	movs	r3, #65	; 0x41
    d482:	5ce3      	ldrb	r3, [r4, r3]
    d484:	079b      	lsls	r3, r3, #30
    d486:	d510      	bpl.n	d4aa <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
    d488:	6c63      	ldr	r3, [r4, #68]	; 0x44
    d48a:	18e9      	adds	r1, r5, r3
    d48c:	0020      	movs	r0, r4
    d48e:	4b55      	ldr	r3, [pc, #340]	; (d5e4 <_http_client_handle_entity+0x210>)
    d490:	4798      	blx	r3
	return 0;
    d492:	2000      	movs	r0, #0
}
    d494:	b006      	add	sp, #24
    d496:	bc04      	pop	{r2}
    d498:	4691      	mov	r9, r2
    d49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    d49c:	2200      	movs	r2, #0
    d49e:	ab03      	add	r3, sp, #12
    d4a0:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    d4a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    d4a4:	2b00      	cmp	r3, #0
    d4a6:	d0ef      	beq.n	d488 <_http_client_handle_entity+0xb4>
    d4a8:	e7e2      	b.n	d470 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
    d4aa:	484f      	ldr	r0, [pc, #316]	; (d5e8 <_http_client_handle_entity+0x214>)
    d4ac:	4b4f      	ldr	r3, [pc, #316]	; (d5ec <_http_client_handle_entity+0x218>)
    d4ae:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    d4b0:	2100      	movs	r1, #0
    d4b2:	0020      	movs	r0, r4
    d4b4:	4b4a      	ldr	r3, [pc, #296]	; (d5e0 <_http_client_handle_entity+0x20c>)
    d4b6:	4798      	blx	r3
					return 0;
    d4b8:	2000      	movs	r0, #0
    d4ba:	e7eb      	b.n	d494 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
    d4bc:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    d4be:	2300      	movs	r3, #0
    d4c0:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
    d4c2:	26e0      	movs	r6, #224	; 0xe0
    d4c4:	e00a      	b.n	d4dc <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
    d4c6:	2341      	movs	r3, #65	; 0x41
    d4c8:	5ce3      	ldrb	r3, [r4, r3]
    d4ca:	079b      	lsls	r3, r3, #30
    d4cc:	d51b      	bpl.n	d506 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
    d4ce:	1ca9      	adds	r1, r5, #2
    d4d0:	0020      	movs	r0, r4
    d4d2:	4b44      	ldr	r3, [pc, #272]	; (d5e4 <_http_client_handle_entity+0x210>)
    d4d4:	4798      	blx	r3
	} while(module->recved_size > 0);
    d4d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    d4d8:	2b00      	cmp	r3, #0
    d4da:	d073      	beq.n	d5c4 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
    d4dc:	59a3      	ldr	r3, [r4, r6]
    d4de:	2b00      	cmp	r3, #0
    d4e0:	db30      	blt.n	d544 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
    d4e2:	d116      	bne.n	d512 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
    d4e4:	22d8      	movs	r2, #216	; 0xd8
    d4e6:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    d4e8:	320c      	adds	r2, #12
    d4ea:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    d4ec:	3ae3      	subs	r2, #227	; 0xe3
    d4ee:	4669      	mov	r1, sp
    d4f0:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    d4f2:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    d4f4:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    d4f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    d4f8:	2b00      	cmp	r3, #0
    d4fa:	d0e4      	beq.n	d4c6 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    d4fc:	466a      	mov	r2, sp
    d4fe:	2103      	movs	r1, #3
    d500:	0020      	movs	r0, r4
    d502:	4798      	blx	r3
    d504:	e7df      	b.n	d4c6 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
    d506:	2100      	movs	r1, #0
    d508:	0020      	movs	r0, r4
    d50a:	4b35      	ldr	r3, [pc, #212]	; (d5e0 <_http_client_handle_entity+0x20c>)
    d50c:	4798      	blx	r3
	return 0;
    d50e:	2000      	movs	r0, #0
    d510:	e7c0      	b.n	d494 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
    d512:	42bb      	cmp	r3, r7
    d514:	dcdf      	bgt.n	d4d6 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
    d516:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    d518:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    d51a:	2300      	movs	r3, #0
    d51c:	466a      	mov	r2, sp
    d51e:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    d520:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    d522:	2b00      	cmp	r3, #0
    d524:	d002      	beq.n	d52c <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    d526:	2103      	movs	r1, #3
    d528:	0020      	movs	r0, r4
    d52a:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    d52c:	59a3      	ldr	r3, [r4, r6]
    d52e:	1c99      	adds	r1, r3, #2
    d530:	1869      	adds	r1, r5, r1
    d532:	0020      	movs	r0, r4
    d534:	4b2b      	ldr	r3, [pc, #172]	; (d5e4 <_http_client_handle_entity+0x210>)
    d536:	4798      	blx	r3
				length = (int)module->recved_size;
    d538:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    d53a:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    d53c:	2301      	movs	r3, #1
    d53e:	425b      	negs	r3, r3
    d540:	51a3      	str	r3, [r4, r6]
    d542:	e7c8      	b.n	d4d6 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
    d544:	2300      	movs	r3, #0
    d546:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    d548:	2f00      	cmp	r7, #0
    d54a:	dd04      	ble.n	d556 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
    d54c:	782b      	ldrb	r3, [r5, #0]
    d54e:	2b0a      	cmp	r3, #10
    d550:	d11c      	bne.n	d58c <_http_client_handle_entity+0x1b8>
					buffer++;
    d552:	3501      	adds	r5, #1
					length--;
    d554:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    d556:	59a3      	ldr	r3, [r4, r6]
    d558:	6e22      	ldr	r2, [r4, #96]	; 0x60
    d55a:	4293      	cmp	r3, r2
    d55c:	dc39      	bgt.n	d5d2 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
    d55e:	2f00      	cmp	r7, #0
    d560:	d1b9      	bne.n	d4d6 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
    d562:	2201      	movs	r2, #1
    d564:	4252      	negs	r2, r2
    d566:	23e0      	movs	r3, #224	; 0xe0
    d568:	50e2      	str	r2, [r4, r3]
    d56a:	e7d0      	b.n	d50e <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    d56c:	001a      	movs	r2, r3
    d56e:	3a61      	subs	r2, #97	; 0x61
    d570:	2a05      	cmp	r2, #5
    d572:	d818      	bhi.n	d5a6 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    d574:	59a2      	ldr	r2, [r4, r6]
    d576:	0112      	lsls	r2, r2, #4
    d578:	18d3      	adds	r3, r2, r3
    d57a:	3b61      	subs	r3, #97	; 0x61
    d57c:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    d57e:	3501      	adds	r5, #1
    d580:	3f01      	subs	r7, #1
    d582:	2f00      	cmp	r7, #0
    d584:	d020      	beq.n	d5c8 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
    d586:	782b      	ldrb	r3, [r5, #0]
    d588:	2b0a      	cmp	r3, #10
    d58a:	d0e2      	beq.n	d552 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
    d58c:	464a      	mov	r2, r9
    d58e:	2a00      	cmp	r2, #0
    d590:	d1f5      	bne.n	d57e <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
    d592:	001a      	movs	r2, r3
    d594:	3a30      	subs	r2, #48	; 0x30
    d596:	2a09      	cmp	r2, #9
    d598:	d8e8      	bhi.n	d56c <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    d59a:	59a2      	ldr	r2, [r4, r6]
    d59c:	0112      	lsls	r2, r2, #4
    d59e:	18d3      	adds	r3, r2, r3
    d5a0:	3b30      	subs	r3, #48	; 0x30
    d5a2:	51a3      	str	r3, [r4, r6]
    d5a4:	e7eb      	b.n	d57e <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    d5a6:	001a      	movs	r2, r3
    d5a8:	3a41      	subs	r2, #65	; 0x41
    d5aa:	2a05      	cmp	r2, #5
    d5ac:	d805      	bhi.n	d5ba <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    d5ae:	59a2      	ldr	r2, [r4, r6]
    d5b0:	0112      	lsls	r2, r2, #4
    d5b2:	18d3      	adds	r3, r2, r3
    d5b4:	3b41      	subs	r3, #65	; 0x41
    d5b6:	51a3      	str	r3, [r4, r6]
    d5b8:	e7e1      	b.n	d57e <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
    d5ba:	3b3b      	subs	r3, #59	; 0x3b
    d5bc:	425a      	negs	r2, r3
    d5be:	415a      	adcs	r2, r3
    d5c0:	4691      	mov	r9, r2
    d5c2:	e7dc      	b.n	d57e <_http_client_handle_entity+0x1aa>
	return 0;
    d5c4:	2000      	movs	r0, #0
    d5c6:	e765      	b.n	d494 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    d5c8:	23e0      	movs	r3, #224	; 0xe0
    d5ca:	58e3      	ldr	r3, [r4, r3]
    d5cc:	6e22      	ldr	r2, [r4, #96]	; 0x60
    d5ce:	4293      	cmp	r3, r2
    d5d0:	ddc7      	ble.n	d562 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
    d5d2:	218b      	movs	r1, #139	; 0x8b
    d5d4:	4249      	negs	r1, r1
    d5d6:	0020      	movs	r0, r4
    d5d8:	4b01      	ldr	r3, [pc, #4]	; (d5e0 <_http_client_handle_entity+0x20c>)
    d5da:	4798      	blx	r3
    d5dc:	e797      	b.n	d50e <_http_client_handle_entity+0x13a>
    d5de:	46c0      	nop			; (mov r8, r8)
    d5e0:	0000c999 	.word	0x0000c999
    d5e4:	0000d1f1 	.word	0x0000d1f1
    d5e8:	00016680 	.word	0x00016680
    d5ec:	000141f9 	.word	0x000141f9

0000d5f0 <_http_client_handle_response>:
{
    d5f0:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    d5f2:	23d8      	movs	r3, #216	; 0xd8
    d5f4:	58c3      	ldr	r3, [r0, r3]
    d5f6:	2b00      	cmp	r3, #0
    d5f8:	d003      	beq.n	d602 <_http_client_handle_response+0x12>
    d5fa:	2b01      	cmp	r3, #1
    d5fc:	d004      	beq.n	d608 <_http_client_handle_response+0x18>
	return 0;
    d5fe:	2000      	movs	r0, #0
    d600:	e001      	b.n	d606 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
    d602:	4b03      	ldr	r3, [pc, #12]	; (d610 <_http_client_handle_response+0x20>)
    d604:	4798      	blx	r3
}
    d606:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    d608:	4b02      	ldr	r3, [pc, #8]	; (d614 <_http_client_handle_response+0x24>)
    d60a:	4798      	blx	r3
    d60c:	e7fb      	b.n	d606 <_http_client_handle_response+0x16>
    d60e:	46c0      	nop			; (mov r8, r8)
    d610:	0000d215 	.word	0x0000d215
    d614:	0000d3d5 	.word	0x0000d3d5

0000d618 <_http_client_recved_packet>:
{
    d618:	b570      	push	{r4, r5, r6, lr}
    d61a:	0004      	movs	r4, r0
	module->recved_size += read_len;
    d61c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d61e:	469c      	mov	ip, r3
    d620:	4461      	add	r1, ip
    d622:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    d624:	2358      	movs	r3, #88	; 0x58
    d626:	5ac3      	ldrh	r3, [r0, r3]
    d628:	2b00      	cmp	r3, #0
    d62a:	d105      	bne.n	d638 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
    d62c:	4d05      	ldr	r5, [pc, #20]	; (d644 <_http_client_recved_packet+0x2c>)
    d62e:	0020      	movs	r0, r4
    d630:	47a8      	blx	r5
    d632:	2800      	cmp	r0, #0
    d634:	d1fb      	bne.n	d62e <_http_client_recved_packet+0x16>
}
    d636:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    d638:	6c81      	ldr	r1, [r0, #72]	; 0x48
    d63a:	6d40      	ldr	r0, [r0, #84]	; 0x54
    d63c:	4b02      	ldr	r3, [pc, #8]	; (d648 <_http_client_recved_packet+0x30>)
    d63e:	4798      	blx	r3
    d640:	e7f4      	b.n	d62c <_http_client_recved_packet+0x14>
    d642:	46c0      	nop			; (mov r8, r8)
    d644:	0000d5f1 	.word	0x0000d5f1
    d648:	0000d9ed 	.word	0x0000d9ed

0000d64c <http_client_socket_event_handler>:
{
    d64c:	b510      	push	{r4, lr}
    d64e:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
    d650:	0080      	lsls	r0, r0, #2
    d652:	4b65      	ldr	r3, [pc, #404]	; (d7e8 <http_client_socket_event_handler+0x19c>)
    d654:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    d656:	2c00      	cmp	r4, #0
    d658:	d006      	beq.n	d668 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
    d65a:	2906      	cmp	r1, #6
    d65c:	d051      	beq.n	d702 <http_client_socket_event_handler+0xb6>
    d65e:	2907      	cmp	r1, #7
    d660:	d100      	bne.n	d664 <http_client_socket_event_handler+0x18>
    d662:	e08a      	b.n	d77a <http_client_socket_event_handler+0x12e>
    d664:	2905      	cmp	r1, #5
    d666:	d001      	beq.n	d66c <http_client_socket_event_handler+0x20>
}
    d668:	b004      	add	sp, #16
    d66a:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    d66c:	2301      	movs	r3, #1
    d66e:	56d3      	ldrsb	r3, [r2, r3]
    d670:	1e1a      	subs	r2, r3, #0
    d672:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    d674:	db15      	blt.n	d6a2 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
    d676:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    d678:	2b00      	cmp	r3, #0
    d67a:	d003      	beq.n	d684 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    d67c:	aa01      	add	r2, sp, #4
    d67e:	2100      	movs	r1, #0
    d680:	0020      	movs	r0, r4
    d682:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    d684:	2303      	movs	r3, #3
    d686:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    d688:	3355      	adds	r3, #85	; 0x55
    d68a:	5ae2      	ldrh	r2, [r4, r3]
    d68c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    d68e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    d690:	4b56      	ldr	r3, [pc, #344]	; (d7ec <http_client_socket_event_handler+0x1a0>)
    d692:	4798      	blx	r3
    		_http_client_recv_packet(module);
    d694:	0020      	movs	r0, r4
    d696:	4b56      	ldr	r3, [pc, #344]	; (d7f0 <http_client_socket_event_handler+0x1a4>)
    d698:	4798      	blx	r3
			_http_client_request(module);
    d69a:	0020      	movs	r0, r4
    d69c:	4b55      	ldr	r3, [pc, #340]	; (d7f4 <http_client_socket_event_handler+0x1a8>)
    d69e:	4798      	blx	r3
    d6a0:	e7e2      	b.n	d668 <http_client_socket_event_handler+0x1c>
	switch (err) {
    d6a2:	330e      	adds	r3, #14
    d6a4:	b2d9      	uxtb	r1, r3
    d6a6:	290e      	cmp	r1, #14
    d6a8:	d81e      	bhi.n	d6e8 <http_client_socket_event_handler+0x9c>
    d6aa:	008b      	lsls	r3, r1, #2
    d6ac:	4952      	ldr	r1, [pc, #328]	; (d7f8 <http_client_socket_event_handler+0x1ac>)
    d6ae:	58cb      	ldr	r3, [r1, r3]
    d6b0:	469f      	mov	pc, r3
			return -ENOENT;
    d6b2:	2102      	movs	r1, #2
    d6b4:	4249      	negs	r1, r1
    d6b6:	e01d      	b.n	d6f4 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
    d6b8:	2170      	movs	r1, #112	; 0x70
    d6ba:	4249      	negs	r1, r1
    d6bc:	e01a      	b.n	d6f4 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    d6be:	210c      	movs	r1, #12
    d6c0:	4249      	negs	r1, r1
    d6c2:	e017      	b.n	d6f4 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
    d6c4:	2116      	movs	r1, #22
    d6c6:	4249      	negs	r1, r1
    d6c8:	e014      	b.n	d6f4 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    d6ca:	210c      	movs	r1, #12
    d6cc:	4249      	negs	r1, r1
    d6ce:	e011      	b.n	d6f4 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
    d6d0:	2179      	movs	r1, #121	; 0x79
    d6d2:	4249      	negs	r1, r1
    d6d4:	e00e      	b.n	d6f4 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
    d6d6:	2168      	movs	r1, #104	; 0x68
    d6d8:	4249      	negs	r1, r1
    d6da:	e00b      	b.n	d6f4 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
    d6dc:	210b      	movs	r1, #11
    d6de:	4249      	negs	r1, r1
    d6e0:	e008      	b.n	d6f4 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
    d6e2:	2110      	movs	r1, #16
    d6e4:	4249      	negs	r1, r1
    d6e6:	e005      	b.n	d6f4 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
    d6e8:	2a00      	cmp	r2, #0
    d6ea:	db07      	blt.n	d6fc <http_client_socket_event_handler+0xb0>
			return 0;
    d6ec:	2100      	movs	r1, #0
    d6ee:	e001      	b.n	d6f4 <http_client_socket_event_handler+0xa8>
			return -EIO;
    d6f0:	2105      	movs	r1, #5
    d6f2:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    d6f4:	0020      	movs	r0, r4
    d6f6:	4b41      	ldr	r3, [pc, #260]	; (d7fc <http_client_socket_event_handler+0x1b0>)
    d6f8:	4798      	blx	r3
    d6fa:	e7b5      	b.n	d668 <http_client_socket_event_handler+0x1c>
				return -EIO;
    d6fc:	2105      	movs	r1, #5
    d6fe:	4249      	negs	r1, r1
    d700:	e7f8      	b.n	d6f4 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
    d702:	2304      	movs	r3, #4
    d704:	5ed1      	ldrsh	r1, [r2, r3]
    d706:	2900      	cmp	r1, #0
    d708:	dd06      	ble.n	d718 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    d70a:	0020      	movs	r0, r4
    d70c:	4b3c      	ldr	r3, [pc, #240]	; (d800 <http_client_socket_event_handler+0x1b4>)
    d70e:	4798      	blx	r3
		_http_client_recv_packet(module);
    d710:	0020      	movs	r0, r4
    d712:	4b37      	ldr	r3, [pc, #220]	; (d7f0 <http_client_socket_event_handler+0x1a4>)
    d714:	4798      	blx	r3
		break;
    d716:	e7a7      	b.n	d668 <http_client_socket_event_handler+0x1c>
	switch (err) {
    d718:	000b      	movs	r3, r1
    d71a:	330e      	adds	r3, #14
    d71c:	b29a      	uxth	r2, r3
    d71e:	2a0e      	cmp	r2, #14
    d720:	d81e      	bhi.n	d760 <http_client_socket_event_handler+0x114>
    d722:	0093      	lsls	r3, r2, #2
    d724:	4a37      	ldr	r2, [pc, #220]	; (d804 <http_client_socket_event_handler+0x1b8>)
    d726:	58d3      	ldr	r3, [r2, r3]
    d728:	469f      	mov	pc, r3
			return -ENOENT;
    d72a:	2102      	movs	r1, #2
    d72c:	4249      	negs	r1, r1
    d72e:	e01d      	b.n	d76c <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    d730:	2170      	movs	r1, #112	; 0x70
    d732:	4249      	negs	r1, r1
    d734:	e01a      	b.n	d76c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    d736:	210c      	movs	r1, #12
    d738:	4249      	negs	r1, r1
    d73a:	e017      	b.n	d76c <http_client_socket_event_handler+0x120>
			return -EINVAL;
    d73c:	2116      	movs	r1, #22
    d73e:	4249      	negs	r1, r1
    d740:	e014      	b.n	d76c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    d742:	210c      	movs	r1, #12
    d744:	4249      	negs	r1, r1
    d746:	e011      	b.n	d76c <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    d748:	2179      	movs	r1, #121	; 0x79
    d74a:	4249      	negs	r1, r1
    d74c:	e00e      	b.n	d76c <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    d74e:	2168      	movs	r1, #104	; 0x68
    d750:	4249      	negs	r1, r1
    d752:	e00b      	b.n	d76c <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    d754:	210b      	movs	r1, #11
    d756:	4249      	negs	r1, r1
    d758:	e008      	b.n	d76c <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    d75a:	2110      	movs	r1, #16
    d75c:	4249      	negs	r1, r1
    d75e:	e005      	b.n	d76c <http_client_socket_event_handler+0x120>
			if (err < 0) {
    d760:	2900      	cmp	r1, #0
    d762:	db07      	blt.n	d774 <http_client_socket_event_handler+0x128>
			return 0;
    d764:	2100      	movs	r1, #0
    d766:	e001      	b.n	d76c <http_client_socket_event_handler+0x120>
			return -EIO;
    d768:	2105      	movs	r1, #5
    d76a:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    d76c:	0020      	movs	r0, r4
    d76e:	4b23      	ldr	r3, [pc, #140]	; (d7fc <http_client_socket_event_handler+0x1b0>)
    d770:	4798      	blx	r3
    d772:	e7cd      	b.n	d710 <http_client_socket_event_handler+0xc4>
				return -EIO;
    d774:	2105      	movs	r1, #5
    d776:	4249      	negs	r1, r1
    d778:	e7f8      	b.n	d76c <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    d77a:	2300      	movs	r3, #0
    d77c:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    d77e:	2b00      	cmp	r3, #0
    d780:	db08      	blt.n	d794 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    d782:	0020      	movs	r0, r4
    d784:	4b1b      	ldr	r3, [pc, #108]	; (d7f4 <http_client_socket_event_handler+0x1a8>)
    d786:	4798      	blx	r3
		module->sending = 0;
    d788:	2241      	movs	r2, #65	; 0x41
    d78a:	5ca3      	ldrb	r3, [r4, r2]
    d78c:	2101      	movs	r1, #1
    d78e:	438b      	bics	r3, r1
    d790:	54a3      	strb	r3, [r4, r2]
    	break;
    d792:	e769      	b.n	d668 <http_client_socket_event_handler+0x1c>
	switch (err) {
    d794:	330e      	adds	r3, #14
    d796:	b29a      	uxth	r2, r3
    d798:	2a0d      	cmp	r2, #13
    d79a:	d81e      	bhi.n	d7da <http_client_socket_event_handler+0x18e>
    d79c:	0093      	lsls	r3, r2, #2
    d79e:	4a1a      	ldr	r2, [pc, #104]	; (d808 <http_client_socket_event_handler+0x1bc>)
    d7a0:	58d3      	ldr	r3, [r2, r3]
    d7a2:	469f      	mov	pc, r3
			return -ENOENT;
    d7a4:	2102      	movs	r1, #2
    d7a6:	4249      	negs	r1, r1
    d7a8:	e019      	b.n	d7de <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    d7aa:	2170      	movs	r1, #112	; 0x70
    d7ac:	4249      	negs	r1, r1
    d7ae:	e016      	b.n	d7de <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    d7b0:	210c      	movs	r1, #12
    d7b2:	4249      	negs	r1, r1
    d7b4:	e013      	b.n	d7de <http_client_socket_event_handler+0x192>
			return -EINVAL;
    d7b6:	2116      	movs	r1, #22
    d7b8:	4249      	negs	r1, r1
    d7ba:	e010      	b.n	d7de <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    d7bc:	210c      	movs	r1, #12
    d7be:	4249      	negs	r1, r1
    d7c0:	e00d      	b.n	d7de <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    d7c2:	2179      	movs	r1, #121	; 0x79
    d7c4:	4249      	negs	r1, r1
    d7c6:	e00a      	b.n	d7de <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    d7c8:	2168      	movs	r1, #104	; 0x68
    d7ca:	4249      	negs	r1, r1
    d7cc:	e007      	b.n	d7de <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    d7ce:	210b      	movs	r1, #11
    d7d0:	4249      	negs	r1, r1
    d7d2:	e004      	b.n	d7de <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    d7d4:	2110      	movs	r1, #16
    d7d6:	4249      	negs	r1, r1
    d7d8:	e001      	b.n	d7de <http_client_socket_event_handler+0x192>
			return -EIO;
    d7da:	2105      	movs	r1, #5
    d7dc:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    d7de:	0020      	movs	r0, r4
    d7e0:	4b06      	ldr	r3, [pc, #24]	; (d7fc <http_client_socket_event_handler+0x1b0>)
    d7e2:	4798      	blx	r3
    d7e4:	e7d0      	b.n	d788 <http_client_socket_event_handler+0x13c>
    d7e6:	46c0      	nop			; (mov r8, r8)
    d7e8:	20000224 	.word	0x20000224
    d7ec:	0000d9c1 	.word	0x0000d9c1
    d7f0:	0000d1b9 	.word	0x0000d1b9
    d7f4:	0000cab1 	.word	0x0000cab1
    d7f8:	000165c0 	.word	0x000165c0
    d7fc:	0000c999 	.word	0x0000c999
    d800:	0000d619 	.word	0x0000d619
    d804:	000165fc 	.word	0x000165fc
    d808:	00016638 	.word	0x00016638

0000d80c <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    d80c:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    d80e:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    d810:	2200      	movs	r2, #0
    d812:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    d814:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    d816:	9b00      	ldr	r3, [sp, #0]
    d818:	60c3      	str	r3, [r0, #12]
}
    d81a:	4770      	bx	lr

0000d81c <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    d81c:	b510      	push	{r4, lr}
    d81e:	0004      	movs	r4, r0
	if(writer->written > 0) {
    d820:	6842      	ldr	r2, [r0, #4]
    d822:	2a00      	cmp	r2, #0
    d824:	d100      	bne.n	d828 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    d826:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    d828:	6901      	ldr	r1, [r0, #16]
    d82a:	68c0      	ldr	r0, [r0, #12]
    d82c:	68a3      	ldr	r3, [r4, #8]
    d82e:	4798      	blx	r3
		writer->written = 0;
    d830:	2300      	movs	r3, #0
    d832:	6063      	str	r3, [r4, #4]
}
    d834:	e7f7      	b.n	d826 <stream_writer_send_remain+0xa>
	...

0000d838 <stream_writer_send_8>:
{
    d838:	b570      	push	{r4, r5, r6, lr}
    d83a:	0004      	movs	r4, r0
    d83c:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    d83e:	6803      	ldr	r3, [r0, #0]
    d840:	6842      	ldr	r2, [r0, #4]
    d842:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    d844:	2b00      	cmp	r3, #0
    d846:	dd05      	ble.n	d854 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    d848:	6922      	ldr	r2, [r4, #16]
    d84a:	6863      	ldr	r3, [r4, #4]
    d84c:	1c59      	adds	r1, r3, #1
    d84e:	6061      	str	r1, [r4, #4]
    d850:	54d5      	strb	r5, [r2, r3]
}
    d852:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    d854:	4b01      	ldr	r3, [pc, #4]	; (d85c <stream_writer_send_8+0x24>)
    d856:	4798      	blx	r3
    d858:	e7f6      	b.n	d848 <stream_writer_send_8+0x10>
    d85a:	46c0      	nop			; (mov r8, r8)
    d85c:	0000d81d 	.word	0x0000d81d

0000d860 <stream_writer_send_16BE>:
{
    d860:	b570      	push	{r4, r5, r6, lr}
    d862:	0006      	movs	r6, r0
    d864:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    d866:	1209      	asrs	r1, r1, #8
    d868:	4d02      	ldr	r5, [pc, #8]	; (d874 <stream_writer_send_16BE+0x14>)
    d86a:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    d86c:	b261      	sxtb	r1, r4
    d86e:	0030      	movs	r0, r6
    d870:	47a8      	blx	r5
}
    d872:	bd70      	pop	{r4, r5, r6, pc}
    d874:	0000d839 	.word	0x0000d839

0000d878 <stream_writer_send_buffer>:
{
    d878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d87a:	0006      	movs	r6, r0
    d87c:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    d87e:	2a00      	cmp	r2, #0
    d880:	d008      	beq.n	d894 <stream_writer_send_buffer+0x1c>
    d882:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    d884:	4f04      	ldr	r7, [pc, #16]	; (d898 <stream_writer_send_buffer+0x20>)
    d886:	2100      	movs	r1, #0
    d888:	5661      	ldrsb	r1, [r4, r1]
    d88a:	0030      	movs	r0, r6
    d88c:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    d88e:	3401      	adds	r4, #1
    d890:	42a5      	cmp	r5, r4
    d892:	d1f8      	bne.n	d886 <stream_writer_send_buffer+0xe>
}
    d894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d896:	46c0      	nop			; (mov r8, r8)
    d898:	0000d839 	.word	0x0000d839

0000d89c <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    d89c:	4a02      	ldr	r2, [pc, #8]	; (d8a8 <sw_timer_tcc_callback+0xc>)
    d89e:	6813      	ldr	r3, [r2, #0]
    d8a0:	3301      	adds	r3, #1
    d8a2:	6013      	str	r3, [r2, #0]
}
    d8a4:	4770      	bx	lr
    d8a6:	46c0      	nop			; (mov r8, r8)
    d8a8:	20000240 	.word	0x20000240

0000d8ac <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    d8ac:	2364      	movs	r3, #100	; 0x64
    d8ae:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    d8b0:	2300      	movs	r3, #0
    d8b2:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    d8b4:	7043      	strb	r3, [r0, #1]
}
    d8b6:	4770      	bx	lr

0000d8b8 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    d8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8ba:	46c6      	mov	lr, r8
    d8bc:	b500      	push	{lr}
    d8be:	b0ac      	sub	sp, #176	; 0xb0
    d8c0:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    d8c2:	466e      	mov	r6, sp
    d8c4:	4b1d      	ldr	r3, [pc, #116]	; (d93c <sw_timer_init+0x84>)
    d8c6:	466a      	mov	r2, sp
    d8c8:	cb92      	ldmia	r3!, {r1, r4, r7}
    d8ca:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    d8cc:	886b      	ldrh	r3, [r5, #2]
    d8ce:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    d8d0:	3014      	adds	r0, #20
    d8d2:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    d8d4:	782b      	ldrb	r3, [r5, #0]
    d8d6:	009b      	lsls	r3, r3, #2
    d8d8:	5999      	ldr	r1, [r3, r6]
    d8da:	0017      	movs	r7, r2
    d8dc:	0010      	movs	r0, r2
    d8de:	4b18      	ldr	r3, [pc, #96]	; (d940 <sw_timer_init+0x88>)
    d8e0:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    d8e2:	2000      	movs	r0, #0
    d8e4:	4b17      	ldr	r3, [pc, #92]	; (d944 <sw_timer_init+0x8c>)
    d8e6:	4798      	blx	r3
    d8e8:	4b17      	ldr	r3, [pc, #92]	; (d948 <sw_timer_init+0x90>)
    d8ea:	7a1b      	ldrb	r3, [r3, #8]
    d8ec:	b2db      	uxtb	r3, r3
    d8ee:	40d8      	lsrs	r0, r3
    d8f0:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    d8f2:	8869      	ldrh	r1, [r5, #2]
    d8f4:	20fa      	movs	r0, #250	; 0xfa
    d8f6:	0200      	lsls	r0, r0, #8
    d8f8:	4b14      	ldr	r3, [pc, #80]	; (d94c <sw_timer_init+0x94>)
    d8fa:	4798      	blx	r3
    d8fc:	0001      	movs	r1, r0
    d8fe:	4640      	mov	r0, r8
    d900:	4b13      	ldr	r3, [pc, #76]	; (d950 <sw_timer_init+0x98>)
    d902:	4798      	blx	r3
    d904:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    d906:	2305      	movs	r3, #5
    d908:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    d90a:	782b      	ldrb	r3, [r5, #0]
    d90c:	009b      	lsls	r3, r3, #2
    d90e:	5999      	ldr	r1, [r3, r6]
    d910:	003a      	movs	r2, r7
    d912:	0020      	movs	r0, r4
    d914:	4b0f      	ldr	r3, [pc, #60]	; (d954 <sw_timer_init+0x9c>)
    d916:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    d918:	786a      	ldrb	r2, [r5, #1]
    d91a:	3208      	adds	r2, #8
    d91c:	b2d2      	uxtb	r2, r2
    d91e:	490e      	ldr	r1, [pc, #56]	; (d958 <sw_timer_init+0xa0>)
    d920:	0020      	movs	r0, r4
    d922:	4b0e      	ldr	r3, [pc, #56]	; (d95c <sw_timer_init+0xa4>)
    d924:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    d926:	7869      	ldrb	r1, [r5, #1]
    d928:	3108      	adds	r1, #8
    d92a:	b2c9      	uxtb	r1, r1
    d92c:	0020      	movs	r0, r4
    d92e:	4b0c      	ldr	r3, [pc, #48]	; (d960 <sw_timer_init+0xa8>)
    d930:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    d932:	b02c      	add	sp, #176	; 0xb0
    d934:	bc04      	pop	{r2}
    d936:	4690      	mov	r8, r2
    d938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d93a:	46c0      	nop			; (mov r8, r8)
    d93c:	000167a8 	.word	0x000167a8
    d940:	0000c215 	.word	0x0000c215
    d944:	00010019 	.word	0x00010019
    d948:	40000400 	.word	0x40000400
    d94c:	000123d5 	.word	0x000123d5
    d950:	000122c1 	.word	0x000122c1
    d954:	0000c361 	.word	0x0000c361
    d958:	0000d89d 	.word	0x0000d89d
    d95c:	0000c76d 	.word	0x0000c76d
    d960:	0000c785 	.word	0x0000c785

0000d964 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    d964:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    d966:	2102      	movs	r1, #2
    d968:	6893      	ldr	r3, [r2, #8]
    d96a:	4219      	tst	r1, r3
    d96c:	d1fc      	bne.n	d968 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    d96e:	6813      	ldr	r3, [r2, #0]
    d970:	2102      	movs	r1, #2
    d972:	430b      	orrs	r3, r1
    d974:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    d976:	4770      	bx	lr

0000d978 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    d978:	b570      	push	{r4, r5, r6, lr}
    d97a:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    d97c:	7805      	ldrb	r5, [r0, #0]
    d97e:	07e8      	lsls	r0, r5, #31
    d980:	d502      	bpl.n	d988 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    d982:	2001      	movs	r0, #1
    d984:	4240      	negs	r0, r0
}
    d986:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    d988:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    d98a:	0029      	movs	r1, r5
    d98c:	2002      	movs	r0, #2
    d98e:	4381      	bics	r1, r0
    d990:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    d992:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    d994:	6d61      	ldr	r1, [r4, #84]	; 0x54
    d996:	0018      	movs	r0, r3
    d998:	4b04      	ldr	r3, [pc, #16]	; (d9ac <sw_timer_register_callback+0x34>)
    d99a:	4798      	blx	r3
    d99c:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    d99e:	7823      	ldrb	r3, [r4, #0]
    d9a0:	2201      	movs	r2, #1
    d9a2:	4313      	orrs	r3, r2
    d9a4:	7023      	strb	r3, [r4, #0]
			return index;
    d9a6:	2000      	movs	r0, #0
    d9a8:	e7ed      	b.n	d986 <sw_timer_register_callback+0xe>
    d9aa:	46c0      	nop			; (mov r8, r8)
    d9ac:	000122c1 	.word	0x000122c1

0000d9b0 <sw_timer_unregister_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->used = 0;
    d9b0:	008b      	lsls	r3, r1, #2
    d9b2:	1859      	adds	r1, r3, r1
    d9b4:	0089      	lsls	r1, r1, #2
    d9b6:	5c0b      	ldrb	r3, [r1, r0]
    d9b8:	2201      	movs	r2, #1
    d9ba:	4393      	bics	r3, r2
    d9bc:	540b      	strb	r3, [r1, r0]
}
    d9be:	4770      	bx	lr

0000d9c0 <sw_timer_enable_callback>:

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    d9c0:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    d9c2:	008b      	lsls	r3, r1, #2
    d9c4:	185d      	adds	r5, r3, r1
    d9c6:	00ad      	lsls	r5, r5, #2
    d9c8:	5c29      	ldrb	r1, [r5, r0]
    d9ca:	2602      	movs	r6, #2
    d9cc:	4331      	orrs	r1, r6
    d9ce:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    d9d0:	1944      	adds	r4, r0, r5
    d9d2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    d9d4:	0010      	movs	r0, r2
    d9d6:	4b03      	ldr	r3, [pc, #12]	; (d9e4 <sw_timer_enable_callback+0x24>)
    d9d8:	4798      	blx	r3
    d9da:	4b03      	ldr	r3, [pc, #12]	; (d9e8 <sw_timer_enable_callback+0x28>)
    d9dc:	681b      	ldr	r3, [r3, #0]
    d9de:	18c0      	adds	r0, r0, r3
    d9e0:	6120      	str	r0, [r4, #16]
}
    d9e2:	bd70      	pop	{r4, r5, r6, pc}
    d9e4:	000122c1 	.word	0x000122c1
    d9e8:	20000240 	.word	0x20000240

0000d9ec <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    d9ec:	008b      	lsls	r3, r1, #2
    d9ee:	1859      	adds	r1, r3, r1
    d9f0:	0089      	lsls	r1, r1, #2
    d9f2:	5c0b      	ldrb	r3, [r1, r0]
    d9f4:	2202      	movs	r2, #2
    d9f6:	4393      	bics	r3, r2
    d9f8:	540b      	strb	r3, [r1, r0]
}
    d9fa:	4770      	bx	lr

0000d9fc <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    d9fc:	b570      	push	{r4, r5, r6, lr}
    d9fe:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    da00:	7803      	ldrb	r3, [r0, #0]
    da02:	07db      	lsls	r3, r3, #31
    da04:	d507      	bpl.n	da16 <sw_timer_task+0x1a>
    da06:	7803      	ldrb	r3, [r0, #0]
    da08:	079b      	lsls	r3, r3, #30
    da0a:	d504      	bpl.n	da16 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    da0c:	4b10      	ldr	r3, [pc, #64]	; (da50 <sw_timer_task+0x54>)
    da0e:	681a      	ldr	r2, [r3, #0]
    da10:	6903      	ldr	r3, [r0, #16]
    da12:	1a9b      	subs	r3, r3, r2
    da14:	d400      	bmi.n	da18 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    da16:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    da18:	7803      	ldrb	r3, [r0, #0]
    da1a:	075b      	lsls	r3, r3, #29
    da1c:	d4fb      	bmi.n	da16 <sw_timer_task+0x1a>
				handler->busy = 1;
    da1e:	7803      	ldrb	r3, [r0, #0]
    da20:	2104      	movs	r1, #4
    da22:	430b      	orrs	r3, r1
    da24:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
    da26:	68c3      	ldr	r3, [r0, #12]
    da28:	2b00      	cmp	r3, #0
    da2a:	d00b      	beq.n	da44 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
    da2c:	18d2      	adds	r2, r2, r3
    da2e:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
    da30:	68a2      	ldr	r2, [r4, #8]
    da32:	2100      	movs	r1, #0
    da34:	0020      	movs	r0, r4
    da36:	6865      	ldr	r5, [r4, #4]
    da38:	47a8      	blx	r5
				handler->busy = 0;
    da3a:	7823      	ldrb	r3, [r4, #0]
    da3c:	2204      	movs	r2, #4
    da3e:	4393      	bics	r3, r2
    da40:	7023      	strb	r3, [r4, #0]
}
    da42:	e7e8      	b.n	da16 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    da44:	7802      	ldrb	r2, [r0, #0]
    da46:	2102      	movs	r1, #2
    da48:	438a      	bics	r2, r1
    da4a:	7002      	strb	r2, [r0, #0]
    da4c:	e7f0      	b.n	da30 <sw_timer_task+0x34>
    da4e:	46c0      	nop			; (mov r8, r8)
    da50:	20000240 	.word	0x20000240

0000da54 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    da54:	4b0c      	ldr	r3, [pc, #48]	; (da88 <cpu_irq_enter_critical+0x34>)
    da56:	681b      	ldr	r3, [r3, #0]
    da58:	2b00      	cmp	r3, #0
    da5a:	d106      	bne.n	da6a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    da5c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    da60:	2b00      	cmp	r3, #0
    da62:	d007      	beq.n	da74 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    da64:	2200      	movs	r2, #0
    da66:	4b09      	ldr	r3, [pc, #36]	; (da8c <cpu_irq_enter_critical+0x38>)
    da68:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    da6a:	4a07      	ldr	r2, [pc, #28]	; (da88 <cpu_irq_enter_critical+0x34>)
    da6c:	6813      	ldr	r3, [r2, #0]
    da6e:	3301      	adds	r3, #1
    da70:	6013      	str	r3, [r2, #0]
}
    da72:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    da74:	b672      	cpsid	i
    da76:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    da7a:	2200      	movs	r2, #0
    da7c:	4b04      	ldr	r3, [pc, #16]	; (da90 <cpu_irq_enter_critical+0x3c>)
    da7e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    da80:	3201      	adds	r2, #1
    da82:	4b02      	ldr	r3, [pc, #8]	; (da8c <cpu_irq_enter_critical+0x38>)
    da84:	701a      	strb	r2, [r3, #0]
    da86:	e7f0      	b.n	da6a <cpu_irq_enter_critical+0x16>
    da88:	20000244 	.word	0x20000244
    da8c:	20000248 	.word	0x20000248
    da90:	20000002 	.word	0x20000002

0000da94 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    da94:	4b08      	ldr	r3, [pc, #32]	; (dab8 <cpu_irq_leave_critical+0x24>)
    da96:	681a      	ldr	r2, [r3, #0]
    da98:	3a01      	subs	r2, #1
    da9a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    da9c:	681b      	ldr	r3, [r3, #0]
    da9e:	2b00      	cmp	r3, #0
    daa0:	d109      	bne.n	dab6 <cpu_irq_leave_critical+0x22>
    daa2:	4b06      	ldr	r3, [pc, #24]	; (dabc <cpu_irq_leave_critical+0x28>)
    daa4:	781b      	ldrb	r3, [r3, #0]
    daa6:	2b00      	cmp	r3, #0
    daa8:	d005      	beq.n	dab6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    daaa:	2201      	movs	r2, #1
    daac:	4b04      	ldr	r3, [pc, #16]	; (dac0 <cpu_irq_leave_critical+0x2c>)
    daae:	701a      	strb	r2, [r3, #0]
    dab0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    dab4:	b662      	cpsie	i
	}
}
    dab6:	4770      	bx	lr
    dab8:	20000244 	.word	0x20000244
    dabc:	20000248 	.word	0x20000248
    dac0:	20000002 	.word	0x20000002

0000dac4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    dac4:	e7fe      	b.n	dac4 <Dummy_Handler>
	...

0000dac8 <Reset_Handler>:
{
    dac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    daca:	4a2a      	ldr	r2, [pc, #168]	; (db74 <Reset_Handler+0xac>)
    dacc:	4b2a      	ldr	r3, [pc, #168]	; (db78 <Reset_Handler+0xb0>)
    dace:	429a      	cmp	r2, r3
    dad0:	d011      	beq.n	daf6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    dad2:	001a      	movs	r2, r3
    dad4:	4b29      	ldr	r3, [pc, #164]	; (db7c <Reset_Handler+0xb4>)
    dad6:	429a      	cmp	r2, r3
    dad8:	d20d      	bcs.n	daf6 <Reset_Handler+0x2e>
    dada:	4a29      	ldr	r2, [pc, #164]	; (db80 <Reset_Handler+0xb8>)
    dadc:	3303      	adds	r3, #3
    dade:	1a9b      	subs	r3, r3, r2
    dae0:	089b      	lsrs	r3, r3, #2
    dae2:	3301      	adds	r3, #1
    dae4:	009b      	lsls	r3, r3, #2
    dae6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    dae8:	4823      	ldr	r0, [pc, #140]	; (db78 <Reset_Handler+0xb0>)
    daea:	4922      	ldr	r1, [pc, #136]	; (db74 <Reset_Handler+0xac>)
    daec:	588c      	ldr	r4, [r1, r2]
    daee:	5084      	str	r4, [r0, r2]
    daf0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    daf2:	429a      	cmp	r2, r3
    daf4:	d1fa      	bne.n	daec <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    daf6:	4a23      	ldr	r2, [pc, #140]	; (db84 <Reset_Handler+0xbc>)
    daf8:	4b23      	ldr	r3, [pc, #140]	; (db88 <Reset_Handler+0xc0>)
    dafa:	429a      	cmp	r2, r3
    dafc:	d20a      	bcs.n	db14 <Reset_Handler+0x4c>
    dafe:	43d3      	mvns	r3, r2
    db00:	4921      	ldr	r1, [pc, #132]	; (db88 <Reset_Handler+0xc0>)
    db02:	185b      	adds	r3, r3, r1
    db04:	2103      	movs	r1, #3
    db06:	438b      	bics	r3, r1
    db08:	3304      	adds	r3, #4
    db0a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    db0c:	2100      	movs	r1, #0
    db0e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    db10:	4293      	cmp	r3, r2
    db12:	d1fc      	bne.n	db0e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    db14:	4a1d      	ldr	r2, [pc, #116]	; (db8c <Reset_Handler+0xc4>)
    db16:	21ff      	movs	r1, #255	; 0xff
    db18:	4b1d      	ldr	r3, [pc, #116]	; (db90 <Reset_Handler+0xc8>)
    db1a:	438b      	bics	r3, r1
    db1c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    db1e:	39fd      	subs	r1, #253	; 0xfd
    db20:	2390      	movs	r3, #144	; 0x90
    db22:	005b      	lsls	r3, r3, #1
    db24:	4a1b      	ldr	r2, [pc, #108]	; (db94 <Reset_Handler+0xcc>)
    db26:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    db28:	4a1b      	ldr	r2, [pc, #108]	; (db98 <Reset_Handler+0xd0>)
    db2a:	78d3      	ldrb	r3, [r2, #3]
    db2c:	2503      	movs	r5, #3
    db2e:	43ab      	bics	r3, r5
    db30:	2402      	movs	r4, #2
    db32:	4323      	orrs	r3, r4
    db34:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    db36:	78d3      	ldrb	r3, [r2, #3]
    db38:	270c      	movs	r7, #12
    db3a:	43bb      	bics	r3, r7
    db3c:	2608      	movs	r6, #8
    db3e:	4333      	orrs	r3, r6
    db40:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    db42:	4b16      	ldr	r3, [pc, #88]	; (db9c <Reset_Handler+0xd4>)
    db44:	7b98      	ldrb	r0, [r3, #14]
    db46:	2230      	movs	r2, #48	; 0x30
    db48:	4390      	bics	r0, r2
    db4a:	2220      	movs	r2, #32
    db4c:	4310      	orrs	r0, r2
    db4e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    db50:	7b99      	ldrb	r1, [r3, #14]
    db52:	43b9      	bics	r1, r7
    db54:	4331      	orrs	r1, r6
    db56:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    db58:	7b9a      	ldrb	r2, [r3, #14]
    db5a:	43aa      	bics	r2, r5
    db5c:	4322      	orrs	r2, r4
    db5e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    db60:	4a0f      	ldr	r2, [pc, #60]	; (dba0 <Reset_Handler+0xd8>)
    db62:	6853      	ldr	r3, [r2, #4]
    db64:	2180      	movs	r1, #128	; 0x80
    db66:	430b      	orrs	r3, r1
    db68:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    db6a:	4b0e      	ldr	r3, [pc, #56]	; (dba4 <Reset_Handler+0xdc>)
    db6c:	4798      	blx	r3
        main();
    db6e:	4b0e      	ldr	r3, [pc, #56]	; (dba8 <Reset_Handler+0xe0>)
    db70:	4798      	blx	r3
    db72:	e7fe      	b.n	db72 <Reset_Handler+0xaa>
    db74:	000173a8 	.word	0x000173a8
    db78:	20000000 	.word	0x20000000
    db7c:	200001f0 	.word	0x200001f0
    db80:	20000004 	.word	0x20000004
    db84:	200001f0 	.word	0x200001f0
    db88:	2000100c 	.word	0x2000100c
    db8c:	e000ed00 	.word	0xe000ed00
    db90:	00008000 	.word	0x00008000
    db94:	41007000 	.word	0x41007000
    db98:	41005000 	.word	0x41005000
    db9c:	41004800 	.word	0x41004800
    dba0:	41004000 	.word	0x41004000
    dba4:	00013ed5 	.word	0x00013ed5
    dba8:	00010bb9 	.word	0x00010bb9

0000dbac <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    dbac:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    dbae:	4a06      	ldr	r2, [pc, #24]	; (dbc8 <_sbrk+0x1c>)
    dbb0:	6812      	ldr	r2, [r2, #0]
    dbb2:	2a00      	cmp	r2, #0
    dbb4:	d004      	beq.n	dbc0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    dbb6:	4a04      	ldr	r2, [pc, #16]	; (dbc8 <_sbrk+0x1c>)
    dbb8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    dbba:	18c3      	adds	r3, r0, r3
    dbbc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    dbbe:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    dbc0:	4902      	ldr	r1, [pc, #8]	; (dbcc <_sbrk+0x20>)
    dbc2:	4a01      	ldr	r2, [pc, #4]	; (dbc8 <_sbrk+0x1c>)
    dbc4:	6011      	str	r1, [r2, #0]
    dbc6:	e7f6      	b.n	dbb6 <_sbrk+0xa>
    dbc8:	2000024c 	.word	0x2000024c
    dbcc:	20003010 	.word	0x20003010

0000dbd0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    dbd0:	2001      	movs	r0, #1
    dbd2:	4240      	negs	r0, r0
    dbd4:	4770      	bx	lr

0000dbd6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    dbd6:	2380      	movs	r3, #128	; 0x80
    dbd8:	019b      	lsls	r3, r3, #6
    dbda:	604b      	str	r3, [r1, #4]

	return 0;
}
    dbdc:	2000      	movs	r0, #0
    dbde:	4770      	bx	lr

0000dbe0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    dbe0:	2001      	movs	r0, #1
    dbe2:	4770      	bx	lr

0000dbe4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    dbe4:	2000      	movs	r0, #0
    dbe6:	4770      	bx	lr

0000dbe8 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    dbe8:	4770      	bx	lr
	...

0000dbec <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    dbec:	b530      	push	{r4, r5, lr}
    dbee:	b085      	sub	sp, #20
    dbf0:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    dbf2:	2300      	movs	r3, #0
    dbf4:	9303      	str	r3, [sp, #12]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    dbf6:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    dbf8:	4b2f      	ldr	r3, [pc, #188]	; (dcb8 <at25dfx_chip_check_presence+0xcc>)
    dbfa:	4798      	blx	r3
	if (module->locked) {
    dbfc:	792b      	ldrb	r3, [r5, #4]
    dbfe:	2b00      	cmp	r3, #0
    dc00:	d156      	bne.n	dcb0 <at25dfx_chip_check_presence+0xc4>
		module->locked = true;
    dc02:	3301      	adds	r3, #1
    dc04:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    dc06:	4b2d      	ldr	r3, [pc, #180]	; (dcbc <at25dfx_chip_check_presence+0xd0>)
    dc08:	4798      	blx	r3
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    dc0a:	229f      	movs	r2, #159	; 0x9f
    dc0c:	ab01      	add	r3, sp, #4
    dc0e:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    dc10:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    dc12:	09d1      	lsrs	r1, r2, #7
		return NULL;
    dc14:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    dc16:	2900      	cmp	r1, #0
    dc18:	d104      	bne.n	dc24 <at25dfx_chip_check_presence+0x38>
		return &(ports[port_index]->Group[group_index]);
    dc1a:	0953      	lsrs	r3, r2, #5
    dc1c:	01db      	lsls	r3, r3, #7
    dc1e:	4928      	ldr	r1, [pc, #160]	; (dcc0 <at25dfx_chip_check_presence+0xd4>)
    dc20:	468c      	mov	ip, r1
    dc22:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    dc24:	211f      	movs	r1, #31
    dc26:	4011      	ands	r1, r2
    dc28:	2201      	movs	r2, #1
    dc2a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    dc2c:	615a      	str	r2, [r3, #20]
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    dc2e:	2201      	movs	r2, #1
    dc30:	a901      	add	r1, sp, #4
    dc32:	6820      	ldr	r0, [r4, #0]
    dc34:	4b23      	ldr	r3, [pc, #140]	; (dcc4 <at25dfx_chip_check_presence+0xd8>)
    dc36:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    dc38:	2300      	movs	r3, #0
    dc3a:	2203      	movs	r2, #3
    dc3c:	a903      	add	r1, sp, #12
    dc3e:	6820      	ldr	r0, [r4, #0]
    dc40:	4d21      	ldr	r5, [pc, #132]	; (dcc8 <at25dfx_chip_check_presence+0xdc>)
    dc42:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    dc44:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    dc46:	09d1      	lsrs	r1, r2, #7
		return NULL;
    dc48:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    dc4a:	2900      	cmp	r1, #0
    dc4c:	d104      	bne.n	dc58 <at25dfx_chip_check_presence+0x6c>
		return &(ports[port_index]->Group[group_index]);
    dc4e:	0953      	lsrs	r3, r2, #5
    dc50:	01db      	lsls	r3, r3, #7
    dc52:	491b      	ldr	r1, [pc, #108]	; (dcc0 <at25dfx_chip_check_presence+0xd4>)
    dc54:	468c      	mov	ip, r1
    dc56:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    dc58:	211f      	movs	r1, #31
    dc5a:	4011      	ands	r1, r2
    dc5c:	2201      	movs	r2, #1
    dc5e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    dc60:	619a      	str	r2, [r3, #24]
	module->locked = false;
    dc62:	2300      	movs	r3, #0
    dc64:	6822      	ldr	r2, [r4, #0]
    dc66:	7113      	strb	r3, [r2, #4]
	switch (type) {
    dc68:	7923      	ldrb	r3, [r4, #4]
    dc6a:	2b09      	cmp	r3, #9
    dc6c:	d815      	bhi.n	dc9a <at25dfx_chip_check_presence+0xae>
    dc6e:	009b      	lsls	r3, r3, #2
    dc70:	4a16      	ldr	r2, [pc, #88]	; (dccc <at25dfx_chip_check_presence+0xe0>)
    dc72:	58d3      	ldr	r3, [r2, r3]
    dc74:	469f      	mov	pc, r3
		return 0x00431f;
    dc76:	4b16      	ldr	r3, [pc, #88]	; (dcd0 <at25dfx_chip_check_presence+0xe4>)
    dc78:	e012      	b.n	dca0 <at25dfx_chip_check_presence+0xb4>
		return 0x01441f;
    dc7a:	4b16      	ldr	r3, [pc, #88]	; (dcd4 <at25dfx_chip_check_presence+0xe8>)
    dc7c:	e010      	b.n	dca0 <at25dfx_chip_check_presence+0xb4>
		return 0x02451f;
    dc7e:	4b16      	ldr	r3, [pc, #88]	; (dcd8 <at25dfx_chip_check_presence+0xec>)
    dc80:	e00e      	b.n	dca0 <at25dfx_chip_check_presence+0xb4>
		return 0x01451f;
    dc82:	4b16      	ldr	r3, [pc, #88]	; (dcdc <at25dfx_chip_check_presence+0xf0>)
    dc84:	e00c      	b.n	dca0 <at25dfx_chip_check_presence+0xb4>
		return 0x02461f;
    dc86:	4b16      	ldr	r3, [pc, #88]	; (dce0 <at25dfx_chip_check_presence+0xf4>)
    dc88:	e00a      	b.n	dca0 <at25dfx_chip_check_presence+0xb4>
		return 0x03461f;
    dc8a:	4b16      	ldr	r3, [pc, #88]	; (dce4 <at25dfx_chip_check_presence+0xf8>)
    dc8c:	e008      	b.n	dca0 <at25dfx_chip_check_presence+0xb4>
		return 0x00861f;
    dc8e:	4b16      	ldr	r3, [pc, #88]	; (dce8 <at25dfx_chip_check_presence+0xfc>)
    dc90:	e006      	b.n	dca0 <at25dfx_chip_check_presence+0xb4>
		return 0x01471f;
    dc92:	4b16      	ldr	r3, [pc, #88]	; (dcec <at25dfx_chip_check_presence+0x100>)
    dc94:	e004      	b.n	dca0 <at25dfx_chip_check_presence+0xb4>
		return 0x00481f;
    dc96:	4b16      	ldr	r3, [pc, #88]	; (dcf0 <at25dfx_chip_check_presence+0x104>)
    dc98:	e002      	b.n	dca0 <at25dfx_chip_check_presence+0xb4>
		return 0;
    dc9a:	2300      	movs	r3, #0
    dc9c:	e000      	b.n	dca0 <at25dfx_chip_check_presence+0xb4>
		return 0x00651f;
    dc9e:	4b15      	ldr	r3, [pc, #84]	; (dcf4 <at25dfx_chip_check_presence+0x108>)

	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	if (id == _at25dfx_get_device_id(chip->type)) {
    dca0:	9a03      	ldr	r2, [sp, #12]
    dca2:	429a      	cmp	r2, r3
    dca4:	d002      	beq.n	dcac <at25dfx_chip_check_presence+0xc0>
		return STATUS_OK;
	} else {
		return STATUS_ERR_NOT_FOUND;
    dca6:	2014      	movs	r0, #20
	}
}
    dca8:	b005      	add	sp, #20
    dcaa:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
    dcac:	2000      	movs	r0, #0
    dcae:	e7fb      	b.n	dca8 <at25dfx_chip_check_presence+0xbc>
    dcb0:	4b02      	ldr	r3, [pc, #8]	; (dcbc <at25dfx_chip_check_presence+0xd0>)
    dcb2:	4798      	blx	r3
		return status;
    dcb4:	2005      	movs	r0, #5
    dcb6:	e7f7      	b.n	dca8 <at25dfx_chip_check_presence+0xbc>
    dcb8:	0000da55 	.word	0x0000da55
    dcbc:	0000da95 	.word	0x0000da95
    dcc0:	41004400 	.word	0x41004400
    dcc4:	0000f0e5 	.word	0x0000f0e5
    dcc8:	0000eed5 	.word	0x0000eed5
    dccc:	000167b4 	.word	0x000167b4
    dcd0:	0000431f 	.word	0x0000431f
    dcd4:	0001441f 	.word	0x0001441f
    dcd8:	0002451f 	.word	0x0002451f
    dcdc:	0001451f 	.word	0x0001451f
    dce0:	0002461f 	.word	0x0002461f
    dce4:	0003461f 	.word	0x0003461f
    dce8:	0000861f 	.word	0x0000861f
    dcec:	0001471f 	.word	0x0001471f
    dcf0:	0000481f 	.word	0x0000481f
    dcf4:	0000651f 	.word	0x0000651f

0000dcf8 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    dcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcfa:	46de      	mov	lr, fp
    dcfc:	4657      	mov	r7, sl
    dcfe:	464e      	mov	r6, r9
    dd00:	4645      	mov	r5, r8
    dd02:	b5e0      	push	{r5, r6, r7, lr}
    dd04:	b085      	sub	sp, #20
    dd06:	0005      	movs	r5, r0
    dd08:	000e      	movs	r6, r1
    dd0a:	9201      	str	r2, [sp, #4]
    dd0c:	001f      	movs	r7, r3

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    dd0e:	185a      	adds	r2, r3, r1
	switch (type) {
    dd10:	7903      	ldrb	r3, [r0, #4]
    dd12:	2b09      	cmp	r3, #9
    dd14:	d815      	bhi.n	dd42 <at25dfx_chip_write_buffer+0x4a>
    dd16:	009b      	lsls	r3, r3, #2
    dd18:	49ae      	ldr	r1, [pc, #696]	; (dfd4 <at25dfx_chip_write_buffer+0x2dc>)
    dd1a:	58cb      	ldr	r3, [r1, r3]
    dd1c:	469f      	mov	pc, r3
		return 256 * 1024UL;
    dd1e:	2380      	movs	r3, #128	; 0x80
    dd20:	02db      	lsls	r3, r3, #11
    dd22:	e012      	b.n	dd4a <at25dfx_chip_write_buffer+0x52>
		return 512 * 1024UL;
    dd24:	2380      	movs	r3, #128	; 0x80
    dd26:	031b      	lsls	r3, r3, #12
    dd28:	e00f      	b.n	dd4a <at25dfx_chip_write_buffer+0x52>
		return 1024 * 1024UL;
    dd2a:	2380      	movs	r3, #128	; 0x80
    dd2c:	035b      	lsls	r3, r3, #13
    dd2e:	e00c      	b.n	dd4a <at25dfx_chip_write_buffer+0x52>
		return 2048 * 1024UL;
    dd30:	2380      	movs	r3, #128	; 0x80
    dd32:	039b      	lsls	r3, r3, #14
    dd34:	e009      	b.n	dd4a <at25dfx_chip_write_buffer+0x52>
		return 4096 * 1024UL;
    dd36:	2380      	movs	r3, #128	; 0x80
    dd38:	03db      	lsls	r3, r3, #15
    dd3a:	e006      	b.n	dd4a <at25dfx_chip_write_buffer+0x52>
		return 8192 * 1024UL;
    dd3c:	2380      	movs	r3, #128	; 0x80
    dd3e:	041b      	lsls	r3, r3, #16
    dd40:	e003      	b.n	dd4a <at25dfx_chip_write_buffer+0x52>
		return 0;
    dd42:	2300      	movs	r3, #0
    dd44:	e001      	b.n	dd4a <at25dfx_chip_write_buffer+0x52>
		return 64 * 1024UL;
    dd46:	2380      	movs	r3, #128	; 0x80
    dd48:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
    dd4a:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    dd4c:	429a      	cmp	r2, r3
    dd4e:	d906      	bls.n	dd5e <at25dfx_chip_write_buffer+0x66>
	}

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    dd50:	b005      	add	sp, #20
    dd52:	bc3c      	pop	{r2, r3, r4, r5}
    dd54:	4690      	mov	r8, r2
    dd56:	4699      	mov	r9, r3
    dd58:	46a2      	mov	sl, r4
    dd5a:	46ab      	mov	fp, r5
    dd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    dd5e:	682c      	ldr	r4, [r5, #0]
	cpu_irq_enter_critical();
    dd60:	4b9d      	ldr	r3, [pc, #628]	; (dfd8 <at25dfx_chip_write_buffer+0x2e0>)
    dd62:	4798      	blx	r3
	if (module->locked) {
    dd64:	7923      	ldrb	r3, [r4, #4]
    dd66:	2b00      	cmp	r3, #0
    dd68:	d000      	beq.n	dd6c <at25dfx_chip_write_buffer+0x74>
    dd6a:	e12e      	b.n	dfca <at25dfx_chip_write_buffer+0x2d2>
		module->locked = true;
    dd6c:	3301      	adds	r3, #1
    dd6e:	7123      	strb	r3, [r4, #4]
	cpu_irq_leave_critical();
    dd70:	4b9a      	ldr	r3, [pc, #616]	; (dfdc <at25dfx_chip_write_buffer+0x2e4>)
    dd72:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    dd74:	2306      	movs	r3, #6
    dd76:	aa02      	add	r2, sp, #8
    dd78:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    dd7a:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    dd7c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    dd7e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    dd80:	2900      	cmp	r1, #0
    dd82:	d104      	bne.n	dd8e <at25dfx_chip_write_buffer+0x96>
		return &(ports[port_index]->Group[group_index]);
    dd84:	0953      	lsrs	r3, r2, #5
    dd86:	01db      	lsls	r3, r3, #7
    dd88:	4995      	ldr	r1, [pc, #596]	; (dfe0 <at25dfx_chip_write_buffer+0x2e8>)
    dd8a:	468c      	mov	ip, r1
    dd8c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    dd8e:	211f      	movs	r1, #31
    dd90:	4011      	ands	r1, r2
    dd92:	2201      	movs	r2, #1
    dd94:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    dd96:	615a      	str	r2, [r3, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    dd98:	2201      	movs	r2, #1
    dd9a:	a902      	add	r1, sp, #8
    dd9c:	6828      	ldr	r0, [r5, #0]
    dd9e:	4b91      	ldr	r3, [pc, #580]	; (dfe4 <at25dfx_chip_write_buffer+0x2ec>)
    dda0:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    dda2:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    dda4:	09d1      	lsrs	r1, r2, #7
		return NULL;
    dda6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    dda8:	2900      	cmp	r1, #0
    ddaa:	d104      	bne.n	ddb6 <at25dfx_chip_write_buffer+0xbe>
		return &(ports[port_index]->Group[group_index]);
    ddac:	0953      	lsrs	r3, r2, #5
    ddae:	01db      	lsls	r3, r3, #7
    ddb0:	498b      	ldr	r1, [pc, #556]	; (dfe0 <at25dfx_chip_write_buffer+0x2e8>)
    ddb2:	468c      	mov	ip, r1
    ddb4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ddb6:	211f      	movs	r1, #31
    ddb8:	4011      	ands	r1, r2
    ddba:	2201      	movs	r2, #1
    ddbc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    ddbe:	619a      	str	r2, [r3, #24]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    ddc0:	22ff      	movs	r2, #255	; 0xff
    ddc2:	4032      	ands	r2, r6
    ddc4:	2380      	movs	r3, #128	; 0x80
    ddc6:	005b      	lsls	r3, r3, #1
    ddc8:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
    ddca:	1c1a      	adds	r2, r3, #0
    ddcc:	b29b      	uxth	r3, r3
    ddce:	42bb      	cmp	r3, r7
    ddd0:	d900      	bls.n	ddd4 <at25dfx_chip_write_buffer+0xdc>
    ddd2:	1c3a      	adds	r2, r7, #0
    ddd4:	b293      	uxth	r3, r2
    ddd6:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
    ddd8:	2302      	movs	r3, #2
    ddda:	aa02      	add	r2, sp, #8
    dddc:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    ddde:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    dde0:	0a33      	lsrs	r3, r6, #8
    dde2:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    dde4:	0c33      	lsrs	r3, r6, #16
    dde6:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    dde8:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    ddea:	09d1      	lsrs	r1, r2, #7
		return NULL;
    ddec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    ddee:	2900      	cmp	r1, #0
    ddf0:	d104      	bne.n	ddfc <at25dfx_chip_write_buffer+0x104>
		return &(ports[port_index]->Group[group_index]);
    ddf2:	0953      	lsrs	r3, r2, #5
    ddf4:	01db      	lsls	r3, r3, #7
    ddf6:	497a      	ldr	r1, [pc, #488]	; (dfe0 <at25dfx_chip_write_buffer+0x2e8>)
    ddf8:	468c      	mov	ip, r1
    ddfa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ddfc:	211f      	movs	r1, #31
    ddfe:	4011      	ands	r1, r2
    de00:	2201      	movs	r2, #1
    de02:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    de04:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    de06:	2204      	movs	r2, #4
    de08:	a902      	add	r1, sp, #8
    de0a:	6828      	ldr	r0, [r5, #0]
    de0c:	4b75      	ldr	r3, [pc, #468]	; (dfe4 <at25dfx_chip_write_buffer+0x2ec>)
    de0e:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
    de10:	4653      	mov	r3, sl
    de12:	2b00      	cmp	r3, #0
    de14:	d145      	bne.n	dea2 <at25dfx_chip_write_buffer+0x1aa>
	port_pin_set_output_level(chip->cs_pin, true);
    de16:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    de18:	09d1      	lsrs	r1, r2, #7
		return NULL;
    de1a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    de1c:	2900      	cmp	r1, #0
    de1e:	d104      	bne.n	de2a <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
    de20:	0953      	lsrs	r3, r2, #5
    de22:	01db      	lsls	r3, r3, #7
    de24:	496e      	ldr	r1, [pc, #440]	; (dfe0 <at25dfx_chip_write_buffer+0x2e8>)
    de26:	468c      	mov	ip, r1
    de28:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    de2a:	211f      	movs	r1, #31
    de2c:	4011      	ands	r1, r2
    de2e:	2201      	movs	r2, #1
    de30:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    de32:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    de34:	682b      	ldr	r3, [r5, #0]
    de36:	6819      	ldr	r1, [r3, #0]
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    de38:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    de3a:	7e0b      	ldrb	r3, [r1, #24]
    de3c:	4213      	tst	r3, r2
    de3e:	d0fc      	beq.n	de3a <at25dfx_chip_write_buffer+0x142>
	port_pin_set_output_level(chip->cs_pin, false);
    de40:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    de42:	09d1      	lsrs	r1, r2, #7
		return NULL;
    de44:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    de46:	2900      	cmp	r1, #0
    de48:	d104      	bne.n	de54 <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
    de4a:	0953      	lsrs	r3, r2, #5
    de4c:	01db      	lsls	r3, r3, #7
    de4e:	4964      	ldr	r1, [pc, #400]	; (dfe0 <at25dfx_chip_write_buffer+0x2e8>)
    de50:	468c      	mov	ip, r1
    de52:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    de54:	211f      	movs	r1, #31
    de56:	4011      	ands	r1, r2
    de58:	2201      	movs	r2, #1
    de5a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    de5c:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    de5e:	682b      	ldr	r3, [r5, #0]
    de60:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    de62:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    de64:	07d2      	lsls	r2, r2, #31
    de66:	d501      	bpl.n	de6c <at25dfx_chip_write_buffer+0x174>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    de68:	2205      	movs	r2, #5
    de6a:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    de6c:	6828      	ldr	r0, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    de6e:	6802      	ldr	r2, [r0, #0]
    de70:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    de72:	7e13      	ldrb	r3, [r2, #24]
    de74:	420b      	tst	r3, r1
    de76:	d0fc      	beq.n	de72 <at25dfx_chip_write_buffer+0x17a>
    de78:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    de7a:	2400      	movs	r4, #0
	if (!spi_is_ready_to_read(module)) {
    de7c:	075b      	lsls	r3, r3, #29
    de7e:	d509      	bpl.n	de94 <at25dfx_chip_write_buffer+0x19c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    de80:	8b53      	ldrh	r3, [r2, #26]
    de82:	075b      	lsls	r3, r3, #29
    de84:	d501      	bpl.n	de8a <at25dfx_chip_write_buffer+0x192>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    de86:	2304      	movs	r3, #4
    de88:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    de8a:	7983      	ldrb	r3, [r0, #6]
    de8c:	2b01      	cmp	r3, #1
    de8e:	d00e      	beq.n	deae <at25dfx_chip_write_buffer+0x1b6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    de90:	6a94      	ldr	r4, [r2, #40]	; 0x28
    de92:	b2e4      	uxtb	r4, r4

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    de94:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    de96:	2300      	movs	r3, #0
    de98:	4698      	mov	r8, r3
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    de9a:	2004      	movs	r0, #4
    de9c:	46b4      	mov	ip, r6
    de9e:	002e      	movs	r6, r5
    dea0:	e010      	b.n	dec4 <at25dfx_chip_write_buffer+0x1cc>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    dea2:	4652      	mov	r2, sl
    dea4:	9901      	ldr	r1, [sp, #4]
    dea6:	6828      	ldr	r0, [r5, #0]
    dea8:	4b4e      	ldr	r3, [pc, #312]	; (dfe4 <at25dfx_chip_write_buffer+0x2ec>)
    deaa:	4798      	blx	r3
    deac:	e7b3      	b.n	de16 <at25dfx_chip_write_buffer+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    deae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    deb0:	05db      	lsls	r3, r3, #23
    deb2:	0ddc      	lsrs	r4, r3, #23
    deb4:	e7ee      	b.n	de94 <at25dfx_chip_write_buffer+0x19c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    deb6:	79ab      	ldrb	r3, [r5, #6]
    deb8:	2b01      	cmp	r3, #1
    deba:	d01a      	beq.n	def2 <at25dfx_chip_write_buffer+0x1fa>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    debc:	6a94      	ldr	r4, [r2, #40]	; 0x28
    debe:	b2e4      	uxtb	r4, r4
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    dec0:	4221      	tst	r1, r4
    dec2:	d01a      	beq.n	defa <at25dfx_chip_write_buffer+0x202>
	SercomSpi *const spi_module = &(module->hw->SPI);
    dec4:	6833      	ldr	r3, [r6, #0]
    dec6:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    dec8:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    deca:	420b      	tst	r3, r1
    decc:	d0fc      	beq.n	dec8 <at25dfx_chip_write_buffer+0x1d0>
    dece:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    ded0:	420b      	tst	r3, r1
    ded2:	d001      	beq.n	ded8 <at25dfx_chip_write_buffer+0x1e0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ded4:	4643      	mov	r3, r8
    ded6:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    ded8:	6835      	ldr	r5, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    deda:	682a      	ldr	r2, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    dedc:	7e13      	ldrb	r3, [r2, #24]
    dede:	4203      	tst	r3, r0
    dee0:	d0fc      	beq.n	dedc <at25dfx_chip_write_buffer+0x1e4>
    dee2:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    dee4:	4203      	tst	r3, r0
    dee6:	d0eb      	beq.n	dec0 <at25dfx_chip_write_buffer+0x1c8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dee8:	8b53      	ldrh	r3, [r2, #26]
    deea:	4203      	tst	r3, r0
    deec:	d0e3      	beq.n	deb6 <at25dfx_chip_write_buffer+0x1be>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    deee:	8350      	strh	r0, [r2, #26]
    def0:	e7e1      	b.n	deb6 <at25dfx_chip_write_buffer+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    def2:	6a94      	ldr	r4, [r2, #40]	; 0x28
    def4:	05e4      	lsls	r4, r4, #23
    def6:	0de4      	lsrs	r4, r4, #23
    def8:	e7e2      	b.n	dec0 <at25dfx_chip_write_buffer+0x1c8>
    defa:	0035      	movs	r5, r6
    defc:	4666      	mov	r6, ip
	port_pin_set_output_level(chip->cs_pin, true);
    defe:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    df00:	09d1      	lsrs	r1, r2, #7
		return NULL;
    df02:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    df04:	2900      	cmp	r1, #0
    df06:	d104      	bne.n	df12 <at25dfx_chip_write_buffer+0x21a>
		return &(ports[port_index]->Group[group_index]);
    df08:	0953      	lsrs	r3, r2, #5
    df0a:	01db      	lsls	r3, r3, #7
    df0c:	4934      	ldr	r1, [pc, #208]	; (dfe0 <at25dfx_chip_write_buffer+0x2e8>)
    df0e:	468c      	mov	ip, r1
    df10:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    df12:	211f      	movs	r1, #31
    df14:	4011      	ands	r1, r2
    df16:	2201      	movs	r2, #1
    df18:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    df1a:	619a      	str	r2, [r3, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
    df1c:	2010      	movs	r0, #16
	if (status_reg & AT25DFX_STATUS_ERROR) {
    df1e:	06a3      	lsls	r3, r4, #26
    df20:	d44f      	bmi.n	dfc2 <at25dfx_chip_write_buffer+0x2ca>
	length -= cmd.length;
    df22:	4653      	mov	r3, sl
    df24:	1aff      	subs	r7, r7, r3
    df26:	b2bb      	uxth	r3, r7
    df28:	0019      	movs	r1, r3
	while (length && (status == STATUS_OK)) {
    df2a:	9a01      	ldr	r2, [sp, #4]
    df2c:	4691      	mov	r9, r2
	}
	return STATUS_OK;
    df2e:	2000      	movs	r0, #0
    df30:	2b00      	cmp	r3, #0
    df32:	d046      	beq.n	dfc2 <at25dfx_chip_write_buffer+0x2ca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    df34:	231f      	movs	r3, #31
    df36:	469b      	mov	fp, r3
    df38:	2401      	movs	r4, #1
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    df3a:	4b2a      	ldr	r3, [pc, #168]	; (dfe4 <at25dfx_chip_write_buffer+0x2ec>)
    df3c:	4698      	mov	r8, r3
    df3e:	4653      	mov	r3, sl
    df40:	9301      	str	r3, [sp, #4]
    df42:	468a      	mov	sl, r1
    df44:	e058      	b.n	dff8 <at25dfx_chip_write_buffer+0x300>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    df46:	001a      	movs	r2, r3
    df48:	4649      	mov	r1, r9
    df4a:	6828      	ldr	r0, [r5, #0]
    df4c:	4b25      	ldr	r3, [pc, #148]	; (dfe4 <at25dfx_chip_write_buffer+0x2ec>)
    df4e:	4798      	blx	r3
    df50:	e0a4      	b.n	e09c <at25dfx_chip_write_buffer+0x3a4>
    df52:	6a90      	ldr	r0, [r2, #40]	; 0x28
    df54:	05c0      	lsls	r0, r0, #23
    df56:	0dc0      	lsrs	r0, r0, #23
    df58:	e0e1      	b.n	e11e <at25dfx_chip_write_buffer+0x426>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    df5a:	79bb      	ldrb	r3, [r7, #6]
    df5c:	2b01      	cmp	r3, #1
    df5e:	d01a      	beq.n	df96 <at25dfx_chip_write_buffer+0x29e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    df60:	6a90      	ldr	r0, [r2, #40]	; 0x28
    df62:	b2c0      	uxtb	r0, r0
	} while (status_reg & AT25DFX_STATUS_BUSY);
    df64:	4204      	tst	r4, r0
    df66:	d01a      	beq.n	df9e <at25dfx_chip_write_buffer+0x2a6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    df68:	682b      	ldr	r3, [r5, #0]
    df6a:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    df6c:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    df6e:	4223      	tst	r3, r4
    df70:	d0fc      	beq.n	df6c <at25dfx_chip_write_buffer+0x274>
    df72:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    df74:	4223      	tst	r3, r4
    df76:	d001      	beq.n	df7c <at25dfx_chip_write_buffer+0x284>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    df78:	2300      	movs	r3, #0
    df7a:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    df7c:	682f      	ldr	r7, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    df7e:	683a      	ldr	r2, [r7, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    df80:	7e13      	ldrb	r3, [r2, #24]
    df82:	420b      	tst	r3, r1
    df84:	d0fc      	beq.n	df80 <at25dfx_chip_write_buffer+0x288>
    df86:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    df88:	420b      	tst	r3, r1
    df8a:	d0eb      	beq.n	df64 <at25dfx_chip_write_buffer+0x26c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    df8c:	8b53      	ldrh	r3, [r2, #26]
    df8e:	420b      	tst	r3, r1
    df90:	d0e3      	beq.n	df5a <at25dfx_chip_write_buffer+0x262>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    df92:	8351      	strh	r1, [r2, #26]
    df94:	e7e1      	b.n	df5a <at25dfx_chip_write_buffer+0x262>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    df96:	6a90      	ldr	r0, [r2, #40]	; 0x28
    df98:	05c0      	lsls	r0, r0, #23
    df9a:	0dc0      	lsrs	r0, r0, #23
    df9c:	e7e2      	b.n	df64 <at25dfx_chip_write_buffer+0x26c>
	port_pin_set_output_level(chip->cs_pin, true);
    df9e:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    dfa0:	09d9      	lsrs	r1, r3, #7
		return NULL;
    dfa2:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    dfa4:	2900      	cmp	r1, #0
    dfa6:	d104      	bne.n	dfb2 <at25dfx_chip_write_buffer+0x2ba>
		return &(ports[port_index]->Group[group_index]);
    dfa8:	095a      	lsrs	r2, r3, #5
    dfaa:	01d2      	lsls	r2, r2, #7
    dfac:	490c      	ldr	r1, [pc, #48]	; (dfe0 <at25dfx_chip_write_buffer+0x2e8>)
    dfae:	468c      	mov	ip, r1
    dfb0:	4462      	add	r2, ip
    dfb2:	4659      	mov	r1, fp
    dfb4:	400b      	ands	r3, r1
    dfb6:	0021      	movs	r1, r4
    dfb8:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    dfba:	6191      	str	r1, [r2, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    dfbc:	0683      	lsls	r3, r0, #26
    dfbe:	d513      	bpl.n	dfe8 <at25dfx_chip_write_buffer+0x2f0>
		return STATUS_ERR_IO;
    dfc0:	2010      	movs	r0, #16
	_at25dfx_spi_unlock(chip->spi);
    dfc2:	682b      	ldr	r3, [r5, #0]
	module->locked = false;
    dfc4:	2200      	movs	r2, #0
    dfc6:	711a      	strb	r2, [r3, #4]
	return status;
    dfc8:	e6c2      	b.n	dd50 <at25dfx_chip_write_buffer+0x58>
    dfca:	4b04      	ldr	r3, [pc, #16]	; (dfdc <at25dfx_chip_write_buffer+0x2e4>)
    dfcc:	4798      	blx	r3
		return status;
    dfce:	2005      	movs	r0, #5
    dfd0:	e6be      	b.n	dd50 <at25dfx_chip_write_buffer+0x58>
    dfd2:	46c0      	nop			; (mov r8, r8)
    dfd4:	000167e0 	.word	0x000167e0
    dfd8:	0000da55 	.word	0x0000da55
    dfdc:	0000da95 	.word	0x0000da95
    dfe0:	41004400 	.word	0x41004400
    dfe4:	0000f0e5 	.word	0x0000f0e5
		length -= cmd.length;
    dfe8:	4653      	mov	r3, sl
    dfea:	9a01      	ldr	r2, [sp, #4]
    dfec:	1a9b      	subs	r3, r3, r2
    dfee:	b29b      	uxth	r3, r3
    dff0:	469a      	mov	sl, r3
	while (length && (status == STATUS_OK)) {
    dff2:	2b00      	cmp	r3, #0
    dff4:	d100      	bne.n	dff8 <at25dfx_chip_write_buffer+0x300>
    dff6:	e094      	b.n	e122 <at25dfx_chip_write_buffer+0x42a>
	cmd_buffer[0] = cmd.opcode;
    dff8:	ab02      	add	r3, sp, #8
    dffa:	2206      	movs	r2, #6
    dffc:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    dffe:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    e000:	09d9      	lsrs	r1, r3, #7
		return NULL;
    e002:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    e004:	2900      	cmp	r1, #0
    e006:	d104      	bne.n	e012 <at25dfx_chip_write_buffer+0x31a>
		return &(ports[port_index]->Group[group_index]);
    e008:	095a      	lsrs	r2, r3, #5
    e00a:	01d2      	lsls	r2, r2, #7
    e00c:	4946      	ldr	r1, [pc, #280]	; (e128 <at25dfx_chip_write_buffer+0x430>)
    e00e:	468c      	mov	ip, r1
    e010:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e012:	4659      	mov	r1, fp
    e014:	400b      	ands	r3, r1
    e016:	0021      	movs	r1, r4
    e018:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    e01a:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    e01c:	0022      	movs	r2, r4
    e01e:	a902      	add	r1, sp, #8
    e020:	6828      	ldr	r0, [r5, #0]
    e022:	47c0      	blx	r8
	port_pin_set_output_level(chip->cs_pin, true);
    e024:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    e026:	09d9      	lsrs	r1, r3, #7
		return NULL;
    e028:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    e02a:	2900      	cmp	r1, #0
    e02c:	d104      	bne.n	e038 <at25dfx_chip_write_buffer+0x340>
		return &(ports[port_index]->Group[group_index]);
    e02e:	095a      	lsrs	r2, r3, #5
    e030:	01d2      	lsls	r2, r2, #7
    e032:	493d      	ldr	r1, [pc, #244]	; (e128 <at25dfx_chip_write_buffer+0x430>)
    e034:	468c      	mov	ip, r1
    e036:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e038:	4659      	mov	r1, fp
    e03a:	400b      	ands	r3, r1
    e03c:	0021      	movs	r1, r4
    e03e:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    e040:	6191      	str	r1, [r2, #24]
		cmd.address += cmd.length;
    e042:	9a01      	ldr	r2, [sp, #4]
    e044:	4694      	mov	ip, r2
    e046:	4466      	add	r6, ip
		cmd.data.tx += cmd.length;
    e048:	44e1      	add	r9, ip
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    e04a:	4657      	mov	r7, sl
    e04c:	2380      	movs	r3, #128	; 0x80
    e04e:	005b      	lsls	r3, r3, #1
    e050:	459a      	cmp	sl, r3
    e052:	d901      	bls.n	e058 <at25dfx_chip_write_buffer+0x360>
    e054:	4b35      	ldr	r3, [pc, #212]	; (e12c <at25dfx_chip_write_buffer+0x434>)
    e056:	881f      	ldrh	r7, [r3, #0]
    e058:	b2bb      	uxth	r3, r7
    e05a:	9301      	str	r3, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
    e05c:	2302      	movs	r3, #2
    e05e:	aa02      	add	r2, sp, #8
    e060:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    e062:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    e064:	0a33      	lsrs	r3, r6, #8
    e066:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    e068:	0c33      	lsrs	r3, r6, #16
    e06a:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    e06c:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    e06e:	09d9      	lsrs	r1, r3, #7
		return NULL;
    e070:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    e072:	2900      	cmp	r1, #0
    e074:	d104      	bne.n	e080 <at25dfx_chip_write_buffer+0x388>
		return &(ports[port_index]->Group[group_index]);
    e076:	095a      	lsrs	r2, r3, #5
    e078:	01d2      	lsls	r2, r2, #7
    e07a:	492b      	ldr	r1, [pc, #172]	; (e128 <at25dfx_chip_write_buffer+0x430>)
    e07c:	468c      	mov	ip, r1
    e07e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e080:	4659      	mov	r1, fp
    e082:	400b      	ands	r3, r1
    e084:	0021      	movs	r1, r4
    e086:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    e088:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    e08a:	2204      	movs	r2, #4
    e08c:	a902      	add	r1, sp, #8
    e08e:	6828      	ldr	r0, [r5, #0]
    e090:	4b27      	ldr	r3, [pc, #156]	; (e130 <at25dfx_chip_write_buffer+0x438>)
    e092:	4798      	blx	r3
	if (cmd.length) {
    e094:	9b01      	ldr	r3, [sp, #4]
    e096:	2b00      	cmp	r3, #0
    e098:	d000      	beq.n	e09c <at25dfx_chip_write_buffer+0x3a4>
    e09a:	e754      	b.n	df46 <at25dfx_chip_write_buffer+0x24e>
	port_pin_set_output_level(chip->cs_pin, true);
    e09c:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    e09e:	09d9      	lsrs	r1, r3, #7
		return NULL;
    e0a0:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    e0a2:	2900      	cmp	r1, #0
    e0a4:	d104      	bne.n	e0b0 <at25dfx_chip_write_buffer+0x3b8>
		return &(ports[port_index]->Group[group_index]);
    e0a6:	095a      	lsrs	r2, r3, #5
    e0a8:	01d2      	lsls	r2, r2, #7
    e0aa:	491f      	ldr	r1, [pc, #124]	; (e128 <at25dfx_chip_write_buffer+0x430>)
    e0ac:	468c      	mov	ip, r1
    e0ae:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e0b0:	4659      	mov	r1, fp
    e0b2:	400b      	ands	r3, r1
    e0b4:	0021      	movs	r1, r4
    e0b6:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    e0b8:	6191      	str	r1, [r2, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    e0ba:	682b      	ldr	r3, [r5, #0]
    e0bc:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e0be:	7e13      	ldrb	r3, [r2, #24]
	while (!spi_is_ready_to_write(chip->spi)) {
    e0c0:	4223      	tst	r3, r4
    e0c2:	d0fc      	beq.n	e0be <at25dfx_chip_write_buffer+0x3c6>
	port_pin_set_output_level(chip->cs_pin, false);
    e0c4:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    e0c6:	09d9      	lsrs	r1, r3, #7
		return NULL;
    e0c8:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    e0ca:	2900      	cmp	r1, #0
    e0cc:	d104      	bne.n	e0d8 <at25dfx_chip_write_buffer+0x3e0>
		return &(ports[port_index]->Group[group_index]);
    e0ce:	095a      	lsrs	r2, r3, #5
    e0d0:	01d2      	lsls	r2, r2, #7
    e0d2:	4915      	ldr	r1, [pc, #84]	; (e128 <at25dfx_chip_write_buffer+0x430>)
    e0d4:	468c      	mov	ip, r1
    e0d6:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e0d8:	4659      	mov	r1, fp
    e0da:	400b      	ands	r3, r1
    e0dc:	0021      	movs	r1, r4
    e0de:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    e0e0:	6151      	str	r1, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    e0e2:	682b      	ldr	r3, [r5, #0]
    e0e4:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e0e6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e0e8:	4222      	tst	r2, r4
    e0ea:	d001      	beq.n	e0f0 <at25dfx_chip_write_buffer+0x3f8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e0ec:	2205      	movs	r2, #5
    e0ee:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    e0f0:	682b      	ldr	r3, [r5, #0]
    e0f2:	469c      	mov	ip, r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    e0f4:	681a      	ldr	r2, [r3, #0]
    e0f6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e0f8:	7e13      	ldrb	r3, [r2, #24]
    e0fa:	420b      	tst	r3, r1
    e0fc:	d0fc      	beq.n	e0f8 <at25dfx_chip_write_buffer+0x400>
    e0fe:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    e100:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    e102:	075b      	lsls	r3, r3, #29
    e104:	d50b      	bpl.n	e11e <at25dfx_chip_write_buffer+0x426>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e106:	8b53      	ldrh	r3, [r2, #26]
    e108:	075b      	lsls	r3, r3, #29
    e10a:	d501      	bpl.n	e110 <at25dfx_chip_write_buffer+0x418>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e10c:	2304      	movs	r3, #4
    e10e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e110:	4663      	mov	r3, ip
    e112:	799b      	ldrb	r3, [r3, #6]
    e114:	2b01      	cmp	r3, #1
    e116:	d100      	bne.n	e11a <at25dfx_chip_write_buffer+0x422>
    e118:	e71b      	b.n	df52 <at25dfx_chip_write_buffer+0x25a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e11a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    e11c:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_read(chip->spi)) {
    e11e:	2104      	movs	r1, #4
    e120:	e722      	b.n	df68 <at25dfx_chip_write_buffer+0x270>
	return STATUS_OK;
    e122:	2000      	movs	r0, #0
    e124:	e74d      	b.n	dfc2 <at25dfx_chip_write_buffer+0x2ca>
    e126:	46c0      	nop			; (mov r8, r8)
    e128:	41004400 	.word	0x41004400
    e12c:	000167dc 	.word	0x000167dc
    e130:	0000f0e5 	.word	0x0000f0e5

0000e134 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    e134:	b5f0      	push	{r4, r5, r6, r7, lr}
    e136:	b083      	sub	sp, #12
    e138:	0004      	movs	r4, r0
    e13a:	000e      	movs	r6, r1
    e13c:	0015      	movs	r5, r2
	switch (type) {
    e13e:	7903      	ldrb	r3, [r0, #4]
    e140:	2b09      	cmp	r3, #9
    e142:	d900      	bls.n	e146 <at25dfx_chip_erase_block+0x12>
    e144:	e0f2      	b.n	e32c <at25dfx_chip_erase_block+0x1f8>
    e146:	009b      	lsls	r3, r3, #2
    e148:	4a7b      	ldr	r2, [pc, #492]	; (e338 <at25dfx_chip_erase_block+0x204>)
    e14a:	58d3      	ldr	r3, [r2, r3]
    e14c:	469f      	mov	pc, r3
		return 256 * 1024UL;
    e14e:	2380      	movs	r3, #128	; 0x80
    e150:	02db      	lsls	r3, r3, #11
    e152:	e010      	b.n	e176 <at25dfx_chip_erase_block+0x42>
		return 512 * 1024UL;
    e154:	2380      	movs	r3, #128	; 0x80
    e156:	031b      	lsls	r3, r3, #12
    e158:	e00d      	b.n	e176 <at25dfx_chip_erase_block+0x42>
		return 1024 * 1024UL;
    e15a:	2380      	movs	r3, #128	; 0x80
    e15c:	035b      	lsls	r3, r3, #13
    e15e:	e00a      	b.n	e176 <at25dfx_chip_erase_block+0x42>
		return 2048 * 1024UL;
    e160:	2380      	movs	r3, #128	; 0x80
    e162:	039b      	lsls	r3, r3, #14
    e164:	e007      	b.n	e176 <at25dfx_chip_erase_block+0x42>
		return 4096 * 1024UL;
    e166:	2380      	movs	r3, #128	; 0x80
    e168:	03db      	lsls	r3, r3, #15
    e16a:	e004      	b.n	e176 <at25dfx_chip_erase_block+0x42>
		return 8192 * 1024UL;
    e16c:	2380      	movs	r3, #128	; 0x80
    e16e:	041b      	lsls	r3, r3, #16
    e170:	e001      	b.n	e176 <at25dfx_chip_erase_block+0x42>
		return 64 * 1024UL;
    e172:	2380      	movs	r3, #128	; 0x80
    e174:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
    e176:	2017      	movs	r0, #23
	if (address >= _at25dfx_get_device_size(chip->type)) {
    e178:	42b3      	cmp	r3, r6
    e17a:	d801      	bhi.n	e180 <at25dfx_chip_erase_block+0x4c>
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    e17c:	b003      	add	sp, #12
    e17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    e180:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
    e182:	4b6e      	ldr	r3, [pc, #440]	; (e33c <at25dfx_chip_erase_block+0x208>)
    e184:	4798      	blx	r3
	if (module->locked) {
    e186:	793b      	ldrb	r3, [r7, #4]
    e188:	2b00      	cmp	r3, #0
    e18a:	d000      	beq.n	e18e <at25dfx_chip_erase_block+0x5a>
    e18c:	e0d0      	b.n	e330 <at25dfx_chip_erase_block+0x1fc>
		module->locked = true;
    e18e:	3301      	adds	r3, #1
    e190:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
    e192:	4b6b      	ldr	r3, [pc, #428]	; (e340 <at25dfx_chip_erase_block+0x20c>)
    e194:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    e196:	2306      	movs	r3, #6
    e198:	466a      	mov	r2, sp
    e19a:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    e19c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    e19e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e1a0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e1a2:	2900      	cmp	r1, #0
    e1a4:	d104      	bne.n	e1b0 <at25dfx_chip_erase_block+0x7c>
		return &(ports[port_index]->Group[group_index]);
    e1a6:	0953      	lsrs	r3, r2, #5
    e1a8:	01db      	lsls	r3, r3, #7
    e1aa:	4966      	ldr	r1, [pc, #408]	; (e344 <at25dfx_chip_erase_block+0x210>)
    e1ac:	468c      	mov	ip, r1
    e1ae:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e1b0:	211f      	movs	r1, #31
    e1b2:	4011      	ands	r1, r2
    e1b4:	2201      	movs	r2, #1
    e1b6:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    e1b8:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    e1ba:	2201      	movs	r2, #1
    e1bc:	4669      	mov	r1, sp
    e1be:	6820      	ldr	r0, [r4, #0]
    e1c0:	4b61      	ldr	r3, [pc, #388]	; (e348 <at25dfx_chip_erase_block+0x214>)
    e1c2:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    e1c4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    e1c6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e1c8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e1ca:	2900      	cmp	r1, #0
    e1cc:	d104      	bne.n	e1d8 <at25dfx_chip_erase_block+0xa4>
		return &(ports[port_index]->Group[group_index]);
    e1ce:	0953      	lsrs	r3, r2, #5
    e1d0:	01db      	lsls	r3, r3, #7
    e1d2:	495c      	ldr	r1, [pc, #368]	; (e344 <at25dfx_chip_erase_block+0x210>)
    e1d4:	468c      	mov	ip, r1
    e1d6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e1d8:	211f      	movs	r1, #31
    e1da:	4011      	ands	r1, r2
    e1dc:	2201      	movs	r2, #1
    e1de:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    e1e0:	619a      	str	r2, [r3, #24]
	switch (block_size) {
    e1e2:	2d01      	cmp	r5, #1
    e1e4:	d006      	beq.n	e1f4 <at25dfx_chip_erase_block+0xc0>
    e1e6:	2d00      	cmp	r5, #0
    e1e8:	d063      	beq.n	e2b2 <at25dfx_chip_erase_block+0x17e>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    e1ea:	23d8      	movs	r3, #216	; 0xd8
	switch (block_size) {
    e1ec:	2d02      	cmp	r5, #2
    e1ee:	d002      	beq.n	e1f6 <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = (enum at25dfx_command_opcode)0;
    e1f0:	2300      	movs	r3, #0
    e1f2:	e000      	b.n	e1f6 <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    e1f4:	2352      	movs	r3, #82	; 0x52
	cmd_buffer[0] = cmd.opcode;
    e1f6:	466a      	mov	r2, sp
    e1f8:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    e1fa:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    e1fc:	0a33      	lsrs	r3, r6, #8
    e1fe:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    e200:	0c36      	lsrs	r6, r6, #16
    e202:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    e204:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    e206:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e208:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e20a:	2900      	cmp	r1, #0
    e20c:	d104      	bne.n	e218 <at25dfx_chip_erase_block+0xe4>
		return &(ports[port_index]->Group[group_index]);
    e20e:	0953      	lsrs	r3, r2, #5
    e210:	01db      	lsls	r3, r3, #7
    e212:	494c      	ldr	r1, [pc, #304]	; (e344 <at25dfx_chip_erase_block+0x210>)
    e214:	468c      	mov	ip, r1
    e216:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e218:	211f      	movs	r1, #31
    e21a:	4011      	ands	r1, r2
    e21c:	2201      	movs	r2, #1
    e21e:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    e220:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    e222:	2204      	movs	r2, #4
    e224:	4669      	mov	r1, sp
    e226:	6820      	ldr	r0, [r4, #0]
    e228:	4b47      	ldr	r3, [pc, #284]	; (e348 <at25dfx_chip_erase_block+0x214>)
    e22a:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    e22c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    e22e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e230:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e232:	2900      	cmp	r1, #0
    e234:	d104      	bne.n	e240 <at25dfx_chip_erase_block+0x10c>
		return &(ports[port_index]->Group[group_index]);
    e236:	0953      	lsrs	r3, r2, #5
    e238:	01db      	lsls	r3, r3, #7
    e23a:	4942      	ldr	r1, [pc, #264]	; (e344 <at25dfx_chip_erase_block+0x210>)
    e23c:	468c      	mov	ip, r1
    e23e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e240:	211f      	movs	r1, #31
    e242:	4011      	ands	r1, r2
    e244:	2201      	movs	r2, #1
    e246:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    e248:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    e24a:	6823      	ldr	r3, [r4, #0]
    e24c:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
    e24e:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e250:	7e0b      	ldrb	r3, [r1, #24]
    e252:	4213      	tst	r3, r2
    e254:	d0fc      	beq.n	e250 <at25dfx_chip_erase_block+0x11c>
	port_pin_set_output_level(chip->cs_pin, false);
    e256:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    e258:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e25a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e25c:	2900      	cmp	r1, #0
    e25e:	d104      	bne.n	e26a <at25dfx_chip_erase_block+0x136>
		return &(ports[port_index]->Group[group_index]);
    e260:	0953      	lsrs	r3, r2, #5
    e262:	01db      	lsls	r3, r3, #7
    e264:	4937      	ldr	r1, [pc, #220]	; (e344 <at25dfx_chip_erase_block+0x210>)
    e266:	468c      	mov	ip, r1
    e268:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e26a:	211f      	movs	r1, #31
    e26c:	4011      	ands	r1, r2
    e26e:	2201      	movs	r2, #1
    e270:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    e272:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    e274:	6823      	ldr	r3, [r4, #0]
    e276:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e278:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e27a:	07d2      	lsls	r2, r2, #31
    e27c:	d501      	bpl.n	e282 <at25dfx_chip_erase_block+0x14e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e27e:	2205      	movs	r2, #5
    e280:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    e282:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    e284:	6802      	ldr	r2, [r0, #0]
    e286:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e288:	7e13      	ldrb	r3, [r2, #24]
    e28a:	420b      	tst	r3, r1
    e28c:	d0fc      	beq.n	e288 <at25dfx_chip_erase_block+0x154>
    e28e:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    e290:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    e292:	075b      	lsls	r3, r3, #29
    e294:	d509      	bpl.n	e2aa <at25dfx_chip_erase_block+0x176>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e296:	8b53      	ldrh	r3, [r2, #26]
    e298:	075b      	lsls	r3, r3, #29
    e29a:	d501      	bpl.n	e2a0 <at25dfx_chip_erase_block+0x16c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e29c:	2304      	movs	r3, #4
    e29e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e2a0:	7983      	ldrb	r3, [r0, #6]
    e2a2:	2b01      	cmp	r3, #1
    e2a4:	d007      	beq.n	e2b6 <at25dfx_chip_erase_block+0x182>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e2a6:	6a95      	ldr	r5, [r2, #40]	; 0x28
    e2a8:	b2ed      	uxtb	r5, r5
		while (!spi_is_ready_to_write(chip->spi)) {
    e2aa:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e2ac:	2700      	movs	r7, #0
		while (!spi_is_ready_to_read(chip->spi)) {
    e2ae:	2004      	movs	r0, #4
    e2b0:	e00c      	b.n	e2cc <at25dfx_chip_erase_block+0x198>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    e2b2:	2320      	movs	r3, #32
    e2b4:	e79f      	b.n	e1f6 <at25dfx_chip_erase_block+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e2b6:	6a95      	ldr	r5, [r2, #40]	; 0x28
    e2b8:	05ed      	lsls	r5, r5, #23
    e2ba:	0ded      	lsrs	r5, r5, #23
    e2bc:	e7f5      	b.n	e2aa <at25dfx_chip_erase_block+0x176>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e2be:	79b3      	ldrb	r3, [r6, #6]
    e2c0:	2b01      	cmp	r3, #1
    e2c2:	d019      	beq.n	e2f8 <at25dfx_chip_erase_block+0x1c4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e2c4:	6a95      	ldr	r5, [r2, #40]	; 0x28
    e2c6:	b2ed      	uxtb	r5, r5
	} while (status_reg & AT25DFX_STATUS_BUSY);
    e2c8:	4229      	tst	r1, r5
    e2ca:	d019      	beq.n	e300 <at25dfx_chip_erase_block+0x1cc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e2cc:	6823      	ldr	r3, [r4, #0]
    e2ce:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e2d0:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    e2d2:	420b      	tst	r3, r1
    e2d4:	d0fc      	beq.n	e2d0 <at25dfx_chip_erase_block+0x19c>
    e2d6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    e2d8:	420b      	tst	r3, r1
    e2da:	d000      	beq.n	e2de <at25dfx_chip_erase_block+0x1aa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e2dc:	6297      	str	r7, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    e2de:	6826      	ldr	r6, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    e2e0:	6832      	ldr	r2, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e2e2:	7e13      	ldrb	r3, [r2, #24]
    e2e4:	4203      	tst	r3, r0
    e2e6:	d0fc      	beq.n	e2e2 <at25dfx_chip_erase_block+0x1ae>
    e2e8:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    e2ea:	4203      	tst	r3, r0
    e2ec:	d0ec      	beq.n	e2c8 <at25dfx_chip_erase_block+0x194>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e2ee:	8b53      	ldrh	r3, [r2, #26]
    e2f0:	4203      	tst	r3, r0
    e2f2:	d0e4      	beq.n	e2be <at25dfx_chip_erase_block+0x18a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e2f4:	8350      	strh	r0, [r2, #26]
    e2f6:	e7e2      	b.n	e2be <at25dfx_chip_erase_block+0x18a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e2f8:	6a95      	ldr	r5, [r2, #40]	; 0x28
    e2fa:	05ed      	lsls	r5, r5, #23
    e2fc:	0ded      	lsrs	r5, r5, #23
    e2fe:	e7e3      	b.n	e2c8 <at25dfx_chip_erase_block+0x194>
	port_pin_set_output_level(chip->cs_pin, true);
    e300:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    e302:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e304:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e306:	2900      	cmp	r1, #0
    e308:	d104      	bne.n	e314 <at25dfx_chip_erase_block+0x1e0>
		return &(ports[port_index]->Group[group_index]);
    e30a:	0953      	lsrs	r3, r2, #5
    e30c:	01db      	lsls	r3, r3, #7
    e30e:	490d      	ldr	r1, [pc, #52]	; (e344 <at25dfx_chip_erase_block+0x210>)
    e310:	468c      	mov	ip, r1
    e312:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e314:	211f      	movs	r1, #31
    e316:	4011      	ands	r1, r2
    e318:	2201      	movs	r2, #1
    e31a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    e31c:	619a      	str	r2, [r3, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    e31e:	06a8      	lsls	r0, r5, #26
	return STATUS_OK;
    e320:	0fc0      	lsrs	r0, r0, #31
    e322:	0100      	lsls	r0, r0, #4
	_at25dfx_spi_unlock(chip->spi);
    e324:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    e326:	2200      	movs	r2, #0
    e328:	711a      	strb	r2, [r3, #4]
	return status;
    e32a:	e727      	b.n	e17c <at25dfx_chip_erase_block+0x48>
		return STATUS_ERR_INVALID_ARG;
    e32c:	2017      	movs	r0, #23
    e32e:	e725      	b.n	e17c <at25dfx_chip_erase_block+0x48>
    e330:	4b03      	ldr	r3, [pc, #12]	; (e340 <at25dfx_chip_erase_block+0x20c>)
    e332:	4798      	blx	r3
		return status;
    e334:	2005      	movs	r0, #5
    e336:	e721      	b.n	e17c <at25dfx_chip_erase_block+0x48>
    e338:	00016808 	.word	0x00016808
    e33c:	0000da55 	.word	0x0000da55
    e340:	0000da95 	.word	0x0000da95
    e344:	41004400 	.word	0x41004400
    e348:	0000f0e5 	.word	0x0000f0e5

0000e34c <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
    e34c:	b570      	push	{r4, r5, r6, lr}
    e34e:	b082      	sub	sp, #8
    e350:	0004      	movs	r4, r0
    e352:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    e354:	6806      	ldr	r6, [r0, #0]
	cpu_irq_enter_critical();
    e356:	4b35      	ldr	r3, [pc, #212]	; (e42c <at25dfx_chip_set_global_sector_protect+0xe0>)
    e358:	4798      	blx	r3
	if (module->locked) {
    e35a:	7933      	ldrb	r3, [r6, #4]
    e35c:	2b00      	cmp	r3, #0
    e35e:	d160      	bne.n	e422 <at25dfx_chip_set_global_sector_protect+0xd6>
		module->locked = true;
    e360:	3301      	adds	r3, #1
    e362:	7133      	strb	r3, [r6, #4]
	cpu_irq_leave_critical();
    e364:	4b32      	ldr	r3, [pc, #200]	; (e430 <at25dfx_chip_set_global_sector_protect+0xe4>)
    e366:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    e368:	2306      	movs	r3, #6
    e36a:	466a      	mov	r2, sp
    e36c:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    e36e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    e370:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e372:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e374:	2900      	cmp	r1, #0
    e376:	d104      	bne.n	e382 <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
    e378:	0953      	lsrs	r3, r2, #5
    e37a:	01db      	lsls	r3, r3, #7
    e37c:	492d      	ldr	r1, [pc, #180]	; (e434 <at25dfx_chip_set_global_sector_protect+0xe8>)
    e37e:	468c      	mov	ip, r1
    e380:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e382:	211f      	movs	r1, #31
    e384:	4011      	ands	r1, r2
    e386:	2201      	movs	r2, #1
    e388:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    e38a:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    e38c:	2201      	movs	r2, #1
    e38e:	4669      	mov	r1, sp
    e390:	6820      	ldr	r0, [r4, #0]
    e392:	4b29      	ldr	r3, [pc, #164]	; (e438 <at25dfx_chip_set_global_sector_protect+0xec>)
    e394:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    e396:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    e398:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e39a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e39c:	2900      	cmp	r1, #0
    e39e:	d104      	bne.n	e3aa <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
    e3a0:	0953      	lsrs	r3, r2, #5
    e3a2:	01db      	lsls	r3, r3, #7
    e3a4:	4923      	ldr	r1, [pc, #140]	; (e434 <at25dfx_chip_set_global_sector_protect+0xe8>)
    e3a6:	468c      	mov	ip, r1
    e3a8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e3aa:	211f      	movs	r1, #31
    e3ac:	4011      	ands	r1, r2
    e3ae:	2201      	movs	r2, #1
    e3b0:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    e3b2:	619a      	str	r2, [r3, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
    e3b4:	233c      	movs	r3, #60	; 0x3c
    e3b6:	1e6a      	subs	r2, r5, #1
    e3b8:	4195      	sbcs	r5, r2
    e3ba:	426d      	negs	r5, r5
    e3bc:	402b      	ands	r3, r5
    e3be:	466a      	mov	r2, sp
    e3c0:	71d3      	strb	r3, [r2, #7]
	cmd_buffer[0] = cmd.opcode;
    e3c2:	2301      	movs	r3, #1
    e3c4:	466a      	mov	r2, sp
    e3c6:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    e3c8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    e3ca:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e3cc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e3ce:	2900      	cmp	r1, #0
    e3d0:	d104      	bne.n	e3dc <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
    e3d2:	0953      	lsrs	r3, r2, #5
    e3d4:	01db      	lsls	r3, r3, #7
    e3d6:	4917      	ldr	r1, [pc, #92]	; (e434 <at25dfx_chip_set_global_sector_protect+0xe8>)
    e3d8:	468c      	mov	ip, r1
    e3da:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e3dc:	211f      	movs	r1, #31
    e3de:	4011      	ands	r1, r2
    e3e0:	2201      	movs	r2, #1
    e3e2:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    e3e4:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    e3e6:	2201      	movs	r2, #1
    e3e8:	4669      	mov	r1, sp
    e3ea:	6820      	ldr	r0, [r4, #0]
    e3ec:	4d12      	ldr	r5, [pc, #72]	; (e438 <at25dfx_chip_set_global_sector_protect+0xec>)
    e3ee:	47a8      	blx	r5
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    e3f0:	2201      	movs	r2, #1
    e3f2:	466b      	mov	r3, sp
    e3f4:	1dd9      	adds	r1, r3, #7
    e3f6:	6820      	ldr	r0, [r4, #0]
    e3f8:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    e3fa:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    e3fc:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e3fe:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e400:	2900      	cmp	r1, #0
    e402:	d104      	bne.n	e40e <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
    e404:	0953      	lsrs	r3, r2, #5
    e406:	01db      	lsls	r3, r3, #7
    e408:	490a      	ldr	r1, [pc, #40]	; (e434 <at25dfx_chip_set_global_sector_protect+0xe8>)
    e40a:	468c      	mov	ip, r1
    e40c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e40e:	211f      	movs	r1, #31
    e410:	4011      	ands	r1, r2
    e412:	2201      	movs	r2, #1
    e414:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    e416:	619a      	str	r2, [r3, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    e418:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    e41a:	2200      	movs	r2, #0
    e41c:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    e41e:	2000      	movs	r0, #0
    e420:	e002      	b.n	e428 <at25dfx_chip_set_global_sector_protect+0xdc>
    e422:	4b03      	ldr	r3, [pc, #12]	; (e430 <at25dfx_chip_set_global_sector_protect+0xe4>)
    e424:	4798      	blx	r3
		return status;
    e426:	2005      	movs	r0, #5
}
    e428:	b002      	add	sp, #8
    e42a:	bd70      	pop	{r4, r5, r6, pc}
    e42c:	0000da55 	.word	0x0000da55
    e430:	0000da95 	.word	0x0000da95
    e434:	41004400 	.word	0x41004400
    e438:	0000f0e5 	.word	0x0000f0e5

0000e43c <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    e43c:	b530      	push	{r4, r5, lr}
    e43e:	b083      	sub	sp, #12
    e440:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    e442:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    e444:	4b1c      	ldr	r3, [pc, #112]	; (e4b8 <at25dfx_chip_sleep+0x7c>)
    e446:	4798      	blx	r3
	if (module->locked) {
    e448:	792b      	ldrb	r3, [r5, #4]
    e44a:	2b00      	cmp	r3, #0
    e44c:	d12e      	bne.n	e4ac <at25dfx_chip_sleep+0x70>
		module->locked = true;
    e44e:	3301      	adds	r3, #1
    e450:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    e452:	4b1a      	ldr	r3, [pc, #104]	; (e4bc <at25dfx_chip_sleep+0x80>)
    e454:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    e456:	23b9      	movs	r3, #185	; 0xb9
    e458:	466a      	mov	r2, sp
    e45a:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    e45c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    e45e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e460:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e462:	2900      	cmp	r1, #0
    e464:	d104      	bne.n	e470 <at25dfx_chip_sleep+0x34>
		return &(ports[port_index]->Group[group_index]);
    e466:	0953      	lsrs	r3, r2, #5
    e468:	01db      	lsls	r3, r3, #7
    e46a:	4915      	ldr	r1, [pc, #84]	; (e4c0 <at25dfx_chip_sleep+0x84>)
    e46c:	468c      	mov	ip, r1
    e46e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e470:	211f      	movs	r1, #31
    e472:	4011      	ands	r1, r2
    e474:	2201      	movs	r2, #1
    e476:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    e478:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    e47a:	2201      	movs	r2, #1
    e47c:	4669      	mov	r1, sp
    e47e:	6820      	ldr	r0, [r4, #0]
    e480:	4b10      	ldr	r3, [pc, #64]	; (e4c4 <at25dfx_chip_sleep+0x88>)
    e482:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    e484:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    e486:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e488:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e48a:	2900      	cmp	r1, #0
    e48c:	d104      	bne.n	e498 <at25dfx_chip_sleep+0x5c>
		return &(ports[port_index]->Group[group_index]);
    e48e:	0953      	lsrs	r3, r2, #5
    e490:	01db      	lsls	r3, r3, #7
    e492:	490b      	ldr	r1, [pc, #44]	; (e4c0 <at25dfx_chip_sleep+0x84>)
    e494:	468c      	mov	ip, r1
    e496:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e498:	211f      	movs	r1, #31
    e49a:	4011      	ands	r1, r2
    e49c:	2201      	movs	r2, #1
    e49e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    e4a0:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    e4a2:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    e4a4:	2200      	movs	r2, #0
    e4a6:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    e4a8:	2000      	movs	r0, #0
    e4aa:	e002      	b.n	e4b2 <at25dfx_chip_sleep+0x76>
    e4ac:	4b03      	ldr	r3, [pc, #12]	; (e4bc <at25dfx_chip_sleep+0x80>)
    e4ae:	4798      	blx	r3
		return status;
    e4b0:	2005      	movs	r0, #5
}
    e4b2:	b003      	add	sp, #12
    e4b4:	bd30      	pop	{r4, r5, pc}
    e4b6:	46c0      	nop			; (mov r8, r8)
    e4b8:	0000da55 	.word	0x0000da55
    e4bc:	0000da95 	.word	0x0000da95
    e4c0:	41004400 	.word	0x41004400
    e4c4:	0000f0e5 	.word	0x0000f0e5

0000e4c8 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    e4c8:	b530      	push	{r4, r5, lr}
    e4ca:	b083      	sub	sp, #12
    e4cc:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    e4ce:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    e4d0:	4b1c      	ldr	r3, [pc, #112]	; (e544 <at25dfx_chip_wake+0x7c>)
    e4d2:	4798      	blx	r3
	if (module->locked) {
    e4d4:	792b      	ldrb	r3, [r5, #4]
    e4d6:	2b00      	cmp	r3, #0
    e4d8:	d12e      	bne.n	e538 <at25dfx_chip_wake+0x70>
		module->locked = true;
    e4da:	3301      	adds	r3, #1
    e4dc:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    e4de:	4b1a      	ldr	r3, [pc, #104]	; (e548 <at25dfx_chip_wake+0x80>)
    e4e0:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    e4e2:	23ab      	movs	r3, #171	; 0xab
    e4e4:	466a      	mov	r2, sp
    e4e6:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    e4e8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    e4ea:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e4ec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e4ee:	2900      	cmp	r1, #0
    e4f0:	d104      	bne.n	e4fc <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
    e4f2:	0953      	lsrs	r3, r2, #5
    e4f4:	01db      	lsls	r3, r3, #7
    e4f6:	4915      	ldr	r1, [pc, #84]	; (e54c <at25dfx_chip_wake+0x84>)
    e4f8:	468c      	mov	ip, r1
    e4fa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e4fc:	211f      	movs	r1, #31
    e4fe:	4011      	ands	r1, r2
    e500:	2201      	movs	r2, #1
    e502:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    e504:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    e506:	2201      	movs	r2, #1
    e508:	4669      	mov	r1, sp
    e50a:	6820      	ldr	r0, [r4, #0]
    e50c:	4b10      	ldr	r3, [pc, #64]	; (e550 <at25dfx_chip_wake+0x88>)
    e50e:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    e510:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    e512:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e514:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e516:	2900      	cmp	r1, #0
    e518:	d104      	bne.n	e524 <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
    e51a:	0953      	lsrs	r3, r2, #5
    e51c:	01db      	lsls	r3, r3, #7
    e51e:	490b      	ldr	r1, [pc, #44]	; (e54c <at25dfx_chip_wake+0x84>)
    e520:	468c      	mov	ip, r1
    e522:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e524:	211f      	movs	r1, #31
    e526:	4011      	ands	r1, r2
    e528:	2201      	movs	r2, #1
    e52a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    e52c:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    e52e:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    e530:	2200      	movs	r2, #0
    e532:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    e534:	2000      	movs	r0, #0
    e536:	e002      	b.n	e53e <at25dfx_chip_wake+0x76>
    e538:	4b03      	ldr	r3, [pc, #12]	; (e548 <at25dfx_chip_wake+0x80>)
    e53a:	4798      	blx	r3
		return status;
    e53c:	2005      	movs	r0, #5
    e53e:	b003      	add	sp, #12
    e540:	bd30      	pop	{r4, r5, pc}
    e542:	46c0      	nop			; (mov r8, r8)
    e544:	0000da55 	.word	0x0000da55
    e548:	0000da95 	.word	0x0000da95
    e54c:	41004400 	.word	0x41004400
    e550:	0000f0e5 	.word	0x0000f0e5

0000e554 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    e554:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    e556:	2000      	movs	r0, #0
    e558:	4b08      	ldr	r3, [pc, #32]	; (e57c <delay_init+0x28>)
    e55a:	4798      	blx	r3
    e55c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    e55e:	4c08      	ldr	r4, [pc, #32]	; (e580 <delay_init+0x2c>)
    e560:	21fa      	movs	r1, #250	; 0xfa
    e562:	0089      	lsls	r1, r1, #2
    e564:	47a0      	blx	r4
    e566:	4b07      	ldr	r3, [pc, #28]	; (e584 <delay_init+0x30>)
    e568:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    e56a:	4907      	ldr	r1, [pc, #28]	; (e588 <delay_init+0x34>)
    e56c:	0028      	movs	r0, r5
    e56e:	47a0      	blx	r4
    e570:	4b06      	ldr	r3, [pc, #24]	; (e58c <delay_init+0x38>)
    e572:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    e574:	2205      	movs	r2, #5
    e576:	4b06      	ldr	r3, [pc, #24]	; (e590 <delay_init+0x3c>)
    e578:	601a      	str	r2, [r3, #0]
}
    e57a:	bd70      	pop	{r4, r5, r6, pc}
    e57c:	00010019 	.word	0x00010019
    e580:	000122c1 	.word	0x000122c1
    e584:	20000004 	.word	0x20000004
    e588:	000f4240 	.word	0x000f4240
    e58c:	20000008 	.word	0x20000008
    e590:	e000e010 	.word	0xe000e010

0000e594 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    e594:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    e596:	4b08      	ldr	r3, [pc, #32]	; (e5b8 <delay_cycles_ms+0x24>)
    e598:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    e59a:	4a08      	ldr	r2, [pc, #32]	; (e5bc <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    e59c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    e59e:	2180      	movs	r1, #128	; 0x80
    e5a0:	0249      	lsls	r1, r1, #9
	while (n--) {
    e5a2:	3801      	subs	r0, #1
    e5a4:	d307      	bcc.n	e5b6 <delay_cycles_ms+0x22>
	if (n > 0) {
    e5a6:	2c00      	cmp	r4, #0
    e5a8:	d0fb      	beq.n	e5a2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    e5aa:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    e5ac:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    e5ae:	6813      	ldr	r3, [r2, #0]
    e5b0:	420b      	tst	r3, r1
    e5b2:	d0fc      	beq.n	e5ae <delay_cycles_ms+0x1a>
    e5b4:	e7f5      	b.n	e5a2 <delay_cycles_ms+0xe>
	}
}
    e5b6:	bd30      	pop	{r4, r5, pc}
    e5b8:	20000004 	.word	0x20000004
    e5bc:	e000e010 	.word	0xe000e010

0000e5c0 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    e5c0:	b510      	push	{r4, lr}
			PM->APBBMASK.reg |= mask;
    e5c2:	4a1e      	ldr	r2, [pc, #120]	; (e63c <nvm_set_config+0x7c>)
    e5c4:	69d3      	ldr	r3, [r2, #28]
    e5c6:	2104      	movs	r1, #4
    e5c8:	430b      	orrs	r3, r1
    e5ca:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    e5cc:	4b1c      	ldr	r3, [pc, #112]	; (e640 <nvm_set_config+0x80>)
    e5ce:	2220      	movs	r2, #32
    e5d0:	32ff      	adds	r2, #255	; 0xff
    e5d2:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    e5d4:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    e5d6:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    e5d8:	07d2      	lsls	r2, r2, #31
    e5da:	d401      	bmi.n	e5e0 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    e5dc:	0018      	movs	r0, r3
    e5de:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    e5e0:	7803      	ldrb	r3, [r0, #0]
    e5e2:	021b      	lsls	r3, r3, #8
    e5e4:	22c0      	movs	r2, #192	; 0xc0
    e5e6:	0092      	lsls	r2, r2, #2
    e5e8:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    e5ea:	7841      	ldrb	r1, [r0, #1]
    e5ec:	01c9      	lsls	r1, r1, #7
    e5ee:	22ff      	movs	r2, #255	; 0xff
    e5f0:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    e5f2:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    e5f4:	7881      	ldrb	r1, [r0, #2]
    e5f6:	0049      	lsls	r1, r1, #1
    e5f8:	221e      	movs	r2, #30
    e5fa:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    e5fc:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    e5fe:	78c2      	ldrb	r2, [r0, #3]
    e600:	0492      	lsls	r2, r2, #18
    e602:	2180      	movs	r1, #128	; 0x80
    e604:	02c9      	lsls	r1, r1, #11
    e606:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    e608:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    e60a:	7902      	ldrb	r2, [r0, #4]
    e60c:	0412      	lsls	r2, r2, #16
    e60e:	21c0      	movs	r1, #192	; 0xc0
    e610:	0289      	lsls	r1, r1, #10
    e612:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    e614:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    e616:	4a0a      	ldr	r2, [pc, #40]	; (e640 <nvm_set_config+0x80>)
    e618:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    e61a:	6893      	ldr	r3, [r2, #8]
    e61c:	035b      	lsls	r3, r3, #13
    e61e:	0f5b      	lsrs	r3, r3, #29
    e620:	4908      	ldr	r1, [pc, #32]	; (e644 <nvm_set_config+0x84>)
    e622:	2408      	movs	r4, #8
    e624:	409c      	lsls	r4, r3
    e626:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    e628:	6893      	ldr	r3, [r2, #8]
    e62a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    e62c:	7843      	ldrb	r3, [r0, #1]
    e62e:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    e630:	8b13      	ldrh	r3, [r2, #24]
    e632:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    e634:	0fdb      	lsrs	r3, r3, #31
    e636:	011b      	lsls	r3, r3, #4
    e638:	e7d0      	b.n	e5dc <nvm_set_config+0x1c>
    e63a:	46c0      	nop			; (mov r8, r8)
    e63c:	40000400 	.word	0x40000400
    e640:	41004000 	.word	0x41004000
    e644:	20000250 	.word	0x20000250

0000e648 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    e648:	b530      	push	{r4, r5, lr}
    e64a:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    e64c:	4a22      	ldr	r2, [pc, #136]	; (e6d8 <nvm_execute_command+0x90>)
    e64e:	8810      	ldrh	r0, [r2, #0]
    e650:	8853      	ldrh	r3, [r2, #2]
    e652:	4343      	muls	r3, r0
    e654:	428b      	cmp	r3, r1
    e656:	d206      	bcs.n	e666 <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    e658:	2280      	movs	r2, #128	; 0x80
    e65a:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    e65c:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    e65e:	4b1f      	ldr	r3, [pc, #124]	; (e6dc <nvm_execute_command+0x94>)
    e660:	18cb      	adds	r3, r1, r3
    e662:	4293      	cmp	r3, r2
    e664:	d80e      	bhi.n	e684 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    e666:	4b1e      	ldr	r3, [pc, #120]	; (e6e0 <nvm_execute_command+0x98>)
    e668:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    e66a:	2280      	movs	r2, #128	; 0x80
    e66c:	02d2      	lsls	r2, r2, #11
    e66e:	432a      	orrs	r2, r5
    e670:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    e672:	2220      	movs	r2, #32
    e674:	32ff      	adds	r2, #255	; 0xff
    e676:	831a      	strh	r2, [r3, #24]
    e678:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    e67a:	07db      	lsls	r3, r3, #31
    e67c:	d403      	bmi.n	e686 <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    e67e:	4b18      	ldr	r3, [pc, #96]	; (e6e0 <nvm_execute_command+0x98>)
    e680:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    e682:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    e684:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    e686:	2c45      	cmp	r4, #69	; 0x45
    e688:	d822      	bhi.n	e6d0 <nvm_execute_command+0x88>
    e68a:	00a3      	lsls	r3, r4, #2
    e68c:	4a15      	ldr	r2, [pc, #84]	; (e6e4 <nvm_execute_command+0x9c>)
    e68e:	58d3      	ldr	r3, [r2, r3]
    e690:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    e692:	4b13      	ldr	r3, [pc, #76]	; (e6e0 <nvm_execute_command+0x98>)
    e694:	8b1b      	ldrh	r3, [r3, #24]
    e696:	05db      	lsls	r3, r3, #23
    e698:	d503      	bpl.n	e6a2 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    e69a:	4b11      	ldr	r3, [pc, #68]	; (e6e0 <nvm_execute_command+0x98>)
    e69c:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    e69e:	2010      	movs	r0, #16
    e6a0:	e7f0      	b.n	e684 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    e6a2:	0889      	lsrs	r1, r1, #2
    e6a4:	0049      	lsls	r1, r1, #1
    e6a6:	4b0e      	ldr	r3, [pc, #56]	; (e6e0 <nvm_execute_command+0x98>)
    e6a8:	61d9      	str	r1, [r3, #28]
			break;
    e6aa:	e003      	b.n	e6b4 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    e6ac:	0889      	lsrs	r1, r1, #2
    e6ae:	0049      	lsls	r1, r1, #1
    e6b0:	4b0b      	ldr	r3, [pc, #44]	; (e6e0 <nvm_execute_command+0x98>)
    e6b2:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    e6b4:	20a5      	movs	r0, #165	; 0xa5
    e6b6:	0200      	lsls	r0, r0, #8
    e6b8:	4304      	orrs	r4, r0
    e6ba:	4b09      	ldr	r3, [pc, #36]	; (e6e0 <nvm_execute_command+0x98>)
    e6bc:	801c      	strh	r4, [r3, #0]
    e6be:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    e6c0:	2201      	movs	r2, #1
    e6c2:	7d0b      	ldrb	r3, [r1, #20]
    e6c4:	4213      	tst	r3, r2
    e6c6:	d0fc      	beq.n	e6c2 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    e6c8:	4b05      	ldr	r3, [pc, #20]	; (e6e0 <nvm_execute_command+0x98>)
    e6ca:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    e6cc:	2000      	movs	r0, #0
    e6ce:	e7d9      	b.n	e684 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    e6d0:	4b03      	ldr	r3, [pc, #12]	; (e6e0 <nvm_execute_command+0x98>)
    e6d2:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    e6d4:	2017      	movs	r0, #23
    e6d6:	e7d5      	b.n	e684 <nvm_execute_command+0x3c>
    e6d8:	20000250 	.word	0x20000250
    e6dc:	ff7fc000 	.word	0xff7fc000
    e6e0:	41004000 	.word	0x41004000
    e6e4:	00016830 	.word	0x00016830

0000e6e8 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    e6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    e6ea:	4b25      	ldr	r3, [pc, #148]	; (e780 <nvm_write_buffer+0x98>)
    e6ec:	881d      	ldrh	r5, [r3, #0]
    e6ee:	885b      	ldrh	r3, [r3, #2]
    e6f0:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    e6f2:	2418      	movs	r4, #24
	if (destination_address >
    e6f4:	4283      	cmp	r3, r0
    e6f6:	d201      	bcs.n	e6fc <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    e6f8:	0020      	movs	r0, r4
    e6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    e6fc:	1e6b      	subs	r3, r5, #1
    e6fe:	4218      	tst	r0, r3
    e700:	d1fa      	bne.n	e6f8 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    e702:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    e704:	4295      	cmp	r5, r2
    e706:	d3f7      	bcc.n	e6f8 <nvm_write_buffer+0x10>
    e708:	4b1e      	ldr	r3, [pc, #120]	; (e784 <nvm_write_buffer+0x9c>)
    e70a:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    e70c:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    e70e:	07db      	lsls	r3, r3, #31
    e710:	d5f2      	bpl.n	e6f8 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    e712:	4c1d      	ldr	r4, [pc, #116]	; (e788 <nvm_write_buffer+0xa0>)
    e714:	4b1b      	ldr	r3, [pc, #108]	; (e784 <nvm_write_buffer+0x9c>)
    e716:	801c      	strh	r4, [r3, #0]
    e718:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    e71a:	2401      	movs	r4, #1
    e71c:	7d2b      	ldrb	r3, [r5, #20]
    e71e:	4223      	tst	r3, r4
    e720:	d0fc      	beq.n	e71c <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    e722:	2420      	movs	r4, #32
    e724:	34ff      	adds	r4, #255	; 0xff
    e726:	4b17      	ldr	r3, [pc, #92]	; (e784 <nvm_write_buffer+0x9c>)
    e728:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    e72a:	2a00      	cmp	r2, #0
    e72c:	d022      	beq.n	e774 <nvm_write_buffer+0x8c>
    e72e:	2301      	movs	r3, #1
    e730:	0005      	movs	r5, r0
    e732:	439d      	bics	r5, r3
    e734:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    e736:	1e57      	subs	r7, r2, #1
    e738:	e009      	b.n	e74e <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    e73a:	18ce      	adds	r6, r1, r3
    e73c:	7876      	ldrb	r6, [r6, #1]
    e73e:	0236      	lsls	r6, r6, #8
    e740:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    e742:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    e744:	3302      	adds	r3, #2
    e746:	b29b      	uxth	r3, r3
    e748:	3502      	adds	r5, #2
    e74a:	429a      	cmp	r2, r3
    e74c:	d904      	bls.n	e758 <nvm_write_buffer+0x70>
		data = buffer[i];
    e74e:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    e750:	42bb      	cmp	r3, r7
    e752:	dbf2      	blt.n	e73a <nvm_write_buffer+0x52>
		data = buffer[i];
    e754:	b2a4      	uxth	r4, r4
    e756:	e7f4      	b.n	e742 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    e758:	4b09      	ldr	r3, [pc, #36]	; (e780 <nvm_write_buffer+0x98>)
    e75a:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    e75c:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    e75e:	2b00      	cmp	r3, #0
    e760:	d1ca      	bne.n	e6f8 <nvm_write_buffer+0x10>
    e762:	2a3f      	cmp	r2, #63	; 0x3f
    e764:	d8c8      	bhi.n	e6f8 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    e766:	2200      	movs	r2, #0
    e768:	0001      	movs	r1, r0
    e76a:	2004      	movs	r0, #4
    e76c:	4b07      	ldr	r3, [pc, #28]	; (e78c <nvm_write_buffer+0xa4>)
    e76e:	4798      	blx	r3
    e770:	0004      	movs	r4, r0
    e772:	e7c1      	b.n	e6f8 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    e774:	4b02      	ldr	r3, [pc, #8]	; (e780 <nvm_write_buffer+0x98>)
    e776:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    e778:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    e77a:	2b00      	cmp	r3, #0
    e77c:	d0f3      	beq.n	e766 <nvm_write_buffer+0x7e>
    e77e:	e7bb      	b.n	e6f8 <nvm_write_buffer+0x10>
    e780:	20000250 	.word	0x20000250
    e784:	41004000 	.word	0x41004000
    e788:	ffffa544 	.word	0xffffa544
    e78c:	0000e649 	.word	0x0000e649

0000e790 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    e790:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    e792:	4b18      	ldr	r3, [pc, #96]	; (e7f4 <nvm_read_buffer+0x64>)
    e794:	881d      	ldrh	r5, [r3, #0]
    e796:	885b      	ldrh	r3, [r3, #2]
    e798:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    e79a:	2418      	movs	r4, #24
	if (source_address >
    e79c:	4283      	cmp	r3, r0
    e79e:	d201      	bcs.n	e7a4 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    e7a0:	0020      	movs	r0, r4
    e7a2:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    e7a4:	1e6b      	subs	r3, r5, #1
    e7a6:	4218      	tst	r0, r3
    e7a8:	d1fa      	bne.n	e7a0 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    e7aa:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    e7ac:	4295      	cmp	r5, r2
    e7ae:	d3f7      	bcc.n	e7a0 <nvm_read_buffer+0x10>
    e7b0:	4b11      	ldr	r3, [pc, #68]	; (e7f8 <nvm_read_buffer+0x68>)
    e7b2:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    e7b4:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    e7b6:	07db      	lsls	r3, r3, #31
    e7b8:	d5f2      	bpl.n	e7a0 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    e7ba:	2420      	movs	r4, #32
    e7bc:	34ff      	adds	r4, #255	; 0xff
    e7be:	4b0e      	ldr	r3, [pc, #56]	; (e7f8 <nvm_read_buffer+0x68>)
    e7c0:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    e7c2:	2a00      	cmp	r2, #0
    e7c4:	d014      	beq.n	e7f0 <nvm_read_buffer+0x60>
    e7c6:	2301      	movs	r3, #1
    e7c8:	4398      	bics	r0, r3
    e7ca:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    e7cc:	1e56      	subs	r6, r2, #1
    e7ce:	e004      	b.n	e7da <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    e7d0:	3302      	adds	r3, #2
    e7d2:	b29b      	uxth	r3, r3
    e7d4:	3002      	adds	r0, #2
    e7d6:	429a      	cmp	r2, r3
    e7d8:	d908      	bls.n	e7ec <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    e7da:	8804      	ldrh	r4, [r0, #0]
    e7dc:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    e7de:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    e7e0:	42b3      	cmp	r3, r6
    e7e2:	daf5      	bge.n	e7d0 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    e7e4:	18cd      	adds	r5, r1, r3
    e7e6:	0a24      	lsrs	r4, r4, #8
    e7e8:	706c      	strb	r4, [r5, #1]
    e7ea:	e7f1      	b.n	e7d0 <nvm_read_buffer+0x40>
	return STATUS_OK;
    e7ec:	2400      	movs	r4, #0
    e7ee:	e7d7      	b.n	e7a0 <nvm_read_buffer+0x10>
    e7f0:	2400      	movs	r4, #0
    e7f2:	e7d5      	b.n	e7a0 <nvm_read_buffer+0x10>
    e7f4:	20000250 	.word	0x20000250
    e7f8:	41004000 	.word	0x41004000

0000e7fc <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    e7fc:	4b13      	ldr	r3, [pc, #76]	; (e84c <nvm_erase_row+0x50>)
    e7fe:	881a      	ldrh	r2, [r3, #0]
    e800:	885b      	ldrh	r3, [r3, #2]
    e802:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    e804:	2118      	movs	r1, #24
	if (row_address >
    e806:	4283      	cmp	r3, r0
    e808:	d201      	bcs.n	e80e <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    e80a:	0008      	movs	r0, r1
    e80c:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    e80e:	0092      	lsls	r2, r2, #2
    e810:	3a01      	subs	r2, #1
    e812:	4210      	tst	r0, r2
    e814:	d1f9      	bne.n	e80a <nvm_erase_row+0xe>
    e816:	4b0e      	ldr	r3, [pc, #56]	; (e850 <nvm_erase_row+0x54>)
    e818:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    e81a:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    e81c:	07db      	lsls	r3, r3, #31
    e81e:	d5f4      	bpl.n	e80a <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    e820:	4b0b      	ldr	r3, [pc, #44]	; (e850 <nvm_erase_row+0x54>)
    e822:	2220      	movs	r2, #32
    e824:	32ff      	adds	r2, #255	; 0xff
    e826:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    e828:	0880      	lsrs	r0, r0, #2
    e82a:	0040      	lsls	r0, r0, #1
    e82c:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    e82e:	4a09      	ldr	r2, [pc, #36]	; (e854 <nvm_erase_row+0x58>)
    e830:	801a      	strh	r2, [r3, #0]
    e832:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    e834:	2201      	movs	r2, #1
    e836:	7d0b      	ldrb	r3, [r1, #20]
    e838:	4213      	tst	r3, r2
    e83a:	d0fc      	beq.n	e836 <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    e83c:	4b04      	ldr	r3, [pc, #16]	; (e850 <nvm_erase_row+0x54>)
    e83e:	8b19      	ldrh	r1, [r3, #24]
    e840:	201c      	movs	r0, #28
    e842:	4001      	ands	r1, r0
	return STATUS_OK;
    e844:	1e48      	subs	r0, r1, #1
    e846:	4181      	sbcs	r1, r0
    e848:	0089      	lsls	r1, r1, #2
    e84a:	e7de      	b.n	e80a <nvm_erase_row+0xe>
    e84c:	20000250 	.word	0x20000250
    e850:	41004000 	.word	0x41004000
    e854:	ffffa502 	.word	0xffffa502

0000e858 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    e858:	b500      	push	{lr}
    e85a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    e85c:	ab01      	add	r3, sp, #4
    e85e:	2280      	movs	r2, #128	; 0x80
    e860:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    e862:	780a      	ldrb	r2, [r1, #0]
    e864:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    e866:	784a      	ldrb	r2, [r1, #1]
    e868:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    e86a:	788a      	ldrb	r2, [r1, #2]
    e86c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    e86e:	0019      	movs	r1, r3
    e870:	4b01      	ldr	r3, [pc, #4]	; (e878 <port_pin_set_config+0x20>)
    e872:	4798      	blx	r3
}
    e874:	b003      	add	sp, #12
    e876:	bd00      	pop	{pc}
    e878:	00010229 	.word	0x00010229

0000e87c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    e87c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e87e:	46de      	mov	lr, fp
    e880:	4657      	mov	r7, sl
    e882:	464e      	mov	r6, r9
    e884:	4645      	mov	r5, r8
    e886:	b5e0      	push	{r5, r6, r7, lr}
    e888:	b087      	sub	sp, #28
    e88a:	4680      	mov	r8, r0
    e88c:	9104      	str	r1, [sp, #16]
    e88e:	0016      	movs	r6, r2
    e890:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    e892:	2200      	movs	r2, #0
    e894:	2300      	movs	r3, #0
    e896:	2100      	movs	r1, #0
    e898:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    e89a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    e89c:	2001      	movs	r0, #1
    e89e:	0021      	movs	r1, r4
    e8a0:	9600      	str	r6, [sp, #0]
    e8a2:	9701      	str	r7, [sp, #4]
    e8a4:	465c      	mov	r4, fp
    e8a6:	9403      	str	r4, [sp, #12]
    e8a8:	4644      	mov	r4, r8
    e8aa:	9405      	str	r4, [sp, #20]
    e8ac:	e013      	b.n	e8d6 <long_division+0x5a>
    e8ae:	2420      	movs	r4, #32
    e8b0:	1a64      	subs	r4, r4, r1
    e8b2:	0005      	movs	r5, r0
    e8b4:	40e5      	lsrs	r5, r4
    e8b6:	46a8      	mov	r8, r5
    e8b8:	e014      	b.n	e8e4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    e8ba:	9c00      	ldr	r4, [sp, #0]
    e8bc:	9d01      	ldr	r5, [sp, #4]
    e8be:	1b12      	subs	r2, r2, r4
    e8c0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    e8c2:	465c      	mov	r4, fp
    e8c4:	464d      	mov	r5, r9
    e8c6:	432c      	orrs	r4, r5
    e8c8:	46a3      	mov	fp, r4
    e8ca:	9c03      	ldr	r4, [sp, #12]
    e8cc:	4645      	mov	r5, r8
    e8ce:	432c      	orrs	r4, r5
    e8d0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    e8d2:	3901      	subs	r1, #1
    e8d4:	d325      	bcc.n	e922 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    e8d6:	2420      	movs	r4, #32
    e8d8:	4264      	negs	r4, r4
    e8da:	190c      	adds	r4, r1, r4
    e8dc:	d4e7      	bmi.n	e8ae <long_division+0x32>
    e8de:	0005      	movs	r5, r0
    e8e0:	40a5      	lsls	r5, r4
    e8e2:	46a8      	mov	r8, r5
    e8e4:	0004      	movs	r4, r0
    e8e6:	408c      	lsls	r4, r1
    e8e8:	46a1      	mov	r9, r4
		r = r << 1;
    e8ea:	1892      	adds	r2, r2, r2
    e8ec:	415b      	adcs	r3, r3
    e8ee:	0014      	movs	r4, r2
    e8f0:	001d      	movs	r5, r3
		if (n & bit_shift) {
    e8f2:	9e05      	ldr	r6, [sp, #20]
    e8f4:	464f      	mov	r7, r9
    e8f6:	403e      	ands	r6, r7
    e8f8:	46b4      	mov	ip, r6
    e8fa:	9e04      	ldr	r6, [sp, #16]
    e8fc:	4647      	mov	r7, r8
    e8fe:	403e      	ands	r6, r7
    e900:	46b2      	mov	sl, r6
    e902:	4666      	mov	r6, ip
    e904:	4657      	mov	r7, sl
    e906:	433e      	orrs	r6, r7
    e908:	d003      	beq.n	e912 <long_division+0x96>
			r |= 0x01;
    e90a:	0006      	movs	r6, r0
    e90c:	4326      	orrs	r6, r4
    e90e:	0032      	movs	r2, r6
    e910:	002b      	movs	r3, r5
		if (r >= d) {
    e912:	9c00      	ldr	r4, [sp, #0]
    e914:	9d01      	ldr	r5, [sp, #4]
    e916:	429d      	cmp	r5, r3
    e918:	d8db      	bhi.n	e8d2 <long_division+0x56>
    e91a:	d1ce      	bne.n	e8ba <long_division+0x3e>
    e91c:	4294      	cmp	r4, r2
    e91e:	d8d8      	bhi.n	e8d2 <long_division+0x56>
    e920:	e7cb      	b.n	e8ba <long_division+0x3e>
    e922:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    e924:	4658      	mov	r0, fp
    e926:	0019      	movs	r1, r3
    e928:	b007      	add	sp, #28
    e92a:	bc3c      	pop	{r2, r3, r4, r5}
    e92c:	4690      	mov	r8, r2
    e92e:	4699      	mov	r9, r3
    e930:	46a2      	mov	sl, r4
    e932:	46ab      	mov	fp, r5
    e934:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e936 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    e936:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    e938:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    e93a:	2340      	movs	r3, #64	; 0x40
    e93c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    e93e:	4281      	cmp	r1, r0
    e940:	d202      	bcs.n	e948 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    e942:	0018      	movs	r0, r3
    e944:	bd10      	pop	{r4, pc}
		baud_calculated++;
    e946:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    e948:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    e94a:	1c63      	adds	r3, r4, #1
    e94c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    e94e:	4288      	cmp	r0, r1
    e950:	d9f9      	bls.n	e946 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    e952:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    e954:	2cff      	cmp	r4, #255	; 0xff
    e956:	d8f4      	bhi.n	e942 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    e958:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    e95a:	2300      	movs	r3, #0
    e95c:	e7f1      	b.n	e942 <_sercom_get_sync_baud_val+0xc>
	...

0000e960 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    e960:	b5f0      	push	{r4, r5, r6, r7, lr}
    e962:	b083      	sub	sp, #12
    e964:	000f      	movs	r7, r1
    e966:	0016      	movs	r6, r2
    e968:	aa08      	add	r2, sp, #32
    e96a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    e96c:	0004      	movs	r4, r0
    e96e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    e970:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    e972:	42bc      	cmp	r4, r7
    e974:	d902      	bls.n	e97c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    e976:	0010      	movs	r0, r2
    e978:	b003      	add	sp, #12
    e97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    e97c:	2b00      	cmp	r3, #0
    e97e:	d114      	bne.n	e9aa <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    e980:	0002      	movs	r2, r0
    e982:	0008      	movs	r0, r1
    e984:	2100      	movs	r1, #0
    e986:	4c19      	ldr	r4, [pc, #100]	; (e9ec <_sercom_get_async_baud_val+0x8c>)
    e988:	47a0      	blx	r4
    e98a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    e98c:	003a      	movs	r2, r7
    e98e:	2300      	movs	r3, #0
    e990:	2000      	movs	r0, #0
    e992:	4c17      	ldr	r4, [pc, #92]	; (e9f0 <_sercom_get_async_baud_val+0x90>)
    e994:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    e996:	2200      	movs	r2, #0
    e998:	2301      	movs	r3, #1
    e99a:	1a12      	subs	r2, r2, r0
    e99c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    e99e:	0c12      	lsrs	r2, r2, #16
    e9a0:	041b      	lsls	r3, r3, #16
    e9a2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    e9a4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    e9a6:	2200      	movs	r2, #0
    e9a8:	e7e5      	b.n	e976 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    e9aa:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    e9ac:	2b01      	cmp	r3, #1
    e9ae:	d1f9      	bne.n	e9a4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    e9b0:	000a      	movs	r2, r1
    e9b2:	2300      	movs	r3, #0
    e9b4:	2100      	movs	r1, #0
    e9b6:	4c0d      	ldr	r4, [pc, #52]	; (e9ec <_sercom_get_async_baud_val+0x8c>)
    e9b8:	47a0      	blx	r4
    e9ba:	0002      	movs	r2, r0
    e9bc:	000b      	movs	r3, r1
    e9be:	9200      	str	r2, [sp, #0]
    e9c0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    e9c2:	0038      	movs	r0, r7
    e9c4:	2100      	movs	r1, #0
    e9c6:	4c0a      	ldr	r4, [pc, #40]	; (e9f0 <_sercom_get_async_baud_val+0x90>)
    e9c8:	47a0      	blx	r4
    e9ca:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    e9cc:	2380      	movs	r3, #128	; 0x80
    e9ce:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    e9d0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    e9d2:	4298      	cmp	r0, r3
    e9d4:	d8cf      	bhi.n	e976 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    e9d6:	0f79      	lsrs	r1, r7, #29
    e9d8:	00f8      	lsls	r0, r7, #3
    e9da:	9a00      	ldr	r2, [sp, #0]
    e9dc:	9b01      	ldr	r3, [sp, #4]
    e9de:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    e9e0:	00ea      	lsls	r2, r5, #3
    e9e2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    e9e4:	b2d2      	uxtb	r2, r2
    e9e6:	0352      	lsls	r2, r2, #13
    e9e8:	432a      	orrs	r2, r5
    e9ea:	e7db      	b.n	e9a4 <_sercom_get_async_baud_val+0x44>
    e9ec:	000125ad 	.word	0x000125ad
    e9f0:	0000e87d 	.word	0x0000e87d

0000e9f4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    e9f4:	b510      	push	{r4, lr}
    e9f6:	b082      	sub	sp, #8
    e9f8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    e9fa:	4b0e      	ldr	r3, [pc, #56]	; (ea34 <sercom_set_gclk_generator+0x40>)
    e9fc:	781b      	ldrb	r3, [r3, #0]
    e9fe:	2b00      	cmp	r3, #0
    ea00:	d007      	beq.n	ea12 <sercom_set_gclk_generator+0x1e>
    ea02:	2900      	cmp	r1, #0
    ea04:	d105      	bne.n	ea12 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    ea06:	4b0b      	ldr	r3, [pc, #44]	; (ea34 <sercom_set_gclk_generator+0x40>)
    ea08:	785b      	ldrb	r3, [r3, #1]
    ea0a:	4283      	cmp	r3, r0
    ea0c:	d010      	beq.n	ea30 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    ea0e:	201d      	movs	r0, #29
    ea10:	e00c      	b.n	ea2c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    ea12:	a901      	add	r1, sp, #4
    ea14:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    ea16:	2013      	movs	r0, #19
    ea18:	4b07      	ldr	r3, [pc, #28]	; (ea38 <sercom_set_gclk_generator+0x44>)
    ea1a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    ea1c:	2013      	movs	r0, #19
    ea1e:	4b07      	ldr	r3, [pc, #28]	; (ea3c <sercom_set_gclk_generator+0x48>)
    ea20:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    ea22:	4b04      	ldr	r3, [pc, #16]	; (ea34 <sercom_set_gclk_generator+0x40>)
    ea24:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    ea26:	2201      	movs	r2, #1
    ea28:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    ea2a:	2000      	movs	r0, #0
}
    ea2c:	b002      	add	sp, #8
    ea2e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    ea30:	2000      	movs	r0, #0
    ea32:	e7fb      	b.n	ea2c <sercom_set_gclk_generator+0x38>
    ea34:	20000258 	.word	0x20000258
    ea38:	00010131 	.word	0x00010131
    ea3c:	000100a5 	.word	0x000100a5

0000ea40 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    ea40:	4b40      	ldr	r3, [pc, #256]	; (eb44 <_sercom_get_default_pad+0x104>)
    ea42:	4298      	cmp	r0, r3
    ea44:	d031      	beq.n	eaaa <_sercom_get_default_pad+0x6a>
    ea46:	d90a      	bls.n	ea5e <_sercom_get_default_pad+0x1e>
    ea48:	4b3f      	ldr	r3, [pc, #252]	; (eb48 <_sercom_get_default_pad+0x108>)
    ea4a:	4298      	cmp	r0, r3
    ea4c:	d04d      	beq.n	eaea <_sercom_get_default_pad+0xaa>
    ea4e:	4b3f      	ldr	r3, [pc, #252]	; (eb4c <_sercom_get_default_pad+0x10c>)
    ea50:	4298      	cmp	r0, r3
    ea52:	d05a      	beq.n	eb0a <_sercom_get_default_pad+0xca>
    ea54:	4b3e      	ldr	r3, [pc, #248]	; (eb50 <_sercom_get_default_pad+0x110>)
    ea56:	4298      	cmp	r0, r3
    ea58:	d037      	beq.n	eaca <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    ea5a:	2000      	movs	r0, #0
}
    ea5c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    ea5e:	4b3d      	ldr	r3, [pc, #244]	; (eb54 <_sercom_get_default_pad+0x114>)
    ea60:	4298      	cmp	r0, r3
    ea62:	d00c      	beq.n	ea7e <_sercom_get_default_pad+0x3e>
    ea64:	4b3c      	ldr	r3, [pc, #240]	; (eb58 <_sercom_get_default_pad+0x118>)
    ea66:	4298      	cmp	r0, r3
    ea68:	d1f7      	bne.n	ea5a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    ea6a:	2901      	cmp	r1, #1
    ea6c:	d017      	beq.n	ea9e <_sercom_get_default_pad+0x5e>
    ea6e:	2900      	cmp	r1, #0
    ea70:	d05d      	beq.n	eb2e <_sercom_get_default_pad+0xee>
    ea72:	2902      	cmp	r1, #2
    ea74:	d015      	beq.n	eaa2 <_sercom_get_default_pad+0x62>
    ea76:	2903      	cmp	r1, #3
    ea78:	d015      	beq.n	eaa6 <_sercom_get_default_pad+0x66>
	return 0;
    ea7a:	2000      	movs	r0, #0
    ea7c:	e7ee      	b.n	ea5c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    ea7e:	2901      	cmp	r1, #1
    ea80:	d007      	beq.n	ea92 <_sercom_get_default_pad+0x52>
    ea82:	2900      	cmp	r1, #0
    ea84:	d051      	beq.n	eb2a <_sercom_get_default_pad+0xea>
    ea86:	2902      	cmp	r1, #2
    ea88:	d005      	beq.n	ea96 <_sercom_get_default_pad+0x56>
    ea8a:	2903      	cmp	r1, #3
    ea8c:	d005      	beq.n	ea9a <_sercom_get_default_pad+0x5a>
	return 0;
    ea8e:	2000      	movs	r0, #0
    ea90:	e7e4      	b.n	ea5c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    ea92:	4832      	ldr	r0, [pc, #200]	; (eb5c <_sercom_get_default_pad+0x11c>)
    ea94:	e7e2      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    ea96:	4832      	ldr	r0, [pc, #200]	; (eb60 <_sercom_get_default_pad+0x120>)
    ea98:	e7e0      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    ea9a:	4832      	ldr	r0, [pc, #200]	; (eb64 <_sercom_get_default_pad+0x124>)
    ea9c:	e7de      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    ea9e:	4832      	ldr	r0, [pc, #200]	; (eb68 <_sercom_get_default_pad+0x128>)
    eaa0:	e7dc      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eaa2:	4832      	ldr	r0, [pc, #200]	; (eb6c <_sercom_get_default_pad+0x12c>)
    eaa4:	e7da      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eaa6:	4832      	ldr	r0, [pc, #200]	; (eb70 <_sercom_get_default_pad+0x130>)
    eaa8:	e7d8      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eaaa:	2901      	cmp	r1, #1
    eaac:	d007      	beq.n	eabe <_sercom_get_default_pad+0x7e>
    eaae:	2900      	cmp	r1, #0
    eab0:	d03f      	beq.n	eb32 <_sercom_get_default_pad+0xf2>
    eab2:	2902      	cmp	r1, #2
    eab4:	d005      	beq.n	eac2 <_sercom_get_default_pad+0x82>
    eab6:	2903      	cmp	r1, #3
    eab8:	d005      	beq.n	eac6 <_sercom_get_default_pad+0x86>
	return 0;
    eaba:	2000      	movs	r0, #0
    eabc:	e7ce      	b.n	ea5c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    eabe:	482d      	ldr	r0, [pc, #180]	; (eb74 <_sercom_get_default_pad+0x134>)
    eac0:	e7cc      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eac2:	482d      	ldr	r0, [pc, #180]	; (eb78 <_sercom_get_default_pad+0x138>)
    eac4:	e7ca      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eac6:	482d      	ldr	r0, [pc, #180]	; (eb7c <_sercom_get_default_pad+0x13c>)
    eac8:	e7c8      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eaca:	2901      	cmp	r1, #1
    eacc:	d007      	beq.n	eade <_sercom_get_default_pad+0x9e>
    eace:	2900      	cmp	r1, #0
    ead0:	d031      	beq.n	eb36 <_sercom_get_default_pad+0xf6>
    ead2:	2902      	cmp	r1, #2
    ead4:	d005      	beq.n	eae2 <_sercom_get_default_pad+0xa2>
    ead6:	2903      	cmp	r1, #3
    ead8:	d005      	beq.n	eae6 <_sercom_get_default_pad+0xa6>
	return 0;
    eada:	2000      	movs	r0, #0
    eadc:	e7be      	b.n	ea5c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    eade:	4828      	ldr	r0, [pc, #160]	; (eb80 <_sercom_get_default_pad+0x140>)
    eae0:	e7bc      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eae2:	4828      	ldr	r0, [pc, #160]	; (eb84 <_sercom_get_default_pad+0x144>)
    eae4:	e7ba      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eae6:	4828      	ldr	r0, [pc, #160]	; (eb88 <_sercom_get_default_pad+0x148>)
    eae8:	e7b8      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eaea:	2901      	cmp	r1, #1
    eaec:	d007      	beq.n	eafe <_sercom_get_default_pad+0xbe>
    eaee:	2900      	cmp	r1, #0
    eaf0:	d023      	beq.n	eb3a <_sercom_get_default_pad+0xfa>
    eaf2:	2902      	cmp	r1, #2
    eaf4:	d005      	beq.n	eb02 <_sercom_get_default_pad+0xc2>
    eaf6:	2903      	cmp	r1, #3
    eaf8:	d005      	beq.n	eb06 <_sercom_get_default_pad+0xc6>
	return 0;
    eafa:	2000      	movs	r0, #0
    eafc:	e7ae      	b.n	ea5c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    eafe:	4823      	ldr	r0, [pc, #140]	; (eb8c <_sercom_get_default_pad+0x14c>)
    eb00:	e7ac      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eb02:	4823      	ldr	r0, [pc, #140]	; (eb90 <_sercom_get_default_pad+0x150>)
    eb04:	e7aa      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eb06:	4823      	ldr	r0, [pc, #140]	; (eb94 <_sercom_get_default_pad+0x154>)
    eb08:	e7a8      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eb0a:	2901      	cmp	r1, #1
    eb0c:	d007      	beq.n	eb1e <_sercom_get_default_pad+0xde>
    eb0e:	2900      	cmp	r1, #0
    eb10:	d015      	beq.n	eb3e <_sercom_get_default_pad+0xfe>
    eb12:	2902      	cmp	r1, #2
    eb14:	d005      	beq.n	eb22 <_sercom_get_default_pad+0xe2>
    eb16:	2903      	cmp	r1, #3
    eb18:	d005      	beq.n	eb26 <_sercom_get_default_pad+0xe6>
	return 0;
    eb1a:	2000      	movs	r0, #0
    eb1c:	e79e      	b.n	ea5c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    eb1e:	481e      	ldr	r0, [pc, #120]	; (eb98 <_sercom_get_default_pad+0x158>)
    eb20:	e79c      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eb22:	481e      	ldr	r0, [pc, #120]	; (eb9c <_sercom_get_default_pad+0x15c>)
    eb24:	e79a      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eb26:	481e      	ldr	r0, [pc, #120]	; (eba0 <_sercom_get_default_pad+0x160>)
    eb28:	e798      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eb2a:	481e      	ldr	r0, [pc, #120]	; (eba4 <_sercom_get_default_pad+0x164>)
    eb2c:	e796      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eb2e:	2003      	movs	r0, #3
    eb30:	e794      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eb32:	481d      	ldr	r0, [pc, #116]	; (eba8 <_sercom_get_default_pad+0x168>)
    eb34:	e792      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eb36:	481d      	ldr	r0, [pc, #116]	; (ebac <_sercom_get_default_pad+0x16c>)
    eb38:	e790      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eb3a:	481d      	ldr	r0, [pc, #116]	; (ebb0 <_sercom_get_default_pad+0x170>)
    eb3c:	e78e      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eb3e:	481d      	ldr	r0, [pc, #116]	; (ebb4 <_sercom_get_default_pad+0x174>)
    eb40:	e78c      	b.n	ea5c <_sercom_get_default_pad+0x1c>
    eb42:	46c0      	nop			; (mov r8, r8)
    eb44:	42001000 	.word	0x42001000
    eb48:	42001800 	.word	0x42001800
    eb4c:	42001c00 	.word	0x42001c00
    eb50:	42001400 	.word	0x42001400
    eb54:	42000800 	.word	0x42000800
    eb58:	42000c00 	.word	0x42000c00
    eb5c:	00050003 	.word	0x00050003
    eb60:	00060003 	.word	0x00060003
    eb64:	00070003 	.word	0x00070003
    eb68:	00010003 	.word	0x00010003
    eb6c:	001e0003 	.word	0x001e0003
    eb70:	001f0003 	.word	0x001f0003
    eb74:	00090003 	.word	0x00090003
    eb78:	000a0003 	.word	0x000a0003
    eb7c:	000b0003 	.word	0x000b0003
    eb80:	00110003 	.word	0x00110003
    eb84:	00120003 	.word	0x00120003
    eb88:	00130003 	.word	0x00130003
    eb8c:	000d0003 	.word	0x000d0003
    eb90:	000e0003 	.word	0x000e0003
    eb94:	000f0003 	.word	0x000f0003
    eb98:	00170003 	.word	0x00170003
    eb9c:	00180003 	.word	0x00180003
    eba0:	00190003 	.word	0x00190003
    eba4:	00040003 	.word	0x00040003
    eba8:	00080003 	.word	0x00080003
    ebac:	00100003 	.word	0x00100003
    ebb0:	000c0003 	.word	0x000c0003
    ebb4:	00160003 	.word	0x00160003

0000ebb8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    ebb8:	b530      	push	{r4, r5, lr}
    ebba:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    ebbc:	4b0b      	ldr	r3, [pc, #44]	; (ebec <_sercom_get_sercom_inst_index+0x34>)
    ebbe:	466a      	mov	r2, sp
    ebc0:	cb32      	ldmia	r3!, {r1, r4, r5}
    ebc2:	c232      	stmia	r2!, {r1, r4, r5}
    ebc4:	cb32      	ldmia	r3!, {r1, r4, r5}
    ebc6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    ebc8:	9b00      	ldr	r3, [sp, #0]
    ebca:	4283      	cmp	r3, r0
    ebcc:	d00b      	beq.n	ebe6 <_sercom_get_sercom_inst_index+0x2e>
    ebce:	2301      	movs	r3, #1
    ebd0:	009a      	lsls	r2, r3, #2
    ebd2:	4669      	mov	r1, sp
    ebd4:	5852      	ldr	r2, [r2, r1]
    ebd6:	4282      	cmp	r2, r0
    ebd8:	d006      	beq.n	ebe8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ebda:	3301      	adds	r3, #1
    ebdc:	2b06      	cmp	r3, #6
    ebde:	d1f7      	bne.n	ebd0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    ebe0:	2000      	movs	r0, #0
}
    ebe2:	b007      	add	sp, #28
    ebe4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ebe6:	2300      	movs	r3, #0
			return i;
    ebe8:	b2d8      	uxtb	r0, r3
    ebea:	e7fa      	b.n	ebe2 <_sercom_get_sercom_inst_index+0x2a>
    ebec:	00016948 	.word	0x00016948

0000ebf0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    ebf0:	4770      	bx	lr
	...

0000ebf4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    ebf4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    ebf6:	4b0a      	ldr	r3, [pc, #40]	; (ec20 <_sercom_set_handler+0x2c>)
    ebf8:	781b      	ldrb	r3, [r3, #0]
    ebfa:	2b00      	cmp	r3, #0
    ebfc:	d10c      	bne.n	ec18 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    ebfe:	4f09      	ldr	r7, [pc, #36]	; (ec24 <_sercom_set_handler+0x30>)
    ec00:	4e09      	ldr	r6, [pc, #36]	; (ec28 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    ec02:	4d0a      	ldr	r5, [pc, #40]	; (ec2c <_sercom_set_handler+0x38>)
    ec04:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    ec06:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    ec08:	195a      	adds	r2, r3, r5
    ec0a:	6014      	str	r4, [r2, #0]
    ec0c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ec0e:	2b18      	cmp	r3, #24
    ec10:	d1f9      	bne.n	ec06 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    ec12:	2201      	movs	r2, #1
    ec14:	4b02      	ldr	r3, [pc, #8]	; (ec20 <_sercom_set_handler+0x2c>)
    ec16:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    ec18:	0080      	lsls	r0, r0, #2
    ec1a:	4b02      	ldr	r3, [pc, #8]	; (ec24 <_sercom_set_handler+0x30>)
    ec1c:	50c1      	str	r1, [r0, r3]
}
    ec1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec20:	2000025a 	.word	0x2000025a
    ec24:	2000025c 	.word	0x2000025c
    ec28:	0000ebf1 	.word	0x0000ebf1
    ec2c:	20000578 	.word	0x20000578

0000ec30 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    ec30:	b500      	push	{lr}
    ec32:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    ec34:	2309      	movs	r3, #9
    ec36:	466a      	mov	r2, sp
    ec38:	7013      	strb	r3, [r2, #0]
    ec3a:	3301      	adds	r3, #1
    ec3c:	7053      	strb	r3, [r2, #1]
    ec3e:	3301      	adds	r3, #1
    ec40:	7093      	strb	r3, [r2, #2]
    ec42:	3301      	adds	r3, #1
    ec44:	70d3      	strb	r3, [r2, #3]
    ec46:	3301      	adds	r3, #1
    ec48:	7113      	strb	r3, [r2, #4]
    ec4a:	3301      	adds	r3, #1
    ec4c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    ec4e:	4b03      	ldr	r3, [pc, #12]	; (ec5c <_sercom_get_interrupt_vector+0x2c>)
    ec50:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    ec52:	466b      	mov	r3, sp
    ec54:	5618      	ldrsb	r0, [r3, r0]
}
    ec56:	b003      	add	sp, #12
    ec58:	bd00      	pop	{pc}
    ec5a:	46c0      	nop			; (mov r8, r8)
    ec5c:	0000ebb9 	.word	0x0000ebb9

0000ec60 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    ec60:	b510      	push	{r4, lr}
    ec62:	4b02      	ldr	r3, [pc, #8]	; (ec6c <SERCOM0_Handler+0xc>)
    ec64:	681b      	ldr	r3, [r3, #0]
    ec66:	2000      	movs	r0, #0
    ec68:	4798      	blx	r3
    ec6a:	bd10      	pop	{r4, pc}
    ec6c:	2000025c 	.word	0x2000025c

0000ec70 <SERCOM1_Handler>:
    ec70:	b510      	push	{r4, lr}
    ec72:	4b02      	ldr	r3, [pc, #8]	; (ec7c <SERCOM1_Handler+0xc>)
    ec74:	685b      	ldr	r3, [r3, #4]
    ec76:	2001      	movs	r0, #1
    ec78:	4798      	blx	r3
    ec7a:	bd10      	pop	{r4, pc}
    ec7c:	2000025c 	.word	0x2000025c

0000ec80 <SERCOM2_Handler>:
    ec80:	b510      	push	{r4, lr}
    ec82:	4b02      	ldr	r3, [pc, #8]	; (ec8c <SERCOM2_Handler+0xc>)
    ec84:	689b      	ldr	r3, [r3, #8]
    ec86:	2002      	movs	r0, #2
    ec88:	4798      	blx	r3
    ec8a:	bd10      	pop	{r4, pc}
    ec8c:	2000025c 	.word	0x2000025c

0000ec90 <SERCOM3_Handler>:
    ec90:	b510      	push	{r4, lr}
    ec92:	4b02      	ldr	r3, [pc, #8]	; (ec9c <SERCOM3_Handler+0xc>)
    ec94:	68db      	ldr	r3, [r3, #12]
    ec96:	2003      	movs	r0, #3
    ec98:	4798      	blx	r3
    ec9a:	bd10      	pop	{r4, pc}
    ec9c:	2000025c 	.word	0x2000025c

0000eca0 <SERCOM4_Handler>:
    eca0:	b510      	push	{r4, lr}
    eca2:	4b02      	ldr	r3, [pc, #8]	; (ecac <SERCOM4_Handler+0xc>)
    eca4:	691b      	ldr	r3, [r3, #16]
    eca6:	2004      	movs	r0, #4
    eca8:	4798      	blx	r3
    ecaa:	bd10      	pop	{r4, pc}
    ecac:	2000025c 	.word	0x2000025c

0000ecb0 <SERCOM5_Handler>:
    ecb0:	b510      	push	{r4, lr}
    ecb2:	4b02      	ldr	r3, [pc, #8]	; (ecbc <SERCOM5_Handler+0xc>)
    ecb4:	695b      	ldr	r3, [r3, #20]
    ecb6:	2005      	movs	r0, #5
    ecb8:	4798      	blx	r3
    ecba:	bd10      	pop	{r4, pc}
    ecbc:	2000025c 	.word	0x2000025c

0000ecc0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    ecc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ecc2:	b08b      	sub	sp, #44	; 0x2c
    ecc4:	0005      	movs	r5, r0
    ecc6:	000c      	movs	r4, r1
    ecc8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    ecca:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    eccc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    ecce:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    ecd0:	079b      	lsls	r3, r3, #30
    ecd2:	d501      	bpl.n	ecd8 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    ecd4:	b00b      	add	sp, #44	; 0x2c
    ecd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    ecd8:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    ecda:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    ecdc:	07db      	lsls	r3, r3, #31
    ecde:	d4f9      	bmi.n	ecd4 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    ece0:	0008      	movs	r0, r1
    ece2:	4b6f      	ldr	r3, [pc, #444]	; (eea0 <spi_init+0x1e0>)
    ece4:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    ece6:	4a6f      	ldr	r2, [pc, #444]	; (eea4 <spi_init+0x1e4>)
    ece8:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    ecea:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    ecec:	2301      	movs	r3, #1
    ecee:	40bb      	lsls	r3, r7
    ecf0:	430b      	orrs	r3, r1
    ecf2:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    ecf4:	a909      	add	r1, sp, #36	; 0x24
    ecf6:	2724      	movs	r7, #36	; 0x24
    ecf8:	5df3      	ldrb	r3, [r6, r7]
    ecfa:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    ecfc:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    ecfe:	b2c3      	uxtb	r3, r0
    ed00:	9301      	str	r3, [sp, #4]
    ed02:	0018      	movs	r0, r3
    ed04:	4b68      	ldr	r3, [pc, #416]	; (eea8 <spi_init+0x1e8>)
    ed06:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    ed08:	9801      	ldr	r0, [sp, #4]
    ed0a:	4b68      	ldr	r3, [pc, #416]	; (eeac <spi_init+0x1ec>)
    ed0c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    ed0e:	5df0      	ldrb	r0, [r6, r7]
    ed10:	2100      	movs	r1, #0
    ed12:	4b67      	ldr	r3, [pc, #412]	; (eeb0 <spi_init+0x1f0>)
    ed14:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    ed16:	7833      	ldrb	r3, [r6, #0]
    ed18:	2b01      	cmp	r3, #1
    ed1a:	d03f      	beq.n	ed9c <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    ed1c:	7833      	ldrb	r3, [r6, #0]
    ed1e:	2b00      	cmp	r3, #0
    ed20:	d103      	bne.n	ed2a <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    ed22:	6823      	ldr	r3, [r4, #0]
    ed24:	2208      	movs	r2, #8
    ed26:	4313      	orrs	r3, r2
    ed28:	6023      	str	r3, [r4, #0]
    ed2a:	002b      	movs	r3, r5
    ed2c:	330c      	adds	r3, #12
    ed2e:	0029      	movs	r1, r5
    ed30:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    ed32:	2200      	movs	r2, #0
    ed34:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    ed36:	428b      	cmp	r3, r1
    ed38:	d1fc      	bne.n	ed34 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    ed3a:	2300      	movs	r3, #0
    ed3c:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    ed3e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    ed40:	2400      	movs	r4, #0
    ed42:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    ed44:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    ed46:	3336      	adds	r3, #54	; 0x36
    ed48:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    ed4a:	3301      	adds	r3, #1
    ed4c:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    ed4e:	3301      	adds	r3, #1
    ed50:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    ed52:	3b35      	subs	r3, #53	; 0x35
    ed54:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    ed56:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    ed58:	6828      	ldr	r0, [r5, #0]
    ed5a:	4b51      	ldr	r3, [pc, #324]	; (eea0 <spi_init+0x1e0>)
    ed5c:	4798      	blx	r3
    ed5e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    ed60:	4954      	ldr	r1, [pc, #336]	; (eeb4 <spi_init+0x1f4>)
    ed62:	4b55      	ldr	r3, [pc, #340]	; (eeb8 <spi_init+0x1f8>)
    ed64:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    ed66:	00bf      	lsls	r7, r7, #2
    ed68:	4b54      	ldr	r3, [pc, #336]	; (eebc <spi_init+0x1fc>)
    ed6a:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    ed6c:	682f      	ldr	r7, [r5, #0]
    ed6e:	ab04      	add	r3, sp, #16
    ed70:	2280      	movs	r2, #128	; 0x80
    ed72:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    ed74:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    ed76:	3a7f      	subs	r2, #127	; 0x7f
    ed78:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    ed7a:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    ed7c:	7833      	ldrb	r3, [r6, #0]
    ed7e:	2b00      	cmp	r3, #0
    ed80:	d102      	bne.n	ed88 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    ed82:	2200      	movs	r2, #0
    ed84:	ab04      	add	r3, sp, #16
    ed86:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    ed88:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    ed8a:	9305      	str	r3, [sp, #20]
    ed8c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    ed8e:	9306      	str	r3, [sp, #24]
    ed90:	6b33      	ldr	r3, [r6, #48]	; 0x30
    ed92:	9307      	str	r3, [sp, #28]
    ed94:	6b73      	ldr	r3, [r6, #52]	; 0x34
    ed96:	9308      	str	r3, [sp, #32]
    ed98:	2400      	movs	r4, #0
    ed9a:	e00b      	b.n	edb4 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    ed9c:	6823      	ldr	r3, [r4, #0]
    ed9e:	220c      	movs	r2, #12
    eda0:	4313      	orrs	r3, r2
    eda2:	6023      	str	r3, [r4, #0]
    eda4:	e7ba      	b.n	ed1c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    eda6:	0038      	movs	r0, r7
    eda8:	4b45      	ldr	r3, [pc, #276]	; (eec0 <spi_init+0x200>)
    edaa:	4798      	blx	r3
    edac:	e00a      	b.n	edc4 <spi_init+0x104>
    edae:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    edb0:	2c04      	cmp	r4, #4
    edb2:	d010      	beq.n	edd6 <spi_init+0x116>
    edb4:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    edb6:	00a3      	lsls	r3, r4, #2
    edb8:	aa02      	add	r2, sp, #8
    edba:	200c      	movs	r0, #12
    edbc:	1812      	adds	r2, r2, r0
    edbe:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    edc0:	2800      	cmp	r0, #0
    edc2:	d0f0      	beq.n	eda6 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    edc4:	1c43      	adds	r3, r0, #1
    edc6:	d0f2      	beq.n	edae <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    edc8:	a904      	add	r1, sp, #16
    edca:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    edcc:	0c00      	lsrs	r0, r0, #16
    edce:	b2c0      	uxtb	r0, r0
    edd0:	4b3c      	ldr	r3, [pc, #240]	; (eec4 <spi_init+0x204>)
    edd2:	4798      	blx	r3
    edd4:	e7eb      	b.n	edae <spi_init+0xee>
	module->mode             = config->mode;
    edd6:	7833      	ldrb	r3, [r6, #0]
    edd8:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    edda:	7c33      	ldrb	r3, [r6, #16]
    eddc:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    edde:	7cb3      	ldrb	r3, [r6, #18]
    ede0:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    ede2:	7d33      	ldrb	r3, [r6, #20]
    ede4:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    ede6:	2200      	movs	r2, #0
    ede8:	ab02      	add	r3, sp, #8
    edea:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    edec:	7833      	ldrb	r3, [r6, #0]
    edee:	2b01      	cmp	r3, #1
    edf0:	d012      	beq.n	ee18 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    edf2:	7833      	ldrb	r3, [r6, #0]
    edf4:	2b00      	cmp	r3, #0
    edf6:	d126      	bne.n	ee46 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    edf8:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    edfa:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    edfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    edfe:	7ff1      	ldrb	r1, [r6, #31]
    ee00:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    ee02:	7fb4      	ldrb	r4, [r6, #30]
    ee04:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    ee06:	4319      	orrs	r1, r3
    ee08:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    ee0a:	2320      	movs	r3, #32
    ee0c:	5cf3      	ldrb	r3, [r6, r3]
    ee0e:	2b00      	cmp	r3, #0
    ee10:	d01b      	beq.n	ee4a <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    ee12:	2340      	movs	r3, #64	; 0x40
    ee14:	431a      	orrs	r2, r3
    ee16:	e018      	b.n	ee4a <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    ee18:	6828      	ldr	r0, [r5, #0]
    ee1a:	4b21      	ldr	r3, [pc, #132]	; (eea0 <spi_init+0x1e0>)
    ee1c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    ee1e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    ee20:	b2c0      	uxtb	r0, r0
    ee22:	4b29      	ldr	r3, [pc, #164]	; (eec8 <spi_init+0x208>)
    ee24:	4798      	blx	r3
    ee26:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    ee28:	ab02      	add	r3, sp, #8
    ee2a:	1d9a      	adds	r2, r3, #6
    ee2c:	69b0      	ldr	r0, [r6, #24]
    ee2e:	4b27      	ldr	r3, [pc, #156]	; (eecc <spi_init+0x20c>)
    ee30:	4798      	blx	r3
    ee32:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    ee34:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    ee36:	2b00      	cmp	r3, #0
    ee38:	d000      	beq.n	ee3c <spi_init+0x17c>
    ee3a:	e74b      	b.n	ecd4 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    ee3c:	ab02      	add	r3, sp, #8
    ee3e:	3306      	adds	r3, #6
    ee40:	781b      	ldrb	r3, [r3, #0]
    ee42:	733b      	strb	r3, [r7, #12]
    ee44:	e7d5      	b.n	edf2 <spi_init+0x132>
	uint32_t ctrlb = 0;
    ee46:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    ee48:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    ee4a:	6873      	ldr	r3, [r6, #4]
    ee4c:	68b1      	ldr	r1, [r6, #8]
    ee4e:	430b      	orrs	r3, r1
    ee50:	68f1      	ldr	r1, [r6, #12]
    ee52:	430b      	orrs	r3, r1
    ee54:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    ee56:	7c31      	ldrb	r1, [r6, #16]
    ee58:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    ee5a:	7c71      	ldrb	r1, [r6, #17]
    ee5c:	2900      	cmp	r1, #0
    ee5e:	d103      	bne.n	ee68 <spi_init+0x1a8>
    ee60:	491b      	ldr	r1, [pc, #108]	; (eed0 <spi_init+0x210>)
    ee62:	7889      	ldrb	r1, [r1, #2]
    ee64:	0789      	lsls	r1, r1, #30
    ee66:	d501      	bpl.n	ee6c <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    ee68:	2180      	movs	r1, #128	; 0x80
    ee6a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    ee6c:	7cb1      	ldrb	r1, [r6, #18]
    ee6e:	2900      	cmp	r1, #0
    ee70:	d002      	beq.n	ee78 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    ee72:	2180      	movs	r1, #128	; 0x80
    ee74:	0289      	lsls	r1, r1, #10
    ee76:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    ee78:	7cf1      	ldrb	r1, [r6, #19]
    ee7a:	2900      	cmp	r1, #0
    ee7c:	d002      	beq.n	ee84 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    ee7e:	2180      	movs	r1, #128	; 0x80
    ee80:	0089      	lsls	r1, r1, #2
    ee82:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    ee84:	7d31      	ldrb	r1, [r6, #20]
    ee86:	2900      	cmp	r1, #0
    ee88:	d002      	beq.n	ee90 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    ee8a:	2180      	movs	r1, #128	; 0x80
    ee8c:	0189      	lsls	r1, r1, #6
    ee8e:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    ee90:	6839      	ldr	r1, [r7, #0]
    ee92:	430b      	orrs	r3, r1
    ee94:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    ee96:	687b      	ldr	r3, [r7, #4]
    ee98:	431a      	orrs	r2, r3
    ee9a:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    ee9c:	2000      	movs	r0, #0
    ee9e:	e719      	b.n	ecd4 <spi_init+0x14>
    eea0:	0000ebb9 	.word	0x0000ebb9
    eea4:	40000400 	.word	0x40000400
    eea8:	00010131 	.word	0x00010131
    eeac:	000100a5 	.word	0x000100a5
    eeb0:	0000e9f5 	.word	0x0000e9f5
    eeb4:	0000f2f5 	.word	0x0000f2f5
    eeb8:	0000ebf5 	.word	0x0000ebf5
    eebc:	20000578 	.word	0x20000578
    eec0:	0000ea41 	.word	0x0000ea41
    eec4:	00010229 	.word	0x00010229
    eec8:	0001014d 	.word	0x0001014d
    eecc:	0000e937 	.word	0x0000e937
    eed0:	41002000 	.word	0x41002000

0000eed4 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    eed4:	b5f0      	push	{r4, r5, r6, r7, lr}
    eed6:	46d6      	mov	lr, sl
    eed8:	464f      	mov	r7, r9
    eeda:	b580      	push	{r7, lr}
    eedc:	b083      	sub	sp, #12
    eede:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    eee0:	2538      	movs	r5, #56	; 0x38
    eee2:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    eee4:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    eee6:	2e05      	cmp	r6, #5
    eee8:	d075      	beq.n	efd6 <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    eeea:	3512      	adds	r5, #18
	if (length == 0) {
    eeec:	2a00      	cmp	r2, #0
    eeee:	d072      	beq.n	efd6 <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    eef0:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    eef2:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    eef4:	2c00      	cmp	r4, #0
    eef6:	d06e      	beq.n	efd6 <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    eef8:	7944      	ldrb	r4, [r0, #5]
    eefa:	2c00      	cmp	r4, #0
    eefc:	d103      	bne.n	ef06 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    eefe:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ef00:	7e25      	ldrb	r5, [r4, #24]
    ef02:	07a9      	lsls	r1, r5, #30
    ef04:	d40a      	bmi.n	ef1c <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    ef06:	3a01      	subs	r2, #1
    ef08:	b294      	uxth	r4, r2
    ef0a:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    ef0c:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    ef0e:	2102      	movs	r1, #2
    ef10:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    ef12:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ef14:	05db      	lsls	r3, r3, #23
    ef16:	0ddb      	lsrs	r3, r3, #23
    ef18:	469a      	mov	sl, r3
    ef1a:	e037      	b.n	ef8c <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    ef1c:	2502      	movs	r5, #2
    ef1e:	7625      	strb	r5, [r4, #24]
    ef20:	e7f1      	b.n	ef06 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ef22:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ef24:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    ef26:	423b      	tst	r3, r7
    ef28:	d0fc      	beq.n	ef24 <spi_read_buffer_wait+0x50>
    ef2a:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    ef2c:	423b      	tst	r3, r7
    ef2e:	d009      	beq.n	ef44 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ef30:	4653      	mov	r3, sl
    ef32:	628b      	str	r3, [r1, #40]	; 0x28
    ef34:	e02d      	b.n	ef92 <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ef36:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    ef38:	464d      	mov	r5, r9
    ef3a:	422b      	tst	r3, r5
    ef3c:	d138      	bne.n	efb0 <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ef3e:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    ef40:	4213      	tst	r3, r2
    ef42:	d045      	beq.n	efd0 <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ef44:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ef46:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    ef48:	4213      	tst	r3, r2
    ef4a:	d0fc      	beq.n	ef46 <spi_read_buffer_wait+0x72>
    ef4c:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    ef4e:	4213      	tst	r3, r2
    ef50:	d040      	beq.n	efd4 <spi_read_buffer_wait+0x100>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ef52:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    ef54:	2500      	movs	r5, #0
    ef56:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ef58:	4213      	tst	r3, r2
    ef5a:	d002      	beq.n	ef62 <spi_read_buffer_wait+0x8e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ef5c:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    ef5e:	231e      	movs	r3, #30
    ef60:	9301      	str	r3, [sp, #4]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ef62:	7983      	ldrb	r3, [r0, #6]
    ef64:	2b01      	cmp	r3, #1
    ef66:	d027      	beq.n	efb8 <spi_read_buffer_wait+0xe4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ef68:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    ef6a:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    ef6c:	9901      	ldr	r1, [sp, #4]
    ef6e:	2900      	cmp	r1, #0
    ef70:	d137      	bne.n	efe2 <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    ef72:	1c75      	adds	r5, r6, #1
    ef74:	b2ad      	uxth	r5, r5
    ef76:	4661      	mov	r1, ip
    ef78:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ef7a:	7981      	ldrb	r1, [r0, #6]
    ef7c:	2901      	cmp	r1, #1
    ef7e:	d01f      	beq.n	efc0 <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    ef80:	002e      	movs	r6, r5
	while (length--) {
    ef82:	3c01      	subs	r4, #1
    ef84:	b2a4      	uxth	r4, r4
    ef86:	4b18      	ldr	r3, [pc, #96]	; (efe8 <spi_read_buffer_wait+0x114>)
    ef88:	429c      	cmp	r4, r3
    ef8a:	d01f      	beq.n	efcc <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    ef8c:	7943      	ldrb	r3, [r0, #5]
    ef8e:	2b01      	cmp	r3, #1
    ef90:	d0c7      	beq.n	ef22 <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    ef92:	7943      	ldrb	r3, [r0, #5]
    ef94:	2b00      	cmp	r3, #0
    ef96:	d1d5      	bne.n	ef44 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ef98:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ef9a:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    ef9c:	4213      	tst	r3, r2
    ef9e:	d1ca      	bne.n	ef36 <spi_read_buffer_wait+0x62>
    efa0:	4b12      	ldr	r3, [pc, #72]	; (efec <spi_read_buffer_wait+0x118>)
    efa2:	7e0d      	ldrb	r5, [r1, #24]
    efa4:	4215      	tst	r5, r2
    efa6:	d1c6      	bne.n	ef36 <spi_read_buffer_wait+0x62>
    efa8:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    efaa:	2b00      	cmp	r3, #0
    efac:	d1f9      	bne.n	efa2 <spi_read_buffer_wait+0xce>
    efae:	e7c2      	b.n	ef36 <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    efb0:	2302      	movs	r3, #2
    efb2:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    efb4:	2504      	movs	r5, #4
    efb6:	e00e      	b.n	efd6 <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    efb8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    efba:	05db      	lsls	r3, r3, #23
    efbc:	0ddb      	lsrs	r3, r3, #23
    efbe:	e7d5      	b.n	ef6c <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    efc0:	3602      	adds	r6, #2
    efc2:	b2b6      	uxth	r6, r6
    efc4:	0a1b      	lsrs	r3, r3, #8
    efc6:	4661      	mov	r1, ip
    efc8:	554b      	strb	r3, [r1, r5]
    efca:	e7da      	b.n	ef82 <spi_read_buffer_wait+0xae>
    efcc:	9d01      	ldr	r5, [sp, #4]
    efce:	e002      	b.n	efd6 <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    efd0:	2512      	movs	r5, #18
    efd2:	e000      	b.n	efd6 <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    efd4:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    efd6:	0028      	movs	r0, r5
    efd8:	b003      	add	sp, #12
    efda:	bc0c      	pop	{r2, r3}
    efdc:	4691      	mov	r9, r2
    efde:	469a      	mov	sl, r3
    efe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efe2:	9d01      	ldr	r5, [sp, #4]
    efe4:	e7f7      	b.n	efd6 <spi_read_buffer_wait+0x102>
    efe6:	46c0      	nop			; (mov r8, r8)
    efe8:	0000ffff 	.word	0x0000ffff
    efec:	00002710 	.word	0x00002710

0000eff0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    eff0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    eff2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    eff4:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    eff6:	2c01      	cmp	r4, #1
    eff8:	d001      	beq.n	effe <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    effa:	0018      	movs	r0, r3
    effc:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    effe:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    f000:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    f002:	2c00      	cmp	r4, #0
    f004:	d1f9      	bne.n	effa <spi_select_slave+0xa>
		if (select) {
    f006:	2a00      	cmp	r2, #0
    f008:	d058      	beq.n	f0bc <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    f00a:	784b      	ldrb	r3, [r1, #1]
    f00c:	2b00      	cmp	r3, #0
    f00e:	d044      	beq.n	f09a <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    f010:	6803      	ldr	r3, [r0, #0]
    f012:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    f014:	07db      	lsls	r3, r3, #31
    f016:	d410      	bmi.n	f03a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    f018:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    f01a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    f01c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    f01e:	2900      	cmp	r1, #0
    f020:	d104      	bne.n	f02c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    f022:	0953      	lsrs	r3, r2, #5
    f024:	01db      	lsls	r3, r3, #7
    f026:	492e      	ldr	r1, [pc, #184]	; (f0e0 <spi_select_slave+0xf0>)
    f028:	468c      	mov	ip, r1
    f02a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f02c:	211f      	movs	r1, #31
    f02e:	4011      	ands	r1, r2
    f030:	2201      	movs	r2, #1
    f032:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    f034:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    f036:	2305      	movs	r3, #5
    f038:	e7df      	b.n	effa <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    f03a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    f03c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    f03e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    f040:	2c00      	cmp	r4, #0
    f042:	d104      	bne.n	f04e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    f044:	0953      	lsrs	r3, r2, #5
    f046:	01db      	lsls	r3, r3, #7
    f048:	4c25      	ldr	r4, [pc, #148]	; (f0e0 <spi_select_slave+0xf0>)
    f04a:	46a4      	mov	ip, r4
    f04c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f04e:	241f      	movs	r4, #31
    f050:	4014      	ands	r4, r2
    f052:	2201      	movs	r2, #1
    f054:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    f056:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    f058:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    f05a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    f05c:	07d2      	lsls	r2, r2, #31
    f05e:	d501      	bpl.n	f064 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    f060:	788a      	ldrb	r2, [r1, #2]
    f062:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    f064:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    f066:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    f068:	2a00      	cmp	r2, #0
    f06a:	d1c6      	bne.n	effa <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    f06c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    f06e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    f070:	7e13      	ldrb	r3, [r2, #24]
    f072:	420b      	tst	r3, r1
    f074:	d0fc      	beq.n	f070 <spi_select_slave+0x80>
    f076:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    f078:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    f07a:	0749      	lsls	r1, r1, #29
    f07c:	d5bd      	bpl.n	effa <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    f07e:	8b53      	ldrh	r3, [r2, #26]
    f080:	075b      	lsls	r3, r3, #29
    f082:	d501      	bpl.n	f088 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    f084:	2304      	movs	r3, #4
    f086:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f088:	7983      	ldrb	r3, [r0, #6]
    f08a:	2b01      	cmp	r3, #1
    f08c:	d002      	beq.n	f094 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    f08e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f090:	2300      	movs	r3, #0
    f092:	e7b2      	b.n	effa <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    f094:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f096:	2300      	movs	r3, #0
    f098:	e7af      	b.n	effa <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    f09a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    f09c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    f09e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    f0a0:	2900      	cmp	r1, #0
    f0a2:	d104      	bne.n	f0ae <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    f0a4:	0953      	lsrs	r3, r2, #5
    f0a6:	01db      	lsls	r3, r3, #7
    f0a8:	490d      	ldr	r1, [pc, #52]	; (f0e0 <spi_select_slave+0xf0>)
    f0aa:	468c      	mov	ip, r1
    f0ac:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f0ae:	211f      	movs	r1, #31
    f0b0:	4011      	ands	r1, r2
    f0b2:	2201      	movs	r2, #1
    f0b4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    f0b6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    f0b8:	2300      	movs	r3, #0
    f0ba:	e79e      	b.n	effa <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    f0bc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    f0be:	09d1      	lsrs	r1, r2, #7
		return NULL;
    f0c0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    f0c2:	2900      	cmp	r1, #0
    f0c4:	d104      	bne.n	f0d0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    f0c6:	0953      	lsrs	r3, r2, #5
    f0c8:	01db      	lsls	r3, r3, #7
    f0ca:	4905      	ldr	r1, [pc, #20]	; (f0e0 <spi_select_slave+0xf0>)
    f0cc:	468c      	mov	ip, r1
    f0ce:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f0d0:	211f      	movs	r1, #31
    f0d2:	4011      	ands	r1, r2
    f0d4:	2201      	movs	r2, #1
    f0d6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    f0d8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    f0da:	2300      	movs	r3, #0
    f0dc:	e78d      	b.n	effa <spi_select_slave+0xa>
    f0de:	46c0      	nop			; (mov r8, r8)
    f0e0:	41004400 	.word	0x41004400

0000f0e4 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    f0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f0e6:	46de      	mov	lr, fp
    f0e8:	4657      	mov	r7, sl
    f0ea:	464e      	mov	r6, r9
    f0ec:	4645      	mov	r5, r8
    f0ee:	b5e0      	push	{r5, r6, r7, lr}
    f0f0:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    f0f2:	2338      	movs	r3, #56	; 0x38
    f0f4:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    f0f6:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    f0f8:	2c05      	cmp	r4, #5
    f0fa:	d002      	beq.n	f102 <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    f0fc:	3312      	adds	r3, #18
	if (length == 0) {
    f0fe:	2a00      	cmp	r2, #0
    f100:	d107      	bne.n	f112 <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    f102:	0018      	movs	r0, r3
    f104:	b003      	add	sp, #12
    f106:	bc3c      	pop	{r2, r3, r4, r5}
    f108:	4690      	mov	r8, r2
    f10a:	4699      	mov	r9, r3
    f10c:	46a2      	mov	sl, r4
    f10e:	46ab      	mov	fp, r5
    f110:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    f112:	7943      	ldrb	r3, [r0, #5]
    f114:	2b00      	cmp	r3, #0
    f116:	d103      	bne.n	f120 <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    f118:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    f11a:	7e1c      	ldrb	r4, [r3, #24]
    f11c:	07a4      	lsls	r4, r4, #30
    f11e:	d40a      	bmi.n	f136 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    f120:	4693      	mov	fp, r2
    f122:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    f124:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    f126:	2502      	movs	r5, #2
    f128:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    f12a:	3502      	adds	r5, #2
    f12c:	46a8      	mov	r8, r5
    f12e:	3a01      	subs	r2, #1
    f130:	b292      	uxth	r2, r2
    f132:	468a      	mov	sl, r1
    f134:	e023      	b.n	f17e <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    f136:	2402      	movs	r4, #2
    f138:	761c      	strb	r4, [r3, #24]
    f13a:	e7f1      	b.n	f120 <spi_write_buffer_wait+0x3c>
    f13c:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    f13e:	4661      	mov	r1, ip
    f140:	420d      	tst	r5, r1
    f142:	d12e      	bne.n	f1a2 <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    f144:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    f146:	421d      	tst	r5, r3
    f148:	d100      	bne.n	f14c <spi_write_buffer_wait+0x68>
    f14a:	e0c2      	b.n	f2d2 <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    f14c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    f14e:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    f150:	421d      	tst	r5, r3
    f152:	d0fc      	beq.n	f14e <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    f154:	1c67      	adds	r7, r4, #1
    f156:	b2bf      	uxth	r7, r7
    f158:	4651      	mov	r1, sl
    f15a:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f15c:	7981      	ldrb	r1, [r0, #6]
    f15e:	2901      	cmp	r1, #1
    f160:	d023      	beq.n	f1aa <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    f162:	b2ad      	uxth	r5, r5
    f164:	003c      	movs	r4, r7
    f166:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    f168:	421f      	tst	r7, r3
    f16a:	d002      	beq.n	f172 <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    f16c:	05ed      	lsls	r5, r5, #23
    f16e:	0ded      	lsrs	r5, r5, #23
    f170:	62b5      	str	r5, [r6, #40]	; 0x28
    f172:	1e55      	subs	r5, r2, #1
    f174:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    f176:	79c6      	ldrb	r6, [r0, #7]
    f178:	2e00      	cmp	r6, #0
    f17a:	d11d      	bne.n	f1b8 <spi_write_buffer_wait+0xd4>
    f17c:	002a      	movs	r2, r5
	while (length--) {
    f17e:	4d5a      	ldr	r5, [pc, #360]	; (f2e8 <spi_write_buffer_wait+0x204>)
    f180:	42aa      	cmp	r2, r5
    f182:	d070      	beq.n	f266 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    f184:	7945      	ldrb	r5, [r0, #5]
    f186:	2d00      	cmp	r5, #0
    f188:	d1e0      	bne.n	f14c <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    f18a:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    f18c:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    f18e:	421d      	tst	r5, r3
    f190:	d1d4      	bne.n	f13c <spi_write_buffer_wait+0x58>
    f192:	4d56      	ldr	r5, [pc, #344]	; (f2ec <spi_write_buffer_wait+0x208>)
    f194:	7e37      	ldrb	r7, [r6, #24]
    f196:	421f      	tst	r7, r3
    f198:	d1d0      	bne.n	f13c <spi_write_buffer_wait+0x58>
    f19a:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    f19c:	2d00      	cmp	r5, #0
    f19e:	d1f9      	bne.n	f194 <spi_write_buffer_wait+0xb0>
    f1a0:	e7cc      	b.n	f13c <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    f1a2:	2302      	movs	r3, #2
    f1a4:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    f1a6:	3302      	adds	r3, #2
    f1a8:	e7ab      	b.n	f102 <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    f1aa:	3402      	adds	r4, #2
    f1ac:	b2a4      	uxth	r4, r4
    f1ae:	4651      	mov	r1, sl
    f1b0:	5dcf      	ldrb	r7, [r1, r7]
    f1b2:	023f      	lsls	r7, r7, #8
    f1b4:	433d      	orrs	r5, r7
    f1b6:	e7d6      	b.n	f166 <spi_write_buffer_wait+0x82>
    f1b8:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    f1ba:	7945      	ldrb	r5, [r0, #5]
    f1bc:	2d00      	cmp	r5, #0
    f1be:	d137      	bne.n	f230 <spi_write_buffer_wait+0x14c>
    f1c0:	4d4b      	ldr	r5, [pc, #300]	; (f2f0 <spi_write_buffer_wait+0x20c>)
    f1c2:	9101      	str	r1, [sp, #4]
    f1c4:	e012      	b.n	f1ec <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    f1c6:	3402      	adds	r4, #2
    f1c8:	b2a4      	uxth	r4, r4
    f1ca:	4649      	mov	r1, r9
    f1cc:	9f01      	ldr	r7, [sp, #4]
    f1ce:	5c79      	ldrb	r1, [r7, r1]
    f1d0:	0209      	lsls	r1, r1, #8
    f1d2:	9f00      	ldr	r7, [sp, #0]
    f1d4:	430f      	orrs	r7, r1
    f1d6:	e01b      	b.n	f210 <spi_write_buffer_wait+0x12c>
						length--;
    f1d8:	3a01      	subs	r2, #1
    f1da:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    f1dc:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    f1de:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    f1e0:	4641      	mov	r1, r8
    f1e2:	420f      	tst	r7, r1
    f1e4:	d11b      	bne.n	f21e <spi_write_buffer_wait+0x13a>
    f1e6:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    f1e8:	2d00      	cmp	r5, #0
    f1ea:	d018      	beq.n	f21e <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    f1ec:	2a00      	cmp	r2, #0
    f1ee:	d0f5      	beq.n	f1dc <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    f1f0:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    f1f2:	7e37      	ldrb	r7, [r6, #24]
    f1f4:	421f      	tst	r7, r3
    f1f6:	d0f1      	beq.n	f1dc <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    f1f8:	1c67      	adds	r7, r4, #1
    f1fa:	b2b9      	uxth	r1, r7
    f1fc:	4689      	mov	r9, r1
    f1fe:	9901      	ldr	r1, [sp, #4]
    f200:	5d09      	ldrb	r1, [r1, r4]
    f202:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f204:	7981      	ldrb	r1, [r0, #6]
    f206:	2901      	cmp	r1, #1
    f208:	d0dd      	beq.n	f1c6 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    f20a:	4669      	mov	r1, sp
    f20c:	880f      	ldrh	r7, [r1, #0]
    f20e:	464c      	mov	r4, r9
    f210:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    f212:	4219      	tst	r1, r3
    f214:	d0e0      	beq.n	f1d8 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    f216:	05ff      	lsls	r7, r7, #23
    f218:	0dff      	lsrs	r7, r7, #23
    f21a:	62b7      	str	r7, [r6, #40]	; 0x28
    f21c:	e7dc      	b.n	f1d8 <spi_write_buffer_wait+0xf4>
    f21e:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    f220:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    f222:	4667      	mov	r7, ip
    f224:	423d      	tst	r5, r7
    f226:	d118      	bne.n	f25a <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    f228:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    f22a:	4646      	mov	r6, r8
    f22c:	4235      	tst	r5, r6
    f22e:	d052      	beq.n	f2d6 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    f230:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    f232:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    f234:	4647      	mov	r7, r8
    f236:	423d      	tst	r5, r7
    f238:	d0fb      	beq.n	f232 <spi_write_buffer_wait+0x14e>
    f23a:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    f23c:	423d      	tst	r5, r7
    f23e:	d007      	beq.n	f250 <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    f240:	8b75      	ldrh	r5, [r6, #26]
    f242:	423d      	tst	r5, r7
    f244:	d000      	beq.n	f248 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    f246:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f248:	7985      	ldrb	r5, [r0, #6]
    f24a:	2d01      	cmp	r5, #1
    f24c:	d009      	beq.n	f262 <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    f24e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    f250:	465d      	mov	r5, fp
    f252:	3d01      	subs	r5, #1
    f254:	b2ad      	uxth	r5, r5
    f256:	46ab      	mov	fp, r5
    f258:	e769      	b.n	f12e <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    f25a:	2302      	movs	r3, #2
    f25c:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    f25e:	3302      	adds	r3, #2
    f260:	e74f      	b.n	f102 <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    f262:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    f264:	e7f4      	b.n	f250 <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    f266:	7943      	ldrb	r3, [r0, #5]
    f268:	2b01      	cmp	r3, #1
    f26a:	d00b      	beq.n	f284 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    f26c:	2b00      	cmp	r3, #0
    f26e:	d134      	bne.n	f2da <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    f270:	79c2      	ldrb	r2, [r0, #7]
    f272:	2a00      	cmp	r2, #0
    f274:	d100      	bne.n	f278 <spi_write_buffer_wait+0x194>
    f276:	e744      	b.n	f102 <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    f278:	2404      	movs	r4, #4
			while (flush_length) {
    f27a:	465b      	mov	r3, fp
    f27c:	465d      	mov	r5, fp
    f27e:	2b00      	cmp	r3, #0
    f280:	d119      	bne.n	f2b6 <spi_write_buffer_wait+0x1d2>
    f282:	e73e      	b.n	f102 <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    f284:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    f286:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    f288:	7e0b      	ldrb	r3, [r1, #24]
    f28a:	4213      	tst	r3, r2
    f28c:	d0fc      	beq.n	f288 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    f28e:	2300      	movs	r3, #0
    f290:	e737      	b.n	f102 <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    f292:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    f294:	4223      	tst	r3, r4
    f296:	d022      	beq.n	f2de <spi_write_buffer_wait+0x1fa>
    f298:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    f29a:	4223      	tst	r3, r4
    f29c:	d007      	beq.n	f2ae <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    f29e:	8b4b      	ldrh	r3, [r1, #26]
    f2a0:	4223      	tst	r3, r4
    f2a2:	d000      	beq.n	f2a6 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    f2a4:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f2a6:	7983      	ldrb	r3, [r0, #6]
    f2a8:	2b01      	cmp	r3, #1
    f2aa:	d010      	beq.n	f2ce <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    f2ac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    f2ae:	3d01      	subs	r5, #1
    f2b0:	b2ad      	uxth	r5, r5
			while (flush_length) {
    f2b2:	2d00      	cmp	r5, #0
    f2b4:	d015      	beq.n	f2e2 <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    f2b6:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    f2b8:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    f2ba:	4223      	tst	r3, r4
    f2bc:	d1e9      	bne.n	f292 <spi_write_buffer_wait+0x1ae>
    f2be:	4b0b      	ldr	r3, [pc, #44]	; (f2ec <spi_write_buffer_wait+0x208>)
    f2c0:	7e0a      	ldrb	r2, [r1, #24]
    f2c2:	4222      	tst	r2, r4
    f2c4:	d1e5      	bne.n	f292 <spi_write_buffer_wait+0x1ae>
    f2c6:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    f2c8:	2b00      	cmp	r3, #0
    f2ca:	d1f9      	bne.n	f2c0 <spi_write_buffer_wait+0x1dc>
    f2cc:	e7e1      	b.n	f292 <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    f2ce:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    f2d0:	e7ed      	b.n	f2ae <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    f2d2:	2312      	movs	r3, #18
    f2d4:	e715      	b.n	f102 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    f2d6:	2312      	movs	r3, #18
    f2d8:	e713      	b.n	f102 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    f2da:	2300      	movs	r3, #0
    f2dc:	e711      	b.n	f102 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    f2de:	2312      	movs	r3, #18
    f2e0:	e70f      	b.n	f102 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    f2e2:	2300      	movs	r3, #0
    f2e4:	e70d      	b.n	f102 <spi_write_buffer_wait+0x1e>
    f2e6:	46c0      	nop			; (mov r8, r8)
    f2e8:	0000ffff 	.word	0x0000ffff
    f2ec:	00002710 	.word	0x00002710
    f2f0:	00002711 	.word	0x00002711

0000f2f4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    f2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    f2f6:	0080      	lsls	r0, r0, #2
    f2f8:	4b85      	ldr	r3, [pc, #532]	; (f510 <_spi_interrupt_handler+0x21c>)
    f2fa:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    f2fc:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    f2fe:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    f300:	5ce3      	ldrb	r3, [r4, r3]
    f302:	2236      	movs	r2, #54	; 0x36
    f304:	5ca7      	ldrb	r7, [r4, r2]
    f306:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    f308:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    f30a:	7db5      	ldrb	r5, [r6, #22]
    f30c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    f30e:	07eb      	lsls	r3, r5, #31
    f310:	d52e      	bpl.n	f370 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    f312:	7963      	ldrb	r3, [r4, #5]
    f314:	2b01      	cmp	r3, #1
    f316:	d025      	beq.n	f364 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    f318:	2b00      	cmp	r3, #0
    f31a:	d129      	bne.n	f370 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    f31c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    f31e:	2b00      	cmp	r3, #0
    f320:	d026      	beq.n	f370 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    f322:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    f324:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f326:	7813      	ldrb	r3, [r2, #0]
    f328:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    f32a:	1c50      	adds	r0, r2, #1
    f32c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f32e:	79a0      	ldrb	r0, [r4, #6]
    f330:	2801      	cmp	r0, #1
    f332:	d100      	bne.n	f336 <_spi_interrupt_handler+0x42>
    f334:	e069      	b.n	f40a <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    f336:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    f338:	05db      	lsls	r3, r3, #23
    f33a:	0ddb      	lsrs	r3, r3, #23
    f33c:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    f33e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    f340:	3b01      	subs	r3, #1
    f342:	b29b      	uxth	r3, r3
    f344:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    f346:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    f348:	b29b      	uxth	r3, r3
    f34a:	2b00      	cmp	r3, #0
    f34c:	d110      	bne.n	f370 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    f34e:	3301      	adds	r3, #1
    f350:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    f352:	7a63      	ldrb	r3, [r4, #9]
    f354:	2b01      	cmp	r3, #1
    f356:	d10b      	bne.n	f370 <_spi_interrupt_handler+0x7c>
    f358:	79e3      	ldrb	r3, [r4, #7]
    f35a:	2b00      	cmp	r3, #0
    f35c:	d108      	bne.n	f370 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    f35e:	3302      	adds	r3, #2
    f360:	75b3      	strb	r3, [r6, #22]
    f362:	e005      	b.n	f370 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    f364:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    f366:	2b00      	cmp	r3, #0
    f368:	d03e      	beq.n	f3e8 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    f36a:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    f36c:	2b00      	cmp	r3, #0
    f36e:	d1d8      	bne.n	f322 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    f370:	076b      	lsls	r3, r5, #29
    f372:	d511      	bpl.n	f398 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    f374:	8b73      	ldrh	r3, [r6, #26]
    f376:	075b      	lsls	r3, r3, #29
    f378:	d551      	bpl.n	f41e <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    f37a:	7a63      	ldrb	r3, [r4, #9]
    f37c:	2b01      	cmp	r3, #1
    f37e:	d008      	beq.n	f392 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    f380:	221e      	movs	r2, #30
    f382:	2338      	movs	r3, #56	; 0x38
    f384:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    f386:	3b35      	subs	r3, #53	; 0x35
    f388:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    f38a:	3302      	adds	r3, #2
    f38c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    f38e:	073b      	lsls	r3, r7, #28
    f390:	d441      	bmi.n	f416 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    f392:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    f394:	2304      	movs	r3, #4
    f396:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    f398:	07ab      	lsls	r3, r5, #30
    f39a:	d515      	bpl.n	f3c8 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    f39c:	7963      	ldrb	r3, [r4, #5]
    f39e:	2b00      	cmp	r3, #0
    f3a0:	d10e      	bne.n	f3c0 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    f3a2:	3307      	adds	r3, #7
    f3a4:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    f3a6:	3b05      	subs	r3, #5
    f3a8:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    f3aa:	3301      	adds	r3, #1
    f3ac:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    f3ae:	2300      	movs	r3, #0
    f3b0:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    f3b2:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    f3b4:	3338      	adds	r3, #56	; 0x38
    f3b6:	2200      	movs	r2, #0
    f3b8:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    f3ba:	06fb      	lsls	r3, r7, #27
    f3bc:	d500      	bpl.n	f3c0 <_spi_interrupt_handler+0xcc>
    f3be:	e07f      	b.n	f4c0 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    f3c0:	7963      	ldrb	r3, [r4, #5]
    f3c2:	2b01      	cmp	r3, #1
    f3c4:	d100      	bne.n	f3c8 <_spi_interrupt_handler+0xd4>
    f3c6:	e07f      	b.n	f4c8 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    f3c8:	072b      	lsls	r3, r5, #28
    f3ca:	d508      	bpl.n	f3de <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    f3cc:	7963      	ldrb	r3, [r4, #5]
    f3ce:	2b00      	cmp	r3, #0
    f3d0:	d105      	bne.n	f3de <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    f3d2:	3308      	adds	r3, #8
    f3d4:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    f3d6:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    f3d8:	06bb      	lsls	r3, r7, #26
    f3da:	d500      	bpl.n	f3de <_spi_interrupt_handler+0xea>
    f3dc:	e08a      	b.n	f4f4 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    f3de:	b26d      	sxtb	r5, r5
    f3e0:	2d00      	cmp	r5, #0
    f3e2:	da00      	bge.n	f3e6 <_spi_interrupt_handler+0xf2>
    f3e4:	e08a      	b.n	f4fc <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    f3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    f3e8:	4b4a      	ldr	r3, [pc, #296]	; (f514 <_spi_interrupt_handler+0x220>)
    f3ea:	881b      	ldrh	r3, [r3, #0]
    f3ec:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    f3ee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    f3f0:	3b01      	subs	r3, #1
    f3f2:	b29b      	uxth	r3, r3
    f3f4:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    f3f6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    f3f8:	b29b      	uxth	r3, r3
    f3fa:	2b00      	cmp	r3, #0
    f3fc:	d101      	bne.n	f402 <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    f3fe:	3301      	adds	r3, #1
    f400:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    f402:	7963      	ldrb	r3, [r4, #5]
		if (0
    f404:	2b01      	cmp	r3, #1
    f406:	d0b0      	beq.n	f36a <_spi_interrupt_handler+0x76>
    f408:	e786      	b.n	f318 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    f40a:	7850      	ldrb	r0, [r2, #1]
    f40c:	0200      	lsls	r0, r0, #8
    f40e:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    f410:	3202      	adds	r2, #2
    f412:	62e2      	str	r2, [r4, #44]	; 0x2c
    f414:	e790      	b.n	f338 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    f416:	0020      	movs	r0, r4
    f418:	69a3      	ldr	r3, [r4, #24]
    f41a:	4798      	blx	r3
    f41c:	e7b9      	b.n	f392 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    f41e:	7a63      	ldrb	r3, [r4, #9]
    f420:	2b01      	cmp	r3, #1
    f422:	d027      	beq.n	f474 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    f424:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    f426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f428:	05db      	lsls	r3, r3, #23
    f42a:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    f42c:	b2da      	uxtb	r2, r3
    f42e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f430:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    f432:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f434:	1c51      	adds	r1, r2, #1
    f436:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f438:	79a1      	ldrb	r1, [r4, #6]
    f43a:	2901      	cmp	r1, #1
    f43c:	d033      	beq.n	f4a6 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    f43e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f440:	3b01      	subs	r3, #1
    f442:	b29b      	uxth	r3, r3
    f444:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    f446:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f448:	b29b      	uxth	r3, r3
    f44a:	2b00      	cmp	r3, #0
    f44c:	d1a4      	bne.n	f398 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    f44e:	2200      	movs	r2, #0
    f450:	3338      	adds	r3, #56	; 0x38
    f452:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    f454:	3b34      	subs	r3, #52	; 0x34
    f456:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    f458:	7a63      	ldrb	r3, [r4, #9]
    f45a:	2b02      	cmp	r3, #2
    f45c:	d029      	beq.n	f4b2 <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    f45e:	7a63      	ldrb	r3, [r4, #9]
    f460:	2b00      	cmp	r3, #0
    f462:	d000      	beq.n	f466 <_spi_interrupt_handler+0x172>
    f464:	e798      	b.n	f398 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    f466:	07bb      	lsls	r3, r7, #30
    f468:	d400      	bmi.n	f46c <_spi_interrupt_handler+0x178>
    f46a:	e795      	b.n	f398 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    f46c:	0020      	movs	r0, r4
    f46e:	6923      	ldr	r3, [r4, #16]
    f470:	4798      	blx	r3
    f472:	e791      	b.n	f398 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    f474:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    f476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    f478:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    f47a:	3b01      	subs	r3, #1
    f47c:	b29b      	uxth	r3, r3
    f47e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    f480:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    f482:	b29b      	uxth	r3, r3
    f484:	2b00      	cmp	r3, #0
    f486:	d000      	beq.n	f48a <_spi_interrupt_handler+0x196>
    f488:	e786      	b.n	f398 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    f48a:	3304      	adds	r3, #4
    f48c:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    f48e:	2200      	movs	r2, #0
    f490:	3334      	adds	r3, #52	; 0x34
    f492:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    f494:	3b35      	subs	r3, #53	; 0x35
    f496:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    f498:	07fb      	lsls	r3, r7, #31
    f49a:	d400      	bmi.n	f49e <_spi_interrupt_handler+0x1aa>
    f49c:	e77c      	b.n	f398 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    f49e:	0020      	movs	r0, r4
    f4a0:	68e3      	ldr	r3, [r4, #12]
    f4a2:	4798      	blx	r3
    f4a4:	e778      	b.n	f398 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    f4a6:	0a1b      	lsrs	r3, r3, #8
    f4a8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    f4aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f4ac:	3301      	adds	r3, #1
    f4ae:	62a3      	str	r3, [r4, #40]	; 0x28
    f4b0:	e7c5      	b.n	f43e <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    f4b2:	077b      	lsls	r3, r7, #29
    f4b4:	d400      	bmi.n	f4b8 <_spi_interrupt_handler+0x1c4>
    f4b6:	e76f      	b.n	f398 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    f4b8:	0020      	movs	r0, r4
    f4ba:	6963      	ldr	r3, [r4, #20]
    f4bc:	4798      	blx	r3
    f4be:	e76b      	b.n	f398 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    f4c0:	0020      	movs	r0, r4
    f4c2:	69e3      	ldr	r3, [r4, #28]
    f4c4:	4798      	blx	r3
    f4c6:	e77b      	b.n	f3c0 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    f4c8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    f4ca:	2b01      	cmp	r3, #1
    f4cc:	d000      	beq.n	f4d0 <_spi_interrupt_handler+0x1dc>
    f4ce:	e786      	b.n	f3de <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    f4d0:	79e3      	ldrb	r3, [r4, #7]
    f4d2:	2b00      	cmp	r3, #0
    f4d4:	d000      	beq.n	f4d8 <_spi_interrupt_handler+0x1e4>
    f4d6:	e782      	b.n	f3de <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    f4d8:	3302      	adds	r3, #2
    f4da:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    f4dc:	3301      	adds	r3, #1
    f4de:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    f4e0:	2200      	movs	r2, #0
    f4e2:	3335      	adds	r3, #53	; 0x35
    f4e4:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    f4e6:	07fb      	lsls	r3, r7, #31
    f4e8:	d400      	bmi.n	f4ec <_spi_interrupt_handler+0x1f8>
    f4ea:	e76d      	b.n	f3c8 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    f4ec:	0020      	movs	r0, r4
    f4ee:	68e3      	ldr	r3, [r4, #12]
    f4f0:	4798      	blx	r3
    f4f2:	e769      	b.n	f3c8 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    f4f4:	0020      	movs	r0, r4
    f4f6:	6a23      	ldr	r3, [r4, #32]
    f4f8:	4798      	blx	r3
    f4fa:	e770      	b.n	f3de <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    f4fc:	2380      	movs	r3, #128	; 0x80
    f4fe:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    f500:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    f502:	067b      	lsls	r3, r7, #25
    f504:	d400      	bmi.n	f508 <_spi_interrupt_handler+0x214>
    f506:	e76e      	b.n	f3e6 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    f508:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f50a:	0020      	movs	r0, r4
    f50c:	4798      	blx	r3
}
    f50e:	e76a      	b.n	f3e6 <_spi_interrupt_handler+0xf2>
    f510:	20000578 	.word	0x20000578
    f514:	20000590 	.word	0x20000590

0000f518 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    f518:	b5f0      	push	{r4, r5, r6, r7, lr}
    f51a:	46de      	mov	lr, fp
    f51c:	4657      	mov	r7, sl
    f51e:	464e      	mov	r6, r9
    f520:	4645      	mov	r5, r8
    f522:	b5e0      	push	{r5, r6, r7, lr}
    f524:	b091      	sub	sp, #68	; 0x44
    f526:	0005      	movs	r5, r0
    f528:	000c      	movs	r4, r1
    f52a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    f52c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f52e:	0008      	movs	r0, r1
    f530:	4bbc      	ldr	r3, [pc, #752]	; (f824 <usart_init+0x30c>)
    f532:	4798      	blx	r3
    f534:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    f536:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    f538:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    f53a:	07db      	lsls	r3, r3, #31
    f53c:	d506      	bpl.n	f54c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    f53e:	b011      	add	sp, #68	; 0x44
    f540:	bc3c      	pop	{r2, r3, r4, r5}
    f542:	4690      	mov	r8, r2
    f544:	4699      	mov	r9, r3
    f546:	46a2      	mov	sl, r4
    f548:	46ab      	mov	fp, r5
    f54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    f54c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    f54e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    f550:	079b      	lsls	r3, r3, #30
    f552:	d4f4      	bmi.n	f53e <usart_init+0x26>
    f554:	49b4      	ldr	r1, [pc, #720]	; (f828 <usart_init+0x310>)
    f556:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    f558:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    f55a:	2301      	movs	r3, #1
    f55c:	40bb      	lsls	r3, r7
    f55e:	4303      	orrs	r3, r0
    f560:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    f562:	a90f      	add	r1, sp, #60	; 0x3c
    f564:	272d      	movs	r7, #45	; 0x2d
    f566:	5df3      	ldrb	r3, [r6, r7]
    f568:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    f56a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    f56c:	b2d3      	uxtb	r3, r2
    f56e:	9302      	str	r3, [sp, #8]
    f570:	0018      	movs	r0, r3
    f572:	4bae      	ldr	r3, [pc, #696]	; (f82c <usart_init+0x314>)
    f574:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    f576:	9802      	ldr	r0, [sp, #8]
    f578:	4bad      	ldr	r3, [pc, #692]	; (f830 <usart_init+0x318>)
    f57a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    f57c:	5df0      	ldrb	r0, [r6, r7]
    f57e:	2100      	movs	r1, #0
    f580:	4bac      	ldr	r3, [pc, #688]	; (f834 <usart_init+0x31c>)
    f582:	4798      	blx	r3
	module->character_size = config->character_size;
    f584:	7af3      	ldrb	r3, [r6, #11]
    f586:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    f588:	2324      	movs	r3, #36	; 0x24
    f58a:	5cf3      	ldrb	r3, [r6, r3]
    f58c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    f58e:	2325      	movs	r3, #37	; 0x25
    f590:	5cf3      	ldrb	r3, [r6, r3]
    f592:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    f594:	7ef3      	ldrb	r3, [r6, #27]
    f596:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    f598:	7f33      	ldrb	r3, [r6, #28]
    f59a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    f59c:	682b      	ldr	r3, [r5, #0]
    f59e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f5a0:	0018      	movs	r0, r3
    f5a2:	4ba0      	ldr	r3, [pc, #640]	; (f824 <usart_init+0x30c>)
    f5a4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    f5a6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    f5a8:	2200      	movs	r2, #0
    f5aa:	230e      	movs	r3, #14
    f5ac:	a906      	add	r1, sp, #24
    f5ae:	468c      	mov	ip, r1
    f5b0:	4463      	add	r3, ip
    f5b2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    f5b4:	8a32      	ldrh	r2, [r6, #16]
    f5b6:	9202      	str	r2, [sp, #8]
    f5b8:	2380      	movs	r3, #128	; 0x80
    f5ba:	01db      	lsls	r3, r3, #7
    f5bc:	429a      	cmp	r2, r3
    f5be:	d100      	bne.n	f5c2 <usart_init+0xaa>
    f5c0:	e09e      	b.n	f700 <usart_init+0x1e8>
    f5c2:	d90f      	bls.n	f5e4 <usart_init+0xcc>
    f5c4:	23c0      	movs	r3, #192	; 0xc0
    f5c6:	01db      	lsls	r3, r3, #7
    f5c8:	9a02      	ldr	r2, [sp, #8]
    f5ca:	429a      	cmp	r2, r3
    f5cc:	d100      	bne.n	f5d0 <usart_init+0xb8>
    f5ce:	e092      	b.n	f6f6 <usart_init+0x1de>
    f5d0:	2380      	movs	r3, #128	; 0x80
    f5d2:	021b      	lsls	r3, r3, #8
    f5d4:	429a      	cmp	r2, r3
    f5d6:	d000      	beq.n	f5da <usart_init+0xc2>
    f5d8:	e11f      	b.n	f81a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    f5da:	2303      	movs	r3, #3
    f5dc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    f5de:	2300      	movs	r3, #0
    f5e0:	9307      	str	r3, [sp, #28]
    f5e2:	e008      	b.n	f5f6 <usart_init+0xde>
	switch (config->sample_rate) {
    f5e4:	2380      	movs	r3, #128	; 0x80
    f5e6:	019b      	lsls	r3, r3, #6
    f5e8:	429a      	cmp	r2, r3
    f5ea:	d000      	beq.n	f5ee <usart_init+0xd6>
    f5ec:	e115      	b.n	f81a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    f5ee:	2310      	movs	r3, #16
    f5f0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    f5f2:	3b0f      	subs	r3, #15
    f5f4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    f5f6:	6833      	ldr	r3, [r6, #0]
    f5f8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    f5fa:	68f3      	ldr	r3, [r6, #12]
    f5fc:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    f5fe:	6973      	ldr	r3, [r6, #20]
    f600:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    f602:	7e33      	ldrb	r3, [r6, #24]
    f604:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    f606:	2326      	movs	r3, #38	; 0x26
    f608:	5cf3      	ldrb	r3, [r6, r3]
    f60a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    f60c:	6873      	ldr	r3, [r6, #4]
    f60e:	4699      	mov	r9, r3
	switch (transfer_mode)
    f610:	2b00      	cmp	r3, #0
    f612:	d100      	bne.n	f616 <usart_init+0xfe>
    f614:	e0a0      	b.n	f758 <usart_init+0x240>
    f616:	2380      	movs	r3, #128	; 0x80
    f618:	055b      	lsls	r3, r3, #21
    f61a:	4599      	cmp	r9, r3
    f61c:	d100      	bne.n	f620 <usart_init+0x108>
    f61e:	e084      	b.n	f72a <usart_init+0x212>
	if(config->encoding_format_enable) {
    f620:	7e73      	ldrb	r3, [r6, #25]
    f622:	2b00      	cmp	r3, #0
    f624:	d002      	beq.n	f62c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    f626:	7eb3      	ldrb	r3, [r6, #26]
    f628:	4642      	mov	r2, r8
    f62a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    f62c:	682a      	ldr	r2, [r5, #0]
    f62e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    f630:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    f632:	2b00      	cmp	r3, #0
    f634:	d1fc      	bne.n	f630 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    f636:	330e      	adds	r3, #14
    f638:	aa06      	add	r2, sp, #24
    f63a:	4694      	mov	ip, r2
    f63c:	4463      	add	r3, ip
    f63e:	881b      	ldrh	r3, [r3, #0]
    f640:	4642      	mov	r2, r8
    f642:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    f644:	9b05      	ldr	r3, [sp, #20]
    f646:	9a03      	ldr	r2, [sp, #12]
    f648:	4313      	orrs	r3, r2
    f64a:	9a04      	ldr	r2, [sp, #16]
    f64c:	4313      	orrs	r3, r2
    f64e:	464a      	mov	r2, r9
    f650:	4313      	orrs	r3, r2
    f652:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    f654:	465b      	mov	r3, fp
    f656:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    f658:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    f65a:	4653      	mov	r3, sl
    f65c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    f65e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    f660:	2327      	movs	r3, #39	; 0x27
    f662:	5cf3      	ldrb	r3, [r6, r3]
    f664:	2b00      	cmp	r3, #0
    f666:	d101      	bne.n	f66c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    f668:	3304      	adds	r3, #4
    f66a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    f66c:	7e73      	ldrb	r3, [r6, #25]
    f66e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    f670:	7f32      	ldrb	r2, [r6, #28]
    f672:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    f674:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    f676:	7f72      	ldrb	r2, [r6, #29]
    f678:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    f67a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    f67c:	2224      	movs	r2, #36	; 0x24
    f67e:	5cb2      	ldrb	r2, [r6, r2]
    f680:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    f682:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    f684:	2225      	movs	r2, #37	; 0x25
    f686:	5cb2      	ldrb	r2, [r6, r2]
    f688:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    f68a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    f68c:	7ab1      	ldrb	r1, [r6, #10]
    f68e:	7af2      	ldrb	r2, [r6, #11]
    f690:	4311      	orrs	r1, r2
    f692:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    f694:	8933      	ldrh	r3, [r6, #8]
    f696:	2bff      	cmp	r3, #255	; 0xff
    f698:	d100      	bne.n	f69c <usart_init+0x184>
    f69a:	e081      	b.n	f7a0 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    f69c:	2280      	movs	r2, #128	; 0x80
    f69e:	0452      	lsls	r2, r2, #17
    f6a0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    f6a2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    f6a4:	232c      	movs	r3, #44	; 0x2c
    f6a6:	5cf3      	ldrb	r3, [r6, r3]
    f6a8:	2b00      	cmp	r3, #0
    f6aa:	d103      	bne.n	f6b4 <usart_init+0x19c>
    f6ac:	4b62      	ldr	r3, [pc, #392]	; (f838 <usart_init+0x320>)
    f6ae:	789b      	ldrb	r3, [r3, #2]
    f6b0:	079b      	lsls	r3, r3, #30
    f6b2:	d501      	bpl.n	f6b8 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    f6b4:	2380      	movs	r3, #128	; 0x80
    f6b6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    f6b8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    f6ba:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    f6bc:	2b00      	cmp	r3, #0
    f6be:	d1fc      	bne.n	f6ba <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    f6c0:	4643      	mov	r3, r8
    f6c2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    f6c4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    f6c6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    f6c8:	2b00      	cmp	r3, #0
    f6ca:	d1fc      	bne.n	f6c6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    f6cc:	4643      	mov	r3, r8
    f6ce:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    f6d0:	ab0e      	add	r3, sp, #56	; 0x38
    f6d2:	2280      	movs	r2, #128	; 0x80
    f6d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    f6d6:	2200      	movs	r2, #0
    f6d8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    f6da:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    f6dc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    f6de:	6b33      	ldr	r3, [r6, #48]	; 0x30
    f6e0:	930a      	str	r3, [sp, #40]	; 0x28
    f6e2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    f6e4:	930b      	str	r3, [sp, #44]	; 0x2c
    f6e6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    f6e8:	930c      	str	r3, [sp, #48]	; 0x30
    f6ea:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    f6ec:	9302      	str	r3, [sp, #8]
    f6ee:	930d      	str	r3, [sp, #52]	; 0x34
    f6f0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    f6f2:	ae0a      	add	r6, sp, #40	; 0x28
    f6f4:	e063      	b.n	f7be <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    f6f6:	2308      	movs	r3, #8
    f6f8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    f6fa:	3b07      	subs	r3, #7
    f6fc:	9307      	str	r3, [sp, #28]
    f6fe:	e77a      	b.n	f5f6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    f700:	6833      	ldr	r3, [r6, #0]
    f702:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    f704:	68f3      	ldr	r3, [r6, #12]
    f706:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    f708:	6973      	ldr	r3, [r6, #20]
    f70a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    f70c:	7e33      	ldrb	r3, [r6, #24]
    f70e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    f710:	2326      	movs	r3, #38	; 0x26
    f712:	5cf3      	ldrb	r3, [r6, r3]
    f714:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    f716:	6873      	ldr	r3, [r6, #4]
    f718:	4699      	mov	r9, r3
	switch (transfer_mode)
    f71a:	2b00      	cmp	r3, #0
    f71c:	d018      	beq.n	f750 <usart_init+0x238>
    f71e:	2380      	movs	r3, #128	; 0x80
    f720:	055b      	lsls	r3, r3, #21
    f722:	4599      	cmp	r9, r3
    f724:	d001      	beq.n	f72a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    f726:	2000      	movs	r0, #0
    f728:	e025      	b.n	f776 <usart_init+0x25e>
			if (!config->use_external_clock) {
    f72a:	2327      	movs	r3, #39	; 0x27
    f72c:	5cf3      	ldrb	r3, [r6, r3]
    f72e:	2b00      	cmp	r3, #0
    f730:	d000      	beq.n	f734 <usart_init+0x21c>
    f732:	e775      	b.n	f620 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    f734:	6a33      	ldr	r3, [r6, #32]
    f736:	001f      	movs	r7, r3
    f738:	b2c0      	uxtb	r0, r0
    f73a:	4b40      	ldr	r3, [pc, #256]	; (f83c <usart_init+0x324>)
    f73c:	4798      	blx	r3
    f73e:	0001      	movs	r1, r0
    f740:	220e      	movs	r2, #14
    f742:	ab06      	add	r3, sp, #24
    f744:	469c      	mov	ip, r3
    f746:	4462      	add	r2, ip
    f748:	0038      	movs	r0, r7
    f74a:	4b3d      	ldr	r3, [pc, #244]	; (f840 <usart_init+0x328>)
    f74c:	4798      	blx	r3
    f74e:	e012      	b.n	f776 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    f750:	2308      	movs	r3, #8
    f752:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    f754:	2300      	movs	r3, #0
    f756:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    f758:	2327      	movs	r3, #39	; 0x27
    f75a:	5cf3      	ldrb	r3, [r6, r3]
    f75c:	2b00      	cmp	r3, #0
    f75e:	d00e      	beq.n	f77e <usart_init+0x266>
				status_code =
    f760:	9b06      	ldr	r3, [sp, #24]
    f762:	9300      	str	r3, [sp, #0]
    f764:	9b07      	ldr	r3, [sp, #28]
    f766:	220e      	movs	r2, #14
    f768:	a906      	add	r1, sp, #24
    f76a:	468c      	mov	ip, r1
    f76c:	4462      	add	r2, ip
    f76e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f770:	6a30      	ldr	r0, [r6, #32]
    f772:	4f34      	ldr	r7, [pc, #208]	; (f844 <usart_init+0x32c>)
    f774:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    f776:	2800      	cmp	r0, #0
    f778:	d000      	beq.n	f77c <usart_init+0x264>
    f77a:	e6e0      	b.n	f53e <usart_init+0x26>
    f77c:	e750      	b.n	f620 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    f77e:	6a33      	ldr	r3, [r6, #32]
    f780:	001f      	movs	r7, r3
    f782:	b2c0      	uxtb	r0, r0
    f784:	4b2d      	ldr	r3, [pc, #180]	; (f83c <usart_init+0x324>)
    f786:	4798      	blx	r3
    f788:	0001      	movs	r1, r0
				status_code =
    f78a:	9b06      	ldr	r3, [sp, #24]
    f78c:	9300      	str	r3, [sp, #0]
    f78e:	9b07      	ldr	r3, [sp, #28]
    f790:	220e      	movs	r2, #14
    f792:	a806      	add	r0, sp, #24
    f794:	4684      	mov	ip, r0
    f796:	4462      	add	r2, ip
    f798:	0038      	movs	r0, r7
    f79a:	4f2a      	ldr	r7, [pc, #168]	; (f844 <usart_init+0x32c>)
    f79c:	47b8      	blx	r7
    f79e:	e7ea      	b.n	f776 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    f7a0:	7ef3      	ldrb	r3, [r6, #27]
    f7a2:	2b00      	cmp	r3, #0
    f7a4:	d100      	bne.n	f7a8 <usart_init+0x290>
    f7a6:	e77d      	b.n	f6a4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    f7a8:	2380      	movs	r3, #128	; 0x80
    f7aa:	04db      	lsls	r3, r3, #19
    f7ac:	431f      	orrs	r7, r3
    f7ae:	e779      	b.n	f6a4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    f7b0:	0020      	movs	r0, r4
    f7b2:	4b25      	ldr	r3, [pc, #148]	; (f848 <usart_init+0x330>)
    f7b4:	4798      	blx	r3
    f7b6:	e007      	b.n	f7c8 <usart_init+0x2b0>
    f7b8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    f7ba:	2f04      	cmp	r7, #4
    f7bc:	d00d      	beq.n	f7da <usart_init+0x2c2>
    f7be:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    f7c0:	00bb      	lsls	r3, r7, #2
    f7c2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    f7c4:	2800      	cmp	r0, #0
    f7c6:	d0f3      	beq.n	f7b0 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    f7c8:	1c43      	adds	r3, r0, #1
    f7ca:	d0f5      	beq.n	f7b8 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    f7cc:	a90e      	add	r1, sp, #56	; 0x38
    f7ce:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    f7d0:	0c00      	lsrs	r0, r0, #16
    f7d2:	b2c0      	uxtb	r0, r0
    f7d4:	4b1d      	ldr	r3, [pc, #116]	; (f84c <usart_init+0x334>)
    f7d6:	4798      	blx	r3
    f7d8:	e7ee      	b.n	f7b8 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    f7da:	2300      	movs	r3, #0
    f7dc:	60eb      	str	r3, [r5, #12]
    f7de:	612b      	str	r3, [r5, #16]
    f7e0:	616b      	str	r3, [r5, #20]
    f7e2:	61ab      	str	r3, [r5, #24]
    f7e4:	61eb      	str	r3, [r5, #28]
    f7e6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    f7e8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    f7ea:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    f7ec:	2200      	movs	r2, #0
    f7ee:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    f7f0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    f7f2:	3330      	adds	r3, #48	; 0x30
    f7f4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    f7f6:	3301      	adds	r3, #1
    f7f8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    f7fa:	3301      	adds	r3, #1
    f7fc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    f7fe:	3301      	adds	r3, #1
    f800:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    f802:	6828      	ldr	r0, [r5, #0]
    f804:	4b07      	ldr	r3, [pc, #28]	; (f824 <usart_init+0x30c>)
    f806:	4798      	blx	r3
    f808:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    f80a:	4911      	ldr	r1, [pc, #68]	; (f850 <usart_init+0x338>)
    f80c:	4b11      	ldr	r3, [pc, #68]	; (f854 <usart_init+0x33c>)
    f80e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    f810:	00a4      	lsls	r4, r4, #2
    f812:	4b11      	ldr	r3, [pc, #68]	; (f858 <usart_init+0x340>)
    f814:	50e5      	str	r5, [r4, r3]
	return status_code;
    f816:	2000      	movs	r0, #0
    f818:	e691      	b.n	f53e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    f81a:	2310      	movs	r3, #16
    f81c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    f81e:	2300      	movs	r3, #0
    f820:	9307      	str	r3, [sp, #28]
    f822:	e6e8      	b.n	f5f6 <usart_init+0xde>
    f824:	0000ebb9 	.word	0x0000ebb9
    f828:	40000400 	.word	0x40000400
    f82c:	00010131 	.word	0x00010131
    f830:	000100a5 	.word	0x000100a5
    f834:	0000e9f5 	.word	0x0000e9f5
    f838:	41002000 	.word	0x41002000
    f83c:	0001014d 	.word	0x0001014d
    f840:	0000e937 	.word	0x0000e937
    f844:	0000e961 	.word	0x0000e961
    f848:	0000ea41 	.word	0x0000ea41
    f84c:	00010229 	.word	0x00010229
    f850:	0000f959 	.word	0x0000f959
    f854:	0000ebf5 	.word	0x0000ebf5
    f858:	20000578 	.word	0x20000578

0000f85c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    f85c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    f85e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    f860:	2a00      	cmp	r2, #0
    f862:	d101      	bne.n	f868 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    f864:	0018      	movs	r0, r3
    f866:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    f868:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    f86a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    f86c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    f86e:	2a00      	cmp	r2, #0
    f870:	d1f8      	bne.n	f864 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    f872:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    f874:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    f876:	2a00      	cmp	r2, #0
    f878:	d1fc      	bne.n	f874 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    f87a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    f87c:	2102      	movs	r1, #2
    f87e:	7e1a      	ldrb	r2, [r3, #24]
    f880:	420a      	tst	r2, r1
    f882:	d0fc      	beq.n	f87e <usart_write_wait+0x22>
	return STATUS_OK;
    f884:	2300      	movs	r3, #0
    f886:	e7ed      	b.n	f864 <usart_write_wait+0x8>

0000f888 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    f888:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    f88a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    f88c:	2a00      	cmp	r2, #0
    f88e:	d101      	bne.n	f894 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    f890:	0018      	movs	r0, r3
    f892:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    f894:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    f896:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    f898:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    f89a:	2a00      	cmp	r2, #0
    f89c:	d1f8      	bne.n	f890 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    f89e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    f8a0:	7e10      	ldrb	r0, [r2, #24]
    f8a2:	0740      	lsls	r0, r0, #29
    f8a4:	d5f4      	bpl.n	f890 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    f8a6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    f8a8:	2b00      	cmp	r3, #0
    f8aa:	d1fc      	bne.n	f8a6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    f8ac:	8b53      	ldrh	r3, [r2, #26]
    f8ae:	b2db      	uxtb	r3, r3
	if (error_code) {
    f8b0:	0698      	lsls	r0, r3, #26
    f8b2:	d01d      	beq.n	f8f0 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    f8b4:	0798      	lsls	r0, r3, #30
    f8b6:	d503      	bpl.n	f8c0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    f8b8:	2302      	movs	r3, #2
    f8ba:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    f8bc:	3318      	adds	r3, #24
    f8be:	e7e7      	b.n	f890 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    f8c0:	0758      	lsls	r0, r3, #29
    f8c2:	d503      	bpl.n	f8cc <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    f8c4:	2304      	movs	r3, #4
    f8c6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    f8c8:	331a      	adds	r3, #26
    f8ca:	e7e1      	b.n	f890 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    f8cc:	07d8      	lsls	r0, r3, #31
    f8ce:	d503      	bpl.n	f8d8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    f8d0:	2301      	movs	r3, #1
    f8d2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    f8d4:	3312      	adds	r3, #18
    f8d6:	e7db      	b.n	f890 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    f8d8:	06d8      	lsls	r0, r3, #27
    f8da:	d503      	bpl.n	f8e4 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    f8dc:	2310      	movs	r3, #16
    f8de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    f8e0:	3332      	adds	r3, #50	; 0x32
    f8e2:	e7d5      	b.n	f890 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    f8e4:	069b      	lsls	r3, r3, #26
    f8e6:	d503      	bpl.n	f8f0 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    f8e8:	2320      	movs	r3, #32
    f8ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    f8ec:	3321      	adds	r3, #33	; 0x21
    f8ee:	e7cf      	b.n	f890 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    f8f0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    f8f2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    f8f4:	2300      	movs	r3, #0
    f8f6:	e7cb      	b.n	f890 <usart_read_wait+0x8>

0000f8f8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    f8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f8fa:	0004      	movs	r4, r0
    f8fc:	000d      	movs	r5, r1
    f8fe:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    f900:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    f902:	4b0f      	ldr	r3, [pc, #60]	; (f940 <_usart_read_buffer+0x48>)
    f904:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    f906:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    f908:	b29b      	uxth	r3, r3
    f90a:	2b00      	cmp	r3, #0
    f90c:	d003      	beq.n	f916 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    f90e:	4b0d      	ldr	r3, [pc, #52]	; (f944 <_usart_read_buffer+0x4c>)
    f910:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    f912:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    f914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    f916:	85a6      	strh	r6, [r4, #44]	; 0x2c
    f918:	4b0a      	ldr	r3, [pc, #40]	; (f944 <_usart_read_buffer+0x4c>)
    f91a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    f91c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    f91e:	2205      	movs	r2, #5
    f920:	2332      	movs	r3, #50	; 0x32
    f922:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    f924:	3b2e      	subs	r3, #46	; 0x2e
    f926:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    f928:	7a23      	ldrb	r3, [r4, #8]
    f92a:	2b00      	cmp	r3, #0
    f92c:	d001      	beq.n	f932 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    f92e:	2320      	movs	r3, #32
    f930:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    f932:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    f934:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    f936:	2b00      	cmp	r3, #0
    f938:	d0ec      	beq.n	f914 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    f93a:	2308      	movs	r3, #8
    f93c:	75bb      	strb	r3, [r7, #22]
    f93e:	e7e9      	b.n	f914 <_usart_read_buffer+0x1c>
    f940:	0000da55 	.word	0x0000da55
    f944:	0000da95 	.word	0x0000da95

0000f948 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    f948:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    f94a:	2201      	movs	r2, #1
    f94c:	4b01      	ldr	r3, [pc, #4]	; (f954 <usart_read_job+0xc>)
    f94e:	4798      	blx	r3
}
    f950:	bd10      	pop	{r4, pc}
    f952:	46c0      	nop			; (mov r8, r8)
    f954:	0000f8f9 	.word	0x0000f8f9

0000f958 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    f958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    f95a:	0080      	lsls	r0, r0, #2
    f95c:	4b62      	ldr	r3, [pc, #392]	; (fae8 <_usart_interrupt_handler+0x190>)
    f95e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    f960:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    f962:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    f964:	2b00      	cmp	r3, #0
    f966:	d1fc      	bne.n	f962 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    f968:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    f96a:	7da6      	ldrb	r6, [r4, #22]
    f96c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    f96e:	2330      	movs	r3, #48	; 0x30
    f970:	5ceb      	ldrb	r3, [r5, r3]
    f972:	2231      	movs	r2, #49	; 0x31
    f974:	5caf      	ldrb	r7, [r5, r2]
    f976:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    f978:	07f3      	lsls	r3, r6, #31
    f97a:	d522      	bpl.n	f9c2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    f97c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    f97e:	b29b      	uxth	r3, r3
    f980:	2b00      	cmp	r3, #0
    f982:	d01c      	beq.n	f9be <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    f984:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    f986:	7813      	ldrb	r3, [r2, #0]
    f988:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    f98a:	1c51      	adds	r1, r2, #1
    f98c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    f98e:	7969      	ldrb	r1, [r5, #5]
    f990:	2901      	cmp	r1, #1
    f992:	d00e      	beq.n	f9b2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    f994:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    f996:	05db      	lsls	r3, r3, #23
    f998:	0ddb      	lsrs	r3, r3, #23
    f99a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    f99c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    f99e:	3b01      	subs	r3, #1
    f9a0:	b29b      	uxth	r3, r3
    f9a2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    f9a4:	2b00      	cmp	r3, #0
    f9a6:	d10c      	bne.n	f9c2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    f9a8:	3301      	adds	r3, #1
    f9aa:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    f9ac:	3301      	adds	r3, #1
    f9ae:	75a3      	strb	r3, [r4, #22]
    f9b0:	e007      	b.n	f9c2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    f9b2:	7851      	ldrb	r1, [r2, #1]
    f9b4:	0209      	lsls	r1, r1, #8
    f9b6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    f9b8:	3202      	adds	r2, #2
    f9ba:	62aa      	str	r2, [r5, #40]	; 0x28
    f9bc:	e7eb      	b.n	f996 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    f9be:	2301      	movs	r3, #1
    f9c0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    f9c2:	07b3      	lsls	r3, r6, #30
    f9c4:	d506      	bpl.n	f9d4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    f9c6:	2302      	movs	r3, #2
    f9c8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    f9ca:	2200      	movs	r2, #0
    f9cc:	3331      	adds	r3, #49	; 0x31
    f9ce:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    f9d0:	07fb      	lsls	r3, r7, #31
    f9d2:	d41a      	bmi.n	fa0a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    f9d4:	0773      	lsls	r3, r6, #29
    f9d6:	d565      	bpl.n	faa4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    f9d8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    f9da:	b29b      	uxth	r3, r3
    f9dc:	2b00      	cmp	r3, #0
    f9de:	d05f      	beq.n	faa0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    f9e0:	8b63      	ldrh	r3, [r4, #26]
    f9e2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    f9e4:	071a      	lsls	r2, r3, #28
    f9e6:	d414      	bmi.n	fa12 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    f9e8:	223f      	movs	r2, #63	; 0x3f
    f9ea:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    f9ec:	2b00      	cmp	r3, #0
    f9ee:	d034      	beq.n	fa5a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    f9f0:	079a      	lsls	r2, r3, #30
    f9f2:	d511      	bpl.n	fa18 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    f9f4:	221a      	movs	r2, #26
    f9f6:	2332      	movs	r3, #50	; 0x32
    f9f8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    f9fa:	3b30      	subs	r3, #48	; 0x30
    f9fc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    f9fe:	077b      	lsls	r3, r7, #29
    fa00:	d550      	bpl.n	faa4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    fa02:	0028      	movs	r0, r5
    fa04:	696b      	ldr	r3, [r5, #20]
    fa06:	4798      	blx	r3
    fa08:	e04c      	b.n	faa4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    fa0a:	0028      	movs	r0, r5
    fa0c:	68eb      	ldr	r3, [r5, #12]
    fa0e:	4798      	blx	r3
    fa10:	e7e0      	b.n	f9d4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    fa12:	2237      	movs	r2, #55	; 0x37
    fa14:	4013      	ands	r3, r2
    fa16:	e7e9      	b.n	f9ec <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    fa18:	075a      	lsls	r2, r3, #29
    fa1a:	d505      	bpl.n	fa28 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    fa1c:	221e      	movs	r2, #30
    fa1e:	2332      	movs	r3, #50	; 0x32
    fa20:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    fa22:	3b2e      	subs	r3, #46	; 0x2e
    fa24:	8363      	strh	r3, [r4, #26]
    fa26:	e7ea      	b.n	f9fe <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    fa28:	07da      	lsls	r2, r3, #31
    fa2a:	d505      	bpl.n	fa38 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    fa2c:	2213      	movs	r2, #19
    fa2e:	2332      	movs	r3, #50	; 0x32
    fa30:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    fa32:	3b31      	subs	r3, #49	; 0x31
    fa34:	8363      	strh	r3, [r4, #26]
    fa36:	e7e2      	b.n	f9fe <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    fa38:	06da      	lsls	r2, r3, #27
    fa3a:	d505      	bpl.n	fa48 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    fa3c:	2242      	movs	r2, #66	; 0x42
    fa3e:	2332      	movs	r3, #50	; 0x32
    fa40:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    fa42:	3b22      	subs	r3, #34	; 0x22
    fa44:	8363      	strh	r3, [r4, #26]
    fa46:	e7da      	b.n	f9fe <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    fa48:	2220      	movs	r2, #32
    fa4a:	421a      	tst	r2, r3
    fa4c:	d0d7      	beq.n	f9fe <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    fa4e:	3221      	adds	r2, #33	; 0x21
    fa50:	2332      	movs	r3, #50	; 0x32
    fa52:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    fa54:	3b12      	subs	r3, #18
    fa56:	8363      	strh	r3, [r4, #26]
    fa58:	e7d1      	b.n	f9fe <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    fa5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    fa5c:	05db      	lsls	r3, r3, #23
    fa5e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    fa60:	b2da      	uxtb	r2, r3
    fa62:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fa64:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    fa66:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    fa68:	1c51      	adds	r1, r2, #1
    fa6a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    fa6c:	7969      	ldrb	r1, [r5, #5]
    fa6e:	2901      	cmp	r1, #1
    fa70:	d010      	beq.n	fa94 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    fa72:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    fa74:	3b01      	subs	r3, #1
    fa76:	b29b      	uxth	r3, r3
    fa78:	85ab      	strh	r3, [r5, #44]	; 0x2c
    fa7a:	2b00      	cmp	r3, #0
    fa7c:	d112      	bne.n	faa4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    fa7e:	3304      	adds	r3, #4
    fa80:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    fa82:	2200      	movs	r2, #0
    fa84:	332e      	adds	r3, #46	; 0x2e
    fa86:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    fa88:	07bb      	lsls	r3, r7, #30
    fa8a:	d50b      	bpl.n	faa4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    fa8c:	0028      	movs	r0, r5
    fa8e:	692b      	ldr	r3, [r5, #16]
    fa90:	4798      	blx	r3
    fa92:	e007      	b.n	faa4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    fa94:	0a1b      	lsrs	r3, r3, #8
    fa96:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    fa98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    fa9a:	3301      	adds	r3, #1
    fa9c:	626b      	str	r3, [r5, #36]	; 0x24
    fa9e:	e7e8      	b.n	fa72 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    faa0:	2304      	movs	r3, #4
    faa2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    faa4:	06f3      	lsls	r3, r6, #27
    faa6:	d504      	bpl.n	fab2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    faa8:	2310      	movs	r3, #16
    faaa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    faac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    faae:	06fb      	lsls	r3, r7, #27
    fab0:	d40e      	bmi.n	fad0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    fab2:	06b3      	lsls	r3, r6, #26
    fab4:	d504      	bpl.n	fac0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    fab6:	2320      	movs	r3, #32
    fab8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    faba:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    fabc:	073b      	lsls	r3, r7, #28
    fabe:	d40b      	bmi.n	fad8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    fac0:	0733      	lsls	r3, r6, #28
    fac2:	d504      	bpl.n	face <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    fac4:	2308      	movs	r3, #8
    fac6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    fac8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    faca:	06bb      	lsls	r3, r7, #26
    facc:	d408      	bmi.n	fae0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    face:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    fad0:	0028      	movs	r0, r5
    fad2:	69eb      	ldr	r3, [r5, #28]
    fad4:	4798      	blx	r3
    fad6:	e7ec      	b.n	fab2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    fad8:	0028      	movs	r0, r5
    fada:	69ab      	ldr	r3, [r5, #24]
    fadc:	4798      	blx	r3
    fade:	e7ef      	b.n	fac0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    fae0:	6a2b      	ldr	r3, [r5, #32]
    fae2:	0028      	movs	r0, r5
    fae4:	4798      	blx	r3
}
    fae6:	e7f2      	b.n	face <_usart_interrupt_handler+0x176>
    fae8:	20000578 	.word	0x20000578

0000faec <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    faec:	b510      	push	{r4, lr}
	switch (clock_source) {
    faee:	2808      	cmp	r0, #8
    faf0:	d803      	bhi.n	fafa <system_clock_source_get_hz+0xe>
    faf2:	0080      	lsls	r0, r0, #2
    faf4:	4b1b      	ldr	r3, [pc, #108]	; (fb64 <system_clock_source_get_hz+0x78>)
    faf6:	581b      	ldr	r3, [r3, r0]
    faf8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    fafa:	2000      	movs	r0, #0
    fafc:	e030      	b.n	fb60 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    fafe:	4b1a      	ldr	r3, [pc, #104]	; (fb68 <system_clock_source_get_hz+0x7c>)
    fb00:	6918      	ldr	r0, [r3, #16]
    fb02:	e02d      	b.n	fb60 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    fb04:	4b19      	ldr	r3, [pc, #100]	; (fb6c <system_clock_source_get_hz+0x80>)
    fb06:	6a1b      	ldr	r3, [r3, #32]
    fb08:	059b      	lsls	r3, r3, #22
    fb0a:	0f9b      	lsrs	r3, r3, #30
    fb0c:	4818      	ldr	r0, [pc, #96]	; (fb70 <system_clock_source_get_hz+0x84>)
    fb0e:	40d8      	lsrs	r0, r3
    fb10:	e026      	b.n	fb60 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    fb12:	4b15      	ldr	r3, [pc, #84]	; (fb68 <system_clock_source_get_hz+0x7c>)
    fb14:	6958      	ldr	r0, [r3, #20]
    fb16:	e023      	b.n	fb60 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    fb18:	4b13      	ldr	r3, [pc, #76]	; (fb68 <system_clock_source_get_hz+0x7c>)
    fb1a:	681b      	ldr	r3, [r3, #0]
			return 0;
    fb1c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    fb1e:	079b      	lsls	r3, r3, #30
    fb20:	d51e      	bpl.n	fb60 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    fb22:	4912      	ldr	r1, [pc, #72]	; (fb6c <system_clock_source_get_hz+0x80>)
    fb24:	2210      	movs	r2, #16
    fb26:	68cb      	ldr	r3, [r1, #12]
    fb28:	421a      	tst	r2, r3
    fb2a:	d0fc      	beq.n	fb26 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    fb2c:	4b0e      	ldr	r3, [pc, #56]	; (fb68 <system_clock_source_get_hz+0x7c>)
    fb2e:	681b      	ldr	r3, [r3, #0]
    fb30:	075b      	lsls	r3, r3, #29
    fb32:	d401      	bmi.n	fb38 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    fb34:	480f      	ldr	r0, [pc, #60]	; (fb74 <system_clock_source_get_hz+0x88>)
    fb36:	e013      	b.n	fb60 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    fb38:	2000      	movs	r0, #0
    fb3a:	4b0f      	ldr	r3, [pc, #60]	; (fb78 <system_clock_source_get_hz+0x8c>)
    fb3c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    fb3e:	4b0a      	ldr	r3, [pc, #40]	; (fb68 <system_clock_source_get_hz+0x7c>)
    fb40:	689b      	ldr	r3, [r3, #8]
    fb42:	041b      	lsls	r3, r3, #16
    fb44:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    fb46:	4358      	muls	r0, r3
    fb48:	e00a      	b.n	fb60 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    fb4a:	2350      	movs	r3, #80	; 0x50
    fb4c:	4a07      	ldr	r2, [pc, #28]	; (fb6c <system_clock_source_get_hz+0x80>)
    fb4e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    fb50:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    fb52:	075b      	lsls	r3, r3, #29
    fb54:	d504      	bpl.n	fb60 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    fb56:	4b04      	ldr	r3, [pc, #16]	; (fb68 <system_clock_source_get_hz+0x7c>)
    fb58:	68d8      	ldr	r0, [r3, #12]
    fb5a:	e001      	b.n	fb60 <system_clock_source_get_hz+0x74>
		return 32768UL;
    fb5c:	2080      	movs	r0, #128	; 0x80
    fb5e:	0200      	lsls	r0, r0, #8
	}
}
    fb60:	bd10      	pop	{r4, pc}
    fb62:	46c0      	nop			; (mov r8, r8)
    fb64:	00016960 	.word	0x00016960
    fb68:	20000274 	.word	0x20000274
    fb6c:	40000800 	.word	0x40000800
    fb70:	007a1200 	.word	0x007a1200
    fb74:	02dc6c00 	.word	0x02dc6c00
    fb78:	0001014d 	.word	0x0001014d

0000fb7c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    fb7c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    fb7e:	490c      	ldr	r1, [pc, #48]	; (fbb0 <system_clock_source_osc8m_set_config+0x34>)
    fb80:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    fb82:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    fb84:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    fb86:	7840      	ldrb	r0, [r0, #1]
    fb88:	2201      	movs	r2, #1
    fb8a:	4010      	ands	r0, r2
    fb8c:	0180      	lsls	r0, r0, #6
    fb8e:	2640      	movs	r6, #64	; 0x40
    fb90:	43b3      	bics	r3, r6
    fb92:	4303      	orrs	r3, r0
    fb94:	402a      	ands	r2, r5
    fb96:	01d2      	lsls	r2, r2, #7
    fb98:	2080      	movs	r0, #128	; 0x80
    fb9a:	4383      	bics	r3, r0
    fb9c:	4313      	orrs	r3, r2
    fb9e:	2203      	movs	r2, #3
    fba0:	4022      	ands	r2, r4
    fba2:	0212      	lsls	r2, r2, #8
    fba4:	4803      	ldr	r0, [pc, #12]	; (fbb4 <system_clock_source_osc8m_set_config+0x38>)
    fba6:	4003      	ands	r3, r0
    fba8:	4313      	orrs	r3, r2
    fbaa:	620b      	str	r3, [r1, #32]
}
    fbac:	bd70      	pop	{r4, r5, r6, pc}
    fbae:	46c0      	nop			; (mov r8, r8)
    fbb0:	40000800 	.word	0x40000800
    fbb4:	fffffcff 	.word	0xfffffcff

0000fbb8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    fbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fbba:	46de      	mov	lr, fp
    fbbc:	4657      	mov	r7, sl
    fbbe:	464e      	mov	r6, r9
    fbc0:	4645      	mov	r5, r8
    fbc2:	b5e0      	push	{r5, r6, r7, lr}
    fbc4:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    fbc6:	4b26      	ldr	r3, [pc, #152]	; (fc60 <system_clock_source_xosc32k_set_config+0xa8>)
    fbc8:	469b      	mov	fp, r3
    fbca:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    fbcc:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    fbce:	7800      	ldrb	r0, [r0, #0]
    fbd0:	4242      	negs	r2, r0
    fbd2:	4142      	adcs	r2, r0
    fbd4:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    fbd6:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    fbd8:	78ca      	ldrb	r2, [r1, #3]
    fbda:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    fbdc:	790a      	ldrb	r2, [r1, #4]
    fbde:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    fbe0:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    fbe2:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    fbe4:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    fbe6:	688a      	ldr	r2, [r1, #8]
    fbe8:	491e      	ldr	r1, [pc, #120]	; (fc64 <system_clock_source_xosc32k_set_config+0xac>)
    fbea:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    fbec:	2101      	movs	r1, #1
    fbee:	464a      	mov	r2, r9
    fbf0:	0092      	lsls	r2, r2, #2
    fbf2:	4691      	mov	r9, r2
    fbf4:	2204      	movs	r2, #4
    fbf6:	4393      	bics	r3, r2
    fbf8:	464a      	mov	r2, r9
    fbfa:	4313      	orrs	r3, r2
    fbfc:	4642      	mov	r2, r8
    fbfe:	400a      	ands	r2, r1
    fc00:	00d2      	lsls	r2, r2, #3
    fc02:	4690      	mov	r8, r2
    fc04:	2208      	movs	r2, #8
    fc06:	4393      	bics	r3, r2
    fc08:	4642      	mov	r2, r8
    fc0a:	4313      	orrs	r3, r2
    fc0c:	4662      	mov	r2, ip
    fc0e:	400a      	ands	r2, r1
    fc10:	0112      	lsls	r2, r2, #4
    fc12:	4694      	mov	ip, r2
    fc14:	2210      	movs	r2, #16
    fc16:	4393      	bics	r3, r2
    fc18:	4662      	mov	r2, ip
    fc1a:	4313      	orrs	r3, r2
    fc1c:	4008      	ands	r0, r1
    fc1e:	0140      	lsls	r0, r0, #5
    fc20:	2220      	movs	r2, #32
    fc22:	4393      	bics	r3, r2
    fc24:	4303      	orrs	r3, r0
    fc26:	400f      	ands	r7, r1
    fc28:	01bf      	lsls	r7, r7, #6
    fc2a:	2040      	movs	r0, #64	; 0x40
    fc2c:	4383      	bics	r3, r0
    fc2e:	433b      	orrs	r3, r7
    fc30:	400e      	ands	r6, r1
    fc32:	01f6      	lsls	r6, r6, #7
    fc34:	3040      	adds	r0, #64	; 0x40
    fc36:	4383      	bics	r3, r0
    fc38:	4333      	orrs	r3, r6
    fc3a:	3879      	subs	r0, #121	; 0x79
    fc3c:	4005      	ands	r5, r0
    fc3e:	022d      	lsls	r5, r5, #8
    fc40:	4809      	ldr	r0, [pc, #36]	; (fc68 <system_clock_source_xosc32k_set_config+0xb0>)
    fc42:	4003      	ands	r3, r0
    fc44:	432b      	orrs	r3, r5
    fc46:	4021      	ands	r1, r4
    fc48:	0309      	lsls	r1, r1, #12
    fc4a:	4808      	ldr	r0, [pc, #32]	; (fc6c <system_clock_source_xosc32k_set_config+0xb4>)
    fc4c:	4003      	ands	r3, r0
    fc4e:	430b      	orrs	r3, r1
    fc50:	465a      	mov	r2, fp
    fc52:	8293      	strh	r3, [r2, #20]
}
    fc54:	bc3c      	pop	{r2, r3, r4, r5}
    fc56:	4690      	mov	r8, r2
    fc58:	4699      	mov	r9, r3
    fc5a:	46a2      	mov	sl, r4
    fc5c:	46ab      	mov	fp, r5
    fc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fc60:	40000800 	.word	0x40000800
    fc64:	20000274 	.word	0x20000274
    fc68:	fffff8ff 	.word	0xfffff8ff
    fc6c:	ffffefff 	.word	0xffffefff

0000fc70 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    fc70:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    fc72:	7a03      	ldrb	r3, [r0, #8]
    fc74:	069b      	lsls	r3, r3, #26
    fc76:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    fc78:	8942      	ldrh	r2, [r0, #10]
    fc7a:	0592      	lsls	r2, r2, #22
    fc7c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    fc7e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    fc80:	4918      	ldr	r1, [pc, #96]	; (fce4 <system_clock_source_dfll_set_config+0x74>)
    fc82:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    fc84:	7983      	ldrb	r3, [r0, #6]
    fc86:	79c2      	ldrb	r2, [r0, #7]
    fc88:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    fc8a:	8842      	ldrh	r2, [r0, #2]
    fc8c:	8884      	ldrh	r4, [r0, #4]
    fc8e:	4322      	orrs	r2, r4
    fc90:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    fc92:	7842      	ldrb	r2, [r0, #1]
    fc94:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    fc96:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    fc98:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    fc9a:	7803      	ldrb	r3, [r0, #0]
    fc9c:	2b04      	cmp	r3, #4
    fc9e:	d011      	beq.n	fcc4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    fca0:	2b20      	cmp	r3, #32
    fca2:	d10e      	bne.n	fcc2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    fca4:	7b03      	ldrb	r3, [r0, #12]
    fca6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    fca8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    fcaa:	4313      	orrs	r3, r2
    fcac:	89c2      	ldrh	r2, [r0, #14]
    fcae:	0412      	lsls	r2, r2, #16
    fcb0:	490d      	ldr	r1, [pc, #52]	; (fce8 <system_clock_source_dfll_set_config+0x78>)
    fcb2:	400a      	ands	r2, r1
    fcb4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    fcb6:	4a0b      	ldr	r2, [pc, #44]	; (fce4 <system_clock_source_dfll_set_config+0x74>)
    fcb8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    fcba:	6811      	ldr	r1, [r2, #0]
    fcbc:	4b0b      	ldr	r3, [pc, #44]	; (fcec <system_clock_source_dfll_set_config+0x7c>)
    fcbe:	430b      	orrs	r3, r1
    fcc0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    fcc2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    fcc4:	7b03      	ldrb	r3, [r0, #12]
    fcc6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    fcc8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    fcca:	4313      	orrs	r3, r2
    fccc:	89c2      	ldrh	r2, [r0, #14]
    fcce:	0412      	lsls	r2, r2, #16
    fcd0:	4905      	ldr	r1, [pc, #20]	; (fce8 <system_clock_source_dfll_set_config+0x78>)
    fcd2:	400a      	ands	r2, r1
    fcd4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    fcd6:	4a03      	ldr	r2, [pc, #12]	; (fce4 <system_clock_source_dfll_set_config+0x74>)
    fcd8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    fcda:	6813      	ldr	r3, [r2, #0]
    fcdc:	2104      	movs	r1, #4
    fcde:	430b      	orrs	r3, r1
    fce0:	6013      	str	r3, [r2, #0]
    fce2:	e7ee      	b.n	fcc2 <system_clock_source_dfll_set_config+0x52>
    fce4:	20000274 	.word	0x20000274
    fce8:	03ff0000 	.word	0x03ff0000
    fcec:	00000424 	.word	0x00000424

0000fcf0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    fcf0:	2808      	cmp	r0, #8
    fcf2:	d803      	bhi.n	fcfc <system_clock_source_enable+0xc>
    fcf4:	0080      	lsls	r0, r0, #2
    fcf6:	4b25      	ldr	r3, [pc, #148]	; (fd8c <system_clock_source_enable+0x9c>)
    fcf8:	581b      	ldr	r3, [r3, r0]
    fcfa:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    fcfc:	2017      	movs	r0, #23
    fcfe:	e044      	b.n	fd8a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    fd00:	4a23      	ldr	r2, [pc, #140]	; (fd90 <system_clock_source_enable+0xa0>)
    fd02:	6a13      	ldr	r3, [r2, #32]
    fd04:	2102      	movs	r1, #2
    fd06:	430b      	orrs	r3, r1
    fd08:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    fd0a:	2000      	movs	r0, #0
    fd0c:	e03d      	b.n	fd8a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    fd0e:	4a20      	ldr	r2, [pc, #128]	; (fd90 <system_clock_source_enable+0xa0>)
    fd10:	6993      	ldr	r3, [r2, #24]
    fd12:	2102      	movs	r1, #2
    fd14:	430b      	orrs	r3, r1
    fd16:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    fd18:	2000      	movs	r0, #0
		break;
    fd1a:	e036      	b.n	fd8a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    fd1c:	4a1c      	ldr	r2, [pc, #112]	; (fd90 <system_clock_source_enable+0xa0>)
    fd1e:	8a13      	ldrh	r3, [r2, #16]
    fd20:	2102      	movs	r1, #2
    fd22:	430b      	orrs	r3, r1
    fd24:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    fd26:	2000      	movs	r0, #0
		break;
    fd28:	e02f      	b.n	fd8a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    fd2a:	4a19      	ldr	r2, [pc, #100]	; (fd90 <system_clock_source_enable+0xa0>)
    fd2c:	8a93      	ldrh	r3, [r2, #20]
    fd2e:	2102      	movs	r1, #2
    fd30:	430b      	orrs	r3, r1
    fd32:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    fd34:	2000      	movs	r0, #0
		break;
    fd36:	e028      	b.n	fd8a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    fd38:	4916      	ldr	r1, [pc, #88]	; (fd94 <system_clock_source_enable+0xa4>)
    fd3a:	680b      	ldr	r3, [r1, #0]
    fd3c:	2202      	movs	r2, #2
    fd3e:	4313      	orrs	r3, r2
    fd40:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    fd42:	4b13      	ldr	r3, [pc, #76]	; (fd90 <system_clock_source_enable+0xa0>)
    fd44:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    fd46:	0019      	movs	r1, r3
    fd48:	320e      	adds	r2, #14
    fd4a:	68cb      	ldr	r3, [r1, #12]
    fd4c:	421a      	tst	r2, r3
    fd4e:	d0fc      	beq.n	fd4a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    fd50:	4a10      	ldr	r2, [pc, #64]	; (fd94 <system_clock_source_enable+0xa4>)
    fd52:	6891      	ldr	r1, [r2, #8]
    fd54:	4b0e      	ldr	r3, [pc, #56]	; (fd90 <system_clock_source_enable+0xa0>)
    fd56:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    fd58:	6852      	ldr	r2, [r2, #4]
    fd5a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    fd5c:	2200      	movs	r2, #0
    fd5e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    fd60:	0019      	movs	r1, r3
    fd62:	3210      	adds	r2, #16
    fd64:	68cb      	ldr	r3, [r1, #12]
    fd66:	421a      	tst	r2, r3
    fd68:	d0fc      	beq.n	fd64 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    fd6a:	4b0a      	ldr	r3, [pc, #40]	; (fd94 <system_clock_source_enable+0xa4>)
    fd6c:	681b      	ldr	r3, [r3, #0]
    fd6e:	b29b      	uxth	r3, r3
    fd70:	4a07      	ldr	r2, [pc, #28]	; (fd90 <system_clock_source_enable+0xa0>)
    fd72:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    fd74:	2000      	movs	r0, #0
    fd76:	e008      	b.n	fd8a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    fd78:	4905      	ldr	r1, [pc, #20]	; (fd90 <system_clock_source_enable+0xa0>)
    fd7a:	2244      	movs	r2, #68	; 0x44
    fd7c:	5c8b      	ldrb	r3, [r1, r2]
    fd7e:	2002      	movs	r0, #2
    fd80:	4303      	orrs	r3, r0
    fd82:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    fd84:	2000      	movs	r0, #0
		break;
    fd86:	e000      	b.n	fd8a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    fd88:	2000      	movs	r0, #0
}
    fd8a:	4770      	bx	lr
    fd8c:	00016984 	.word	0x00016984
    fd90:	40000800 	.word	0x40000800
    fd94:	20000274 	.word	0x20000274

0000fd98 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    fd98:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd9a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    fd9c:	22c2      	movs	r2, #194	; 0xc2
    fd9e:	00d2      	lsls	r2, r2, #3
    fda0:	4b47      	ldr	r3, [pc, #284]	; (fec0 <system_clock_init+0x128>)
    fda2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    fda4:	4a47      	ldr	r2, [pc, #284]	; (fec4 <system_clock_init+0x12c>)
    fda6:	6853      	ldr	r3, [r2, #4]
    fda8:	211e      	movs	r1, #30
    fdaa:	438b      	bics	r3, r1
    fdac:	391a      	subs	r1, #26
    fdae:	430b      	orrs	r3, r1
    fdb0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    fdb2:	2202      	movs	r2, #2
    fdb4:	ab01      	add	r3, sp, #4
    fdb6:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    fdb8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    fdba:	4d43      	ldr	r5, [pc, #268]	; (fec8 <system_clock_init+0x130>)
    fdbc:	b2e0      	uxtb	r0, r4
    fdbe:	a901      	add	r1, sp, #4
    fdc0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    fdc2:	3401      	adds	r4, #1
    fdc4:	2c25      	cmp	r4, #37	; 0x25
    fdc6:	d1f9      	bne.n	fdbc <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    fdc8:	a80a      	add	r0, sp, #40	; 0x28
    fdca:	2300      	movs	r3, #0
    fdcc:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    fdce:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    fdd0:	2280      	movs	r2, #128	; 0x80
    fdd2:	0212      	lsls	r2, r2, #8
    fdd4:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    fdd6:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    fdd8:	2201      	movs	r2, #1
    fdda:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    fddc:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    fdde:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    fde0:	3202      	adds	r2, #2
    fde2:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    fde4:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    fde6:	4b39      	ldr	r3, [pc, #228]	; (fecc <system_clock_init+0x134>)
    fde8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    fdea:	2005      	movs	r0, #5
    fdec:	4b38      	ldr	r3, [pc, #224]	; (fed0 <system_clock_init+0x138>)
    fdee:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    fdf0:	4933      	ldr	r1, [pc, #204]	; (fec0 <system_clock_init+0x128>)
    fdf2:	2202      	movs	r2, #2
    fdf4:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    fdf6:	421a      	tst	r2, r3
    fdf8:	d0fc      	beq.n	fdf4 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    fdfa:	4a31      	ldr	r2, [pc, #196]	; (fec0 <system_clock_init+0x128>)
    fdfc:	8a93      	ldrh	r3, [r2, #20]
    fdfe:	2180      	movs	r1, #128	; 0x80
    fe00:	430b      	orrs	r3, r1
    fe02:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    fe04:	ab05      	add	r3, sp, #20
    fe06:	2100      	movs	r1, #0
    fe08:	2200      	movs	r2, #0
    fe0a:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    fe0c:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    fe0e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    fe10:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    fe12:	313f      	adds	r1, #63	; 0x3f
    fe14:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    fe16:	393b      	subs	r1, #59	; 0x3b
    fe18:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    fe1a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    fe1c:	4b2d      	ldr	r3, [pc, #180]	; (fed4 <system_clock_init+0x13c>)
    fe1e:	681b      	ldr	r3, [r3, #0]
    fe20:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    fe22:	2b3f      	cmp	r3, #63	; 0x3f
    fe24:	d04a      	beq.n	febc <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    fe26:	a805      	add	r0, sp, #20
    fe28:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    fe2a:	4b2b      	ldr	r3, [pc, #172]	; (fed8 <system_clock_init+0x140>)
    fe2c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    fe2e:	2307      	movs	r3, #7
    fe30:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    fe32:	3338      	adds	r3, #56	; 0x38
    fe34:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    fe36:	4b29      	ldr	r3, [pc, #164]	; (fedc <system_clock_init+0x144>)
    fe38:	4798      	blx	r3
	config->run_in_standby  = false;
    fe3a:	a804      	add	r0, sp, #16
    fe3c:	2500      	movs	r5, #0
    fe3e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    fe40:	2601      	movs	r6, #1
    fe42:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    fe44:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    fe46:	4b26      	ldr	r3, [pc, #152]	; (fee0 <system_clock_init+0x148>)
    fe48:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    fe4a:	2006      	movs	r0, #6
    fe4c:	4f20      	ldr	r7, [pc, #128]	; (fed0 <system_clock_init+0x138>)
    fe4e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    fe50:	4b24      	ldr	r3, [pc, #144]	; (fee4 <system_clock_init+0x14c>)
    fe52:	4798      	blx	r3
	config->division_factor    = 1;
    fe54:	ac01      	add	r4, sp, #4
    fe56:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    fe58:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    fe5a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    fe5c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    fe5e:	2305      	movs	r3, #5
    fe60:	7023      	strb	r3, [r4, #0]
    fe62:	0021      	movs	r1, r4
    fe64:	2001      	movs	r0, #1
    fe66:	4b20      	ldr	r3, [pc, #128]	; (fee8 <system_clock_init+0x150>)
    fe68:	4798      	blx	r3
    fe6a:	2001      	movs	r0, #1
    fe6c:	4b1f      	ldr	r3, [pc, #124]	; (feec <system_clock_init+0x154>)
    fe6e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    fe70:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    fe72:	0021      	movs	r1, r4
    fe74:	2000      	movs	r0, #0
    fe76:	4b14      	ldr	r3, [pc, #80]	; (fec8 <system_clock_init+0x130>)
    fe78:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    fe7a:	2000      	movs	r0, #0
    fe7c:	4b1c      	ldr	r3, [pc, #112]	; (fef0 <system_clock_init+0x158>)
    fe7e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    fe80:	2007      	movs	r0, #7
    fe82:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    fe84:	490e      	ldr	r1, [pc, #56]	; (fec0 <system_clock_init+0x128>)
    fe86:	22d0      	movs	r2, #208	; 0xd0
    fe88:	68cb      	ldr	r3, [r1, #12]
    fe8a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    fe8c:	2bd0      	cmp	r3, #208	; 0xd0
    fe8e:	d1fb      	bne.n	fe88 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    fe90:	4a18      	ldr	r2, [pc, #96]	; (fef4 <system_clock_init+0x15c>)
    fe92:	2300      	movs	r3, #0
    fe94:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    fe96:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    fe98:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    fe9a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    fe9c:	a901      	add	r1, sp, #4
    fe9e:	2201      	movs	r2, #1
    fea0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    fea2:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    fea4:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    fea6:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    fea8:	3307      	adds	r3, #7
    feaa:	700b      	strb	r3, [r1, #0]
    feac:	2000      	movs	r0, #0
    feae:	4b0e      	ldr	r3, [pc, #56]	; (fee8 <system_clock_init+0x150>)
    feb0:	4798      	blx	r3
    feb2:	2000      	movs	r0, #0
    feb4:	4b0d      	ldr	r3, [pc, #52]	; (feec <system_clock_init+0x154>)
    feb6:	4798      	blx	r3
#endif
}
    feb8:	b00f      	add	sp, #60	; 0x3c
    feba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    febc:	3b20      	subs	r3, #32
    febe:	e7b2      	b.n	fe26 <system_clock_init+0x8e>
    fec0:	40000800 	.word	0x40000800
    fec4:	41004000 	.word	0x41004000
    fec8:	00010131 	.word	0x00010131
    fecc:	0000fbb9 	.word	0x0000fbb9
    fed0:	0000fcf1 	.word	0x0000fcf1
    fed4:	00806024 	.word	0x00806024
    fed8:	000005b9 	.word	0x000005b9
    fedc:	0000fc71 	.word	0x0000fc71
    fee0:	0000fb7d 	.word	0x0000fb7d
    fee4:	0000fef9 	.word	0x0000fef9
    fee8:	0000ff1d 	.word	0x0000ff1d
    feec:	0000ffd5 	.word	0x0000ffd5
    fef0:	000100a5 	.word	0x000100a5
    fef4:	40000400 	.word	0x40000400

0000fef8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    fef8:	4a06      	ldr	r2, [pc, #24]	; (ff14 <system_gclk_init+0x1c>)
    fefa:	6993      	ldr	r3, [r2, #24]
    fefc:	2108      	movs	r1, #8
    fefe:	430b      	orrs	r3, r1
    ff00:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    ff02:	2201      	movs	r2, #1
    ff04:	4b04      	ldr	r3, [pc, #16]	; (ff18 <system_gclk_init+0x20>)
    ff06:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    ff08:	0019      	movs	r1, r3
    ff0a:	780b      	ldrb	r3, [r1, #0]
    ff0c:	4213      	tst	r3, r2
    ff0e:	d1fc      	bne.n	ff0a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    ff10:	4770      	bx	lr
    ff12:	46c0      	nop			; (mov r8, r8)
    ff14:	40000400 	.word	0x40000400
    ff18:	40000c00 	.word	0x40000c00

0000ff1c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    ff1c:	b570      	push	{r4, r5, r6, lr}
    ff1e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    ff20:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    ff22:	780d      	ldrb	r5, [r1, #0]
    ff24:	022d      	lsls	r5, r5, #8
    ff26:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    ff28:	784b      	ldrb	r3, [r1, #1]
    ff2a:	2b00      	cmp	r3, #0
    ff2c:	d002      	beq.n	ff34 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    ff2e:	2380      	movs	r3, #128	; 0x80
    ff30:	02db      	lsls	r3, r3, #11
    ff32:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    ff34:	7a4b      	ldrb	r3, [r1, #9]
    ff36:	2b00      	cmp	r3, #0
    ff38:	d002      	beq.n	ff40 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    ff3a:	2380      	movs	r3, #128	; 0x80
    ff3c:	031b      	lsls	r3, r3, #12
    ff3e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    ff40:	6848      	ldr	r0, [r1, #4]
    ff42:	2801      	cmp	r0, #1
    ff44:	d910      	bls.n	ff68 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    ff46:	1e43      	subs	r3, r0, #1
    ff48:	4218      	tst	r0, r3
    ff4a:	d134      	bne.n	ffb6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    ff4c:	2802      	cmp	r0, #2
    ff4e:	d930      	bls.n	ffb2 <system_gclk_gen_set_config+0x96>
    ff50:	2302      	movs	r3, #2
    ff52:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    ff54:	3201      	adds	r2, #1
						mask <<= 1) {
    ff56:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    ff58:	4298      	cmp	r0, r3
    ff5a:	d8fb      	bhi.n	ff54 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    ff5c:	0212      	lsls	r2, r2, #8
    ff5e:	4332      	orrs	r2, r6
    ff60:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    ff62:	2380      	movs	r3, #128	; 0x80
    ff64:	035b      	lsls	r3, r3, #13
    ff66:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    ff68:	7a0b      	ldrb	r3, [r1, #8]
    ff6a:	2b00      	cmp	r3, #0
    ff6c:	d002      	beq.n	ff74 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    ff6e:	2380      	movs	r3, #128	; 0x80
    ff70:	039b      	lsls	r3, r3, #14
    ff72:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ff74:	4a13      	ldr	r2, [pc, #76]	; (ffc4 <system_gclk_gen_set_config+0xa8>)
    ff76:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    ff78:	b25b      	sxtb	r3, r3
    ff7a:	2b00      	cmp	r3, #0
    ff7c:	dbfb      	blt.n	ff76 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    ff7e:	4b12      	ldr	r3, [pc, #72]	; (ffc8 <system_gclk_gen_set_config+0xac>)
    ff80:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    ff82:	4b12      	ldr	r3, [pc, #72]	; (ffcc <system_gclk_gen_set_config+0xb0>)
    ff84:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ff86:	4a0f      	ldr	r2, [pc, #60]	; (ffc4 <system_gclk_gen_set_config+0xa8>)
    ff88:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    ff8a:	b25b      	sxtb	r3, r3
    ff8c:	2b00      	cmp	r3, #0
    ff8e:	dbfb      	blt.n	ff88 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    ff90:	4b0c      	ldr	r3, [pc, #48]	; (ffc4 <system_gclk_gen_set_config+0xa8>)
    ff92:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ff94:	001a      	movs	r2, r3
    ff96:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    ff98:	b25b      	sxtb	r3, r3
    ff9a:	2b00      	cmp	r3, #0
    ff9c:	dbfb      	blt.n	ff96 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    ff9e:	4a09      	ldr	r2, [pc, #36]	; (ffc4 <system_gclk_gen_set_config+0xa8>)
    ffa0:	6853      	ldr	r3, [r2, #4]
    ffa2:	2180      	movs	r1, #128	; 0x80
    ffa4:	0249      	lsls	r1, r1, #9
    ffa6:	400b      	ands	r3, r1
    ffa8:	431d      	orrs	r5, r3
    ffaa:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    ffac:	4b08      	ldr	r3, [pc, #32]	; (ffd0 <system_gclk_gen_set_config+0xb4>)
    ffae:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    ffb0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    ffb2:	2200      	movs	r2, #0
    ffb4:	e7d2      	b.n	ff5c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    ffb6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    ffb8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    ffba:	2380      	movs	r3, #128	; 0x80
    ffbc:	029b      	lsls	r3, r3, #10
    ffbe:	431d      	orrs	r5, r3
    ffc0:	e7d2      	b.n	ff68 <system_gclk_gen_set_config+0x4c>
    ffc2:	46c0      	nop			; (mov r8, r8)
    ffc4:	40000c00 	.word	0x40000c00
    ffc8:	0000da55 	.word	0x0000da55
    ffcc:	40000c08 	.word	0x40000c08
    ffd0:	0000da95 	.word	0x0000da95

0000ffd4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    ffd4:	b510      	push	{r4, lr}
    ffd6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ffd8:	4a0b      	ldr	r2, [pc, #44]	; (10008 <system_gclk_gen_enable+0x34>)
    ffda:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    ffdc:	b25b      	sxtb	r3, r3
    ffde:	2b00      	cmp	r3, #0
    ffe0:	dbfb      	blt.n	ffda <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    ffe2:	4b0a      	ldr	r3, [pc, #40]	; (1000c <system_gclk_gen_enable+0x38>)
    ffe4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ffe6:	4b0a      	ldr	r3, [pc, #40]	; (10010 <system_gclk_gen_enable+0x3c>)
    ffe8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ffea:	4a07      	ldr	r2, [pc, #28]	; (10008 <system_gclk_gen_enable+0x34>)
    ffec:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    ffee:	b25b      	sxtb	r3, r3
    fff0:	2b00      	cmp	r3, #0
    fff2:	dbfb      	blt.n	ffec <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    fff4:	4a04      	ldr	r2, [pc, #16]	; (10008 <system_gclk_gen_enable+0x34>)
    fff6:	6851      	ldr	r1, [r2, #4]
    fff8:	2380      	movs	r3, #128	; 0x80
    fffa:	025b      	lsls	r3, r3, #9
    fffc:	430b      	orrs	r3, r1
    fffe:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   10000:	4b04      	ldr	r3, [pc, #16]	; (10014 <system_gclk_gen_enable+0x40>)
   10002:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   10004:	bd10      	pop	{r4, pc}
   10006:	46c0      	nop			; (mov r8, r8)
   10008:	40000c00 	.word	0x40000c00
   1000c:	0000da55 	.word	0x0000da55
   10010:	40000c04 	.word	0x40000c04
   10014:	0000da95 	.word	0x0000da95

00010018 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   10018:	b570      	push	{r4, r5, r6, lr}
   1001a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1001c:	4a1a      	ldr	r2, [pc, #104]	; (10088 <system_gclk_gen_get_hz+0x70>)
   1001e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   10020:	b25b      	sxtb	r3, r3
   10022:	2b00      	cmp	r3, #0
   10024:	dbfb      	blt.n	1001e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
   10026:	4b19      	ldr	r3, [pc, #100]	; (1008c <system_gclk_gen_get_hz+0x74>)
   10028:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1002a:	4b19      	ldr	r3, [pc, #100]	; (10090 <system_gclk_gen_get_hz+0x78>)
   1002c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1002e:	4a16      	ldr	r2, [pc, #88]	; (10088 <system_gclk_gen_get_hz+0x70>)
   10030:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   10032:	b25b      	sxtb	r3, r3
   10034:	2b00      	cmp	r3, #0
   10036:	dbfb      	blt.n	10030 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   10038:	4e13      	ldr	r6, [pc, #76]	; (10088 <system_gclk_gen_get_hz+0x70>)
   1003a:	6870      	ldr	r0, [r6, #4]
   1003c:	04c0      	lsls	r0, r0, #19
   1003e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   10040:	4b14      	ldr	r3, [pc, #80]	; (10094 <system_gclk_gen_get_hz+0x7c>)
   10042:	4798      	blx	r3
   10044:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   10046:	4b12      	ldr	r3, [pc, #72]	; (10090 <system_gclk_gen_get_hz+0x78>)
   10048:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1004a:	6876      	ldr	r6, [r6, #4]
   1004c:	02f6      	lsls	r6, r6, #11
   1004e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   10050:	4b11      	ldr	r3, [pc, #68]	; (10098 <system_gclk_gen_get_hz+0x80>)
   10052:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   10054:	4a0c      	ldr	r2, [pc, #48]	; (10088 <system_gclk_gen_get_hz+0x70>)
   10056:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   10058:	b25b      	sxtb	r3, r3
   1005a:	2b00      	cmp	r3, #0
   1005c:	dbfb      	blt.n	10056 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1005e:	4b0a      	ldr	r3, [pc, #40]	; (10088 <system_gclk_gen_get_hz+0x70>)
   10060:	689c      	ldr	r4, [r3, #8]
   10062:	0224      	lsls	r4, r4, #8
   10064:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   10066:	4b0d      	ldr	r3, [pc, #52]	; (1009c <system_gclk_gen_get_hz+0x84>)
   10068:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1006a:	2e00      	cmp	r6, #0
   1006c:	d107      	bne.n	1007e <system_gclk_gen_get_hz+0x66>
   1006e:	2c01      	cmp	r4, #1
   10070:	d907      	bls.n	10082 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
   10072:	0021      	movs	r1, r4
   10074:	0028      	movs	r0, r5
   10076:	4b0a      	ldr	r3, [pc, #40]	; (100a0 <system_gclk_gen_get_hz+0x88>)
   10078:	4798      	blx	r3
   1007a:	0005      	movs	r5, r0
   1007c:	e001      	b.n	10082 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   1007e:	3401      	adds	r4, #1
   10080:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
   10082:	0028      	movs	r0, r5
   10084:	bd70      	pop	{r4, r5, r6, pc}
   10086:	46c0      	nop			; (mov r8, r8)
   10088:	40000c00 	.word	0x40000c00
   1008c:	0000da55 	.word	0x0000da55
   10090:	40000c04 	.word	0x40000c04
   10094:	0000faed 	.word	0x0000faed
   10098:	40000c08 	.word	0x40000c08
   1009c:	0000da95 	.word	0x0000da95
   100a0:	000122c1 	.word	0x000122c1

000100a4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   100a4:	b510      	push	{r4, lr}
   100a6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   100a8:	4b06      	ldr	r3, [pc, #24]	; (100c4 <system_gclk_chan_enable+0x20>)
   100aa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   100ac:	4b06      	ldr	r3, [pc, #24]	; (100c8 <system_gclk_chan_enable+0x24>)
   100ae:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   100b0:	4a06      	ldr	r2, [pc, #24]	; (100cc <system_gclk_chan_enable+0x28>)
   100b2:	8853      	ldrh	r3, [r2, #2]
   100b4:	2180      	movs	r1, #128	; 0x80
   100b6:	01c9      	lsls	r1, r1, #7
   100b8:	430b      	orrs	r3, r1
   100ba:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   100bc:	4b04      	ldr	r3, [pc, #16]	; (100d0 <system_gclk_chan_enable+0x2c>)
   100be:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   100c0:	bd10      	pop	{r4, pc}
   100c2:	46c0      	nop			; (mov r8, r8)
   100c4:	0000da55 	.word	0x0000da55
   100c8:	40000c02 	.word	0x40000c02
   100cc:	40000c00 	.word	0x40000c00
   100d0:	0000da95 	.word	0x0000da95

000100d4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   100d4:	b510      	push	{r4, lr}
   100d6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   100d8:	4b0f      	ldr	r3, [pc, #60]	; (10118 <system_gclk_chan_disable+0x44>)
   100da:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   100dc:	4b0f      	ldr	r3, [pc, #60]	; (1011c <system_gclk_chan_disable+0x48>)
   100de:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   100e0:	4a0f      	ldr	r2, [pc, #60]	; (10120 <system_gclk_chan_disable+0x4c>)
   100e2:	8853      	ldrh	r3, [r2, #2]
   100e4:	051b      	lsls	r3, r3, #20
   100e6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
   100e8:	8853      	ldrh	r3, [r2, #2]
   100ea:	490e      	ldr	r1, [pc, #56]	; (10124 <system_gclk_chan_disable+0x50>)
   100ec:	400b      	ands	r3, r1
   100ee:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   100f0:	8853      	ldrh	r3, [r2, #2]
   100f2:	490d      	ldr	r1, [pc, #52]	; (10128 <system_gclk_chan_disable+0x54>)
   100f4:	400b      	ands	r3, r1
   100f6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   100f8:	0011      	movs	r1, r2
   100fa:	2280      	movs	r2, #128	; 0x80
   100fc:	01d2      	lsls	r2, r2, #7
   100fe:	884b      	ldrh	r3, [r1, #2]
   10100:	4213      	tst	r3, r2
   10102:	d1fc      	bne.n	100fe <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   10104:	4906      	ldr	r1, [pc, #24]	; (10120 <system_gclk_chan_disable+0x4c>)
   10106:	884a      	ldrh	r2, [r1, #2]
   10108:	0203      	lsls	r3, r0, #8
   1010a:	4806      	ldr	r0, [pc, #24]	; (10124 <system_gclk_chan_disable+0x50>)
   1010c:	4002      	ands	r2, r0
   1010e:	4313      	orrs	r3, r2
   10110:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
   10112:	4b06      	ldr	r3, [pc, #24]	; (1012c <system_gclk_chan_disable+0x58>)
   10114:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   10116:	bd10      	pop	{r4, pc}
   10118:	0000da55 	.word	0x0000da55
   1011c:	40000c02 	.word	0x40000c02
   10120:	40000c00 	.word	0x40000c00
   10124:	fffff0ff 	.word	0xfffff0ff
   10128:	ffffbfff 	.word	0xffffbfff
   1012c:	0000da95 	.word	0x0000da95

00010130 <system_gclk_chan_set_config>:
{
   10130:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   10132:	780c      	ldrb	r4, [r1, #0]
   10134:	0224      	lsls	r4, r4, #8
   10136:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   10138:	4b02      	ldr	r3, [pc, #8]	; (10144 <system_gclk_chan_set_config+0x14>)
   1013a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   1013c:	b2a4      	uxth	r4, r4
   1013e:	4b02      	ldr	r3, [pc, #8]	; (10148 <system_gclk_chan_set_config+0x18>)
   10140:	805c      	strh	r4, [r3, #2]
}
   10142:	bd10      	pop	{r4, pc}
   10144:	000100d5 	.word	0x000100d5
   10148:	40000c00 	.word	0x40000c00

0001014c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   1014c:	b510      	push	{r4, lr}
   1014e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   10150:	4b06      	ldr	r3, [pc, #24]	; (1016c <system_gclk_chan_get_hz+0x20>)
   10152:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   10154:	4b06      	ldr	r3, [pc, #24]	; (10170 <system_gclk_chan_get_hz+0x24>)
   10156:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   10158:	4b06      	ldr	r3, [pc, #24]	; (10174 <system_gclk_chan_get_hz+0x28>)
   1015a:	885c      	ldrh	r4, [r3, #2]
   1015c:	0524      	lsls	r4, r4, #20
   1015e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
   10160:	4b05      	ldr	r3, [pc, #20]	; (10178 <system_gclk_chan_get_hz+0x2c>)
   10162:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   10164:	0020      	movs	r0, r4
   10166:	4b05      	ldr	r3, [pc, #20]	; (1017c <system_gclk_chan_get_hz+0x30>)
   10168:	4798      	blx	r3
}
   1016a:	bd10      	pop	{r4, pc}
   1016c:	0000da55 	.word	0x0000da55
   10170:	40000c02 	.word	0x40000c02
   10174:	40000c00 	.word	0x40000c00
   10178:	0000da95 	.word	0x0000da95
   1017c:	00010019 	.word	0x00010019

00010180 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   10180:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   10182:	78d3      	ldrb	r3, [r2, #3]
   10184:	2b00      	cmp	r3, #0
   10186:	d135      	bne.n	101f4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   10188:	7813      	ldrb	r3, [r2, #0]
   1018a:	2b80      	cmp	r3, #128	; 0x80
   1018c:	d029      	beq.n	101e2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   1018e:	061b      	lsls	r3, r3, #24
   10190:	2480      	movs	r4, #128	; 0x80
   10192:	0264      	lsls	r4, r4, #9
   10194:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   10196:	7854      	ldrb	r4, [r2, #1]
   10198:	2502      	movs	r5, #2
   1019a:	43ac      	bics	r4, r5
   1019c:	d106      	bne.n	101ac <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   1019e:	7894      	ldrb	r4, [r2, #2]
   101a0:	2c00      	cmp	r4, #0
   101a2:	d120      	bne.n	101e6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
   101a4:	2480      	movs	r4, #128	; 0x80
   101a6:	02a4      	lsls	r4, r4, #10
   101a8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   101aa:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   101ac:	7854      	ldrb	r4, [r2, #1]
   101ae:	3c01      	subs	r4, #1
   101b0:	2c01      	cmp	r4, #1
   101b2:	d91c      	bls.n	101ee <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   101b4:	040d      	lsls	r5, r1, #16
   101b6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   101b8:	24a0      	movs	r4, #160	; 0xa0
   101ba:	05e4      	lsls	r4, r4, #23
   101bc:	432c      	orrs	r4, r5
   101be:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   101c0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   101c2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   101c4:	24d0      	movs	r4, #208	; 0xd0
   101c6:	0624      	lsls	r4, r4, #24
   101c8:	432c      	orrs	r4, r5
   101ca:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   101cc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   101ce:	78d4      	ldrb	r4, [r2, #3]
   101d0:	2c00      	cmp	r4, #0
   101d2:	d122      	bne.n	1021a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   101d4:	035b      	lsls	r3, r3, #13
   101d6:	d51c      	bpl.n	10212 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   101d8:	7893      	ldrb	r3, [r2, #2]
   101da:	2b01      	cmp	r3, #1
   101dc:	d01e      	beq.n	1021c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   101de:	6141      	str	r1, [r0, #20]
   101e0:	e017      	b.n	10212 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
   101e2:	2300      	movs	r3, #0
   101e4:	e7d7      	b.n	10196 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   101e6:	24c0      	movs	r4, #192	; 0xc0
   101e8:	02e4      	lsls	r4, r4, #11
   101ea:	4323      	orrs	r3, r4
   101ec:	e7dd      	b.n	101aa <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   101ee:	4c0d      	ldr	r4, [pc, #52]	; (10224 <_system_pinmux_config+0xa4>)
   101f0:	4023      	ands	r3, r4
   101f2:	e7df      	b.n	101b4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
   101f4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   101f6:	040c      	lsls	r4, r1, #16
   101f8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   101fa:	23a0      	movs	r3, #160	; 0xa0
   101fc:	05db      	lsls	r3, r3, #23
   101fe:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10200:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   10202:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   10204:	23d0      	movs	r3, #208	; 0xd0
   10206:	061b      	lsls	r3, r3, #24
   10208:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   1020a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   1020c:	78d3      	ldrb	r3, [r2, #3]
   1020e:	2b00      	cmp	r3, #0
   10210:	d103      	bne.n	1021a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   10212:	7853      	ldrb	r3, [r2, #1]
   10214:	3b01      	subs	r3, #1
   10216:	2b01      	cmp	r3, #1
   10218:	d902      	bls.n	10220 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   1021a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
   1021c:	6181      	str	r1, [r0, #24]
   1021e:	e7f8      	b.n	10212 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
   10220:	6081      	str	r1, [r0, #8]
}
   10222:	e7fa      	b.n	1021a <_system_pinmux_config+0x9a>
   10224:	fffbffff 	.word	0xfffbffff

00010228 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   10228:	b510      	push	{r4, lr}
   1022a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
   1022c:	09c1      	lsrs	r1, r0, #7
		return NULL;
   1022e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   10230:	2900      	cmp	r1, #0
   10232:	d104      	bne.n	1023e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   10234:	0943      	lsrs	r3, r0, #5
   10236:	01db      	lsls	r3, r3, #7
   10238:	4905      	ldr	r1, [pc, #20]	; (10250 <system_pinmux_pin_set_config+0x28>)
   1023a:	468c      	mov	ip, r1
   1023c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   1023e:	241f      	movs	r4, #31
   10240:	4020      	ands	r0, r4
   10242:	2101      	movs	r1, #1
   10244:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   10246:	0018      	movs	r0, r3
   10248:	4b02      	ldr	r3, [pc, #8]	; (10254 <system_pinmux_pin_set_config+0x2c>)
   1024a:	4798      	blx	r3
}
   1024c:	bd10      	pop	{r4, pc}
   1024e:	46c0      	nop			; (mov r8, r8)
   10250:	41004400 	.word	0x41004400
   10254:	00010181 	.word	0x00010181

00010258 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   10258:	4770      	bx	lr
	...

0001025c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   1025c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   1025e:	4b05      	ldr	r3, [pc, #20]	; (10274 <system_init+0x18>)
   10260:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   10262:	4b05      	ldr	r3, [pc, #20]	; (10278 <system_init+0x1c>)
   10264:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   10266:	4b05      	ldr	r3, [pc, #20]	; (1027c <system_init+0x20>)
   10268:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   1026a:	4b05      	ldr	r3, [pc, #20]	; (10280 <system_init+0x24>)
   1026c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   1026e:	4b05      	ldr	r3, [pc, #20]	; (10284 <system_init+0x28>)
   10270:	4798      	blx	r3
}
   10272:	bd10      	pop	{r4, pc}
   10274:	0000fd99 	.word	0x0000fd99
   10278:	0000dbe9 	.word	0x0000dbe9
   1027c:	00010259 	.word	0x00010259
   10280:	0000b8fd 	.word	0x0000b8fd
   10284:	00010259 	.word	0x00010259

00010288 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   10288:	b5f0      	push	{r4, r5, r6, r7, lr}
   1028a:	46c6      	mov	lr, r8
   1028c:	b500      	push	{lr}
   1028e:	000c      	movs	r4, r1
   10290:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   10292:	2800      	cmp	r0, #0
   10294:	d10f      	bne.n	102b6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
   10296:	2a00      	cmp	r2, #0
   10298:	dd11      	ble.n	102be <_read+0x36>
   1029a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   1029c:	4e09      	ldr	r6, [pc, #36]	; (102c4 <_read+0x3c>)
   1029e:	4d0a      	ldr	r5, [pc, #40]	; (102c8 <_read+0x40>)
   102a0:	6830      	ldr	r0, [r6, #0]
   102a2:	0021      	movs	r1, r4
   102a4:	682b      	ldr	r3, [r5, #0]
   102a6:	4798      	blx	r3
		ptr++;
   102a8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   102aa:	42bc      	cmp	r4, r7
   102ac:	d1f8      	bne.n	102a0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
   102ae:	4640      	mov	r0, r8
   102b0:	bc04      	pop	{r2}
   102b2:	4690      	mov	r8, r2
   102b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   102b6:	2301      	movs	r3, #1
   102b8:	425b      	negs	r3, r3
   102ba:	4698      	mov	r8, r3
   102bc:	e7f7      	b.n	102ae <_read+0x26>
	for (; len > 0; --len) {
   102be:	4680      	mov	r8, r0
   102c0:	e7f5      	b.n	102ae <_read+0x26>
   102c2:	46c0      	nop			; (mov r8, r8)
   102c4:	2000059c 	.word	0x2000059c
   102c8:	20000594 	.word	0x20000594

000102cc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   102cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   102ce:	46c6      	mov	lr, r8
   102d0:	b500      	push	{lr}
   102d2:	000e      	movs	r6, r1
   102d4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   102d6:	3801      	subs	r0, #1
   102d8:	2802      	cmp	r0, #2
   102da:	d810      	bhi.n	102fe <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   102dc:	2a00      	cmp	r2, #0
   102de:	d011      	beq.n	10304 <_write+0x38>
   102e0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   102e2:	4b0c      	ldr	r3, [pc, #48]	; (10314 <_write+0x48>)
   102e4:	4698      	mov	r8, r3
   102e6:	4f0c      	ldr	r7, [pc, #48]	; (10318 <_write+0x4c>)
   102e8:	4643      	mov	r3, r8
   102ea:	6818      	ldr	r0, [r3, #0]
   102ec:	5d31      	ldrb	r1, [r6, r4]
   102ee:	683b      	ldr	r3, [r7, #0]
   102f0:	4798      	blx	r3
   102f2:	2800      	cmp	r0, #0
   102f4:	db08      	blt.n	10308 <_write+0x3c>
			return -1;
		}
		++nChars;
   102f6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   102f8:	42a5      	cmp	r5, r4
   102fa:	d1f5      	bne.n	102e8 <_write+0x1c>
   102fc:	e006      	b.n	1030c <_write+0x40>
		return -1;
   102fe:	2401      	movs	r4, #1
   10300:	4264      	negs	r4, r4
   10302:	e003      	b.n	1030c <_write+0x40>
	for (; len != 0; --len) {
   10304:	0014      	movs	r4, r2
   10306:	e001      	b.n	1030c <_write+0x40>
			return -1;
   10308:	2401      	movs	r4, #1
   1030a:	4264      	negs	r4, r4
	}
	return nChars;
}
   1030c:	0020      	movs	r0, r4
   1030e:	bc04      	pop	{r2}
   10310:	4690      	mov	r8, r2
   10312:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10314:	2000059c 	.word	0x2000059c
   10318:	20000598 	.word	0x20000598

0001031c <resolve_cb>:
{
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
}

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   1031c:	b570      	push	{r4, r5, r6, lr}
   1031e:	b082      	sub	sp, #8
   10320:	0005      	movs	r5, r0
   10322:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   10324:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   10326:	21ff      	movs	r1, #255	; 0xff
   10328:	400b      	ands	r3, r1
   1032a:	000a      	movs	r2, r1
   1032c:	4022      	ands	r2, r4
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   1032e:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   10330:	9001      	str	r0, [sp, #4]
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   10332:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   10334:	4001      	ands	r1, r0
   10336:	9100      	str	r1, [sp, #0]
   10338:	0029      	movs	r1, r5
   1033a:	4804      	ldr	r0, [pc, #16]	; (1034c <resolve_cb+0x30>)
   1033c:	4e04      	ldr	r6, [pc, #16]	; (10350 <resolve_cb+0x34>)
   1033e:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   10340:	0021      	movs	r1, r4
   10342:	0028      	movs	r0, r5
   10344:	4b03      	ldr	r3, [pc, #12]	; (10354 <resolve_cb+0x38>)
   10346:	4798      	blx	r3
}
   10348:	b002      	add	sp, #8
   1034a:	bd70      	pop	{r4, r5, r6, pc}
   1034c:	00016f08 	.word	0x00016f08
   10350:	000140dd 	.word	0x000140dd
   10354:	0000ca21 	.word	0x0000ca21

00010358 <socket_cb>:
{
   10358:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   1035a:	4b01      	ldr	r3, [pc, #4]	; (10360 <socket_cb+0x8>)
   1035c:	4798      	blx	r3
}
   1035e:	bd10      	pop	{r4, pc}
   10360:	0000d64d 	.word	0x0000d64d

00010364 <start_download>:
{
   10364:	b510      	push	{r4, lr}
   10366:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
   10368:	4b17      	ldr	r3, [pc, #92]	; (103c8 <start_download+0x64>)
   1036a:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(WIFI_CONNECTED)) {
   1036c:	079a      	lsls	r2, r3, #30
   1036e:	d513      	bpl.n	10398 <start_download+0x34>
	if (is_state_set(GET_REQUESTED)) {
   10370:	075a      	lsls	r2, r3, #29
   10372:	d415      	bmi.n	103a0 <start_download+0x3c>
	if (is_state_set(DOWNLOADING)) {
   10374:	071b      	lsls	r3, r3, #28
   10376:	d417      	bmi.n	103a8 <start_download+0x44>
	if(download_CRC == false){
   10378:	4b14      	ldr	r3, [pc, #80]	; (103cc <start_download+0x68>)
   1037a:	781b      	ldrb	r3, [r3, #0]
   1037c:	2b00      	cmp	r3, #0
   1037e:	d017      	beq.n	103b0 <start_download+0x4c>
		printf("start_download CRC: sending HTTP request...\r\n");
   10380:	4813      	ldr	r0, [pc, #76]	; (103d0 <start_download+0x6c>)
   10382:	4b14      	ldr	r3, [pc, #80]	; (103d4 <start_download+0x70>)
   10384:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_CRC_URL, HTTP_METHOD_GET, NULL, NULL);
   10386:	2300      	movs	r3, #0
   10388:	9300      	str	r3, [sp, #0]
   1038a:	2201      	movs	r2, #1
   1038c:	4912      	ldr	r1, [pc, #72]	; (103d8 <start_download+0x74>)
   1038e:	4813      	ldr	r0, [pc, #76]	; (103dc <start_download+0x78>)
   10390:	4c13      	ldr	r4, [pc, #76]	; (103e0 <start_download+0x7c>)
   10392:	47a0      	blx	r4
}
   10394:	b002      	add	sp, #8
   10396:	bd10      	pop	{r4, pc}
		printf("start_download: Wi-Fi is not connected.\r\n");
   10398:	4812      	ldr	r0, [pc, #72]	; (103e4 <start_download+0x80>)
   1039a:	4b0e      	ldr	r3, [pc, #56]	; (103d4 <start_download+0x70>)
   1039c:	4798      	blx	r3
		return;
   1039e:	e7f9      	b.n	10394 <start_download+0x30>
		printf("start_download: request is sent already.\r\n");
   103a0:	4811      	ldr	r0, [pc, #68]	; (103e8 <start_download+0x84>)
   103a2:	4b0c      	ldr	r3, [pc, #48]	; (103d4 <start_download+0x70>)
   103a4:	4798      	blx	r3
		return;
   103a6:	e7f5      	b.n	10394 <start_download+0x30>
		printf("start_download: running download already.\r\n");
   103a8:	4810      	ldr	r0, [pc, #64]	; (103ec <start_download+0x88>)
   103aa:	4b0a      	ldr	r3, [pc, #40]	; (103d4 <start_download+0x70>)
   103ac:	4798      	blx	r3
		return;
   103ae:	e7f1      	b.n	10394 <start_download+0x30>
		printf("start_download: sending HTTP request...\r\n");
   103b0:	480f      	ldr	r0, [pc, #60]	; (103f0 <start_download+0x8c>)
   103b2:	4b08      	ldr	r3, [pc, #32]	; (103d4 <start_download+0x70>)
   103b4:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   103b6:	2300      	movs	r3, #0
   103b8:	9300      	str	r3, [sp, #0]
   103ba:	2201      	movs	r2, #1
   103bc:	490d      	ldr	r1, [pc, #52]	; (103f4 <start_download+0x90>)
   103be:	4807      	ldr	r0, [pc, #28]	; (103dc <start_download+0x78>)
   103c0:	4c07      	ldr	r4, [pc, #28]	; (103e0 <start_download+0x7c>)
   103c2:	47a0      	blx	r4
   103c4:	e7e6      	b.n	10394 <start_download+0x30>
   103c6:	46c0      	nop			; (mov r8, r8)
   103c8:	2000028c 	.word	0x2000028c
   103cc:	2000028d 	.word	0x2000028d
   103d0:	0001701c 	.word	0x0001701c
   103d4:	000141f9 	.word	0x000141f9
   103d8:	0001704c 	.word	0x0001704c
   103dc:	20000e9c 	.word	0x20000e9c
   103e0:	0000cf51 	.word	0x0000cf51
   103e4:	00016f38 	.word	0x00016f38
   103e8:	00016f64 	.word	0x00016f64
   103ec:	00016f90 	.word	0x00016f90
   103f0:	00016fbc 	.word	0x00016fbc
   103f4:	00016fe8 	.word	0x00016fe8

000103f8 <socket_resolve_handler>:
{
   103f8:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   103fa:	4b01      	ldr	r3, [pc, #4]	; (10400 <socket_resolve_handler+0x8>)
   103fc:	4798      	blx	r3
}
   103fe:	bd10      	pop	{r4, pc}
   10400:	0001160d 	.word	0x0001160d

00010404 <socket_event_handler>:
{
   10404:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   10406:	4b01      	ldr	r3, [pc, #4]	; (1040c <socket_event_handler+0x8>)
   10408:	4798      	blx	r3
}
   1040a:	bd10      	pop	{r4, pc}
   1040c:	000121ad 	.word	0x000121ad

00010410 <wifi_callback>:
{
   10410:	b510      	push	{r4, lr}
   10412:	b082      	sub	sp, #8
	switch (msg_type) {
   10414:	282c      	cmp	r0, #44	; 0x2c
   10416:	d003      	beq.n	10420 <wifi_callback+0x10>
   10418:	2832      	cmp	r0, #50	; 0x32
   1041a:	d01c      	beq.n	10456 <wifi_callback+0x46>
}
   1041c:	b002      	add	sp, #8
   1041e:	bd10      	pop	{r4, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
   10420:	780b      	ldrb	r3, [r1, #0]
   10422:	2b01      	cmp	r3, #1
   10424:	d011      	beq.n	1044a <wifi_callback+0x3a>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
   10426:	2b00      	cmp	r3, #0
   10428:	d1f8      	bne.n	1041c <wifi_callback+0xc>
			printf("Wi-Fi disconnected\r\n");
   1042a:	4812      	ldr	r0, [pc, #72]	; (10474 <wifi_callback+0x64>)
   1042c:	4b12      	ldr	r3, [pc, #72]	; (10478 <wifi_callback+0x68>)
   1042e:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   10430:	23ff      	movs	r3, #255	; 0xff
   10432:	9300      	str	r3, [sp, #0]
   10434:	4b11      	ldr	r3, [pc, #68]	; (1047c <wifi_callback+0x6c>)
   10436:	2202      	movs	r2, #2
   10438:	210b      	movs	r1, #11
   1043a:	4811      	ldr	r0, [pc, #68]	; (10480 <wifi_callback+0x70>)
   1043c:	4c11      	ldr	r4, [pc, #68]	; (10484 <wifi_callback+0x74>)
   1043e:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
   10440:	2101      	movs	r1, #1
   10442:	4811      	ldr	r0, [pc, #68]	; (10488 <wifi_callback+0x78>)
   10444:	4b11      	ldr	r3, [pc, #68]	; (1048c <wifi_callback+0x7c>)
   10446:	4798      	blx	r3
   10448:	e7e8      	b.n	1041c <wifi_callback+0xc>
			printf("Wi-Fi connected\r\n");
   1044a:	4811      	ldr	r0, [pc, #68]	; (10490 <wifi_callback+0x80>)
   1044c:	4b0a      	ldr	r3, [pc, #40]	; (10478 <wifi_callback+0x68>)
   1044e:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   10450:	4b10      	ldr	r3, [pc, #64]	; (10494 <wifi_callback+0x84>)
   10452:	4798      	blx	r3
   10454:	e7e2      	b.n	1041c <wifi_callback+0xc>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
   10456:	788b      	ldrb	r3, [r1, #2]
   10458:	784a      	ldrb	r2, [r1, #1]
   1045a:	7808      	ldrb	r0, [r1, #0]
   1045c:	78c9      	ldrb	r1, [r1, #3]
   1045e:	9100      	str	r1, [sp, #0]
   10460:	0001      	movs	r1, r0
   10462:	480d      	ldr	r0, [pc, #52]	; (10498 <wifi_callback+0x88>)
   10464:	4c0d      	ldr	r4, [pc, #52]	; (1049c <wifi_callback+0x8c>)
   10466:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
   10468:	490d      	ldr	r1, [pc, #52]	; (104a0 <wifi_callback+0x90>)
   1046a:	4807      	ldr	r0, [pc, #28]	; (10488 <wifi_callback+0x78>)
   1046c:	4b0d      	ldr	r3, [pc, #52]	; (104a4 <wifi_callback+0x94>)
   1046e:	4798      	blx	r3
}
   10470:	e7d4      	b.n	1041c <wifi_callback+0xc>
   10472:	46c0      	nop			; (mov r8, r8)
   10474:	00017098 	.word	0x00017098
   10478:	000141f9 	.word	0x000141f9
   1047c:	000170ac 	.word	0x000170ac
   10480:	000170b8 	.word	0x000170b8
   10484:	000094b9 	.word	0x000094b9
   10488:	20000318 	.word	0x20000318
   1048c:	00011e6d 	.word	0x00011e6d
   10490:	00017084 	.word	0x00017084
   10494:	000094d5 	.word	0x000094d5
   10498:	000170c4 	.word	0x000170c4
   1049c:	000140dd 	.word	0x000140dd
   104a0:	00016df4 	.word	0x00016df4
   104a4:	00011661 	.word	0x00011661

000104a8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   104a8:	b570      	push	{r4, r5, r6, lr}
   104aa:	b082      	sub	sp, #8
   104ac:	0005      	movs	r5, r0
   104ae:	000e      	movs	r6, r1
	uint16_t temp = 0;
   104b0:	2200      	movs	r2, #0
   104b2:	466b      	mov	r3, sp
   104b4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
   104b6:	4c06      	ldr	r4, [pc, #24]	; (104d0 <usart_serial_getchar+0x28>)
   104b8:	466b      	mov	r3, sp
   104ba:	1d99      	adds	r1, r3, #6
   104bc:	0028      	movs	r0, r5
   104be:	47a0      	blx	r4
   104c0:	2800      	cmp	r0, #0
   104c2:	d1f9      	bne.n	104b8 <usart_serial_getchar+0x10>

	*c = temp;
   104c4:	466b      	mov	r3, sp
   104c6:	3306      	adds	r3, #6
   104c8:	881b      	ldrh	r3, [r3, #0]
   104ca:	7033      	strb	r3, [r6, #0]
}
   104cc:	b002      	add	sp, #8
   104ce:	bd70      	pop	{r4, r5, r6, pc}
   104d0:	0000f889 	.word	0x0000f889

000104d4 <usart_serial_putchar>:
{
   104d4:	b570      	push	{r4, r5, r6, lr}
   104d6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
   104d8:	b28c      	uxth	r4, r1
   104da:	4e03      	ldr	r6, [pc, #12]	; (104e8 <usart_serial_putchar+0x14>)
   104dc:	0021      	movs	r1, r4
   104de:	0028      	movs	r0, r5
   104e0:	47b0      	blx	r6
   104e2:	2800      	cmp	r0, #0
   104e4:	d1fa      	bne.n	104dc <usart_serial_putchar+0x8>
}
   104e6:	bd70      	pop	{r4, r5, r6, pc}
   104e8:	0000f85d 	.word	0x0000f85d

000104ec <mqtt_callback>:
{
   104ec:	b570      	push	{r4, r5, r6, lr}
   104ee:	b086      	sub	sp, #24
   104f0:	0005      	movs	r5, r0
   104f2:	0014      	movs	r4, r2
	switch (type) {
   104f4:	2901      	cmp	r1, #1
   104f6:	d07c      	beq.n	105f2 <mqtt_callback+0x106>
   104f8:	dd5c      	ble.n	105b4 <mqtt_callback+0xc8>
   104fa:	2905      	cmp	r1, #5
   104fc:	d100      	bne.n	10500 <mqtt_callback+0x14>
   104fe:	e0a2      	b.n	10646 <mqtt_callback+0x15a>
   10500:	2906      	cmp	r1, #6
   10502:	d000      	beq.n	10506 <mqtt_callback+0x1a>
   10504:	e0a8      	b.n	10658 <mqtt_callback+0x16c>
	if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
   10506:	6810      	ldr	r0, [r2, #0]
   10508:	2800      	cmp	r0, #0
   1050a:	d100      	bne.n	1050e <mqtt_callback+0x22>
   1050c:	e0a4      	b.n	10658 <mqtt_callback+0x16c>
   1050e:	6895      	ldr	r5, [r2, #8]
   10510:	2d00      	cmp	r5, #0
   10512:	d100      	bne.n	10516 <mqtt_callback+0x2a>
   10514:	e0a0      	b.n	10658 <mqtt_callback+0x16c>
      if (!strncmp(data->recv_publish.topic, ACTUATOR_TOPIC, strlen(ACTUATOR_TOPIC)) ) {
   10516:	2208      	movs	r2, #8
   10518:	4950      	ldr	r1, [pc, #320]	; (1065c <mqtt_callback+0x170>)
   1051a:	4b51      	ldr	r3, [pc, #324]	; (10660 <mqtt_callback+0x174>)
   1051c:	4798      	blx	r3
   1051e:	2800      	cmp	r0, #0
   10520:	d10a      	bne.n	10538 <mqtt_callback+0x4c>
		if(!strncmp(data->recv_publish.msg,"true", data->recv_publish.msg_size)){
   10522:	68e2      	ldr	r2, [r4, #12]
   10524:	494f      	ldr	r1, [pc, #316]	; (10664 <mqtt_callback+0x178>)
   10526:	0028      	movs	r0, r5
   10528:	4b4d      	ldr	r3, [pc, #308]	; (10660 <mqtt_callback+0x174>)
   1052a:	4798      	blx	r3
   1052c:	2800      	cmp	r0, #0
   1052e:	d000      	beq.n	10532 <mqtt_callback+0x46>
   10530:	e085      	b.n	1063e <mqtt_callback+0x152>
   10532:	2204      	movs	r2, #4
   10534:	4b4c      	ldr	r3, [pc, #304]	; (10668 <mqtt_callback+0x17c>)
   10536:	619a      	str	r2, [r3, #24]
       if (!strncmp(data->recv_publish.topic, UPGRADE_TOPIC, strlen(UPGRADE_TOPIC)) ) {
   10538:	2207      	movs	r2, #7
   1053a:	494c      	ldr	r1, [pc, #304]	; (1066c <mqtt_callback+0x180>)
   1053c:	6820      	ldr	r0, [r4, #0]
   1053e:	4b48      	ldr	r3, [pc, #288]	; (10660 <mqtt_callback+0x174>)
   10540:	4798      	blx	r3
   10542:	2800      	cmp	r0, #0
   10544:	d109      	bne.n	1055a <mqtt_callback+0x6e>
		   if(!strncmp(data->recv_publish.msg,"upgrade firmware", data->recv_publish.msg_size)){
   10546:	68e2      	ldr	r2, [r4, #12]
   10548:	4949      	ldr	r1, [pc, #292]	; (10670 <mqtt_callback+0x184>)
   1054a:	68a0      	ldr	r0, [r4, #8]
   1054c:	4b44      	ldr	r3, [pc, #272]	; (10660 <mqtt_callback+0x174>)
   1054e:	4798      	blx	r3
   10550:	2800      	cmp	r0, #0
   10552:	d102      	bne.n	1055a <mqtt_callback+0x6e>
			   write_firmware=true;
   10554:	2201      	movs	r2, #1
   10556:	4b47      	ldr	r3, [pc, #284]	; (10674 <mqtt_callback+0x188>)
   10558:	701a      	strb	r2, [r3, #0]
	   if (!strncmp(data->recv_publish.topic, VERSION_TOPIC, strlen(VERSION_TOPIC)) ) {
   1055a:	2207      	movs	r2, #7
   1055c:	4946      	ldr	r1, [pc, #280]	; (10678 <mqtt_callback+0x18c>)
   1055e:	6820      	ldr	r0, [r4, #0]
   10560:	4b3f      	ldr	r3, [pc, #252]	; (10660 <mqtt_callback+0x174>)
   10562:	4798      	blx	r3
   10564:	1e05      	subs	r5, r0, #0
   10566:	d113      	bne.n	10590 <mqtt_callback+0xa4>
		   for (int i = 0; i < data->recv_publish.msg_size; i++) {
   10568:	68e2      	ldr	r2, [r4, #12]
   1056a:	2a00      	cmp	r2, #0
   1056c:	dd07      	ble.n	1057e <mqtt_callback+0x92>
			   printf("%c", data->recv_publish.msg[i]);
   1056e:	4e43      	ldr	r6, [pc, #268]	; (1067c <mqtt_callback+0x190>)
   10570:	68a3      	ldr	r3, [r4, #8]
   10572:	5d58      	ldrb	r0, [r3, r5]
   10574:	47b0      	blx	r6
		   for (int i = 0; i < data->recv_publish.msg_size; i++) {
   10576:	3501      	adds	r5, #1
   10578:	68e2      	ldr	r2, [r4, #12]
   1057a:	42aa      	cmp	r2, r5
   1057c:	dcf8      	bgt.n	10570 <mqtt_callback+0x84>
		   if(!strncmp(data->recv_publish.msg,"reply", data->recv_publish.msg_size)){
   1057e:	4940      	ldr	r1, [pc, #256]	; (10680 <mqtt_callback+0x194>)
   10580:	68a0      	ldr	r0, [r4, #8]
   10582:	4b37      	ldr	r3, [pc, #220]	; (10660 <mqtt_callback+0x174>)
   10584:	4798      	blx	r3
   10586:	2800      	cmp	r0, #0
   10588:	d102      	bne.n	10590 <mqtt_callback+0xa4>
			   reply_firmware_ver=true;
   1058a:	2201      	movs	r2, #1
   1058c:	4b3d      	ldr	r3, [pc, #244]	; (10684 <mqtt_callback+0x198>)
   1058e:	701a      	strb	r2, [r3, #0]
	   if (!strncmp(data->recv_publish.topic, SENSOR_MQTT_UPDATE_TOPIC, strlen(SENSOR_MQTT_UPDATE_TOPIC)) ){
   10590:	220c      	movs	r2, #12
   10592:	493d      	ldr	r1, [pc, #244]	; (10688 <mqtt_callback+0x19c>)
   10594:	6820      	ldr	r0, [r4, #0]
   10596:	4b32      	ldr	r3, [pc, #200]	; (10660 <mqtt_callback+0x174>)
   10598:	4798      	blx	r3
   1059a:	2800      	cmp	r0, #0
   1059c:	d15c      	bne.n	10658 <mqtt_callback+0x16c>
		   if(!strncmp(data->recv_publish.msg,"send", data->recv_publish.msg_size)){
   1059e:	68e2      	ldr	r2, [r4, #12]
   105a0:	68a0      	ldr	r0, [r4, #8]
   105a2:	493a      	ldr	r1, [pc, #232]	; (1068c <mqtt_callback+0x1a0>)
   105a4:	4b2e      	ldr	r3, [pc, #184]	; (10660 <mqtt_callback+0x174>)
   105a6:	4798      	blx	r3
   105a8:	2800      	cmp	r0, #0
   105aa:	d155      	bne.n	10658 <mqtt_callback+0x16c>
			   sensor_mqtt_update = true;
   105ac:	2201      	movs	r2, #1
   105ae:	4b38      	ldr	r3, [pc, #224]	; (10690 <mqtt_callback+0x1a4>)
   105b0:	701a      	strb	r2, [r3, #0]
   105b2:	e051      	b.n	10658 <mqtt_callback+0x16c>
	switch (type) {
   105b4:	2900      	cmp	r1, #0
   105b6:	d14f      	bne.n	10658 <mqtt_callback+0x16c>
		if (data->sock_connected.result >= 0) {
   105b8:	6813      	ldr	r3, [r2, #0]
   105ba:	2b00      	cmp	r3, #0
   105bc:	db0f      	blt.n	105de <mqtt_callback+0xf2>
      status = mqtt_connect_broker(module_inst, 1, mqtt_user, mqtt_pass, mqtt_user, NULL, NULL, 0, 2, 0);
   105be:	4a35      	ldr	r2, [pc, #212]	; (10694 <mqtt_callback+0x1a8>)
   105c0:	2300      	movs	r3, #0
   105c2:	9305      	str	r3, [sp, #20]
   105c4:	2102      	movs	r1, #2
   105c6:	9104      	str	r1, [sp, #16]
   105c8:	9303      	str	r3, [sp, #12]
   105ca:	9302      	str	r3, [sp, #8]
   105cc:	9301      	str	r3, [sp, #4]
   105ce:	9200      	str	r2, [sp, #0]
   105d0:	4b31      	ldr	r3, [pc, #196]	; (10698 <mqtt_callback+0x1ac>)
   105d2:	3901      	subs	r1, #1
   105d4:	4c31      	ldr	r4, [pc, #196]	; (1069c <mqtt_callback+0x1b0>)
   105d6:	47a0      	blx	r4
   105d8:	4b31      	ldr	r3, [pc, #196]	; (106a0 <mqtt_callback+0x1b4>)
   105da:	6018      	str	r0, [r3, #0]
   105dc:	e03c      	b.n	10658 <mqtt_callback+0x16c>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   105de:	4c31      	ldr	r4, [pc, #196]	; (106a4 <mqtt_callback+0x1b8>)
   105e0:	0021      	movs	r1, r4
   105e2:	4831      	ldr	r0, [pc, #196]	; (106a8 <mqtt_callback+0x1bc>)
   105e4:	4b31      	ldr	r3, [pc, #196]	; (106ac <mqtt_callback+0x1c0>)
   105e6:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   105e8:	0021      	movs	r1, r4
   105ea:	0028      	movs	r0, r5
   105ec:	4b30      	ldr	r3, [pc, #192]	; (106b0 <mqtt_callback+0x1c4>)
   105ee:	4798      	blx	r3
   105f0:	e032      	b.n	10658 <mqtt_callback+0x16c>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   105f2:	7811      	ldrb	r1, [r2, #0]
   105f4:	2900      	cmp	r1, #0
   105f6:	d11e      	bne.n	10636 <mqtt_callback+0x14a>
			status = mqtt_subscribe(module_inst, ACTUATOR_TOPIC, 2);
   105f8:	2202      	movs	r2, #2
   105fa:	4918      	ldr	r1, [pc, #96]	; (1065c <mqtt_callback+0x170>)
   105fc:	4e2d      	ldr	r6, [pc, #180]	; (106b4 <mqtt_callback+0x1c8>)
   105fe:	47b0      	blx	r6
   10600:	4c27      	ldr	r4, [pc, #156]	; (106a0 <mqtt_callback+0x1b4>)
   10602:	6020      	str	r0, [r4, #0]
			status = mqtt_subscribe(module_inst, UPGRADE_TOPIC, 2);
   10604:	2202      	movs	r2, #2
   10606:	4919      	ldr	r1, [pc, #100]	; (1066c <mqtt_callback+0x180>)
   10608:	0028      	movs	r0, r5
   1060a:	47b0      	blx	r6
   1060c:	6020      	str	r0, [r4, #0]
			status = mqtt_subscribe(module_inst, VERSION_TOPIC, 2);
   1060e:	2202      	movs	r2, #2
   10610:	4919      	ldr	r1, [pc, #100]	; (10678 <mqtt_callback+0x18c>)
   10612:	0028      	movs	r0, r5
   10614:	47b0      	blx	r6
   10616:	6020      	str	r0, [r4, #0]
			status = mqtt_subscribe(module_inst, SENSOR_MQTT_UPDATE_TOPIC, 2);
   10618:	2202      	movs	r2, #2
   1061a:	491b      	ldr	r1, [pc, #108]	; (10688 <mqtt_callback+0x19c>)
   1061c:	0028      	movs	r0, r5
   1061e:	47b0      	blx	r6
   10620:	6020      	str	r0, [r4, #0]
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   10622:	4925      	ldr	r1, [pc, #148]	; (106b8 <mqtt_callback+0x1cc>)
   10624:	2231      	movs	r2, #49	; 0x31
   10626:	5c8b      	ldrb	r3, [r1, r2]
   10628:	2002      	movs	r0, #2
   1062a:	4303      	orrs	r3, r0
   1062c:	548b      	strb	r3, [r1, r2]
			printf("Finished subscribing to MQTT topics!\r\n");
   1062e:	4823      	ldr	r0, [pc, #140]	; (106bc <mqtt_callback+0x1d0>)
   10630:	4b23      	ldr	r3, [pc, #140]	; (106c0 <mqtt_callback+0x1d4>)
   10632:	4798      	blx	r3
   10634:	e010      	b.n	10658 <mqtt_callback+0x16c>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
   10636:	4823      	ldr	r0, [pc, #140]	; (106c4 <mqtt_callback+0x1d8>)
   10638:	4b1c      	ldr	r3, [pc, #112]	; (106ac <mqtt_callback+0x1c0>)
   1063a:	4798      	blx	r3
   1063c:	e00c      	b.n	10658 <mqtt_callback+0x16c>
		port_base->OUTCLR.reg = pin_mask;
   1063e:	2204      	movs	r2, #4
   10640:	4b09      	ldr	r3, [pc, #36]	; (10668 <mqtt_callback+0x17c>)
   10642:	615a      	str	r2, [r3, #20]
   10644:	e778      	b.n	10538 <mqtt_callback+0x4c>
		printf("MQTT disconnected\r\n");
   10646:	4820      	ldr	r0, [pc, #128]	; (106c8 <mqtt_callback+0x1dc>)
   10648:	4b1d      	ldr	r3, [pc, #116]	; (106c0 <mqtt_callback+0x1d4>)
   1064a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
   1064c:	491a      	ldr	r1, [pc, #104]	; (106b8 <mqtt_callback+0x1cc>)
   1064e:	2231      	movs	r2, #49	; 0x31
   10650:	5c8b      	ldrb	r3, [r1, r2]
   10652:	2002      	movs	r0, #2
   10654:	4383      	bics	r3, r0
   10656:	548b      	strb	r3, [r1, r2]
}
   10658:	b006      	add	sp, #24
   1065a:	bd70      	pop	{r4, r5, r6, pc}
   1065c:	00016e40 	.word	0x00016e40
   10660:	0001444d 	.word	0x0001444d
   10664:	00016ec8 	.word	0x00016ec8
   10668:	41004480 	.word	0x41004480
   1066c:	00016e4c 	.word	0x00016e4c
   10670:	00016ed0 	.word	0x00016ed0
   10674:	200003d4 	.word	0x200003d4
   10678:	00016e54 	.word	0x00016e54
   1067c:	00014111 	.word	0x00014111
   10680:	00016ee4 	.word	0x00016ee4
   10684:	200003d0 	.word	0x200003d0
   10688:	00016e5c 	.word	0x00016e5c
   1068c:	00016eec 	.word	0x00016eec
   10690:	200003d1 	.word	0x200003d1
   10694:	20000018 	.word	0x20000018
   10698:	20000010 	.word	0x20000010
   1069c:	00011775 	.word	0x00011775
   106a0:	20001004 	.word	0x20001004
   106a4:	00016df4 	.word	0x00016df4
   106a8:	00016e08 	.word	0x00016e08
   106ac:	000140dd 	.word	0x000140dd
   106b0:	00011661 	.word	0x00011661
   106b4:	00011bcd 	.word	0x00011bcd
   106b8:	200005a0 	.word	0x200005a0
   106bc:	00016e6c 	.word	0x00016e6c
   106c0:	000141f9 	.word	0x000141f9
   106c4:	00016e94 	.word	0x00016e94
   106c8:	00016ef4 	.word	0x00016ef4

000106cc <wifi_cb>:

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   106cc:	b510      	push	{r4, lr}
   106ce:	b082      	sub	sp, #8
	switch (u8MsgType) {
   106d0:	282c      	cmp	r0, #44	; 0x2c
   106d2:	d003      	beq.n	106dc <wifi_cb+0x10>
   106d4:	2832      	cmp	r0, #50	; 0x32
   106d6:	d02f      	beq.n	10738 <wifi_cb+0x6c>
		}

		default:
		break;
	}
}
   106d8:	b002      	add	sp, #8
   106da:	bd10      	pop	{r4, pc}
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   106dc:	780b      	ldrb	r3, [r1, #0]
   106de:	2b01      	cmp	r3, #1
   106e0:	d01a      	beq.n	10718 <wifi_cb+0x4c>
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   106e2:	2b00      	cmp	r3, #0
   106e4:	d1f8      	bne.n	106d8 <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   106e6:	481d      	ldr	r0, [pc, #116]	; (1075c <wifi_cb+0x90>)
   106e8:	4b1d      	ldr	r3, [pc, #116]	; (10760 <wifi_cb+0x94>)
   106ea:	4798      	blx	r3
	down_state &= ~mask;
   106ec:	4b1d      	ldr	r3, [pc, #116]	; (10764 <wifi_cb+0x98>)
   106ee:	2200      	movs	r2, #0
   106f0:	569a      	ldrsb	r2, [r3, r2]
   106f2:	23fd      	movs	r3, #253	; 0xfd
   106f4:	4013      	ands	r3, r2
				if (is_state_set(DOWNLOADING)) {
   106f6:	0719      	lsls	r1, r3, #28
   106f8:	d414      	bmi.n	10724 <wifi_cb+0x58>
	down_state &= ~mask;
   106fa:	4a1a      	ldr	r2, [pc, #104]	; (10764 <wifi_cb+0x98>)
   106fc:	7013      	strb	r3, [r2, #0]
	return ((down_state & mask) != 0);
   106fe:	4b19      	ldr	r3, [pc, #100]	; (10764 <wifi_cb+0x98>)
   10700:	781b      	ldrb	r3, [r3, #0]
				if (is_state_set(GET_REQUESTED)) {
   10702:	075a      	lsls	r2, r3, #29
   10704:	d413      	bmi.n	1072e <wifi_cb+0x62>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   10706:	23ff      	movs	r3, #255	; 0xff
   10708:	9300      	str	r3, [sp, #0]
   1070a:	4b17      	ldr	r3, [pc, #92]	; (10768 <wifi_cb+0x9c>)
   1070c:	2202      	movs	r2, #2
   1070e:	210b      	movs	r1, #11
   10710:	4816      	ldr	r0, [pc, #88]	; (1076c <wifi_cb+0xa0>)
   10712:	4c17      	ldr	r4, [pc, #92]	; (10770 <wifi_cb+0xa4>)
   10714:	47a0      	blx	r4
   10716:	e7df      	b.n	106d8 <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
   10718:	4816      	ldr	r0, [pc, #88]	; (10774 <wifi_cb+0xa8>)
   1071a:	4b11      	ldr	r3, [pc, #68]	; (10760 <wifi_cb+0x94>)
   1071c:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
   1071e:	4b16      	ldr	r3, [pc, #88]	; (10778 <wifi_cb+0xac>)
   10720:	4798      	blx	r3
   10722:	e7d9      	b.n	106d8 <wifi_cb+0xc>
	down_state &= ~mask;
   10724:	230a      	movs	r3, #10
   10726:	439a      	bics	r2, r3
   10728:	4b0e      	ldr	r3, [pc, #56]	; (10764 <wifi_cb+0x98>)
   1072a:	701a      	strb	r2, [r3, #0]
   1072c:	e7e7      	b.n	106fe <wifi_cb+0x32>
   1072e:	2204      	movs	r2, #4
   10730:	4393      	bics	r3, r2
   10732:	4a0c      	ldr	r2, [pc, #48]	; (10764 <wifi_cb+0x98>)
   10734:	7013      	strb	r3, [r2, #0]
   10736:	e7e6      	b.n	10706 <wifi_cb+0x3a>
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   10738:	788b      	ldrb	r3, [r1, #2]
   1073a:	784a      	ldrb	r2, [r1, #1]
   1073c:	7808      	ldrb	r0, [r1, #0]
   1073e:	78c9      	ldrb	r1, [r1, #3]
   10740:	9100      	str	r1, [sp, #0]
   10742:	0001      	movs	r1, r0
   10744:	480d      	ldr	r0, [pc, #52]	; (1077c <wifi_cb+0xb0>)
   10746:	4c0e      	ldr	r4, [pc, #56]	; (10780 <wifi_cb+0xb4>)
   10748:	47a0      	blx	r4
	down_state |= mask;
   1074a:	4a06      	ldr	r2, [pc, #24]	; (10764 <wifi_cb+0x98>)
   1074c:	7813      	ldrb	r3, [r2, #0]
   1074e:	2102      	movs	r1, #2
   10750:	430b      	orrs	r3, r1
   10752:	7013      	strb	r3, [r2, #0]
			start_download();
   10754:	4b0b      	ldr	r3, [pc, #44]	; (10784 <wifi_cb+0xb8>)
   10756:	4798      	blx	r3
}
   10758:	e7be      	b.n	106d8 <wifi_cb+0xc>
   1075a:	46c0      	nop			; (mov r8, r8)
   1075c:	00017100 	.word	0x00017100
   10760:	000141f9 	.word	0x000141f9
   10764:	2000028c 	.word	0x2000028c
   10768:	000170ac 	.word	0x000170ac
   1076c:	000170b8 	.word	0x000170b8
   10770:	000094b9 	.word	0x000094b9
   10774:	000170e0 	.word	0x000170e0
   10778:	000094d5 	.word	0x000094d5
   1077c:	00017120 	.word	0x00017120
   10780:	000140dd 	.word	0x000140dd
   10784:	00010365 	.word	0x00010365

00010788 <configure_i2c>:
{
   10788:	b530      	push	{r4, r5, lr}
   1078a:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   1078c:	ab01      	add	r3, sp, #4
   1078e:	2264      	movs	r2, #100	; 0x64
   10790:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   10792:	4a22      	ldr	r2, [pc, #136]	; (1081c <configure_i2c+0x94>)
   10794:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   10796:	2200      	movs	r2, #0
   10798:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   1079a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   1079c:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   1079e:	2180      	movs	r1, #128	; 0x80
   107a0:	0389      	lsls	r1, r1, #14
   107a2:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
   107a4:	2101      	movs	r1, #1
   107a6:	4249      	negs	r1, r1
   107a8:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   107aa:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
   107ac:	3125      	adds	r1, #37	; 0x25
   107ae:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   107b0:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   107b2:	3108      	adds	r1, #8
   107b4:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   107b6:	3101      	adds	r1, #1
   107b8:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
   107ba:	3101      	adds	r1, #1
   107bc:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   107be:	32d7      	adds	r2, #215	; 0xd7
   107c0:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0    = PINMUX_PA08C_SERCOM0_PAD0;
   107c2:	4a17      	ldr	r2, [pc, #92]	; (10820 <configure_i2c+0x98>)
   107c4:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1    = PINMUX_PA09C_SERCOM0_PAD1;
   107c6:	4a17      	ldr	r2, [pc, #92]	; (10824 <configure_i2c+0x9c>)
   107c8:	9209      	str	r2, [sp, #36]	; 0x24
	while(i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master)     \
   107ca:	4d17      	ldr	r5, [pc, #92]	; (10828 <configure_i2c+0xa0>)
   107cc:	4c17      	ldr	r4, [pc, #92]	; (1082c <configure_i2c+0xa4>)
   107ce:	aa01      	add	r2, sp, #4
   107d0:	4917      	ldr	r1, [pc, #92]	; (10830 <configure_i2c+0xa8>)
   107d2:	0028      	movs	r0, r5
   107d4:	47a0      	blx	r4
   107d6:	2800      	cmp	r0, #0
   107d8:	d1f9      	bne.n	107ce <configure_i2c+0x46>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   107da:	4b13      	ldr	r3, [pc, #76]	; (10828 <configure_i2c+0xa0>)
   107dc:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   107de:	2207      	movs	r2, #7
   107e0:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
   107e2:	421a      	tst	r2, r3
   107e4:	d1fc      	bne.n	107e0 <configure_i2c+0x58>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   107e6:	6823      	ldr	r3, [r4, #0]
   107e8:	2202      	movs	r2, #2
   107ea:	4313      	orrs	r3, r2
   107ec:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   107ee:	4d0e      	ldr	r5, [pc, #56]	; (10828 <configure_i2c+0xa0>)
   107f0:	6828      	ldr	r0, [r5, #0]
   107f2:	4b10      	ldr	r3, [pc, #64]	; (10834 <configure_i2c+0xac>)
   107f4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   107f6:	231f      	movs	r3, #31
   107f8:	4018      	ands	r0, r3
   107fa:	3b1e      	subs	r3, #30
   107fc:	4083      	lsls	r3, r0
   107fe:	4a0e      	ldr	r2, [pc, #56]	; (10838 <configure_i2c+0xb0>)
   10800:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   10802:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
   10804:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   10806:	2110      	movs	r1, #16
   10808:	8b62      	ldrh	r2, [r4, #26]
   1080a:	420a      	tst	r2, r1
   1080c:	d104      	bne.n	10818 <configure_i2c+0x90>
		timeout_counter++;
   1080e:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   10810:	4283      	cmp	r3, r0
   10812:	d3f9      	bcc.n	10808 <configure_i2c+0x80>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   10814:	2310      	movs	r3, #16
   10816:	8363      	strh	r3, [r4, #26]
}
   10818:	b00f      	add	sp, #60	; 0x3c
   1081a:	bd30      	pop	{r4, r5, pc}
   1081c:	00000d48 	.word	0x00000d48
   10820:	00080002 	.word	0x00080002
   10824:	00090002 	.word	0x00090002
   10828:	20000f84 	.word	0x20000f84
   1082c:	0000ba39 	.word	0x0000ba39
   10830:	42000800 	.word	0x42000800
   10834:	0000ec31 	.word	0x0000ec31
   10838:	e000e100 	.word	0xe000e100

0001083c <configure_port_pins>:
{
   1083c:	b570      	push	{r4, r5, r6, lr}
   1083e:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
   10840:	ac01      	add	r4, sp, #4
   10842:	2301      	movs	r3, #1
   10844:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
   10846:	2600      	movs	r6, #0
   10848:	70a6      	strb	r6, [r4, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   1084a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
   1084c:	0021      	movs	r1, r4
   1084e:	2022      	movs	r0, #34	; 0x22
   10850:	4d03      	ldr	r5, [pc, #12]	; (10860 <configure_port_pins+0x24>)
   10852:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
   10854:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(B1, &config_port_pin);
   10856:	0021      	movs	r1, r4
   10858:	2036      	movs	r0, #54	; 0x36
   1085a:	47a8      	blx	r5
}
   1085c:	b002      	add	sp, #8
   1085e:	bd70      	pop	{r4, r5, r6, pc}
   10860:	0000e859 	.word	0x0000e859

00010864 <write_spi_flash_frm_buf>:
void write_spi_flash_frm_buf(uint32 len){
   10864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10866:	0005      	movs	r5, r0
	at25dfx_chip_wake(&at25dfx_chip);
   10868:	4c0f      	ldr	r4, [pc, #60]	; (108a8 <write_spi_flash_frm_buf+0x44>)
   1086a:	0020      	movs	r0, r4
   1086c:	4b0f      	ldr	r3, [pc, #60]	; (108ac <write_spi_flash_frm_buf+0x48>)
   1086e:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
   10870:	0020      	movs	r0, r4
   10872:	4b0f      	ldr	r3, [pc, #60]	; (108b0 <write_spi_flash_frm_buf+0x4c>)
   10874:	4798      	blx	r3
   10876:	2800      	cmp	r0, #0
   10878:	d112      	bne.n	108a0 <write_spi_flash_frm_buf+0x3c>
	at25dfx_chip_write_buffer(&at25dfx_chip, flash_addr, http_buf + http_buf_read_ptr, len);	// write buffer
   1087a:	b2ab      	uxth	r3, r5
   1087c:	4a0d      	ldr	r2, [pc, #52]	; (108b4 <write_spi_flash_frm_buf+0x50>)
   1087e:	6812      	ldr	r2, [r2, #0]
   10880:	490d      	ldr	r1, [pc, #52]	; (108b8 <write_spi_flash_frm_buf+0x54>)
   10882:	1852      	adds	r2, r2, r1
   10884:	4c0d      	ldr	r4, [pc, #52]	; (108bc <write_spi_flash_frm_buf+0x58>)
   10886:	4e08      	ldr	r6, [pc, #32]	; (108a8 <write_spi_flash_frm_buf+0x44>)
   10888:	6821      	ldr	r1, [r4, #0]
   1088a:	0030      	movs	r0, r6
   1088c:	4f0c      	ldr	r7, [pc, #48]	; (108c0 <write_spi_flash_frm_buf+0x5c>)
   1088e:	47b8      	blx	r7
	at25dfx_chip_sleep(&at25dfx_chip);											// back to sleep
   10890:	0030      	movs	r0, r6
   10892:	4b0c      	ldr	r3, [pc, #48]	; (108c4 <write_spi_flash_frm_buf+0x60>)
   10894:	4798      	blx	r3
	flash_addr = flash_addr + len;
   10896:	6823      	ldr	r3, [r4, #0]
   10898:	469c      	mov	ip, r3
   1089a:	4465      	add	r5, ip
   1089c:	6025      	str	r5, [r4, #0]
}
   1089e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("Chip didnt wake \r\n");
   108a0:	4809      	ldr	r0, [pc, #36]	; (108c8 <write_spi_flash_frm_buf+0x64>)
   108a2:	4b0a      	ldr	r3, [pc, #40]	; (108cc <write_spi_flash_frm_buf+0x68>)
   108a4:	4798      	blx	r3
   108a6:	e7e8      	b.n	1087a <write_spi_flash_frm_buf+0x16>
   108a8:	20000e30 	.word	0x20000e30
   108ac:	0000e4c9 	.word	0x0000e4c9
   108b0:	0000dbed 	.word	0x0000dbed
   108b4:	20000290 	.word	0x20000290
   108b8:	20000630 	.word	0x20000630
   108bc:	200005d4 	.word	0x200005d4
   108c0:	0000dcf9 	.word	0x0000dcf9
   108c4:	0000e43d 	.word	0x0000e43d
   108c8:	00017148 	.word	0x00017148
   108cc:	000141f9 	.word	0x000141f9

000108d0 <http_client_callback>:
{
   108d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108d2:	46ce      	mov	lr, r9
   108d4:	4647      	mov	r7, r8
   108d6:	b580      	push	{r7, lr}
   108d8:	0014      	movs	r4, r2
	switch (type) {
   108da:	2904      	cmp	r1, #4
   108dc:	d806      	bhi.n	108ec <http_client_callback+0x1c>
   108de:	0089      	lsls	r1, r1, #2
   108e0:	4b86      	ldr	r3, [pc, #536]	; (10afc <http_client_callback+0x22c>)
   108e2:	585b      	ldr	r3, [r3, r1]
   108e4:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
   108e6:	4886      	ldr	r0, [pc, #536]	; (10b00 <http_client_callback+0x230>)
   108e8:	4b86      	ldr	r3, [pc, #536]	; (10b04 <http_client_callback+0x234>)
   108ea:	4798      	blx	r3
}
   108ec:	bc0c      	pop	{r2, r3}
   108ee:	4690      	mov	r8, r2
   108f0:	4699      	mov	r9, r3
   108f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("http_client_callback: request completed.\r\n");
   108f4:	4884      	ldr	r0, [pc, #528]	; (10b08 <http_client_callback+0x238>)
   108f6:	4b83      	ldr	r3, [pc, #524]	; (10b04 <http_client_callback+0x234>)
   108f8:	4798      	blx	r3
	down_state |= mask;
   108fa:	4a84      	ldr	r2, [pc, #528]	; (10b0c <http_client_callback+0x23c>)
   108fc:	7813      	ldrb	r3, [r2, #0]
   108fe:	2104      	movs	r1, #4
   10900:	430b      	orrs	r3, r1
   10902:	7013      	strb	r3, [r2, #0]
   10904:	e7f2      	b.n	108ec <http_client_callback+0x1c>
		printf("http_client_callback: received response %u data size %u\r\n",
   10906:	8811      	ldrh	r1, [r2, #0]
   10908:	6852      	ldr	r2, [r2, #4]
   1090a:	4881      	ldr	r0, [pc, #516]	; (10b10 <http_client_callback+0x240>)
   1090c:	4b81      	ldr	r3, [pc, #516]	; (10b14 <http_client_callback+0x244>)
   1090e:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
   10910:	8823      	ldrh	r3, [r4, #0]
   10912:	2bc8      	cmp	r3, #200	; 0xc8
   10914:	d121      	bne.n	1095a <http_client_callback+0x8a>
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   10916:	2380      	movs	r3, #128	; 0x80
   10918:	00db      	lsls	r3, r3, #3
   1091a:	6862      	ldr	r2, [r4, #4]
   1091c:	429a      	cmp	r2, r3
   1091e:	d8e5      	bhi.n	108ec <http_client_callback+0x1c>
			printf("Callback: CRC download......\r\n");
   10920:	487d      	ldr	r0, [pc, #500]	; (10b18 <http_client_callback+0x248>)
   10922:	4b78      	ldr	r3, [pc, #480]	; (10b04 <http_client_callback+0x234>)
   10924:	4798      	blx	r3
			dlCRC = *(uint32_t *)data->recv_response.content;
   10926:	68a3      	ldr	r3, [r4, #8]
   10928:	681b      	ldr	r3, [r3, #0]
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
   1092a:	0e19      	lsrs	r1, r3, #24
                    ((dlCRC<<24)&0xff000000); // byte 0 to byte 3
   1092c:	061a      	lsls	r2, r3, #24
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
   1092e:	4311      	orrs	r1, r2
                    ((dlCRC<<8)&0xff0000) | // move byte 1 to byte 2
   10930:	021a      	lsls	r2, r3, #8
   10932:	20ff      	movs	r0, #255	; 0xff
   10934:	0400      	lsls	r0, r0, #16
   10936:	4002      	ands	r2, r0
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
   10938:	4311      	orrs	r1, r2
   1093a:	0a1b      	lsrs	r3, r3, #8
   1093c:	22ff      	movs	r2, #255	; 0xff
   1093e:	0212      	lsls	r2, r2, #8
   10940:	4013      	ands	r3, r2
   10942:	4319      	orrs	r1, r3
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
   10944:	4b75      	ldr	r3, [pc, #468]	; (10b1c <http_client_callback+0x24c>)
   10946:	6019      	str	r1, [r3, #0]
			printf("Received %x\r\n", (uint32_t)dlCRC);
   10948:	4875      	ldr	r0, [pc, #468]	; (10b20 <http_client_callback+0x250>)
   1094a:	4b72      	ldr	r3, [pc, #456]	; (10b14 <http_client_callback+0x244>)
   1094c:	4798      	blx	r3
	down_state |= mask;
   1094e:	4a6f      	ldr	r2, [pc, #444]	; (10b0c <http_client_callback+0x23c>)
   10950:	7813      	ldrb	r3, [r2, #0]
   10952:	2110      	movs	r1, #16
   10954:	430b      	orrs	r3, r1
   10956:	7013      	strb	r3, [r2, #0]
   10958:	e7c8      	b.n	108ec <http_client_callback+0x1c>
   1095a:	4a6c      	ldr	r2, [pc, #432]	; (10b0c <http_client_callback+0x23c>)
   1095c:	7813      	ldrb	r3, [r2, #0]
   1095e:	2120      	movs	r1, #32
   10960:	430b      	orrs	r3, r1
   10962:	7013      	strb	r3, [r2, #0]
   10964:	e7c2      	b.n	108ec <http_client_callback+0x1c>
		printf("http_client_callback_CHUNKED DATA: received response data size %u\r\n",
   10966:	6811      	ldr	r1, [r2, #0]
   10968:	486e      	ldr	r0, [pc, #440]	; (10b24 <http_client_callback+0x254>)
   1096a:	4b6a      	ldr	r3, [pc, #424]	; (10b14 <http_client_callback+0x244>)
   1096c:	4798      	blx	r3
		if (firstCRC) {
   1096e:	4b6e      	ldr	r3, [pc, #440]	; (10b28 <http_client_callback+0x258>)
   10970:	781b      	ldrb	r3, [r3, #0]
   10972:	2b00      	cmp	r3, #0
   10974:	d05a      	beq.n	10a2c <http_client_callback+0x15c>
			crc32_calculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
   10976:	6821      	ldr	r1, [r4, #0]
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
	*crc = 0;
   10978:	4d6c      	ldr	r5, [pc, #432]	; (10b2c <http_client_callback+0x25c>)
   1097a:	2600      	movs	r6, #0
   1097c:	602e      	str	r6, [r5, #0]

	return crc32_recalculate(data, length, crc);
   1097e:	002a      	movs	r2, r5
   10980:	6860      	ldr	r0, [r4, #4]
   10982:	4b6b      	ldr	r3, [pc, #428]	; (10b30 <http_client_callback+0x260>)
   10984:	4798      	blx	r3
			printf("First block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
   10986:	682a      	ldr	r2, [r5, #0]
   10988:	6821      	ldr	r1, [r4, #0]
   1098a:	486a      	ldr	r0, [pc, #424]	; (10b34 <http_client_callback+0x264>)
   1098c:	4b61      	ldr	r3, [pc, #388]	; (10b14 <http_client_callback+0x244>)
   1098e:	4798      	blx	r3
			firstCRC = false;
   10990:	4b65      	ldr	r3, [pc, #404]	; (10b28 <http_client_callback+0x258>)
   10992:	701e      	strb	r6, [r3, #0]
		if (http_buf_write_ptr + data->recv_chunked_data.length > 2048){
   10994:	6822      	ldr	r2, [r4, #0]
   10996:	4b68      	ldr	r3, [pc, #416]	; (10b38 <http_client_callback+0x268>)
   10998:	681d      	ldr	r5, [r3, #0]
   1099a:	1951      	adds	r1, r2, r5
   1099c:	2380      	movs	r3, #128	; 0x80
   1099e:	011b      	lsls	r3, r3, #4
   109a0:	4299      	cmp	r1, r3
   109a2:	d94f      	bls.n	10a44 <http_client_callback+0x174>
			memcpy_ram2ram(http_buf + http_buf_write_ptr,data->recv_chunked_data.data,(2048-http_buf_write_ptr));
   109a4:	1b5e      	subs	r6, r3, r5
   109a6:	4b65      	ldr	r3, [pc, #404]	; (10b3c <http_client_callback+0x26c>)
   109a8:	4698      	mov	r8, r3
   109aa:	18e8      	adds	r0, r5, r3
   109ac:	0032      	movs	r2, r6
   109ae:	6861      	ldr	r1, [r4, #4]
   109b0:	4f63      	ldr	r7, [pc, #396]	; (10b40 <http_client_callback+0x270>)
   109b2:	47b8      	blx	r7
   109b4:	4b63      	ldr	r3, [pc, #396]	; (10b44 <http_client_callback+0x274>)
   109b6:	469c      	mov	ip, r3
   109b8:	4465      	add	r5, ip
			memcpy_ram2ram(http_buf, data->recv_chunked_data.data + (2048-http_buf_write_ptr), data->recv_chunked_data.length-(2048-http_buf_write_ptr));
   109ba:	6823      	ldr	r3, [r4, #0]
   109bc:	18ea      	adds	r2, r5, r3
   109be:	6863      	ldr	r3, [r4, #4]
   109c0:	1999      	adds	r1, r3, r6
   109c2:	4640      	mov	r0, r8
   109c4:	47b8      	blx	r7
			http_buf_write_ptr = data->recv_chunked_data.length-(2048-http_buf_write_ptr);
   109c6:	6823      	ldr	r3, [r4, #0]
   109c8:	469c      	mov	ip, r3
   109ca:	4465      	add	r5, ip
   109cc:	4b5a      	ldr	r3, [pc, #360]	; (10b38 <http_client_callback+0x268>)
   109ce:	601d      	str	r5, [r3, #0]
		if  (http_buf_write_ptr > http_buf_read_ptr){
   109d0:	4b59      	ldr	r3, [pc, #356]	; (10b38 <http_client_callback+0x268>)
   109d2:	681f      	ldr	r7, [r3, #0]
   109d4:	4b5c      	ldr	r3, [pc, #368]	; (10b48 <http_client_callback+0x278>)
   109d6:	681b      	ldr	r3, [r3, #0]
   109d8:	429f      	cmp	r7, r3
   109da:	d93e      	bls.n	10a5a <http_client_callback+0x18a>
			uint8 n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
   109dc:	1aff      	subs	r7, r7, r3
			for (int i=0 ; i<n ; i++ ){
   109de:	043f      	lsls	r7, r7, #16
   109e0:	0e3f      	lsrs	r7, r7, #24
   109e2:	2f00      	cmp	r7, #0
   109e4:	dd0d      	ble.n	10a02 <http_client_callback+0x132>
   109e6:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
   109e8:	4b58      	ldr	r3, [pc, #352]	; (10b4c <http_client_callback+0x27c>)
   109ea:	4699      	mov	r9, r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
   109ec:	4e56      	ldr	r6, [pc, #344]	; (10b48 <http_client_callback+0x278>)
				write_spi_flash_frm_buf(256);
   109ee:	2080      	movs	r0, #128	; 0x80
   109f0:	0040      	lsls	r0, r0, #1
   109f2:	47c8      	blx	r9
				http_buf_read_ptr = http_buf_read_ptr + 256;
   109f4:	6833      	ldr	r3, [r6, #0]
   109f6:	3301      	adds	r3, #1
   109f8:	33ff      	adds	r3, #255	; 0xff
   109fa:	6033      	str	r3, [r6, #0]
			for (int i=0 ; i<n ; i++ ){
   109fc:	3501      	adds	r5, #1
   109fe:	42bd      	cmp	r5, r7
   10a00:	d1f5      	bne.n	109ee <http_client_callback+0x11e>
		if (data->recv_chunked_data.is_complete) {
   10a02:	7a23      	ldrb	r3, [r4, #8]
   10a04:	2b00      	cmp	r3, #0
   10a06:	d100      	bne.n	10a0a <http_client_callback+0x13a>
   10a08:	e770      	b.n	108ec <http_client_callback+0x1c>
	down_state |= mask;
   10a0a:	4a40      	ldr	r2, [pc, #256]	; (10b0c <http_client_callback+0x23c>)
   10a0c:	7813      	ldrb	r3, [r2, #0]
   10a0e:	2110      	movs	r1, #16
   10a10:	430b      	orrs	r3, r1
   10a12:	7013      	strb	r3, [r2, #0]
			if  (http_buf_write_ptr < http_buf_read_ptr){
   10a14:	4b48      	ldr	r3, [pc, #288]	; (10b38 <http_client_callback+0x268>)
   10a16:	6818      	ldr	r0, [r3, #0]
   10a18:	4b4b      	ldr	r3, [pc, #300]	; (10b48 <http_client_callback+0x278>)
   10a1a:	681b      	ldr	r3, [r3, #0]
   10a1c:	4298      	cmp	r0, r3
   10a1e:	d349      	bcc.n	10ab4 <http_client_callback+0x1e4>
			else if(http_buf_write_ptr > http_buf_read_ptr){
   10a20:	d800      	bhi.n	10a24 <http_client_callback+0x154>
   10a22:	e763      	b.n	108ec <http_client_callback+0x1c>
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
   10a24:	1ac0      	subs	r0, r0, r3
   10a26:	4b49      	ldr	r3, [pc, #292]	; (10b4c <http_client_callback+0x27c>)
   10a28:	4798      	blx	r3
   10a2a:	e75f      	b.n	108ec <http_client_callback+0x1c>
			crc32_recalculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
   10a2c:	4d3f      	ldr	r5, [pc, #252]	; (10b2c <http_client_callback+0x25c>)
   10a2e:	002a      	movs	r2, r5
   10a30:	6821      	ldr	r1, [r4, #0]
   10a32:	6860      	ldr	r0, [r4, #4]
   10a34:	4b3e      	ldr	r3, [pc, #248]	; (10b30 <http_client_callback+0x260>)
   10a36:	4798      	blx	r3
			printf("Block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
   10a38:	682a      	ldr	r2, [r5, #0]
   10a3a:	6821      	ldr	r1, [r4, #0]
   10a3c:	4844      	ldr	r0, [pc, #272]	; (10b50 <http_client_callback+0x280>)
   10a3e:	4b35      	ldr	r3, [pc, #212]	; (10b14 <http_client_callback+0x244>)
   10a40:	4798      	blx	r3
   10a42:	e7a7      	b.n	10994 <http_client_callback+0xc4>
			memcpy_ram2ram(http_buf + http_buf_write_ptr, data->recv_chunked_data.data, data->recv_chunked_data.length);
   10a44:	483d      	ldr	r0, [pc, #244]	; (10b3c <http_client_callback+0x26c>)
   10a46:	1828      	adds	r0, r5, r0
   10a48:	6861      	ldr	r1, [r4, #4]
   10a4a:	4b3d      	ldr	r3, [pc, #244]	; (10b40 <http_client_callback+0x270>)
   10a4c:	4798      	blx	r3
			http_buf_write_ptr = http_buf_write_ptr + data->recv_chunked_data.length;
   10a4e:	6823      	ldr	r3, [r4, #0]
   10a50:	469c      	mov	ip, r3
   10a52:	4465      	add	r5, ip
   10a54:	4b38      	ldr	r3, [pc, #224]	; (10b38 <http_client_callback+0x268>)
   10a56:	601d      	str	r5, [r3, #0]
   10a58:	e7ba      	b.n	109d0 <http_client_callback+0x100>
		else if (http_buf_write_ptr < http_buf_read_ptr){
   10a5a:	429f      	cmp	r7, r3
   10a5c:	d2d1      	bcs.n	10a02 <http_client_callback+0x132>
			uint8 n = (2048 - http_buf_read_ptr) / 256;
   10a5e:	2780      	movs	r7, #128	; 0x80
   10a60:	013f      	lsls	r7, r7, #4
   10a62:	1aff      	subs	r7, r7, r3
			for (int i=0 ; i<n ; i++ ){
   10a64:	043f      	lsls	r7, r7, #16
   10a66:	0e3b      	lsrs	r3, r7, #24
   10a68:	4698      	mov	r8, r3
   10a6a:	2b00      	cmp	r3, #0
   10a6c:	dd0c      	ble.n	10a88 <http_client_callback+0x1b8>
   10a6e:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
   10a70:	4e36      	ldr	r6, [pc, #216]	; (10b4c <http_client_callback+0x27c>)
				http_buf_read_ptr = http_buf_read_ptr + 256;
   10a72:	4f35      	ldr	r7, [pc, #212]	; (10b48 <http_client_callback+0x278>)
				write_spi_flash_frm_buf(256);
   10a74:	2080      	movs	r0, #128	; 0x80
   10a76:	0040      	lsls	r0, r0, #1
   10a78:	47b0      	blx	r6
				http_buf_read_ptr = http_buf_read_ptr + 256;
   10a7a:	683b      	ldr	r3, [r7, #0]
   10a7c:	3301      	adds	r3, #1
   10a7e:	33ff      	adds	r3, #255	; 0xff
   10a80:	603b      	str	r3, [r7, #0]
			for (int i=0 ; i<n ; i++ ){
   10a82:	3501      	adds	r5, #1
   10a84:	45a8      	cmp	r8, r5
   10a86:	d1f5      	bne.n	10a74 <http_client_callback+0x1a4>
			http_buf_read_ptr = 0;
   10a88:	2200      	movs	r2, #0
   10a8a:	4b2f      	ldr	r3, [pc, #188]	; (10b48 <http_client_callback+0x278>)
   10a8c:	601a      	str	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
   10a8e:	4b2a      	ldr	r3, [pc, #168]	; (10b38 <http_client_callback+0x268>)
   10a90:	785b      	ldrb	r3, [r3, #1]
   10a92:	4698      	mov	r8, r3
   10a94:	2b00      	cmp	r3, #0
   10a96:	ddb4      	ble.n	10a02 <http_client_callback+0x132>
   10a98:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
   10a9a:	4e2c      	ldr	r6, [pc, #176]	; (10b4c <http_client_callback+0x27c>)
				http_buf_read_ptr = http_buf_read_ptr + 256;
   10a9c:	4f2a      	ldr	r7, [pc, #168]	; (10b48 <http_client_callback+0x278>)
				write_spi_flash_frm_buf(256);
   10a9e:	2080      	movs	r0, #128	; 0x80
   10aa0:	0040      	lsls	r0, r0, #1
   10aa2:	47b0      	blx	r6
				http_buf_read_ptr = http_buf_read_ptr + 256;
   10aa4:	683b      	ldr	r3, [r7, #0]
   10aa6:	3301      	adds	r3, #1
   10aa8:	33ff      	adds	r3, #255	; 0xff
   10aaa:	603b      	str	r3, [r7, #0]
			for (int i=0 ; i<n ; i++ ){
   10aac:	3501      	adds	r5, #1
   10aae:	4545      	cmp	r5, r8
   10ab0:	d1f5      	bne.n	10a9e <http_client_callback+0x1ce>
   10ab2:	e7a6      	b.n	10a02 <http_client_callback+0x132>
				http_buf_read_ptr =0;
   10ab4:	2200      	movs	r2, #0
   10ab6:	4b24      	ldr	r3, [pc, #144]	; (10b48 <http_client_callback+0x278>)
   10ab8:	601a      	str	r2, [r3, #0]
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
   10aba:	4b24      	ldr	r3, [pc, #144]	; (10b4c <http_client_callback+0x27c>)
   10abc:	4798      	blx	r3
   10abe:	e715      	b.n	108ec <http_client_callback+0x1c>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   10ac0:	6811      	ldr	r1, [r2, #0]
   10ac2:	4824      	ldr	r0, [pc, #144]	; (10b54 <http_client_callback+0x284>)
   10ac4:	4b13      	ldr	r3, [pc, #76]	; (10b14 <http_client_callback+0x244>)
   10ac6:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
   10ac8:	6823      	ldr	r3, [r4, #0]
   10aca:	330b      	adds	r3, #11
   10acc:	d000      	beq.n	10ad0 <http_client_callback+0x200>
   10ace:	e70d      	b.n	108ec <http_client_callback+0x1c>
	return ((down_state & mask) != 0);
   10ad0:	4b0e      	ldr	r3, [pc, #56]	; (10b0c <http_client_callback+0x23c>)
   10ad2:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   10ad4:	071a      	lsls	r2, r3, #28
   10ad6:	d406      	bmi.n	10ae6 <http_client_callback+0x216>
	return ((down_state & mask) != 0);
   10ad8:	4b0c      	ldr	r3, [pc, #48]	; (10b0c <http_client_callback+0x23c>)
   10ada:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   10adc:	075a      	lsls	r2, r3, #29
   10ade:	d407      	bmi.n	10af0 <http_client_callback+0x220>
			start_download();
   10ae0:	4b1d      	ldr	r3, [pc, #116]	; (10b58 <http_client_callback+0x288>)
   10ae2:	4798      	blx	r3
   10ae4:	e702      	b.n	108ec <http_client_callback+0x1c>
	down_state &= ~mask;
   10ae6:	2208      	movs	r2, #8
   10ae8:	4393      	bics	r3, r2
   10aea:	4a08      	ldr	r2, [pc, #32]	; (10b0c <http_client_callback+0x23c>)
   10aec:	7013      	strb	r3, [r2, #0]
   10aee:	e7f3      	b.n	10ad8 <http_client_callback+0x208>
   10af0:	2204      	movs	r2, #4
   10af2:	4393      	bics	r3, r2
   10af4:	4a05      	ldr	r2, [pc, #20]	; (10b0c <http_client_callback+0x23c>)
   10af6:	7013      	strb	r3, [r2, #0]
   10af8:	e7f2      	b.n	10ae0 <http_client_callback+0x210>
   10afa:	46c0      	nop			; (mov r8, r8)
   10afc:	000169a8 	.word	0x000169a8
   10b00:	000169bc 	.word	0x000169bc
   10b04:	000141f9 	.word	0x000141f9
   10b08:	000169f4 	.word	0x000169f4
   10b0c:	2000028c 	.word	0x2000028c
   10b10:	00016a20 	.word	0x00016a20
   10b14:	000140dd 	.word	0x000140dd
   10b18:	00016a5c 	.word	0x00016a5c
   10b1c:	20000ff8 	.word	0x20000ff8
   10b20:	00016a7c 	.word	0x00016a7c
   10b24:	00016a8c 	.word	0x00016a8c
   10b28:	2000000d 	.word	0x2000000d
   10b2c:	20000ff4 	.word	0x20000ff4
   10b30:	0000b315 	.word	0x0000b315
   10b34:	00016ad0 	.word	0x00016ad0
   10b38:	20000294 	.word	0x20000294
   10b3c:	20000630 	.word	0x20000630
   10b40:	00013f45 	.word	0x00013f45
   10b44:	fffff800 	.word	0xfffff800
   10b48:	20000290 	.word	0x20000290
   10b4c:	00010865 	.word	0x00010865
   10b50:	00016af0 	.word	0x00016af0
   10b54:	00016b0c 	.word	0x00016b0c
   10b58:	00010365 	.word	0x00010365

00010b5c <configure_adc>:

}


void configure_adc(void)
{
   10b5c:	b510      	push	{r4, lr}
   10b5e:	b08c      	sub	sp, #48	; 0x30
	
	struct adc_config config_adc;

	adc_get_config_defaults(&config_adc);
   10b60:	4668      	mov	r0, sp
   10b62:	4b11      	ldr	r3, [pc, #68]	; (10ba8 <configure_adc+0x4c>)
   10b64:	4798      	blx	r3
	config_adc.reference = ADC_REFERENCE_AREFA;
   10b66:	2303      	movs	r3, #3
   10b68:	466a      	mov	r2, sp
   10b6a:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN0;
   10b6c:	2300      	movs	r3, #0
   10b6e:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
   10b70:	23c0      	movs	r3, #192	; 0xc0
   10b72:	015b      	lsls	r3, r3, #5
   10b74:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
   10b76:	4c0d      	ldr	r4, [pc, #52]	; (10bac <configure_adc+0x50>)
   10b78:	490d      	ldr	r1, [pc, #52]	; (10bb0 <configure_adc+0x54>)
   10b7a:	0020      	movs	r0, r4
   10b7c:	4b0d      	ldr	r3, [pc, #52]	; (10bb4 <configure_adc+0x58>)
   10b7e:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   10b80:	6822      	ldr	r2, [r4, #0]
   10b82:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
   10b84:	b25b      	sxtb	r3, r3
   10b86:	2b00      	cmp	r3, #0
   10b88:	dbfb      	blt.n	10b82 <configure_adc+0x26>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
   10b8a:	230f      	movs	r3, #15
   10b8c:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
   10b8e:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
   10b90:	7813      	ldrb	r3, [r2, #0]
   10b92:	2102      	movs	r1, #2
   10b94:	430b      	orrs	r3, r1
   10b96:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
   10b98:	4b04      	ldr	r3, [pc, #16]	; (10bac <configure_adc+0x50>)
   10b9a:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   10b9c:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
   10b9e:	b25b      	sxtb	r3, r3
   10ba0:	2b00      	cmp	r3, #0
   10ba2:	dbfb      	blt.n	10b9c <configure_adc+0x40>
	adc_enable(&adc_instance);
	
}
   10ba4:	b00c      	add	sp, #48	; 0x30
   10ba6:	bd10      	pop	{r4, pc}
   10ba8:	0000b3ed 	.word	0x0000b3ed
   10bac:	20000ffc 	.word	0x20000ffc
   10bb0:	42004000 	.word	0x42004000
   10bb4:	0000b435 	.word	0x0000b435

00010bb8 <main>:

int main (void)
{
   10bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bba:	46de      	mov	lr, fp
   10bbc:	4657      	mov	r7, sl
   10bbe:	464e      	mov	r6, r9
   10bc0:	4645      	mov	r5, r8
   10bc2:	b5e0      	push	{r5, r6, r7, lr}
   10bc4:	b09d      	sub	sp, #116	; 0x74
	int8_t ret;
	
	//char topic[strlen(MAIN_CHAT_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];
	
	
	system_init();
   10bc6:	4bc9      	ldr	r3, [pc, #804]	; (10eec <main+0x334>)
   10bc8:	4798      	blx	r3
	down_state = NOT_READY;
   10bca:	2400      	movs	r4, #0
   10bcc:	2600      	movs	r6, #0
   10bce:	4bc8      	ldr	r3, [pc, #800]	; (10ef0 <main+0x338>)
   10bd0:	701c      	strb	r4, [r3, #0]
	cpu_irq_enable();
   10bd2:	2501      	movs	r5, #1
   10bd4:	4bc7      	ldr	r3, [pc, #796]	; (10ef4 <main+0x33c>)
   10bd6:	701d      	strb	r5, [r3, #0]
   10bd8:	f3bf 8f5f 	dmb	sy
   10bdc:	b662      	cpsie	i
	init_state();
	system_interrupt_enable_global();
	configure_port_pins();
   10bde:	4bc6      	ldr	r3, [pc, #792]	; (10ef8 <main+0x340>)
   10be0:	4798      	blx	r3
	delay_init();
   10be2:	4bc6      	ldr	r3, [pc, #792]	; (10efc <main+0x344>)
   10be4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   10be6:	aa06      	add	r2, sp, #24
   10be8:	2380      	movs	r3, #128	; 0x80
   10bea:	05db      	lsls	r3, r3, #23
   10bec:	9306      	str	r3, [sp, #24]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   10bee:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
   10bf0:	23ff      	movs	r3, #255	; 0xff
   10bf2:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
   10bf4:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   10bf6:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
   10bf8:	3bdb      	subs	r3, #219	; 0xdb
   10bfa:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
   10bfc:	3301      	adds	r3, #1
   10bfe:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
   10c00:	3301      	adds	r3, #1
   10c02:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
   10c04:	3301      	adds	r3, #1
   10c06:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
   10c08:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
   10c0a:	3305      	adds	r3, #5
   10c0c:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
   10c0e:	3301      	adds	r3, #1
   10c10:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   10c12:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   10c14:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   10c16:	2300      	movs	r3, #0
   10c18:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   10c1a:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   10c1c:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   10c1e:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
   10c20:	2313      	movs	r3, #19
   10c22:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   10c24:	7756      	strb	r6, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   10c26:	23c4      	movs	r3, #196	; 0xc4
   10c28:	039b      	lsls	r3, r3, #14
   10c2a:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   10c2c:	2301      	movs	r3, #1
   10c2e:	425b      	negs	r3, r3
   10c30:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   10c32:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   10c34:	4bb2      	ldr	r3, [pc, #712]	; (10f00 <main+0x348>)
   10c36:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   10c38:	4bb2      	ldr	r3, [pc, #712]	; (10f04 <main+0x34c>)
   10c3a:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
   10c3c:	23e1      	movs	r3, #225	; 0xe1
   10c3e:	025b      	lsls	r3, r3, #9
   10c40:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
   10c42:	4cb1      	ldr	r4, [pc, #708]	; (10f08 <main+0x350>)
   10c44:	4bb1      	ldr	r3, [pc, #708]	; (10f0c <main+0x354>)
   10c46:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   10c48:	49b1      	ldr	r1, [pc, #708]	; (10f10 <main+0x358>)
   10c4a:	4bb2      	ldr	r3, [pc, #712]	; (10f14 <main+0x35c>)
   10c4c:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   10c4e:	49b2      	ldr	r1, [pc, #712]	; (10f18 <main+0x360>)
   10c50:	4bb2      	ldr	r3, [pc, #712]	; (10f1c <main+0x364>)
   10c52:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
   10c54:	49b2      	ldr	r1, [pc, #712]	; (10f20 <main+0x368>)
   10c56:	0020      	movs	r0, r4
   10c58:	4bb2      	ldr	r3, [pc, #712]	; (10f24 <main+0x36c>)
   10c5a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   10c5c:	4fb2      	ldr	r7, [pc, #712]	; (10f28 <main+0x370>)
   10c5e:	683b      	ldr	r3, [r7, #0]
   10c60:	6898      	ldr	r0, [r3, #8]
   10c62:	2100      	movs	r1, #0
   10c64:	4eb1      	ldr	r6, [pc, #708]	; (10f2c <main+0x374>)
   10c66:	47b0      	blx	r6
	setbuf(stdin, NULL);
   10c68:	683b      	ldr	r3, [r7, #0]
   10c6a:	6858      	ldr	r0, [r3, #4]
   10c6c:	2100      	movs	r1, #0
   10c6e:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   10c70:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   10c72:	0030      	movs	r0, r6
   10c74:	4bae      	ldr	r3, [pc, #696]	; (10f30 <main+0x378>)
   10c76:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   10c78:	231f      	movs	r3, #31
   10c7a:	4018      	ands	r0, r3
   10c7c:	4085      	lsls	r5, r0
   10c7e:	4bad      	ldr	r3, [pc, #692]	; (10f34 <main+0x37c>)
   10c80:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   10c82:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
   10c84:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   10c86:	2b00      	cmp	r3, #0
   10c88:	d1fc      	bne.n	10c84 <main+0xcc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   10c8a:	6833      	ldr	r3, [r6, #0]
   10c8c:	2202      	movs	r2, #2
   10c8e:	4313      	orrs	r3, r2
   10c90:	6033      	str	r3, [r6, #0]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   10c92:	ac06      	add	r4, sp, #24
   10c94:	2500      	movs	r5, #0
   10c96:	7025      	strb	r5, [r4, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   10c98:	4ba7      	ldr	r3, [pc, #668]	; (10f38 <main+0x380>)
   10c9a:	685b      	ldr	r3, [r3, #4]
   10c9c:	06db      	lsls	r3, r3, #27
   10c9e:	0f1b      	lsrs	r3, r3, #28
   10ca0:	70a3      	strb	r3, [r4, #2]
	config->disable_cache     = false;
   10ca2:	70e5      	strb	r5, [r4, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   10ca4:	7125      	strb	r5, [r4, #4]
	config.manual_page_write = false;
   10ca6:	7065      	strb	r5, [r4, #1]
	nvm_set_config(&config);
   10ca8:	0020      	movs	r0, r4
   10caa:	4ba4      	ldr	r3, [pc, #656]	; (10f3c <main+0x384>)
   10cac:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
   10cae:	2601      	movs	r6, #1
   10cb0:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   10cb2:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   10cb4:	60a5      	str	r5, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   10cb6:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
   10cb8:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
   10cba:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
   10cbc:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
   10cbe:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
   10cc0:	2324      	movs	r3, #36	; 0x24
   10cc2:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   10cc4:	220c      	movs	r2, #12
   10cc6:	2100      	movs	r1, #0
   10cc8:	a80c      	add	r0, sp, #48	; 0x30
   10cca:	4b9d      	ldr	r3, [pc, #628]	; (10f40 <main+0x388>)
   10ccc:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
   10cce:	4b9d      	ldr	r3, [pc, #628]	; (10f44 <main+0x38c>)
   10cd0:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
   10cd2:	2380      	movs	r3, #128	; 0x80
   10cd4:	025b      	lsls	r3, r3, #9
   10cd6:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
   10cd8:	4b9b      	ldr	r3, [pc, #620]	; (10f48 <main+0x390>)
   10cda:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
   10cdc:	4b9b      	ldr	r3, [pc, #620]	; (10f4c <main+0x394>)
   10cde:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
   10ce0:	4b9b      	ldr	r3, [pc, #620]	; (10f50 <main+0x398>)
   10ce2:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
   10ce4:	4b9b      	ldr	r3, [pc, #620]	; (10f54 <main+0x39c>)
   10ce6:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
   10ce8:	4d9b      	ldr	r5, [pc, #620]	; (10f58 <main+0x3a0>)
   10cea:	0022      	movs	r2, r4
   10cec:	499b      	ldr	r1, [pc, #620]	; (10f5c <main+0x3a4>)
   10cee:	0028      	movs	r0, r5
   10cf0:	4b9b      	ldr	r3, [pc, #620]	; (10f60 <main+0x3a8>)
   10cf2:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
   10cf4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   10cf6:	0020      	movs	r0, r4
   10cf8:	4b8d      	ldr	r3, [pc, #564]	; (10f30 <main+0x378>)
   10cfa:	4798      	blx	r3
   10cfc:	231f      	movs	r3, #31
   10cfe:	4018      	ands	r0, r3
   10d00:	4086      	lsls	r6, r0
   10d02:	4b8c      	ldr	r3, [pc, #560]	; (10f34 <main+0x37c>)
   10d04:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10d06:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   10d08:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   10d0a:	2b00      	cmp	r3, #0
   10d0c:	d1fc      	bne.n	10d08 <main+0x150>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   10d0e:	6823      	ldr	r3, [r4, #0]
   10d10:	2202      	movs	r2, #2
   10d12:	4313      	orrs	r3, r2
   10d14:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
   10d16:	4c93      	ldr	r4, [pc, #588]	; (10f64 <main+0x3ac>)
   10d18:	2304      	movs	r3, #4
   10d1a:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
   10d1c:	3303      	adds	r3, #3
   10d1e:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
   10d20:	4b8d      	ldr	r3, [pc, #564]	; (10f58 <main+0x3a0>)
   10d22:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   10d24:	a904      	add	r1, sp, #16
   10d26:	2301      	movs	r3, #1
   10d28:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
   10d2a:	2200      	movs	r2, #0
   10d2c:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
   10d2e:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
   10d30:	2007      	movs	r0, #7
   10d32:	4b8d      	ldr	r3, [pc, #564]	; (10f68 <main+0x3b0>)
   10d34:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
   10d36:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
   10d38:	09d1      	lsrs	r1, r2, #7
		return NULL;
   10d3a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   10d3c:	2900      	cmp	r1, #0
   10d3e:	d104      	bne.n	10d4a <main+0x192>
		return &(ports[port_index]->Group[group_index]);
   10d40:	0953      	lsrs	r3, r2, #5
   10d42:	01db      	lsls	r3, r3, #7
   10d44:	4989      	ldr	r1, [pc, #548]	; (10f6c <main+0x3b4>)
   10d46:	468c      	mov	ip, r1
   10d48:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   10d4a:	211f      	movs	r1, #31
   10d4c:	4011      	ands	r1, r2
   10d4e:	2201      	movs	r2, #1
   10d50:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   10d52:	619a      	str	r2, [r3, #24]
	sw_timer_get_config_defaults(&swt_conf);
   10d54:	ac06      	add	r4, sp, #24
   10d56:	0020      	movs	r0, r4
   10d58:	4b85      	ldr	r3, [pc, #532]	; (10f70 <main+0x3b8>)
   10d5a:	4798      	blx	r3
	sw_timer_init(&swt_module_inst_mqtt, &swt_conf);
   10d5c:	4d85      	ldr	r5, [pc, #532]	; (10f74 <main+0x3bc>)
   10d5e:	0021      	movs	r1, r4
   10d60:	0028      	movs	r0, r5
   10d62:	4b85      	ldr	r3, [pc, #532]	; (10f78 <main+0x3c0>)
   10d64:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst_mqtt);
   10d66:	0028      	movs	r0, r5
   10d68:	4b84      	ldr	r3, [pc, #528]	; (10f7c <main+0x3c4>)
   10d6a:	4798      	blx	r3
	configure_console();
	configure_nvm();
	configure_spi_flash();
	configure_timer();
	
	configure_i2c();
   10d6c:	4b84      	ldr	r3, [pc, #528]	; (10f80 <main+0x3c8>)
   10d6e:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
   10d70:	0020      	movs	r0, r4
   10d72:	4b84      	ldr	r3, [pc, #528]	; (10f84 <main+0x3cc>)
   10d74:	4798      	blx	r3
	mqtt_conf.timer_inst = &swt_module_inst_mqtt;
   10d76:	6065      	str	r5, [r4, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
   10d78:	4b83      	ldr	r3, [pc, #524]	; (10f88 <main+0x3d0>)
   10d7a:	60e3      	str	r3, [r4, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   10d7c:	2380      	movs	r3, #128	; 0x80
   10d7e:	6123      	str	r3, [r4, #16]
    mqtt_conf.port = MQTT_PORT;
   10d80:	4b82      	ldr	r3, [pc, #520]	; (10f8c <main+0x3d4>)
   10d82:	8023      	strh	r3, [r4, #0]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   10d84:	0021      	movs	r1, r4
   10d86:	4882      	ldr	r0, [pc, #520]	; (10f90 <main+0x3d8>)
   10d88:	4b82      	ldr	r3, [pc, #520]	; (10f94 <main+0x3dc>)
   10d8a:	4798      	blx	r3
   10d8c:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   10d8e:	db2a      	blt.n	10de6 <main+0x22e>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   10d90:	4981      	ldr	r1, [pc, #516]	; (10f98 <main+0x3e0>)
   10d92:	487f      	ldr	r0, [pc, #508]	; (10f90 <main+0x3d8>)
   10d94:	4b81      	ldr	r3, [pc, #516]	; (10f9c <main+0x3e4>)
   10d96:	4798      	blx	r3
   10d98:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   10d9a:	db28      	blt.n	10dee <main+0x236>
	
	
	configure_mqtt();
	nm_bsp_init();
   10d9c:	4b80      	ldr	r3, [pc, #512]	; (10fa0 <main+0x3e8>)
   10d9e:	4798      	blx	r3
	printf("User : %s\r\n", mqtt_user);
   10da0:	4d80      	ldr	r5, [pc, #512]	; (10fa4 <main+0x3ec>)
   10da2:	0029      	movs	r1, r5
   10da4:	4880      	ldr	r0, [pc, #512]	; (10fa8 <main+0x3f0>)
   10da6:	4c81      	ldr	r4, [pc, #516]	; (10fac <main+0x3f4>)
   10da8:	47a0      	blx	r4
	printf("Password : %s\r\n", mqtt_user);
   10daa:	0029      	movs	r1, r5
   10dac:	4880      	ldr	r0, [pc, #512]	; (10fb0 <main+0x3f8>)
   10dae:	47a0      	blx	r4
	//sprintf(topic, "%s", MAIN_CHAT_TOPIC);
	//printf("Topic : %s\r\n", topic);
	
	//ADC stuff
	configure_adc();
   10db0:	4b80      	ldr	r3, [pc, #512]	; (10fb4 <main+0x3fc>)
   10db2:	4798      	blx	r3
	uint16_t result_adc;
	uint8_t moist_lvl = 0;
	
	//i2c stuff
	wr_packet.address     = SLAVE_RHT_ADDRESS_W;
   10db4:	2240      	movs	r2, #64	; 0x40
   10db6:	4b80      	ldr	r3, [pc, #512]	; (10fb8 <main+0x400>)
   10db8:	801a      	strh	r2, [r3, #0]
	rd_packet.address     = SLAVE_RHT_ADDRESS_R;
   10dba:	4b80      	ldr	r3, [pc, #512]	; (10fbc <main+0x404>)
   10dbc:	801a      	strh	r2, [r3, #0]
	rd_packet.data_length = 4;
   10dbe:	3a3c      	subs	r2, #60	; 0x3c
   10dc0:	805a      	strh	r2, [r3, #2]
	rd_packet.data        = rd_buffer;
   10dc2:	4a7f      	ldr	r2, [pc, #508]	; (10fc0 <main+0x408>)
   10dc4:	605a      	str	r2, [r3, #4]
	uint32_t h1 =0;
	uint8_t tempC = 0;
	uint8_t hum = 0;
	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   10dc6:	2218      	movs	r2, #24
   10dc8:	2100      	movs	r1, #0
   10dca:	a816      	add	r0, sp, #88	; 0x58
   10dcc:	4b5c      	ldr	r3, [pc, #368]	; (10f40 <main+0x388>)
   10dce:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
   10dd0:	4b7c      	ldr	r3, [pc, #496]	; (10fc4 <main+0x40c>)
   10dd2:	9316      	str	r3, [sp, #88]	; 0x58
	ret = m2m_wifi_init(&param);
   10dd4:	a816      	add	r0, sp, #88	; 0x58
   10dd6:	4b7c      	ldr	r3, [pc, #496]	; (10fc8 <main+0x410>)
   10dd8:	4798      	blx	r3
   10dda:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
   10ddc:	d00b      	beq.n	10df6 <main+0x23e>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
   10dde:	487b      	ldr	r0, [pc, #492]	; (10fcc <main+0x414>)
   10de0:	4b72      	ldr	r3, [pc, #456]	; (10fac <main+0x3f4>)
   10de2:	4798      	blx	r3
   10de4:	e7fe      	b.n	10de4 <main+0x22c>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
   10de6:	487a      	ldr	r0, [pc, #488]	; (10fd0 <main+0x418>)
   10de8:	4b70      	ldr	r3, [pc, #448]	; (10fac <main+0x3f4>)
   10dea:	4798      	blx	r3
   10dec:	e7fe      	b.n	10dec <main+0x234>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
   10dee:	4879      	ldr	r0, [pc, #484]	; (10fd4 <main+0x41c>)
   10df0:	4b6e      	ldr	r3, [pc, #440]	; (10fac <main+0x3f4>)
   10df2:	4798      	blx	r3
   10df4:	e7fe      	b.n	10df4 <main+0x23c>
		while (1) { /* Loop forever. */
		}
	}

	/* Initialize socket interface. */
	socketInit();
   10df6:	4b78      	ldr	r3, [pc, #480]	; (10fd8 <main+0x420>)
   10df8:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   10dfa:	4978      	ldr	r1, [pc, #480]	; (10fdc <main+0x424>)
   10dfc:	4878      	ldr	r0, [pc, #480]	; (10fe0 <main+0x428>)
   10dfe:	4b79      	ldr	r3, [pc, #484]	; (10fe4 <main+0x42c>)
   10e00:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   10e02:	23ff      	movs	r3, #255	; 0xff
   10e04:	9300      	str	r3, [sp, #0]
   10e06:	4b78      	ldr	r3, [pc, #480]	; (10fe8 <main+0x430>)
   10e08:	2202      	movs	r2, #2
   10e0a:	210b      	movs	r1, #11
   10e0c:	4877      	ldr	r0, [pc, #476]	; (10fec <main+0x434>)
   10e0e:	4c78      	ldr	r4, [pc, #480]	; (10ff0 <main+0x438>)
   10e10:	47a0      	blx	r4
	MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	/* ~~~~~~~~~~~~~End MQTT init~~~~~~~~~~~~~~ */
	
	write_firmware = false; 
   10e12:	2200      	movs	r2, #0
   10e14:	4b77      	ldr	r3, [pc, #476]	; (10ff4 <main+0x43c>)
   10e16:	701a      	strb	r2, [r3, #0]
	
	while (1) {
		
		sint8 wifiStatus = m2m_wifi_handle_events(NULL);
   10e18:	4b77      	ldr	r3, [pc, #476]	; (10ff8 <main+0x440>)
   10e1a:	4699      	mov	r9, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
   10e1c:	2404      	movs	r4, #4
   10e1e:	e00c      	b.n	10e3a <main+0x282>
			sprintf(pub_text, "%d", buttonLevel);
			mqtt_publish(&mqtt_inst, SENSOR_TOPIC, pub_text, 1, 2, 0);
		}

		// reply with version number
		if(reply_firmware_ver)
   10e20:	4b76      	ldr	r3, [pc, #472]	; (10ffc <main+0x444>)
   10e22:	781b      	ldrb	r3, [r3, #0]
   10e24:	2b00      	cmp	r3, #0
   10e26:	d12f      	bne.n	10e88 <main+0x2d0>
			sprintf(pub_text, "%s", FIRMWARE_VERSION);
			mqtt_publish(&mqtt_inst, VERSIONREADOUT_TOPIC, pub_text, strlen(FIRMWARE_VERSION), 2, 0);
			reply_firmware_ver=false;
		}
		
		if(sensor_mqtt_update){
   10e28:	4b75      	ldr	r3, [pc, #468]	; (11000 <main+0x448>)
   10e2a:	781b      	ldrb	r3, [r3, #0]
   10e2c:	2b00      	cmp	r3, #0
   10e2e:	d13d      	bne.n	10eac <main+0x2f4>
			sensor_mqtt_update = false;
		}
		
		
		// firmware upgrade
		if (write_firmware) {
   10e30:	4b70      	ldr	r3, [pc, #448]	; (10ff4 <main+0x43c>)
   10e32:	781b      	ldrb	r3, [r3, #0]
   10e34:	2b00      	cmp	r3, #0
   10e36:	d000      	beq.n	10e3a <main+0x282>
   10e38:	e17d      	b.n	11136 <main+0x57e>
		sint8 wifiStatus = m2m_wifi_handle_events(NULL);
   10e3a:	2000      	movs	r0, #0
   10e3c:	47c8      	blx	r9
		usart_read_job(&usart_instance, &uart_ch_buffer);
   10e3e:	4971      	ldr	r1, [pc, #452]	; (11004 <main+0x44c>)
   10e40:	4831      	ldr	r0, [pc, #196]	; (10f08 <main+0x350>)
   10e42:	4b71      	ldr	r3, [pc, #452]	; (11008 <main+0x450>)
   10e44:	4798      	blx	r3
		sw_timer_task(&swt_module_inst_mqtt);
   10e46:	484b      	ldr	r0, [pc, #300]	; (10f74 <main+0x3bc>)
   10e48:	4b70      	ldr	r3, [pc, #448]	; (1100c <main+0x454>)
   10e4a:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
   10e4c:	4b70      	ldr	r3, [pc, #448]	; (11010 <main+0x458>)
   10e4e:	6a1b      	ldr	r3, [r3, #32]
   10e50:	025b      	lsls	r3, r3, #9
   10e52:	0fdb      	lsrs	r3, r3, #31
		if( port_pin_get_input_level(B1) != buttonLevel )
   10e54:	4a6f      	ldr	r2, [pc, #444]	; (11014 <main+0x45c>)
   10e56:	7812      	ldrb	r2, [r2, #0]
   10e58:	4293      	cmp	r3, r2
   10e5a:	d0e1      	beq.n	10e20 <main+0x268>
   10e5c:	4b6c      	ldr	r3, [pc, #432]	; (11010 <main+0x458>)
   10e5e:	6a1a      	ldr	r2, [r3, #32]
   10e60:	0252      	lsls	r2, r2, #9
   10e62:	0fd2      	lsrs	r2, r2, #31
			buttonLevel = port_pin_get_input_level(B1);
   10e64:	4b6b      	ldr	r3, [pc, #428]	; (11014 <main+0x45c>)
   10e66:	701a      	strb	r2, [r3, #0]
			sprintf(pub_text, "%d", buttonLevel);
   10e68:	4d6b      	ldr	r5, [pc, #428]	; (11018 <main+0x460>)
   10e6a:	496c      	ldr	r1, [pc, #432]	; (1101c <main+0x464>)
   10e6c:	0028      	movs	r0, r5
   10e6e:	4b6c      	ldr	r3, [pc, #432]	; (11020 <main+0x468>)
   10e70:	4798      	blx	r3
			mqtt_publish(&mqtt_inst, SENSOR_TOPIC, pub_text, 1, 2, 0);
   10e72:	2300      	movs	r3, #0
   10e74:	9301      	str	r3, [sp, #4]
   10e76:	3302      	adds	r3, #2
   10e78:	9300      	str	r3, [sp, #0]
   10e7a:	3b01      	subs	r3, #1
   10e7c:	002a      	movs	r2, r5
   10e7e:	4969      	ldr	r1, [pc, #420]	; (11024 <main+0x46c>)
   10e80:	4843      	ldr	r0, [pc, #268]	; (10f90 <main+0x3d8>)
   10e82:	4d69      	ldr	r5, [pc, #420]	; (11028 <main+0x470>)
   10e84:	47a8      	blx	r5
   10e86:	e7cb      	b.n	10e20 <main+0x268>
			sprintf(pub_text, "%s", FIRMWARE_VERSION);
   10e88:	4a63      	ldr	r2, [pc, #396]	; (11018 <main+0x460>)
   10e8a:	4b68      	ldr	r3, [pc, #416]	; (1102c <main+0x474>)
   10e8c:	6819      	ldr	r1, [r3, #0]
   10e8e:	6011      	str	r1, [r2, #0]
   10e90:	889b      	ldrh	r3, [r3, #4]
   10e92:	8093      	strh	r3, [r2, #4]
			mqtt_publish(&mqtt_inst, VERSIONREADOUT_TOPIC, pub_text, strlen(FIRMWARE_VERSION), 2, 0);
   10e94:	2500      	movs	r5, #0
   10e96:	9501      	str	r5, [sp, #4]
   10e98:	2302      	movs	r3, #2
   10e9a:	9300      	str	r3, [sp, #0]
   10e9c:	3303      	adds	r3, #3
   10e9e:	4964      	ldr	r1, [pc, #400]	; (11030 <main+0x478>)
   10ea0:	483b      	ldr	r0, [pc, #236]	; (10f90 <main+0x3d8>)
   10ea2:	4e61      	ldr	r6, [pc, #388]	; (11028 <main+0x470>)
   10ea4:	47b0      	blx	r6
			reply_firmware_ver=false;
   10ea6:	4b55      	ldr	r3, [pc, #340]	; (10ffc <main+0x444>)
   10ea8:	701d      	strb	r5, [r3, #0]
   10eaa:	e7bd      	b.n	10e28 <main+0x270>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   10eac:	4b61      	ldr	r3, [pc, #388]	; (11034 <main+0x47c>)
   10eae:	681b      	ldr	r3, [r3, #0]
   10eb0:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
   10eb2:	b252      	sxtb	r2, r2
   10eb4:	2a00      	cmp	r2, #0
   10eb6:	dbfb      	blt.n	10eb0 <main+0x2f8>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   10eb8:	7b1a      	ldrb	r2, [r3, #12]
   10eba:	2102      	movs	r1, #2
   10ebc:	430a      	orrs	r2, r1
   10ebe:	731a      	strb	r2, [r3, #12]
   10ec0:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
   10ec2:	b252      	sxtb	r2, r2
   10ec4:	2a00      	cmp	r2, #0
   10ec6:	dbfb      	blt.n	10ec0 <main+0x308>
	if (int_flags & ADC_INTFLAG_RESRDY) {
   10ec8:	2501      	movs	r5, #1
		status_flags |= ADC_STATUS_WINDOW;
   10eca:	2002      	movs	r0, #2
   10ecc:	e002      	b.n	10ed4 <main+0x31c>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
   10ece:	4215      	tst	r5, r2
   10ed0:	d000      	beq.n	10ed4 <main+0x31c>
   10ed2:	e0b1      	b.n	11038 <main+0x480>
	uint32_t int_flags = adc_module->INTFLAG.reg;
   10ed4:	7e19      	ldrb	r1, [r3, #24]
   10ed6:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
   10ed8:	002a      	movs	r2, r5
   10eda:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
   10edc:	420c      	tst	r4, r1
   10ede:	d000      	beq.n	10ee2 <main+0x32a>
		status_flags |= ADC_STATUS_WINDOW;
   10ee0:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   10ee2:	4208      	tst	r0, r1
   10ee4:	d0f3      	beq.n	10ece <main+0x316>
		status_flags |= ADC_STATUS_OVERRUN;
   10ee6:	4322      	orrs	r2, r4
   10ee8:	e7f1      	b.n	10ece <main+0x316>
   10eea:	46c0      	nop			; (mov r8, r8)
   10eec:	0001025d 	.word	0x0001025d
   10ef0:	2000028c 	.word	0x2000028c
   10ef4:	20000002 	.word	0x20000002
   10ef8:	0001083d 	.word	0x0001083d
   10efc:	0000e555 	.word	0x0000e555
   10f00:	002a0003 	.word	0x002a0003
   10f04:	002b0003 	.word	0x002b0003
   10f08:	200005a0 	.word	0x200005a0
   10f0c:	2000059c 	.word	0x2000059c
   10f10:	000104d5 	.word	0x000104d5
   10f14:	20000598 	.word	0x20000598
   10f18:	000104a9 	.word	0x000104a9
   10f1c:	20000594 	.word	0x20000594
   10f20:	42001800 	.word	0x42001800
   10f24:	0000f519 	.word	0x0000f519
   10f28:	20000020 	.word	0x20000020
   10f2c:	00014231 	.word	0x00014231
   10f30:	0000ec31 	.word	0x0000ec31
   10f34:	e000e100 	.word	0xe000e100
   10f38:	41004000 	.word	0x41004000
   10f3c:	0000e5c1 	.word	0x0000e5c1
   10f40:	00013f7b 	.word	0x00013f7b
   10f44:	0001d4c0 	.word	0x0001d4c0
   10f48:	00100002 	.word	0x00100002
   10f4c:	00110002 	.word	0x00110002
   10f50:	00120002 	.word	0x00120002
   10f54:	00130002 	.word	0x00130002
   10f58:	20000fac 	.word	0x20000fac
   10f5c:	42000c00 	.word	0x42000c00
   10f60:	0000ecc1 	.word	0x0000ecc1
   10f64:	20000e30 	.word	0x20000e30
   10f68:	0000e859 	.word	0x0000e859
   10f6c:	41004400 	.word	0x41004400
   10f70:	0000d8ad 	.word	0x0000d8ad
   10f74:	200005d8 	.word	0x200005d8
   10f78:	0000d8b9 	.word	0x0000d8b9
   10f7c:	0000d965 	.word	0x0000d965
   10f80:	00010789 	.word	0x00010789
   10f84:	00011509 	.word	0x00011509
   10f88:	20000298 	.word	0x20000298
   10f8c:	00004574 	.word	0x00004574
   10f90:	20000318 	.word	0x20000318
   10f94:	0001152d 	.word	0x0001152d
   10f98:	000104ed 	.word	0x000104ed
   10f9c:	000115fd 	.word	0x000115fd
   10fa0:	0000816d 	.word	0x0000816d
   10fa4:	20000018 	.word	0x20000018
   10fa8:	00016ba4 	.word	0x00016ba4
   10fac:	000140dd 	.word	0x000140dd
   10fb0:	00016bb0 	.word	0x00016bb0
   10fb4:	00010b5d 	.word	0x00010b5d
   10fb8:	20000e38 	.word	0x20000e38
   10fbc:	20000fe8 	.word	0x20000fe8
   10fc0:	200003cc 	.word	0x200003cc
   10fc4:	00010411 	.word	0x00010411
   10fc8:	000090cd 	.word	0x000090cd
   10fcc:	00016bc0 	.word	0x00016bc0
   10fd0:	00016b3c 	.word	0x00016b3c
   10fd4:	00016b70 	.word	0x00016b70
   10fd8:	0000ad15 	.word	0x0000ad15
   10fdc:	000103f9 	.word	0x000103f9
   10fe0:	00010405 	.word	0x00010405
   10fe4:	0000ad95 	.word	0x0000ad95
   10fe8:	000170ac 	.word	0x000170ac
   10fec:	000170b8 	.word	0x000170b8
   10ff0:	000094b9 	.word	0x000094b9
   10ff4:	200003d4 	.word	0x200003d4
   10ff8:	0000921d 	.word	0x0000921d
   10ffc:	200003d0 	.word	0x200003d0
   11000:	200003d1 	.word	0x200003d1
   11004:	200003d2 	.word	0x200003d2
   11008:	0000f949 	.word	0x0000f949
   1100c:	0000d9fd 	.word	0x0000d9fd
   11010:	41004480 	.word	0x41004480
   11014:	2000000c 	.word	0x2000000c
   11018:	2000038c 	.word	0x2000038c
   1101c:	00016be8 	.word	0x00016be8
   11020:	0001439d 	.word	0x0001439d
   11024:	00016bec 	.word	0x00016bec
   11028:	00011a25 	.word	0x00011a25
   1102c:	00016bf4 	.word	0x00016bf4
   11030:	00016bfc 	.word	0x00016bfc
   11034:	20000ffc 	.word	0x20000ffc
   11038:	7e5a      	ldrb	r2, [r3, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
   1103a:	b252      	sxtb	r2, r2
   1103c:	2a00      	cmp	r2, #0
   1103e:	dbfb      	blt.n	11038 <main+0x480>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
   11040:	8b58      	ldrh	r0, [r3, #26]
   11042:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
   11044:	2201      	movs	r2, #1
   11046:	761a      	strb	r2, [r3, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
   11048:	7e19      	ldrb	r1, [r3, #24]
   1104a:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
   1104c:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
   1104e:	4221      	tst	r1, r4
   11050:	d001      	beq.n	11056 <main+0x49e>
		status_flags |= ADC_STATUS_WINDOW;
   11052:	2502      	movs	r5, #2
   11054:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
   11056:	0789      	lsls	r1, r1, #30
   11058:	d500      	bpl.n	1105c <main+0x4a4>
		status_flags |= ADC_STATUS_OVERRUN;
   1105a:	4322      	orrs	r2, r4

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
   1105c:	4222      	tst	r2, r4
   1105e:	d001      	beq.n	11064 <main+0x4ac>
	adc_module->INTFLAG.reg = int_flags;
   11060:	2202      	movs	r2, #2
   11062:	761a      	strb	r2, [r3, #24]
			moist_lvl = result_adc / 0xff;
   11064:	21ff      	movs	r1, #255	; 0xff
   11066:	4bb9      	ldr	r3, [pc, #740]	; (1134c <main+0x794>)
   11068:	4798      	blx	r3
			sprintf(pub_text, "%d", moist_lvl);
   1106a:	b2c2      	uxtb	r2, r0
   1106c:	4eb8      	ldr	r6, [pc, #736]	; (11350 <main+0x798>)
   1106e:	49b9      	ldr	r1, [pc, #740]	; (11354 <main+0x79c>)
   11070:	0030      	movs	r0, r6
   11072:	4bb9      	ldr	r3, [pc, #740]	; (11358 <main+0x7a0>)
   11074:	4798      	blx	r3
			mqtt_publish(&mqtt_inst, SOILMOISTURE_TOPIC, pub_text, 2, 2, 0);
   11076:	2700      	movs	r7, #0
   11078:	9701      	str	r7, [sp, #4]
   1107a:	2502      	movs	r5, #2
   1107c:	9500      	str	r5, [sp, #0]
   1107e:	002b      	movs	r3, r5
   11080:	0032      	movs	r2, r6
   11082:	49b6      	ldr	r1, [pc, #728]	; (1135c <main+0x7a4>)
   11084:	48b6      	ldr	r0, [pc, #728]	; (11360 <main+0x7a8>)
   11086:	4eb7      	ldr	r6, [pc, #732]	; (11364 <main+0x7ac>)
   11088:	47b0      	blx	r6
			uint8_t wr_buffer1[3] = {0x02, 0x15, 0x00};
   1108a:	ab06      	add	r3, sp, #24
   1108c:	701d      	strb	r5, [r3, #0]
   1108e:	2215      	movs	r2, #21
   11090:	705a      	strb	r2, [r3, #1]
   11092:	709f      	strb	r7, [r3, #2]
			wr_packet.data = wr_buffer1; //setup
   11094:	49b4      	ldr	r1, [pc, #720]	; (11368 <main+0x7b0>)
   11096:	604b      	str	r3, [r1, #4]
			wr_packet.data_length = 3;
   11098:	2303      	movs	r3, #3
   1109a:	804b      	strh	r3, [r1, #2]
			i2c_master_write_packet_job(&i2c_master_instance, &wr_packet);
   1109c:	48b3      	ldr	r0, [pc, #716]	; (1136c <main+0x7b4>)
   1109e:	4bb4      	ldr	r3, [pc, #720]	; (11370 <main+0x7b8>)
   110a0:	4798      	blx	r3
	/* Check sanity */
	Assert(module);
	Assert(module->hw);

	/* Return current status code */
	return module->status;
   110a2:	4ab2      	ldr	r2, [pc, #712]	; (1136c <main+0x7b4>)
   110a4:	2325      	movs	r3, #37	; 0x25
   110a6:	5cd1      	ldrb	r1, [r2, r3]
			while(i2c_master_get_job_status	(&i2c_master_instance));
   110a8:	2900      	cmp	r1, #0
   110aa:	d1fc      	bne.n	110a6 <main+0x4ee>
			uint8_t wr_buffer2[1] = {0x00};
   110ac:	ab04      	add	r3, sp, #16
   110ae:	2500      	movs	r5, #0
   110b0:	701d      	strb	r5, [r3, #0]
			wr_packet.data = wr_buffer2; //trigger a measurement
   110b2:	49ad      	ldr	r1, [pc, #692]	; (11368 <main+0x7b0>)
   110b4:	604b      	str	r3, [r1, #4]
			wr_packet.data_length = 1;
   110b6:	2301      	movs	r3, #1
   110b8:	804b      	strh	r3, [r1, #2]
			i2c_master_write_packet_job(&i2c_master_instance, &wr_packet);
   110ba:	4fac      	ldr	r7, [pc, #688]	; (1136c <main+0x7b4>)
   110bc:	0038      	movs	r0, r7
   110be:	4bac      	ldr	r3, [pc, #688]	; (11370 <main+0x7b8>)
   110c0:	4798      	blx	r3
			delay_ms(15); // wait for conversion
   110c2:	200f      	movs	r0, #15
   110c4:	4bab      	ldr	r3, [pc, #684]	; (11374 <main+0x7bc>)
   110c6:	4798      	blx	r3
			rd_packet.data_length = 4;
   110c8:	4eab      	ldr	r6, [pc, #684]	; (11378 <main+0x7c0>)
   110ca:	8074      	strh	r4, [r6, #2]
			i2c_master_read_packet_job(&i2c_master_instance, &rd_packet);
   110cc:	0031      	movs	r1, r6
   110ce:	0038      	movs	r0, r7
   110d0:	4baa      	ldr	r3, [pc, #680]	; (1137c <main+0x7c4>)
   110d2:	4798      	blx	r3
			t1 =  ((uint32_t)rd_packet.data[0]<<8 | (uint32_t)rd_packet.data[1]);
   110d4:	6871      	ldr	r1, [r6, #4]
			h1 =  ((uint32_t)rd_packet.data[2]<<8 | (uint32_t)rd_packet.data[3]);
   110d6:	788b      	ldrb	r3, [r1, #2]
   110d8:	021b      	lsls	r3, r3, #8
   110da:	78ca      	ldrb	r2, [r1, #3]
   110dc:	4313      	orrs	r3, r2
			hum = (uint8_t)((h1*0x64)/ 0x10000 );
   110de:	2264      	movs	r2, #100	; 0x64
   110e0:	4353      	muls	r3, r2
   110e2:	0c1b      	lsrs	r3, r3, #16
   110e4:	4698      	mov	r8, r3
			t1 =  ((uint32_t)rd_packet.data[0]<<8 | (uint32_t)rd_packet.data[1]);
   110e6:	780a      	ldrb	r2, [r1, #0]
   110e8:	0212      	lsls	r2, r2, #8
   110ea:	784b      	ldrb	r3, [r1, #1]
   110ec:	4313      	orrs	r3, r2
			tempC = (uint8_t)((t1 * 0xA5)/ 0x10000 )- (uint8_t)0x28;
   110ee:	22a5      	movs	r2, #165	; 0xa5
   110f0:	435a      	muls	r2, r3
   110f2:	0c12      	lsrs	r2, r2, #16
   110f4:	3a28      	subs	r2, #40	; 0x28
			sprintf(pub_text, "%d", tempC);
   110f6:	b2d2      	uxtb	r2, r2
   110f8:	4996      	ldr	r1, [pc, #600]	; (11354 <main+0x79c>)
   110fa:	4895      	ldr	r0, [pc, #596]	; (11350 <main+0x798>)
   110fc:	4b96      	ldr	r3, [pc, #600]	; (11358 <main+0x7a0>)
   110fe:	469b      	mov	fp, r3
   11100:	4798      	blx	r3
			mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, pub_text, 2, 2, 0);
   11102:	9501      	str	r5, [sp, #4]
   11104:	2602      	movs	r6, #2
   11106:	9600      	str	r6, [sp, #0]
   11108:	0033      	movs	r3, r6
   1110a:	4a91      	ldr	r2, [pc, #580]	; (11350 <main+0x798>)
   1110c:	499c      	ldr	r1, [pc, #624]	; (11380 <main+0x7c8>)
   1110e:	4894      	ldr	r0, [pc, #592]	; (11360 <main+0x7a8>)
   11110:	4f94      	ldr	r7, [pc, #592]	; (11364 <main+0x7ac>)
   11112:	47b8      	blx	r7
			sprintf(pub_text, "%d", hum);
   11114:	4643      	mov	r3, r8
   11116:	466a      	mov	r2, sp
   11118:	73d3      	strb	r3, [r2, #15]
   1111a:	7bd2      	ldrb	r2, [r2, #15]
   1111c:	498d      	ldr	r1, [pc, #564]	; (11354 <main+0x79c>)
   1111e:	488c      	ldr	r0, [pc, #560]	; (11350 <main+0x798>)
   11120:	47d8      	blx	fp
			mqtt_publish(&mqtt_inst, HUMIDITY_TOPIC, pub_text, 2, 2, 0);
   11122:	9501      	str	r5, [sp, #4]
   11124:	9600      	str	r6, [sp, #0]
   11126:	0033      	movs	r3, r6
   11128:	4a89      	ldr	r2, [pc, #548]	; (11350 <main+0x798>)
   1112a:	4996      	ldr	r1, [pc, #600]	; (11384 <main+0x7cc>)
   1112c:	488c      	ldr	r0, [pc, #560]	; (11360 <main+0x7a8>)
   1112e:	47b8      	blx	r7
			sensor_mqtt_update = false;
   11130:	4b95      	ldr	r3, [pc, #596]	; (11388 <main+0x7d0>)
   11132:	701d      	strb	r5, [r3, #0]
   11134:	e67c      	b.n	10e30 <main+0x278>
			socketDeinit();
   11136:	4b95      	ldr	r3, [pc, #596]	; (1138c <main+0x7d4>)
   11138:	4798      	blx	r3
			mqtt_deinit(&mqtt_inst);
   1113a:	4889      	ldr	r0, [pc, #548]	; (11360 <main+0x7a8>)
   1113c:	4b94      	ldr	r3, [pc, #592]	; (11390 <main+0x7d8>)
   1113e:	4798      	blx	r3
			ret = m2m_wifi_deinit(&param);
   11140:	a816      	add	r0, sp, #88	; 0x58
   11142:	4b94      	ldr	r3, [pc, #592]	; (11394 <main+0x7dc>)
   11144:	4798      	blx	r3
   11146:	1e01      	subs	r1, r0, #0
			if (M2M_SUCCESS != ret) {
   11148:	d003      	beq.n	11152 <main+0x59a>
				printf("main: m2m_wifi_deinit call error!(%d)\r\n", ret);
   1114a:	4893      	ldr	r0, [pc, #588]	; (11398 <main+0x7e0>)
   1114c:	4b93      	ldr	r3, [pc, #588]	; (1139c <main+0x7e4>)
   1114e:	4798      	blx	r3
   11150:	e7fe      	b.n	11150 <main+0x598>
	http_client_get_config_defaults(&httpc_conf);
   11152:	a806      	add	r0, sp, #24
   11154:	4b92      	ldr	r3, [pc, #584]	; (113a0 <main+0x7e8>)
   11156:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   11158:	2380      	movs	r3, #128	; 0x80
   1115a:	00db      	lsls	r3, r3, #3
   1115c:	930a      	str	r3, [sp, #40]	; 0x28
	httpc_conf.timer_inst = &swt_module_inst;
   1115e:	4b91      	ldr	r3, [pc, #580]	; (113a4 <main+0x7ec>)
   11160:	9307      	str	r3, [sp, #28]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   11162:	a906      	add	r1, sp, #24
   11164:	4890      	ldr	r0, [pc, #576]	; (113a8 <main+0x7f0>)
   11166:	4b91      	ldr	r3, [pc, #580]	; (113ac <main+0x7f4>)
   11168:	4798      	blx	r3
   1116a:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
   1116c:	da03      	bge.n	11176 <main+0x5be>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   1116e:	4890      	ldr	r0, [pc, #576]	; (113b0 <main+0x7f8>)
   11170:	4b8a      	ldr	r3, [pc, #552]	; (1139c <main+0x7e4>)
   11172:	4798      	blx	r3
   11174:	e7fe      	b.n	11174 <main+0x5bc>
		http_client_register_callback(&http_client_module_inst, http_client_callback);
   11176:	498f      	ldr	r1, [pc, #572]	; (113b4 <main+0x7fc>)
   11178:	488b      	ldr	r0, [pc, #556]	; (113a8 <main+0x7f0>)
   1117a:	4b8f      	ldr	r3, [pc, #572]	; (113b8 <main+0x800>)
   1117c:	4798      	blx	r3
			/* ~~~~~~~~~~~~~~~~Begin HTTP client init~~~~~~~~~~~~~~~~~~*/
			configure_http_client();
			
			//memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
			
			param.pfAppWifiCb = wifi_cb;
   1117e:	4b8f      	ldr	r3, [pc, #572]	; (113bc <main+0x804>)
   11180:	9316      	str	r3, [sp, #88]	; 0x58
			
			ret = m2m_wifi_init(&param);
   11182:	a816      	add	r0, sp, #88	; 0x58
   11184:	4b8e      	ldr	r3, [pc, #568]	; (113c0 <main+0x808>)
   11186:	4798      	blx	r3
   11188:	1e01      	subs	r1, r0, #0
			if (M2M_SUCCESS != ret) {
   1118a:	d003      	beq.n	11194 <main+0x5dc>
				printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   1118c:	488d      	ldr	r0, [pc, #564]	; (113c4 <main+0x80c>)
   1118e:	4b83      	ldr	r3, [pc, #524]	; (1139c <main+0x7e4>)
   11190:	4798      	blx	r3
   11192:	e7fe      	b.n	11192 <main+0x5da>
				while (1) {
				}
			}
			socketInit();
   11194:	4b8c      	ldr	r3, [pc, #560]	; (113c8 <main+0x810>)
   11196:	4798      	blx	r3
			registerSocketCallback(socket_cb, resolve_cb);
   11198:	498c      	ldr	r1, [pc, #560]	; (113cc <main+0x814>)
   1119a:	488d      	ldr	r0, [pc, #564]	; (113d0 <main+0x818>)
   1119c:	4b8d      	ldr	r3, [pc, #564]	; (113d4 <main+0x81c>)
   1119e:	4798      	blx	r3
			printf("Survived http client setup\r\n");
   111a0:	488d      	ldr	r0, [pc, #564]	; (113d8 <main+0x820>)
   111a2:	4b8e      	ldr	r3, [pc, #568]	; (113dc <main+0x824>)
   111a4:	4798      	blx	r3
	uint8_t read_buffer[NVMCTRL_PAGE_SIZE]={0};
   111a6:	2240      	movs	r2, #64	; 0x40
   111a8:	2100      	movs	r1, #0
   111aa:	a806      	add	r0, sp, #24
   111ac:	4b8c      	ldr	r3, [pc, #560]	; (113e0 <main+0x828>)
   111ae:	4798      	blx	r3
		error_code = nvm_read_buffer(FW_STAT_ADDRESS, read_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   111b0:	25fe      	movs	r5, #254	; 0xfe
   111b2:	01ed      	lsls	r5, r5, #7
   111b4:	4c8b      	ldr	r4, [pc, #556]	; (113e4 <main+0x82c>)
   111b6:	2240      	movs	r2, #64	; 0x40
   111b8:	a906      	add	r1, sp, #24
   111ba:	0028      	movs	r0, r5
   111bc:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
   111be:	2805      	cmp	r0, #5
   111c0:	d0f9      	beq.n	111b6 <main+0x5fe>
	thisFW.executing_image		= read_buffer[4];
   111c2:	ab06      	add	r3, sp, #24
   111c4:	791b      	ldrb	r3, [r3, #4]
   111c6:	4698      	mov	r8, r3
			Firmware_Status_t fw_status = getFWStat();
			if (fw_status.executing_image == 1) {
				fw_status.downloaded_image = 2;
			}
			else {
				fw_status.downloaded_image = 1;
   111c8:	1e5d      	subs	r5, r3, #1
   111ca:	426a      	negs	r2, r5
   111cc:	416a      	adcs	r2, r5
   111ce:	1c55      	adds	r5, r2, #1
			}
			printf("Executing image: %d, DL to: %d\r\n", fw_status.executing_image, fw_status.downloaded_image);
   111d0:	002a      	movs	r2, r5
   111d2:	4641      	mov	r1, r8
   111d4:	4884      	ldr	r0, [pc, #528]	; (113e8 <main+0x830>)
   111d6:	4b71      	ldr	r3, [pc, #452]	; (1139c <main+0x7e4>)
   111d8:	4699      	mov	r9, r3
   111da:	4798      	blx	r3
			firstCRC=true;
   111dc:	2201      	movs	r2, #1
   111de:	4b83      	ldr	r3, [pc, #524]	; (113ec <main+0x834>)
   111e0:	701a      	strb	r2, [r3, #0]
	flash_addr = 0x40000 * slot; //Starting addr on flash where downloaded file is stored
   111e2:	4e83      	ldr	r6, [pc, #524]	; (113f0 <main+0x838>)
   111e4:	04ab      	lsls	r3, r5, #18
   111e6:	6033      	str	r3, [r6, #0]
	at25dfx_chip_wake(&at25dfx_chip);
   111e8:	4c82      	ldr	r4, [pc, #520]	; (113f4 <main+0x83c>)
   111ea:	0020      	movs	r0, r4
   111ec:	4b82      	ldr	r3, [pc, #520]	; (113f8 <main+0x840>)
   111ee:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
   111f0:	0020      	movs	r0, r4
   111f2:	4b82      	ldr	r3, [pc, #520]	; (113fc <main+0x844>)
   111f4:	4798      	blx	r3
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
   111f6:	2100      	movs	r1, #0
   111f8:	0020      	movs	r0, r4
   111fa:	4b81      	ldr	r3, [pc, #516]	; (11400 <main+0x848>)
   111fc:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr, AT25DFX_BLOCK_SIZE_64KB);	// erase block
   111fe:	2202      	movs	r2, #2
   11200:	6831      	ldr	r1, [r6, #0]
   11202:	0020      	movs	r0, r4
   11204:	4f7f      	ldr	r7, [pc, #508]	; (11404 <main+0x84c>)
   11206:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x10000, AT25DFX_BLOCK_SIZE_64KB);
   11208:	6833      	ldr	r3, [r6, #0]
   1120a:	2280      	movs	r2, #128	; 0x80
   1120c:	0252      	lsls	r2, r2, #9
   1120e:	4694      	mov	ip, r2
   11210:	4463      	add	r3, ip
   11212:	0019      	movs	r1, r3
   11214:	2202      	movs	r2, #2
   11216:	0020      	movs	r0, r4
   11218:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x20000, AT25DFX_BLOCK_SIZE_64KB);
   1121a:	6833      	ldr	r3, [r6, #0]
   1121c:	2280      	movs	r2, #128	; 0x80
   1121e:	0292      	lsls	r2, r2, #10
   11220:	4694      	mov	ip, r2
   11222:	4463      	add	r3, ip
   11224:	0019      	movs	r1, r3
   11226:	2202      	movs	r2, #2
   11228:	0020      	movs	r0, r4
   1122a:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x30000, AT25DFX_BLOCK_SIZE_64KB);
   1122c:	6831      	ldr	r1, [r6, #0]
   1122e:	23c0      	movs	r3, #192	; 0xc0
   11230:	029b      	lsls	r3, r3, #10
   11232:	469c      	mov	ip, r3
   11234:	4461      	add	r1, ip
   11236:	2202      	movs	r2, #2
   11238:	0020      	movs	r0, r4
   1123a:	47b8      	blx	r7
	printf("download_firmware: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   1123c:	4c72      	ldr	r4, [pc, #456]	; (11408 <main+0x850>)
   1123e:	0021      	movs	r1, r4
   11240:	4872      	ldr	r0, [pc, #456]	; (1140c <main+0x854>)
   11242:	47c8      	blx	r9
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   11244:	23ff      	movs	r3, #255	; 0xff
   11246:	9300      	str	r3, [sp, #0]
   11248:	4b71      	ldr	r3, [pc, #452]	; (11410 <main+0x858>)
   1124a:	2202      	movs	r2, #2
   1124c:	210b      	movs	r1, #11
   1124e:	0020      	movs	r0, r4
   11250:	4c70      	ldr	r4, [pc, #448]	; (11414 <main+0x85c>)
   11252:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   11254:	4b70      	ldr	r3, [pc, #448]	; (11418 <main+0x860>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   11256:	781a      	ldrb	r2, [r3, #0]
   11258:	2330      	movs	r3, #48	; 0x30
   1125a:	421a      	tst	r2, r3
   1125c:	d10b      	bne.n	11276 <main+0x6be>
		m2m_wifi_handle_events(NULL);
   1125e:	4f6f      	ldr	r7, [pc, #444]	; (1141c <main+0x864>)
		sw_timer_task(&swt_module_inst);
   11260:	4e50      	ldr	r6, [pc, #320]	; (113a4 <main+0x7ec>)
   11262:	4c6f      	ldr	r4, [pc, #444]	; (11420 <main+0x868>)
		m2m_wifi_handle_events(NULL);
   11264:	2000      	movs	r0, #0
   11266:	47b8      	blx	r7
		sw_timer_task(&swt_module_inst);
   11268:	0030      	movs	r0, r6
   1126a:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   1126c:	4b6a      	ldr	r3, [pc, #424]	; (11418 <main+0x860>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1126e:	781b      	ldrb	r3, [r3, #0]
   11270:	2230      	movs	r2, #48	; 0x30
   11272:	421a      	tst	r2, r3
   11274:	d0f6      	beq.n	11264 <main+0x6ac>
	printf("download_firmware: done.\r\n");
   11276:	486b      	ldr	r0, [pc, #428]	; (11424 <main+0x86c>)
   11278:	4b58      	ldr	r3, [pc, #352]	; (113dc <main+0x824>)
   1127a:	4798      	blx	r3
	printf("Calculated CRC: %x\r\n", (uint32_t)crcChecker);
   1127c:	4b6a      	ldr	r3, [pc, #424]	; (11428 <main+0x870>)
   1127e:	6819      	ldr	r1, [r3, #0]
   11280:	486a      	ldr	r0, [pc, #424]	; (1142c <main+0x874>)
   11282:	4b46      	ldr	r3, [pc, #280]	; (1139c <main+0x7e4>)
   11284:	4798      	blx	r3
	down_state &= ~mask;
   11286:	4c64      	ldr	r4, [pc, #400]	; (11418 <main+0x860>)
   11288:	7823      	ldrb	r3, [r4, #0]
   1128a:	223c      	movs	r2, #60	; 0x3c
   1128c:	4393      	bics	r3, r2
   1128e:	7023      	strb	r3, [r4, #0]
	download_CRC = true;
   11290:	3a3b      	subs	r2, #59	; 0x3b
   11292:	4b67      	ldr	r3, [pc, #412]	; (11430 <main+0x878>)
   11294:	701a      	strb	r2, [r3, #0]
	start_download();
   11296:	4b67      	ldr	r3, [pc, #412]	; (11434 <main+0x87c>)
   11298:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1129a:	7822      	ldrb	r2, [r4, #0]
   1129c:	2330      	movs	r3, #48	; 0x30
   1129e:	421a      	tst	r2, r3
   112a0:	d10b      	bne.n	112ba <main+0x702>
		m2m_wifi_handle_events(NULL);
   112a2:	4f5e      	ldr	r7, [pc, #376]	; (1141c <main+0x864>)
		sw_timer_task(&swt_module_inst);
   112a4:	4e3f      	ldr	r6, [pc, #252]	; (113a4 <main+0x7ec>)
   112a6:	4c5e      	ldr	r4, [pc, #376]	; (11420 <main+0x868>)
		m2m_wifi_handle_events(NULL);
   112a8:	2000      	movs	r0, #0
   112aa:	47b8      	blx	r7
		sw_timer_task(&swt_module_inst);
   112ac:	0030      	movs	r0, r6
   112ae:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   112b0:	4b59      	ldr	r3, [pc, #356]	; (11418 <main+0x860>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   112b2:	781b      	ldrb	r3, [r3, #0]
   112b4:	2230      	movs	r2, #48	; 0x30
   112b6:	421a      	tst	r2, r3
   112b8:	d0f6      	beq.n	112a8 <main+0x6f0>
	download_CRC = false;
   112ba:	2200      	movs	r2, #0
   112bc:	4b5c      	ldr	r3, [pc, #368]	; (11430 <main+0x878>)
   112be:	701a      	strb	r2, [r3, #0]
			download_firmware(fw_status.downloaded_image);
			printf("\n\rMain: Done downloading firmware and CRC\n\r");
   112c0:	485d      	ldr	r0, [pc, #372]	; (11438 <main+0x880>)
   112c2:	4b36      	ldr	r3, [pc, #216]	; (1139c <main+0x7e4>)
   112c4:	4798      	blx	r3
			if (dlCRC == crcChecker){
   112c6:	4b5d      	ldr	r3, [pc, #372]	; (1143c <main+0x884>)
   112c8:	681a      	ldr	r2, [r3, #0]
   112ca:	4b57      	ldr	r3, [pc, #348]	; (11428 <main+0x870>)
   112cc:	681b      	ldr	r3, [r3, #0]
   112ce:	429a      	cmp	r2, r3
   112d0:	d137      	bne.n	11342 <main+0x78a>
				printf("\n\rMain: CRC MATCHED! starting firmware upgrade. \n\r");
   112d2:	485b      	ldr	r0, [pc, #364]	; (11440 <main+0x888>)
   112d4:	4b31      	ldr	r3, [pc, #196]	; (1139c <main+0x7e4>)
   112d6:	4798      	blx	r3
				*(uint32_t*)fw_status.signature = (uint32_t)crcChecker; //replace with checksum of downloaded image
   112d8:	4b53      	ldr	r3, [pc, #332]	; (11428 <main+0x870>)
   112da:	681e      	ldr	r6, [r3, #0]
   112dc:	0a32      	lsrs	r2, r6, #8
   112de:	0c37      	lsrs	r7, r6, #16
   112e0:	9604      	str	r6, [sp, #16]
   112e2:	b2f3      	uxtb	r3, r6
   112e4:	469a      	mov	sl, r3
   112e6:	b2d3      	uxtb	r3, r2
   112e8:	4699      	mov	r9, r3
   112ea:	b2ff      	uxtb	r7, r7
   112ec:	0e36      	lsrs	r6, r6, #24
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE]={0};
   112ee:	ac06      	add	r4, sp, #24
   112f0:	2240      	movs	r2, #64	; 0x40
   112f2:	2100      	movs	r1, #0
   112f4:	0020      	movs	r0, r4
   112f6:	4b3a      	ldr	r3, [pc, #232]	; (113e0 <main+0x828>)
   112f8:	4798      	blx	r3
	page_buffer[0] = thisFW.signature[0];
   112fa:	4653      	mov	r3, sl
   112fc:	7023      	strb	r3, [r4, #0]
	page_buffer[1] = thisFW.signature[1];
   112fe:	464b      	mov	r3, r9
   11300:	7063      	strb	r3, [r4, #1]
	page_buffer[2] = thisFW.signature[2];
   11302:	70a7      	strb	r7, [r4, #2]
	page_buffer[3] = thisFW.signature[3];
   11304:	70e6      	strb	r6, [r4, #3]
	page_buffer[4] = thisFW.executing_image;
   11306:	4643      	mov	r3, r8
   11308:	7123      	strb	r3, [r4, #4]
	page_buffer[5] = thisFW.downloaded_image;
   1130a:	7165      	strb	r5, [r4, #5]
	page_buffer[6] = thisFW.writenew_image;
   1130c:	2301      	movs	r3, #1
   1130e:	71a3      	strb	r3, [r4, #6]
		error_code = nvm_erase_row(FW_STAT_ADDRESS);			// Erase FW stat row
   11310:	25fe      	movs	r5, #254	; 0xfe
   11312:	01ed      	lsls	r5, r5, #7
   11314:	4c4b      	ldr	r4, [pc, #300]	; (11444 <main+0x88c>)
   11316:	0028      	movs	r0, r5
   11318:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
   1131a:	2805      	cmp	r0, #5
   1131c:	d0fb      	beq.n	11316 <main+0x75e>
		error_code = nvm_write_buffer(FW_STAT_ADDRESS, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   1131e:	25fe      	movs	r5, #254	; 0xfe
   11320:	01ed      	lsls	r5, r5, #7
   11322:	2440      	movs	r4, #64	; 0x40
   11324:	0022      	movs	r2, r4
   11326:	a906      	add	r1, sp, #24
   11328:	0028      	movs	r0, r5
   1132a:	4b47      	ldr	r3, [pc, #284]	; (11448 <main+0x890>)
   1132c:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
   1132e:	2805      	cmp	r0, #5
   11330:	d0f8      	beq.n	11324 <main+0x76c>
  __ASM volatile ("dsb");
   11332:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   11336:	4a45      	ldr	r2, [pc, #276]	; (1144c <main+0x894>)
   11338:	4b45      	ldr	r3, [pc, #276]	; (11450 <main+0x898>)
   1133a:	60da      	str	r2, [r3, #12]
   1133c:	f3bf 8f4f 	dsb	sy
   11340:	e7fe      	b.n	11340 <main+0x788>
				fw_status.writenew_image = 1;  // write image flag
				writeFWStat(fw_status);
			} 
			else {
				printf("\n\r Main: CRC Check Fail!\n\r");
   11342:	4844      	ldr	r0, [pc, #272]	; (11454 <main+0x89c>)
   11344:	4b15      	ldr	r3, [pc, #84]	; (1139c <main+0x7e4>)
   11346:	4798      	blx	r3
   11348:	e7f3      	b.n	11332 <main+0x77a>
   1134a:	46c0      	nop			; (mov r8, r8)
   1134c:	000122c1 	.word	0x000122c1
   11350:	2000038c 	.word	0x2000038c
   11354:	00016be8 	.word	0x00016be8
   11358:	0001439d 	.word	0x0001439d
   1135c:	00016de4 	.word	0x00016de4
   11360:	20000318 	.word	0x20000318
   11364:	00011a25 	.word	0x00011a25
   11368:	20000e38 	.word	0x20000e38
   1136c:	20000f84 	.word	0x20000f84
   11370:	0000bfd1 	.word	0x0000bfd1
   11374:	0000e595 	.word	0x0000e595
   11378:	20000fe8 	.word	0x20000fe8
   1137c:	0000bfad 	.word	0x0000bfad
   11380:	00016c0c 	.word	0x00016c0c
   11384:	00016c18 	.word	0x00016c18
   11388:	200003d1 	.word	0x200003d1
   1138c:	0000ad59 	.word	0x0000ad59
   11390:	000115b9 	.word	0x000115b9
   11394:	00009201 	.word	0x00009201
   11398:	00016c24 	.word	0x00016c24
   1139c:	000140dd 	.word	0x000140dd
   113a0:	0000c8ad 	.word	0x0000c8ad
   113a4:	20000e44 	.word	0x20000e44
   113a8:	20000e9c 	.word	0x20000e9c
   113ac:	0000c8d5 	.word	0x0000c8d5
   113b0:	00016c4c 	.word	0x00016c4c
   113b4:	000108d1 	.word	0x000108d1
   113b8:	0000c989 	.word	0x0000c989
   113bc:	000106cd 	.word	0x000106cd
   113c0:	000090cd 	.word	0x000090cd
   113c4:	00016c94 	.word	0x00016c94
   113c8:	0000ad15 	.word	0x0000ad15
   113cc:	0001031d 	.word	0x0001031d
   113d0:	00010359 	.word	0x00010359
   113d4:	0000ad95 	.word	0x0000ad95
   113d8:	00016cc0 	.word	0x00016cc0
   113dc:	000141f9 	.word	0x000141f9
   113e0:	00013f7b 	.word	0x00013f7b
   113e4:	0000e791 	.word	0x0000e791
   113e8:	00016cdc 	.word	0x00016cdc
   113ec:	2000000d 	.word	0x2000000d
   113f0:	200005d4 	.word	0x200005d4
   113f4:	20000e30 	.word	0x20000e30
   113f8:	0000e4c9 	.word	0x0000e4c9
   113fc:	0000dbed 	.word	0x0000dbed
   11400:	0000e34d 	.word	0x0000e34d
   11404:	0000e135 	.word	0x0000e135
   11408:	000170b8 	.word	0x000170b8
   1140c:	00016d00 	.word	0x00016d00
   11410:	000170ac 	.word	0x000170ac
   11414:	000094b9 	.word	0x000094b9
   11418:	2000028c 	.word	0x2000028c
   1141c:	0000921d 	.word	0x0000921d
   11420:	0000d9fd 	.word	0x0000d9fd
   11424:	00016d34 	.word	0x00016d34
   11428:	20000ff4 	.word	0x20000ff4
   1142c:	00016d50 	.word	0x00016d50
   11430:	2000028d 	.word	0x2000028d
   11434:	00010365 	.word	0x00010365
   11438:	00016d68 	.word	0x00016d68
   1143c:	20000ff8 	.word	0x20000ff8
   11440:	00016d94 	.word	0x00016d94
   11444:	0000e7fd 	.word	0x0000e7fd
   11448:	0000e6e9 	.word	0x0000e6e9
   1144c:	05fa0004 	.word	0x05fa0004
   11450:	e000ed00 	.word	0xe000ed00
   11454:	00016dc8 	.word	0x00016dc8

00011458 <_hwerr_to_stderr>:
   11458:	1c03      	adds	r3, r0, #0
   1145a:	300e      	adds	r0, #14
   1145c:	b500      	push	{lr}
   1145e:	280e      	cmp	r0, #14
   11460:	d819      	bhi.n	11496 <_hwerr_to_stderr+0x3e>
   11462:	f000 ff23 	bl	122ac <__gnu_thumb1_case_uqi>
   11466:	1416      	.short	0x1416
   11468:	1b181012 	.word	0x1b181012
   1146c:	180c0e18 	.word	0x180c0e18
   11470:	1d0a0e0e 	.word	0x1d0a0e0e
   11474:	08          	.byte	0x08
   11475:	00          	.byte	0x00
   11476:	2000      	movs	r0, #0
   11478:	e014      	b.n	114a4 <_hwerr_to_stderr+0x4c>
   1147a:	2070      	movs	r0, #112	; 0x70
   1147c:	e011      	b.n	114a2 <_hwerr_to_stderr+0x4a>
   1147e:	2016      	movs	r0, #22
   11480:	e00f      	b.n	114a2 <_hwerr_to_stderr+0x4a>
   11482:	200c      	movs	r0, #12
   11484:	e00d      	b.n	114a2 <_hwerr_to_stderr+0x4a>
   11486:	2079      	movs	r0, #121	; 0x79
   11488:	e00b      	b.n	114a2 <_hwerr_to_stderr+0x4a>
   1148a:	2068      	movs	r0, #104	; 0x68
   1148c:	e009      	b.n	114a2 <_hwerr_to_stderr+0x4a>
   1148e:	200b      	movs	r0, #11
   11490:	e007      	b.n	114a2 <_hwerr_to_stderr+0x4a>
   11492:	2010      	movs	r0, #16
   11494:	e005      	b.n	114a2 <_hwerr_to_stderr+0x4a>
   11496:	2000      	movs	r0, #0
   11498:	4283      	cmp	r3, r0
   1149a:	da03      	bge.n	114a4 <_hwerr_to_stderr+0x4c>
   1149c:	2005      	movs	r0, #5
   1149e:	e000      	b.n	114a2 <_hwerr_to_stderr+0x4a>
   114a0:	2002      	movs	r0, #2
   114a2:	4240      	negs	r0, r0
   114a4:	bd00      	pop	{pc}
	...

000114a8 <_mqtt_send_wait>:
   114a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   114aa:	1c04      	adds	r4, r0, #0
   114ac:	3443      	adds	r4, #67	; 0x43
   114ae:	7823      	ldrb	r3, [r4, #0]
   114b0:	1c05      	adds	r5, r0, #0
   114b2:	07d8      	lsls	r0, r3, #31
   114b4:	d51c      	bpl.n	114f0 <_mqtt_send_wait+0x48>
   114b6:	2604      	movs	r6, #4
   114b8:	4333      	orrs	r3, r6
   114ba:	7023      	strb	r3, [r4, #0]
   114bc:	2002      	movs	r0, #2
   114be:	5628      	ldrsb	r0, [r5, r0]
   114c0:	b292      	uxth	r2, r2
   114c2:	2300      	movs	r3, #0
   114c4:	4f0c      	ldr	r7, [pc, #48]	; (114f8 <_mqtt_send_wait+0x50>)
   114c6:	47b8      	blx	r7
   114c8:	2800      	cmp	r0, #0
   114ca:	da05      	bge.n	114d8 <_mqtt_send_wait+0x30>
   114cc:	7823      	ldrb	r3, [r4, #0]
   114ce:	43b3      	bics	r3, r6
   114d0:	7023      	strb	r3, [r4, #0]
   114d2:	4b0a      	ldr	r3, [pc, #40]	; (114fc <_mqtt_send_wait+0x54>)
   114d4:	4798      	blx	r3
   114d6:	e00d      	b.n	114f4 <_mqtt_send_wait+0x4c>
   114d8:	7822      	ldrb	r2, [r4, #0]
   114da:	2314      	movs	r3, #20
   114dc:	4013      	ands	r3, r2
   114de:	2000      	movs	r0, #0
   114e0:	2b04      	cmp	r3, #4
   114e2:	d107      	bne.n	114f4 <_mqtt_send_wait+0x4c>
   114e4:	4b06      	ldr	r3, [pc, #24]	; (11500 <_mqtt_send_wait+0x58>)
   114e6:	4798      	blx	r3
   114e8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   114ea:	4b06      	ldr	r3, [pc, #24]	; (11504 <_mqtt_send_wait+0x5c>)
   114ec:	4798      	blx	r3
   114ee:	e7f3      	b.n	114d8 <_mqtt_send_wait+0x30>
   114f0:	2001      	movs	r0, #1
   114f2:	4240      	negs	r0, r0
   114f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   114f6:	46c0      	nop			; (mov r8, r8)
   114f8:	0000afbd 	.word	0x0000afbd
   114fc:	00011459 	.word	0x00011459
   11500:	0000921d 	.word	0x0000921d
   11504:	0000d9fd 	.word	0x0000d9fd

00011508 <mqtt_get_config_defaults>:
   11508:	4b07      	ldr	r3, [pc, #28]	; (11528 <mqtt_get_config_defaults+0x20>)
   1150a:	2240      	movs	r2, #64	; 0x40
   1150c:	8003      	strh	r3, [r0, #0]
   1150e:	2396      	movs	r3, #150	; 0x96
   11510:	009b      	lsls	r3, r3, #2
   11512:	8103      	strh	r3, [r0, #8]
   11514:	6102      	str	r2, [r0, #16]
   11516:	2300      	movs	r3, #0
   11518:	2220      	movs	r2, #32
   1151a:	7083      	strb	r3, [r0, #2]
   1151c:	6043      	str	r3, [r0, #4]
   1151e:	60c3      	str	r3, [r0, #12]
   11520:	6142      	str	r2, [r0, #20]
   11522:	7603      	strb	r3, [r0, #24]
   11524:	4770      	bx	lr
   11526:	46c0      	nop			; (mov r8, r8)
   11528:	0000075b 	.word	0x0000075b

0001152c <mqtt_init>:
   1152c:	b538      	push	{r3, r4, r5, lr}
   1152e:	1c04      	adds	r4, r0, #0
   11530:	1c0d      	adds	r5, r1, #0
   11532:	2800      	cmp	r0, #0
   11534:	d030      	beq.n	11598 <mqtt_init+0x6c>
   11536:	2900      	cmp	r1, #0
   11538:	d02e      	beq.n	11598 <mqtt_init+0x6c>
   1153a:	690b      	ldr	r3, [r1, #16]
   1153c:	2b00      	cmp	r3, #0
   1153e:	d02b      	beq.n	11598 <mqtt_init+0x6c>
   11540:	684b      	ldr	r3, [r1, #4]
   11542:	2b00      	cmp	r3, #0
   11544:	d028      	beq.n	11598 <mqtt_init+0x6c>
   11546:	2100      	movs	r1, #0
   11548:	2274      	movs	r2, #116	; 0x74
   1154a:	4b16      	ldr	r3, [pc, #88]	; (115a4 <mqtt_init+0x78>)
   1154c:	4798      	blx	r3
   1154e:	1c20      	adds	r0, r4, #0
   11550:	4b15      	ldr	r3, [pc, #84]	; (115a8 <mqtt_init+0x7c>)
   11552:	3058      	adds	r0, #88	; 0x58
   11554:	1c29      	adds	r1, r5, #0
   11556:	221c      	movs	r2, #28
   11558:	4798      	blx	r3
   1155a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1155c:	2b00      	cmp	r3, #0
   1155e:	d10b      	bne.n	11578 <mqtt_init+0x4c>
   11560:	6928      	ldr	r0, [r5, #16]
   11562:	4b12      	ldr	r3, [pc, #72]	; (115ac <mqtt_init+0x80>)
   11564:	4798      	blx	r3
   11566:	6660      	str	r0, [r4, #100]	; 0x64
   11568:	2800      	cmp	r0, #0
   1156a:	d017      	beq.n	1159c <mqtt_init+0x70>
   1156c:	1c23      	adds	r3, r4, #0
   1156e:	3343      	adds	r3, #67	; 0x43
   11570:	781a      	ldrb	r2, [r3, #0]
   11572:	2120      	movs	r1, #32
   11574:	430a      	orrs	r2, r1
   11576:	701a      	strb	r2, [r3, #0]
   11578:	892a      	ldrh	r2, [r5, #8]
   1157a:	23fa      	movs	r3, #250	; 0xfa
   1157c:	005b      	lsls	r3, r3, #1
   1157e:	4353      	muls	r3, r2
   11580:	6868      	ldr	r0, [r5, #4]
   11582:	490b      	ldr	r1, [pc, #44]	; (115b0 <mqtt_init+0x84>)
   11584:	1c22      	adds	r2, r4, #0
   11586:	4d0b      	ldr	r5, [pc, #44]	; (115b4 <mqtt_init+0x88>)
   11588:	47a8      	blx	r5
   1158a:	1c03      	adds	r3, r0, #0
   1158c:	6520      	str	r0, [r4, #80]	; 0x50
   1158e:	2000      	movs	r0, #0
   11590:	4283      	cmp	r3, r0
   11592:	da05      	bge.n	115a0 <mqtt_init+0x74>
   11594:	201c      	movs	r0, #28
   11596:	e002      	b.n	1159e <mqtt_init+0x72>
   11598:	2016      	movs	r0, #22
   1159a:	e000      	b.n	1159e <mqtt_init+0x72>
   1159c:	200c      	movs	r0, #12
   1159e:	4240      	negs	r0, r0
   115a0:	bd38      	pop	{r3, r4, r5, pc}
   115a2:	46c0      	nop			; (mov r8, r8)
   115a4:	00013f7b 	.word	0x00013f7b
   115a8:	00013f45 	.word	0x00013f45
   115ac:	00013f1d 	.word	0x00013f1d
   115b0:	00011d79 	.word	0x00011d79
   115b4:	0000d979 	.word	0x0000d979

000115b8 <mqtt_deinit>:
   115b8:	b510      	push	{r4, lr}
   115ba:	1e04      	subs	r4, r0, #0
   115bc:	d014      	beq.n	115e8 <mqtt_deinit+0x30>
   115be:	6e40      	ldr	r0, [r0, #100]	; 0x64
   115c0:	2800      	cmp	r0, #0
   115c2:	d008      	beq.n	115d6 <mqtt_deinit+0x1e>
   115c4:	1c23      	adds	r3, r4, #0
   115c6:	3343      	adds	r3, #67	; 0x43
   115c8:	781b      	ldrb	r3, [r3, #0]
   115ca:	069a      	lsls	r2, r3, #26
   115cc:	d503      	bpl.n	115d6 <mqtt_deinit+0x1e>
   115ce:	4b09      	ldr	r3, [pc, #36]	; (115f4 <mqtt_deinit+0x3c>)
   115d0:	4798      	blx	r3
   115d2:	2300      	movs	r3, #0
   115d4:	6663      	str	r3, [r4, #100]	; 0x64
   115d6:	6d21      	ldr	r1, [r4, #80]	; 0x50
   115d8:	2900      	cmp	r1, #0
   115da:	db08      	blt.n	115ee <mqtt_deinit+0x36>
   115dc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   115de:	2800      	cmp	r0, #0
   115e0:	d006      	beq.n	115f0 <mqtt_deinit+0x38>
   115e2:	4b05      	ldr	r3, [pc, #20]	; (115f8 <mqtt_deinit+0x40>)
   115e4:	4798      	blx	r3
   115e6:	e002      	b.n	115ee <mqtt_deinit+0x36>
   115e8:	2016      	movs	r0, #22
   115ea:	4240      	negs	r0, r0
   115ec:	e000      	b.n	115f0 <mqtt_deinit+0x38>
   115ee:	2000      	movs	r0, #0
   115f0:	bd10      	pop	{r4, pc}
   115f2:	46c0      	nop			; (mov r8, r8)
   115f4:	00013f31 	.word	0x00013f31
   115f8:	0000d9b1 	.word	0x0000d9b1

000115fc <mqtt_register_callback>:
   115fc:	2800      	cmp	r0, #0
   115fe:	d002      	beq.n	11606 <mqtt_register_callback+0xa>
   11600:	6541      	str	r1, [r0, #84]	; 0x54
   11602:	2000      	movs	r0, #0
   11604:	e001      	b.n	1160a <mqtt_register_callback+0xe>
   11606:	2016      	movs	r0, #22
   11608:	4240      	negs	r0, r0
   1160a:	4770      	bx	lr

0001160c <mqtt_socket_resolve_handler>:
   1160c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1160e:	1c06      	adds	r6, r0, #0
   11610:	b085      	sub	sp, #20
   11612:	1c0f      	adds	r7, r1, #0
   11614:	2400      	movs	r4, #0
   11616:	4b0f      	ldr	r3, [pc, #60]	; (11654 <mqtt_socket_resolve_handler+0x48>)
   11618:	58e5      	ldr	r5, [r4, r3]
   1161a:	2d00      	cmp	r5, #0
   1161c:	d015      	beq.n	1164a <mqtt_socket_resolve_handler+0x3e>
   1161e:	1ce9      	adds	r1, r5, #3
   11620:	1c30      	adds	r0, r6, #0
   11622:	4b0d      	ldr	r3, [pc, #52]	; (11658 <mqtt_socket_resolve_handler+0x4c>)
   11624:	4798      	blx	r3
   11626:	2800      	cmp	r0, #0
   11628:	d10f      	bne.n	1164a <mqtt_socket_resolve_handler+0x3e>
   1162a:	466a      	mov	r2, sp
   1162c:	2302      	movs	r3, #2
   1162e:	8013      	strh	r3, [r2, #0]
   11630:	1c2b      	adds	r3, r5, #0
   11632:	3358      	adds	r3, #88	; 0x58
   11634:	881b      	ldrh	r3, [r3, #0]
   11636:	9701      	str	r7, [sp, #4]
   11638:	ba5b      	rev16	r3, r3
   1163a:	8053      	strh	r3, [r2, #2]
   1163c:	2002      	movs	r0, #2
   1163e:	5628      	ldrsb	r0, [r5, r0]
   11640:	4669      	mov	r1, sp
   11642:	2210      	movs	r2, #16
   11644:	4b05      	ldr	r3, [pc, #20]	; (1165c <mqtt_socket_resolve_handler+0x50>)
   11646:	4798      	blx	r3
   11648:	e002      	b.n	11650 <mqtt_socket_resolve_handler+0x44>
   1164a:	3404      	adds	r4, #4
   1164c:	2c1c      	cmp	r4, #28
   1164e:	d1e2      	bne.n	11616 <mqtt_socket_resolve_handler+0xa>
   11650:	b005      	add	sp, #20
   11652:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11654:	200003d8 	.word	0x200003d8
   11658:	000143e1 	.word	0x000143e1
   1165c:	0000af2d 	.word	0x0000af2d

00011660 <mqtt_connect>:
   11660:	b5f0      	push	{r4, r5, r6, r7, lr}
   11662:	1c04      	adds	r4, r0, #0
   11664:	b089      	sub	sp, #36	; 0x24
   11666:	1c0d      	adds	r5, r1, #0
   11668:	2800      	cmp	r0, #0
   1166a:	d051      	beq.n	11710 <mqtt_connect+0xb0>
   1166c:	2900      	cmp	r1, #0
   1166e:	d04f      	beq.n	11710 <mqtt_connect+0xb0>
   11670:	1c08      	adds	r0, r1, #0
   11672:	4b39      	ldr	r3, [pc, #228]	; (11758 <mqtt_connect+0xf8>)
   11674:	4798      	blx	r3
   11676:	2840      	cmp	r0, #64	; 0x40
   11678:	d84c      	bhi.n	11714 <mqtt_connect+0xb4>
   1167a:	1c21      	adds	r1, r4, #0
   1167c:	3143      	adds	r1, #67	; 0x43
   1167e:	780b      	ldrb	r3, [r1, #0]
   11680:	9101      	str	r1, [sp, #4]
   11682:	07db      	lsls	r3, r3, #31
   11684:	0fd9      	lsrs	r1, r3, #31
   11686:	466a      	mov	r2, sp
   11688:	b2ce      	uxtb	r6, r1
   1168a:	1ce0      	adds	r0, r4, #3
   1168c:	7211      	strb	r1, [r2, #8]
   1168e:	2e00      	cmp	r6, #0
   11690:	d142      	bne.n	11718 <mqtt_connect+0xb8>
   11692:	2701      	movs	r7, #1
   11694:	1c29      	adds	r1, r5, #0
   11696:	4b31      	ldr	r3, [pc, #196]	; (1175c <mqtt_connect+0xfc>)
   11698:	8027      	strh	r7, [r4, #0]
   1169a:	4798      	blx	r3
   1169c:	9a01      	ldr	r2, [sp, #4]
   1169e:	2002      	movs	r0, #2
   116a0:	7813      	ldrb	r3, [r2, #0]
   116a2:	9901      	ldr	r1, [sp, #4]
   116a4:	43bb      	bics	r3, r7
   116a6:	4383      	bics	r3, r0
   116a8:	22e3      	movs	r2, #227	; 0xe3
   116aa:	4013      	ands	r3, r2
   116ac:	466a      	mov	r2, sp
   116ae:	700b      	strb	r3, [r1, #0]
   116b0:	7a12      	ldrb	r2, [r2, #8]
   116b2:	1c23      	adds	r3, r4, #0
   116b4:	3348      	adds	r3, #72	; 0x48
   116b6:	6466      	str	r6, [r4, #68]	; 0x44
   116b8:	701a      	strb	r2, [r3, #0]
   116ba:	7c9a      	ldrb	r2, [r3, #18]
   116bc:	805e      	strh	r6, [r3, #2]
   116be:	1e53      	subs	r3, r2, #1
   116c0:	419a      	sbcs	r2, r3
   116c2:	b2d2      	uxtb	r2, r2
   116c4:	1c39      	adds	r1, r7, #0
   116c6:	4b26      	ldr	r3, [pc, #152]	; (11760 <mqtt_connect+0x100>)
   116c8:	4798      	blx	r3
   116ca:	70a0      	strb	r0, [r4, #2]
   116cc:	2800      	cmp	r0, #0
   116ce:	db25      	blt.n	1171c <mqtt_connect+0xbc>
   116d0:	4b24      	ldr	r3, [pc, #144]	; (11764 <mqtt_connect+0x104>)
   116d2:	0080      	lsls	r0, r0, #2
   116d4:	50c4      	str	r4, [r0, r3]
   116d6:	1c2b      	adds	r3, r5, #0
   116d8:	781f      	ldrb	r7, [r3, #0]
   116da:	2f00      	cmp	r7, #0
   116dc:	d026      	beq.n	1172c <mqtt_connect+0xcc>
   116de:	2220      	movs	r2, #32
   116e0:	1c39      	adds	r1, r7, #0
   116e2:	4391      	bics	r1, r2
   116e4:	1c0a      	adds	r2, r1, #0
   116e6:	3a41      	subs	r2, #65	; 0x41
   116e8:	b2d2      	uxtb	r2, r2
   116ea:	3301      	adds	r3, #1
   116ec:	2a05      	cmp	r2, #5
   116ee:	d90d      	bls.n	1170c <mqtt_connect+0xac>
   116f0:	2f3a      	cmp	r7, #58	; 0x3a
   116f2:	d00b      	beq.n	1170c <mqtt_connect+0xac>
   116f4:	2f2f      	cmp	r7, #47	; 0x2f
   116f6:	d009      	beq.n	1170c <mqtt_connect+0xac>
   116f8:	2f2e      	cmp	r7, #46	; 0x2e
   116fa:	d102      	bne.n	11702 <mqtt_connect+0xa2>
   116fc:	2e00      	cmp	r6, #0
   116fe:	d0eb      	beq.n	116d8 <mqtt_connect+0x78>
   11700:	e00f      	b.n	11722 <mqtt_connect+0xc2>
   11702:	2230      	movs	r2, #48	; 0x30
   11704:	4017      	ands	r7, r2
   11706:	4297      	cmp	r7, r2
   11708:	d0e6      	beq.n	116d8 <mqtt_connect+0x78>
   1170a:	e00a      	b.n	11722 <mqtt_connect+0xc2>
   1170c:	2601      	movs	r6, #1
   1170e:	e7e3      	b.n	116d8 <mqtt_connect+0x78>
   11710:	2016      	movs	r0, #22
   11712:	e004      	b.n	1171e <mqtt_connect+0xbe>
   11714:	205b      	movs	r0, #91	; 0x5b
   11716:	e002      	b.n	1171e <mqtt_connect+0xbe>
   11718:	2078      	movs	r0, #120	; 0x78
   1171a:	e000      	b.n	1171e <mqtt_connect+0xbe>
   1171c:	201c      	movs	r0, #28
   1171e:	4240      	negs	r0, r0
   11720:	e017      	b.n	11752 <mqtt_connect+0xf2>
   11722:	1c28      	adds	r0, r5, #0
   11724:	4b10      	ldr	r3, [pc, #64]	; (11768 <mqtt_connect+0x108>)
   11726:	4798      	blx	r3
   11728:	2000      	movs	r0, #0
   1172a:	e012      	b.n	11752 <mqtt_connect+0xf2>
   1172c:	466a      	mov	r2, sp
   1172e:	2302      	movs	r3, #2
   11730:	8213      	strh	r3, [r2, #16]
   11732:	1c23      	adds	r3, r4, #0
   11734:	3358      	adds	r3, #88	; 0x58
   11736:	881b      	ldrh	r3, [r3, #0]
   11738:	1c28      	adds	r0, r5, #0
   1173a:	ba5b      	rev16	r3, r3
   1173c:	8253      	strh	r3, [r2, #18]
   1173e:	4b0b      	ldr	r3, [pc, #44]	; (1176c <mqtt_connect+0x10c>)
   11740:	4798      	blx	r3
   11742:	9005      	str	r0, [sp, #20]
   11744:	2002      	movs	r0, #2
   11746:	5620      	ldrsb	r0, [r4, r0]
   11748:	a904      	add	r1, sp, #16
   1174a:	2210      	movs	r2, #16
   1174c:	4b08      	ldr	r3, [pc, #32]	; (11770 <mqtt_connect+0x110>)
   1174e:	4798      	blx	r3
   11750:	1c38      	adds	r0, r7, #0
   11752:	b009      	add	sp, #36	; 0x24
   11754:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11756:	46c0      	nop			; (mov r8, r8)
   11758:	0001443f 	.word	0x0001443f
   1175c:	000143f5 	.word	0x000143f5
   11760:	0000ada9 	.word	0x0000ada9
   11764:	200003d8 	.word	0x200003d8
   11768:	0000b1f1 	.word	0x0000b1f1
   1176c:	0000b185 	.word	0x0000b185
   11770:	0000af2d 	.word	0x0000af2d

00011774 <mqtt_connect_broker>:
   11774:	b5f0      	push	{r4, r5, r6, r7, lr}
   11776:	b095      	sub	sp, #84	; 0x54
   11778:	af02      	add	r7, sp, #8
   1177a:	617b      	str	r3, [r7, #20]
   1177c:	1c3b      	adds	r3, r7, #0
   1177e:	3370      	adds	r3, #112	; 0x70
   11780:	781b      	ldrb	r3, [r3, #0]
   11782:	1c05      	adds	r5, r0, #0
   11784:	60fb      	str	r3, [r7, #12]
   11786:	1c3b      	adds	r3, r7, #0
   11788:	3374      	adds	r3, #116	; 0x74
   1178a:	781b      	ldrb	r3, [r3, #0]
   1178c:	6139      	str	r1, [r7, #16]
   1178e:	61fa      	str	r2, [r7, #28]
   11790:	60bb      	str	r3, [r7, #8]
   11792:	2800      	cmp	r0, #0
   11794:	d101      	bne.n	1179a <mqtt_connect_broker+0x26>
   11796:	2016      	movs	r0, #22
   11798:	e129      	b.n	119ee <mqtt_connect_broker+0x27a>
   1179a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1179c:	4668      	mov	r0, sp
   1179e:	3307      	adds	r3, #7
   117a0:	08db      	lsrs	r3, r3, #3
   117a2:	00db      	lsls	r3, r3, #3
   117a4:	1ac0      	subs	r0, r0, r3
   117a6:	4685      	mov	sp, r0
   117a8:	ac02      	add	r4, sp, #8
   117aa:	607c      	str	r4, [r7, #4]
   117ac:	6e3c      	ldr	r4, [r7, #96]	; 0x60
   117ae:	2c00      	cmp	r4, #0
   117b0:	d0f1      	beq.n	11796 <mqtt_connect_broker+0x22>
   117b2:	1c2b      	adds	r3, r5, #0
   117b4:	3343      	adds	r3, #67	; 0x43
   117b6:	781b      	ldrb	r3, [r3, #0]
   117b8:	07d8      	lsls	r0, r3, #31
   117ba:	d400      	bmi.n	117be <mqtt_connect_broker+0x4a>
   117bc:	e112      	b.n	119e4 <mqtt_connect_broker+0x270>
   117be:	079a      	lsls	r2, r3, #30
   117c0:	d500      	bpl.n	117c4 <mqtt_connect_broker+0x50>
   117c2:	e111      	b.n	119e8 <mqtt_connect_broker+0x274>
   117c4:	071c      	lsls	r4, r3, #28
   117c6:	d40b      	bmi.n	117e0 <mqtt_connect_broker+0x6c>
   117c8:	4e8b      	ldr	r6, [pc, #556]	; (119f8 <mqtt_connect_broker+0x284>)
   117ca:	6e38      	ldr	r0, [r7, #96]	; 0x60
   117cc:	47b0      	blx	r6
   117ce:	1c03      	adds	r3, r0, #0
   117d0:	61b8      	str	r0, [r7, #24]
   117d2:	69f8      	ldr	r0, [r7, #28]
   117d4:	330e      	adds	r3, #14
   117d6:	1c34      	adds	r4, r6, #0
   117d8:	2800      	cmp	r0, #0
   117da:	d113      	bne.n	11804 <mqtt_connect_broker+0x90>
   117dc:	1c1e      	adds	r6, r3, #0
   117de:	e01d      	b.n	1181c <mqtt_connect_broker+0xa8>
   117e0:	1c2b      	adds	r3, r5, #0
   117e2:	3370      	adds	r3, #112	; 0x70
   117e4:	781b      	ldrb	r3, [r3, #0]
   117e6:	2b00      	cmp	r3, #0
   117e8:	d000      	beq.n	117ec <mqtt_connect_broker+0x78>
   117ea:	e0ff      	b.n	119ec <mqtt_connect_broker+0x278>
   117ec:	1c2b      	adds	r3, r5, #0
   117ee:	3343      	adds	r3, #67	; 0x43
   117f0:	781b      	ldrb	r3, [r3, #0]
   117f2:	071a      	lsls	r2, r3, #28
   117f4:	d5e8      	bpl.n	117c8 <mqtt_connect_broker+0x54>
   117f6:	4b81      	ldr	r3, [pc, #516]	; (119fc <mqtt_connect_broker+0x288>)
   117f8:	2000      	movs	r0, #0
   117fa:	4798      	blx	r3
   117fc:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   117fe:	4b80      	ldr	r3, [pc, #512]	; (11a00 <mqtt_connect_broker+0x28c>)
   11800:	4798      	blx	r3
   11802:	e7f3      	b.n	117ec <mqtt_connect_broker+0x78>
   11804:	69f8      	ldr	r0, [r7, #28]
   11806:	47b0      	blx	r6
   11808:	69be      	ldr	r6, [r7, #24]
   1180a:	697b      	ldr	r3, [r7, #20]
   1180c:	3610      	adds	r6, #16
   1180e:	1836      	adds	r6, r6, r0
   11810:	2b00      	cmp	r3, #0
   11812:	d003      	beq.n	1181c <mqtt_connect_broker+0xa8>
   11814:	1c18      	adds	r0, r3, #0
   11816:	47a0      	blx	r4
   11818:	3602      	adds	r6, #2
   1181a:	1836      	adds	r6, r6, r0
   1181c:	6e78      	ldr	r0, [r7, #100]	; 0x64
   1181e:	2800      	cmp	r0, #0
   11820:	d007      	beq.n	11832 <mqtt_connect_broker+0xbe>
   11822:	47a0      	blx	r4
   11824:	3602      	adds	r6, #2
   11826:	6efc      	ldr	r4, [r7, #108]	; 0x6c
   11828:	1830      	adds	r0, r6, r0
   1182a:	1906      	adds	r6, r0, r4
   1182c:	2c00      	cmp	r4, #0
   1182e:	d100      	bne.n	11832 <mqtt_connect_broker+0xbe>
   11830:	1c06      	adds	r6, r0, #0
   11832:	69fc      	ldr	r4, [r7, #28]
   11834:	2c00      	cmp	r4, #0
   11836:	d006      	beq.n	11846 <mqtt_connect_broker+0xd2>
   11838:	24c0      	movs	r4, #192	; 0xc0
   1183a:	61bc      	str	r4, [r7, #24]
   1183c:	697c      	ldr	r4, [r7, #20]
   1183e:	2c00      	cmp	r4, #0
   11840:	d103      	bne.n	1184a <mqtt_connect_broker+0xd6>
   11842:	2480      	movs	r4, #128	; 0x80
   11844:	e000      	b.n	11848 <mqtt_connect_broker+0xd4>
   11846:	69fc      	ldr	r4, [r7, #28]
   11848:	61bc      	str	r4, [r7, #24]
   1184a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   1184c:	2c00      	cmp	r4, #0
   1184e:	d00f      	beq.n	11870 <mqtt_connect_broker+0xfc>
   11850:	68bc      	ldr	r4, [r7, #8]
   11852:	2c00      	cmp	r4, #0
   11854:	d003      	beq.n	1185e <mqtt_connect_broker+0xea>
   11856:	69bc      	ldr	r4, [r7, #24]
   11858:	2320      	movs	r3, #32
   1185a:	431c      	orrs	r4, r3
   1185c:	61bc      	str	r4, [r7, #24]
   1185e:	68fc      	ldr	r4, [r7, #12]
   11860:	2303      	movs	r3, #3
   11862:	4023      	ands	r3, r4
   11864:	00db      	lsls	r3, r3, #3
   11866:	69bc      	ldr	r4, [r7, #24]
   11868:	2204      	movs	r2, #4
   1186a:	4313      	orrs	r3, r2
   1186c:	431c      	orrs	r4, r3
   1186e:	61bc      	str	r4, [r7, #24]
   11870:	693c      	ldr	r4, [r7, #16]
   11872:	2c00      	cmp	r4, #0
   11874:	d003      	beq.n	1187e <mqtt_connect_broker+0x10a>
   11876:	69bc      	ldr	r4, [r7, #24]
   11878:	2302      	movs	r3, #2
   1187a:	431c      	orrs	r4, r3
   1187c:	61bc      	str	r4, [r7, #24]
   1187e:	1c2b      	adds	r3, r5, #0
   11880:	3343      	adds	r3, #67	; 0x43
   11882:	781a      	ldrb	r2, [r3, #0]
   11884:	2108      	movs	r1, #8
   11886:	430a      	orrs	r2, r1
   11888:	701a      	strb	r2, [r3, #0]
   1188a:	1c38      	adds	r0, r7, #0
   1188c:	9500      	str	r5, [sp, #0]
   1188e:	3020      	adds	r0, #32
   11890:	6879      	ldr	r1, [r7, #4]
   11892:	4b5c      	ldr	r3, [pc, #368]	; (11a04 <mqtt_connect_broker+0x290>)
   11894:	6eea      	ldr	r2, [r5, #108]	; 0x6c
   11896:	4c5c      	ldr	r4, [pc, #368]	; (11a08 <mqtt_connect_broker+0x294>)
   11898:	47a0      	blx	r4
   1189a:	1c38      	adds	r0, r7, #0
   1189c:	3020      	adds	r0, #32
   1189e:	2110      	movs	r1, #16
   118a0:	4b5a      	ldr	r3, [pc, #360]	; (11a0c <mqtt_connect_broker+0x298>)
   118a2:	4798      	blx	r3
   118a4:	2e80      	cmp	r6, #128	; 0x80
   118a6:	dd09      	ble.n	118bc <mqtt_connect_broker+0x148>
   118a8:	2180      	movs	r1, #128	; 0x80
   118aa:	4249      	negs	r1, r1
   118ac:	4331      	orrs	r1, r6
   118ae:	1c38      	adds	r0, r7, #0
   118b0:	b249      	sxtb	r1, r1
   118b2:	3020      	adds	r0, #32
   118b4:	4c55      	ldr	r4, [pc, #340]	; (11a0c <mqtt_connect_broker+0x298>)
   118b6:	47a0      	blx	r4
   118b8:	11f6      	asrs	r6, r6, #7
   118ba:	e7f3      	b.n	118a4 <mqtt_connect_broker+0x130>
   118bc:	4b54      	ldr	r3, [pc, #336]	; (11a10 <mqtt_connect_broker+0x29c>)
   118be:	401e      	ands	r6, r3
   118c0:	d504      	bpl.n	118cc <mqtt_connect_broker+0x158>
   118c2:	2380      	movs	r3, #128	; 0x80
   118c4:	3e01      	subs	r6, #1
   118c6:	425b      	negs	r3, r3
   118c8:	431e      	orrs	r6, r3
   118ca:	3601      	adds	r6, #1
   118cc:	1c38      	adds	r0, r7, #0
   118ce:	b271      	sxtb	r1, r6
   118d0:	3020      	adds	r0, #32
   118d2:	4c4e      	ldr	r4, [pc, #312]	; (11a0c <mqtt_connect_broker+0x298>)
   118d4:	47a0      	blx	r4
   118d6:	1c38      	adds	r0, r7, #0
   118d8:	4c4e      	ldr	r4, [pc, #312]	; (11a14 <mqtt_connect_broker+0x2a0>)
   118da:	3020      	adds	r0, #32
   118dc:	2106      	movs	r1, #6
   118de:	47a0      	blx	r4
   118e0:	1c38      	adds	r0, r7, #0
   118e2:	4b4d      	ldr	r3, [pc, #308]	; (11a18 <mqtt_connect_broker+0x2a4>)
   118e4:	3020      	adds	r0, #32
   118e6:	494d      	ldr	r1, [pc, #308]	; (11a1c <mqtt_connect_broker+0x2a8>)
   118e8:	2206      	movs	r2, #6
   118ea:	4798      	blx	r3
   118ec:	1c38      	adds	r0, r7, #0
   118ee:	3020      	adds	r0, #32
   118f0:	2103      	movs	r1, #3
   118f2:	4a46      	ldr	r2, [pc, #280]	; (11a0c <mqtt_connect_broker+0x298>)
   118f4:	4790      	blx	r2
   118f6:	69bb      	ldr	r3, [r7, #24]
   118f8:	1c38      	adds	r0, r7, #0
   118fa:	4a44      	ldr	r2, [pc, #272]	; (11a0c <mqtt_connect_broker+0x298>)
   118fc:	b259      	sxtb	r1, r3
   118fe:	3020      	adds	r0, #32
   11900:	4790      	blx	r2
   11902:	1c2b      	adds	r3, r5, #0
   11904:	3360      	adds	r3, #96	; 0x60
   11906:	2000      	movs	r0, #0
   11908:	5e19      	ldrsh	r1, [r3, r0]
   1190a:	1c38      	adds	r0, r7, #0
   1190c:	3020      	adds	r0, #32
   1190e:	47a0      	blx	r4
   11910:	4e39      	ldr	r6, [pc, #228]	; (119f8 <mqtt_connect_broker+0x284>)
   11912:	6e38      	ldr	r0, [r7, #96]	; 0x60
   11914:	47b0      	blx	r6
   11916:	b201      	sxth	r1, r0
   11918:	1c38      	adds	r0, r7, #0
   1191a:	3020      	adds	r0, #32
   1191c:	47a0      	blx	r4
   1191e:	6e38      	ldr	r0, [r7, #96]	; 0x60
   11920:	47b0      	blx	r6
   11922:	1c02      	adds	r2, r0, #0
   11924:	1c38      	adds	r0, r7, #0
   11926:	3020      	adds	r0, #32
   11928:	6e39      	ldr	r1, [r7, #96]	; 0x60
   1192a:	4b3b      	ldr	r3, [pc, #236]	; (11a18 <mqtt_connect_broker+0x2a4>)
   1192c:	4798      	blx	r3
   1192e:	6e78      	ldr	r0, [r7, #100]	; 0x64
   11930:	2800      	cmp	r0, #0
   11932:	d015      	beq.n	11960 <mqtt_connect_broker+0x1ec>
   11934:	47b0      	blx	r6
   11936:	b201      	sxth	r1, r0
   11938:	1c38      	adds	r0, r7, #0
   1193a:	3020      	adds	r0, #32
   1193c:	47a0      	blx	r4
   1193e:	6e78      	ldr	r0, [r7, #100]	; 0x64
   11940:	47b0      	blx	r6
   11942:	1c02      	adds	r2, r0, #0
   11944:	1c38      	adds	r0, r7, #0
   11946:	4c34      	ldr	r4, [pc, #208]	; (11a18 <mqtt_connect_broker+0x2a4>)
   11948:	3020      	adds	r0, #32
   1194a:	6e79      	ldr	r1, [r7, #100]	; 0x64
   1194c:	47a0      	blx	r4
   1194e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
   11950:	2c00      	cmp	r4, #0
   11952:	d005      	beq.n	11960 <mqtt_connect_broker+0x1ec>
   11954:	1c38      	adds	r0, r7, #0
   11956:	1c21      	adds	r1, r4, #0
   11958:	3020      	adds	r0, #32
   1195a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1195c:	4c2e      	ldr	r4, [pc, #184]	; (11a18 <mqtt_connect_broker+0x2a4>)
   1195e:	47a0      	blx	r4
   11960:	69fc      	ldr	r4, [r7, #28]
   11962:	2c00      	cmp	r4, #0
   11964:	d01f      	beq.n	119a6 <mqtt_connect_broker+0x232>
   11966:	4e24      	ldr	r6, [pc, #144]	; (119f8 <mqtt_connect_broker+0x284>)
   11968:	1c20      	adds	r0, r4, #0
   1196a:	47b0      	blx	r6
   1196c:	b201      	sxth	r1, r0
   1196e:	1c38      	adds	r0, r7, #0
   11970:	3020      	adds	r0, #32
   11972:	4c28      	ldr	r4, [pc, #160]	; (11a14 <mqtt_connect_broker+0x2a0>)
   11974:	47a0      	blx	r4
   11976:	69f8      	ldr	r0, [r7, #28]
   11978:	47b0      	blx	r6
   1197a:	1c02      	adds	r2, r0, #0
   1197c:	1c38      	adds	r0, r7, #0
   1197e:	3020      	adds	r0, #32
   11980:	69f9      	ldr	r1, [r7, #28]
   11982:	4c25      	ldr	r4, [pc, #148]	; (11a18 <mqtt_connect_broker+0x2a4>)
   11984:	47a0      	blx	r4
   11986:	6978      	ldr	r0, [r7, #20]
   11988:	2800      	cmp	r0, #0
   1198a:	d00c      	beq.n	119a6 <mqtt_connect_broker+0x232>
   1198c:	47b0      	blx	r6
   1198e:	b201      	sxth	r1, r0
   11990:	1c38      	adds	r0, r7, #0
   11992:	4a20      	ldr	r2, [pc, #128]	; (11a14 <mqtt_connect_broker+0x2a0>)
   11994:	3020      	adds	r0, #32
   11996:	4790      	blx	r2
   11998:	6978      	ldr	r0, [r7, #20]
   1199a:	47b0      	blx	r6
   1199c:	1c02      	adds	r2, r0, #0
   1199e:	1c38      	adds	r0, r7, #0
   119a0:	3020      	adds	r0, #32
   119a2:	6979      	ldr	r1, [r7, #20]
   119a4:	47a0      	blx	r4
   119a6:	1c38      	adds	r0, r7, #0
   119a8:	1c2c      	adds	r4, r5, #0
   119aa:	3020      	adds	r0, #32
   119ac:	4b1c      	ldr	r3, [pc, #112]	; (11a20 <mqtt_connect_broker+0x2ac>)
   119ae:	3443      	adds	r4, #67	; 0x43
   119b0:	4798      	blx	r3
   119b2:	7821      	ldrb	r1, [r4, #0]
   119b4:	0789      	lsls	r1, r1, #30
   119b6:	0fc9      	lsrs	r1, r1, #31
   119b8:	2901      	cmp	r1, #1
   119ba:	d10b      	bne.n	119d4 <mqtt_connect_broker+0x260>
   119bc:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   119be:	2a00      	cmp	r2, #0
   119c0:	d108      	bne.n	119d4 <mqtt_connect_broker+0x260>
   119c2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   119c4:	2b00      	cmp	r3, #0
   119c6:	d005      	beq.n	119d4 <mqtt_connect_broker+0x260>
   119c8:	2034      	movs	r0, #52	; 0x34
   119ca:	55c2      	strb	r2, [r0, r7]
   119cc:	1c3a      	adds	r2, r7, #0
   119ce:	1c28      	adds	r0, r5, #0
   119d0:	3234      	adds	r2, #52	; 0x34
   119d2:	4798      	blx	r3
   119d4:	7823      	ldrb	r3, [r4, #0]
   119d6:	2202      	movs	r2, #2
   119d8:	4313      	orrs	r3, r2
   119da:	2208      	movs	r2, #8
   119dc:	4393      	bics	r3, r2
   119de:	7023      	strb	r3, [r4, #0]
   119e0:	2000      	movs	r0, #0
   119e2:	e005      	b.n	119f0 <mqtt_connect_broker+0x27c>
   119e4:	2080      	movs	r0, #128	; 0x80
   119e6:	e002      	b.n	119ee <mqtt_connect_broker+0x27a>
   119e8:	2078      	movs	r0, #120	; 0x78
   119ea:	e000      	b.n	119ee <mqtt_connect_broker+0x27a>
   119ec:	200b      	movs	r0, #11
   119ee:	4240      	negs	r0, r0
   119f0:	46bd      	mov	sp, r7
   119f2:	b013      	add	sp, #76	; 0x4c
   119f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119f6:	46c0      	nop			; (mov r8, r8)
   119f8:	0001443f 	.word	0x0001443f
   119fc:	0000921d 	.word	0x0000921d
   11a00:	0000d9fd 	.word	0x0000d9fd
   11a04:	000114a9 	.word	0x000114a9
   11a08:	0000d80d 	.word	0x0000d80d
   11a0c:	0000d839 	.word	0x0000d839
   11a10:	8000007f 	.word	0x8000007f
   11a14:	0000d861 	.word	0x0000d861
   11a18:	0000d879 	.word	0x0000d879
   11a1c:	0001715c 	.word	0x0001715c
   11a20:	0000d81d 	.word	0x0000d81d

00011a24 <mqtt_publish>:
   11a24:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a26:	b093      	sub	sp, #76	; 0x4c
   11a28:	af02      	add	r7, sp, #8
   11a2a:	60fb      	str	r3, [r7, #12]
   11a2c:	1c3b      	adds	r3, r7, #0
   11a2e:	3358      	adds	r3, #88	; 0x58
   11a30:	781b      	ldrb	r3, [r3, #0]
   11a32:	1c04      	adds	r4, r0, #0
   11a34:	613b      	str	r3, [r7, #16]
   11a36:	1c3b      	adds	r3, r7, #0
   11a38:	335c      	adds	r3, #92	; 0x5c
   11a3a:	781b      	ldrb	r3, [r3, #0]
   11a3c:	6179      	str	r1, [r7, #20]
   11a3e:	60ba      	str	r2, [r7, #8]
   11a40:	607b      	str	r3, [r7, #4]
   11a42:	2800      	cmp	r0, #0
   11a44:	d101      	bne.n	11a4a <mqtt_publish+0x26>
   11a46:	2516      	movs	r5, #22
   11a48:	e0a7      	b.n	11b9a <mqtt_publish+0x176>
   11a4a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   11a4c:	466a      	mov	r2, sp
   11a4e:	3307      	adds	r3, #7
   11a50:	08db      	lsrs	r3, r3, #3
   11a52:	00db      	lsls	r3, r3, #3
   11a54:	1ad2      	subs	r2, r2, r3
   11a56:	697b      	ldr	r3, [r7, #20]
   11a58:	4695      	mov	sp, r2
   11a5a:	ae02      	add	r6, sp, #8
   11a5c:	2b00      	cmp	r3, #0
   11a5e:	d0f2      	beq.n	11a46 <mqtt_publish+0x22>
   11a60:	693a      	ldr	r2, [r7, #16]
   11a62:	2a02      	cmp	r2, #2
   11a64:	d8ef      	bhi.n	11a46 <mqtt_publish+0x22>
   11a66:	1c05      	adds	r5, r0, #0
   11a68:	3543      	adds	r5, #67	; 0x43
   11a6a:	782b      	ldrb	r3, [r5, #0]
   11a6c:	079a      	lsls	r2, r3, #30
   11a6e:	d400      	bmi.n	11a72 <mqtt_publish+0x4e>
   11a70:	e090      	b.n	11b94 <mqtt_publish+0x170>
   11a72:	071a      	lsls	r2, r3, #28
   11a74:	d40a      	bmi.n	11a8c <mqtt_publish+0x68>
   11a76:	4b4b      	ldr	r3, [pc, #300]	; (11ba4 <mqtt_publish+0x180>)
   11a78:	6978      	ldr	r0, [r7, #20]
   11a7a:	4798      	blx	r3
   11a7c:	68fd      	ldr	r5, [r7, #12]
   11a7e:	693b      	ldr	r3, [r7, #16]
   11a80:	3502      	adds	r5, #2
   11a82:	182d      	adds	r5, r5, r0
   11a84:	2b00      	cmp	r3, #0
   11a86:	d011      	beq.n	11aac <mqtt_publish+0x88>
   11a88:	3502      	adds	r5, #2
   11a8a:	e00f      	b.n	11aac <mqtt_publish+0x88>
   11a8c:	1c03      	adds	r3, r0, #0
   11a8e:	3370      	adds	r3, #112	; 0x70
   11a90:	781b      	ldrb	r3, [r3, #0]
   11a92:	2b00      	cmp	r3, #0
   11a94:	d000      	beq.n	11a98 <mqtt_publish+0x74>
   11a96:	e07f      	b.n	11b98 <mqtt_publish+0x174>
   11a98:	782b      	ldrb	r3, [r5, #0]
   11a9a:	071a      	lsls	r2, r3, #28
   11a9c:	d5eb      	bpl.n	11a76 <mqtt_publish+0x52>
   11a9e:	4b42      	ldr	r3, [pc, #264]	; (11ba8 <mqtt_publish+0x184>)
   11aa0:	2000      	movs	r0, #0
   11aa2:	4798      	blx	r3
   11aa4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   11aa6:	4b41      	ldr	r3, [pc, #260]	; (11bac <mqtt_publish+0x188>)
   11aa8:	4798      	blx	r3
   11aaa:	e7f5      	b.n	11a98 <mqtt_publish+0x74>
   11aac:	1c23      	adds	r3, r4, #0
   11aae:	3343      	adds	r3, #67	; 0x43
   11ab0:	781a      	ldrb	r2, [r3, #0]
   11ab2:	2108      	movs	r1, #8
   11ab4:	430a      	orrs	r2, r1
   11ab6:	701a      	strb	r2, [r3, #0]
   11ab8:	1c38      	adds	r0, r7, #0
   11aba:	9400      	str	r4, [sp, #0]
   11abc:	1c31      	adds	r1, r6, #0
   11abe:	302c      	adds	r0, #44	; 0x2c
   11ac0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   11ac2:	4b3b      	ldr	r3, [pc, #236]	; (11bb0 <mqtt_publish+0x18c>)
   11ac4:	4e3b      	ldr	r6, [pc, #236]	; (11bb4 <mqtt_publish+0x190>)
   11ac6:	47b0      	blx	r6
   11ac8:	687b      	ldr	r3, [r7, #4]
   11aca:	2101      	movs	r1, #1
   11acc:	4019      	ands	r1, r3
   11ace:	2330      	movs	r3, #48	; 0x30
   11ad0:	4319      	orrs	r1, r3
   11ad2:	693b      	ldr	r3, [r7, #16]
   11ad4:	1c38      	adds	r0, r7, #0
   11ad6:	005a      	lsls	r2, r3, #1
   11ad8:	2306      	movs	r3, #6
   11ada:	4013      	ands	r3, r2
   11adc:	4319      	orrs	r1, r3
   11ade:	302c      	adds	r0, #44	; 0x2c
   11ae0:	4b35      	ldr	r3, [pc, #212]	; (11bb8 <mqtt_publish+0x194>)
   11ae2:	4798      	blx	r3
   11ae4:	4b34      	ldr	r3, [pc, #208]	; (11bb8 <mqtt_publish+0x194>)
   11ae6:	2d80      	cmp	r5, #128	; 0x80
   11ae8:	dd08      	ble.n	11afc <mqtt_publish+0xd8>
   11aea:	2180      	movs	r1, #128	; 0x80
   11aec:	4249      	negs	r1, r1
   11aee:	4329      	orrs	r1, r5
   11af0:	1c38      	adds	r0, r7, #0
   11af2:	b249      	sxtb	r1, r1
   11af4:	302c      	adds	r0, #44	; 0x2c
   11af6:	4798      	blx	r3
   11af8:	11ed      	asrs	r5, r5, #7
   11afa:	e7f3      	b.n	11ae4 <mqtt_publish+0xc0>
   11afc:	4a2f      	ldr	r2, [pc, #188]	; (11bbc <mqtt_publish+0x198>)
   11afe:	4015      	ands	r5, r2
   11b00:	d504      	bpl.n	11b0c <mqtt_publish+0xe8>
   11b02:	2280      	movs	r2, #128	; 0x80
   11b04:	3d01      	subs	r5, #1
   11b06:	4252      	negs	r2, r2
   11b08:	4315      	orrs	r5, r2
   11b0a:	3501      	adds	r5, #1
   11b0c:	1c38      	adds	r0, r7, #0
   11b0e:	b269      	sxtb	r1, r5
   11b10:	302c      	adds	r0, #44	; 0x2c
   11b12:	4798      	blx	r3
   11b14:	4e23      	ldr	r6, [pc, #140]	; (11ba4 <mqtt_publish+0x180>)
   11b16:	6978      	ldr	r0, [r7, #20]
   11b18:	47b0      	blx	r6
   11b1a:	b201      	sxth	r1, r0
   11b1c:	1c38      	adds	r0, r7, #0
   11b1e:	302c      	adds	r0, #44	; 0x2c
   11b20:	4d27      	ldr	r5, [pc, #156]	; (11bc0 <mqtt_publish+0x19c>)
   11b22:	47a8      	blx	r5
   11b24:	6978      	ldr	r0, [r7, #20]
   11b26:	47b0      	blx	r6
   11b28:	1c02      	adds	r2, r0, #0
   11b2a:	1c38      	adds	r0, r7, #0
   11b2c:	302c      	adds	r0, #44	; 0x2c
   11b2e:	6979      	ldr	r1, [r7, #20]
   11b30:	4e24      	ldr	r6, [pc, #144]	; (11bc4 <mqtt_publish+0x1a0>)
   11b32:	47b0      	blx	r6
   11b34:	693a      	ldr	r2, [r7, #16]
   11b36:	2a00      	cmp	r2, #0
   11b38:	d006      	beq.n	11b48 <mqtt_publish+0x124>
   11b3a:	8821      	ldrh	r1, [r4, #0]
   11b3c:	1c38      	adds	r0, r7, #0
   11b3e:	1c4b      	adds	r3, r1, #1
   11b40:	8023      	strh	r3, [r4, #0]
   11b42:	b209      	sxth	r1, r1
   11b44:	302c      	adds	r0, #44	; 0x2c
   11b46:	47a8      	blx	r5
   11b48:	8823      	ldrh	r3, [r4, #0]
   11b4a:	2b00      	cmp	r3, #0
   11b4c:	d101      	bne.n	11b52 <mqtt_publish+0x12e>
   11b4e:	2301      	movs	r3, #1
   11b50:	8023      	strh	r3, [r4, #0]
   11b52:	68bb      	ldr	r3, [r7, #8]
   11b54:	2b00      	cmp	r3, #0
   11b56:	d006      	beq.n	11b66 <mqtt_publish+0x142>
   11b58:	68fa      	ldr	r2, [r7, #12]
   11b5a:	2a00      	cmp	r2, #0
   11b5c:	d003      	beq.n	11b66 <mqtt_publish+0x142>
   11b5e:	1c38      	adds	r0, r7, #0
   11b60:	302c      	adds	r0, #44	; 0x2c
   11b62:	1c19      	adds	r1, r3, #0
   11b64:	47b0      	blx	r6
   11b66:	1c38      	adds	r0, r7, #0
   11b68:	4b17      	ldr	r3, [pc, #92]	; (11bc8 <mqtt_publish+0x1a4>)
   11b6a:	302c      	adds	r0, #44	; 0x2c
   11b6c:	4798      	blx	r3
   11b6e:	1c23      	adds	r3, r4, #0
   11b70:	3343      	adds	r3, #67	; 0x43
   11b72:	781a      	ldrb	r2, [r3, #0]
   11b74:	2108      	movs	r1, #8
   11b76:	438a      	bics	r2, r1
   11b78:	701a      	strb	r2, [r3, #0]
   11b7a:	693b      	ldr	r3, [r7, #16]
   11b7c:	2500      	movs	r5, #0
   11b7e:	42ab      	cmp	r3, r5
   11b80:	d10c      	bne.n	11b9c <mqtt_publish+0x178>
   11b82:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11b84:	42ab      	cmp	r3, r5
   11b86:	d009      	beq.n	11b9c <mqtt_publish+0x178>
   11b88:	1c3a      	adds	r2, r7, #0
   11b8a:	1c20      	adds	r0, r4, #0
   11b8c:	2102      	movs	r1, #2
   11b8e:	3218      	adds	r2, #24
   11b90:	4798      	blx	r3
   11b92:	e003      	b.n	11b9c <mqtt_publish+0x178>
   11b94:	2580      	movs	r5, #128	; 0x80
   11b96:	e000      	b.n	11b9a <mqtt_publish+0x176>
   11b98:	250b      	movs	r5, #11
   11b9a:	426d      	negs	r5, r5
   11b9c:	1c28      	adds	r0, r5, #0
   11b9e:	46bd      	mov	sp, r7
   11ba0:	b011      	add	sp, #68	; 0x44
   11ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11ba4:	0001443f 	.word	0x0001443f
   11ba8:	0000921d 	.word	0x0000921d
   11bac:	0000d9fd 	.word	0x0000d9fd
   11bb0:	000114a9 	.word	0x000114a9
   11bb4:	0000d80d 	.word	0x0000d80d
   11bb8:	0000d839 	.word	0x0000d839
   11bbc:	8000007f 	.word	0x8000007f
   11bc0:	0000d861 	.word	0x0000d861
   11bc4:	0000d879 	.word	0x0000d879
   11bc8:	0000d81d 	.word	0x0000d81d

00011bcc <mqtt_subscribe>:
   11bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bce:	b08d      	sub	sp, #52	; 0x34
   11bd0:	af02      	add	r7, sp, #8
   11bd2:	1c04      	adds	r4, r0, #0
   11bd4:	60b9      	str	r1, [r7, #8]
   11bd6:	607a      	str	r2, [r7, #4]
   11bd8:	d101      	bne.n	11bde <mqtt_subscribe+0x12>
   11bda:	2016      	movs	r0, #22
   11bdc:	e086      	b.n	11cec <mqtt_subscribe+0x120>
   11bde:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   11be0:	466a      	mov	r2, sp
   11be2:	3307      	adds	r3, #7
   11be4:	08db      	lsrs	r3, r3, #3
   11be6:	00db      	lsls	r3, r3, #3
   11be8:	1ad2      	subs	r2, r2, r3
   11bea:	4695      	mov	sp, r2
   11bec:	ad02      	add	r5, sp, #8
   11bee:	603d      	str	r5, [r7, #0]
   11bf0:	68bd      	ldr	r5, [r7, #8]
   11bf2:	2d00      	cmp	r5, #0
   11bf4:	d0f1      	beq.n	11bda <mqtt_subscribe+0xe>
   11bf6:	687d      	ldr	r5, [r7, #4]
   11bf8:	2d02      	cmp	r5, #2
   11bfa:	d8ee      	bhi.n	11bda <mqtt_subscribe+0xe>
   11bfc:	1c05      	adds	r5, r0, #0
   11bfe:	3543      	adds	r5, #67	; 0x43
   11c00:	782b      	ldrb	r3, [r5, #0]
   11c02:	079a      	lsls	r2, r3, #30
   11c04:	d56f      	bpl.n	11ce6 <mqtt_subscribe+0x11a>
   11c06:	071a      	lsls	r2, r3, #28
   11c08:	d41a      	bmi.n	11c40 <mqtt_subscribe+0x74>
   11c0a:	68b8      	ldr	r0, [r7, #8]
   11c0c:	4d39      	ldr	r5, [pc, #228]	; (11cf4 <mqtt_subscribe+0x128>)
   11c0e:	47a8      	blx	r5
   11c10:	1c25      	adds	r5, r4, #0
   11c12:	3543      	adds	r5, #67	; 0x43
   11c14:	782b      	ldrb	r3, [r5, #0]
   11c16:	2208      	movs	r2, #8
   11c18:	4313      	orrs	r3, r2
   11c1a:	702b      	strb	r3, [r5, #0]
   11c1c:	60fd      	str	r5, [r7, #12]
   11c1e:	1d46      	adds	r6, r0, #5
   11c20:	9400      	str	r4, [sp, #0]
   11c22:	1c38      	adds	r0, r7, #0
   11c24:	3014      	adds	r0, #20
   11c26:	6839      	ldr	r1, [r7, #0]
   11c28:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   11c2a:	4b33      	ldr	r3, [pc, #204]	; (11cf8 <mqtt_subscribe+0x12c>)
   11c2c:	4d33      	ldr	r5, [pc, #204]	; (11cfc <mqtt_subscribe+0x130>)
   11c2e:	47a8      	blx	r5
   11c30:	1c38      	adds	r0, r7, #0
   11c32:	217e      	movs	r1, #126	; 0x7e
   11c34:	3014      	adds	r0, #20
   11c36:	4249      	negs	r1, r1
   11c38:	4b31      	ldr	r3, [pc, #196]	; (11d00 <mqtt_subscribe+0x134>)
   11c3a:	4798      	blx	r3
   11c3c:	4d2d      	ldr	r5, [pc, #180]	; (11cf4 <mqtt_subscribe+0x128>)
   11c3e:	e00e      	b.n	11c5e <mqtt_subscribe+0x92>
   11c40:	1c03      	adds	r3, r0, #0
   11c42:	3370      	adds	r3, #112	; 0x70
   11c44:	781b      	ldrb	r3, [r3, #0]
   11c46:	2b00      	cmp	r3, #0
   11c48:	d14f      	bne.n	11cea <mqtt_subscribe+0x11e>
   11c4a:	782b      	ldrb	r3, [r5, #0]
   11c4c:	071a      	lsls	r2, r3, #28
   11c4e:	d5dc      	bpl.n	11c0a <mqtt_subscribe+0x3e>
   11c50:	4b2c      	ldr	r3, [pc, #176]	; (11d04 <mqtt_subscribe+0x138>)
   11c52:	2000      	movs	r0, #0
   11c54:	4798      	blx	r3
   11c56:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   11c58:	4b2b      	ldr	r3, [pc, #172]	; (11d08 <mqtt_subscribe+0x13c>)
   11c5a:	4798      	blx	r3
   11c5c:	e7f5      	b.n	11c4a <mqtt_subscribe+0x7e>
   11c5e:	4b28      	ldr	r3, [pc, #160]	; (11d00 <mqtt_subscribe+0x134>)
   11c60:	2e80      	cmp	r6, #128	; 0x80
   11c62:	dd08      	ble.n	11c76 <mqtt_subscribe+0xaa>
   11c64:	2180      	movs	r1, #128	; 0x80
   11c66:	4249      	negs	r1, r1
   11c68:	4331      	orrs	r1, r6
   11c6a:	1c38      	adds	r0, r7, #0
   11c6c:	b249      	sxtb	r1, r1
   11c6e:	3014      	adds	r0, #20
   11c70:	4798      	blx	r3
   11c72:	11f6      	asrs	r6, r6, #7
   11c74:	e7f3      	b.n	11c5e <mqtt_subscribe+0x92>
   11c76:	4925      	ldr	r1, [pc, #148]	; (11d0c <mqtt_subscribe+0x140>)
   11c78:	4031      	ands	r1, r6
   11c7a:	d504      	bpl.n	11c86 <mqtt_subscribe+0xba>
   11c7c:	2280      	movs	r2, #128	; 0x80
   11c7e:	3901      	subs	r1, #1
   11c80:	4252      	negs	r2, r2
   11c82:	4311      	orrs	r1, r2
   11c84:	3101      	adds	r1, #1
   11c86:	1c38      	adds	r0, r7, #0
   11c88:	b249      	sxtb	r1, r1
   11c8a:	3014      	adds	r0, #20
   11c8c:	4798      	blx	r3
   11c8e:	8821      	ldrh	r1, [r4, #0]
   11c90:	1c38      	adds	r0, r7, #0
   11c92:	1c4b      	adds	r3, r1, #1
   11c94:	8023      	strh	r3, [r4, #0]
   11c96:	b209      	sxth	r1, r1
   11c98:	3014      	adds	r0, #20
   11c9a:	4e1d      	ldr	r6, [pc, #116]	; (11d10 <mqtt_subscribe+0x144>)
   11c9c:	47b0      	blx	r6
   11c9e:	8823      	ldrh	r3, [r4, #0]
   11ca0:	2b00      	cmp	r3, #0
   11ca2:	d101      	bne.n	11ca8 <mqtt_subscribe+0xdc>
   11ca4:	2301      	movs	r3, #1
   11ca6:	8023      	strh	r3, [r4, #0]
   11ca8:	68b8      	ldr	r0, [r7, #8]
   11caa:	47a8      	blx	r5
   11cac:	b201      	sxth	r1, r0
   11cae:	1c38      	adds	r0, r7, #0
   11cb0:	3014      	adds	r0, #20
   11cb2:	47b0      	blx	r6
   11cb4:	68b8      	ldr	r0, [r7, #8]
   11cb6:	47a8      	blx	r5
   11cb8:	1c02      	adds	r2, r0, #0
   11cba:	1c38      	adds	r0, r7, #0
   11cbc:	3014      	adds	r0, #20
   11cbe:	68b9      	ldr	r1, [r7, #8]
   11cc0:	4b14      	ldr	r3, [pc, #80]	; (11d14 <mqtt_subscribe+0x148>)
   11cc2:	4798      	blx	r3
   11cc4:	687d      	ldr	r5, [r7, #4]
   11cc6:	1c38      	adds	r0, r7, #0
   11cc8:	b269      	sxtb	r1, r5
   11cca:	3014      	adds	r0, #20
   11ccc:	4b0c      	ldr	r3, [pc, #48]	; (11d00 <mqtt_subscribe+0x134>)
   11cce:	4798      	blx	r3
   11cd0:	1c38      	adds	r0, r7, #0
   11cd2:	3014      	adds	r0, #20
   11cd4:	4b10      	ldr	r3, [pc, #64]	; (11d18 <mqtt_subscribe+0x14c>)
   11cd6:	4798      	blx	r3
   11cd8:	68fd      	ldr	r5, [r7, #12]
   11cda:	2208      	movs	r2, #8
   11cdc:	782b      	ldrb	r3, [r5, #0]
   11cde:	2000      	movs	r0, #0
   11ce0:	4393      	bics	r3, r2
   11ce2:	702b      	strb	r3, [r5, #0]
   11ce4:	e003      	b.n	11cee <mqtt_subscribe+0x122>
   11ce6:	2080      	movs	r0, #128	; 0x80
   11ce8:	e000      	b.n	11cec <mqtt_subscribe+0x120>
   11cea:	200b      	movs	r0, #11
   11cec:	4240      	negs	r0, r0
   11cee:	46bd      	mov	sp, r7
   11cf0:	b00b      	add	sp, #44	; 0x2c
   11cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11cf4:	0001443f 	.word	0x0001443f
   11cf8:	000114a9 	.word	0x000114a9
   11cfc:	0000d80d 	.word	0x0000d80d
   11d00:	0000d839 	.word	0x0000d839
   11d04:	0000921d 	.word	0x0000921d
   11d08:	0000d9fd 	.word	0x0000d9fd
   11d0c:	8000007f 	.word	0x8000007f
   11d10:	0000d861 	.word	0x0000d861
   11d14:	0000d879 	.word	0x0000d879
   11d18:	0000d81d 	.word	0x0000d81d

00011d1c <_mqtt_ping>:
   11d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11d1e:	23c0      	movs	r3, #192	; 0xc0
   11d20:	a901      	add	r1, sp, #4
   11d22:	2500      	movs	r5, #0
   11d24:	700b      	strb	r3, [r1, #0]
   11d26:	704d      	strb	r5, [r1, #1]
   11d28:	42a8      	cmp	r0, r5
   11d2a:	d019      	beq.n	11d60 <_mqtt_ping+0x44>
   11d2c:	1c04      	adds	r4, r0, #0
   11d2e:	3443      	adds	r4, #67	; 0x43
   11d30:	7823      	ldrb	r3, [r4, #0]
   11d32:	079a      	lsls	r2, r3, #30
   11d34:	d516      	bpl.n	11d64 <_mqtt_ping+0x48>
   11d36:	071a      	lsls	r2, r3, #28
   11d38:	d416      	bmi.n	11d68 <_mqtt_ping+0x4c>
   11d3a:	2608      	movs	r6, #8
   11d3c:	4333      	orrs	r3, r6
   11d3e:	7023      	strb	r3, [r4, #0]
   11d40:	7880      	ldrb	r0, [r0, #2]
   11d42:	1c2b      	adds	r3, r5, #0
   11d44:	b240      	sxtb	r0, r0
   11d46:	2202      	movs	r2, #2
   11d48:	4f09      	ldr	r7, [pc, #36]	; (11d70 <_mqtt_ping+0x54>)
   11d4a:	47b8      	blx	r7
   11d4c:	1c2b      	adds	r3, r5, #0
   11d4e:	42a8      	cmp	r0, r5
   11d50:	da0c      	bge.n	11d6c <_mqtt_ping+0x50>
   11d52:	7823      	ldrb	r3, [r4, #0]
   11d54:	43b3      	bics	r3, r6
   11d56:	7023      	strb	r3, [r4, #0]
   11d58:	4b06      	ldr	r3, [pc, #24]	; (11d74 <_mqtt_ping+0x58>)
   11d5a:	4798      	blx	r3
   11d5c:	1c03      	adds	r3, r0, #0
   11d5e:	e005      	b.n	11d6c <_mqtt_ping+0x50>
   11d60:	2316      	movs	r3, #22
   11d62:	e002      	b.n	11d6a <_mqtt_ping+0x4e>
   11d64:	2380      	movs	r3, #128	; 0x80
   11d66:	e000      	b.n	11d6a <_mqtt_ping+0x4e>
   11d68:	230b      	movs	r3, #11
   11d6a:	425b      	negs	r3, r3
   11d6c:	1c18      	adds	r0, r3, #0
   11d6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11d70:	0000afbd 	.word	0x0000afbd
   11d74:	00011459 	.word	0x00011459

00011d78 <mqtt_timer_callback>:
   11d78:	b570      	push	{r4, r5, r6, lr}
   11d7a:	1c05      	adds	r5, r0, #0
   11d7c:	b086      	sub	sp, #24
   11d7e:	1c0e      	adds	r6, r1, #0
   11d80:	1c14      	adds	r4, r2, #0
   11d82:	2800      	cmp	r0, #0
   11d84:	d012      	beq.n	11dac <mqtt_timer_callback+0x34>
   11d86:	2a00      	cmp	r2, #0
   11d88:	d010      	beq.n	11dac <mqtt_timer_callback+0x34>
   11d8a:	1c10      	adds	r0, r2, #0
   11d8c:	4b08      	ldr	r3, [pc, #32]	; (11db0 <mqtt_timer_callback+0x38>)
   11d8e:	4798      	blx	r3
   11d90:	2800      	cmp	r0, #0
   11d92:	da04      	bge.n	11d9e <mqtt_timer_callback+0x26>
   11d94:	1c28      	adds	r0, r5, #0
   11d96:	1c31      	adds	r1, r6, #0
   11d98:	2200      	movs	r2, #0
   11d9a:	4b06      	ldr	r3, [pc, #24]	; (11db4 <mqtt_timer_callback+0x3c>)
   11d9c:	e005      	b.n	11daa <mqtt_timer_callback+0x32>
   11d9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11da0:	2b00      	cmp	r3, #0
   11da2:	d003      	beq.n	11dac <mqtt_timer_callback+0x34>
   11da4:	1c20      	adds	r0, r4, #0
   11da6:	2107      	movs	r1, #7
   11da8:	aa01      	add	r2, sp, #4
   11daa:	4798      	blx	r3
   11dac:	b006      	add	sp, #24
   11dae:	bd70      	pop	{r4, r5, r6, pc}
   11db0:	00011d1d 	.word	0x00011d1d
   11db4:	0000d9c1 	.word	0x0000d9c1

00011db8 <_mqtt_puback>:
   11db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11dba:	2302      	movs	r3, #2
   11dbc:	ac01      	add	r4, sp, #4
   11dbe:	2700      	movs	r7, #0
   11dc0:	7063      	strb	r3, [r4, #1]
   11dc2:	42b8      	cmp	r0, r7
   11dc4:	d01e      	beq.n	11e04 <_mqtt_puback+0x4c>
   11dc6:	1c05      	adds	r5, r0, #0
   11dc8:	3543      	adds	r5, #67	; 0x43
   11dca:	782b      	ldrb	r3, [r5, #0]
   11dcc:	079e      	lsls	r6, r3, #30
   11dce:	d51b      	bpl.n	11e08 <_mqtt_puback+0x50>
   11dd0:	071e      	lsls	r6, r3, #28
   11dd2:	d41b      	bmi.n	11e0c <_mqtt_puback+0x54>
   11dd4:	2608      	movs	r6, #8
   11dd6:	4333      	orrs	r3, r6
   11dd8:	702b      	strb	r3, [r5, #0]
   11dda:	7880      	ldrb	r0, [r0, #2]
   11ddc:	7021      	strb	r1, [r4, #0]
   11dde:	0a11      	lsrs	r1, r2, #8
   11de0:	70a1      	strb	r1, [r4, #2]
   11de2:	70e2      	strb	r2, [r4, #3]
   11de4:	1c21      	adds	r1, r4, #0
   11de6:	1c3b      	adds	r3, r7, #0
   11de8:	b240      	sxtb	r0, r0
   11dea:	2204      	movs	r2, #4
   11dec:	4c09      	ldr	r4, [pc, #36]	; (11e14 <_mqtt_puback+0x5c>)
   11dee:	47a0      	blx	r4
   11df0:	1c3b      	adds	r3, r7, #0
   11df2:	42b8      	cmp	r0, r7
   11df4:	da0c      	bge.n	11e10 <_mqtt_puback+0x58>
   11df6:	782b      	ldrb	r3, [r5, #0]
   11df8:	43b3      	bics	r3, r6
   11dfa:	702b      	strb	r3, [r5, #0]
   11dfc:	4b06      	ldr	r3, [pc, #24]	; (11e18 <_mqtt_puback+0x60>)
   11dfe:	4798      	blx	r3
   11e00:	1c03      	adds	r3, r0, #0
   11e02:	e005      	b.n	11e10 <_mqtt_puback+0x58>
   11e04:	2316      	movs	r3, #22
   11e06:	e002      	b.n	11e0e <_mqtt_puback+0x56>
   11e08:	2380      	movs	r3, #128	; 0x80
   11e0a:	e000      	b.n	11e0e <_mqtt_puback+0x56>
   11e0c:	230b      	movs	r3, #11
   11e0e:	425b      	negs	r3, r3
   11e10:	1c18      	adds	r0, r3, #0
   11e12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11e14:	0000afbd 	.word	0x0000afbd
   11e18:	00011459 	.word	0x00011459

00011e1c <mqtt_clear_conn>:
   11e1c:	b530      	push	{r4, r5, lr}
   11e1e:	1c04      	adds	r4, r0, #0
   11e20:	b087      	sub	sp, #28
   11e22:	2800      	cmp	r0, #0
   11e24:	d01c      	beq.n	11e60 <mqtt_clear_conn+0x44>
   11e26:	2002      	movs	r0, #2
   11e28:	4b0e      	ldr	r3, [pc, #56]	; (11e64 <mqtt_clear_conn+0x48>)
   11e2a:	5620      	ldrsb	r0, [r4, r0]
   11e2c:	4798      	blx	r3
   11e2e:	1c23      	adds	r3, r4, #0
   11e30:	3343      	adds	r3, #67	; 0x43
   11e32:	781a      	ldrb	r2, [r3, #0]
   11e34:	21fc      	movs	r1, #252	; 0xfc
   11e36:	0795      	lsls	r5, r2, #30
   11e38:	400a      	ands	r2, r1
   11e3a:	701a      	strb	r2, [r3, #0]
   11e3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   11e3e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   11e40:	9301      	str	r3, [sp, #4]
   11e42:	2300      	movs	r3, #0
   11e44:	64e3      	str	r3, [r4, #76]	; 0x4c
   11e46:	6d21      	ldr	r1, [r4, #80]	; 0x50
   11e48:	4b07      	ldr	r3, [pc, #28]	; (11e68 <mqtt_clear_conn+0x4c>)
   11e4a:	4798      	blx	r3
   11e4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11e4e:	0fed      	lsrs	r5, r5, #31
   11e50:	2b00      	cmp	r3, #0
   11e52:	d005      	beq.n	11e60 <mqtt_clear_conn+0x44>
   11e54:	2d00      	cmp	r5, #0
   11e56:	d003      	beq.n	11e60 <mqtt_clear_conn+0x44>
   11e58:	1c20      	adds	r0, r4, #0
   11e5a:	2105      	movs	r1, #5
   11e5c:	aa01      	add	r2, sp, #4
   11e5e:	4798      	blx	r3
   11e60:	b007      	add	sp, #28
   11e62:	bd30      	pop	{r4, r5, pc}
   11e64:	0000b0e9 	.word	0x0000b0e9
   11e68:	0000d9ed 	.word	0x0000d9ed

00011e6c <mqtt_disconnect>:
   11e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11e6e:	23e0      	movs	r3, #224	; 0xe0
   11e70:	ae01      	add	r6, sp, #4
   11e72:	2700      	movs	r7, #0
   11e74:	1c05      	adds	r5, r0, #0
   11e76:	7033      	strb	r3, [r6, #0]
   11e78:	7077      	strb	r7, [r6, #1]
   11e7a:	42b8      	cmp	r0, r7
   11e7c:	d036      	beq.n	11eec <mqtt_disconnect+0x80>
   11e7e:	1c04      	adds	r4, r0, #0
   11e80:	3443      	adds	r4, #67	; 0x43
   11e82:	7823      	ldrb	r3, [r4, #0]
   11e84:	079a      	lsls	r2, r3, #30
   11e86:	d533      	bpl.n	11ef0 <mqtt_disconnect+0x84>
   11e88:	42b9      	cmp	r1, r7
   11e8a:	d12b      	bne.n	11ee4 <mqtt_disconnect+0x78>
   11e8c:	071a      	lsls	r2, r3, #28
   11e8e:	d414      	bmi.n	11eba <mqtt_disconnect+0x4e>
   11e90:	7823      	ldrb	r3, [r4, #0]
   11e92:	2210      	movs	r2, #16
   11e94:	4313      	orrs	r3, r2
   11e96:	2708      	movs	r7, #8
   11e98:	433b      	orrs	r3, r7
   11e9a:	7023      	strb	r3, [r4, #0]
   11e9c:	2002      	movs	r0, #2
   11e9e:	5628      	ldrsb	r0, [r5, r0]
   11ea0:	1c31      	adds	r1, r6, #0
   11ea2:	2202      	movs	r2, #2
   11ea4:	2300      	movs	r3, #0
   11ea6:	4d15      	ldr	r5, [pc, #84]	; (11efc <mqtt_disconnect+0x90>)
   11ea8:	47a8      	blx	r5
   11eaa:	2800      	cmp	r0, #0
   11eac:	da14      	bge.n	11ed8 <mqtt_disconnect+0x6c>
   11eae:	7823      	ldrb	r3, [r4, #0]
   11eb0:	43bb      	bics	r3, r7
   11eb2:	7023      	strb	r3, [r4, #0]
   11eb4:	4b12      	ldr	r3, [pc, #72]	; (11f00 <mqtt_disconnect+0x94>)
   11eb6:	4798      	blx	r3
   11eb8:	e01e      	b.n	11ef8 <mqtt_disconnect+0x8c>
   11eba:	1c03      	adds	r3, r0, #0
   11ebc:	3370      	adds	r3, #112	; 0x70
   11ebe:	781b      	ldrb	r3, [r3, #0]
   11ec0:	2b00      	cmp	r3, #0
   11ec2:	d117      	bne.n	11ef4 <mqtt_disconnect+0x88>
   11ec4:	7823      	ldrb	r3, [r4, #0]
   11ec6:	071a      	lsls	r2, r3, #28
   11ec8:	d5e2      	bpl.n	11e90 <mqtt_disconnect+0x24>
   11eca:	4b0e      	ldr	r3, [pc, #56]	; (11f04 <mqtt_disconnect+0x98>)
   11ecc:	2000      	movs	r0, #0
   11ece:	4798      	blx	r3
   11ed0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   11ed2:	4b0d      	ldr	r3, [pc, #52]	; (11f08 <mqtt_disconnect+0x9c>)
   11ed4:	4798      	blx	r3
   11ed6:	e7f5      	b.n	11ec4 <mqtt_disconnect+0x58>
   11ed8:	7823      	ldrb	r3, [r4, #0]
   11eda:	2202      	movs	r2, #2
   11edc:	4393      	bics	r3, r2
   11ede:	7023      	strb	r3, [r4, #0]
   11ee0:	2000      	movs	r0, #0
   11ee2:	e009      	b.n	11ef8 <mqtt_disconnect+0x8c>
   11ee4:	4b09      	ldr	r3, [pc, #36]	; (11f0c <mqtt_disconnect+0xa0>)
   11ee6:	4798      	blx	r3
   11ee8:	1c38      	adds	r0, r7, #0
   11eea:	e005      	b.n	11ef8 <mqtt_disconnect+0x8c>
   11eec:	2016      	movs	r0, #22
   11eee:	e002      	b.n	11ef6 <mqtt_disconnect+0x8a>
   11ef0:	2080      	movs	r0, #128	; 0x80
   11ef2:	e000      	b.n	11ef6 <mqtt_disconnect+0x8a>
   11ef4:	200b      	movs	r0, #11
   11ef6:	4240      	negs	r0, r0
   11ef8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11efa:	46c0      	nop			; (mov r8, r8)
   11efc:	0000afbd 	.word	0x0000afbd
   11f00:	00011459 	.word	0x00011459
   11f04:	0000921d 	.word	0x0000921d
   11f08:	0000d9fd 	.word	0x0000d9fd
   11f0c:	00011e1d 	.word	0x00011e1d

00011f10 <_mqtt_recv_handler>:
   11f10:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f12:	1c04      	adds	r4, r0, #0
   11f14:	6e40      	ldr	r0, [r0, #100]	; 0x64
   11f16:	230f      	movs	r3, #15
   11f18:	7802      	ldrb	r2, [r0, #0]
   11f1a:	b087      	sub	sp, #28
   11f1c:	1c15      	adds	r5, r2, #0
   11f1e:	439d      	bics	r5, r3
   11f20:	2d50      	cmp	r5, #80	; 0x50
   11f22:	d100      	bne.n	11f26 <_mqtt_recv_handler+0x16>
   11f24:	e098      	b.n	12058 <_mqtt_recv_handler+0x148>
   11f26:	d808      	bhi.n	11f3a <_mqtt_recv_handler+0x2a>
   11f28:	2d30      	cmp	r5, #48	; 0x30
   11f2a:	d03f      	beq.n	11fac <_mqtt_recv_handler+0x9c>
   11f2c:	2d40      	cmp	r5, #64	; 0x40
   11f2e:	d100      	bne.n	11f32 <_mqtt_recv_handler+0x22>
   11f30:	e0b3      	b.n	1209a <_mqtt_recv_handler+0x18a>
   11f32:	2d20      	cmp	r5, #32
   11f34:	d000      	beq.n	11f38 <_mqtt_recv_handler+0x28>
   11f36:	e0c3      	b.n	120c0 <_mqtt_recv_handler+0x1b0>
   11f38:	e00e      	b.n	11f58 <_mqtt_recv_handler+0x48>
   11f3a:	2d70      	cmp	r5, #112	; 0x70
   11f3c:	d100      	bne.n	11f40 <_mqtt_recv_handler+0x30>
   11f3e:	e0ac      	b.n	1209a <_mqtt_recv_handler+0x18a>
   11f40:	d803      	bhi.n	11f4a <_mqtt_recv_handler+0x3a>
   11f42:	2d60      	cmp	r5, #96	; 0x60
   11f44:	d100      	bne.n	11f48 <_mqtt_recv_handler+0x38>
   11f46:	e096      	b.n	12076 <_mqtt_recv_handler+0x166>
   11f48:	e0ba      	b.n	120c0 <_mqtt_recv_handler+0x1b0>
   11f4a:	2d90      	cmp	r5, #144	; 0x90
   11f4c:	d100      	bne.n	11f50 <_mqtt_recv_handler+0x40>
   11f4e:	e0aa      	b.n	120a6 <_mqtt_recv_handler+0x196>
   11f50:	2db0      	cmp	r5, #176	; 0xb0
   11f52:	d100      	bne.n	11f56 <_mqtt_recv_handler+0x46>
   11f54:	e0ad      	b.n	120b2 <_mqtt_recv_handler+0x1a2>
   11f56:	e0b3      	b.n	120c0 <_mqtt_recv_handler+0x1b0>
   11f58:	aa01      	add	r2, sp, #4
   11f5a:	2303      	movs	r3, #3
   11f5c:	2901      	cmp	r1, #1
   11f5e:	d900      	bls.n	11f62 <_mqtt_recv_handler+0x52>
   11f60:	78c3      	ldrb	r3, [r0, #3]
   11f62:	7013      	strb	r3, [r2, #0]
   11f64:	7813      	ldrb	r3, [r2, #0]
   11f66:	2b00      	cmp	r3, #0
   11f68:	d00d      	beq.n	11f86 <_mqtt_recv_handler+0x76>
   11f6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11f6c:	2b00      	cmp	r3, #0
   11f6e:	d002      	beq.n	11f76 <_mqtt_recv_handler+0x66>
   11f70:	1c20      	adds	r0, r4, #0
   11f72:	2101      	movs	r1, #1
   11f74:	4798      	blx	r3
   11f76:	236f      	movs	r3, #111	; 0x6f
   11f78:	425b      	negs	r3, r3
   11f7a:	64e3      	str	r3, [r4, #76]	; 0x4c
   11f7c:	1c20      	adds	r0, r4, #0
   11f7e:	2100      	movs	r1, #0
   11f80:	4b50      	ldr	r3, [pc, #320]	; (120c4 <_mqtt_recv_handler+0x1b4>)
   11f82:	4798      	blx	r3
   11f84:	e09c      	b.n	120c0 <_mqtt_recv_handler+0x1b0>
   11f86:	1c23      	adds	r3, r4, #0
   11f88:	3343      	adds	r3, #67	; 0x43
   11f8a:	7819      	ldrb	r1, [r3, #0]
   11f8c:	0789      	lsls	r1, r1, #30
   11f8e:	0fc9      	lsrs	r1, r1, #31
   11f90:	d105      	bne.n	11f9e <_mqtt_recv_handler+0x8e>
   11f92:	781a      	ldrb	r2, [r3, #0]
   11f94:	64e1      	str	r1, [r4, #76]	; 0x4c
   11f96:	2102      	movs	r1, #2
   11f98:	430a      	orrs	r2, r1
   11f9a:	701a      	strb	r2, [r3, #0]
   11f9c:	e090      	b.n	120c0 <_mqtt_recv_handler+0x1b0>
   11f9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11fa0:	2b00      	cmp	r3, #0
   11fa2:	d100      	bne.n	11fa6 <_mqtt_recv_handler+0x96>
   11fa4:	e08c      	b.n	120c0 <_mqtt_recv_handler+0x1b0>
   11fa6:	1c20      	adds	r0, r4, #0
   11fa8:	2101      	movs	r1, #1
   11faa:	e088      	b.n	120be <_mqtt_recv_handler+0x1ae>
   11fac:	ad01      	add	r5, sp, #4
   11fae:	0713      	lsls	r3, r2, #28
   11fb0:	7c2a      	ldrb	r2, [r5, #16]
   11fb2:	0fdb      	lsrs	r3, r3, #31
   11fb4:	2604      	movs	r6, #4
   11fb6:	009b      	lsls	r3, r3, #2
   11fb8:	43b2      	bics	r2, r6
   11fba:	431a      	orrs	r2, r3
   11fbc:	742a      	strb	r2, [r5, #16]
   11fbe:	7807      	ldrb	r7, [r0, #0]
   11fc0:	2303      	movs	r3, #3
   11fc2:	b2d2      	uxtb	r2, r2
   11fc4:	087f      	lsrs	r7, r7, #1
   11fc6:	439a      	bics	r2, r3
   11fc8:	401f      	ands	r7, r3
   11fca:	1c13      	adds	r3, r2, #0
   11fcc:	433b      	orrs	r3, r7
   11fce:	742b      	strb	r3, [r5, #16]
   11fd0:	1c43      	adds	r3, r0, #1
   11fd2:	7818      	ldrb	r0, [r3, #0]
   11fd4:	1c5a      	adds	r2, r3, #1
   11fd6:	287f      	cmp	r0, #127	; 0x7f
   11fd8:	d901      	bls.n	11fde <_mqtt_recv_handler+0xce>
   11fda:	1c13      	adds	r3, r2, #0
   11fdc:	e7f9      	b.n	11fd2 <_mqtt_recv_handler+0xc2>
   11fde:	7858      	ldrb	r0, [r3, #1]
   11fe0:	789e      	ldrb	r6, [r3, #2]
   11fe2:	0200      	lsls	r0, r0, #8
   11fe4:	4330      	orrs	r0, r6
   11fe6:	3303      	adds	r3, #3
   11fe8:	2600      	movs	r6, #0
   11fea:	6068      	str	r0, [r5, #4]
   11fec:	9301      	str	r3, [sp, #4]
   11fee:	1818      	adds	r0, r3, r0
   11ff0:	42b7      	cmp	r7, r6
   11ff2:	d004      	beq.n	11ffe <_mqtt_recv_handler+0xee>
   11ff4:	7806      	ldrb	r6, [r0, #0]
   11ff6:	7843      	ldrb	r3, [r0, #1]
   11ff8:	0236      	lsls	r6, r6, #8
   11ffa:	431e      	orrs	r6, r3
   11ffc:	3002      	adds	r0, #2
   11ffe:	1851      	adds	r1, r2, r1
   12000:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12002:	60a8      	str	r0, [r5, #8]
   12004:	1a08      	subs	r0, r1, r0
   12006:	60e8      	str	r0, [r5, #12]
   12008:	2b00      	cmp	r3, #0
   1200a:	d003      	beq.n	12014 <_mqtt_recv_handler+0x104>
   1200c:	1c20      	adds	r0, r4, #0
   1200e:	2106      	movs	r1, #6
   12010:	1c2a      	adds	r2, r5, #0
   12012:	4798      	blx	r3
   12014:	7c2b      	ldrb	r3, [r5, #16]
   12016:	079b      	lsls	r3, r3, #30
   12018:	0f9b      	lsrs	r3, r3, #30
   1201a:	2b01      	cmp	r3, #1
   1201c:	d10b      	bne.n	12036 <_mqtt_recv_handler+0x126>
   1201e:	b2b6      	uxth	r6, r6
   12020:	1c20      	adds	r0, r4, #0
   12022:	2140      	movs	r1, #64	; 0x40
   12024:	1c32      	adds	r2, r6, #0
   12026:	4b28      	ldr	r3, [pc, #160]	; (120c8 <_mqtt_recv_handler+0x1b8>)
   12028:	4798      	blx	r3
   1202a:	2800      	cmp	r0, #0
   1202c:	d048      	beq.n	120c0 <_mqtt_recv_handler+0x1b0>
   1202e:	1c23      	adds	r3, r4, #0
   12030:	3348      	adds	r3, #72	; 0x48
   12032:	2240      	movs	r2, #64	; 0x40
   12034:	e00c      	b.n	12050 <_mqtt_recv_handler+0x140>
   12036:	2b02      	cmp	r3, #2
   12038:	d142      	bne.n	120c0 <_mqtt_recv_handler+0x1b0>
   1203a:	b2b6      	uxth	r6, r6
   1203c:	1c20      	adds	r0, r4, #0
   1203e:	2150      	movs	r1, #80	; 0x50
   12040:	1c32      	adds	r2, r6, #0
   12042:	4b21      	ldr	r3, [pc, #132]	; (120c8 <_mqtt_recv_handler+0x1b8>)
   12044:	4798      	blx	r3
   12046:	2800      	cmp	r0, #0
   12048:	d03a      	beq.n	120c0 <_mqtt_recv_handler+0x1b0>
   1204a:	1c23      	adds	r3, r4, #0
   1204c:	3348      	adds	r3, #72	; 0x48
   1204e:	2250      	movs	r2, #80	; 0x50
   12050:	344a      	adds	r4, #74	; 0x4a
   12052:	701a      	strb	r2, [r3, #0]
   12054:	8026      	strh	r6, [r4, #0]
   12056:	e033      	b.n	120c0 <_mqtt_recv_handler+0x1b0>
   12058:	7885      	ldrb	r5, [r0, #2]
   1205a:	78c3      	ldrb	r3, [r0, #3]
   1205c:	022d      	lsls	r5, r5, #8
   1205e:	431d      	orrs	r5, r3
   12060:	1c20      	adds	r0, r4, #0
   12062:	2162      	movs	r1, #98	; 0x62
   12064:	1c2a      	adds	r2, r5, #0
   12066:	4b18      	ldr	r3, [pc, #96]	; (120c8 <_mqtt_recv_handler+0x1b8>)
   12068:	4798      	blx	r3
   1206a:	2800      	cmp	r0, #0
   1206c:	d028      	beq.n	120c0 <_mqtt_recv_handler+0x1b0>
   1206e:	1c23      	adds	r3, r4, #0
   12070:	3348      	adds	r3, #72	; 0x48
   12072:	2260      	movs	r2, #96	; 0x60
   12074:	e00d      	b.n	12092 <_mqtt_recv_handler+0x182>
   12076:	7885      	ldrb	r5, [r0, #2]
   12078:	78c3      	ldrb	r3, [r0, #3]
   1207a:	022d      	lsls	r5, r5, #8
   1207c:	431d      	orrs	r5, r3
   1207e:	1c20      	adds	r0, r4, #0
   12080:	2170      	movs	r1, #112	; 0x70
   12082:	1c2a      	adds	r2, r5, #0
   12084:	4b10      	ldr	r3, [pc, #64]	; (120c8 <_mqtt_recv_handler+0x1b8>)
   12086:	4798      	blx	r3
   12088:	2800      	cmp	r0, #0
   1208a:	d019      	beq.n	120c0 <_mqtt_recv_handler+0x1b0>
   1208c:	1c23      	adds	r3, r4, #0
   1208e:	3348      	adds	r3, #72	; 0x48
   12090:	2270      	movs	r2, #112	; 0x70
   12092:	344a      	adds	r4, #74	; 0x4a
   12094:	701a      	strb	r2, [r3, #0]
   12096:	8025      	strh	r5, [r4, #0]
   12098:	e012      	b.n	120c0 <_mqtt_recv_handler+0x1b0>
   1209a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1209c:	2b00      	cmp	r3, #0
   1209e:	d00f      	beq.n	120c0 <_mqtt_recv_handler+0x1b0>
   120a0:	1c20      	adds	r0, r4, #0
   120a2:	2102      	movs	r1, #2
   120a4:	e00a      	b.n	120bc <_mqtt_recv_handler+0x1ac>
   120a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   120a8:	2b00      	cmp	r3, #0
   120aa:	d009      	beq.n	120c0 <_mqtt_recv_handler+0x1b0>
   120ac:	1c20      	adds	r0, r4, #0
   120ae:	2103      	movs	r1, #3
   120b0:	e004      	b.n	120bc <_mqtt_recv_handler+0x1ac>
   120b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   120b4:	2b00      	cmp	r3, #0
   120b6:	d003      	beq.n	120c0 <_mqtt_recv_handler+0x1b0>
   120b8:	1c20      	adds	r0, r4, #0
   120ba:	2104      	movs	r1, #4
   120bc:	aa01      	add	r2, sp, #4
   120be:	4798      	blx	r3
   120c0:	b007      	add	sp, #28
   120c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   120c4:	00011e6d 	.word	0x00011e6d
   120c8:	00011db9 	.word	0x00011db9

000120cc <mqtt_recv_packet>:
   120cc:	b538      	push	{r3, r4, r5, lr}
   120ce:	1e04      	subs	r4, r0, #0
   120d0:	d017      	beq.n	12102 <mqtt_recv_packet+0x36>
   120d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   120d4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   120d6:	429a      	cmp	r2, r3
   120d8:	d906      	bls.n	120e8 <mqtt_recv_packet+0x1c>
   120da:	238b      	movs	r3, #139	; 0x8b
   120dc:	425b      	negs	r3, r3
   120de:	64c3      	str	r3, [r0, #76]	; 0x4c
   120e0:	2100      	movs	r1, #0
   120e2:	4b08      	ldr	r3, [pc, #32]	; (12104 <mqtt_recv_packet+0x38>)
   120e4:	4798      	blx	r3
   120e6:	e00c      	b.n	12102 <mqtt_recv_packet+0x36>
   120e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   120ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
   120ec:	2002      	movs	r0, #2
   120ee:	1899      	adds	r1, r3, r2
   120f0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   120f2:	5620      	ldrsb	r0, [r4, r0]
   120f4:	1a9a      	subs	r2, r3, r2
   120f6:	b292      	uxth	r2, r2
   120f8:	2300      	movs	r3, #0
   120fa:	4d03      	ldr	r5, [pc, #12]	; (12108 <mqtt_recv_packet+0x3c>)
   120fc:	47a8      	blx	r5
   120fe:	2800      	cmp	r0, #0
   12100:	d1f2      	bne.n	120e8 <mqtt_recv_packet+0x1c>
   12102:	bd38      	pop	{r3, r4, r5, pc}
   12104:	00011e6d 	.word	0x00011e6d
   12108:	0000b055 	.word	0x0000b055

0001210c <mqtt_recved_packet>:
   1210c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1210e:	1e04      	subs	r4, r0, #0
   12110:	d042      	beq.n	12198 <mqtt_recved_packet+0x8c>
   12112:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12114:	6e67      	ldr	r7, [r4, #100]	; 0x64
   12116:	18ca      	adds	r2, r1, r3
   12118:	2301      	movs	r3, #1
   1211a:	9701      	str	r7, [sp, #4]
   1211c:	6462      	str	r2, [r4, #68]	; 0x44
   1211e:	2600      	movs	r6, #0
   12120:	1c1d      	adds	r5, r3, #0
   12122:	42a9      	cmp	r1, r5
   12124:	dc03      	bgt.n	1212e <mqtt_recved_packet+0x22>
   12126:	1c20      	adds	r0, r4, #0
   12128:	4b1c      	ldr	r3, [pc, #112]	; (1219c <mqtt_recved_packet+0x90>)
   1212a:	4798      	blx	r3
   1212c:	e034      	b.n	12198 <mqtt_recved_packet+0x8c>
   1212e:	9f01      	ldr	r7, [sp, #4]
   12130:	5d78      	ldrb	r0, [r7, r5]
   12132:	01df      	lsls	r7, r3, #7
   12134:	46bc      	mov	ip, r7
   12136:	2d03      	cmp	r5, #3
   12138:	d101      	bne.n	1213e <mqtt_recved_packet+0x32>
   1213a:	234d      	movs	r3, #77	; 0x4d
   1213c:	e00e      	b.n	1215c <mqtt_recved_packet+0x50>
   1213e:	277f      	movs	r7, #127	; 0x7f
   12140:	4007      	ands	r7, r0
   12142:	437b      	muls	r3, r7
   12144:	b240      	sxtb	r0, r0
   12146:	3501      	adds	r5, #1
   12148:	18f6      	adds	r6, r6, r3
   1214a:	2800      	cmp	r0, #0
   1214c:	da01      	bge.n	12152 <mqtt_recved_packet+0x46>
   1214e:	4663      	mov	r3, ip
   12150:	e7e7      	b.n	12122 <mqtt_recved_packet+0x16>
   12152:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   12154:	19af      	adds	r7, r5, r6
   12156:	429f      	cmp	r7, r3
   12158:	d907      	bls.n	1216a <mqtt_recved_packet+0x5e>
   1215a:	238b      	movs	r3, #139	; 0x8b
   1215c:	425b      	negs	r3, r3
   1215e:	64e3      	str	r3, [r4, #76]	; 0x4c
   12160:	1c20      	adds	r0, r4, #0
   12162:	2100      	movs	r1, #0
   12164:	4b0e      	ldr	r3, [pc, #56]	; (121a0 <mqtt_recved_packet+0x94>)
   12166:	4798      	blx	r3
   12168:	e016      	b.n	12198 <mqtt_recved_packet+0x8c>
   1216a:	42ba      	cmp	r2, r7
   1216c:	d314      	bcc.n	12198 <mqtt_recved_packet+0x8c>
   1216e:	4b0d      	ldr	r3, [pc, #52]	; (121a4 <mqtt_recved_packet+0x98>)
   12170:	1c20      	adds	r0, r4, #0
   12172:	1c31      	adds	r1, r6, #0
   12174:	4798      	blx	r3
   12176:	6c63      	ldr	r3, [r4, #68]	; 0x44
   12178:	42bb      	cmp	r3, r7
   1217a:	d102      	bne.n	12182 <mqtt_recved_packet+0x76>
   1217c:	2300      	movs	r3, #0
   1217e:	6463      	str	r3, [r4, #68]	; 0x44
   12180:	e00a      	b.n	12198 <mqtt_recved_packet+0x8c>
   12182:	1b9e      	subs	r6, r3, r6
   12184:	9b01      	ldr	r3, [sp, #4]
   12186:	1b75      	subs	r5, r6, r5
   12188:	19d9      	adds	r1, r3, r7
   1218a:	1c18      	adds	r0, r3, #0
   1218c:	1c2a      	adds	r2, r5, #0
   1218e:	4b06      	ldr	r3, [pc, #24]	; (121a8 <mqtt_recved_packet+0x9c>)
   12190:	4798      	blx	r3
   12192:	6465      	str	r5, [r4, #68]	; 0x44
   12194:	2100      	movs	r1, #0
   12196:	e7bc      	b.n	12112 <mqtt_recved_packet+0x6>
   12198:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1219a:	46c0      	nop			; (mov r8, r8)
   1219c:	000120cd 	.word	0x000120cd
   121a0:	00011e6d 	.word	0x00011e6d
   121a4:	00011f11 	.word	0x00011f11
   121a8:	00013f57 	.word	0x00013f57

000121ac <mqtt_socket_event_handler>:
   121ac:	b570      	push	{r4, r5, r6, lr}
   121ae:	4d37      	ldr	r5, [pc, #220]	; (1228c <mqtt_socket_event_handler+0xe0>)
   121b0:	0086      	lsls	r6, r0, #2
   121b2:	5974      	ldr	r4, [r6, r5]
   121b4:	b086      	sub	sp, #24
   121b6:	2c00      	cmp	r4, #0
   121b8:	d066      	beq.n	12288 <mqtt_socket_event_handler+0xdc>
   121ba:	2906      	cmp	r1, #6
   121bc:	d02b      	beq.n	12216 <mqtt_socket_event_handler+0x6a>
   121be:	2907      	cmp	r1, #7
   121c0:	d039      	beq.n	12236 <mqtt_socket_event_handler+0x8a>
   121c2:	2905      	cmp	r1, #5
   121c4:	d160      	bne.n	12288 <mqtt_socket_event_handler+0xdc>
   121c6:	2001      	movs	r0, #1
   121c8:	5610      	ldrsb	r0, [r2, r0]
   121ca:	4b31      	ldr	r3, [pc, #196]	; (12290 <mqtt_socket_event_handler+0xe4>)
   121cc:	4798      	blx	r3
   121ce:	9001      	str	r0, [sp, #4]
   121d0:	2800      	cmp	r0, #0
   121d2:	da06      	bge.n	121e2 <mqtt_socket_event_handler+0x36>
   121d4:	2002      	movs	r0, #2
   121d6:	4b2f      	ldr	r3, [pc, #188]	; (12294 <mqtt_socket_event_handler+0xe8>)
   121d8:	5620      	ldrsb	r0, [r4, r0]
   121da:	4798      	blx	r3
   121dc:	2300      	movs	r3, #0
   121de:	5173      	str	r3, [r6, r5]
   121e0:	e011      	b.n	12206 <mqtt_socket_event_handler+0x5a>
   121e2:	1c23      	adds	r3, r4, #0
   121e4:	3343      	adds	r3, #67	; 0x43
   121e6:	781a      	ldrb	r2, [r3, #0]
   121e8:	2101      	movs	r1, #1
   121ea:	430a      	orrs	r2, r1
   121ec:	701a      	strb	r2, [r3, #0]
   121ee:	331d      	adds	r3, #29
   121f0:	881b      	ldrh	r3, [r3, #0]
   121f2:	2b00      	cmp	r3, #0
   121f4:	d004      	beq.n	12200 <mqtt_socket_event_handler+0x54>
   121f6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   121f8:	6d21      	ldr	r1, [r4, #80]	; 0x50
   121fa:	2200      	movs	r2, #0
   121fc:	4b26      	ldr	r3, [pc, #152]	; (12298 <mqtt_socket_event_handler+0xec>)
   121fe:	4798      	blx	r3
   12200:	1c20      	adds	r0, r4, #0
   12202:	4b26      	ldr	r3, [pc, #152]	; (1229c <mqtt_socket_event_handler+0xf0>)
   12204:	4798      	blx	r3
   12206:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12208:	2b00      	cmp	r3, #0
   1220a:	d03d      	beq.n	12288 <mqtt_socket_event_handler+0xdc>
   1220c:	1c20      	adds	r0, r4, #0
   1220e:	2100      	movs	r1, #0
   12210:	aa01      	add	r2, sp, #4
   12212:	4798      	blx	r3
   12214:	e038      	b.n	12288 <mqtt_socket_event_handler+0xdc>
   12216:	2304      	movs	r3, #4
   12218:	5ed1      	ldrsh	r1, [r2, r3]
   1221a:	2900      	cmp	r1, #0
   1221c:	dd03      	ble.n	12226 <mqtt_socket_event_handler+0x7a>
   1221e:	1c20      	adds	r0, r4, #0
   12220:	4b1f      	ldr	r3, [pc, #124]	; (122a0 <mqtt_socket_event_handler+0xf4>)
   12222:	4798      	blx	r3
   12224:	e003      	b.n	1222e <mqtt_socket_event_handler+0x82>
   12226:	1c0b      	adds	r3, r1, #0
   12228:	1c08      	adds	r0, r1, #0
   1222a:	330d      	adds	r3, #13
   1222c:	d11a      	bne.n	12264 <mqtt_socket_event_handler+0xb8>
   1222e:	4b1b      	ldr	r3, [pc, #108]	; (1229c <mqtt_socket_event_handler+0xf0>)
   12230:	1c20      	adds	r0, r4, #0
   12232:	4798      	blx	r3
   12234:	e028      	b.n	12288 <mqtt_socket_event_handler+0xdc>
   12236:	1c23      	adds	r3, r4, #0
   12238:	3343      	adds	r3, #67	; 0x43
   1223a:	8810      	ldrh	r0, [r2, #0]
   1223c:	781a      	ldrb	r2, [r3, #0]
   1223e:	0751      	lsls	r1, r2, #29
   12240:	d402      	bmi.n	12248 <mqtt_socket_event_handler+0x9c>
   12242:	2108      	movs	r1, #8
   12244:	438a      	bics	r2, r1
   12246:	701a      	strb	r2, [r3, #0]
   12248:	781a      	ldrb	r2, [r3, #0]
   1224a:	2104      	movs	r1, #4
   1224c:	438a      	bics	r2, r1
   1224e:	701a      	strb	r2, [r3, #0]
   12250:	06d3      	lsls	r3, r2, #27
   12252:	0fde      	lsrs	r6, r3, #31
   12254:	b200      	sxth	r0, r0
   12256:	2b00      	cmp	r3, #0
   12258:	db02      	blt.n	12260 <mqtt_socket_event_handler+0xb4>
   1225a:	2800      	cmp	r0, #0
   1225c:	da08      	bge.n	12270 <mqtt_socket_event_handler+0xc4>
   1225e:	e001      	b.n	12264 <mqtt_socket_event_handler+0xb8>
   12260:	2800      	cmp	r0, #0
   12262:	da02      	bge.n	1226a <mqtt_socket_event_handler+0xbe>
   12264:	4b0a      	ldr	r3, [pc, #40]	; (12290 <mqtt_socket_event_handler+0xe4>)
   12266:	4798      	blx	r3
   12268:	64e0      	str	r0, [r4, #76]	; 0x4c
   1226a:	1c20      	adds	r0, r4, #0
   1226c:	4b0d      	ldr	r3, [pc, #52]	; (122a4 <mqtt_socket_event_handler+0xf8>)
   1226e:	e7e0      	b.n	12232 <mqtt_socket_event_handler+0x86>
   12270:	1c25      	adds	r5, r4, #0
   12272:	3548      	adds	r5, #72	; 0x48
   12274:	7829      	ldrb	r1, [r5, #0]
   12276:	2900      	cmp	r1, #0
   12278:	d006      	beq.n	12288 <mqtt_socket_event_handler+0xdc>
   1227a:	1c23      	adds	r3, r4, #0
   1227c:	334a      	adds	r3, #74	; 0x4a
   1227e:	881a      	ldrh	r2, [r3, #0]
   12280:	1c20      	adds	r0, r4, #0
   12282:	4b09      	ldr	r3, [pc, #36]	; (122a8 <mqtt_socket_event_handler+0xfc>)
   12284:	4798      	blx	r3
   12286:	702e      	strb	r6, [r5, #0]
   12288:	b006      	add	sp, #24
   1228a:	bd70      	pop	{r4, r5, r6, pc}
   1228c:	200003d8 	.word	0x200003d8
   12290:	00011459 	.word	0x00011459
   12294:	0000b0e9 	.word	0x0000b0e9
   12298:	0000d9c1 	.word	0x0000d9c1
   1229c:	000120cd 	.word	0x000120cd
   122a0:	0001210d 	.word	0x0001210d
   122a4:	00011e1d 	.word	0x00011e1d
   122a8:	00011db9 	.word	0x00011db9

000122ac <__gnu_thumb1_case_uqi>:
   122ac:	b402      	push	{r1}
   122ae:	4671      	mov	r1, lr
   122b0:	0849      	lsrs	r1, r1, #1
   122b2:	0049      	lsls	r1, r1, #1
   122b4:	5c09      	ldrb	r1, [r1, r0]
   122b6:	0049      	lsls	r1, r1, #1
   122b8:	448e      	add	lr, r1
   122ba:	bc02      	pop	{r1}
   122bc:	4770      	bx	lr
   122be:	46c0      	nop			; (mov r8, r8)

000122c0 <__udivsi3>:
   122c0:	2200      	movs	r2, #0
   122c2:	0843      	lsrs	r3, r0, #1
   122c4:	428b      	cmp	r3, r1
   122c6:	d374      	bcc.n	123b2 <__udivsi3+0xf2>
   122c8:	0903      	lsrs	r3, r0, #4
   122ca:	428b      	cmp	r3, r1
   122cc:	d35f      	bcc.n	1238e <__udivsi3+0xce>
   122ce:	0a03      	lsrs	r3, r0, #8
   122d0:	428b      	cmp	r3, r1
   122d2:	d344      	bcc.n	1235e <__udivsi3+0x9e>
   122d4:	0b03      	lsrs	r3, r0, #12
   122d6:	428b      	cmp	r3, r1
   122d8:	d328      	bcc.n	1232c <__udivsi3+0x6c>
   122da:	0c03      	lsrs	r3, r0, #16
   122dc:	428b      	cmp	r3, r1
   122de:	d30d      	bcc.n	122fc <__udivsi3+0x3c>
   122e0:	22ff      	movs	r2, #255	; 0xff
   122e2:	0209      	lsls	r1, r1, #8
   122e4:	ba12      	rev	r2, r2
   122e6:	0c03      	lsrs	r3, r0, #16
   122e8:	428b      	cmp	r3, r1
   122ea:	d302      	bcc.n	122f2 <__udivsi3+0x32>
   122ec:	1212      	asrs	r2, r2, #8
   122ee:	0209      	lsls	r1, r1, #8
   122f0:	d065      	beq.n	123be <__udivsi3+0xfe>
   122f2:	0b03      	lsrs	r3, r0, #12
   122f4:	428b      	cmp	r3, r1
   122f6:	d319      	bcc.n	1232c <__udivsi3+0x6c>
   122f8:	e000      	b.n	122fc <__udivsi3+0x3c>
   122fa:	0a09      	lsrs	r1, r1, #8
   122fc:	0bc3      	lsrs	r3, r0, #15
   122fe:	428b      	cmp	r3, r1
   12300:	d301      	bcc.n	12306 <__udivsi3+0x46>
   12302:	03cb      	lsls	r3, r1, #15
   12304:	1ac0      	subs	r0, r0, r3
   12306:	4152      	adcs	r2, r2
   12308:	0b83      	lsrs	r3, r0, #14
   1230a:	428b      	cmp	r3, r1
   1230c:	d301      	bcc.n	12312 <__udivsi3+0x52>
   1230e:	038b      	lsls	r3, r1, #14
   12310:	1ac0      	subs	r0, r0, r3
   12312:	4152      	adcs	r2, r2
   12314:	0b43      	lsrs	r3, r0, #13
   12316:	428b      	cmp	r3, r1
   12318:	d301      	bcc.n	1231e <__udivsi3+0x5e>
   1231a:	034b      	lsls	r3, r1, #13
   1231c:	1ac0      	subs	r0, r0, r3
   1231e:	4152      	adcs	r2, r2
   12320:	0b03      	lsrs	r3, r0, #12
   12322:	428b      	cmp	r3, r1
   12324:	d301      	bcc.n	1232a <__udivsi3+0x6a>
   12326:	030b      	lsls	r3, r1, #12
   12328:	1ac0      	subs	r0, r0, r3
   1232a:	4152      	adcs	r2, r2
   1232c:	0ac3      	lsrs	r3, r0, #11
   1232e:	428b      	cmp	r3, r1
   12330:	d301      	bcc.n	12336 <__udivsi3+0x76>
   12332:	02cb      	lsls	r3, r1, #11
   12334:	1ac0      	subs	r0, r0, r3
   12336:	4152      	adcs	r2, r2
   12338:	0a83      	lsrs	r3, r0, #10
   1233a:	428b      	cmp	r3, r1
   1233c:	d301      	bcc.n	12342 <__udivsi3+0x82>
   1233e:	028b      	lsls	r3, r1, #10
   12340:	1ac0      	subs	r0, r0, r3
   12342:	4152      	adcs	r2, r2
   12344:	0a43      	lsrs	r3, r0, #9
   12346:	428b      	cmp	r3, r1
   12348:	d301      	bcc.n	1234e <__udivsi3+0x8e>
   1234a:	024b      	lsls	r3, r1, #9
   1234c:	1ac0      	subs	r0, r0, r3
   1234e:	4152      	adcs	r2, r2
   12350:	0a03      	lsrs	r3, r0, #8
   12352:	428b      	cmp	r3, r1
   12354:	d301      	bcc.n	1235a <__udivsi3+0x9a>
   12356:	020b      	lsls	r3, r1, #8
   12358:	1ac0      	subs	r0, r0, r3
   1235a:	4152      	adcs	r2, r2
   1235c:	d2cd      	bcs.n	122fa <__udivsi3+0x3a>
   1235e:	09c3      	lsrs	r3, r0, #7
   12360:	428b      	cmp	r3, r1
   12362:	d301      	bcc.n	12368 <__udivsi3+0xa8>
   12364:	01cb      	lsls	r3, r1, #7
   12366:	1ac0      	subs	r0, r0, r3
   12368:	4152      	adcs	r2, r2
   1236a:	0983      	lsrs	r3, r0, #6
   1236c:	428b      	cmp	r3, r1
   1236e:	d301      	bcc.n	12374 <__udivsi3+0xb4>
   12370:	018b      	lsls	r3, r1, #6
   12372:	1ac0      	subs	r0, r0, r3
   12374:	4152      	adcs	r2, r2
   12376:	0943      	lsrs	r3, r0, #5
   12378:	428b      	cmp	r3, r1
   1237a:	d301      	bcc.n	12380 <__udivsi3+0xc0>
   1237c:	014b      	lsls	r3, r1, #5
   1237e:	1ac0      	subs	r0, r0, r3
   12380:	4152      	adcs	r2, r2
   12382:	0903      	lsrs	r3, r0, #4
   12384:	428b      	cmp	r3, r1
   12386:	d301      	bcc.n	1238c <__udivsi3+0xcc>
   12388:	010b      	lsls	r3, r1, #4
   1238a:	1ac0      	subs	r0, r0, r3
   1238c:	4152      	adcs	r2, r2
   1238e:	08c3      	lsrs	r3, r0, #3
   12390:	428b      	cmp	r3, r1
   12392:	d301      	bcc.n	12398 <__udivsi3+0xd8>
   12394:	00cb      	lsls	r3, r1, #3
   12396:	1ac0      	subs	r0, r0, r3
   12398:	4152      	adcs	r2, r2
   1239a:	0883      	lsrs	r3, r0, #2
   1239c:	428b      	cmp	r3, r1
   1239e:	d301      	bcc.n	123a4 <__udivsi3+0xe4>
   123a0:	008b      	lsls	r3, r1, #2
   123a2:	1ac0      	subs	r0, r0, r3
   123a4:	4152      	adcs	r2, r2
   123a6:	0843      	lsrs	r3, r0, #1
   123a8:	428b      	cmp	r3, r1
   123aa:	d301      	bcc.n	123b0 <__udivsi3+0xf0>
   123ac:	004b      	lsls	r3, r1, #1
   123ae:	1ac0      	subs	r0, r0, r3
   123b0:	4152      	adcs	r2, r2
   123b2:	1a41      	subs	r1, r0, r1
   123b4:	d200      	bcs.n	123b8 <__udivsi3+0xf8>
   123b6:	4601      	mov	r1, r0
   123b8:	4152      	adcs	r2, r2
   123ba:	4610      	mov	r0, r2
   123bc:	4770      	bx	lr
   123be:	e7ff      	b.n	123c0 <__udivsi3+0x100>
   123c0:	b501      	push	{r0, lr}
   123c2:	2000      	movs	r0, #0
   123c4:	f000 f8f0 	bl	125a8 <__aeabi_idiv0>
   123c8:	bd02      	pop	{r1, pc}
   123ca:	46c0      	nop			; (mov r8, r8)

000123cc <__aeabi_uidivmod>:
   123cc:	2900      	cmp	r1, #0
   123ce:	d0f7      	beq.n	123c0 <__udivsi3+0x100>
   123d0:	e776      	b.n	122c0 <__udivsi3>
   123d2:	4770      	bx	lr

000123d4 <__divsi3>:
   123d4:	4603      	mov	r3, r0
   123d6:	430b      	orrs	r3, r1
   123d8:	d47f      	bmi.n	124da <__divsi3+0x106>
   123da:	2200      	movs	r2, #0
   123dc:	0843      	lsrs	r3, r0, #1
   123de:	428b      	cmp	r3, r1
   123e0:	d374      	bcc.n	124cc <__divsi3+0xf8>
   123e2:	0903      	lsrs	r3, r0, #4
   123e4:	428b      	cmp	r3, r1
   123e6:	d35f      	bcc.n	124a8 <__divsi3+0xd4>
   123e8:	0a03      	lsrs	r3, r0, #8
   123ea:	428b      	cmp	r3, r1
   123ec:	d344      	bcc.n	12478 <__divsi3+0xa4>
   123ee:	0b03      	lsrs	r3, r0, #12
   123f0:	428b      	cmp	r3, r1
   123f2:	d328      	bcc.n	12446 <__divsi3+0x72>
   123f4:	0c03      	lsrs	r3, r0, #16
   123f6:	428b      	cmp	r3, r1
   123f8:	d30d      	bcc.n	12416 <__divsi3+0x42>
   123fa:	22ff      	movs	r2, #255	; 0xff
   123fc:	0209      	lsls	r1, r1, #8
   123fe:	ba12      	rev	r2, r2
   12400:	0c03      	lsrs	r3, r0, #16
   12402:	428b      	cmp	r3, r1
   12404:	d302      	bcc.n	1240c <__divsi3+0x38>
   12406:	1212      	asrs	r2, r2, #8
   12408:	0209      	lsls	r1, r1, #8
   1240a:	d065      	beq.n	124d8 <__divsi3+0x104>
   1240c:	0b03      	lsrs	r3, r0, #12
   1240e:	428b      	cmp	r3, r1
   12410:	d319      	bcc.n	12446 <__divsi3+0x72>
   12412:	e000      	b.n	12416 <__divsi3+0x42>
   12414:	0a09      	lsrs	r1, r1, #8
   12416:	0bc3      	lsrs	r3, r0, #15
   12418:	428b      	cmp	r3, r1
   1241a:	d301      	bcc.n	12420 <__divsi3+0x4c>
   1241c:	03cb      	lsls	r3, r1, #15
   1241e:	1ac0      	subs	r0, r0, r3
   12420:	4152      	adcs	r2, r2
   12422:	0b83      	lsrs	r3, r0, #14
   12424:	428b      	cmp	r3, r1
   12426:	d301      	bcc.n	1242c <__divsi3+0x58>
   12428:	038b      	lsls	r3, r1, #14
   1242a:	1ac0      	subs	r0, r0, r3
   1242c:	4152      	adcs	r2, r2
   1242e:	0b43      	lsrs	r3, r0, #13
   12430:	428b      	cmp	r3, r1
   12432:	d301      	bcc.n	12438 <__divsi3+0x64>
   12434:	034b      	lsls	r3, r1, #13
   12436:	1ac0      	subs	r0, r0, r3
   12438:	4152      	adcs	r2, r2
   1243a:	0b03      	lsrs	r3, r0, #12
   1243c:	428b      	cmp	r3, r1
   1243e:	d301      	bcc.n	12444 <__divsi3+0x70>
   12440:	030b      	lsls	r3, r1, #12
   12442:	1ac0      	subs	r0, r0, r3
   12444:	4152      	adcs	r2, r2
   12446:	0ac3      	lsrs	r3, r0, #11
   12448:	428b      	cmp	r3, r1
   1244a:	d301      	bcc.n	12450 <__divsi3+0x7c>
   1244c:	02cb      	lsls	r3, r1, #11
   1244e:	1ac0      	subs	r0, r0, r3
   12450:	4152      	adcs	r2, r2
   12452:	0a83      	lsrs	r3, r0, #10
   12454:	428b      	cmp	r3, r1
   12456:	d301      	bcc.n	1245c <__divsi3+0x88>
   12458:	028b      	lsls	r3, r1, #10
   1245a:	1ac0      	subs	r0, r0, r3
   1245c:	4152      	adcs	r2, r2
   1245e:	0a43      	lsrs	r3, r0, #9
   12460:	428b      	cmp	r3, r1
   12462:	d301      	bcc.n	12468 <__divsi3+0x94>
   12464:	024b      	lsls	r3, r1, #9
   12466:	1ac0      	subs	r0, r0, r3
   12468:	4152      	adcs	r2, r2
   1246a:	0a03      	lsrs	r3, r0, #8
   1246c:	428b      	cmp	r3, r1
   1246e:	d301      	bcc.n	12474 <__divsi3+0xa0>
   12470:	020b      	lsls	r3, r1, #8
   12472:	1ac0      	subs	r0, r0, r3
   12474:	4152      	adcs	r2, r2
   12476:	d2cd      	bcs.n	12414 <__divsi3+0x40>
   12478:	09c3      	lsrs	r3, r0, #7
   1247a:	428b      	cmp	r3, r1
   1247c:	d301      	bcc.n	12482 <__divsi3+0xae>
   1247e:	01cb      	lsls	r3, r1, #7
   12480:	1ac0      	subs	r0, r0, r3
   12482:	4152      	adcs	r2, r2
   12484:	0983      	lsrs	r3, r0, #6
   12486:	428b      	cmp	r3, r1
   12488:	d301      	bcc.n	1248e <__divsi3+0xba>
   1248a:	018b      	lsls	r3, r1, #6
   1248c:	1ac0      	subs	r0, r0, r3
   1248e:	4152      	adcs	r2, r2
   12490:	0943      	lsrs	r3, r0, #5
   12492:	428b      	cmp	r3, r1
   12494:	d301      	bcc.n	1249a <__divsi3+0xc6>
   12496:	014b      	lsls	r3, r1, #5
   12498:	1ac0      	subs	r0, r0, r3
   1249a:	4152      	adcs	r2, r2
   1249c:	0903      	lsrs	r3, r0, #4
   1249e:	428b      	cmp	r3, r1
   124a0:	d301      	bcc.n	124a6 <__divsi3+0xd2>
   124a2:	010b      	lsls	r3, r1, #4
   124a4:	1ac0      	subs	r0, r0, r3
   124a6:	4152      	adcs	r2, r2
   124a8:	08c3      	lsrs	r3, r0, #3
   124aa:	428b      	cmp	r3, r1
   124ac:	d301      	bcc.n	124b2 <__divsi3+0xde>
   124ae:	00cb      	lsls	r3, r1, #3
   124b0:	1ac0      	subs	r0, r0, r3
   124b2:	4152      	adcs	r2, r2
   124b4:	0883      	lsrs	r3, r0, #2
   124b6:	428b      	cmp	r3, r1
   124b8:	d301      	bcc.n	124be <__divsi3+0xea>
   124ba:	008b      	lsls	r3, r1, #2
   124bc:	1ac0      	subs	r0, r0, r3
   124be:	4152      	adcs	r2, r2
   124c0:	0843      	lsrs	r3, r0, #1
   124c2:	428b      	cmp	r3, r1
   124c4:	d301      	bcc.n	124ca <__divsi3+0xf6>
   124c6:	004b      	lsls	r3, r1, #1
   124c8:	1ac0      	subs	r0, r0, r3
   124ca:	4152      	adcs	r2, r2
   124cc:	1a41      	subs	r1, r0, r1
   124ce:	d200      	bcs.n	124d2 <__divsi3+0xfe>
   124d0:	4601      	mov	r1, r0
   124d2:	4152      	adcs	r2, r2
   124d4:	4610      	mov	r0, r2
   124d6:	4770      	bx	lr
   124d8:	e05d      	b.n	12596 <__divsi3+0x1c2>
   124da:	0fca      	lsrs	r2, r1, #31
   124dc:	d000      	beq.n	124e0 <__divsi3+0x10c>
   124de:	4249      	negs	r1, r1
   124e0:	1003      	asrs	r3, r0, #32
   124e2:	d300      	bcc.n	124e6 <__divsi3+0x112>
   124e4:	4240      	negs	r0, r0
   124e6:	4053      	eors	r3, r2
   124e8:	2200      	movs	r2, #0
   124ea:	469c      	mov	ip, r3
   124ec:	0903      	lsrs	r3, r0, #4
   124ee:	428b      	cmp	r3, r1
   124f0:	d32d      	bcc.n	1254e <__divsi3+0x17a>
   124f2:	0a03      	lsrs	r3, r0, #8
   124f4:	428b      	cmp	r3, r1
   124f6:	d312      	bcc.n	1251e <__divsi3+0x14a>
   124f8:	22fc      	movs	r2, #252	; 0xfc
   124fa:	0189      	lsls	r1, r1, #6
   124fc:	ba12      	rev	r2, r2
   124fe:	0a03      	lsrs	r3, r0, #8
   12500:	428b      	cmp	r3, r1
   12502:	d30c      	bcc.n	1251e <__divsi3+0x14a>
   12504:	0189      	lsls	r1, r1, #6
   12506:	1192      	asrs	r2, r2, #6
   12508:	428b      	cmp	r3, r1
   1250a:	d308      	bcc.n	1251e <__divsi3+0x14a>
   1250c:	0189      	lsls	r1, r1, #6
   1250e:	1192      	asrs	r2, r2, #6
   12510:	428b      	cmp	r3, r1
   12512:	d304      	bcc.n	1251e <__divsi3+0x14a>
   12514:	0189      	lsls	r1, r1, #6
   12516:	d03a      	beq.n	1258e <__divsi3+0x1ba>
   12518:	1192      	asrs	r2, r2, #6
   1251a:	e000      	b.n	1251e <__divsi3+0x14a>
   1251c:	0989      	lsrs	r1, r1, #6
   1251e:	09c3      	lsrs	r3, r0, #7
   12520:	428b      	cmp	r3, r1
   12522:	d301      	bcc.n	12528 <__divsi3+0x154>
   12524:	01cb      	lsls	r3, r1, #7
   12526:	1ac0      	subs	r0, r0, r3
   12528:	4152      	adcs	r2, r2
   1252a:	0983      	lsrs	r3, r0, #6
   1252c:	428b      	cmp	r3, r1
   1252e:	d301      	bcc.n	12534 <__divsi3+0x160>
   12530:	018b      	lsls	r3, r1, #6
   12532:	1ac0      	subs	r0, r0, r3
   12534:	4152      	adcs	r2, r2
   12536:	0943      	lsrs	r3, r0, #5
   12538:	428b      	cmp	r3, r1
   1253a:	d301      	bcc.n	12540 <__divsi3+0x16c>
   1253c:	014b      	lsls	r3, r1, #5
   1253e:	1ac0      	subs	r0, r0, r3
   12540:	4152      	adcs	r2, r2
   12542:	0903      	lsrs	r3, r0, #4
   12544:	428b      	cmp	r3, r1
   12546:	d301      	bcc.n	1254c <__divsi3+0x178>
   12548:	010b      	lsls	r3, r1, #4
   1254a:	1ac0      	subs	r0, r0, r3
   1254c:	4152      	adcs	r2, r2
   1254e:	08c3      	lsrs	r3, r0, #3
   12550:	428b      	cmp	r3, r1
   12552:	d301      	bcc.n	12558 <__divsi3+0x184>
   12554:	00cb      	lsls	r3, r1, #3
   12556:	1ac0      	subs	r0, r0, r3
   12558:	4152      	adcs	r2, r2
   1255a:	0883      	lsrs	r3, r0, #2
   1255c:	428b      	cmp	r3, r1
   1255e:	d301      	bcc.n	12564 <__divsi3+0x190>
   12560:	008b      	lsls	r3, r1, #2
   12562:	1ac0      	subs	r0, r0, r3
   12564:	4152      	adcs	r2, r2
   12566:	d2d9      	bcs.n	1251c <__divsi3+0x148>
   12568:	0843      	lsrs	r3, r0, #1
   1256a:	428b      	cmp	r3, r1
   1256c:	d301      	bcc.n	12572 <__divsi3+0x19e>
   1256e:	004b      	lsls	r3, r1, #1
   12570:	1ac0      	subs	r0, r0, r3
   12572:	4152      	adcs	r2, r2
   12574:	1a41      	subs	r1, r0, r1
   12576:	d200      	bcs.n	1257a <__divsi3+0x1a6>
   12578:	4601      	mov	r1, r0
   1257a:	4663      	mov	r3, ip
   1257c:	4152      	adcs	r2, r2
   1257e:	105b      	asrs	r3, r3, #1
   12580:	4610      	mov	r0, r2
   12582:	d301      	bcc.n	12588 <__divsi3+0x1b4>
   12584:	4240      	negs	r0, r0
   12586:	2b00      	cmp	r3, #0
   12588:	d500      	bpl.n	1258c <__divsi3+0x1b8>
   1258a:	4249      	negs	r1, r1
   1258c:	4770      	bx	lr
   1258e:	4663      	mov	r3, ip
   12590:	105b      	asrs	r3, r3, #1
   12592:	d300      	bcc.n	12596 <__divsi3+0x1c2>
   12594:	4240      	negs	r0, r0
   12596:	b501      	push	{r0, lr}
   12598:	2000      	movs	r0, #0
   1259a:	f000 f805 	bl	125a8 <__aeabi_idiv0>
   1259e:	bd02      	pop	{r1, pc}

000125a0 <__aeabi_idivmod>:
   125a0:	2900      	cmp	r1, #0
   125a2:	d0f8      	beq.n	12596 <__divsi3+0x1c2>
   125a4:	e716      	b.n	123d4 <__divsi3>
   125a6:	4770      	bx	lr

000125a8 <__aeabi_idiv0>:
   125a8:	4770      	bx	lr
   125aa:	46c0      	nop			; (mov r8, r8)

000125ac <__aeabi_lmul>:
   125ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   125ae:	46ce      	mov	lr, r9
   125b0:	4647      	mov	r7, r8
   125b2:	0415      	lsls	r5, r2, #16
   125b4:	0c2d      	lsrs	r5, r5, #16
   125b6:	002e      	movs	r6, r5
   125b8:	b580      	push	{r7, lr}
   125ba:	0407      	lsls	r7, r0, #16
   125bc:	0c14      	lsrs	r4, r2, #16
   125be:	0c3f      	lsrs	r7, r7, #16
   125c0:	4699      	mov	r9, r3
   125c2:	0c03      	lsrs	r3, r0, #16
   125c4:	437e      	muls	r6, r7
   125c6:	435d      	muls	r5, r3
   125c8:	4367      	muls	r7, r4
   125ca:	4363      	muls	r3, r4
   125cc:	197f      	adds	r7, r7, r5
   125ce:	0c34      	lsrs	r4, r6, #16
   125d0:	19e4      	adds	r4, r4, r7
   125d2:	469c      	mov	ip, r3
   125d4:	42a5      	cmp	r5, r4
   125d6:	d903      	bls.n	125e0 <__aeabi_lmul+0x34>
   125d8:	2380      	movs	r3, #128	; 0x80
   125da:	025b      	lsls	r3, r3, #9
   125dc:	4698      	mov	r8, r3
   125de:	44c4      	add	ip, r8
   125e0:	464b      	mov	r3, r9
   125e2:	4351      	muls	r1, r2
   125e4:	4343      	muls	r3, r0
   125e6:	0436      	lsls	r6, r6, #16
   125e8:	0c36      	lsrs	r6, r6, #16
   125ea:	0c25      	lsrs	r5, r4, #16
   125ec:	0424      	lsls	r4, r4, #16
   125ee:	4465      	add	r5, ip
   125f0:	19a4      	adds	r4, r4, r6
   125f2:	1859      	adds	r1, r3, r1
   125f4:	1949      	adds	r1, r1, r5
   125f6:	0020      	movs	r0, r4
   125f8:	bc0c      	pop	{r2, r3}
   125fa:	4690      	mov	r8, r2
   125fc:	4699      	mov	r9, r3
   125fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012600 <__aeabi_dadd>:
   12600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12602:	4645      	mov	r5, r8
   12604:	46de      	mov	lr, fp
   12606:	4657      	mov	r7, sl
   12608:	464e      	mov	r6, r9
   1260a:	030c      	lsls	r4, r1, #12
   1260c:	b5e0      	push	{r5, r6, r7, lr}
   1260e:	004e      	lsls	r6, r1, #1
   12610:	0fc9      	lsrs	r1, r1, #31
   12612:	4688      	mov	r8, r1
   12614:	000d      	movs	r5, r1
   12616:	0a61      	lsrs	r1, r4, #9
   12618:	0f44      	lsrs	r4, r0, #29
   1261a:	430c      	orrs	r4, r1
   1261c:	00c7      	lsls	r7, r0, #3
   1261e:	0319      	lsls	r1, r3, #12
   12620:	0058      	lsls	r0, r3, #1
   12622:	0fdb      	lsrs	r3, r3, #31
   12624:	469b      	mov	fp, r3
   12626:	0a4b      	lsrs	r3, r1, #9
   12628:	0f51      	lsrs	r1, r2, #29
   1262a:	430b      	orrs	r3, r1
   1262c:	0d76      	lsrs	r6, r6, #21
   1262e:	0d40      	lsrs	r0, r0, #21
   12630:	0019      	movs	r1, r3
   12632:	00d2      	lsls	r2, r2, #3
   12634:	45d8      	cmp	r8, fp
   12636:	d100      	bne.n	1263a <__aeabi_dadd+0x3a>
   12638:	e0ae      	b.n	12798 <__aeabi_dadd+0x198>
   1263a:	1a35      	subs	r5, r6, r0
   1263c:	2d00      	cmp	r5, #0
   1263e:	dc00      	bgt.n	12642 <__aeabi_dadd+0x42>
   12640:	e0f6      	b.n	12830 <__aeabi_dadd+0x230>
   12642:	2800      	cmp	r0, #0
   12644:	d10f      	bne.n	12666 <__aeabi_dadd+0x66>
   12646:	4313      	orrs	r3, r2
   12648:	d100      	bne.n	1264c <__aeabi_dadd+0x4c>
   1264a:	e0db      	b.n	12804 <__aeabi_dadd+0x204>
   1264c:	1e6b      	subs	r3, r5, #1
   1264e:	2b00      	cmp	r3, #0
   12650:	d000      	beq.n	12654 <__aeabi_dadd+0x54>
   12652:	e137      	b.n	128c4 <__aeabi_dadd+0x2c4>
   12654:	1aba      	subs	r2, r7, r2
   12656:	4297      	cmp	r7, r2
   12658:	41bf      	sbcs	r7, r7
   1265a:	1a64      	subs	r4, r4, r1
   1265c:	427f      	negs	r7, r7
   1265e:	1be4      	subs	r4, r4, r7
   12660:	2601      	movs	r6, #1
   12662:	0017      	movs	r7, r2
   12664:	e024      	b.n	126b0 <__aeabi_dadd+0xb0>
   12666:	4bc6      	ldr	r3, [pc, #792]	; (12980 <__aeabi_dadd+0x380>)
   12668:	429e      	cmp	r6, r3
   1266a:	d04d      	beq.n	12708 <__aeabi_dadd+0x108>
   1266c:	2380      	movs	r3, #128	; 0x80
   1266e:	041b      	lsls	r3, r3, #16
   12670:	4319      	orrs	r1, r3
   12672:	2d38      	cmp	r5, #56	; 0x38
   12674:	dd00      	ble.n	12678 <__aeabi_dadd+0x78>
   12676:	e107      	b.n	12888 <__aeabi_dadd+0x288>
   12678:	2d1f      	cmp	r5, #31
   1267a:	dd00      	ble.n	1267e <__aeabi_dadd+0x7e>
   1267c:	e138      	b.n	128f0 <__aeabi_dadd+0x2f0>
   1267e:	2020      	movs	r0, #32
   12680:	1b43      	subs	r3, r0, r5
   12682:	469a      	mov	sl, r3
   12684:	000b      	movs	r3, r1
   12686:	4650      	mov	r0, sl
   12688:	4083      	lsls	r3, r0
   1268a:	4699      	mov	r9, r3
   1268c:	0013      	movs	r3, r2
   1268e:	4648      	mov	r0, r9
   12690:	40eb      	lsrs	r3, r5
   12692:	4318      	orrs	r0, r3
   12694:	0003      	movs	r3, r0
   12696:	4650      	mov	r0, sl
   12698:	4082      	lsls	r2, r0
   1269a:	1e50      	subs	r0, r2, #1
   1269c:	4182      	sbcs	r2, r0
   1269e:	40e9      	lsrs	r1, r5
   126a0:	431a      	orrs	r2, r3
   126a2:	1aba      	subs	r2, r7, r2
   126a4:	1a61      	subs	r1, r4, r1
   126a6:	4297      	cmp	r7, r2
   126a8:	41a4      	sbcs	r4, r4
   126aa:	0017      	movs	r7, r2
   126ac:	4264      	negs	r4, r4
   126ae:	1b0c      	subs	r4, r1, r4
   126b0:	0223      	lsls	r3, r4, #8
   126b2:	d562      	bpl.n	1277a <__aeabi_dadd+0x17a>
   126b4:	0264      	lsls	r4, r4, #9
   126b6:	0a65      	lsrs	r5, r4, #9
   126b8:	2d00      	cmp	r5, #0
   126ba:	d100      	bne.n	126be <__aeabi_dadd+0xbe>
   126bc:	e0df      	b.n	1287e <__aeabi_dadd+0x27e>
   126be:	0028      	movs	r0, r5
   126c0:	f001 fbe4 	bl	13e8c <__clzsi2>
   126c4:	0003      	movs	r3, r0
   126c6:	3b08      	subs	r3, #8
   126c8:	2b1f      	cmp	r3, #31
   126ca:	dd00      	ble.n	126ce <__aeabi_dadd+0xce>
   126cc:	e0d2      	b.n	12874 <__aeabi_dadd+0x274>
   126ce:	2220      	movs	r2, #32
   126d0:	003c      	movs	r4, r7
   126d2:	1ad2      	subs	r2, r2, r3
   126d4:	409d      	lsls	r5, r3
   126d6:	40d4      	lsrs	r4, r2
   126d8:	409f      	lsls	r7, r3
   126da:	4325      	orrs	r5, r4
   126dc:	429e      	cmp	r6, r3
   126de:	dd00      	ble.n	126e2 <__aeabi_dadd+0xe2>
   126e0:	e0c4      	b.n	1286c <__aeabi_dadd+0x26c>
   126e2:	1b9e      	subs	r6, r3, r6
   126e4:	1c73      	adds	r3, r6, #1
   126e6:	2b1f      	cmp	r3, #31
   126e8:	dd00      	ble.n	126ec <__aeabi_dadd+0xec>
   126ea:	e0f1      	b.n	128d0 <__aeabi_dadd+0x2d0>
   126ec:	2220      	movs	r2, #32
   126ee:	0038      	movs	r0, r7
   126f0:	0029      	movs	r1, r5
   126f2:	1ad2      	subs	r2, r2, r3
   126f4:	40d8      	lsrs	r0, r3
   126f6:	4091      	lsls	r1, r2
   126f8:	4097      	lsls	r7, r2
   126fa:	002c      	movs	r4, r5
   126fc:	4301      	orrs	r1, r0
   126fe:	1e78      	subs	r0, r7, #1
   12700:	4187      	sbcs	r7, r0
   12702:	40dc      	lsrs	r4, r3
   12704:	2600      	movs	r6, #0
   12706:	430f      	orrs	r7, r1
   12708:	077b      	lsls	r3, r7, #29
   1270a:	d009      	beq.n	12720 <__aeabi_dadd+0x120>
   1270c:	230f      	movs	r3, #15
   1270e:	403b      	ands	r3, r7
   12710:	2b04      	cmp	r3, #4
   12712:	d005      	beq.n	12720 <__aeabi_dadd+0x120>
   12714:	1d3b      	adds	r3, r7, #4
   12716:	42bb      	cmp	r3, r7
   12718:	41bf      	sbcs	r7, r7
   1271a:	427f      	negs	r7, r7
   1271c:	19e4      	adds	r4, r4, r7
   1271e:	001f      	movs	r7, r3
   12720:	0223      	lsls	r3, r4, #8
   12722:	d52c      	bpl.n	1277e <__aeabi_dadd+0x17e>
   12724:	4b96      	ldr	r3, [pc, #600]	; (12980 <__aeabi_dadd+0x380>)
   12726:	3601      	adds	r6, #1
   12728:	429e      	cmp	r6, r3
   1272a:	d100      	bne.n	1272e <__aeabi_dadd+0x12e>
   1272c:	e09a      	b.n	12864 <__aeabi_dadd+0x264>
   1272e:	4645      	mov	r5, r8
   12730:	4b94      	ldr	r3, [pc, #592]	; (12984 <__aeabi_dadd+0x384>)
   12732:	08ff      	lsrs	r7, r7, #3
   12734:	401c      	ands	r4, r3
   12736:	0760      	lsls	r0, r4, #29
   12738:	0576      	lsls	r6, r6, #21
   1273a:	0264      	lsls	r4, r4, #9
   1273c:	4307      	orrs	r7, r0
   1273e:	0b24      	lsrs	r4, r4, #12
   12740:	0d76      	lsrs	r6, r6, #21
   12742:	2100      	movs	r1, #0
   12744:	0324      	lsls	r4, r4, #12
   12746:	0b23      	lsrs	r3, r4, #12
   12748:	0d0c      	lsrs	r4, r1, #20
   1274a:	4a8f      	ldr	r2, [pc, #572]	; (12988 <__aeabi_dadd+0x388>)
   1274c:	0524      	lsls	r4, r4, #20
   1274e:	431c      	orrs	r4, r3
   12750:	4014      	ands	r4, r2
   12752:	0533      	lsls	r3, r6, #20
   12754:	4323      	orrs	r3, r4
   12756:	005b      	lsls	r3, r3, #1
   12758:	07ed      	lsls	r5, r5, #31
   1275a:	085b      	lsrs	r3, r3, #1
   1275c:	432b      	orrs	r3, r5
   1275e:	0038      	movs	r0, r7
   12760:	0019      	movs	r1, r3
   12762:	bc3c      	pop	{r2, r3, r4, r5}
   12764:	4690      	mov	r8, r2
   12766:	4699      	mov	r9, r3
   12768:	46a2      	mov	sl, r4
   1276a:	46ab      	mov	fp, r5
   1276c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1276e:	4664      	mov	r4, ip
   12770:	4304      	orrs	r4, r0
   12772:	d100      	bne.n	12776 <__aeabi_dadd+0x176>
   12774:	e211      	b.n	12b9a <__aeabi_dadd+0x59a>
   12776:	0004      	movs	r4, r0
   12778:	4667      	mov	r7, ip
   1277a:	077b      	lsls	r3, r7, #29
   1277c:	d1c6      	bne.n	1270c <__aeabi_dadd+0x10c>
   1277e:	4645      	mov	r5, r8
   12780:	0760      	lsls	r0, r4, #29
   12782:	08ff      	lsrs	r7, r7, #3
   12784:	4307      	orrs	r7, r0
   12786:	08e4      	lsrs	r4, r4, #3
   12788:	4b7d      	ldr	r3, [pc, #500]	; (12980 <__aeabi_dadd+0x380>)
   1278a:	429e      	cmp	r6, r3
   1278c:	d030      	beq.n	127f0 <__aeabi_dadd+0x1f0>
   1278e:	0324      	lsls	r4, r4, #12
   12790:	0576      	lsls	r6, r6, #21
   12792:	0b24      	lsrs	r4, r4, #12
   12794:	0d76      	lsrs	r6, r6, #21
   12796:	e7d4      	b.n	12742 <__aeabi_dadd+0x142>
   12798:	1a33      	subs	r3, r6, r0
   1279a:	469a      	mov	sl, r3
   1279c:	2b00      	cmp	r3, #0
   1279e:	dd78      	ble.n	12892 <__aeabi_dadd+0x292>
   127a0:	2800      	cmp	r0, #0
   127a2:	d031      	beq.n	12808 <__aeabi_dadd+0x208>
   127a4:	4876      	ldr	r0, [pc, #472]	; (12980 <__aeabi_dadd+0x380>)
   127a6:	4286      	cmp	r6, r0
   127a8:	d0ae      	beq.n	12708 <__aeabi_dadd+0x108>
   127aa:	2080      	movs	r0, #128	; 0x80
   127ac:	0400      	lsls	r0, r0, #16
   127ae:	4301      	orrs	r1, r0
   127b0:	4653      	mov	r3, sl
   127b2:	2b38      	cmp	r3, #56	; 0x38
   127b4:	dc00      	bgt.n	127b8 <__aeabi_dadd+0x1b8>
   127b6:	e0e9      	b.n	1298c <__aeabi_dadd+0x38c>
   127b8:	430a      	orrs	r2, r1
   127ba:	1e51      	subs	r1, r2, #1
   127bc:	418a      	sbcs	r2, r1
   127be:	2100      	movs	r1, #0
   127c0:	19d2      	adds	r2, r2, r7
   127c2:	42ba      	cmp	r2, r7
   127c4:	41bf      	sbcs	r7, r7
   127c6:	1909      	adds	r1, r1, r4
   127c8:	427c      	negs	r4, r7
   127ca:	0017      	movs	r7, r2
   127cc:	190c      	adds	r4, r1, r4
   127ce:	0223      	lsls	r3, r4, #8
   127d0:	d5d3      	bpl.n	1277a <__aeabi_dadd+0x17a>
   127d2:	4b6b      	ldr	r3, [pc, #428]	; (12980 <__aeabi_dadd+0x380>)
   127d4:	3601      	adds	r6, #1
   127d6:	429e      	cmp	r6, r3
   127d8:	d100      	bne.n	127dc <__aeabi_dadd+0x1dc>
   127da:	e13a      	b.n	12a52 <__aeabi_dadd+0x452>
   127dc:	2001      	movs	r0, #1
   127de:	4b69      	ldr	r3, [pc, #420]	; (12984 <__aeabi_dadd+0x384>)
   127e0:	401c      	ands	r4, r3
   127e2:	087b      	lsrs	r3, r7, #1
   127e4:	4007      	ands	r7, r0
   127e6:	431f      	orrs	r7, r3
   127e8:	07e0      	lsls	r0, r4, #31
   127ea:	4307      	orrs	r7, r0
   127ec:	0864      	lsrs	r4, r4, #1
   127ee:	e78b      	b.n	12708 <__aeabi_dadd+0x108>
   127f0:	0023      	movs	r3, r4
   127f2:	433b      	orrs	r3, r7
   127f4:	d100      	bne.n	127f8 <__aeabi_dadd+0x1f8>
   127f6:	e1cb      	b.n	12b90 <__aeabi_dadd+0x590>
   127f8:	2280      	movs	r2, #128	; 0x80
   127fa:	0312      	lsls	r2, r2, #12
   127fc:	4314      	orrs	r4, r2
   127fe:	0324      	lsls	r4, r4, #12
   12800:	0b24      	lsrs	r4, r4, #12
   12802:	e79e      	b.n	12742 <__aeabi_dadd+0x142>
   12804:	002e      	movs	r6, r5
   12806:	e77f      	b.n	12708 <__aeabi_dadd+0x108>
   12808:	0008      	movs	r0, r1
   1280a:	4310      	orrs	r0, r2
   1280c:	d100      	bne.n	12810 <__aeabi_dadd+0x210>
   1280e:	e0b4      	b.n	1297a <__aeabi_dadd+0x37a>
   12810:	1e58      	subs	r0, r3, #1
   12812:	2800      	cmp	r0, #0
   12814:	d000      	beq.n	12818 <__aeabi_dadd+0x218>
   12816:	e0de      	b.n	129d6 <__aeabi_dadd+0x3d6>
   12818:	18ba      	adds	r2, r7, r2
   1281a:	42ba      	cmp	r2, r7
   1281c:	419b      	sbcs	r3, r3
   1281e:	1864      	adds	r4, r4, r1
   12820:	425b      	negs	r3, r3
   12822:	18e4      	adds	r4, r4, r3
   12824:	0017      	movs	r7, r2
   12826:	2601      	movs	r6, #1
   12828:	0223      	lsls	r3, r4, #8
   1282a:	d5a6      	bpl.n	1277a <__aeabi_dadd+0x17a>
   1282c:	2602      	movs	r6, #2
   1282e:	e7d5      	b.n	127dc <__aeabi_dadd+0x1dc>
   12830:	2d00      	cmp	r5, #0
   12832:	d16e      	bne.n	12912 <__aeabi_dadd+0x312>
   12834:	1c70      	adds	r0, r6, #1
   12836:	0540      	lsls	r0, r0, #21
   12838:	0d40      	lsrs	r0, r0, #21
   1283a:	2801      	cmp	r0, #1
   1283c:	dc00      	bgt.n	12840 <__aeabi_dadd+0x240>
   1283e:	e0f9      	b.n	12a34 <__aeabi_dadd+0x434>
   12840:	1ab8      	subs	r0, r7, r2
   12842:	4684      	mov	ip, r0
   12844:	4287      	cmp	r7, r0
   12846:	4180      	sbcs	r0, r0
   12848:	1ae5      	subs	r5, r4, r3
   1284a:	4240      	negs	r0, r0
   1284c:	1a2d      	subs	r5, r5, r0
   1284e:	0228      	lsls	r0, r5, #8
   12850:	d400      	bmi.n	12854 <__aeabi_dadd+0x254>
   12852:	e089      	b.n	12968 <__aeabi_dadd+0x368>
   12854:	1bd7      	subs	r7, r2, r7
   12856:	42ba      	cmp	r2, r7
   12858:	4192      	sbcs	r2, r2
   1285a:	1b1c      	subs	r4, r3, r4
   1285c:	4252      	negs	r2, r2
   1285e:	1aa5      	subs	r5, r4, r2
   12860:	46d8      	mov	r8, fp
   12862:	e729      	b.n	126b8 <__aeabi_dadd+0xb8>
   12864:	4645      	mov	r5, r8
   12866:	2400      	movs	r4, #0
   12868:	2700      	movs	r7, #0
   1286a:	e76a      	b.n	12742 <__aeabi_dadd+0x142>
   1286c:	4c45      	ldr	r4, [pc, #276]	; (12984 <__aeabi_dadd+0x384>)
   1286e:	1af6      	subs	r6, r6, r3
   12870:	402c      	ands	r4, r5
   12872:	e749      	b.n	12708 <__aeabi_dadd+0x108>
   12874:	003d      	movs	r5, r7
   12876:	3828      	subs	r0, #40	; 0x28
   12878:	4085      	lsls	r5, r0
   1287a:	2700      	movs	r7, #0
   1287c:	e72e      	b.n	126dc <__aeabi_dadd+0xdc>
   1287e:	0038      	movs	r0, r7
   12880:	f001 fb04 	bl	13e8c <__clzsi2>
   12884:	3020      	adds	r0, #32
   12886:	e71d      	b.n	126c4 <__aeabi_dadd+0xc4>
   12888:	430a      	orrs	r2, r1
   1288a:	1e51      	subs	r1, r2, #1
   1288c:	418a      	sbcs	r2, r1
   1288e:	2100      	movs	r1, #0
   12890:	e707      	b.n	126a2 <__aeabi_dadd+0xa2>
   12892:	2b00      	cmp	r3, #0
   12894:	d000      	beq.n	12898 <__aeabi_dadd+0x298>
   12896:	e0f3      	b.n	12a80 <__aeabi_dadd+0x480>
   12898:	1c70      	adds	r0, r6, #1
   1289a:	0543      	lsls	r3, r0, #21
   1289c:	0d5b      	lsrs	r3, r3, #21
   1289e:	2b01      	cmp	r3, #1
   128a0:	dc00      	bgt.n	128a4 <__aeabi_dadd+0x2a4>
   128a2:	e0ad      	b.n	12a00 <__aeabi_dadd+0x400>
   128a4:	4b36      	ldr	r3, [pc, #216]	; (12980 <__aeabi_dadd+0x380>)
   128a6:	4298      	cmp	r0, r3
   128a8:	d100      	bne.n	128ac <__aeabi_dadd+0x2ac>
   128aa:	e0d1      	b.n	12a50 <__aeabi_dadd+0x450>
   128ac:	18ba      	adds	r2, r7, r2
   128ae:	42ba      	cmp	r2, r7
   128b0:	41bf      	sbcs	r7, r7
   128b2:	1864      	adds	r4, r4, r1
   128b4:	427f      	negs	r7, r7
   128b6:	19e4      	adds	r4, r4, r7
   128b8:	07e7      	lsls	r7, r4, #31
   128ba:	0852      	lsrs	r2, r2, #1
   128bc:	4317      	orrs	r7, r2
   128be:	0864      	lsrs	r4, r4, #1
   128c0:	0006      	movs	r6, r0
   128c2:	e721      	b.n	12708 <__aeabi_dadd+0x108>
   128c4:	482e      	ldr	r0, [pc, #184]	; (12980 <__aeabi_dadd+0x380>)
   128c6:	4285      	cmp	r5, r0
   128c8:	d100      	bne.n	128cc <__aeabi_dadd+0x2cc>
   128ca:	e093      	b.n	129f4 <__aeabi_dadd+0x3f4>
   128cc:	001d      	movs	r5, r3
   128ce:	e6d0      	b.n	12672 <__aeabi_dadd+0x72>
   128d0:	0029      	movs	r1, r5
   128d2:	3e1f      	subs	r6, #31
   128d4:	40f1      	lsrs	r1, r6
   128d6:	2b20      	cmp	r3, #32
   128d8:	d100      	bne.n	128dc <__aeabi_dadd+0x2dc>
   128da:	e08d      	b.n	129f8 <__aeabi_dadd+0x3f8>
   128dc:	2240      	movs	r2, #64	; 0x40
   128de:	1ad3      	subs	r3, r2, r3
   128e0:	409d      	lsls	r5, r3
   128e2:	432f      	orrs	r7, r5
   128e4:	1e7d      	subs	r5, r7, #1
   128e6:	41af      	sbcs	r7, r5
   128e8:	2400      	movs	r4, #0
   128ea:	430f      	orrs	r7, r1
   128ec:	2600      	movs	r6, #0
   128ee:	e744      	b.n	1277a <__aeabi_dadd+0x17a>
   128f0:	002b      	movs	r3, r5
   128f2:	0008      	movs	r0, r1
   128f4:	3b20      	subs	r3, #32
   128f6:	40d8      	lsrs	r0, r3
   128f8:	0003      	movs	r3, r0
   128fa:	2d20      	cmp	r5, #32
   128fc:	d100      	bne.n	12900 <__aeabi_dadd+0x300>
   128fe:	e07d      	b.n	129fc <__aeabi_dadd+0x3fc>
   12900:	2040      	movs	r0, #64	; 0x40
   12902:	1b45      	subs	r5, r0, r5
   12904:	40a9      	lsls	r1, r5
   12906:	430a      	orrs	r2, r1
   12908:	1e51      	subs	r1, r2, #1
   1290a:	418a      	sbcs	r2, r1
   1290c:	2100      	movs	r1, #0
   1290e:	431a      	orrs	r2, r3
   12910:	e6c7      	b.n	126a2 <__aeabi_dadd+0xa2>
   12912:	2e00      	cmp	r6, #0
   12914:	d050      	beq.n	129b8 <__aeabi_dadd+0x3b8>
   12916:	4e1a      	ldr	r6, [pc, #104]	; (12980 <__aeabi_dadd+0x380>)
   12918:	42b0      	cmp	r0, r6
   1291a:	d057      	beq.n	129cc <__aeabi_dadd+0x3cc>
   1291c:	2680      	movs	r6, #128	; 0x80
   1291e:	426b      	negs	r3, r5
   12920:	4699      	mov	r9, r3
   12922:	0436      	lsls	r6, r6, #16
   12924:	4334      	orrs	r4, r6
   12926:	464b      	mov	r3, r9
   12928:	2b38      	cmp	r3, #56	; 0x38
   1292a:	dd00      	ble.n	1292e <__aeabi_dadd+0x32e>
   1292c:	e0d6      	b.n	12adc <__aeabi_dadd+0x4dc>
   1292e:	2b1f      	cmp	r3, #31
   12930:	dd00      	ble.n	12934 <__aeabi_dadd+0x334>
   12932:	e135      	b.n	12ba0 <__aeabi_dadd+0x5a0>
   12934:	2620      	movs	r6, #32
   12936:	1af5      	subs	r5, r6, r3
   12938:	0026      	movs	r6, r4
   1293a:	40ae      	lsls	r6, r5
   1293c:	46b2      	mov	sl, r6
   1293e:	003e      	movs	r6, r7
   12940:	40de      	lsrs	r6, r3
   12942:	46ac      	mov	ip, r5
   12944:	0035      	movs	r5, r6
   12946:	4656      	mov	r6, sl
   12948:	432e      	orrs	r6, r5
   1294a:	4665      	mov	r5, ip
   1294c:	40af      	lsls	r7, r5
   1294e:	1e7d      	subs	r5, r7, #1
   12950:	41af      	sbcs	r7, r5
   12952:	40dc      	lsrs	r4, r3
   12954:	4337      	orrs	r7, r6
   12956:	1bd7      	subs	r7, r2, r7
   12958:	42ba      	cmp	r2, r7
   1295a:	4192      	sbcs	r2, r2
   1295c:	1b0c      	subs	r4, r1, r4
   1295e:	4252      	negs	r2, r2
   12960:	1aa4      	subs	r4, r4, r2
   12962:	0006      	movs	r6, r0
   12964:	46d8      	mov	r8, fp
   12966:	e6a3      	b.n	126b0 <__aeabi_dadd+0xb0>
   12968:	4664      	mov	r4, ip
   1296a:	4667      	mov	r7, ip
   1296c:	432c      	orrs	r4, r5
   1296e:	d000      	beq.n	12972 <__aeabi_dadd+0x372>
   12970:	e6a2      	b.n	126b8 <__aeabi_dadd+0xb8>
   12972:	2500      	movs	r5, #0
   12974:	2600      	movs	r6, #0
   12976:	2700      	movs	r7, #0
   12978:	e706      	b.n	12788 <__aeabi_dadd+0x188>
   1297a:	001e      	movs	r6, r3
   1297c:	e6c4      	b.n	12708 <__aeabi_dadd+0x108>
   1297e:	46c0      	nop			; (mov r8, r8)
   12980:	000007ff 	.word	0x000007ff
   12984:	ff7fffff 	.word	0xff7fffff
   12988:	800fffff 	.word	0x800fffff
   1298c:	2b1f      	cmp	r3, #31
   1298e:	dc63      	bgt.n	12a58 <__aeabi_dadd+0x458>
   12990:	2020      	movs	r0, #32
   12992:	1ac3      	subs	r3, r0, r3
   12994:	0008      	movs	r0, r1
   12996:	4098      	lsls	r0, r3
   12998:	469c      	mov	ip, r3
   1299a:	4683      	mov	fp, r0
   1299c:	4653      	mov	r3, sl
   1299e:	0010      	movs	r0, r2
   129a0:	40d8      	lsrs	r0, r3
   129a2:	0003      	movs	r3, r0
   129a4:	4658      	mov	r0, fp
   129a6:	4318      	orrs	r0, r3
   129a8:	4663      	mov	r3, ip
   129aa:	409a      	lsls	r2, r3
   129ac:	1e53      	subs	r3, r2, #1
   129ae:	419a      	sbcs	r2, r3
   129b0:	4653      	mov	r3, sl
   129b2:	4302      	orrs	r2, r0
   129b4:	40d9      	lsrs	r1, r3
   129b6:	e703      	b.n	127c0 <__aeabi_dadd+0x1c0>
   129b8:	0026      	movs	r6, r4
   129ba:	433e      	orrs	r6, r7
   129bc:	d006      	beq.n	129cc <__aeabi_dadd+0x3cc>
   129be:	43eb      	mvns	r3, r5
   129c0:	4699      	mov	r9, r3
   129c2:	2b00      	cmp	r3, #0
   129c4:	d0c7      	beq.n	12956 <__aeabi_dadd+0x356>
   129c6:	4e94      	ldr	r6, [pc, #592]	; (12c18 <__aeabi_dadd+0x618>)
   129c8:	42b0      	cmp	r0, r6
   129ca:	d1ac      	bne.n	12926 <__aeabi_dadd+0x326>
   129cc:	000c      	movs	r4, r1
   129ce:	0017      	movs	r7, r2
   129d0:	0006      	movs	r6, r0
   129d2:	46d8      	mov	r8, fp
   129d4:	e698      	b.n	12708 <__aeabi_dadd+0x108>
   129d6:	4b90      	ldr	r3, [pc, #576]	; (12c18 <__aeabi_dadd+0x618>)
   129d8:	459a      	cmp	sl, r3
   129da:	d00b      	beq.n	129f4 <__aeabi_dadd+0x3f4>
   129dc:	4682      	mov	sl, r0
   129de:	e6e7      	b.n	127b0 <__aeabi_dadd+0x1b0>
   129e0:	2800      	cmp	r0, #0
   129e2:	d000      	beq.n	129e6 <__aeabi_dadd+0x3e6>
   129e4:	e09e      	b.n	12b24 <__aeabi_dadd+0x524>
   129e6:	0018      	movs	r0, r3
   129e8:	4310      	orrs	r0, r2
   129ea:	d100      	bne.n	129ee <__aeabi_dadd+0x3ee>
   129ec:	e0e9      	b.n	12bc2 <__aeabi_dadd+0x5c2>
   129ee:	001c      	movs	r4, r3
   129f0:	0017      	movs	r7, r2
   129f2:	46d8      	mov	r8, fp
   129f4:	4e88      	ldr	r6, [pc, #544]	; (12c18 <__aeabi_dadd+0x618>)
   129f6:	e687      	b.n	12708 <__aeabi_dadd+0x108>
   129f8:	2500      	movs	r5, #0
   129fa:	e772      	b.n	128e2 <__aeabi_dadd+0x2e2>
   129fc:	2100      	movs	r1, #0
   129fe:	e782      	b.n	12906 <__aeabi_dadd+0x306>
   12a00:	0023      	movs	r3, r4
   12a02:	433b      	orrs	r3, r7
   12a04:	2e00      	cmp	r6, #0
   12a06:	d000      	beq.n	12a0a <__aeabi_dadd+0x40a>
   12a08:	e0ab      	b.n	12b62 <__aeabi_dadd+0x562>
   12a0a:	2b00      	cmp	r3, #0
   12a0c:	d100      	bne.n	12a10 <__aeabi_dadd+0x410>
   12a0e:	e0e7      	b.n	12be0 <__aeabi_dadd+0x5e0>
   12a10:	000b      	movs	r3, r1
   12a12:	4313      	orrs	r3, r2
   12a14:	d100      	bne.n	12a18 <__aeabi_dadd+0x418>
   12a16:	e677      	b.n	12708 <__aeabi_dadd+0x108>
   12a18:	18ba      	adds	r2, r7, r2
   12a1a:	42ba      	cmp	r2, r7
   12a1c:	41bf      	sbcs	r7, r7
   12a1e:	1864      	adds	r4, r4, r1
   12a20:	427f      	negs	r7, r7
   12a22:	19e4      	adds	r4, r4, r7
   12a24:	0223      	lsls	r3, r4, #8
   12a26:	d400      	bmi.n	12a2a <__aeabi_dadd+0x42a>
   12a28:	e0f2      	b.n	12c10 <__aeabi_dadd+0x610>
   12a2a:	4b7c      	ldr	r3, [pc, #496]	; (12c1c <__aeabi_dadd+0x61c>)
   12a2c:	0017      	movs	r7, r2
   12a2e:	401c      	ands	r4, r3
   12a30:	0006      	movs	r6, r0
   12a32:	e669      	b.n	12708 <__aeabi_dadd+0x108>
   12a34:	0020      	movs	r0, r4
   12a36:	4338      	orrs	r0, r7
   12a38:	2e00      	cmp	r6, #0
   12a3a:	d1d1      	bne.n	129e0 <__aeabi_dadd+0x3e0>
   12a3c:	2800      	cmp	r0, #0
   12a3e:	d15b      	bne.n	12af8 <__aeabi_dadd+0x4f8>
   12a40:	001c      	movs	r4, r3
   12a42:	4314      	orrs	r4, r2
   12a44:	d100      	bne.n	12a48 <__aeabi_dadd+0x448>
   12a46:	e0a8      	b.n	12b9a <__aeabi_dadd+0x59a>
   12a48:	001c      	movs	r4, r3
   12a4a:	0017      	movs	r7, r2
   12a4c:	46d8      	mov	r8, fp
   12a4e:	e65b      	b.n	12708 <__aeabi_dadd+0x108>
   12a50:	0006      	movs	r6, r0
   12a52:	2400      	movs	r4, #0
   12a54:	2700      	movs	r7, #0
   12a56:	e697      	b.n	12788 <__aeabi_dadd+0x188>
   12a58:	4650      	mov	r0, sl
   12a5a:	000b      	movs	r3, r1
   12a5c:	3820      	subs	r0, #32
   12a5e:	40c3      	lsrs	r3, r0
   12a60:	4699      	mov	r9, r3
   12a62:	4653      	mov	r3, sl
   12a64:	2b20      	cmp	r3, #32
   12a66:	d100      	bne.n	12a6a <__aeabi_dadd+0x46a>
   12a68:	e095      	b.n	12b96 <__aeabi_dadd+0x596>
   12a6a:	2340      	movs	r3, #64	; 0x40
   12a6c:	4650      	mov	r0, sl
   12a6e:	1a1b      	subs	r3, r3, r0
   12a70:	4099      	lsls	r1, r3
   12a72:	430a      	orrs	r2, r1
   12a74:	1e51      	subs	r1, r2, #1
   12a76:	418a      	sbcs	r2, r1
   12a78:	464b      	mov	r3, r9
   12a7a:	2100      	movs	r1, #0
   12a7c:	431a      	orrs	r2, r3
   12a7e:	e69f      	b.n	127c0 <__aeabi_dadd+0x1c0>
   12a80:	2e00      	cmp	r6, #0
   12a82:	d130      	bne.n	12ae6 <__aeabi_dadd+0x4e6>
   12a84:	0026      	movs	r6, r4
   12a86:	433e      	orrs	r6, r7
   12a88:	d067      	beq.n	12b5a <__aeabi_dadd+0x55a>
   12a8a:	43db      	mvns	r3, r3
   12a8c:	469a      	mov	sl, r3
   12a8e:	2b00      	cmp	r3, #0
   12a90:	d01c      	beq.n	12acc <__aeabi_dadd+0x4cc>
   12a92:	4e61      	ldr	r6, [pc, #388]	; (12c18 <__aeabi_dadd+0x618>)
   12a94:	42b0      	cmp	r0, r6
   12a96:	d060      	beq.n	12b5a <__aeabi_dadd+0x55a>
   12a98:	4653      	mov	r3, sl
   12a9a:	2b38      	cmp	r3, #56	; 0x38
   12a9c:	dd00      	ble.n	12aa0 <__aeabi_dadd+0x4a0>
   12a9e:	e096      	b.n	12bce <__aeabi_dadd+0x5ce>
   12aa0:	2b1f      	cmp	r3, #31
   12aa2:	dd00      	ble.n	12aa6 <__aeabi_dadd+0x4a6>
   12aa4:	e09f      	b.n	12be6 <__aeabi_dadd+0x5e6>
   12aa6:	2620      	movs	r6, #32
   12aa8:	1af3      	subs	r3, r6, r3
   12aaa:	0026      	movs	r6, r4
   12aac:	409e      	lsls	r6, r3
   12aae:	469c      	mov	ip, r3
   12ab0:	46b3      	mov	fp, r6
   12ab2:	4653      	mov	r3, sl
   12ab4:	003e      	movs	r6, r7
   12ab6:	40de      	lsrs	r6, r3
   12ab8:	0033      	movs	r3, r6
   12aba:	465e      	mov	r6, fp
   12abc:	431e      	orrs	r6, r3
   12abe:	4663      	mov	r3, ip
   12ac0:	409f      	lsls	r7, r3
   12ac2:	1e7b      	subs	r3, r7, #1
   12ac4:	419f      	sbcs	r7, r3
   12ac6:	4653      	mov	r3, sl
   12ac8:	40dc      	lsrs	r4, r3
   12aca:	4337      	orrs	r7, r6
   12acc:	18bf      	adds	r7, r7, r2
   12ace:	4297      	cmp	r7, r2
   12ad0:	4192      	sbcs	r2, r2
   12ad2:	1864      	adds	r4, r4, r1
   12ad4:	4252      	negs	r2, r2
   12ad6:	18a4      	adds	r4, r4, r2
   12ad8:	0006      	movs	r6, r0
   12ada:	e678      	b.n	127ce <__aeabi_dadd+0x1ce>
   12adc:	4327      	orrs	r7, r4
   12ade:	1e7c      	subs	r4, r7, #1
   12ae0:	41a7      	sbcs	r7, r4
   12ae2:	2400      	movs	r4, #0
   12ae4:	e737      	b.n	12956 <__aeabi_dadd+0x356>
   12ae6:	4e4c      	ldr	r6, [pc, #304]	; (12c18 <__aeabi_dadd+0x618>)
   12ae8:	42b0      	cmp	r0, r6
   12aea:	d036      	beq.n	12b5a <__aeabi_dadd+0x55a>
   12aec:	2680      	movs	r6, #128	; 0x80
   12aee:	425b      	negs	r3, r3
   12af0:	0436      	lsls	r6, r6, #16
   12af2:	469a      	mov	sl, r3
   12af4:	4334      	orrs	r4, r6
   12af6:	e7cf      	b.n	12a98 <__aeabi_dadd+0x498>
   12af8:	0018      	movs	r0, r3
   12afa:	4310      	orrs	r0, r2
   12afc:	d100      	bne.n	12b00 <__aeabi_dadd+0x500>
   12afe:	e603      	b.n	12708 <__aeabi_dadd+0x108>
   12b00:	1ab8      	subs	r0, r7, r2
   12b02:	4684      	mov	ip, r0
   12b04:	4567      	cmp	r7, ip
   12b06:	41ad      	sbcs	r5, r5
   12b08:	1ae0      	subs	r0, r4, r3
   12b0a:	426d      	negs	r5, r5
   12b0c:	1b40      	subs	r0, r0, r5
   12b0e:	0205      	lsls	r5, r0, #8
   12b10:	d400      	bmi.n	12b14 <__aeabi_dadd+0x514>
   12b12:	e62c      	b.n	1276e <__aeabi_dadd+0x16e>
   12b14:	1bd7      	subs	r7, r2, r7
   12b16:	42ba      	cmp	r2, r7
   12b18:	4192      	sbcs	r2, r2
   12b1a:	1b1c      	subs	r4, r3, r4
   12b1c:	4252      	negs	r2, r2
   12b1e:	1aa4      	subs	r4, r4, r2
   12b20:	46d8      	mov	r8, fp
   12b22:	e5f1      	b.n	12708 <__aeabi_dadd+0x108>
   12b24:	0018      	movs	r0, r3
   12b26:	4310      	orrs	r0, r2
   12b28:	d100      	bne.n	12b2c <__aeabi_dadd+0x52c>
   12b2a:	e763      	b.n	129f4 <__aeabi_dadd+0x3f4>
   12b2c:	08f8      	lsrs	r0, r7, #3
   12b2e:	0767      	lsls	r7, r4, #29
   12b30:	4307      	orrs	r7, r0
   12b32:	2080      	movs	r0, #128	; 0x80
   12b34:	08e4      	lsrs	r4, r4, #3
   12b36:	0300      	lsls	r0, r0, #12
   12b38:	4204      	tst	r4, r0
   12b3a:	d008      	beq.n	12b4e <__aeabi_dadd+0x54e>
   12b3c:	08dd      	lsrs	r5, r3, #3
   12b3e:	4205      	tst	r5, r0
   12b40:	d105      	bne.n	12b4e <__aeabi_dadd+0x54e>
   12b42:	08d2      	lsrs	r2, r2, #3
   12b44:	0759      	lsls	r1, r3, #29
   12b46:	4311      	orrs	r1, r2
   12b48:	000f      	movs	r7, r1
   12b4a:	002c      	movs	r4, r5
   12b4c:	46d8      	mov	r8, fp
   12b4e:	0f7b      	lsrs	r3, r7, #29
   12b50:	00e4      	lsls	r4, r4, #3
   12b52:	431c      	orrs	r4, r3
   12b54:	00ff      	lsls	r7, r7, #3
   12b56:	4e30      	ldr	r6, [pc, #192]	; (12c18 <__aeabi_dadd+0x618>)
   12b58:	e5d6      	b.n	12708 <__aeabi_dadd+0x108>
   12b5a:	000c      	movs	r4, r1
   12b5c:	0017      	movs	r7, r2
   12b5e:	0006      	movs	r6, r0
   12b60:	e5d2      	b.n	12708 <__aeabi_dadd+0x108>
   12b62:	2b00      	cmp	r3, #0
   12b64:	d038      	beq.n	12bd8 <__aeabi_dadd+0x5d8>
   12b66:	000b      	movs	r3, r1
   12b68:	4313      	orrs	r3, r2
   12b6a:	d100      	bne.n	12b6e <__aeabi_dadd+0x56e>
   12b6c:	e742      	b.n	129f4 <__aeabi_dadd+0x3f4>
   12b6e:	08f8      	lsrs	r0, r7, #3
   12b70:	0767      	lsls	r7, r4, #29
   12b72:	4307      	orrs	r7, r0
   12b74:	2080      	movs	r0, #128	; 0x80
   12b76:	08e4      	lsrs	r4, r4, #3
   12b78:	0300      	lsls	r0, r0, #12
   12b7a:	4204      	tst	r4, r0
   12b7c:	d0e7      	beq.n	12b4e <__aeabi_dadd+0x54e>
   12b7e:	08cb      	lsrs	r3, r1, #3
   12b80:	4203      	tst	r3, r0
   12b82:	d1e4      	bne.n	12b4e <__aeabi_dadd+0x54e>
   12b84:	08d2      	lsrs	r2, r2, #3
   12b86:	0749      	lsls	r1, r1, #29
   12b88:	4311      	orrs	r1, r2
   12b8a:	000f      	movs	r7, r1
   12b8c:	001c      	movs	r4, r3
   12b8e:	e7de      	b.n	12b4e <__aeabi_dadd+0x54e>
   12b90:	2700      	movs	r7, #0
   12b92:	2400      	movs	r4, #0
   12b94:	e5d5      	b.n	12742 <__aeabi_dadd+0x142>
   12b96:	2100      	movs	r1, #0
   12b98:	e76b      	b.n	12a72 <__aeabi_dadd+0x472>
   12b9a:	2500      	movs	r5, #0
   12b9c:	2700      	movs	r7, #0
   12b9e:	e5f3      	b.n	12788 <__aeabi_dadd+0x188>
   12ba0:	464e      	mov	r6, r9
   12ba2:	0025      	movs	r5, r4
   12ba4:	3e20      	subs	r6, #32
   12ba6:	40f5      	lsrs	r5, r6
   12ba8:	464b      	mov	r3, r9
   12baa:	002e      	movs	r6, r5
   12bac:	2b20      	cmp	r3, #32
   12bae:	d02d      	beq.n	12c0c <__aeabi_dadd+0x60c>
   12bb0:	2540      	movs	r5, #64	; 0x40
   12bb2:	1aed      	subs	r5, r5, r3
   12bb4:	40ac      	lsls	r4, r5
   12bb6:	4327      	orrs	r7, r4
   12bb8:	1e7c      	subs	r4, r7, #1
   12bba:	41a7      	sbcs	r7, r4
   12bbc:	2400      	movs	r4, #0
   12bbe:	4337      	orrs	r7, r6
   12bc0:	e6c9      	b.n	12956 <__aeabi_dadd+0x356>
   12bc2:	2480      	movs	r4, #128	; 0x80
   12bc4:	2500      	movs	r5, #0
   12bc6:	0324      	lsls	r4, r4, #12
   12bc8:	4e13      	ldr	r6, [pc, #76]	; (12c18 <__aeabi_dadd+0x618>)
   12bca:	2700      	movs	r7, #0
   12bcc:	e5dc      	b.n	12788 <__aeabi_dadd+0x188>
   12bce:	4327      	orrs	r7, r4
   12bd0:	1e7c      	subs	r4, r7, #1
   12bd2:	41a7      	sbcs	r7, r4
   12bd4:	2400      	movs	r4, #0
   12bd6:	e779      	b.n	12acc <__aeabi_dadd+0x4cc>
   12bd8:	000c      	movs	r4, r1
   12bda:	0017      	movs	r7, r2
   12bdc:	4e0e      	ldr	r6, [pc, #56]	; (12c18 <__aeabi_dadd+0x618>)
   12bde:	e593      	b.n	12708 <__aeabi_dadd+0x108>
   12be0:	000c      	movs	r4, r1
   12be2:	0017      	movs	r7, r2
   12be4:	e590      	b.n	12708 <__aeabi_dadd+0x108>
   12be6:	4656      	mov	r6, sl
   12be8:	0023      	movs	r3, r4
   12bea:	3e20      	subs	r6, #32
   12bec:	40f3      	lsrs	r3, r6
   12bee:	4699      	mov	r9, r3
   12bf0:	4653      	mov	r3, sl
   12bf2:	2b20      	cmp	r3, #32
   12bf4:	d00e      	beq.n	12c14 <__aeabi_dadd+0x614>
   12bf6:	2340      	movs	r3, #64	; 0x40
   12bf8:	4656      	mov	r6, sl
   12bfa:	1b9b      	subs	r3, r3, r6
   12bfc:	409c      	lsls	r4, r3
   12bfe:	4327      	orrs	r7, r4
   12c00:	1e7c      	subs	r4, r7, #1
   12c02:	41a7      	sbcs	r7, r4
   12c04:	464b      	mov	r3, r9
   12c06:	2400      	movs	r4, #0
   12c08:	431f      	orrs	r7, r3
   12c0a:	e75f      	b.n	12acc <__aeabi_dadd+0x4cc>
   12c0c:	2400      	movs	r4, #0
   12c0e:	e7d2      	b.n	12bb6 <__aeabi_dadd+0x5b6>
   12c10:	0017      	movs	r7, r2
   12c12:	e5b2      	b.n	1277a <__aeabi_dadd+0x17a>
   12c14:	2400      	movs	r4, #0
   12c16:	e7f2      	b.n	12bfe <__aeabi_dadd+0x5fe>
   12c18:	000007ff 	.word	0x000007ff
   12c1c:	ff7fffff 	.word	0xff7fffff

00012c20 <__aeabi_ddiv>:
   12c20:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c22:	4657      	mov	r7, sl
   12c24:	4645      	mov	r5, r8
   12c26:	46de      	mov	lr, fp
   12c28:	464e      	mov	r6, r9
   12c2a:	b5e0      	push	{r5, r6, r7, lr}
   12c2c:	004c      	lsls	r4, r1, #1
   12c2e:	030e      	lsls	r6, r1, #12
   12c30:	b087      	sub	sp, #28
   12c32:	4683      	mov	fp, r0
   12c34:	4692      	mov	sl, r2
   12c36:	001d      	movs	r5, r3
   12c38:	4680      	mov	r8, r0
   12c3a:	0b36      	lsrs	r6, r6, #12
   12c3c:	0d64      	lsrs	r4, r4, #21
   12c3e:	0fcf      	lsrs	r7, r1, #31
   12c40:	2c00      	cmp	r4, #0
   12c42:	d04f      	beq.n	12ce4 <__aeabi_ddiv+0xc4>
   12c44:	4b6f      	ldr	r3, [pc, #444]	; (12e04 <__aeabi_ddiv+0x1e4>)
   12c46:	429c      	cmp	r4, r3
   12c48:	d035      	beq.n	12cb6 <__aeabi_ddiv+0x96>
   12c4a:	2380      	movs	r3, #128	; 0x80
   12c4c:	0f42      	lsrs	r2, r0, #29
   12c4e:	041b      	lsls	r3, r3, #16
   12c50:	00f6      	lsls	r6, r6, #3
   12c52:	4313      	orrs	r3, r2
   12c54:	4333      	orrs	r3, r6
   12c56:	4699      	mov	r9, r3
   12c58:	00c3      	lsls	r3, r0, #3
   12c5a:	4698      	mov	r8, r3
   12c5c:	4b6a      	ldr	r3, [pc, #424]	; (12e08 <__aeabi_ddiv+0x1e8>)
   12c5e:	2600      	movs	r6, #0
   12c60:	469c      	mov	ip, r3
   12c62:	2300      	movs	r3, #0
   12c64:	4464      	add	r4, ip
   12c66:	9303      	str	r3, [sp, #12]
   12c68:	032b      	lsls	r3, r5, #12
   12c6a:	0b1b      	lsrs	r3, r3, #12
   12c6c:	469b      	mov	fp, r3
   12c6e:	006b      	lsls	r3, r5, #1
   12c70:	0fed      	lsrs	r5, r5, #31
   12c72:	4650      	mov	r0, sl
   12c74:	0d5b      	lsrs	r3, r3, #21
   12c76:	9501      	str	r5, [sp, #4]
   12c78:	d05e      	beq.n	12d38 <__aeabi_ddiv+0x118>
   12c7a:	4a62      	ldr	r2, [pc, #392]	; (12e04 <__aeabi_ddiv+0x1e4>)
   12c7c:	4293      	cmp	r3, r2
   12c7e:	d053      	beq.n	12d28 <__aeabi_ddiv+0x108>
   12c80:	465a      	mov	r2, fp
   12c82:	00d1      	lsls	r1, r2, #3
   12c84:	2280      	movs	r2, #128	; 0x80
   12c86:	0f40      	lsrs	r0, r0, #29
   12c88:	0412      	lsls	r2, r2, #16
   12c8a:	4302      	orrs	r2, r0
   12c8c:	430a      	orrs	r2, r1
   12c8e:	4693      	mov	fp, r2
   12c90:	4652      	mov	r2, sl
   12c92:	00d1      	lsls	r1, r2, #3
   12c94:	4a5c      	ldr	r2, [pc, #368]	; (12e08 <__aeabi_ddiv+0x1e8>)
   12c96:	4694      	mov	ip, r2
   12c98:	2200      	movs	r2, #0
   12c9a:	4463      	add	r3, ip
   12c9c:	0038      	movs	r0, r7
   12c9e:	4068      	eors	r0, r5
   12ca0:	4684      	mov	ip, r0
   12ca2:	9002      	str	r0, [sp, #8]
   12ca4:	1ae4      	subs	r4, r4, r3
   12ca6:	4316      	orrs	r6, r2
   12ca8:	2e0f      	cmp	r6, #15
   12caa:	d900      	bls.n	12cae <__aeabi_ddiv+0x8e>
   12cac:	e0b4      	b.n	12e18 <__aeabi_ddiv+0x1f8>
   12cae:	4b57      	ldr	r3, [pc, #348]	; (12e0c <__aeabi_ddiv+0x1ec>)
   12cb0:	00b6      	lsls	r6, r6, #2
   12cb2:	599b      	ldr	r3, [r3, r6]
   12cb4:	469f      	mov	pc, r3
   12cb6:	0003      	movs	r3, r0
   12cb8:	4333      	orrs	r3, r6
   12cba:	4699      	mov	r9, r3
   12cbc:	d16c      	bne.n	12d98 <__aeabi_ddiv+0x178>
   12cbe:	2300      	movs	r3, #0
   12cc0:	4698      	mov	r8, r3
   12cc2:	3302      	adds	r3, #2
   12cc4:	2608      	movs	r6, #8
   12cc6:	9303      	str	r3, [sp, #12]
   12cc8:	e7ce      	b.n	12c68 <__aeabi_ddiv+0x48>
   12cca:	46cb      	mov	fp, r9
   12ccc:	4641      	mov	r1, r8
   12cce:	9a03      	ldr	r2, [sp, #12]
   12cd0:	9701      	str	r7, [sp, #4]
   12cd2:	2a02      	cmp	r2, #2
   12cd4:	d165      	bne.n	12da2 <__aeabi_ddiv+0x182>
   12cd6:	9b01      	ldr	r3, [sp, #4]
   12cd8:	4c4a      	ldr	r4, [pc, #296]	; (12e04 <__aeabi_ddiv+0x1e4>)
   12cda:	469c      	mov	ip, r3
   12cdc:	2300      	movs	r3, #0
   12cde:	2200      	movs	r2, #0
   12ce0:	4698      	mov	r8, r3
   12ce2:	e06b      	b.n	12dbc <__aeabi_ddiv+0x19c>
   12ce4:	0003      	movs	r3, r0
   12ce6:	4333      	orrs	r3, r6
   12ce8:	4699      	mov	r9, r3
   12cea:	d04e      	beq.n	12d8a <__aeabi_ddiv+0x16a>
   12cec:	2e00      	cmp	r6, #0
   12cee:	d100      	bne.n	12cf2 <__aeabi_ddiv+0xd2>
   12cf0:	e1bc      	b.n	1306c <__aeabi_ddiv+0x44c>
   12cf2:	0030      	movs	r0, r6
   12cf4:	f001 f8ca 	bl	13e8c <__clzsi2>
   12cf8:	0003      	movs	r3, r0
   12cfa:	3b0b      	subs	r3, #11
   12cfc:	2b1c      	cmp	r3, #28
   12cfe:	dd00      	ble.n	12d02 <__aeabi_ddiv+0xe2>
   12d00:	e1ac      	b.n	1305c <__aeabi_ddiv+0x43c>
   12d02:	221d      	movs	r2, #29
   12d04:	1ad3      	subs	r3, r2, r3
   12d06:	465a      	mov	r2, fp
   12d08:	0001      	movs	r1, r0
   12d0a:	40da      	lsrs	r2, r3
   12d0c:	3908      	subs	r1, #8
   12d0e:	408e      	lsls	r6, r1
   12d10:	0013      	movs	r3, r2
   12d12:	4333      	orrs	r3, r6
   12d14:	4699      	mov	r9, r3
   12d16:	465b      	mov	r3, fp
   12d18:	408b      	lsls	r3, r1
   12d1a:	4698      	mov	r8, r3
   12d1c:	2300      	movs	r3, #0
   12d1e:	4c3c      	ldr	r4, [pc, #240]	; (12e10 <__aeabi_ddiv+0x1f0>)
   12d20:	2600      	movs	r6, #0
   12d22:	1a24      	subs	r4, r4, r0
   12d24:	9303      	str	r3, [sp, #12]
   12d26:	e79f      	b.n	12c68 <__aeabi_ddiv+0x48>
   12d28:	4651      	mov	r1, sl
   12d2a:	465a      	mov	r2, fp
   12d2c:	4311      	orrs	r1, r2
   12d2e:	d129      	bne.n	12d84 <__aeabi_ddiv+0x164>
   12d30:	2200      	movs	r2, #0
   12d32:	4693      	mov	fp, r2
   12d34:	3202      	adds	r2, #2
   12d36:	e7b1      	b.n	12c9c <__aeabi_ddiv+0x7c>
   12d38:	4659      	mov	r1, fp
   12d3a:	4301      	orrs	r1, r0
   12d3c:	d01e      	beq.n	12d7c <__aeabi_ddiv+0x15c>
   12d3e:	465b      	mov	r3, fp
   12d40:	2b00      	cmp	r3, #0
   12d42:	d100      	bne.n	12d46 <__aeabi_ddiv+0x126>
   12d44:	e19e      	b.n	13084 <__aeabi_ddiv+0x464>
   12d46:	4658      	mov	r0, fp
   12d48:	f001 f8a0 	bl	13e8c <__clzsi2>
   12d4c:	0003      	movs	r3, r0
   12d4e:	3b0b      	subs	r3, #11
   12d50:	2b1c      	cmp	r3, #28
   12d52:	dd00      	ble.n	12d56 <__aeabi_ddiv+0x136>
   12d54:	e18f      	b.n	13076 <__aeabi_ddiv+0x456>
   12d56:	0002      	movs	r2, r0
   12d58:	4659      	mov	r1, fp
   12d5a:	3a08      	subs	r2, #8
   12d5c:	4091      	lsls	r1, r2
   12d5e:	468b      	mov	fp, r1
   12d60:	211d      	movs	r1, #29
   12d62:	1acb      	subs	r3, r1, r3
   12d64:	4651      	mov	r1, sl
   12d66:	40d9      	lsrs	r1, r3
   12d68:	000b      	movs	r3, r1
   12d6a:	4659      	mov	r1, fp
   12d6c:	430b      	orrs	r3, r1
   12d6e:	4651      	mov	r1, sl
   12d70:	469b      	mov	fp, r3
   12d72:	4091      	lsls	r1, r2
   12d74:	4b26      	ldr	r3, [pc, #152]	; (12e10 <__aeabi_ddiv+0x1f0>)
   12d76:	2200      	movs	r2, #0
   12d78:	1a1b      	subs	r3, r3, r0
   12d7a:	e78f      	b.n	12c9c <__aeabi_ddiv+0x7c>
   12d7c:	2300      	movs	r3, #0
   12d7e:	2201      	movs	r2, #1
   12d80:	469b      	mov	fp, r3
   12d82:	e78b      	b.n	12c9c <__aeabi_ddiv+0x7c>
   12d84:	4651      	mov	r1, sl
   12d86:	2203      	movs	r2, #3
   12d88:	e788      	b.n	12c9c <__aeabi_ddiv+0x7c>
   12d8a:	2300      	movs	r3, #0
   12d8c:	4698      	mov	r8, r3
   12d8e:	3301      	adds	r3, #1
   12d90:	2604      	movs	r6, #4
   12d92:	2400      	movs	r4, #0
   12d94:	9303      	str	r3, [sp, #12]
   12d96:	e767      	b.n	12c68 <__aeabi_ddiv+0x48>
   12d98:	2303      	movs	r3, #3
   12d9a:	46b1      	mov	r9, r6
   12d9c:	9303      	str	r3, [sp, #12]
   12d9e:	260c      	movs	r6, #12
   12da0:	e762      	b.n	12c68 <__aeabi_ddiv+0x48>
   12da2:	2a03      	cmp	r2, #3
   12da4:	d100      	bne.n	12da8 <__aeabi_ddiv+0x188>
   12da6:	e25c      	b.n	13262 <__aeabi_ddiv+0x642>
   12da8:	9b01      	ldr	r3, [sp, #4]
   12daa:	2a01      	cmp	r2, #1
   12dac:	d000      	beq.n	12db0 <__aeabi_ddiv+0x190>
   12dae:	e1e4      	b.n	1317a <__aeabi_ddiv+0x55a>
   12db0:	4013      	ands	r3, r2
   12db2:	469c      	mov	ip, r3
   12db4:	2300      	movs	r3, #0
   12db6:	2400      	movs	r4, #0
   12db8:	2200      	movs	r2, #0
   12dba:	4698      	mov	r8, r3
   12dbc:	2100      	movs	r1, #0
   12dbe:	0312      	lsls	r2, r2, #12
   12dc0:	0b13      	lsrs	r3, r2, #12
   12dc2:	0d0a      	lsrs	r2, r1, #20
   12dc4:	0512      	lsls	r2, r2, #20
   12dc6:	431a      	orrs	r2, r3
   12dc8:	0523      	lsls	r3, r4, #20
   12dca:	4c12      	ldr	r4, [pc, #72]	; (12e14 <__aeabi_ddiv+0x1f4>)
   12dcc:	4640      	mov	r0, r8
   12dce:	4022      	ands	r2, r4
   12dd0:	4313      	orrs	r3, r2
   12dd2:	4662      	mov	r2, ip
   12dd4:	005b      	lsls	r3, r3, #1
   12dd6:	07d2      	lsls	r2, r2, #31
   12dd8:	085b      	lsrs	r3, r3, #1
   12dda:	4313      	orrs	r3, r2
   12ddc:	0019      	movs	r1, r3
   12dde:	b007      	add	sp, #28
   12de0:	bc3c      	pop	{r2, r3, r4, r5}
   12de2:	4690      	mov	r8, r2
   12de4:	4699      	mov	r9, r3
   12de6:	46a2      	mov	sl, r4
   12de8:	46ab      	mov	fp, r5
   12dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12dec:	2300      	movs	r3, #0
   12dee:	2280      	movs	r2, #128	; 0x80
   12df0:	469c      	mov	ip, r3
   12df2:	0312      	lsls	r2, r2, #12
   12df4:	4698      	mov	r8, r3
   12df6:	4c03      	ldr	r4, [pc, #12]	; (12e04 <__aeabi_ddiv+0x1e4>)
   12df8:	e7e0      	b.n	12dbc <__aeabi_ddiv+0x19c>
   12dfa:	2300      	movs	r3, #0
   12dfc:	4c01      	ldr	r4, [pc, #4]	; (12e04 <__aeabi_ddiv+0x1e4>)
   12dfe:	2200      	movs	r2, #0
   12e00:	4698      	mov	r8, r3
   12e02:	e7db      	b.n	12dbc <__aeabi_ddiv+0x19c>
   12e04:	000007ff 	.word	0x000007ff
   12e08:	fffffc01 	.word	0xfffffc01
   12e0c:	00017164 	.word	0x00017164
   12e10:	fffffc0d 	.word	0xfffffc0d
   12e14:	800fffff 	.word	0x800fffff
   12e18:	45d9      	cmp	r9, fp
   12e1a:	d900      	bls.n	12e1e <__aeabi_ddiv+0x1fe>
   12e1c:	e139      	b.n	13092 <__aeabi_ddiv+0x472>
   12e1e:	d100      	bne.n	12e22 <__aeabi_ddiv+0x202>
   12e20:	e134      	b.n	1308c <__aeabi_ddiv+0x46c>
   12e22:	2300      	movs	r3, #0
   12e24:	4646      	mov	r6, r8
   12e26:	464d      	mov	r5, r9
   12e28:	469a      	mov	sl, r3
   12e2a:	3c01      	subs	r4, #1
   12e2c:	465b      	mov	r3, fp
   12e2e:	0e0a      	lsrs	r2, r1, #24
   12e30:	021b      	lsls	r3, r3, #8
   12e32:	431a      	orrs	r2, r3
   12e34:	020b      	lsls	r3, r1, #8
   12e36:	0c17      	lsrs	r7, r2, #16
   12e38:	9303      	str	r3, [sp, #12]
   12e3a:	0413      	lsls	r3, r2, #16
   12e3c:	0c1b      	lsrs	r3, r3, #16
   12e3e:	0039      	movs	r1, r7
   12e40:	0028      	movs	r0, r5
   12e42:	4690      	mov	r8, r2
   12e44:	9301      	str	r3, [sp, #4]
   12e46:	f7ff fa3b 	bl	122c0 <__udivsi3>
   12e4a:	0002      	movs	r2, r0
   12e4c:	9b01      	ldr	r3, [sp, #4]
   12e4e:	4683      	mov	fp, r0
   12e50:	435a      	muls	r2, r3
   12e52:	0028      	movs	r0, r5
   12e54:	0039      	movs	r1, r7
   12e56:	4691      	mov	r9, r2
   12e58:	f7ff fab8 	bl	123cc <__aeabi_uidivmod>
   12e5c:	0c35      	lsrs	r5, r6, #16
   12e5e:	0409      	lsls	r1, r1, #16
   12e60:	430d      	orrs	r5, r1
   12e62:	45a9      	cmp	r9, r5
   12e64:	d90d      	bls.n	12e82 <__aeabi_ddiv+0x262>
   12e66:	465b      	mov	r3, fp
   12e68:	4445      	add	r5, r8
   12e6a:	3b01      	subs	r3, #1
   12e6c:	45a8      	cmp	r8, r5
   12e6e:	d900      	bls.n	12e72 <__aeabi_ddiv+0x252>
   12e70:	e13a      	b.n	130e8 <__aeabi_ddiv+0x4c8>
   12e72:	45a9      	cmp	r9, r5
   12e74:	d800      	bhi.n	12e78 <__aeabi_ddiv+0x258>
   12e76:	e137      	b.n	130e8 <__aeabi_ddiv+0x4c8>
   12e78:	2302      	movs	r3, #2
   12e7a:	425b      	negs	r3, r3
   12e7c:	469c      	mov	ip, r3
   12e7e:	4445      	add	r5, r8
   12e80:	44e3      	add	fp, ip
   12e82:	464b      	mov	r3, r9
   12e84:	1aeb      	subs	r3, r5, r3
   12e86:	0039      	movs	r1, r7
   12e88:	0018      	movs	r0, r3
   12e8a:	9304      	str	r3, [sp, #16]
   12e8c:	f7ff fa18 	bl	122c0 <__udivsi3>
   12e90:	9b01      	ldr	r3, [sp, #4]
   12e92:	0005      	movs	r5, r0
   12e94:	4343      	muls	r3, r0
   12e96:	0039      	movs	r1, r7
   12e98:	9804      	ldr	r0, [sp, #16]
   12e9a:	4699      	mov	r9, r3
   12e9c:	f7ff fa96 	bl	123cc <__aeabi_uidivmod>
   12ea0:	0433      	lsls	r3, r6, #16
   12ea2:	0409      	lsls	r1, r1, #16
   12ea4:	0c1b      	lsrs	r3, r3, #16
   12ea6:	430b      	orrs	r3, r1
   12ea8:	4599      	cmp	r9, r3
   12eaa:	d909      	bls.n	12ec0 <__aeabi_ddiv+0x2a0>
   12eac:	4443      	add	r3, r8
   12eae:	1e6a      	subs	r2, r5, #1
   12eb0:	4598      	cmp	r8, r3
   12eb2:	d900      	bls.n	12eb6 <__aeabi_ddiv+0x296>
   12eb4:	e11a      	b.n	130ec <__aeabi_ddiv+0x4cc>
   12eb6:	4599      	cmp	r9, r3
   12eb8:	d800      	bhi.n	12ebc <__aeabi_ddiv+0x29c>
   12eba:	e117      	b.n	130ec <__aeabi_ddiv+0x4cc>
   12ebc:	3d02      	subs	r5, #2
   12ebe:	4443      	add	r3, r8
   12ec0:	464a      	mov	r2, r9
   12ec2:	1a9b      	subs	r3, r3, r2
   12ec4:	465a      	mov	r2, fp
   12ec6:	0412      	lsls	r2, r2, #16
   12ec8:	432a      	orrs	r2, r5
   12eca:	9903      	ldr	r1, [sp, #12]
   12ecc:	4693      	mov	fp, r2
   12ece:	0c10      	lsrs	r0, r2, #16
   12ed0:	0c0a      	lsrs	r2, r1, #16
   12ed2:	4691      	mov	r9, r2
   12ed4:	0409      	lsls	r1, r1, #16
   12ed6:	465a      	mov	r2, fp
   12ed8:	0c09      	lsrs	r1, r1, #16
   12eda:	464e      	mov	r6, r9
   12edc:	000d      	movs	r5, r1
   12ede:	0412      	lsls	r2, r2, #16
   12ee0:	0c12      	lsrs	r2, r2, #16
   12ee2:	4345      	muls	r5, r0
   12ee4:	9105      	str	r1, [sp, #20]
   12ee6:	4351      	muls	r1, r2
   12ee8:	4372      	muls	r2, r6
   12eea:	4370      	muls	r0, r6
   12eec:	1952      	adds	r2, r2, r5
   12eee:	0c0e      	lsrs	r6, r1, #16
   12ef0:	18b2      	adds	r2, r6, r2
   12ef2:	4295      	cmp	r5, r2
   12ef4:	d903      	bls.n	12efe <__aeabi_ddiv+0x2de>
   12ef6:	2580      	movs	r5, #128	; 0x80
   12ef8:	026d      	lsls	r5, r5, #9
   12efa:	46ac      	mov	ip, r5
   12efc:	4460      	add	r0, ip
   12efe:	0c15      	lsrs	r5, r2, #16
   12f00:	0409      	lsls	r1, r1, #16
   12f02:	0412      	lsls	r2, r2, #16
   12f04:	0c09      	lsrs	r1, r1, #16
   12f06:	1828      	adds	r0, r5, r0
   12f08:	1852      	adds	r2, r2, r1
   12f0a:	4283      	cmp	r3, r0
   12f0c:	d200      	bcs.n	12f10 <__aeabi_ddiv+0x2f0>
   12f0e:	e0ce      	b.n	130ae <__aeabi_ddiv+0x48e>
   12f10:	d100      	bne.n	12f14 <__aeabi_ddiv+0x2f4>
   12f12:	e0c8      	b.n	130a6 <__aeabi_ddiv+0x486>
   12f14:	1a1d      	subs	r5, r3, r0
   12f16:	4653      	mov	r3, sl
   12f18:	1a9e      	subs	r6, r3, r2
   12f1a:	45b2      	cmp	sl, r6
   12f1c:	4192      	sbcs	r2, r2
   12f1e:	4252      	negs	r2, r2
   12f20:	1aab      	subs	r3, r5, r2
   12f22:	469a      	mov	sl, r3
   12f24:	4598      	cmp	r8, r3
   12f26:	d100      	bne.n	12f2a <__aeabi_ddiv+0x30a>
   12f28:	e117      	b.n	1315a <__aeabi_ddiv+0x53a>
   12f2a:	0039      	movs	r1, r7
   12f2c:	0018      	movs	r0, r3
   12f2e:	f7ff f9c7 	bl	122c0 <__udivsi3>
   12f32:	9b01      	ldr	r3, [sp, #4]
   12f34:	0005      	movs	r5, r0
   12f36:	4343      	muls	r3, r0
   12f38:	0039      	movs	r1, r7
   12f3a:	4650      	mov	r0, sl
   12f3c:	9304      	str	r3, [sp, #16]
   12f3e:	f7ff fa45 	bl	123cc <__aeabi_uidivmod>
   12f42:	9804      	ldr	r0, [sp, #16]
   12f44:	040b      	lsls	r3, r1, #16
   12f46:	0c31      	lsrs	r1, r6, #16
   12f48:	4319      	orrs	r1, r3
   12f4a:	4288      	cmp	r0, r1
   12f4c:	d909      	bls.n	12f62 <__aeabi_ddiv+0x342>
   12f4e:	4441      	add	r1, r8
   12f50:	1e6b      	subs	r3, r5, #1
   12f52:	4588      	cmp	r8, r1
   12f54:	d900      	bls.n	12f58 <__aeabi_ddiv+0x338>
   12f56:	e107      	b.n	13168 <__aeabi_ddiv+0x548>
   12f58:	4288      	cmp	r0, r1
   12f5a:	d800      	bhi.n	12f5e <__aeabi_ddiv+0x33e>
   12f5c:	e104      	b.n	13168 <__aeabi_ddiv+0x548>
   12f5e:	3d02      	subs	r5, #2
   12f60:	4441      	add	r1, r8
   12f62:	9b04      	ldr	r3, [sp, #16]
   12f64:	1acb      	subs	r3, r1, r3
   12f66:	0018      	movs	r0, r3
   12f68:	0039      	movs	r1, r7
   12f6a:	9304      	str	r3, [sp, #16]
   12f6c:	f7ff f9a8 	bl	122c0 <__udivsi3>
   12f70:	9b01      	ldr	r3, [sp, #4]
   12f72:	4682      	mov	sl, r0
   12f74:	4343      	muls	r3, r0
   12f76:	0039      	movs	r1, r7
   12f78:	9804      	ldr	r0, [sp, #16]
   12f7a:	9301      	str	r3, [sp, #4]
   12f7c:	f7ff fa26 	bl	123cc <__aeabi_uidivmod>
   12f80:	9801      	ldr	r0, [sp, #4]
   12f82:	040b      	lsls	r3, r1, #16
   12f84:	0431      	lsls	r1, r6, #16
   12f86:	0c09      	lsrs	r1, r1, #16
   12f88:	4319      	orrs	r1, r3
   12f8a:	4288      	cmp	r0, r1
   12f8c:	d90d      	bls.n	12faa <__aeabi_ddiv+0x38a>
   12f8e:	4653      	mov	r3, sl
   12f90:	4441      	add	r1, r8
   12f92:	3b01      	subs	r3, #1
   12f94:	4588      	cmp	r8, r1
   12f96:	d900      	bls.n	12f9a <__aeabi_ddiv+0x37a>
   12f98:	e0e8      	b.n	1316c <__aeabi_ddiv+0x54c>
   12f9a:	4288      	cmp	r0, r1
   12f9c:	d800      	bhi.n	12fa0 <__aeabi_ddiv+0x380>
   12f9e:	e0e5      	b.n	1316c <__aeabi_ddiv+0x54c>
   12fa0:	2302      	movs	r3, #2
   12fa2:	425b      	negs	r3, r3
   12fa4:	469c      	mov	ip, r3
   12fa6:	4441      	add	r1, r8
   12fa8:	44e2      	add	sl, ip
   12faa:	9b01      	ldr	r3, [sp, #4]
   12fac:	042d      	lsls	r5, r5, #16
   12fae:	1ace      	subs	r6, r1, r3
   12fb0:	4651      	mov	r1, sl
   12fb2:	4329      	orrs	r1, r5
   12fb4:	9d05      	ldr	r5, [sp, #20]
   12fb6:	464f      	mov	r7, r9
   12fb8:	002a      	movs	r2, r5
   12fba:	040b      	lsls	r3, r1, #16
   12fbc:	0c08      	lsrs	r0, r1, #16
   12fbe:	0c1b      	lsrs	r3, r3, #16
   12fc0:	435a      	muls	r2, r3
   12fc2:	4345      	muls	r5, r0
   12fc4:	437b      	muls	r3, r7
   12fc6:	4378      	muls	r0, r7
   12fc8:	195b      	adds	r3, r3, r5
   12fca:	0c17      	lsrs	r7, r2, #16
   12fcc:	18fb      	adds	r3, r7, r3
   12fce:	429d      	cmp	r5, r3
   12fd0:	d903      	bls.n	12fda <__aeabi_ddiv+0x3ba>
   12fd2:	2580      	movs	r5, #128	; 0x80
   12fd4:	026d      	lsls	r5, r5, #9
   12fd6:	46ac      	mov	ip, r5
   12fd8:	4460      	add	r0, ip
   12fda:	0c1d      	lsrs	r5, r3, #16
   12fdc:	0412      	lsls	r2, r2, #16
   12fde:	041b      	lsls	r3, r3, #16
   12fe0:	0c12      	lsrs	r2, r2, #16
   12fe2:	1828      	adds	r0, r5, r0
   12fe4:	189b      	adds	r3, r3, r2
   12fe6:	4286      	cmp	r6, r0
   12fe8:	d200      	bcs.n	12fec <__aeabi_ddiv+0x3cc>
   12fea:	e093      	b.n	13114 <__aeabi_ddiv+0x4f4>
   12fec:	d100      	bne.n	12ff0 <__aeabi_ddiv+0x3d0>
   12fee:	e08e      	b.n	1310e <__aeabi_ddiv+0x4ee>
   12ff0:	2301      	movs	r3, #1
   12ff2:	4319      	orrs	r1, r3
   12ff4:	4ba0      	ldr	r3, [pc, #640]	; (13278 <__aeabi_ddiv+0x658>)
   12ff6:	18e3      	adds	r3, r4, r3
   12ff8:	2b00      	cmp	r3, #0
   12ffa:	dc00      	bgt.n	12ffe <__aeabi_ddiv+0x3de>
   12ffc:	e099      	b.n	13132 <__aeabi_ddiv+0x512>
   12ffe:	074a      	lsls	r2, r1, #29
   13000:	d000      	beq.n	13004 <__aeabi_ddiv+0x3e4>
   13002:	e09e      	b.n	13142 <__aeabi_ddiv+0x522>
   13004:	465a      	mov	r2, fp
   13006:	01d2      	lsls	r2, r2, #7
   13008:	d506      	bpl.n	13018 <__aeabi_ddiv+0x3f8>
   1300a:	465a      	mov	r2, fp
   1300c:	4b9b      	ldr	r3, [pc, #620]	; (1327c <__aeabi_ddiv+0x65c>)
   1300e:	401a      	ands	r2, r3
   13010:	2380      	movs	r3, #128	; 0x80
   13012:	4693      	mov	fp, r2
   13014:	00db      	lsls	r3, r3, #3
   13016:	18e3      	adds	r3, r4, r3
   13018:	4a99      	ldr	r2, [pc, #612]	; (13280 <__aeabi_ddiv+0x660>)
   1301a:	4293      	cmp	r3, r2
   1301c:	dd68      	ble.n	130f0 <__aeabi_ddiv+0x4d0>
   1301e:	2301      	movs	r3, #1
   13020:	9a02      	ldr	r2, [sp, #8]
   13022:	4c98      	ldr	r4, [pc, #608]	; (13284 <__aeabi_ddiv+0x664>)
   13024:	401a      	ands	r2, r3
   13026:	2300      	movs	r3, #0
   13028:	4694      	mov	ip, r2
   1302a:	4698      	mov	r8, r3
   1302c:	2200      	movs	r2, #0
   1302e:	e6c5      	b.n	12dbc <__aeabi_ddiv+0x19c>
   13030:	2280      	movs	r2, #128	; 0x80
   13032:	464b      	mov	r3, r9
   13034:	0312      	lsls	r2, r2, #12
   13036:	4213      	tst	r3, r2
   13038:	d00a      	beq.n	13050 <__aeabi_ddiv+0x430>
   1303a:	465b      	mov	r3, fp
   1303c:	4213      	tst	r3, r2
   1303e:	d106      	bne.n	1304e <__aeabi_ddiv+0x42e>
   13040:	431a      	orrs	r2, r3
   13042:	0312      	lsls	r2, r2, #12
   13044:	0b12      	lsrs	r2, r2, #12
   13046:	46ac      	mov	ip, r5
   13048:	4688      	mov	r8, r1
   1304a:	4c8e      	ldr	r4, [pc, #568]	; (13284 <__aeabi_ddiv+0x664>)
   1304c:	e6b6      	b.n	12dbc <__aeabi_ddiv+0x19c>
   1304e:	464b      	mov	r3, r9
   13050:	431a      	orrs	r2, r3
   13052:	0312      	lsls	r2, r2, #12
   13054:	0b12      	lsrs	r2, r2, #12
   13056:	46bc      	mov	ip, r7
   13058:	4c8a      	ldr	r4, [pc, #552]	; (13284 <__aeabi_ddiv+0x664>)
   1305a:	e6af      	b.n	12dbc <__aeabi_ddiv+0x19c>
   1305c:	0003      	movs	r3, r0
   1305e:	465a      	mov	r2, fp
   13060:	3b28      	subs	r3, #40	; 0x28
   13062:	409a      	lsls	r2, r3
   13064:	2300      	movs	r3, #0
   13066:	4691      	mov	r9, r2
   13068:	4698      	mov	r8, r3
   1306a:	e657      	b.n	12d1c <__aeabi_ddiv+0xfc>
   1306c:	4658      	mov	r0, fp
   1306e:	f000 ff0d 	bl	13e8c <__clzsi2>
   13072:	3020      	adds	r0, #32
   13074:	e640      	b.n	12cf8 <__aeabi_ddiv+0xd8>
   13076:	0003      	movs	r3, r0
   13078:	4652      	mov	r2, sl
   1307a:	3b28      	subs	r3, #40	; 0x28
   1307c:	409a      	lsls	r2, r3
   1307e:	2100      	movs	r1, #0
   13080:	4693      	mov	fp, r2
   13082:	e677      	b.n	12d74 <__aeabi_ddiv+0x154>
   13084:	f000 ff02 	bl	13e8c <__clzsi2>
   13088:	3020      	adds	r0, #32
   1308a:	e65f      	b.n	12d4c <__aeabi_ddiv+0x12c>
   1308c:	4588      	cmp	r8, r1
   1308e:	d200      	bcs.n	13092 <__aeabi_ddiv+0x472>
   13090:	e6c7      	b.n	12e22 <__aeabi_ddiv+0x202>
   13092:	464b      	mov	r3, r9
   13094:	07de      	lsls	r6, r3, #31
   13096:	085d      	lsrs	r5, r3, #1
   13098:	4643      	mov	r3, r8
   1309a:	085b      	lsrs	r3, r3, #1
   1309c:	431e      	orrs	r6, r3
   1309e:	4643      	mov	r3, r8
   130a0:	07db      	lsls	r3, r3, #31
   130a2:	469a      	mov	sl, r3
   130a4:	e6c2      	b.n	12e2c <__aeabi_ddiv+0x20c>
   130a6:	2500      	movs	r5, #0
   130a8:	4592      	cmp	sl, r2
   130aa:	d300      	bcc.n	130ae <__aeabi_ddiv+0x48e>
   130ac:	e733      	b.n	12f16 <__aeabi_ddiv+0x2f6>
   130ae:	9e03      	ldr	r6, [sp, #12]
   130b0:	4659      	mov	r1, fp
   130b2:	46b4      	mov	ip, r6
   130b4:	44e2      	add	sl, ip
   130b6:	45b2      	cmp	sl, r6
   130b8:	41ad      	sbcs	r5, r5
   130ba:	426d      	negs	r5, r5
   130bc:	4445      	add	r5, r8
   130be:	18eb      	adds	r3, r5, r3
   130c0:	3901      	subs	r1, #1
   130c2:	4598      	cmp	r8, r3
   130c4:	d207      	bcs.n	130d6 <__aeabi_ddiv+0x4b6>
   130c6:	4298      	cmp	r0, r3
   130c8:	d900      	bls.n	130cc <__aeabi_ddiv+0x4ac>
   130ca:	e07f      	b.n	131cc <__aeabi_ddiv+0x5ac>
   130cc:	d100      	bne.n	130d0 <__aeabi_ddiv+0x4b0>
   130ce:	e0bc      	b.n	1324a <__aeabi_ddiv+0x62a>
   130d0:	1a1d      	subs	r5, r3, r0
   130d2:	468b      	mov	fp, r1
   130d4:	e71f      	b.n	12f16 <__aeabi_ddiv+0x2f6>
   130d6:	4598      	cmp	r8, r3
   130d8:	d1fa      	bne.n	130d0 <__aeabi_ddiv+0x4b0>
   130da:	9d03      	ldr	r5, [sp, #12]
   130dc:	4555      	cmp	r5, sl
   130de:	d9f2      	bls.n	130c6 <__aeabi_ddiv+0x4a6>
   130e0:	4643      	mov	r3, r8
   130e2:	468b      	mov	fp, r1
   130e4:	1a1d      	subs	r5, r3, r0
   130e6:	e716      	b.n	12f16 <__aeabi_ddiv+0x2f6>
   130e8:	469b      	mov	fp, r3
   130ea:	e6ca      	b.n	12e82 <__aeabi_ddiv+0x262>
   130ec:	0015      	movs	r5, r2
   130ee:	e6e7      	b.n	12ec0 <__aeabi_ddiv+0x2a0>
   130f0:	465a      	mov	r2, fp
   130f2:	08c9      	lsrs	r1, r1, #3
   130f4:	0752      	lsls	r2, r2, #29
   130f6:	430a      	orrs	r2, r1
   130f8:	055b      	lsls	r3, r3, #21
   130fa:	4690      	mov	r8, r2
   130fc:	0d5c      	lsrs	r4, r3, #21
   130fe:	465a      	mov	r2, fp
   13100:	2301      	movs	r3, #1
   13102:	9902      	ldr	r1, [sp, #8]
   13104:	0252      	lsls	r2, r2, #9
   13106:	4019      	ands	r1, r3
   13108:	0b12      	lsrs	r2, r2, #12
   1310a:	468c      	mov	ip, r1
   1310c:	e656      	b.n	12dbc <__aeabi_ddiv+0x19c>
   1310e:	2b00      	cmp	r3, #0
   13110:	d100      	bne.n	13114 <__aeabi_ddiv+0x4f4>
   13112:	e76f      	b.n	12ff4 <__aeabi_ddiv+0x3d4>
   13114:	4446      	add	r6, r8
   13116:	1e4a      	subs	r2, r1, #1
   13118:	45b0      	cmp	r8, r6
   1311a:	d929      	bls.n	13170 <__aeabi_ddiv+0x550>
   1311c:	0011      	movs	r1, r2
   1311e:	4286      	cmp	r6, r0
   13120:	d000      	beq.n	13124 <__aeabi_ddiv+0x504>
   13122:	e765      	b.n	12ff0 <__aeabi_ddiv+0x3d0>
   13124:	9a03      	ldr	r2, [sp, #12]
   13126:	4293      	cmp	r3, r2
   13128:	d000      	beq.n	1312c <__aeabi_ddiv+0x50c>
   1312a:	e761      	b.n	12ff0 <__aeabi_ddiv+0x3d0>
   1312c:	e762      	b.n	12ff4 <__aeabi_ddiv+0x3d4>
   1312e:	2101      	movs	r1, #1
   13130:	4249      	negs	r1, r1
   13132:	2001      	movs	r0, #1
   13134:	1ac2      	subs	r2, r0, r3
   13136:	2a38      	cmp	r2, #56	; 0x38
   13138:	dd21      	ble.n	1317e <__aeabi_ddiv+0x55e>
   1313a:	9b02      	ldr	r3, [sp, #8]
   1313c:	4003      	ands	r3, r0
   1313e:	469c      	mov	ip, r3
   13140:	e638      	b.n	12db4 <__aeabi_ddiv+0x194>
   13142:	220f      	movs	r2, #15
   13144:	400a      	ands	r2, r1
   13146:	2a04      	cmp	r2, #4
   13148:	d100      	bne.n	1314c <__aeabi_ddiv+0x52c>
   1314a:	e75b      	b.n	13004 <__aeabi_ddiv+0x3e4>
   1314c:	000a      	movs	r2, r1
   1314e:	1d11      	adds	r1, r2, #4
   13150:	4291      	cmp	r1, r2
   13152:	4192      	sbcs	r2, r2
   13154:	4252      	negs	r2, r2
   13156:	4493      	add	fp, r2
   13158:	e754      	b.n	13004 <__aeabi_ddiv+0x3e4>
   1315a:	4b47      	ldr	r3, [pc, #284]	; (13278 <__aeabi_ddiv+0x658>)
   1315c:	18e3      	adds	r3, r4, r3
   1315e:	2b00      	cmp	r3, #0
   13160:	dde5      	ble.n	1312e <__aeabi_ddiv+0x50e>
   13162:	2201      	movs	r2, #1
   13164:	4252      	negs	r2, r2
   13166:	e7f2      	b.n	1314e <__aeabi_ddiv+0x52e>
   13168:	001d      	movs	r5, r3
   1316a:	e6fa      	b.n	12f62 <__aeabi_ddiv+0x342>
   1316c:	469a      	mov	sl, r3
   1316e:	e71c      	b.n	12faa <__aeabi_ddiv+0x38a>
   13170:	42b0      	cmp	r0, r6
   13172:	d839      	bhi.n	131e8 <__aeabi_ddiv+0x5c8>
   13174:	d06e      	beq.n	13254 <__aeabi_ddiv+0x634>
   13176:	0011      	movs	r1, r2
   13178:	e73a      	b.n	12ff0 <__aeabi_ddiv+0x3d0>
   1317a:	9302      	str	r3, [sp, #8]
   1317c:	e73a      	b.n	12ff4 <__aeabi_ddiv+0x3d4>
   1317e:	2a1f      	cmp	r2, #31
   13180:	dc3c      	bgt.n	131fc <__aeabi_ddiv+0x5dc>
   13182:	2320      	movs	r3, #32
   13184:	1a9b      	subs	r3, r3, r2
   13186:	000c      	movs	r4, r1
   13188:	4658      	mov	r0, fp
   1318a:	4099      	lsls	r1, r3
   1318c:	4098      	lsls	r0, r3
   1318e:	1e4b      	subs	r3, r1, #1
   13190:	4199      	sbcs	r1, r3
   13192:	465b      	mov	r3, fp
   13194:	40d4      	lsrs	r4, r2
   13196:	40d3      	lsrs	r3, r2
   13198:	4320      	orrs	r0, r4
   1319a:	4308      	orrs	r0, r1
   1319c:	001a      	movs	r2, r3
   1319e:	0743      	lsls	r3, r0, #29
   131a0:	d009      	beq.n	131b6 <__aeabi_ddiv+0x596>
   131a2:	230f      	movs	r3, #15
   131a4:	4003      	ands	r3, r0
   131a6:	2b04      	cmp	r3, #4
   131a8:	d005      	beq.n	131b6 <__aeabi_ddiv+0x596>
   131aa:	0001      	movs	r1, r0
   131ac:	1d08      	adds	r0, r1, #4
   131ae:	4288      	cmp	r0, r1
   131b0:	419b      	sbcs	r3, r3
   131b2:	425b      	negs	r3, r3
   131b4:	18d2      	adds	r2, r2, r3
   131b6:	0213      	lsls	r3, r2, #8
   131b8:	d53a      	bpl.n	13230 <__aeabi_ddiv+0x610>
   131ba:	2301      	movs	r3, #1
   131bc:	9a02      	ldr	r2, [sp, #8]
   131be:	2401      	movs	r4, #1
   131c0:	401a      	ands	r2, r3
   131c2:	2300      	movs	r3, #0
   131c4:	4694      	mov	ip, r2
   131c6:	4698      	mov	r8, r3
   131c8:	2200      	movs	r2, #0
   131ca:	e5f7      	b.n	12dbc <__aeabi_ddiv+0x19c>
   131cc:	2102      	movs	r1, #2
   131ce:	4249      	negs	r1, r1
   131d0:	468c      	mov	ip, r1
   131d2:	9d03      	ldr	r5, [sp, #12]
   131d4:	44e3      	add	fp, ip
   131d6:	46ac      	mov	ip, r5
   131d8:	44e2      	add	sl, ip
   131da:	45aa      	cmp	sl, r5
   131dc:	41ad      	sbcs	r5, r5
   131de:	426d      	negs	r5, r5
   131e0:	4445      	add	r5, r8
   131e2:	18ed      	adds	r5, r5, r3
   131e4:	1a2d      	subs	r5, r5, r0
   131e6:	e696      	b.n	12f16 <__aeabi_ddiv+0x2f6>
   131e8:	1e8a      	subs	r2, r1, #2
   131ea:	9903      	ldr	r1, [sp, #12]
   131ec:	004d      	lsls	r5, r1, #1
   131ee:	428d      	cmp	r5, r1
   131f0:	4189      	sbcs	r1, r1
   131f2:	4249      	negs	r1, r1
   131f4:	4441      	add	r1, r8
   131f6:	1876      	adds	r6, r6, r1
   131f8:	9503      	str	r5, [sp, #12]
   131fa:	e78f      	b.n	1311c <__aeabi_ddiv+0x4fc>
   131fc:	201f      	movs	r0, #31
   131fe:	4240      	negs	r0, r0
   13200:	1ac3      	subs	r3, r0, r3
   13202:	4658      	mov	r0, fp
   13204:	40d8      	lsrs	r0, r3
   13206:	0003      	movs	r3, r0
   13208:	2a20      	cmp	r2, #32
   1320a:	d028      	beq.n	1325e <__aeabi_ddiv+0x63e>
   1320c:	2040      	movs	r0, #64	; 0x40
   1320e:	465d      	mov	r5, fp
   13210:	1a82      	subs	r2, r0, r2
   13212:	4095      	lsls	r5, r2
   13214:	4329      	orrs	r1, r5
   13216:	1e4a      	subs	r2, r1, #1
   13218:	4191      	sbcs	r1, r2
   1321a:	4319      	orrs	r1, r3
   1321c:	2307      	movs	r3, #7
   1321e:	2200      	movs	r2, #0
   13220:	400b      	ands	r3, r1
   13222:	d009      	beq.n	13238 <__aeabi_ddiv+0x618>
   13224:	230f      	movs	r3, #15
   13226:	2200      	movs	r2, #0
   13228:	400b      	ands	r3, r1
   1322a:	0008      	movs	r0, r1
   1322c:	2b04      	cmp	r3, #4
   1322e:	d1bd      	bne.n	131ac <__aeabi_ddiv+0x58c>
   13230:	0001      	movs	r1, r0
   13232:	0753      	lsls	r3, r2, #29
   13234:	0252      	lsls	r2, r2, #9
   13236:	0b12      	lsrs	r2, r2, #12
   13238:	08c9      	lsrs	r1, r1, #3
   1323a:	4319      	orrs	r1, r3
   1323c:	2301      	movs	r3, #1
   1323e:	4688      	mov	r8, r1
   13240:	9902      	ldr	r1, [sp, #8]
   13242:	2400      	movs	r4, #0
   13244:	4019      	ands	r1, r3
   13246:	468c      	mov	ip, r1
   13248:	e5b8      	b.n	12dbc <__aeabi_ddiv+0x19c>
   1324a:	4552      	cmp	r2, sl
   1324c:	d8be      	bhi.n	131cc <__aeabi_ddiv+0x5ac>
   1324e:	468b      	mov	fp, r1
   13250:	2500      	movs	r5, #0
   13252:	e660      	b.n	12f16 <__aeabi_ddiv+0x2f6>
   13254:	9d03      	ldr	r5, [sp, #12]
   13256:	429d      	cmp	r5, r3
   13258:	d3c6      	bcc.n	131e8 <__aeabi_ddiv+0x5c8>
   1325a:	0011      	movs	r1, r2
   1325c:	e762      	b.n	13124 <__aeabi_ddiv+0x504>
   1325e:	2500      	movs	r5, #0
   13260:	e7d8      	b.n	13214 <__aeabi_ddiv+0x5f4>
   13262:	2280      	movs	r2, #128	; 0x80
   13264:	465b      	mov	r3, fp
   13266:	0312      	lsls	r2, r2, #12
   13268:	431a      	orrs	r2, r3
   1326a:	9b01      	ldr	r3, [sp, #4]
   1326c:	0312      	lsls	r2, r2, #12
   1326e:	0b12      	lsrs	r2, r2, #12
   13270:	469c      	mov	ip, r3
   13272:	4688      	mov	r8, r1
   13274:	4c03      	ldr	r4, [pc, #12]	; (13284 <__aeabi_ddiv+0x664>)
   13276:	e5a1      	b.n	12dbc <__aeabi_ddiv+0x19c>
   13278:	000003ff 	.word	0x000003ff
   1327c:	feffffff 	.word	0xfeffffff
   13280:	000007fe 	.word	0x000007fe
   13284:	000007ff 	.word	0x000007ff

00013288 <__aeabi_dmul>:
   13288:	b5f0      	push	{r4, r5, r6, r7, lr}
   1328a:	4657      	mov	r7, sl
   1328c:	4645      	mov	r5, r8
   1328e:	46de      	mov	lr, fp
   13290:	464e      	mov	r6, r9
   13292:	b5e0      	push	{r5, r6, r7, lr}
   13294:	030c      	lsls	r4, r1, #12
   13296:	4698      	mov	r8, r3
   13298:	004e      	lsls	r6, r1, #1
   1329a:	0b23      	lsrs	r3, r4, #12
   1329c:	b087      	sub	sp, #28
   1329e:	0007      	movs	r7, r0
   132a0:	4692      	mov	sl, r2
   132a2:	469b      	mov	fp, r3
   132a4:	0d76      	lsrs	r6, r6, #21
   132a6:	0fcd      	lsrs	r5, r1, #31
   132a8:	2e00      	cmp	r6, #0
   132aa:	d06b      	beq.n	13384 <__aeabi_dmul+0xfc>
   132ac:	4b6d      	ldr	r3, [pc, #436]	; (13464 <__aeabi_dmul+0x1dc>)
   132ae:	429e      	cmp	r6, r3
   132b0:	d035      	beq.n	1331e <__aeabi_dmul+0x96>
   132b2:	2480      	movs	r4, #128	; 0x80
   132b4:	465b      	mov	r3, fp
   132b6:	0f42      	lsrs	r2, r0, #29
   132b8:	0424      	lsls	r4, r4, #16
   132ba:	00db      	lsls	r3, r3, #3
   132bc:	4314      	orrs	r4, r2
   132be:	431c      	orrs	r4, r3
   132c0:	00c3      	lsls	r3, r0, #3
   132c2:	4699      	mov	r9, r3
   132c4:	4b68      	ldr	r3, [pc, #416]	; (13468 <__aeabi_dmul+0x1e0>)
   132c6:	46a3      	mov	fp, r4
   132c8:	469c      	mov	ip, r3
   132ca:	2300      	movs	r3, #0
   132cc:	2700      	movs	r7, #0
   132ce:	4466      	add	r6, ip
   132d0:	9302      	str	r3, [sp, #8]
   132d2:	4643      	mov	r3, r8
   132d4:	031c      	lsls	r4, r3, #12
   132d6:	005a      	lsls	r2, r3, #1
   132d8:	0fdb      	lsrs	r3, r3, #31
   132da:	4650      	mov	r0, sl
   132dc:	0b24      	lsrs	r4, r4, #12
   132de:	0d52      	lsrs	r2, r2, #21
   132e0:	4698      	mov	r8, r3
   132e2:	d100      	bne.n	132e6 <__aeabi_dmul+0x5e>
   132e4:	e076      	b.n	133d4 <__aeabi_dmul+0x14c>
   132e6:	4b5f      	ldr	r3, [pc, #380]	; (13464 <__aeabi_dmul+0x1dc>)
   132e8:	429a      	cmp	r2, r3
   132ea:	d06d      	beq.n	133c8 <__aeabi_dmul+0x140>
   132ec:	2380      	movs	r3, #128	; 0x80
   132ee:	0f41      	lsrs	r1, r0, #29
   132f0:	041b      	lsls	r3, r3, #16
   132f2:	430b      	orrs	r3, r1
   132f4:	495c      	ldr	r1, [pc, #368]	; (13468 <__aeabi_dmul+0x1e0>)
   132f6:	00e4      	lsls	r4, r4, #3
   132f8:	468c      	mov	ip, r1
   132fa:	431c      	orrs	r4, r3
   132fc:	00c3      	lsls	r3, r0, #3
   132fe:	2000      	movs	r0, #0
   13300:	4462      	add	r2, ip
   13302:	4641      	mov	r1, r8
   13304:	18b6      	adds	r6, r6, r2
   13306:	4069      	eors	r1, r5
   13308:	1c72      	adds	r2, r6, #1
   1330a:	9101      	str	r1, [sp, #4]
   1330c:	4694      	mov	ip, r2
   1330e:	4307      	orrs	r7, r0
   13310:	2f0f      	cmp	r7, #15
   13312:	d900      	bls.n	13316 <__aeabi_dmul+0x8e>
   13314:	e0b0      	b.n	13478 <__aeabi_dmul+0x1f0>
   13316:	4a55      	ldr	r2, [pc, #340]	; (1346c <__aeabi_dmul+0x1e4>)
   13318:	00bf      	lsls	r7, r7, #2
   1331a:	59d2      	ldr	r2, [r2, r7]
   1331c:	4697      	mov	pc, r2
   1331e:	465b      	mov	r3, fp
   13320:	4303      	orrs	r3, r0
   13322:	4699      	mov	r9, r3
   13324:	d000      	beq.n	13328 <__aeabi_dmul+0xa0>
   13326:	e087      	b.n	13438 <__aeabi_dmul+0x1b0>
   13328:	2300      	movs	r3, #0
   1332a:	469b      	mov	fp, r3
   1332c:	3302      	adds	r3, #2
   1332e:	2708      	movs	r7, #8
   13330:	9302      	str	r3, [sp, #8]
   13332:	e7ce      	b.n	132d2 <__aeabi_dmul+0x4a>
   13334:	4642      	mov	r2, r8
   13336:	9201      	str	r2, [sp, #4]
   13338:	2802      	cmp	r0, #2
   1333a:	d067      	beq.n	1340c <__aeabi_dmul+0x184>
   1333c:	2803      	cmp	r0, #3
   1333e:	d100      	bne.n	13342 <__aeabi_dmul+0xba>
   13340:	e20e      	b.n	13760 <__aeabi_dmul+0x4d8>
   13342:	2801      	cmp	r0, #1
   13344:	d000      	beq.n	13348 <__aeabi_dmul+0xc0>
   13346:	e162      	b.n	1360e <__aeabi_dmul+0x386>
   13348:	2300      	movs	r3, #0
   1334a:	2400      	movs	r4, #0
   1334c:	2200      	movs	r2, #0
   1334e:	4699      	mov	r9, r3
   13350:	9901      	ldr	r1, [sp, #4]
   13352:	4001      	ands	r1, r0
   13354:	b2cd      	uxtb	r5, r1
   13356:	2100      	movs	r1, #0
   13358:	0312      	lsls	r2, r2, #12
   1335a:	0d0b      	lsrs	r3, r1, #20
   1335c:	0b12      	lsrs	r2, r2, #12
   1335e:	051b      	lsls	r3, r3, #20
   13360:	4313      	orrs	r3, r2
   13362:	4a43      	ldr	r2, [pc, #268]	; (13470 <__aeabi_dmul+0x1e8>)
   13364:	0524      	lsls	r4, r4, #20
   13366:	4013      	ands	r3, r2
   13368:	431c      	orrs	r4, r3
   1336a:	0064      	lsls	r4, r4, #1
   1336c:	07ed      	lsls	r5, r5, #31
   1336e:	0864      	lsrs	r4, r4, #1
   13370:	432c      	orrs	r4, r5
   13372:	4648      	mov	r0, r9
   13374:	0021      	movs	r1, r4
   13376:	b007      	add	sp, #28
   13378:	bc3c      	pop	{r2, r3, r4, r5}
   1337a:	4690      	mov	r8, r2
   1337c:	4699      	mov	r9, r3
   1337e:	46a2      	mov	sl, r4
   13380:	46ab      	mov	fp, r5
   13382:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13384:	4303      	orrs	r3, r0
   13386:	4699      	mov	r9, r3
   13388:	d04f      	beq.n	1342a <__aeabi_dmul+0x1a2>
   1338a:	465b      	mov	r3, fp
   1338c:	2b00      	cmp	r3, #0
   1338e:	d100      	bne.n	13392 <__aeabi_dmul+0x10a>
   13390:	e189      	b.n	136a6 <__aeabi_dmul+0x41e>
   13392:	4658      	mov	r0, fp
   13394:	f000 fd7a 	bl	13e8c <__clzsi2>
   13398:	0003      	movs	r3, r0
   1339a:	3b0b      	subs	r3, #11
   1339c:	2b1c      	cmp	r3, #28
   1339e:	dd00      	ble.n	133a2 <__aeabi_dmul+0x11a>
   133a0:	e17a      	b.n	13698 <__aeabi_dmul+0x410>
   133a2:	221d      	movs	r2, #29
   133a4:	1ad3      	subs	r3, r2, r3
   133a6:	003a      	movs	r2, r7
   133a8:	0001      	movs	r1, r0
   133aa:	465c      	mov	r4, fp
   133ac:	40da      	lsrs	r2, r3
   133ae:	3908      	subs	r1, #8
   133b0:	408c      	lsls	r4, r1
   133b2:	0013      	movs	r3, r2
   133b4:	408f      	lsls	r7, r1
   133b6:	4323      	orrs	r3, r4
   133b8:	469b      	mov	fp, r3
   133ba:	46b9      	mov	r9, r7
   133bc:	2300      	movs	r3, #0
   133be:	4e2d      	ldr	r6, [pc, #180]	; (13474 <__aeabi_dmul+0x1ec>)
   133c0:	2700      	movs	r7, #0
   133c2:	1a36      	subs	r6, r6, r0
   133c4:	9302      	str	r3, [sp, #8]
   133c6:	e784      	b.n	132d2 <__aeabi_dmul+0x4a>
   133c8:	4653      	mov	r3, sl
   133ca:	4323      	orrs	r3, r4
   133cc:	d12a      	bne.n	13424 <__aeabi_dmul+0x19c>
   133ce:	2400      	movs	r4, #0
   133d0:	2002      	movs	r0, #2
   133d2:	e796      	b.n	13302 <__aeabi_dmul+0x7a>
   133d4:	4653      	mov	r3, sl
   133d6:	4323      	orrs	r3, r4
   133d8:	d020      	beq.n	1341c <__aeabi_dmul+0x194>
   133da:	2c00      	cmp	r4, #0
   133dc:	d100      	bne.n	133e0 <__aeabi_dmul+0x158>
   133de:	e157      	b.n	13690 <__aeabi_dmul+0x408>
   133e0:	0020      	movs	r0, r4
   133e2:	f000 fd53 	bl	13e8c <__clzsi2>
   133e6:	0003      	movs	r3, r0
   133e8:	3b0b      	subs	r3, #11
   133ea:	2b1c      	cmp	r3, #28
   133ec:	dd00      	ble.n	133f0 <__aeabi_dmul+0x168>
   133ee:	e149      	b.n	13684 <__aeabi_dmul+0x3fc>
   133f0:	211d      	movs	r1, #29
   133f2:	1acb      	subs	r3, r1, r3
   133f4:	4651      	mov	r1, sl
   133f6:	0002      	movs	r2, r0
   133f8:	40d9      	lsrs	r1, r3
   133fa:	4653      	mov	r3, sl
   133fc:	3a08      	subs	r2, #8
   133fe:	4094      	lsls	r4, r2
   13400:	4093      	lsls	r3, r2
   13402:	430c      	orrs	r4, r1
   13404:	4a1b      	ldr	r2, [pc, #108]	; (13474 <__aeabi_dmul+0x1ec>)
   13406:	1a12      	subs	r2, r2, r0
   13408:	2000      	movs	r0, #0
   1340a:	e77a      	b.n	13302 <__aeabi_dmul+0x7a>
   1340c:	2501      	movs	r5, #1
   1340e:	9b01      	ldr	r3, [sp, #4]
   13410:	4c14      	ldr	r4, [pc, #80]	; (13464 <__aeabi_dmul+0x1dc>)
   13412:	401d      	ands	r5, r3
   13414:	2300      	movs	r3, #0
   13416:	2200      	movs	r2, #0
   13418:	4699      	mov	r9, r3
   1341a:	e79c      	b.n	13356 <__aeabi_dmul+0xce>
   1341c:	2400      	movs	r4, #0
   1341e:	2200      	movs	r2, #0
   13420:	2001      	movs	r0, #1
   13422:	e76e      	b.n	13302 <__aeabi_dmul+0x7a>
   13424:	4653      	mov	r3, sl
   13426:	2003      	movs	r0, #3
   13428:	e76b      	b.n	13302 <__aeabi_dmul+0x7a>
   1342a:	2300      	movs	r3, #0
   1342c:	469b      	mov	fp, r3
   1342e:	3301      	adds	r3, #1
   13430:	2704      	movs	r7, #4
   13432:	2600      	movs	r6, #0
   13434:	9302      	str	r3, [sp, #8]
   13436:	e74c      	b.n	132d2 <__aeabi_dmul+0x4a>
   13438:	2303      	movs	r3, #3
   1343a:	4681      	mov	r9, r0
   1343c:	270c      	movs	r7, #12
   1343e:	9302      	str	r3, [sp, #8]
   13440:	e747      	b.n	132d2 <__aeabi_dmul+0x4a>
   13442:	2280      	movs	r2, #128	; 0x80
   13444:	2300      	movs	r3, #0
   13446:	2500      	movs	r5, #0
   13448:	0312      	lsls	r2, r2, #12
   1344a:	4699      	mov	r9, r3
   1344c:	4c05      	ldr	r4, [pc, #20]	; (13464 <__aeabi_dmul+0x1dc>)
   1344e:	e782      	b.n	13356 <__aeabi_dmul+0xce>
   13450:	465c      	mov	r4, fp
   13452:	464b      	mov	r3, r9
   13454:	9802      	ldr	r0, [sp, #8]
   13456:	e76f      	b.n	13338 <__aeabi_dmul+0xb0>
   13458:	465c      	mov	r4, fp
   1345a:	464b      	mov	r3, r9
   1345c:	9501      	str	r5, [sp, #4]
   1345e:	9802      	ldr	r0, [sp, #8]
   13460:	e76a      	b.n	13338 <__aeabi_dmul+0xb0>
   13462:	46c0      	nop			; (mov r8, r8)
   13464:	000007ff 	.word	0x000007ff
   13468:	fffffc01 	.word	0xfffffc01
   1346c:	000171a4 	.word	0x000171a4
   13470:	800fffff 	.word	0x800fffff
   13474:	fffffc0d 	.word	0xfffffc0d
   13478:	464a      	mov	r2, r9
   1347a:	4649      	mov	r1, r9
   1347c:	0c17      	lsrs	r7, r2, #16
   1347e:	0c1a      	lsrs	r2, r3, #16
   13480:	041b      	lsls	r3, r3, #16
   13482:	0c1b      	lsrs	r3, r3, #16
   13484:	0408      	lsls	r0, r1, #16
   13486:	0019      	movs	r1, r3
   13488:	0c00      	lsrs	r0, r0, #16
   1348a:	4341      	muls	r1, r0
   1348c:	0015      	movs	r5, r2
   1348e:	4688      	mov	r8, r1
   13490:	0019      	movs	r1, r3
   13492:	437d      	muls	r5, r7
   13494:	4379      	muls	r1, r7
   13496:	9503      	str	r5, [sp, #12]
   13498:	4689      	mov	r9, r1
   1349a:	0029      	movs	r1, r5
   1349c:	0015      	movs	r5, r2
   1349e:	4345      	muls	r5, r0
   134a0:	444d      	add	r5, r9
   134a2:	9502      	str	r5, [sp, #8]
   134a4:	4645      	mov	r5, r8
   134a6:	0c2d      	lsrs	r5, r5, #16
   134a8:	46aa      	mov	sl, r5
   134aa:	9d02      	ldr	r5, [sp, #8]
   134ac:	4455      	add	r5, sl
   134ae:	45a9      	cmp	r9, r5
   134b0:	d906      	bls.n	134c0 <__aeabi_dmul+0x238>
   134b2:	468a      	mov	sl, r1
   134b4:	2180      	movs	r1, #128	; 0x80
   134b6:	0249      	lsls	r1, r1, #9
   134b8:	4689      	mov	r9, r1
   134ba:	44ca      	add	sl, r9
   134bc:	4651      	mov	r1, sl
   134be:	9103      	str	r1, [sp, #12]
   134c0:	0c29      	lsrs	r1, r5, #16
   134c2:	9104      	str	r1, [sp, #16]
   134c4:	4641      	mov	r1, r8
   134c6:	0409      	lsls	r1, r1, #16
   134c8:	042d      	lsls	r5, r5, #16
   134ca:	0c09      	lsrs	r1, r1, #16
   134cc:	4688      	mov	r8, r1
   134ce:	0029      	movs	r1, r5
   134d0:	0c25      	lsrs	r5, r4, #16
   134d2:	0424      	lsls	r4, r4, #16
   134d4:	4441      	add	r1, r8
   134d6:	0c24      	lsrs	r4, r4, #16
   134d8:	9105      	str	r1, [sp, #20]
   134da:	0021      	movs	r1, r4
   134dc:	4341      	muls	r1, r0
   134de:	4688      	mov	r8, r1
   134e0:	0021      	movs	r1, r4
   134e2:	4379      	muls	r1, r7
   134e4:	468a      	mov	sl, r1
   134e6:	4368      	muls	r0, r5
   134e8:	4641      	mov	r1, r8
   134ea:	4450      	add	r0, sl
   134ec:	4681      	mov	r9, r0
   134ee:	0c08      	lsrs	r0, r1, #16
   134f0:	4448      	add	r0, r9
   134f2:	436f      	muls	r7, r5
   134f4:	4582      	cmp	sl, r0
   134f6:	d903      	bls.n	13500 <__aeabi_dmul+0x278>
   134f8:	2180      	movs	r1, #128	; 0x80
   134fa:	0249      	lsls	r1, r1, #9
   134fc:	4689      	mov	r9, r1
   134fe:	444f      	add	r7, r9
   13500:	0c01      	lsrs	r1, r0, #16
   13502:	4689      	mov	r9, r1
   13504:	0039      	movs	r1, r7
   13506:	4449      	add	r1, r9
   13508:	9102      	str	r1, [sp, #8]
   1350a:	4641      	mov	r1, r8
   1350c:	040f      	lsls	r7, r1, #16
   1350e:	9904      	ldr	r1, [sp, #16]
   13510:	0c3f      	lsrs	r7, r7, #16
   13512:	4688      	mov	r8, r1
   13514:	0400      	lsls	r0, r0, #16
   13516:	19c0      	adds	r0, r0, r7
   13518:	4480      	add	r8, r0
   1351a:	4641      	mov	r1, r8
   1351c:	9104      	str	r1, [sp, #16]
   1351e:	4659      	mov	r1, fp
   13520:	0c0f      	lsrs	r7, r1, #16
   13522:	0409      	lsls	r1, r1, #16
   13524:	0c09      	lsrs	r1, r1, #16
   13526:	4688      	mov	r8, r1
   13528:	4359      	muls	r1, r3
   1352a:	468a      	mov	sl, r1
   1352c:	0039      	movs	r1, r7
   1352e:	4351      	muls	r1, r2
   13530:	4689      	mov	r9, r1
   13532:	4641      	mov	r1, r8
   13534:	434a      	muls	r2, r1
   13536:	4651      	mov	r1, sl
   13538:	0c09      	lsrs	r1, r1, #16
   1353a:	468b      	mov	fp, r1
   1353c:	437b      	muls	r3, r7
   1353e:	18d2      	adds	r2, r2, r3
   13540:	445a      	add	r2, fp
   13542:	4293      	cmp	r3, r2
   13544:	d903      	bls.n	1354e <__aeabi_dmul+0x2c6>
   13546:	2380      	movs	r3, #128	; 0x80
   13548:	025b      	lsls	r3, r3, #9
   1354a:	469b      	mov	fp, r3
   1354c:	44d9      	add	r9, fp
   1354e:	4651      	mov	r1, sl
   13550:	0409      	lsls	r1, r1, #16
   13552:	0c09      	lsrs	r1, r1, #16
   13554:	468a      	mov	sl, r1
   13556:	4641      	mov	r1, r8
   13558:	4361      	muls	r1, r4
   1355a:	437c      	muls	r4, r7
   1355c:	0c13      	lsrs	r3, r2, #16
   1355e:	0412      	lsls	r2, r2, #16
   13560:	444b      	add	r3, r9
   13562:	4452      	add	r2, sl
   13564:	46a1      	mov	r9, r4
   13566:	468a      	mov	sl, r1
   13568:	003c      	movs	r4, r7
   1356a:	4641      	mov	r1, r8
   1356c:	436c      	muls	r4, r5
   1356e:	434d      	muls	r5, r1
   13570:	4651      	mov	r1, sl
   13572:	444d      	add	r5, r9
   13574:	0c0f      	lsrs	r7, r1, #16
   13576:	197d      	adds	r5, r7, r5
   13578:	45a9      	cmp	r9, r5
   1357a:	d903      	bls.n	13584 <__aeabi_dmul+0x2fc>
   1357c:	2180      	movs	r1, #128	; 0x80
   1357e:	0249      	lsls	r1, r1, #9
   13580:	4688      	mov	r8, r1
   13582:	4444      	add	r4, r8
   13584:	9f04      	ldr	r7, [sp, #16]
   13586:	9903      	ldr	r1, [sp, #12]
   13588:	46b8      	mov	r8, r7
   1358a:	4441      	add	r1, r8
   1358c:	468b      	mov	fp, r1
   1358e:	4583      	cmp	fp, r0
   13590:	4180      	sbcs	r0, r0
   13592:	4241      	negs	r1, r0
   13594:	4688      	mov	r8, r1
   13596:	4651      	mov	r1, sl
   13598:	0408      	lsls	r0, r1, #16
   1359a:	042f      	lsls	r7, r5, #16
   1359c:	0c00      	lsrs	r0, r0, #16
   1359e:	183f      	adds	r7, r7, r0
   135a0:	4658      	mov	r0, fp
   135a2:	9902      	ldr	r1, [sp, #8]
   135a4:	1810      	adds	r0, r2, r0
   135a6:	4689      	mov	r9, r1
   135a8:	4290      	cmp	r0, r2
   135aa:	4192      	sbcs	r2, r2
   135ac:	444f      	add	r7, r9
   135ae:	46ba      	mov	sl, r7
   135b0:	4252      	negs	r2, r2
   135b2:	4699      	mov	r9, r3
   135b4:	4693      	mov	fp, r2
   135b6:	44c2      	add	sl, r8
   135b8:	44d1      	add	r9, sl
   135ba:	44cb      	add	fp, r9
   135bc:	428f      	cmp	r7, r1
   135be:	41bf      	sbcs	r7, r7
   135c0:	45c2      	cmp	sl, r8
   135c2:	4189      	sbcs	r1, r1
   135c4:	4599      	cmp	r9, r3
   135c6:	419b      	sbcs	r3, r3
   135c8:	4593      	cmp	fp, r2
   135ca:	4192      	sbcs	r2, r2
   135cc:	427f      	negs	r7, r7
   135ce:	4249      	negs	r1, r1
   135d0:	0c2d      	lsrs	r5, r5, #16
   135d2:	4252      	negs	r2, r2
   135d4:	430f      	orrs	r7, r1
   135d6:	425b      	negs	r3, r3
   135d8:	4313      	orrs	r3, r2
   135da:	197f      	adds	r7, r7, r5
   135dc:	18ff      	adds	r7, r7, r3
   135de:	465b      	mov	r3, fp
   135e0:	193c      	adds	r4, r7, r4
   135e2:	0ddb      	lsrs	r3, r3, #23
   135e4:	9a05      	ldr	r2, [sp, #20]
   135e6:	0264      	lsls	r4, r4, #9
   135e8:	431c      	orrs	r4, r3
   135ea:	0243      	lsls	r3, r0, #9
   135ec:	4313      	orrs	r3, r2
   135ee:	1e5d      	subs	r5, r3, #1
   135f0:	41ab      	sbcs	r3, r5
   135f2:	465a      	mov	r2, fp
   135f4:	0dc0      	lsrs	r0, r0, #23
   135f6:	4303      	orrs	r3, r0
   135f8:	0252      	lsls	r2, r2, #9
   135fa:	4313      	orrs	r3, r2
   135fc:	01e2      	lsls	r2, r4, #7
   135fe:	d556      	bpl.n	136ae <__aeabi_dmul+0x426>
   13600:	2001      	movs	r0, #1
   13602:	085a      	lsrs	r2, r3, #1
   13604:	4003      	ands	r3, r0
   13606:	4313      	orrs	r3, r2
   13608:	07e2      	lsls	r2, r4, #31
   1360a:	4313      	orrs	r3, r2
   1360c:	0864      	lsrs	r4, r4, #1
   1360e:	485a      	ldr	r0, [pc, #360]	; (13778 <__aeabi_dmul+0x4f0>)
   13610:	4460      	add	r0, ip
   13612:	2800      	cmp	r0, #0
   13614:	dd4d      	ble.n	136b2 <__aeabi_dmul+0x42a>
   13616:	075a      	lsls	r2, r3, #29
   13618:	d009      	beq.n	1362e <__aeabi_dmul+0x3a6>
   1361a:	220f      	movs	r2, #15
   1361c:	401a      	ands	r2, r3
   1361e:	2a04      	cmp	r2, #4
   13620:	d005      	beq.n	1362e <__aeabi_dmul+0x3a6>
   13622:	1d1a      	adds	r2, r3, #4
   13624:	429a      	cmp	r2, r3
   13626:	419b      	sbcs	r3, r3
   13628:	425b      	negs	r3, r3
   1362a:	18e4      	adds	r4, r4, r3
   1362c:	0013      	movs	r3, r2
   1362e:	01e2      	lsls	r2, r4, #7
   13630:	d504      	bpl.n	1363c <__aeabi_dmul+0x3b4>
   13632:	2080      	movs	r0, #128	; 0x80
   13634:	4a51      	ldr	r2, [pc, #324]	; (1377c <__aeabi_dmul+0x4f4>)
   13636:	00c0      	lsls	r0, r0, #3
   13638:	4014      	ands	r4, r2
   1363a:	4460      	add	r0, ip
   1363c:	4a50      	ldr	r2, [pc, #320]	; (13780 <__aeabi_dmul+0x4f8>)
   1363e:	4290      	cmp	r0, r2
   13640:	dd00      	ble.n	13644 <__aeabi_dmul+0x3bc>
   13642:	e6e3      	b.n	1340c <__aeabi_dmul+0x184>
   13644:	2501      	movs	r5, #1
   13646:	08db      	lsrs	r3, r3, #3
   13648:	0762      	lsls	r2, r4, #29
   1364a:	431a      	orrs	r2, r3
   1364c:	0264      	lsls	r4, r4, #9
   1364e:	9b01      	ldr	r3, [sp, #4]
   13650:	4691      	mov	r9, r2
   13652:	0b22      	lsrs	r2, r4, #12
   13654:	0544      	lsls	r4, r0, #21
   13656:	0d64      	lsrs	r4, r4, #21
   13658:	401d      	ands	r5, r3
   1365a:	e67c      	b.n	13356 <__aeabi_dmul+0xce>
   1365c:	2280      	movs	r2, #128	; 0x80
   1365e:	4659      	mov	r1, fp
   13660:	0312      	lsls	r2, r2, #12
   13662:	4211      	tst	r1, r2
   13664:	d008      	beq.n	13678 <__aeabi_dmul+0x3f0>
   13666:	4214      	tst	r4, r2
   13668:	d106      	bne.n	13678 <__aeabi_dmul+0x3f0>
   1366a:	4322      	orrs	r2, r4
   1366c:	0312      	lsls	r2, r2, #12
   1366e:	0b12      	lsrs	r2, r2, #12
   13670:	4645      	mov	r5, r8
   13672:	4699      	mov	r9, r3
   13674:	4c43      	ldr	r4, [pc, #268]	; (13784 <__aeabi_dmul+0x4fc>)
   13676:	e66e      	b.n	13356 <__aeabi_dmul+0xce>
   13678:	465b      	mov	r3, fp
   1367a:	431a      	orrs	r2, r3
   1367c:	0312      	lsls	r2, r2, #12
   1367e:	0b12      	lsrs	r2, r2, #12
   13680:	4c40      	ldr	r4, [pc, #256]	; (13784 <__aeabi_dmul+0x4fc>)
   13682:	e668      	b.n	13356 <__aeabi_dmul+0xce>
   13684:	0003      	movs	r3, r0
   13686:	4654      	mov	r4, sl
   13688:	3b28      	subs	r3, #40	; 0x28
   1368a:	409c      	lsls	r4, r3
   1368c:	2300      	movs	r3, #0
   1368e:	e6b9      	b.n	13404 <__aeabi_dmul+0x17c>
   13690:	f000 fbfc 	bl	13e8c <__clzsi2>
   13694:	3020      	adds	r0, #32
   13696:	e6a6      	b.n	133e6 <__aeabi_dmul+0x15e>
   13698:	0003      	movs	r3, r0
   1369a:	3b28      	subs	r3, #40	; 0x28
   1369c:	409f      	lsls	r7, r3
   1369e:	2300      	movs	r3, #0
   136a0:	46bb      	mov	fp, r7
   136a2:	4699      	mov	r9, r3
   136a4:	e68a      	b.n	133bc <__aeabi_dmul+0x134>
   136a6:	f000 fbf1 	bl	13e8c <__clzsi2>
   136aa:	3020      	adds	r0, #32
   136ac:	e674      	b.n	13398 <__aeabi_dmul+0x110>
   136ae:	46b4      	mov	ip, r6
   136b0:	e7ad      	b.n	1360e <__aeabi_dmul+0x386>
   136b2:	2501      	movs	r5, #1
   136b4:	1a2a      	subs	r2, r5, r0
   136b6:	2a38      	cmp	r2, #56	; 0x38
   136b8:	dd06      	ble.n	136c8 <__aeabi_dmul+0x440>
   136ba:	9b01      	ldr	r3, [sp, #4]
   136bc:	2400      	movs	r4, #0
   136be:	401d      	ands	r5, r3
   136c0:	2300      	movs	r3, #0
   136c2:	2200      	movs	r2, #0
   136c4:	4699      	mov	r9, r3
   136c6:	e646      	b.n	13356 <__aeabi_dmul+0xce>
   136c8:	2a1f      	cmp	r2, #31
   136ca:	dc21      	bgt.n	13710 <__aeabi_dmul+0x488>
   136cc:	2520      	movs	r5, #32
   136ce:	0020      	movs	r0, r4
   136d0:	1aad      	subs	r5, r5, r2
   136d2:	001e      	movs	r6, r3
   136d4:	40ab      	lsls	r3, r5
   136d6:	40a8      	lsls	r0, r5
   136d8:	40d6      	lsrs	r6, r2
   136da:	1e5d      	subs	r5, r3, #1
   136dc:	41ab      	sbcs	r3, r5
   136de:	4330      	orrs	r0, r6
   136e0:	4318      	orrs	r0, r3
   136e2:	40d4      	lsrs	r4, r2
   136e4:	0743      	lsls	r3, r0, #29
   136e6:	d009      	beq.n	136fc <__aeabi_dmul+0x474>
   136e8:	230f      	movs	r3, #15
   136ea:	4003      	ands	r3, r0
   136ec:	2b04      	cmp	r3, #4
   136ee:	d005      	beq.n	136fc <__aeabi_dmul+0x474>
   136f0:	0003      	movs	r3, r0
   136f2:	1d18      	adds	r0, r3, #4
   136f4:	4298      	cmp	r0, r3
   136f6:	419b      	sbcs	r3, r3
   136f8:	425b      	negs	r3, r3
   136fa:	18e4      	adds	r4, r4, r3
   136fc:	0223      	lsls	r3, r4, #8
   136fe:	d521      	bpl.n	13744 <__aeabi_dmul+0x4bc>
   13700:	2501      	movs	r5, #1
   13702:	9b01      	ldr	r3, [sp, #4]
   13704:	2401      	movs	r4, #1
   13706:	401d      	ands	r5, r3
   13708:	2300      	movs	r3, #0
   1370a:	2200      	movs	r2, #0
   1370c:	4699      	mov	r9, r3
   1370e:	e622      	b.n	13356 <__aeabi_dmul+0xce>
   13710:	251f      	movs	r5, #31
   13712:	0021      	movs	r1, r4
   13714:	426d      	negs	r5, r5
   13716:	1a28      	subs	r0, r5, r0
   13718:	40c1      	lsrs	r1, r0
   1371a:	0008      	movs	r0, r1
   1371c:	2a20      	cmp	r2, #32
   1371e:	d01d      	beq.n	1375c <__aeabi_dmul+0x4d4>
   13720:	355f      	adds	r5, #95	; 0x5f
   13722:	1aaa      	subs	r2, r5, r2
   13724:	4094      	lsls	r4, r2
   13726:	4323      	orrs	r3, r4
   13728:	1e5c      	subs	r4, r3, #1
   1372a:	41a3      	sbcs	r3, r4
   1372c:	2507      	movs	r5, #7
   1372e:	4303      	orrs	r3, r0
   13730:	401d      	ands	r5, r3
   13732:	2200      	movs	r2, #0
   13734:	2d00      	cmp	r5, #0
   13736:	d009      	beq.n	1374c <__aeabi_dmul+0x4c4>
   13738:	220f      	movs	r2, #15
   1373a:	2400      	movs	r4, #0
   1373c:	401a      	ands	r2, r3
   1373e:	0018      	movs	r0, r3
   13740:	2a04      	cmp	r2, #4
   13742:	d1d6      	bne.n	136f2 <__aeabi_dmul+0x46a>
   13744:	0003      	movs	r3, r0
   13746:	0765      	lsls	r5, r4, #29
   13748:	0264      	lsls	r4, r4, #9
   1374a:	0b22      	lsrs	r2, r4, #12
   1374c:	08db      	lsrs	r3, r3, #3
   1374e:	432b      	orrs	r3, r5
   13750:	2501      	movs	r5, #1
   13752:	4699      	mov	r9, r3
   13754:	9b01      	ldr	r3, [sp, #4]
   13756:	2400      	movs	r4, #0
   13758:	401d      	ands	r5, r3
   1375a:	e5fc      	b.n	13356 <__aeabi_dmul+0xce>
   1375c:	2400      	movs	r4, #0
   1375e:	e7e2      	b.n	13726 <__aeabi_dmul+0x49e>
   13760:	2280      	movs	r2, #128	; 0x80
   13762:	2501      	movs	r5, #1
   13764:	0312      	lsls	r2, r2, #12
   13766:	4322      	orrs	r2, r4
   13768:	9901      	ldr	r1, [sp, #4]
   1376a:	0312      	lsls	r2, r2, #12
   1376c:	0b12      	lsrs	r2, r2, #12
   1376e:	400d      	ands	r5, r1
   13770:	4699      	mov	r9, r3
   13772:	4c04      	ldr	r4, [pc, #16]	; (13784 <__aeabi_dmul+0x4fc>)
   13774:	e5ef      	b.n	13356 <__aeabi_dmul+0xce>
   13776:	46c0      	nop			; (mov r8, r8)
   13778:	000003ff 	.word	0x000003ff
   1377c:	feffffff 	.word	0xfeffffff
   13780:	000007fe 	.word	0x000007fe
   13784:	000007ff 	.word	0x000007ff

00013788 <__aeabi_dsub>:
   13788:	b5f0      	push	{r4, r5, r6, r7, lr}
   1378a:	4646      	mov	r6, r8
   1378c:	46d6      	mov	lr, sl
   1378e:	464f      	mov	r7, r9
   13790:	030c      	lsls	r4, r1, #12
   13792:	b5c0      	push	{r6, r7, lr}
   13794:	0fcd      	lsrs	r5, r1, #31
   13796:	004e      	lsls	r6, r1, #1
   13798:	0a61      	lsrs	r1, r4, #9
   1379a:	0f44      	lsrs	r4, r0, #29
   1379c:	430c      	orrs	r4, r1
   1379e:	00c1      	lsls	r1, r0, #3
   137a0:	0058      	lsls	r0, r3, #1
   137a2:	0d40      	lsrs	r0, r0, #21
   137a4:	4684      	mov	ip, r0
   137a6:	468a      	mov	sl, r1
   137a8:	000f      	movs	r7, r1
   137aa:	0319      	lsls	r1, r3, #12
   137ac:	0f50      	lsrs	r0, r2, #29
   137ae:	0a49      	lsrs	r1, r1, #9
   137b0:	4301      	orrs	r1, r0
   137b2:	48c6      	ldr	r0, [pc, #792]	; (13acc <__aeabi_dsub+0x344>)
   137b4:	0d76      	lsrs	r6, r6, #21
   137b6:	46a8      	mov	r8, r5
   137b8:	0fdb      	lsrs	r3, r3, #31
   137ba:	00d2      	lsls	r2, r2, #3
   137bc:	4584      	cmp	ip, r0
   137be:	d100      	bne.n	137c2 <__aeabi_dsub+0x3a>
   137c0:	e0d8      	b.n	13974 <__aeabi_dsub+0x1ec>
   137c2:	2001      	movs	r0, #1
   137c4:	4043      	eors	r3, r0
   137c6:	42ab      	cmp	r3, r5
   137c8:	d100      	bne.n	137cc <__aeabi_dsub+0x44>
   137ca:	e0a6      	b.n	1391a <__aeabi_dsub+0x192>
   137cc:	4660      	mov	r0, ip
   137ce:	1a35      	subs	r5, r6, r0
   137d0:	2d00      	cmp	r5, #0
   137d2:	dc00      	bgt.n	137d6 <__aeabi_dsub+0x4e>
   137d4:	e105      	b.n	139e2 <__aeabi_dsub+0x25a>
   137d6:	2800      	cmp	r0, #0
   137d8:	d110      	bne.n	137fc <__aeabi_dsub+0x74>
   137da:	000b      	movs	r3, r1
   137dc:	4313      	orrs	r3, r2
   137de:	d100      	bne.n	137e2 <__aeabi_dsub+0x5a>
   137e0:	e0d7      	b.n	13992 <__aeabi_dsub+0x20a>
   137e2:	1e6b      	subs	r3, r5, #1
   137e4:	2b00      	cmp	r3, #0
   137e6:	d000      	beq.n	137ea <__aeabi_dsub+0x62>
   137e8:	e14b      	b.n	13a82 <__aeabi_dsub+0x2fa>
   137ea:	4653      	mov	r3, sl
   137ec:	1a9f      	subs	r7, r3, r2
   137ee:	45ba      	cmp	sl, r7
   137f0:	4180      	sbcs	r0, r0
   137f2:	1a64      	subs	r4, r4, r1
   137f4:	4240      	negs	r0, r0
   137f6:	1a24      	subs	r4, r4, r0
   137f8:	2601      	movs	r6, #1
   137fa:	e01e      	b.n	1383a <__aeabi_dsub+0xb2>
   137fc:	4bb3      	ldr	r3, [pc, #716]	; (13acc <__aeabi_dsub+0x344>)
   137fe:	429e      	cmp	r6, r3
   13800:	d048      	beq.n	13894 <__aeabi_dsub+0x10c>
   13802:	2380      	movs	r3, #128	; 0x80
   13804:	041b      	lsls	r3, r3, #16
   13806:	4319      	orrs	r1, r3
   13808:	2d38      	cmp	r5, #56	; 0x38
   1380a:	dd00      	ble.n	1380e <__aeabi_dsub+0x86>
   1380c:	e119      	b.n	13a42 <__aeabi_dsub+0x2ba>
   1380e:	2d1f      	cmp	r5, #31
   13810:	dd00      	ble.n	13814 <__aeabi_dsub+0x8c>
   13812:	e14c      	b.n	13aae <__aeabi_dsub+0x326>
   13814:	2320      	movs	r3, #32
   13816:	000f      	movs	r7, r1
   13818:	1b5b      	subs	r3, r3, r5
   1381a:	0010      	movs	r0, r2
   1381c:	409a      	lsls	r2, r3
   1381e:	409f      	lsls	r7, r3
   13820:	40e8      	lsrs	r0, r5
   13822:	1e53      	subs	r3, r2, #1
   13824:	419a      	sbcs	r2, r3
   13826:	40e9      	lsrs	r1, r5
   13828:	4307      	orrs	r7, r0
   1382a:	4317      	orrs	r7, r2
   1382c:	4653      	mov	r3, sl
   1382e:	1bdf      	subs	r7, r3, r7
   13830:	1a61      	subs	r1, r4, r1
   13832:	45ba      	cmp	sl, r7
   13834:	41a4      	sbcs	r4, r4
   13836:	4264      	negs	r4, r4
   13838:	1b0c      	subs	r4, r1, r4
   1383a:	0223      	lsls	r3, r4, #8
   1383c:	d400      	bmi.n	13840 <__aeabi_dsub+0xb8>
   1383e:	e0c5      	b.n	139cc <__aeabi_dsub+0x244>
   13840:	0264      	lsls	r4, r4, #9
   13842:	0a65      	lsrs	r5, r4, #9
   13844:	2d00      	cmp	r5, #0
   13846:	d100      	bne.n	1384a <__aeabi_dsub+0xc2>
   13848:	e0f6      	b.n	13a38 <__aeabi_dsub+0x2b0>
   1384a:	0028      	movs	r0, r5
   1384c:	f000 fb1e 	bl	13e8c <__clzsi2>
   13850:	0003      	movs	r3, r0
   13852:	3b08      	subs	r3, #8
   13854:	2b1f      	cmp	r3, #31
   13856:	dd00      	ble.n	1385a <__aeabi_dsub+0xd2>
   13858:	e0e9      	b.n	13a2e <__aeabi_dsub+0x2a6>
   1385a:	2220      	movs	r2, #32
   1385c:	003c      	movs	r4, r7
   1385e:	1ad2      	subs	r2, r2, r3
   13860:	409d      	lsls	r5, r3
   13862:	40d4      	lsrs	r4, r2
   13864:	409f      	lsls	r7, r3
   13866:	4325      	orrs	r5, r4
   13868:	429e      	cmp	r6, r3
   1386a:	dd00      	ble.n	1386e <__aeabi_dsub+0xe6>
   1386c:	e0db      	b.n	13a26 <__aeabi_dsub+0x29e>
   1386e:	1b9e      	subs	r6, r3, r6
   13870:	1c73      	adds	r3, r6, #1
   13872:	2b1f      	cmp	r3, #31
   13874:	dd00      	ble.n	13878 <__aeabi_dsub+0xf0>
   13876:	e10a      	b.n	13a8e <__aeabi_dsub+0x306>
   13878:	2220      	movs	r2, #32
   1387a:	0038      	movs	r0, r7
   1387c:	1ad2      	subs	r2, r2, r3
   1387e:	0029      	movs	r1, r5
   13880:	4097      	lsls	r7, r2
   13882:	002c      	movs	r4, r5
   13884:	4091      	lsls	r1, r2
   13886:	40d8      	lsrs	r0, r3
   13888:	1e7a      	subs	r2, r7, #1
   1388a:	4197      	sbcs	r7, r2
   1388c:	40dc      	lsrs	r4, r3
   1388e:	2600      	movs	r6, #0
   13890:	4301      	orrs	r1, r0
   13892:	430f      	orrs	r7, r1
   13894:	077b      	lsls	r3, r7, #29
   13896:	d009      	beq.n	138ac <__aeabi_dsub+0x124>
   13898:	230f      	movs	r3, #15
   1389a:	403b      	ands	r3, r7
   1389c:	2b04      	cmp	r3, #4
   1389e:	d005      	beq.n	138ac <__aeabi_dsub+0x124>
   138a0:	1d3b      	adds	r3, r7, #4
   138a2:	42bb      	cmp	r3, r7
   138a4:	41bf      	sbcs	r7, r7
   138a6:	427f      	negs	r7, r7
   138a8:	19e4      	adds	r4, r4, r7
   138aa:	001f      	movs	r7, r3
   138ac:	0223      	lsls	r3, r4, #8
   138ae:	d525      	bpl.n	138fc <__aeabi_dsub+0x174>
   138b0:	4b86      	ldr	r3, [pc, #536]	; (13acc <__aeabi_dsub+0x344>)
   138b2:	3601      	adds	r6, #1
   138b4:	429e      	cmp	r6, r3
   138b6:	d100      	bne.n	138ba <__aeabi_dsub+0x132>
   138b8:	e0af      	b.n	13a1a <__aeabi_dsub+0x292>
   138ba:	4b85      	ldr	r3, [pc, #532]	; (13ad0 <__aeabi_dsub+0x348>)
   138bc:	2501      	movs	r5, #1
   138be:	401c      	ands	r4, r3
   138c0:	4643      	mov	r3, r8
   138c2:	0762      	lsls	r2, r4, #29
   138c4:	08ff      	lsrs	r7, r7, #3
   138c6:	0264      	lsls	r4, r4, #9
   138c8:	0576      	lsls	r6, r6, #21
   138ca:	4317      	orrs	r7, r2
   138cc:	0b24      	lsrs	r4, r4, #12
   138ce:	0d76      	lsrs	r6, r6, #21
   138d0:	401d      	ands	r5, r3
   138d2:	2100      	movs	r1, #0
   138d4:	0324      	lsls	r4, r4, #12
   138d6:	0b23      	lsrs	r3, r4, #12
   138d8:	0d0c      	lsrs	r4, r1, #20
   138da:	4a7e      	ldr	r2, [pc, #504]	; (13ad4 <__aeabi_dsub+0x34c>)
   138dc:	0524      	lsls	r4, r4, #20
   138de:	431c      	orrs	r4, r3
   138e0:	4014      	ands	r4, r2
   138e2:	0533      	lsls	r3, r6, #20
   138e4:	4323      	orrs	r3, r4
   138e6:	005b      	lsls	r3, r3, #1
   138e8:	07ed      	lsls	r5, r5, #31
   138ea:	085b      	lsrs	r3, r3, #1
   138ec:	432b      	orrs	r3, r5
   138ee:	0038      	movs	r0, r7
   138f0:	0019      	movs	r1, r3
   138f2:	bc1c      	pop	{r2, r3, r4}
   138f4:	4690      	mov	r8, r2
   138f6:	4699      	mov	r9, r3
   138f8:	46a2      	mov	sl, r4
   138fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   138fc:	2501      	movs	r5, #1
   138fe:	4643      	mov	r3, r8
   13900:	0762      	lsls	r2, r4, #29
   13902:	08ff      	lsrs	r7, r7, #3
   13904:	4317      	orrs	r7, r2
   13906:	08e4      	lsrs	r4, r4, #3
   13908:	401d      	ands	r5, r3
   1390a:	4b70      	ldr	r3, [pc, #448]	; (13acc <__aeabi_dsub+0x344>)
   1390c:	429e      	cmp	r6, r3
   1390e:	d036      	beq.n	1397e <__aeabi_dsub+0x1f6>
   13910:	0324      	lsls	r4, r4, #12
   13912:	0576      	lsls	r6, r6, #21
   13914:	0b24      	lsrs	r4, r4, #12
   13916:	0d76      	lsrs	r6, r6, #21
   13918:	e7db      	b.n	138d2 <__aeabi_dsub+0x14a>
   1391a:	4663      	mov	r3, ip
   1391c:	1af3      	subs	r3, r6, r3
   1391e:	2b00      	cmp	r3, #0
   13920:	dc00      	bgt.n	13924 <__aeabi_dsub+0x19c>
   13922:	e094      	b.n	13a4e <__aeabi_dsub+0x2c6>
   13924:	4660      	mov	r0, ip
   13926:	2800      	cmp	r0, #0
   13928:	d035      	beq.n	13996 <__aeabi_dsub+0x20e>
   1392a:	4868      	ldr	r0, [pc, #416]	; (13acc <__aeabi_dsub+0x344>)
   1392c:	4286      	cmp	r6, r0
   1392e:	d0b1      	beq.n	13894 <__aeabi_dsub+0x10c>
   13930:	2780      	movs	r7, #128	; 0x80
   13932:	043f      	lsls	r7, r7, #16
   13934:	4339      	orrs	r1, r7
   13936:	2b38      	cmp	r3, #56	; 0x38
   13938:	dc00      	bgt.n	1393c <__aeabi_dsub+0x1b4>
   1393a:	e0fd      	b.n	13b38 <__aeabi_dsub+0x3b0>
   1393c:	430a      	orrs	r2, r1
   1393e:	0017      	movs	r7, r2
   13940:	2100      	movs	r1, #0
   13942:	1e7a      	subs	r2, r7, #1
   13944:	4197      	sbcs	r7, r2
   13946:	4457      	add	r7, sl
   13948:	4557      	cmp	r7, sl
   1394a:	4180      	sbcs	r0, r0
   1394c:	1909      	adds	r1, r1, r4
   1394e:	4244      	negs	r4, r0
   13950:	190c      	adds	r4, r1, r4
   13952:	0223      	lsls	r3, r4, #8
   13954:	d53a      	bpl.n	139cc <__aeabi_dsub+0x244>
   13956:	4b5d      	ldr	r3, [pc, #372]	; (13acc <__aeabi_dsub+0x344>)
   13958:	3601      	adds	r6, #1
   1395a:	429e      	cmp	r6, r3
   1395c:	d100      	bne.n	13960 <__aeabi_dsub+0x1d8>
   1395e:	e14b      	b.n	13bf8 <__aeabi_dsub+0x470>
   13960:	2201      	movs	r2, #1
   13962:	4b5b      	ldr	r3, [pc, #364]	; (13ad0 <__aeabi_dsub+0x348>)
   13964:	401c      	ands	r4, r3
   13966:	087b      	lsrs	r3, r7, #1
   13968:	4017      	ands	r7, r2
   1396a:	431f      	orrs	r7, r3
   1396c:	07e2      	lsls	r2, r4, #31
   1396e:	4317      	orrs	r7, r2
   13970:	0864      	lsrs	r4, r4, #1
   13972:	e78f      	b.n	13894 <__aeabi_dsub+0x10c>
   13974:	0008      	movs	r0, r1
   13976:	4310      	orrs	r0, r2
   13978:	d000      	beq.n	1397c <__aeabi_dsub+0x1f4>
   1397a:	e724      	b.n	137c6 <__aeabi_dsub+0x3e>
   1397c:	e721      	b.n	137c2 <__aeabi_dsub+0x3a>
   1397e:	0023      	movs	r3, r4
   13980:	433b      	orrs	r3, r7
   13982:	d100      	bne.n	13986 <__aeabi_dsub+0x1fe>
   13984:	e1b9      	b.n	13cfa <__aeabi_dsub+0x572>
   13986:	2280      	movs	r2, #128	; 0x80
   13988:	0312      	lsls	r2, r2, #12
   1398a:	4314      	orrs	r4, r2
   1398c:	0324      	lsls	r4, r4, #12
   1398e:	0b24      	lsrs	r4, r4, #12
   13990:	e79f      	b.n	138d2 <__aeabi_dsub+0x14a>
   13992:	002e      	movs	r6, r5
   13994:	e77e      	b.n	13894 <__aeabi_dsub+0x10c>
   13996:	0008      	movs	r0, r1
   13998:	4310      	orrs	r0, r2
   1399a:	d100      	bne.n	1399e <__aeabi_dsub+0x216>
   1399c:	e0ca      	b.n	13b34 <__aeabi_dsub+0x3ac>
   1399e:	1e58      	subs	r0, r3, #1
   139a0:	4684      	mov	ip, r0
   139a2:	2800      	cmp	r0, #0
   139a4:	d000      	beq.n	139a8 <__aeabi_dsub+0x220>
   139a6:	e0e7      	b.n	13b78 <__aeabi_dsub+0x3f0>
   139a8:	4452      	add	r2, sl
   139aa:	4552      	cmp	r2, sl
   139ac:	4180      	sbcs	r0, r0
   139ae:	1864      	adds	r4, r4, r1
   139b0:	4240      	negs	r0, r0
   139b2:	1824      	adds	r4, r4, r0
   139b4:	0017      	movs	r7, r2
   139b6:	2601      	movs	r6, #1
   139b8:	0223      	lsls	r3, r4, #8
   139ba:	d507      	bpl.n	139cc <__aeabi_dsub+0x244>
   139bc:	2602      	movs	r6, #2
   139be:	e7cf      	b.n	13960 <__aeabi_dsub+0x1d8>
   139c0:	4664      	mov	r4, ip
   139c2:	432c      	orrs	r4, r5
   139c4:	d100      	bne.n	139c8 <__aeabi_dsub+0x240>
   139c6:	e1b3      	b.n	13d30 <__aeabi_dsub+0x5a8>
   139c8:	002c      	movs	r4, r5
   139ca:	4667      	mov	r7, ip
   139cc:	077b      	lsls	r3, r7, #29
   139ce:	d000      	beq.n	139d2 <__aeabi_dsub+0x24a>
   139d0:	e762      	b.n	13898 <__aeabi_dsub+0x110>
   139d2:	0763      	lsls	r3, r4, #29
   139d4:	08ff      	lsrs	r7, r7, #3
   139d6:	431f      	orrs	r7, r3
   139d8:	2501      	movs	r5, #1
   139da:	4643      	mov	r3, r8
   139dc:	08e4      	lsrs	r4, r4, #3
   139de:	401d      	ands	r5, r3
   139e0:	e793      	b.n	1390a <__aeabi_dsub+0x182>
   139e2:	2d00      	cmp	r5, #0
   139e4:	d178      	bne.n	13ad8 <__aeabi_dsub+0x350>
   139e6:	1c75      	adds	r5, r6, #1
   139e8:	056d      	lsls	r5, r5, #21
   139ea:	0d6d      	lsrs	r5, r5, #21
   139ec:	2d01      	cmp	r5, #1
   139ee:	dc00      	bgt.n	139f2 <__aeabi_dsub+0x26a>
   139f0:	e0f2      	b.n	13bd8 <__aeabi_dsub+0x450>
   139f2:	4650      	mov	r0, sl
   139f4:	1a80      	subs	r0, r0, r2
   139f6:	4582      	cmp	sl, r0
   139f8:	41bf      	sbcs	r7, r7
   139fa:	1a65      	subs	r5, r4, r1
   139fc:	427f      	negs	r7, r7
   139fe:	1bed      	subs	r5, r5, r7
   13a00:	4684      	mov	ip, r0
   13a02:	0228      	lsls	r0, r5, #8
   13a04:	d400      	bmi.n	13a08 <__aeabi_dsub+0x280>
   13a06:	e08c      	b.n	13b22 <__aeabi_dsub+0x39a>
   13a08:	4650      	mov	r0, sl
   13a0a:	1a17      	subs	r7, r2, r0
   13a0c:	42ba      	cmp	r2, r7
   13a0e:	4192      	sbcs	r2, r2
   13a10:	1b0c      	subs	r4, r1, r4
   13a12:	4255      	negs	r5, r2
   13a14:	1b65      	subs	r5, r4, r5
   13a16:	4698      	mov	r8, r3
   13a18:	e714      	b.n	13844 <__aeabi_dsub+0xbc>
   13a1a:	2501      	movs	r5, #1
   13a1c:	4643      	mov	r3, r8
   13a1e:	2400      	movs	r4, #0
   13a20:	401d      	ands	r5, r3
   13a22:	2700      	movs	r7, #0
   13a24:	e755      	b.n	138d2 <__aeabi_dsub+0x14a>
   13a26:	4c2a      	ldr	r4, [pc, #168]	; (13ad0 <__aeabi_dsub+0x348>)
   13a28:	1af6      	subs	r6, r6, r3
   13a2a:	402c      	ands	r4, r5
   13a2c:	e732      	b.n	13894 <__aeabi_dsub+0x10c>
   13a2e:	003d      	movs	r5, r7
   13a30:	3828      	subs	r0, #40	; 0x28
   13a32:	4085      	lsls	r5, r0
   13a34:	2700      	movs	r7, #0
   13a36:	e717      	b.n	13868 <__aeabi_dsub+0xe0>
   13a38:	0038      	movs	r0, r7
   13a3a:	f000 fa27 	bl	13e8c <__clzsi2>
   13a3e:	3020      	adds	r0, #32
   13a40:	e706      	b.n	13850 <__aeabi_dsub+0xc8>
   13a42:	430a      	orrs	r2, r1
   13a44:	0017      	movs	r7, r2
   13a46:	2100      	movs	r1, #0
   13a48:	1e7a      	subs	r2, r7, #1
   13a4a:	4197      	sbcs	r7, r2
   13a4c:	e6ee      	b.n	1382c <__aeabi_dsub+0xa4>
   13a4e:	2b00      	cmp	r3, #0
   13a50:	d000      	beq.n	13a54 <__aeabi_dsub+0x2cc>
   13a52:	e0e5      	b.n	13c20 <__aeabi_dsub+0x498>
   13a54:	1c73      	adds	r3, r6, #1
   13a56:	469c      	mov	ip, r3
   13a58:	055b      	lsls	r3, r3, #21
   13a5a:	0d5b      	lsrs	r3, r3, #21
   13a5c:	2b01      	cmp	r3, #1
   13a5e:	dc00      	bgt.n	13a62 <__aeabi_dsub+0x2da>
   13a60:	e09f      	b.n	13ba2 <__aeabi_dsub+0x41a>
   13a62:	4b1a      	ldr	r3, [pc, #104]	; (13acc <__aeabi_dsub+0x344>)
   13a64:	459c      	cmp	ip, r3
   13a66:	d100      	bne.n	13a6a <__aeabi_dsub+0x2e2>
   13a68:	e0c5      	b.n	13bf6 <__aeabi_dsub+0x46e>
   13a6a:	4452      	add	r2, sl
   13a6c:	4552      	cmp	r2, sl
   13a6e:	4180      	sbcs	r0, r0
   13a70:	1864      	adds	r4, r4, r1
   13a72:	4240      	negs	r0, r0
   13a74:	1824      	adds	r4, r4, r0
   13a76:	07e7      	lsls	r7, r4, #31
   13a78:	0852      	lsrs	r2, r2, #1
   13a7a:	4317      	orrs	r7, r2
   13a7c:	0864      	lsrs	r4, r4, #1
   13a7e:	4666      	mov	r6, ip
   13a80:	e708      	b.n	13894 <__aeabi_dsub+0x10c>
   13a82:	4812      	ldr	r0, [pc, #72]	; (13acc <__aeabi_dsub+0x344>)
   13a84:	4285      	cmp	r5, r0
   13a86:	d100      	bne.n	13a8a <__aeabi_dsub+0x302>
   13a88:	e085      	b.n	13b96 <__aeabi_dsub+0x40e>
   13a8a:	001d      	movs	r5, r3
   13a8c:	e6bc      	b.n	13808 <__aeabi_dsub+0x80>
   13a8e:	0029      	movs	r1, r5
   13a90:	3e1f      	subs	r6, #31
   13a92:	40f1      	lsrs	r1, r6
   13a94:	2b20      	cmp	r3, #32
   13a96:	d100      	bne.n	13a9a <__aeabi_dsub+0x312>
   13a98:	e07f      	b.n	13b9a <__aeabi_dsub+0x412>
   13a9a:	2240      	movs	r2, #64	; 0x40
   13a9c:	1ad3      	subs	r3, r2, r3
   13a9e:	409d      	lsls	r5, r3
   13aa0:	432f      	orrs	r7, r5
   13aa2:	1e7d      	subs	r5, r7, #1
   13aa4:	41af      	sbcs	r7, r5
   13aa6:	2400      	movs	r4, #0
   13aa8:	430f      	orrs	r7, r1
   13aaa:	2600      	movs	r6, #0
   13aac:	e78e      	b.n	139cc <__aeabi_dsub+0x244>
   13aae:	002b      	movs	r3, r5
   13ab0:	000f      	movs	r7, r1
   13ab2:	3b20      	subs	r3, #32
   13ab4:	40df      	lsrs	r7, r3
   13ab6:	2d20      	cmp	r5, #32
   13ab8:	d071      	beq.n	13b9e <__aeabi_dsub+0x416>
   13aba:	2340      	movs	r3, #64	; 0x40
   13abc:	1b5d      	subs	r5, r3, r5
   13abe:	40a9      	lsls	r1, r5
   13ac0:	430a      	orrs	r2, r1
   13ac2:	1e51      	subs	r1, r2, #1
   13ac4:	418a      	sbcs	r2, r1
   13ac6:	2100      	movs	r1, #0
   13ac8:	4317      	orrs	r7, r2
   13aca:	e6af      	b.n	1382c <__aeabi_dsub+0xa4>
   13acc:	000007ff 	.word	0x000007ff
   13ad0:	ff7fffff 	.word	0xff7fffff
   13ad4:	800fffff 	.word	0x800fffff
   13ad8:	2e00      	cmp	r6, #0
   13ada:	d03e      	beq.n	13b5a <__aeabi_dsub+0x3d2>
   13adc:	4eb3      	ldr	r6, [pc, #716]	; (13dac <__aeabi_dsub+0x624>)
   13ade:	45b4      	cmp	ip, r6
   13ae0:	d045      	beq.n	13b6e <__aeabi_dsub+0x3e6>
   13ae2:	2680      	movs	r6, #128	; 0x80
   13ae4:	0436      	lsls	r6, r6, #16
   13ae6:	426d      	negs	r5, r5
   13ae8:	4334      	orrs	r4, r6
   13aea:	2d38      	cmp	r5, #56	; 0x38
   13aec:	dd00      	ble.n	13af0 <__aeabi_dsub+0x368>
   13aee:	e0a8      	b.n	13c42 <__aeabi_dsub+0x4ba>
   13af0:	2d1f      	cmp	r5, #31
   13af2:	dd00      	ble.n	13af6 <__aeabi_dsub+0x36e>
   13af4:	e11f      	b.n	13d36 <__aeabi_dsub+0x5ae>
   13af6:	2620      	movs	r6, #32
   13af8:	0027      	movs	r7, r4
   13afa:	4650      	mov	r0, sl
   13afc:	1b76      	subs	r6, r6, r5
   13afe:	40b7      	lsls	r7, r6
   13b00:	40e8      	lsrs	r0, r5
   13b02:	4307      	orrs	r7, r0
   13b04:	4650      	mov	r0, sl
   13b06:	40b0      	lsls	r0, r6
   13b08:	1e46      	subs	r6, r0, #1
   13b0a:	41b0      	sbcs	r0, r6
   13b0c:	40ec      	lsrs	r4, r5
   13b0e:	4338      	orrs	r0, r7
   13b10:	1a17      	subs	r7, r2, r0
   13b12:	42ba      	cmp	r2, r7
   13b14:	4192      	sbcs	r2, r2
   13b16:	1b0c      	subs	r4, r1, r4
   13b18:	4252      	negs	r2, r2
   13b1a:	1aa4      	subs	r4, r4, r2
   13b1c:	4666      	mov	r6, ip
   13b1e:	4698      	mov	r8, r3
   13b20:	e68b      	b.n	1383a <__aeabi_dsub+0xb2>
   13b22:	4664      	mov	r4, ip
   13b24:	4667      	mov	r7, ip
   13b26:	432c      	orrs	r4, r5
   13b28:	d000      	beq.n	13b2c <__aeabi_dsub+0x3a4>
   13b2a:	e68b      	b.n	13844 <__aeabi_dsub+0xbc>
   13b2c:	2500      	movs	r5, #0
   13b2e:	2600      	movs	r6, #0
   13b30:	2700      	movs	r7, #0
   13b32:	e6ea      	b.n	1390a <__aeabi_dsub+0x182>
   13b34:	001e      	movs	r6, r3
   13b36:	e6ad      	b.n	13894 <__aeabi_dsub+0x10c>
   13b38:	2b1f      	cmp	r3, #31
   13b3a:	dc60      	bgt.n	13bfe <__aeabi_dsub+0x476>
   13b3c:	2720      	movs	r7, #32
   13b3e:	1af8      	subs	r0, r7, r3
   13b40:	000f      	movs	r7, r1
   13b42:	4684      	mov	ip, r0
   13b44:	4087      	lsls	r7, r0
   13b46:	0010      	movs	r0, r2
   13b48:	40d8      	lsrs	r0, r3
   13b4a:	4307      	orrs	r7, r0
   13b4c:	4660      	mov	r0, ip
   13b4e:	4082      	lsls	r2, r0
   13b50:	1e50      	subs	r0, r2, #1
   13b52:	4182      	sbcs	r2, r0
   13b54:	40d9      	lsrs	r1, r3
   13b56:	4317      	orrs	r7, r2
   13b58:	e6f5      	b.n	13946 <__aeabi_dsub+0x1be>
   13b5a:	0026      	movs	r6, r4
   13b5c:	4650      	mov	r0, sl
   13b5e:	4306      	orrs	r6, r0
   13b60:	d005      	beq.n	13b6e <__aeabi_dsub+0x3e6>
   13b62:	43ed      	mvns	r5, r5
   13b64:	2d00      	cmp	r5, #0
   13b66:	d0d3      	beq.n	13b10 <__aeabi_dsub+0x388>
   13b68:	4e90      	ldr	r6, [pc, #576]	; (13dac <__aeabi_dsub+0x624>)
   13b6a:	45b4      	cmp	ip, r6
   13b6c:	d1bd      	bne.n	13aea <__aeabi_dsub+0x362>
   13b6e:	000c      	movs	r4, r1
   13b70:	0017      	movs	r7, r2
   13b72:	4666      	mov	r6, ip
   13b74:	4698      	mov	r8, r3
   13b76:	e68d      	b.n	13894 <__aeabi_dsub+0x10c>
   13b78:	488c      	ldr	r0, [pc, #560]	; (13dac <__aeabi_dsub+0x624>)
   13b7a:	4283      	cmp	r3, r0
   13b7c:	d00b      	beq.n	13b96 <__aeabi_dsub+0x40e>
   13b7e:	4663      	mov	r3, ip
   13b80:	e6d9      	b.n	13936 <__aeabi_dsub+0x1ae>
   13b82:	2d00      	cmp	r5, #0
   13b84:	d000      	beq.n	13b88 <__aeabi_dsub+0x400>
   13b86:	e096      	b.n	13cb6 <__aeabi_dsub+0x52e>
   13b88:	0008      	movs	r0, r1
   13b8a:	4310      	orrs	r0, r2
   13b8c:	d100      	bne.n	13b90 <__aeabi_dsub+0x408>
   13b8e:	e0e2      	b.n	13d56 <__aeabi_dsub+0x5ce>
   13b90:	000c      	movs	r4, r1
   13b92:	0017      	movs	r7, r2
   13b94:	4698      	mov	r8, r3
   13b96:	4e85      	ldr	r6, [pc, #532]	; (13dac <__aeabi_dsub+0x624>)
   13b98:	e67c      	b.n	13894 <__aeabi_dsub+0x10c>
   13b9a:	2500      	movs	r5, #0
   13b9c:	e780      	b.n	13aa0 <__aeabi_dsub+0x318>
   13b9e:	2100      	movs	r1, #0
   13ba0:	e78e      	b.n	13ac0 <__aeabi_dsub+0x338>
   13ba2:	0023      	movs	r3, r4
   13ba4:	4650      	mov	r0, sl
   13ba6:	4303      	orrs	r3, r0
   13ba8:	2e00      	cmp	r6, #0
   13baa:	d000      	beq.n	13bae <__aeabi_dsub+0x426>
   13bac:	e0a8      	b.n	13d00 <__aeabi_dsub+0x578>
   13bae:	2b00      	cmp	r3, #0
   13bb0:	d100      	bne.n	13bb4 <__aeabi_dsub+0x42c>
   13bb2:	e0de      	b.n	13d72 <__aeabi_dsub+0x5ea>
   13bb4:	000b      	movs	r3, r1
   13bb6:	4313      	orrs	r3, r2
   13bb8:	d100      	bne.n	13bbc <__aeabi_dsub+0x434>
   13bba:	e66b      	b.n	13894 <__aeabi_dsub+0x10c>
   13bbc:	4452      	add	r2, sl
   13bbe:	4552      	cmp	r2, sl
   13bc0:	4180      	sbcs	r0, r0
   13bc2:	1864      	adds	r4, r4, r1
   13bc4:	4240      	negs	r0, r0
   13bc6:	1824      	adds	r4, r4, r0
   13bc8:	0017      	movs	r7, r2
   13bca:	0223      	lsls	r3, r4, #8
   13bcc:	d400      	bmi.n	13bd0 <__aeabi_dsub+0x448>
   13bce:	e6fd      	b.n	139cc <__aeabi_dsub+0x244>
   13bd0:	4b77      	ldr	r3, [pc, #476]	; (13db0 <__aeabi_dsub+0x628>)
   13bd2:	4666      	mov	r6, ip
   13bd4:	401c      	ands	r4, r3
   13bd6:	e65d      	b.n	13894 <__aeabi_dsub+0x10c>
   13bd8:	0025      	movs	r5, r4
   13bda:	4650      	mov	r0, sl
   13bdc:	4305      	orrs	r5, r0
   13bde:	2e00      	cmp	r6, #0
   13be0:	d1cf      	bne.n	13b82 <__aeabi_dsub+0x3fa>
   13be2:	2d00      	cmp	r5, #0
   13be4:	d14f      	bne.n	13c86 <__aeabi_dsub+0x4fe>
   13be6:	000c      	movs	r4, r1
   13be8:	4314      	orrs	r4, r2
   13bea:	d100      	bne.n	13bee <__aeabi_dsub+0x466>
   13bec:	e0a0      	b.n	13d30 <__aeabi_dsub+0x5a8>
   13bee:	000c      	movs	r4, r1
   13bf0:	0017      	movs	r7, r2
   13bf2:	4698      	mov	r8, r3
   13bf4:	e64e      	b.n	13894 <__aeabi_dsub+0x10c>
   13bf6:	4666      	mov	r6, ip
   13bf8:	2400      	movs	r4, #0
   13bfa:	2700      	movs	r7, #0
   13bfc:	e685      	b.n	1390a <__aeabi_dsub+0x182>
   13bfe:	001f      	movs	r7, r3
   13c00:	0008      	movs	r0, r1
   13c02:	3f20      	subs	r7, #32
   13c04:	40f8      	lsrs	r0, r7
   13c06:	0007      	movs	r7, r0
   13c08:	2b20      	cmp	r3, #32
   13c0a:	d100      	bne.n	13c0e <__aeabi_dsub+0x486>
   13c0c:	e08e      	b.n	13d2c <__aeabi_dsub+0x5a4>
   13c0e:	2040      	movs	r0, #64	; 0x40
   13c10:	1ac3      	subs	r3, r0, r3
   13c12:	4099      	lsls	r1, r3
   13c14:	430a      	orrs	r2, r1
   13c16:	1e51      	subs	r1, r2, #1
   13c18:	418a      	sbcs	r2, r1
   13c1a:	2100      	movs	r1, #0
   13c1c:	4317      	orrs	r7, r2
   13c1e:	e692      	b.n	13946 <__aeabi_dsub+0x1be>
   13c20:	2e00      	cmp	r6, #0
   13c22:	d114      	bne.n	13c4e <__aeabi_dsub+0x4c6>
   13c24:	0026      	movs	r6, r4
   13c26:	4650      	mov	r0, sl
   13c28:	4306      	orrs	r6, r0
   13c2a:	d062      	beq.n	13cf2 <__aeabi_dsub+0x56a>
   13c2c:	43db      	mvns	r3, r3
   13c2e:	2b00      	cmp	r3, #0
   13c30:	d15c      	bne.n	13cec <__aeabi_dsub+0x564>
   13c32:	1887      	adds	r7, r0, r2
   13c34:	4297      	cmp	r7, r2
   13c36:	4192      	sbcs	r2, r2
   13c38:	1864      	adds	r4, r4, r1
   13c3a:	4252      	negs	r2, r2
   13c3c:	18a4      	adds	r4, r4, r2
   13c3e:	4666      	mov	r6, ip
   13c40:	e687      	b.n	13952 <__aeabi_dsub+0x1ca>
   13c42:	4650      	mov	r0, sl
   13c44:	4320      	orrs	r0, r4
   13c46:	1e44      	subs	r4, r0, #1
   13c48:	41a0      	sbcs	r0, r4
   13c4a:	2400      	movs	r4, #0
   13c4c:	e760      	b.n	13b10 <__aeabi_dsub+0x388>
   13c4e:	4e57      	ldr	r6, [pc, #348]	; (13dac <__aeabi_dsub+0x624>)
   13c50:	45b4      	cmp	ip, r6
   13c52:	d04e      	beq.n	13cf2 <__aeabi_dsub+0x56a>
   13c54:	2680      	movs	r6, #128	; 0x80
   13c56:	0436      	lsls	r6, r6, #16
   13c58:	425b      	negs	r3, r3
   13c5a:	4334      	orrs	r4, r6
   13c5c:	2b38      	cmp	r3, #56	; 0x38
   13c5e:	dd00      	ble.n	13c62 <__aeabi_dsub+0x4da>
   13c60:	e07f      	b.n	13d62 <__aeabi_dsub+0x5da>
   13c62:	2b1f      	cmp	r3, #31
   13c64:	dd00      	ble.n	13c68 <__aeabi_dsub+0x4e0>
   13c66:	e08b      	b.n	13d80 <__aeabi_dsub+0x5f8>
   13c68:	2620      	movs	r6, #32
   13c6a:	0027      	movs	r7, r4
   13c6c:	4650      	mov	r0, sl
   13c6e:	1af6      	subs	r6, r6, r3
   13c70:	40b7      	lsls	r7, r6
   13c72:	40d8      	lsrs	r0, r3
   13c74:	4307      	orrs	r7, r0
   13c76:	4650      	mov	r0, sl
   13c78:	40b0      	lsls	r0, r6
   13c7a:	1e46      	subs	r6, r0, #1
   13c7c:	41b0      	sbcs	r0, r6
   13c7e:	4307      	orrs	r7, r0
   13c80:	40dc      	lsrs	r4, r3
   13c82:	18bf      	adds	r7, r7, r2
   13c84:	e7d6      	b.n	13c34 <__aeabi_dsub+0x4ac>
   13c86:	000d      	movs	r5, r1
   13c88:	4315      	orrs	r5, r2
   13c8a:	d100      	bne.n	13c8e <__aeabi_dsub+0x506>
   13c8c:	e602      	b.n	13894 <__aeabi_dsub+0x10c>
   13c8e:	4650      	mov	r0, sl
   13c90:	1a80      	subs	r0, r0, r2
   13c92:	4582      	cmp	sl, r0
   13c94:	41bf      	sbcs	r7, r7
   13c96:	1a65      	subs	r5, r4, r1
   13c98:	427f      	negs	r7, r7
   13c9a:	1bed      	subs	r5, r5, r7
   13c9c:	4684      	mov	ip, r0
   13c9e:	0228      	lsls	r0, r5, #8
   13ca0:	d400      	bmi.n	13ca4 <__aeabi_dsub+0x51c>
   13ca2:	e68d      	b.n	139c0 <__aeabi_dsub+0x238>
   13ca4:	4650      	mov	r0, sl
   13ca6:	1a17      	subs	r7, r2, r0
   13ca8:	42ba      	cmp	r2, r7
   13caa:	4192      	sbcs	r2, r2
   13cac:	1b0c      	subs	r4, r1, r4
   13cae:	4252      	negs	r2, r2
   13cb0:	1aa4      	subs	r4, r4, r2
   13cb2:	4698      	mov	r8, r3
   13cb4:	e5ee      	b.n	13894 <__aeabi_dsub+0x10c>
   13cb6:	000d      	movs	r5, r1
   13cb8:	4315      	orrs	r5, r2
   13cba:	d100      	bne.n	13cbe <__aeabi_dsub+0x536>
   13cbc:	e76b      	b.n	13b96 <__aeabi_dsub+0x40e>
   13cbe:	4650      	mov	r0, sl
   13cc0:	0767      	lsls	r7, r4, #29
   13cc2:	08c0      	lsrs	r0, r0, #3
   13cc4:	4307      	orrs	r7, r0
   13cc6:	2080      	movs	r0, #128	; 0x80
   13cc8:	08e4      	lsrs	r4, r4, #3
   13cca:	0300      	lsls	r0, r0, #12
   13ccc:	4204      	tst	r4, r0
   13cce:	d007      	beq.n	13ce0 <__aeabi_dsub+0x558>
   13cd0:	08cd      	lsrs	r5, r1, #3
   13cd2:	4205      	tst	r5, r0
   13cd4:	d104      	bne.n	13ce0 <__aeabi_dsub+0x558>
   13cd6:	002c      	movs	r4, r5
   13cd8:	4698      	mov	r8, r3
   13cda:	08d7      	lsrs	r7, r2, #3
   13cdc:	0749      	lsls	r1, r1, #29
   13cde:	430f      	orrs	r7, r1
   13ce0:	0f7b      	lsrs	r3, r7, #29
   13ce2:	00e4      	lsls	r4, r4, #3
   13ce4:	431c      	orrs	r4, r3
   13ce6:	00ff      	lsls	r7, r7, #3
   13ce8:	4e30      	ldr	r6, [pc, #192]	; (13dac <__aeabi_dsub+0x624>)
   13cea:	e5d3      	b.n	13894 <__aeabi_dsub+0x10c>
   13cec:	4e2f      	ldr	r6, [pc, #188]	; (13dac <__aeabi_dsub+0x624>)
   13cee:	45b4      	cmp	ip, r6
   13cf0:	d1b4      	bne.n	13c5c <__aeabi_dsub+0x4d4>
   13cf2:	000c      	movs	r4, r1
   13cf4:	0017      	movs	r7, r2
   13cf6:	4666      	mov	r6, ip
   13cf8:	e5cc      	b.n	13894 <__aeabi_dsub+0x10c>
   13cfa:	2700      	movs	r7, #0
   13cfc:	2400      	movs	r4, #0
   13cfe:	e5e8      	b.n	138d2 <__aeabi_dsub+0x14a>
   13d00:	2b00      	cmp	r3, #0
   13d02:	d039      	beq.n	13d78 <__aeabi_dsub+0x5f0>
   13d04:	000b      	movs	r3, r1
   13d06:	4313      	orrs	r3, r2
   13d08:	d100      	bne.n	13d0c <__aeabi_dsub+0x584>
   13d0a:	e744      	b.n	13b96 <__aeabi_dsub+0x40e>
   13d0c:	08c0      	lsrs	r0, r0, #3
   13d0e:	0767      	lsls	r7, r4, #29
   13d10:	4307      	orrs	r7, r0
   13d12:	2080      	movs	r0, #128	; 0x80
   13d14:	08e4      	lsrs	r4, r4, #3
   13d16:	0300      	lsls	r0, r0, #12
   13d18:	4204      	tst	r4, r0
   13d1a:	d0e1      	beq.n	13ce0 <__aeabi_dsub+0x558>
   13d1c:	08cb      	lsrs	r3, r1, #3
   13d1e:	4203      	tst	r3, r0
   13d20:	d1de      	bne.n	13ce0 <__aeabi_dsub+0x558>
   13d22:	08d7      	lsrs	r7, r2, #3
   13d24:	0749      	lsls	r1, r1, #29
   13d26:	430f      	orrs	r7, r1
   13d28:	001c      	movs	r4, r3
   13d2a:	e7d9      	b.n	13ce0 <__aeabi_dsub+0x558>
   13d2c:	2100      	movs	r1, #0
   13d2e:	e771      	b.n	13c14 <__aeabi_dsub+0x48c>
   13d30:	2500      	movs	r5, #0
   13d32:	2700      	movs	r7, #0
   13d34:	e5e9      	b.n	1390a <__aeabi_dsub+0x182>
   13d36:	002e      	movs	r6, r5
   13d38:	0027      	movs	r7, r4
   13d3a:	3e20      	subs	r6, #32
   13d3c:	40f7      	lsrs	r7, r6
   13d3e:	2d20      	cmp	r5, #32
   13d40:	d02f      	beq.n	13da2 <__aeabi_dsub+0x61a>
   13d42:	2640      	movs	r6, #64	; 0x40
   13d44:	1b75      	subs	r5, r6, r5
   13d46:	40ac      	lsls	r4, r5
   13d48:	4650      	mov	r0, sl
   13d4a:	4320      	orrs	r0, r4
   13d4c:	1e44      	subs	r4, r0, #1
   13d4e:	41a0      	sbcs	r0, r4
   13d50:	2400      	movs	r4, #0
   13d52:	4338      	orrs	r0, r7
   13d54:	e6dc      	b.n	13b10 <__aeabi_dsub+0x388>
   13d56:	2480      	movs	r4, #128	; 0x80
   13d58:	2500      	movs	r5, #0
   13d5a:	0324      	lsls	r4, r4, #12
   13d5c:	4e13      	ldr	r6, [pc, #76]	; (13dac <__aeabi_dsub+0x624>)
   13d5e:	2700      	movs	r7, #0
   13d60:	e5d3      	b.n	1390a <__aeabi_dsub+0x182>
   13d62:	4650      	mov	r0, sl
   13d64:	4320      	orrs	r0, r4
   13d66:	0007      	movs	r7, r0
   13d68:	1e78      	subs	r0, r7, #1
   13d6a:	4187      	sbcs	r7, r0
   13d6c:	2400      	movs	r4, #0
   13d6e:	18bf      	adds	r7, r7, r2
   13d70:	e760      	b.n	13c34 <__aeabi_dsub+0x4ac>
   13d72:	000c      	movs	r4, r1
   13d74:	0017      	movs	r7, r2
   13d76:	e58d      	b.n	13894 <__aeabi_dsub+0x10c>
   13d78:	000c      	movs	r4, r1
   13d7a:	0017      	movs	r7, r2
   13d7c:	4e0b      	ldr	r6, [pc, #44]	; (13dac <__aeabi_dsub+0x624>)
   13d7e:	e589      	b.n	13894 <__aeabi_dsub+0x10c>
   13d80:	001e      	movs	r6, r3
   13d82:	0027      	movs	r7, r4
   13d84:	3e20      	subs	r6, #32
   13d86:	40f7      	lsrs	r7, r6
   13d88:	2b20      	cmp	r3, #32
   13d8a:	d00c      	beq.n	13da6 <__aeabi_dsub+0x61e>
   13d8c:	2640      	movs	r6, #64	; 0x40
   13d8e:	1af3      	subs	r3, r6, r3
   13d90:	409c      	lsls	r4, r3
   13d92:	4650      	mov	r0, sl
   13d94:	4320      	orrs	r0, r4
   13d96:	1e44      	subs	r4, r0, #1
   13d98:	41a0      	sbcs	r0, r4
   13d9a:	4307      	orrs	r7, r0
   13d9c:	2400      	movs	r4, #0
   13d9e:	18bf      	adds	r7, r7, r2
   13da0:	e748      	b.n	13c34 <__aeabi_dsub+0x4ac>
   13da2:	2400      	movs	r4, #0
   13da4:	e7d0      	b.n	13d48 <__aeabi_dsub+0x5c0>
   13da6:	2400      	movs	r4, #0
   13da8:	e7f3      	b.n	13d92 <__aeabi_dsub+0x60a>
   13daa:	46c0      	nop			; (mov r8, r8)
   13dac:	000007ff 	.word	0x000007ff
   13db0:	ff7fffff 	.word	0xff7fffff

00013db4 <__aeabi_d2iz>:
   13db4:	b530      	push	{r4, r5, lr}
   13db6:	4d13      	ldr	r5, [pc, #76]	; (13e04 <__aeabi_d2iz+0x50>)
   13db8:	030a      	lsls	r2, r1, #12
   13dba:	004b      	lsls	r3, r1, #1
   13dbc:	0b12      	lsrs	r2, r2, #12
   13dbe:	0d5b      	lsrs	r3, r3, #21
   13dc0:	0fc9      	lsrs	r1, r1, #31
   13dc2:	2400      	movs	r4, #0
   13dc4:	42ab      	cmp	r3, r5
   13dc6:	dd10      	ble.n	13dea <__aeabi_d2iz+0x36>
   13dc8:	4c0f      	ldr	r4, [pc, #60]	; (13e08 <__aeabi_d2iz+0x54>)
   13dca:	42a3      	cmp	r3, r4
   13dcc:	dc0f      	bgt.n	13dee <__aeabi_d2iz+0x3a>
   13dce:	2480      	movs	r4, #128	; 0x80
   13dd0:	4d0e      	ldr	r5, [pc, #56]	; (13e0c <__aeabi_d2iz+0x58>)
   13dd2:	0364      	lsls	r4, r4, #13
   13dd4:	4322      	orrs	r2, r4
   13dd6:	1aed      	subs	r5, r5, r3
   13dd8:	2d1f      	cmp	r5, #31
   13dda:	dd0b      	ble.n	13df4 <__aeabi_d2iz+0x40>
   13ddc:	480c      	ldr	r0, [pc, #48]	; (13e10 <__aeabi_d2iz+0x5c>)
   13dde:	1ac3      	subs	r3, r0, r3
   13de0:	40da      	lsrs	r2, r3
   13de2:	4254      	negs	r4, r2
   13de4:	2900      	cmp	r1, #0
   13de6:	d100      	bne.n	13dea <__aeabi_d2iz+0x36>
   13de8:	0014      	movs	r4, r2
   13dea:	0020      	movs	r0, r4
   13dec:	bd30      	pop	{r4, r5, pc}
   13dee:	4b09      	ldr	r3, [pc, #36]	; (13e14 <__aeabi_d2iz+0x60>)
   13df0:	18cc      	adds	r4, r1, r3
   13df2:	e7fa      	b.n	13dea <__aeabi_d2iz+0x36>
   13df4:	4c08      	ldr	r4, [pc, #32]	; (13e18 <__aeabi_d2iz+0x64>)
   13df6:	40e8      	lsrs	r0, r5
   13df8:	46a4      	mov	ip, r4
   13dfa:	4463      	add	r3, ip
   13dfc:	409a      	lsls	r2, r3
   13dfe:	4302      	orrs	r2, r0
   13e00:	e7ef      	b.n	13de2 <__aeabi_d2iz+0x2e>
   13e02:	46c0      	nop			; (mov r8, r8)
   13e04:	000003fe 	.word	0x000003fe
   13e08:	0000041d 	.word	0x0000041d
   13e0c:	00000433 	.word	0x00000433
   13e10:	00000413 	.word	0x00000413
   13e14:	7fffffff 	.word	0x7fffffff
   13e18:	fffffbed 	.word	0xfffffbed

00013e1c <__aeabi_ui2d>:
   13e1c:	b510      	push	{r4, lr}
   13e1e:	1e04      	subs	r4, r0, #0
   13e20:	d028      	beq.n	13e74 <__aeabi_ui2d+0x58>
   13e22:	f000 f833 	bl	13e8c <__clzsi2>
   13e26:	4b15      	ldr	r3, [pc, #84]	; (13e7c <__aeabi_ui2d+0x60>)
   13e28:	4a15      	ldr	r2, [pc, #84]	; (13e80 <__aeabi_ui2d+0x64>)
   13e2a:	1a1b      	subs	r3, r3, r0
   13e2c:	1ad2      	subs	r2, r2, r3
   13e2e:	2a1f      	cmp	r2, #31
   13e30:	dd15      	ble.n	13e5e <__aeabi_ui2d+0x42>
   13e32:	4a14      	ldr	r2, [pc, #80]	; (13e84 <__aeabi_ui2d+0x68>)
   13e34:	1ad2      	subs	r2, r2, r3
   13e36:	4094      	lsls	r4, r2
   13e38:	2200      	movs	r2, #0
   13e3a:	0324      	lsls	r4, r4, #12
   13e3c:	055b      	lsls	r3, r3, #21
   13e3e:	0b24      	lsrs	r4, r4, #12
   13e40:	0d5b      	lsrs	r3, r3, #21
   13e42:	2100      	movs	r1, #0
   13e44:	0010      	movs	r0, r2
   13e46:	0324      	lsls	r4, r4, #12
   13e48:	0d0a      	lsrs	r2, r1, #20
   13e4a:	0b24      	lsrs	r4, r4, #12
   13e4c:	0512      	lsls	r2, r2, #20
   13e4e:	4322      	orrs	r2, r4
   13e50:	4c0d      	ldr	r4, [pc, #52]	; (13e88 <__aeabi_ui2d+0x6c>)
   13e52:	051b      	lsls	r3, r3, #20
   13e54:	4022      	ands	r2, r4
   13e56:	4313      	orrs	r3, r2
   13e58:	005b      	lsls	r3, r3, #1
   13e5a:	0859      	lsrs	r1, r3, #1
   13e5c:	bd10      	pop	{r4, pc}
   13e5e:	0021      	movs	r1, r4
   13e60:	4091      	lsls	r1, r2
   13e62:	000a      	movs	r2, r1
   13e64:	210b      	movs	r1, #11
   13e66:	1a08      	subs	r0, r1, r0
   13e68:	40c4      	lsrs	r4, r0
   13e6a:	055b      	lsls	r3, r3, #21
   13e6c:	0324      	lsls	r4, r4, #12
   13e6e:	0b24      	lsrs	r4, r4, #12
   13e70:	0d5b      	lsrs	r3, r3, #21
   13e72:	e7e6      	b.n	13e42 <__aeabi_ui2d+0x26>
   13e74:	2300      	movs	r3, #0
   13e76:	2400      	movs	r4, #0
   13e78:	2200      	movs	r2, #0
   13e7a:	e7e2      	b.n	13e42 <__aeabi_ui2d+0x26>
   13e7c:	0000041e 	.word	0x0000041e
   13e80:	00000433 	.word	0x00000433
   13e84:	00000413 	.word	0x00000413
   13e88:	800fffff 	.word	0x800fffff

00013e8c <__clzsi2>:
   13e8c:	211c      	movs	r1, #28
   13e8e:	2301      	movs	r3, #1
   13e90:	041b      	lsls	r3, r3, #16
   13e92:	4298      	cmp	r0, r3
   13e94:	d301      	bcc.n	13e9a <__clzsi2+0xe>
   13e96:	0c00      	lsrs	r0, r0, #16
   13e98:	3910      	subs	r1, #16
   13e9a:	0a1b      	lsrs	r3, r3, #8
   13e9c:	4298      	cmp	r0, r3
   13e9e:	d301      	bcc.n	13ea4 <__clzsi2+0x18>
   13ea0:	0a00      	lsrs	r0, r0, #8
   13ea2:	3908      	subs	r1, #8
   13ea4:	091b      	lsrs	r3, r3, #4
   13ea6:	4298      	cmp	r0, r3
   13ea8:	d301      	bcc.n	13eae <__clzsi2+0x22>
   13eaa:	0900      	lsrs	r0, r0, #4
   13eac:	3904      	subs	r1, #4
   13eae:	a202      	add	r2, pc, #8	; (adr r2, 13eb8 <__clzsi2+0x2c>)
   13eb0:	5c10      	ldrb	r0, [r2, r0]
   13eb2:	1840      	adds	r0, r0, r1
   13eb4:	4770      	bx	lr
   13eb6:	46c0      	nop			; (mov r8, r8)
   13eb8:	02020304 	.word	0x02020304
   13ebc:	01010101 	.word	0x01010101
	...

00013ec8 <atoi>:
   13ec8:	b510      	push	{r4, lr}
   13eca:	220a      	movs	r2, #10
   13ecc:	2100      	movs	r1, #0
   13ece:	f000 fb6d 	bl	145ac <strtol>
   13ed2:	bd10      	pop	{r4, pc}

00013ed4 <__libc_init_array>:
   13ed4:	b570      	push	{r4, r5, r6, lr}
   13ed6:	2600      	movs	r6, #0
   13ed8:	4d0c      	ldr	r5, [pc, #48]	; (13f0c <__libc_init_array+0x38>)
   13eda:	4c0d      	ldr	r4, [pc, #52]	; (13f10 <__libc_init_array+0x3c>)
   13edc:	1b64      	subs	r4, r4, r5
   13ede:	10a4      	asrs	r4, r4, #2
   13ee0:	42a6      	cmp	r6, r4
   13ee2:	d109      	bne.n	13ef8 <__libc_init_array+0x24>
   13ee4:	2600      	movs	r6, #0
   13ee6:	f003 fa4f 	bl	17388 <_init>
   13eea:	4d0a      	ldr	r5, [pc, #40]	; (13f14 <__libc_init_array+0x40>)
   13eec:	4c0a      	ldr	r4, [pc, #40]	; (13f18 <__libc_init_array+0x44>)
   13eee:	1b64      	subs	r4, r4, r5
   13ef0:	10a4      	asrs	r4, r4, #2
   13ef2:	42a6      	cmp	r6, r4
   13ef4:	d105      	bne.n	13f02 <__libc_init_array+0x2e>
   13ef6:	bd70      	pop	{r4, r5, r6, pc}
   13ef8:	00b3      	lsls	r3, r6, #2
   13efa:	58eb      	ldr	r3, [r5, r3]
   13efc:	4798      	blx	r3
   13efe:	3601      	adds	r6, #1
   13f00:	e7ee      	b.n	13ee0 <__libc_init_array+0xc>
   13f02:	00b3      	lsls	r3, r6, #2
   13f04:	58eb      	ldr	r3, [r5, r3]
   13f06:	4798      	blx	r3
   13f08:	3601      	adds	r6, #1
   13f0a:	e7f2      	b.n	13ef2 <__libc_init_array+0x1e>
   13f0c:	00017394 	.word	0x00017394
   13f10:	00017394 	.word	0x00017394
   13f14:	00017394 	.word	0x00017394
   13f18:	00017398 	.word	0x00017398

00013f1c <malloc>:
   13f1c:	b510      	push	{r4, lr}
   13f1e:	4b03      	ldr	r3, [pc, #12]	; (13f2c <malloc+0x10>)
   13f20:	0001      	movs	r1, r0
   13f22:	6818      	ldr	r0, [r3, #0]
   13f24:	f000 f87c 	bl	14020 <_malloc_r>
   13f28:	bd10      	pop	{r4, pc}
   13f2a:	46c0      	nop			; (mov r8, r8)
   13f2c:	20000020 	.word	0x20000020

00013f30 <free>:
   13f30:	b510      	push	{r4, lr}
   13f32:	4b03      	ldr	r3, [pc, #12]	; (13f40 <free+0x10>)
   13f34:	0001      	movs	r1, r0
   13f36:	6818      	ldr	r0, [r3, #0]
   13f38:	f000 f828 	bl	13f8c <_free_r>
   13f3c:	bd10      	pop	{r4, pc}
   13f3e:	46c0      	nop			; (mov r8, r8)
   13f40:	20000020 	.word	0x20000020

00013f44 <memcpy>:
   13f44:	2300      	movs	r3, #0
   13f46:	b510      	push	{r4, lr}
   13f48:	429a      	cmp	r2, r3
   13f4a:	d100      	bne.n	13f4e <memcpy+0xa>
   13f4c:	bd10      	pop	{r4, pc}
   13f4e:	5ccc      	ldrb	r4, [r1, r3]
   13f50:	54c4      	strb	r4, [r0, r3]
   13f52:	3301      	adds	r3, #1
   13f54:	e7f8      	b.n	13f48 <memcpy+0x4>

00013f56 <memmove>:
   13f56:	b510      	push	{r4, lr}
   13f58:	4288      	cmp	r0, r1
   13f5a:	d902      	bls.n	13f62 <memmove+0xc>
   13f5c:	188b      	adds	r3, r1, r2
   13f5e:	4298      	cmp	r0, r3
   13f60:	d308      	bcc.n	13f74 <memmove+0x1e>
   13f62:	2300      	movs	r3, #0
   13f64:	429a      	cmp	r2, r3
   13f66:	d007      	beq.n	13f78 <memmove+0x22>
   13f68:	5ccc      	ldrb	r4, [r1, r3]
   13f6a:	54c4      	strb	r4, [r0, r3]
   13f6c:	3301      	adds	r3, #1
   13f6e:	e7f9      	b.n	13f64 <memmove+0xe>
   13f70:	5c8b      	ldrb	r3, [r1, r2]
   13f72:	5483      	strb	r3, [r0, r2]
   13f74:	3a01      	subs	r2, #1
   13f76:	d2fb      	bcs.n	13f70 <memmove+0x1a>
   13f78:	bd10      	pop	{r4, pc}

00013f7a <memset>:
   13f7a:	0003      	movs	r3, r0
   13f7c:	1882      	adds	r2, r0, r2
   13f7e:	4293      	cmp	r3, r2
   13f80:	d100      	bne.n	13f84 <memset+0xa>
   13f82:	4770      	bx	lr
   13f84:	7019      	strb	r1, [r3, #0]
   13f86:	3301      	adds	r3, #1
   13f88:	e7f9      	b.n	13f7e <memset+0x4>
	...

00013f8c <_free_r>:
   13f8c:	b570      	push	{r4, r5, r6, lr}
   13f8e:	0005      	movs	r5, r0
   13f90:	2900      	cmp	r1, #0
   13f92:	d010      	beq.n	13fb6 <_free_r+0x2a>
   13f94:	1f0c      	subs	r4, r1, #4
   13f96:	6823      	ldr	r3, [r4, #0]
   13f98:	2b00      	cmp	r3, #0
   13f9a:	da00      	bge.n	13f9e <_free_r+0x12>
   13f9c:	18e4      	adds	r4, r4, r3
   13f9e:	0028      	movs	r0, r5
   13fa0:	f000 fdec 	bl	14b7c <__malloc_lock>
   13fa4:	4a1d      	ldr	r2, [pc, #116]	; (1401c <_free_r+0x90>)
   13fa6:	6813      	ldr	r3, [r2, #0]
   13fa8:	2b00      	cmp	r3, #0
   13faa:	d105      	bne.n	13fb8 <_free_r+0x2c>
   13fac:	6063      	str	r3, [r4, #4]
   13fae:	6014      	str	r4, [r2, #0]
   13fb0:	0028      	movs	r0, r5
   13fb2:	f000 fde4 	bl	14b7e <__malloc_unlock>
   13fb6:	bd70      	pop	{r4, r5, r6, pc}
   13fb8:	42a3      	cmp	r3, r4
   13fba:	d909      	bls.n	13fd0 <_free_r+0x44>
   13fbc:	6821      	ldr	r1, [r4, #0]
   13fbe:	1860      	adds	r0, r4, r1
   13fc0:	4283      	cmp	r3, r0
   13fc2:	d1f3      	bne.n	13fac <_free_r+0x20>
   13fc4:	6818      	ldr	r0, [r3, #0]
   13fc6:	685b      	ldr	r3, [r3, #4]
   13fc8:	1841      	adds	r1, r0, r1
   13fca:	6021      	str	r1, [r4, #0]
   13fcc:	e7ee      	b.n	13fac <_free_r+0x20>
   13fce:	0013      	movs	r3, r2
   13fd0:	685a      	ldr	r2, [r3, #4]
   13fd2:	2a00      	cmp	r2, #0
   13fd4:	d001      	beq.n	13fda <_free_r+0x4e>
   13fd6:	42a2      	cmp	r2, r4
   13fd8:	d9f9      	bls.n	13fce <_free_r+0x42>
   13fda:	6819      	ldr	r1, [r3, #0]
   13fdc:	1858      	adds	r0, r3, r1
   13fde:	42a0      	cmp	r0, r4
   13fe0:	d10b      	bne.n	13ffa <_free_r+0x6e>
   13fe2:	6820      	ldr	r0, [r4, #0]
   13fe4:	1809      	adds	r1, r1, r0
   13fe6:	1858      	adds	r0, r3, r1
   13fe8:	6019      	str	r1, [r3, #0]
   13fea:	4282      	cmp	r2, r0
   13fec:	d1e0      	bne.n	13fb0 <_free_r+0x24>
   13fee:	6810      	ldr	r0, [r2, #0]
   13ff0:	6852      	ldr	r2, [r2, #4]
   13ff2:	1841      	adds	r1, r0, r1
   13ff4:	6019      	str	r1, [r3, #0]
   13ff6:	605a      	str	r2, [r3, #4]
   13ff8:	e7da      	b.n	13fb0 <_free_r+0x24>
   13ffa:	42a0      	cmp	r0, r4
   13ffc:	d902      	bls.n	14004 <_free_r+0x78>
   13ffe:	230c      	movs	r3, #12
   14000:	602b      	str	r3, [r5, #0]
   14002:	e7d5      	b.n	13fb0 <_free_r+0x24>
   14004:	6821      	ldr	r1, [r4, #0]
   14006:	1860      	adds	r0, r4, r1
   14008:	4282      	cmp	r2, r0
   1400a:	d103      	bne.n	14014 <_free_r+0x88>
   1400c:	6810      	ldr	r0, [r2, #0]
   1400e:	6852      	ldr	r2, [r2, #4]
   14010:	1841      	adds	r1, r0, r1
   14012:	6021      	str	r1, [r4, #0]
   14014:	6062      	str	r2, [r4, #4]
   14016:	605c      	str	r4, [r3, #4]
   14018:	e7ca      	b.n	13fb0 <_free_r+0x24>
   1401a:	46c0      	nop			; (mov r8, r8)
   1401c:	200003f4 	.word	0x200003f4

00014020 <_malloc_r>:
   14020:	2303      	movs	r3, #3
   14022:	b570      	push	{r4, r5, r6, lr}
   14024:	1ccd      	adds	r5, r1, #3
   14026:	439d      	bics	r5, r3
   14028:	3508      	adds	r5, #8
   1402a:	0006      	movs	r6, r0
   1402c:	2d0c      	cmp	r5, #12
   1402e:	d21e      	bcs.n	1406e <_malloc_r+0x4e>
   14030:	250c      	movs	r5, #12
   14032:	42a9      	cmp	r1, r5
   14034:	d81d      	bhi.n	14072 <_malloc_r+0x52>
   14036:	0030      	movs	r0, r6
   14038:	f000 fda0 	bl	14b7c <__malloc_lock>
   1403c:	4a25      	ldr	r2, [pc, #148]	; (140d4 <_malloc_r+0xb4>)
   1403e:	6814      	ldr	r4, [r2, #0]
   14040:	0021      	movs	r1, r4
   14042:	2900      	cmp	r1, #0
   14044:	d119      	bne.n	1407a <_malloc_r+0x5a>
   14046:	4c24      	ldr	r4, [pc, #144]	; (140d8 <_malloc_r+0xb8>)
   14048:	6823      	ldr	r3, [r4, #0]
   1404a:	2b00      	cmp	r3, #0
   1404c:	d103      	bne.n	14056 <_malloc_r+0x36>
   1404e:	0030      	movs	r0, r6
   14050:	f000 f8dc 	bl	1420c <_sbrk_r>
   14054:	6020      	str	r0, [r4, #0]
   14056:	0029      	movs	r1, r5
   14058:	0030      	movs	r0, r6
   1405a:	f000 f8d7 	bl	1420c <_sbrk_r>
   1405e:	1c43      	adds	r3, r0, #1
   14060:	d12c      	bne.n	140bc <_malloc_r+0x9c>
   14062:	230c      	movs	r3, #12
   14064:	0030      	movs	r0, r6
   14066:	6033      	str	r3, [r6, #0]
   14068:	f000 fd89 	bl	14b7e <__malloc_unlock>
   1406c:	e003      	b.n	14076 <_malloc_r+0x56>
   1406e:	2d00      	cmp	r5, #0
   14070:	dadf      	bge.n	14032 <_malloc_r+0x12>
   14072:	230c      	movs	r3, #12
   14074:	6033      	str	r3, [r6, #0]
   14076:	2000      	movs	r0, #0
   14078:	bd70      	pop	{r4, r5, r6, pc}
   1407a:	680b      	ldr	r3, [r1, #0]
   1407c:	1b5b      	subs	r3, r3, r5
   1407e:	d41a      	bmi.n	140b6 <_malloc_r+0x96>
   14080:	2b0b      	cmp	r3, #11
   14082:	d903      	bls.n	1408c <_malloc_r+0x6c>
   14084:	600b      	str	r3, [r1, #0]
   14086:	18cc      	adds	r4, r1, r3
   14088:	6025      	str	r5, [r4, #0]
   1408a:	e003      	b.n	14094 <_malloc_r+0x74>
   1408c:	428c      	cmp	r4, r1
   1408e:	d10e      	bne.n	140ae <_malloc_r+0x8e>
   14090:	6863      	ldr	r3, [r4, #4]
   14092:	6013      	str	r3, [r2, #0]
   14094:	0030      	movs	r0, r6
   14096:	f000 fd72 	bl	14b7e <__malloc_unlock>
   1409a:	0020      	movs	r0, r4
   1409c:	2207      	movs	r2, #7
   1409e:	300b      	adds	r0, #11
   140a0:	1d23      	adds	r3, r4, #4
   140a2:	4390      	bics	r0, r2
   140a4:	1ac3      	subs	r3, r0, r3
   140a6:	d0e7      	beq.n	14078 <_malloc_r+0x58>
   140a8:	425a      	negs	r2, r3
   140aa:	50e2      	str	r2, [r4, r3]
   140ac:	e7e4      	b.n	14078 <_malloc_r+0x58>
   140ae:	684b      	ldr	r3, [r1, #4]
   140b0:	6063      	str	r3, [r4, #4]
   140b2:	000c      	movs	r4, r1
   140b4:	e7ee      	b.n	14094 <_malloc_r+0x74>
   140b6:	000c      	movs	r4, r1
   140b8:	6849      	ldr	r1, [r1, #4]
   140ba:	e7c2      	b.n	14042 <_malloc_r+0x22>
   140bc:	2303      	movs	r3, #3
   140be:	1cc4      	adds	r4, r0, #3
   140c0:	439c      	bics	r4, r3
   140c2:	42a0      	cmp	r0, r4
   140c4:	d0e0      	beq.n	14088 <_malloc_r+0x68>
   140c6:	1a21      	subs	r1, r4, r0
   140c8:	0030      	movs	r0, r6
   140ca:	f000 f89f 	bl	1420c <_sbrk_r>
   140ce:	1c43      	adds	r3, r0, #1
   140d0:	d1da      	bne.n	14088 <_malloc_r+0x68>
   140d2:	e7c6      	b.n	14062 <_malloc_r+0x42>
   140d4:	200003f4 	.word	0x200003f4
   140d8:	200003f8 	.word	0x200003f8

000140dc <iprintf>:
   140dc:	b40f      	push	{r0, r1, r2, r3}
   140de:	4b0b      	ldr	r3, [pc, #44]	; (1410c <iprintf+0x30>)
   140e0:	b513      	push	{r0, r1, r4, lr}
   140e2:	681c      	ldr	r4, [r3, #0]
   140e4:	2c00      	cmp	r4, #0
   140e6:	d005      	beq.n	140f4 <iprintf+0x18>
   140e8:	69a3      	ldr	r3, [r4, #24]
   140ea:	2b00      	cmp	r3, #0
   140ec:	d102      	bne.n	140f4 <iprintf+0x18>
   140ee:	0020      	movs	r0, r4
   140f0:	f000 fc34 	bl	1495c <__sinit>
   140f4:	ab05      	add	r3, sp, #20
   140f6:	9a04      	ldr	r2, [sp, #16]
   140f8:	68a1      	ldr	r1, [r4, #8]
   140fa:	0020      	movs	r0, r4
   140fc:	9301      	str	r3, [sp, #4]
   140fe:	f000 fecd 	bl	14e9c <_vfiprintf_r>
   14102:	bc16      	pop	{r1, r2, r4}
   14104:	bc08      	pop	{r3}
   14106:	b004      	add	sp, #16
   14108:	4718      	bx	r3
   1410a:	46c0      	nop			; (mov r8, r8)
   1410c:	20000020 	.word	0x20000020

00014110 <putchar>:
   14110:	4b08      	ldr	r3, [pc, #32]	; (14134 <putchar+0x24>)
   14112:	b570      	push	{r4, r5, r6, lr}
   14114:	681c      	ldr	r4, [r3, #0]
   14116:	0005      	movs	r5, r0
   14118:	2c00      	cmp	r4, #0
   1411a:	d005      	beq.n	14128 <putchar+0x18>
   1411c:	69a3      	ldr	r3, [r4, #24]
   1411e:	2b00      	cmp	r3, #0
   14120:	d102      	bne.n	14128 <putchar+0x18>
   14122:	0020      	movs	r0, r4
   14124:	f000 fc1a 	bl	1495c <__sinit>
   14128:	0029      	movs	r1, r5
   1412a:	68a2      	ldr	r2, [r4, #8]
   1412c:	0020      	movs	r0, r4
   1412e:	f001 f959 	bl	153e4 <_putc_r>
   14132:	bd70      	pop	{r4, r5, r6, pc}
   14134:	20000020 	.word	0x20000020

00014138 <_puts_r>:
   14138:	b570      	push	{r4, r5, r6, lr}
   1413a:	0005      	movs	r5, r0
   1413c:	000e      	movs	r6, r1
   1413e:	2800      	cmp	r0, #0
   14140:	d004      	beq.n	1414c <_puts_r+0x14>
   14142:	6983      	ldr	r3, [r0, #24]
   14144:	2b00      	cmp	r3, #0
   14146:	d101      	bne.n	1414c <_puts_r+0x14>
   14148:	f000 fc08 	bl	1495c <__sinit>
   1414c:	69ab      	ldr	r3, [r5, #24]
   1414e:	68ac      	ldr	r4, [r5, #8]
   14150:	2b00      	cmp	r3, #0
   14152:	d102      	bne.n	1415a <_puts_r+0x22>
   14154:	0028      	movs	r0, r5
   14156:	f000 fc01 	bl	1495c <__sinit>
   1415a:	4b24      	ldr	r3, [pc, #144]	; (141ec <_puts_r+0xb4>)
   1415c:	429c      	cmp	r4, r3
   1415e:	d10f      	bne.n	14180 <_puts_r+0x48>
   14160:	686c      	ldr	r4, [r5, #4]
   14162:	89a3      	ldrh	r3, [r4, #12]
   14164:	071b      	lsls	r3, r3, #28
   14166:	d502      	bpl.n	1416e <_puts_r+0x36>
   14168:	6923      	ldr	r3, [r4, #16]
   1416a:	2b00      	cmp	r3, #0
   1416c:	d120      	bne.n	141b0 <_puts_r+0x78>
   1416e:	0021      	movs	r1, r4
   14170:	0028      	movs	r0, r5
   14172:	f000 fa85 	bl	14680 <__swsetup_r>
   14176:	2800      	cmp	r0, #0
   14178:	d01a      	beq.n	141b0 <_puts_r+0x78>
   1417a:	2001      	movs	r0, #1
   1417c:	4240      	negs	r0, r0
   1417e:	bd70      	pop	{r4, r5, r6, pc}
   14180:	4b1b      	ldr	r3, [pc, #108]	; (141f0 <_puts_r+0xb8>)
   14182:	429c      	cmp	r4, r3
   14184:	d101      	bne.n	1418a <_puts_r+0x52>
   14186:	68ac      	ldr	r4, [r5, #8]
   14188:	e7eb      	b.n	14162 <_puts_r+0x2a>
   1418a:	4b1a      	ldr	r3, [pc, #104]	; (141f4 <_puts_r+0xbc>)
   1418c:	429c      	cmp	r4, r3
   1418e:	d1e8      	bne.n	14162 <_puts_r+0x2a>
   14190:	68ec      	ldr	r4, [r5, #12]
   14192:	e7e6      	b.n	14162 <_puts_r+0x2a>
   14194:	3b01      	subs	r3, #1
   14196:	3601      	adds	r6, #1
   14198:	60a3      	str	r3, [r4, #8]
   1419a:	2b00      	cmp	r3, #0
   1419c:	da04      	bge.n	141a8 <_puts_r+0x70>
   1419e:	69a2      	ldr	r2, [r4, #24]
   141a0:	4293      	cmp	r3, r2
   141a2:	db16      	blt.n	141d2 <_puts_r+0x9a>
   141a4:	290a      	cmp	r1, #10
   141a6:	d014      	beq.n	141d2 <_puts_r+0x9a>
   141a8:	6823      	ldr	r3, [r4, #0]
   141aa:	1c5a      	adds	r2, r3, #1
   141ac:	6022      	str	r2, [r4, #0]
   141ae:	7019      	strb	r1, [r3, #0]
   141b0:	7831      	ldrb	r1, [r6, #0]
   141b2:	68a3      	ldr	r3, [r4, #8]
   141b4:	2900      	cmp	r1, #0
   141b6:	d1ed      	bne.n	14194 <_puts_r+0x5c>
   141b8:	3b01      	subs	r3, #1
   141ba:	60a3      	str	r3, [r4, #8]
   141bc:	2b00      	cmp	r3, #0
   141be:	da0f      	bge.n	141e0 <_puts_r+0xa8>
   141c0:	0022      	movs	r2, r4
   141c2:	310a      	adds	r1, #10
   141c4:	0028      	movs	r0, r5
   141c6:	f000 fa05 	bl	145d4 <__swbuf_r>
   141ca:	1c43      	adds	r3, r0, #1
   141cc:	d0d5      	beq.n	1417a <_puts_r+0x42>
   141ce:	200a      	movs	r0, #10
   141d0:	e7d5      	b.n	1417e <_puts_r+0x46>
   141d2:	0022      	movs	r2, r4
   141d4:	0028      	movs	r0, r5
   141d6:	f000 f9fd 	bl	145d4 <__swbuf_r>
   141da:	1c43      	adds	r3, r0, #1
   141dc:	d1e8      	bne.n	141b0 <_puts_r+0x78>
   141de:	e7cc      	b.n	1417a <_puts_r+0x42>
   141e0:	200a      	movs	r0, #10
   141e2:	6823      	ldr	r3, [r4, #0]
   141e4:	1c5a      	adds	r2, r3, #1
   141e6:	6022      	str	r2, [r4, #0]
   141e8:	7018      	strb	r0, [r3, #0]
   141ea:	e7c8      	b.n	1417e <_puts_r+0x46>
   141ec:	00017208 	.word	0x00017208
   141f0:	00017228 	.word	0x00017228
   141f4:	000171e8 	.word	0x000171e8

000141f8 <puts>:
   141f8:	b510      	push	{r4, lr}
   141fa:	4b03      	ldr	r3, [pc, #12]	; (14208 <puts+0x10>)
   141fc:	0001      	movs	r1, r0
   141fe:	6818      	ldr	r0, [r3, #0]
   14200:	f7ff ff9a 	bl	14138 <_puts_r>
   14204:	bd10      	pop	{r4, pc}
   14206:	46c0      	nop			; (mov r8, r8)
   14208:	20000020 	.word	0x20000020

0001420c <_sbrk_r>:
   1420c:	2300      	movs	r3, #0
   1420e:	b570      	push	{r4, r5, r6, lr}
   14210:	4c06      	ldr	r4, [pc, #24]	; (1422c <_sbrk_r+0x20>)
   14212:	0005      	movs	r5, r0
   14214:	0008      	movs	r0, r1
   14216:	6023      	str	r3, [r4, #0]
   14218:	f7f9 fcc8 	bl	dbac <_sbrk>
   1421c:	1c43      	adds	r3, r0, #1
   1421e:	d103      	bne.n	14228 <_sbrk_r+0x1c>
   14220:	6823      	ldr	r3, [r4, #0]
   14222:	2b00      	cmp	r3, #0
   14224:	d000      	beq.n	14228 <_sbrk_r+0x1c>
   14226:	602b      	str	r3, [r5, #0]
   14228:	bd70      	pop	{r4, r5, r6, pc}
   1422a:	46c0      	nop			; (mov r8, r8)
   1422c:	20001008 	.word	0x20001008

00014230 <setbuf>:
   14230:	424a      	negs	r2, r1
   14232:	414a      	adcs	r2, r1
   14234:	2380      	movs	r3, #128	; 0x80
   14236:	b510      	push	{r4, lr}
   14238:	0052      	lsls	r2, r2, #1
   1423a:	00db      	lsls	r3, r3, #3
   1423c:	f000 f802 	bl	14244 <setvbuf>
   14240:	bd10      	pop	{r4, pc}
	...

00014244 <setvbuf>:
   14244:	b5f0      	push	{r4, r5, r6, r7, lr}
   14246:	001d      	movs	r5, r3
   14248:	4b4f      	ldr	r3, [pc, #316]	; (14388 <setvbuf+0x144>)
   1424a:	b085      	sub	sp, #20
   1424c:	681e      	ldr	r6, [r3, #0]
   1424e:	0004      	movs	r4, r0
   14250:	000f      	movs	r7, r1
   14252:	9200      	str	r2, [sp, #0]
   14254:	2e00      	cmp	r6, #0
   14256:	d005      	beq.n	14264 <setvbuf+0x20>
   14258:	69b3      	ldr	r3, [r6, #24]
   1425a:	2b00      	cmp	r3, #0
   1425c:	d102      	bne.n	14264 <setvbuf+0x20>
   1425e:	0030      	movs	r0, r6
   14260:	f000 fb7c 	bl	1495c <__sinit>
   14264:	4b49      	ldr	r3, [pc, #292]	; (1438c <setvbuf+0x148>)
   14266:	429c      	cmp	r4, r3
   14268:	d150      	bne.n	1430c <setvbuf+0xc8>
   1426a:	6874      	ldr	r4, [r6, #4]
   1426c:	9b00      	ldr	r3, [sp, #0]
   1426e:	2b02      	cmp	r3, #2
   14270:	d005      	beq.n	1427e <setvbuf+0x3a>
   14272:	2b01      	cmp	r3, #1
   14274:	d900      	bls.n	14278 <setvbuf+0x34>
   14276:	e084      	b.n	14382 <setvbuf+0x13e>
   14278:	2d00      	cmp	r5, #0
   1427a:	da00      	bge.n	1427e <setvbuf+0x3a>
   1427c:	e081      	b.n	14382 <setvbuf+0x13e>
   1427e:	0021      	movs	r1, r4
   14280:	0030      	movs	r0, r6
   14282:	f000 fafd 	bl	14880 <_fflush_r>
   14286:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14288:	2900      	cmp	r1, #0
   1428a:	d008      	beq.n	1429e <setvbuf+0x5a>
   1428c:	0023      	movs	r3, r4
   1428e:	3344      	adds	r3, #68	; 0x44
   14290:	4299      	cmp	r1, r3
   14292:	d002      	beq.n	1429a <setvbuf+0x56>
   14294:	0030      	movs	r0, r6
   14296:	f7ff fe79 	bl	13f8c <_free_r>
   1429a:	2300      	movs	r3, #0
   1429c:	6363      	str	r3, [r4, #52]	; 0x34
   1429e:	2300      	movs	r3, #0
   142a0:	61a3      	str	r3, [r4, #24]
   142a2:	6063      	str	r3, [r4, #4]
   142a4:	89a3      	ldrh	r3, [r4, #12]
   142a6:	061b      	lsls	r3, r3, #24
   142a8:	d503      	bpl.n	142b2 <setvbuf+0x6e>
   142aa:	6921      	ldr	r1, [r4, #16]
   142ac:	0030      	movs	r0, r6
   142ae:	f7ff fe6d 	bl	13f8c <_free_r>
   142b2:	89a3      	ldrh	r3, [r4, #12]
   142b4:	4a36      	ldr	r2, [pc, #216]	; (14390 <setvbuf+0x14c>)
   142b6:	4013      	ands	r3, r2
   142b8:	81a3      	strh	r3, [r4, #12]
   142ba:	9b00      	ldr	r3, [sp, #0]
   142bc:	2b02      	cmp	r3, #2
   142be:	d05a      	beq.n	14376 <setvbuf+0x132>
   142c0:	ab03      	add	r3, sp, #12
   142c2:	aa02      	add	r2, sp, #8
   142c4:	0021      	movs	r1, r4
   142c6:	0030      	movs	r0, r6
   142c8:	f000 fbe0 	bl	14a8c <__swhatbuf_r>
   142cc:	89a3      	ldrh	r3, [r4, #12]
   142ce:	4318      	orrs	r0, r3
   142d0:	81a0      	strh	r0, [r4, #12]
   142d2:	2d00      	cmp	r5, #0
   142d4:	d124      	bne.n	14320 <setvbuf+0xdc>
   142d6:	9d02      	ldr	r5, [sp, #8]
   142d8:	0028      	movs	r0, r5
   142da:	f7ff fe1f 	bl	13f1c <malloc>
   142de:	9501      	str	r5, [sp, #4]
   142e0:	1e07      	subs	r7, r0, #0
   142e2:	d142      	bne.n	1436a <setvbuf+0x126>
   142e4:	9b02      	ldr	r3, [sp, #8]
   142e6:	9301      	str	r3, [sp, #4]
   142e8:	42ab      	cmp	r3, r5
   142ea:	d139      	bne.n	14360 <setvbuf+0x11c>
   142ec:	2001      	movs	r0, #1
   142ee:	4240      	negs	r0, r0
   142f0:	2302      	movs	r3, #2
   142f2:	89a2      	ldrh	r2, [r4, #12]
   142f4:	4313      	orrs	r3, r2
   142f6:	81a3      	strh	r3, [r4, #12]
   142f8:	2300      	movs	r3, #0
   142fa:	60a3      	str	r3, [r4, #8]
   142fc:	0023      	movs	r3, r4
   142fe:	3347      	adds	r3, #71	; 0x47
   14300:	6023      	str	r3, [r4, #0]
   14302:	6123      	str	r3, [r4, #16]
   14304:	2301      	movs	r3, #1
   14306:	6163      	str	r3, [r4, #20]
   14308:	b005      	add	sp, #20
   1430a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1430c:	4b21      	ldr	r3, [pc, #132]	; (14394 <setvbuf+0x150>)
   1430e:	429c      	cmp	r4, r3
   14310:	d101      	bne.n	14316 <setvbuf+0xd2>
   14312:	68b4      	ldr	r4, [r6, #8]
   14314:	e7aa      	b.n	1426c <setvbuf+0x28>
   14316:	4b20      	ldr	r3, [pc, #128]	; (14398 <setvbuf+0x154>)
   14318:	429c      	cmp	r4, r3
   1431a:	d1a7      	bne.n	1426c <setvbuf+0x28>
   1431c:	68f4      	ldr	r4, [r6, #12]
   1431e:	e7a5      	b.n	1426c <setvbuf+0x28>
   14320:	2f00      	cmp	r7, #0
   14322:	d0d9      	beq.n	142d8 <setvbuf+0x94>
   14324:	69b3      	ldr	r3, [r6, #24]
   14326:	2b00      	cmp	r3, #0
   14328:	d102      	bne.n	14330 <setvbuf+0xec>
   1432a:	0030      	movs	r0, r6
   1432c:	f000 fb16 	bl	1495c <__sinit>
   14330:	9b00      	ldr	r3, [sp, #0]
   14332:	2b01      	cmp	r3, #1
   14334:	d103      	bne.n	1433e <setvbuf+0xfa>
   14336:	89a3      	ldrh	r3, [r4, #12]
   14338:	9a00      	ldr	r2, [sp, #0]
   1433a:	431a      	orrs	r2, r3
   1433c:	81a2      	strh	r2, [r4, #12]
   1433e:	2008      	movs	r0, #8
   14340:	89a3      	ldrh	r3, [r4, #12]
   14342:	6027      	str	r7, [r4, #0]
   14344:	6127      	str	r7, [r4, #16]
   14346:	6165      	str	r5, [r4, #20]
   14348:	4018      	ands	r0, r3
   1434a:	d018      	beq.n	1437e <setvbuf+0x13a>
   1434c:	2001      	movs	r0, #1
   1434e:	4018      	ands	r0, r3
   14350:	2300      	movs	r3, #0
   14352:	4298      	cmp	r0, r3
   14354:	d011      	beq.n	1437a <setvbuf+0x136>
   14356:	426d      	negs	r5, r5
   14358:	60a3      	str	r3, [r4, #8]
   1435a:	61a5      	str	r5, [r4, #24]
   1435c:	0018      	movs	r0, r3
   1435e:	e7d3      	b.n	14308 <setvbuf+0xc4>
   14360:	9801      	ldr	r0, [sp, #4]
   14362:	f7ff fddb 	bl	13f1c <malloc>
   14366:	1e07      	subs	r7, r0, #0
   14368:	d0c0      	beq.n	142ec <setvbuf+0xa8>
   1436a:	2380      	movs	r3, #128	; 0x80
   1436c:	89a2      	ldrh	r2, [r4, #12]
   1436e:	9d01      	ldr	r5, [sp, #4]
   14370:	4313      	orrs	r3, r2
   14372:	81a3      	strh	r3, [r4, #12]
   14374:	e7d6      	b.n	14324 <setvbuf+0xe0>
   14376:	2000      	movs	r0, #0
   14378:	e7ba      	b.n	142f0 <setvbuf+0xac>
   1437a:	60a5      	str	r5, [r4, #8]
   1437c:	e7c4      	b.n	14308 <setvbuf+0xc4>
   1437e:	60a0      	str	r0, [r4, #8]
   14380:	e7c2      	b.n	14308 <setvbuf+0xc4>
   14382:	2001      	movs	r0, #1
   14384:	4240      	negs	r0, r0
   14386:	e7bf      	b.n	14308 <setvbuf+0xc4>
   14388:	20000020 	.word	0x20000020
   1438c:	00017208 	.word	0x00017208
   14390:	fffff35c 	.word	0xfffff35c
   14394:	00017228 	.word	0x00017228
   14398:	000171e8 	.word	0x000171e8

0001439c <siprintf>:
   1439c:	b40e      	push	{r1, r2, r3}
   1439e:	b510      	push	{r4, lr}
   143a0:	b09d      	sub	sp, #116	; 0x74
   143a2:	a902      	add	r1, sp, #8
   143a4:	9002      	str	r0, [sp, #8]
   143a6:	6108      	str	r0, [r1, #16]
   143a8:	480b      	ldr	r0, [pc, #44]	; (143d8 <siprintf+0x3c>)
   143aa:	2482      	movs	r4, #130	; 0x82
   143ac:	6088      	str	r0, [r1, #8]
   143ae:	6148      	str	r0, [r1, #20]
   143b0:	2001      	movs	r0, #1
   143b2:	4240      	negs	r0, r0
   143b4:	ab1f      	add	r3, sp, #124	; 0x7c
   143b6:	81c8      	strh	r0, [r1, #14]
   143b8:	4808      	ldr	r0, [pc, #32]	; (143dc <siprintf+0x40>)
   143ba:	cb04      	ldmia	r3!, {r2}
   143bc:	00a4      	lsls	r4, r4, #2
   143be:	6800      	ldr	r0, [r0, #0]
   143c0:	9301      	str	r3, [sp, #4]
   143c2:	818c      	strh	r4, [r1, #12]
   143c4:	f000 fc3e 	bl	14c44 <_svfiprintf_r>
   143c8:	2300      	movs	r3, #0
   143ca:	9a02      	ldr	r2, [sp, #8]
   143cc:	7013      	strb	r3, [r2, #0]
   143ce:	b01d      	add	sp, #116	; 0x74
   143d0:	bc10      	pop	{r4}
   143d2:	bc08      	pop	{r3}
   143d4:	b003      	add	sp, #12
   143d6:	4718      	bx	r3
   143d8:	7fffffff 	.word	0x7fffffff
   143dc:	20000020 	.word	0x20000020

000143e0 <strcmp>:
   143e0:	7802      	ldrb	r2, [r0, #0]
   143e2:	780b      	ldrb	r3, [r1, #0]
   143e4:	2a00      	cmp	r2, #0
   143e6:	d003      	beq.n	143f0 <strcmp+0x10>
   143e8:	3001      	adds	r0, #1
   143ea:	3101      	adds	r1, #1
   143ec:	429a      	cmp	r2, r3
   143ee:	d0f7      	beq.n	143e0 <strcmp>
   143f0:	1ad0      	subs	r0, r2, r3
   143f2:	4770      	bx	lr

000143f4 <strcpy>:
   143f4:	1c03      	adds	r3, r0, #0
   143f6:	780a      	ldrb	r2, [r1, #0]
   143f8:	3101      	adds	r1, #1
   143fa:	701a      	strb	r2, [r3, #0]
   143fc:	3301      	adds	r3, #1
   143fe:	2a00      	cmp	r2, #0
   14400:	d1f9      	bne.n	143f6 <strcpy+0x2>
   14402:	4770      	bx	lr

00014404 <strdup>:
   14404:	b510      	push	{r4, lr}
   14406:	4b03      	ldr	r3, [pc, #12]	; (14414 <strdup+0x10>)
   14408:	0001      	movs	r1, r0
   1440a:	6818      	ldr	r0, [r3, #0]
   1440c:	f000 f804 	bl	14418 <_strdup_r>
   14410:	bd10      	pop	{r4, pc}
   14412:	46c0      	nop			; (mov r8, r8)
   14414:	20000020 	.word	0x20000020

00014418 <_strdup_r>:
   14418:	b570      	push	{r4, r5, r6, lr}
   1441a:	0005      	movs	r5, r0
   1441c:	0008      	movs	r0, r1
   1441e:	000e      	movs	r6, r1
   14420:	f000 f80d 	bl	1443e <strlen>
   14424:	1c44      	adds	r4, r0, #1
   14426:	0021      	movs	r1, r4
   14428:	0028      	movs	r0, r5
   1442a:	f7ff fdf9 	bl	14020 <_malloc_r>
   1442e:	1e05      	subs	r5, r0, #0
   14430:	d003      	beq.n	1443a <_strdup_r+0x22>
   14432:	0022      	movs	r2, r4
   14434:	0031      	movs	r1, r6
   14436:	f7ff fd85 	bl	13f44 <memcpy>
   1443a:	0028      	movs	r0, r5
   1443c:	bd70      	pop	{r4, r5, r6, pc}

0001443e <strlen>:
   1443e:	2300      	movs	r3, #0
   14440:	5cc2      	ldrb	r2, [r0, r3]
   14442:	3301      	adds	r3, #1
   14444:	2a00      	cmp	r2, #0
   14446:	d1fb      	bne.n	14440 <strlen+0x2>
   14448:	1e58      	subs	r0, r3, #1
   1444a:	4770      	bx	lr

0001444c <strncmp>:
   1444c:	2300      	movs	r3, #0
   1444e:	b530      	push	{r4, r5, lr}
   14450:	429a      	cmp	r2, r3
   14452:	d00a      	beq.n	1446a <strncmp+0x1e>
   14454:	3a01      	subs	r2, #1
   14456:	5cc4      	ldrb	r4, [r0, r3]
   14458:	5ccd      	ldrb	r5, [r1, r3]
   1445a:	42ac      	cmp	r4, r5
   1445c:	d104      	bne.n	14468 <strncmp+0x1c>
   1445e:	429a      	cmp	r2, r3
   14460:	d002      	beq.n	14468 <strncmp+0x1c>
   14462:	3301      	adds	r3, #1
   14464:	2c00      	cmp	r4, #0
   14466:	d1f6      	bne.n	14456 <strncmp+0xa>
   14468:	1b63      	subs	r3, r4, r5
   1446a:	0018      	movs	r0, r3
   1446c:	bd30      	pop	{r4, r5, pc}

0001446e <strstr>:
   1446e:	b510      	push	{r4, lr}
   14470:	0002      	movs	r2, r0
   14472:	7800      	ldrb	r0, [r0, #0]
   14474:	2800      	cmp	r0, #0
   14476:	d104      	bne.n	14482 <strstr+0x14>
   14478:	7809      	ldrb	r1, [r1, #0]
   1447a:	2900      	cmp	r1, #0
   1447c:	d00d      	beq.n	1449a <strstr+0x2c>
   1447e:	bd10      	pop	{r4, pc}
   14480:	3201      	adds	r2, #1
   14482:	7810      	ldrb	r0, [r2, #0]
   14484:	2800      	cmp	r0, #0
   14486:	d0fa      	beq.n	1447e <strstr+0x10>
   14488:	2300      	movs	r3, #0
   1448a:	5cc8      	ldrb	r0, [r1, r3]
   1448c:	2800      	cmp	r0, #0
   1448e:	d004      	beq.n	1449a <strstr+0x2c>
   14490:	5cd4      	ldrb	r4, [r2, r3]
   14492:	4284      	cmp	r4, r0
   14494:	d1f4      	bne.n	14480 <strstr+0x12>
   14496:	3301      	adds	r3, #1
   14498:	e7f7      	b.n	1448a <strstr+0x1c>
   1449a:	0010      	movs	r0, r2
   1449c:	e7ef      	b.n	1447e <strstr+0x10>
	...

000144a0 <_strtol_l.isra.0>:
   144a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   144a2:	001f      	movs	r7, r3
   144a4:	000e      	movs	r6, r1
   144a6:	b087      	sub	sp, #28
   144a8:	9005      	str	r0, [sp, #20]
   144aa:	9103      	str	r1, [sp, #12]
   144ac:	9202      	str	r2, [sp, #8]
   144ae:	980c      	ldr	r0, [sp, #48]	; 0x30
   144b0:	7834      	ldrb	r4, [r6, #0]
   144b2:	f000 fae8 	bl	14a86 <__locale_ctype_ptr_l>
   144b6:	2208      	movs	r2, #8
   144b8:	1900      	adds	r0, r0, r4
   144ba:	7843      	ldrb	r3, [r0, #1]
   144bc:	1c75      	adds	r5, r6, #1
   144be:	4013      	ands	r3, r2
   144c0:	d10c      	bne.n	144dc <_strtol_l.isra.0+0x3c>
   144c2:	2c2d      	cmp	r4, #45	; 0x2d
   144c4:	d10c      	bne.n	144e0 <_strtol_l.isra.0+0x40>
   144c6:	3301      	adds	r3, #1
   144c8:	782c      	ldrb	r4, [r5, #0]
   144ca:	9301      	str	r3, [sp, #4]
   144cc:	1cb5      	adds	r5, r6, #2
   144ce:	2f00      	cmp	r7, #0
   144d0:	d00c      	beq.n	144ec <_strtol_l.isra.0+0x4c>
   144d2:	2f10      	cmp	r7, #16
   144d4:	d114      	bne.n	14500 <_strtol_l.isra.0+0x60>
   144d6:	2c30      	cmp	r4, #48	; 0x30
   144d8:	d00a      	beq.n	144f0 <_strtol_l.isra.0+0x50>
   144da:	e011      	b.n	14500 <_strtol_l.isra.0+0x60>
   144dc:	002e      	movs	r6, r5
   144de:	e7e6      	b.n	144ae <_strtol_l.isra.0+0xe>
   144e0:	9301      	str	r3, [sp, #4]
   144e2:	2c2b      	cmp	r4, #43	; 0x2b
   144e4:	d1f3      	bne.n	144ce <_strtol_l.isra.0+0x2e>
   144e6:	782c      	ldrb	r4, [r5, #0]
   144e8:	1cb5      	adds	r5, r6, #2
   144ea:	e7f0      	b.n	144ce <_strtol_l.isra.0+0x2e>
   144ec:	2c30      	cmp	r4, #48	; 0x30
   144ee:	d12f      	bne.n	14550 <_strtol_l.isra.0+0xb0>
   144f0:	2220      	movs	r2, #32
   144f2:	782b      	ldrb	r3, [r5, #0]
   144f4:	4393      	bics	r3, r2
   144f6:	2b58      	cmp	r3, #88	; 0x58
   144f8:	d151      	bne.n	1459e <_strtol_l.isra.0+0xfe>
   144fa:	2710      	movs	r7, #16
   144fc:	786c      	ldrb	r4, [r5, #1]
   144fe:	3502      	adds	r5, #2
   14500:	9b01      	ldr	r3, [sp, #4]
   14502:	4a29      	ldr	r2, [pc, #164]	; (145a8 <_strtol_l.isra.0+0x108>)
   14504:	0039      	movs	r1, r7
   14506:	189e      	adds	r6, r3, r2
   14508:	0030      	movs	r0, r6
   1450a:	f7fd ff5f 	bl	123cc <__aeabi_uidivmod>
   1450e:	0030      	movs	r0, r6
   14510:	9104      	str	r1, [sp, #16]
   14512:	0039      	movs	r1, r7
   14514:	f7fd fed4 	bl	122c0 <__udivsi3>
   14518:	2101      	movs	r1, #1
   1451a:	2300      	movs	r3, #0
   1451c:	4249      	negs	r1, r1
   1451e:	0002      	movs	r2, r0
   14520:	468c      	mov	ip, r1
   14522:	0018      	movs	r0, r3
   14524:	0021      	movs	r1, r4
   14526:	3930      	subs	r1, #48	; 0x30
   14528:	2909      	cmp	r1, #9
   1452a:	d813      	bhi.n	14554 <_strtol_l.isra.0+0xb4>
   1452c:	000c      	movs	r4, r1
   1452e:	42a7      	cmp	r7, r4
   14530:	dd1c      	ble.n	1456c <_strtol_l.isra.0+0xcc>
   14532:	1c59      	adds	r1, r3, #1
   14534:	d009      	beq.n	1454a <_strtol_l.isra.0+0xaa>
   14536:	4663      	mov	r3, ip
   14538:	4282      	cmp	r2, r0
   1453a:	d306      	bcc.n	1454a <_strtol_l.isra.0+0xaa>
   1453c:	d102      	bne.n	14544 <_strtol_l.isra.0+0xa4>
   1453e:	9904      	ldr	r1, [sp, #16]
   14540:	42a1      	cmp	r1, r4
   14542:	db02      	blt.n	1454a <_strtol_l.isra.0+0xaa>
   14544:	2301      	movs	r3, #1
   14546:	4378      	muls	r0, r7
   14548:	1820      	adds	r0, r4, r0
   1454a:	782c      	ldrb	r4, [r5, #0]
   1454c:	3501      	adds	r5, #1
   1454e:	e7e9      	b.n	14524 <_strtol_l.isra.0+0x84>
   14550:	270a      	movs	r7, #10
   14552:	e7d5      	b.n	14500 <_strtol_l.isra.0+0x60>
   14554:	0021      	movs	r1, r4
   14556:	3941      	subs	r1, #65	; 0x41
   14558:	2919      	cmp	r1, #25
   1455a:	d801      	bhi.n	14560 <_strtol_l.isra.0+0xc0>
   1455c:	3c37      	subs	r4, #55	; 0x37
   1455e:	e7e6      	b.n	1452e <_strtol_l.isra.0+0x8e>
   14560:	0021      	movs	r1, r4
   14562:	3961      	subs	r1, #97	; 0x61
   14564:	2919      	cmp	r1, #25
   14566:	d801      	bhi.n	1456c <_strtol_l.isra.0+0xcc>
   14568:	3c57      	subs	r4, #87	; 0x57
   1456a:	e7e0      	b.n	1452e <_strtol_l.isra.0+0x8e>
   1456c:	1c5a      	adds	r2, r3, #1
   1456e:	d108      	bne.n	14582 <_strtol_l.isra.0+0xe2>
   14570:	9a05      	ldr	r2, [sp, #20]
   14572:	3323      	adds	r3, #35	; 0x23
   14574:	6013      	str	r3, [r2, #0]
   14576:	9b02      	ldr	r3, [sp, #8]
   14578:	0030      	movs	r0, r6
   1457a:	2b00      	cmp	r3, #0
   1457c:	d10b      	bne.n	14596 <_strtol_l.isra.0+0xf6>
   1457e:	b007      	add	sp, #28
   14580:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14582:	9a01      	ldr	r2, [sp, #4]
   14584:	2a00      	cmp	r2, #0
   14586:	d000      	beq.n	1458a <_strtol_l.isra.0+0xea>
   14588:	4240      	negs	r0, r0
   1458a:	9a02      	ldr	r2, [sp, #8]
   1458c:	2a00      	cmp	r2, #0
   1458e:	d0f6      	beq.n	1457e <_strtol_l.isra.0+0xde>
   14590:	9a03      	ldr	r2, [sp, #12]
   14592:	2b00      	cmp	r3, #0
   14594:	d000      	beq.n	14598 <_strtol_l.isra.0+0xf8>
   14596:	1e6a      	subs	r2, r5, #1
   14598:	9b02      	ldr	r3, [sp, #8]
   1459a:	601a      	str	r2, [r3, #0]
   1459c:	e7ef      	b.n	1457e <_strtol_l.isra.0+0xde>
   1459e:	2430      	movs	r4, #48	; 0x30
   145a0:	2f00      	cmp	r7, #0
   145a2:	d1ad      	bne.n	14500 <_strtol_l.isra.0+0x60>
   145a4:	3708      	adds	r7, #8
   145a6:	e7ab      	b.n	14500 <_strtol_l.isra.0+0x60>
   145a8:	7fffffff 	.word	0x7fffffff

000145ac <strtol>:
   145ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   145ae:	0013      	movs	r3, r2
   145b0:	4a06      	ldr	r2, [pc, #24]	; (145cc <strtol+0x20>)
   145b2:	0005      	movs	r5, r0
   145b4:	6810      	ldr	r0, [r2, #0]
   145b6:	6a04      	ldr	r4, [r0, #32]
   145b8:	2c00      	cmp	r4, #0
   145ba:	d100      	bne.n	145be <strtol+0x12>
   145bc:	4c04      	ldr	r4, [pc, #16]	; (145d0 <strtol+0x24>)
   145be:	000a      	movs	r2, r1
   145c0:	9400      	str	r4, [sp, #0]
   145c2:	0029      	movs	r1, r5
   145c4:	f7ff ff6c 	bl	144a0 <_strtol_l.isra.0>
   145c8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   145ca:	46c0      	nop			; (mov r8, r8)
   145cc:	20000020 	.word	0x20000020
   145d0:	20000084 	.word	0x20000084

000145d4 <__swbuf_r>:
   145d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145d6:	0005      	movs	r5, r0
   145d8:	000e      	movs	r6, r1
   145da:	0014      	movs	r4, r2
   145dc:	2800      	cmp	r0, #0
   145de:	d004      	beq.n	145ea <__swbuf_r+0x16>
   145e0:	6983      	ldr	r3, [r0, #24]
   145e2:	2b00      	cmp	r3, #0
   145e4:	d101      	bne.n	145ea <__swbuf_r+0x16>
   145e6:	f000 f9b9 	bl	1495c <__sinit>
   145ea:	4b22      	ldr	r3, [pc, #136]	; (14674 <__swbuf_r+0xa0>)
   145ec:	429c      	cmp	r4, r3
   145ee:	d12d      	bne.n	1464c <__swbuf_r+0x78>
   145f0:	686c      	ldr	r4, [r5, #4]
   145f2:	69a3      	ldr	r3, [r4, #24]
   145f4:	60a3      	str	r3, [r4, #8]
   145f6:	89a3      	ldrh	r3, [r4, #12]
   145f8:	071b      	lsls	r3, r3, #28
   145fa:	d531      	bpl.n	14660 <__swbuf_r+0x8c>
   145fc:	6923      	ldr	r3, [r4, #16]
   145fe:	2b00      	cmp	r3, #0
   14600:	d02e      	beq.n	14660 <__swbuf_r+0x8c>
   14602:	6823      	ldr	r3, [r4, #0]
   14604:	6922      	ldr	r2, [r4, #16]
   14606:	b2f7      	uxtb	r7, r6
   14608:	1a98      	subs	r0, r3, r2
   1460a:	6963      	ldr	r3, [r4, #20]
   1460c:	b2f6      	uxtb	r6, r6
   1460e:	4298      	cmp	r0, r3
   14610:	db05      	blt.n	1461e <__swbuf_r+0x4a>
   14612:	0021      	movs	r1, r4
   14614:	0028      	movs	r0, r5
   14616:	f000 f933 	bl	14880 <_fflush_r>
   1461a:	2800      	cmp	r0, #0
   1461c:	d126      	bne.n	1466c <__swbuf_r+0x98>
   1461e:	68a3      	ldr	r3, [r4, #8]
   14620:	3001      	adds	r0, #1
   14622:	3b01      	subs	r3, #1
   14624:	60a3      	str	r3, [r4, #8]
   14626:	6823      	ldr	r3, [r4, #0]
   14628:	1c5a      	adds	r2, r3, #1
   1462a:	6022      	str	r2, [r4, #0]
   1462c:	701f      	strb	r7, [r3, #0]
   1462e:	6963      	ldr	r3, [r4, #20]
   14630:	4298      	cmp	r0, r3
   14632:	d004      	beq.n	1463e <__swbuf_r+0x6a>
   14634:	89a3      	ldrh	r3, [r4, #12]
   14636:	07db      	lsls	r3, r3, #31
   14638:	d51a      	bpl.n	14670 <__swbuf_r+0x9c>
   1463a:	2e0a      	cmp	r6, #10
   1463c:	d118      	bne.n	14670 <__swbuf_r+0x9c>
   1463e:	0021      	movs	r1, r4
   14640:	0028      	movs	r0, r5
   14642:	f000 f91d 	bl	14880 <_fflush_r>
   14646:	2800      	cmp	r0, #0
   14648:	d012      	beq.n	14670 <__swbuf_r+0x9c>
   1464a:	e00f      	b.n	1466c <__swbuf_r+0x98>
   1464c:	4b0a      	ldr	r3, [pc, #40]	; (14678 <__swbuf_r+0xa4>)
   1464e:	429c      	cmp	r4, r3
   14650:	d101      	bne.n	14656 <__swbuf_r+0x82>
   14652:	68ac      	ldr	r4, [r5, #8]
   14654:	e7cd      	b.n	145f2 <__swbuf_r+0x1e>
   14656:	4b09      	ldr	r3, [pc, #36]	; (1467c <__swbuf_r+0xa8>)
   14658:	429c      	cmp	r4, r3
   1465a:	d1ca      	bne.n	145f2 <__swbuf_r+0x1e>
   1465c:	68ec      	ldr	r4, [r5, #12]
   1465e:	e7c8      	b.n	145f2 <__swbuf_r+0x1e>
   14660:	0021      	movs	r1, r4
   14662:	0028      	movs	r0, r5
   14664:	f000 f80c 	bl	14680 <__swsetup_r>
   14668:	2800      	cmp	r0, #0
   1466a:	d0ca      	beq.n	14602 <__swbuf_r+0x2e>
   1466c:	2601      	movs	r6, #1
   1466e:	4276      	negs	r6, r6
   14670:	0030      	movs	r0, r6
   14672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14674:	00017208 	.word	0x00017208
   14678:	00017228 	.word	0x00017228
   1467c:	000171e8 	.word	0x000171e8

00014680 <__swsetup_r>:
   14680:	4b36      	ldr	r3, [pc, #216]	; (1475c <__swsetup_r+0xdc>)
   14682:	b570      	push	{r4, r5, r6, lr}
   14684:	681d      	ldr	r5, [r3, #0]
   14686:	0006      	movs	r6, r0
   14688:	000c      	movs	r4, r1
   1468a:	2d00      	cmp	r5, #0
   1468c:	d005      	beq.n	1469a <__swsetup_r+0x1a>
   1468e:	69ab      	ldr	r3, [r5, #24]
   14690:	2b00      	cmp	r3, #0
   14692:	d102      	bne.n	1469a <__swsetup_r+0x1a>
   14694:	0028      	movs	r0, r5
   14696:	f000 f961 	bl	1495c <__sinit>
   1469a:	4b31      	ldr	r3, [pc, #196]	; (14760 <__swsetup_r+0xe0>)
   1469c:	429c      	cmp	r4, r3
   1469e:	d10f      	bne.n	146c0 <__swsetup_r+0x40>
   146a0:	686c      	ldr	r4, [r5, #4]
   146a2:	230c      	movs	r3, #12
   146a4:	5ee2      	ldrsh	r2, [r4, r3]
   146a6:	b293      	uxth	r3, r2
   146a8:	0719      	lsls	r1, r3, #28
   146aa:	d42d      	bmi.n	14708 <__swsetup_r+0x88>
   146ac:	06d9      	lsls	r1, r3, #27
   146ae:	d411      	bmi.n	146d4 <__swsetup_r+0x54>
   146b0:	2309      	movs	r3, #9
   146b2:	2001      	movs	r0, #1
   146b4:	6033      	str	r3, [r6, #0]
   146b6:	3337      	adds	r3, #55	; 0x37
   146b8:	4313      	orrs	r3, r2
   146ba:	81a3      	strh	r3, [r4, #12]
   146bc:	4240      	negs	r0, r0
   146be:	bd70      	pop	{r4, r5, r6, pc}
   146c0:	4b28      	ldr	r3, [pc, #160]	; (14764 <__swsetup_r+0xe4>)
   146c2:	429c      	cmp	r4, r3
   146c4:	d101      	bne.n	146ca <__swsetup_r+0x4a>
   146c6:	68ac      	ldr	r4, [r5, #8]
   146c8:	e7eb      	b.n	146a2 <__swsetup_r+0x22>
   146ca:	4b27      	ldr	r3, [pc, #156]	; (14768 <__swsetup_r+0xe8>)
   146cc:	429c      	cmp	r4, r3
   146ce:	d1e8      	bne.n	146a2 <__swsetup_r+0x22>
   146d0:	68ec      	ldr	r4, [r5, #12]
   146d2:	e7e6      	b.n	146a2 <__swsetup_r+0x22>
   146d4:	075b      	lsls	r3, r3, #29
   146d6:	d513      	bpl.n	14700 <__swsetup_r+0x80>
   146d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   146da:	2900      	cmp	r1, #0
   146dc:	d008      	beq.n	146f0 <__swsetup_r+0x70>
   146de:	0023      	movs	r3, r4
   146e0:	3344      	adds	r3, #68	; 0x44
   146e2:	4299      	cmp	r1, r3
   146e4:	d002      	beq.n	146ec <__swsetup_r+0x6c>
   146e6:	0030      	movs	r0, r6
   146e8:	f7ff fc50 	bl	13f8c <_free_r>
   146ec:	2300      	movs	r3, #0
   146ee:	6363      	str	r3, [r4, #52]	; 0x34
   146f0:	2224      	movs	r2, #36	; 0x24
   146f2:	89a3      	ldrh	r3, [r4, #12]
   146f4:	4393      	bics	r3, r2
   146f6:	81a3      	strh	r3, [r4, #12]
   146f8:	2300      	movs	r3, #0
   146fa:	6063      	str	r3, [r4, #4]
   146fc:	6923      	ldr	r3, [r4, #16]
   146fe:	6023      	str	r3, [r4, #0]
   14700:	2308      	movs	r3, #8
   14702:	89a2      	ldrh	r2, [r4, #12]
   14704:	4313      	orrs	r3, r2
   14706:	81a3      	strh	r3, [r4, #12]
   14708:	6923      	ldr	r3, [r4, #16]
   1470a:	2b00      	cmp	r3, #0
   1470c:	d10b      	bne.n	14726 <__swsetup_r+0xa6>
   1470e:	21a0      	movs	r1, #160	; 0xa0
   14710:	2280      	movs	r2, #128	; 0x80
   14712:	89a3      	ldrh	r3, [r4, #12]
   14714:	0089      	lsls	r1, r1, #2
   14716:	0092      	lsls	r2, r2, #2
   14718:	400b      	ands	r3, r1
   1471a:	4293      	cmp	r3, r2
   1471c:	d003      	beq.n	14726 <__swsetup_r+0xa6>
   1471e:	0021      	movs	r1, r4
   14720:	0030      	movs	r0, r6
   14722:	f000 f9db 	bl	14adc <__smakebuf_r>
   14726:	2301      	movs	r3, #1
   14728:	89a2      	ldrh	r2, [r4, #12]
   1472a:	4013      	ands	r3, r2
   1472c:	d011      	beq.n	14752 <__swsetup_r+0xd2>
   1472e:	2300      	movs	r3, #0
   14730:	60a3      	str	r3, [r4, #8]
   14732:	6963      	ldr	r3, [r4, #20]
   14734:	425b      	negs	r3, r3
   14736:	61a3      	str	r3, [r4, #24]
   14738:	2000      	movs	r0, #0
   1473a:	6923      	ldr	r3, [r4, #16]
   1473c:	4283      	cmp	r3, r0
   1473e:	d1be      	bne.n	146be <__swsetup_r+0x3e>
   14740:	230c      	movs	r3, #12
   14742:	5ee2      	ldrsh	r2, [r4, r3]
   14744:	0613      	lsls	r3, r2, #24
   14746:	d5ba      	bpl.n	146be <__swsetup_r+0x3e>
   14748:	2340      	movs	r3, #64	; 0x40
   1474a:	4313      	orrs	r3, r2
   1474c:	81a3      	strh	r3, [r4, #12]
   1474e:	3801      	subs	r0, #1
   14750:	e7b5      	b.n	146be <__swsetup_r+0x3e>
   14752:	0792      	lsls	r2, r2, #30
   14754:	d400      	bmi.n	14758 <__swsetup_r+0xd8>
   14756:	6963      	ldr	r3, [r4, #20]
   14758:	60a3      	str	r3, [r4, #8]
   1475a:	e7ed      	b.n	14738 <__swsetup_r+0xb8>
   1475c:	20000020 	.word	0x20000020
   14760:	00017208 	.word	0x00017208
   14764:	00017228 	.word	0x00017228
   14768:	000171e8 	.word	0x000171e8

0001476c <__sflush_r>:
   1476c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1476e:	898a      	ldrh	r2, [r1, #12]
   14770:	0005      	movs	r5, r0
   14772:	000c      	movs	r4, r1
   14774:	0713      	lsls	r3, r2, #28
   14776:	d460      	bmi.n	1483a <__sflush_r+0xce>
   14778:	684b      	ldr	r3, [r1, #4]
   1477a:	2b00      	cmp	r3, #0
   1477c:	dc04      	bgt.n	14788 <__sflush_r+0x1c>
   1477e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   14780:	2b00      	cmp	r3, #0
   14782:	dc01      	bgt.n	14788 <__sflush_r+0x1c>
   14784:	2000      	movs	r0, #0
   14786:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14788:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1478a:	2f00      	cmp	r7, #0
   1478c:	d0fa      	beq.n	14784 <__sflush_r+0x18>
   1478e:	2300      	movs	r3, #0
   14790:	682e      	ldr	r6, [r5, #0]
   14792:	602b      	str	r3, [r5, #0]
   14794:	2380      	movs	r3, #128	; 0x80
   14796:	015b      	lsls	r3, r3, #5
   14798:	401a      	ands	r2, r3
   1479a:	d034      	beq.n	14806 <__sflush_r+0x9a>
   1479c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1479e:	89a3      	ldrh	r3, [r4, #12]
   147a0:	075b      	lsls	r3, r3, #29
   147a2:	d506      	bpl.n	147b2 <__sflush_r+0x46>
   147a4:	6863      	ldr	r3, [r4, #4]
   147a6:	1ac0      	subs	r0, r0, r3
   147a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   147aa:	2b00      	cmp	r3, #0
   147ac:	d001      	beq.n	147b2 <__sflush_r+0x46>
   147ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
   147b0:	1ac0      	subs	r0, r0, r3
   147b2:	0002      	movs	r2, r0
   147b4:	6a21      	ldr	r1, [r4, #32]
   147b6:	2300      	movs	r3, #0
   147b8:	0028      	movs	r0, r5
   147ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   147bc:	47b8      	blx	r7
   147be:	89a1      	ldrh	r1, [r4, #12]
   147c0:	1c43      	adds	r3, r0, #1
   147c2:	d106      	bne.n	147d2 <__sflush_r+0x66>
   147c4:	682b      	ldr	r3, [r5, #0]
   147c6:	2b1d      	cmp	r3, #29
   147c8:	d831      	bhi.n	1482e <__sflush_r+0xc2>
   147ca:	4a2c      	ldr	r2, [pc, #176]	; (1487c <__sflush_r+0x110>)
   147cc:	40da      	lsrs	r2, r3
   147ce:	07d3      	lsls	r3, r2, #31
   147d0:	d52d      	bpl.n	1482e <__sflush_r+0xc2>
   147d2:	2300      	movs	r3, #0
   147d4:	6063      	str	r3, [r4, #4]
   147d6:	6923      	ldr	r3, [r4, #16]
   147d8:	6023      	str	r3, [r4, #0]
   147da:	04cb      	lsls	r3, r1, #19
   147dc:	d505      	bpl.n	147ea <__sflush_r+0x7e>
   147de:	1c43      	adds	r3, r0, #1
   147e0:	d102      	bne.n	147e8 <__sflush_r+0x7c>
   147e2:	682b      	ldr	r3, [r5, #0]
   147e4:	2b00      	cmp	r3, #0
   147e6:	d100      	bne.n	147ea <__sflush_r+0x7e>
   147e8:	6560      	str	r0, [r4, #84]	; 0x54
   147ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
   147ec:	602e      	str	r6, [r5, #0]
   147ee:	2900      	cmp	r1, #0
   147f0:	d0c8      	beq.n	14784 <__sflush_r+0x18>
   147f2:	0023      	movs	r3, r4
   147f4:	3344      	adds	r3, #68	; 0x44
   147f6:	4299      	cmp	r1, r3
   147f8:	d002      	beq.n	14800 <__sflush_r+0x94>
   147fa:	0028      	movs	r0, r5
   147fc:	f7ff fbc6 	bl	13f8c <_free_r>
   14800:	2000      	movs	r0, #0
   14802:	6360      	str	r0, [r4, #52]	; 0x34
   14804:	e7bf      	b.n	14786 <__sflush_r+0x1a>
   14806:	2301      	movs	r3, #1
   14808:	6a21      	ldr	r1, [r4, #32]
   1480a:	0028      	movs	r0, r5
   1480c:	47b8      	blx	r7
   1480e:	1c43      	adds	r3, r0, #1
   14810:	d1c5      	bne.n	1479e <__sflush_r+0x32>
   14812:	682b      	ldr	r3, [r5, #0]
   14814:	2b00      	cmp	r3, #0
   14816:	d0c2      	beq.n	1479e <__sflush_r+0x32>
   14818:	2b1d      	cmp	r3, #29
   1481a:	d001      	beq.n	14820 <__sflush_r+0xb4>
   1481c:	2b16      	cmp	r3, #22
   1481e:	d101      	bne.n	14824 <__sflush_r+0xb8>
   14820:	602e      	str	r6, [r5, #0]
   14822:	e7af      	b.n	14784 <__sflush_r+0x18>
   14824:	2340      	movs	r3, #64	; 0x40
   14826:	89a2      	ldrh	r2, [r4, #12]
   14828:	4313      	orrs	r3, r2
   1482a:	81a3      	strh	r3, [r4, #12]
   1482c:	e7ab      	b.n	14786 <__sflush_r+0x1a>
   1482e:	2340      	movs	r3, #64	; 0x40
   14830:	430b      	orrs	r3, r1
   14832:	2001      	movs	r0, #1
   14834:	81a3      	strh	r3, [r4, #12]
   14836:	4240      	negs	r0, r0
   14838:	e7a5      	b.n	14786 <__sflush_r+0x1a>
   1483a:	690f      	ldr	r7, [r1, #16]
   1483c:	2f00      	cmp	r7, #0
   1483e:	d0a1      	beq.n	14784 <__sflush_r+0x18>
   14840:	680b      	ldr	r3, [r1, #0]
   14842:	600f      	str	r7, [r1, #0]
   14844:	1bdb      	subs	r3, r3, r7
   14846:	9301      	str	r3, [sp, #4]
   14848:	2300      	movs	r3, #0
   1484a:	0792      	lsls	r2, r2, #30
   1484c:	d100      	bne.n	14850 <__sflush_r+0xe4>
   1484e:	694b      	ldr	r3, [r1, #20]
   14850:	60a3      	str	r3, [r4, #8]
   14852:	9b01      	ldr	r3, [sp, #4]
   14854:	2b00      	cmp	r3, #0
   14856:	dc00      	bgt.n	1485a <__sflush_r+0xee>
   14858:	e794      	b.n	14784 <__sflush_r+0x18>
   1485a:	9b01      	ldr	r3, [sp, #4]
   1485c:	003a      	movs	r2, r7
   1485e:	6a21      	ldr	r1, [r4, #32]
   14860:	0028      	movs	r0, r5
   14862:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   14864:	47b0      	blx	r6
   14866:	2800      	cmp	r0, #0
   14868:	dc03      	bgt.n	14872 <__sflush_r+0x106>
   1486a:	2340      	movs	r3, #64	; 0x40
   1486c:	89a2      	ldrh	r2, [r4, #12]
   1486e:	4313      	orrs	r3, r2
   14870:	e7df      	b.n	14832 <__sflush_r+0xc6>
   14872:	9b01      	ldr	r3, [sp, #4]
   14874:	183f      	adds	r7, r7, r0
   14876:	1a1b      	subs	r3, r3, r0
   14878:	9301      	str	r3, [sp, #4]
   1487a:	e7ea      	b.n	14852 <__sflush_r+0xe6>
   1487c:	20400001 	.word	0x20400001

00014880 <_fflush_r>:
   14880:	690b      	ldr	r3, [r1, #16]
   14882:	b570      	push	{r4, r5, r6, lr}
   14884:	0005      	movs	r5, r0
   14886:	000c      	movs	r4, r1
   14888:	2b00      	cmp	r3, #0
   1488a:	d101      	bne.n	14890 <_fflush_r+0x10>
   1488c:	2000      	movs	r0, #0
   1488e:	bd70      	pop	{r4, r5, r6, pc}
   14890:	2800      	cmp	r0, #0
   14892:	d004      	beq.n	1489e <_fflush_r+0x1e>
   14894:	6983      	ldr	r3, [r0, #24]
   14896:	2b00      	cmp	r3, #0
   14898:	d101      	bne.n	1489e <_fflush_r+0x1e>
   1489a:	f000 f85f 	bl	1495c <__sinit>
   1489e:	4b0b      	ldr	r3, [pc, #44]	; (148cc <_fflush_r+0x4c>)
   148a0:	429c      	cmp	r4, r3
   148a2:	d109      	bne.n	148b8 <_fflush_r+0x38>
   148a4:	686c      	ldr	r4, [r5, #4]
   148a6:	220c      	movs	r2, #12
   148a8:	5ea3      	ldrsh	r3, [r4, r2]
   148aa:	2b00      	cmp	r3, #0
   148ac:	d0ee      	beq.n	1488c <_fflush_r+0xc>
   148ae:	0021      	movs	r1, r4
   148b0:	0028      	movs	r0, r5
   148b2:	f7ff ff5b 	bl	1476c <__sflush_r>
   148b6:	e7ea      	b.n	1488e <_fflush_r+0xe>
   148b8:	4b05      	ldr	r3, [pc, #20]	; (148d0 <_fflush_r+0x50>)
   148ba:	429c      	cmp	r4, r3
   148bc:	d101      	bne.n	148c2 <_fflush_r+0x42>
   148be:	68ac      	ldr	r4, [r5, #8]
   148c0:	e7f1      	b.n	148a6 <_fflush_r+0x26>
   148c2:	4b04      	ldr	r3, [pc, #16]	; (148d4 <_fflush_r+0x54>)
   148c4:	429c      	cmp	r4, r3
   148c6:	d1ee      	bne.n	148a6 <_fflush_r+0x26>
   148c8:	68ec      	ldr	r4, [r5, #12]
   148ca:	e7ec      	b.n	148a6 <_fflush_r+0x26>
   148cc:	00017208 	.word	0x00017208
   148d0:	00017228 	.word	0x00017228
   148d4:	000171e8 	.word	0x000171e8

000148d8 <_cleanup_r>:
   148d8:	b510      	push	{r4, lr}
   148da:	4902      	ldr	r1, [pc, #8]	; (148e4 <_cleanup_r+0xc>)
   148dc:	f000 f8b2 	bl	14a44 <_fwalk_reent>
   148e0:	bd10      	pop	{r4, pc}
   148e2:	46c0      	nop			; (mov r8, r8)
   148e4:	00014881 	.word	0x00014881

000148e8 <std.isra.0>:
   148e8:	2300      	movs	r3, #0
   148ea:	b510      	push	{r4, lr}
   148ec:	0004      	movs	r4, r0
   148ee:	6003      	str	r3, [r0, #0]
   148f0:	6043      	str	r3, [r0, #4]
   148f2:	6083      	str	r3, [r0, #8]
   148f4:	8181      	strh	r1, [r0, #12]
   148f6:	6643      	str	r3, [r0, #100]	; 0x64
   148f8:	81c2      	strh	r2, [r0, #14]
   148fa:	6103      	str	r3, [r0, #16]
   148fc:	6143      	str	r3, [r0, #20]
   148fe:	6183      	str	r3, [r0, #24]
   14900:	0019      	movs	r1, r3
   14902:	2208      	movs	r2, #8
   14904:	305c      	adds	r0, #92	; 0x5c
   14906:	f7ff fb38 	bl	13f7a <memset>
   1490a:	4b05      	ldr	r3, [pc, #20]	; (14920 <std.isra.0+0x38>)
   1490c:	6224      	str	r4, [r4, #32]
   1490e:	6263      	str	r3, [r4, #36]	; 0x24
   14910:	4b04      	ldr	r3, [pc, #16]	; (14924 <std.isra.0+0x3c>)
   14912:	62a3      	str	r3, [r4, #40]	; 0x28
   14914:	4b04      	ldr	r3, [pc, #16]	; (14928 <std.isra.0+0x40>)
   14916:	62e3      	str	r3, [r4, #44]	; 0x2c
   14918:	4b04      	ldr	r3, [pc, #16]	; (1492c <std.isra.0+0x44>)
   1491a:	6323      	str	r3, [r4, #48]	; 0x30
   1491c:	bd10      	pop	{r4, pc}
   1491e:	46c0      	nop			; (mov r8, r8)
   14920:	00015451 	.word	0x00015451
   14924:	00015479 	.word	0x00015479
   14928:	000154b1 	.word	0x000154b1
   1492c:	000154dd 	.word	0x000154dd

00014930 <__sfmoreglue>:
   14930:	b570      	push	{r4, r5, r6, lr}
   14932:	2568      	movs	r5, #104	; 0x68
   14934:	1e4a      	subs	r2, r1, #1
   14936:	4355      	muls	r5, r2
   14938:	000e      	movs	r6, r1
   1493a:	0029      	movs	r1, r5
   1493c:	3174      	adds	r1, #116	; 0x74
   1493e:	f7ff fb6f 	bl	14020 <_malloc_r>
   14942:	1e04      	subs	r4, r0, #0
   14944:	d008      	beq.n	14958 <__sfmoreglue+0x28>
   14946:	2100      	movs	r1, #0
   14948:	002a      	movs	r2, r5
   1494a:	6001      	str	r1, [r0, #0]
   1494c:	6046      	str	r6, [r0, #4]
   1494e:	300c      	adds	r0, #12
   14950:	60a0      	str	r0, [r4, #8]
   14952:	3268      	adds	r2, #104	; 0x68
   14954:	f7ff fb11 	bl	13f7a <memset>
   14958:	0020      	movs	r0, r4
   1495a:	bd70      	pop	{r4, r5, r6, pc}

0001495c <__sinit>:
   1495c:	6983      	ldr	r3, [r0, #24]
   1495e:	b513      	push	{r0, r1, r4, lr}
   14960:	0004      	movs	r4, r0
   14962:	2b00      	cmp	r3, #0
   14964:	d128      	bne.n	149b8 <__sinit+0x5c>
   14966:	6483      	str	r3, [r0, #72]	; 0x48
   14968:	64c3      	str	r3, [r0, #76]	; 0x4c
   1496a:	6503      	str	r3, [r0, #80]	; 0x50
   1496c:	4b13      	ldr	r3, [pc, #76]	; (149bc <__sinit+0x60>)
   1496e:	4a14      	ldr	r2, [pc, #80]	; (149c0 <__sinit+0x64>)
   14970:	681b      	ldr	r3, [r3, #0]
   14972:	6282      	str	r2, [r0, #40]	; 0x28
   14974:	9301      	str	r3, [sp, #4]
   14976:	4298      	cmp	r0, r3
   14978:	d101      	bne.n	1497e <__sinit+0x22>
   1497a:	2301      	movs	r3, #1
   1497c:	6183      	str	r3, [r0, #24]
   1497e:	0020      	movs	r0, r4
   14980:	f000 f820 	bl	149c4 <__sfp>
   14984:	6060      	str	r0, [r4, #4]
   14986:	0020      	movs	r0, r4
   14988:	f000 f81c 	bl	149c4 <__sfp>
   1498c:	60a0      	str	r0, [r4, #8]
   1498e:	0020      	movs	r0, r4
   14990:	f000 f818 	bl	149c4 <__sfp>
   14994:	2200      	movs	r2, #0
   14996:	60e0      	str	r0, [r4, #12]
   14998:	2104      	movs	r1, #4
   1499a:	6860      	ldr	r0, [r4, #4]
   1499c:	f7ff ffa4 	bl	148e8 <std.isra.0>
   149a0:	2201      	movs	r2, #1
   149a2:	2109      	movs	r1, #9
   149a4:	68a0      	ldr	r0, [r4, #8]
   149a6:	f7ff ff9f 	bl	148e8 <std.isra.0>
   149aa:	2202      	movs	r2, #2
   149ac:	2112      	movs	r1, #18
   149ae:	68e0      	ldr	r0, [r4, #12]
   149b0:	f7ff ff9a 	bl	148e8 <std.isra.0>
   149b4:	2301      	movs	r3, #1
   149b6:	61a3      	str	r3, [r4, #24]
   149b8:	bd13      	pop	{r0, r1, r4, pc}
   149ba:	46c0      	nop			; (mov r8, r8)
   149bc:	000171e4 	.word	0x000171e4
   149c0:	000148d9 	.word	0x000148d9

000149c4 <__sfp>:
   149c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   149c6:	4b1e      	ldr	r3, [pc, #120]	; (14a40 <__sfp+0x7c>)
   149c8:	0007      	movs	r7, r0
   149ca:	681e      	ldr	r6, [r3, #0]
   149cc:	69b3      	ldr	r3, [r6, #24]
   149ce:	2b00      	cmp	r3, #0
   149d0:	d102      	bne.n	149d8 <__sfp+0x14>
   149d2:	0030      	movs	r0, r6
   149d4:	f7ff ffc2 	bl	1495c <__sinit>
   149d8:	3648      	adds	r6, #72	; 0x48
   149da:	68b4      	ldr	r4, [r6, #8]
   149dc:	6873      	ldr	r3, [r6, #4]
   149de:	3b01      	subs	r3, #1
   149e0:	d504      	bpl.n	149ec <__sfp+0x28>
   149e2:	6833      	ldr	r3, [r6, #0]
   149e4:	2b00      	cmp	r3, #0
   149e6:	d007      	beq.n	149f8 <__sfp+0x34>
   149e8:	6836      	ldr	r6, [r6, #0]
   149ea:	e7f6      	b.n	149da <__sfp+0x16>
   149ec:	220c      	movs	r2, #12
   149ee:	5ea5      	ldrsh	r5, [r4, r2]
   149f0:	2d00      	cmp	r5, #0
   149f2:	d00d      	beq.n	14a10 <__sfp+0x4c>
   149f4:	3468      	adds	r4, #104	; 0x68
   149f6:	e7f2      	b.n	149de <__sfp+0x1a>
   149f8:	2104      	movs	r1, #4
   149fa:	0038      	movs	r0, r7
   149fc:	f7ff ff98 	bl	14930 <__sfmoreglue>
   14a00:	6030      	str	r0, [r6, #0]
   14a02:	2800      	cmp	r0, #0
   14a04:	d1f0      	bne.n	149e8 <__sfp+0x24>
   14a06:	230c      	movs	r3, #12
   14a08:	0004      	movs	r4, r0
   14a0a:	603b      	str	r3, [r7, #0]
   14a0c:	0020      	movs	r0, r4
   14a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14a10:	2301      	movs	r3, #1
   14a12:	0020      	movs	r0, r4
   14a14:	425b      	negs	r3, r3
   14a16:	81e3      	strh	r3, [r4, #14]
   14a18:	3302      	adds	r3, #2
   14a1a:	81a3      	strh	r3, [r4, #12]
   14a1c:	6665      	str	r5, [r4, #100]	; 0x64
   14a1e:	6025      	str	r5, [r4, #0]
   14a20:	60a5      	str	r5, [r4, #8]
   14a22:	6065      	str	r5, [r4, #4]
   14a24:	6125      	str	r5, [r4, #16]
   14a26:	6165      	str	r5, [r4, #20]
   14a28:	61a5      	str	r5, [r4, #24]
   14a2a:	2208      	movs	r2, #8
   14a2c:	0029      	movs	r1, r5
   14a2e:	305c      	adds	r0, #92	; 0x5c
   14a30:	f7ff faa3 	bl	13f7a <memset>
   14a34:	6365      	str	r5, [r4, #52]	; 0x34
   14a36:	63a5      	str	r5, [r4, #56]	; 0x38
   14a38:	64a5      	str	r5, [r4, #72]	; 0x48
   14a3a:	64e5      	str	r5, [r4, #76]	; 0x4c
   14a3c:	e7e6      	b.n	14a0c <__sfp+0x48>
   14a3e:	46c0      	nop			; (mov r8, r8)
   14a40:	000171e4 	.word	0x000171e4

00014a44 <_fwalk_reent>:
   14a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14a46:	0004      	movs	r4, r0
   14a48:	0007      	movs	r7, r0
   14a4a:	2600      	movs	r6, #0
   14a4c:	9101      	str	r1, [sp, #4]
   14a4e:	3448      	adds	r4, #72	; 0x48
   14a50:	2c00      	cmp	r4, #0
   14a52:	d101      	bne.n	14a58 <_fwalk_reent+0x14>
   14a54:	0030      	movs	r0, r6
   14a56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14a58:	6863      	ldr	r3, [r4, #4]
   14a5a:	68a5      	ldr	r5, [r4, #8]
   14a5c:	9300      	str	r3, [sp, #0]
   14a5e:	9b00      	ldr	r3, [sp, #0]
   14a60:	3b01      	subs	r3, #1
   14a62:	9300      	str	r3, [sp, #0]
   14a64:	d501      	bpl.n	14a6a <_fwalk_reent+0x26>
   14a66:	6824      	ldr	r4, [r4, #0]
   14a68:	e7f2      	b.n	14a50 <_fwalk_reent+0xc>
   14a6a:	89ab      	ldrh	r3, [r5, #12]
   14a6c:	2b01      	cmp	r3, #1
   14a6e:	d908      	bls.n	14a82 <_fwalk_reent+0x3e>
   14a70:	220e      	movs	r2, #14
   14a72:	5eab      	ldrsh	r3, [r5, r2]
   14a74:	3301      	adds	r3, #1
   14a76:	d004      	beq.n	14a82 <_fwalk_reent+0x3e>
   14a78:	0029      	movs	r1, r5
   14a7a:	0038      	movs	r0, r7
   14a7c:	9b01      	ldr	r3, [sp, #4]
   14a7e:	4798      	blx	r3
   14a80:	4306      	orrs	r6, r0
   14a82:	3568      	adds	r5, #104	; 0x68
   14a84:	e7eb      	b.n	14a5e <_fwalk_reent+0x1a>

00014a86 <__locale_ctype_ptr_l>:
   14a86:	30ec      	adds	r0, #236	; 0xec
   14a88:	6800      	ldr	r0, [r0, #0]
   14a8a:	4770      	bx	lr

00014a8c <__swhatbuf_r>:
   14a8c:	b570      	push	{r4, r5, r6, lr}
   14a8e:	000e      	movs	r6, r1
   14a90:	001d      	movs	r5, r3
   14a92:	230e      	movs	r3, #14
   14a94:	5ec9      	ldrsh	r1, [r1, r3]
   14a96:	b090      	sub	sp, #64	; 0x40
   14a98:	0014      	movs	r4, r2
   14a9a:	2900      	cmp	r1, #0
   14a9c:	da07      	bge.n	14aae <__swhatbuf_r+0x22>
   14a9e:	2300      	movs	r3, #0
   14aa0:	602b      	str	r3, [r5, #0]
   14aa2:	89b3      	ldrh	r3, [r6, #12]
   14aa4:	061b      	lsls	r3, r3, #24
   14aa6:	d411      	bmi.n	14acc <__swhatbuf_r+0x40>
   14aa8:	2380      	movs	r3, #128	; 0x80
   14aaa:	00db      	lsls	r3, r3, #3
   14aac:	e00f      	b.n	14ace <__swhatbuf_r+0x42>
   14aae:	aa01      	add	r2, sp, #4
   14ab0:	f000 fd4c 	bl	1554c <_fstat_r>
   14ab4:	2800      	cmp	r0, #0
   14ab6:	dbf2      	blt.n	14a9e <__swhatbuf_r+0x12>
   14ab8:	22f0      	movs	r2, #240	; 0xf0
   14aba:	9b02      	ldr	r3, [sp, #8]
   14abc:	0212      	lsls	r2, r2, #8
   14abe:	4013      	ands	r3, r2
   14ac0:	4a05      	ldr	r2, [pc, #20]	; (14ad8 <__swhatbuf_r+0x4c>)
   14ac2:	189b      	adds	r3, r3, r2
   14ac4:	425a      	negs	r2, r3
   14ac6:	4153      	adcs	r3, r2
   14ac8:	602b      	str	r3, [r5, #0]
   14aca:	e7ed      	b.n	14aa8 <__swhatbuf_r+0x1c>
   14acc:	2340      	movs	r3, #64	; 0x40
   14ace:	2000      	movs	r0, #0
   14ad0:	6023      	str	r3, [r4, #0]
   14ad2:	b010      	add	sp, #64	; 0x40
   14ad4:	bd70      	pop	{r4, r5, r6, pc}
   14ad6:	46c0      	nop			; (mov r8, r8)
   14ad8:	ffffe000 	.word	0xffffe000

00014adc <__smakebuf_r>:
   14adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14ade:	2602      	movs	r6, #2
   14ae0:	898b      	ldrh	r3, [r1, #12]
   14ae2:	0005      	movs	r5, r0
   14ae4:	000c      	movs	r4, r1
   14ae6:	4233      	tst	r3, r6
   14ae8:	d006      	beq.n	14af8 <__smakebuf_r+0x1c>
   14aea:	0023      	movs	r3, r4
   14aec:	3347      	adds	r3, #71	; 0x47
   14aee:	6023      	str	r3, [r4, #0]
   14af0:	6123      	str	r3, [r4, #16]
   14af2:	2301      	movs	r3, #1
   14af4:	6163      	str	r3, [r4, #20]
   14af6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   14af8:	ab01      	add	r3, sp, #4
   14afa:	466a      	mov	r2, sp
   14afc:	f7ff ffc6 	bl	14a8c <__swhatbuf_r>
   14b00:	9900      	ldr	r1, [sp, #0]
   14b02:	0007      	movs	r7, r0
   14b04:	0028      	movs	r0, r5
   14b06:	f7ff fa8b 	bl	14020 <_malloc_r>
   14b0a:	2800      	cmp	r0, #0
   14b0c:	d106      	bne.n	14b1c <__smakebuf_r+0x40>
   14b0e:	220c      	movs	r2, #12
   14b10:	5ea3      	ldrsh	r3, [r4, r2]
   14b12:	059a      	lsls	r2, r3, #22
   14b14:	d4ef      	bmi.n	14af6 <__smakebuf_r+0x1a>
   14b16:	431e      	orrs	r6, r3
   14b18:	81a6      	strh	r6, [r4, #12]
   14b1a:	e7e6      	b.n	14aea <__smakebuf_r+0xe>
   14b1c:	4b0d      	ldr	r3, [pc, #52]	; (14b54 <__smakebuf_r+0x78>)
   14b1e:	62ab      	str	r3, [r5, #40]	; 0x28
   14b20:	2380      	movs	r3, #128	; 0x80
   14b22:	89a2      	ldrh	r2, [r4, #12]
   14b24:	6020      	str	r0, [r4, #0]
   14b26:	4313      	orrs	r3, r2
   14b28:	81a3      	strh	r3, [r4, #12]
   14b2a:	9b00      	ldr	r3, [sp, #0]
   14b2c:	6120      	str	r0, [r4, #16]
   14b2e:	6163      	str	r3, [r4, #20]
   14b30:	9b01      	ldr	r3, [sp, #4]
   14b32:	2b00      	cmp	r3, #0
   14b34:	d00a      	beq.n	14b4c <__smakebuf_r+0x70>
   14b36:	230e      	movs	r3, #14
   14b38:	5ee1      	ldrsh	r1, [r4, r3]
   14b3a:	0028      	movs	r0, r5
   14b3c:	f000 fd18 	bl	15570 <_isatty_r>
   14b40:	2800      	cmp	r0, #0
   14b42:	d003      	beq.n	14b4c <__smakebuf_r+0x70>
   14b44:	2301      	movs	r3, #1
   14b46:	89a2      	ldrh	r2, [r4, #12]
   14b48:	4313      	orrs	r3, r2
   14b4a:	81a3      	strh	r3, [r4, #12]
   14b4c:	89a0      	ldrh	r0, [r4, #12]
   14b4e:	4338      	orrs	r0, r7
   14b50:	81a0      	strh	r0, [r4, #12]
   14b52:	e7d0      	b.n	14af6 <__smakebuf_r+0x1a>
   14b54:	000148d9 	.word	0x000148d9

00014b58 <__ascii_mbtowc>:
   14b58:	b082      	sub	sp, #8
   14b5a:	2900      	cmp	r1, #0
   14b5c:	d100      	bne.n	14b60 <__ascii_mbtowc+0x8>
   14b5e:	a901      	add	r1, sp, #4
   14b60:	1e10      	subs	r0, r2, #0
   14b62:	d006      	beq.n	14b72 <__ascii_mbtowc+0x1a>
   14b64:	2b00      	cmp	r3, #0
   14b66:	d006      	beq.n	14b76 <__ascii_mbtowc+0x1e>
   14b68:	7813      	ldrb	r3, [r2, #0]
   14b6a:	600b      	str	r3, [r1, #0]
   14b6c:	7810      	ldrb	r0, [r2, #0]
   14b6e:	1e43      	subs	r3, r0, #1
   14b70:	4198      	sbcs	r0, r3
   14b72:	b002      	add	sp, #8
   14b74:	4770      	bx	lr
   14b76:	2002      	movs	r0, #2
   14b78:	4240      	negs	r0, r0
   14b7a:	e7fa      	b.n	14b72 <__ascii_mbtowc+0x1a>

00014b7c <__malloc_lock>:
   14b7c:	4770      	bx	lr

00014b7e <__malloc_unlock>:
   14b7e:	4770      	bx	lr

00014b80 <__ssputs_r>:
   14b80:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b82:	688e      	ldr	r6, [r1, #8]
   14b84:	b085      	sub	sp, #20
   14b86:	0007      	movs	r7, r0
   14b88:	000c      	movs	r4, r1
   14b8a:	9203      	str	r2, [sp, #12]
   14b8c:	9301      	str	r3, [sp, #4]
   14b8e:	429e      	cmp	r6, r3
   14b90:	d839      	bhi.n	14c06 <__ssputs_r+0x86>
   14b92:	2390      	movs	r3, #144	; 0x90
   14b94:	898a      	ldrh	r2, [r1, #12]
   14b96:	00db      	lsls	r3, r3, #3
   14b98:	421a      	tst	r2, r3
   14b9a:	d034      	beq.n	14c06 <__ssputs_r+0x86>
   14b9c:	2503      	movs	r5, #3
   14b9e:	6909      	ldr	r1, [r1, #16]
   14ba0:	6823      	ldr	r3, [r4, #0]
   14ba2:	1a5b      	subs	r3, r3, r1
   14ba4:	9302      	str	r3, [sp, #8]
   14ba6:	6963      	ldr	r3, [r4, #20]
   14ba8:	9802      	ldr	r0, [sp, #8]
   14baa:	435d      	muls	r5, r3
   14bac:	0feb      	lsrs	r3, r5, #31
   14bae:	195d      	adds	r5, r3, r5
   14bb0:	9b01      	ldr	r3, [sp, #4]
   14bb2:	106d      	asrs	r5, r5, #1
   14bb4:	3301      	adds	r3, #1
   14bb6:	181b      	adds	r3, r3, r0
   14bb8:	42ab      	cmp	r3, r5
   14bba:	d900      	bls.n	14bbe <__ssputs_r+0x3e>
   14bbc:	001d      	movs	r5, r3
   14bbe:	0553      	lsls	r3, r2, #21
   14bc0:	d532      	bpl.n	14c28 <__ssputs_r+0xa8>
   14bc2:	0029      	movs	r1, r5
   14bc4:	0038      	movs	r0, r7
   14bc6:	f7ff fa2b 	bl	14020 <_malloc_r>
   14bca:	1e06      	subs	r6, r0, #0
   14bcc:	d109      	bne.n	14be2 <__ssputs_r+0x62>
   14bce:	230c      	movs	r3, #12
   14bd0:	603b      	str	r3, [r7, #0]
   14bd2:	2340      	movs	r3, #64	; 0x40
   14bd4:	2001      	movs	r0, #1
   14bd6:	89a2      	ldrh	r2, [r4, #12]
   14bd8:	4240      	negs	r0, r0
   14bda:	4313      	orrs	r3, r2
   14bdc:	81a3      	strh	r3, [r4, #12]
   14bde:	b005      	add	sp, #20
   14be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14be2:	9a02      	ldr	r2, [sp, #8]
   14be4:	6921      	ldr	r1, [r4, #16]
   14be6:	f7ff f9ad 	bl	13f44 <memcpy>
   14bea:	89a3      	ldrh	r3, [r4, #12]
   14bec:	4a14      	ldr	r2, [pc, #80]	; (14c40 <__ssputs_r+0xc0>)
   14bee:	401a      	ands	r2, r3
   14bf0:	2380      	movs	r3, #128	; 0x80
   14bf2:	4313      	orrs	r3, r2
   14bf4:	81a3      	strh	r3, [r4, #12]
   14bf6:	9b02      	ldr	r3, [sp, #8]
   14bf8:	6126      	str	r6, [r4, #16]
   14bfa:	18f6      	adds	r6, r6, r3
   14bfc:	6026      	str	r6, [r4, #0]
   14bfe:	6165      	str	r5, [r4, #20]
   14c00:	9e01      	ldr	r6, [sp, #4]
   14c02:	1aed      	subs	r5, r5, r3
   14c04:	60a5      	str	r5, [r4, #8]
   14c06:	9b01      	ldr	r3, [sp, #4]
   14c08:	42b3      	cmp	r3, r6
   14c0a:	d200      	bcs.n	14c0e <__ssputs_r+0x8e>
   14c0c:	001e      	movs	r6, r3
   14c0e:	0032      	movs	r2, r6
   14c10:	9903      	ldr	r1, [sp, #12]
   14c12:	6820      	ldr	r0, [r4, #0]
   14c14:	f7ff f99f 	bl	13f56 <memmove>
   14c18:	68a3      	ldr	r3, [r4, #8]
   14c1a:	2000      	movs	r0, #0
   14c1c:	1b9b      	subs	r3, r3, r6
   14c1e:	60a3      	str	r3, [r4, #8]
   14c20:	6823      	ldr	r3, [r4, #0]
   14c22:	199e      	adds	r6, r3, r6
   14c24:	6026      	str	r6, [r4, #0]
   14c26:	e7da      	b.n	14bde <__ssputs_r+0x5e>
   14c28:	002a      	movs	r2, r5
   14c2a:	0038      	movs	r0, r7
   14c2c:	f000 fcd1 	bl	155d2 <_realloc_r>
   14c30:	1e06      	subs	r6, r0, #0
   14c32:	d1e0      	bne.n	14bf6 <__ssputs_r+0x76>
   14c34:	6921      	ldr	r1, [r4, #16]
   14c36:	0038      	movs	r0, r7
   14c38:	f7ff f9a8 	bl	13f8c <_free_r>
   14c3c:	e7c7      	b.n	14bce <__ssputs_r+0x4e>
   14c3e:	46c0      	nop			; (mov r8, r8)
   14c40:	fffffb7f 	.word	0xfffffb7f

00014c44 <_svfiprintf_r>:
   14c44:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c46:	b09f      	sub	sp, #124	; 0x7c
   14c48:	9002      	str	r0, [sp, #8]
   14c4a:	9305      	str	r3, [sp, #20]
   14c4c:	898b      	ldrh	r3, [r1, #12]
   14c4e:	000f      	movs	r7, r1
   14c50:	0016      	movs	r6, r2
   14c52:	061b      	lsls	r3, r3, #24
   14c54:	d511      	bpl.n	14c7a <_svfiprintf_r+0x36>
   14c56:	690b      	ldr	r3, [r1, #16]
   14c58:	2b00      	cmp	r3, #0
   14c5a:	d10e      	bne.n	14c7a <_svfiprintf_r+0x36>
   14c5c:	2140      	movs	r1, #64	; 0x40
   14c5e:	f7ff f9df 	bl	14020 <_malloc_r>
   14c62:	6038      	str	r0, [r7, #0]
   14c64:	6138      	str	r0, [r7, #16]
   14c66:	2800      	cmp	r0, #0
   14c68:	d105      	bne.n	14c76 <_svfiprintf_r+0x32>
   14c6a:	230c      	movs	r3, #12
   14c6c:	9a02      	ldr	r2, [sp, #8]
   14c6e:	3801      	subs	r0, #1
   14c70:	6013      	str	r3, [r2, #0]
   14c72:	b01f      	add	sp, #124	; 0x7c
   14c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14c76:	2340      	movs	r3, #64	; 0x40
   14c78:	617b      	str	r3, [r7, #20]
   14c7a:	2300      	movs	r3, #0
   14c7c:	ad06      	add	r5, sp, #24
   14c7e:	616b      	str	r3, [r5, #20]
   14c80:	3320      	adds	r3, #32
   14c82:	766b      	strb	r3, [r5, #25]
   14c84:	3310      	adds	r3, #16
   14c86:	76ab      	strb	r3, [r5, #26]
   14c88:	0034      	movs	r4, r6
   14c8a:	7823      	ldrb	r3, [r4, #0]
   14c8c:	2b00      	cmp	r3, #0
   14c8e:	d147      	bne.n	14d20 <_svfiprintf_r+0xdc>
   14c90:	1ba3      	subs	r3, r4, r6
   14c92:	9304      	str	r3, [sp, #16]
   14c94:	d00d      	beq.n	14cb2 <_svfiprintf_r+0x6e>
   14c96:	1ba3      	subs	r3, r4, r6
   14c98:	0032      	movs	r2, r6
   14c9a:	0039      	movs	r1, r7
   14c9c:	9802      	ldr	r0, [sp, #8]
   14c9e:	f7ff ff6f 	bl	14b80 <__ssputs_r>
   14ca2:	1c43      	adds	r3, r0, #1
   14ca4:	d100      	bne.n	14ca8 <_svfiprintf_r+0x64>
   14ca6:	e0b5      	b.n	14e14 <_svfiprintf_r+0x1d0>
   14ca8:	696a      	ldr	r2, [r5, #20]
   14caa:	9b04      	ldr	r3, [sp, #16]
   14cac:	4694      	mov	ip, r2
   14cae:	4463      	add	r3, ip
   14cb0:	616b      	str	r3, [r5, #20]
   14cb2:	7823      	ldrb	r3, [r4, #0]
   14cb4:	2b00      	cmp	r3, #0
   14cb6:	d100      	bne.n	14cba <_svfiprintf_r+0x76>
   14cb8:	e0ac      	b.n	14e14 <_svfiprintf_r+0x1d0>
   14cba:	2201      	movs	r2, #1
   14cbc:	2300      	movs	r3, #0
   14cbe:	4252      	negs	r2, r2
   14cc0:	606a      	str	r2, [r5, #4]
   14cc2:	a902      	add	r1, sp, #8
   14cc4:	3254      	adds	r2, #84	; 0x54
   14cc6:	1852      	adds	r2, r2, r1
   14cc8:	3401      	adds	r4, #1
   14cca:	602b      	str	r3, [r5, #0]
   14ccc:	60eb      	str	r3, [r5, #12]
   14cce:	60ab      	str	r3, [r5, #8]
   14cd0:	7013      	strb	r3, [r2, #0]
   14cd2:	65ab      	str	r3, [r5, #88]	; 0x58
   14cd4:	4e58      	ldr	r6, [pc, #352]	; (14e38 <_svfiprintf_r+0x1f4>)
   14cd6:	2205      	movs	r2, #5
   14cd8:	7821      	ldrb	r1, [r4, #0]
   14cda:	0030      	movs	r0, r6
   14cdc:	f000 fc6e 	bl	155bc <memchr>
   14ce0:	1c62      	adds	r2, r4, #1
   14ce2:	2800      	cmp	r0, #0
   14ce4:	d120      	bne.n	14d28 <_svfiprintf_r+0xe4>
   14ce6:	6829      	ldr	r1, [r5, #0]
   14ce8:	06cb      	lsls	r3, r1, #27
   14cea:	d504      	bpl.n	14cf6 <_svfiprintf_r+0xb2>
   14cec:	2353      	movs	r3, #83	; 0x53
   14cee:	ae02      	add	r6, sp, #8
   14cf0:	3020      	adds	r0, #32
   14cf2:	199b      	adds	r3, r3, r6
   14cf4:	7018      	strb	r0, [r3, #0]
   14cf6:	070b      	lsls	r3, r1, #28
   14cf8:	d504      	bpl.n	14d04 <_svfiprintf_r+0xc0>
   14cfa:	2353      	movs	r3, #83	; 0x53
   14cfc:	202b      	movs	r0, #43	; 0x2b
   14cfe:	ae02      	add	r6, sp, #8
   14d00:	199b      	adds	r3, r3, r6
   14d02:	7018      	strb	r0, [r3, #0]
   14d04:	7823      	ldrb	r3, [r4, #0]
   14d06:	2b2a      	cmp	r3, #42	; 0x2a
   14d08:	d016      	beq.n	14d38 <_svfiprintf_r+0xf4>
   14d0a:	2000      	movs	r0, #0
   14d0c:	210a      	movs	r1, #10
   14d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14d10:	7822      	ldrb	r2, [r4, #0]
   14d12:	3a30      	subs	r2, #48	; 0x30
   14d14:	2a09      	cmp	r2, #9
   14d16:	d955      	bls.n	14dc4 <_svfiprintf_r+0x180>
   14d18:	2800      	cmp	r0, #0
   14d1a:	d015      	beq.n	14d48 <_svfiprintf_r+0x104>
   14d1c:	9309      	str	r3, [sp, #36]	; 0x24
   14d1e:	e013      	b.n	14d48 <_svfiprintf_r+0x104>
   14d20:	2b25      	cmp	r3, #37	; 0x25
   14d22:	d0b5      	beq.n	14c90 <_svfiprintf_r+0x4c>
   14d24:	3401      	adds	r4, #1
   14d26:	e7b0      	b.n	14c8a <_svfiprintf_r+0x46>
   14d28:	2301      	movs	r3, #1
   14d2a:	1b80      	subs	r0, r0, r6
   14d2c:	4083      	lsls	r3, r0
   14d2e:	6829      	ldr	r1, [r5, #0]
   14d30:	0014      	movs	r4, r2
   14d32:	430b      	orrs	r3, r1
   14d34:	602b      	str	r3, [r5, #0]
   14d36:	e7cd      	b.n	14cd4 <_svfiprintf_r+0x90>
   14d38:	9b05      	ldr	r3, [sp, #20]
   14d3a:	1d18      	adds	r0, r3, #4
   14d3c:	681b      	ldr	r3, [r3, #0]
   14d3e:	9005      	str	r0, [sp, #20]
   14d40:	2b00      	cmp	r3, #0
   14d42:	db39      	blt.n	14db8 <_svfiprintf_r+0x174>
   14d44:	9309      	str	r3, [sp, #36]	; 0x24
   14d46:	0014      	movs	r4, r2
   14d48:	7823      	ldrb	r3, [r4, #0]
   14d4a:	2b2e      	cmp	r3, #46	; 0x2e
   14d4c:	d10b      	bne.n	14d66 <_svfiprintf_r+0x122>
   14d4e:	7863      	ldrb	r3, [r4, #1]
   14d50:	1c62      	adds	r2, r4, #1
   14d52:	2b2a      	cmp	r3, #42	; 0x2a
   14d54:	d13e      	bne.n	14dd4 <_svfiprintf_r+0x190>
   14d56:	9b05      	ldr	r3, [sp, #20]
   14d58:	3402      	adds	r4, #2
   14d5a:	1d1a      	adds	r2, r3, #4
   14d5c:	681b      	ldr	r3, [r3, #0]
   14d5e:	9205      	str	r2, [sp, #20]
   14d60:	2b00      	cmp	r3, #0
   14d62:	db34      	blt.n	14dce <_svfiprintf_r+0x18a>
   14d64:	9307      	str	r3, [sp, #28]
   14d66:	4e35      	ldr	r6, [pc, #212]	; (14e3c <_svfiprintf_r+0x1f8>)
   14d68:	7821      	ldrb	r1, [r4, #0]
   14d6a:	2203      	movs	r2, #3
   14d6c:	0030      	movs	r0, r6
   14d6e:	f000 fc25 	bl	155bc <memchr>
   14d72:	2800      	cmp	r0, #0
   14d74:	d006      	beq.n	14d84 <_svfiprintf_r+0x140>
   14d76:	2340      	movs	r3, #64	; 0x40
   14d78:	1b80      	subs	r0, r0, r6
   14d7a:	4083      	lsls	r3, r0
   14d7c:	682a      	ldr	r2, [r5, #0]
   14d7e:	3401      	adds	r4, #1
   14d80:	4313      	orrs	r3, r2
   14d82:	602b      	str	r3, [r5, #0]
   14d84:	7821      	ldrb	r1, [r4, #0]
   14d86:	2206      	movs	r2, #6
   14d88:	482d      	ldr	r0, [pc, #180]	; (14e40 <_svfiprintf_r+0x1fc>)
   14d8a:	1c66      	adds	r6, r4, #1
   14d8c:	7629      	strb	r1, [r5, #24]
   14d8e:	f000 fc15 	bl	155bc <memchr>
   14d92:	2800      	cmp	r0, #0
   14d94:	d046      	beq.n	14e24 <_svfiprintf_r+0x1e0>
   14d96:	4b2b      	ldr	r3, [pc, #172]	; (14e44 <_svfiprintf_r+0x200>)
   14d98:	2b00      	cmp	r3, #0
   14d9a:	d12f      	bne.n	14dfc <_svfiprintf_r+0x1b8>
   14d9c:	6829      	ldr	r1, [r5, #0]
   14d9e:	9b05      	ldr	r3, [sp, #20]
   14da0:	2207      	movs	r2, #7
   14da2:	05c9      	lsls	r1, r1, #23
   14da4:	d528      	bpl.n	14df8 <_svfiprintf_r+0x1b4>
   14da6:	189b      	adds	r3, r3, r2
   14da8:	4393      	bics	r3, r2
   14daa:	3308      	adds	r3, #8
   14dac:	9305      	str	r3, [sp, #20]
   14dae:	696b      	ldr	r3, [r5, #20]
   14db0:	9a03      	ldr	r2, [sp, #12]
   14db2:	189b      	adds	r3, r3, r2
   14db4:	616b      	str	r3, [r5, #20]
   14db6:	e767      	b.n	14c88 <_svfiprintf_r+0x44>
   14db8:	425b      	negs	r3, r3
   14dba:	60eb      	str	r3, [r5, #12]
   14dbc:	2302      	movs	r3, #2
   14dbe:	430b      	orrs	r3, r1
   14dc0:	602b      	str	r3, [r5, #0]
   14dc2:	e7c0      	b.n	14d46 <_svfiprintf_r+0x102>
   14dc4:	434b      	muls	r3, r1
   14dc6:	3401      	adds	r4, #1
   14dc8:	189b      	adds	r3, r3, r2
   14dca:	2001      	movs	r0, #1
   14dcc:	e7a0      	b.n	14d10 <_svfiprintf_r+0xcc>
   14dce:	2301      	movs	r3, #1
   14dd0:	425b      	negs	r3, r3
   14dd2:	e7c7      	b.n	14d64 <_svfiprintf_r+0x120>
   14dd4:	2300      	movs	r3, #0
   14dd6:	0014      	movs	r4, r2
   14dd8:	200a      	movs	r0, #10
   14dda:	001a      	movs	r2, r3
   14ddc:	606b      	str	r3, [r5, #4]
   14dde:	7821      	ldrb	r1, [r4, #0]
   14de0:	3930      	subs	r1, #48	; 0x30
   14de2:	2909      	cmp	r1, #9
   14de4:	d903      	bls.n	14dee <_svfiprintf_r+0x1aa>
   14de6:	2b00      	cmp	r3, #0
   14de8:	d0bd      	beq.n	14d66 <_svfiprintf_r+0x122>
   14dea:	9207      	str	r2, [sp, #28]
   14dec:	e7bb      	b.n	14d66 <_svfiprintf_r+0x122>
   14dee:	4342      	muls	r2, r0
   14df0:	3401      	adds	r4, #1
   14df2:	1852      	adds	r2, r2, r1
   14df4:	2301      	movs	r3, #1
   14df6:	e7f2      	b.n	14dde <_svfiprintf_r+0x19a>
   14df8:	3307      	adds	r3, #7
   14dfa:	e7d5      	b.n	14da8 <_svfiprintf_r+0x164>
   14dfc:	ab05      	add	r3, sp, #20
   14dfe:	9300      	str	r3, [sp, #0]
   14e00:	003a      	movs	r2, r7
   14e02:	4b11      	ldr	r3, [pc, #68]	; (14e48 <_svfiprintf_r+0x204>)
   14e04:	0029      	movs	r1, r5
   14e06:	9802      	ldr	r0, [sp, #8]
   14e08:	e000      	b.n	14e0c <_svfiprintf_r+0x1c8>
   14e0a:	bf00      	nop
   14e0c:	9003      	str	r0, [sp, #12]
   14e0e:	9b03      	ldr	r3, [sp, #12]
   14e10:	3301      	adds	r3, #1
   14e12:	d1cc      	bne.n	14dae <_svfiprintf_r+0x16a>
   14e14:	89bb      	ldrh	r3, [r7, #12]
   14e16:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14e18:	065b      	lsls	r3, r3, #25
   14e1a:	d400      	bmi.n	14e1e <_svfiprintf_r+0x1da>
   14e1c:	e729      	b.n	14c72 <_svfiprintf_r+0x2e>
   14e1e:	2001      	movs	r0, #1
   14e20:	4240      	negs	r0, r0
   14e22:	e726      	b.n	14c72 <_svfiprintf_r+0x2e>
   14e24:	ab05      	add	r3, sp, #20
   14e26:	9300      	str	r3, [sp, #0]
   14e28:	003a      	movs	r2, r7
   14e2a:	4b07      	ldr	r3, [pc, #28]	; (14e48 <_svfiprintf_r+0x204>)
   14e2c:	0029      	movs	r1, r5
   14e2e:	9802      	ldr	r0, [sp, #8]
   14e30:	f000 f9be 	bl	151b0 <_printf_i>
   14e34:	e7ea      	b.n	14e0c <_svfiprintf_r+0x1c8>
   14e36:	46c0      	nop			; (mov r8, r8)
   14e38:	00017252 	.word	0x00017252
   14e3c:	00017258 	.word	0x00017258
   14e40:	0001725c 	.word	0x0001725c
   14e44:	00000000 	.word	0x00000000
   14e48:	00014b81 	.word	0x00014b81

00014e4c <__sfputc_r>:
   14e4c:	6893      	ldr	r3, [r2, #8]
   14e4e:	b510      	push	{r4, lr}
   14e50:	3b01      	subs	r3, #1
   14e52:	6093      	str	r3, [r2, #8]
   14e54:	2b00      	cmp	r3, #0
   14e56:	da05      	bge.n	14e64 <__sfputc_r+0x18>
   14e58:	6994      	ldr	r4, [r2, #24]
   14e5a:	42a3      	cmp	r3, r4
   14e5c:	db08      	blt.n	14e70 <__sfputc_r+0x24>
   14e5e:	b2cb      	uxtb	r3, r1
   14e60:	2b0a      	cmp	r3, #10
   14e62:	d005      	beq.n	14e70 <__sfputc_r+0x24>
   14e64:	6813      	ldr	r3, [r2, #0]
   14e66:	1c58      	adds	r0, r3, #1
   14e68:	6010      	str	r0, [r2, #0]
   14e6a:	7019      	strb	r1, [r3, #0]
   14e6c:	b2c8      	uxtb	r0, r1
   14e6e:	bd10      	pop	{r4, pc}
   14e70:	f7ff fbb0 	bl	145d4 <__swbuf_r>
   14e74:	e7fb      	b.n	14e6e <__sfputc_r+0x22>

00014e76 <__sfputs_r>:
   14e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e78:	0006      	movs	r6, r0
   14e7a:	000f      	movs	r7, r1
   14e7c:	0014      	movs	r4, r2
   14e7e:	18d5      	adds	r5, r2, r3
   14e80:	42ac      	cmp	r4, r5
   14e82:	d101      	bne.n	14e88 <__sfputs_r+0x12>
   14e84:	2000      	movs	r0, #0
   14e86:	e007      	b.n	14e98 <__sfputs_r+0x22>
   14e88:	7821      	ldrb	r1, [r4, #0]
   14e8a:	003a      	movs	r2, r7
   14e8c:	0030      	movs	r0, r6
   14e8e:	f7ff ffdd 	bl	14e4c <__sfputc_r>
   14e92:	3401      	adds	r4, #1
   14e94:	1c43      	adds	r3, r0, #1
   14e96:	d1f3      	bne.n	14e80 <__sfputs_r+0xa>
   14e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00014e9c <_vfiprintf_r>:
   14e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e9e:	b09f      	sub	sp, #124	; 0x7c
   14ea0:	0006      	movs	r6, r0
   14ea2:	000f      	movs	r7, r1
   14ea4:	0014      	movs	r4, r2
   14ea6:	9305      	str	r3, [sp, #20]
   14ea8:	2800      	cmp	r0, #0
   14eaa:	d004      	beq.n	14eb6 <_vfiprintf_r+0x1a>
   14eac:	6983      	ldr	r3, [r0, #24]
   14eae:	2b00      	cmp	r3, #0
   14eb0:	d101      	bne.n	14eb6 <_vfiprintf_r+0x1a>
   14eb2:	f7ff fd53 	bl	1495c <__sinit>
   14eb6:	4b7f      	ldr	r3, [pc, #508]	; (150b4 <_vfiprintf_r+0x218>)
   14eb8:	429f      	cmp	r7, r3
   14eba:	d15c      	bne.n	14f76 <_vfiprintf_r+0xda>
   14ebc:	6877      	ldr	r7, [r6, #4]
   14ebe:	89bb      	ldrh	r3, [r7, #12]
   14ec0:	071b      	lsls	r3, r3, #28
   14ec2:	d562      	bpl.n	14f8a <_vfiprintf_r+0xee>
   14ec4:	693b      	ldr	r3, [r7, #16]
   14ec6:	2b00      	cmp	r3, #0
   14ec8:	d05f      	beq.n	14f8a <_vfiprintf_r+0xee>
   14eca:	2300      	movs	r3, #0
   14ecc:	ad06      	add	r5, sp, #24
   14ece:	616b      	str	r3, [r5, #20]
   14ed0:	3320      	adds	r3, #32
   14ed2:	766b      	strb	r3, [r5, #25]
   14ed4:	3310      	adds	r3, #16
   14ed6:	76ab      	strb	r3, [r5, #26]
   14ed8:	9402      	str	r4, [sp, #8]
   14eda:	9c02      	ldr	r4, [sp, #8]
   14edc:	7823      	ldrb	r3, [r4, #0]
   14ede:	2b00      	cmp	r3, #0
   14ee0:	d15d      	bne.n	14f9e <_vfiprintf_r+0x102>
   14ee2:	9b02      	ldr	r3, [sp, #8]
   14ee4:	1ae3      	subs	r3, r4, r3
   14ee6:	9304      	str	r3, [sp, #16]
   14ee8:	d00d      	beq.n	14f06 <_vfiprintf_r+0x6a>
   14eea:	9b04      	ldr	r3, [sp, #16]
   14eec:	9a02      	ldr	r2, [sp, #8]
   14eee:	0039      	movs	r1, r7
   14ef0:	0030      	movs	r0, r6
   14ef2:	f7ff ffc0 	bl	14e76 <__sfputs_r>
   14ef6:	1c43      	adds	r3, r0, #1
   14ef8:	d100      	bne.n	14efc <_vfiprintf_r+0x60>
   14efa:	e0cc      	b.n	15096 <_vfiprintf_r+0x1fa>
   14efc:	696a      	ldr	r2, [r5, #20]
   14efe:	9b04      	ldr	r3, [sp, #16]
   14f00:	4694      	mov	ip, r2
   14f02:	4463      	add	r3, ip
   14f04:	616b      	str	r3, [r5, #20]
   14f06:	7823      	ldrb	r3, [r4, #0]
   14f08:	2b00      	cmp	r3, #0
   14f0a:	d100      	bne.n	14f0e <_vfiprintf_r+0x72>
   14f0c:	e0c3      	b.n	15096 <_vfiprintf_r+0x1fa>
   14f0e:	2201      	movs	r2, #1
   14f10:	2300      	movs	r3, #0
   14f12:	4252      	negs	r2, r2
   14f14:	606a      	str	r2, [r5, #4]
   14f16:	a902      	add	r1, sp, #8
   14f18:	3254      	adds	r2, #84	; 0x54
   14f1a:	1852      	adds	r2, r2, r1
   14f1c:	3401      	adds	r4, #1
   14f1e:	602b      	str	r3, [r5, #0]
   14f20:	60eb      	str	r3, [r5, #12]
   14f22:	60ab      	str	r3, [r5, #8]
   14f24:	7013      	strb	r3, [r2, #0]
   14f26:	65ab      	str	r3, [r5, #88]	; 0x58
   14f28:	7821      	ldrb	r1, [r4, #0]
   14f2a:	2205      	movs	r2, #5
   14f2c:	4862      	ldr	r0, [pc, #392]	; (150b8 <_vfiprintf_r+0x21c>)
   14f2e:	f000 fb45 	bl	155bc <memchr>
   14f32:	1c63      	adds	r3, r4, #1
   14f34:	469c      	mov	ip, r3
   14f36:	2800      	cmp	r0, #0
   14f38:	d135      	bne.n	14fa6 <_vfiprintf_r+0x10a>
   14f3a:	6829      	ldr	r1, [r5, #0]
   14f3c:	06cb      	lsls	r3, r1, #27
   14f3e:	d504      	bpl.n	14f4a <_vfiprintf_r+0xae>
   14f40:	2353      	movs	r3, #83	; 0x53
   14f42:	aa02      	add	r2, sp, #8
   14f44:	3020      	adds	r0, #32
   14f46:	189b      	adds	r3, r3, r2
   14f48:	7018      	strb	r0, [r3, #0]
   14f4a:	070b      	lsls	r3, r1, #28
   14f4c:	d504      	bpl.n	14f58 <_vfiprintf_r+0xbc>
   14f4e:	2353      	movs	r3, #83	; 0x53
   14f50:	202b      	movs	r0, #43	; 0x2b
   14f52:	aa02      	add	r2, sp, #8
   14f54:	189b      	adds	r3, r3, r2
   14f56:	7018      	strb	r0, [r3, #0]
   14f58:	7823      	ldrb	r3, [r4, #0]
   14f5a:	2b2a      	cmp	r3, #42	; 0x2a
   14f5c:	d02c      	beq.n	14fb8 <_vfiprintf_r+0x11c>
   14f5e:	2000      	movs	r0, #0
   14f60:	210a      	movs	r1, #10
   14f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14f64:	7822      	ldrb	r2, [r4, #0]
   14f66:	3a30      	subs	r2, #48	; 0x30
   14f68:	2a09      	cmp	r2, #9
   14f6a:	d800      	bhi.n	14f6e <_vfiprintf_r+0xd2>
   14f6c:	e06b      	b.n	15046 <_vfiprintf_r+0x1aa>
   14f6e:	2800      	cmp	r0, #0
   14f70:	d02a      	beq.n	14fc8 <_vfiprintf_r+0x12c>
   14f72:	9309      	str	r3, [sp, #36]	; 0x24
   14f74:	e028      	b.n	14fc8 <_vfiprintf_r+0x12c>
   14f76:	4b51      	ldr	r3, [pc, #324]	; (150bc <_vfiprintf_r+0x220>)
   14f78:	429f      	cmp	r7, r3
   14f7a:	d101      	bne.n	14f80 <_vfiprintf_r+0xe4>
   14f7c:	68b7      	ldr	r7, [r6, #8]
   14f7e:	e79e      	b.n	14ebe <_vfiprintf_r+0x22>
   14f80:	4b4f      	ldr	r3, [pc, #316]	; (150c0 <_vfiprintf_r+0x224>)
   14f82:	429f      	cmp	r7, r3
   14f84:	d19b      	bne.n	14ebe <_vfiprintf_r+0x22>
   14f86:	68f7      	ldr	r7, [r6, #12]
   14f88:	e799      	b.n	14ebe <_vfiprintf_r+0x22>
   14f8a:	0039      	movs	r1, r7
   14f8c:	0030      	movs	r0, r6
   14f8e:	f7ff fb77 	bl	14680 <__swsetup_r>
   14f92:	2800      	cmp	r0, #0
   14f94:	d099      	beq.n	14eca <_vfiprintf_r+0x2e>
   14f96:	2001      	movs	r0, #1
   14f98:	4240      	negs	r0, r0
   14f9a:	b01f      	add	sp, #124	; 0x7c
   14f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14f9e:	2b25      	cmp	r3, #37	; 0x25
   14fa0:	d09f      	beq.n	14ee2 <_vfiprintf_r+0x46>
   14fa2:	3401      	adds	r4, #1
   14fa4:	e79a      	b.n	14edc <_vfiprintf_r+0x40>
   14fa6:	4b44      	ldr	r3, [pc, #272]	; (150b8 <_vfiprintf_r+0x21c>)
   14fa8:	6829      	ldr	r1, [r5, #0]
   14faa:	1ac0      	subs	r0, r0, r3
   14fac:	2301      	movs	r3, #1
   14fae:	4083      	lsls	r3, r0
   14fb0:	430b      	orrs	r3, r1
   14fb2:	602b      	str	r3, [r5, #0]
   14fb4:	4664      	mov	r4, ip
   14fb6:	e7b7      	b.n	14f28 <_vfiprintf_r+0x8c>
   14fb8:	9b05      	ldr	r3, [sp, #20]
   14fba:	1d18      	adds	r0, r3, #4
   14fbc:	681b      	ldr	r3, [r3, #0]
   14fbe:	9005      	str	r0, [sp, #20]
   14fc0:	2b00      	cmp	r3, #0
   14fc2:	db3a      	blt.n	1503a <_vfiprintf_r+0x19e>
   14fc4:	9309      	str	r3, [sp, #36]	; 0x24
   14fc6:	4664      	mov	r4, ip
   14fc8:	7823      	ldrb	r3, [r4, #0]
   14fca:	2b2e      	cmp	r3, #46	; 0x2e
   14fcc:	d10b      	bne.n	14fe6 <_vfiprintf_r+0x14a>
   14fce:	7863      	ldrb	r3, [r4, #1]
   14fd0:	1c62      	adds	r2, r4, #1
   14fd2:	2b2a      	cmp	r3, #42	; 0x2a
   14fd4:	d13f      	bne.n	15056 <_vfiprintf_r+0x1ba>
   14fd6:	9b05      	ldr	r3, [sp, #20]
   14fd8:	3402      	adds	r4, #2
   14fda:	1d1a      	adds	r2, r3, #4
   14fdc:	681b      	ldr	r3, [r3, #0]
   14fde:	9205      	str	r2, [sp, #20]
   14fe0:	2b00      	cmp	r3, #0
   14fe2:	db35      	blt.n	15050 <_vfiprintf_r+0x1b4>
   14fe4:	9307      	str	r3, [sp, #28]
   14fe6:	7821      	ldrb	r1, [r4, #0]
   14fe8:	2203      	movs	r2, #3
   14fea:	4836      	ldr	r0, [pc, #216]	; (150c4 <_vfiprintf_r+0x228>)
   14fec:	f000 fae6 	bl	155bc <memchr>
   14ff0:	2800      	cmp	r0, #0
   14ff2:	d007      	beq.n	15004 <_vfiprintf_r+0x168>
   14ff4:	4b33      	ldr	r3, [pc, #204]	; (150c4 <_vfiprintf_r+0x228>)
   14ff6:	682a      	ldr	r2, [r5, #0]
   14ff8:	1ac0      	subs	r0, r0, r3
   14ffa:	2340      	movs	r3, #64	; 0x40
   14ffc:	4083      	lsls	r3, r0
   14ffe:	4313      	orrs	r3, r2
   15000:	602b      	str	r3, [r5, #0]
   15002:	3401      	adds	r4, #1
   15004:	7821      	ldrb	r1, [r4, #0]
   15006:	1c63      	adds	r3, r4, #1
   15008:	2206      	movs	r2, #6
   1500a:	482f      	ldr	r0, [pc, #188]	; (150c8 <_vfiprintf_r+0x22c>)
   1500c:	9302      	str	r3, [sp, #8]
   1500e:	7629      	strb	r1, [r5, #24]
   15010:	f000 fad4 	bl	155bc <memchr>
   15014:	2800      	cmp	r0, #0
   15016:	d044      	beq.n	150a2 <_vfiprintf_r+0x206>
   15018:	4b2c      	ldr	r3, [pc, #176]	; (150cc <_vfiprintf_r+0x230>)
   1501a:	2b00      	cmp	r3, #0
   1501c:	d12f      	bne.n	1507e <_vfiprintf_r+0x1e2>
   1501e:	6829      	ldr	r1, [r5, #0]
   15020:	9b05      	ldr	r3, [sp, #20]
   15022:	2207      	movs	r2, #7
   15024:	05c9      	lsls	r1, r1, #23
   15026:	d528      	bpl.n	1507a <_vfiprintf_r+0x1de>
   15028:	189b      	adds	r3, r3, r2
   1502a:	4393      	bics	r3, r2
   1502c:	3308      	adds	r3, #8
   1502e:	9305      	str	r3, [sp, #20]
   15030:	696b      	ldr	r3, [r5, #20]
   15032:	9a03      	ldr	r2, [sp, #12]
   15034:	189b      	adds	r3, r3, r2
   15036:	616b      	str	r3, [r5, #20]
   15038:	e74f      	b.n	14eda <_vfiprintf_r+0x3e>
   1503a:	425b      	negs	r3, r3
   1503c:	60eb      	str	r3, [r5, #12]
   1503e:	2302      	movs	r3, #2
   15040:	430b      	orrs	r3, r1
   15042:	602b      	str	r3, [r5, #0]
   15044:	e7bf      	b.n	14fc6 <_vfiprintf_r+0x12a>
   15046:	434b      	muls	r3, r1
   15048:	3401      	adds	r4, #1
   1504a:	189b      	adds	r3, r3, r2
   1504c:	2001      	movs	r0, #1
   1504e:	e789      	b.n	14f64 <_vfiprintf_r+0xc8>
   15050:	2301      	movs	r3, #1
   15052:	425b      	negs	r3, r3
   15054:	e7c6      	b.n	14fe4 <_vfiprintf_r+0x148>
   15056:	2300      	movs	r3, #0
   15058:	0014      	movs	r4, r2
   1505a:	200a      	movs	r0, #10
   1505c:	001a      	movs	r2, r3
   1505e:	606b      	str	r3, [r5, #4]
   15060:	7821      	ldrb	r1, [r4, #0]
   15062:	3930      	subs	r1, #48	; 0x30
   15064:	2909      	cmp	r1, #9
   15066:	d903      	bls.n	15070 <_vfiprintf_r+0x1d4>
   15068:	2b00      	cmp	r3, #0
   1506a:	d0bc      	beq.n	14fe6 <_vfiprintf_r+0x14a>
   1506c:	9207      	str	r2, [sp, #28]
   1506e:	e7ba      	b.n	14fe6 <_vfiprintf_r+0x14a>
   15070:	4342      	muls	r2, r0
   15072:	3401      	adds	r4, #1
   15074:	1852      	adds	r2, r2, r1
   15076:	2301      	movs	r3, #1
   15078:	e7f2      	b.n	15060 <_vfiprintf_r+0x1c4>
   1507a:	3307      	adds	r3, #7
   1507c:	e7d5      	b.n	1502a <_vfiprintf_r+0x18e>
   1507e:	ab05      	add	r3, sp, #20
   15080:	9300      	str	r3, [sp, #0]
   15082:	003a      	movs	r2, r7
   15084:	4b12      	ldr	r3, [pc, #72]	; (150d0 <_vfiprintf_r+0x234>)
   15086:	0029      	movs	r1, r5
   15088:	0030      	movs	r0, r6
   1508a:	e000      	b.n	1508e <_vfiprintf_r+0x1f2>
   1508c:	bf00      	nop
   1508e:	9003      	str	r0, [sp, #12]
   15090:	9b03      	ldr	r3, [sp, #12]
   15092:	3301      	adds	r3, #1
   15094:	d1cc      	bne.n	15030 <_vfiprintf_r+0x194>
   15096:	89bb      	ldrh	r3, [r7, #12]
   15098:	065b      	lsls	r3, r3, #25
   1509a:	d500      	bpl.n	1509e <_vfiprintf_r+0x202>
   1509c:	e77b      	b.n	14f96 <_vfiprintf_r+0xfa>
   1509e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   150a0:	e77b      	b.n	14f9a <_vfiprintf_r+0xfe>
   150a2:	ab05      	add	r3, sp, #20
   150a4:	9300      	str	r3, [sp, #0]
   150a6:	003a      	movs	r2, r7
   150a8:	4b09      	ldr	r3, [pc, #36]	; (150d0 <_vfiprintf_r+0x234>)
   150aa:	0029      	movs	r1, r5
   150ac:	0030      	movs	r0, r6
   150ae:	f000 f87f 	bl	151b0 <_printf_i>
   150b2:	e7ec      	b.n	1508e <_vfiprintf_r+0x1f2>
   150b4:	00017208 	.word	0x00017208
   150b8:	00017252 	.word	0x00017252
   150bc:	00017228 	.word	0x00017228
   150c0:	000171e8 	.word	0x000171e8
   150c4:	00017258 	.word	0x00017258
   150c8:	0001725c 	.word	0x0001725c
   150cc:	00000000 	.word	0x00000000
   150d0:	00014e77 	.word	0x00014e77

000150d4 <_printf_common>:
   150d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   150d6:	0015      	movs	r5, r2
   150d8:	9301      	str	r3, [sp, #4]
   150da:	688a      	ldr	r2, [r1, #8]
   150dc:	690b      	ldr	r3, [r1, #16]
   150de:	9000      	str	r0, [sp, #0]
   150e0:	000c      	movs	r4, r1
   150e2:	4293      	cmp	r3, r2
   150e4:	da00      	bge.n	150e8 <_printf_common+0x14>
   150e6:	0013      	movs	r3, r2
   150e8:	0022      	movs	r2, r4
   150ea:	602b      	str	r3, [r5, #0]
   150ec:	3243      	adds	r2, #67	; 0x43
   150ee:	7812      	ldrb	r2, [r2, #0]
   150f0:	2a00      	cmp	r2, #0
   150f2:	d001      	beq.n	150f8 <_printf_common+0x24>
   150f4:	3301      	adds	r3, #1
   150f6:	602b      	str	r3, [r5, #0]
   150f8:	6823      	ldr	r3, [r4, #0]
   150fa:	069b      	lsls	r3, r3, #26
   150fc:	d502      	bpl.n	15104 <_printf_common+0x30>
   150fe:	682b      	ldr	r3, [r5, #0]
   15100:	3302      	adds	r3, #2
   15102:	602b      	str	r3, [r5, #0]
   15104:	2706      	movs	r7, #6
   15106:	6823      	ldr	r3, [r4, #0]
   15108:	401f      	ands	r7, r3
   1510a:	d027      	beq.n	1515c <_printf_common+0x88>
   1510c:	0023      	movs	r3, r4
   1510e:	3343      	adds	r3, #67	; 0x43
   15110:	781b      	ldrb	r3, [r3, #0]
   15112:	1e5a      	subs	r2, r3, #1
   15114:	4193      	sbcs	r3, r2
   15116:	6822      	ldr	r2, [r4, #0]
   15118:	0692      	lsls	r2, r2, #26
   1511a:	d430      	bmi.n	1517e <_printf_common+0xaa>
   1511c:	0022      	movs	r2, r4
   1511e:	9901      	ldr	r1, [sp, #4]
   15120:	3243      	adds	r2, #67	; 0x43
   15122:	9800      	ldr	r0, [sp, #0]
   15124:	9e08      	ldr	r6, [sp, #32]
   15126:	47b0      	blx	r6
   15128:	1c43      	adds	r3, r0, #1
   1512a:	d025      	beq.n	15178 <_printf_common+0xa4>
   1512c:	2306      	movs	r3, #6
   1512e:	6820      	ldr	r0, [r4, #0]
   15130:	682a      	ldr	r2, [r5, #0]
   15132:	68e1      	ldr	r1, [r4, #12]
   15134:	4003      	ands	r3, r0
   15136:	2500      	movs	r5, #0
   15138:	2b04      	cmp	r3, #4
   1513a:	d103      	bne.n	15144 <_printf_common+0x70>
   1513c:	1a8d      	subs	r5, r1, r2
   1513e:	43eb      	mvns	r3, r5
   15140:	17db      	asrs	r3, r3, #31
   15142:	401d      	ands	r5, r3
   15144:	68a3      	ldr	r3, [r4, #8]
   15146:	6922      	ldr	r2, [r4, #16]
   15148:	4293      	cmp	r3, r2
   1514a:	dd01      	ble.n	15150 <_printf_common+0x7c>
   1514c:	1a9b      	subs	r3, r3, r2
   1514e:	18ed      	adds	r5, r5, r3
   15150:	2700      	movs	r7, #0
   15152:	42bd      	cmp	r5, r7
   15154:	d120      	bne.n	15198 <_printf_common+0xc4>
   15156:	2000      	movs	r0, #0
   15158:	e010      	b.n	1517c <_printf_common+0xa8>
   1515a:	3701      	adds	r7, #1
   1515c:	68e3      	ldr	r3, [r4, #12]
   1515e:	682a      	ldr	r2, [r5, #0]
   15160:	1a9b      	subs	r3, r3, r2
   15162:	429f      	cmp	r7, r3
   15164:	dad2      	bge.n	1510c <_printf_common+0x38>
   15166:	0022      	movs	r2, r4
   15168:	2301      	movs	r3, #1
   1516a:	3219      	adds	r2, #25
   1516c:	9901      	ldr	r1, [sp, #4]
   1516e:	9800      	ldr	r0, [sp, #0]
   15170:	9e08      	ldr	r6, [sp, #32]
   15172:	47b0      	blx	r6
   15174:	1c43      	adds	r3, r0, #1
   15176:	d1f0      	bne.n	1515a <_printf_common+0x86>
   15178:	2001      	movs	r0, #1
   1517a:	4240      	negs	r0, r0
   1517c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1517e:	2030      	movs	r0, #48	; 0x30
   15180:	18e1      	adds	r1, r4, r3
   15182:	3143      	adds	r1, #67	; 0x43
   15184:	7008      	strb	r0, [r1, #0]
   15186:	0021      	movs	r1, r4
   15188:	1c5a      	adds	r2, r3, #1
   1518a:	3145      	adds	r1, #69	; 0x45
   1518c:	7809      	ldrb	r1, [r1, #0]
   1518e:	18a2      	adds	r2, r4, r2
   15190:	3243      	adds	r2, #67	; 0x43
   15192:	3302      	adds	r3, #2
   15194:	7011      	strb	r1, [r2, #0]
   15196:	e7c1      	b.n	1511c <_printf_common+0x48>
   15198:	0022      	movs	r2, r4
   1519a:	2301      	movs	r3, #1
   1519c:	321a      	adds	r2, #26
   1519e:	9901      	ldr	r1, [sp, #4]
   151a0:	9800      	ldr	r0, [sp, #0]
   151a2:	9e08      	ldr	r6, [sp, #32]
   151a4:	47b0      	blx	r6
   151a6:	1c43      	adds	r3, r0, #1
   151a8:	d0e6      	beq.n	15178 <_printf_common+0xa4>
   151aa:	3701      	adds	r7, #1
   151ac:	e7d1      	b.n	15152 <_printf_common+0x7e>
	...

000151b0 <_printf_i>:
   151b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   151b2:	b08b      	sub	sp, #44	; 0x2c
   151b4:	9206      	str	r2, [sp, #24]
   151b6:	000a      	movs	r2, r1
   151b8:	3243      	adds	r2, #67	; 0x43
   151ba:	9307      	str	r3, [sp, #28]
   151bc:	9005      	str	r0, [sp, #20]
   151be:	9204      	str	r2, [sp, #16]
   151c0:	7e0a      	ldrb	r2, [r1, #24]
   151c2:	000c      	movs	r4, r1
   151c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   151c6:	2a6e      	cmp	r2, #110	; 0x6e
   151c8:	d100      	bne.n	151cc <_printf_i+0x1c>
   151ca:	e08f      	b.n	152ec <_printf_i+0x13c>
   151cc:	d817      	bhi.n	151fe <_printf_i+0x4e>
   151ce:	2a63      	cmp	r2, #99	; 0x63
   151d0:	d02c      	beq.n	1522c <_printf_i+0x7c>
   151d2:	d808      	bhi.n	151e6 <_printf_i+0x36>
   151d4:	2a00      	cmp	r2, #0
   151d6:	d100      	bne.n	151da <_printf_i+0x2a>
   151d8:	e099      	b.n	1530e <_printf_i+0x15e>
   151da:	2a58      	cmp	r2, #88	; 0x58
   151dc:	d054      	beq.n	15288 <_printf_i+0xd8>
   151de:	0026      	movs	r6, r4
   151e0:	3642      	adds	r6, #66	; 0x42
   151e2:	7032      	strb	r2, [r6, #0]
   151e4:	e029      	b.n	1523a <_printf_i+0x8a>
   151e6:	2a64      	cmp	r2, #100	; 0x64
   151e8:	d001      	beq.n	151ee <_printf_i+0x3e>
   151ea:	2a69      	cmp	r2, #105	; 0x69
   151ec:	d1f7      	bne.n	151de <_printf_i+0x2e>
   151ee:	6821      	ldr	r1, [r4, #0]
   151f0:	681a      	ldr	r2, [r3, #0]
   151f2:	0608      	lsls	r0, r1, #24
   151f4:	d523      	bpl.n	1523e <_printf_i+0x8e>
   151f6:	1d11      	adds	r1, r2, #4
   151f8:	6019      	str	r1, [r3, #0]
   151fa:	6815      	ldr	r5, [r2, #0]
   151fc:	e025      	b.n	1524a <_printf_i+0x9a>
   151fe:	2a73      	cmp	r2, #115	; 0x73
   15200:	d100      	bne.n	15204 <_printf_i+0x54>
   15202:	e088      	b.n	15316 <_printf_i+0x166>
   15204:	d808      	bhi.n	15218 <_printf_i+0x68>
   15206:	2a6f      	cmp	r2, #111	; 0x6f
   15208:	d029      	beq.n	1525e <_printf_i+0xae>
   1520a:	2a70      	cmp	r2, #112	; 0x70
   1520c:	d1e7      	bne.n	151de <_printf_i+0x2e>
   1520e:	2220      	movs	r2, #32
   15210:	6809      	ldr	r1, [r1, #0]
   15212:	430a      	orrs	r2, r1
   15214:	6022      	str	r2, [r4, #0]
   15216:	e003      	b.n	15220 <_printf_i+0x70>
   15218:	2a75      	cmp	r2, #117	; 0x75
   1521a:	d020      	beq.n	1525e <_printf_i+0xae>
   1521c:	2a78      	cmp	r2, #120	; 0x78
   1521e:	d1de      	bne.n	151de <_printf_i+0x2e>
   15220:	0022      	movs	r2, r4
   15222:	2178      	movs	r1, #120	; 0x78
   15224:	3245      	adds	r2, #69	; 0x45
   15226:	7011      	strb	r1, [r2, #0]
   15228:	4a6c      	ldr	r2, [pc, #432]	; (153dc <_printf_i+0x22c>)
   1522a:	e030      	b.n	1528e <_printf_i+0xde>
   1522c:	000e      	movs	r6, r1
   1522e:	681a      	ldr	r2, [r3, #0]
   15230:	3642      	adds	r6, #66	; 0x42
   15232:	1d11      	adds	r1, r2, #4
   15234:	6019      	str	r1, [r3, #0]
   15236:	6813      	ldr	r3, [r2, #0]
   15238:	7033      	strb	r3, [r6, #0]
   1523a:	2301      	movs	r3, #1
   1523c:	e079      	b.n	15332 <_printf_i+0x182>
   1523e:	0649      	lsls	r1, r1, #25
   15240:	d5d9      	bpl.n	151f6 <_printf_i+0x46>
   15242:	1d11      	adds	r1, r2, #4
   15244:	6019      	str	r1, [r3, #0]
   15246:	2300      	movs	r3, #0
   15248:	5ed5      	ldrsh	r5, [r2, r3]
   1524a:	2d00      	cmp	r5, #0
   1524c:	da03      	bge.n	15256 <_printf_i+0xa6>
   1524e:	232d      	movs	r3, #45	; 0x2d
   15250:	9a04      	ldr	r2, [sp, #16]
   15252:	426d      	negs	r5, r5
   15254:	7013      	strb	r3, [r2, #0]
   15256:	4b62      	ldr	r3, [pc, #392]	; (153e0 <_printf_i+0x230>)
   15258:	270a      	movs	r7, #10
   1525a:	9303      	str	r3, [sp, #12]
   1525c:	e02f      	b.n	152be <_printf_i+0x10e>
   1525e:	6820      	ldr	r0, [r4, #0]
   15260:	6819      	ldr	r1, [r3, #0]
   15262:	0605      	lsls	r5, r0, #24
   15264:	d503      	bpl.n	1526e <_printf_i+0xbe>
   15266:	1d08      	adds	r0, r1, #4
   15268:	6018      	str	r0, [r3, #0]
   1526a:	680d      	ldr	r5, [r1, #0]
   1526c:	e005      	b.n	1527a <_printf_i+0xca>
   1526e:	0640      	lsls	r0, r0, #25
   15270:	d5f9      	bpl.n	15266 <_printf_i+0xb6>
   15272:	680d      	ldr	r5, [r1, #0]
   15274:	1d08      	adds	r0, r1, #4
   15276:	6018      	str	r0, [r3, #0]
   15278:	b2ad      	uxth	r5, r5
   1527a:	4b59      	ldr	r3, [pc, #356]	; (153e0 <_printf_i+0x230>)
   1527c:	2708      	movs	r7, #8
   1527e:	9303      	str	r3, [sp, #12]
   15280:	2a6f      	cmp	r2, #111	; 0x6f
   15282:	d018      	beq.n	152b6 <_printf_i+0x106>
   15284:	270a      	movs	r7, #10
   15286:	e016      	b.n	152b6 <_printf_i+0x106>
   15288:	3145      	adds	r1, #69	; 0x45
   1528a:	700a      	strb	r2, [r1, #0]
   1528c:	4a54      	ldr	r2, [pc, #336]	; (153e0 <_printf_i+0x230>)
   1528e:	9203      	str	r2, [sp, #12]
   15290:	681a      	ldr	r2, [r3, #0]
   15292:	6821      	ldr	r1, [r4, #0]
   15294:	1d10      	adds	r0, r2, #4
   15296:	6018      	str	r0, [r3, #0]
   15298:	6815      	ldr	r5, [r2, #0]
   1529a:	0608      	lsls	r0, r1, #24
   1529c:	d522      	bpl.n	152e4 <_printf_i+0x134>
   1529e:	07cb      	lsls	r3, r1, #31
   152a0:	d502      	bpl.n	152a8 <_printf_i+0xf8>
   152a2:	2320      	movs	r3, #32
   152a4:	4319      	orrs	r1, r3
   152a6:	6021      	str	r1, [r4, #0]
   152a8:	2710      	movs	r7, #16
   152aa:	2d00      	cmp	r5, #0
   152ac:	d103      	bne.n	152b6 <_printf_i+0x106>
   152ae:	2320      	movs	r3, #32
   152b0:	6822      	ldr	r2, [r4, #0]
   152b2:	439a      	bics	r2, r3
   152b4:	6022      	str	r2, [r4, #0]
   152b6:	0023      	movs	r3, r4
   152b8:	2200      	movs	r2, #0
   152ba:	3343      	adds	r3, #67	; 0x43
   152bc:	701a      	strb	r2, [r3, #0]
   152be:	6863      	ldr	r3, [r4, #4]
   152c0:	60a3      	str	r3, [r4, #8]
   152c2:	2b00      	cmp	r3, #0
   152c4:	db5c      	blt.n	15380 <_printf_i+0x1d0>
   152c6:	2204      	movs	r2, #4
   152c8:	6821      	ldr	r1, [r4, #0]
   152ca:	4391      	bics	r1, r2
   152cc:	6021      	str	r1, [r4, #0]
   152ce:	2d00      	cmp	r5, #0
   152d0:	d158      	bne.n	15384 <_printf_i+0x1d4>
   152d2:	9e04      	ldr	r6, [sp, #16]
   152d4:	2b00      	cmp	r3, #0
   152d6:	d064      	beq.n	153a2 <_printf_i+0x1f2>
   152d8:	0026      	movs	r6, r4
   152da:	9b03      	ldr	r3, [sp, #12]
   152dc:	3642      	adds	r6, #66	; 0x42
   152de:	781b      	ldrb	r3, [r3, #0]
   152e0:	7033      	strb	r3, [r6, #0]
   152e2:	e05e      	b.n	153a2 <_printf_i+0x1f2>
   152e4:	0648      	lsls	r0, r1, #25
   152e6:	d5da      	bpl.n	1529e <_printf_i+0xee>
   152e8:	b2ad      	uxth	r5, r5
   152ea:	e7d8      	b.n	1529e <_printf_i+0xee>
   152ec:	6809      	ldr	r1, [r1, #0]
   152ee:	681a      	ldr	r2, [r3, #0]
   152f0:	0608      	lsls	r0, r1, #24
   152f2:	d505      	bpl.n	15300 <_printf_i+0x150>
   152f4:	1d11      	adds	r1, r2, #4
   152f6:	6019      	str	r1, [r3, #0]
   152f8:	6813      	ldr	r3, [r2, #0]
   152fa:	6962      	ldr	r2, [r4, #20]
   152fc:	601a      	str	r2, [r3, #0]
   152fe:	e006      	b.n	1530e <_printf_i+0x15e>
   15300:	0649      	lsls	r1, r1, #25
   15302:	d5f7      	bpl.n	152f4 <_printf_i+0x144>
   15304:	1d11      	adds	r1, r2, #4
   15306:	6019      	str	r1, [r3, #0]
   15308:	6813      	ldr	r3, [r2, #0]
   1530a:	8aa2      	ldrh	r2, [r4, #20]
   1530c:	801a      	strh	r2, [r3, #0]
   1530e:	2300      	movs	r3, #0
   15310:	9e04      	ldr	r6, [sp, #16]
   15312:	6123      	str	r3, [r4, #16]
   15314:	e054      	b.n	153c0 <_printf_i+0x210>
   15316:	681a      	ldr	r2, [r3, #0]
   15318:	1d11      	adds	r1, r2, #4
   1531a:	6019      	str	r1, [r3, #0]
   1531c:	6816      	ldr	r6, [r2, #0]
   1531e:	2100      	movs	r1, #0
   15320:	6862      	ldr	r2, [r4, #4]
   15322:	0030      	movs	r0, r6
   15324:	f000 f94a 	bl	155bc <memchr>
   15328:	2800      	cmp	r0, #0
   1532a:	d001      	beq.n	15330 <_printf_i+0x180>
   1532c:	1b80      	subs	r0, r0, r6
   1532e:	6060      	str	r0, [r4, #4]
   15330:	6863      	ldr	r3, [r4, #4]
   15332:	6123      	str	r3, [r4, #16]
   15334:	2300      	movs	r3, #0
   15336:	9a04      	ldr	r2, [sp, #16]
   15338:	7013      	strb	r3, [r2, #0]
   1533a:	e041      	b.n	153c0 <_printf_i+0x210>
   1533c:	6923      	ldr	r3, [r4, #16]
   1533e:	0032      	movs	r2, r6
   15340:	9906      	ldr	r1, [sp, #24]
   15342:	9805      	ldr	r0, [sp, #20]
   15344:	9d07      	ldr	r5, [sp, #28]
   15346:	47a8      	blx	r5
   15348:	1c43      	adds	r3, r0, #1
   1534a:	d043      	beq.n	153d4 <_printf_i+0x224>
   1534c:	6823      	ldr	r3, [r4, #0]
   1534e:	2500      	movs	r5, #0
   15350:	079b      	lsls	r3, r3, #30
   15352:	d40f      	bmi.n	15374 <_printf_i+0x1c4>
   15354:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15356:	68e0      	ldr	r0, [r4, #12]
   15358:	4298      	cmp	r0, r3
   1535a:	da3d      	bge.n	153d8 <_printf_i+0x228>
   1535c:	0018      	movs	r0, r3
   1535e:	e03b      	b.n	153d8 <_printf_i+0x228>
   15360:	0022      	movs	r2, r4
   15362:	2301      	movs	r3, #1
   15364:	3219      	adds	r2, #25
   15366:	9906      	ldr	r1, [sp, #24]
   15368:	9805      	ldr	r0, [sp, #20]
   1536a:	9e07      	ldr	r6, [sp, #28]
   1536c:	47b0      	blx	r6
   1536e:	1c43      	adds	r3, r0, #1
   15370:	d030      	beq.n	153d4 <_printf_i+0x224>
   15372:	3501      	adds	r5, #1
   15374:	68e3      	ldr	r3, [r4, #12]
   15376:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15378:	1a9b      	subs	r3, r3, r2
   1537a:	429d      	cmp	r5, r3
   1537c:	dbf0      	blt.n	15360 <_printf_i+0x1b0>
   1537e:	e7e9      	b.n	15354 <_printf_i+0x1a4>
   15380:	2d00      	cmp	r5, #0
   15382:	d0a9      	beq.n	152d8 <_printf_i+0x128>
   15384:	9e04      	ldr	r6, [sp, #16]
   15386:	0028      	movs	r0, r5
   15388:	0039      	movs	r1, r7
   1538a:	f7fd f81f 	bl	123cc <__aeabi_uidivmod>
   1538e:	9b03      	ldr	r3, [sp, #12]
   15390:	3e01      	subs	r6, #1
   15392:	5c5b      	ldrb	r3, [r3, r1]
   15394:	0028      	movs	r0, r5
   15396:	7033      	strb	r3, [r6, #0]
   15398:	0039      	movs	r1, r7
   1539a:	f7fc ff91 	bl	122c0 <__udivsi3>
   1539e:	1e05      	subs	r5, r0, #0
   153a0:	d1f1      	bne.n	15386 <_printf_i+0x1d6>
   153a2:	2f08      	cmp	r7, #8
   153a4:	d109      	bne.n	153ba <_printf_i+0x20a>
   153a6:	6823      	ldr	r3, [r4, #0]
   153a8:	07db      	lsls	r3, r3, #31
   153aa:	d506      	bpl.n	153ba <_printf_i+0x20a>
   153ac:	6863      	ldr	r3, [r4, #4]
   153ae:	6922      	ldr	r2, [r4, #16]
   153b0:	4293      	cmp	r3, r2
   153b2:	dc02      	bgt.n	153ba <_printf_i+0x20a>
   153b4:	2330      	movs	r3, #48	; 0x30
   153b6:	3e01      	subs	r6, #1
   153b8:	7033      	strb	r3, [r6, #0]
   153ba:	9b04      	ldr	r3, [sp, #16]
   153bc:	1b9b      	subs	r3, r3, r6
   153be:	6123      	str	r3, [r4, #16]
   153c0:	9b07      	ldr	r3, [sp, #28]
   153c2:	aa09      	add	r2, sp, #36	; 0x24
   153c4:	9300      	str	r3, [sp, #0]
   153c6:	0021      	movs	r1, r4
   153c8:	9b06      	ldr	r3, [sp, #24]
   153ca:	9805      	ldr	r0, [sp, #20]
   153cc:	f7ff fe82 	bl	150d4 <_printf_common>
   153d0:	1c43      	adds	r3, r0, #1
   153d2:	d1b3      	bne.n	1533c <_printf_i+0x18c>
   153d4:	2001      	movs	r0, #1
   153d6:	4240      	negs	r0, r0
   153d8:	b00b      	add	sp, #44	; 0x2c
   153da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   153dc:	00017274 	.word	0x00017274
   153e0:	00017263 	.word	0x00017263

000153e4 <_putc_r>:
   153e4:	b570      	push	{r4, r5, r6, lr}
   153e6:	0006      	movs	r6, r0
   153e8:	000d      	movs	r5, r1
   153ea:	0014      	movs	r4, r2
   153ec:	2800      	cmp	r0, #0
   153ee:	d004      	beq.n	153fa <_putc_r+0x16>
   153f0:	6983      	ldr	r3, [r0, #24]
   153f2:	2b00      	cmp	r3, #0
   153f4:	d101      	bne.n	153fa <_putc_r+0x16>
   153f6:	f7ff fab1 	bl	1495c <__sinit>
   153fa:	4b12      	ldr	r3, [pc, #72]	; (15444 <_putc_r+0x60>)
   153fc:	429c      	cmp	r4, r3
   153fe:	d111      	bne.n	15424 <_putc_r+0x40>
   15400:	6874      	ldr	r4, [r6, #4]
   15402:	68a3      	ldr	r3, [r4, #8]
   15404:	3b01      	subs	r3, #1
   15406:	60a3      	str	r3, [r4, #8]
   15408:	2b00      	cmp	r3, #0
   1540a:	da05      	bge.n	15418 <_putc_r+0x34>
   1540c:	69a2      	ldr	r2, [r4, #24]
   1540e:	4293      	cmp	r3, r2
   15410:	db12      	blt.n	15438 <_putc_r+0x54>
   15412:	b2eb      	uxtb	r3, r5
   15414:	2b0a      	cmp	r3, #10
   15416:	d00f      	beq.n	15438 <_putc_r+0x54>
   15418:	6823      	ldr	r3, [r4, #0]
   1541a:	b2e8      	uxtb	r0, r5
   1541c:	1c5a      	adds	r2, r3, #1
   1541e:	6022      	str	r2, [r4, #0]
   15420:	701d      	strb	r5, [r3, #0]
   15422:	bd70      	pop	{r4, r5, r6, pc}
   15424:	4b08      	ldr	r3, [pc, #32]	; (15448 <_putc_r+0x64>)
   15426:	429c      	cmp	r4, r3
   15428:	d101      	bne.n	1542e <_putc_r+0x4a>
   1542a:	68b4      	ldr	r4, [r6, #8]
   1542c:	e7e9      	b.n	15402 <_putc_r+0x1e>
   1542e:	4b07      	ldr	r3, [pc, #28]	; (1544c <_putc_r+0x68>)
   15430:	429c      	cmp	r4, r3
   15432:	d1e6      	bne.n	15402 <_putc_r+0x1e>
   15434:	68f4      	ldr	r4, [r6, #12]
   15436:	e7e4      	b.n	15402 <_putc_r+0x1e>
   15438:	0022      	movs	r2, r4
   1543a:	0029      	movs	r1, r5
   1543c:	0030      	movs	r0, r6
   1543e:	f7ff f8c9 	bl	145d4 <__swbuf_r>
   15442:	e7ee      	b.n	15422 <_putc_r+0x3e>
   15444:	00017208 	.word	0x00017208
   15448:	00017228 	.word	0x00017228
   1544c:	000171e8 	.word	0x000171e8

00015450 <__sread>:
   15450:	b570      	push	{r4, r5, r6, lr}
   15452:	000c      	movs	r4, r1
   15454:	250e      	movs	r5, #14
   15456:	5f49      	ldrsh	r1, [r1, r5]
   15458:	f000 f8e2 	bl	15620 <_read_r>
   1545c:	2800      	cmp	r0, #0
   1545e:	db03      	blt.n	15468 <__sread+0x18>
   15460:	6d63      	ldr	r3, [r4, #84]	; 0x54
   15462:	181b      	adds	r3, r3, r0
   15464:	6563      	str	r3, [r4, #84]	; 0x54
   15466:	bd70      	pop	{r4, r5, r6, pc}
   15468:	89a3      	ldrh	r3, [r4, #12]
   1546a:	4a02      	ldr	r2, [pc, #8]	; (15474 <__sread+0x24>)
   1546c:	4013      	ands	r3, r2
   1546e:	81a3      	strh	r3, [r4, #12]
   15470:	e7f9      	b.n	15466 <__sread+0x16>
   15472:	46c0      	nop			; (mov r8, r8)
   15474:	ffffefff 	.word	0xffffefff

00015478 <__swrite>:
   15478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1547a:	001f      	movs	r7, r3
   1547c:	898b      	ldrh	r3, [r1, #12]
   1547e:	0005      	movs	r5, r0
   15480:	000c      	movs	r4, r1
   15482:	0016      	movs	r6, r2
   15484:	05db      	lsls	r3, r3, #23
   15486:	d505      	bpl.n	15494 <__swrite+0x1c>
   15488:	230e      	movs	r3, #14
   1548a:	5ec9      	ldrsh	r1, [r1, r3]
   1548c:	2200      	movs	r2, #0
   1548e:	2302      	movs	r3, #2
   15490:	f000 f880 	bl	15594 <_lseek_r>
   15494:	89a3      	ldrh	r3, [r4, #12]
   15496:	4a05      	ldr	r2, [pc, #20]	; (154ac <__swrite+0x34>)
   15498:	0028      	movs	r0, r5
   1549a:	4013      	ands	r3, r2
   1549c:	81a3      	strh	r3, [r4, #12]
   1549e:	0032      	movs	r2, r6
   154a0:	230e      	movs	r3, #14
   154a2:	5ee1      	ldrsh	r1, [r4, r3]
   154a4:	003b      	movs	r3, r7
   154a6:	f000 f82b 	bl	15500 <_write_r>
   154aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   154ac:	ffffefff 	.word	0xffffefff

000154b0 <__sseek>:
   154b0:	b570      	push	{r4, r5, r6, lr}
   154b2:	000c      	movs	r4, r1
   154b4:	250e      	movs	r5, #14
   154b6:	5f49      	ldrsh	r1, [r1, r5]
   154b8:	f000 f86c 	bl	15594 <_lseek_r>
   154bc:	89a3      	ldrh	r3, [r4, #12]
   154be:	1c42      	adds	r2, r0, #1
   154c0:	d103      	bne.n	154ca <__sseek+0x1a>
   154c2:	4a05      	ldr	r2, [pc, #20]	; (154d8 <__sseek+0x28>)
   154c4:	4013      	ands	r3, r2
   154c6:	81a3      	strh	r3, [r4, #12]
   154c8:	bd70      	pop	{r4, r5, r6, pc}
   154ca:	2280      	movs	r2, #128	; 0x80
   154cc:	0152      	lsls	r2, r2, #5
   154ce:	4313      	orrs	r3, r2
   154d0:	81a3      	strh	r3, [r4, #12]
   154d2:	6560      	str	r0, [r4, #84]	; 0x54
   154d4:	e7f8      	b.n	154c8 <__sseek+0x18>
   154d6:	46c0      	nop			; (mov r8, r8)
   154d8:	ffffefff 	.word	0xffffefff

000154dc <__sclose>:
   154dc:	b510      	push	{r4, lr}
   154de:	230e      	movs	r3, #14
   154e0:	5ec9      	ldrsh	r1, [r1, r3]
   154e2:	f000 f821 	bl	15528 <_close_r>
   154e6:	bd10      	pop	{r4, pc}

000154e8 <__ascii_wctomb>:
   154e8:	1e0b      	subs	r3, r1, #0
   154ea:	d004      	beq.n	154f6 <__ascii_wctomb+0xe>
   154ec:	2aff      	cmp	r2, #255	; 0xff
   154ee:	d904      	bls.n	154fa <__ascii_wctomb+0x12>
   154f0:	238a      	movs	r3, #138	; 0x8a
   154f2:	6003      	str	r3, [r0, #0]
   154f4:	3b8b      	subs	r3, #139	; 0x8b
   154f6:	0018      	movs	r0, r3
   154f8:	4770      	bx	lr
   154fa:	700a      	strb	r2, [r1, #0]
   154fc:	2301      	movs	r3, #1
   154fe:	e7fa      	b.n	154f6 <__ascii_wctomb+0xe>

00015500 <_write_r>:
   15500:	b570      	push	{r4, r5, r6, lr}
   15502:	0005      	movs	r5, r0
   15504:	0008      	movs	r0, r1
   15506:	0011      	movs	r1, r2
   15508:	2200      	movs	r2, #0
   1550a:	4c06      	ldr	r4, [pc, #24]	; (15524 <_write_r+0x24>)
   1550c:	6022      	str	r2, [r4, #0]
   1550e:	001a      	movs	r2, r3
   15510:	f7fa fedc 	bl	102cc <_write>
   15514:	1c43      	adds	r3, r0, #1
   15516:	d103      	bne.n	15520 <_write_r+0x20>
   15518:	6823      	ldr	r3, [r4, #0]
   1551a:	2b00      	cmp	r3, #0
   1551c:	d000      	beq.n	15520 <_write_r+0x20>
   1551e:	602b      	str	r3, [r5, #0]
   15520:	bd70      	pop	{r4, r5, r6, pc}
   15522:	46c0      	nop			; (mov r8, r8)
   15524:	20001008 	.word	0x20001008

00015528 <_close_r>:
   15528:	2300      	movs	r3, #0
   1552a:	b570      	push	{r4, r5, r6, lr}
   1552c:	4c06      	ldr	r4, [pc, #24]	; (15548 <_close_r+0x20>)
   1552e:	0005      	movs	r5, r0
   15530:	0008      	movs	r0, r1
   15532:	6023      	str	r3, [r4, #0]
   15534:	f7f8 fb4c 	bl	dbd0 <_close>
   15538:	1c43      	adds	r3, r0, #1
   1553a:	d103      	bne.n	15544 <_close_r+0x1c>
   1553c:	6823      	ldr	r3, [r4, #0]
   1553e:	2b00      	cmp	r3, #0
   15540:	d000      	beq.n	15544 <_close_r+0x1c>
   15542:	602b      	str	r3, [r5, #0]
   15544:	bd70      	pop	{r4, r5, r6, pc}
   15546:	46c0      	nop			; (mov r8, r8)
   15548:	20001008 	.word	0x20001008

0001554c <_fstat_r>:
   1554c:	2300      	movs	r3, #0
   1554e:	b570      	push	{r4, r5, r6, lr}
   15550:	4c06      	ldr	r4, [pc, #24]	; (1556c <_fstat_r+0x20>)
   15552:	0005      	movs	r5, r0
   15554:	0008      	movs	r0, r1
   15556:	0011      	movs	r1, r2
   15558:	6023      	str	r3, [r4, #0]
   1555a:	f7f8 fb3c 	bl	dbd6 <_fstat>
   1555e:	1c43      	adds	r3, r0, #1
   15560:	d103      	bne.n	1556a <_fstat_r+0x1e>
   15562:	6823      	ldr	r3, [r4, #0]
   15564:	2b00      	cmp	r3, #0
   15566:	d000      	beq.n	1556a <_fstat_r+0x1e>
   15568:	602b      	str	r3, [r5, #0]
   1556a:	bd70      	pop	{r4, r5, r6, pc}
   1556c:	20001008 	.word	0x20001008

00015570 <_isatty_r>:
   15570:	2300      	movs	r3, #0
   15572:	b570      	push	{r4, r5, r6, lr}
   15574:	4c06      	ldr	r4, [pc, #24]	; (15590 <_isatty_r+0x20>)
   15576:	0005      	movs	r5, r0
   15578:	0008      	movs	r0, r1
   1557a:	6023      	str	r3, [r4, #0]
   1557c:	f7f8 fb30 	bl	dbe0 <_isatty>
   15580:	1c43      	adds	r3, r0, #1
   15582:	d103      	bne.n	1558c <_isatty_r+0x1c>
   15584:	6823      	ldr	r3, [r4, #0]
   15586:	2b00      	cmp	r3, #0
   15588:	d000      	beq.n	1558c <_isatty_r+0x1c>
   1558a:	602b      	str	r3, [r5, #0]
   1558c:	bd70      	pop	{r4, r5, r6, pc}
   1558e:	46c0      	nop			; (mov r8, r8)
   15590:	20001008 	.word	0x20001008

00015594 <_lseek_r>:
   15594:	b570      	push	{r4, r5, r6, lr}
   15596:	0005      	movs	r5, r0
   15598:	0008      	movs	r0, r1
   1559a:	0011      	movs	r1, r2
   1559c:	2200      	movs	r2, #0
   1559e:	4c06      	ldr	r4, [pc, #24]	; (155b8 <_lseek_r+0x24>)
   155a0:	6022      	str	r2, [r4, #0]
   155a2:	001a      	movs	r2, r3
   155a4:	f7f8 fb1e 	bl	dbe4 <_lseek>
   155a8:	1c43      	adds	r3, r0, #1
   155aa:	d103      	bne.n	155b4 <_lseek_r+0x20>
   155ac:	6823      	ldr	r3, [r4, #0]
   155ae:	2b00      	cmp	r3, #0
   155b0:	d000      	beq.n	155b4 <_lseek_r+0x20>
   155b2:	602b      	str	r3, [r5, #0]
   155b4:	bd70      	pop	{r4, r5, r6, pc}
   155b6:	46c0      	nop			; (mov r8, r8)
   155b8:	20001008 	.word	0x20001008

000155bc <memchr>:
   155bc:	b2c9      	uxtb	r1, r1
   155be:	1882      	adds	r2, r0, r2
   155c0:	4290      	cmp	r0, r2
   155c2:	d101      	bne.n	155c8 <memchr+0xc>
   155c4:	2000      	movs	r0, #0
   155c6:	4770      	bx	lr
   155c8:	7803      	ldrb	r3, [r0, #0]
   155ca:	428b      	cmp	r3, r1
   155cc:	d0fb      	beq.n	155c6 <memchr+0xa>
   155ce:	3001      	adds	r0, #1
   155d0:	e7f6      	b.n	155c0 <memchr+0x4>

000155d2 <_realloc_r>:
   155d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   155d4:	0007      	movs	r7, r0
   155d6:	000d      	movs	r5, r1
   155d8:	0016      	movs	r6, r2
   155da:	2900      	cmp	r1, #0
   155dc:	d105      	bne.n	155ea <_realloc_r+0x18>
   155de:	0011      	movs	r1, r2
   155e0:	f7fe fd1e 	bl	14020 <_malloc_r>
   155e4:	0004      	movs	r4, r0
   155e6:	0020      	movs	r0, r4
   155e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   155ea:	2a00      	cmp	r2, #0
   155ec:	d103      	bne.n	155f6 <_realloc_r+0x24>
   155ee:	f7fe fccd 	bl	13f8c <_free_r>
   155f2:	0034      	movs	r4, r6
   155f4:	e7f7      	b.n	155e6 <_realloc_r+0x14>
   155f6:	f000 f827 	bl	15648 <_malloc_usable_size_r>
   155fa:	002c      	movs	r4, r5
   155fc:	4286      	cmp	r6, r0
   155fe:	d9f2      	bls.n	155e6 <_realloc_r+0x14>
   15600:	0031      	movs	r1, r6
   15602:	0038      	movs	r0, r7
   15604:	f7fe fd0c 	bl	14020 <_malloc_r>
   15608:	1e04      	subs	r4, r0, #0
   1560a:	d0ec      	beq.n	155e6 <_realloc_r+0x14>
   1560c:	0029      	movs	r1, r5
   1560e:	0032      	movs	r2, r6
   15610:	f7fe fc98 	bl	13f44 <memcpy>
   15614:	0029      	movs	r1, r5
   15616:	0038      	movs	r0, r7
   15618:	f7fe fcb8 	bl	13f8c <_free_r>
   1561c:	e7e3      	b.n	155e6 <_realloc_r+0x14>
	...

00015620 <_read_r>:
   15620:	b570      	push	{r4, r5, r6, lr}
   15622:	0005      	movs	r5, r0
   15624:	0008      	movs	r0, r1
   15626:	0011      	movs	r1, r2
   15628:	2200      	movs	r2, #0
   1562a:	4c06      	ldr	r4, [pc, #24]	; (15644 <_read_r+0x24>)
   1562c:	6022      	str	r2, [r4, #0]
   1562e:	001a      	movs	r2, r3
   15630:	f7fa fe2a 	bl	10288 <_read>
   15634:	1c43      	adds	r3, r0, #1
   15636:	d103      	bne.n	15640 <_read_r+0x20>
   15638:	6823      	ldr	r3, [r4, #0]
   1563a:	2b00      	cmp	r3, #0
   1563c:	d000      	beq.n	15640 <_read_r+0x20>
   1563e:	602b      	str	r3, [r5, #0]
   15640:	bd70      	pop	{r4, r5, r6, pc}
   15642:	46c0      	nop			; (mov r8, r8)
   15644:	20001008 	.word	0x20001008

00015648 <_malloc_usable_size_r>:
   15648:	1f0b      	subs	r3, r1, #4
   1564a:	681b      	ldr	r3, [r3, #0]
   1564c:	1f18      	subs	r0, r3, #4
   1564e:	2b00      	cmp	r3, #0
   15650:	da01      	bge.n	15656 <_malloc_usable_size_r+0xe>
   15652:	580b      	ldr	r3, [r1, r0]
   15654:	18c0      	adds	r0, r0, r3
   15656:	4770      	bx	lr

00015658 <__FUNCTION__.14922>:
   15658:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   15668:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   15678:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   15688:	746c 6320 646d 0000 8dac 0000 8d7c 0000     lt cmd......|...
   15698:	8d74 0000 8d8c 0000 8d84 0000 8da4 0000     t...............
   156a8:	8d94 0000 8d9c 0000                         ........

000156b0 <__FUNCTION__.13058>:
   156b0:	6968 5f66 6573 646e 0000 0000               hif_send....

000156bc <__FUNCTION__.13068>:
   156bc:	6968 5f66 7369 0072                         hif_isr.

000156c4 <__FUNCTION__.13074>:
   156c4:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

000156d4 <__FUNCTION__.13086>:
   156d4:	6968 5f66 6572 6563 7669 0065               hif_receive.

000156e0 <__FUNCTION__.13102>:
   156e0:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   156f0:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
   15700:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
   15710:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
   15720:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
   15730:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
   15740:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
   15750:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
   15760:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
   15770:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
   15780:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
   15790:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   157a0:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
   157b0:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   157c0:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
   157d0:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   157e0:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   157f0:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   15800:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   15810:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
   15820:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
   15830:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   15840:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   15850:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   15860:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
   15870:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   15880:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   15890:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   158a0:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
   158b0:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   158c0:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   158d0:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   158e0:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   158f0:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
   15900:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   15910:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   15920:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   15930:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   15940:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   15950:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   15960:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   15970:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   15980:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
   15990:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
   159a0:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
   159b0:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
   159c0:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

000159d0 <__FUNCTION__.13037>:
   159d0:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

000159dc <__FUNCTION__.13066>:
   159dc:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

000159ec <__FUNCTION__.13094>:
   159ec:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   159fc:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
   15a0c:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
   15a1c:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
   15a2c:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
   15a3c:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
   15a4c:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
   15a5c:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
   15a6c:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
   15a7c:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
   15a8c:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
   15a9c:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
   15aac:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
   15abc:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
   15acc:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
   15adc:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
   15aec:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
   15afc:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
   15b0c:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
   15b1c:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
   15b2c:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
   15b3c:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
   15b4c:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
   15b5c:	3230 353a 3a30 3033 0000 0000 7041 2072     02:50:30....Apr 
   15b6c:	3432 3220 3130 0037 7244 7669 7265 6220     24 2017.Driver b
   15b7c:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
   15b8c:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
   15b9c:	2065 6556 7372 6f69 006e 0000               e Version...

00015ba8 <__FUNCTION__.12900>:
   15ba8:	6863 7069 775f 6b61 0065 0000               chip_wake...

00015bb4 <__FUNCTION__.12949>:
   15bb4:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
   15bc4:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
   15bd4:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
   15be4:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
   15bf4:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
   15c04:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
   15c14:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

00015c24 <__FUNCTION__.12947>:
   15c24:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00015c30 <__FUNCTION__.12954>:
   15c30:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
   15c40:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
   15c50:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
   15c60:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
   15c70:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
   15c80:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
   15c90:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
   15ca0:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
   15cb0:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
   15cc0:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   15cd0:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
   15ce0:	4920 2044 6c25 0a78 0000 0000 9da8 0000      ID %lx.........
   15cf0:	9da8 0000 9dd8 0000 9d5a 0000 9d7e 0000     ........Z...~...
   15d00:	9d8c 0000 9dbe 0000 9dbe 0000 9e06 0000     ................
   15d10:	9d3e 0000 9e40 0000 9e40 0000 9e40 0000     >...@...@...@...
   15d20:	9e40 0000 9d9a 0000 c9c3 cac4               @...........

00015d2c <__FUNCTION__.12253>:
   15d2c:	7073 5f69 6d63 0064                         spi_cmd.

00015d34 <__FUNCTION__.12260>:
   15d34:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00015d44 <__FUNCTION__.12269>:
   15d44:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00015d50 <__FUNCTION__.12285>:
   15d50:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

00015d60 <__FUNCTION__.12300>:
   15d60:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00015d70 <__FUNCTION__.12312>:
   15d70:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00015d80 <__FUNCTION__.12323>:
   15d80:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00015d90 <__FUNCTION__.12335>:
   15d90:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00015da0 <__FUNCTION__.12348>:
   15da0:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00015dac <__FUNCTION__.12369>:
   15dac:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

00015db8 <crc7_syndrome_table>:
   15db8:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   15dc8:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   15dd8:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   15de8:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   15df8:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   15e08:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   15e18:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   15e28:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   15e38:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   15e48:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   15e58:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   15e68:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   15e78:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   15e88:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   15e98:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   15ea8:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   15eb8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   15ec8:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   15ed8:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
   15ee8:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
   15ef8:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
   15f08:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   15f18:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   15f28:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
   15f38:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   15f48:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   15f58:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
   15f68:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   15f78:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   15f88:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   15f98:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
   15fa8:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
   15fb8:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   15fc8:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   15fd8:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
   15fe8:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
   15ff8:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   16008:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
   16018:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   16028:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
   16038:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   16048:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
   16058:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
   16068:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
   16078:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
   16088:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
   16098:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
   160a8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   160b8:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   160c8:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
   160d8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   160e8:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   160f8:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   16108:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   16118:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   16128:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   16138:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
   16148:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
   16158:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
   16168:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   16178:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
   16188:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
   16198:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   161a8:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
   161b8:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   161c8:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   161d8:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
   161e8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   161f8:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
   16208:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
   16218:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   16228:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   16238:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   16248:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
   16258:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   16268:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   16278:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   16288:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   16298:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   162a8:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
   162b8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   162c8:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
   162d8:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
   162e8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   162f8:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
   16308:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
   16318:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   16328:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
   16338:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
   16348:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   16358:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
   16368:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   16378:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   16388:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   16398:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
   163a8:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   163b8:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
   163c8:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
   163d8:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
   163e8:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   163f8:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
   16408:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
   16418:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
   16428:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   16438:	206e 4449 3d20 2520 0d64 000a b5d2 0000     n ID = %d.......
   16448:	b818 0000 b818 0000 b818 0000 b818 0000     ................
   16458:	b818 0000 b818 0000 b818 0000 b818 0000     ................
   16468:	b818 0000 b818 0000 b818 0000 b818 0000     ................
   16478:	b818 0000 b818 0000 b818 0000 b5ba 0000     ................
   16488:	b818 0000 b818 0000 b818 0000 b818 0000     ................
   16498:	b818 0000 b818 0000 b818 0000 b818 0000     ................
   164a8:	b818 0000 b818 0000 b818 0000 b818 0000     ................
   164b8:	b818 0000 b818 0000 b818 0000 b5ca 0000     ................
   164c8:	b818 0000 b818 0000 b818 0000 b818 0000     ................
   164d8:	b818 0000 b818 0000 b818 0000 b818 0000     ................
   164e8:	b818 0000 b818 0000 b818 0000 b818 0000     ................
   164f8:	b818 0000 b818 0000 b818 0000 b5c2 0000     ................
   16508:	b5da 0000 b5a2 0000 b5b2 0000 b5aa 0000     ................
   16518:	0002 0000 0003 0000 0028 0000 0029 0000     ........(...)...
   16528:	0004 0000 0005 0000 0006 0000 0007 0000     ................
   16538:	ffff 0000 ffff 0000 0022 0000 0023 0000     ........"...#...
   16548:	ffff 0000 ffff 0000 ffff 0000 ffff 0000     ................
   16558:	0008 0000 0009 0000 000a 0000 000b 0000     ................

00016568 <_tcc_apbcmasks>:
   16568:	0100 0000 0200 0000 0400 0000               ............

00016574 <_tcc_cc_nums>:
   16574:	0204 0002                                   ....

00016578 <_tcc_gclk_ids>:
   16578:	1a1a 001b                                   ....

0001657c <_tcc_maxs>:
   1657c:	ffff 00ff ffff 00ff ffff 0000               ............

00016588 <_tcc_ow_nums>:
   16588:	0408 0002                                   ....

0001658c <_tcc_intflag>:
   1658c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   1659c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   165ac:	0000 0001 0000 0002 0000 0004 0000 0008     ................

000165bc <tcc_interrupt_vectors.12434>:
   165bc:	100f 0011 d6e2 0000 d6dc 0000 d6d6 0000     ................
   165cc:	d6d0 0000 d6e8 0000 d6f0 0000 d6e8 0000     ................
   165dc:	d6ca 0000 d6c4 0000 d6e8 0000 d6be 0000     ................
   165ec:	d6be 0000 d6b8 0000 d6b2 0000 d6f0 0000     ................
   165fc:	d75a 0000 d754 0000 d74e 0000 d748 0000     Z...T...N...H...
   1660c:	d760 0000 d768 0000 d760 0000 d742 0000     `...h...`...B...
   1661c:	d73c 0000 d760 0000 d736 0000 d736 0000     <...`...6...6...
   1662c:	d730 0000 d72a 0000 d768 0000 d7d4 0000     0...*...h.......
   1663c:	d7ce 0000 d7c8 0000 d7c2 0000 d7da 0000     ................
   1664c:	d7da 0000 d7da 0000 d7bc 0000 d7b6 0000     ................
   1665c:	d7da 0000 d7b0 0000 d7b0 0000 d7aa 0000     ................
   1666c:	d7a4 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   1667c:	6463 6665 0d31 0000 7254 6e61 6673 7265     cdef1...Transfer
   1668c:	452d 636e 646f 6e69 3a67 0020 6f43 6e6e     -Encoding: .Conn
   1669c:	6365 6974 6e6f 203a 0000 0000 5448 5054     ection: ....HTTP
   166ac:	002f 0000 4547 2054 0000 0000 4f50 5453     /...GET ....POST
   166bc:	0020 0000 4544 454c 4554 0020 5550 2054      ...DELETE .PUT 
   166cc:	0000 0000 504f 4954 4e4f 2053 0000 0000     ....OPTIONS ....
   166dc:	4548 4441 0020 0000 4820 5454 2f50 2e31     HEAD ... HTTP/1.
   166ec:	0d31 000a 7355 7265 412d 6567 746e 203a     1...User-Agent: 
   166fc:	0000 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   1670c:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   1671c:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   1672c:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   1673c:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   1674c:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   1675c:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   1676c:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   1677c:	654c 676e 6874 203a 0000 0000 7461 656d     Length: ....atme
   1678c:	2f6c 2e31 2e30 0032 7468 7074 2f3a 002f     l/1.0.2.http://.
   1679c:	7468 7074 3a73 2f2f 0000 0000 2000 4200     https://..... .B
   167ac:	2400 4200 2800 4200 dc9e 0000 dc76 0000     .$.B.(.B....v...
   167bc:	dc7a 0000 dc7e 0000 dc82 0000 dc86 0000     z...~...........
   167cc:	dc8a 0000 dc8e 0000 dc92 0000 dc96 0000     ................
   167dc:	0100 0000 dd46 0000 dd1e 0000 dd24 0000     ....F.......$...
   167ec:	dd2a 0000 dd2a 0000 dd30 0000 dd30 0000     *...*...0...0...
   167fc:	dd30 0000 dd36 0000 dd3c 0000 e172 0000     0...6...<...r...
   1680c:	e14e 0000 e154 0000 e15a 0000 e15a 0000     N...T...Z...Z...
   1681c:	e160 0000 e160 0000 e160 0000 e166 0000     `...`...`...f...
   1682c:	e16c 0000 e6d0 0000 e6d0 0000 e6ac 0000     l...............
   1683c:	e6d0 0000 e6ac 0000 e692 0000 e692 0000     ................
   1684c:	e6d0 0000 e6d0 0000 e6d0 0000 e6d0 0000     ................
   1685c:	e6d0 0000 e6d0 0000 e6d0 0000 e6d0 0000     ................
   1686c:	e6d0 0000 e6d0 0000 e6d0 0000 e6d0 0000     ................
   1687c:	e6d0 0000 e6d0 0000 e6d0 0000 e6d0 0000     ................
   1688c:	e6d0 0000 e6d0 0000 e6d0 0000 e6d0 0000     ................
   1689c:	e6d0 0000 e6d0 0000 e6d0 0000 e6d0 0000     ................
   168ac:	e6d0 0000 e6d0 0000 e6d0 0000 e6d0 0000     ................
   168bc:	e6d0 0000 e6d0 0000 e6d0 0000 e6d0 0000     ................
   168cc:	e6d0 0000 e6d0 0000 e6d0 0000 e6d0 0000     ................
   168dc:	e6d0 0000 e6d0 0000 e6d0 0000 e6d0 0000     ................
   168ec:	e6d0 0000 e6d0 0000 e6d0 0000 e6d0 0000     ................
   168fc:	e6d0 0000 e6d0 0000 e6d0 0000 e6d0 0000     ................
   1690c:	e6d0 0000 e6d0 0000 e6d0 0000 e6d0 0000     ................
   1691c:	e6d0 0000 e6d0 0000 e6d0 0000 e6d0 0000     ................
   1692c:	e6d0 0000 e6ac 0000 e6ac 0000 e6b4 0000     ................
   1693c:	e6b4 0000 e6b4 0000 e6b4 0000 0800 4200     ...............B
   1694c:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
   1695c:	1c00 4200 fafe 0000 fafa 0000 fafa 0000     ...B............
   1696c:	fb5c 0000 fb5c 0000 fb12 0000 fb04 0000     \...\...........
   1697c:	fb18 0000 fb4a 0000 fd1c 0000 fcfc 0000     ....J...........
   1698c:	fcfc 0000 fd88 0000 fd0e 0000 fd2a 0000     ............*...
   1699c:	fd00 0000 fd38 0000 fd78 0000 08e6 0001     ....8...x.......
   169ac:	08f4 0001 0906 0001 0966 0001 0ac0 0001     ........f.......
   169bc:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   169cc:	6162 6b63 203a 5448 5054 6320 696c 6e65     back: HTTP clien
   169dc:	2074 6f73 6b63 7465 6320 6e6f 656e 7463     t socket connect
   169ec:	6465 0d2e 0000 0000 7468 7074 635f 696c     ed......http_cli
   169fc:	6e65 5f74 6163 6c6c 6162 6b63 203a 6572     ent_callback: re
   16a0c:	7571 7365 2074 6f63 706d 656c 6574 2e64     quest completed.
   16a1c:	000d 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   16a2c:	6163 6c6c 6162 6b63 203a 6572 6563 7669     callback: receiv
   16a3c:	6465 7220 7365 6f70 736e 2065 7525 6420     ed response %u d
   16a4c:	7461 2061 6973 657a 2520 0d75 000a 0000     ata size %u.....
   16a5c:	6143 6c6c 6162 6b63 203a 5243 2043 6f64     Callback: CRC do
   16a6c:	6e77 6f6c 6461 2e2e 2e2e 2e2e 000d 0000     wnload..........
   16a7c:	6552 6563 7669 6465 2520 0d78 000a 0000     Received %x.....
   16a8c:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   16a9c:	6162 6b63 435f 5548 4b4e 4445 4420 5441     back_CHUNKED DAT
   16aac:	3a41 7220 6365 6965 6576 2064 6572 7073     A: received resp
   16abc:	6e6f 6573 6420 7461 2061 6973 657a 2520     onse data size %
   16acc:	0d75 000a 6946 7372 2074 6c62 636f 206b     u...First block 
   16adc:	656c 676e 6874 2520 2064 5243 3a43 2520     length %d CRC: %
   16aec:	0d75 000a 6c42 636f 206b 656c 676e 6874     u...Block length
   16afc:	2520 2064 5243 3a43 2520 0d75 000a 0000      %d CRC: %u.....
   16b0c:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   16b1c:	6162 6b63 203a 6964 6373 6e6f 656e 7463     back: disconnect
   16b2c:	6f69 206e 6572 7361 6e6f 253a 0d64 000a     ion reason:%d...
   16b3c:	514d 5454 6920 696e 6974 6c61 7a69 7461     MQTT initializat
   16b4c:	6f69 206e 6166 6c69 6465 202e 7245 6f72     ion failed. Erro
   16b5c:	2072 6f63 6564 6920 2073 2528 2964 0a0d     r code is (%d)..
   16b6c:	0000 0000 514d 5454 7220 6765 7369 6574     ....MQTT registe
   16b7c:	2072 6163 6c6c 6162 6b63 6620 6961 656c     r callback faile
   16b8c:	2e64 4520 7272 726f 6320 646f 2065 7369     d. Error code is
   16b9c:	2820 6425 0d29 000a 7355 7265 3a20 2520      (%d)...User : %
   16bac:	0d73 000a 6150 7373 6f77 6472 3a20 2520     s...Password : %
   16bbc:	0d73 000a 616d 6e69 203a 326d 5f6d 6977     s...main: m2m_wi
   16bcc:	6966 695f 696e 2074 6163 6c6c 6520 7272     fi_init call err
   16bdc:	726f 2821 6425 0d29 000a 0000 6425 0000     or!(%d).....%d..
   16bec:	6573 736e 726f 0000 2e31 2e30 0030 0000     sensor..1.0.0...
   16bfc:	6576 7372 6f69 726e 6165 6f64 7475 0000     versionreadout..
   16c0c:	6574 706d 7265 7461 7275 0065 7568 696d     temperature.humi
   16c1c:	6964 7974 0000 0000 616d 6e69 203a 326d     dity....main: m2
   16c2c:	5f6d 6977 6966 645f 6965 696e 2074 6163     m_wifi_deinit ca
   16c3c:	6c6c 6520 7272 726f 2821 6425 0d29 000a     ll error!(%d)...
   16c4c:	6f63 666e 6769 7275 5f65 7468 7074 635f     configure_http_c
   16c5c:	696c 6e65 3a74 4820 5454 2050 6c63 6569     lient: HTTP clie
   16c6c:	746e 6920 696e 6974 6c61 7a69 7461 6f69     nt initializatio
   16c7c:	206e 6166 6c69 6465 2021 7228 7365 2520     n failed! (res %
   16c8c:	2964 0a0d 0000 0000 616d 6e69 203a 326d     d)......main: m2
   16c9c:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
   16cac:	6520 7272 726f 2021 7228 7365 2520 2964      error! (res %d)
   16cbc:	0a0d 0000 7553 7672 7669 6465 6820 7474     ....Survived htt
   16ccc:	2070 6c63 6569 746e 7320 7465 7075 000d     p client setup..
   16cdc:	7845 6365 7475 6e69 2067 6d69 6761 3a65     Executing image:
   16cec:	2520 2c64 4420 204c 6f74 203a 6425 0a0d      %d, DL to: %d..
   16cfc:	0000 0000 6f64 6e77 6f6c 6461 665f 7269     ....download_fir
   16d0c:	776d 7261 3a65 6320 6e6f 656e 7463 6e69     mware: connectin
   16d1c:	2067 6f74 5720 4669 2069 5041 2520 2e73     g to WiFi AP %s.
   16d2c:	2e2e 0a0d 0000 0000 6f64 6e77 6f6c 6461     ........download
   16d3c:	665f 7269 776d 7261 3a65 6420 6e6f 2e65     _firmware: done.
   16d4c:	000d 0000 6143 636c 6c75 7461 6465 4320     ....Calculated C
   16d5c:	4352 203a 7825 0a0d 0000 0000 0d0a 614d     RC: %x........Ma
   16d6c:	6e69 203a 6f44 656e 6420 776f 6c6e 616f     in: Done downloa
   16d7c:	6964 676e 6620 7269 776d 7261 2065 6e61     ding firmware an
   16d8c:	2064 5243 0a43 000d 0d0a 614d 6e69 203a     d CRC.....Main: 
   16d9c:	5243 2043 414d 4354 4548 2144 7320 6174     CRC MATCHED! sta
   16dac:	7472 6e69 2067 6966 6d72 6177 6572 7520     rting firmware u
   16dbc:	6770 6172 6564 202e 0d0a 0000 0d0a 4d20     pgrade. ...... M
   16dcc:	6961 3a6e 4320 4352 4320 6568 6b63 4620     ain: CRC Check F
   16ddc:	6961 216c 0d0a 0000 6f73 6c69 6f6d 7369     ail!....soilmois
   16dec:	7574 6572 0000 0000                         ture....

00016df4 <main_mqtt_broker>:
   16df4:	316d 2e31 6c63 756f 6d64 7471 2e74 6f63     m11.cloudmqtt.co
   16e04:	006d 0000 6f43 6e6e 6365 2074 6166 6c69     m...Connect fail
   16e14:	7420 206f 6573 7672 7265 2528 2973 2021      to server(%s)! 
   16e24:	6572 7274 2079 7469 6120 7475 6d6f 7461     retry it automat
   16e34:	6369 6c61 796c 0d2e 000a 0000 6361 7574     ically......actu
   16e44:	7461 726f 0000 0000 7075 7267 6461 0065     ator....upgrade.
   16e54:	6576 7372 6f69 006e 6573 736e 726f 7075     version.sensorup
   16e64:	6164 6574 0000 0000 6946 696e 6873 6465     date....Finished
   16e74:	7320 6275 6373 6972 6962 676e 7420 206f      subscribing to 
   16e84:	514d 5454 7420 706f 6369 2173 000d 0000     MQTT topics!....
   16e94:	514d 5454 6220 6f72 656b 2072 6564 6c63     MQTT broker decl
   16ea4:	6e69 2065 6f79 7275 6120 6363 7365 2173     ine your access!
   16eb4:	6520 7272 726f 6320 646f 2065 6425 0a0d      error code %d..
   16ec4:	0000 0000 7274 6575 0000 0000 7075 7267     ....true....upgr
   16ed4:	6461 2065 6966 6d72 6177 6572 0000 0000     ade firmware....
   16ee4:	6572 6c70 0079 0000 6573 646e 0000 0000     reply...send....
   16ef4:	514d 5454 6420 7369 6f63 6e6e 6365 6574     MQTT disconnecte
   16f04:	0d64 0000 6572 6f73 766c 5f65 6263 203a     d...resolve_cb: 
   16f14:	7325 4920 2050 6461 7264 7365 2073 7369     %s IP address is
   16f24:	2520 2e64 6425 252e 2e64 6425 0a0d 0a0d      %d.%d.%d.%d....
   16f34:	0000 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   16f44:	6461 203a 6957 462d 2069 7369 6e20 746f     ad: Wi-Fi is not
   16f54:	6320 6e6f 656e 7463 6465 0d2e 0000 0000      connected......
   16f64:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   16f74:	6572 7571 7365 2074 7369 7320 6e65 2074     request is sent 
   16f84:	6c61 6572 6461 2e79 000d 0000 7473 7261     already.....star
   16f94:	5f74 6f64 6e77 6f6c 6461 203a 7572 6e6e     t_download: runn
   16fa4:	6e69 2067 6f64 6e77 6f6c 6461 6120 726c     ing download alr
   16fb4:	6165 7964 0d2e 0000 7473 7261 5f74 6f64     eady....start_do
   16fc4:	6e77 6f6c 6461 203a 6573 646e 6e69 2067     wnload: sending 
   16fd4:	5448 5054 7220 7165 6575 7473 2e2e 0d2e     HTTP request....
   16fe4:	0000 0000 7468 7074 3a73 2f2f 7777 2e77     ....https://www.
   16ff4:	6573 7361 752e 6570 6e6e 652e 7564 7e2f     seas.upenn.edu/~
   17004:	696e 6863 6e69 2f73 7562 7474 6e6f 6c5f     nichins/button_l
   17014:	6465 2e32 6962 006e 7473 7261 5f74 6f64     ed2.bin.start_do
   17024:	6e77 6f6c 6461 4320 4352 203a 6573 646e     wnload CRC: send
   17034:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   17044:	2e2e 0d2e 0000 0000 7468 7074 3a73 2f2f     ........https://
   17054:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   17064:	7564 7e2f 696e 6863 6e69 2f73 7562 7474     du/~nichins/butt
   17074:	6e6f 6c5f 6465 5f32 7263 2e63 6962 006e     on_led2_crc.bin.
   17084:	6957 462d 2069 6f63 6e6e 6365 6574 0d64     Wi-Fi connected.
   17094:	0000 0000 6957 462d 2069 6964 6373 6e6f     ....Wi-Fi discon
   170a4:	656e 7463 6465 000d 6557 636c 6d6f 4865     nected..WelcomeH
   170b4:	6c61 0000 7068 732d 7465 7075 312d 0000     al..hp-setup-1..
   170c4:	6957 462d 2069 5049 6920 2073 7525 252e     Wi-Fi IP is %u.%
   170d4:	2e75 7525 252e 0d75 000a 0000 6977 6966     u.%u.%u.....wifi
   170e4:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   170f4:	4e4e 4345 4554 0d44 0000 0000 6977 6966     NNECTED.....wifi
   17104:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   17114:	4353 4e4f 454e 5443 4445 000d 6977 6966     SCONNECTED..wifi
   17124:	635f 3a62 4920 2050 6461 7264 7365 2073     _cb: IP address 
   17134:	7369 2520 2e75 7525 252e 2e75 7525 0a0d     is %u.%u.%u.%u..
   17144:	0000 0000 6843 7069 6420 6469 746e 7720     ....Chip didnt w
   17154:	6b61 2065 000d 0000 514d 7349 7064 0000     ake ....MQIsdp..
   17164:	2e18 0001 2dfa 0001 2db4 0001 2cd2 0001     .....-...-...,..
   17174:	2db4 0001 2dec 0001 2db4 0001 2cd2 0001     .-...-...-...,..
   17184:	2dfa 0001 2dfa 0001 2dec 0001 2cd2 0001     .-...-...-...,..
   17194:	2cca 0001 2cca 0001 2cca 0001 3030 0001     .,...,...,..00..
   171a4:	3478 0001 3338 0001 3338 0001 3334 0001     x4..83..83..43..
   171b4:	3450 0001 3450 0001 3442 0001 3334 0001     P4..P4..B4..43..
   171c4:	3450 0001 3442 0001 3450 0001 3334 0001     P4..B4..P4..43..
   171d4:	3458 0001 3458 0001 3458 0001 365c 0001     X4..X4..X4..\6..

000171e4 <_global_impure_ptr>:
   171e4:	0024 2000                                   $.. 

000171e8 <__sf_fake_stderr>:
	...

00017208 <__sf_fake_stdin>:
	...

00017228 <__sf_fake_stdout>:
	...
   17248:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   17258:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   17268:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   17278:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

00017285 <_ctype_>:
   17285:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   17295:	2020 2020 2020 2020 2020 2020 2020 2020                     
   172a5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   172b5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   172c5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   172d5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   172e5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   172f5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   17305:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00017388 <_init>:
   17388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1738a:	46c0      	nop			; (mov r8, r8)
   1738c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1738e:	bc08      	pop	{r3}
   17390:	469e      	mov	lr, r3
   17392:	4770      	bx	lr

00017394 <__init_array_start>:
   17394:	000080dd 	.word	0x000080dd

00017398 <_fini>:
   17398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1739a:	46c0      	nop			; (mov r8, r8)
   1739c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1739e:	bc08      	pop	{r3}
   173a0:	469e      	mov	lr, r3
   173a2:	4770      	bx	lr

000173a4 <__fini_array_start>:
   173a4:	000080b5 	.word	0x000080b5
