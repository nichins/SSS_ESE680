
Waterbug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004350  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00004350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c8  20000070  000043c0  00020070  2**2
                  ALLOC
  3 .stack        00002000  20000138  00004488  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001ae53  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023e9  00000000  00000000  0003af44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001f37  00000000  00000000  0003d32d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000650  00000000  00000000  0003f264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000530  00000000  00000000  0003f8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000643a  00000000  00000000  0003fde4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bd1a  00000000  00000000  0004621e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008734b  00000000  00000000  00051f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001b74  00000000  00000000  000d9284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002138 	.word	0x20002138
       4:	00002555 	.word	0x00002555
       8:	0000264d 	.word	0x0000264d
       c:	0000264d 	.word	0x0000264d
	...
      2c:	0000264d 	.word	0x0000264d
	...
      38:	0000264d 	.word	0x0000264d
      3c:	0000264d 	.word	0x0000264d
      40:	0000264d 	.word	0x0000264d
      44:	0000264d 	.word	0x0000264d
      48:	0000264d 	.word	0x0000264d
      4c:	0000264d 	.word	0x0000264d
      50:	0000264d 	.word	0x0000264d
      54:	0000264d 	.word	0x0000264d
      58:	0000264d 	.word	0x0000264d
      5c:	0000264d 	.word	0x0000264d
      60:	0000264d 	.word	0x0000264d
      64:	0000144d 	.word	0x0000144d
      68:	00001465 	.word	0x00001465
      6c:	0000147d 	.word	0x0000147d
      70:	00001495 	.word	0x00001495
      74:	000014ad 	.word	0x000014ad
      78:	000014c5 	.word	0x000014c5
      7c:	0000264d 	.word	0x0000264d
      80:	0000264d 	.word	0x0000264d
      84:	0000264d 	.word	0x0000264d
      88:	0000264d 	.word	0x0000264d
      8c:	0000264d 	.word	0x0000264d
      90:	0000264d 	.word	0x0000264d
	...
      9c:	0000264d 	.word	0x0000264d
      a0:	0000264d 	.word	0x0000264d
      a4:	0000264d 	.word	0x0000264d
      a8:	0000264d 	.word	0x0000264d
      ac:	0000264d 	.word	0x0000264d
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00004350 	.word	0x00004350

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00004350 	.word	0x00004350
     10c:	00004350 	.word	0x00004350
     110:	00000000 	.word	0x00000000

00000114 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     114:	b580      	push	{r7, lr}
     116:	b086      	sub	sp, #24
     118:	af00      	add	r7, sp, #0
     11a:	60f8      	str	r0, [r7, #12]
     11c:	60b9      	str	r1, [r7, #8]
     11e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
     120:	2300      	movs	r3, #0
     122:	617b      	str	r3, [r7, #20]

	if (file != 0) {
     124:	68fb      	ldr	r3, [r7, #12]
     126:	2b00      	cmp	r3, #0
     128:	d012      	beq.n	150 <_read+0x3c>
		return -1;
     12a:	2301      	movs	r3, #1
     12c:	425b      	negs	r3, r3
     12e:	e013      	b.n	158 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     130:	4b0b      	ldr	r3, [pc, #44]	; (160 <_read+0x4c>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	4b0b      	ldr	r3, [pc, #44]	; (164 <_read+0x50>)
     136:	681b      	ldr	r3, [r3, #0]
     138:	68b9      	ldr	r1, [r7, #8]
     13a:	0018      	movs	r0, r3
     13c:	4790      	blx	r2
		ptr++;
     13e:	68bb      	ldr	r3, [r7, #8]
     140:	3301      	adds	r3, #1
     142:	60bb      	str	r3, [r7, #8]
		nChars++;
     144:	697b      	ldr	r3, [r7, #20]
     146:	3301      	adds	r3, #1
     148:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     14a:	687b      	ldr	r3, [r7, #4]
     14c:	3b01      	subs	r3, #1
     14e:	607b      	str	r3, [r7, #4]
     150:	687b      	ldr	r3, [r7, #4]
     152:	2b00      	cmp	r3, #0
     154:	dcec      	bgt.n	130 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
     156:	697b      	ldr	r3, [r7, #20]
}
     158:	0018      	movs	r0, r3
     15a:	46bd      	mov	sp, r7
     15c:	b006      	add	sp, #24
     15e:	bd80      	pop	{r7, pc}
     160:	200000dc 	.word	0x200000dc
     164:	200000e4 	.word	0x200000e4

00000168 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     168:	b580      	push	{r7, lr}
     16a:	b086      	sub	sp, #24
     16c:	af00      	add	r7, sp, #0
     16e:	60f8      	str	r0, [r7, #12]
     170:	60b9      	str	r1, [r7, #8]
     172:	607a      	str	r2, [r7, #4]
	int nChars = 0;
     174:	2300      	movs	r3, #0
     176:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
     178:	68fb      	ldr	r3, [r7, #12]
     17a:	2b01      	cmp	r3, #1
     17c:	d01d      	beq.n	1ba <_write+0x52>
     17e:	68fb      	ldr	r3, [r7, #12]
     180:	2b02      	cmp	r3, #2
     182:	d01a      	beq.n	1ba <_write+0x52>
     184:	68fb      	ldr	r3, [r7, #12]
     186:	2b03      	cmp	r3, #3
     188:	d017      	beq.n	1ba <_write+0x52>
		return -1;
     18a:	2301      	movs	r3, #1
     18c:	425b      	negs	r3, r3
     18e:	e018      	b.n	1c2 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
     190:	4b0e      	ldr	r3, [pc, #56]	; (1cc <_write+0x64>)
     192:	681a      	ldr	r2, [r3, #0]
     194:	4b0e      	ldr	r3, [pc, #56]	; (1d0 <_write+0x68>)
     196:	6818      	ldr	r0, [r3, #0]
     198:	68bb      	ldr	r3, [r7, #8]
     19a:	1c59      	adds	r1, r3, #1
     19c:	60b9      	str	r1, [r7, #8]
     19e:	781b      	ldrb	r3, [r3, #0]
     1a0:	0019      	movs	r1, r3
     1a2:	4790      	blx	r2
     1a4:	1e03      	subs	r3, r0, #0
     1a6:	da02      	bge.n	1ae <_write+0x46>
			return -1;
     1a8:	2301      	movs	r3, #1
     1aa:	425b      	negs	r3, r3
     1ac:	e009      	b.n	1c2 <_write+0x5a>
		}
		++nChars;
     1ae:	697b      	ldr	r3, [r7, #20]
     1b0:	3301      	adds	r3, #1
     1b2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	3b01      	subs	r3, #1
     1b8:	607b      	str	r3, [r7, #4]
     1ba:	687b      	ldr	r3, [r7, #4]
     1bc:	2b00      	cmp	r3, #0
     1be:	d1e7      	bne.n	190 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
     1c0:	697b      	ldr	r3, [r7, #20]
}
     1c2:	0018      	movs	r0, r3
     1c4:	46bd      	mov	sp, r7
     1c6:	b006      	add	sp, #24
     1c8:	bd80      	pop	{r7, pc}
     1ca:	46c0      	nop			; (mov r8, r8)
     1cc:	200000e0 	.word	0x200000e0
     1d0:	200000e4 	.word	0x200000e4

000001d4 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     1d4:	b580      	push	{r7, lr}
     1d6:	b082      	sub	sp, #8
     1d8:	af00      	add	r7, sp, #0
     1da:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     1dc:	687b      	ldr	r3, [r7, #4]
     1de:	2b00      	cmp	r3, #0
     1e0:	d00c      	beq.n	1fc <delay_cycles+0x28>
		SysTick->LOAD = n;
     1e2:	4b08      	ldr	r3, [pc, #32]	; (204 <delay_cycles+0x30>)
     1e4:	687a      	ldr	r2, [r7, #4]
     1e6:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     1e8:	4b06      	ldr	r3, [pc, #24]	; (204 <delay_cycles+0x30>)
     1ea:	2200      	movs	r2, #0
     1ec:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     1ee:	46c0      	nop			; (mov r8, r8)
     1f0:	4b04      	ldr	r3, [pc, #16]	; (204 <delay_cycles+0x30>)
     1f2:	681a      	ldr	r2, [r3, #0]
     1f4:	2380      	movs	r3, #128	; 0x80
     1f6:	025b      	lsls	r3, r3, #9
     1f8:	4013      	ands	r3, r2
     1fa:	d0f9      	beq.n	1f0 <delay_cycles+0x1c>
		};
	}
}
     1fc:	46c0      	nop			; (mov r8, r8)
     1fe:	46bd      	mov	sp, r7
     200:	b002      	add	sp, #8
     202:	bd80      	pop	{r7, pc}
     204:	e000e010 	.word	0xe000e010

00000208 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     208:	b580      	push	{r7, lr}
     20a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     20c:	2000      	movs	r0, #0
     20e:	4b0f      	ldr	r3, [pc, #60]	; (24c <delay_init+0x44>)
     210:	4798      	blx	r3
     212:	0002      	movs	r2, r0
     214:	4b0e      	ldr	r3, [pc, #56]	; (250 <delay_init+0x48>)
     216:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     218:	4b0d      	ldr	r3, [pc, #52]	; (250 <delay_init+0x48>)
     21a:	6818      	ldr	r0, [r3, #0]
     21c:	4b0d      	ldr	r3, [pc, #52]	; (254 <delay_init+0x4c>)
     21e:	22fa      	movs	r2, #250	; 0xfa
     220:	0091      	lsls	r1, r2, #2
     222:	4798      	blx	r3
     224:	0003      	movs	r3, r0
     226:	001a      	movs	r2, r3
     228:	4b09      	ldr	r3, [pc, #36]	; (250 <delay_init+0x48>)
     22a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     22c:	4b08      	ldr	r3, [pc, #32]	; (250 <delay_init+0x48>)
     22e:	6818      	ldr	r0, [r3, #0]
     230:	4b08      	ldr	r3, [pc, #32]	; (254 <delay_init+0x4c>)
     232:	22fa      	movs	r2, #250	; 0xfa
     234:	0091      	lsls	r1, r2, #2
     236:	4798      	blx	r3
     238:	0003      	movs	r3, r0
     23a:	001a      	movs	r2, r3
     23c:	4b06      	ldr	r3, [pc, #24]	; (258 <delay_init+0x50>)
     23e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     240:	4b06      	ldr	r3, [pc, #24]	; (25c <delay_init+0x54>)
     242:	2205      	movs	r2, #5
     244:	601a      	str	r2, [r3, #0]
}
     246:	46c0      	nop			; (mov r8, r8)
     248:	46bd      	mov	sp, r7
     24a:	bd80      	pop	{r7, pc}
     24c:	00002109 	.word	0x00002109
     250:	20000000 	.word	0x20000000
     254:	00002e11 	.word	0x00002e11
     258:	20000004 	.word	0x20000004
     25c:	e000e010 	.word	0xe000e010

00000260 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     260:	b580      	push	{r7, lr}
     262:	b082      	sub	sp, #8
     264:	af00      	add	r7, sp, #0
     266:	6078      	str	r0, [r7, #4]
	while (n--) {
     268:	e004      	b.n	274 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     26a:	4b07      	ldr	r3, [pc, #28]	; (288 <delay_cycles_ms+0x28>)
     26c:	681b      	ldr	r3, [r3, #0]
     26e:	0018      	movs	r0, r3
     270:	4b06      	ldr	r3, [pc, #24]	; (28c <delay_cycles_ms+0x2c>)
     272:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     274:	687b      	ldr	r3, [r7, #4]
     276:	1e5a      	subs	r2, r3, #1
     278:	607a      	str	r2, [r7, #4]
     27a:	2b00      	cmp	r3, #0
     27c:	d1f5      	bne.n	26a <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     27e:	46c0      	nop			; (mov r8, r8)
     280:	46bd      	mov	sp, r7
     282:	b002      	add	sp, #8
     284:	bd80      	pop	{r7, pc}
     286:	46c0      	nop			; (mov r8, r8)
     288:	20000000 	.word	0x20000000
     28c:	000001d5 	.word	0x000001d5

00000290 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     290:	b580      	push	{r7, lr}
     292:	b082      	sub	sp, #8
     294:	af00      	add	r7, sp, #0
     296:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     298:	687b      	ldr	r3, [r7, #4]
     29a:	2200      	movs	r2, #0
     29c:	701a      	strb	r2, [r3, #0]
}
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	46bd      	mov	sp, r7
     2a2:	b002      	add	sp, #8
     2a4:	bd80      	pop	{r7, pc}
     2a6:	46c0      	nop			; (mov r8, r8)

000002a8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2aa:	b08d      	sub	sp, #52	; 0x34
     2ac:	af00      	add	r7, sp, #0
     2ae:	60b8      	str	r0, [r7, #8]
     2b0:	60f9      	str	r1, [r7, #12]
     2b2:	603a      	str	r2, [r7, #0]
     2b4:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     2b6:	2300      	movs	r3, #0
     2b8:	2400      	movs	r4, #0
     2ba:	623b      	str	r3, [r7, #32]
     2bc:	627c      	str	r4, [r7, #36]	; 0x24
     2be:	2300      	movs	r3, #0
     2c0:	2400      	movs	r4, #0
     2c2:	61bb      	str	r3, [r7, #24]
     2c4:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     2c6:	233f      	movs	r3, #63	; 0x3f
     2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
     2ca:	e053      	b.n	374 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     2ce:	3b20      	subs	r3, #32
     2d0:	2b00      	cmp	r3, #0
     2d2:	db04      	blt.n	2de <long_division+0x36>
     2d4:	2201      	movs	r2, #1
     2d6:	409a      	lsls	r2, r3
     2d8:	0013      	movs	r3, r2
     2da:	617b      	str	r3, [r7, #20]
     2dc:	e00b      	b.n	2f6 <long_division+0x4e>
     2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     2e0:	2220      	movs	r2, #32
     2e2:	1ad3      	subs	r3, r2, r3
     2e4:	2201      	movs	r2, #1
     2e6:	40da      	lsrs	r2, r3
     2e8:	0013      	movs	r3, r2
     2ea:	2100      	movs	r1, #0
     2ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     2ee:	4091      	lsls	r1, r2
     2f0:	000a      	movs	r2, r1
     2f2:	4313      	orrs	r3, r2
     2f4:	617b      	str	r3, [r7, #20]
     2f6:	2201      	movs	r2, #1
     2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     2fa:	409a      	lsls	r2, r3
     2fc:	0013      	movs	r3, r2
     2fe:	613b      	str	r3, [r7, #16]

		r = r << 1;
     300:	69bb      	ldr	r3, [r7, #24]
     302:	69fc      	ldr	r4, [r7, #28]
     304:	18db      	adds	r3, r3, r3
     306:	4164      	adcs	r4, r4
     308:	61bb      	str	r3, [r7, #24]
     30a:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     30c:	68bb      	ldr	r3, [r7, #8]
     30e:	693a      	ldr	r2, [r7, #16]
     310:	401a      	ands	r2, r3
     312:	0015      	movs	r5, r2
     314:	68fb      	ldr	r3, [r7, #12]
     316:	697a      	ldr	r2, [r7, #20]
     318:	401a      	ands	r2, r3
     31a:	0016      	movs	r6, r2
     31c:	002b      	movs	r3, r5
     31e:	4333      	orrs	r3, r6
     320:	d007      	beq.n	332 <long_division+0x8a>
			r |= 0x01;
     322:	69bb      	ldr	r3, [r7, #24]
     324:	2201      	movs	r2, #1
     326:	4313      	orrs	r3, r2
     328:	61bb      	str	r3, [r7, #24]
     32a:	69fb      	ldr	r3, [r7, #28]
     32c:	2200      	movs	r2, #0
     32e:	4313      	orrs	r3, r2
     330:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     332:	687a      	ldr	r2, [r7, #4]
     334:	69fb      	ldr	r3, [r7, #28]
     336:	429a      	cmp	r2, r3
     338:	d819      	bhi.n	36e <long_division+0xc6>
     33a:	687a      	ldr	r2, [r7, #4]
     33c:	69fb      	ldr	r3, [r7, #28]
     33e:	429a      	cmp	r2, r3
     340:	d103      	bne.n	34a <long_division+0xa2>
     342:	683a      	ldr	r2, [r7, #0]
     344:	69bb      	ldr	r3, [r7, #24]
     346:	429a      	cmp	r2, r3
     348:	d811      	bhi.n	36e <long_division+0xc6>
			r = r - d;
     34a:	69b9      	ldr	r1, [r7, #24]
     34c:	69fa      	ldr	r2, [r7, #28]
     34e:	683b      	ldr	r3, [r7, #0]
     350:	687c      	ldr	r4, [r7, #4]
     352:	1ac9      	subs	r1, r1, r3
     354:	41a2      	sbcs	r2, r4
     356:	000b      	movs	r3, r1
     358:	0014      	movs	r4, r2
     35a:	61bb      	str	r3, [r7, #24]
     35c:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     35e:	6a3a      	ldr	r2, [r7, #32]
     360:	693b      	ldr	r3, [r7, #16]
     362:	4313      	orrs	r3, r2
     364:	623b      	str	r3, [r7, #32]
     366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     368:	697b      	ldr	r3, [r7, #20]
     36a:	4313      	orrs	r3, r2
     36c:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     370:	3b01      	subs	r3, #1
     372:	62fb      	str	r3, [r7, #44]	; 0x2c
     374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     376:	2b00      	cmp	r3, #0
     378:	daa8      	bge.n	2cc <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
     37a:	6a3b      	ldr	r3, [r7, #32]
     37c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     37e:	0018      	movs	r0, r3
     380:	0021      	movs	r1, r4
     382:	46bd      	mov	sp, r7
     384:	b00d      	add	sp, #52	; 0x34
     386:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000388 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     388:	b580      	push	{r7, lr}
     38a:	b086      	sub	sp, #24
     38c:	af00      	add	r7, sp, #0
     38e:	60f8      	str	r0, [r7, #12]
     390:	60b9      	str	r1, [r7, #8]
     392:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     394:	2316      	movs	r3, #22
     396:	18fb      	adds	r3, r7, r3
     398:	2200      	movs	r2, #0
     39a:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     39c:	68bb      	ldr	r3, [r7, #8]
     39e:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     3a0:	68bb      	ldr	r3, [r7, #8]
     3a2:	085a      	lsrs	r2, r3, #1
     3a4:	68fb      	ldr	r3, [r7, #12]
     3a6:	429a      	cmp	r2, r3
     3a8:	d201      	bcs.n	3ae <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3aa:	2340      	movs	r3, #64	; 0x40
     3ac:	e026      	b.n	3fc <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     3ae:	68bb      	ldr	r3, [r7, #8]
     3b0:	085b      	lsrs	r3, r3, #1
     3b2:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     3b4:	e00a      	b.n	3cc <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     3b6:	693a      	ldr	r2, [r7, #16]
     3b8:	68fb      	ldr	r3, [r7, #12]
     3ba:	1ad3      	subs	r3, r2, r3
     3bc:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     3be:	2316      	movs	r3, #22
     3c0:	18fb      	adds	r3, r7, r3
     3c2:	881a      	ldrh	r2, [r3, #0]
     3c4:	2316      	movs	r3, #22
     3c6:	18fb      	adds	r3, r7, r3
     3c8:	3201      	adds	r2, #1
     3ca:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     3cc:	693a      	ldr	r2, [r7, #16]
     3ce:	68fb      	ldr	r3, [r7, #12]
     3d0:	429a      	cmp	r2, r3
     3d2:	d2f0      	bcs.n	3b6 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     3d4:	2316      	movs	r3, #22
     3d6:	18fb      	adds	r3, r7, r3
     3d8:	2216      	movs	r2, #22
     3da:	18ba      	adds	r2, r7, r2
     3dc:	8812      	ldrh	r2, [r2, #0]
     3de:	3a01      	subs	r2, #1
     3e0:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     3e2:	2316      	movs	r3, #22
     3e4:	18fb      	adds	r3, r7, r3
     3e6:	881b      	ldrh	r3, [r3, #0]
     3e8:	2bff      	cmp	r3, #255	; 0xff
     3ea:	d901      	bls.n	3f0 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3ec:	2340      	movs	r3, #64	; 0x40
     3ee:	e005      	b.n	3fc <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	2216      	movs	r2, #22
     3f4:	18ba      	adds	r2, r7, r2
     3f6:	8812      	ldrh	r2, [r2, #0]
     3f8:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     3fa:	2300      	movs	r3, #0
	}
}
     3fc:	0018      	movs	r0, r3
     3fe:	46bd      	mov	sp, r7
     400:	b006      	add	sp, #24
     402:	bd80      	pop	{r7, pc}

00000404 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     404:	b5f0      	push	{r4, r5, r6, r7, lr}
     406:	b0a1      	sub	sp, #132	; 0x84
     408:	af00      	add	r7, sp, #0
     40a:	64f8      	str	r0, [r7, #76]	; 0x4c
     40c:	64b9      	str	r1, [r7, #72]	; 0x48
     40e:	647a      	str	r2, [r7, #68]	; 0x44
     410:	2243      	movs	r2, #67	; 0x43
     412:	18ba      	adds	r2, r7, r2
     414:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     416:	2300      	movs	r3, #0
     418:	2400      	movs	r4, #0
     41a:	673b      	str	r3, [r7, #112]	; 0x70
     41c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
     41e:	2300      	movs	r3, #0
     420:	2400      	movs	r4, #0
     422:	66bb      	str	r3, [r7, #104]	; 0x68
     424:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
     426:	2300      	movs	r3, #0
     428:	2400      	movs	r4, #0
     42a:	67bb      	str	r3, [r7, #120]	; 0x78
     42c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     42e:	2300      	movs	r3, #0
     430:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     432:	2358      	movs	r3, #88	; 0x58
     434:	2240      	movs	r2, #64	; 0x40
     436:	4694      	mov	ip, r2
     438:	44bc      	add	ip, r7
     43a:	4463      	add	r3, ip
     43c:	781a      	ldrb	r2, [r3, #0]
     43e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     440:	435a      	muls	r2, r3
     442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     444:	429a      	cmp	r2, r3
     446:	d901      	bls.n	44c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     448:	2340      	movs	r3, #64	; 0x40
     44a:	e0b3      	b.n	5b4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     44c:	2343      	movs	r3, #67	; 0x43
     44e:	18fb      	adds	r3, r7, r3
     450:	781b      	ldrb	r3, [r3, #0]
     452:	2b00      	cmp	r3, #0
     454:	d13d      	bne.n	4d2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     456:	2358      	movs	r3, #88	; 0x58
     458:	2240      	movs	r2, #64	; 0x40
     45a:	4694      	mov	ip, r2
     45c:	44bc      	add	ip, r7
     45e:	4463      	add	r3, ip
     460:	781b      	ldrb	r3, [r3, #0]
     462:	b2db      	uxtb	r3, r3
     464:	613b      	str	r3, [r7, #16]
     466:	2300      	movs	r3, #0
     468:	617b      	str	r3, [r7, #20]
     46a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     46c:	60bb      	str	r3, [r7, #8]
     46e:	2300      	movs	r3, #0
     470:	60fb      	str	r3, [r7, #12]
     472:	4c52      	ldr	r4, [pc, #328]	; (5bc <_sercom_get_async_baud_val+0x1b8>)
     474:	68ba      	ldr	r2, [r7, #8]
     476:	68fb      	ldr	r3, [r7, #12]
     478:	6938      	ldr	r0, [r7, #16]
     47a:	6979      	ldr	r1, [r7, #20]
     47c:	47a0      	blx	r4
     47e:	0003      	movs	r3, r0
     480:	000c      	movs	r4, r1
     482:	001b      	movs	r3, r3
     484:	65fb      	str	r3, [r7, #92]	; 0x5c
     486:	2300      	movs	r3, #0
     488:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
     48a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     48c:	603b      	str	r3, [r7, #0]
     48e:	2300      	movs	r3, #0
     490:	607b      	str	r3, [r7, #4]
     492:	6db8      	ldr	r0, [r7, #88]	; 0x58
     494:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     496:	683a      	ldr	r2, [r7, #0]
     498:	687b      	ldr	r3, [r7, #4]
     49a:	4c49      	ldr	r4, [pc, #292]	; (5c0 <_sercom_get_async_baud_val+0x1bc>)
     49c:	47a0      	blx	r4
     49e:	0003      	movs	r3, r0
     4a0:	000c      	movs	r4, r1
     4a2:	673b      	str	r3, [r7, #112]	; 0x70
     4a4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
     4a6:	2100      	movs	r1, #0
     4a8:	2201      	movs	r2, #1
     4aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     4ac:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     4ae:	1ac9      	subs	r1, r1, r3
     4b0:	41a2      	sbcs	r2, r4
     4b2:	000b      	movs	r3, r1
     4b4:	0014      	movs	r4, r2
     4b6:	66bb      	str	r3, [r7, #104]	; 0x68
     4b8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
     4ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     4bc:	0c1b      	lsrs	r3, r3, #16
     4be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     4c0:	0416      	lsls	r6, r2, #16
     4c2:	431e      	orrs	r6, r3
     4c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     4c6:	041d      	lsls	r5, r3, #16
     4c8:	0033      	movs	r3, r6
     4ca:	67bb      	str	r3, [r7, #120]	; 0x78
     4cc:	2300      	movs	r3, #0
     4ce:	67fb      	str	r3, [r7, #124]	; 0x7c
     4d0:	e06a      	b.n	5a8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     4d2:	2343      	movs	r3, #67	; 0x43
     4d4:	18fb      	adds	r3, r7, r3
     4d6:	781b      	ldrb	r3, [r3, #0]
     4d8:	2b01      	cmp	r3, #1
     4da:	d165      	bne.n	5a8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
     4dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     4de:	633b      	str	r3, [r7, #48]	; 0x30
     4e0:	2300      	movs	r3, #0
     4e2:	637b      	str	r3, [r7, #52]	; 0x34
     4e4:	2358      	movs	r3, #88	; 0x58
     4e6:	2240      	movs	r2, #64	; 0x40
     4e8:	4694      	mov	ip, r2
     4ea:	44bc      	add	ip, r7
     4ec:	4463      	add	r3, ip
     4ee:	781b      	ldrb	r3, [r3, #0]
     4f0:	b2db      	uxtb	r3, r3
     4f2:	62bb      	str	r3, [r7, #40]	; 0x28
     4f4:	2300      	movs	r3, #0
     4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
     4f8:	4c30      	ldr	r4, [pc, #192]	; (5bc <_sercom_get_async_baud_val+0x1b8>)
     4fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
     4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     4fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
     500:	6b79      	ldr	r1, [r7, #52]	; 0x34
     502:	47a0      	blx	r4
     504:	0003      	movs	r3, r0
     506:	000c      	movs	r4, r1
     508:	65bb      	str	r3, [r7, #88]	; 0x58
     50a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
     50c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     50e:	623b      	str	r3, [r7, #32]
     510:	2300      	movs	r3, #0
     512:	627b      	str	r3, [r7, #36]	; 0x24
     514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     516:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     518:	001a      	movs	r2, r3
     51a:	0023      	movs	r3, r4
     51c:	6a38      	ldr	r0, [r7, #32]
     51e:	6a79      	ldr	r1, [r7, #36]	; 0x24
     520:	4c27      	ldr	r4, [pc, #156]	; (5c0 <_sercom_get_async_baud_val+0x1bc>)
     522:	47a0      	blx	r4
     524:	0003      	movs	r3, r0
     526:	000c      	movs	r4, r1
     528:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
     52a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     52c:	2380      	movs	r3, #128	; 0x80
     52e:	019b      	lsls	r3, r3, #6
     530:	429a      	cmp	r2, r3
     532:	d901      	bls.n	538 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     534:	2340      	movs	r3, #64	; 0x40
     536:	e03d      	b.n	5b4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     53a:	61bb      	str	r3, [r7, #24]
     53c:	2300      	movs	r3, #0
     53e:	61fb      	str	r3, [r7, #28]
     540:	69b9      	ldr	r1, [r7, #24]
     542:	69fa      	ldr	r2, [r7, #28]
     544:	000b      	movs	r3, r1
     546:	0f5b      	lsrs	r3, r3, #29
     548:	0010      	movs	r0, r2
     54a:	00c0      	lsls	r0, r0, #3
     54c:	63f8      	str	r0, [r7, #60]	; 0x3c
     54e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     550:	4318      	orrs	r0, r3
     552:	63f8      	str	r0, [r7, #60]	; 0x3c
     554:	000b      	movs	r3, r1
     556:	00db      	lsls	r3, r3, #3
     558:	63bb      	str	r3, [r7, #56]	; 0x38
     55a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     55c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     55e:	001a      	movs	r2, r3
     560:	0023      	movs	r3, r4
     562:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     566:	4c16      	ldr	r4, [pc, #88]	; (5c0 <_sercom_get_async_baud_val+0x1bc>)
     568:	47a0      	blx	r4
     56a:	0003      	movs	r3, r0
     56c:	000c      	movs	r4, r1
     56e:	65bb      	str	r3, [r7, #88]	; 0x58
     570:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
     572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     574:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     576:	b2d9      	uxtb	r1, r3
     578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     57a:	b2db      	uxtb	r3, r3
     57c:	00db      	lsls	r3, r3, #3
     57e:	b2da      	uxtb	r2, r3
     580:	2317      	movs	r3, #23
     582:	2040      	movs	r0, #64	; 0x40
     584:	4684      	mov	ip, r0
     586:	44bc      	add	ip, r7
     588:	4463      	add	r3, ip
     58a:	1a8a      	subs	r2, r1, r2
     58c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
     58e:	2317      	movs	r3, #23
     590:	2240      	movs	r2, #64	; 0x40
     592:	4694      	mov	ip, r2
     594:	44bc      	add	ip, r7
     596:	4463      	add	r3, ip
     598:	781b      	ldrb	r3, [r3, #0]
     59a:	035b      	lsls	r3, r3, #13
     59c:	001a      	movs	r2, r3
     59e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     5a0:	4313      	orrs	r3, r2
     5a2:	67bb      	str	r3, [r7, #120]	; 0x78
     5a4:	2300      	movs	r3, #0
     5a6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
     5a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     5aa:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     5ac:	b29a      	uxth	r2, r3
     5ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5b0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     5b2:	2300      	movs	r3, #0
}
     5b4:	0018      	movs	r0, r3
     5b6:	46bd      	mov	sp, r7
     5b8:	b021      	add	sp, #132	; 0x84
     5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5bc:	00002f29 	.word	0x00002f29
     5c0:	000002a9 	.word	0x000002a9

000005c4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     5c4:	b580      	push	{r7, lr}
     5c6:	b084      	sub	sp, #16
     5c8:	af00      	add	r7, sp, #0
     5ca:	0002      	movs	r2, r0
     5cc:	1dfb      	adds	r3, r7, #7
     5ce:	701a      	strb	r2, [r3, #0]
     5d0:	1dbb      	adds	r3, r7, #6
     5d2:	1c0a      	adds	r2, r1, #0
     5d4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     5d6:	4b1a      	ldr	r3, [pc, #104]	; (640 <sercom_set_gclk_generator+0x7c>)
     5d8:	781b      	ldrb	r3, [r3, #0]
     5da:	2201      	movs	r2, #1
     5dc:	4053      	eors	r3, r2
     5de:	b2db      	uxtb	r3, r3
     5e0:	2b00      	cmp	r3, #0
     5e2:	d103      	bne.n	5ec <sercom_set_gclk_generator+0x28>
     5e4:	1dbb      	adds	r3, r7, #6
     5e6:	781b      	ldrb	r3, [r3, #0]
     5e8:	2b00      	cmp	r3, #0
     5ea:	d01b      	beq.n	624 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     5ec:	230c      	movs	r3, #12
     5ee:	18fb      	adds	r3, r7, r3
     5f0:	0018      	movs	r0, r3
     5f2:	4b14      	ldr	r3, [pc, #80]	; (644 <sercom_set_gclk_generator+0x80>)
     5f4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     5f6:	230c      	movs	r3, #12
     5f8:	18fb      	adds	r3, r7, r3
     5fa:	1dfa      	adds	r2, r7, #7
     5fc:	7812      	ldrb	r2, [r2, #0]
     5fe:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     600:	230c      	movs	r3, #12
     602:	18fb      	adds	r3, r7, r3
     604:	0019      	movs	r1, r3
     606:	2013      	movs	r0, #19
     608:	4b0f      	ldr	r3, [pc, #60]	; (648 <sercom_set_gclk_generator+0x84>)
     60a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     60c:	2013      	movs	r0, #19
     60e:	4b0f      	ldr	r3, [pc, #60]	; (64c <sercom_set_gclk_generator+0x88>)
     610:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     612:	4b0b      	ldr	r3, [pc, #44]	; (640 <sercom_set_gclk_generator+0x7c>)
     614:	1dfa      	adds	r2, r7, #7
     616:	7812      	ldrb	r2, [r2, #0]
     618:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     61a:	4b09      	ldr	r3, [pc, #36]	; (640 <sercom_set_gclk_generator+0x7c>)
     61c:	2201      	movs	r2, #1
     61e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     620:	2300      	movs	r3, #0
     622:	e008      	b.n	636 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     624:	4b06      	ldr	r3, [pc, #24]	; (640 <sercom_set_gclk_generator+0x7c>)
     626:	785b      	ldrb	r3, [r3, #1]
     628:	1dfa      	adds	r2, r7, #7
     62a:	7812      	ldrb	r2, [r2, #0]
     62c:	429a      	cmp	r2, r3
     62e:	d101      	bne.n	634 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     630:	2300      	movs	r3, #0
     632:	e000      	b.n	636 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     634:	231d      	movs	r3, #29
}
     636:	0018      	movs	r0, r3
     638:	46bd      	mov	sp, r7
     63a:	b004      	add	sp, #16
     63c:	bd80      	pop	{r7, pc}
     63e:	46c0      	nop			; (mov r8, r8)
     640:	2000008c 	.word	0x2000008c
     644:	00000291 	.word	0x00000291
     648:	000021e1 	.word	0x000021e1
     64c:	00002225 	.word	0x00002225

00000650 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     650:	b580      	push	{r7, lr}
     652:	b082      	sub	sp, #8
     654:	af00      	add	r7, sp, #0
     656:	6078      	str	r0, [r7, #4]
     658:	000a      	movs	r2, r1
     65a:	1cfb      	adds	r3, r7, #3
     65c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     65e:	687b      	ldr	r3, [r7, #4]
     660:	4a4d      	ldr	r2, [pc, #308]	; (798 <_sercom_get_default_pad+0x148>)
     662:	4293      	cmp	r3, r2
     664:	d03f      	beq.n	6e6 <_sercom_get_default_pad+0x96>
     666:	4a4c      	ldr	r2, [pc, #304]	; (798 <_sercom_get_default_pad+0x148>)
     668:	4293      	cmp	r3, r2
     66a:	d806      	bhi.n	67a <_sercom_get_default_pad+0x2a>
     66c:	4a4b      	ldr	r2, [pc, #300]	; (79c <_sercom_get_default_pad+0x14c>)
     66e:	4293      	cmp	r3, r2
     670:	d00f      	beq.n	692 <_sercom_get_default_pad+0x42>
     672:	4a4b      	ldr	r2, [pc, #300]	; (7a0 <_sercom_get_default_pad+0x150>)
     674:	4293      	cmp	r3, r2
     676:	d021      	beq.n	6bc <_sercom_get_default_pad+0x6c>
     678:	e089      	b.n	78e <_sercom_get_default_pad+0x13e>
     67a:	4a4a      	ldr	r2, [pc, #296]	; (7a4 <_sercom_get_default_pad+0x154>)
     67c:	4293      	cmp	r3, r2
     67e:	d100      	bne.n	682 <_sercom_get_default_pad+0x32>
     680:	e05b      	b.n	73a <_sercom_get_default_pad+0xea>
     682:	4a49      	ldr	r2, [pc, #292]	; (7a8 <_sercom_get_default_pad+0x158>)
     684:	4293      	cmp	r3, r2
     686:	d100      	bne.n	68a <_sercom_get_default_pad+0x3a>
     688:	e06c      	b.n	764 <_sercom_get_default_pad+0x114>
     68a:	4a48      	ldr	r2, [pc, #288]	; (7ac <_sercom_get_default_pad+0x15c>)
     68c:	4293      	cmp	r3, r2
     68e:	d03f      	beq.n	710 <_sercom_get_default_pad+0xc0>
     690:	e07d      	b.n	78e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     692:	1cfb      	adds	r3, r7, #3
     694:	781b      	ldrb	r3, [r3, #0]
     696:	2b01      	cmp	r3, #1
     698:	d00a      	beq.n	6b0 <_sercom_get_default_pad+0x60>
     69a:	dc02      	bgt.n	6a2 <_sercom_get_default_pad+0x52>
     69c:	2b00      	cmp	r3, #0
     69e:	d005      	beq.n	6ac <_sercom_get_default_pad+0x5c>
     6a0:	e075      	b.n	78e <_sercom_get_default_pad+0x13e>
     6a2:	2b02      	cmp	r3, #2
     6a4:	d006      	beq.n	6b4 <_sercom_get_default_pad+0x64>
     6a6:	2b03      	cmp	r3, #3
     6a8:	d006      	beq.n	6b8 <_sercom_get_default_pad+0x68>
     6aa:	e070      	b.n	78e <_sercom_get_default_pad+0x13e>
     6ac:	4b40      	ldr	r3, [pc, #256]	; (7b0 <_sercom_get_default_pad+0x160>)
     6ae:	e06f      	b.n	790 <_sercom_get_default_pad+0x140>
     6b0:	4b40      	ldr	r3, [pc, #256]	; (7b4 <_sercom_get_default_pad+0x164>)
     6b2:	e06d      	b.n	790 <_sercom_get_default_pad+0x140>
     6b4:	4b40      	ldr	r3, [pc, #256]	; (7b8 <_sercom_get_default_pad+0x168>)
     6b6:	e06b      	b.n	790 <_sercom_get_default_pad+0x140>
     6b8:	4b40      	ldr	r3, [pc, #256]	; (7bc <_sercom_get_default_pad+0x16c>)
     6ba:	e069      	b.n	790 <_sercom_get_default_pad+0x140>
     6bc:	1cfb      	adds	r3, r7, #3
     6be:	781b      	ldrb	r3, [r3, #0]
     6c0:	2b01      	cmp	r3, #1
     6c2:	d00a      	beq.n	6da <_sercom_get_default_pad+0x8a>
     6c4:	dc02      	bgt.n	6cc <_sercom_get_default_pad+0x7c>
     6c6:	2b00      	cmp	r3, #0
     6c8:	d005      	beq.n	6d6 <_sercom_get_default_pad+0x86>
     6ca:	e060      	b.n	78e <_sercom_get_default_pad+0x13e>
     6cc:	2b02      	cmp	r3, #2
     6ce:	d006      	beq.n	6de <_sercom_get_default_pad+0x8e>
     6d0:	2b03      	cmp	r3, #3
     6d2:	d006      	beq.n	6e2 <_sercom_get_default_pad+0x92>
     6d4:	e05b      	b.n	78e <_sercom_get_default_pad+0x13e>
     6d6:	2303      	movs	r3, #3
     6d8:	e05a      	b.n	790 <_sercom_get_default_pad+0x140>
     6da:	4b39      	ldr	r3, [pc, #228]	; (7c0 <_sercom_get_default_pad+0x170>)
     6dc:	e058      	b.n	790 <_sercom_get_default_pad+0x140>
     6de:	4b39      	ldr	r3, [pc, #228]	; (7c4 <_sercom_get_default_pad+0x174>)
     6e0:	e056      	b.n	790 <_sercom_get_default_pad+0x140>
     6e2:	4b39      	ldr	r3, [pc, #228]	; (7c8 <_sercom_get_default_pad+0x178>)
     6e4:	e054      	b.n	790 <_sercom_get_default_pad+0x140>
     6e6:	1cfb      	adds	r3, r7, #3
     6e8:	781b      	ldrb	r3, [r3, #0]
     6ea:	2b01      	cmp	r3, #1
     6ec:	d00a      	beq.n	704 <_sercom_get_default_pad+0xb4>
     6ee:	dc02      	bgt.n	6f6 <_sercom_get_default_pad+0xa6>
     6f0:	2b00      	cmp	r3, #0
     6f2:	d005      	beq.n	700 <_sercom_get_default_pad+0xb0>
     6f4:	e04b      	b.n	78e <_sercom_get_default_pad+0x13e>
     6f6:	2b02      	cmp	r3, #2
     6f8:	d006      	beq.n	708 <_sercom_get_default_pad+0xb8>
     6fa:	2b03      	cmp	r3, #3
     6fc:	d006      	beq.n	70c <_sercom_get_default_pad+0xbc>
     6fe:	e046      	b.n	78e <_sercom_get_default_pad+0x13e>
     700:	4b32      	ldr	r3, [pc, #200]	; (7cc <_sercom_get_default_pad+0x17c>)
     702:	e045      	b.n	790 <_sercom_get_default_pad+0x140>
     704:	4b32      	ldr	r3, [pc, #200]	; (7d0 <_sercom_get_default_pad+0x180>)
     706:	e043      	b.n	790 <_sercom_get_default_pad+0x140>
     708:	4b32      	ldr	r3, [pc, #200]	; (7d4 <_sercom_get_default_pad+0x184>)
     70a:	e041      	b.n	790 <_sercom_get_default_pad+0x140>
     70c:	4b32      	ldr	r3, [pc, #200]	; (7d8 <_sercom_get_default_pad+0x188>)
     70e:	e03f      	b.n	790 <_sercom_get_default_pad+0x140>
     710:	1cfb      	adds	r3, r7, #3
     712:	781b      	ldrb	r3, [r3, #0]
     714:	2b01      	cmp	r3, #1
     716:	d00a      	beq.n	72e <_sercom_get_default_pad+0xde>
     718:	dc02      	bgt.n	720 <_sercom_get_default_pad+0xd0>
     71a:	2b00      	cmp	r3, #0
     71c:	d005      	beq.n	72a <_sercom_get_default_pad+0xda>
     71e:	e036      	b.n	78e <_sercom_get_default_pad+0x13e>
     720:	2b02      	cmp	r3, #2
     722:	d006      	beq.n	732 <_sercom_get_default_pad+0xe2>
     724:	2b03      	cmp	r3, #3
     726:	d006      	beq.n	736 <_sercom_get_default_pad+0xe6>
     728:	e031      	b.n	78e <_sercom_get_default_pad+0x13e>
     72a:	4b2c      	ldr	r3, [pc, #176]	; (7dc <_sercom_get_default_pad+0x18c>)
     72c:	e030      	b.n	790 <_sercom_get_default_pad+0x140>
     72e:	4b2c      	ldr	r3, [pc, #176]	; (7e0 <_sercom_get_default_pad+0x190>)
     730:	e02e      	b.n	790 <_sercom_get_default_pad+0x140>
     732:	4b2c      	ldr	r3, [pc, #176]	; (7e4 <_sercom_get_default_pad+0x194>)
     734:	e02c      	b.n	790 <_sercom_get_default_pad+0x140>
     736:	4b2c      	ldr	r3, [pc, #176]	; (7e8 <_sercom_get_default_pad+0x198>)
     738:	e02a      	b.n	790 <_sercom_get_default_pad+0x140>
     73a:	1cfb      	adds	r3, r7, #3
     73c:	781b      	ldrb	r3, [r3, #0]
     73e:	2b01      	cmp	r3, #1
     740:	d00a      	beq.n	758 <_sercom_get_default_pad+0x108>
     742:	dc02      	bgt.n	74a <_sercom_get_default_pad+0xfa>
     744:	2b00      	cmp	r3, #0
     746:	d005      	beq.n	754 <_sercom_get_default_pad+0x104>
     748:	e021      	b.n	78e <_sercom_get_default_pad+0x13e>
     74a:	2b02      	cmp	r3, #2
     74c:	d006      	beq.n	75c <_sercom_get_default_pad+0x10c>
     74e:	2b03      	cmp	r3, #3
     750:	d006      	beq.n	760 <_sercom_get_default_pad+0x110>
     752:	e01c      	b.n	78e <_sercom_get_default_pad+0x13e>
     754:	4b25      	ldr	r3, [pc, #148]	; (7ec <_sercom_get_default_pad+0x19c>)
     756:	e01b      	b.n	790 <_sercom_get_default_pad+0x140>
     758:	4b25      	ldr	r3, [pc, #148]	; (7f0 <_sercom_get_default_pad+0x1a0>)
     75a:	e019      	b.n	790 <_sercom_get_default_pad+0x140>
     75c:	4b25      	ldr	r3, [pc, #148]	; (7f4 <_sercom_get_default_pad+0x1a4>)
     75e:	e017      	b.n	790 <_sercom_get_default_pad+0x140>
     760:	4b25      	ldr	r3, [pc, #148]	; (7f8 <_sercom_get_default_pad+0x1a8>)
     762:	e015      	b.n	790 <_sercom_get_default_pad+0x140>
     764:	1cfb      	adds	r3, r7, #3
     766:	781b      	ldrb	r3, [r3, #0]
     768:	2b01      	cmp	r3, #1
     76a:	d00a      	beq.n	782 <_sercom_get_default_pad+0x132>
     76c:	dc02      	bgt.n	774 <_sercom_get_default_pad+0x124>
     76e:	2b00      	cmp	r3, #0
     770:	d005      	beq.n	77e <_sercom_get_default_pad+0x12e>
     772:	e00c      	b.n	78e <_sercom_get_default_pad+0x13e>
     774:	2b02      	cmp	r3, #2
     776:	d006      	beq.n	786 <_sercom_get_default_pad+0x136>
     778:	2b03      	cmp	r3, #3
     77a:	d006      	beq.n	78a <_sercom_get_default_pad+0x13a>
     77c:	e007      	b.n	78e <_sercom_get_default_pad+0x13e>
     77e:	4b1f      	ldr	r3, [pc, #124]	; (7fc <_sercom_get_default_pad+0x1ac>)
     780:	e006      	b.n	790 <_sercom_get_default_pad+0x140>
     782:	4b1f      	ldr	r3, [pc, #124]	; (800 <_sercom_get_default_pad+0x1b0>)
     784:	e004      	b.n	790 <_sercom_get_default_pad+0x140>
     786:	4b1f      	ldr	r3, [pc, #124]	; (804 <_sercom_get_default_pad+0x1b4>)
     788:	e002      	b.n	790 <_sercom_get_default_pad+0x140>
     78a:	4b1f      	ldr	r3, [pc, #124]	; (808 <_sercom_get_default_pad+0x1b8>)
     78c:	e000      	b.n	790 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     78e:	2300      	movs	r3, #0
}
     790:	0018      	movs	r0, r3
     792:	46bd      	mov	sp, r7
     794:	b002      	add	sp, #8
     796:	bd80      	pop	{r7, pc}
     798:	42001000 	.word	0x42001000
     79c:	42000800 	.word	0x42000800
     7a0:	42000c00 	.word	0x42000c00
     7a4:	42001800 	.word	0x42001800
     7a8:	42001c00 	.word	0x42001c00
     7ac:	42001400 	.word	0x42001400
     7b0:	00040003 	.word	0x00040003
     7b4:	00050003 	.word	0x00050003
     7b8:	00060003 	.word	0x00060003
     7bc:	00070003 	.word	0x00070003
     7c0:	00010003 	.word	0x00010003
     7c4:	001e0003 	.word	0x001e0003
     7c8:	001f0003 	.word	0x001f0003
     7cc:	00080003 	.word	0x00080003
     7d0:	00090003 	.word	0x00090003
     7d4:	000a0003 	.word	0x000a0003
     7d8:	000b0003 	.word	0x000b0003
     7dc:	00100003 	.word	0x00100003
     7e0:	00110003 	.word	0x00110003
     7e4:	00120003 	.word	0x00120003
     7e8:	00130003 	.word	0x00130003
     7ec:	000c0003 	.word	0x000c0003
     7f0:	000d0003 	.word	0x000d0003
     7f4:	000e0003 	.word	0x000e0003
     7f8:	000f0003 	.word	0x000f0003
     7fc:	00160003 	.word	0x00160003
     800:	00170003 	.word	0x00170003
     804:	00180003 	.word	0x00180003
     808:	00190003 	.word	0x00190003

0000080c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     80c:	b590      	push	{r4, r7, lr}
     80e:	b08b      	sub	sp, #44	; 0x2c
     810:	af00      	add	r7, sp, #0
     812:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     814:	230c      	movs	r3, #12
     816:	18fb      	adds	r3, r7, r3
     818:	4a0f      	ldr	r2, [pc, #60]	; (858 <_sercom_get_sercom_inst_index+0x4c>)
     81a:	ca13      	ldmia	r2!, {r0, r1, r4}
     81c:	c313      	stmia	r3!, {r0, r1, r4}
     81e:	ca13      	ldmia	r2!, {r0, r1, r4}
     820:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     822:	2300      	movs	r3, #0
     824:	627b      	str	r3, [r7, #36]	; 0x24
     826:	e00e      	b.n	846 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     828:	230c      	movs	r3, #12
     82a:	18fb      	adds	r3, r7, r3
     82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     82e:	0092      	lsls	r2, r2, #2
     830:	58d3      	ldr	r3, [r2, r3]
     832:	1e1a      	subs	r2, r3, #0
     834:	687b      	ldr	r3, [r7, #4]
     836:	429a      	cmp	r2, r3
     838:	d102      	bne.n	840 <_sercom_get_sercom_inst_index+0x34>
			return i;
     83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     83c:	b2db      	uxtb	r3, r3
     83e:	e006      	b.n	84e <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     842:	3301      	adds	r3, #1
     844:	627b      	str	r3, [r7, #36]	; 0x24
     846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     848:	2b05      	cmp	r3, #5
     84a:	d9ed      	bls.n	828 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     84c:	2300      	movs	r3, #0
}
     84e:	0018      	movs	r0, r3
     850:	46bd      	mov	sp, r7
     852:	b00b      	add	sp, #44	; 0x2c
     854:	bd90      	pop	{r4, r7, pc}
     856:	46c0      	nop			; (mov r8, r8)
     858:	00004090 	.word	0x00004090

0000085c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     85c:	b580      	push	{r7, lr}
     85e:	b082      	sub	sp, #8
     860:	af00      	add	r7, sp, #0
     862:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     864:	687b      	ldr	r3, [r7, #4]
     866:	2200      	movs	r2, #0
     868:	701a      	strb	r2, [r3, #0]
}
     86a:	46c0      	nop			; (mov r8, r8)
     86c:	46bd      	mov	sp, r7
     86e:	b002      	add	sp, #8
     870:	bd80      	pop	{r7, pc}
     872:	46c0      	nop			; (mov r8, r8)

00000874 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     874:	b580      	push	{r7, lr}
     876:	b082      	sub	sp, #8
     878:	af00      	add	r7, sp, #0
     87a:	0002      	movs	r2, r0
     87c:	6039      	str	r1, [r7, #0]
     87e:	1dfb      	adds	r3, r7, #7
     880:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     882:	1dfb      	adds	r3, r7, #7
     884:	781b      	ldrb	r3, [r3, #0]
     886:	2b01      	cmp	r3, #1
     888:	d00a      	beq.n	8a0 <system_apb_clock_set_mask+0x2c>
     88a:	2b02      	cmp	r3, #2
     88c:	d00f      	beq.n	8ae <system_apb_clock_set_mask+0x3a>
     88e:	2b00      	cmp	r3, #0
     890:	d114      	bne.n	8bc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     892:	4b0e      	ldr	r3, [pc, #56]	; (8cc <system_apb_clock_set_mask+0x58>)
     894:	4a0d      	ldr	r2, [pc, #52]	; (8cc <system_apb_clock_set_mask+0x58>)
     896:	6991      	ldr	r1, [r2, #24]
     898:	683a      	ldr	r2, [r7, #0]
     89a:	430a      	orrs	r2, r1
     89c:	619a      	str	r2, [r3, #24]
			break;
     89e:	e00f      	b.n	8c0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     8a0:	4b0a      	ldr	r3, [pc, #40]	; (8cc <system_apb_clock_set_mask+0x58>)
     8a2:	4a0a      	ldr	r2, [pc, #40]	; (8cc <system_apb_clock_set_mask+0x58>)
     8a4:	69d1      	ldr	r1, [r2, #28]
     8a6:	683a      	ldr	r2, [r7, #0]
     8a8:	430a      	orrs	r2, r1
     8aa:	61da      	str	r2, [r3, #28]
			break;
     8ac:	e008      	b.n	8c0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     8ae:	4b07      	ldr	r3, [pc, #28]	; (8cc <system_apb_clock_set_mask+0x58>)
     8b0:	4a06      	ldr	r2, [pc, #24]	; (8cc <system_apb_clock_set_mask+0x58>)
     8b2:	6a11      	ldr	r1, [r2, #32]
     8b4:	683a      	ldr	r2, [r7, #0]
     8b6:	430a      	orrs	r2, r1
     8b8:	621a      	str	r2, [r3, #32]
			break;
     8ba:	e001      	b.n	8c0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     8bc:	2317      	movs	r3, #23
     8be:	e000      	b.n	8c2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     8c0:	2300      	movs	r3, #0
}
     8c2:	0018      	movs	r0, r3
     8c4:	46bd      	mov	sp, r7
     8c6:	b002      	add	sp, #8
     8c8:	bd80      	pop	{r7, pc}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	40000400 	.word	0x40000400

000008d0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     8d0:	b580      	push	{r7, lr}
     8d2:	b082      	sub	sp, #8
     8d4:	af00      	add	r7, sp, #0
     8d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	2280      	movs	r2, #128	; 0x80
     8dc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8de:	687b      	ldr	r3, [r7, #4]
     8e0:	2200      	movs	r2, #0
     8e2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     8e4:	687b      	ldr	r3, [r7, #4]
     8e6:	2201      	movs	r2, #1
     8e8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     8ea:	687b      	ldr	r3, [r7, #4]
     8ec:	2200      	movs	r2, #0
     8ee:	70da      	strb	r2, [r3, #3]
}
     8f0:	46c0      	nop			; (mov r8, r8)
     8f2:	46bd      	mov	sp, r7
     8f4:	b002      	add	sp, #8
     8f6:	bd80      	pop	{r7, pc}

000008f8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     8f8:	b580      	push	{r7, lr}
     8fa:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     8fc:	4b05      	ldr	r3, [pc, #20]	; (914 <system_is_debugger_present+0x1c>)
     8fe:	789b      	ldrb	r3, [r3, #2]
     900:	b2db      	uxtb	r3, r3
     902:	001a      	movs	r2, r3
     904:	2302      	movs	r3, #2
     906:	4013      	ands	r3, r2
     908:	1e5a      	subs	r2, r3, #1
     90a:	4193      	sbcs	r3, r2
     90c:	b2db      	uxtb	r3, r3
}
     90e:	0018      	movs	r0, r3
     910:	46bd      	mov	sp, r7
     912:	bd80      	pop	{r7, pc}
     914:	41002000 	.word	0x41002000

00000918 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     918:	b580      	push	{r7, lr}
     91a:	b084      	sub	sp, #16
     91c:	af00      	add	r7, sp, #0
     91e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     920:	687b      	ldr	r3, [r7, #4]
     922:	681b      	ldr	r3, [r3, #0]
     924:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     926:	68fb      	ldr	r3, [r7, #12]
     928:	69db      	ldr	r3, [r3, #28]
     92a:	1e5a      	subs	r2, r3, #1
     92c:	4193      	sbcs	r3, r2
     92e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     930:	0018      	movs	r0, r3
     932:	46bd      	mov	sp, r7
     934:	b004      	add	sp, #16
     936:	bd80      	pop	{r7, pc}

00000938 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     938:	b580      	push	{r7, lr}
     93a:	b082      	sub	sp, #8
     93c:	af00      	add	r7, sp, #0
     93e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     940:	46c0      	nop			; (mov r8, r8)
     942:	687b      	ldr	r3, [r7, #4]
     944:	0018      	movs	r0, r3
     946:	4b04      	ldr	r3, [pc, #16]	; (958 <_usart_wait_for_sync+0x20>)
     948:	4798      	blx	r3
     94a:	1e03      	subs	r3, r0, #0
     94c:	d1f9      	bne.n	942 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     94e:	46c0      	nop			; (mov r8, r8)
     950:	46bd      	mov	sp, r7
     952:	b002      	add	sp, #8
     954:	bd80      	pop	{r7, pc}
     956:	46c0      	nop			; (mov r8, r8)
     958:	00000919 	.word	0x00000919

0000095c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     95c:	b5b0      	push	{r4, r5, r7, lr}
     95e:	b08c      	sub	sp, #48	; 0x30
     960:	af02      	add	r7, sp, #8
     962:	6078      	str	r0, [r7, #4]
     964:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     966:	687b      	ldr	r3, [r7, #4]
     968:	681b      	ldr	r3, [r3, #0]
     96a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     96c:	687b      	ldr	r3, [r7, #4]
     96e:	681b      	ldr	r3, [r3, #0]
     970:	0018      	movs	r0, r3
     972:	4bab      	ldr	r3, [pc, #684]	; (c20 <_usart_set_config+0x2c4>)
     974:	4798      	blx	r3
     976:	0003      	movs	r3, r0
     978:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     97a:	697b      	ldr	r3, [r7, #20]
     97c:	3314      	adds	r3, #20
     97e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
     980:	2300      	movs	r3, #0
     982:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
     984:	2300      	movs	r3, #0
     986:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     988:	230a      	movs	r3, #10
     98a:	18fb      	adds	r3, r7, r3
     98c:	2200      	movs	r2, #0
     98e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     990:	231f      	movs	r3, #31
     992:	18fb      	adds	r3, r7, r3
     994:	2200      	movs	r2, #0
     996:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     998:	231e      	movs	r3, #30
     99a:	18fb      	adds	r3, r7, r3
     99c:	2210      	movs	r2, #16
     99e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     9a0:	683b      	ldr	r3, [r7, #0]
     9a2:	8a1b      	ldrh	r3, [r3, #16]
     9a4:	2280      	movs	r2, #128	; 0x80
     9a6:	01d2      	lsls	r2, r2, #7
     9a8:	4293      	cmp	r3, r2
     9aa:	d01c      	beq.n	9e6 <_usart_set_config+0x8a>
     9ac:	2280      	movs	r2, #128	; 0x80
     9ae:	01d2      	lsls	r2, r2, #7
     9b0:	4293      	cmp	r3, r2
     9b2:	dc06      	bgt.n	9c2 <_usart_set_config+0x66>
     9b4:	2b00      	cmp	r3, #0
     9b6:	d00d      	beq.n	9d4 <_usart_set_config+0x78>
     9b8:	2280      	movs	r2, #128	; 0x80
     9ba:	0192      	lsls	r2, r2, #6
     9bc:	4293      	cmp	r3, r2
     9be:	d024      	beq.n	a0a <_usart_set_config+0xae>
     9c0:	e035      	b.n	a2e <_usart_set_config+0xd2>
     9c2:	22c0      	movs	r2, #192	; 0xc0
     9c4:	01d2      	lsls	r2, r2, #7
     9c6:	4293      	cmp	r3, r2
     9c8:	d028      	beq.n	a1c <_usart_set_config+0xc0>
     9ca:	2280      	movs	r2, #128	; 0x80
     9cc:	0212      	lsls	r2, r2, #8
     9ce:	4293      	cmp	r3, r2
     9d0:	d012      	beq.n	9f8 <_usart_set_config+0x9c>
     9d2:	e02c      	b.n	a2e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     9d4:	231f      	movs	r3, #31
     9d6:	18fb      	adds	r3, r7, r3
     9d8:	2200      	movs	r2, #0
     9da:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     9dc:	231e      	movs	r3, #30
     9de:	18fb      	adds	r3, r7, r3
     9e0:	2210      	movs	r2, #16
     9e2:	701a      	strb	r2, [r3, #0]
			break;
     9e4:	e023      	b.n	a2e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     9e6:	231f      	movs	r3, #31
     9e8:	18fb      	adds	r3, r7, r3
     9ea:	2200      	movs	r2, #0
     9ec:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     9ee:	231e      	movs	r3, #30
     9f0:	18fb      	adds	r3, r7, r3
     9f2:	2208      	movs	r2, #8
     9f4:	701a      	strb	r2, [r3, #0]
			break;
     9f6:	e01a      	b.n	a2e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     9f8:	231f      	movs	r3, #31
     9fa:	18fb      	adds	r3, r7, r3
     9fc:	2200      	movs	r2, #0
     9fe:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     a00:	231e      	movs	r3, #30
     a02:	18fb      	adds	r3, r7, r3
     a04:	2203      	movs	r2, #3
     a06:	701a      	strb	r2, [r3, #0]
			break;
     a08:	e011      	b.n	a2e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     a0a:	231f      	movs	r3, #31
     a0c:	18fb      	adds	r3, r7, r3
     a0e:	2201      	movs	r2, #1
     a10:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     a12:	231e      	movs	r3, #30
     a14:	18fb      	adds	r3, r7, r3
     a16:	2210      	movs	r2, #16
     a18:	701a      	strb	r2, [r3, #0]
			break;
     a1a:	e008      	b.n	a2e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     a1c:	231f      	movs	r3, #31
     a1e:	18fb      	adds	r3, r7, r3
     a20:	2201      	movs	r2, #1
     a22:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     a24:	231e      	movs	r3, #30
     a26:	18fb      	adds	r3, r7, r3
     a28:	2208      	movs	r2, #8
     a2a:	701a      	strb	r2, [r3, #0]
			break;
     a2c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     a2e:	683b      	ldr	r3, [r7, #0]
     a30:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
     a32:	683b      	ldr	r3, [r7, #0]
     a34:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     a36:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     a38:	683b      	ldr	r3, [r7, #0]
     a3a:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
     a3c:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
     a3e:	683a      	ldr	r2, [r7, #0]
     a40:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     a42:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     a44:	683a      	ldr	r2, [r7, #0]
     a46:	7e12      	ldrb	r2, [r2, #24]
     a48:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
     a4a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a4c:	683a      	ldr	r2, [r7, #0]
     a4e:	2126      	movs	r1, #38	; 0x26
     a50:	5c52      	ldrb	r2, [r2, r1]
     a52:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     a54:	4313      	orrs	r3, r2
     a56:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     a58:	231d      	movs	r3, #29
     a5a:	18fb      	adds	r3, r7, r3
     a5c:	2200      	movs	r2, #0
     a5e:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
     a60:	683b      	ldr	r3, [r7, #0]
     a62:	685b      	ldr	r3, [r3, #4]
     a64:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	2b00      	cmp	r3, #0
     a6a:	d01e      	beq.n	aaa <_usart_set_config+0x14e>
     a6c:	2280      	movs	r2, #128	; 0x80
     a6e:	0552      	lsls	r2, r2, #21
     a70:	4293      	cmp	r3, r2
     a72:	d14f      	bne.n	b14 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     a74:	683b      	ldr	r3, [r7, #0]
     a76:	2227      	movs	r2, #39	; 0x27
     a78:	5c9b      	ldrb	r3, [r3, r2]
     a7a:	2201      	movs	r2, #1
     a7c:	4053      	eors	r3, r2
     a7e:	b2db      	uxtb	r3, r3
     a80:	2b00      	cmp	r3, #0
     a82:	d046      	beq.n	b12 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     a84:	683b      	ldr	r3, [r7, #0]
     a86:	6a1d      	ldr	r5, [r3, #32]
     a88:	693b      	ldr	r3, [r7, #16]
     a8a:	b2db      	uxtb	r3, r3
     a8c:	0018      	movs	r0, r3
     a8e:	4b65      	ldr	r3, [pc, #404]	; (c24 <_usart_set_config+0x2c8>)
     a90:	4798      	blx	r3
     a92:	0001      	movs	r1, r0
     a94:	231d      	movs	r3, #29
     a96:	18fc      	adds	r4, r7, r3
     a98:	230a      	movs	r3, #10
     a9a:	18fb      	adds	r3, r7, r3
     a9c:	001a      	movs	r2, r3
     a9e:	0028      	movs	r0, r5
     aa0:	4b61      	ldr	r3, [pc, #388]	; (c28 <_usart_set_config+0x2cc>)
     aa2:	4798      	blx	r3
     aa4:	0003      	movs	r3, r0
     aa6:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
     aa8:	e033      	b.n	b12 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     aaa:	683b      	ldr	r3, [r7, #0]
     aac:	2227      	movs	r2, #39	; 0x27
     aae:	5c9b      	ldrb	r3, [r3, r2]
     ab0:	2b00      	cmp	r3, #0
     ab2:	d014      	beq.n	ade <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     ab4:	683b      	ldr	r3, [r7, #0]
     ab6:	6a18      	ldr	r0, [r3, #32]
     ab8:	683b      	ldr	r3, [r7, #0]
     aba:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
     abc:	231d      	movs	r3, #29
     abe:	18fc      	adds	r4, r7, r3
     ac0:	231f      	movs	r3, #31
     ac2:	18fb      	adds	r3, r7, r3
     ac4:	781d      	ldrb	r5, [r3, #0]
     ac6:	230a      	movs	r3, #10
     ac8:	18fa      	adds	r2, r7, r3
     aca:	231e      	movs	r3, #30
     acc:	18fb      	adds	r3, r7, r3
     ace:	781b      	ldrb	r3, [r3, #0]
     ad0:	9300      	str	r3, [sp, #0]
     ad2:	002b      	movs	r3, r5
     ad4:	4d55      	ldr	r5, [pc, #340]	; (c2c <_usart_set_config+0x2d0>)
     ad6:	47a8      	blx	r5
     ad8:	0003      	movs	r3, r0
     ada:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
     adc:	e01a      	b.n	b14 <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     ade:	683b      	ldr	r3, [r7, #0]
     ae0:	6a1d      	ldr	r5, [r3, #32]
     ae2:	693b      	ldr	r3, [r7, #16]
     ae4:	b2db      	uxtb	r3, r3
     ae6:	0018      	movs	r0, r3
     ae8:	4b4e      	ldr	r3, [pc, #312]	; (c24 <_usart_set_config+0x2c8>)
     aea:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     aec:	231d      	movs	r3, #29
     aee:	18fc      	adds	r4, r7, r3
     af0:	231f      	movs	r3, #31
     af2:	18fb      	adds	r3, r7, r3
     af4:	7819      	ldrb	r1, [r3, #0]
     af6:	230a      	movs	r3, #10
     af8:	18fa      	adds	r2, r7, r3
     afa:	231e      	movs	r3, #30
     afc:	18fb      	adds	r3, r7, r3
     afe:	781b      	ldrb	r3, [r3, #0]
     b00:	9300      	str	r3, [sp, #0]
     b02:	000b      	movs	r3, r1
     b04:	0001      	movs	r1, r0
     b06:	0028      	movs	r0, r5
     b08:	4d48      	ldr	r5, [pc, #288]	; (c2c <_usart_set_config+0x2d0>)
     b0a:	47a8      	blx	r5
     b0c:	0003      	movs	r3, r0
     b0e:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
     b10:	e000      	b.n	b14 <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
     b12:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     b14:	231d      	movs	r3, #29
     b16:	18fb      	adds	r3, r7, r3
     b18:	781b      	ldrb	r3, [r3, #0]
     b1a:	2b00      	cmp	r3, #0
     b1c:	d003      	beq.n	b26 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
     b1e:	231d      	movs	r3, #29
     b20:	18fb      	adds	r3, r7, r3
     b22:	781b      	ldrb	r3, [r3, #0]
     b24:	e077      	b.n	c16 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     b26:	683b      	ldr	r3, [r7, #0]
     b28:	7e5b      	ldrb	r3, [r3, #25]
     b2a:	2b00      	cmp	r3, #0
     b2c:	d003      	beq.n	b36 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     b2e:	683b      	ldr	r3, [r7, #0]
     b30:	7e9a      	ldrb	r2, [r3, #26]
     b32:	69bb      	ldr	r3, [r7, #24]
     b34:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     b36:	687b      	ldr	r3, [r7, #4]
     b38:	0018      	movs	r0, r3
     b3a:	4b3d      	ldr	r3, [pc, #244]	; (c30 <_usart_set_config+0x2d4>)
     b3c:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     b3e:	230a      	movs	r3, #10
     b40:	18fb      	adds	r3, r7, r3
     b42:	881a      	ldrh	r2, [r3, #0]
     b44:	69bb      	ldr	r3, [r7, #24]
     b46:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     b4a:	68fb      	ldr	r3, [r7, #12]
     b4c:	4313      	orrs	r3, r2
     b4e:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
     b50:	683b      	ldr	r3, [r7, #0]
     b52:	2227      	movs	r2, #39	; 0x27
     b54:	5c9b      	ldrb	r3, [r3, r2]
     b56:	2201      	movs	r2, #1
     b58:	4053      	eors	r3, r2
     b5a:	b2db      	uxtb	r3, r3
     b5c:	2b00      	cmp	r3, #0
     b5e:	d003      	beq.n	b68 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b62:	2204      	movs	r2, #4
     b64:	4313      	orrs	r3, r2
     b66:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     b68:	683b      	ldr	r3, [r7, #0]
     b6a:	7e5b      	ldrb	r3, [r3, #25]
     b6c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     b6e:	683b      	ldr	r3, [r7, #0]
     b70:	7f1b      	ldrb	r3, [r3, #28]
     b72:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     b74:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     b76:	683b      	ldr	r3, [r7, #0]
     b78:	7f5b      	ldrb	r3, [r3, #29]
     b7a:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     b7c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     b7e:	683b      	ldr	r3, [r7, #0]
     b80:	2124      	movs	r1, #36	; 0x24
     b82:	5c5b      	ldrb	r3, [r3, r1]
     b84:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     b86:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     b88:	683b      	ldr	r3, [r7, #0]
     b8a:	2125      	movs	r1, #37	; 0x25
     b8c:	5c5b      	ldrb	r3, [r3, r1]
     b8e:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     b90:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     b92:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
     b94:	683b      	ldr	r3, [r7, #0]
     b96:	7a9b      	ldrb	r3, [r3, #10]
     b98:	001a      	movs	r2, r3
     b9a:	6a3b      	ldr	r3, [r7, #32]
     b9c:	4313      	orrs	r3, r2
     b9e:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
     ba0:	683b      	ldr	r3, [r7, #0]
     ba2:	7adb      	ldrb	r3, [r3, #11]
     ba4:	001a      	movs	r2, r3
     ba6:	6a3b      	ldr	r3, [r7, #32]
     ba8:	4313      	orrs	r3, r2
     baa:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     bac:	683b      	ldr	r3, [r7, #0]
     bae:	891b      	ldrh	r3, [r3, #8]
     bb0:	2bff      	cmp	r3, #255	; 0xff
     bb2:	d00b      	beq.n	bcc <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     bb6:	2280      	movs	r2, #128	; 0x80
     bb8:	0452      	lsls	r2, r2, #17
     bba:	4313      	orrs	r3, r2
     bbc:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
     bbe:	683b      	ldr	r3, [r7, #0]
     bc0:	891b      	ldrh	r3, [r3, #8]
     bc2:	001a      	movs	r2, r3
     bc4:	6a3b      	ldr	r3, [r7, #32]
     bc6:	4313      	orrs	r3, r2
     bc8:	623b      	str	r3, [r7, #32]
     bca:	e008      	b.n	bde <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     bcc:	683b      	ldr	r3, [r7, #0]
     bce:	7edb      	ldrb	r3, [r3, #27]
     bd0:	2b00      	cmp	r3, #0
     bd2:	d004      	beq.n	bde <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     bd6:	2280      	movs	r2, #128	; 0x80
     bd8:	04d2      	lsls	r2, r2, #19
     bda:	4313      	orrs	r3, r2
     bdc:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     bde:	683b      	ldr	r3, [r7, #0]
     be0:	222c      	movs	r2, #44	; 0x2c
     be2:	5c9b      	ldrb	r3, [r3, r2]
     be4:	2b00      	cmp	r3, #0
     be6:	d103      	bne.n	bf0 <_usart_set_config+0x294>
     be8:	4b12      	ldr	r3, [pc, #72]	; (c34 <_usart_set_config+0x2d8>)
     bea:	4798      	blx	r3
     bec:	1e03      	subs	r3, r0, #0
     bee:	d003      	beq.n	bf8 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     bf2:	2280      	movs	r2, #128	; 0x80
     bf4:	4313      	orrs	r3, r2
     bf6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     bf8:	687b      	ldr	r3, [r7, #4]
     bfa:	0018      	movs	r0, r3
     bfc:	4b0c      	ldr	r3, [pc, #48]	; (c30 <_usart_set_config+0x2d4>)
     bfe:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     c00:	69bb      	ldr	r3, [r7, #24]
     c02:	6a3a      	ldr	r2, [r7, #32]
     c04:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	0018      	movs	r0, r3
     c0a:	4b09      	ldr	r3, [pc, #36]	; (c30 <_usart_set_config+0x2d4>)
     c0c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     c0e:	69bb      	ldr	r3, [r7, #24]
     c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     c12:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
     c14:	2300      	movs	r3, #0
}
     c16:	0018      	movs	r0, r3
     c18:	46bd      	mov	sp, r7
     c1a:	b00a      	add	sp, #40	; 0x28
     c1c:	bdb0      	pop	{r4, r5, r7, pc}
     c1e:	46c0      	nop			; (mov r8, r8)
     c20:	0000080d 	.word	0x0000080d
     c24:	00002305 	.word	0x00002305
     c28:	00000389 	.word	0x00000389
     c2c:	00000405 	.word	0x00000405
     c30:	00000939 	.word	0x00000939
     c34:	000008f9 	.word	0x000008f9

00000c38 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     c38:	b590      	push	{r4, r7, lr}
     c3a:	b093      	sub	sp, #76	; 0x4c
     c3c:	af00      	add	r7, sp, #0
     c3e:	60f8      	str	r0, [r7, #12]
     c40:	60b9      	str	r1, [r7, #8]
     c42:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
     c44:	233b      	movs	r3, #59	; 0x3b
     c46:	18fb      	adds	r3, r7, r3
     c48:	2200      	movs	r2, #0
     c4a:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     c4c:	68fb      	ldr	r3, [r7, #12]
     c4e:	68ba      	ldr	r2, [r7, #8]
     c50:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     c52:	68fb      	ldr	r3, [r7, #12]
     c54:	681b      	ldr	r3, [r3, #0]
     c56:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c58:	68fb      	ldr	r3, [r7, #12]
     c5a:	681b      	ldr	r3, [r3, #0]
     c5c:	0018      	movs	r0, r3
     c5e:	4b86      	ldr	r3, [pc, #536]	; (e78 <usart_init+0x240>)
     c60:	4798      	blx	r3
     c62:	0003      	movs	r3, r0
     c64:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c68:	3302      	adds	r3, #2
     c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c6e:	3314      	adds	r3, #20
     c70:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c74:	681b      	ldr	r3, [r3, #0]
     c76:	2201      	movs	r2, #1
     c78:	4013      	ands	r3, r2
     c7a:	d001      	beq.n	c80 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     c7c:	2305      	movs	r3, #5
     c7e:	e0f6      	b.n	e6e <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c82:	681b      	ldr	r3, [r3, #0]
     c84:	2202      	movs	r2, #2
     c86:	4013      	ands	r3, r2
     c88:	d001      	beq.n	c8e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     c8a:	231c      	movs	r3, #28
     c8c:	e0ef      	b.n	e6e <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     c8e:	2201      	movs	r2, #1
     c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     c92:	409a      	lsls	r2, r3
     c94:	0013      	movs	r3, r2
     c96:	0019      	movs	r1, r3
     c98:	2002      	movs	r0, #2
     c9a:	4b78      	ldr	r3, [pc, #480]	; (e7c <usart_init+0x244>)
     c9c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     c9e:	2324      	movs	r3, #36	; 0x24
     ca0:	18fb      	adds	r3, r7, r3
     ca2:	0018      	movs	r0, r3
     ca4:	4b76      	ldr	r3, [pc, #472]	; (e80 <usart_init+0x248>)
     ca6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     ca8:	687b      	ldr	r3, [r7, #4]
     caa:	222d      	movs	r2, #45	; 0x2d
     cac:	5c9a      	ldrb	r2, [r3, r2]
     cae:	2324      	movs	r3, #36	; 0x24
     cb0:	18fb      	adds	r3, r7, r3
     cb2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
     cb6:	b2db      	uxtb	r3, r3
     cb8:	2224      	movs	r2, #36	; 0x24
     cba:	18ba      	adds	r2, r7, r2
     cbc:	0011      	movs	r1, r2
     cbe:	0018      	movs	r0, r3
     cc0:	4b70      	ldr	r3, [pc, #448]	; (e84 <usart_init+0x24c>)
     cc2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
     cc6:	b2db      	uxtb	r3, r3
     cc8:	0018      	movs	r0, r3
     cca:	4b6f      	ldr	r3, [pc, #444]	; (e88 <usart_init+0x250>)
     ccc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     cce:	687b      	ldr	r3, [r7, #4]
     cd0:	222d      	movs	r2, #45	; 0x2d
     cd2:	5c9b      	ldrb	r3, [r3, r2]
     cd4:	2100      	movs	r1, #0
     cd6:	0018      	movs	r0, r3
     cd8:	4b6c      	ldr	r3, [pc, #432]	; (e8c <usart_init+0x254>)
     cda:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     cdc:	687b      	ldr	r3, [r7, #4]
     cde:	7ada      	ldrb	r2, [r3, #11]
     ce0:	68fb      	ldr	r3, [r7, #12]
     ce2:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     ce4:	687b      	ldr	r3, [r7, #4]
     ce6:	2224      	movs	r2, #36	; 0x24
     ce8:	5c9a      	ldrb	r2, [r3, r2]
     cea:	68fb      	ldr	r3, [r7, #12]
     cec:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	2225      	movs	r2, #37	; 0x25
     cf2:	5c9a      	ldrb	r2, [r3, r2]
     cf4:	68fb      	ldr	r3, [r7, #12]
     cf6:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     cf8:	687b      	ldr	r3, [r7, #4]
     cfa:	7eda      	ldrb	r2, [r3, #27]
     cfc:	68fb      	ldr	r3, [r7, #12]
     cfe:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     d00:	687b      	ldr	r3, [r7, #4]
     d02:	7f1a      	ldrb	r2, [r3, #28]
     d04:	68fb      	ldr	r3, [r7, #12]
     d06:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
     d08:	233b      	movs	r3, #59	; 0x3b
     d0a:	18fc      	adds	r4, r7, r3
     d0c:	687a      	ldr	r2, [r7, #4]
     d0e:	68fb      	ldr	r3, [r7, #12]
     d10:	0011      	movs	r1, r2
     d12:	0018      	movs	r0, r3
     d14:	4b5e      	ldr	r3, [pc, #376]	; (e90 <usart_init+0x258>)
     d16:	4798      	blx	r3
     d18:	0003      	movs	r3, r0
     d1a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
     d1c:	233b      	movs	r3, #59	; 0x3b
     d1e:	18fb      	adds	r3, r7, r3
     d20:	781b      	ldrb	r3, [r3, #0]
     d22:	2b00      	cmp	r3, #0
     d24:	d003      	beq.n	d2e <usart_init+0xf6>
		return status_code;
     d26:	233b      	movs	r3, #59	; 0x3b
     d28:	18fb      	adds	r3, r7, r3
     d2a:	781b      	ldrb	r3, [r3, #0]
     d2c:	e09f      	b.n	e6e <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     d2e:	2320      	movs	r3, #32
     d30:	18fb      	adds	r3, r7, r3
     d32:	0018      	movs	r0, r3
     d34:	4b57      	ldr	r3, [pc, #348]	; (e94 <usart_init+0x25c>)
     d36:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d38:	2320      	movs	r3, #32
     d3a:	18fb      	adds	r3, r7, r3
     d3c:	2200      	movs	r2, #0
     d3e:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     d40:	2320      	movs	r3, #32
     d42:	18fb      	adds	r3, r7, r3
     d44:	2200      	movs	r2, #0
     d46:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     d48:	687b      	ldr	r3, [r7, #4]
     d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     d4c:	2310      	movs	r3, #16
     d4e:	18fb      	adds	r3, r7, r3
     d50:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     d52:	687b      	ldr	r3, [r7, #4]
     d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     d56:	2310      	movs	r3, #16
     d58:	18fb      	adds	r3, r7, r3
     d5a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     d5c:	687b      	ldr	r3, [r7, #4]
     d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     d60:	2310      	movs	r3, #16
     d62:	18fb      	adds	r3, r7, r3
     d64:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     d6a:	2310      	movs	r3, #16
     d6c:	18fb      	adds	r3, r7, r3
     d6e:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     d70:	2347      	movs	r3, #71	; 0x47
     d72:	18fb      	adds	r3, r7, r3
     d74:	2200      	movs	r2, #0
     d76:	701a      	strb	r2, [r3, #0]
     d78:	e02c      	b.n	dd4 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d7a:	2347      	movs	r3, #71	; 0x47
     d7c:	18fb      	adds	r3, r7, r3
     d7e:	781a      	ldrb	r2, [r3, #0]
     d80:	2310      	movs	r3, #16
     d82:	18fb      	adds	r3, r7, r3
     d84:	0092      	lsls	r2, r2, #2
     d86:	58d3      	ldr	r3, [r2, r3]
     d88:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     d8c:	2b00      	cmp	r3, #0
     d8e:	d109      	bne.n	da4 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     d90:	2347      	movs	r3, #71	; 0x47
     d92:	18fb      	adds	r3, r7, r3
     d94:	781a      	ldrb	r2, [r3, #0]
     d96:	68bb      	ldr	r3, [r7, #8]
     d98:	0011      	movs	r1, r2
     d9a:	0018      	movs	r0, r3
     d9c:	4b3e      	ldr	r3, [pc, #248]	; (e98 <usart_init+0x260>)
     d9e:	4798      	blx	r3
     da0:	0003      	movs	r3, r0
     da2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     da6:	3301      	adds	r3, #1
     da8:	d00d      	beq.n	dc6 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     dac:	b2da      	uxtb	r2, r3
     dae:	2320      	movs	r3, #32
     db0:	18fb      	adds	r3, r7, r3
     db2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     db6:	0c1b      	lsrs	r3, r3, #16
     db8:	b2db      	uxtb	r3, r3
     dba:	2220      	movs	r2, #32
     dbc:	18ba      	adds	r2, r7, r2
     dbe:	0011      	movs	r1, r2
     dc0:	0018      	movs	r0, r3
     dc2:	4b36      	ldr	r3, [pc, #216]	; (e9c <usart_init+0x264>)
     dc4:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     dc6:	2347      	movs	r3, #71	; 0x47
     dc8:	18fb      	adds	r3, r7, r3
     dca:	781a      	ldrb	r2, [r3, #0]
     dcc:	2347      	movs	r3, #71	; 0x47
     dce:	18fb      	adds	r3, r7, r3
     dd0:	3201      	adds	r2, #1
     dd2:	701a      	strb	r2, [r3, #0]
     dd4:	2347      	movs	r3, #71	; 0x47
     dd6:	18fb      	adds	r3, r7, r3
     dd8:	781b      	ldrb	r3, [r3, #0]
     dda:	2b03      	cmp	r3, #3
     ddc:	d9cd      	bls.n	d7a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     dde:	2300      	movs	r3, #0
     de0:	63fb      	str	r3, [r7, #60]	; 0x3c
     de2:	e00a      	b.n	dfa <usart_init+0x1c2>
		module->callback[i]            = NULL;
     de4:	68fa      	ldr	r2, [r7, #12]
     de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     de8:	3302      	adds	r3, #2
     dea:	009b      	lsls	r3, r3, #2
     dec:	18d3      	adds	r3, r2, r3
     dee:	3304      	adds	r3, #4
     df0:	2200      	movs	r2, #0
     df2:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     df6:	3301      	adds	r3, #1
     df8:	63fb      	str	r3, [r7, #60]	; 0x3c
     dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     dfc:	2b05      	cmp	r3, #5
     dfe:	d9f1      	bls.n	de4 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
     e00:	68fb      	ldr	r3, [r7, #12]
     e02:	2200      	movs	r2, #0
     e04:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     e06:	68fb      	ldr	r3, [r7, #12]
     e08:	2200      	movs	r2, #0
     e0a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     e0c:	68fb      	ldr	r3, [r7, #12]
     e0e:	2200      	movs	r2, #0
     e10:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     e12:	68fb      	ldr	r3, [r7, #12]
     e14:	2200      	movs	r2, #0
     e16:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     e18:	68fb      	ldr	r3, [r7, #12]
     e1a:	2230      	movs	r2, #48	; 0x30
     e1c:	2100      	movs	r1, #0
     e1e:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
     e20:	68fb      	ldr	r3, [r7, #12]
     e22:	2231      	movs	r2, #49	; 0x31
     e24:	2100      	movs	r1, #0
     e26:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
     e28:	68fb      	ldr	r3, [r7, #12]
     e2a:	2232      	movs	r2, #50	; 0x32
     e2c:	2100      	movs	r1, #0
     e2e:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
     e30:	68fb      	ldr	r3, [r7, #12]
     e32:	2233      	movs	r2, #51	; 0x33
     e34:	2100      	movs	r1, #0
     e36:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     e38:	68fb      	ldr	r3, [r7, #12]
     e3a:	681b      	ldr	r3, [r3, #0]
     e3c:	2227      	movs	r2, #39	; 0x27
     e3e:	18bc      	adds	r4, r7, r2
     e40:	0018      	movs	r0, r3
     e42:	4b0d      	ldr	r3, [pc, #52]	; (e78 <usart_init+0x240>)
     e44:	4798      	blx	r3
     e46:	0003      	movs	r3, r0
     e48:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     e4a:	4a15      	ldr	r2, [pc, #84]	; (ea0 <usart_init+0x268>)
     e4c:	2327      	movs	r3, #39	; 0x27
     e4e:	18fb      	adds	r3, r7, r3
     e50:	781b      	ldrb	r3, [r3, #0]
     e52:	0011      	movs	r1, r2
     e54:	0018      	movs	r0, r3
     e56:	4b13      	ldr	r3, [pc, #76]	; (ea4 <usart_init+0x26c>)
     e58:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     e5a:	2327      	movs	r3, #39	; 0x27
     e5c:	18fb      	adds	r3, r7, r3
     e5e:	781a      	ldrb	r2, [r3, #0]
     e60:	4b11      	ldr	r3, [pc, #68]	; (ea8 <usart_init+0x270>)
     e62:	0092      	lsls	r2, r2, #2
     e64:	68f9      	ldr	r1, [r7, #12]
     e66:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
     e68:	233b      	movs	r3, #59	; 0x3b
     e6a:	18fb      	adds	r3, r7, r3
     e6c:	781b      	ldrb	r3, [r3, #0]
}
     e6e:	0018      	movs	r0, r3
     e70:	46bd      	mov	sp, r7
     e72:	b013      	add	sp, #76	; 0x4c
     e74:	bd90      	pop	{r4, r7, pc}
     e76:	46c0      	nop			; (mov r8, r8)
     e78:	0000080d 	.word	0x0000080d
     e7c:	00000875 	.word	0x00000875
     e80:	0000085d 	.word	0x0000085d
     e84:	000021e1 	.word	0x000021e1
     e88:	00002225 	.word	0x00002225
     e8c:	000005c5 	.word	0x000005c5
     e90:	0000095d 	.word	0x0000095d
     e94:	000008d1 	.word	0x000008d1
     e98:	00000651 	.word	0x00000651
     e9c:	000024cd 	.word	0x000024cd
     ea0:	00001041 	.word	0x00001041
     ea4:	00001395 	.word	0x00001395
     ea8:	200000e8 	.word	0x200000e8

00000eac <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     eac:	b580      	push	{r7, lr}
     eae:	b084      	sub	sp, #16
     eb0:	af00      	add	r7, sp, #0
     eb2:	6078      	str	r0, [r7, #4]
     eb4:	000a      	movs	r2, r1
     eb6:	1cbb      	adds	r3, r7, #2
     eb8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     eba:	687b      	ldr	r3, [r7, #4]
     ebc:	681b      	ldr	r3, [r3, #0]
     ebe:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     ec0:	687b      	ldr	r3, [r7, #4]
     ec2:	79db      	ldrb	r3, [r3, #7]
     ec4:	2201      	movs	r2, #1
     ec6:	4053      	eors	r3, r2
     ec8:	b2db      	uxtb	r3, r3
     eca:	2b00      	cmp	r3, #0
     ecc:	d001      	beq.n	ed2 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
     ece:	231c      	movs	r3, #28
     ed0:	e017      	b.n	f02 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     ed2:	687b      	ldr	r3, [r7, #4]
     ed4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
     ed6:	b29b      	uxth	r3, r3
     ed8:	2b00      	cmp	r3, #0
     eda:	d001      	beq.n	ee0 <usart_write_wait+0x34>
		return STATUS_BUSY;
     edc:	2305      	movs	r3, #5
     ede:	e010      	b.n	f02 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     ee0:	687b      	ldr	r3, [r7, #4]
     ee2:	0018      	movs	r0, r3
     ee4:	4b09      	ldr	r3, [pc, #36]	; (f0c <usart_write_wait+0x60>)
     ee6:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     ee8:	68fb      	ldr	r3, [r7, #12]
     eea:	1cba      	adds	r2, r7, #2
     eec:	8812      	ldrh	r2, [r2, #0]
     eee:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     ef0:	46c0      	nop			; (mov r8, r8)
     ef2:	68fb      	ldr	r3, [r7, #12]
     ef4:	7e1b      	ldrb	r3, [r3, #24]
     ef6:	b2db      	uxtb	r3, r3
     ef8:	001a      	movs	r2, r3
     efa:	2302      	movs	r3, #2
     efc:	4013      	ands	r3, r2
     efe:	d0f8      	beq.n	ef2 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     f00:	2300      	movs	r3, #0
}
     f02:	0018      	movs	r0, r3
     f04:	46bd      	mov	sp, r7
     f06:	b004      	add	sp, #16
     f08:	bd80      	pop	{r7, pc}
     f0a:	46c0      	nop			; (mov r8, r8)
     f0c:	00000939 	.word	0x00000939

00000f10 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     f10:	b580      	push	{r7, lr}
     f12:	b084      	sub	sp, #16
     f14:	af00      	add	r7, sp, #0
     f16:	6078      	str	r0, [r7, #4]
     f18:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f1a:	687b      	ldr	r3, [r7, #4]
     f1c:	681b      	ldr	r3, [r3, #0]
     f1e:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     f20:	687b      	ldr	r3, [r7, #4]
     f22:	799b      	ldrb	r3, [r3, #6]
     f24:	2201      	movs	r2, #1
     f26:	4053      	eors	r3, r2
     f28:	b2db      	uxtb	r3, r3
     f2a:	2b00      	cmp	r3, #0
     f2c:	d001      	beq.n	f32 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
     f2e:	231c      	movs	r3, #28
     f30:	e05e      	b.n	ff0 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     f32:	687b      	ldr	r3, [r7, #4]
     f34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
     f36:	b29b      	uxth	r3, r3
     f38:	2b00      	cmp	r3, #0
     f3a:	d001      	beq.n	f40 <usart_read_wait+0x30>
		return STATUS_BUSY;
     f3c:	2305      	movs	r3, #5
     f3e:	e057      	b.n	ff0 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     f40:	68fb      	ldr	r3, [r7, #12]
     f42:	7e1b      	ldrb	r3, [r3, #24]
     f44:	b2db      	uxtb	r3, r3
     f46:	001a      	movs	r2, r3
     f48:	2304      	movs	r3, #4
     f4a:	4013      	ands	r3, r2
     f4c:	d101      	bne.n	f52 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
     f4e:	2305      	movs	r3, #5
     f50:	e04e      	b.n	ff0 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     f52:	687b      	ldr	r3, [r7, #4]
     f54:	0018      	movs	r0, r3
     f56:	4b28      	ldr	r3, [pc, #160]	; (ff8 <usart_read_wait+0xe8>)
     f58:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f5a:	68fb      	ldr	r3, [r7, #12]
     f5c:	8b5b      	ldrh	r3, [r3, #26]
     f5e:	b29b      	uxth	r3, r3
     f60:	b2da      	uxtb	r2, r3
     f62:	230b      	movs	r3, #11
     f64:	18fb      	adds	r3, r7, r3
     f66:	213f      	movs	r1, #63	; 0x3f
     f68:	400a      	ands	r2, r1
     f6a:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     f6c:	230b      	movs	r3, #11
     f6e:	18fb      	adds	r3, r7, r3
     f70:	781b      	ldrb	r3, [r3, #0]
     f72:	2b00      	cmp	r3, #0
     f74:	d036      	beq.n	fe4 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     f76:	230b      	movs	r3, #11
     f78:	18fb      	adds	r3, r7, r3
     f7a:	781b      	ldrb	r3, [r3, #0]
     f7c:	2202      	movs	r2, #2
     f7e:	4013      	ands	r3, r2
     f80:	d004      	beq.n	f8c <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     f82:	68fb      	ldr	r3, [r7, #12]
     f84:	2202      	movs	r2, #2
     f86:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
     f88:	231a      	movs	r3, #26
     f8a:	e031      	b.n	ff0 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     f8c:	230b      	movs	r3, #11
     f8e:	18fb      	adds	r3, r7, r3
     f90:	781b      	ldrb	r3, [r3, #0]
     f92:	2204      	movs	r2, #4
     f94:	4013      	ands	r3, r2
     f96:	d004      	beq.n	fa2 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     f98:	68fb      	ldr	r3, [r7, #12]
     f9a:	2204      	movs	r2, #4
     f9c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
     f9e:	231e      	movs	r3, #30
     fa0:	e026      	b.n	ff0 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     fa2:	230b      	movs	r3, #11
     fa4:	18fb      	adds	r3, r7, r3
     fa6:	781b      	ldrb	r3, [r3, #0]
     fa8:	2201      	movs	r2, #1
     faa:	4013      	ands	r3, r2
     fac:	d004      	beq.n	fb8 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     fae:	68fb      	ldr	r3, [r7, #12]
     fb0:	2201      	movs	r2, #1
     fb2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
     fb4:	2313      	movs	r3, #19
     fb6:	e01b      	b.n	ff0 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     fb8:	230b      	movs	r3, #11
     fba:	18fb      	adds	r3, r7, r3
     fbc:	781b      	ldrb	r3, [r3, #0]
     fbe:	2210      	movs	r2, #16
     fc0:	4013      	ands	r3, r2
     fc2:	d004      	beq.n	fce <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     fc4:	68fb      	ldr	r3, [r7, #12]
     fc6:	2210      	movs	r2, #16
     fc8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
     fca:	2342      	movs	r3, #66	; 0x42
     fcc:	e010      	b.n	ff0 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     fce:	230b      	movs	r3, #11
     fd0:	18fb      	adds	r3, r7, r3
     fd2:	781b      	ldrb	r3, [r3, #0]
     fd4:	2220      	movs	r2, #32
     fd6:	4013      	ands	r3, r2
     fd8:	d004      	beq.n	fe4 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     fda:	68fb      	ldr	r3, [r7, #12]
     fdc:	2220      	movs	r2, #32
     fde:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
     fe0:	2341      	movs	r3, #65	; 0x41
     fe2:	e005      	b.n	ff0 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     fe4:	68fb      	ldr	r3, [r7, #12]
     fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     fe8:	b29a      	uxth	r2, r3
     fea:	683b      	ldr	r3, [r7, #0]
     fec:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
     fee:	2300      	movs	r3, #0
}
     ff0:	0018      	movs	r0, r3
     ff2:	46bd      	mov	sp, r7
     ff4:	b004      	add	sp, #16
     ff6:	bd80      	pop	{r7, pc}
     ff8:	00000939 	.word	0x00000939

00000ffc <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     ffc:	b580      	push	{r7, lr}
     ffe:	b084      	sub	sp, #16
    1000:	af00      	add	r7, sp, #0
    1002:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1004:	687b      	ldr	r3, [r7, #4]
    1006:	681b      	ldr	r3, [r3, #0]
    1008:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    100a:	68fb      	ldr	r3, [r7, #12]
    100c:	69db      	ldr	r3, [r3, #28]
    100e:	1e5a      	subs	r2, r3, #1
    1010:	4193      	sbcs	r3, r2
    1012:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1014:	0018      	movs	r0, r3
    1016:	46bd      	mov	sp, r7
    1018:	b004      	add	sp, #16
    101a:	bd80      	pop	{r7, pc}

0000101c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    101c:	b580      	push	{r7, lr}
    101e:	b082      	sub	sp, #8
    1020:	af00      	add	r7, sp, #0
    1022:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1024:	46c0      	nop			; (mov r8, r8)
    1026:	687b      	ldr	r3, [r7, #4]
    1028:	0018      	movs	r0, r3
    102a:	4b04      	ldr	r3, [pc, #16]	; (103c <_usart_wait_for_sync+0x20>)
    102c:	4798      	blx	r3
    102e:	1e03      	subs	r3, r0, #0
    1030:	d1f9      	bne.n	1026 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	46bd      	mov	sp, r7
    1036:	b002      	add	sp, #8
    1038:	bd80      	pop	{r7, pc}
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	00000ffd 	.word	0x00000ffd

00001040 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1040:	b580      	push	{r7, lr}
    1042:	b088      	sub	sp, #32
    1044:	af00      	add	r7, sp, #0
    1046:	0002      	movs	r2, r0
    1048:	1dfb      	adds	r3, r7, #7
    104a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    104c:	1dfb      	adds	r3, r7, #7
    104e:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1050:	4ba3      	ldr	r3, [pc, #652]	; (12e0 <_usart_interrupt_handler+0x2a0>)
    1052:	0092      	lsls	r2, r2, #2
    1054:	58d3      	ldr	r3, [r2, r3]
    1056:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1058:	69bb      	ldr	r3, [r7, #24]
    105a:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    105c:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    105e:	69bb      	ldr	r3, [r7, #24]
    1060:	0018      	movs	r0, r3
    1062:	4ba0      	ldr	r3, [pc, #640]	; (12e4 <_usart_interrupt_handler+0x2a4>)
    1064:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1066:	697b      	ldr	r3, [r7, #20]
    1068:	7e1b      	ldrb	r3, [r3, #24]
    106a:	b2da      	uxtb	r2, r3
    106c:	2312      	movs	r3, #18
    106e:	18fb      	adds	r3, r7, r3
    1070:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    1072:	697b      	ldr	r3, [r7, #20]
    1074:	7d9b      	ldrb	r3, [r3, #22]
    1076:	b2db      	uxtb	r3, r3
    1078:	b29a      	uxth	r2, r3
    107a:	2312      	movs	r3, #18
    107c:	18fb      	adds	r3, r7, r3
    107e:	2112      	movs	r1, #18
    1080:	1879      	adds	r1, r7, r1
    1082:	8809      	ldrh	r1, [r1, #0]
    1084:	400a      	ands	r2, r1
    1086:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    1088:	69bb      	ldr	r3, [r7, #24]
    108a:	2230      	movs	r2, #48	; 0x30
    108c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    108e:	69ba      	ldr	r2, [r7, #24]
    1090:	2131      	movs	r1, #49	; 0x31
    1092:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1094:	4013      	ands	r3, r2
    1096:	b2da      	uxtb	r2, r3
    1098:	2310      	movs	r3, #16
    109a:	18fb      	adds	r3, r7, r3
    109c:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    109e:	2312      	movs	r3, #18
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	881b      	ldrh	r3, [r3, #0]
    10a4:	2201      	movs	r2, #1
    10a6:	4013      	ands	r3, r2
    10a8:	d044      	beq.n	1134 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    10aa:	69bb      	ldr	r3, [r7, #24]
    10ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    10ae:	b29b      	uxth	r3, r3
    10b0:	2b00      	cmp	r3, #0
    10b2:	d03c      	beq.n	112e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    10b4:	69bb      	ldr	r3, [r7, #24]
    10b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    10b8:	781b      	ldrb	r3, [r3, #0]
    10ba:	b2da      	uxtb	r2, r3
    10bc:	231c      	movs	r3, #28
    10be:	18fb      	adds	r3, r7, r3
    10c0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    10c2:	69bb      	ldr	r3, [r7, #24]
    10c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    10c6:	1c5a      	adds	r2, r3, #1
    10c8:	69bb      	ldr	r3, [r7, #24]
    10ca:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    10cc:	69bb      	ldr	r3, [r7, #24]
    10ce:	795b      	ldrb	r3, [r3, #5]
    10d0:	2b01      	cmp	r3, #1
    10d2:	d113      	bne.n	10fc <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    10d4:	69bb      	ldr	r3, [r7, #24]
    10d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    10d8:	781b      	ldrb	r3, [r3, #0]
    10da:	b2db      	uxtb	r3, r3
    10dc:	021b      	lsls	r3, r3, #8
    10de:	b21a      	sxth	r2, r3
    10e0:	231c      	movs	r3, #28
    10e2:	18fb      	adds	r3, r7, r3
    10e4:	2100      	movs	r1, #0
    10e6:	5e5b      	ldrsh	r3, [r3, r1]
    10e8:	4313      	orrs	r3, r2
    10ea:	b21a      	sxth	r2, r3
    10ec:	231c      	movs	r3, #28
    10ee:	18fb      	adds	r3, r7, r3
    10f0:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    10f2:	69bb      	ldr	r3, [r7, #24]
    10f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    10f6:	1c5a      	adds	r2, r3, #1
    10f8:	69bb      	ldr	r3, [r7, #24]
    10fa:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    10fc:	231c      	movs	r3, #28
    10fe:	18fb      	adds	r3, r7, r3
    1100:	881b      	ldrh	r3, [r3, #0]
    1102:	05db      	lsls	r3, r3, #23
    1104:	0ddb      	lsrs	r3, r3, #23
    1106:	b29a      	uxth	r2, r3
    1108:	697b      	ldr	r3, [r7, #20]
    110a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    110c:	69bb      	ldr	r3, [r7, #24]
    110e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1110:	b29b      	uxth	r3, r3
    1112:	3b01      	subs	r3, #1
    1114:	b29b      	uxth	r3, r3
    1116:	69ba      	ldr	r2, [r7, #24]
    1118:	1c19      	adds	r1, r3, #0
    111a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    111c:	2b00      	cmp	r3, #0
    111e:	d109      	bne.n	1134 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1120:	697b      	ldr	r3, [r7, #20]
    1122:	2201      	movs	r2, #1
    1124:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1126:	697b      	ldr	r3, [r7, #20]
    1128:	2202      	movs	r2, #2
    112a:	759a      	strb	r2, [r3, #22]
    112c:	e002      	b.n	1134 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    112e:	697b      	ldr	r3, [r7, #20]
    1130:	2201      	movs	r2, #1
    1132:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1134:	2312      	movs	r3, #18
    1136:	18fb      	adds	r3, r7, r3
    1138:	881b      	ldrh	r3, [r3, #0]
    113a:	2202      	movs	r2, #2
    113c:	4013      	ands	r3, r2
    113e:	d011      	beq.n	1164 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1140:	697b      	ldr	r3, [r7, #20]
    1142:	2202      	movs	r2, #2
    1144:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    1146:	69bb      	ldr	r3, [r7, #24]
    1148:	2233      	movs	r2, #51	; 0x33
    114a:	2100      	movs	r1, #0
    114c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    114e:	2310      	movs	r3, #16
    1150:	18fb      	adds	r3, r7, r3
    1152:	881b      	ldrh	r3, [r3, #0]
    1154:	2201      	movs	r2, #1
    1156:	4013      	ands	r3, r2
    1158:	d004      	beq.n	1164 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    115a:	69bb      	ldr	r3, [r7, #24]
    115c:	68db      	ldr	r3, [r3, #12]
    115e:	69ba      	ldr	r2, [r7, #24]
    1160:	0010      	movs	r0, r2
    1162:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1164:	2312      	movs	r3, #18
    1166:	18fb      	adds	r3, r7, r3
    1168:	881b      	ldrh	r3, [r3, #0]
    116a:	2204      	movs	r2, #4
    116c:	4013      	ands	r3, r2
    116e:	d100      	bne.n	1172 <_usart_interrupt_handler+0x132>
    1170:	e0bd      	b.n	12ee <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    1172:	69bb      	ldr	r3, [r7, #24]
    1174:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1176:	b29b      	uxth	r3, r3
    1178:	2b00      	cmp	r3, #0
    117a:	d100      	bne.n	117e <_usart_interrupt_handler+0x13e>
    117c:	e0b4      	b.n	12e8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    117e:	697b      	ldr	r3, [r7, #20]
    1180:	8b5b      	ldrh	r3, [r3, #26]
    1182:	b29b      	uxth	r3, r3
    1184:	b2da      	uxtb	r2, r3
    1186:	231f      	movs	r3, #31
    1188:	18fb      	adds	r3, r7, r3
    118a:	213f      	movs	r1, #63	; 0x3f
    118c:	400a      	ands	r2, r1
    118e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1190:	231f      	movs	r3, #31
    1192:	18fb      	adds	r3, r7, r3
    1194:	781b      	ldrb	r3, [r3, #0]
    1196:	2208      	movs	r2, #8
    1198:	4013      	ands	r3, r2
    119a:	d007      	beq.n	11ac <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    119c:	231f      	movs	r3, #31
    119e:	18fb      	adds	r3, r7, r3
    11a0:	221f      	movs	r2, #31
    11a2:	18ba      	adds	r2, r7, r2
    11a4:	7812      	ldrb	r2, [r2, #0]
    11a6:	2108      	movs	r1, #8
    11a8:	438a      	bics	r2, r1
    11aa:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    11ac:	231f      	movs	r3, #31
    11ae:	18fb      	adds	r3, r7, r3
    11b0:	781b      	ldrb	r3, [r3, #0]
    11b2:	2b00      	cmp	r3, #0
    11b4:	d050      	beq.n	1258 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    11b6:	231f      	movs	r3, #31
    11b8:	18fb      	adds	r3, r7, r3
    11ba:	781b      	ldrb	r3, [r3, #0]
    11bc:	2202      	movs	r2, #2
    11be:	4013      	ands	r3, r2
    11c0:	d007      	beq.n	11d2 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    11c2:	69bb      	ldr	r3, [r7, #24]
    11c4:	2232      	movs	r2, #50	; 0x32
    11c6:	211a      	movs	r1, #26
    11c8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    11ca:	697b      	ldr	r3, [r7, #20]
    11cc:	2202      	movs	r2, #2
    11ce:	835a      	strh	r2, [r3, #26]
    11d0:	e036      	b.n	1240 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    11d2:	231f      	movs	r3, #31
    11d4:	18fb      	adds	r3, r7, r3
    11d6:	781b      	ldrb	r3, [r3, #0]
    11d8:	2204      	movs	r2, #4
    11da:	4013      	ands	r3, r2
    11dc:	d007      	beq.n	11ee <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	2232      	movs	r2, #50	; 0x32
    11e2:	211e      	movs	r1, #30
    11e4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    11e6:	697b      	ldr	r3, [r7, #20]
    11e8:	2204      	movs	r2, #4
    11ea:	835a      	strh	r2, [r3, #26]
    11ec:	e028      	b.n	1240 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    11ee:	231f      	movs	r3, #31
    11f0:	18fb      	adds	r3, r7, r3
    11f2:	781b      	ldrb	r3, [r3, #0]
    11f4:	2201      	movs	r2, #1
    11f6:	4013      	ands	r3, r2
    11f8:	d007      	beq.n	120a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    11fa:	69bb      	ldr	r3, [r7, #24]
    11fc:	2232      	movs	r2, #50	; 0x32
    11fe:	2113      	movs	r1, #19
    1200:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1202:	697b      	ldr	r3, [r7, #20]
    1204:	2201      	movs	r2, #1
    1206:	835a      	strh	r2, [r3, #26]
    1208:	e01a      	b.n	1240 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    120a:	231f      	movs	r3, #31
    120c:	18fb      	adds	r3, r7, r3
    120e:	781b      	ldrb	r3, [r3, #0]
    1210:	2210      	movs	r2, #16
    1212:	4013      	ands	r3, r2
    1214:	d007      	beq.n	1226 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1216:	69bb      	ldr	r3, [r7, #24]
    1218:	2232      	movs	r2, #50	; 0x32
    121a:	2142      	movs	r1, #66	; 0x42
    121c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    121e:	697b      	ldr	r3, [r7, #20]
    1220:	2210      	movs	r2, #16
    1222:	835a      	strh	r2, [r3, #26]
    1224:	e00c      	b.n	1240 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1226:	231f      	movs	r3, #31
    1228:	18fb      	adds	r3, r7, r3
    122a:	781b      	ldrb	r3, [r3, #0]
    122c:	2220      	movs	r2, #32
    122e:	4013      	ands	r3, r2
    1230:	d006      	beq.n	1240 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1232:	69bb      	ldr	r3, [r7, #24]
    1234:	2232      	movs	r2, #50	; 0x32
    1236:	2141      	movs	r1, #65	; 0x41
    1238:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    123a:	697b      	ldr	r3, [r7, #20]
    123c:	2220      	movs	r2, #32
    123e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    1240:	2310      	movs	r3, #16
    1242:	18fb      	adds	r3, r7, r3
    1244:	881b      	ldrh	r3, [r3, #0]
    1246:	2204      	movs	r2, #4
    1248:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    124a:	d050      	beq.n	12ee <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    124c:	69bb      	ldr	r3, [r7, #24]
    124e:	695b      	ldr	r3, [r3, #20]
    1250:	69ba      	ldr	r2, [r7, #24]
    1252:	0010      	movs	r0, r2
    1254:	4798      	blx	r3
    1256:	e04a      	b.n	12ee <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1258:	697b      	ldr	r3, [r7, #20]
    125a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    125c:	b29a      	uxth	r2, r3
    125e:	230e      	movs	r3, #14
    1260:	18fb      	adds	r3, r7, r3
    1262:	05d2      	lsls	r2, r2, #23
    1264:	0dd2      	lsrs	r2, r2, #23
    1266:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1268:	69bb      	ldr	r3, [r7, #24]
    126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    126c:	220e      	movs	r2, #14
    126e:	18ba      	adds	r2, r7, r2
    1270:	8812      	ldrh	r2, [r2, #0]
    1272:	b2d2      	uxtb	r2, r2
    1274:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1276:	69bb      	ldr	r3, [r7, #24]
    1278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    127a:	1c5a      	adds	r2, r3, #1
    127c:	69bb      	ldr	r3, [r7, #24]
    127e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1280:	69bb      	ldr	r3, [r7, #24]
    1282:	795b      	ldrb	r3, [r3, #5]
    1284:	2b01      	cmp	r3, #1
    1286:	d10d      	bne.n	12a4 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1288:	69bb      	ldr	r3, [r7, #24]
    128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    128c:	220e      	movs	r2, #14
    128e:	18ba      	adds	r2, r7, r2
    1290:	8812      	ldrh	r2, [r2, #0]
    1292:	0a12      	lsrs	r2, r2, #8
    1294:	b292      	uxth	r2, r2
    1296:	b2d2      	uxtb	r2, r2
    1298:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    129a:	69bb      	ldr	r3, [r7, #24]
    129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    129e:	1c5a      	adds	r2, r3, #1
    12a0:	69bb      	ldr	r3, [r7, #24]
    12a2:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    12a4:	69bb      	ldr	r3, [r7, #24]
    12a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    12a8:	b29b      	uxth	r3, r3
    12aa:	3b01      	subs	r3, #1
    12ac:	b29b      	uxth	r3, r3
    12ae:	69ba      	ldr	r2, [r7, #24]
    12b0:	1c19      	adds	r1, r3, #0
    12b2:	8591      	strh	r1, [r2, #44]	; 0x2c
    12b4:	2b00      	cmp	r3, #0
    12b6:	d11a      	bne.n	12ee <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    12b8:	697b      	ldr	r3, [r7, #20]
    12ba:	2204      	movs	r2, #4
    12bc:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    12be:	69bb      	ldr	r3, [r7, #24]
    12c0:	2232      	movs	r2, #50	; 0x32
    12c2:	2100      	movs	r1, #0
    12c4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    12c6:	2310      	movs	r3, #16
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	881b      	ldrh	r3, [r3, #0]
    12cc:	2202      	movs	r2, #2
    12ce:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    12d0:	d00d      	beq.n	12ee <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    12d2:	69bb      	ldr	r3, [r7, #24]
    12d4:	691b      	ldr	r3, [r3, #16]
    12d6:	69ba      	ldr	r2, [r7, #24]
    12d8:	0010      	movs	r0, r2
    12da:	4798      	blx	r3
    12dc:	e007      	b.n	12ee <_usart_interrupt_handler+0x2ae>
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	200000e8 	.word	0x200000e8
    12e4:	0000101d 	.word	0x0000101d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    12e8:	697b      	ldr	r3, [r7, #20]
    12ea:	2204      	movs	r2, #4
    12ec:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    12ee:	2312      	movs	r3, #18
    12f0:	18fb      	adds	r3, r7, r3
    12f2:	881b      	ldrh	r3, [r3, #0]
    12f4:	2210      	movs	r2, #16
    12f6:	4013      	ands	r3, r2
    12f8:	d010      	beq.n	131c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    12fa:	697b      	ldr	r3, [r7, #20]
    12fc:	2210      	movs	r2, #16
    12fe:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1300:	697b      	ldr	r3, [r7, #20]
    1302:	2210      	movs	r2, #16
    1304:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1306:	2310      	movs	r3, #16
    1308:	18fb      	adds	r3, r7, r3
    130a:	881b      	ldrh	r3, [r3, #0]
    130c:	2210      	movs	r2, #16
    130e:	4013      	ands	r3, r2
    1310:	d004      	beq.n	131c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1312:	69bb      	ldr	r3, [r7, #24]
    1314:	69db      	ldr	r3, [r3, #28]
    1316:	69ba      	ldr	r2, [r7, #24]
    1318:	0010      	movs	r0, r2
    131a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    131c:	2312      	movs	r3, #18
    131e:	18fb      	adds	r3, r7, r3
    1320:	881b      	ldrh	r3, [r3, #0]
    1322:	2220      	movs	r2, #32
    1324:	4013      	ands	r3, r2
    1326:	d010      	beq.n	134a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1328:	697b      	ldr	r3, [r7, #20]
    132a:	2220      	movs	r2, #32
    132c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    132e:	697b      	ldr	r3, [r7, #20]
    1330:	2220      	movs	r2, #32
    1332:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1334:	2310      	movs	r3, #16
    1336:	18fb      	adds	r3, r7, r3
    1338:	881b      	ldrh	r3, [r3, #0]
    133a:	2208      	movs	r2, #8
    133c:	4013      	ands	r3, r2
    133e:	d004      	beq.n	134a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1340:	69bb      	ldr	r3, [r7, #24]
    1342:	699b      	ldr	r3, [r3, #24]
    1344:	69ba      	ldr	r2, [r7, #24]
    1346:	0010      	movs	r0, r2
    1348:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    134a:	2312      	movs	r3, #18
    134c:	18fb      	adds	r3, r7, r3
    134e:	881b      	ldrh	r3, [r3, #0]
    1350:	2208      	movs	r2, #8
    1352:	4013      	ands	r3, r2
    1354:	d010      	beq.n	1378 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1356:	697b      	ldr	r3, [r7, #20]
    1358:	2208      	movs	r2, #8
    135a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    135c:	697b      	ldr	r3, [r7, #20]
    135e:	2208      	movs	r2, #8
    1360:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1362:	2310      	movs	r3, #16
    1364:	18fb      	adds	r3, r7, r3
    1366:	881b      	ldrh	r3, [r3, #0]
    1368:	2220      	movs	r2, #32
    136a:	4013      	ands	r3, r2
    136c:	d004      	beq.n	1378 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    136e:	69bb      	ldr	r3, [r7, #24]
    1370:	6a1b      	ldr	r3, [r3, #32]
    1372:	69ba      	ldr	r2, [r7, #24]
    1374:	0010      	movs	r0, r2
    1376:	4798      	blx	r3
		}
	}
#endif
}
    1378:	46c0      	nop			; (mov r8, r8)
    137a:	46bd      	mov	sp, r7
    137c:	b008      	add	sp, #32
    137e:	bd80      	pop	{r7, pc}

00001380 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    1380:	b580      	push	{r7, lr}
    1382:	b082      	sub	sp, #8
    1384:	af00      	add	r7, sp, #0
    1386:	0002      	movs	r2, r0
    1388:	1dfb      	adds	r3, r7, #7
    138a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    138c:	46c0      	nop			; (mov r8, r8)
    138e:	46bd      	mov	sp, r7
    1390:	b002      	add	sp, #8
    1392:	bd80      	pop	{r7, pc}

00001394 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1394:	b580      	push	{r7, lr}
    1396:	b084      	sub	sp, #16
    1398:	af00      	add	r7, sp, #0
    139a:	0002      	movs	r2, r0
    139c:	6039      	str	r1, [r7, #0]
    139e:	1dfb      	adds	r3, r7, #7
    13a0:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    13a2:	4b13      	ldr	r3, [pc, #76]	; (13f0 <_sercom_set_handler+0x5c>)
    13a4:	781b      	ldrb	r3, [r3, #0]
    13a6:	2201      	movs	r2, #1
    13a8:	4053      	eors	r3, r2
    13aa:	b2db      	uxtb	r3, r3
    13ac:	2b00      	cmp	r3, #0
    13ae:	d015      	beq.n	13dc <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13b0:	2300      	movs	r3, #0
    13b2:	60fb      	str	r3, [r7, #12]
    13b4:	e00c      	b.n	13d0 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    13b6:	4b0f      	ldr	r3, [pc, #60]	; (13f4 <_sercom_set_handler+0x60>)
    13b8:	68fa      	ldr	r2, [r7, #12]
    13ba:	0092      	lsls	r2, r2, #2
    13bc:	490e      	ldr	r1, [pc, #56]	; (13f8 <_sercom_set_handler+0x64>)
    13be:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    13c0:	4b0e      	ldr	r3, [pc, #56]	; (13fc <_sercom_set_handler+0x68>)
    13c2:	68fa      	ldr	r2, [r7, #12]
    13c4:	0092      	lsls	r2, r2, #2
    13c6:	2100      	movs	r1, #0
    13c8:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13ca:	68fb      	ldr	r3, [r7, #12]
    13cc:	3301      	adds	r3, #1
    13ce:	60fb      	str	r3, [r7, #12]
    13d0:	68fb      	ldr	r3, [r7, #12]
    13d2:	2b05      	cmp	r3, #5
    13d4:	d9ef      	bls.n	13b6 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    13d6:	4b06      	ldr	r3, [pc, #24]	; (13f0 <_sercom_set_handler+0x5c>)
    13d8:	2201      	movs	r2, #1
    13da:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    13dc:	1dfb      	adds	r3, r7, #7
    13de:	781a      	ldrb	r2, [r3, #0]
    13e0:	4b04      	ldr	r3, [pc, #16]	; (13f4 <_sercom_set_handler+0x60>)
    13e2:	0092      	lsls	r2, r2, #2
    13e4:	6839      	ldr	r1, [r7, #0]
    13e6:	50d1      	str	r1, [r2, r3]
}
    13e8:	46c0      	nop			; (mov r8, r8)
    13ea:	46bd      	mov	sp, r7
    13ec:	b004      	add	sp, #16
    13ee:	bd80      	pop	{r7, pc}
    13f0:	2000008e 	.word	0x2000008e
    13f4:	20000090 	.word	0x20000090
    13f8:	00001381 	.word	0x00001381
    13fc:	200000e8 	.word	0x200000e8

00001400 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1400:	b590      	push	{r4, r7, lr}
    1402:	b085      	sub	sp, #20
    1404:	af00      	add	r7, sp, #0
    1406:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1408:	2308      	movs	r3, #8
    140a:	18fa      	adds	r2, r7, r3
    140c:	4b0c      	ldr	r3, [pc, #48]	; (1440 <_sercom_get_interrupt_vector+0x40>)
    140e:	0010      	movs	r0, r2
    1410:	0019      	movs	r1, r3
    1412:	2306      	movs	r3, #6
    1414:	001a      	movs	r2, r3
    1416:	4b0b      	ldr	r3, [pc, #44]	; (1444 <_sercom_get_interrupt_vector+0x44>)
    1418:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    141a:	230f      	movs	r3, #15
    141c:	18fc      	adds	r4, r7, r3
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	0018      	movs	r0, r3
    1422:	4b09      	ldr	r3, [pc, #36]	; (1448 <_sercom_get_interrupt_vector+0x48>)
    1424:	4798      	blx	r3
    1426:	0003      	movs	r3, r0
    1428:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    142a:	230f      	movs	r3, #15
    142c:	18fb      	adds	r3, r7, r3
    142e:	781b      	ldrb	r3, [r3, #0]
    1430:	2208      	movs	r2, #8
    1432:	18ba      	adds	r2, r7, r2
    1434:	5cd3      	ldrb	r3, [r2, r3]
    1436:	b25b      	sxtb	r3, r3
}
    1438:	0018      	movs	r0, r3
    143a:	46bd      	mov	sp, r7
    143c:	b005      	add	sp, #20
    143e:	bd90      	pop	{r4, r7, pc}
    1440:	000040a8 	.word	0x000040a8
    1444:	00002fcd 	.word	0x00002fcd
    1448:	0000080d 	.word	0x0000080d

0000144c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    144c:	b580      	push	{r7, lr}
    144e:	af00      	add	r7, sp, #0
    1450:	4b03      	ldr	r3, [pc, #12]	; (1460 <SERCOM0_Handler+0x14>)
    1452:	681b      	ldr	r3, [r3, #0]
    1454:	2000      	movs	r0, #0
    1456:	4798      	blx	r3
    1458:	46c0      	nop			; (mov r8, r8)
    145a:	46bd      	mov	sp, r7
    145c:	bd80      	pop	{r7, pc}
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	20000090 	.word	0x20000090

00001464 <SERCOM1_Handler>:
    1464:	b580      	push	{r7, lr}
    1466:	af00      	add	r7, sp, #0
    1468:	4b03      	ldr	r3, [pc, #12]	; (1478 <SERCOM1_Handler+0x14>)
    146a:	685b      	ldr	r3, [r3, #4]
    146c:	2001      	movs	r0, #1
    146e:	4798      	blx	r3
    1470:	46c0      	nop			; (mov r8, r8)
    1472:	46bd      	mov	sp, r7
    1474:	bd80      	pop	{r7, pc}
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	20000090 	.word	0x20000090

0000147c <SERCOM2_Handler>:
    147c:	b580      	push	{r7, lr}
    147e:	af00      	add	r7, sp, #0
    1480:	4b03      	ldr	r3, [pc, #12]	; (1490 <SERCOM2_Handler+0x14>)
    1482:	689b      	ldr	r3, [r3, #8]
    1484:	2002      	movs	r0, #2
    1486:	4798      	blx	r3
    1488:	46c0      	nop			; (mov r8, r8)
    148a:	46bd      	mov	sp, r7
    148c:	bd80      	pop	{r7, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	20000090 	.word	0x20000090

00001494 <SERCOM3_Handler>:
    1494:	b580      	push	{r7, lr}
    1496:	af00      	add	r7, sp, #0
    1498:	4b03      	ldr	r3, [pc, #12]	; (14a8 <SERCOM3_Handler+0x14>)
    149a:	68db      	ldr	r3, [r3, #12]
    149c:	2003      	movs	r0, #3
    149e:	4798      	blx	r3
    14a0:	46c0      	nop			; (mov r8, r8)
    14a2:	46bd      	mov	sp, r7
    14a4:	bd80      	pop	{r7, pc}
    14a6:	46c0      	nop			; (mov r8, r8)
    14a8:	20000090 	.word	0x20000090

000014ac <SERCOM4_Handler>:
    14ac:	b580      	push	{r7, lr}
    14ae:	af00      	add	r7, sp, #0
    14b0:	4b03      	ldr	r3, [pc, #12]	; (14c0 <SERCOM4_Handler+0x14>)
    14b2:	691b      	ldr	r3, [r3, #16]
    14b4:	2004      	movs	r0, #4
    14b6:	4798      	blx	r3
    14b8:	46c0      	nop			; (mov r8, r8)
    14ba:	46bd      	mov	sp, r7
    14bc:	bd80      	pop	{r7, pc}
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	20000090 	.word	0x20000090

000014c4 <SERCOM5_Handler>:
    14c4:	b580      	push	{r7, lr}
    14c6:	af00      	add	r7, sp, #0
    14c8:	4b03      	ldr	r3, [pc, #12]	; (14d8 <SERCOM5_Handler+0x14>)
    14ca:	695b      	ldr	r3, [r3, #20]
    14cc:	2005      	movs	r0, #5
    14ce:	4798      	blx	r3
    14d0:	46c0      	nop			; (mov r8, r8)
    14d2:	46bd      	mov	sp, r7
    14d4:	bd80      	pop	{r7, pc}
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	20000090 	.word	0x20000090

000014dc <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    14dc:	b580      	push	{r7, lr}
    14de:	b082      	sub	sp, #8
    14e0:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    14e2:	4b07      	ldr	r3, [pc, #28]	; (1500 <nvm_is_ready+0x24>)
    14e4:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    14e6:	687b      	ldr	r3, [r7, #4]
    14e8:	7d1b      	ldrb	r3, [r3, #20]
    14ea:	b2db      	uxtb	r3, r3
    14ec:	001a      	movs	r2, r3
    14ee:	2301      	movs	r3, #1
    14f0:	4013      	ands	r3, r2
    14f2:	1e5a      	subs	r2, r3, #1
    14f4:	4193      	sbcs	r3, r2
    14f6:	b2db      	uxtb	r3, r3
}
    14f8:	0018      	movs	r0, r3
    14fa:	46bd      	mov	sp, r7
    14fc:	b002      	add	sp, #8
    14fe:	bd80      	pop	{r7, pc}
    1500:	41004000 	.word	0x41004000

00001504 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1504:	b580      	push	{r7, lr}
    1506:	b082      	sub	sp, #8
    1508:	af00      	add	r7, sp, #0
    150a:	0002      	movs	r2, r0
    150c:	6039      	str	r1, [r7, #0]
    150e:	1dfb      	adds	r3, r7, #7
    1510:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1512:	1dfb      	adds	r3, r7, #7
    1514:	781b      	ldrb	r3, [r3, #0]
    1516:	2b01      	cmp	r3, #1
    1518:	d00a      	beq.n	1530 <system_apb_clock_set_mask+0x2c>
    151a:	2b02      	cmp	r3, #2
    151c:	d00f      	beq.n	153e <system_apb_clock_set_mask+0x3a>
    151e:	2b00      	cmp	r3, #0
    1520:	d114      	bne.n	154c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1522:	4b0e      	ldr	r3, [pc, #56]	; (155c <system_apb_clock_set_mask+0x58>)
    1524:	4a0d      	ldr	r2, [pc, #52]	; (155c <system_apb_clock_set_mask+0x58>)
    1526:	6991      	ldr	r1, [r2, #24]
    1528:	683a      	ldr	r2, [r7, #0]
    152a:	430a      	orrs	r2, r1
    152c:	619a      	str	r2, [r3, #24]
			break;
    152e:	e00f      	b.n	1550 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1530:	4b0a      	ldr	r3, [pc, #40]	; (155c <system_apb_clock_set_mask+0x58>)
    1532:	4a0a      	ldr	r2, [pc, #40]	; (155c <system_apb_clock_set_mask+0x58>)
    1534:	69d1      	ldr	r1, [r2, #28]
    1536:	683a      	ldr	r2, [r7, #0]
    1538:	430a      	orrs	r2, r1
    153a:	61da      	str	r2, [r3, #28]
			break;
    153c:	e008      	b.n	1550 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    153e:	4b07      	ldr	r3, [pc, #28]	; (155c <system_apb_clock_set_mask+0x58>)
    1540:	4a06      	ldr	r2, [pc, #24]	; (155c <system_apb_clock_set_mask+0x58>)
    1542:	6a11      	ldr	r1, [r2, #32]
    1544:	683a      	ldr	r2, [r7, #0]
    1546:	430a      	orrs	r2, r1
    1548:	621a      	str	r2, [r3, #32]
			break;
    154a:	e001      	b.n	1550 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    154c:	2317      	movs	r3, #23
    154e:	e000      	b.n	1552 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1550:	2300      	movs	r3, #0
}
    1552:	0018      	movs	r0, r3
    1554:	46bd      	mov	sp, r7
    1556:	b002      	add	sp, #8
    1558:	bd80      	pop	{r7, pc}
    155a:	46c0      	nop			; (mov r8, r8)
    155c:	40000400 	.word	0x40000400

00001560 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    1560:	b580      	push	{r7, lr}
    1562:	b084      	sub	sp, #16
    1564:	af00      	add	r7, sp, #0
    1566:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1568:	4b2f      	ldr	r3, [pc, #188]	; (1628 <nvm_set_config+0xc8>)
    156a:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    156c:	2104      	movs	r1, #4
    156e:	2001      	movs	r0, #1
    1570:	4b2e      	ldr	r3, [pc, #184]	; (162c <nvm_set_config+0xcc>)
    1572:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1574:	68fb      	ldr	r3, [r7, #12]
    1576:	2220      	movs	r2, #32
    1578:	32ff      	adds	r2, #255	; 0xff
    157a:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    157c:	4b2c      	ldr	r3, [pc, #176]	; (1630 <nvm_set_config+0xd0>)
    157e:	4798      	blx	r3
    1580:	0003      	movs	r3, r0
    1582:	001a      	movs	r2, r3
    1584:	2301      	movs	r3, #1
    1586:	4053      	eors	r3, r2
    1588:	b2db      	uxtb	r3, r3
    158a:	2b00      	cmp	r3, #0
    158c:	d001      	beq.n	1592 <nvm_set_config+0x32>
		return STATUS_BUSY;
    158e:	2305      	movs	r3, #5
    1590:	e045      	b.n	161e <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1592:	687b      	ldr	r3, [r7, #4]
    1594:	781b      	ldrb	r3, [r3, #0]
    1596:	021b      	lsls	r3, r3, #8
    1598:	001a      	movs	r2, r3
    159a:	23c0      	movs	r3, #192	; 0xc0
    159c:	009b      	lsls	r3, r3, #2
    159e:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    15a0:	687b      	ldr	r3, [r7, #4]
    15a2:	785b      	ldrb	r3, [r3, #1]
    15a4:	01db      	lsls	r3, r3, #7
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    15a6:	0019      	movs	r1, r3
    15a8:	23ff      	movs	r3, #255	; 0xff
    15aa:	400b      	ands	r3, r1
    15ac:	431a      	orrs	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    15ae:	687b      	ldr	r3, [r7, #4]
    15b0:	789b      	ldrb	r3, [r3, #2]
    15b2:	005b      	lsls	r3, r3, #1
    15b4:	0019      	movs	r1, r3
    15b6:	231e      	movs	r3, #30
    15b8:	400b      	ands	r3, r1

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    15ba:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	78db      	ldrb	r3, [r3, #3]
    15c0:	049b      	lsls	r3, r3, #18
#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    15c2:	0019      	movs	r1, r3
    15c4:	2380      	movs	r3, #128	; 0x80
    15c6:	02db      	lsls	r3, r3, #11
    15c8:	400b      	ands	r3, r1
    15ca:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    15cc:	687b      	ldr	r3, [r7, #4]
    15ce:	791b      	ldrb	r3, [r3, #4]
    15d0:	041b      	lsls	r3, r3, #16
    15d2:	0019      	movs	r1, r3
    15d4:	23c0      	movs	r3, #192	; 0xc0
    15d6:	029b      	lsls	r3, r3, #10
    15d8:	400b      	ands	r3, r1
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    15da:	431a      	orrs	r2, r3
		return STATUS_BUSY;
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
    15dc:	68fb      	ldr	r3, [r7, #12]
    15de:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    15e0:	68fb      	ldr	r3, [r7, #12]
    15e2:	689b      	ldr	r3, [r3, #8]
    15e4:	035b      	lsls	r3, r3, #13
    15e6:	0f5b      	lsrs	r3, r3, #29
    15e8:	b2db      	uxtb	r3, r3
    15ea:	001a      	movs	r2, r3
    15ec:	2308      	movs	r3, #8
    15ee:	4093      	lsls	r3, r2
    15f0:	b29a      	uxth	r2, r3
    15f2:	4b10      	ldr	r3, [pc, #64]	; (1634 <nvm_set_config+0xd4>)
    15f4:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    15f6:	68fb      	ldr	r3, [r7, #12]
    15f8:	689b      	ldr	r3, [r3, #8]
    15fa:	b29a      	uxth	r2, r3
    15fc:	4b0d      	ldr	r3, [pc, #52]	; (1634 <nvm_set_config+0xd4>)
    15fe:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    1600:	687b      	ldr	r3, [r7, #4]
    1602:	785a      	ldrb	r2, [r3, #1]
    1604:	4b0b      	ldr	r3, [pc, #44]	; (1634 <nvm_set_config+0xd4>)
    1606:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1608:	68fb      	ldr	r3, [r7, #12]
    160a:	8b1b      	ldrh	r3, [r3, #24]
    160c:	b29b      	uxth	r3, r3
    160e:	001a      	movs	r2, r3
    1610:	2380      	movs	r3, #128	; 0x80
    1612:	005b      	lsls	r3, r3, #1
    1614:	4013      	ands	r3, r2
    1616:	d001      	beq.n	161c <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    1618:	2310      	movs	r3, #16
    161a:	e000      	b.n	161e <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    161c:	2300      	movs	r3, #0
}
    161e:	0018      	movs	r0, r3
    1620:	46bd      	mov	sp, r7
    1622:	b004      	add	sp, #16
    1624:	bd80      	pop	{r7, pc}
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	41004000 	.word	0x41004000
    162c:	00001505 	.word	0x00001505
    1630:	000014dd 	.word	0x000014dd
    1634:	200000a8 	.word	0x200000a8

00001638 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    1638:	b580      	push	{r7, lr}
    163a:	b086      	sub	sp, #24
    163c:	af00      	add	r7, sp, #0
    163e:	60b9      	str	r1, [r7, #8]
    1640:	607a      	str	r2, [r7, #4]
    1642:	230f      	movs	r3, #15
    1644:	18fb      	adds	r3, r7, r3
    1646:	1c02      	adds	r2, r0, #0
    1648:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    164a:	4b3a      	ldr	r3, [pc, #232]	; (1734 <nvm_execute_command+0xfc>)
    164c:	881b      	ldrh	r3, [r3, #0]
    164e:	001a      	movs	r2, r3
    1650:	4b38      	ldr	r3, [pc, #224]	; (1734 <nvm_execute_command+0xfc>)
    1652:	885b      	ldrh	r3, [r3, #2]
    1654:	435a      	muls	r2, r3
    1656:	68bb      	ldr	r3, [r7, #8]
    1658:	429a      	cmp	r2, r3
    165a:	d209      	bcs.n	1670 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    165c:	68bb      	ldr	r3, [r7, #8]
    165e:	4a36      	ldr	r2, [pc, #216]	; (1738 <nvm_execute_command+0x100>)
    1660:	4293      	cmp	r3, r2
    1662:	d903      	bls.n	166c <nvm_execute_command+0x34>
    1664:	68bb      	ldr	r3, [r7, #8]
    1666:	4a35      	ldr	r2, [pc, #212]	; (173c <nvm_execute_command+0x104>)
    1668:	4293      	cmp	r3, r2
    166a:	d901      	bls.n	1670 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    166c:	2318      	movs	r3, #24
    166e:	e05c      	b.n	172a <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1670:	4b33      	ldr	r3, [pc, #204]	; (1740 <nvm_execute_command+0x108>)
    1672:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    1674:	697b      	ldr	r3, [r7, #20]
    1676:	685b      	ldr	r3, [r3, #4]
    1678:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    167a:	693b      	ldr	r3, [r7, #16]
    167c:	2280      	movs	r2, #128	; 0x80
    167e:	02d2      	lsls	r2, r2, #11
    1680:	431a      	orrs	r2, r3
    1682:	697b      	ldr	r3, [r7, #20]
    1684:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1686:	697b      	ldr	r3, [r7, #20]
    1688:	2220      	movs	r2, #32
    168a:	32ff      	adds	r2, #255	; 0xff
    168c:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    168e:	4b2d      	ldr	r3, [pc, #180]	; (1744 <nvm_execute_command+0x10c>)
    1690:	4798      	blx	r3
    1692:	0003      	movs	r3, r0
    1694:	001a      	movs	r2, r3
    1696:	2301      	movs	r3, #1
    1698:	4053      	eors	r3, r2
    169a:	b2db      	uxtb	r3, r3
    169c:	2b00      	cmp	r3, #0
    169e:	d004      	beq.n	16aa <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    16a0:	697b      	ldr	r3, [r7, #20]
    16a2:	693a      	ldr	r2, [r7, #16]
    16a4:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    16a6:	2305      	movs	r3, #5
    16a8:	e03f      	b.n	172a <nvm_execute_command+0xf2>
	}

	switch (command) {
    16aa:	230f      	movs	r3, #15
    16ac:	18fb      	adds	r3, r7, r3
    16ae:	781b      	ldrb	r3, [r3, #0]
    16b0:	2b45      	cmp	r3, #69	; 0x45
    16b2:	d81d      	bhi.n	16f0 <nvm_execute_command+0xb8>
    16b4:	009a      	lsls	r2, r3, #2
    16b6:	4b24      	ldr	r3, [pc, #144]	; (1748 <nvm_execute_command+0x110>)
    16b8:	18d3      	adds	r3, r2, r3
    16ba:	681b      	ldr	r3, [r3, #0]
    16bc:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    16be:	697b      	ldr	r3, [r7, #20]
    16c0:	8b1b      	ldrh	r3, [r3, #24]
    16c2:	b29b      	uxth	r3, r3
    16c4:	001a      	movs	r2, r3
    16c6:	2380      	movs	r3, #128	; 0x80
    16c8:	005b      	lsls	r3, r3, #1
    16ca:	4013      	ands	r3, r2
    16cc:	d004      	beq.n	16d8 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    16ce:	697b      	ldr	r3, [r7, #20]
    16d0:	693a      	ldr	r2, [r7, #16]
    16d2:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    16d4:	2310      	movs	r3, #16
    16d6:	e028      	b.n	172a <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    16d8:	68bb      	ldr	r3, [r7, #8]
    16da:	089b      	lsrs	r3, r3, #2
    16dc:	005a      	lsls	r2, r3, #1
    16de:	697b      	ldr	r3, [r7, #20]
    16e0:	61da      	str	r2, [r3, #28]
			break;
    16e2:	e00b      	b.n	16fc <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    16e4:	68bb      	ldr	r3, [r7, #8]
    16e6:	089b      	lsrs	r3, r3, #2
    16e8:	005a      	lsls	r2, r3, #1
    16ea:	697b      	ldr	r3, [r7, #20]
    16ec:	61da      	str	r2, [r3, #28]
			break;
    16ee:	e005      	b.n	16fc <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    16f0:	697b      	ldr	r3, [r7, #20]
    16f2:	693a      	ldr	r2, [r7, #16]
    16f4:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    16f6:	2317      	movs	r3, #23
    16f8:	e017      	b.n	172a <nvm_execute_command+0xf2>
		/* Commands not requiring address */
		case NVM_COMMAND_PAGE_BUFFER_CLEAR:
		case NVM_COMMAND_SET_SECURITY_BIT:
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;
    16fa:	46c0      	nop			; (mov r8, r8)
			nvm_module->CTRLB.reg = ctrlb_bak;
			return STATUS_ERR_INVALID_ARG;
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    16fc:	230f      	movs	r3, #15
    16fe:	18fb      	adds	r3, r7, r3
    1700:	781b      	ldrb	r3, [r3, #0]
    1702:	b29b      	uxth	r3, r3
    1704:	4a11      	ldr	r2, [pc, #68]	; (174c <nvm_execute_command+0x114>)
    1706:	4313      	orrs	r3, r2
    1708:	b29a      	uxth	r2, r3
    170a:	697b      	ldr	r3, [r7, #20]
    170c:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    170e:	46c0      	nop			; (mov r8, r8)
    1710:	4b0c      	ldr	r3, [pc, #48]	; (1744 <nvm_execute_command+0x10c>)
    1712:	4798      	blx	r3
    1714:	0003      	movs	r3, r0
    1716:	001a      	movs	r2, r3
    1718:	2301      	movs	r3, #1
    171a:	4053      	eors	r3, r2
    171c:	b2db      	uxtb	r3, r3
    171e:	2b00      	cmp	r3, #0
    1720:	d1f6      	bne.n	1710 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    1722:	697b      	ldr	r3, [r7, #20]
    1724:	693a      	ldr	r2, [r7, #16]
    1726:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    1728:	2300      	movs	r3, #0
}
    172a:	0018      	movs	r0, r3
    172c:	46bd      	mov	sp, r7
    172e:	b006      	add	sp, #24
    1730:	bd80      	pop	{r7, pc}
    1732:	46c0      	nop			; (mov r8, r8)
    1734:	200000a8 	.word	0x200000a8
    1738:	00803fff 	.word	0x00803fff
    173c:	00806000 	.word	0x00806000
    1740:	41004000 	.word	0x41004000
    1744:	000014dd 	.word	0x000014dd
    1748:	000040b0 	.word	0x000040b0
    174c:	ffffa500 	.word	0xffffa500

00001750 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    1750:	b580      	push	{r7, lr}
    1752:	b088      	sub	sp, #32
    1754:	af00      	add	r7, sp, #0
    1756:	60f8      	str	r0, [r7, #12]
    1758:	60b9      	str	r1, [r7, #8]
    175a:	1dbb      	adds	r3, r7, #6
    175c:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    175e:	4b4a      	ldr	r3, [pc, #296]	; (1888 <nvm_write_buffer+0x138>)
    1760:	881b      	ldrh	r3, [r3, #0]
    1762:	001a      	movs	r2, r3
    1764:	4b48      	ldr	r3, [pc, #288]	; (1888 <nvm_write_buffer+0x138>)
    1766:	885b      	ldrh	r3, [r3, #2]
    1768:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
    176a:	68fb      	ldr	r3, [r7, #12]
    176c:	429a      	cmp	r2, r3
    176e:	d201      	bcs.n	1774 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    1770:	2318      	movs	r3, #24
    1772:	e084      	b.n	187e <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    1774:	4b44      	ldr	r3, [pc, #272]	; (1888 <nvm_write_buffer+0x138>)
    1776:	881b      	ldrh	r3, [r3, #0]
    1778:	3b01      	subs	r3, #1
    177a:	001a      	movs	r2, r3
    177c:	68fb      	ldr	r3, [r7, #12]
    177e:	4013      	ands	r3, r2
    1780:	d001      	beq.n	1786 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    1782:	2318      	movs	r3, #24
    1784:	e07b      	b.n	187e <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    1786:	4b40      	ldr	r3, [pc, #256]	; (1888 <nvm_write_buffer+0x138>)
    1788:	881b      	ldrh	r3, [r3, #0]
    178a:	1dba      	adds	r2, r7, #6
    178c:	8812      	ldrh	r2, [r2, #0]
    178e:	429a      	cmp	r2, r3
    1790:	d901      	bls.n	1796 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    1792:	2317      	movs	r3, #23
    1794:	e073      	b.n	187e <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1796:	4b3d      	ldr	r3, [pc, #244]	; (188c <nvm_write_buffer+0x13c>)
    1798:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    179a:	4b3d      	ldr	r3, [pc, #244]	; (1890 <nvm_write_buffer+0x140>)
    179c:	4798      	blx	r3
    179e:	0003      	movs	r3, r0
    17a0:	001a      	movs	r2, r3
    17a2:	2301      	movs	r3, #1
    17a4:	4053      	eors	r3, r2
    17a6:	b2db      	uxtb	r3, r3
    17a8:	2b00      	cmp	r3, #0
    17aa:	d001      	beq.n	17b0 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
    17ac:	2305      	movs	r3, #5
    17ae:	e066      	b.n	187e <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    17b0:	697b      	ldr	r3, [r7, #20]
    17b2:	4a38      	ldr	r2, [pc, #224]	; (1894 <nvm_write_buffer+0x144>)
    17b4:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    17b6:	46c0      	nop			; (mov r8, r8)
    17b8:	4b35      	ldr	r3, [pc, #212]	; (1890 <nvm_write_buffer+0x140>)
    17ba:	4798      	blx	r3
    17bc:	0003      	movs	r3, r0
    17be:	001a      	movs	r2, r3
    17c0:	2301      	movs	r3, #1
    17c2:	4053      	eors	r3, r2
    17c4:	b2db      	uxtb	r3, r3
    17c6:	2b00      	cmp	r3, #0
    17c8:	d1f6      	bne.n	17b8 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    17ca:	697b      	ldr	r3, [r7, #20]
    17cc:	2220      	movs	r2, #32
    17ce:	32ff      	adds	r2, #255	; 0xff
    17d0:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    17d2:	68fb      	ldr	r3, [r7, #12]
    17d4:	085b      	lsrs	r3, r3, #1
    17d6:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    17d8:	231a      	movs	r3, #26
    17da:	18fb      	adds	r3, r7, r3
    17dc:	2200      	movs	r2, #0
    17de:	801a      	strh	r2, [r3, #0]
    17e0:	e032      	b.n	1848 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    17e2:	231a      	movs	r3, #26
    17e4:	18fb      	adds	r3, r7, r3
    17e6:	881b      	ldrh	r3, [r3, #0]
    17e8:	68ba      	ldr	r2, [r7, #8]
    17ea:	18d3      	adds	r3, r2, r3
    17ec:	781a      	ldrb	r2, [r3, #0]
    17ee:	2318      	movs	r3, #24
    17f0:	18fb      	adds	r3, r7, r3
    17f2:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    17f4:	231a      	movs	r3, #26
    17f6:	18fb      	adds	r3, r7, r3
    17f8:	881a      	ldrh	r2, [r3, #0]
    17fa:	1dbb      	adds	r3, r7, #6
    17fc:	881b      	ldrh	r3, [r3, #0]
    17fe:	3b01      	subs	r3, #1
    1800:	429a      	cmp	r2, r3
    1802:	da11      	bge.n	1828 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    1804:	231a      	movs	r3, #26
    1806:	18fb      	adds	r3, r7, r3
    1808:	881b      	ldrh	r3, [r3, #0]
    180a:	3301      	adds	r3, #1
    180c:	68ba      	ldr	r2, [r7, #8]
    180e:	18d3      	adds	r3, r2, r3
    1810:	781b      	ldrb	r3, [r3, #0]
    1812:	021b      	lsls	r3, r3, #8
    1814:	b21a      	sxth	r2, r3
    1816:	2318      	movs	r3, #24
    1818:	18fb      	adds	r3, r7, r3
    181a:	2100      	movs	r1, #0
    181c:	5e5b      	ldrsh	r3, [r3, r1]
    181e:	4313      	orrs	r3, r2
    1820:	b21a      	sxth	r2, r3
    1822:	2318      	movs	r3, #24
    1824:	18fb      	adds	r3, r7, r3
    1826:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    1828:	69fb      	ldr	r3, [r7, #28]
    182a:	1c5a      	adds	r2, r3, #1
    182c:	61fa      	str	r2, [r7, #28]
    182e:	005b      	lsls	r3, r3, #1
    1830:	001a      	movs	r2, r3
    1832:	2318      	movs	r3, #24
    1834:	18fb      	adds	r3, r7, r3
    1836:	881b      	ldrh	r3, [r3, #0]
    1838:	8013      	strh	r3, [r2, #0]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    183a:	231a      	movs	r3, #26
    183c:	18fb      	adds	r3, r7, r3
    183e:	221a      	movs	r2, #26
    1840:	18ba      	adds	r2, r7, r2
    1842:	8812      	ldrh	r2, [r2, #0]
    1844:	3202      	adds	r2, #2
    1846:	801a      	strh	r2, [r3, #0]
    1848:	231a      	movs	r3, #26
    184a:	18fa      	adds	r2, r7, r3
    184c:	1dbb      	adds	r3, r7, #6
    184e:	8812      	ldrh	r2, [r2, #0]
    1850:	881b      	ldrh	r3, [r3, #0]
    1852:	429a      	cmp	r2, r3
    1854:	d3c5      	bcc.n	17e2 <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    1856:	4b0c      	ldr	r3, [pc, #48]	; (1888 <nvm_write_buffer+0x138>)
    1858:	791b      	ldrb	r3, [r3, #4]
    185a:	2201      	movs	r2, #1
    185c:	4053      	eors	r3, r2
    185e:	b2db      	uxtb	r3, r3
    1860:	2b00      	cmp	r3, #0
    1862:	d00b      	beq.n	187c <nvm_write_buffer+0x12c>
    1864:	1dbb      	adds	r3, r7, #6
    1866:	881b      	ldrh	r3, [r3, #0]
    1868:	2b3f      	cmp	r3, #63	; 0x3f
    186a:	d807      	bhi.n	187c <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    186c:	68fb      	ldr	r3, [r7, #12]
    186e:	2200      	movs	r2, #0
    1870:	0019      	movs	r1, r3
    1872:	2004      	movs	r0, #4
    1874:	4b08      	ldr	r3, [pc, #32]	; (1898 <nvm_write_buffer+0x148>)
    1876:	4798      	blx	r3
    1878:	0003      	movs	r3, r0
    187a:	e000      	b.n	187e <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    187c:	2300      	movs	r3, #0
}
    187e:	0018      	movs	r0, r3
    1880:	46bd      	mov	sp, r7
    1882:	b008      	add	sp, #32
    1884:	bd80      	pop	{r7, pc}
    1886:	46c0      	nop			; (mov r8, r8)
    1888:	200000a8 	.word	0x200000a8
    188c:	41004000 	.word	0x41004000
    1890:	000014dd 	.word	0x000014dd
    1894:	ffffa544 	.word	0xffffa544
    1898:	00001639 	.word	0x00001639

0000189c <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    189c:	b580      	push	{r7, lr}
    189e:	b084      	sub	sp, #16
    18a0:	af00      	add	r7, sp, #0
    18a2:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    18a4:	4b23      	ldr	r3, [pc, #140]	; (1934 <nvm_erase_row+0x98>)
    18a6:	881b      	ldrh	r3, [r3, #0]
    18a8:	001a      	movs	r2, r3
    18aa:	4b22      	ldr	r3, [pc, #136]	; (1934 <nvm_erase_row+0x98>)
    18ac:	885b      	ldrh	r3, [r3, #2]
    18ae:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
    18b0:	687b      	ldr	r3, [r7, #4]
    18b2:	429a      	cmp	r2, r3
    18b4:	d201      	bcs.n	18ba <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    18b6:	2318      	movs	r3, #24
    18b8:	e037      	b.n	192a <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    18ba:	4b1e      	ldr	r3, [pc, #120]	; (1934 <nvm_erase_row+0x98>)
    18bc:	881b      	ldrh	r3, [r3, #0]
    18be:	009b      	lsls	r3, r3, #2
    18c0:	3b01      	subs	r3, #1
    18c2:	001a      	movs	r2, r3
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	4013      	ands	r3, r2
    18c8:	d001      	beq.n	18ce <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    18ca:	2318      	movs	r3, #24
    18cc:	e02d      	b.n	192a <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    18ce:	4b1a      	ldr	r3, [pc, #104]	; (1938 <nvm_erase_row+0x9c>)
    18d0:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    18d2:	4b1a      	ldr	r3, [pc, #104]	; (193c <nvm_erase_row+0xa0>)
    18d4:	4798      	blx	r3
    18d6:	0003      	movs	r3, r0
    18d8:	001a      	movs	r2, r3
    18da:	2301      	movs	r3, #1
    18dc:	4053      	eors	r3, r2
    18de:	b2db      	uxtb	r3, r3
    18e0:	2b00      	cmp	r3, #0
    18e2:	d001      	beq.n	18e8 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
    18e4:	2305      	movs	r3, #5
    18e6:	e020      	b.n	192a <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    18e8:	68fb      	ldr	r3, [r7, #12]
    18ea:	2220      	movs	r2, #32
    18ec:	32ff      	adds	r2, #255	; 0xff
    18ee:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    18f0:	687b      	ldr	r3, [r7, #4]
    18f2:	089b      	lsrs	r3, r3, #2
    18f4:	005a      	lsls	r2, r3, #1
    18f6:	68fb      	ldr	r3, [r7, #12]
    18f8:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    18fa:	68fb      	ldr	r3, [r7, #12]
    18fc:	4a10      	ldr	r2, [pc, #64]	; (1940 <nvm_erase_row+0xa4>)
    18fe:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    1900:	46c0      	nop			; (mov r8, r8)
    1902:	4b0e      	ldr	r3, [pc, #56]	; (193c <nvm_erase_row+0xa0>)
    1904:	4798      	blx	r3
    1906:	0003      	movs	r3, r0
    1908:	001a      	movs	r2, r3
    190a:	2301      	movs	r3, #1
    190c:	4053      	eors	r3, r2
    190e:	b2db      	uxtb	r3, r3
    1910:	2b00      	cmp	r3, #0
    1912:	d1f6      	bne.n	1902 <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    1914:	68fb      	ldr	r3, [r7, #12]
    1916:	8b1b      	ldrh	r3, [r3, #24]
    1918:	b29b      	uxth	r3, r3
    191a:	b2db      	uxtb	r3, r3
    191c:	001a      	movs	r2, r3
    191e:	231c      	movs	r3, #28
    1920:	4013      	ands	r3, r2
    1922:	d001      	beq.n	1928 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
    1924:	2304      	movs	r3, #4
    1926:	e000      	b.n	192a <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
    1928:	2300      	movs	r3, #0
}
    192a:	0018      	movs	r0, r3
    192c:	46bd      	mov	sp, r7
    192e:	b004      	add	sp, #16
    1930:	bd80      	pop	{r7, pc}
    1932:	46c0      	nop			; (mov r8, r8)
    1934:	200000a8 	.word	0x200000a8
    1938:	41004000 	.word	0x41004000
    193c:	000014dd 	.word	0x000014dd
    1940:	ffffa502 	.word	0xffffa502

00001944 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1944:	b580      	push	{r7, lr}
    1946:	b082      	sub	sp, #8
    1948:	af00      	add	r7, sp, #0
    194a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    194c:	687b      	ldr	r3, [r7, #4]
    194e:	2280      	movs	r2, #128	; 0x80
    1950:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1952:	687b      	ldr	r3, [r7, #4]
    1954:	2200      	movs	r2, #0
    1956:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1958:	687b      	ldr	r3, [r7, #4]
    195a:	2201      	movs	r2, #1
    195c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    195e:	687b      	ldr	r3, [r7, #4]
    1960:	2200      	movs	r2, #0
    1962:	70da      	strb	r2, [r3, #3]
}
    1964:	46c0      	nop			; (mov r8, r8)
    1966:	46bd      	mov	sp, r7
    1968:	b002      	add	sp, #8
    196a:	bd80      	pop	{r7, pc}

0000196c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    196c:	b580      	push	{r7, lr}
    196e:	b084      	sub	sp, #16
    1970:	af00      	add	r7, sp, #0
    1972:	0002      	movs	r2, r0
    1974:	6039      	str	r1, [r7, #0]
    1976:	1dfb      	adds	r3, r7, #7
    1978:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    197a:	230c      	movs	r3, #12
    197c:	18fb      	adds	r3, r7, r3
    197e:	0018      	movs	r0, r3
    1980:	4b10      	ldr	r3, [pc, #64]	; (19c4 <port_pin_set_config+0x58>)
    1982:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    1984:	230c      	movs	r3, #12
    1986:	18fb      	adds	r3, r7, r3
    1988:	2280      	movs	r2, #128	; 0x80
    198a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    198c:	683b      	ldr	r3, [r7, #0]
    198e:	781a      	ldrb	r2, [r3, #0]
    1990:	230c      	movs	r3, #12
    1992:	18fb      	adds	r3, r7, r3
    1994:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1996:	683b      	ldr	r3, [r7, #0]
    1998:	785a      	ldrb	r2, [r3, #1]
    199a:	230c      	movs	r3, #12
    199c:	18fb      	adds	r3, r7, r3
    199e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    19a0:	683b      	ldr	r3, [r7, #0]
    19a2:	789a      	ldrb	r2, [r3, #2]
    19a4:	230c      	movs	r3, #12
    19a6:	18fb      	adds	r3, r7, r3
    19a8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    19aa:	230c      	movs	r3, #12
    19ac:	18fa      	adds	r2, r7, r3
    19ae:	1dfb      	adds	r3, r7, #7
    19b0:	781b      	ldrb	r3, [r3, #0]
    19b2:	0011      	movs	r1, r2
    19b4:	0018      	movs	r0, r3
    19b6:	4b04      	ldr	r3, [pc, #16]	; (19c8 <port_pin_set_config+0x5c>)
    19b8:	4798      	blx	r3
}
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	46bd      	mov	sp, r7
    19be:	b004      	add	sp, #16
    19c0:	bd80      	pop	{r7, pc}
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	00001945 	.word	0x00001945
    19c8:	000024cd 	.word	0x000024cd

000019cc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    19cc:	b580      	push	{r7, lr}
    19ce:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    19d0:	46c0      	nop			; (mov r8, r8)
    19d2:	46bd      	mov	sp, r7
    19d4:	bd80      	pop	{r7, pc}
    19d6:	46c0      	nop			; (mov r8, r8)

000019d8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    19d8:	b580      	push	{r7, lr}
    19da:	b082      	sub	sp, #8
    19dc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    19de:	4b10      	ldr	r3, [pc, #64]	; (1a20 <cpu_irq_enter_critical+0x48>)
    19e0:	681b      	ldr	r3, [r3, #0]
    19e2:	2b00      	cmp	r3, #0
    19e4:	d112      	bne.n	1a0c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    19e6:	f3ef 8310 	mrs	r3, PRIMASK
    19ea:	607b      	str	r3, [r7, #4]
  return(result);
    19ec:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    19ee:	2b00      	cmp	r3, #0
    19f0:	d109      	bne.n	1a06 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    19f2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    19f4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    19f8:	4b0a      	ldr	r3, [pc, #40]	; (1a24 <cpu_irq_enter_critical+0x4c>)
    19fa:	2200      	movs	r2, #0
    19fc:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    19fe:	4b0a      	ldr	r3, [pc, #40]	; (1a28 <cpu_irq_enter_critical+0x50>)
    1a00:	2201      	movs	r2, #1
    1a02:	701a      	strb	r2, [r3, #0]
    1a04:	e002      	b.n	1a0c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1a06:	4b08      	ldr	r3, [pc, #32]	; (1a28 <cpu_irq_enter_critical+0x50>)
    1a08:	2200      	movs	r2, #0
    1a0a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1a0c:	4b04      	ldr	r3, [pc, #16]	; (1a20 <cpu_irq_enter_critical+0x48>)
    1a0e:	681b      	ldr	r3, [r3, #0]
    1a10:	1c5a      	adds	r2, r3, #1
    1a12:	4b03      	ldr	r3, [pc, #12]	; (1a20 <cpu_irq_enter_critical+0x48>)
    1a14:	601a      	str	r2, [r3, #0]
}
    1a16:	46c0      	nop			; (mov r8, r8)
    1a18:	46bd      	mov	sp, r7
    1a1a:	b002      	add	sp, #8
    1a1c:	bd80      	pop	{r7, pc}
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	200000b0 	.word	0x200000b0
    1a24:	20000008 	.word	0x20000008
    1a28:	200000b4 	.word	0x200000b4

00001a2c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    1a2c:	b580      	push	{r7, lr}
    1a2e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1a30:	4b0b      	ldr	r3, [pc, #44]	; (1a60 <cpu_irq_leave_critical+0x34>)
    1a32:	681b      	ldr	r3, [r3, #0]
    1a34:	1e5a      	subs	r2, r3, #1
    1a36:	4b0a      	ldr	r3, [pc, #40]	; (1a60 <cpu_irq_leave_critical+0x34>)
    1a38:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1a3a:	4b09      	ldr	r3, [pc, #36]	; (1a60 <cpu_irq_leave_critical+0x34>)
    1a3c:	681b      	ldr	r3, [r3, #0]
    1a3e:	2b00      	cmp	r3, #0
    1a40:	d10a      	bne.n	1a58 <cpu_irq_leave_critical+0x2c>
    1a42:	4b08      	ldr	r3, [pc, #32]	; (1a64 <cpu_irq_leave_critical+0x38>)
    1a44:	781b      	ldrb	r3, [r3, #0]
    1a46:	b2db      	uxtb	r3, r3
    1a48:	2b00      	cmp	r3, #0
    1a4a:	d005      	beq.n	1a58 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    1a4c:	4b06      	ldr	r3, [pc, #24]	; (1a68 <cpu_irq_leave_critical+0x3c>)
    1a4e:	2201      	movs	r2, #1
    1a50:	701a      	strb	r2, [r3, #0]
    1a52:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1a56:	b662      	cpsie	i
	}
}
    1a58:	46c0      	nop			; (mov r8, r8)
    1a5a:	46bd      	mov	sp, r7
    1a5c:	bd80      	pop	{r7, pc}
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	200000b0 	.word	0x200000b0
    1a64:	200000b4 	.word	0x200000b4
    1a68:	20000008 	.word	0x20000008

00001a6c <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    1a6c:	b580      	push	{r7, lr}
    1a6e:	b082      	sub	sp, #8
    1a70:	af00      	add	r7, sp, #0
    1a72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1a74:	687b      	ldr	r3, [r7, #4]
    1a76:	2201      	movs	r2, #1
    1a78:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    1a7a:	687b      	ldr	r3, [r7, #4]
    1a7c:	2200      	movs	r2, #0
    1a7e:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1a80:	687b      	ldr	r3, [r7, #4]
    1a82:	2206      	movs	r2, #6
    1a84:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    1a86:	687b      	ldr	r3, [r7, #4]
    1a88:	2200      	movs	r2, #0
    1a8a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    1a8c:	687b      	ldr	r3, [r7, #4]
    1a8e:	2200      	movs	r2, #0
    1a90:	725a      	strb	r2, [r3, #9]
}
    1a92:	46c0      	nop			; (mov r8, r8)
    1a94:	46bd      	mov	sp, r7
    1a96:	b002      	add	sp, #8
    1a98:	bd80      	pop	{r7, pc}
    1a9a:	46c0      	nop			; (mov r8, r8)

00001a9c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    1a9c:	b580      	push	{r7, lr}
    1a9e:	b082      	sub	sp, #8
    1aa0:	af00      	add	r7, sp, #0
    1aa2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    1aa4:	687b      	ldr	r3, [r7, #4]
    1aa6:	2203      	movs	r2, #3
    1aa8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    1aaa:	687b      	ldr	r3, [r7, #4]
    1aac:	2200      	movs	r2, #0
    1aae:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    1ab0:	687b      	ldr	r3, [r7, #4]
    1ab2:	2201      	movs	r2, #1
    1ab4:	709a      	strb	r2, [r3, #2]
}
    1ab6:	46c0      	nop			; (mov r8, r8)
    1ab8:	46bd      	mov	sp, r7
    1aba:	b002      	add	sp, #8
    1abc:	bd80      	pop	{r7, pc}
    1abe:	46c0      	nop			; (mov r8, r8)

00001ac0 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    1ac0:	b580      	push	{r7, lr}
    1ac2:	b082      	sub	sp, #8
    1ac4:	af00      	add	r7, sp, #0
    1ac6:	0002      	movs	r2, r0
    1ac8:	1dfb      	adds	r3, r7, #7
    1aca:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1acc:	4a03      	ldr	r2, [pc, #12]	; (1adc <system_cpu_clock_set_divider+0x1c>)
    1ace:	1dfb      	adds	r3, r7, #7
    1ad0:	781b      	ldrb	r3, [r3, #0]
    1ad2:	7213      	strb	r3, [r2, #8]
}
    1ad4:	46c0      	nop			; (mov r8, r8)
    1ad6:	46bd      	mov	sp, r7
    1ad8:	b002      	add	sp, #8
    1ada:	bd80      	pop	{r7, pc}
    1adc:	40000400 	.word	0x40000400

00001ae0 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    1ae0:	b580      	push	{r7, lr}
    1ae2:	b082      	sub	sp, #8
    1ae4:	af00      	add	r7, sp, #0
    1ae6:	0002      	movs	r2, r0
    1ae8:	1dfb      	adds	r3, r7, #7
    1aea:	701a      	strb	r2, [r3, #0]
    1aec:	1dbb      	adds	r3, r7, #6
    1aee:	1c0a      	adds	r2, r1, #0
    1af0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1af2:	1dfb      	adds	r3, r7, #7
    1af4:	781b      	ldrb	r3, [r3, #0]
    1af6:	2b01      	cmp	r3, #1
    1af8:	d008      	beq.n	1b0c <system_apb_clock_set_divider+0x2c>
    1afa:	2b02      	cmp	r3, #2
    1afc:	d00b      	beq.n	1b16 <system_apb_clock_set_divider+0x36>
    1afe:	2b00      	cmp	r3, #0
    1b00:	d10e      	bne.n	1b20 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1b02:	4a0b      	ldr	r2, [pc, #44]	; (1b30 <system_apb_clock_set_divider+0x50>)
    1b04:	1dbb      	adds	r3, r7, #6
    1b06:	781b      	ldrb	r3, [r3, #0]
    1b08:	7253      	strb	r3, [r2, #9]
			break;
    1b0a:	e00b      	b.n	1b24 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1b0c:	4a08      	ldr	r2, [pc, #32]	; (1b30 <system_apb_clock_set_divider+0x50>)
    1b0e:	1dbb      	adds	r3, r7, #6
    1b10:	781b      	ldrb	r3, [r3, #0]
    1b12:	7293      	strb	r3, [r2, #10]
			break;
    1b14:	e006      	b.n	1b24 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1b16:	4a06      	ldr	r2, [pc, #24]	; (1b30 <system_apb_clock_set_divider+0x50>)
    1b18:	1dbb      	adds	r3, r7, #6
    1b1a:	781b      	ldrb	r3, [r3, #0]
    1b1c:	72d3      	strb	r3, [r2, #11]
			break;
    1b1e:	e001      	b.n	1b24 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1b20:	2317      	movs	r3, #23
    1b22:	e000      	b.n	1b26 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    1b24:	2300      	movs	r3, #0
}
    1b26:	0018      	movs	r0, r3
    1b28:	46bd      	mov	sp, r7
    1b2a:	b002      	add	sp, #8
    1b2c:	bd80      	pop	{r7, pc}
    1b2e:	46c0      	nop			; (mov r8, r8)
    1b30:	40000400 	.word	0x40000400

00001b34 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1b34:	b580      	push	{r7, lr}
    1b36:	b082      	sub	sp, #8
    1b38:	af00      	add	r7, sp, #0
    1b3a:	0002      	movs	r2, r0
    1b3c:	1dfb      	adds	r3, r7, #7
    1b3e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1b40:	4a08      	ldr	r2, [pc, #32]	; (1b64 <system_flash_set_waitstates+0x30>)
    1b42:	1dfb      	adds	r3, r7, #7
    1b44:	781b      	ldrb	r3, [r3, #0]
    1b46:	210f      	movs	r1, #15
    1b48:	400b      	ands	r3, r1
    1b4a:	b2d9      	uxtb	r1, r3
    1b4c:	6853      	ldr	r3, [r2, #4]
    1b4e:	200f      	movs	r0, #15
    1b50:	4001      	ands	r1, r0
    1b52:	0049      	lsls	r1, r1, #1
    1b54:	201e      	movs	r0, #30
    1b56:	4383      	bics	r3, r0
    1b58:	430b      	orrs	r3, r1
    1b5a:	6053      	str	r3, [r2, #4]
}
    1b5c:	46c0      	nop			; (mov r8, r8)
    1b5e:	46bd      	mov	sp, r7
    1b60:	b002      	add	sp, #8
    1b62:	bd80      	pop	{r7, pc}
    1b64:	41004000 	.word	0x41004000

00001b68 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1b68:	b580      	push	{r7, lr}
    1b6a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b6c:	46c0      	nop			; (mov r8, r8)
    1b6e:	4b04      	ldr	r3, [pc, #16]	; (1b80 <_system_dfll_wait_for_sync+0x18>)
    1b70:	68db      	ldr	r3, [r3, #12]
    1b72:	2210      	movs	r2, #16
    1b74:	4013      	ands	r3, r2
    1b76:	d0fa      	beq.n	1b6e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1b78:	46c0      	nop			; (mov r8, r8)
    1b7a:	46bd      	mov	sp, r7
    1b7c:	bd80      	pop	{r7, pc}
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	40000800 	.word	0x40000800

00001b84 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    1b84:	b580      	push	{r7, lr}
    1b86:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1b88:	4b0c      	ldr	r3, [pc, #48]	; (1bbc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1b8a:	2202      	movs	r2, #2
    1b8c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1b8e:	4b0c      	ldr	r3, [pc, #48]	; (1bc0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1b90:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1b92:	4a0a      	ldr	r2, [pc, #40]	; (1bbc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1b94:	4b0b      	ldr	r3, [pc, #44]	; (1bc4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1b96:	689b      	ldr	r3, [r3, #8]
    1b98:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1b9a:	4a08      	ldr	r2, [pc, #32]	; (1bbc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1b9c:	4b09      	ldr	r3, [pc, #36]	; (1bc4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1b9e:	685b      	ldr	r3, [r3, #4]
    1ba0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1ba2:	4b06      	ldr	r3, [pc, #24]	; (1bbc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1ba4:	2200      	movs	r2, #0
    1ba6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1ba8:	4b05      	ldr	r3, [pc, #20]	; (1bc0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1baa:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1bac:	4a03      	ldr	r2, [pc, #12]	; (1bbc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1bae:	4b05      	ldr	r3, [pc, #20]	; (1bc4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1bb0:	681b      	ldr	r3, [r3, #0]
    1bb2:	b29b      	uxth	r3, r3
    1bb4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	46bd      	mov	sp, r7
    1bba:	bd80      	pop	{r7, pc}
    1bbc:	40000800 	.word	0x40000800
    1bc0:	00001b69 	.word	0x00001b69
    1bc4:	200000b8 	.word	0x200000b8

00001bc8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1bc8:	b580      	push	{r7, lr}
    1bca:	b082      	sub	sp, #8
    1bcc:	af00      	add	r7, sp, #0
    1bce:	0002      	movs	r2, r0
    1bd0:	1dfb      	adds	r3, r7, #7
    1bd2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1bd4:	1dfb      	adds	r3, r7, #7
    1bd6:	781b      	ldrb	r3, [r3, #0]
    1bd8:	2b08      	cmp	r3, #8
    1bda:	d840      	bhi.n	1c5e <system_clock_source_get_hz+0x96>
    1bdc:	009a      	lsls	r2, r3, #2
    1bde:	4b22      	ldr	r3, [pc, #136]	; (1c68 <system_clock_source_get_hz+0xa0>)
    1be0:	18d3      	adds	r3, r2, r3
    1be2:	681b      	ldr	r3, [r3, #0]
    1be4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1be6:	4b21      	ldr	r3, [pc, #132]	; (1c6c <system_clock_source_get_hz+0xa4>)
    1be8:	691b      	ldr	r3, [r3, #16]
    1bea:	e039      	b.n	1c60 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1bec:	4b20      	ldr	r3, [pc, #128]	; (1c70 <system_clock_source_get_hz+0xa8>)
    1bee:	6a1b      	ldr	r3, [r3, #32]
    1bf0:	059b      	lsls	r3, r3, #22
    1bf2:	0f9b      	lsrs	r3, r3, #30
    1bf4:	b2db      	uxtb	r3, r3
    1bf6:	001a      	movs	r2, r3
    1bf8:	4b1e      	ldr	r3, [pc, #120]	; (1c74 <system_clock_source_get_hz+0xac>)
    1bfa:	40d3      	lsrs	r3, r2
    1bfc:	e030      	b.n	1c60 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1bfe:	2380      	movs	r3, #128	; 0x80
    1c00:	021b      	lsls	r3, r3, #8
    1c02:	e02d      	b.n	1c60 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    1c04:	2380      	movs	r3, #128	; 0x80
    1c06:	021b      	lsls	r3, r3, #8
    1c08:	e02a      	b.n	1c60 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1c0a:	4b18      	ldr	r3, [pc, #96]	; (1c6c <system_clock_source_get_hz+0xa4>)
    1c0c:	695b      	ldr	r3, [r3, #20]
    1c0e:	e027      	b.n	1c60 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1c10:	4b16      	ldr	r3, [pc, #88]	; (1c6c <system_clock_source_get_hz+0xa4>)
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	2202      	movs	r2, #2
    1c16:	4013      	ands	r3, r2
    1c18:	d101      	bne.n	1c1e <system_clock_source_get_hz+0x56>
			return 0;
    1c1a:	2300      	movs	r3, #0
    1c1c:	e020      	b.n	1c60 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    1c1e:	4b16      	ldr	r3, [pc, #88]	; (1c78 <system_clock_source_get_hz+0xb0>)
    1c20:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1c22:	4b12      	ldr	r3, [pc, #72]	; (1c6c <system_clock_source_get_hz+0xa4>)
    1c24:	681b      	ldr	r3, [r3, #0]
    1c26:	2204      	movs	r2, #4
    1c28:	4013      	ands	r3, r2
    1c2a:	d009      	beq.n	1c40 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1c2c:	2000      	movs	r0, #0
    1c2e:	4b13      	ldr	r3, [pc, #76]	; (1c7c <system_clock_source_get_hz+0xb4>)
    1c30:	4798      	blx	r3
    1c32:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    1c34:	4b0d      	ldr	r3, [pc, #52]	; (1c6c <system_clock_source_get_hz+0xa4>)
    1c36:	689b      	ldr	r3, [r3, #8]
    1c38:	041b      	lsls	r3, r3, #16
    1c3a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1c3c:	4353      	muls	r3, r2
    1c3e:	e00f      	b.n	1c60 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1c40:	4b0f      	ldr	r3, [pc, #60]	; (1c80 <system_clock_source_get_hz+0xb8>)
    1c42:	e00d      	b.n	1c60 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1c44:	4a0a      	ldr	r2, [pc, #40]	; (1c70 <system_clock_source_get_hz+0xa8>)
    1c46:	2350      	movs	r3, #80	; 0x50
    1c48:	5cd3      	ldrb	r3, [r2, r3]
    1c4a:	b2db      	uxtb	r3, r3
    1c4c:	001a      	movs	r2, r3
    1c4e:	2304      	movs	r3, #4
    1c50:	4013      	ands	r3, r2
    1c52:	d101      	bne.n	1c58 <system_clock_source_get_hz+0x90>
			return 0;
    1c54:	2300      	movs	r3, #0
    1c56:	e003      	b.n	1c60 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    1c58:	4b04      	ldr	r3, [pc, #16]	; (1c6c <system_clock_source_get_hz+0xa4>)
    1c5a:	68db      	ldr	r3, [r3, #12]
    1c5c:	e000      	b.n	1c60 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    1c5e:	2300      	movs	r3, #0
	}
}
    1c60:	0018      	movs	r0, r3
    1c62:	46bd      	mov	sp, r7
    1c64:	b002      	add	sp, #8
    1c66:	bd80      	pop	{r7, pc}
    1c68:	000041c8 	.word	0x000041c8
    1c6c:	200000b8 	.word	0x200000b8
    1c70:	40000800 	.word	0x40000800
    1c74:	007a1200 	.word	0x007a1200
    1c78:	00001b69 	.word	0x00001b69
    1c7c:	00002305 	.word	0x00002305
    1c80:	02dc6c00 	.word	0x02dc6c00

00001c84 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1c84:	b580      	push	{r7, lr}
    1c86:	b084      	sub	sp, #16
    1c88:	af00      	add	r7, sp, #0
    1c8a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1c8c:	4b1a      	ldr	r3, [pc, #104]	; (1cf8 <system_clock_source_osc8m_set_config+0x74>)
    1c8e:	6a1b      	ldr	r3, [r3, #32]
    1c90:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1c92:	687b      	ldr	r3, [r7, #4]
    1c94:	781b      	ldrb	r3, [r3, #0]
    1c96:	1c1a      	adds	r2, r3, #0
    1c98:	2303      	movs	r3, #3
    1c9a:	4013      	ands	r3, r2
    1c9c:	b2da      	uxtb	r2, r3
    1c9e:	230d      	movs	r3, #13
    1ca0:	18fb      	adds	r3, r7, r3
    1ca2:	2103      	movs	r1, #3
    1ca4:	400a      	ands	r2, r1
    1ca6:	0010      	movs	r0, r2
    1ca8:	781a      	ldrb	r2, [r3, #0]
    1caa:	2103      	movs	r1, #3
    1cac:	438a      	bics	r2, r1
    1cae:	1c11      	adds	r1, r2, #0
    1cb0:	1c02      	adds	r2, r0, #0
    1cb2:	430a      	orrs	r2, r1
    1cb4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1cb6:	687b      	ldr	r3, [r7, #4]
    1cb8:	789a      	ldrb	r2, [r3, #2]
    1cba:	230c      	movs	r3, #12
    1cbc:	18fb      	adds	r3, r7, r3
    1cbe:	01d0      	lsls	r0, r2, #7
    1cc0:	781a      	ldrb	r2, [r3, #0]
    1cc2:	217f      	movs	r1, #127	; 0x7f
    1cc4:	400a      	ands	r2, r1
    1cc6:	1c11      	adds	r1, r2, #0
    1cc8:	1c02      	adds	r2, r0, #0
    1cca:	430a      	orrs	r2, r1
    1ccc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1cce:	687b      	ldr	r3, [r7, #4]
    1cd0:	785a      	ldrb	r2, [r3, #1]
    1cd2:	230c      	movs	r3, #12
    1cd4:	18fb      	adds	r3, r7, r3
    1cd6:	2101      	movs	r1, #1
    1cd8:	400a      	ands	r2, r1
    1cda:	0190      	lsls	r0, r2, #6
    1cdc:	781a      	ldrb	r2, [r3, #0]
    1cde:	2140      	movs	r1, #64	; 0x40
    1ce0:	438a      	bics	r2, r1
    1ce2:	1c11      	adds	r1, r2, #0
    1ce4:	1c02      	adds	r2, r0, #0
    1ce6:	430a      	orrs	r2, r1
    1ce8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    1cea:	4b03      	ldr	r3, [pc, #12]	; (1cf8 <system_clock_source_osc8m_set_config+0x74>)
    1cec:	68fa      	ldr	r2, [r7, #12]
    1cee:	621a      	str	r2, [r3, #32]
}
    1cf0:	46c0      	nop			; (mov r8, r8)
    1cf2:	46bd      	mov	sp, r7
    1cf4:	b004      	add	sp, #16
    1cf6:	bd80      	pop	{r7, pc}
    1cf8:	40000800 	.word	0x40000800

00001cfc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1cfc:	b580      	push	{r7, lr}
    1cfe:	b082      	sub	sp, #8
    1d00:	af00      	add	r7, sp, #0
    1d02:	0002      	movs	r2, r0
    1d04:	1dfb      	adds	r3, r7, #7
    1d06:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1d08:	1dfb      	adds	r3, r7, #7
    1d0a:	781b      	ldrb	r3, [r3, #0]
    1d0c:	2b08      	cmp	r3, #8
    1d0e:	d83b      	bhi.n	1d88 <system_clock_source_enable+0x8c>
    1d10:	009a      	lsls	r2, r3, #2
    1d12:	4b21      	ldr	r3, [pc, #132]	; (1d98 <system_clock_source_enable+0x9c>)
    1d14:	18d3      	adds	r3, r2, r3
    1d16:	681b      	ldr	r3, [r3, #0]
    1d18:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1d1a:	4b20      	ldr	r3, [pc, #128]	; (1d9c <system_clock_source_enable+0xa0>)
    1d1c:	4a1f      	ldr	r2, [pc, #124]	; (1d9c <system_clock_source_enable+0xa0>)
    1d1e:	6a12      	ldr	r2, [r2, #32]
    1d20:	2102      	movs	r1, #2
    1d22:	430a      	orrs	r2, r1
    1d24:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1d26:	2300      	movs	r3, #0
    1d28:	e031      	b.n	1d8e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1d2a:	4b1c      	ldr	r3, [pc, #112]	; (1d9c <system_clock_source_enable+0xa0>)
    1d2c:	4a1b      	ldr	r2, [pc, #108]	; (1d9c <system_clock_source_enable+0xa0>)
    1d2e:	6992      	ldr	r2, [r2, #24]
    1d30:	2102      	movs	r1, #2
    1d32:	430a      	orrs	r2, r1
    1d34:	619a      	str	r2, [r3, #24]
		break;
    1d36:	e029      	b.n	1d8c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1d38:	4a18      	ldr	r2, [pc, #96]	; (1d9c <system_clock_source_enable+0xa0>)
    1d3a:	4b18      	ldr	r3, [pc, #96]	; (1d9c <system_clock_source_enable+0xa0>)
    1d3c:	8a1b      	ldrh	r3, [r3, #16]
    1d3e:	b29b      	uxth	r3, r3
    1d40:	2102      	movs	r1, #2
    1d42:	430b      	orrs	r3, r1
    1d44:	b29b      	uxth	r3, r3
    1d46:	8213      	strh	r3, [r2, #16]
		break;
    1d48:	e020      	b.n	1d8c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1d4a:	4a14      	ldr	r2, [pc, #80]	; (1d9c <system_clock_source_enable+0xa0>)
    1d4c:	4b13      	ldr	r3, [pc, #76]	; (1d9c <system_clock_source_enable+0xa0>)
    1d4e:	8a9b      	ldrh	r3, [r3, #20]
    1d50:	b29b      	uxth	r3, r3
    1d52:	2102      	movs	r1, #2
    1d54:	430b      	orrs	r3, r1
    1d56:	b29b      	uxth	r3, r3
    1d58:	8293      	strh	r3, [r2, #20]
		break;
    1d5a:	e017      	b.n	1d8c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1d5c:	4b10      	ldr	r3, [pc, #64]	; (1da0 <system_clock_source_enable+0xa4>)
    1d5e:	681b      	ldr	r3, [r3, #0]
    1d60:	2202      	movs	r2, #2
    1d62:	431a      	orrs	r2, r3
    1d64:	4b0e      	ldr	r3, [pc, #56]	; (1da0 <system_clock_source_enable+0xa4>)
    1d66:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    1d68:	4b0e      	ldr	r3, [pc, #56]	; (1da4 <system_clock_source_enable+0xa8>)
    1d6a:	4798      	blx	r3
		break;
    1d6c:	e00e      	b.n	1d8c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1d6e:	4a0b      	ldr	r2, [pc, #44]	; (1d9c <system_clock_source_enable+0xa0>)
    1d70:	490a      	ldr	r1, [pc, #40]	; (1d9c <system_clock_source_enable+0xa0>)
    1d72:	2344      	movs	r3, #68	; 0x44
    1d74:	5ccb      	ldrb	r3, [r1, r3]
    1d76:	b2db      	uxtb	r3, r3
    1d78:	2102      	movs	r1, #2
    1d7a:	430b      	orrs	r3, r1
    1d7c:	b2d9      	uxtb	r1, r3
    1d7e:	2344      	movs	r3, #68	; 0x44
    1d80:	54d1      	strb	r1, [r2, r3]
		break;
    1d82:	e003      	b.n	1d8c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1d84:	2300      	movs	r3, #0
    1d86:	e002      	b.n	1d8e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d88:	2317      	movs	r3, #23
    1d8a:	e000      	b.n	1d8e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    1d8c:	2300      	movs	r3, #0
}
    1d8e:	0018      	movs	r0, r3
    1d90:	46bd      	mov	sp, r7
    1d92:	b002      	add	sp, #8
    1d94:	bd80      	pop	{r7, pc}
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	000041ec 	.word	0x000041ec
    1d9c:	40000800 	.word	0x40000800
    1da0:	200000b8 	.word	0x200000b8
    1da4:	00001b85 	.word	0x00001b85

00001da8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1da8:	b580      	push	{r7, lr}
    1daa:	b082      	sub	sp, #8
    1dac:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1dae:	003b      	movs	r3, r7
    1db0:	2201      	movs	r2, #1
    1db2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1db4:	2300      	movs	r3, #0
    1db6:	607b      	str	r3, [r7, #4]
    1db8:	e009      	b.n	1dce <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1dba:	687b      	ldr	r3, [r7, #4]
    1dbc:	b2db      	uxtb	r3, r3
    1dbe:	003a      	movs	r2, r7
    1dc0:	0011      	movs	r1, r2
    1dc2:	0018      	movs	r0, r3
    1dc4:	4b05      	ldr	r3, [pc, #20]	; (1ddc <_switch_peripheral_gclk+0x34>)
    1dc6:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1dc8:	687b      	ldr	r3, [r7, #4]
    1dca:	3301      	adds	r3, #1
    1dcc:	607b      	str	r3, [r7, #4]
    1dce:	687b      	ldr	r3, [r7, #4]
    1dd0:	2b24      	cmp	r3, #36	; 0x24
    1dd2:	d9f2      	bls.n	1dba <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    1dd4:	46c0      	nop			; (mov r8, r8)
    1dd6:	46bd      	mov	sp, r7
    1dd8:	b002      	add	sp, #8
    1dda:	bd80      	pop	{r7, pc}
    1ddc:	000021e1 	.word	0x000021e1

00001de0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1de0:	b580      	push	{r7, lr}
    1de2:	b0a0      	sub	sp, #128	; 0x80
    1de4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1de6:	4b27      	ldr	r3, [pc, #156]	; (1e84 <system_clock_init+0xa4>)
    1de8:	22c2      	movs	r2, #194	; 0xc2
    1dea:	00d2      	lsls	r2, r2, #3
    1dec:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    1dee:	2000      	movs	r0, #0
    1df0:	4b25      	ldr	r3, [pc, #148]	; (1e88 <system_clock_init+0xa8>)
    1df2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1df4:	4b25      	ldr	r3, [pc, #148]	; (1e8c <system_clock_init+0xac>)
    1df6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    1df8:	237c      	movs	r3, #124	; 0x7c
    1dfa:	18fb      	adds	r3, r7, r3
    1dfc:	0018      	movs	r0, r3
    1dfe:	4b24      	ldr	r3, [pc, #144]	; (1e90 <system_clock_init+0xb0>)
    1e00:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1e02:	237c      	movs	r3, #124	; 0x7c
    1e04:	18fb      	adds	r3, r7, r3
    1e06:	2200      	movs	r2, #0
    1e08:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1e0a:	237c      	movs	r3, #124	; 0x7c
    1e0c:	18fb      	adds	r3, r7, r3
    1e0e:	2201      	movs	r2, #1
    1e10:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1e12:	237c      	movs	r3, #124	; 0x7c
    1e14:	18fb      	adds	r3, r7, r3
    1e16:	2200      	movs	r2, #0
    1e18:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1e1a:	237c      	movs	r3, #124	; 0x7c
    1e1c:	18fb      	adds	r3, r7, r3
    1e1e:	0018      	movs	r0, r3
    1e20:	4b1c      	ldr	r3, [pc, #112]	; (1e94 <system_clock_init+0xb4>)
    1e22:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1e24:	2006      	movs	r0, #6
    1e26:	4b1c      	ldr	r3, [pc, #112]	; (1e98 <system_clock_init+0xb8>)
    1e28:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1e2a:	4b1c      	ldr	r3, [pc, #112]	; (1e9c <system_clock_init+0xbc>)
    1e2c:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    1e2e:	2000      	movs	r0, #0
    1e30:	4b1b      	ldr	r3, [pc, #108]	; (1ea0 <system_clock_init+0xc0>)
    1e32:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    1e34:	2100      	movs	r1, #0
    1e36:	2000      	movs	r0, #0
    1e38:	4b1a      	ldr	r3, [pc, #104]	; (1ea4 <system_clock_init+0xc4>)
    1e3a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    1e3c:	2100      	movs	r1, #0
    1e3e:	2001      	movs	r0, #1
    1e40:	4b18      	ldr	r3, [pc, #96]	; (1ea4 <system_clock_init+0xc4>)
    1e42:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    1e44:	2100      	movs	r1, #0
    1e46:	2002      	movs	r0, #2
    1e48:	4b16      	ldr	r3, [pc, #88]	; (1ea4 <system_clock_init+0xc4>)
    1e4a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1e4c:	1d3b      	adds	r3, r7, #4
    1e4e:	0018      	movs	r0, r3
    1e50:	4b15      	ldr	r3, [pc, #84]	; (1ea8 <system_clock_init+0xc8>)
    1e52:	4798      	blx	r3
    1e54:	1d3b      	adds	r3, r7, #4
    1e56:	2206      	movs	r2, #6
    1e58:	701a      	strb	r2, [r3, #0]
    1e5a:	1d3b      	adds	r3, r7, #4
    1e5c:	2201      	movs	r2, #1
    1e5e:	605a      	str	r2, [r3, #4]
    1e60:	1d3b      	adds	r3, r7, #4
    1e62:	2200      	movs	r2, #0
    1e64:	721a      	strb	r2, [r3, #8]
    1e66:	1d3b      	adds	r3, r7, #4
    1e68:	2200      	movs	r2, #0
    1e6a:	725a      	strb	r2, [r3, #9]
    1e6c:	1d3b      	adds	r3, r7, #4
    1e6e:	0019      	movs	r1, r3
    1e70:	2000      	movs	r0, #0
    1e72:	4b0e      	ldr	r3, [pc, #56]	; (1eac <system_clock_init+0xcc>)
    1e74:	4798      	blx	r3
    1e76:	2000      	movs	r0, #0
    1e78:	4b0d      	ldr	r3, [pc, #52]	; (1eb0 <system_clock_init+0xd0>)
    1e7a:	4798      	blx	r3
#endif
}
    1e7c:	46c0      	nop			; (mov r8, r8)
    1e7e:	46bd      	mov	sp, r7
    1e80:	b020      	add	sp, #128	; 0x80
    1e82:	bd80      	pop	{r7, pc}
    1e84:	40000800 	.word	0x40000800
    1e88:	00001b35 	.word	0x00001b35
    1e8c:	00001da9 	.word	0x00001da9
    1e90:	00001a9d 	.word	0x00001a9d
    1e94:	00001c85 	.word	0x00001c85
    1e98:	00001cfd 	.word	0x00001cfd
    1e9c:	00001f59 	.word	0x00001f59
    1ea0:	00001ac1 	.word	0x00001ac1
    1ea4:	00001ae1 	.word	0x00001ae1
    1ea8:	00001a6d 	.word	0x00001a6d
    1eac:	00001f89 	.word	0x00001f89
    1eb0:	000020ad 	.word	0x000020ad

00001eb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1eb4:	b580      	push	{r7, lr}
    1eb6:	b082      	sub	sp, #8
    1eb8:	af00      	add	r7, sp, #0
    1eba:	0002      	movs	r2, r0
    1ebc:	6039      	str	r1, [r7, #0]
    1ebe:	1dfb      	adds	r3, r7, #7
    1ec0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1ec2:	1dfb      	adds	r3, r7, #7
    1ec4:	781b      	ldrb	r3, [r3, #0]
    1ec6:	2b01      	cmp	r3, #1
    1ec8:	d00a      	beq.n	1ee0 <system_apb_clock_set_mask+0x2c>
    1eca:	2b02      	cmp	r3, #2
    1ecc:	d00f      	beq.n	1eee <system_apb_clock_set_mask+0x3a>
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d114      	bne.n	1efc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1ed2:	4b0e      	ldr	r3, [pc, #56]	; (1f0c <system_apb_clock_set_mask+0x58>)
    1ed4:	4a0d      	ldr	r2, [pc, #52]	; (1f0c <system_apb_clock_set_mask+0x58>)
    1ed6:	6991      	ldr	r1, [r2, #24]
    1ed8:	683a      	ldr	r2, [r7, #0]
    1eda:	430a      	orrs	r2, r1
    1edc:	619a      	str	r2, [r3, #24]
			break;
    1ede:	e00f      	b.n	1f00 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1ee0:	4b0a      	ldr	r3, [pc, #40]	; (1f0c <system_apb_clock_set_mask+0x58>)
    1ee2:	4a0a      	ldr	r2, [pc, #40]	; (1f0c <system_apb_clock_set_mask+0x58>)
    1ee4:	69d1      	ldr	r1, [r2, #28]
    1ee6:	683a      	ldr	r2, [r7, #0]
    1ee8:	430a      	orrs	r2, r1
    1eea:	61da      	str	r2, [r3, #28]
			break;
    1eec:	e008      	b.n	1f00 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1eee:	4b07      	ldr	r3, [pc, #28]	; (1f0c <system_apb_clock_set_mask+0x58>)
    1ef0:	4a06      	ldr	r2, [pc, #24]	; (1f0c <system_apb_clock_set_mask+0x58>)
    1ef2:	6a11      	ldr	r1, [r2, #32]
    1ef4:	683a      	ldr	r2, [r7, #0]
    1ef6:	430a      	orrs	r2, r1
    1ef8:	621a      	str	r2, [r3, #32]
			break;
    1efa:	e001      	b.n	1f00 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1efc:	2317      	movs	r3, #23
    1efe:	e000      	b.n	1f02 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1f00:	2300      	movs	r3, #0
}
    1f02:	0018      	movs	r0, r3
    1f04:	46bd      	mov	sp, r7
    1f06:	b002      	add	sp, #8
    1f08:	bd80      	pop	{r7, pc}
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	40000400 	.word	0x40000400

00001f10 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    1f10:	b580      	push	{r7, lr}
    1f12:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1f14:	4b02      	ldr	r3, [pc, #8]	; (1f20 <system_interrupt_enter_critical_section+0x10>)
    1f16:	4798      	blx	r3
}
    1f18:	46c0      	nop			; (mov r8, r8)
    1f1a:	46bd      	mov	sp, r7
    1f1c:	bd80      	pop	{r7, pc}
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	000019d9 	.word	0x000019d9

00001f24 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    1f24:	b580      	push	{r7, lr}
    1f26:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    1f28:	4b02      	ldr	r3, [pc, #8]	; (1f34 <system_interrupt_leave_critical_section+0x10>)
    1f2a:	4798      	blx	r3
}
    1f2c:	46c0      	nop			; (mov r8, r8)
    1f2e:	46bd      	mov	sp, r7
    1f30:	bd80      	pop	{r7, pc}
    1f32:	46c0      	nop			; (mov r8, r8)
    1f34:	00001a2d 	.word	0x00001a2d

00001f38 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    1f38:	b580      	push	{r7, lr}
    1f3a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f3c:	4b05      	ldr	r3, [pc, #20]	; (1f54 <system_gclk_is_syncing+0x1c>)
    1f3e:	785b      	ldrb	r3, [r3, #1]
    1f40:	b2db      	uxtb	r3, r3
    1f42:	b25b      	sxtb	r3, r3
    1f44:	2b00      	cmp	r3, #0
    1f46:	da01      	bge.n	1f4c <system_gclk_is_syncing+0x14>
		return true;
    1f48:	2301      	movs	r3, #1
    1f4a:	e000      	b.n	1f4e <system_gclk_is_syncing+0x16>
	}

	return false;
    1f4c:	2300      	movs	r3, #0
}
    1f4e:	0018      	movs	r0, r3
    1f50:	46bd      	mov	sp, r7
    1f52:	bd80      	pop	{r7, pc}
    1f54:	40000c00 	.word	0x40000c00

00001f58 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    1f58:	b580      	push	{r7, lr}
    1f5a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    1f5c:	2108      	movs	r1, #8
    1f5e:	2000      	movs	r0, #0
    1f60:	4b07      	ldr	r3, [pc, #28]	; (1f80 <system_gclk_init+0x28>)
    1f62:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1f64:	4b07      	ldr	r3, [pc, #28]	; (1f84 <system_gclk_init+0x2c>)
    1f66:	2201      	movs	r2, #1
    1f68:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1f6a:	46c0      	nop			; (mov r8, r8)
    1f6c:	4b05      	ldr	r3, [pc, #20]	; (1f84 <system_gclk_init+0x2c>)
    1f6e:	781b      	ldrb	r3, [r3, #0]
    1f70:	b2db      	uxtb	r3, r3
    1f72:	001a      	movs	r2, r3
    1f74:	2301      	movs	r3, #1
    1f76:	4013      	ands	r3, r2
    1f78:	d1f8      	bne.n	1f6c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	46bd      	mov	sp, r7
    1f7e:	bd80      	pop	{r7, pc}
    1f80:	00001eb5 	.word	0x00001eb5
    1f84:	40000c00 	.word	0x40000c00

00001f88 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1f88:	b580      	push	{r7, lr}
    1f8a:	b086      	sub	sp, #24
    1f8c:	af00      	add	r7, sp, #0
    1f8e:	0002      	movs	r2, r0
    1f90:	6039      	str	r1, [r7, #0]
    1f92:	1dfb      	adds	r3, r7, #7
    1f94:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1f96:	1dfb      	adds	r3, r7, #7
    1f98:	781b      	ldrb	r3, [r3, #0]
    1f9a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    1f9c:	1dfb      	adds	r3, r7, #7
    1f9e:	781b      	ldrb	r3, [r3, #0]
    1fa0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1fa2:	683b      	ldr	r3, [r7, #0]
    1fa4:	781b      	ldrb	r3, [r3, #0]
    1fa6:	021b      	lsls	r3, r3, #8
    1fa8:	001a      	movs	r2, r3
    1faa:	697b      	ldr	r3, [r7, #20]
    1fac:	4313      	orrs	r3, r2
    1fae:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1fb0:	683b      	ldr	r3, [r7, #0]
    1fb2:	785b      	ldrb	r3, [r3, #1]
    1fb4:	2b00      	cmp	r3, #0
    1fb6:	d004      	beq.n	1fc2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1fb8:	697b      	ldr	r3, [r7, #20]
    1fba:	2280      	movs	r2, #128	; 0x80
    1fbc:	02d2      	lsls	r2, r2, #11
    1fbe:	4313      	orrs	r3, r2
    1fc0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1fc2:	683b      	ldr	r3, [r7, #0]
    1fc4:	7a5b      	ldrb	r3, [r3, #9]
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	d004      	beq.n	1fd4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1fca:	697b      	ldr	r3, [r7, #20]
    1fcc:	2280      	movs	r2, #128	; 0x80
    1fce:	0312      	lsls	r2, r2, #12
    1fd0:	4313      	orrs	r3, r2
    1fd2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1fd4:	683b      	ldr	r3, [r7, #0]
    1fd6:	685b      	ldr	r3, [r3, #4]
    1fd8:	2b01      	cmp	r3, #1
    1fda:	d92c      	bls.n	2036 <STACK_SIZE+0x36>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1fdc:	683b      	ldr	r3, [r7, #0]
    1fde:	685a      	ldr	r2, [r3, #4]
    1fe0:	683b      	ldr	r3, [r7, #0]
    1fe2:	685b      	ldr	r3, [r3, #4]
    1fe4:	3b01      	subs	r3, #1
    1fe6:	4013      	ands	r3, r2
    1fe8:	d11a      	bne.n	2020 <STACK_SIZE+0x20>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    1fea:	2300      	movs	r3, #0
    1fec:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1fee:	2302      	movs	r3, #2
    1ff0:	60bb      	str	r3, [r7, #8]
    1ff2:	e005      	b.n	2000 <STACK_SIZE>
						mask <<= 1) {
				div2_count++;
    1ff4:	68fb      	ldr	r3, [r7, #12]
    1ff6:	3301      	adds	r3, #1
    1ff8:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1ffa:	68bb      	ldr	r3, [r7, #8]
    1ffc:	005b      	lsls	r3, r3, #1
    1ffe:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2000:	683b      	ldr	r3, [r7, #0]
    2002:	685a      	ldr	r2, [r3, #4]
    2004:	68bb      	ldr	r3, [r7, #8]
    2006:	429a      	cmp	r2, r3
    2008:	d8f4      	bhi.n	1ff4 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    200a:	68fb      	ldr	r3, [r7, #12]
    200c:	021b      	lsls	r3, r3, #8
    200e:	693a      	ldr	r2, [r7, #16]
    2010:	4313      	orrs	r3, r2
    2012:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2014:	697b      	ldr	r3, [r7, #20]
    2016:	2280      	movs	r2, #128	; 0x80
    2018:	0352      	lsls	r2, r2, #13
    201a:	4313      	orrs	r3, r2
    201c:	617b      	str	r3, [r7, #20]
    201e:	e00a      	b.n	2036 <STACK_SIZE+0x36>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2020:	683b      	ldr	r3, [r7, #0]
    2022:	685b      	ldr	r3, [r3, #4]
    2024:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    2026:	693a      	ldr	r2, [r7, #16]
    2028:	4313      	orrs	r3, r2
    202a:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    202c:	697b      	ldr	r3, [r7, #20]
    202e:	2280      	movs	r2, #128	; 0x80
    2030:	0292      	lsls	r2, r2, #10
    2032:	4313      	orrs	r3, r2
    2034:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2036:	683b      	ldr	r3, [r7, #0]
    2038:	7a1b      	ldrb	r3, [r3, #8]
    203a:	2b00      	cmp	r3, #0
    203c:	d004      	beq.n	2048 <STACK_SIZE+0x48>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    203e:	697b      	ldr	r3, [r7, #20]
    2040:	2280      	movs	r2, #128	; 0x80
    2042:	0392      	lsls	r2, r2, #14
    2044:	4313      	orrs	r3, r2
    2046:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    2048:	46c0      	nop			; (mov r8, r8)
    204a:	4b13      	ldr	r3, [pc, #76]	; (2098 <STACK_SIZE+0x98>)
    204c:	4798      	blx	r3
    204e:	1e03      	subs	r3, r0, #0
    2050:	d1fb      	bne.n	204a <STACK_SIZE+0x4a>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2052:	4b12      	ldr	r3, [pc, #72]	; (209c <STACK_SIZE+0x9c>)
    2054:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2056:	4a12      	ldr	r2, [pc, #72]	; (20a0 <STACK_SIZE+0xa0>)
    2058:	1dfb      	adds	r3, r7, #7
    205a:	781b      	ldrb	r3, [r3, #0]
    205c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    205e:	46c0      	nop			; (mov r8, r8)
    2060:	4b0d      	ldr	r3, [pc, #52]	; (2098 <STACK_SIZE+0x98>)
    2062:	4798      	blx	r3
    2064:	1e03      	subs	r3, r0, #0
    2066:	d1fb      	bne.n	2060 <STACK_SIZE+0x60>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2068:	4b0e      	ldr	r3, [pc, #56]	; (20a4 <STACK_SIZE+0xa4>)
    206a:	693a      	ldr	r2, [r7, #16]
    206c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	4b09      	ldr	r3, [pc, #36]	; (2098 <STACK_SIZE+0x98>)
    2072:	4798      	blx	r3
    2074:	1e03      	subs	r3, r0, #0
    2076:	d1fb      	bne.n	2070 <STACK_SIZE+0x70>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2078:	4b0a      	ldr	r3, [pc, #40]	; (20a4 <STACK_SIZE+0xa4>)
    207a:	4a0a      	ldr	r2, [pc, #40]	; (20a4 <STACK_SIZE+0xa4>)
    207c:	6851      	ldr	r1, [r2, #4]
    207e:	2280      	movs	r2, #128	; 0x80
    2080:	0252      	lsls	r2, r2, #9
    2082:	4011      	ands	r1, r2
    2084:	697a      	ldr	r2, [r7, #20]
    2086:	430a      	orrs	r2, r1
    2088:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    208a:	4b07      	ldr	r3, [pc, #28]	; (20a8 <STACK_SIZE+0xa8>)
    208c:	4798      	blx	r3
}
    208e:	46c0      	nop			; (mov r8, r8)
    2090:	46bd      	mov	sp, r7
    2092:	b006      	add	sp, #24
    2094:	bd80      	pop	{r7, pc}
    2096:	46c0      	nop			; (mov r8, r8)
    2098:	00001f39 	.word	0x00001f39
    209c:	00001f11 	.word	0x00001f11
    20a0:	40000c08 	.word	0x40000c08
    20a4:	40000c00 	.word	0x40000c00
    20a8:	00001f25 	.word	0x00001f25

000020ac <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    20ac:	b580      	push	{r7, lr}
    20ae:	b082      	sub	sp, #8
    20b0:	af00      	add	r7, sp, #0
    20b2:	0002      	movs	r2, r0
    20b4:	1dfb      	adds	r3, r7, #7
    20b6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    20b8:	46c0      	nop			; (mov r8, r8)
    20ba:	4b0e      	ldr	r3, [pc, #56]	; (20f4 <system_gclk_gen_enable+0x48>)
    20bc:	4798      	blx	r3
    20be:	1e03      	subs	r3, r0, #0
    20c0:	d1fb      	bne.n	20ba <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    20c2:	4b0d      	ldr	r3, [pc, #52]	; (20f8 <system_gclk_gen_enable+0x4c>)
    20c4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    20c6:	4a0d      	ldr	r2, [pc, #52]	; (20fc <system_gclk_gen_enable+0x50>)
    20c8:	1dfb      	adds	r3, r7, #7
    20ca:	781b      	ldrb	r3, [r3, #0]
    20cc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    20ce:	46c0      	nop			; (mov r8, r8)
    20d0:	4b08      	ldr	r3, [pc, #32]	; (20f4 <system_gclk_gen_enable+0x48>)
    20d2:	4798      	blx	r3
    20d4:	1e03      	subs	r3, r0, #0
    20d6:	d1fb      	bne.n	20d0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    20d8:	4b09      	ldr	r3, [pc, #36]	; (2100 <system_gclk_gen_enable+0x54>)
    20da:	4a09      	ldr	r2, [pc, #36]	; (2100 <system_gclk_gen_enable+0x54>)
    20dc:	6852      	ldr	r2, [r2, #4]
    20de:	2180      	movs	r1, #128	; 0x80
    20e0:	0249      	lsls	r1, r1, #9
    20e2:	430a      	orrs	r2, r1
    20e4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    20e6:	4b07      	ldr	r3, [pc, #28]	; (2104 <system_gclk_gen_enable+0x58>)
    20e8:	4798      	blx	r3
}
    20ea:	46c0      	nop			; (mov r8, r8)
    20ec:	46bd      	mov	sp, r7
    20ee:	b002      	add	sp, #8
    20f0:	bd80      	pop	{r7, pc}
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	00001f39 	.word	0x00001f39
    20f8:	00001f11 	.word	0x00001f11
    20fc:	40000c04 	.word	0x40000c04
    2100:	40000c00 	.word	0x40000c00
    2104:	00001f25 	.word	0x00001f25

00002108 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2108:	b580      	push	{r7, lr}
    210a:	b086      	sub	sp, #24
    210c:	af00      	add	r7, sp, #0
    210e:	0002      	movs	r2, r0
    2110:	1dfb      	adds	r3, r7, #7
    2112:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2114:	46c0      	nop			; (mov r8, r8)
    2116:	4b2a      	ldr	r3, [pc, #168]	; (21c0 <system_gclk_gen_get_hz+0xb8>)
    2118:	4798      	blx	r3
    211a:	1e03      	subs	r3, r0, #0
    211c:	d1fb      	bne.n	2116 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    211e:	4b29      	ldr	r3, [pc, #164]	; (21c4 <system_gclk_gen_get_hz+0xbc>)
    2120:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2122:	4a29      	ldr	r2, [pc, #164]	; (21c8 <system_gclk_gen_get_hz+0xc0>)
    2124:	1dfb      	adds	r3, r7, #7
    2126:	781b      	ldrb	r3, [r3, #0]
    2128:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	4b24      	ldr	r3, [pc, #144]	; (21c0 <system_gclk_gen_get_hz+0xb8>)
    212e:	4798      	blx	r3
    2130:	1e03      	subs	r3, r0, #0
    2132:	d1fb      	bne.n	212c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2134:	4b25      	ldr	r3, [pc, #148]	; (21cc <system_gclk_gen_get_hz+0xc4>)
    2136:	685b      	ldr	r3, [r3, #4]
    2138:	04db      	lsls	r3, r3, #19
    213a:	0edb      	lsrs	r3, r3, #27
    213c:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    213e:	0018      	movs	r0, r3
    2140:	4b23      	ldr	r3, [pc, #140]	; (21d0 <system_gclk_gen_get_hz+0xc8>)
    2142:	4798      	blx	r3
    2144:	0003      	movs	r3, r0
    2146:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2148:	4a1f      	ldr	r2, [pc, #124]	; (21c8 <system_gclk_gen_get_hz+0xc0>)
    214a:	1dfb      	adds	r3, r7, #7
    214c:	781b      	ldrb	r3, [r3, #0]
    214e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2150:	4b1e      	ldr	r3, [pc, #120]	; (21cc <system_gclk_gen_get_hz+0xc4>)
    2152:	685b      	ldr	r3, [r3, #4]
    2154:	02db      	lsls	r3, r3, #11
    2156:	0fdb      	lsrs	r3, r3, #31
    2158:	b2da      	uxtb	r2, r3
    215a:	2313      	movs	r3, #19
    215c:	18fb      	adds	r3, r7, r3
    215e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2160:	4a1c      	ldr	r2, [pc, #112]	; (21d4 <system_gclk_gen_get_hz+0xcc>)
    2162:	1dfb      	adds	r3, r7, #7
    2164:	781b      	ldrb	r3, [r3, #0]
    2166:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2168:	46c0      	nop			; (mov r8, r8)
    216a:	4b15      	ldr	r3, [pc, #84]	; (21c0 <system_gclk_gen_get_hz+0xb8>)
    216c:	4798      	blx	r3
    216e:	1e03      	subs	r3, r0, #0
    2170:	d1fb      	bne.n	216a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2172:	4b16      	ldr	r3, [pc, #88]	; (21cc <system_gclk_gen_get_hz+0xc4>)
    2174:	689b      	ldr	r3, [r3, #8]
    2176:	021b      	lsls	r3, r3, #8
    2178:	0c1b      	lsrs	r3, r3, #16
    217a:	b29b      	uxth	r3, r3
    217c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    217e:	4b16      	ldr	r3, [pc, #88]	; (21d8 <system_gclk_gen_get_hz+0xd0>)
    2180:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2182:	2313      	movs	r3, #19
    2184:	18fb      	adds	r3, r7, r3
    2186:	781b      	ldrb	r3, [r3, #0]
    2188:	2b00      	cmp	r3, #0
    218a:	d109      	bne.n	21a0 <system_gclk_gen_get_hz+0x98>
    218c:	68fb      	ldr	r3, [r7, #12]
    218e:	2b01      	cmp	r3, #1
    2190:	d906      	bls.n	21a0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    2192:	4b12      	ldr	r3, [pc, #72]	; (21dc <system_gclk_gen_get_hz+0xd4>)
    2194:	68f9      	ldr	r1, [r7, #12]
    2196:	6978      	ldr	r0, [r7, #20]
    2198:	4798      	blx	r3
    219a:	0003      	movs	r3, r0
    219c:	617b      	str	r3, [r7, #20]
    219e:	e00a      	b.n	21b6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    21a0:	2313      	movs	r3, #19
    21a2:	18fb      	adds	r3, r7, r3
    21a4:	781b      	ldrb	r3, [r3, #0]
    21a6:	2b00      	cmp	r3, #0
    21a8:	d005      	beq.n	21b6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    21aa:	68fb      	ldr	r3, [r7, #12]
    21ac:	3301      	adds	r3, #1
    21ae:	697a      	ldr	r2, [r7, #20]
    21b0:	40da      	lsrs	r2, r3
    21b2:	0013      	movs	r3, r2
    21b4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    21b6:	697b      	ldr	r3, [r7, #20]
}
    21b8:	0018      	movs	r0, r3
    21ba:	46bd      	mov	sp, r7
    21bc:	b006      	add	sp, #24
    21be:	bd80      	pop	{r7, pc}
    21c0:	00001f39 	.word	0x00001f39
    21c4:	00001f11 	.word	0x00001f11
    21c8:	40000c04 	.word	0x40000c04
    21cc:	40000c00 	.word	0x40000c00
    21d0:	00001bc9 	.word	0x00001bc9
    21d4:	40000c08 	.word	0x40000c08
    21d8:	00001f25 	.word	0x00001f25
    21dc:	00002e11 	.word	0x00002e11

000021e0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    21e0:	b580      	push	{r7, lr}
    21e2:	b084      	sub	sp, #16
    21e4:	af00      	add	r7, sp, #0
    21e6:	0002      	movs	r2, r0
    21e8:	6039      	str	r1, [r7, #0]
    21ea:	1dfb      	adds	r3, r7, #7
    21ec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    21ee:	1dfb      	adds	r3, r7, #7
    21f0:	781b      	ldrb	r3, [r3, #0]
    21f2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    21f4:	683b      	ldr	r3, [r7, #0]
    21f6:	781b      	ldrb	r3, [r3, #0]
    21f8:	021b      	lsls	r3, r3, #8
    21fa:	001a      	movs	r2, r3
    21fc:	68fb      	ldr	r3, [r7, #12]
    21fe:	4313      	orrs	r3, r2
    2200:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2202:	1dfb      	adds	r3, r7, #7
    2204:	781b      	ldrb	r3, [r3, #0]
    2206:	0018      	movs	r0, r3
    2208:	4b04      	ldr	r3, [pc, #16]	; (221c <system_gclk_chan_set_config+0x3c>)
    220a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    220c:	4b04      	ldr	r3, [pc, #16]	; (2220 <system_gclk_chan_set_config+0x40>)
    220e:	68fa      	ldr	r2, [r7, #12]
    2210:	b292      	uxth	r2, r2
    2212:	805a      	strh	r2, [r3, #2]
}
    2214:	46c0      	nop			; (mov r8, r8)
    2216:	46bd      	mov	sp, r7
    2218:	b004      	add	sp, #16
    221a:	bd80      	pop	{r7, pc}
    221c:	0000226d 	.word	0x0000226d
    2220:	40000c00 	.word	0x40000c00

00002224 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2224:	b580      	push	{r7, lr}
    2226:	b082      	sub	sp, #8
    2228:	af00      	add	r7, sp, #0
    222a:	0002      	movs	r2, r0
    222c:	1dfb      	adds	r3, r7, #7
    222e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2230:	4b0a      	ldr	r3, [pc, #40]	; (225c <system_gclk_chan_enable+0x38>)
    2232:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2234:	4a0a      	ldr	r2, [pc, #40]	; (2260 <system_gclk_chan_enable+0x3c>)
    2236:	1dfb      	adds	r3, r7, #7
    2238:	781b      	ldrb	r3, [r3, #0]
    223a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    223c:	4909      	ldr	r1, [pc, #36]	; (2264 <system_gclk_chan_enable+0x40>)
    223e:	4b09      	ldr	r3, [pc, #36]	; (2264 <system_gclk_chan_enable+0x40>)
    2240:	885b      	ldrh	r3, [r3, #2]
    2242:	b29b      	uxth	r3, r3
    2244:	2280      	movs	r2, #128	; 0x80
    2246:	01d2      	lsls	r2, r2, #7
    2248:	4313      	orrs	r3, r2
    224a:	b29b      	uxth	r3, r3
    224c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    224e:	4b06      	ldr	r3, [pc, #24]	; (2268 <system_gclk_chan_enable+0x44>)
    2250:	4798      	blx	r3
}
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	46bd      	mov	sp, r7
    2256:	b002      	add	sp, #8
    2258:	bd80      	pop	{r7, pc}
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	00001f11 	.word	0x00001f11
    2260:	40000c02 	.word	0x40000c02
    2264:	40000c00 	.word	0x40000c00
    2268:	00001f25 	.word	0x00001f25

0000226c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    226c:	b580      	push	{r7, lr}
    226e:	b084      	sub	sp, #16
    2270:	af00      	add	r7, sp, #0
    2272:	0002      	movs	r2, r0
    2274:	1dfb      	adds	r3, r7, #7
    2276:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2278:	4b1c      	ldr	r3, [pc, #112]	; (22ec <system_gclk_chan_disable+0x80>)
    227a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    227c:	4a1c      	ldr	r2, [pc, #112]	; (22f0 <system_gclk_chan_disable+0x84>)
    227e:	1dfb      	adds	r3, r7, #7
    2280:	781b      	ldrb	r3, [r3, #0]
    2282:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2284:	4b1b      	ldr	r3, [pc, #108]	; (22f4 <system_gclk_chan_disable+0x88>)
    2286:	885b      	ldrh	r3, [r3, #2]
    2288:	051b      	lsls	r3, r3, #20
    228a:	0f1b      	lsrs	r3, r3, #28
    228c:	b2db      	uxtb	r3, r3
    228e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    2290:	4a18      	ldr	r2, [pc, #96]	; (22f4 <system_gclk_chan_disable+0x88>)
    2292:	8853      	ldrh	r3, [r2, #2]
    2294:	4918      	ldr	r1, [pc, #96]	; (22f8 <system_gclk_chan_disable+0x8c>)
    2296:	400b      	ands	r3, r1
    2298:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    229a:	4a16      	ldr	r2, [pc, #88]	; (22f4 <system_gclk_chan_disable+0x88>)
    229c:	4b15      	ldr	r3, [pc, #84]	; (22f4 <system_gclk_chan_disable+0x88>)
    229e:	885b      	ldrh	r3, [r3, #2]
    22a0:	b29b      	uxth	r3, r3
    22a2:	4916      	ldr	r1, [pc, #88]	; (22fc <system_gclk_chan_disable+0x90>)
    22a4:	400b      	ands	r3, r1
    22a6:	b29b      	uxth	r3, r3
    22a8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    22aa:	46c0      	nop			; (mov r8, r8)
    22ac:	4b11      	ldr	r3, [pc, #68]	; (22f4 <system_gclk_chan_disable+0x88>)
    22ae:	885b      	ldrh	r3, [r3, #2]
    22b0:	b29b      	uxth	r3, r3
    22b2:	001a      	movs	r2, r3
    22b4:	2380      	movs	r3, #128	; 0x80
    22b6:	01db      	lsls	r3, r3, #7
    22b8:	4013      	ands	r3, r2
    22ba:	d1f7      	bne.n	22ac <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    22bc:	4a0d      	ldr	r2, [pc, #52]	; (22f4 <system_gclk_chan_disable+0x88>)
    22be:	68fb      	ldr	r3, [r7, #12]
    22c0:	b2db      	uxtb	r3, r3
    22c2:	1c19      	adds	r1, r3, #0
    22c4:	230f      	movs	r3, #15
    22c6:	400b      	ands	r3, r1
    22c8:	b2d9      	uxtb	r1, r3
    22ca:	8853      	ldrh	r3, [r2, #2]
    22cc:	1c08      	adds	r0, r1, #0
    22ce:	210f      	movs	r1, #15
    22d0:	4001      	ands	r1, r0
    22d2:	0208      	lsls	r0, r1, #8
    22d4:	4908      	ldr	r1, [pc, #32]	; (22f8 <system_gclk_chan_disable+0x8c>)
    22d6:	400b      	ands	r3, r1
    22d8:	1c19      	adds	r1, r3, #0
    22da:	1c03      	adds	r3, r0, #0
    22dc:	430b      	orrs	r3, r1
    22de:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    22e0:	4b07      	ldr	r3, [pc, #28]	; (2300 <system_gclk_chan_disable+0x94>)
    22e2:	4798      	blx	r3
}
    22e4:	46c0      	nop			; (mov r8, r8)
    22e6:	46bd      	mov	sp, r7
    22e8:	b004      	add	sp, #16
    22ea:	bd80      	pop	{r7, pc}
    22ec:	00001f11 	.word	0x00001f11
    22f0:	40000c02 	.word	0x40000c02
    22f4:	40000c00 	.word	0x40000c00
    22f8:	fffff0ff 	.word	0xfffff0ff
    22fc:	ffffbfff 	.word	0xffffbfff
    2300:	00001f25 	.word	0x00001f25

00002304 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2304:	b580      	push	{r7, lr}
    2306:	b084      	sub	sp, #16
    2308:	af00      	add	r7, sp, #0
    230a:	0002      	movs	r2, r0
    230c:	1dfb      	adds	r3, r7, #7
    230e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    2310:	4b0d      	ldr	r3, [pc, #52]	; (2348 <system_gclk_chan_get_hz+0x44>)
    2312:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2314:	4a0d      	ldr	r2, [pc, #52]	; (234c <system_gclk_chan_get_hz+0x48>)
    2316:	1dfb      	adds	r3, r7, #7
    2318:	781b      	ldrb	r3, [r3, #0]
    231a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    231c:	4b0c      	ldr	r3, [pc, #48]	; (2350 <system_gclk_chan_get_hz+0x4c>)
    231e:	885b      	ldrh	r3, [r3, #2]
    2320:	051b      	lsls	r3, r3, #20
    2322:	0f1b      	lsrs	r3, r3, #28
    2324:	b2da      	uxtb	r2, r3
    2326:	230f      	movs	r3, #15
    2328:	18fb      	adds	r3, r7, r3
    232a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    232c:	4b09      	ldr	r3, [pc, #36]	; (2354 <system_gclk_chan_get_hz+0x50>)
    232e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2330:	230f      	movs	r3, #15
    2332:	18fb      	adds	r3, r7, r3
    2334:	781b      	ldrb	r3, [r3, #0]
    2336:	0018      	movs	r0, r3
    2338:	4b07      	ldr	r3, [pc, #28]	; (2358 <system_gclk_chan_get_hz+0x54>)
    233a:	4798      	blx	r3
    233c:	0003      	movs	r3, r0
}
    233e:	0018      	movs	r0, r3
    2340:	46bd      	mov	sp, r7
    2342:	b004      	add	sp, #16
    2344:	bd80      	pop	{r7, pc}
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	00001f11 	.word	0x00001f11
    234c:	40000c02 	.word	0x40000c02
    2350:	40000c00 	.word	0x40000c00
    2354:	00001f25 	.word	0x00001f25
    2358:	00002109 	.word	0x00002109

0000235c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    235c:	b580      	push	{r7, lr}
    235e:	b084      	sub	sp, #16
    2360:	af00      	add	r7, sp, #0
    2362:	0002      	movs	r2, r0
    2364:	1dfb      	adds	r3, r7, #7
    2366:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2368:	230f      	movs	r3, #15
    236a:	18fb      	adds	r3, r7, r3
    236c:	1dfa      	adds	r2, r7, #7
    236e:	7812      	ldrb	r2, [r2, #0]
    2370:	09d2      	lsrs	r2, r2, #7
    2372:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2374:	230e      	movs	r3, #14
    2376:	18fb      	adds	r3, r7, r3
    2378:	1dfa      	adds	r2, r7, #7
    237a:	7812      	ldrb	r2, [r2, #0]
    237c:	0952      	lsrs	r2, r2, #5
    237e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2380:	4b0d      	ldr	r3, [pc, #52]	; (23b8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2382:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2384:	230f      	movs	r3, #15
    2386:	18fb      	adds	r3, r7, r3
    2388:	781b      	ldrb	r3, [r3, #0]
    238a:	2b00      	cmp	r3, #0
    238c:	d10f      	bne.n	23ae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    238e:	230f      	movs	r3, #15
    2390:	18fb      	adds	r3, r7, r3
    2392:	781b      	ldrb	r3, [r3, #0]
    2394:	009b      	lsls	r3, r3, #2
    2396:	2210      	movs	r2, #16
    2398:	4694      	mov	ip, r2
    239a:	44bc      	add	ip, r7
    239c:	4463      	add	r3, ip
    239e:	3b08      	subs	r3, #8
    23a0:	681a      	ldr	r2, [r3, #0]
    23a2:	230e      	movs	r3, #14
    23a4:	18fb      	adds	r3, r7, r3
    23a6:	781b      	ldrb	r3, [r3, #0]
    23a8:	01db      	lsls	r3, r3, #7
    23aa:	18d3      	adds	r3, r2, r3
    23ac:	e000      	b.n	23b0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    23ae:	2300      	movs	r3, #0
	}
}
    23b0:	0018      	movs	r0, r3
    23b2:	46bd      	mov	sp, r7
    23b4:	b004      	add	sp, #16
    23b6:	bd80      	pop	{r7, pc}
    23b8:	41004400 	.word	0x41004400

000023bc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    23bc:	b580      	push	{r7, lr}
    23be:	b088      	sub	sp, #32
    23c0:	af00      	add	r7, sp, #0
    23c2:	60f8      	str	r0, [r7, #12]
    23c4:	60b9      	str	r1, [r7, #8]
    23c6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    23c8:	2300      	movs	r3, #0
    23ca:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	78db      	ldrb	r3, [r3, #3]
    23d0:	2201      	movs	r2, #1
    23d2:	4053      	eors	r3, r2
    23d4:	b2db      	uxtb	r3, r3
    23d6:	2b00      	cmp	r3, #0
    23d8:	d035      	beq.n	2446 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    23da:	687b      	ldr	r3, [r7, #4]
    23dc:	781b      	ldrb	r3, [r3, #0]
    23de:	2b80      	cmp	r3, #128	; 0x80
    23e0:	d00b      	beq.n	23fa <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    23e2:	69fb      	ldr	r3, [r7, #28]
    23e4:	2280      	movs	r2, #128	; 0x80
    23e6:	0252      	lsls	r2, r2, #9
    23e8:	4313      	orrs	r3, r2
    23ea:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    23ec:	687b      	ldr	r3, [r7, #4]
    23ee:	781b      	ldrb	r3, [r3, #0]
    23f0:	061b      	lsls	r3, r3, #24
    23f2:	001a      	movs	r2, r3
    23f4:	69fb      	ldr	r3, [r7, #28]
    23f6:	4313      	orrs	r3, r2
    23f8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    23fa:	687b      	ldr	r3, [r7, #4]
    23fc:	785b      	ldrb	r3, [r3, #1]
    23fe:	2b00      	cmp	r3, #0
    2400:	d003      	beq.n	240a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2402:	687b      	ldr	r3, [r7, #4]
    2404:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2406:	2b02      	cmp	r3, #2
    2408:	d110      	bne.n	242c <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    240a:	69fb      	ldr	r3, [r7, #28]
    240c:	2280      	movs	r2, #128	; 0x80
    240e:	0292      	lsls	r2, r2, #10
    2410:	4313      	orrs	r3, r2
    2412:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2414:	687b      	ldr	r3, [r7, #4]
    2416:	789b      	ldrb	r3, [r3, #2]
    2418:	2b00      	cmp	r3, #0
    241a:	d004      	beq.n	2426 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    241c:	69fb      	ldr	r3, [r7, #28]
    241e:	2280      	movs	r2, #128	; 0x80
    2420:	02d2      	lsls	r2, r2, #11
    2422:	4313      	orrs	r3, r2
    2424:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2426:	68fb      	ldr	r3, [r7, #12]
    2428:	68ba      	ldr	r2, [r7, #8]
    242a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    242c:	687b      	ldr	r3, [r7, #4]
    242e:	785b      	ldrb	r3, [r3, #1]
    2430:	2b01      	cmp	r3, #1
    2432:	d003      	beq.n	243c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2434:	687b      	ldr	r3, [r7, #4]
    2436:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2438:	2b02      	cmp	r3, #2
    243a:	d107      	bne.n	244c <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    243c:	69fb      	ldr	r3, [r7, #28]
    243e:	4a22      	ldr	r2, [pc, #136]	; (24c8 <_system_pinmux_config+0x10c>)
    2440:	4013      	ands	r3, r2
    2442:	61fb      	str	r3, [r7, #28]
    2444:	e002      	b.n	244c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    2446:	68fb      	ldr	r3, [r7, #12]
    2448:	68ba      	ldr	r2, [r7, #8]
    244a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    244c:	68bb      	ldr	r3, [r7, #8]
    244e:	041b      	lsls	r3, r3, #16
    2450:	0c1b      	lsrs	r3, r3, #16
    2452:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2454:	68bb      	ldr	r3, [r7, #8]
    2456:	0c1b      	lsrs	r3, r3, #16
    2458:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    245a:	69ba      	ldr	r2, [r7, #24]
    245c:	69fb      	ldr	r3, [r7, #28]
    245e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2460:	22a0      	movs	r2, #160	; 0xa0
    2462:	05d2      	lsls	r2, r2, #23
    2464:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2466:	68fb      	ldr	r3, [r7, #12]
    2468:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    246a:	697a      	ldr	r2, [r7, #20]
    246c:	69fb      	ldr	r3, [r7, #28]
    246e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2470:	22d0      	movs	r2, #208	; 0xd0
    2472:	0612      	lsls	r2, r2, #24
    2474:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2476:	68fb      	ldr	r3, [r7, #12]
    2478:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    247a:	687b      	ldr	r3, [r7, #4]
    247c:	78db      	ldrb	r3, [r3, #3]
    247e:	2201      	movs	r2, #1
    2480:	4053      	eors	r3, r2
    2482:	b2db      	uxtb	r3, r3
    2484:	2b00      	cmp	r3, #0
    2486:	d01a      	beq.n	24be <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2488:	69fa      	ldr	r2, [r7, #28]
    248a:	2380      	movs	r3, #128	; 0x80
    248c:	02db      	lsls	r3, r3, #11
    248e:	4013      	ands	r3, r2
    2490:	d00a      	beq.n	24a8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2492:	687b      	ldr	r3, [r7, #4]
    2494:	789b      	ldrb	r3, [r3, #2]
    2496:	2b01      	cmp	r3, #1
    2498:	d103      	bne.n	24a2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    249a:	68fb      	ldr	r3, [r7, #12]
    249c:	68ba      	ldr	r2, [r7, #8]
    249e:	619a      	str	r2, [r3, #24]
    24a0:	e002      	b.n	24a8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    24a2:	68fb      	ldr	r3, [r7, #12]
    24a4:	68ba      	ldr	r2, [r7, #8]
    24a6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    24a8:	687b      	ldr	r3, [r7, #4]
    24aa:	785b      	ldrb	r3, [r3, #1]
    24ac:	2b01      	cmp	r3, #1
    24ae:	d003      	beq.n	24b8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    24b0:	687b      	ldr	r3, [r7, #4]
    24b2:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    24b4:	2b02      	cmp	r3, #2
    24b6:	d102      	bne.n	24be <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    24b8:	68fb      	ldr	r3, [r7, #12]
    24ba:	68ba      	ldr	r2, [r7, #8]
    24bc:	609a      	str	r2, [r3, #8]
		}
	}
}
    24be:	46c0      	nop			; (mov r8, r8)
    24c0:	46bd      	mov	sp, r7
    24c2:	b008      	add	sp, #32
    24c4:	bd80      	pop	{r7, pc}
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	fffbffff 	.word	0xfffbffff

000024cc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    24cc:	b580      	push	{r7, lr}
    24ce:	b084      	sub	sp, #16
    24d0:	af00      	add	r7, sp, #0
    24d2:	0002      	movs	r2, r0
    24d4:	6039      	str	r1, [r7, #0]
    24d6:	1dfb      	adds	r3, r7, #7
    24d8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    24da:	1dfb      	adds	r3, r7, #7
    24dc:	781b      	ldrb	r3, [r3, #0]
    24de:	0018      	movs	r0, r3
    24e0:	4b0a      	ldr	r3, [pc, #40]	; (250c <system_pinmux_pin_set_config+0x40>)
    24e2:	4798      	blx	r3
    24e4:	0003      	movs	r3, r0
    24e6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    24e8:	1dfb      	adds	r3, r7, #7
    24ea:	781b      	ldrb	r3, [r3, #0]
    24ec:	221f      	movs	r2, #31
    24ee:	4013      	ands	r3, r2
    24f0:	2201      	movs	r2, #1
    24f2:	409a      	lsls	r2, r3
    24f4:	0013      	movs	r3, r2
    24f6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    24f8:	683a      	ldr	r2, [r7, #0]
    24fa:	68b9      	ldr	r1, [r7, #8]
    24fc:	68fb      	ldr	r3, [r7, #12]
    24fe:	0018      	movs	r0, r3
    2500:	4b03      	ldr	r3, [pc, #12]	; (2510 <system_pinmux_pin_set_config+0x44>)
    2502:	4798      	blx	r3
}
    2504:	46c0      	nop			; (mov r8, r8)
    2506:	46bd      	mov	sp, r7
    2508:	b004      	add	sp, #16
    250a:	bd80      	pop	{r7, pc}
    250c:	0000235d 	.word	0x0000235d
    2510:	000023bd 	.word	0x000023bd

00002514 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    2514:	b580      	push	{r7, lr}
    2516:	af00      	add	r7, sp, #0
	return;
    2518:	46c0      	nop			; (mov r8, r8)
}
    251a:	46bd      	mov	sp, r7
    251c:	bd80      	pop	{r7, pc}
    251e:	46c0      	nop			; (mov r8, r8)

00002520 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2520:	b580      	push	{r7, lr}
    2522:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2524:	4b06      	ldr	r3, [pc, #24]	; (2540 <system_init+0x20>)
    2526:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2528:	4b06      	ldr	r3, [pc, #24]	; (2544 <system_init+0x24>)
    252a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    252c:	4b06      	ldr	r3, [pc, #24]	; (2548 <system_init+0x28>)
    252e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2530:	4b06      	ldr	r3, [pc, #24]	; (254c <system_init+0x2c>)
    2532:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2534:	4b06      	ldr	r3, [pc, #24]	; (2550 <system_init+0x30>)
    2536:	4798      	blx	r3
}
    2538:	46c0      	nop			; (mov r8, r8)
    253a:	46bd      	mov	sp, r7
    253c:	bd80      	pop	{r7, pc}
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	00001de1 	.word	0x00001de1
    2544:	000019cd 	.word	0x000019cd
    2548:	00002515 	.word	0x00002515
    254c:	00002515 	.word	0x00002515
    2550:	00002515 	.word	0x00002515

00002554 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2554:	b580      	push	{r7, lr}
    2556:	b082      	sub	sp, #8
    2558:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    255a:	4b2f      	ldr	r3, [pc, #188]	; (2618 <Reset_Handler+0xc4>)
    255c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    255e:	4b2f      	ldr	r3, [pc, #188]	; (261c <Reset_Handler+0xc8>)
    2560:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    2562:	687a      	ldr	r2, [r7, #4]
    2564:	683b      	ldr	r3, [r7, #0]
    2566:	429a      	cmp	r2, r3
    2568:	d00c      	beq.n	2584 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    256a:	e007      	b.n	257c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    256c:	683b      	ldr	r3, [r7, #0]
    256e:	1d1a      	adds	r2, r3, #4
    2570:	603a      	str	r2, [r7, #0]
    2572:	687a      	ldr	r2, [r7, #4]
    2574:	1d11      	adds	r1, r2, #4
    2576:	6079      	str	r1, [r7, #4]
    2578:	6812      	ldr	r2, [r2, #0]
    257a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    257c:	683a      	ldr	r2, [r7, #0]
    257e:	4b28      	ldr	r3, [pc, #160]	; (2620 <Reset_Handler+0xcc>)
    2580:	429a      	cmp	r2, r3
    2582:	d3f3      	bcc.n	256c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2584:	4b27      	ldr	r3, [pc, #156]	; (2624 <Reset_Handler+0xd0>)
    2586:	603b      	str	r3, [r7, #0]
    2588:	e004      	b.n	2594 <Reset_Handler+0x40>
                *pDest++ = 0;
    258a:	683b      	ldr	r3, [r7, #0]
    258c:	1d1a      	adds	r2, r3, #4
    258e:	603a      	str	r2, [r7, #0]
    2590:	2200      	movs	r2, #0
    2592:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2594:	683a      	ldr	r2, [r7, #0]
    2596:	4b24      	ldr	r3, [pc, #144]	; (2628 <Reset_Handler+0xd4>)
    2598:	429a      	cmp	r2, r3
    259a:	d3f6      	bcc.n	258a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    259c:	4b23      	ldr	r3, [pc, #140]	; (262c <Reset_Handler+0xd8>)
    259e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    25a0:	4b23      	ldr	r3, [pc, #140]	; (2630 <Reset_Handler+0xdc>)
    25a2:	687a      	ldr	r2, [r7, #4]
    25a4:	21ff      	movs	r1, #255	; 0xff
    25a6:	438a      	bics	r2, r1
    25a8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    25aa:	4a22      	ldr	r2, [pc, #136]	; (2634 <Reset_Handler+0xe0>)
    25ac:	2390      	movs	r3, #144	; 0x90
    25ae:	005b      	lsls	r3, r3, #1
    25b0:	2102      	movs	r1, #2
    25b2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    25b4:	4a20      	ldr	r2, [pc, #128]	; (2638 <Reset_Handler+0xe4>)
    25b6:	78d3      	ldrb	r3, [r2, #3]
    25b8:	2103      	movs	r1, #3
    25ba:	438b      	bics	r3, r1
    25bc:	1c19      	adds	r1, r3, #0
    25be:	2302      	movs	r3, #2
    25c0:	430b      	orrs	r3, r1
    25c2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    25c4:	4a1c      	ldr	r2, [pc, #112]	; (2638 <Reset_Handler+0xe4>)
    25c6:	78d3      	ldrb	r3, [r2, #3]
    25c8:	210c      	movs	r1, #12
    25ca:	438b      	bics	r3, r1
    25cc:	1c19      	adds	r1, r3, #0
    25ce:	2308      	movs	r3, #8
    25d0:	430b      	orrs	r3, r1
    25d2:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    25d4:	4a19      	ldr	r2, [pc, #100]	; (263c <Reset_Handler+0xe8>)
    25d6:	7b93      	ldrb	r3, [r2, #14]
    25d8:	2130      	movs	r1, #48	; 0x30
    25da:	438b      	bics	r3, r1
    25dc:	1c19      	adds	r1, r3, #0
    25de:	2320      	movs	r3, #32
    25e0:	430b      	orrs	r3, r1
    25e2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    25e4:	4a15      	ldr	r2, [pc, #84]	; (263c <Reset_Handler+0xe8>)
    25e6:	7b93      	ldrb	r3, [r2, #14]
    25e8:	210c      	movs	r1, #12
    25ea:	438b      	bics	r3, r1
    25ec:	1c19      	adds	r1, r3, #0
    25ee:	2308      	movs	r3, #8
    25f0:	430b      	orrs	r3, r1
    25f2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    25f4:	4a11      	ldr	r2, [pc, #68]	; (263c <Reset_Handler+0xe8>)
    25f6:	7b93      	ldrb	r3, [r2, #14]
    25f8:	2103      	movs	r1, #3
    25fa:	438b      	bics	r3, r1
    25fc:	1c19      	adds	r1, r3, #0
    25fe:	2302      	movs	r3, #2
    2600:	430b      	orrs	r3, r1
    2602:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2604:	4a0e      	ldr	r2, [pc, #56]	; (2640 <Reset_Handler+0xec>)
    2606:	6853      	ldr	r3, [r2, #4]
    2608:	2180      	movs	r1, #128	; 0x80
    260a:	430b      	orrs	r3, r1
    260c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    260e:	4b0d      	ldr	r3, [pc, #52]	; (2644 <Reset_Handler+0xf0>)
    2610:	4798      	blx	r3

        /* Branch to main function */
        main();
    2612:	4b0d      	ldr	r3, [pc, #52]	; (2648 <Reset_Handler+0xf4>)
    2614:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    2616:	e7fe      	b.n	2616 <Reset_Handler+0xc2>
    2618:	00004350 	.word	0x00004350
    261c:	20000000 	.word	0x20000000
    2620:	20000070 	.word	0x20000070
    2624:	20000070 	.word	0x20000070
    2628:	20000138 	.word	0x20000138
    262c:	00000000 	.word	0x00000000
    2630:	e000ed00 	.word	0xe000ed00
    2634:	41007000 	.word	0x41007000
    2638:	41005000 	.word	0x41005000
    263c:	41004800 	.word	0x41004800
    2640:	41004000 	.word	0x41004000
    2644:	00002f81 	.word	0x00002f81
    2648:	00002c95 	.word	0x00002c95

0000264c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    264c:	b580      	push	{r7, lr}
    264e:	af00      	add	r7, sp, #0
        while (1) {
        }
    2650:	e7fe      	b.n	2650 <Dummy_Handler+0x4>
    2652:	46c0      	nop			; (mov r8, r8)

00002654 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2654:	b580      	push	{r7, lr}
    2656:	b084      	sub	sp, #16
    2658:	af00      	add	r7, sp, #0
    265a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    265c:	4b0a      	ldr	r3, [pc, #40]	; (2688 <_sbrk+0x34>)
    265e:	681b      	ldr	r3, [r3, #0]
    2660:	2b00      	cmp	r3, #0
    2662:	d102      	bne.n	266a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    2664:	4b08      	ldr	r3, [pc, #32]	; (2688 <_sbrk+0x34>)
    2666:	4a09      	ldr	r2, [pc, #36]	; (268c <_sbrk+0x38>)
    2668:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    266a:	4b07      	ldr	r3, [pc, #28]	; (2688 <_sbrk+0x34>)
    266c:	681b      	ldr	r3, [r3, #0]
    266e:	60fb      	str	r3, [r7, #12]

	heap += incr;
    2670:	4b05      	ldr	r3, [pc, #20]	; (2688 <_sbrk+0x34>)
    2672:	681a      	ldr	r2, [r3, #0]
    2674:	687b      	ldr	r3, [r7, #4]
    2676:	18d2      	adds	r2, r2, r3
    2678:	4b03      	ldr	r3, [pc, #12]	; (2688 <_sbrk+0x34>)
    267a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    267c:	68fb      	ldr	r3, [r7, #12]
}
    267e:	0018      	movs	r0, r3
    2680:	46bd      	mov	sp, r7
    2682:	b004      	add	sp, #16
    2684:	bd80      	pop	{r7, pc}
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	200000d0 	.word	0x200000d0
    268c:	20002138 	.word	0x20002138

00002690 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    2690:	b580      	push	{r7, lr}
    2692:	b082      	sub	sp, #8
    2694:	af00      	add	r7, sp, #0
    2696:	6078      	str	r0, [r7, #4]
	return -1;
    2698:	2301      	movs	r3, #1
    269a:	425b      	negs	r3, r3
}
    269c:	0018      	movs	r0, r3
    269e:	46bd      	mov	sp, r7
    26a0:	b002      	add	sp, #8
    26a2:	bd80      	pop	{r7, pc}

000026a4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    26a4:	b580      	push	{r7, lr}
    26a6:	b082      	sub	sp, #8
    26a8:	af00      	add	r7, sp, #0
    26aa:	6078      	str	r0, [r7, #4]
    26ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    26ae:	683b      	ldr	r3, [r7, #0]
    26b0:	2280      	movs	r2, #128	; 0x80
    26b2:	0192      	lsls	r2, r2, #6
    26b4:	605a      	str	r2, [r3, #4]

	return 0;
    26b6:	2300      	movs	r3, #0
}
    26b8:	0018      	movs	r0, r3
    26ba:	46bd      	mov	sp, r7
    26bc:	b002      	add	sp, #8
    26be:	bd80      	pop	{r7, pc}

000026c0 <_isatty>:

extern int _isatty(int file)
{
    26c0:	b580      	push	{r7, lr}
    26c2:	b082      	sub	sp, #8
    26c4:	af00      	add	r7, sp, #0
    26c6:	6078      	str	r0, [r7, #4]
	return 1;
    26c8:	2301      	movs	r3, #1
}
    26ca:	0018      	movs	r0, r3
    26cc:	46bd      	mov	sp, r7
    26ce:	b002      	add	sp, #8
    26d0:	bd80      	pop	{r7, pc}
    26d2:	46c0      	nop			; (mov r8, r8)

000026d4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    26d4:	b580      	push	{r7, lr}
    26d6:	b084      	sub	sp, #16
    26d8:	af00      	add	r7, sp, #0
    26da:	60f8      	str	r0, [r7, #12]
    26dc:	60b9      	str	r1, [r7, #8]
    26de:	607a      	str	r2, [r7, #4]
	return 0;
    26e0:	2300      	movs	r3, #0
}
    26e2:	0018      	movs	r0, r3
    26e4:	46bd      	mov	sp, r7
    26e6:	b004      	add	sp, #16
    26e8:	bd80      	pop	{r7, pc}
    26ea:	46c0      	nop			; (mov r8, r8)

000026ec <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    26ec:	b580      	push	{r7, lr}
    26ee:	b084      	sub	sp, #16
    26f0:	af00      	add	r7, sp, #0
    26f2:	0002      	movs	r2, r0
    26f4:	1dfb      	adds	r3, r7, #7
    26f6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    26f8:	230f      	movs	r3, #15
    26fa:	18fb      	adds	r3, r7, r3
    26fc:	1dfa      	adds	r2, r7, #7
    26fe:	7812      	ldrb	r2, [r2, #0]
    2700:	09d2      	lsrs	r2, r2, #7
    2702:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2704:	230e      	movs	r3, #14
    2706:	18fb      	adds	r3, r7, r3
    2708:	1dfa      	adds	r2, r7, #7
    270a:	7812      	ldrb	r2, [r2, #0]
    270c:	0952      	lsrs	r2, r2, #5
    270e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2710:	4b0d      	ldr	r3, [pc, #52]	; (2748 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2712:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2714:	230f      	movs	r3, #15
    2716:	18fb      	adds	r3, r7, r3
    2718:	781b      	ldrb	r3, [r3, #0]
    271a:	2b00      	cmp	r3, #0
    271c:	d10f      	bne.n	273e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    271e:	230f      	movs	r3, #15
    2720:	18fb      	adds	r3, r7, r3
    2722:	781b      	ldrb	r3, [r3, #0]
    2724:	009b      	lsls	r3, r3, #2
    2726:	2210      	movs	r2, #16
    2728:	4694      	mov	ip, r2
    272a:	44bc      	add	ip, r7
    272c:	4463      	add	r3, ip
    272e:	3b08      	subs	r3, #8
    2730:	681a      	ldr	r2, [r3, #0]
    2732:	230e      	movs	r3, #14
    2734:	18fb      	adds	r3, r7, r3
    2736:	781b      	ldrb	r3, [r3, #0]
    2738:	01db      	lsls	r3, r3, #7
    273a:	18d3      	adds	r3, r2, r3
    273c:	e000      	b.n	2740 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    273e:	2300      	movs	r3, #0
	}
}
    2740:	0018      	movs	r0, r3
    2742:	46bd      	mov	sp, r7
    2744:	b004      	add	sp, #16
    2746:	bd80      	pop	{r7, pc}
    2748:	41004400 	.word	0x41004400

0000274c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    274c:	b580      	push	{r7, lr}
    274e:	b082      	sub	sp, #8
    2750:	af00      	add	r7, sp, #0
    2752:	0002      	movs	r2, r0
    2754:	1dfb      	adds	r3, r7, #7
    2756:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2758:	1dfb      	adds	r3, r7, #7
    275a:	781b      	ldrb	r3, [r3, #0]
    275c:	0018      	movs	r0, r3
    275e:	4b03      	ldr	r3, [pc, #12]	; (276c <port_get_group_from_gpio_pin+0x20>)
    2760:	4798      	blx	r3
    2762:	0003      	movs	r3, r0
}
    2764:	0018      	movs	r0, r3
    2766:	46bd      	mov	sp, r7
    2768:	b002      	add	sp, #8
    276a:	bd80      	pop	{r7, pc}
    276c:	000026ed 	.word	0x000026ed

00002770 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    2770:	b580      	push	{r7, lr}
    2772:	b082      	sub	sp, #8
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	2200      	movs	r2, #0
    277c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    277e:	687b      	ldr	r3, [r7, #4]
    2780:	2201      	movs	r2, #1
    2782:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2784:	687b      	ldr	r3, [r7, #4]
    2786:	2200      	movs	r2, #0
    2788:	709a      	strb	r2, [r3, #2]
}
    278a:	46c0      	nop			; (mov r8, r8)
    278c:	46bd      	mov	sp, r7
    278e:	b002      	add	sp, #8
    2790:	bd80      	pop	{r7, pc}
    2792:	46c0      	nop			; (mov r8, r8)

00002794 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    2794:	b580      	push	{r7, lr}
    2796:	b084      	sub	sp, #16
    2798:	af00      	add	r7, sp, #0
    279a:	0002      	movs	r2, r0
    279c:	1dfb      	adds	r3, r7, #7
    279e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    27a0:	1dfb      	adds	r3, r7, #7
    27a2:	781b      	ldrb	r3, [r3, #0]
    27a4:	0018      	movs	r0, r3
    27a6:	4b0b      	ldr	r3, [pc, #44]	; (27d4 <port_pin_get_input_level+0x40>)
    27a8:	4798      	blx	r3
    27aa:	0003      	movs	r3, r0
    27ac:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    27ae:	1dfb      	adds	r3, r7, #7
    27b0:	781b      	ldrb	r3, [r3, #0]
    27b2:	221f      	movs	r2, #31
    27b4:	4013      	ands	r3, r2
    27b6:	2201      	movs	r2, #1
    27b8:	409a      	lsls	r2, r3
    27ba:	0013      	movs	r3, r2
    27bc:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    27be:	68fb      	ldr	r3, [r7, #12]
    27c0:	6a1b      	ldr	r3, [r3, #32]
    27c2:	68ba      	ldr	r2, [r7, #8]
    27c4:	4013      	ands	r3, r2
    27c6:	1e5a      	subs	r2, r3, #1
    27c8:	4193      	sbcs	r3, r2
    27ca:	b2db      	uxtb	r3, r3
}
    27cc:	0018      	movs	r0, r3
    27ce:	46bd      	mov	sp, r7
    27d0:	b004      	add	sp, #16
    27d2:	bd80      	pop	{r7, pc}
    27d4:	0000274d 	.word	0x0000274d

000027d8 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    27d8:	b580      	push	{r7, lr}
    27da:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    27dc:	4b04      	ldr	r3, [pc, #16]	; (27f0 <system_interrupt_enable_global+0x18>)
    27de:	2201      	movs	r2, #1
    27e0:	701a      	strb	r2, [r3, #0]
    27e2:	f3bf 8f5f 	dmb	sy
    27e6:	b662      	cpsie	i
}
    27e8:	46c0      	nop			; (mov r8, r8)
    27ea:	46bd      	mov	sp, r7
    27ec:	bd80      	pop	{r7, pc}
    27ee:	46c0      	nop			; (mov r8, r8)
    27f0:	20000008 	.word	0x20000008

000027f4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    27f4:	b580      	push	{r7, lr}
    27f6:	b082      	sub	sp, #8
    27f8:	af00      	add	r7, sp, #0
    27fa:	0002      	movs	r2, r0
    27fc:	1dfb      	adds	r3, r7, #7
    27fe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2800:	4b06      	ldr	r3, [pc, #24]	; (281c <system_interrupt_enable+0x28>)
    2802:	1dfa      	adds	r2, r7, #7
    2804:	7812      	ldrb	r2, [r2, #0]
    2806:	0011      	movs	r1, r2
    2808:	221f      	movs	r2, #31
    280a:	400a      	ands	r2, r1
    280c:	2101      	movs	r1, #1
    280e:	4091      	lsls	r1, r2
    2810:	000a      	movs	r2, r1
    2812:	601a      	str	r2, [r3, #0]
}
    2814:	46c0      	nop			; (mov r8, r8)
    2816:	46bd      	mov	sp, r7
    2818:	b002      	add	sp, #8
    281a:	bd80      	pop	{r7, pc}
    281c:	e000e100 	.word	0xe000e100

00002820 <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
    2820:	b580      	push	{r7, lr}
    2822:	b082      	sub	sp, #8
    2824:	af00      	add	r7, sp, #0
    2826:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    2828:	687b      	ldr	r3, [r7, #4]
    282a:	2200      	movs	r2, #0
    282c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    282e:	687b      	ldr	r3, [r7, #4]
    2830:	2201      	movs	r2, #1
    2832:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    2834:	4b08      	ldr	r3, [pc, #32]	; (2858 <nvm_get_config_defaults+0x38>)
    2836:	685b      	ldr	r3, [r3, #4]
    2838:	06db      	lsls	r3, r3, #27
    283a:	0f1b      	lsrs	r3, r3, #28
    283c:	b2db      	uxtb	r3, r3
    283e:	001a      	movs	r2, r3
    2840:	687b      	ldr	r3, [r7, #4]
    2842:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    2844:	687b      	ldr	r3, [r7, #4]
    2846:	2200      	movs	r2, #0
    2848:	70da      	strb	r2, [r3, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    284a:	687b      	ldr	r3, [r7, #4]
    284c:	2200      	movs	r2, #0
    284e:	711a      	strb	r2, [r3, #4]
}
    2850:	46c0      	nop			; (mov r8, r8)
    2852:	46bd      	mov	sp, r7
    2854:	b002      	add	sp, #8
    2856:	bd80      	pop	{r7, pc}
    2858:	41004000 	.word	0x41004000

0000285c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    285c:	b580      	push	{r7, lr}
    285e:	b084      	sub	sp, #16
    2860:	af00      	add	r7, sp, #0
    2862:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2864:	687b      	ldr	r3, [r7, #4]
    2866:	681b      	ldr	r3, [r3, #0]
    2868:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    286a:	68fb      	ldr	r3, [r7, #12]
    286c:	69db      	ldr	r3, [r3, #28]
    286e:	1e5a      	subs	r2, r3, #1
    2870:	4193      	sbcs	r3, r2
    2872:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    2874:	0018      	movs	r0, r3
    2876:	46bd      	mov	sp, r7
    2878:	b004      	add	sp, #16
    287a:	bd80      	pop	{r7, pc}

0000287c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    287c:	b580      	push	{r7, lr}
    287e:	b082      	sub	sp, #8
    2880:	af00      	add	r7, sp, #0
    2882:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2884:	46c0      	nop			; (mov r8, r8)
    2886:	687b      	ldr	r3, [r7, #4]
    2888:	0018      	movs	r0, r3
    288a:	4b04      	ldr	r3, [pc, #16]	; (289c <_usart_wait_for_sync+0x20>)
    288c:	4798      	blx	r3
    288e:	1e03      	subs	r3, r0, #0
    2890:	d1f9      	bne.n	2886 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    2892:	46c0      	nop			; (mov r8, r8)
    2894:	46bd      	mov	sp, r7
    2896:	b002      	add	sp, #8
    2898:	bd80      	pop	{r7, pc}
    289a:	46c0      	nop			; (mov r8, r8)
    289c:	0000285d 	.word	0x0000285d

000028a0 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    28a0:	b580      	push	{r7, lr}
    28a2:	b082      	sub	sp, #8
    28a4:	af00      	add	r7, sp, #0
    28a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    28a8:	687b      	ldr	r3, [r7, #4]
    28aa:	2280      	movs	r2, #128	; 0x80
    28ac:	05d2      	lsls	r2, r2, #23
    28ae:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    28b0:	687b      	ldr	r3, [r7, #4]
    28b2:	2200      	movs	r2, #0
    28b4:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    28b6:	687b      	ldr	r3, [r7, #4]
    28b8:	22ff      	movs	r2, #255	; 0xff
    28ba:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    28bc:	687b      	ldr	r3, [r7, #4]
    28be:	2200      	movs	r2, #0
    28c0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    28c2:	687b      	ldr	r3, [r7, #4]
    28c4:	2200      	movs	r2, #0
    28c6:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    28c8:	687b      	ldr	r3, [r7, #4]
    28ca:	2296      	movs	r2, #150	; 0x96
    28cc:	0192      	lsls	r2, r2, #6
    28ce:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    28d0:	687b      	ldr	r3, [r7, #4]
    28d2:	2224      	movs	r2, #36	; 0x24
    28d4:	2101      	movs	r1, #1
    28d6:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    28d8:	687b      	ldr	r3, [r7, #4]
    28da:	2225      	movs	r2, #37	; 0x25
    28dc:	2101      	movs	r1, #1
    28de:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    28e0:	687b      	ldr	r3, [r7, #4]
    28e2:	2226      	movs	r2, #38	; 0x26
    28e4:	2100      	movs	r1, #0
    28e6:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	2227      	movs	r2, #39	; 0x27
    28ec:	2100      	movs	r1, #0
    28ee:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	2200      	movs	r2, #0
    28f4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    28f6:	687b      	ldr	r3, [r7, #4]
    28f8:	2288      	movs	r2, #136	; 0x88
    28fa:	0352      	lsls	r2, r2, #13
    28fc:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    28fe:	687b      	ldr	r3, [r7, #4]
    2900:	222c      	movs	r2, #44	; 0x2c
    2902:	2100      	movs	r1, #0
    2904:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    2906:	687b      	ldr	r3, [r7, #4]
    2908:	222d      	movs	r2, #45	; 0x2d
    290a:	2100      	movs	r1, #0
    290c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    290e:	687b      	ldr	r3, [r7, #4]
    2910:	2200      	movs	r2, #0
    2912:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	2200      	movs	r2, #0
    2918:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    291a:	687b      	ldr	r3, [r7, #4]
    291c:	2200      	movs	r2, #0
    291e:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    2920:	687b      	ldr	r3, [r7, #4]
    2922:	2200      	movs	r2, #0
    2924:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2926:	687b      	ldr	r3, [r7, #4]
    2928:	2200      	movs	r2, #0
    292a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	2200      	movs	r2, #0
    2930:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	2200      	movs	r2, #0
    2936:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2938:	687b      	ldr	r3, [r7, #4]
    293a:	2200      	movs	r2, #0
    293c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    293e:	687b      	ldr	r3, [r7, #4]
    2940:	2200      	movs	r2, #0
    2942:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	2200      	movs	r2, #0
    2948:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    294a:	687b      	ldr	r3, [r7, #4]
    294c:	2213      	movs	r2, #19
    294e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2950:	687b      	ldr	r3, [r7, #4]
    2952:	2200      	movs	r2, #0
    2954:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    2956:	46c0      	nop			; (mov r8, r8)
    2958:	46bd      	mov	sp, r7
    295a:	b002      	add	sp, #8
    295c:	bd80      	pop	{r7, pc}
    295e:	46c0      	nop			; (mov r8, r8)

00002960 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    2960:	b580      	push	{r7, lr}
    2962:	b084      	sub	sp, #16
    2964:	af00      	add	r7, sp, #0
    2966:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2968:	687b      	ldr	r3, [r7, #4]
    296a:	681b      	ldr	r3, [r3, #0]
    296c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    296e:	687b      	ldr	r3, [r7, #4]
    2970:	681b      	ldr	r3, [r3, #0]
    2972:	0018      	movs	r0, r3
    2974:	4b09      	ldr	r3, [pc, #36]	; (299c <usart_enable+0x3c>)
    2976:	4798      	blx	r3
    2978:	0003      	movs	r3, r0
    297a:	0018      	movs	r0, r3
    297c:	4b08      	ldr	r3, [pc, #32]	; (29a0 <usart_enable+0x40>)
    297e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2980:	687b      	ldr	r3, [r7, #4]
    2982:	0018      	movs	r0, r3
    2984:	4b07      	ldr	r3, [pc, #28]	; (29a4 <usart_enable+0x44>)
    2986:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2988:	68fb      	ldr	r3, [r7, #12]
    298a:	681b      	ldr	r3, [r3, #0]
    298c:	2202      	movs	r2, #2
    298e:	431a      	orrs	r2, r3
    2990:	68fb      	ldr	r3, [r7, #12]
    2992:	601a      	str	r2, [r3, #0]
}
    2994:	46c0      	nop			; (mov r8, r8)
    2996:	46bd      	mov	sp, r7
    2998:	b004      	add	sp, #16
    299a:	bd80      	pop	{r7, pc}
    299c:	00001401 	.word	0x00001401
    29a0:	000027f5 	.word	0x000027f5
    29a4:	0000287d 	.word	0x0000287d

000029a8 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    29a8:	b580      	push	{r7, lr}
    29aa:	b084      	sub	sp, #16
    29ac:	af00      	add	r7, sp, #0
    29ae:	60f8      	str	r0, [r7, #12]
    29b0:	60b9      	str	r1, [r7, #8]
    29b2:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    29b4:	687a      	ldr	r2, [r7, #4]
    29b6:	68b9      	ldr	r1, [r7, #8]
    29b8:	68fb      	ldr	r3, [r7, #12]
    29ba:	0018      	movs	r0, r3
    29bc:	4b05      	ldr	r3, [pc, #20]	; (29d4 <usart_serial_init+0x2c>)
    29be:	4798      	blx	r3
    29c0:	1e03      	subs	r3, r0, #0
    29c2:	d101      	bne.n	29c8 <usart_serial_init+0x20>
		return true;
    29c4:	2301      	movs	r3, #1
    29c6:	e000      	b.n	29ca <usart_serial_init+0x22>
	}
	else {
		return false;
    29c8:	2300      	movs	r3, #0
	}
}
    29ca:	0018      	movs	r0, r3
    29cc:	46bd      	mov	sp, r7
    29ce:	b004      	add	sp, #16
    29d0:	bd80      	pop	{r7, pc}
    29d2:	46c0      	nop			; (mov r8, r8)
    29d4:	00000c39 	.word	0x00000c39

000029d8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    29d8:	b580      	push	{r7, lr}
    29da:	b082      	sub	sp, #8
    29dc:	af00      	add	r7, sp, #0
    29de:	6078      	str	r0, [r7, #4]
    29e0:	000a      	movs	r2, r1
    29e2:	1cfb      	adds	r3, r7, #3
    29e4:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    29e6:	46c0      	nop			; (mov r8, r8)
    29e8:	1cfb      	adds	r3, r7, #3
    29ea:	781b      	ldrb	r3, [r3, #0]
    29ec:	b29a      	uxth	r2, r3
    29ee:	687b      	ldr	r3, [r7, #4]
    29f0:	0011      	movs	r1, r2
    29f2:	0018      	movs	r0, r3
    29f4:	4b04      	ldr	r3, [pc, #16]	; (2a08 <usart_serial_putchar+0x30>)
    29f6:	4798      	blx	r3
    29f8:	1e03      	subs	r3, r0, #0
    29fa:	d1f5      	bne.n	29e8 <usart_serial_putchar+0x10>

	return STATUS_OK;
    29fc:	2300      	movs	r3, #0
}
    29fe:	0018      	movs	r0, r3
    2a00:	46bd      	mov	sp, r7
    2a02:	b002      	add	sp, #8
    2a04:	bd80      	pop	{r7, pc}
    2a06:	46c0      	nop			; (mov r8, r8)
    2a08:	00000ead 	.word	0x00000ead

00002a0c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2a0c:	b580      	push	{r7, lr}
    2a0e:	b084      	sub	sp, #16
    2a10:	af00      	add	r7, sp, #0
    2a12:	6078      	str	r0, [r7, #4]
    2a14:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    2a16:	230e      	movs	r3, #14
    2a18:	18fb      	adds	r3, r7, r3
    2a1a:	2200      	movs	r2, #0
    2a1c:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2a1e:	46c0      	nop			; (mov r8, r8)
    2a20:	230e      	movs	r3, #14
    2a22:	18fa      	adds	r2, r7, r3
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	0011      	movs	r1, r2
    2a28:	0018      	movs	r0, r3
    2a2a:	4b07      	ldr	r3, [pc, #28]	; (2a48 <usart_serial_getchar+0x3c>)
    2a2c:	4798      	blx	r3
    2a2e:	1e03      	subs	r3, r0, #0
    2a30:	d1f6      	bne.n	2a20 <usart_serial_getchar+0x14>

	*c = temp;
    2a32:	230e      	movs	r3, #14
    2a34:	18fb      	adds	r3, r7, r3
    2a36:	881b      	ldrh	r3, [r3, #0]
    2a38:	b2da      	uxtb	r2, r3
    2a3a:	683b      	ldr	r3, [r7, #0]
    2a3c:	701a      	strb	r2, [r3, #0]
}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	46bd      	mov	sp, r7
    2a42:	b004      	add	sp, #16
    2a44:	bd80      	pop	{r7, pc}
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	00000f11 	.word	0x00000f11

00002a4c <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    2a4c:	b580      	push	{r7, lr}
    2a4e:	b084      	sub	sp, #16
    2a50:	af00      	add	r7, sp, #0
    2a52:	60f8      	str	r0, [r7, #12]
    2a54:	60b9      	str	r1, [r7, #8]
    2a56:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    2a58:	4b10      	ldr	r3, [pc, #64]	; (2a9c <stdio_serial_init+0x50>)
    2a5a:	68fa      	ldr	r2, [r7, #12]
    2a5c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2a5e:	4b10      	ldr	r3, [pc, #64]	; (2aa0 <stdio_serial_init+0x54>)
    2a60:	4a10      	ldr	r2, [pc, #64]	; (2aa4 <stdio_serial_init+0x58>)
    2a62:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2a64:	4b10      	ldr	r3, [pc, #64]	; (2aa8 <stdio_serial_init+0x5c>)
    2a66:	4a11      	ldr	r2, [pc, #68]	; (2aac <stdio_serial_init+0x60>)
    2a68:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    2a6a:	687a      	ldr	r2, [r7, #4]
    2a6c:	68b9      	ldr	r1, [r7, #8]
    2a6e:	68fb      	ldr	r3, [r7, #12]
    2a70:	0018      	movs	r0, r3
    2a72:	4b0f      	ldr	r3, [pc, #60]	; (2ab0 <stdio_serial_init+0x64>)
    2a74:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2a76:	4b0f      	ldr	r3, [pc, #60]	; (2ab4 <stdio_serial_init+0x68>)
    2a78:	681b      	ldr	r3, [r3, #0]
    2a7a:	689b      	ldr	r3, [r3, #8]
    2a7c:	2100      	movs	r1, #0
    2a7e:	0018      	movs	r0, r3
    2a80:	4b0d      	ldr	r3, [pc, #52]	; (2ab8 <stdio_serial_init+0x6c>)
    2a82:	4798      	blx	r3
	setbuf(stdin, NULL);
    2a84:	4b0b      	ldr	r3, [pc, #44]	; (2ab4 <stdio_serial_init+0x68>)
    2a86:	681b      	ldr	r3, [r3, #0]
    2a88:	685b      	ldr	r3, [r3, #4]
    2a8a:	2100      	movs	r1, #0
    2a8c:	0018      	movs	r0, r3
    2a8e:	4b0a      	ldr	r3, [pc, #40]	; (2ab8 <stdio_serial_init+0x6c>)
    2a90:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	46bd      	mov	sp, r7
    2a96:	b004      	add	sp, #16
    2a98:	bd80      	pop	{r7, pc}
    2a9a:	46c0      	nop			; (mov r8, r8)
    2a9c:	200000e4 	.word	0x200000e4
    2aa0:	200000e0 	.word	0x200000e0
    2aa4:	000029d9 	.word	0x000029d9
    2aa8:	200000dc 	.word	0x200000dc
    2aac:	00002a0d 	.word	0x00002a0d
    2ab0:	000029a9 	.word	0x000029a9
    2ab4:	2000006c 	.word	0x2000006c
    2ab8:	000030fd 	.word	0x000030fd

00002abc <configure_console>:
#define EDBG_CDC_SERCOM_PINMUX_PAD3  PINMUX_PA21D_SERCOM3_PAD3//PINMUX_PB11D_SERCOM4_PAD3	// RX
#define APP_START_ADDRESS			0x8000
#define FW_STAT						0x7F00
#define BOOT_PIN					PIN_PB23 //pin tied to button for stay in boot mode
static void configure_console(void)
{
    2abc:	b580      	push	{r7, lr}
    2abe:	b090      	sub	sp, #64	; 0x40
    2ac0:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    2ac2:	003b      	movs	r3, r7
    2ac4:	0018      	movs	r0, r3
    2ac6:	4b13      	ldr	r3, [pc, #76]	; (2b14 <configure_console+0x58>)
    2ac8:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2aca:	003b      	movs	r3, r7
    2acc:	22c0      	movs	r2, #192	; 0xc0
    2ace:	0392      	lsls	r2, r2, #14
    2ad0:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2ad2:	003b      	movs	r3, r7
    2ad4:	2201      	movs	r2, #1
    2ad6:	4252      	negs	r2, r2
    2ad8:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2ada:	003b      	movs	r3, r7
    2adc:	2201      	movs	r2, #1
    2ade:	4252      	negs	r2, r2
    2ae0:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2ae2:	003b      	movs	r3, r7
    2ae4:	4a0c      	ldr	r2, [pc, #48]	; (2b18 <configure_console+0x5c>)
    2ae6:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2ae8:	003b      	movs	r3, r7
    2aea:	4a0c      	ldr	r2, [pc, #48]	; (2b1c <configure_console+0x60>)
    2aec:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    2aee:	003b      	movs	r3, r7
    2af0:	22e1      	movs	r2, #225	; 0xe1
    2af2:	0252      	lsls	r2, r2, #9
    2af4:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
    2af6:	003a      	movs	r2, r7
    2af8:	4909      	ldr	r1, [pc, #36]	; (2b20 <configure_console+0x64>)
    2afa:	4b0a      	ldr	r3, [pc, #40]	; (2b24 <configure_console+0x68>)
    2afc:	0018      	movs	r0, r3
    2afe:	4b0a      	ldr	r3, [pc, #40]	; (2b28 <configure_console+0x6c>)
    2b00:	4798      	blx	r3
	usart_enable(&usart_instance);
    2b02:	4b08      	ldr	r3, [pc, #32]	; (2b24 <configure_console+0x68>)
    2b04:	0018      	movs	r0, r3
    2b06:	4b09      	ldr	r3, [pc, #36]	; (2b2c <configure_console+0x70>)
    2b08:	4798      	blx	r3
}
    2b0a:	46c0      	nop			; (mov r8, r8)
    2b0c:	46bd      	mov	sp, r7
    2b0e:	b010      	add	sp, #64	; 0x40
    2b10:	bd80      	pop	{r7, pc}
    2b12:	46c0      	nop			; (mov r8, r8)
    2b14:	000028a1 	.word	0x000028a1
    2b18:	00160002 	.word	0x00160002
    2b1c:	00150003 	.word	0x00150003
    2b20:	42001400 	.word	0x42001400
    2b24:	20000100 	.word	0x20000100
    2b28:	00002a4d 	.word	0x00002a4d
    2b2c:	00002961 	.word	0x00002961

00002b30 <getFWStat>:


static Firmware_Status_t getFWStat() {
    2b30:	b580      	push	{r7, lr}
    2b32:	b086      	sub	sp, #24
    2b34:	af00      	add	r7, sp, #0
    2b36:	6078      	str	r0, [r7, #4]
	Firmware_Status_t *fm_nvm = (unsigned int*)FW_STAT;			// Pointer to FW_STAT
    2b38:	23fe      	movs	r3, #254	; 0xfe
    2b3a:	01db      	lsls	r3, r3, #7
    2b3c:	617b      	str	r3, [r7, #20]
	Firmware_Status_t thisFW = *fm_nvm;				// Read contents of FW_STAT
    2b3e:	230c      	movs	r3, #12
    2b40:	18fa      	adds	r2, r7, r3
    2b42:	697b      	ldr	r3, [r7, #20]
    2b44:	0010      	movs	r0, r2
    2b46:	0019      	movs	r1, r3
    2b48:	2307      	movs	r3, #7
    2b4a:	001a      	movs	r2, r3
    2b4c:	4b07      	ldr	r3, [pc, #28]	; (2b6c <getFWStat+0x3c>)
    2b4e:	4798      	blx	r3
	return thisFW;
    2b50:	687a      	ldr	r2, [r7, #4]
    2b52:	230c      	movs	r3, #12
    2b54:	18fb      	adds	r3, r7, r3
    2b56:	0010      	movs	r0, r2
    2b58:	0019      	movs	r1, r3
    2b5a:	2307      	movs	r3, #7
    2b5c:	001a      	movs	r2, r3
    2b5e:	4b03      	ldr	r3, [pc, #12]	; (2b6c <getFWStat+0x3c>)
    2b60:	4798      	blx	r3
}
    2b62:	6878      	ldr	r0, [r7, #4]
    2b64:	46bd      	mov	sp, r7
    2b66:	b006      	add	sp, #24
    2b68:	bd80      	pop	{r7, pc}
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	00002fcd 	.word	0x00002fcd

00002b70 <writeFWStat>:

static void writeFWStat(Firmware_Status_t thisFW) {
    2b70:	b590      	push	{r4, r7, lr}
    2b72:	b095      	sub	sp, #84	; 0x54
    2b74:	af00      	add	r7, sp, #0
    2b76:	003b      	movs	r3, r7
    2b78:	6018      	str	r0, [r3, #0]
    2b7a:	6059      	str	r1, [r3, #4]
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE];
	page_buffer[0] = thisFW.signature[0];
    2b7c:	003b      	movs	r3, r7
    2b7e:	781a      	ldrb	r2, [r3, #0]
    2b80:	230c      	movs	r3, #12
    2b82:	18fb      	adds	r3, r7, r3
    2b84:	701a      	strb	r2, [r3, #0]
	page_buffer[1] = thisFW.signature[1];
    2b86:	003b      	movs	r3, r7
    2b88:	785a      	ldrb	r2, [r3, #1]
    2b8a:	230c      	movs	r3, #12
    2b8c:	18fb      	adds	r3, r7, r3
    2b8e:	705a      	strb	r2, [r3, #1]
	page_buffer[2] = thisFW.signature[2];
    2b90:	003b      	movs	r3, r7
    2b92:	789a      	ldrb	r2, [r3, #2]
    2b94:	230c      	movs	r3, #12
    2b96:	18fb      	adds	r3, r7, r3
    2b98:	709a      	strb	r2, [r3, #2]
	page_buffer[3] = thisFW.signature[3];
    2b9a:	003b      	movs	r3, r7
    2b9c:	78da      	ldrb	r2, [r3, #3]
    2b9e:	230c      	movs	r3, #12
    2ba0:	18fb      	adds	r3, r7, r3
    2ba2:	70da      	strb	r2, [r3, #3]
	page_buffer[4] = thisFW.executing_image;
    2ba4:	003b      	movs	r3, r7
    2ba6:	791a      	ldrb	r2, [r3, #4]
    2ba8:	230c      	movs	r3, #12
    2baa:	18fb      	adds	r3, r7, r3
    2bac:	711a      	strb	r2, [r3, #4]
	page_buffer[5] = thisFW.downloaded_image;
    2bae:	003b      	movs	r3, r7
    2bb0:	795a      	ldrb	r2, [r3, #5]
    2bb2:	230c      	movs	r3, #12
    2bb4:	18fb      	adds	r3, r7, r3
    2bb6:	715a      	strb	r2, [r3, #5]
	page_buffer[6] = thisFW.writenew_image;
    2bb8:	003b      	movs	r3, r7
    2bba:	799a      	ldrb	r2, [r3, #6]
    2bbc:	230c      	movs	r3, #12
    2bbe:	18fb      	adds	r3, r7, r3
    2bc0:	719a      	strb	r2, [r3, #6]
	
	enum status_code error_code;
	do
	{
		error_code = nvm_erase_row(FW_STAT);			// Erase FW stat row
    2bc2:	234f      	movs	r3, #79	; 0x4f
    2bc4:	18fc      	adds	r4, r7, r3
    2bc6:	23fe      	movs	r3, #254	; 0xfe
    2bc8:	01db      	lsls	r3, r3, #7
    2bca:	0018      	movs	r0, r3
    2bcc:	4b0e      	ldr	r3, [pc, #56]	; (2c08 <writeFWStat+0x98>)
    2bce:	4798      	blx	r3
    2bd0:	0003      	movs	r3, r0
    2bd2:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    2bd4:	234f      	movs	r3, #79	; 0x4f
    2bd6:	18fb      	adds	r3, r7, r3
    2bd8:	781b      	ldrb	r3, [r3, #0]
    2bda:	2b05      	cmp	r3, #5
    2bdc:	d0f1      	beq.n	2bc2 <writeFWStat+0x52>
	
	do
	{
		error_code = nvm_write_buffer(FW_STAT, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
    2bde:	234f      	movs	r3, #79	; 0x4f
    2be0:	18fc      	adds	r4, r7, r3
    2be2:	230c      	movs	r3, #12
    2be4:	18f9      	adds	r1, r7, r3
    2be6:	23fe      	movs	r3, #254	; 0xfe
    2be8:	01db      	lsls	r3, r3, #7
    2bea:	2240      	movs	r2, #64	; 0x40
    2bec:	0018      	movs	r0, r3
    2bee:	4b07      	ldr	r3, [pc, #28]	; (2c0c <writeFWStat+0x9c>)
    2bf0:	4798      	blx	r3
    2bf2:	0003      	movs	r3, r0
    2bf4:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    2bf6:	234f      	movs	r3, #79	; 0x4f
    2bf8:	18fb      	adds	r3, r7, r3
    2bfa:	781b      	ldrb	r3, [r3, #0]
    2bfc:	2b05      	cmp	r3, #5
    2bfe:	d0ee      	beq.n	2bde <writeFWStat+0x6e>
}
    2c00:	46c0      	nop			; (mov r8, r8)
    2c02:	46bd      	mov	sp, r7
    2c04:	b015      	add	sp, #84	; 0x54
    2c06:	bd90      	pop	{r4, r7, pc}
    2c08:	0000189d 	.word	0x0000189d
    2c0c:	00001751 	.word	0x00001751

00002c10 <upgradeFW>:

static void upgradeFW(Firmware_Status_t thisFW){
    2c10:	b580      	push	{r7, lr}
    2c12:	b082      	sub	sp, #8
    2c14:	af00      	add	r7, sp, #0
    2c16:	003b      	movs	r3, r7
    2c18:	6018      	str	r0, [r3, #0]
    2c1a:	6059      	str	r1, [r3, #4]
	printf("Upgrading firmware from location %d.\n", thisFW.downloaded_image);
    2c1c:	003b      	movs	r3, r7
    2c1e:	795b      	ldrb	r3, [r3, #5]
    2c20:	001a      	movs	r2, r3
    2c22:	4b0c      	ldr	r3, [pc, #48]	; (2c54 <upgradeFW+0x44>)
    2c24:	0011      	movs	r1, r2
    2c26:	0018      	movs	r0, r3
    2c28:	4b0b      	ldr	r3, [pc, #44]	; (2c58 <upgradeFW+0x48>)
    2c2a:	4798      	blx	r3
	// write new firmware
	
	//...................
	thisFW.executing_image = thisFW.downloaded_image;
    2c2c:	003b      	movs	r3, r7
    2c2e:	795a      	ldrb	r2, [r3, #5]
    2c30:	003b      	movs	r3, r7
    2c32:	711a      	strb	r2, [r3, #4]
	thisFW.writenew_image = 0;
    2c34:	003b      	movs	r3, r7
    2c36:	2200      	movs	r2, #0
    2c38:	719a      	strb	r2, [r3, #6]
	writeFWStat(thisFW);
    2c3a:	003b      	movs	r3, r7
    2c3c:	6818      	ldr	r0, [r3, #0]
    2c3e:	6859      	ldr	r1, [r3, #4]
    2c40:	4b06      	ldr	r3, [pc, #24]	; (2c5c <upgradeFW+0x4c>)
    2c42:	4798      	blx	r3
	printf("Upgrade complete\n");
    2c44:	4b06      	ldr	r3, [pc, #24]	; (2c60 <upgradeFW+0x50>)
    2c46:	0018      	movs	r0, r3
    2c48:	4b06      	ldr	r3, [pc, #24]	; (2c64 <upgradeFW+0x54>)
    2c4a:	4798      	blx	r3
}
    2c4c:	46c0      	nop			; (mov r8, r8)
    2c4e:	46bd      	mov	sp, r7
    2c50:	b002      	add	sp, #8
    2c52:	bd80      	pop	{r7, pc}
    2c54:	00004210 	.word	0x00004210
    2c58:	00002ff1 	.word	0x00002ff1
    2c5c:	00002b71 	.word	0x00002b71
    2c60:	00004238 	.word	0x00004238
    2c64:	000030e9 	.word	0x000030e9

00002c68 <configure_nvm>:

static void configure_nvm() {
    2c68:	b580      	push	{r7, lr}
    2c6a:	b082      	sub	sp, #8
    2c6c:	af00      	add	r7, sp, #0
	struct nvm_config config;
	nvm_get_config_defaults(&config);
    2c6e:	003b      	movs	r3, r7
    2c70:	0018      	movs	r0, r3
    2c72:	4b06      	ldr	r3, [pc, #24]	; (2c8c <configure_nvm+0x24>)
    2c74:	4798      	blx	r3
	config.manual_page_write = false;
    2c76:	003b      	movs	r3, r7
    2c78:	2200      	movs	r2, #0
    2c7a:	705a      	strb	r2, [r3, #1]
	nvm_set_config(&config);
    2c7c:	003b      	movs	r3, r7
    2c7e:	0018      	movs	r0, r3
    2c80:	4b03      	ldr	r3, [pc, #12]	; (2c90 <configure_nvm+0x28>)
    2c82:	4798      	blx	r3
}
    2c84:	46c0      	nop			; (mov r8, r8)
    2c86:	46bd      	mov	sp, r7
    2c88:	b002      	add	sp, #8
    2c8a:	bd80      	pop	{r7, pc}
    2c8c:	00002821 	.word	0x00002821
    2c90:	00001561 	.word	0x00001561

00002c94 <main>:

int main (void)
{
    2c94:	b580      	push	{r7, lr}
    2c96:	b086      	sub	sp, #24
    2c98:	af00      	add	r7, sp, #0
	
	system_init();
    2c9a:	4b48      	ldr	r3, [pc, #288]	; (2dbc <main+0x128>)
    2c9c:	4798      	blx	r3
	system_interrupt_enable_global();
    2c9e:	4b48      	ldr	r3, [pc, #288]	; (2dc0 <main+0x12c>)
    2ca0:	4798      	blx	r3
	delay_init();
    2ca2:	4b48      	ldr	r3, [pc, #288]	; (2dc4 <main+0x130>)
    2ca4:	4798      	blx	r3
	configure_console();
    2ca6:	4b48      	ldr	r3, [pc, #288]	; (2dc8 <main+0x134>)
    2ca8:	4798      	blx	r3
	configure_nvm();
    2caa:	4b48      	ldr	r3, [pc, #288]	; (2dcc <main+0x138>)
    2cac:	4798      	blx	r3
	// boot pin config
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2cae:	230c      	movs	r3, #12
    2cb0:	18fb      	adds	r3, r7, r3
    2cb2:	0018      	movs	r0, r3
    2cb4:	4b46      	ldr	r3, [pc, #280]	; (2dd0 <main+0x13c>)
    2cb6:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_INPUT;
    2cb8:	230c      	movs	r3, #12
    2cba:	18fb      	adds	r3, r7, r3
    2cbc:	2200      	movs	r2, #0
    2cbe:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(BOOT_PIN, &pin_conf);
    2cc0:	230c      	movs	r3, #12
    2cc2:	18fb      	adds	r3, r7, r3
    2cc4:	0019      	movs	r1, r3
    2cc6:	2037      	movs	r0, #55	; 0x37
    2cc8:	4b42      	ldr	r3, [pc, #264]	; (2dd4 <main+0x140>)
    2cca:	4798      	blx	r3
	printf("Init done.\n");
    2ccc:	4b42      	ldr	r3, [pc, #264]	; (2dd8 <main+0x144>)
    2cce:	0018      	movs	r0, r3
    2cd0:	4b42      	ldr	r3, [pc, #264]	; (2ddc <main+0x148>)
    2cd2:	4798      	blx	r3

	
	
	
	Firmware_Status_t thisFW = getFWStat();
    2cd4:	1d3b      	adds	r3, r7, #4
    2cd6:	0018      	movs	r0, r3
    2cd8:	4b41      	ldr	r3, [pc, #260]	; (2de0 <main+0x14c>)
    2cda:	4798      	blx	r3
	if (thisFW.signature[0] == NULL) {
    2cdc:	1d3b      	adds	r3, r7, #4
    2cde:	781b      	ldrb	r3, [r3, #0]
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	d11d      	bne.n	2d20 <main+0x8c>
		printf("Invalid FW stat, writing default\n");
    2ce4:	4b3f      	ldr	r3, [pc, #252]	; (2de4 <main+0x150>)
    2ce6:	0018      	movs	r0, r3
    2ce8:	4b3c      	ldr	r3, [pc, #240]	; (2ddc <main+0x148>)
    2cea:	4798      	blx	r3
		thisFW.signature[0] = 1;
    2cec:	1d3b      	adds	r3, r7, #4
    2cee:	2201      	movs	r2, #1
    2cf0:	701a      	strb	r2, [r3, #0]
		thisFW.signature[1] = 2;
    2cf2:	1d3b      	adds	r3, r7, #4
    2cf4:	2202      	movs	r2, #2
    2cf6:	705a      	strb	r2, [r3, #1]
		thisFW.signature[2] = 3;
    2cf8:	1d3b      	adds	r3, r7, #4
    2cfa:	2203      	movs	r2, #3
    2cfc:	709a      	strb	r2, [r3, #2]
		thisFW.signature[3] = 4;
    2cfe:	1d3b      	adds	r3, r7, #4
    2d00:	2204      	movs	r2, #4
    2d02:	70da      	strb	r2, [r3, #3]
		thisFW.executing_image = 1;
    2d04:	1d3b      	adds	r3, r7, #4
    2d06:	2201      	movs	r2, #1
    2d08:	711a      	strb	r2, [r3, #4]
		thisFW.downloaded_image = 2;
    2d0a:	1d3b      	adds	r3, r7, #4
    2d0c:	2202      	movs	r2, #2
    2d0e:	715a      	strb	r2, [r3, #5]
		thisFW.writenew_image = 0;
    2d10:	1d3b      	adds	r3, r7, #4
    2d12:	2200      	movs	r2, #0
    2d14:	719a      	strb	r2, [r3, #6]
		writeFWStat(thisFW);
    2d16:	1d3b      	adds	r3, r7, #4
    2d18:	6818      	ldr	r0, [r3, #0]
    2d1a:	6859      	ldr	r1, [r3, #4]
    2d1c:	4b32      	ldr	r3, [pc, #200]	; (2de8 <main+0x154>)
    2d1e:	4798      	blx	r3
	//thisFW.writenew_image = 1;
	//thisFW.downloaded_image = 1;
	//writeFWStat(thisFW);

	void (*app_code_entry)(void);
	uint16_t n=0; uint8_t remain_in_boot = 0;
    2d20:	2316      	movs	r3, #22
    2d22:	18fb      	adds	r3, r7, r3
    2d24:	2200      	movs	r2, #0
    2d26:	801a      	strh	r2, [r3, #0]
    2d28:	2315      	movs	r3, #21
    2d2a:	18fb      	adds	r3, r7, r3
    2d2c:	2200      	movs	r2, #0
    2d2e:	701a      	strb	r2, [r3, #0]
	//check if button is pressed to lock in boot
	while(n++ < 1000)
    2d30:	e00e      	b.n	2d50 <main+0xbc>
	{
		if(!port_pin_get_input_level(BOOT_PIN))
    2d32:	2037      	movs	r0, #55	; 0x37
    2d34:	4b2d      	ldr	r3, [pc, #180]	; (2dec <main+0x158>)
    2d36:	4798      	blx	r3
    2d38:	0003      	movs	r3, r0
    2d3a:	001a      	movs	r2, r3
    2d3c:	2301      	movs	r3, #1
    2d3e:	4053      	eors	r3, r2
    2d40:	b2db      	uxtb	r3, r3
    2d42:	2b00      	cmp	r3, #0
    2d44:	d004      	beq.n	2d50 <main+0xbc>
		{
			remain_in_boot = 1;
    2d46:	2315      	movs	r3, #21
    2d48:	18fb      	adds	r3, r7, r3
    2d4a:	2201      	movs	r2, #1
    2d4c:	701a      	strb	r2, [r3, #0]
			break;
    2d4e:	e009      	b.n	2d64 <main+0xd0>
	//writeFWStat(thisFW);

	void (*app_code_entry)(void);
	uint16_t n=0; uint8_t remain_in_boot = 0;
	//check if button is pressed to lock in boot
	while(n++ < 1000)
    2d50:	2316      	movs	r3, #22
    2d52:	18fb      	adds	r3, r7, r3
    2d54:	881b      	ldrh	r3, [r3, #0]
    2d56:	2216      	movs	r2, #22
    2d58:	18ba      	adds	r2, r7, r2
    2d5a:	1c59      	adds	r1, r3, #1
    2d5c:	8011      	strh	r1, [r2, #0]
    2d5e:	4a24      	ldr	r2, [pc, #144]	; (2df0 <main+0x15c>)
    2d60:	4293      	cmp	r3, r2
    2d62:	d9e6      	bls.n	2d32 <main+0x9e>
			remain_in_boot = 1;
			break;
		}
	}
	while(1) {
		if(!remain_in_boot)
    2d64:	2315      	movs	r3, #21
    2d66:	18fb      	adds	r3, r7, r3
    2d68:	781b      	ldrb	r3, [r3, #0]
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	d115      	bne.n	2d9a <main+0x106>
		{
			// check for firmware download requested
			if(thisFW.writenew_image)
    2d6e:	1d3b      	adds	r3, r7, #4
    2d70:	799b      	ldrb	r3, [r3, #6]
    2d72:	2b00      	cmp	r3, #0
    2d74:	d004      	beq.n	2d80 <main+0xec>
			{
				upgradeFW(thisFW);
    2d76:	1d3b      	adds	r3, r7, #4
    2d78:	6818      	ldr	r0, [r3, #0]
    2d7a:	6859      	ldr	r1, [r3, #4]
    2d7c:	4b1d      	ldr	r3, [pc, #116]	; (2df4 <main+0x160>)
    2d7e:	4798      	blx	r3
			}
			
			// vector table rebasing
			SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    2d80:	4b1d      	ldr	r3, [pc, #116]	; (2df8 <main+0x164>)
    2d82:	2280      	movs	r2, #128	; 0x80
    2d84:	0212      	lsls	r2, r2, #8
    2d86:	609a      	str	r2, [r3, #8]

			// jump to reset handler
			app_code_entry =  (void(*)(void))(*(unsigned int*)(APP_START_ADDRESS+4));
    2d88:	4b1c      	ldr	r3, [pc, #112]	; (2dfc <main+0x168>)
    2d8a:	681b      	ldr	r3, [r3, #0]
    2d8c:	613b      	str	r3, [r7, #16]
			// jump
			printf("Starting app\n");
    2d8e:	4b1c      	ldr	r3, [pc, #112]	; (2e00 <main+0x16c>)
    2d90:	0018      	movs	r0, r3
    2d92:	4b12      	ldr	r3, [pc, #72]	; (2ddc <main+0x148>)
    2d94:	4798      	blx	r3
			app_code_entry();
    2d96:	693b      	ldr	r3, [r7, #16]
    2d98:	4798      	blx	r3
		}
		printf("in boot");
    2d9a:	4b1a      	ldr	r3, [pc, #104]	; (2e04 <main+0x170>)
    2d9c:	0018      	movs	r0, r3
    2d9e:	4b1a      	ldr	r3, [pc, #104]	; (2e08 <main+0x174>)
    2da0:	4798      	blx	r3
		delay_ms(500);
    2da2:	23fa      	movs	r3, #250	; 0xfa
    2da4:	005b      	lsls	r3, r3, #1
    2da6:	0018      	movs	r0, r3
    2da8:	4b18      	ldr	r3, [pc, #96]	; (2e0c <main+0x178>)
    2daa:	4798      	blx	r3
    2dac:	2315      	movs	r3, #21
    2dae:	18fb      	adds	r3, r7, r3
    2db0:	2215      	movs	r2, #21
    2db2:	18ba      	adds	r2, r7, r2
    2db4:	7812      	ldrb	r2, [r2, #0]
    2db6:	701a      	strb	r2, [r3, #0]
	}
    2db8:	e7d4      	b.n	2d64 <main+0xd0>
    2dba:	46c0      	nop			; (mov r8, r8)
    2dbc:	00002521 	.word	0x00002521
    2dc0:	000027d9 	.word	0x000027d9
    2dc4:	00000209 	.word	0x00000209
    2dc8:	00002abd 	.word	0x00002abd
    2dcc:	00002c69 	.word	0x00002c69
    2dd0:	00002771 	.word	0x00002771
    2dd4:	0000196d 	.word	0x0000196d
    2dd8:	0000424c 	.word	0x0000424c
    2ddc:	000030e9 	.word	0x000030e9
    2de0:	00002b31 	.word	0x00002b31
    2de4:	00004258 	.word	0x00004258
    2de8:	00002b71 	.word	0x00002b71
    2dec:	00002795 	.word	0x00002795
    2df0:	000003e7 	.word	0x000003e7
    2df4:	00002c11 	.word	0x00002c11
    2df8:	e000ed00 	.word	0xe000ed00
    2dfc:	00008004 	.word	0x00008004
    2e00:	0000427c 	.word	0x0000427c
    2e04:	0000428c 	.word	0x0000428c
    2e08:	00002ff1 	.word	0x00002ff1
    2e0c:	00000261 	.word	0x00000261

00002e10 <__aeabi_uidiv>:
    2e10:	2200      	movs	r2, #0
    2e12:	0843      	lsrs	r3, r0, #1
    2e14:	428b      	cmp	r3, r1
    2e16:	d374      	bcc.n	2f02 <__aeabi_uidiv+0xf2>
    2e18:	0903      	lsrs	r3, r0, #4
    2e1a:	428b      	cmp	r3, r1
    2e1c:	d35f      	bcc.n	2ede <__aeabi_uidiv+0xce>
    2e1e:	0a03      	lsrs	r3, r0, #8
    2e20:	428b      	cmp	r3, r1
    2e22:	d344      	bcc.n	2eae <__aeabi_uidiv+0x9e>
    2e24:	0b03      	lsrs	r3, r0, #12
    2e26:	428b      	cmp	r3, r1
    2e28:	d328      	bcc.n	2e7c <__aeabi_uidiv+0x6c>
    2e2a:	0c03      	lsrs	r3, r0, #16
    2e2c:	428b      	cmp	r3, r1
    2e2e:	d30d      	bcc.n	2e4c <__aeabi_uidiv+0x3c>
    2e30:	22ff      	movs	r2, #255	; 0xff
    2e32:	0209      	lsls	r1, r1, #8
    2e34:	ba12      	rev	r2, r2
    2e36:	0c03      	lsrs	r3, r0, #16
    2e38:	428b      	cmp	r3, r1
    2e3a:	d302      	bcc.n	2e42 <__aeabi_uidiv+0x32>
    2e3c:	1212      	asrs	r2, r2, #8
    2e3e:	0209      	lsls	r1, r1, #8
    2e40:	d065      	beq.n	2f0e <__aeabi_uidiv+0xfe>
    2e42:	0b03      	lsrs	r3, r0, #12
    2e44:	428b      	cmp	r3, r1
    2e46:	d319      	bcc.n	2e7c <__aeabi_uidiv+0x6c>
    2e48:	e000      	b.n	2e4c <__aeabi_uidiv+0x3c>
    2e4a:	0a09      	lsrs	r1, r1, #8
    2e4c:	0bc3      	lsrs	r3, r0, #15
    2e4e:	428b      	cmp	r3, r1
    2e50:	d301      	bcc.n	2e56 <__aeabi_uidiv+0x46>
    2e52:	03cb      	lsls	r3, r1, #15
    2e54:	1ac0      	subs	r0, r0, r3
    2e56:	4152      	adcs	r2, r2
    2e58:	0b83      	lsrs	r3, r0, #14
    2e5a:	428b      	cmp	r3, r1
    2e5c:	d301      	bcc.n	2e62 <__aeabi_uidiv+0x52>
    2e5e:	038b      	lsls	r3, r1, #14
    2e60:	1ac0      	subs	r0, r0, r3
    2e62:	4152      	adcs	r2, r2
    2e64:	0b43      	lsrs	r3, r0, #13
    2e66:	428b      	cmp	r3, r1
    2e68:	d301      	bcc.n	2e6e <__aeabi_uidiv+0x5e>
    2e6a:	034b      	lsls	r3, r1, #13
    2e6c:	1ac0      	subs	r0, r0, r3
    2e6e:	4152      	adcs	r2, r2
    2e70:	0b03      	lsrs	r3, r0, #12
    2e72:	428b      	cmp	r3, r1
    2e74:	d301      	bcc.n	2e7a <__aeabi_uidiv+0x6a>
    2e76:	030b      	lsls	r3, r1, #12
    2e78:	1ac0      	subs	r0, r0, r3
    2e7a:	4152      	adcs	r2, r2
    2e7c:	0ac3      	lsrs	r3, r0, #11
    2e7e:	428b      	cmp	r3, r1
    2e80:	d301      	bcc.n	2e86 <__aeabi_uidiv+0x76>
    2e82:	02cb      	lsls	r3, r1, #11
    2e84:	1ac0      	subs	r0, r0, r3
    2e86:	4152      	adcs	r2, r2
    2e88:	0a83      	lsrs	r3, r0, #10
    2e8a:	428b      	cmp	r3, r1
    2e8c:	d301      	bcc.n	2e92 <__aeabi_uidiv+0x82>
    2e8e:	028b      	lsls	r3, r1, #10
    2e90:	1ac0      	subs	r0, r0, r3
    2e92:	4152      	adcs	r2, r2
    2e94:	0a43      	lsrs	r3, r0, #9
    2e96:	428b      	cmp	r3, r1
    2e98:	d301      	bcc.n	2e9e <__aeabi_uidiv+0x8e>
    2e9a:	024b      	lsls	r3, r1, #9
    2e9c:	1ac0      	subs	r0, r0, r3
    2e9e:	4152      	adcs	r2, r2
    2ea0:	0a03      	lsrs	r3, r0, #8
    2ea2:	428b      	cmp	r3, r1
    2ea4:	d301      	bcc.n	2eaa <__aeabi_uidiv+0x9a>
    2ea6:	020b      	lsls	r3, r1, #8
    2ea8:	1ac0      	subs	r0, r0, r3
    2eaa:	4152      	adcs	r2, r2
    2eac:	d2cd      	bcs.n	2e4a <__aeabi_uidiv+0x3a>
    2eae:	09c3      	lsrs	r3, r0, #7
    2eb0:	428b      	cmp	r3, r1
    2eb2:	d301      	bcc.n	2eb8 <__aeabi_uidiv+0xa8>
    2eb4:	01cb      	lsls	r3, r1, #7
    2eb6:	1ac0      	subs	r0, r0, r3
    2eb8:	4152      	adcs	r2, r2
    2eba:	0983      	lsrs	r3, r0, #6
    2ebc:	428b      	cmp	r3, r1
    2ebe:	d301      	bcc.n	2ec4 <__aeabi_uidiv+0xb4>
    2ec0:	018b      	lsls	r3, r1, #6
    2ec2:	1ac0      	subs	r0, r0, r3
    2ec4:	4152      	adcs	r2, r2
    2ec6:	0943      	lsrs	r3, r0, #5
    2ec8:	428b      	cmp	r3, r1
    2eca:	d301      	bcc.n	2ed0 <__aeabi_uidiv+0xc0>
    2ecc:	014b      	lsls	r3, r1, #5
    2ece:	1ac0      	subs	r0, r0, r3
    2ed0:	4152      	adcs	r2, r2
    2ed2:	0903      	lsrs	r3, r0, #4
    2ed4:	428b      	cmp	r3, r1
    2ed6:	d301      	bcc.n	2edc <__aeabi_uidiv+0xcc>
    2ed8:	010b      	lsls	r3, r1, #4
    2eda:	1ac0      	subs	r0, r0, r3
    2edc:	4152      	adcs	r2, r2
    2ede:	08c3      	lsrs	r3, r0, #3
    2ee0:	428b      	cmp	r3, r1
    2ee2:	d301      	bcc.n	2ee8 <__aeabi_uidiv+0xd8>
    2ee4:	00cb      	lsls	r3, r1, #3
    2ee6:	1ac0      	subs	r0, r0, r3
    2ee8:	4152      	adcs	r2, r2
    2eea:	0883      	lsrs	r3, r0, #2
    2eec:	428b      	cmp	r3, r1
    2eee:	d301      	bcc.n	2ef4 <__aeabi_uidiv+0xe4>
    2ef0:	008b      	lsls	r3, r1, #2
    2ef2:	1ac0      	subs	r0, r0, r3
    2ef4:	4152      	adcs	r2, r2
    2ef6:	0843      	lsrs	r3, r0, #1
    2ef8:	428b      	cmp	r3, r1
    2efa:	d301      	bcc.n	2f00 <__aeabi_uidiv+0xf0>
    2efc:	004b      	lsls	r3, r1, #1
    2efe:	1ac0      	subs	r0, r0, r3
    2f00:	4152      	adcs	r2, r2
    2f02:	1a41      	subs	r1, r0, r1
    2f04:	d200      	bcs.n	2f08 <__aeabi_uidiv+0xf8>
    2f06:	4601      	mov	r1, r0
    2f08:	4152      	adcs	r2, r2
    2f0a:	4610      	mov	r0, r2
    2f0c:	4770      	bx	lr
    2f0e:	e7ff      	b.n	2f10 <__aeabi_uidiv+0x100>
    2f10:	b501      	push	{r0, lr}
    2f12:	2000      	movs	r0, #0
    2f14:	f000 f806 	bl	2f24 <__aeabi_idiv0>
    2f18:	bd02      	pop	{r1, pc}
    2f1a:	46c0      	nop			; (mov r8, r8)

00002f1c <__aeabi_uidivmod>:
    2f1c:	2900      	cmp	r1, #0
    2f1e:	d0f7      	beq.n	2f10 <__aeabi_uidiv+0x100>
    2f20:	e776      	b.n	2e10 <__aeabi_uidiv>
    2f22:	4770      	bx	lr

00002f24 <__aeabi_idiv0>:
    2f24:	4770      	bx	lr
    2f26:	46c0      	nop			; (mov r8, r8)

00002f28 <__aeabi_lmul>:
    2f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f2a:	464f      	mov	r7, r9
    2f2c:	4646      	mov	r6, r8
    2f2e:	b4c0      	push	{r6, r7}
    2f30:	0416      	lsls	r6, r2, #16
    2f32:	0c36      	lsrs	r6, r6, #16
    2f34:	4699      	mov	r9, r3
    2f36:	0033      	movs	r3, r6
    2f38:	0405      	lsls	r5, r0, #16
    2f3a:	0c2c      	lsrs	r4, r5, #16
    2f3c:	0c07      	lsrs	r7, r0, #16
    2f3e:	0c15      	lsrs	r5, r2, #16
    2f40:	4363      	muls	r3, r4
    2f42:	437e      	muls	r6, r7
    2f44:	436f      	muls	r7, r5
    2f46:	4365      	muls	r5, r4
    2f48:	0c1c      	lsrs	r4, r3, #16
    2f4a:	19ad      	adds	r5, r5, r6
    2f4c:	1964      	adds	r4, r4, r5
    2f4e:	469c      	mov	ip, r3
    2f50:	42a6      	cmp	r6, r4
    2f52:	d903      	bls.n	2f5c <__aeabi_lmul+0x34>
    2f54:	2380      	movs	r3, #128	; 0x80
    2f56:	025b      	lsls	r3, r3, #9
    2f58:	4698      	mov	r8, r3
    2f5a:	4447      	add	r7, r8
    2f5c:	4663      	mov	r3, ip
    2f5e:	0c25      	lsrs	r5, r4, #16
    2f60:	19ef      	adds	r7, r5, r7
    2f62:	041d      	lsls	r5, r3, #16
    2f64:	464b      	mov	r3, r9
    2f66:	434a      	muls	r2, r1
    2f68:	4343      	muls	r3, r0
    2f6a:	0c2d      	lsrs	r5, r5, #16
    2f6c:	0424      	lsls	r4, r4, #16
    2f6e:	1964      	adds	r4, r4, r5
    2f70:	1899      	adds	r1, r3, r2
    2f72:	19c9      	adds	r1, r1, r7
    2f74:	0020      	movs	r0, r4
    2f76:	bc0c      	pop	{r2, r3}
    2f78:	4690      	mov	r8, r2
    2f7a:	4699      	mov	r9, r3
    2f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f7e:	46c0      	nop			; (mov r8, r8)

00002f80 <__libc_init_array>:
    2f80:	4b0e      	ldr	r3, [pc, #56]	; (2fbc <__libc_init_array+0x3c>)
    2f82:	b570      	push	{r4, r5, r6, lr}
    2f84:	2500      	movs	r5, #0
    2f86:	001e      	movs	r6, r3
    2f88:	4c0d      	ldr	r4, [pc, #52]	; (2fc0 <__libc_init_array+0x40>)
    2f8a:	1ae4      	subs	r4, r4, r3
    2f8c:	10a4      	asrs	r4, r4, #2
    2f8e:	42a5      	cmp	r5, r4
    2f90:	d004      	beq.n	2f9c <__libc_init_array+0x1c>
    2f92:	00ab      	lsls	r3, r5, #2
    2f94:	58f3      	ldr	r3, [r6, r3]
    2f96:	4798      	blx	r3
    2f98:	3501      	adds	r5, #1
    2f9a:	e7f8      	b.n	2f8e <__libc_init_array+0xe>
    2f9c:	f001 f9c8 	bl	4330 <_init>
    2fa0:	4b08      	ldr	r3, [pc, #32]	; (2fc4 <__libc_init_array+0x44>)
    2fa2:	2500      	movs	r5, #0
    2fa4:	001e      	movs	r6, r3
    2fa6:	4c08      	ldr	r4, [pc, #32]	; (2fc8 <__libc_init_array+0x48>)
    2fa8:	1ae4      	subs	r4, r4, r3
    2faa:	10a4      	asrs	r4, r4, #2
    2fac:	42a5      	cmp	r5, r4
    2fae:	d004      	beq.n	2fba <__libc_init_array+0x3a>
    2fb0:	00ab      	lsls	r3, r5, #2
    2fb2:	58f3      	ldr	r3, [r6, r3]
    2fb4:	4798      	blx	r3
    2fb6:	3501      	adds	r5, #1
    2fb8:	e7f8      	b.n	2fac <__libc_init_array+0x2c>
    2fba:	bd70      	pop	{r4, r5, r6, pc}
    2fbc:	0000433c 	.word	0x0000433c
    2fc0:	0000433c 	.word	0x0000433c
    2fc4:	0000433c 	.word	0x0000433c
    2fc8:	00004340 	.word	0x00004340

00002fcc <memcpy>:
    2fcc:	2300      	movs	r3, #0
    2fce:	b510      	push	{r4, lr}
    2fd0:	429a      	cmp	r2, r3
    2fd2:	d003      	beq.n	2fdc <memcpy+0x10>
    2fd4:	5ccc      	ldrb	r4, [r1, r3]
    2fd6:	54c4      	strb	r4, [r0, r3]
    2fd8:	3301      	adds	r3, #1
    2fda:	e7f9      	b.n	2fd0 <memcpy+0x4>
    2fdc:	bd10      	pop	{r4, pc}

00002fde <memset>:
    2fde:	0003      	movs	r3, r0
    2fe0:	1882      	adds	r2, r0, r2
    2fe2:	4293      	cmp	r3, r2
    2fe4:	d002      	beq.n	2fec <memset+0xe>
    2fe6:	7019      	strb	r1, [r3, #0]
    2fe8:	3301      	adds	r3, #1
    2fea:	e7fa      	b.n	2fe2 <memset+0x4>
    2fec:	4770      	bx	lr
	...

00002ff0 <iprintf>:
    2ff0:	b40f      	push	{r0, r1, r2, r3}
    2ff2:	4b0b      	ldr	r3, [pc, #44]	; (3020 <iprintf+0x30>)
    2ff4:	b513      	push	{r0, r1, r4, lr}
    2ff6:	681c      	ldr	r4, [r3, #0]
    2ff8:	2c00      	cmp	r4, #0
    2ffa:	d005      	beq.n	3008 <iprintf+0x18>
    2ffc:	69a3      	ldr	r3, [r4, #24]
    2ffe:	2b00      	cmp	r3, #0
    3000:	d102      	bne.n	3008 <iprintf+0x18>
    3002:	0020      	movs	r0, r4
    3004:	f000 faf6 	bl	35f4 <__sinit>
    3008:	ab05      	add	r3, sp, #20
    300a:	9a04      	ldr	r2, [sp, #16]
    300c:	68a1      	ldr	r1, [r4, #8]
    300e:	0020      	movs	r0, r4
    3010:	9301      	str	r3, [sp, #4]
    3012:	f000 fcb5 	bl	3980 <_vfiprintf_r>
    3016:	bc16      	pop	{r1, r2, r4}
    3018:	bc08      	pop	{r3}
    301a:	b004      	add	sp, #16
    301c:	4718      	bx	r3
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	2000006c 	.word	0x2000006c

00003024 <_puts_r>:
    3024:	b570      	push	{r4, r5, r6, lr}
    3026:	0005      	movs	r5, r0
    3028:	000e      	movs	r6, r1
    302a:	2800      	cmp	r0, #0
    302c:	d004      	beq.n	3038 <_puts_r+0x14>
    302e:	6983      	ldr	r3, [r0, #24]
    3030:	2b00      	cmp	r3, #0
    3032:	d101      	bne.n	3038 <_puts_r+0x14>
    3034:	f000 fade 	bl	35f4 <__sinit>
    3038:	69ab      	ldr	r3, [r5, #24]
    303a:	68ac      	ldr	r4, [r5, #8]
    303c:	2b00      	cmp	r3, #0
    303e:	d102      	bne.n	3046 <_puts_r+0x22>
    3040:	0028      	movs	r0, r5
    3042:	f000 fad7 	bl	35f4 <__sinit>
    3046:	4b25      	ldr	r3, [pc, #148]	; (30dc <_puts_r+0xb8>)
    3048:	429c      	cmp	r4, r3
    304a:	d101      	bne.n	3050 <_puts_r+0x2c>
    304c:	686c      	ldr	r4, [r5, #4]
    304e:	e008      	b.n	3062 <_puts_r+0x3e>
    3050:	4b23      	ldr	r3, [pc, #140]	; (30e0 <_puts_r+0xbc>)
    3052:	429c      	cmp	r4, r3
    3054:	d101      	bne.n	305a <_puts_r+0x36>
    3056:	68ac      	ldr	r4, [r5, #8]
    3058:	e003      	b.n	3062 <_puts_r+0x3e>
    305a:	4b22      	ldr	r3, [pc, #136]	; (30e4 <_puts_r+0xc0>)
    305c:	429c      	cmp	r4, r3
    305e:	d100      	bne.n	3062 <_puts_r+0x3e>
    3060:	68ec      	ldr	r4, [r5, #12]
    3062:	89a3      	ldrh	r3, [r4, #12]
    3064:	071b      	lsls	r3, r3, #28
    3066:	d502      	bpl.n	306e <_puts_r+0x4a>
    3068:	6923      	ldr	r3, [r4, #16]
    306a:	2b00      	cmp	r3, #0
    306c:	d111      	bne.n	3092 <_puts_r+0x6e>
    306e:	0021      	movs	r1, r4
    3070:	0028      	movs	r0, r5
    3072:	f000 f955 	bl	3320 <__swsetup_r>
    3076:	2800      	cmp	r0, #0
    3078:	d00b      	beq.n	3092 <_puts_r+0x6e>
    307a:	2001      	movs	r0, #1
    307c:	4240      	negs	r0, r0
    307e:	e02b      	b.n	30d8 <_puts_r+0xb4>
    3080:	3b01      	subs	r3, #1
    3082:	3601      	adds	r6, #1
    3084:	60a3      	str	r3, [r4, #8]
    3086:	2b00      	cmp	r3, #0
    3088:	db08      	blt.n	309c <_puts_r+0x78>
    308a:	6823      	ldr	r3, [r4, #0]
    308c:	1c5a      	adds	r2, r3, #1
    308e:	6022      	str	r2, [r4, #0]
    3090:	7019      	strb	r1, [r3, #0]
    3092:	7831      	ldrb	r1, [r6, #0]
    3094:	68a3      	ldr	r3, [r4, #8]
    3096:	2900      	cmp	r1, #0
    3098:	d1f2      	bne.n	3080 <_puts_r+0x5c>
    309a:	e00b      	b.n	30b4 <_puts_r+0x90>
    309c:	69a2      	ldr	r2, [r4, #24]
    309e:	4293      	cmp	r3, r2
    30a0:	db01      	blt.n	30a6 <_puts_r+0x82>
    30a2:	290a      	cmp	r1, #10
    30a4:	d1f1      	bne.n	308a <_puts_r+0x66>
    30a6:	0022      	movs	r2, r4
    30a8:	0028      	movs	r0, r5
    30aa:	f000 f8e1 	bl	3270 <__swbuf_r>
    30ae:	1c43      	adds	r3, r0, #1
    30b0:	d1ef      	bne.n	3092 <_puts_r+0x6e>
    30b2:	e7e2      	b.n	307a <_puts_r+0x56>
    30b4:	3b01      	subs	r3, #1
    30b6:	60a3      	str	r3, [r4, #8]
    30b8:	2b00      	cmp	r3, #0
    30ba:	da08      	bge.n	30ce <_puts_r+0xaa>
    30bc:	0022      	movs	r2, r4
    30be:	310a      	adds	r1, #10
    30c0:	0028      	movs	r0, r5
    30c2:	f000 f8d5 	bl	3270 <__swbuf_r>
    30c6:	1c43      	adds	r3, r0, #1
    30c8:	d0d7      	beq.n	307a <_puts_r+0x56>
    30ca:	200a      	movs	r0, #10
    30cc:	e004      	b.n	30d8 <_puts_r+0xb4>
    30ce:	200a      	movs	r0, #10
    30d0:	6823      	ldr	r3, [r4, #0]
    30d2:	1c5a      	adds	r2, r3, #1
    30d4:	6022      	str	r2, [r4, #0]
    30d6:	7018      	strb	r0, [r3, #0]
    30d8:	bd70      	pop	{r4, r5, r6, pc}
    30da:	46c0      	nop			; (mov r8, r8)
    30dc:	0000429c 	.word	0x0000429c
    30e0:	000042bc 	.word	0x000042bc
    30e4:	000042dc 	.word	0x000042dc

000030e8 <puts>:
    30e8:	b510      	push	{r4, lr}
    30ea:	4b03      	ldr	r3, [pc, #12]	; (30f8 <puts+0x10>)
    30ec:	0001      	movs	r1, r0
    30ee:	6818      	ldr	r0, [r3, #0]
    30f0:	f7ff ff98 	bl	3024 <_puts_r>
    30f4:	bd10      	pop	{r4, pc}
    30f6:	46c0      	nop			; (mov r8, r8)
    30f8:	2000006c 	.word	0x2000006c

000030fc <setbuf>:
    30fc:	424a      	negs	r2, r1
    30fe:	414a      	adcs	r2, r1
    3100:	2380      	movs	r3, #128	; 0x80
    3102:	b510      	push	{r4, lr}
    3104:	0052      	lsls	r2, r2, #1
    3106:	00db      	lsls	r3, r3, #3
    3108:	f000 f802 	bl	3110 <setvbuf>
    310c:	bd10      	pop	{r4, pc}
	...

00003110 <setvbuf>:
    3110:	b5f0      	push	{r4, r5, r6, r7, lr}
    3112:	001d      	movs	r5, r3
    3114:	4b51      	ldr	r3, [pc, #324]	; (325c <setvbuf+0x14c>)
    3116:	b085      	sub	sp, #20
    3118:	681e      	ldr	r6, [r3, #0]
    311a:	0004      	movs	r4, r0
    311c:	000f      	movs	r7, r1
    311e:	9200      	str	r2, [sp, #0]
    3120:	2e00      	cmp	r6, #0
    3122:	d005      	beq.n	3130 <setvbuf+0x20>
    3124:	69b3      	ldr	r3, [r6, #24]
    3126:	2b00      	cmp	r3, #0
    3128:	d102      	bne.n	3130 <setvbuf+0x20>
    312a:	0030      	movs	r0, r6
    312c:	f000 fa62 	bl	35f4 <__sinit>
    3130:	4b4b      	ldr	r3, [pc, #300]	; (3260 <setvbuf+0x150>)
    3132:	429c      	cmp	r4, r3
    3134:	d101      	bne.n	313a <setvbuf+0x2a>
    3136:	6874      	ldr	r4, [r6, #4]
    3138:	e008      	b.n	314c <setvbuf+0x3c>
    313a:	4b4a      	ldr	r3, [pc, #296]	; (3264 <setvbuf+0x154>)
    313c:	429c      	cmp	r4, r3
    313e:	d101      	bne.n	3144 <setvbuf+0x34>
    3140:	68b4      	ldr	r4, [r6, #8]
    3142:	e003      	b.n	314c <setvbuf+0x3c>
    3144:	4b48      	ldr	r3, [pc, #288]	; (3268 <setvbuf+0x158>)
    3146:	429c      	cmp	r4, r3
    3148:	d100      	bne.n	314c <setvbuf+0x3c>
    314a:	68f4      	ldr	r4, [r6, #12]
    314c:	9b00      	ldr	r3, [sp, #0]
    314e:	2b02      	cmp	r3, #2
    3150:	d005      	beq.n	315e <setvbuf+0x4e>
    3152:	2b01      	cmp	r3, #1
    3154:	d900      	bls.n	3158 <setvbuf+0x48>
    3156:	e07c      	b.n	3252 <setvbuf+0x142>
    3158:	2d00      	cmp	r5, #0
    315a:	da00      	bge.n	315e <setvbuf+0x4e>
    315c:	e079      	b.n	3252 <setvbuf+0x142>
    315e:	0021      	movs	r1, r4
    3160:	0030      	movs	r0, r6
    3162:	f000 f9d9 	bl	3518 <_fflush_r>
    3166:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3168:	2900      	cmp	r1, #0
    316a:	d008      	beq.n	317e <setvbuf+0x6e>
    316c:	0023      	movs	r3, r4
    316e:	3344      	adds	r3, #68	; 0x44
    3170:	4299      	cmp	r1, r3
    3172:	d002      	beq.n	317a <setvbuf+0x6a>
    3174:	0030      	movs	r0, r6
    3176:	f000 fb3f 	bl	37f8 <_free_r>
    317a:	2300      	movs	r3, #0
    317c:	6363      	str	r3, [r4, #52]	; 0x34
    317e:	2300      	movs	r3, #0
    3180:	61a3      	str	r3, [r4, #24]
    3182:	6063      	str	r3, [r4, #4]
    3184:	89a3      	ldrh	r3, [r4, #12]
    3186:	061b      	lsls	r3, r3, #24
    3188:	d503      	bpl.n	3192 <setvbuf+0x82>
    318a:	6921      	ldr	r1, [r4, #16]
    318c:	0030      	movs	r0, r6
    318e:	f000 fb33 	bl	37f8 <_free_r>
    3192:	89a2      	ldrh	r2, [r4, #12]
    3194:	4b35      	ldr	r3, [pc, #212]	; (326c <setvbuf+0x15c>)
    3196:	4013      	ands	r3, r2
    3198:	81a3      	strh	r3, [r4, #12]
    319a:	9b00      	ldr	r3, [sp, #0]
    319c:	2b02      	cmp	r3, #2
    319e:	d021      	beq.n	31e4 <setvbuf+0xd4>
    31a0:	ab03      	add	r3, sp, #12
    31a2:	aa02      	add	r2, sp, #8
    31a4:	0021      	movs	r1, r4
    31a6:	0030      	movs	r0, r6
    31a8:	f000 fab8 	bl	371c <__swhatbuf_r>
    31ac:	89a3      	ldrh	r3, [r4, #12]
    31ae:	4318      	orrs	r0, r3
    31b0:	81a0      	strh	r0, [r4, #12]
    31b2:	2d00      	cmp	r5, #0
    31b4:	d101      	bne.n	31ba <setvbuf+0xaa>
    31b6:	9d02      	ldr	r5, [sp, #8]
    31b8:	e001      	b.n	31be <setvbuf+0xae>
    31ba:	2f00      	cmp	r7, #0
    31bc:	d125      	bne.n	320a <setvbuf+0xfa>
    31be:	0028      	movs	r0, r5
    31c0:	f000 fb10 	bl	37e4 <malloc>
    31c4:	9501      	str	r5, [sp, #4]
    31c6:	1e07      	subs	r7, r0, #0
    31c8:	d11a      	bne.n	3200 <setvbuf+0xf0>
    31ca:	9b02      	ldr	r3, [sp, #8]
    31cc:	9301      	str	r3, [sp, #4]
    31ce:	42ab      	cmp	r3, r5
    31d0:	d102      	bne.n	31d8 <setvbuf+0xc8>
    31d2:	2001      	movs	r0, #1
    31d4:	4240      	negs	r0, r0
    31d6:	e006      	b.n	31e6 <setvbuf+0xd6>
    31d8:	9801      	ldr	r0, [sp, #4]
    31da:	f000 fb03 	bl	37e4 <malloc>
    31de:	1e07      	subs	r7, r0, #0
    31e0:	d10e      	bne.n	3200 <setvbuf+0xf0>
    31e2:	e7f6      	b.n	31d2 <setvbuf+0xc2>
    31e4:	2000      	movs	r0, #0
    31e6:	2202      	movs	r2, #2
    31e8:	89a3      	ldrh	r3, [r4, #12]
    31ea:	4313      	orrs	r3, r2
    31ec:	81a3      	strh	r3, [r4, #12]
    31ee:	2300      	movs	r3, #0
    31f0:	60a3      	str	r3, [r4, #8]
    31f2:	0023      	movs	r3, r4
    31f4:	3347      	adds	r3, #71	; 0x47
    31f6:	6023      	str	r3, [r4, #0]
    31f8:	6123      	str	r3, [r4, #16]
    31fa:	2301      	movs	r3, #1
    31fc:	6163      	str	r3, [r4, #20]
    31fe:	e02a      	b.n	3256 <setvbuf+0x146>
    3200:	2280      	movs	r2, #128	; 0x80
    3202:	89a3      	ldrh	r3, [r4, #12]
    3204:	9d01      	ldr	r5, [sp, #4]
    3206:	4313      	orrs	r3, r2
    3208:	81a3      	strh	r3, [r4, #12]
    320a:	69b3      	ldr	r3, [r6, #24]
    320c:	2b00      	cmp	r3, #0
    320e:	d102      	bne.n	3216 <setvbuf+0x106>
    3210:	0030      	movs	r0, r6
    3212:	f000 f9ef 	bl	35f4 <__sinit>
    3216:	9b00      	ldr	r3, [sp, #0]
    3218:	2b01      	cmp	r3, #1
    321a:	d103      	bne.n	3224 <setvbuf+0x114>
    321c:	89a3      	ldrh	r3, [r4, #12]
    321e:	9a00      	ldr	r2, [sp, #0]
    3220:	431a      	orrs	r2, r3
    3222:	81a2      	strh	r2, [r4, #12]
    3224:	2308      	movs	r3, #8
    3226:	89a2      	ldrh	r2, [r4, #12]
    3228:	6027      	str	r7, [r4, #0]
    322a:	4013      	ands	r3, r2
    322c:	6127      	str	r7, [r4, #16]
    322e:	6165      	str	r5, [r4, #20]
    3230:	1e18      	subs	r0, r3, #0
    3232:	d00c      	beq.n	324e <setvbuf+0x13e>
    3234:	2301      	movs	r3, #1
    3236:	401a      	ands	r2, r3
    3238:	2300      	movs	r3, #0
    323a:	1e10      	subs	r0, r2, #0
    323c:	4298      	cmp	r0, r3
    323e:	d004      	beq.n	324a <setvbuf+0x13a>
    3240:	426d      	negs	r5, r5
    3242:	60a3      	str	r3, [r4, #8]
    3244:	61a5      	str	r5, [r4, #24]
    3246:	0018      	movs	r0, r3
    3248:	e005      	b.n	3256 <setvbuf+0x146>
    324a:	60a5      	str	r5, [r4, #8]
    324c:	e003      	b.n	3256 <setvbuf+0x146>
    324e:	60a3      	str	r3, [r4, #8]
    3250:	e001      	b.n	3256 <setvbuf+0x146>
    3252:	2001      	movs	r0, #1
    3254:	4240      	negs	r0, r0
    3256:	b005      	add	sp, #20
    3258:	bdf0      	pop	{r4, r5, r6, r7, pc}
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	2000006c 	.word	0x2000006c
    3260:	0000429c 	.word	0x0000429c
    3264:	000042bc 	.word	0x000042bc
    3268:	000042dc 	.word	0x000042dc
    326c:	fffff35c 	.word	0xfffff35c

00003270 <__swbuf_r>:
    3270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3272:	0005      	movs	r5, r0
    3274:	000f      	movs	r7, r1
    3276:	0014      	movs	r4, r2
    3278:	2800      	cmp	r0, #0
    327a:	d004      	beq.n	3286 <__swbuf_r+0x16>
    327c:	6983      	ldr	r3, [r0, #24]
    327e:	2b00      	cmp	r3, #0
    3280:	d101      	bne.n	3286 <__swbuf_r+0x16>
    3282:	f000 f9b7 	bl	35f4 <__sinit>
    3286:	4b23      	ldr	r3, [pc, #140]	; (3314 <__swbuf_r+0xa4>)
    3288:	429c      	cmp	r4, r3
    328a:	d101      	bne.n	3290 <__swbuf_r+0x20>
    328c:	686c      	ldr	r4, [r5, #4]
    328e:	e008      	b.n	32a2 <__swbuf_r+0x32>
    3290:	4b21      	ldr	r3, [pc, #132]	; (3318 <__swbuf_r+0xa8>)
    3292:	429c      	cmp	r4, r3
    3294:	d101      	bne.n	329a <__swbuf_r+0x2a>
    3296:	68ac      	ldr	r4, [r5, #8]
    3298:	e003      	b.n	32a2 <__swbuf_r+0x32>
    329a:	4b20      	ldr	r3, [pc, #128]	; (331c <__swbuf_r+0xac>)
    329c:	429c      	cmp	r4, r3
    329e:	d100      	bne.n	32a2 <__swbuf_r+0x32>
    32a0:	68ec      	ldr	r4, [r5, #12]
    32a2:	69a3      	ldr	r3, [r4, #24]
    32a4:	60a3      	str	r3, [r4, #8]
    32a6:	89a3      	ldrh	r3, [r4, #12]
    32a8:	071b      	lsls	r3, r3, #28
    32aa:	d50a      	bpl.n	32c2 <__swbuf_r+0x52>
    32ac:	6923      	ldr	r3, [r4, #16]
    32ae:	2b00      	cmp	r3, #0
    32b0:	d007      	beq.n	32c2 <__swbuf_r+0x52>
    32b2:	6823      	ldr	r3, [r4, #0]
    32b4:	6922      	ldr	r2, [r4, #16]
    32b6:	b2fe      	uxtb	r6, r7
    32b8:	1a98      	subs	r0, r3, r2
    32ba:	6963      	ldr	r3, [r4, #20]
    32bc:	4298      	cmp	r0, r3
    32be:	db0f      	blt.n	32e0 <__swbuf_r+0x70>
    32c0:	e008      	b.n	32d4 <__swbuf_r+0x64>
    32c2:	0021      	movs	r1, r4
    32c4:	0028      	movs	r0, r5
    32c6:	f000 f82b 	bl	3320 <__swsetup_r>
    32ca:	2800      	cmp	r0, #0
    32cc:	d0f1      	beq.n	32b2 <__swbuf_r+0x42>
    32ce:	2001      	movs	r0, #1
    32d0:	4240      	negs	r0, r0
    32d2:	e01d      	b.n	3310 <__swbuf_r+0xa0>
    32d4:	0021      	movs	r1, r4
    32d6:	0028      	movs	r0, r5
    32d8:	f000 f91e 	bl	3518 <_fflush_r>
    32dc:	2800      	cmp	r0, #0
    32de:	d1f6      	bne.n	32ce <__swbuf_r+0x5e>
    32e0:	68a3      	ldr	r3, [r4, #8]
    32e2:	3001      	adds	r0, #1
    32e4:	3b01      	subs	r3, #1
    32e6:	60a3      	str	r3, [r4, #8]
    32e8:	6823      	ldr	r3, [r4, #0]
    32ea:	1c5a      	adds	r2, r3, #1
    32ec:	6022      	str	r2, [r4, #0]
    32ee:	701f      	strb	r7, [r3, #0]
    32f0:	6963      	ldr	r3, [r4, #20]
    32f2:	4298      	cmp	r0, r3
    32f4:	d005      	beq.n	3302 <__swbuf_r+0x92>
    32f6:	89a3      	ldrh	r3, [r4, #12]
    32f8:	0030      	movs	r0, r6
    32fa:	07db      	lsls	r3, r3, #31
    32fc:	d508      	bpl.n	3310 <__swbuf_r+0xa0>
    32fe:	2e0a      	cmp	r6, #10
    3300:	d106      	bne.n	3310 <__swbuf_r+0xa0>
    3302:	0021      	movs	r1, r4
    3304:	0028      	movs	r0, r5
    3306:	f000 f907 	bl	3518 <_fflush_r>
    330a:	2800      	cmp	r0, #0
    330c:	d1df      	bne.n	32ce <__swbuf_r+0x5e>
    330e:	0030      	movs	r0, r6
    3310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3312:	46c0      	nop			; (mov r8, r8)
    3314:	0000429c 	.word	0x0000429c
    3318:	000042bc 	.word	0x000042bc
    331c:	000042dc 	.word	0x000042dc

00003320 <__swsetup_r>:
    3320:	4b36      	ldr	r3, [pc, #216]	; (33fc <__swsetup_r+0xdc>)
    3322:	b570      	push	{r4, r5, r6, lr}
    3324:	681d      	ldr	r5, [r3, #0]
    3326:	0006      	movs	r6, r0
    3328:	000c      	movs	r4, r1
    332a:	2d00      	cmp	r5, #0
    332c:	d005      	beq.n	333a <__swsetup_r+0x1a>
    332e:	69ab      	ldr	r3, [r5, #24]
    3330:	2b00      	cmp	r3, #0
    3332:	d102      	bne.n	333a <__swsetup_r+0x1a>
    3334:	0028      	movs	r0, r5
    3336:	f000 f95d 	bl	35f4 <__sinit>
    333a:	4b31      	ldr	r3, [pc, #196]	; (3400 <__swsetup_r+0xe0>)
    333c:	429c      	cmp	r4, r3
    333e:	d101      	bne.n	3344 <__swsetup_r+0x24>
    3340:	686c      	ldr	r4, [r5, #4]
    3342:	e008      	b.n	3356 <__swsetup_r+0x36>
    3344:	4b2f      	ldr	r3, [pc, #188]	; (3404 <__swsetup_r+0xe4>)
    3346:	429c      	cmp	r4, r3
    3348:	d101      	bne.n	334e <__swsetup_r+0x2e>
    334a:	68ac      	ldr	r4, [r5, #8]
    334c:	e003      	b.n	3356 <__swsetup_r+0x36>
    334e:	4b2e      	ldr	r3, [pc, #184]	; (3408 <__swsetup_r+0xe8>)
    3350:	429c      	cmp	r4, r3
    3352:	d100      	bne.n	3356 <__swsetup_r+0x36>
    3354:	68ec      	ldr	r4, [r5, #12]
    3356:	220c      	movs	r2, #12
    3358:	5ea3      	ldrsh	r3, [r4, r2]
    335a:	b29a      	uxth	r2, r3
    335c:	0711      	lsls	r1, r2, #28
    335e:	d423      	bmi.n	33a8 <__swsetup_r+0x88>
    3360:	06d1      	lsls	r1, r2, #27
    3362:	d407      	bmi.n	3374 <__swsetup_r+0x54>
    3364:	2209      	movs	r2, #9
    3366:	2001      	movs	r0, #1
    3368:	6032      	str	r2, [r6, #0]
    336a:	3237      	adds	r2, #55	; 0x37
    336c:	4313      	orrs	r3, r2
    336e:	81a3      	strh	r3, [r4, #12]
    3370:	4240      	negs	r0, r0
    3372:	e042      	b.n	33fa <__swsetup_r+0xda>
    3374:	0753      	lsls	r3, r2, #29
    3376:	d513      	bpl.n	33a0 <__swsetup_r+0x80>
    3378:	6b61      	ldr	r1, [r4, #52]	; 0x34
    337a:	2900      	cmp	r1, #0
    337c:	d008      	beq.n	3390 <__swsetup_r+0x70>
    337e:	0023      	movs	r3, r4
    3380:	3344      	adds	r3, #68	; 0x44
    3382:	4299      	cmp	r1, r3
    3384:	d002      	beq.n	338c <__swsetup_r+0x6c>
    3386:	0030      	movs	r0, r6
    3388:	f000 fa36 	bl	37f8 <_free_r>
    338c:	2300      	movs	r3, #0
    338e:	6363      	str	r3, [r4, #52]	; 0x34
    3390:	2224      	movs	r2, #36	; 0x24
    3392:	89a3      	ldrh	r3, [r4, #12]
    3394:	4393      	bics	r3, r2
    3396:	81a3      	strh	r3, [r4, #12]
    3398:	2300      	movs	r3, #0
    339a:	6063      	str	r3, [r4, #4]
    339c:	6923      	ldr	r3, [r4, #16]
    339e:	6023      	str	r3, [r4, #0]
    33a0:	2208      	movs	r2, #8
    33a2:	89a3      	ldrh	r3, [r4, #12]
    33a4:	4313      	orrs	r3, r2
    33a6:	81a3      	strh	r3, [r4, #12]
    33a8:	6923      	ldr	r3, [r4, #16]
    33aa:	2b00      	cmp	r3, #0
    33ac:	d10b      	bne.n	33c6 <__swsetup_r+0xa6>
    33ae:	23a0      	movs	r3, #160	; 0xa0
    33b0:	89a2      	ldrh	r2, [r4, #12]
    33b2:	009b      	lsls	r3, r3, #2
    33b4:	4013      	ands	r3, r2
    33b6:	2280      	movs	r2, #128	; 0x80
    33b8:	0092      	lsls	r2, r2, #2
    33ba:	4293      	cmp	r3, r2
    33bc:	d003      	beq.n	33c6 <__swsetup_r+0xa6>
    33be:	0021      	movs	r1, r4
    33c0:	0030      	movs	r0, r6
    33c2:	f000 f9d1 	bl	3768 <__smakebuf_r>
    33c6:	2301      	movs	r3, #1
    33c8:	89a2      	ldrh	r2, [r4, #12]
    33ca:	4013      	ands	r3, r2
    33cc:	d005      	beq.n	33da <__swsetup_r+0xba>
    33ce:	2300      	movs	r3, #0
    33d0:	60a3      	str	r3, [r4, #8]
    33d2:	6963      	ldr	r3, [r4, #20]
    33d4:	425b      	negs	r3, r3
    33d6:	61a3      	str	r3, [r4, #24]
    33d8:	e003      	b.n	33e2 <__swsetup_r+0xc2>
    33da:	0792      	lsls	r2, r2, #30
    33dc:	d400      	bmi.n	33e0 <__swsetup_r+0xc0>
    33de:	6963      	ldr	r3, [r4, #20]
    33e0:	60a3      	str	r3, [r4, #8]
    33e2:	2000      	movs	r0, #0
    33e4:	6923      	ldr	r3, [r4, #16]
    33e6:	4283      	cmp	r3, r0
    33e8:	d107      	bne.n	33fa <__swsetup_r+0xda>
    33ea:	220c      	movs	r2, #12
    33ec:	5ea3      	ldrsh	r3, [r4, r2]
    33ee:	061a      	lsls	r2, r3, #24
    33f0:	d503      	bpl.n	33fa <__swsetup_r+0xda>
    33f2:	2240      	movs	r2, #64	; 0x40
    33f4:	4313      	orrs	r3, r2
    33f6:	81a3      	strh	r3, [r4, #12]
    33f8:	3801      	subs	r0, #1
    33fa:	bd70      	pop	{r4, r5, r6, pc}
    33fc:	2000006c 	.word	0x2000006c
    3400:	0000429c 	.word	0x0000429c
    3404:	000042bc 	.word	0x000042bc
    3408:	000042dc 	.word	0x000042dc

0000340c <__sflush_r>:
    340c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    340e:	898a      	ldrh	r2, [r1, #12]
    3410:	0005      	movs	r5, r0
    3412:	000c      	movs	r4, r1
    3414:	0713      	lsls	r3, r2, #28
    3416:	d45a      	bmi.n	34ce <__sflush_r+0xc2>
    3418:	684b      	ldr	r3, [r1, #4]
    341a:	2b00      	cmp	r3, #0
    341c:	dc02      	bgt.n	3424 <__sflush_r+0x18>
    341e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3420:	2b00      	cmp	r3, #0
    3422:	dd19      	ble.n	3458 <__sflush_r+0x4c>
    3424:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3426:	2f00      	cmp	r7, #0
    3428:	d016      	beq.n	3458 <__sflush_r+0x4c>
    342a:	2300      	movs	r3, #0
    342c:	682e      	ldr	r6, [r5, #0]
    342e:	602b      	str	r3, [r5, #0]
    3430:	2380      	movs	r3, #128	; 0x80
    3432:	015b      	lsls	r3, r3, #5
    3434:	401a      	ands	r2, r3
    3436:	d001      	beq.n	343c <__sflush_r+0x30>
    3438:	6d60      	ldr	r0, [r4, #84]	; 0x54
    343a:	e014      	b.n	3466 <__sflush_r+0x5a>
    343c:	2301      	movs	r3, #1
    343e:	6a21      	ldr	r1, [r4, #32]
    3440:	0028      	movs	r0, r5
    3442:	47b8      	blx	r7
    3444:	1c43      	adds	r3, r0, #1
    3446:	d10e      	bne.n	3466 <__sflush_r+0x5a>
    3448:	682b      	ldr	r3, [r5, #0]
    344a:	2b00      	cmp	r3, #0
    344c:	d00b      	beq.n	3466 <__sflush_r+0x5a>
    344e:	2b1d      	cmp	r3, #29
    3450:	d001      	beq.n	3456 <__sflush_r+0x4a>
    3452:	2b16      	cmp	r3, #22
    3454:	d102      	bne.n	345c <__sflush_r+0x50>
    3456:	602e      	str	r6, [r5, #0]
    3458:	2000      	movs	r0, #0
    345a:	e05a      	b.n	3512 <__sflush_r+0x106>
    345c:	2240      	movs	r2, #64	; 0x40
    345e:	89a3      	ldrh	r3, [r4, #12]
    3460:	4313      	orrs	r3, r2
    3462:	81a3      	strh	r3, [r4, #12]
    3464:	e055      	b.n	3512 <__sflush_r+0x106>
    3466:	89a3      	ldrh	r3, [r4, #12]
    3468:	075b      	lsls	r3, r3, #29
    346a:	d506      	bpl.n	347a <__sflush_r+0x6e>
    346c:	6863      	ldr	r3, [r4, #4]
    346e:	1ac0      	subs	r0, r0, r3
    3470:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3472:	2b00      	cmp	r3, #0
    3474:	d001      	beq.n	347a <__sflush_r+0x6e>
    3476:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3478:	1ac0      	subs	r0, r0, r3
    347a:	2300      	movs	r3, #0
    347c:	0002      	movs	r2, r0
    347e:	6a21      	ldr	r1, [r4, #32]
    3480:	0028      	movs	r0, r5
    3482:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3484:	47b8      	blx	r7
    3486:	89a3      	ldrh	r3, [r4, #12]
    3488:	1c42      	adds	r2, r0, #1
    348a:	d106      	bne.n	349a <__sflush_r+0x8e>
    348c:	6829      	ldr	r1, [r5, #0]
    348e:	291d      	cmp	r1, #29
    3490:	d83a      	bhi.n	3508 <__sflush_r+0xfc>
    3492:	4a20      	ldr	r2, [pc, #128]	; (3514 <__sflush_r+0x108>)
    3494:	40ca      	lsrs	r2, r1
    3496:	07d2      	lsls	r2, r2, #31
    3498:	d536      	bpl.n	3508 <__sflush_r+0xfc>
    349a:	2200      	movs	r2, #0
    349c:	6062      	str	r2, [r4, #4]
    349e:	6922      	ldr	r2, [r4, #16]
    34a0:	6022      	str	r2, [r4, #0]
    34a2:	04db      	lsls	r3, r3, #19
    34a4:	d505      	bpl.n	34b2 <__sflush_r+0xa6>
    34a6:	1c43      	adds	r3, r0, #1
    34a8:	d102      	bne.n	34b0 <__sflush_r+0xa4>
    34aa:	682b      	ldr	r3, [r5, #0]
    34ac:	2b00      	cmp	r3, #0
    34ae:	d100      	bne.n	34b2 <__sflush_r+0xa6>
    34b0:	6560      	str	r0, [r4, #84]	; 0x54
    34b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    34b4:	602e      	str	r6, [r5, #0]
    34b6:	2900      	cmp	r1, #0
    34b8:	d0ce      	beq.n	3458 <__sflush_r+0x4c>
    34ba:	0023      	movs	r3, r4
    34bc:	3344      	adds	r3, #68	; 0x44
    34be:	4299      	cmp	r1, r3
    34c0:	d002      	beq.n	34c8 <__sflush_r+0xbc>
    34c2:	0028      	movs	r0, r5
    34c4:	f000 f998 	bl	37f8 <_free_r>
    34c8:	2000      	movs	r0, #0
    34ca:	6360      	str	r0, [r4, #52]	; 0x34
    34cc:	e021      	b.n	3512 <__sflush_r+0x106>
    34ce:	690f      	ldr	r7, [r1, #16]
    34d0:	2f00      	cmp	r7, #0
    34d2:	d0c1      	beq.n	3458 <__sflush_r+0x4c>
    34d4:	680b      	ldr	r3, [r1, #0]
    34d6:	600f      	str	r7, [r1, #0]
    34d8:	1bdb      	subs	r3, r3, r7
    34da:	9301      	str	r3, [sp, #4]
    34dc:	2300      	movs	r3, #0
    34de:	0792      	lsls	r2, r2, #30
    34e0:	d100      	bne.n	34e4 <__sflush_r+0xd8>
    34e2:	694b      	ldr	r3, [r1, #20]
    34e4:	60a3      	str	r3, [r4, #8]
    34e6:	e003      	b.n	34f0 <__sflush_r+0xe4>
    34e8:	9b01      	ldr	r3, [sp, #4]
    34ea:	183f      	adds	r7, r7, r0
    34ec:	1a1b      	subs	r3, r3, r0
    34ee:	9301      	str	r3, [sp, #4]
    34f0:	9b01      	ldr	r3, [sp, #4]
    34f2:	2b00      	cmp	r3, #0
    34f4:	ddb0      	ble.n	3458 <__sflush_r+0x4c>
    34f6:	9b01      	ldr	r3, [sp, #4]
    34f8:	003a      	movs	r2, r7
    34fa:	6a21      	ldr	r1, [r4, #32]
    34fc:	0028      	movs	r0, r5
    34fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3500:	47b0      	blx	r6
    3502:	2800      	cmp	r0, #0
    3504:	dcf0      	bgt.n	34e8 <__sflush_r+0xdc>
    3506:	89a3      	ldrh	r3, [r4, #12]
    3508:	2240      	movs	r2, #64	; 0x40
    350a:	2001      	movs	r0, #1
    350c:	4313      	orrs	r3, r2
    350e:	81a3      	strh	r3, [r4, #12]
    3510:	4240      	negs	r0, r0
    3512:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3514:	20400001 	.word	0x20400001

00003518 <_fflush_r>:
    3518:	690b      	ldr	r3, [r1, #16]
    351a:	b570      	push	{r4, r5, r6, lr}
    351c:	0005      	movs	r5, r0
    351e:	000c      	movs	r4, r1
    3520:	2b00      	cmp	r3, #0
    3522:	d101      	bne.n	3528 <_fflush_r+0x10>
    3524:	2000      	movs	r0, #0
    3526:	e01c      	b.n	3562 <_fflush_r+0x4a>
    3528:	2800      	cmp	r0, #0
    352a:	d004      	beq.n	3536 <_fflush_r+0x1e>
    352c:	6983      	ldr	r3, [r0, #24]
    352e:	2b00      	cmp	r3, #0
    3530:	d101      	bne.n	3536 <_fflush_r+0x1e>
    3532:	f000 f85f 	bl	35f4 <__sinit>
    3536:	4b0b      	ldr	r3, [pc, #44]	; (3564 <_fflush_r+0x4c>)
    3538:	429c      	cmp	r4, r3
    353a:	d101      	bne.n	3540 <_fflush_r+0x28>
    353c:	686c      	ldr	r4, [r5, #4]
    353e:	e008      	b.n	3552 <_fflush_r+0x3a>
    3540:	4b09      	ldr	r3, [pc, #36]	; (3568 <_fflush_r+0x50>)
    3542:	429c      	cmp	r4, r3
    3544:	d101      	bne.n	354a <_fflush_r+0x32>
    3546:	68ac      	ldr	r4, [r5, #8]
    3548:	e003      	b.n	3552 <_fflush_r+0x3a>
    354a:	4b08      	ldr	r3, [pc, #32]	; (356c <_fflush_r+0x54>)
    354c:	429c      	cmp	r4, r3
    354e:	d100      	bne.n	3552 <_fflush_r+0x3a>
    3550:	68ec      	ldr	r4, [r5, #12]
    3552:	220c      	movs	r2, #12
    3554:	5ea3      	ldrsh	r3, [r4, r2]
    3556:	2b00      	cmp	r3, #0
    3558:	d0e4      	beq.n	3524 <_fflush_r+0xc>
    355a:	0021      	movs	r1, r4
    355c:	0028      	movs	r0, r5
    355e:	f7ff ff55 	bl	340c <__sflush_r>
    3562:	bd70      	pop	{r4, r5, r6, pc}
    3564:	0000429c 	.word	0x0000429c
    3568:	000042bc 	.word	0x000042bc
    356c:	000042dc 	.word	0x000042dc

00003570 <_cleanup_r>:
    3570:	b510      	push	{r4, lr}
    3572:	4902      	ldr	r1, [pc, #8]	; (357c <_cleanup_r+0xc>)
    3574:	f000 f8b0 	bl	36d8 <_fwalk_reent>
    3578:	bd10      	pop	{r4, pc}
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	00003519 	.word	0x00003519

00003580 <std.isra.0>:
    3580:	2300      	movs	r3, #0
    3582:	b510      	push	{r4, lr}
    3584:	0004      	movs	r4, r0
    3586:	6003      	str	r3, [r0, #0]
    3588:	6043      	str	r3, [r0, #4]
    358a:	6083      	str	r3, [r0, #8]
    358c:	8181      	strh	r1, [r0, #12]
    358e:	6643      	str	r3, [r0, #100]	; 0x64
    3590:	81c2      	strh	r2, [r0, #14]
    3592:	6103      	str	r3, [r0, #16]
    3594:	6143      	str	r3, [r0, #20]
    3596:	6183      	str	r3, [r0, #24]
    3598:	0019      	movs	r1, r3
    359a:	2208      	movs	r2, #8
    359c:	305c      	adds	r0, #92	; 0x5c
    359e:	f7ff fd1e 	bl	2fde <memset>
    35a2:	4b05      	ldr	r3, [pc, #20]	; (35b8 <std.isra.0+0x38>)
    35a4:	6224      	str	r4, [r4, #32]
    35a6:	6263      	str	r3, [r4, #36]	; 0x24
    35a8:	4b04      	ldr	r3, [pc, #16]	; (35bc <std.isra.0+0x3c>)
    35aa:	62a3      	str	r3, [r4, #40]	; 0x28
    35ac:	4b04      	ldr	r3, [pc, #16]	; (35c0 <std.isra.0+0x40>)
    35ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    35b0:	4b04      	ldr	r3, [pc, #16]	; (35c4 <std.isra.0+0x44>)
    35b2:	6323      	str	r3, [r4, #48]	; 0x30
    35b4:	bd10      	pop	{r4, pc}
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	00003efd 	.word	0x00003efd
    35bc:	00003f25 	.word	0x00003f25
    35c0:	00003f5d 	.word	0x00003f5d
    35c4:	00003f89 	.word	0x00003f89

000035c8 <__sfmoreglue>:
    35c8:	b570      	push	{r4, r5, r6, lr}
    35ca:	2568      	movs	r5, #104	; 0x68
    35cc:	1e4b      	subs	r3, r1, #1
    35ce:	435d      	muls	r5, r3
    35d0:	000e      	movs	r6, r1
    35d2:	0029      	movs	r1, r5
    35d4:	3174      	adds	r1, #116	; 0x74
    35d6:	f000 f955 	bl	3884 <_malloc_r>
    35da:	1e04      	subs	r4, r0, #0
    35dc:	d008      	beq.n	35f0 <__sfmoreglue+0x28>
    35de:	2100      	movs	r1, #0
    35e0:	002a      	movs	r2, r5
    35e2:	6001      	str	r1, [r0, #0]
    35e4:	6046      	str	r6, [r0, #4]
    35e6:	300c      	adds	r0, #12
    35e8:	60a0      	str	r0, [r4, #8]
    35ea:	3268      	adds	r2, #104	; 0x68
    35ec:	f7ff fcf7 	bl	2fde <memset>
    35f0:	0020      	movs	r0, r4
    35f2:	bd70      	pop	{r4, r5, r6, pc}

000035f4 <__sinit>:
    35f4:	6983      	ldr	r3, [r0, #24]
    35f6:	b513      	push	{r0, r1, r4, lr}
    35f8:	0004      	movs	r4, r0
    35fa:	2b00      	cmp	r3, #0
    35fc:	d128      	bne.n	3650 <__sinit+0x5c>
    35fe:	6483      	str	r3, [r0, #72]	; 0x48
    3600:	64c3      	str	r3, [r0, #76]	; 0x4c
    3602:	6503      	str	r3, [r0, #80]	; 0x50
    3604:	4b13      	ldr	r3, [pc, #76]	; (3654 <__sinit+0x60>)
    3606:	4a14      	ldr	r2, [pc, #80]	; (3658 <__sinit+0x64>)
    3608:	681b      	ldr	r3, [r3, #0]
    360a:	6282      	str	r2, [r0, #40]	; 0x28
    360c:	9301      	str	r3, [sp, #4]
    360e:	4298      	cmp	r0, r3
    3610:	d101      	bne.n	3616 <__sinit+0x22>
    3612:	2301      	movs	r3, #1
    3614:	6183      	str	r3, [r0, #24]
    3616:	0020      	movs	r0, r4
    3618:	f000 f820 	bl	365c <__sfp>
    361c:	6060      	str	r0, [r4, #4]
    361e:	0020      	movs	r0, r4
    3620:	f000 f81c 	bl	365c <__sfp>
    3624:	60a0      	str	r0, [r4, #8]
    3626:	0020      	movs	r0, r4
    3628:	f000 f818 	bl	365c <__sfp>
    362c:	2200      	movs	r2, #0
    362e:	60e0      	str	r0, [r4, #12]
    3630:	2104      	movs	r1, #4
    3632:	6860      	ldr	r0, [r4, #4]
    3634:	f7ff ffa4 	bl	3580 <std.isra.0>
    3638:	2201      	movs	r2, #1
    363a:	2109      	movs	r1, #9
    363c:	68a0      	ldr	r0, [r4, #8]
    363e:	f7ff ff9f 	bl	3580 <std.isra.0>
    3642:	2202      	movs	r2, #2
    3644:	2112      	movs	r1, #18
    3646:	68e0      	ldr	r0, [r4, #12]
    3648:	f7ff ff9a 	bl	3580 <std.isra.0>
    364c:	2301      	movs	r3, #1
    364e:	61a3      	str	r3, [r4, #24]
    3650:	bd13      	pop	{r0, r1, r4, pc}
    3652:	46c0      	nop			; (mov r8, r8)
    3654:	00004298 	.word	0x00004298
    3658:	00003571 	.word	0x00003571

0000365c <__sfp>:
    365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    365e:	4b1d      	ldr	r3, [pc, #116]	; (36d4 <__sfp+0x78>)
    3660:	0006      	movs	r6, r0
    3662:	681d      	ldr	r5, [r3, #0]
    3664:	69ab      	ldr	r3, [r5, #24]
    3666:	2b00      	cmp	r3, #0
    3668:	d102      	bne.n	3670 <__sfp+0x14>
    366a:	0028      	movs	r0, r5
    366c:	f7ff ffc2 	bl	35f4 <__sinit>
    3670:	3548      	adds	r5, #72	; 0x48
    3672:	68ac      	ldr	r4, [r5, #8]
    3674:	686b      	ldr	r3, [r5, #4]
    3676:	3b01      	subs	r3, #1
    3678:	d405      	bmi.n	3686 <__sfp+0x2a>
    367a:	220c      	movs	r2, #12
    367c:	5ea7      	ldrsh	r7, [r4, r2]
    367e:	2f00      	cmp	r7, #0
    3680:	d010      	beq.n	36a4 <__sfp+0x48>
    3682:	3468      	adds	r4, #104	; 0x68
    3684:	e7f7      	b.n	3676 <__sfp+0x1a>
    3686:	682b      	ldr	r3, [r5, #0]
    3688:	2b00      	cmp	r3, #0
    368a:	d001      	beq.n	3690 <__sfp+0x34>
    368c:	682d      	ldr	r5, [r5, #0]
    368e:	e7f0      	b.n	3672 <__sfp+0x16>
    3690:	2104      	movs	r1, #4
    3692:	0030      	movs	r0, r6
    3694:	f7ff ff98 	bl	35c8 <__sfmoreglue>
    3698:	6028      	str	r0, [r5, #0]
    369a:	2800      	cmp	r0, #0
    369c:	d1f6      	bne.n	368c <__sfp+0x30>
    369e:	230c      	movs	r3, #12
    36a0:	6033      	str	r3, [r6, #0]
    36a2:	e016      	b.n	36d2 <__sfp+0x76>
    36a4:	2301      	movs	r3, #1
    36a6:	0020      	movs	r0, r4
    36a8:	425b      	negs	r3, r3
    36aa:	81e3      	strh	r3, [r4, #14]
    36ac:	3302      	adds	r3, #2
    36ae:	81a3      	strh	r3, [r4, #12]
    36b0:	6667      	str	r7, [r4, #100]	; 0x64
    36b2:	6027      	str	r7, [r4, #0]
    36b4:	60a7      	str	r7, [r4, #8]
    36b6:	6067      	str	r7, [r4, #4]
    36b8:	6127      	str	r7, [r4, #16]
    36ba:	6167      	str	r7, [r4, #20]
    36bc:	61a7      	str	r7, [r4, #24]
    36be:	305c      	adds	r0, #92	; 0x5c
    36c0:	2208      	movs	r2, #8
    36c2:	0039      	movs	r1, r7
    36c4:	f7ff fc8b 	bl	2fde <memset>
    36c8:	0020      	movs	r0, r4
    36ca:	6367      	str	r7, [r4, #52]	; 0x34
    36cc:	63a7      	str	r7, [r4, #56]	; 0x38
    36ce:	64a7      	str	r7, [r4, #72]	; 0x48
    36d0:	64e7      	str	r7, [r4, #76]	; 0x4c
    36d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36d4:	00004298 	.word	0x00004298

000036d8 <_fwalk_reent>:
    36d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    36da:	0004      	movs	r4, r0
    36dc:	0007      	movs	r7, r0
    36de:	2600      	movs	r6, #0
    36e0:	9101      	str	r1, [sp, #4]
    36e2:	3448      	adds	r4, #72	; 0x48
    36e4:	2c00      	cmp	r4, #0
    36e6:	d016      	beq.n	3716 <_fwalk_reent+0x3e>
    36e8:	6863      	ldr	r3, [r4, #4]
    36ea:	68a5      	ldr	r5, [r4, #8]
    36ec:	9300      	str	r3, [sp, #0]
    36ee:	9b00      	ldr	r3, [sp, #0]
    36f0:	3b01      	subs	r3, #1
    36f2:	9300      	str	r3, [sp, #0]
    36f4:	d40d      	bmi.n	3712 <_fwalk_reent+0x3a>
    36f6:	89ab      	ldrh	r3, [r5, #12]
    36f8:	2b01      	cmp	r3, #1
    36fa:	d908      	bls.n	370e <_fwalk_reent+0x36>
    36fc:	220e      	movs	r2, #14
    36fe:	5eab      	ldrsh	r3, [r5, r2]
    3700:	3301      	adds	r3, #1
    3702:	d004      	beq.n	370e <_fwalk_reent+0x36>
    3704:	0029      	movs	r1, r5
    3706:	0038      	movs	r0, r7
    3708:	9b01      	ldr	r3, [sp, #4]
    370a:	4798      	blx	r3
    370c:	4306      	orrs	r6, r0
    370e:	3568      	adds	r5, #104	; 0x68
    3710:	e7ed      	b.n	36ee <_fwalk_reent+0x16>
    3712:	6824      	ldr	r4, [r4, #0]
    3714:	e7e6      	b.n	36e4 <_fwalk_reent+0xc>
    3716:	0030      	movs	r0, r6
    3718:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000371c <__swhatbuf_r>:
    371c:	b570      	push	{r4, r5, r6, lr}
    371e:	000e      	movs	r6, r1
    3720:	001d      	movs	r5, r3
    3722:	230e      	movs	r3, #14
    3724:	5ec9      	ldrsh	r1, [r1, r3]
    3726:	b090      	sub	sp, #64	; 0x40
    3728:	0014      	movs	r4, r2
    372a:	2900      	cmp	r1, #0
    372c:	da06      	bge.n	373c <__swhatbuf_r+0x20>
    372e:	2300      	movs	r3, #0
    3730:	602b      	str	r3, [r5, #0]
    3732:	89b3      	ldrh	r3, [r6, #12]
    3734:	061b      	lsls	r3, r3, #24
    3736:	d50f      	bpl.n	3758 <__swhatbuf_r+0x3c>
    3738:	2340      	movs	r3, #64	; 0x40
    373a:	e00f      	b.n	375c <__swhatbuf_r+0x40>
    373c:	aa01      	add	r2, sp, #4
    373e:	f000 fc4f 	bl	3fe0 <_fstat_r>
    3742:	2800      	cmp	r0, #0
    3744:	dbf3      	blt.n	372e <__swhatbuf_r+0x12>
    3746:	23f0      	movs	r3, #240	; 0xf0
    3748:	9a02      	ldr	r2, [sp, #8]
    374a:	021b      	lsls	r3, r3, #8
    374c:	4013      	ands	r3, r2
    374e:	4a05      	ldr	r2, [pc, #20]	; (3764 <__swhatbuf_r+0x48>)
    3750:	189b      	adds	r3, r3, r2
    3752:	425a      	negs	r2, r3
    3754:	4153      	adcs	r3, r2
    3756:	602b      	str	r3, [r5, #0]
    3758:	2380      	movs	r3, #128	; 0x80
    375a:	00db      	lsls	r3, r3, #3
    375c:	2000      	movs	r0, #0
    375e:	6023      	str	r3, [r4, #0]
    3760:	b010      	add	sp, #64	; 0x40
    3762:	bd70      	pop	{r4, r5, r6, pc}
    3764:	ffffe000 	.word	0xffffe000

00003768 <__smakebuf_r>:
    3768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    376a:	2602      	movs	r6, #2
    376c:	898b      	ldrh	r3, [r1, #12]
    376e:	0005      	movs	r5, r0
    3770:	000c      	movs	r4, r1
    3772:	4233      	tst	r3, r6
    3774:	d110      	bne.n	3798 <__smakebuf_r+0x30>
    3776:	ab01      	add	r3, sp, #4
    3778:	466a      	mov	r2, sp
    377a:	f7ff ffcf 	bl	371c <__swhatbuf_r>
    377e:	9900      	ldr	r1, [sp, #0]
    3780:	0007      	movs	r7, r0
    3782:	0028      	movs	r0, r5
    3784:	f000 f87e 	bl	3884 <_malloc_r>
    3788:	2800      	cmp	r0, #0
    378a:	d10c      	bne.n	37a6 <__smakebuf_r+0x3e>
    378c:	220c      	movs	r2, #12
    378e:	5ea3      	ldrsh	r3, [r4, r2]
    3790:	059a      	lsls	r2, r3, #22
    3792:	d423      	bmi.n	37dc <__smakebuf_r+0x74>
    3794:	4333      	orrs	r3, r6
    3796:	81a3      	strh	r3, [r4, #12]
    3798:	0023      	movs	r3, r4
    379a:	3347      	adds	r3, #71	; 0x47
    379c:	6023      	str	r3, [r4, #0]
    379e:	6123      	str	r3, [r4, #16]
    37a0:	2301      	movs	r3, #1
    37a2:	6163      	str	r3, [r4, #20]
    37a4:	e01a      	b.n	37dc <__smakebuf_r+0x74>
    37a6:	2280      	movs	r2, #128	; 0x80
    37a8:	4b0d      	ldr	r3, [pc, #52]	; (37e0 <__smakebuf_r+0x78>)
    37aa:	62ab      	str	r3, [r5, #40]	; 0x28
    37ac:	89a3      	ldrh	r3, [r4, #12]
    37ae:	6020      	str	r0, [r4, #0]
    37b0:	4313      	orrs	r3, r2
    37b2:	81a3      	strh	r3, [r4, #12]
    37b4:	9b00      	ldr	r3, [sp, #0]
    37b6:	6120      	str	r0, [r4, #16]
    37b8:	6163      	str	r3, [r4, #20]
    37ba:	9b01      	ldr	r3, [sp, #4]
    37bc:	2b00      	cmp	r3, #0
    37be:	d00a      	beq.n	37d6 <__smakebuf_r+0x6e>
    37c0:	230e      	movs	r3, #14
    37c2:	5ee1      	ldrsh	r1, [r4, r3]
    37c4:	0028      	movs	r0, r5
    37c6:	f000 fc1d 	bl	4004 <_isatty_r>
    37ca:	2800      	cmp	r0, #0
    37cc:	d003      	beq.n	37d6 <__smakebuf_r+0x6e>
    37ce:	2201      	movs	r2, #1
    37d0:	89a3      	ldrh	r3, [r4, #12]
    37d2:	4313      	orrs	r3, r2
    37d4:	81a3      	strh	r3, [r4, #12]
    37d6:	89a3      	ldrh	r3, [r4, #12]
    37d8:	431f      	orrs	r7, r3
    37da:	81a7      	strh	r7, [r4, #12]
    37dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    37de:	46c0      	nop			; (mov r8, r8)
    37e0:	00003571 	.word	0x00003571

000037e4 <malloc>:
    37e4:	b510      	push	{r4, lr}
    37e6:	4b03      	ldr	r3, [pc, #12]	; (37f4 <malloc+0x10>)
    37e8:	0001      	movs	r1, r0
    37ea:	6818      	ldr	r0, [r3, #0]
    37ec:	f000 f84a 	bl	3884 <_malloc_r>
    37f0:	bd10      	pop	{r4, pc}
    37f2:	46c0      	nop			; (mov r8, r8)
    37f4:	2000006c 	.word	0x2000006c

000037f8 <_free_r>:
    37f8:	b530      	push	{r4, r5, lr}
    37fa:	2900      	cmp	r1, #0
    37fc:	d03e      	beq.n	387c <_free_r+0x84>
    37fe:	3904      	subs	r1, #4
    3800:	680b      	ldr	r3, [r1, #0]
    3802:	2b00      	cmp	r3, #0
    3804:	da00      	bge.n	3808 <_free_r+0x10>
    3806:	18c9      	adds	r1, r1, r3
    3808:	4a1d      	ldr	r2, [pc, #116]	; (3880 <_free_r+0x88>)
    380a:	6813      	ldr	r3, [r2, #0]
    380c:	0014      	movs	r4, r2
    380e:	2b00      	cmp	r3, #0
    3810:	d102      	bne.n	3818 <_free_r+0x20>
    3812:	604b      	str	r3, [r1, #4]
    3814:	6011      	str	r1, [r2, #0]
    3816:	e031      	b.n	387c <_free_r+0x84>
    3818:	428b      	cmp	r3, r1
    381a:	d90d      	bls.n	3838 <_free_r+0x40>
    381c:	680a      	ldr	r2, [r1, #0]
    381e:	1888      	adds	r0, r1, r2
    3820:	4283      	cmp	r3, r0
    3822:	d103      	bne.n	382c <_free_r+0x34>
    3824:	6818      	ldr	r0, [r3, #0]
    3826:	685b      	ldr	r3, [r3, #4]
    3828:	1882      	adds	r2, r0, r2
    382a:	600a      	str	r2, [r1, #0]
    382c:	604b      	str	r3, [r1, #4]
    382e:	6021      	str	r1, [r4, #0]
    3830:	e024      	b.n	387c <_free_r+0x84>
    3832:	428a      	cmp	r2, r1
    3834:	d803      	bhi.n	383e <_free_r+0x46>
    3836:	0013      	movs	r3, r2
    3838:	685a      	ldr	r2, [r3, #4]
    383a:	2a00      	cmp	r2, #0
    383c:	d1f9      	bne.n	3832 <_free_r+0x3a>
    383e:	681d      	ldr	r5, [r3, #0]
    3840:	195c      	adds	r4, r3, r5
    3842:	428c      	cmp	r4, r1
    3844:	d10b      	bne.n	385e <_free_r+0x66>
    3846:	6809      	ldr	r1, [r1, #0]
    3848:	1869      	adds	r1, r5, r1
    384a:	1858      	adds	r0, r3, r1
    384c:	6019      	str	r1, [r3, #0]
    384e:	4282      	cmp	r2, r0
    3850:	d114      	bne.n	387c <_free_r+0x84>
    3852:	6810      	ldr	r0, [r2, #0]
    3854:	6852      	ldr	r2, [r2, #4]
    3856:	1841      	adds	r1, r0, r1
    3858:	6019      	str	r1, [r3, #0]
    385a:	605a      	str	r2, [r3, #4]
    385c:	e00e      	b.n	387c <_free_r+0x84>
    385e:	428c      	cmp	r4, r1
    3860:	d902      	bls.n	3868 <_free_r+0x70>
    3862:	230c      	movs	r3, #12
    3864:	6003      	str	r3, [r0, #0]
    3866:	e009      	b.n	387c <_free_r+0x84>
    3868:	6808      	ldr	r0, [r1, #0]
    386a:	180c      	adds	r4, r1, r0
    386c:	42a2      	cmp	r2, r4
    386e:	d103      	bne.n	3878 <_free_r+0x80>
    3870:	6814      	ldr	r4, [r2, #0]
    3872:	6852      	ldr	r2, [r2, #4]
    3874:	1820      	adds	r0, r4, r0
    3876:	6008      	str	r0, [r1, #0]
    3878:	604a      	str	r2, [r1, #4]
    387a:	6059      	str	r1, [r3, #4]
    387c:	bd30      	pop	{r4, r5, pc}
    387e:	46c0      	nop			; (mov r8, r8)
    3880:	200000d8 	.word	0x200000d8

00003884 <_malloc_r>:
    3884:	2303      	movs	r3, #3
    3886:	b570      	push	{r4, r5, r6, lr}
    3888:	1ccd      	adds	r5, r1, #3
    388a:	439d      	bics	r5, r3
    388c:	3508      	adds	r5, #8
    388e:	0006      	movs	r6, r0
    3890:	2d0c      	cmp	r5, #12
    3892:	d201      	bcs.n	3898 <_malloc_r+0x14>
    3894:	250c      	movs	r5, #12
    3896:	e005      	b.n	38a4 <_malloc_r+0x20>
    3898:	2d00      	cmp	r5, #0
    389a:	da03      	bge.n	38a4 <_malloc_r+0x20>
    389c:	230c      	movs	r3, #12
    389e:	2000      	movs	r0, #0
    38a0:	6033      	str	r3, [r6, #0]
    38a2:	e040      	b.n	3926 <_malloc_r+0xa2>
    38a4:	42a9      	cmp	r1, r5
    38a6:	d8f9      	bhi.n	389c <_malloc_r+0x18>
    38a8:	4b1f      	ldr	r3, [pc, #124]	; (3928 <_malloc_r+0xa4>)
    38aa:	681c      	ldr	r4, [r3, #0]
    38ac:	001a      	movs	r2, r3
    38ae:	0021      	movs	r1, r4
    38b0:	2900      	cmp	r1, #0
    38b2:	d013      	beq.n	38dc <_malloc_r+0x58>
    38b4:	680b      	ldr	r3, [r1, #0]
    38b6:	1b5b      	subs	r3, r3, r5
    38b8:	d40d      	bmi.n	38d6 <_malloc_r+0x52>
    38ba:	2b0b      	cmp	r3, #11
    38bc:	d902      	bls.n	38c4 <_malloc_r+0x40>
    38be:	600b      	str	r3, [r1, #0]
    38c0:	18cc      	adds	r4, r1, r3
    38c2:	e01e      	b.n	3902 <_malloc_r+0x7e>
    38c4:	428c      	cmp	r4, r1
    38c6:	d102      	bne.n	38ce <_malloc_r+0x4a>
    38c8:	6863      	ldr	r3, [r4, #4]
    38ca:	6013      	str	r3, [r2, #0]
    38cc:	e01a      	b.n	3904 <_malloc_r+0x80>
    38ce:	684b      	ldr	r3, [r1, #4]
    38d0:	6063      	str	r3, [r4, #4]
    38d2:	000c      	movs	r4, r1
    38d4:	e016      	b.n	3904 <_malloc_r+0x80>
    38d6:	000c      	movs	r4, r1
    38d8:	6849      	ldr	r1, [r1, #4]
    38da:	e7e9      	b.n	38b0 <_malloc_r+0x2c>
    38dc:	4c13      	ldr	r4, [pc, #76]	; (392c <_malloc_r+0xa8>)
    38de:	6823      	ldr	r3, [r4, #0]
    38e0:	2b00      	cmp	r3, #0
    38e2:	d103      	bne.n	38ec <_malloc_r+0x68>
    38e4:	0030      	movs	r0, r6
    38e6:	f000 faf7 	bl	3ed8 <_sbrk_r>
    38ea:	6020      	str	r0, [r4, #0]
    38ec:	0029      	movs	r1, r5
    38ee:	0030      	movs	r0, r6
    38f0:	f000 faf2 	bl	3ed8 <_sbrk_r>
    38f4:	1c43      	adds	r3, r0, #1
    38f6:	d0d1      	beq.n	389c <_malloc_r+0x18>
    38f8:	2303      	movs	r3, #3
    38fa:	1cc4      	adds	r4, r0, #3
    38fc:	439c      	bics	r4, r3
    38fe:	42a0      	cmp	r0, r4
    3900:	d10a      	bne.n	3918 <_malloc_r+0x94>
    3902:	6025      	str	r5, [r4, #0]
    3904:	0020      	movs	r0, r4
    3906:	2207      	movs	r2, #7
    3908:	300b      	adds	r0, #11
    390a:	1d23      	adds	r3, r4, #4
    390c:	4390      	bics	r0, r2
    390e:	1ac3      	subs	r3, r0, r3
    3910:	d009      	beq.n	3926 <_malloc_r+0xa2>
    3912:	425a      	negs	r2, r3
    3914:	50e2      	str	r2, [r4, r3]
    3916:	e006      	b.n	3926 <_malloc_r+0xa2>
    3918:	1a21      	subs	r1, r4, r0
    391a:	0030      	movs	r0, r6
    391c:	f000 fadc 	bl	3ed8 <_sbrk_r>
    3920:	1c43      	adds	r3, r0, #1
    3922:	d1ee      	bne.n	3902 <_malloc_r+0x7e>
    3924:	e7ba      	b.n	389c <_malloc_r+0x18>
    3926:	bd70      	pop	{r4, r5, r6, pc}
    3928:	200000d8 	.word	0x200000d8
    392c:	200000d4 	.word	0x200000d4

00003930 <__sfputc_r>:
    3930:	6893      	ldr	r3, [r2, #8]
    3932:	b510      	push	{r4, lr}
    3934:	3b01      	subs	r3, #1
    3936:	6093      	str	r3, [r2, #8]
    3938:	2b00      	cmp	r3, #0
    393a:	da05      	bge.n	3948 <__sfputc_r+0x18>
    393c:	6994      	ldr	r4, [r2, #24]
    393e:	42a3      	cmp	r3, r4
    3940:	db08      	blt.n	3954 <__sfputc_r+0x24>
    3942:	b2cb      	uxtb	r3, r1
    3944:	2b0a      	cmp	r3, #10
    3946:	d005      	beq.n	3954 <__sfputc_r+0x24>
    3948:	6813      	ldr	r3, [r2, #0]
    394a:	1c58      	adds	r0, r3, #1
    394c:	6010      	str	r0, [r2, #0]
    394e:	7019      	strb	r1, [r3, #0]
    3950:	b2c8      	uxtb	r0, r1
    3952:	e001      	b.n	3958 <__sfputc_r+0x28>
    3954:	f7ff fc8c 	bl	3270 <__swbuf_r>
    3958:	bd10      	pop	{r4, pc}

0000395a <__sfputs_r>:
    395a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    395c:	0006      	movs	r6, r0
    395e:	000f      	movs	r7, r1
    3960:	0014      	movs	r4, r2
    3962:	18d5      	adds	r5, r2, r3
    3964:	42ac      	cmp	r4, r5
    3966:	d008      	beq.n	397a <__sfputs_r+0x20>
    3968:	7821      	ldrb	r1, [r4, #0]
    396a:	003a      	movs	r2, r7
    396c:	0030      	movs	r0, r6
    396e:	f7ff ffdf 	bl	3930 <__sfputc_r>
    3972:	3401      	adds	r4, #1
    3974:	1c43      	adds	r3, r0, #1
    3976:	d1f5      	bne.n	3964 <__sfputs_r+0xa>
    3978:	e000      	b.n	397c <__sfputs_r+0x22>
    397a:	2000      	movs	r0, #0
    397c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003980 <_vfiprintf_r>:
    3980:	b5f0      	push	{r4, r5, r6, r7, lr}
    3982:	b09f      	sub	sp, #124	; 0x7c
    3984:	0006      	movs	r6, r0
    3986:	000f      	movs	r7, r1
    3988:	9202      	str	r2, [sp, #8]
    398a:	9305      	str	r3, [sp, #20]
    398c:	2800      	cmp	r0, #0
    398e:	d004      	beq.n	399a <_vfiprintf_r+0x1a>
    3990:	6983      	ldr	r3, [r0, #24]
    3992:	2b00      	cmp	r3, #0
    3994:	d101      	bne.n	399a <_vfiprintf_r+0x1a>
    3996:	f7ff fe2d 	bl	35f4 <__sinit>
    399a:	4b7f      	ldr	r3, [pc, #508]	; (3b98 <_vfiprintf_r+0x218>)
    399c:	429f      	cmp	r7, r3
    399e:	d101      	bne.n	39a4 <_vfiprintf_r+0x24>
    39a0:	6877      	ldr	r7, [r6, #4]
    39a2:	e008      	b.n	39b6 <_vfiprintf_r+0x36>
    39a4:	4b7d      	ldr	r3, [pc, #500]	; (3b9c <_vfiprintf_r+0x21c>)
    39a6:	429f      	cmp	r7, r3
    39a8:	d101      	bne.n	39ae <_vfiprintf_r+0x2e>
    39aa:	68b7      	ldr	r7, [r6, #8]
    39ac:	e003      	b.n	39b6 <_vfiprintf_r+0x36>
    39ae:	4b7c      	ldr	r3, [pc, #496]	; (3ba0 <_vfiprintf_r+0x220>)
    39b0:	429f      	cmp	r7, r3
    39b2:	d100      	bne.n	39b6 <_vfiprintf_r+0x36>
    39b4:	68f7      	ldr	r7, [r6, #12]
    39b6:	89bb      	ldrh	r3, [r7, #12]
    39b8:	071b      	lsls	r3, r3, #28
    39ba:	d50a      	bpl.n	39d2 <_vfiprintf_r+0x52>
    39bc:	693b      	ldr	r3, [r7, #16]
    39be:	2b00      	cmp	r3, #0
    39c0:	d007      	beq.n	39d2 <_vfiprintf_r+0x52>
    39c2:	2300      	movs	r3, #0
    39c4:	ad06      	add	r5, sp, #24
    39c6:	616b      	str	r3, [r5, #20]
    39c8:	3320      	adds	r3, #32
    39ca:	766b      	strb	r3, [r5, #25]
    39cc:	3310      	adds	r3, #16
    39ce:	76ab      	strb	r3, [r5, #26]
    39d0:	e03d      	b.n	3a4e <_vfiprintf_r+0xce>
    39d2:	0039      	movs	r1, r7
    39d4:	0030      	movs	r0, r6
    39d6:	f7ff fca3 	bl	3320 <__swsetup_r>
    39da:	2800      	cmp	r0, #0
    39dc:	d0f1      	beq.n	39c2 <_vfiprintf_r+0x42>
    39de:	2001      	movs	r0, #1
    39e0:	4240      	negs	r0, r0
    39e2:	e0d6      	b.n	3b92 <_vfiprintf_r+0x212>
    39e4:	9a05      	ldr	r2, [sp, #20]
    39e6:	1d11      	adds	r1, r2, #4
    39e8:	6812      	ldr	r2, [r2, #0]
    39ea:	9105      	str	r1, [sp, #20]
    39ec:	2a00      	cmp	r2, #0
    39ee:	da00      	bge.n	39f2 <_vfiprintf_r+0x72>
    39f0:	e07f      	b.n	3af2 <_vfiprintf_r+0x172>
    39f2:	9209      	str	r2, [sp, #36]	; 0x24
    39f4:	3401      	adds	r4, #1
    39f6:	7823      	ldrb	r3, [r4, #0]
    39f8:	2b2e      	cmp	r3, #46	; 0x2e
    39fa:	d100      	bne.n	39fe <_vfiprintf_r+0x7e>
    39fc:	e08d      	b.n	3b1a <_vfiprintf_r+0x19a>
    39fe:	7821      	ldrb	r1, [r4, #0]
    3a00:	2203      	movs	r2, #3
    3a02:	4868      	ldr	r0, [pc, #416]	; (3ba4 <_vfiprintf_r+0x224>)
    3a04:	f000 fb24 	bl	4050 <memchr>
    3a08:	2800      	cmp	r0, #0
    3a0a:	d007      	beq.n	3a1c <_vfiprintf_r+0x9c>
    3a0c:	4b65      	ldr	r3, [pc, #404]	; (3ba4 <_vfiprintf_r+0x224>)
    3a0e:	682a      	ldr	r2, [r5, #0]
    3a10:	1ac0      	subs	r0, r0, r3
    3a12:	2340      	movs	r3, #64	; 0x40
    3a14:	4083      	lsls	r3, r0
    3a16:	4313      	orrs	r3, r2
    3a18:	602b      	str	r3, [r5, #0]
    3a1a:	3401      	adds	r4, #1
    3a1c:	7821      	ldrb	r1, [r4, #0]
    3a1e:	1c63      	adds	r3, r4, #1
    3a20:	2206      	movs	r2, #6
    3a22:	4861      	ldr	r0, [pc, #388]	; (3ba8 <_vfiprintf_r+0x228>)
    3a24:	9302      	str	r3, [sp, #8]
    3a26:	7629      	strb	r1, [r5, #24]
    3a28:	f000 fb12 	bl	4050 <memchr>
    3a2c:	2800      	cmp	r0, #0
    3a2e:	d100      	bne.n	3a32 <_vfiprintf_r+0xb2>
    3a30:	e09d      	b.n	3b6e <_vfiprintf_r+0x1ee>
    3a32:	4b5e      	ldr	r3, [pc, #376]	; (3bac <_vfiprintf_r+0x22c>)
    3a34:	2b00      	cmp	r3, #0
    3a36:	d000      	beq.n	3a3a <_vfiprintf_r+0xba>
    3a38:	e090      	b.n	3b5c <_vfiprintf_r+0x1dc>
    3a3a:	2207      	movs	r2, #7
    3a3c:	9b05      	ldr	r3, [sp, #20]
    3a3e:	3307      	adds	r3, #7
    3a40:	4393      	bics	r3, r2
    3a42:	3308      	adds	r3, #8
    3a44:	9305      	str	r3, [sp, #20]
    3a46:	696b      	ldr	r3, [r5, #20]
    3a48:	9a03      	ldr	r2, [sp, #12]
    3a4a:	189b      	adds	r3, r3, r2
    3a4c:	616b      	str	r3, [r5, #20]
    3a4e:	9c02      	ldr	r4, [sp, #8]
    3a50:	7823      	ldrb	r3, [r4, #0]
    3a52:	2b00      	cmp	r3, #0
    3a54:	d104      	bne.n	3a60 <_vfiprintf_r+0xe0>
    3a56:	9b02      	ldr	r3, [sp, #8]
    3a58:	1ae3      	subs	r3, r4, r3
    3a5a:	9304      	str	r3, [sp, #16]
    3a5c:	d012      	beq.n	3a84 <_vfiprintf_r+0x104>
    3a5e:	e003      	b.n	3a68 <_vfiprintf_r+0xe8>
    3a60:	2b25      	cmp	r3, #37	; 0x25
    3a62:	d0f8      	beq.n	3a56 <_vfiprintf_r+0xd6>
    3a64:	3401      	adds	r4, #1
    3a66:	e7f3      	b.n	3a50 <_vfiprintf_r+0xd0>
    3a68:	9b04      	ldr	r3, [sp, #16]
    3a6a:	9a02      	ldr	r2, [sp, #8]
    3a6c:	0039      	movs	r1, r7
    3a6e:	0030      	movs	r0, r6
    3a70:	f7ff ff73 	bl	395a <__sfputs_r>
    3a74:	1c43      	adds	r3, r0, #1
    3a76:	d100      	bne.n	3a7a <_vfiprintf_r+0xfa>
    3a78:	e086      	b.n	3b88 <_vfiprintf_r+0x208>
    3a7a:	696a      	ldr	r2, [r5, #20]
    3a7c:	9b04      	ldr	r3, [sp, #16]
    3a7e:	4694      	mov	ip, r2
    3a80:	4463      	add	r3, ip
    3a82:	616b      	str	r3, [r5, #20]
    3a84:	7823      	ldrb	r3, [r4, #0]
    3a86:	2b00      	cmp	r3, #0
    3a88:	d07e      	beq.n	3b88 <_vfiprintf_r+0x208>
    3a8a:	2201      	movs	r2, #1
    3a8c:	2300      	movs	r3, #0
    3a8e:	4252      	negs	r2, r2
    3a90:	606a      	str	r2, [r5, #4]
    3a92:	a902      	add	r1, sp, #8
    3a94:	3254      	adds	r2, #84	; 0x54
    3a96:	1852      	adds	r2, r2, r1
    3a98:	3401      	adds	r4, #1
    3a9a:	602b      	str	r3, [r5, #0]
    3a9c:	60eb      	str	r3, [r5, #12]
    3a9e:	60ab      	str	r3, [r5, #8]
    3aa0:	7013      	strb	r3, [r2, #0]
    3aa2:	65ab      	str	r3, [r5, #88]	; 0x58
    3aa4:	7821      	ldrb	r1, [r4, #0]
    3aa6:	2205      	movs	r2, #5
    3aa8:	4841      	ldr	r0, [pc, #260]	; (3bb0 <_vfiprintf_r+0x230>)
    3aaa:	f000 fad1 	bl	4050 <memchr>
    3aae:	2800      	cmp	r0, #0
    3ab0:	d008      	beq.n	3ac4 <_vfiprintf_r+0x144>
    3ab2:	4b3f      	ldr	r3, [pc, #252]	; (3bb0 <_vfiprintf_r+0x230>)
    3ab4:	682a      	ldr	r2, [r5, #0]
    3ab6:	1ac0      	subs	r0, r0, r3
    3ab8:	2301      	movs	r3, #1
    3aba:	4083      	lsls	r3, r0
    3abc:	4313      	orrs	r3, r2
    3abe:	602b      	str	r3, [r5, #0]
    3ac0:	3401      	adds	r4, #1
    3ac2:	e7ef      	b.n	3aa4 <_vfiprintf_r+0x124>
    3ac4:	682b      	ldr	r3, [r5, #0]
    3ac6:	06da      	lsls	r2, r3, #27
    3ac8:	d504      	bpl.n	3ad4 <_vfiprintf_r+0x154>
    3aca:	2253      	movs	r2, #83	; 0x53
    3acc:	2120      	movs	r1, #32
    3ace:	a802      	add	r0, sp, #8
    3ad0:	1812      	adds	r2, r2, r0
    3ad2:	7011      	strb	r1, [r2, #0]
    3ad4:	071a      	lsls	r2, r3, #28
    3ad6:	d504      	bpl.n	3ae2 <_vfiprintf_r+0x162>
    3ad8:	2253      	movs	r2, #83	; 0x53
    3ada:	212b      	movs	r1, #43	; 0x2b
    3adc:	a802      	add	r0, sp, #8
    3ade:	1812      	adds	r2, r2, r0
    3ae0:	7011      	strb	r1, [r2, #0]
    3ae2:	7822      	ldrb	r2, [r4, #0]
    3ae4:	2a2a      	cmp	r2, #42	; 0x2a
    3ae6:	d100      	bne.n	3aea <_vfiprintf_r+0x16a>
    3ae8:	e77c      	b.n	39e4 <_vfiprintf_r+0x64>
    3aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3aec:	2000      	movs	r0, #0
    3aee:	210a      	movs	r1, #10
    3af0:	e005      	b.n	3afe <_vfiprintf_r+0x17e>
    3af2:	4252      	negs	r2, r2
    3af4:	60ea      	str	r2, [r5, #12]
    3af6:	2202      	movs	r2, #2
    3af8:	4313      	orrs	r3, r2
    3afa:	602b      	str	r3, [r5, #0]
    3afc:	e77a      	b.n	39f4 <_vfiprintf_r+0x74>
    3afe:	7822      	ldrb	r2, [r4, #0]
    3b00:	3a30      	subs	r2, #48	; 0x30
    3b02:	2a09      	cmp	r2, #9
    3b04:	d804      	bhi.n	3b10 <_vfiprintf_r+0x190>
    3b06:	434b      	muls	r3, r1
    3b08:	3401      	adds	r4, #1
    3b0a:	189b      	adds	r3, r3, r2
    3b0c:	2001      	movs	r0, #1
    3b0e:	e7f6      	b.n	3afe <_vfiprintf_r+0x17e>
    3b10:	2800      	cmp	r0, #0
    3b12:	d100      	bne.n	3b16 <_vfiprintf_r+0x196>
    3b14:	e76f      	b.n	39f6 <_vfiprintf_r+0x76>
    3b16:	9309      	str	r3, [sp, #36]	; 0x24
    3b18:	e76d      	b.n	39f6 <_vfiprintf_r+0x76>
    3b1a:	7863      	ldrb	r3, [r4, #1]
    3b1c:	2b2a      	cmp	r3, #42	; 0x2a
    3b1e:	d10a      	bne.n	3b36 <_vfiprintf_r+0x1b6>
    3b20:	9b05      	ldr	r3, [sp, #20]
    3b22:	3402      	adds	r4, #2
    3b24:	1d1a      	adds	r2, r3, #4
    3b26:	681b      	ldr	r3, [r3, #0]
    3b28:	9205      	str	r2, [sp, #20]
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	da01      	bge.n	3b32 <_vfiprintf_r+0x1b2>
    3b2e:	2301      	movs	r3, #1
    3b30:	425b      	negs	r3, r3
    3b32:	9307      	str	r3, [sp, #28]
    3b34:	e763      	b.n	39fe <_vfiprintf_r+0x7e>
    3b36:	2300      	movs	r3, #0
    3b38:	200a      	movs	r0, #10
    3b3a:	001a      	movs	r2, r3
    3b3c:	3401      	adds	r4, #1
    3b3e:	606b      	str	r3, [r5, #4]
    3b40:	7821      	ldrb	r1, [r4, #0]
    3b42:	3930      	subs	r1, #48	; 0x30
    3b44:	2909      	cmp	r1, #9
    3b46:	d804      	bhi.n	3b52 <_vfiprintf_r+0x1d2>
    3b48:	4342      	muls	r2, r0
    3b4a:	3401      	adds	r4, #1
    3b4c:	1852      	adds	r2, r2, r1
    3b4e:	2301      	movs	r3, #1
    3b50:	e7f6      	b.n	3b40 <_vfiprintf_r+0x1c0>
    3b52:	2b00      	cmp	r3, #0
    3b54:	d100      	bne.n	3b58 <_vfiprintf_r+0x1d8>
    3b56:	e752      	b.n	39fe <_vfiprintf_r+0x7e>
    3b58:	9207      	str	r2, [sp, #28]
    3b5a:	e750      	b.n	39fe <_vfiprintf_r+0x7e>
    3b5c:	ab05      	add	r3, sp, #20
    3b5e:	9300      	str	r3, [sp, #0]
    3b60:	003a      	movs	r2, r7
    3b62:	4b14      	ldr	r3, [pc, #80]	; (3bb4 <_vfiprintf_r+0x234>)
    3b64:	0029      	movs	r1, r5
    3b66:	0030      	movs	r0, r6
    3b68:	e000      	b.n	3b6c <_vfiprintf_r+0x1ec>
    3b6a:	bf00      	nop
    3b6c:	e007      	b.n	3b7e <_vfiprintf_r+0x1fe>
    3b6e:	ab05      	add	r3, sp, #20
    3b70:	9300      	str	r3, [sp, #0]
    3b72:	003a      	movs	r2, r7
    3b74:	4b0f      	ldr	r3, [pc, #60]	; (3bb4 <_vfiprintf_r+0x234>)
    3b76:	0029      	movs	r1, r5
    3b78:	0030      	movs	r0, r6
    3b7a:	f000 f88b 	bl	3c94 <_printf_i>
    3b7e:	9003      	str	r0, [sp, #12]
    3b80:	9b03      	ldr	r3, [sp, #12]
    3b82:	3301      	adds	r3, #1
    3b84:	d000      	beq.n	3b88 <_vfiprintf_r+0x208>
    3b86:	e75e      	b.n	3a46 <_vfiprintf_r+0xc6>
    3b88:	89bb      	ldrh	r3, [r7, #12]
    3b8a:	065b      	lsls	r3, r3, #25
    3b8c:	d500      	bpl.n	3b90 <_vfiprintf_r+0x210>
    3b8e:	e726      	b.n	39de <_vfiprintf_r+0x5e>
    3b90:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3b92:	b01f      	add	sp, #124	; 0x7c
    3b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b96:	46c0      	nop			; (mov r8, r8)
    3b98:	0000429c 	.word	0x0000429c
    3b9c:	000042bc 	.word	0x000042bc
    3ba0:	000042dc 	.word	0x000042dc
    3ba4:	00004302 	.word	0x00004302
    3ba8:	00004306 	.word	0x00004306
    3bac:	00000000 	.word	0x00000000
    3bb0:	000042fc 	.word	0x000042fc
    3bb4:	0000395b 	.word	0x0000395b

00003bb8 <_printf_common>:
    3bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3bba:	0017      	movs	r7, r2
    3bbc:	9301      	str	r3, [sp, #4]
    3bbe:	688a      	ldr	r2, [r1, #8]
    3bc0:	690b      	ldr	r3, [r1, #16]
    3bc2:	9000      	str	r0, [sp, #0]
    3bc4:	000c      	movs	r4, r1
    3bc6:	4293      	cmp	r3, r2
    3bc8:	da00      	bge.n	3bcc <_printf_common+0x14>
    3bca:	0013      	movs	r3, r2
    3bcc:	0022      	movs	r2, r4
    3bce:	603b      	str	r3, [r7, #0]
    3bd0:	3243      	adds	r2, #67	; 0x43
    3bd2:	7812      	ldrb	r2, [r2, #0]
    3bd4:	2a00      	cmp	r2, #0
    3bd6:	d001      	beq.n	3bdc <_printf_common+0x24>
    3bd8:	3301      	adds	r3, #1
    3bda:	603b      	str	r3, [r7, #0]
    3bdc:	6823      	ldr	r3, [r4, #0]
    3bde:	069b      	lsls	r3, r3, #26
    3be0:	d502      	bpl.n	3be8 <_printf_common+0x30>
    3be2:	683b      	ldr	r3, [r7, #0]
    3be4:	3302      	adds	r3, #2
    3be6:	603b      	str	r3, [r7, #0]
    3be8:	2506      	movs	r5, #6
    3bea:	6823      	ldr	r3, [r4, #0]
    3bec:	401d      	ands	r5, r3
    3bee:	d01e      	beq.n	3c2e <_printf_common+0x76>
    3bf0:	0023      	movs	r3, r4
    3bf2:	3343      	adds	r3, #67	; 0x43
    3bf4:	781b      	ldrb	r3, [r3, #0]
    3bf6:	1e5a      	subs	r2, r3, #1
    3bf8:	4193      	sbcs	r3, r2
    3bfa:	6822      	ldr	r2, [r4, #0]
    3bfc:	0692      	lsls	r2, r2, #26
    3bfe:	d51c      	bpl.n	3c3a <_printf_common+0x82>
    3c00:	2030      	movs	r0, #48	; 0x30
    3c02:	18e1      	adds	r1, r4, r3
    3c04:	3143      	adds	r1, #67	; 0x43
    3c06:	7008      	strb	r0, [r1, #0]
    3c08:	0021      	movs	r1, r4
    3c0a:	1c5a      	adds	r2, r3, #1
    3c0c:	3145      	adds	r1, #69	; 0x45
    3c0e:	7809      	ldrb	r1, [r1, #0]
    3c10:	18a2      	adds	r2, r4, r2
    3c12:	3243      	adds	r2, #67	; 0x43
    3c14:	3302      	adds	r3, #2
    3c16:	7011      	strb	r1, [r2, #0]
    3c18:	e00f      	b.n	3c3a <_printf_common+0x82>
    3c1a:	0022      	movs	r2, r4
    3c1c:	2301      	movs	r3, #1
    3c1e:	3219      	adds	r2, #25
    3c20:	9901      	ldr	r1, [sp, #4]
    3c22:	9800      	ldr	r0, [sp, #0]
    3c24:	9e08      	ldr	r6, [sp, #32]
    3c26:	47b0      	blx	r6
    3c28:	1c43      	adds	r3, r0, #1
    3c2a:	d00e      	beq.n	3c4a <_printf_common+0x92>
    3c2c:	3501      	adds	r5, #1
    3c2e:	68e3      	ldr	r3, [r4, #12]
    3c30:	683a      	ldr	r2, [r7, #0]
    3c32:	1a9b      	subs	r3, r3, r2
    3c34:	429d      	cmp	r5, r3
    3c36:	dbf0      	blt.n	3c1a <_printf_common+0x62>
    3c38:	e7da      	b.n	3bf0 <_printf_common+0x38>
    3c3a:	0022      	movs	r2, r4
    3c3c:	9901      	ldr	r1, [sp, #4]
    3c3e:	3243      	adds	r2, #67	; 0x43
    3c40:	9800      	ldr	r0, [sp, #0]
    3c42:	9d08      	ldr	r5, [sp, #32]
    3c44:	47a8      	blx	r5
    3c46:	1c43      	adds	r3, r0, #1
    3c48:	d102      	bne.n	3c50 <_printf_common+0x98>
    3c4a:	2001      	movs	r0, #1
    3c4c:	4240      	negs	r0, r0
    3c4e:	e020      	b.n	3c92 <_printf_common+0xda>
    3c50:	2306      	movs	r3, #6
    3c52:	6820      	ldr	r0, [r4, #0]
    3c54:	68e1      	ldr	r1, [r4, #12]
    3c56:	683a      	ldr	r2, [r7, #0]
    3c58:	4003      	ands	r3, r0
    3c5a:	2500      	movs	r5, #0
    3c5c:	2b04      	cmp	r3, #4
    3c5e:	d103      	bne.n	3c68 <_printf_common+0xb0>
    3c60:	1a8d      	subs	r5, r1, r2
    3c62:	43eb      	mvns	r3, r5
    3c64:	17db      	asrs	r3, r3, #31
    3c66:	401d      	ands	r5, r3
    3c68:	68a3      	ldr	r3, [r4, #8]
    3c6a:	6922      	ldr	r2, [r4, #16]
    3c6c:	4293      	cmp	r3, r2
    3c6e:	dd01      	ble.n	3c74 <_printf_common+0xbc>
    3c70:	1a9b      	subs	r3, r3, r2
    3c72:	18ed      	adds	r5, r5, r3
    3c74:	2700      	movs	r7, #0
    3c76:	42bd      	cmp	r5, r7
    3c78:	d00a      	beq.n	3c90 <_printf_common+0xd8>
    3c7a:	0022      	movs	r2, r4
    3c7c:	2301      	movs	r3, #1
    3c7e:	321a      	adds	r2, #26
    3c80:	9901      	ldr	r1, [sp, #4]
    3c82:	9800      	ldr	r0, [sp, #0]
    3c84:	9e08      	ldr	r6, [sp, #32]
    3c86:	47b0      	blx	r6
    3c88:	1c43      	adds	r3, r0, #1
    3c8a:	d0de      	beq.n	3c4a <_printf_common+0x92>
    3c8c:	3701      	adds	r7, #1
    3c8e:	e7f2      	b.n	3c76 <_printf_common+0xbe>
    3c90:	2000      	movs	r0, #0
    3c92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00003c94 <_printf_i>:
    3c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c96:	b08b      	sub	sp, #44	; 0x2c
    3c98:	9206      	str	r2, [sp, #24]
    3c9a:	000a      	movs	r2, r1
    3c9c:	3243      	adds	r2, #67	; 0x43
    3c9e:	9307      	str	r3, [sp, #28]
    3ca0:	9005      	str	r0, [sp, #20]
    3ca2:	9204      	str	r2, [sp, #16]
    3ca4:	7e0a      	ldrb	r2, [r1, #24]
    3ca6:	000c      	movs	r4, r1
    3ca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3caa:	2a6e      	cmp	r2, #110	; 0x6e
    3cac:	d100      	bne.n	3cb0 <_printf_i+0x1c>
    3cae:	e0ab      	b.n	3e08 <_printf_i+0x174>
    3cb0:	d811      	bhi.n	3cd6 <_printf_i+0x42>
    3cb2:	2a63      	cmp	r2, #99	; 0x63
    3cb4:	d022      	beq.n	3cfc <_printf_i+0x68>
    3cb6:	d809      	bhi.n	3ccc <_printf_i+0x38>
    3cb8:	2a00      	cmp	r2, #0
    3cba:	d100      	bne.n	3cbe <_printf_i+0x2a>
    3cbc:	e0b5      	b.n	3e2a <_printf_i+0x196>
    3cbe:	2a58      	cmp	r2, #88	; 0x58
    3cc0:	d000      	beq.n	3cc4 <_printf_i+0x30>
    3cc2:	e0c5      	b.n	3e50 <_printf_i+0x1bc>
    3cc4:	3145      	adds	r1, #69	; 0x45
    3cc6:	700a      	strb	r2, [r1, #0]
    3cc8:	4a81      	ldr	r2, [pc, #516]	; (3ed0 <_printf_i+0x23c>)
    3cca:	e04f      	b.n	3d6c <_printf_i+0xd8>
    3ccc:	2a64      	cmp	r2, #100	; 0x64
    3cce:	d01d      	beq.n	3d0c <_printf_i+0x78>
    3cd0:	2a69      	cmp	r2, #105	; 0x69
    3cd2:	d01b      	beq.n	3d0c <_printf_i+0x78>
    3cd4:	e0bc      	b.n	3e50 <_printf_i+0x1bc>
    3cd6:	2a73      	cmp	r2, #115	; 0x73
    3cd8:	d100      	bne.n	3cdc <_printf_i+0x48>
    3cda:	e0aa      	b.n	3e32 <_printf_i+0x19e>
    3cdc:	d809      	bhi.n	3cf2 <_printf_i+0x5e>
    3cde:	2a6f      	cmp	r2, #111	; 0x6f
    3ce0:	d029      	beq.n	3d36 <_printf_i+0xa2>
    3ce2:	2a70      	cmp	r2, #112	; 0x70
    3ce4:	d000      	beq.n	3ce8 <_printf_i+0x54>
    3ce6:	e0b3      	b.n	3e50 <_printf_i+0x1bc>
    3ce8:	2220      	movs	r2, #32
    3cea:	6809      	ldr	r1, [r1, #0]
    3cec:	430a      	orrs	r2, r1
    3cee:	6022      	str	r2, [r4, #0]
    3cf0:	e037      	b.n	3d62 <_printf_i+0xce>
    3cf2:	2a75      	cmp	r2, #117	; 0x75
    3cf4:	d01f      	beq.n	3d36 <_printf_i+0xa2>
    3cf6:	2a78      	cmp	r2, #120	; 0x78
    3cf8:	d033      	beq.n	3d62 <_printf_i+0xce>
    3cfa:	e0a9      	b.n	3e50 <_printf_i+0x1bc>
    3cfc:	000e      	movs	r6, r1
    3cfe:	681a      	ldr	r2, [r3, #0]
    3d00:	3642      	adds	r6, #66	; 0x42
    3d02:	1d11      	adds	r1, r2, #4
    3d04:	6019      	str	r1, [r3, #0]
    3d06:	6813      	ldr	r3, [r2, #0]
    3d08:	7033      	strb	r3, [r6, #0]
    3d0a:	e0a4      	b.n	3e56 <_printf_i+0x1c2>
    3d0c:	6821      	ldr	r1, [r4, #0]
    3d0e:	681a      	ldr	r2, [r3, #0]
    3d10:	0608      	lsls	r0, r1, #24
    3d12:	d406      	bmi.n	3d22 <_printf_i+0x8e>
    3d14:	0649      	lsls	r1, r1, #25
    3d16:	d504      	bpl.n	3d22 <_printf_i+0x8e>
    3d18:	1d11      	adds	r1, r2, #4
    3d1a:	6019      	str	r1, [r3, #0]
    3d1c:	2300      	movs	r3, #0
    3d1e:	5ed5      	ldrsh	r5, [r2, r3]
    3d20:	e002      	b.n	3d28 <_printf_i+0x94>
    3d22:	1d11      	adds	r1, r2, #4
    3d24:	6019      	str	r1, [r3, #0]
    3d26:	6815      	ldr	r5, [r2, #0]
    3d28:	2d00      	cmp	r5, #0
    3d2a:	da3b      	bge.n	3da4 <_printf_i+0x110>
    3d2c:	232d      	movs	r3, #45	; 0x2d
    3d2e:	9a04      	ldr	r2, [sp, #16]
    3d30:	426d      	negs	r5, r5
    3d32:	7013      	strb	r3, [r2, #0]
    3d34:	e036      	b.n	3da4 <_printf_i+0x110>
    3d36:	6821      	ldr	r1, [r4, #0]
    3d38:	681a      	ldr	r2, [r3, #0]
    3d3a:	0608      	lsls	r0, r1, #24
    3d3c:	d406      	bmi.n	3d4c <_printf_i+0xb8>
    3d3e:	0649      	lsls	r1, r1, #25
    3d40:	d504      	bpl.n	3d4c <_printf_i+0xb8>
    3d42:	6815      	ldr	r5, [r2, #0]
    3d44:	1d11      	adds	r1, r2, #4
    3d46:	6019      	str	r1, [r3, #0]
    3d48:	b2ad      	uxth	r5, r5
    3d4a:	e002      	b.n	3d52 <_printf_i+0xbe>
    3d4c:	1d11      	adds	r1, r2, #4
    3d4e:	6019      	str	r1, [r3, #0]
    3d50:	6815      	ldr	r5, [r2, #0]
    3d52:	4b5f      	ldr	r3, [pc, #380]	; (3ed0 <_printf_i+0x23c>)
    3d54:	7e22      	ldrb	r2, [r4, #24]
    3d56:	9303      	str	r3, [sp, #12]
    3d58:	2708      	movs	r7, #8
    3d5a:	2a6f      	cmp	r2, #111	; 0x6f
    3d5c:	d01d      	beq.n	3d9a <_printf_i+0x106>
    3d5e:	270a      	movs	r7, #10
    3d60:	e01b      	b.n	3d9a <_printf_i+0x106>
    3d62:	0022      	movs	r2, r4
    3d64:	2178      	movs	r1, #120	; 0x78
    3d66:	3245      	adds	r2, #69	; 0x45
    3d68:	7011      	strb	r1, [r2, #0]
    3d6a:	4a5a      	ldr	r2, [pc, #360]	; (3ed4 <_printf_i+0x240>)
    3d6c:	6819      	ldr	r1, [r3, #0]
    3d6e:	9203      	str	r2, [sp, #12]
    3d70:	1d08      	adds	r0, r1, #4
    3d72:	6822      	ldr	r2, [r4, #0]
    3d74:	6018      	str	r0, [r3, #0]
    3d76:	680d      	ldr	r5, [r1, #0]
    3d78:	0610      	lsls	r0, r2, #24
    3d7a:	d402      	bmi.n	3d82 <_printf_i+0xee>
    3d7c:	0650      	lsls	r0, r2, #25
    3d7e:	d500      	bpl.n	3d82 <_printf_i+0xee>
    3d80:	b2ad      	uxth	r5, r5
    3d82:	07d3      	lsls	r3, r2, #31
    3d84:	d502      	bpl.n	3d8c <_printf_i+0xf8>
    3d86:	2320      	movs	r3, #32
    3d88:	431a      	orrs	r2, r3
    3d8a:	6022      	str	r2, [r4, #0]
    3d8c:	2710      	movs	r7, #16
    3d8e:	2d00      	cmp	r5, #0
    3d90:	d103      	bne.n	3d9a <_printf_i+0x106>
    3d92:	2320      	movs	r3, #32
    3d94:	6822      	ldr	r2, [r4, #0]
    3d96:	439a      	bics	r2, r3
    3d98:	6022      	str	r2, [r4, #0]
    3d9a:	0023      	movs	r3, r4
    3d9c:	2200      	movs	r2, #0
    3d9e:	3343      	adds	r3, #67	; 0x43
    3da0:	701a      	strb	r2, [r3, #0]
    3da2:	e002      	b.n	3daa <_printf_i+0x116>
    3da4:	270a      	movs	r7, #10
    3da6:	4b4a      	ldr	r3, [pc, #296]	; (3ed0 <_printf_i+0x23c>)
    3da8:	9303      	str	r3, [sp, #12]
    3daa:	6863      	ldr	r3, [r4, #4]
    3dac:	60a3      	str	r3, [r4, #8]
    3dae:	2b00      	cmp	r3, #0
    3db0:	db09      	blt.n	3dc6 <_printf_i+0x132>
    3db2:	2204      	movs	r2, #4
    3db4:	6821      	ldr	r1, [r4, #0]
    3db6:	4391      	bics	r1, r2
    3db8:	6021      	str	r1, [r4, #0]
    3dba:	2d00      	cmp	r5, #0
    3dbc:	d105      	bne.n	3dca <_printf_i+0x136>
    3dbe:	9e04      	ldr	r6, [sp, #16]
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	d011      	beq.n	3de8 <_printf_i+0x154>
    3dc4:	e07b      	b.n	3ebe <_printf_i+0x22a>
    3dc6:	2d00      	cmp	r5, #0
    3dc8:	d079      	beq.n	3ebe <_printf_i+0x22a>
    3dca:	9e04      	ldr	r6, [sp, #16]
    3dcc:	0028      	movs	r0, r5
    3dce:	0039      	movs	r1, r7
    3dd0:	f7ff f8a4 	bl	2f1c <__aeabi_uidivmod>
    3dd4:	9b03      	ldr	r3, [sp, #12]
    3dd6:	3e01      	subs	r6, #1
    3dd8:	5c5b      	ldrb	r3, [r3, r1]
    3dda:	0028      	movs	r0, r5
    3ddc:	7033      	strb	r3, [r6, #0]
    3dde:	0039      	movs	r1, r7
    3de0:	f7ff f816 	bl	2e10 <__aeabi_uidiv>
    3de4:	1e05      	subs	r5, r0, #0
    3de6:	d1f1      	bne.n	3dcc <_printf_i+0x138>
    3de8:	2f08      	cmp	r7, #8
    3dea:	d109      	bne.n	3e00 <_printf_i+0x16c>
    3dec:	6823      	ldr	r3, [r4, #0]
    3dee:	07db      	lsls	r3, r3, #31
    3df0:	d506      	bpl.n	3e00 <_printf_i+0x16c>
    3df2:	6863      	ldr	r3, [r4, #4]
    3df4:	6922      	ldr	r2, [r4, #16]
    3df6:	4293      	cmp	r3, r2
    3df8:	dc02      	bgt.n	3e00 <_printf_i+0x16c>
    3dfa:	2330      	movs	r3, #48	; 0x30
    3dfc:	3e01      	subs	r6, #1
    3dfe:	7033      	strb	r3, [r6, #0]
    3e00:	9b04      	ldr	r3, [sp, #16]
    3e02:	1b9b      	subs	r3, r3, r6
    3e04:	6123      	str	r3, [r4, #16]
    3e06:	e02b      	b.n	3e60 <_printf_i+0x1cc>
    3e08:	6809      	ldr	r1, [r1, #0]
    3e0a:	681a      	ldr	r2, [r3, #0]
    3e0c:	0608      	lsls	r0, r1, #24
    3e0e:	d407      	bmi.n	3e20 <_printf_i+0x18c>
    3e10:	0649      	lsls	r1, r1, #25
    3e12:	d505      	bpl.n	3e20 <_printf_i+0x18c>
    3e14:	1d11      	adds	r1, r2, #4
    3e16:	6019      	str	r1, [r3, #0]
    3e18:	6813      	ldr	r3, [r2, #0]
    3e1a:	8aa2      	ldrh	r2, [r4, #20]
    3e1c:	801a      	strh	r2, [r3, #0]
    3e1e:	e004      	b.n	3e2a <_printf_i+0x196>
    3e20:	1d11      	adds	r1, r2, #4
    3e22:	6019      	str	r1, [r3, #0]
    3e24:	6813      	ldr	r3, [r2, #0]
    3e26:	6962      	ldr	r2, [r4, #20]
    3e28:	601a      	str	r2, [r3, #0]
    3e2a:	2300      	movs	r3, #0
    3e2c:	9e04      	ldr	r6, [sp, #16]
    3e2e:	6123      	str	r3, [r4, #16]
    3e30:	e016      	b.n	3e60 <_printf_i+0x1cc>
    3e32:	681a      	ldr	r2, [r3, #0]
    3e34:	1d11      	adds	r1, r2, #4
    3e36:	6019      	str	r1, [r3, #0]
    3e38:	6816      	ldr	r6, [r2, #0]
    3e3a:	2100      	movs	r1, #0
    3e3c:	6862      	ldr	r2, [r4, #4]
    3e3e:	0030      	movs	r0, r6
    3e40:	f000 f906 	bl	4050 <memchr>
    3e44:	2800      	cmp	r0, #0
    3e46:	d001      	beq.n	3e4c <_printf_i+0x1b8>
    3e48:	1b80      	subs	r0, r0, r6
    3e4a:	6060      	str	r0, [r4, #4]
    3e4c:	6863      	ldr	r3, [r4, #4]
    3e4e:	e003      	b.n	3e58 <_printf_i+0x1c4>
    3e50:	0026      	movs	r6, r4
    3e52:	3642      	adds	r6, #66	; 0x42
    3e54:	7032      	strb	r2, [r6, #0]
    3e56:	2301      	movs	r3, #1
    3e58:	6123      	str	r3, [r4, #16]
    3e5a:	2300      	movs	r3, #0
    3e5c:	9a04      	ldr	r2, [sp, #16]
    3e5e:	7013      	strb	r3, [r2, #0]
    3e60:	9b07      	ldr	r3, [sp, #28]
    3e62:	aa09      	add	r2, sp, #36	; 0x24
    3e64:	9300      	str	r3, [sp, #0]
    3e66:	0021      	movs	r1, r4
    3e68:	9b06      	ldr	r3, [sp, #24]
    3e6a:	9805      	ldr	r0, [sp, #20]
    3e6c:	f7ff fea4 	bl	3bb8 <_printf_common>
    3e70:	1c43      	adds	r3, r0, #1
    3e72:	d102      	bne.n	3e7a <_printf_i+0x1e6>
    3e74:	2001      	movs	r0, #1
    3e76:	4240      	negs	r0, r0
    3e78:	e027      	b.n	3eca <_printf_i+0x236>
    3e7a:	6923      	ldr	r3, [r4, #16]
    3e7c:	0032      	movs	r2, r6
    3e7e:	9906      	ldr	r1, [sp, #24]
    3e80:	9805      	ldr	r0, [sp, #20]
    3e82:	9d07      	ldr	r5, [sp, #28]
    3e84:	47a8      	blx	r5
    3e86:	1c43      	adds	r3, r0, #1
    3e88:	d0f4      	beq.n	3e74 <_printf_i+0x1e0>
    3e8a:	6823      	ldr	r3, [r4, #0]
    3e8c:	2500      	movs	r5, #0
    3e8e:	079b      	lsls	r3, r3, #30
    3e90:	d40f      	bmi.n	3eb2 <_printf_i+0x21e>
    3e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3e94:	68e0      	ldr	r0, [r4, #12]
    3e96:	4298      	cmp	r0, r3
    3e98:	da17      	bge.n	3eca <_printf_i+0x236>
    3e9a:	0018      	movs	r0, r3
    3e9c:	e015      	b.n	3eca <_printf_i+0x236>
    3e9e:	0022      	movs	r2, r4
    3ea0:	2301      	movs	r3, #1
    3ea2:	3219      	adds	r2, #25
    3ea4:	9906      	ldr	r1, [sp, #24]
    3ea6:	9805      	ldr	r0, [sp, #20]
    3ea8:	9e07      	ldr	r6, [sp, #28]
    3eaa:	47b0      	blx	r6
    3eac:	1c43      	adds	r3, r0, #1
    3eae:	d0e1      	beq.n	3e74 <_printf_i+0x1e0>
    3eb0:	3501      	adds	r5, #1
    3eb2:	68e3      	ldr	r3, [r4, #12]
    3eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3eb6:	1a9b      	subs	r3, r3, r2
    3eb8:	429d      	cmp	r5, r3
    3eba:	dbf0      	blt.n	3e9e <_printf_i+0x20a>
    3ebc:	e7e9      	b.n	3e92 <_printf_i+0x1fe>
    3ebe:	0026      	movs	r6, r4
    3ec0:	9b03      	ldr	r3, [sp, #12]
    3ec2:	3642      	adds	r6, #66	; 0x42
    3ec4:	781b      	ldrb	r3, [r3, #0]
    3ec6:	7033      	strb	r3, [r6, #0]
    3ec8:	e78e      	b.n	3de8 <_printf_i+0x154>
    3eca:	b00b      	add	sp, #44	; 0x2c
    3ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ece:	46c0      	nop			; (mov r8, r8)
    3ed0:	0000430d 	.word	0x0000430d
    3ed4:	0000431e 	.word	0x0000431e

00003ed8 <_sbrk_r>:
    3ed8:	2300      	movs	r3, #0
    3eda:	b570      	push	{r4, r5, r6, lr}
    3edc:	4c06      	ldr	r4, [pc, #24]	; (3ef8 <_sbrk_r+0x20>)
    3ede:	0005      	movs	r5, r0
    3ee0:	0008      	movs	r0, r1
    3ee2:	6023      	str	r3, [r4, #0]
    3ee4:	f7fe fbb6 	bl	2654 <_sbrk>
    3ee8:	1c43      	adds	r3, r0, #1
    3eea:	d103      	bne.n	3ef4 <_sbrk_r+0x1c>
    3eec:	6823      	ldr	r3, [r4, #0]
    3eee:	2b00      	cmp	r3, #0
    3ef0:	d000      	beq.n	3ef4 <_sbrk_r+0x1c>
    3ef2:	602b      	str	r3, [r5, #0]
    3ef4:	bd70      	pop	{r4, r5, r6, pc}
    3ef6:	46c0      	nop			; (mov r8, r8)
    3ef8:	20000134 	.word	0x20000134

00003efc <__sread>:
    3efc:	b570      	push	{r4, r5, r6, lr}
    3efe:	000c      	movs	r4, r1
    3f00:	250e      	movs	r5, #14
    3f02:	5f49      	ldrsh	r1, [r1, r5]
    3f04:	f000 f8b0 	bl	4068 <_read_r>
    3f08:	2800      	cmp	r0, #0
    3f0a:	db03      	blt.n	3f14 <__sread+0x18>
    3f0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3f0e:	181b      	adds	r3, r3, r0
    3f10:	6563      	str	r3, [r4, #84]	; 0x54
    3f12:	e003      	b.n	3f1c <__sread+0x20>
    3f14:	89a2      	ldrh	r2, [r4, #12]
    3f16:	4b02      	ldr	r3, [pc, #8]	; (3f20 <__sread+0x24>)
    3f18:	4013      	ands	r3, r2
    3f1a:	81a3      	strh	r3, [r4, #12]
    3f1c:	bd70      	pop	{r4, r5, r6, pc}
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	ffffefff 	.word	0xffffefff

00003f24 <__swrite>:
    3f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f26:	001f      	movs	r7, r3
    3f28:	898b      	ldrh	r3, [r1, #12]
    3f2a:	0005      	movs	r5, r0
    3f2c:	000c      	movs	r4, r1
    3f2e:	0016      	movs	r6, r2
    3f30:	05db      	lsls	r3, r3, #23
    3f32:	d505      	bpl.n	3f40 <__swrite+0x1c>
    3f34:	230e      	movs	r3, #14
    3f36:	5ec9      	ldrsh	r1, [r1, r3]
    3f38:	2200      	movs	r2, #0
    3f3a:	2302      	movs	r3, #2
    3f3c:	f000 f874 	bl	4028 <_lseek_r>
    3f40:	89a2      	ldrh	r2, [r4, #12]
    3f42:	4b05      	ldr	r3, [pc, #20]	; (3f58 <__swrite+0x34>)
    3f44:	0028      	movs	r0, r5
    3f46:	4013      	ands	r3, r2
    3f48:	81a3      	strh	r3, [r4, #12]
    3f4a:	0032      	movs	r2, r6
    3f4c:	230e      	movs	r3, #14
    3f4e:	5ee1      	ldrsh	r1, [r4, r3]
    3f50:	003b      	movs	r3, r7
    3f52:	f000 f81f 	bl	3f94 <_write_r>
    3f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f58:	ffffefff 	.word	0xffffefff

00003f5c <__sseek>:
    3f5c:	b570      	push	{r4, r5, r6, lr}
    3f5e:	000c      	movs	r4, r1
    3f60:	250e      	movs	r5, #14
    3f62:	5f49      	ldrsh	r1, [r1, r5]
    3f64:	f000 f860 	bl	4028 <_lseek_r>
    3f68:	89a3      	ldrh	r3, [r4, #12]
    3f6a:	1c42      	adds	r2, r0, #1
    3f6c:	d103      	bne.n	3f76 <__sseek+0x1a>
    3f6e:	4a05      	ldr	r2, [pc, #20]	; (3f84 <__sseek+0x28>)
    3f70:	4013      	ands	r3, r2
    3f72:	81a3      	strh	r3, [r4, #12]
    3f74:	e004      	b.n	3f80 <__sseek+0x24>
    3f76:	2280      	movs	r2, #128	; 0x80
    3f78:	0152      	lsls	r2, r2, #5
    3f7a:	4313      	orrs	r3, r2
    3f7c:	81a3      	strh	r3, [r4, #12]
    3f7e:	6560      	str	r0, [r4, #84]	; 0x54
    3f80:	bd70      	pop	{r4, r5, r6, pc}
    3f82:	46c0      	nop			; (mov r8, r8)
    3f84:	ffffefff 	.word	0xffffefff

00003f88 <__sclose>:
    3f88:	b510      	push	{r4, lr}
    3f8a:	230e      	movs	r3, #14
    3f8c:	5ec9      	ldrsh	r1, [r1, r3]
    3f8e:	f000 f815 	bl	3fbc <_close_r>
    3f92:	bd10      	pop	{r4, pc}

00003f94 <_write_r>:
    3f94:	b570      	push	{r4, r5, r6, lr}
    3f96:	0005      	movs	r5, r0
    3f98:	0008      	movs	r0, r1
    3f9a:	0011      	movs	r1, r2
    3f9c:	2200      	movs	r2, #0
    3f9e:	4c06      	ldr	r4, [pc, #24]	; (3fb8 <_write_r+0x24>)
    3fa0:	6022      	str	r2, [r4, #0]
    3fa2:	001a      	movs	r2, r3
    3fa4:	f7fc f8e0 	bl	168 <_write>
    3fa8:	1c43      	adds	r3, r0, #1
    3faa:	d103      	bne.n	3fb4 <_write_r+0x20>
    3fac:	6823      	ldr	r3, [r4, #0]
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d000      	beq.n	3fb4 <_write_r+0x20>
    3fb2:	602b      	str	r3, [r5, #0]
    3fb4:	bd70      	pop	{r4, r5, r6, pc}
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	20000134 	.word	0x20000134

00003fbc <_close_r>:
    3fbc:	2300      	movs	r3, #0
    3fbe:	b570      	push	{r4, r5, r6, lr}
    3fc0:	4c06      	ldr	r4, [pc, #24]	; (3fdc <_close_r+0x20>)
    3fc2:	0005      	movs	r5, r0
    3fc4:	0008      	movs	r0, r1
    3fc6:	6023      	str	r3, [r4, #0]
    3fc8:	f7fe fb62 	bl	2690 <_close>
    3fcc:	1c43      	adds	r3, r0, #1
    3fce:	d103      	bne.n	3fd8 <_close_r+0x1c>
    3fd0:	6823      	ldr	r3, [r4, #0]
    3fd2:	2b00      	cmp	r3, #0
    3fd4:	d000      	beq.n	3fd8 <_close_r+0x1c>
    3fd6:	602b      	str	r3, [r5, #0]
    3fd8:	bd70      	pop	{r4, r5, r6, pc}
    3fda:	46c0      	nop			; (mov r8, r8)
    3fdc:	20000134 	.word	0x20000134

00003fe0 <_fstat_r>:
    3fe0:	2300      	movs	r3, #0
    3fe2:	b570      	push	{r4, r5, r6, lr}
    3fe4:	4c06      	ldr	r4, [pc, #24]	; (4000 <_fstat_r+0x20>)
    3fe6:	0005      	movs	r5, r0
    3fe8:	0008      	movs	r0, r1
    3fea:	0011      	movs	r1, r2
    3fec:	6023      	str	r3, [r4, #0]
    3fee:	f7fe fb59 	bl	26a4 <_fstat>
    3ff2:	1c43      	adds	r3, r0, #1
    3ff4:	d103      	bne.n	3ffe <_fstat_r+0x1e>
    3ff6:	6823      	ldr	r3, [r4, #0]
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	d000      	beq.n	3ffe <_fstat_r+0x1e>
    3ffc:	602b      	str	r3, [r5, #0]
    3ffe:	bd70      	pop	{r4, r5, r6, pc}
    4000:	20000134 	.word	0x20000134

00004004 <_isatty_r>:
    4004:	2300      	movs	r3, #0
    4006:	b570      	push	{r4, r5, r6, lr}
    4008:	4c06      	ldr	r4, [pc, #24]	; (4024 <_isatty_r+0x20>)
    400a:	0005      	movs	r5, r0
    400c:	0008      	movs	r0, r1
    400e:	6023      	str	r3, [r4, #0]
    4010:	f7fe fb56 	bl	26c0 <_isatty>
    4014:	1c43      	adds	r3, r0, #1
    4016:	d103      	bne.n	4020 <_isatty_r+0x1c>
    4018:	6823      	ldr	r3, [r4, #0]
    401a:	2b00      	cmp	r3, #0
    401c:	d000      	beq.n	4020 <_isatty_r+0x1c>
    401e:	602b      	str	r3, [r5, #0]
    4020:	bd70      	pop	{r4, r5, r6, pc}
    4022:	46c0      	nop			; (mov r8, r8)
    4024:	20000134 	.word	0x20000134

00004028 <_lseek_r>:
    4028:	b570      	push	{r4, r5, r6, lr}
    402a:	0005      	movs	r5, r0
    402c:	0008      	movs	r0, r1
    402e:	0011      	movs	r1, r2
    4030:	2200      	movs	r2, #0
    4032:	4c06      	ldr	r4, [pc, #24]	; (404c <_lseek_r+0x24>)
    4034:	6022      	str	r2, [r4, #0]
    4036:	001a      	movs	r2, r3
    4038:	f7fe fb4c 	bl	26d4 <_lseek>
    403c:	1c43      	adds	r3, r0, #1
    403e:	d103      	bne.n	4048 <_lseek_r+0x20>
    4040:	6823      	ldr	r3, [r4, #0]
    4042:	2b00      	cmp	r3, #0
    4044:	d000      	beq.n	4048 <_lseek_r+0x20>
    4046:	602b      	str	r3, [r5, #0]
    4048:	bd70      	pop	{r4, r5, r6, pc}
    404a:	46c0      	nop			; (mov r8, r8)
    404c:	20000134 	.word	0x20000134

00004050 <memchr>:
    4050:	b2c9      	uxtb	r1, r1
    4052:	1882      	adds	r2, r0, r2
    4054:	4290      	cmp	r0, r2
    4056:	d004      	beq.n	4062 <memchr+0x12>
    4058:	7803      	ldrb	r3, [r0, #0]
    405a:	428b      	cmp	r3, r1
    405c:	d002      	beq.n	4064 <memchr+0x14>
    405e:	3001      	adds	r0, #1
    4060:	e7f8      	b.n	4054 <memchr+0x4>
    4062:	2000      	movs	r0, #0
    4064:	4770      	bx	lr
	...

00004068 <_read_r>:
    4068:	b570      	push	{r4, r5, r6, lr}
    406a:	0005      	movs	r5, r0
    406c:	0008      	movs	r0, r1
    406e:	0011      	movs	r1, r2
    4070:	2200      	movs	r2, #0
    4072:	4c06      	ldr	r4, [pc, #24]	; (408c <_read_r+0x24>)
    4074:	6022      	str	r2, [r4, #0]
    4076:	001a      	movs	r2, r3
    4078:	f7fc f84c 	bl	114 <_read>
    407c:	1c43      	adds	r3, r0, #1
    407e:	d103      	bne.n	4088 <_read_r+0x20>
    4080:	6823      	ldr	r3, [r4, #0]
    4082:	2b00      	cmp	r3, #0
    4084:	d000      	beq.n	4088 <_read_r+0x20>
    4086:	602b      	str	r3, [r5, #0]
    4088:	bd70      	pop	{r4, r5, r6, pc}
    408a:	46c0      	nop			; (mov r8, r8)
    408c:	20000134 	.word	0x20000134
    4090:	42000800 	.word	0x42000800
    4094:	42000c00 	.word	0x42000c00
    4098:	42001000 	.word	0x42001000
    409c:	42001400 	.word	0x42001400
    40a0:	42001800 	.word	0x42001800
    40a4:	42001c00 	.word	0x42001c00
    40a8:	0c0b0a09 	.word	0x0c0b0a09
    40ac:	00000e0d 	.word	0x00000e0d
    40b0:	000016f0 	.word	0x000016f0
    40b4:	000016f0 	.word	0x000016f0
    40b8:	000016e4 	.word	0x000016e4
    40bc:	000016f0 	.word	0x000016f0
    40c0:	000016e4 	.word	0x000016e4
    40c4:	000016be 	.word	0x000016be
    40c8:	000016be 	.word	0x000016be
    40cc:	000016f0 	.word	0x000016f0
    40d0:	000016f0 	.word	0x000016f0
    40d4:	000016f0 	.word	0x000016f0
    40d8:	000016f0 	.word	0x000016f0
    40dc:	000016f0 	.word	0x000016f0
    40e0:	000016f0 	.word	0x000016f0
    40e4:	000016f0 	.word	0x000016f0
    40e8:	000016f0 	.word	0x000016f0
    40ec:	000016f0 	.word	0x000016f0
    40f0:	000016f0 	.word	0x000016f0
    40f4:	000016f0 	.word	0x000016f0
    40f8:	000016f0 	.word	0x000016f0
    40fc:	000016f0 	.word	0x000016f0
    4100:	000016f0 	.word	0x000016f0
    4104:	000016f0 	.word	0x000016f0
    4108:	000016f0 	.word	0x000016f0
    410c:	000016f0 	.word	0x000016f0
    4110:	000016f0 	.word	0x000016f0
    4114:	000016f0 	.word	0x000016f0
    4118:	000016f0 	.word	0x000016f0
    411c:	000016f0 	.word	0x000016f0
    4120:	000016f0 	.word	0x000016f0
    4124:	000016f0 	.word	0x000016f0
    4128:	000016f0 	.word	0x000016f0
    412c:	000016f0 	.word	0x000016f0
    4130:	000016f0 	.word	0x000016f0
    4134:	000016f0 	.word	0x000016f0
    4138:	000016f0 	.word	0x000016f0
    413c:	000016f0 	.word	0x000016f0
    4140:	000016f0 	.word	0x000016f0
    4144:	000016f0 	.word	0x000016f0
    4148:	000016f0 	.word	0x000016f0
    414c:	000016f0 	.word	0x000016f0
    4150:	000016f0 	.word	0x000016f0
    4154:	000016f0 	.word	0x000016f0
    4158:	000016f0 	.word	0x000016f0
    415c:	000016f0 	.word	0x000016f0
    4160:	000016f0 	.word	0x000016f0
    4164:	000016f0 	.word	0x000016f0
    4168:	000016f0 	.word	0x000016f0
    416c:	000016f0 	.word	0x000016f0
    4170:	000016f0 	.word	0x000016f0
    4174:	000016f0 	.word	0x000016f0
    4178:	000016f0 	.word	0x000016f0
    417c:	000016f0 	.word	0x000016f0
    4180:	000016f0 	.word	0x000016f0
    4184:	000016f0 	.word	0x000016f0
    4188:	000016f0 	.word	0x000016f0
    418c:	000016f0 	.word	0x000016f0
    4190:	000016f0 	.word	0x000016f0
    4194:	000016f0 	.word	0x000016f0
    4198:	000016f0 	.word	0x000016f0
    419c:	000016f0 	.word	0x000016f0
    41a0:	000016f0 	.word	0x000016f0
    41a4:	000016f0 	.word	0x000016f0
    41a8:	000016f0 	.word	0x000016f0
    41ac:	000016f0 	.word	0x000016f0
    41b0:	000016e4 	.word	0x000016e4
    41b4:	000016e4 	.word	0x000016e4
    41b8:	000016fa 	.word	0x000016fa
    41bc:	000016fa 	.word	0x000016fa
    41c0:	000016fa 	.word	0x000016fa
    41c4:	000016fa 	.word	0x000016fa
    41c8:	00001be6 	.word	0x00001be6
    41cc:	00001c5e 	.word	0x00001c5e
    41d0:	00001c5e 	.word	0x00001c5e
    41d4:	00001c04 	.word	0x00001c04
    41d8:	00001bfe 	.word	0x00001bfe
    41dc:	00001c0a 	.word	0x00001c0a
    41e0:	00001bec 	.word	0x00001bec
    41e4:	00001c10 	.word	0x00001c10
    41e8:	00001c44 	.word	0x00001c44
    41ec:	00001d38 	.word	0x00001d38
    41f0:	00001d88 	.word	0x00001d88
    41f4:	00001d88 	.word	0x00001d88
    41f8:	00001d84 	.word	0x00001d84
    41fc:	00001d2a 	.word	0x00001d2a
    4200:	00001d4a 	.word	0x00001d4a
    4204:	00001d1a 	.word	0x00001d1a
    4208:	00001d5c 	.word	0x00001d5c
    420c:	00001d6e 	.word	0x00001d6e
    4210:	72677055 	.word	0x72677055
    4214:	6e696461 	.word	0x6e696461
    4218:	69662067 	.word	0x69662067
    421c:	61776d72 	.word	0x61776d72
    4220:	66206572 	.word	0x66206572
    4224:	206d6f72 	.word	0x206d6f72
    4228:	61636f6c 	.word	0x61636f6c
    422c:	6e6f6974 	.word	0x6e6f6974
    4230:	2e642520 	.word	0x2e642520
    4234:	0000000a 	.word	0x0000000a
    4238:	72677055 	.word	0x72677055
    423c:	20656461 	.word	0x20656461
    4240:	706d6f63 	.word	0x706d6f63
    4244:	6574656c 	.word	0x6574656c
    4248:	00000000 	.word	0x00000000
    424c:	74696e49 	.word	0x74696e49
    4250:	6e6f6420 	.word	0x6e6f6420
    4254:	00002e65 	.word	0x00002e65
    4258:	61766e49 	.word	0x61766e49
    425c:	2064696c 	.word	0x2064696c
    4260:	73205746 	.word	0x73205746
    4264:	2c746174 	.word	0x2c746174
    4268:	69727720 	.word	0x69727720
    426c:	676e6974 	.word	0x676e6974
    4270:	66656420 	.word	0x66656420
    4274:	746c7561 	.word	0x746c7561
    4278:	00000000 	.word	0x00000000
    427c:	72617453 	.word	0x72617453
    4280:	676e6974 	.word	0x676e6974
    4284:	70706120 	.word	0x70706120
    4288:	00000000 	.word	0x00000000
    428c:	62206e69 	.word	0x62206e69
    4290:	00746f6f 	.word	0x00746f6f
    4294:	00000043 	.word	0x00000043

00004298 <_global_impure_ptr>:
    4298:	2000000c                                ... 

0000429c <__sf_fake_stdin>:
	...

000042bc <__sf_fake_stdout>:
	...

000042dc <__sf_fake_stderr>:
	...
    42fc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    430c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    431c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    432c:	00006665                                ef..

00004330 <_init>:
    4330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4332:	46c0      	nop			; (mov r8, r8)
    4334:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4336:	bc08      	pop	{r3}
    4338:	469e      	mov	lr, r3
    433a:	4770      	bx	lr

0000433c <__init_array_start>:
    433c:	000000dd 	.word	0x000000dd

00004340 <_fini>:
    4340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4342:	46c0      	nop			; (mov r8, r8)
    4344:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4346:	bc08      	pop	{r3}
    4348:	469e      	mov	lr, r3
    434a:	4770      	bx	lr

0000434c <__fini_array_start>:
    434c:	000000b5 	.word	0x000000b5
