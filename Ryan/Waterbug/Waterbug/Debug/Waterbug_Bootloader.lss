
Waterbug_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000063a0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000007c  20000000  000063a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011c  2000007c  0000641c  0002007c  2**2
                  ALLOC
  3 .stack        00002000  20000198  00006538  0002007c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00025ba0  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d22  00000000  00000000  00045c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000300e  00000000  00000000  000489bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000900  00000000  00000000  0004b9cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007b0  00000000  00000000  0004c2cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a9f1  00000000  00000000  0004ca7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ea76  00000000  00000000  0006746e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000883df  00000000  00000000  00075ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002540  00000000  00000000  000fe2c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002198 	.word	0x20002198
       4:	0000425d 	.word	0x0000425d
       8:	00004355 	.word	0x00004355
       c:	00004355 	.word	0x00004355
	...
      2c:	00004355 	.word	0x00004355
	...
      38:	00004355 	.word	0x00004355
      3c:	00004355 	.word	0x00004355
      40:	00004355 	.word	0x00004355
      44:	00004355 	.word	0x00004355
      48:	00004355 	.word	0x00004355
      4c:	00004355 	.word	0x00004355
      50:	00004355 	.word	0x00004355
      54:	00004355 	.word	0x00004355
      58:	00004355 	.word	0x00004355
      5c:	00004355 	.word	0x00004355
      60:	00004355 	.word	0x00004355
      64:	00003155 	.word	0x00003155
      68:	0000316d 	.word	0x0000316d
      6c:	00003185 	.word	0x00003185
      70:	0000319d 	.word	0x0000319d
      74:	000031b5 	.word	0x000031b5
      78:	000031cd 	.word	0x000031cd
      7c:	00004355 	.word	0x00004355
      80:	00004355 	.word	0x00004355
      84:	00004355 	.word	0x00004355
      88:	00004355 	.word	0x00004355
      8c:	00004355 	.word	0x00004355
      90:	00004355 	.word	0x00004355
	...
      9c:	00004355 	.word	0x00004355
      a0:	00004355 	.word	0x00004355
      a4:	00004355 	.word	0x00004355
      a8:	00004355 	.word	0x00004355
      ac:	00004355 	.word	0x00004355
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000007c 	.word	0x2000007c
      d4:	00000000 	.word	0x00000000
      d8:	000063a0 	.word	0x000063a0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000080 	.word	0x20000080
     108:	000063a0 	.word	0x000063a0
     10c:	000063a0 	.word	0x000063a0
     110:	00000000 	.word	0x00000000

00000114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	09d2      	lsrs	r2, r2, #7
     12a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     12c:	230e      	movs	r3, #14
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	0952      	lsrs	r2, r2, #5
     136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     138:	4b0d      	ldr	r3, [pc, #52]	; (170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     13a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     13c:	230f      	movs	r3, #15
     13e:	18fb      	adds	r3, r7, r3
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0
     144:	d10f      	bne.n	166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	009b      	lsls	r3, r3, #2
     14e:	2210      	movs	r2, #16
     150:	4694      	mov	ip, r2
     152:	44bc      	add	ip, r7
     154:	4463      	add	r3, ip
     156:	3b08      	subs	r3, #8
     158:	681a      	ldr	r2, [r3, #0]
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	781b      	ldrb	r3, [r3, #0]
     160:	01db      	lsls	r3, r3, #7
     162:	18d3      	adds	r3, r2, r3
     164:	e000      	b.n	168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     166:	2300      	movs	r3, #0
	}
}
     168:	0018      	movs	r0, r3
     16a:	46bd      	mov	sp, r7
     16c:	b004      	add	sp, #16
     16e:	bd80      	pop	{r7, pc}
     170:	41004400 	.word	0x41004400

00000174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     174:	b580      	push	{r7, lr}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
     17a:	0002      	movs	r2, r0
     17c:	1dfb      	adds	r3, r7, #7
     17e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     180:	1dfb      	adds	r3, r7, #7
     182:	781b      	ldrb	r3, [r3, #0]
     184:	0018      	movs	r0, r3
     186:	4b03      	ldr	r3, [pc, #12]	; (194 <port_get_group_from_gpio_pin+0x20>)
     188:	4798      	blx	r3
     18a:	0003      	movs	r3, r0
}
     18c:	0018      	movs	r0, r3
     18e:	46bd      	mov	sp, r7
     190:	b002      	add	sp, #8
     192:	bd80      	pop	{r7, pc}
     194:	00000115 	.word	0x00000115

00000198 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     198:	b580      	push	{r7, lr}
     19a:	b084      	sub	sp, #16
     19c:	af00      	add	r7, sp, #0
     19e:	0002      	movs	r2, r0
     1a0:	1dfb      	adds	r3, r7, #7
     1a2:	701a      	strb	r2, [r3, #0]
     1a4:	1dbb      	adds	r3, r7, #6
     1a6:	1c0a      	adds	r2, r1, #0
     1a8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1aa:	1dfb      	adds	r3, r7, #7
     1ac:	781b      	ldrb	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b0d      	ldr	r3, [pc, #52]	; (1e8 <port_pin_set_output_level+0x50>)
     1b2:	4798      	blx	r3
     1b4:	0003      	movs	r3, r0
     1b6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1b8:	1dfb      	adds	r3, r7, #7
     1ba:	781b      	ldrb	r3, [r3, #0]
     1bc:	221f      	movs	r2, #31
     1be:	4013      	ands	r3, r2
     1c0:	2201      	movs	r2, #1
     1c2:	409a      	lsls	r2, r3
     1c4:	0013      	movs	r3, r2
     1c6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1c8:	1dbb      	adds	r3, r7, #6
     1ca:	781b      	ldrb	r3, [r3, #0]
     1cc:	2b00      	cmp	r3, #0
     1ce:	d003      	beq.n	1d8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1d0:	68fb      	ldr	r3, [r7, #12]
     1d2:	68ba      	ldr	r2, [r7, #8]
     1d4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     1d6:	e002      	b.n	1de <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1d8:	68fb      	ldr	r3, [r7, #12]
     1da:	68ba      	ldr	r2, [r7, #8]
     1dc:	615a      	str	r2, [r3, #20]
	}
}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	46bd      	mov	sp, r7
     1e2:	b004      	add	sp, #16
     1e4:	bd80      	pop	{r7, pc}
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	00000175 	.word	0x00000175

000001ec <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     1ec:	b580      	push	{r7, lr}
     1ee:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     1f0:	4b02      	ldr	r3, [pc, #8]	; (1fc <system_interrupt_enter_critical_section+0x10>)
     1f2:	4798      	blx	r3
}
     1f4:	46c0      	nop			; (mov r8, r8)
     1f6:	46bd      	mov	sp, r7
     1f8:	bd80      	pop	{r7, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	000036e1 	.word	0x000036e1

00000200 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     200:	b580      	push	{r7, lr}
     202:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     204:	4b02      	ldr	r3, [pc, #8]	; (210 <system_interrupt_leave_critical_section+0x10>)
     206:	4798      	blx	r3
}
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46bd      	mov	sp, r7
     20c:	bd80      	pop	{r7, pc}
     20e:	46c0      	nop			; (mov r8, r8)
     210:	00003735 	.word	0x00003735

00000214 <spi_lock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline enum status_code spi_lock(struct spi_module *const module)
{
     214:	b580      	push	{r7, lr}
     216:	b084      	sub	sp, #16
     218:	af00      	add	r7, sp, #0
     21a:	6078      	str	r0, [r7, #4]
	enum status_code status;

	system_interrupt_enter_critical_section();
     21c:	4b0d      	ldr	r3, [pc, #52]	; (254 <spi_lock+0x40>)
     21e:	4798      	blx	r3

	if (module->locked) {
     220:	687b      	ldr	r3, [r7, #4]
     222:	791b      	ldrb	r3, [r3, #4]
     224:	b2db      	uxtb	r3, r3
     226:	2b00      	cmp	r3, #0
     228:	d004      	beq.n	234 <spi_lock+0x20>
		status = STATUS_BUSY;
     22a:	230f      	movs	r3, #15
     22c:	18fb      	adds	r3, r7, r3
     22e:	2205      	movs	r2, #5
     230:	701a      	strb	r2, [r3, #0]
     232:	e006      	b.n	242 <spi_lock+0x2e>
	} else {
		module->locked = true;
     234:	687b      	ldr	r3, [r7, #4]
     236:	2201      	movs	r2, #1
     238:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
     23a:	230f      	movs	r3, #15
     23c:	18fb      	adds	r3, r7, r3
     23e:	2200      	movs	r2, #0
     240:	701a      	strb	r2, [r3, #0]
	}

	system_interrupt_leave_critical_section();
     242:	4b05      	ldr	r3, [pc, #20]	; (258 <spi_lock+0x44>)
     244:	4798      	blx	r3

	return status;
     246:	230f      	movs	r3, #15
     248:	18fb      	adds	r3, r7, r3
     24a:	781b      	ldrb	r3, [r3, #0]
}
     24c:	0018      	movs	r0, r3
     24e:	46bd      	mov	sp, r7
     250:	b004      	add	sp, #16
     252:	bd80      	pop	{r7, pc}
     254:	000001ed 	.word	0x000001ed
     258:	00000201 	.word	0x00000201

0000025c <spi_unlock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	6078      	str	r0, [r7, #4]
	module->locked = false;
     264:	687b      	ldr	r3, [r7, #4]
     266:	2200      	movs	r2, #0
     268:	711a      	strb	r2, [r3, #4]
}
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	46bd      	mov	sp, r7
     26e:	b002      	add	sp, #8
     270:	bd80      	pop	{r7, pc}
     272:	46c0      	nop			; (mov r8, r8)

00000274 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     274:	b580      	push	{r7, lr}
     276:	b084      	sub	sp, #16
     278:	af00      	add	r7, sp, #0
     27a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     27c:	687b      	ldr	r3, [r7, #4]
     27e:	681b      	ldr	r3, [r3, #0]
     280:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     282:	68fb      	ldr	r3, [r7, #12]
     284:	7e1b      	ldrb	r3, [r3, #24]
     286:	b2db      	uxtb	r3, r3
     288:	001a      	movs	r2, r3
     28a:	2301      	movs	r3, #1
     28c:	4013      	ands	r3, r2
     28e:	1e5a      	subs	r2, r3, #1
     290:	4193      	sbcs	r3, r2
     292:	b2db      	uxtb	r3, r3
}
     294:	0018      	movs	r0, r3
     296:	46bd      	mov	sp, r7
     298:	b004      	add	sp, #16
     29a:	bd80      	pop	{r7, pc}

0000029c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     29c:	b580      	push	{r7, lr}
     29e:	b084      	sub	sp, #16
     2a0:	af00      	add	r7, sp, #0
     2a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	681b      	ldr	r3, [r3, #0]
     2a8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     2aa:	68fb      	ldr	r3, [r7, #12]
     2ac:	7e1b      	ldrb	r3, [r3, #24]
     2ae:	b2db      	uxtb	r3, r3
     2b0:	001a      	movs	r2, r3
     2b2:	2304      	movs	r3, #4
     2b4:	4013      	ands	r3, r2
     2b6:	1e5a      	subs	r2, r3, #1
     2b8:	4193      	sbcs	r3, r2
     2ba:	b2db      	uxtb	r3, r3
}
     2bc:	0018      	movs	r0, r3
     2be:	46bd      	mov	sp, r7
     2c0:	b004      	add	sp, #16
     2c2:	bd80      	pop	{r7, pc}

000002c4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     2c4:	b580      	push	{r7, lr}
     2c6:	b084      	sub	sp, #16
     2c8:	af00      	add	r7, sp, #0
     2ca:	6078      	str	r0, [r7, #4]
     2cc:	000a      	movs	r2, r1
     2ce:	1cbb      	adds	r3, r7, #2
     2d0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2d2:	687b      	ldr	r3, [r7, #4]
     2d4:	681b      	ldr	r3, [r3, #0]
     2d6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     2d8:	687b      	ldr	r3, [r7, #4]
     2da:	0018      	movs	r0, r3
     2dc:	4b0a      	ldr	r3, [pc, #40]	; (308 <spi_write+0x44>)
     2de:	4798      	blx	r3
     2e0:	0003      	movs	r3, r0
     2e2:	001a      	movs	r2, r3
     2e4:	2301      	movs	r3, #1
     2e6:	4053      	eors	r3, r2
     2e8:	b2db      	uxtb	r3, r3
     2ea:	2b00      	cmp	r3, #0
     2ec:	d001      	beq.n	2f2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     2ee:	2305      	movs	r3, #5
     2f0:	e006      	b.n	300 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     2f2:	1cbb      	adds	r3, r7, #2
     2f4:	881b      	ldrh	r3, [r3, #0]
     2f6:	05db      	lsls	r3, r3, #23
     2f8:	0dda      	lsrs	r2, r3, #23
     2fa:	68fb      	ldr	r3, [r7, #12]
     2fc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     2fe:	2300      	movs	r3, #0
}
     300:	0018      	movs	r0, r3
     302:	46bd      	mov	sp, r7
     304:	b004      	add	sp, #16
     306:	bd80      	pop	{r7, pc}
     308:	00000275 	.word	0x00000275

0000030c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     30c:	b580      	push	{r7, lr}
     30e:	b084      	sub	sp, #16
     310:	af00      	add	r7, sp, #0
     312:	6078      	str	r0, [r7, #4]
     314:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     316:	687b      	ldr	r3, [r7, #4]
     318:	681b      	ldr	r3, [r3, #0]
     31a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     31c:	687b      	ldr	r3, [r7, #4]
     31e:	0018      	movs	r0, r3
     320:	4b1b      	ldr	r3, [pc, #108]	; (390 <spi_read+0x84>)
     322:	4798      	blx	r3
     324:	0003      	movs	r3, r0
     326:	001a      	movs	r2, r3
     328:	2301      	movs	r3, #1
     32a:	4053      	eors	r3, r2
     32c:	b2db      	uxtb	r3, r3
     32e:	2b00      	cmp	r3, #0
     330:	d001      	beq.n	336 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     332:	2310      	movs	r3, #16
     334:	e027      	b.n	386 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     336:	230f      	movs	r3, #15
     338:	18fb      	adds	r3, r7, r3
     33a:	2200      	movs	r2, #0
     33c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     33e:	68bb      	ldr	r3, [r7, #8]
     340:	8b5b      	ldrh	r3, [r3, #26]
     342:	b29b      	uxth	r3, r3
     344:	001a      	movs	r2, r3
     346:	2304      	movs	r3, #4
     348:	4013      	ands	r3, r2
     34a:	d006      	beq.n	35a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     34c:	230f      	movs	r3, #15
     34e:	18fb      	adds	r3, r7, r3
     350:	221e      	movs	r2, #30
     352:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     354:	68bb      	ldr	r3, [r7, #8]
     356:	2204      	movs	r2, #4
     358:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     35a:	687b      	ldr	r3, [r7, #4]
     35c:	799b      	ldrb	r3, [r3, #6]
     35e:	2b01      	cmp	r3, #1
     360:	d108      	bne.n	374 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     362:	68bb      	ldr	r3, [r7, #8]
     364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     366:	b29b      	uxth	r3, r3
     368:	05db      	lsls	r3, r3, #23
     36a:	0ddb      	lsrs	r3, r3, #23
     36c:	b29a      	uxth	r2, r3
     36e:	683b      	ldr	r3, [r7, #0]
     370:	801a      	strh	r2, [r3, #0]
     372:	e005      	b.n	380 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     374:	68bb      	ldr	r3, [r7, #8]
     376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     378:	b2db      	uxtb	r3, r3
     37a:	b29a      	uxth	r2, r3
     37c:	683b      	ldr	r3, [r7, #0]
     37e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     380:	230f      	movs	r3, #15
     382:	18fb      	adds	r3, r7, r3
     384:	781b      	ldrb	r3, [r3, #0]
}
     386:	0018      	movs	r0, r3
     388:	46bd      	mov	sp, r7
     38a:	b004      	add	sp, #16
     38c:	bd80      	pop	{r7, pc}
     38e:	46c0      	nop			; (mov r8, r8)
     390:	0000029d 	.word	0x0000029d

00000394 <_at25dfx_get_device_id>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash device ID.
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
     394:	b580      	push	{r7, lr}
     396:	b082      	sub	sp, #8
     398:	af00      	add	r7, sp, #0
     39a:	0002      	movs	r2, r0
     39c:	1dfb      	adds	r3, r7, #7
     39e:	701a      	strb	r2, [r3, #0]
	switch (type) {
     3a0:	1dfb      	adds	r3, r7, #7
     3a2:	781b      	ldrb	r3, [r3, #0]
     3a4:	2b09      	cmp	r3, #9
     3a6:	d818      	bhi.n	3da <_at25dfx_get_device_id+0x46>
     3a8:	009a      	lsls	r2, r3, #2
     3aa:	4b0e      	ldr	r3, [pc, #56]	; (3e4 <_at25dfx_get_device_id+0x50>)
     3ac:	18d3      	adds	r3, r2, r3
     3ae:	681b      	ldr	r3, [r3, #0]
     3b0:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 0x00651f;
     3b2:	4b0d      	ldr	r3, [pc, #52]	; (3e8 <_at25dfx_get_device_id+0x54>)
     3b4:	e012      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_021:
		return 0x00431f;
     3b6:	4b0d      	ldr	r3, [pc, #52]	; (3ec <_at25dfx_get_device_id+0x58>)
     3b8:	e010      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_041A:
		return 0x01441f;
     3ba:	4b0d      	ldr	r3, [pc, #52]	; (3f0 <_at25dfx_get_device_id+0x5c>)
     3bc:	e00e      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_081:
		return 0x02451f;
     3be:	4b0d      	ldr	r3, [pc, #52]	; (3f4 <_at25dfx_get_device_id+0x60>)
     3c0:	e00c      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_081A:
		return 0x01451f;
     3c2:	4b0d      	ldr	r3, [pc, #52]	; (3f8 <_at25dfx_get_device_id+0x64>)
     3c4:	e00a      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_161:
		return 0x02461f;
     3c6:	4b0d      	ldr	r3, [pc, #52]	; (3fc <_at25dfx_get_device_id+0x68>)
     3c8:	e008      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_L161:
		return 0x03461f;
     3ca:	4b0d      	ldr	r3, [pc, #52]	; (400 <_at25dfx_get_device_id+0x6c>)
     3cc:	e006      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_Q161:
		return 0x00861f;
     3ce:	4b0d      	ldr	r3, [pc, #52]	; (404 <_at25dfx_get_device_id+0x70>)
     3d0:	e004      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_321A:
		return 0x01471f;
     3d2:	4b0d      	ldr	r3, [pc, #52]	; (408 <_at25dfx_get_device_id+0x74>)
     3d4:	e002      	b.n	3dc <_at25dfx_get_device_id+0x48>

	case AT25DFX_641:
		return 0x00481f;
     3d6:	4b0d      	ldr	r3, [pc, #52]	; (40c <_at25dfx_get_device_id+0x78>)
     3d8:	e000      	b.n	3dc <_at25dfx_get_device_id+0x48>

	default:
		Assert(false);
		return 0;
     3da:	2300      	movs	r3, #0
	}
}
     3dc:	0018      	movs	r0, r3
     3de:	46bd      	mov	sp, r7
     3e0:	b002      	add	sp, #8
     3e2:	bd80      	pop	{r7, pc}
     3e4:	00006090 	.word	0x00006090
     3e8:	0000651f 	.word	0x0000651f
     3ec:	0000431f 	.word	0x0000431f
     3f0:	0001441f 	.word	0x0001441f
     3f4:	0002451f 	.word	0x0002451f
     3f8:	0001451f 	.word	0x0001451f
     3fc:	0002461f 	.word	0x0002461f
     400:	0003461f 	.word	0x0003461f
     404:	0000861f 	.word	0x0000861f
     408:	0001471f 	.word	0x0001471f
     40c:	0000481f 	.word	0x0000481f

00000410 <_at25dfx_get_device_size>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
     410:	b580      	push	{r7, lr}
     412:	b082      	sub	sp, #8
     414:	af00      	add	r7, sp, #0
     416:	0002      	movs	r2, r0
     418:	1dfb      	adds	r3, r7, #7
     41a:	701a      	strb	r2, [r3, #0]
	switch (type) {
     41c:	1dfb      	adds	r3, r7, #7
     41e:	781b      	ldrb	r3, [r3, #0]
     420:	2b09      	cmp	r3, #9
     422:	d819      	bhi.n	458 <_at25dfx_get_device_size+0x48>
     424:	009a      	lsls	r2, r3, #2
     426:	4b0f      	ldr	r3, [pc, #60]	; (464 <_at25dfx_get_device_size+0x54>)
     428:	18d3      	adds	r3, r2, r3
     42a:	681b      	ldr	r3, [r3, #0]
     42c:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;
     42e:	2380      	movs	r3, #128	; 0x80
     430:	025b      	lsls	r3, r3, #9
     432:	e012      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_021:
		return 256 * 1024UL;
     434:	2380      	movs	r3, #128	; 0x80
     436:	02db      	lsls	r3, r3, #11
     438:	e00f      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_041A:
		return 512 * 1024UL;
     43a:	2380      	movs	r3, #128	; 0x80
     43c:	031b      	lsls	r3, r3, #12
     43e:	e00c      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
     440:	2380      	movs	r3, #128	; 0x80
     442:	035b      	lsls	r3, r3, #13
     444:	e009      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
     446:	2380      	movs	r3, #128	; 0x80
     448:	039b      	lsls	r3, r3, #14
     44a:	e006      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_321A:
		return 4096 * 1024UL;
     44c:	2380      	movs	r3, #128	; 0x80
     44e:	03db      	lsls	r3, r3, #15
     450:	e003      	b.n	45a <_at25dfx_get_device_size+0x4a>

	case AT25DFX_641:
		return 8192 * 1024UL;
     452:	2380      	movs	r3, #128	; 0x80
     454:	041b      	lsls	r3, r3, #16
     456:	e000      	b.n	45a <_at25dfx_get_device_size+0x4a>

	default:
		Assert(false);
		return 0;
     458:	2300      	movs	r3, #0
	}
}
     45a:	0018      	movs	r0, r3
     45c:	46bd      	mov	sp, r7
     45e:	b002      	add	sp, #8
     460:	bd80      	pop	{r7, pc}
     462:	46c0      	nop			; (mov r8, r8)
     464:	000060b8 	.word	0x000060b8

00000468 <_at25dfx_chip_select>:
 * This function selects the specified chip by driving its CS line low.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
     468:	b580      	push	{r7, lr}
     46a:	b082      	sub	sp, #8
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
     470:	687b      	ldr	r3, [r7, #4]
     472:	795b      	ldrb	r3, [r3, #5]
     474:	2100      	movs	r1, #0
     476:	0018      	movs	r0, r3
     478:	4b02      	ldr	r3, [pc, #8]	; (484 <_at25dfx_chip_select+0x1c>)
     47a:	4798      	blx	r3
}
     47c:	46c0      	nop			; (mov r8, r8)
     47e:	46bd      	mov	sp, r7
     480:	b002      	add	sp, #8
     482:	bd80      	pop	{r7, pc}
     484:	00000199 	.word	0x00000199

00000488 <_at25dfx_chip_deselect>:
 * This function deselects the specified chip by driving its CS line high.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
     488:	b580      	push	{r7, lr}
     48a:	b082      	sub	sp, #8
     48c:	af00      	add	r7, sp, #0
     48e:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
     490:	687b      	ldr	r3, [r7, #4]
     492:	795b      	ldrb	r3, [r3, #5]
     494:	2101      	movs	r1, #1
     496:	0018      	movs	r0, r3
     498:	4b02      	ldr	r3, [pc, #8]	; (4a4 <_at25dfx_chip_deselect+0x1c>)
     49a:	4798      	blx	r3
}
     49c:	46c0      	nop			; (mov r8, r8)
     49e:	46bd      	mov	sp, r7
     4a0:	b002      	add	sp, #8
     4a2:	bd80      	pop	{r7, pc}
     4a4:	00000199 	.word	0x00000199

000004a8 <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     4a8:	b084      	sub	sp, #16
     4aa:	b5b0      	push	{r4, r5, r7, lr}
     4ac:	b084      	sub	sp, #16
     4ae:	af00      	add	r7, sp, #0
     4b0:	6078      	str	r0, [r7, #4]
     4b2:	2004      	movs	r0, #4
     4b4:	2420      	movs	r4, #32
     4b6:	46a4      	mov	ip, r4
     4b8:	44bc      	add	ip, r7
     4ba:	4460      	add	r0, ip
     4bc:	6001      	str	r1, [r0, #0]
     4be:	6042      	str	r2, [r0, #4]
     4c0:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
     4c2:	2304      	movs	r3, #4
     4c4:	2220      	movs	r2, #32
     4c6:	4694      	mov	ip, r2
     4c8:	44bc      	add	ip, r7
     4ca:	4463      	add	r3, ip
     4cc:	781a      	ldrb	r2, [r3, #0]
     4ce:	2308      	movs	r3, #8
     4d0:	18fb      	adds	r3, r7, r3
     4d2:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     4d4:	2304      	movs	r3, #4
     4d6:	2220      	movs	r2, #32
     4d8:	4694      	mov	ip, r2
     4da:	44bc      	add	ip, r7
     4dc:	4463      	add	r3, ip
     4de:	785b      	ldrb	r3, [r3, #1]
     4e0:	2b01      	cmp	r3, #1
     4e2:	d91f      	bls.n	524 <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     4e4:	2304      	movs	r3, #4
     4e6:	2220      	movs	r2, #32
     4e8:	4694      	mov	ip, r2
     4ea:	44bc      	add	ip, r7
     4ec:	4463      	add	r3, ip
     4ee:	685b      	ldr	r3, [r3, #4]
     4f0:	b2da      	uxtb	r2, r3
     4f2:	2308      	movs	r3, #8
     4f4:	18fb      	adds	r3, r7, r3
     4f6:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     4f8:	2304      	movs	r3, #4
     4fa:	2220      	movs	r2, #32
     4fc:	4694      	mov	ip, r2
     4fe:	44bc      	add	ip, r7
     500:	4463      	add	r3, ip
     502:	685b      	ldr	r3, [r3, #4]
     504:	0a1b      	lsrs	r3, r3, #8
     506:	b2da      	uxtb	r2, r3
     508:	2308      	movs	r3, #8
     50a:	18fb      	adds	r3, r7, r3
     50c:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     50e:	2304      	movs	r3, #4
     510:	2220      	movs	r2, #32
     512:	4694      	mov	ip, r2
     514:	44bc      	add	ip, r7
     516:	4463      	add	r3, ip
     518:	685b      	ldr	r3, [r3, #4]
     51a:	0c1b      	lsrs	r3, r3, #16
     51c:	b2da      	uxtb	r2, r3
     51e:	2308      	movs	r3, #8
     520:	18fb      	adds	r3, r7, r3
     522:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
     524:	687b      	ldr	r3, [r7, #4]
     526:	0018      	movs	r0, r3
     528:	4b1d      	ldr	r3, [pc, #116]	; (5a0 <_at25dfx_chip_issue_read_command_wait+0xf8>)
     52a:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     52c:	687b      	ldr	r3, [r7, #4]
     52e:	6818      	ldr	r0, [r3, #0]
     530:	2304      	movs	r3, #4
     532:	2220      	movs	r2, #32
     534:	4694      	mov	ip, r2
     536:	44bc      	add	ip, r7
     538:	4463      	add	r3, ip
     53a:	785b      	ldrb	r3, [r3, #1]
     53c:	b29a      	uxth	r2, r3
     53e:	230f      	movs	r3, #15
     540:	18fc      	adds	r4, r7, r3
     542:	2308      	movs	r3, #8
     544:	18fb      	adds	r3, r7, r3
     546:	0019      	movs	r1, r3
     548:	4b16      	ldr	r3, [pc, #88]	; (5a4 <_at25dfx_chip_issue_read_command_wait+0xfc>)
     54a:	4798      	blx	r3
     54c:	0003      	movs	r3, r0
     54e:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     550:	2304      	movs	r3, #4
     552:	2220      	movs	r2, #32
     554:	4694      	mov	ip, r2
     556:	44bc      	add	ip, r7
     558:	4463      	add	r3, ip
     55a:	899b      	ldrh	r3, [r3, #12]
     55c:	2b00      	cmp	r3, #0
     55e:	d014      	beq.n	58a <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
     560:	687b      	ldr	r3, [r7, #4]
     562:	6818      	ldr	r0, [r3, #0]
     564:	2304      	movs	r3, #4
     566:	2220      	movs	r2, #32
     568:	4694      	mov	ip, r2
     56a:	44bc      	add	ip, r7
     56c:	4463      	add	r3, ip
     56e:	6899      	ldr	r1, [r3, #8]
     570:	2304      	movs	r3, #4
     572:	2220      	movs	r2, #32
     574:	4694      	mov	ip, r2
     576:	44bc      	add	ip, r7
     578:	4463      	add	r3, ip
     57a:	899a      	ldrh	r2, [r3, #12]
     57c:	230f      	movs	r3, #15
     57e:	18fc      	adds	r4, r7, r3
     580:	2300      	movs	r3, #0
     582:	4d09      	ldr	r5, [pc, #36]	; (5a8 <_at25dfx_chip_issue_read_command_wait+0x100>)
     584:	47a8      	blx	r5
     586:	0003      	movs	r3, r0
     588:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     58a:	687b      	ldr	r3, [r7, #4]
     58c:	0018      	movs	r0, r3
     58e:	4b07      	ldr	r3, [pc, #28]	; (5ac <_at25dfx_chip_issue_read_command_wait+0x104>)
     590:	4798      	blx	r3
}
     592:	46c0      	nop			; (mov r8, r8)
     594:	46bd      	mov	sp, r7
     596:	b004      	add	sp, #16
     598:	bcb0      	pop	{r4, r5, r7}
     59a:	bc08      	pop	{r3}
     59c:	b004      	add	sp, #16
     59e:	4718      	bx	r3
     5a0:	00000469 	.word	0x00000469
     5a4:	00001755 	.word	0x00001755
     5a8:	00001599 	.word	0x00001599
     5ac:	00000489 	.word	0x00000489

000005b0 <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     5b0:	b084      	sub	sp, #16
     5b2:	b590      	push	{r4, r7, lr}
     5b4:	b085      	sub	sp, #20
     5b6:	af00      	add	r7, sp, #0
     5b8:	6078      	str	r0, [r7, #4]
     5ba:	2004      	movs	r0, #4
     5bc:	2420      	movs	r4, #32
     5be:	46a4      	mov	ip, r4
     5c0:	44bc      	add	ip, r7
     5c2:	4460      	add	r0, ip
     5c4:	6001      	str	r1, [r0, #0]
     5c6:	6042      	str	r2, [r0, #4]
     5c8:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     5ca:	2304      	movs	r3, #4
     5cc:	2220      	movs	r2, #32
     5ce:	4694      	mov	ip, r2
     5d0:	44bc      	add	ip, r7
     5d2:	4463      	add	r3, ip
     5d4:	781a      	ldrb	r2, [r3, #0]
     5d6:	2308      	movs	r3, #8
     5d8:	18fb      	adds	r3, r7, r3
     5da:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     5dc:	2304      	movs	r3, #4
     5de:	2220      	movs	r2, #32
     5e0:	4694      	mov	ip, r2
     5e2:	44bc      	add	ip, r7
     5e4:	4463      	add	r3, ip
     5e6:	785b      	ldrb	r3, [r3, #1]
     5e8:	2b01      	cmp	r3, #1
     5ea:	d91f      	bls.n	62c <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     5ec:	2304      	movs	r3, #4
     5ee:	2220      	movs	r2, #32
     5f0:	4694      	mov	ip, r2
     5f2:	44bc      	add	ip, r7
     5f4:	4463      	add	r3, ip
     5f6:	685b      	ldr	r3, [r3, #4]
     5f8:	b2da      	uxtb	r2, r3
     5fa:	2308      	movs	r3, #8
     5fc:	18fb      	adds	r3, r7, r3
     5fe:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     600:	2304      	movs	r3, #4
     602:	2220      	movs	r2, #32
     604:	4694      	mov	ip, r2
     606:	44bc      	add	ip, r7
     608:	4463      	add	r3, ip
     60a:	685b      	ldr	r3, [r3, #4]
     60c:	0a1b      	lsrs	r3, r3, #8
     60e:	b2da      	uxtb	r2, r3
     610:	2308      	movs	r3, #8
     612:	18fb      	adds	r3, r7, r3
     614:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     616:	2304      	movs	r3, #4
     618:	2220      	movs	r2, #32
     61a:	4694      	mov	ip, r2
     61c:	44bc      	add	ip, r7
     61e:	4463      	add	r3, ip
     620:	685b      	ldr	r3, [r3, #4]
     622:	0c1b      	lsrs	r3, r3, #16
     624:	b2da      	uxtb	r2, r3
     626:	2308      	movs	r3, #8
     628:	18fb      	adds	r3, r7, r3
     62a:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
     62c:	687b      	ldr	r3, [r7, #4]
     62e:	0018      	movs	r0, r3
     630:	4b1d      	ldr	r3, [pc, #116]	; (6a8 <_at25dfx_chip_issue_write_command_wait+0xf8>)
     632:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     634:	687b      	ldr	r3, [r7, #4]
     636:	6818      	ldr	r0, [r3, #0]
     638:	2304      	movs	r3, #4
     63a:	2220      	movs	r2, #32
     63c:	4694      	mov	ip, r2
     63e:	44bc      	add	ip, r7
     640:	4463      	add	r3, ip
     642:	785b      	ldrb	r3, [r3, #1]
     644:	b29a      	uxth	r2, r3
     646:	230f      	movs	r3, #15
     648:	18fc      	adds	r4, r7, r3
     64a:	2308      	movs	r3, #8
     64c:	18fb      	adds	r3, r7, r3
     64e:	0019      	movs	r1, r3
     650:	4b16      	ldr	r3, [pc, #88]	; (6ac <_at25dfx_chip_issue_write_command_wait+0xfc>)
     652:	4798      	blx	r3
     654:	0003      	movs	r3, r0
     656:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     658:	2304      	movs	r3, #4
     65a:	2220      	movs	r2, #32
     65c:	4694      	mov	ip, r2
     65e:	44bc      	add	ip, r7
     660:	4463      	add	r3, ip
     662:	899b      	ldrh	r3, [r3, #12]
     664:	2b00      	cmp	r3, #0
     666:	d014      	beq.n	692 <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     668:	687b      	ldr	r3, [r7, #4]
     66a:	6818      	ldr	r0, [r3, #0]
     66c:	2304      	movs	r3, #4
     66e:	2220      	movs	r2, #32
     670:	4694      	mov	ip, r2
     672:	44bc      	add	ip, r7
     674:	4463      	add	r3, ip
     676:	6899      	ldr	r1, [r3, #8]
     678:	2304      	movs	r3, #4
     67a:	2220      	movs	r2, #32
     67c:	4694      	mov	ip, r2
     67e:	44bc      	add	ip, r7
     680:	4463      	add	r3, ip
     682:	899b      	ldrh	r3, [r3, #12]
     684:	220f      	movs	r2, #15
     686:	18bc      	adds	r4, r7, r2
     688:	001a      	movs	r2, r3
     68a:	4b08      	ldr	r3, [pc, #32]	; (6ac <_at25dfx_chip_issue_write_command_wait+0xfc>)
     68c:	4798      	blx	r3
     68e:	0003      	movs	r3, r0
     690:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     692:	687b      	ldr	r3, [r7, #4]
     694:	0018      	movs	r0, r3
     696:	4b06      	ldr	r3, [pc, #24]	; (6b0 <_at25dfx_chip_issue_write_command_wait+0x100>)
     698:	4798      	blx	r3
}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	46bd      	mov	sp, r7
     69e:	b005      	add	sp, #20
     6a0:	bc90      	pop	{r4, r7}
     6a2:	bc08      	pop	{r3}
     6a4:	b004      	add	sp, #16
     6a6:	4718      	bx	r3
     6a8:	00000469 	.word	0x00000469
     6ac:	00001755 	.word	0x00001755
     6b0:	00000489 	.word	0x00000489

000006b4 <_at25dfx_chip_get_nonbusy_status>:
 * \retval STATUS_OK if operation succeeded.
 * \retval STATUS_ERR_IO if an error occurred.
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
     6b4:	b590      	push	{r4, r7, lr}
     6b6:	b085      	sub	sp, #20
     6b8:	af00      	add	r7, sp, #0
     6ba:	6078      	str	r0, [r7, #4]
	enum status_code status;
	uint16_t status_reg = 0;
     6bc:	230c      	movs	r3, #12
     6be:	18fb      	adds	r3, r7, r3
     6c0:	2200      	movs	r2, #0
     6c2:	801a      	strh	r2, [r3, #0]

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
     6c4:	46c0      	nop			; (mov r8, r8)
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	681b      	ldr	r3, [r3, #0]
     6ca:	0018      	movs	r0, r3
     6cc:	4b3c      	ldr	r3, [pc, #240]	; (7c0 <_at25dfx_chip_get_nonbusy_status+0x10c>)
     6ce:	4798      	blx	r3
     6d0:	0003      	movs	r3, r0
     6d2:	001a      	movs	r2, r3
     6d4:	2301      	movs	r3, #1
     6d6:	4053      	eors	r3, r2
     6d8:	b2db      	uxtb	r3, r3
     6da:	2b00      	cmp	r3, #0
     6dc:	d1f3      	bne.n	6c6 <_at25dfx_chip_get_nonbusy_status+0x12>
	}

	_at25dfx_chip_select(chip);
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	0018      	movs	r0, r3
     6e2:	4b38      	ldr	r3, [pc, #224]	; (7c4 <_at25dfx_chip_get_nonbusy_status+0x110>)
     6e4:	4798      	blx	r3
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
     6e6:	687b      	ldr	r3, [r7, #4]
     6e8:	681b      	ldr	r3, [r3, #0]
     6ea:	220f      	movs	r2, #15
     6ec:	18bc      	adds	r4, r7, r2
     6ee:	2105      	movs	r1, #5
     6f0:	0018      	movs	r0, r3
     6f2:	4b35      	ldr	r3, [pc, #212]	; (7c8 <_at25dfx_chip_get_nonbusy_status+0x114>)
     6f4:	4798      	blx	r3
     6f6:	0003      	movs	r3, r0
     6f8:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	0018      	movs	r0, r3
     702:	4b32      	ldr	r3, [pc, #200]	; (7cc <_at25dfx_chip_get_nonbusy_status+0x118>)
     704:	4798      	blx	r3
     706:	0003      	movs	r3, r0
     708:	001a      	movs	r2, r3
     70a:	2301      	movs	r3, #1
     70c:	4053      	eors	r3, r2
     70e:	b2db      	uxtb	r3, r3
     710:	2b00      	cmp	r3, #0
     712:	d1f3      	bne.n	6fc <_at25dfx_chip_get_nonbusy_status+0x48>
	}
	status = spi_read(chip->spi, &status_reg);
     714:	687b      	ldr	r3, [r7, #4]
     716:	681b      	ldr	r3, [r3, #0]
     718:	220f      	movs	r2, #15
     71a:	18bc      	adds	r4, r7, r2
     71c:	220c      	movs	r2, #12
     71e:	18ba      	adds	r2, r7, r2
     720:	0011      	movs	r1, r2
     722:	0018      	movs	r0, r3
     724:	4b2a      	ldr	r3, [pc, #168]	; (7d0 <_at25dfx_chip_get_nonbusy_status+0x11c>)
     726:	4798      	blx	r3
     728:	0003      	movs	r3, r0
     72a:	7023      	strb	r3, [r4, #0]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     72c:	46c0      	nop			; (mov r8, r8)
     72e:	687b      	ldr	r3, [r7, #4]
     730:	681b      	ldr	r3, [r3, #0]
     732:	0018      	movs	r0, r3
     734:	4b22      	ldr	r3, [pc, #136]	; (7c0 <_at25dfx_chip_get_nonbusy_status+0x10c>)
     736:	4798      	blx	r3
     738:	0003      	movs	r3, r0
     73a:	001a      	movs	r2, r3
     73c:	2301      	movs	r3, #1
     73e:	4053      	eors	r3, r2
     740:	b2db      	uxtb	r3, r3
     742:	2b00      	cmp	r3, #0
     744:	d1f3      	bne.n	72e <_at25dfx_chip_get_nonbusy_status+0x7a>
		}
		status = spi_write(chip->spi, 0);
     746:	687b      	ldr	r3, [r7, #4]
     748:	681b      	ldr	r3, [r3, #0]
     74a:	220f      	movs	r2, #15
     74c:	18bc      	adds	r4, r7, r2
     74e:	2100      	movs	r1, #0
     750:	0018      	movs	r0, r3
     752:	4b1d      	ldr	r3, [pc, #116]	; (7c8 <_at25dfx_chip_get_nonbusy_status+0x114>)
     754:	4798      	blx	r3
     756:	0003      	movs	r3, r0
     758:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	687b      	ldr	r3, [r7, #4]
     75e:	681b      	ldr	r3, [r3, #0]
     760:	0018      	movs	r0, r3
     762:	4b1a      	ldr	r3, [pc, #104]	; (7cc <_at25dfx_chip_get_nonbusy_status+0x118>)
     764:	4798      	blx	r3
     766:	0003      	movs	r3, r0
     768:	001a      	movs	r2, r3
     76a:	2301      	movs	r3, #1
     76c:	4053      	eors	r3, r2
     76e:	b2db      	uxtb	r3, r3
     770:	2b00      	cmp	r3, #0
     772:	d1f3      	bne.n	75c <_at25dfx_chip_get_nonbusy_status+0xa8>
		}
		status = spi_read(chip->spi, &status_reg);
     774:	687b      	ldr	r3, [r7, #4]
     776:	681b      	ldr	r3, [r3, #0]
     778:	220f      	movs	r2, #15
     77a:	18bc      	adds	r4, r7, r2
     77c:	220c      	movs	r2, #12
     77e:	18ba      	adds	r2, r7, r2
     780:	0011      	movs	r1, r2
     782:	0018      	movs	r0, r3
     784:	4b12      	ldr	r3, [pc, #72]	; (7d0 <_at25dfx_chip_get_nonbusy_status+0x11c>)
     786:	4798      	blx	r3
     788:	0003      	movs	r3, r0
     78a:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     78c:	230c      	movs	r3, #12
     78e:	18fb      	adds	r3, r7, r3
     790:	881b      	ldrh	r3, [r3, #0]
     792:	001a      	movs	r2, r3
     794:	2301      	movs	r3, #1
     796:	4013      	ands	r3, r2
     798:	d1c8      	bne.n	72c <_at25dfx_chip_get_nonbusy_status+0x78>

	_at25dfx_chip_deselect(chip);
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	0018      	movs	r0, r3
     79e:	4b0d      	ldr	r3, [pc, #52]	; (7d4 <_at25dfx_chip_get_nonbusy_status+0x120>)
     7a0:	4798      	blx	r3

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
     7a2:	230c      	movs	r3, #12
     7a4:	18fb      	adds	r3, r7, r3
     7a6:	881b      	ldrh	r3, [r3, #0]
     7a8:	001a      	movs	r2, r3
     7aa:	2320      	movs	r3, #32
     7ac:	4013      	ands	r3, r2
     7ae:	d001      	beq.n	7b4 <_at25dfx_chip_get_nonbusy_status+0x100>
		return STATUS_ERR_IO;
     7b0:	2310      	movs	r3, #16
     7b2:	e000      	b.n	7b6 <_at25dfx_chip_get_nonbusy_status+0x102>
	}
	return STATUS_OK;
     7b4:	2300      	movs	r3, #0
}
     7b6:	0018      	movs	r0, r3
     7b8:	46bd      	mov	sp, r7
     7ba:	b005      	add	sp, #20
     7bc:	bd90      	pop	{r4, r7, pc}
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	00000275 	.word	0x00000275
     7c4:	00000469 	.word	0x00000469
     7c8:	000002c5 	.word	0x000002c5
     7cc:	0000029d 	.word	0x0000029d
     7d0:	0000030d 	.word	0x0000030d
     7d4:	00000489 	.word	0x00000489

000007d8 <_at25dfx_chip_enable_write>:
 * or unprotecting sectors.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_enable_write(struct at25dfx_chip_module *chip)
{
     7d8:	b590      	push	{r4, r7, lr}
     7da:	b089      	sub	sp, #36	; 0x24
     7dc:	af02      	add	r7, sp, #8
     7de:	6078      	str	r0, [r7, #4]
	struct at25dfx_command cmd;

	cmd.opcode = AT25DFX_COMMAND_WRITE_ENABLE;
     7e0:	2308      	movs	r3, #8
     7e2:	18fb      	adds	r3, r7, r3
     7e4:	2206      	movs	r2, #6
     7e6:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     7e8:	2308      	movs	r3, #8
     7ea:	18fb      	adds	r3, r7, r3
     7ec:	2201      	movs	r2, #1
     7ee:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     7f0:	2308      	movs	r3, #8
     7f2:	18fb      	adds	r3, r7, r3
     7f4:	2200      	movs	r2, #0
     7f6:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     7f8:	2308      	movs	r3, #8
     7fa:	18fb      	adds	r3, r7, r3
     7fc:	2200      	movs	r2, #0
     7fe:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     800:	2308      	movs	r3, #8
     802:	18fb      	adds	r3, r7, r3
     804:	2200      	movs	r2, #0
     806:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     808:	2308      	movs	r3, #8
     80a:	18fb      	adds	r3, r7, r3
     80c:	6878      	ldr	r0, [r7, #4]
     80e:	466a      	mov	r2, sp
     810:	68d9      	ldr	r1, [r3, #12]
     812:	6011      	str	r1, [r2, #0]
     814:	6819      	ldr	r1, [r3, #0]
     816:	685a      	ldr	r2, [r3, #4]
     818:	689b      	ldr	r3, [r3, #8]
     81a:	4c03      	ldr	r4, [pc, #12]	; (828 <_at25dfx_chip_enable_write+0x50>)
     81c:	47a0      	blx	r4
}
     81e:	46c0      	nop			; (mov r8, r8)
     820:	46bd      	mov	sp, r7
     822:	b007      	add	sp, #28
     824:	bd90      	pop	{r4, r7, pc}
     826:	46c0      	nop			; (mov r8, r8)
     828:	000005b1 	.word	0x000005b1

0000082c <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
     82c:	b590      	push	{r4, r7, lr}
     82e:	b08b      	sub	sp, #44	; 0x2c
     830:	af02      	add	r7, sp, #8
     832:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
     834:	2300      	movs	r3, #0
     836:	60bb      	str	r3, [r7, #8]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
     838:	687b      	ldr	r3, [r7, #4]
     83a:	681b      	ldr	r3, [r3, #0]
     83c:	221f      	movs	r2, #31
     83e:	18bc      	adds	r4, r7, r2
     840:	0018      	movs	r0, r3
     842:	4b21      	ldr	r3, [pc, #132]	; (8c8 <at25dfx_chip_check_presence+0x9c>)
     844:	4798      	blx	r3
     846:	0003      	movs	r3, r0
     848:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     84a:	231f      	movs	r3, #31
     84c:	18fb      	adds	r3, r7, r3
     84e:	781b      	ldrb	r3, [r3, #0]
     850:	2b05      	cmp	r3, #5
     852:	d103      	bne.n	85c <at25dfx_chip_check_presence+0x30>
		return status;
     854:	231f      	movs	r3, #31
     856:	18fb      	adds	r3, r7, r3
     858:	781b      	ldrb	r3, [r3, #0]
     85a:	e030      	b.n	8be <at25dfx_chip_check_presence+0x92>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
     85c:	230c      	movs	r3, #12
     85e:	18fb      	adds	r3, r7, r3
     860:	229f      	movs	r2, #159	; 0x9f
     862:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     864:	230c      	movs	r3, #12
     866:	18fb      	adds	r3, r7, r3
     868:	2201      	movs	r2, #1
     86a:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
     86c:	230c      	movs	r3, #12
     86e:	18fb      	adds	r3, r7, r3
     870:	2208      	movs	r2, #8
     872:	18ba      	adds	r2, r7, r2
     874:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
     876:	230c      	movs	r3, #12
     878:	18fb      	adds	r3, r7, r3
     87a:	2203      	movs	r2, #3
     87c:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     87e:	230c      	movs	r3, #12
     880:	18fb      	adds	r3, r7, r3
     882:	2200      	movs	r2, #0
     884:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_read_command_wait(chip, cmd);
     886:	230c      	movs	r3, #12
     888:	18fb      	adds	r3, r7, r3
     88a:	6878      	ldr	r0, [r7, #4]
     88c:	466a      	mov	r2, sp
     88e:	68d9      	ldr	r1, [r3, #12]
     890:	6011      	str	r1, [r2, #0]
     892:	6819      	ldr	r1, [r3, #0]
     894:	685a      	ldr	r2, [r3, #4]
     896:	689b      	ldr	r3, [r3, #8]
     898:	4c0c      	ldr	r4, [pc, #48]	; (8cc <at25dfx_chip_check_presence+0xa0>)
     89a:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     89c:	687b      	ldr	r3, [r7, #4]
     89e:	681b      	ldr	r3, [r3, #0]
     8a0:	0018      	movs	r0, r3
     8a2:	4b0b      	ldr	r3, [pc, #44]	; (8d0 <at25dfx_chip_check_presence+0xa4>)
     8a4:	4798      	blx	r3

	if (id == _at25dfx_get_device_id(chip->type)) {
     8a6:	687b      	ldr	r3, [r7, #4]
     8a8:	791b      	ldrb	r3, [r3, #4]
     8aa:	0018      	movs	r0, r3
     8ac:	4b09      	ldr	r3, [pc, #36]	; (8d4 <at25dfx_chip_check_presence+0xa8>)
     8ae:	4798      	blx	r3
     8b0:	1e02      	subs	r2, r0, #0
     8b2:	68bb      	ldr	r3, [r7, #8]
     8b4:	429a      	cmp	r2, r3
     8b6:	d101      	bne.n	8bc <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
     8b8:	2300      	movs	r3, #0
     8ba:	e000      	b.n	8be <at25dfx_chip_check_presence+0x92>
	} else {
		return STATUS_ERR_NOT_FOUND;
     8bc:	2314      	movs	r3, #20
	}
}
     8be:	0018      	movs	r0, r3
     8c0:	46bd      	mov	sp, r7
     8c2:	b009      	add	sp, #36	; 0x24
     8c4:	bd90      	pop	{r4, r7, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	00000215 	.word	0x00000215
     8cc:	000004a9 	.word	0x000004a9
     8d0:	0000025d 	.word	0x0000025d
     8d4:	00000395 	.word	0x00000395

000008d8 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
     8d8:	b590      	push	{r4, r7, lr}
     8da:	b08d      	sub	sp, #52	; 0x34
     8dc:	af02      	add	r7, sp, #8
     8de:	60f8      	str	r0, [r7, #12]
     8e0:	60b9      	str	r1, [r7, #8]
     8e2:	607a      	str	r2, [r7, #4]
     8e4:	001a      	movs	r2, r3
     8e6:	1cbb      	adds	r3, r7, #2
     8e8:	801a      	strh	r2, [r3, #0]
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     8ea:	1cbb      	adds	r3, r7, #2
     8ec:	881a      	ldrh	r2, [r3, #0]
     8ee:	68bb      	ldr	r3, [r7, #8]
     8f0:	18d4      	adds	r4, r2, r3
     8f2:	68fb      	ldr	r3, [r7, #12]
     8f4:	791b      	ldrb	r3, [r3, #4]
     8f6:	0018      	movs	r0, r3
     8f8:	4b21      	ldr	r3, [pc, #132]	; (980 <at25dfx_chip_read_buffer+0xa8>)
     8fa:	4798      	blx	r3
     8fc:	0003      	movs	r3, r0
     8fe:	429c      	cmp	r4, r3
     900:	d901      	bls.n	906 <at25dfx_chip_read_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
     902:	2317      	movs	r3, #23
     904:	e037      	b.n	976 <at25dfx_chip_read_buffer+0x9e>
	}

	status = _at25dfx_spi_lock(chip->spi);
     906:	68fb      	ldr	r3, [r7, #12]
     908:	681b      	ldr	r3, [r3, #0]
     90a:	2227      	movs	r2, #39	; 0x27
     90c:	18bc      	adds	r4, r7, r2
     90e:	0018      	movs	r0, r3
     910:	4b1c      	ldr	r3, [pc, #112]	; (984 <at25dfx_chip_read_buffer+0xac>)
     912:	4798      	blx	r3
     914:	0003      	movs	r3, r0
     916:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     918:	2327      	movs	r3, #39	; 0x27
     91a:	18fb      	adds	r3, r7, r3
     91c:	781b      	ldrb	r3, [r3, #0]
     91e:	2b05      	cmp	r3, #5
     920:	d103      	bne.n	92a <at25dfx_chip_read_buffer+0x52>
		return status;
     922:	2327      	movs	r3, #39	; 0x27
     924:	18fb      	adds	r3, r7, r3
     926:	781b      	ldrb	r3, [r3, #0]
     928:	e025      	b.n	976 <at25dfx_chip_read_buffer+0x9e>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_ARRAY;
     92a:	2314      	movs	r3, #20
     92c:	18fb      	adds	r3, r7, r3
     92e:	220b      	movs	r2, #11
     930:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 5;
     932:	2314      	movs	r3, #20
     934:	18fb      	adds	r3, r7, r3
     936:	2205      	movs	r2, #5
     938:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     93a:	2314      	movs	r3, #20
     93c:	18fb      	adds	r3, r7, r3
     93e:	68ba      	ldr	r2, [r7, #8]
     940:	605a      	str	r2, [r3, #4]
	cmd.data.rx = (uint8_t *)data;
     942:	2314      	movs	r3, #20
     944:	18fb      	adds	r3, r7, r3
     946:	687a      	ldr	r2, [r7, #4]
     948:	609a      	str	r2, [r3, #8]
	cmd.length = length;
     94a:	2314      	movs	r3, #20
     94c:	18fb      	adds	r3, r7, r3
     94e:	1cba      	adds	r2, r7, #2
     950:	8812      	ldrh	r2, [r2, #0]
     952:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
     954:	2314      	movs	r3, #20
     956:	18fb      	adds	r3, r7, r3
     958:	68f8      	ldr	r0, [r7, #12]
     95a:	466a      	mov	r2, sp
     95c:	68d9      	ldr	r1, [r3, #12]
     95e:	6011      	str	r1, [r2, #0]
     960:	6819      	ldr	r1, [r3, #0]
     962:	685a      	ldr	r2, [r3, #4]
     964:	689b      	ldr	r3, [r3, #8]
     966:	4c08      	ldr	r4, [pc, #32]	; (988 <at25dfx_chip_read_buffer+0xb0>)
     968:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     96a:	68fb      	ldr	r3, [r7, #12]
     96c:	681b      	ldr	r3, [r3, #0]
     96e:	0018      	movs	r0, r3
     970:	4b06      	ldr	r3, [pc, #24]	; (98c <at25dfx_chip_read_buffer+0xb4>)
     972:	4798      	blx	r3

	return STATUS_OK;
     974:	2300      	movs	r3, #0
}
     976:	0018      	movs	r0, r3
     978:	46bd      	mov	sp, r7
     97a:	b00b      	add	sp, #44	; 0x2c
     97c:	bd90      	pop	{r4, r7, pc}
     97e:	46c0      	nop			; (mov r8, r8)
     980:	00000411 	.word	0x00000411
     984:	00000215 	.word	0x00000215
     988:	000004a9 	.word	0x000004a9
     98c:	0000025d 	.word	0x0000025d

00000990 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
     990:	b590      	push	{r4, r7, lr}
     992:	b08d      	sub	sp, #52	; 0x34
     994:	af02      	add	r7, sp, #8
     996:	60f8      	str	r0, [r7, #12]
     998:	60b9      	str	r1, [r7, #8]
     99a:	607a      	str	r2, [r7, #4]
     99c:	001a      	movs	r2, r3
     99e:	1cbb      	adds	r3, r7, #2
     9a0:	801a      	strh	r2, [r3, #0]

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     9a2:	1cbb      	adds	r3, r7, #2
     9a4:	881a      	ldrh	r2, [r3, #0]
     9a6:	68bb      	ldr	r3, [r7, #8]
     9a8:	18d4      	adds	r4, r2, r3
     9aa:	68fb      	ldr	r3, [r7, #12]
     9ac:	791b      	ldrb	r3, [r3, #4]
     9ae:	0018      	movs	r0, r3
     9b0:	4b5b      	ldr	r3, [pc, #364]	; (b20 <at25dfx_chip_write_buffer+0x190>)
     9b2:	4798      	blx	r3
     9b4:	0003      	movs	r3, r0
     9b6:	429c      	cmp	r4, r3
     9b8:	d901      	bls.n	9be <at25dfx_chip_write_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
     9ba:	2317      	movs	r3, #23
     9bc:	e0ab      	b.n	b16 <at25dfx_chip_write_buffer+0x186>
	}

	status = _at25dfx_spi_lock(chip->spi);
     9be:	68fb      	ldr	r3, [r7, #12]
     9c0:	681b      	ldr	r3, [r3, #0]
     9c2:	2227      	movs	r2, #39	; 0x27
     9c4:	18bc      	adds	r4, r7, r2
     9c6:	0018      	movs	r0, r3
     9c8:	4b56      	ldr	r3, [pc, #344]	; (b24 <at25dfx_chip_write_buffer+0x194>)
     9ca:	4798      	blx	r3
     9cc:	0003      	movs	r3, r0
     9ce:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     9d0:	2327      	movs	r3, #39	; 0x27
     9d2:	18fb      	adds	r3, r7, r3
     9d4:	781b      	ldrb	r3, [r3, #0]
     9d6:	2b05      	cmp	r3, #5
     9d8:	d103      	bne.n	9e2 <at25dfx_chip_write_buffer+0x52>
		return status;
     9da:	2327      	movs	r3, #39	; 0x27
     9dc:	18fb      	adds	r3, r7, r3
     9de:	781b      	ldrb	r3, [r3, #0]
     9e0:	e099      	b.n	b16 <at25dfx_chip_write_buffer+0x186>
	}

	_at25dfx_chip_enable_write(chip);
     9e2:	68fb      	ldr	r3, [r7, #12]
     9e4:	0018      	movs	r0, r3
     9e6:	4b50      	ldr	r3, [pc, #320]	; (b28 <at25dfx_chip_write_buffer+0x198>)
     9e8:	4798      	blx	r3

	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
     9ea:	2314      	movs	r3, #20
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	2202      	movs	r2, #2
     9f0:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
     9f2:	2314      	movs	r3, #20
     9f4:	18fb      	adds	r3, r7, r3
     9f6:	2204      	movs	r2, #4
     9f8:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     9fa:	2314      	movs	r3, #20
     9fc:	18fb      	adds	r3, r7, r3
     9fe:	68ba      	ldr	r2, [r7, #8]
     a00:	605a      	str	r2, [r3, #4]
	cmd.data.tx = (uint8_t *)data;
     a02:	2314      	movs	r3, #20
     a04:	18fb      	adds	r3, r7, r3
     a06:	687a      	ldr	r2, [r7, #4]
     a08:	609a      	str	r2, [r3, #8]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
     a0a:	68bb      	ldr	r3, [r7, #8]
     a0c:	b29b      	uxth	r3, r3
     a0e:	22ff      	movs	r2, #255	; 0xff
     a10:	4013      	ands	r3, r2
     a12:	b29a      	uxth	r2, r3
     a14:	2324      	movs	r3, #36	; 0x24
     a16:	18fb      	adds	r3, r7, r3
     a18:	2180      	movs	r1, #128	; 0x80
     a1a:	0049      	lsls	r1, r1, #1
     a1c:	1a8a      	subs	r2, r1, r2
     a1e:	801a      	strh	r2, [r3, #0]
	cmd.length = min(page_bytes, length);
     a20:	1cbb      	adds	r3, r7, #2
     a22:	2224      	movs	r2, #36	; 0x24
     a24:	18ba      	adds	r2, r7, r2
     a26:	8810      	ldrh	r0, [r2, #0]
     a28:	881b      	ldrh	r3, [r3, #0]
     a2a:	b299      	uxth	r1, r3
     a2c:	b282      	uxth	r2, r0
     a2e:	4291      	cmp	r1, r2
     a30:	d900      	bls.n	a34 <at25dfx_chip_write_buffer+0xa4>
     a32:	1c03      	adds	r3, r0, #0
     a34:	b29a      	uxth	r2, r3
     a36:	2314      	movs	r3, #20
     a38:	18fb      	adds	r3, r7, r3
     a3a:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     a3c:	2314      	movs	r3, #20
     a3e:	18fb      	adds	r3, r7, r3
     a40:	68f8      	ldr	r0, [r7, #12]
     a42:	466a      	mov	r2, sp
     a44:	68d9      	ldr	r1, [r3, #12]
     a46:	6011      	str	r1, [r2, #0]
     a48:	6819      	ldr	r1, [r3, #0]
     a4a:	685a      	ldr	r2, [r3, #4]
     a4c:	689b      	ldr	r3, [r3, #8]
     a4e:	4c37      	ldr	r4, [pc, #220]	; (b2c <at25dfx_chip_write_buffer+0x19c>)
     a50:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
     a52:	2327      	movs	r3, #39	; 0x27
     a54:	18fc      	adds	r4, r7, r3
     a56:	68fb      	ldr	r3, [r7, #12]
     a58:	0018      	movs	r0, r3
     a5a:	4b35      	ldr	r3, [pc, #212]	; (b30 <at25dfx_chip_write_buffer+0x1a0>)
     a5c:	4798      	blx	r3
     a5e:	0003      	movs	r3, r0
     a60:	7023      	strb	r3, [r4, #0]

	length -= cmd.length;
     a62:	2314      	movs	r3, #20
     a64:	18fb      	adds	r3, r7, r3
     a66:	899a      	ldrh	r2, [r3, #12]
     a68:	1cbb      	adds	r3, r7, #2
     a6a:	1cb9      	adds	r1, r7, #2
     a6c:	8809      	ldrh	r1, [r1, #0]
     a6e:	1a8a      	subs	r2, r1, r2
     a70:	801a      	strh	r2, [r3, #0]

	while (length && (status == STATUS_OK)) {
     a72:	e03f      	b.n	af4 <at25dfx_chip_write_buffer+0x164>
		_at25dfx_chip_enable_write(chip);
     a74:	68fb      	ldr	r3, [r7, #12]
     a76:	0018      	movs	r0, r3
     a78:	4b2b      	ldr	r3, [pc, #172]	; (b28 <at25dfx_chip_write_buffer+0x198>)
     a7a:	4798      	blx	r3

		cmd.address += cmd.length;
     a7c:	2314      	movs	r3, #20
     a7e:	18fb      	adds	r3, r7, r3
     a80:	685b      	ldr	r3, [r3, #4]
     a82:	2214      	movs	r2, #20
     a84:	18ba      	adds	r2, r7, r2
     a86:	8992      	ldrh	r2, [r2, #12]
     a88:	189a      	adds	r2, r3, r2
     a8a:	2314      	movs	r3, #20
     a8c:	18fb      	adds	r3, r7, r3
     a8e:	605a      	str	r2, [r3, #4]
		cmd.data.tx += cmd.length;
     a90:	2314      	movs	r3, #20
     a92:	18fb      	adds	r3, r7, r3
     a94:	689b      	ldr	r3, [r3, #8]
     a96:	2214      	movs	r2, #20
     a98:	18ba      	adds	r2, r7, r2
     a9a:	8992      	ldrh	r2, [r2, #12]
     a9c:	189a      	adds	r2, r3, r2
     a9e:	2314      	movs	r3, #20
     aa0:	18fb      	adds	r3, r7, r3
     aa2:	609a      	str	r2, [r3, #8]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     aa4:	1cbb      	adds	r3, r7, #2
     aa6:	881b      	ldrh	r3, [r3, #0]
     aa8:	b299      	uxth	r1, r3
     aaa:	2280      	movs	r2, #128	; 0x80
     aac:	0052      	lsls	r2, r2, #1
     aae:	4291      	cmp	r1, r2
     ab0:	d901      	bls.n	ab6 <at25dfx_chip_write_buffer+0x126>
     ab2:	2380      	movs	r3, #128	; 0x80
     ab4:	005b      	lsls	r3, r3, #1
     ab6:	b29a      	uxth	r2, r3
     ab8:	2314      	movs	r3, #20
     aba:	18fb      	adds	r3, r7, r3
     abc:	819a      	strh	r2, [r3, #12]

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
     abe:	2314      	movs	r3, #20
     ac0:	18fb      	adds	r3, r7, r3
     ac2:	68f8      	ldr	r0, [r7, #12]
     ac4:	466a      	mov	r2, sp
     ac6:	68d9      	ldr	r1, [r3, #12]
     ac8:	6011      	str	r1, [r2, #0]
     aca:	6819      	ldr	r1, [r3, #0]
     acc:	685a      	ldr	r2, [r3, #4]
     ace:	689b      	ldr	r3, [r3, #8]
     ad0:	4c16      	ldr	r4, [pc, #88]	; (b2c <at25dfx_chip_write_buffer+0x19c>)
     ad2:	47a0      	blx	r4

		status = _at25dfx_chip_get_nonbusy_status(chip);
     ad4:	2327      	movs	r3, #39	; 0x27
     ad6:	18fc      	adds	r4, r7, r3
     ad8:	68fb      	ldr	r3, [r7, #12]
     ada:	0018      	movs	r0, r3
     adc:	4b14      	ldr	r3, [pc, #80]	; (b30 <at25dfx_chip_write_buffer+0x1a0>)
     ade:	4798      	blx	r3
     ae0:	0003      	movs	r3, r0
     ae2:	7023      	strb	r3, [r4, #0]

		length -= cmd.length;
     ae4:	2314      	movs	r3, #20
     ae6:	18fb      	adds	r3, r7, r3
     ae8:	899a      	ldrh	r2, [r3, #12]
     aea:	1cbb      	adds	r3, r7, #2
     aec:	1cb9      	adds	r1, r7, #2
     aee:	8809      	ldrh	r1, [r1, #0]
     af0:	1a8a      	subs	r2, r1, r2
     af2:	801a      	strh	r2, [r3, #0]

	status = _at25dfx_chip_get_nonbusy_status(chip);

	length -= cmd.length;

	while (length && (status == STATUS_OK)) {
     af4:	1cbb      	adds	r3, r7, #2
     af6:	881b      	ldrh	r3, [r3, #0]
     af8:	2b00      	cmp	r3, #0
     afa:	d004      	beq.n	b06 <at25dfx_chip_write_buffer+0x176>
     afc:	2327      	movs	r3, #39	; 0x27
     afe:	18fb      	adds	r3, r7, r3
     b00:	781b      	ldrb	r3, [r3, #0]
     b02:	2b00      	cmp	r3, #0
     b04:	d0b6      	beq.n	a74 <at25dfx_chip_write_buffer+0xe4>
		status = _at25dfx_chip_get_nonbusy_status(chip);

		length -= cmd.length;
	}

	_at25dfx_spi_unlock(chip->spi);
     b06:	68fb      	ldr	r3, [r7, #12]
     b08:	681b      	ldr	r3, [r3, #0]
     b0a:	0018      	movs	r0, r3
     b0c:	4b09      	ldr	r3, [pc, #36]	; (b34 <at25dfx_chip_write_buffer+0x1a4>)
     b0e:	4798      	blx	r3

	return status;
     b10:	2327      	movs	r3, #39	; 0x27
     b12:	18fb      	adds	r3, r7, r3
     b14:	781b      	ldrb	r3, [r3, #0]
}
     b16:	0018      	movs	r0, r3
     b18:	46bd      	mov	sp, r7
     b1a:	b00b      	add	sp, #44	; 0x2c
     b1c:	bd90      	pop	{r4, r7, pc}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	00000411 	.word	0x00000411
     b24:	00000215 	.word	0x00000215
     b28:	000007d9 	.word	0x000007d9
     b2c:	000005b1 	.word	0x000005b1
     b30:	000006b5 	.word	0x000006b5
     b34:	0000025d 	.word	0x0000025d

00000b38 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
     b38:	b590      	push	{r4, r7, lr}
     b3a:	b08d      	sub	sp, #52	; 0x34
     b3c:	af02      	add	r7, sp, #8
     b3e:	60f8      	str	r0, [r7, #12]
     b40:	60b9      	str	r1, [r7, #8]
     b42:	1dfb      	adds	r3, r7, #7
     b44:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
     b46:	68fb      	ldr	r3, [r7, #12]
     b48:	791b      	ldrb	r3, [r3, #4]
     b4a:	0018      	movs	r0, r3
     b4c:	4b33      	ldr	r3, [pc, #204]	; (c1c <at25dfx_chip_erase_block+0xe4>)
     b4e:	4798      	blx	r3
     b50:	1e02      	subs	r2, r0, #0
     b52:	68bb      	ldr	r3, [r7, #8]
     b54:	429a      	cmp	r2, r3
     b56:	d801      	bhi.n	b5c <at25dfx_chip_erase_block+0x24>
		return STATUS_ERR_INVALID_ARG;
     b58:	2317      	movs	r3, #23
     b5a:	e05b      	b.n	c14 <at25dfx_chip_erase_block+0xdc>
	}

	status = _at25dfx_spi_lock(chip->spi);
     b5c:	68fb      	ldr	r3, [r7, #12]
     b5e:	681b      	ldr	r3, [r3, #0]
     b60:	2227      	movs	r2, #39	; 0x27
     b62:	18bc      	adds	r4, r7, r2
     b64:	0018      	movs	r0, r3
     b66:	4b2e      	ldr	r3, [pc, #184]	; (c20 <at25dfx_chip_erase_block+0xe8>)
     b68:	4798      	blx	r3
     b6a:	0003      	movs	r3, r0
     b6c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     b6e:	2327      	movs	r3, #39	; 0x27
     b70:	18fb      	adds	r3, r7, r3
     b72:	781b      	ldrb	r3, [r3, #0]
     b74:	2b05      	cmp	r3, #5
     b76:	d103      	bne.n	b80 <at25dfx_chip_erase_block+0x48>
		return status;
     b78:	2327      	movs	r3, #39	; 0x27
     b7a:	18fb      	adds	r3, r7, r3
     b7c:	781b      	ldrb	r3, [r3, #0]
     b7e:	e049      	b.n	c14 <at25dfx_chip_erase_block+0xdc>
	}

	_at25dfx_chip_enable_write(chip);
     b80:	68fb      	ldr	r3, [r7, #12]
     b82:	0018      	movs	r0, r3
     b84:	4b27      	ldr	r3, [pc, #156]	; (c24 <at25dfx_chip_erase_block+0xec>)
     b86:	4798      	blx	r3

	switch (block_size) {
     b88:	1dfb      	adds	r3, r7, #7
     b8a:	781b      	ldrb	r3, [r3, #0]
     b8c:	2b01      	cmp	r3, #1
     b8e:	d008      	beq.n	ba2 <at25dfx_chip_erase_block+0x6a>
     b90:	2b02      	cmp	r3, #2
     b92:	d00b      	beq.n	bac <at25dfx_chip_erase_block+0x74>
     b94:	2b00      	cmp	r3, #0
     b96:	d10e      	bne.n	bb6 <at25dfx_chip_erase_block+0x7e>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
     b98:	2314      	movs	r3, #20
     b9a:	18fb      	adds	r3, r7, r3
     b9c:	2220      	movs	r2, #32
     b9e:	701a      	strb	r2, [r3, #0]
		break;
     ba0:	e00d      	b.n	bbe <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
     ba2:	2314      	movs	r3, #20
     ba4:	18fb      	adds	r3, r7, r3
     ba6:	2252      	movs	r2, #82	; 0x52
     ba8:	701a      	strb	r2, [r3, #0]
		break;
     baa:	e008      	b.n	bbe <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
     bac:	2314      	movs	r3, #20
     bae:	18fb      	adds	r3, r7, r3
     bb0:	22d8      	movs	r2, #216	; 0xd8
     bb2:	701a      	strb	r2, [r3, #0]
		break;
     bb4:	e003      	b.n	bbe <at25dfx_chip_erase_block+0x86>

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
     bb6:	2314      	movs	r3, #20
     bb8:	18fb      	adds	r3, r7, r3
     bba:	2200      	movs	r2, #0
     bbc:	701a      	strb	r2, [r3, #0]
	}
	cmd.command_size = 4;
     bbe:	2314      	movs	r3, #20
     bc0:	18fb      	adds	r3, r7, r3
     bc2:	2204      	movs	r2, #4
     bc4:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     bc6:	2314      	movs	r3, #20
     bc8:	18fb      	adds	r3, r7, r3
     bca:	68ba      	ldr	r2, [r7, #8]
     bcc:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
     bce:	2314      	movs	r3, #20
     bd0:	18fb      	adds	r3, r7, r3
     bd2:	2200      	movs	r2, #0
     bd4:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
     bd6:	2314      	movs	r3, #20
     bd8:	18fb      	adds	r3, r7, r3
     bda:	2200      	movs	r2, #0
     bdc:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     bde:	2314      	movs	r3, #20
     be0:	18fb      	adds	r3, r7, r3
     be2:	68f8      	ldr	r0, [r7, #12]
     be4:	466a      	mov	r2, sp
     be6:	68d9      	ldr	r1, [r3, #12]
     be8:	6011      	str	r1, [r2, #0]
     bea:	6819      	ldr	r1, [r3, #0]
     bec:	685a      	ldr	r2, [r3, #4]
     bee:	689b      	ldr	r3, [r3, #8]
     bf0:	4c0d      	ldr	r4, [pc, #52]	; (c28 <at25dfx_chip_erase_block+0xf0>)
     bf2:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
     bf4:	2327      	movs	r3, #39	; 0x27
     bf6:	18fc      	adds	r4, r7, r3
     bf8:	68fb      	ldr	r3, [r7, #12]
     bfa:	0018      	movs	r0, r3
     bfc:	4b0b      	ldr	r3, [pc, #44]	; (c2c <at25dfx_chip_erase_block+0xf4>)
     bfe:	4798      	blx	r3
     c00:	0003      	movs	r3, r0
     c02:	7023      	strb	r3, [r4, #0]

	_at25dfx_spi_unlock(chip->spi);
     c04:	68fb      	ldr	r3, [r7, #12]
     c06:	681b      	ldr	r3, [r3, #0]
     c08:	0018      	movs	r0, r3
     c0a:	4b09      	ldr	r3, [pc, #36]	; (c30 <at25dfx_chip_erase_block+0xf8>)
     c0c:	4798      	blx	r3

	return status;
     c0e:	2327      	movs	r3, #39	; 0x27
     c10:	18fb      	adds	r3, r7, r3
     c12:	781b      	ldrb	r3, [r3, #0]
}
     c14:	0018      	movs	r0, r3
     c16:	46bd      	mov	sp, r7
     c18:	b00b      	add	sp, #44	; 0x2c
     c1a:	bd90      	pop	{r4, r7, pc}
     c1c:	00000411 	.word	0x00000411
     c20:	00000215 	.word	0x00000215
     c24:	000007d9 	.word	0x000007d9
     c28:	000005b1 	.word	0x000005b1
     c2c:	000006b5 	.word	0x000006b5
     c30:	0000025d 	.word	0x0000025d

00000c34 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
     c34:	b590      	push	{r4, r7, lr}
     c36:	b08b      	sub	sp, #44	; 0x2c
     c38:	af02      	add	r7, sp, #8
     c3a:	6078      	str	r0, [r7, #4]
     c3c:	000a      	movs	r2, r1
     c3e:	1cfb      	adds	r3, r7, #3
     c40:	701a      	strb	r2, [r3, #0]
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     c42:	687b      	ldr	r3, [r7, #4]
     c44:	681b      	ldr	r3, [r3, #0]
     c46:	221f      	movs	r2, #31
     c48:	18bc      	adds	r4, r7, r2
     c4a:	0018      	movs	r0, r3
     c4c:	4b22      	ldr	r3, [pc, #136]	; (cd8 <at25dfx_chip_set_global_sector_protect+0xa4>)
     c4e:	4798      	blx	r3
     c50:	0003      	movs	r3, r0
     c52:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     c54:	231f      	movs	r3, #31
     c56:	18fb      	adds	r3, r7, r3
     c58:	781b      	ldrb	r3, [r3, #0]
     c5a:	2b05      	cmp	r3, #5
     c5c:	d103      	bne.n	c66 <at25dfx_chip_set_global_sector_protect+0x32>
		return status;
     c5e:	231f      	movs	r3, #31
     c60:	18fb      	adds	r3, r7, r3
     c62:	781b      	ldrb	r3, [r3, #0]
     c64:	e033      	b.n	cce <at25dfx_chip_set_global_sector_protect+0x9a>
	}

	_at25dfx_chip_enable_write(chip);
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	0018      	movs	r0, r3
     c6a:	4b1c      	ldr	r3, [pc, #112]	; (cdc <at25dfx_chip_set_global_sector_protect+0xa8>)
     c6c:	4798      	blx	r3

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
     c6e:	1cfb      	adds	r3, r7, #3
     c70:	781b      	ldrb	r3, [r3, #0]
     c72:	2b00      	cmp	r3, #0
     c74:	d001      	beq.n	c7a <at25dfx_chip_set_global_sector_protect+0x46>
     c76:	223c      	movs	r2, #60	; 0x3c
     c78:	e000      	b.n	c7c <at25dfx_chip_set_global_sector_protect+0x48>
     c7a:	2200      	movs	r2, #0
     c7c:	230b      	movs	r3, #11
     c7e:	18fb      	adds	r3, r7, r3
     c80:	701a      	strb	r2, [r3, #0]
	cmd.opcode = AT25DFX_COMMAND_WRITE_STATUS;
     c82:	230c      	movs	r3, #12
     c84:	18fb      	adds	r3, r7, r3
     c86:	2201      	movs	r2, #1
     c88:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     c8a:	230c      	movs	r3, #12
     c8c:	18fb      	adds	r3, r7, r3
     c8e:	2201      	movs	r2, #1
     c90:	705a      	strb	r2, [r3, #1]
	cmd.length = 1;
     c92:	230c      	movs	r3, #12
     c94:	18fb      	adds	r3, r7, r3
     c96:	2201      	movs	r2, #1
     c98:	819a      	strh	r2, [r3, #12]
	cmd.data.tx = &temp_data;
     c9a:	230c      	movs	r3, #12
     c9c:	18fb      	adds	r3, r7, r3
     c9e:	220b      	movs	r2, #11
     ca0:	18ba      	adds	r2, r7, r2
     ca2:	609a      	str	r2, [r3, #8]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     ca4:	230c      	movs	r3, #12
     ca6:	18fb      	adds	r3, r7, r3
     ca8:	2200      	movs	r2, #0
     caa:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     cac:	230c      	movs	r3, #12
     cae:	18fb      	adds	r3, r7, r3
     cb0:	6878      	ldr	r0, [r7, #4]
     cb2:	466a      	mov	r2, sp
     cb4:	68d9      	ldr	r1, [r3, #12]
     cb6:	6011      	str	r1, [r2, #0]
     cb8:	6819      	ldr	r1, [r3, #0]
     cba:	685a      	ldr	r2, [r3, #4]
     cbc:	689b      	ldr	r3, [r3, #8]
     cbe:	4c08      	ldr	r4, [pc, #32]	; (ce0 <at25dfx_chip_set_global_sector_protect+0xac>)
     cc0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	681b      	ldr	r3, [r3, #0]
     cc6:	0018      	movs	r0, r3
     cc8:	4b06      	ldr	r3, [pc, #24]	; (ce4 <at25dfx_chip_set_global_sector_protect+0xb0>)
     cca:	4798      	blx	r3

	return STATUS_OK;
     ccc:	2300      	movs	r3, #0
}
     cce:	0018      	movs	r0, r3
     cd0:	46bd      	mov	sp, r7
     cd2:	b009      	add	sp, #36	; 0x24
     cd4:	bd90      	pop	{r4, r7, pc}
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	00000215 	.word	0x00000215
     cdc:	000007d9 	.word	0x000007d9
     ce0:	000005b1 	.word	0x000005b1
     ce4:	0000025d 	.word	0x0000025d

00000ce8 <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
     ce8:	b590      	push	{r4, r7, lr}
     cea:	b08d      	sub	sp, #52	; 0x34
     cec:	af02      	add	r7, sp, #8
     cee:	60f8      	str	r0, [r7, #12]
     cf0:	60b9      	str	r1, [r7, #8]
     cf2:	1dfb      	adds	r3, r7, #7
     cf4:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
     cf6:	68fb      	ldr	r3, [r7, #12]
     cf8:	791b      	ldrb	r3, [r3, #4]
     cfa:	0018      	movs	r0, r3
     cfc:	4b26      	ldr	r3, [pc, #152]	; (d98 <at25dfx_chip_set_sector_protect+0xb0>)
     cfe:	4798      	blx	r3
     d00:	1e02      	subs	r2, r0, #0
     d02:	68bb      	ldr	r3, [r7, #8]
     d04:	429a      	cmp	r2, r3
     d06:	d801      	bhi.n	d0c <at25dfx_chip_set_sector_protect+0x24>
		return STATUS_ERR_INVALID_ARG;
     d08:	2317      	movs	r3, #23
     d0a:	e040      	b.n	d8e <at25dfx_chip_set_sector_protect+0xa6>
	}

	status = _at25dfx_spi_lock(chip->spi);
     d0c:	68fb      	ldr	r3, [r7, #12]
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	2227      	movs	r2, #39	; 0x27
     d12:	18bc      	adds	r4, r7, r2
     d14:	0018      	movs	r0, r3
     d16:	4b21      	ldr	r3, [pc, #132]	; (d9c <at25dfx_chip_set_sector_protect+0xb4>)
     d18:	4798      	blx	r3
     d1a:	0003      	movs	r3, r0
     d1c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     d1e:	2327      	movs	r3, #39	; 0x27
     d20:	18fb      	adds	r3, r7, r3
     d22:	781b      	ldrb	r3, [r3, #0]
     d24:	2b05      	cmp	r3, #5
     d26:	d103      	bne.n	d30 <at25dfx_chip_set_sector_protect+0x48>
		return status;
     d28:	2327      	movs	r3, #39	; 0x27
     d2a:	18fb      	adds	r3, r7, r3
     d2c:	781b      	ldrb	r3, [r3, #0]
     d2e:	e02e      	b.n	d8e <at25dfx_chip_set_sector_protect+0xa6>
	}

	_at25dfx_chip_enable_write(chip);
     d30:	68fb      	ldr	r3, [r7, #12]
     d32:	0018      	movs	r0, r3
     d34:	4b1a      	ldr	r3, [pc, #104]	; (da0 <at25dfx_chip_set_sector_protect+0xb8>)
     d36:	4798      	blx	r3

	cmd.opcode = protect ?
     d38:	1dfb      	adds	r3, r7, #7
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	2b00      	cmp	r3, #0
     d3e:	d001      	beq.n	d44 <at25dfx_chip_set_sector_protect+0x5c>
     d40:	2236      	movs	r2, #54	; 0x36
     d42:	e000      	b.n	d46 <at25dfx_chip_set_sector_protect+0x5e>
     d44:	2239      	movs	r2, #57	; 0x39
     d46:	2314      	movs	r3, #20
     d48:	18fb      	adds	r3, r7, r3
     d4a:	701a      	strb	r2, [r3, #0]
			AT25DFX_COMMAND_PROTECT_SECTOR : AT25DFX_COMMAND_UNPROTECT_SECTOR;
	cmd.command_size = 4;
     d4c:	2314      	movs	r3, #20
     d4e:	18fb      	adds	r3, r7, r3
     d50:	2204      	movs	r2, #4
     d52:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     d54:	2314      	movs	r3, #20
     d56:	18fb      	adds	r3, r7, r3
     d58:	68ba      	ldr	r2, [r7, #8]
     d5a:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
     d5c:	2314      	movs	r3, #20
     d5e:	18fb      	adds	r3, r7, r3
     d60:	2200      	movs	r2, #0
     d62:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
     d64:	2314      	movs	r3, #20
     d66:	18fb      	adds	r3, r7, r3
     d68:	2200      	movs	r2, #0
     d6a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     d6c:	2314      	movs	r3, #20
     d6e:	18fb      	adds	r3, r7, r3
     d70:	68f8      	ldr	r0, [r7, #12]
     d72:	466a      	mov	r2, sp
     d74:	68d9      	ldr	r1, [r3, #12]
     d76:	6011      	str	r1, [r2, #0]
     d78:	6819      	ldr	r1, [r3, #0]
     d7a:	685a      	ldr	r2, [r3, #4]
     d7c:	689b      	ldr	r3, [r3, #8]
     d7e:	4c09      	ldr	r4, [pc, #36]	; (da4 <at25dfx_chip_set_sector_protect+0xbc>)
     d80:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     d82:	68fb      	ldr	r3, [r7, #12]
     d84:	681b      	ldr	r3, [r3, #0]
     d86:	0018      	movs	r0, r3
     d88:	4b07      	ldr	r3, [pc, #28]	; (da8 <at25dfx_chip_set_sector_protect+0xc0>)
     d8a:	4798      	blx	r3

	return STATUS_OK;
     d8c:	2300      	movs	r3, #0
}
     d8e:	0018      	movs	r0, r3
     d90:	46bd      	mov	sp, r7
     d92:	b00b      	add	sp, #44	; 0x2c
     d94:	bd90      	pop	{r4, r7, pc}
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	00000411 	.word	0x00000411
     d9c:	00000215 	.word	0x00000215
     da0:	000007d9 	.word	0x000007d9
     da4:	000005b1 	.word	0x000005b1
     da8:	0000025d 	.word	0x0000025d

00000dac <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
     dac:	b590      	push	{r4, r7, lr}
     dae:	b08b      	sub	sp, #44	; 0x2c
     db0:	af02      	add	r7, sp, #8
     db2:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	221f      	movs	r2, #31
     dba:	18bc      	adds	r4, r7, r2
     dbc:	0018      	movs	r0, r3
     dbe:	4b1b      	ldr	r3, [pc, #108]	; (e2c <at25dfx_chip_sleep+0x80>)
     dc0:	4798      	blx	r3
     dc2:	0003      	movs	r3, r0
     dc4:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     dc6:	231f      	movs	r3, #31
     dc8:	18fb      	adds	r3, r7, r3
     dca:	781b      	ldrb	r3, [r3, #0]
     dcc:	2b05      	cmp	r3, #5
     dce:	d103      	bne.n	dd8 <at25dfx_chip_sleep+0x2c>
		return status;
     dd0:	231f      	movs	r3, #31
     dd2:	18fb      	adds	r3, r7, r3
     dd4:	781b      	ldrb	r3, [r3, #0]
     dd6:	e024      	b.n	e22 <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
     dd8:	230c      	movs	r3, #12
     dda:	18fb      	adds	r3, r7, r3
     ddc:	22b9      	movs	r2, #185	; 0xb9
     dde:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     de0:	230c      	movs	r3, #12
     de2:	18fb      	adds	r3, r7, r3
     de4:	2201      	movs	r2, #1
     de6:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     de8:	230c      	movs	r3, #12
     dea:	18fb      	adds	r3, r7, r3
     dec:	2200      	movs	r2, #0
     dee:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     df0:	230c      	movs	r3, #12
     df2:	18fb      	adds	r3, r7, r3
     df4:	2200      	movs	r2, #0
     df6:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     df8:	230c      	movs	r3, #12
     dfa:	18fb      	adds	r3, r7, r3
     dfc:	2200      	movs	r2, #0
     dfe:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     e00:	230c      	movs	r3, #12
     e02:	18fb      	adds	r3, r7, r3
     e04:	6878      	ldr	r0, [r7, #4]
     e06:	466a      	mov	r2, sp
     e08:	68d9      	ldr	r1, [r3, #12]
     e0a:	6011      	str	r1, [r2, #0]
     e0c:	6819      	ldr	r1, [r3, #0]
     e0e:	685a      	ldr	r2, [r3, #4]
     e10:	689b      	ldr	r3, [r3, #8]
     e12:	4c07      	ldr	r4, [pc, #28]	; (e30 <at25dfx_chip_sleep+0x84>)
     e14:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     e16:	687b      	ldr	r3, [r7, #4]
     e18:	681b      	ldr	r3, [r3, #0]
     e1a:	0018      	movs	r0, r3
     e1c:	4b05      	ldr	r3, [pc, #20]	; (e34 <at25dfx_chip_sleep+0x88>)
     e1e:	4798      	blx	r3

	return STATUS_OK;
     e20:	2300      	movs	r3, #0
}
     e22:	0018      	movs	r0, r3
     e24:	46bd      	mov	sp, r7
     e26:	b009      	add	sp, #36	; 0x24
     e28:	bd90      	pop	{r4, r7, pc}
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	00000215 	.word	0x00000215
     e30:	000005b1 	.word	0x000005b1
     e34:	0000025d 	.word	0x0000025d

00000e38 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     e38:	b590      	push	{r4, r7, lr}
     e3a:	b08b      	sub	sp, #44	; 0x2c
     e3c:	af02      	add	r7, sp, #8
     e3e:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	681b      	ldr	r3, [r3, #0]
     e44:	221f      	movs	r2, #31
     e46:	18bc      	adds	r4, r7, r2
     e48:	0018      	movs	r0, r3
     e4a:	4b1b      	ldr	r3, [pc, #108]	; (eb8 <at25dfx_chip_wake+0x80>)
     e4c:	4798      	blx	r3
     e4e:	0003      	movs	r3, r0
     e50:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     e52:	231f      	movs	r3, #31
     e54:	18fb      	adds	r3, r7, r3
     e56:	781b      	ldrb	r3, [r3, #0]
     e58:	2b05      	cmp	r3, #5
     e5a:	d103      	bne.n	e64 <at25dfx_chip_wake+0x2c>
		return status;
     e5c:	231f      	movs	r3, #31
     e5e:	18fb      	adds	r3, r7, r3
     e60:	781b      	ldrb	r3, [r3, #0]
     e62:	e024      	b.n	eae <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
     e64:	230c      	movs	r3, #12
     e66:	18fb      	adds	r3, r7, r3
     e68:	22ab      	movs	r2, #171	; 0xab
     e6a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     e6c:	230c      	movs	r3, #12
     e6e:	18fb      	adds	r3, r7, r3
     e70:	2201      	movs	r2, #1
     e72:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     e74:	230c      	movs	r3, #12
     e76:	18fb      	adds	r3, r7, r3
     e78:	2200      	movs	r2, #0
     e7a:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     e7c:	230c      	movs	r3, #12
     e7e:	18fb      	adds	r3, r7, r3
     e80:	2200      	movs	r2, #0
     e82:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     e84:	230c      	movs	r3, #12
     e86:	18fb      	adds	r3, r7, r3
     e88:	2200      	movs	r2, #0
     e8a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     e8c:	230c      	movs	r3, #12
     e8e:	18fb      	adds	r3, r7, r3
     e90:	6878      	ldr	r0, [r7, #4]
     e92:	466a      	mov	r2, sp
     e94:	68d9      	ldr	r1, [r3, #12]
     e96:	6011      	str	r1, [r2, #0]
     e98:	6819      	ldr	r1, [r3, #0]
     e9a:	685a      	ldr	r2, [r3, #4]
     e9c:	689b      	ldr	r3, [r3, #8]
     e9e:	4c07      	ldr	r4, [pc, #28]	; (ebc <at25dfx_chip_wake+0x84>)
     ea0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	681b      	ldr	r3, [r3, #0]
     ea6:	0018      	movs	r0, r3
     ea8:	4b05      	ldr	r3, [pc, #20]	; (ec0 <at25dfx_chip_wake+0x88>)
     eaa:	4798      	blx	r3

	return STATUS_OK;
     eac:	2300      	movs	r3, #0
     eae:	0018      	movs	r0, r3
     eb0:	46bd      	mov	sp, r7
     eb2:	b009      	add	sp, #36	; 0x24
     eb4:	bd90      	pop	{r4, r7, pc}
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	00000215 	.word	0x00000215
     ebc:	000005b1 	.word	0x000005b1
     ec0:	0000025d 	.word	0x0000025d

00000ec4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     ec4:	b580      	push	{r7, lr}
     ec6:	b086      	sub	sp, #24
     ec8:	af00      	add	r7, sp, #0
     eca:	60f8      	str	r0, [r7, #12]
     ecc:	60b9      	str	r1, [r7, #8]
     ece:	607a      	str	r2, [r7, #4]
	int nChars = 0;
     ed0:	2300      	movs	r3, #0
     ed2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
     ed4:	68fb      	ldr	r3, [r7, #12]
     ed6:	2b00      	cmp	r3, #0
     ed8:	d012      	beq.n	f00 <_read+0x3c>
		return -1;
     eda:	2301      	movs	r3, #1
     edc:	425b      	negs	r3, r3
     ede:	e013      	b.n	f08 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
     ee0:	4b0b      	ldr	r3, [pc, #44]	; (f10 <_read+0x4c>)
     ee2:	681a      	ldr	r2, [r3, #0]
     ee4:	4b0b      	ldr	r3, [pc, #44]	; (f14 <_read+0x50>)
     ee6:	681b      	ldr	r3, [r3, #0]
     ee8:	68b9      	ldr	r1, [r7, #8]
     eea:	0018      	movs	r0, r3
     eec:	4790      	blx	r2
		ptr++;
     eee:	68bb      	ldr	r3, [r7, #8]
     ef0:	3301      	adds	r3, #1
     ef2:	60bb      	str	r3, [r7, #8]
		nChars++;
     ef4:	697b      	ldr	r3, [r7, #20]
     ef6:	3301      	adds	r3, #1
     ef8:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     efa:	687b      	ldr	r3, [r7, #4]
     efc:	3b01      	subs	r3, #1
     efe:	607b      	str	r3, [r7, #4]
     f00:	687b      	ldr	r3, [r7, #4]
     f02:	2b00      	cmp	r3, #0
     f04:	dcec      	bgt.n	ee0 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
     f06:	697b      	ldr	r3, [r7, #20]
}
     f08:	0018      	movs	r0, r3
     f0a:	46bd      	mov	sp, r7
     f0c:	b006      	add	sp, #24
     f0e:	bd80      	pop	{r7, pc}
     f10:	200000f4 	.word	0x200000f4
     f14:	200000fc 	.word	0x200000fc

00000f18 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     f18:	b580      	push	{r7, lr}
     f1a:	b086      	sub	sp, #24
     f1c:	af00      	add	r7, sp, #0
     f1e:	60f8      	str	r0, [r7, #12]
     f20:	60b9      	str	r1, [r7, #8]
     f22:	607a      	str	r2, [r7, #4]
	int nChars = 0;
     f24:	2300      	movs	r3, #0
     f26:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
     f28:	68fb      	ldr	r3, [r7, #12]
     f2a:	2b01      	cmp	r3, #1
     f2c:	d01d      	beq.n	f6a <_write+0x52>
     f2e:	68fb      	ldr	r3, [r7, #12]
     f30:	2b02      	cmp	r3, #2
     f32:	d01a      	beq.n	f6a <_write+0x52>
     f34:	68fb      	ldr	r3, [r7, #12]
     f36:	2b03      	cmp	r3, #3
     f38:	d017      	beq.n	f6a <_write+0x52>
		return -1;
     f3a:	2301      	movs	r3, #1
     f3c:	425b      	negs	r3, r3
     f3e:	e018      	b.n	f72 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
     f40:	4b0e      	ldr	r3, [pc, #56]	; (f7c <_write+0x64>)
     f42:	681a      	ldr	r2, [r3, #0]
     f44:	4b0e      	ldr	r3, [pc, #56]	; (f80 <_write+0x68>)
     f46:	6818      	ldr	r0, [r3, #0]
     f48:	68bb      	ldr	r3, [r7, #8]
     f4a:	1c59      	adds	r1, r3, #1
     f4c:	60b9      	str	r1, [r7, #8]
     f4e:	781b      	ldrb	r3, [r3, #0]
     f50:	0019      	movs	r1, r3
     f52:	4790      	blx	r2
     f54:	1e03      	subs	r3, r0, #0
     f56:	da02      	bge.n	f5e <_write+0x46>
			return -1;
     f58:	2301      	movs	r3, #1
     f5a:	425b      	negs	r3, r3
     f5c:	e009      	b.n	f72 <_write+0x5a>
		}
		++nChars;
     f5e:	697b      	ldr	r3, [r7, #20]
     f60:	3301      	adds	r3, #1
     f62:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     f64:	687b      	ldr	r3, [r7, #4]
     f66:	3b01      	subs	r3, #1
     f68:	607b      	str	r3, [r7, #4]
     f6a:	687b      	ldr	r3, [r7, #4]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d1e7      	bne.n	f40 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
     f70:	697b      	ldr	r3, [r7, #20]
}
     f72:	0018      	movs	r0, r3
     f74:	46bd      	mov	sp, r7
     f76:	b006      	add	sp, #24
     f78:	bd80      	pop	{r7, pc}
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	200000f8 	.word	0x200000f8
     f80:	200000fc 	.word	0x200000fc

00000f84 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     f84:	b580      	push	{r7, lr}
     f86:	b082      	sub	sp, #8
     f88:	af00      	add	r7, sp, #0
     f8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f8c:	687b      	ldr	r3, [r7, #4]
     f8e:	2280      	movs	r2, #128	; 0x80
     f90:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f92:	687b      	ldr	r3, [r7, #4]
     f94:	2200      	movs	r2, #0
     f96:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     f98:	687b      	ldr	r3, [r7, #4]
     f9a:	2201      	movs	r2, #1
     f9c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     f9e:	687b      	ldr	r3, [r7, #4]
     fa0:	2200      	movs	r2, #0
     fa2:	70da      	strb	r2, [r3, #3]
}
     fa4:	46c0      	nop			; (mov r8, r8)
     fa6:	46bd      	mov	sp, r7
     fa8:	b002      	add	sp, #8
     faa:	bd80      	pop	{r7, pc}

00000fac <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     fac:	b580      	push	{r7, lr}
     fae:	b082      	sub	sp, #8
     fb0:	af00      	add	r7, sp, #0
     fb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     fb4:	687b      	ldr	r3, [r7, #4]
     fb6:	2200      	movs	r2, #0
     fb8:	701a      	strb	r2, [r3, #0]
}
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	46bd      	mov	sp, r7
     fbe:	b002      	add	sp, #8
     fc0:	bd80      	pop	{r7, pc}
     fc2:	46c0      	nop			; (mov r8, r8)

00000fc4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     fc4:	b580      	push	{r7, lr}
     fc6:	b082      	sub	sp, #8
     fc8:	af00      	add	r7, sp, #0
     fca:	0002      	movs	r2, r0
     fcc:	6039      	str	r1, [r7, #0]
     fce:	1dfb      	adds	r3, r7, #7
     fd0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     fd2:	1dfb      	adds	r3, r7, #7
     fd4:	781b      	ldrb	r3, [r3, #0]
     fd6:	2b01      	cmp	r3, #1
     fd8:	d00a      	beq.n	ff0 <system_apb_clock_set_mask+0x2c>
     fda:	2b02      	cmp	r3, #2
     fdc:	d00f      	beq.n	ffe <system_apb_clock_set_mask+0x3a>
     fde:	2b00      	cmp	r3, #0
     fe0:	d114      	bne.n	100c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     fe2:	4b0e      	ldr	r3, [pc, #56]	; (101c <system_apb_clock_set_mask+0x58>)
     fe4:	4a0d      	ldr	r2, [pc, #52]	; (101c <system_apb_clock_set_mask+0x58>)
     fe6:	6991      	ldr	r1, [r2, #24]
     fe8:	683a      	ldr	r2, [r7, #0]
     fea:	430a      	orrs	r2, r1
     fec:	619a      	str	r2, [r3, #24]
			break;
     fee:	e00f      	b.n	1010 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     ff0:	4b0a      	ldr	r3, [pc, #40]	; (101c <system_apb_clock_set_mask+0x58>)
     ff2:	4a0a      	ldr	r2, [pc, #40]	; (101c <system_apb_clock_set_mask+0x58>)
     ff4:	69d1      	ldr	r1, [r2, #28]
     ff6:	683a      	ldr	r2, [r7, #0]
     ff8:	430a      	orrs	r2, r1
     ffa:	61da      	str	r2, [r3, #28]
			break;
     ffc:	e008      	b.n	1010 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     ffe:	4b07      	ldr	r3, [pc, #28]	; (101c <system_apb_clock_set_mask+0x58>)
    1000:	4a06      	ldr	r2, [pc, #24]	; (101c <system_apb_clock_set_mask+0x58>)
    1002:	6a11      	ldr	r1, [r2, #32]
    1004:	683a      	ldr	r2, [r7, #0]
    1006:	430a      	orrs	r2, r1
    1008:	621a      	str	r2, [r3, #32]
			break;
    100a:	e001      	b.n	1010 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    100c:	2317      	movs	r3, #23
    100e:	e000      	b.n	1012 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1010:	2300      	movs	r3, #0
}
    1012:	0018      	movs	r0, r3
    1014:	46bd      	mov	sp, r7
    1016:	b002      	add	sp, #8
    1018:	bd80      	pop	{r7, pc}
    101a:	46c0      	nop			; (mov r8, r8)
    101c:	40000400 	.word	0x40000400

00001020 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1020:	b580      	push	{r7, lr}
    1022:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1024:	4b05      	ldr	r3, [pc, #20]	; (103c <system_is_debugger_present+0x1c>)
    1026:	789b      	ldrb	r3, [r3, #2]
    1028:	b2db      	uxtb	r3, r3
    102a:	001a      	movs	r2, r3
    102c:	2302      	movs	r3, #2
    102e:	4013      	ands	r3, r2
    1030:	1e5a      	subs	r2, r3, #1
    1032:	4193      	sbcs	r3, r2
    1034:	b2db      	uxtb	r3, r3
}
    1036:	0018      	movs	r0, r3
    1038:	46bd      	mov	sp, r7
    103a:	bd80      	pop	{r7, pc}
    103c:	41002000 	.word	0x41002000

00001040 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    1040:	b580      	push	{r7, lr}
    1042:	b084      	sub	sp, #16
    1044:	af00      	add	r7, sp, #0
    1046:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1048:	687b      	ldr	r3, [r7, #4]
    104a:	681b      	ldr	r3, [r3, #0]
    104c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    104e:	68fb      	ldr	r3, [r7, #12]
    1050:	7e1b      	ldrb	r3, [r3, #24]
    1052:	b2db      	uxtb	r3, r3
    1054:	001a      	movs	r2, r3
    1056:	2302      	movs	r3, #2
    1058:	4013      	ands	r3, r2
    105a:	1e5a      	subs	r2, r3, #1
    105c:	4193      	sbcs	r3, r2
    105e:	b2db      	uxtb	r3, r3
}
    1060:	0018      	movs	r0, r3
    1062:	46bd      	mov	sp, r7
    1064:	b004      	add	sp, #16
    1066:	bd80      	pop	{r7, pc}

00001068 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    1068:	b580      	push	{r7, lr}
    106a:	b084      	sub	sp, #16
    106c:	af00      	add	r7, sp, #0
    106e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1070:	687b      	ldr	r3, [r7, #4]
    1072:	681b      	ldr	r3, [r3, #0]
    1074:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1076:	68fb      	ldr	r3, [r7, #12]
    1078:	7e1b      	ldrb	r3, [r3, #24]
    107a:	b2db      	uxtb	r3, r3
    107c:	001a      	movs	r2, r3
    107e:	2301      	movs	r3, #1
    1080:	4013      	ands	r3, r2
    1082:	1e5a      	subs	r2, r3, #1
    1084:	4193      	sbcs	r3, r2
    1086:	b2db      	uxtb	r3, r3
}
    1088:	0018      	movs	r0, r3
    108a:	46bd      	mov	sp, r7
    108c:	b004      	add	sp, #16
    108e:	bd80      	pop	{r7, pc}

00001090 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    1090:	b580      	push	{r7, lr}
    1092:	b084      	sub	sp, #16
    1094:	af00      	add	r7, sp, #0
    1096:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1098:	687b      	ldr	r3, [r7, #4]
    109a:	681b      	ldr	r3, [r3, #0]
    109c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    109e:	68fb      	ldr	r3, [r7, #12]
    10a0:	7e1b      	ldrb	r3, [r3, #24]
    10a2:	b2db      	uxtb	r3, r3
    10a4:	001a      	movs	r2, r3
    10a6:	2304      	movs	r3, #4
    10a8:	4013      	ands	r3, r2
    10aa:	1e5a      	subs	r2, r3, #1
    10ac:	4193      	sbcs	r3, r2
    10ae:	b2db      	uxtb	r3, r3
}
    10b0:	0018      	movs	r0, r3
    10b2:	46bd      	mov	sp, r7
    10b4:	b004      	add	sp, #16
    10b6:	bd80      	pop	{r7, pc}

000010b8 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    10b8:	b580      	push	{r7, lr}
    10ba:	b084      	sub	sp, #16
    10bc:	af00      	add	r7, sp, #0
    10be:	6078      	str	r0, [r7, #4]
    10c0:	000a      	movs	r2, r1
    10c2:	1cbb      	adds	r3, r7, #2
    10c4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    10c6:	687b      	ldr	r3, [r7, #4]
    10c8:	681b      	ldr	r3, [r3, #0]
    10ca:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    10cc:	687b      	ldr	r3, [r7, #4]
    10ce:	0018      	movs	r0, r3
    10d0:	4b0a      	ldr	r3, [pc, #40]	; (10fc <spi_write+0x44>)
    10d2:	4798      	blx	r3
    10d4:	0003      	movs	r3, r0
    10d6:	001a      	movs	r2, r3
    10d8:	2301      	movs	r3, #1
    10da:	4053      	eors	r3, r2
    10dc:	b2db      	uxtb	r3, r3
    10de:	2b00      	cmp	r3, #0
    10e0:	d001      	beq.n	10e6 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    10e2:	2305      	movs	r3, #5
    10e4:	e006      	b.n	10f4 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    10e6:	1cbb      	adds	r3, r7, #2
    10e8:	881b      	ldrh	r3, [r3, #0]
    10ea:	05db      	lsls	r3, r3, #23
    10ec:	0dda      	lsrs	r2, r3, #23
    10ee:	68fb      	ldr	r3, [r7, #12]
    10f0:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    10f2:	2300      	movs	r3, #0
}
    10f4:	0018      	movs	r0, r3
    10f6:	46bd      	mov	sp, r7
    10f8:	b004      	add	sp, #16
    10fa:	bd80      	pop	{r7, pc}
    10fc:	00001069 	.word	0x00001069

00001100 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    1100:	b580      	push	{r7, lr}
    1102:	b084      	sub	sp, #16
    1104:	af00      	add	r7, sp, #0
    1106:	6078      	str	r0, [r7, #4]
    1108:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    110a:	687b      	ldr	r3, [r7, #4]
    110c:	681b      	ldr	r3, [r3, #0]
    110e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    1110:	687b      	ldr	r3, [r7, #4]
    1112:	0018      	movs	r0, r3
    1114:	4b1b      	ldr	r3, [pc, #108]	; (1184 <spi_read+0x84>)
    1116:	4798      	blx	r3
    1118:	0003      	movs	r3, r0
    111a:	001a      	movs	r2, r3
    111c:	2301      	movs	r3, #1
    111e:	4053      	eors	r3, r2
    1120:	b2db      	uxtb	r3, r3
    1122:	2b00      	cmp	r3, #0
    1124:	d001      	beq.n	112a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    1126:	2310      	movs	r3, #16
    1128:	e027      	b.n	117a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    112a:	230f      	movs	r3, #15
    112c:	18fb      	adds	r3, r7, r3
    112e:	2200      	movs	r2, #0
    1130:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1132:	68bb      	ldr	r3, [r7, #8]
    1134:	8b5b      	ldrh	r3, [r3, #26]
    1136:	b29b      	uxth	r3, r3
    1138:	001a      	movs	r2, r3
    113a:	2304      	movs	r3, #4
    113c:	4013      	ands	r3, r2
    113e:	d006      	beq.n	114e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    1140:	230f      	movs	r3, #15
    1142:	18fb      	adds	r3, r7, r3
    1144:	221e      	movs	r2, #30
    1146:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1148:	68bb      	ldr	r3, [r7, #8]
    114a:	2204      	movs	r2, #4
    114c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    114e:	687b      	ldr	r3, [r7, #4]
    1150:	799b      	ldrb	r3, [r3, #6]
    1152:	2b01      	cmp	r3, #1
    1154:	d108      	bne.n	1168 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1156:	68bb      	ldr	r3, [r7, #8]
    1158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    115a:	b29b      	uxth	r3, r3
    115c:	05db      	lsls	r3, r3, #23
    115e:	0ddb      	lsrs	r3, r3, #23
    1160:	b29a      	uxth	r2, r3
    1162:	683b      	ldr	r3, [r7, #0]
    1164:	801a      	strh	r2, [r3, #0]
    1166:	e005      	b.n	1174 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1168:	68bb      	ldr	r3, [r7, #8]
    116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    116c:	b2db      	uxtb	r3, r3
    116e:	b29a      	uxth	r2, r3
    1170:	683b      	ldr	r3, [r7, #0]
    1172:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    1174:	230f      	movs	r3, #15
    1176:	18fb      	adds	r3, r7, r3
    1178:	781b      	ldrb	r3, [r3, #0]
}
    117a:	0018      	movs	r0, r3
    117c:	46bd      	mov	sp, r7
    117e:	b004      	add	sp, #16
    1180:	bd80      	pop	{r7, pc}
    1182:	46c0      	nop			; (mov r8, r8)
    1184:	00001091 	.word	0x00001091

00001188 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
    1188:	b580      	push	{r7, lr}
    118a:	b084      	sub	sp, #16
    118c:	af00      	add	r7, sp, #0
    118e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1190:	687b      	ldr	r3, [r7, #4]
    1192:	681b      	ldr	r3, [r3, #0]
    1194:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1196:	68fb      	ldr	r3, [r7, #12]
    1198:	2202      	movs	r2, #2
    119a:	761a      	strb	r2, [r3, #24]
}
    119c:	46c0      	nop			; (mov r8, r8)
    119e:	46bd      	mov	sp, r7
    11a0:	b004      	add	sp, #16
    11a2:	bd80      	pop	{r7, pc}

000011a4 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    11a4:	b590      	push	{r4, r7, lr}
    11a6:	b093      	sub	sp, #76	; 0x4c
    11a8:	af00      	add	r7, sp, #0
    11aa:	6078      	str	r0, [r7, #4]
    11ac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    11ae:	687b      	ldr	r3, [r7, #4]
    11b0:	681b      	ldr	r3, [r3, #0]
    11b2:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    11ba:	231c      	movs	r3, #28
    11bc:	18fb      	adds	r3, r7, r3
    11be:	0018      	movs	r0, r3
    11c0:	4b85      	ldr	r3, [pc, #532]	; (13d8 <_spi_set_config+0x234>)
    11c2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11c4:	231c      	movs	r3, #28
    11c6:	18fb      	adds	r3, r7, r3
    11c8:	2200      	movs	r2, #0
    11ca:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    11cc:	683b      	ldr	r3, [r7, #0]
    11ce:	781b      	ldrb	r3, [r3, #0]
    11d0:	2b00      	cmp	r3, #0
    11d2:	d103      	bne.n	11dc <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    11d4:	231c      	movs	r3, #28
    11d6:	18fb      	adds	r3, r7, r3
    11d8:	2200      	movs	r2, #0
    11da:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    11dc:	683b      	ldr	r3, [r7, #0]
    11de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    11e0:	230c      	movs	r3, #12
    11e2:	18fb      	adds	r3, r7, r3
    11e4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    11e6:	683b      	ldr	r3, [r7, #0]
    11e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    11ea:	230c      	movs	r3, #12
    11ec:	18fb      	adds	r3, r7, r3
    11ee:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    11f0:	683b      	ldr	r3, [r7, #0]
    11f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    11f4:	230c      	movs	r3, #12
    11f6:	18fb      	adds	r3, r7, r3
    11f8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    11fa:	683b      	ldr	r3, [r7, #0]
    11fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    11fe:	230c      	movs	r3, #12
    1200:	18fb      	adds	r3, r7, r3
    1202:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1204:	2347      	movs	r3, #71	; 0x47
    1206:	18fb      	adds	r3, r7, r3
    1208:	2200      	movs	r2, #0
    120a:	701a      	strb	r2, [r3, #0]
    120c:	e02c      	b.n	1268 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    120e:	2347      	movs	r3, #71	; 0x47
    1210:	18fb      	adds	r3, r7, r3
    1212:	781a      	ldrb	r2, [r3, #0]
    1214:	230c      	movs	r3, #12
    1216:	18fb      	adds	r3, r7, r3
    1218:	0092      	lsls	r2, r2, #2
    121a:	58d3      	ldr	r3, [r2, r3]
    121c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    121e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1220:	2b00      	cmp	r3, #0
    1222:	d109      	bne.n	1238 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1224:	2347      	movs	r3, #71	; 0x47
    1226:	18fb      	adds	r3, r7, r3
    1228:	781a      	ldrb	r2, [r3, #0]
    122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    122c:	0011      	movs	r1, r2
    122e:	0018      	movs	r0, r3
    1230:	4b6a      	ldr	r3, [pc, #424]	; (13dc <_spi_set_config+0x238>)
    1232:	4798      	blx	r3
    1234:	0003      	movs	r3, r0
    1236:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    123a:	3301      	adds	r3, #1
    123c:	d00d      	beq.n	125a <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    123e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1240:	b2da      	uxtb	r2, r3
    1242:	231c      	movs	r3, #28
    1244:	18fb      	adds	r3, r7, r3
    1246:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    124a:	0c1b      	lsrs	r3, r3, #16
    124c:	b2db      	uxtb	r3, r3
    124e:	221c      	movs	r2, #28
    1250:	18ba      	adds	r2, r7, r2
    1252:	0011      	movs	r1, r2
    1254:	0018      	movs	r0, r3
    1256:	4b62      	ldr	r3, [pc, #392]	; (13e0 <_spi_set_config+0x23c>)
    1258:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    125a:	2347      	movs	r3, #71	; 0x47
    125c:	18fb      	adds	r3, r7, r3
    125e:	781a      	ldrb	r2, [r3, #0]
    1260:	2347      	movs	r3, #71	; 0x47
    1262:	18fb      	adds	r3, r7, r3
    1264:	3201      	adds	r2, #1
    1266:	701a      	strb	r2, [r3, #0]
    1268:	2347      	movs	r3, #71	; 0x47
    126a:	18fb      	adds	r3, r7, r3
    126c:	781b      	ldrb	r3, [r3, #0]
    126e:	2b03      	cmp	r3, #3
    1270:	d9cd      	bls.n	120e <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    1272:	683b      	ldr	r3, [r7, #0]
    1274:	781a      	ldrb	r2, [r3, #0]
    1276:	687b      	ldr	r3, [r7, #4]
    1278:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    127a:	683b      	ldr	r3, [r7, #0]
    127c:	7c1a      	ldrb	r2, [r3, #16]
    127e:	687b      	ldr	r3, [r7, #4]
    1280:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    1282:	683b      	ldr	r3, [r7, #0]
    1284:	7c9a      	ldrb	r2, [r3, #18]
    1286:	687b      	ldr	r3, [r7, #4]
    1288:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    128a:	683b      	ldr	r3, [r7, #0]
    128c:	7d1a      	ldrb	r2, [r3, #20]
    128e:	687b      	ldr	r3, [r7, #4]
    1290:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1292:	230a      	movs	r3, #10
    1294:	18fb      	adds	r3, r7, r3
    1296:	2200      	movs	r2, #0
    1298:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    129a:	2300      	movs	r3, #0
    129c:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    129e:	2300      	movs	r3, #0
    12a0:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    12a2:	683b      	ldr	r3, [r7, #0]
    12a4:	781b      	ldrb	r3, [r3, #0]
    12a6:	2b01      	cmp	r3, #1
    12a8:	d129      	bne.n	12fe <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12aa:	687b      	ldr	r3, [r7, #4]
    12ac:	681b      	ldr	r3, [r3, #0]
    12ae:	0018      	movs	r0, r3
    12b0:	4b4c      	ldr	r3, [pc, #304]	; (13e4 <_spi_set_config+0x240>)
    12b2:	4798      	blx	r3
    12b4:	0003      	movs	r3, r0
    12b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    12b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    12ba:	3314      	adds	r3, #20
    12bc:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    12be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    12c0:	b2db      	uxtb	r3, r3
    12c2:	0018      	movs	r0, r3
    12c4:	4b48      	ldr	r3, [pc, #288]	; (13e8 <_spi_set_config+0x244>)
    12c6:	4798      	blx	r3
    12c8:	0003      	movs	r3, r0
    12ca:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    12cc:	683b      	ldr	r3, [r7, #0]
    12ce:	699b      	ldr	r3, [r3, #24]
    12d0:	2223      	movs	r2, #35	; 0x23
    12d2:	18bc      	adds	r4, r7, r2
    12d4:	220a      	movs	r2, #10
    12d6:	18ba      	adds	r2, r7, r2
    12d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    12da:	0018      	movs	r0, r3
    12dc:	4b43      	ldr	r3, [pc, #268]	; (13ec <_spi_set_config+0x248>)
    12de:	4798      	blx	r3
    12e0:	0003      	movs	r3, r0
    12e2:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    12e4:	2323      	movs	r3, #35	; 0x23
    12e6:	18fb      	adds	r3, r7, r3
    12e8:	781b      	ldrb	r3, [r3, #0]
    12ea:	2b00      	cmp	r3, #0
    12ec:	d001      	beq.n	12f2 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    12ee:	2317      	movs	r3, #23
    12f0:	e06d      	b.n	13ce <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    12f2:	230a      	movs	r3, #10
    12f4:	18fb      	adds	r3, r7, r3
    12f6:	881b      	ldrh	r3, [r3, #0]
    12f8:	b2da      	uxtb	r2, r3
    12fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12fc:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    12fe:	683b      	ldr	r3, [r7, #0]
    1300:	781b      	ldrb	r3, [r3, #0]
    1302:	2b00      	cmp	r3, #0
    1304:	d11a      	bne.n	133c <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    1306:	683b      	ldr	r3, [r7, #0]
    1308:	699b      	ldr	r3, [r3, #24]
    130a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    130c:	683b      	ldr	r3, [r7, #0]
    130e:	8b9b      	ldrh	r3, [r3, #28]
    1310:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    1312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1316:	683a      	ldr	r2, [r7, #0]
    1318:	7f92      	ldrb	r2, [r2, #30]
    131a:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    131c:	683a      	ldr	r2, [r7, #0]
    131e:	7fd2      	ldrb	r2, [r2, #31]
    1320:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    1322:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    1324:	431a      	orrs	r2, r3
    1326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1328:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    132a:	683b      	ldr	r3, [r7, #0]
    132c:	2220      	movs	r2, #32
    132e:	5c9b      	ldrb	r3, [r3, r2]
    1330:	2b00      	cmp	r3, #0
    1332:	d003      	beq.n	133c <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1336:	2240      	movs	r2, #64	; 0x40
    1338:	4313      	orrs	r3, r2
    133a:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    133c:	683b      	ldr	r3, [r7, #0]
    133e:	685b      	ldr	r3, [r3, #4]
    1340:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1342:	4313      	orrs	r3, r2
    1344:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    1346:	683b      	ldr	r3, [r7, #0]
    1348:	689b      	ldr	r3, [r3, #8]
    134a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    134c:	4313      	orrs	r3, r2
    134e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1350:	683b      	ldr	r3, [r7, #0]
    1352:	68db      	ldr	r3, [r3, #12]
    1354:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1356:	4313      	orrs	r3, r2
    1358:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    135a:	683b      	ldr	r3, [r7, #0]
    135c:	7c1b      	ldrb	r3, [r3, #16]
    135e:	001a      	movs	r2, r3
    1360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1362:	4313      	orrs	r3, r2
    1364:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1366:	683b      	ldr	r3, [r7, #0]
    1368:	7c5b      	ldrb	r3, [r3, #17]
    136a:	2b00      	cmp	r3, #0
    136c:	d103      	bne.n	1376 <_spi_set_config+0x1d2>
    136e:	4b20      	ldr	r3, [pc, #128]	; (13f0 <_spi_set_config+0x24c>)
    1370:	4798      	blx	r3
    1372:	1e03      	subs	r3, r0, #0
    1374:	d003      	beq.n	137e <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1378:	2280      	movs	r2, #128	; 0x80
    137a:	4313      	orrs	r3, r2
    137c:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    137e:	683b      	ldr	r3, [r7, #0]
    1380:	7c9b      	ldrb	r3, [r3, #18]
    1382:	2b00      	cmp	r3, #0
    1384:	d004      	beq.n	1390 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1388:	2280      	movs	r2, #128	; 0x80
    138a:	0292      	lsls	r2, r2, #10
    138c:	4313      	orrs	r3, r2
    138e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1390:	683b      	ldr	r3, [r7, #0]
    1392:	7cdb      	ldrb	r3, [r3, #19]
    1394:	2b00      	cmp	r3, #0
    1396:	d004      	beq.n	13a2 <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    139a:	2280      	movs	r2, #128	; 0x80
    139c:	0092      	lsls	r2, r2, #2
    139e:	4313      	orrs	r3, r2
    13a0:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    13a2:	683b      	ldr	r3, [r7, #0]
    13a4:	7d1b      	ldrb	r3, [r3, #20]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d004      	beq.n	13b4 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    13aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13ac:	2280      	movs	r2, #128	; 0x80
    13ae:	0192      	lsls	r2, r2, #6
    13b0:	4313      	orrs	r3, r2
    13b2:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    13b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13b6:	681a      	ldr	r2, [r3, #0]
    13b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13ba:	431a      	orrs	r2, r3
    13bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13be:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    13c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13c2:	685a      	ldr	r2, [r3, #4]
    13c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    13c6:	431a      	orrs	r2, r3
    13c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    13ca:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    13cc:	2300      	movs	r3, #0
}
    13ce:	0018      	movs	r0, r3
    13d0:	46bd      	mov	sp, r7
    13d2:	b013      	add	sp, #76	; 0x4c
    13d4:	bd90      	pop	{r4, r7, pc}
    13d6:	46c0      	nop			; (mov r8, r8)
    13d8:	00000f85 	.word	0x00000f85
    13dc:	00002359 	.word	0x00002359
    13e0:	000041d5 	.word	0x000041d5
    13e4:	00002515 	.word	0x00002515
    13e8:	0000400d 	.word	0x0000400d
    13ec:	00002091 	.word	0x00002091
    13f0:	00001021 	.word	0x00001021

000013f4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    13f4:	b590      	push	{r4, r7, lr}
    13f6:	b08b      	sub	sp, #44	; 0x2c
    13f8:	af00      	add	r7, sp, #0
    13fa:	60f8      	str	r0, [r7, #12]
    13fc:	60b9      	str	r1, [r7, #8]
    13fe:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1400:	68fb      	ldr	r3, [r7, #12]
    1402:	68ba      	ldr	r2, [r7, #8]
    1404:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    1406:	68fb      	ldr	r3, [r7, #12]
    1408:	681b      	ldr	r3, [r3, #0]
    140a:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    140c:	6a3b      	ldr	r3, [r7, #32]
    140e:	681b      	ldr	r3, [r3, #0]
    1410:	2202      	movs	r2, #2
    1412:	4013      	ands	r3, r2
    1414:	d001      	beq.n	141a <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1416:	231c      	movs	r3, #28
    1418:	e0a6      	b.n	1568 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    141a:	6a3b      	ldr	r3, [r7, #32]
    141c:	681b      	ldr	r3, [r3, #0]
    141e:	2201      	movs	r2, #1
    1420:	4013      	ands	r3, r2
    1422:	d001      	beq.n	1428 <spi_init+0x34>
		return STATUS_BUSY;
    1424:	2305      	movs	r3, #5
    1426:	e09f      	b.n	1568 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1428:	68fb      	ldr	r3, [r7, #12]
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	0018      	movs	r0, r3
    142e:	4b50      	ldr	r3, [pc, #320]	; (1570 <spi_init+0x17c>)
    1430:	4798      	blx	r3
    1432:	0003      	movs	r3, r0
    1434:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1436:	69fb      	ldr	r3, [r7, #28]
    1438:	3302      	adds	r3, #2
    143a:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    143c:	69fb      	ldr	r3, [r7, #28]
    143e:	3314      	adds	r3, #20
    1440:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1442:	2201      	movs	r2, #1
    1444:	69bb      	ldr	r3, [r7, #24]
    1446:	409a      	lsls	r2, r3
    1448:	0013      	movs	r3, r2
    144a:	0019      	movs	r1, r3
    144c:	2002      	movs	r0, #2
    144e:	4b49      	ldr	r3, [pc, #292]	; (1574 <spi_init+0x180>)
    1450:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1452:	2310      	movs	r3, #16
    1454:	18fb      	adds	r3, r7, r3
    1456:	0018      	movs	r0, r3
    1458:	4b47      	ldr	r3, [pc, #284]	; (1578 <spi_init+0x184>)
    145a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    145c:	687b      	ldr	r3, [r7, #4]
    145e:	2224      	movs	r2, #36	; 0x24
    1460:	5c9a      	ldrb	r2, [r3, r2]
    1462:	2310      	movs	r3, #16
    1464:	18fb      	adds	r3, r7, r3
    1466:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1468:	697b      	ldr	r3, [r7, #20]
    146a:	b2db      	uxtb	r3, r3
    146c:	2210      	movs	r2, #16
    146e:	18ba      	adds	r2, r7, r2
    1470:	0011      	movs	r1, r2
    1472:	0018      	movs	r0, r3
    1474:	4b41      	ldr	r3, [pc, #260]	; (157c <spi_init+0x188>)
    1476:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1478:	697b      	ldr	r3, [r7, #20]
    147a:	b2db      	uxtb	r3, r3
    147c:	0018      	movs	r0, r3
    147e:	4b40      	ldr	r3, [pc, #256]	; (1580 <spi_init+0x18c>)
    1480:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1482:	687b      	ldr	r3, [r7, #4]
    1484:	2224      	movs	r2, #36	; 0x24
    1486:	5c9b      	ldrb	r3, [r3, r2]
    1488:	2100      	movs	r1, #0
    148a:	0018      	movs	r0, r3
    148c:	4b3d      	ldr	r3, [pc, #244]	; (1584 <spi_init+0x190>)
    148e:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1490:	687b      	ldr	r3, [r7, #4]
    1492:	781b      	ldrb	r3, [r3, #0]
    1494:	2b01      	cmp	r3, #1
    1496:	d105      	bne.n	14a4 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1498:	6a3b      	ldr	r3, [r7, #32]
    149a:	681b      	ldr	r3, [r3, #0]
    149c:	220c      	movs	r2, #12
    149e:	431a      	orrs	r2, r3
    14a0:	6a3b      	ldr	r3, [r7, #32]
    14a2:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    14a4:	687b      	ldr	r3, [r7, #4]
    14a6:	781b      	ldrb	r3, [r3, #0]
    14a8:	2b00      	cmp	r3, #0
    14aa:	d105      	bne.n	14b8 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    14ac:	6a3b      	ldr	r3, [r7, #32]
    14ae:	681b      	ldr	r3, [r3, #0]
    14b0:	2208      	movs	r2, #8
    14b2:	431a      	orrs	r2, r3
    14b4:	6a3b      	ldr	r3, [r7, #32]
    14b6:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    14b8:	2327      	movs	r3, #39	; 0x27
    14ba:	18fb      	adds	r3, r7, r3
    14bc:	2200      	movs	r2, #0
    14be:	701a      	strb	r2, [r3, #0]
    14c0:	e010      	b.n	14e4 <spi_init+0xf0>
		module->callback[i]        = NULL;
    14c2:	2327      	movs	r3, #39	; 0x27
    14c4:	18fb      	adds	r3, r7, r3
    14c6:	781b      	ldrb	r3, [r3, #0]
    14c8:	68fa      	ldr	r2, [r7, #12]
    14ca:	3302      	adds	r3, #2
    14cc:	009b      	lsls	r3, r3, #2
    14ce:	18d3      	adds	r3, r2, r3
    14d0:	3304      	adds	r3, #4
    14d2:	2200      	movs	r2, #0
    14d4:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    14d6:	2327      	movs	r3, #39	; 0x27
    14d8:	18fb      	adds	r3, r7, r3
    14da:	781a      	ldrb	r2, [r3, #0]
    14dc:	2327      	movs	r3, #39	; 0x27
    14de:	18fb      	adds	r3, r7, r3
    14e0:	3201      	adds	r2, #1
    14e2:	701a      	strb	r2, [r3, #0]
    14e4:	2327      	movs	r3, #39	; 0x27
    14e6:	18fb      	adds	r3, r7, r3
    14e8:	781b      	ldrb	r3, [r3, #0]
    14ea:	2b06      	cmp	r3, #6
    14ec:	d9e9      	bls.n	14c2 <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    14ee:	68fb      	ldr	r3, [r7, #12]
    14f0:	2200      	movs	r2, #0
    14f2:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    14f4:	68fb      	ldr	r3, [r7, #12]
    14f6:	2200      	movs	r2, #0
    14f8:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    14fa:	68fb      	ldr	r3, [r7, #12]
    14fc:	2200      	movs	r2, #0
    14fe:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1500:	68fb      	ldr	r3, [r7, #12]
    1502:	2200      	movs	r2, #0
    1504:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    1506:	68fb      	ldr	r3, [r7, #12]
    1508:	2236      	movs	r2, #54	; 0x36
    150a:	2100      	movs	r1, #0
    150c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    150e:	68fb      	ldr	r3, [r7, #12]
    1510:	2237      	movs	r2, #55	; 0x37
    1512:	2100      	movs	r1, #0
    1514:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    1516:	68fb      	ldr	r3, [r7, #12]
    1518:	2238      	movs	r2, #56	; 0x38
    151a:	2100      	movs	r1, #0
    151c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    151e:	68fb      	ldr	r3, [r7, #12]
    1520:	2203      	movs	r2, #3
    1522:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    1524:	68fb      	ldr	r3, [r7, #12]
    1526:	2200      	movs	r2, #0
    1528:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    152a:	68fb      	ldr	r3, [r7, #12]
    152c:	681b      	ldr	r3, [r3, #0]
    152e:	2213      	movs	r2, #19
    1530:	18bc      	adds	r4, r7, r2
    1532:	0018      	movs	r0, r3
    1534:	4b0e      	ldr	r3, [pc, #56]	; (1570 <spi_init+0x17c>)
    1536:	4798      	blx	r3
    1538:	0003      	movs	r3, r0
    153a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    153c:	4a12      	ldr	r2, [pc, #72]	; (1588 <spi_init+0x194>)
    153e:	2313      	movs	r3, #19
    1540:	18fb      	adds	r3, r7, r3
    1542:	781b      	ldrb	r3, [r3, #0]
    1544:	0011      	movs	r1, r2
    1546:	0018      	movs	r0, r3
    1548:	4b10      	ldr	r3, [pc, #64]	; (158c <spi_init+0x198>)
    154a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    154c:	2313      	movs	r3, #19
    154e:	18fb      	adds	r3, r7, r3
    1550:	781a      	ldrb	r2, [r3, #0]
    1552:	4b0f      	ldr	r3, [pc, #60]	; (1590 <spi_init+0x19c>)
    1554:	0092      	lsls	r2, r2, #2
    1556:	68f9      	ldr	r1, [r7, #12]
    1558:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    155a:	687a      	ldr	r2, [r7, #4]
    155c:	68fb      	ldr	r3, [r7, #12]
    155e:	0011      	movs	r1, r2
    1560:	0018      	movs	r0, r3
    1562:	4b0c      	ldr	r3, [pc, #48]	; (1594 <spi_init+0x1a0>)
    1564:	4798      	blx	r3
    1566:	0003      	movs	r3, r0
}
    1568:	0018      	movs	r0, r3
    156a:	46bd      	mov	sp, r7
    156c:	b00b      	add	sp, #44	; 0x2c
    156e:	bd90      	pop	{r4, r7, pc}
    1570:	00002515 	.word	0x00002515
    1574:	00000fc5 	.word	0x00000fc5
    1578:	00000fad 	.word	0x00000fad
    157c:	00003ee9 	.word	0x00003ee9
    1580:	00003f2d 	.word	0x00003f2d
    1584:	000022cd 	.word	0x000022cd
    1588:	00001bd1 	.word	0x00001bd1
    158c:	0000309d 	.word	0x0000309d
    1590:	20000104 	.word	0x20000104
    1594:	000011a5 	.word	0x000011a5

00001598 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    1598:	b590      	push	{r4, r7, lr}
    159a:	b089      	sub	sp, #36	; 0x24
    159c:	af00      	add	r7, sp, #0
    159e:	60f8      	str	r0, [r7, #12]
    15a0:	60b9      	str	r1, [r7, #8]
    15a2:	0019      	movs	r1, r3
    15a4:	1dbb      	adds	r3, r7, #6
    15a6:	801a      	strh	r2, [r3, #0]
    15a8:	1d3b      	adds	r3, r7, #4
    15aa:	1c0a      	adds	r2, r1, #0
    15ac:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    15ae:	68fb      	ldr	r3, [r7, #12]
    15b0:	2238      	movs	r2, #56	; 0x38
    15b2:	5c9b      	ldrb	r3, [r3, r2]
    15b4:	b2db      	uxtb	r3, r3
    15b6:	2b05      	cmp	r3, #5
    15b8:	d101      	bne.n	15be <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    15ba:	2305      	movs	r3, #5
    15bc:	e0b8      	b.n	1730 <spi_read_buffer_wait+0x198>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    15be:	1dbb      	adds	r3, r7, #6
    15c0:	881b      	ldrh	r3, [r3, #0]
    15c2:	2b00      	cmp	r3, #0
    15c4:	d101      	bne.n	15ca <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    15c6:	2317      	movs	r3, #23
    15c8:	e0b2      	b.n	1730 <spi_read_buffer_wait+0x198>
	}

	if (!(module->receiver_enabled)) {
    15ca:	68fb      	ldr	r3, [r7, #12]
    15cc:	79db      	ldrb	r3, [r3, #7]
    15ce:	2201      	movs	r2, #1
    15d0:	4053      	eors	r3, r2
    15d2:	b2db      	uxtb	r3, r3
    15d4:	2b00      	cmp	r3, #0
    15d6:	d001      	beq.n	15dc <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    15d8:	231c      	movs	r3, #28
    15da:	e0a9      	b.n	1730 <spi_read_buffer_wait+0x198>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    15dc:	68fb      	ldr	r3, [r7, #12]
    15de:	795b      	ldrb	r3, [r3, #5]
    15e0:	2b00      	cmp	r3, #0
    15e2:	d109      	bne.n	15f8 <spi_read_buffer_wait+0x60>
    15e4:	68fb      	ldr	r3, [r7, #12]
    15e6:	0018      	movs	r0, r3
    15e8:	4b53      	ldr	r3, [pc, #332]	; (1738 <spi_read_buffer_wait+0x1a0>)
    15ea:	4798      	blx	r3
    15ec:	1e03      	subs	r3, r0, #0
    15ee:	d003      	beq.n	15f8 <spi_read_buffer_wait+0x60>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    15f0:	68fb      	ldr	r3, [r7, #12]
    15f2:	0018      	movs	r0, r3
    15f4:	4b51      	ldr	r3, [pc, #324]	; (173c <spi_read_buffer_wait+0x1a4>)
    15f6:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
    15f8:	231e      	movs	r3, #30
    15fa:	18fb      	adds	r3, r7, r3
    15fc:	2200      	movs	r2, #0
    15fe:	801a      	strh	r2, [r3, #0]

	while (length--) {
    1600:	e08d      	b.n	171e <spi_read_buffer_wait+0x186>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    1602:	68fb      	ldr	r3, [r7, #12]
    1604:	795b      	ldrb	r3, [r3, #5]
    1606:	2b01      	cmp	r3, #1
    1608:	d112      	bne.n	1630 <spi_read_buffer_wait+0x98>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	68fb      	ldr	r3, [r7, #12]
    160e:	0018      	movs	r0, r3
    1610:	4b4b      	ldr	r3, [pc, #300]	; (1740 <spi_read_buffer_wait+0x1a8>)
    1612:	4798      	blx	r3
    1614:	0003      	movs	r3, r0
    1616:	001a      	movs	r2, r3
    1618:	2301      	movs	r3, #1
    161a:	4053      	eors	r3, r2
    161c:	b2db      	uxtb	r3, r3
    161e:	2b00      	cmp	r3, #0
    1620:	d1f4      	bne.n	160c <spi_read_buffer_wait+0x74>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    1622:	1d3b      	adds	r3, r7, #4
    1624:	881a      	ldrh	r2, [r3, #0]
    1626:	68fb      	ldr	r3, [r7, #12]
    1628:	0011      	movs	r1, r2
    162a:	0018      	movs	r0, r3
    162c:	4b45      	ldr	r3, [pc, #276]	; (1744 <spi_read_buffer_wait+0x1ac>)
    162e:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    1630:	68fb      	ldr	r3, [r7, #12]
    1632:	795b      	ldrb	r3, [r3, #5]
    1634:	2b00      	cmp	r3, #0
    1636:	d12a      	bne.n	168e <spi_read_buffer_wait+0xf6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1638:	2300      	movs	r3, #0
    163a:	61bb      	str	r3, [r7, #24]
    163c:	e008      	b.n	1650 <spi_read_buffer_wait+0xb8>
				if (spi_is_ready_to_read(module)) {
    163e:	68fb      	ldr	r3, [r7, #12]
    1640:	0018      	movs	r0, r3
    1642:	4b41      	ldr	r3, [pc, #260]	; (1748 <spi_read_buffer_wait+0x1b0>)
    1644:	4798      	blx	r3
    1646:	1e03      	subs	r3, r0, #0
    1648:	d107      	bne.n	165a <spi_read_buffer_wait+0xc2>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    164a:	69bb      	ldr	r3, [r7, #24]
    164c:	3301      	adds	r3, #1
    164e:	61bb      	str	r3, [r7, #24]
    1650:	69bb      	ldr	r3, [r7, #24]
    1652:	4a3e      	ldr	r2, [pc, #248]	; (174c <spi_read_buffer_wait+0x1b4>)
    1654:	4293      	cmp	r3, r2
    1656:	d9f2      	bls.n	163e <spi_read_buffer_wait+0xa6>
    1658:	e000      	b.n	165c <spi_read_buffer_wait+0xc4>
				if (spi_is_ready_to_read(module)) {
					break;
    165a:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    165c:	68fb      	ldr	r3, [r7, #12]
    165e:	0018      	movs	r0, r3
    1660:	4b35      	ldr	r3, [pc, #212]	; (1738 <spi_read_buffer_wait+0x1a0>)
    1662:	4798      	blx	r3
    1664:	1e03      	subs	r3, r0, #0
    1666:	d005      	beq.n	1674 <spi_read_buffer_wait+0xdc>
				_spi_clear_tx_complete_flag(module);
    1668:	68fb      	ldr	r3, [r7, #12]
    166a:	0018      	movs	r0, r3
    166c:	4b33      	ldr	r3, [pc, #204]	; (173c <spi_read_buffer_wait+0x1a4>)
    166e:	4798      	blx	r3
				return STATUS_ABORTED;
    1670:	2304      	movs	r3, #4
    1672:	e05d      	b.n	1730 <spi_read_buffer_wait+0x198>
			}

			if (!spi_is_ready_to_read(module)) {
    1674:	68fb      	ldr	r3, [r7, #12]
    1676:	0018      	movs	r0, r3
    1678:	4b33      	ldr	r3, [pc, #204]	; (1748 <spi_read_buffer_wait+0x1b0>)
    167a:	4798      	blx	r3
    167c:	0003      	movs	r3, r0
    167e:	001a      	movs	r2, r3
    1680:	2301      	movs	r3, #1
    1682:	4053      	eors	r3, r2
    1684:	b2db      	uxtb	r3, r3
    1686:	2b00      	cmp	r3, #0
    1688:	d001      	beq.n	168e <spi_read_buffer_wait+0xf6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
    168a:	2312      	movs	r3, #18
    168c:	e050      	b.n	1730 <spi_read_buffer_wait+0x198>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    168e:	46c0      	nop			; (mov r8, r8)
    1690:	68fb      	ldr	r3, [r7, #12]
    1692:	0018      	movs	r0, r3
    1694:	4b2c      	ldr	r3, [pc, #176]	; (1748 <spi_read_buffer_wait+0x1b0>)
    1696:	4798      	blx	r3
    1698:	0003      	movs	r3, r0
    169a:	001a      	movs	r2, r3
    169c:	2301      	movs	r3, #1
    169e:	4053      	eors	r3, r2
    16a0:	b2db      	uxtb	r3, r3
    16a2:	2b00      	cmp	r3, #0
    16a4:	d1f4      	bne.n	1690 <spi_read_buffer_wait+0xf8>
		}

		uint16_t received_data = 0;
    16a6:	2314      	movs	r3, #20
    16a8:	18fb      	adds	r3, r7, r3
    16aa:	2200      	movs	r2, #0
    16ac:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    16ae:	2317      	movs	r3, #23
    16b0:	18fc      	adds	r4, r7, r3
    16b2:	2314      	movs	r3, #20
    16b4:	18fa      	adds	r2, r7, r3
    16b6:	68fb      	ldr	r3, [r7, #12]
    16b8:	0011      	movs	r1, r2
    16ba:	0018      	movs	r0, r3
    16bc:	4b24      	ldr	r3, [pc, #144]	; (1750 <spi_read_buffer_wait+0x1b8>)
    16be:	4798      	blx	r3
    16c0:	0003      	movs	r3, r0
    16c2:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    16c4:	2317      	movs	r3, #23
    16c6:	18fb      	adds	r3, r7, r3
    16c8:	781b      	ldrb	r3, [r3, #0]
    16ca:	2b00      	cmp	r3, #0
    16cc:	d003      	beq.n	16d6 <spi_read_buffer_wait+0x13e>
			/* Overflow, abort */
			return retval;
    16ce:	2317      	movs	r3, #23
    16d0:	18fb      	adds	r3, r7, r3
    16d2:	781b      	ldrb	r3, [r3, #0]
    16d4:	e02c      	b.n	1730 <spi_read_buffer_wait+0x198>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    16d6:	231e      	movs	r3, #30
    16d8:	18fb      	adds	r3, r7, r3
    16da:	881b      	ldrh	r3, [r3, #0]
    16dc:	221e      	movs	r2, #30
    16de:	18ba      	adds	r2, r7, r2
    16e0:	1c59      	adds	r1, r3, #1
    16e2:	8011      	strh	r1, [r2, #0]
    16e4:	001a      	movs	r2, r3
    16e6:	68bb      	ldr	r3, [r7, #8]
    16e8:	189b      	adds	r3, r3, r2
    16ea:	2214      	movs	r2, #20
    16ec:	18ba      	adds	r2, r7, r2
    16ee:	8812      	ldrh	r2, [r2, #0]
    16f0:	b2d2      	uxtb	r2, r2
    16f2:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    16f4:	68fb      	ldr	r3, [r7, #12]
    16f6:	799b      	ldrb	r3, [r3, #6]
    16f8:	2b01      	cmp	r3, #1
    16fa:	d110      	bne.n	171e <spi_read_buffer_wait+0x186>
			rx_data[rx_pos++] = (received_data >> 8);
    16fc:	231e      	movs	r3, #30
    16fe:	18fb      	adds	r3, r7, r3
    1700:	881b      	ldrh	r3, [r3, #0]
    1702:	221e      	movs	r2, #30
    1704:	18ba      	adds	r2, r7, r2
    1706:	1c59      	adds	r1, r3, #1
    1708:	8011      	strh	r1, [r2, #0]
    170a:	001a      	movs	r2, r3
    170c:	68bb      	ldr	r3, [r7, #8]
    170e:	189b      	adds	r3, r3, r2
    1710:	2214      	movs	r2, #20
    1712:	18ba      	adds	r2, r7, r2
    1714:	8812      	ldrh	r2, [r2, #0]
    1716:	0a12      	lsrs	r2, r2, #8
    1718:	b292      	uxth	r2, r2
    171a:	b2d2      	uxtb	r2, r2
    171c:	701a      	strb	r2, [r3, #0]
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    171e:	1dbb      	adds	r3, r7, #6
    1720:	881b      	ldrh	r3, [r3, #0]
    1722:	1dba      	adds	r2, r7, #6
    1724:	1e59      	subs	r1, r3, #1
    1726:	8011      	strh	r1, [r2, #0]
    1728:	2b00      	cmp	r3, #0
    172a:	d000      	beq.n	172e <spi_read_buffer_wait+0x196>
    172c:	e769      	b.n	1602 <spi_read_buffer_wait+0x6a>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    172e:	2300      	movs	r3, #0
}
    1730:	0018      	movs	r0, r3
    1732:	46bd      	mov	sp, r7
    1734:	b009      	add	sp, #36	; 0x24
    1736:	bd90      	pop	{r4, r7, pc}
    1738:	00001041 	.word	0x00001041
    173c:	00001189 	.word	0x00001189
    1740:	00001069 	.word	0x00001069
    1744:	000010b9 	.word	0x000010b9
    1748:	00001091 	.word	0x00001091
    174c:	00002710 	.word	0x00002710
    1750:	00001101 	.word	0x00001101

00001754 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1754:	b580      	push	{r7, lr}
    1756:	b08a      	sub	sp, #40	; 0x28
    1758:	af00      	add	r7, sp, #0
    175a:	60f8      	str	r0, [r7, #12]
    175c:	60b9      	str	r1, [r7, #8]
    175e:	1dbb      	adds	r3, r7, #6
    1760:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1762:	68fb      	ldr	r3, [r7, #12]
    1764:	2238      	movs	r2, #56	; 0x38
    1766:	5c9b      	ldrb	r3, [r3, r2]
    1768:	b2db      	uxtb	r3, r3
    176a:	2b05      	cmp	r3, #5
    176c:	d101      	bne.n	1772 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    176e:	2305      	movs	r3, #5
    1770:	e170      	b.n	1a54 <spi_write_buffer_wait+0x300>
	}
#  endif

	if (length == 0) {
    1772:	1dbb      	adds	r3, r7, #6
    1774:	881b      	ldrh	r3, [r3, #0]
    1776:	2b00      	cmp	r3, #0
    1778:	d101      	bne.n	177e <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    177a:	2317      	movs	r3, #23
    177c:	e16a      	b.n	1a54 <spi_write_buffer_wait+0x300>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    177e:	68fb      	ldr	r3, [r7, #12]
    1780:	795b      	ldrb	r3, [r3, #5]
    1782:	2b00      	cmp	r3, #0
    1784:	d109      	bne.n	179a <spi_write_buffer_wait+0x46>
    1786:	68fb      	ldr	r3, [r7, #12]
    1788:	0018      	movs	r0, r3
    178a:	4bb4      	ldr	r3, [pc, #720]	; (1a5c <spi_write_buffer_wait+0x308>)
    178c:	4798      	blx	r3
    178e:	1e03      	subs	r3, r0, #0
    1790:	d003      	beq.n	179a <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    1792:	68fb      	ldr	r3, [r7, #12]
    1794:	0018      	movs	r0, r3
    1796:	4bb2      	ldr	r3, [pc, #712]	; (1a60 <spi_write_buffer_wait+0x30c>)
    1798:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    179a:	2326      	movs	r3, #38	; 0x26
    179c:	18fb      	adds	r3, r7, r3
    179e:	2200      	movs	r2, #0
    17a0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    17a2:	2324      	movs	r3, #36	; 0x24
    17a4:	18fb      	adds	r3, r7, r3
    17a6:	1dba      	adds	r2, r7, #6
    17a8:	8812      	ldrh	r2, [r2, #0]
    17aa:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    17ac:	e0fe      	b.n	19ac <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    17ae:	68fb      	ldr	r3, [r7, #12]
    17b0:	795b      	ldrb	r3, [r3, #5]
    17b2:	2b00      	cmp	r3, #0
    17b4:	d12a      	bne.n	180c <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    17b6:	2300      	movs	r3, #0
    17b8:	623b      	str	r3, [r7, #32]
    17ba:	e008      	b.n	17ce <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
    17bc:	68fb      	ldr	r3, [r7, #12]
    17be:	0018      	movs	r0, r3
    17c0:	4ba8      	ldr	r3, [pc, #672]	; (1a64 <spi_write_buffer_wait+0x310>)
    17c2:	4798      	blx	r3
    17c4:	1e03      	subs	r3, r0, #0
    17c6:	d107      	bne.n	17d8 <spi_write_buffer_wait+0x84>
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    17c8:	6a3b      	ldr	r3, [r7, #32]
    17ca:	3301      	adds	r3, #1
    17cc:	623b      	str	r3, [r7, #32]
    17ce:	6a3b      	ldr	r3, [r7, #32]
    17d0:	4aa5      	ldr	r2, [pc, #660]	; (1a68 <spi_write_buffer_wait+0x314>)
    17d2:	4293      	cmp	r3, r2
    17d4:	d9f2      	bls.n	17bc <spi_write_buffer_wait+0x68>
    17d6:	e000      	b.n	17da <spi_write_buffer_wait+0x86>
				if (spi_is_ready_to_write(module)) {
					break;
    17d8:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    17da:	68fb      	ldr	r3, [r7, #12]
    17dc:	0018      	movs	r0, r3
    17de:	4b9f      	ldr	r3, [pc, #636]	; (1a5c <spi_write_buffer_wait+0x308>)
    17e0:	4798      	blx	r3
    17e2:	1e03      	subs	r3, r0, #0
    17e4:	d005      	beq.n	17f2 <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
    17e6:	68fb      	ldr	r3, [r7, #12]
    17e8:	0018      	movs	r0, r3
    17ea:	4b9d      	ldr	r3, [pc, #628]	; (1a60 <spi_write_buffer_wait+0x30c>)
    17ec:	4798      	blx	r3
				return STATUS_ABORTED;
    17ee:	2304      	movs	r3, #4
    17f0:	e130      	b.n	1a54 <spi_write_buffer_wait+0x300>
			}

			if (!spi_is_ready_to_write(module)) {
    17f2:	68fb      	ldr	r3, [r7, #12]
    17f4:	0018      	movs	r0, r3
    17f6:	4b9b      	ldr	r3, [pc, #620]	; (1a64 <spi_write_buffer_wait+0x310>)
    17f8:	4798      	blx	r3
    17fa:	0003      	movs	r3, r0
    17fc:	001a      	movs	r2, r3
    17fe:	2301      	movs	r3, #1
    1800:	4053      	eors	r3, r2
    1802:	b2db      	uxtb	r3, r3
    1804:	2b00      	cmp	r3, #0
    1806:	d001      	beq.n	180c <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1808:	2312      	movs	r3, #18
    180a:	e123      	b.n	1a54 <spi_write_buffer_wait+0x300>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    180c:	46c0      	nop			; (mov r8, r8)
    180e:	68fb      	ldr	r3, [r7, #12]
    1810:	0018      	movs	r0, r3
    1812:	4b94      	ldr	r3, [pc, #592]	; (1a64 <spi_write_buffer_wait+0x310>)
    1814:	4798      	blx	r3
    1816:	0003      	movs	r3, r0
    1818:	001a      	movs	r2, r3
    181a:	2301      	movs	r3, #1
    181c:	4053      	eors	r3, r2
    181e:	b2db      	uxtb	r3, r3
    1820:	2b00      	cmp	r3, #0
    1822:	d1f4      	bne.n	180e <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1824:	2326      	movs	r3, #38	; 0x26
    1826:	18fb      	adds	r3, r7, r3
    1828:	881b      	ldrh	r3, [r3, #0]
    182a:	2226      	movs	r2, #38	; 0x26
    182c:	18ba      	adds	r2, r7, r2
    182e:	1c59      	adds	r1, r3, #1
    1830:	8011      	strh	r1, [r2, #0]
    1832:	001a      	movs	r2, r3
    1834:	68bb      	ldr	r3, [r7, #8]
    1836:	189b      	adds	r3, r3, r2
    1838:	781a      	ldrb	r2, [r3, #0]
    183a:	231e      	movs	r3, #30
    183c:	18fb      	adds	r3, r7, r3
    183e:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1840:	68fb      	ldr	r3, [r7, #12]
    1842:	799b      	ldrb	r3, [r3, #6]
    1844:	2b01      	cmp	r3, #1
    1846:	d115      	bne.n	1874 <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
    1848:	2326      	movs	r3, #38	; 0x26
    184a:	18fb      	adds	r3, r7, r3
    184c:	881b      	ldrh	r3, [r3, #0]
    184e:	2226      	movs	r2, #38	; 0x26
    1850:	18ba      	adds	r2, r7, r2
    1852:	1c59      	adds	r1, r3, #1
    1854:	8011      	strh	r1, [r2, #0]
    1856:	001a      	movs	r2, r3
    1858:	68bb      	ldr	r3, [r7, #8]
    185a:	189b      	adds	r3, r3, r2
    185c:	781b      	ldrb	r3, [r3, #0]
    185e:	021b      	lsls	r3, r3, #8
    1860:	b21a      	sxth	r2, r3
    1862:	231e      	movs	r3, #30
    1864:	18fb      	adds	r3, r7, r3
    1866:	2100      	movs	r1, #0
    1868:	5e5b      	ldrsh	r3, [r3, r1]
    186a:	4313      	orrs	r3, r2
    186c:	b21a      	sxth	r2, r3
    186e:	231e      	movs	r3, #30
    1870:	18fb      	adds	r3, r7, r3
    1872:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    1874:	231e      	movs	r3, #30
    1876:	18fb      	adds	r3, r7, r3
    1878:	881a      	ldrh	r2, [r3, #0]
    187a:	68fb      	ldr	r3, [r7, #12]
    187c:	0011      	movs	r1, r2
    187e:	0018      	movs	r0, r3
    1880:	4b7a      	ldr	r3, [pc, #488]	; (1a6c <spi_write_buffer_wait+0x318>)
    1882:	4798      	blx	r3

		if (module->receiver_enabled) {
    1884:	68fb      	ldr	r3, [r7, #12]
    1886:	79db      	ldrb	r3, [r3, #7]
    1888:	2224      	movs	r2, #36	; 0x24
    188a:	18ba      	adds	r2, r7, r2
    188c:	2124      	movs	r1, #36	; 0x24
    188e:	1879      	adds	r1, r7, r1
    1890:	8809      	ldrh	r1, [r1, #0]
    1892:	8011      	strh	r1, [r2, #0]
    1894:	2b00      	cmp	r3, #0
    1896:	d100      	bne.n	189a <spi_write_buffer_wait+0x146>
    1898:	e088      	b.n	19ac <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    189a:	68fb      	ldr	r3, [r7, #12]
    189c:	795b      	ldrb	r3, [r3, #5]
    189e:	2b00      	cmp	r3, #0
    18a0:	d000      	beq.n	18a4 <spi_write_buffer_wait+0x150>
    18a2:	e069      	b.n	1978 <spi_write_buffer_wait+0x224>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    18a4:	2300      	movs	r3, #0
    18a6:	61bb      	str	r3, [r7, #24]
    18a8:	e047      	b.n	193a <spi_write_buffer_wait+0x1e6>
					if (length && spi_is_ready_to_write(module)) {
    18aa:	1dbb      	adds	r3, r7, #6
    18ac:	881b      	ldrh	r3, [r3, #0]
    18ae:	2b00      	cmp	r3, #0
    18b0:	d03a      	beq.n	1928 <spi_write_buffer_wait+0x1d4>
    18b2:	68fb      	ldr	r3, [r7, #12]
    18b4:	0018      	movs	r0, r3
    18b6:	4b6b      	ldr	r3, [pc, #428]	; (1a64 <spi_write_buffer_wait+0x310>)
    18b8:	4798      	blx	r3
    18ba:	1e03      	subs	r3, r0, #0
    18bc:	d034      	beq.n	1928 <spi_write_buffer_wait+0x1d4>
						data_to_send = tx_data[tx_pos++];
    18be:	2326      	movs	r3, #38	; 0x26
    18c0:	18fb      	adds	r3, r7, r3
    18c2:	881b      	ldrh	r3, [r3, #0]
    18c4:	2226      	movs	r2, #38	; 0x26
    18c6:	18ba      	adds	r2, r7, r2
    18c8:	1c59      	adds	r1, r3, #1
    18ca:	8011      	strh	r1, [r2, #0]
    18cc:	001a      	movs	r2, r3
    18ce:	68bb      	ldr	r3, [r7, #8]
    18d0:	189b      	adds	r3, r3, r2
    18d2:	781a      	ldrb	r2, [r3, #0]
    18d4:	231e      	movs	r3, #30
    18d6:	18fb      	adds	r3, r7, r3
    18d8:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    18da:	68fb      	ldr	r3, [r7, #12]
    18dc:	799b      	ldrb	r3, [r3, #6]
    18de:	2b01      	cmp	r3, #1
    18e0:	d115      	bne.n	190e <spi_write_buffer_wait+0x1ba>
							data_to_send |= (tx_data[tx_pos++] << 8);
    18e2:	2326      	movs	r3, #38	; 0x26
    18e4:	18fb      	adds	r3, r7, r3
    18e6:	881b      	ldrh	r3, [r3, #0]
    18e8:	2226      	movs	r2, #38	; 0x26
    18ea:	18ba      	adds	r2, r7, r2
    18ec:	1c59      	adds	r1, r3, #1
    18ee:	8011      	strh	r1, [r2, #0]
    18f0:	001a      	movs	r2, r3
    18f2:	68bb      	ldr	r3, [r7, #8]
    18f4:	189b      	adds	r3, r3, r2
    18f6:	781b      	ldrb	r3, [r3, #0]
    18f8:	021b      	lsls	r3, r3, #8
    18fa:	b21a      	sxth	r2, r3
    18fc:	231e      	movs	r3, #30
    18fe:	18fb      	adds	r3, r7, r3
    1900:	2100      	movs	r1, #0
    1902:	5e5b      	ldrsh	r3, [r3, r1]
    1904:	4313      	orrs	r3, r2
    1906:	b21a      	sxth	r2, r3
    1908:	231e      	movs	r3, #30
    190a:	18fb      	adds	r3, r7, r3
    190c:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    190e:	231e      	movs	r3, #30
    1910:	18fb      	adds	r3, r7, r3
    1912:	881a      	ldrh	r2, [r3, #0]
    1914:	68fb      	ldr	r3, [r7, #12]
    1916:	0011      	movs	r1, r2
    1918:	0018      	movs	r0, r3
    191a:	4b54      	ldr	r3, [pc, #336]	; (1a6c <spi_write_buffer_wait+0x318>)
    191c:	4798      	blx	r3
						length--;
    191e:	1dbb      	adds	r3, r7, #6
    1920:	881a      	ldrh	r2, [r3, #0]
    1922:	1dbb      	adds	r3, r7, #6
    1924:	3a01      	subs	r2, #1
    1926:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    1928:	68fb      	ldr	r3, [r7, #12]
    192a:	0018      	movs	r0, r3
    192c:	4b50      	ldr	r3, [pc, #320]	; (1a70 <spi_write_buffer_wait+0x31c>)
    192e:	4798      	blx	r3
    1930:	1e03      	subs	r3, r0, #0
    1932:	d107      	bne.n	1944 <spi_write_buffer_wait+0x1f0>

		if (module->receiver_enabled) {
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1934:	69bb      	ldr	r3, [r7, #24]
    1936:	3301      	adds	r3, #1
    1938:	61bb      	str	r3, [r7, #24]
    193a:	69bb      	ldr	r3, [r7, #24]
    193c:	4a4a      	ldr	r2, [pc, #296]	; (1a68 <spi_write_buffer_wait+0x314>)
    193e:	4293      	cmp	r3, r2
    1940:	d9b3      	bls.n	18aa <spi_write_buffer_wait+0x156>
    1942:	e000      	b.n	1946 <spi_write_buffer_wait+0x1f2>
						/* Write the data to send */
						spi_write(module, data_to_send);
						length--;
					}
					if (spi_is_ready_to_read(module)) {
						break;
    1944:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    1946:	68fb      	ldr	r3, [r7, #12]
    1948:	0018      	movs	r0, r3
    194a:	4b44      	ldr	r3, [pc, #272]	; (1a5c <spi_write_buffer_wait+0x308>)
    194c:	4798      	blx	r3
    194e:	1e03      	subs	r3, r0, #0
    1950:	d005      	beq.n	195e <spi_write_buffer_wait+0x20a>
					_spi_clear_tx_complete_flag(module);
    1952:	68fb      	ldr	r3, [r7, #12]
    1954:	0018      	movs	r0, r3
    1956:	4b42      	ldr	r3, [pc, #264]	; (1a60 <spi_write_buffer_wait+0x30c>)
    1958:	4798      	blx	r3
					return STATUS_ABORTED;
    195a:	2304      	movs	r3, #4
    195c:	e07a      	b.n	1a54 <spi_write_buffer_wait+0x300>
				}

				if (!spi_is_ready_to_read(module)) {
    195e:	68fb      	ldr	r3, [r7, #12]
    1960:	0018      	movs	r0, r3
    1962:	4b43      	ldr	r3, [pc, #268]	; (1a70 <spi_write_buffer_wait+0x31c>)
    1964:	4798      	blx	r3
    1966:	0003      	movs	r3, r0
    1968:	001a      	movs	r2, r3
    196a:	2301      	movs	r3, #1
    196c:	4053      	eors	r3, r2
    196e:	b2db      	uxtb	r3, r3
    1970:	2b00      	cmp	r3, #0
    1972:	d001      	beq.n	1978 <spi_write_buffer_wait+0x224>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    1974:	2312      	movs	r3, #18
    1976:	e06d      	b.n	1a54 <spi_write_buffer_wait+0x300>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    1978:	46c0      	nop			; (mov r8, r8)
    197a:	68fb      	ldr	r3, [r7, #12]
    197c:	0018      	movs	r0, r3
    197e:	4b3c      	ldr	r3, [pc, #240]	; (1a70 <spi_write_buffer_wait+0x31c>)
    1980:	4798      	blx	r3
    1982:	0003      	movs	r3, r0
    1984:	001a      	movs	r2, r3
    1986:	2301      	movs	r3, #1
    1988:	4053      	eors	r3, r2
    198a:	b2db      	uxtb	r3, r3
    198c:	2b00      	cmp	r3, #0
    198e:	d1f4      	bne.n	197a <spi_write_buffer_wait+0x226>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    1990:	2312      	movs	r3, #18
    1992:	18fa      	adds	r2, r7, r3
    1994:	68fb      	ldr	r3, [r7, #12]
    1996:	0011      	movs	r1, r2
    1998:	0018      	movs	r0, r3
    199a:	4b36      	ldr	r3, [pc, #216]	; (1a74 <spi_write_buffer_wait+0x320>)
    199c:	4798      	blx	r3
			flush_length--;
    199e:	2324      	movs	r3, #36	; 0x24
    19a0:	18fb      	adds	r3, r7, r3
    19a2:	881a      	ldrh	r2, [r3, #0]
    19a4:	2324      	movs	r3, #36	; 0x24
    19a6:	18fb      	adds	r3, r7, r3
    19a8:	3a01      	subs	r2, #1
    19aa:	801a      	strh	r2, [r3, #0]

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    19ac:	1dbb      	adds	r3, r7, #6
    19ae:	881b      	ldrh	r3, [r3, #0]
    19b0:	1dba      	adds	r2, r7, #6
    19b2:	1e59      	subs	r1, r3, #1
    19b4:	8011      	strh	r1, [r2, #0]
    19b6:	2b00      	cmp	r3, #0
    19b8:	d000      	beq.n	19bc <spi_write_buffer_wait+0x268>
    19ba:	e6f8      	b.n	17ae <spi_write_buffer_wait+0x5a>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    19bc:	68fb      	ldr	r3, [r7, #12]
    19be:	795b      	ldrb	r3, [r3, #5]
    19c0:	2b01      	cmp	r3, #1
    19c2:	d10b      	bne.n	19dc <spi_write_buffer_wait+0x288>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    19c4:	46c0      	nop			; (mov r8, r8)
    19c6:	68fb      	ldr	r3, [r7, #12]
    19c8:	0018      	movs	r0, r3
    19ca:	4b24      	ldr	r3, [pc, #144]	; (1a5c <spi_write_buffer_wait+0x308>)
    19cc:	4798      	blx	r3
    19ce:	0003      	movs	r3, r0
    19d0:	001a      	movs	r2, r3
    19d2:	2301      	movs	r3, #1
    19d4:	4053      	eors	r3, r2
    19d6:	b2db      	uxtb	r3, r3
    19d8:	2b00      	cmp	r3, #0
    19da:	d1f4      	bne.n	19c6 <spi_write_buffer_wait+0x272>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    19dc:	68fb      	ldr	r3, [r7, #12]
    19de:	795b      	ldrb	r3, [r3, #5]
    19e0:	2b00      	cmp	r3, #0
    19e2:	d136      	bne.n	1a52 <spi_write_buffer_wait+0x2fe>
		if (module->receiver_enabled) {
    19e4:	68fb      	ldr	r3, [r7, #12]
    19e6:	79db      	ldrb	r3, [r3, #7]
    19e8:	2b00      	cmp	r3, #0
    19ea:	d032      	beq.n	1a52 <spi_write_buffer_wait+0x2fe>
			while (flush_length) {
    19ec:	e02c      	b.n	1a48 <spi_write_buffer_wait+0x2f4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    19ee:	2300      	movs	r3, #0
    19f0:	617b      	str	r3, [r7, #20]
    19f2:	e008      	b.n	1a06 <spi_write_buffer_wait+0x2b2>
					if (spi_is_ready_to_read(module)) {
    19f4:	68fb      	ldr	r3, [r7, #12]
    19f6:	0018      	movs	r0, r3
    19f8:	4b1d      	ldr	r3, [pc, #116]	; (1a70 <spi_write_buffer_wait+0x31c>)
    19fa:	4798      	blx	r3
    19fc:	1e03      	subs	r3, r0, #0
    19fe:	d107      	bne.n	1a10 <spi_write_buffer_wait+0x2bc>
#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1a00:	697b      	ldr	r3, [r7, #20]
    1a02:	3301      	adds	r3, #1
    1a04:	617b      	str	r3, [r7, #20]
    1a06:	697b      	ldr	r3, [r7, #20]
    1a08:	4a17      	ldr	r2, [pc, #92]	; (1a68 <spi_write_buffer_wait+0x314>)
    1a0a:	4293      	cmp	r3, r2
    1a0c:	d9f2      	bls.n	19f4 <spi_write_buffer_wait+0x2a0>
    1a0e:	e000      	b.n	1a12 <spi_write_buffer_wait+0x2be>
					if (spi_is_ready_to_read(module)) {
						break;
    1a10:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    1a12:	68fb      	ldr	r3, [r7, #12]
    1a14:	0018      	movs	r0, r3
    1a16:	4b16      	ldr	r3, [pc, #88]	; (1a70 <spi_write_buffer_wait+0x31c>)
    1a18:	4798      	blx	r3
    1a1a:	0003      	movs	r3, r0
    1a1c:	001a      	movs	r2, r3
    1a1e:	2301      	movs	r3, #1
    1a20:	4053      	eors	r3, r2
    1a22:	b2db      	uxtb	r3, r3
    1a24:	2b00      	cmp	r3, #0
    1a26:	d001      	beq.n	1a2c <spi_write_buffer_wait+0x2d8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    1a28:	2312      	movs	r3, #18
    1a2a:	e013      	b.n	1a54 <spi_write_buffer_wait+0x300>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    1a2c:	2310      	movs	r3, #16
    1a2e:	18fa      	adds	r2, r7, r3
    1a30:	68fb      	ldr	r3, [r7, #12]
    1a32:	0011      	movs	r1, r2
    1a34:	0018      	movs	r0, r3
    1a36:	4b0f      	ldr	r3, [pc, #60]	; (1a74 <spi_write_buffer_wait+0x320>)
    1a38:	4798      	blx	r3
				flush_length--;
    1a3a:	2324      	movs	r3, #36	; 0x24
    1a3c:	18fb      	adds	r3, r7, r3
    1a3e:	881a      	ldrh	r2, [r3, #0]
    1a40:	2324      	movs	r3, #36	; 0x24
    1a42:	18fb      	adds	r3, r7, r3
    1a44:	3a01      	subs	r2, #1
    1a46:	801a      	strh	r2, [r3, #0]
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
    1a48:	2324      	movs	r3, #36	; 0x24
    1a4a:	18fb      	adds	r3, r7, r3
    1a4c:	881b      	ldrh	r3, [r3, #0]
    1a4e:	2b00      	cmp	r3, #0
    1a50:	d1cd      	bne.n	19ee <spi_write_buffer_wait+0x29a>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    1a52:	2300      	movs	r3, #0
}
    1a54:	0018      	movs	r0, r3
    1a56:	46bd      	mov	sp, r7
    1a58:	b00a      	add	sp, #40	; 0x28
    1a5a:	bd80      	pop	{r7, pc}
    1a5c:	00001041 	.word	0x00001041
    1a60:	00001189 	.word	0x00001189
    1a64:	00001069 	.word	0x00001069
    1a68:	00002710 	.word	0x00002710
    1a6c:	000010b9 	.word	0x000010b9
    1a70:	00001091 	.word	0x00001091
    1a74:	00001101 	.word	0x00001101

00001a78 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    1a78:	b580      	push	{r7, lr}
    1a7a:	b084      	sub	sp, #16
    1a7c:	af00      	add	r7, sp, #0
    1a7e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1a80:	687b      	ldr	r3, [r7, #4]
    1a82:	681b      	ldr	r3, [r3, #0]
    1a84:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1a86:	687b      	ldr	r3, [r7, #4]
    1a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a8a:	781b      	ldrb	r3, [r3, #0]
    1a8c:	b2da      	uxtb	r2, r3
    1a8e:	230e      	movs	r3, #14
    1a90:	18fb      	adds	r3, r7, r3
    1a92:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    1a94:	687b      	ldr	r3, [r7, #4]
    1a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a98:	1c5a      	adds	r2, r3, #1
    1a9a:	687b      	ldr	r3, [r7, #4]
    1a9c:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1a9e:	687b      	ldr	r3, [r7, #4]
    1aa0:	799b      	ldrb	r3, [r3, #6]
    1aa2:	2b01      	cmp	r3, #1
    1aa4:	d113      	bne.n	1ace <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1aa6:	687b      	ldr	r3, [r7, #4]
    1aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1aaa:	781b      	ldrb	r3, [r3, #0]
    1aac:	b2db      	uxtb	r3, r3
    1aae:	021b      	lsls	r3, r3, #8
    1ab0:	b21a      	sxth	r2, r3
    1ab2:	230e      	movs	r3, #14
    1ab4:	18fb      	adds	r3, r7, r3
    1ab6:	2100      	movs	r1, #0
    1ab8:	5e5b      	ldrsh	r3, [r3, r1]
    1aba:	4313      	orrs	r3, r2
    1abc:	b21a      	sxth	r2, r3
    1abe:	230e      	movs	r3, #14
    1ac0:	18fb      	adds	r3, r7, r3
    1ac2:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    1ac4:	687b      	ldr	r3, [r7, #4]
    1ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ac8:	1c5a      	adds	r2, r3, #1
    1aca:	687b      	ldr	r3, [r7, #4]
    1acc:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1ace:	230e      	movs	r3, #14
    1ad0:	18fb      	adds	r3, r7, r3
    1ad2:	881b      	ldrh	r3, [r3, #0]
    1ad4:	05db      	lsls	r3, r3, #23
    1ad6:	0dda      	lsrs	r2, r3, #23
    1ad8:	68bb      	ldr	r3, [r7, #8]
    1ada:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    1ae0:	b29b      	uxth	r3, r3
    1ae2:	3b01      	subs	r3, #1
    1ae4:	b29a      	uxth	r2, r3
    1ae6:	687b      	ldr	r3, [r7, #4]
    1ae8:	869a      	strh	r2, [r3, #52]	; 0x34
}
    1aea:	46c0      	nop			; (mov r8, r8)
    1aec:	46bd      	mov	sp, r7
    1aee:	b004      	add	sp, #16
    1af0:	bd80      	pop	{r7, pc}
    1af2:	46c0      	nop			; (mov r8, r8)

00001af4 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    1af4:	b580      	push	{r7, lr}
    1af6:	b084      	sub	sp, #16
    1af8:	af00      	add	r7, sp, #0
    1afa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1afc:	687b      	ldr	r3, [r7, #4]
    1afe:	681b      	ldr	r3, [r3, #0]
    1b00:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    1b02:	4b08      	ldr	r3, [pc, #32]	; (1b24 <_spi_write_dummy+0x30>)
    1b04:	881b      	ldrh	r3, [r3, #0]
    1b06:	001a      	movs	r2, r3
    1b08:	68fb      	ldr	r3, [r7, #12]
    1b0a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1b0c:	687b      	ldr	r3, [r7, #4]
    1b0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1b10:	b29b      	uxth	r3, r3
    1b12:	3b01      	subs	r3, #1
    1b14:	b29a      	uxth	r2, r3
    1b16:	687b      	ldr	r3, [r7, #4]
    1b18:	865a      	strh	r2, [r3, #50]	; 0x32
}
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	46bd      	mov	sp, r7
    1b1e:	b004      	add	sp, #16
    1b20:	bd80      	pop	{r7, pc}
    1b22:	46c0      	nop			; (mov r8, r8)
    1b24:	20000100 	.word	0x20000100

00001b28 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    1b28:	b580      	push	{r7, lr}
    1b2a:	b084      	sub	sp, #16
    1b2c:	af00      	add	r7, sp, #0
    1b2e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1b30:	687b      	ldr	r3, [r7, #4]
    1b32:	681b      	ldr	r3, [r3, #0]
    1b34:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    1b36:	230a      	movs	r3, #10
    1b38:	18fb      	adds	r3, r7, r3
    1b3a:	2200      	movs	r2, #0
    1b3c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    1b3e:	68fb      	ldr	r3, [r7, #12]
    1b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b42:	230a      	movs	r3, #10
    1b44:	18fb      	adds	r3, r7, r3
    1b46:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1b48:	687b      	ldr	r3, [r7, #4]
    1b4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	3b01      	subs	r3, #1
    1b50:	b29a      	uxth	r2, r3
    1b52:	687b      	ldr	r3, [r7, #4]
    1b54:	865a      	strh	r2, [r3, #50]	; 0x32
}
    1b56:	46c0      	nop			; (mov r8, r8)
    1b58:	46bd      	mov	sp, r7
    1b5a:	b004      	add	sp, #16
    1b5c:	bd80      	pop	{r7, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)

00001b60 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    1b60:	b580      	push	{r7, lr}
    1b62:	b084      	sub	sp, #16
    1b64:	af00      	add	r7, sp, #0
    1b66:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1b68:	687b      	ldr	r3, [r7, #4]
    1b6a:	681b      	ldr	r3, [r3, #0]
    1b6c:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1b6e:	68fb      	ldr	r3, [r7, #12]
    1b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b72:	b29a      	uxth	r2, r3
    1b74:	230a      	movs	r3, #10
    1b76:	18fb      	adds	r3, r7, r3
    1b78:	05d2      	lsls	r2, r2, #23
    1b7a:	0dd2      	lsrs	r2, r2, #23
    1b7c:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b82:	220a      	movs	r2, #10
    1b84:	18ba      	adds	r2, r7, r2
    1b86:	8812      	ldrh	r2, [r2, #0]
    1b88:	b2d2      	uxtb	r2, r2
    1b8a:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    1b8c:	687b      	ldr	r3, [r7, #4]
    1b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b90:	1c5a      	adds	r2, r3, #1
    1b92:	687b      	ldr	r3, [r7, #4]
    1b94:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1b96:	687b      	ldr	r3, [r7, #4]
    1b98:	799b      	ldrb	r3, [r3, #6]
    1b9a:	2b01      	cmp	r3, #1
    1b9c:	d10d      	bne.n	1bba <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1b9e:	687b      	ldr	r3, [r7, #4]
    1ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1ba2:	220a      	movs	r2, #10
    1ba4:	18ba      	adds	r2, r7, r2
    1ba6:	8812      	ldrh	r2, [r2, #0]
    1ba8:	0a12      	lsrs	r2, r2, #8
    1baa:	b292      	uxth	r2, r2
    1bac:	b2d2      	uxtb	r2, r2
    1bae:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    1bb0:	687b      	ldr	r3, [r7, #4]
    1bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1bb4:	1c5a      	adds	r2, r3, #1
    1bb6:	687b      	ldr	r3, [r7, #4]
    1bb8:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    1bba:	687b      	ldr	r3, [r7, #4]
    1bbc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    1bbe:	b29b      	uxth	r3, r3
    1bc0:	3b01      	subs	r3, #1
    1bc2:	b29a      	uxth	r2, r3
    1bc4:	687b      	ldr	r3, [r7, #4]
    1bc6:	861a      	strh	r2, [r3, #48]	; 0x30
}
    1bc8:	46c0      	nop			; (mov r8, r8)
    1bca:	46bd      	mov	sp, r7
    1bcc:	b004      	add	sp, #16
    1bce:	bd80      	pop	{r7, pc}

00001bd0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1bd0:	b580      	push	{r7, lr}
    1bd2:	b086      	sub	sp, #24
    1bd4:	af00      	add	r7, sp, #0
    1bd6:	0002      	movs	r2, r0
    1bd8:	1dfb      	adds	r3, r7, #7
    1bda:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    1bdc:	1dfb      	adds	r3, r7, #7
    1bde:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    1be0:	4bb9      	ldr	r3, [pc, #740]	; (1ec8 <_spi_interrupt_handler+0x2f8>)
    1be2:	0092      	lsls	r2, r2, #2
    1be4:	58d3      	ldr	r3, [r2, r3]
    1be6:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1be8:	697b      	ldr	r3, [r7, #20]
    1bea:	681b      	ldr	r3, [r3, #0]
    1bec:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1bee:	697b      	ldr	r3, [r7, #20]
    1bf0:	2237      	movs	r2, #55	; 0x37
    1bf2:	5c9a      	ldrb	r2, [r3, r2]
    1bf4:	697b      	ldr	r3, [r7, #20]
    1bf6:	2136      	movs	r1, #54	; 0x36
    1bf8:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    1bfa:	230f      	movs	r3, #15
    1bfc:	18fb      	adds	r3, r7, r3
    1bfe:	400a      	ands	r2, r1
    1c00:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1c02:	693b      	ldr	r3, [r7, #16]
    1c04:	7e1b      	ldrb	r3, [r3, #24]
    1c06:	b2da      	uxtb	r2, r3
    1c08:	230c      	movs	r3, #12
    1c0a:	18fb      	adds	r3, r7, r3
    1c0c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    1c0e:	693b      	ldr	r3, [r7, #16]
    1c10:	7d9b      	ldrb	r3, [r3, #22]
    1c12:	b2db      	uxtb	r3, r3
    1c14:	b29a      	uxth	r2, r3
    1c16:	230c      	movs	r3, #12
    1c18:	18fb      	adds	r3, r7, r3
    1c1a:	210c      	movs	r1, #12
    1c1c:	1879      	adds	r1, r7, r1
    1c1e:	8809      	ldrh	r1, [r1, #0]
    1c20:	400a      	ands	r2, r1
    1c22:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1c24:	230c      	movs	r3, #12
    1c26:	18fb      	adds	r3, r7, r3
    1c28:	881b      	ldrh	r3, [r3, #0]
    1c2a:	2201      	movs	r2, #1
    1c2c:	4013      	ands	r3, r2
    1c2e:	d041      	beq.n	1cb4 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1c30:	697b      	ldr	r3, [r7, #20]
    1c32:	795b      	ldrb	r3, [r3, #5]
    1c34:	2b01      	cmp	r3, #1
    1c36:	d110      	bne.n	1c5a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    1c38:	697b      	ldr	r3, [r7, #20]
    1c3a:	7a5b      	ldrb	r3, [r3, #9]
    1c3c:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d10b      	bne.n	1c5a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    1c42:	697b      	ldr	r3, [r7, #20]
    1c44:	0018      	movs	r0, r3
    1c46:	4ba1      	ldr	r3, [pc, #644]	; (1ecc <_spi_interrupt_handler+0x2fc>)
    1c48:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    1c4a:	697b      	ldr	r3, [r7, #20]
    1c4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1c4e:	b29b      	uxth	r3, r3
    1c50:	2b00      	cmp	r3, #0
    1c52:	d102      	bne.n	1c5a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1c54:	693b      	ldr	r3, [r7, #16]
    1c56:	2201      	movs	r2, #1
    1c58:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1c5a:	697b      	ldr	r3, [r7, #20]
    1c5c:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    1c5e:	2b01      	cmp	r3, #1
    1c60:	d104      	bne.n	1c6c <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    1c62:	697b      	ldr	r3, [r7, #20]
    1c64:	7a5b      	ldrb	r3, [r3, #9]
    1c66:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d108      	bne.n	1c7e <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1c6c:	697b      	ldr	r3, [r7, #20]
    1c6e:	795b      	ldrb	r3, [r3, #5]
    1c70:	2b00      	cmp	r3, #0
    1c72:	d11f      	bne.n	1cb4 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    1c74:	697b      	ldr	r3, [r7, #20]
    1c76:	7a5b      	ldrb	r3, [r3, #9]
    1c78:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d01a      	beq.n	1cb4 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    1c7e:	697b      	ldr	r3, [r7, #20]
    1c80:	0018      	movs	r0, r3
    1c82:	4b93      	ldr	r3, [pc, #588]	; (1ed0 <_spi_interrupt_handler+0x300>)
    1c84:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    1c86:	697b      	ldr	r3, [r7, #20]
    1c88:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    1c8a:	b29b      	uxth	r3, r3
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d111      	bne.n	1cb4 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1c90:	693b      	ldr	r3, [r7, #16]
    1c92:	2201      	movs	r2, #1
    1c94:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    1c96:	697b      	ldr	r3, [r7, #20]
    1c98:	7a5b      	ldrb	r3, [r3, #9]
    1c9a:	b2db      	uxtb	r3, r3
    1c9c:	2b01      	cmp	r3, #1
    1c9e:	d109      	bne.n	1cb4 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    1ca0:	697b      	ldr	r3, [r7, #20]
    1ca2:	79db      	ldrb	r3, [r3, #7]
    1ca4:	2201      	movs	r2, #1
    1ca6:	4053      	eors	r3, r2
    1ca8:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    1caa:	2b00      	cmp	r3, #0
    1cac:	d002      	beq.n	1cb4 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1cae:	693b      	ldr	r3, [r7, #16]
    1cb0:	2202      	movs	r2, #2
    1cb2:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1cb4:	230c      	movs	r3, #12
    1cb6:	18fb      	adds	r3, r7, r3
    1cb8:	881b      	ldrh	r3, [r3, #0]
    1cba:	2204      	movs	r2, #4
    1cbc:	4013      	ands	r3, r2
    1cbe:	d100      	bne.n	1cc2 <_spi_interrupt_handler+0xf2>
    1cc0:	e07e      	b.n	1dc0 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1cc2:	693b      	ldr	r3, [r7, #16]
    1cc4:	8b5b      	ldrh	r3, [r3, #26]
    1cc6:	b29b      	uxth	r3, r3
    1cc8:	001a      	movs	r2, r3
    1cca:	2304      	movs	r3, #4
    1ccc:	4013      	ands	r3, r2
    1cce:	d022      	beq.n	1d16 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1cd0:	697b      	ldr	r3, [r7, #20]
    1cd2:	7a5b      	ldrb	r3, [r3, #9]
    1cd4:	b2db      	uxtb	r3, r3
    1cd6:	2b01      	cmp	r3, #1
    1cd8:	d014      	beq.n	1d04 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1cda:	697b      	ldr	r3, [r7, #20]
    1cdc:	2238      	movs	r2, #56	; 0x38
    1cde:	211e      	movs	r1, #30
    1ce0:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1ce2:	697b      	ldr	r3, [r7, #20]
    1ce4:	2203      	movs	r2, #3
    1ce6:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1ce8:	693b      	ldr	r3, [r7, #16]
    1cea:	2205      	movs	r2, #5
    1cec:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1cee:	230f      	movs	r3, #15
    1cf0:	18fb      	adds	r3, r7, r3
    1cf2:	781b      	ldrb	r3, [r3, #0]
    1cf4:	2208      	movs	r2, #8
    1cf6:	4013      	ands	r3, r2
    1cf8:	d004      	beq.n	1d04 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1cfa:	697b      	ldr	r3, [r7, #20]
    1cfc:	699b      	ldr	r3, [r3, #24]
    1cfe:	697a      	ldr	r2, [r7, #20]
    1d00:	0010      	movs	r0, r2
    1d02:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1d04:	693b      	ldr	r3, [r7, #16]
    1d06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d08:	230a      	movs	r3, #10
    1d0a:	18fb      	adds	r3, r7, r3
    1d0c:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1d0e:	693b      	ldr	r3, [r7, #16]
    1d10:	2204      	movs	r2, #4
    1d12:	835a      	strh	r2, [r3, #26]
    1d14:	e054      	b.n	1dc0 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    1d16:	697b      	ldr	r3, [r7, #20]
    1d18:	7a5b      	ldrb	r3, [r3, #9]
    1d1a:	b2db      	uxtb	r3, r3
    1d1c:	2b01      	cmp	r3, #1
    1d1e:	d11e      	bne.n	1d5e <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    1d20:	697b      	ldr	r3, [r7, #20]
    1d22:	0018      	movs	r0, r3
    1d24:	4b6b      	ldr	r3, [pc, #428]	; (1ed4 <_spi_interrupt_handler+0x304>)
    1d26:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    1d28:	697b      	ldr	r3, [r7, #20]
    1d2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1d2c:	b29b      	uxth	r3, r3
    1d2e:	2b00      	cmp	r3, #0
    1d30:	d146      	bne.n	1dc0 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1d32:	693b      	ldr	r3, [r7, #16]
    1d34:	2204      	movs	r2, #4
    1d36:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    1d38:	697b      	ldr	r3, [r7, #20]
    1d3a:	2238      	movs	r2, #56	; 0x38
    1d3c:	2100      	movs	r1, #0
    1d3e:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    1d40:	697b      	ldr	r3, [r7, #20]
    1d42:	2203      	movs	r2, #3
    1d44:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    1d46:	230f      	movs	r3, #15
    1d48:	18fb      	adds	r3, r7, r3
    1d4a:	781b      	ldrb	r3, [r3, #0]
    1d4c:	2201      	movs	r2, #1
    1d4e:	4013      	ands	r3, r2
    1d50:	d036      	beq.n	1dc0 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1d52:	697b      	ldr	r3, [r7, #20]
    1d54:	68db      	ldr	r3, [r3, #12]
    1d56:	697a      	ldr	r2, [r7, #20]
    1d58:	0010      	movs	r0, r2
    1d5a:	4798      	blx	r3
    1d5c:	e030      	b.n	1dc0 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    1d5e:	697b      	ldr	r3, [r7, #20]
    1d60:	0018      	movs	r0, r3
    1d62:	4b5d      	ldr	r3, [pc, #372]	; (1ed8 <_spi_interrupt_handler+0x308>)
    1d64:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    1d66:	697b      	ldr	r3, [r7, #20]
    1d68:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    1d6a:	b29b      	uxth	r3, r3
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d127      	bne.n	1dc0 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    1d70:	697b      	ldr	r3, [r7, #20]
    1d72:	2238      	movs	r2, #56	; 0x38
    1d74:	2100      	movs	r1, #0
    1d76:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1d78:	693b      	ldr	r3, [r7, #16]
    1d7a:	2204      	movs	r2, #4
    1d7c:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1d7e:	697b      	ldr	r3, [r7, #20]
    1d80:	7a5b      	ldrb	r3, [r3, #9]
    1d82:	b2db      	uxtb	r3, r3
    1d84:	2b02      	cmp	r3, #2
    1d86:	d10b      	bne.n	1da0 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1d88:	230f      	movs	r3, #15
    1d8a:	18fb      	adds	r3, r7, r3
    1d8c:	781b      	ldrb	r3, [r3, #0]
    1d8e:	2204      	movs	r2, #4
    1d90:	4013      	ands	r3, r2
    1d92:	d015      	beq.n	1dc0 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1d94:	697b      	ldr	r3, [r7, #20]
    1d96:	695b      	ldr	r3, [r3, #20]
    1d98:	697a      	ldr	r2, [r7, #20]
    1d9a:	0010      	movs	r0, r2
    1d9c:	4798      	blx	r3
    1d9e:	e00f      	b.n	1dc0 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    1da0:	697b      	ldr	r3, [r7, #20]
    1da2:	7a5b      	ldrb	r3, [r3, #9]
    1da4:	b2db      	uxtb	r3, r3
    1da6:	2b00      	cmp	r3, #0
    1da8:	d10a      	bne.n	1dc0 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1daa:	230f      	movs	r3, #15
    1dac:	18fb      	adds	r3, r7, r3
    1dae:	781b      	ldrb	r3, [r3, #0]
    1db0:	2202      	movs	r2, #2
    1db2:	4013      	ands	r3, r2
    1db4:	d004      	beq.n	1dc0 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1db6:	697b      	ldr	r3, [r7, #20]
    1db8:	691b      	ldr	r3, [r3, #16]
    1dba:	697a      	ldr	r2, [r7, #20]
    1dbc:	0010      	movs	r0, r2
    1dbe:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1dc0:	230c      	movs	r3, #12
    1dc2:	18fb      	adds	r3, r7, r3
    1dc4:	881b      	ldrh	r3, [r3, #0]
    1dc6:	2202      	movs	r2, #2
    1dc8:	4013      	ands	r3, r2
    1dca:	d046      	beq.n	1e5a <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1dcc:	697b      	ldr	r3, [r7, #20]
    1dce:	795b      	ldrb	r3, [r3, #5]
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	d11d      	bne.n	1e10 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1dd4:	693b      	ldr	r3, [r7, #16]
    1dd6:	2207      	movs	r2, #7
    1dd8:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1dda:	693b      	ldr	r3, [r7, #16]
    1ddc:	2202      	movs	r2, #2
    1dde:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    1de0:	697b      	ldr	r3, [r7, #20]
    1de2:	2203      	movs	r2, #3
    1de4:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    1de6:	697b      	ldr	r3, [r7, #20]
    1de8:	2200      	movs	r2, #0
    1dea:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1dec:	697b      	ldr	r3, [r7, #20]
    1dee:	2200      	movs	r2, #0
    1df0:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    1df2:	697b      	ldr	r3, [r7, #20]
    1df4:	2238      	movs	r2, #56	; 0x38
    1df6:	2100      	movs	r1, #0
    1df8:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    1dfa:	230f      	movs	r3, #15
    1dfc:	18fb      	adds	r3, r7, r3
    1dfe:	781b      	ldrb	r3, [r3, #0]
    1e00:	2210      	movs	r2, #16
    1e02:	4013      	ands	r3, r2
    1e04:	d004      	beq.n	1e10 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1e06:	697b      	ldr	r3, [r7, #20]
    1e08:	69db      	ldr	r3, [r3, #28]
    1e0a:	697a      	ldr	r2, [r7, #20]
    1e0c:	0010      	movs	r0, r2
    1e0e:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1e10:	697b      	ldr	r3, [r7, #20]
    1e12:	795b      	ldrb	r3, [r3, #5]
    1e14:	2b01      	cmp	r3, #1
    1e16:	d120      	bne.n	1e5a <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1e18:	697b      	ldr	r3, [r7, #20]
    1e1a:	7a5b      	ldrb	r3, [r3, #9]
    1e1c:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1e1e:	2b01      	cmp	r3, #1
    1e20:	d11b      	bne.n	1e5a <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1e22:	697b      	ldr	r3, [r7, #20]
    1e24:	79db      	ldrb	r3, [r3, #7]
    1e26:	2201      	movs	r2, #1
    1e28:	4053      	eors	r3, r2
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	2b00      	cmp	r3, #0
    1e2e:	d014      	beq.n	1e5a <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1e30:	693b      	ldr	r3, [r7, #16]
    1e32:	2202      	movs	r2, #2
    1e34:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    1e36:	697b      	ldr	r3, [r7, #20]
    1e38:	2203      	movs	r2, #3
    1e3a:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    1e3c:	697b      	ldr	r3, [r7, #20]
    1e3e:	2238      	movs	r2, #56	; 0x38
    1e40:	2100      	movs	r1, #0
    1e42:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1e44:	230f      	movs	r3, #15
    1e46:	18fb      	adds	r3, r7, r3
    1e48:	781b      	ldrb	r3, [r3, #0]
    1e4a:	2201      	movs	r2, #1
    1e4c:	4013      	ands	r3, r2
    1e4e:	d004      	beq.n	1e5a <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1e50:	697b      	ldr	r3, [r7, #20]
    1e52:	68db      	ldr	r3, [r3, #12]
    1e54:	697a      	ldr	r2, [r7, #20]
    1e56:	0010      	movs	r0, r2
    1e58:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    1e5a:	230c      	movs	r3, #12
    1e5c:	18fb      	adds	r3, r7, r3
    1e5e:	881b      	ldrh	r3, [r3, #0]
    1e60:	2208      	movs	r2, #8
    1e62:	4013      	ands	r3, r2
    1e64:	d014      	beq.n	1e90 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    1e66:	697b      	ldr	r3, [r7, #20]
    1e68:	795b      	ldrb	r3, [r3, #5]
    1e6a:	2b00      	cmp	r3, #0
    1e6c:	d110      	bne.n	1e90 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1e6e:	693b      	ldr	r3, [r7, #16]
    1e70:	2208      	movs	r2, #8
    1e72:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1e74:	693b      	ldr	r3, [r7, #16]
    1e76:	2208      	movs	r2, #8
    1e78:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1e7a:	230f      	movs	r3, #15
    1e7c:	18fb      	adds	r3, r7, r3
    1e7e:	781b      	ldrb	r3, [r3, #0]
    1e80:	2220      	movs	r2, #32
    1e82:	4013      	ands	r3, r2
    1e84:	d004      	beq.n	1e90 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1e86:	697b      	ldr	r3, [r7, #20]
    1e88:	6a1b      	ldr	r3, [r3, #32]
    1e8a:	697a      	ldr	r2, [r7, #20]
    1e8c:	0010      	movs	r0, r2
    1e8e:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1e90:	230c      	movs	r3, #12
    1e92:	18fb      	adds	r3, r7, r3
    1e94:	881b      	ldrh	r3, [r3, #0]
    1e96:	2280      	movs	r2, #128	; 0x80
    1e98:	4013      	ands	r3, r2
    1e9a:	d010      	beq.n	1ebe <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1e9c:	693b      	ldr	r3, [r7, #16]
    1e9e:	2280      	movs	r2, #128	; 0x80
    1ea0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1ea2:	693b      	ldr	r3, [r7, #16]
    1ea4:	2280      	movs	r2, #128	; 0x80
    1ea6:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1ea8:	230f      	movs	r3, #15
    1eaa:	18fb      	adds	r3, r7, r3
    1eac:	781b      	ldrb	r3, [r3, #0]
    1eae:	2240      	movs	r2, #64	; 0x40
    1eb0:	4013      	ands	r3, r2
    1eb2:	d004      	beq.n	1ebe <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1eb4:	697b      	ldr	r3, [r7, #20]
    1eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1eb8:	697a      	ldr	r2, [r7, #20]
    1eba:	0010      	movs	r0, r2
    1ebc:	4798      	blx	r3
		}
	}
#  endif
}
    1ebe:	46c0      	nop			; (mov r8, r8)
    1ec0:	46bd      	mov	sp, r7
    1ec2:	b006      	add	sp, #24
    1ec4:	bd80      	pop	{r7, pc}
    1ec6:	46c0      	nop			; (mov r8, r8)
    1ec8:	20000104 	.word	0x20000104
    1ecc:	00001af5 	.word	0x00001af5
    1ed0:	00001a79 	.word	0x00001a79
    1ed4:	00001b29 	.word	0x00001b29
    1ed8:	00001b61 	.word	0x00001b61

00001edc <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    1edc:	b580      	push	{r7, lr}
    1ede:	b082      	sub	sp, #8
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    1ee4:	687b      	ldr	r3, [r7, #4]
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	d00c      	beq.n	1f04 <delay_cycles+0x28>
		SysTick->LOAD = n;
    1eea:	4b08      	ldr	r3, [pc, #32]	; (1f0c <delay_cycles+0x30>)
    1eec:	687a      	ldr	r2, [r7, #4]
    1eee:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    1ef0:	4b06      	ldr	r3, [pc, #24]	; (1f0c <delay_cycles+0x30>)
    1ef2:	2200      	movs	r2, #0
    1ef4:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1ef6:	46c0      	nop			; (mov r8, r8)
    1ef8:	4b04      	ldr	r3, [pc, #16]	; (1f0c <delay_cycles+0x30>)
    1efa:	681a      	ldr	r2, [r3, #0]
    1efc:	2380      	movs	r3, #128	; 0x80
    1efe:	025b      	lsls	r3, r3, #9
    1f00:	4013      	ands	r3, r2
    1f02:	d0f9      	beq.n	1ef8 <delay_cycles+0x1c>
		};
	}
}
    1f04:	46c0      	nop			; (mov r8, r8)
    1f06:	46bd      	mov	sp, r7
    1f08:	b002      	add	sp, #8
    1f0a:	bd80      	pop	{r7, pc}
    1f0c:	e000e010 	.word	0xe000e010

00001f10 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1f10:	b580      	push	{r7, lr}
    1f12:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1f14:	2000      	movs	r0, #0
    1f16:	4b0f      	ldr	r3, [pc, #60]	; (1f54 <delay_init+0x44>)
    1f18:	4798      	blx	r3
    1f1a:	0002      	movs	r2, r0
    1f1c:	4b0e      	ldr	r3, [pc, #56]	; (1f58 <delay_init+0x48>)
    1f1e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    1f20:	4b0d      	ldr	r3, [pc, #52]	; (1f58 <delay_init+0x48>)
    1f22:	6818      	ldr	r0, [r3, #0]
    1f24:	4b0d      	ldr	r3, [pc, #52]	; (1f5c <delay_init+0x4c>)
    1f26:	22fa      	movs	r2, #250	; 0xfa
    1f28:	0091      	lsls	r1, r2, #2
    1f2a:	4798      	blx	r3
    1f2c:	0003      	movs	r3, r0
    1f2e:	001a      	movs	r2, r3
    1f30:	4b09      	ldr	r3, [pc, #36]	; (1f58 <delay_init+0x48>)
    1f32:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1f34:	4b08      	ldr	r3, [pc, #32]	; (1f58 <delay_init+0x48>)
    1f36:	6818      	ldr	r0, [r3, #0]
    1f38:	4b08      	ldr	r3, [pc, #32]	; (1f5c <delay_init+0x4c>)
    1f3a:	22fa      	movs	r2, #250	; 0xfa
    1f3c:	0091      	lsls	r1, r2, #2
    1f3e:	4798      	blx	r3
    1f40:	0003      	movs	r3, r0
    1f42:	001a      	movs	r2, r3
    1f44:	4b06      	ldr	r3, [pc, #24]	; (1f60 <delay_init+0x50>)
    1f46:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1f48:	4b06      	ldr	r3, [pc, #24]	; (1f64 <delay_init+0x54>)
    1f4a:	2205      	movs	r2, #5
    1f4c:	601a      	str	r2, [r3, #0]
}
    1f4e:	46c0      	nop			; (mov r8, r8)
    1f50:	46bd      	mov	sp, r7
    1f52:	bd80      	pop	{r7, pc}
    1f54:	00003e11 	.word	0x00003e11
    1f58:	20000000 	.word	0x20000000
    1f5c:	00004e11 	.word	0x00004e11
    1f60:	20000004 	.word	0x20000004
    1f64:	e000e010 	.word	0xe000e010

00001f68 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1f68:	b580      	push	{r7, lr}
    1f6a:	b082      	sub	sp, #8
    1f6c:	af00      	add	r7, sp, #0
    1f6e:	6078      	str	r0, [r7, #4]
	while (n--) {
    1f70:	e004      	b.n	1f7c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1f72:	4b07      	ldr	r3, [pc, #28]	; (1f90 <delay_cycles_ms+0x28>)
    1f74:	681b      	ldr	r3, [r3, #0]
    1f76:	0018      	movs	r0, r3
    1f78:	4b06      	ldr	r3, [pc, #24]	; (1f94 <delay_cycles_ms+0x2c>)
    1f7a:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    1f7c:	687b      	ldr	r3, [r7, #4]
    1f7e:	1e5a      	subs	r2, r3, #1
    1f80:	607a      	str	r2, [r7, #4]
    1f82:	2b00      	cmp	r3, #0
    1f84:	d1f5      	bne.n	1f72 <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	46bd      	mov	sp, r7
    1f8a:	b002      	add	sp, #8
    1f8c:	bd80      	pop	{r7, pc}
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	20000000 	.word	0x20000000
    1f94:	00001edd 	.word	0x00001edd

00001f98 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1f98:	b580      	push	{r7, lr}
    1f9a:	b082      	sub	sp, #8
    1f9c:	af00      	add	r7, sp, #0
    1f9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1fa0:	687b      	ldr	r3, [r7, #4]
    1fa2:	2200      	movs	r2, #0
    1fa4:	701a      	strb	r2, [r3, #0]
}
    1fa6:	46c0      	nop			; (mov r8, r8)
    1fa8:	46bd      	mov	sp, r7
    1faa:	b002      	add	sp, #8
    1fac:	bd80      	pop	{r7, pc}
    1fae:	46c0      	nop			; (mov r8, r8)

00001fb0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fb2:	b08d      	sub	sp, #52	; 0x34
    1fb4:	af00      	add	r7, sp, #0
    1fb6:	60b8      	str	r0, [r7, #8]
    1fb8:	60f9      	str	r1, [r7, #12]
    1fba:	603a      	str	r2, [r7, #0]
    1fbc:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1fbe:	2300      	movs	r3, #0
    1fc0:	2400      	movs	r4, #0
    1fc2:	623b      	str	r3, [r7, #32]
    1fc4:	627c      	str	r4, [r7, #36]	; 0x24
    1fc6:	2300      	movs	r3, #0
    1fc8:	2400      	movs	r4, #0
    1fca:	61bb      	str	r3, [r7, #24]
    1fcc:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    1fce:	233f      	movs	r3, #63	; 0x3f
    1fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    1fd2:	e053      	b.n	207c <STACK_SIZE+0x7c>
		bit_shift = (uint64_t)1 << i;
    1fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1fd6:	3b20      	subs	r3, #32
    1fd8:	2b00      	cmp	r3, #0
    1fda:	db04      	blt.n	1fe6 <long_division+0x36>
    1fdc:	2201      	movs	r2, #1
    1fde:	409a      	lsls	r2, r3
    1fe0:	0013      	movs	r3, r2
    1fe2:	617b      	str	r3, [r7, #20]
    1fe4:	e00b      	b.n	1ffe <long_division+0x4e>
    1fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1fe8:	2220      	movs	r2, #32
    1fea:	1ad3      	subs	r3, r2, r3
    1fec:	2201      	movs	r2, #1
    1fee:	40da      	lsrs	r2, r3
    1ff0:	0013      	movs	r3, r2
    1ff2:	2100      	movs	r1, #0
    1ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ff6:	4091      	lsls	r1, r2
    1ff8:	000a      	movs	r2, r1
    1ffa:	4313      	orrs	r3, r2
    1ffc:	617b      	str	r3, [r7, #20]
    1ffe:	2201      	movs	r2, #1
    2000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2002:	409a      	lsls	r2, r3
    2004:	0013      	movs	r3, r2
    2006:	613b      	str	r3, [r7, #16]

		r = r << 1;
    2008:	69bb      	ldr	r3, [r7, #24]
    200a:	69fc      	ldr	r4, [r7, #28]
    200c:	18db      	adds	r3, r3, r3
    200e:	4164      	adcs	r4, r4
    2010:	61bb      	str	r3, [r7, #24]
    2012:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    2014:	68bb      	ldr	r3, [r7, #8]
    2016:	693a      	ldr	r2, [r7, #16]
    2018:	401a      	ands	r2, r3
    201a:	0015      	movs	r5, r2
    201c:	68fb      	ldr	r3, [r7, #12]
    201e:	697a      	ldr	r2, [r7, #20]
    2020:	401a      	ands	r2, r3
    2022:	0016      	movs	r6, r2
    2024:	002b      	movs	r3, r5
    2026:	4333      	orrs	r3, r6
    2028:	d007      	beq.n	203a <STACK_SIZE+0x3a>
			r |= 0x01;
    202a:	69bb      	ldr	r3, [r7, #24]
    202c:	2201      	movs	r2, #1
    202e:	4313      	orrs	r3, r2
    2030:	61bb      	str	r3, [r7, #24]
    2032:	69fb      	ldr	r3, [r7, #28]
    2034:	2200      	movs	r2, #0
    2036:	4313      	orrs	r3, r2
    2038:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    203a:	687a      	ldr	r2, [r7, #4]
    203c:	69fb      	ldr	r3, [r7, #28]
    203e:	429a      	cmp	r2, r3
    2040:	d819      	bhi.n	2076 <STACK_SIZE+0x76>
    2042:	687a      	ldr	r2, [r7, #4]
    2044:	69fb      	ldr	r3, [r7, #28]
    2046:	429a      	cmp	r2, r3
    2048:	d103      	bne.n	2052 <STACK_SIZE+0x52>
    204a:	683a      	ldr	r2, [r7, #0]
    204c:	69bb      	ldr	r3, [r7, #24]
    204e:	429a      	cmp	r2, r3
    2050:	d811      	bhi.n	2076 <STACK_SIZE+0x76>
			r = r - d;
    2052:	69b9      	ldr	r1, [r7, #24]
    2054:	69fa      	ldr	r2, [r7, #28]
    2056:	683b      	ldr	r3, [r7, #0]
    2058:	687c      	ldr	r4, [r7, #4]
    205a:	1ac9      	subs	r1, r1, r3
    205c:	41a2      	sbcs	r2, r4
    205e:	000b      	movs	r3, r1
    2060:	0014      	movs	r4, r2
    2062:	61bb      	str	r3, [r7, #24]
    2064:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    2066:	6a3a      	ldr	r2, [r7, #32]
    2068:	693b      	ldr	r3, [r7, #16]
    206a:	4313      	orrs	r3, r2
    206c:	623b      	str	r3, [r7, #32]
    206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2070:	697b      	ldr	r3, [r7, #20]
    2072:	4313      	orrs	r3, r2
    2074:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    2076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2078:	3b01      	subs	r3, #1
    207a:	62fb      	str	r3, [r7, #44]	; 0x2c
    207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    207e:	2b00      	cmp	r3, #0
    2080:	daa8      	bge.n	1fd4 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    2082:	6a3b      	ldr	r3, [r7, #32]
    2084:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    2086:	0018      	movs	r0, r3
    2088:	0021      	movs	r1, r4
    208a:	46bd      	mov	sp, r7
    208c:	b00d      	add	sp, #52	; 0x34
    208e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002090 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2090:	b580      	push	{r7, lr}
    2092:	b086      	sub	sp, #24
    2094:	af00      	add	r7, sp, #0
    2096:	60f8      	str	r0, [r7, #12]
    2098:	60b9      	str	r1, [r7, #8]
    209a:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    209c:	2316      	movs	r3, #22
    209e:	18fb      	adds	r3, r7, r3
    20a0:	2200      	movs	r2, #0
    20a2:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    20a4:	68bb      	ldr	r3, [r7, #8]
    20a6:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    20a8:	68bb      	ldr	r3, [r7, #8]
    20aa:	085a      	lsrs	r2, r3, #1
    20ac:	68fb      	ldr	r3, [r7, #12]
    20ae:	429a      	cmp	r2, r3
    20b0:	d201      	bcs.n	20b6 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    20b2:	2340      	movs	r3, #64	; 0x40
    20b4:	e026      	b.n	2104 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    20b6:	68bb      	ldr	r3, [r7, #8]
    20b8:	085b      	lsrs	r3, r3, #1
    20ba:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    20bc:	e00a      	b.n	20d4 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    20be:	693a      	ldr	r2, [r7, #16]
    20c0:	68fb      	ldr	r3, [r7, #12]
    20c2:	1ad3      	subs	r3, r2, r3
    20c4:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    20c6:	2316      	movs	r3, #22
    20c8:	18fb      	adds	r3, r7, r3
    20ca:	881a      	ldrh	r2, [r3, #0]
    20cc:	2316      	movs	r3, #22
    20ce:	18fb      	adds	r3, r7, r3
    20d0:	3201      	adds	r2, #1
    20d2:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    20d4:	693a      	ldr	r2, [r7, #16]
    20d6:	68fb      	ldr	r3, [r7, #12]
    20d8:	429a      	cmp	r2, r3
    20da:	d2f0      	bcs.n	20be <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    20dc:	2316      	movs	r3, #22
    20de:	18fb      	adds	r3, r7, r3
    20e0:	2216      	movs	r2, #22
    20e2:	18ba      	adds	r2, r7, r2
    20e4:	8812      	ldrh	r2, [r2, #0]
    20e6:	3a01      	subs	r2, #1
    20e8:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    20ea:	2316      	movs	r3, #22
    20ec:	18fb      	adds	r3, r7, r3
    20ee:	881b      	ldrh	r3, [r3, #0]
    20f0:	2bff      	cmp	r3, #255	; 0xff
    20f2:	d901      	bls.n	20f8 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    20f4:	2340      	movs	r3, #64	; 0x40
    20f6:	e005      	b.n	2104 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    20f8:	687b      	ldr	r3, [r7, #4]
    20fa:	2216      	movs	r2, #22
    20fc:	18ba      	adds	r2, r7, r2
    20fe:	8812      	ldrh	r2, [r2, #0]
    2100:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    2102:	2300      	movs	r3, #0
	}
}
    2104:	0018      	movs	r0, r3
    2106:	46bd      	mov	sp, r7
    2108:	b006      	add	sp, #24
    210a:	bd80      	pop	{r7, pc}

0000210c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    210c:	b5f0      	push	{r4, r5, r6, r7, lr}
    210e:	b0a1      	sub	sp, #132	; 0x84
    2110:	af00      	add	r7, sp, #0
    2112:	64f8      	str	r0, [r7, #76]	; 0x4c
    2114:	64b9      	str	r1, [r7, #72]	; 0x48
    2116:	647a      	str	r2, [r7, #68]	; 0x44
    2118:	2243      	movs	r2, #67	; 0x43
    211a:	18ba      	adds	r2, r7, r2
    211c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    211e:	2300      	movs	r3, #0
    2120:	2400      	movs	r4, #0
    2122:	673b      	str	r3, [r7, #112]	; 0x70
    2124:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    2126:	2300      	movs	r3, #0
    2128:	2400      	movs	r4, #0
    212a:	66bb      	str	r3, [r7, #104]	; 0x68
    212c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    212e:	2300      	movs	r3, #0
    2130:	2400      	movs	r4, #0
    2132:	67bb      	str	r3, [r7, #120]	; 0x78
    2134:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    2136:	2300      	movs	r3, #0
    2138:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    213a:	2358      	movs	r3, #88	; 0x58
    213c:	2240      	movs	r2, #64	; 0x40
    213e:	4694      	mov	ip, r2
    2140:	44bc      	add	ip, r7
    2142:	4463      	add	r3, ip
    2144:	781a      	ldrb	r2, [r3, #0]
    2146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2148:	435a      	muls	r2, r3
    214a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    214c:	429a      	cmp	r2, r3
    214e:	d901      	bls.n	2154 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2150:	2340      	movs	r3, #64	; 0x40
    2152:	e0b3      	b.n	22bc <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2154:	2343      	movs	r3, #67	; 0x43
    2156:	18fb      	adds	r3, r7, r3
    2158:	781b      	ldrb	r3, [r3, #0]
    215a:	2b00      	cmp	r3, #0
    215c:	d13d      	bne.n	21da <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    215e:	2358      	movs	r3, #88	; 0x58
    2160:	2240      	movs	r2, #64	; 0x40
    2162:	4694      	mov	ip, r2
    2164:	44bc      	add	ip, r7
    2166:	4463      	add	r3, ip
    2168:	781b      	ldrb	r3, [r3, #0]
    216a:	b2db      	uxtb	r3, r3
    216c:	613b      	str	r3, [r7, #16]
    216e:	2300      	movs	r3, #0
    2170:	617b      	str	r3, [r7, #20]
    2172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2174:	60bb      	str	r3, [r7, #8]
    2176:	2300      	movs	r3, #0
    2178:	60fb      	str	r3, [r7, #12]
    217a:	4c52      	ldr	r4, [pc, #328]	; (22c4 <_sercom_get_async_baud_val+0x1b8>)
    217c:	68ba      	ldr	r2, [r7, #8]
    217e:	68fb      	ldr	r3, [r7, #12]
    2180:	6938      	ldr	r0, [r7, #16]
    2182:	6979      	ldr	r1, [r7, #20]
    2184:	47a0      	blx	r4
    2186:	0003      	movs	r3, r0
    2188:	000c      	movs	r4, r1
    218a:	001b      	movs	r3, r3
    218c:	65fb      	str	r3, [r7, #92]	; 0x5c
    218e:	2300      	movs	r3, #0
    2190:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    2192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2194:	603b      	str	r3, [r7, #0]
    2196:	2300      	movs	r3, #0
    2198:	607b      	str	r3, [r7, #4]
    219a:	6db8      	ldr	r0, [r7, #88]	; 0x58
    219c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    219e:	683a      	ldr	r2, [r7, #0]
    21a0:	687b      	ldr	r3, [r7, #4]
    21a2:	4c49      	ldr	r4, [pc, #292]	; (22c8 <_sercom_get_async_baud_val+0x1bc>)
    21a4:	47a0      	blx	r4
    21a6:	0003      	movs	r3, r0
    21a8:	000c      	movs	r4, r1
    21aa:	673b      	str	r3, [r7, #112]	; 0x70
    21ac:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    21ae:	2100      	movs	r1, #0
    21b0:	2201      	movs	r2, #1
    21b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    21b4:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    21b6:	1ac9      	subs	r1, r1, r3
    21b8:	41a2      	sbcs	r2, r4
    21ba:	000b      	movs	r3, r1
    21bc:	0014      	movs	r4, r2
    21be:	66bb      	str	r3, [r7, #104]	; 0x68
    21c0:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    21c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    21c4:	0c1b      	lsrs	r3, r3, #16
    21c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    21c8:	0416      	lsls	r6, r2, #16
    21ca:	431e      	orrs	r6, r3
    21cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    21ce:	041d      	lsls	r5, r3, #16
    21d0:	0033      	movs	r3, r6
    21d2:	67bb      	str	r3, [r7, #120]	; 0x78
    21d4:	2300      	movs	r3, #0
    21d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    21d8:	e06a      	b.n	22b0 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    21da:	2343      	movs	r3, #67	; 0x43
    21dc:	18fb      	adds	r3, r7, r3
    21de:	781b      	ldrb	r3, [r3, #0]
    21e0:	2b01      	cmp	r3, #1
    21e2:	d165      	bne.n	22b0 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    21e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    21e6:	633b      	str	r3, [r7, #48]	; 0x30
    21e8:	2300      	movs	r3, #0
    21ea:	637b      	str	r3, [r7, #52]	; 0x34
    21ec:	2358      	movs	r3, #88	; 0x58
    21ee:	2240      	movs	r2, #64	; 0x40
    21f0:	4694      	mov	ip, r2
    21f2:	44bc      	add	ip, r7
    21f4:	4463      	add	r3, ip
    21f6:	781b      	ldrb	r3, [r3, #0]
    21f8:	b2db      	uxtb	r3, r3
    21fa:	62bb      	str	r3, [r7, #40]	; 0x28
    21fc:	2300      	movs	r3, #0
    21fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    2200:	4c30      	ldr	r4, [pc, #192]	; (22c4 <_sercom_get_async_baud_val+0x1b8>)
    2202:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2206:	6b38      	ldr	r0, [r7, #48]	; 0x30
    2208:	6b79      	ldr	r1, [r7, #52]	; 0x34
    220a:	47a0      	blx	r4
    220c:	0003      	movs	r3, r0
    220e:	000c      	movs	r4, r1
    2210:	65bb      	str	r3, [r7, #88]	; 0x58
    2212:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    2214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2216:	623b      	str	r3, [r7, #32]
    2218:	2300      	movs	r3, #0
    221a:	627b      	str	r3, [r7, #36]	; 0x24
    221c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    221e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    2220:	001a      	movs	r2, r3
    2222:	0023      	movs	r3, r4
    2224:	6a38      	ldr	r0, [r7, #32]
    2226:	6a79      	ldr	r1, [r7, #36]	; 0x24
    2228:	4c27      	ldr	r4, [pc, #156]	; (22c8 <_sercom_get_async_baud_val+0x1bc>)
    222a:	47a0      	blx	r4
    222c:	0003      	movs	r3, r0
    222e:	000c      	movs	r4, r1
    2230:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    2232:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    2234:	2380      	movs	r3, #128	; 0x80
    2236:	019b      	lsls	r3, r3, #6
    2238:	429a      	cmp	r2, r3
    223a:	d901      	bls.n	2240 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    223c:	2340      	movs	r3, #64	; 0x40
    223e:	e03d      	b.n	22bc <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    2240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2242:	61bb      	str	r3, [r7, #24]
    2244:	2300      	movs	r3, #0
    2246:	61fb      	str	r3, [r7, #28]
    2248:	69b9      	ldr	r1, [r7, #24]
    224a:	69fa      	ldr	r2, [r7, #28]
    224c:	000b      	movs	r3, r1
    224e:	0f5b      	lsrs	r3, r3, #29
    2250:	0010      	movs	r0, r2
    2252:	00c0      	lsls	r0, r0, #3
    2254:	63f8      	str	r0, [r7, #60]	; 0x3c
    2256:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    2258:	4318      	orrs	r0, r3
    225a:	63f8      	str	r0, [r7, #60]	; 0x3c
    225c:	000b      	movs	r3, r1
    225e:	00db      	lsls	r3, r3, #3
    2260:	63bb      	str	r3, [r7, #56]	; 0x38
    2262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2264:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    2266:	001a      	movs	r2, r3
    2268:	0023      	movs	r3, r4
    226a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    226c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    226e:	4c16      	ldr	r4, [pc, #88]	; (22c8 <_sercom_get_async_baud_val+0x1bc>)
    2270:	47a0      	blx	r4
    2272:	0003      	movs	r3, r0
    2274:	000c      	movs	r4, r1
    2276:	65bb      	str	r3, [r7, #88]	; 0x58
    2278:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    227a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    227c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    227e:	b2d9      	uxtb	r1, r3
    2280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2282:	b2db      	uxtb	r3, r3
    2284:	00db      	lsls	r3, r3, #3
    2286:	b2da      	uxtb	r2, r3
    2288:	2317      	movs	r3, #23
    228a:	2040      	movs	r0, #64	; 0x40
    228c:	4684      	mov	ip, r0
    228e:	44bc      	add	ip, r7
    2290:	4463      	add	r3, ip
    2292:	1a8a      	subs	r2, r1, r2
    2294:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    2296:	2317      	movs	r3, #23
    2298:	2240      	movs	r2, #64	; 0x40
    229a:	4694      	mov	ip, r2
    229c:	44bc      	add	ip, r7
    229e:	4463      	add	r3, ip
    22a0:	781b      	ldrb	r3, [r3, #0]
    22a2:	035b      	lsls	r3, r3, #13
    22a4:	001a      	movs	r2, r3
    22a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    22a8:	4313      	orrs	r3, r2
    22aa:	67bb      	str	r3, [r7, #120]	; 0x78
    22ac:	2300      	movs	r3, #0
    22ae:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    22b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    22b2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    22b4:	b29a      	uxth	r2, r3
    22b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    22b8:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    22ba:	2300      	movs	r3, #0
}
    22bc:	0018      	movs	r0, r3
    22be:	46bd      	mov	sp, r7
    22c0:	b021      	add	sp, #132	; 0x84
    22c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22c4:	00004f29 	.word	0x00004f29
    22c8:	00001fb1 	.word	0x00001fb1

000022cc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    22cc:	b580      	push	{r7, lr}
    22ce:	b084      	sub	sp, #16
    22d0:	af00      	add	r7, sp, #0
    22d2:	0002      	movs	r2, r0
    22d4:	1dfb      	adds	r3, r7, #7
    22d6:	701a      	strb	r2, [r3, #0]
    22d8:	1dbb      	adds	r3, r7, #6
    22da:	1c0a      	adds	r2, r1, #0
    22dc:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    22de:	4b1a      	ldr	r3, [pc, #104]	; (2348 <sercom_set_gclk_generator+0x7c>)
    22e0:	781b      	ldrb	r3, [r3, #0]
    22e2:	2201      	movs	r2, #1
    22e4:	4053      	eors	r3, r2
    22e6:	b2db      	uxtb	r3, r3
    22e8:	2b00      	cmp	r3, #0
    22ea:	d103      	bne.n	22f4 <sercom_set_gclk_generator+0x28>
    22ec:	1dbb      	adds	r3, r7, #6
    22ee:	781b      	ldrb	r3, [r3, #0]
    22f0:	2b00      	cmp	r3, #0
    22f2:	d01b      	beq.n	232c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    22f4:	230c      	movs	r3, #12
    22f6:	18fb      	adds	r3, r7, r3
    22f8:	0018      	movs	r0, r3
    22fa:	4b14      	ldr	r3, [pc, #80]	; (234c <sercom_set_gclk_generator+0x80>)
    22fc:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    22fe:	230c      	movs	r3, #12
    2300:	18fb      	adds	r3, r7, r3
    2302:	1dfa      	adds	r2, r7, #7
    2304:	7812      	ldrb	r2, [r2, #0]
    2306:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2308:	230c      	movs	r3, #12
    230a:	18fb      	adds	r3, r7, r3
    230c:	0019      	movs	r1, r3
    230e:	2013      	movs	r0, #19
    2310:	4b0f      	ldr	r3, [pc, #60]	; (2350 <sercom_set_gclk_generator+0x84>)
    2312:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2314:	2013      	movs	r0, #19
    2316:	4b0f      	ldr	r3, [pc, #60]	; (2354 <sercom_set_gclk_generator+0x88>)
    2318:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    231a:	4b0b      	ldr	r3, [pc, #44]	; (2348 <sercom_set_gclk_generator+0x7c>)
    231c:	1dfa      	adds	r2, r7, #7
    231e:	7812      	ldrb	r2, [r2, #0]
    2320:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    2322:	4b09      	ldr	r3, [pc, #36]	; (2348 <sercom_set_gclk_generator+0x7c>)
    2324:	2201      	movs	r2, #1
    2326:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    2328:	2300      	movs	r3, #0
    232a:	e008      	b.n	233e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    232c:	4b06      	ldr	r3, [pc, #24]	; (2348 <sercom_set_gclk_generator+0x7c>)
    232e:	785b      	ldrb	r3, [r3, #1]
    2330:	1dfa      	adds	r2, r7, #7
    2332:	7812      	ldrb	r2, [r2, #0]
    2334:	429a      	cmp	r2, r3
    2336:	d101      	bne.n	233c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    2338:	2300      	movs	r3, #0
    233a:	e000      	b.n	233e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    233c:	231d      	movs	r3, #29
}
    233e:	0018      	movs	r0, r3
    2340:	46bd      	mov	sp, r7
    2342:	b004      	add	sp, #16
    2344:	bd80      	pop	{r7, pc}
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	20000098 	.word	0x20000098
    234c:	00001f99 	.word	0x00001f99
    2350:	00003ee9 	.word	0x00003ee9
    2354:	00003f2d 	.word	0x00003f2d

00002358 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    2358:	b580      	push	{r7, lr}
    235a:	b082      	sub	sp, #8
    235c:	af00      	add	r7, sp, #0
    235e:	6078      	str	r0, [r7, #4]
    2360:	000a      	movs	r2, r1
    2362:	1cfb      	adds	r3, r7, #3
    2364:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	4a4d      	ldr	r2, [pc, #308]	; (24a0 <_sercom_get_default_pad+0x148>)
    236a:	4293      	cmp	r3, r2
    236c:	d03f      	beq.n	23ee <_sercom_get_default_pad+0x96>
    236e:	4a4c      	ldr	r2, [pc, #304]	; (24a0 <_sercom_get_default_pad+0x148>)
    2370:	4293      	cmp	r3, r2
    2372:	d806      	bhi.n	2382 <_sercom_get_default_pad+0x2a>
    2374:	4a4b      	ldr	r2, [pc, #300]	; (24a4 <_sercom_get_default_pad+0x14c>)
    2376:	4293      	cmp	r3, r2
    2378:	d00f      	beq.n	239a <_sercom_get_default_pad+0x42>
    237a:	4a4b      	ldr	r2, [pc, #300]	; (24a8 <_sercom_get_default_pad+0x150>)
    237c:	4293      	cmp	r3, r2
    237e:	d021      	beq.n	23c4 <_sercom_get_default_pad+0x6c>
    2380:	e089      	b.n	2496 <_sercom_get_default_pad+0x13e>
    2382:	4a4a      	ldr	r2, [pc, #296]	; (24ac <_sercom_get_default_pad+0x154>)
    2384:	4293      	cmp	r3, r2
    2386:	d100      	bne.n	238a <_sercom_get_default_pad+0x32>
    2388:	e05b      	b.n	2442 <_sercom_get_default_pad+0xea>
    238a:	4a49      	ldr	r2, [pc, #292]	; (24b0 <_sercom_get_default_pad+0x158>)
    238c:	4293      	cmp	r3, r2
    238e:	d100      	bne.n	2392 <_sercom_get_default_pad+0x3a>
    2390:	e06c      	b.n	246c <_sercom_get_default_pad+0x114>
    2392:	4a48      	ldr	r2, [pc, #288]	; (24b4 <_sercom_get_default_pad+0x15c>)
    2394:	4293      	cmp	r3, r2
    2396:	d03f      	beq.n	2418 <_sercom_get_default_pad+0xc0>
    2398:	e07d      	b.n	2496 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    239a:	1cfb      	adds	r3, r7, #3
    239c:	781b      	ldrb	r3, [r3, #0]
    239e:	2b01      	cmp	r3, #1
    23a0:	d00a      	beq.n	23b8 <_sercom_get_default_pad+0x60>
    23a2:	dc02      	bgt.n	23aa <_sercom_get_default_pad+0x52>
    23a4:	2b00      	cmp	r3, #0
    23a6:	d005      	beq.n	23b4 <_sercom_get_default_pad+0x5c>
    23a8:	e075      	b.n	2496 <_sercom_get_default_pad+0x13e>
    23aa:	2b02      	cmp	r3, #2
    23ac:	d006      	beq.n	23bc <_sercom_get_default_pad+0x64>
    23ae:	2b03      	cmp	r3, #3
    23b0:	d006      	beq.n	23c0 <_sercom_get_default_pad+0x68>
    23b2:	e070      	b.n	2496 <_sercom_get_default_pad+0x13e>
    23b4:	4b40      	ldr	r3, [pc, #256]	; (24b8 <_sercom_get_default_pad+0x160>)
    23b6:	e06f      	b.n	2498 <_sercom_get_default_pad+0x140>
    23b8:	4b40      	ldr	r3, [pc, #256]	; (24bc <_sercom_get_default_pad+0x164>)
    23ba:	e06d      	b.n	2498 <_sercom_get_default_pad+0x140>
    23bc:	4b40      	ldr	r3, [pc, #256]	; (24c0 <_sercom_get_default_pad+0x168>)
    23be:	e06b      	b.n	2498 <_sercom_get_default_pad+0x140>
    23c0:	4b40      	ldr	r3, [pc, #256]	; (24c4 <_sercom_get_default_pad+0x16c>)
    23c2:	e069      	b.n	2498 <_sercom_get_default_pad+0x140>
    23c4:	1cfb      	adds	r3, r7, #3
    23c6:	781b      	ldrb	r3, [r3, #0]
    23c8:	2b01      	cmp	r3, #1
    23ca:	d00a      	beq.n	23e2 <_sercom_get_default_pad+0x8a>
    23cc:	dc02      	bgt.n	23d4 <_sercom_get_default_pad+0x7c>
    23ce:	2b00      	cmp	r3, #0
    23d0:	d005      	beq.n	23de <_sercom_get_default_pad+0x86>
    23d2:	e060      	b.n	2496 <_sercom_get_default_pad+0x13e>
    23d4:	2b02      	cmp	r3, #2
    23d6:	d006      	beq.n	23e6 <_sercom_get_default_pad+0x8e>
    23d8:	2b03      	cmp	r3, #3
    23da:	d006      	beq.n	23ea <_sercom_get_default_pad+0x92>
    23dc:	e05b      	b.n	2496 <_sercom_get_default_pad+0x13e>
    23de:	2303      	movs	r3, #3
    23e0:	e05a      	b.n	2498 <_sercom_get_default_pad+0x140>
    23e2:	4b39      	ldr	r3, [pc, #228]	; (24c8 <_sercom_get_default_pad+0x170>)
    23e4:	e058      	b.n	2498 <_sercom_get_default_pad+0x140>
    23e6:	4b39      	ldr	r3, [pc, #228]	; (24cc <_sercom_get_default_pad+0x174>)
    23e8:	e056      	b.n	2498 <_sercom_get_default_pad+0x140>
    23ea:	4b39      	ldr	r3, [pc, #228]	; (24d0 <_sercom_get_default_pad+0x178>)
    23ec:	e054      	b.n	2498 <_sercom_get_default_pad+0x140>
    23ee:	1cfb      	adds	r3, r7, #3
    23f0:	781b      	ldrb	r3, [r3, #0]
    23f2:	2b01      	cmp	r3, #1
    23f4:	d00a      	beq.n	240c <_sercom_get_default_pad+0xb4>
    23f6:	dc02      	bgt.n	23fe <_sercom_get_default_pad+0xa6>
    23f8:	2b00      	cmp	r3, #0
    23fa:	d005      	beq.n	2408 <_sercom_get_default_pad+0xb0>
    23fc:	e04b      	b.n	2496 <_sercom_get_default_pad+0x13e>
    23fe:	2b02      	cmp	r3, #2
    2400:	d006      	beq.n	2410 <_sercom_get_default_pad+0xb8>
    2402:	2b03      	cmp	r3, #3
    2404:	d006      	beq.n	2414 <_sercom_get_default_pad+0xbc>
    2406:	e046      	b.n	2496 <_sercom_get_default_pad+0x13e>
    2408:	4b32      	ldr	r3, [pc, #200]	; (24d4 <_sercom_get_default_pad+0x17c>)
    240a:	e045      	b.n	2498 <_sercom_get_default_pad+0x140>
    240c:	4b32      	ldr	r3, [pc, #200]	; (24d8 <_sercom_get_default_pad+0x180>)
    240e:	e043      	b.n	2498 <_sercom_get_default_pad+0x140>
    2410:	4b32      	ldr	r3, [pc, #200]	; (24dc <_sercom_get_default_pad+0x184>)
    2412:	e041      	b.n	2498 <_sercom_get_default_pad+0x140>
    2414:	4b32      	ldr	r3, [pc, #200]	; (24e0 <_sercom_get_default_pad+0x188>)
    2416:	e03f      	b.n	2498 <_sercom_get_default_pad+0x140>
    2418:	1cfb      	adds	r3, r7, #3
    241a:	781b      	ldrb	r3, [r3, #0]
    241c:	2b01      	cmp	r3, #1
    241e:	d00a      	beq.n	2436 <_sercom_get_default_pad+0xde>
    2420:	dc02      	bgt.n	2428 <_sercom_get_default_pad+0xd0>
    2422:	2b00      	cmp	r3, #0
    2424:	d005      	beq.n	2432 <_sercom_get_default_pad+0xda>
    2426:	e036      	b.n	2496 <_sercom_get_default_pad+0x13e>
    2428:	2b02      	cmp	r3, #2
    242a:	d006      	beq.n	243a <_sercom_get_default_pad+0xe2>
    242c:	2b03      	cmp	r3, #3
    242e:	d006      	beq.n	243e <_sercom_get_default_pad+0xe6>
    2430:	e031      	b.n	2496 <_sercom_get_default_pad+0x13e>
    2432:	4b2c      	ldr	r3, [pc, #176]	; (24e4 <_sercom_get_default_pad+0x18c>)
    2434:	e030      	b.n	2498 <_sercom_get_default_pad+0x140>
    2436:	4b2c      	ldr	r3, [pc, #176]	; (24e8 <_sercom_get_default_pad+0x190>)
    2438:	e02e      	b.n	2498 <_sercom_get_default_pad+0x140>
    243a:	4b2c      	ldr	r3, [pc, #176]	; (24ec <_sercom_get_default_pad+0x194>)
    243c:	e02c      	b.n	2498 <_sercom_get_default_pad+0x140>
    243e:	4b2c      	ldr	r3, [pc, #176]	; (24f0 <_sercom_get_default_pad+0x198>)
    2440:	e02a      	b.n	2498 <_sercom_get_default_pad+0x140>
    2442:	1cfb      	adds	r3, r7, #3
    2444:	781b      	ldrb	r3, [r3, #0]
    2446:	2b01      	cmp	r3, #1
    2448:	d00a      	beq.n	2460 <_sercom_get_default_pad+0x108>
    244a:	dc02      	bgt.n	2452 <_sercom_get_default_pad+0xfa>
    244c:	2b00      	cmp	r3, #0
    244e:	d005      	beq.n	245c <_sercom_get_default_pad+0x104>
    2450:	e021      	b.n	2496 <_sercom_get_default_pad+0x13e>
    2452:	2b02      	cmp	r3, #2
    2454:	d006      	beq.n	2464 <_sercom_get_default_pad+0x10c>
    2456:	2b03      	cmp	r3, #3
    2458:	d006      	beq.n	2468 <_sercom_get_default_pad+0x110>
    245a:	e01c      	b.n	2496 <_sercom_get_default_pad+0x13e>
    245c:	4b25      	ldr	r3, [pc, #148]	; (24f4 <_sercom_get_default_pad+0x19c>)
    245e:	e01b      	b.n	2498 <_sercom_get_default_pad+0x140>
    2460:	4b25      	ldr	r3, [pc, #148]	; (24f8 <_sercom_get_default_pad+0x1a0>)
    2462:	e019      	b.n	2498 <_sercom_get_default_pad+0x140>
    2464:	4b25      	ldr	r3, [pc, #148]	; (24fc <_sercom_get_default_pad+0x1a4>)
    2466:	e017      	b.n	2498 <_sercom_get_default_pad+0x140>
    2468:	4b25      	ldr	r3, [pc, #148]	; (2500 <_sercom_get_default_pad+0x1a8>)
    246a:	e015      	b.n	2498 <_sercom_get_default_pad+0x140>
    246c:	1cfb      	adds	r3, r7, #3
    246e:	781b      	ldrb	r3, [r3, #0]
    2470:	2b01      	cmp	r3, #1
    2472:	d00a      	beq.n	248a <_sercom_get_default_pad+0x132>
    2474:	dc02      	bgt.n	247c <_sercom_get_default_pad+0x124>
    2476:	2b00      	cmp	r3, #0
    2478:	d005      	beq.n	2486 <_sercom_get_default_pad+0x12e>
    247a:	e00c      	b.n	2496 <_sercom_get_default_pad+0x13e>
    247c:	2b02      	cmp	r3, #2
    247e:	d006      	beq.n	248e <_sercom_get_default_pad+0x136>
    2480:	2b03      	cmp	r3, #3
    2482:	d006      	beq.n	2492 <_sercom_get_default_pad+0x13a>
    2484:	e007      	b.n	2496 <_sercom_get_default_pad+0x13e>
    2486:	4b1f      	ldr	r3, [pc, #124]	; (2504 <_sercom_get_default_pad+0x1ac>)
    2488:	e006      	b.n	2498 <_sercom_get_default_pad+0x140>
    248a:	4b1f      	ldr	r3, [pc, #124]	; (2508 <_sercom_get_default_pad+0x1b0>)
    248c:	e004      	b.n	2498 <_sercom_get_default_pad+0x140>
    248e:	4b1f      	ldr	r3, [pc, #124]	; (250c <_sercom_get_default_pad+0x1b4>)
    2490:	e002      	b.n	2498 <_sercom_get_default_pad+0x140>
    2492:	4b1f      	ldr	r3, [pc, #124]	; (2510 <_sercom_get_default_pad+0x1b8>)
    2494:	e000      	b.n	2498 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    2496:	2300      	movs	r3, #0
}
    2498:	0018      	movs	r0, r3
    249a:	46bd      	mov	sp, r7
    249c:	b002      	add	sp, #8
    249e:	bd80      	pop	{r7, pc}
    24a0:	42001000 	.word	0x42001000
    24a4:	42000800 	.word	0x42000800
    24a8:	42000c00 	.word	0x42000c00
    24ac:	42001800 	.word	0x42001800
    24b0:	42001c00 	.word	0x42001c00
    24b4:	42001400 	.word	0x42001400
    24b8:	00040003 	.word	0x00040003
    24bc:	00050003 	.word	0x00050003
    24c0:	00060003 	.word	0x00060003
    24c4:	00070003 	.word	0x00070003
    24c8:	00010003 	.word	0x00010003
    24cc:	001e0003 	.word	0x001e0003
    24d0:	001f0003 	.word	0x001f0003
    24d4:	00080003 	.word	0x00080003
    24d8:	00090003 	.word	0x00090003
    24dc:	000a0003 	.word	0x000a0003
    24e0:	000b0003 	.word	0x000b0003
    24e4:	00100003 	.word	0x00100003
    24e8:	00110003 	.word	0x00110003
    24ec:	00120003 	.word	0x00120003
    24f0:	00130003 	.word	0x00130003
    24f4:	000c0003 	.word	0x000c0003
    24f8:	000d0003 	.word	0x000d0003
    24fc:	000e0003 	.word	0x000e0003
    2500:	000f0003 	.word	0x000f0003
    2504:	00160003 	.word	0x00160003
    2508:	00170003 	.word	0x00170003
    250c:	00180003 	.word	0x00180003
    2510:	00190003 	.word	0x00190003

00002514 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2514:	b590      	push	{r4, r7, lr}
    2516:	b08b      	sub	sp, #44	; 0x2c
    2518:	af00      	add	r7, sp, #0
    251a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    251c:	230c      	movs	r3, #12
    251e:	18fb      	adds	r3, r7, r3
    2520:	4a0f      	ldr	r2, [pc, #60]	; (2560 <_sercom_get_sercom_inst_index+0x4c>)
    2522:	ca13      	ldmia	r2!, {r0, r1, r4}
    2524:	c313      	stmia	r3!, {r0, r1, r4}
    2526:	ca13      	ldmia	r2!, {r0, r1, r4}
    2528:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    252a:	2300      	movs	r3, #0
    252c:	627b      	str	r3, [r7, #36]	; 0x24
    252e:	e00e      	b.n	254e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2530:	230c      	movs	r3, #12
    2532:	18fb      	adds	r3, r7, r3
    2534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2536:	0092      	lsls	r2, r2, #2
    2538:	58d3      	ldr	r3, [r2, r3]
    253a:	1e1a      	subs	r2, r3, #0
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	429a      	cmp	r2, r3
    2540:	d102      	bne.n	2548 <_sercom_get_sercom_inst_index+0x34>
			return i;
    2542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2544:	b2db      	uxtb	r3, r3
    2546:	e006      	b.n	2556 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    254a:	3301      	adds	r3, #1
    254c:	627b      	str	r3, [r7, #36]	; 0x24
    254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2550:	2b05      	cmp	r3, #5
    2552:	d9ed      	bls.n	2530 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2554:	2300      	movs	r3, #0
}
    2556:	0018      	movs	r0, r3
    2558:	46bd      	mov	sp, r7
    255a:	b00b      	add	sp, #44	; 0x2c
    255c:	bd90      	pop	{r4, r7, pc}
    255e:	46c0      	nop			; (mov r8, r8)
    2560:	000060e0 	.word	0x000060e0

00002564 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2564:	b580      	push	{r7, lr}
    2566:	b082      	sub	sp, #8
    2568:	af00      	add	r7, sp, #0
    256a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    256c:	687b      	ldr	r3, [r7, #4]
    256e:	2200      	movs	r2, #0
    2570:	701a      	strb	r2, [r3, #0]
}
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	46bd      	mov	sp, r7
    2576:	b002      	add	sp, #8
    2578:	bd80      	pop	{r7, pc}
    257a:	46c0      	nop			; (mov r8, r8)

0000257c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    257c:	b580      	push	{r7, lr}
    257e:	b082      	sub	sp, #8
    2580:	af00      	add	r7, sp, #0
    2582:	0002      	movs	r2, r0
    2584:	6039      	str	r1, [r7, #0]
    2586:	1dfb      	adds	r3, r7, #7
    2588:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    258a:	1dfb      	adds	r3, r7, #7
    258c:	781b      	ldrb	r3, [r3, #0]
    258e:	2b01      	cmp	r3, #1
    2590:	d00a      	beq.n	25a8 <system_apb_clock_set_mask+0x2c>
    2592:	2b02      	cmp	r3, #2
    2594:	d00f      	beq.n	25b6 <system_apb_clock_set_mask+0x3a>
    2596:	2b00      	cmp	r3, #0
    2598:	d114      	bne.n	25c4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    259a:	4b0e      	ldr	r3, [pc, #56]	; (25d4 <system_apb_clock_set_mask+0x58>)
    259c:	4a0d      	ldr	r2, [pc, #52]	; (25d4 <system_apb_clock_set_mask+0x58>)
    259e:	6991      	ldr	r1, [r2, #24]
    25a0:	683a      	ldr	r2, [r7, #0]
    25a2:	430a      	orrs	r2, r1
    25a4:	619a      	str	r2, [r3, #24]
			break;
    25a6:	e00f      	b.n	25c8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    25a8:	4b0a      	ldr	r3, [pc, #40]	; (25d4 <system_apb_clock_set_mask+0x58>)
    25aa:	4a0a      	ldr	r2, [pc, #40]	; (25d4 <system_apb_clock_set_mask+0x58>)
    25ac:	69d1      	ldr	r1, [r2, #28]
    25ae:	683a      	ldr	r2, [r7, #0]
    25b0:	430a      	orrs	r2, r1
    25b2:	61da      	str	r2, [r3, #28]
			break;
    25b4:	e008      	b.n	25c8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    25b6:	4b07      	ldr	r3, [pc, #28]	; (25d4 <system_apb_clock_set_mask+0x58>)
    25b8:	4a06      	ldr	r2, [pc, #24]	; (25d4 <system_apb_clock_set_mask+0x58>)
    25ba:	6a11      	ldr	r1, [r2, #32]
    25bc:	683a      	ldr	r2, [r7, #0]
    25be:	430a      	orrs	r2, r1
    25c0:	621a      	str	r2, [r3, #32]
			break;
    25c2:	e001      	b.n	25c8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    25c4:	2317      	movs	r3, #23
    25c6:	e000      	b.n	25ca <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    25c8:	2300      	movs	r3, #0
}
    25ca:	0018      	movs	r0, r3
    25cc:	46bd      	mov	sp, r7
    25ce:	b002      	add	sp, #8
    25d0:	bd80      	pop	{r7, pc}
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	40000400 	.word	0x40000400

000025d8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    25d8:	b580      	push	{r7, lr}
    25da:	b082      	sub	sp, #8
    25dc:	af00      	add	r7, sp, #0
    25de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    25e0:	687b      	ldr	r3, [r7, #4]
    25e2:	2280      	movs	r2, #128	; 0x80
    25e4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    25e6:	687b      	ldr	r3, [r7, #4]
    25e8:	2200      	movs	r2, #0
    25ea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    25ec:	687b      	ldr	r3, [r7, #4]
    25ee:	2201      	movs	r2, #1
    25f0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	2200      	movs	r2, #0
    25f6:	70da      	strb	r2, [r3, #3]
}
    25f8:	46c0      	nop			; (mov r8, r8)
    25fa:	46bd      	mov	sp, r7
    25fc:	b002      	add	sp, #8
    25fe:	bd80      	pop	{r7, pc}

00002600 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    2600:	b580      	push	{r7, lr}
    2602:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2604:	4b05      	ldr	r3, [pc, #20]	; (261c <system_is_debugger_present+0x1c>)
    2606:	789b      	ldrb	r3, [r3, #2]
    2608:	b2db      	uxtb	r3, r3
    260a:	001a      	movs	r2, r3
    260c:	2302      	movs	r3, #2
    260e:	4013      	ands	r3, r2
    2610:	1e5a      	subs	r2, r3, #1
    2612:	4193      	sbcs	r3, r2
    2614:	b2db      	uxtb	r3, r3
}
    2616:	0018      	movs	r0, r3
    2618:	46bd      	mov	sp, r7
    261a:	bd80      	pop	{r7, pc}
    261c:	41002000 	.word	0x41002000

00002620 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    2620:	b580      	push	{r7, lr}
    2622:	b084      	sub	sp, #16
    2624:	af00      	add	r7, sp, #0
    2626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2628:	687b      	ldr	r3, [r7, #4]
    262a:	681b      	ldr	r3, [r3, #0]
    262c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    262e:	68fb      	ldr	r3, [r7, #12]
    2630:	69db      	ldr	r3, [r3, #28]
    2632:	1e5a      	subs	r2, r3, #1
    2634:	4193      	sbcs	r3, r2
    2636:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    2638:	0018      	movs	r0, r3
    263a:	46bd      	mov	sp, r7
    263c:	b004      	add	sp, #16
    263e:	bd80      	pop	{r7, pc}

00002640 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    2640:	b580      	push	{r7, lr}
    2642:	b082      	sub	sp, #8
    2644:	af00      	add	r7, sp, #0
    2646:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2648:	46c0      	nop			; (mov r8, r8)
    264a:	687b      	ldr	r3, [r7, #4]
    264c:	0018      	movs	r0, r3
    264e:	4b04      	ldr	r3, [pc, #16]	; (2660 <_usart_wait_for_sync+0x20>)
    2650:	4798      	blx	r3
    2652:	1e03      	subs	r3, r0, #0
    2654:	d1f9      	bne.n	264a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    2656:	46c0      	nop			; (mov r8, r8)
    2658:	46bd      	mov	sp, r7
    265a:	b002      	add	sp, #8
    265c:	bd80      	pop	{r7, pc}
    265e:	46c0      	nop			; (mov r8, r8)
    2660:	00002621 	.word	0x00002621

00002664 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    2664:	b5b0      	push	{r4, r5, r7, lr}
    2666:	b08c      	sub	sp, #48	; 0x30
    2668:	af02      	add	r7, sp, #8
    266a:	6078      	str	r0, [r7, #4]
    266c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    266e:	687b      	ldr	r3, [r7, #4]
    2670:	681b      	ldr	r3, [r3, #0]
    2672:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2674:	687b      	ldr	r3, [r7, #4]
    2676:	681b      	ldr	r3, [r3, #0]
    2678:	0018      	movs	r0, r3
    267a:	4bab      	ldr	r3, [pc, #684]	; (2928 <_usart_set_config+0x2c4>)
    267c:	4798      	blx	r3
    267e:	0003      	movs	r3, r0
    2680:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2682:	697b      	ldr	r3, [r7, #20]
    2684:	3314      	adds	r3, #20
    2686:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    2688:	2300      	movs	r3, #0
    268a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    268c:	2300      	movs	r3, #0
    268e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    2690:	230a      	movs	r3, #10
    2692:	18fb      	adds	r3, r7, r3
    2694:	2200      	movs	r2, #0
    2696:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2698:	231f      	movs	r3, #31
    269a:	18fb      	adds	r3, r7, r3
    269c:	2200      	movs	r2, #0
    269e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    26a0:	231e      	movs	r3, #30
    26a2:	18fb      	adds	r3, r7, r3
    26a4:	2210      	movs	r2, #16
    26a6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    26a8:	683b      	ldr	r3, [r7, #0]
    26aa:	8a1b      	ldrh	r3, [r3, #16]
    26ac:	2280      	movs	r2, #128	; 0x80
    26ae:	01d2      	lsls	r2, r2, #7
    26b0:	4293      	cmp	r3, r2
    26b2:	d01c      	beq.n	26ee <_usart_set_config+0x8a>
    26b4:	2280      	movs	r2, #128	; 0x80
    26b6:	01d2      	lsls	r2, r2, #7
    26b8:	4293      	cmp	r3, r2
    26ba:	dc06      	bgt.n	26ca <_usart_set_config+0x66>
    26bc:	2b00      	cmp	r3, #0
    26be:	d00d      	beq.n	26dc <_usart_set_config+0x78>
    26c0:	2280      	movs	r2, #128	; 0x80
    26c2:	0192      	lsls	r2, r2, #6
    26c4:	4293      	cmp	r3, r2
    26c6:	d024      	beq.n	2712 <_usart_set_config+0xae>
    26c8:	e035      	b.n	2736 <_usart_set_config+0xd2>
    26ca:	22c0      	movs	r2, #192	; 0xc0
    26cc:	01d2      	lsls	r2, r2, #7
    26ce:	4293      	cmp	r3, r2
    26d0:	d028      	beq.n	2724 <_usart_set_config+0xc0>
    26d2:	2280      	movs	r2, #128	; 0x80
    26d4:	0212      	lsls	r2, r2, #8
    26d6:	4293      	cmp	r3, r2
    26d8:	d012      	beq.n	2700 <_usart_set_config+0x9c>
    26da:	e02c      	b.n	2736 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    26dc:	231f      	movs	r3, #31
    26de:	18fb      	adds	r3, r7, r3
    26e0:	2200      	movs	r2, #0
    26e2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    26e4:	231e      	movs	r3, #30
    26e6:	18fb      	adds	r3, r7, r3
    26e8:	2210      	movs	r2, #16
    26ea:	701a      	strb	r2, [r3, #0]
			break;
    26ec:	e023      	b.n	2736 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    26ee:	231f      	movs	r3, #31
    26f0:	18fb      	adds	r3, r7, r3
    26f2:	2200      	movs	r2, #0
    26f4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    26f6:	231e      	movs	r3, #30
    26f8:	18fb      	adds	r3, r7, r3
    26fa:	2208      	movs	r2, #8
    26fc:	701a      	strb	r2, [r3, #0]
			break;
    26fe:	e01a      	b.n	2736 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2700:	231f      	movs	r3, #31
    2702:	18fb      	adds	r3, r7, r3
    2704:	2200      	movs	r2, #0
    2706:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2708:	231e      	movs	r3, #30
    270a:	18fb      	adds	r3, r7, r3
    270c:	2203      	movs	r2, #3
    270e:	701a      	strb	r2, [r3, #0]
			break;
    2710:	e011      	b.n	2736 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2712:	231f      	movs	r3, #31
    2714:	18fb      	adds	r3, r7, r3
    2716:	2201      	movs	r2, #1
    2718:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    271a:	231e      	movs	r3, #30
    271c:	18fb      	adds	r3, r7, r3
    271e:	2210      	movs	r2, #16
    2720:	701a      	strb	r2, [r3, #0]
			break;
    2722:	e008      	b.n	2736 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2724:	231f      	movs	r3, #31
    2726:	18fb      	adds	r3, r7, r3
    2728:	2201      	movs	r2, #1
    272a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    272c:	231e      	movs	r3, #30
    272e:	18fb      	adds	r3, r7, r3
    2730:	2208      	movs	r2, #8
    2732:	701a      	strb	r2, [r3, #0]
			break;
    2734:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    2736:	683b      	ldr	r3, [r7, #0]
    2738:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    273a:	683b      	ldr	r3, [r7, #0]
    273c:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    273e:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    2740:	683b      	ldr	r3, [r7, #0]
    2742:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    2744:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    2746:	683a      	ldr	r2, [r7, #0]
    2748:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    274a:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    274c:	683a      	ldr	r2, [r7, #0]
    274e:	7e12      	ldrb	r2, [r2, #24]
    2750:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    2752:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2754:	683a      	ldr	r2, [r7, #0]
    2756:	2126      	movs	r1, #38	; 0x26
    2758:	5c52      	ldrb	r2, [r2, r1]
    275a:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    275c:	4313      	orrs	r3, r2
    275e:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    2760:	231d      	movs	r3, #29
    2762:	18fb      	adds	r3, r7, r3
    2764:	2200      	movs	r2, #0
    2766:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    2768:	683b      	ldr	r3, [r7, #0]
    276a:	685b      	ldr	r3, [r3, #4]
    276c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    276e:	68fb      	ldr	r3, [r7, #12]
    2770:	2b00      	cmp	r3, #0
    2772:	d01e      	beq.n	27b2 <_usart_set_config+0x14e>
    2774:	2280      	movs	r2, #128	; 0x80
    2776:	0552      	lsls	r2, r2, #21
    2778:	4293      	cmp	r3, r2
    277a:	d14f      	bne.n	281c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    277c:	683b      	ldr	r3, [r7, #0]
    277e:	2227      	movs	r2, #39	; 0x27
    2780:	5c9b      	ldrb	r3, [r3, r2]
    2782:	2201      	movs	r2, #1
    2784:	4053      	eors	r3, r2
    2786:	b2db      	uxtb	r3, r3
    2788:	2b00      	cmp	r3, #0
    278a:	d046      	beq.n	281a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    278c:	683b      	ldr	r3, [r7, #0]
    278e:	6a1d      	ldr	r5, [r3, #32]
    2790:	693b      	ldr	r3, [r7, #16]
    2792:	b2db      	uxtb	r3, r3
    2794:	0018      	movs	r0, r3
    2796:	4b65      	ldr	r3, [pc, #404]	; (292c <_usart_set_config+0x2c8>)
    2798:	4798      	blx	r3
    279a:	0001      	movs	r1, r0
    279c:	231d      	movs	r3, #29
    279e:	18fc      	adds	r4, r7, r3
    27a0:	230a      	movs	r3, #10
    27a2:	18fb      	adds	r3, r7, r3
    27a4:	001a      	movs	r2, r3
    27a6:	0028      	movs	r0, r5
    27a8:	4b61      	ldr	r3, [pc, #388]	; (2930 <_usart_set_config+0x2cc>)
    27aa:	4798      	blx	r3
    27ac:	0003      	movs	r3, r0
    27ae:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    27b0:	e033      	b.n	281a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    27b2:	683b      	ldr	r3, [r7, #0]
    27b4:	2227      	movs	r2, #39	; 0x27
    27b6:	5c9b      	ldrb	r3, [r3, r2]
    27b8:	2b00      	cmp	r3, #0
    27ba:	d014      	beq.n	27e6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    27bc:	683b      	ldr	r3, [r7, #0]
    27be:	6a18      	ldr	r0, [r3, #32]
    27c0:	683b      	ldr	r3, [r7, #0]
    27c2:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    27c4:	231d      	movs	r3, #29
    27c6:	18fc      	adds	r4, r7, r3
    27c8:	231f      	movs	r3, #31
    27ca:	18fb      	adds	r3, r7, r3
    27cc:	781d      	ldrb	r5, [r3, #0]
    27ce:	230a      	movs	r3, #10
    27d0:	18fa      	adds	r2, r7, r3
    27d2:	231e      	movs	r3, #30
    27d4:	18fb      	adds	r3, r7, r3
    27d6:	781b      	ldrb	r3, [r3, #0]
    27d8:	9300      	str	r3, [sp, #0]
    27da:	002b      	movs	r3, r5
    27dc:	4d55      	ldr	r5, [pc, #340]	; (2934 <_usart_set_config+0x2d0>)
    27de:	47a8      	blx	r5
    27e0:	0003      	movs	r3, r0
    27e2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    27e4:	e01a      	b.n	281c <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    27e6:	683b      	ldr	r3, [r7, #0]
    27e8:	6a1d      	ldr	r5, [r3, #32]
    27ea:	693b      	ldr	r3, [r7, #16]
    27ec:	b2db      	uxtb	r3, r3
    27ee:	0018      	movs	r0, r3
    27f0:	4b4e      	ldr	r3, [pc, #312]	; (292c <_usart_set_config+0x2c8>)
    27f2:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    27f4:	231d      	movs	r3, #29
    27f6:	18fc      	adds	r4, r7, r3
    27f8:	231f      	movs	r3, #31
    27fa:	18fb      	adds	r3, r7, r3
    27fc:	7819      	ldrb	r1, [r3, #0]
    27fe:	230a      	movs	r3, #10
    2800:	18fa      	adds	r2, r7, r3
    2802:	231e      	movs	r3, #30
    2804:	18fb      	adds	r3, r7, r3
    2806:	781b      	ldrb	r3, [r3, #0]
    2808:	9300      	str	r3, [sp, #0]
    280a:	000b      	movs	r3, r1
    280c:	0001      	movs	r1, r0
    280e:	0028      	movs	r0, r5
    2810:	4d48      	ldr	r5, [pc, #288]	; (2934 <_usart_set_config+0x2d0>)
    2812:	47a8      	blx	r5
    2814:	0003      	movs	r3, r0
    2816:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    2818:	e000      	b.n	281c <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    281a:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    281c:	231d      	movs	r3, #29
    281e:	18fb      	adds	r3, r7, r3
    2820:	781b      	ldrb	r3, [r3, #0]
    2822:	2b00      	cmp	r3, #0
    2824:	d003      	beq.n	282e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    2826:	231d      	movs	r3, #29
    2828:	18fb      	adds	r3, r7, r3
    282a:	781b      	ldrb	r3, [r3, #0]
    282c:	e077      	b.n	291e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    282e:	683b      	ldr	r3, [r7, #0]
    2830:	7e5b      	ldrb	r3, [r3, #25]
    2832:	2b00      	cmp	r3, #0
    2834:	d003      	beq.n	283e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2836:	683b      	ldr	r3, [r7, #0]
    2838:	7e9a      	ldrb	r2, [r3, #26]
    283a:	69bb      	ldr	r3, [r7, #24]
    283c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    283e:	687b      	ldr	r3, [r7, #4]
    2840:	0018      	movs	r0, r3
    2842:	4b3d      	ldr	r3, [pc, #244]	; (2938 <_usart_set_config+0x2d4>)
    2844:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    2846:	230a      	movs	r3, #10
    2848:	18fb      	adds	r3, r7, r3
    284a:	881a      	ldrh	r2, [r3, #0]
    284c:	69bb      	ldr	r3, [r7, #24]
    284e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    2850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2852:	68fb      	ldr	r3, [r7, #12]
    2854:	4313      	orrs	r3, r2
    2856:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    2858:	683b      	ldr	r3, [r7, #0]
    285a:	2227      	movs	r2, #39	; 0x27
    285c:	5c9b      	ldrb	r3, [r3, r2]
    285e:	2201      	movs	r2, #1
    2860:	4053      	eors	r3, r2
    2862:	b2db      	uxtb	r3, r3
    2864:	2b00      	cmp	r3, #0
    2866:	d003      	beq.n	2870 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    286a:	2204      	movs	r2, #4
    286c:	4313      	orrs	r3, r2
    286e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2870:	683b      	ldr	r3, [r7, #0]
    2872:	7e5b      	ldrb	r3, [r3, #25]
    2874:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2876:	683b      	ldr	r3, [r7, #0]
    2878:	7f1b      	ldrb	r3, [r3, #28]
    287a:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    287c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    287e:	683b      	ldr	r3, [r7, #0]
    2880:	7f5b      	ldrb	r3, [r3, #29]
    2882:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2884:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2886:	683b      	ldr	r3, [r7, #0]
    2888:	2124      	movs	r1, #36	; 0x24
    288a:	5c5b      	ldrb	r3, [r3, r1]
    288c:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    288e:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2890:	683b      	ldr	r3, [r7, #0]
    2892:	2125      	movs	r1, #37	; 0x25
    2894:	5c5b      	ldrb	r3, [r3, r1]
    2896:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2898:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    289a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    289c:	683b      	ldr	r3, [r7, #0]
    289e:	7a9b      	ldrb	r3, [r3, #10]
    28a0:	001a      	movs	r2, r3
    28a2:	6a3b      	ldr	r3, [r7, #32]
    28a4:	4313      	orrs	r3, r2
    28a6:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    28a8:	683b      	ldr	r3, [r7, #0]
    28aa:	7adb      	ldrb	r3, [r3, #11]
    28ac:	001a      	movs	r2, r3
    28ae:	6a3b      	ldr	r3, [r7, #32]
    28b0:	4313      	orrs	r3, r2
    28b2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    28b4:	683b      	ldr	r3, [r7, #0]
    28b6:	891b      	ldrh	r3, [r3, #8]
    28b8:	2bff      	cmp	r3, #255	; 0xff
    28ba:	d00b      	beq.n	28d4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    28bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28be:	2280      	movs	r2, #128	; 0x80
    28c0:	0452      	lsls	r2, r2, #17
    28c2:	4313      	orrs	r3, r2
    28c4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    28c6:	683b      	ldr	r3, [r7, #0]
    28c8:	891b      	ldrh	r3, [r3, #8]
    28ca:	001a      	movs	r2, r3
    28cc:	6a3b      	ldr	r3, [r7, #32]
    28ce:	4313      	orrs	r3, r2
    28d0:	623b      	str	r3, [r7, #32]
    28d2:	e008      	b.n	28e6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    28d4:	683b      	ldr	r3, [r7, #0]
    28d6:	7edb      	ldrb	r3, [r3, #27]
    28d8:	2b00      	cmp	r3, #0
    28da:	d004      	beq.n	28e6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    28dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28de:	2280      	movs	r2, #128	; 0x80
    28e0:	04d2      	lsls	r2, r2, #19
    28e2:	4313      	orrs	r3, r2
    28e4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    28e6:	683b      	ldr	r3, [r7, #0]
    28e8:	222c      	movs	r2, #44	; 0x2c
    28ea:	5c9b      	ldrb	r3, [r3, r2]
    28ec:	2b00      	cmp	r3, #0
    28ee:	d103      	bne.n	28f8 <_usart_set_config+0x294>
    28f0:	4b12      	ldr	r3, [pc, #72]	; (293c <_usart_set_config+0x2d8>)
    28f2:	4798      	blx	r3
    28f4:	1e03      	subs	r3, r0, #0
    28f6:	d003      	beq.n	2900 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    28f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28fa:	2280      	movs	r2, #128	; 0x80
    28fc:	4313      	orrs	r3, r2
    28fe:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2900:	687b      	ldr	r3, [r7, #4]
    2902:	0018      	movs	r0, r3
    2904:	4b0c      	ldr	r3, [pc, #48]	; (2938 <_usart_set_config+0x2d4>)
    2906:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    2908:	69bb      	ldr	r3, [r7, #24]
    290a:	6a3a      	ldr	r2, [r7, #32]
    290c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    290e:	687b      	ldr	r3, [r7, #4]
    2910:	0018      	movs	r0, r3
    2912:	4b09      	ldr	r3, [pc, #36]	; (2938 <_usart_set_config+0x2d4>)
    2914:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    2916:	69bb      	ldr	r3, [r7, #24]
    2918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    291a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    291c:	2300      	movs	r3, #0
}
    291e:	0018      	movs	r0, r3
    2920:	46bd      	mov	sp, r7
    2922:	b00a      	add	sp, #40	; 0x28
    2924:	bdb0      	pop	{r4, r5, r7, pc}
    2926:	46c0      	nop			; (mov r8, r8)
    2928:	00002515 	.word	0x00002515
    292c:	0000400d 	.word	0x0000400d
    2930:	00002091 	.word	0x00002091
    2934:	0000210d 	.word	0x0000210d
    2938:	00002641 	.word	0x00002641
    293c:	00002601 	.word	0x00002601

00002940 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2940:	b590      	push	{r4, r7, lr}
    2942:	b093      	sub	sp, #76	; 0x4c
    2944:	af00      	add	r7, sp, #0
    2946:	60f8      	str	r0, [r7, #12]
    2948:	60b9      	str	r1, [r7, #8]
    294a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    294c:	233b      	movs	r3, #59	; 0x3b
    294e:	18fb      	adds	r3, r7, r3
    2950:	2200      	movs	r2, #0
    2952:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2954:	68fb      	ldr	r3, [r7, #12]
    2956:	68ba      	ldr	r2, [r7, #8]
    2958:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    295a:	68fb      	ldr	r3, [r7, #12]
    295c:	681b      	ldr	r3, [r3, #0]
    295e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2960:	68fb      	ldr	r3, [r7, #12]
    2962:	681b      	ldr	r3, [r3, #0]
    2964:	0018      	movs	r0, r3
    2966:	4b86      	ldr	r3, [pc, #536]	; (2b80 <usart_init+0x240>)
    2968:	4798      	blx	r3
    296a:	0003      	movs	r3, r0
    296c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2970:	3302      	adds	r3, #2
    2972:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2976:	3314      	adds	r3, #20
    2978:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    297a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    297c:	681b      	ldr	r3, [r3, #0]
    297e:	2201      	movs	r2, #1
    2980:	4013      	ands	r3, r2
    2982:	d001      	beq.n	2988 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2984:	2305      	movs	r3, #5
    2986:	e0f6      	b.n	2b76 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    298a:	681b      	ldr	r3, [r3, #0]
    298c:	2202      	movs	r2, #2
    298e:	4013      	ands	r3, r2
    2990:	d001      	beq.n	2996 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    2992:	231c      	movs	r3, #28
    2994:	e0ef      	b.n	2b76 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2996:	2201      	movs	r2, #1
    2998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    299a:	409a      	lsls	r2, r3
    299c:	0013      	movs	r3, r2
    299e:	0019      	movs	r1, r3
    29a0:	2002      	movs	r0, #2
    29a2:	4b78      	ldr	r3, [pc, #480]	; (2b84 <usart_init+0x244>)
    29a4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    29a6:	2324      	movs	r3, #36	; 0x24
    29a8:	18fb      	adds	r3, r7, r3
    29aa:	0018      	movs	r0, r3
    29ac:	4b76      	ldr	r3, [pc, #472]	; (2b88 <usart_init+0x248>)
    29ae:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    29b0:	687b      	ldr	r3, [r7, #4]
    29b2:	222d      	movs	r2, #45	; 0x2d
    29b4:	5c9a      	ldrb	r2, [r3, r2]
    29b6:	2324      	movs	r3, #36	; 0x24
    29b8:	18fb      	adds	r3, r7, r3
    29ba:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    29bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    29be:	b2db      	uxtb	r3, r3
    29c0:	2224      	movs	r2, #36	; 0x24
    29c2:	18ba      	adds	r2, r7, r2
    29c4:	0011      	movs	r1, r2
    29c6:	0018      	movs	r0, r3
    29c8:	4b70      	ldr	r3, [pc, #448]	; (2b8c <usart_init+0x24c>)
    29ca:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    29cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    29ce:	b2db      	uxtb	r3, r3
    29d0:	0018      	movs	r0, r3
    29d2:	4b6f      	ldr	r3, [pc, #444]	; (2b90 <usart_init+0x250>)
    29d4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    29d6:	687b      	ldr	r3, [r7, #4]
    29d8:	222d      	movs	r2, #45	; 0x2d
    29da:	5c9b      	ldrb	r3, [r3, r2]
    29dc:	2100      	movs	r1, #0
    29de:	0018      	movs	r0, r3
    29e0:	4b6c      	ldr	r3, [pc, #432]	; (2b94 <usart_init+0x254>)
    29e2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    29e4:	687b      	ldr	r3, [r7, #4]
    29e6:	7ada      	ldrb	r2, [r3, #11]
    29e8:	68fb      	ldr	r3, [r7, #12]
    29ea:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    29ec:	687b      	ldr	r3, [r7, #4]
    29ee:	2224      	movs	r2, #36	; 0x24
    29f0:	5c9a      	ldrb	r2, [r3, r2]
    29f2:	68fb      	ldr	r3, [r7, #12]
    29f4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    29f6:	687b      	ldr	r3, [r7, #4]
    29f8:	2225      	movs	r2, #37	; 0x25
    29fa:	5c9a      	ldrb	r2, [r3, r2]
    29fc:	68fb      	ldr	r3, [r7, #12]
    29fe:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    2a00:	687b      	ldr	r3, [r7, #4]
    2a02:	7eda      	ldrb	r2, [r3, #27]
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	7f1a      	ldrb	r2, [r3, #28]
    2a0c:	68fb      	ldr	r3, [r7, #12]
    2a0e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    2a10:	233b      	movs	r3, #59	; 0x3b
    2a12:	18fc      	adds	r4, r7, r3
    2a14:	687a      	ldr	r2, [r7, #4]
    2a16:	68fb      	ldr	r3, [r7, #12]
    2a18:	0011      	movs	r1, r2
    2a1a:	0018      	movs	r0, r3
    2a1c:	4b5e      	ldr	r3, [pc, #376]	; (2b98 <usart_init+0x258>)
    2a1e:	4798      	blx	r3
    2a20:	0003      	movs	r3, r0
    2a22:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    2a24:	233b      	movs	r3, #59	; 0x3b
    2a26:	18fb      	adds	r3, r7, r3
    2a28:	781b      	ldrb	r3, [r3, #0]
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d003      	beq.n	2a36 <usart_init+0xf6>
		return status_code;
    2a2e:	233b      	movs	r3, #59	; 0x3b
    2a30:	18fb      	adds	r3, r7, r3
    2a32:	781b      	ldrb	r3, [r3, #0]
    2a34:	e09f      	b.n	2b76 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    2a36:	2320      	movs	r3, #32
    2a38:	18fb      	adds	r3, r7, r3
    2a3a:	0018      	movs	r0, r3
    2a3c:	4b57      	ldr	r3, [pc, #348]	; (2b9c <usart_init+0x25c>)
    2a3e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2a40:	2320      	movs	r3, #32
    2a42:	18fb      	adds	r3, r7, r3
    2a44:	2200      	movs	r2, #0
    2a46:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2a48:	2320      	movs	r3, #32
    2a4a:	18fb      	adds	r3, r7, r3
    2a4c:	2200      	movs	r2, #0
    2a4e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    2a50:	687b      	ldr	r3, [r7, #4]
    2a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    2a54:	2310      	movs	r3, #16
    2a56:	18fb      	adds	r3, r7, r3
    2a58:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    2a5a:	687b      	ldr	r3, [r7, #4]
    2a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    2a5e:	2310      	movs	r3, #16
    2a60:	18fb      	adds	r3, r7, r3
    2a62:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    2a64:	687b      	ldr	r3, [r7, #4]
    2a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    2a68:	2310      	movs	r3, #16
    2a6a:	18fb      	adds	r3, r7, r3
    2a6c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    2a6e:	687b      	ldr	r3, [r7, #4]
    2a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    2a72:	2310      	movs	r3, #16
    2a74:	18fb      	adds	r3, r7, r3
    2a76:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2a78:	2347      	movs	r3, #71	; 0x47
    2a7a:	18fb      	adds	r3, r7, r3
    2a7c:	2200      	movs	r2, #0
    2a7e:	701a      	strb	r2, [r3, #0]
    2a80:	e02c      	b.n	2adc <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2a82:	2347      	movs	r3, #71	; 0x47
    2a84:	18fb      	adds	r3, r7, r3
    2a86:	781a      	ldrb	r2, [r3, #0]
    2a88:	2310      	movs	r3, #16
    2a8a:	18fb      	adds	r3, r7, r3
    2a8c:	0092      	lsls	r2, r2, #2
    2a8e:	58d3      	ldr	r3, [r2, r3]
    2a90:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    2a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2a94:	2b00      	cmp	r3, #0
    2a96:	d109      	bne.n	2aac <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2a98:	2347      	movs	r3, #71	; 0x47
    2a9a:	18fb      	adds	r3, r7, r3
    2a9c:	781a      	ldrb	r2, [r3, #0]
    2a9e:	68bb      	ldr	r3, [r7, #8]
    2aa0:	0011      	movs	r1, r2
    2aa2:	0018      	movs	r0, r3
    2aa4:	4b3e      	ldr	r3, [pc, #248]	; (2ba0 <usart_init+0x260>)
    2aa6:	4798      	blx	r3
    2aa8:	0003      	movs	r3, r0
    2aaa:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2aae:	3301      	adds	r3, #1
    2ab0:	d00d      	beq.n	2ace <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2ab4:	b2da      	uxtb	r2, r3
    2ab6:	2320      	movs	r3, #32
    2ab8:	18fb      	adds	r3, r7, r3
    2aba:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2abe:	0c1b      	lsrs	r3, r3, #16
    2ac0:	b2db      	uxtb	r3, r3
    2ac2:	2220      	movs	r2, #32
    2ac4:	18ba      	adds	r2, r7, r2
    2ac6:	0011      	movs	r1, r2
    2ac8:	0018      	movs	r0, r3
    2aca:	4b36      	ldr	r3, [pc, #216]	; (2ba4 <usart_init+0x264>)
    2acc:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2ace:	2347      	movs	r3, #71	; 0x47
    2ad0:	18fb      	adds	r3, r7, r3
    2ad2:	781a      	ldrb	r2, [r3, #0]
    2ad4:	2347      	movs	r3, #71	; 0x47
    2ad6:	18fb      	adds	r3, r7, r3
    2ad8:	3201      	adds	r2, #1
    2ada:	701a      	strb	r2, [r3, #0]
    2adc:	2347      	movs	r3, #71	; 0x47
    2ade:	18fb      	adds	r3, r7, r3
    2ae0:	781b      	ldrb	r3, [r3, #0]
    2ae2:	2b03      	cmp	r3, #3
    2ae4:	d9cd      	bls.n	2a82 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    2ae6:	2300      	movs	r3, #0
    2ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
    2aea:	e00a      	b.n	2b02 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    2aec:	68fa      	ldr	r2, [r7, #12]
    2aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2af0:	3302      	adds	r3, #2
    2af2:	009b      	lsls	r3, r3, #2
    2af4:	18d3      	adds	r3, r2, r3
    2af6:	3304      	adds	r3, #4
    2af8:	2200      	movs	r2, #0
    2afa:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    2afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2afe:	3301      	adds	r3, #1
    2b00:	63fb      	str	r3, [r7, #60]	; 0x3c
    2b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2b04:	2b05      	cmp	r3, #5
    2b06:	d9f1      	bls.n	2aec <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    2b08:	68fb      	ldr	r3, [r7, #12]
    2b0a:	2200      	movs	r2, #0
    2b0c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2b0e:	68fb      	ldr	r3, [r7, #12]
    2b10:	2200      	movs	r2, #0
    2b12:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2b14:	68fb      	ldr	r3, [r7, #12]
    2b16:	2200      	movs	r2, #0
    2b18:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2b1a:	68fb      	ldr	r3, [r7, #12]
    2b1c:	2200      	movs	r2, #0
    2b1e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2b20:	68fb      	ldr	r3, [r7, #12]
    2b22:	2230      	movs	r2, #48	; 0x30
    2b24:	2100      	movs	r1, #0
    2b26:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    2b28:	68fb      	ldr	r3, [r7, #12]
    2b2a:	2231      	movs	r2, #49	; 0x31
    2b2c:	2100      	movs	r1, #0
    2b2e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    2b30:	68fb      	ldr	r3, [r7, #12]
    2b32:	2232      	movs	r2, #50	; 0x32
    2b34:	2100      	movs	r1, #0
    2b36:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    2b38:	68fb      	ldr	r3, [r7, #12]
    2b3a:	2233      	movs	r2, #51	; 0x33
    2b3c:	2100      	movs	r1, #0
    2b3e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2b40:	68fb      	ldr	r3, [r7, #12]
    2b42:	681b      	ldr	r3, [r3, #0]
    2b44:	2227      	movs	r2, #39	; 0x27
    2b46:	18bc      	adds	r4, r7, r2
    2b48:	0018      	movs	r0, r3
    2b4a:	4b0d      	ldr	r3, [pc, #52]	; (2b80 <usart_init+0x240>)
    2b4c:	4798      	blx	r3
    2b4e:	0003      	movs	r3, r0
    2b50:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2b52:	4a15      	ldr	r2, [pc, #84]	; (2ba8 <usart_init+0x268>)
    2b54:	2327      	movs	r3, #39	; 0x27
    2b56:	18fb      	adds	r3, r7, r3
    2b58:	781b      	ldrb	r3, [r3, #0]
    2b5a:	0011      	movs	r1, r2
    2b5c:	0018      	movs	r0, r3
    2b5e:	4b13      	ldr	r3, [pc, #76]	; (2bac <usart_init+0x26c>)
    2b60:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2b62:	2327      	movs	r3, #39	; 0x27
    2b64:	18fb      	adds	r3, r7, r3
    2b66:	781a      	ldrb	r2, [r3, #0]
    2b68:	4b11      	ldr	r3, [pc, #68]	; (2bb0 <usart_init+0x270>)
    2b6a:	0092      	lsls	r2, r2, #2
    2b6c:	68f9      	ldr	r1, [r7, #12]
    2b6e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    2b70:	233b      	movs	r3, #59	; 0x3b
    2b72:	18fb      	adds	r3, r7, r3
    2b74:	781b      	ldrb	r3, [r3, #0]
}
    2b76:	0018      	movs	r0, r3
    2b78:	46bd      	mov	sp, r7
    2b7a:	b013      	add	sp, #76	; 0x4c
    2b7c:	bd90      	pop	{r4, r7, pc}
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	00002515 	.word	0x00002515
    2b84:	0000257d 	.word	0x0000257d
    2b88:	00002565 	.word	0x00002565
    2b8c:	00003ee9 	.word	0x00003ee9
    2b90:	00003f2d 	.word	0x00003f2d
    2b94:	000022cd 	.word	0x000022cd
    2b98:	00002665 	.word	0x00002665
    2b9c:	000025d9 	.word	0x000025d9
    2ba0:	00002359 	.word	0x00002359
    2ba4:	000041d5 	.word	0x000041d5
    2ba8:	00002d49 	.word	0x00002d49
    2bac:	0000309d 	.word	0x0000309d
    2bb0:	20000104 	.word	0x20000104

00002bb4 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    2bb4:	b580      	push	{r7, lr}
    2bb6:	b084      	sub	sp, #16
    2bb8:	af00      	add	r7, sp, #0
    2bba:	6078      	str	r0, [r7, #4]
    2bbc:	000a      	movs	r2, r1
    2bbe:	1cbb      	adds	r3, r7, #2
    2bc0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bc2:	687b      	ldr	r3, [r7, #4]
    2bc4:	681b      	ldr	r3, [r3, #0]
    2bc6:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2bc8:	687b      	ldr	r3, [r7, #4]
    2bca:	79db      	ldrb	r3, [r3, #7]
    2bcc:	2201      	movs	r2, #1
    2bce:	4053      	eors	r3, r2
    2bd0:	b2db      	uxtb	r3, r3
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	d001      	beq.n	2bda <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    2bd6:	231c      	movs	r3, #28
    2bd8:	e017      	b.n	2c0a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2bda:	687b      	ldr	r3, [r7, #4]
    2bdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2bde:	b29b      	uxth	r3, r3
    2be0:	2b00      	cmp	r3, #0
    2be2:	d001      	beq.n	2be8 <usart_write_wait+0x34>
		return STATUS_BUSY;
    2be4:	2305      	movs	r3, #5
    2be6:	e010      	b.n	2c0a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2be8:	687b      	ldr	r3, [r7, #4]
    2bea:	0018      	movs	r0, r3
    2bec:	4b09      	ldr	r3, [pc, #36]	; (2c14 <usart_write_wait+0x60>)
    2bee:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    2bf0:	68fb      	ldr	r3, [r7, #12]
    2bf2:	1cba      	adds	r2, r7, #2
    2bf4:	8812      	ldrh	r2, [r2, #0]
    2bf6:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2bf8:	46c0      	nop			; (mov r8, r8)
    2bfa:	68fb      	ldr	r3, [r7, #12]
    2bfc:	7e1b      	ldrb	r3, [r3, #24]
    2bfe:	b2db      	uxtb	r3, r3
    2c00:	001a      	movs	r2, r3
    2c02:	2302      	movs	r3, #2
    2c04:	4013      	ands	r3, r2
    2c06:	d0f8      	beq.n	2bfa <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    2c08:	2300      	movs	r3, #0
}
    2c0a:	0018      	movs	r0, r3
    2c0c:	46bd      	mov	sp, r7
    2c0e:	b004      	add	sp, #16
    2c10:	bd80      	pop	{r7, pc}
    2c12:	46c0      	nop			; (mov r8, r8)
    2c14:	00002641 	.word	0x00002641

00002c18 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    2c18:	b580      	push	{r7, lr}
    2c1a:	b084      	sub	sp, #16
    2c1c:	af00      	add	r7, sp, #0
    2c1e:	6078      	str	r0, [r7, #4]
    2c20:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c22:	687b      	ldr	r3, [r7, #4]
    2c24:	681b      	ldr	r3, [r3, #0]
    2c26:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2c28:	687b      	ldr	r3, [r7, #4]
    2c2a:	799b      	ldrb	r3, [r3, #6]
    2c2c:	2201      	movs	r2, #1
    2c2e:	4053      	eors	r3, r2
    2c30:	b2db      	uxtb	r3, r3
    2c32:	2b00      	cmp	r3, #0
    2c34:	d001      	beq.n	2c3a <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    2c36:	231c      	movs	r3, #28
    2c38:	e05e      	b.n	2cf8 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    2c3a:	687b      	ldr	r3, [r7, #4]
    2c3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2c3e:	b29b      	uxth	r3, r3
    2c40:	2b00      	cmp	r3, #0
    2c42:	d001      	beq.n	2c48 <usart_read_wait+0x30>
		return STATUS_BUSY;
    2c44:	2305      	movs	r3, #5
    2c46:	e057      	b.n	2cf8 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2c48:	68fb      	ldr	r3, [r7, #12]
    2c4a:	7e1b      	ldrb	r3, [r3, #24]
    2c4c:	b2db      	uxtb	r3, r3
    2c4e:	001a      	movs	r2, r3
    2c50:	2304      	movs	r3, #4
    2c52:	4013      	ands	r3, r2
    2c54:	d101      	bne.n	2c5a <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    2c56:	2305      	movs	r3, #5
    2c58:	e04e      	b.n	2cf8 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2c5a:	687b      	ldr	r3, [r7, #4]
    2c5c:	0018      	movs	r0, r3
    2c5e:	4b28      	ldr	r3, [pc, #160]	; (2d00 <usart_read_wait+0xe8>)
    2c60:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c62:	68fb      	ldr	r3, [r7, #12]
    2c64:	8b5b      	ldrh	r3, [r3, #26]
    2c66:	b29b      	uxth	r3, r3
    2c68:	b2da      	uxtb	r2, r3
    2c6a:	230b      	movs	r3, #11
    2c6c:	18fb      	adds	r3, r7, r3
    2c6e:	213f      	movs	r1, #63	; 0x3f
    2c70:	400a      	ands	r2, r1
    2c72:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    2c74:	230b      	movs	r3, #11
    2c76:	18fb      	adds	r3, r7, r3
    2c78:	781b      	ldrb	r3, [r3, #0]
    2c7a:	2b00      	cmp	r3, #0
    2c7c:	d036      	beq.n	2cec <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2c7e:	230b      	movs	r3, #11
    2c80:	18fb      	adds	r3, r7, r3
    2c82:	781b      	ldrb	r3, [r3, #0]
    2c84:	2202      	movs	r2, #2
    2c86:	4013      	ands	r3, r2
    2c88:	d004      	beq.n	2c94 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2c8a:	68fb      	ldr	r3, [r7, #12]
    2c8c:	2202      	movs	r2, #2
    2c8e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    2c90:	231a      	movs	r3, #26
    2c92:	e031      	b.n	2cf8 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2c94:	230b      	movs	r3, #11
    2c96:	18fb      	adds	r3, r7, r3
    2c98:	781b      	ldrb	r3, [r3, #0]
    2c9a:	2204      	movs	r2, #4
    2c9c:	4013      	ands	r3, r2
    2c9e:	d004      	beq.n	2caa <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2ca0:	68fb      	ldr	r3, [r7, #12]
    2ca2:	2204      	movs	r2, #4
    2ca4:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    2ca6:	231e      	movs	r3, #30
    2ca8:	e026      	b.n	2cf8 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2caa:	230b      	movs	r3, #11
    2cac:	18fb      	adds	r3, r7, r3
    2cae:	781b      	ldrb	r3, [r3, #0]
    2cb0:	2201      	movs	r2, #1
    2cb2:	4013      	ands	r3, r2
    2cb4:	d004      	beq.n	2cc0 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2cb6:	68fb      	ldr	r3, [r7, #12]
    2cb8:	2201      	movs	r2, #1
    2cba:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    2cbc:	2313      	movs	r3, #19
    2cbe:	e01b      	b.n	2cf8 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2cc0:	230b      	movs	r3, #11
    2cc2:	18fb      	adds	r3, r7, r3
    2cc4:	781b      	ldrb	r3, [r3, #0]
    2cc6:	2210      	movs	r2, #16
    2cc8:	4013      	ands	r3, r2
    2cca:	d004      	beq.n	2cd6 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2ccc:	68fb      	ldr	r3, [r7, #12]
    2cce:	2210      	movs	r2, #16
    2cd0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    2cd2:	2342      	movs	r3, #66	; 0x42
    2cd4:	e010      	b.n	2cf8 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2cd6:	230b      	movs	r3, #11
    2cd8:	18fb      	adds	r3, r7, r3
    2cda:	781b      	ldrb	r3, [r3, #0]
    2cdc:	2220      	movs	r2, #32
    2cde:	4013      	ands	r3, r2
    2ce0:	d004      	beq.n	2cec <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2ce2:	68fb      	ldr	r3, [r7, #12]
    2ce4:	2220      	movs	r2, #32
    2ce6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    2ce8:	2341      	movs	r3, #65	; 0x41
    2cea:	e005      	b.n	2cf8 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    2cec:	68fb      	ldr	r3, [r7, #12]
    2cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2cf0:	b29a      	uxth	r2, r3
    2cf2:	683b      	ldr	r3, [r7, #0]
    2cf4:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    2cf6:	2300      	movs	r3, #0
}
    2cf8:	0018      	movs	r0, r3
    2cfa:	46bd      	mov	sp, r7
    2cfc:	b004      	add	sp, #16
    2cfe:	bd80      	pop	{r7, pc}
    2d00:	00002641 	.word	0x00002641

00002d04 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    2d04:	b580      	push	{r7, lr}
    2d06:	b084      	sub	sp, #16
    2d08:	af00      	add	r7, sp, #0
    2d0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2d0c:	687b      	ldr	r3, [r7, #4]
    2d0e:	681b      	ldr	r3, [r3, #0]
    2d10:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2d12:	68fb      	ldr	r3, [r7, #12]
    2d14:	69db      	ldr	r3, [r3, #28]
    2d16:	1e5a      	subs	r2, r3, #1
    2d18:	4193      	sbcs	r3, r2
    2d1a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    2d1c:	0018      	movs	r0, r3
    2d1e:	46bd      	mov	sp, r7
    2d20:	b004      	add	sp, #16
    2d22:	bd80      	pop	{r7, pc}

00002d24 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    2d24:	b580      	push	{r7, lr}
    2d26:	b082      	sub	sp, #8
    2d28:	af00      	add	r7, sp, #0
    2d2a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2d2c:	46c0      	nop			; (mov r8, r8)
    2d2e:	687b      	ldr	r3, [r7, #4]
    2d30:	0018      	movs	r0, r3
    2d32:	4b04      	ldr	r3, [pc, #16]	; (2d44 <_usart_wait_for_sync+0x20>)
    2d34:	4798      	blx	r3
    2d36:	1e03      	subs	r3, r0, #0
    2d38:	d1f9      	bne.n	2d2e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    2d3a:	46c0      	nop			; (mov r8, r8)
    2d3c:	46bd      	mov	sp, r7
    2d3e:	b002      	add	sp, #8
    2d40:	bd80      	pop	{r7, pc}
    2d42:	46c0      	nop			; (mov r8, r8)
    2d44:	00002d05 	.word	0x00002d05

00002d48 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	b088      	sub	sp, #32
    2d4c:	af00      	add	r7, sp, #0
    2d4e:	0002      	movs	r2, r0
    2d50:	1dfb      	adds	r3, r7, #7
    2d52:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    2d54:	1dfb      	adds	r3, r7, #7
    2d56:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2d58:	4ba3      	ldr	r3, [pc, #652]	; (2fe8 <_usart_interrupt_handler+0x2a0>)
    2d5a:	0092      	lsls	r2, r2, #2
    2d5c:	58d3      	ldr	r3, [r2, r3]
    2d5e:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2d60:	69bb      	ldr	r3, [r7, #24]
    2d62:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    2d64:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    2d66:	69bb      	ldr	r3, [r7, #24]
    2d68:	0018      	movs	r0, r3
    2d6a:	4ba0      	ldr	r3, [pc, #640]	; (2fec <_usart_interrupt_handler+0x2a4>)
    2d6c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2d6e:	697b      	ldr	r3, [r7, #20]
    2d70:	7e1b      	ldrb	r3, [r3, #24]
    2d72:	b2da      	uxtb	r2, r3
    2d74:	2312      	movs	r3, #18
    2d76:	18fb      	adds	r3, r7, r3
    2d78:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    2d7a:	697b      	ldr	r3, [r7, #20]
    2d7c:	7d9b      	ldrb	r3, [r3, #22]
    2d7e:	b2db      	uxtb	r3, r3
    2d80:	b29a      	uxth	r2, r3
    2d82:	2312      	movs	r3, #18
    2d84:	18fb      	adds	r3, r7, r3
    2d86:	2112      	movs	r1, #18
    2d88:	1879      	adds	r1, r7, r1
    2d8a:	8809      	ldrh	r1, [r1, #0]
    2d8c:	400a      	ands	r2, r1
    2d8e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    2d90:	69bb      	ldr	r3, [r7, #24]
    2d92:	2230      	movs	r2, #48	; 0x30
    2d94:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    2d96:	69ba      	ldr	r2, [r7, #24]
    2d98:	2131      	movs	r1, #49	; 0x31
    2d9a:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    2d9c:	4013      	ands	r3, r2
    2d9e:	b2da      	uxtb	r2, r3
    2da0:	2310      	movs	r3, #16
    2da2:	18fb      	adds	r3, r7, r3
    2da4:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2da6:	2312      	movs	r3, #18
    2da8:	18fb      	adds	r3, r7, r3
    2daa:	881b      	ldrh	r3, [r3, #0]
    2dac:	2201      	movs	r2, #1
    2dae:	4013      	ands	r3, r2
    2db0:	d044      	beq.n	2e3c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    2db2:	69bb      	ldr	r3, [r7, #24]
    2db4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2db6:	b29b      	uxth	r3, r3
    2db8:	2b00      	cmp	r3, #0
    2dba:	d03c      	beq.n	2e36 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2dbc:	69bb      	ldr	r3, [r7, #24]
    2dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2dc0:	781b      	ldrb	r3, [r3, #0]
    2dc2:	b2da      	uxtb	r2, r3
    2dc4:	231c      	movs	r3, #28
    2dc6:	18fb      	adds	r3, r7, r3
    2dc8:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2dca:	69bb      	ldr	r3, [r7, #24]
    2dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2dce:	1c5a      	adds	r2, r3, #1
    2dd0:	69bb      	ldr	r3, [r7, #24]
    2dd2:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2dd4:	69bb      	ldr	r3, [r7, #24]
    2dd6:	795b      	ldrb	r3, [r3, #5]
    2dd8:	2b01      	cmp	r3, #1
    2dda:	d113      	bne.n	2e04 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2ddc:	69bb      	ldr	r3, [r7, #24]
    2dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2de0:	781b      	ldrb	r3, [r3, #0]
    2de2:	b2db      	uxtb	r3, r3
    2de4:	021b      	lsls	r3, r3, #8
    2de6:	b21a      	sxth	r2, r3
    2de8:	231c      	movs	r3, #28
    2dea:	18fb      	adds	r3, r7, r3
    2dec:	2100      	movs	r1, #0
    2dee:	5e5b      	ldrsh	r3, [r3, r1]
    2df0:	4313      	orrs	r3, r2
    2df2:	b21a      	sxth	r2, r3
    2df4:	231c      	movs	r3, #28
    2df6:	18fb      	adds	r3, r7, r3
    2df8:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    2dfa:	69bb      	ldr	r3, [r7, #24]
    2dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2dfe:	1c5a      	adds	r2, r3, #1
    2e00:	69bb      	ldr	r3, [r7, #24]
    2e02:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2e04:	231c      	movs	r3, #28
    2e06:	18fb      	adds	r3, r7, r3
    2e08:	881b      	ldrh	r3, [r3, #0]
    2e0a:	05db      	lsls	r3, r3, #23
    2e0c:	0ddb      	lsrs	r3, r3, #23
    2e0e:	b29a      	uxth	r2, r3
    2e10:	697b      	ldr	r3, [r7, #20]
    2e12:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2e14:	69bb      	ldr	r3, [r7, #24]
    2e16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2e18:	b29b      	uxth	r3, r3
    2e1a:	3b01      	subs	r3, #1
    2e1c:	b29b      	uxth	r3, r3
    2e1e:	69ba      	ldr	r2, [r7, #24]
    2e20:	1c19      	adds	r1, r3, #0
    2e22:	85d1      	strh	r1, [r2, #46]	; 0x2e
    2e24:	2b00      	cmp	r3, #0
    2e26:	d109      	bne.n	2e3c <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2e28:	697b      	ldr	r3, [r7, #20]
    2e2a:	2201      	movs	r2, #1
    2e2c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2e2e:	697b      	ldr	r3, [r7, #20]
    2e30:	2202      	movs	r2, #2
    2e32:	759a      	strb	r2, [r3, #22]
    2e34:	e002      	b.n	2e3c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2e36:	697b      	ldr	r3, [r7, #20]
    2e38:	2201      	movs	r2, #1
    2e3a:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2e3c:	2312      	movs	r3, #18
    2e3e:	18fb      	adds	r3, r7, r3
    2e40:	881b      	ldrh	r3, [r3, #0]
    2e42:	2202      	movs	r2, #2
    2e44:	4013      	ands	r3, r2
    2e46:	d011      	beq.n	2e6c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2e48:	697b      	ldr	r3, [r7, #20]
    2e4a:	2202      	movs	r2, #2
    2e4c:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    2e4e:	69bb      	ldr	r3, [r7, #24]
    2e50:	2233      	movs	r2, #51	; 0x33
    2e52:	2100      	movs	r1, #0
    2e54:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2e56:	2310      	movs	r3, #16
    2e58:	18fb      	adds	r3, r7, r3
    2e5a:	881b      	ldrh	r3, [r3, #0]
    2e5c:	2201      	movs	r2, #1
    2e5e:	4013      	ands	r3, r2
    2e60:	d004      	beq.n	2e6c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2e62:	69bb      	ldr	r3, [r7, #24]
    2e64:	68db      	ldr	r3, [r3, #12]
    2e66:	69ba      	ldr	r2, [r7, #24]
    2e68:	0010      	movs	r0, r2
    2e6a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2e6c:	2312      	movs	r3, #18
    2e6e:	18fb      	adds	r3, r7, r3
    2e70:	881b      	ldrh	r3, [r3, #0]
    2e72:	2204      	movs	r2, #4
    2e74:	4013      	ands	r3, r2
    2e76:	d100      	bne.n	2e7a <_usart_interrupt_handler+0x132>
    2e78:	e0bd      	b.n	2ff6 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    2e7a:	69bb      	ldr	r3, [r7, #24]
    2e7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2e7e:	b29b      	uxth	r3, r3
    2e80:	2b00      	cmp	r3, #0
    2e82:	d100      	bne.n	2e86 <_usart_interrupt_handler+0x13e>
    2e84:	e0b4      	b.n	2ff0 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2e86:	697b      	ldr	r3, [r7, #20]
    2e88:	8b5b      	ldrh	r3, [r3, #26]
    2e8a:	b29b      	uxth	r3, r3
    2e8c:	b2da      	uxtb	r2, r3
    2e8e:	231f      	movs	r3, #31
    2e90:	18fb      	adds	r3, r7, r3
    2e92:	213f      	movs	r1, #63	; 0x3f
    2e94:	400a      	ands	r2, r1
    2e96:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2e98:	231f      	movs	r3, #31
    2e9a:	18fb      	adds	r3, r7, r3
    2e9c:	781b      	ldrb	r3, [r3, #0]
    2e9e:	2208      	movs	r2, #8
    2ea0:	4013      	ands	r3, r2
    2ea2:	d007      	beq.n	2eb4 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2ea4:	231f      	movs	r3, #31
    2ea6:	18fb      	adds	r3, r7, r3
    2ea8:	221f      	movs	r2, #31
    2eaa:	18ba      	adds	r2, r7, r2
    2eac:	7812      	ldrb	r2, [r2, #0]
    2eae:	2108      	movs	r1, #8
    2eb0:	438a      	bics	r2, r1
    2eb2:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2eb4:	231f      	movs	r3, #31
    2eb6:	18fb      	adds	r3, r7, r3
    2eb8:	781b      	ldrb	r3, [r3, #0]
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d050      	beq.n	2f60 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2ebe:	231f      	movs	r3, #31
    2ec0:	18fb      	adds	r3, r7, r3
    2ec2:	781b      	ldrb	r3, [r3, #0]
    2ec4:	2202      	movs	r2, #2
    2ec6:	4013      	ands	r3, r2
    2ec8:	d007      	beq.n	2eda <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2eca:	69bb      	ldr	r3, [r7, #24]
    2ecc:	2232      	movs	r2, #50	; 0x32
    2ece:	211a      	movs	r1, #26
    2ed0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2ed2:	697b      	ldr	r3, [r7, #20]
    2ed4:	2202      	movs	r2, #2
    2ed6:	835a      	strh	r2, [r3, #26]
    2ed8:	e036      	b.n	2f48 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2eda:	231f      	movs	r3, #31
    2edc:	18fb      	adds	r3, r7, r3
    2ede:	781b      	ldrb	r3, [r3, #0]
    2ee0:	2204      	movs	r2, #4
    2ee2:	4013      	ands	r3, r2
    2ee4:	d007      	beq.n	2ef6 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    2ee6:	69bb      	ldr	r3, [r7, #24]
    2ee8:	2232      	movs	r2, #50	; 0x32
    2eea:	211e      	movs	r1, #30
    2eec:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2eee:	697b      	ldr	r3, [r7, #20]
    2ef0:	2204      	movs	r2, #4
    2ef2:	835a      	strh	r2, [r3, #26]
    2ef4:	e028      	b.n	2f48 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2ef6:	231f      	movs	r3, #31
    2ef8:	18fb      	adds	r3, r7, r3
    2efa:	781b      	ldrb	r3, [r3, #0]
    2efc:	2201      	movs	r2, #1
    2efe:	4013      	ands	r3, r2
    2f00:	d007      	beq.n	2f12 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    2f02:	69bb      	ldr	r3, [r7, #24]
    2f04:	2232      	movs	r2, #50	; 0x32
    2f06:	2113      	movs	r1, #19
    2f08:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2f0a:	697b      	ldr	r3, [r7, #20]
    2f0c:	2201      	movs	r2, #1
    2f0e:	835a      	strh	r2, [r3, #26]
    2f10:	e01a      	b.n	2f48 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2f12:	231f      	movs	r3, #31
    2f14:	18fb      	adds	r3, r7, r3
    2f16:	781b      	ldrb	r3, [r3, #0]
    2f18:	2210      	movs	r2, #16
    2f1a:	4013      	ands	r3, r2
    2f1c:	d007      	beq.n	2f2e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    2f1e:	69bb      	ldr	r3, [r7, #24]
    2f20:	2232      	movs	r2, #50	; 0x32
    2f22:	2142      	movs	r1, #66	; 0x42
    2f24:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2f26:	697b      	ldr	r3, [r7, #20]
    2f28:	2210      	movs	r2, #16
    2f2a:	835a      	strh	r2, [r3, #26]
    2f2c:	e00c      	b.n	2f48 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2f2e:	231f      	movs	r3, #31
    2f30:	18fb      	adds	r3, r7, r3
    2f32:	781b      	ldrb	r3, [r3, #0]
    2f34:	2220      	movs	r2, #32
    2f36:	4013      	ands	r3, r2
    2f38:	d006      	beq.n	2f48 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2f3a:	69bb      	ldr	r3, [r7, #24]
    2f3c:	2232      	movs	r2, #50	; 0x32
    2f3e:	2141      	movs	r1, #65	; 0x41
    2f40:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2f42:	697b      	ldr	r3, [r7, #20]
    2f44:	2220      	movs	r2, #32
    2f46:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    2f48:	2310      	movs	r3, #16
    2f4a:	18fb      	adds	r3, r7, r3
    2f4c:	881b      	ldrh	r3, [r3, #0]
    2f4e:	2204      	movs	r2, #4
    2f50:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2f52:	d050      	beq.n	2ff6 <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2f54:	69bb      	ldr	r3, [r7, #24]
    2f56:	695b      	ldr	r3, [r3, #20]
    2f58:	69ba      	ldr	r2, [r7, #24]
    2f5a:	0010      	movs	r0, r2
    2f5c:	4798      	blx	r3
    2f5e:	e04a      	b.n	2ff6 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2f60:	697b      	ldr	r3, [r7, #20]
    2f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2f64:	b29a      	uxth	r2, r3
    2f66:	230e      	movs	r3, #14
    2f68:	18fb      	adds	r3, r7, r3
    2f6a:	05d2      	lsls	r2, r2, #23
    2f6c:	0dd2      	lsrs	r2, r2, #23
    2f6e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2f70:	69bb      	ldr	r3, [r7, #24]
    2f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f74:	220e      	movs	r2, #14
    2f76:	18ba      	adds	r2, r7, r2
    2f78:	8812      	ldrh	r2, [r2, #0]
    2f7a:	b2d2      	uxtb	r2, r2
    2f7c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2f7e:	69bb      	ldr	r3, [r7, #24]
    2f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f82:	1c5a      	adds	r2, r3, #1
    2f84:	69bb      	ldr	r3, [r7, #24]
    2f86:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2f88:	69bb      	ldr	r3, [r7, #24]
    2f8a:	795b      	ldrb	r3, [r3, #5]
    2f8c:	2b01      	cmp	r3, #1
    2f8e:	d10d      	bne.n	2fac <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2f90:	69bb      	ldr	r3, [r7, #24]
    2f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f94:	220e      	movs	r2, #14
    2f96:	18ba      	adds	r2, r7, r2
    2f98:	8812      	ldrh	r2, [r2, #0]
    2f9a:	0a12      	lsrs	r2, r2, #8
    2f9c:	b292      	uxth	r2, r2
    2f9e:	b2d2      	uxtb	r2, r2
    2fa0:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    2fa2:	69bb      	ldr	r3, [r7, #24]
    2fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2fa6:	1c5a      	adds	r2, r3, #1
    2fa8:	69bb      	ldr	r3, [r7, #24]
    2faa:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2fac:	69bb      	ldr	r3, [r7, #24]
    2fae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2fb0:	b29b      	uxth	r3, r3
    2fb2:	3b01      	subs	r3, #1
    2fb4:	b29b      	uxth	r3, r3
    2fb6:	69ba      	ldr	r2, [r7, #24]
    2fb8:	1c19      	adds	r1, r3, #0
    2fba:	8591      	strh	r1, [r2, #44]	; 0x2c
    2fbc:	2b00      	cmp	r3, #0
    2fbe:	d11a      	bne.n	2ff6 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2fc0:	697b      	ldr	r3, [r7, #20]
    2fc2:	2204      	movs	r2, #4
    2fc4:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    2fc6:	69bb      	ldr	r3, [r7, #24]
    2fc8:	2232      	movs	r2, #50	; 0x32
    2fca:	2100      	movs	r1, #0
    2fcc:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    2fce:	2310      	movs	r3, #16
    2fd0:	18fb      	adds	r3, r7, r3
    2fd2:	881b      	ldrh	r3, [r3, #0]
    2fd4:	2202      	movs	r2, #2
    2fd6:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    2fd8:	d00d      	beq.n	2ff6 <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2fda:	69bb      	ldr	r3, [r7, #24]
    2fdc:	691b      	ldr	r3, [r3, #16]
    2fde:	69ba      	ldr	r2, [r7, #24]
    2fe0:	0010      	movs	r0, r2
    2fe2:	4798      	blx	r3
    2fe4:	e007      	b.n	2ff6 <_usart_interrupt_handler+0x2ae>
    2fe6:	46c0      	nop			; (mov r8, r8)
    2fe8:	20000104 	.word	0x20000104
    2fec:	00002d25 	.word	0x00002d25
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2ff0:	697b      	ldr	r3, [r7, #20]
    2ff2:	2204      	movs	r2, #4
    2ff4:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2ff6:	2312      	movs	r3, #18
    2ff8:	18fb      	adds	r3, r7, r3
    2ffa:	881b      	ldrh	r3, [r3, #0]
    2ffc:	2210      	movs	r2, #16
    2ffe:	4013      	ands	r3, r2
    3000:	d010      	beq.n	3024 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    3002:	697b      	ldr	r3, [r7, #20]
    3004:	2210      	movs	r2, #16
    3006:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    3008:	697b      	ldr	r3, [r7, #20]
    300a:	2210      	movs	r2, #16
    300c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    300e:	2310      	movs	r3, #16
    3010:	18fb      	adds	r3, r7, r3
    3012:	881b      	ldrh	r3, [r3, #0]
    3014:	2210      	movs	r2, #16
    3016:	4013      	ands	r3, r2
    3018:	d004      	beq.n	3024 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    301a:	69bb      	ldr	r3, [r7, #24]
    301c:	69db      	ldr	r3, [r3, #28]
    301e:	69ba      	ldr	r2, [r7, #24]
    3020:	0010      	movs	r0, r2
    3022:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    3024:	2312      	movs	r3, #18
    3026:	18fb      	adds	r3, r7, r3
    3028:	881b      	ldrh	r3, [r3, #0]
    302a:	2220      	movs	r2, #32
    302c:	4013      	ands	r3, r2
    302e:	d010      	beq.n	3052 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    3030:	697b      	ldr	r3, [r7, #20]
    3032:	2220      	movs	r2, #32
    3034:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    3036:	697b      	ldr	r3, [r7, #20]
    3038:	2220      	movs	r2, #32
    303a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    303c:	2310      	movs	r3, #16
    303e:	18fb      	adds	r3, r7, r3
    3040:	881b      	ldrh	r3, [r3, #0]
    3042:	2208      	movs	r2, #8
    3044:	4013      	ands	r3, r2
    3046:	d004      	beq.n	3052 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    3048:	69bb      	ldr	r3, [r7, #24]
    304a:	699b      	ldr	r3, [r3, #24]
    304c:	69ba      	ldr	r2, [r7, #24]
    304e:	0010      	movs	r0, r2
    3050:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    3052:	2312      	movs	r3, #18
    3054:	18fb      	adds	r3, r7, r3
    3056:	881b      	ldrh	r3, [r3, #0]
    3058:	2208      	movs	r2, #8
    305a:	4013      	ands	r3, r2
    305c:	d010      	beq.n	3080 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    305e:	697b      	ldr	r3, [r7, #20]
    3060:	2208      	movs	r2, #8
    3062:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    3064:	697b      	ldr	r3, [r7, #20]
    3066:	2208      	movs	r2, #8
    3068:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    306a:	2310      	movs	r3, #16
    306c:	18fb      	adds	r3, r7, r3
    306e:	881b      	ldrh	r3, [r3, #0]
    3070:	2220      	movs	r2, #32
    3072:	4013      	ands	r3, r2
    3074:	d004      	beq.n	3080 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    3076:	69bb      	ldr	r3, [r7, #24]
    3078:	6a1b      	ldr	r3, [r3, #32]
    307a:	69ba      	ldr	r2, [r7, #24]
    307c:	0010      	movs	r0, r2
    307e:	4798      	blx	r3
		}
	}
#endif
}
    3080:	46c0      	nop			; (mov r8, r8)
    3082:	46bd      	mov	sp, r7
    3084:	b008      	add	sp, #32
    3086:	bd80      	pop	{r7, pc}

00003088 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3088:	b580      	push	{r7, lr}
    308a:	b082      	sub	sp, #8
    308c:	af00      	add	r7, sp, #0
    308e:	0002      	movs	r2, r0
    3090:	1dfb      	adds	r3, r7, #7
    3092:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3094:	46c0      	nop			; (mov r8, r8)
    3096:	46bd      	mov	sp, r7
    3098:	b002      	add	sp, #8
    309a:	bd80      	pop	{r7, pc}

0000309c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    309c:	b580      	push	{r7, lr}
    309e:	b084      	sub	sp, #16
    30a0:	af00      	add	r7, sp, #0
    30a2:	0002      	movs	r2, r0
    30a4:	6039      	str	r1, [r7, #0]
    30a6:	1dfb      	adds	r3, r7, #7
    30a8:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    30aa:	4b13      	ldr	r3, [pc, #76]	; (30f8 <_sercom_set_handler+0x5c>)
    30ac:	781b      	ldrb	r3, [r3, #0]
    30ae:	2201      	movs	r2, #1
    30b0:	4053      	eors	r3, r2
    30b2:	b2db      	uxtb	r3, r3
    30b4:	2b00      	cmp	r3, #0
    30b6:	d015      	beq.n	30e4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    30b8:	2300      	movs	r3, #0
    30ba:	60fb      	str	r3, [r7, #12]
    30bc:	e00c      	b.n	30d8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    30be:	4b0f      	ldr	r3, [pc, #60]	; (30fc <_sercom_set_handler+0x60>)
    30c0:	68fa      	ldr	r2, [r7, #12]
    30c2:	0092      	lsls	r2, r2, #2
    30c4:	490e      	ldr	r1, [pc, #56]	; (3100 <_sercom_set_handler+0x64>)
    30c6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    30c8:	4b0e      	ldr	r3, [pc, #56]	; (3104 <_sercom_set_handler+0x68>)
    30ca:	68fa      	ldr	r2, [r7, #12]
    30cc:	0092      	lsls	r2, r2, #2
    30ce:	2100      	movs	r1, #0
    30d0:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    30d2:	68fb      	ldr	r3, [r7, #12]
    30d4:	3301      	adds	r3, #1
    30d6:	60fb      	str	r3, [r7, #12]
    30d8:	68fb      	ldr	r3, [r7, #12]
    30da:	2b05      	cmp	r3, #5
    30dc:	d9ef      	bls.n	30be <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    30de:	4b06      	ldr	r3, [pc, #24]	; (30f8 <_sercom_set_handler+0x5c>)
    30e0:	2201      	movs	r2, #1
    30e2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    30e4:	1dfb      	adds	r3, r7, #7
    30e6:	781a      	ldrb	r2, [r3, #0]
    30e8:	4b04      	ldr	r3, [pc, #16]	; (30fc <_sercom_set_handler+0x60>)
    30ea:	0092      	lsls	r2, r2, #2
    30ec:	6839      	ldr	r1, [r7, #0]
    30ee:	50d1      	str	r1, [r2, r3]
}
    30f0:	46c0      	nop			; (mov r8, r8)
    30f2:	46bd      	mov	sp, r7
    30f4:	b004      	add	sp, #16
    30f6:	bd80      	pop	{r7, pc}
    30f8:	2000009a 	.word	0x2000009a
    30fc:	2000009c 	.word	0x2000009c
    3100:	00003089 	.word	0x00003089
    3104:	20000104 	.word	0x20000104

00003108 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3108:	b590      	push	{r4, r7, lr}
    310a:	b085      	sub	sp, #20
    310c:	af00      	add	r7, sp, #0
    310e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3110:	2308      	movs	r3, #8
    3112:	18fa      	adds	r2, r7, r3
    3114:	4b0c      	ldr	r3, [pc, #48]	; (3148 <_sercom_get_interrupt_vector+0x40>)
    3116:	0010      	movs	r0, r2
    3118:	0019      	movs	r1, r3
    311a:	2306      	movs	r3, #6
    311c:	001a      	movs	r2, r3
    311e:	4b0b      	ldr	r3, [pc, #44]	; (314c <_sercom_get_interrupt_vector+0x44>)
    3120:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3122:	230f      	movs	r3, #15
    3124:	18fc      	adds	r4, r7, r3
    3126:	687b      	ldr	r3, [r7, #4]
    3128:	0018      	movs	r0, r3
    312a:	4b09      	ldr	r3, [pc, #36]	; (3150 <_sercom_get_interrupt_vector+0x48>)
    312c:	4798      	blx	r3
    312e:	0003      	movs	r3, r0
    3130:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3132:	230f      	movs	r3, #15
    3134:	18fb      	adds	r3, r7, r3
    3136:	781b      	ldrb	r3, [r3, #0]
    3138:	2208      	movs	r2, #8
    313a:	18ba      	adds	r2, r7, r2
    313c:	5cd3      	ldrb	r3, [r2, r3]
    313e:	b25b      	sxtb	r3, r3
}
    3140:	0018      	movs	r0, r3
    3142:	46bd      	mov	sp, r7
    3144:	b005      	add	sp, #20
    3146:	bd90      	pop	{r4, r7, pc}
    3148:	000060f8 	.word	0x000060f8
    314c:	00004fcd 	.word	0x00004fcd
    3150:	00002515 	.word	0x00002515

00003154 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3154:	b580      	push	{r7, lr}
    3156:	af00      	add	r7, sp, #0
    3158:	4b03      	ldr	r3, [pc, #12]	; (3168 <SERCOM0_Handler+0x14>)
    315a:	681b      	ldr	r3, [r3, #0]
    315c:	2000      	movs	r0, #0
    315e:	4798      	blx	r3
    3160:	46c0      	nop			; (mov r8, r8)
    3162:	46bd      	mov	sp, r7
    3164:	bd80      	pop	{r7, pc}
    3166:	46c0      	nop			; (mov r8, r8)
    3168:	2000009c 	.word	0x2000009c

0000316c <SERCOM1_Handler>:
    316c:	b580      	push	{r7, lr}
    316e:	af00      	add	r7, sp, #0
    3170:	4b03      	ldr	r3, [pc, #12]	; (3180 <SERCOM1_Handler+0x14>)
    3172:	685b      	ldr	r3, [r3, #4]
    3174:	2001      	movs	r0, #1
    3176:	4798      	blx	r3
    3178:	46c0      	nop			; (mov r8, r8)
    317a:	46bd      	mov	sp, r7
    317c:	bd80      	pop	{r7, pc}
    317e:	46c0      	nop			; (mov r8, r8)
    3180:	2000009c 	.word	0x2000009c

00003184 <SERCOM2_Handler>:
    3184:	b580      	push	{r7, lr}
    3186:	af00      	add	r7, sp, #0
    3188:	4b03      	ldr	r3, [pc, #12]	; (3198 <SERCOM2_Handler+0x14>)
    318a:	689b      	ldr	r3, [r3, #8]
    318c:	2002      	movs	r0, #2
    318e:	4798      	blx	r3
    3190:	46c0      	nop			; (mov r8, r8)
    3192:	46bd      	mov	sp, r7
    3194:	bd80      	pop	{r7, pc}
    3196:	46c0      	nop			; (mov r8, r8)
    3198:	2000009c 	.word	0x2000009c

0000319c <SERCOM3_Handler>:
    319c:	b580      	push	{r7, lr}
    319e:	af00      	add	r7, sp, #0
    31a0:	4b03      	ldr	r3, [pc, #12]	; (31b0 <SERCOM3_Handler+0x14>)
    31a2:	68db      	ldr	r3, [r3, #12]
    31a4:	2003      	movs	r0, #3
    31a6:	4798      	blx	r3
    31a8:	46c0      	nop			; (mov r8, r8)
    31aa:	46bd      	mov	sp, r7
    31ac:	bd80      	pop	{r7, pc}
    31ae:	46c0      	nop			; (mov r8, r8)
    31b0:	2000009c 	.word	0x2000009c

000031b4 <SERCOM4_Handler>:
    31b4:	b580      	push	{r7, lr}
    31b6:	af00      	add	r7, sp, #0
    31b8:	4b03      	ldr	r3, [pc, #12]	; (31c8 <SERCOM4_Handler+0x14>)
    31ba:	691b      	ldr	r3, [r3, #16]
    31bc:	2004      	movs	r0, #4
    31be:	4798      	blx	r3
    31c0:	46c0      	nop			; (mov r8, r8)
    31c2:	46bd      	mov	sp, r7
    31c4:	bd80      	pop	{r7, pc}
    31c6:	46c0      	nop			; (mov r8, r8)
    31c8:	2000009c 	.word	0x2000009c

000031cc <SERCOM5_Handler>:
    31cc:	b580      	push	{r7, lr}
    31ce:	af00      	add	r7, sp, #0
    31d0:	4b03      	ldr	r3, [pc, #12]	; (31e0 <SERCOM5_Handler+0x14>)
    31d2:	695b      	ldr	r3, [r3, #20]
    31d4:	2005      	movs	r0, #5
    31d6:	4798      	blx	r3
    31d8:	46c0      	nop			; (mov r8, r8)
    31da:	46bd      	mov	sp, r7
    31dc:	bd80      	pop	{r7, pc}
    31de:	46c0      	nop			; (mov r8, r8)
    31e0:	2000009c 	.word	0x2000009c

000031e4 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    31e4:	b580      	push	{r7, lr}
    31e6:	b082      	sub	sp, #8
    31e8:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    31ea:	4b07      	ldr	r3, [pc, #28]	; (3208 <nvm_is_ready+0x24>)
    31ec:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    31ee:	687b      	ldr	r3, [r7, #4]
    31f0:	7d1b      	ldrb	r3, [r3, #20]
    31f2:	b2db      	uxtb	r3, r3
    31f4:	001a      	movs	r2, r3
    31f6:	2301      	movs	r3, #1
    31f8:	4013      	ands	r3, r2
    31fa:	1e5a      	subs	r2, r3, #1
    31fc:	4193      	sbcs	r3, r2
    31fe:	b2db      	uxtb	r3, r3
}
    3200:	0018      	movs	r0, r3
    3202:	46bd      	mov	sp, r7
    3204:	b002      	add	sp, #8
    3206:	bd80      	pop	{r7, pc}
    3208:	41004000 	.word	0x41004000

0000320c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    320c:	b580      	push	{r7, lr}
    320e:	b082      	sub	sp, #8
    3210:	af00      	add	r7, sp, #0
    3212:	0002      	movs	r2, r0
    3214:	6039      	str	r1, [r7, #0]
    3216:	1dfb      	adds	r3, r7, #7
    3218:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    321a:	1dfb      	adds	r3, r7, #7
    321c:	781b      	ldrb	r3, [r3, #0]
    321e:	2b01      	cmp	r3, #1
    3220:	d00a      	beq.n	3238 <system_apb_clock_set_mask+0x2c>
    3222:	2b02      	cmp	r3, #2
    3224:	d00f      	beq.n	3246 <system_apb_clock_set_mask+0x3a>
    3226:	2b00      	cmp	r3, #0
    3228:	d114      	bne.n	3254 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    322a:	4b0e      	ldr	r3, [pc, #56]	; (3264 <system_apb_clock_set_mask+0x58>)
    322c:	4a0d      	ldr	r2, [pc, #52]	; (3264 <system_apb_clock_set_mask+0x58>)
    322e:	6991      	ldr	r1, [r2, #24]
    3230:	683a      	ldr	r2, [r7, #0]
    3232:	430a      	orrs	r2, r1
    3234:	619a      	str	r2, [r3, #24]
			break;
    3236:	e00f      	b.n	3258 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3238:	4b0a      	ldr	r3, [pc, #40]	; (3264 <system_apb_clock_set_mask+0x58>)
    323a:	4a0a      	ldr	r2, [pc, #40]	; (3264 <system_apb_clock_set_mask+0x58>)
    323c:	69d1      	ldr	r1, [r2, #28]
    323e:	683a      	ldr	r2, [r7, #0]
    3240:	430a      	orrs	r2, r1
    3242:	61da      	str	r2, [r3, #28]
			break;
    3244:	e008      	b.n	3258 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3246:	4b07      	ldr	r3, [pc, #28]	; (3264 <system_apb_clock_set_mask+0x58>)
    3248:	4a06      	ldr	r2, [pc, #24]	; (3264 <system_apb_clock_set_mask+0x58>)
    324a:	6a11      	ldr	r1, [r2, #32]
    324c:	683a      	ldr	r2, [r7, #0]
    324e:	430a      	orrs	r2, r1
    3250:	621a      	str	r2, [r3, #32]
			break;
    3252:	e001      	b.n	3258 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3254:	2317      	movs	r3, #23
    3256:	e000      	b.n	325a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3258:	2300      	movs	r3, #0
}
    325a:	0018      	movs	r0, r3
    325c:	46bd      	mov	sp, r7
    325e:	b002      	add	sp, #8
    3260:	bd80      	pop	{r7, pc}
    3262:	46c0      	nop			; (mov r8, r8)
    3264:	40000400 	.word	0x40000400

00003268 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    3268:	b580      	push	{r7, lr}
    326a:	b084      	sub	sp, #16
    326c:	af00      	add	r7, sp, #0
    326e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    3270:	4b2f      	ldr	r3, [pc, #188]	; (3330 <nvm_set_config+0xc8>)
    3272:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    3274:	2104      	movs	r1, #4
    3276:	2001      	movs	r0, #1
    3278:	4b2e      	ldr	r3, [pc, #184]	; (3334 <nvm_set_config+0xcc>)
    327a:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    327c:	68fb      	ldr	r3, [r7, #12]
    327e:	2220      	movs	r2, #32
    3280:	32ff      	adds	r2, #255	; 0xff
    3282:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    3284:	4b2c      	ldr	r3, [pc, #176]	; (3338 <nvm_set_config+0xd0>)
    3286:	4798      	blx	r3
    3288:	0003      	movs	r3, r0
    328a:	001a      	movs	r2, r3
    328c:	2301      	movs	r3, #1
    328e:	4053      	eors	r3, r2
    3290:	b2db      	uxtb	r3, r3
    3292:	2b00      	cmp	r3, #0
    3294:	d001      	beq.n	329a <nvm_set_config+0x32>
		return STATUS_BUSY;
    3296:	2305      	movs	r3, #5
    3298:	e045      	b.n	3326 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    329a:	687b      	ldr	r3, [r7, #4]
    329c:	781b      	ldrb	r3, [r3, #0]
    329e:	021b      	lsls	r3, r3, #8
    32a0:	001a      	movs	r2, r3
    32a2:	23c0      	movs	r3, #192	; 0xc0
    32a4:	009b      	lsls	r3, r3, #2
    32a6:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    32a8:	687b      	ldr	r3, [r7, #4]
    32aa:	785b      	ldrb	r3, [r3, #1]
    32ac:	01db      	lsls	r3, r3, #7
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    32ae:	0019      	movs	r1, r3
    32b0:	23ff      	movs	r3, #255	; 0xff
    32b2:	400b      	ands	r3, r1
    32b4:	431a      	orrs	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    32b6:	687b      	ldr	r3, [r7, #4]
    32b8:	789b      	ldrb	r3, [r3, #2]
    32ba:	005b      	lsls	r3, r3, #1
    32bc:	0019      	movs	r1, r3
    32be:	231e      	movs	r3, #30
    32c0:	400b      	ands	r3, r1

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    32c2:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    32c4:	687b      	ldr	r3, [r7, #4]
    32c6:	78db      	ldrb	r3, [r3, #3]
    32c8:	049b      	lsls	r3, r3, #18
#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    32ca:	0019      	movs	r1, r3
    32cc:	2380      	movs	r3, #128	; 0x80
    32ce:	02db      	lsls	r3, r3, #11
    32d0:	400b      	ands	r3, r1
    32d2:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    32d4:	687b      	ldr	r3, [r7, #4]
    32d6:	791b      	ldrb	r3, [r3, #4]
    32d8:	041b      	lsls	r3, r3, #16
    32da:	0019      	movs	r1, r3
    32dc:	23c0      	movs	r3, #192	; 0xc0
    32de:	029b      	lsls	r3, r3, #10
    32e0:	400b      	ands	r3, r1
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    32e2:	431a      	orrs	r2, r3
		return STATUS_BUSY;
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
    32e4:	68fb      	ldr	r3, [r7, #12]
    32e6:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    32e8:	68fb      	ldr	r3, [r7, #12]
    32ea:	689b      	ldr	r3, [r3, #8]
    32ec:	035b      	lsls	r3, r3, #13
    32ee:	0f5b      	lsrs	r3, r3, #29
    32f0:	b2db      	uxtb	r3, r3
    32f2:	001a      	movs	r2, r3
    32f4:	2308      	movs	r3, #8
    32f6:	4093      	lsls	r3, r2
    32f8:	b29a      	uxth	r2, r3
    32fa:	4b10      	ldr	r3, [pc, #64]	; (333c <nvm_set_config+0xd4>)
    32fc:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    32fe:	68fb      	ldr	r3, [r7, #12]
    3300:	689b      	ldr	r3, [r3, #8]
    3302:	b29a      	uxth	r2, r3
    3304:	4b0d      	ldr	r3, [pc, #52]	; (333c <nvm_set_config+0xd4>)
    3306:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    3308:	687b      	ldr	r3, [r7, #4]
    330a:	785a      	ldrb	r2, [r3, #1]
    330c:	4b0b      	ldr	r3, [pc, #44]	; (333c <nvm_set_config+0xd4>)
    330e:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    3310:	68fb      	ldr	r3, [r7, #12]
    3312:	8b1b      	ldrh	r3, [r3, #24]
    3314:	b29b      	uxth	r3, r3
    3316:	001a      	movs	r2, r3
    3318:	2380      	movs	r3, #128	; 0x80
    331a:	005b      	lsls	r3, r3, #1
    331c:	4013      	ands	r3, r2
    331e:	d001      	beq.n	3324 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    3320:	2310      	movs	r3, #16
    3322:	e000      	b.n	3326 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    3324:	2300      	movs	r3, #0
}
    3326:	0018      	movs	r0, r3
    3328:	46bd      	mov	sp, r7
    332a:	b004      	add	sp, #16
    332c:	bd80      	pop	{r7, pc}
    332e:	46c0      	nop			; (mov r8, r8)
    3330:	41004000 	.word	0x41004000
    3334:	0000320d 	.word	0x0000320d
    3338:	000031e5 	.word	0x000031e5
    333c:	200000b4 	.word	0x200000b4

00003340 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    3340:	b580      	push	{r7, lr}
    3342:	b086      	sub	sp, #24
    3344:	af00      	add	r7, sp, #0
    3346:	60b9      	str	r1, [r7, #8]
    3348:	607a      	str	r2, [r7, #4]
    334a:	230f      	movs	r3, #15
    334c:	18fb      	adds	r3, r7, r3
    334e:	1c02      	adds	r2, r0, #0
    3350:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    3352:	4b3a      	ldr	r3, [pc, #232]	; (343c <nvm_execute_command+0xfc>)
    3354:	881b      	ldrh	r3, [r3, #0]
    3356:	001a      	movs	r2, r3
    3358:	4b38      	ldr	r3, [pc, #224]	; (343c <nvm_execute_command+0xfc>)
    335a:	885b      	ldrh	r3, [r3, #2]
    335c:	435a      	muls	r2, r3
    335e:	68bb      	ldr	r3, [r7, #8]
    3360:	429a      	cmp	r2, r3
    3362:	d209      	bcs.n	3378 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    3364:	68bb      	ldr	r3, [r7, #8]
    3366:	4a36      	ldr	r2, [pc, #216]	; (3440 <nvm_execute_command+0x100>)
    3368:	4293      	cmp	r3, r2
    336a:	d903      	bls.n	3374 <nvm_execute_command+0x34>
    336c:	68bb      	ldr	r3, [r7, #8]
    336e:	4a35      	ldr	r2, [pc, #212]	; (3444 <nvm_execute_command+0x104>)
    3370:	4293      	cmp	r3, r2
    3372:	d901      	bls.n	3378 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    3374:	2318      	movs	r3, #24
    3376:	e05c      	b.n	3432 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    3378:	4b33      	ldr	r3, [pc, #204]	; (3448 <nvm_execute_command+0x108>)
    337a:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    337c:	697b      	ldr	r3, [r7, #20]
    337e:	685b      	ldr	r3, [r3, #4]
    3380:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    3382:	693b      	ldr	r3, [r7, #16]
    3384:	2280      	movs	r2, #128	; 0x80
    3386:	02d2      	lsls	r2, r2, #11
    3388:	431a      	orrs	r2, r3
    338a:	697b      	ldr	r3, [r7, #20]
    338c:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    338e:	697b      	ldr	r3, [r7, #20]
    3390:	2220      	movs	r2, #32
    3392:	32ff      	adds	r2, #255	; 0xff
    3394:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    3396:	4b2d      	ldr	r3, [pc, #180]	; (344c <nvm_execute_command+0x10c>)
    3398:	4798      	blx	r3
    339a:	0003      	movs	r3, r0
    339c:	001a      	movs	r2, r3
    339e:	2301      	movs	r3, #1
    33a0:	4053      	eors	r3, r2
    33a2:	b2db      	uxtb	r3, r3
    33a4:	2b00      	cmp	r3, #0
    33a6:	d004      	beq.n	33b2 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    33a8:	697b      	ldr	r3, [r7, #20]
    33aa:	693a      	ldr	r2, [r7, #16]
    33ac:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    33ae:	2305      	movs	r3, #5
    33b0:	e03f      	b.n	3432 <nvm_execute_command+0xf2>
	}

	switch (command) {
    33b2:	230f      	movs	r3, #15
    33b4:	18fb      	adds	r3, r7, r3
    33b6:	781b      	ldrb	r3, [r3, #0]
    33b8:	2b45      	cmp	r3, #69	; 0x45
    33ba:	d81d      	bhi.n	33f8 <nvm_execute_command+0xb8>
    33bc:	009a      	lsls	r2, r3, #2
    33be:	4b24      	ldr	r3, [pc, #144]	; (3450 <nvm_execute_command+0x110>)
    33c0:	18d3      	adds	r3, r2, r3
    33c2:	681b      	ldr	r3, [r3, #0]
    33c4:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    33c6:	697b      	ldr	r3, [r7, #20]
    33c8:	8b1b      	ldrh	r3, [r3, #24]
    33ca:	b29b      	uxth	r3, r3
    33cc:	001a      	movs	r2, r3
    33ce:	2380      	movs	r3, #128	; 0x80
    33d0:	005b      	lsls	r3, r3, #1
    33d2:	4013      	ands	r3, r2
    33d4:	d004      	beq.n	33e0 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    33d6:	697b      	ldr	r3, [r7, #20]
    33d8:	693a      	ldr	r2, [r7, #16]
    33da:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    33dc:	2310      	movs	r3, #16
    33de:	e028      	b.n	3432 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    33e0:	68bb      	ldr	r3, [r7, #8]
    33e2:	089b      	lsrs	r3, r3, #2
    33e4:	005a      	lsls	r2, r3, #1
    33e6:	697b      	ldr	r3, [r7, #20]
    33e8:	61da      	str	r2, [r3, #28]
			break;
    33ea:	e00b      	b.n	3404 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    33ec:	68bb      	ldr	r3, [r7, #8]
    33ee:	089b      	lsrs	r3, r3, #2
    33f0:	005a      	lsls	r2, r3, #1
    33f2:	697b      	ldr	r3, [r7, #20]
    33f4:	61da      	str	r2, [r3, #28]
			break;
    33f6:	e005      	b.n	3404 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    33f8:	697b      	ldr	r3, [r7, #20]
    33fa:	693a      	ldr	r2, [r7, #16]
    33fc:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    33fe:	2317      	movs	r3, #23
    3400:	e017      	b.n	3432 <nvm_execute_command+0xf2>
		/* Commands not requiring address */
		case NVM_COMMAND_PAGE_BUFFER_CLEAR:
		case NVM_COMMAND_SET_SECURITY_BIT:
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;
    3402:	46c0      	nop			; (mov r8, r8)
			nvm_module->CTRLB.reg = ctrlb_bak;
			return STATUS_ERR_INVALID_ARG;
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    3404:	230f      	movs	r3, #15
    3406:	18fb      	adds	r3, r7, r3
    3408:	781b      	ldrb	r3, [r3, #0]
    340a:	b29b      	uxth	r3, r3
    340c:	4a11      	ldr	r2, [pc, #68]	; (3454 <nvm_execute_command+0x114>)
    340e:	4313      	orrs	r3, r2
    3410:	b29a      	uxth	r2, r3
    3412:	697b      	ldr	r3, [r7, #20]
    3414:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    3416:	46c0      	nop			; (mov r8, r8)
    3418:	4b0c      	ldr	r3, [pc, #48]	; (344c <nvm_execute_command+0x10c>)
    341a:	4798      	blx	r3
    341c:	0003      	movs	r3, r0
    341e:	001a      	movs	r2, r3
    3420:	2301      	movs	r3, #1
    3422:	4053      	eors	r3, r2
    3424:	b2db      	uxtb	r3, r3
    3426:	2b00      	cmp	r3, #0
    3428:	d1f6      	bne.n	3418 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    342a:	697b      	ldr	r3, [r7, #20]
    342c:	693a      	ldr	r2, [r7, #16]
    342e:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    3430:	2300      	movs	r3, #0
}
    3432:	0018      	movs	r0, r3
    3434:	46bd      	mov	sp, r7
    3436:	b006      	add	sp, #24
    3438:	bd80      	pop	{r7, pc}
    343a:	46c0      	nop			; (mov r8, r8)
    343c:	200000b4 	.word	0x200000b4
    3440:	00803fff 	.word	0x00803fff
    3444:	00806000 	.word	0x00806000
    3448:	41004000 	.word	0x41004000
    344c:	000031e5 	.word	0x000031e5
    3450:	00006100 	.word	0x00006100
    3454:	ffffa500 	.word	0xffffa500

00003458 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    3458:	b580      	push	{r7, lr}
    345a:	b088      	sub	sp, #32
    345c:	af00      	add	r7, sp, #0
    345e:	60f8      	str	r0, [r7, #12]
    3460:	60b9      	str	r1, [r7, #8]
    3462:	1dbb      	adds	r3, r7, #6
    3464:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    3466:	4b4a      	ldr	r3, [pc, #296]	; (3590 <nvm_write_buffer+0x138>)
    3468:	881b      	ldrh	r3, [r3, #0]
    346a:	001a      	movs	r2, r3
    346c:	4b48      	ldr	r3, [pc, #288]	; (3590 <nvm_write_buffer+0x138>)
    346e:	885b      	ldrh	r3, [r3, #2]
    3470:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
    3472:	68fb      	ldr	r3, [r7, #12]
    3474:	429a      	cmp	r2, r3
    3476:	d201      	bcs.n	347c <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    3478:	2318      	movs	r3, #24
    347a:	e084      	b.n	3586 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    347c:	4b44      	ldr	r3, [pc, #272]	; (3590 <nvm_write_buffer+0x138>)
    347e:	881b      	ldrh	r3, [r3, #0]
    3480:	3b01      	subs	r3, #1
    3482:	001a      	movs	r2, r3
    3484:	68fb      	ldr	r3, [r7, #12]
    3486:	4013      	ands	r3, r2
    3488:	d001      	beq.n	348e <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    348a:	2318      	movs	r3, #24
    348c:	e07b      	b.n	3586 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    348e:	4b40      	ldr	r3, [pc, #256]	; (3590 <nvm_write_buffer+0x138>)
    3490:	881b      	ldrh	r3, [r3, #0]
    3492:	1dba      	adds	r2, r7, #6
    3494:	8812      	ldrh	r2, [r2, #0]
    3496:	429a      	cmp	r2, r3
    3498:	d901      	bls.n	349e <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    349a:	2317      	movs	r3, #23
    349c:	e073      	b.n	3586 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    349e:	4b3d      	ldr	r3, [pc, #244]	; (3594 <nvm_write_buffer+0x13c>)
    34a0:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    34a2:	4b3d      	ldr	r3, [pc, #244]	; (3598 <nvm_write_buffer+0x140>)
    34a4:	4798      	blx	r3
    34a6:	0003      	movs	r3, r0
    34a8:	001a      	movs	r2, r3
    34aa:	2301      	movs	r3, #1
    34ac:	4053      	eors	r3, r2
    34ae:	b2db      	uxtb	r3, r3
    34b0:	2b00      	cmp	r3, #0
    34b2:	d001      	beq.n	34b8 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
    34b4:	2305      	movs	r3, #5
    34b6:	e066      	b.n	3586 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    34b8:	697b      	ldr	r3, [r7, #20]
    34ba:	4a38      	ldr	r2, [pc, #224]	; (359c <nvm_write_buffer+0x144>)
    34bc:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    34be:	46c0      	nop			; (mov r8, r8)
    34c0:	4b35      	ldr	r3, [pc, #212]	; (3598 <nvm_write_buffer+0x140>)
    34c2:	4798      	blx	r3
    34c4:	0003      	movs	r3, r0
    34c6:	001a      	movs	r2, r3
    34c8:	2301      	movs	r3, #1
    34ca:	4053      	eors	r3, r2
    34cc:	b2db      	uxtb	r3, r3
    34ce:	2b00      	cmp	r3, #0
    34d0:	d1f6      	bne.n	34c0 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    34d2:	697b      	ldr	r3, [r7, #20]
    34d4:	2220      	movs	r2, #32
    34d6:	32ff      	adds	r2, #255	; 0xff
    34d8:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    34da:	68fb      	ldr	r3, [r7, #12]
    34dc:	085b      	lsrs	r3, r3, #1
    34de:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    34e0:	231a      	movs	r3, #26
    34e2:	18fb      	adds	r3, r7, r3
    34e4:	2200      	movs	r2, #0
    34e6:	801a      	strh	r2, [r3, #0]
    34e8:	e032      	b.n	3550 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    34ea:	231a      	movs	r3, #26
    34ec:	18fb      	adds	r3, r7, r3
    34ee:	881b      	ldrh	r3, [r3, #0]
    34f0:	68ba      	ldr	r2, [r7, #8]
    34f2:	18d3      	adds	r3, r2, r3
    34f4:	781a      	ldrb	r2, [r3, #0]
    34f6:	2318      	movs	r3, #24
    34f8:	18fb      	adds	r3, r7, r3
    34fa:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    34fc:	231a      	movs	r3, #26
    34fe:	18fb      	adds	r3, r7, r3
    3500:	881a      	ldrh	r2, [r3, #0]
    3502:	1dbb      	adds	r3, r7, #6
    3504:	881b      	ldrh	r3, [r3, #0]
    3506:	3b01      	subs	r3, #1
    3508:	429a      	cmp	r2, r3
    350a:	da11      	bge.n	3530 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    350c:	231a      	movs	r3, #26
    350e:	18fb      	adds	r3, r7, r3
    3510:	881b      	ldrh	r3, [r3, #0]
    3512:	3301      	adds	r3, #1
    3514:	68ba      	ldr	r2, [r7, #8]
    3516:	18d3      	adds	r3, r2, r3
    3518:	781b      	ldrb	r3, [r3, #0]
    351a:	021b      	lsls	r3, r3, #8
    351c:	b21a      	sxth	r2, r3
    351e:	2318      	movs	r3, #24
    3520:	18fb      	adds	r3, r7, r3
    3522:	2100      	movs	r1, #0
    3524:	5e5b      	ldrsh	r3, [r3, r1]
    3526:	4313      	orrs	r3, r2
    3528:	b21a      	sxth	r2, r3
    352a:	2318      	movs	r3, #24
    352c:	18fb      	adds	r3, r7, r3
    352e:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    3530:	69fb      	ldr	r3, [r7, #28]
    3532:	1c5a      	adds	r2, r3, #1
    3534:	61fa      	str	r2, [r7, #28]
    3536:	005b      	lsls	r3, r3, #1
    3538:	001a      	movs	r2, r3
    353a:	2318      	movs	r3, #24
    353c:	18fb      	adds	r3, r7, r3
    353e:	881b      	ldrh	r3, [r3, #0]
    3540:	8013      	strh	r3, [r2, #0]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    3542:	231a      	movs	r3, #26
    3544:	18fb      	adds	r3, r7, r3
    3546:	221a      	movs	r2, #26
    3548:	18ba      	adds	r2, r7, r2
    354a:	8812      	ldrh	r2, [r2, #0]
    354c:	3202      	adds	r2, #2
    354e:	801a      	strh	r2, [r3, #0]
    3550:	231a      	movs	r3, #26
    3552:	18fa      	adds	r2, r7, r3
    3554:	1dbb      	adds	r3, r7, #6
    3556:	8812      	ldrh	r2, [r2, #0]
    3558:	881b      	ldrh	r3, [r3, #0]
    355a:	429a      	cmp	r2, r3
    355c:	d3c5      	bcc.n	34ea <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    355e:	4b0c      	ldr	r3, [pc, #48]	; (3590 <nvm_write_buffer+0x138>)
    3560:	791b      	ldrb	r3, [r3, #4]
    3562:	2201      	movs	r2, #1
    3564:	4053      	eors	r3, r2
    3566:	b2db      	uxtb	r3, r3
    3568:	2b00      	cmp	r3, #0
    356a:	d00b      	beq.n	3584 <nvm_write_buffer+0x12c>
    356c:	1dbb      	adds	r3, r7, #6
    356e:	881b      	ldrh	r3, [r3, #0]
    3570:	2b3f      	cmp	r3, #63	; 0x3f
    3572:	d807      	bhi.n	3584 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    3574:	68fb      	ldr	r3, [r7, #12]
    3576:	2200      	movs	r2, #0
    3578:	0019      	movs	r1, r3
    357a:	2004      	movs	r0, #4
    357c:	4b08      	ldr	r3, [pc, #32]	; (35a0 <nvm_write_buffer+0x148>)
    357e:	4798      	blx	r3
    3580:	0003      	movs	r3, r0
    3582:	e000      	b.n	3586 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    3584:	2300      	movs	r3, #0
}
    3586:	0018      	movs	r0, r3
    3588:	46bd      	mov	sp, r7
    358a:	b008      	add	sp, #32
    358c:	bd80      	pop	{r7, pc}
    358e:	46c0      	nop			; (mov r8, r8)
    3590:	200000b4 	.word	0x200000b4
    3594:	41004000 	.word	0x41004000
    3598:	000031e5 	.word	0x000031e5
    359c:	ffffa544 	.word	0xffffa544
    35a0:	00003341 	.word	0x00003341

000035a4 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    35a4:	b580      	push	{r7, lr}
    35a6:	b084      	sub	sp, #16
    35a8:	af00      	add	r7, sp, #0
    35aa:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    35ac:	4b23      	ldr	r3, [pc, #140]	; (363c <nvm_erase_row+0x98>)
    35ae:	881b      	ldrh	r3, [r3, #0]
    35b0:	001a      	movs	r2, r3
    35b2:	4b22      	ldr	r3, [pc, #136]	; (363c <nvm_erase_row+0x98>)
    35b4:	885b      	ldrh	r3, [r3, #2]
    35b6:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
    35b8:	687b      	ldr	r3, [r7, #4]
    35ba:	429a      	cmp	r2, r3
    35bc:	d201      	bcs.n	35c2 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    35be:	2318      	movs	r3, #24
    35c0:	e037      	b.n	3632 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    35c2:	4b1e      	ldr	r3, [pc, #120]	; (363c <nvm_erase_row+0x98>)
    35c4:	881b      	ldrh	r3, [r3, #0]
    35c6:	009b      	lsls	r3, r3, #2
    35c8:	3b01      	subs	r3, #1
    35ca:	001a      	movs	r2, r3
    35cc:	687b      	ldr	r3, [r7, #4]
    35ce:	4013      	ands	r3, r2
    35d0:	d001      	beq.n	35d6 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    35d2:	2318      	movs	r3, #24
    35d4:	e02d      	b.n	3632 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    35d6:	4b1a      	ldr	r3, [pc, #104]	; (3640 <nvm_erase_row+0x9c>)
    35d8:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    35da:	4b1a      	ldr	r3, [pc, #104]	; (3644 <nvm_erase_row+0xa0>)
    35dc:	4798      	blx	r3
    35de:	0003      	movs	r3, r0
    35e0:	001a      	movs	r2, r3
    35e2:	2301      	movs	r3, #1
    35e4:	4053      	eors	r3, r2
    35e6:	b2db      	uxtb	r3, r3
    35e8:	2b00      	cmp	r3, #0
    35ea:	d001      	beq.n	35f0 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
    35ec:	2305      	movs	r3, #5
    35ee:	e020      	b.n	3632 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    35f0:	68fb      	ldr	r3, [r7, #12]
    35f2:	2220      	movs	r2, #32
    35f4:	32ff      	adds	r2, #255	; 0xff
    35f6:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    35f8:	687b      	ldr	r3, [r7, #4]
    35fa:	089b      	lsrs	r3, r3, #2
    35fc:	005a      	lsls	r2, r3, #1
    35fe:	68fb      	ldr	r3, [r7, #12]
    3600:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    3602:	68fb      	ldr	r3, [r7, #12]
    3604:	4a10      	ldr	r2, [pc, #64]	; (3648 <nvm_erase_row+0xa4>)
    3606:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    3608:	46c0      	nop			; (mov r8, r8)
    360a:	4b0e      	ldr	r3, [pc, #56]	; (3644 <nvm_erase_row+0xa0>)
    360c:	4798      	blx	r3
    360e:	0003      	movs	r3, r0
    3610:	001a      	movs	r2, r3
    3612:	2301      	movs	r3, #1
    3614:	4053      	eors	r3, r2
    3616:	b2db      	uxtb	r3, r3
    3618:	2b00      	cmp	r3, #0
    361a:	d1f6      	bne.n	360a <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    361c:	68fb      	ldr	r3, [r7, #12]
    361e:	8b1b      	ldrh	r3, [r3, #24]
    3620:	b29b      	uxth	r3, r3
    3622:	b2db      	uxtb	r3, r3
    3624:	001a      	movs	r2, r3
    3626:	231c      	movs	r3, #28
    3628:	4013      	ands	r3, r2
    362a:	d001      	beq.n	3630 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
    362c:	2304      	movs	r3, #4
    362e:	e000      	b.n	3632 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
    3630:	2300      	movs	r3, #0
}
    3632:	0018      	movs	r0, r3
    3634:	46bd      	mov	sp, r7
    3636:	b004      	add	sp, #16
    3638:	bd80      	pop	{r7, pc}
    363a:	46c0      	nop			; (mov r8, r8)
    363c:	200000b4 	.word	0x200000b4
    3640:	41004000 	.word	0x41004000
    3644:	000031e5 	.word	0x000031e5
    3648:	ffffa502 	.word	0xffffa502

0000364c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    364c:	b580      	push	{r7, lr}
    364e:	b082      	sub	sp, #8
    3650:	af00      	add	r7, sp, #0
    3652:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3654:	687b      	ldr	r3, [r7, #4]
    3656:	2280      	movs	r2, #128	; 0x80
    3658:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    365a:	687b      	ldr	r3, [r7, #4]
    365c:	2200      	movs	r2, #0
    365e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3660:	687b      	ldr	r3, [r7, #4]
    3662:	2201      	movs	r2, #1
    3664:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3666:	687b      	ldr	r3, [r7, #4]
    3668:	2200      	movs	r2, #0
    366a:	70da      	strb	r2, [r3, #3]
}
    366c:	46c0      	nop			; (mov r8, r8)
    366e:	46bd      	mov	sp, r7
    3670:	b002      	add	sp, #8
    3672:	bd80      	pop	{r7, pc}

00003674 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3674:	b580      	push	{r7, lr}
    3676:	b084      	sub	sp, #16
    3678:	af00      	add	r7, sp, #0
    367a:	0002      	movs	r2, r0
    367c:	6039      	str	r1, [r7, #0]
    367e:	1dfb      	adds	r3, r7, #7
    3680:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    3682:	230c      	movs	r3, #12
    3684:	18fb      	adds	r3, r7, r3
    3686:	0018      	movs	r0, r3
    3688:	4b10      	ldr	r3, [pc, #64]	; (36cc <port_pin_set_config+0x58>)
    368a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    368c:	230c      	movs	r3, #12
    368e:	18fb      	adds	r3, r7, r3
    3690:	2280      	movs	r2, #128	; 0x80
    3692:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3694:	683b      	ldr	r3, [r7, #0]
    3696:	781a      	ldrb	r2, [r3, #0]
    3698:	230c      	movs	r3, #12
    369a:	18fb      	adds	r3, r7, r3
    369c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    369e:	683b      	ldr	r3, [r7, #0]
    36a0:	785a      	ldrb	r2, [r3, #1]
    36a2:	230c      	movs	r3, #12
    36a4:	18fb      	adds	r3, r7, r3
    36a6:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    36a8:	683b      	ldr	r3, [r7, #0]
    36aa:	789a      	ldrb	r2, [r3, #2]
    36ac:	230c      	movs	r3, #12
    36ae:	18fb      	adds	r3, r7, r3
    36b0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    36b2:	230c      	movs	r3, #12
    36b4:	18fa      	adds	r2, r7, r3
    36b6:	1dfb      	adds	r3, r7, #7
    36b8:	781b      	ldrb	r3, [r3, #0]
    36ba:	0011      	movs	r1, r2
    36bc:	0018      	movs	r0, r3
    36be:	4b04      	ldr	r3, [pc, #16]	; (36d0 <port_pin_set_config+0x5c>)
    36c0:	4798      	blx	r3
}
    36c2:	46c0      	nop			; (mov r8, r8)
    36c4:	46bd      	mov	sp, r7
    36c6:	b004      	add	sp, #16
    36c8:	bd80      	pop	{r7, pc}
    36ca:	46c0      	nop			; (mov r8, r8)
    36cc:	0000364d 	.word	0x0000364d
    36d0:	000041d5 	.word	0x000041d5

000036d4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    36d4:	b580      	push	{r7, lr}
    36d6:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    36d8:	46c0      	nop			; (mov r8, r8)
    36da:	46bd      	mov	sp, r7
    36dc:	bd80      	pop	{r7, pc}
    36de:	46c0      	nop			; (mov r8, r8)

000036e0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    36e0:	b580      	push	{r7, lr}
    36e2:	b082      	sub	sp, #8
    36e4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    36e6:	4b10      	ldr	r3, [pc, #64]	; (3728 <cpu_irq_enter_critical+0x48>)
    36e8:	681b      	ldr	r3, [r3, #0]
    36ea:	2b00      	cmp	r3, #0
    36ec:	d112      	bne.n	3714 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    36ee:	f3ef 8310 	mrs	r3, PRIMASK
    36f2:	607b      	str	r3, [r7, #4]
  return(result);
    36f4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    36f6:	2b00      	cmp	r3, #0
    36f8:	d109      	bne.n	370e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    36fa:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    36fc:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3700:	4b0a      	ldr	r3, [pc, #40]	; (372c <cpu_irq_enter_critical+0x4c>)
    3702:	2200      	movs	r2, #0
    3704:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3706:	4b0a      	ldr	r3, [pc, #40]	; (3730 <cpu_irq_enter_critical+0x50>)
    3708:	2201      	movs	r2, #1
    370a:	701a      	strb	r2, [r3, #0]
    370c:	e002      	b.n	3714 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    370e:	4b08      	ldr	r3, [pc, #32]	; (3730 <cpu_irq_enter_critical+0x50>)
    3710:	2200      	movs	r2, #0
    3712:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3714:	4b04      	ldr	r3, [pc, #16]	; (3728 <cpu_irq_enter_critical+0x48>)
    3716:	681b      	ldr	r3, [r3, #0]
    3718:	1c5a      	adds	r2, r3, #1
    371a:	4b03      	ldr	r3, [pc, #12]	; (3728 <cpu_irq_enter_critical+0x48>)
    371c:	601a      	str	r2, [r3, #0]
}
    371e:	46c0      	nop			; (mov r8, r8)
    3720:	46bd      	mov	sp, r7
    3722:	b002      	add	sp, #8
    3724:	bd80      	pop	{r7, pc}
    3726:	46c0      	nop			; (mov r8, r8)
    3728:	200000bc 	.word	0x200000bc
    372c:	20000008 	.word	0x20000008
    3730:	200000c0 	.word	0x200000c0

00003734 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3734:	b580      	push	{r7, lr}
    3736:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3738:	4b0b      	ldr	r3, [pc, #44]	; (3768 <cpu_irq_leave_critical+0x34>)
    373a:	681b      	ldr	r3, [r3, #0]
    373c:	1e5a      	subs	r2, r3, #1
    373e:	4b0a      	ldr	r3, [pc, #40]	; (3768 <cpu_irq_leave_critical+0x34>)
    3740:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3742:	4b09      	ldr	r3, [pc, #36]	; (3768 <cpu_irq_leave_critical+0x34>)
    3744:	681b      	ldr	r3, [r3, #0]
    3746:	2b00      	cmp	r3, #0
    3748:	d10a      	bne.n	3760 <cpu_irq_leave_critical+0x2c>
    374a:	4b08      	ldr	r3, [pc, #32]	; (376c <cpu_irq_leave_critical+0x38>)
    374c:	781b      	ldrb	r3, [r3, #0]
    374e:	b2db      	uxtb	r3, r3
    3750:	2b00      	cmp	r3, #0
    3752:	d005      	beq.n	3760 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    3754:	4b06      	ldr	r3, [pc, #24]	; (3770 <cpu_irq_leave_critical+0x3c>)
    3756:	2201      	movs	r2, #1
    3758:	701a      	strb	r2, [r3, #0]
    375a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    375e:	b662      	cpsie	i
	}
}
    3760:	46c0      	nop			; (mov r8, r8)
    3762:	46bd      	mov	sp, r7
    3764:	bd80      	pop	{r7, pc}
    3766:	46c0      	nop			; (mov r8, r8)
    3768:	200000bc 	.word	0x200000bc
    376c:	200000c0 	.word	0x200000c0
    3770:	20000008 	.word	0x20000008

00003774 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    3774:	b580      	push	{r7, lr}
    3776:	b082      	sub	sp, #8
    3778:	af00      	add	r7, sp, #0
    377a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    377c:	687b      	ldr	r3, [r7, #4]
    377e:	2201      	movs	r2, #1
    3780:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    3782:	687b      	ldr	r3, [r7, #4]
    3784:	2200      	movs	r2, #0
    3786:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    3788:	687b      	ldr	r3, [r7, #4]
    378a:	2206      	movs	r2, #6
    378c:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    378e:	687b      	ldr	r3, [r7, #4]
    3790:	2200      	movs	r2, #0
    3792:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    3794:	687b      	ldr	r3, [r7, #4]
    3796:	2200      	movs	r2, #0
    3798:	725a      	strb	r2, [r3, #9]
}
    379a:	46c0      	nop			; (mov r8, r8)
    379c:	46bd      	mov	sp, r7
    379e:	b002      	add	sp, #8
    37a0:	bd80      	pop	{r7, pc}
    37a2:	46c0      	nop			; (mov r8, r8)

000037a4 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    37a4:	b580      	push	{r7, lr}
    37a6:	b082      	sub	sp, #8
    37a8:	af00      	add	r7, sp, #0
    37aa:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    37ac:	687b      	ldr	r3, [r7, #4]
    37ae:	2203      	movs	r2, #3
    37b0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    37b2:	687b      	ldr	r3, [r7, #4]
    37b4:	2200      	movs	r2, #0
    37b6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    37b8:	687b      	ldr	r3, [r7, #4]
    37ba:	2201      	movs	r2, #1
    37bc:	709a      	strb	r2, [r3, #2]
}
    37be:	46c0      	nop			; (mov r8, r8)
    37c0:	46bd      	mov	sp, r7
    37c2:	b002      	add	sp, #8
    37c4:	bd80      	pop	{r7, pc}
    37c6:	46c0      	nop			; (mov r8, r8)

000037c8 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    37c8:	b580      	push	{r7, lr}
    37ca:	b082      	sub	sp, #8
    37cc:	af00      	add	r7, sp, #0
    37ce:	0002      	movs	r2, r0
    37d0:	1dfb      	adds	r3, r7, #7
    37d2:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    37d4:	4a03      	ldr	r2, [pc, #12]	; (37e4 <system_cpu_clock_set_divider+0x1c>)
    37d6:	1dfb      	adds	r3, r7, #7
    37d8:	781b      	ldrb	r3, [r3, #0]
    37da:	7213      	strb	r3, [r2, #8]
}
    37dc:	46c0      	nop			; (mov r8, r8)
    37de:	46bd      	mov	sp, r7
    37e0:	b002      	add	sp, #8
    37e2:	bd80      	pop	{r7, pc}
    37e4:	40000400 	.word	0x40000400

000037e8 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    37e8:	b580      	push	{r7, lr}
    37ea:	b082      	sub	sp, #8
    37ec:	af00      	add	r7, sp, #0
    37ee:	0002      	movs	r2, r0
    37f0:	1dfb      	adds	r3, r7, #7
    37f2:	701a      	strb	r2, [r3, #0]
    37f4:	1dbb      	adds	r3, r7, #6
    37f6:	1c0a      	adds	r2, r1, #0
    37f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    37fa:	1dfb      	adds	r3, r7, #7
    37fc:	781b      	ldrb	r3, [r3, #0]
    37fe:	2b01      	cmp	r3, #1
    3800:	d008      	beq.n	3814 <system_apb_clock_set_divider+0x2c>
    3802:	2b02      	cmp	r3, #2
    3804:	d00b      	beq.n	381e <system_apb_clock_set_divider+0x36>
    3806:	2b00      	cmp	r3, #0
    3808:	d10e      	bne.n	3828 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    380a:	4a0b      	ldr	r2, [pc, #44]	; (3838 <system_apb_clock_set_divider+0x50>)
    380c:	1dbb      	adds	r3, r7, #6
    380e:	781b      	ldrb	r3, [r3, #0]
    3810:	7253      	strb	r3, [r2, #9]
			break;
    3812:	e00b      	b.n	382c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    3814:	4a08      	ldr	r2, [pc, #32]	; (3838 <system_apb_clock_set_divider+0x50>)
    3816:	1dbb      	adds	r3, r7, #6
    3818:	781b      	ldrb	r3, [r3, #0]
    381a:	7293      	strb	r3, [r2, #10]
			break;
    381c:	e006      	b.n	382c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    381e:	4a06      	ldr	r2, [pc, #24]	; (3838 <system_apb_clock_set_divider+0x50>)
    3820:	1dbb      	adds	r3, r7, #6
    3822:	781b      	ldrb	r3, [r3, #0]
    3824:	72d3      	strb	r3, [r2, #11]
			break;
    3826:	e001      	b.n	382c <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3828:	2317      	movs	r3, #23
    382a:	e000      	b.n	382e <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    382c:	2300      	movs	r3, #0
}
    382e:	0018      	movs	r0, r3
    3830:	46bd      	mov	sp, r7
    3832:	b002      	add	sp, #8
    3834:	bd80      	pop	{r7, pc}
    3836:	46c0      	nop			; (mov r8, r8)
    3838:	40000400 	.word	0x40000400

0000383c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    383c:	b580      	push	{r7, lr}
    383e:	b082      	sub	sp, #8
    3840:	af00      	add	r7, sp, #0
    3842:	0002      	movs	r2, r0
    3844:	1dfb      	adds	r3, r7, #7
    3846:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3848:	4a08      	ldr	r2, [pc, #32]	; (386c <system_flash_set_waitstates+0x30>)
    384a:	1dfb      	adds	r3, r7, #7
    384c:	781b      	ldrb	r3, [r3, #0]
    384e:	210f      	movs	r1, #15
    3850:	400b      	ands	r3, r1
    3852:	b2d9      	uxtb	r1, r3
    3854:	6853      	ldr	r3, [r2, #4]
    3856:	200f      	movs	r0, #15
    3858:	4001      	ands	r1, r0
    385a:	0049      	lsls	r1, r1, #1
    385c:	201e      	movs	r0, #30
    385e:	4383      	bics	r3, r0
    3860:	430b      	orrs	r3, r1
    3862:	6053      	str	r3, [r2, #4]
}
    3864:	46c0      	nop			; (mov r8, r8)
    3866:	46bd      	mov	sp, r7
    3868:	b002      	add	sp, #8
    386a:	bd80      	pop	{r7, pc}
    386c:	41004000 	.word	0x41004000

00003870 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    3870:	b580      	push	{r7, lr}
    3872:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3874:	46c0      	nop			; (mov r8, r8)
    3876:	4b04      	ldr	r3, [pc, #16]	; (3888 <_system_dfll_wait_for_sync+0x18>)
    3878:	68db      	ldr	r3, [r3, #12]
    387a:	2210      	movs	r2, #16
    387c:	4013      	ands	r3, r2
    387e:	d0fa      	beq.n	3876 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    3880:	46c0      	nop			; (mov r8, r8)
    3882:	46bd      	mov	sp, r7
    3884:	bd80      	pop	{r7, pc}
    3886:	46c0      	nop			; (mov r8, r8)
    3888:	40000800 	.word	0x40000800

0000388c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    388c:	b580      	push	{r7, lr}
    388e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3890:	4b0c      	ldr	r3, [pc, #48]	; (38c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3892:	2202      	movs	r2, #2
    3894:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3896:	4b0c      	ldr	r3, [pc, #48]	; (38c8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3898:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    389a:	4a0a      	ldr	r2, [pc, #40]	; (38c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    389c:	4b0b      	ldr	r3, [pc, #44]	; (38cc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    389e:	689b      	ldr	r3, [r3, #8]
    38a0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    38a2:	4a08      	ldr	r2, [pc, #32]	; (38c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    38a4:	4b09      	ldr	r3, [pc, #36]	; (38cc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    38a6:	685b      	ldr	r3, [r3, #4]
    38a8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    38aa:	4b06      	ldr	r3, [pc, #24]	; (38c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    38ac:	2200      	movs	r2, #0
    38ae:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    38b0:	4b05      	ldr	r3, [pc, #20]	; (38c8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    38b2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    38b4:	4a03      	ldr	r2, [pc, #12]	; (38c4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    38b6:	4b05      	ldr	r3, [pc, #20]	; (38cc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    38b8:	681b      	ldr	r3, [r3, #0]
    38ba:	b29b      	uxth	r3, r3
    38bc:	8493      	strh	r3, [r2, #36]	; 0x24
}
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	46bd      	mov	sp, r7
    38c2:	bd80      	pop	{r7, pc}
    38c4:	40000800 	.word	0x40000800
    38c8:	00003871 	.word	0x00003871
    38cc:	200000c4 	.word	0x200000c4

000038d0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    38d0:	b580      	push	{r7, lr}
    38d2:	b082      	sub	sp, #8
    38d4:	af00      	add	r7, sp, #0
    38d6:	0002      	movs	r2, r0
    38d8:	1dfb      	adds	r3, r7, #7
    38da:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    38dc:	1dfb      	adds	r3, r7, #7
    38de:	781b      	ldrb	r3, [r3, #0]
    38e0:	2b08      	cmp	r3, #8
    38e2:	d840      	bhi.n	3966 <system_clock_source_get_hz+0x96>
    38e4:	009a      	lsls	r2, r3, #2
    38e6:	4b22      	ldr	r3, [pc, #136]	; (3970 <system_clock_source_get_hz+0xa0>)
    38e8:	18d3      	adds	r3, r2, r3
    38ea:	681b      	ldr	r3, [r3, #0]
    38ec:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    38ee:	4b21      	ldr	r3, [pc, #132]	; (3974 <system_clock_source_get_hz+0xa4>)
    38f0:	691b      	ldr	r3, [r3, #16]
    38f2:	e039      	b.n	3968 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    38f4:	4b20      	ldr	r3, [pc, #128]	; (3978 <system_clock_source_get_hz+0xa8>)
    38f6:	6a1b      	ldr	r3, [r3, #32]
    38f8:	059b      	lsls	r3, r3, #22
    38fa:	0f9b      	lsrs	r3, r3, #30
    38fc:	b2db      	uxtb	r3, r3
    38fe:	001a      	movs	r2, r3
    3900:	4b1e      	ldr	r3, [pc, #120]	; (397c <system_clock_source_get_hz+0xac>)
    3902:	40d3      	lsrs	r3, r2
    3904:	e030      	b.n	3968 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    3906:	2380      	movs	r3, #128	; 0x80
    3908:	021b      	lsls	r3, r3, #8
    390a:	e02d      	b.n	3968 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    390c:	2380      	movs	r3, #128	; 0x80
    390e:	021b      	lsls	r3, r3, #8
    3910:	e02a      	b.n	3968 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    3912:	4b18      	ldr	r3, [pc, #96]	; (3974 <system_clock_source_get_hz+0xa4>)
    3914:	695b      	ldr	r3, [r3, #20]
    3916:	e027      	b.n	3968 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3918:	4b16      	ldr	r3, [pc, #88]	; (3974 <system_clock_source_get_hz+0xa4>)
    391a:	681b      	ldr	r3, [r3, #0]
    391c:	2202      	movs	r2, #2
    391e:	4013      	ands	r3, r2
    3920:	d101      	bne.n	3926 <system_clock_source_get_hz+0x56>
			return 0;
    3922:	2300      	movs	r3, #0
    3924:	e020      	b.n	3968 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    3926:	4b16      	ldr	r3, [pc, #88]	; (3980 <system_clock_source_get_hz+0xb0>)
    3928:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    392a:	4b12      	ldr	r3, [pc, #72]	; (3974 <system_clock_source_get_hz+0xa4>)
    392c:	681b      	ldr	r3, [r3, #0]
    392e:	2204      	movs	r2, #4
    3930:	4013      	ands	r3, r2
    3932:	d009      	beq.n	3948 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3934:	2000      	movs	r0, #0
    3936:	4b13      	ldr	r3, [pc, #76]	; (3984 <system_clock_source_get_hz+0xb4>)
    3938:	4798      	blx	r3
    393a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    393c:	4b0d      	ldr	r3, [pc, #52]	; (3974 <system_clock_source_get_hz+0xa4>)
    393e:	689b      	ldr	r3, [r3, #8]
    3940:	041b      	lsls	r3, r3, #16
    3942:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3944:	4353      	muls	r3, r2
    3946:	e00f      	b.n	3968 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    3948:	4b0f      	ldr	r3, [pc, #60]	; (3988 <system_clock_source_get_hz+0xb8>)
    394a:	e00d      	b.n	3968 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    394c:	4a0a      	ldr	r2, [pc, #40]	; (3978 <system_clock_source_get_hz+0xa8>)
    394e:	2350      	movs	r3, #80	; 0x50
    3950:	5cd3      	ldrb	r3, [r2, r3]
    3952:	b2db      	uxtb	r3, r3
    3954:	001a      	movs	r2, r3
    3956:	2304      	movs	r3, #4
    3958:	4013      	ands	r3, r2
    395a:	d101      	bne.n	3960 <system_clock_source_get_hz+0x90>
			return 0;
    395c:	2300      	movs	r3, #0
    395e:	e003      	b.n	3968 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    3960:	4b04      	ldr	r3, [pc, #16]	; (3974 <system_clock_source_get_hz+0xa4>)
    3962:	68db      	ldr	r3, [r3, #12]
    3964:	e000      	b.n	3968 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    3966:	2300      	movs	r3, #0
	}
}
    3968:	0018      	movs	r0, r3
    396a:	46bd      	mov	sp, r7
    396c:	b002      	add	sp, #8
    396e:	bd80      	pop	{r7, pc}
    3970:	00006218 	.word	0x00006218
    3974:	200000c4 	.word	0x200000c4
    3978:	40000800 	.word	0x40000800
    397c:	007a1200 	.word	0x007a1200
    3980:	00003871 	.word	0x00003871
    3984:	0000400d 	.word	0x0000400d
    3988:	02dc6c00 	.word	0x02dc6c00

0000398c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    398c:	b580      	push	{r7, lr}
    398e:	b084      	sub	sp, #16
    3990:	af00      	add	r7, sp, #0
    3992:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3994:	4b1a      	ldr	r3, [pc, #104]	; (3a00 <system_clock_source_osc8m_set_config+0x74>)
    3996:	6a1b      	ldr	r3, [r3, #32]
    3998:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    399a:	687b      	ldr	r3, [r7, #4]
    399c:	781b      	ldrb	r3, [r3, #0]
    399e:	1c1a      	adds	r2, r3, #0
    39a0:	2303      	movs	r3, #3
    39a2:	4013      	ands	r3, r2
    39a4:	b2da      	uxtb	r2, r3
    39a6:	230d      	movs	r3, #13
    39a8:	18fb      	adds	r3, r7, r3
    39aa:	2103      	movs	r1, #3
    39ac:	400a      	ands	r2, r1
    39ae:	0010      	movs	r0, r2
    39b0:	781a      	ldrb	r2, [r3, #0]
    39b2:	2103      	movs	r1, #3
    39b4:	438a      	bics	r2, r1
    39b6:	1c11      	adds	r1, r2, #0
    39b8:	1c02      	adds	r2, r0, #0
    39ba:	430a      	orrs	r2, r1
    39bc:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    39be:	687b      	ldr	r3, [r7, #4]
    39c0:	789a      	ldrb	r2, [r3, #2]
    39c2:	230c      	movs	r3, #12
    39c4:	18fb      	adds	r3, r7, r3
    39c6:	01d0      	lsls	r0, r2, #7
    39c8:	781a      	ldrb	r2, [r3, #0]
    39ca:	217f      	movs	r1, #127	; 0x7f
    39cc:	400a      	ands	r2, r1
    39ce:	1c11      	adds	r1, r2, #0
    39d0:	1c02      	adds	r2, r0, #0
    39d2:	430a      	orrs	r2, r1
    39d4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    39d6:	687b      	ldr	r3, [r7, #4]
    39d8:	785a      	ldrb	r2, [r3, #1]
    39da:	230c      	movs	r3, #12
    39dc:	18fb      	adds	r3, r7, r3
    39de:	2101      	movs	r1, #1
    39e0:	400a      	ands	r2, r1
    39e2:	0190      	lsls	r0, r2, #6
    39e4:	781a      	ldrb	r2, [r3, #0]
    39e6:	2140      	movs	r1, #64	; 0x40
    39e8:	438a      	bics	r2, r1
    39ea:	1c11      	adds	r1, r2, #0
    39ec:	1c02      	adds	r2, r0, #0
    39ee:	430a      	orrs	r2, r1
    39f0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    39f2:	4b03      	ldr	r3, [pc, #12]	; (3a00 <system_clock_source_osc8m_set_config+0x74>)
    39f4:	68fa      	ldr	r2, [r7, #12]
    39f6:	621a      	str	r2, [r3, #32]
}
    39f8:	46c0      	nop			; (mov r8, r8)
    39fa:	46bd      	mov	sp, r7
    39fc:	b004      	add	sp, #16
    39fe:	bd80      	pop	{r7, pc}
    3a00:	40000800 	.word	0x40000800

00003a04 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    3a04:	b580      	push	{r7, lr}
    3a06:	b082      	sub	sp, #8
    3a08:	af00      	add	r7, sp, #0
    3a0a:	0002      	movs	r2, r0
    3a0c:	1dfb      	adds	r3, r7, #7
    3a0e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3a10:	1dfb      	adds	r3, r7, #7
    3a12:	781b      	ldrb	r3, [r3, #0]
    3a14:	2b08      	cmp	r3, #8
    3a16:	d83b      	bhi.n	3a90 <system_clock_source_enable+0x8c>
    3a18:	009a      	lsls	r2, r3, #2
    3a1a:	4b21      	ldr	r3, [pc, #132]	; (3aa0 <system_clock_source_enable+0x9c>)
    3a1c:	18d3      	adds	r3, r2, r3
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    3a22:	4b20      	ldr	r3, [pc, #128]	; (3aa4 <system_clock_source_enable+0xa0>)
    3a24:	4a1f      	ldr	r2, [pc, #124]	; (3aa4 <system_clock_source_enable+0xa0>)
    3a26:	6a12      	ldr	r2, [r2, #32]
    3a28:	2102      	movs	r1, #2
    3a2a:	430a      	orrs	r2, r1
    3a2c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    3a2e:	2300      	movs	r3, #0
    3a30:	e031      	b.n	3a96 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    3a32:	4b1c      	ldr	r3, [pc, #112]	; (3aa4 <system_clock_source_enable+0xa0>)
    3a34:	4a1b      	ldr	r2, [pc, #108]	; (3aa4 <system_clock_source_enable+0xa0>)
    3a36:	6992      	ldr	r2, [r2, #24]
    3a38:	2102      	movs	r1, #2
    3a3a:	430a      	orrs	r2, r1
    3a3c:	619a      	str	r2, [r3, #24]
		break;
    3a3e:	e029      	b.n	3a94 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3a40:	4a18      	ldr	r2, [pc, #96]	; (3aa4 <system_clock_source_enable+0xa0>)
    3a42:	4b18      	ldr	r3, [pc, #96]	; (3aa4 <system_clock_source_enable+0xa0>)
    3a44:	8a1b      	ldrh	r3, [r3, #16]
    3a46:	b29b      	uxth	r3, r3
    3a48:	2102      	movs	r1, #2
    3a4a:	430b      	orrs	r3, r1
    3a4c:	b29b      	uxth	r3, r3
    3a4e:	8213      	strh	r3, [r2, #16]
		break;
    3a50:	e020      	b.n	3a94 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3a52:	4a14      	ldr	r2, [pc, #80]	; (3aa4 <system_clock_source_enable+0xa0>)
    3a54:	4b13      	ldr	r3, [pc, #76]	; (3aa4 <system_clock_source_enable+0xa0>)
    3a56:	8a9b      	ldrh	r3, [r3, #20]
    3a58:	b29b      	uxth	r3, r3
    3a5a:	2102      	movs	r1, #2
    3a5c:	430b      	orrs	r3, r1
    3a5e:	b29b      	uxth	r3, r3
    3a60:	8293      	strh	r3, [r2, #20]
		break;
    3a62:	e017      	b.n	3a94 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3a64:	4b10      	ldr	r3, [pc, #64]	; (3aa8 <system_clock_source_enable+0xa4>)
    3a66:	681b      	ldr	r3, [r3, #0]
    3a68:	2202      	movs	r2, #2
    3a6a:	431a      	orrs	r2, r3
    3a6c:	4b0e      	ldr	r3, [pc, #56]	; (3aa8 <system_clock_source_enable+0xa4>)
    3a6e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    3a70:	4b0e      	ldr	r3, [pc, #56]	; (3aac <system_clock_source_enable+0xa8>)
    3a72:	4798      	blx	r3
		break;
    3a74:	e00e      	b.n	3a94 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3a76:	4a0b      	ldr	r2, [pc, #44]	; (3aa4 <system_clock_source_enable+0xa0>)
    3a78:	490a      	ldr	r1, [pc, #40]	; (3aa4 <system_clock_source_enable+0xa0>)
    3a7a:	2344      	movs	r3, #68	; 0x44
    3a7c:	5ccb      	ldrb	r3, [r1, r3]
    3a7e:	b2db      	uxtb	r3, r3
    3a80:	2102      	movs	r1, #2
    3a82:	430b      	orrs	r3, r1
    3a84:	b2d9      	uxtb	r1, r3
    3a86:	2344      	movs	r3, #68	; 0x44
    3a88:	54d1      	strb	r1, [r2, r3]
		break;
    3a8a:	e003      	b.n	3a94 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3a8c:	2300      	movs	r3, #0
    3a8e:	e002      	b.n	3a96 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3a90:	2317      	movs	r3, #23
    3a92:	e000      	b.n	3a96 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    3a94:	2300      	movs	r3, #0
}
    3a96:	0018      	movs	r0, r3
    3a98:	46bd      	mov	sp, r7
    3a9a:	b002      	add	sp, #8
    3a9c:	bd80      	pop	{r7, pc}
    3a9e:	46c0      	nop			; (mov r8, r8)
    3aa0:	0000623c 	.word	0x0000623c
    3aa4:	40000800 	.word	0x40000800
    3aa8:	200000c4 	.word	0x200000c4
    3aac:	0000388d 	.word	0x0000388d

00003ab0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    3ab0:	b580      	push	{r7, lr}
    3ab2:	b082      	sub	sp, #8
    3ab4:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    3ab6:	003b      	movs	r3, r7
    3ab8:	2201      	movs	r2, #1
    3aba:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3abc:	2300      	movs	r3, #0
    3abe:	607b      	str	r3, [r7, #4]
    3ac0:	e009      	b.n	3ad6 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3ac2:	687b      	ldr	r3, [r7, #4]
    3ac4:	b2db      	uxtb	r3, r3
    3ac6:	003a      	movs	r2, r7
    3ac8:	0011      	movs	r1, r2
    3aca:	0018      	movs	r0, r3
    3acc:	4b05      	ldr	r3, [pc, #20]	; (3ae4 <_switch_peripheral_gclk+0x34>)
    3ace:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3ad0:	687b      	ldr	r3, [r7, #4]
    3ad2:	3301      	adds	r3, #1
    3ad4:	607b      	str	r3, [r7, #4]
    3ad6:	687b      	ldr	r3, [r7, #4]
    3ad8:	2b24      	cmp	r3, #36	; 0x24
    3ada:	d9f2      	bls.n	3ac2 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    3adc:	46c0      	nop			; (mov r8, r8)
    3ade:	46bd      	mov	sp, r7
    3ae0:	b002      	add	sp, #8
    3ae2:	bd80      	pop	{r7, pc}
    3ae4:	00003ee9 	.word	0x00003ee9

00003ae8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3ae8:	b580      	push	{r7, lr}
    3aea:	b0a0      	sub	sp, #128	; 0x80
    3aec:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3aee:	4b27      	ldr	r3, [pc, #156]	; (3b8c <system_clock_init+0xa4>)
    3af0:	22c2      	movs	r2, #194	; 0xc2
    3af2:	00d2      	lsls	r2, r2, #3
    3af4:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    3af6:	2000      	movs	r0, #0
    3af8:	4b25      	ldr	r3, [pc, #148]	; (3b90 <system_clock_init+0xa8>)
    3afa:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    3afc:	4b25      	ldr	r3, [pc, #148]	; (3b94 <system_clock_init+0xac>)
    3afe:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    3b00:	237c      	movs	r3, #124	; 0x7c
    3b02:	18fb      	adds	r3, r7, r3
    3b04:	0018      	movs	r0, r3
    3b06:	4b24      	ldr	r3, [pc, #144]	; (3b98 <system_clock_init+0xb0>)
    3b08:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3b0a:	237c      	movs	r3, #124	; 0x7c
    3b0c:	18fb      	adds	r3, r7, r3
    3b0e:	2200      	movs	r2, #0
    3b10:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    3b12:	237c      	movs	r3, #124	; 0x7c
    3b14:	18fb      	adds	r3, r7, r3
    3b16:	2201      	movs	r2, #1
    3b18:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3b1a:	237c      	movs	r3, #124	; 0x7c
    3b1c:	18fb      	adds	r3, r7, r3
    3b1e:	2200      	movs	r2, #0
    3b20:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    3b22:	237c      	movs	r3, #124	; 0x7c
    3b24:	18fb      	adds	r3, r7, r3
    3b26:	0018      	movs	r0, r3
    3b28:	4b1c      	ldr	r3, [pc, #112]	; (3b9c <system_clock_init+0xb4>)
    3b2a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3b2c:	2006      	movs	r0, #6
    3b2e:	4b1c      	ldr	r3, [pc, #112]	; (3ba0 <system_clock_init+0xb8>)
    3b30:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3b32:	4b1c      	ldr	r3, [pc, #112]	; (3ba4 <system_clock_init+0xbc>)
    3b34:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    3b36:	2000      	movs	r0, #0
    3b38:	4b1b      	ldr	r3, [pc, #108]	; (3ba8 <system_clock_init+0xc0>)
    3b3a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    3b3c:	2100      	movs	r1, #0
    3b3e:	2000      	movs	r0, #0
    3b40:	4b1a      	ldr	r3, [pc, #104]	; (3bac <system_clock_init+0xc4>)
    3b42:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    3b44:	2100      	movs	r1, #0
    3b46:	2001      	movs	r0, #1
    3b48:	4b18      	ldr	r3, [pc, #96]	; (3bac <system_clock_init+0xc4>)
    3b4a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    3b4c:	2100      	movs	r1, #0
    3b4e:	2002      	movs	r0, #2
    3b50:	4b16      	ldr	r3, [pc, #88]	; (3bac <system_clock_init+0xc4>)
    3b52:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3b54:	1d3b      	adds	r3, r7, #4
    3b56:	0018      	movs	r0, r3
    3b58:	4b15      	ldr	r3, [pc, #84]	; (3bb0 <system_clock_init+0xc8>)
    3b5a:	4798      	blx	r3
    3b5c:	1d3b      	adds	r3, r7, #4
    3b5e:	2206      	movs	r2, #6
    3b60:	701a      	strb	r2, [r3, #0]
    3b62:	1d3b      	adds	r3, r7, #4
    3b64:	2201      	movs	r2, #1
    3b66:	605a      	str	r2, [r3, #4]
    3b68:	1d3b      	adds	r3, r7, #4
    3b6a:	2200      	movs	r2, #0
    3b6c:	721a      	strb	r2, [r3, #8]
    3b6e:	1d3b      	adds	r3, r7, #4
    3b70:	2200      	movs	r2, #0
    3b72:	725a      	strb	r2, [r3, #9]
    3b74:	1d3b      	adds	r3, r7, #4
    3b76:	0019      	movs	r1, r3
    3b78:	2000      	movs	r0, #0
    3b7a:	4b0e      	ldr	r3, [pc, #56]	; (3bb4 <system_clock_init+0xcc>)
    3b7c:	4798      	blx	r3
    3b7e:	2000      	movs	r0, #0
    3b80:	4b0d      	ldr	r3, [pc, #52]	; (3bb8 <system_clock_init+0xd0>)
    3b82:	4798      	blx	r3
#endif
}
    3b84:	46c0      	nop			; (mov r8, r8)
    3b86:	46bd      	mov	sp, r7
    3b88:	b020      	add	sp, #128	; 0x80
    3b8a:	bd80      	pop	{r7, pc}
    3b8c:	40000800 	.word	0x40000800
    3b90:	0000383d 	.word	0x0000383d
    3b94:	00003ab1 	.word	0x00003ab1
    3b98:	000037a5 	.word	0x000037a5
    3b9c:	0000398d 	.word	0x0000398d
    3ba0:	00003a05 	.word	0x00003a05
    3ba4:	00003c61 	.word	0x00003c61
    3ba8:	000037c9 	.word	0x000037c9
    3bac:	000037e9 	.word	0x000037e9
    3bb0:	00003775 	.word	0x00003775
    3bb4:	00003c91 	.word	0x00003c91
    3bb8:	00003db5 	.word	0x00003db5

00003bbc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3bbc:	b580      	push	{r7, lr}
    3bbe:	b082      	sub	sp, #8
    3bc0:	af00      	add	r7, sp, #0
    3bc2:	0002      	movs	r2, r0
    3bc4:	6039      	str	r1, [r7, #0]
    3bc6:	1dfb      	adds	r3, r7, #7
    3bc8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3bca:	1dfb      	adds	r3, r7, #7
    3bcc:	781b      	ldrb	r3, [r3, #0]
    3bce:	2b01      	cmp	r3, #1
    3bd0:	d00a      	beq.n	3be8 <system_apb_clock_set_mask+0x2c>
    3bd2:	2b02      	cmp	r3, #2
    3bd4:	d00f      	beq.n	3bf6 <system_apb_clock_set_mask+0x3a>
    3bd6:	2b00      	cmp	r3, #0
    3bd8:	d114      	bne.n	3c04 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3bda:	4b0e      	ldr	r3, [pc, #56]	; (3c14 <system_apb_clock_set_mask+0x58>)
    3bdc:	4a0d      	ldr	r2, [pc, #52]	; (3c14 <system_apb_clock_set_mask+0x58>)
    3bde:	6991      	ldr	r1, [r2, #24]
    3be0:	683a      	ldr	r2, [r7, #0]
    3be2:	430a      	orrs	r2, r1
    3be4:	619a      	str	r2, [r3, #24]
			break;
    3be6:	e00f      	b.n	3c08 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3be8:	4b0a      	ldr	r3, [pc, #40]	; (3c14 <system_apb_clock_set_mask+0x58>)
    3bea:	4a0a      	ldr	r2, [pc, #40]	; (3c14 <system_apb_clock_set_mask+0x58>)
    3bec:	69d1      	ldr	r1, [r2, #28]
    3bee:	683a      	ldr	r2, [r7, #0]
    3bf0:	430a      	orrs	r2, r1
    3bf2:	61da      	str	r2, [r3, #28]
			break;
    3bf4:	e008      	b.n	3c08 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3bf6:	4b07      	ldr	r3, [pc, #28]	; (3c14 <system_apb_clock_set_mask+0x58>)
    3bf8:	4a06      	ldr	r2, [pc, #24]	; (3c14 <system_apb_clock_set_mask+0x58>)
    3bfa:	6a11      	ldr	r1, [r2, #32]
    3bfc:	683a      	ldr	r2, [r7, #0]
    3bfe:	430a      	orrs	r2, r1
    3c00:	621a      	str	r2, [r3, #32]
			break;
    3c02:	e001      	b.n	3c08 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3c04:	2317      	movs	r3, #23
    3c06:	e000      	b.n	3c0a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3c08:	2300      	movs	r3, #0
}
    3c0a:	0018      	movs	r0, r3
    3c0c:	46bd      	mov	sp, r7
    3c0e:	b002      	add	sp, #8
    3c10:	bd80      	pop	{r7, pc}
    3c12:	46c0      	nop			; (mov r8, r8)
    3c14:	40000400 	.word	0x40000400

00003c18 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    3c18:	b580      	push	{r7, lr}
    3c1a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    3c1c:	4b02      	ldr	r3, [pc, #8]	; (3c28 <system_interrupt_enter_critical_section+0x10>)
    3c1e:	4798      	blx	r3
}
    3c20:	46c0      	nop			; (mov r8, r8)
    3c22:	46bd      	mov	sp, r7
    3c24:	bd80      	pop	{r7, pc}
    3c26:	46c0      	nop			; (mov r8, r8)
    3c28:	000036e1 	.word	0x000036e1

00003c2c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    3c2c:	b580      	push	{r7, lr}
    3c2e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    3c30:	4b02      	ldr	r3, [pc, #8]	; (3c3c <system_interrupt_leave_critical_section+0x10>)
    3c32:	4798      	blx	r3
}
    3c34:	46c0      	nop			; (mov r8, r8)
    3c36:	46bd      	mov	sp, r7
    3c38:	bd80      	pop	{r7, pc}
    3c3a:	46c0      	nop			; (mov r8, r8)
    3c3c:	00003735 	.word	0x00003735

00003c40 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    3c40:	b580      	push	{r7, lr}
    3c42:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3c44:	4b05      	ldr	r3, [pc, #20]	; (3c5c <system_gclk_is_syncing+0x1c>)
    3c46:	785b      	ldrb	r3, [r3, #1]
    3c48:	b2db      	uxtb	r3, r3
    3c4a:	b25b      	sxtb	r3, r3
    3c4c:	2b00      	cmp	r3, #0
    3c4e:	da01      	bge.n	3c54 <system_gclk_is_syncing+0x14>
		return true;
    3c50:	2301      	movs	r3, #1
    3c52:	e000      	b.n	3c56 <system_gclk_is_syncing+0x16>
	}

	return false;
    3c54:	2300      	movs	r3, #0
}
    3c56:	0018      	movs	r0, r3
    3c58:	46bd      	mov	sp, r7
    3c5a:	bd80      	pop	{r7, pc}
    3c5c:	40000c00 	.word	0x40000c00

00003c60 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    3c60:	b580      	push	{r7, lr}
    3c62:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    3c64:	2108      	movs	r1, #8
    3c66:	2000      	movs	r0, #0
    3c68:	4b07      	ldr	r3, [pc, #28]	; (3c88 <system_gclk_init+0x28>)
    3c6a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3c6c:	4b07      	ldr	r3, [pc, #28]	; (3c8c <system_gclk_init+0x2c>)
    3c6e:	2201      	movs	r2, #1
    3c70:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3c72:	46c0      	nop			; (mov r8, r8)
    3c74:	4b05      	ldr	r3, [pc, #20]	; (3c8c <system_gclk_init+0x2c>)
    3c76:	781b      	ldrb	r3, [r3, #0]
    3c78:	b2db      	uxtb	r3, r3
    3c7a:	001a      	movs	r2, r3
    3c7c:	2301      	movs	r3, #1
    3c7e:	4013      	ands	r3, r2
    3c80:	d1f8      	bne.n	3c74 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    3c82:	46c0      	nop			; (mov r8, r8)
    3c84:	46bd      	mov	sp, r7
    3c86:	bd80      	pop	{r7, pc}
    3c88:	00003bbd 	.word	0x00003bbd
    3c8c:	40000c00 	.word	0x40000c00

00003c90 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3c90:	b580      	push	{r7, lr}
    3c92:	b086      	sub	sp, #24
    3c94:	af00      	add	r7, sp, #0
    3c96:	0002      	movs	r2, r0
    3c98:	6039      	str	r1, [r7, #0]
    3c9a:	1dfb      	adds	r3, r7, #7
    3c9c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3c9e:	1dfb      	adds	r3, r7, #7
    3ca0:	781b      	ldrb	r3, [r3, #0]
    3ca2:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    3ca4:	1dfb      	adds	r3, r7, #7
    3ca6:	781b      	ldrb	r3, [r3, #0]
    3ca8:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3caa:	683b      	ldr	r3, [r7, #0]
    3cac:	781b      	ldrb	r3, [r3, #0]
    3cae:	021b      	lsls	r3, r3, #8
    3cb0:	001a      	movs	r2, r3
    3cb2:	697b      	ldr	r3, [r7, #20]
    3cb4:	4313      	orrs	r3, r2
    3cb6:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3cb8:	683b      	ldr	r3, [r7, #0]
    3cba:	785b      	ldrb	r3, [r3, #1]
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	d004      	beq.n	3cca <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3cc0:	697b      	ldr	r3, [r7, #20]
    3cc2:	2280      	movs	r2, #128	; 0x80
    3cc4:	02d2      	lsls	r2, r2, #11
    3cc6:	4313      	orrs	r3, r2
    3cc8:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3cca:	683b      	ldr	r3, [r7, #0]
    3ccc:	7a5b      	ldrb	r3, [r3, #9]
    3cce:	2b00      	cmp	r3, #0
    3cd0:	d004      	beq.n	3cdc <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3cd2:	697b      	ldr	r3, [r7, #20]
    3cd4:	2280      	movs	r2, #128	; 0x80
    3cd6:	0312      	lsls	r2, r2, #12
    3cd8:	4313      	orrs	r3, r2
    3cda:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3cdc:	683b      	ldr	r3, [r7, #0]
    3cde:	685b      	ldr	r3, [r3, #4]
    3ce0:	2b01      	cmp	r3, #1
    3ce2:	d92c      	bls.n	3d3e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3ce4:	683b      	ldr	r3, [r7, #0]
    3ce6:	685a      	ldr	r2, [r3, #4]
    3ce8:	683b      	ldr	r3, [r7, #0]
    3cea:	685b      	ldr	r3, [r3, #4]
    3cec:	3b01      	subs	r3, #1
    3cee:	4013      	ands	r3, r2
    3cf0:	d11a      	bne.n	3d28 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    3cf2:	2300      	movs	r3, #0
    3cf4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3cf6:	2302      	movs	r3, #2
    3cf8:	60bb      	str	r3, [r7, #8]
    3cfa:	e005      	b.n	3d08 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    3cfc:	68fb      	ldr	r3, [r7, #12]
    3cfe:	3301      	adds	r3, #1
    3d00:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    3d02:	68bb      	ldr	r3, [r7, #8]
    3d04:	005b      	lsls	r3, r3, #1
    3d06:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3d08:	683b      	ldr	r3, [r7, #0]
    3d0a:	685a      	ldr	r2, [r3, #4]
    3d0c:	68bb      	ldr	r3, [r7, #8]
    3d0e:	429a      	cmp	r2, r3
    3d10:	d8f4      	bhi.n	3cfc <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3d12:	68fb      	ldr	r3, [r7, #12]
    3d14:	021b      	lsls	r3, r3, #8
    3d16:	693a      	ldr	r2, [r7, #16]
    3d18:	4313      	orrs	r3, r2
    3d1a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3d1c:	697b      	ldr	r3, [r7, #20]
    3d1e:	2280      	movs	r2, #128	; 0x80
    3d20:	0352      	lsls	r2, r2, #13
    3d22:	4313      	orrs	r3, r2
    3d24:	617b      	str	r3, [r7, #20]
    3d26:	e00a      	b.n	3d3e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3d28:	683b      	ldr	r3, [r7, #0]
    3d2a:	685b      	ldr	r3, [r3, #4]
    3d2c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    3d2e:	693a      	ldr	r2, [r7, #16]
    3d30:	4313      	orrs	r3, r2
    3d32:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3d34:	697b      	ldr	r3, [r7, #20]
    3d36:	2280      	movs	r2, #128	; 0x80
    3d38:	0292      	lsls	r2, r2, #10
    3d3a:	4313      	orrs	r3, r2
    3d3c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3d3e:	683b      	ldr	r3, [r7, #0]
    3d40:	7a1b      	ldrb	r3, [r3, #8]
    3d42:	2b00      	cmp	r3, #0
    3d44:	d004      	beq.n	3d50 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3d46:	697b      	ldr	r3, [r7, #20]
    3d48:	2280      	movs	r2, #128	; 0x80
    3d4a:	0392      	lsls	r2, r2, #14
    3d4c:	4313      	orrs	r3, r2
    3d4e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    3d50:	46c0      	nop			; (mov r8, r8)
    3d52:	4b13      	ldr	r3, [pc, #76]	; (3da0 <system_gclk_gen_set_config+0x110>)
    3d54:	4798      	blx	r3
    3d56:	1e03      	subs	r3, r0, #0
    3d58:	d1fb      	bne.n	3d52 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3d5a:	4b12      	ldr	r3, [pc, #72]	; (3da4 <system_gclk_gen_set_config+0x114>)
    3d5c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3d5e:	4a12      	ldr	r2, [pc, #72]	; (3da8 <system_gclk_gen_set_config+0x118>)
    3d60:	1dfb      	adds	r3, r7, #7
    3d62:	781b      	ldrb	r3, [r3, #0]
    3d64:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3d66:	46c0      	nop			; (mov r8, r8)
    3d68:	4b0d      	ldr	r3, [pc, #52]	; (3da0 <system_gclk_gen_set_config+0x110>)
    3d6a:	4798      	blx	r3
    3d6c:	1e03      	subs	r3, r0, #0
    3d6e:	d1fb      	bne.n	3d68 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3d70:	4b0e      	ldr	r3, [pc, #56]	; (3dac <system_gclk_gen_set_config+0x11c>)
    3d72:	693a      	ldr	r2, [r7, #16]
    3d74:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    3d76:	46c0      	nop			; (mov r8, r8)
    3d78:	4b09      	ldr	r3, [pc, #36]	; (3da0 <system_gclk_gen_set_config+0x110>)
    3d7a:	4798      	blx	r3
    3d7c:	1e03      	subs	r3, r0, #0
    3d7e:	d1fb      	bne.n	3d78 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3d80:	4b0a      	ldr	r3, [pc, #40]	; (3dac <system_gclk_gen_set_config+0x11c>)
    3d82:	4a0a      	ldr	r2, [pc, #40]	; (3dac <system_gclk_gen_set_config+0x11c>)
    3d84:	6851      	ldr	r1, [r2, #4]
    3d86:	2280      	movs	r2, #128	; 0x80
    3d88:	0252      	lsls	r2, r2, #9
    3d8a:	4011      	ands	r1, r2
    3d8c:	697a      	ldr	r2, [r7, #20]
    3d8e:	430a      	orrs	r2, r1
    3d90:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    3d92:	4b07      	ldr	r3, [pc, #28]	; (3db0 <system_gclk_gen_set_config+0x120>)
    3d94:	4798      	blx	r3
}
    3d96:	46c0      	nop			; (mov r8, r8)
    3d98:	46bd      	mov	sp, r7
    3d9a:	b006      	add	sp, #24
    3d9c:	bd80      	pop	{r7, pc}
    3d9e:	46c0      	nop			; (mov r8, r8)
    3da0:	00003c41 	.word	0x00003c41
    3da4:	00003c19 	.word	0x00003c19
    3da8:	40000c08 	.word	0x40000c08
    3dac:	40000c00 	.word	0x40000c00
    3db0:	00003c2d 	.word	0x00003c2d

00003db4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3db4:	b580      	push	{r7, lr}
    3db6:	b082      	sub	sp, #8
    3db8:	af00      	add	r7, sp, #0
    3dba:	0002      	movs	r2, r0
    3dbc:	1dfb      	adds	r3, r7, #7
    3dbe:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3dc0:	46c0      	nop			; (mov r8, r8)
    3dc2:	4b0e      	ldr	r3, [pc, #56]	; (3dfc <system_gclk_gen_enable+0x48>)
    3dc4:	4798      	blx	r3
    3dc6:	1e03      	subs	r3, r0, #0
    3dc8:	d1fb      	bne.n	3dc2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3dca:	4b0d      	ldr	r3, [pc, #52]	; (3e00 <system_gclk_gen_enable+0x4c>)
    3dcc:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3dce:	4a0d      	ldr	r2, [pc, #52]	; (3e04 <system_gclk_gen_enable+0x50>)
    3dd0:	1dfb      	adds	r3, r7, #7
    3dd2:	781b      	ldrb	r3, [r3, #0]
    3dd4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3dd6:	46c0      	nop			; (mov r8, r8)
    3dd8:	4b08      	ldr	r3, [pc, #32]	; (3dfc <system_gclk_gen_enable+0x48>)
    3dda:	4798      	blx	r3
    3ddc:	1e03      	subs	r3, r0, #0
    3dde:	d1fb      	bne.n	3dd8 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3de0:	4b09      	ldr	r3, [pc, #36]	; (3e08 <system_gclk_gen_enable+0x54>)
    3de2:	4a09      	ldr	r2, [pc, #36]	; (3e08 <system_gclk_gen_enable+0x54>)
    3de4:	6852      	ldr	r2, [r2, #4]
    3de6:	2180      	movs	r1, #128	; 0x80
    3de8:	0249      	lsls	r1, r1, #9
    3dea:	430a      	orrs	r2, r1
    3dec:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    3dee:	4b07      	ldr	r3, [pc, #28]	; (3e0c <system_gclk_gen_enable+0x58>)
    3df0:	4798      	blx	r3
}
    3df2:	46c0      	nop			; (mov r8, r8)
    3df4:	46bd      	mov	sp, r7
    3df6:	b002      	add	sp, #8
    3df8:	bd80      	pop	{r7, pc}
    3dfa:	46c0      	nop			; (mov r8, r8)
    3dfc:	00003c41 	.word	0x00003c41
    3e00:	00003c19 	.word	0x00003c19
    3e04:	40000c04 	.word	0x40000c04
    3e08:	40000c00 	.word	0x40000c00
    3e0c:	00003c2d 	.word	0x00003c2d

00003e10 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3e10:	b580      	push	{r7, lr}
    3e12:	b086      	sub	sp, #24
    3e14:	af00      	add	r7, sp, #0
    3e16:	0002      	movs	r2, r0
    3e18:	1dfb      	adds	r3, r7, #7
    3e1a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3e1c:	46c0      	nop			; (mov r8, r8)
    3e1e:	4b2a      	ldr	r3, [pc, #168]	; (3ec8 <system_gclk_gen_get_hz+0xb8>)
    3e20:	4798      	blx	r3
    3e22:	1e03      	subs	r3, r0, #0
    3e24:	d1fb      	bne.n	3e1e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3e26:	4b29      	ldr	r3, [pc, #164]	; (3ecc <system_gclk_gen_get_hz+0xbc>)
    3e28:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3e2a:	4a29      	ldr	r2, [pc, #164]	; (3ed0 <system_gclk_gen_get_hz+0xc0>)
    3e2c:	1dfb      	adds	r3, r7, #7
    3e2e:	781b      	ldrb	r3, [r3, #0]
    3e30:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3e32:	46c0      	nop			; (mov r8, r8)
    3e34:	4b24      	ldr	r3, [pc, #144]	; (3ec8 <system_gclk_gen_get_hz+0xb8>)
    3e36:	4798      	blx	r3
    3e38:	1e03      	subs	r3, r0, #0
    3e3a:	d1fb      	bne.n	3e34 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3e3c:	4b25      	ldr	r3, [pc, #148]	; (3ed4 <system_gclk_gen_get_hz+0xc4>)
    3e3e:	685b      	ldr	r3, [r3, #4]
    3e40:	04db      	lsls	r3, r3, #19
    3e42:	0edb      	lsrs	r3, r3, #27
    3e44:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3e46:	0018      	movs	r0, r3
    3e48:	4b23      	ldr	r3, [pc, #140]	; (3ed8 <system_gclk_gen_get_hz+0xc8>)
    3e4a:	4798      	blx	r3
    3e4c:	0003      	movs	r3, r0
    3e4e:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3e50:	4a1f      	ldr	r2, [pc, #124]	; (3ed0 <system_gclk_gen_get_hz+0xc0>)
    3e52:	1dfb      	adds	r3, r7, #7
    3e54:	781b      	ldrb	r3, [r3, #0]
    3e56:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3e58:	4b1e      	ldr	r3, [pc, #120]	; (3ed4 <system_gclk_gen_get_hz+0xc4>)
    3e5a:	685b      	ldr	r3, [r3, #4]
    3e5c:	02db      	lsls	r3, r3, #11
    3e5e:	0fdb      	lsrs	r3, r3, #31
    3e60:	b2da      	uxtb	r2, r3
    3e62:	2313      	movs	r3, #19
    3e64:	18fb      	adds	r3, r7, r3
    3e66:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3e68:	4a1c      	ldr	r2, [pc, #112]	; (3edc <system_gclk_gen_get_hz+0xcc>)
    3e6a:	1dfb      	adds	r3, r7, #7
    3e6c:	781b      	ldrb	r3, [r3, #0]
    3e6e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3e70:	46c0      	nop			; (mov r8, r8)
    3e72:	4b15      	ldr	r3, [pc, #84]	; (3ec8 <system_gclk_gen_get_hz+0xb8>)
    3e74:	4798      	blx	r3
    3e76:	1e03      	subs	r3, r0, #0
    3e78:	d1fb      	bne.n	3e72 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3e7a:	4b16      	ldr	r3, [pc, #88]	; (3ed4 <system_gclk_gen_get_hz+0xc4>)
    3e7c:	689b      	ldr	r3, [r3, #8]
    3e7e:	021b      	lsls	r3, r3, #8
    3e80:	0c1b      	lsrs	r3, r3, #16
    3e82:	b29b      	uxth	r3, r3
    3e84:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    3e86:	4b16      	ldr	r3, [pc, #88]	; (3ee0 <system_gclk_gen_get_hz+0xd0>)
    3e88:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3e8a:	2313      	movs	r3, #19
    3e8c:	18fb      	adds	r3, r7, r3
    3e8e:	781b      	ldrb	r3, [r3, #0]
    3e90:	2b00      	cmp	r3, #0
    3e92:	d109      	bne.n	3ea8 <system_gclk_gen_get_hz+0x98>
    3e94:	68fb      	ldr	r3, [r7, #12]
    3e96:	2b01      	cmp	r3, #1
    3e98:	d906      	bls.n	3ea8 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    3e9a:	4b12      	ldr	r3, [pc, #72]	; (3ee4 <system_gclk_gen_get_hz+0xd4>)
    3e9c:	68f9      	ldr	r1, [r7, #12]
    3e9e:	6978      	ldr	r0, [r7, #20]
    3ea0:	4798      	blx	r3
    3ea2:	0003      	movs	r3, r0
    3ea4:	617b      	str	r3, [r7, #20]
    3ea6:	e00a      	b.n	3ebe <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    3ea8:	2313      	movs	r3, #19
    3eaa:	18fb      	adds	r3, r7, r3
    3eac:	781b      	ldrb	r3, [r3, #0]
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d005      	beq.n	3ebe <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    3eb2:	68fb      	ldr	r3, [r7, #12]
    3eb4:	3301      	adds	r3, #1
    3eb6:	697a      	ldr	r2, [r7, #20]
    3eb8:	40da      	lsrs	r2, r3
    3eba:	0013      	movs	r3, r2
    3ebc:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    3ebe:	697b      	ldr	r3, [r7, #20]
}
    3ec0:	0018      	movs	r0, r3
    3ec2:	46bd      	mov	sp, r7
    3ec4:	b006      	add	sp, #24
    3ec6:	bd80      	pop	{r7, pc}
    3ec8:	00003c41 	.word	0x00003c41
    3ecc:	00003c19 	.word	0x00003c19
    3ed0:	40000c04 	.word	0x40000c04
    3ed4:	40000c00 	.word	0x40000c00
    3ed8:	000038d1 	.word	0x000038d1
    3edc:	40000c08 	.word	0x40000c08
    3ee0:	00003c2d 	.word	0x00003c2d
    3ee4:	00004e11 	.word	0x00004e11

00003ee8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3ee8:	b580      	push	{r7, lr}
    3eea:	b084      	sub	sp, #16
    3eec:	af00      	add	r7, sp, #0
    3eee:	0002      	movs	r2, r0
    3ef0:	6039      	str	r1, [r7, #0]
    3ef2:	1dfb      	adds	r3, r7, #7
    3ef4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    3ef6:	1dfb      	adds	r3, r7, #7
    3ef8:	781b      	ldrb	r3, [r3, #0]
    3efa:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3efc:	683b      	ldr	r3, [r7, #0]
    3efe:	781b      	ldrb	r3, [r3, #0]
    3f00:	021b      	lsls	r3, r3, #8
    3f02:	001a      	movs	r2, r3
    3f04:	68fb      	ldr	r3, [r7, #12]
    3f06:	4313      	orrs	r3, r2
    3f08:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3f0a:	1dfb      	adds	r3, r7, #7
    3f0c:	781b      	ldrb	r3, [r3, #0]
    3f0e:	0018      	movs	r0, r3
    3f10:	4b04      	ldr	r3, [pc, #16]	; (3f24 <system_gclk_chan_set_config+0x3c>)
    3f12:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3f14:	4b04      	ldr	r3, [pc, #16]	; (3f28 <system_gclk_chan_set_config+0x40>)
    3f16:	68fa      	ldr	r2, [r7, #12]
    3f18:	b292      	uxth	r2, r2
    3f1a:	805a      	strh	r2, [r3, #2]
}
    3f1c:	46c0      	nop			; (mov r8, r8)
    3f1e:	46bd      	mov	sp, r7
    3f20:	b004      	add	sp, #16
    3f22:	bd80      	pop	{r7, pc}
    3f24:	00003f75 	.word	0x00003f75
    3f28:	40000c00 	.word	0x40000c00

00003f2c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3f2c:	b580      	push	{r7, lr}
    3f2e:	b082      	sub	sp, #8
    3f30:	af00      	add	r7, sp, #0
    3f32:	0002      	movs	r2, r0
    3f34:	1dfb      	adds	r3, r7, #7
    3f36:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3f38:	4b0a      	ldr	r3, [pc, #40]	; (3f64 <system_gclk_chan_enable+0x38>)
    3f3a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3f3c:	4a0a      	ldr	r2, [pc, #40]	; (3f68 <system_gclk_chan_enable+0x3c>)
    3f3e:	1dfb      	adds	r3, r7, #7
    3f40:	781b      	ldrb	r3, [r3, #0]
    3f42:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3f44:	4909      	ldr	r1, [pc, #36]	; (3f6c <system_gclk_chan_enable+0x40>)
    3f46:	4b09      	ldr	r3, [pc, #36]	; (3f6c <system_gclk_chan_enable+0x40>)
    3f48:	885b      	ldrh	r3, [r3, #2]
    3f4a:	b29b      	uxth	r3, r3
    3f4c:	2280      	movs	r2, #128	; 0x80
    3f4e:	01d2      	lsls	r2, r2, #7
    3f50:	4313      	orrs	r3, r2
    3f52:	b29b      	uxth	r3, r3
    3f54:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    3f56:	4b06      	ldr	r3, [pc, #24]	; (3f70 <system_gclk_chan_enable+0x44>)
    3f58:	4798      	blx	r3
}
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	46bd      	mov	sp, r7
    3f5e:	b002      	add	sp, #8
    3f60:	bd80      	pop	{r7, pc}
    3f62:	46c0      	nop			; (mov r8, r8)
    3f64:	00003c19 	.word	0x00003c19
    3f68:	40000c02 	.word	0x40000c02
    3f6c:	40000c00 	.word	0x40000c00
    3f70:	00003c2d 	.word	0x00003c2d

00003f74 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3f74:	b580      	push	{r7, lr}
    3f76:	b084      	sub	sp, #16
    3f78:	af00      	add	r7, sp, #0
    3f7a:	0002      	movs	r2, r0
    3f7c:	1dfb      	adds	r3, r7, #7
    3f7e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3f80:	4b1c      	ldr	r3, [pc, #112]	; (3ff4 <system_gclk_chan_disable+0x80>)
    3f82:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3f84:	4a1c      	ldr	r2, [pc, #112]	; (3ff8 <system_gclk_chan_disable+0x84>)
    3f86:	1dfb      	adds	r3, r7, #7
    3f88:	781b      	ldrb	r3, [r3, #0]
    3f8a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3f8c:	4b1b      	ldr	r3, [pc, #108]	; (3ffc <system_gclk_chan_disable+0x88>)
    3f8e:	885b      	ldrh	r3, [r3, #2]
    3f90:	051b      	lsls	r3, r3, #20
    3f92:	0f1b      	lsrs	r3, r3, #28
    3f94:	b2db      	uxtb	r3, r3
    3f96:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    3f98:	4a18      	ldr	r2, [pc, #96]	; (3ffc <system_gclk_chan_disable+0x88>)
    3f9a:	8853      	ldrh	r3, [r2, #2]
    3f9c:	4918      	ldr	r1, [pc, #96]	; (4000 <system_gclk_chan_disable+0x8c>)
    3f9e:	400b      	ands	r3, r1
    3fa0:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3fa2:	4a16      	ldr	r2, [pc, #88]	; (3ffc <system_gclk_chan_disable+0x88>)
    3fa4:	4b15      	ldr	r3, [pc, #84]	; (3ffc <system_gclk_chan_disable+0x88>)
    3fa6:	885b      	ldrh	r3, [r3, #2]
    3fa8:	b29b      	uxth	r3, r3
    3faa:	4916      	ldr	r1, [pc, #88]	; (4004 <system_gclk_chan_disable+0x90>)
    3fac:	400b      	ands	r3, r1
    3fae:	b29b      	uxth	r3, r3
    3fb0:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3fb2:	46c0      	nop			; (mov r8, r8)
    3fb4:	4b11      	ldr	r3, [pc, #68]	; (3ffc <system_gclk_chan_disable+0x88>)
    3fb6:	885b      	ldrh	r3, [r3, #2]
    3fb8:	b29b      	uxth	r3, r3
    3fba:	001a      	movs	r2, r3
    3fbc:	2380      	movs	r3, #128	; 0x80
    3fbe:	01db      	lsls	r3, r3, #7
    3fc0:	4013      	ands	r3, r2
    3fc2:	d1f7      	bne.n	3fb4 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3fc4:	4a0d      	ldr	r2, [pc, #52]	; (3ffc <system_gclk_chan_disable+0x88>)
    3fc6:	68fb      	ldr	r3, [r7, #12]
    3fc8:	b2db      	uxtb	r3, r3
    3fca:	1c19      	adds	r1, r3, #0
    3fcc:	230f      	movs	r3, #15
    3fce:	400b      	ands	r3, r1
    3fd0:	b2d9      	uxtb	r1, r3
    3fd2:	8853      	ldrh	r3, [r2, #2]
    3fd4:	1c08      	adds	r0, r1, #0
    3fd6:	210f      	movs	r1, #15
    3fd8:	4001      	ands	r1, r0
    3fda:	0208      	lsls	r0, r1, #8
    3fdc:	4908      	ldr	r1, [pc, #32]	; (4000 <system_gclk_chan_disable+0x8c>)
    3fde:	400b      	ands	r3, r1
    3fe0:	1c19      	adds	r1, r3, #0
    3fe2:	1c03      	adds	r3, r0, #0
    3fe4:	430b      	orrs	r3, r1
    3fe6:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    3fe8:	4b07      	ldr	r3, [pc, #28]	; (4008 <system_gclk_chan_disable+0x94>)
    3fea:	4798      	blx	r3
}
    3fec:	46c0      	nop			; (mov r8, r8)
    3fee:	46bd      	mov	sp, r7
    3ff0:	b004      	add	sp, #16
    3ff2:	bd80      	pop	{r7, pc}
    3ff4:	00003c19 	.word	0x00003c19
    3ff8:	40000c02 	.word	0x40000c02
    3ffc:	40000c00 	.word	0x40000c00
    4000:	fffff0ff 	.word	0xfffff0ff
    4004:	ffffbfff 	.word	0xffffbfff
    4008:	00003c2d 	.word	0x00003c2d

0000400c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    400c:	b580      	push	{r7, lr}
    400e:	b084      	sub	sp, #16
    4010:	af00      	add	r7, sp, #0
    4012:	0002      	movs	r2, r0
    4014:	1dfb      	adds	r3, r7, #7
    4016:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    4018:	4b0d      	ldr	r3, [pc, #52]	; (4050 <system_gclk_chan_get_hz+0x44>)
    401a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    401c:	4a0d      	ldr	r2, [pc, #52]	; (4054 <system_gclk_chan_get_hz+0x48>)
    401e:	1dfb      	adds	r3, r7, #7
    4020:	781b      	ldrb	r3, [r3, #0]
    4022:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4024:	4b0c      	ldr	r3, [pc, #48]	; (4058 <system_gclk_chan_get_hz+0x4c>)
    4026:	885b      	ldrh	r3, [r3, #2]
    4028:	051b      	lsls	r3, r3, #20
    402a:	0f1b      	lsrs	r3, r3, #28
    402c:	b2da      	uxtb	r2, r3
    402e:	230f      	movs	r3, #15
    4030:	18fb      	adds	r3, r7, r3
    4032:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    4034:	4b09      	ldr	r3, [pc, #36]	; (405c <system_gclk_chan_get_hz+0x50>)
    4036:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4038:	230f      	movs	r3, #15
    403a:	18fb      	adds	r3, r7, r3
    403c:	781b      	ldrb	r3, [r3, #0]
    403e:	0018      	movs	r0, r3
    4040:	4b07      	ldr	r3, [pc, #28]	; (4060 <system_gclk_chan_get_hz+0x54>)
    4042:	4798      	blx	r3
    4044:	0003      	movs	r3, r0
}
    4046:	0018      	movs	r0, r3
    4048:	46bd      	mov	sp, r7
    404a:	b004      	add	sp, #16
    404c:	bd80      	pop	{r7, pc}
    404e:	46c0      	nop			; (mov r8, r8)
    4050:	00003c19 	.word	0x00003c19
    4054:	40000c02 	.word	0x40000c02
    4058:	40000c00 	.word	0x40000c00
    405c:	00003c2d 	.word	0x00003c2d
    4060:	00003e11 	.word	0x00003e11

00004064 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4064:	b580      	push	{r7, lr}
    4066:	b084      	sub	sp, #16
    4068:	af00      	add	r7, sp, #0
    406a:	0002      	movs	r2, r0
    406c:	1dfb      	adds	r3, r7, #7
    406e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4070:	230f      	movs	r3, #15
    4072:	18fb      	adds	r3, r7, r3
    4074:	1dfa      	adds	r2, r7, #7
    4076:	7812      	ldrb	r2, [r2, #0]
    4078:	09d2      	lsrs	r2, r2, #7
    407a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    407c:	230e      	movs	r3, #14
    407e:	18fb      	adds	r3, r7, r3
    4080:	1dfa      	adds	r2, r7, #7
    4082:	7812      	ldrb	r2, [r2, #0]
    4084:	0952      	lsrs	r2, r2, #5
    4086:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4088:	4b0d      	ldr	r3, [pc, #52]	; (40c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    408a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    408c:	230f      	movs	r3, #15
    408e:	18fb      	adds	r3, r7, r3
    4090:	781b      	ldrb	r3, [r3, #0]
    4092:	2b00      	cmp	r3, #0
    4094:	d10f      	bne.n	40b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4096:	230f      	movs	r3, #15
    4098:	18fb      	adds	r3, r7, r3
    409a:	781b      	ldrb	r3, [r3, #0]
    409c:	009b      	lsls	r3, r3, #2
    409e:	2210      	movs	r2, #16
    40a0:	4694      	mov	ip, r2
    40a2:	44bc      	add	ip, r7
    40a4:	4463      	add	r3, ip
    40a6:	3b08      	subs	r3, #8
    40a8:	681a      	ldr	r2, [r3, #0]
    40aa:	230e      	movs	r3, #14
    40ac:	18fb      	adds	r3, r7, r3
    40ae:	781b      	ldrb	r3, [r3, #0]
    40b0:	01db      	lsls	r3, r3, #7
    40b2:	18d3      	adds	r3, r2, r3
    40b4:	e000      	b.n	40b8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    40b6:	2300      	movs	r3, #0
	}
}
    40b8:	0018      	movs	r0, r3
    40ba:	46bd      	mov	sp, r7
    40bc:	b004      	add	sp, #16
    40be:	bd80      	pop	{r7, pc}
    40c0:	41004400 	.word	0x41004400

000040c4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    40c4:	b580      	push	{r7, lr}
    40c6:	b088      	sub	sp, #32
    40c8:	af00      	add	r7, sp, #0
    40ca:	60f8      	str	r0, [r7, #12]
    40cc:	60b9      	str	r1, [r7, #8]
    40ce:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    40d0:	2300      	movs	r3, #0
    40d2:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    40d4:	687b      	ldr	r3, [r7, #4]
    40d6:	78db      	ldrb	r3, [r3, #3]
    40d8:	2201      	movs	r2, #1
    40da:	4053      	eors	r3, r2
    40dc:	b2db      	uxtb	r3, r3
    40de:	2b00      	cmp	r3, #0
    40e0:	d035      	beq.n	414e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    40e2:	687b      	ldr	r3, [r7, #4]
    40e4:	781b      	ldrb	r3, [r3, #0]
    40e6:	2b80      	cmp	r3, #128	; 0x80
    40e8:	d00b      	beq.n	4102 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    40ea:	69fb      	ldr	r3, [r7, #28]
    40ec:	2280      	movs	r2, #128	; 0x80
    40ee:	0252      	lsls	r2, r2, #9
    40f0:	4313      	orrs	r3, r2
    40f2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	781b      	ldrb	r3, [r3, #0]
    40f8:	061b      	lsls	r3, r3, #24
    40fa:	001a      	movs	r2, r3
    40fc:	69fb      	ldr	r3, [r7, #28]
    40fe:	4313      	orrs	r3, r2
    4100:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4102:	687b      	ldr	r3, [r7, #4]
    4104:	785b      	ldrb	r3, [r3, #1]
    4106:	2b00      	cmp	r3, #0
    4108:	d003      	beq.n	4112 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    410a:	687b      	ldr	r3, [r7, #4]
    410c:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    410e:	2b02      	cmp	r3, #2
    4110:	d110      	bne.n	4134 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    4112:	69fb      	ldr	r3, [r7, #28]
    4114:	2280      	movs	r2, #128	; 0x80
    4116:	0292      	lsls	r2, r2, #10
    4118:	4313      	orrs	r3, r2
    411a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    411c:	687b      	ldr	r3, [r7, #4]
    411e:	789b      	ldrb	r3, [r3, #2]
    4120:	2b00      	cmp	r3, #0
    4122:	d004      	beq.n	412e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4124:	69fb      	ldr	r3, [r7, #28]
    4126:	2280      	movs	r2, #128	; 0x80
    4128:	02d2      	lsls	r2, r2, #11
    412a:	4313      	orrs	r3, r2
    412c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    412e:	68fb      	ldr	r3, [r7, #12]
    4130:	68ba      	ldr	r2, [r7, #8]
    4132:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4134:	687b      	ldr	r3, [r7, #4]
    4136:	785b      	ldrb	r3, [r3, #1]
    4138:	2b01      	cmp	r3, #1
    413a:	d003      	beq.n	4144 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    413c:	687b      	ldr	r3, [r7, #4]
    413e:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4140:	2b02      	cmp	r3, #2
    4142:	d107      	bne.n	4154 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4144:	69fb      	ldr	r3, [r7, #28]
    4146:	4a22      	ldr	r2, [pc, #136]	; (41d0 <_system_pinmux_config+0x10c>)
    4148:	4013      	ands	r3, r2
    414a:	61fb      	str	r3, [r7, #28]
    414c:	e002      	b.n	4154 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    414e:	68fb      	ldr	r3, [r7, #12]
    4150:	68ba      	ldr	r2, [r7, #8]
    4152:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4154:	68bb      	ldr	r3, [r7, #8]
    4156:	041b      	lsls	r3, r3, #16
    4158:	0c1b      	lsrs	r3, r3, #16
    415a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    415c:	68bb      	ldr	r3, [r7, #8]
    415e:	0c1b      	lsrs	r3, r3, #16
    4160:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4162:	69ba      	ldr	r2, [r7, #24]
    4164:	69fb      	ldr	r3, [r7, #28]
    4166:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4168:	22a0      	movs	r2, #160	; 0xa0
    416a:	05d2      	lsls	r2, r2, #23
    416c:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    416e:	68fb      	ldr	r3, [r7, #12]
    4170:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    4172:	697a      	ldr	r2, [r7, #20]
    4174:	69fb      	ldr	r3, [r7, #28]
    4176:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4178:	22d0      	movs	r2, #208	; 0xd0
    417a:	0612      	lsls	r2, r2, #24
    417c:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    417e:	68fb      	ldr	r3, [r7, #12]
    4180:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    4182:	687b      	ldr	r3, [r7, #4]
    4184:	78db      	ldrb	r3, [r3, #3]
    4186:	2201      	movs	r2, #1
    4188:	4053      	eors	r3, r2
    418a:	b2db      	uxtb	r3, r3
    418c:	2b00      	cmp	r3, #0
    418e:	d01a      	beq.n	41c6 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4190:	69fa      	ldr	r2, [r7, #28]
    4192:	2380      	movs	r3, #128	; 0x80
    4194:	02db      	lsls	r3, r3, #11
    4196:	4013      	ands	r3, r2
    4198:	d00a      	beq.n	41b0 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    419a:	687b      	ldr	r3, [r7, #4]
    419c:	789b      	ldrb	r3, [r3, #2]
    419e:	2b01      	cmp	r3, #1
    41a0:	d103      	bne.n	41aa <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    41a2:	68fb      	ldr	r3, [r7, #12]
    41a4:	68ba      	ldr	r2, [r7, #8]
    41a6:	619a      	str	r2, [r3, #24]
    41a8:	e002      	b.n	41b0 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    41aa:	68fb      	ldr	r3, [r7, #12]
    41ac:	68ba      	ldr	r2, [r7, #8]
    41ae:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	785b      	ldrb	r3, [r3, #1]
    41b4:	2b01      	cmp	r3, #1
    41b6:	d003      	beq.n	41c0 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    41b8:	687b      	ldr	r3, [r7, #4]
    41ba:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    41bc:	2b02      	cmp	r3, #2
    41be:	d102      	bne.n	41c6 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    41c0:	68fb      	ldr	r3, [r7, #12]
    41c2:	68ba      	ldr	r2, [r7, #8]
    41c4:	609a      	str	r2, [r3, #8]
		}
	}
}
    41c6:	46c0      	nop			; (mov r8, r8)
    41c8:	46bd      	mov	sp, r7
    41ca:	b008      	add	sp, #32
    41cc:	bd80      	pop	{r7, pc}
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	fffbffff 	.word	0xfffbffff

000041d4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    41d4:	b580      	push	{r7, lr}
    41d6:	b084      	sub	sp, #16
    41d8:	af00      	add	r7, sp, #0
    41da:	0002      	movs	r2, r0
    41dc:	6039      	str	r1, [r7, #0]
    41de:	1dfb      	adds	r3, r7, #7
    41e0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    41e2:	1dfb      	adds	r3, r7, #7
    41e4:	781b      	ldrb	r3, [r3, #0]
    41e6:	0018      	movs	r0, r3
    41e8:	4b0a      	ldr	r3, [pc, #40]	; (4214 <system_pinmux_pin_set_config+0x40>)
    41ea:	4798      	blx	r3
    41ec:	0003      	movs	r3, r0
    41ee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    41f0:	1dfb      	adds	r3, r7, #7
    41f2:	781b      	ldrb	r3, [r3, #0]
    41f4:	221f      	movs	r2, #31
    41f6:	4013      	ands	r3, r2
    41f8:	2201      	movs	r2, #1
    41fa:	409a      	lsls	r2, r3
    41fc:	0013      	movs	r3, r2
    41fe:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    4200:	683a      	ldr	r2, [r7, #0]
    4202:	68b9      	ldr	r1, [r7, #8]
    4204:	68fb      	ldr	r3, [r7, #12]
    4206:	0018      	movs	r0, r3
    4208:	4b03      	ldr	r3, [pc, #12]	; (4218 <system_pinmux_pin_set_config+0x44>)
    420a:	4798      	blx	r3
}
    420c:	46c0      	nop			; (mov r8, r8)
    420e:	46bd      	mov	sp, r7
    4210:	b004      	add	sp, #16
    4212:	bd80      	pop	{r7, pc}
    4214:	00004065 	.word	0x00004065
    4218:	000040c5 	.word	0x000040c5

0000421c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    421c:	b580      	push	{r7, lr}
    421e:	af00      	add	r7, sp, #0
	return;
    4220:	46c0      	nop			; (mov r8, r8)
}
    4222:	46bd      	mov	sp, r7
    4224:	bd80      	pop	{r7, pc}
    4226:	46c0      	nop			; (mov r8, r8)

00004228 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    4228:	b580      	push	{r7, lr}
    422a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    422c:	4b06      	ldr	r3, [pc, #24]	; (4248 <system_init+0x20>)
    422e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    4230:	4b06      	ldr	r3, [pc, #24]	; (424c <system_init+0x24>)
    4232:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    4234:	4b06      	ldr	r3, [pc, #24]	; (4250 <system_init+0x28>)
    4236:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    4238:	4b06      	ldr	r3, [pc, #24]	; (4254 <system_init+0x2c>)
    423a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    423c:	4b06      	ldr	r3, [pc, #24]	; (4258 <system_init+0x30>)
    423e:	4798      	blx	r3
}
    4240:	46c0      	nop			; (mov r8, r8)
    4242:	46bd      	mov	sp, r7
    4244:	bd80      	pop	{r7, pc}
    4246:	46c0      	nop			; (mov r8, r8)
    4248:	00003ae9 	.word	0x00003ae9
    424c:	000036d5 	.word	0x000036d5
    4250:	0000421d 	.word	0x0000421d
    4254:	0000421d 	.word	0x0000421d
    4258:	0000421d 	.word	0x0000421d

0000425c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    425c:	b580      	push	{r7, lr}
    425e:	b082      	sub	sp, #8
    4260:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    4262:	4b2f      	ldr	r3, [pc, #188]	; (4320 <Reset_Handler+0xc4>)
    4264:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    4266:	4b2f      	ldr	r3, [pc, #188]	; (4324 <Reset_Handler+0xc8>)
    4268:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    426a:	687a      	ldr	r2, [r7, #4]
    426c:	683b      	ldr	r3, [r7, #0]
    426e:	429a      	cmp	r2, r3
    4270:	d00c      	beq.n	428c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    4272:	e007      	b.n	4284 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    4274:	683b      	ldr	r3, [r7, #0]
    4276:	1d1a      	adds	r2, r3, #4
    4278:	603a      	str	r2, [r7, #0]
    427a:	687a      	ldr	r2, [r7, #4]
    427c:	1d11      	adds	r1, r2, #4
    427e:	6079      	str	r1, [r7, #4]
    4280:	6812      	ldr	r2, [r2, #0]
    4282:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    4284:	683a      	ldr	r2, [r7, #0]
    4286:	4b28      	ldr	r3, [pc, #160]	; (4328 <Reset_Handler+0xcc>)
    4288:	429a      	cmp	r2, r3
    428a:	d3f3      	bcc.n	4274 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    428c:	4b27      	ldr	r3, [pc, #156]	; (432c <Reset_Handler+0xd0>)
    428e:	603b      	str	r3, [r7, #0]
    4290:	e004      	b.n	429c <Reset_Handler+0x40>
                *pDest++ = 0;
    4292:	683b      	ldr	r3, [r7, #0]
    4294:	1d1a      	adds	r2, r3, #4
    4296:	603a      	str	r2, [r7, #0]
    4298:	2200      	movs	r2, #0
    429a:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    429c:	683a      	ldr	r2, [r7, #0]
    429e:	4b24      	ldr	r3, [pc, #144]	; (4330 <Reset_Handler+0xd4>)
    42a0:	429a      	cmp	r2, r3
    42a2:	d3f6      	bcc.n	4292 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    42a4:	4b23      	ldr	r3, [pc, #140]	; (4334 <Reset_Handler+0xd8>)
    42a6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    42a8:	4b23      	ldr	r3, [pc, #140]	; (4338 <Reset_Handler+0xdc>)
    42aa:	687a      	ldr	r2, [r7, #4]
    42ac:	21ff      	movs	r1, #255	; 0xff
    42ae:	438a      	bics	r2, r1
    42b0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    42b2:	4a22      	ldr	r2, [pc, #136]	; (433c <Reset_Handler+0xe0>)
    42b4:	2390      	movs	r3, #144	; 0x90
    42b6:	005b      	lsls	r3, r3, #1
    42b8:	2102      	movs	r1, #2
    42ba:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    42bc:	4a20      	ldr	r2, [pc, #128]	; (4340 <Reset_Handler+0xe4>)
    42be:	78d3      	ldrb	r3, [r2, #3]
    42c0:	2103      	movs	r1, #3
    42c2:	438b      	bics	r3, r1
    42c4:	1c19      	adds	r1, r3, #0
    42c6:	2302      	movs	r3, #2
    42c8:	430b      	orrs	r3, r1
    42ca:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    42cc:	4a1c      	ldr	r2, [pc, #112]	; (4340 <Reset_Handler+0xe4>)
    42ce:	78d3      	ldrb	r3, [r2, #3]
    42d0:	210c      	movs	r1, #12
    42d2:	438b      	bics	r3, r1
    42d4:	1c19      	adds	r1, r3, #0
    42d6:	2308      	movs	r3, #8
    42d8:	430b      	orrs	r3, r1
    42da:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    42dc:	4a19      	ldr	r2, [pc, #100]	; (4344 <Reset_Handler+0xe8>)
    42de:	7b93      	ldrb	r3, [r2, #14]
    42e0:	2130      	movs	r1, #48	; 0x30
    42e2:	438b      	bics	r3, r1
    42e4:	1c19      	adds	r1, r3, #0
    42e6:	2320      	movs	r3, #32
    42e8:	430b      	orrs	r3, r1
    42ea:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    42ec:	4a15      	ldr	r2, [pc, #84]	; (4344 <Reset_Handler+0xe8>)
    42ee:	7b93      	ldrb	r3, [r2, #14]
    42f0:	210c      	movs	r1, #12
    42f2:	438b      	bics	r3, r1
    42f4:	1c19      	adds	r1, r3, #0
    42f6:	2308      	movs	r3, #8
    42f8:	430b      	orrs	r3, r1
    42fa:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    42fc:	4a11      	ldr	r2, [pc, #68]	; (4344 <Reset_Handler+0xe8>)
    42fe:	7b93      	ldrb	r3, [r2, #14]
    4300:	2103      	movs	r1, #3
    4302:	438b      	bics	r3, r1
    4304:	1c19      	adds	r1, r3, #0
    4306:	2302      	movs	r3, #2
    4308:	430b      	orrs	r3, r1
    430a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    430c:	4a0e      	ldr	r2, [pc, #56]	; (4348 <Reset_Handler+0xec>)
    430e:	6853      	ldr	r3, [r2, #4]
    4310:	2180      	movs	r1, #128	; 0x80
    4312:	430b      	orrs	r3, r1
    4314:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    4316:	4b0d      	ldr	r3, [pc, #52]	; (434c <Reset_Handler+0xf0>)
    4318:	4798      	blx	r3

        /* Branch to main function */
        main();
    431a:	4b0d      	ldr	r3, [pc, #52]	; (4350 <Reset_Handler+0xf4>)
    431c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    431e:	e7fe      	b.n	431e <Reset_Handler+0xc2>
    4320:	000063a0 	.word	0x000063a0
    4324:	20000000 	.word	0x20000000
    4328:	2000007c 	.word	0x2000007c
    432c:	2000007c 	.word	0x2000007c
    4330:	20000198 	.word	0x20000198
    4334:	00000000 	.word	0x00000000
    4338:	e000ed00 	.word	0xe000ed00
    433c:	41007000 	.word	0x41007000
    4340:	41005000 	.word	0x41005000
    4344:	41004800 	.word	0x41004800
    4348:	41004000 	.word	0x41004000
    434c:	00004f81 	.word	0x00004f81
    4350:	00004c09 	.word	0x00004c09

00004354 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    4354:	b580      	push	{r7, lr}
    4356:	af00      	add	r7, sp, #0
        while (1) {
        }
    4358:	e7fe      	b.n	4358 <Dummy_Handler+0x4>
    435a:	46c0      	nop			; (mov r8, r8)

0000435c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    435c:	b580      	push	{r7, lr}
    435e:	b084      	sub	sp, #16
    4360:	af00      	add	r7, sp, #0
    4362:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    4364:	4b0a      	ldr	r3, [pc, #40]	; (4390 <_sbrk+0x34>)
    4366:	681b      	ldr	r3, [r3, #0]
    4368:	2b00      	cmp	r3, #0
    436a:	d102      	bne.n	4372 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    436c:	4b08      	ldr	r3, [pc, #32]	; (4390 <_sbrk+0x34>)
    436e:	4a09      	ldr	r2, [pc, #36]	; (4394 <_sbrk+0x38>)
    4370:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    4372:	4b07      	ldr	r3, [pc, #28]	; (4390 <_sbrk+0x34>)
    4374:	681b      	ldr	r3, [r3, #0]
    4376:	60fb      	str	r3, [r7, #12]

	heap += incr;
    4378:	4b05      	ldr	r3, [pc, #20]	; (4390 <_sbrk+0x34>)
    437a:	681a      	ldr	r2, [r3, #0]
    437c:	687b      	ldr	r3, [r7, #4]
    437e:	18d2      	adds	r2, r2, r3
    4380:	4b03      	ldr	r3, [pc, #12]	; (4390 <_sbrk+0x34>)
    4382:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    4384:	68fb      	ldr	r3, [r7, #12]
}
    4386:	0018      	movs	r0, r3
    4388:	46bd      	mov	sp, r7
    438a:	b004      	add	sp, #16
    438c:	bd80      	pop	{r7, pc}
    438e:	46c0      	nop			; (mov r8, r8)
    4390:	200000dc 	.word	0x200000dc
    4394:	20002198 	.word	0x20002198

00004398 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    4398:	b580      	push	{r7, lr}
    439a:	b082      	sub	sp, #8
    439c:	af00      	add	r7, sp, #0
    439e:	6078      	str	r0, [r7, #4]
	return -1;
    43a0:	2301      	movs	r3, #1
    43a2:	425b      	negs	r3, r3
}
    43a4:	0018      	movs	r0, r3
    43a6:	46bd      	mov	sp, r7
    43a8:	b002      	add	sp, #8
    43aa:	bd80      	pop	{r7, pc}

000043ac <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    43ac:	b580      	push	{r7, lr}
    43ae:	b082      	sub	sp, #8
    43b0:	af00      	add	r7, sp, #0
    43b2:	6078      	str	r0, [r7, #4]
    43b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    43b6:	683b      	ldr	r3, [r7, #0]
    43b8:	2280      	movs	r2, #128	; 0x80
    43ba:	0192      	lsls	r2, r2, #6
    43bc:	605a      	str	r2, [r3, #4]

	return 0;
    43be:	2300      	movs	r3, #0
}
    43c0:	0018      	movs	r0, r3
    43c2:	46bd      	mov	sp, r7
    43c4:	b002      	add	sp, #8
    43c6:	bd80      	pop	{r7, pc}

000043c8 <_isatty>:

extern int _isatty(int file)
{
    43c8:	b580      	push	{r7, lr}
    43ca:	b082      	sub	sp, #8
    43cc:	af00      	add	r7, sp, #0
    43ce:	6078      	str	r0, [r7, #4]
	return 1;
    43d0:	2301      	movs	r3, #1
}
    43d2:	0018      	movs	r0, r3
    43d4:	46bd      	mov	sp, r7
    43d6:	b002      	add	sp, #8
    43d8:	bd80      	pop	{r7, pc}
    43da:	46c0      	nop			; (mov r8, r8)

000043dc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    43dc:	b580      	push	{r7, lr}
    43de:	b084      	sub	sp, #16
    43e0:	af00      	add	r7, sp, #0
    43e2:	60f8      	str	r0, [r7, #12]
    43e4:	60b9      	str	r1, [r7, #8]
    43e6:	607a      	str	r2, [r7, #4]
	return 0;
    43e8:	2300      	movs	r3, #0
}
    43ea:	0018      	movs	r0, r3
    43ec:	46bd      	mov	sp, r7
    43ee:	b004      	add	sp, #16
    43f0:	bd80      	pop	{r7, pc}
    43f2:	46c0      	nop			; (mov r8, r8)

000043f4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    43f4:	b580      	push	{r7, lr}
    43f6:	b084      	sub	sp, #16
    43f8:	af00      	add	r7, sp, #0
    43fa:	0002      	movs	r2, r0
    43fc:	1dfb      	adds	r3, r7, #7
    43fe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4400:	230f      	movs	r3, #15
    4402:	18fb      	adds	r3, r7, r3
    4404:	1dfa      	adds	r2, r7, #7
    4406:	7812      	ldrb	r2, [r2, #0]
    4408:	09d2      	lsrs	r2, r2, #7
    440a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    440c:	230e      	movs	r3, #14
    440e:	18fb      	adds	r3, r7, r3
    4410:	1dfa      	adds	r2, r7, #7
    4412:	7812      	ldrb	r2, [r2, #0]
    4414:	0952      	lsrs	r2, r2, #5
    4416:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4418:	4b0d      	ldr	r3, [pc, #52]	; (4450 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    441a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    441c:	230f      	movs	r3, #15
    441e:	18fb      	adds	r3, r7, r3
    4420:	781b      	ldrb	r3, [r3, #0]
    4422:	2b00      	cmp	r3, #0
    4424:	d10f      	bne.n	4446 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4426:	230f      	movs	r3, #15
    4428:	18fb      	adds	r3, r7, r3
    442a:	781b      	ldrb	r3, [r3, #0]
    442c:	009b      	lsls	r3, r3, #2
    442e:	2210      	movs	r2, #16
    4430:	4694      	mov	ip, r2
    4432:	44bc      	add	ip, r7
    4434:	4463      	add	r3, ip
    4436:	3b08      	subs	r3, #8
    4438:	681a      	ldr	r2, [r3, #0]
    443a:	230e      	movs	r3, #14
    443c:	18fb      	adds	r3, r7, r3
    443e:	781b      	ldrb	r3, [r3, #0]
    4440:	01db      	lsls	r3, r3, #7
    4442:	18d3      	adds	r3, r2, r3
    4444:	e000      	b.n	4448 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4446:	2300      	movs	r3, #0
	}
}
    4448:	0018      	movs	r0, r3
    444a:	46bd      	mov	sp, r7
    444c:	b004      	add	sp, #16
    444e:	bd80      	pop	{r7, pc}
    4450:	41004400 	.word	0x41004400

00004454 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4454:	b580      	push	{r7, lr}
    4456:	b082      	sub	sp, #8
    4458:	af00      	add	r7, sp, #0
    445a:	0002      	movs	r2, r0
    445c:	1dfb      	adds	r3, r7, #7
    445e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4460:	1dfb      	adds	r3, r7, #7
    4462:	781b      	ldrb	r3, [r3, #0]
    4464:	0018      	movs	r0, r3
    4466:	4b03      	ldr	r3, [pc, #12]	; (4474 <port_get_group_from_gpio_pin+0x20>)
    4468:	4798      	blx	r3
    446a:	0003      	movs	r3, r0
}
    446c:	0018      	movs	r0, r3
    446e:	46bd      	mov	sp, r7
    4470:	b002      	add	sp, #8
    4472:	bd80      	pop	{r7, pc}
    4474:	000043f5 	.word	0x000043f5

00004478 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4478:	b580      	push	{r7, lr}
    447a:	b082      	sub	sp, #8
    447c:	af00      	add	r7, sp, #0
    447e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4480:	687b      	ldr	r3, [r7, #4]
    4482:	2200      	movs	r2, #0
    4484:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4486:	687b      	ldr	r3, [r7, #4]
    4488:	2201      	movs	r2, #1
    448a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    448c:	687b      	ldr	r3, [r7, #4]
    448e:	2200      	movs	r2, #0
    4490:	709a      	strb	r2, [r3, #2]
}
    4492:	46c0      	nop			; (mov r8, r8)
    4494:	46bd      	mov	sp, r7
    4496:	b002      	add	sp, #8
    4498:	bd80      	pop	{r7, pc}
    449a:	46c0      	nop			; (mov r8, r8)

0000449c <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    449c:	b580      	push	{r7, lr}
    449e:	b084      	sub	sp, #16
    44a0:	af00      	add	r7, sp, #0
    44a2:	0002      	movs	r2, r0
    44a4:	1dfb      	adds	r3, r7, #7
    44a6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    44a8:	1dfb      	adds	r3, r7, #7
    44aa:	781b      	ldrb	r3, [r3, #0]
    44ac:	0018      	movs	r0, r3
    44ae:	4b0b      	ldr	r3, [pc, #44]	; (44dc <port_pin_get_input_level+0x40>)
    44b0:	4798      	blx	r3
    44b2:	0003      	movs	r3, r0
    44b4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    44b6:	1dfb      	adds	r3, r7, #7
    44b8:	781b      	ldrb	r3, [r3, #0]
    44ba:	221f      	movs	r2, #31
    44bc:	4013      	ands	r3, r2
    44be:	2201      	movs	r2, #1
    44c0:	409a      	lsls	r2, r3
    44c2:	0013      	movs	r3, r2
    44c4:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    44c6:	68fb      	ldr	r3, [r7, #12]
    44c8:	6a1b      	ldr	r3, [r3, #32]
    44ca:	68ba      	ldr	r2, [r7, #8]
    44cc:	4013      	ands	r3, r2
    44ce:	1e5a      	subs	r2, r3, #1
    44d0:	4193      	sbcs	r3, r2
    44d2:	b2db      	uxtb	r3, r3
}
    44d4:	0018      	movs	r0, r3
    44d6:	46bd      	mov	sp, r7
    44d8:	b004      	add	sp, #16
    44da:	bd80      	pop	{r7, pc}
    44dc:	00004455 	.word	0x00004455

000044e0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    44e0:	b580      	push	{r7, lr}
    44e2:	b084      	sub	sp, #16
    44e4:	af00      	add	r7, sp, #0
    44e6:	0002      	movs	r2, r0
    44e8:	1dfb      	adds	r3, r7, #7
    44ea:	701a      	strb	r2, [r3, #0]
    44ec:	1dbb      	adds	r3, r7, #6
    44ee:	1c0a      	adds	r2, r1, #0
    44f0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    44f2:	1dfb      	adds	r3, r7, #7
    44f4:	781b      	ldrb	r3, [r3, #0]
    44f6:	0018      	movs	r0, r3
    44f8:	4b0d      	ldr	r3, [pc, #52]	; (4530 <port_pin_set_output_level+0x50>)
    44fa:	4798      	blx	r3
    44fc:	0003      	movs	r3, r0
    44fe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4500:	1dfb      	adds	r3, r7, #7
    4502:	781b      	ldrb	r3, [r3, #0]
    4504:	221f      	movs	r2, #31
    4506:	4013      	ands	r3, r2
    4508:	2201      	movs	r2, #1
    450a:	409a      	lsls	r2, r3
    450c:	0013      	movs	r3, r2
    450e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4510:	1dbb      	adds	r3, r7, #6
    4512:	781b      	ldrb	r3, [r3, #0]
    4514:	2b00      	cmp	r3, #0
    4516:	d003      	beq.n	4520 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4518:	68fb      	ldr	r3, [r7, #12]
    451a:	68ba      	ldr	r2, [r7, #8]
    451c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    451e:	e002      	b.n	4526 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4520:	68fb      	ldr	r3, [r7, #12]
    4522:	68ba      	ldr	r2, [r7, #8]
    4524:	615a      	str	r2, [r3, #20]
	}
}
    4526:	46c0      	nop			; (mov r8, r8)
    4528:	46bd      	mov	sp, r7
    452a:	b004      	add	sp, #16
    452c:	bd80      	pop	{r7, pc}
    452e:	46c0      	nop			; (mov r8, r8)
    4530:	00004455 	.word	0x00004455

00004534 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    4534:	b580      	push	{r7, lr}
    4536:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    4538:	4b04      	ldr	r3, [pc, #16]	; (454c <system_interrupt_enable_global+0x18>)
    453a:	2201      	movs	r2, #1
    453c:	701a      	strb	r2, [r3, #0]
    453e:	f3bf 8f5f 	dmb	sy
    4542:	b662      	cpsie	i
}
    4544:	46c0      	nop			; (mov r8, r8)
    4546:	46bd      	mov	sp, r7
    4548:	bd80      	pop	{r7, pc}
    454a:	46c0      	nop			; (mov r8, r8)
    454c:	20000008 	.word	0x20000008

00004550 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    4550:	b580      	push	{r7, lr}
    4552:	b082      	sub	sp, #8
    4554:	af00      	add	r7, sp, #0
    4556:	0002      	movs	r2, r0
    4558:	1dfb      	adds	r3, r7, #7
    455a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    455c:	4b06      	ldr	r3, [pc, #24]	; (4578 <system_interrupt_enable+0x28>)
    455e:	1dfa      	adds	r2, r7, #7
    4560:	7812      	ldrb	r2, [r2, #0]
    4562:	0011      	movs	r1, r2
    4564:	221f      	movs	r2, #31
    4566:	400a      	ands	r2, r1
    4568:	2101      	movs	r1, #1
    456a:	4091      	lsls	r1, r2
    456c:	000a      	movs	r2, r1
    456e:	601a      	str	r2, [r3, #0]
}
    4570:	46c0      	nop			; (mov r8, r8)
    4572:	46bd      	mov	sp, r7
    4574:	b002      	add	sp, #8
    4576:	bd80      	pop	{r7, pc}
    4578:	e000e100 	.word	0xe000e100

0000457c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    457c:	b580      	push	{r7, lr}
    457e:	b084      	sub	sp, #16
    4580:	af00      	add	r7, sp, #0
    4582:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4584:	687b      	ldr	r3, [r7, #4]
    4586:	681b      	ldr	r3, [r3, #0]
    4588:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    458a:	68fb      	ldr	r3, [r7, #12]
    458c:	69db      	ldr	r3, [r3, #28]
    458e:	1e5a      	subs	r2, r3, #1
    4590:	4193      	sbcs	r3, r2
    4592:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    4594:	0018      	movs	r0, r3
    4596:	46bd      	mov	sp, r7
    4598:	b004      	add	sp, #16
    459a:	bd80      	pop	{r7, pc}

0000459c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    459c:	b580      	push	{r7, lr}
    459e:	b082      	sub	sp, #8
    45a0:	af00      	add	r7, sp, #0
    45a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    45a4:	687b      	ldr	r3, [r7, #4]
    45a6:	2201      	movs	r2, #1
    45a8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    45aa:	687b      	ldr	r3, [r7, #4]
    45ac:	2200      	movs	r2, #0
    45ae:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    45b0:	687b      	ldr	r3, [r7, #4]
    45b2:	2200      	movs	r2, #0
    45b4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    45b6:	687b      	ldr	r3, [r7, #4]
    45b8:	22c0      	movs	r2, #192	; 0xc0
    45ba:	0392      	lsls	r2, r2, #14
    45bc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	2200      	movs	r2, #0
    45c2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    45c4:	687b      	ldr	r3, [r7, #4]
    45c6:	2200      	movs	r2, #0
    45c8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    45ca:	687b      	ldr	r3, [r7, #4]
    45cc:	2201      	movs	r2, #1
    45ce:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    45d0:	687b      	ldr	r3, [r7, #4]
    45d2:	2201      	movs	r2, #1
    45d4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    45d6:	687b      	ldr	r3, [r7, #4]
    45d8:	2200      	movs	r2, #0
    45da:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    45dc:	687b      	ldr	r3, [r7, #4]
    45de:	2224      	movs	r2, #36	; 0x24
    45e0:	2100      	movs	r1, #0
    45e2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    45e4:	687b      	ldr	r3, [r7, #4]
    45e6:	3318      	adds	r3, #24
    45e8:	220c      	movs	r2, #12
    45ea:	2100      	movs	r1, #0
    45ec:	0018      	movs	r0, r3
    45ee:	4b0a      	ldr	r3, [pc, #40]	; (4618 <spi_get_config_defaults+0x7c>)
    45f0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    45f2:	687b      	ldr	r3, [r7, #4]
    45f4:	4a09      	ldr	r2, [pc, #36]	; (461c <spi_get_config_defaults+0x80>)
    45f6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    45f8:	687b      	ldr	r3, [r7, #4]
    45fa:	2200      	movs	r2, #0
    45fc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    45fe:	687b      	ldr	r3, [r7, #4]
    4600:	2200      	movs	r2, #0
    4602:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    4604:	687b      	ldr	r3, [r7, #4]
    4606:	2200      	movs	r2, #0
    4608:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	2200      	movs	r2, #0
    460e:	635a      	str	r2, [r3, #52]	; 0x34

};
    4610:	46c0      	nop			; (mov r8, r8)
    4612:	46bd      	mov	sp, r7
    4614:	b002      	add	sp, #8
    4616:	bd80      	pop	{r7, pc}
    4618:	00004fdf 	.word	0x00004fdf
    461c:	000186a0 	.word	0x000186a0

00004620 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    4620:	b580      	push	{r7, lr}
    4622:	b084      	sub	sp, #16
    4624:	af00      	add	r7, sp, #0
    4626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4628:	687b      	ldr	r3, [r7, #4]
    462a:	681b      	ldr	r3, [r3, #0]
    462c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    462e:	687b      	ldr	r3, [r7, #4]
    4630:	681b      	ldr	r3, [r3, #0]
    4632:	0018      	movs	r0, r3
    4634:	4b0b      	ldr	r3, [pc, #44]	; (4664 <spi_enable+0x44>)
    4636:	4798      	blx	r3
    4638:	0003      	movs	r3, r0
    463a:	0018      	movs	r0, r3
    463c:	4b0a      	ldr	r3, [pc, #40]	; (4668 <spi_enable+0x48>)
    463e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    4640:	46c0      	nop			; (mov r8, r8)
    4642:	687b      	ldr	r3, [r7, #4]
    4644:	0018      	movs	r0, r3
    4646:	4b09      	ldr	r3, [pc, #36]	; (466c <spi_enable+0x4c>)
    4648:	4798      	blx	r3
    464a:	1e03      	subs	r3, r0, #0
    464c:	d1f9      	bne.n	4642 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    464e:	68fb      	ldr	r3, [r7, #12]
    4650:	681b      	ldr	r3, [r3, #0]
    4652:	2202      	movs	r2, #2
    4654:	431a      	orrs	r2, r3
    4656:	68fb      	ldr	r3, [r7, #12]
    4658:	601a      	str	r2, [r3, #0]
}
    465a:	46c0      	nop			; (mov r8, r8)
    465c:	46bd      	mov	sp, r7
    465e:	b004      	add	sp, #16
    4660:	bd80      	pop	{r7, pc}
    4662:	46c0      	nop			; (mov r8, r8)
    4664:	00003109 	.word	0x00003109
    4668:	00004551 	.word	0x00004551
    466c:	0000457d 	.word	0x0000457d

00004670 <at25dfx_spi_get_config_defaults>:
 *
 * \param[out] config Address of config struct to initialize.
 */
static inline void at25dfx_spi_get_config_defaults(
		struct spi_config *const config)
{
    4670:	b580      	push	{r7, lr}
    4672:	b082      	sub	sp, #8
    4674:	af00      	add	r7, sp, #0
    4676:	6078      	str	r0, [r7, #4]
	spi_get_config_defaults(config);
    4678:	687b      	ldr	r3, [r7, #4]
    467a:	0018      	movs	r0, r3
    467c:	4b02      	ldr	r3, [pc, #8]	; (4688 <at25dfx_spi_get_config_defaults+0x18>)
    467e:	4798      	blx	r3
}
    4680:	46c0      	nop			; (mov r8, r8)
    4682:	46bd      	mov	sp, r7
    4684:	b002      	add	sp, #8
    4686:	bd80      	pop	{r7, pc}
    4688:	0000459d 	.word	0x0000459d

0000468c <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
    468c:	b580      	push	{r7, lr}
    468e:	b086      	sub	sp, #24
    4690:	af00      	add	r7, sp, #0
    4692:	60f8      	str	r0, [r7, #12]
    4694:	60b9      	str	r1, [r7, #8]
    4696:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
    4698:	687b      	ldr	r3, [r7, #4]
    469a:	781a      	ldrb	r2, [r3, #0]
    469c:	68fb      	ldr	r3, [r7, #12]
    469e:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
    46a0:	687b      	ldr	r3, [r7, #4]
    46a2:	785a      	ldrb	r2, [r3, #1]
    46a4:	68fb      	ldr	r3, [r7, #12]
    46a6:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
    46a8:	68fb      	ldr	r3, [r7, #12]
    46aa:	68ba      	ldr	r2, [r7, #8]
    46ac:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
    46ae:	2314      	movs	r3, #20
    46b0:	18fb      	adds	r3, r7, r3
    46b2:	0018      	movs	r0, r3
    46b4:	4b0c      	ldr	r3, [pc, #48]	; (46e8 <at25dfx_chip_init+0x5c>)
    46b6:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    46b8:	2314      	movs	r3, #20
    46ba:	18fb      	adds	r3, r7, r3
    46bc:	2201      	movs	r2, #1
    46be:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    46c0:	68fb      	ldr	r3, [r7, #12]
    46c2:	795b      	ldrb	r3, [r3, #5]
    46c4:	2214      	movs	r2, #20
    46c6:	18ba      	adds	r2, r7, r2
    46c8:	0011      	movs	r1, r2
    46ca:	0018      	movs	r0, r3
    46cc:	4b07      	ldr	r3, [pc, #28]	; (46ec <at25dfx_chip_init+0x60>)
    46ce:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    46d0:	68fb      	ldr	r3, [r7, #12]
    46d2:	795b      	ldrb	r3, [r3, #5]
    46d4:	2101      	movs	r1, #1
    46d6:	0018      	movs	r0, r3
    46d8:	4b05      	ldr	r3, [pc, #20]	; (46f0 <at25dfx_chip_init+0x64>)
    46da:	4798      	blx	r3

	return STATUS_OK;
    46dc:	2300      	movs	r3, #0
}
    46de:	0018      	movs	r0, r3
    46e0:	46bd      	mov	sp, r7
    46e2:	b006      	add	sp, #24
    46e4:	bd80      	pop	{r7, pc}
    46e6:	46c0      	nop			; (mov r8, r8)
    46e8:	00004479 	.word	0x00004479
    46ec:	00003675 	.word	0x00003675
    46f0:	000044e1 	.word	0x000044e1

000046f4 <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
    46f4:	b580      	push	{r7, lr}
    46f6:	b082      	sub	sp, #8
    46f8:	af00      	add	r7, sp, #0
    46fa:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    46fc:	687b      	ldr	r3, [r7, #4]
    46fe:	2200      	movs	r2, #0
    4700:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    4702:	687b      	ldr	r3, [r7, #4]
    4704:	2201      	movs	r2, #1
    4706:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    4708:	4b08      	ldr	r3, [pc, #32]	; (472c <nvm_get_config_defaults+0x38>)
    470a:	685b      	ldr	r3, [r3, #4]
    470c:	06db      	lsls	r3, r3, #27
    470e:	0f1b      	lsrs	r3, r3, #28
    4710:	b2db      	uxtb	r3, r3
    4712:	001a      	movs	r2, r3
    4714:	687b      	ldr	r3, [r7, #4]
    4716:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    4718:	687b      	ldr	r3, [r7, #4]
    471a:	2200      	movs	r2, #0
    471c:	70da      	strb	r2, [r3, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    471e:	687b      	ldr	r3, [r7, #4]
    4720:	2200      	movs	r2, #0
    4722:	711a      	strb	r2, [r3, #4]
}
    4724:	46c0      	nop			; (mov r8, r8)
    4726:	46bd      	mov	sp, r7
    4728:	b002      	add	sp, #8
    472a:	bd80      	pop	{r7, pc}
    472c:	41004000 	.word	0x41004000

00004730 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4730:	b580      	push	{r7, lr}
    4732:	b084      	sub	sp, #16
    4734:	af00      	add	r7, sp, #0
    4736:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	681b      	ldr	r3, [r3, #0]
    473c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    473e:	68fb      	ldr	r3, [r7, #12]
    4740:	69db      	ldr	r3, [r3, #28]
    4742:	1e5a      	subs	r2, r3, #1
    4744:	4193      	sbcs	r3, r2
    4746:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    4748:	0018      	movs	r0, r3
    474a:	46bd      	mov	sp, r7
    474c:	b004      	add	sp, #16
    474e:	bd80      	pop	{r7, pc}

00004750 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4750:	b580      	push	{r7, lr}
    4752:	b082      	sub	sp, #8
    4754:	af00      	add	r7, sp, #0
    4756:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4758:	46c0      	nop			; (mov r8, r8)
    475a:	687b      	ldr	r3, [r7, #4]
    475c:	0018      	movs	r0, r3
    475e:	4b04      	ldr	r3, [pc, #16]	; (4770 <_usart_wait_for_sync+0x20>)
    4760:	4798      	blx	r3
    4762:	1e03      	subs	r3, r0, #0
    4764:	d1f9      	bne.n	475a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4766:	46c0      	nop			; (mov r8, r8)
    4768:	46bd      	mov	sp, r7
    476a:	b002      	add	sp, #8
    476c:	bd80      	pop	{r7, pc}
    476e:	46c0      	nop			; (mov r8, r8)
    4770:	00004731 	.word	0x00004731

00004774 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    4774:	b580      	push	{r7, lr}
    4776:	b082      	sub	sp, #8
    4778:	af00      	add	r7, sp, #0
    477a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    477c:	687b      	ldr	r3, [r7, #4]
    477e:	2280      	movs	r2, #128	; 0x80
    4780:	05d2      	lsls	r2, r2, #23
    4782:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4784:	687b      	ldr	r3, [r7, #4]
    4786:	2200      	movs	r2, #0
    4788:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    478a:	687b      	ldr	r3, [r7, #4]
    478c:	22ff      	movs	r2, #255	; 0xff
    478e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    4790:	687b      	ldr	r3, [r7, #4]
    4792:	2200      	movs	r2, #0
    4794:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4796:	687b      	ldr	r3, [r7, #4]
    4798:	2200      	movs	r2, #0
    479a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    479c:	687b      	ldr	r3, [r7, #4]
    479e:	2296      	movs	r2, #150	; 0x96
    47a0:	0192      	lsls	r2, r2, #6
    47a2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    47a4:	687b      	ldr	r3, [r7, #4]
    47a6:	2224      	movs	r2, #36	; 0x24
    47a8:	2101      	movs	r1, #1
    47aa:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    47ac:	687b      	ldr	r3, [r7, #4]
    47ae:	2225      	movs	r2, #37	; 0x25
    47b0:	2101      	movs	r1, #1
    47b2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    47b4:	687b      	ldr	r3, [r7, #4]
    47b6:	2226      	movs	r2, #38	; 0x26
    47b8:	2100      	movs	r1, #0
    47ba:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    47bc:	687b      	ldr	r3, [r7, #4]
    47be:	2227      	movs	r2, #39	; 0x27
    47c0:	2100      	movs	r1, #0
    47c2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    47c4:	687b      	ldr	r3, [r7, #4]
    47c6:	2200      	movs	r2, #0
    47c8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	2288      	movs	r2, #136	; 0x88
    47ce:	0352      	lsls	r2, r2, #13
    47d0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    47d2:	687b      	ldr	r3, [r7, #4]
    47d4:	222c      	movs	r2, #44	; 0x2c
    47d6:	2100      	movs	r1, #0
    47d8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    47da:	687b      	ldr	r3, [r7, #4]
    47dc:	222d      	movs	r2, #45	; 0x2d
    47de:	2100      	movs	r1, #0
    47e0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    47e2:	687b      	ldr	r3, [r7, #4]
    47e4:	2200      	movs	r2, #0
    47e6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    47e8:	687b      	ldr	r3, [r7, #4]
    47ea:	2200      	movs	r2, #0
    47ec:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    47ee:	687b      	ldr	r3, [r7, #4]
    47f0:	2200      	movs	r2, #0
    47f2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    47f4:	687b      	ldr	r3, [r7, #4]
    47f6:	2200      	movs	r2, #0
    47f8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    47fa:	687b      	ldr	r3, [r7, #4]
    47fc:	2200      	movs	r2, #0
    47fe:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4800:	687b      	ldr	r3, [r7, #4]
    4802:	2200      	movs	r2, #0
    4804:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4806:	687b      	ldr	r3, [r7, #4]
    4808:	2200      	movs	r2, #0
    480a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    480c:	687b      	ldr	r3, [r7, #4]
    480e:	2200      	movs	r2, #0
    4810:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    4812:	687b      	ldr	r3, [r7, #4]
    4814:	2200      	movs	r2, #0
    4816:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    4818:	687b      	ldr	r3, [r7, #4]
    481a:	2200      	movs	r2, #0
    481c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    481e:	687b      	ldr	r3, [r7, #4]
    4820:	2213      	movs	r2, #19
    4822:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    4824:	687b      	ldr	r3, [r7, #4]
    4826:	2200      	movs	r2, #0
    4828:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    482a:	46c0      	nop			; (mov r8, r8)
    482c:	46bd      	mov	sp, r7
    482e:	b002      	add	sp, #8
    4830:	bd80      	pop	{r7, pc}
    4832:	46c0      	nop			; (mov r8, r8)

00004834 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    4834:	b580      	push	{r7, lr}
    4836:	b084      	sub	sp, #16
    4838:	af00      	add	r7, sp, #0
    483a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    483c:	687b      	ldr	r3, [r7, #4]
    483e:	681b      	ldr	r3, [r3, #0]
    4840:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4842:	687b      	ldr	r3, [r7, #4]
    4844:	681b      	ldr	r3, [r3, #0]
    4846:	0018      	movs	r0, r3
    4848:	4b09      	ldr	r3, [pc, #36]	; (4870 <usart_enable+0x3c>)
    484a:	4798      	blx	r3
    484c:	0003      	movs	r3, r0
    484e:	0018      	movs	r0, r3
    4850:	4b08      	ldr	r3, [pc, #32]	; (4874 <usart_enable+0x40>)
    4852:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4854:	687b      	ldr	r3, [r7, #4]
    4856:	0018      	movs	r0, r3
    4858:	4b07      	ldr	r3, [pc, #28]	; (4878 <usart_enable+0x44>)
    485a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    485c:	68fb      	ldr	r3, [r7, #12]
    485e:	681b      	ldr	r3, [r3, #0]
    4860:	2202      	movs	r2, #2
    4862:	431a      	orrs	r2, r3
    4864:	68fb      	ldr	r3, [r7, #12]
    4866:	601a      	str	r2, [r3, #0]
}
    4868:	46c0      	nop			; (mov r8, r8)
    486a:	46bd      	mov	sp, r7
    486c:	b004      	add	sp, #16
    486e:	bd80      	pop	{r7, pc}
    4870:	00003109 	.word	0x00003109
    4874:	00004551 	.word	0x00004551
    4878:	00004751 	.word	0x00004751

0000487c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    487c:	b580      	push	{r7, lr}
    487e:	b084      	sub	sp, #16
    4880:	af00      	add	r7, sp, #0
    4882:	60f8      	str	r0, [r7, #12]
    4884:	60b9      	str	r1, [r7, #8]
    4886:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    4888:	687a      	ldr	r2, [r7, #4]
    488a:	68b9      	ldr	r1, [r7, #8]
    488c:	68fb      	ldr	r3, [r7, #12]
    488e:	0018      	movs	r0, r3
    4890:	4b05      	ldr	r3, [pc, #20]	; (48a8 <usart_serial_init+0x2c>)
    4892:	4798      	blx	r3
    4894:	1e03      	subs	r3, r0, #0
    4896:	d101      	bne.n	489c <usart_serial_init+0x20>
		return true;
    4898:	2301      	movs	r3, #1
    489a:	e000      	b.n	489e <usart_serial_init+0x22>
	}
	else {
		return false;
    489c:	2300      	movs	r3, #0
	}
}
    489e:	0018      	movs	r0, r3
    48a0:	46bd      	mov	sp, r7
    48a2:	b004      	add	sp, #16
    48a4:	bd80      	pop	{r7, pc}
    48a6:	46c0      	nop			; (mov r8, r8)
    48a8:	00002941 	.word	0x00002941

000048ac <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    48ac:	b580      	push	{r7, lr}
    48ae:	b082      	sub	sp, #8
    48b0:	af00      	add	r7, sp, #0
    48b2:	6078      	str	r0, [r7, #4]
    48b4:	000a      	movs	r2, r1
    48b6:	1cfb      	adds	r3, r7, #3
    48b8:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    48ba:	46c0      	nop			; (mov r8, r8)
    48bc:	1cfb      	adds	r3, r7, #3
    48be:	781b      	ldrb	r3, [r3, #0]
    48c0:	b29a      	uxth	r2, r3
    48c2:	687b      	ldr	r3, [r7, #4]
    48c4:	0011      	movs	r1, r2
    48c6:	0018      	movs	r0, r3
    48c8:	4b04      	ldr	r3, [pc, #16]	; (48dc <usart_serial_putchar+0x30>)
    48ca:	4798      	blx	r3
    48cc:	1e03      	subs	r3, r0, #0
    48ce:	d1f5      	bne.n	48bc <usart_serial_putchar+0x10>

	return STATUS_OK;
    48d0:	2300      	movs	r3, #0
}
    48d2:	0018      	movs	r0, r3
    48d4:	46bd      	mov	sp, r7
    48d6:	b002      	add	sp, #8
    48d8:	bd80      	pop	{r7, pc}
    48da:	46c0      	nop			; (mov r8, r8)
    48dc:	00002bb5 	.word	0x00002bb5

000048e0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    48e0:	b580      	push	{r7, lr}
    48e2:	b084      	sub	sp, #16
    48e4:	af00      	add	r7, sp, #0
    48e6:	6078      	str	r0, [r7, #4]
    48e8:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    48ea:	230e      	movs	r3, #14
    48ec:	18fb      	adds	r3, r7, r3
    48ee:	2200      	movs	r2, #0
    48f0:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    48f2:	46c0      	nop			; (mov r8, r8)
    48f4:	230e      	movs	r3, #14
    48f6:	18fa      	adds	r2, r7, r3
    48f8:	687b      	ldr	r3, [r7, #4]
    48fa:	0011      	movs	r1, r2
    48fc:	0018      	movs	r0, r3
    48fe:	4b07      	ldr	r3, [pc, #28]	; (491c <usart_serial_getchar+0x3c>)
    4900:	4798      	blx	r3
    4902:	1e03      	subs	r3, r0, #0
    4904:	d1f6      	bne.n	48f4 <usart_serial_getchar+0x14>

	*c = temp;
    4906:	230e      	movs	r3, #14
    4908:	18fb      	adds	r3, r7, r3
    490a:	881b      	ldrh	r3, [r3, #0]
    490c:	b2da      	uxtb	r2, r3
    490e:	683b      	ldr	r3, [r7, #0]
    4910:	701a      	strb	r2, [r3, #0]
}
    4912:	46c0      	nop			; (mov r8, r8)
    4914:	46bd      	mov	sp, r7
    4916:	b004      	add	sp, #16
    4918:	bd80      	pop	{r7, pc}
    491a:	46c0      	nop			; (mov r8, r8)
    491c:	00002c19 	.word	0x00002c19

00004920 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    4920:	b580      	push	{r7, lr}
    4922:	b084      	sub	sp, #16
    4924:	af00      	add	r7, sp, #0
    4926:	60f8      	str	r0, [r7, #12]
    4928:	60b9      	str	r1, [r7, #8]
    492a:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    492c:	4b10      	ldr	r3, [pc, #64]	; (4970 <stdio_serial_init+0x50>)
    492e:	68fa      	ldr	r2, [r7, #12]
    4930:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4932:	4b10      	ldr	r3, [pc, #64]	; (4974 <stdio_serial_init+0x54>)
    4934:	4a10      	ldr	r2, [pc, #64]	; (4978 <stdio_serial_init+0x58>)
    4936:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4938:	4b10      	ldr	r3, [pc, #64]	; (497c <stdio_serial_init+0x5c>)
    493a:	4a11      	ldr	r2, [pc, #68]	; (4980 <stdio_serial_init+0x60>)
    493c:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    493e:	687a      	ldr	r2, [r7, #4]
    4940:	68b9      	ldr	r1, [r7, #8]
    4942:	68fb      	ldr	r3, [r7, #12]
    4944:	0018      	movs	r0, r3
    4946:	4b0f      	ldr	r3, [pc, #60]	; (4984 <stdio_serial_init+0x64>)
    4948:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    494a:	4b0f      	ldr	r3, [pc, #60]	; (4988 <stdio_serial_init+0x68>)
    494c:	681b      	ldr	r3, [r3, #0]
    494e:	689b      	ldr	r3, [r3, #8]
    4950:	2100      	movs	r1, #0
    4952:	0018      	movs	r0, r3
    4954:	4b0d      	ldr	r3, [pc, #52]	; (498c <stdio_serial_init+0x6c>)
    4956:	4798      	blx	r3
	setbuf(stdin, NULL);
    4958:	4b0b      	ldr	r3, [pc, #44]	; (4988 <stdio_serial_init+0x68>)
    495a:	681b      	ldr	r3, [r3, #0]
    495c:	685b      	ldr	r3, [r3, #4]
    495e:	2100      	movs	r1, #0
    4960:	0018      	movs	r0, r3
    4962:	4b0a      	ldr	r3, [pc, #40]	; (498c <stdio_serial_init+0x6c>)
    4964:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    4966:	46c0      	nop			; (mov r8, r8)
    4968:	46bd      	mov	sp, r7
    496a:	b004      	add	sp, #16
    496c:	bd80      	pop	{r7, pc}
    496e:	46c0      	nop			; (mov r8, r8)
    4970:	200000fc 	.word	0x200000fc
    4974:	200000f8 	.word	0x200000f8
    4978:	000048ad 	.word	0x000048ad
    497c:	200000f4 	.word	0x200000f4
    4980:	000048e1 	.word	0x000048e1
    4984:	0000487d 	.word	0x0000487d
    4988:	20000078 	.word	0x20000078
    498c:	000050fd 	.word	0x000050fd

00004990 <configure_console>:
#define EDBG_CDC_SERCOM_PINMUX_PAD3  PINMUX_PA21D_SERCOM3_PAD3//PINMUX_PB11D_SERCOM4_PAD3	// RX
#define APP_START_ADDRESS			0x8000
#define FW_STAT						0x7F00
#define BOOT_PIN					PIN_PA06 //pin tied to button for stay in boot mode
static void configure_console(void)
{
    4990:	b580      	push	{r7, lr}
    4992:	b090      	sub	sp, #64	; 0x40
    4994:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    4996:	003b      	movs	r3, r7
    4998:	0018      	movs	r0, r3
    499a:	4b13      	ldr	r3, [pc, #76]	; (49e8 <configure_console+0x58>)
    499c:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    499e:	003b      	movs	r3, r7
    49a0:	22c0      	movs	r2, #192	; 0xc0
    49a2:	0392      	lsls	r2, r2, #14
    49a4:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    49a6:	003b      	movs	r3, r7
    49a8:	2201      	movs	r2, #1
    49aa:	4252      	negs	r2, r2
    49ac:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    49ae:	003b      	movs	r3, r7
    49b0:	2201      	movs	r2, #1
    49b2:	4252      	negs	r2, r2
    49b4:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    49b6:	003b      	movs	r3, r7
    49b8:	4a0c      	ldr	r2, [pc, #48]	; (49ec <configure_console+0x5c>)
    49ba:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    49bc:	003b      	movs	r3, r7
    49be:	4a0c      	ldr	r2, [pc, #48]	; (49f0 <configure_console+0x60>)
    49c0:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    49c2:	003b      	movs	r3, r7
    49c4:	22e1      	movs	r2, #225	; 0xe1
    49c6:	0252      	lsls	r2, r2, #9
    49c8:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
    49ca:	003a      	movs	r2, r7
    49cc:	4909      	ldr	r1, [pc, #36]	; (49f4 <configure_console+0x64>)
    49ce:	4b0a      	ldr	r3, [pc, #40]	; (49f8 <configure_console+0x68>)
    49d0:	0018      	movs	r0, r3
    49d2:	4b0a      	ldr	r3, [pc, #40]	; (49fc <configure_console+0x6c>)
    49d4:	4798      	blx	r3
	usart_enable(&usart_instance);
    49d6:	4b08      	ldr	r3, [pc, #32]	; (49f8 <configure_console+0x68>)
    49d8:	0018      	movs	r0, r3
    49da:	4b09      	ldr	r3, [pc, #36]	; (4a00 <configure_console+0x70>)
    49dc:	4798      	blx	r3
}
    49de:	46c0      	nop			; (mov r8, r8)
    49e0:	46bd      	mov	sp, r7
    49e2:	b010      	add	sp, #64	; 0x40
    49e4:	bd80      	pop	{r7, pc}
    49e6:	46c0      	nop			; (mov r8, r8)
    49e8:	00004775 	.word	0x00004775
    49ec:	00160002 	.word	0x00160002
    49f0:	00150003 	.word	0x00150003
    49f4:	42001400 	.word	0x42001400
    49f8:	2000011c 	.word	0x2000011c
    49fc:	00004921 	.word	0x00004921
    4a00:	00004835 	.word	0x00004835

00004a04 <getFWStat>:


static Firmware_Status_t getFWStat() {
    4a04:	b580      	push	{r7, lr}
    4a06:	b086      	sub	sp, #24
    4a08:	af00      	add	r7, sp, #0
    4a0a:	6078      	str	r0, [r7, #4]
	Firmware_Status_t *fm_nvm = (unsigned int*)FW_STAT;			// Pointer to FW_STAT
    4a0c:	23fe      	movs	r3, #254	; 0xfe
    4a0e:	01db      	lsls	r3, r3, #7
    4a10:	617b      	str	r3, [r7, #20]
	Firmware_Status_t thisFW = *fm_nvm;				// Read contents of FW_STAT
    4a12:	230c      	movs	r3, #12
    4a14:	18fa      	adds	r2, r7, r3
    4a16:	697b      	ldr	r3, [r7, #20]
    4a18:	0010      	movs	r0, r2
    4a1a:	0019      	movs	r1, r3
    4a1c:	2307      	movs	r3, #7
    4a1e:	001a      	movs	r2, r3
    4a20:	4b07      	ldr	r3, [pc, #28]	; (4a40 <getFWStat+0x3c>)
    4a22:	4798      	blx	r3
	return thisFW;
    4a24:	687a      	ldr	r2, [r7, #4]
    4a26:	230c      	movs	r3, #12
    4a28:	18fb      	adds	r3, r7, r3
    4a2a:	0010      	movs	r0, r2
    4a2c:	0019      	movs	r1, r3
    4a2e:	2307      	movs	r3, #7
    4a30:	001a      	movs	r2, r3
    4a32:	4b03      	ldr	r3, [pc, #12]	; (4a40 <getFWStat+0x3c>)
    4a34:	4798      	blx	r3
}
    4a36:	6878      	ldr	r0, [r7, #4]
    4a38:	46bd      	mov	sp, r7
    4a3a:	b006      	add	sp, #24
    4a3c:	bd80      	pop	{r7, pc}
    4a3e:	46c0      	nop			; (mov r8, r8)
    4a40:	00004fcd 	.word	0x00004fcd

00004a44 <writeFWStat>:

static void writeFWStat(Firmware_Status_t thisFW) {
    4a44:	b590      	push	{r4, r7, lr}
    4a46:	b095      	sub	sp, #84	; 0x54
    4a48:	af00      	add	r7, sp, #0
    4a4a:	003b      	movs	r3, r7
    4a4c:	6018      	str	r0, [r3, #0]
    4a4e:	6059      	str	r1, [r3, #4]
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE];
	page_buffer[0] = thisFW.signature[0];
    4a50:	003b      	movs	r3, r7
    4a52:	781a      	ldrb	r2, [r3, #0]
    4a54:	230c      	movs	r3, #12
    4a56:	18fb      	adds	r3, r7, r3
    4a58:	701a      	strb	r2, [r3, #0]
	page_buffer[1] = thisFW.signature[1];
    4a5a:	003b      	movs	r3, r7
    4a5c:	785a      	ldrb	r2, [r3, #1]
    4a5e:	230c      	movs	r3, #12
    4a60:	18fb      	adds	r3, r7, r3
    4a62:	705a      	strb	r2, [r3, #1]
	page_buffer[2] = thisFW.signature[2];
    4a64:	003b      	movs	r3, r7
    4a66:	789a      	ldrb	r2, [r3, #2]
    4a68:	230c      	movs	r3, #12
    4a6a:	18fb      	adds	r3, r7, r3
    4a6c:	709a      	strb	r2, [r3, #2]
	page_buffer[3] = thisFW.signature[3];
    4a6e:	003b      	movs	r3, r7
    4a70:	78da      	ldrb	r2, [r3, #3]
    4a72:	230c      	movs	r3, #12
    4a74:	18fb      	adds	r3, r7, r3
    4a76:	70da      	strb	r2, [r3, #3]
	page_buffer[4] = thisFW.executing_image;
    4a78:	003b      	movs	r3, r7
    4a7a:	791a      	ldrb	r2, [r3, #4]
    4a7c:	230c      	movs	r3, #12
    4a7e:	18fb      	adds	r3, r7, r3
    4a80:	711a      	strb	r2, [r3, #4]
	page_buffer[5] = thisFW.downloaded_image;
    4a82:	003b      	movs	r3, r7
    4a84:	795a      	ldrb	r2, [r3, #5]
    4a86:	230c      	movs	r3, #12
    4a88:	18fb      	adds	r3, r7, r3
    4a8a:	715a      	strb	r2, [r3, #5]
	page_buffer[6] = thisFW.writenew_image;
    4a8c:	003b      	movs	r3, r7
    4a8e:	799a      	ldrb	r2, [r3, #6]
    4a90:	230c      	movs	r3, #12
    4a92:	18fb      	adds	r3, r7, r3
    4a94:	719a      	strb	r2, [r3, #6]
	
	enum status_code error_code;
	do
	{
		error_code = nvm_erase_row(FW_STAT);			// Erase FW stat row
    4a96:	234f      	movs	r3, #79	; 0x4f
    4a98:	18fc      	adds	r4, r7, r3
    4a9a:	23fe      	movs	r3, #254	; 0xfe
    4a9c:	01db      	lsls	r3, r3, #7
    4a9e:	0018      	movs	r0, r3
    4aa0:	4b0e      	ldr	r3, [pc, #56]	; (4adc <writeFWStat+0x98>)
    4aa2:	4798      	blx	r3
    4aa4:	0003      	movs	r3, r0
    4aa6:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    4aa8:	234f      	movs	r3, #79	; 0x4f
    4aaa:	18fb      	adds	r3, r7, r3
    4aac:	781b      	ldrb	r3, [r3, #0]
    4aae:	2b05      	cmp	r3, #5
    4ab0:	d0f1      	beq.n	4a96 <writeFWStat+0x52>
	
	do
	{
		error_code = nvm_write_buffer(FW_STAT, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
    4ab2:	234f      	movs	r3, #79	; 0x4f
    4ab4:	18fc      	adds	r4, r7, r3
    4ab6:	230c      	movs	r3, #12
    4ab8:	18f9      	adds	r1, r7, r3
    4aba:	23fe      	movs	r3, #254	; 0xfe
    4abc:	01db      	lsls	r3, r3, #7
    4abe:	2240      	movs	r2, #64	; 0x40
    4ac0:	0018      	movs	r0, r3
    4ac2:	4b07      	ldr	r3, [pc, #28]	; (4ae0 <writeFWStat+0x9c>)
    4ac4:	4798      	blx	r3
    4ac6:	0003      	movs	r3, r0
    4ac8:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    4aca:	234f      	movs	r3, #79	; 0x4f
    4acc:	18fb      	adds	r3, r7, r3
    4ace:	781b      	ldrb	r3, [r3, #0]
    4ad0:	2b05      	cmp	r3, #5
    4ad2:	d0ee      	beq.n	4ab2 <writeFWStat+0x6e>
}
    4ad4:	46c0      	nop			; (mov r8, r8)
    4ad6:	46bd      	mov	sp, r7
    4ad8:	b015      	add	sp, #84	; 0x54
    4ada:	bd90      	pop	{r4, r7, pc}
    4adc:	000035a5 	.word	0x000035a5
    4ae0:	00003459 	.word	0x00003459

00004ae4 <upgradeFW>:

static void upgradeFW(Firmware_Status_t thisFW){
    4ae4:	b580      	push	{r7, lr}
    4ae6:	b082      	sub	sp, #8
    4ae8:	af00      	add	r7, sp, #0
    4aea:	003b      	movs	r3, r7
    4aec:	6018      	str	r0, [r3, #0]
    4aee:	6059      	str	r1, [r3, #4]
	printf("Upgrading firmware from location %d.\n", thisFW.downloaded_image);
    4af0:	003b      	movs	r3, r7
    4af2:	795b      	ldrb	r3, [r3, #5]
    4af4:	001a      	movs	r2, r3
    4af6:	4b0c      	ldr	r3, [pc, #48]	; (4b28 <upgradeFW+0x44>)
    4af8:	0011      	movs	r1, r2
    4afa:	0018      	movs	r0, r3
    4afc:	4b0b      	ldr	r3, [pc, #44]	; (4b2c <upgradeFW+0x48>)
    4afe:	4798      	blx	r3
	// write new firmware
	
	//...................
	thisFW.executing_image = thisFW.downloaded_image;
    4b00:	003b      	movs	r3, r7
    4b02:	795a      	ldrb	r2, [r3, #5]
    4b04:	003b      	movs	r3, r7
    4b06:	711a      	strb	r2, [r3, #4]
	thisFW.writenew_image = 0;
    4b08:	003b      	movs	r3, r7
    4b0a:	2200      	movs	r2, #0
    4b0c:	719a      	strb	r2, [r3, #6]
	writeFWStat(thisFW);
    4b0e:	003b      	movs	r3, r7
    4b10:	6818      	ldr	r0, [r3, #0]
    4b12:	6859      	ldr	r1, [r3, #4]
    4b14:	4b06      	ldr	r3, [pc, #24]	; (4b30 <upgradeFW+0x4c>)
    4b16:	4798      	blx	r3
	printf("Upgrade complete\n");
    4b18:	4b06      	ldr	r3, [pc, #24]	; (4b34 <upgradeFW+0x50>)
    4b1a:	0018      	movs	r0, r3
    4b1c:	4b06      	ldr	r3, [pc, #24]	; (4b38 <upgradeFW+0x54>)
    4b1e:	4798      	blx	r3
}
    4b20:	46c0      	nop			; (mov r8, r8)
    4b22:	46bd      	mov	sp, r7
    4b24:	b002      	add	sp, #8
    4b26:	bd80      	pop	{r7, pc}
    4b28:	00006260 	.word	0x00006260
    4b2c:	00004ff1 	.word	0x00004ff1
    4b30:	00004a45 	.word	0x00004a45
    4b34:	00006288 	.word	0x00006288
    4b38:	000050e9 	.word	0x000050e9

00004b3c <configure_nvm>:

static void configure_nvm() {
    4b3c:	b580      	push	{r7, lr}
    4b3e:	b082      	sub	sp, #8
    4b40:	af00      	add	r7, sp, #0
	struct nvm_config config;
	nvm_get_config_defaults(&config);
    4b42:	003b      	movs	r3, r7
    4b44:	0018      	movs	r0, r3
    4b46:	4b06      	ldr	r3, [pc, #24]	; (4b60 <configure_nvm+0x24>)
    4b48:	4798      	blx	r3
	config.manual_page_write = false;
    4b4a:	003b      	movs	r3, r7
    4b4c:	2200      	movs	r2, #0
    4b4e:	705a      	strb	r2, [r3, #1]
	nvm_set_config(&config);
    4b50:	003b      	movs	r3, r7
    4b52:	0018      	movs	r0, r3
    4b54:	4b03      	ldr	r3, [pc, #12]	; (4b64 <configure_nvm+0x28>)
    4b56:	4798      	blx	r3
}
    4b58:	46c0      	nop			; (mov r8, r8)
    4b5a:	46bd      	mov	sp, r7
    4b5c:	b002      	add	sp, #8
    4b5e:	bd80      	pop	{r7, pc}
    4b60:	000046f5 	.word	0x000046f5
    4b64:	00003269 	.word	0x00003269

00004b68 <at25dfx_init>:
static uint8_t write_buffer[AT25DFX_BUFFER_SIZE] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
struct spi_module at25dfx_spi;
struct at25dfx_chip_module at25dfx_chip;

static void at25dfx_init(void)
{
    4b68:	b580      	push	{r7, lr}
    4b6a:	b090      	sub	sp, #64	; 0x40
    4b6c:	af00      	add	r7, sp, #0
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	at25dfx_spi_get_config_defaults(&at25dfx_spi_config);
    4b6e:	1d3b      	adds	r3, r7, #4
    4b70:	0018      	movs	r0, r3
    4b72:	4b19      	ldr	r3, [pc, #100]	; (4bd8 <at25dfx_init+0x70>)
    4b74:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    4b76:	1d3b      	adds	r3, r7, #4
    4b78:	4a18      	ldr	r2, [pc, #96]	; (4bdc <at25dfx_init+0x74>)
    4b7a:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    4b7c:	1d3b      	adds	r3, r7, #4
    4b7e:	2280      	movs	r2, #128	; 0x80
    4b80:	0252      	lsls	r2, r2, #9
    4b82:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    4b84:	1d3b      	adds	r3, r7, #4
    4b86:	4a16      	ldr	r2, [pc, #88]	; (4be0 <at25dfx_init+0x78>)
    4b88:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    4b8a:	1d3b      	adds	r3, r7, #4
    4b8c:	4a15      	ldr	r2, [pc, #84]	; (4be4 <at25dfx_init+0x7c>)
    4b8e:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    4b90:	1d3b      	adds	r3, r7, #4
    4b92:	4a15      	ldr	r2, [pc, #84]	; (4be8 <at25dfx_init+0x80>)
    4b94:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    4b96:	1d3b      	adds	r3, r7, #4
    4b98:	4a14      	ldr	r2, [pc, #80]	; (4bec <at25dfx_init+0x84>)
    4b9a:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    4b9c:	1d3a      	adds	r2, r7, #4
    4b9e:	4914      	ldr	r1, [pc, #80]	; (4bf0 <at25dfx_init+0x88>)
    4ba0:	4b14      	ldr	r3, [pc, #80]	; (4bf4 <at25dfx_init+0x8c>)
    4ba2:	0018      	movs	r0, r3
    4ba4:	4b14      	ldr	r3, [pc, #80]	; (4bf8 <at25dfx_init+0x90>)
    4ba6:	4798      	blx	r3
	spi_enable(&at25dfx_spi);
    4ba8:	4b12      	ldr	r3, [pc, #72]	; (4bf4 <at25dfx_init+0x8c>)
    4baa:	0018      	movs	r0, r3
    4bac:	4b13      	ldr	r3, [pc, #76]	; (4bfc <at25dfx_init+0x94>)
    4bae:	4798      	blx	r3
	
	at25dfx_chip_config.type = AT25DFX_MEM_TYPE;
    4bb0:	233c      	movs	r3, #60	; 0x3c
    4bb2:	18fb      	adds	r3, r7, r3
    4bb4:	2204      	movs	r2, #4
    4bb6:	701a      	strb	r2, [r3, #0]
	at25dfx_chip_config.cs_pin = AT25DFX_CS;
    4bb8:	233c      	movs	r3, #60	; 0x3c
    4bba:	18fb      	adds	r3, r7, r3
    4bbc:	2207      	movs	r2, #7
    4bbe:	705a      	strb	r2, [r3, #1]
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
    4bc0:	233c      	movs	r3, #60	; 0x3c
    4bc2:	18fa      	adds	r2, r7, r3
    4bc4:	490b      	ldr	r1, [pc, #44]	; (4bf4 <at25dfx_init+0x8c>)
    4bc6:	4b0e      	ldr	r3, [pc, #56]	; (4c00 <at25dfx_init+0x98>)
    4bc8:	0018      	movs	r0, r3
    4bca:	4b0e      	ldr	r3, [pc, #56]	; (4c04 <at25dfx_init+0x9c>)
    4bcc:	4798      	blx	r3
}
    4bce:	46c0      	nop			; (mov r8, r8)
    4bd0:	46bd      	mov	sp, r7
    4bd2:	b010      	add	sp, #64	; 0x40
    4bd4:	bd80      	pop	{r7, pc}
    4bd6:	46c0      	nop			; (mov r8, r8)
    4bd8:	00004671 	.word	0x00004671
    4bdc:	0001d4c0 	.word	0x0001d4c0
    4be0:	00100002 	.word	0x00100002
    4be4:	00110002 	.word	0x00110002
    4be8:	00120002 	.word	0x00120002
    4bec:	00130002 	.word	0x00130002
    4bf0:	42000c00 	.word	0x42000c00
    4bf4:	20000158 	.word	0x20000158
    4bf8:	000013f5 	.word	0x000013f5
    4bfc:	00004621 	.word	0x00004621
    4c00:	20000150 	.word	0x20000150
    4c04:	0000468d 	.word	0x0000468d

00004c08 <main>:

int main (void)
{
    4c08:	b590      	push	{r4, r7, lr}
    4c0a:	b087      	sub	sp, #28
    4c0c:	af00      	add	r7, sp, #0
	
	system_init();
    4c0e:	4b5f      	ldr	r3, [pc, #380]	; (4d8c <main+0x184>)
    4c10:	4798      	blx	r3
	system_interrupt_enable_global();
    4c12:	4b5f      	ldr	r3, [pc, #380]	; (4d90 <main+0x188>)
    4c14:	4798      	blx	r3
	delay_init();
    4c16:	4b5f      	ldr	r3, [pc, #380]	; (4d94 <main+0x18c>)
    4c18:	4798      	blx	r3
	configure_console();
    4c1a:	4b5f      	ldr	r3, [pc, #380]	; (4d98 <main+0x190>)
    4c1c:	4798      	blx	r3
	configure_nvm();
    4c1e:	4b5f      	ldr	r3, [pc, #380]	; (4d9c <main+0x194>)
    4c20:	4798      	blx	r3
	
	at25dfx_init();
    4c22:	4b5f      	ldr	r3, [pc, #380]	; (4da0 <main+0x198>)
    4c24:	4798      	blx	r3
	/* Insert application code here, after the board has been initialized. */
	at25dfx_chip_wake(&at25dfx_chip);
    4c26:	4b5f      	ldr	r3, [pc, #380]	; (4da4 <main+0x19c>)
    4c28:	0018      	movs	r0, r3
    4c2a:	4b5f      	ldr	r3, [pc, #380]	; (4da8 <main+0x1a0>)
    4c2c:	4798      	blx	r3
	
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    4c2e:	4b5d      	ldr	r3, [pc, #372]	; (4da4 <main+0x19c>)
    4c30:	0018      	movs	r0, r3
    4c32:	4b5e      	ldr	r3, [pc, #376]	; (4dac <main+0x1a4>)
    4c34:	4798      	blx	r3
		// Handle missing or non-responsive device
	}
	at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x10000, false);				// unprotect sector
    4c36:	2380      	movs	r3, #128	; 0x80
    4c38:	0259      	lsls	r1, r3, #9
    4c3a:	4b5a      	ldr	r3, [pc, #360]	; (4da4 <main+0x19c>)
    4c3c:	2200      	movs	r2, #0
    4c3e:	0018      	movs	r0, r3
    4c40:	4b5b      	ldr	r3, [pc, #364]	; (4db0 <main+0x1a8>)
    4c42:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);	// erase block
    4c44:	2380      	movs	r3, #128	; 0x80
    4c46:	0259      	lsls	r1, r3, #9
    4c48:	4b56      	ldr	r3, [pc, #344]	; (4da4 <main+0x19c>)
    4c4a:	2200      	movs	r2, #0
    4c4c:	0018      	movs	r0, r3
    4c4e:	4b59      	ldr	r3, [pc, #356]	; (4db4 <main+0x1ac>)
    4c50:	4798      	blx	r3
	at25dfx_chip_write_buffer(&at25dfx_chip, 0x10000, write_buffer, AT25DFX_BUFFER_SIZE);	// write buffer
    4c52:	4a59      	ldr	r2, [pc, #356]	; (4db8 <main+0x1b0>)
    4c54:	2380      	movs	r3, #128	; 0x80
    4c56:	0259      	lsls	r1, r3, #9
    4c58:	4852      	ldr	r0, [pc, #328]	; (4da4 <main+0x19c>)
    4c5a:	230a      	movs	r3, #10
    4c5c:	4c57      	ldr	r4, [pc, #348]	; (4dbc <main+0x1b4>)
    4c5e:	47a0      	blx	r4
	at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, read_buffer, AT25DFX_BUFFER_SIZE);		// read same location
    4c60:	4a57      	ldr	r2, [pc, #348]	; (4dc0 <main+0x1b8>)
    4c62:	2380      	movs	r3, #128	; 0x80
    4c64:	0259      	lsls	r1, r3, #9
    4c66:	484f      	ldr	r0, [pc, #316]	; (4da4 <main+0x19c>)
    4c68:	230a      	movs	r3, #10
    4c6a:	4c56      	ldr	r4, [pc, #344]	; (4dc4 <main+0x1bc>)
    4c6c:	47a0      	blx	r4
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);				// protect sector
    4c6e:	4b4d      	ldr	r3, [pc, #308]	; (4da4 <main+0x19c>)
    4c70:	2101      	movs	r1, #1
    4c72:	0018      	movs	r0, r3
    4c74:	4b54      	ldr	r3, [pc, #336]	; (4dc8 <main+0x1c0>)
    4c76:	4798      	blx	r3
	at25dfx_chip_sleep(&at25dfx_chip);											// back to sleep
    4c78:	4b4a      	ldr	r3, [pc, #296]	; (4da4 <main+0x19c>)
    4c7a:	0018      	movs	r0, r3
    4c7c:	4b53      	ldr	r3, [pc, #332]	; (4dcc <main+0x1c4>)
    4c7e:	4798      	blx	r3
	
	// boot pin config
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    4c80:	230c      	movs	r3, #12
    4c82:	18fb      	adds	r3, r7, r3
    4c84:	0018      	movs	r0, r3
    4c86:	4b52      	ldr	r3, [pc, #328]	; (4dd0 <main+0x1c8>)
    4c88:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_INPUT;
    4c8a:	230c      	movs	r3, #12
    4c8c:	18fb      	adds	r3, r7, r3
    4c8e:	2200      	movs	r2, #0
    4c90:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(BOOT_PIN, &pin_conf);
    4c92:	230c      	movs	r3, #12
    4c94:	18fb      	adds	r3, r7, r3
    4c96:	0019      	movs	r1, r3
    4c98:	2006      	movs	r0, #6
    4c9a:	4b4e      	ldr	r3, [pc, #312]	; (4dd4 <main+0x1cc>)
    4c9c:	4798      	blx	r3
	printf("Init done.\n");
    4c9e:	4b4e      	ldr	r3, [pc, #312]	; (4dd8 <main+0x1d0>)
    4ca0:	0018      	movs	r0, r3
    4ca2:	4b4e      	ldr	r3, [pc, #312]	; (4ddc <main+0x1d4>)
    4ca4:	4798      	blx	r3

	
	
	
	Firmware_Status_t thisFW = getFWStat();
    4ca6:	1d3b      	adds	r3, r7, #4
    4ca8:	0018      	movs	r0, r3
    4caa:	4b4d      	ldr	r3, [pc, #308]	; (4de0 <main+0x1d8>)
    4cac:	4798      	blx	r3
	if (thisFW.signature[0] == NULL) {
    4cae:	1d3b      	adds	r3, r7, #4
    4cb0:	781b      	ldrb	r3, [r3, #0]
    4cb2:	2b00      	cmp	r3, #0
    4cb4:	d11d      	bne.n	4cf2 <main+0xea>
		printf("Invalid FW stat, writing default\n");
    4cb6:	4b4b      	ldr	r3, [pc, #300]	; (4de4 <main+0x1dc>)
    4cb8:	0018      	movs	r0, r3
    4cba:	4b48      	ldr	r3, [pc, #288]	; (4ddc <main+0x1d4>)
    4cbc:	4798      	blx	r3
		thisFW.signature[0] = 1;
    4cbe:	1d3b      	adds	r3, r7, #4
    4cc0:	2201      	movs	r2, #1
    4cc2:	701a      	strb	r2, [r3, #0]
		thisFW.signature[1] = 2;
    4cc4:	1d3b      	adds	r3, r7, #4
    4cc6:	2202      	movs	r2, #2
    4cc8:	705a      	strb	r2, [r3, #1]
		thisFW.signature[2] = 3;
    4cca:	1d3b      	adds	r3, r7, #4
    4ccc:	2203      	movs	r2, #3
    4cce:	709a      	strb	r2, [r3, #2]
		thisFW.signature[3] = 4;
    4cd0:	1d3b      	adds	r3, r7, #4
    4cd2:	2204      	movs	r2, #4
    4cd4:	70da      	strb	r2, [r3, #3]
		thisFW.executing_image = 1;
    4cd6:	1d3b      	adds	r3, r7, #4
    4cd8:	2201      	movs	r2, #1
    4cda:	711a      	strb	r2, [r3, #4]
		thisFW.downloaded_image = 2;
    4cdc:	1d3b      	adds	r3, r7, #4
    4cde:	2202      	movs	r2, #2
    4ce0:	715a      	strb	r2, [r3, #5]
		thisFW.writenew_image = 0;
    4ce2:	1d3b      	adds	r3, r7, #4
    4ce4:	2200      	movs	r2, #0
    4ce6:	719a      	strb	r2, [r3, #6]
		writeFWStat(thisFW);
    4ce8:	1d3b      	adds	r3, r7, #4
    4cea:	6818      	ldr	r0, [r3, #0]
    4cec:	6859      	ldr	r1, [r3, #4]
    4cee:	4b3e      	ldr	r3, [pc, #248]	; (4de8 <main+0x1e0>)
    4cf0:	4798      	blx	r3
	//thisFW.writenew_image = 1;
	//thisFW.downloaded_image = 1;
	//writeFWStat(thisFW);

	void (*app_code_entry)(void);
	uint16_t n=0; uint8_t remain_in_boot = 0;
    4cf2:	2316      	movs	r3, #22
    4cf4:	18fb      	adds	r3, r7, r3
    4cf6:	2200      	movs	r2, #0
    4cf8:	801a      	strh	r2, [r3, #0]
    4cfa:	2315      	movs	r3, #21
    4cfc:	18fb      	adds	r3, r7, r3
    4cfe:	2200      	movs	r2, #0
    4d00:	701a      	strb	r2, [r3, #0]
	//check if button is pressed to lock in boot
	while(n++ < 1000)
    4d02:	e00e      	b.n	4d22 <main+0x11a>
	{
		if(!port_pin_get_input_level(BOOT_PIN))
    4d04:	2006      	movs	r0, #6
    4d06:	4b39      	ldr	r3, [pc, #228]	; (4dec <main+0x1e4>)
    4d08:	4798      	blx	r3
    4d0a:	0003      	movs	r3, r0
    4d0c:	001a      	movs	r2, r3
    4d0e:	2301      	movs	r3, #1
    4d10:	4053      	eors	r3, r2
    4d12:	b2db      	uxtb	r3, r3
    4d14:	2b00      	cmp	r3, #0
    4d16:	d004      	beq.n	4d22 <main+0x11a>
		{
			remain_in_boot = 1;
    4d18:	2315      	movs	r3, #21
    4d1a:	18fb      	adds	r3, r7, r3
    4d1c:	2201      	movs	r2, #1
    4d1e:	701a      	strb	r2, [r3, #0]
			break;
    4d20:	e009      	b.n	4d36 <main+0x12e>
	//writeFWStat(thisFW);

	void (*app_code_entry)(void);
	uint16_t n=0; uint8_t remain_in_boot = 0;
	//check if button is pressed to lock in boot
	while(n++ < 1000)
    4d22:	2316      	movs	r3, #22
    4d24:	18fb      	adds	r3, r7, r3
    4d26:	881b      	ldrh	r3, [r3, #0]
    4d28:	2216      	movs	r2, #22
    4d2a:	18ba      	adds	r2, r7, r2
    4d2c:	1c59      	adds	r1, r3, #1
    4d2e:	8011      	strh	r1, [r2, #0]
    4d30:	4a2f      	ldr	r2, [pc, #188]	; (4df0 <main+0x1e8>)
    4d32:	4293      	cmp	r3, r2
    4d34:	d9e6      	bls.n	4d04 <main+0xfc>
			remain_in_boot = 1;
			break;
		}
	}
	while(1) {
		if(!remain_in_boot)
    4d36:	2315      	movs	r3, #21
    4d38:	18fb      	adds	r3, r7, r3
    4d3a:	781b      	ldrb	r3, [r3, #0]
    4d3c:	2b00      	cmp	r3, #0
    4d3e:	d115      	bne.n	4d6c <main+0x164>
		{
			// check for firmware download requested
			if(thisFW.writenew_image)
    4d40:	1d3b      	adds	r3, r7, #4
    4d42:	799b      	ldrb	r3, [r3, #6]
    4d44:	2b00      	cmp	r3, #0
    4d46:	d004      	beq.n	4d52 <main+0x14a>
			{
				upgradeFW(thisFW);
    4d48:	1d3b      	adds	r3, r7, #4
    4d4a:	6818      	ldr	r0, [r3, #0]
    4d4c:	6859      	ldr	r1, [r3, #4]
    4d4e:	4b29      	ldr	r3, [pc, #164]	; (4df4 <main+0x1ec>)
    4d50:	4798      	blx	r3
			}
			
			// vector table rebasing
			SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    4d52:	4b29      	ldr	r3, [pc, #164]	; (4df8 <main+0x1f0>)
    4d54:	2280      	movs	r2, #128	; 0x80
    4d56:	0212      	lsls	r2, r2, #8
    4d58:	609a      	str	r2, [r3, #8]

			// jump to reset handler
			app_code_entry =  (void(*)(void))(*(unsigned int*)(APP_START_ADDRESS+4));
    4d5a:	4b28      	ldr	r3, [pc, #160]	; (4dfc <main+0x1f4>)
    4d5c:	681b      	ldr	r3, [r3, #0]
    4d5e:	613b      	str	r3, [r7, #16]
			// jump
			printf("Starting app\n");
    4d60:	4b27      	ldr	r3, [pc, #156]	; (4e00 <main+0x1f8>)
    4d62:	0018      	movs	r0, r3
    4d64:	4b1d      	ldr	r3, [pc, #116]	; (4ddc <main+0x1d4>)
    4d66:	4798      	blx	r3
			app_code_entry();
    4d68:	693b      	ldr	r3, [r7, #16]
    4d6a:	4798      	blx	r3
		}
		printf("in boot");
    4d6c:	4b25      	ldr	r3, [pc, #148]	; (4e04 <main+0x1fc>)
    4d6e:	0018      	movs	r0, r3
    4d70:	4b25      	ldr	r3, [pc, #148]	; (4e08 <main+0x200>)
    4d72:	4798      	blx	r3
		delay_ms(500);
    4d74:	23fa      	movs	r3, #250	; 0xfa
    4d76:	005b      	lsls	r3, r3, #1
    4d78:	0018      	movs	r0, r3
    4d7a:	4b24      	ldr	r3, [pc, #144]	; (4e0c <main+0x204>)
    4d7c:	4798      	blx	r3
    4d7e:	2315      	movs	r3, #21
    4d80:	18fb      	adds	r3, r7, r3
    4d82:	2215      	movs	r2, #21
    4d84:	18ba      	adds	r2, r7, r2
    4d86:	7812      	ldrb	r2, [r2, #0]
    4d88:	701a      	strb	r2, [r3, #0]
	}
    4d8a:	e7d4      	b.n	4d36 <main+0x12e>
    4d8c:	00004229 	.word	0x00004229
    4d90:	00004535 	.word	0x00004535
    4d94:	00001f11 	.word	0x00001f11
    4d98:	00004991 	.word	0x00004991
    4d9c:	00004b3d 	.word	0x00004b3d
    4da0:	00004b69 	.word	0x00004b69
    4da4:	20000150 	.word	0x20000150
    4da8:	00000e39 	.word	0x00000e39
    4dac:	0000082d 	.word	0x0000082d
    4db0:	00000ce9 	.word	0x00000ce9
    4db4:	00000b39 	.word	0x00000b39
    4db8:	2000000c 	.word	0x2000000c
    4dbc:	00000991 	.word	0x00000991
    4dc0:	200000e0 	.word	0x200000e0
    4dc4:	000008d9 	.word	0x000008d9
    4dc8:	00000c35 	.word	0x00000c35
    4dcc:	00000dad 	.word	0x00000dad
    4dd0:	00004479 	.word	0x00004479
    4dd4:	00003675 	.word	0x00003675
    4dd8:	0000629c 	.word	0x0000629c
    4ddc:	000050e9 	.word	0x000050e9
    4de0:	00004a05 	.word	0x00004a05
    4de4:	000062a8 	.word	0x000062a8
    4de8:	00004a45 	.word	0x00004a45
    4dec:	0000449d 	.word	0x0000449d
    4df0:	000003e7 	.word	0x000003e7
    4df4:	00004ae5 	.word	0x00004ae5
    4df8:	e000ed00 	.word	0xe000ed00
    4dfc:	00008004 	.word	0x00008004
    4e00:	000062cc 	.word	0x000062cc
    4e04:	000062dc 	.word	0x000062dc
    4e08:	00004ff1 	.word	0x00004ff1
    4e0c:	00001f69 	.word	0x00001f69

00004e10 <__aeabi_uidiv>:
    4e10:	2200      	movs	r2, #0
    4e12:	0843      	lsrs	r3, r0, #1
    4e14:	428b      	cmp	r3, r1
    4e16:	d374      	bcc.n	4f02 <__aeabi_uidiv+0xf2>
    4e18:	0903      	lsrs	r3, r0, #4
    4e1a:	428b      	cmp	r3, r1
    4e1c:	d35f      	bcc.n	4ede <__aeabi_uidiv+0xce>
    4e1e:	0a03      	lsrs	r3, r0, #8
    4e20:	428b      	cmp	r3, r1
    4e22:	d344      	bcc.n	4eae <__aeabi_uidiv+0x9e>
    4e24:	0b03      	lsrs	r3, r0, #12
    4e26:	428b      	cmp	r3, r1
    4e28:	d328      	bcc.n	4e7c <__aeabi_uidiv+0x6c>
    4e2a:	0c03      	lsrs	r3, r0, #16
    4e2c:	428b      	cmp	r3, r1
    4e2e:	d30d      	bcc.n	4e4c <__aeabi_uidiv+0x3c>
    4e30:	22ff      	movs	r2, #255	; 0xff
    4e32:	0209      	lsls	r1, r1, #8
    4e34:	ba12      	rev	r2, r2
    4e36:	0c03      	lsrs	r3, r0, #16
    4e38:	428b      	cmp	r3, r1
    4e3a:	d302      	bcc.n	4e42 <__aeabi_uidiv+0x32>
    4e3c:	1212      	asrs	r2, r2, #8
    4e3e:	0209      	lsls	r1, r1, #8
    4e40:	d065      	beq.n	4f0e <__aeabi_uidiv+0xfe>
    4e42:	0b03      	lsrs	r3, r0, #12
    4e44:	428b      	cmp	r3, r1
    4e46:	d319      	bcc.n	4e7c <__aeabi_uidiv+0x6c>
    4e48:	e000      	b.n	4e4c <__aeabi_uidiv+0x3c>
    4e4a:	0a09      	lsrs	r1, r1, #8
    4e4c:	0bc3      	lsrs	r3, r0, #15
    4e4e:	428b      	cmp	r3, r1
    4e50:	d301      	bcc.n	4e56 <__aeabi_uidiv+0x46>
    4e52:	03cb      	lsls	r3, r1, #15
    4e54:	1ac0      	subs	r0, r0, r3
    4e56:	4152      	adcs	r2, r2
    4e58:	0b83      	lsrs	r3, r0, #14
    4e5a:	428b      	cmp	r3, r1
    4e5c:	d301      	bcc.n	4e62 <__aeabi_uidiv+0x52>
    4e5e:	038b      	lsls	r3, r1, #14
    4e60:	1ac0      	subs	r0, r0, r3
    4e62:	4152      	adcs	r2, r2
    4e64:	0b43      	lsrs	r3, r0, #13
    4e66:	428b      	cmp	r3, r1
    4e68:	d301      	bcc.n	4e6e <__aeabi_uidiv+0x5e>
    4e6a:	034b      	lsls	r3, r1, #13
    4e6c:	1ac0      	subs	r0, r0, r3
    4e6e:	4152      	adcs	r2, r2
    4e70:	0b03      	lsrs	r3, r0, #12
    4e72:	428b      	cmp	r3, r1
    4e74:	d301      	bcc.n	4e7a <__aeabi_uidiv+0x6a>
    4e76:	030b      	lsls	r3, r1, #12
    4e78:	1ac0      	subs	r0, r0, r3
    4e7a:	4152      	adcs	r2, r2
    4e7c:	0ac3      	lsrs	r3, r0, #11
    4e7e:	428b      	cmp	r3, r1
    4e80:	d301      	bcc.n	4e86 <__aeabi_uidiv+0x76>
    4e82:	02cb      	lsls	r3, r1, #11
    4e84:	1ac0      	subs	r0, r0, r3
    4e86:	4152      	adcs	r2, r2
    4e88:	0a83      	lsrs	r3, r0, #10
    4e8a:	428b      	cmp	r3, r1
    4e8c:	d301      	bcc.n	4e92 <__aeabi_uidiv+0x82>
    4e8e:	028b      	lsls	r3, r1, #10
    4e90:	1ac0      	subs	r0, r0, r3
    4e92:	4152      	adcs	r2, r2
    4e94:	0a43      	lsrs	r3, r0, #9
    4e96:	428b      	cmp	r3, r1
    4e98:	d301      	bcc.n	4e9e <__aeabi_uidiv+0x8e>
    4e9a:	024b      	lsls	r3, r1, #9
    4e9c:	1ac0      	subs	r0, r0, r3
    4e9e:	4152      	adcs	r2, r2
    4ea0:	0a03      	lsrs	r3, r0, #8
    4ea2:	428b      	cmp	r3, r1
    4ea4:	d301      	bcc.n	4eaa <__aeabi_uidiv+0x9a>
    4ea6:	020b      	lsls	r3, r1, #8
    4ea8:	1ac0      	subs	r0, r0, r3
    4eaa:	4152      	adcs	r2, r2
    4eac:	d2cd      	bcs.n	4e4a <__aeabi_uidiv+0x3a>
    4eae:	09c3      	lsrs	r3, r0, #7
    4eb0:	428b      	cmp	r3, r1
    4eb2:	d301      	bcc.n	4eb8 <__aeabi_uidiv+0xa8>
    4eb4:	01cb      	lsls	r3, r1, #7
    4eb6:	1ac0      	subs	r0, r0, r3
    4eb8:	4152      	adcs	r2, r2
    4eba:	0983      	lsrs	r3, r0, #6
    4ebc:	428b      	cmp	r3, r1
    4ebe:	d301      	bcc.n	4ec4 <__aeabi_uidiv+0xb4>
    4ec0:	018b      	lsls	r3, r1, #6
    4ec2:	1ac0      	subs	r0, r0, r3
    4ec4:	4152      	adcs	r2, r2
    4ec6:	0943      	lsrs	r3, r0, #5
    4ec8:	428b      	cmp	r3, r1
    4eca:	d301      	bcc.n	4ed0 <__aeabi_uidiv+0xc0>
    4ecc:	014b      	lsls	r3, r1, #5
    4ece:	1ac0      	subs	r0, r0, r3
    4ed0:	4152      	adcs	r2, r2
    4ed2:	0903      	lsrs	r3, r0, #4
    4ed4:	428b      	cmp	r3, r1
    4ed6:	d301      	bcc.n	4edc <__aeabi_uidiv+0xcc>
    4ed8:	010b      	lsls	r3, r1, #4
    4eda:	1ac0      	subs	r0, r0, r3
    4edc:	4152      	adcs	r2, r2
    4ede:	08c3      	lsrs	r3, r0, #3
    4ee0:	428b      	cmp	r3, r1
    4ee2:	d301      	bcc.n	4ee8 <__aeabi_uidiv+0xd8>
    4ee4:	00cb      	lsls	r3, r1, #3
    4ee6:	1ac0      	subs	r0, r0, r3
    4ee8:	4152      	adcs	r2, r2
    4eea:	0883      	lsrs	r3, r0, #2
    4eec:	428b      	cmp	r3, r1
    4eee:	d301      	bcc.n	4ef4 <__aeabi_uidiv+0xe4>
    4ef0:	008b      	lsls	r3, r1, #2
    4ef2:	1ac0      	subs	r0, r0, r3
    4ef4:	4152      	adcs	r2, r2
    4ef6:	0843      	lsrs	r3, r0, #1
    4ef8:	428b      	cmp	r3, r1
    4efa:	d301      	bcc.n	4f00 <__aeabi_uidiv+0xf0>
    4efc:	004b      	lsls	r3, r1, #1
    4efe:	1ac0      	subs	r0, r0, r3
    4f00:	4152      	adcs	r2, r2
    4f02:	1a41      	subs	r1, r0, r1
    4f04:	d200      	bcs.n	4f08 <__aeabi_uidiv+0xf8>
    4f06:	4601      	mov	r1, r0
    4f08:	4152      	adcs	r2, r2
    4f0a:	4610      	mov	r0, r2
    4f0c:	4770      	bx	lr
    4f0e:	e7ff      	b.n	4f10 <__aeabi_uidiv+0x100>
    4f10:	b501      	push	{r0, lr}
    4f12:	2000      	movs	r0, #0
    4f14:	f000 f806 	bl	4f24 <__aeabi_idiv0>
    4f18:	bd02      	pop	{r1, pc}
    4f1a:	46c0      	nop			; (mov r8, r8)

00004f1c <__aeabi_uidivmod>:
    4f1c:	2900      	cmp	r1, #0
    4f1e:	d0f7      	beq.n	4f10 <__aeabi_uidiv+0x100>
    4f20:	e776      	b.n	4e10 <__aeabi_uidiv>
    4f22:	4770      	bx	lr

00004f24 <__aeabi_idiv0>:
    4f24:	4770      	bx	lr
    4f26:	46c0      	nop			; (mov r8, r8)

00004f28 <__aeabi_lmul>:
    4f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f2a:	464f      	mov	r7, r9
    4f2c:	4646      	mov	r6, r8
    4f2e:	b4c0      	push	{r6, r7}
    4f30:	0416      	lsls	r6, r2, #16
    4f32:	0c36      	lsrs	r6, r6, #16
    4f34:	4699      	mov	r9, r3
    4f36:	0033      	movs	r3, r6
    4f38:	0405      	lsls	r5, r0, #16
    4f3a:	0c2c      	lsrs	r4, r5, #16
    4f3c:	0c07      	lsrs	r7, r0, #16
    4f3e:	0c15      	lsrs	r5, r2, #16
    4f40:	4363      	muls	r3, r4
    4f42:	437e      	muls	r6, r7
    4f44:	436f      	muls	r7, r5
    4f46:	4365      	muls	r5, r4
    4f48:	0c1c      	lsrs	r4, r3, #16
    4f4a:	19ad      	adds	r5, r5, r6
    4f4c:	1964      	adds	r4, r4, r5
    4f4e:	469c      	mov	ip, r3
    4f50:	42a6      	cmp	r6, r4
    4f52:	d903      	bls.n	4f5c <__aeabi_lmul+0x34>
    4f54:	2380      	movs	r3, #128	; 0x80
    4f56:	025b      	lsls	r3, r3, #9
    4f58:	4698      	mov	r8, r3
    4f5a:	4447      	add	r7, r8
    4f5c:	4663      	mov	r3, ip
    4f5e:	0c25      	lsrs	r5, r4, #16
    4f60:	19ef      	adds	r7, r5, r7
    4f62:	041d      	lsls	r5, r3, #16
    4f64:	464b      	mov	r3, r9
    4f66:	434a      	muls	r2, r1
    4f68:	4343      	muls	r3, r0
    4f6a:	0c2d      	lsrs	r5, r5, #16
    4f6c:	0424      	lsls	r4, r4, #16
    4f6e:	1964      	adds	r4, r4, r5
    4f70:	1899      	adds	r1, r3, r2
    4f72:	19c9      	adds	r1, r1, r7
    4f74:	0020      	movs	r0, r4
    4f76:	bc0c      	pop	{r2, r3}
    4f78:	4690      	mov	r8, r2
    4f7a:	4699      	mov	r9, r3
    4f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f7e:	46c0      	nop			; (mov r8, r8)

00004f80 <__libc_init_array>:
    4f80:	4b0e      	ldr	r3, [pc, #56]	; (4fbc <__libc_init_array+0x3c>)
    4f82:	b570      	push	{r4, r5, r6, lr}
    4f84:	2500      	movs	r5, #0
    4f86:	001e      	movs	r6, r3
    4f88:	4c0d      	ldr	r4, [pc, #52]	; (4fc0 <__libc_init_array+0x40>)
    4f8a:	1ae4      	subs	r4, r4, r3
    4f8c:	10a4      	asrs	r4, r4, #2
    4f8e:	42a5      	cmp	r5, r4
    4f90:	d004      	beq.n	4f9c <__libc_init_array+0x1c>
    4f92:	00ab      	lsls	r3, r5, #2
    4f94:	58f3      	ldr	r3, [r6, r3]
    4f96:	4798      	blx	r3
    4f98:	3501      	adds	r5, #1
    4f9a:	e7f8      	b.n	4f8e <__libc_init_array+0xe>
    4f9c:	f001 f9f0 	bl	6380 <_init>
    4fa0:	4b08      	ldr	r3, [pc, #32]	; (4fc4 <__libc_init_array+0x44>)
    4fa2:	2500      	movs	r5, #0
    4fa4:	001e      	movs	r6, r3
    4fa6:	4c08      	ldr	r4, [pc, #32]	; (4fc8 <__libc_init_array+0x48>)
    4fa8:	1ae4      	subs	r4, r4, r3
    4faa:	10a4      	asrs	r4, r4, #2
    4fac:	42a5      	cmp	r5, r4
    4fae:	d004      	beq.n	4fba <__libc_init_array+0x3a>
    4fb0:	00ab      	lsls	r3, r5, #2
    4fb2:	58f3      	ldr	r3, [r6, r3]
    4fb4:	4798      	blx	r3
    4fb6:	3501      	adds	r5, #1
    4fb8:	e7f8      	b.n	4fac <__libc_init_array+0x2c>
    4fba:	bd70      	pop	{r4, r5, r6, pc}
    4fbc:	0000638c 	.word	0x0000638c
    4fc0:	0000638c 	.word	0x0000638c
    4fc4:	0000638c 	.word	0x0000638c
    4fc8:	00006390 	.word	0x00006390

00004fcc <memcpy>:
    4fcc:	2300      	movs	r3, #0
    4fce:	b510      	push	{r4, lr}
    4fd0:	429a      	cmp	r2, r3
    4fd2:	d003      	beq.n	4fdc <memcpy+0x10>
    4fd4:	5ccc      	ldrb	r4, [r1, r3]
    4fd6:	54c4      	strb	r4, [r0, r3]
    4fd8:	3301      	adds	r3, #1
    4fda:	e7f9      	b.n	4fd0 <memcpy+0x4>
    4fdc:	bd10      	pop	{r4, pc}

00004fde <memset>:
    4fde:	0003      	movs	r3, r0
    4fe0:	1882      	adds	r2, r0, r2
    4fe2:	4293      	cmp	r3, r2
    4fe4:	d002      	beq.n	4fec <memset+0xe>
    4fe6:	7019      	strb	r1, [r3, #0]
    4fe8:	3301      	adds	r3, #1
    4fea:	e7fa      	b.n	4fe2 <memset+0x4>
    4fec:	4770      	bx	lr
	...

00004ff0 <iprintf>:
    4ff0:	b40f      	push	{r0, r1, r2, r3}
    4ff2:	4b0b      	ldr	r3, [pc, #44]	; (5020 <iprintf+0x30>)
    4ff4:	b513      	push	{r0, r1, r4, lr}
    4ff6:	681c      	ldr	r4, [r3, #0]
    4ff8:	2c00      	cmp	r4, #0
    4ffa:	d005      	beq.n	5008 <iprintf+0x18>
    4ffc:	69a3      	ldr	r3, [r4, #24]
    4ffe:	2b00      	cmp	r3, #0
    5000:	d102      	bne.n	5008 <iprintf+0x18>
    5002:	0020      	movs	r0, r4
    5004:	f000 faf6 	bl	55f4 <__sinit>
    5008:	ab05      	add	r3, sp, #20
    500a:	9a04      	ldr	r2, [sp, #16]
    500c:	68a1      	ldr	r1, [r4, #8]
    500e:	0020      	movs	r0, r4
    5010:	9301      	str	r3, [sp, #4]
    5012:	f000 fcb5 	bl	5980 <_vfiprintf_r>
    5016:	bc16      	pop	{r1, r2, r4}
    5018:	bc08      	pop	{r3}
    501a:	b004      	add	sp, #16
    501c:	4718      	bx	r3
    501e:	46c0      	nop			; (mov r8, r8)
    5020:	20000078 	.word	0x20000078

00005024 <_puts_r>:
    5024:	b570      	push	{r4, r5, r6, lr}
    5026:	0005      	movs	r5, r0
    5028:	000e      	movs	r6, r1
    502a:	2800      	cmp	r0, #0
    502c:	d004      	beq.n	5038 <_puts_r+0x14>
    502e:	6983      	ldr	r3, [r0, #24]
    5030:	2b00      	cmp	r3, #0
    5032:	d101      	bne.n	5038 <_puts_r+0x14>
    5034:	f000 fade 	bl	55f4 <__sinit>
    5038:	69ab      	ldr	r3, [r5, #24]
    503a:	68ac      	ldr	r4, [r5, #8]
    503c:	2b00      	cmp	r3, #0
    503e:	d102      	bne.n	5046 <_puts_r+0x22>
    5040:	0028      	movs	r0, r5
    5042:	f000 fad7 	bl	55f4 <__sinit>
    5046:	4b25      	ldr	r3, [pc, #148]	; (50dc <_puts_r+0xb8>)
    5048:	429c      	cmp	r4, r3
    504a:	d101      	bne.n	5050 <_puts_r+0x2c>
    504c:	686c      	ldr	r4, [r5, #4]
    504e:	e008      	b.n	5062 <_puts_r+0x3e>
    5050:	4b23      	ldr	r3, [pc, #140]	; (50e0 <_puts_r+0xbc>)
    5052:	429c      	cmp	r4, r3
    5054:	d101      	bne.n	505a <_puts_r+0x36>
    5056:	68ac      	ldr	r4, [r5, #8]
    5058:	e003      	b.n	5062 <_puts_r+0x3e>
    505a:	4b22      	ldr	r3, [pc, #136]	; (50e4 <_puts_r+0xc0>)
    505c:	429c      	cmp	r4, r3
    505e:	d100      	bne.n	5062 <_puts_r+0x3e>
    5060:	68ec      	ldr	r4, [r5, #12]
    5062:	89a3      	ldrh	r3, [r4, #12]
    5064:	071b      	lsls	r3, r3, #28
    5066:	d502      	bpl.n	506e <_puts_r+0x4a>
    5068:	6923      	ldr	r3, [r4, #16]
    506a:	2b00      	cmp	r3, #0
    506c:	d111      	bne.n	5092 <_puts_r+0x6e>
    506e:	0021      	movs	r1, r4
    5070:	0028      	movs	r0, r5
    5072:	f000 f955 	bl	5320 <__swsetup_r>
    5076:	2800      	cmp	r0, #0
    5078:	d00b      	beq.n	5092 <_puts_r+0x6e>
    507a:	2001      	movs	r0, #1
    507c:	4240      	negs	r0, r0
    507e:	e02b      	b.n	50d8 <_puts_r+0xb4>
    5080:	3b01      	subs	r3, #1
    5082:	3601      	adds	r6, #1
    5084:	60a3      	str	r3, [r4, #8]
    5086:	2b00      	cmp	r3, #0
    5088:	db08      	blt.n	509c <_puts_r+0x78>
    508a:	6823      	ldr	r3, [r4, #0]
    508c:	1c5a      	adds	r2, r3, #1
    508e:	6022      	str	r2, [r4, #0]
    5090:	7019      	strb	r1, [r3, #0]
    5092:	7831      	ldrb	r1, [r6, #0]
    5094:	68a3      	ldr	r3, [r4, #8]
    5096:	2900      	cmp	r1, #0
    5098:	d1f2      	bne.n	5080 <_puts_r+0x5c>
    509a:	e00b      	b.n	50b4 <_puts_r+0x90>
    509c:	69a2      	ldr	r2, [r4, #24]
    509e:	4293      	cmp	r3, r2
    50a0:	db01      	blt.n	50a6 <_puts_r+0x82>
    50a2:	290a      	cmp	r1, #10
    50a4:	d1f1      	bne.n	508a <_puts_r+0x66>
    50a6:	0022      	movs	r2, r4
    50a8:	0028      	movs	r0, r5
    50aa:	f000 f8e1 	bl	5270 <__swbuf_r>
    50ae:	1c43      	adds	r3, r0, #1
    50b0:	d1ef      	bne.n	5092 <_puts_r+0x6e>
    50b2:	e7e2      	b.n	507a <_puts_r+0x56>
    50b4:	3b01      	subs	r3, #1
    50b6:	60a3      	str	r3, [r4, #8]
    50b8:	2b00      	cmp	r3, #0
    50ba:	da08      	bge.n	50ce <_puts_r+0xaa>
    50bc:	0022      	movs	r2, r4
    50be:	310a      	adds	r1, #10
    50c0:	0028      	movs	r0, r5
    50c2:	f000 f8d5 	bl	5270 <__swbuf_r>
    50c6:	1c43      	adds	r3, r0, #1
    50c8:	d0d7      	beq.n	507a <_puts_r+0x56>
    50ca:	200a      	movs	r0, #10
    50cc:	e004      	b.n	50d8 <_puts_r+0xb4>
    50ce:	200a      	movs	r0, #10
    50d0:	6823      	ldr	r3, [r4, #0]
    50d2:	1c5a      	adds	r2, r3, #1
    50d4:	6022      	str	r2, [r4, #0]
    50d6:	7018      	strb	r0, [r3, #0]
    50d8:	bd70      	pop	{r4, r5, r6, pc}
    50da:	46c0      	nop			; (mov r8, r8)
    50dc:	000062ec 	.word	0x000062ec
    50e0:	0000630c 	.word	0x0000630c
    50e4:	0000632c 	.word	0x0000632c

000050e8 <puts>:
    50e8:	b510      	push	{r4, lr}
    50ea:	4b03      	ldr	r3, [pc, #12]	; (50f8 <puts+0x10>)
    50ec:	0001      	movs	r1, r0
    50ee:	6818      	ldr	r0, [r3, #0]
    50f0:	f7ff ff98 	bl	5024 <_puts_r>
    50f4:	bd10      	pop	{r4, pc}
    50f6:	46c0      	nop			; (mov r8, r8)
    50f8:	20000078 	.word	0x20000078

000050fc <setbuf>:
    50fc:	424a      	negs	r2, r1
    50fe:	414a      	adcs	r2, r1
    5100:	2380      	movs	r3, #128	; 0x80
    5102:	b510      	push	{r4, lr}
    5104:	0052      	lsls	r2, r2, #1
    5106:	00db      	lsls	r3, r3, #3
    5108:	f000 f802 	bl	5110 <setvbuf>
    510c:	bd10      	pop	{r4, pc}
	...

00005110 <setvbuf>:
    5110:	b5f0      	push	{r4, r5, r6, r7, lr}
    5112:	001d      	movs	r5, r3
    5114:	4b51      	ldr	r3, [pc, #324]	; (525c <setvbuf+0x14c>)
    5116:	b085      	sub	sp, #20
    5118:	681e      	ldr	r6, [r3, #0]
    511a:	0004      	movs	r4, r0
    511c:	000f      	movs	r7, r1
    511e:	9200      	str	r2, [sp, #0]
    5120:	2e00      	cmp	r6, #0
    5122:	d005      	beq.n	5130 <setvbuf+0x20>
    5124:	69b3      	ldr	r3, [r6, #24]
    5126:	2b00      	cmp	r3, #0
    5128:	d102      	bne.n	5130 <setvbuf+0x20>
    512a:	0030      	movs	r0, r6
    512c:	f000 fa62 	bl	55f4 <__sinit>
    5130:	4b4b      	ldr	r3, [pc, #300]	; (5260 <setvbuf+0x150>)
    5132:	429c      	cmp	r4, r3
    5134:	d101      	bne.n	513a <setvbuf+0x2a>
    5136:	6874      	ldr	r4, [r6, #4]
    5138:	e008      	b.n	514c <setvbuf+0x3c>
    513a:	4b4a      	ldr	r3, [pc, #296]	; (5264 <setvbuf+0x154>)
    513c:	429c      	cmp	r4, r3
    513e:	d101      	bne.n	5144 <setvbuf+0x34>
    5140:	68b4      	ldr	r4, [r6, #8]
    5142:	e003      	b.n	514c <setvbuf+0x3c>
    5144:	4b48      	ldr	r3, [pc, #288]	; (5268 <setvbuf+0x158>)
    5146:	429c      	cmp	r4, r3
    5148:	d100      	bne.n	514c <setvbuf+0x3c>
    514a:	68f4      	ldr	r4, [r6, #12]
    514c:	9b00      	ldr	r3, [sp, #0]
    514e:	2b02      	cmp	r3, #2
    5150:	d005      	beq.n	515e <setvbuf+0x4e>
    5152:	2b01      	cmp	r3, #1
    5154:	d900      	bls.n	5158 <setvbuf+0x48>
    5156:	e07c      	b.n	5252 <setvbuf+0x142>
    5158:	2d00      	cmp	r5, #0
    515a:	da00      	bge.n	515e <setvbuf+0x4e>
    515c:	e079      	b.n	5252 <setvbuf+0x142>
    515e:	0021      	movs	r1, r4
    5160:	0030      	movs	r0, r6
    5162:	f000 f9d9 	bl	5518 <_fflush_r>
    5166:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5168:	2900      	cmp	r1, #0
    516a:	d008      	beq.n	517e <setvbuf+0x6e>
    516c:	0023      	movs	r3, r4
    516e:	3344      	adds	r3, #68	; 0x44
    5170:	4299      	cmp	r1, r3
    5172:	d002      	beq.n	517a <setvbuf+0x6a>
    5174:	0030      	movs	r0, r6
    5176:	f000 fb3f 	bl	57f8 <_free_r>
    517a:	2300      	movs	r3, #0
    517c:	6363      	str	r3, [r4, #52]	; 0x34
    517e:	2300      	movs	r3, #0
    5180:	61a3      	str	r3, [r4, #24]
    5182:	6063      	str	r3, [r4, #4]
    5184:	89a3      	ldrh	r3, [r4, #12]
    5186:	061b      	lsls	r3, r3, #24
    5188:	d503      	bpl.n	5192 <setvbuf+0x82>
    518a:	6921      	ldr	r1, [r4, #16]
    518c:	0030      	movs	r0, r6
    518e:	f000 fb33 	bl	57f8 <_free_r>
    5192:	89a2      	ldrh	r2, [r4, #12]
    5194:	4b35      	ldr	r3, [pc, #212]	; (526c <setvbuf+0x15c>)
    5196:	4013      	ands	r3, r2
    5198:	81a3      	strh	r3, [r4, #12]
    519a:	9b00      	ldr	r3, [sp, #0]
    519c:	2b02      	cmp	r3, #2
    519e:	d021      	beq.n	51e4 <setvbuf+0xd4>
    51a0:	ab03      	add	r3, sp, #12
    51a2:	aa02      	add	r2, sp, #8
    51a4:	0021      	movs	r1, r4
    51a6:	0030      	movs	r0, r6
    51a8:	f000 fab8 	bl	571c <__swhatbuf_r>
    51ac:	89a3      	ldrh	r3, [r4, #12]
    51ae:	4318      	orrs	r0, r3
    51b0:	81a0      	strh	r0, [r4, #12]
    51b2:	2d00      	cmp	r5, #0
    51b4:	d101      	bne.n	51ba <setvbuf+0xaa>
    51b6:	9d02      	ldr	r5, [sp, #8]
    51b8:	e001      	b.n	51be <setvbuf+0xae>
    51ba:	2f00      	cmp	r7, #0
    51bc:	d125      	bne.n	520a <setvbuf+0xfa>
    51be:	0028      	movs	r0, r5
    51c0:	f000 fb10 	bl	57e4 <malloc>
    51c4:	9501      	str	r5, [sp, #4]
    51c6:	1e07      	subs	r7, r0, #0
    51c8:	d11a      	bne.n	5200 <setvbuf+0xf0>
    51ca:	9b02      	ldr	r3, [sp, #8]
    51cc:	9301      	str	r3, [sp, #4]
    51ce:	42ab      	cmp	r3, r5
    51d0:	d102      	bne.n	51d8 <setvbuf+0xc8>
    51d2:	2001      	movs	r0, #1
    51d4:	4240      	negs	r0, r0
    51d6:	e006      	b.n	51e6 <setvbuf+0xd6>
    51d8:	9801      	ldr	r0, [sp, #4]
    51da:	f000 fb03 	bl	57e4 <malloc>
    51de:	1e07      	subs	r7, r0, #0
    51e0:	d10e      	bne.n	5200 <setvbuf+0xf0>
    51e2:	e7f6      	b.n	51d2 <setvbuf+0xc2>
    51e4:	2000      	movs	r0, #0
    51e6:	2202      	movs	r2, #2
    51e8:	89a3      	ldrh	r3, [r4, #12]
    51ea:	4313      	orrs	r3, r2
    51ec:	81a3      	strh	r3, [r4, #12]
    51ee:	2300      	movs	r3, #0
    51f0:	60a3      	str	r3, [r4, #8]
    51f2:	0023      	movs	r3, r4
    51f4:	3347      	adds	r3, #71	; 0x47
    51f6:	6023      	str	r3, [r4, #0]
    51f8:	6123      	str	r3, [r4, #16]
    51fa:	2301      	movs	r3, #1
    51fc:	6163      	str	r3, [r4, #20]
    51fe:	e02a      	b.n	5256 <setvbuf+0x146>
    5200:	2280      	movs	r2, #128	; 0x80
    5202:	89a3      	ldrh	r3, [r4, #12]
    5204:	9d01      	ldr	r5, [sp, #4]
    5206:	4313      	orrs	r3, r2
    5208:	81a3      	strh	r3, [r4, #12]
    520a:	69b3      	ldr	r3, [r6, #24]
    520c:	2b00      	cmp	r3, #0
    520e:	d102      	bne.n	5216 <setvbuf+0x106>
    5210:	0030      	movs	r0, r6
    5212:	f000 f9ef 	bl	55f4 <__sinit>
    5216:	9b00      	ldr	r3, [sp, #0]
    5218:	2b01      	cmp	r3, #1
    521a:	d103      	bne.n	5224 <setvbuf+0x114>
    521c:	89a3      	ldrh	r3, [r4, #12]
    521e:	9a00      	ldr	r2, [sp, #0]
    5220:	431a      	orrs	r2, r3
    5222:	81a2      	strh	r2, [r4, #12]
    5224:	2308      	movs	r3, #8
    5226:	89a2      	ldrh	r2, [r4, #12]
    5228:	6027      	str	r7, [r4, #0]
    522a:	4013      	ands	r3, r2
    522c:	6127      	str	r7, [r4, #16]
    522e:	6165      	str	r5, [r4, #20]
    5230:	1e18      	subs	r0, r3, #0
    5232:	d00c      	beq.n	524e <setvbuf+0x13e>
    5234:	2301      	movs	r3, #1
    5236:	401a      	ands	r2, r3
    5238:	2300      	movs	r3, #0
    523a:	1e10      	subs	r0, r2, #0
    523c:	4298      	cmp	r0, r3
    523e:	d004      	beq.n	524a <setvbuf+0x13a>
    5240:	426d      	negs	r5, r5
    5242:	60a3      	str	r3, [r4, #8]
    5244:	61a5      	str	r5, [r4, #24]
    5246:	0018      	movs	r0, r3
    5248:	e005      	b.n	5256 <setvbuf+0x146>
    524a:	60a5      	str	r5, [r4, #8]
    524c:	e003      	b.n	5256 <setvbuf+0x146>
    524e:	60a3      	str	r3, [r4, #8]
    5250:	e001      	b.n	5256 <setvbuf+0x146>
    5252:	2001      	movs	r0, #1
    5254:	4240      	negs	r0, r0
    5256:	b005      	add	sp, #20
    5258:	bdf0      	pop	{r4, r5, r6, r7, pc}
    525a:	46c0      	nop			; (mov r8, r8)
    525c:	20000078 	.word	0x20000078
    5260:	000062ec 	.word	0x000062ec
    5264:	0000630c 	.word	0x0000630c
    5268:	0000632c 	.word	0x0000632c
    526c:	fffff35c 	.word	0xfffff35c

00005270 <__swbuf_r>:
    5270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5272:	0005      	movs	r5, r0
    5274:	000f      	movs	r7, r1
    5276:	0014      	movs	r4, r2
    5278:	2800      	cmp	r0, #0
    527a:	d004      	beq.n	5286 <__swbuf_r+0x16>
    527c:	6983      	ldr	r3, [r0, #24]
    527e:	2b00      	cmp	r3, #0
    5280:	d101      	bne.n	5286 <__swbuf_r+0x16>
    5282:	f000 f9b7 	bl	55f4 <__sinit>
    5286:	4b23      	ldr	r3, [pc, #140]	; (5314 <__swbuf_r+0xa4>)
    5288:	429c      	cmp	r4, r3
    528a:	d101      	bne.n	5290 <__swbuf_r+0x20>
    528c:	686c      	ldr	r4, [r5, #4]
    528e:	e008      	b.n	52a2 <__swbuf_r+0x32>
    5290:	4b21      	ldr	r3, [pc, #132]	; (5318 <__swbuf_r+0xa8>)
    5292:	429c      	cmp	r4, r3
    5294:	d101      	bne.n	529a <__swbuf_r+0x2a>
    5296:	68ac      	ldr	r4, [r5, #8]
    5298:	e003      	b.n	52a2 <__swbuf_r+0x32>
    529a:	4b20      	ldr	r3, [pc, #128]	; (531c <__swbuf_r+0xac>)
    529c:	429c      	cmp	r4, r3
    529e:	d100      	bne.n	52a2 <__swbuf_r+0x32>
    52a0:	68ec      	ldr	r4, [r5, #12]
    52a2:	69a3      	ldr	r3, [r4, #24]
    52a4:	60a3      	str	r3, [r4, #8]
    52a6:	89a3      	ldrh	r3, [r4, #12]
    52a8:	071b      	lsls	r3, r3, #28
    52aa:	d50a      	bpl.n	52c2 <__swbuf_r+0x52>
    52ac:	6923      	ldr	r3, [r4, #16]
    52ae:	2b00      	cmp	r3, #0
    52b0:	d007      	beq.n	52c2 <__swbuf_r+0x52>
    52b2:	6823      	ldr	r3, [r4, #0]
    52b4:	6922      	ldr	r2, [r4, #16]
    52b6:	b2fe      	uxtb	r6, r7
    52b8:	1a98      	subs	r0, r3, r2
    52ba:	6963      	ldr	r3, [r4, #20]
    52bc:	4298      	cmp	r0, r3
    52be:	db0f      	blt.n	52e0 <__swbuf_r+0x70>
    52c0:	e008      	b.n	52d4 <__swbuf_r+0x64>
    52c2:	0021      	movs	r1, r4
    52c4:	0028      	movs	r0, r5
    52c6:	f000 f82b 	bl	5320 <__swsetup_r>
    52ca:	2800      	cmp	r0, #0
    52cc:	d0f1      	beq.n	52b2 <__swbuf_r+0x42>
    52ce:	2001      	movs	r0, #1
    52d0:	4240      	negs	r0, r0
    52d2:	e01d      	b.n	5310 <__swbuf_r+0xa0>
    52d4:	0021      	movs	r1, r4
    52d6:	0028      	movs	r0, r5
    52d8:	f000 f91e 	bl	5518 <_fflush_r>
    52dc:	2800      	cmp	r0, #0
    52de:	d1f6      	bne.n	52ce <__swbuf_r+0x5e>
    52e0:	68a3      	ldr	r3, [r4, #8]
    52e2:	3001      	adds	r0, #1
    52e4:	3b01      	subs	r3, #1
    52e6:	60a3      	str	r3, [r4, #8]
    52e8:	6823      	ldr	r3, [r4, #0]
    52ea:	1c5a      	adds	r2, r3, #1
    52ec:	6022      	str	r2, [r4, #0]
    52ee:	701f      	strb	r7, [r3, #0]
    52f0:	6963      	ldr	r3, [r4, #20]
    52f2:	4298      	cmp	r0, r3
    52f4:	d005      	beq.n	5302 <__swbuf_r+0x92>
    52f6:	89a3      	ldrh	r3, [r4, #12]
    52f8:	0030      	movs	r0, r6
    52fa:	07db      	lsls	r3, r3, #31
    52fc:	d508      	bpl.n	5310 <__swbuf_r+0xa0>
    52fe:	2e0a      	cmp	r6, #10
    5300:	d106      	bne.n	5310 <__swbuf_r+0xa0>
    5302:	0021      	movs	r1, r4
    5304:	0028      	movs	r0, r5
    5306:	f000 f907 	bl	5518 <_fflush_r>
    530a:	2800      	cmp	r0, #0
    530c:	d1df      	bne.n	52ce <__swbuf_r+0x5e>
    530e:	0030      	movs	r0, r6
    5310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5312:	46c0      	nop			; (mov r8, r8)
    5314:	000062ec 	.word	0x000062ec
    5318:	0000630c 	.word	0x0000630c
    531c:	0000632c 	.word	0x0000632c

00005320 <__swsetup_r>:
    5320:	4b36      	ldr	r3, [pc, #216]	; (53fc <__swsetup_r+0xdc>)
    5322:	b570      	push	{r4, r5, r6, lr}
    5324:	681d      	ldr	r5, [r3, #0]
    5326:	0006      	movs	r6, r0
    5328:	000c      	movs	r4, r1
    532a:	2d00      	cmp	r5, #0
    532c:	d005      	beq.n	533a <__swsetup_r+0x1a>
    532e:	69ab      	ldr	r3, [r5, #24]
    5330:	2b00      	cmp	r3, #0
    5332:	d102      	bne.n	533a <__swsetup_r+0x1a>
    5334:	0028      	movs	r0, r5
    5336:	f000 f95d 	bl	55f4 <__sinit>
    533a:	4b31      	ldr	r3, [pc, #196]	; (5400 <__swsetup_r+0xe0>)
    533c:	429c      	cmp	r4, r3
    533e:	d101      	bne.n	5344 <__swsetup_r+0x24>
    5340:	686c      	ldr	r4, [r5, #4]
    5342:	e008      	b.n	5356 <__swsetup_r+0x36>
    5344:	4b2f      	ldr	r3, [pc, #188]	; (5404 <__swsetup_r+0xe4>)
    5346:	429c      	cmp	r4, r3
    5348:	d101      	bne.n	534e <__swsetup_r+0x2e>
    534a:	68ac      	ldr	r4, [r5, #8]
    534c:	e003      	b.n	5356 <__swsetup_r+0x36>
    534e:	4b2e      	ldr	r3, [pc, #184]	; (5408 <__swsetup_r+0xe8>)
    5350:	429c      	cmp	r4, r3
    5352:	d100      	bne.n	5356 <__swsetup_r+0x36>
    5354:	68ec      	ldr	r4, [r5, #12]
    5356:	220c      	movs	r2, #12
    5358:	5ea3      	ldrsh	r3, [r4, r2]
    535a:	b29a      	uxth	r2, r3
    535c:	0711      	lsls	r1, r2, #28
    535e:	d423      	bmi.n	53a8 <__swsetup_r+0x88>
    5360:	06d1      	lsls	r1, r2, #27
    5362:	d407      	bmi.n	5374 <__swsetup_r+0x54>
    5364:	2209      	movs	r2, #9
    5366:	2001      	movs	r0, #1
    5368:	6032      	str	r2, [r6, #0]
    536a:	3237      	adds	r2, #55	; 0x37
    536c:	4313      	orrs	r3, r2
    536e:	81a3      	strh	r3, [r4, #12]
    5370:	4240      	negs	r0, r0
    5372:	e042      	b.n	53fa <__swsetup_r+0xda>
    5374:	0753      	lsls	r3, r2, #29
    5376:	d513      	bpl.n	53a0 <__swsetup_r+0x80>
    5378:	6b61      	ldr	r1, [r4, #52]	; 0x34
    537a:	2900      	cmp	r1, #0
    537c:	d008      	beq.n	5390 <__swsetup_r+0x70>
    537e:	0023      	movs	r3, r4
    5380:	3344      	adds	r3, #68	; 0x44
    5382:	4299      	cmp	r1, r3
    5384:	d002      	beq.n	538c <__swsetup_r+0x6c>
    5386:	0030      	movs	r0, r6
    5388:	f000 fa36 	bl	57f8 <_free_r>
    538c:	2300      	movs	r3, #0
    538e:	6363      	str	r3, [r4, #52]	; 0x34
    5390:	2224      	movs	r2, #36	; 0x24
    5392:	89a3      	ldrh	r3, [r4, #12]
    5394:	4393      	bics	r3, r2
    5396:	81a3      	strh	r3, [r4, #12]
    5398:	2300      	movs	r3, #0
    539a:	6063      	str	r3, [r4, #4]
    539c:	6923      	ldr	r3, [r4, #16]
    539e:	6023      	str	r3, [r4, #0]
    53a0:	2208      	movs	r2, #8
    53a2:	89a3      	ldrh	r3, [r4, #12]
    53a4:	4313      	orrs	r3, r2
    53a6:	81a3      	strh	r3, [r4, #12]
    53a8:	6923      	ldr	r3, [r4, #16]
    53aa:	2b00      	cmp	r3, #0
    53ac:	d10b      	bne.n	53c6 <__swsetup_r+0xa6>
    53ae:	23a0      	movs	r3, #160	; 0xa0
    53b0:	89a2      	ldrh	r2, [r4, #12]
    53b2:	009b      	lsls	r3, r3, #2
    53b4:	4013      	ands	r3, r2
    53b6:	2280      	movs	r2, #128	; 0x80
    53b8:	0092      	lsls	r2, r2, #2
    53ba:	4293      	cmp	r3, r2
    53bc:	d003      	beq.n	53c6 <__swsetup_r+0xa6>
    53be:	0021      	movs	r1, r4
    53c0:	0030      	movs	r0, r6
    53c2:	f000 f9d1 	bl	5768 <__smakebuf_r>
    53c6:	2301      	movs	r3, #1
    53c8:	89a2      	ldrh	r2, [r4, #12]
    53ca:	4013      	ands	r3, r2
    53cc:	d005      	beq.n	53da <__swsetup_r+0xba>
    53ce:	2300      	movs	r3, #0
    53d0:	60a3      	str	r3, [r4, #8]
    53d2:	6963      	ldr	r3, [r4, #20]
    53d4:	425b      	negs	r3, r3
    53d6:	61a3      	str	r3, [r4, #24]
    53d8:	e003      	b.n	53e2 <__swsetup_r+0xc2>
    53da:	0792      	lsls	r2, r2, #30
    53dc:	d400      	bmi.n	53e0 <__swsetup_r+0xc0>
    53de:	6963      	ldr	r3, [r4, #20]
    53e0:	60a3      	str	r3, [r4, #8]
    53e2:	2000      	movs	r0, #0
    53e4:	6923      	ldr	r3, [r4, #16]
    53e6:	4283      	cmp	r3, r0
    53e8:	d107      	bne.n	53fa <__swsetup_r+0xda>
    53ea:	220c      	movs	r2, #12
    53ec:	5ea3      	ldrsh	r3, [r4, r2]
    53ee:	061a      	lsls	r2, r3, #24
    53f0:	d503      	bpl.n	53fa <__swsetup_r+0xda>
    53f2:	2240      	movs	r2, #64	; 0x40
    53f4:	4313      	orrs	r3, r2
    53f6:	81a3      	strh	r3, [r4, #12]
    53f8:	3801      	subs	r0, #1
    53fa:	bd70      	pop	{r4, r5, r6, pc}
    53fc:	20000078 	.word	0x20000078
    5400:	000062ec 	.word	0x000062ec
    5404:	0000630c 	.word	0x0000630c
    5408:	0000632c 	.word	0x0000632c

0000540c <__sflush_r>:
    540c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    540e:	898a      	ldrh	r2, [r1, #12]
    5410:	0005      	movs	r5, r0
    5412:	000c      	movs	r4, r1
    5414:	0713      	lsls	r3, r2, #28
    5416:	d45a      	bmi.n	54ce <__sflush_r+0xc2>
    5418:	684b      	ldr	r3, [r1, #4]
    541a:	2b00      	cmp	r3, #0
    541c:	dc02      	bgt.n	5424 <__sflush_r+0x18>
    541e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5420:	2b00      	cmp	r3, #0
    5422:	dd19      	ble.n	5458 <__sflush_r+0x4c>
    5424:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5426:	2f00      	cmp	r7, #0
    5428:	d016      	beq.n	5458 <__sflush_r+0x4c>
    542a:	2300      	movs	r3, #0
    542c:	682e      	ldr	r6, [r5, #0]
    542e:	602b      	str	r3, [r5, #0]
    5430:	2380      	movs	r3, #128	; 0x80
    5432:	015b      	lsls	r3, r3, #5
    5434:	401a      	ands	r2, r3
    5436:	d001      	beq.n	543c <__sflush_r+0x30>
    5438:	6d60      	ldr	r0, [r4, #84]	; 0x54
    543a:	e014      	b.n	5466 <__sflush_r+0x5a>
    543c:	2301      	movs	r3, #1
    543e:	6a21      	ldr	r1, [r4, #32]
    5440:	0028      	movs	r0, r5
    5442:	47b8      	blx	r7
    5444:	1c43      	adds	r3, r0, #1
    5446:	d10e      	bne.n	5466 <__sflush_r+0x5a>
    5448:	682b      	ldr	r3, [r5, #0]
    544a:	2b00      	cmp	r3, #0
    544c:	d00b      	beq.n	5466 <__sflush_r+0x5a>
    544e:	2b1d      	cmp	r3, #29
    5450:	d001      	beq.n	5456 <__sflush_r+0x4a>
    5452:	2b16      	cmp	r3, #22
    5454:	d102      	bne.n	545c <__sflush_r+0x50>
    5456:	602e      	str	r6, [r5, #0]
    5458:	2000      	movs	r0, #0
    545a:	e05a      	b.n	5512 <__sflush_r+0x106>
    545c:	2240      	movs	r2, #64	; 0x40
    545e:	89a3      	ldrh	r3, [r4, #12]
    5460:	4313      	orrs	r3, r2
    5462:	81a3      	strh	r3, [r4, #12]
    5464:	e055      	b.n	5512 <__sflush_r+0x106>
    5466:	89a3      	ldrh	r3, [r4, #12]
    5468:	075b      	lsls	r3, r3, #29
    546a:	d506      	bpl.n	547a <__sflush_r+0x6e>
    546c:	6863      	ldr	r3, [r4, #4]
    546e:	1ac0      	subs	r0, r0, r3
    5470:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5472:	2b00      	cmp	r3, #0
    5474:	d001      	beq.n	547a <__sflush_r+0x6e>
    5476:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5478:	1ac0      	subs	r0, r0, r3
    547a:	2300      	movs	r3, #0
    547c:	0002      	movs	r2, r0
    547e:	6a21      	ldr	r1, [r4, #32]
    5480:	0028      	movs	r0, r5
    5482:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    5484:	47b8      	blx	r7
    5486:	89a3      	ldrh	r3, [r4, #12]
    5488:	1c42      	adds	r2, r0, #1
    548a:	d106      	bne.n	549a <__sflush_r+0x8e>
    548c:	6829      	ldr	r1, [r5, #0]
    548e:	291d      	cmp	r1, #29
    5490:	d83a      	bhi.n	5508 <__sflush_r+0xfc>
    5492:	4a20      	ldr	r2, [pc, #128]	; (5514 <__sflush_r+0x108>)
    5494:	40ca      	lsrs	r2, r1
    5496:	07d2      	lsls	r2, r2, #31
    5498:	d536      	bpl.n	5508 <__sflush_r+0xfc>
    549a:	2200      	movs	r2, #0
    549c:	6062      	str	r2, [r4, #4]
    549e:	6922      	ldr	r2, [r4, #16]
    54a0:	6022      	str	r2, [r4, #0]
    54a2:	04db      	lsls	r3, r3, #19
    54a4:	d505      	bpl.n	54b2 <__sflush_r+0xa6>
    54a6:	1c43      	adds	r3, r0, #1
    54a8:	d102      	bne.n	54b0 <__sflush_r+0xa4>
    54aa:	682b      	ldr	r3, [r5, #0]
    54ac:	2b00      	cmp	r3, #0
    54ae:	d100      	bne.n	54b2 <__sflush_r+0xa6>
    54b0:	6560      	str	r0, [r4, #84]	; 0x54
    54b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    54b4:	602e      	str	r6, [r5, #0]
    54b6:	2900      	cmp	r1, #0
    54b8:	d0ce      	beq.n	5458 <__sflush_r+0x4c>
    54ba:	0023      	movs	r3, r4
    54bc:	3344      	adds	r3, #68	; 0x44
    54be:	4299      	cmp	r1, r3
    54c0:	d002      	beq.n	54c8 <__sflush_r+0xbc>
    54c2:	0028      	movs	r0, r5
    54c4:	f000 f998 	bl	57f8 <_free_r>
    54c8:	2000      	movs	r0, #0
    54ca:	6360      	str	r0, [r4, #52]	; 0x34
    54cc:	e021      	b.n	5512 <__sflush_r+0x106>
    54ce:	690f      	ldr	r7, [r1, #16]
    54d0:	2f00      	cmp	r7, #0
    54d2:	d0c1      	beq.n	5458 <__sflush_r+0x4c>
    54d4:	680b      	ldr	r3, [r1, #0]
    54d6:	600f      	str	r7, [r1, #0]
    54d8:	1bdb      	subs	r3, r3, r7
    54da:	9301      	str	r3, [sp, #4]
    54dc:	2300      	movs	r3, #0
    54de:	0792      	lsls	r2, r2, #30
    54e0:	d100      	bne.n	54e4 <__sflush_r+0xd8>
    54e2:	694b      	ldr	r3, [r1, #20]
    54e4:	60a3      	str	r3, [r4, #8]
    54e6:	e003      	b.n	54f0 <__sflush_r+0xe4>
    54e8:	9b01      	ldr	r3, [sp, #4]
    54ea:	183f      	adds	r7, r7, r0
    54ec:	1a1b      	subs	r3, r3, r0
    54ee:	9301      	str	r3, [sp, #4]
    54f0:	9b01      	ldr	r3, [sp, #4]
    54f2:	2b00      	cmp	r3, #0
    54f4:	ddb0      	ble.n	5458 <__sflush_r+0x4c>
    54f6:	9b01      	ldr	r3, [sp, #4]
    54f8:	003a      	movs	r2, r7
    54fa:	6a21      	ldr	r1, [r4, #32]
    54fc:	0028      	movs	r0, r5
    54fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5500:	47b0      	blx	r6
    5502:	2800      	cmp	r0, #0
    5504:	dcf0      	bgt.n	54e8 <__sflush_r+0xdc>
    5506:	89a3      	ldrh	r3, [r4, #12]
    5508:	2240      	movs	r2, #64	; 0x40
    550a:	2001      	movs	r0, #1
    550c:	4313      	orrs	r3, r2
    550e:	81a3      	strh	r3, [r4, #12]
    5510:	4240      	negs	r0, r0
    5512:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5514:	20400001 	.word	0x20400001

00005518 <_fflush_r>:
    5518:	690b      	ldr	r3, [r1, #16]
    551a:	b570      	push	{r4, r5, r6, lr}
    551c:	0005      	movs	r5, r0
    551e:	000c      	movs	r4, r1
    5520:	2b00      	cmp	r3, #0
    5522:	d101      	bne.n	5528 <_fflush_r+0x10>
    5524:	2000      	movs	r0, #0
    5526:	e01c      	b.n	5562 <_fflush_r+0x4a>
    5528:	2800      	cmp	r0, #0
    552a:	d004      	beq.n	5536 <_fflush_r+0x1e>
    552c:	6983      	ldr	r3, [r0, #24]
    552e:	2b00      	cmp	r3, #0
    5530:	d101      	bne.n	5536 <_fflush_r+0x1e>
    5532:	f000 f85f 	bl	55f4 <__sinit>
    5536:	4b0b      	ldr	r3, [pc, #44]	; (5564 <_fflush_r+0x4c>)
    5538:	429c      	cmp	r4, r3
    553a:	d101      	bne.n	5540 <_fflush_r+0x28>
    553c:	686c      	ldr	r4, [r5, #4]
    553e:	e008      	b.n	5552 <_fflush_r+0x3a>
    5540:	4b09      	ldr	r3, [pc, #36]	; (5568 <_fflush_r+0x50>)
    5542:	429c      	cmp	r4, r3
    5544:	d101      	bne.n	554a <_fflush_r+0x32>
    5546:	68ac      	ldr	r4, [r5, #8]
    5548:	e003      	b.n	5552 <_fflush_r+0x3a>
    554a:	4b08      	ldr	r3, [pc, #32]	; (556c <_fflush_r+0x54>)
    554c:	429c      	cmp	r4, r3
    554e:	d100      	bne.n	5552 <_fflush_r+0x3a>
    5550:	68ec      	ldr	r4, [r5, #12]
    5552:	220c      	movs	r2, #12
    5554:	5ea3      	ldrsh	r3, [r4, r2]
    5556:	2b00      	cmp	r3, #0
    5558:	d0e4      	beq.n	5524 <_fflush_r+0xc>
    555a:	0021      	movs	r1, r4
    555c:	0028      	movs	r0, r5
    555e:	f7ff ff55 	bl	540c <__sflush_r>
    5562:	bd70      	pop	{r4, r5, r6, pc}
    5564:	000062ec 	.word	0x000062ec
    5568:	0000630c 	.word	0x0000630c
    556c:	0000632c 	.word	0x0000632c

00005570 <_cleanup_r>:
    5570:	b510      	push	{r4, lr}
    5572:	4902      	ldr	r1, [pc, #8]	; (557c <_cleanup_r+0xc>)
    5574:	f000 f8b0 	bl	56d8 <_fwalk_reent>
    5578:	bd10      	pop	{r4, pc}
    557a:	46c0      	nop			; (mov r8, r8)
    557c:	00005519 	.word	0x00005519

00005580 <std.isra.0>:
    5580:	2300      	movs	r3, #0
    5582:	b510      	push	{r4, lr}
    5584:	0004      	movs	r4, r0
    5586:	6003      	str	r3, [r0, #0]
    5588:	6043      	str	r3, [r0, #4]
    558a:	6083      	str	r3, [r0, #8]
    558c:	8181      	strh	r1, [r0, #12]
    558e:	6643      	str	r3, [r0, #100]	; 0x64
    5590:	81c2      	strh	r2, [r0, #14]
    5592:	6103      	str	r3, [r0, #16]
    5594:	6143      	str	r3, [r0, #20]
    5596:	6183      	str	r3, [r0, #24]
    5598:	0019      	movs	r1, r3
    559a:	2208      	movs	r2, #8
    559c:	305c      	adds	r0, #92	; 0x5c
    559e:	f7ff fd1e 	bl	4fde <memset>
    55a2:	4b05      	ldr	r3, [pc, #20]	; (55b8 <std.isra.0+0x38>)
    55a4:	6224      	str	r4, [r4, #32]
    55a6:	6263      	str	r3, [r4, #36]	; 0x24
    55a8:	4b04      	ldr	r3, [pc, #16]	; (55bc <std.isra.0+0x3c>)
    55aa:	62a3      	str	r3, [r4, #40]	; 0x28
    55ac:	4b04      	ldr	r3, [pc, #16]	; (55c0 <std.isra.0+0x40>)
    55ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    55b0:	4b04      	ldr	r3, [pc, #16]	; (55c4 <std.isra.0+0x44>)
    55b2:	6323      	str	r3, [r4, #48]	; 0x30
    55b4:	bd10      	pop	{r4, pc}
    55b6:	46c0      	nop			; (mov r8, r8)
    55b8:	00005efd 	.word	0x00005efd
    55bc:	00005f25 	.word	0x00005f25
    55c0:	00005f5d 	.word	0x00005f5d
    55c4:	00005f89 	.word	0x00005f89

000055c8 <__sfmoreglue>:
    55c8:	b570      	push	{r4, r5, r6, lr}
    55ca:	2568      	movs	r5, #104	; 0x68
    55cc:	1e4b      	subs	r3, r1, #1
    55ce:	435d      	muls	r5, r3
    55d0:	000e      	movs	r6, r1
    55d2:	0029      	movs	r1, r5
    55d4:	3174      	adds	r1, #116	; 0x74
    55d6:	f000 f955 	bl	5884 <_malloc_r>
    55da:	1e04      	subs	r4, r0, #0
    55dc:	d008      	beq.n	55f0 <__sfmoreglue+0x28>
    55de:	2100      	movs	r1, #0
    55e0:	002a      	movs	r2, r5
    55e2:	6001      	str	r1, [r0, #0]
    55e4:	6046      	str	r6, [r0, #4]
    55e6:	300c      	adds	r0, #12
    55e8:	60a0      	str	r0, [r4, #8]
    55ea:	3268      	adds	r2, #104	; 0x68
    55ec:	f7ff fcf7 	bl	4fde <memset>
    55f0:	0020      	movs	r0, r4
    55f2:	bd70      	pop	{r4, r5, r6, pc}

000055f4 <__sinit>:
    55f4:	6983      	ldr	r3, [r0, #24]
    55f6:	b513      	push	{r0, r1, r4, lr}
    55f8:	0004      	movs	r4, r0
    55fa:	2b00      	cmp	r3, #0
    55fc:	d128      	bne.n	5650 <__sinit+0x5c>
    55fe:	6483      	str	r3, [r0, #72]	; 0x48
    5600:	64c3      	str	r3, [r0, #76]	; 0x4c
    5602:	6503      	str	r3, [r0, #80]	; 0x50
    5604:	4b13      	ldr	r3, [pc, #76]	; (5654 <__sinit+0x60>)
    5606:	4a14      	ldr	r2, [pc, #80]	; (5658 <__sinit+0x64>)
    5608:	681b      	ldr	r3, [r3, #0]
    560a:	6282      	str	r2, [r0, #40]	; 0x28
    560c:	9301      	str	r3, [sp, #4]
    560e:	4298      	cmp	r0, r3
    5610:	d101      	bne.n	5616 <__sinit+0x22>
    5612:	2301      	movs	r3, #1
    5614:	6183      	str	r3, [r0, #24]
    5616:	0020      	movs	r0, r4
    5618:	f000 f820 	bl	565c <__sfp>
    561c:	6060      	str	r0, [r4, #4]
    561e:	0020      	movs	r0, r4
    5620:	f000 f81c 	bl	565c <__sfp>
    5624:	60a0      	str	r0, [r4, #8]
    5626:	0020      	movs	r0, r4
    5628:	f000 f818 	bl	565c <__sfp>
    562c:	2200      	movs	r2, #0
    562e:	60e0      	str	r0, [r4, #12]
    5630:	2104      	movs	r1, #4
    5632:	6860      	ldr	r0, [r4, #4]
    5634:	f7ff ffa4 	bl	5580 <std.isra.0>
    5638:	2201      	movs	r2, #1
    563a:	2109      	movs	r1, #9
    563c:	68a0      	ldr	r0, [r4, #8]
    563e:	f7ff ff9f 	bl	5580 <std.isra.0>
    5642:	2202      	movs	r2, #2
    5644:	2112      	movs	r1, #18
    5646:	68e0      	ldr	r0, [r4, #12]
    5648:	f7ff ff9a 	bl	5580 <std.isra.0>
    564c:	2301      	movs	r3, #1
    564e:	61a3      	str	r3, [r4, #24]
    5650:	bd13      	pop	{r0, r1, r4, pc}
    5652:	46c0      	nop			; (mov r8, r8)
    5654:	000062e8 	.word	0x000062e8
    5658:	00005571 	.word	0x00005571

0000565c <__sfp>:
    565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    565e:	4b1d      	ldr	r3, [pc, #116]	; (56d4 <__sfp+0x78>)
    5660:	0006      	movs	r6, r0
    5662:	681d      	ldr	r5, [r3, #0]
    5664:	69ab      	ldr	r3, [r5, #24]
    5666:	2b00      	cmp	r3, #0
    5668:	d102      	bne.n	5670 <__sfp+0x14>
    566a:	0028      	movs	r0, r5
    566c:	f7ff ffc2 	bl	55f4 <__sinit>
    5670:	3548      	adds	r5, #72	; 0x48
    5672:	68ac      	ldr	r4, [r5, #8]
    5674:	686b      	ldr	r3, [r5, #4]
    5676:	3b01      	subs	r3, #1
    5678:	d405      	bmi.n	5686 <__sfp+0x2a>
    567a:	220c      	movs	r2, #12
    567c:	5ea7      	ldrsh	r7, [r4, r2]
    567e:	2f00      	cmp	r7, #0
    5680:	d010      	beq.n	56a4 <__sfp+0x48>
    5682:	3468      	adds	r4, #104	; 0x68
    5684:	e7f7      	b.n	5676 <__sfp+0x1a>
    5686:	682b      	ldr	r3, [r5, #0]
    5688:	2b00      	cmp	r3, #0
    568a:	d001      	beq.n	5690 <__sfp+0x34>
    568c:	682d      	ldr	r5, [r5, #0]
    568e:	e7f0      	b.n	5672 <__sfp+0x16>
    5690:	2104      	movs	r1, #4
    5692:	0030      	movs	r0, r6
    5694:	f7ff ff98 	bl	55c8 <__sfmoreglue>
    5698:	6028      	str	r0, [r5, #0]
    569a:	2800      	cmp	r0, #0
    569c:	d1f6      	bne.n	568c <__sfp+0x30>
    569e:	230c      	movs	r3, #12
    56a0:	6033      	str	r3, [r6, #0]
    56a2:	e016      	b.n	56d2 <__sfp+0x76>
    56a4:	2301      	movs	r3, #1
    56a6:	0020      	movs	r0, r4
    56a8:	425b      	negs	r3, r3
    56aa:	81e3      	strh	r3, [r4, #14]
    56ac:	3302      	adds	r3, #2
    56ae:	81a3      	strh	r3, [r4, #12]
    56b0:	6667      	str	r7, [r4, #100]	; 0x64
    56b2:	6027      	str	r7, [r4, #0]
    56b4:	60a7      	str	r7, [r4, #8]
    56b6:	6067      	str	r7, [r4, #4]
    56b8:	6127      	str	r7, [r4, #16]
    56ba:	6167      	str	r7, [r4, #20]
    56bc:	61a7      	str	r7, [r4, #24]
    56be:	305c      	adds	r0, #92	; 0x5c
    56c0:	2208      	movs	r2, #8
    56c2:	0039      	movs	r1, r7
    56c4:	f7ff fc8b 	bl	4fde <memset>
    56c8:	0020      	movs	r0, r4
    56ca:	6367      	str	r7, [r4, #52]	; 0x34
    56cc:	63a7      	str	r7, [r4, #56]	; 0x38
    56ce:	64a7      	str	r7, [r4, #72]	; 0x48
    56d0:	64e7      	str	r7, [r4, #76]	; 0x4c
    56d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56d4:	000062e8 	.word	0x000062e8

000056d8 <_fwalk_reent>:
    56d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    56da:	0004      	movs	r4, r0
    56dc:	0007      	movs	r7, r0
    56de:	2600      	movs	r6, #0
    56e0:	9101      	str	r1, [sp, #4]
    56e2:	3448      	adds	r4, #72	; 0x48
    56e4:	2c00      	cmp	r4, #0
    56e6:	d016      	beq.n	5716 <_fwalk_reent+0x3e>
    56e8:	6863      	ldr	r3, [r4, #4]
    56ea:	68a5      	ldr	r5, [r4, #8]
    56ec:	9300      	str	r3, [sp, #0]
    56ee:	9b00      	ldr	r3, [sp, #0]
    56f0:	3b01      	subs	r3, #1
    56f2:	9300      	str	r3, [sp, #0]
    56f4:	d40d      	bmi.n	5712 <_fwalk_reent+0x3a>
    56f6:	89ab      	ldrh	r3, [r5, #12]
    56f8:	2b01      	cmp	r3, #1
    56fa:	d908      	bls.n	570e <_fwalk_reent+0x36>
    56fc:	220e      	movs	r2, #14
    56fe:	5eab      	ldrsh	r3, [r5, r2]
    5700:	3301      	adds	r3, #1
    5702:	d004      	beq.n	570e <_fwalk_reent+0x36>
    5704:	0029      	movs	r1, r5
    5706:	0038      	movs	r0, r7
    5708:	9b01      	ldr	r3, [sp, #4]
    570a:	4798      	blx	r3
    570c:	4306      	orrs	r6, r0
    570e:	3568      	adds	r5, #104	; 0x68
    5710:	e7ed      	b.n	56ee <_fwalk_reent+0x16>
    5712:	6824      	ldr	r4, [r4, #0]
    5714:	e7e6      	b.n	56e4 <_fwalk_reent+0xc>
    5716:	0030      	movs	r0, r6
    5718:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000571c <__swhatbuf_r>:
    571c:	b570      	push	{r4, r5, r6, lr}
    571e:	000e      	movs	r6, r1
    5720:	001d      	movs	r5, r3
    5722:	230e      	movs	r3, #14
    5724:	5ec9      	ldrsh	r1, [r1, r3]
    5726:	b090      	sub	sp, #64	; 0x40
    5728:	0014      	movs	r4, r2
    572a:	2900      	cmp	r1, #0
    572c:	da06      	bge.n	573c <__swhatbuf_r+0x20>
    572e:	2300      	movs	r3, #0
    5730:	602b      	str	r3, [r5, #0]
    5732:	89b3      	ldrh	r3, [r6, #12]
    5734:	061b      	lsls	r3, r3, #24
    5736:	d50f      	bpl.n	5758 <__swhatbuf_r+0x3c>
    5738:	2340      	movs	r3, #64	; 0x40
    573a:	e00f      	b.n	575c <__swhatbuf_r+0x40>
    573c:	aa01      	add	r2, sp, #4
    573e:	f000 fc4f 	bl	5fe0 <_fstat_r>
    5742:	2800      	cmp	r0, #0
    5744:	dbf3      	blt.n	572e <__swhatbuf_r+0x12>
    5746:	23f0      	movs	r3, #240	; 0xf0
    5748:	9a02      	ldr	r2, [sp, #8]
    574a:	021b      	lsls	r3, r3, #8
    574c:	4013      	ands	r3, r2
    574e:	4a05      	ldr	r2, [pc, #20]	; (5764 <__swhatbuf_r+0x48>)
    5750:	189b      	adds	r3, r3, r2
    5752:	425a      	negs	r2, r3
    5754:	4153      	adcs	r3, r2
    5756:	602b      	str	r3, [r5, #0]
    5758:	2380      	movs	r3, #128	; 0x80
    575a:	00db      	lsls	r3, r3, #3
    575c:	2000      	movs	r0, #0
    575e:	6023      	str	r3, [r4, #0]
    5760:	b010      	add	sp, #64	; 0x40
    5762:	bd70      	pop	{r4, r5, r6, pc}
    5764:	ffffe000 	.word	0xffffe000

00005768 <__smakebuf_r>:
    5768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    576a:	2602      	movs	r6, #2
    576c:	898b      	ldrh	r3, [r1, #12]
    576e:	0005      	movs	r5, r0
    5770:	000c      	movs	r4, r1
    5772:	4233      	tst	r3, r6
    5774:	d110      	bne.n	5798 <__smakebuf_r+0x30>
    5776:	ab01      	add	r3, sp, #4
    5778:	466a      	mov	r2, sp
    577a:	f7ff ffcf 	bl	571c <__swhatbuf_r>
    577e:	9900      	ldr	r1, [sp, #0]
    5780:	0007      	movs	r7, r0
    5782:	0028      	movs	r0, r5
    5784:	f000 f87e 	bl	5884 <_malloc_r>
    5788:	2800      	cmp	r0, #0
    578a:	d10c      	bne.n	57a6 <__smakebuf_r+0x3e>
    578c:	220c      	movs	r2, #12
    578e:	5ea3      	ldrsh	r3, [r4, r2]
    5790:	059a      	lsls	r2, r3, #22
    5792:	d423      	bmi.n	57dc <__smakebuf_r+0x74>
    5794:	4333      	orrs	r3, r6
    5796:	81a3      	strh	r3, [r4, #12]
    5798:	0023      	movs	r3, r4
    579a:	3347      	adds	r3, #71	; 0x47
    579c:	6023      	str	r3, [r4, #0]
    579e:	6123      	str	r3, [r4, #16]
    57a0:	2301      	movs	r3, #1
    57a2:	6163      	str	r3, [r4, #20]
    57a4:	e01a      	b.n	57dc <__smakebuf_r+0x74>
    57a6:	2280      	movs	r2, #128	; 0x80
    57a8:	4b0d      	ldr	r3, [pc, #52]	; (57e0 <__smakebuf_r+0x78>)
    57aa:	62ab      	str	r3, [r5, #40]	; 0x28
    57ac:	89a3      	ldrh	r3, [r4, #12]
    57ae:	6020      	str	r0, [r4, #0]
    57b0:	4313      	orrs	r3, r2
    57b2:	81a3      	strh	r3, [r4, #12]
    57b4:	9b00      	ldr	r3, [sp, #0]
    57b6:	6120      	str	r0, [r4, #16]
    57b8:	6163      	str	r3, [r4, #20]
    57ba:	9b01      	ldr	r3, [sp, #4]
    57bc:	2b00      	cmp	r3, #0
    57be:	d00a      	beq.n	57d6 <__smakebuf_r+0x6e>
    57c0:	230e      	movs	r3, #14
    57c2:	5ee1      	ldrsh	r1, [r4, r3]
    57c4:	0028      	movs	r0, r5
    57c6:	f000 fc1d 	bl	6004 <_isatty_r>
    57ca:	2800      	cmp	r0, #0
    57cc:	d003      	beq.n	57d6 <__smakebuf_r+0x6e>
    57ce:	2201      	movs	r2, #1
    57d0:	89a3      	ldrh	r3, [r4, #12]
    57d2:	4313      	orrs	r3, r2
    57d4:	81a3      	strh	r3, [r4, #12]
    57d6:	89a3      	ldrh	r3, [r4, #12]
    57d8:	431f      	orrs	r7, r3
    57da:	81a7      	strh	r7, [r4, #12]
    57dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    57de:	46c0      	nop			; (mov r8, r8)
    57e0:	00005571 	.word	0x00005571

000057e4 <malloc>:
    57e4:	b510      	push	{r4, lr}
    57e6:	4b03      	ldr	r3, [pc, #12]	; (57f4 <malloc+0x10>)
    57e8:	0001      	movs	r1, r0
    57ea:	6818      	ldr	r0, [r3, #0]
    57ec:	f000 f84a 	bl	5884 <_malloc_r>
    57f0:	bd10      	pop	{r4, pc}
    57f2:	46c0      	nop			; (mov r8, r8)
    57f4:	20000078 	.word	0x20000078

000057f8 <_free_r>:
    57f8:	b530      	push	{r4, r5, lr}
    57fa:	2900      	cmp	r1, #0
    57fc:	d03e      	beq.n	587c <_free_r+0x84>
    57fe:	3904      	subs	r1, #4
    5800:	680b      	ldr	r3, [r1, #0]
    5802:	2b00      	cmp	r3, #0
    5804:	da00      	bge.n	5808 <_free_r+0x10>
    5806:	18c9      	adds	r1, r1, r3
    5808:	4a1d      	ldr	r2, [pc, #116]	; (5880 <_free_r+0x88>)
    580a:	6813      	ldr	r3, [r2, #0]
    580c:	0014      	movs	r4, r2
    580e:	2b00      	cmp	r3, #0
    5810:	d102      	bne.n	5818 <_free_r+0x20>
    5812:	604b      	str	r3, [r1, #4]
    5814:	6011      	str	r1, [r2, #0]
    5816:	e031      	b.n	587c <_free_r+0x84>
    5818:	428b      	cmp	r3, r1
    581a:	d90d      	bls.n	5838 <_free_r+0x40>
    581c:	680a      	ldr	r2, [r1, #0]
    581e:	1888      	adds	r0, r1, r2
    5820:	4283      	cmp	r3, r0
    5822:	d103      	bne.n	582c <_free_r+0x34>
    5824:	6818      	ldr	r0, [r3, #0]
    5826:	685b      	ldr	r3, [r3, #4]
    5828:	1882      	adds	r2, r0, r2
    582a:	600a      	str	r2, [r1, #0]
    582c:	604b      	str	r3, [r1, #4]
    582e:	6021      	str	r1, [r4, #0]
    5830:	e024      	b.n	587c <_free_r+0x84>
    5832:	428a      	cmp	r2, r1
    5834:	d803      	bhi.n	583e <_free_r+0x46>
    5836:	0013      	movs	r3, r2
    5838:	685a      	ldr	r2, [r3, #4]
    583a:	2a00      	cmp	r2, #0
    583c:	d1f9      	bne.n	5832 <_free_r+0x3a>
    583e:	681d      	ldr	r5, [r3, #0]
    5840:	195c      	adds	r4, r3, r5
    5842:	428c      	cmp	r4, r1
    5844:	d10b      	bne.n	585e <_free_r+0x66>
    5846:	6809      	ldr	r1, [r1, #0]
    5848:	1869      	adds	r1, r5, r1
    584a:	1858      	adds	r0, r3, r1
    584c:	6019      	str	r1, [r3, #0]
    584e:	4282      	cmp	r2, r0
    5850:	d114      	bne.n	587c <_free_r+0x84>
    5852:	6810      	ldr	r0, [r2, #0]
    5854:	6852      	ldr	r2, [r2, #4]
    5856:	1841      	adds	r1, r0, r1
    5858:	6019      	str	r1, [r3, #0]
    585a:	605a      	str	r2, [r3, #4]
    585c:	e00e      	b.n	587c <_free_r+0x84>
    585e:	428c      	cmp	r4, r1
    5860:	d902      	bls.n	5868 <_free_r+0x70>
    5862:	230c      	movs	r3, #12
    5864:	6003      	str	r3, [r0, #0]
    5866:	e009      	b.n	587c <_free_r+0x84>
    5868:	6808      	ldr	r0, [r1, #0]
    586a:	180c      	adds	r4, r1, r0
    586c:	42a2      	cmp	r2, r4
    586e:	d103      	bne.n	5878 <_free_r+0x80>
    5870:	6814      	ldr	r4, [r2, #0]
    5872:	6852      	ldr	r2, [r2, #4]
    5874:	1820      	adds	r0, r4, r0
    5876:	6008      	str	r0, [r1, #0]
    5878:	604a      	str	r2, [r1, #4]
    587a:	6059      	str	r1, [r3, #4]
    587c:	bd30      	pop	{r4, r5, pc}
    587e:	46c0      	nop			; (mov r8, r8)
    5880:	200000f0 	.word	0x200000f0

00005884 <_malloc_r>:
    5884:	2303      	movs	r3, #3
    5886:	b570      	push	{r4, r5, r6, lr}
    5888:	1ccd      	adds	r5, r1, #3
    588a:	439d      	bics	r5, r3
    588c:	3508      	adds	r5, #8
    588e:	0006      	movs	r6, r0
    5890:	2d0c      	cmp	r5, #12
    5892:	d201      	bcs.n	5898 <_malloc_r+0x14>
    5894:	250c      	movs	r5, #12
    5896:	e005      	b.n	58a4 <_malloc_r+0x20>
    5898:	2d00      	cmp	r5, #0
    589a:	da03      	bge.n	58a4 <_malloc_r+0x20>
    589c:	230c      	movs	r3, #12
    589e:	2000      	movs	r0, #0
    58a0:	6033      	str	r3, [r6, #0]
    58a2:	e040      	b.n	5926 <_malloc_r+0xa2>
    58a4:	42a9      	cmp	r1, r5
    58a6:	d8f9      	bhi.n	589c <_malloc_r+0x18>
    58a8:	4b1f      	ldr	r3, [pc, #124]	; (5928 <_malloc_r+0xa4>)
    58aa:	681c      	ldr	r4, [r3, #0]
    58ac:	001a      	movs	r2, r3
    58ae:	0021      	movs	r1, r4
    58b0:	2900      	cmp	r1, #0
    58b2:	d013      	beq.n	58dc <_malloc_r+0x58>
    58b4:	680b      	ldr	r3, [r1, #0]
    58b6:	1b5b      	subs	r3, r3, r5
    58b8:	d40d      	bmi.n	58d6 <_malloc_r+0x52>
    58ba:	2b0b      	cmp	r3, #11
    58bc:	d902      	bls.n	58c4 <_malloc_r+0x40>
    58be:	600b      	str	r3, [r1, #0]
    58c0:	18cc      	adds	r4, r1, r3
    58c2:	e01e      	b.n	5902 <_malloc_r+0x7e>
    58c4:	428c      	cmp	r4, r1
    58c6:	d102      	bne.n	58ce <_malloc_r+0x4a>
    58c8:	6863      	ldr	r3, [r4, #4]
    58ca:	6013      	str	r3, [r2, #0]
    58cc:	e01a      	b.n	5904 <_malloc_r+0x80>
    58ce:	684b      	ldr	r3, [r1, #4]
    58d0:	6063      	str	r3, [r4, #4]
    58d2:	000c      	movs	r4, r1
    58d4:	e016      	b.n	5904 <_malloc_r+0x80>
    58d6:	000c      	movs	r4, r1
    58d8:	6849      	ldr	r1, [r1, #4]
    58da:	e7e9      	b.n	58b0 <_malloc_r+0x2c>
    58dc:	4c13      	ldr	r4, [pc, #76]	; (592c <_malloc_r+0xa8>)
    58de:	6823      	ldr	r3, [r4, #0]
    58e0:	2b00      	cmp	r3, #0
    58e2:	d103      	bne.n	58ec <_malloc_r+0x68>
    58e4:	0030      	movs	r0, r6
    58e6:	f000 faf7 	bl	5ed8 <_sbrk_r>
    58ea:	6020      	str	r0, [r4, #0]
    58ec:	0029      	movs	r1, r5
    58ee:	0030      	movs	r0, r6
    58f0:	f000 faf2 	bl	5ed8 <_sbrk_r>
    58f4:	1c43      	adds	r3, r0, #1
    58f6:	d0d1      	beq.n	589c <_malloc_r+0x18>
    58f8:	2303      	movs	r3, #3
    58fa:	1cc4      	adds	r4, r0, #3
    58fc:	439c      	bics	r4, r3
    58fe:	42a0      	cmp	r0, r4
    5900:	d10a      	bne.n	5918 <_malloc_r+0x94>
    5902:	6025      	str	r5, [r4, #0]
    5904:	0020      	movs	r0, r4
    5906:	2207      	movs	r2, #7
    5908:	300b      	adds	r0, #11
    590a:	1d23      	adds	r3, r4, #4
    590c:	4390      	bics	r0, r2
    590e:	1ac3      	subs	r3, r0, r3
    5910:	d009      	beq.n	5926 <_malloc_r+0xa2>
    5912:	425a      	negs	r2, r3
    5914:	50e2      	str	r2, [r4, r3]
    5916:	e006      	b.n	5926 <_malloc_r+0xa2>
    5918:	1a21      	subs	r1, r4, r0
    591a:	0030      	movs	r0, r6
    591c:	f000 fadc 	bl	5ed8 <_sbrk_r>
    5920:	1c43      	adds	r3, r0, #1
    5922:	d1ee      	bne.n	5902 <_malloc_r+0x7e>
    5924:	e7ba      	b.n	589c <_malloc_r+0x18>
    5926:	bd70      	pop	{r4, r5, r6, pc}
    5928:	200000f0 	.word	0x200000f0
    592c:	200000ec 	.word	0x200000ec

00005930 <__sfputc_r>:
    5930:	6893      	ldr	r3, [r2, #8]
    5932:	b510      	push	{r4, lr}
    5934:	3b01      	subs	r3, #1
    5936:	6093      	str	r3, [r2, #8]
    5938:	2b00      	cmp	r3, #0
    593a:	da05      	bge.n	5948 <__sfputc_r+0x18>
    593c:	6994      	ldr	r4, [r2, #24]
    593e:	42a3      	cmp	r3, r4
    5940:	db08      	blt.n	5954 <__sfputc_r+0x24>
    5942:	b2cb      	uxtb	r3, r1
    5944:	2b0a      	cmp	r3, #10
    5946:	d005      	beq.n	5954 <__sfputc_r+0x24>
    5948:	6813      	ldr	r3, [r2, #0]
    594a:	1c58      	adds	r0, r3, #1
    594c:	6010      	str	r0, [r2, #0]
    594e:	7019      	strb	r1, [r3, #0]
    5950:	b2c8      	uxtb	r0, r1
    5952:	e001      	b.n	5958 <__sfputc_r+0x28>
    5954:	f7ff fc8c 	bl	5270 <__swbuf_r>
    5958:	bd10      	pop	{r4, pc}

0000595a <__sfputs_r>:
    595a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    595c:	0006      	movs	r6, r0
    595e:	000f      	movs	r7, r1
    5960:	0014      	movs	r4, r2
    5962:	18d5      	adds	r5, r2, r3
    5964:	42ac      	cmp	r4, r5
    5966:	d008      	beq.n	597a <__sfputs_r+0x20>
    5968:	7821      	ldrb	r1, [r4, #0]
    596a:	003a      	movs	r2, r7
    596c:	0030      	movs	r0, r6
    596e:	f7ff ffdf 	bl	5930 <__sfputc_r>
    5972:	3401      	adds	r4, #1
    5974:	1c43      	adds	r3, r0, #1
    5976:	d1f5      	bne.n	5964 <__sfputs_r+0xa>
    5978:	e000      	b.n	597c <__sfputs_r+0x22>
    597a:	2000      	movs	r0, #0
    597c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005980 <_vfiprintf_r>:
    5980:	b5f0      	push	{r4, r5, r6, r7, lr}
    5982:	b09f      	sub	sp, #124	; 0x7c
    5984:	0006      	movs	r6, r0
    5986:	000f      	movs	r7, r1
    5988:	9202      	str	r2, [sp, #8]
    598a:	9305      	str	r3, [sp, #20]
    598c:	2800      	cmp	r0, #0
    598e:	d004      	beq.n	599a <_vfiprintf_r+0x1a>
    5990:	6983      	ldr	r3, [r0, #24]
    5992:	2b00      	cmp	r3, #0
    5994:	d101      	bne.n	599a <_vfiprintf_r+0x1a>
    5996:	f7ff fe2d 	bl	55f4 <__sinit>
    599a:	4b7f      	ldr	r3, [pc, #508]	; (5b98 <_vfiprintf_r+0x218>)
    599c:	429f      	cmp	r7, r3
    599e:	d101      	bne.n	59a4 <_vfiprintf_r+0x24>
    59a0:	6877      	ldr	r7, [r6, #4]
    59a2:	e008      	b.n	59b6 <_vfiprintf_r+0x36>
    59a4:	4b7d      	ldr	r3, [pc, #500]	; (5b9c <_vfiprintf_r+0x21c>)
    59a6:	429f      	cmp	r7, r3
    59a8:	d101      	bne.n	59ae <_vfiprintf_r+0x2e>
    59aa:	68b7      	ldr	r7, [r6, #8]
    59ac:	e003      	b.n	59b6 <_vfiprintf_r+0x36>
    59ae:	4b7c      	ldr	r3, [pc, #496]	; (5ba0 <_vfiprintf_r+0x220>)
    59b0:	429f      	cmp	r7, r3
    59b2:	d100      	bne.n	59b6 <_vfiprintf_r+0x36>
    59b4:	68f7      	ldr	r7, [r6, #12]
    59b6:	89bb      	ldrh	r3, [r7, #12]
    59b8:	071b      	lsls	r3, r3, #28
    59ba:	d50a      	bpl.n	59d2 <_vfiprintf_r+0x52>
    59bc:	693b      	ldr	r3, [r7, #16]
    59be:	2b00      	cmp	r3, #0
    59c0:	d007      	beq.n	59d2 <_vfiprintf_r+0x52>
    59c2:	2300      	movs	r3, #0
    59c4:	ad06      	add	r5, sp, #24
    59c6:	616b      	str	r3, [r5, #20]
    59c8:	3320      	adds	r3, #32
    59ca:	766b      	strb	r3, [r5, #25]
    59cc:	3310      	adds	r3, #16
    59ce:	76ab      	strb	r3, [r5, #26]
    59d0:	e03d      	b.n	5a4e <_vfiprintf_r+0xce>
    59d2:	0039      	movs	r1, r7
    59d4:	0030      	movs	r0, r6
    59d6:	f7ff fca3 	bl	5320 <__swsetup_r>
    59da:	2800      	cmp	r0, #0
    59dc:	d0f1      	beq.n	59c2 <_vfiprintf_r+0x42>
    59de:	2001      	movs	r0, #1
    59e0:	4240      	negs	r0, r0
    59e2:	e0d6      	b.n	5b92 <_vfiprintf_r+0x212>
    59e4:	9a05      	ldr	r2, [sp, #20]
    59e6:	1d11      	adds	r1, r2, #4
    59e8:	6812      	ldr	r2, [r2, #0]
    59ea:	9105      	str	r1, [sp, #20]
    59ec:	2a00      	cmp	r2, #0
    59ee:	da00      	bge.n	59f2 <_vfiprintf_r+0x72>
    59f0:	e07f      	b.n	5af2 <_vfiprintf_r+0x172>
    59f2:	9209      	str	r2, [sp, #36]	; 0x24
    59f4:	3401      	adds	r4, #1
    59f6:	7823      	ldrb	r3, [r4, #0]
    59f8:	2b2e      	cmp	r3, #46	; 0x2e
    59fa:	d100      	bne.n	59fe <_vfiprintf_r+0x7e>
    59fc:	e08d      	b.n	5b1a <_vfiprintf_r+0x19a>
    59fe:	7821      	ldrb	r1, [r4, #0]
    5a00:	2203      	movs	r2, #3
    5a02:	4868      	ldr	r0, [pc, #416]	; (5ba4 <_vfiprintf_r+0x224>)
    5a04:	f000 fb24 	bl	6050 <memchr>
    5a08:	2800      	cmp	r0, #0
    5a0a:	d007      	beq.n	5a1c <_vfiprintf_r+0x9c>
    5a0c:	4b65      	ldr	r3, [pc, #404]	; (5ba4 <_vfiprintf_r+0x224>)
    5a0e:	682a      	ldr	r2, [r5, #0]
    5a10:	1ac0      	subs	r0, r0, r3
    5a12:	2340      	movs	r3, #64	; 0x40
    5a14:	4083      	lsls	r3, r0
    5a16:	4313      	orrs	r3, r2
    5a18:	602b      	str	r3, [r5, #0]
    5a1a:	3401      	adds	r4, #1
    5a1c:	7821      	ldrb	r1, [r4, #0]
    5a1e:	1c63      	adds	r3, r4, #1
    5a20:	2206      	movs	r2, #6
    5a22:	4861      	ldr	r0, [pc, #388]	; (5ba8 <_vfiprintf_r+0x228>)
    5a24:	9302      	str	r3, [sp, #8]
    5a26:	7629      	strb	r1, [r5, #24]
    5a28:	f000 fb12 	bl	6050 <memchr>
    5a2c:	2800      	cmp	r0, #0
    5a2e:	d100      	bne.n	5a32 <_vfiprintf_r+0xb2>
    5a30:	e09d      	b.n	5b6e <_vfiprintf_r+0x1ee>
    5a32:	4b5e      	ldr	r3, [pc, #376]	; (5bac <_vfiprintf_r+0x22c>)
    5a34:	2b00      	cmp	r3, #0
    5a36:	d000      	beq.n	5a3a <_vfiprintf_r+0xba>
    5a38:	e090      	b.n	5b5c <_vfiprintf_r+0x1dc>
    5a3a:	2207      	movs	r2, #7
    5a3c:	9b05      	ldr	r3, [sp, #20]
    5a3e:	3307      	adds	r3, #7
    5a40:	4393      	bics	r3, r2
    5a42:	3308      	adds	r3, #8
    5a44:	9305      	str	r3, [sp, #20]
    5a46:	696b      	ldr	r3, [r5, #20]
    5a48:	9a03      	ldr	r2, [sp, #12]
    5a4a:	189b      	adds	r3, r3, r2
    5a4c:	616b      	str	r3, [r5, #20]
    5a4e:	9c02      	ldr	r4, [sp, #8]
    5a50:	7823      	ldrb	r3, [r4, #0]
    5a52:	2b00      	cmp	r3, #0
    5a54:	d104      	bne.n	5a60 <_vfiprintf_r+0xe0>
    5a56:	9b02      	ldr	r3, [sp, #8]
    5a58:	1ae3      	subs	r3, r4, r3
    5a5a:	9304      	str	r3, [sp, #16]
    5a5c:	d012      	beq.n	5a84 <_vfiprintf_r+0x104>
    5a5e:	e003      	b.n	5a68 <_vfiprintf_r+0xe8>
    5a60:	2b25      	cmp	r3, #37	; 0x25
    5a62:	d0f8      	beq.n	5a56 <_vfiprintf_r+0xd6>
    5a64:	3401      	adds	r4, #1
    5a66:	e7f3      	b.n	5a50 <_vfiprintf_r+0xd0>
    5a68:	9b04      	ldr	r3, [sp, #16]
    5a6a:	9a02      	ldr	r2, [sp, #8]
    5a6c:	0039      	movs	r1, r7
    5a6e:	0030      	movs	r0, r6
    5a70:	f7ff ff73 	bl	595a <__sfputs_r>
    5a74:	1c43      	adds	r3, r0, #1
    5a76:	d100      	bne.n	5a7a <_vfiprintf_r+0xfa>
    5a78:	e086      	b.n	5b88 <_vfiprintf_r+0x208>
    5a7a:	696a      	ldr	r2, [r5, #20]
    5a7c:	9b04      	ldr	r3, [sp, #16]
    5a7e:	4694      	mov	ip, r2
    5a80:	4463      	add	r3, ip
    5a82:	616b      	str	r3, [r5, #20]
    5a84:	7823      	ldrb	r3, [r4, #0]
    5a86:	2b00      	cmp	r3, #0
    5a88:	d07e      	beq.n	5b88 <_vfiprintf_r+0x208>
    5a8a:	2201      	movs	r2, #1
    5a8c:	2300      	movs	r3, #0
    5a8e:	4252      	negs	r2, r2
    5a90:	606a      	str	r2, [r5, #4]
    5a92:	a902      	add	r1, sp, #8
    5a94:	3254      	adds	r2, #84	; 0x54
    5a96:	1852      	adds	r2, r2, r1
    5a98:	3401      	adds	r4, #1
    5a9a:	602b      	str	r3, [r5, #0]
    5a9c:	60eb      	str	r3, [r5, #12]
    5a9e:	60ab      	str	r3, [r5, #8]
    5aa0:	7013      	strb	r3, [r2, #0]
    5aa2:	65ab      	str	r3, [r5, #88]	; 0x58
    5aa4:	7821      	ldrb	r1, [r4, #0]
    5aa6:	2205      	movs	r2, #5
    5aa8:	4841      	ldr	r0, [pc, #260]	; (5bb0 <_vfiprintf_r+0x230>)
    5aaa:	f000 fad1 	bl	6050 <memchr>
    5aae:	2800      	cmp	r0, #0
    5ab0:	d008      	beq.n	5ac4 <_vfiprintf_r+0x144>
    5ab2:	4b3f      	ldr	r3, [pc, #252]	; (5bb0 <_vfiprintf_r+0x230>)
    5ab4:	682a      	ldr	r2, [r5, #0]
    5ab6:	1ac0      	subs	r0, r0, r3
    5ab8:	2301      	movs	r3, #1
    5aba:	4083      	lsls	r3, r0
    5abc:	4313      	orrs	r3, r2
    5abe:	602b      	str	r3, [r5, #0]
    5ac0:	3401      	adds	r4, #1
    5ac2:	e7ef      	b.n	5aa4 <_vfiprintf_r+0x124>
    5ac4:	682b      	ldr	r3, [r5, #0]
    5ac6:	06da      	lsls	r2, r3, #27
    5ac8:	d504      	bpl.n	5ad4 <_vfiprintf_r+0x154>
    5aca:	2253      	movs	r2, #83	; 0x53
    5acc:	2120      	movs	r1, #32
    5ace:	a802      	add	r0, sp, #8
    5ad0:	1812      	adds	r2, r2, r0
    5ad2:	7011      	strb	r1, [r2, #0]
    5ad4:	071a      	lsls	r2, r3, #28
    5ad6:	d504      	bpl.n	5ae2 <_vfiprintf_r+0x162>
    5ad8:	2253      	movs	r2, #83	; 0x53
    5ada:	212b      	movs	r1, #43	; 0x2b
    5adc:	a802      	add	r0, sp, #8
    5ade:	1812      	adds	r2, r2, r0
    5ae0:	7011      	strb	r1, [r2, #0]
    5ae2:	7822      	ldrb	r2, [r4, #0]
    5ae4:	2a2a      	cmp	r2, #42	; 0x2a
    5ae6:	d100      	bne.n	5aea <_vfiprintf_r+0x16a>
    5ae8:	e77c      	b.n	59e4 <_vfiprintf_r+0x64>
    5aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5aec:	2000      	movs	r0, #0
    5aee:	210a      	movs	r1, #10
    5af0:	e005      	b.n	5afe <_vfiprintf_r+0x17e>
    5af2:	4252      	negs	r2, r2
    5af4:	60ea      	str	r2, [r5, #12]
    5af6:	2202      	movs	r2, #2
    5af8:	4313      	orrs	r3, r2
    5afa:	602b      	str	r3, [r5, #0]
    5afc:	e77a      	b.n	59f4 <_vfiprintf_r+0x74>
    5afe:	7822      	ldrb	r2, [r4, #0]
    5b00:	3a30      	subs	r2, #48	; 0x30
    5b02:	2a09      	cmp	r2, #9
    5b04:	d804      	bhi.n	5b10 <_vfiprintf_r+0x190>
    5b06:	434b      	muls	r3, r1
    5b08:	3401      	adds	r4, #1
    5b0a:	189b      	adds	r3, r3, r2
    5b0c:	2001      	movs	r0, #1
    5b0e:	e7f6      	b.n	5afe <_vfiprintf_r+0x17e>
    5b10:	2800      	cmp	r0, #0
    5b12:	d100      	bne.n	5b16 <_vfiprintf_r+0x196>
    5b14:	e76f      	b.n	59f6 <_vfiprintf_r+0x76>
    5b16:	9309      	str	r3, [sp, #36]	; 0x24
    5b18:	e76d      	b.n	59f6 <_vfiprintf_r+0x76>
    5b1a:	7863      	ldrb	r3, [r4, #1]
    5b1c:	2b2a      	cmp	r3, #42	; 0x2a
    5b1e:	d10a      	bne.n	5b36 <_vfiprintf_r+0x1b6>
    5b20:	9b05      	ldr	r3, [sp, #20]
    5b22:	3402      	adds	r4, #2
    5b24:	1d1a      	adds	r2, r3, #4
    5b26:	681b      	ldr	r3, [r3, #0]
    5b28:	9205      	str	r2, [sp, #20]
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	da01      	bge.n	5b32 <_vfiprintf_r+0x1b2>
    5b2e:	2301      	movs	r3, #1
    5b30:	425b      	negs	r3, r3
    5b32:	9307      	str	r3, [sp, #28]
    5b34:	e763      	b.n	59fe <_vfiprintf_r+0x7e>
    5b36:	2300      	movs	r3, #0
    5b38:	200a      	movs	r0, #10
    5b3a:	001a      	movs	r2, r3
    5b3c:	3401      	adds	r4, #1
    5b3e:	606b      	str	r3, [r5, #4]
    5b40:	7821      	ldrb	r1, [r4, #0]
    5b42:	3930      	subs	r1, #48	; 0x30
    5b44:	2909      	cmp	r1, #9
    5b46:	d804      	bhi.n	5b52 <_vfiprintf_r+0x1d2>
    5b48:	4342      	muls	r2, r0
    5b4a:	3401      	adds	r4, #1
    5b4c:	1852      	adds	r2, r2, r1
    5b4e:	2301      	movs	r3, #1
    5b50:	e7f6      	b.n	5b40 <_vfiprintf_r+0x1c0>
    5b52:	2b00      	cmp	r3, #0
    5b54:	d100      	bne.n	5b58 <_vfiprintf_r+0x1d8>
    5b56:	e752      	b.n	59fe <_vfiprintf_r+0x7e>
    5b58:	9207      	str	r2, [sp, #28]
    5b5a:	e750      	b.n	59fe <_vfiprintf_r+0x7e>
    5b5c:	ab05      	add	r3, sp, #20
    5b5e:	9300      	str	r3, [sp, #0]
    5b60:	003a      	movs	r2, r7
    5b62:	4b14      	ldr	r3, [pc, #80]	; (5bb4 <_vfiprintf_r+0x234>)
    5b64:	0029      	movs	r1, r5
    5b66:	0030      	movs	r0, r6
    5b68:	e000      	b.n	5b6c <_vfiprintf_r+0x1ec>
    5b6a:	bf00      	nop
    5b6c:	e007      	b.n	5b7e <_vfiprintf_r+0x1fe>
    5b6e:	ab05      	add	r3, sp, #20
    5b70:	9300      	str	r3, [sp, #0]
    5b72:	003a      	movs	r2, r7
    5b74:	4b0f      	ldr	r3, [pc, #60]	; (5bb4 <_vfiprintf_r+0x234>)
    5b76:	0029      	movs	r1, r5
    5b78:	0030      	movs	r0, r6
    5b7a:	f000 f88b 	bl	5c94 <_printf_i>
    5b7e:	9003      	str	r0, [sp, #12]
    5b80:	9b03      	ldr	r3, [sp, #12]
    5b82:	3301      	adds	r3, #1
    5b84:	d000      	beq.n	5b88 <_vfiprintf_r+0x208>
    5b86:	e75e      	b.n	5a46 <_vfiprintf_r+0xc6>
    5b88:	89bb      	ldrh	r3, [r7, #12]
    5b8a:	065b      	lsls	r3, r3, #25
    5b8c:	d500      	bpl.n	5b90 <_vfiprintf_r+0x210>
    5b8e:	e726      	b.n	59de <_vfiprintf_r+0x5e>
    5b90:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5b92:	b01f      	add	sp, #124	; 0x7c
    5b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b96:	46c0      	nop			; (mov r8, r8)
    5b98:	000062ec 	.word	0x000062ec
    5b9c:	0000630c 	.word	0x0000630c
    5ba0:	0000632c 	.word	0x0000632c
    5ba4:	00006352 	.word	0x00006352
    5ba8:	00006356 	.word	0x00006356
    5bac:	00000000 	.word	0x00000000
    5bb0:	0000634c 	.word	0x0000634c
    5bb4:	0000595b 	.word	0x0000595b

00005bb8 <_printf_common>:
    5bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5bba:	0017      	movs	r7, r2
    5bbc:	9301      	str	r3, [sp, #4]
    5bbe:	688a      	ldr	r2, [r1, #8]
    5bc0:	690b      	ldr	r3, [r1, #16]
    5bc2:	9000      	str	r0, [sp, #0]
    5bc4:	000c      	movs	r4, r1
    5bc6:	4293      	cmp	r3, r2
    5bc8:	da00      	bge.n	5bcc <_printf_common+0x14>
    5bca:	0013      	movs	r3, r2
    5bcc:	0022      	movs	r2, r4
    5bce:	603b      	str	r3, [r7, #0]
    5bd0:	3243      	adds	r2, #67	; 0x43
    5bd2:	7812      	ldrb	r2, [r2, #0]
    5bd4:	2a00      	cmp	r2, #0
    5bd6:	d001      	beq.n	5bdc <_printf_common+0x24>
    5bd8:	3301      	adds	r3, #1
    5bda:	603b      	str	r3, [r7, #0]
    5bdc:	6823      	ldr	r3, [r4, #0]
    5bde:	069b      	lsls	r3, r3, #26
    5be0:	d502      	bpl.n	5be8 <_printf_common+0x30>
    5be2:	683b      	ldr	r3, [r7, #0]
    5be4:	3302      	adds	r3, #2
    5be6:	603b      	str	r3, [r7, #0]
    5be8:	2506      	movs	r5, #6
    5bea:	6823      	ldr	r3, [r4, #0]
    5bec:	401d      	ands	r5, r3
    5bee:	d01e      	beq.n	5c2e <_printf_common+0x76>
    5bf0:	0023      	movs	r3, r4
    5bf2:	3343      	adds	r3, #67	; 0x43
    5bf4:	781b      	ldrb	r3, [r3, #0]
    5bf6:	1e5a      	subs	r2, r3, #1
    5bf8:	4193      	sbcs	r3, r2
    5bfa:	6822      	ldr	r2, [r4, #0]
    5bfc:	0692      	lsls	r2, r2, #26
    5bfe:	d51c      	bpl.n	5c3a <_printf_common+0x82>
    5c00:	2030      	movs	r0, #48	; 0x30
    5c02:	18e1      	adds	r1, r4, r3
    5c04:	3143      	adds	r1, #67	; 0x43
    5c06:	7008      	strb	r0, [r1, #0]
    5c08:	0021      	movs	r1, r4
    5c0a:	1c5a      	adds	r2, r3, #1
    5c0c:	3145      	adds	r1, #69	; 0x45
    5c0e:	7809      	ldrb	r1, [r1, #0]
    5c10:	18a2      	adds	r2, r4, r2
    5c12:	3243      	adds	r2, #67	; 0x43
    5c14:	3302      	adds	r3, #2
    5c16:	7011      	strb	r1, [r2, #0]
    5c18:	e00f      	b.n	5c3a <_printf_common+0x82>
    5c1a:	0022      	movs	r2, r4
    5c1c:	2301      	movs	r3, #1
    5c1e:	3219      	adds	r2, #25
    5c20:	9901      	ldr	r1, [sp, #4]
    5c22:	9800      	ldr	r0, [sp, #0]
    5c24:	9e08      	ldr	r6, [sp, #32]
    5c26:	47b0      	blx	r6
    5c28:	1c43      	adds	r3, r0, #1
    5c2a:	d00e      	beq.n	5c4a <_printf_common+0x92>
    5c2c:	3501      	adds	r5, #1
    5c2e:	68e3      	ldr	r3, [r4, #12]
    5c30:	683a      	ldr	r2, [r7, #0]
    5c32:	1a9b      	subs	r3, r3, r2
    5c34:	429d      	cmp	r5, r3
    5c36:	dbf0      	blt.n	5c1a <_printf_common+0x62>
    5c38:	e7da      	b.n	5bf0 <_printf_common+0x38>
    5c3a:	0022      	movs	r2, r4
    5c3c:	9901      	ldr	r1, [sp, #4]
    5c3e:	3243      	adds	r2, #67	; 0x43
    5c40:	9800      	ldr	r0, [sp, #0]
    5c42:	9d08      	ldr	r5, [sp, #32]
    5c44:	47a8      	blx	r5
    5c46:	1c43      	adds	r3, r0, #1
    5c48:	d102      	bne.n	5c50 <_printf_common+0x98>
    5c4a:	2001      	movs	r0, #1
    5c4c:	4240      	negs	r0, r0
    5c4e:	e020      	b.n	5c92 <_printf_common+0xda>
    5c50:	2306      	movs	r3, #6
    5c52:	6820      	ldr	r0, [r4, #0]
    5c54:	68e1      	ldr	r1, [r4, #12]
    5c56:	683a      	ldr	r2, [r7, #0]
    5c58:	4003      	ands	r3, r0
    5c5a:	2500      	movs	r5, #0
    5c5c:	2b04      	cmp	r3, #4
    5c5e:	d103      	bne.n	5c68 <_printf_common+0xb0>
    5c60:	1a8d      	subs	r5, r1, r2
    5c62:	43eb      	mvns	r3, r5
    5c64:	17db      	asrs	r3, r3, #31
    5c66:	401d      	ands	r5, r3
    5c68:	68a3      	ldr	r3, [r4, #8]
    5c6a:	6922      	ldr	r2, [r4, #16]
    5c6c:	4293      	cmp	r3, r2
    5c6e:	dd01      	ble.n	5c74 <_printf_common+0xbc>
    5c70:	1a9b      	subs	r3, r3, r2
    5c72:	18ed      	adds	r5, r5, r3
    5c74:	2700      	movs	r7, #0
    5c76:	42bd      	cmp	r5, r7
    5c78:	d00a      	beq.n	5c90 <_printf_common+0xd8>
    5c7a:	0022      	movs	r2, r4
    5c7c:	2301      	movs	r3, #1
    5c7e:	321a      	adds	r2, #26
    5c80:	9901      	ldr	r1, [sp, #4]
    5c82:	9800      	ldr	r0, [sp, #0]
    5c84:	9e08      	ldr	r6, [sp, #32]
    5c86:	47b0      	blx	r6
    5c88:	1c43      	adds	r3, r0, #1
    5c8a:	d0de      	beq.n	5c4a <_printf_common+0x92>
    5c8c:	3701      	adds	r7, #1
    5c8e:	e7f2      	b.n	5c76 <_printf_common+0xbe>
    5c90:	2000      	movs	r0, #0
    5c92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00005c94 <_printf_i>:
    5c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c96:	b08b      	sub	sp, #44	; 0x2c
    5c98:	9206      	str	r2, [sp, #24]
    5c9a:	000a      	movs	r2, r1
    5c9c:	3243      	adds	r2, #67	; 0x43
    5c9e:	9307      	str	r3, [sp, #28]
    5ca0:	9005      	str	r0, [sp, #20]
    5ca2:	9204      	str	r2, [sp, #16]
    5ca4:	7e0a      	ldrb	r2, [r1, #24]
    5ca6:	000c      	movs	r4, r1
    5ca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5caa:	2a6e      	cmp	r2, #110	; 0x6e
    5cac:	d100      	bne.n	5cb0 <_printf_i+0x1c>
    5cae:	e0ab      	b.n	5e08 <_printf_i+0x174>
    5cb0:	d811      	bhi.n	5cd6 <_printf_i+0x42>
    5cb2:	2a63      	cmp	r2, #99	; 0x63
    5cb4:	d022      	beq.n	5cfc <_printf_i+0x68>
    5cb6:	d809      	bhi.n	5ccc <_printf_i+0x38>
    5cb8:	2a00      	cmp	r2, #0
    5cba:	d100      	bne.n	5cbe <_printf_i+0x2a>
    5cbc:	e0b5      	b.n	5e2a <_printf_i+0x196>
    5cbe:	2a58      	cmp	r2, #88	; 0x58
    5cc0:	d000      	beq.n	5cc4 <_printf_i+0x30>
    5cc2:	e0c5      	b.n	5e50 <_printf_i+0x1bc>
    5cc4:	3145      	adds	r1, #69	; 0x45
    5cc6:	700a      	strb	r2, [r1, #0]
    5cc8:	4a81      	ldr	r2, [pc, #516]	; (5ed0 <_printf_i+0x23c>)
    5cca:	e04f      	b.n	5d6c <_printf_i+0xd8>
    5ccc:	2a64      	cmp	r2, #100	; 0x64
    5cce:	d01d      	beq.n	5d0c <_printf_i+0x78>
    5cd0:	2a69      	cmp	r2, #105	; 0x69
    5cd2:	d01b      	beq.n	5d0c <_printf_i+0x78>
    5cd4:	e0bc      	b.n	5e50 <_printf_i+0x1bc>
    5cd6:	2a73      	cmp	r2, #115	; 0x73
    5cd8:	d100      	bne.n	5cdc <_printf_i+0x48>
    5cda:	e0aa      	b.n	5e32 <_printf_i+0x19e>
    5cdc:	d809      	bhi.n	5cf2 <_printf_i+0x5e>
    5cde:	2a6f      	cmp	r2, #111	; 0x6f
    5ce0:	d029      	beq.n	5d36 <_printf_i+0xa2>
    5ce2:	2a70      	cmp	r2, #112	; 0x70
    5ce4:	d000      	beq.n	5ce8 <_printf_i+0x54>
    5ce6:	e0b3      	b.n	5e50 <_printf_i+0x1bc>
    5ce8:	2220      	movs	r2, #32
    5cea:	6809      	ldr	r1, [r1, #0]
    5cec:	430a      	orrs	r2, r1
    5cee:	6022      	str	r2, [r4, #0]
    5cf0:	e037      	b.n	5d62 <_printf_i+0xce>
    5cf2:	2a75      	cmp	r2, #117	; 0x75
    5cf4:	d01f      	beq.n	5d36 <_printf_i+0xa2>
    5cf6:	2a78      	cmp	r2, #120	; 0x78
    5cf8:	d033      	beq.n	5d62 <_printf_i+0xce>
    5cfa:	e0a9      	b.n	5e50 <_printf_i+0x1bc>
    5cfc:	000e      	movs	r6, r1
    5cfe:	681a      	ldr	r2, [r3, #0]
    5d00:	3642      	adds	r6, #66	; 0x42
    5d02:	1d11      	adds	r1, r2, #4
    5d04:	6019      	str	r1, [r3, #0]
    5d06:	6813      	ldr	r3, [r2, #0]
    5d08:	7033      	strb	r3, [r6, #0]
    5d0a:	e0a4      	b.n	5e56 <_printf_i+0x1c2>
    5d0c:	6821      	ldr	r1, [r4, #0]
    5d0e:	681a      	ldr	r2, [r3, #0]
    5d10:	0608      	lsls	r0, r1, #24
    5d12:	d406      	bmi.n	5d22 <_printf_i+0x8e>
    5d14:	0649      	lsls	r1, r1, #25
    5d16:	d504      	bpl.n	5d22 <_printf_i+0x8e>
    5d18:	1d11      	adds	r1, r2, #4
    5d1a:	6019      	str	r1, [r3, #0]
    5d1c:	2300      	movs	r3, #0
    5d1e:	5ed5      	ldrsh	r5, [r2, r3]
    5d20:	e002      	b.n	5d28 <_printf_i+0x94>
    5d22:	1d11      	adds	r1, r2, #4
    5d24:	6019      	str	r1, [r3, #0]
    5d26:	6815      	ldr	r5, [r2, #0]
    5d28:	2d00      	cmp	r5, #0
    5d2a:	da3b      	bge.n	5da4 <_printf_i+0x110>
    5d2c:	232d      	movs	r3, #45	; 0x2d
    5d2e:	9a04      	ldr	r2, [sp, #16]
    5d30:	426d      	negs	r5, r5
    5d32:	7013      	strb	r3, [r2, #0]
    5d34:	e036      	b.n	5da4 <_printf_i+0x110>
    5d36:	6821      	ldr	r1, [r4, #0]
    5d38:	681a      	ldr	r2, [r3, #0]
    5d3a:	0608      	lsls	r0, r1, #24
    5d3c:	d406      	bmi.n	5d4c <_printf_i+0xb8>
    5d3e:	0649      	lsls	r1, r1, #25
    5d40:	d504      	bpl.n	5d4c <_printf_i+0xb8>
    5d42:	6815      	ldr	r5, [r2, #0]
    5d44:	1d11      	adds	r1, r2, #4
    5d46:	6019      	str	r1, [r3, #0]
    5d48:	b2ad      	uxth	r5, r5
    5d4a:	e002      	b.n	5d52 <_printf_i+0xbe>
    5d4c:	1d11      	adds	r1, r2, #4
    5d4e:	6019      	str	r1, [r3, #0]
    5d50:	6815      	ldr	r5, [r2, #0]
    5d52:	4b5f      	ldr	r3, [pc, #380]	; (5ed0 <_printf_i+0x23c>)
    5d54:	7e22      	ldrb	r2, [r4, #24]
    5d56:	9303      	str	r3, [sp, #12]
    5d58:	2708      	movs	r7, #8
    5d5a:	2a6f      	cmp	r2, #111	; 0x6f
    5d5c:	d01d      	beq.n	5d9a <_printf_i+0x106>
    5d5e:	270a      	movs	r7, #10
    5d60:	e01b      	b.n	5d9a <_printf_i+0x106>
    5d62:	0022      	movs	r2, r4
    5d64:	2178      	movs	r1, #120	; 0x78
    5d66:	3245      	adds	r2, #69	; 0x45
    5d68:	7011      	strb	r1, [r2, #0]
    5d6a:	4a5a      	ldr	r2, [pc, #360]	; (5ed4 <_printf_i+0x240>)
    5d6c:	6819      	ldr	r1, [r3, #0]
    5d6e:	9203      	str	r2, [sp, #12]
    5d70:	1d08      	adds	r0, r1, #4
    5d72:	6822      	ldr	r2, [r4, #0]
    5d74:	6018      	str	r0, [r3, #0]
    5d76:	680d      	ldr	r5, [r1, #0]
    5d78:	0610      	lsls	r0, r2, #24
    5d7a:	d402      	bmi.n	5d82 <_printf_i+0xee>
    5d7c:	0650      	lsls	r0, r2, #25
    5d7e:	d500      	bpl.n	5d82 <_printf_i+0xee>
    5d80:	b2ad      	uxth	r5, r5
    5d82:	07d3      	lsls	r3, r2, #31
    5d84:	d502      	bpl.n	5d8c <_printf_i+0xf8>
    5d86:	2320      	movs	r3, #32
    5d88:	431a      	orrs	r2, r3
    5d8a:	6022      	str	r2, [r4, #0]
    5d8c:	2710      	movs	r7, #16
    5d8e:	2d00      	cmp	r5, #0
    5d90:	d103      	bne.n	5d9a <_printf_i+0x106>
    5d92:	2320      	movs	r3, #32
    5d94:	6822      	ldr	r2, [r4, #0]
    5d96:	439a      	bics	r2, r3
    5d98:	6022      	str	r2, [r4, #0]
    5d9a:	0023      	movs	r3, r4
    5d9c:	2200      	movs	r2, #0
    5d9e:	3343      	adds	r3, #67	; 0x43
    5da0:	701a      	strb	r2, [r3, #0]
    5da2:	e002      	b.n	5daa <_printf_i+0x116>
    5da4:	270a      	movs	r7, #10
    5da6:	4b4a      	ldr	r3, [pc, #296]	; (5ed0 <_printf_i+0x23c>)
    5da8:	9303      	str	r3, [sp, #12]
    5daa:	6863      	ldr	r3, [r4, #4]
    5dac:	60a3      	str	r3, [r4, #8]
    5dae:	2b00      	cmp	r3, #0
    5db0:	db09      	blt.n	5dc6 <_printf_i+0x132>
    5db2:	2204      	movs	r2, #4
    5db4:	6821      	ldr	r1, [r4, #0]
    5db6:	4391      	bics	r1, r2
    5db8:	6021      	str	r1, [r4, #0]
    5dba:	2d00      	cmp	r5, #0
    5dbc:	d105      	bne.n	5dca <_printf_i+0x136>
    5dbe:	9e04      	ldr	r6, [sp, #16]
    5dc0:	2b00      	cmp	r3, #0
    5dc2:	d011      	beq.n	5de8 <_printf_i+0x154>
    5dc4:	e07b      	b.n	5ebe <_printf_i+0x22a>
    5dc6:	2d00      	cmp	r5, #0
    5dc8:	d079      	beq.n	5ebe <_printf_i+0x22a>
    5dca:	9e04      	ldr	r6, [sp, #16]
    5dcc:	0028      	movs	r0, r5
    5dce:	0039      	movs	r1, r7
    5dd0:	f7ff f8a4 	bl	4f1c <__aeabi_uidivmod>
    5dd4:	9b03      	ldr	r3, [sp, #12]
    5dd6:	3e01      	subs	r6, #1
    5dd8:	5c5b      	ldrb	r3, [r3, r1]
    5dda:	0028      	movs	r0, r5
    5ddc:	7033      	strb	r3, [r6, #0]
    5dde:	0039      	movs	r1, r7
    5de0:	f7ff f816 	bl	4e10 <__aeabi_uidiv>
    5de4:	1e05      	subs	r5, r0, #0
    5de6:	d1f1      	bne.n	5dcc <_printf_i+0x138>
    5de8:	2f08      	cmp	r7, #8
    5dea:	d109      	bne.n	5e00 <_printf_i+0x16c>
    5dec:	6823      	ldr	r3, [r4, #0]
    5dee:	07db      	lsls	r3, r3, #31
    5df0:	d506      	bpl.n	5e00 <_printf_i+0x16c>
    5df2:	6863      	ldr	r3, [r4, #4]
    5df4:	6922      	ldr	r2, [r4, #16]
    5df6:	4293      	cmp	r3, r2
    5df8:	dc02      	bgt.n	5e00 <_printf_i+0x16c>
    5dfa:	2330      	movs	r3, #48	; 0x30
    5dfc:	3e01      	subs	r6, #1
    5dfe:	7033      	strb	r3, [r6, #0]
    5e00:	9b04      	ldr	r3, [sp, #16]
    5e02:	1b9b      	subs	r3, r3, r6
    5e04:	6123      	str	r3, [r4, #16]
    5e06:	e02b      	b.n	5e60 <_printf_i+0x1cc>
    5e08:	6809      	ldr	r1, [r1, #0]
    5e0a:	681a      	ldr	r2, [r3, #0]
    5e0c:	0608      	lsls	r0, r1, #24
    5e0e:	d407      	bmi.n	5e20 <_printf_i+0x18c>
    5e10:	0649      	lsls	r1, r1, #25
    5e12:	d505      	bpl.n	5e20 <_printf_i+0x18c>
    5e14:	1d11      	adds	r1, r2, #4
    5e16:	6019      	str	r1, [r3, #0]
    5e18:	6813      	ldr	r3, [r2, #0]
    5e1a:	8aa2      	ldrh	r2, [r4, #20]
    5e1c:	801a      	strh	r2, [r3, #0]
    5e1e:	e004      	b.n	5e2a <_printf_i+0x196>
    5e20:	1d11      	adds	r1, r2, #4
    5e22:	6019      	str	r1, [r3, #0]
    5e24:	6813      	ldr	r3, [r2, #0]
    5e26:	6962      	ldr	r2, [r4, #20]
    5e28:	601a      	str	r2, [r3, #0]
    5e2a:	2300      	movs	r3, #0
    5e2c:	9e04      	ldr	r6, [sp, #16]
    5e2e:	6123      	str	r3, [r4, #16]
    5e30:	e016      	b.n	5e60 <_printf_i+0x1cc>
    5e32:	681a      	ldr	r2, [r3, #0]
    5e34:	1d11      	adds	r1, r2, #4
    5e36:	6019      	str	r1, [r3, #0]
    5e38:	6816      	ldr	r6, [r2, #0]
    5e3a:	2100      	movs	r1, #0
    5e3c:	6862      	ldr	r2, [r4, #4]
    5e3e:	0030      	movs	r0, r6
    5e40:	f000 f906 	bl	6050 <memchr>
    5e44:	2800      	cmp	r0, #0
    5e46:	d001      	beq.n	5e4c <_printf_i+0x1b8>
    5e48:	1b80      	subs	r0, r0, r6
    5e4a:	6060      	str	r0, [r4, #4]
    5e4c:	6863      	ldr	r3, [r4, #4]
    5e4e:	e003      	b.n	5e58 <_printf_i+0x1c4>
    5e50:	0026      	movs	r6, r4
    5e52:	3642      	adds	r6, #66	; 0x42
    5e54:	7032      	strb	r2, [r6, #0]
    5e56:	2301      	movs	r3, #1
    5e58:	6123      	str	r3, [r4, #16]
    5e5a:	2300      	movs	r3, #0
    5e5c:	9a04      	ldr	r2, [sp, #16]
    5e5e:	7013      	strb	r3, [r2, #0]
    5e60:	9b07      	ldr	r3, [sp, #28]
    5e62:	aa09      	add	r2, sp, #36	; 0x24
    5e64:	9300      	str	r3, [sp, #0]
    5e66:	0021      	movs	r1, r4
    5e68:	9b06      	ldr	r3, [sp, #24]
    5e6a:	9805      	ldr	r0, [sp, #20]
    5e6c:	f7ff fea4 	bl	5bb8 <_printf_common>
    5e70:	1c43      	adds	r3, r0, #1
    5e72:	d102      	bne.n	5e7a <_printf_i+0x1e6>
    5e74:	2001      	movs	r0, #1
    5e76:	4240      	negs	r0, r0
    5e78:	e027      	b.n	5eca <_printf_i+0x236>
    5e7a:	6923      	ldr	r3, [r4, #16]
    5e7c:	0032      	movs	r2, r6
    5e7e:	9906      	ldr	r1, [sp, #24]
    5e80:	9805      	ldr	r0, [sp, #20]
    5e82:	9d07      	ldr	r5, [sp, #28]
    5e84:	47a8      	blx	r5
    5e86:	1c43      	adds	r3, r0, #1
    5e88:	d0f4      	beq.n	5e74 <_printf_i+0x1e0>
    5e8a:	6823      	ldr	r3, [r4, #0]
    5e8c:	2500      	movs	r5, #0
    5e8e:	079b      	lsls	r3, r3, #30
    5e90:	d40f      	bmi.n	5eb2 <_printf_i+0x21e>
    5e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5e94:	68e0      	ldr	r0, [r4, #12]
    5e96:	4298      	cmp	r0, r3
    5e98:	da17      	bge.n	5eca <_printf_i+0x236>
    5e9a:	0018      	movs	r0, r3
    5e9c:	e015      	b.n	5eca <_printf_i+0x236>
    5e9e:	0022      	movs	r2, r4
    5ea0:	2301      	movs	r3, #1
    5ea2:	3219      	adds	r2, #25
    5ea4:	9906      	ldr	r1, [sp, #24]
    5ea6:	9805      	ldr	r0, [sp, #20]
    5ea8:	9e07      	ldr	r6, [sp, #28]
    5eaa:	47b0      	blx	r6
    5eac:	1c43      	adds	r3, r0, #1
    5eae:	d0e1      	beq.n	5e74 <_printf_i+0x1e0>
    5eb0:	3501      	adds	r5, #1
    5eb2:	68e3      	ldr	r3, [r4, #12]
    5eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5eb6:	1a9b      	subs	r3, r3, r2
    5eb8:	429d      	cmp	r5, r3
    5eba:	dbf0      	blt.n	5e9e <_printf_i+0x20a>
    5ebc:	e7e9      	b.n	5e92 <_printf_i+0x1fe>
    5ebe:	0026      	movs	r6, r4
    5ec0:	9b03      	ldr	r3, [sp, #12]
    5ec2:	3642      	adds	r6, #66	; 0x42
    5ec4:	781b      	ldrb	r3, [r3, #0]
    5ec6:	7033      	strb	r3, [r6, #0]
    5ec8:	e78e      	b.n	5de8 <_printf_i+0x154>
    5eca:	b00b      	add	sp, #44	; 0x2c
    5ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ece:	46c0      	nop			; (mov r8, r8)
    5ed0:	0000635d 	.word	0x0000635d
    5ed4:	0000636e 	.word	0x0000636e

00005ed8 <_sbrk_r>:
    5ed8:	2300      	movs	r3, #0
    5eda:	b570      	push	{r4, r5, r6, lr}
    5edc:	4c06      	ldr	r4, [pc, #24]	; (5ef8 <_sbrk_r+0x20>)
    5ede:	0005      	movs	r5, r0
    5ee0:	0008      	movs	r0, r1
    5ee2:	6023      	str	r3, [r4, #0]
    5ee4:	f7fe fa3a 	bl	435c <_sbrk>
    5ee8:	1c43      	adds	r3, r0, #1
    5eea:	d103      	bne.n	5ef4 <_sbrk_r+0x1c>
    5eec:	6823      	ldr	r3, [r4, #0]
    5eee:	2b00      	cmp	r3, #0
    5ef0:	d000      	beq.n	5ef4 <_sbrk_r+0x1c>
    5ef2:	602b      	str	r3, [r5, #0]
    5ef4:	bd70      	pop	{r4, r5, r6, pc}
    5ef6:	46c0      	nop			; (mov r8, r8)
    5ef8:	20000194 	.word	0x20000194

00005efc <__sread>:
    5efc:	b570      	push	{r4, r5, r6, lr}
    5efe:	000c      	movs	r4, r1
    5f00:	250e      	movs	r5, #14
    5f02:	5f49      	ldrsh	r1, [r1, r5]
    5f04:	f000 f8b0 	bl	6068 <_read_r>
    5f08:	2800      	cmp	r0, #0
    5f0a:	db03      	blt.n	5f14 <__sread+0x18>
    5f0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5f0e:	181b      	adds	r3, r3, r0
    5f10:	6563      	str	r3, [r4, #84]	; 0x54
    5f12:	e003      	b.n	5f1c <__sread+0x20>
    5f14:	89a2      	ldrh	r2, [r4, #12]
    5f16:	4b02      	ldr	r3, [pc, #8]	; (5f20 <__sread+0x24>)
    5f18:	4013      	ands	r3, r2
    5f1a:	81a3      	strh	r3, [r4, #12]
    5f1c:	bd70      	pop	{r4, r5, r6, pc}
    5f1e:	46c0      	nop			; (mov r8, r8)
    5f20:	ffffefff 	.word	0xffffefff

00005f24 <__swrite>:
    5f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f26:	001f      	movs	r7, r3
    5f28:	898b      	ldrh	r3, [r1, #12]
    5f2a:	0005      	movs	r5, r0
    5f2c:	000c      	movs	r4, r1
    5f2e:	0016      	movs	r6, r2
    5f30:	05db      	lsls	r3, r3, #23
    5f32:	d505      	bpl.n	5f40 <__swrite+0x1c>
    5f34:	230e      	movs	r3, #14
    5f36:	5ec9      	ldrsh	r1, [r1, r3]
    5f38:	2200      	movs	r2, #0
    5f3a:	2302      	movs	r3, #2
    5f3c:	f000 f874 	bl	6028 <_lseek_r>
    5f40:	89a2      	ldrh	r2, [r4, #12]
    5f42:	4b05      	ldr	r3, [pc, #20]	; (5f58 <__swrite+0x34>)
    5f44:	0028      	movs	r0, r5
    5f46:	4013      	ands	r3, r2
    5f48:	81a3      	strh	r3, [r4, #12]
    5f4a:	0032      	movs	r2, r6
    5f4c:	230e      	movs	r3, #14
    5f4e:	5ee1      	ldrsh	r1, [r4, r3]
    5f50:	003b      	movs	r3, r7
    5f52:	f000 f81f 	bl	5f94 <_write_r>
    5f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f58:	ffffefff 	.word	0xffffefff

00005f5c <__sseek>:
    5f5c:	b570      	push	{r4, r5, r6, lr}
    5f5e:	000c      	movs	r4, r1
    5f60:	250e      	movs	r5, #14
    5f62:	5f49      	ldrsh	r1, [r1, r5]
    5f64:	f000 f860 	bl	6028 <_lseek_r>
    5f68:	89a3      	ldrh	r3, [r4, #12]
    5f6a:	1c42      	adds	r2, r0, #1
    5f6c:	d103      	bne.n	5f76 <__sseek+0x1a>
    5f6e:	4a05      	ldr	r2, [pc, #20]	; (5f84 <__sseek+0x28>)
    5f70:	4013      	ands	r3, r2
    5f72:	81a3      	strh	r3, [r4, #12]
    5f74:	e004      	b.n	5f80 <__sseek+0x24>
    5f76:	2280      	movs	r2, #128	; 0x80
    5f78:	0152      	lsls	r2, r2, #5
    5f7a:	4313      	orrs	r3, r2
    5f7c:	81a3      	strh	r3, [r4, #12]
    5f7e:	6560      	str	r0, [r4, #84]	; 0x54
    5f80:	bd70      	pop	{r4, r5, r6, pc}
    5f82:	46c0      	nop			; (mov r8, r8)
    5f84:	ffffefff 	.word	0xffffefff

00005f88 <__sclose>:
    5f88:	b510      	push	{r4, lr}
    5f8a:	230e      	movs	r3, #14
    5f8c:	5ec9      	ldrsh	r1, [r1, r3]
    5f8e:	f000 f815 	bl	5fbc <_close_r>
    5f92:	bd10      	pop	{r4, pc}

00005f94 <_write_r>:
    5f94:	b570      	push	{r4, r5, r6, lr}
    5f96:	0005      	movs	r5, r0
    5f98:	0008      	movs	r0, r1
    5f9a:	0011      	movs	r1, r2
    5f9c:	2200      	movs	r2, #0
    5f9e:	4c06      	ldr	r4, [pc, #24]	; (5fb8 <_write_r+0x24>)
    5fa0:	6022      	str	r2, [r4, #0]
    5fa2:	001a      	movs	r2, r3
    5fa4:	f7fa ffb8 	bl	f18 <_write>
    5fa8:	1c43      	adds	r3, r0, #1
    5faa:	d103      	bne.n	5fb4 <_write_r+0x20>
    5fac:	6823      	ldr	r3, [r4, #0]
    5fae:	2b00      	cmp	r3, #0
    5fb0:	d000      	beq.n	5fb4 <_write_r+0x20>
    5fb2:	602b      	str	r3, [r5, #0]
    5fb4:	bd70      	pop	{r4, r5, r6, pc}
    5fb6:	46c0      	nop			; (mov r8, r8)
    5fb8:	20000194 	.word	0x20000194

00005fbc <_close_r>:
    5fbc:	2300      	movs	r3, #0
    5fbe:	b570      	push	{r4, r5, r6, lr}
    5fc0:	4c06      	ldr	r4, [pc, #24]	; (5fdc <_close_r+0x20>)
    5fc2:	0005      	movs	r5, r0
    5fc4:	0008      	movs	r0, r1
    5fc6:	6023      	str	r3, [r4, #0]
    5fc8:	f7fe f9e6 	bl	4398 <_close>
    5fcc:	1c43      	adds	r3, r0, #1
    5fce:	d103      	bne.n	5fd8 <_close_r+0x1c>
    5fd0:	6823      	ldr	r3, [r4, #0]
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d000      	beq.n	5fd8 <_close_r+0x1c>
    5fd6:	602b      	str	r3, [r5, #0]
    5fd8:	bd70      	pop	{r4, r5, r6, pc}
    5fda:	46c0      	nop			; (mov r8, r8)
    5fdc:	20000194 	.word	0x20000194

00005fe0 <_fstat_r>:
    5fe0:	2300      	movs	r3, #0
    5fe2:	b570      	push	{r4, r5, r6, lr}
    5fe4:	4c06      	ldr	r4, [pc, #24]	; (6000 <_fstat_r+0x20>)
    5fe6:	0005      	movs	r5, r0
    5fe8:	0008      	movs	r0, r1
    5fea:	0011      	movs	r1, r2
    5fec:	6023      	str	r3, [r4, #0]
    5fee:	f7fe f9dd 	bl	43ac <_fstat>
    5ff2:	1c43      	adds	r3, r0, #1
    5ff4:	d103      	bne.n	5ffe <_fstat_r+0x1e>
    5ff6:	6823      	ldr	r3, [r4, #0]
    5ff8:	2b00      	cmp	r3, #0
    5ffa:	d000      	beq.n	5ffe <_fstat_r+0x1e>
    5ffc:	602b      	str	r3, [r5, #0]
    5ffe:	bd70      	pop	{r4, r5, r6, pc}
    6000:	20000194 	.word	0x20000194

00006004 <_isatty_r>:
    6004:	2300      	movs	r3, #0
    6006:	b570      	push	{r4, r5, r6, lr}
    6008:	4c06      	ldr	r4, [pc, #24]	; (6024 <_isatty_r+0x20>)
    600a:	0005      	movs	r5, r0
    600c:	0008      	movs	r0, r1
    600e:	6023      	str	r3, [r4, #0]
    6010:	f7fe f9da 	bl	43c8 <_isatty>
    6014:	1c43      	adds	r3, r0, #1
    6016:	d103      	bne.n	6020 <_isatty_r+0x1c>
    6018:	6823      	ldr	r3, [r4, #0]
    601a:	2b00      	cmp	r3, #0
    601c:	d000      	beq.n	6020 <_isatty_r+0x1c>
    601e:	602b      	str	r3, [r5, #0]
    6020:	bd70      	pop	{r4, r5, r6, pc}
    6022:	46c0      	nop			; (mov r8, r8)
    6024:	20000194 	.word	0x20000194

00006028 <_lseek_r>:
    6028:	b570      	push	{r4, r5, r6, lr}
    602a:	0005      	movs	r5, r0
    602c:	0008      	movs	r0, r1
    602e:	0011      	movs	r1, r2
    6030:	2200      	movs	r2, #0
    6032:	4c06      	ldr	r4, [pc, #24]	; (604c <_lseek_r+0x24>)
    6034:	6022      	str	r2, [r4, #0]
    6036:	001a      	movs	r2, r3
    6038:	f7fe f9d0 	bl	43dc <_lseek>
    603c:	1c43      	adds	r3, r0, #1
    603e:	d103      	bne.n	6048 <_lseek_r+0x20>
    6040:	6823      	ldr	r3, [r4, #0]
    6042:	2b00      	cmp	r3, #0
    6044:	d000      	beq.n	6048 <_lseek_r+0x20>
    6046:	602b      	str	r3, [r5, #0]
    6048:	bd70      	pop	{r4, r5, r6, pc}
    604a:	46c0      	nop			; (mov r8, r8)
    604c:	20000194 	.word	0x20000194

00006050 <memchr>:
    6050:	b2c9      	uxtb	r1, r1
    6052:	1882      	adds	r2, r0, r2
    6054:	4290      	cmp	r0, r2
    6056:	d004      	beq.n	6062 <memchr+0x12>
    6058:	7803      	ldrb	r3, [r0, #0]
    605a:	428b      	cmp	r3, r1
    605c:	d002      	beq.n	6064 <memchr+0x14>
    605e:	3001      	adds	r0, #1
    6060:	e7f8      	b.n	6054 <memchr+0x4>
    6062:	2000      	movs	r0, #0
    6064:	4770      	bx	lr
	...

00006068 <_read_r>:
    6068:	b570      	push	{r4, r5, r6, lr}
    606a:	0005      	movs	r5, r0
    606c:	0008      	movs	r0, r1
    606e:	0011      	movs	r1, r2
    6070:	2200      	movs	r2, #0
    6072:	4c06      	ldr	r4, [pc, #24]	; (608c <_read_r+0x24>)
    6074:	6022      	str	r2, [r4, #0]
    6076:	001a      	movs	r2, r3
    6078:	f7fa ff24 	bl	ec4 <_read>
    607c:	1c43      	adds	r3, r0, #1
    607e:	d103      	bne.n	6088 <_read_r+0x20>
    6080:	6823      	ldr	r3, [r4, #0]
    6082:	2b00      	cmp	r3, #0
    6084:	d000      	beq.n	6088 <_read_r+0x20>
    6086:	602b      	str	r3, [r5, #0]
    6088:	bd70      	pop	{r4, r5, r6, pc}
    608a:	46c0      	nop			; (mov r8, r8)
    608c:	20000194 	.word	0x20000194
    6090:	000003b2 	.word	0x000003b2
    6094:	000003b6 	.word	0x000003b6
    6098:	000003ba 	.word	0x000003ba
    609c:	000003be 	.word	0x000003be
    60a0:	000003c2 	.word	0x000003c2
    60a4:	000003c6 	.word	0x000003c6
    60a8:	000003ca 	.word	0x000003ca
    60ac:	000003ce 	.word	0x000003ce
    60b0:	000003d2 	.word	0x000003d2
    60b4:	000003d6 	.word	0x000003d6
    60b8:	0000042e 	.word	0x0000042e
    60bc:	00000434 	.word	0x00000434
    60c0:	0000043a 	.word	0x0000043a
    60c4:	00000440 	.word	0x00000440
    60c8:	00000440 	.word	0x00000440
    60cc:	00000446 	.word	0x00000446
    60d0:	00000446 	.word	0x00000446
    60d4:	00000446 	.word	0x00000446
    60d8:	0000044c 	.word	0x0000044c
    60dc:	00000452 	.word	0x00000452
    60e0:	42000800 	.word	0x42000800
    60e4:	42000c00 	.word	0x42000c00
    60e8:	42001000 	.word	0x42001000
    60ec:	42001400 	.word	0x42001400
    60f0:	42001800 	.word	0x42001800
    60f4:	42001c00 	.word	0x42001c00
    60f8:	0c0b0a09 	.word	0x0c0b0a09
    60fc:	00000e0d 	.word	0x00000e0d
    6100:	000033f8 	.word	0x000033f8
    6104:	000033f8 	.word	0x000033f8
    6108:	000033ec 	.word	0x000033ec
    610c:	000033f8 	.word	0x000033f8
    6110:	000033ec 	.word	0x000033ec
    6114:	000033c6 	.word	0x000033c6
    6118:	000033c6 	.word	0x000033c6
    611c:	000033f8 	.word	0x000033f8
    6120:	000033f8 	.word	0x000033f8
    6124:	000033f8 	.word	0x000033f8
    6128:	000033f8 	.word	0x000033f8
    612c:	000033f8 	.word	0x000033f8
    6130:	000033f8 	.word	0x000033f8
    6134:	000033f8 	.word	0x000033f8
    6138:	000033f8 	.word	0x000033f8
    613c:	000033f8 	.word	0x000033f8
    6140:	000033f8 	.word	0x000033f8
    6144:	000033f8 	.word	0x000033f8
    6148:	000033f8 	.word	0x000033f8
    614c:	000033f8 	.word	0x000033f8
    6150:	000033f8 	.word	0x000033f8
    6154:	000033f8 	.word	0x000033f8
    6158:	000033f8 	.word	0x000033f8
    615c:	000033f8 	.word	0x000033f8
    6160:	000033f8 	.word	0x000033f8
    6164:	000033f8 	.word	0x000033f8
    6168:	000033f8 	.word	0x000033f8
    616c:	000033f8 	.word	0x000033f8
    6170:	000033f8 	.word	0x000033f8
    6174:	000033f8 	.word	0x000033f8
    6178:	000033f8 	.word	0x000033f8
    617c:	000033f8 	.word	0x000033f8
    6180:	000033f8 	.word	0x000033f8
    6184:	000033f8 	.word	0x000033f8
    6188:	000033f8 	.word	0x000033f8
    618c:	000033f8 	.word	0x000033f8
    6190:	000033f8 	.word	0x000033f8
    6194:	000033f8 	.word	0x000033f8
    6198:	000033f8 	.word	0x000033f8
    619c:	000033f8 	.word	0x000033f8
    61a0:	000033f8 	.word	0x000033f8
    61a4:	000033f8 	.word	0x000033f8
    61a8:	000033f8 	.word	0x000033f8
    61ac:	000033f8 	.word	0x000033f8
    61b0:	000033f8 	.word	0x000033f8
    61b4:	000033f8 	.word	0x000033f8
    61b8:	000033f8 	.word	0x000033f8
    61bc:	000033f8 	.word	0x000033f8
    61c0:	000033f8 	.word	0x000033f8
    61c4:	000033f8 	.word	0x000033f8
    61c8:	000033f8 	.word	0x000033f8
    61cc:	000033f8 	.word	0x000033f8
    61d0:	000033f8 	.word	0x000033f8
    61d4:	000033f8 	.word	0x000033f8
    61d8:	000033f8 	.word	0x000033f8
    61dc:	000033f8 	.word	0x000033f8
    61e0:	000033f8 	.word	0x000033f8
    61e4:	000033f8 	.word	0x000033f8
    61e8:	000033f8 	.word	0x000033f8
    61ec:	000033f8 	.word	0x000033f8
    61f0:	000033f8 	.word	0x000033f8
    61f4:	000033f8 	.word	0x000033f8
    61f8:	000033f8 	.word	0x000033f8
    61fc:	000033f8 	.word	0x000033f8
    6200:	000033ec 	.word	0x000033ec
    6204:	000033ec 	.word	0x000033ec
    6208:	00003402 	.word	0x00003402
    620c:	00003402 	.word	0x00003402
    6210:	00003402 	.word	0x00003402
    6214:	00003402 	.word	0x00003402
    6218:	000038ee 	.word	0x000038ee
    621c:	00003966 	.word	0x00003966
    6220:	00003966 	.word	0x00003966
    6224:	0000390c 	.word	0x0000390c
    6228:	00003906 	.word	0x00003906
    622c:	00003912 	.word	0x00003912
    6230:	000038f4 	.word	0x000038f4
    6234:	00003918 	.word	0x00003918
    6238:	0000394c 	.word	0x0000394c
    623c:	00003a40 	.word	0x00003a40
    6240:	00003a90 	.word	0x00003a90
    6244:	00003a90 	.word	0x00003a90
    6248:	00003a8c 	.word	0x00003a8c
    624c:	00003a32 	.word	0x00003a32
    6250:	00003a52 	.word	0x00003a52
    6254:	00003a22 	.word	0x00003a22
    6258:	00003a64 	.word	0x00003a64
    625c:	00003a76 	.word	0x00003a76
    6260:	72677055 	.word	0x72677055
    6264:	6e696461 	.word	0x6e696461
    6268:	69662067 	.word	0x69662067
    626c:	61776d72 	.word	0x61776d72
    6270:	66206572 	.word	0x66206572
    6274:	206d6f72 	.word	0x206d6f72
    6278:	61636f6c 	.word	0x61636f6c
    627c:	6e6f6974 	.word	0x6e6f6974
    6280:	2e642520 	.word	0x2e642520
    6284:	0000000a 	.word	0x0000000a
    6288:	72677055 	.word	0x72677055
    628c:	20656461 	.word	0x20656461
    6290:	706d6f63 	.word	0x706d6f63
    6294:	6574656c 	.word	0x6574656c
    6298:	00000000 	.word	0x00000000
    629c:	74696e49 	.word	0x74696e49
    62a0:	6e6f6420 	.word	0x6e6f6420
    62a4:	00002e65 	.word	0x00002e65
    62a8:	61766e49 	.word	0x61766e49
    62ac:	2064696c 	.word	0x2064696c
    62b0:	73205746 	.word	0x73205746
    62b4:	2c746174 	.word	0x2c746174
    62b8:	69727720 	.word	0x69727720
    62bc:	676e6974 	.word	0x676e6974
    62c0:	66656420 	.word	0x66656420
    62c4:	746c7561 	.word	0x746c7561
    62c8:	00000000 	.word	0x00000000
    62cc:	72617453 	.word	0x72617453
    62d0:	676e6974 	.word	0x676e6974
    62d4:	70706120 	.word	0x70706120
    62d8:	00000000 	.word	0x00000000
    62dc:	62206e69 	.word	0x62206e69
    62e0:	00746f6f 	.word	0x00746f6f
    62e4:	00000043 	.word	0x00000043

000062e8 <_global_impure_ptr>:
    62e8:	20000018                                ... 

000062ec <__sf_fake_stdin>:
	...

0000630c <__sf_fake_stdout>:
	...

0000632c <__sf_fake_stderr>:
	...
    634c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    635c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    636c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    637c:	00006665                                ef..

00006380 <_init>:
    6380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6382:	46c0      	nop			; (mov r8, r8)
    6384:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6386:	bc08      	pop	{r3}
    6388:	469e      	mov	lr, r3
    638a:	4770      	bx	lr

0000638c <__init_array_start>:
    638c:	000000dd 	.word	0x000000dd

00006390 <_fini>:
    6390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6392:	46c0      	nop			; (mov r8, r8)
    6394:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6396:	bc08      	pop	{r3}
    6398:	469e      	mov	lr, r3
    639a:	4770      	bx	lr

0000639c <__fini_array_start>:
    639c:	000000b5 	.word	0x000000b5
