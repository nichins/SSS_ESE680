
ESE680A_ApplicationCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021d8  00002000  00002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  000041d8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c0  20000068  00004240  00010068  2**2
                  ALLOC
  3 .stack        00002000  20000128  00004300  00010068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00019638  00000000  00000000  000100e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000254c  00000000  00000000  00029721  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000420  00000000  00000000  0002bc6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000003e8  00000000  00000000  0002c08d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00018cdf  00000000  00000000  0002c475  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a15b  00000000  00000000  00045154  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00086454  00000000  00000000  0004f2af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000fe8  00000000  00000000  000d5704  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003baf  00000000  00000000  000d66ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <_sfixed>:
    2000:	20002128 	.word	0x20002128
    2004:	00003109 	.word	0x00003109
    2008:	00003105 	.word	0x00003105
    200c:	00003105 	.word	0x00003105
	...
    202c:	00003105 	.word	0x00003105
	...
    2038:	00003105 	.word	0x00003105
    203c:	00003105 	.word	0x00003105
    2040:	00003105 	.word	0x00003105
    2044:	00003105 	.word	0x00003105
    2048:	00003105 	.word	0x00003105
    204c:	00003105 	.word	0x00003105
    2050:	00003105 	.word	0x00003105
    2054:	00003105 	.word	0x00003105
    2058:	00003105 	.word	0x00003105
    205c:	00003105 	.word	0x00003105
    2060:	00003105 	.word	0x00003105
    2064:	000025a1 	.word	0x000025a1
    2068:	000025b1 	.word	0x000025b1
    206c:	000025c1 	.word	0x000025c1
    2070:	000025d1 	.word	0x000025d1
    2074:	000025e1 	.word	0x000025e1
    2078:	000025f1 	.word	0x000025f1
    207c:	00003105 	.word	0x00003105
    2080:	00003105 	.word	0x00003105
    2084:	00003105 	.word	0x00003105
    2088:	00003105 	.word	0x00003105
    208c:	00003105 	.word	0x00003105
    2090:	00003105 	.word	0x00003105
	...
    209c:	00003105 	.word	0x00003105
    20a0:	00003105 	.word	0x00003105
    20a4:	00003105 	.word	0x00003105
    20a8:	00003105 	.word	0x00003105
    20ac:	00003105 	.word	0x00003105
    20b0:	00000000 	.word	0x00000000

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000068 	.word	0x20000068
    20d4:	00000000 	.word	0x00000000
    20d8:	000041d8 	.word	0x000041d8

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	2000006c 	.word	0x2000006c
    2108:	000041d8 	.word	0x000041d8
    210c:	000041d8 	.word	0x000041d8
    2110:	00000000 	.word	0x00000000

00002114 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    2114:	4770      	bx	lr
    2116:	46c0      	nop			; (mov r8, r8)

00002118 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2118:	4b0c      	ldr	r3, [pc, #48]	; (214c <cpu_irq_enter_critical+0x34>)
    211a:	681b      	ldr	r3, [r3, #0]
    211c:	2b00      	cmp	r3, #0
    211e:	d110      	bne.n	2142 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2120:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2124:	2b00      	cmp	r3, #0
    2126:	d109      	bne.n	213c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2128:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    212a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    212e:	2200      	movs	r2, #0
    2130:	4b07      	ldr	r3, [pc, #28]	; (2150 <cpu_irq_enter_critical+0x38>)
    2132:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2134:	3201      	adds	r2, #1
    2136:	4b07      	ldr	r3, [pc, #28]	; (2154 <cpu_irq_enter_critical+0x3c>)
    2138:	701a      	strb	r2, [r3, #0]
    213a:	e002      	b.n	2142 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    213c:	2200      	movs	r2, #0
    213e:	4b05      	ldr	r3, [pc, #20]	; (2154 <cpu_irq_enter_critical+0x3c>)
    2140:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2142:	4a02      	ldr	r2, [pc, #8]	; (214c <cpu_irq_enter_critical+0x34>)
    2144:	6813      	ldr	r3, [r2, #0]
    2146:	3301      	adds	r3, #1
    2148:	6013      	str	r3, [r2, #0]
}
    214a:	4770      	bx	lr
    214c:	20000084 	.word	0x20000084
    2150:	20000000 	.word	0x20000000
    2154:	20000088 	.word	0x20000088

00002158 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2158:	4b08      	ldr	r3, [pc, #32]	; (217c <cpu_irq_leave_critical+0x24>)
    215a:	681a      	ldr	r2, [r3, #0]
    215c:	3a01      	subs	r2, #1
    215e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2160:	681b      	ldr	r3, [r3, #0]
    2162:	2b00      	cmp	r3, #0
    2164:	d109      	bne.n	217a <cpu_irq_leave_critical+0x22>
    2166:	4b06      	ldr	r3, [pc, #24]	; (2180 <cpu_irq_leave_critical+0x28>)
    2168:	781b      	ldrb	r3, [r3, #0]
    216a:	2b00      	cmp	r3, #0
    216c:	d005      	beq.n	217a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    216e:	2201      	movs	r2, #1
    2170:	4b04      	ldr	r3, [pc, #16]	; (2184 <cpu_irq_leave_critical+0x2c>)
    2172:	701a      	strb	r2, [r3, #0]
    2174:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2178:	b662      	cpsie	i
	}
}
    217a:	4770      	bx	lr
    217c:	20000084 	.word	0x20000084
    2180:	20000088 	.word	0x20000088
    2184:	20000000 	.word	0x20000000

00002188 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2188:	b500      	push	{lr}
    218a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    218c:	ab01      	add	r3, sp, #4
    218e:	2280      	movs	r2, #128	; 0x80
    2190:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2192:	780a      	ldrb	r2, [r1, #0]
    2194:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2196:	784a      	ldrb	r2, [r1, #1]
    2198:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    219a:	788a      	ldrb	r2, [r1, #2]
    219c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    219e:	0019      	movs	r1, r3
    21a0:	4b01      	ldr	r3, [pc, #4]	; (21a8 <port_pin_set_config+0x20>)
    21a2:	4798      	blx	r3
}
    21a4:	b003      	add	sp, #12
    21a6:	bd00      	pop	{pc}
    21a8:	000030a5 	.word	0x000030a5

000021ac <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    21ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ae:	465f      	mov	r7, fp
    21b0:	4656      	mov	r6, sl
    21b2:	464d      	mov	r5, r9
    21b4:	4644      	mov	r4, r8
    21b6:	b4f0      	push	{r4, r5, r6, r7}
    21b8:	b087      	sub	sp, #28
    21ba:	4680      	mov	r8, r0
    21bc:	9104      	str	r1, [sp, #16]
    21be:	0016      	movs	r6, r2
    21c0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    21c2:	2200      	movs	r2, #0
    21c4:	2300      	movs	r3, #0
    21c6:	2100      	movs	r1, #0
    21c8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    21ca:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    21cc:	2001      	movs	r0, #1
    21ce:	0021      	movs	r1, r4
    21d0:	9600      	str	r6, [sp, #0]
    21d2:	9701      	str	r7, [sp, #4]
    21d4:	465c      	mov	r4, fp
    21d6:	9403      	str	r4, [sp, #12]
    21d8:	4644      	mov	r4, r8
    21da:	9405      	str	r4, [sp, #20]
    21dc:	2420      	movs	r4, #32
    21de:	4264      	negs	r4, r4
    21e0:	190c      	adds	r4, r1, r4
    21e2:	d403      	bmi.n	21ec <long_division+0x40>
    21e4:	0005      	movs	r5, r0
    21e6:	40a5      	lsls	r5, r4
    21e8:	46a8      	mov	r8, r5
    21ea:	e004      	b.n	21f6 <long_division+0x4a>
    21ec:	2420      	movs	r4, #32
    21ee:	1a64      	subs	r4, r4, r1
    21f0:	0005      	movs	r5, r0
    21f2:	40e5      	lsrs	r5, r4
    21f4:	46a8      	mov	r8, r5
    21f6:	0004      	movs	r4, r0
    21f8:	408c      	lsls	r4, r1
    21fa:	46a1      	mov	r9, r4

		r = r << 1;
    21fc:	0014      	movs	r4, r2
    21fe:	001d      	movs	r5, r3
    2200:	18a4      	adds	r4, r4, r2
    2202:	415d      	adcs	r5, r3
    2204:	0022      	movs	r2, r4
    2206:	002b      	movs	r3, r5

		if (n & bit_shift) {
    2208:	9e05      	ldr	r6, [sp, #20]
    220a:	464f      	mov	r7, r9
    220c:	403e      	ands	r6, r7
    220e:	46b2      	mov	sl, r6
    2210:	9e04      	ldr	r6, [sp, #16]
    2212:	4647      	mov	r7, r8
    2214:	403e      	ands	r6, r7
    2216:	46b4      	mov	ip, r6
    2218:	4656      	mov	r6, sl
    221a:	4667      	mov	r7, ip
    221c:	433e      	orrs	r6, r7
    221e:	d003      	beq.n	2228 <long_division+0x7c>
			r |= 0x01;
    2220:	0006      	movs	r6, r0
    2222:	4326      	orrs	r6, r4
    2224:	0032      	movs	r2, r6
    2226:	002b      	movs	r3, r5
		}

		if (r >= d) {
    2228:	9c00      	ldr	r4, [sp, #0]
    222a:	9d01      	ldr	r5, [sp, #4]
    222c:	429d      	cmp	r5, r3
    222e:	d80e      	bhi.n	224e <long_division+0xa2>
    2230:	d101      	bne.n	2236 <long_division+0x8a>
    2232:	4294      	cmp	r4, r2
    2234:	d80b      	bhi.n	224e <long_division+0xa2>
			r = r - d;
    2236:	9c00      	ldr	r4, [sp, #0]
    2238:	9d01      	ldr	r5, [sp, #4]
    223a:	1b12      	subs	r2, r2, r4
    223c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    223e:	465c      	mov	r4, fp
    2240:	464d      	mov	r5, r9
    2242:	432c      	orrs	r4, r5
    2244:	46a3      	mov	fp, r4
    2246:	9c03      	ldr	r4, [sp, #12]
    2248:	4645      	mov	r5, r8
    224a:	432c      	orrs	r4, r5
    224c:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    224e:	3901      	subs	r1, #1
    2250:	d2c4      	bcs.n	21dc <long_division+0x30>
    2252:	9b03      	ldr	r3, [sp, #12]
			q |= bit_shift;
		}
	}

	return q;
}
    2254:	4658      	mov	r0, fp
    2256:	0019      	movs	r1, r3
    2258:	b007      	add	sp, #28
    225a:	bc3c      	pop	{r2, r3, r4, r5}
    225c:	4690      	mov	r8, r2
    225e:	4699      	mov	r9, r3
    2260:	46a2      	mov	sl, r4
    2262:	46ab      	mov	fp, r5
    2264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2266:	46c0      	nop			; (mov r8, r8)

00002268 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    2268:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    226a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    226c:	2340      	movs	r3, #64	; 0x40
    226e:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2270:	4281      	cmp	r1, r0
    2272:	d201      	bcs.n	2278 <_sercom_get_sync_baud_val+0x10>
    2274:	e00a      	b.n	228c <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
    2276:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    2278:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    227a:	1c63      	adds	r3, r4, #1
    227c:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    227e:	4288      	cmp	r0, r1
    2280:	d9f9      	bls.n	2276 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2282:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    2284:	2cff      	cmp	r4, #255	; 0xff
    2286:	d801      	bhi.n	228c <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    2288:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    228a:	2300      	movs	r3, #0
	}
}
    228c:	0018      	movs	r0, r3
    228e:	bd10      	pop	{r4, pc}

00002290 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    2290:	b5f0      	push	{r4, r5, r6, r7, lr}
    2292:	b083      	sub	sp, #12
    2294:	000f      	movs	r7, r1
    2296:	0016      	movs	r6, r2
    2298:	aa08      	add	r2, sp, #32
    229a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    229c:	0004      	movs	r4, r0
    229e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    22a0:	2240      	movs	r2, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    22a2:	42bc      	cmp	r4, r7
    22a4:	d836      	bhi.n	2314 <_sercom_get_async_baud_val+0x84>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    22a6:	2b00      	cmp	r3, #0
    22a8:	d112      	bne.n	22d0 <_sercom_get_async_baud_val+0x40>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
    22aa:	0002      	movs	r2, r0
    22ac:	0008      	movs	r0, r1
    22ae:	2100      	movs	r1, #0
    22b0:	4c1a      	ldr	r4, [pc, #104]	; (231c <_sercom_get_async_baud_val+0x8c>)
    22b2:	47a0      	blx	r4
    22b4:	0001      	movs	r1, r0
    22b6:	003a      	movs	r2, r7
    22b8:	2300      	movs	r3, #0
    22ba:	2000      	movs	r0, #0
    22bc:	4c18      	ldr	r4, [pc, #96]	; (2320 <_sercom_get_async_baud_val+0x90>)
    22be:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
    22c0:	2200      	movs	r2, #0
    22c2:	2301      	movs	r3, #1
    22c4:	1a12      	subs	r2, r2, r0
    22c6:	418b      	sbcs	r3, r1
    22c8:	0c12      	lsrs	r2, r2, #16
    22ca:	041b      	lsls	r3, r3, #16
    22cc:	431a      	orrs	r2, r3
    22ce:	e01f      	b.n	2310 <_sercom_get_async_baud_val+0x80>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    22d0:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    22d2:	2b01      	cmp	r3, #1
    22d4:	d11c      	bne.n	2310 <_sercom_get_async_baud_val+0x80>
		temp1 = ((uint64_t)baudrate * sample_num);
    22d6:	000a      	movs	r2, r1
    22d8:	2300      	movs	r3, #0
    22da:	2100      	movs	r1, #0
    22dc:	4c0f      	ldr	r4, [pc, #60]	; (231c <_sercom_get_async_baud_val+0x8c>)
    22de:	47a0      	blx	r4
    22e0:	0002      	movs	r2, r0
    22e2:	000b      	movs	r3, r1
    22e4:	9200      	str	r2, [sp, #0]
    22e6:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    22e8:	0038      	movs	r0, r7
    22ea:	2100      	movs	r1, #0
    22ec:	4c0c      	ldr	r4, [pc, #48]	; (2320 <_sercom_get_async_baud_val+0x90>)
    22ee:	47a0      	blx	r4
    22f0:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    22f2:	2240      	movs	r2, #64	; 0x40
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		temp1 = ((uint64_t)baudrate * sample_num);
		baud_int = long_division( peripheral_clock, temp1);
		if(baud_int > BAUD_INT_MAX) {
    22f4:	2380      	movs	r3, #128	; 0x80
    22f6:	019b      	lsls	r3, r3, #6
    22f8:	4298      	cmp	r0, r3
    22fa:	d80b      	bhi.n	2314 <_sercom_get_async_baud_val+0x84>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    22fc:	0f79      	lsrs	r1, r7, #29
    22fe:	00f8      	lsls	r0, r7, #3
    2300:	9a00      	ldr	r2, [sp, #0]
    2302:	9b01      	ldr	r3, [sp, #4]
    2304:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
    2306:	00ea      	lsls	r2, r5, #3
    2308:	1a82      	subs	r2, r0, r2
    230a:	b2d2      	uxtb	r2, r2
    230c:	0352      	lsls	r2, r2, #13
    230e:	432a      	orrs	r2, r5
	}

	*baudval = baud_calculated;
    2310:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    2312:	2200      	movs	r2, #0
}
    2314:	0010      	movs	r0, r2
    2316:	b003      	add	sp, #12
    2318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	00003569 	.word	0x00003569
    2320:	000021ad 	.word	0x000021ad

00002324 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2324:	b510      	push	{r4, lr}
    2326:	b082      	sub	sp, #8
    2328:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    232a:	4b0e      	ldr	r3, [pc, #56]	; (2364 <sercom_set_gclk_generator+0x40>)
    232c:	781b      	ldrb	r3, [r3, #0]
    232e:	2b00      	cmp	r3, #0
    2330:	d001      	beq.n	2336 <sercom_set_gclk_generator+0x12>
    2332:	2900      	cmp	r1, #0
    2334:	d00d      	beq.n	2352 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    2336:	a901      	add	r1, sp, #4
    2338:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    233a:	2013      	movs	r0, #19
    233c:	4b0a      	ldr	r3, [pc, #40]	; (2368 <sercom_set_gclk_generator+0x44>)
    233e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2340:	2013      	movs	r0, #19
    2342:	4b0a      	ldr	r3, [pc, #40]	; (236c <sercom_set_gclk_generator+0x48>)
    2344:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    2346:	4b07      	ldr	r3, [pc, #28]	; (2364 <sercom_set_gclk_generator+0x40>)
    2348:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    234a:	2201      	movs	r2, #1
    234c:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    234e:	2000      	movs	r0, #0
    2350:	e006      	b.n	2360 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    2352:	4b04      	ldr	r3, [pc, #16]	; (2364 <sercom_set_gclk_generator+0x40>)
    2354:	785b      	ldrb	r3, [r3, #1]
    2356:	4283      	cmp	r3, r0
    2358:	d001      	beq.n	235e <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    235a:	201d      	movs	r0, #29
    235c:	e000      	b.n	2360 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    235e:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    2360:	b002      	add	sp, #8
    2362:	bd10      	pop	{r4, pc}
    2364:	2000008c 	.word	0x2000008c
    2368:	00002fad 	.word	0x00002fad
    236c:	00002f21 	.word	0x00002f21

00002370 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2370:	4b44      	ldr	r3, [pc, #272]	; (2484 <_sercom_get_default_pad+0x114>)
    2372:	4298      	cmp	r0, r3
    2374:	d033      	beq.n	23de <_sercom_get_default_pad+0x6e>
    2376:	d806      	bhi.n	2386 <_sercom_get_default_pad+0x16>
    2378:	4b43      	ldr	r3, [pc, #268]	; (2488 <_sercom_get_default_pad+0x118>)
    237a:	4298      	cmp	r0, r3
    237c:	d00d      	beq.n	239a <_sercom_get_default_pad+0x2a>
    237e:	4b43      	ldr	r3, [pc, #268]	; (248c <_sercom_get_default_pad+0x11c>)
    2380:	4298      	cmp	r0, r3
    2382:	d01b      	beq.n	23bc <_sercom_get_default_pad+0x4c>
    2384:	e06f      	b.n	2466 <_sercom_get_default_pad+0xf6>
    2386:	4b42      	ldr	r3, [pc, #264]	; (2490 <_sercom_get_default_pad+0x120>)
    2388:	4298      	cmp	r0, r3
    238a:	d04a      	beq.n	2422 <_sercom_get_default_pad+0xb2>
    238c:	4b41      	ldr	r3, [pc, #260]	; (2494 <_sercom_get_default_pad+0x124>)
    238e:	4298      	cmp	r0, r3
    2390:	d058      	beq.n	2444 <_sercom_get_default_pad+0xd4>
    2392:	4b41      	ldr	r3, [pc, #260]	; (2498 <_sercom_get_default_pad+0x128>)
    2394:	4298      	cmp	r0, r3
    2396:	d166      	bne.n	2466 <_sercom_get_default_pad+0xf6>
    2398:	e032      	b.n	2400 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    239a:	2901      	cmp	r1, #1
    239c:	d006      	beq.n	23ac <_sercom_get_default_pad+0x3c>
    239e:	2900      	cmp	r1, #0
    23a0:	d063      	beq.n	246a <_sercom_get_default_pad+0xfa>
    23a2:	2902      	cmp	r1, #2
    23a4:	d006      	beq.n	23b4 <_sercom_get_default_pad+0x44>
    23a6:	2903      	cmp	r1, #3
    23a8:	d006      	beq.n	23b8 <_sercom_get_default_pad+0x48>
    23aa:	e001      	b.n	23b0 <_sercom_get_default_pad+0x40>
    23ac:	483b      	ldr	r0, [pc, #236]	; (249c <_sercom_get_default_pad+0x12c>)
    23ae:	e067      	b.n	2480 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    23b0:	2000      	movs	r0, #0
    23b2:	e065      	b.n	2480 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    23b4:	483a      	ldr	r0, [pc, #232]	; (24a0 <_sercom_get_default_pad+0x130>)
    23b6:	e063      	b.n	2480 <_sercom_get_default_pad+0x110>
    23b8:	483a      	ldr	r0, [pc, #232]	; (24a4 <_sercom_get_default_pad+0x134>)
    23ba:	e061      	b.n	2480 <_sercom_get_default_pad+0x110>
    23bc:	2901      	cmp	r1, #1
    23be:	d006      	beq.n	23ce <_sercom_get_default_pad+0x5e>
    23c0:	2900      	cmp	r1, #0
    23c2:	d054      	beq.n	246e <_sercom_get_default_pad+0xfe>
    23c4:	2902      	cmp	r1, #2
    23c6:	d006      	beq.n	23d6 <_sercom_get_default_pad+0x66>
    23c8:	2903      	cmp	r1, #3
    23ca:	d006      	beq.n	23da <_sercom_get_default_pad+0x6a>
    23cc:	e001      	b.n	23d2 <_sercom_get_default_pad+0x62>
    23ce:	4836      	ldr	r0, [pc, #216]	; (24a8 <_sercom_get_default_pad+0x138>)
    23d0:	e056      	b.n	2480 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    23d2:	2000      	movs	r0, #0
    23d4:	e054      	b.n	2480 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    23d6:	4835      	ldr	r0, [pc, #212]	; (24ac <_sercom_get_default_pad+0x13c>)
    23d8:	e052      	b.n	2480 <_sercom_get_default_pad+0x110>
    23da:	4835      	ldr	r0, [pc, #212]	; (24b0 <_sercom_get_default_pad+0x140>)
    23dc:	e050      	b.n	2480 <_sercom_get_default_pad+0x110>
    23de:	2901      	cmp	r1, #1
    23e0:	d006      	beq.n	23f0 <_sercom_get_default_pad+0x80>
    23e2:	2900      	cmp	r1, #0
    23e4:	d045      	beq.n	2472 <_sercom_get_default_pad+0x102>
    23e6:	2902      	cmp	r1, #2
    23e8:	d006      	beq.n	23f8 <_sercom_get_default_pad+0x88>
    23ea:	2903      	cmp	r1, #3
    23ec:	d006      	beq.n	23fc <_sercom_get_default_pad+0x8c>
    23ee:	e001      	b.n	23f4 <_sercom_get_default_pad+0x84>
    23f0:	4830      	ldr	r0, [pc, #192]	; (24b4 <_sercom_get_default_pad+0x144>)
    23f2:	e045      	b.n	2480 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    23f4:	2000      	movs	r0, #0
    23f6:	e043      	b.n	2480 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    23f8:	482f      	ldr	r0, [pc, #188]	; (24b8 <_sercom_get_default_pad+0x148>)
    23fa:	e041      	b.n	2480 <_sercom_get_default_pad+0x110>
    23fc:	482f      	ldr	r0, [pc, #188]	; (24bc <_sercom_get_default_pad+0x14c>)
    23fe:	e03f      	b.n	2480 <_sercom_get_default_pad+0x110>
    2400:	2901      	cmp	r1, #1
    2402:	d006      	beq.n	2412 <_sercom_get_default_pad+0xa2>
    2404:	2900      	cmp	r1, #0
    2406:	d036      	beq.n	2476 <_sercom_get_default_pad+0x106>
    2408:	2902      	cmp	r1, #2
    240a:	d006      	beq.n	241a <_sercom_get_default_pad+0xaa>
    240c:	2903      	cmp	r1, #3
    240e:	d006      	beq.n	241e <_sercom_get_default_pad+0xae>
    2410:	e001      	b.n	2416 <_sercom_get_default_pad+0xa6>
    2412:	482b      	ldr	r0, [pc, #172]	; (24c0 <_sercom_get_default_pad+0x150>)
    2414:	e034      	b.n	2480 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    2416:	2000      	movs	r0, #0
    2418:	e032      	b.n	2480 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    241a:	482a      	ldr	r0, [pc, #168]	; (24c4 <_sercom_get_default_pad+0x154>)
    241c:	e030      	b.n	2480 <_sercom_get_default_pad+0x110>
    241e:	482a      	ldr	r0, [pc, #168]	; (24c8 <_sercom_get_default_pad+0x158>)
    2420:	e02e      	b.n	2480 <_sercom_get_default_pad+0x110>
    2422:	2901      	cmp	r1, #1
    2424:	d006      	beq.n	2434 <_sercom_get_default_pad+0xc4>
    2426:	2900      	cmp	r1, #0
    2428:	d027      	beq.n	247a <_sercom_get_default_pad+0x10a>
    242a:	2902      	cmp	r1, #2
    242c:	d006      	beq.n	243c <_sercom_get_default_pad+0xcc>
    242e:	2903      	cmp	r1, #3
    2430:	d006      	beq.n	2440 <_sercom_get_default_pad+0xd0>
    2432:	e001      	b.n	2438 <_sercom_get_default_pad+0xc8>
    2434:	4825      	ldr	r0, [pc, #148]	; (24cc <_sercom_get_default_pad+0x15c>)
    2436:	e023      	b.n	2480 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    2438:	2000      	movs	r0, #0
    243a:	e021      	b.n	2480 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    243c:	4824      	ldr	r0, [pc, #144]	; (24d0 <_sercom_get_default_pad+0x160>)
    243e:	e01f      	b.n	2480 <_sercom_get_default_pad+0x110>
    2440:	4824      	ldr	r0, [pc, #144]	; (24d4 <_sercom_get_default_pad+0x164>)
    2442:	e01d      	b.n	2480 <_sercom_get_default_pad+0x110>
    2444:	2901      	cmp	r1, #1
    2446:	d006      	beq.n	2456 <_sercom_get_default_pad+0xe6>
    2448:	2900      	cmp	r1, #0
    244a:	d018      	beq.n	247e <_sercom_get_default_pad+0x10e>
    244c:	2902      	cmp	r1, #2
    244e:	d006      	beq.n	245e <_sercom_get_default_pad+0xee>
    2450:	2903      	cmp	r1, #3
    2452:	d006      	beq.n	2462 <_sercom_get_default_pad+0xf2>
    2454:	e001      	b.n	245a <_sercom_get_default_pad+0xea>
    2456:	4820      	ldr	r0, [pc, #128]	; (24d8 <_sercom_get_default_pad+0x168>)
    2458:	e012      	b.n	2480 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    245a:	2000      	movs	r0, #0
    245c:	e010      	b.n	2480 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    245e:	481f      	ldr	r0, [pc, #124]	; (24dc <_sercom_get_default_pad+0x16c>)
    2460:	e00e      	b.n	2480 <_sercom_get_default_pad+0x110>
    2462:	481f      	ldr	r0, [pc, #124]	; (24e0 <_sercom_get_default_pad+0x170>)
    2464:	e00c      	b.n	2480 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    2466:	2000      	movs	r0, #0
    2468:	e00a      	b.n	2480 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    246a:	481e      	ldr	r0, [pc, #120]	; (24e4 <_sercom_get_default_pad+0x174>)
    246c:	e008      	b.n	2480 <_sercom_get_default_pad+0x110>
    246e:	2003      	movs	r0, #3
    2470:	e006      	b.n	2480 <_sercom_get_default_pad+0x110>
    2472:	481d      	ldr	r0, [pc, #116]	; (24e8 <_sercom_get_default_pad+0x178>)
    2474:	e004      	b.n	2480 <_sercom_get_default_pad+0x110>
    2476:	481d      	ldr	r0, [pc, #116]	; (24ec <_sercom_get_default_pad+0x17c>)
    2478:	e002      	b.n	2480 <_sercom_get_default_pad+0x110>
    247a:	481d      	ldr	r0, [pc, #116]	; (24f0 <_sercom_get_default_pad+0x180>)
    247c:	e000      	b.n	2480 <_sercom_get_default_pad+0x110>
    247e:	481d      	ldr	r0, [pc, #116]	; (24f4 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    2480:	4770      	bx	lr
    2482:	46c0      	nop			; (mov r8, r8)
    2484:	42001000 	.word	0x42001000
    2488:	42000800 	.word	0x42000800
    248c:	42000c00 	.word	0x42000c00
    2490:	42001800 	.word	0x42001800
    2494:	42001c00 	.word	0x42001c00
    2498:	42001400 	.word	0x42001400
    249c:	00050003 	.word	0x00050003
    24a0:	00060003 	.word	0x00060003
    24a4:	00070003 	.word	0x00070003
    24a8:	00010003 	.word	0x00010003
    24ac:	001e0003 	.word	0x001e0003
    24b0:	001f0003 	.word	0x001f0003
    24b4:	00090003 	.word	0x00090003
    24b8:	000a0003 	.word	0x000a0003
    24bc:	000b0003 	.word	0x000b0003
    24c0:	00110003 	.word	0x00110003
    24c4:	00120003 	.word	0x00120003
    24c8:	00130003 	.word	0x00130003
    24cc:	000d0003 	.word	0x000d0003
    24d0:	000e0003 	.word	0x000e0003
    24d4:	000f0003 	.word	0x000f0003
    24d8:	00170003 	.word	0x00170003
    24dc:	00180003 	.word	0x00180003
    24e0:	00190003 	.word	0x00190003
    24e4:	00040003 	.word	0x00040003
    24e8:	00080003 	.word	0x00080003
    24ec:	00100003 	.word	0x00100003
    24f0:	000c0003 	.word	0x000c0003
    24f4:	00160003 	.word	0x00160003

000024f8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    24f8:	b530      	push	{r4, r5, lr}
    24fa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    24fc:	4b0c      	ldr	r3, [pc, #48]	; (2530 <_sercom_get_sercom_inst_index+0x38>)
    24fe:	466a      	mov	r2, sp
    2500:	cb32      	ldmia	r3!, {r1, r4, r5}
    2502:	c232      	stmia	r2!, {r1, r4, r5}
    2504:	cb32      	ldmia	r3!, {r1, r4, r5}
    2506:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2508:	9b00      	ldr	r3, [sp, #0]
    250a:	4283      	cmp	r3, r0
    250c:	d006      	beq.n	251c <_sercom_get_sercom_inst_index+0x24>
    250e:	2301      	movs	r3, #1
    2510:	009a      	lsls	r2, r3, #2
    2512:	4669      	mov	r1, sp
    2514:	5852      	ldr	r2, [r2, r1]
    2516:	4282      	cmp	r2, r0
    2518:	d103      	bne.n	2522 <_sercom_get_sercom_inst_index+0x2a>
    251a:	e000      	b.n	251e <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    251c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    251e:	b2d8      	uxtb	r0, r3
    2520:	e003      	b.n	252a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2522:	3301      	adds	r3, #1
    2524:	2b06      	cmp	r3, #6
    2526:	d1f3      	bne.n	2510 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2528:	2000      	movs	r0, #0
}
    252a:	b007      	add	sp, #28
    252c:	bd30      	pop	{r4, r5, pc}
    252e:	46c0      	nop			; (mov r8, r8)
    2530:	000040dc 	.word	0x000040dc

00002534 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2534:	4770      	bx	lr
    2536:	46c0      	nop			; (mov r8, r8)

00002538 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2538:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    253a:	4b0a      	ldr	r3, [pc, #40]	; (2564 <_sercom_set_handler+0x2c>)
    253c:	781b      	ldrb	r3, [r3, #0]
    253e:	2b00      	cmp	r3, #0
    2540:	d10c      	bne.n	255c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2542:	4f09      	ldr	r7, [pc, #36]	; (2568 <_sercom_set_handler+0x30>)
    2544:	4e09      	ldr	r6, [pc, #36]	; (256c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2546:	4d0a      	ldr	r5, [pc, #40]	; (2570 <_sercom_set_handler+0x38>)
    2548:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    254a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    254c:	195a      	adds	r2, r3, r5
    254e:	6014      	str	r4, [r2, #0]
    2550:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2552:	2b18      	cmp	r3, #24
    2554:	d1f9      	bne.n	254a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    2556:	2201      	movs	r2, #1
    2558:	4b02      	ldr	r3, [pc, #8]	; (2564 <_sercom_set_handler+0x2c>)
    255a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    255c:	0080      	lsls	r0, r0, #2
    255e:	4b02      	ldr	r3, [pc, #8]	; (2568 <_sercom_set_handler+0x30>)
    2560:	50c1      	str	r1, [r0, r3]
}
    2562:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2564:	2000008e 	.word	0x2000008e
    2568:	20000090 	.word	0x20000090
    256c:	00002535 	.word	0x00002535
    2570:	20000100 	.word	0x20000100

00002574 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2574:	b510      	push	{r4, lr}
    2576:	b082      	sub	sp, #8
    2578:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    257a:	2206      	movs	r2, #6
    257c:	4905      	ldr	r1, [pc, #20]	; (2594 <_sercom_get_interrupt_vector+0x20>)
    257e:	4668      	mov	r0, sp
    2580:	4b05      	ldr	r3, [pc, #20]	; (2598 <_sercom_get_interrupt_vector+0x24>)
    2582:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2584:	0020      	movs	r0, r4
    2586:	4b05      	ldr	r3, [pc, #20]	; (259c <_sercom_get_interrupt_vector+0x28>)
    2588:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    258a:	466b      	mov	r3, sp
    258c:	5618      	ldrsb	r0, [r3, r0]
}
    258e:	b002      	add	sp, #8
    2590:	bd10      	pop	{r4, pc}
    2592:	46c0      	nop			; (mov r8, r8)
    2594:	000040f4 	.word	0x000040f4
    2598:	0000360d 	.word	0x0000360d
    259c:	000024f9 	.word	0x000024f9

000025a0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    25a0:	b510      	push	{r4, lr}
    25a2:	4b02      	ldr	r3, [pc, #8]	; (25ac <SERCOM0_Handler+0xc>)
    25a4:	681b      	ldr	r3, [r3, #0]
    25a6:	2000      	movs	r0, #0
    25a8:	4798      	blx	r3
    25aa:	bd10      	pop	{r4, pc}
    25ac:	20000090 	.word	0x20000090

000025b0 <SERCOM1_Handler>:
    25b0:	b510      	push	{r4, lr}
    25b2:	4b02      	ldr	r3, [pc, #8]	; (25bc <SERCOM1_Handler+0xc>)
    25b4:	685b      	ldr	r3, [r3, #4]
    25b6:	2001      	movs	r0, #1
    25b8:	4798      	blx	r3
    25ba:	bd10      	pop	{r4, pc}
    25bc:	20000090 	.word	0x20000090

000025c0 <SERCOM2_Handler>:
    25c0:	b510      	push	{r4, lr}
    25c2:	4b02      	ldr	r3, [pc, #8]	; (25cc <SERCOM2_Handler+0xc>)
    25c4:	689b      	ldr	r3, [r3, #8]
    25c6:	2002      	movs	r0, #2
    25c8:	4798      	blx	r3
    25ca:	bd10      	pop	{r4, pc}
    25cc:	20000090 	.word	0x20000090

000025d0 <SERCOM3_Handler>:
    25d0:	b510      	push	{r4, lr}
    25d2:	4b02      	ldr	r3, [pc, #8]	; (25dc <SERCOM3_Handler+0xc>)
    25d4:	68db      	ldr	r3, [r3, #12]
    25d6:	2003      	movs	r0, #3
    25d8:	4798      	blx	r3
    25da:	bd10      	pop	{r4, pc}
    25dc:	20000090 	.word	0x20000090

000025e0 <SERCOM4_Handler>:
    25e0:	b510      	push	{r4, lr}
    25e2:	4b02      	ldr	r3, [pc, #8]	; (25ec <SERCOM4_Handler+0xc>)
    25e4:	691b      	ldr	r3, [r3, #16]
    25e6:	2004      	movs	r0, #4
    25e8:	4798      	blx	r3
    25ea:	bd10      	pop	{r4, pc}
    25ec:	20000090 	.word	0x20000090

000025f0 <SERCOM5_Handler>:
    25f0:	b510      	push	{r4, lr}
    25f2:	4b02      	ldr	r3, [pc, #8]	; (25fc <SERCOM5_Handler+0xc>)
    25f4:	695b      	ldr	r3, [r3, #20]
    25f6:	2005      	movs	r0, #5
    25f8:	4798      	blx	r3
    25fa:	bd10      	pop	{r4, pc}
    25fc:	20000090 	.word	0x20000090

00002600 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2600:	b5f0      	push	{r4, r5, r6, r7, lr}
    2602:	465f      	mov	r7, fp
    2604:	4656      	mov	r6, sl
    2606:	464d      	mov	r5, r9
    2608:	4644      	mov	r4, r8
    260a:	b4f0      	push	{r4, r5, r6, r7}
    260c:	b091      	sub	sp, #68	; 0x44
    260e:	0005      	movs	r5, r0
    2610:	000c      	movs	r4, r1
    2612:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2614:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2616:	0008      	movs	r0, r1
    2618:	4bbb      	ldr	r3, [pc, #748]	; (2908 <usart_init+0x308>)
    261a:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    261c:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    261e:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2620:	07d2      	lsls	r2, r2, #31
    2622:	d500      	bpl.n	2626 <usart_init+0x26>
    2624:	e167      	b.n	28f6 <usart_init+0x2f6>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2626:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    2628:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    262a:	0792      	lsls	r2, r2, #30
    262c:	d500      	bpl.n	2630 <usart_init+0x30>
    262e:	e162      	b.n	28f6 <usart_init+0x2f6>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    2630:	49b6      	ldr	r1, [pc, #728]	; (290c <usart_init+0x30c>)
    2632:	6a0a      	ldr	r2, [r1, #32]
    2634:	1c87      	adds	r7, r0, #2
    2636:	3b1b      	subs	r3, #27
    2638:	40bb      	lsls	r3, r7
    263a:	4313      	orrs	r3, r2
    263c:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    263e:	a90f      	add	r1, sp, #60	; 0x3c
    2640:	272d      	movs	r7, #45	; 0x2d
    2642:	5df3      	ldrb	r3, [r6, r7]
    2644:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2646:	3014      	adds	r0, #20
    2648:	b2c3      	uxtb	r3, r0
    264a:	9302      	str	r3, [sp, #8]
    264c:	0018      	movs	r0, r3
    264e:	4bb0      	ldr	r3, [pc, #704]	; (2910 <usart_init+0x310>)
    2650:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2652:	9802      	ldr	r0, [sp, #8]
    2654:	4baf      	ldr	r3, [pc, #700]	; (2914 <usart_init+0x314>)
    2656:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2658:	5df0      	ldrb	r0, [r6, r7]
    265a:	2100      	movs	r1, #0
    265c:	4bae      	ldr	r3, [pc, #696]	; (2918 <usart_init+0x318>)
    265e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    2660:	7af3      	ldrb	r3, [r6, #11]
    2662:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    2664:	2324      	movs	r3, #36	; 0x24
    2666:	5cf3      	ldrb	r3, [r6, r3]
    2668:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    266a:	2325      	movs	r3, #37	; 0x25
    266c:	5cf3      	ldrb	r3, [r6, r3]
    266e:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    2670:	7ef3      	ldrb	r3, [r6, #27]
    2672:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2674:	7f33      	ldrb	r3, [r6, #28]
    2676:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2678:	682b      	ldr	r3, [r5, #0]
    267a:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    267c:	0018      	movs	r0, r3
    267e:	4ba2      	ldr	r3, [pc, #648]	; (2908 <usart_init+0x308>)
    2680:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2682:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    2684:	2200      	movs	r2, #0
    2686:	230e      	movs	r3, #14
    2688:	a906      	add	r1, sp, #24
    268a:	468c      	mov	ip, r1
    268c:	4463      	add	r3, ip
    268e:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    2690:	8a32      	ldrh	r2, [r6, #16]
    2692:	9202      	str	r2, [sp, #8]
    2694:	2380      	movs	r3, #128	; 0x80
    2696:	01db      	lsls	r3, r3, #7
    2698:	429a      	cmp	r2, r3
    269a:	d01a      	beq.n	26d2 <usart_init+0xd2>
    269c:	d804      	bhi.n	26a8 <usart_init+0xa8>
    269e:	2380      	movs	r3, #128	; 0x80
    26a0:	019b      	lsls	r3, r3, #6
    26a2:	429a      	cmp	r2, r3
    26a4:	d00b      	beq.n	26be <usart_init+0xbe>
    26a6:	e107      	b.n	28b8 <usart_init+0x2b8>
    26a8:	23c0      	movs	r3, #192	; 0xc0
    26aa:	01db      	lsls	r3, r3, #7
    26ac:	9a02      	ldr	r2, [sp, #8]
    26ae:	429a      	cmp	r2, r3
    26b0:	d00a      	beq.n	26c8 <usart_init+0xc8>
    26b2:	2380      	movs	r3, #128	; 0x80
    26b4:	021b      	lsls	r3, r3, #8
    26b6:	429a      	cmp	r2, r3
    26b8:	d100      	bne.n	26bc <usart_init+0xbc>
    26ba:	e102      	b.n	28c2 <usart_init+0x2c2>
    26bc:	e0fc      	b.n	28b8 <usart_init+0x2b8>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    26be:	2310      	movs	r3, #16
    26c0:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    26c2:	3b0f      	subs	r3, #15
    26c4:	9307      	str	r3, [sp, #28]
    26c6:	e100      	b.n	28ca <usart_init+0x2ca>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    26c8:	2308      	movs	r3, #8
    26ca:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    26cc:	3b07      	subs	r3, #7
    26ce:	9307      	str	r3, [sp, #28]
    26d0:	e0fb      	b.n	28ca <usart_init+0x2ca>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    26d2:	6833      	ldr	r3, [r6, #0]
    26d4:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    26d6:	68f3      	ldr	r3, [r6, #12]
    26d8:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    26da:	6973      	ldr	r3, [r6, #20]
    26dc:	4698      	mov	r8, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    26de:	7e33      	ldrb	r3, [r6, #24]
    26e0:	469b      	mov	fp, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    26e2:	2326      	movs	r3, #38	; 0x26
    26e4:	5cf3      	ldrb	r3, [r6, r3]
    26e6:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    26e8:	6873      	ldr	r3, [r6, #4]
    26ea:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    26ec:	2b00      	cmp	r3, #0
    26ee:	d015      	beq.n	271c <usart_init+0x11c>
    26f0:	2380      	movs	r3, #128	; 0x80
    26f2:	055b      	lsls	r3, r3, #21
    26f4:	459a      	cmp	sl, r3
    26f6:	d136      	bne.n	2766 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    26f8:	2327      	movs	r3, #39	; 0x27
    26fa:	5cf3      	ldrb	r3, [r6, r3]
    26fc:	2b00      	cmp	r3, #0
    26fe:	d136      	bne.n	276e <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2700:	6a33      	ldr	r3, [r6, #32]
    2702:	001f      	movs	r7, r3
    2704:	b2c0      	uxtb	r0, r0
    2706:	4b85      	ldr	r3, [pc, #532]	; (291c <usart_init+0x31c>)
    2708:	4798      	blx	r3
    270a:	0001      	movs	r1, r0
    270c:	220e      	movs	r2, #14
    270e:	ab06      	add	r3, sp, #24
    2710:	469c      	mov	ip, r3
    2712:	4462      	add	r2, ip
    2714:	0038      	movs	r0, r7
    2716:	4b82      	ldr	r3, [pc, #520]	; (2920 <usart_init+0x320>)
    2718:	4798      	blx	r3
    271a:	e025      	b.n	2768 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    271c:	2308      	movs	r3, #8
    271e:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2720:	2300      	movs	r3, #0
    2722:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    2724:	2327      	movs	r3, #39	; 0x27
    2726:	5cf3      	ldrb	r3, [r6, r3]
    2728:	2b00      	cmp	r3, #0
    272a:	d00b      	beq.n	2744 <usart_init+0x144>
				status_code =
    272c:	9b06      	ldr	r3, [sp, #24]
    272e:	9300      	str	r3, [sp, #0]
    2730:	9b07      	ldr	r3, [sp, #28]
    2732:	220e      	movs	r2, #14
    2734:	a906      	add	r1, sp, #24
    2736:	468c      	mov	ip, r1
    2738:	4462      	add	r2, ip
    273a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    273c:	6a30      	ldr	r0, [r6, #32]
    273e:	4f79      	ldr	r7, [pc, #484]	; (2924 <usart_init+0x324>)
    2740:	47b8      	blx	r7
    2742:	e011      	b.n	2768 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    2744:	6a33      	ldr	r3, [r6, #32]
    2746:	001f      	movs	r7, r3
    2748:	b2c0      	uxtb	r0, r0
    274a:	4b74      	ldr	r3, [pc, #464]	; (291c <usart_init+0x31c>)
    274c:	4798      	blx	r3
    274e:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    2750:	9b06      	ldr	r3, [sp, #24]
    2752:	9300      	str	r3, [sp, #0]
    2754:	9b07      	ldr	r3, [sp, #28]
    2756:	220e      	movs	r2, #14
    2758:	a806      	add	r0, sp, #24
    275a:	4684      	mov	ip, r0
    275c:	4462      	add	r2, ip
    275e:	0038      	movs	r0, r7
    2760:	4f70      	ldr	r7, [pc, #448]	; (2924 <usart_init+0x324>)
    2762:	47b8      	blx	r7
    2764:	e000      	b.n	2768 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    2766:	2000      	movs	r0, #0
    2768:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    276a:	d000      	beq.n	276e <usart_init+0x16e>
    276c:	e0c3      	b.n	28f6 <usart_init+0x2f6>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    276e:	7e73      	ldrb	r3, [r6, #25]
    2770:	2b00      	cmp	r3, #0
    2772:	d002      	beq.n	277a <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2774:	7eb3      	ldrb	r3, [r6, #26]
    2776:	464a      	mov	r2, r9
    2778:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    277a:	682a      	ldr	r2, [r5, #0]
    277c:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    277e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2780:	2b00      	cmp	r3, #0
    2782:	d1fc      	bne.n	277e <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    2784:	330e      	adds	r3, #14
    2786:	aa06      	add	r2, sp, #24
    2788:	4694      	mov	ip, r2
    278a:	4463      	add	r3, ip
    278c:	881b      	ldrh	r3, [r3, #0]
    278e:	464a      	mov	r2, r9
    2790:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    2792:	9b04      	ldr	r3, [sp, #16]
    2794:	9a03      	ldr	r2, [sp, #12]
    2796:	4313      	orrs	r3, r2
    2798:	4642      	mov	r2, r8
    279a:	4313      	orrs	r3, r2
    279c:	4652      	mov	r2, sl
    279e:	4313      	orrs	r3, r2
    27a0:	433b      	orrs	r3, r7
    27a2:	465a      	mov	r2, fp
    27a4:	0212      	lsls	r2, r2, #8
    27a6:	4313      	orrs	r3, r2
    27a8:	9a05      	ldr	r2, [sp, #20]
    27aa:	0757      	lsls	r7, r2, #29
    27ac:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    27ae:	2327      	movs	r3, #39	; 0x27
    27b0:	5cf3      	ldrb	r3, [r6, r3]
    27b2:	2b00      	cmp	r3, #0
    27b4:	d101      	bne.n	27ba <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    27b6:	3304      	adds	r3, #4
    27b8:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    27ba:	7e71      	ldrb	r1, [r6, #25]
    27bc:	0289      	lsls	r1, r1, #10
    27be:	7f33      	ldrb	r3, [r6, #28]
    27c0:	025b      	lsls	r3, r3, #9
    27c2:	4319      	orrs	r1, r3
    27c4:	7f73      	ldrb	r3, [r6, #29]
    27c6:	021b      	lsls	r3, r3, #8
    27c8:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    27ca:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    27cc:	5cf3      	ldrb	r3, [r6, r3]
    27ce:	045b      	lsls	r3, r3, #17
    27d0:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    27d2:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    27d4:	5cf0      	ldrb	r0, [r6, r3]
    27d6:	0400      	lsls	r0, r0, #16
    27d8:	000a      	movs	r2, r1
    27da:	4302      	orrs	r2, r0
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
	ctrlb |= (uint32_t)config->character_size;
    27dc:	7ab1      	ldrb	r1, [r6, #10]
    27de:	7af3      	ldrb	r3, [r6, #11]
    27e0:	4319      	orrs	r1, r3
    27e2:	4311      	orrs	r1, r2
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    27e4:	8933      	ldrh	r3, [r6, #8]
    27e6:	2bff      	cmp	r3, #255	; 0xff
    27e8:	d004      	beq.n	27f4 <usart_init+0x1f4>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    27ea:	2280      	movs	r2, #128	; 0x80
    27ec:	0452      	lsls	r2, r2, #17
    27ee:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    27f0:	4319      	orrs	r1, r3
    27f2:	e005      	b.n	2800 <usart_init+0x200>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    27f4:	7ef3      	ldrb	r3, [r6, #27]
    27f6:	2b00      	cmp	r3, #0
    27f8:	d002      	beq.n	2800 <usart_init+0x200>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    27fa:	2380      	movs	r3, #128	; 0x80
    27fc:	04db      	lsls	r3, r3, #19
    27fe:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    2800:	232c      	movs	r3, #44	; 0x2c
    2802:	5cf3      	ldrb	r3, [r6, r3]
    2804:	2b00      	cmp	r3, #0
    2806:	d103      	bne.n	2810 <usart_init+0x210>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2808:	4b47      	ldr	r3, [pc, #284]	; (2928 <usart_init+0x328>)
    280a:	789b      	ldrb	r3, [r3, #2]
    280c:	079b      	lsls	r3, r3, #30
    280e:	d501      	bpl.n	2814 <usart_init+0x214>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2810:	2380      	movs	r3, #128	; 0x80
    2812:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2814:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2816:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2818:	2b00      	cmp	r3, #0
    281a:	d1fc      	bne.n	2816 <usart_init+0x216>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    281c:	464b      	mov	r3, r9
    281e:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2820:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2822:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2824:	2b00      	cmp	r3, #0
    2826:	d1fc      	bne.n	2822 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    2828:	464b      	mov	r3, r9
    282a:	601f      	str	r7, [r3, #0]
    282c:	ab0e      	add	r3, sp, #56	; 0x38
    282e:	2280      	movs	r2, #128	; 0x80
    2830:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2832:	2200      	movs	r2, #0
    2834:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2836:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2838:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    283a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    283c:	930a      	str	r3, [sp, #40]	; 0x28
    283e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2840:	930b      	str	r3, [sp, #44]	; 0x2c
    2842:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2844:	930c      	str	r3, [sp, #48]	; 0x30
    2846:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2848:	9302      	str	r3, [sp, #8]
    284a:	930d      	str	r3, [sp, #52]	; 0x34
    284c:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    284e:	ae0e      	add	r6, sp, #56	; 0x38
    2850:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2852:	00bb      	lsls	r3, r7, #2
    2854:	aa0a      	add	r2, sp, #40	; 0x28
    2856:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    2858:	2800      	cmp	r0, #0
    285a:	d102      	bne.n	2862 <usart_init+0x262>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    285c:	0020      	movs	r0, r4
    285e:	4b33      	ldr	r3, [pc, #204]	; (292c <usart_init+0x32c>)
    2860:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2862:	1c43      	adds	r3, r0, #1
    2864:	d005      	beq.n	2872 <usart_init+0x272>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2866:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2868:	0c00      	lsrs	r0, r0, #16
    286a:	b2c0      	uxtb	r0, r0
    286c:	0031      	movs	r1, r6
    286e:	4b30      	ldr	r3, [pc, #192]	; (2930 <usart_init+0x330>)
    2870:	4798      	blx	r3
    2872:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    2874:	2f04      	cmp	r7, #4
    2876:	d1eb      	bne.n	2850 <usart_init+0x250>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    2878:	2300      	movs	r3, #0
    287a:	60eb      	str	r3, [r5, #12]
    287c:	612b      	str	r3, [r5, #16]
    287e:	616b      	str	r3, [r5, #20]
    2880:	61ab      	str	r3, [r5, #24]
    2882:	61eb      	str	r3, [r5, #28]
    2884:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    2886:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2888:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    288a:	2200      	movs	r2, #0
    288c:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    288e:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2890:	3330      	adds	r3, #48	; 0x30
    2892:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2894:	3301      	adds	r3, #1
    2896:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2898:	3301      	adds	r3, #1
    289a:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    289c:	3301      	adds	r3, #1
    289e:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    28a0:	6828      	ldr	r0, [r5, #0]
    28a2:	4b19      	ldr	r3, [pc, #100]	; (2908 <usart_init+0x308>)
    28a4:	4798      	blx	r3
    28a6:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    28a8:	4922      	ldr	r1, [pc, #136]	; (2934 <usart_init+0x334>)
    28aa:	4b23      	ldr	r3, [pc, #140]	; (2938 <usart_init+0x338>)
    28ac:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    28ae:	00a4      	lsls	r4, r4, #2
    28b0:	4b22      	ldr	r3, [pc, #136]	; (293c <usart_init+0x33c>)
    28b2:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    28b4:	2300      	movs	r3, #0
    28b6:	e01e      	b.n	28f6 <usart_init+0x2f6>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    28b8:	2310      	movs	r3, #16
    28ba:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    28bc:	2300      	movs	r3, #0
    28be:	9307      	str	r3, [sp, #28]
    28c0:	e003      	b.n	28ca <usart_init+0x2ca>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    28c2:	2303      	movs	r3, #3
    28c4:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    28c6:	2300      	movs	r3, #0
    28c8:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    28ca:	6833      	ldr	r3, [r6, #0]
    28cc:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    28ce:	68f3      	ldr	r3, [r6, #12]
    28d0:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    28d2:	6973      	ldr	r3, [r6, #20]
    28d4:	4698      	mov	r8, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    28d6:	7e33      	ldrb	r3, [r6, #24]
    28d8:	469b      	mov	fp, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    28da:	2326      	movs	r3, #38	; 0x26
    28dc:	5cf3      	ldrb	r3, [r6, r3]
    28de:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    28e0:	6873      	ldr	r3, [r6, #4]
    28e2:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    28e4:	2b00      	cmp	r3, #0
    28e6:	d100      	bne.n	28ea <usart_init+0x2ea>
    28e8:	e71c      	b.n	2724 <usart_init+0x124>
    28ea:	2380      	movs	r3, #128	; 0x80
    28ec:	055b      	lsls	r3, r3, #21
    28ee:	459a      	cmp	sl, r3
    28f0:	d100      	bne.n	28f4 <usart_init+0x2f4>
    28f2:	e701      	b.n	26f8 <usart_init+0xf8>
    28f4:	e73b      	b.n	276e <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    28f6:	0018      	movs	r0, r3
    28f8:	b011      	add	sp, #68	; 0x44
    28fa:	bc3c      	pop	{r2, r3, r4, r5}
    28fc:	4690      	mov	r8, r2
    28fe:	4699      	mov	r9, r3
    2900:	46a2      	mov	sl, r4
    2902:	46ab      	mov	fp, r5
    2904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	000024f9 	.word	0x000024f9
    290c:	40000400 	.word	0x40000400
    2910:	00002fad 	.word	0x00002fad
    2914:	00002f21 	.word	0x00002f21
    2918:	00002325 	.word	0x00002325
    291c:	00002fc9 	.word	0x00002fc9
    2920:	00002269 	.word	0x00002269
    2924:	00002291 	.word	0x00002291
    2928:	41002000 	.word	0x41002000
    292c:	00002371 	.word	0x00002371
    2930:	000030a5 	.word	0x000030a5
    2934:	000029dd 	.word	0x000029dd
    2938:	00002539 	.word	0x00002539
    293c:	20000100 	.word	0x20000100

00002940 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2940:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2942:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2944:	2a00      	cmp	r2, #0
    2946:	d00e      	beq.n	2966 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    2948:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    294a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    294c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    294e:	2a00      	cmp	r2, #0
    2950:	d109      	bne.n	2966 <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2952:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2954:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2956:	2a00      	cmp	r2, #0
    2958:	d1fc      	bne.n	2954 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    295a:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    295c:	2102      	movs	r1, #2
    295e:	7e1a      	ldrb	r2, [r3, #24]
    2960:	420a      	tst	r2, r1
    2962:	d0fc      	beq.n	295e <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    2964:	2300      	movs	r3, #0
}
    2966:	0018      	movs	r0, r3
    2968:	4770      	bx	lr
    296a:	46c0      	nop			; (mov r8, r8)

0000296c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    296c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    296e:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2970:	2a00      	cmp	r2, #0
    2972:	d030      	beq.n	29d6 <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    2974:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2976:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2978:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    297a:	2a00      	cmp	r2, #0
    297c:	d12b      	bne.n	29d6 <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    297e:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2980:	7e10      	ldrb	r0, [r2, #24]
    2982:	0740      	lsls	r0, r0, #29
    2984:	d527      	bpl.n	29d6 <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2986:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2988:	2b00      	cmp	r3, #0
    298a:	d1fc      	bne.n	2986 <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    298c:	8b53      	ldrh	r3, [r2, #26]
    298e:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    2990:	0698      	lsls	r0, r3, #26
    2992:	d01d      	beq.n	29d0 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2994:	0798      	lsls	r0, r3, #30
    2996:	d503      	bpl.n	29a0 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2998:	2302      	movs	r3, #2
    299a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    299c:	3318      	adds	r3, #24
    299e:	e01a      	b.n	29d6 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    29a0:	0758      	lsls	r0, r3, #29
    29a2:	d503      	bpl.n	29ac <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    29a4:	2304      	movs	r3, #4
    29a6:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    29a8:	331a      	adds	r3, #26
    29aa:	e014      	b.n	29d6 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    29ac:	07d8      	lsls	r0, r3, #31
    29ae:	d503      	bpl.n	29b8 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    29b0:	2301      	movs	r3, #1
    29b2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    29b4:	3312      	adds	r3, #18
    29b6:	e00e      	b.n	29d6 <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    29b8:	06d8      	lsls	r0, r3, #27
    29ba:	d503      	bpl.n	29c4 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    29bc:	2310      	movs	r3, #16
    29be:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    29c0:	3332      	adds	r3, #50	; 0x32
    29c2:	e008      	b.n	29d6 <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    29c4:	069b      	lsls	r3, r3, #26
    29c6:	d503      	bpl.n	29d0 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    29c8:	2320      	movs	r3, #32
    29ca:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    29cc:	3321      	adds	r3, #33	; 0x21
    29ce:	e002      	b.n	29d6 <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    29d0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    29d2:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    29d4:	2300      	movs	r3, #0
}
    29d6:	0018      	movs	r0, r3
    29d8:	4770      	bx	lr
    29da:	46c0      	nop			; (mov r8, r8)

000029dc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    29dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    29de:	0080      	lsls	r0, r0, #2
    29e0:	4b60      	ldr	r3, [pc, #384]	; (2b64 <_usart_interrupt_handler+0x188>)
    29e2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    29e4:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    29e6:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    29e8:	2b00      	cmp	r3, #0
    29ea:	d1fc      	bne.n	29e6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    29ec:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    29ee:	7da6      	ldrb	r6, [r4, #22]
    29f0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    29f2:	2330      	movs	r3, #48	; 0x30
    29f4:	5ceb      	ldrb	r3, [r5, r3]
    29f6:	2231      	movs	r2, #49	; 0x31
    29f8:	5caf      	ldrb	r7, [r5, r2]
    29fa:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    29fc:	07f3      	lsls	r3, r6, #31
    29fe:	d522      	bpl.n	2a46 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2a00:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2a02:	b29b      	uxth	r3, r3
    2a04:	2b00      	cmp	r3, #0
    2a06:	d01c      	beq.n	2a42 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2a08:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2a0a:	7813      	ldrb	r3, [r2, #0]
    2a0c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2a0e:	1c51      	adds	r1, r2, #1
    2a10:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2a12:	7969      	ldrb	r1, [r5, #5]
    2a14:	2901      	cmp	r1, #1
    2a16:	d001      	beq.n	2a1c <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2a18:	b29b      	uxth	r3, r3
    2a1a:	e004      	b.n	2a26 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2a1c:	7851      	ldrb	r1, [r2, #1]
    2a1e:	0209      	lsls	r1, r1, #8
    2a20:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    2a22:	3202      	adds	r2, #2
    2a24:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2a26:	05db      	lsls	r3, r3, #23
    2a28:	0ddb      	lsrs	r3, r3, #23
    2a2a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2a2c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2a2e:	3b01      	subs	r3, #1
    2a30:	b29b      	uxth	r3, r3
    2a32:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2a34:	2b00      	cmp	r3, #0
    2a36:	d106      	bne.n	2a46 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2a38:	3301      	adds	r3, #1
    2a3a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2a3c:	3301      	adds	r3, #1
    2a3e:	75a3      	strb	r3, [r4, #22]
    2a40:	e001      	b.n	2a46 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2a42:	2301      	movs	r3, #1
    2a44:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2a46:	07b3      	lsls	r3, r6, #30
    2a48:	d509      	bpl.n	2a5e <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2a4a:	2302      	movs	r3, #2
    2a4c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2a4e:	2200      	movs	r2, #0
    2a50:	3331      	adds	r3, #49	; 0x31
    2a52:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2a54:	07fb      	lsls	r3, r7, #31
    2a56:	d502      	bpl.n	2a5e <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2a58:	0028      	movs	r0, r5
    2a5a:	68eb      	ldr	r3, [r5, #12]
    2a5c:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2a5e:	0773      	lsls	r3, r6, #29
    2a60:	d560      	bpl.n	2b24 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    2a62:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2a64:	b29b      	uxth	r3, r3
    2a66:	2b00      	cmp	r3, #0
    2a68:	d05a      	beq.n	2b20 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2a6a:	8b63      	ldrh	r3, [r4, #26]
    2a6c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2a6e:	071a      	lsls	r2, r3, #28
    2a70:	d402      	bmi.n	2a78 <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2a72:	223f      	movs	r2, #63	; 0x3f
    2a74:	4013      	ands	r3, r2
    2a76:	e001      	b.n	2a7c <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2a78:	2237      	movs	r2, #55	; 0x37
    2a7a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2a7c:	2b00      	cmp	r3, #0
    2a7e:	d02d      	beq.n	2adc <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2a80:	079a      	lsls	r2, r3, #30
    2a82:	d505      	bpl.n	2a90 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2a84:	221a      	movs	r2, #26
    2a86:	2332      	movs	r3, #50	; 0x32
    2a88:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2a8a:	3b30      	subs	r3, #48	; 0x30
    2a8c:	8363      	strh	r3, [r4, #26]
    2a8e:	e01f      	b.n	2ad0 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2a90:	075a      	lsls	r2, r3, #29
    2a92:	d505      	bpl.n	2aa0 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    2a94:	221e      	movs	r2, #30
    2a96:	2332      	movs	r3, #50	; 0x32
    2a98:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2a9a:	3b2e      	subs	r3, #46	; 0x2e
    2a9c:	8363      	strh	r3, [r4, #26]
    2a9e:	e017      	b.n	2ad0 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2aa0:	07da      	lsls	r2, r3, #31
    2aa2:	d505      	bpl.n	2ab0 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    2aa4:	2213      	movs	r2, #19
    2aa6:	2332      	movs	r3, #50	; 0x32
    2aa8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2aaa:	3b31      	subs	r3, #49	; 0x31
    2aac:	8363      	strh	r3, [r4, #26]
    2aae:	e00f      	b.n	2ad0 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2ab0:	06da      	lsls	r2, r3, #27
    2ab2:	d505      	bpl.n	2ac0 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    2ab4:	2242      	movs	r2, #66	; 0x42
    2ab6:	2332      	movs	r3, #50	; 0x32
    2ab8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2aba:	3b22      	subs	r3, #34	; 0x22
    2abc:	8363      	strh	r3, [r4, #26]
    2abe:	e007      	b.n	2ad0 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2ac0:	2220      	movs	r2, #32
    2ac2:	421a      	tst	r2, r3
    2ac4:	d004      	beq.n	2ad0 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2ac6:	3221      	adds	r2, #33	; 0x21
    2ac8:	2332      	movs	r3, #50	; 0x32
    2aca:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2acc:	3b12      	subs	r3, #18
    2ace:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2ad0:	077b      	lsls	r3, r7, #29
    2ad2:	d527      	bpl.n	2b24 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2ad4:	0028      	movs	r0, r5
    2ad6:	696b      	ldr	r3, [r5, #20]
    2ad8:	4798      	blx	r3
    2ada:	e023      	b.n	2b24 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2adc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2ade:	05db      	lsls	r3, r3, #23
    2ae0:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2ae2:	b2da      	uxtb	r2, r3
    2ae4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2ae6:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2ae8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2aea:	1c51      	adds	r1, r2, #1
    2aec:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2aee:	7969      	ldrb	r1, [r5, #5]
    2af0:	2901      	cmp	r1, #1
    2af2:	d104      	bne.n	2afe <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2af4:	0a1b      	lsrs	r3, r3, #8
    2af6:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    2af8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2afa:	3301      	adds	r3, #1
    2afc:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2afe:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2b00:	3b01      	subs	r3, #1
    2b02:	b29b      	uxth	r3, r3
    2b04:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2b06:	2b00      	cmp	r3, #0
    2b08:	d10c      	bne.n	2b24 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2b0a:	3304      	adds	r3, #4
    2b0c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2b0e:	2200      	movs	r2, #0
    2b10:	332e      	adds	r3, #46	; 0x2e
    2b12:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2b14:	07bb      	lsls	r3, r7, #30
    2b16:	d505      	bpl.n	2b24 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2b18:	0028      	movs	r0, r5
    2b1a:	692b      	ldr	r3, [r5, #16]
    2b1c:	4798      	blx	r3
    2b1e:	e001      	b.n	2b24 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2b20:	2304      	movs	r3, #4
    2b22:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2b24:	06f3      	lsls	r3, r6, #27
    2b26:	d507      	bpl.n	2b38 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2b28:	2310      	movs	r3, #16
    2b2a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2b2c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2b2e:	06fb      	lsls	r3, r7, #27
    2b30:	d502      	bpl.n	2b38 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2b32:	0028      	movs	r0, r5
    2b34:	69eb      	ldr	r3, [r5, #28]
    2b36:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2b38:	06b3      	lsls	r3, r6, #26
    2b3a:	d507      	bpl.n	2b4c <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2b3c:	2320      	movs	r3, #32
    2b3e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2b40:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2b42:	073b      	lsls	r3, r7, #28
    2b44:	d502      	bpl.n	2b4c <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2b46:	0028      	movs	r0, r5
    2b48:	69ab      	ldr	r3, [r5, #24]
    2b4a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2b4c:	0733      	lsls	r3, r6, #28
    2b4e:	d507      	bpl.n	2b60 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2b50:	2308      	movs	r3, #8
    2b52:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2b54:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2b56:	06bb      	lsls	r3, r7, #26
    2b58:	d502      	bpl.n	2b60 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2b5a:	6a2b      	ldr	r3, [r5, #32]
    2b5c:	0028      	movs	r0, r5
    2b5e:	4798      	blx	r3
		}
	}
#endif
}
    2b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b62:	46c0      	nop			; (mov r8, r8)
    2b64:	20000100 	.word	0x20000100

00002b68 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2b68:	b510      	push	{r4, lr}
	switch (clock_source) {
    2b6a:	2808      	cmp	r0, #8
    2b6c:	d803      	bhi.n	2b76 <system_clock_source_get_hz+0xe>
    2b6e:	0080      	lsls	r0, r0, #2
    2b70:	4b1b      	ldr	r3, [pc, #108]	; (2be0 <system_clock_source_get_hz+0x78>)
    2b72:	581b      	ldr	r3, [r3, r0]
    2b74:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2b76:	2000      	movs	r0, #0
    2b78:	e030      	b.n	2bdc <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    2b7a:	4b1a      	ldr	r3, [pc, #104]	; (2be4 <system_clock_source_get_hz+0x7c>)
    2b7c:	6918      	ldr	r0, [r3, #16]
    2b7e:	e02d      	b.n	2bdc <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2b80:	4b19      	ldr	r3, [pc, #100]	; (2be8 <system_clock_source_get_hz+0x80>)
    2b82:	6a1b      	ldr	r3, [r3, #32]
    2b84:	059b      	lsls	r3, r3, #22
    2b86:	0f9b      	lsrs	r3, r3, #30
    2b88:	4818      	ldr	r0, [pc, #96]	; (2bec <system_clock_source_get_hz+0x84>)
    2b8a:	40d8      	lsrs	r0, r3
    2b8c:	e026      	b.n	2bdc <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    2b8e:	4b15      	ldr	r3, [pc, #84]	; (2be4 <system_clock_source_get_hz+0x7c>)
    2b90:	6958      	ldr	r0, [r3, #20]
    2b92:	e023      	b.n	2bdc <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2b94:	4b13      	ldr	r3, [pc, #76]	; (2be4 <system_clock_source_get_hz+0x7c>)
    2b96:	681b      	ldr	r3, [r3, #0]
    2b98:	2002      	movs	r0, #2
    2b9a:	4018      	ands	r0, r3
    2b9c:	d01e      	beq.n	2bdc <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2b9e:	4912      	ldr	r1, [pc, #72]	; (2be8 <system_clock_source_get_hz+0x80>)
    2ba0:	2210      	movs	r2, #16
    2ba2:	68cb      	ldr	r3, [r1, #12]
    2ba4:	421a      	tst	r2, r3
    2ba6:	d0fc      	beq.n	2ba2 <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    2ba8:	4b0e      	ldr	r3, [pc, #56]	; (2be4 <system_clock_source_get_hz+0x7c>)
    2baa:	681b      	ldr	r3, [r3, #0]
    2bac:	075b      	lsls	r3, r3, #29
    2bae:	d514      	bpl.n	2bda <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2bb0:	2000      	movs	r0, #0
    2bb2:	4b0f      	ldr	r3, [pc, #60]	; (2bf0 <system_clock_source_get_hz+0x88>)
    2bb4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2bb6:	4b0b      	ldr	r3, [pc, #44]	; (2be4 <system_clock_source_get_hz+0x7c>)
    2bb8:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2bba:	041b      	lsls	r3, r3, #16
    2bbc:	0c1b      	lsrs	r3, r3, #16
    2bbe:	4358      	muls	r0, r3
    2bc0:	e00c      	b.n	2bdc <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2bc2:	2350      	movs	r3, #80	; 0x50
    2bc4:	4a08      	ldr	r2, [pc, #32]	; (2be8 <system_clock_source_get_hz+0x80>)
    2bc6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2bc8:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2bca:	075b      	lsls	r3, r3, #29
    2bcc:	d506      	bpl.n	2bdc <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    2bce:	4b05      	ldr	r3, [pc, #20]	; (2be4 <system_clock_source_get_hz+0x7c>)
    2bd0:	68d8      	ldr	r0, [r3, #12]
    2bd2:	e003      	b.n	2bdc <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    2bd4:	2080      	movs	r0, #128	; 0x80
    2bd6:	0200      	lsls	r0, r0, #8
    2bd8:	e000      	b.n	2bdc <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    2bda:	4806      	ldr	r0, [pc, #24]	; (2bf4 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    2bdc:	bd10      	pop	{r4, pc}
    2bde:	46c0      	nop			; (mov r8, r8)
    2be0:	000040fc 	.word	0x000040fc
    2be4:	200000a8 	.word	0x200000a8
    2be8:	40000800 	.word	0x40000800
    2bec:	007a1200 	.word	0x007a1200
    2bf0:	00002fc9 	.word	0x00002fc9
    2bf4:	02dc6c00 	.word	0x02dc6c00

00002bf8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2bf8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2bfa:	4c0c      	ldr	r4, [pc, #48]	; (2c2c <system_clock_source_osc8m_set_config+0x34>)
    2bfc:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2bfe:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2c00:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2c02:	7842      	ldrb	r2, [r0, #1]
    2c04:	2001      	movs	r0, #1
    2c06:	4002      	ands	r2, r0
    2c08:	0192      	lsls	r2, r2, #6
    2c0a:	2640      	movs	r6, #64	; 0x40
    2c0c:	43b3      	bics	r3, r6
    2c0e:	4313      	orrs	r3, r2
    2c10:	0002      	movs	r2, r0
    2c12:	402a      	ands	r2, r5
    2c14:	01d2      	lsls	r2, r2, #7
    2c16:	307f      	adds	r0, #127	; 0x7f
    2c18:	4383      	bics	r3, r0
    2c1a:	4313      	orrs	r3, r2
    2c1c:	2203      	movs	r2, #3
    2c1e:	400a      	ands	r2, r1
    2c20:	0212      	lsls	r2, r2, #8
    2c22:	4903      	ldr	r1, [pc, #12]	; (2c30 <system_clock_source_osc8m_set_config+0x38>)
    2c24:	400b      	ands	r3, r1
    2c26:	4313      	orrs	r3, r2
    2c28:	6223      	str	r3, [r4, #32]
}
    2c2a:	bd70      	pop	{r4, r5, r6, pc}
    2c2c:	40000800 	.word	0x40000800
    2c30:	fffffcff 	.word	0xfffffcff

00002c34 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2c34:	2808      	cmp	r0, #8
    2c36:	d803      	bhi.n	2c40 <system_clock_source_enable+0xc>
    2c38:	0080      	lsls	r0, r0, #2
    2c3a:	4b25      	ldr	r3, [pc, #148]	; (2cd0 <system_clock_source_enable+0x9c>)
    2c3c:	581b      	ldr	r3, [r3, r0]
    2c3e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2c40:	2017      	movs	r0, #23
    2c42:	e044      	b.n	2cce <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2c44:	4a23      	ldr	r2, [pc, #140]	; (2cd4 <system_clock_source_enable+0xa0>)
    2c46:	6a11      	ldr	r1, [r2, #32]
    2c48:	2302      	movs	r3, #2
    2c4a:	430b      	orrs	r3, r1
    2c4c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2c4e:	2000      	movs	r0, #0
    2c50:	e03d      	b.n	2cce <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2c52:	4a20      	ldr	r2, [pc, #128]	; (2cd4 <system_clock_source_enable+0xa0>)
    2c54:	6991      	ldr	r1, [r2, #24]
    2c56:	2302      	movs	r3, #2
    2c58:	430b      	orrs	r3, r1
    2c5a:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2c5c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    2c5e:	e036      	b.n	2cce <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2c60:	4a1c      	ldr	r2, [pc, #112]	; (2cd4 <system_clock_source_enable+0xa0>)
    2c62:	8a11      	ldrh	r1, [r2, #16]
    2c64:	2302      	movs	r3, #2
    2c66:	430b      	orrs	r3, r1
    2c68:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2c6a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    2c6c:	e02f      	b.n	2cce <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2c6e:	4a19      	ldr	r2, [pc, #100]	; (2cd4 <system_clock_source_enable+0xa0>)
    2c70:	8a91      	ldrh	r1, [r2, #20]
    2c72:	2302      	movs	r3, #2
    2c74:	430b      	orrs	r3, r1
    2c76:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2c78:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    2c7a:	e028      	b.n	2cce <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2c7c:	4916      	ldr	r1, [pc, #88]	; (2cd8 <system_clock_source_enable+0xa4>)
    2c7e:	680b      	ldr	r3, [r1, #0]
    2c80:	2202      	movs	r2, #2
    2c82:	4313      	orrs	r3, r2
    2c84:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2c86:	4b13      	ldr	r3, [pc, #76]	; (2cd4 <system_clock_source_enable+0xa0>)
    2c88:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2c8a:	0019      	movs	r1, r3
    2c8c:	320e      	adds	r2, #14
    2c8e:	68cb      	ldr	r3, [r1, #12]
    2c90:	421a      	tst	r2, r3
    2c92:	d0fc      	beq.n	2c8e <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2c94:	4a10      	ldr	r2, [pc, #64]	; (2cd8 <system_clock_source_enable+0xa4>)
    2c96:	6891      	ldr	r1, [r2, #8]
    2c98:	4b0e      	ldr	r3, [pc, #56]	; (2cd4 <system_clock_source_enable+0xa0>)
    2c9a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2c9c:	6852      	ldr	r2, [r2, #4]
    2c9e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    2ca0:	2200      	movs	r2, #0
    2ca2:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2ca4:	0019      	movs	r1, r3
    2ca6:	3210      	adds	r2, #16
    2ca8:	68cb      	ldr	r3, [r1, #12]
    2caa:	421a      	tst	r2, r3
    2cac:	d0fc      	beq.n	2ca8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2cae:	4b0a      	ldr	r3, [pc, #40]	; (2cd8 <system_clock_source_enable+0xa4>)
    2cb0:	681b      	ldr	r3, [r3, #0]
    2cb2:	b29b      	uxth	r3, r3
    2cb4:	4a07      	ldr	r2, [pc, #28]	; (2cd4 <system_clock_source_enable+0xa0>)
    2cb6:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2cb8:	2000      	movs	r0, #0
    2cba:	e008      	b.n	2cce <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2cbc:	4905      	ldr	r1, [pc, #20]	; (2cd4 <system_clock_source_enable+0xa0>)
    2cbe:	2244      	movs	r2, #68	; 0x44
    2cc0:	5c88      	ldrb	r0, [r1, r2]
    2cc2:	2302      	movs	r3, #2
    2cc4:	4303      	orrs	r3, r0
    2cc6:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2cc8:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    2cca:	e000      	b.n	2cce <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    2ccc:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    2cce:	4770      	bx	lr
    2cd0:	00004120 	.word	0x00004120
    2cd4:	40000800 	.word	0x40000800
    2cd8:	200000a8 	.word	0x200000a8

00002cdc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2cdc:	b530      	push	{r4, r5, lr}
    2cde:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2ce0:	22c2      	movs	r2, #194	; 0xc2
    2ce2:	00d2      	lsls	r2, r2, #3
    2ce4:	4b1a      	ldr	r3, [pc, #104]	; (2d50 <system_clock_init+0x74>)
    2ce6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2ce8:	4a1a      	ldr	r2, [pc, #104]	; (2d54 <system_clock_init+0x78>)
    2cea:	6853      	ldr	r3, [r2, #4]
    2cec:	211e      	movs	r1, #30
    2cee:	438b      	bics	r3, r1
    2cf0:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2cf2:	2301      	movs	r3, #1
    2cf4:	466a      	mov	r2, sp
    2cf6:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2cf8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2cfa:	4d17      	ldr	r5, [pc, #92]	; (2d58 <system_clock_init+0x7c>)
    2cfc:	b2e0      	uxtb	r0, r4
    2cfe:	4669      	mov	r1, sp
    2d00:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2d02:	3401      	adds	r4, #1
    2d04:	2c25      	cmp	r4, #37	; 0x25
    2d06:	d1f9      	bne.n	2cfc <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    2d08:	a803      	add	r0, sp, #12
    2d0a:	2400      	movs	r4, #0
    2d0c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2d0e:	2501      	movs	r5, #1
    2d10:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2d12:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2d14:	4b11      	ldr	r3, [pc, #68]	; (2d5c <system_clock_init+0x80>)
    2d16:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2d18:	2006      	movs	r0, #6
    2d1a:	4b11      	ldr	r3, [pc, #68]	; (2d60 <system_clock_init+0x84>)
    2d1c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2d1e:	4b11      	ldr	r3, [pc, #68]	; (2d64 <system_clock_init+0x88>)
    2d20:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    2d22:	4b11      	ldr	r3, [pc, #68]	; (2d68 <system_clock_init+0x8c>)
    2d24:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    2d26:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    2d28:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    2d2a:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2d2c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    2d2e:	466b      	mov	r3, sp
    2d30:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2d32:	2306      	movs	r3, #6
    2d34:	466a      	mov	r2, sp
    2d36:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    2d38:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    2d3a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2d3c:	4669      	mov	r1, sp
    2d3e:	2000      	movs	r0, #0
    2d40:	4b0a      	ldr	r3, [pc, #40]	; (2d6c <system_clock_init+0x90>)
    2d42:	4798      	blx	r3
    2d44:	2000      	movs	r0, #0
    2d46:	4b0a      	ldr	r3, [pc, #40]	; (2d70 <system_clock_init+0x94>)
    2d48:	4798      	blx	r3
#endif
}
    2d4a:	b005      	add	sp, #20
    2d4c:	bd30      	pop	{r4, r5, pc}
    2d4e:	46c0      	nop			; (mov r8, r8)
    2d50:	40000800 	.word	0x40000800
    2d54:	41004000 	.word	0x41004000
    2d58:	00002fad 	.word	0x00002fad
    2d5c:	00002bf9 	.word	0x00002bf9
    2d60:	00002c35 	.word	0x00002c35
    2d64:	00002d75 	.word	0x00002d75
    2d68:	40000400 	.word	0x40000400
    2d6c:	00002d99 	.word	0x00002d99
    2d70:	00002e51 	.word	0x00002e51

00002d74 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    2d74:	4a06      	ldr	r2, [pc, #24]	; (2d90 <system_gclk_init+0x1c>)
    2d76:	6991      	ldr	r1, [r2, #24]
    2d78:	2308      	movs	r3, #8
    2d7a:	430b      	orrs	r3, r1
    2d7c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2d7e:	2201      	movs	r2, #1
    2d80:	4b04      	ldr	r3, [pc, #16]	; (2d94 <system_gclk_init+0x20>)
    2d82:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2d84:	0019      	movs	r1, r3
    2d86:	780b      	ldrb	r3, [r1, #0]
    2d88:	4213      	tst	r3, r2
    2d8a:	d1fc      	bne.n	2d86 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2d8c:	4770      	bx	lr
    2d8e:	46c0      	nop			; (mov r8, r8)
    2d90:	40000400 	.word	0x40000400
    2d94:	40000c00 	.word	0x40000c00

00002d98 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2d98:	b570      	push	{r4, r5, r6, lr}
    2d9a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2d9c:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2d9e:	780c      	ldrb	r4, [r1, #0]
    2da0:	0224      	lsls	r4, r4, #8
    2da2:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2da4:	784b      	ldrb	r3, [r1, #1]
    2da6:	2b00      	cmp	r3, #0
    2da8:	d002      	beq.n	2db0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2daa:	2380      	movs	r3, #128	; 0x80
    2dac:	02db      	lsls	r3, r3, #11
    2dae:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2db0:	7a4b      	ldrb	r3, [r1, #9]
    2db2:	2b00      	cmp	r3, #0
    2db4:	d002      	beq.n	2dbc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2db6:	2380      	movs	r3, #128	; 0x80
    2db8:	031b      	lsls	r3, r3, #12
    2dba:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2dbc:	6848      	ldr	r0, [r1, #4]
    2dbe:	2801      	cmp	r0, #1
    2dc0:	d918      	bls.n	2df4 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2dc2:	1e43      	subs	r3, r0, #1
    2dc4:	4218      	tst	r0, r3
    2dc6:	d110      	bne.n	2dea <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2dc8:	2802      	cmp	r0, #2
    2dca:	d906      	bls.n	2dda <system_gclk_gen_set_config+0x42>
    2dcc:	2302      	movs	r3, #2
    2dce:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2dd0:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    2dd2:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2dd4:	4298      	cmp	r0, r3
    2dd6:	d8fb      	bhi.n	2dd0 <system_gclk_gen_set_config+0x38>
    2dd8:	e000      	b.n	2ddc <system_gclk_gen_set_config+0x44>
    2dda:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2ddc:	0212      	lsls	r2, r2, #8
    2dde:	4332      	orrs	r2, r6
    2de0:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2de2:	2380      	movs	r3, #128	; 0x80
    2de4:	035b      	lsls	r3, r3, #13
    2de6:	431c      	orrs	r4, r3
    2de8:	e004      	b.n	2df4 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    2dea:	0205      	lsls	r5, r0, #8
    2dec:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2dee:	2380      	movs	r3, #128	; 0x80
    2df0:	029b      	lsls	r3, r3, #10
    2df2:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2df4:	7a0b      	ldrb	r3, [r1, #8]
    2df6:	2b00      	cmp	r3, #0
    2df8:	d002      	beq.n	2e00 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2dfa:	2380      	movs	r3, #128	; 0x80
    2dfc:	039b      	lsls	r3, r3, #14
    2dfe:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e00:	4a0f      	ldr	r2, [pc, #60]	; (2e40 <system_gclk_gen_set_config+0xa8>)
    2e02:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    2e04:	b25b      	sxtb	r3, r3
    2e06:	2b00      	cmp	r3, #0
    2e08:	dbfb      	blt.n	2e02 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2e0a:	4b0e      	ldr	r3, [pc, #56]	; (2e44 <system_gclk_gen_set_config+0xac>)
    2e0c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2e0e:	4b0e      	ldr	r3, [pc, #56]	; (2e48 <system_gclk_gen_set_config+0xb0>)
    2e10:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e12:	4a0b      	ldr	r2, [pc, #44]	; (2e40 <system_gclk_gen_set_config+0xa8>)
    2e14:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2e16:	b25b      	sxtb	r3, r3
    2e18:	2b00      	cmp	r3, #0
    2e1a:	dbfb      	blt.n	2e14 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2e1c:	4b08      	ldr	r3, [pc, #32]	; (2e40 <system_gclk_gen_set_config+0xa8>)
    2e1e:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e20:	001a      	movs	r2, r3
    2e22:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    2e24:	b25b      	sxtb	r3, r3
    2e26:	2b00      	cmp	r3, #0
    2e28:	dbfb      	blt.n	2e22 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2e2a:	4a05      	ldr	r2, [pc, #20]	; (2e40 <system_gclk_gen_set_config+0xa8>)
    2e2c:	6851      	ldr	r1, [r2, #4]
    2e2e:	2380      	movs	r3, #128	; 0x80
    2e30:	025b      	lsls	r3, r3, #9
    2e32:	400b      	ands	r3, r1
    2e34:	431c      	orrs	r4, r3
    2e36:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2e38:	4b04      	ldr	r3, [pc, #16]	; (2e4c <system_gclk_gen_set_config+0xb4>)
    2e3a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2e3c:	bd70      	pop	{r4, r5, r6, pc}
    2e3e:	46c0      	nop			; (mov r8, r8)
    2e40:	40000c00 	.word	0x40000c00
    2e44:	00002119 	.word	0x00002119
    2e48:	40000c08 	.word	0x40000c08
    2e4c:	00002159 	.word	0x00002159

00002e50 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2e50:	b510      	push	{r4, lr}
    2e52:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e54:	4a0b      	ldr	r2, [pc, #44]	; (2e84 <system_gclk_gen_enable+0x34>)
    2e56:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    2e58:	b25b      	sxtb	r3, r3
    2e5a:	2b00      	cmp	r3, #0
    2e5c:	dbfb      	blt.n	2e56 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2e5e:	4b0a      	ldr	r3, [pc, #40]	; (2e88 <system_gclk_gen_enable+0x38>)
    2e60:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2e62:	4b0a      	ldr	r3, [pc, #40]	; (2e8c <system_gclk_gen_enable+0x3c>)
    2e64:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e66:	4a07      	ldr	r2, [pc, #28]	; (2e84 <system_gclk_gen_enable+0x34>)
    2e68:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    2e6a:	b25b      	sxtb	r3, r3
    2e6c:	2b00      	cmp	r3, #0
    2e6e:	dbfb      	blt.n	2e68 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2e70:	4a04      	ldr	r2, [pc, #16]	; (2e84 <system_gclk_gen_enable+0x34>)
    2e72:	6853      	ldr	r3, [r2, #4]
    2e74:	2180      	movs	r1, #128	; 0x80
    2e76:	0249      	lsls	r1, r1, #9
    2e78:	430b      	orrs	r3, r1
    2e7a:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2e7c:	4b04      	ldr	r3, [pc, #16]	; (2e90 <system_gclk_gen_enable+0x40>)
    2e7e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2e80:	bd10      	pop	{r4, pc}
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	40000c00 	.word	0x40000c00
    2e88:	00002119 	.word	0x00002119
    2e8c:	40000c04 	.word	0x40000c04
    2e90:	00002159 	.word	0x00002159

00002e94 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2e94:	b570      	push	{r4, r5, r6, lr}
    2e96:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e98:	4a1a      	ldr	r2, [pc, #104]	; (2f04 <system_gclk_gen_get_hz+0x70>)
    2e9a:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    2e9c:	b25b      	sxtb	r3, r3
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	dbfb      	blt.n	2e9a <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2ea2:	4b19      	ldr	r3, [pc, #100]	; (2f08 <system_gclk_gen_get_hz+0x74>)
    2ea4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2ea6:	4b19      	ldr	r3, [pc, #100]	; (2f0c <system_gclk_gen_get_hz+0x78>)
    2ea8:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2eaa:	4a16      	ldr	r2, [pc, #88]	; (2f04 <system_gclk_gen_get_hz+0x70>)
    2eac:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    2eae:	b25b      	sxtb	r3, r3
    2eb0:	2b00      	cmp	r3, #0
    2eb2:	dbfb      	blt.n	2eac <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2eb4:	4e13      	ldr	r6, [pc, #76]	; (2f04 <system_gclk_gen_get_hz+0x70>)
    2eb6:	6870      	ldr	r0, [r6, #4]
    2eb8:	04c0      	lsls	r0, r0, #19
    2eba:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2ebc:	4b14      	ldr	r3, [pc, #80]	; (2f10 <system_gclk_gen_get_hz+0x7c>)
    2ebe:	4798      	blx	r3
    2ec0:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2ec2:	4b12      	ldr	r3, [pc, #72]	; (2f0c <system_gclk_gen_get_hz+0x78>)
    2ec4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2ec6:	6876      	ldr	r6, [r6, #4]
    2ec8:	02f6      	lsls	r6, r6, #11
    2eca:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2ecc:	4b11      	ldr	r3, [pc, #68]	; (2f14 <system_gclk_gen_get_hz+0x80>)
    2ece:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2ed0:	4a0c      	ldr	r2, [pc, #48]	; (2f04 <system_gclk_gen_get_hz+0x70>)
    2ed2:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    2ed4:	b25b      	sxtb	r3, r3
    2ed6:	2b00      	cmp	r3, #0
    2ed8:	dbfb      	blt.n	2ed2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2eda:	4b0a      	ldr	r3, [pc, #40]	; (2f04 <system_gclk_gen_get_hz+0x70>)
    2edc:	689c      	ldr	r4, [r3, #8]
    2ede:	0224      	lsls	r4, r4, #8
    2ee0:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2ee2:	4b0d      	ldr	r3, [pc, #52]	; (2f18 <system_gclk_gen_get_hz+0x84>)
    2ee4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2ee6:	2e00      	cmp	r6, #0
    2ee8:	d107      	bne.n	2efa <system_gclk_gen_get_hz+0x66>
    2eea:	2c01      	cmp	r4, #1
    2eec:	d907      	bls.n	2efe <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2eee:	0021      	movs	r1, r4
    2ef0:	0028      	movs	r0, r5
    2ef2:	4b0a      	ldr	r3, [pc, #40]	; (2f1c <system_gclk_gen_get_hz+0x88>)
    2ef4:	4798      	blx	r3
    2ef6:	0005      	movs	r5, r0
    2ef8:	e001      	b.n	2efe <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2efa:	3401      	adds	r4, #1
    2efc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2efe:	0028      	movs	r0, r5
    2f00:	bd70      	pop	{r4, r5, r6, pc}
    2f02:	46c0      	nop			; (mov r8, r8)
    2f04:	40000c00 	.word	0x40000c00
    2f08:	00002119 	.word	0x00002119
    2f0c:	40000c04 	.word	0x40000c04
    2f10:	00002b69 	.word	0x00002b69
    2f14:	40000c08 	.word	0x40000c08
    2f18:	00002159 	.word	0x00002159
    2f1c:	00003451 	.word	0x00003451

00002f20 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2f20:	b510      	push	{r4, lr}
    2f22:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2f24:	4b06      	ldr	r3, [pc, #24]	; (2f40 <system_gclk_chan_enable+0x20>)
    2f26:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2f28:	4b06      	ldr	r3, [pc, #24]	; (2f44 <system_gclk_chan_enable+0x24>)
    2f2a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2f2c:	4a06      	ldr	r2, [pc, #24]	; (2f48 <system_gclk_chan_enable+0x28>)
    2f2e:	8851      	ldrh	r1, [r2, #2]
    2f30:	2380      	movs	r3, #128	; 0x80
    2f32:	01db      	lsls	r3, r3, #7
    2f34:	430b      	orrs	r3, r1
    2f36:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2f38:	4b04      	ldr	r3, [pc, #16]	; (2f4c <system_gclk_chan_enable+0x2c>)
    2f3a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2f3c:	bd10      	pop	{r4, pc}
    2f3e:	46c0      	nop			; (mov r8, r8)
    2f40:	00002119 	.word	0x00002119
    2f44:	40000c02 	.word	0x40000c02
    2f48:	40000c00 	.word	0x40000c00
    2f4c:	00002159 	.word	0x00002159

00002f50 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2f50:	b510      	push	{r4, lr}
    2f52:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2f54:	4b0f      	ldr	r3, [pc, #60]	; (2f94 <system_gclk_chan_disable+0x44>)
    2f56:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2f58:	4b0f      	ldr	r3, [pc, #60]	; (2f98 <system_gclk_chan_disable+0x48>)
    2f5a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2f5c:	4b0f      	ldr	r3, [pc, #60]	; (2f9c <system_gclk_chan_disable+0x4c>)
    2f5e:	885a      	ldrh	r2, [r3, #2]
    2f60:	0512      	lsls	r2, r2, #20
    2f62:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2f64:	8859      	ldrh	r1, [r3, #2]
    2f66:	4a0e      	ldr	r2, [pc, #56]	; (2fa0 <system_gclk_chan_disable+0x50>)
    2f68:	400a      	ands	r2, r1
    2f6a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2f6c:	8859      	ldrh	r1, [r3, #2]
    2f6e:	4a0d      	ldr	r2, [pc, #52]	; (2fa4 <system_gclk_chan_disable+0x54>)
    2f70:	400a      	ands	r2, r1
    2f72:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2f74:	0019      	movs	r1, r3
    2f76:	2280      	movs	r2, #128	; 0x80
    2f78:	01d2      	lsls	r2, r2, #7
    2f7a:	884b      	ldrh	r3, [r1, #2]
    2f7c:	4213      	tst	r3, r2
    2f7e:	d1fc      	bne.n	2f7a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2f80:	4906      	ldr	r1, [pc, #24]	; (2f9c <system_gclk_chan_disable+0x4c>)
    2f82:	884c      	ldrh	r4, [r1, #2]
    2f84:	0202      	lsls	r2, r0, #8
    2f86:	4b06      	ldr	r3, [pc, #24]	; (2fa0 <system_gclk_chan_disable+0x50>)
    2f88:	4023      	ands	r3, r4
    2f8a:	4313      	orrs	r3, r2
    2f8c:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2f8e:	4b06      	ldr	r3, [pc, #24]	; (2fa8 <system_gclk_chan_disable+0x58>)
    2f90:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2f92:	bd10      	pop	{r4, pc}
    2f94:	00002119 	.word	0x00002119
    2f98:	40000c02 	.word	0x40000c02
    2f9c:	40000c00 	.word	0x40000c00
    2fa0:	fffff0ff 	.word	0xfffff0ff
    2fa4:	ffffbfff 	.word	0xffffbfff
    2fa8:	00002159 	.word	0x00002159

00002fac <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2fac:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2fae:	780c      	ldrb	r4, [r1, #0]
    2fb0:	0224      	lsls	r4, r4, #8
    2fb2:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2fb4:	4b02      	ldr	r3, [pc, #8]	; (2fc0 <system_gclk_chan_set_config+0x14>)
    2fb6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2fb8:	b2a4      	uxth	r4, r4
    2fba:	4b02      	ldr	r3, [pc, #8]	; (2fc4 <system_gclk_chan_set_config+0x18>)
    2fbc:	805c      	strh	r4, [r3, #2]
}
    2fbe:	bd10      	pop	{r4, pc}
    2fc0:	00002f51 	.word	0x00002f51
    2fc4:	40000c00 	.word	0x40000c00

00002fc8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2fc8:	b510      	push	{r4, lr}
    2fca:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2fcc:	4b06      	ldr	r3, [pc, #24]	; (2fe8 <system_gclk_chan_get_hz+0x20>)
    2fce:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2fd0:	4b06      	ldr	r3, [pc, #24]	; (2fec <system_gclk_chan_get_hz+0x24>)
    2fd2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2fd4:	4b06      	ldr	r3, [pc, #24]	; (2ff0 <system_gclk_chan_get_hz+0x28>)
    2fd6:	885c      	ldrh	r4, [r3, #2]
    2fd8:	0524      	lsls	r4, r4, #20
    2fda:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2fdc:	4b05      	ldr	r3, [pc, #20]	; (2ff4 <system_gclk_chan_get_hz+0x2c>)
    2fde:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2fe0:	0020      	movs	r0, r4
    2fe2:	4b05      	ldr	r3, [pc, #20]	; (2ff8 <system_gclk_chan_get_hz+0x30>)
    2fe4:	4798      	blx	r3
}
    2fe6:	bd10      	pop	{r4, pc}
    2fe8:	00002119 	.word	0x00002119
    2fec:	40000c02 	.word	0x40000c02
    2ff0:	40000c00 	.word	0x40000c00
    2ff4:	00002159 	.word	0x00002159
    2ff8:	00002e95 	.word	0x00002e95

00002ffc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2ffc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2ffe:	78d3      	ldrb	r3, [r2, #3]
    3000:	2b00      	cmp	r3, #0
    3002:	d11e      	bne.n	3042 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3004:	7813      	ldrb	r3, [r2, #0]
    3006:	2b80      	cmp	r3, #128	; 0x80
    3008:	d004      	beq.n	3014 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    300a:	061b      	lsls	r3, r3, #24
    300c:	2480      	movs	r4, #128	; 0x80
    300e:	0264      	lsls	r4, r4, #9
    3010:	4323      	orrs	r3, r4
    3012:	e000      	b.n	3016 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3014:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3016:	7854      	ldrb	r4, [r2, #1]
    3018:	2502      	movs	r5, #2
    301a:	43ac      	bics	r4, r5
    301c:	d10a      	bne.n	3034 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    301e:	7894      	ldrb	r4, [r2, #2]
    3020:	2c00      	cmp	r4, #0
    3022:	d103      	bne.n	302c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3024:	2480      	movs	r4, #128	; 0x80
    3026:	02a4      	lsls	r4, r4, #10
    3028:	4323      	orrs	r3, r4
    302a:	e002      	b.n	3032 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    302c:	24c0      	movs	r4, #192	; 0xc0
    302e:	02e4      	lsls	r4, r4, #11
    3030:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3032:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3034:	7854      	ldrb	r4, [r2, #1]
    3036:	3c01      	subs	r4, #1
    3038:	2c01      	cmp	r4, #1
    303a:	d812      	bhi.n	3062 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    303c:	4c18      	ldr	r4, [pc, #96]	; (30a0 <_system_pinmux_config+0xa4>)
    303e:	4023      	ands	r3, r4
    3040:	e00f      	b.n	3062 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3042:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3044:	040b      	lsls	r3, r1, #16
    3046:	0c1b      	lsrs	r3, r3, #16
    3048:	24a0      	movs	r4, #160	; 0xa0
    304a:	05e4      	lsls	r4, r4, #23
    304c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    304e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3050:	0c0b      	lsrs	r3, r1, #16
    3052:	24d0      	movs	r4, #208	; 0xd0
    3054:	0624      	lsls	r4, r4, #24
    3056:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3058:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    305a:	78d3      	ldrb	r3, [r2, #3]
    305c:	2b00      	cmp	r3, #0
    305e:	d018      	beq.n	3092 <_system_pinmux_config+0x96>
    3060:	e01c      	b.n	309c <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3062:	040c      	lsls	r4, r1, #16
    3064:	0c24      	lsrs	r4, r4, #16
    3066:	25a0      	movs	r5, #160	; 0xa0
    3068:	05ed      	lsls	r5, r5, #23
    306a:	432c      	orrs	r4, r5
    306c:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    306e:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3070:	0c0c      	lsrs	r4, r1, #16
    3072:	25d0      	movs	r5, #208	; 0xd0
    3074:	062d      	lsls	r5, r5, #24
    3076:	432c      	orrs	r4, r5
    3078:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    307a:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    307c:	78d4      	ldrb	r4, [r2, #3]
    307e:	2c00      	cmp	r4, #0
    3080:	d10c      	bne.n	309c <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3082:	035b      	lsls	r3, r3, #13
    3084:	d505      	bpl.n	3092 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3086:	7893      	ldrb	r3, [r2, #2]
    3088:	2b01      	cmp	r3, #1
    308a:	d101      	bne.n	3090 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    308c:	6181      	str	r1, [r0, #24]
    308e:	e000      	b.n	3092 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    3090:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3092:	7853      	ldrb	r3, [r2, #1]
    3094:	3b01      	subs	r3, #1
    3096:	2b01      	cmp	r3, #1
    3098:	d800      	bhi.n	309c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    309a:	6081      	str	r1, [r0, #8]
		}
	}
}
    309c:	bd30      	pop	{r4, r5, pc}
    309e:	46c0      	nop			; (mov r8, r8)
    30a0:	fffbffff 	.word	0xfffbffff

000030a4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    30a4:	b510      	push	{r4, lr}
    30a6:	0003      	movs	r3, r0
    30a8:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    30aa:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    30ac:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    30ae:	2900      	cmp	r1, #0
    30b0:	d104      	bne.n	30bc <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    30b2:	0958      	lsrs	r0, r3, #5
    30b4:	01c0      	lsls	r0, r0, #7
    30b6:	4905      	ldr	r1, [pc, #20]	; (30cc <system_pinmux_pin_set_config+0x28>)
    30b8:	468c      	mov	ip, r1
    30ba:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    30bc:	211f      	movs	r1, #31
    30be:	400b      	ands	r3, r1
    30c0:	391e      	subs	r1, #30
    30c2:	4099      	lsls	r1, r3
    30c4:	4b02      	ldr	r3, [pc, #8]	; (30d0 <system_pinmux_pin_set_config+0x2c>)
    30c6:	4798      	blx	r3
}
    30c8:	bd10      	pop	{r4, pc}
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	41004400 	.word	0x41004400
    30d0:	00002ffd 	.word	0x00002ffd

000030d4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    30d4:	4770      	bx	lr
    30d6:	46c0      	nop			; (mov r8, r8)

000030d8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    30d8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    30da:	4b05      	ldr	r3, [pc, #20]	; (30f0 <system_init+0x18>)
    30dc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    30de:	4b05      	ldr	r3, [pc, #20]	; (30f4 <system_init+0x1c>)
    30e0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    30e2:	4b05      	ldr	r3, [pc, #20]	; (30f8 <system_init+0x20>)
    30e4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    30e6:	4b05      	ldr	r3, [pc, #20]	; (30fc <system_init+0x24>)
    30e8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    30ea:	4b05      	ldr	r3, [pc, #20]	; (3100 <system_init+0x28>)
    30ec:	4798      	blx	r3
}
    30ee:	bd10      	pop	{r4, pc}
    30f0:	00002cdd 	.word	0x00002cdd
    30f4:	00002115 	.word	0x00002115
    30f8:	000030d5 	.word	0x000030d5
    30fc:	000030d5 	.word	0x000030d5
    3100:	000030d5 	.word	0x000030d5

00003104 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3104:	e7fe      	b.n	3104 <Dummy_Handler>
    3106:	46c0      	nop			; (mov r8, r8)

00003108 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3108:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    310a:	4b2e      	ldr	r3, [pc, #184]	; (31c4 <Reset_Handler+0xbc>)
    310c:	4a2e      	ldr	r2, [pc, #184]	; (31c8 <Reset_Handler+0xc0>)
    310e:	429a      	cmp	r2, r3
    3110:	d003      	beq.n	311a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    3112:	4b2e      	ldr	r3, [pc, #184]	; (31cc <Reset_Handler+0xc4>)
    3114:	4a2b      	ldr	r2, [pc, #172]	; (31c4 <Reset_Handler+0xbc>)
    3116:	429a      	cmp	r2, r3
    3118:	d304      	bcc.n	3124 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    311a:	4b2d      	ldr	r3, [pc, #180]	; (31d0 <Reset_Handler+0xc8>)
    311c:	4a2d      	ldr	r2, [pc, #180]	; (31d4 <Reset_Handler+0xcc>)
    311e:	429a      	cmp	r2, r3
    3120:	d310      	bcc.n	3144 <Reset_Handler+0x3c>
    3122:	e01e      	b.n	3162 <Reset_Handler+0x5a>
    3124:	4a2c      	ldr	r2, [pc, #176]	; (31d8 <Reset_Handler+0xd0>)
    3126:	4b29      	ldr	r3, [pc, #164]	; (31cc <Reset_Handler+0xc4>)
    3128:	3303      	adds	r3, #3
    312a:	1a9b      	subs	r3, r3, r2
    312c:	089b      	lsrs	r3, r3, #2
    312e:	3301      	adds	r3, #1
    3130:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    3132:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3134:	4823      	ldr	r0, [pc, #140]	; (31c4 <Reset_Handler+0xbc>)
    3136:	4924      	ldr	r1, [pc, #144]	; (31c8 <Reset_Handler+0xc0>)
    3138:	588c      	ldr	r4, [r1, r2]
    313a:	5084      	str	r4, [r0, r2]
    313c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    313e:	429a      	cmp	r2, r3
    3140:	d1fa      	bne.n	3138 <Reset_Handler+0x30>
    3142:	e7ea      	b.n	311a <Reset_Handler+0x12>
    3144:	4a25      	ldr	r2, [pc, #148]	; (31dc <Reset_Handler+0xd4>)
    3146:	4b22      	ldr	r3, [pc, #136]	; (31d0 <Reset_Handler+0xc8>)
    3148:	3303      	adds	r3, #3
    314a:	1a9b      	subs	r3, r3, r2
    314c:	089b      	lsrs	r3, r3, #2
    314e:	3301      	adds	r3, #1
    3150:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3152:	2200      	movs	r2, #0
                *pDest++ = 0;
    3154:	481f      	ldr	r0, [pc, #124]	; (31d4 <Reset_Handler+0xcc>)
    3156:	2100      	movs	r1, #0
    3158:	1814      	adds	r4, r2, r0
    315a:	6021      	str	r1, [r4, #0]
    315c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    315e:	429a      	cmp	r2, r3
    3160:	d1fa      	bne.n	3158 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3162:	4a1f      	ldr	r2, [pc, #124]	; (31e0 <Reset_Handler+0xd8>)
    3164:	21ff      	movs	r1, #255	; 0xff
    3166:	4b1f      	ldr	r3, [pc, #124]	; (31e4 <Reset_Handler+0xdc>)
    3168:	438b      	bics	r3, r1
    316a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    316c:	39fd      	subs	r1, #253	; 0xfd
    316e:	2390      	movs	r3, #144	; 0x90
    3170:	005b      	lsls	r3, r3, #1
    3172:	4a1d      	ldr	r2, [pc, #116]	; (31e8 <Reset_Handler+0xe0>)
    3174:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3176:	481d      	ldr	r0, [pc, #116]	; (31ec <Reset_Handler+0xe4>)
    3178:	78c3      	ldrb	r3, [r0, #3]
    317a:	2403      	movs	r4, #3
    317c:	43a3      	bics	r3, r4
    317e:	2202      	movs	r2, #2
    3180:	4313      	orrs	r3, r2
    3182:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3184:	78c3      	ldrb	r3, [r0, #3]
    3186:	260c      	movs	r6, #12
    3188:	43b3      	bics	r3, r6
    318a:	2108      	movs	r1, #8
    318c:	430b      	orrs	r3, r1
    318e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    3190:	4b17      	ldr	r3, [pc, #92]	; (31f0 <Reset_Handler+0xe8>)
    3192:	7b98      	ldrb	r0, [r3, #14]
    3194:	2530      	movs	r5, #48	; 0x30
    3196:	43a8      	bics	r0, r5
    3198:	0005      	movs	r5, r0
    319a:	2020      	movs	r0, #32
    319c:	4328      	orrs	r0, r5
    319e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    31a0:	7b98      	ldrb	r0, [r3, #14]
    31a2:	43b0      	bics	r0, r6
    31a4:	4301      	orrs	r1, r0
    31a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    31a8:	7b99      	ldrb	r1, [r3, #14]
    31aa:	43a1      	bics	r1, r4
    31ac:	430a      	orrs	r2, r1
    31ae:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    31b0:	4a10      	ldr	r2, [pc, #64]	; (31f4 <Reset_Handler+0xec>)
    31b2:	6851      	ldr	r1, [r2, #4]
    31b4:	2380      	movs	r3, #128	; 0x80
    31b6:	430b      	orrs	r3, r1
    31b8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    31ba:	4b0f      	ldr	r3, [pc, #60]	; (31f8 <Reset_Handler+0xf0>)
    31bc:	4798      	blx	r3

        /* Branch to main function */
        main();
    31be:	4b0f      	ldr	r3, [pc, #60]	; (31fc <Reset_Handler+0xf4>)
    31c0:	4798      	blx	r3
    31c2:	e7fe      	b.n	31c2 <Reset_Handler+0xba>
    31c4:	20000000 	.word	0x20000000
    31c8:	000041d8 	.word	0x000041d8
    31cc:	20000068 	.word	0x20000068
    31d0:	20000128 	.word	0x20000128
    31d4:	20000068 	.word	0x20000068
    31d8:	20000004 	.word	0x20000004
    31dc:	2000006c 	.word	0x2000006c
    31e0:	e000ed00 	.word	0xe000ed00
    31e4:	00002000 	.word	0x00002000
    31e8:	41007000 	.word	0x41007000
    31ec:	41005000 	.word	0x41005000
    31f0:	41004800 	.word	0x41004800
    31f4:	41004000 	.word	0x41004000
    31f8:	000035c1 	.word	0x000035c1
    31fc:	00003315 	.word	0x00003315

00003200 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3200:	b5f0      	push	{r4, r5, r6, r7, lr}
    3202:	4647      	mov	r7, r8
    3204:	b480      	push	{r7}
    3206:	000c      	movs	r4, r1
    3208:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    320a:	2800      	cmp	r0, #0
    320c:	d10d      	bne.n	322a <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    320e:	2a00      	cmp	r2, #0
    3210:	dd0e      	ble.n	3230 <_read+0x30>
    3212:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3214:	4e08      	ldr	r6, [pc, #32]	; (3238 <_read+0x38>)
    3216:	4d09      	ldr	r5, [pc, #36]	; (323c <_read+0x3c>)
    3218:	6830      	ldr	r0, [r6, #0]
    321a:	0021      	movs	r1, r4
    321c:	682b      	ldr	r3, [r5, #0]
    321e:	4798      	blx	r3
		ptr++;
    3220:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    3222:	42a7      	cmp	r7, r4
    3224:	d1f8      	bne.n	3218 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    3226:	4640      	mov	r0, r8
    3228:	e003      	b.n	3232 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    322a:	2001      	movs	r0, #1
    322c:	4240      	negs	r0, r0
    322e:	e000      	b.n	3232 <_read+0x32>
	}

	for (; len > 0; --len) {
    3230:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    3232:	bc04      	pop	{r2}
    3234:	4690      	mov	r8, r2
    3236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3238:	20000120 	.word	0x20000120
    323c:	20000118 	.word	0x20000118

00003240 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3240:	b5f0      	push	{r4, r5, r6, r7, lr}
    3242:	4647      	mov	r7, r8
    3244:	b480      	push	{r7}
    3246:	000e      	movs	r6, r1
    3248:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    324a:	3801      	subs	r0, #1
    324c:	2802      	cmp	r0, #2
    324e:	d811      	bhi.n	3274 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    3250:	2a00      	cmp	r2, #0
    3252:	d012      	beq.n	327a <_write+0x3a>
    3254:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3256:	4b0c      	ldr	r3, [pc, #48]	; (3288 <_write+0x48>)
    3258:	4698      	mov	r8, r3
    325a:	4f0c      	ldr	r7, [pc, #48]	; (328c <_write+0x4c>)
    325c:	4643      	mov	r3, r8
    325e:	6818      	ldr	r0, [r3, #0]
    3260:	5d31      	ldrb	r1, [r6, r4]
    3262:	683b      	ldr	r3, [r7, #0]
    3264:	4798      	blx	r3
    3266:	2800      	cmp	r0, #0
    3268:	db09      	blt.n	327e <_write+0x3e>
			return -1;
		}
		++nChars;
    326a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    326c:	42a5      	cmp	r5, r4
    326e:	d1f5      	bne.n	325c <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    3270:	0020      	movs	r0, r4
    3272:	e006      	b.n	3282 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    3274:	2001      	movs	r0, #1
    3276:	4240      	negs	r0, r0
    3278:	e003      	b.n	3282 <_write+0x42>
	}

	for (; len != 0; --len) {
    327a:	2000      	movs	r0, #0
    327c:	e001      	b.n	3282 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    327e:	2001      	movs	r0, #1
    3280:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    3282:	bc04      	pop	{r2}
    3284:	4690      	mov	r8, r2
    3286:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3288:	20000120 	.word	0x20000120
    328c:	2000011c 	.word	0x2000011c

00003290 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3290:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3292:	4a06      	ldr	r2, [pc, #24]	; (32ac <_sbrk+0x1c>)
    3294:	6812      	ldr	r2, [r2, #0]
    3296:	2a00      	cmp	r2, #0
    3298:	d102      	bne.n	32a0 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    329a:	4905      	ldr	r1, [pc, #20]	; (32b0 <_sbrk+0x20>)
    329c:	4a03      	ldr	r2, [pc, #12]	; (32ac <_sbrk+0x1c>)
    329e:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    32a0:	4a02      	ldr	r2, [pc, #8]	; (32ac <_sbrk+0x1c>)
    32a2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    32a4:	18c3      	adds	r3, r0, r3
    32a6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    32a8:	4770      	bx	lr
    32aa:	46c0      	nop			; (mov r8, r8)
    32ac:	200000c0 	.word	0x200000c0
    32b0:	20002128 	.word	0x20002128

000032b4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    32b4:	2001      	movs	r0, #1
    32b6:	4240      	negs	r0, r0
    32b8:	4770      	bx	lr
    32ba:	46c0      	nop			; (mov r8, r8)

000032bc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    32bc:	2380      	movs	r3, #128	; 0x80
    32be:	019b      	lsls	r3, r3, #6
    32c0:	604b      	str	r3, [r1, #4]

	return 0;
}
    32c2:	2000      	movs	r0, #0
    32c4:	4770      	bx	lr
    32c6:	46c0      	nop			; (mov r8, r8)

000032c8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    32c8:	2001      	movs	r0, #1
    32ca:	4770      	bx	lr

000032cc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    32cc:	2000      	movs	r0, #0
    32ce:	4770      	bx	lr

000032d0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    32d0:	b570      	push	{r4, r5, r6, lr}
    32d2:	b082      	sub	sp, #8
    32d4:	0005      	movs	r5, r0
    32d6:	000e      	movs	r6, r1
	uint16_t temp = 0;
    32d8:	2200      	movs	r2, #0
    32da:	466b      	mov	r3, sp
    32dc:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    32de:	4c06      	ldr	r4, [pc, #24]	; (32f8 <usart_serial_getchar+0x28>)
    32e0:	466b      	mov	r3, sp
    32e2:	1d99      	adds	r1, r3, #6
    32e4:	0028      	movs	r0, r5
    32e6:	47a0      	blx	r4
    32e8:	2800      	cmp	r0, #0
    32ea:	d1f9      	bne.n	32e0 <usart_serial_getchar+0x10>

	*c = temp;
    32ec:	466b      	mov	r3, sp
    32ee:	3306      	adds	r3, #6
    32f0:	881b      	ldrh	r3, [r3, #0]
    32f2:	7033      	strb	r3, [r6, #0]
}
    32f4:	b002      	add	sp, #8
    32f6:	bd70      	pop	{r4, r5, r6, pc}
    32f8:	0000296d 	.word	0x0000296d

000032fc <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    32fc:	b570      	push	{r4, r5, r6, lr}
    32fe:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3300:	b28c      	uxth	r4, r1
    3302:	4e03      	ldr	r6, [pc, #12]	; (3310 <usart_serial_putchar+0x14>)
    3304:	0021      	movs	r1, r4
    3306:	0028      	movs	r0, r5
    3308:	47b0      	blx	r6
    330a:	2800      	cmp	r0, #0
    330c:	d1fa      	bne.n	3304 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    330e:	bd70      	pop	{r4, r5, r6, pc}
    3310:	00002941 	.word	0x00002941

00003314 <main>:
	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
	usart_enable(&cdc_uart_module);
}

int main (void)
{
    3314:	b5f0      	push	{r4, r5, r6, r7, lr}
    3316:	b093      	sub	sp, #76	; 0x4c
	system_init();
    3318:	4b39      	ldr	r3, [pc, #228]	; (3400 <main+0xec>)
    331a:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    331c:	2501      	movs	r5, #1
    331e:	4b39      	ldr	r3, [pc, #228]	; (3404 <main+0xf0>)
    3320:	701d      	strb	r5, [r3, #0]
    3322:	f3bf 8f5f 	dmb	sy
    3326:	b662      	cpsie	i
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    3328:	a911      	add	r1, sp, #68	; 0x44
    332a:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    332c:	2400      	movs	r4, #0
    332e:	2600      	movs	r6, #0
    3330:	708c      	strb	r4, [r1, #2]
	system_interrupt_enable_global();
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3332:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(LED0_PIN, &pin_conf);
    3334:	2017      	movs	r0, #23
    3336:	4b34      	ldr	r3, [pc, #208]	; (3408 <main+0xf4>)
    3338:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    333a:	2280      	movs	r2, #128	; 0x80
    333c:	0412      	lsls	r2, r2, #16
    333e:	4b33      	ldr	r3, [pc, #204]	; (340c <main+0xf8>)
    3340:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3342:	aa01      	add	r2, sp, #4
    3344:	2380      	movs	r3, #128	; 0x80
    3346:	05db      	lsls	r3, r3, #23
    3348:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    334a:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    334c:	23ff      	movs	r3, #255	; 0xff
    334e:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    3350:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3352:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3354:	3bdb      	subs	r3, #219	; 0xdb
    3356:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
    3358:	3301      	adds	r3, #1
    335a:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
    335c:	3301      	adds	r3, #1
    335e:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    3360:	3301      	adds	r3, #1
    3362:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    3364:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3366:	3305      	adds	r3, #5
    3368:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    336a:	3301      	adds	r3, #1
    336c:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    336e:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3370:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3372:	2300      	movs	r3, #0
    3374:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3376:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3378:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    337a:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
    337c:	2313      	movs	r3, #19
    337e:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3380:	7756      	strb	r6, [r2, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    3382:	23c4      	movs	r3, #196	; 0xc4
    3384:	039b      	lsls	r3, r3, #14
    3386:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    3388:	2301      	movs	r3, #1
    338a:	425b      	negs	r3, r3
    338c:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    338e:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    3390:	4b1f      	ldr	r3, [pc, #124]	; (3410 <main+0xfc>)
    3392:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    3394:	4b1f      	ldr	r3, [pc, #124]	; (3414 <main+0x100>)
    3396:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    3398:	23e1      	movs	r3, #225	; 0xe1
    339a:	025b      	lsls	r3, r3, #9
    339c:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    339e:	4c1e      	ldr	r4, [pc, #120]	; (3418 <main+0x104>)
    33a0:	4b1e      	ldr	r3, [pc, #120]	; (341c <main+0x108>)
    33a2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    33a4:	491e      	ldr	r1, [pc, #120]	; (3420 <main+0x10c>)
    33a6:	4b1f      	ldr	r3, [pc, #124]	; (3424 <main+0x110>)
    33a8:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    33aa:	491f      	ldr	r1, [pc, #124]	; (3428 <main+0x114>)
    33ac:	4b1f      	ldr	r3, [pc, #124]	; (342c <main+0x118>)
    33ae:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    33b0:	491f      	ldr	r1, [pc, #124]	; (3430 <main+0x11c>)
    33b2:	0020      	movs	r0, r4
    33b4:	4b1f      	ldr	r3, [pc, #124]	; (3434 <main+0x120>)
    33b6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    33b8:	4f1f      	ldr	r7, [pc, #124]	; (3438 <main+0x124>)
    33ba:	683b      	ldr	r3, [r7, #0]
    33bc:	6898      	ldr	r0, [r3, #8]
    33be:	2100      	movs	r1, #0
    33c0:	4e1e      	ldr	r6, [pc, #120]	; (343c <main+0x128>)
    33c2:	47b0      	blx	r6
	setbuf(stdin, NULL);
    33c4:	683b      	ldr	r3, [r7, #0]
    33c6:	6858      	ldr	r0, [r3, #4]
    33c8:	2100      	movs	r1, #0
    33ca:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    33cc:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    33ce:	0030      	movs	r0, r6
    33d0:	4b1b      	ldr	r3, [pc, #108]	; (3440 <main+0x12c>)
    33d2:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    33d4:	231f      	movs	r3, #31
    33d6:	4018      	ands	r0, r3
    33d8:	4085      	lsls	r5, r0
    33da:	4b1a      	ldr	r3, [pc, #104]	; (3444 <main+0x130>)
    33dc:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    33de:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    33e0:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    33e2:	2a00      	cmp	r2, #0
    33e4:	d1fc      	bne.n	33e0 <main+0xcc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    33e6:	6832      	ldr	r2, [r6, #0]
    33e8:	2302      	movs	r3, #2
    33ea:	4313      	orrs	r3, r2
    33ec:	6033      	str	r3, [r6, #0]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    33ee:	4f07      	ldr	r7, [pc, #28]	; (340c <main+0xf8>)
    33f0:	2680      	movs	r6, #128	; 0x80
    33f2:	0436      	lsls	r6, r6, #16
	port_pin_set_config(LED0_PIN, &pin_conf);
	port_pin_set_output_level(LED0_PIN, true);
	configure_console();
	while(1) {
		port_pin_toggle_output_level(LED0_PIN);
		printf("I'M ALIVE\n");
    33f4:	4d14      	ldr	r5, [pc, #80]	; (3448 <main+0x134>)
    33f6:	4c15      	ldr	r4, [pc, #84]	; (344c <main+0x138>)
    33f8:	61fe      	str	r6, [r7, #28]
    33fa:	0028      	movs	r0, r5
    33fc:	47a0      	blx	r4
    33fe:	e7fb      	b.n	33f8 <main+0xe4>
    3400:	000030d9 	.word	0x000030d9
    3404:	20000000 	.word	0x20000000
    3408:	00002189 	.word	0x00002189
    340c:	41004400 	.word	0x41004400
    3410:	002a0003 	.word	0x002a0003
    3414:	002b0003 	.word	0x002b0003
    3418:	200000c4 	.word	0x200000c4
    341c:	20000120 	.word	0x20000120
    3420:	000032fd 	.word	0x000032fd
    3424:	2000011c 	.word	0x2000011c
    3428:	000032d1 	.word	0x000032d1
    342c:	20000118 	.word	0x20000118
    3430:	42001800 	.word	0x42001800
    3434:	00002601 	.word	0x00002601
    3438:	20000064 	.word	0x20000064
    343c:	00003709 	.word	0x00003709
    3440:	00002575 	.word	0x00002575
    3444:	e000e100 	.word	0xe000e100
    3448:	00004144 	.word	0x00004144
    344c:	000036f5 	.word	0x000036f5

00003450 <__aeabi_uidiv>:
    3450:	2200      	movs	r2, #0
    3452:	0843      	lsrs	r3, r0, #1
    3454:	428b      	cmp	r3, r1
    3456:	d374      	bcc.n	3542 <__aeabi_uidiv+0xf2>
    3458:	0903      	lsrs	r3, r0, #4
    345a:	428b      	cmp	r3, r1
    345c:	d35f      	bcc.n	351e <__aeabi_uidiv+0xce>
    345e:	0a03      	lsrs	r3, r0, #8
    3460:	428b      	cmp	r3, r1
    3462:	d344      	bcc.n	34ee <__aeabi_uidiv+0x9e>
    3464:	0b03      	lsrs	r3, r0, #12
    3466:	428b      	cmp	r3, r1
    3468:	d328      	bcc.n	34bc <__aeabi_uidiv+0x6c>
    346a:	0c03      	lsrs	r3, r0, #16
    346c:	428b      	cmp	r3, r1
    346e:	d30d      	bcc.n	348c <__aeabi_uidiv+0x3c>
    3470:	22ff      	movs	r2, #255	; 0xff
    3472:	0209      	lsls	r1, r1, #8
    3474:	ba12      	rev	r2, r2
    3476:	0c03      	lsrs	r3, r0, #16
    3478:	428b      	cmp	r3, r1
    347a:	d302      	bcc.n	3482 <__aeabi_uidiv+0x32>
    347c:	1212      	asrs	r2, r2, #8
    347e:	0209      	lsls	r1, r1, #8
    3480:	d065      	beq.n	354e <__aeabi_uidiv+0xfe>
    3482:	0b03      	lsrs	r3, r0, #12
    3484:	428b      	cmp	r3, r1
    3486:	d319      	bcc.n	34bc <__aeabi_uidiv+0x6c>
    3488:	e000      	b.n	348c <__aeabi_uidiv+0x3c>
    348a:	0a09      	lsrs	r1, r1, #8
    348c:	0bc3      	lsrs	r3, r0, #15
    348e:	428b      	cmp	r3, r1
    3490:	d301      	bcc.n	3496 <__aeabi_uidiv+0x46>
    3492:	03cb      	lsls	r3, r1, #15
    3494:	1ac0      	subs	r0, r0, r3
    3496:	4152      	adcs	r2, r2
    3498:	0b83      	lsrs	r3, r0, #14
    349a:	428b      	cmp	r3, r1
    349c:	d301      	bcc.n	34a2 <__aeabi_uidiv+0x52>
    349e:	038b      	lsls	r3, r1, #14
    34a0:	1ac0      	subs	r0, r0, r3
    34a2:	4152      	adcs	r2, r2
    34a4:	0b43      	lsrs	r3, r0, #13
    34a6:	428b      	cmp	r3, r1
    34a8:	d301      	bcc.n	34ae <__aeabi_uidiv+0x5e>
    34aa:	034b      	lsls	r3, r1, #13
    34ac:	1ac0      	subs	r0, r0, r3
    34ae:	4152      	adcs	r2, r2
    34b0:	0b03      	lsrs	r3, r0, #12
    34b2:	428b      	cmp	r3, r1
    34b4:	d301      	bcc.n	34ba <__aeabi_uidiv+0x6a>
    34b6:	030b      	lsls	r3, r1, #12
    34b8:	1ac0      	subs	r0, r0, r3
    34ba:	4152      	adcs	r2, r2
    34bc:	0ac3      	lsrs	r3, r0, #11
    34be:	428b      	cmp	r3, r1
    34c0:	d301      	bcc.n	34c6 <__aeabi_uidiv+0x76>
    34c2:	02cb      	lsls	r3, r1, #11
    34c4:	1ac0      	subs	r0, r0, r3
    34c6:	4152      	adcs	r2, r2
    34c8:	0a83      	lsrs	r3, r0, #10
    34ca:	428b      	cmp	r3, r1
    34cc:	d301      	bcc.n	34d2 <__aeabi_uidiv+0x82>
    34ce:	028b      	lsls	r3, r1, #10
    34d0:	1ac0      	subs	r0, r0, r3
    34d2:	4152      	adcs	r2, r2
    34d4:	0a43      	lsrs	r3, r0, #9
    34d6:	428b      	cmp	r3, r1
    34d8:	d301      	bcc.n	34de <__aeabi_uidiv+0x8e>
    34da:	024b      	lsls	r3, r1, #9
    34dc:	1ac0      	subs	r0, r0, r3
    34de:	4152      	adcs	r2, r2
    34e0:	0a03      	lsrs	r3, r0, #8
    34e2:	428b      	cmp	r3, r1
    34e4:	d301      	bcc.n	34ea <__aeabi_uidiv+0x9a>
    34e6:	020b      	lsls	r3, r1, #8
    34e8:	1ac0      	subs	r0, r0, r3
    34ea:	4152      	adcs	r2, r2
    34ec:	d2cd      	bcs.n	348a <__aeabi_uidiv+0x3a>
    34ee:	09c3      	lsrs	r3, r0, #7
    34f0:	428b      	cmp	r3, r1
    34f2:	d301      	bcc.n	34f8 <__aeabi_uidiv+0xa8>
    34f4:	01cb      	lsls	r3, r1, #7
    34f6:	1ac0      	subs	r0, r0, r3
    34f8:	4152      	adcs	r2, r2
    34fa:	0983      	lsrs	r3, r0, #6
    34fc:	428b      	cmp	r3, r1
    34fe:	d301      	bcc.n	3504 <__aeabi_uidiv+0xb4>
    3500:	018b      	lsls	r3, r1, #6
    3502:	1ac0      	subs	r0, r0, r3
    3504:	4152      	adcs	r2, r2
    3506:	0943      	lsrs	r3, r0, #5
    3508:	428b      	cmp	r3, r1
    350a:	d301      	bcc.n	3510 <__aeabi_uidiv+0xc0>
    350c:	014b      	lsls	r3, r1, #5
    350e:	1ac0      	subs	r0, r0, r3
    3510:	4152      	adcs	r2, r2
    3512:	0903      	lsrs	r3, r0, #4
    3514:	428b      	cmp	r3, r1
    3516:	d301      	bcc.n	351c <__aeabi_uidiv+0xcc>
    3518:	010b      	lsls	r3, r1, #4
    351a:	1ac0      	subs	r0, r0, r3
    351c:	4152      	adcs	r2, r2
    351e:	08c3      	lsrs	r3, r0, #3
    3520:	428b      	cmp	r3, r1
    3522:	d301      	bcc.n	3528 <__aeabi_uidiv+0xd8>
    3524:	00cb      	lsls	r3, r1, #3
    3526:	1ac0      	subs	r0, r0, r3
    3528:	4152      	adcs	r2, r2
    352a:	0883      	lsrs	r3, r0, #2
    352c:	428b      	cmp	r3, r1
    352e:	d301      	bcc.n	3534 <__aeabi_uidiv+0xe4>
    3530:	008b      	lsls	r3, r1, #2
    3532:	1ac0      	subs	r0, r0, r3
    3534:	4152      	adcs	r2, r2
    3536:	0843      	lsrs	r3, r0, #1
    3538:	428b      	cmp	r3, r1
    353a:	d301      	bcc.n	3540 <__aeabi_uidiv+0xf0>
    353c:	004b      	lsls	r3, r1, #1
    353e:	1ac0      	subs	r0, r0, r3
    3540:	4152      	adcs	r2, r2
    3542:	1a41      	subs	r1, r0, r1
    3544:	d200      	bcs.n	3548 <__aeabi_uidiv+0xf8>
    3546:	4601      	mov	r1, r0
    3548:	4152      	adcs	r2, r2
    354a:	4610      	mov	r0, r2
    354c:	4770      	bx	lr
    354e:	e7ff      	b.n	3550 <__aeabi_uidiv+0x100>
    3550:	b501      	push	{r0, lr}
    3552:	2000      	movs	r0, #0
    3554:	f000 f806 	bl	3564 <__aeabi_idiv0>
    3558:	bd02      	pop	{r1, pc}
    355a:	46c0      	nop			; (mov r8, r8)

0000355c <__aeabi_uidivmod>:
    355c:	2900      	cmp	r1, #0
    355e:	d0f7      	beq.n	3550 <__aeabi_uidiv+0x100>
    3560:	e776      	b.n	3450 <__aeabi_uidiv>
    3562:	4770      	bx	lr

00003564 <__aeabi_idiv0>:
    3564:	4770      	bx	lr
    3566:	46c0      	nop			; (mov r8, r8)

00003568 <__aeabi_lmul>:
    3568:	b5f0      	push	{r4, r5, r6, r7, lr}
    356a:	464f      	mov	r7, r9
    356c:	4646      	mov	r6, r8
    356e:	b4c0      	push	{r6, r7}
    3570:	0416      	lsls	r6, r2, #16
    3572:	0c36      	lsrs	r6, r6, #16
    3574:	4699      	mov	r9, r3
    3576:	0033      	movs	r3, r6
    3578:	0405      	lsls	r5, r0, #16
    357a:	0c2c      	lsrs	r4, r5, #16
    357c:	0c07      	lsrs	r7, r0, #16
    357e:	0c15      	lsrs	r5, r2, #16
    3580:	4363      	muls	r3, r4
    3582:	437e      	muls	r6, r7
    3584:	436f      	muls	r7, r5
    3586:	4365      	muls	r5, r4
    3588:	0c1c      	lsrs	r4, r3, #16
    358a:	19ad      	adds	r5, r5, r6
    358c:	1964      	adds	r4, r4, r5
    358e:	469c      	mov	ip, r3
    3590:	42a6      	cmp	r6, r4
    3592:	d903      	bls.n	359c <__aeabi_lmul+0x34>
    3594:	2380      	movs	r3, #128	; 0x80
    3596:	025b      	lsls	r3, r3, #9
    3598:	4698      	mov	r8, r3
    359a:	4447      	add	r7, r8
    359c:	4663      	mov	r3, ip
    359e:	0c25      	lsrs	r5, r4, #16
    35a0:	19ef      	adds	r7, r5, r7
    35a2:	041d      	lsls	r5, r3, #16
    35a4:	464b      	mov	r3, r9
    35a6:	434a      	muls	r2, r1
    35a8:	4343      	muls	r3, r0
    35aa:	0c2d      	lsrs	r5, r5, #16
    35ac:	0424      	lsls	r4, r4, #16
    35ae:	1964      	adds	r4, r4, r5
    35b0:	1899      	adds	r1, r3, r2
    35b2:	19c9      	adds	r1, r1, r7
    35b4:	0020      	movs	r0, r4
    35b6:	bc0c      	pop	{r2, r3}
    35b8:	4690      	mov	r8, r2
    35ba:	4699      	mov	r9, r3
    35bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35be:	46c0      	nop			; (mov r8, r8)

000035c0 <__libc_init_array>:
    35c0:	4b0e      	ldr	r3, [pc, #56]	; (35fc <__libc_init_array+0x3c>)
    35c2:	b570      	push	{r4, r5, r6, lr}
    35c4:	2500      	movs	r5, #0
    35c6:	001e      	movs	r6, r3
    35c8:	4c0d      	ldr	r4, [pc, #52]	; (3600 <__libc_init_array+0x40>)
    35ca:	1ae4      	subs	r4, r4, r3
    35cc:	10a4      	asrs	r4, r4, #2
    35ce:	42a5      	cmp	r5, r4
    35d0:	d004      	beq.n	35dc <__libc_init_array+0x1c>
    35d2:	00ab      	lsls	r3, r5, #2
    35d4:	58f3      	ldr	r3, [r6, r3]
    35d6:	4798      	blx	r3
    35d8:	3501      	adds	r5, #1
    35da:	e7f8      	b.n	35ce <__libc_init_array+0xe>
    35dc:	f000 fdec 	bl	41b8 <_init>
    35e0:	4b08      	ldr	r3, [pc, #32]	; (3604 <__libc_init_array+0x44>)
    35e2:	2500      	movs	r5, #0
    35e4:	001e      	movs	r6, r3
    35e6:	4c08      	ldr	r4, [pc, #32]	; (3608 <__libc_init_array+0x48>)
    35e8:	1ae4      	subs	r4, r4, r3
    35ea:	10a4      	asrs	r4, r4, #2
    35ec:	42a5      	cmp	r5, r4
    35ee:	d004      	beq.n	35fa <__libc_init_array+0x3a>
    35f0:	00ab      	lsls	r3, r5, #2
    35f2:	58f3      	ldr	r3, [r6, r3]
    35f4:	4798      	blx	r3
    35f6:	3501      	adds	r5, #1
    35f8:	e7f8      	b.n	35ec <__libc_init_array+0x2c>
    35fa:	bd70      	pop	{r4, r5, r6, pc}
    35fc:	000041c4 	.word	0x000041c4
    3600:	000041c4 	.word	0x000041c4
    3604:	000041c4 	.word	0x000041c4
    3608:	000041c8 	.word	0x000041c8

0000360c <memcpy>:
    360c:	2300      	movs	r3, #0
    360e:	b510      	push	{r4, lr}
    3610:	429a      	cmp	r2, r3
    3612:	d003      	beq.n	361c <memcpy+0x10>
    3614:	5ccc      	ldrb	r4, [r1, r3]
    3616:	54c4      	strb	r4, [r0, r3]
    3618:	3301      	adds	r3, #1
    361a:	e7f9      	b.n	3610 <memcpy+0x4>
    361c:	bd10      	pop	{r4, pc}

0000361e <memset>:
    361e:	0003      	movs	r3, r0
    3620:	1882      	adds	r2, r0, r2
    3622:	4293      	cmp	r3, r2
    3624:	d002      	beq.n	362c <memset+0xe>
    3626:	7019      	strb	r1, [r3, #0]
    3628:	3301      	adds	r3, #1
    362a:	e7fa      	b.n	3622 <memset+0x4>
    362c:	4770      	bx	lr
	...

00003630 <_puts_r>:
    3630:	b570      	push	{r4, r5, r6, lr}
    3632:	0005      	movs	r5, r0
    3634:	000e      	movs	r6, r1
    3636:	2800      	cmp	r0, #0
    3638:	d004      	beq.n	3644 <_puts_r+0x14>
    363a:	6983      	ldr	r3, [r0, #24]
    363c:	2b00      	cmp	r3, #0
    363e:	d101      	bne.n	3644 <_puts_r+0x14>
    3640:	f000 fade 	bl	3c00 <__sinit>
    3644:	69ab      	ldr	r3, [r5, #24]
    3646:	68ac      	ldr	r4, [r5, #8]
    3648:	2b00      	cmp	r3, #0
    364a:	d102      	bne.n	3652 <_puts_r+0x22>
    364c:	0028      	movs	r0, r5
    364e:	f000 fad7 	bl	3c00 <__sinit>
    3652:	4b25      	ldr	r3, [pc, #148]	; (36e8 <_puts_r+0xb8>)
    3654:	429c      	cmp	r4, r3
    3656:	d101      	bne.n	365c <_puts_r+0x2c>
    3658:	686c      	ldr	r4, [r5, #4]
    365a:	e008      	b.n	366e <_puts_r+0x3e>
    365c:	4b23      	ldr	r3, [pc, #140]	; (36ec <_puts_r+0xbc>)
    365e:	429c      	cmp	r4, r3
    3660:	d101      	bne.n	3666 <_puts_r+0x36>
    3662:	68ac      	ldr	r4, [r5, #8]
    3664:	e003      	b.n	366e <_puts_r+0x3e>
    3666:	4b22      	ldr	r3, [pc, #136]	; (36f0 <_puts_r+0xc0>)
    3668:	429c      	cmp	r4, r3
    366a:	d100      	bne.n	366e <_puts_r+0x3e>
    366c:	68ec      	ldr	r4, [r5, #12]
    366e:	89a3      	ldrh	r3, [r4, #12]
    3670:	071b      	lsls	r3, r3, #28
    3672:	d502      	bpl.n	367a <_puts_r+0x4a>
    3674:	6923      	ldr	r3, [r4, #16]
    3676:	2b00      	cmp	r3, #0
    3678:	d111      	bne.n	369e <_puts_r+0x6e>
    367a:	0021      	movs	r1, r4
    367c:	0028      	movs	r0, r5
    367e:	f000 f955 	bl	392c <__swsetup_r>
    3682:	2800      	cmp	r0, #0
    3684:	d00b      	beq.n	369e <_puts_r+0x6e>
    3686:	2001      	movs	r0, #1
    3688:	4240      	negs	r0, r0
    368a:	e02b      	b.n	36e4 <_puts_r+0xb4>
    368c:	3b01      	subs	r3, #1
    368e:	3601      	adds	r6, #1
    3690:	60a3      	str	r3, [r4, #8]
    3692:	2b00      	cmp	r3, #0
    3694:	db08      	blt.n	36a8 <_puts_r+0x78>
    3696:	6823      	ldr	r3, [r4, #0]
    3698:	1c5a      	adds	r2, r3, #1
    369a:	6022      	str	r2, [r4, #0]
    369c:	7019      	strb	r1, [r3, #0]
    369e:	7831      	ldrb	r1, [r6, #0]
    36a0:	68a3      	ldr	r3, [r4, #8]
    36a2:	2900      	cmp	r1, #0
    36a4:	d1f2      	bne.n	368c <_puts_r+0x5c>
    36a6:	e00b      	b.n	36c0 <_puts_r+0x90>
    36a8:	69a2      	ldr	r2, [r4, #24]
    36aa:	4293      	cmp	r3, r2
    36ac:	db01      	blt.n	36b2 <_puts_r+0x82>
    36ae:	290a      	cmp	r1, #10
    36b0:	d1f1      	bne.n	3696 <_puts_r+0x66>
    36b2:	0022      	movs	r2, r4
    36b4:	0028      	movs	r0, r5
    36b6:	f000 f8e1 	bl	387c <__swbuf_r>
    36ba:	1c43      	adds	r3, r0, #1
    36bc:	d1ef      	bne.n	369e <_puts_r+0x6e>
    36be:	e7e2      	b.n	3686 <_puts_r+0x56>
    36c0:	3b01      	subs	r3, #1
    36c2:	60a3      	str	r3, [r4, #8]
    36c4:	2b00      	cmp	r3, #0
    36c6:	da08      	bge.n	36da <_puts_r+0xaa>
    36c8:	0022      	movs	r2, r4
    36ca:	310a      	adds	r1, #10
    36cc:	0028      	movs	r0, r5
    36ce:	f000 f8d5 	bl	387c <__swbuf_r>
    36d2:	1c43      	adds	r3, r0, #1
    36d4:	d0d7      	beq.n	3686 <_puts_r+0x56>
    36d6:	200a      	movs	r0, #10
    36d8:	e004      	b.n	36e4 <_puts_r+0xb4>
    36da:	200a      	movs	r0, #10
    36dc:	6823      	ldr	r3, [r4, #0]
    36de:	1c5a      	adds	r2, r3, #1
    36e0:	6022      	str	r2, [r4, #0]
    36e2:	7018      	strb	r0, [r3, #0]
    36e4:	bd70      	pop	{r4, r5, r6, pc}
    36e6:	46c0      	nop			; (mov r8, r8)
    36e8:	00004158 	.word	0x00004158
    36ec:	00004178 	.word	0x00004178
    36f0:	00004198 	.word	0x00004198

000036f4 <puts>:
    36f4:	b510      	push	{r4, lr}
    36f6:	4b03      	ldr	r3, [pc, #12]	; (3704 <puts+0x10>)
    36f8:	0001      	movs	r1, r0
    36fa:	6818      	ldr	r0, [r3, #0]
    36fc:	f7ff ff98 	bl	3630 <_puts_r>
    3700:	bd10      	pop	{r4, pc}
    3702:	46c0      	nop			; (mov r8, r8)
    3704:	20000064 	.word	0x20000064

00003708 <setbuf>:
    3708:	424a      	negs	r2, r1
    370a:	414a      	adcs	r2, r1
    370c:	2380      	movs	r3, #128	; 0x80
    370e:	b510      	push	{r4, lr}
    3710:	0052      	lsls	r2, r2, #1
    3712:	00db      	lsls	r3, r3, #3
    3714:	f000 f802 	bl	371c <setvbuf>
    3718:	bd10      	pop	{r4, pc}
	...

0000371c <setvbuf>:
    371c:	b5f0      	push	{r4, r5, r6, r7, lr}
    371e:	001d      	movs	r5, r3
    3720:	4b51      	ldr	r3, [pc, #324]	; (3868 <setvbuf+0x14c>)
    3722:	b085      	sub	sp, #20
    3724:	681e      	ldr	r6, [r3, #0]
    3726:	0004      	movs	r4, r0
    3728:	000f      	movs	r7, r1
    372a:	9200      	str	r2, [sp, #0]
    372c:	2e00      	cmp	r6, #0
    372e:	d005      	beq.n	373c <setvbuf+0x20>
    3730:	69b3      	ldr	r3, [r6, #24]
    3732:	2b00      	cmp	r3, #0
    3734:	d102      	bne.n	373c <setvbuf+0x20>
    3736:	0030      	movs	r0, r6
    3738:	f000 fa62 	bl	3c00 <__sinit>
    373c:	4b4b      	ldr	r3, [pc, #300]	; (386c <setvbuf+0x150>)
    373e:	429c      	cmp	r4, r3
    3740:	d101      	bne.n	3746 <setvbuf+0x2a>
    3742:	6874      	ldr	r4, [r6, #4]
    3744:	e008      	b.n	3758 <setvbuf+0x3c>
    3746:	4b4a      	ldr	r3, [pc, #296]	; (3870 <setvbuf+0x154>)
    3748:	429c      	cmp	r4, r3
    374a:	d101      	bne.n	3750 <setvbuf+0x34>
    374c:	68b4      	ldr	r4, [r6, #8]
    374e:	e003      	b.n	3758 <setvbuf+0x3c>
    3750:	4b48      	ldr	r3, [pc, #288]	; (3874 <setvbuf+0x158>)
    3752:	429c      	cmp	r4, r3
    3754:	d100      	bne.n	3758 <setvbuf+0x3c>
    3756:	68f4      	ldr	r4, [r6, #12]
    3758:	9b00      	ldr	r3, [sp, #0]
    375a:	2b02      	cmp	r3, #2
    375c:	d005      	beq.n	376a <setvbuf+0x4e>
    375e:	2b01      	cmp	r3, #1
    3760:	d900      	bls.n	3764 <setvbuf+0x48>
    3762:	e07c      	b.n	385e <setvbuf+0x142>
    3764:	2d00      	cmp	r5, #0
    3766:	da00      	bge.n	376a <setvbuf+0x4e>
    3768:	e079      	b.n	385e <setvbuf+0x142>
    376a:	0021      	movs	r1, r4
    376c:	0030      	movs	r0, r6
    376e:	f000 f9d9 	bl	3b24 <_fflush_r>
    3772:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3774:	2900      	cmp	r1, #0
    3776:	d008      	beq.n	378a <setvbuf+0x6e>
    3778:	0023      	movs	r3, r4
    377a:	3344      	adds	r3, #68	; 0x44
    377c:	4299      	cmp	r1, r3
    377e:	d002      	beq.n	3786 <setvbuf+0x6a>
    3780:	0030      	movs	r0, r6
    3782:	f000 fb3f 	bl	3e04 <_free_r>
    3786:	2300      	movs	r3, #0
    3788:	6363      	str	r3, [r4, #52]	; 0x34
    378a:	2300      	movs	r3, #0
    378c:	61a3      	str	r3, [r4, #24]
    378e:	6063      	str	r3, [r4, #4]
    3790:	89a3      	ldrh	r3, [r4, #12]
    3792:	061b      	lsls	r3, r3, #24
    3794:	d503      	bpl.n	379e <setvbuf+0x82>
    3796:	6921      	ldr	r1, [r4, #16]
    3798:	0030      	movs	r0, r6
    379a:	f000 fb33 	bl	3e04 <_free_r>
    379e:	89a2      	ldrh	r2, [r4, #12]
    37a0:	4b35      	ldr	r3, [pc, #212]	; (3878 <setvbuf+0x15c>)
    37a2:	4013      	ands	r3, r2
    37a4:	81a3      	strh	r3, [r4, #12]
    37a6:	9b00      	ldr	r3, [sp, #0]
    37a8:	2b02      	cmp	r3, #2
    37aa:	d021      	beq.n	37f0 <setvbuf+0xd4>
    37ac:	ab03      	add	r3, sp, #12
    37ae:	aa02      	add	r2, sp, #8
    37b0:	0021      	movs	r1, r4
    37b2:	0030      	movs	r0, r6
    37b4:	f000 fab8 	bl	3d28 <__swhatbuf_r>
    37b8:	89a3      	ldrh	r3, [r4, #12]
    37ba:	4318      	orrs	r0, r3
    37bc:	81a0      	strh	r0, [r4, #12]
    37be:	2d00      	cmp	r5, #0
    37c0:	d101      	bne.n	37c6 <setvbuf+0xaa>
    37c2:	9d02      	ldr	r5, [sp, #8]
    37c4:	e001      	b.n	37ca <setvbuf+0xae>
    37c6:	2f00      	cmp	r7, #0
    37c8:	d125      	bne.n	3816 <setvbuf+0xfa>
    37ca:	0028      	movs	r0, r5
    37cc:	f000 fb10 	bl	3df0 <malloc>
    37d0:	9501      	str	r5, [sp, #4]
    37d2:	1e07      	subs	r7, r0, #0
    37d4:	d11a      	bne.n	380c <setvbuf+0xf0>
    37d6:	9b02      	ldr	r3, [sp, #8]
    37d8:	9301      	str	r3, [sp, #4]
    37da:	42ab      	cmp	r3, r5
    37dc:	d102      	bne.n	37e4 <setvbuf+0xc8>
    37de:	2001      	movs	r0, #1
    37e0:	4240      	negs	r0, r0
    37e2:	e006      	b.n	37f2 <setvbuf+0xd6>
    37e4:	9801      	ldr	r0, [sp, #4]
    37e6:	f000 fb03 	bl	3df0 <malloc>
    37ea:	1e07      	subs	r7, r0, #0
    37ec:	d10e      	bne.n	380c <setvbuf+0xf0>
    37ee:	e7f6      	b.n	37de <setvbuf+0xc2>
    37f0:	2000      	movs	r0, #0
    37f2:	2202      	movs	r2, #2
    37f4:	89a3      	ldrh	r3, [r4, #12]
    37f6:	4313      	orrs	r3, r2
    37f8:	81a3      	strh	r3, [r4, #12]
    37fa:	2300      	movs	r3, #0
    37fc:	60a3      	str	r3, [r4, #8]
    37fe:	0023      	movs	r3, r4
    3800:	3347      	adds	r3, #71	; 0x47
    3802:	6023      	str	r3, [r4, #0]
    3804:	6123      	str	r3, [r4, #16]
    3806:	2301      	movs	r3, #1
    3808:	6163      	str	r3, [r4, #20]
    380a:	e02a      	b.n	3862 <setvbuf+0x146>
    380c:	2280      	movs	r2, #128	; 0x80
    380e:	89a3      	ldrh	r3, [r4, #12]
    3810:	9d01      	ldr	r5, [sp, #4]
    3812:	4313      	orrs	r3, r2
    3814:	81a3      	strh	r3, [r4, #12]
    3816:	69b3      	ldr	r3, [r6, #24]
    3818:	2b00      	cmp	r3, #0
    381a:	d102      	bne.n	3822 <setvbuf+0x106>
    381c:	0030      	movs	r0, r6
    381e:	f000 f9ef 	bl	3c00 <__sinit>
    3822:	9b00      	ldr	r3, [sp, #0]
    3824:	2b01      	cmp	r3, #1
    3826:	d103      	bne.n	3830 <setvbuf+0x114>
    3828:	89a3      	ldrh	r3, [r4, #12]
    382a:	9a00      	ldr	r2, [sp, #0]
    382c:	431a      	orrs	r2, r3
    382e:	81a2      	strh	r2, [r4, #12]
    3830:	2308      	movs	r3, #8
    3832:	89a2      	ldrh	r2, [r4, #12]
    3834:	6027      	str	r7, [r4, #0]
    3836:	4013      	ands	r3, r2
    3838:	6127      	str	r7, [r4, #16]
    383a:	6165      	str	r5, [r4, #20]
    383c:	1e18      	subs	r0, r3, #0
    383e:	d00c      	beq.n	385a <setvbuf+0x13e>
    3840:	2301      	movs	r3, #1
    3842:	401a      	ands	r2, r3
    3844:	2300      	movs	r3, #0
    3846:	1e10      	subs	r0, r2, #0
    3848:	4298      	cmp	r0, r3
    384a:	d004      	beq.n	3856 <setvbuf+0x13a>
    384c:	426d      	negs	r5, r5
    384e:	60a3      	str	r3, [r4, #8]
    3850:	61a5      	str	r5, [r4, #24]
    3852:	0018      	movs	r0, r3
    3854:	e005      	b.n	3862 <setvbuf+0x146>
    3856:	60a5      	str	r5, [r4, #8]
    3858:	e003      	b.n	3862 <setvbuf+0x146>
    385a:	60a3      	str	r3, [r4, #8]
    385c:	e001      	b.n	3862 <setvbuf+0x146>
    385e:	2001      	movs	r0, #1
    3860:	4240      	negs	r0, r0
    3862:	b005      	add	sp, #20
    3864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3866:	46c0      	nop			; (mov r8, r8)
    3868:	20000064 	.word	0x20000064
    386c:	00004158 	.word	0x00004158
    3870:	00004178 	.word	0x00004178
    3874:	00004198 	.word	0x00004198
    3878:	fffff35c 	.word	0xfffff35c

0000387c <__swbuf_r>:
    387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    387e:	0005      	movs	r5, r0
    3880:	000f      	movs	r7, r1
    3882:	0014      	movs	r4, r2
    3884:	2800      	cmp	r0, #0
    3886:	d004      	beq.n	3892 <__swbuf_r+0x16>
    3888:	6983      	ldr	r3, [r0, #24]
    388a:	2b00      	cmp	r3, #0
    388c:	d101      	bne.n	3892 <__swbuf_r+0x16>
    388e:	f000 f9b7 	bl	3c00 <__sinit>
    3892:	4b23      	ldr	r3, [pc, #140]	; (3920 <__swbuf_r+0xa4>)
    3894:	429c      	cmp	r4, r3
    3896:	d101      	bne.n	389c <__swbuf_r+0x20>
    3898:	686c      	ldr	r4, [r5, #4]
    389a:	e008      	b.n	38ae <__swbuf_r+0x32>
    389c:	4b21      	ldr	r3, [pc, #132]	; (3924 <__swbuf_r+0xa8>)
    389e:	429c      	cmp	r4, r3
    38a0:	d101      	bne.n	38a6 <__swbuf_r+0x2a>
    38a2:	68ac      	ldr	r4, [r5, #8]
    38a4:	e003      	b.n	38ae <__swbuf_r+0x32>
    38a6:	4b20      	ldr	r3, [pc, #128]	; (3928 <__swbuf_r+0xac>)
    38a8:	429c      	cmp	r4, r3
    38aa:	d100      	bne.n	38ae <__swbuf_r+0x32>
    38ac:	68ec      	ldr	r4, [r5, #12]
    38ae:	69a3      	ldr	r3, [r4, #24]
    38b0:	60a3      	str	r3, [r4, #8]
    38b2:	89a3      	ldrh	r3, [r4, #12]
    38b4:	071b      	lsls	r3, r3, #28
    38b6:	d50a      	bpl.n	38ce <__swbuf_r+0x52>
    38b8:	6923      	ldr	r3, [r4, #16]
    38ba:	2b00      	cmp	r3, #0
    38bc:	d007      	beq.n	38ce <__swbuf_r+0x52>
    38be:	6823      	ldr	r3, [r4, #0]
    38c0:	6922      	ldr	r2, [r4, #16]
    38c2:	b2fe      	uxtb	r6, r7
    38c4:	1a98      	subs	r0, r3, r2
    38c6:	6963      	ldr	r3, [r4, #20]
    38c8:	4298      	cmp	r0, r3
    38ca:	db0f      	blt.n	38ec <__swbuf_r+0x70>
    38cc:	e008      	b.n	38e0 <__swbuf_r+0x64>
    38ce:	0021      	movs	r1, r4
    38d0:	0028      	movs	r0, r5
    38d2:	f000 f82b 	bl	392c <__swsetup_r>
    38d6:	2800      	cmp	r0, #0
    38d8:	d0f1      	beq.n	38be <__swbuf_r+0x42>
    38da:	2001      	movs	r0, #1
    38dc:	4240      	negs	r0, r0
    38de:	e01d      	b.n	391c <__swbuf_r+0xa0>
    38e0:	0021      	movs	r1, r4
    38e2:	0028      	movs	r0, r5
    38e4:	f000 f91e 	bl	3b24 <_fflush_r>
    38e8:	2800      	cmp	r0, #0
    38ea:	d1f6      	bne.n	38da <__swbuf_r+0x5e>
    38ec:	68a3      	ldr	r3, [r4, #8]
    38ee:	3001      	adds	r0, #1
    38f0:	3b01      	subs	r3, #1
    38f2:	60a3      	str	r3, [r4, #8]
    38f4:	6823      	ldr	r3, [r4, #0]
    38f6:	1c5a      	adds	r2, r3, #1
    38f8:	6022      	str	r2, [r4, #0]
    38fa:	701f      	strb	r7, [r3, #0]
    38fc:	6963      	ldr	r3, [r4, #20]
    38fe:	4298      	cmp	r0, r3
    3900:	d005      	beq.n	390e <__swbuf_r+0x92>
    3902:	89a3      	ldrh	r3, [r4, #12]
    3904:	0030      	movs	r0, r6
    3906:	07db      	lsls	r3, r3, #31
    3908:	d508      	bpl.n	391c <__swbuf_r+0xa0>
    390a:	2e0a      	cmp	r6, #10
    390c:	d106      	bne.n	391c <__swbuf_r+0xa0>
    390e:	0021      	movs	r1, r4
    3910:	0028      	movs	r0, r5
    3912:	f000 f907 	bl	3b24 <_fflush_r>
    3916:	2800      	cmp	r0, #0
    3918:	d1df      	bne.n	38da <__swbuf_r+0x5e>
    391a:	0030      	movs	r0, r6
    391c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    391e:	46c0      	nop			; (mov r8, r8)
    3920:	00004158 	.word	0x00004158
    3924:	00004178 	.word	0x00004178
    3928:	00004198 	.word	0x00004198

0000392c <__swsetup_r>:
    392c:	4b36      	ldr	r3, [pc, #216]	; (3a08 <__swsetup_r+0xdc>)
    392e:	b570      	push	{r4, r5, r6, lr}
    3930:	681d      	ldr	r5, [r3, #0]
    3932:	0006      	movs	r6, r0
    3934:	000c      	movs	r4, r1
    3936:	2d00      	cmp	r5, #0
    3938:	d005      	beq.n	3946 <__swsetup_r+0x1a>
    393a:	69ab      	ldr	r3, [r5, #24]
    393c:	2b00      	cmp	r3, #0
    393e:	d102      	bne.n	3946 <__swsetup_r+0x1a>
    3940:	0028      	movs	r0, r5
    3942:	f000 f95d 	bl	3c00 <__sinit>
    3946:	4b31      	ldr	r3, [pc, #196]	; (3a0c <__swsetup_r+0xe0>)
    3948:	429c      	cmp	r4, r3
    394a:	d101      	bne.n	3950 <__swsetup_r+0x24>
    394c:	686c      	ldr	r4, [r5, #4]
    394e:	e008      	b.n	3962 <__swsetup_r+0x36>
    3950:	4b2f      	ldr	r3, [pc, #188]	; (3a10 <__swsetup_r+0xe4>)
    3952:	429c      	cmp	r4, r3
    3954:	d101      	bne.n	395a <__swsetup_r+0x2e>
    3956:	68ac      	ldr	r4, [r5, #8]
    3958:	e003      	b.n	3962 <__swsetup_r+0x36>
    395a:	4b2e      	ldr	r3, [pc, #184]	; (3a14 <__swsetup_r+0xe8>)
    395c:	429c      	cmp	r4, r3
    395e:	d100      	bne.n	3962 <__swsetup_r+0x36>
    3960:	68ec      	ldr	r4, [r5, #12]
    3962:	220c      	movs	r2, #12
    3964:	5ea3      	ldrsh	r3, [r4, r2]
    3966:	b29a      	uxth	r2, r3
    3968:	0711      	lsls	r1, r2, #28
    396a:	d423      	bmi.n	39b4 <__swsetup_r+0x88>
    396c:	06d1      	lsls	r1, r2, #27
    396e:	d407      	bmi.n	3980 <__swsetup_r+0x54>
    3970:	2209      	movs	r2, #9
    3972:	2001      	movs	r0, #1
    3974:	6032      	str	r2, [r6, #0]
    3976:	3237      	adds	r2, #55	; 0x37
    3978:	4313      	orrs	r3, r2
    397a:	81a3      	strh	r3, [r4, #12]
    397c:	4240      	negs	r0, r0
    397e:	e042      	b.n	3a06 <__swsetup_r+0xda>
    3980:	0753      	lsls	r3, r2, #29
    3982:	d513      	bpl.n	39ac <__swsetup_r+0x80>
    3984:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3986:	2900      	cmp	r1, #0
    3988:	d008      	beq.n	399c <__swsetup_r+0x70>
    398a:	0023      	movs	r3, r4
    398c:	3344      	adds	r3, #68	; 0x44
    398e:	4299      	cmp	r1, r3
    3990:	d002      	beq.n	3998 <__swsetup_r+0x6c>
    3992:	0030      	movs	r0, r6
    3994:	f000 fa36 	bl	3e04 <_free_r>
    3998:	2300      	movs	r3, #0
    399a:	6363      	str	r3, [r4, #52]	; 0x34
    399c:	2224      	movs	r2, #36	; 0x24
    399e:	89a3      	ldrh	r3, [r4, #12]
    39a0:	4393      	bics	r3, r2
    39a2:	81a3      	strh	r3, [r4, #12]
    39a4:	2300      	movs	r3, #0
    39a6:	6063      	str	r3, [r4, #4]
    39a8:	6923      	ldr	r3, [r4, #16]
    39aa:	6023      	str	r3, [r4, #0]
    39ac:	2208      	movs	r2, #8
    39ae:	89a3      	ldrh	r3, [r4, #12]
    39b0:	4313      	orrs	r3, r2
    39b2:	81a3      	strh	r3, [r4, #12]
    39b4:	6923      	ldr	r3, [r4, #16]
    39b6:	2b00      	cmp	r3, #0
    39b8:	d10b      	bne.n	39d2 <__swsetup_r+0xa6>
    39ba:	23a0      	movs	r3, #160	; 0xa0
    39bc:	89a2      	ldrh	r2, [r4, #12]
    39be:	009b      	lsls	r3, r3, #2
    39c0:	4013      	ands	r3, r2
    39c2:	2280      	movs	r2, #128	; 0x80
    39c4:	0092      	lsls	r2, r2, #2
    39c6:	4293      	cmp	r3, r2
    39c8:	d003      	beq.n	39d2 <__swsetup_r+0xa6>
    39ca:	0021      	movs	r1, r4
    39cc:	0030      	movs	r0, r6
    39ce:	f000 f9d1 	bl	3d74 <__smakebuf_r>
    39d2:	2301      	movs	r3, #1
    39d4:	89a2      	ldrh	r2, [r4, #12]
    39d6:	4013      	ands	r3, r2
    39d8:	d005      	beq.n	39e6 <__swsetup_r+0xba>
    39da:	2300      	movs	r3, #0
    39dc:	60a3      	str	r3, [r4, #8]
    39de:	6963      	ldr	r3, [r4, #20]
    39e0:	425b      	negs	r3, r3
    39e2:	61a3      	str	r3, [r4, #24]
    39e4:	e003      	b.n	39ee <__swsetup_r+0xc2>
    39e6:	0792      	lsls	r2, r2, #30
    39e8:	d400      	bmi.n	39ec <__swsetup_r+0xc0>
    39ea:	6963      	ldr	r3, [r4, #20]
    39ec:	60a3      	str	r3, [r4, #8]
    39ee:	2000      	movs	r0, #0
    39f0:	6923      	ldr	r3, [r4, #16]
    39f2:	4283      	cmp	r3, r0
    39f4:	d107      	bne.n	3a06 <__swsetup_r+0xda>
    39f6:	220c      	movs	r2, #12
    39f8:	5ea3      	ldrsh	r3, [r4, r2]
    39fa:	061a      	lsls	r2, r3, #24
    39fc:	d503      	bpl.n	3a06 <__swsetup_r+0xda>
    39fe:	2240      	movs	r2, #64	; 0x40
    3a00:	4313      	orrs	r3, r2
    3a02:	81a3      	strh	r3, [r4, #12]
    3a04:	3801      	subs	r0, #1
    3a06:	bd70      	pop	{r4, r5, r6, pc}
    3a08:	20000064 	.word	0x20000064
    3a0c:	00004158 	.word	0x00004158
    3a10:	00004178 	.word	0x00004178
    3a14:	00004198 	.word	0x00004198

00003a18 <__sflush_r>:
    3a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a1a:	898a      	ldrh	r2, [r1, #12]
    3a1c:	0005      	movs	r5, r0
    3a1e:	000c      	movs	r4, r1
    3a20:	0713      	lsls	r3, r2, #28
    3a22:	d45a      	bmi.n	3ada <__sflush_r+0xc2>
    3a24:	684b      	ldr	r3, [r1, #4]
    3a26:	2b00      	cmp	r3, #0
    3a28:	dc02      	bgt.n	3a30 <__sflush_r+0x18>
    3a2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3a2c:	2b00      	cmp	r3, #0
    3a2e:	dd19      	ble.n	3a64 <__sflush_r+0x4c>
    3a30:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3a32:	2f00      	cmp	r7, #0
    3a34:	d016      	beq.n	3a64 <__sflush_r+0x4c>
    3a36:	2300      	movs	r3, #0
    3a38:	682e      	ldr	r6, [r5, #0]
    3a3a:	602b      	str	r3, [r5, #0]
    3a3c:	2380      	movs	r3, #128	; 0x80
    3a3e:	015b      	lsls	r3, r3, #5
    3a40:	401a      	ands	r2, r3
    3a42:	d001      	beq.n	3a48 <__sflush_r+0x30>
    3a44:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3a46:	e014      	b.n	3a72 <__sflush_r+0x5a>
    3a48:	2301      	movs	r3, #1
    3a4a:	6a21      	ldr	r1, [r4, #32]
    3a4c:	0028      	movs	r0, r5
    3a4e:	47b8      	blx	r7
    3a50:	1c43      	adds	r3, r0, #1
    3a52:	d10e      	bne.n	3a72 <__sflush_r+0x5a>
    3a54:	682b      	ldr	r3, [r5, #0]
    3a56:	2b00      	cmp	r3, #0
    3a58:	d00b      	beq.n	3a72 <__sflush_r+0x5a>
    3a5a:	2b1d      	cmp	r3, #29
    3a5c:	d001      	beq.n	3a62 <__sflush_r+0x4a>
    3a5e:	2b16      	cmp	r3, #22
    3a60:	d102      	bne.n	3a68 <__sflush_r+0x50>
    3a62:	602e      	str	r6, [r5, #0]
    3a64:	2000      	movs	r0, #0
    3a66:	e05a      	b.n	3b1e <__sflush_r+0x106>
    3a68:	2240      	movs	r2, #64	; 0x40
    3a6a:	89a3      	ldrh	r3, [r4, #12]
    3a6c:	4313      	orrs	r3, r2
    3a6e:	81a3      	strh	r3, [r4, #12]
    3a70:	e055      	b.n	3b1e <__sflush_r+0x106>
    3a72:	89a3      	ldrh	r3, [r4, #12]
    3a74:	075b      	lsls	r3, r3, #29
    3a76:	d506      	bpl.n	3a86 <__sflush_r+0x6e>
    3a78:	6863      	ldr	r3, [r4, #4]
    3a7a:	1ac0      	subs	r0, r0, r3
    3a7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d001      	beq.n	3a86 <__sflush_r+0x6e>
    3a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3a84:	1ac0      	subs	r0, r0, r3
    3a86:	2300      	movs	r3, #0
    3a88:	0002      	movs	r2, r0
    3a8a:	6a21      	ldr	r1, [r4, #32]
    3a8c:	0028      	movs	r0, r5
    3a8e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3a90:	47b8      	blx	r7
    3a92:	89a3      	ldrh	r3, [r4, #12]
    3a94:	1c42      	adds	r2, r0, #1
    3a96:	d106      	bne.n	3aa6 <__sflush_r+0x8e>
    3a98:	6829      	ldr	r1, [r5, #0]
    3a9a:	291d      	cmp	r1, #29
    3a9c:	d83a      	bhi.n	3b14 <__sflush_r+0xfc>
    3a9e:	4a20      	ldr	r2, [pc, #128]	; (3b20 <__sflush_r+0x108>)
    3aa0:	40ca      	lsrs	r2, r1
    3aa2:	07d2      	lsls	r2, r2, #31
    3aa4:	d536      	bpl.n	3b14 <__sflush_r+0xfc>
    3aa6:	2200      	movs	r2, #0
    3aa8:	6062      	str	r2, [r4, #4]
    3aaa:	6922      	ldr	r2, [r4, #16]
    3aac:	6022      	str	r2, [r4, #0]
    3aae:	04db      	lsls	r3, r3, #19
    3ab0:	d505      	bpl.n	3abe <__sflush_r+0xa6>
    3ab2:	1c43      	adds	r3, r0, #1
    3ab4:	d102      	bne.n	3abc <__sflush_r+0xa4>
    3ab6:	682b      	ldr	r3, [r5, #0]
    3ab8:	2b00      	cmp	r3, #0
    3aba:	d100      	bne.n	3abe <__sflush_r+0xa6>
    3abc:	6560      	str	r0, [r4, #84]	; 0x54
    3abe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3ac0:	602e      	str	r6, [r5, #0]
    3ac2:	2900      	cmp	r1, #0
    3ac4:	d0ce      	beq.n	3a64 <__sflush_r+0x4c>
    3ac6:	0023      	movs	r3, r4
    3ac8:	3344      	adds	r3, #68	; 0x44
    3aca:	4299      	cmp	r1, r3
    3acc:	d002      	beq.n	3ad4 <__sflush_r+0xbc>
    3ace:	0028      	movs	r0, r5
    3ad0:	f000 f998 	bl	3e04 <_free_r>
    3ad4:	2000      	movs	r0, #0
    3ad6:	6360      	str	r0, [r4, #52]	; 0x34
    3ad8:	e021      	b.n	3b1e <__sflush_r+0x106>
    3ada:	690f      	ldr	r7, [r1, #16]
    3adc:	2f00      	cmp	r7, #0
    3ade:	d0c1      	beq.n	3a64 <__sflush_r+0x4c>
    3ae0:	680b      	ldr	r3, [r1, #0]
    3ae2:	600f      	str	r7, [r1, #0]
    3ae4:	1bdb      	subs	r3, r3, r7
    3ae6:	9301      	str	r3, [sp, #4]
    3ae8:	2300      	movs	r3, #0
    3aea:	0792      	lsls	r2, r2, #30
    3aec:	d100      	bne.n	3af0 <__sflush_r+0xd8>
    3aee:	694b      	ldr	r3, [r1, #20]
    3af0:	60a3      	str	r3, [r4, #8]
    3af2:	e003      	b.n	3afc <__sflush_r+0xe4>
    3af4:	9b01      	ldr	r3, [sp, #4]
    3af6:	183f      	adds	r7, r7, r0
    3af8:	1a1b      	subs	r3, r3, r0
    3afa:	9301      	str	r3, [sp, #4]
    3afc:	9b01      	ldr	r3, [sp, #4]
    3afe:	2b00      	cmp	r3, #0
    3b00:	ddb0      	ble.n	3a64 <__sflush_r+0x4c>
    3b02:	9b01      	ldr	r3, [sp, #4]
    3b04:	003a      	movs	r2, r7
    3b06:	6a21      	ldr	r1, [r4, #32]
    3b08:	0028      	movs	r0, r5
    3b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3b0c:	47b0      	blx	r6
    3b0e:	2800      	cmp	r0, #0
    3b10:	dcf0      	bgt.n	3af4 <__sflush_r+0xdc>
    3b12:	89a3      	ldrh	r3, [r4, #12]
    3b14:	2240      	movs	r2, #64	; 0x40
    3b16:	2001      	movs	r0, #1
    3b18:	4313      	orrs	r3, r2
    3b1a:	81a3      	strh	r3, [r4, #12]
    3b1c:	4240      	negs	r0, r0
    3b1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b20:	20400001 	.word	0x20400001

00003b24 <_fflush_r>:
    3b24:	690b      	ldr	r3, [r1, #16]
    3b26:	b570      	push	{r4, r5, r6, lr}
    3b28:	0005      	movs	r5, r0
    3b2a:	000c      	movs	r4, r1
    3b2c:	2b00      	cmp	r3, #0
    3b2e:	d101      	bne.n	3b34 <_fflush_r+0x10>
    3b30:	2000      	movs	r0, #0
    3b32:	e01c      	b.n	3b6e <_fflush_r+0x4a>
    3b34:	2800      	cmp	r0, #0
    3b36:	d004      	beq.n	3b42 <_fflush_r+0x1e>
    3b38:	6983      	ldr	r3, [r0, #24]
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	d101      	bne.n	3b42 <_fflush_r+0x1e>
    3b3e:	f000 f85f 	bl	3c00 <__sinit>
    3b42:	4b0b      	ldr	r3, [pc, #44]	; (3b70 <_fflush_r+0x4c>)
    3b44:	429c      	cmp	r4, r3
    3b46:	d101      	bne.n	3b4c <_fflush_r+0x28>
    3b48:	686c      	ldr	r4, [r5, #4]
    3b4a:	e008      	b.n	3b5e <_fflush_r+0x3a>
    3b4c:	4b09      	ldr	r3, [pc, #36]	; (3b74 <_fflush_r+0x50>)
    3b4e:	429c      	cmp	r4, r3
    3b50:	d101      	bne.n	3b56 <_fflush_r+0x32>
    3b52:	68ac      	ldr	r4, [r5, #8]
    3b54:	e003      	b.n	3b5e <_fflush_r+0x3a>
    3b56:	4b08      	ldr	r3, [pc, #32]	; (3b78 <_fflush_r+0x54>)
    3b58:	429c      	cmp	r4, r3
    3b5a:	d100      	bne.n	3b5e <_fflush_r+0x3a>
    3b5c:	68ec      	ldr	r4, [r5, #12]
    3b5e:	220c      	movs	r2, #12
    3b60:	5ea3      	ldrsh	r3, [r4, r2]
    3b62:	2b00      	cmp	r3, #0
    3b64:	d0e4      	beq.n	3b30 <_fflush_r+0xc>
    3b66:	0021      	movs	r1, r4
    3b68:	0028      	movs	r0, r5
    3b6a:	f7ff ff55 	bl	3a18 <__sflush_r>
    3b6e:	bd70      	pop	{r4, r5, r6, pc}
    3b70:	00004158 	.word	0x00004158
    3b74:	00004178 	.word	0x00004178
    3b78:	00004198 	.word	0x00004198

00003b7c <_cleanup_r>:
    3b7c:	b510      	push	{r4, lr}
    3b7e:	4902      	ldr	r1, [pc, #8]	; (3b88 <_cleanup_r+0xc>)
    3b80:	f000 f8b0 	bl	3ce4 <_fwalk_reent>
    3b84:	bd10      	pop	{r4, pc}
    3b86:	46c0      	nop			; (mov r8, r8)
    3b88:	00003b25 	.word	0x00003b25

00003b8c <std.isra.0>:
    3b8c:	2300      	movs	r3, #0
    3b8e:	b510      	push	{r4, lr}
    3b90:	0004      	movs	r4, r0
    3b92:	6003      	str	r3, [r0, #0]
    3b94:	6043      	str	r3, [r0, #4]
    3b96:	6083      	str	r3, [r0, #8]
    3b98:	8181      	strh	r1, [r0, #12]
    3b9a:	6643      	str	r3, [r0, #100]	; 0x64
    3b9c:	81c2      	strh	r2, [r0, #14]
    3b9e:	6103      	str	r3, [r0, #16]
    3ba0:	6143      	str	r3, [r0, #20]
    3ba2:	6183      	str	r3, [r0, #24]
    3ba4:	0019      	movs	r1, r3
    3ba6:	2208      	movs	r2, #8
    3ba8:	305c      	adds	r0, #92	; 0x5c
    3baa:	f7ff fd38 	bl	361e <memset>
    3bae:	4b05      	ldr	r3, [pc, #20]	; (3bc4 <std.isra.0+0x38>)
    3bb0:	6224      	str	r4, [r4, #32]
    3bb2:	6263      	str	r3, [r4, #36]	; 0x24
    3bb4:	4b04      	ldr	r3, [pc, #16]	; (3bc8 <std.isra.0+0x3c>)
    3bb6:	62a3      	str	r3, [r4, #40]	; 0x28
    3bb8:	4b04      	ldr	r3, [pc, #16]	; (3bcc <std.isra.0+0x40>)
    3bba:	62e3      	str	r3, [r4, #44]	; 0x2c
    3bbc:	4b04      	ldr	r3, [pc, #16]	; (3bd0 <std.isra.0+0x44>)
    3bbe:	6323      	str	r3, [r4, #48]	; 0x30
    3bc0:	bd10      	pop	{r4, pc}
    3bc2:	46c0      	nop			; (mov r8, r8)
    3bc4:	00003f61 	.word	0x00003f61
    3bc8:	00003f89 	.word	0x00003f89
    3bcc:	00003fc1 	.word	0x00003fc1
    3bd0:	00003fed 	.word	0x00003fed

00003bd4 <__sfmoreglue>:
    3bd4:	b570      	push	{r4, r5, r6, lr}
    3bd6:	2568      	movs	r5, #104	; 0x68
    3bd8:	1e4b      	subs	r3, r1, #1
    3bda:	435d      	muls	r5, r3
    3bdc:	000e      	movs	r6, r1
    3bde:	0029      	movs	r1, r5
    3be0:	3174      	adds	r1, #116	; 0x74
    3be2:	f000 f955 	bl	3e90 <_malloc_r>
    3be6:	1e04      	subs	r4, r0, #0
    3be8:	d008      	beq.n	3bfc <__sfmoreglue+0x28>
    3bea:	2100      	movs	r1, #0
    3bec:	002a      	movs	r2, r5
    3bee:	6001      	str	r1, [r0, #0]
    3bf0:	6046      	str	r6, [r0, #4]
    3bf2:	300c      	adds	r0, #12
    3bf4:	60a0      	str	r0, [r4, #8]
    3bf6:	3268      	adds	r2, #104	; 0x68
    3bf8:	f7ff fd11 	bl	361e <memset>
    3bfc:	0020      	movs	r0, r4
    3bfe:	bd70      	pop	{r4, r5, r6, pc}

00003c00 <__sinit>:
    3c00:	6983      	ldr	r3, [r0, #24]
    3c02:	b513      	push	{r0, r1, r4, lr}
    3c04:	0004      	movs	r4, r0
    3c06:	2b00      	cmp	r3, #0
    3c08:	d128      	bne.n	3c5c <__sinit+0x5c>
    3c0a:	6483      	str	r3, [r0, #72]	; 0x48
    3c0c:	64c3      	str	r3, [r0, #76]	; 0x4c
    3c0e:	6503      	str	r3, [r0, #80]	; 0x50
    3c10:	4b13      	ldr	r3, [pc, #76]	; (3c60 <__sinit+0x60>)
    3c12:	4a14      	ldr	r2, [pc, #80]	; (3c64 <__sinit+0x64>)
    3c14:	681b      	ldr	r3, [r3, #0]
    3c16:	6282      	str	r2, [r0, #40]	; 0x28
    3c18:	9301      	str	r3, [sp, #4]
    3c1a:	4298      	cmp	r0, r3
    3c1c:	d101      	bne.n	3c22 <__sinit+0x22>
    3c1e:	2301      	movs	r3, #1
    3c20:	6183      	str	r3, [r0, #24]
    3c22:	0020      	movs	r0, r4
    3c24:	f000 f820 	bl	3c68 <__sfp>
    3c28:	6060      	str	r0, [r4, #4]
    3c2a:	0020      	movs	r0, r4
    3c2c:	f000 f81c 	bl	3c68 <__sfp>
    3c30:	60a0      	str	r0, [r4, #8]
    3c32:	0020      	movs	r0, r4
    3c34:	f000 f818 	bl	3c68 <__sfp>
    3c38:	2200      	movs	r2, #0
    3c3a:	60e0      	str	r0, [r4, #12]
    3c3c:	2104      	movs	r1, #4
    3c3e:	6860      	ldr	r0, [r4, #4]
    3c40:	f7ff ffa4 	bl	3b8c <std.isra.0>
    3c44:	2201      	movs	r2, #1
    3c46:	2109      	movs	r1, #9
    3c48:	68a0      	ldr	r0, [r4, #8]
    3c4a:	f7ff ff9f 	bl	3b8c <std.isra.0>
    3c4e:	2202      	movs	r2, #2
    3c50:	2112      	movs	r1, #18
    3c52:	68e0      	ldr	r0, [r4, #12]
    3c54:	f7ff ff9a 	bl	3b8c <std.isra.0>
    3c58:	2301      	movs	r3, #1
    3c5a:	61a3      	str	r3, [r4, #24]
    3c5c:	bd13      	pop	{r0, r1, r4, pc}
    3c5e:	46c0      	nop			; (mov r8, r8)
    3c60:	00004154 	.word	0x00004154
    3c64:	00003b7d 	.word	0x00003b7d

00003c68 <__sfp>:
    3c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c6a:	4b1d      	ldr	r3, [pc, #116]	; (3ce0 <__sfp+0x78>)
    3c6c:	0006      	movs	r6, r0
    3c6e:	681d      	ldr	r5, [r3, #0]
    3c70:	69ab      	ldr	r3, [r5, #24]
    3c72:	2b00      	cmp	r3, #0
    3c74:	d102      	bne.n	3c7c <__sfp+0x14>
    3c76:	0028      	movs	r0, r5
    3c78:	f7ff ffc2 	bl	3c00 <__sinit>
    3c7c:	3548      	adds	r5, #72	; 0x48
    3c7e:	68ac      	ldr	r4, [r5, #8]
    3c80:	686b      	ldr	r3, [r5, #4]
    3c82:	3b01      	subs	r3, #1
    3c84:	d405      	bmi.n	3c92 <__sfp+0x2a>
    3c86:	220c      	movs	r2, #12
    3c88:	5ea7      	ldrsh	r7, [r4, r2]
    3c8a:	2f00      	cmp	r7, #0
    3c8c:	d010      	beq.n	3cb0 <__sfp+0x48>
    3c8e:	3468      	adds	r4, #104	; 0x68
    3c90:	e7f7      	b.n	3c82 <__sfp+0x1a>
    3c92:	682b      	ldr	r3, [r5, #0]
    3c94:	2b00      	cmp	r3, #0
    3c96:	d001      	beq.n	3c9c <__sfp+0x34>
    3c98:	682d      	ldr	r5, [r5, #0]
    3c9a:	e7f0      	b.n	3c7e <__sfp+0x16>
    3c9c:	2104      	movs	r1, #4
    3c9e:	0030      	movs	r0, r6
    3ca0:	f7ff ff98 	bl	3bd4 <__sfmoreglue>
    3ca4:	6028      	str	r0, [r5, #0]
    3ca6:	2800      	cmp	r0, #0
    3ca8:	d1f6      	bne.n	3c98 <__sfp+0x30>
    3caa:	230c      	movs	r3, #12
    3cac:	6033      	str	r3, [r6, #0]
    3cae:	e016      	b.n	3cde <__sfp+0x76>
    3cb0:	2301      	movs	r3, #1
    3cb2:	0020      	movs	r0, r4
    3cb4:	425b      	negs	r3, r3
    3cb6:	81e3      	strh	r3, [r4, #14]
    3cb8:	3302      	adds	r3, #2
    3cba:	81a3      	strh	r3, [r4, #12]
    3cbc:	6667      	str	r7, [r4, #100]	; 0x64
    3cbe:	6027      	str	r7, [r4, #0]
    3cc0:	60a7      	str	r7, [r4, #8]
    3cc2:	6067      	str	r7, [r4, #4]
    3cc4:	6127      	str	r7, [r4, #16]
    3cc6:	6167      	str	r7, [r4, #20]
    3cc8:	61a7      	str	r7, [r4, #24]
    3cca:	305c      	adds	r0, #92	; 0x5c
    3ccc:	2208      	movs	r2, #8
    3cce:	0039      	movs	r1, r7
    3cd0:	f7ff fca5 	bl	361e <memset>
    3cd4:	0020      	movs	r0, r4
    3cd6:	6367      	str	r7, [r4, #52]	; 0x34
    3cd8:	63a7      	str	r7, [r4, #56]	; 0x38
    3cda:	64a7      	str	r7, [r4, #72]	; 0x48
    3cdc:	64e7      	str	r7, [r4, #76]	; 0x4c
    3cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ce0:	00004154 	.word	0x00004154

00003ce4 <_fwalk_reent>:
    3ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ce6:	0004      	movs	r4, r0
    3ce8:	0007      	movs	r7, r0
    3cea:	2600      	movs	r6, #0
    3cec:	9101      	str	r1, [sp, #4]
    3cee:	3448      	adds	r4, #72	; 0x48
    3cf0:	2c00      	cmp	r4, #0
    3cf2:	d016      	beq.n	3d22 <_fwalk_reent+0x3e>
    3cf4:	6863      	ldr	r3, [r4, #4]
    3cf6:	68a5      	ldr	r5, [r4, #8]
    3cf8:	9300      	str	r3, [sp, #0]
    3cfa:	9b00      	ldr	r3, [sp, #0]
    3cfc:	3b01      	subs	r3, #1
    3cfe:	9300      	str	r3, [sp, #0]
    3d00:	d40d      	bmi.n	3d1e <_fwalk_reent+0x3a>
    3d02:	89ab      	ldrh	r3, [r5, #12]
    3d04:	2b01      	cmp	r3, #1
    3d06:	d908      	bls.n	3d1a <_fwalk_reent+0x36>
    3d08:	220e      	movs	r2, #14
    3d0a:	5eab      	ldrsh	r3, [r5, r2]
    3d0c:	3301      	adds	r3, #1
    3d0e:	d004      	beq.n	3d1a <_fwalk_reent+0x36>
    3d10:	0029      	movs	r1, r5
    3d12:	0038      	movs	r0, r7
    3d14:	9b01      	ldr	r3, [sp, #4]
    3d16:	4798      	blx	r3
    3d18:	4306      	orrs	r6, r0
    3d1a:	3568      	adds	r5, #104	; 0x68
    3d1c:	e7ed      	b.n	3cfa <_fwalk_reent+0x16>
    3d1e:	6824      	ldr	r4, [r4, #0]
    3d20:	e7e6      	b.n	3cf0 <_fwalk_reent+0xc>
    3d22:	0030      	movs	r0, r6
    3d24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00003d28 <__swhatbuf_r>:
    3d28:	b570      	push	{r4, r5, r6, lr}
    3d2a:	000e      	movs	r6, r1
    3d2c:	001d      	movs	r5, r3
    3d2e:	230e      	movs	r3, #14
    3d30:	5ec9      	ldrsh	r1, [r1, r3]
    3d32:	b090      	sub	sp, #64	; 0x40
    3d34:	0014      	movs	r4, r2
    3d36:	2900      	cmp	r1, #0
    3d38:	da06      	bge.n	3d48 <__swhatbuf_r+0x20>
    3d3a:	2300      	movs	r3, #0
    3d3c:	602b      	str	r3, [r5, #0]
    3d3e:	89b3      	ldrh	r3, [r6, #12]
    3d40:	061b      	lsls	r3, r3, #24
    3d42:	d50f      	bpl.n	3d64 <__swhatbuf_r+0x3c>
    3d44:	2340      	movs	r3, #64	; 0x40
    3d46:	e00f      	b.n	3d68 <__swhatbuf_r+0x40>
    3d48:	aa01      	add	r2, sp, #4
    3d4a:	f000 f97b 	bl	4044 <_fstat_r>
    3d4e:	2800      	cmp	r0, #0
    3d50:	dbf3      	blt.n	3d3a <__swhatbuf_r+0x12>
    3d52:	23f0      	movs	r3, #240	; 0xf0
    3d54:	9a02      	ldr	r2, [sp, #8]
    3d56:	021b      	lsls	r3, r3, #8
    3d58:	4013      	ands	r3, r2
    3d5a:	4a05      	ldr	r2, [pc, #20]	; (3d70 <__swhatbuf_r+0x48>)
    3d5c:	189b      	adds	r3, r3, r2
    3d5e:	425a      	negs	r2, r3
    3d60:	4153      	adcs	r3, r2
    3d62:	602b      	str	r3, [r5, #0]
    3d64:	2380      	movs	r3, #128	; 0x80
    3d66:	00db      	lsls	r3, r3, #3
    3d68:	2000      	movs	r0, #0
    3d6a:	6023      	str	r3, [r4, #0]
    3d6c:	b010      	add	sp, #64	; 0x40
    3d6e:	bd70      	pop	{r4, r5, r6, pc}
    3d70:	ffffe000 	.word	0xffffe000

00003d74 <__smakebuf_r>:
    3d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3d76:	2602      	movs	r6, #2
    3d78:	898b      	ldrh	r3, [r1, #12]
    3d7a:	0005      	movs	r5, r0
    3d7c:	000c      	movs	r4, r1
    3d7e:	4233      	tst	r3, r6
    3d80:	d110      	bne.n	3da4 <__smakebuf_r+0x30>
    3d82:	ab01      	add	r3, sp, #4
    3d84:	466a      	mov	r2, sp
    3d86:	f7ff ffcf 	bl	3d28 <__swhatbuf_r>
    3d8a:	9900      	ldr	r1, [sp, #0]
    3d8c:	0007      	movs	r7, r0
    3d8e:	0028      	movs	r0, r5
    3d90:	f000 f87e 	bl	3e90 <_malloc_r>
    3d94:	2800      	cmp	r0, #0
    3d96:	d10c      	bne.n	3db2 <__smakebuf_r+0x3e>
    3d98:	220c      	movs	r2, #12
    3d9a:	5ea3      	ldrsh	r3, [r4, r2]
    3d9c:	059a      	lsls	r2, r3, #22
    3d9e:	d423      	bmi.n	3de8 <__smakebuf_r+0x74>
    3da0:	4333      	orrs	r3, r6
    3da2:	81a3      	strh	r3, [r4, #12]
    3da4:	0023      	movs	r3, r4
    3da6:	3347      	adds	r3, #71	; 0x47
    3da8:	6023      	str	r3, [r4, #0]
    3daa:	6123      	str	r3, [r4, #16]
    3dac:	2301      	movs	r3, #1
    3dae:	6163      	str	r3, [r4, #20]
    3db0:	e01a      	b.n	3de8 <__smakebuf_r+0x74>
    3db2:	2280      	movs	r2, #128	; 0x80
    3db4:	4b0d      	ldr	r3, [pc, #52]	; (3dec <__smakebuf_r+0x78>)
    3db6:	62ab      	str	r3, [r5, #40]	; 0x28
    3db8:	89a3      	ldrh	r3, [r4, #12]
    3dba:	6020      	str	r0, [r4, #0]
    3dbc:	4313      	orrs	r3, r2
    3dbe:	81a3      	strh	r3, [r4, #12]
    3dc0:	9b00      	ldr	r3, [sp, #0]
    3dc2:	6120      	str	r0, [r4, #16]
    3dc4:	6163      	str	r3, [r4, #20]
    3dc6:	9b01      	ldr	r3, [sp, #4]
    3dc8:	2b00      	cmp	r3, #0
    3dca:	d00a      	beq.n	3de2 <__smakebuf_r+0x6e>
    3dcc:	230e      	movs	r3, #14
    3dce:	5ee1      	ldrsh	r1, [r4, r3]
    3dd0:	0028      	movs	r0, r5
    3dd2:	f000 f949 	bl	4068 <_isatty_r>
    3dd6:	2800      	cmp	r0, #0
    3dd8:	d003      	beq.n	3de2 <__smakebuf_r+0x6e>
    3dda:	2201      	movs	r2, #1
    3ddc:	89a3      	ldrh	r3, [r4, #12]
    3dde:	4313      	orrs	r3, r2
    3de0:	81a3      	strh	r3, [r4, #12]
    3de2:	89a3      	ldrh	r3, [r4, #12]
    3de4:	431f      	orrs	r7, r3
    3de6:	81a7      	strh	r7, [r4, #12]
    3de8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3dea:	46c0      	nop			; (mov r8, r8)
    3dec:	00003b7d 	.word	0x00003b7d

00003df0 <malloc>:
    3df0:	b510      	push	{r4, lr}
    3df2:	4b03      	ldr	r3, [pc, #12]	; (3e00 <malloc+0x10>)
    3df4:	0001      	movs	r1, r0
    3df6:	6818      	ldr	r0, [r3, #0]
    3df8:	f000 f84a 	bl	3e90 <_malloc_r>
    3dfc:	bd10      	pop	{r4, pc}
    3dfe:	46c0      	nop			; (mov r8, r8)
    3e00:	20000064 	.word	0x20000064

00003e04 <_free_r>:
    3e04:	b530      	push	{r4, r5, lr}
    3e06:	2900      	cmp	r1, #0
    3e08:	d03e      	beq.n	3e88 <_free_r+0x84>
    3e0a:	3904      	subs	r1, #4
    3e0c:	680b      	ldr	r3, [r1, #0]
    3e0e:	2b00      	cmp	r3, #0
    3e10:	da00      	bge.n	3e14 <_free_r+0x10>
    3e12:	18c9      	adds	r1, r1, r3
    3e14:	4a1d      	ldr	r2, [pc, #116]	; (3e8c <_free_r+0x88>)
    3e16:	6813      	ldr	r3, [r2, #0]
    3e18:	0014      	movs	r4, r2
    3e1a:	2b00      	cmp	r3, #0
    3e1c:	d102      	bne.n	3e24 <_free_r+0x20>
    3e1e:	604b      	str	r3, [r1, #4]
    3e20:	6011      	str	r1, [r2, #0]
    3e22:	e031      	b.n	3e88 <_free_r+0x84>
    3e24:	428b      	cmp	r3, r1
    3e26:	d90d      	bls.n	3e44 <_free_r+0x40>
    3e28:	680a      	ldr	r2, [r1, #0]
    3e2a:	1888      	adds	r0, r1, r2
    3e2c:	4283      	cmp	r3, r0
    3e2e:	d103      	bne.n	3e38 <_free_r+0x34>
    3e30:	6818      	ldr	r0, [r3, #0]
    3e32:	685b      	ldr	r3, [r3, #4]
    3e34:	1882      	adds	r2, r0, r2
    3e36:	600a      	str	r2, [r1, #0]
    3e38:	604b      	str	r3, [r1, #4]
    3e3a:	6021      	str	r1, [r4, #0]
    3e3c:	e024      	b.n	3e88 <_free_r+0x84>
    3e3e:	428a      	cmp	r2, r1
    3e40:	d803      	bhi.n	3e4a <_free_r+0x46>
    3e42:	0013      	movs	r3, r2
    3e44:	685a      	ldr	r2, [r3, #4]
    3e46:	2a00      	cmp	r2, #0
    3e48:	d1f9      	bne.n	3e3e <_free_r+0x3a>
    3e4a:	681d      	ldr	r5, [r3, #0]
    3e4c:	195c      	adds	r4, r3, r5
    3e4e:	428c      	cmp	r4, r1
    3e50:	d10b      	bne.n	3e6a <_free_r+0x66>
    3e52:	6809      	ldr	r1, [r1, #0]
    3e54:	1869      	adds	r1, r5, r1
    3e56:	1858      	adds	r0, r3, r1
    3e58:	6019      	str	r1, [r3, #0]
    3e5a:	4282      	cmp	r2, r0
    3e5c:	d114      	bne.n	3e88 <_free_r+0x84>
    3e5e:	6810      	ldr	r0, [r2, #0]
    3e60:	6852      	ldr	r2, [r2, #4]
    3e62:	1841      	adds	r1, r0, r1
    3e64:	6019      	str	r1, [r3, #0]
    3e66:	605a      	str	r2, [r3, #4]
    3e68:	e00e      	b.n	3e88 <_free_r+0x84>
    3e6a:	428c      	cmp	r4, r1
    3e6c:	d902      	bls.n	3e74 <_free_r+0x70>
    3e6e:	230c      	movs	r3, #12
    3e70:	6003      	str	r3, [r0, #0]
    3e72:	e009      	b.n	3e88 <_free_r+0x84>
    3e74:	6808      	ldr	r0, [r1, #0]
    3e76:	180c      	adds	r4, r1, r0
    3e78:	42a2      	cmp	r2, r4
    3e7a:	d103      	bne.n	3e84 <_free_r+0x80>
    3e7c:	6814      	ldr	r4, [r2, #0]
    3e7e:	6852      	ldr	r2, [r2, #4]
    3e80:	1820      	adds	r0, r4, r0
    3e82:	6008      	str	r0, [r1, #0]
    3e84:	604a      	str	r2, [r1, #4]
    3e86:	6059      	str	r1, [r3, #4]
    3e88:	bd30      	pop	{r4, r5, pc}
    3e8a:	46c0      	nop			; (mov r8, r8)
    3e8c:	200000fc 	.word	0x200000fc

00003e90 <_malloc_r>:
    3e90:	2303      	movs	r3, #3
    3e92:	b570      	push	{r4, r5, r6, lr}
    3e94:	1ccd      	adds	r5, r1, #3
    3e96:	439d      	bics	r5, r3
    3e98:	3508      	adds	r5, #8
    3e9a:	0006      	movs	r6, r0
    3e9c:	2d0c      	cmp	r5, #12
    3e9e:	d201      	bcs.n	3ea4 <_malloc_r+0x14>
    3ea0:	250c      	movs	r5, #12
    3ea2:	e005      	b.n	3eb0 <_malloc_r+0x20>
    3ea4:	2d00      	cmp	r5, #0
    3ea6:	da03      	bge.n	3eb0 <_malloc_r+0x20>
    3ea8:	230c      	movs	r3, #12
    3eaa:	2000      	movs	r0, #0
    3eac:	6033      	str	r3, [r6, #0]
    3eae:	e040      	b.n	3f32 <_malloc_r+0xa2>
    3eb0:	42a9      	cmp	r1, r5
    3eb2:	d8f9      	bhi.n	3ea8 <_malloc_r+0x18>
    3eb4:	4b1f      	ldr	r3, [pc, #124]	; (3f34 <_malloc_r+0xa4>)
    3eb6:	681c      	ldr	r4, [r3, #0]
    3eb8:	001a      	movs	r2, r3
    3eba:	0021      	movs	r1, r4
    3ebc:	2900      	cmp	r1, #0
    3ebe:	d013      	beq.n	3ee8 <_malloc_r+0x58>
    3ec0:	680b      	ldr	r3, [r1, #0]
    3ec2:	1b5b      	subs	r3, r3, r5
    3ec4:	d40d      	bmi.n	3ee2 <_malloc_r+0x52>
    3ec6:	2b0b      	cmp	r3, #11
    3ec8:	d902      	bls.n	3ed0 <_malloc_r+0x40>
    3eca:	600b      	str	r3, [r1, #0]
    3ecc:	18cc      	adds	r4, r1, r3
    3ece:	e01e      	b.n	3f0e <_malloc_r+0x7e>
    3ed0:	428c      	cmp	r4, r1
    3ed2:	d102      	bne.n	3eda <_malloc_r+0x4a>
    3ed4:	6863      	ldr	r3, [r4, #4]
    3ed6:	6013      	str	r3, [r2, #0]
    3ed8:	e01a      	b.n	3f10 <_malloc_r+0x80>
    3eda:	684b      	ldr	r3, [r1, #4]
    3edc:	6063      	str	r3, [r4, #4]
    3ede:	000c      	movs	r4, r1
    3ee0:	e016      	b.n	3f10 <_malloc_r+0x80>
    3ee2:	000c      	movs	r4, r1
    3ee4:	6849      	ldr	r1, [r1, #4]
    3ee6:	e7e9      	b.n	3ebc <_malloc_r+0x2c>
    3ee8:	4c13      	ldr	r4, [pc, #76]	; (3f38 <_malloc_r+0xa8>)
    3eea:	6823      	ldr	r3, [r4, #0]
    3eec:	2b00      	cmp	r3, #0
    3eee:	d103      	bne.n	3ef8 <_malloc_r+0x68>
    3ef0:	0030      	movs	r0, r6
    3ef2:	f000 f823 	bl	3f3c <_sbrk_r>
    3ef6:	6020      	str	r0, [r4, #0]
    3ef8:	0029      	movs	r1, r5
    3efa:	0030      	movs	r0, r6
    3efc:	f000 f81e 	bl	3f3c <_sbrk_r>
    3f00:	1c43      	adds	r3, r0, #1
    3f02:	d0d1      	beq.n	3ea8 <_malloc_r+0x18>
    3f04:	2303      	movs	r3, #3
    3f06:	1cc4      	adds	r4, r0, #3
    3f08:	439c      	bics	r4, r3
    3f0a:	42a0      	cmp	r0, r4
    3f0c:	d10a      	bne.n	3f24 <_malloc_r+0x94>
    3f0e:	6025      	str	r5, [r4, #0]
    3f10:	0020      	movs	r0, r4
    3f12:	2207      	movs	r2, #7
    3f14:	300b      	adds	r0, #11
    3f16:	1d23      	adds	r3, r4, #4
    3f18:	4390      	bics	r0, r2
    3f1a:	1ac3      	subs	r3, r0, r3
    3f1c:	d009      	beq.n	3f32 <_malloc_r+0xa2>
    3f1e:	425a      	negs	r2, r3
    3f20:	50e2      	str	r2, [r4, r3]
    3f22:	e006      	b.n	3f32 <_malloc_r+0xa2>
    3f24:	1a21      	subs	r1, r4, r0
    3f26:	0030      	movs	r0, r6
    3f28:	f000 f808 	bl	3f3c <_sbrk_r>
    3f2c:	1c43      	adds	r3, r0, #1
    3f2e:	d1ee      	bne.n	3f0e <_malloc_r+0x7e>
    3f30:	e7ba      	b.n	3ea8 <_malloc_r+0x18>
    3f32:	bd70      	pop	{r4, r5, r6, pc}
    3f34:	200000fc 	.word	0x200000fc
    3f38:	200000f8 	.word	0x200000f8

00003f3c <_sbrk_r>:
    3f3c:	2300      	movs	r3, #0
    3f3e:	b570      	push	{r4, r5, r6, lr}
    3f40:	4c06      	ldr	r4, [pc, #24]	; (3f5c <_sbrk_r+0x20>)
    3f42:	0005      	movs	r5, r0
    3f44:	0008      	movs	r0, r1
    3f46:	6023      	str	r3, [r4, #0]
    3f48:	f7ff f9a2 	bl	3290 <_sbrk>
    3f4c:	1c43      	adds	r3, r0, #1
    3f4e:	d103      	bne.n	3f58 <_sbrk_r+0x1c>
    3f50:	6823      	ldr	r3, [r4, #0]
    3f52:	2b00      	cmp	r3, #0
    3f54:	d000      	beq.n	3f58 <_sbrk_r+0x1c>
    3f56:	602b      	str	r3, [r5, #0]
    3f58:	bd70      	pop	{r4, r5, r6, pc}
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	20000124 	.word	0x20000124

00003f60 <__sread>:
    3f60:	b570      	push	{r4, r5, r6, lr}
    3f62:	000c      	movs	r4, r1
    3f64:	250e      	movs	r5, #14
    3f66:	5f49      	ldrsh	r1, [r1, r5]
    3f68:	f000 f8a4 	bl	40b4 <_read_r>
    3f6c:	2800      	cmp	r0, #0
    3f6e:	db03      	blt.n	3f78 <__sread+0x18>
    3f70:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3f72:	181b      	adds	r3, r3, r0
    3f74:	6563      	str	r3, [r4, #84]	; 0x54
    3f76:	e003      	b.n	3f80 <__sread+0x20>
    3f78:	89a2      	ldrh	r2, [r4, #12]
    3f7a:	4b02      	ldr	r3, [pc, #8]	; (3f84 <__sread+0x24>)
    3f7c:	4013      	ands	r3, r2
    3f7e:	81a3      	strh	r3, [r4, #12]
    3f80:	bd70      	pop	{r4, r5, r6, pc}
    3f82:	46c0      	nop			; (mov r8, r8)
    3f84:	ffffefff 	.word	0xffffefff

00003f88 <__swrite>:
    3f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f8a:	001f      	movs	r7, r3
    3f8c:	898b      	ldrh	r3, [r1, #12]
    3f8e:	0005      	movs	r5, r0
    3f90:	000c      	movs	r4, r1
    3f92:	0016      	movs	r6, r2
    3f94:	05db      	lsls	r3, r3, #23
    3f96:	d505      	bpl.n	3fa4 <__swrite+0x1c>
    3f98:	230e      	movs	r3, #14
    3f9a:	5ec9      	ldrsh	r1, [r1, r3]
    3f9c:	2200      	movs	r2, #0
    3f9e:	2302      	movs	r3, #2
    3fa0:	f000 f874 	bl	408c <_lseek_r>
    3fa4:	89a2      	ldrh	r2, [r4, #12]
    3fa6:	4b05      	ldr	r3, [pc, #20]	; (3fbc <__swrite+0x34>)
    3fa8:	0028      	movs	r0, r5
    3faa:	4013      	ands	r3, r2
    3fac:	81a3      	strh	r3, [r4, #12]
    3fae:	0032      	movs	r2, r6
    3fb0:	230e      	movs	r3, #14
    3fb2:	5ee1      	ldrsh	r1, [r4, r3]
    3fb4:	003b      	movs	r3, r7
    3fb6:	f000 f81f 	bl	3ff8 <_write_r>
    3fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fbc:	ffffefff 	.word	0xffffefff

00003fc0 <__sseek>:
    3fc0:	b570      	push	{r4, r5, r6, lr}
    3fc2:	000c      	movs	r4, r1
    3fc4:	250e      	movs	r5, #14
    3fc6:	5f49      	ldrsh	r1, [r1, r5]
    3fc8:	f000 f860 	bl	408c <_lseek_r>
    3fcc:	89a3      	ldrh	r3, [r4, #12]
    3fce:	1c42      	adds	r2, r0, #1
    3fd0:	d103      	bne.n	3fda <__sseek+0x1a>
    3fd2:	4a05      	ldr	r2, [pc, #20]	; (3fe8 <__sseek+0x28>)
    3fd4:	4013      	ands	r3, r2
    3fd6:	81a3      	strh	r3, [r4, #12]
    3fd8:	e004      	b.n	3fe4 <__sseek+0x24>
    3fda:	2280      	movs	r2, #128	; 0x80
    3fdc:	0152      	lsls	r2, r2, #5
    3fde:	4313      	orrs	r3, r2
    3fe0:	81a3      	strh	r3, [r4, #12]
    3fe2:	6560      	str	r0, [r4, #84]	; 0x54
    3fe4:	bd70      	pop	{r4, r5, r6, pc}
    3fe6:	46c0      	nop			; (mov r8, r8)
    3fe8:	ffffefff 	.word	0xffffefff

00003fec <__sclose>:
    3fec:	b510      	push	{r4, lr}
    3fee:	230e      	movs	r3, #14
    3ff0:	5ec9      	ldrsh	r1, [r1, r3]
    3ff2:	f000 f815 	bl	4020 <_close_r>
    3ff6:	bd10      	pop	{r4, pc}

00003ff8 <_write_r>:
    3ff8:	b570      	push	{r4, r5, r6, lr}
    3ffa:	0005      	movs	r5, r0
    3ffc:	0008      	movs	r0, r1
    3ffe:	0011      	movs	r1, r2
    4000:	2200      	movs	r2, #0
    4002:	4c06      	ldr	r4, [pc, #24]	; (401c <_write_r+0x24>)
    4004:	6022      	str	r2, [r4, #0]
    4006:	001a      	movs	r2, r3
    4008:	f7ff f91a 	bl	3240 <_write>
    400c:	1c43      	adds	r3, r0, #1
    400e:	d103      	bne.n	4018 <_write_r+0x20>
    4010:	6823      	ldr	r3, [r4, #0]
    4012:	2b00      	cmp	r3, #0
    4014:	d000      	beq.n	4018 <_write_r+0x20>
    4016:	602b      	str	r3, [r5, #0]
    4018:	bd70      	pop	{r4, r5, r6, pc}
    401a:	46c0      	nop			; (mov r8, r8)
    401c:	20000124 	.word	0x20000124

00004020 <_close_r>:
    4020:	2300      	movs	r3, #0
    4022:	b570      	push	{r4, r5, r6, lr}
    4024:	4c06      	ldr	r4, [pc, #24]	; (4040 <_close_r+0x20>)
    4026:	0005      	movs	r5, r0
    4028:	0008      	movs	r0, r1
    402a:	6023      	str	r3, [r4, #0]
    402c:	f7ff f942 	bl	32b4 <_close>
    4030:	1c43      	adds	r3, r0, #1
    4032:	d103      	bne.n	403c <_close_r+0x1c>
    4034:	6823      	ldr	r3, [r4, #0]
    4036:	2b00      	cmp	r3, #0
    4038:	d000      	beq.n	403c <_close_r+0x1c>
    403a:	602b      	str	r3, [r5, #0]
    403c:	bd70      	pop	{r4, r5, r6, pc}
    403e:	46c0      	nop			; (mov r8, r8)
    4040:	20000124 	.word	0x20000124

00004044 <_fstat_r>:
    4044:	2300      	movs	r3, #0
    4046:	b570      	push	{r4, r5, r6, lr}
    4048:	4c06      	ldr	r4, [pc, #24]	; (4064 <_fstat_r+0x20>)
    404a:	0005      	movs	r5, r0
    404c:	0008      	movs	r0, r1
    404e:	0011      	movs	r1, r2
    4050:	6023      	str	r3, [r4, #0]
    4052:	f7ff f933 	bl	32bc <_fstat>
    4056:	1c43      	adds	r3, r0, #1
    4058:	d103      	bne.n	4062 <_fstat_r+0x1e>
    405a:	6823      	ldr	r3, [r4, #0]
    405c:	2b00      	cmp	r3, #0
    405e:	d000      	beq.n	4062 <_fstat_r+0x1e>
    4060:	602b      	str	r3, [r5, #0]
    4062:	bd70      	pop	{r4, r5, r6, pc}
    4064:	20000124 	.word	0x20000124

00004068 <_isatty_r>:
    4068:	2300      	movs	r3, #0
    406a:	b570      	push	{r4, r5, r6, lr}
    406c:	4c06      	ldr	r4, [pc, #24]	; (4088 <_isatty_r+0x20>)
    406e:	0005      	movs	r5, r0
    4070:	0008      	movs	r0, r1
    4072:	6023      	str	r3, [r4, #0]
    4074:	f7ff f928 	bl	32c8 <_isatty>
    4078:	1c43      	adds	r3, r0, #1
    407a:	d103      	bne.n	4084 <_isatty_r+0x1c>
    407c:	6823      	ldr	r3, [r4, #0]
    407e:	2b00      	cmp	r3, #0
    4080:	d000      	beq.n	4084 <_isatty_r+0x1c>
    4082:	602b      	str	r3, [r5, #0]
    4084:	bd70      	pop	{r4, r5, r6, pc}
    4086:	46c0      	nop			; (mov r8, r8)
    4088:	20000124 	.word	0x20000124

0000408c <_lseek_r>:
    408c:	b570      	push	{r4, r5, r6, lr}
    408e:	0005      	movs	r5, r0
    4090:	0008      	movs	r0, r1
    4092:	0011      	movs	r1, r2
    4094:	2200      	movs	r2, #0
    4096:	4c06      	ldr	r4, [pc, #24]	; (40b0 <_lseek_r+0x24>)
    4098:	6022      	str	r2, [r4, #0]
    409a:	001a      	movs	r2, r3
    409c:	f7ff f916 	bl	32cc <_lseek>
    40a0:	1c43      	adds	r3, r0, #1
    40a2:	d103      	bne.n	40ac <_lseek_r+0x20>
    40a4:	6823      	ldr	r3, [r4, #0]
    40a6:	2b00      	cmp	r3, #0
    40a8:	d000      	beq.n	40ac <_lseek_r+0x20>
    40aa:	602b      	str	r3, [r5, #0]
    40ac:	bd70      	pop	{r4, r5, r6, pc}
    40ae:	46c0      	nop			; (mov r8, r8)
    40b0:	20000124 	.word	0x20000124

000040b4 <_read_r>:
    40b4:	b570      	push	{r4, r5, r6, lr}
    40b6:	0005      	movs	r5, r0
    40b8:	0008      	movs	r0, r1
    40ba:	0011      	movs	r1, r2
    40bc:	2200      	movs	r2, #0
    40be:	4c06      	ldr	r4, [pc, #24]	; (40d8 <_read_r+0x24>)
    40c0:	6022      	str	r2, [r4, #0]
    40c2:	001a      	movs	r2, r3
    40c4:	f7ff f89c 	bl	3200 <_read>
    40c8:	1c43      	adds	r3, r0, #1
    40ca:	d103      	bne.n	40d4 <_read_r+0x20>
    40cc:	6823      	ldr	r3, [r4, #0]
    40ce:	2b00      	cmp	r3, #0
    40d0:	d000      	beq.n	40d4 <_read_r+0x20>
    40d2:	602b      	str	r3, [r5, #0]
    40d4:	bd70      	pop	{r4, r5, r6, pc}
    40d6:	46c0      	nop			; (mov r8, r8)
    40d8:	20000124 	.word	0x20000124
    40dc:	42000800 	.word	0x42000800
    40e0:	42000c00 	.word	0x42000c00
    40e4:	42001000 	.word	0x42001000
    40e8:	42001400 	.word	0x42001400
    40ec:	42001800 	.word	0x42001800
    40f0:	42001c00 	.word	0x42001c00
    40f4:	0c0b0a09 	.word	0x0c0b0a09
    40f8:	00000e0d 	.word	0x00000e0d
    40fc:	00002b7a 	.word	0x00002b7a
    4100:	00002b76 	.word	0x00002b76
    4104:	00002b76 	.word	0x00002b76
    4108:	00002bd4 	.word	0x00002bd4
    410c:	00002bd4 	.word	0x00002bd4
    4110:	00002b8e 	.word	0x00002b8e
    4114:	00002b80 	.word	0x00002b80
    4118:	00002b94 	.word	0x00002b94
    411c:	00002bc2 	.word	0x00002bc2
    4120:	00002c60 	.word	0x00002c60
    4124:	00002c40 	.word	0x00002c40
    4128:	00002c40 	.word	0x00002c40
    412c:	00002ccc 	.word	0x00002ccc
    4130:	00002c52 	.word	0x00002c52
    4134:	00002c6e 	.word	0x00002c6e
    4138:	00002c44 	.word	0x00002c44
    413c:	00002c7c 	.word	0x00002c7c
    4140:	00002cbc 	.word	0x00002cbc
    4144:	204d2749 	.word	0x204d2749
    4148:	56494c41 	.word	0x56494c41
    414c:	00000045 	.word	0x00000045
    4150:	00000043 	.word	0x00000043

00004154 <_global_impure_ptr>:
    4154:	20000004                                ... 

00004158 <__sf_fake_stdin>:
	...

00004178 <__sf_fake_stdout>:
	...

00004198 <__sf_fake_stderr>:
	...

000041b8 <_init>:
    41b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41ba:	46c0      	nop			; (mov r8, r8)
    41bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    41be:	bc08      	pop	{r3}
    41c0:	469e      	mov	lr, r3
    41c2:	4770      	bx	lr

000041c4 <__init_array_start>:
    41c4:	000020dd 	.word	0x000020dd

000041c8 <_fini>:
    41c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41ca:	46c0      	nop			; (mov r8, r8)
    41cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    41ce:	bc08      	pop	{r3}
    41d0:	469e      	mov	lr, r3
    41d2:	4770      	bx	lr

000041d4 <__fini_array_start>:
    41d4:	000020b5 	.word	0x000020b5
