
AT25DFX_Sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002300  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00002300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d0  20000010  00002310  00020010  2**2
                  ALLOC
  3 .stack        00002000  200000e0  000023e0  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   000293fc  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003257  00000000  00000000  0004948d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008a75  00000000  00000000  0004c6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000418  00000000  00000000  00055159  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a70  00000000  00000000  00055571  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000193e2  00000000  00000000  00055fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b2bb  00000000  00000000  0006f3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089243  00000000  00000000  0007a67e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a40  00000000  00000000  001038c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 20 00 20 e5 1d 00 00 e1 1d 00 00 e1 1d 00 00     . . ............
	...
      2c:	e1 1d 00 00 00 00 00 00 00 00 00 00 e1 1d 00 00     ................
      3c:	e1 1d 00 00 e1 1d 00 00 e1 1d 00 00 e1 1d 00 00     ................
      4c:	e1 1d 00 00 e1 1d 00 00 e1 1d 00 00 e1 1d 00 00     ................
      5c:	e1 1d 00 00 e1 1d 00 00 19 15 00 00 29 15 00 00     ............)...
      6c:	39 15 00 00 49 15 00 00 59 15 00 00 69 15 00 00     9...I...Y...i...
      7c:	e1 1d 00 00 e1 1d 00 00 e1 1d 00 00 0d 0d 00 00     ................
      8c:	1d 0d 00 00 2d 0d 00 00 00 00 00 00 00 00 00 00     ....-...........
      9c:	e1 1d 00 00 e1 1d 00 00 e1 1d 00 00 e1 1d 00 00     ................
      ac:	e1 1d 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00002300 	.word	0x00002300

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	00002300 	.word	0x00002300
     10c:	00002300 	.word	0x00002300
     110:	00000000 	.word	0x00000000

00000114 <at25dfx_chip_check_presence>:

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
     114:	b530      	push	{r4, r5, lr}
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     116:	b085      	sub	sp, #20
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
     118:	0004      	movs	r4, r0
     11a:	2300      	movs	r3, #0
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     11c:	9303      	str	r3, [sp, #12]
     11e:	6805      	ldr	r5, [r0, #0]
     120:	4b2f      	ldr	r3, [pc, #188]	; (1e0 <at25dfx_chip_check_presence+0xcc>)
     122:	4798      	blx	r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     124:	792b      	ldrb	r3, [r5, #4]
     126:	2b00      	cmp	r3, #0
     128:	d156      	bne.n	1d8 <at25dfx_chip_check_presence+0xc4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     12a:	3301      	adds	r3, #1
     12c:	712b      	strb	r3, [r5, #4]
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     12e:	4b2d      	ldr	r3, [pc, #180]	; (1e4 <at25dfx_chip_check_presence+0xd0>)
     130:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     132:	229f      	movs	r2, #159	; 0x9f
     134:	ab01      	add	r3, sp, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     136:	701a      	strb	r2, [r3, #0]
		while (!spi_is_ready_to_write(chip->spi)) {
     138:	7962      	ldrb	r2, [r4, #5]
     13a:	09d1      	lsrs	r1, r2, #7
     13c:	2300      	movs	r3, #0
	if (!spi_is_ready_to_write(module)) {
     13e:	2900      	cmp	r1, #0
     140:	d104      	bne.n	14c <at25dfx_chip_check_presence+0x38>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     142:	0953      	lsrs	r3, r2, #5
		while (!spi_is_ready_to_read(chip->spi)) {
     144:	01db      	lsls	r3, r3, #7
	SercomSpi *const spi_module = &(module->hw->SPI);
     146:	4928      	ldr	r1, [pc, #160]	; (1e8 <at25dfx_chip_check_presence+0xd4>)
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     148:	468c      	mov	ip, r1
     14a:	4463      	add	r3, ip
     14c:	211f      	movs	r1, #31
     14e:	4011      	ands	r1, r2
	if (!spi_is_ready_to_read(module)) {
     150:	2201      	movs	r2, #1
     152:	408a      	lsls	r2, r1
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     154:	615a      	str	r2, [r3, #20]
     156:	2201      	movs	r2, #1
     158:	a901      	add	r1, sp, #4
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     15a:	6820      	ldr	r0, [r4, #0]
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <at25dfx_chip_check_presence+0xd8>)
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     15e:	4798      	blx	r3
     160:	2300      	movs	r3, #0
     162:	2203      	movs	r2, #3
     164:	a903      	add	r1, sp, #12
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     166:	6820      	ldr	r0, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     168:	4d21      	ldr	r5, [pc, #132]	; (1f0 <at25dfx_chip_check_presence+0xdc>)
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     16a:	47a8      	blx	r5
	if (port_index < PORT_INST_NUM) {
     16c:	7962      	ldrb	r2, [r4, #5]
     16e:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
     170:	2300      	movs	r3, #0
     172:	2900      	cmp	r1, #0
     174:	d104      	bne.n	180 <at25dfx_chip_check_presence+0x6c>
     176:	0953      	lsrs	r3, r2, #5
     178:	01db      	lsls	r3, r3, #7
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     17a:	491b      	ldr	r1, [pc, #108]	; (1e8 <at25dfx_chip_check_presence+0xd4>)
     17c:	468c      	mov	ip, r1
     17e:	4463      	add	r3, ip
     180:	211f      	movs	r1, #31

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     182:	4011      	ands	r1, r2

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
     184:	2201      	movs	r2, #1
		return STATUS_ERR_IO;
	}
	return STATUS_OK;
     186:	408a      	lsls	r2, r1
     188:	619a      	str	r2, [r3, #24]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);
     18a:	2300      	movs	r3, #0
	module->locked = false;
     18c:	6822      	ldr	r2, [r4, #0]
     18e:	7113      	strb	r3, [r2, #4]

	return status;
     190:	7923      	ldrb	r3, [r4, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     192:	2b09      	cmp	r3, #9
     194:	d815      	bhi.n	1c2 <at25dfx_chip_check_presence+0xae>
		return status;
     196:	009b      	lsls	r3, r3, #2
}
     198:	4a16      	ldr	r2, [pc, #88]	; (1f4 <at25dfx_chip_check_presence+0xe0>)
     19a:	58d3      	ldr	r3, [r2, r3]
     19c:	469f      	mov	pc, r3
     19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <at25dfx_chip_check_presence+0xe4>)
     1a0:	e012      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
     1a2:	4b16      	ldr	r3, [pc, #88]	; (1fc <at25dfx_chip_check_presence+0xe8>)
     1a4:	e010      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <at25dfx_chip_check_presence+0xec>)
     1a8:	e00e      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
     1aa:	4b16      	ldr	r3, [pc, #88]	; (204 <at25dfx_chip_check_presence+0xf0>)
		return 0x01451f;
     1ac:	e00c      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		return 0x02461f;
     1ae:	4b16      	ldr	r3, [pc, #88]	; (208 <at25dfx_chip_check_presence+0xf4>)
     1b0:	e00a      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		return 0x03461f;
     1b2:	4b16      	ldr	r3, [pc, #88]	; (20c <at25dfx_chip_check_presence+0xf8>)
     1b4:	e008      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		return 0x00861f;
     1b6:	4b16      	ldr	r3, [pc, #88]	; (210 <at25dfx_chip_check_presence+0xfc>)
     1b8:	e006      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		return 0x01471f;
     1ba:	4b16      	ldr	r3, [pc, #88]	; (214 <at25dfx_chip_check_presence+0x100>)
     1bc:	e004      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		return 0x00481f;
     1be:	4b16      	ldr	r3, [pc, #88]	; (218 <at25dfx_chip_check_presence+0x104>)
     1c0:	e002      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		return 0;
     1c2:	2300      	movs	r3, #0
     1c4:	e000      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		return 0x00651f;
     1c6:	4b15      	ldr	r3, [pc, #84]	; (21c <at25dfx_chip_check_presence+0x108>)
	if (id == _at25dfx_get_device_id(chip->type)) {
     1c8:	9a03      	ldr	r2, [sp, #12]
     1ca:	429a      	cmp	r2, r3
     1cc:	d002      	beq.n	1d4 <at25dfx_chip_check_presence+0xc0>
		return STATUS_ERR_NOT_FOUND;
     1ce:	2014      	movs	r0, #20
}
     1d0:	b005      	add	sp, #20
     1d2:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
     1d4:	2000      	movs	r0, #0
     1d6:	e7fb      	b.n	1d0 <at25dfx_chip_check_presence+0xbc>
     1d8:	4b02      	ldr	r3, [pc, #8]	; (1e4 <at25dfx_chip_check_presence+0xd0>)
     1da:	4798      	blx	r3
		return status;
     1dc:	2005      	movs	r0, #5
     1de:	e7f7      	b.n	1d0 <at25dfx_chip_check_presence+0xbc>
     1e0:	00001579 	.word	0x00001579
     1e4:	000015b9 	.word	0x000015b9
     1e8:	41004400 	.word	0x41004400
     1ec:	0000120d 	.word	0x0000120d
     1f0:	00001139 	.word	0x00001139
     1f4:	000021b4 	.word	0x000021b4
     1f8:	0000431f 	.word	0x0000431f
     1fc:	0001441f 	.word	0x0001441f
     200:	0002451f 	.word	0x0002451f
     204:	0001451f 	.word	0x0001451f
     208:	0002461f 	.word	0x0002461f
     20c:	0003461f 	.word	0x0003461f
     210:	0000861f 	.word	0x0000861f
     214:	0001471f 	.word	0x0001471f
     218:	0000481f 	.word	0x0000481f
     21c:	0000651f 	.word	0x0000651f

00000220 <at25dfx_chip_read_buffer>:
{
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	b085      	sub	sp, #20
     224:	0004      	movs	r4, r0
     226:	000e      	movs	r6, r1
     228:	9201      	str	r2, [sp, #4]
     22a:	001f      	movs	r7, r3
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     22c:	185a      	adds	r2, r3, r1
	switch (type) {
     22e:	7903      	ldrb	r3, [r0, #4]
     230:	2b09      	cmp	r3, #9
     232:	d815      	bhi.n	260 <at25dfx_chip_read_buffer+0x40>
     234:	009b      	lsls	r3, r3, #2
     236:	4932      	ldr	r1, [pc, #200]	; (300 <at25dfx_chip_read_buffer+0xe0>)
     238:	58cb      	ldr	r3, [r1, r3]
     23a:	469f      	mov	pc, r3
		return 256 * 1024UL;
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	02db      	lsls	r3, r3, #11
     240:	e012      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 512 * 1024UL;
     242:	2380      	movs	r3, #128	; 0x80
     244:	031b      	lsls	r3, r3, #12
     246:	e00f      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 1024 * 1024UL;
     248:	2380      	movs	r3, #128	; 0x80
     24a:	035b      	lsls	r3, r3, #13
     24c:	e00c      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 2048 * 1024UL;
     24e:	2380      	movs	r3, #128	; 0x80
     250:	039b      	lsls	r3, r3, #14
     252:	e009      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 4096 * 1024UL;
     254:	2380      	movs	r3, #128	; 0x80
     256:	03db      	lsls	r3, r3, #15
     258:	e006      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 8192 * 1024UL;
     25a:	2380      	movs	r3, #128	; 0x80
     25c:	041b      	lsls	r3, r3, #16
     25e:	e003      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 0;
     260:	2300      	movs	r3, #0
     262:	e001      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 64 * 1024UL;
     264:	2380      	movs	r3, #128	; 0x80
     266:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
     268:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     26a:	429a      	cmp	r2, r3
     26c:	d901      	bls.n	272 <at25dfx_chip_read_buffer+0x52>
}
     26e:	b005      	add	sp, #20
     270:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     272:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     274:	4b23      	ldr	r3, [pc, #140]	; (304 <at25dfx_chip_read_buffer+0xe4>)
     276:	4798      	blx	r3
	if (module->locked) {
     278:	792b      	ldrb	r3, [r5, #4]
     27a:	2b00      	cmp	r3, #0
     27c:	d13c      	bne.n	2f8 <at25dfx_chip_read_buffer+0xd8>
		module->locked = true;
     27e:	3301      	adds	r3, #1
     280:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     282:	4b21      	ldr	r3, [pc, #132]	; (308 <at25dfx_chip_read_buffer+0xe8>)
     284:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     286:	230b      	movs	r3, #11
     288:	aa02      	add	r2, sp, #8
     28a:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     28c:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     28e:	0a33      	lsrs	r3, r6, #8
     290:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     292:	0c36      	lsrs	r6, r6, #16
     294:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     296:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     298:	09d1      	lsrs	r1, r2, #7
		return NULL;
     29a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     29c:	2900      	cmp	r1, #0
     29e:	d104      	bne.n	2aa <at25dfx_chip_read_buffer+0x8a>
		return &(ports[port_index]->Group[group_index]);
     2a0:	0953      	lsrs	r3, r2, #5
     2a2:	01db      	lsls	r3, r3, #7
     2a4:	4919      	ldr	r1, [pc, #100]	; (30c <at25dfx_chip_read_buffer+0xec>)
     2a6:	468c      	mov	ip, r1
     2a8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2aa:	211f      	movs	r1, #31
     2ac:	4011      	ands	r1, r2
     2ae:	2201      	movs	r2, #1
     2b0:	408a      	lsls	r2, r1
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2b2:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     2b4:	2205      	movs	r2, #5
     2b6:	a902      	add	r1, sp, #8
     2b8:	6820      	ldr	r0, [r4, #0]
     2ba:	4b15      	ldr	r3, [pc, #84]	; (310 <at25dfx_chip_read_buffer+0xf0>)
     2bc:	4798      	blx	r3
	if (cmd.length) {
     2be:	2f00      	cmp	r7, #0
     2c0:	d113      	bne.n	2ea <at25dfx_chip_read_buffer+0xca>
	port_pin_set_output_level(chip->cs_pin, true);
     2c2:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     2c4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     2c6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2c8:	2900      	cmp	r1, #0
     2ca:	d104      	bne.n	2d6 <at25dfx_chip_read_buffer+0xb6>
		return &(ports[port_index]->Group[group_index]);
     2cc:	0953      	lsrs	r3, r2, #5
     2ce:	01db      	lsls	r3, r3, #7
     2d0:	490e      	ldr	r1, [pc, #56]	; (30c <at25dfx_chip_read_buffer+0xec>)
     2d2:	468c      	mov	ip, r1
     2d4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2d6:	211f      	movs	r1, #31
     2d8:	4011      	ands	r1, r2
     2da:	2201      	movs	r2, #1
     2dc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     2de:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
     2e0:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     2e2:	2200      	movs	r2, #0
     2e4:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
     2e6:	2000      	movs	r0, #0
     2e8:	e7c1      	b.n	26e <at25dfx_chip_read_buffer+0x4e>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
     2ea:	2300      	movs	r3, #0
     2ec:	003a      	movs	r2, r7
     2ee:	9901      	ldr	r1, [sp, #4]
     2f0:	6820      	ldr	r0, [r4, #0]
     2f2:	4d08      	ldr	r5, [pc, #32]	; (314 <at25dfx_chip_read_buffer+0xf4>)
     2f4:	47a8      	blx	r5
     2f6:	e7e4      	b.n	2c2 <at25dfx_chip_read_buffer+0xa2>
     2f8:	4b03      	ldr	r3, [pc, #12]	; (308 <at25dfx_chip_read_buffer+0xe8>)
     2fa:	4798      	blx	r3
		return status;
     2fc:	2005      	movs	r0, #5
     2fe:	e7b6      	b.n	26e <at25dfx_chip_read_buffer+0x4e>
     300:	000021dc 	.word	0x000021dc
     304:	00001579 	.word	0x00001579
     308:	000015b9 	.word	0x000015b9
     30c:	41004400 	.word	0x41004400
     310:	0000120d 	.word	0x0000120d
     314:	00001139 	.word	0x00001139

00000318 <at25dfx_chip_write_buffer>:
{
     318:	b5f0      	push	{r4, r5, r6, r7, lr}
     31a:	46de      	mov	lr, fp
     31c:	4657      	mov	r7, sl
     31e:	464e      	mov	r6, r9
     320:	4645      	mov	r5, r8
     322:	b5e0      	push	{r5, r6, r7, lr}
     324:	b085      	sub	sp, #20
     326:	0005      	movs	r5, r0
     328:	000e      	movs	r6, r1
     32a:	9201      	str	r2, [sp, #4]
     32c:	001f      	movs	r7, r3
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     32e:	185a      	adds	r2, r3, r1
	switch (type) {
     330:	7903      	ldrb	r3, [r0, #4]
     332:	2b09      	cmp	r3, #9
     334:	d815      	bhi.n	362 <at25dfx_chip_write_buffer+0x4a>
     336:	009b      	lsls	r3, r3, #2
     338:	49ae      	ldr	r1, [pc, #696]	; (5f4 <at25dfx_chip_write_buffer+0x2dc>)
     33a:	58cb      	ldr	r3, [r1, r3]
     33c:	469f      	mov	pc, r3
		return 256 * 1024UL;
     33e:	2380      	movs	r3, #128	; 0x80
     340:	02db      	lsls	r3, r3, #11
     342:	e012      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 512 * 1024UL;
     344:	2380      	movs	r3, #128	; 0x80
     346:	031b      	lsls	r3, r3, #12
     348:	e00f      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 1024 * 1024UL;
     34a:	2380      	movs	r3, #128	; 0x80
     34c:	035b      	lsls	r3, r3, #13
     34e:	e00c      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 2048 * 1024UL;
     350:	2380      	movs	r3, #128	; 0x80
     352:	039b      	lsls	r3, r3, #14
     354:	e009      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 4096 * 1024UL;
     356:	2380      	movs	r3, #128	; 0x80
     358:	03db      	lsls	r3, r3, #15
     35a:	e006      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 8192 * 1024UL;
     35c:	2380      	movs	r3, #128	; 0x80
     35e:	041b      	lsls	r3, r3, #16
     360:	e003      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 0;
     362:	2300      	movs	r3, #0
     364:	e001      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 64 * 1024UL;
     366:	2380      	movs	r3, #128	; 0x80
     368:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
     36a:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     36c:	429a      	cmp	r2, r3
     36e:	d906      	bls.n	37e <at25dfx_chip_write_buffer+0x66>
}
     370:	b005      	add	sp, #20
     372:	bc3c      	pop	{r2, r3, r4, r5}
     374:	4690      	mov	r8, r2
     376:	4699      	mov	r9, r3
     378:	46a2      	mov	sl, r4
     37a:	46ab      	mov	fp, r5
     37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     37e:	682c      	ldr	r4, [r5, #0]
	cpu_irq_enter_critical();
     380:	4b9d      	ldr	r3, [pc, #628]	; (5f8 <at25dfx_chip_write_buffer+0x2e0>)
     382:	4798      	blx	r3
	if (module->locked) {
     384:	7923      	ldrb	r3, [r4, #4]
     386:	2b00      	cmp	r3, #0
     388:	d000      	beq.n	38c <at25dfx_chip_write_buffer+0x74>
     38a:	e12e      	b.n	5ea <at25dfx_chip_write_buffer+0x2d2>
		module->locked = true;
     38c:	3301      	adds	r3, #1
     38e:	7123      	strb	r3, [r4, #4]
	cpu_irq_leave_critical();
     390:	4b9a      	ldr	r3, [pc, #616]	; (5fc <at25dfx_chip_write_buffer+0x2e4>)
     392:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     394:	2306      	movs	r3, #6
     396:	aa02      	add	r2, sp, #8
     398:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     39a:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     39c:	09d1      	lsrs	r1, r2, #7
		return NULL;
     39e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     3a0:	2900      	cmp	r1, #0
     3a2:	d104      	bne.n	3ae <at25dfx_chip_write_buffer+0x96>
		return &(ports[port_index]->Group[group_index]);
     3a4:	0953      	lsrs	r3, r2, #5
     3a6:	01db      	lsls	r3, r3, #7
     3a8:	4995      	ldr	r1, [pc, #596]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     3aa:	468c      	mov	ip, r1
     3ac:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3ae:	211f      	movs	r1, #31
     3b0:	4011      	ands	r1, r2
     3b2:	2201      	movs	r2, #1
     3b4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     3b6:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     3b8:	2201      	movs	r2, #1
     3ba:	a902      	add	r1, sp, #8
     3bc:	6828      	ldr	r0, [r5, #0]
     3be:	4b91      	ldr	r3, [pc, #580]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     3c0:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     3c2:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     3c4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     3c6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     3c8:	2900      	cmp	r1, #0
     3ca:	d104      	bne.n	3d6 <at25dfx_chip_write_buffer+0xbe>
		return &(ports[port_index]->Group[group_index]);
     3cc:	0953      	lsrs	r3, r2, #5
     3ce:	01db      	lsls	r3, r3, #7
     3d0:	498b      	ldr	r1, [pc, #556]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     3d2:	468c      	mov	ip, r1
     3d4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3d6:	211f      	movs	r1, #31
     3d8:	4011      	ands	r1, r2
     3da:	2201      	movs	r2, #1
     3dc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     3de:	619a      	str	r2, [r3, #24]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
     3e0:	22ff      	movs	r2, #255	; 0xff
     3e2:	4032      	ands	r2, r6
     3e4:	2380      	movs	r3, #128	; 0x80
     3e6:	005b      	lsls	r3, r3, #1
     3e8:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
     3ea:	1c1a      	adds	r2, r3, #0
     3ec:	b29b      	uxth	r3, r3
     3ee:	42bb      	cmp	r3, r7
     3f0:	d900      	bls.n	3f4 <at25dfx_chip_write_buffer+0xdc>
     3f2:	1c3a      	adds	r2, r7, #0
     3f4:	b293      	uxth	r3, r2
     3f6:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
     3f8:	2302      	movs	r3, #2
     3fa:	aa02      	add	r2, sp, #8
     3fc:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     3fe:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     400:	0a33      	lsrs	r3, r6, #8
     402:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     404:	0c33      	lsrs	r3, r6, #16
     406:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     408:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     40a:	09d1      	lsrs	r1, r2, #7
		return NULL;
     40c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     40e:	2900      	cmp	r1, #0
     410:	d104      	bne.n	41c <at25dfx_chip_write_buffer+0x104>
		return &(ports[port_index]->Group[group_index]);
     412:	0953      	lsrs	r3, r2, #5
     414:	01db      	lsls	r3, r3, #7
     416:	497a      	ldr	r1, [pc, #488]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     418:	468c      	mov	ip, r1
     41a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     41c:	211f      	movs	r1, #31
     41e:	4011      	ands	r1, r2
     420:	2201      	movs	r2, #1
     422:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     424:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     426:	2204      	movs	r2, #4
     428:	a902      	add	r1, sp, #8
     42a:	6828      	ldr	r0, [r5, #0]
     42c:	4b75      	ldr	r3, [pc, #468]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     42e:	4798      	blx	r3
	if (cmd.length) {
     430:	4653      	mov	r3, sl
     432:	2b00      	cmp	r3, #0
     434:	d145      	bne.n	4c2 <at25dfx_chip_write_buffer+0x1aa>
	port_pin_set_output_level(chip->cs_pin, true);
     436:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     438:	09d1      	lsrs	r1, r2, #7
		return NULL;
     43a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     43c:	2900      	cmp	r1, #0
     43e:	d104      	bne.n	44a <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
     440:	0953      	lsrs	r3, r2, #5
     442:	01db      	lsls	r3, r3, #7
     444:	496e      	ldr	r1, [pc, #440]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     446:	468c      	mov	ip, r1
     448:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     44a:	211f      	movs	r1, #31
     44c:	4011      	ands	r1, r2
     44e:	2201      	movs	r2, #1
     450:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     452:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     454:	682b      	ldr	r3, [r5, #0]
     456:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
     458:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     45a:	7e0b      	ldrb	r3, [r1, #24]
     45c:	4213      	tst	r3, r2
     45e:	d0fc      	beq.n	45a <at25dfx_chip_write_buffer+0x142>
	port_pin_set_output_level(chip->cs_pin, false);
     460:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     462:	09d1      	lsrs	r1, r2, #7
		return NULL;
     464:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     466:	2900      	cmp	r1, #0
     468:	d104      	bne.n	474 <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
     46a:	0953      	lsrs	r3, r2, #5
     46c:	01db      	lsls	r3, r3, #7
     46e:	4964      	ldr	r1, [pc, #400]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     470:	468c      	mov	ip, r1
     472:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     474:	211f      	movs	r1, #31
     476:	4011      	ands	r1, r2
     478:	2201      	movs	r2, #1
     47a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     47c:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     47e:	682b      	ldr	r3, [r5, #0]
     480:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     482:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     484:	07d2      	lsls	r2, r2, #31
     486:	d501      	bpl.n	48c <at25dfx_chip_write_buffer+0x174>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     488:	2205      	movs	r2, #5
     48a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     48c:	6828      	ldr	r0, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     48e:	6802      	ldr	r2, [r0, #0]
     490:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     492:	7e13      	ldrb	r3, [r2, #24]
     494:	420b      	tst	r3, r1
     496:	d0fc      	beq.n	492 <at25dfx_chip_write_buffer+0x17a>
     498:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     49a:	2400      	movs	r4, #0
	if (!spi_is_ready_to_read(module)) {
     49c:	075b      	lsls	r3, r3, #29
     49e:	d509      	bpl.n	4b4 <at25dfx_chip_write_buffer+0x19c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     4a0:	8b53      	ldrh	r3, [r2, #26]
     4a2:	075b      	lsls	r3, r3, #29
     4a4:	d501      	bpl.n	4aa <at25dfx_chip_write_buffer+0x192>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     4a6:	2304      	movs	r3, #4
     4a8:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4aa:	7983      	ldrb	r3, [r0, #6]
     4ac:	2b01      	cmp	r3, #1
     4ae:	d00e      	beq.n	4ce <at25dfx_chip_write_buffer+0x1b6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4b0:	6a94      	ldr	r4, [r2, #40]	; 0x28
     4b2:	b2e4      	uxtb	r4, r4
		while (!spi_is_ready_to_write(chip->spi)) {
     4b4:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     4b6:	2300      	movs	r3, #0
     4b8:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(chip->spi)) {
     4ba:	2004      	movs	r0, #4
     4bc:	46b4      	mov	ip, r6
     4be:	002e      	movs	r6, r5
     4c0:	e010      	b.n	4e4 <at25dfx_chip_write_buffer+0x1cc>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     4c2:	4652      	mov	r2, sl
     4c4:	9901      	ldr	r1, [sp, #4]
     4c6:	6828      	ldr	r0, [r5, #0]
     4c8:	4b4e      	ldr	r3, [pc, #312]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     4ca:	4798      	blx	r3
     4cc:	e7b3      	b.n	436 <at25dfx_chip_write_buffer+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     4ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
     4d0:	05db      	lsls	r3, r3, #23
     4d2:	0ddc      	lsrs	r4, r3, #23
     4d4:	e7ee      	b.n	4b4 <at25dfx_chip_write_buffer+0x19c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4d6:	79ab      	ldrb	r3, [r5, #6]
     4d8:	2b01      	cmp	r3, #1
     4da:	d01a      	beq.n	512 <at25dfx_chip_write_buffer+0x1fa>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4dc:	6a94      	ldr	r4, [r2, #40]	; 0x28
     4de:	b2e4      	uxtb	r4, r4
	} while (status_reg & AT25DFX_STATUS_BUSY);
     4e0:	4221      	tst	r1, r4
     4e2:	d01a      	beq.n	51a <at25dfx_chip_write_buffer+0x202>
	SercomSpi *const spi_module = &(module->hw->SPI);
     4e4:	6833      	ldr	r3, [r6, #0]
     4e6:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     4e8:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     4ea:	420b      	tst	r3, r1
     4ec:	d0fc      	beq.n	4e8 <at25dfx_chip_write_buffer+0x1d0>
     4ee:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     4f0:	420b      	tst	r3, r1
     4f2:	d001      	beq.n	4f8 <at25dfx_chip_write_buffer+0x1e0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     4f4:	4643      	mov	r3, r8
     4f6:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     4f8:	6835      	ldr	r5, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     4fa:	682a      	ldr	r2, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     4fc:	7e13      	ldrb	r3, [r2, #24]
     4fe:	4203      	tst	r3, r0
     500:	d0fc      	beq.n	4fc <at25dfx_chip_write_buffer+0x1e4>
     502:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     504:	4203      	tst	r3, r0
     506:	d0eb      	beq.n	4e0 <at25dfx_chip_write_buffer+0x1c8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     508:	8b53      	ldrh	r3, [r2, #26]
     50a:	4203      	tst	r3, r0
     50c:	d0e3      	beq.n	4d6 <at25dfx_chip_write_buffer+0x1be>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     50e:	8350      	strh	r0, [r2, #26]
     510:	e7e1      	b.n	4d6 <at25dfx_chip_write_buffer+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     512:	6a94      	ldr	r4, [r2, #40]	; 0x28
     514:	05e4      	lsls	r4, r4, #23
     516:	0de4      	lsrs	r4, r4, #23
     518:	e7e2      	b.n	4e0 <at25dfx_chip_write_buffer+0x1c8>
     51a:	0035      	movs	r5, r6
     51c:	4666      	mov	r6, ip
	port_pin_set_output_level(chip->cs_pin, true);
     51e:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     520:	09d1      	lsrs	r1, r2, #7
		return NULL;
     522:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     524:	2900      	cmp	r1, #0
     526:	d104      	bne.n	532 <at25dfx_chip_write_buffer+0x21a>
		return &(ports[port_index]->Group[group_index]);
     528:	0953      	lsrs	r3, r2, #5
     52a:	01db      	lsls	r3, r3, #7
     52c:	4934      	ldr	r1, [pc, #208]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     52e:	468c      	mov	ip, r1
     530:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     532:	211f      	movs	r1, #31
     534:	4011      	ands	r1, r2
     536:	2201      	movs	r2, #1
     538:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     53a:	619a      	str	r2, [r3, #24]
		return STATUS_ERR_IO;
     53c:	2010      	movs	r0, #16
	if (status_reg & AT25DFX_STATUS_ERROR) {
     53e:	06a3      	lsls	r3, r4, #26
     540:	d44f      	bmi.n	5e2 <at25dfx_chip_write_buffer+0x2ca>
	length -= cmd.length;
     542:	4653      	mov	r3, sl
     544:	1aff      	subs	r7, r7, r3
     546:	b2bb      	uxth	r3, r7
     548:	0019      	movs	r1, r3
	while (length && (status == STATUS_OK)) {
     54a:	9a01      	ldr	r2, [sp, #4]
     54c:	4691      	mov	r9, r2
	return STATUS_OK;
     54e:	2000      	movs	r0, #0
     550:	2b00      	cmp	r3, #0
     552:	d046      	beq.n	5e2 <at25dfx_chip_write_buffer+0x2ca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     554:	231f      	movs	r3, #31
     556:	469b      	mov	fp, r3
     558:	2401      	movs	r4, #1
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     55a:	4b2a      	ldr	r3, [pc, #168]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     55c:	4698      	mov	r8, r3
     55e:	4653      	mov	r3, sl
     560:	9301      	str	r3, [sp, #4]
     562:	468a      	mov	sl, r1
     564:	e058      	b.n	618 <at25dfx_chip_write_buffer+0x300>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     566:	001a      	movs	r2, r3
     568:	4649      	mov	r1, r9
     56a:	6828      	ldr	r0, [r5, #0]
     56c:	4b25      	ldr	r3, [pc, #148]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     56e:	4798      	blx	r3
     570:	e0a4      	b.n	6bc <at25dfx_chip_write_buffer+0x3a4>
     572:	6a90      	ldr	r0, [r2, #40]	; 0x28
     574:	05c0      	lsls	r0, r0, #23
     576:	0dc0      	lsrs	r0, r0, #23
     578:	e0e1      	b.n	73e <at25dfx_chip_write_buffer+0x426>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     57a:	79bb      	ldrb	r3, [r7, #6]
     57c:	2b01      	cmp	r3, #1
     57e:	d01a      	beq.n	5b6 <at25dfx_chip_write_buffer+0x29e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     580:	6a90      	ldr	r0, [r2, #40]	; 0x28
     582:	b2c0      	uxtb	r0, r0
	} while (status_reg & AT25DFX_STATUS_BUSY);
     584:	4204      	tst	r4, r0
     586:	d01a      	beq.n	5be <at25dfx_chip_write_buffer+0x2a6>
	SercomSpi *const spi_module = &(module->hw->SPI);
     588:	682b      	ldr	r3, [r5, #0]
     58a:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     58c:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     58e:	4223      	tst	r3, r4
     590:	d0fc      	beq.n	58c <at25dfx_chip_write_buffer+0x274>
     592:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     594:	4223      	tst	r3, r4
     596:	d001      	beq.n	59c <at25dfx_chip_write_buffer+0x284>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     598:	2300      	movs	r3, #0
     59a:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     59c:	682f      	ldr	r7, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     59e:	683a      	ldr	r2, [r7, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     5a0:	7e13      	ldrb	r3, [r2, #24]
     5a2:	420b      	tst	r3, r1
     5a4:	d0fc      	beq.n	5a0 <at25dfx_chip_write_buffer+0x288>
     5a6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     5a8:	420b      	tst	r3, r1
     5aa:	d0eb      	beq.n	584 <at25dfx_chip_write_buffer+0x26c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     5ac:	8b53      	ldrh	r3, [r2, #26]
     5ae:	420b      	tst	r3, r1
     5b0:	d0e3      	beq.n	57a <at25dfx_chip_write_buffer+0x262>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     5b2:	8351      	strh	r1, [r2, #26]
     5b4:	e7e1      	b.n	57a <at25dfx_chip_write_buffer+0x262>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     5b6:	6a90      	ldr	r0, [r2, #40]	; 0x28
     5b8:	05c0      	lsls	r0, r0, #23
     5ba:	0dc0      	lsrs	r0, r0, #23
     5bc:	e7e2      	b.n	584 <at25dfx_chip_write_buffer+0x26c>
	port_pin_set_output_level(chip->cs_pin, true);
     5be:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     5c0:	09d9      	lsrs	r1, r3, #7
		return NULL;
     5c2:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     5c4:	2900      	cmp	r1, #0
     5c6:	d104      	bne.n	5d2 <at25dfx_chip_write_buffer+0x2ba>
		return &(ports[port_index]->Group[group_index]);
     5c8:	095a      	lsrs	r2, r3, #5
     5ca:	01d2      	lsls	r2, r2, #7
     5cc:	490c      	ldr	r1, [pc, #48]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     5ce:	468c      	mov	ip, r1
     5d0:	4462      	add	r2, ip
     5d2:	4659      	mov	r1, fp
     5d4:	400b      	ands	r3, r1
     5d6:	0021      	movs	r1, r4
     5d8:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     5da:	6191      	str	r1, [r2, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
     5dc:	0683      	lsls	r3, r0, #26
     5de:	d513      	bpl.n	608 <at25dfx_chip_write_buffer+0x2f0>
		return STATUS_ERR_IO;
     5e0:	2010      	movs	r0, #16
	_at25dfx_spi_unlock(chip->spi);
     5e2:	682b      	ldr	r3, [r5, #0]
	module->locked = false;
     5e4:	2200      	movs	r2, #0
     5e6:	711a      	strb	r2, [r3, #4]
	return status;
     5e8:	e6c2      	b.n	370 <at25dfx_chip_write_buffer+0x58>
     5ea:	4b04      	ldr	r3, [pc, #16]	; (5fc <at25dfx_chip_write_buffer+0x2e4>)
     5ec:	4798      	blx	r3
		return status;
     5ee:	2005      	movs	r0, #5
     5f0:	e6be      	b.n	370 <at25dfx_chip_write_buffer+0x58>
     5f2:	46c0      	nop			; (mov r8, r8)
     5f4:	00002208 	.word	0x00002208
     5f8:	00001579 	.word	0x00001579
     5fc:	000015b9 	.word	0x000015b9
     600:	41004400 	.word	0x41004400
     604:	0000120d 	.word	0x0000120d
		length -= cmd.length;
     608:	4653      	mov	r3, sl
     60a:	9a01      	ldr	r2, [sp, #4]
     60c:	1a9b      	subs	r3, r3, r2
     60e:	b29b      	uxth	r3, r3
     610:	469a      	mov	sl, r3
	while (length && (status == STATUS_OK)) {
     612:	2b00      	cmp	r3, #0
     614:	d100      	bne.n	618 <at25dfx_chip_write_buffer+0x300>
     616:	e094      	b.n	742 <at25dfx_chip_write_buffer+0x42a>
	cmd_buffer[0] = cmd.opcode;
     618:	ab02      	add	r3, sp, #8
     61a:	2206      	movs	r2, #6
     61c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     61e:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     620:	09d9      	lsrs	r1, r3, #7
		return NULL;
     622:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     624:	2900      	cmp	r1, #0
     626:	d104      	bne.n	632 <at25dfx_chip_write_buffer+0x31a>
		return &(ports[port_index]->Group[group_index]);
     628:	095a      	lsrs	r2, r3, #5
     62a:	01d2      	lsls	r2, r2, #7
     62c:	4946      	ldr	r1, [pc, #280]	; (748 <at25dfx_chip_write_buffer+0x430>)
     62e:	468c      	mov	ip, r1
     630:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     632:	4659      	mov	r1, fp
     634:	400b      	ands	r3, r1
     636:	0021      	movs	r1, r4
     638:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     63a:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     63c:	0022      	movs	r2, r4
     63e:	a902      	add	r1, sp, #8
     640:	6828      	ldr	r0, [r5, #0]
     642:	47c0      	blx	r8
	port_pin_set_output_level(chip->cs_pin, true);
     644:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     646:	09d9      	lsrs	r1, r3, #7
		return NULL;
     648:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     64a:	2900      	cmp	r1, #0
     64c:	d104      	bne.n	658 <at25dfx_chip_write_buffer+0x340>
		return &(ports[port_index]->Group[group_index]);
     64e:	095a      	lsrs	r2, r3, #5
     650:	01d2      	lsls	r2, r2, #7
     652:	493d      	ldr	r1, [pc, #244]	; (748 <at25dfx_chip_write_buffer+0x430>)
     654:	468c      	mov	ip, r1
     656:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     658:	4659      	mov	r1, fp
     65a:	400b      	ands	r3, r1
     65c:	0021      	movs	r1, r4
     65e:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     660:	6191      	str	r1, [r2, #24]
		cmd.address += cmd.length;
     662:	9a01      	ldr	r2, [sp, #4]
     664:	4694      	mov	ip, r2
     666:	4466      	add	r6, ip
		cmd.data.tx += cmd.length;
     668:	44e1      	add	r9, ip
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     66a:	4657      	mov	r7, sl
     66c:	2380      	movs	r3, #128	; 0x80
     66e:	005b      	lsls	r3, r3, #1
     670:	459a      	cmp	sl, r3
     672:	d901      	bls.n	678 <at25dfx_chip_write_buffer+0x360>
     674:	4b35      	ldr	r3, [pc, #212]	; (74c <at25dfx_chip_write_buffer+0x434>)
     676:	881f      	ldrh	r7, [r3, #0]
     678:	b2bb      	uxth	r3, r7
     67a:	9301      	str	r3, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
     67c:	2302      	movs	r3, #2
     67e:	aa02      	add	r2, sp, #8
     680:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     682:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     684:	0a33      	lsrs	r3, r6, #8
     686:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     688:	0c33      	lsrs	r3, r6, #16
     68a:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     68c:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     68e:	09d9      	lsrs	r1, r3, #7
		return NULL;
     690:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     692:	2900      	cmp	r1, #0
     694:	d104      	bne.n	6a0 <at25dfx_chip_write_buffer+0x388>
		return &(ports[port_index]->Group[group_index]);
     696:	095a      	lsrs	r2, r3, #5
     698:	01d2      	lsls	r2, r2, #7
     69a:	492b      	ldr	r1, [pc, #172]	; (748 <at25dfx_chip_write_buffer+0x430>)
     69c:	468c      	mov	ip, r1
     69e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6a0:	4659      	mov	r1, fp
     6a2:	400b      	ands	r3, r1
     6a4:	0021      	movs	r1, r4
     6a6:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     6a8:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     6aa:	2204      	movs	r2, #4
     6ac:	a902      	add	r1, sp, #8
     6ae:	6828      	ldr	r0, [r5, #0]
     6b0:	4b27      	ldr	r3, [pc, #156]	; (750 <at25dfx_chip_write_buffer+0x438>)
     6b2:	4798      	blx	r3
	if (cmd.length) {
     6b4:	9b01      	ldr	r3, [sp, #4]
     6b6:	2b00      	cmp	r3, #0
     6b8:	d000      	beq.n	6bc <at25dfx_chip_write_buffer+0x3a4>
     6ba:	e754      	b.n	566 <at25dfx_chip_write_buffer+0x24e>
	port_pin_set_output_level(chip->cs_pin, true);
     6bc:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     6be:	09d9      	lsrs	r1, r3, #7
		return NULL;
     6c0:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     6c2:	2900      	cmp	r1, #0
     6c4:	d104      	bne.n	6d0 <at25dfx_chip_write_buffer+0x3b8>
		return &(ports[port_index]->Group[group_index]);
     6c6:	095a      	lsrs	r2, r3, #5
     6c8:	01d2      	lsls	r2, r2, #7
     6ca:	491f      	ldr	r1, [pc, #124]	; (748 <at25dfx_chip_write_buffer+0x430>)
     6cc:	468c      	mov	ip, r1
     6ce:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6d0:	4659      	mov	r1, fp
     6d2:	400b      	ands	r3, r1
     6d4:	0021      	movs	r1, r4
     6d6:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     6d8:	6191      	str	r1, [r2, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     6da:	682b      	ldr	r3, [r5, #0]
     6dc:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     6de:	7e13      	ldrb	r3, [r2, #24]
	while (!spi_is_ready_to_write(chip->spi)) {
     6e0:	4223      	tst	r3, r4
     6e2:	d0fc      	beq.n	6de <at25dfx_chip_write_buffer+0x3c6>
	port_pin_set_output_level(chip->cs_pin, false);
     6e4:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     6e6:	09d9      	lsrs	r1, r3, #7
		return NULL;
     6e8:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     6ea:	2900      	cmp	r1, #0
     6ec:	d104      	bne.n	6f8 <at25dfx_chip_write_buffer+0x3e0>
		return &(ports[port_index]->Group[group_index]);
     6ee:	095a      	lsrs	r2, r3, #5
     6f0:	01d2      	lsls	r2, r2, #7
     6f2:	4915      	ldr	r1, [pc, #84]	; (748 <at25dfx_chip_write_buffer+0x430>)
     6f4:	468c      	mov	ip, r1
     6f6:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6f8:	4659      	mov	r1, fp
     6fa:	400b      	ands	r3, r1
     6fc:	0021      	movs	r1, r4
     6fe:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     700:	6151      	str	r1, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     702:	682b      	ldr	r3, [r5, #0]
     704:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     706:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     708:	4222      	tst	r2, r4
     70a:	d001      	beq.n	710 <at25dfx_chip_write_buffer+0x3f8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     70c:	2205      	movs	r2, #5
     70e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     710:	682b      	ldr	r3, [r5, #0]
     712:	469c      	mov	ip, r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     714:	681a      	ldr	r2, [r3, #0]
     716:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     718:	7e13      	ldrb	r3, [r2, #24]
     71a:	420b      	tst	r3, r1
     71c:	d0fc      	beq.n	718 <at25dfx_chip_write_buffer+0x400>
     71e:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     720:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
     722:	075b      	lsls	r3, r3, #29
     724:	d50b      	bpl.n	73e <at25dfx_chip_write_buffer+0x426>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     726:	8b53      	ldrh	r3, [r2, #26]
     728:	075b      	lsls	r3, r3, #29
     72a:	d501      	bpl.n	730 <at25dfx_chip_write_buffer+0x418>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     72c:	2304      	movs	r3, #4
     72e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     730:	4663      	mov	r3, ip
     732:	799b      	ldrb	r3, [r3, #6]
     734:	2b01      	cmp	r3, #1
     736:	d100      	bne.n	73a <at25dfx_chip_write_buffer+0x422>
     738:	e71b      	b.n	572 <at25dfx_chip_write_buffer+0x25a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     73a:	6a90      	ldr	r0, [r2, #40]	; 0x28
     73c:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_read(chip->spi)) {
     73e:	2104      	movs	r1, #4
     740:	e722      	b.n	588 <at25dfx_chip_write_buffer+0x270>
	return STATUS_OK;
     742:	2000      	movs	r0, #0
     744:	e74d      	b.n	5e2 <at25dfx_chip_write_buffer+0x2ca>
     746:	46c0      	nop			; (mov r8, r8)
     748:	41004400 	.word	0x41004400
     74c:	00002204 	.word	0x00002204
     750:	0000120d 	.word	0x0000120d

00000754 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
     754:	b5f0      	push	{r4, r5, r6, r7, lr}
     756:	b083      	sub	sp, #12
     758:	0004      	movs	r4, r0
     75a:	000e      	movs	r6, r1
     75c:	0015      	movs	r5, r2
	switch (type) {
     75e:	7903      	ldrb	r3, [r0, #4]
     760:	2b09      	cmp	r3, #9
     762:	d900      	bls.n	766 <at25dfx_chip_erase_block+0x12>
     764:	e0f2      	b.n	94c <at25dfx_chip_erase_block+0x1f8>
     766:	009b      	lsls	r3, r3, #2
     768:	4a7b      	ldr	r2, [pc, #492]	; (958 <at25dfx_chip_erase_block+0x204>)
     76a:	58d3      	ldr	r3, [r2, r3]
     76c:	469f      	mov	pc, r3
		return 256 * 1024UL;
     76e:	2380      	movs	r3, #128	; 0x80
     770:	02db      	lsls	r3, r3, #11
     772:	e010      	b.n	796 <at25dfx_chip_erase_block+0x42>
		return 512 * 1024UL;
     774:	2380      	movs	r3, #128	; 0x80
     776:	031b      	lsls	r3, r3, #12
     778:	e00d      	b.n	796 <at25dfx_chip_erase_block+0x42>
		return 1024 * 1024UL;
     77a:	2380      	movs	r3, #128	; 0x80
     77c:	035b      	lsls	r3, r3, #13
     77e:	e00a      	b.n	796 <at25dfx_chip_erase_block+0x42>
		return 2048 * 1024UL;
     780:	2380      	movs	r3, #128	; 0x80
     782:	039b      	lsls	r3, r3, #14
     784:	e007      	b.n	796 <at25dfx_chip_erase_block+0x42>
		return 4096 * 1024UL;
     786:	2380      	movs	r3, #128	; 0x80
     788:	03db      	lsls	r3, r3, #15
     78a:	e004      	b.n	796 <at25dfx_chip_erase_block+0x42>
		return 8192 * 1024UL;
     78c:	2380      	movs	r3, #128	; 0x80
     78e:	041b      	lsls	r3, r3, #16
     790:	e001      	b.n	796 <at25dfx_chip_erase_block+0x42>
		return 64 * 1024UL;
     792:	2380      	movs	r3, #128	; 0x80
     794:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     796:	2017      	movs	r0, #23
	if (address >= _at25dfx_get_device_size(chip->type)) {
     798:	42b3      	cmp	r3, r6
     79a:	d801      	bhi.n	7a0 <at25dfx_chip_erase_block+0x4c>
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
     79c:	b003      	add	sp, #12
     79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     7a0:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
     7a2:	4b6e      	ldr	r3, [pc, #440]	; (95c <at25dfx_chip_erase_block+0x208>)
     7a4:	4798      	blx	r3
	if (module->locked) {
     7a6:	793b      	ldrb	r3, [r7, #4]
     7a8:	2b00      	cmp	r3, #0
     7aa:	d000      	beq.n	7ae <at25dfx_chip_erase_block+0x5a>
     7ac:	e0d0      	b.n	950 <at25dfx_chip_erase_block+0x1fc>
		module->locked = true;
     7ae:	3301      	adds	r3, #1
     7b0:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
     7b2:	4b6b      	ldr	r3, [pc, #428]	; (960 <at25dfx_chip_erase_block+0x20c>)
     7b4:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     7b6:	2306      	movs	r3, #6
     7b8:	466a      	mov	r2, sp
     7ba:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     7bc:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     7be:	09d1      	lsrs	r1, r2, #7
		return NULL;
     7c0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7c2:	2900      	cmp	r1, #0
     7c4:	d104      	bne.n	7d0 <at25dfx_chip_erase_block+0x7c>
		return &(ports[port_index]->Group[group_index]);
     7c6:	0953      	lsrs	r3, r2, #5
     7c8:	01db      	lsls	r3, r3, #7
     7ca:	4966      	ldr	r1, [pc, #408]	; (964 <at25dfx_chip_erase_block+0x210>)
     7cc:	468c      	mov	ip, r1
     7ce:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7d0:	211f      	movs	r1, #31
     7d2:	4011      	ands	r1, r2
     7d4:	2201      	movs	r2, #1
     7d6:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     7d8:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     7da:	2201      	movs	r2, #1
     7dc:	4669      	mov	r1, sp
     7de:	6820      	ldr	r0, [r4, #0]
     7e0:	4b61      	ldr	r3, [pc, #388]	; (968 <at25dfx_chip_erase_block+0x214>)
     7e2:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     7e4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     7e6:	09d1      	lsrs	r1, r2, #7
		return NULL;
     7e8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7ea:	2900      	cmp	r1, #0
     7ec:	d104      	bne.n	7f8 <at25dfx_chip_erase_block+0xa4>
		return &(ports[port_index]->Group[group_index]);
     7ee:	0953      	lsrs	r3, r2, #5
     7f0:	01db      	lsls	r3, r3, #7
     7f2:	495c      	ldr	r1, [pc, #368]	; (964 <at25dfx_chip_erase_block+0x210>)
     7f4:	468c      	mov	ip, r1
     7f6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7f8:	211f      	movs	r1, #31
     7fa:	4011      	ands	r1, r2
     7fc:	2201      	movs	r2, #1
     7fe:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     800:	619a      	str	r2, [r3, #24]
	switch (block_size) {
     802:	2d01      	cmp	r5, #1
     804:	d006      	beq.n	814 <at25dfx_chip_erase_block+0xc0>
     806:	2d00      	cmp	r5, #0
     808:	d063      	beq.n	8d2 <at25dfx_chip_erase_block+0x17e>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
     80a:	23d8      	movs	r3, #216	; 0xd8
	switch (block_size) {
     80c:	2d02      	cmp	r5, #2
     80e:	d002      	beq.n	816 <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = (enum at25dfx_command_opcode)0;
     810:	2300      	movs	r3, #0
     812:	e000      	b.n	816 <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
     814:	2352      	movs	r3, #82	; 0x52
	cmd_buffer[0] = cmd.opcode;
     816:	466a      	mov	r2, sp
     818:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     81a:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     81c:	0a33      	lsrs	r3, r6, #8
     81e:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     820:	0c36      	lsrs	r6, r6, #16
     822:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     824:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     826:	09d1      	lsrs	r1, r2, #7
		return NULL;
     828:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     82a:	2900      	cmp	r1, #0
     82c:	d104      	bne.n	838 <at25dfx_chip_erase_block+0xe4>
		return &(ports[port_index]->Group[group_index]);
     82e:	0953      	lsrs	r3, r2, #5
     830:	01db      	lsls	r3, r3, #7
     832:	494c      	ldr	r1, [pc, #304]	; (964 <at25dfx_chip_erase_block+0x210>)
     834:	468c      	mov	ip, r1
     836:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     838:	211f      	movs	r1, #31
     83a:	4011      	ands	r1, r2
     83c:	2201      	movs	r2, #1
     83e:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     840:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     842:	2204      	movs	r2, #4
     844:	4669      	mov	r1, sp
     846:	6820      	ldr	r0, [r4, #0]
     848:	4b47      	ldr	r3, [pc, #284]	; (968 <at25dfx_chip_erase_block+0x214>)
     84a:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     84c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     84e:	09d1      	lsrs	r1, r2, #7
		return NULL;
     850:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     852:	2900      	cmp	r1, #0
     854:	d104      	bne.n	860 <at25dfx_chip_erase_block+0x10c>
		return &(ports[port_index]->Group[group_index]);
     856:	0953      	lsrs	r3, r2, #5
     858:	01db      	lsls	r3, r3, #7
     85a:	4942      	ldr	r1, [pc, #264]	; (964 <at25dfx_chip_erase_block+0x210>)
     85c:	468c      	mov	ip, r1
     85e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     860:	211f      	movs	r1, #31
     862:	4011      	ands	r1, r2
     864:	2201      	movs	r2, #1
     866:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     868:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     86a:	6823      	ldr	r3, [r4, #0]
     86c:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
     86e:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     870:	7e0b      	ldrb	r3, [r1, #24]
     872:	4213      	tst	r3, r2
     874:	d0fc      	beq.n	870 <at25dfx_chip_erase_block+0x11c>
	port_pin_set_output_level(chip->cs_pin, false);
     876:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     878:	09d1      	lsrs	r1, r2, #7
		return NULL;
     87a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     87c:	2900      	cmp	r1, #0
     87e:	d104      	bne.n	88a <at25dfx_chip_erase_block+0x136>
		return &(ports[port_index]->Group[group_index]);
     880:	0953      	lsrs	r3, r2, #5
     882:	01db      	lsls	r3, r3, #7
     884:	4937      	ldr	r1, [pc, #220]	; (964 <at25dfx_chip_erase_block+0x210>)
     886:	468c      	mov	ip, r1
     888:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     88a:	211f      	movs	r1, #31
     88c:	4011      	ands	r1, r2
     88e:	2201      	movs	r2, #1
     890:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     892:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     894:	6823      	ldr	r3, [r4, #0]
     896:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     898:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     89a:	07d2      	lsls	r2, r2, #31
     89c:	d501      	bpl.n	8a2 <at25dfx_chip_erase_block+0x14e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     89e:	2205      	movs	r2, #5
     8a0:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     8a2:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     8a4:	6802      	ldr	r2, [r0, #0]
     8a6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     8a8:	7e13      	ldrb	r3, [r2, #24]
     8aa:	420b      	tst	r3, r1
     8ac:	d0fc      	beq.n	8a8 <at25dfx_chip_erase_block+0x154>
     8ae:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     8b0:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
     8b2:	075b      	lsls	r3, r3, #29
     8b4:	d509      	bpl.n	8ca <at25dfx_chip_erase_block+0x176>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     8b6:	8b53      	ldrh	r3, [r2, #26]
     8b8:	075b      	lsls	r3, r3, #29
     8ba:	d501      	bpl.n	8c0 <at25dfx_chip_erase_block+0x16c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     8bc:	2304      	movs	r3, #4
     8be:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8c0:	7983      	ldrb	r3, [r0, #6]
     8c2:	2b01      	cmp	r3, #1
     8c4:	d007      	beq.n	8d6 <at25dfx_chip_erase_block+0x182>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     8c6:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8c8:	b2ed      	uxtb	r5, r5
		while (!spi_is_ready_to_write(chip->spi)) {
     8ca:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     8cc:	2700      	movs	r7, #0
		while (!spi_is_ready_to_read(chip->spi)) {
     8ce:	2004      	movs	r0, #4
     8d0:	e00c      	b.n	8ec <at25dfx_chip_erase_block+0x198>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
     8d2:	2320      	movs	r3, #32
     8d4:	e79f      	b.n	816 <at25dfx_chip_erase_block+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     8d6:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8d8:	05ed      	lsls	r5, r5, #23
     8da:	0ded      	lsrs	r5, r5, #23
     8dc:	e7f5      	b.n	8ca <at25dfx_chip_erase_block+0x176>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8de:	79b3      	ldrb	r3, [r6, #6]
     8e0:	2b01      	cmp	r3, #1
     8e2:	d019      	beq.n	918 <at25dfx_chip_erase_block+0x1c4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     8e4:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8e6:	b2ed      	uxtb	r5, r5
	} while (status_reg & AT25DFX_STATUS_BUSY);
     8e8:	4229      	tst	r1, r5
     8ea:	d019      	beq.n	920 <at25dfx_chip_erase_block+0x1cc>
	SercomSpi *const spi_module = &(module->hw->SPI);
     8ec:	6823      	ldr	r3, [r4, #0]
     8ee:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8f0:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     8f2:	420b      	tst	r3, r1
     8f4:	d0fc      	beq.n	8f0 <at25dfx_chip_erase_block+0x19c>
     8f6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     8f8:	420b      	tst	r3, r1
     8fa:	d000      	beq.n	8fe <at25dfx_chip_erase_block+0x1aa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     8fc:	6297      	str	r7, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     8fe:	6826      	ldr	r6, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     900:	6832      	ldr	r2, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     902:	7e13      	ldrb	r3, [r2, #24]
     904:	4203      	tst	r3, r0
     906:	d0fc      	beq.n	902 <at25dfx_chip_erase_block+0x1ae>
     908:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     90a:	4203      	tst	r3, r0
     90c:	d0ec      	beq.n	8e8 <at25dfx_chip_erase_block+0x194>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     90e:	8b53      	ldrh	r3, [r2, #26]
     910:	4203      	tst	r3, r0
     912:	d0e4      	beq.n	8de <at25dfx_chip_erase_block+0x18a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     914:	8350      	strh	r0, [r2, #26]
     916:	e7e2      	b.n	8de <at25dfx_chip_erase_block+0x18a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     918:	6a95      	ldr	r5, [r2, #40]	; 0x28
     91a:	05ed      	lsls	r5, r5, #23
     91c:	0ded      	lsrs	r5, r5, #23
     91e:	e7e3      	b.n	8e8 <at25dfx_chip_erase_block+0x194>
	port_pin_set_output_level(chip->cs_pin, true);
     920:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     922:	09d1      	lsrs	r1, r2, #7
		return NULL;
     924:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     926:	2900      	cmp	r1, #0
     928:	d104      	bne.n	934 <at25dfx_chip_erase_block+0x1e0>
		return &(ports[port_index]->Group[group_index]);
     92a:	0953      	lsrs	r3, r2, #5
     92c:	01db      	lsls	r3, r3, #7
     92e:	490d      	ldr	r1, [pc, #52]	; (964 <at25dfx_chip_erase_block+0x210>)
     930:	468c      	mov	ip, r1
     932:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     934:	211f      	movs	r1, #31
     936:	4011      	ands	r1, r2
     938:	2201      	movs	r2, #1
     93a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     93c:	619a      	str	r2, [r3, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
     93e:	06a8      	lsls	r0, r5, #26
	return STATUS_OK;
     940:	0fc0      	lsrs	r0, r0, #31
     942:	0100      	lsls	r0, r0, #4
	_at25dfx_spi_unlock(chip->spi);
     944:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     946:	2200      	movs	r2, #0
     948:	711a      	strb	r2, [r3, #4]
	return status;
     94a:	e727      	b.n	79c <at25dfx_chip_erase_block+0x48>
		return STATUS_ERR_INVALID_ARG;
     94c:	2017      	movs	r0, #23
     94e:	e725      	b.n	79c <at25dfx_chip_erase_block+0x48>
     950:	4b03      	ldr	r3, [pc, #12]	; (960 <at25dfx_chip_erase_block+0x20c>)
     952:	4798      	blx	r3
		return status;
     954:	2005      	movs	r0, #5
     956:	e721      	b.n	79c <at25dfx_chip_erase_block+0x48>
     958:	00002230 	.word	0x00002230
     95c:	00001579 	.word	0x00001579
     960:	000015b9 	.word	0x000015b9
     964:	41004400 	.word	0x41004400
     968:	0000120d 	.word	0x0000120d

0000096c <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
     96c:	b570      	push	{r4, r5, r6, lr}
     96e:	b082      	sub	sp, #8
     970:	0004      	movs	r4, r0
     972:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     974:	6806      	ldr	r6, [r0, #0]
	cpu_irq_enter_critical();
     976:	4b35      	ldr	r3, [pc, #212]	; (a4c <at25dfx_chip_set_global_sector_protect+0xe0>)
     978:	4798      	blx	r3
	if (module->locked) {
     97a:	7933      	ldrb	r3, [r6, #4]
     97c:	2b00      	cmp	r3, #0
     97e:	d160      	bne.n	a42 <at25dfx_chip_set_global_sector_protect+0xd6>
		module->locked = true;
     980:	3301      	adds	r3, #1
     982:	7133      	strb	r3, [r6, #4]
	cpu_irq_leave_critical();
     984:	4b32      	ldr	r3, [pc, #200]	; (a50 <at25dfx_chip_set_global_sector_protect+0xe4>)
     986:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     988:	2306      	movs	r3, #6
     98a:	466a      	mov	r2, sp
     98c:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     98e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     990:	09d1      	lsrs	r1, r2, #7
		return NULL;
     992:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     994:	2900      	cmp	r1, #0
     996:	d104      	bne.n	9a2 <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
     998:	0953      	lsrs	r3, r2, #5
     99a:	01db      	lsls	r3, r3, #7
     99c:	492d      	ldr	r1, [pc, #180]	; (a54 <at25dfx_chip_set_global_sector_protect+0xe8>)
     99e:	468c      	mov	ip, r1
     9a0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9a2:	211f      	movs	r1, #31
     9a4:	4011      	ands	r1, r2
     9a6:	2201      	movs	r2, #1
     9a8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     9aa:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     9ac:	2201      	movs	r2, #1
     9ae:	4669      	mov	r1, sp
     9b0:	6820      	ldr	r0, [r4, #0]
     9b2:	4b29      	ldr	r3, [pc, #164]	; (a58 <at25dfx_chip_set_global_sector_protect+0xec>)
     9b4:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     9b6:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     9b8:	09d1      	lsrs	r1, r2, #7
		return NULL;
     9ba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9bc:	2900      	cmp	r1, #0
     9be:	d104      	bne.n	9ca <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
     9c0:	0953      	lsrs	r3, r2, #5
     9c2:	01db      	lsls	r3, r3, #7
     9c4:	4923      	ldr	r1, [pc, #140]	; (a54 <at25dfx_chip_set_global_sector_protect+0xe8>)
     9c6:	468c      	mov	ip, r1
     9c8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9ca:	211f      	movs	r1, #31
     9cc:	4011      	ands	r1, r2
     9ce:	2201      	movs	r2, #1
     9d0:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     9d2:	619a      	str	r2, [r3, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
     9d4:	233c      	movs	r3, #60	; 0x3c
     9d6:	1e6a      	subs	r2, r5, #1
     9d8:	4195      	sbcs	r5, r2
     9da:	426d      	negs	r5, r5
     9dc:	402b      	ands	r3, r5
     9de:	466a      	mov	r2, sp
     9e0:	71d3      	strb	r3, [r2, #7]
	cmd_buffer[0] = cmd.opcode;
     9e2:	2301      	movs	r3, #1
     9e4:	466a      	mov	r2, sp
     9e6:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     9e8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     9ea:	09d1      	lsrs	r1, r2, #7
		return NULL;
     9ec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9ee:	2900      	cmp	r1, #0
     9f0:	d104      	bne.n	9fc <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
     9f2:	0953      	lsrs	r3, r2, #5
     9f4:	01db      	lsls	r3, r3, #7
     9f6:	4917      	ldr	r1, [pc, #92]	; (a54 <at25dfx_chip_set_global_sector_protect+0xe8>)
     9f8:	468c      	mov	ip, r1
     9fa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9fc:	211f      	movs	r1, #31
     9fe:	4011      	ands	r1, r2
     a00:	2201      	movs	r2, #1
     a02:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     a04:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     a06:	2201      	movs	r2, #1
     a08:	4669      	mov	r1, sp
     a0a:	6820      	ldr	r0, [r4, #0]
     a0c:	4d12      	ldr	r5, [pc, #72]	; (a58 <at25dfx_chip_set_global_sector_protect+0xec>)
     a0e:	47a8      	blx	r5
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     a10:	2201      	movs	r2, #1
     a12:	466b      	mov	r3, sp
     a14:	1dd9      	adds	r1, r3, #7
     a16:	6820      	ldr	r0, [r4, #0]
     a18:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
     a1a:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     a1c:	09d1      	lsrs	r1, r2, #7
		return NULL;
     a1e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     a20:	2900      	cmp	r1, #0
     a22:	d104      	bne.n	a2e <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
     a24:	0953      	lsrs	r3, r2, #5
     a26:	01db      	lsls	r3, r3, #7
     a28:	490a      	ldr	r1, [pc, #40]	; (a54 <at25dfx_chip_set_global_sector_protect+0xe8>)
     a2a:	468c      	mov	ip, r1
     a2c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a2e:	211f      	movs	r1, #31
     a30:	4011      	ands	r1, r2
     a32:	2201      	movs	r2, #1
     a34:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     a36:	619a      	str	r2, [r3, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     a38:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     a3a:	2200      	movs	r2, #0
     a3c:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     a3e:	2000      	movs	r0, #0
     a40:	e002      	b.n	a48 <at25dfx_chip_set_global_sector_protect+0xdc>
     a42:	4b03      	ldr	r3, [pc, #12]	; (a50 <at25dfx_chip_set_global_sector_protect+0xe4>)
     a44:	4798      	blx	r3
		return status;
     a46:	2005      	movs	r0, #5
}
     a48:	b002      	add	sp, #8
     a4a:	bd70      	pop	{r4, r5, r6, pc}
     a4c:	00001579 	.word	0x00001579
     a50:	000015b9 	.word	0x000015b9
     a54:	41004400 	.word	0x41004400
     a58:	0000120d 	.word	0x0000120d

00000a5c <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
     a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5e:	b083      	sub	sp, #12
     a60:	0004      	movs	r4, r0
     a62:	000e      	movs	r6, r1
     a64:	0015      	movs	r5, r2
	switch (type) {
     a66:	7903      	ldrb	r3, [r0, #4]
     a68:	2b09      	cmp	r3, #9
     a6a:	d900      	bls.n	a6e <at25dfx_chip_set_sector_protect+0x12>
     a6c:	e07f      	b.n	b6e <at25dfx_chip_set_sector_protect+0x112>
     a6e:	009b      	lsls	r3, r3, #2
     a70:	4a42      	ldr	r2, [pc, #264]	; (b7c <at25dfx_chip_set_sector_protect+0x120>)
     a72:	58d3      	ldr	r3, [r2, r3]
     a74:	469f      	mov	pc, r3
		return 256 * 1024UL;
     a76:	2380      	movs	r3, #128	; 0x80
     a78:	02db      	lsls	r3, r3, #11
     a7a:	e010      	b.n	a9e <at25dfx_chip_set_sector_protect+0x42>
		return 512 * 1024UL;
     a7c:	2380      	movs	r3, #128	; 0x80
     a7e:	031b      	lsls	r3, r3, #12
     a80:	e00d      	b.n	a9e <at25dfx_chip_set_sector_protect+0x42>
		return 1024 * 1024UL;
     a82:	2380      	movs	r3, #128	; 0x80
     a84:	035b      	lsls	r3, r3, #13
     a86:	e00a      	b.n	a9e <at25dfx_chip_set_sector_protect+0x42>
		return 2048 * 1024UL;
     a88:	2380      	movs	r3, #128	; 0x80
     a8a:	039b      	lsls	r3, r3, #14
     a8c:	e007      	b.n	a9e <at25dfx_chip_set_sector_protect+0x42>
		return 4096 * 1024UL;
     a8e:	2380      	movs	r3, #128	; 0x80
     a90:	03db      	lsls	r3, r3, #15
     a92:	e004      	b.n	a9e <at25dfx_chip_set_sector_protect+0x42>
		return 8192 * 1024UL;
     a94:	2380      	movs	r3, #128	; 0x80
     a96:	041b      	lsls	r3, r3, #16
     a98:	e001      	b.n	a9e <at25dfx_chip_set_sector_protect+0x42>
		return 64 * 1024UL;
     a9a:	2380      	movs	r3, #128	; 0x80
     a9c:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     a9e:	2017      	movs	r0, #23
	if ((address) >= _at25dfx_get_device_size(chip->type)) {
     aa0:	42b3      	cmp	r3, r6
     aa2:	d801      	bhi.n	aa8 <at25dfx_chip_set_sector_protect+0x4c>
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
     aa4:	b003      	add	sp, #12
     aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     aa8:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
     aaa:	4b35      	ldr	r3, [pc, #212]	; (b80 <at25dfx_chip_set_sector_protect+0x124>)
     aac:	4798      	blx	r3
	if (module->locked) {
     aae:	793b      	ldrb	r3, [r7, #4]
     ab0:	2b00      	cmp	r3, #0
     ab2:	d15e      	bne.n	b72 <at25dfx_chip_set_sector_protect+0x116>
		module->locked = true;
     ab4:	3301      	adds	r3, #1
     ab6:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
     ab8:	4b32      	ldr	r3, [pc, #200]	; (b84 <at25dfx_chip_set_sector_protect+0x128>)
     aba:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     abc:	2306      	movs	r3, #6
     abe:	466a      	mov	r2, sp
     ac0:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     ac2:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     ac4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     ac6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     ac8:	2900      	cmp	r1, #0
     aca:	d104      	bne.n	ad6 <at25dfx_chip_set_sector_protect+0x7a>
		return &(ports[port_index]->Group[group_index]);
     acc:	0953      	lsrs	r3, r2, #5
     ace:	01db      	lsls	r3, r3, #7
     ad0:	492d      	ldr	r1, [pc, #180]	; (b88 <at25dfx_chip_set_sector_protect+0x12c>)
     ad2:	468c      	mov	ip, r1
     ad4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ad6:	211f      	movs	r1, #31
     ad8:	4011      	ands	r1, r2
     ada:	2201      	movs	r2, #1
     adc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     ade:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     ae0:	2201      	movs	r2, #1
     ae2:	4669      	mov	r1, sp
     ae4:	6820      	ldr	r0, [r4, #0]
     ae6:	4b29      	ldr	r3, [pc, #164]	; (b8c <at25dfx_chip_set_sector_protect+0x130>)
     ae8:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     aea:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     aec:	09d1      	lsrs	r1, r2, #7
		return NULL;
     aee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     af0:	2900      	cmp	r1, #0
     af2:	d104      	bne.n	afe <at25dfx_chip_set_sector_protect+0xa2>
		return &(ports[port_index]->Group[group_index]);
     af4:	0953      	lsrs	r3, r2, #5
     af6:	01db      	lsls	r3, r3, #7
     af8:	4923      	ldr	r1, [pc, #140]	; (b88 <at25dfx_chip_set_sector_protect+0x12c>)
     afa:	468c      	mov	ip, r1
     afc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     afe:	211f      	movs	r1, #31
     b00:	4011      	ands	r1, r2
     b02:	2201      	movs	r2, #1
     b04:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     b06:	619a      	str	r2, [r3, #24]
	cmd.opcode = protect ?
     b08:	2336      	movs	r3, #54	; 0x36
     b0a:	2d00      	cmp	r5, #0
     b0c:	d100      	bne.n	b10 <at25dfx_chip_set_sector_protect+0xb4>
     b0e:	3303      	adds	r3, #3
	cmd_buffer[0] = cmd.opcode;
     b10:	466a      	mov	r2, sp
     b12:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     b14:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     b16:	0a33      	lsrs	r3, r6, #8
     b18:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     b1a:	0c36      	lsrs	r6, r6, #16
     b1c:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     b1e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     b20:	09d1      	lsrs	r1, r2, #7
		return NULL;
     b22:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     b24:	2900      	cmp	r1, #0
     b26:	d104      	bne.n	b32 <at25dfx_chip_set_sector_protect+0xd6>
		return &(ports[port_index]->Group[group_index]);
     b28:	0953      	lsrs	r3, r2, #5
     b2a:	01db      	lsls	r3, r3, #7
     b2c:	4916      	ldr	r1, [pc, #88]	; (b88 <at25dfx_chip_set_sector_protect+0x12c>)
     b2e:	468c      	mov	ip, r1
     b30:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b32:	211f      	movs	r1, #31
     b34:	4011      	ands	r1, r2
     b36:	2201      	movs	r2, #1
     b38:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     b3a:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     b3c:	2204      	movs	r2, #4
     b3e:	4669      	mov	r1, sp
     b40:	6820      	ldr	r0, [r4, #0]
     b42:	4b12      	ldr	r3, [pc, #72]	; (b8c <at25dfx_chip_set_sector_protect+0x130>)
     b44:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     b46:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     b48:	09d1      	lsrs	r1, r2, #7
		return NULL;
     b4a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     b4c:	2900      	cmp	r1, #0
     b4e:	d104      	bne.n	b5a <at25dfx_chip_set_sector_protect+0xfe>
		return &(ports[port_index]->Group[group_index]);
     b50:	0953      	lsrs	r3, r2, #5
     b52:	01db      	lsls	r3, r3, #7
     b54:	490c      	ldr	r1, [pc, #48]	; (b88 <at25dfx_chip_set_sector_protect+0x12c>)
     b56:	468c      	mov	ip, r1
     b58:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b5a:	211f      	movs	r1, #31
     b5c:	4011      	ands	r1, r2
     b5e:	2201      	movs	r2, #1
     b60:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     b62:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
     b64:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     b66:	2200      	movs	r2, #0
     b68:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
     b6a:	2000      	movs	r0, #0
     b6c:	e79a      	b.n	aa4 <at25dfx_chip_set_sector_protect+0x48>
		return STATUS_ERR_INVALID_ARG;
     b6e:	2017      	movs	r0, #23
     b70:	e798      	b.n	aa4 <at25dfx_chip_set_sector_protect+0x48>
     b72:	4b04      	ldr	r3, [pc, #16]	; (b84 <at25dfx_chip_set_sector_protect+0x128>)
     b74:	4798      	blx	r3
		return status;
     b76:	2005      	movs	r0, #5
     b78:	e794      	b.n	aa4 <at25dfx_chip_set_sector_protect+0x48>
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	00002258 	.word	0x00002258
     b80:	00001579 	.word	0x00001579
     b84:	000015b9 	.word	0x000015b9
     b88:	41004400 	.word	0x41004400
     b8c:	0000120d 	.word	0x0000120d

00000b90 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
     b90:	b530      	push	{r4, r5, lr}
     b92:	b083      	sub	sp, #12
     b94:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     b96:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
     b98:	4b1c      	ldr	r3, [pc, #112]	; (c0c <at25dfx_chip_sleep+0x7c>)
     b9a:	4798      	blx	r3
	if (module->locked) {
     b9c:	792b      	ldrb	r3, [r5, #4]
     b9e:	2b00      	cmp	r3, #0
     ba0:	d12e      	bne.n	c00 <at25dfx_chip_sleep+0x70>
		module->locked = true;
     ba2:	3301      	adds	r3, #1
     ba4:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     ba6:	4b1a      	ldr	r3, [pc, #104]	; (c10 <at25dfx_chip_sleep+0x80>)
     ba8:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     baa:	23b9      	movs	r3, #185	; 0xb9
     bac:	466a      	mov	r2, sp
     bae:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     bb0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     bb2:	09d1      	lsrs	r1, r2, #7
		return NULL;
     bb4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     bb6:	2900      	cmp	r1, #0
     bb8:	d104      	bne.n	bc4 <at25dfx_chip_sleep+0x34>
		return &(ports[port_index]->Group[group_index]);
     bba:	0953      	lsrs	r3, r2, #5
     bbc:	01db      	lsls	r3, r3, #7
     bbe:	4915      	ldr	r1, [pc, #84]	; (c14 <at25dfx_chip_sleep+0x84>)
     bc0:	468c      	mov	ip, r1
     bc2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     bc4:	211f      	movs	r1, #31
     bc6:	4011      	ands	r1, r2
     bc8:	2201      	movs	r2, #1
     bca:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     bcc:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     bce:	2201      	movs	r2, #1
     bd0:	4669      	mov	r1, sp
     bd2:	6820      	ldr	r0, [r4, #0]
     bd4:	4b10      	ldr	r3, [pc, #64]	; (c18 <at25dfx_chip_sleep+0x88>)
     bd6:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     bd8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     bda:	09d1      	lsrs	r1, r2, #7
		return NULL;
     bdc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     bde:	2900      	cmp	r1, #0
     be0:	d104      	bne.n	bec <at25dfx_chip_sleep+0x5c>
		return &(ports[port_index]->Group[group_index]);
     be2:	0953      	lsrs	r3, r2, #5
     be4:	01db      	lsls	r3, r3, #7
     be6:	490b      	ldr	r1, [pc, #44]	; (c14 <at25dfx_chip_sleep+0x84>)
     be8:	468c      	mov	ip, r1
     bea:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     bec:	211f      	movs	r1, #31
     bee:	4011      	ands	r1, r2
     bf0:	2201      	movs	r2, #1
     bf2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     bf4:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     bf6:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     bf8:	2200      	movs	r2, #0
     bfa:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     bfc:	2000      	movs	r0, #0
     bfe:	e002      	b.n	c06 <at25dfx_chip_sleep+0x76>
     c00:	4b03      	ldr	r3, [pc, #12]	; (c10 <at25dfx_chip_sleep+0x80>)
     c02:	4798      	blx	r3
		return status;
     c04:	2005      	movs	r0, #5
}
     c06:	b003      	add	sp, #12
     c08:	bd30      	pop	{r4, r5, pc}
     c0a:	46c0      	nop			; (mov r8, r8)
     c0c:	00001579 	.word	0x00001579
     c10:	000015b9 	.word	0x000015b9
     c14:	41004400 	.word	0x41004400
     c18:	0000120d 	.word	0x0000120d

00000c1c <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     c1c:	b530      	push	{r4, r5, lr}
     c1e:	b083      	sub	sp, #12
     c20:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     c22:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
     c24:	4b1c      	ldr	r3, [pc, #112]	; (c98 <at25dfx_chip_wake+0x7c>)
     c26:	4798      	blx	r3
	if (module->locked) {
     c28:	792b      	ldrb	r3, [r5, #4]
     c2a:	2b00      	cmp	r3, #0
     c2c:	d12e      	bne.n	c8c <at25dfx_chip_wake+0x70>
		module->locked = true;
     c2e:	3301      	adds	r3, #1
     c30:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     c32:	4b1a      	ldr	r3, [pc, #104]	; (c9c <at25dfx_chip_wake+0x80>)
     c34:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     c36:	23ab      	movs	r3, #171	; 0xab
     c38:	466a      	mov	r2, sp
     c3a:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     c3c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     c3e:	09d1      	lsrs	r1, r2, #7
		return NULL;
     c40:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c42:	2900      	cmp	r1, #0
     c44:	d104      	bne.n	c50 <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
     c46:	0953      	lsrs	r3, r2, #5
     c48:	01db      	lsls	r3, r3, #7
     c4a:	4915      	ldr	r1, [pc, #84]	; (ca0 <at25dfx_chip_wake+0x84>)
     c4c:	468c      	mov	ip, r1
     c4e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c50:	211f      	movs	r1, #31
     c52:	4011      	ands	r1, r2
     c54:	2201      	movs	r2, #1
     c56:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     c58:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     c5a:	2201      	movs	r2, #1
     c5c:	4669      	mov	r1, sp
     c5e:	6820      	ldr	r0, [r4, #0]
     c60:	4b10      	ldr	r3, [pc, #64]	; (ca4 <at25dfx_chip_wake+0x88>)
     c62:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     c64:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     c66:	09d1      	lsrs	r1, r2, #7
		return NULL;
     c68:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c6a:	2900      	cmp	r1, #0
     c6c:	d104      	bne.n	c78 <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
     c6e:	0953      	lsrs	r3, r2, #5
     c70:	01db      	lsls	r3, r3, #7
     c72:	490b      	ldr	r1, [pc, #44]	; (ca0 <at25dfx_chip_wake+0x84>)
     c74:	468c      	mov	ip, r1
     c76:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c78:	211f      	movs	r1, #31
     c7a:	4011      	ands	r1, r2
     c7c:	2201      	movs	r2, #1
     c7e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     c80:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     c82:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     c84:	2200      	movs	r2, #0
     c86:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     c88:	2000      	movs	r0, #0
     c8a:	e002      	b.n	c92 <at25dfx_chip_wake+0x76>
     c8c:	4b03      	ldr	r3, [pc, #12]	; (c9c <at25dfx_chip_wake+0x80>)
     c8e:	4798      	blx	r3
		return status;
     c90:	2005      	movs	r0, #5
     c92:	b003      	add	sp, #12
     c94:	bd30      	pop	{r4, r5, pc}
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	00001579 	.word	0x00001579
     c9c:	000015b9 	.word	0x000015b9
     ca0:	41004400 	.word	0x41004400
     ca4:	0000120d 	.word	0x0000120d

00000ca8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     ca8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     caa:	0080      	lsls	r0, r0, #2
     cac:	4b16      	ldr	r3, [pc, #88]	; (d08 <_tc_interrupt_handler+0x60>)
     cae:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     cb0:	6823      	ldr	r3, [r4, #0]
     cb2:	7b9d      	ldrb	r5, [r3, #14]
     cb4:	7e22      	ldrb	r2, [r4, #24]
     cb6:	7e63      	ldrb	r3, [r4, #25]
     cb8:	4013      	ands	r3, r2
     cba:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     cbc:	07eb      	lsls	r3, r5, #31
     cbe:	d406      	bmi.n	cce <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     cc0:	07ab      	lsls	r3, r5, #30
     cc2:	d40b      	bmi.n	cdc <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     cc4:	06eb      	lsls	r3, r5, #27
     cc6:	d410      	bmi.n	cea <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     cc8:	06ab      	lsls	r3, r5, #26
     cca:	d415      	bmi.n	cf8 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     ccc:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     cce:	0020      	movs	r0, r4
     cd0:	68a3      	ldr	r3, [r4, #8]
     cd2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     cd4:	2301      	movs	r3, #1
     cd6:	6822      	ldr	r2, [r4, #0]
     cd8:	7393      	strb	r3, [r2, #14]
     cda:	e7f1      	b.n	cc0 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     cdc:	0020      	movs	r0, r4
     cde:	68e3      	ldr	r3, [r4, #12]
     ce0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     ce2:	2302      	movs	r3, #2
     ce4:	6822      	ldr	r2, [r4, #0]
     ce6:	7393      	strb	r3, [r2, #14]
     ce8:	e7ec      	b.n	cc4 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     cea:	0020      	movs	r0, r4
     cec:	6923      	ldr	r3, [r4, #16]
     cee:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     cf0:	2310      	movs	r3, #16
     cf2:	6822      	ldr	r2, [r4, #0]
     cf4:	7393      	strb	r3, [r2, #14]
     cf6:	e7e7      	b.n	cc8 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     cf8:	0020      	movs	r0, r4
     cfa:	6963      	ldr	r3, [r4, #20]
     cfc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     cfe:	6823      	ldr	r3, [r4, #0]
     d00:	2220      	movs	r2, #32
     d02:	739a      	strb	r2, [r3, #14]
}
     d04:	e7e2      	b.n	ccc <_tc_interrupt_handler+0x24>
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	20000074 	.word	0x20000074

00000d0c <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     d0c:	b510      	push	{r4, lr}
     d0e:	2000      	movs	r0, #0
     d10:	4b01      	ldr	r3, [pc, #4]	; (d18 <TC3_Handler+0xc>)
     d12:	4798      	blx	r3
     d14:	bd10      	pop	{r4, pc}
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	00000ca9 	.word	0x00000ca9

00000d1c <TC4_Handler>:
     d1c:	b510      	push	{r4, lr}
     d1e:	2001      	movs	r0, #1
     d20:	4b01      	ldr	r3, [pc, #4]	; (d28 <TC4_Handler+0xc>)
     d22:	4798      	blx	r3
     d24:	bd10      	pop	{r4, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	00000ca9 	.word	0x00000ca9

00000d2c <TC5_Handler>:
     d2c:	b510      	push	{r4, lr}
     d2e:	2002      	movs	r0, #2
     d30:	4b01      	ldr	r3, [pc, #4]	; (d38 <TC5_Handler+0xc>)
     d32:	4798      	blx	r3
     d34:	bd10      	pop	{r4, pc}
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	00000ca9 	.word	0x00000ca9

00000d3c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     d3c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     d3e:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d40:	2340      	movs	r3, #64	; 0x40
     d42:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     d44:	4281      	cmp	r1, r0
     d46:	d202      	bcs.n	d4e <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     d48:	0018      	movs	r0, r3
     d4a:	bd10      	pop	{r4, pc}
		baud_calculated++;
     d4c:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     d4e:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     d50:	1c63      	adds	r3, r4, #1
     d52:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     d54:	4288      	cmp	r0, r1
     d56:	d9f9      	bls.n	d4c <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d58:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     d5a:	2cff      	cmp	r4, #255	; 0xff
     d5c:	d8f4      	bhi.n	d48 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     d5e:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     d60:	2300      	movs	r3, #0
     d62:	e7f1      	b.n	d48 <_sercom_get_sync_baud_val+0xc>

00000d64 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     d64:	b510      	push	{r4, lr}
     d66:	b082      	sub	sp, #8
     d68:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     d6a:	4b0e      	ldr	r3, [pc, #56]	; (da4 <sercom_set_gclk_generator+0x40>)
     d6c:	781b      	ldrb	r3, [r3, #0]
     d6e:	2b00      	cmp	r3, #0
     d70:	d007      	beq.n	d82 <sercom_set_gclk_generator+0x1e>
     d72:	2900      	cmp	r1, #0
     d74:	d105      	bne.n	d82 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     d76:	4b0b      	ldr	r3, [pc, #44]	; (da4 <sercom_set_gclk_generator+0x40>)
     d78:	785b      	ldrb	r3, [r3, #1]
     d7a:	4283      	cmp	r3, r0
     d7c:	d010      	beq.n	da0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     d7e:	201d      	movs	r0, #29
     d80:	e00c      	b.n	d9c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     d82:	a901      	add	r1, sp, #4
     d84:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     d86:	2013      	movs	r0, #19
     d88:	4b07      	ldr	r3, [pc, #28]	; (da8 <sercom_set_gclk_generator+0x44>)
     d8a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     d8c:	2013      	movs	r0, #19
     d8e:	4b07      	ldr	r3, [pc, #28]	; (dac <sercom_set_gclk_generator+0x48>)
     d90:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     d92:	4b04      	ldr	r3, [pc, #16]	; (da4 <sercom_set_gclk_generator+0x40>)
     d94:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     d96:	2201      	movs	r2, #1
     d98:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     d9a:	2000      	movs	r0, #0
}
     d9c:	b002      	add	sp, #8
     d9e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     da0:	2000      	movs	r0, #0
     da2:	e7fb      	b.n	d9c <sercom_set_gclk_generator+0x38>
     da4:	2000002c 	.word	0x2000002c
     da8:	00001c89 	.word	0x00001c89
     dac:	00001bfd 	.word	0x00001bfd

00000db0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     db0:	4b40      	ldr	r3, [pc, #256]	; (eb4 <_sercom_get_default_pad+0x104>)
     db2:	4298      	cmp	r0, r3
     db4:	d031      	beq.n	e1a <_sercom_get_default_pad+0x6a>
     db6:	d90a      	bls.n	dce <_sercom_get_default_pad+0x1e>
     db8:	4b3f      	ldr	r3, [pc, #252]	; (eb8 <_sercom_get_default_pad+0x108>)
     dba:	4298      	cmp	r0, r3
     dbc:	d04d      	beq.n	e5a <_sercom_get_default_pad+0xaa>
     dbe:	4b3f      	ldr	r3, [pc, #252]	; (ebc <_sercom_get_default_pad+0x10c>)
     dc0:	4298      	cmp	r0, r3
     dc2:	d05a      	beq.n	e7a <_sercom_get_default_pad+0xca>
     dc4:	4b3e      	ldr	r3, [pc, #248]	; (ec0 <_sercom_get_default_pad+0x110>)
     dc6:	4298      	cmp	r0, r3
     dc8:	d037      	beq.n	e3a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     dca:	2000      	movs	r0, #0
}
     dcc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     dce:	4b3d      	ldr	r3, [pc, #244]	; (ec4 <_sercom_get_default_pad+0x114>)
     dd0:	4298      	cmp	r0, r3
     dd2:	d00c      	beq.n	dee <_sercom_get_default_pad+0x3e>
     dd4:	4b3c      	ldr	r3, [pc, #240]	; (ec8 <_sercom_get_default_pad+0x118>)
     dd6:	4298      	cmp	r0, r3
     dd8:	d1f7      	bne.n	dca <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dda:	2901      	cmp	r1, #1
     ddc:	d017      	beq.n	e0e <_sercom_get_default_pad+0x5e>
     dde:	2900      	cmp	r1, #0
     de0:	d05d      	beq.n	e9e <_sercom_get_default_pad+0xee>
     de2:	2902      	cmp	r1, #2
     de4:	d015      	beq.n	e12 <_sercom_get_default_pad+0x62>
     de6:	2903      	cmp	r1, #3
     de8:	d015      	beq.n	e16 <_sercom_get_default_pad+0x66>
	return 0;
     dea:	2000      	movs	r0, #0
     dec:	e7ee      	b.n	dcc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dee:	2901      	cmp	r1, #1
     df0:	d007      	beq.n	e02 <_sercom_get_default_pad+0x52>
     df2:	2900      	cmp	r1, #0
     df4:	d051      	beq.n	e9a <_sercom_get_default_pad+0xea>
     df6:	2902      	cmp	r1, #2
     df8:	d005      	beq.n	e06 <_sercom_get_default_pad+0x56>
     dfa:	2903      	cmp	r1, #3
     dfc:	d005      	beq.n	e0a <_sercom_get_default_pad+0x5a>
	return 0;
     dfe:	2000      	movs	r0, #0
     e00:	e7e4      	b.n	dcc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e02:	4832      	ldr	r0, [pc, #200]	; (ecc <_sercom_get_default_pad+0x11c>)
     e04:	e7e2      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e06:	4832      	ldr	r0, [pc, #200]	; (ed0 <_sercom_get_default_pad+0x120>)
     e08:	e7e0      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e0a:	4832      	ldr	r0, [pc, #200]	; (ed4 <_sercom_get_default_pad+0x124>)
     e0c:	e7de      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e0e:	4832      	ldr	r0, [pc, #200]	; (ed8 <_sercom_get_default_pad+0x128>)
     e10:	e7dc      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e12:	4832      	ldr	r0, [pc, #200]	; (edc <_sercom_get_default_pad+0x12c>)
     e14:	e7da      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e16:	4832      	ldr	r0, [pc, #200]	; (ee0 <_sercom_get_default_pad+0x130>)
     e18:	e7d8      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e1a:	2901      	cmp	r1, #1
     e1c:	d007      	beq.n	e2e <_sercom_get_default_pad+0x7e>
     e1e:	2900      	cmp	r1, #0
     e20:	d03f      	beq.n	ea2 <_sercom_get_default_pad+0xf2>
     e22:	2902      	cmp	r1, #2
     e24:	d005      	beq.n	e32 <_sercom_get_default_pad+0x82>
     e26:	2903      	cmp	r1, #3
     e28:	d005      	beq.n	e36 <_sercom_get_default_pad+0x86>
	return 0;
     e2a:	2000      	movs	r0, #0
     e2c:	e7ce      	b.n	dcc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e2e:	482d      	ldr	r0, [pc, #180]	; (ee4 <_sercom_get_default_pad+0x134>)
     e30:	e7cc      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e32:	482d      	ldr	r0, [pc, #180]	; (ee8 <_sercom_get_default_pad+0x138>)
     e34:	e7ca      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e36:	482d      	ldr	r0, [pc, #180]	; (eec <_sercom_get_default_pad+0x13c>)
     e38:	e7c8      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e3a:	2901      	cmp	r1, #1
     e3c:	d007      	beq.n	e4e <_sercom_get_default_pad+0x9e>
     e3e:	2900      	cmp	r1, #0
     e40:	d031      	beq.n	ea6 <_sercom_get_default_pad+0xf6>
     e42:	2902      	cmp	r1, #2
     e44:	d005      	beq.n	e52 <_sercom_get_default_pad+0xa2>
     e46:	2903      	cmp	r1, #3
     e48:	d005      	beq.n	e56 <_sercom_get_default_pad+0xa6>
	return 0;
     e4a:	2000      	movs	r0, #0
     e4c:	e7be      	b.n	dcc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e4e:	4828      	ldr	r0, [pc, #160]	; (ef0 <_sercom_get_default_pad+0x140>)
     e50:	e7bc      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e52:	4828      	ldr	r0, [pc, #160]	; (ef4 <_sercom_get_default_pad+0x144>)
     e54:	e7ba      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e56:	4828      	ldr	r0, [pc, #160]	; (ef8 <_sercom_get_default_pad+0x148>)
     e58:	e7b8      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e5a:	2901      	cmp	r1, #1
     e5c:	d007      	beq.n	e6e <_sercom_get_default_pad+0xbe>
     e5e:	2900      	cmp	r1, #0
     e60:	d023      	beq.n	eaa <_sercom_get_default_pad+0xfa>
     e62:	2902      	cmp	r1, #2
     e64:	d005      	beq.n	e72 <_sercom_get_default_pad+0xc2>
     e66:	2903      	cmp	r1, #3
     e68:	d005      	beq.n	e76 <_sercom_get_default_pad+0xc6>
	return 0;
     e6a:	2000      	movs	r0, #0
     e6c:	e7ae      	b.n	dcc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e6e:	4823      	ldr	r0, [pc, #140]	; (efc <_sercom_get_default_pad+0x14c>)
     e70:	e7ac      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e72:	4823      	ldr	r0, [pc, #140]	; (f00 <_sercom_get_default_pad+0x150>)
     e74:	e7aa      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e76:	4823      	ldr	r0, [pc, #140]	; (f04 <_sercom_get_default_pad+0x154>)
     e78:	e7a8      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e7a:	2901      	cmp	r1, #1
     e7c:	d007      	beq.n	e8e <_sercom_get_default_pad+0xde>
     e7e:	2900      	cmp	r1, #0
     e80:	d015      	beq.n	eae <_sercom_get_default_pad+0xfe>
     e82:	2902      	cmp	r1, #2
     e84:	d005      	beq.n	e92 <_sercom_get_default_pad+0xe2>
     e86:	2903      	cmp	r1, #3
     e88:	d005      	beq.n	e96 <_sercom_get_default_pad+0xe6>
	return 0;
     e8a:	2000      	movs	r0, #0
     e8c:	e79e      	b.n	dcc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e8e:	481e      	ldr	r0, [pc, #120]	; (f08 <_sercom_get_default_pad+0x158>)
     e90:	e79c      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e92:	481e      	ldr	r0, [pc, #120]	; (f0c <_sercom_get_default_pad+0x15c>)
     e94:	e79a      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e96:	481e      	ldr	r0, [pc, #120]	; (f10 <_sercom_get_default_pad+0x160>)
     e98:	e798      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e9a:	481e      	ldr	r0, [pc, #120]	; (f14 <_sercom_get_default_pad+0x164>)
     e9c:	e796      	b.n	dcc <_sercom_get_default_pad+0x1c>
     e9e:	2003      	movs	r0, #3
     ea0:	e794      	b.n	dcc <_sercom_get_default_pad+0x1c>
     ea2:	481d      	ldr	r0, [pc, #116]	; (f18 <_sercom_get_default_pad+0x168>)
     ea4:	e792      	b.n	dcc <_sercom_get_default_pad+0x1c>
     ea6:	481d      	ldr	r0, [pc, #116]	; (f1c <_sercom_get_default_pad+0x16c>)
     ea8:	e790      	b.n	dcc <_sercom_get_default_pad+0x1c>
     eaa:	481d      	ldr	r0, [pc, #116]	; (f20 <_sercom_get_default_pad+0x170>)
     eac:	e78e      	b.n	dcc <_sercom_get_default_pad+0x1c>
     eae:	481d      	ldr	r0, [pc, #116]	; (f24 <_sercom_get_default_pad+0x174>)
     eb0:	e78c      	b.n	dcc <_sercom_get_default_pad+0x1c>
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	42001000 	.word	0x42001000
     eb8:	42001800 	.word	0x42001800
     ebc:	42001c00 	.word	0x42001c00
     ec0:	42001400 	.word	0x42001400
     ec4:	42000800 	.word	0x42000800
     ec8:	42000c00 	.word	0x42000c00
     ecc:	00050003 	.word	0x00050003
     ed0:	00060003 	.word	0x00060003
     ed4:	00070003 	.word	0x00070003
     ed8:	00010003 	.word	0x00010003
     edc:	001e0003 	.word	0x001e0003
     ee0:	001f0003 	.word	0x001f0003
     ee4:	00090003 	.word	0x00090003
     ee8:	000a0003 	.word	0x000a0003
     eec:	000b0003 	.word	0x000b0003
     ef0:	00110003 	.word	0x00110003
     ef4:	00120003 	.word	0x00120003
     ef8:	00130003 	.word	0x00130003
     efc:	000d0003 	.word	0x000d0003
     f00:	000e0003 	.word	0x000e0003
     f04:	000f0003 	.word	0x000f0003
     f08:	00170003 	.word	0x00170003
     f0c:	00180003 	.word	0x00180003
     f10:	00190003 	.word	0x00190003
     f14:	00040003 	.word	0x00040003
     f18:	00080003 	.word	0x00080003
     f1c:	00100003 	.word	0x00100003
     f20:	000c0003 	.word	0x000c0003
     f24:	00160003 	.word	0x00160003

00000f28 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f28:	b530      	push	{r4, r5, lr}
     f2a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f2c:	4b0b      	ldr	r3, [pc, #44]	; (f5c <_sercom_get_sercom_inst_index+0x34>)
     f2e:	466a      	mov	r2, sp
     f30:	cb32      	ldmia	r3!, {r1, r4, r5}
     f32:	c232      	stmia	r2!, {r1, r4, r5}
     f34:	cb32      	ldmia	r3!, {r1, r4, r5}
     f36:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f38:	9b00      	ldr	r3, [sp, #0]
     f3a:	4283      	cmp	r3, r0
     f3c:	d00b      	beq.n	f56 <_sercom_get_sercom_inst_index+0x2e>
     f3e:	2301      	movs	r3, #1
     f40:	009a      	lsls	r2, r3, #2
     f42:	4669      	mov	r1, sp
     f44:	5852      	ldr	r2, [r2, r1]
     f46:	4282      	cmp	r2, r0
     f48:	d006      	beq.n	f58 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f4a:	3301      	adds	r3, #1
     f4c:	2b06      	cmp	r3, #6
     f4e:	d1f7      	bne.n	f40 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f50:	2000      	movs	r0, #0
}
     f52:	b007      	add	sp, #28
     f54:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f56:	2300      	movs	r3, #0
			return i;
     f58:	b2d8      	uxtb	r0, r3
     f5a:	e7fa      	b.n	f52 <_sercom_get_sercom_inst_index+0x2a>
     f5c:	00002280 	.word	0x00002280

00000f60 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     f60:	b5f0      	push	{r4, r5, r6, r7, lr}
     f62:	b08b      	sub	sp, #44	; 0x2c
     f64:	0005      	movs	r5, r0
     f66:	000c      	movs	r4, r1
     f68:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     f6a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     f6c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     f6e:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     f70:	079b      	lsls	r3, r3, #30
     f72:	d501      	bpl.n	f78 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     f74:	b00b      	add	sp, #44	; 0x2c
     f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     f78:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     f7a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     f7c:	07db      	lsls	r3, r3, #31
     f7e:	d4f9      	bmi.n	f74 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f80:	0008      	movs	r0, r1
     f82:	4b60      	ldr	r3, [pc, #384]	; (1104 <spi_init+0x1a4>)
     f84:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     f86:	4a60      	ldr	r2, [pc, #384]	; (1108 <spi_init+0x1a8>)
     f88:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     f8a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     f8c:	2301      	movs	r3, #1
     f8e:	40bb      	lsls	r3, r7
     f90:	430b      	orrs	r3, r1
     f92:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     f94:	a909      	add	r1, sp, #36	; 0x24
     f96:	2724      	movs	r7, #36	; 0x24
     f98:	5df3      	ldrb	r3, [r6, r7]
     f9a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f9c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f9e:	b2c3      	uxtb	r3, r0
     fa0:	9301      	str	r3, [sp, #4]
     fa2:	0018      	movs	r0, r3
     fa4:	4b59      	ldr	r3, [pc, #356]	; (110c <spi_init+0x1ac>)
     fa6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     fa8:	9801      	ldr	r0, [sp, #4]
     faa:	4b59      	ldr	r3, [pc, #356]	; (1110 <spi_init+0x1b0>)
     fac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     fae:	5df0      	ldrb	r0, [r6, r7]
     fb0:	2100      	movs	r1, #0
     fb2:	4b58      	ldr	r3, [pc, #352]	; (1114 <spi_init+0x1b4>)
     fb4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     fb6:	7833      	ldrb	r3, [r6, #0]
     fb8:	2b01      	cmp	r3, #1
     fba:	d038      	beq.n	102e <spi_init+0xce>
     fbc:	002b      	movs	r3, r5
     fbe:	330c      	adds	r3, #12
     fc0:	0029      	movs	r1, r5
     fc2:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
     fc4:	2200      	movs	r2, #0
     fc6:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     fc8:	428b      	cmp	r3, r1
     fca:	d1fc      	bne.n	fc6 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
     fcc:	2300      	movs	r3, #0
     fce:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     fd0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     fd2:	2400      	movs	r4, #0
     fd4:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     fd6:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
     fd8:	3336      	adds	r3, #54	; 0x36
     fda:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
     fdc:	3301      	adds	r3, #1
     fde:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
     fe0:	3301      	adds	r3, #1
     fe2:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
     fe4:	3b35      	subs	r3, #53	; 0x35
     fe6:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
     fe8:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     fea:	6828      	ldr	r0, [r5, #0]
     fec:	4b45      	ldr	r3, [pc, #276]	; (1104 <spi_init+0x1a4>)
     fee:	4798      	blx	r3
     ff0:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     ff2:	4949      	ldr	r1, [pc, #292]	; (1118 <spi_init+0x1b8>)
     ff4:	4b49      	ldr	r3, [pc, #292]	; (111c <spi_init+0x1bc>)
     ff6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     ff8:	00bf      	lsls	r7, r7, #2
     ffa:	4b49      	ldr	r3, [pc, #292]	; (1120 <spi_init+0x1c0>)
     ffc:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
     ffe:	682f      	ldr	r7, [r5, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1000:	ab04      	add	r3, sp, #16
    1002:	2280      	movs	r2, #128	; 0x80
    1004:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1006:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1008:	3a7f      	subs	r2, #127	; 0x7f
    100a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    100c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    100e:	7833      	ldrb	r3, [r6, #0]
    1010:	2b00      	cmp	r3, #0
    1012:	d102      	bne.n	101a <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1014:	2200      	movs	r2, #0
    1016:	ab04      	add	r3, sp, #16
    1018:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    101a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    101c:	9305      	str	r3, [sp, #20]
    101e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1020:	9306      	str	r3, [sp, #24]
    1022:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1024:	9307      	str	r3, [sp, #28]
    1026:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1028:	9308      	str	r3, [sp, #32]
    102a:	2400      	movs	r4, #0
    102c:	e00b      	b.n	1046 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    102e:	6823      	ldr	r3, [r4, #0]
    1030:	220c      	movs	r2, #12
    1032:	4313      	orrs	r3, r2
    1034:	6023      	str	r3, [r4, #0]
    1036:	e7c1      	b.n	fbc <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1038:	0038      	movs	r0, r7
    103a:	4b3a      	ldr	r3, [pc, #232]	; (1124 <spi_init+0x1c4>)
    103c:	4798      	blx	r3
    103e:	e00a      	b.n	1056 <spi_init+0xf6>
    1040:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1042:	2c04      	cmp	r4, #4
    1044:	d010      	beq.n	1068 <spi_init+0x108>
    1046:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1048:	00a3      	lsls	r3, r4, #2
    104a:	aa02      	add	r2, sp, #8
    104c:	200c      	movs	r0, #12
    104e:	1812      	adds	r2, r2, r0
    1050:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1052:	2800      	cmp	r0, #0
    1054:	d0f0      	beq.n	1038 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    1056:	1c43      	adds	r3, r0, #1
    1058:	d0f2      	beq.n	1040 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    105a:	a904      	add	r1, sp, #16
    105c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    105e:	0c00      	lsrs	r0, r0, #16
    1060:	b2c0      	uxtb	r0, r0
    1062:	4b31      	ldr	r3, [pc, #196]	; (1128 <spi_init+0x1c8>)
    1064:	4798      	blx	r3
    1066:	e7eb      	b.n	1040 <spi_init+0xe0>
	module->mode             = config->mode;
    1068:	7833      	ldrb	r3, [r6, #0]
    106a:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    106c:	7c33      	ldrb	r3, [r6, #16]
    106e:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1070:	7cb3      	ldrb	r3, [r6, #18]
    1072:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    1074:	7d33      	ldrb	r3, [r6, #20]
    1076:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    1078:	2200      	movs	r2, #0
    107a:	ab02      	add	r3, sp, #8
    107c:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    107e:	7833      	ldrb	r3, [r6, #0]
    1080:	2b01      	cmp	r3, #1
    1082:	d028      	beq.n	10d6 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    1084:	6873      	ldr	r3, [r6, #4]
    1086:	68b2      	ldr	r2, [r6, #8]
    1088:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    108a:	68f2      	ldr	r2, [r6, #12]
    108c:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    108e:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    1090:	7c72      	ldrb	r2, [r6, #17]
    1092:	2a00      	cmp	r2, #0
    1094:	d103      	bne.n	109e <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1096:	4a25      	ldr	r2, [pc, #148]	; (112c <spi_init+0x1cc>)
    1098:	7892      	ldrb	r2, [r2, #2]
    109a:	0792      	lsls	r2, r2, #30
    109c:	d501      	bpl.n	10a2 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    109e:	2280      	movs	r2, #128	; 0x80
    10a0:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    10a2:	7cb2      	ldrb	r2, [r6, #18]
    10a4:	2a00      	cmp	r2, #0
    10a6:	d002      	beq.n	10ae <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    10a8:	2280      	movs	r2, #128	; 0x80
    10aa:	0292      	lsls	r2, r2, #10
    10ac:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    10ae:	7cf2      	ldrb	r2, [r6, #19]
    10b0:	2a00      	cmp	r2, #0
    10b2:	d002      	beq.n	10ba <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    10b4:	2280      	movs	r2, #128	; 0x80
    10b6:	0092      	lsls	r2, r2, #2
    10b8:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    10ba:	7d32      	ldrb	r2, [r6, #20]
    10bc:	2a00      	cmp	r2, #0
    10be:	d002      	beq.n	10c6 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    10c0:	2280      	movs	r2, #128	; 0x80
    10c2:	0192      	lsls	r2, r2, #6
    10c4:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    10c6:	683a      	ldr	r2, [r7, #0]
    10c8:	4313      	orrs	r3, r2
    10ca:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    10cc:	687b      	ldr	r3, [r7, #4]
    10ce:	430b      	orrs	r3, r1
    10d0:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    10d2:	2000      	movs	r0, #0
    10d4:	e74e      	b.n	f74 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10d6:	6828      	ldr	r0, [r5, #0]
    10d8:	4b0a      	ldr	r3, [pc, #40]	; (1104 <spi_init+0x1a4>)
    10da:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10dc:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    10de:	b2c0      	uxtb	r0, r0
    10e0:	4b13      	ldr	r3, [pc, #76]	; (1130 <spi_init+0x1d0>)
    10e2:	4798      	blx	r3
    10e4:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    10e6:	ab02      	add	r3, sp, #8
    10e8:	1d9a      	adds	r2, r3, #6
    10ea:	69b0      	ldr	r0, [r6, #24]
    10ec:	4b11      	ldr	r3, [pc, #68]	; (1134 <spi_init+0x1d4>)
    10ee:	4798      	blx	r3
    10f0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    10f2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    10f4:	2b00      	cmp	r3, #0
    10f6:	d000      	beq.n	10fa <spi_init+0x19a>
    10f8:	e73c      	b.n	f74 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    10fa:	ab02      	add	r3, sp, #8
    10fc:	3306      	adds	r3, #6
    10fe:	781b      	ldrb	r3, [r3, #0]
    1100:	733b      	strb	r3, [r7, #12]
    1102:	e7bf      	b.n	1084 <spi_init+0x124>
    1104:	00000f29 	.word	0x00000f29
    1108:	40000400 	.word	0x40000400
    110c:	00001c89 	.word	0x00001c89
    1110:	00001bfd 	.word	0x00001bfd
    1114:	00000d65 	.word	0x00000d65
    1118:	000012d9 	.word	0x000012d9
    111c:	000014ad 	.word	0x000014ad
    1120:	20000084 	.word	0x20000084
    1124:	00000db1 	.word	0x00000db1
    1128:	00001d81 	.word	0x00001d81
    112c:	41002000 	.word	0x41002000
    1130:	00001ca5 	.word	0x00001ca5
    1134:	00000d3d 	.word	0x00000d3d

00001138 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    1138:	b5f0      	push	{r4, r5, r6, r7, lr}
    113a:	46d6      	mov	lr, sl
    113c:	4647      	mov	r7, r8
    113e:	b580      	push	{r7, lr}
    1140:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    1142:	2438      	movs	r4, #56	; 0x38
    1144:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1146:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    1148:	2d05      	cmp	r5, #5
    114a:	d002      	beq.n	1152 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    114c:	3412      	adds	r4, #18
	if (length == 0) {
    114e:	2a00      	cmp	r2, #0
    1150:	d105      	bne.n	115e <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    1152:	0020      	movs	r0, r4
    1154:	b003      	add	sp, #12
    1156:	bc0c      	pop	{r2, r3}
    1158:	4690      	mov	r8, r2
    115a:	469a      	mov	sl, r3
    115c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    115e:	79c4      	ldrb	r4, [r0, #7]
    1160:	2c00      	cmp	r4, #0
    1162:	d144      	bne.n	11ee <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    1164:	341c      	adds	r4, #28
    1166:	e7f4      	b.n	1152 <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1168:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    116a:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    116c:	423c      	tst	r4, r7
    116e:	d0fc      	beq.n	116a <spi_read_buffer_wait+0x32>
    1170:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    1172:	423c      	tst	r4, r7
    1174:	d01a      	beq.n	11ac <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1176:	4644      	mov	r4, r8
    1178:	62ac      	str	r4, [r5, #40]	; 0x28
    117a:	e017      	b.n	11ac <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    117c:	7984      	ldrb	r4, [r0, #6]
    117e:	2c01      	cmp	r4, #1
    1180:	d026      	beq.n	11d0 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1182:	6aad      	ldr	r5, [r5, #40]	; 0x28
    1184:	b2ec      	uxtb	r4, r5
    1186:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    1188:	9c01      	ldr	r4, [sp, #4]
    118a:	2c00      	cmp	r4, #0
    118c:	d13a      	bne.n	1204 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    118e:	1c75      	adds	r5, r6, #1
    1190:	b2ad      	uxth	r5, r5
    1192:	4664      	mov	r4, ip
    1194:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1196:	7984      	ldrb	r4, [r0, #6]
    1198:	2c01      	cmp	r4, #1
    119a:	d01e      	beq.n	11da <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    119c:	002e      	movs	r6, r5
	while (length--) {
    119e:	3a01      	subs	r2, #1
    11a0:	b292      	uxth	r2, r2
    11a2:	4552      	cmp	r2, sl
    11a4:	d01f      	beq.n	11e6 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    11a6:	7944      	ldrb	r4, [r0, #5]
    11a8:	2c01      	cmp	r4, #1
    11aa:	d0dd      	beq.n	1168 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    11ac:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    11ae:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    11b0:	421c      	tst	r4, r3
    11b2:	d0fc      	beq.n	11ae <spi_read_buffer_wait+0x76>
    11b4:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    11b6:	421c      	tst	r4, r3
    11b8:	d017      	beq.n	11ea <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    11ba:	8b6c      	ldrh	r4, [r5, #26]
    11bc:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    11be:	2400      	movs	r4, #0
    11c0:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    11c2:	4664      	mov	r4, ip
    11c4:	421c      	tst	r4, r3
    11c6:	d0d9      	beq.n	117c <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    11c8:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    11ca:	241e      	movs	r4, #30
    11cc:	9401      	str	r4, [sp, #4]
    11ce:	e7d5      	b.n	117c <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    11d0:	6aac      	ldr	r4, [r5, #40]	; 0x28
    11d2:	05e4      	lsls	r4, r4, #23
    11d4:	0de4      	lsrs	r4, r4, #23
    11d6:	46a4      	mov	ip, r4
    11d8:	e7d6      	b.n	1188 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    11da:	3602      	adds	r6, #2
    11dc:	b2b6      	uxth	r6, r6
    11de:	4664      	mov	r4, ip
    11e0:	0a24      	lsrs	r4, r4, #8
    11e2:	554c      	strb	r4, [r1, r5]
    11e4:	e7db      	b.n	119e <spi_read_buffer_wait+0x66>
    11e6:	9c01      	ldr	r4, [sp, #4]
    11e8:	e7b3      	b.n	1152 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    11ea:	2410      	movs	r4, #16
    11ec:	e7b1      	b.n	1152 <spi_read_buffer_wait+0x1a>
	while (length--) {
    11ee:	3a01      	subs	r2, #1
    11f0:	b292      	uxth	r2, r2
    11f2:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    11f4:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    11f6:	05db      	lsls	r3, r3, #23
    11f8:	0ddb      	lsrs	r3, r3, #23
    11fa:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    11fc:	2304      	movs	r3, #4
	while (length--) {
    11fe:	4c02      	ldr	r4, [pc, #8]	; (1208 <spi_read_buffer_wait+0xd0>)
    1200:	46a2      	mov	sl, r4
    1202:	e7d0      	b.n	11a6 <spi_read_buffer_wait+0x6e>
    1204:	9c01      	ldr	r4, [sp, #4]
    1206:	e7a4      	b.n	1152 <spi_read_buffer_wait+0x1a>
    1208:	0000ffff 	.word	0x0000ffff

0000120c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    120c:	b5f0      	push	{r4, r5, r6, r7, lr}
    120e:	46de      	mov	lr, fp
    1210:	4657      	mov	r7, sl
    1212:	464e      	mov	r6, r9
    1214:	4645      	mov	r5, r8
    1216:	b5e0      	push	{r5, r6, r7, lr}
    1218:	b083      	sub	sp, #12
    121a:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    121c:	2338      	movs	r3, #56	; 0x38
    121e:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    1220:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    1222:	2c05      	cmp	r4, #5
    1224:	d002      	beq.n	122c <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1226:	3312      	adds	r3, #18
	if (length == 0) {
    1228:	2a00      	cmp	r2, #0
    122a:	d14b      	bne.n	12c4 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    122c:	0018      	movs	r0, r3
    122e:	b003      	add	sp, #12
    1230:	bc3c      	pop	{r2, r3, r4, r5}
    1232:	4690      	mov	r8, r2
    1234:	4699      	mov	r9, r3
    1236:	46a2      	mov	sl, r4
    1238:	46ab      	mov	fp, r5
    123a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    123c:	3702      	adds	r7, #2
    123e:	b2bf      	uxth	r7, r7
    1240:	4641      	mov	r1, r8
    1242:	4653      	mov	r3, sl
    1244:	5c59      	ldrb	r1, [r3, r1]
    1246:	0209      	lsls	r1, r1, #8
    1248:	465b      	mov	r3, fp
    124a:	430b      	orrs	r3, r1
    124c:	e018      	b.n	1280 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    124e:	7983      	ldrb	r3, [r0, #6]
    1250:	2b01      	cmp	r3, #1
    1252:	d02a      	beq.n	12aa <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1254:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    1256:	3e01      	subs	r6, #1
    1258:	b2b6      	uxth	r6, r6
    125a:	4566      	cmp	r6, ip
    125c:	d027      	beq.n	12ae <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    125e:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1260:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    1262:	4223      	tst	r3, r4
    1264:	d0fc      	beq.n	1260 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    1266:	1c7b      	adds	r3, r7, #1
    1268:	b29b      	uxth	r3, r3
    126a:	4698      	mov	r8, r3
    126c:	4653      	mov	r3, sl
    126e:	5ddb      	ldrb	r3, [r3, r7]
    1270:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1272:	7981      	ldrb	r1, [r0, #6]
    1274:	2901      	cmp	r1, #1
    1276:	d0e1      	beq.n	123c <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    1278:	4669      	mov	r1, sp
    127a:	80cb      	strh	r3, [r1, #6]
    127c:	88cb      	ldrh	r3, [r1, #6]
    127e:	4647      	mov	r7, r8
    1280:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    1282:	4221      	tst	r1, r4
    1284:	d002      	beq.n	128c <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1286:	05db      	lsls	r3, r3, #23
    1288:	0ddb      	lsrs	r3, r3, #23
    128a:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    128c:	79c3      	ldrb	r3, [r0, #7]
    128e:	2b00      	cmp	r3, #0
    1290:	d0e1      	beq.n	1256 <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1292:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1294:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    1296:	422b      	tst	r3, r5
    1298:	d0fc      	beq.n	1294 <spi_write_buffer_wait+0x88>
    129a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    129c:	422b      	tst	r3, r5
    129e:	d0da      	beq.n	1256 <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    12a0:	8b53      	ldrh	r3, [r2, #26]
    12a2:	422b      	tst	r3, r5
    12a4:	d0d3      	beq.n	124e <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    12a6:	8355      	strh	r5, [r2, #26]
    12a8:	e7d1      	b.n	124e <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    12aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    12ac:	e7d3      	b.n	1256 <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    12ae:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    12b0:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    12b2:	2a01      	cmp	r2, #1
    12b4:	d1ba      	bne.n	122c <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    12b6:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    12b8:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    12ba:	7e0b      	ldrb	r3, [r1, #24]
    12bc:	4213      	tst	r3, r2
    12be:	d0fc      	beq.n	12ba <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    12c0:	2300      	movs	r3, #0
    12c2:	e7b3      	b.n	122c <spi_write_buffer_wait+0x20>
	while (length--) {
    12c4:	3a01      	subs	r2, #1
    12c6:	b296      	uxth	r6, r2
    12c8:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    12ca:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    12cc:	2504      	movs	r5, #4
	while (length--) {
    12ce:	4b01      	ldr	r3, [pc, #4]	; (12d4 <spi_write_buffer_wait+0xc8>)
    12d0:	469c      	mov	ip, r3
    12d2:	e7c4      	b.n	125e <spi_write_buffer_wait+0x52>
    12d4:	0000ffff 	.word	0x0000ffff

000012d8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    12d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    12da:	0080      	lsls	r0, r0, #2
    12dc:	4b70      	ldr	r3, [pc, #448]	; (14a0 <_spi_interrupt_handler+0x1c8>)
    12de:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    12e0:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    12e2:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    12e4:	5ce7      	ldrb	r7, [r4, r3]
    12e6:	2236      	movs	r2, #54	; 0x36
    12e8:	5ca2      	ldrb	r2, [r4, r2]
    12ea:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    12ec:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    12ee:	7db5      	ldrb	r5, [r6, #22]
    12f0:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    12f2:	07eb      	lsls	r3, r5, #31
    12f4:	d502      	bpl.n	12fc <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    12f6:	7963      	ldrb	r3, [r4, #5]
    12f8:	2b01      	cmp	r3, #1
    12fa:	d01e      	beq.n	133a <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    12fc:	076b      	lsls	r3, r5, #29
    12fe:	d511      	bpl.n	1324 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1300:	8b73      	ldrh	r3, [r6, #26]
    1302:	075b      	lsls	r3, r3, #29
    1304:	d55a      	bpl.n	13bc <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1306:	7a63      	ldrb	r3, [r4, #9]
    1308:	2b01      	cmp	r3, #1
    130a:	d008      	beq.n	131e <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    130c:	221e      	movs	r2, #30
    130e:	2338      	movs	r3, #56	; 0x38
    1310:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1312:	3b35      	subs	r3, #53	; 0x35
    1314:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1316:	3302      	adds	r3, #2
    1318:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    131a:	073b      	lsls	r3, r7, #28
    131c:	d44a      	bmi.n	13b4 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    131e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1320:	2304      	movs	r3, #4
    1322:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    1324:	07ab      	lsls	r3, r5, #30
    1326:	d503      	bpl.n	1330 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1328:	7963      	ldrb	r3, [r4, #5]
    132a:	2b01      	cmp	r3, #1
    132c:	d100      	bne.n	1330 <_spi_interrupt_handler+0x58>
    132e:	e097      	b.n	1460 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    1330:	b26d      	sxtb	r5, r5
    1332:	2d00      	cmp	r5, #0
    1334:	da00      	bge.n	1338 <_spi_interrupt_handler+0x60>
    1336:	e0a9      	b.n	148c <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    1338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    133a:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    133c:	2b00      	cmp	r3, #0
    133e:	d022      	beq.n	1386 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    1340:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    1342:	2b00      	cmp	r3, #0
    1344:	d0da      	beq.n	12fc <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1346:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1348:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    134a:	7813      	ldrb	r3, [r2, #0]
    134c:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    134e:	1c50      	adds	r0, r2, #1
    1350:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1352:	79a0      	ldrb	r0, [r4, #6]
    1354:	2801      	cmp	r0, #1
    1356:	d027      	beq.n	13a8 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1358:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    135a:	05db      	lsls	r3, r3, #23
    135c:	0ddb      	lsrs	r3, r3, #23
    135e:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    1360:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    1362:	3b01      	subs	r3, #1
    1364:	b29b      	uxth	r3, r3
    1366:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    1368:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    136a:	b29b      	uxth	r3, r3
    136c:	2b00      	cmp	r3, #0
    136e:	d1c5      	bne.n	12fc <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1370:	3301      	adds	r3, #1
    1372:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    1374:	7a63      	ldrb	r3, [r4, #9]
    1376:	2b01      	cmp	r3, #1
    1378:	d1c0      	bne.n	12fc <_spi_interrupt_handler+0x24>
    137a:	79e3      	ldrb	r3, [r4, #7]
    137c:	2b00      	cmp	r3, #0
    137e:	d1bd      	bne.n	12fc <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1380:	3302      	adds	r3, #2
    1382:	75b3      	strb	r3, [r6, #22]
    1384:	e7ba      	b.n	12fc <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    1386:	4b47      	ldr	r3, [pc, #284]	; (14a4 <_spi_interrupt_handler+0x1cc>)
    1388:	881b      	ldrh	r3, [r3, #0]
    138a:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    138c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    138e:	3b01      	subs	r3, #1
    1390:	b29b      	uxth	r3, r3
    1392:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1394:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1396:	b29b      	uxth	r3, r3
    1398:	2b00      	cmp	r3, #0
    139a:	d101      	bne.n	13a0 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    139c:	3301      	adds	r3, #1
    139e:	7533      	strb	r3, [r6, #20]
		if (0
    13a0:	7963      	ldrb	r3, [r4, #5]
    13a2:	2b01      	cmp	r3, #1
    13a4:	d0cc      	beq.n	1340 <_spi_interrupt_handler+0x68>
    13a6:	e7a9      	b.n	12fc <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    13a8:	7850      	ldrb	r0, [r2, #1]
    13aa:	0200      	lsls	r0, r0, #8
    13ac:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    13ae:	3202      	adds	r2, #2
    13b0:	62e2      	str	r2, [r4, #44]	; 0x2c
    13b2:	e7d2      	b.n	135a <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    13b4:	0020      	movs	r0, r4
    13b6:	69a3      	ldr	r3, [r4, #24]
    13b8:	4798      	blx	r3
    13ba:	e7b0      	b.n	131e <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    13bc:	7a63      	ldrb	r3, [r4, #9]
    13be:	2b01      	cmp	r3, #1
    13c0:	d028      	beq.n	1414 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    13c2:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    13c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13c6:	05db      	lsls	r3, r3, #23
    13c8:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    13ca:	b2da      	uxtb	r2, r3
    13cc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    13ce:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    13d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    13d2:	1c51      	adds	r1, r2, #1
    13d4:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    13d6:	79a1      	ldrb	r1, [r4, #6]
    13d8:	2901      	cmp	r1, #1
    13da:	d034      	beq.n	1446 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    13dc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    13de:	3b01      	subs	r3, #1
    13e0:	b29b      	uxth	r3, r3
    13e2:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    13e4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    13e6:	b29b      	uxth	r3, r3
    13e8:	2b00      	cmp	r3, #0
    13ea:	d000      	beq.n	13ee <_spi_interrupt_handler+0x116>
    13ec:	e79a      	b.n	1324 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    13ee:	2200      	movs	r2, #0
    13f0:	3338      	adds	r3, #56	; 0x38
    13f2:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    13f4:	3b34      	subs	r3, #52	; 0x34
    13f6:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    13f8:	7a63      	ldrb	r3, [r4, #9]
    13fa:	2b02      	cmp	r3, #2
    13fc:	d029      	beq.n	1452 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    13fe:	7a63      	ldrb	r3, [r4, #9]
    1400:	2b00      	cmp	r3, #0
    1402:	d000      	beq.n	1406 <_spi_interrupt_handler+0x12e>
    1404:	e78e      	b.n	1324 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1406:	07bb      	lsls	r3, r7, #30
    1408:	d400      	bmi.n	140c <_spi_interrupt_handler+0x134>
    140a:	e78b      	b.n	1324 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    140c:	0020      	movs	r0, r4
    140e:	6923      	ldr	r3, [r4, #16]
    1410:	4798      	blx	r3
    1412:	e787      	b.n	1324 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1414:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    1416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1418:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    141a:	3b01      	subs	r3, #1
    141c:	b29b      	uxth	r3, r3
    141e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    1420:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1422:	b29b      	uxth	r3, r3
    1424:	2b00      	cmp	r3, #0
    1426:	d000      	beq.n	142a <_spi_interrupt_handler+0x152>
    1428:	e77c      	b.n	1324 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    142a:	3304      	adds	r3, #4
    142c:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    142e:	2200      	movs	r2, #0
    1430:	3334      	adds	r3, #52	; 0x34
    1432:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1434:	3b35      	subs	r3, #53	; 0x35
    1436:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1438:	07fb      	lsls	r3, r7, #31
    143a:	d400      	bmi.n	143e <_spi_interrupt_handler+0x166>
    143c:	e772      	b.n	1324 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    143e:	0020      	movs	r0, r4
    1440:	68e3      	ldr	r3, [r4, #12]
    1442:	4798      	blx	r3
    1444:	e76e      	b.n	1324 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1446:	0a1b      	lsrs	r3, r3, #8
    1448:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    144a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    144c:	3301      	adds	r3, #1
    144e:	62a3      	str	r3, [r4, #40]	; 0x28
    1450:	e7c4      	b.n	13dc <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1452:	077b      	lsls	r3, r7, #29
    1454:	d400      	bmi.n	1458 <_spi_interrupt_handler+0x180>
    1456:	e765      	b.n	1324 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1458:	0020      	movs	r0, r4
    145a:	6963      	ldr	r3, [r4, #20]
    145c:	4798      	blx	r3
    145e:	e761      	b.n	1324 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1460:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1462:	2b01      	cmp	r3, #1
    1464:	d000      	beq.n	1468 <_spi_interrupt_handler+0x190>
    1466:	e763      	b.n	1330 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1468:	79e3      	ldrb	r3, [r4, #7]
    146a:	2b00      	cmp	r3, #0
    146c:	d000      	beq.n	1470 <_spi_interrupt_handler+0x198>
    146e:	e75f      	b.n	1330 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1470:	3302      	adds	r3, #2
    1472:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1474:	3301      	adds	r3, #1
    1476:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1478:	2200      	movs	r2, #0
    147a:	3335      	adds	r3, #53	; 0x35
    147c:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    147e:	07fb      	lsls	r3, r7, #31
    1480:	d400      	bmi.n	1484 <_spi_interrupt_handler+0x1ac>
    1482:	e755      	b.n	1330 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1484:	0020      	movs	r0, r4
    1486:	68e3      	ldr	r3, [r4, #12]
    1488:	4798      	blx	r3
    148a:	e751      	b.n	1330 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    148c:	2380      	movs	r3, #128	; 0x80
    148e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1490:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1492:	067b      	lsls	r3, r7, #25
    1494:	d400      	bmi.n	1498 <_spi_interrupt_handler+0x1c0>
    1496:	e74f      	b.n	1338 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1498:	6a63      	ldr	r3, [r4, #36]	; 0x24
    149a:	0020      	movs	r0, r4
    149c:	4798      	blx	r3
}
    149e:	e74b      	b.n	1338 <_spi_interrupt_handler+0x60>
    14a0:	20000084 	.word	0x20000084
    14a4:	20000080 	.word	0x20000080

000014a8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    14a8:	4770      	bx	lr
	...

000014ac <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    14ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    14ae:	4b0a      	ldr	r3, [pc, #40]	; (14d8 <_sercom_set_handler+0x2c>)
    14b0:	781b      	ldrb	r3, [r3, #0]
    14b2:	2b00      	cmp	r3, #0
    14b4:	d10c      	bne.n	14d0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    14b6:	4f09      	ldr	r7, [pc, #36]	; (14dc <_sercom_set_handler+0x30>)
    14b8:	4e09      	ldr	r6, [pc, #36]	; (14e0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    14ba:	4d0a      	ldr	r5, [pc, #40]	; (14e4 <_sercom_set_handler+0x38>)
    14bc:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    14be:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    14c0:	195a      	adds	r2, r3, r5
    14c2:	6014      	str	r4, [r2, #0]
    14c4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    14c6:	2b18      	cmp	r3, #24
    14c8:	d1f9      	bne.n	14be <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    14ca:	2201      	movs	r2, #1
    14cc:	4b02      	ldr	r3, [pc, #8]	; (14d8 <_sercom_set_handler+0x2c>)
    14ce:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    14d0:	0080      	lsls	r0, r0, #2
    14d2:	4b02      	ldr	r3, [pc, #8]	; (14dc <_sercom_set_handler+0x30>)
    14d4:	50c1      	str	r1, [r0, r3]
}
    14d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14d8:	2000002e 	.word	0x2000002e
    14dc:	20000030 	.word	0x20000030
    14e0:	000014a9 	.word	0x000014a9
    14e4:	20000084 	.word	0x20000084

000014e8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    14e8:	b500      	push	{lr}
    14ea:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    14ec:	2309      	movs	r3, #9
    14ee:	466a      	mov	r2, sp
    14f0:	7013      	strb	r3, [r2, #0]
    14f2:	3301      	adds	r3, #1
    14f4:	7053      	strb	r3, [r2, #1]
    14f6:	3301      	adds	r3, #1
    14f8:	7093      	strb	r3, [r2, #2]
    14fa:	3301      	adds	r3, #1
    14fc:	70d3      	strb	r3, [r2, #3]
    14fe:	3301      	adds	r3, #1
    1500:	7113      	strb	r3, [r2, #4]
    1502:	3301      	adds	r3, #1
    1504:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1506:	4b03      	ldr	r3, [pc, #12]	; (1514 <_sercom_get_interrupt_vector+0x2c>)
    1508:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    150a:	466b      	mov	r3, sp
    150c:	5618      	ldrsb	r0, [r3, r0]
}
    150e:	b003      	add	sp, #12
    1510:	bd00      	pop	{pc}
    1512:	46c0      	nop			; (mov r8, r8)
    1514:	00000f29 	.word	0x00000f29

00001518 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1518:	b510      	push	{r4, lr}
    151a:	4b02      	ldr	r3, [pc, #8]	; (1524 <SERCOM0_Handler+0xc>)
    151c:	681b      	ldr	r3, [r3, #0]
    151e:	2000      	movs	r0, #0
    1520:	4798      	blx	r3
    1522:	bd10      	pop	{r4, pc}
    1524:	20000030 	.word	0x20000030

00001528 <SERCOM1_Handler>:
    1528:	b510      	push	{r4, lr}
    152a:	4b02      	ldr	r3, [pc, #8]	; (1534 <SERCOM1_Handler+0xc>)
    152c:	685b      	ldr	r3, [r3, #4]
    152e:	2001      	movs	r0, #1
    1530:	4798      	blx	r3
    1532:	bd10      	pop	{r4, pc}
    1534:	20000030 	.word	0x20000030

00001538 <SERCOM2_Handler>:
    1538:	b510      	push	{r4, lr}
    153a:	4b02      	ldr	r3, [pc, #8]	; (1544 <SERCOM2_Handler+0xc>)
    153c:	689b      	ldr	r3, [r3, #8]
    153e:	2002      	movs	r0, #2
    1540:	4798      	blx	r3
    1542:	bd10      	pop	{r4, pc}
    1544:	20000030 	.word	0x20000030

00001548 <SERCOM3_Handler>:
    1548:	b510      	push	{r4, lr}
    154a:	4b02      	ldr	r3, [pc, #8]	; (1554 <SERCOM3_Handler+0xc>)
    154c:	68db      	ldr	r3, [r3, #12]
    154e:	2003      	movs	r0, #3
    1550:	4798      	blx	r3
    1552:	bd10      	pop	{r4, pc}
    1554:	20000030 	.word	0x20000030

00001558 <SERCOM4_Handler>:
    1558:	b510      	push	{r4, lr}
    155a:	4b02      	ldr	r3, [pc, #8]	; (1564 <SERCOM4_Handler+0xc>)
    155c:	691b      	ldr	r3, [r3, #16]
    155e:	2004      	movs	r0, #4
    1560:	4798      	blx	r3
    1562:	bd10      	pop	{r4, pc}
    1564:	20000030 	.word	0x20000030

00001568 <SERCOM5_Handler>:
    1568:	b510      	push	{r4, lr}
    156a:	4b02      	ldr	r3, [pc, #8]	; (1574 <SERCOM5_Handler+0xc>)
    156c:	695b      	ldr	r3, [r3, #20]
    156e:	2005      	movs	r0, #5
    1570:	4798      	blx	r3
    1572:	bd10      	pop	{r4, pc}
    1574:	20000030 	.word	0x20000030

00001578 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1578:	4b0c      	ldr	r3, [pc, #48]	; (15ac <cpu_irq_enter_critical+0x34>)
    157a:	681b      	ldr	r3, [r3, #0]
    157c:	2b00      	cmp	r3, #0
    157e:	d106      	bne.n	158e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1580:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1584:	2b00      	cmp	r3, #0
    1586:	d007      	beq.n	1598 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1588:	2200      	movs	r2, #0
    158a:	4b09      	ldr	r3, [pc, #36]	; (15b0 <cpu_irq_enter_critical+0x38>)
    158c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    158e:	4a07      	ldr	r2, [pc, #28]	; (15ac <cpu_irq_enter_critical+0x34>)
    1590:	6813      	ldr	r3, [r2, #0]
    1592:	3301      	adds	r3, #1
    1594:	6013      	str	r3, [r2, #0]
}
    1596:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1598:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    159a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    159e:	2200      	movs	r2, #0
    15a0:	4b04      	ldr	r3, [pc, #16]	; (15b4 <cpu_irq_enter_critical+0x3c>)
    15a2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    15a4:	3201      	adds	r2, #1
    15a6:	4b02      	ldr	r3, [pc, #8]	; (15b0 <cpu_irq_enter_critical+0x38>)
    15a8:	701a      	strb	r2, [r3, #0]
    15aa:	e7f0      	b.n	158e <cpu_irq_enter_critical+0x16>
    15ac:	20000048 	.word	0x20000048
    15b0:	2000004c 	.word	0x2000004c
    15b4:	20000000 	.word	0x20000000

000015b8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    15b8:	4b08      	ldr	r3, [pc, #32]	; (15dc <cpu_irq_leave_critical+0x24>)
    15ba:	681a      	ldr	r2, [r3, #0]
    15bc:	3a01      	subs	r2, #1
    15be:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    15c0:	681b      	ldr	r3, [r3, #0]
    15c2:	2b00      	cmp	r3, #0
    15c4:	d109      	bne.n	15da <cpu_irq_leave_critical+0x22>
    15c6:	4b06      	ldr	r3, [pc, #24]	; (15e0 <cpu_irq_leave_critical+0x28>)
    15c8:	781b      	ldrb	r3, [r3, #0]
    15ca:	2b00      	cmp	r3, #0
    15cc:	d005      	beq.n	15da <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    15ce:	2201      	movs	r2, #1
    15d0:	4b04      	ldr	r3, [pc, #16]	; (15e4 <cpu_irq_leave_critical+0x2c>)
    15d2:	701a      	strb	r2, [r3, #0]
    15d4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    15d8:	b662      	cpsie	i
	}
}
    15da:	4770      	bx	lr
    15dc:	20000048 	.word	0x20000048
    15e0:	2000004c 	.word	0x2000004c
    15e4:	20000000 	.word	0x20000000

000015e8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    15e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ea:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    15ec:	ac01      	add	r4, sp, #4
    15ee:	2501      	movs	r5, #1
    15f0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    15f2:	2700      	movs	r7, #0
    15f4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    15f6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    15f8:	0021      	movs	r1, r4
    15fa:	2017      	movs	r0, #23
    15fc:	4e06      	ldr	r6, [pc, #24]	; (1618 <system_board_init+0x30>)
    15fe:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1600:	2280      	movs	r2, #128	; 0x80
    1602:	0412      	lsls	r2, r2, #16
    1604:	4b05      	ldr	r3, [pc, #20]	; (161c <system_board_init+0x34>)
    1606:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1608:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    160a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    160c:	0021      	movs	r1, r4
    160e:	2037      	movs	r0, #55	; 0x37
    1610:	47b0      	blx	r6
}
    1612:	b003      	add	sp, #12
    1614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	00001621 	.word	0x00001621
    161c:	41004400 	.word	0x41004400

00001620 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1620:	b500      	push	{lr}
    1622:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1624:	ab01      	add	r3, sp, #4
    1626:	2280      	movs	r2, #128	; 0x80
    1628:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    162a:	780a      	ldrb	r2, [r1, #0]
    162c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    162e:	784a      	ldrb	r2, [r1, #1]
    1630:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1632:	788a      	ldrb	r2, [r1, #2]
    1634:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1636:	0019      	movs	r1, r3
    1638:	4b01      	ldr	r3, [pc, #4]	; (1640 <port_pin_set_config+0x20>)
    163a:	4798      	blx	r3
}
    163c:	b003      	add	sp, #12
    163e:	bd00      	pop	{pc}
    1640:	00001d81 	.word	0x00001d81

00001644 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1644:	b510      	push	{r4, lr}
	switch (clock_source) {
    1646:	2808      	cmp	r0, #8
    1648:	d803      	bhi.n	1652 <system_clock_source_get_hz+0xe>
    164a:	0080      	lsls	r0, r0, #2
    164c:	4b1b      	ldr	r3, [pc, #108]	; (16bc <system_clock_source_get_hz+0x78>)
    164e:	581b      	ldr	r3, [r3, r0]
    1650:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1652:	2000      	movs	r0, #0
    1654:	e030      	b.n	16b8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    1656:	4b1a      	ldr	r3, [pc, #104]	; (16c0 <system_clock_source_get_hz+0x7c>)
    1658:	6918      	ldr	r0, [r3, #16]
    165a:	e02d      	b.n	16b8 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    165c:	4b19      	ldr	r3, [pc, #100]	; (16c4 <system_clock_source_get_hz+0x80>)
    165e:	6a1b      	ldr	r3, [r3, #32]
    1660:	059b      	lsls	r3, r3, #22
    1662:	0f9b      	lsrs	r3, r3, #30
    1664:	4818      	ldr	r0, [pc, #96]	; (16c8 <system_clock_source_get_hz+0x84>)
    1666:	40d8      	lsrs	r0, r3
    1668:	e026      	b.n	16b8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    166a:	4b15      	ldr	r3, [pc, #84]	; (16c0 <system_clock_source_get_hz+0x7c>)
    166c:	6958      	ldr	r0, [r3, #20]
    166e:	e023      	b.n	16b8 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1670:	4b13      	ldr	r3, [pc, #76]	; (16c0 <system_clock_source_get_hz+0x7c>)
    1672:	681b      	ldr	r3, [r3, #0]
			return 0;
    1674:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1676:	079b      	lsls	r3, r3, #30
    1678:	d51e      	bpl.n	16b8 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    167a:	4912      	ldr	r1, [pc, #72]	; (16c4 <system_clock_source_get_hz+0x80>)
    167c:	2210      	movs	r2, #16
    167e:	68cb      	ldr	r3, [r1, #12]
    1680:	421a      	tst	r2, r3
    1682:	d0fc      	beq.n	167e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1684:	4b0e      	ldr	r3, [pc, #56]	; (16c0 <system_clock_source_get_hz+0x7c>)
    1686:	681b      	ldr	r3, [r3, #0]
    1688:	075b      	lsls	r3, r3, #29
    168a:	d401      	bmi.n	1690 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    168c:	480f      	ldr	r0, [pc, #60]	; (16cc <system_clock_source_get_hz+0x88>)
    168e:	e013      	b.n	16b8 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1690:	2000      	movs	r0, #0
    1692:	4b0f      	ldr	r3, [pc, #60]	; (16d0 <system_clock_source_get_hz+0x8c>)
    1694:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1696:	4b0a      	ldr	r3, [pc, #40]	; (16c0 <system_clock_source_get_hz+0x7c>)
    1698:	689b      	ldr	r3, [r3, #8]
    169a:	041b      	lsls	r3, r3, #16
    169c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    169e:	4358      	muls	r0, r3
    16a0:	e00a      	b.n	16b8 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    16a2:	2350      	movs	r3, #80	; 0x50
    16a4:	4a07      	ldr	r2, [pc, #28]	; (16c4 <system_clock_source_get_hz+0x80>)
    16a6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    16a8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    16aa:	075b      	lsls	r3, r3, #29
    16ac:	d504      	bpl.n	16b8 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    16ae:	4b04      	ldr	r3, [pc, #16]	; (16c0 <system_clock_source_get_hz+0x7c>)
    16b0:	68d8      	ldr	r0, [r3, #12]
    16b2:	e001      	b.n	16b8 <system_clock_source_get_hz+0x74>
		return 32768UL;
    16b4:	2080      	movs	r0, #128	; 0x80
    16b6:	0200      	lsls	r0, r0, #8
	}
}
    16b8:	bd10      	pop	{r4, pc}
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	00002298 	.word	0x00002298
    16c0:	20000050 	.word	0x20000050
    16c4:	40000800 	.word	0x40000800
    16c8:	007a1200 	.word	0x007a1200
    16cc:	02dc6c00 	.word	0x02dc6c00
    16d0:	00001ca5 	.word	0x00001ca5

000016d4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    16d4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    16d6:	490c      	ldr	r1, [pc, #48]	; (1708 <system_clock_source_osc8m_set_config+0x34>)
    16d8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    16da:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    16dc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    16de:	7840      	ldrb	r0, [r0, #1]
    16e0:	2201      	movs	r2, #1
    16e2:	4010      	ands	r0, r2
    16e4:	0180      	lsls	r0, r0, #6
    16e6:	2640      	movs	r6, #64	; 0x40
    16e8:	43b3      	bics	r3, r6
    16ea:	4303      	orrs	r3, r0
    16ec:	402a      	ands	r2, r5
    16ee:	01d2      	lsls	r2, r2, #7
    16f0:	2080      	movs	r0, #128	; 0x80
    16f2:	4383      	bics	r3, r0
    16f4:	4313      	orrs	r3, r2
    16f6:	2203      	movs	r2, #3
    16f8:	4022      	ands	r2, r4
    16fa:	0212      	lsls	r2, r2, #8
    16fc:	4803      	ldr	r0, [pc, #12]	; (170c <system_clock_source_osc8m_set_config+0x38>)
    16fe:	4003      	ands	r3, r0
    1700:	4313      	orrs	r3, r2
    1702:	620b      	str	r3, [r1, #32]
}
    1704:	bd70      	pop	{r4, r5, r6, pc}
    1706:	46c0      	nop			; (mov r8, r8)
    1708:	40000800 	.word	0x40000800
    170c:	fffffcff 	.word	0xfffffcff

00001710 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1710:	b5f0      	push	{r4, r5, r6, r7, lr}
    1712:	46de      	mov	lr, fp
    1714:	4657      	mov	r7, sl
    1716:	464e      	mov	r6, r9
    1718:	4645      	mov	r5, r8
    171a:	b5e0      	push	{r5, r6, r7, lr}
    171c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    171e:	4b26      	ldr	r3, [pc, #152]	; (17b8 <system_clock_source_xosc32k_set_config+0xa8>)
    1720:	469b      	mov	fp, r3
    1722:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1724:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1726:	7800      	ldrb	r0, [r0, #0]
    1728:	4242      	negs	r2, r0
    172a:	4142      	adcs	r2, r0
    172c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    172e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1730:	78ca      	ldrb	r2, [r1, #3]
    1732:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1734:	790a      	ldrb	r2, [r1, #4]
    1736:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1738:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    173a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    173c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    173e:	688a      	ldr	r2, [r1, #8]
    1740:	491e      	ldr	r1, [pc, #120]	; (17bc <system_clock_source_xosc32k_set_config+0xac>)
    1742:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1744:	2101      	movs	r1, #1
    1746:	464a      	mov	r2, r9
    1748:	0092      	lsls	r2, r2, #2
    174a:	4691      	mov	r9, r2
    174c:	2204      	movs	r2, #4
    174e:	4393      	bics	r3, r2
    1750:	464a      	mov	r2, r9
    1752:	4313      	orrs	r3, r2
    1754:	4642      	mov	r2, r8
    1756:	400a      	ands	r2, r1
    1758:	00d2      	lsls	r2, r2, #3
    175a:	4690      	mov	r8, r2
    175c:	2208      	movs	r2, #8
    175e:	4393      	bics	r3, r2
    1760:	4642      	mov	r2, r8
    1762:	4313      	orrs	r3, r2
    1764:	4662      	mov	r2, ip
    1766:	400a      	ands	r2, r1
    1768:	0112      	lsls	r2, r2, #4
    176a:	4694      	mov	ip, r2
    176c:	2210      	movs	r2, #16
    176e:	4393      	bics	r3, r2
    1770:	4662      	mov	r2, ip
    1772:	4313      	orrs	r3, r2
    1774:	4008      	ands	r0, r1
    1776:	0140      	lsls	r0, r0, #5
    1778:	2220      	movs	r2, #32
    177a:	4393      	bics	r3, r2
    177c:	4303      	orrs	r3, r0
    177e:	400f      	ands	r7, r1
    1780:	01bf      	lsls	r7, r7, #6
    1782:	2040      	movs	r0, #64	; 0x40
    1784:	4383      	bics	r3, r0
    1786:	433b      	orrs	r3, r7
    1788:	400e      	ands	r6, r1
    178a:	01f6      	lsls	r6, r6, #7
    178c:	3040      	adds	r0, #64	; 0x40
    178e:	4383      	bics	r3, r0
    1790:	4333      	orrs	r3, r6
    1792:	3879      	subs	r0, #121	; 0x79
    1794:	4005      	ands	r5, r0
    1796:	022d      	lsls	r5, r5, #8
    1798:	4809      	ldr	r0, [pc, #36]	; (17c0 <system_clock_source_xosc32k_set_config+0xb0>)
    179a:	4003      	ands	r3, r0
    179c:	432b      	orrs	r3, r5
    179e:	4021      	ands	r1, r4
    17a0:	0309      	lsls	r1, r1, #12
    17a2:	4808      	ldr	r0, [pc, #32]	; (17c4 <system_clock_source_xosc32k_set_config+0xb4>)
    17a4:	4003      	ands	r3, r0
    17a6:	430b      	orrs	r3, r1
    17a8:	465a      	mov	r2, fp
    17aa:	8293      	strh	r3, [r2, #20]
}
    17ac:	bc3c      	pop	{r2, r3, r4, r5}
    17ae:	4690      	mov	r8, r2
    17b0:	4699      	mov	r9, r3
    17b2:	46a2      	mov	sl, r4
    17b4:	46ab      	mov	fp, r5
    17b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17b8:	40000800 	.word	0x40000800
    17bc:	20000050 	.word	0x20000050
    17c0:	fffff8ff 	.word	0xfffff8ff
    17c4:	ffffefff 	.word	0xffffefff

000017c8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    17c8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    17ca:	7a03      	ldrb	r3, [r0, #8]
    17cc:	069b      	lsls	r3, r3, #26
    17ce:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    17d0:	8942      	ldrh	r2, [r0, #10]
    17d2:	0592      	lsls	r2, r2, #22
    17d4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    17d6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    17d8:	4918      	ldr	r1, [pc, #96]	; (183c <system_clock_source_dfll_set_config+0x74>)
    17da:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    17dc:	7983      	ldrb	r3, [r0, #6]
    17de:	79c2      	ldrb	r2, [r0, #7]
    17e0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    17e2:	8842      	ldrh	r2, [r0, #2]
    17e4:	8884      	ldrh	r4, [r0, #4]
    17e6:	4322      	orrs	r2, r4
    17e8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    17ea:	7842      	ldrb	r2, [r0, #1]
    17ec:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    17ee:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    17f0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    17f2:	7803      	ldrb	r3, [r0, #0]
    17f4:	2b04      	cmp	r3, #4
    17f6:	d011      	beq.n	181c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    17f8:	2b20      	cmp	r3, #32
    17fa:	d10e      	bne.n	181a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    17fc:	7b03      	ldrb	r3, [r0, #12]
    17fe:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1800:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1802:	4313      	orrs	r3, r2
    1804:	89c2      	ldrh	r2, [r0, #14]
    1806:	0412      	lsls	r2, r2, #16
    1808:	490d      	ldr	r1, [pc, #52]	; (1840 <system_clock_source_dfll_set_config+0x78>)
    180a:	400a      	ands	r2, r1
    180c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    180e:	4a0b      	ldr	r2, [pc, #44]	; (183c <system_clock_source_dfll_set_config+0x74>)
    1810:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1812:	6811      	ldr	r1, [r2, #0]
    1814:	4b0b      	ldr	r3, [pc, #44]	; (1844 <system_clock_source_dfll_set_config+0x7c>)
    1816:	430b      	orrs	r3, r1
    1818:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    181a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    181c:	7b03      	ldrb	r3, [r0, #12]
    181e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1820:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1822:	4313      	orrs	r3, r2
    1824:	89c2      	ldrh	r2, [r0, #14]
    1826:	0412      	lsls	r2, r2, #16
    1828:	4905      	ldr	r1, [pc, #20]	; (1840 <system_clock_source_dfll_set_config+0x78>)
    182a:	400a      	ands	r2, r1
    182c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    182e:	4a03      	ldr	r2, [pc, #12]	; (183c <system_clock_source_dfll_set_config+0x74>)
    1830:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1832:	6813      	ldr	r3, [r2, #0]
    1834:	2104      	movs	r1, #4
    1836:	430b      	orrs	r3, r1
    1838:	6013      	str	r3, [r2, #0]
    183a:	e7ee      	b.n	181a <system_clock_source_dfll_set_config+0x52>
    183c:	20000050 	.word	0x20000050
    1840:	03ff0000 	.word	0x03ff0000
    1844:	00000424 	.word	0x00000424

00001848 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1848:	2808      	cmp	r0, #8
    184a:	d803      	bhi.n	1854 <system_clock_source_enable+0xc>
    184c:	0080      	lsls	r0, r0, #2
    184e:	4b25      	ldr	r3, [pc, #148]	; (18e4 <system_clock_source_enable+0x9c>)
    1850:	581b      	ldr	r3, [r3, r0]
    1852:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1854:	2017      	movs	r0, #23
    1856:	e044      	b.n	18e2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1858:	4a23      	ldr	r2, [pc, #140]	; (18e8 <system_clock_source_enable+0xa0>)
    185a:	6a13      	ldr	r3, [r2, #32]
    185c:	2102      	movs	r1, #2
    185e:	430b      	orrs	r3, r1
    1860:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1862:	2000      	movs	r0, #0
    1864:	e03d      	b.n	18e2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1866:	4a20      	ldr	r2, [pc, #128]	; (18e8 <system_clock_source_enable+0xa0>)
    1868:	6993      	ldr	r3, [r2, #24]
    186a:	2102      	movs	r1, #2
    186c:	430b      	orrs	r3, r1
    186e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1870:	2000      	movs	r0, #0
		break;
    1872:	e036      	b.n	18e2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1874:	4a1c      	ldr	r2, [pc, #112]	; (18e8 <system_clock_source_enable+0xa0>)
    1876:	8a13      	ldrh	r3, [r2, #16]
    1878:	2102      	movs	r1, #2
    187a:	430b      	orrs	r3, r1
    187c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    187e:	2000      	movs	r0, #0
		break;
    1880:	e02f      	b.n	18e2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1882:	4a19      	ldr	r2, [pc, #100]	; (18e8 <system_clock_source_enable+0xa0>)
    1884:	8a93      	ldrh	r3, [r2, #20]
    1886:	2102      	movs	r1, #2
    1888:	430b      	orrs	r3, r1
    188a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    188c:	2000      	movs	r0, #0
		break;
    188e:	e028      	b.n	18e2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1890:	4916      	ldr	r1, [pc, #88]	; (18ec <system_clock_source_enable+0xa4>)
    1892:	680b      	ldr	r3, [r1, #0]
    1894:	2202      	movs	r2, #2
    1896:	4313      	orrs	r3, r2
    1898:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    189a:	4b13      	ldr	r3, [pc, #76]	; (18e8 <system_clock_source_enable+0xa0>)
    189c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    189e:	0019      	movs	r1, r3
    18a0:	320e      	adds	r2, #14
    18a2:	68cb      	ldr	r3, [r1, #12]
    18a4:	421a      	tst	r2, r3
    18a6:	d0fc      	beq.n	18a2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    18a8:	4a10      	ldr	r2, [pc, #64]	; (18ec <system_clock_source_enable+0xa4>)
    18aa:	6891      	ldr	r1, [r2, #8]
    18ac:	4b0e      	ldr	r3, [pc, #56]	; (18e8 <system_clock_source_enable+0xa0>)
    18ae:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    18b0:	6852      	ldr	r2, [r2, #4]
    18b2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    18b4:	2200      	movs	r2, #0
    18b6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    18b8:	0019      	movs	r1, r3
    18ba:	3210      	adds	r2, #16
    18bc:	68cb      	ldr	r3, [r1, #12]
    18be:	421a      	tst	r2, r3
    18c0:	d0fc      	beq.n	18bc <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    18c2:	4b0a      	ldr	r3, [pc, #40]	; (18ec <system_clock_source_enable+0xa4>)
    18c4:	681b      	ldr	r3, [r3, #0]
    18c6:	b29b      	uxth	r3, r3
    18c8:	4a07      	ldr	r2, [pc, #28]	; (18e8 <system_clock_source_enable+0xa0>)
    18ca:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    18cc:	2000      	movs	r0, #0
    18ce:	e008      	b.n	18e2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    18d0:	4905      	ldr	r1, [pc, #20]	; (18e8 <system_clock_source_enable+0xa0>)
    18d2:	2244      	movs	r2, #68	; 0x44
    18d4:	5c8b      	ldrb	r3, [r1, r2]
    18d6:	2002      	movs	r0, #2
    18d8:	4303      	orrs	r3, r0
    18da:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    18dc:	2000      	movs	r0, #0
		break;
    18de:	e000      	b.n	18e2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    18e0:	2000      	movs	r0, #0
}
    18e2:	4770      	bx	lr
    18e4:	000022bc 	.word	0x000022bc
    18e8:	40000800 	.word	0x40000800
    18ec:	20000050 	.word	0x20000050

000018f0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    18f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18f2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    18f4:	22c2      	movs	r2, #194	; 0xc2
    18f6:	00d2      	lsls	r2, r2, #3
    18f8:	4b47      	ldr	r3, [pc, #284]	; (1a18 <system_clock_init+0x128>)
    18fa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    18fc:	4a47      	ldr	r2, [pc, #284]	; (1a1c <system_clock_init+0x12c>)
    18fe:	6853      	ldr	r3, [r2, #4]
    1900:	211e      	movs	r1, #30
    1902:	438b      	bics	r3, r1
    1904:	391a      	subs	r1, #26
    1906:	430b      	orrs	r3, r1
    1908:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    190a:	2202      	movs	r2, #2
    190c:	ab01      	add	r3, sp, #4
    190e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1910:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1912:	4d43      	ldr	r5, [pc, #268]	; (1a20 <system_clock_init+0x130>)
    1914:	b2e0      	uxtb	r0, r4
    1916:	a901      	add	r1, sp, #4
    1918:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    191a:	3401      	adds	r4, #1
    191c:	2c25      	cmp	r4, #37	; 0x25
    191e:	d1f9      	bne.n	1914 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1920:	a80a      	add	r0, sp, #40	; 0x28
    1922:	2300      	movs	r3, #0
    1924:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1926:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1928:	2280      	movs	r2, #128	; 0x80
    192a:	0212      	lsls	r2, r2, #8
    192c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    192e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1930:	2201      	movs	r2, #1
    1932:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1934:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1936:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1938:	3202      	adds	r2, #2
    193a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    193c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    193e:	4b39      	ldr	r3, [pc, #228]	; (1a24 <system_clock_init+0x134>)
    1940:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1942:	2005      	movs	r0, #5
    1944:	4b38      	ldr	r3, [pc, #224]	; (1a28 <system_clock_init+0x138>)
    1946:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1948:	4933      	ldr	r1, [pc, #204]	; (1a18 <system_clock_init+0x128>)
    194a:	2202      	movs	r2, #2
    194c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    194e:	421a      	tst	r2, r3
    1950:	d0fc      	beq.n	194c <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1952:	4a31      	ldr	r2, [pc, #196]	; (1a18 <system_clock_init+0x128>)
    1954:	8a93      	ldrh	r3, [r2, #20]
    1956:	2180      	movs	r1, #128	; 0x80
    1958:	430b      	orrs	r3, r1
    195a:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    195c:	ab05      	add	r3, sp, #20
    195e:	2100      	movs	r1, #0
    1960:	2200      	movs	r2, #0
    1962:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1964:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1966:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1968:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    196a:	313f      	adds	r1, #63	; 0x3f
    196c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    196e:	393b      	subs	r1, #59	; 0x3b
    1970:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1972:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1974:	4b2d      	ldr	r3, [pc, #180]	; (1a2c <system_clock_init+0x13c>)
    1976:	681b      	ldr	r3, [r3, #0]
    1978:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    197a:	2b3f      	cmp	r3, #63	; 0x3f
    197c:	d04a      	beq.n	1a14 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    197e:	a805      	add	r0, sp, #20
    1980:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1982:	4b2b      	ldr	r3, [pc, #172]	; (1a30 <system_clock_init+0x140>)
    1984:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1986:	2307      	movs	r3, #7
    1988:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    198a:	3338      	adds	r3, #56	; 0x38
    198c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    198e:	4b29      	ldr	r3, [pc, #164]	; (1a34 <system_clock_init+0x144>)
    1990:	4798      	blx	r3
	config->run_in_standby  = false;
    1992:	a804      	add	r0, sp, #16
    1994:	2500      	movs	r5, #0
    1996:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1998:	2601      	movs	r6, #1
    199a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    199c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    199e:	4b26      	ldr	r3, [pc, #152]	; (1a38 <system_clock_init+0x148>)
    19a0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    19a2:	2006      	movs	r0, #6
    19a4:	4f20      	ldr	r7, [pc, #128]	; (1a28 <system_clock_init+0x138>)
    19a6:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    19a8:	4b24      	ldr	r3, [pc, #144]	; (1a3c <system_clock_init+0x14c>)
    19aa:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    19ac:	ac01      	add	r4, sp, #4
    19ae:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    19b0:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    19b2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    19b4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    19b6:	2305      	movs	r3, #5
    19b8:	7023      	strb	r3, [r4, #0]
    19ba:	0021      	movs	r1, r4
    19bc:	2001      	movs	r0, #1
    19be:	4b20      	ldr	r3, [pc, #128]	; (1a40 <system_clock_init+0x150>)
    19c0:	4798      	blx	r3
    19c2:	2001      	movs	r0, #1
    19c4:	4b1f      	ldr	r3, [pc, #124]	; (1a44 <system_clock_init+0x154>)
    19c6:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    19c8:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    19ca:	0021      	movs	r1, r4
    19cc:	2000      	movs	r0, #0
    19ce:	4b14      	ldr	r3, [pc, #80]	; (1a20 <system_clock_init+0x130>)
    19d0:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    19d2:	2000      	movs	r0, #0
    19d4:	4b1c      	ldr	r3, [pc, #112]	; (1a48 <system_clock_init+0x158>)
    19d6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    19d8:	2007      	movs	r0, #7
    19da:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    19dc:	490e      	ldr	r1, [pc, #56]	; (1a18 <system_clock_init+0x128>)
    19de:	22d0      	movs	r2, #208	; 0xd0
    19e0:	68cb      	ldr	r3, [r1, #12]
    19e2:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    19e4:	2bd0      	cmp	r3, #208	; 0xd0
    19e6:	d1fb      	bne.n	19e0 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    19e8:	4a18      	ldr	r2, [pc, #96]	; (1a4c <system_clock_init+0x15c>)
    19ea:	2300      	movs	r3, #0
    19ec:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    19ee:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    19f0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    19f2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    19f4:	a901      	add	r1, sp, #4
    19f6:	2201      	movs	r2, #1
    19f8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    19fa:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    19fc:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    19fe:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1a00:	3307      	adds	r3, #7
    1a02:	700b      	strb	r3, [r1, #0]
    1a04:	2000      	movs	r0, #0
    1a06:	4b0e      	ldr	r3, [pc, #56]	; (1a40 <system_clock_init+0x150>)
    1a08:	4798      	blx	r3
    1a0a:	2000      	movs	r0, #0
    1a0c:	4b0d      	ldr	r3, [pc, #52]	; (1a44 <system_clock_init+0x154>)
    1a0e:	4798      	blx	r3
#endif
}
    1a10:	b00f      	add	sp, #60	; 0x3c
    1a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1a14:	3b20      	subs	r3, #32
    1a16:	e7b2      	b.n	197e <system_clock_init+0x8e>
    1a18:	40000800 	.word	0x40000800
    1a1c:	41004000 	.word	0x41004000
    1a20:	00001c89 	.word	0x00001c89
    1a24:	00001711 	.word	0x00001711
    1a28:	00001849 	.word	0x00001849
    1a2c:	00806024 	.word	0x00806024
    1a30:	000005b9 	.word	0x000005b9
    1a34:	000017c9 	.word	0x000017c9
    1a38:	000016d5 	.word	0x000016d5
    1a3c:	00001a51 	.word	0x00001a51
    1a40:	00001a75 	.word	0x00001a75
    1a44:	00001b2d 	.word	0x00001b2d
    1a48:	00001bfd 	.word	0x00001bfd
    1a4c:	40000400 	.word	0x40000400

00001a50 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1a50:	4a06      	ldr	r2, [pc, #24]	; (1a6c <system_gclk_init+0x1c>)
    1a52:	6993      	ldr	r3, [r2, #24]
    1a54:	2108      	movs	r1, #8
    1a56:	430b      	orrs	r3, r1
    1a58:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1a5a:	2201      	movs	r2, #1
    1a5c:	4b04      	ldr	r3, [pc, #16]	; (1a70 <system_gclk_init+0x20>)
    1a5e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1a60:	0019      	movs	r1, r3
    1a62:	780b      	ldrb	r3, [r1, #0]
    1a64:	4213      	tst	r3, r2
    1a66:	d1fc      	bne.n	1a62 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1a68:	4770      	bx	lr
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	40000400 	.word	0x40000400
    1a70:	40000c00 	.word	0x40000c00

00001a74 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a74:	b570      	push	{r4, r5, r6, lr}
    1a76:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a78:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a7a:	780d      	ldrb	r5, [r1, #0]
    1a7c:	022d      	lsls	r5, r5, #8
    1a7e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a80:	784b      	ldrb	r3, [r1, #1]
    1a82:	2b00      	cmp	r3, #0
    1a84:	d002      	beq.n	1a8c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a86:	2380      	movs	r3, #128	; 0x80
    1a88:	02db      	lsls	r3, r3, #11
    1a8a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a8c:	7a4b      	ldrb	r3, [r1, #9]
    1a8e:	2b00      	cmp	r3, #0
    1a90:	d002      	beq.n	1a98 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a92:	2380      	movs	r3, #128	; 0x80
    1a94:	031b      	lsls	r3, r3, #12
    1a96:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a98:	6848      	ldr	r0, [r1, #4]
    1a9a:	2801      	cmp	r0, #1
    1a9c:	d910      	bls.n	1ac0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a9e:	1e43      	subs	r3, r0, #1
    1aa0:	4218      	tst	r0, r3
    1aa2:	d134      	bne.n	1b0e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1aa4:	2802      	cmp	r0, #2
    1aa6:	d930      	bls.n	1b0a <system_gclk_gen_set_config+0x96>
    1aa8:	2302      	movs	r3, #2
    1aaa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1aac:	3201      	adds	r2, #1
						mask <<= 1) {
    1aae:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1ab0:	4298      	cmp	r0, r3
    1ab2:	d8fb      	bhi.n	1aac <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1ab4:	0212      	lsls	r2, r2, #8
    1ab6:	4332      	orrs	r2, r6
    1ab8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1aba:	2380      	movs	r3, #128	; 0x80
    1abc:	035b      	lsls	r3, r3, #13
    1abe:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1ac0:	7a0b      	ldrb	r3, [r1, #8]
    1ac2:	2b00      	cmp	r3, #0
    1ac4:	d002      	beq.n	1acc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1ac6:	2380      	movs	r3, #128	; 0x80
    1ac8:	039b      	lsls	r3, r3, #14
    1aca:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1acc:	4a13      	ldr	r2, [pc, #76]	; (1b1c <system_gclk_gen_set_config+0xa8>)
    1ace:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1ad0:	b25b      	sxtb	r3, r3
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	dbfb      	blt.n	1ace <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1ad6:	4b12      	ldr	r3, [pc, #72]	; (1b20 <system_gclk_gen_set_config+0xac>)
    1ad8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ada:	4b12      	ldr	r3, [pc, #72]	; (1b24 <system_gclk_gen_set_config+0xb0>)
    1adc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ade:	4a0f      	ldr	r2, [pc, #60]	; (1b1c <system_gclk_gen_set_config+0xa8>)
    1ae0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1ae2:	b25b      	sxtb	r3, r3
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	dbfb      	blt.n	1ae0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1ae8:	4b0c      	ldr	r3, [pc, #48]	; (1b1c <system_gclk_gen_set_config+0xa8>)
    1aea:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1aec:	001a      	movs	r2, r3
    1aee:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1af0:	b25b      	sxtb	r3, r3
    1af2:	2b00      	cmp	r3, #0
    1af4:	dbfb      	blt.n	1aee <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1af6:	4a09      	ldr	r2, [pc, #36]	; (1b1c <system_gclk_gen_set_config+0xa8>)
    1af8:	6853      	ldr	r3, [r2, #4]
    1afa:	2180      	movs	r1, #128	; 0x80
    1afc:	0249      	lsls	r1, r1, #9
    1afe:	400b      	ands	r3, r1
    1b00:	431d      	orrs	r5, r3
    1b02:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1b04:	4b08      	ldr	r3, [pc, #32]	; (1b28 <system_gclk_gen_set_config+0xb4>)
    1b06:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b08:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1b0a:	2200      	movs	r2, #0
    1b0c:	e7d2      	b.n	1ab4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1b0e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1b10:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1b12:	2380      	movs	r3, #128	; 0x80
    1b14:	029b      	lsls	r3, r3, #10
    1b16:	431d      	orrs	r5, r3
    1b18:	e7d2      	b.n	1ac0 <system_gclk_gen_set_config+0x4c>
    1b1a:	46c0      	nop			; (mov r8, r8)
    1b1c:	40000c00 	.word	0x40000c00
    1b20:	00001579 	.word	0x00001579
    1b24:	40000c08 	.word	0x40000c08
    1b28:	000015b9 	.word	0x000015b9

00001b2c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1b2c:	b510      	push	{r4, lr}
    1b2e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b30:	4a0b      	ldr	r2, [pc, #44]	; (1b60 <system_gclk_gen_enable+0x34>)
    1b32:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b34:	b25b      	sxtb	r3, r3
    1b36:	2b00      	cmp	r3, #0
    1b38:	dbfb      	blt.n	1b32 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1b3a:	4b0a      	ldr	r3, [pc, #40]	; (1b64 <system_gclk_gen_enable+0x38>)
    1b3c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b3e:	4b0a      	ldr	r3, [pc, #40]	; (1b68 <system_gclk_gen_enable+0x3c>)
    1b40:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b42:	4a07      	ldr	r2, [pc, #28]	; (1b60 <system_gclk_gen_enable+0x34>)
    1b44:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b46:	b25b      	sxtb	r3, r3
    1b48:	2b00      	cmp	r3, #0
    1b4a:	dbfb      	blt.n	1b44 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1b4c:	4a04      	ldr	r2, [pc, #16]	; (1b60 <system_gclk_gen_enable+0x34>)
    1b4e:	6851      	ldr	r1, [r2, #4]
    1b50:	2380      	movs	r3, #128	; 0x80
    1b52:	025b      	lsls	r3, r3, #9
    1b54:	430b      	orrs	r3, r1
    1b56:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1b58:	4b04      	ldr	r3, [pc, #16]	; (1b6c <system_gclk_gen_enable+0x40>)
    1b5a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b5c:	bd10      	pop	{r4, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	40000c00 	.word	0x40000c00
    1b64:	00001579 	.word	0x00001579
    1b68:	40000c04 	.word	0x40000c04
    1b6c:	000015b9 	.word	0x000015b9

00001b70 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1b70:	b570      	push	{r4, r5, r6, lr}
    1b72:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b74:	4a1a      	ldr	r2, [pc, #104]	; (1be0 <system_gclk_gen_get_hz+0x70>)
    1b76:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b78:	b25b      	sxtb	r3, r3
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	dbfb      	blt.n	1b76 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1b7e:	4b19      	ldr	r3, [pc, #100]	; (1be4 <system_gclk_gen_get_hz+0x74>)
    1b80:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b82:	4b19      	ldr	r3, [pc, #100]	; (1be8 <system_gclk_gen_get_hz+0x78>)
    1b84:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b86:	4a16      	ldr	r2, [pc, #88]	; (1be0 <system_gclk_gen_get_hz+0x70>)
    1b88:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b8a:	b25b      	sxtb	r3, r3
    1b8c:	2b00      	cmp	r3, #0
    1b8e:	dbfb      	blt.n	1b88 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1b90:	4e13      	ldr	r6, [pc, #76]	; (1be0 <system_gclk_gen_get_hz+0x70>)
    1b92:	6870      	ldr	r0, [r6, #4]
    1b94:	04c0      	lsls	r0, r0, #19
    1b96:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b98:	4b14      	ldr	r3, [pc, #80]	; (1bec <system_gclk_gen_get_hz+0x7c>)
    1b9a:	4798      	blx	r3
    1b9c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b9e:	4b12      	ldr	r3, [pc, #72]	; (1be8 <system_gclk_gen_get_hz+0x78>)
    1ba0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1ba2:	6876      	ldr	r6, [r6, #4]
    1ba4:	02f6      	lsls	r6, r6, #11
    1ba6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ba8:	4b11      	ldr	r3, [pc, #68]	; (1bf0 <system_gclk_gen_get_hz+0x80>)
    1baa:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1bac:	4a0c      	ldr	r2, [pc, #48]	; (1be0 <system_gclk_gen_get_hz+0x70>)
    1bae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1bb0:	b25b      	sxtb	r3, r3
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	dbfb      	blt.n	1bae <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1bb6:	4b0a      	ldr	r3, [pc, #40]	; (1be0 <system_gclk_gen_get_hz+0x70>)
    1bb8:	689c      	ldr	r4, [r3, #8]
    1bba:	0224      	lsls	r4, r4, #8
    1bbc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1bbe:	4b0d      	ldr	r3, [pc, #52]	; (1bf4 <system_gclk_gen_get_hz+0x84>)
    1bc0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1bc2:	2e00      	cmp	r6, #0
    1bc4:	d107      	bne.n	1bd6 <system_gclk_gen_get_hz+0x66>
    1bc6:	2c01      	cmp	r4, #1
    1bc8:	d907      	bls.n	1bda <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1bca:	0021      	movs	r1, r4
    1bcc:	0028      	movs	r0, r5
    1bce:	4b0a      	ldr	r3, [pc, #40]	; (1bf8 <system_gclk_gen_get_hz+0x88>)
    1bd0:	4798      	blx	r3
    1bd2:	0005      	movs	r5, r0
    1bd4:	e001      	b.n	1bda <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1bd6:	3401      	adds	r4, #1
    1bd8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1bda:	0028      	movs	r0, r5
    1bdc:	bd70      	pop	{r4, r5, r6, pc}
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	40000c00 	.word	0x40000c00
    1be4:	00001579 	.word	0x00001579
    1be8:	40000c04 	.word	0x40000c04
    1bec:	00001645 	.word	0x00001645
    1bf0:	40000c08 	.word	0x40000c08
    1bf4:	000015b9 	.word	0x000015b9
    1bf8:	00002045 	.word	0x00002045

00001bfc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1bfc:	b510      	push	{r4, lr}
    1bfe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c00:	4b06      	ldr	r3, [pc, #24]	; (1c1c <system_gclk_chan_enable+0x20>)
    1c02:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c04:	4b06      	ldr	r3, [pc, #24]	; (1c20 <system_gclk_chan_enable+0x24>)
    1c06:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1c08:	4a06      	ldr	r2, [pc, #24]	; (1c24 <system_gclk_chan_enable+0x28>)
    1c0a:	8853      	ldrh	r3, [r2, #2]
    1c0c:	2180      	movs	r1, #128	; 0x80
    1c0e:	01c9      	lsls	r1, r1, #7
    1c10:	430b      	orrs	r3, r1
    1c12:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1c14:	4b04      	ldr	r3, [pc, #16]	; (1c28 <system_gclk_chan_enable+0x2c>)
    1c16:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c18:	bd10      	pop	{r4, pc}
    1c1a:	46c0      	nop			; (mov r8, r8)
    1c1c:	00001579 	.word	0x00001579
    1c20:	40000c02 	.word	0x40000c02
    1c24:	40000c00 	.word	0x40000c00
    1c28:	000015b9 	.word	0x000015b9

00001c2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1c2c:	b510      	push	{r4, lr}
    1c2e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c30:	4b0f      	ldr	r3, [pc, #60]	; (1c70 <system_gclk_chan_disable+0x44>)
    1c32:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c34:	4b0f      	ldr	r3, [pc, #60]	; (1c74 <system_gclk_chan_disable+0x48>)
    1c36:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1c38:	4a0f      	ldr	r2, [pc, #60]	; (1c78 <system_gclk_chan_disable+0x4c>)
    1c3a:	8853      	ldrh	r3, [r2, #2]
    1c3c:	051b      	lsls	r3, r3, #20
    1c3e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1c40:	8853      	ldrh	r3, [r2, #2]
    1c42:	490e      	ldr	r1, [pc, #56]	; (1c7c <system_gclk_chan_disable+0x50>)
    1c44:	400b      	ands	r3, r1
    1c46:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c48:	8853      	ldrh	r3, [r2, #2]
    1c4a:	490d      	ldr	r1, [pc, #52]	; (1c80 <system_gclk_chan_disable+0x54>)
    1c4c:	400b      	ands	r3, r1
    1c4e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1c50:	0011      	movs	r1, r2
    1c52:	2280      	movs	r2, #128	; 0x80
    1c54:	01d2      	lsls	r2, r2, #7
    1c56:	884b      	ldrh	r3, [r1, #2]
    1c58:	4213      	tst	r3, r2
    1c5a:	d1fc      	bne.n	1c56 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1c5c:	4906      	ldr	r1, [pc, #24]	; (1c78 <system_gclk_chan_disable+0x4c>)
    1c5e:	884a      	ldrh	r2, [r1, #2]
    1c60:	0203      	lsls	r3, r0, #8
    1c62:	4806      	ldr	r0, [pc, #24]	; (1c7c <system_gclk_chan_disable+0x50>)
    1c64:	4002      	ands	r2, r0
    1c66:	4313      	orrs	r3, r2
    1c68:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1c6a:	4b06      	ldr	r3, [pc, #24]	; (1c84 <system_gclk_chan_disable+0x58>)
    1c6c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c6e:	bd10      	pop	{r4, pc}
    1c70:	00001579 	.word	0x00001579
    1c74:	40000c02 	.word	0x40000c02
    1c78:	40000c00 	.word	0x40000c00
    1c7c:	fffff0ff 	.word	0xfffff0ff
    1c80:	ffffbfff 	.word	0xffffbfff
    1c84:	000015b9 	.word	0x000015b9

00001c88 <system_gclk_chan_set_config>:
{
    1c88:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1c8a:	780c      	ldrb	r4, [r1, #0]
    1c8c:	0224      	lsls	r4, r4, #8
    1c8e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1c90:	4b02      	ldr	r3, [pc, #8]	; (1c9c <system_gclk_chan_set_config+0x14>)
    1c92:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1c94:	b2a4      	uxth	r4, r4
    1c96:	4b02      	ldr	r3, [pc, #8]	; (1ca0 <system_gclk_chan_set_config+0x18>)
    1c98:	805c      	strh	r4, [r3, #2]
}
    1c9a:	bd10      	pop	{r4, pc}
    1c9c:	00001c2d 	.word	0x00001c2d
    1ca0:	40000c00 	.word	0x40000c00

00001ca4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1ca4:	b510      	push	{r4, lr}
    1ca6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1ca8:	4b06      	ldr	r3, [pc, #24]	; (1cc4 <system_gclk_chan_get_hz+0x20>)
    1caa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1cac:	4b06      	ldr	r3, [pc, #24]	; (1cc8 <system_gclk_chan_get_hz+0x24>)
    1cae:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1cb0:	4b06      	ldr	r3, [pc, #24]	; (1ccc <system_gclk_chan_get_hz+0x28>)
    1cb2:	885c      	ldrh	r4, [r3, #2]
    1cb4:	0524      	lsls	r4, r4, #20
    1cb6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1cb8:	4b05      	ldr	r3, [pc, #20]	; (1cd0 <system_gclk_chan_get_hz+0x2c>)
    1cba:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1cbc:	0020      	movs	r0, r4
    1cbe:	4b05      	ldr	r3, [pc, #20]	; (1cd4 <system_gclk_chan_get_hz+0x30>)
    1cc0:	4798      	blx	r3
}
    1cc2:	bd10      	pop	{r4, pc}
    1cc4:	00001579 	.word	0x00001579
    1cc8:	40000c02 	.word	0x40000c02
    1ccc:	40000c00 	.word	0x40000c00
    1cd0:	000015b9 	.word	0x000015b9
    1cd4:	00001b71 	.word	0x00001b71

00001cd8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1cd8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1cda:	78d3      	ldrb	r3, [r2, #3]
    1cdc:	2b00      	cmp	r3, #0
    1cde:	d135      	bne.n	1d4c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ce0:	7813      	ldrb	r3, [r2, #0]
    1ce2:	2b80      	cmp	r3, #128	; 0x80
    1ce4:	d029      	beq.n	1d3a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1ce6:	061b      	lsls	r3, r3, #24
    1ce8:	2480      	movs	r4, #128	; 0x80
    1cea:	0264      	lsls	r4, r4, #9
    1cec:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1cee:	7854      	ldrb	r4, [r2, #1]
    1cf0:	2502      	movs	r5, #2
    1cf2:	43ac      	bics	r4, r5
    1cf4:	d106      	bne.n	1d04 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1cf6:	7894      	ldrb	r4, [r2, #2]
    1cf8:	2c00      	cmp	r4, #0
    1cfa:	d120      	bne.n	1d3e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1cfc:	2480      	movs	r4, #128	; 0x80
    1cfe:	02a4      	lsls	r4, r4, #10
    1d00:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1d02:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d04:	7854      	ldrb	r4, [r2, #1]
    1d06:	3c01      	subs	r4, #1
    1d08:	2c01      	cmp	r4, #1
    1d0a:	d91c      	bls.n	1d46 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d0c:	040d      	lsls	r5, r1, #16
    1d0e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d10:	24a0      	movs	r4, #160	; 0xa0
    1d12:	05e4      	lsls	r4, r4, #23
    1d14:	432c      	orrs	r4, r5
    1d16:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d18:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d1a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d1c:	24d0      	movs	r4, #208	; 0xd0
    1d1e:	0624      	lsls	r4, r4, #24
    1d20:	432c      	orrs	r4, r5
    1d22:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d24:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1d26:	78d4      	ldrb	r4, [r2, #3]
    1d28:	2c00      	cmp	r4, #0
    1d2a:	d122      	bne.n	1d72 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1d2c:	035b      	lsls	r3, r3, #13
    1d2e:	d51c      	bpl.n	1d6a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1d30:	7893      	ldrb	r3, [r2, #2]
    1d32:	2b01      	cmp	r3, #1
    1d34:	d01e      	beq.n	1d74 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1d36:	6141      	str	r1, [r0, #20]
    1d38:	e017      	b.n	1d6a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1d3a:	2300      	movs	r3, #0
    1d3c:	e7d7      	b.n	1cee <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1d3e:	24c0      	movs	r4, #192	; 0xc0
    1d40:	02e4      	lsls	r4, r4, #11
    1d42:	4323      	orrs	r3, r4
    1d44:	e7dd      	b.n	1d02 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1d46:	4c0d      	ldr	r4, [pc, #52]	; (1d7c <_system_pinmux_config+0xa4>)
    1d48:	4023      	ands	r3, r4
    1d4a:	e7df      	b.n	1d0c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1d4c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d4e:	040c      	lsls	r4, r1, #16
    1d50:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d52:	23a0      	movs	r3, #160	; 0xa0
    1d54:	05db      	lsls	r3, r3, #23
    1d56:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d58:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d5a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d5c:	23d0      	movs	r3, #208	; 0xd0
    1d5e:	061b      	lsls	r3, r3, #24
    1d60:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d62:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1d64:	78d3      	ldrb	r3, [r2, #3]
    1d66:	2b00      	cmp	r3, #0
    1d68:	d103      	bne.n	1d72 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d6a:	7853      	ldrb	r3, [r2, #1]
    1d6c:	3b01      	subs	r3, #1
    1d6e:	2b01      	cmp	r3, #1
    1d70:	d902      	bls.n	1d78 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1d72:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1d74:	6181      	str	r1, [r0, #24]
    1d76:	e7f8      	b.n	1d6a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1d78:	6081      	str	r1, [r0, #8]
}
    1d7a:	e7fa      	b.n	1d72 <_system_pinmux_config+0x9a>
    1d7c:	fffbffff 	.word	0xfffbffff

00001d80 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1d80:	b510      	push	{r4, lr}
    1d82:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1d84:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1d86:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d88:	2900      	cmp	r1, #0
    1d8a:	d104      	bne.n	1d96 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1d8c:	0943      	lsrs	r3, r0, #5
    1d8e:	01db      	lsls	r3, r3, #7
    1d90:	4905      	ldr	r1, [pc, #20]	; (1da8 <system_pinmux_pin_set_config+0x28>)
    1d92:	468c      	mov	ip, r1
    1d94:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1d96:	241f      	movs	r4, #31
    1d98:	4020      	ands	r0, r4
    1d9a:	2101      	movs	r1, #1
    1d9c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1d9e:	0018      	movs	r0, r3
    1da0:	4b02      	ldr	r3, [pc, #8]	; (1dac <system_pinmux_pin_set_config+0x2c>)
    1da2:	4798      	blx	r3
}
    1da4:	bd10      	pop	{r4, pc}
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	41004400 	.word	0x41004400
    1dac:	00001cd9 	.word	0x00001cd9

00001db0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1db0:	4770      	bx	lr
	...

00001db4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1db4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1db6:	4b05      	ldr	r3, [pc, #20]	; (1dcc <system_init+0x18>)
    1db8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1dba:	4b05      	ldr	r3, [pc, #20]	; (1dd0 <system_init+0x1c>)
    1dbc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1dbe:	4b05      	ldr	r3, [pc, #20]	; (1dd4 <system_init+0x20>)
    1dc0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1dc2:	4b05      	ldr	r3, [pc, #20]	; (1dd8 <system_init+0x24>)
    1dc4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1dc6:	4b05      	ldr	r3, [pc, #20]	; (1ddc <system_init+0x28>)
    1dc8:	4798      	blx	r3
}
    1dca:	bd10      	pop	{r4, pc}
    1dcc:	000018f1 	.word	0x000018f1
    1dd0:	000015e9 	.word	0x000015e9
    1dd4:	00001db1 	.word	0x00001db1
    1dd8:	00001db1 	.word	0x00001db1
    1ddc:	00001db1 	.word	0x00001db1

00001de0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1de0:	e7fe      	b.n	1de0 <Dummy_Handler>
	...

00001de4 <Reset_Handler>:
{
    1de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1de6:	4a2a      	ldr	r2, [pc, #168]	; (1e90 <Reset_Handler+0xac>)
    1de8:	4b2a      	ldr	r3, [pc, #168]	; (1e94 <Reset_Handler+0xb0>)
    1dea:	429a      	cmp	r2, r3
    1dec:	d011      	beq.n	1e12 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1dee:	001a      	movs	r2, r3
    1df0:	4b29      	ldr	r3, [pc, #164]	; (1e98 <Reset_Handler+0xb4>)
    1df2:	429a      	cmp	r2, r3
    1df4:	d20d      	bcs.n	1e12 <Reset_Handler+0x2e>
    1df6:	4a29      	ldr	r2, [pc, #164]	; (1e9c <Reset_Handler+0xb8>)
    1df8:	3303      	adds	r3, #3
    1dfa:	1a9b      	subs	r3, r3, r2
    1dfc:	089b      	lsrs	r3, r3, #2
    1dfe:	3301      	adds	r3, #1
    1e00:	009b      	lsls	r3, r3, #2
    1e02:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1e04:	4823      	ldr	r0, [pc, #140]	; (1e94 <Reset_Handler+0xb0>)
    1e06:	4922      	ldr	r1, [pc, #136]	; (1e90 <Reset_Handler+0xac>)
    1e08:	588c      	ldr	r4, [r1, r2]
    1e0a:	5084      	str	r4, [r0, r2]
    1e0c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1e0e:	429a      	cmp	r2, r3
    1e10:	d1fa      	bne.n	1e08 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1e12:	4a23      	ldr	r2, [pc, #140]	; (1ea0 <Reset_Handler+0xbc>)
    1e14:	4b23      	ldr	r3, [pc, #140]	; (1ea4 <Reset_Handler+0xc0>)
    1e16:	429a      	cmp	r2, r3
    1e18:	d20a      	bcs.n	1e30 <Reset_Handler+0x4c>
    1e1a:	43d3      	mvns	r3, r2
    1e1c:	4921      	ldr	r1, [pc, #132]	; (1ea4 <Reset_Handler+0xc0>)
    1e1e:	185b      	adds	r3, r3, r1
    1e20:	2103      	movs	r1, #3
    1e22:	438b      	bics	r3, r1
    1e24:	3304      	adds	r3, #4
    1e26:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1e28:	2100      	movs	r1, #0
    1e2a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1e2c:	4293      	cmp	r3, r2
    1e2e:	d1fc      	bne.n	1e2a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1e30:	4a1d      	ldr	r2, [pc, #116]	; (1ea8 <Reset_Handler+0xc4>)
    1e32:	21ff      	movs	r1, #255	; 0xff
    1e34:	4b1d      	ldr	r3, [pc, #116]	; (1eac <Reset_Handler+0xc8>)
    1e36:	438b      	bics	r3, r1
    1e38:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1e3a:	39fd      	subs	r1, #253	; 0xfd
    1e3c:	2390      	movs	r3, #144	; 0x90
    1e3e:	005b      	lsls	r3, r3, #1
    1e40:	4a1b      	ldr	r2, [pc, #108]	; (1eb0 <Reset_Handler+0xcc>)
    1e42:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1e44:	4a1b      	ldr	r2, [pc, #108]	; (1eb4 <Reset_Handler+0xd0>)
    1e46:	78d3      	ldrb	r3, [r2, #3]
    1e48:	2503      	movs	r5, #3
    1e4a:	43ab      	bics	r3, r5
    1e4c:	2402      	movs	r4, #2
    1e4e:	4323      	orrs	r3, r4
    1e50:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1e52:	78d3      	ldrb	r3, [r2, #3]
    1e54:	270c      	movs	r7, #12
    1e56:	43bb      	bics	r3, r7
    1e58:	2608      	movs	r6, #8
    1e5a:	4333      	orrs	r3, r6
    1e5c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1e5e:	4b16      	ldr	r3, [pc, #88]	; (1eb8 <Reset_Handler+0xd4>)
    1e60:	7b98      	ldrb	r0, [r3, #14]
    1e62:	2230      	movs	r2, #48	; 0x30
    1e64:	4390      	bics	r0, r2
    1e66:	2220      	movs	r2, #32
    1e68:	4310      	orrs	r0, r2
    1e6a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1e6c:	7b99      	ldrb	r1, [r3, #14]
    1e6e:	43b9      	bics	r1, r7
    1e70:	4331      	orrs	r1, r6
    1e72:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1e74:	7b9a      	ldrb	r2, [r3, #14]
    1e76:	43aa      	bics	r2, r5
    1e78:	4322      	orrs	r2, r4
    1e7a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1e7c:	4a0f      	ldr	r2, [pc, #60]	; (1ebc <Reset_Handler+0xd8>)
    1e7e:	6853      	ldr	r3, [r2, #4]
    1e80:	2180      	movs	r1, #128	; 0x80
    1e82:	430b      	orrs	r3, r1
    1e84:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1e86:	4b0e      	ldr	r3, [pc, #56]	; (1ec0 <Reset_Handler+0xdc>)
    1e88:	4798      	blx	r3
        main();
    1e8a:	4b0e      	ldr	r3, [pc, #56]	; (1ec4 <Reset_Handler+0xe0>)
    1e8c:	4798      	blx	r3
    1e8e:	e7fe      	b.n	1e8e <Reset_Handler+0xaa>
    1e90:	00002300 	.word	0x00002300
    1e94:	20000000 	.word	0x20000000
    1e98:	20000010 	.word	0x20000010
    1e9c:	20000004 	.word	0x20000004
    1ea0:	20000010 	.word	0x20000010
    1ea4:	200000e0 	.word	0x200000e0
    1ea8:	e000ed00 	.word	0xe000ed00
    1eac:	00000000 	.word	0x00000000
    1eb0:	41007000 	.word	0x41007000
    1eb4:	41005000 	.word	0x41005000
    1eb8:	41004800 	.word	0x41004800
    1ebc:	41004000 	.word	0x41004000
    1ec0:	0000215d 	.word	0x0000215d
    1ec4:	00001ec9 	.word	0x00001ec9

00001ec8 <main>:
	at25dfx_chip_config.cs_pin = AT25DFX_CS;
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
}

int main (void)
{
    1ec8:	b570      	push	{r4, r5, r6, lr}
    1eca:	b090      	sub	sp, #64	; 0x40
	system_init();
    1ecc:	4b43      	ldr	r3, [pc, #268]	; (1fdc <main+0x114>)
    1ece:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    1ed0:	ac02      	add	r4, sp, #8
    1ed2:	2501      	movs	r5, #1
    1ed4:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1ed6:	2300      	movs	r3, #0
    1ed8:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1eda:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1edc:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    1ede:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1ee0:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    1ee2:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    1ee4:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    1ee6:	2224      	movs	r2, #36	; 0x24
    1ee8:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1eea:	3a18      	subs	r2, #24
    1eec:	2100      	movs	r1, #0
    1eee:	a808      	add	r0, sp, #32
    1ef0:	4b3b      	ldr	r3, [pc, #236]	; (1fe0 <main+0x118>)
    1ef2:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    1ef4:	4b3b      	ldr	r3, [pc, #236]	; (1fe4 <main+0x11c>)
    1ef6:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    1ef8:	2380      	movs	r3, #128	; 0x80
    1efa:	025b      	lsls	r3, r3, #9
    1efc:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    1efe:	4b3a      	ldr	r3, [pc, #232]	; (1fe8 <main+0x120>)
    1f00:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    1f02:	4b3a      	ldr	r3, [pc, #232]	; (1fec <main+0x124>)
    1f04:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    1f06:	4b3a      	ldr	r3, [pc, #232]	; (1ff0 <main+0x128>)
    1f08:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    1f0a:	4b3a      	ldr	r3, [pc, #232]	; (1ff4 <main+0x12c>)
    1f0c:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    1f0e:	4e3a      	ldr	r6, [pc, #232]	; (1ff8 <main+0x130>)
    1f10:	0022      	movs	r2, r4
    1f12:	493a      	ldr	r1, [pc, #232]	; (1ffc <main+0x134>)
    1f14:	0030      	movs	r0, r6
    1f16:	4b3a      	ldr	r3, [pc, #232]	; (2000 <STACK_SIZE>)
    1f18:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f1a:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1f1c:	0020      	movs	r0, r4
    1f1e:	4b39      	ldr	r3, [pc, #228]	; (2004 <STACK_SIZE+0x4>)
    1f20:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1f22:	231f      	movs	r3, #31
    1f24:	4018      	ands	r0, r3
    1f26:	4085      	lsls	r5, r0
    1f28:	4b37      	ldr	r3, [pc, #220]	; (2008 <STACK_SIZE+0x8>)
    1f2a:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f2c:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    1f2e:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    1f30:	2a00      	cmp	r2, #0
    1f32:	d1fc      	bne.n	1f2e <main+0x66>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1f34:	6823      	ldr	r3, [r4, #0]
    1f36:	3202      	adds	r2, #2
    1f38:	4313      	orrs	r3, r2
    1f3a:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
    1f3c:	4c33      	ldr	r4, [pc, #204]	; (200c <STACK_SIZE+0xc>)
    1f3e:	2304      	movs	r3, #4
    1f40:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
    1f42:	3303      	adds	r3, #3
    1f44:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
    1f46:	4b2c      	ldr	r3, [pc, #176]	; (1ff8 <main+0x130>)
    1f48:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1f4a:	a901      	add	r1, sp, #4
    1f4c:	2301      	movs	r3, #1
    1f4e:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    1f50:	2200      	movs	r2, #0
    1f52:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    1f54:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    1f56:	2007      	movs	r0, #7
    1f58:	4b2d      	ldr	r3, [pc, #180]	; (2010 <STACK_SIZE+0x10>)
    1f5a:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    1f5c:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);
    1f5e:	095a      	lsrs	r2, r3, #5
	if (port_index < PORT_INST_NUM) {
    1f60:	09d8      	lsrs	r0, r3, #7
		return NULL;
    1f62:	2100      	movs	r1, #0
	if (port_index < PORT_INST_NUM) {
    1f64:	2800      	cmp	r0, #0
    1f66:	d102      	bne.n	1f6e <main+0xa6>
		return &(ports[port_index]->Group[group_index]);
    1f68:	01d2      	lsls	r2, r2, #7
    1f6a:	492a      	ldr	r1, [pc, #168]	; (2014 <STACK_SIZE+0x14>)
    1f6c:	1851      	adds	r1, r2, r1
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1f6e:	221f      	movs	r2, #31
    1f70:	401a      	ands	r2, r3
    1f72:	2301      	movs	r3, #1
    1f74:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
    1f76:	618b      	str	r3, [r1, #24]
	at25dfx_init();
	/* Insert application code here, after the board has been initialized. */
	at25dfx_chip_wake(&at25dfx_chip);
    1f78:	4c24      	ldr	r4, [pc, #144]	; (200c <STACK_SIZE+0xc>)
    1f7a:	0020      	movs	r0, r4
    1f7c:	4b26      	ldr	r3, [pc, #152]	; (2018 <STACK_SIZE+0x18>)
    1f7e:	4798      	blx	r3
	
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    1f80:	0020      	movs	r0, r4
    1f82:	4b26      	ldr	r3, [pc, #152]	; (201c <STACK_SIZE+0x1c>)
    1f84:	4798      	blx	r3
		// Handle missing or non-responsive device
	}
	at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x10000, false);				// unprotect sector
    1f86:	2580      	movs	r5, #128	; 0x80
    1f88:	026d      	lsls	r5, r5, #9
    1f8a:	2200      	movs	r2, #0
    1f8c:	0029      	movs	r1, r5
    1f8e:	0020      	movs	r0, r4
    1f90:	4b23      	ldr	r3, [pc, #140]	; (2020 <STACK_SIZE+0x20>)
    1f92:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);	// erase block
    1f94:	2200      	movs	r2, #0
    1f96:	0029      	movs	r1, r5
    1f98:	0020      	movs	r0, r4
    1f9a:	4b22      	ldr	r3, [pc, #136]	; (2024 <STACK_SIZE+0x24>)
    1f9c:	4798      	blx	r3
	at25dfx_chip_write_buffer(&at25dfx_chip, 0x10000, write_buffer, AT25DFX_BUFFER_SIZE);	// write buffer
    1f9e:	230a      	movs	r3, #10
    1fa0:	4a21      	ldr	r2, [pc, #132]	; (2028 <STACK_SIZE+0x28>)
    1fa2:	0029      	movs	r1, r5
    1fa4:	0020      	movs	r0, r4
    1fa6:	4e21      	ldr	r6, [pc, #132]	; (202c <STACK_SIZE+0x2c>)
    1fa8:	47b0      	blx	r6
	at25dfx_chip_read_buffer(&at25dfx_chip, 0x10000, read_buffer, AT25DFX_BUFFER_SIZE);		// read same location
    1faa:	230a      	movs	r3, #10
    1fac:	4a20      	ldr	r2, [pc, #128]	; (2030 <STACK_SIZE+0x30>)
    1fae:	0029      	movs	r1, r5
    1fb0:	0020      	movs	r0, r4
    1fb2:	4d20      	ldr	r5, [pc, #128]	; (2034 <STACK_SIZE+0x34>)
    1fb4:	47a8      	blx	r5
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);				// protect sector
    1fb6:	2101      	movs	r1, #1
    1fb8:	0020      	movs	r0, r4
    1fba:	4b1f      	ldr	r3, [pc, #124]	; (2038 <STACK_SIZE+0x38>)
    1fbc:	4798      	blx	r3
	at25dfx_chip_sleep(&at25dfx_chip);											// back to sleep
    1fbe:	0020      	movs	r0, r4
    1fc0:	4b1e      	ldr	r3, [pc, #120]	; (203c <STACK_SIZE+0x3c>)
    1fc2:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    1fc4:	481e      	ldr	r0, [pc, #120]	; (2040 <STACK_SIZE+0x40>)
    1fc6:	2380      	movs	r3, #128	; 0x80
    1fc8:	041b      	lsls	r3, r3, #16
		port_base->OUTSET.reg = pin_mask;
    1fca:	4912      	ldr	r1, [pc, #72]	; (2014 <STACK_SIZE+0x14>)
    1fcc:	e000      	b.n	1fd0 <main+0x108>
    1fce:	618b      	str	r3, [r1, #24]
	return (port_base->IN.reg & pin_mask);
    1fd0:	6a02      	ldr	r2, [r0, #32]
	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		/* Is button pressed? */
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    1fd2:	421a      	tst	r2, r3
    1fd4:	d1fb      	bne.n	1fce <main+0x106>
		port_base->OUTCLR.reg = pin_mask;
    1fd6:	614b      	str	r3, [r1, #20]
    1fd8:	e7fa      	b.n	1fd0 <main+0x108>
    1fda:	46c0      	nop			; (mov r8, r8)
    1fdc:	00001db5 	.word	0x00001db5
    1fe0:	000021a5 	.word	0x000021a5
    1fe4:	0001d4c0 	.word	0x0001d4c0
    1fe8:	00100002 	.word	0x00100002
    1fec:	00110002 	.word	0x00110002
    1ff0:	00120002 	.word	0x00120002
    1ff4:	00130002 	.word	0x00130002
    1ff8:	200000a4 	.word	0x200000a4
    1ffc:	42000c00 	.word	0x42000c00
    2000:	00000f61 	.word	0x00000f61
    2004:	000014e9 	.word	0x000014e9
    2008:	e000e100 	.word	0xe000e100
    200c:	2000009c 	.word	0x2000009c
    2010:	00001621 	.word	0x00001621
    2014:	41004400 	.word	0x41004400
    2018:	00000c1d 	.word	0x00000c1d
    201c:	00000115 	.word	0x00000115
    2020:	00000a5d 	.word	0x00000a5d
    2024:	00000755 	.word	0x00000755
    2028:	20000004 	.word	0x20000004
    202c:	00000319 	.word	0x00000319
    2030:	20000068 	.word	0x20000068
    2034:	00000221 	.word	0x00000221
    2038:	0000096d 	.word	0x0000096d
    203c:	00000b91 	.word	0x00000b91
    2040:	41004480 	.word	0x41004480

00002044 <__udivsi3>:
    2044:	2200      	movs	r2, #0
    2046:	0843      	lsrs	r3, r0, #1
    2048:	428b      	cmp	r3, r1
    204a:	d374      	bcc.n	2136 <__udivsi3+0xf2>
    204c:	0903      	lsrs	r3, r0, #4
    204e:	428b      	cmp	r3, r1
    2050:	d35f      	bcc.n	2112 <__udivsi3+0xce>
    2052:	0a03      	lsrs	r3, r0, #8
    2054:	428b      	cmp	r3, r1
    2056:	d344      	bcc.n	20e2 <__udivsi3+0x9e>
    2058:	0b03      	lsrs	r3, r0, #12
    205a:	428b      	cmp	r3, r1
    205c:	d328      	bcc.n	20b0 <__udivsi3+0x6c>
    205e:	0c03      	lsrs	r3, r0, #16
    2060:	428b      	cmp	r3, r1
    2062:	d30d      	bcc.n	2080 <__udivsi3+0x3c>
    2064:	22ff      	movs	r2, #255	; 0xff
    2066:	0209      	lsls	r1, r1, #8
    2068:	ba12      	rev	r2, r2
    206a:	0c03      	lsrs	r3, r0, #16
    206c:	428b      	cmp	r3, r1
    206e:	d302      	bcc.n	2076 <__udivsi3+0x32>
    2070:	1212      	asrs	r2, r2, #8
    2072:	0209      	lsls	r1, r1, #8
    2074:	d065      	beq.n	2142 <__udivsi3+0xfe>
    2076:	0b03      	lsrs	r3, r0, #12
    2078:	428b      	cmp	r3, r1
    207a:	d319      	bcc.n	20b0 <__udivsi3+0x6c>
    207c:	e000      	b.n	2080 <__udivsi3+0x3c>
    207e:	0a09      	lsrs	r1, r1, #8
    2080:	0bc3      	lsrs	r3, r0, #15
    2082:	428b      	cmp	r3, r1
    2084:	d301      	bcc.n	208a <__udivsi3+0x46>
    2086:	03cb      	lsls	r3, r1, #15
    2088:	1ac0      	subs	r0, r0, r3
    208a:	4152      	adcs	r2, r2
    208c:	0b83      	lsrs	r3, r0, #14
    208e:	428b      	cmp	r3, r1
    2090:	d301      	bcc.n	2096 <__udivsi3+0x52>
    2092:	038b      	lsls	r3, r1, #14
    2094:	1ac0      	subs	r0, r0, r3
    2096:	4152      	adcs	r2, r2
    2098:	0b43      	lsrs	r3, r0, #13
    209a:	428b      	cmp	r3, r1
    209c:	d301      	bcc.n	20a2 <__udivsi3+0x5e>
    209e:	034b      	lsls	r3, r1, #13
    20a0:	1ac0      	subs	r0, r0, r3
    20a2:	4152      	adcs	r2, r2
    20a4:	0b03      	lsrs	r3, r0, #12
    20a6:	428b      	cmp	r3, r1
    20a8:	d301      	bcc.n	20ae <__udivsi3+0x6a>
    20aa:	030b      	lsls	r3, r1, #12
    20ac:	1ac0      	subs	r0, r0, r3
    20ae:	4152      	adcs	r2, r2
    20b0:	0ac3      	lsrs	r3, r0, #11
    20b2:	428b      	cmp	r3, r1
    20b4:	d301      	bcc.n	20ba <__udivsi3+0x76>
    20b6:	02cb      	lsls	r3, r1, #11
    20b8:	1ac0      	subs	r0, r0, r3
    20ba:	4152      	adcs	r2, r2
    20bc:	0a83      	lsrs	r3, r0, #10
    20be:	428b      	cmp	r3, r1
    20c0:	d301      	bcc.n	20c6 <__udivsi3+0x82>
    20c2:	028b      	lsls	r3, r1, #10
    20c4:	1ac0      	subs	r0, r0, r3
    20c6:	4152      	adcs	r2, r2
    20c8:	0a43      	lsrs	r3, r0, #9
    20ca:	428b      	cmp	r3, r1
    20cc:	d301      	bcc.n	20d2 <__udivsi3+0x8e>
    20ce:	024b      	lsls	r3, r1, #9
    20d0:	1ac0      	subs	r0, r0, r3
    20d2:	4152      	adcs	r2, r2
    20d4:	0a03      	lsrs	r3, r0, #8
    20d6:	428b      	cmp	r3, r1
    20d8:	d301      	bcc.n	20de <__udivsi3+0x9a>
    20da:	020b      	lsls	r3, r1, #8
    20dc:	1ac0      	subs	r0, r0, r3
    20de:	4152      	adcs	r2, r2
    20e0:	d2cd      	bcs.n	207e <__udivsi3+0x3a>
    20e2:	09c3      	lsrs	r3, r0, #7
    20e4:	428b      	cmp	r3, r1
    20e6:	d301      	bcc.n	20ec <__udivsi3+0xa8>
    20e8:	01cb      	lsls	r3, r1, #7
    20ea:	1ac0      	subs	r0, r0, r3
    20ec:	4152      	adcs	r2, r2
    20ee:	0983      	lsrs	r3, r0, #6
    20f0:	428b      	cmp	r3, r1
    20f2:	d301      	bcc.n	20f8 <__udivsi3+0xb4>
    20f4:	018b      	lsls	r3, r1, #6
    20f6:	1ac0      	subs	r0, r0, r3
    20f8:	4152      	adcs	r2, r2
    20fa:	0943      	lsrs	r3, r0, #5
    20fc:	428b      	cmp	r3, r1
    20fe:	d301      	bcc.n	2104 <__udivsi3+0xc0>
    2100:	014b      	lsls	r3, r1, #5
    2102:	1ac0      	subs	r0, r0, r3
    2104:	4152      	adcs	r2, r2
    2106:	0903      	lsrs	r3, r0, #4
    2108:	428b      	cmp	r3, r1
    210a:	d301      	bcc.n	2110 <__udivsi3+0xcc>
    210c:	010b      	lsls	r3, r1, #4
    210e:	1ac0      	subs	r0, r0, r3
    2110:	4152      	adcs	r2, r2
    2112:	08c3      	lsrs	r3, r0, #3
    2114:	428b      	cmp	r3, r1
    2116:	d301      	bcc.n	211c <__udivsi3+0xd8>
    2118:	00cb      	lsls	r3, r1, #3
    211a:	1ac0      	subs	r0, r0, r3
    211c:	4152      	adcs	r2, r2
    211e:	0883      	lsrs	r3, r0, #2
    2120:	428b      	cmp	r3, r1
    2122:	d301      	bcc.n	2128 <__udivsi3+0xe4>
    2124:	008b      	lsls	r3, r1, #2
    2126:	1ac0      	subs	r0, r0, r3
    2128:	4152      	adcs	r2, r2
    212a:	0843      	lsrs	r3, r0, #1
    212c:	428b      	cmp	r3, r1
    212e:	d301      	bcc.n	2134 <__udivsi3+0xf0>
    2130:	004b      	lsls	r3, r1, #1
    2132:	1ac0      	subs	r0, r0, r3
    2134:	4152      	adcs	r2, r2
    2136:	1a41      	subs	r1, r0, r1
    2138:	d200      	bcs.n	213c <__udivsi3+0xf8>
    213a:	4601      	mov	r1, r0
    213c:	4152      	adcs	r2, r2
    213e:	4610      	mov	r0, r2
    2140:	4770      	bx	lr
    2142:	e7ff      	b.n	2144 <__udivsi3+0x100>
    2144:	b501      	push	{r0, lr}
    2146:	2000      	movs	r0, #0
    2148:	f000 f806 	bl	2158 <__aeabi_idiv0>
    214c:	bd02      	pop	{r1, pc}
    214e:	46c0      	nop			; (mov r8, r8)

00002150 <__aeabi_uidivmod>:
    2150:	2900      	cmp	r1, #0
    2152:	d0f7      	beq.n	2144 <__udivsi3+0x100>
    2154:	e776      	b.n	2044 <__udivsi3>
    2156:	4770      	bx	lr

00002158 <__aeabi_idiv0>:
    2158:	4770      	bx	lr
    215a:	46c0      	nop			; (mov r8, r8)

0000215c <__libc_init_array>:
    215c:	b570      	push	{r4, r5, r6, lr}
    215e:	2600      	movs	r6, #0
    2160:	4d0c      	ldr	r5, [pc, #48]	; (2194 <__libc_init_array+0x38>)
    2162:	4c0d      	ldr	r4, [pc, #52]	; (2198 <__libc_init_array+0x3c>)
    2164:	1b64      	subs	r4, r4, r5
    2166:	10a4      	asrs	r4, r4, #2
    2168:	42a6      	cmp	r6, r4
    216a:	d109      	bne.n	2180 <__libc_init_array+0x24>
    216c:	2600      	movs	r6, #0
    216e:	f000 f8b7 	bl	22e0 <_init>
    2172:	4d0a      	ldr	r5, [pc, #40]	; (219c <__libc_init_array+0x40>)
    2174:	4c0a      	ldr	r4, [pc, #40]	; (21a0 <__libc_init_array+0x44>)
    2176:	1b64      	subs	r4, r4, r5
    2178:	10a4      	asrs	r4, r4, #2
    217a:	42a6      	cmp	r6, r4
    217c:	d105      	bne.n	218a <__libc_init_array+0x2e>
    217e:	bd70      	pop	{r4, r5, r6, pc}
    2180:	00b3      	lsls	r3, r6, #2
    2182:	58eb      	ldr	r3, [r5, r3]
    2184:	4798      	blx	r3
    2186:	3601      	adds	r6, #1
    2188:	e7ee      	b.n	2168 <__libc_init_array+0xc>
    218a:	00b3      	lsls	r3, r6, #2
    218c:	58eb      	ldr	r3, [r5, r3]
    218e:	4798      	blx	r3
    2190:	3601      	adds	r6, #1
    2192:	e7f2      	b.n	217a <__libc_init_array+0x1e>
    2194:	000022ec 	.word	0x000022ec
    2198:	000022ec 	.word	0x000022ec
    219c:	000022ec 	.word	0x000022ec
    21a0:	000022f0 	.word	0x000022f0

000021a4 <memset>:
    21a4:	0003      	movs	r3, r0
    21a6:	1882      	adds	r2, r0, r2
    21a8:	4293      	cmp	r3, r2
    21aa:	d100      	bne.n	21ae <memset+0xa>
    21ac:	4770      	bx	lr
    21ae:	7019      	strb	r1, [r3, #0]
    21b0:	3301      	adds	r3, #1
    21b2:	e7f9      	b.n	21a8 <memset+0x4>
    21b4:	000001c6 	.word	0x000001c6
    21b8:	0000019e 	.word	0x0000019e
    21bc:	000001a2 	.word	0x000001a2
    21c0:	000001a6 	.word	0x000001a6
    21c4:	000001aa 	.word	0x000001aa
    21c8:	000001ae 	.word	0x000001ae
    21cc:	000001b2 	.word	0x000001b2
    21d0:	000001b6 	.word	0x000001b6
    21d4:	000001ba 	.word	0x000001ba
    21d8:	000001be 	.word	0x000001be
    21dc:	00000264 	.word	0x00000264
    21e0:	0000023c 	.word	0x0000023c
    21e4:	00000242 	.word	0x00000242
    21e8:	00000248 	.word	0x00000248
    21ec:	00000248 	.word	0x00000248
    21f0:	0000024e 	.word	0x0000024e
    21f4:	0000024e 	.word	0x0000024e
    21f8:	0000024e 	.word	0x0000024e
    21fc:	00000254 	.word	0x00000254
    2200:	0000025a 	.word	0x0000025a
    2204:	00000100 	.word	0x00000100
    2208:	00000366 	.word	0x00000366
    220c:	0000033e 	.word	0x0000033e
    2210:	00000344 	.word	0x00000344
    2214:	0000034a 	.word	0x0000034a
    2218:	0000034a 	.word	0x0000034a
    221c:	00000350 	.word	0x00000350
    2220:	00000350 	.word	0x00000350
    2224:	00000350 	.word	0x00000350
    2228:	00000356 	.word	0x00000356
    222c:	0000035c 	.word	0x0000035c
    2230:	00000792 	.word	0x00000792
    2234:	0000076e 	.word	0x0000076e
    2238:	00000774 	.word	0x00000774
    223c:	0000077a 	.word	0x0000077a
    2240:	0000077a 	.word	0x0000077a
    2244:	00000780 	.word	0x00000780
    2248:	00000780 	.word	0x00000780
    224c:	00000780 	.word	0x00000780
    2250:	00000786 	.word	0x00000786
    2254:	0000078c 	.word	0x0000078c
    2258:	00000a9a 	.word	0x00000a9a
    225c:	00000a76 	.word	0x00000a76
    2260:	00000a7c 	.word	0x00000a7c
    2264:	00000a82 	.word	0x00000a82
    2268:	00000a82 	.word	0x00000a82
    226c:	00000a88 	.word	0x00000a88
    2270:	00000a88 	.word	0x00000a88
    2274:	00000a88 	.word	0x00000a88
    2278:	00000a8e 	.word	0x00000a8e
    227c:	00000a94 	.word	0x00000a94
    2280:	42000800 	.word	0x42000800
    2284:	42000c00 	.word	0x42000c00
    2288:	42001000 	.word	0x42001000
    228c:	42001400 	.word	0x42001400
    2290:	42001800 	.word	0x42001800
    2294:	42001c00 	.word	0x42001c00
    2298:	00001656 	.word	0x00001656
    229c:	00001652 	.word	0x00001652
    22a0:	00001652 	.word	0x00001652
    22a4:	000016b4 	.word	0x000016b4
    22a8:	000016b4 	.word	0x000016b4
    22ac:	0000166a 	.word	0x0000166a
    22b0:	0000165c 	.word	0x0000165c
    22b4:	00001670 	.word	0x00001670
    22b8:	000016a2 	.word	0x000016a2
    22bc:	00001874 	.word	0x00001874
    22c0:	00001854 	.word	0x00001854
    22c4:	00001854 	.word	0x00001854
    22c8:	000018e0 	.word	0x000018e0
    22cc:	00001866 	.word	0x00001866
    22d0:	00001882 	.word	0x00001882
    22d4:	00001858 	.word	0x00001858
    22d8:	00001890 	.word	0x00001890
    22dc:	000018d0 	.word	0x000018d0

000022e0 <_init>:
    22e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    22e6:	bc08      	pop	{r3}
    22e8:	469e      	mov	lr, r3
    22ea:	4770      	bx	lr

000022ec <__init_array_start>:
    22ec:	000000dd 	.word	0x000000dd

000022f0 <_fini>:
    22f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22f2:	46c0      	nop			; (mov r8, r8)
    22f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    22f6:	bc08      	pop	{r3}
    22f8:	469e      	mov	lr, r3
    22fa:	4770      	bx	lr

000022fc <__fini_array_start>:
    22fc:	000000b5 	.word	0x000000b5
