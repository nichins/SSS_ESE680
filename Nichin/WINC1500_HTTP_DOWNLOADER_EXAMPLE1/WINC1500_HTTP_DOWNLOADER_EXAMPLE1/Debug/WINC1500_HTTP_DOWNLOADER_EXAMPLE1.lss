
WINC1500_HTTP_DOWNLOADER_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000aba0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001e0  20000000  0000aba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000040c  200001e0  0000ad80  000201e0  2**2
                  ALLOC
  3 .stack        00002004  200005ec  0000b18c  000201e0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
  6 .debug_info   00069558  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008e93  00000000  00000000  000897b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00018827  00000000  00000000  0009264c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f80  00000000  00000000  000aae73  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001ac8  00000000  00000000  000abdf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00023d25  00000000  00000000  000ad8bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001fa0a  00000000  00000000  000d15e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009655f  00000000  00000000  000f0fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000036b8  00000000  00000000  0018754c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	f0 25 00 20 6d 5f 00 00 69 5f 00 00 69 5f 00 00     .%. m_..i_..i_..
	...
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
		if (time.hour == 0) {
      2c:	69 5f 00 00 00 00 00 00 00 00 00 00 69 5f 00 00     i_..........i_..
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      3c:	69 5f 00 00 69 5f 00 00 69 5f 00 00 69 5f 00 00     i_..i_..i_..i_..
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
      4c:	35 41 00 00 ad 3f 00 00 69 5f 00 00 69 5f 00 00     5A...?..i_..i_..
			time.hour = 12;
      5c:	69 5f 00 00 69 5f 00 00 5d 45 00 00 6d 45 00 00     i_..i_..]E..mE..
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
			}
			module->clock_24h = false;
      6c:	7d 45 00 00 8d 45 00 00 9d 45 00 00 ad 45 00 00     }E...E...E...E..
		/* Change value in configuration structure. */
		module->clock_24h = true;
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
      7c:	39 5f 00 00 49 5f 00 00 59 5f 00 00 69 5f 00 00     9_..I_..Y_..i_..

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;

	/* Enable RTC. */
	rtc_calendar_enable(module);
      8c:	69 5f 00 00 69 5f 00 00 00 00 00 00 00 00 00 00     i_..i_..........
		if (time.pm == 1) {
      9c:	69 5f 00 00 69 5f 00 00 69 5f 00 00 69 5f 00 00     i_..i_..i_..i_..
			time.pm = 0;
      ac:	69 5f 00 00 00 00 00 00                             i_......

000000b4 <__do_global_dtors_aux>:
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
			if (alarm.time.pm == 1) {
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
			} else if (alarm.time.hour == 12) {
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
		module->clock_24h = true;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
		} else if (time.hour == 12) {
      ce:	bd10      	pop	{r4, pc}
      d0:	200001e0 	.word	0x200001e0
      d4:	00000000 	.word	0x00000000
			time.hour = 0;
      d8:	0000aba0 	.word	0x0000aba0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
				alarm.time.hour = alarm.time.hour + 12;
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
				alarm.time.pm = 0;
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
				module->clock_24h = true;
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
				alarm.time.hour = 0;
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e4 	.word	0x200001e4
     108:	0000aba0 	.word	0x0000aba0
     10c:	0000aba0 	.word	0x0000aba0
     110:	00000000 	.word	0x00000000

00000114 <at25dfx_chip_check_presence>:
     114:	b530      	push	{r4, r5, lr}
     116:	b085      	sub	sp, #20
     118:	0004      	movs	r4, r0
     11a:	2300      	movs	r3, #0
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     11c:	9303      	str	r3, [sp, #12]
     11e:	6805      	ldr	r5, [r0, #0]
     120:	4b2f      	ldr	r3, [pc, #188]	; (1e0 <at25dfx_chip_check_presence+0xcc>)
     122:	4798      	blx	r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     124:	792b      	ldrb	r3, [r5, #4]
     126:	2b00      	cmp	r3, #0
     128:	d156      	bne.n	1d8 <at25dfx_chip_check_presence+0xc4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     12a:	3301      	adds	r3, #1
     12c:	712b      	strb	r3, [r5, #4]

		while (!spi_is_ready_to_read(chip->spi)) {
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
     12e:	4b2d      	ldr	r3, [pc, #180]	; (1e4 <at25dfx_chip_check_presence+0xd0>)
     130:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     132:	229f      	movs	r2, #159	; 0x9f
     134:	ab01      	add	r3, sp, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     136:	701a      	strb	r2, [r3, #0]
		while (!spi_is_ready_to_write(chip->spi)) {
     138:	7962      	ldrb	r2, [r4, #5]
     13a:	09d1      	lsrs	r1, r2, #7
     13c:	2300      	movs	r3, #0
	if (!spi_is_ready_to_write(module)) {
     13e:	2900      	cmp	r1, #0
     140:	d104      	bne.n	14c <at25dfx_chip_check_presence+0x38>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     142:	0953      	lsrs	r3, r2, #5
		while (!spi_is_ready_to_read(chip->spi)) {
     144:	01db      	lsls	r3, r3, #7
	SercomSpi *const spi_module = &(module->hw->SPI);
     146:	4928      	ldr	r1, [pc, #160]	; (1e8 <at25dfx_chip_check_presence+0xd4>)
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     148:	468c      	mov	ip, r1
     14a:	4463      	add	r3, ip
     14c:	211f      	movs	r1, #31
     14e:	4011      	ands	r1, r2
	if (!spi_is_ready_to_read(module)) {
     150:	2201      	movs	r2, #1
     152:	408a      	lsls	r2, r1
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     154:	615a      	str	r2, [r3, #20]
     156:	2201      	movs	r2, #1
     158:	a901      	add	r1, sp, #4
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     15a:	6820      	ldr	r0, [r4, #0]
     15c:	4b23      	ldr	r3, [pc, #140]	; (1ec <at25dfx_chip_check_presence+0xd8>)
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     15e:	4798      	blx	r3
     160:	2300      	movs	r3, #0
     162:	2203      	movs	r2, #3
     164:	a903      	add	r1, sp, #12
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     166:	6820      	ldr	r0, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     168:	4d21      	ldr	r5, [pc, #132]	; (1f0 <at25dfx_chip_check_presence+0xdc>)
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     16a:	47a8      	blx	r5
	if (port_index < PORT_INST_NUM) {
     16c:	7962      	ldrb	r2, [r4, #5]
     16e:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
     170:	2300      	movs	r3, #0
     172:	2900      	cmp	r1, #0
     174:	d104      	bne.n	180 <at25dfx_chip_check_presence+0x6c>
     176:	0953      	lsrs	r3, r2, #5
     178:	01db      	lsls	r3, r3, #7
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     17a:	491b      	ldr	r1, [pc, #108]	; (1e8 <at25dfx_chip_check_presence+0xd4>)
     17c:	468c      	mov	ip, r1
     17e:	4463      	add	r3, ip
     180:	211f      	movs	r1, #31

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     182:	4011      	ands	r1, r2

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
     184:	2201      	movs	r2, #1
		return STATUS_ERR_IO;
	}
	return STATUS_OK;
     186:	408a      	lsls	r2, r1
     188:	619a      	str	r2, [r3, #24]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);
     18a:	2300      	movs	r3, #0
	module->locked = false;
     18c:	6822      	ldr	r2, [r4, #0]
     18e:	7113      	strb	r3, [r2, #4]

	return status;
     190:	7923      	ldrb	r3, [r4, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     192:	2b09      	cmp	r3, #9
     194:	d815      	bhi.n	1c2 <at25dfx_chip_check_presence+0xae>
		return status;
     196:	009b      	lsls	r3, r3, #2
}
     198:	4a16      	ldr	r2, [pc, #88]	; (1f4 <at25dfx_chip_check_presence+0xe0>)
     19a:	58d3      	ldr	r3, [r2, r3]
     19c:	469f      	mov	pc, r3
     19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <at25dfx_chip_check_presence+0xe4>)
     1a0:	e012      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
     1a2:	4b16      	ldr	r3, [pc, #88]	; (1fc <at25dfx_chip_check_presence+0xe8>)
     1a4:	e010      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
     1a6:	4b16      	ldr	r3, [pc, #88]	; (200 <at25dfx_chip_check_presence+0xec>)
     1a8:	e00e      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
     1aa:	4b16      	ldr	r3, [pc, #88]	; (204 <at25dfx_chip_check_presence+0xf0>)
		return 0x01451f;
     1ac:	e00c      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		return 0x02461f;
     1ae:	4b16      	ldr	r3, [pc, #88]	; (208 <at25dfx_chip_check_presence+0xf4>)
     1b0:	e00a      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		return 0x03461f;
     1b2:	4b16      	ldr	r3, [pc, #88]	; (20c <at25dfx_chip_check_presence+0xf8>)
     1b4:	e008      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		return 0x00861f;
     1b6:	4b16      	ldr	r3, [pc, #88]	; (210 <at25dfx_chip_check_presence+0xfc>)
     1b8:	e006      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		return 0x01471f;
     1ba:	4b16      	ldr	r3, [pc, #88]	; (214 <at25dfx_chip_check_presence+0x100>)
     1bc:	e004      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		return 0x00481f;
     1be:	4b16      	ldr	r3, [pc, #88]	; (218 <at25dfx_chip_check_presence+0x104>)
     1c0:	e002      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		return 0;
     1c2:	2300      	movs	r3, #0
     1c4:	e000      	b.n	1c8 <at25dfx_chip_check_presence+0xb4>
		return 0x00651f;
     1c6:	4b15      	ldr	r3, [pc, #84]	; (21c <at25dfx_chip_check_presence+0x108>)
	if (id == _at25dfx_get_device_id(chip->type)) {
     1c8:	9a03      	ldr	r2, [sp, #12]
     1ca:	429a      	cmp	r2, r3
     1cc:	d002      	beq.n	1d4 <at25dfx_chip_check_presence+0xc0>
		return STATUS_ERR_NOT_FOUND;
     1ce:	2014      	movs	r0, #20
}
     1d0:	b005      	add	sp, #20
     1d2:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
     1d4:	2000      	movs	r0, #0
     1d6:	e7fb      	b.n	1d0 <at25dfx_chip_check_presence+0xbc>
     1d8:	4b02      	ldr	r3, [pc, #8]	; (1e4 <at25dfx_chip_check_presence+0xd0>)
     1da:	4798      	blx	r3
		return status;
     1dc:	2005      	movs	r0, #5
     1de:	e7f7      	b.n	1d0 <at25dfx_chip_check_presence+0xbc>
     1e0:	00003e99 	.word	0x00003e99
     1e4:	00003ed9 	.word	0x00003ed9
     1e8:	41004400 	.word	0x41004400
     1ec:	0000495d 	.word	0x0000495d
     1f0:	00004795 	.word	0x00004795
     1f4:	00009468 	.word	0x00009468
     1f8:	0000431f 	.word	0x0000431f
     1fc:	0001441f 	.word	0x0001441f
     200:	0002451f 	.word	0x0002451f
     204:	0001451f 	.word	0x0001451f
     208:	0002461f 	.word	0x0002461f
     20c:	0003461f 	.word	0x0003461f
     210:	0000861f 	.word	0x0000861f
     214:	0001471f 	.word	0x0001471f
     218:	0000481f 	.word	0x0000481f
     21c:	0000651f 	.word	0x0000651f

00000220 <at25dfx_chip_read_buffer>:
{
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	b085      	sub	sp, #20
     224:	0004      	movs	r4, r0
     226:	000e      	movs	r6, r1
     228:	9201      	str	r2, [sp, #4]
     22a:	001f      	movs	r7, r3
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     22c:	185a      	adds	r2, r3, r1
	switch (type) {
     22e:	7903      	ldrb	r3, [r0, #4]
     230:	2b09      	cmp	r3, #9
     232:	d815      	bhi.n	260 <at25dfx_chip_read_buffer+0x40>
     234:	009b      	lsls	r3, r3, #2
     236:	4932      	ldr	r1, [pc, #200]	; (300 <at25dfx_chip_read_buffer+0xe0>)
     238:	58cb      	ldr	r3, [r1, r3]
     23a:	469f      	mov	pc, r3
		return 256 * 1024UL;
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	02db      	lsls	r3, r3, #11
     240:	e012      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 512 * 1024UL;
     242:	2380      	movs	r3, #128	; 0x80
     244:	031b      	lsls	r3, r3, #12
     246:	e00f      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 1024 * 1024UL;
     248:	2380      	movs	r3, #128	; 0x80
     24a:	035b      	lsls	r3, r3, #13
     24c:	e00c      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 2048 * 1024UL;
     24e:	2380      	movs	r3, #128	; 0x80
     250:	039b      	lsls	r3, r3, #14
     252:	e009      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 4096 * 1024UL;
     254:	2380      	movs	r3, #128	; 0x80
     256:	03db      	lsls	r3, r3, #15
     258:	e006      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 8192 * 1024UL;
     25a:	2380      	movs	r3, #128	; 0x80
     25c:	041b      	lsls	r3, r3, #16
     25e:	e003      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 0;
     260:	2300      	movs	r3, #0
     262:	e001      	b.n	268 <at25dfx_chip_read_buffer+0x48>
		return 64 * 1024UL;
     264:	2380      	movs	r3, #128	; 0x80
     266:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
     268:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     26a:	429a      	cmp	r2, r3
     26c:	d901      	bls.n	272 <at25dfx_chip_read_buffer+0x52>
}
     26e:	b005      	add	sp, #20
     270:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     272:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     274:	4b23      	ldr	r3, [pc, #140]	; (304 <at25dfx_chip_read_buffer+0xe4>)
     276:	4798      	blx	r3
	if (module->locked) {
     278:	792b      	ldrb	r3, [r5, #4]
     27a:	2b00      	cmp	r3, #0
     27c:	d13c      	bne.n	2f8 <at25dfx_chip_read_buffer+0xd8>
		module->locked = true;
     27e:	3301      	adds	r3, #1
     280:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     282:	4b21      	ldr	r3, [pc, #132]	; (308 <at25dfx_chip_read_buffer+0xe8>)
     284:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     286:	230b      	movs	r3, #11
     288:	aa02      	add	r2, sp, #8
     28a:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     28c:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     28e:	0a33      	lsrs	r3, r6, #8
     290:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     292:	0c36      	lsrs	r6, r6, #16
     294:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     296:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     298:	09d1      	lsrs	r1, r2, #7
		return NULL;
     29a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     29c:	2900      	cmp	r1, #0
     29e:	d104      	bne.n	2aa <at25dfx_chip_read_buffer+0x8a>
		return &(ports[port_index]->Group[group_index]);
     2a0:	0953      	lsrs	r3, r2, #5
     2a2:	01db      	lsls	r3, r3, #7
     2a4:	4919      	ldr	r1, [pc, #100]	; (30c <at25dfx_chip_read_buffer+0xec>)
     2a6:	468c      	mov	ip, r1
     2a8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2aa:	211f      	movs	r1, #31
     2ac:	4011      	ands	r1, r2
     2ae:	2201      	movs	r2, #1
     2b0:	408a      	lsls	r2, r1
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2b2:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     2b4:	2205      	movs	r2, #5
     2b6:	a902      	add	r1, sp, #8
     2b8:	6820      	ldr	r0, [r4, #0]
     2ba:	4b15      	ldr	r3, [pc, #84]	; (310 <at25dfx_chip_read_buffer+0xf0>)
     2bc:	4798      	blx	r3
	if (cmd.length) {
     2be:	2f00      	cmp	r7, #0
     2c0:	d113      	bne.n	2ea <at25dfx_chip_read_buffer+0xca>
	port_pin_set_output_level(chip->cs_pin, true);
     2c2:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     2c4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     2c6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2c8:	2900      	cmp	r1, #0
     2ca:	d104      	bne.n	2d6 <at25dfx_chip_read_buffer+0xb6>
		return &(ports[port_index]->Group[group_index]);
     2cc:	0953      	lsrs	r3, r2, #5
     2ce:	01db      	lsls	r3, r3, #7
     2d0:	490e      	ldr	r1, [pc, #56]	; (30c <at25dfx_chip_read_buffer+0xec>)
     2d2:	468c      	mov	ip, r1
     2d4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2d6:	211f      	movs	r1, #31
     2d8:	4011      	ands	r1, r2
     2da:	2201      	movs	r2, #1
     2dc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     2de:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
     2e0:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     2e2:	2200      	movs	r2, #0
     2e4:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
     2e6:	2000      	movs	r0, #0
     2e8:	e7c1      	b.n	26e <at25dfx_chip_read_buffer+0x4e>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
     2ea:	2300      	movs	r3, #0
     2ec:	003a      	movs	r2, r7
     2ee:	9901      	ldr	r1, [sp, #4]
     2f0:	6820      	ldr	r0, [r4, #0]
     2f2:	4d08      	ldr	r5, [pc, #32]	; (314 <at25dfx_chip_read_buffer+0xf4>)
     2f4:	47a8      	blx	r5
     2f6:	e7e4      	b.n	2c2 <at25dfx_chip_read_buffer+0xa2>
     2f8:	4b03      	ldr	r3, [pc, #12]	; (308 <at25dfx_chip_read_buffer+0xe8>)
     2fa:	4798      	blx	r3
		return status;
     2fc:	2005      	movs	r0, #5
     2fe:	e7b6      	b.n	26e <at25dfx_chip_read_buffer+0x4e>
     300:	00009490 	.word	0x00009490
     304:	00003e99 	.word	0x00003e99
     308:	00003ed9 	.word	0x00003ed9
     30c:	41004400 	.word	0x41004400
     310:	0000495d 	.word	0x0000495d
     314:	00004795 	.word	0x00004795

00000318 <at25dfx_chip_write_buffer>:
{
     318:	b5f0      	push	{r4, r5, r6, r7, lr}
     31a:	46de      	mov	lr, fp
     31c:	4657      	mov	r7, sl
     31e:	464e      	mov	r6, r9
     320:	4645      	mov	r5, r8
     322:	b5e0      	push	{r5, r6, r7, lr}
     324:	b085      	sub	sp, #20
     326:	0005      	movs	r5, r0
     328:	000e      	movs	r6, r1
     32a:	9201      	str	r2, [sp, #4]
     32c:	001f      	movs	r7, r3
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     32e:	185a      	adds	r2, r3, r1
	switch (type) {
     330:	7903      	ldrb	r3, [r0, #4]
     332:	2b09      	cmp	r3, #9
     334:	d815      	bhi.n	362 <at25dfx_chip_write_buffer+0x4a>
     336:	009b      	lsls	r3, r3, #2
     338:	49ae      	ldr	r1, [pc, #696]	; (5f4 <at25dfx_chip_write_buffer+0x2dc>)
     33a:	58cb      	ldr	r3, [r1, r3]
     33c:	469f      	mov	pc, r3
		return 256 * 1024UL;
     33e:	2380      	movs	r3, #128	; 0x80
     340:	02db      	lsls	r3, r3, #11
     342:	e012      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 512 * 1024UL;
     344:	2380      	movs	r3, #128	; 0x80
     346:	031b      	lsls	r3, r3, #12
     348:	e00f      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 1024 * 1024UL;
     34a:	2380      	movs	r3, #128	; 0x80
     34c:	035b      	lsls	r3, r3, #13
     34e:	e00c      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 2048 * 1024UL;
     350:	2380      	movs	r3, #128	; 0x80
     352:	039b      	lsls	r3, r3, #14
     354:	e009      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 4096 * 1024UL;
     356:	2380      	movs	r3, #128	; 0x80
     358:	03db      	lsls	r3, r3, #15
     35a:	e006      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 8192 * 1024UL;
     35c:	2380      	movs	r3, #128	; 0x80
     35e:	041b      	lsls	r3, r3, #16
     360:	e003      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 0;
     362:	2300      	movs	r3, #0
     364:	e001      	b.n	36a <at25dfx_chip_write_buffer+0x52>
		return 64 * 1024UL;
     366:	2380      	movs	r3, #128	; 0x80
     368:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
     36a:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     36c:	429a      	cmp	r2, r3
     36e:	d906      	bls.n	37e <at25dfx_chip_write_buffer+0x66>
}
     370:	b005      	add	sp, #20
     372:	bc3c      	pop	{r2, r3, r4, r5}
     374:	4690      	mov	r8, r2
     376:	4699      	mov	r9, r3
     378:	46a2      	mov	sl, r4
     37a:	46ab      	mov	fp, r5
     37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     37e:	682c      	ldr	r4, [r5, #0]
	cpu_irq_enter_critical();
     380:	4b9d      	ldr	r3, [pc, #628]	; (5f8 <at25dfx_chip_write_buffer+0x2e0>)
     382:	4798      	blx	r3
	if (module->locked) {
     384:	7923      	ldrb	r3, [r4, #4]
     386:	2b00      	cmp	r3, #0
     388:	d000      	beq.n	38c <at25dfx_chip_write_buffer+0x74>
     38a:	e12e      	b.n	5ea <at25dfx_chip_write_buffer+0x2d2>
		module->locked = true;
     38c:	3301      	adds	r3, #1
     38e:	7123      	strb	r3, [r4, #4]
	cpu_irq_leave_critical();
     390:	4b9a      	ldr	r3, [pc, #616]	; (5fc <at25dfx_chip_write_buffer+0x2e4>)
     392:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     394:	2306      	movs	r3, #6
     396:	aa02      	add	r2, sp, #8
     398:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     39a:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     39c:	09d1      	lsrs	r1, r2, #7
		return NULL;
     39e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     3a0:	2900      	cmp	r1, #0
     3a2:	d104      	bne.n	3ae <at25dfx_chip_write_buffer+0x96>
		return &(ports[port_index]->Group[group_index]);
     3a4:	0953      	lsrs	r3, r2, #5
     3a6:	01db      	lsls	r3, r3, #7
     3a8:	4995      	ldr	r1, [pc, #596]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     3aa:	468c      	mov	ip, r1
     3ac:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3ae:	211f      	movs	r1, #31
     3b0:	4011      	ands	r1, r2
     3b2:	2201      	movs	r2, #1
     3b4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     3b6:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     3b8:	2201      	movs	r2, #1
     3ba:	a902      	add	r1, sp, #8
     3bc:	6828      	ldr	r0, [r5, #0]
     3be:	4b91      	ldr	r3, [pc, #580]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     3c0:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     3c2:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     3c4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     3c6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     3c8:	2900      	cmp	r1, #0
     3ca:	d104      	bne.n	3d6 <at25dfx_chip_write_buffer+0xbe>
		return &(ports[port_index]->Group[group_index]);
     3cc:	0953      	lsrs	r3, r2, #5
     3ce:	01db      	lsls	r3, r3, #7
     3d0:	498b      	ldr	r1, [pc, #556]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     3d2:	468c      	mov	ip, r1
     3d4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3d6:	211f      	movs	r1, #31
     3d8:	4011      	ands	r1, r2
     3da:	2201      	movs	r2, #1
     3dc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     3de:	619a      	str	r2, [r3, #24]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
     3e0:	22ff      	movs	r2, #255	; 0xff
     3e2:	4032      	ands	r2, r6
     3e4:	2380      	movs	r3, #128	; 0x80
     3e6:	005b      	lsls	r3, r3, #1
     3e8:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
     3ea:	1c1a      	adds	r2, r3, #0
     3ec:	b29b      	uxth	r3, r3
     3ee:	42bb      	cmp	r3, r7
     3f0:	d900      	bls.n	3f4 <at25dfx_chip_write_buffer+0xdc>
     3f2:	1c3a      	adds	r2, r7, #0
     3f4:	b293      	uxth	r3, r2
     3f6:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
     3f8:	2302      	movs	r3, #2
     3fa:	aa02      	add	r2, sp, #8
     3fc:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     3fe:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     400:	0a33      	lsrs	r3, r6, #8
     402:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     404:	0c33      	lsrs	r3, r6, #16
     406:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     408:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     40a:	09d1      	lsrs	r1, r2, #7
		return NULL;
     40c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     40e:	2900      	cmp	r1, #0
     410:	d104      	bne.n	41c <at25dfx_chip_write_buffer+0x104>
		return &(ports[port_index]->Group[group_index]);
     412:	0953      	lsrs	r3, r2, #5
     414:	01db      	lsls	r3, r3, #7
     416:	497a      	ldr	r1, [pc, #488]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     418:	468c      	mov	ip, r1
     41a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     41c:	211f      	movs	r1, #31
     41e:	4011      	ands	r1, r2
     420:	2201      	movs	r2, #1
     422:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     424:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     426:	2204      	movs	r2, #4
     428:	a902      	add	r1, sp, #8
     42a:	6828      	ldr	r0, [r5, #0]
     42c:	4b75      	ldr	r3, [pc, #468]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     42e:	4798      	blx	r3
	if (cmd.length) {
     430:	4653      	mov	r3, sl
     432:	2b00      	cmp	r3, #0
     434:	d145      	bne.n	4c2 <at25dfx_chip_write_buffer+0x1aa>
	port_pin_set_output_level(chip->cs_pin, true);
     436:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     438:	09d1      	lsrs	r1, r2, #7
		return NULL;
     43a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     43c:	2900      	cmp	r1, #0
     43e:	d104      	bne.n	44a <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
     440:	0953      	lsrs	r3, r2, #5
     442:	01db      	lsls	r3, r3, #7
     444:	496e      	ldr	r1, [pc, #440]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     446:	468c      	mov	ip, r1
     448:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     44a:	211f      	movs	r1, #31
     44c:	4011      	ands	r1, r2
     44e:	2201      	movs	r2, #1
     450:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     452:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     454:	682b      	ldr	r3, [r5, #0]
     456:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
     458:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     45a:	7e0b      	ldrb	r3, [r1, #24]
     45c:	4213      	tst	r3, r2
     45e:	d0fc      	beq.n	45a <at25dfx_chip_write_buffer+0x142>
	port_pin_set_output_level(chip->cs_pin, false);
     460:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     462:	09d1      	lsrs	r1, r2, #7
		return NULL;
     464:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     466:	2900      	cmp	r1, #0
     468:	d104      	bne.n	474 <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
     46a:	0953      	lsrs	r3, r2, #5
     46c:	01db      	lsls	r3, r3, #7
     46e:	4964      	ldr	r1, [pc, #400]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     470:	468c      	mov	ip, r1
     472:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     474:	211f      	movs	r1, #31
     476:	4011      	ands	r1, r2
     478:	2201      	movs	r2, #1
     47a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     47c:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     47e:	682b      	ldr	r3, [r5, #0]
     480:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     482:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     484:	07d2      	lsls	r2, r2, #31
     486:	d501      	bpl.n	48c <at25dfx_chip_write_buffer+0x174>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     488:	2205      	movs	r2, #5
     48a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     48c:	6828      	ldr	r0, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     48e:	6802      	ldr	r2, [r0, #0]
     490:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     492:	7e13      	ldrb	r3, [r2, #24]
     494:	420b      	tst	r3, r1
     496:	d0fc      	beq.n	492 <at25dfx_chip_write_buffer+0x17a>
     498:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     49a:	2400      	movs	r4, #0
	if (!spi_is_ready_to_read(module)) {
     49c:	075b      	lsls	r3, r3, #29
     49e:	d509      	bpl.n	4b4 <at25dfx_chip_write_buffer+0x19c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     4a0:	8b53      	ldrh	r3, [r2, #26]
     4a2:	075b      	lsls	r3, r3, #29
     4a4:	d501      	bpl.n	4aa <at25dfx_chip_write_buffer+0x192>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     4a6:	2304      	movs	r3, #4
     4a8:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4aa:	7983      	ldrb	r3, [r0, #6]
     4ac:	2b01      	cmp	r3, #1
     4ae:	d00e      	beq.n	4ce <at25dfx_chip_write_buffer+0x1b6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4b0:	6a94      	ldr	r4, [r2, #40]	; 0x28
     4b2:	b2e4      	uxtb	r4, r4
		while (!spi_is_ready_to_write(chip->spi)) {
     4b4:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     4b6:	2300      	movs	r3, #0
     4b8:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(chip->spi)) {
     4ba:	2004      	movs	r0, #4
     4bc:	46b4      	mov	ip, r6
     4be:	002e      	movs	r6, r5
     4c0:	e010      	b.n	4e4 <at25dfx_chip_write_buffer+0x1cc>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     4c2:	4652      	mov	r2, sl
     4c4:	9901      	ldr	r1, [sp, #4]
     4c6:	6828      	ldr	r0, [r5, #0]
     4c8:	4b4e      	ldr	r3, [pc, #312]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     4ca:	4798      	blx	r3
     4cc:	e7b3      	b.n	436 <at25dfx_chip_write_buffer+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     4ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
     4d0:	05db      	lsls	r3, r3, #23
     4d2:	0ddc      	lsrs	r4, r3, #23
     4d4:	e7ee      	b.n	4b4 <at25dfx_chip_write_buffer+0x19c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     4d6:	79ab      	ldrb	r3, [r5, #6]
     4d8:	2b01      	cmp	r3, #1
     4da:	d01a      	beq.n	512 <at25dfx_chip_write_buffer+0x1fa>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     4dc:	6a94      	ldr	r4, [r2, #40]	; 0x28
     4de:	b2e4      	uxtb	r4, r4
	} while (status_reg & AT25DFX_STATUS_BUSY);
     4e0:	4221      	tst	r1, r4
     4e2:	d01a      	beq.n	51a <at25dfx_chip_write_buffer+0x202>
	SercomSpi *const spi_module = &(module->hw->SPI);
     4e4:	6833      	ldr	r3, [r6, #0]
     4e6:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     4e8:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     4ea:	420b      	tst	r3, r1
     4ec:	d0fc      	beq.n	4e8 <at25dfx_chip_write_buffer+0x1d0>
     4ee:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     4f0:	420b      	tst	r3, r1
     4f2:	d001      	beq.n	4f8 <at25dfx_chip_write_buffer+0x1e0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     4f4:	4643      	mov	r3, r8
     4f6:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     4f8:	6835      	ldr	r5, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     4fa:	682a      	ldr	r2, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     4fc:	7e13      	ldrb	r3, [r2, #24]
     4fe:	4203      	tst	r3, r0
     500:	d0fc      	beq.n	4fc <at25dfx_chip_write_buffer+0x1e4>
     502:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     504:	4203      	tst	r3, r0
     506:	d0eb      	beq.n	4e0 <at25dfx_chip_write_buffer+0x1c8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     508:	8b53      	ldrh	r3, [r2, #26]
     50a:	4203      	tst	r3, r0
     50c:	d0e3      	beq.n	4d6 <at25dfx_chip_write_buffer+0x1be>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     50e:	8350      	strh	r0, [r2, #26]
     510:	e7e1      	b.n	4d6 <at25dfx_chip_write_buffer+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     512:	6a94      	ldr	r4, [r2, #40]	; 0x28
     514:	05e4      	lsls	r4, r4, #23
     516:	0de4      	lsrs	r4, r4, #23
     518:	e7e2      	b.n	4e0 <at25dfx_chip_write_buffer+0x1c8>
     51a:	0035      	movs	r5, r6
     51c:	4666      	mov	r6, ip
	port_pin_set_output_level(chip->cs_pin, true);
     51e:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     520:	09d1      	lsrs	r1, r2, #7
		return NULL;
     522:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     524:	2900      	cmp	r1, #0
     526:	d104      	bne.n	532 <at25dfx_chip_write_buffer+0x21a>
		return &(ports[port_index]->Group[group_index]);
     528:	0953      	lsrs	r3, r2, #5
     52a:	01db      	lsls	r3, r3, #7
     52c:	4934      	ldr	r1, [pc, #208]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     52e:	468c      	mov	ip, r1
     530:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     532:	211f      	movs	r1, #31
     534:	4011      	ands	r1, r2
     536:	2201      	movs	r2, #1
     538:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     53a:	619a      	str	r2, [r3, #24]
		return STATUS_ERR_IO;
     53c:	2010      	movs	r0, #16
	if (status_reg & AT25DFX_STATUS_ERROR) {
     53e:	06a3      	lsls	r3, r4, #26
     540:	d44f      	bmi.n	5e2 <at25dfx_chip_write_buffer+0x2ca>
	length -= cmd.length;
     542:	4653      	mov	r3, sl
     544:	1aff      	subs	r7, r7, r3
     546:	b2bb      	uxth	r3, r7
     548:	0019      	movs	r1, r3
	while (length && (status == STATUS_OK)) {
     54a:	9a01      	ldr	r2, [sp, #4]
     54c:	4691      	mov	r9, r2
	return STATUS_OK;
     54e:	2000      	movs	r0, #0
     550:	2b00      	cmp	r3, #0
     552:	d046      	beq.n	5e2 <at25dfx_chip_write_buffer+0x2ca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     554:	231f      	movs	r3, #31
     556:	469b      	mov	fp, r3
     558:	2401      	movs	r4, #1
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     55a:	4b2a      	ldr	r3, [pc, #168]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     55c:	4698      	mov	r8, r3
     55e:	4653      	mov	r3, sl
     560:	9301      	str	r3, [sp, #4]
     562:	468a      	mov	sl, r1
     564:	e058      	b.n	618 <at25dfx_chip_write_buffer+0x300>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     566:	001a      	movs	r2, r3
     568:	4649      	mov	r1, r9
     56a:	6828      	ldr	r0, [r5, #0]
     56c:	4b25      	ldr	r3, [pc, #148]	; (604 <at25dfx_chip_write_buffer+0x2ec>)
     56e:	4798      	blx	r3
     570:	e0a4      	b.n	6bc <at25dfx_chip_write_buffer+0x3a4>
     572:	6a90      	ldr	r0, [r2, #40]	; 0x28
     574:	05c0      	lsls	r0, r0, #23
     576:	0dc0      	lsrs	r0, r0, #23
     578:	e0e1      	b.n	73e <at25dfx_chip_write_buffer+0x426>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     57a:	79bb      	ldrb	r3, [r7, #6]
     57c:	2b01      	cmp	r3, #1
     57e:	d01a      	beq.n	5b6 <at25dfx_chip_write_buffer+0x29e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     580:	6a90      	ldr	r0, [r2, #40]	; 0x28
     582:	b2c0      	uxtb	r0, r0
	} while (status_reg & AT25DFX_STATUS_BUSY);
     584:	4204      	tst	r4, r0
     586:	d01a      	beq.n	5be <at25dfx_chip_write_buffer+0x2a6>
	SercomSpi *const spi_module = &(module->hw->SPI);
     588:	682b      	ldr	r3, [r5, #0]
     58a:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     58c:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     58e:	4223      	tst	r3, r4
     590:	d0fc      	beq.n	58c <at25dfx_chip_write_buffer+0x274>
     592:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     594:	4223      	tst	r3, r4
     596:	d001      	beq.n	59c <at25dfx_chip_write_buffer+0x284>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     598:	2300      	movs	r3, #0
     59a:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     59c:	682f      	ldr	r7, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     59e:	683a      	ldr	r2, [r7, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     5a0:	7e13      	ldrb	r3, [r2, #24]
     5a2:	420b      	tst	r3, r1
     5a4:	d0fc      	beq.n	5a0 <at25dfx_chip_write_buffer+0x288>
     5a6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     5a8:	420b      	tst	r3, r1
     5aa:	d0eb      	beq.n	584 <at25dfx_chip_write_buffer+0x26c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     5ac:	8b53      	ldrh	r3, [r2, #26]
     5ae:	420b      	tst	r3, r1
     5b0:	d0e3      	beq.n	57a <at25dfx_chip_write_buffer+0x262>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     5b2:	8351      	strh	r1, [r2, #26]
     5b4:	e7e1      	b.n	57a <at25dfx_chip_write_buffer+0x262>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     5b6:	6a90      	ldr	r0, [r2, #40]	; 0x28
     5b8:	05c0      	lsls	r0, r0, #23
     5ba:	0dc0      	lsrs	r0, r0, #23
     5bc:	e7e2      	b.n	584 <at25dfx_chip_write_buffer+0x26c>
	port_pin_set_output_level(chip->cs_pin, true);
     5be:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     5c0:	09d9      	lsrs	r1, r3, #7
		return NULL;
     5c2:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     5c4:	2900      	cmp	r1, #0
     5c6:	d104      	bne.n	5d2 <at25dfx_chip_write_buffer+0x2ba>
		return &(ports[port_index]->Group[group_index]);
     5c8:	095a      	lsrs	r2, r3, #5
     5ca:	01d2      	lsls	r2, r2, #7
     5cc:	490c      	ldr	r1, [pc, #48]	; (600 <at25dfx_chip_write_buffer+0x2e8>)
     5ce:	468c      	mov	ip, r1
     5d0:	4462      	add	r2, ip
     5d2:	4659      	mov	r1, fp
     5d4:	400b      	ands	r3, r1
     5d6:	0021      	movs	r1, r4
     5d8:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     5da:	6191      	str	r1, [r2, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
     5dc:	0683      	lsls	r3, r0, #26
     5de:	d513      	bpl.n	608 <at25dfx_chip_write_buffer+0x2f0>
		return STATUS_ERR_IO;
     5e0:	2010      	movs	r0, #16
	_at25dfx_spi_unlock(chip->spi);
     5e2:	682b      	ldr	r3, [r5, #0]
	module->locked = false;
     5e4:	2200      	movs	r2, #0
     5e6:	711a      	strb	r2, [r3, #4]
	return status;
     5e8:	e6c2      	b.n	370 <at25dfx_chip_write_buffer+0x58>
     5ea:	4b04      	ldr	r3, [pc, #16]	; (5fc <at25dfx_chip_write_buffer+0x2e4>)
     5ec:	4798      	blx	r3
		return status;
     5ee:	2005      	movs	r0, #5
     5f0:	e6be      	b.n	370 <at25dfx_chip_write_buffer+0x58>
     5f2:	46c0      	nop			; (mov r8, r8)
     5f4:	000094bc 	.word	0x000094bc
     5f8:	00003e99 	.word	0x00003e99
     5fc:	00003ed9 	.word	0x00003ed9
     600:	41004400 	.word	0x41004400
     604:	0000495d 	.word	0x0000495d
		length -= cmd.length;
     608:	4653      	mov	r3, sl
     60a:	9a01      	ldr	r2, [sp, #4]
     60c:	1a9b      	subs	r3, r3, r2
     60e:	b29b      	uxth	r3, r3
     610:	469a      	mov	sl, r3
	while (length && (status == STATUS_OK)) {
     612:	2b00      	cmp	r3, #0
     614:	d100      	bne.n	618 <at25dfx_chip_write_buffer+0x300>
     616:	e094      	b.n	742 <at25dfx_chip_write_buffer+0x42a>
	cmd_buffer[0] = cmd.opcode;
     618:	ab02      	add	r3, sp, #8
     61a:	2206      	movs	r2, #6
     61c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     61e:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     620:	09d9      	lsrs	r1, r3, #7
		return NULL;
     622:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     624:	2900      	cmp	r1, #0
     626:	d104      	bne.n	632 <at25dfx_chip_write_buffer+0x31a>
		return &(ports[port_index]->Group[group_index]);
     628:	095a      	lsrs	r2, r3, #5
     62a:	01d2      	lsls	r2, r2, #7
     62c:	4946      	ldr	r1, [pc, #280]	; (748 <at25dfx_chip_write_buffer+0x430>)
     62e:	468c      	mov	ip, r1
     630:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     632:	4659      	mov	r1, fp
     634:	400b      	ands	r3, r1
     636:	0021      	movs	r1, r4
     638:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     63a:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     63c:	0022      	movs	r2, r4
     63e:	a902      	add	r1, sp, #8
     640:	6828      	ldr	r0, [r5, #0]
     642:	47c0      	blx	r8
	port_pin_set_output_level(chip->cs_pin, true);
     644:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     646:	09d9      	lsrs	r1, r3, #7
		return NULL;
     648:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     64a:	2900      	cmp	r1, #0
     64c:	d104      	bne.n	658 <at25dfx_chip_write_buffer+0x340>
		return &(ports[port_index]->Group[group_index]);
     64e:	095a      	lsrs	r2, r3, #5
     650:	01d2      	lsls	r2, r2, #7
     652:	493d      	ldr	r1, [pc, #244]	; (748 <at25dfx_chip_write_buffer+0x430>)
     654:	468c      	mov	ip, r1
     656:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     658:	4659      	mov	r1, fp
     65a:	400b      	ands	r3, r1
     65c:	0021      	movs	r1, r4
     65e:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     660:	6191      	str	r1, [r2, #24]
		cmd.address += cmd.length;
     662:	9a01      	ldr	r2, [sp, #4]
     664:	4694      	mov	ip, r2
     666:	4466      	add	r6, ip
		cmd.data.tx += cmd.length;
     668:	44e1      	add	r9, ip
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     66a:	4657      	mov	r7, sl
     66c:	2380      	movs	r3, #128	; 0x80
     66e:	005b      	lsls	r3, r3, #1
     670:	459a      	cmp	sl, r3
     672:	d901      	bls.n	678 <at25dfx_chip_write_buffer+0x360>
     674:	4b35      	ldr	r3, [pc, #212]	; (74c <at25dfx_chip_write_buffer+0x434>)
     676:	881f      	ldrh	r7, [r3, #0]
     678:	b2bb      	uxth	r3, r7
     67a:	9301      	str	r3, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
     67c:	2302      	movs	r3, #2
     67e:	aa02      	add	r2, sp, #8
     680:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     682:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     684:	0a33      	lsrs	r3, r6, #8
     686:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     688:	0c33      	lsrs	r3, r6, #16
     68a:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     68c:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     68e:	09d9      	lsrs	r1, r3, #7
		return NULL;
     690:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     692:	2900      	cmp	r1, #0
     694:	d104      	bne.n	6a0 <at25dfx_chip_write_buffer+0x388>
		return &(ports[port_index]->Group[group_index]);
     696:	095a      	lsrs	r2, r3, #5
     698:	01d2      	lsls	r2, r2, #7
     69a:	492b      	ldr	r1, [pc, #172]	; (748 <at25dfx_chip_write_buffer+0x430>)
     69c:	468c      	mov	ip, r1
     69e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6a0:	4659      	mov	r1, fp
     6a2:	400b      	ands	r3, r1
     6a4:	0021      	movs	r1, r4
     6a6:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     6a8:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     6aa:	2204      	movs	r2, #4
     6ac:	a902      	add	r1, sp, #8
     6ae:	6828      	ldr	r0, [r5, #0]
     6b0:	4b27      	ldr	r3, [pc, #156]	; (750 <at25dfx_chip_write_buffer+0x438>)
     6b2:	4798      	blx	r3
	if (cmd.length) {
     6b4:	9b01      	ldr	r3, [sp, #4]
     6b6:	2b00      	cmp	r3, #0
     6b8:	d000      	beq.n	6bc <at25dfx_chip_write_buffer+0x3a4>
     6ba:	e754      	b.n	566 <at25dfx_chip_write_buffer+0x24e>
	port_pin_set_output_level(chip->cs_pin, true);
     6bc:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     6be:	09d9      	lsrs	r1, r3, #7
		return NULL;
     6c0:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     6c2:	2900      	cmp	r1, #0
     6c4:	d104      	bne.n	6d0 <at25dfx_chip_write_buffer+0x3b8>
		return &(ports[port_index]->Group[group_index]);
     6c6:	095a      	lsrs	r2, r3, #5
     6c8:	01d2      	lsls	r2, r2, #7
     6ca:	491f      	ldr	r1, [pc, #124]	; (748 <at25dfx_chip_write_buffer+0x430>)
     6cc:	468c      	mov	ip, r1
     6ce:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6d0:	4659      	mov	r1, fp
     6d2:	400b      	ands	r3, r1
     6d4:	0021      	movs	r1, r4
     6d6:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
     6d8:	6191      	str	r1, [r2, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     6da:	682b      	ldr	r3, [r5, #0]
     6dc:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     6de:	7e13      	ldrb	r3, [r2, #24]
	while (!spi_is_ready_to_write(chip->spi)) {
     6e0:	4223      	tst	r3, r4
     6e2:	d0fc      	beq.n	6de <at25dfx_chip_write_buffer+0x3c6>
	port_pin_set_output_level(chip->cs_pin, false);
     6e4:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
     6e6:	09d9      	lsrs	r1, r3, #7
		return NULL;
     6e8:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     6ea:	2900      	cmp	r1, #0
     6ec:	d104      	bne.n	6f8 <at25dfx_chip_write_buffer+0x3e0>
		return &(ports[port_index]->Group[group_index]);
     6ee:	095a      	lsrs	r2, r3, #5
     6f0:	01d2      	lsls	r2, r2, #7
     6f2:	4915      	ldr	r1, [pc, #84]	; (748 <at25dfx_chip_write_buffer+0x430>)
     6f4:	468c      	mov	ip, r1
     6f6:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     6f8:	4659      	mov	r1, fp
     6fa:	400b      	ands	r3, r1
     6fc:	0021      	movs	r1, r4
     6fe:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
     700:	6151      	str	r1, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     702:	682b      	ldr	r3, [r5, #0]
     704:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     706:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     708:	4222      	tst	r2, r4
     70a:	d001      	beq.n	710 <at25dfx_chip_write_buffer+0x3f8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     70c:	2205      	movs	r2, #5
     70e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     710:	682b      	ldr	r3, [r5, #0]
     712:	469c      	mov	ip, r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     714:	681a      	ldr	r2, [r3, #0]
     716:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     718:	7e13      	ldrb	r3, [r2, #24]
     71a:	420b      	tst	r3, r1
     71c:	d0fc      	beq.n	718 <at25dfx_chip_write_buffer+0x400>
     71e:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     720:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
     722:	075b      	lsls	r3, r3, #29
     724:	d50b      	bpl.n	73e <at25dfx_chip_write_buffer+0x426>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     726:	8b53      	ldrh	r3, [r2, #26]
     728:	075b      	lsls	r3, r3, #29
     72a:	d501      	bpl.n	730 <at25dfx_chip_write_buffer+0x418>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     72c:	2304      	movs	r3, #4
     72e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     730:	4663      	mov	r3, ip
     732:	799b      	ldrb	r3, [r3, #6]
     734:	2b01      	cmp	r3, #1
     736:	d100      	bne.n	73a <at25dfx_chip_write_buffer+0x422>
     738:	e71b      	b.n	572 <at25dfx_chip_write_buffer+0x25a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     73a:	6a90      	ldr	r0, [r2, #40]	; 0x28
     73c:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_read(chip->spi)) {
     73e:	2104      	movs	r1, #4
     740:	e722      	b.n	588 <at25dfx_chip_write_buffer+0x270>
	return STATUS_OK;
     742:	2000      	movs	r0, #0
     744:	e74d      	b.n	5e2 <at25dfx_chip_write_buffer+0x2ca>
     746:	46c0      	nop			; (mov r8, r8)
     748:	41004400 	.word	0x41004400
     74c:	000094b8 	.word	0x000094b8
     750:	0000495d 	.word	0x0000495d

00000754 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
     754:	b5f0      	push	{r4, r5, r6, r7, lr}
     756:	b083      	sub	sp, #12
     758:	0004      	movs	r4, r0
     75a:	000e      	movs	r6, r1
     75c:	0015      	movs	r5, r2
	switch (type) {
     75e:	7903      	ldrb	r3, [r0, #4]
     760:	2b09      	cmp	r3, #9
     762:	d900      	bls.n	766 <at25dfx_chip_erase_block+0x12>
     764:	e0f2      	b.n	94c <at25dfx_chip_erase_block+0x1f8>
     766:	009b      	lsls	r3, r3, #2
     768:	4a7b      	ldr	r2, [pc, #492]	; (958 <at25dfx_chip_erase_block+0x204>)
     76a:	58d3      	ldr	r3, [r2, r3]
     76c:	469f      	mov	pc, r3
		return 256 * 1024UL;
     76e:	2380      	movs	r3, #128	; 0x80
     770:	02db      	lsls	r3, r3, #11
     772:	e010      	b.n	796 <at25dfx_chip_erase_block+0x42>
		return 512 * 1024UL;
     774:	2380      	movs	r3, #128	; 0x80
     776:	031b      	lsls	r3, r3, #12
     778:	e00d      	b.n	796 <at25dfx_chip_erase_block+0x42>
		return 1024 * 1024UL;
     77a:	2380      	movs	r3, #128	; 0x80
     77c:	035b      	lsls	r3, r3, #13
     77e:	e00a      	b.n	796 <at25dfx_chip_erase_block+0x42>
		return 2048 * 1024UL;
     780:	2380      	movs	r3, #128	; 0x80
     782:	039b      	lsls	r3, r3, #14
     784:	e007      	b.n	796 <at25dfx_chip_erase_block+0x42>
		return 4096 * 1024UL;
     786:	2380      	movs	r3, #128	; 0x80
     788:	03db      	lsls	r3, r3, #15
     78a:	e004      	b.n	796 <at25dfx_chip_erase_block+0x42>
		return 8192 * 1024UL;
     78c:	2380      	movs	r3, #128	; 0x80
     78e:	041b      	lsls	r3, r3, #16
     790:	e001      	b.n	796 <at25dfx_chip_erase_block+0x42>
		return 64 * 1024UL;
     792:	2380      	movs	r3, #128	; 0x80
     794:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     796:	2017      	movs	r0, #23
	if (address >= _at25dfx_get_device_size(chip->type)) {
     798:	42b3      	cmp	r3, r6
     79a:	d801      	bhi.n	7a0 <at25dfx_chip_erase_block+0x4c>
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
     79c:	b003      	add	sp, #12
     79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     7a0:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
     7a2:	4b6e      	ldr	r3, [pc, #440]	; (95c <at25dfx_chip_erase_block+0x208>)
     7a4:	4798      	blx	r3
	if (module->locked) {
     7a6:	793b      	ldrb	r3, [r7, #4]
     7a8:	2b00      	cmp	r3, #0
     7aa:	d000      	beq.n	7ae <at25dfx_chip_erase_block+0x5a>
     7ac:	e0d0      	b.n	950 <at25dfx_chip_erase_block+0x1fc>
		module->locked = true;
     7ae:	3301      	adds	r3, #1
     7b0:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
     7b2:	4b6b      	ldr	r3, [pc, #428]	; (960 <at25dfx_chip_erase_block+0x20c>)
     7b4:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     7b6:	2306      	movs	r3, #6
     7b8:	466a      	mov	r2, sp
     7ba:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     7bc:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     7be:	09d1      	lsrs	r1, r2, #7
		return NULL;
     7c0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7c2:	2900      	cmp	r1, #0
     7c4:	d104      	bne.n	7d0 <at25dfx_chip_erase_block+0x7c>
		return &(ports[port_index]->Group[group_index]);
     7c6:	0953      	lsrs	r3, r2, #5
     7c8:	01db      	lsls	r3, r3, #7
     7ca:	4966      	ldr	r1, [pc, #408]	; (964 <at25dfx_chip_erase_block+0x210>)
     7cc:	468c      	mov	ip, r1
     7ce:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7d0:	211f      	movs	r1, #31
     7d2:	4011      	ands	r1, r2
     7d4:	2201      	movs	r2, #1
     7d6:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     7d8:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     7da:	2201      	movs	r2, #1
     7dc:	4669      	mov	r1, sp
     7de:	6820      	ldr	r0, [r4, #0]
     7e0:	4b61      	ldr	r3, [pc, #388]	; (968 <at25dfx_chip_erase_block+0x214>)
     7e2:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     7e4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     7e6:	09d1      	lsrs	r1, r2, #7
		return NULL;
     7e8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     7ea:	2900      	cmp	r1, #0
     7ec:	d104      	bne.n	7f8 <at25dfx_chip_erase_block+0xa4>
		return &(ports[port_index]->Group[group_index]);
     7ee:	0953      	lsrs	r3, r2, #5
     7f0:	01db      	lsls	r3, r3, #7
     7f2:	495c      	ldr	r1, [pc, #368]	; (964 <at25dfx_chip_erase_block+0x210>)
     7f4:	468c      	mov	ip, r1
     7f6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7f8:	211f      	movs	r1, #31
     7fa:	4011      	ands	r1, r2
     7fc:	2201      	movs	r2, #1
     7fe:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     800:	619a      	str	r2, [r3, #24]
	switch (block_size) {
     802:	2d01      	cmp	r5, #1
     804:	d006      	beq.n	814 <at25dfx_chip_erase_block+0xc0>
     806:	2d00      	cmp	r5, #0
     808:	d063      	beq.n	8d2 <at25dfx_chip_erase_block+0x17e>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
     80a:	23d8      	movs	r3, #216	; 0xd8
	switch (block_size) {
     80c:	2d02      	cmp	r5, #2
     80e:	d002      	beq.n	816 <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = (enum at25dfx_command_opcode)0;
     810:	2300      	movs	r3, #0
     812:	e000      	b.n	816 <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
     814:	2352      	movs	r3, #82	; 0x52
	cmd_buffer[0] = cmd.opcode;
     816:	466a      	mov	r2, sp
     818:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     81a:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     81c:	0a33      	lsrs	r3, r6, #8
     81e:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     820:	0c36      	lsrs	r6, r6, #16
     822:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     824:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     826:	09d1      	lsrs	r1, r2, #7
		return NULL;
     828:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     82a:	2900      	cmp	r1, #0
     82c:	d104      	bne.n	838 <at25dfx_chip_erase_block+0xe4>
		return &(ports[port_index]->Group[group_index]);
     82e:	0953      	lsrs	r3, r2, #5
     830:	01db      	lsls	r3, r3, #7
     832:	494c      	ldr	r1, [pc, #304]	; (964 <at25dfx_chip_erase_block+0x210>)
     834:	468c      	mov	ip, r1
     836:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     838:	211f      	movs	r1, #31
     83a:	4011      	ands	r1, r2
     83c:	2201      	movs	r2, #1
     83e:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     840:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     842:	2204      	movs	r2, #4
     844:	4669      	mov	r1, sp
     846:	6820      	ldr	r0, [r4, #0]
     848:	4b47      	ldr	r3, [pc, #284]	; (968 <at25dfx_chip_erase_block+0x214>)
     84a:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     84c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     84e:	09d1      	lsrs	r1, r2, #7
		return NULL;
     850:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     852:	2900      	cmp	r1, #0
     854:	d104      	bne.n	860 <at25dfx_chip_erase_block+0x10c>
		return &(ports[port_index]->Group[group_index]);
     856:	0953      	lsrs	r3, r2, #5
     858:	01db      	lsls	r3, r3, #7
     85a:	4942      	ldr	r1, [pc, #264]	; (964 <at25dfx_chip_erase_block+0x210>)
     85c:	468c      	mov	ip, r1
     85e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     860:	211f      	movs	r1, #31
     862:	4011      	ands	r1, r2
     864:	2201      	movs	r2, #1
     866:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     868:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
     86a:	6823      	ldr	r3, [r4, #0]
     86c:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
     86e:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     870:	7e0b      	ldrb	r3, [r1, #24]
     872:	4213      	tst	r3, r2
     874:	d0fc      	beq.n	870 <at25dfx_chip_erase_block+0x11c>
	port_pin_set_output_level(chip->cs_pin, false);
     876:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     878:	09d1      	lsrs	r1, r2, #7
		return NULL;
     87a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     87c:	2900      	cmp	r1, #0
     87e:	d104      	bne.n	88a <at25dfx_chip_erase_block+0x136>
		return &(ports[port_index]->Group[group_index]);
     880:	0953      	lsrs	r3, r2, #5
     882:	01db      	lsls	r3, r3, #7
     884:	4937      	ldr	r1, [pc, #220]	; (964 <at25dfx_chip_erase_block+0x210>)
     886:	468c      	mov	ip, r1
     888:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     88a:	211f      	movs	r1, #31
     88c:	4011      	ands	r1, r2
     88e:	2201      	movs	r2, #1
     890:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     892:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
     894:	6823      	ldr	r3, [r4, #0]
     896:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     898:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     89a:	07d2      	lsls	r2, r2, #31
     89c:	d501      	bpl.n	8a2 <at25dfx_chip_erase_block+0x14e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     89e:	2205      	movs	r2, #5
     8a0:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
     8a2:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     8a4:	6802      	ldr	r2, [r0, #0]
     8a6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     8a8:	7e13      	ldrb	r3, [r2, #24]
     8aa:	420b      	tst	r3, r1
     8ac:	d0fc      	beq.n	8a8 <at25dfx_chip_erase_block+0x154>
     8ae:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
     8b0:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
     8b2:	075b      	lsls	r3, r3, #29
     8b4:	d509      	bpl.n	8ca <at25dfx_chip_erase_block+0x176>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     8b6:	8b53      	ldrh	r3, [r2, #26]
     8b8:	075b      	lsls	r3, r3, #29
     8ba:	d501      	bpl.n	8c0 <at25dfx_chip_erase_block+0x16c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     8bc:	2304      	movs	r3, #4
     8be:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8c0:	7983      	ldrb	r3, [r0, #6]
     8c2:	2b01      	cmp	r3, #1
     8c4:	d007      	beq.n	8d6 <at25dfx_chip_erase_block+0x182>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     8c6:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8c8:	b2ed      	uxtb	r5, r5
		while (!spi_is_ready_to_write(chip->spi)) {
     8ca:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     8cc:	2700      	movs	r7, #0
		while (!spi_is_ready_to_read(chip->spi)) {
     8ce:	2004      	movs	r0, #4
     8d0:	e00c      	b.n	8ec <at25dfx_chip_erase_block+0x198>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
     8d2:	2320      	movs	r3, #32
     8d4:	e79f      	b.n	816 <at25dfx_chip_erase_block+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     8d6:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8d8:	05ed      	lsls	r5, r5, #23
     8da:	0ded      	lsrs	r5, r5, #23
     8dc:	e7f5      	b.n	8ca <at25dfx_chip_erase_block+0x176>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8de:	79b3      	ldrb	r3, [r6, #6]
     8e0:	2b01      	cmp	r3, #1
     8e2:	d019      	beq.n	918 <at25dfx_chip_erase_block+0x1c4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     8e4:	6a95      	ldr	r5, [r2, #40]	; 0x28
     8e6:	b2ed      	uxtb	r5, r5
	} while (status_reg & AT25DFX_STATUS_BUSY);
     8e8:	4229      	tst	r1, r5
     8ea:	d019      	beq.n	920 <at25dfx_chip_erase_block+0x1cc>
	SercomSpi *const spi_module = &(module->hw->SPI);
     8ec:	6823      	ldr	r3, [r4, #0]
     8ee:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8f0:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
     8f2:	420b      	tst	r3, r1
     8f4:	d0fc      	beq.n	8f0 <at25dfx_chip_erase_block+0x19c>
     8f6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
     8f8:	420b      	tst	r3, r1
     8fa:	d000      	beq.n	8fe <at25dfx_chip_erase_block+0x1aa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     8fc:	6297      	str	r7, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
     8fe:	6826      	ldr	r6, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     900:	6832      	ldr	r2, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     902:	7e13      	ldrb	r3, [r2, #24]
     904:	4203      	tst	r3, r0
     906:	d0fc      	beq.n	902 <at25dfx_chip_erase_block+0x1ae>
     908:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
     90a:	4203      	tst	r3, r0
     90c:	d0ec      	beq.n	8e8 <at25dfx_chip_erase_block+0x194>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     90e:	8b53      	ldrh	r3, [r2, #26]
     910:	4203      	tst	r3, r0
     912:	d0e4      	beq.n	8de <at25dfx_chip_erase_block+0x18a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     914:	8350      	strh	r0, [r2, #26]
     916:	e7e2      	b.n	8de <at25dfx_chip_erase_block+0x18a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     918:	6a95      	ldr	r5, [r2, #40]	; 0x28
     91a:	05ed      	lsls	r5, r5, #23
     91c:	0ded      	lsrs	r5, r5, #23
     91e:	e7e3      	b.n	8e8 <at25dfx_chip_erase_block+0x194>
	port_pin_set_output_level(chip->cs_pin, true);
     920:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     922:	09d1      	lsrs	r1, r2, #7
		return NULL;
     924:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     926:	2900      	cmp	r1, #0
     928:	d104      	bne.n	934 <at25dfx_chip_erase_block+0x1e0>
		return &(ports[port_index]->Group[group_index]);
     92a:	0953      	lsrs	r3, r2, #5
     92c:	01db      	lsls	r3, r3, #7
     92e:	490d      	ldr	r1, [pc, #52]	; (964 <at25dfx_chip_erase_block+0x210>)
     930:	468c      	mov	ip, r1
     932:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     934:	211f      	movs	r1, #31
     936:	4011      	ands	r1, r2
     938:	2201      	movs	r2, #1
     93a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     93c:	619a      	str	r2, [r3, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
     93e:	06a8      	lsls	r0, r5, #26
	return STATUS_OK;
     940:	0fc0      	lsrs	r0, r0, #31
     942:	0100      	lsls	r0, r0, #4
	_at25dfx_spi_unlock(chip->spi);
     944:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     946:	2200      	movs	r2, #0
     948:	711a      	strb	r2, [r3, #4]
	return status;
     94a:	e727      	b.n	79c <at25dfx_chip_erase_block+0x48>
		return STATUS_ERR_INVALID_ARG;
     94c:	2017      	movs	r0, #23
     94e:	e725      	b.n	79c <at25dfx_chip_erase_block+0x48>
     950:	4b03      	ldr	r3, [pc, #12]	; (960 <at25dfx_chip_erase_block+0x20c>)
     952:	4798      	blx	r3
		return status;
     954:	2005      	movs	r0, #5
     956:	e721      	b.n	79c <at25dfx_chip_erase_block+0x48>
     958:	000094e4 	.word	0x000094e4
     95c:	00003e99 	.word	0x00003e99
     960:	00003ed9 	.word	0x00003ed9
     964:	41004400 	.word	0x41004400
     968:	0000495d 	.word	0x0000495d

0000096c <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
     96c:	b570      	push	{r4, r5, r6, lr}
     96e:	b082      	sub	sp, #8
     970:	0004      	movs	r4, r0
     972:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     974:	6806      	ldr	r6, [r0, #0]
	cpu_irq_enter_critical();
     976:	4b35      	ldr	r3, [pc, #212]	; (a4c <at25dfx_chip_set_global_sector_protect+0xe0>)
     978:	4798      	blx	r3
	if (module->locked) {
     97a:	7933      	ldrb	r3, [r6, #4]
     97c:	2b00      	cmp	r3, #0
     97e:	d160      	bne.n	a42 <at25dfx_chip_set_global_sector_protect+0xd6>
		module->locked = true;
     980:	3301      	adds	r3, #1
     982:	7133      	strb	r3, [r6, #4]
	cpu_irq_leave_critical();
     984:	4b32      	ldr	r3, [pc, #200]	; (a50 <at25dfx_chip_set_global_sector_protect+0xe4>)
     986:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     988:	2306      	movs	r3, #6
     98a:	466a      	mov	r2, sp
     98c:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     98e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     990:	09d1      	lsrs	r1, r2, #7
		return NULL;
     992:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     994:	2900      	cmp	r1, #0
     996:	d104      	bne.n	9a2 <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
     998:	0953      	lsrs	r3, r2, #5
     99a:	01db      	lsls	r3, r3, #7
     99c:	492d      	ldr	r1, [pc, #180]	; (a54 <at25dfx_chip_set_global_sector_protect+0xe8>)
     99e:	468c      	mov	ip, r1
     9a0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9a2:	211f      	movs	r1, #31
     9a4:	4011      	ands	r1, r2
     9a6:	2201      	movs	r2, #1
     9a8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     9aa:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     9ac:	2201      	movs	r2, #1
     9ae:	4669      	mov	r1, sp
     9b0:	6820      	ldr	r0, [r4, #0]
     9b2:	4b29      	ldr	r3, [pc, #164]	; (a58 <at25dfx_chip_set_global_sector_protect+0xec>)
     9b4:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     9b6:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     9b8:	09d1      	lsrs	r1, r2, #7
		return NULL;
     9ba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9bc:	2900      	cmp	r1, #0
     9be:	d104      	bne.n	9ca <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
     9c0:	0953      	lsrs	r3, r2, #5
     9c2:	01db      	lsls	r3, r3, #7
     9c4:	4923      	ldr	r1, [pc, #140]	; (a54 <at25dfx_chip_set_global_sector_protect+0xe8>)
     9c6:	468c      	mov	ip, r1
     9c8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9ca:	211f      	movs	r1, #31
     9cc:	4011      	ands	r1, r2
     9ce:	2201      	movs	r2, #1
     9d0:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     9d2:	619a      	str	r2, [r3, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
     9d4:	233c      	movs	r3, #60	; 0x3c
     9d6:	1e6a      	subs	r2, r5, #1
     9d8:	4195      	sbcs	r5, r2
     9da:	426d      	negs	r5, r5
     9dc:	402b      	ands	r3, r5
     9de:	466a      	mov	r2, sp
     9e0:	71d3      	strb	r3, [r2, #7]
	cmd_buffer[0] = cmd.opcode;
     9e2:	2301      	movs	r3, #1
     9e4:	466a      	mov	r2, sp
     9e6:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     9e8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     9ea:	09d1      	lsrs	r1, r2, #7
		return NULL;
     9ec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9ee:	2900      	cmp	r1, #0
     9f0:	d104      	bne.n	9fc <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
     9f2:	0953      	lsrs	r3, r2, #5
     9f4:	01db      	lsls	r3, r3, #7
     9f6:	4917      	ldr	r1, [pc, #92]	; (a54 <at25dfx_chip_set_global_sector_protect+0xe8>)
     9f8:	468c      	mov	ip, r1
     9fa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9fc:	211f      	movs	r1, #31
     9fe:	4011      	ands	r1, r2
     a00:	2201      	movs	r2, #1
     a02:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     a04:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     a06:	2201      	movs	r2, #1
     a08:	4669      	mov	r1, sp
     a0a:	6820      	ldr	r0, [r4, #0]
     a0c:	4d12      	ldr	r5, [pc, #72]	; (a58 <at25dfx_chip_set_global_sector_protect+0xec>)
     a0e:	47a8      	blx	r5
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     a10:	2201      	movs	r2, #1
     a12:	466b      	mov	r3, sp
     a14:	1dd9      	adds	r1, r3, #7
     a16:	6820      	ldr	r0, [r4, #0]
     a18:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
     a1a:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     a1c:	09d1      	lsrs	r1, r2, #7
		return NULL;
     a1e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     a20:	2900      	cmp	r1, #0
     a22:	d104      	bne.n	a2e <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
     a24:	0953      	lsrs	r3, r2, #5
     a26:	01db      	lsls	r3, r3, #7
     a28:	490a      	ldr	r1, [pc, #40]	; (a54 <at25dfx_chip_set_global_sector_protect+0xe8>)
     a2a:	468c      	mov	ip, r1
     a2c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a2e:	211f      	movs	r1, #31
     a30:	4011      	ands	r1, r2
     a32:	2201      	movs	r2, #1
     a34:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     a36:	619a      	str	r2, [r3, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     a38:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     a3a:	2200      	movs	r2, #0
     a3c:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     a3e:	2000      	movs	r0, #0
     a40:	e002      	b.n	a48 <at25dfx_chip_set_global_sector_protect+0xdc>
     a42:	4b03      	ldr	r3, [pc, #12]	; (a50 <at25dfx_chip_set_global_sector_protect+0xe4>)
     a44:	4798      	blx	r3
		return status;
     a46:	2005      	movs	r0, #5
}
     a48:	b002      	add	sp, #8
     a4a:	bd70      	pop	{r4, r5, r6, pc}
     a4c:	00003e99 	.word	0x00003e99
     a50:	00003ed9 	.word	0x00003ed9
     a54:	41004400 	.word	0x41004400
     a58:	0000495d 	.word	0x0000495d

00000a5c <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
     a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5e:	b083      	sub	sp, #12
     a60:	0004      	movs	r4, r0
     a62:	000e      	movs	r6, r1
     a64:	0015      	movs	r5, r2
	switch (type) {
     a66:	7903      	ldrb	r3, [r0, #4]
     a68:	2b09      	cmp	r3, #9
     a6a:	d900      	bls.n	a6e <at25dfx_chip_set_sector_protect+0x12>
     a6c:	e07f      	b.n	b6e <at25dfx_chip_set_sector_protect+0x112>
     a6e:	009b      	lsls	r3, r3, #2
     a70:	4a42      	ldr	r2, [pc, #264]	; (b7c <at25dfx_chip_set_sector_protect+0x120>)
     a72:	58d3      	ldr	r3, [r2, r3]
     a74:	469f      	mov	pc, r3
		return 256 * 1024UL;
     a76:	2380      	movs	r3, #128	; 0x80
     a78:	02db      	lsls	r3, r3, #11
     a7a:	e010      	b.n	a9e <at25dfx_chip_set_sector_protect+0x42>
		return 512 * 1024UL;
     a7c:	2380      	movs	r3, #128	; 0x80
     a7e:	031b      	lsls	r3, r3, #12
     a80:	e00d      	b.n	a9e <at25dfx_chip_set_sector_protect+0x42>
		return 1024 * 1024UL;
     a82:	2380      	movs	r3, #128	; 0x80
     a84:	035b      	lsls	r3, r3, #13
     a86:	e00a      	b.n	a9e <at25dfx_chip_set_sector_protect+0x42>
		return 2048 * 1024UL;
     a88:	2380      	movs	r3, #128	; 0x80
     a8a:	039b      	lsls	r3, r3, #14
     a8c:	e007      	b.n	a9e <at25dfx_chip_set_sector_protect+0x42>
		return 4096 * 1024UL;
     a8e:	2380      	movs	r3, #128	; 0x80
     a90:	03db      	lsls	r3, r3, #15
     a92:	e004      	b.n	a9e <at25dfx_chip_set_sector_protect+0x42>
		return 8192 * 1024UL;
     a94:	2380      	movs	r3, #128	; 0x80
     a96:	041b      	lsls	r3, r3, #16
     a98:	e001      	b.n	a9e <at25dfx_chip_set_sector_protect+0x42>
		return 64 * 1024UL;
     a9a:	2380      	movs	r3, #128	; 0x80
     a9c:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
     a9e:	2017      	movs	r0, #23
	if ((address) >= _at25dfx_get_device_size(chip->type)) {
     aa0:	42b3      	cmp	r3, r6
     aa2:	d801      	bhi.n	aa8 <at25dfx_chip_set_sector_protect+0x4c>
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
     aa4:	b003      	add	sp, #12
     aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
     aa8:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
     aaa:	4b35      	ldr	r3, [pc, #212]	; (b80 <at25dfx_chip_set_sector_protect+0x124>)
     aac:	4798      	blx	r3
	if (module->locked) {
     aae:	793b      	ldrb	r3, [r7, #4]
     ab0:	2b00      	cmp	r3, #0
     ab2:	d15e      	bne.n	b72 <at25dfx_chip_set_sector_protect+0x116>
		module->locked = true;
     ab4:	3301      	adds	r3, #1
     ab6:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
     ab8:	4b32      	ldr	r3, [pc, #200]	; (b84 <at25dfx_chip_set_sector_protect+0x128>)
     aba:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     abc:	2306      	movs	r3, #6
     abe:	466a      	mov	r2, sp
     ac0:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     ac2:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     ac4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     ac6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     ac8:	2900      	cmp	r1, #0
     aca:	d104      	bne.n	ad6 <at25dfx_chip_set_sector_protect+0x7a>
		return &(ports[port_index]->Group[group_index]);
     acc:	0953      	lsrs	r3, r2, #5
     ace:	01db      	lsls	r3, r3, #7
     ad0:	492d      	ldr	r1, [pc, #180]	; (b88 <at25dfx_chip_set_sector_protect+0x12c>)
     ad2:	468c      	mov	ip, r1
     ad4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ad6:	211f      	movs	r1, #31
     ad8:	4011      	ands	r1, r2
     ada:	2201      	movs	r2, #1
     adc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     ade:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     ae0:	2201      	movs	r2, #1
     ae2:	4669      	mov	r1, sp
     ae4:	6820      	ldr	r0, [r4, #0]
     ae6:	4b29      	ldr	r3, [pc, #164]	; (b8c <at25dfx_chip_set_sector_protect+0x130>)
     ae8:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     aea:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     aec:	09d1      	lsrs	r1, r2, #7
		return NULL;
     aee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     af0:	2900      	cmp	r1, #0
     af2:	d104      	bne.n	afe <at25dfx_chip_set_sector_protect+0xa2>
		return &(ports[port_index]->Group[group_index]);
     af4:	0953      	lsrs	r3, r2, #5
     af6:	01db      	lsls	r3, r3, #7
     af8:	4923      	ldr	r1, [pc, #140]	; (b88 <at25dfx_chip_set_sector_protect+0x12c>)
     afa:	468c      	mov	ip, r1
     afc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     afe:	211f      	movs	r1, #31
     b00:	4011      	ands	r1, r2
     b02:	2201      	movs	r2, #1
     b04:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     b06:	619a      	str	r2, [r3, #24]
	cmd.opcode = protect ?
     b08:	2336      	movs	r3, #54	; 0x36
     b0a:	2d00      	cmp	r5, #0
     b0c:	d100      	bne.n	b10 <at25dfx_chip_set_sector_protect+0xb4>
     b0e:	3303      	adds	r3, #3
	cmd_buffer[0] = cmd.opcode;
     b10:	466a      	mov	r2, sp
     b12:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
     b14:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     b16:	0a33      	lsrs	r3, r6, #8
     b18:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     b1a:	0c36      	lsrs	r6, r6, #16
     b1c:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
     b1e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     b20:	09d1      	lsrs	r1, r2, #7
		return NULL;
     b22:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     b24:	2900      	cmp	r1, #0
     b26:	d104      	bne.n	b32 <at25dfx_chip_set_sector_protect+0xd6>
		return &(ports[port_index]->Group[group_index]);
     b28:	0953      	lsrs	r3, r2, #5
     b2a:	01db      	lsls	r3, r3, #7
     b2c:	4916      	ldr	r1, [pc, #88]	; (b88 <at25dfx_chip_set_sector_protect+0x12c>)
     b2e:	468c      	mov	ip, r1
     b30:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b32:	211f      	movs	r1, #31
     b34:	4011      	ands	r1, r2
     b36:	2201      	movs	r2, #1
     b38:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     b3a:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     b3c:	2204      	movs	r2, #4
     b3e:	4669      	mov	r1, sp
     b40:	6820      	ldr	r0, [r4, #0]
     b42:	4b12      	ldr	r3, [pc, #72]	; (b8c <at25dfx_chip_set_sector_protect+0x130>)
     b44:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     b46:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     b48:	09d1      	lsrs	r1, r2, #7
		return NULL;
     b4a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     b4c:	2900      	cmp	r1, #0
     b4e:	d104      	bne.n	b5a <at25dfx_chip_set_sector_protect+0xfe>
		return &(ports[port_index]->Group[group_index]);
     b50:	0953      	lsrs	r3, r2, #5
     b52:	01db      	lsls	r3, r3, #7
     b54:	490c      	ldr	r1, [pc, #48]	; (b88 <at25dfx_chip_set_sector_protect+0x12c>)
     b56:	468c      	mov	ip, r1
     b58:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     b5a:	211f      	movs	r1, #31
     b5c:	4011      	ands	r1, r2
     b5e:	2201      	movs	r2, #1
     b60:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     b62:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
     b64:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     b66:	2200      	movs	r2, #0
     b68:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
     b6a:	2000      	movs	r0, #0
     b6c:	e79a      	b.n	aa4 <at25dfx_chip_set_sector_protect+0x48>
		return STATUS_ERR_INVALID_ARG;
     b6e:	2017      	movs	r0, #23
     b70:	e798      	b.n	aa4 <at25dfx_chip_set_sector_protect+0x48>
     b72:	4b04      	ldr	r3, [pc, #16]	; (b84 <at25dfx_chip_set_sector_protect+0x128>)
     b74:	4798      	blx	r3
		return status;
     b76:	2005      	movs	r0, #5
     b78:	e794      	b.n	aa4 <at25dfx_chip_set_sector_protect+0x48>
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	0000950c 	.word	0x0000950c
     b80:	00003e99 	.word	0x00003e99
     b84:	00003ed9 	.word	0x00003ed9
     b88:	41004400 	.word	0x41004400
     b8c:	0000495d 	.word	0x0000495d

00000b90 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
     b90:	b530      	push	{r4, r5, lr}
     b92:	b083      	sub	sp, #12
     b94:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     b96:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
     b98:	4b1c      	ldr	r3, [pc, #112]	; (c0c <at25dfx_chip_sleep+0x7c>)
     b9a:	4798      	blx	r3
	if (module->locked) {
     b9c:	792b      	ldrb	r3, [r5, #4]
     b9e:	2b00      	cmp	r3, #0
     ba0:	d12e      	bne.n	c00 <at25dfx_chip_sleep+0x70>
		module->locked = true;
     ba2:	3301      	adds	r3, #1
     ba4:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     ba6:	4b1a      	ldr	r3, [pc, #104]	; (c10 <at25dfx_chip_sleep+0x80>)
     ba8:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     baa:	23b9      	movs	r3, #185	; 0xb9
     bac:	466a      	mov	r2, sp
     bae:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     bb0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     bb2:	09d1      	lsrs	r1, r2, #7
		return NULL;
     bb4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     bb6:	2900      	cmp	r1, #0
     bb8:	d104      	bne.n	bc4 <at25dfx_chip_sleep+0x34>
		return &(ports[port_index]->Group[group_index]);
     bba:	0953      	lsrs	r3, r2, #5
     bbc:	01db      	lsls	r3, r3, #7
     bbe:	4915      	ldr	r1, [pc, #84]	; (c14 <at25dfx_chip_sleep+0x84>)
     bc0:	468c      	mov	ip, r1
     bc2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     bc4:	211f      	movs	r1, #31
     bc6:	4011      	ands	r1, r2
     bc8:	2201      	movs	r2, #1
     bca:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     bcc:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     bce:	2201      	movs	r2, #1
     bd0:	4669      	mov	r1, sp
     bd2:	6820      	ldr	r0, [r4, #0]
     bd4:	4b10      	ldr	r3, [pc, #64]	; (c18 <at25dfx_chip_sleep+0x88>)
     bd6:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     bd8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     bda:	09d1      	lsrs	r1, r2, #7
		return NULL;
     bdc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     bde:	2900      	cmp	r1, #0
     be0:	d104      	bne.n	bec <at25dfx_chip_sleep+0x5c>
		return &(ports[port_index]->Group[group_index]);
     be2:	0953      	lsrs	r3, r2, #5
     be4:	01db      	lsls	r3, r3, #7
     be6:	490b      	ldr	r1, [pc, #44]	; (c14 <at25dfx_chip_sleep+0x84>)
     be8:	468c      	mov	ip, r1
     bea:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     bec:	211f      	movs	r1, #31
     bee:	4011      	ands	r1, r2
     bf0:	2201      	movs	r2, #1
     bf2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     bf4:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     bf6:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     bf8:	2200      	movs	r2, #0
     bfa:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     bfc:	2000      	movs	r0, #0
     bfe:	e002      	b.n	c06 <at25dfx_chip_sleep+0x76>
     c00:	4b03      	ldr	r3, [pc, #12]	; (c10 <at25dfx_chip_sleep+0x80>)
     c02:	4798      	blx	r3
		return status;
     c04:	2005      	movs	r0, #5
}
     c06:	b003      	add	sp, #12
     c08:	bd30      	pop	{r4, r5, pc}
     c0a:	46c0      	nop			; (mov r8, r8)
     c0c:	00003e99 	.word	0x00003e99
     c10:	00003ed9 	.word	0x00003ed9
     c14:	41004400 	.word	0x41004400
     c18:	0000495d 	.word	0x0000495d

00000c1c <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     c1c:	b530      	push	{r4, r5, lr}
     c1e:	b083      	sub	sp, #12
     c20:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     c22:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
     c24:	4b1c      	ldr	r3, [pc, #112]	; (c98 <at25dfx_chip_wake+0x7c>)
     c26:	4798      	blx	r3
	if (module->locked) {
     c28:	792b      	ldrb	r3, [r5, #4]
     c2a:	2b00      	cmp	r3, #0
     c2c:	d12e      	bne.n	c8c <at25dfx_chip_wake+0x70>
		module->locked = true;
     c2e:	3301      	adds	r3, #1
     c30:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
     c32:	4b1a      	ldr	r3, [pc, #104]	; (c9c <at25dfx_chip_wake+0x80>)
     c34:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     c36:	23ab      	movs	r3, #171	; 0xab
     c38:	466a      	mov	r2, sp
     c3a:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     c3c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     c3e:	09d1      	lsrs	r1, r2, #7
		return NULL;
     c40:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c42:	2900      	cmp	r1, #0
     c44:	d104      	bne.n	c50 <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
     c46:	0953      	lsrs	r3, r2, #5
     c48:	01db      	lsls	r3, r3, #7
     c4a:	4915      	ldr	r1, [pc, #84]	; (ca0 <at25dfx_chip_wake+0x84>)
     c4c:	468c      	mov	ip, r1
     c4e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c50:	211f      	movs	r1, #31
     c52:	4011      	ands	r1, r2
     c54:	2201      	movs	r2, #1
     c56:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     c58:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     c5a:	2201      	movs	r2, #1
     c5c:	4669      	mov	r1, sp
     c5e:	6820      	ldr	r0, [r4, #0]
     c60:	4b10      	ldr	r3, [pc, #64]	; (ca4 <at25dfx_chip_wake+0x88>)
     c62:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
     c64:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     c66:	09d1      	lsrs	r1, r2, #7
		return NULL;
     c68:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     c6a:	2900      	cmp	r1, #0
     c6c:	d104      	bne.n	c78 <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
     c6e:	0953      	lsrs	r3, r2, #5
     c70:	01db      	lsls	r3, r3, #7
     c72:	490b      	ldr	r1, [pc, #44]	; (ca0 <at25dfx_chip_wake+0x84>)
     c74:	468c      	mov	ip, r1
     c76:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     c78:	211f      	movs	r1, #31
     c7a:	4011      	ands	r1, r2
     c7c:	2201      	movs	r2, #1
     c7e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     c80:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     c82:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     c84:	2200      	movs	r2, #0
     c86:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     c88:	2000      	movs	r0, #0
     c8a:	e002      	b.n	c92 <at25dfx_chip_wake+0x76>
     c8c:	4b03      	ldr	r3, [pc, #12]	; (c9c <at25dfx_chip_wake+0x80>)
     c8e:	4798      	blx	r3
		return status;
     c90:	2005      	movs	r0, #5
     c92:	b003      	add	sp, #12
     c94:	bd30      	pop	{r4, r5, pc}
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	00003e99 	.word	0x00003e99
     c9c:	00003ed9 	.word	0x00003ed9
     ca0:	41004400 	.word	0x41004400
     ca4:	0000495d 	.word	0x0000495d

00000ca8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     ca8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     caa:	2000      	movs	r0, #0
     cac:	4b08      	ldr	r3, [pc, #32]	; (cd0 <delay_init+0x28>)
     cae:	4798      	blx	r3
     cb0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     cb2:	4c08      	ldr	r4, [pc, #32]	; (cd4 <delay_init+0x2c>)
     cb4:	21fa      	movs	r1, #250	; 0xfa
     cb6:	0089      	lsls	r1, r1, #2
     cb8:	47a0      	blx	r4
     cba:	4b07      	ldr	r3, [pc, #28]	; (cd8 <delay_init+0x30>)
     cbc:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     cbe:	4907      	ldr	r1, [pc, #28]	; (cdc <delay_init+0x34>)
     cc0:	0028      	movs	r0, r5
     cc2:	47a0      	blx	r4
     cc4:	4b06      	ldr	r3, [pc, #24]	; (ce0 <delay_init+0x38>)
     cc6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     cc8:	2205      	movs	r2, #5
     cca:	4b06      	ldr	r3, [pc, #24]	; (ce4 <delay_init+0x3c>)
     ccc:	601a      	str	r2, [r3, #0]
}
     cce:	bd70      	pop	{r4, r5, r6, pc}
     cd0:	00005699 	.word	0x00005699
     cd4:	00007999 	.word	0x00007999
     cd8:	20000000 	.word	0x20000000
     cdc:	000f4240 	.word	0x000f4240
     ce0:	20000004 	.word	0x20000004
     ce4:	e000e010 	.word	0xe000e010

00000ce8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     ce8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     cea:	4b08      	ldr	r3, [pc, #32]	; (d0c <delay_cycles_ms+0x24>)
     cec:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     cee:	4a08      	ldr	r2, [pc, #32]	; (d10 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     cf0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     cf2:	2180      	movs	r1, #128	; 0x80
     cf4:	0249      	lsls	r1, r1, #9
	while (n--) {
     cf6:	3801      	subs	r0, #1
     cf8:	d307      	bcc.n	d0a <delay_cycles_ms+0x22>
	if (n > 0) {
     cfa:	2c00      	cmp	r4, #0
     cfc:	d0fb      	beq.n	cf6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     cfe:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     d00:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     d02:	6813      	ldr	r3, [r2, #0]
     d04:	420b      	tst	r3, r1
     d06:	d0fc      	beq.n	d02 <delay_cycles_ms+0x1a>
     d08:	e7f5      	b.n	cf6 <delay_cycles_ms+0xe>
	}
}
     d0a:	bd30      	pop	{r4, r5, pc}
     d0c:	20000000 	.word	0x20000000
     d10:	e000e010 	.word	0xe000e010

00000d14 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     d14:	b510      	push	{r4, lr}
	if (gpfIsr) {
     d16:	4b03      	ldr	r3, [pc, #12]	; (d24 <chip_isr+0x10>)
     d18:	681b      	ldr	r3, [r3, #0]
     d1a:	2b00      	cmp	r3, #0
     d1c:	d000      	beq.n	d20 <chip_isr+0xc>
		gpfIsr();
     d1e:	4798      	blx	r3
	}
}
     d20:	bd10      	pop	{r4, pc}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	200001fc 	.word	0x200001fc

00000d28 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     d28:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     d2a:	1e44      	subs	r4, r0, #1
     d2c:	2800      	cmp	r0, #0
     d2e:	d004      	beq.n	d3a <nm_bsp_sleep+0x12>
		delay_ms(1);
     d30:	4d02      	ldr	r5, [pc, #8]	; (d3c <nm_bsp_sleep+0x14>)
     d32:	2001      	movs	r0, #1
     d34:	47a8      	blx	r5
	while (u32TimeMsec--) {
     d36:	3c01      	subs	r4, #1
     d38:	d2fb      	bcs.n	d32 <nm_bsp_sleep+0xa>
	}
}
     d3a:	bd70      	pop	{r4, r5, r6, pc}
     d3c:	00000ce9 	.word	0x00000ce9

00000d40 <nm_bsp_reset>:
{
     d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		port_base->OUTCLR.reg = pin_mask;
     d42:	4c08      	ldr	r4, [pc, #32]	; (d64 <nm_bsp_reset+0x24>)
     d44:	2780      	movs	r7, #128	; 0x80
     d46:	057f      	lsls	r7, r7, #21
     d48:	6167      	str	r7, [r4, #20]
     d4a:	2680      	movs	r6, #128	; 0x80
     d4c:	0536      	lsls	r6, r6, #20
     d4e:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
     d50:	2064      	movs	r0, #100	; 0x64
     d52:	4d05      	ldr	r5, [pc, #20]	; (d68 <nm_bsp_reset+0x28>)
     d54:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     d56:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(100);
     d58:	2064      	movs	r0, #100	; 0x64
     d5a:	47a8      	blx	r5
     d5c:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
     d5e:	2064      	movs	r0, #100	; 0x64
     d60:	47a8      	blx	r5
}
     d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d64:	41004400 	.word	0x41004400
     d68:	00000d29 	.word	0x00000d29

00000d6c <nm_bsp_init>:
{
     d6c:	b570      	push	{r4, r5, r6, lr}
     d6e:	b082      	sub	sp, #8
	gpfIsr = NULL;
     d70:	2300      	movs	r3, #0
     d72:	4a16      	ldr	r2, [pc, #88]	; (dcc <nm_bsp_init+0x60>)
     d74:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     d76:	ac01      	add	r4, sp, #4
     d78:	2501      	movs	r5, #1
     d7a:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     d7c:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     d7e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     d80:	0021      	movs	r1, r4
     d82:	201b      	movs	r0, #27
     d84:	4e12      	ldr	r6, [pc, #72]	; (dd0 <nm_bsp_init+0x64>)
     d86:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     d88:	0021      	movs	r1, r4
     d8a:	201c      	movs	r0, #28
     d8c:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     d8e:	0021      	movs	r1, r4
     d90:	2028      	movs	r0, #40	; 0x28
     d92:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     d94:	4b0f      	ldr	r3, [pc, #60]	; (dd4 <nm_bsp_init+0x68>)
     d96:	2280      	movs	r2, #128	; 0x80
     d98:	0552      	lsls	r2, r2, #21
     d9a:	615a      	str	r2, [r3, #20]
     d9c:	2280      	movs	r2, #128	; 0x80
     d9e:	0512      	lsls	r2, r2, #20
     da0:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     da2:	4b0d      	ldr	r3, [pc, #52]	; (dd8 <nm_bsp_init+0x6c>)
     da4:	681b      	ldr	r3, [r3, #0]
     da6:	421d      	tst	r5, r3
     da8:	d003      	beq.n	db2 <nm_bsp_init+0x46>
     daa:	4b0b      	ldr	r3, [pc, #44]	; (dd8 <nm_bsp_init+0x6c>)
     dac:	681b      	ldr	r3, [r3, #0]
     dae:	079b      	lsls	r3, r3, #30
     db0:	d401      	bmi.n	db6 <nm_bsp_init+0x4a>
	    delay_init();
     db2:	4b0a      	ldr	r3, [pc, #40]	; (ddc <nm_bsp_init+0x70>)
     db4:	4798      	blx	r3
	nm_bsp_reset();
     db6:	4b0a      	ldr	r3, [pc, #40]	; (de0 <nm_bsp_init+0x74>)
     db8:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     dba:	2201      	movs	r2, #1
     dbc:	4b09      	ldr	r3, [pc, #36]	; (de4 <nm_bsp_init+0x78>)
     dbe:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     dc0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     dc4:	b662      	cpsie	i
}
     dc6:	2000      	movs	r0, #0
     dc8:	b002      	add	sp, #8
     dca:	bd70      	pop	{r4, r5, r6, pc}
     dcc:	200001fc 	.word	0x200001fc
     dd0:	00004111 	.word	0x00004111
     dd4:	41004400 	.word	0x41004400
     dd8:	e000e010 	.word	0xe000e010
     ddc:	00000ca9 	.word	0x00000ca9
     de0:	00000d41 	.word	0x00000d41
     de4:	2000000a 	.word	0x2000000a

00000de8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     de8:	b510      	push	{r4, lr}
     dea:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     dec:	4b0e      	ldr	r3, [pc, #56]	; (e28 <nm_bsp_register_isr+0x40>)
     dee:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     df0:	ac01      	add	r4, sp, #4
     df2:	0020      	movs	r0, r4
     df4:	4b0d      	ldr	r3, [pc, #52]	; (e2c <nm_bsp_register_isr+0x44>)
     df6:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     df8:	2329      	movs	r3, #41	; 0x29
     dfa:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     dfc:	2300      	movs	r3, #0
     dfe:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     e00:	3301      	adds	r3, #1
     e02:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     e04:	3301      	adds	r3, #1
     e06:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     e08:	0021      	movs	r1, r4
     e0a:	2009      	movs	r0, #9
     e0c:	4b08      	ldr	r3, [pc, #32]	; (e30 <nm_bsp_register_isr+0x48>)
     e0e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     e10:	2200      	movs	r2, #0
     e12:	2109      	movs	r1, #9
     e14:	4807      	ldr	r0, [pc, #28]	; (e34 <nm_bsp_register_isr+0x4c>)
     e16:	4b08      	ldr	r3, [pc, #32]	; (e38 <nm_bsp_register_isr+0x50>)
     e18:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     e1a:	2100      	movs	r1, #0
     e1c:	2009      	movs	r0, #9
     e1e:	4b07      	ldr	r3, [pc, #28]	; (e3c <nm_bsp_register_isr+0x54>)
     e20:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     e22:	b004      	add	sp, #16
     e24:	bd10      	pop	{r4, pc}
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	200001fc 	.word	0x200001fc
     e2c:	00004085 	.word	0x00004085
     e30:	00004099 	.word	0x00004099
     e34:	00000d15 	.word	0x00000d15
     e38:	00003f41 	.word	0x00003f41
     e3c:	00003f6d 	.word	0x00003f6d

00000e40 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     e40:	b510      	push	{r4, lr}
	if (u8Enable) {
     e42:	2800      	cmp	r0, #0
     e44:	d104      	bne.n	e50 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     e46:	2100      	movs	r1, #0
     e48:	2009      	movs	r0, #9
     e4a:	4b04      	ldr	r3, [pc, #16]	; (e5c <nm_bsp_interrupt_ctrl+0x1c>)
     e4c:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     e4e:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     e50:	2100      	movs	r1, #0
     e52:	2009      	movs	r0, #9
     e54:	4b02      	ldr	r3, [pc, #8]	; (e60 <nm_bsp_interrupt_ctrl+0x20>)
     e56:	4798      	blx	r3
     e58:	e7f9      	b.n	e4e <nm_bsp_interrupt_ctrl+0xe>
     e5a:	46c0      	nop			; (mov r8, r8)
     e5c:	00003f8d 	.word	0x00003f8d
     e60:	00003f6d 	.word	0x00003f6d

00000e64 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     e64:	b530      	push	{r4, r5, lr}
     e66:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
     e68:	4c30      	ldr	r4, [pc, #192]	; (f2c <nm_bus_init+0xc8>)
     e6a:	230e      	movs	r3, #14
     e6c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     e6e:	2300      	movs	r3, #0
     e70:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     e72:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     e74:	a901      	add	r1, sp, #4
     e76:	2201      	movs	r2, #1
     e78:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     e7a:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     e7c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     e7e:	200e      	movs	r0, #14
     e80:	4b2b      	ldr	r3, [pc, #172]	; (f30 <nm_bus_init+0xcc>)
     e82:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     e84:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
     e86:	09d1      	lsrs	r1, r2, #7
		return NULL;
     e88:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     e8a:	2900      	cmp	r1, #0
     e8c:	d104      	bne.n	e98 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     e8e:	0953      	lsrs	r3, r2, #5
     e90:	01db      	lsls	r3, r3, #7
     e92:	4928      	ldr	r1, [pc, #160]	; (f34 <nm_bus_init+0xd0>)
     e94:	468c      	mov	ip, r1
     e96:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     e98:	211f      	movs	r1, #31
     e9a:	4011      	ands	r1, r2
     e9c:	2201      	movs	r2, #1
     e9e:	0010      	movs	r0, r2
     ea0:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     ea2:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     ea4:	ac02      	add	r4, sp, #8
     ea6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     ea8:	2300      	movs	r3, #0
     eaa:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     eac:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     eae:	21c0      	movs	r1, #192	; 0xc0
     eb0:	0389      	lsls	r1, r1, #14
     eb2:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     eb4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     eb6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     eb8:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     eba:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     ebc:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     ebe:	3223      	adds	r2, #35	; 0x23
     ec0:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     ec2:	3a18      	subs	r2, #24
     ec4:	2100      	movs	r1, #0
     ec6:	a808      	add	r0, sp, #32
     ec8:	4b1b      	ldr	r3, [pc, #108]	; (f38 <nm_bus_init+0xd4>)
     eca:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     ecc:	4b1b      	ldr	r3, [pc, #108]	; (f3c <nm_bus_init+0xd8>)
     ece:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     ed0:	4b1b      	ldr	r3, [pc, #108]	; (f40 <nm_bus_init+0xdc>)
     ed2:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     ed4:	2301      	movs	r3, #1
     ed6:	425b      	negs	r3, r3
     ed8:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     eda:	4b1a      	ldr	r3, [pc, #104]	; (f44 <nm_bus_init+0xe0>)
     edc:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     ede:	4b1a      	ldr	r3, [pc, #104]	; (f48 <nm_bus_init+0xe4>)
     ee0:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     ee2:	0022      	movs	r2, r4
     ee4:	4919      	ldr	r1, [pc, #100]	; (f4c <nm_bus_init+0xe8>)
     ee6:	481a      	ldr	r0, [pc, #104]	; (f50 <nm_bus_init+0xec>)
     ee8:	4b1a      	ldr	r3, [pc, #104]	; (f54 <nm_bus_init+0xf0>)
     eea:	4798      	blx	r3
     eec:	2800      	cmp	r0, #0
     eee:	d11a      	bne.n	f26 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
     ef0:	4d17      	ldr	r5, [pc, #92]	; (f50 <nm_bus_init+0xec>)
     ef2:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     ef4:	0020      	movs	r0, r4
     ef6:	4b18      	ldr	r3, [pc, #96]	; (f58 <nm_bus_init+0xf4>)
     ef8:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     efa:	231f      	movs	r3, #31
     efc:	4018      	ands	r0, r3
     efe:	3b1e      	subs	r3, #30
     f00:	4083      	lsls	r3, r0
     f02:	4a16      	ldr	r2, [pc, #88]	; (f5c <nm_bus_init+0xf8>)
     f04:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     f06:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     f08:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     f0a:	2b00      	cmp	r3, #0
     f0c:	d1fc      	bne.n	f08 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     f0e:	6823      	ldr	r3, [r4, #0]
     f10:	2202      	movs	r2, #2
     f12:	4313      	orrs	r3, r2
     f14:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     f16:	4b12      	ldr	r3, [pc, #72]	; (f60 <nm_bus_init+0xfc>)
     f18:	4798      	blx	r3
	nm_bsp_sleep(1);
     f1a:	2001      	movs	r0, #1
     f1c:	4b11      	ldr	r3, [pc, #68]	; (f64 <nm_bus_init+0x100>)
     f1e:	4798      	blx	r3
#endif
	return result;
     f20:	2000      	movs	r0, #0
}
     f22:	b011      	add	sp, #68	; 0x44
     f24:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     f26:	2006      	movs	r0, #6
     f28:	4240      	negs	r0, r0
     f2a:	e7fa      	b.n	f22 <nm_bus_init+0xbe>
     f2c:	200002c0 	.word	0x200002c0
     f30:	00004111 	.word	0x00004111
     f34:	41004400 	.word	0x41004400
     f38:	00007d8b 	.word	0x00007d8b
     f3c:	000c0002 	.word	0x000c0002
     f40:	000d0002 	.word	0x000d0002
     f44:	000f0002 	.word	0x000f0002
     f48:	00b71b00 	.word	0x00b71b00
     f4c:	42001000 	.word	0x42001000
     f50:	200002c4 	.word	0x200002c4
     f54:	000045bd 	.word	0x000045bd
     f58:	0000452d 	.word	0x0000452d
     f5c:	e000e100 	.word	0xe000e100
     f60:	00000d41 	.word	0x00000d41
     f64:	00000d29 	.word	0x00000d29

00000f68 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     f68:	b5f0      	push	{r4, r5, r6, r7, lr}
     f6a:	46de      	mov	lr, fp
     f6c:	4657      	mov	r7, sl
     f6e:	464e      	mov	r6, r9
     f70:	4645      	mov	r5, r8
     f72:	b5e0      	push	{r5, r6, r7, lr}
     f74:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     f76:	2803      	cmp	r0, #3
     f78:	d000      	beq.n	f7c <nm_bus_ioctl+0x14>
     f7a:	e075      	b.n	1068 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     f7c:	680e      	ldr	r6, [r1, #0]
     f7e:	684d      	ldr	r5, [r1, #4]
     f80:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     f82:	2200      	movs	r2, #0
     f84:	466b      	mov	r3, sp
     f86:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     f88:	2d00      	cmp	r5, #0
     f8a:	d027      	beq.n	fdc <nm_bus_ioctl+0x74>
     f8c:	2c00      	cmp	r4, #0
     f8e:	d065      	beq.n	105c <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
     f90:	2e00      	cmp	r6, #0
     f92:	d100      	bne.n	f96 <nm_bus_ioctl+0x2e>
     f94:	e077      	b.n	1086 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     f96:	2300      	movs	r3, #0
     f98:	4698      	mov	r8, r3
     f9a:	2300      	movs	r3, #0
     f9c:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
     f9e:	2201      	movs	r2, #1
     fa0:	493b      	ldr	r1, [pc, #236]	; (1090 <nm_bus_ioctl+0x128>)
     fa2:	483c      	ldr	r0, [pc, #240]	; (1094 <nm_bus_ioctl+0x12c>)
     fa4:	4b3c      	ldr	r3, [pc, #240]	; (1098 <nm_bus_ioctl+0x130>)
     fa6:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     fa8:	4b3a      	ldr	r3, [pc, #232]	; (1094 <nm_bus_ioctl+0x12c>)
     faa:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
     fac:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
     fae:	2204      	movs	r2, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fb0:	4699      	mov	r9, r3
			pu8Miso++;
     fb2:	4659      	mov	r1, fp
     fb4:	424b      	negs	r3, r1
     fb6:	4159      	adcs	r1, r3
     fb8:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
     fba:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     fbc:	4653      	mov	r3, sl
     fbe:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     fc0:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     fc2:	4239      	tst	r1, r7
     fc4:	d0fc      	beq.n	fc0 <nm_bus_ioctl+0x58>
     fc6:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     fc8:	4239      	tst	r1, r7
     fca:	d0fc      	beq.n	fc6 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     fcc:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     fce:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
     fd0:	4211      	tst	r1, r2
     fd2:	d0fc      	beq.n	fce <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     fd4:	4649      	mov	r1, r9
     fd6:	7989      	ldrb	r1, [r1, #6]
     fd8:	468c      	mov	ip, r1
     fda:	e011      	b.n	1000 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     fdc:	2e00      	cmp	r6, #0
     fde:	d03a      	beq.n	1056 <nm_bus_ioctl+0xee>
     fe0:	2c00      	cmp	r4, #0
     fe2:	d03e      	beq.n	1062 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     fe4:	2300      	movs	r3, #0
     fe6:	4698      	mov	r8, r3
		u8SkipMiso = 1;
     fe8:	3301      	adds	r3, #1
     fea:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
     fec:	466b      	mov	r3, sp
     fee:	1ddd      	adds	r5, r3, #7
     ff0:	e7d5      	b.n	f9e <nm_bus_ioctl+0x36>
     ff2:	4660      	mov	r0, ip
     ff4:	2801      	cmp	r0, #1
     ff6:	d00d      	beq.n	1014 <nm_bus_ioctl+0xac>
		*rx_data = (uint8_t)spi_module->DATA.reg;
     ff8:	6a98      	ldr	r0, [r3, #40]	; 0x28
     ffa:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     ffc:	2900      	cmp	r1, #0
     ffe:	d00d      	beq.n	101c <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1000:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1002:	4211      	tst	r1, r2
    1004:	d0fc      	beq.n	1000 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1006:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    1008:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    100a:	4210      	tst	r0, r2
    100c:	d0f1      	beq.n	ff2 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    100e:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1010:	311e      	adds	r1, #30
    1012:	e7ee      	b.n	ff2 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1014:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1016:	05c0      	lsls	r0, r0, #23
    1018:	0dc0      	lsrs	r0, r0, #23
    101a:	e7ef      	b.n	ffc <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    101c:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    101e:	3c01      	subs	r4, #1
    1020:	b2a4      	uxth	r4, r4
			pu8Miso++;
    1022:	445d      	add	r5, fp
			pu8Mosi++;
    1024:	4643      	mov	r3, r8
    1026:	4259      	negs	r1, r3
    1028:	414b      	adcs	r3, r1
    102a:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    102c:	2c00      	cmp	r4, #0
    102e:	d1c4      	bne.n	fba <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1030:	4b18      	ldr	r3, [pc, #96]	; (1094 <nm_bus_ioctl+0x12c>)
    1032:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    1034:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1036:	7e0b      	ldrb	r3, [r1, #24]
    1038:	4213      	tst	r3, r2
    103a:	d0fc      	beq.n	1036 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    103c:	2200      	movs	r2, #0
    103e:	4914      	ldr	r1, [pc, #80]	; (1090 <nm_bus_ioctl+0x128>)
    1040:	4814      	ldr	r0, [pc, #80]	; (1094 <nm_bus_ioctl+0x12c>)
    1042:	4b15      	ldr	r3, [pc, #84]	; (1098 <nm_bus_ioctl+0x130>)
    1044:	4798      	blx	r3
	return M2M_SUCCESS;
    1046:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    1048:	b003      	add	sp, #12
    104a:	bc3c      	pop	{r2, r3, r4, r5}
    104c:	4690      	mov	r8, r2
    104e:	4699      	mov	r9, r3
    1050:	46a2      	mov	sl, r4
    1052:	46ab      	mov	fp, r5
    1054:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    1056:	200f      	movs	r0, #15
    1058:	4240      	negs	r0, r0
    105a:	e7f5      	b.n	1048 <nm_bus_ioctl+0xe0>
    105c:	200f      	movs	r0, #15
    105e:	4240      	negs	r0, r0
    1060:	e7f2      	b.n	1048 <nm_bus_ioctl+0xe0>
    1062:	200f      	movs	r0, #15
    1064:	4240      	negs	r0, r0
		break;
    1066:	e7ef      	b.n	1048 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    1068:	220e      	movs	r2, #14
    106a:	32ff      	adds	r2, #255	; 0xff
    106c:	490b      	ldr	r1, [pc, #44]	; (109c <nm_bus_ioctl+0x134>)
    106e:	480c      	ldr	r0, [pc, #48]	; (10a0 <nm_bus_ioctl+0x138>)
    1070:	4b0c      	ldr	r3, [pc, #48]	; (10a4 <nm_bus_ioctl+0x13c>)
    1072:	4798      	blx	r3
    1074:	480c      	ldr	r0, [pc, #48]	; (10a8 <nm_bus_ioctl+0x140>)
    1076:	4b0d      	ldr	r3, [pc, #52]	; (10ac <nm_bus_ioctl+0x144>)
    1078:	4798      	blx	r3
    107a:	200d      	movs	r0, #13
    107c:	4b0c      	ldr	r3, [pc, #48]	; (10b0 <nm_bus_ioctl+0x148>)
    107e:	4798      	blx	r3
			s8Ret = -1;
    1080:	2001      	movs	r0, #1
    1082:	4240      	negs	r0, r0
	return s8Ret;
    1084:	e7e0      	b.n	1048 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    1086:	2301      	movs	r3, #1
    1088:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    108a:	466b      	mov	r3, sp
    108c:	1dde      	adds	r6, r3, #7
    108e:	e784      	b.n	f9a <nm_bus_ioctl+0x32>
    1090:	200002c0 	.word	0x200002c0
    1094:	200002c4 	.word	0x200002c4
    1098:	00004869 	.word	0x00004869
    109c:	00009534 	.word	0x00009534
    10a0:	00009544 	.word	0x00009544
    10a4:	00007eed 	.word	0x00007eed
    10a8:	00009558 	.word	0x00009558
    10ac:	00008009 	.word	0x00008009
    10b0:	00007f21 	.word	0x00007f21

000010b4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    10b4:	b530      	push	{r4, r5, lr}
    10b6:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    10b8:	ab01      	add	r3, sp, #4
    10ba:	2200      	movs	r2, #0
    10bc:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    10be:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    10c0:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    10c2:	4d13      	ldr	r5, [pc, #76]	; (1110 <nm_bus_deinit+0x5c>)
    10c4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    10c6:	0020      	movs	r0, r4
    10c8:	4b12      	ldr	r3, [pc, #72]	; (1114 <nm_bus_deinit+0x60>)
    10ca:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    10cc:	231f      	movs	r3, #31
    10ce:	4018      	ands	r0, r3
    10d0:	3b1e      	subs	r3, #30
    10d2:	4083      	lsls	r3, r0
    10d4:	2280      	movs	r2, #128	; 0x80
    10d6:	4910      	ldr	r1, [pc, #64]	; (1118 <nm_bus_deinit+0x64>)
    10d8:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    10da:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    10dc:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    10de:	2b00      	cmp	r3, #0
    10e0:	d1fc      	bne.n	10dc <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    10e2:	338f      	adds	r3, #143	; 0x8f
    10e4:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    10e6:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    10e8:	6823      	ldr	r3, [r4, #0]
    10ea:	2202      	movs	r2, #2
    10ec:	4393      	bics	r3, r2
    10ee:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    10f0:	a901      	add	r1, sp, #4
    10f2:	200c      	movs	r0, #12
    10f4:	4c09      	ldr	r4, [pc, #36]	; (111c <nm_bus_deinit+0x68>)
    10f6:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    10f8:	a901      	add	r1, sp, #4
    10fa:	200f      	movs	r0, #15
    10fc:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    10fe:	a901      	add	r1, sp, #4
    1100:	200d      	movs	r0, #13
    1102:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    1104:	a901      	add	r1, sp, #4
    1106:	200e      	movs	r0, #14
    1108:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    110a:	2000      	movs	r0, #0
    110c:	b003      	add	sp, #12
    110e:	bd30      	pop	{r4, r5, pc}
    1110:	200002c4 	.word	0x200002c4
    1114:	0000452d 	.word	0x0000452d
    1118:	e000e100 	.word	0xe000e100
    111c:	00004111 	.word	0x00004111

00001120 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    1120:	2a00      	cmp	r2, #0
    1122:	d006      	beq.n	1132 <m2m_memcpy+0x12>
    1124:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    1126:	780b      	ldrb	r3, [r1, #0]
    1128:	7003      	strb	r3, [r0, #0]
		pDst++;
    112a:	3001      	adds	r0, #1
		pSrc++;
    112c:	3101      	adds	r1, #1
	}while(--sz);
    112e:	4290      	cmp	r0, r2
    1130:	d1f9      	bne.n	1126 <m2m_memcpy+0x6>
}
    1132:	4770      	bx	lr

00001134 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    1134:	2a00      	cmp	r2, #0
    1136:	d004      	beq.n	1142 <m2m_memset+0xe>
    1138:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    113a:	7001      	strb	r1, [r0, #0]
		pBuf++;
    113c:	3001      	adds	r0, #1
	}while(--sz);
    113e:	4290      	cmp	r0, r2
    1140:	d1fb      	bne.n	113a <m2m_memset+0x6>
}
    1142:	4770      	bx	lr

00001144 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    1144:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    1146:	7802      	ldrb	r2, [r0, #0]
    1148:	2a00      	cmp	r2, #0
    114a:	d007      	beq.n	115c <m2m_strlen+0x18>
    114c:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    114e:	3001      	adds	r0, #1
    1150:	b280      	uxth	r0, r0
		pcStr++;
    1152:	3301      	adds	r3, #1
	while(*pcStr)
    1154:	781a      	ldrb	r2, [r3, #0]
    1156:	2a00      	cmp	r2, #0
    1158:	d1f9      	bne.n	114e <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    115a:	4770      	bx	lr
	uint16	u16StrLen = 0;
    115c:	2000      	movs	r0, #0
    115e:	e7fc      	b.n	115a <m2m_strlen+0x16>

00001160 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    1160:	4a02      	ldr	r2, [pc, #8]	; (116c <isr+0xc>)
    1162:	78d3      	ldrb	r3, [r2, #3]
    1164:	3301      	adds	r3, #1
    1166:	b2db      	uxtb	r3, r3
    1168:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    116a:	4770      	bx	lr
    116c:	20000300 	.word	0x20000300

00001170 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    1170:	4770      	bx	lr
	...

00001174 <hif_set_rx_done>:
{
    1174:	b500      	push	{lr}
    1176:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    1178:	2200      	movs	r2, #0
    117a:	4b0a      	ldr	r3, [pc, #40]	; (11a4 <hif_set_rx_done+0x30>)
    117c:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    117e:	2001      	movs	r0, #1
    1180:	4b09      	ldr	r3, [pc, #36]	; (11a8 <hif_set_rx_done+0x34>)
    1182:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    1184:	a901      	add	r1, sp, #4
    1186:	4809      	ldr	r0, [pc, #36]	; (11ac <hif_set_rx_done+0x38>)
    1188:	4b09      	ldr	r3, [pc, #36]	; (11b0 <hif_set_rx_done+0x3c>)
    118a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    118c:	2800      	cmp	r0, #0
    118e:	d001      	beq.n	1194 <hif_set_rx_done+0x20>
}
    1190:	b003      	add	sp, #12
    1192:	bd00      	pop	{pc}
	reg |= NBIT1;
    1194:	2102      	movs	r1, #2
    1196:	9b01      	ldr	r3, [sp, #4]
    1198:	4319      	orrs	r1, r3
    119a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    119c:	4803      	ldr	r0, [pc, #12]	; (11ac <hif_set_rx_done+0x38>)
    119e:	4b05      	ldr	r3, [pc, #20]	; (11b4 <hif_set_rx_done+0x40>)
    11a0:	4798      	blx	r3
    11a2:	e7f5      	b.n	1190 <hif_set_rx_done+0x1c>
    11a4:	20000300 	.word	0x20000300
    11a8:	00000e41 	.word	0x00000e41
    11ac:	00001070 	.word	0x00001070
    11b0:	0000257d 	.word	0x0000257d
    11b4:	00002589 	.word	0x00002589

000011b8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    11b8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    11ba:	4b0c      	ldr	r3, [pc, #48]	; (11ec <hif_chip_wake+0x34>)
    11bc:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    11be:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    11c0:	2b00      	cmp	r3, #0
    11c2:	d10d      	bne.n	11e0 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    11c4:	4b09      	ldr	r3, [pc, #36]	; (11ec <hif_chip_wake+0x34>)
    11c6:	785b      	ldrb	r3, [r3, #1]
    11c8:	2b00      	cmp	r3, #0
    11ca:	d103      	bne.n	11d4 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    11cc:	4b07      	ldr	r3, [pc, #28]	; (11ec <hif_chip_wake+0x34>)
    11ce:	781b      	ldrb	r3, [r3, #0]
    11d0:	2b00      	cmp	r3, #0
    11d2:	d106      	bne.n	11e2 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    11d4:	4a05      	ldr	r2, [pc, #20]	; (11ec <hif_chip_wake+0x34>)
    11d6:	7853      	ldrb	r3, [r2, #1]
    11d8:	3301      	adds	r3, #1
    11da:	b2db      	uxtb	r3, r3
    11dc:	7053      	strb	r3, [r2, #1]
    11de:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    11e0:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    11e2:	4b03      	ldr	r3, [pc, #12]	; (11f0 <hif_chip_wake+0x38>)
    11e4:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    11e6:	2800      	cmp	r0, #0
    11e8:	d0f4      	beq.n	11d4 <hif_chip_wake+0x1c>
    11ea:	e7f9      	b.n	11e0 <hif_chip_wake+0x28>
    11ec:	20000300 	.word	0x20000300
    11f0:	00002265 	.word	0x00002265

000011f4 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    11f4:	4b05      	ldr	r3, [pc, #20]	; (120c <hif_chip_sleep_sc+0x18>)
    11f6:	785b      	ldrb	r3, [r3, #1]
    11f8:	2b00      	cmp	r3, #0
    11fa:	d004      	beq.n	1206 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    11fc:	4a03      	ldr	r2, [pc, #12]	; (120c <hif_chip_sleep_sc+0x18>)
    11fe:	7853      	ldrb	r3, [r2, #1]
    1200:	3b01      	subs	r3, #1
    1202:	b2db      	uxtb	r3, r3
    1204:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    1206:	2000      	movs	r0, #0
    1208:	4770      	bx	lr
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	20000300 	.word	0x20000300

00001210 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    1210:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    1212:	4b0b      	ldr	r3, [pc, #44]	; (1240 <hif_chip_sleep+0x30>)
    1214:	785b      	ldrb	r3, [r3, #1]
    1216:	2b00      	cmp	r3, #0
    1218:	d004      	beq.n	1224 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    121a:	4a09      	ldr	r2, [pc, #36]	; (1240 <hif_chip_sleep+0x30>)
    121c:	7853      	ldrb	r3, [r2, #1]
    121e:	3b01      	subs	r3, #1
    1220:	b2db      	uxtb	r3, r3
    1222:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    1224:	4b06      	ldr	r3, [pc, #24]	; (1240 <hif_chip_sleep+0x30>)
    1226:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    1228:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    122a:	2b00      	cmp	r3, #0
    122c:	d103      	bne.n	1236 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    122e:	4b04      	ldr	r3, [pc, #16]	; (1240 <hif_chip_sleep+0x30>)
    1230:	781b      	ldrb	r3, [r3, #0]
    1232:	2b00      	cmp	r3, #0
    1234:	d100      	bne.n	1238 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    1236:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    1238:	4b02      	ldr	r3, [pc, #8]	; (1244 <hif_chip_sleep+0x34>)
    123a:	4798      	blx	r3
    123c:	e7fb      	b.n	1236 <hif_chip_sleep+0x26>
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	20000300 	.word	0x20000300
    1244:	000021fd 	.word	0x000021fd

00001248 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    1248:	b5f0      	push	{r4, r5, r6, r7, lr}
    124a:	46de      	mov	lr, fp
    124c:	4657      	mov	r7, sl
    124e:	b580      	push	{r7, lr}
    1250:	b089      	sub	sp, #36	; 0x24
    1252:	4683      	mov	fp, r0
    1254:	468a      	mov	sl, r1
    1256:	9201      	str	r2, [sp, #4]
    1258:	9300      	str	r3, [sp, #0]
    125a:	ab10      	add	r3, sp, #64	; 0x40
    125c:	cb80      	ldmia	r3!, {r7}
    125e:	881e      	ldrh	r6, [r3, #0]
    1260:	ab12      	add	r3, sp, #72	; 0x48
    1262:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    1264:	227f      	movs	r2, #127	; 0x7f
    1266:	400a      	ands	r2, r1
    1268:	ab07      	add	r3, sp, #28
    126a:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    126c:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    126e:	2208      	movs	r2, #8
    1270:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    1272:	2f00      	cmp	r7, #0
    1274:	d03d      	beq.n	12f2 <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    1276:	885a      	ldrh	r2, [r3, #2]
    1278:	1992      	adds	r2, r2, r6
    127a:	18aa      	adds	r2, r5, r2
    127c:	b292      	uxth	r2, r2
    127e:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    1280:	4b69      	ldr	r3, [pc, #420]	; (1428 <hif_send+0x1e0>)
    1282:	4798      	blx	r3
    1284:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    1286:	d000      	beq.n	128a <hif_send+0x42>
    1288:	e0c1      	b.n	140e <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    128a:	2300      	movs	r3, #0
    128c:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    128e:	aa02      	add	r2, sp, #8
    1290:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    1292:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    1294:	9b04      	ldr	r3, [sp, #16]
    1296:	465a      	mov	r2, fp
    1298:	431a      	orrs	r2, r3
    129a:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    129c:	9a04      	ldr	r2, [sp, #16]
    129e:	4653      	mov	r3, sl
    12a0:	021b      	lsls	r3, r3, #8
    12a2:	4313      	orrs	r3, r2
    12a4:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    12a6:	ab07      	add	r3, sp, #28
    12a8:	885b      	ldrh	r3, [r3, #2]
    12aa:	9a04      	ldr	r2, [sp, #16]
    12ac:	041b      	lsls	r3, r3, #16
    12ae:	4313      	orrs	r3, r2
    12b0:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    12b2:	9904      	ldr	r1, [sp, #16]
    12b4:	485d      	ldr	r0, [pc, #372]	; (142c <hif_send+0x1e4>)
    12b6:	4b5e      	ldr	r3, [pc, #376]	; (1430 <hif_send+0x1e8>)
    12b8:	4798      	blx	r3
    12ba:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    12bc:	d157      	bne.n	136e <hif_send+0x126>

		reg = 0UL;
    12be:	2300      	movs	r3, #0
    12c0:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    12c2:	9b04      	ldr	r3, [sp, #16]
    12c4:	2202      	movs	r2, #2
    12c6:	4313      	orrs	r3, r2
    12c8:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    12ca:	9904      	ldr	r1, [sp, #16]
    12cc:	4859      	ldr	r0, [pc, #356]	; (1434 <hif_send+0x1ec>)
    12ce:	4b58      	ldr	r3, [pc, #352]	; (1430 <hif_send+0x1e8>)
    12d0:	4798      	blx	r3
    12d2:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    12d4:	d14b      	bne.n	136e <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    12d6:	2200      	movs	r2, #0
    12d8:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    12da:	ab02      	add	r3, sp, #8
    12dc:	80da      	strh	r2, [r3, #6]
    12de:	3306      	adds	r3, #6
    12e0:	881b      	ldrh	r3, [r3, #0]
    12e2:	b29b      	uxth	r3, r3
    12e4:	4a54      	ldr	r2, [pc, #336]	; (1438 <hif_send+0x1f0>)
    12e6:	4293      	cmp	r3, r2
    12e8:	d849      	bhi.n	137e <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    12ea:	4c54      	ldr	r4, [pc, #336]	; (143c <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    12ec:	4b54      	ldr	r3, [pc, #336]	; (1440 <hif_send+0x1f8>)
    12ee:	469a      	mov	sl, r3
    12f0:	e017      	b.n	1322 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    12f2:	ab07      	add	r3, sp, #28
    12f4:	885a      	ldrh	r2, [r3, #2]
    12f6:	9900      	ldr	r1, [sp, #0]
    12f8:	468c      	mov	ip, r1
    12fa:	4462      	add	r2, ip
    12fc:	b292      	uxth	r2, r2
    12fe:	805a      	strh	r2, [r3, #2]
    1300:	e7be      	b.n	1280 <hif_send+0x38>
				nm_bsp_sleep(1);
    1302:	2001      	movs	r0, #1
    1304:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    1306:	9b04      	ldr	r3, [sp, #16]
    1308:	079b      	lsls	r3, r3, #30
    130a:	d528      	bpl.n	135e <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    130c:	ab02      	add	r3, sp, #8
    130e:	88da      	ldrh	r2, [r3, #6]
    1310:	3201      	adds	r2, #1
    1312:	b292      	uxth	r2, r2
    1314:	80da      	strh	r2, [r3, #6]
    1316:	3306      	adds	r3, #6
    1318:	881b      	ldrh	r3, [r3, #0]
    131a:	b29b      	uxth	r3, r3
    131c:	4a46      	ldr	r2, [pc, #280]	; (1438 <hif_send+0x1f0>)
    131e:	4293      	cmp	r3, r2
    1320:	d82d      	bhi.n	137e <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    1322:	a904      	add	r1, sp, #16
    1324:	4843      	ldr	r0, [pc, #268]	; (1434 <hif_send+0x1ec>)
    1326:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    1328:	2800      	cmp	r0, #0
    132a:	d128      	bne.n	137e <hif_send+0x136>
			if(cnt >= 500) {
    132c:	ab02      	add	r3, sp, #8
    132e:	3306      	adds	r3, #6
    1330:	881b      	ldrh	r3, [r3, #0]
    1332:	b29b      	uxth	r3, r3
    1334:	22f4      	movs	r2, #244	; 0xf4
    1336:	32ff      	adds	r2, #255	; 0xff
    1338:	4293      	cmp	r3, r2
    133a:	d9e4      	bls.n	1306 <hif_send+0xbe>
				if(cnt < 501) {
    133c:	ab02      	add	r3, sp, #8
    133e:	3306      	adds	r3, #6
    1340:	881b      	ldrh	r3, [r3, #0]
    1342:	b29b      	uxth	r3, r3
    1344:	3201      	adds	r2, #1
    1346:	4293      	cmp	r3, r2
    1348:	d8db      	bhi.n	1302 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    134a:	483e      	ldr	r0, [pc, #248]	; (1444 <hif_send+0x1fc>)
    134c:	4b3e      	ldr	r3, [pc, #248]	; (1448 <hif_send+0x200>)
    134e:	4798      	blx	r3
    1350:	483e      	ldr	r0, [pc, #248]	; (144c <hif_send+0x204>)
    1352:	4b3f      	ldr	r3, [pc, #252]	; (1450 <hif_send+0x208>)
    1354:	4798      	blx	r3
    1356:	200d      	movs	r0, #13
    1358:	4b3e      	ldr	r3, [pc, #248]	; (1454 <hif_send+0x20c>)
    135a:	4798      	blx	r3
    135c:	e7d1      	b.n	1302 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    135e:	a905      	add	r1, sp, #20
    1360:	483d      	ldr	r0, [pc, #244]	; (1458 <hif_send+0x210>)
    1362:	4b36      	ldr	r3, [pc, #216]	; (143c <hif_send+0x1f4>)
    1364:	4798      	blx	r3
    1366:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    1368:	d009      	beq.n	137e <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    136a:	2300      	movs	r3, #0
    136c:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    136e:	4b3b      	ldr	r3, [pc, #236]	; (145c <hif_send+0x214>)
    1370:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    1372:	0020      	movs	r0, r4
    1374:	b009      	add	sp, #36	; 0x24
    1376:	bc0c      	pop	{r2, r3}
    1378:	4692      	mov	sl, r2
    137a:	469b      	mov	fp, r3
    137c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    137e:	9b05      	ldr	r3, [sp, #20]
    1380:	2b00      	cmp	r3, #0
    1382:	d03f      	beq.n	1404 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    1384:	9b05      	ldr	r3, [sp, #20]
    1386:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    1388:	a907      	add	r1, sp, #28
    138a:	884b      	ldrh	r3, [r1, #2]
    138c:	b29b      	uxth	r3, r3
    138e:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    1390:	9806      	ldr	r0, [sp, #24]
    1392:	2208      	movs	r2, #8
    1394:	4b32      	ldr	r3, [pc, #200]	; (1460 <hif_send+0x218>)
    1396:	4798      	blx	r3
    1398:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    139a:	d1e8      	bne.n	136e <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    139c:	9b06      	ldr	r3, [sp, #24]
    139e:	3308      	adds	r3, #8
    13a0:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    13a2:	9b01      	ldr	r3, [sp, #4]
    13a4:	2b00      	cmp	r3, #0
    13a6:	d00b      	beq.n	13c0 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    13a8:	9806      	ldr	r0, [sp, #24]
    13aa:	9a00      	ldr	r2, [sp, #0]
    13ac:	0019      	movs	r1, r3
    13ae:	4b2c      	ldr	r3, [pc, #176]	; (1460 <hif_send+0x218>)
    13b0:	4798      	blx	r3
    13b2:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    13b4:	d1db      	bne.n	136e <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    13b6:	9b06      	ldr	r3, [sp, #24]
    13b8:	9a00      	ldr	r2, [sp, #0]
    13ba:	4694      	mov	ip, r2
    13bc:	4463      	add	r3, ip
    13be:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    13c0:	2f00      	cmp	r7, #0
    13c2:	d00e      	beq.n	13e2 <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    13c4:	9b06      	ldr	r3, [sp, #24]
    13c6:	9a00      	ldr	r2, [sp, #0]
    13c8:	1aad      	subs	r5, r5, r2
    13ca:	18ed      	adds	r5, r5, r3
    13cc:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    13ce:	9806      	ldr	r0, [sp, #24]
    13d0:	0032      	movs	r2, r6
    13d2:	0039      	movs	r1, r7
    13d4:	4b22      	ldr	r3, [pc, #136]	; (1460 <hif_send+0x218>)
    13d6:	4798      	blx	r3
    13d8:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    13da:	d1c8      	bne.n	136e <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    13dc:	9b06      	ldr	r3, [sp, #24]
    13de:	18f3      	adds	r3, r6, r3
    13e0:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    13e2:	9b05      	ldr	r3, [sp, #20]
    13e4:	009b      	lsls	r3, r3, #2
    13e6:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    13e8:	9b04      	ldr	r3, [sp, #16]
    13ea:	2202      	movs	r2, #2
    13ec:	4313      	orrs	r3, r2
    13ee:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    13f0:	9904      	ldr	r1, [sp, #16]
    13f2:	481c      	ldr	r0, [pc, #112]	; (1464 <hif_send+0x21c>)
    13f4:	4b0e      	ldr	r3, [pc, #56]	; (1430 <hif_send+0x1e8>)
    13f6:	4798      	blx	r3
    13f8:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    13fa:	d1b8      	bne.n	136e <hif_send+0x126>
 	ret = hif_chip_sleep();
    13fc:	4b1a      	ldr	r3, [pc, #104]	; (1468 <hif_send+0x220>)
    13fe:	4798      	blx	r3
    1400:	0004      	movs	r4, r0
	return ret;
    1402:	e7b6      	b.n	1372 <hif_send+0x12a>
			ret = hif_chip_sleep();
    1404:	4b18      	ldr	r3, [pc, #96]	; (1468 <hif_send+0x220>)
    1406:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    1408:	2403      	movs	r4, #3
    140a:	4264      	negs	r4, r4
			goto ERR2;
    140c:	e7b1      	b.n	1372 <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    140e:	22cb      	movs	r2, #203	; 0xcb
    1410:	0052      	lsls	r2, r2, #1
    1412:	4916      	ldr	r1, [pc, #88]	; (146c <hif_send+0x224>)
    1414:	4816      	ldr	r0, [pc, #88]	; (1470 <hif_send+0x228>)
    1416:	4b0c      	ldr	r3, [pc, #48]	; (1448 <hif_send+0x200>)
    1418:	4798      	blx	r3
    141a:	4816      	ldr	r0, [pc, #88]	; (1474 <hif_send+0x22c>)
    141c:	4b0c      	ldr	r3, [pc, #48]	; (1450 <hif_send+0x208>)
    141e:	4798      	blx	r3
    1420:	200d      	movs	r0, #13
    1422:	4b0c      	ldr	r3, [pc, #48]	; (1454 <hif_send+0x20c>)
    1424:	4798      	blx	r3
		goto ERR2;
    1426:	e7a4      	b.n	1372 <hif_send+0x12a>
    1428:	000011b9 	.word	0x000011b9
    142c:	0000108c 	.word	0x0000108c
    1430:	00002589 	.word	0x00002589
    1434:	00001078 	.word	0x00001078
    1438:	000003e7 	.word	0x000003e7
    143c:	0000257d 	.word	0x0000257d
    1440:	00000d29 	.word	0x00000d29
    1444:	00009874 	.word	0x00009874
    1448:	00007eed 	.word	0x00007eed
    144c:	00009880 	.word	0x00009880
    1450:	00008009 	.word	0x00008009
    1454:	00007f21 	.word	0x00007f21
    1458:	00150400 	.word	0x00150400
    145c:	000011f5 	.word	0x000011f5
    1460:	000025fd 	.word	0x000025fd
    1464:	0000106c 	.word	0x0000106c
    1468:	00001211 	.word	0x00001211
    146c:	0000958c 	.word	0x0000958c
    1470:	00009544 	.word	0x00009544
    1474:	00009890 	.word	0x00009890

00001478 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    1478:	b5f0      	push	{r4, r5, r6, r7, lr}
    147a:	46ce      	mov	lr, r9
    147c:	4647      	mov	r7, r8
    147e:	b580      	push	{r7, lr}
    1480:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    1482:	4bcf      	ldr	r3, [pc, #828]	; (17c0 <hif_handle_isr+0x348>)
    1484:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    1486:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    1488:	e080      	b.n	158c <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    148a:	4bcd      	ldr	r3, [pc, #820]	; (17c0 <hif_handle_isr+0x348>)
    148c:	9a05      	ldr	r2, [sp, #20]
    148e:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    1490:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    1492:	af04      	add	r7, sp, #16
    1494:	2204      	movs	r2, #4
    1496:	0039      	movs	r1, r7
    1498:	9805      	ldr	r0, [sp, #20]
    149a:	4bca      	ldr	r3, [pc, #808]	; (17c4 <hif_handle_isr+0x34c>)
    149c:	4798      	blx	r3
    149e:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    14a0:	887b      	ldrh	r3, [r7, #2]
    14a2:	b29b      	uxth	r3, r3
    14a4:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    14a6:	2800      	cmp	r0, #0
    14a8:	d133      	bne.n	1512 <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    14aa:	ab04      	add	r3, sp, #16
    14ac:	885b      	ldrh	r3, [r3, #2]
    14ae:	b29b      	uxth	r3, r3
    14b0:	429d      	cmp	r5, r3
    14b2:	d004      	beq.n	14be <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    14b4:	ab04      	add	r3, sp, #16
    14b6:	885b      	ldrh	r3, [r3, #2]
    14b8:	1aeb      	subs	r3, r5, r3
    14ba:	2b04      	cmp	r3, #4
    14bc:	dc39      	bgt.n	1532 <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    14be:	ab04      	add	r3, sp, #16
    14c0:	781b      	ldrb	r3, [r3, #0]
    14c2:	2b01      	cmp	r3, #1
    14c4:	d04e      	beq.n	1564 <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    14c6:	ab04      	add	r3, sp, #16
    14c8:	781b      	ldrb	r3, [r3, #0]
    14ca:	2b02      	cmp	r3, #2
    14cc:	d078      	beq.n	15c0 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    14ce:	ab04      	add	r3, sp, #16
    14d0:	781b      	ldrb	r3, [r3, #0]
    14d2:	2b04      	cmp	r3, #4
    14d4:	d100      	bne.n	14d8 <hif_handle_isr+0x60>
    14d6:	e090      	b.n	15fa <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    14d8:	ab04      	add	r3, sp, #16
    14da:	781b      	ldrb	r3, [r3, #0]
    14dc:	2b06      	cmp	r3, #6
    14de:	d100      	bne.n	14e2 <hif_handle_isr+0x6a>
    14e0:	e0a8      	b.n	1634 <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    14e2:	ab04      	add	r3, sp, #16
    14e4:	781b      	ldrb	r3, [r3, #0]
    14e6:	2b07      	cmp	r3, #7
    14e8:	d100      	bne.n	14ec <hif_handle_isr+0x74>
    14ea:	e0bf      	b.n	166c <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    14ec:	ab04      	add	r3, sp, #16
    14ee:	781b      	ldrb	r3, [r3, #0]
    14f0:	2b05      	cmp	r3, #5
    14f2:	d100      	bne.n	14f6 <hif_handle_isr+0x7e>
    14f4:	e0d6      	b.n	16a4 <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    14f6:	4ab4      	ldr	r2, [pc, #720]	; (17c8 <hif_handle_isr+0x350>)
    14f8:	49b4      	ldr	r1, [pc, #720]	; (17cc <hif_handle_isr+0x354>)
    14fa:	48b5      	ldr	r0, [pc, #724]	; (17d0 <hif_handle_isr+0x358>)
    14fc:	4bb5      	ldr	r3, [pc, #724]	; (17d4 <hif_handle_isr+0x35c>)
    14fe:	4798      	blx	r3
    1500:	48b5      	ldr	r0, [pc, #724]	; (17d8 <hif_handle_isr+0x360>)
    1502:	4bb6      	ldr	r3, [pc, #728]	; (17dc <hif_handle_isr+0x364>)
    1504:	4798      	blx	r3
    1506:	200d      	movs	r0, #13
    1508:	4bb5      	ldr	r3, [pc, #724]	; (17e0 <hif_handle_isr+0x368>)
    150a:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    150c:	2406      	movs	r4, #6
    150e:	4264      	negs	r4, r4
    1510:	e116      	b.n	1740 <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    1512:	22d2      	movs	r2, #210	; 0xd2
    1514:	32ff      	adds	r2, #255	; 0xff
    1516:	49ad      	ldr	r1, [pc, #692]	; (17cc <hif_handle_isr+0x354>)
    1518:	48ad      	ldr	r0, [pc, #692]	; (17d0 <hif_handle_isr+0x358>)
    151a:	4bae      	ldr	r3, [pc, #696]	; (17d4 <hif_handle_isr+0x35c>)
    151c:	4798      	blx	r3
    151e:	48b1      	ldr	r0, [pc, #708]	; (17e4 <hif_handle_isr+0x36c>)
    1520:	4bae      	ldr	r3, [pc, #696]	; (17dc <hif_handle_isr+0x364>)
    1522:	4798      	blx	r3
    1524:	200d      	movs	r0, #13
    1526:	4bae      	ldr	r3, [pc, #696]	; (17e0 <hif_handle_isr+0x368>)
    1528:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    152a:	2001      	movs	r0, #1
    152c:	4bae      	ldr	r3, [pc, #696]	; (17e8 <hif_handle_isr+0x370>)
    152e:	4798      	blx	r3
    1530:	e106      	b.n	1740 <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    1532:	22ed      	movs	r2, #237	; 0xed
    1534:	0052      	lsls	r2, r2, #1
    1536:	49a5      	ldr	r1, [pc, #660]	; (17cc <hif_handle_isr+0x354>)
    1538:	48a5      	ldr	r0, [pc, #660]	; (17d0 <hif_handle_isr+0x358>)
    153a:	4ca6      	ldr	r4, [pc, #664]	; (17d4 <hif_handle_isr+0x35c>)
    153c:	47a0      	blx	r4
    153e:	a904      	add	r1, sp, #16
    1540:	884a      	ldrh	r2, [r1, #2]
    1542:	b292      	uxth	r2, r2
    1544:	780b      	ldrb	r3, [r1, #0]
    1546:	b2db      	uxtb	r3, r3
    1548:	7849      	ldrb	r1, [r1, #1]
    154a:	9100      	str	r1, [sp, #0]
    154c:	0029      	movs	r1, r5
    154e:	48a7      	ldr	r0, [pc, #668]	; (17ec <hif_handle_isr+0x374>)
    1550:	47a0      	blx	r4
    1552:	200d      	movs	r0, #13
    1554:	4ba2      	ldr	r3, [pc, #648]	; (17e0 <hif_handle_isr+0x368>)
    1556:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1558:	2001      	movs	r0, #1
    155a:	4ba3      	ldr	r3, [pc, #652]	; (17e8 <hif_handle_isr+0x370>)
    155c:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    155e:	2406      	movs	r4, #6
    1560:	4264      	negs	r4, r4
    1562:	e0ed      	b.n	1740 <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    1564:	4b96      	ldr	r3, [pc, #600]	; (17c0 <hif_handle_isr+0x348>)
    1566:	68db      	ldr	r3, [r3, #12]
    1568:	2b00      	cmp	r3, #0
    156a:	d01c      	beq.n	15a6 <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    156c:	4b94      	ldr	r3, [pc, #592]	; (17c0 <hif_handle_isr+0x348>)
    156e:	68db      	ldr	r3, [r3, #12]
    1570:	aa04      	add	r2, sp, #16
    1572:	7850      	ldrb	r0, [r2, #1]
    1574:	b2c0      	uxtb	r0, r0
    1576:	8851      	ldrh	r1, [r2, #2]
    1578:	9a05      	ldr	r2, [sp, #20]
    157a:	3208      	adds	r2, #8
    157c:	3908      	subs	r1, #8
    157e:	b289      	uxth	r1, r1
    1580:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    1582:	4b8f      	ldr	r3, [pc, #572]	; (17c0 <hif_handle_isr+0x348>)
    1584:	789b      	ldrb	r3, [r3, #2]
    1586:	2b00      	cmp	r3, #0
    1588:	d000      	beq.n	158c <hif_handle_isr+0x114>
    158a:	e09c      	b.n	16c6 <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    158c:	4643      	mov	r3, r8
    158e:	78db      	ldrb	r3, [r3, #3]
    1590:	2b00      	cmp	r3, #0
    1592:	d100      	bne.n	1596 <hif_handle_isr+0x11e>
    1594:	e158      	b.n	1848 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    1596:	464b      	mov	r3, r9
    1598:	78db      	ldrb	r3, [r3, #3]
    159a:	3b01      	subs	r3, #1
    159c:	b2db      	uxtb	r3, r3
    159e:	464a      	mov	r2, r9
    15a0:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    15a2:	4e93      	ldr	r6, [pc, #588]	; (17f0 <hif_handle_isr+0x378>)
    15a4:	e0d7      	b.n	1756 <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    15a6:	22f3      	movs	r2, #243	; 0xf3
    15a8:	0052      	lsls	r2, r2, #1
    15aa:	4988      	ldr	r1, [pc, #544]	; (17cc <hif_handle_isr+0x354>)
    15ac:	4888      	ldr	r0, [pc, #544]	; (17d0 <hif_handle_isr+0x358>)
    15ae:	4b89      	ldr	r3, [pc, #548]	; (17d4 <hif_handle_isr+0x35c>)
    15b0:	4798      	blx	r3
    15b2:	4890      	ldr	r0, [pc, #576]	; (17f4 <hif_handle_isr+0x37c>)
    15b4:	4b89      	ldr	r3, [pc, #548]	; (17dc <hif_handle_isr+0x364>)
    15b6:	4798      	blx	r3
    15b8:	200d      	movs	r0, #13
    15ba:	4b89      	ldr	r3, [pc, #548]	; (17e0 <hif_handle_isr+0x368>)
    15bc:	4798      	blx	r3
    15be:	e7e0      	b.n	1582 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    15c0:	4b7f      	ldr	r3, [pc, #508]	; (17c0 <hif_handle_isr+0x348>)
    15c2:	691b      	ldr	r3, [r3, #16]
    15c4:	2b00      	cmp	r3, #0
    15c6:	d00b      	beq.n	15e0 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    15c8:	4b7d      	ldr	r3, [pc, #500]	; (17c0 <hif_handle_isr+0x348>)
    15ca:	691b      	ldr	r3, [r3, #16]
    15cc:	aa04      	add	r2, sp, #16
    15ce:	7850      	ldrb	r0, [r2, #1]
    15d0:	b2c0      	uxtb	r0, r0
    15d2:	8851      	ldrh	r1, [r2, #2]
    15d4:	9a05      	ldr	r2, [sp, #20]
    15d6:	3208      	adds	r2, #8
    15d8:	3908      	subs	r1, #8
    15da:	b289      	uxth	r1, r1
    15dc:	4798      	blx	r3
    15de:	e7d0      	b.n	1582 <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    15e0:	22f7      	movs	r2, #247	; 0xf7
    15e2:	0052      	lsls	r2, r2, #1
    15e4:	4979      	ldr	r1, [pc, #484]	; (17cc <hif_handle_isr+0x354>)
    15e6:	487a      	ldr	r0, [pc, #488]	; (17d0 <hif_handle_isr+0x358>)
    15e8:	4b7a      	ldr	r3, [pc, #488]	; (17d4 <hif_handle_isr+0x35c>)
    15ea:	4798      	blx	r3
    15ec:	4882      	ldr	r0, [pc, #520]	; (17f8 <hif_handle_isr+0x380>)
    15ee:	4b7b      	ldr	r3, [pc, #492]	; (17dc <hif_handle_isr+0x364>)
    15f0:	4798      	blx	r3
    15f2:	200d      	movs	r0, #13
    15f4:	4b7a      	ldr	r3, [pc, #488]	; (17e0 <hif_handle_isr+0x368>)
    15f6:	4798      	blx	r3
    15f8:	e7c3      	b.n	1582 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    15fa:	4b71      	ldr	r3, [pc, #452]	; (17c0 <hif_handle_isr+0x348>)
    15fc:	695b      	ldr	r3, [r3, #20]
    15fe:	2b00      	cmp	r3, #0
    1600:	d00b      	beq.n	161a <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1602:	4b6f      	ldr	r3, [pc, #444]	; (17c0 <hif_handle_isr+0x348>)
    1604:	695b      	ldr	r3, [r3, #20]
    1606:	aa04      	add	r2, sp, #16
    1608:	7850      	ldrb	r0, [r2, #1]
    160a:	b2c0      	uxtb	r0, r0
    160c:	8851      	ldrh	r1, [r2, #2]
    160e:	9a05      	ldr	r2, [sp, #20]
    1610:	3208      	adds	r2, #8
    1612:	3908      	subs	r1, #8
    1614:	b289      	uxth	r1, r1
    1616:	4798      	blx	r3
    1618:	e7b3      	b.n	1582 <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    161a:	22fb      	movs	r2, #251	; 0xfb
    161c:	0052      	lsls	r2, r2, #1
    161e:	496b      	ldr	r1, [pc, #428]	; (17cc <hif_handle_isr+0x354>)
    1620:	486b      	ldr	r0, [pc, #428]	; (17d0 <hif_handle_isr+0x358>)
    1622:	4b6c      	ldr	r3, [pc, #432]	; (17d4 <hif_handle_isr+0x35c>)
    1624:	4798      	blx	r3
    1626:	4875      	ldr	r0, [pc, #468]	; (17fc <hif_handle_isr+0x384>)
    1628:	4b6c      	ldr	r3, [pc, #432]	; (17dc <hif_handle_isr+0x364>)
    162a:	4798      	blx	r3
    162c:	200d      	movs	r0, #13
    162e:	4b6c      	ldr	r3, [pc, #432]	; (17e0 <hif_handle_isr+0x368>)
    1630:	4798      	blx	r3
    1632:	e7a6      	b.n	1582 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    1634:	4b62      	ldr	r3, [pc, #392]	; (17c0 <hif_handle_isr+0x348>)
    1636:	6a1b      	ldr	r3, [r3, #32]
    1638:	2b00      	cmp	r3, #0
    163a:	d00b      	beq.n	1654 <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    163c:	4b60      	ldr	r3, [pc, #384]	; (17c0 <hif_handle_isr+0x348>)
    163e:	6a1b      	ldr	r3, [r3, #32]
    1640:	aa04      	add	r2, sp, #16
    1642:	7850      	ldrb	r0, [r2, #1]
    1644:	b2c0      	uxtb	r0, r0
    1646:	8851      	ldrh	r1, [r2, #2]
    1648:	9a05      	ldr	r2, [sp, #20]
    164a:	3208      	adds	r2, #8
    164c:	3908      	subs	r1, #8
    164e:	b289      	uxth	r1, r1
    1650:	4798      	blx	r3
    1652:	e796      	b.n	1582 <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    1654:	4a6a      	ldr	r2, [pc, #424]	; (1800 <hif_handle_isr+0x388>)
    1656:	495d      	ldr	r1, [pc, #372]	; (17cc <hif_handle_isr+0x354>)
    1658:	485d      	ldr	r0, [pc, #372]	; (17d0 <hif_handle_isr+0x358>)
    165a:	4b5e      	ldr	r3, [pc, #376]	; (17d4 <hif_handle_isr+0x35c>)
    165c:	4798      	blx	r3
    165e:	4869      	ldr	r0, [pc, #420]	; (1804 <hif_handle_isr+0x38c>)
    1660:	4b5e      	ldr	r3, [pc, #376]	; (17dc <hif_handle_isr+0x364>)
    1662:	4798      	blx	r3
    1664:	200d      	movs	r0, #13
    1666:	4b5e      	ldr	r3, [pc, #376]	; (17e0 <hif_handle_isr+0x368>)
    1668:	4798      	blx	r3
    166a:	e78a      	b.n	1582 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    166c:	4b54      	ldr	r3, [pc, #336]	; (17c0 <hif_handle_isr+0x348>)
    166e:	699b      	ldr	r3, [r3, #24]
    1670:	2b00      	cmp	r3, #0
    1672:	d00b      	beq.n	168c <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1674:	4b52      	ldr	r3, [pc, #328]	; (17c0 <hif_handle_isr+0x348>)
    1676:	699b      	ldr	r3, [r3, #24]
    1678:	aa04      	add	r2, sp, #16
    167a:	7850      	ldrb	r0, [r2, #1]
    167c:	b2c0      	uxtb	r0, r0
    167e:	8851      	ldrh	r1, [r2, #2]
    1680:	9a05      	ldr	r2, [sp, #20]
    1682:	3208      	adds	r2, #8
    1684:	3908      	subs	r1, #8
    1686:	b289      	uxth	r1, r1
    1688:	4798      	blx	r3
    168a:	e77a      	b.n	1582 <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    168c:	4a5e      	ldr	r2, [pc, #376]	; (1808 <hif_handle_isr+0x390>)
    168e:	494f      	ldr	r1, [pc, #316]	; (17cc <hif_handle_isr+0x354>)
    1690:	484f      	ldr	r0, [pc, #316]	; (17d0 <hif_handle_isr+0x358>)
    1692:	4b50      	ldr	r3, [pc, #320]	; (17d4 <hif_handle_isr+0x35c>)
    1694:	4798      	blx	r3
    1696:	485d      	ldr	r0, [pc, #372]	; (180c <hif_handle_isr+0x394>)
    1698:	4b50      	ldr	r3, [pc, #320]	; (17dc <hif_handle_isr+0x364>)
    169a:	4798      	blx	r3
    169c:	200d      	movs	r0, #13
    169e:	4b50      	ldr	r3, [pc, #320]	; (17e0 <hif_handle_isr+0x368>)
    16a0:	4798      	blx	r3
    16a2:	e76e      	b.n	1582 <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    16a4:	4b46      	ldr	r3, [pc, #280]	; (17c0 <hif_handle_isr+0x348>)
    16a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    16a8:	2b00      	cmp	r3, #0
    16aa:	d100      	bne.n	16ae <hif_handle_isr+0x236>
    16ac:	e769      	b.n	1582 <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    16ae:	4b44      	ldr	r3, [pc, #272]	; (17c0 <hif_handle_isr+0x348>)
    16b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    16b2:	aa04      	add	r2, sp, #16
    16b4:	7850      	ldrb	r0, [r2, #1]
    16b6:	b2c0      	uxtb	r0, r0
    16b8:	8851      	ldrh	r1, [r2, #2]
    16ba:	9a05      	ldr	r2, [sp, #20]
    16bc:	3208      	adds	r2, #8
    16be:	3908      	subs	r1, #8
    16c0:	b289      	uxth	r1, r1
    16c2:	4798      	blx	r3
    16c4:	e75d      	b.n	1582 <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    16c6:	4a52      	ldr	r2, [pc, #328]	; (1810 <hif_handle_isr+0x398>)
    16c8:	4940      	ldr	r1, [pc, #256]	; (17cc <hif_handle_isr+0x354>)
    16ca:	4841      	ldr	r0, [pc, #260]	; (17d0 <hif_handle_isr+0x358>)
    16cc:	4c41      	ldr	r4, [pc, #260]	; (17d4 <hif_handle_isr+0x35c>)
    16ce:	47a0      	blx	r4
    16d0:	ab04      	add	r3, sp, #16
    16d2:	7819      	ldrb	r1, [r3, #0]
    16d4:	b2c9      	uxtb	r1, r1
    16d6:	785a      	ldrb	r2, [r3, #1]
    16d8:	b2d2      	uxtb	r2, r2
    16da:	484e      	ldr	r0, [pc, #312]	; (1814 <hif_handle_isr+0x39c>)
    16dc:	47a0      	blx	r4
    16de:	200d      	movs	r0, #13
    16e0:	4b3f      	ldr	r3, [pc, #252]	; (17e0 <hif_handle_isr+0x368>)
    16e2:	4798      	blx	r3
					ret = hif_set_rx_done();
    16e4:	4b4c      	ldr	r3, [pc, #304]	; (1818 <hif_handle_isr+0x3a0>)
    16e6:	4798      	blx	r3
    16e8:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    16ea:	d129      	bne.n	1740 <hif_handle_isr+0x2c8>
    16ec:	e74e      	b.n	158c <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    16ee:	2287      	movs	r2, #135	; 0x87
    16f0:	0092      	lsls	r2, r2, #2
    16f2:	4936      	ldr	r1, [pc, #216]	; (17cc <hif_handle_isr+0x354>)
    16f4:	4836      	ldr	r0, [pc, #216]	; (17d0 <hif_handle_isr+0x358>)
    16f6:	4b37      	ldr	r3, [pc, #220]	; (17d4 <hif_handle_isr+0x35c>)
    16f8:	4798      	blx	r3
    16fa:	4848      	ldr	r0, [pc, #288]	; (181c <hif_handle_isr+0x3a4>)
    16fc:	4b37      	ldr	r3, [pc, #220]	; (17dc <hif_handle_isr+0x364>)
    16fe:	4798      	blx	r3
    1700:	200d      	movs	r0, #13
    1702:	4b37      	ldr	r3, [pc, #220]	; (17e0 <hif_handle_isr+0x368>)
    1704:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    1706:	2402      	movs	r4, #2
    1708:	4264      	negs	r4, r4
    170a:	e019      	b.n	1740 <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    170c:	2289      	movs	r2, #137	; 0x89
    170e:	0092      	lsls	r2, r2, #2
    1710:	492e      	ldr	r1, [pc, #184]	; (17cc <hif_handle_isr+0x354>)
    1712:	482f      	ldr	r0, [pc, #188]	; (17d0 <hif_handle_isr+0x358>)
    1714:	4c2f      	ldr	r4, [pc, #188]	; (17d4 <hif_handle_isr+0x35c>)
    1716:	47a0      	blx	r4
    1718:	9903      	ldr	r1, [sp, #12]
    171a:	4841      	ldr	r0, [pc, #260]	; (1820 <hif_handle_isr+0x3a8>)
    171c:	47a0      	blx	r4
    171e:	200d      	movs	r0, #13
    1720:	4b2f      	ldr	r3, [pc, #188]	; (17e0 <hif_handle_isr+0x368>)
    1722:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1724:	240c      	movs	r4, #12
    1726:	4264      	negs	r4, r4
    1728:	e00a      	b.n	1740 <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    172a:	4a3e      	ldr	r2, [pc, #248]	; (1824 <hif_handle_isr+0x3ac>)
    172c:	4927      	ldr	r1, [pc, #156]	; (17cc <hif_handle_isr+0x354>)
    172e:	4828      	ldr	r0, [pc, #160]	; (17d0 <hif_handle_isr+0x358>)
    1730:	4b28      	ldr	r3, [pc, #160]	; (17d4 <hif_handle_isr+0x35c>)
    1732:	4798      	blx	r3
    1734:	483c      	ldr	r0, [pc, #240]	; (1828 <hif_handle_isr+0x3b0>)
    1736:	4b29      	ldr	r3, [pc, #164]	; (17dc <hif_handle_isr+0x364>)
    1738:	4798      	blx	r3
    173a:	200d      	movs	r0, #13
    173c:	4b28      	ldr	r3, [pc, #160]	; (17e0 <hif_handle_isr+0x368>)
    173e:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1740:	4a3a      	ldr	r2, [pc, #232]	; (182c <hif_handle_isr+0x3b4>)
    1742:	493b      	ldr	r1, [pc, #236]	; (1830 <hif_handle_isr+0x3b8>)
    1744:	4822      	ldr	r0, [pc, #136]	; (17d0 <hif_handle_isr+0x358>)
    1746:	4f23      	ldr	r7, [pc, #140]	; (17d4 <hif_handle_isr+0x35c>)
    1748:	47b8      	blx	r7
    174a:	0021      	movs	r1, r4
    174c:	4839      	ldr	r0, [pc, #228]	; (1834 <hif_handle_isr+0x3bc>)
    174e:	47b8      	blx	r7
    1750:	200d      	movs	r0, #13
    1752:	4b23      	ldr	r3, [pc, #140]	; (17e0 <hif_handle_isr+0x368>)
    1754:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1756:	a903      	add	r1, sp, #12
    1758:	4837      	ldr	r0, [pc, #220]	; (1838 <hif_handle_isr+0x3c0>)
    175a:	47b0      	blx	r6
    175c:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    175e:	d1e4      	bne.n	172a <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    1760:	9b03      	ldr	r3, [sp, #12]
    1762:	07db      	lsls	r3, r3, #31
    1764:	d5d2      	bpl.n	170c <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    1766:	2000      	movs	r0, #0
    1768:	4b1f      	ldr	r3, [pc, #124]	; (17e8 <hif_handle_isr+0x370>)
    176a:	4798      	blx	r3
			reg &= ~NBIT0;
    176c:	2301      	movs	r3, #1
    176e:	9903      	ldr	r1, [sp, #12]
    1770:	4399      	bics	r1, r3
    1772:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1774:	4830      	ldr	r0, [pc, #192]	; (1838 <hif_handle_isr+0x3c0>)
    1776:	4b31      	ldr	r3, [pc, #196]	; (183c <hif_handle_isr+0x3c4>)
    1778:	4798      	blx	r3
    177a:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    177c:	d1e0      	bne.n	1740 <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    177e:	2201      	movs	r2, #1
    1780:	4b0f      	ldr	r3, [pc, #60]	; (17c0 <hif_handle_isr+0x348>)
    1782:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1784:	9b03      	ldr	r3, [sp, #12]
    1786:	049d      	lsls	r5, r3, #18
    1788:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    178a:	d0b0      	beq.n	16ee <hif_handle_isr+0x276>
				uint32 address = 0;
    178c:	2300      	movs	r3, #0
    178e:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1790:	a905      	add	r1, sp, #20
    1792:	482b      	ldr	r0, [pc, #172]	; (1840 <hif_handle_isr+0x3c8>)
    1794:	4b16      	ldr	r3, [pc, #88]	; (17f0 <hif_handle_isr+0x378>)
    1796:	4798      	blx	r3
    1798:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    179a:	d100      	bne.n	179e <hif_handle_isr+0x326>
    179c:	e675      	b.n	148a <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    179e:	22c8      	movs	r2, #200	; 0xc8
    17a0:	32ff      	adds	r2, #255	; 0xff
    17a2:	490a      	ldr	r1, [pc, #40]	; (17cc <hif_handle_isr+0x354>)
    17a4:	480a      	ldr	r0, [pc, #40]	; (17d0 <hif_handle_isr+0x358>)
    17a6:	4b0b      	ldr	r3, [pc, #44]	; (17d4 <hif_handle_isr+0x35c>)
    17a8:	4798      	blx	r3
    17aa:	4826      	ldr	r0, [pc, #152]	; (1844 <hif_handle_isr+0x3cc>)
    17ac:	4b0b      	ldr	r3, [pc, #44]	; (17dc <hif_handle_isr+0x364>)
    17ae:	4798      	blx	r3
    17b0:	200d      	movs	r0, #13
    17b2:	4b0b      	ldr	r3, [pc, #44]	; (17e0 <hif_handle_isr+0x368>)
    17b4:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    17b6:	2001      	movs	r0, #1
    17b8:	4b0b      	ldr	r3, [pc, #44]	; (17e8 <hif_handle_isr+0x370>)
    17ba:	4798      	blx	r3
    17bc:	e7c0      	b.n	1740 <hif_handle_isr+0x2c8>
    17be:	46c0      	nop			; (mov r8, r8)
    17c0:	20000300 	.word	0x20000300
    17c4:	00002595 	.word	0x00002595
    17c8:	0000020f 	.word	0x0000020f
    17cc:	00009598 	.word	0x00009598
    17d0:	00009544 	.word	0x00009544
    17d4:	00007eed 	.word	0x00007eed
    17d8:	000096f4 	.word	0x000096f4
    17dc:	00008009 	.word	0x00008009
    17e0:	00007f21 	.word	0x00007f21
    17e4:	000095f0 	.word	0x000095f0
    17e8:	00000e41 	.word	0x00000e41
    17ec:	00009608 	.word	0x00009608
    17f0:	0000257d 	.word	0x0000257d
    17f4:	00009648 	.word	0x00009648
    17f8:	00009668 	.word	0x00009668
    17fc:	0000968c 	.word	0x0000968c
    1800:	000001ff 	.word	0x000001ff
    1804:	000096ac 	.word	0x000096ac
    1808:	00000206 	.word	0x00000206
    180c:	000096d0 	.word	0x000096d0
    1810:	00000215 	.word	0x00000215
    1814:	0000970c 	.word	0x0000970c
    1818:	00001175 	.word	0x00001175
    181c:	00009738 	.word	0x00009738
    1820:	0000974c 	.word	0x0000974c
    1824:	0000022d 	.word	0x0000022d
    1828:	00009768 	.word	0x00009768
    182c:	0000024a 	.word	0x0000024a
    1830:	000095a0 	.word	0x000095a0
    1834:	0000978c 	.word	0x0000978c
    1838:	00001070 	.word	0x00001070
    183c:	00002589 	.word	0x00002589
    1840:	00001084 	.word	0x00001084
    1844:	000095cc 	.word	0x000095cc
			}
		}
	}

	return ret;
}
    1848:	2000      	movs	r0, #0
    184a:	b007      	add	sp, #28
    184c:	bc0c      	pop	{r2, r3}
    184e:	4690      	mov	r8, r2
    1850:	4699      	mov	r9, r3
    1852:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001854 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1854:	b570      	push	{r4, r5, r6, lr}
    1856:	0014      	movs	r4, r2
    1858:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    185a:	2800      	cmp	r0, #0
    185c:	d003      	beq.n	1866 <hif_receive+0x12>
    185e:	2900      	cmp	r1, #0
    1860:	d001      	beq.n	1866 <hif_receive+0x12>
    1862:	2a00      	cmp	r2, #0
    1864:	d112      	bne.n	188c <hif_receive+0x38>
	{
		if(isDone)
    1866:	2d00      	cmp	r5, #0
    1868:	d002      	beq.n	1870 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    186a:	4b27      	ldr	r3, [pc, #156]	; (1908 <hif_receive+0xb4>)
    186c:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    186e:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    1870:	4a26      	ldr	r2, [pc, #152]	; (190c <hif_receive+0xb8>)
    1872:	4927      	ldr	r1, [pc, #156]	; (1910 <hif_receive+0xbc>)
    1874:	4827      	ldr	r0, [pc, #156]	; (1914 <hif_receive+0xc0>)
    1876:	4b28      	ldr	r3, [pc, #160]	; (1918 <hif_receive+0xc4>)
    1878:	4798      	blx	r3
    187a:	4828      	ldr	r0, [pc, #160]	; (191c <hif_receive+0xc8>)
    187c:	4b28      	ldr	r3, [pc, #160]	; (1920 <hif_receive+0xcc>)
    187e:	4798      	blx	r3
    1880:	200d      	movs	r0, #13
    1882:	4b28      	ldr	r3, [pc, #160]	; (1924 <hif_receive+0xd0>)
    1884:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1886:	200c      	movs	r0, #12
    1888:	4240      	negs	r0, r0
    188a:	e7f0      	b.n	186e <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    188c:	4b26      	ldr	r3, [pc, #152]	; (1928 <hif_receive+0xd4>)
    188e:	689b      	ldr	r3, [r3, #8]
    1890:	429a      	cmp	r2, r3
    1892:	d81a      	bhi.n	18ca <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    1894:	4b24      	ldr	r3, [pc, #144]	; (1928 <hif_receive+0xd4>)
    1896:	685b      	ldr	r3, [r3, #4]
    1898:	4298      	cmp	r0, r3
    189a:	d326      	bcc.n	18ea <hif_receive+0x96>
    189c:	1886      	adds	r6, r0, r2
    189e:	4a22      	ldr	r2, [pc, #136]	; (1928 <hif_receive+0xd4>)
    18a0:	6853      	ldr	r3, [r2, #4]
    18a2:	6892      	ldr	r2, [r2, #8]
    18a4:	189b      	adds	r3, r3, r2
    18a6:	429e      	cmp	r6, r3
    18a8:	d81f      	bhi.n	18ea <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    18aa:	0022      	movs	r2, r4
    18ac:	4b1f      	ldr	r3, [pc, #124]	; (192c <hif_receive+0xd8>)
    18ae:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    18b0:	2800      	cmp	r0, #0
    18b2:	d1dc      	bne.n	186e <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    18b4:	4a1c      	ldr	r2, [pc, #112]	; (1928 <hif_receive+0xd4>)
    18b6:	6853      	ldr	r3, [r2, #4]
    18b8:	6892      	ldr	r2, [r2, #8]
    18ba:	189b      	adds	r3, r3, r2
    18bc:	429e      	cmp	r6, r3
    18be:	d001      	beq.n	18c4 <hif_receive+0x70>
    18c0:	2d00      	cmp	r5, #0
    18c2:	d0d4      	beq.n	186e <hif_receive+0x1a>
		ret = hif_set_rx_done();
    18c4:	4b10      	ldr	r3, [pc, #64]	; (1908 <hif_receive+0xb4>)
    18c6:	4798      	blx	r3
    18c8:	e7d1      	b.n	186e <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    18ca:	4a19      	ldr	r2, [pc, #100]	; (1930 <hif_receive+0xdc>)
    18cc:	4910      	ldr	r1, [pc, #64]	; (1910 <hif_receive+0xbc>)
    18ce:	4811      	ldr	r0, [pc, #68]	; (1914 <hif_receive+0xc0>)
    18d0:	4d11      	ldr	r5, [pc, #68]	; (1918 <hif_receive+0xc4>)
    18d2:	47a8      	blx	r5
    18d4:	4b14      	ldr	r3, [pc, #80]	; (1928 <hif_receive+0xd4>)
    18d6:	689a      	ldr	r2, [r3, #8]
    18d8:	0021      	movs	r1, r4
    18da:	4816      	ldr	r0, [pc, #88]	; (1934 <hif_receive+0xe0>)
    18dc:	47a8      	blx	r5
    18de:	200d      	movs	r0, #13
    18e0:	4b10      	ldr	r3, [pc, #64]	; (1924 <hif_receive+0xd0>)
    18e2:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    18e4:	200c      	movs	r0, #12
    18e6:	4240      	negs	r0, r0
		goto ERR1;
    18e8:	e7c1      	b.n	186e <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    18ea:	4a13      	ldr	r2, [pc, #76]	; (1938 <hif_receive+0xe4>)
    18ec:	4908      	ldr	r1, [pc, #32]	; (1910 <hif_receive+0xbc>)
    18ee:	4809      	ldr	r0, [pc, #36]	; (1914 <hif_receive+0xc0>)
    18f0:	4b09      	ldr	r3, [pc, #36]	; (1918 <hif_receive+0xc4>)
    18f2:	4798      	blx	r3
    18f4:	4811      	ldr	r0, [pc, #68]	; (193c <hif_receive+0xe8>)
    18f6:	4b0a      	ldr	r3, [pc, #40]	; (1920 <hif_receive+0xcc>)
    18f8:	4798      	blx	r3
    18fa:	200d      	movs	r0, #13
    18fc:	4b09      	ldr	r3, [pc, #36]	; (1924 <hif_receive+0xd0>)
    18fe:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1900:	200c      	movs	r0, #12
    1902:	4240      	negs	r0, r0
		goto ERR1;
    1904:	e7b3      	b.n	186e <hif_receive+0x1a>
    1906:	46c0      	nop			; (mov r8, r8)
    1908:	00001175 	.word	0x00001175
    190c:	0000026b 	.word	0x0000026b
    1910:	000095b0 	.word	0x000095b0
    1914:	00009544 	.word	0x00009544
    1918:	00007eed 	.word	0x00007eed
    191c:	000097bc 	.word	0x000097bc
    1920:	00008009 	.word	0x00008009
    1924:	00007f21 	.word	0x00007f21
    1928:	20000300 	.word	0x20000300
    192c:	00002595 	.word	0x00002595
    1930:	00000273 	.word	0x00000273
    1934:	000097dc 	.word	0x000097dc
    1938:	00000279 	.word	0x00000279
    193c:	00009824 	.word	0x00009824

00001940 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    1940:	b570      	push	{r4, r5, r6, lr}
    1942:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    1944:	2807      	cmp	r0, #7
    1946:	d81f      	bhi.n	1988 <hif_register_cb+0x48>
    1948:	0083      	lsls	r3, r0, #2
    194a:	4a16      	ldr	r2, [pc, #88]	; (19a4 <hif_register_cb+0x64>)
    194c:	58d3      	ldr	r3, [r2, r3]
    194e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    1950:	4b15      	ldr	r3, [pc, #84]	; (19a8 <hif_register_cb+0x68>)
    1952:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    1954:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    1956:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    1958:	4b13      	ldr	r3, [pc, #76]	; (19a8 <hif_register_cb+0x68>)
    195a:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    195c:	2000      	movs	r0, #0
			break;
    195e:	e7fa      	b.n	1956 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    1960:	4b11      	ldr	r3, [pc, #68]	; (19a8 <hif_register_cb+0x68>)
    1962:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    1964:	2000      	movs	r0, #0
			break;
    1966:	e7f6      	b.n	1956 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    1968:	4b0f      	ldr	r3, [pc, #60]	; (19a8 <hif_register_cb+0x68>)
    196a:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    196c:	2000      	movs	r0, #0
			break;
    196e:	e7f2      	b.n	1956 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    1970:	4b0d      	ldr	r3, [pc, #52]	; (19a8 <hif_register_cb+0x68>)
    1972:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    1974:	2000      	movs	r0, #0
			break;
    1976:	e7ee      	b.n	1956 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    1978:	4b0b      	ldr	r3, [pc, #44]	; (19a8 <hif_register_cb+0x68>)
    197a:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    197c:	2000      	movs	r0, #0
			break;
    197e:	e7ea      	b.n	1956 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    1980:	4b09      	ldr	r3, [pc, #36]	; (19a8 <hif_register_cb+0x68>)
    1982:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    1984:	2000      	movs	r0, #0
			break;
    1986:	e7e6      	b.n	1956 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    1988:	4a08      	ldr	r2, [pc, #32]	; (19ac <hif_register_cb+0x6c>)
    198a:	4909      	ldr	r1, [pc, #36]	; (19b0 <hif_register_cb+0x70>)
    198c:	4809      	ldr	r0, [pc, #36]	; (19b4 <hif_register_cb+0x74>)
    198e:	4d0a      	ldr	r5, [pc, #40]	; (19b8 <hif_register_cb+0x78>)
    1990:	47a8      	blx	r5
    1992:	0021      	movs	r1, r4
    1994:	4809      	ldr	r0, [pc, #36]	; (19bc <hif_register_cb+0x7c>)
    1996:	47a8      	blx	r5
    1998:	200d      	movs	r0, #13
    199a:	4b09      	ldr	r3, [pc, #36]	; (19c0 <hif_register_cb+0x80>)
    199c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    199e:	200c      	movs	r0, #12
    19a0:	4240      	negs	r0, r0
			break;
    19a2:	e7d8      	b.n	1956 <hif_register_cb+0x16>
    19a4:	0000956c 	.word	0x0000956c
    19a8:	20000300 	.word	0x20000300
    19ac:	000002b1 	.word	0x000002b1
    19b0:	000095bc 	.word	0x000095bc
    19b4:	00009544 	.word	0x00009544
    19b8:	00007eed 	.word	0x00007eed
    19bc:	00009868 	.word	0x00009868
    19c0:	00007f21 	.word	0x00007f21

000019c4 <hif_init>:
{
    19c4:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    19c6:	2228      	movs	r2, #40	; 0x28
    19c8:	2100      	movs	r1, #0
    19ca:	4806      	ldr	r0, [pc, #24]	; (19e4 <hif_init+0x20>)
    19cc:	4b06      	ldr	r3, [pc, #24]	; (19e8 <hif_init+0x24>)
    19ce:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    19d0:	4806      	ldr	r0, [pc, #24]	; (19ec <hif_init+0x28>)
    19d2:	4b07      	ldr	r3, [pc, #28]	; (19f0 <hif_init+0x2c>)
    19d4:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    19d6:	4907      	ldr	r1, [pc, #28]	; (19f4 <hif_init+0x30>)
    19d8:	2003      	movs	r0, #3
    19da:	4b07      	ldr	r3, [pc, #28]	; (19f8 <hif_init+0x34>)
    19dc:	4798      	blx	r3
}
    19de:	2000      	movs	r0, #0
    19e0:	bd10      	pop	{r4, pc}
    19e2:	46c0      	nop			; (mov r8, r8)
    19e4:	20000300 	.word	0x20000300
    19e8:	00001135 	.word	0x00001135
    19ec:	00001161 	.word	0x00001161
    19f0:	00000de9 	.word	0x00000de9
    19f4:	00001171 	.word	0x00001171
    19f8:	00001941 	.word	0x00001941

000019fc <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    19fc:	b530      	push	{r4, r5, lr}
    19fe:	b09f      	sub	sp, #124	; 0x7c
    1a00:	0004      	movs	r4, r0
    1a02:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1a04:	282c      	cmp	r0, #44	; 0x2c
    1a06:	d02f      	beq.n	1a68 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1a08:	281b      	cmp	r0, #27
    1a0a:	d03d      	beq.n	1a88 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1a0c:	2806      	cmp	r0, #6
    1a0e:	d04b      	beq.n	1aa8 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1a10:	280e      	cmp	r0, #14
    1a12:	d027      	beq.n	1a64 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1a14:	2832      	cmp	r0, #50	; 0x32
    1a16:	d057      	beq.n	1ac8 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1a18:	282f      	cmp	r0, #47	; 0x2f
    1a1a:	d065      	beq.n	1ae8 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1a1c:	2834      	cmp	r0, #52	; 0x34
    1a1e:	d100      	bne.n	1a22 <m2m_wifi_cb+0x26>
    1a20:	e077      	b.n	1b12 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1a22:	2811      	cmp	r0, #17
    1a24:	d100      	bne.n	1a28 <m2m_wifi_cb+0x2c>
    1a26:	e096      	b.n	1b56 <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1a28:	2813      	cmp	r0, #19
    1a2a:	d100      	bne.n	1a2e <m2m_wifi_cb+0x32>
    1a2c:	e0ac      	b.n	1b88 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1a2e:	2804      	cmp	r0, #4
    1a30:	d100      	bne.n	1a34 <m2m_wifi_cb+0x38>
    1a32:	e0bb      	b.n	1bac <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1a34:	2865      	cmp	r0, #101	; 0x65
    1a36:	d100      	bne.n	1a3a <m2m_wifi_cb+0x3e>
    1a38:	e0ca      	b.n	1bd0 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1a3a:	2809      	cmp	r0, #9
    1a3c:	d100      	bne.n	1a40 <m2m_wifi_cb+0x44>
    1a3e:	e0d9      	b.n	1bf4 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1a40:	282a      	cmp	r0, #42	; 0x2a
    1a42:	d100      	bne.n	1a46 <m2m_wifi_cb+0x4a>
    1a44:	e0e8      	b.n	1c18 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1a46:	2820      	cmp	r0, #32
    1a48:	d100      	bne.n	1a4c <m2m_wifi_cb+0x50>
    1a4a:	e0f7      	b.n	1c3c <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1a4c:	2292      	movs	r2, #146	; 0x92
    1a4e:	0052      	lsls	r2, r2, #1
    1a50:	4989      	ldr	r1, [pc, #548]	; (1c78 <m2m_wifi_cb+0x27c>)
    1a52:	488a      	ldr	r0, [pc, #552]	; (1c7c <m2m_wifi_cb+0x280>)
    1a54:	4d8a      	ldr	r5, [pc, #552]	; (1c80 <m2m_wifi_cb+0x284>)
    1a56:	47a8      	blx	r5
    1a58:	0021      	movs	r1, r4
    1a5a:	488a      	ldr	r0, [pc, #552]	; (1c84 <m2m_wifi_cb+0x288>)
    1a5c:	47a8      	blx	r5
    1a5e:	200d      	movs	r0, #13
    1a60:	4b89      	ldr	r3, [pc, #548]	; (1c88 <m2m_wifi_cb+0x28c>)
    1a62:	4798      	blx	r3
	}
}
    1a64:	b01f      	add	sp, #124	; 0x7c
    1a66:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1a68:	2300      	movs	r3, #0
    1a6a:	2204      	movs	r2, #4
    1a6c:	a903      	add	r1, sp, #12
    1a6e:	0028      	movs	r0, r5
    1a70:	4c86      	ldr	r4, [pc, #536]	; (1c8c <m2m_wifi_cb+0x290>)
    1a72:	47a0      	blx	r4
    1a74:	2800      	cmp	r0, #0
    1a76:	d1f5      	bne.n	1a64 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1a78:	4b85      	ldr	r3, [pc, #532]	; (1c90 <m2m_wifi_cb+0x294>)
    1a7a:	681b      	ldr	r3, [r3, #0]
    1a7c:	2b00      	cmp	r3, #0
    1a7e:	d0f1      	beq.n	1a64 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1a80:	a903      	add	r1, sp, #12
    1a82:	302c      	adds	r0, #44	; 0x2c
    1a84:	4798      	blx	r3
    1a86:	e7ed      	b.n	1a64 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1a88:	2300      	movs	r3, #0
    1a8a:	2208      	movs	r2, #8
    1a8c:	a903      	add	r1, sp, #12
    1a8e:	0028      	movs	r0, r5
    1a90:	4c7e      	ldr	r4, [pc, #504]	; (1c8c <m2m_wifi_cb+0x290>)
    1a92:	47a0      	blx	r4
    1a94:	2800      	cmp	r0, #0
    1a96:	d1e5      	bne.n	1a64 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1a98:	4b7d      	ldr	r3, [pc, #500]	; (1c90 <m2m_wifi_cb+0x294>)
    1a9a:	681b      	ldr	r3, [r3, #0]
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d0e1      	beq.n	1a64 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1aa0:	a903      	add	r1, sp, #12
    1aa2:	301b      	adds	r0, #27
    1aa4:	4798      	blx	r3
    1aa6:	e7dd      	b.n	1a64 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1aa8:	2301      	movs	r3, #1
    1aaa:	2230      	movs	r2, #48	; 0x30
    1aac:	a903      	add	r1, sp, #12
    1aae:	0028      	movs	r0, r5
    1ab0:	4c76      	ldr	r4, [pc, #472]	; (1c8c <m2m_wifi_cb+0x290>)
    1ab2:	47a0      	blx	r4
    1ab4:	2800      	cmp	r0, #0
    1ab6:	d1d5      	bne.n	1a64 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1ab8:	4b75      	ldr	r3, [pc, #468]	; (1c90 <m2m_wifi_cb+0x294>)
    1aba:	681b      	ldr	r3, [r3, #0]
    1abc:	2b00      	cmp	r3, #0
    1abe:	d0d1      	beq.n	1a64 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1ac0:	a903      	add	r1, sp, #12
    1ac2:	3006      	adds	r0, #6
    1ac4:	4798      	blx	r3
    1ac6:	e7cd      	b.n	1a64 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1ac8:	2300      	movs	r3, #0
    1aca:	2214      	movs	r2, #20
    1acc:	a903      	add	r1, sp, #12
    1ace:	0028      	movs	r0, r5
    1ad0:	4c6e      	ldr	r4, [pc, #440]	; (1c8c <m2m_wifi_cb+0x290>)
    1ad2:	47a0      	blx	r4
    1ad4:	2800      	cmp	r0, #0
    1ad6:	d1c5      	bne.n	1a64 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1ad8:	4b6d      	ldr	r3, [pc, #436]	; (1c90 <m2m_wifi_cb+0x294>)
    1ada:	681b      	ldr	r3, [r3, #0]
    1adc:	2b00      	cmp	r3, #0
    1ade:	d0c1      	beq.n	1a64 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1ae0:	a903      	add	r1, sp, #12
    1ae2:	3032      	adds	r0, #50	; 0x32
    1ae4:	4798      	blx	r3
    1ae6:	e7bd      	b.n	1a64 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1ae8:	2264      	movs	r2, #100	; 0x64
    1aea:	2100      	movs	r1, #0
    1aec:	a803      	add	r0, sp, #12
    1aee:	4b69      	ldr	r3, [pc, #420]	; (1c94 <m2m_wifi_cb+0x298>)
    1af0:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1af2:	2300      	movs	r3, #0
    1af4:	2264      	movs	r2, #100	; 0x64
    1af6:	a903      	add	r1, sp, #12
    1af8:	0028      	movs	r0, r5
    1afa:	4c64      	ldr	r4, [pc, #400]	; (1c8c <m2m_wifi_cb+0x290>)
    1afc:	47a0      	blx	r4
    1afe:	2800      	cmp	r0, #0
    1b00:	d1b0      	bne.n	1a64 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1b02:	4b63      	ldr	r3, [pc, #396]	; (1c90 <m2m_wifi_cb+0x294>)
    1b04:	681b      	ldr	r3, [r3, #0]
    1b06:	2b00      	cmp	r3, #0
    1b08:	d0ac      	beq.n	1a64 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1b0a:	a903      	add	r1, sp, #12
    1b0c:	302f      	adds	r0, #47	; 0x2f
    1b0e:	4798      	blx	r3
    1b10:	e7a8      	b.n	1a64 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1b12:	2300      	movs	r3, #0
    1b14:	2204      	movs	r2, #4
    1b16:	a903      	add	r1, sp, #12
    1b18:	0028      	movs	r0, r5
    1b1a:	4c5c      	ldr	r4, [pc, #368]	; (1c8c <m2m_wifi_cb+0x290>)
    1b1c:	47a0      	blx	r4
    1b1e:	2800      	cmp	r0, #0
    1b20:	d1a0      	bne.n	1a64 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1b22:	485d      	ldr	r0, [pc, #372]	; (1c98 <m2m_wifi_cb+0x29c>)
    1b24:	4d56      	ldr	r5, [pc, #344]	; (1c80 <m2m_wifi_cb+0x284>)
    1b26:	47a8      	blx	r5
    1b28:	9c03      	ldr	r4, [sp, #12]
    1b2a:	0a23      	lsrs	r3, r4, #8
    1b2c:	20ff      	movs	r0, #255	; 0xff
    1b2e:	4003      	ands	r3, r0
    1b30:	0c22      	lsrs	r2, r4, #16
    1b32:	4002      	ands	r2, r0
    1b34:	0e21      	lsrs	r1, r4, #24
    1b36:	4020      	ands	r0, r4
    1b38:	9000      	str	r0, [sp, #0]
    1b3a:	4858      	ldr	r0, [pc, #352]	; (1c9c <m2m_wifi_cb+0x2a0>)
    1b3c:	47a8      	blx	r5
    1b3e:	200d      	movs	r0, #13
    1b40:	4b51      	ldr	r3, [pc, #324]	; (1c88 <m2m_wifi_cb+0x28c>)
    1b42:	4798      	blx	r3
			if (gpfAppWifiCb)
    1b44:	4b52      	ldr	r3, [pc, #328]	; (1c90 <m2m_wifi_cb+0x294>)
    1b46:	681b      	ldr	r3, [r3, #0]
    1b48:	2b00      	cmp	r3, #0
    1b4a:	d100      	bne.n	1b4e <m2m_wifi_cb+0x152>
    1b4c:	e78a      	b.n	1a64 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1b4e:	2100      	movs	r1, #0
    1b50:	2034      	movs	r0, #52	; 0x34
    1b52:	4798      	blx	r3
    1b54:	e786      	b.n	1a64 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    1b56:	2200      	movs	r2, #0
    1b58:	4b51      	ldr	r3, [pc, #324]	; (1ca0 <m2m_wifi_cb+0x2a4>)
    1b5a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1b5c:	2300      	movs	r3, #0
    1b5e:	3204      	adds	r2, #4
    1b60:	a903      	add	r1, sp, #12
    1b62:	0028      	movs	r0, r5
    1b64:	4c49      	ldr	r4, [pc, #292]	; (1c8c <m2m_wifi_cb+0x290>)
    1b66:	47a0      	blx	r4
    1b68:	2800      	cmp	r0, #0
    1b6a:	d000      	beq.n	1b6e <m2m_wifi_cb+0x172>
    1b6c:	e77a      	b.n	1a64 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    1b6e:	ab03      	add	r3, sp, #12
    1b70:	781a      	ldrb	r2, [r3, #0]
    1b72:	4b4c      	ldr	r3, [pc, #304]	; (1ca4 <m2m_wifi_cb+0x2a8>)
    1b74:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1b76:	4b46      	ldr	r3, [pc, #280]	; (1c90 <m2m_wifi_cb+0x294>)
    1b78:	681b      	ldr	r3, [r3, #0]
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d100      	bne.n	1b80 <m2m_wifi_cb+0x184>
    1b7e:	e771      	b.n	1a64 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1b80:	a903      	add	r1, sp, #12
    1b82:	3011      	adds	r0, #17
    1b84:	4798      	blx	r3
    1b86:	e76d      	b.n	1a64 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1b88:	2300      	movs	r3, #0
    1b8a:	222c      	movs	r2, #44	; 0x2c
    1b8c:	a903      	add	r1, sp, #12
    1b8e:	0028      	movs	r0, r5
    1b90:	4c3e      	ldr	r4, [pc, #248]	; (1c8c <m2m_wifi_cb+0x290>)
    1b92:	47a0      	blx	r4
    1b94:	2800      	cmp	r0, #0
    1b96:	d000      	beq.n	1b9a <m2m_wifi_cb+0x19e>
    1b98:	e764      	b.n	1a64 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1b9a:	4b3d      	ldr	r3, [pc, #244]	; (1c90 <m2m_wifi_cb+0x294>)
    1b9c:	681b      	ldr	r3, [r3, #0]
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	d100      	bne.n	1ba4 <m2m_wifi_cb+0x1a8>
    1ba2:	e75f      	b.n	1a64 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1ba4:	a903      	add	r1, sp, #12
    1ba6:	3013      	adds	r0, #19
    1ba8:	4798      	blx	r3
    1baa:	e75b      	b.n	1a64 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1bac:	2300      	movs	r3, #0
    1bae:	2204      	movs	r2, #4
    1bb0:	a91c      	add	r1, sp, #112	; 0x70
    1bb2:	0028      	movs	r0, r5
    1bb4:	4c35      	ldr	r4, [pc, #212]	; (1c8c <m2m_wifi_cb+0x290>)
    1bb6:	47a0      	blx	r4
    1bb8:	2800      	cmp	r0, #0
    1bba:	d000      	beq.n	1bbe <m2m_wifi_cb+0x1c2>
    1bbc:	e752      	b.n	1a64 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1bbe:	4b34      	ldr	r3, [pc, #208]	; (1c90 <m2m_wifi_cb+0x294>)
    1bc0:	681b      	ldr	r3, [r3, #0]
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	d100      	bne.n	1bc8 <m2m_wifi_cb+0x1cc>
    1bc6:	e74d      	b.n	1a64 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1bc8:	a91c      	add	r1, sp, #112	; 0x70
    1bca:	3004      	adds	r0, #4
    1bcc:	4798      	blx	r3
    1bce:	e749      	b.n	1a64 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1bd0:	2300      	movs	r3, #0
    1bd2:	2204      	movs	r2, #4
    1bd4:	a91c      	add	r1, sp, #112	; 0x70
    1bd6:	0028      	movs	r0, r5
    1bd8:	4c2c      	ldr	r4, [pc, #176]	; (1c8c <m2m_wifi_cb+0x290>)
    1bda:	47a0      	blx	r4
    1bdc:	2800      	cmp	r0, #0
    1bde:	d000      	beq.n	1be2 <m2m_wifi_cb+0x1e6>
    1be0:	e740      	b.n	1a64 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1be2:	4b2b      	ldr	r3, [pc, #172]	; (1c90 <m2m_wifi_cb+0x294>)
    1be4:	681b      	ldr	r3, [r3, #0]
    1be6:	2b00      	cmp	r3, #0
    1be8:	d100      	bne.n	1bec <m2m_wifi_cb+0x1f0>
    1bea:	e73b      	b.n	1a64 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1bec:	a91c      	add	r1, sp, #112	; 0x70
    1bee:	3065      	adds	r0, #101	; 0x65
    1bf0:	4798      	blx	r3
    1bf2:	e737      	b.n	1a64 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1bf4:	2301      	movs	r3, #1
    1bf6:	2264      	movs	r2, #100	; 0x64
    1bf8:	a903      	add	r1, sp, #12
    1bfa:	0028      	movs	r0, r5
    1bfc:	4c23      	ldr	r4, [pc, #140]	; (1c8c <m2m_wifi_cb+0x290>)
    1bfe:	47a0      	blx	r4
    1c00:	2800      	cmp	r0, #0
    1c02:	d000      	beq.n	1c06 <m2m_wifi_cb+0x20a>
    1c04:	e72e      	b.n	1a64 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1c06:	4b22      	ldr	r3, [pc, #136]	; (1c90 <m2m_wifi_cb+0x294>)
    1c08:	681b      	ldr	r3, [r3, #0]
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	d100      	bne.n	1c10 <m2m_wifi_cb+0x214>
    1c0e:	e729      	b.n	1a64 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1c10:	a903      	add	r1, sp, #12
    1c12:	3009      	adds	r0, #9
    1c14:	4798      	blx	r3
    1c16:	e725      	b.n	1a64 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1c18:	2301      	movs	r3, #1
    1c1a:	2204      	movs	r2, #4
    1c1c:	a903      	add	r1, sp, #12
    1c1e:	0028      	movs	r0, r5
    1c20:	4c1a      	ldr	r4, [pc, #104]	; (1c8c <m2m_wifi_cb+0x290>)
    1c22:	47a0      	blx	r4
    1c24:	2800      	cmp	r0, #0
    1c26:	d000      	beq.n	1c2a <m2m_wifi_cb+0x22e>
    1c28:	e71c      	b.n	1a64 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1c2a:	4b19      	ldr	r3, [pc, #100]	; (1c90 <m2m_wifi_cb+0x294>)
    1c2c:	681b      	ldr	r3, [r3, #0]
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d100      	bne.n	1c34 <m2m_wifi_cb+0x238>
    1c32:	e717      	b.n	1a64 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1c34:	a903      	add	r1, sp, #12
    1c36:	302a      	adds	r0, #42	; 0x2a
    1c38:	4798      	blx	r3
    1c3a:	e713      	b.n	1a64 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    1c3c:	2300      	movs	r3, #0
    1c3e:	2208      	movs	r2, #8
    1c40:	a903      	add	r1, sp, #12
    1c42:	0028      	movs	r0, r5
    1c44:	4c11      	ldr	r4, [pc, #68]	; (1c8c <m2m_wifi_cb+0x290>)
    1c46:	47a0      	blx	r4
    1c48:	2800      	cmp	r0, #0
    1c4a:	d000      	beq.n	1c4e <m2m_wifi_cb+0x252>
    1c4c:	e70a      	b.n	1a64 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    1c4e:	ab03      	add	r3, sp, #12
    1c50:	889a      	ldrh	r2, [r3, #4]
    1c52:	0028      	movs	r0, r5
    1c54:	3008      	adds	r0, #8
    1c56:	2301      	movs	r3, #1
    1c58:	9903      	ldr	r1, [sp, #12]
    1c5a:	4c0c      	ldr	r4, [pc, #48]	; (1c8c <m2m_wifi_cb+0x290>)
    1c5c:	47a0      	blx	r4
    1c5e:	2800      	cmp	r0, #0
    1c60:	d000      	beq.n	1c64 <m2m_wifi_cb+0x268>
    1c62:	e6ff      	b.n	1a64 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    1c64:	4b0a      	ldr	r3, [pc, #40]	; (1c90 <m2m_wifi_cb+0x294>)
    1c66:	681b      	ldr	r3, [r3, #0]
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d100      	bne.n	1c6e <m2m_wifi_cb+0x272>
    1c6c:	e6fa      	b.n	1a64 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    1c6e:	a903      	add	r1, sp, #12
    1c70:	3020      	adds	r0, #32
    1c72:	4798      	blx	r3
    1c74:	e6f6      	b.n	1a64 <m2m_wifi_cb+0x68>
    1c76:	46c0      	nop			; (mov r8, r8)
    1c78:	000098ac 	.word	0x000098ac
    1c7c:	00009544 	.word	0x00009544
    1c80:	00007eed 	.word	0x00007eed
    1c84:	000098fc 	.word	0x000098fc
    1c88:	00007f21 	.word	0x00007f21
    1c8c:	00001855 	.word	0x00001855
    1c90:	20000200 	.word	0x20000200
    1c94:	00001135 	.word	0x00001135
    1c98:	00009874 	.word	0x00009874
    1c9c:	000098dc 	.word	0x000098dc
    1ca0:	20000205 	.word	0x20000205
    1ca4:	20000204 	.word	0x20000204

00001ca8 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1caa:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1cac:	2201      	movs	r2, #1
    1cae:	230f      	movs	r3, #15
    1cb0:	446b      	add	r3, sp
    1cb2:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    1cb4:	2800      	cmp	r0, #0
    1cb6:	d061      	beq.n	1d7c <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1cb8:	6802      	ldr	r2, [r0, #0]
    1cba:	4b32      	ldr	r3, [pc, #200]	; (1d84 <m2m_wifi_init+0xdc>)
    1cbc:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1cbe:	2200      	movs	r2, #0
    1cc0:	4b31      	ldr	r3, [pc, #196]	; (1d88 <m2m_wifi_init+0xe0>)
    1cc2:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    1cc4:	200f      	movs	r0, #15
    1cc6:	4468      	add	r0, sp
    1cc8:	4b30      	ldr	r3, [pc, #192]	; (1d8c <m2m_wifi_init+0xe4>)
    1cca:	4798      	blx	r3
    1ccc:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1cce:	d002      	beq.n	1cd6 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    1cd0:	0020      	movs	r0, r4
    1cd2:	b00f      	add	sp, #60	; 0x3c
    1cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    1cd6:	2000      	movs	r0, #0
    1cd8:	4b2d      	ldr	r3, [pc, #180]	; (1d90 <m2m_wifi_init+0xe8>)
    1cda:	4798      	blx	r3
    1cdc:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1cde:	d149      	bne.n	1d74 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1ce0:	492c      	ldr	r1, [pc, #176]	; (1d94 <m2m_wifi_init+0xec>)
    1ce2:	2001      	movs	r0, #1
    1ce4:	4b2c      	ldr	r3, [pc, #176]	; (1d98 <m2m_wifi_init+0xf0>)
    1ce6:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    1ce8:	ae04      	add	r6, sp, #16
    1cea:	0030      	movs	r0, r6
    1cec:	4b2b      	ldr	r3, [pc, #172]	; (1d9c <m2m_wifi_init+0xf4>)
    1cee:	4798      	blx	r3
    1cf0:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    1cf2:	482b      	ldr	r0, [pc, #172]	; (1da0 <m2m_wifi_init+0xf8>)
    1cf4:	4d2b      	ldr	r5, [pc, #172]	; (1da4 <m2m_wifi_init+0xfc>)
    1cf6:	47a8      	blx	r5
    1cf8:	79b3      	ldrb	r3, [r6, #6]
    1cfa:	7972      	ldrb	r2, [r6, #5]
    1cfc:	7931      	ldrb	r1, [r6, #4]
    1cfe:	8c30      	ldrh	r0, [r6, #32]
    1d00:	9000      	str	r0, [sp, #0]
    1d02:	4829      	ldr	r0, [pc, #164]	; (1da8 <m2m_wifi_init+0x100>)
    1d04:	47a8      	blx	r5
    1d06:	200d      	movs	r0, #13
    1d08:	4f28      	ldr	r7, [pc, #160]	; (1dac <m2m_wifi_init+0x104>)
    1d0a:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1d0c:	4824      	ldr	r0, [pc, #144]	; (1da0 <m2m_wifi_init+0xf8>)
    1d0e:	47a8      	blx	r5
    1d10:	2226      	movs	r2, #38	; 0x26
    1d12:	446a      	add	r2, sp
    1d14:	211a      	movs	r1, #26
    1d16:	4469      	add	r1, sp
    1d18:	4825      	ldr	r0, [pc, #148]	; (1db0 <m2m_wifi_init+0x108>)
    1d1a:	47a8      	blx	r5
    1d1c:	200d      	movs	r0, #13
    1d1e:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1d20:	481f      	ldr	r0, [pc, #124]	; (1da0 <m2m_wifi_init+0xf8>)
    1d22:	47a8      	blx	r5
    1d24:	7a73      	ldrb	r3, [r6, #9]
    1d26:	7a32      	ldrb	r2, [r6, #8]
    1d28:	79f1      	ldrb	r1, [r6, #7]
    1d2a:	4822      	ldr	r0, [pc, #136]	; (1db4 <m2m_wifi_init+0x10c>)
    1d2c:	47a8      	blx	r5
    1d2e:	200d      	movs	r0, #13
    1d30:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    1d32:	481b      	ldr	r0, [pc, #108]	; (1da0 <m2m_wifi_init+0xf8>)
    1d34:	47a8      	blx	r5
    1d36:	2302      	movs	r3, #2
    1d38:	2205      	movs	r2, #5
    1d3a:	2113      	movs	r1, #19
    1d3c:	481e      	ldr	r0, [pc, #120]	; (1db8 <m2m_wifi_init+0x110>)
    1d3e:	47a8      	blx	r5
    1d40:	200d      	movs	r0, #13
    1d42:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    1d44:	4816      	ldr	r0, [pc, #88]	; (1da0 <m2m_wifi_init+0xf8>)
    1d46:	47a8      	blx	r5
    1d48:	4a1c      	ldr	r2, [pc, #112]	; (1dbc <m2m_wifi_init+0x114>)
    1d4a:	491d      	ldr	r1, [pc, #116]	; (1dc0 <m2m_wifi_init+0x118>)
    1d4c:	481d      	ldr	r0, [pc, #116]	; (1dc4 <m2m_wifi_init+0x11c>)
    1d4e:	47a8      	blx	r5
    1d50:	200d      	movs	r0, #13
    1d52:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    1d54:	0023      	movs	r3, r4
    1d56:	330d      	adds	r3, #13
    1d58:	d1ba      	bne.n	1cd0 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    1d5a:	22e8      	movs	r2, #232	; 0xe8
    1d5c:	32ff      	adds	r2, #255	; 0xff
    1d5e:	491a      	ldr	r1, [pc, #104]	; (1dc8 <m2m_wifi_init+0x120>)
    1d60:	481a      	ldr	r0, [pc, #104]	; (1dcc <m2m_wifi_init+0x124>)
    1d62:	4b10      	ldr	r3, [pc, #64]	; (1da4 <m2m_wifi_init+0xfc>)
    1d64:	4798      	blx	r3
    1d66:	481a      	ldr	r0, [pc, #104]	; (1dd0 <m2m_wifi_init+0x128>)
    1d68:	4b1a      	ldr	r3, [pc, #104]	; (1dd4 <m2m_wifi_init+0x12c>)
    1d6a:	4798      	blx	r3
    1d6c:	200d      	movs	r0, #13
    1d6e:	4b0f      	ldr	r3, [pc, #60]	; (1dac <m2m_wifi_init+0x104>)
    1d70:	4798      	blx	r3
    1d72:	e7ad      	b.n	1cd0 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    1d74:	2000      	movs	r0, #0
    1d76:	4b18      	ldr	r3, [pc, #96]	; (1dd8 <m2m_wifi_init+0x130>)
    1d78:	4798      	blx	r3
    1d7a:	e7a9      	b.n	1cd0 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    1d7c:	240c      	movs	r4, #12
    1d7e:	4264      	negs	r4, r4
    1d80:	e7a6      	b.n	1cd0 <m2m_wifi_init+0x28>
    1d82:	46c0      	nop			; (mov r8, r8)
    1d84:	20000200 	.word	0x20000200
    1d88:	20000205 	.word	0x20000205
    1d8c:	00002749 	.word	0x00002749
    1d90:	000019c5 	.word	0x000019c5
    1d94:	000019fd 	.word	0x000019fd
    1d98:	00001941 	.word	0x00001941
    1d9c:	00002665 	.word	0x00002665
    1da0:	00009874 	.word	0x00009874
    1da4:	00007eed 	.word	0x00007eed
    1da8:	000099b8 	.word	0x000099b8
    1dac:	00007f21 	.word	0x00007f21
    1db0:	000099e0 	.word	0x000099e0
    1db4:	000099fc 	.word	0x000099fc
    1db8:	00009a20 	.word	0x00009a20
    1dbc:	00009a38 	.word	0x00009a38
    1dc0:	00009a44 	.word	0x00009a44
    1dc4:	00009a50 	.word	0x00009a50
    1dc8:	000098b8 	.word	0x000098b8
    1dcc:	00009544 	.word	0x00009544
    1dd0:	00009a68 	.word	0x00009a68
    1dd4:	00008009 	.word	0x00008009
    1dd8:	0000281d 	.word	0x0000281d

00001ddc <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    1ddc:	b510      	push	{r4, lr}
	return hif_handle_isr();
    1dde:	4b01      	ldr	r3, [pc, #4]	; (1de4 <m2m_wifi_handle_events+0x8>)
    1de0:	4798      	blx	r3
}
    1de2:	bd10      	pop	{r4, pc}
    1de4:	00001479 	.word	0x00001479

00001de8 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dea:	46ce      	mov	lr, r9
    1dec:	4647      	mov	r7, r8
    1dee:	b580      	push	{r7, lr}
    1df0:	b0a3      	sub	sp, #140	; 0x8c
    1df2:	9005      	str	r0, [sp, #20]
    1df4:	000c      	movs	r4, r1
    1df6:	0015      	movs	r5, r2
    1df8:	001f      	movs	r7, r3
    1dfa:	ab2a      	add	r3, sp, #168	; 0xa8
    1dfc:	881b      	ldrh	r3, [r3, #0]
    1dfe:	4699      	mov	r9, r3
    1e00:	ab2b      	add	r3, sp, #172	; 0xac
    1e02:	781b      	ldrb	r3, [r3, #0]
    1e04:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1e06:	2a01      	cmp	r2, #1
    1e08:	d003      	beq.n	1e12 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    1e0a:	2f00      	cmp	r7, #0
    1e0c:	d040      	beq.n	1e90 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    1e0e:	2a02      	cmp	r2, #2
    1e10:	d04c      	beq.n	1eac <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    1e12:	1e63      	subs	r3, r4, #1
    1e14:	2b1f      	cmp	r3, #31
    1e16:	d900      	bls.n	1e1a <m2m_wifi_connect_sc+0x32>
    1e18:	e078      	b.n	1f0c <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    1e1a:	464b      	mov	r3, r9
    1e1c:	3b01      	subs	r3, #1
    1e1e:	b29b      	uxth	r3, r3
    1e20:	2b0d      	cmp	r3, #13
    1e22:	d903      	bls.n	1e2c <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1e24:	464b      	mov	r3, r9
    1e26:	2bff      	cmp	r3, #255	; 0xff
    1e28:	d000      	beq.n	1e2c <m2m_wifi_connect_sc+0x44>
    1e2a:	e07d      	b.n	1f28 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1e2c:	ae07      	add	r6, sp, #28
    1e2e:	0022      	movs	r2, r4
    1e30:	9905      	ldr	r1, [sp, #20]
    1e32:	205a      	movs	r0, #90	; 0x5a
    1e34:	ab02      	add	r3, sp, #8
    1e36:	469c      	mov	ip, r3
    1e38:	4460      	add	r0, ip
    1e3a:	4b78      	ldr	r3, [pc, #480]	; (201c <STACK_SIZE+0x1c>)
    1e3c:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    1e3e:	1934      	adds	r4, r6, r4
    1e40:	3446      	adds	r4, #70	; 0x46
    1e42:	2300      	movs	r3, #0
    1e44:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    1e46:	3344      	adds	r3, #68	; 0x44
    1e48:	464a      	mov	r2, r9
    1e4a:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    1e4c:	4643      	mov	r3, r8
    1e4e:	1e5a      	subs	r2, r3, #1
    1e50:	4193      	sbcs	r3, r2
    1e52:	2267      	movs	r2, #103	; 0x67
    1e54:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    1e56:	2341      	movs	r3, #65	; 0x41
    1e58:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1e5a:	2d03      	cmp	r5, #3
    1e5c:	d100      	bne.n	1e60 <m2m_wifi_connect_sc+0x78>
    1e5e:	e072      	b.n	1f46 <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    1e60:	2d02      	cmp	r5, #2
    1e62:	d100      	bne.n	1e66 <m2m_wifi_connect_sc+0x7e>
    1e64:	e0ab      	b.n	1fbe <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    1e66:	2d04      	cmp	r5, #4
    1e68:	d100      	bne.n	1e6c <m2m_wifi_connect_sc+0x84>
    1e6a:	e0c3      	b.n	1ff4 <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    1e6c:	2d01      	cmp	r5, #1
    1e6e:	d000      	beq.n	1e72 <m2m_wifi_connect_sc+0x8a>
    1e70:	e0c6      	b.n	2000 <STACK_SIZE>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    1e72:	2300      	movs	r3, #0
    1e74:	9302      	str	r3, [sp, #8]
    1e76:	9301      	str	r3, [sp, #4]
    1e78:	9300      	str	r3, [sp, #0]
    1e7a:	336c      	adds	r3, #108	; 0x6c
    1e7c:	aa07      	add	r2, sp, #28
    1e7e:	2128      	movs	r1, #40	; 0x28
    1e80:	2001      	movs	r0, #1
    1e82:	4c67      	ldr	r4, [pc, #412]	; (2020 <STACK_SIZE+0x20>)
    1e84:	47a0      	blx	r4

ERR1:
	return ret;
}
    1e86:	b023      	add	sp, #140	; 0x8c
    1e88:	bc0c      	pop	{r2, r3}
    1e8a:	4690      	mov	r8, r2
    1e8c:	4699      	mov	r9, r3
    1e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    1e90:	4a64      	ldr	r2, [pc, #400]	; (2024 <STACK_SIZE+0x24>)
    1e92:	4965      	ldr	r1, [pc, #404]	; (2028 <STACK_SIZE+0x28>)
    1e94:	4865      	ldr	r0, [pc, #404]	; (202c <STACK_SIZE+0x2c>)
    1e96:	4b66      	ldr	r3, [pc, #408]	; (2030 <STACK_SIZE+0x30>)
    1e98:	4798      	blx	r3
    1e9a:	4866      	ldr	r0, [pc, #408]	; (2034 <STACK_SIZE+0x34>)
    1e9c:	4b66      	ldr	r3, [pc, #408]	; (2038 <STACK_SIZE+0x38>)
    1e9e:	4798      	blx	r3
    1ea0:	200d      	movs	r0, #13
    1ea2:	4b66      	ldr	r3, [pc, #408]	; (203c <STACK_SIZE+0x3c>)
    1ea4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1ea6:	200c      	movs	r0, #12
    1ea8:	4240      	negs	r0, r0
			goto ERR1;
    1eaa:	e7ec      	b.n	1e86 <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    1eac:	0038      	movs	r0, r7
    1eae:	4b64      	ldr	r3, [pc, #400]	; (2040 <STACK_SIZE+0x40>)
    1eb0:	4798      	blx	r3
    1eb2:	2840      	cmp	r0, #64	; 0x40
    1eb4:	d1ad      	bne.n	1e12 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    1eb6:	783b      	ldrb	r3, [r7, #0]
    1eb8:	001a      	movs	r2, r3
    1eba:	3a30      	subs	r2, #48	; 0x30
    1ebc:	2a36      	cmp	r2, #54	; 0x36
    1ebe:	d817      	bhi.n	1ef0 <m2m_wifi_connect_sc+0x108>
    1ec0:	3a0a      	subs	r2, #10
    1ec2:	2a06      	cmp	r2, #6
    1ec4:	d914      	bls.n	1ef0 <m2m_wifi_connect_sc+0x108>
    1ec6:	3b47      	subs	r3, #71	; 0x47
    1ec8:	2b19      	cmp	r3, #25
    1eca:	d911      	bls.n	1ef0 <m2m_wifi_connect_sc+0x108>
    1ecc:	1c7a      	adds	r2, r7, #1
    1ece:	0038      	movs	r0, r7
    1ed0:	3040      	adds	r0, #64	; 0x40
    1ed2:	7813      	ldrb	r3, [r2, #0]
    1ed4:	0019      	movs	r1, r3
    1ed6:	3930      	subs	r1, #48	; 0x30
    1ed8:	2936      	cmp	r1, #54	; 0x36
    1eda:	d809      	bhi.n	1ef0 <m2m_wifi_connect_sc+0x108>
    1edc:	390a      	subs	r1, #10
    1ede:	2906      	cmp	r1, #6
    1ee0:	d906      	bls.n	1ef0 <m2m_wifi_connect_sc+0x108>
    1ee2:	3b47      	subs	r3, #71	; 0x47
    1ee4:	2b19      	cmp	r3, #25
    1ee6:	d903      	bls.n	1ef0 <m2m_wifi_connect_sc+0x108>
    1ee8:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    1eea:	4282      	cmp	r2, r0
    1eec:	d1f1      	bne.n	1ed2 <m2m_wifi_connect_sc+0xea>
    1eee:	e790      	b.n	1e12 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    1ef0:	4a54      	ldr	r2, [pc, #336]	; (2044 <STACK_SIZE+0x44>)
    1ef2:	494d      	ldr	r1, [pc, #308]	; (2028 <STACK_SIZE+0x28>)
    1ef4:	484d      	ldr	r0, [pc, #308]	; (202c <STACK_SIZE+0x2c>)
    1ef6:	4b4e      	ldr	r3, [pc, #312]	; (2030 <STACK_SIZE+0x30>)
    1ef8:	4798      	blx	r3
    1efa:	4853      	ldr	r0, [pc, #332]	; (2048 <STACK_SIZE+0x48>)
    1efc:	4b4e      	ldr	r3, [pc, #312]	; (2038 <STACK_SIZE+0x38>)
    1efe:	4798      	blx	r3
    1f00:	200d      	movs	r0, #13
    1f02:	4b4e      	ldr	r3, [pc, #312]	; (203c <STACK_SIZE+0x3c>)
    1f04:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    1f06:	200c      	movs	r0, #12
    1f08:	4240      	negs	r0, r0
					goto ERR1;
    1f0a:	e7bc      	b.n	1e86 <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    1f0c:	4a4f      	ldr	r2, [pc, #316]	; (204c <STACK_SIZE+0x4c>)
    1f0e:	4946      	ldr	r1, [pc, #280]	; (2028 <STACK_SIZE+0x28>)
    1f10:	4846      	ldr	r0, [pc, #280]	; (202c <STACK_SIZE+0x2c>)
    1f12:	4b47      	ldr	r3, [pc, #284]	; (2030 <STACK_SIZE+0x30>)
    1f14:	4798      	blx	r3
    1f16:	484e      	ldr	r0, [pc, #312]	; (2050 <STACK_SIZE+0x50>)
    1f18:	4b47      	ldr	r3, [pc, #284]	; (2038 <STACK_SIZE+0x38>)
    1f1a:	4798      	blx	r3
    1f1c:	200d      	movs	r0, #13
    1f1e:	4b47      	ldr	r3, [pc, #284]	; (203c <STACK_SIZE+0x3c>)
    1f20:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1f22:	200c      	movs	r0, #12
    1f24:	4240      	negs	r0, r0
		goto ERR1;
    1f26:	e7ae      	b.n	1e86 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    1f28:	228d      	movs	r2, #141	; 0x8d
    1f2a:	0092      	lsls	r2, r2, #2
    1f2c:	493e      	ldr	r1, [pc, #248]	; (2028 <STACK_SIZE+0x28>)
    1f2e:	483f      	ldr	r0, [pc, #252]	; (202c <STACK_SIZE+0x2c>)
    1f30:	4b3f      	ldr	r3, [pc, #252]	; (2030 <STACK_SIZE+0x30>)
    1f32:	4798      	blx	r3
    1f34:	4847      	ldr	r0, [pc, #284]	; (2054 <STACK_SIZE+0x54>)
    1f36:	4b40      	ldr	r3, [pc, #256]	; (2038 <STACK_SIZE+0x38>)
    1f38:	4798      	blx	r3
    1f3a:	200d      	movs	r0, #13
    1f3c:	4b3f      	ldr	r3, [pc, #252]	; (203c <STACK_SIZE+0x3c>)
    1f3e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1f40:	200c      	movs	r0, #12
    1f42:	4240      	negs	r0, r0
			goto ERR1;
    1f44:	e79f      	b.n	1e86 <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    1f46:	783b      	ldrb	r3, [r7, #0]
    1f48:	3b01      	subs	r3, #1
    1f4a:	b2db      	uxtb	r3, r3
    1f4c:	aa07      	add	r2, sp, #28
    1f4e:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    1f50:	2b03      	cmp	r3, #3
    1f52:	d817      	bhi.n	1f84 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    1f54:	787a      	ldrb	r2, [r7, #1]
    1f56:	1e51      	subs	r1, r2, #1
    1f58:	ab07      	add	r3, sp, #28
    1f5a:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    1f5c:	2310      	movs	r3, #16
    1f5e:	0011      	movs	r1, r2
    1f60:	4399      	bics	r1, r3
    1f62:	290b      	cmp	r1, #11
    1f64:	d01d      	beq.n	1fa2 <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1f66:	4a3c      	ldr	r2, [pc, #240]	; (2058 <STACK_SIZE+0x58>)
    1f68:	492f      	ldr	r1, [pc, #188]	; (2028 <STACK_SIZE+0x28>)
    1f6a:	4830      	ldr	r0, [pc, #192]	; (202c <STACK_SIZE+0x2c>)
    1f6c:	4c30      	ldr	r4, [pc, #192]	; (2030 <STACK_SIZE+0x30>)
    1f6e:	47a0      	blx	r4
    1f70:	ab07      	add	r3, sp, #28
    1f72:	7859      	ldrb	r1, [r3, #1]
    1f74:	4839      	ldr	r0, [pc, #228]	; (205c <STACK_SIZE+0x5c>)
    1f76:	47a0      	blx	r4
    1f78:	200d      	movs	r0, #13
    1f7a:	4b30      	ldr	r3, [pc, #192]	; (203c <STACK_SIZE+0x3c>)
    1f7c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1f7e:	200c      	movs	r0, #12
    1f80:	4240      	negs	r0, r0
			goto ERR1;
    1f82:	e780      	b.n	1e86 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    1f84:	4a36      	ldr	r2, [pc, #216]	; (2060 <STACK_SIZE+0x60>)
    1f86:	4928      	ldr	r1, [pc, #160]	; (2028 <STACK_SIZE+0x28>)
    1f88:	4828      	ldr	r0, [pc, #160]	; (202c <STACK_SIZE+0x2c>)
    1f8a:	4c29      	ldr	r4, [pc, #164]	; (2030 <STACK_SIZE+0x30>)
    1f8c:	47a0      	blx	r4
    1f8e:	ab07      	add	r3, sp, #28
    1f90:	7819      	ldrb	r1, [r3, #0]
    1f92:	4834      	ldr	r0, [pc, #208]	; (2064 <STACK_SIZE+0x64>)
    1f94:	47a0      	blx	r4
    1f96:	200d      	movs	r0, #13
    1f98:	4b28      	ldr	r3, [pc, #160]	; (203c <STACK_SIZE+0x3c>)
    1f9a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1f9c:	200c      	movs	r0, #12
    1f9e:	4240      	negs	r0, r0
			goto ERR1;
    1fa0:	e771      	b.n	1e86 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    1fa2:	1cb9      	adds	r1, r7, #2
    1fa4:	2016      	movs	r0, #22
    1fa6:	ab02      	add	r3, sp, #8
    1fa8:	469c      	mov	ip, r3
    1faa:	4460      	add	r0, ip
    1fac:	4b1b      	ldr	r3, [pc, #108]	; (201c <STACK_SIZE+0x1c>)
    1fae:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    1fb0:	787b      	ldrb	r3, [r7, #1]
    1fb2:	aa07      	add	r2, sp, #28
    1fb4:	4694      	mov	ip, r2
    1fb6:	4463      	add	r3, ip
    1fb8:	2200      	movs	r2, #0
    1fba:	709a      	strb	r2, [r3, #2]
    1fbc:	e759      	b.n	1e72 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    1fbe:	0038      	movs	r0, r7
    1fc0:	4b1f      	ldr	r3, [pc, #124]	; (2040 <STACK_SIZE+0x40>)
    1fc2:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    1fc4:	1e43      	subs	r3, r0, #1
    1fc6:	b29b      	uxth	r3, r3
    1fc8:	2b3f      	cmp	r3, #63	; 0x3f
    1fca:	d805      	bhi.n	1fd8 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    1fcc:	1c42      	adds	r2, r0, #1
    1fce:	0039      	movs	r1, r7
    1fd0:	a807      	add	r0, sp, #28
    1fd2:	4b12      	ldr	r3, [pc, #72]	; (201c <STACK_SIZE+0x1c>)
    1fd4:	4798      	blx	r3
    1fd6:	e74c      	b.n	1e72 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    1fd8:	4a23      	ldr	r2, [pc, #140]	; (2068 <STACK_SIZE+0x68>)
    1fda:	4913      	ldr	r1, [pc, #76]	; (2028 <STACK_SIZE+0x28>)
    1fdc:	4813      	ldr	r0, [pc, #76]	; (202c <STACK_SIZE+0x2c>)
    1fde:	4b14      	ldr	r3, [pc, #80]	; (2030 <STACK_SIZE+0x30>)
    1fe0:	4798      	blx	r3
    1fe2:	4822      	ldr	r0, [pc, #136]	; (206c <STACK_SIZE+0x6c>)
    1fe4:	4b14      	ldr	r3, [pc, #80]	; (2038 <STACK_SIZE+0x38>)
    1fe6:	4798      	blx	r3
    1fe8:	200d      	movs	r0, #13
    1fea:	4b14      	ldr	r3, [pc, #80]	; (203c <STACK_SIZE+0x3c>)
    1fec:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1fee:	200c      	movs	r0, #12
    1ff0:	4240      	negs	r0, r0
			goto ERR1;
    1ff2:	e748      	b.n	1e86 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    1ff4:	223e      	movs	r2, #62	; 0x3e
    1ff6:	0039      	movs	r1, r7
    1ff8:	a807      	add	r0, sp, #28
    1ffa:	4b08      	ldr	r3, [pc, #32]	; (201c <STACK_SIZE+0x1c>)
    1ffc:	4798      	blx	r3
    1ffe:	e738      	b.n	1e72 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    2000:	4a1b      	ldr	r2, [pc, #108]	; (2070 <STACK_SIZE+0x70>)
    2002:	4909      	ldr	r1, [pc, #36]	; (2028 <STACK_SIZE+0x28>)
    2004:	4809      	ldr	r0, [pc, #36]	; (202c <STACK_SIZE+0x2c>)
    2006:	4b0a      	ldr	r3, [pc, #40]	; (2030 <STACK_SIZE+0x30>)
    2008:	4798      	blx	r3
    200a:	481a      	ldr	r0, [pc, #104]	; (2074 <STACK_SIZE+0x74>)
    200c:	4b0a      	ldr	r3, [pc, #40]	; (2038 <STACK_SIZE+0x38>)
    200e:	4798      	blx	r3
    2010:	200d      	movs	r0, #13
    2012:	4b0a      	ldr	r3, [pc, #40]	; (203c <STACK_SIZE+0x3c>)
    2014:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2016:	200c      	movs	r0, #12
    2018:	4240      	negs	r0, r0
		goto ERR1;
    201a:	e734      	b.n	1e86 <m2m_wifi_connect_sc+0x9e>
    201c:	00001121 	.word	0x00001121
    2020:	00001249 	.word	0x00001249
    2024:	00000215 	.word	0x00000215
    2028:	000098c8 	.word	0x000098c8
    202c:	00009544 	.word	0x00009544
    2030:	00007eed 	.word	0x00007eed
    2034:	00009910 	.word	0x00009910
    2038:	00008009 	.word	0x00008009
    203c:	00007f21 	.word	0x00007f21
    2040:	00001145 	.word	0x00001145
    2044:	00000221 	.word	0x00000221
    2048:	00009924 	.word	0x00009924
    204c:	0000022b 	.word	0x0000022b
    2050:	00009930 	.word	0x00009930
    2054:	00009944 	.word	0x00009944
    2058:	00000252 	.word	0x00000252
    205c:	0000996c 	.word	0x0000996c
    2060:	0000024b 	.word	0x0000024b
    2064:	00009950 	.word	0x00009950
    2068:	00000261 	.word	0x00000261
    206c:	00009988 	.word	0x00009988
    2070:	00000271 	.word	0x00000271
    2074:	000099a4 	.word	0x000099a4

00002078 <m2m_wifi_connect>:
{
    2078:	b530      	push	{r4, r5, lr}
    207a:	b083      	sub	sp, #12
    207c:	ac06      	add	r4, sp, #24
    207e:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    2080:	2500      	movs	r5, #0
    2082:	9501      	str	r5, [sp, #4]
    2084:	9400      	str	r4, [sp, #0]
    2086:	4c02      	ldr	r4, [pc, #8]	; (2090 <m2m_wifi_connect+0x18>)
    2088:	47a0      	blx	r4
}
    208a:	b003      	add	sp, #12
    208c:	bd30      	pop	{r4, r5, pc}
    208e:	46c0      	nop			; (mov r8, r8)
    2090:	00001de9 	.word	0x00001de9

00002094 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    2094:	2000      	movs	r0, #0
    2096:	4770      	bx	lr

00002098 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    2098:	b5f0      	push	{r4, r5, r6, r7, lr}
    209a:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    209c:	2580      	movs	r5, #128	; 0x80
    209e:	006d      	lsls	r5, r5, #1
    20a0:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    20a2:	24a5      	movs	r4, #165	; 0xa5
    20a4:	0164      	lsls	r4, r4, #5
    20a6:	4f08      	ldr	r7, [pc, #32]	; (20c8 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    20a8:	4e08      	ldr	r6, [pc, #32]	; (20cc <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    20aa:	0029      	movs	r1, r5
    20ac:	0020      	movs	r0, r4
    20ae:	47b8      	blx	r7
			uint32 reg = 0;
    20b0:	2300      	movs	r3, #0
    20b2:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    20b4:	a901      	add	r1, sp, #4
    20b6:	0020      	movs	r0, r4
    20b8:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    20ba:	2800      	cmp	r0, #0
    20bc:	d1f5      	bne.n	20aa <chip_apply_conf+0x12>
				if(reg == val32)
    20be:	9b01      	ldr	r3, [sp, #4]
    20c0:	429d      	cmp	r5, r3
    20c2:	d1f2      	bne.n	20aa <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    20c4:	b003      	add	sp, #12
    20c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20c8:	00002589 	.word	0x00002589
    20cc:	0000257d 	.word	0x0000257d

000020d0 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    20d0:	b500      	push	{lr}
    20d2:	b083      	sub	sp, #12
	uint32 reg = 0;
    20d4:	2300      	movs	r3, #0
    20d6:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    20d8:	a901      	add	r1, sp, #4
    20da:	4811      	ldr	r0, [pc, #68]	; (2120 <enable_interrupts+0x50>)
    20dc:	4b11      	ldr	r3, [pc, #68]	; (2124 <enable_interrupts+0x54>)
    20de:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    20e0:	2800      	cmp	r0, #0
    20e2:	d001      	beq.n	20e8 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    20e4:	b003      	add	sp, #12
    20e6:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    20e8:	2180      	movs	r1, #128	; 0x80
    20ea:	0049      	lsls	r1, r1, #1
    20ec:	9b01      	ldr	r3, [sp, #4]
    20ee:	4319      	orrs	r1, r3
    20f0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    20f2:	480b      	ldr	r0, [pc, #44]	; (2120 <enable_interrupts+0x50>)
    20f4:	4b0c      	ldr	r3, [pc, #48]	; (2128 <enable_interrupts+0x58>)
    20f6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    20f8:	2800      	cmp	r0, #0
    20fa:	d1f3      	bne.n	20e4 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    20fc:	a901      	add	r1, sp, #4
    20fe:	20d0      	movs	r0, #208	; 0xd0
    2100:	0140      	lsls	r0, r0, #5
    2102:	4b08      	ldr	r3, [pc, #32]	; (2124 <enable_interrupts+0x54>)
    2104:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2106:	2800      	cmp	r0, #0
    2108:	d1ec      	bne.n	20e4 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    210a:	2180      	movs	r1, #128	; 0x80
    210c:	0249      	lsls	r1, r1, #9
    210e:	9b01      	ldr	r3, [sp, #4]
    2110:	4319      	orrs	r1, r3
    2112:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    2114:	20d0      	movs	r0, #208	; 0xd0
    2116:	0140      	lsls	r0, r0, #5
    2118:	4b03      	ldr	r3, [pc, #12]	; (2128 <enable_interrupts+0x58>)
    211a:	4798      	blx	r3
    211c:	e7e2      	b.n	20e4 <enable_interrupts+0x14>
    211e:	46c0      	nop			; (mov r8, r8)
    2120:	00001408 	.word	0x00001408
    2124:	0000257d 	.word	0x0000257d
    2128:	00002589 	.word	0x00002589

0000212c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    212c:	b510      	push	{r4, lr}
    212e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    2130:	4b28      	ldr	r3, [pc, #160]	; (21d4 <nmi_get_chipid+0xa8>)
    2132:	681c      	ldr	r4, [r3, #0]
    2134:	2c00      	cmp	r4, #0
    2136:	d004      	beq.n	2142 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    2138:	4b26      	ldr	r3, [pc, #152]	; (21d4 <nmi_get_chipid+0xa8>)
    213a:	681c      	ldr	r4, [r3, #0]
}
    213c:	0020      	movs	r0, r4
    213e:	b002      	add	sp, #8
    2140:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    2142:	0019      	movs	r1, r3
    2144:	2080      	movs	r0, #128	; 0x80
    2146:	0140      	lsls	r0, r0, #5
    2148:	4b23      	ldr	r3, [pc, #140]	; (21d8 <nmi_get_chipid+0xac>)
    214a:	4798      	blx	r3
    214c:	2800      	cmp	r0, #0
    214e:	d003      	beq.n	2158 <nmi_get_chipid+0x2c>
			chipid = 0;
    2150:	2200      	movs	r2, #0
    2152:	4b20      	ldr	r3, [pc, #128]	; (21d4 <nmi_get_chipid+0xa8>)
    2154:	601a      	str	r2, [r3, #0]
			return 0;
    2156:	e7f1      	b.n	213c <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    2158:	a901      	add	r1, sp, #4
    215a:	4820      	ldr	r0, [pc, #128]	; (21dc <nmi_get_chipid+0xb0>)
    215c:	4b1e      	ldr	r3, [pc, #120]	; (21d8 <nmi_get_chipid+0xac>)
    215e:	4798      	blx	r3
    2160:	2800      	cmp	r0, #0
    2162:	d003      	beq.n	216c <nmi_get_chipid+0x40>
			chipid = 0;
    2164:	2200      	movs	r2, #0
    2166:	4b1b      	ldr	r3, [pc, #108]	; (21d4 <nmi_get_chipid+0xa8>)
    2168:	601a      	str	r2, [r3, #0]
			return 0;
    216a:	e7e7      	b.n	213c <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    216c:	4b19      	ldr	r3, [pc, #100]	; (21d4 <nmi_get_chipid+0xa8>)
    216e:	681b      	ldr	r3, [r3, #0]
    2170:	4a1b      	ldr	r2, [pc, #108]	; (21e0 <nmi_get_chipid+0xb4>)
    2172:	4293      	cmp	r3, r2
    2174:	d00e      	beq.n	2194 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    2176:	4a1b      	ldr	r2, [pc, #108]	; (21e4 <nmi_get_chipid+0xb8>)
    2178:	4293      	cmp	r3, r2
    217a:	d012      	beq.n	21a2 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    217c:	4a1a      	ldr	r2, [pc, #104]	; (21e8 <nmi_get_chipid+0xbc>)
    217e:	4293      	cmp	r3, r2
    2180:	d01c      	beq.n	21bc <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    2182:	4914      	ldr	r1, [pc, #80]	; (21d4 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    2184:	4a19      	ldr	r2, [pc, #100]	; (21ec <nmi_get_chipid+0xc0>)
    2186:	680b      	ldr	r3, [r1, #0]
    2188:	401a      	ands	r2, r3
		chipid |= 0x050000;
    218a:	23a0      	movs	r3, #160	; 0xa0
    218c:	02db      	lsls	r3, r3, #11
    218e:	4313      	orrs	r3, r2
    2190:	600b      	str	r3, [r1, #0]
    2192:	e7d1      	b.n	2138 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    2194:	9b01      	ldr	r3, [sp, #4]
    2196:	2b01      	cmp	r3, #1
    2198:	d0f3      	beq.n	2182 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    219a:	4a15      	ldr	r2, [pc, #84]	; (21f0 <nmi_get_chipid+0xc4>)
    219c:	4b0d      	ldr	r3, [pc, #52]	; (21d4 <nmi_get_chipid+0xa8>)
    219e:	601a      	str	r2, [r3, #0]
    21a0:	e7ef      	b.n	2182 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    21a2:	9b01      	ldr	r3, [sp, #4]
    21a4:	2b03      	cmp	r3, #3
    21a6:	d0ec      	beq.n	2182 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    21a8:	2b04      	cmp	r3, #4
    21aa:	d003      	beq.n	21b4 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    21ac:	4a11      	ldr	r2, [pc, #68]	; (21f4 <nmi_get_chipid+0xc8>)
    21ae:	4b09      	ldr	r3, [pc, #36]	; (21d4 <nmi_get_chipid+0xa8>)
    21b0:	601a      	str	r2, [r3, #0]
    21b2:	e7e6      	b.n	2182 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    21b4:	4a10      	ldr	r2, [pc, #64]	; (21f8 <nmi_get_chipid+0xcc>)
    21b6:	4b07      	ldr	r3, [pc, #28]	; (21d4 <nmi_get_chipid+0xa8>)
    21b8:	601a      	str	r2, [r3, #0]
    21ba:	e7e2      	b.n	2182 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    21bc:	4905      	ldr	r1, [pc, #20]	; (21d4 <nmi_get_chipid+0xa8>)
    21be:	20ec      	movs	r0, #236	; 0xec
    21c0:	0380      	lsls	r0, r0, #14
    21c2:	4b05      	ldr	r3, [pc, #20]	; (21d8 <nmi_get_chipid+0xac>)
    21c4:	4798      	blx	r3
    21c6:	2800      	cmp	r0, #0
    21c8:	d0db      	beq.n	2182 <nmi_get_chipid+0x56>
			chipid = 0;
    21ca:	2200      	movs	r2, #0
    21cc:	4b01      	ldr	r3, [pc, #4]	; (21d4 <nmi_get_chipid+0xa8>)
    21ce:	601a      	str	r2, [r3, #0]
			return 0;
    21d0:	e7b4      	b.n	213c <nmi_get_chipid+0x10>
    21d2:	46c0      	nop			; (mov r8, r8)
    21d4:	20000208 	.word	0x20000208
    21d8:	0000257d 	.word	0x0000257d
    21dc:	000013f4 	.word	0x000013f4
    21e0:	001002a0 	.word	0x001002a0
    21e4:	001002b0 	.word	0x001002b0
    21e8:	001000f0 	.word	0x001000f0
    21ec:	fff0ffff 	.word	0xfff0ffff
    21f0:	001002a1 	.word	0x001002a1
    21f4:	001002b2 	.word	0x001002b2
    21f8:	001002b1 	.word	0x001002b1

000021fc <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    21fc:	b530      	push	{r4, r5, lr}
    21fe:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2200:	4c16      	ldr	r4, [pc, #88]	; (225c <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    2202:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2204:	a901      	add	r1, sp, #4
    2206:	2010      	movs	r0, #16
    2208:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    220a:	2800      	cmp	r0, #0
    220c:	d11c      	bne.n	2248 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    220e:	9b01      	ldr	r3, [sp, #4]
    2210:	422b      	tst	r3, r5
    2212:	d1f7      	bne.n	2204 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2214:	a901      	add	r1, sp, #4
    2216:	3001      	adds	r0, #1
    2218:	4b10      	ldr	r3, [pc, #64]	; (225c <chip_sleep+0x60>)
    221a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    221c:	2800      	cmp	r0, #0
    221e:	d113      	bne.n	2248 <chip_sleep+0x4c>
	if(reg & NBIT1)
    2220:	9901      	ldr	r1, [sp, #4]
    2222:	078b      	lsls	r3, r1, #30
    2224:	d507      	bpl.n	2236 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    2226:	2302      	movs	r3, #2
    2228:	4399      	bics	r1, r3
    222a:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    222c:	3001      	adds	r0, #1
    222e:	4b0c      	ldr	r3, [pc, #48]	; (2260 <chip_sleep+0x64>)
    2230:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    2232:	2800      	cmp	r0, #0
    2234:	d108      	bne.n	2248 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2236:	a901      	add	r1, sp, #4
    2238:	200b      	movs	r0, #11
    223a:	4b08      	ldr	r3, [pc, #32]	; (225c <chip_sleep+0x60>)
    223c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    223e:	2800      	cmp	r0, #0
    2240:	d102      	bne.n	2248 <chip_sleep+0x4c>
	if(reg & NBIT0)
    2242:	9901      	ldr	r1, [sp, #4]
    2244:	07cb      	lsls	r3, r1, #31
    2246:	d401      	bmi.n	224c <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    2248:	b003      	add	sp, #12
    224a:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    224c:	2301      	movs	r3, #1
    224e:	4399      	bics	r1, r3
    2250:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    2252:	300b      	adds	r0, #11
    2254:	4b02      	ldr	r3, [pc, #8]	; (2260 <chip_sleep+0x64>)
    2256:	4798      	blx	r3
    2258:	e7f6      	b.n	2248 <chip_sleep+0x4c>
    225a:	46c0      	nop			; (mov r8, r8)
    225c:	0000257d 	.word	0x0000257d
    2260:	00002589 	.word	0x00002589

00002264 <chip_wake>:
sint8 chip_wake(void)
{
    2264:	b5f0      	push	{r4, r5, r6, r7, lr}
    2266:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    2268:	2300      	movs	r3, #0
    226a:	9301      	str	r3, [sp, #4]
    226c:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    226e:	a901      	add	r1, sp, #4
    2270:	200b      	movs	r0, #11
    2272:	4b28      	ldr	r3, [pc, #160]	; (2314 <chip_wake+0xb0>)
    2274:	4798      	blx	r3
    2276:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2278:	d130      	bne.n	22dc <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    227a:	9901      	ldr	r1, [sp, #4]
    227c:	07cb      	lsls	r3, r1, #31
    227e:	d406      	bmi.n	228e <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    2280:	2301      	movs	r3, #1
    2282:	4319      	orrs	r1, r3
    2284:	200b      	movs	r0, #11
    2286:	4b24      	ldr	r3, [pc, #144]	; (2318 <chip_wake+0xb4>)
    2288:	4798      	blx	r3
    228a:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    228c:	d126      	bne.n	22dc <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    228e:	a901      	add	r1, sp, #4
    2290:	2001      	movs	r0, #1
    2292:	4b20      	ldr	r3, [pc, #128]	; (2314 <chip_wake+0xb0>)
    2294:	4798      	blx	r3
    2296:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2298:	d120      	bne.n	22dc <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    229a:	9901      	ldr	r1, [sp, #4]
    229c:	078b      	lsls	r3, r1, #30
    229e:	d520      	bpl.n	22e2 <chip_wake+0x7e>
{
    22a0:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    22a2:	4f1c      	ldr	r7, [pc, #112]	; (2314 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    22a4:	4e1d      	ldr	r6, [pc, #116]	; (231c <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    22a6:	4669      	mov	r1, sp
    22a8:	200f      	movs	r0, #15
    22aa:	47b8      	blx	r7
    22ac:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    22ae:	d120      	bne.n	22f2 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    22b0:	9b00      	ldr	r3, [sp, #0]
    22b2:	075b      	lsls	r3, r3, #29
    22b4:	d42b      	bmi.n	230e <chip_wake+0xaa>
		nm_bsp_sleep(2);
    22b6:	2002      	movs	r0, #2
    22b8:	47b0      	blx	r6
    22ba:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    22bc:	2d00      	cmp	r5, #0
    22be:	d1f2      	bne.n	22a6 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    22c0:	22af      	movs	r2, #175	; 0xaf
    22c2:	0052      	lsls	r2, r2, #1
    22c4:	4916      	ldr	r1, [pc, #88]	; (2320 <chip_wake+0xbc>)
    22c6:	4817      	ldr	r0, [pc, #92]	; (2324 <chip_wake+0xc0>)
    22c8:	4b17      	ldr	r3, [pc, #92]	; (2328 <chip_wake+0xc4>)
    22ca:	4798      	blx	r3
    22cc:	4817      	ldr	r0, [pc, #92]	; (232c <chip_wake+0xc8>)
    22ce:	4b18      	ldr	r3, [pc, #96]	; (2330 <chip_wake+0xcc>)
    22d0:	4798      	blx	r3
    22d2:	200d      	movs	r0, #13
    22d4:	4b17      	ldr	r3, [pc, #92]	; (2334 <chip_wake+0xd0>)
    22d6:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    22d8:	2404      	movs	r4, #4
    22da:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    22dc:	0020      	movs	r0, r4
    22de:	b003      	add	sp, #12
    22e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    22e2:	2302      	movs	r3, #2
    22e4:	4319      	orrs	r1, r3
    22e6:	2001      	movs	r0, #1
    22e8:	4b0b      	ldr	r3, [pc, #44]	; (2318 <chip_wake+0xb4>)
    22ea:	4798      	blx	r3
    22ec:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    22ee:	d0d7      	beq.n	22a0 <chip_wake+0x3c>
    22f0:	e7f4      	b.n	22dc <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    22f2:	22aa      	movs	r2, #170	; 0xaa
    22f4:	0052      	lsls	r2, r2, #1
    22f6:	490a      	ldr	r1, [pc, #40]	; (2320 <chip_wake+0xbc>)
    22f8:	480a      	ldr	r0, [pc, #40]	; (2324 <chip_wake+0xc0>)
    22fa:	4d0b      	ldr	r5, [pc, #44]	; (2328 <chip_wake+0xc4>)
    22fc:	47a8      	blx	r5
    22fe:	9a00      	ldr	r2, [sp, #0]
    2300:	0021      	movs	r1, r4
    2302:	480d      	ldr	r0, [pc, #52]	; (2338 <chip_wake+0xd4>)
    2304:	47a8      	blx	r5
    2306:	200d      	movs	r0, #13
    2308:	4b0a      	ldr	r3, [pc, #40]	; (2334 <chip_wake+0xd0>)
    230a:	4798      	blx	r3
			goto _WAKE_EXIT;
    230c:	e7e6      	b.n	22dc <chip_wake+0x78>
	nm_bus_reset();
    230e:	4b0b      	ldr	r3, [pc, #44]	; (233c <chip_wake+0xd8>)
    2310:	4798      	blx	r3
    2312:	e7e3      	b.n	22dc <chip_wake+0x78>
    2314:	0000257d 	.word	0x0000257d
    2318:	00002589 	.word	0x00002589
    231c:	00000d29 	.word	0x00000d29
    2320:	00009a84 	.word	0x00009a84
    2324:	00009544 	.word	0x00009544
    2328:	00007eed 	.word	0x00007eed
    232c:	00009acc 	.word	0x00009acc
    2330:	00008009 	.word	0x00008009
    2334:	00007f21 	.word	0x00007f21
    2338:	00009ab4 	.word	0x00009ab4
    233c:	00002565 	.word	0x00002565

00002340 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    2340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2342:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2344:	4d2d      	ldr	r5, [pc, #180]	; (23fc <wait_for_bootrom+0xbc>)
    2346:	4c2e      	ldr	r4, [pc, #184]	; (2400 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2348:	4e2e      	ldr	r6, [pc, #184]	; (2404 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    234a:	0028      	movs	r0, r5
    234c:	47a0      	blx	r4
		if (reg & 0x80000000) {
    234e:	2800      	cmp	r0, #0
    2350:	db02      	blt.n	2358 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2352:	2001      	movs	r0, #1
    2354:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2356:	e7f8      	b.n	234a <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    2358:	482b      	ldr	r0, [pc, #172]	; (2408 <wait_for_bootrom+0xc8>)
    235a:	4b29      	ldr	r3, [pc, #164]	; (2400 <wait_for_bootrom+0xc0>)
    235c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    235e:	07c3      	lsls	r3, r0, #31
    2360:	d409      	bmi.n	2376 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    2362:	4e28      	ldr	r6, [pc, #160]	; (2404 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    2364:	4c29      	ldr	r4, [pc, #164]	; (240c <wait_for_bootrom+0xcc>)
    2366:	4d26      	ldr	r5, [pc, #152]	; (2400 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    2368:	2001      	movs	r0, #1
    236a:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    236c:	0020      	movs	r0, r4
    236e:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    2370:	4b27      	ldr	r3, [pc, #156]	; (2410 <wait_for_bootrom+0xd0>)
    2372:	4298      	cmp	r0, r3
    2374:	d1f8      	bne.n	2368 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    2376:	2f02      	cmp	r7, #2
    2378:	d021      	beq.n	23be <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    237a:	2f03      	cmp	r7, #3
    237c:	d029      	beq.n	23d2 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    237e:	2f04      	cmp	r7, #4
    2380:	d030      	beq.n	23e4 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2382:	4924      	ldr	r1, [pc, #144]	; (2414 <wait_for_bootrom+0xd4>)
    2384:	4824      	ldr	r0, [pc, #144]	; (2418 <wait_for_bootrom+0xd8>)
    2386:	4b25      	ldr	r3, [pc, #148]	; (241c <wait_for_bootrom+0xdc>)
    2388:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    238a:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    238c:	4b24      	ldr	r3, [pc, #144]	; (2420 <wait_for_bootrom+0xe0>)
    238e:	4798      	blx	r3
    2390:	0500      	lsls	r0, r0, #20
    2392:	0d00      	lsrs	r0, r0, #20
    2394:	4b23      	ldr	r3, [pc, #140]	; (2424 <wait_for_bootrom+0xe4>)
    2396:	4298      	cmp	r0, r3
    2398:	d82a      	bhi.n	23f0 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    239a:	0020      	movs	r0, r4
    239c:	4b22      	ldr	r3, [pc, #136]	; (2428 <wait_for_bootrom+0xe8>)
    239e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    23a0:	4822      	ldr	r0, [pc, #136]	; (242c <wait_for_bootrom+0xec>)
    23a2:	4c23      	ldr	r4, [pc, #140]	; (2430 <wait_for_bootrom+0xf0>)
    23a4:	47a0      	blx	r4
    23a6:	491b      	ldr	r1, [pc, #108]	; (2414 <wait_for_bootrom+0xd4>)
    23a8:	4822      	ldr	r0, [pc, #136]	; (2434 <wait_for_bootrom+0xf4>)
    23aa:	47a0      	blx	r4
    23ac:	200d      	movs	r0, #13
    23ae:	4b22      	ldr	r3, [pc, #136]	; (2438 <wait_for_bootrom+0xf8>)
    23b0:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    23b2:	4922      	ldr	r1, [pc, #136]	; (243c <wait_for_bootrom+0xfc>)
    23b4:	4815      	ldr	r0, [pc, #84]	; (240c <wait_for_bootrom+0xcc>)
    23b6:	4b19      	ldr	r3, [pc, #100]	; (241c <wait_for_bootrom+0xdc>)
    23b8:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    23ba:	2000      	movs	r0, #0
    23bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    23be:	4920      	ldr	r1, [pc, #128]	; (2440 <wait_for_bootrom+0x100>)
    23c0:	4820      	ldr	r0, [pc, #128]	; (2444 <wait_for_bootrom+0x104>)
    23c2:	4c16      	ldr	r4, [pc, #88]	; (241c <wait_for_bootrom+0xdc>)
    23c4:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    23c6:	2180      	movs	r1, #128	; 0x80
    23c8:	0349      	lsls	r1, r1, #13
    23ca:	4813      	ldr	r0, [pc, #76]	; (2418 <wait_for_bootrom+0xd8>)
    23cc:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    23ce:	2400      	movs	r4, #0
    23d0:	e7dc      	b.n	238c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    23d2:	491b      	ldr	r1, [pc, #108]	; (2440 <wait_for_bootrom+0x100>)
    23d4:	481b      	ldr	r0, [pc, #108]	; (2444 <wait_for_bootrom+0x104>)
    23d6:	4c11      	ldr	r4, [pc, #68]	; (241c <wait_for_bootrom+0xdc>)
    23d8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    23da:	2100      	movs	r1, #0
    23dc:	480e      	ldr	r0, [pc, #56]	; (2418 <wait_for_bootrom+0xd8>)
    23de:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    23e0:	2400      	movs	r4, #0
    23e2:	e7d3      	b.n	238c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    23e4:	490b      	ldr	r1, [pc, #44]	; (2414 <wait_for_bootrom+0xd4>)
    23e6:	480c      	ldr	r0, [pc, #48]	; (2418 <wait_for_bootrom+0xd8>)
    23e8:	4b0c      	ldr	r3, [pc, #48]	; (241c <wait_for_bootrom+0xdc>)
    23ea:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    23ec:	2480      	movs	r4, #128	; 0x80
    23ee:	e7cd      	b.n	238c <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    23f0:	2002      	movs	r0, #2
    23f2:	4320      	orrs	r0, r4
    23f4:	4b0c      	ldr	r3, [pc, #48]	; (2428 <wait_for_bootrom+0xe8>)
    23f6:	4798      	blx	r3
    23f8:	e7d2      	b.n	23a0 <wait_for_bootrom+0x60>
    23fa:	46c0      	nop			; (mov r8, r8)
    23fc:	00001014 	.word	0x00001014
    2400:	00002571 	.word	0x00002571
    2404:	00000d29 	.word	0x00000d29
    2408:	000207bc 	.word	0x000207bc
    240c:	000c000c 	.word	0x000c000c
    2410:	10add09e 	.word	0x10add09e
    2414:	13521352 	.word	0x13521352
    2418:	0000108c 	.word	0x0000108c
    241c:	00002589 	.word	0x00002589
    2420:	0000212d 	.word	0x0000212d
    2424:	0000039f 	.word	0x0000039f
    2428:	00002099 	.word	0x00002099
    242c:	00009874 	.word	0x00009874
    2430:	00007eed 	.word	0x00007eed
    2434:	00009ae8 	.word	0x00009ae8
    2438:	00007f21 	.word	0x00007f21
    243c:	ef522f61 	.word	0xef522f61
    2440:	3c1cd57d 	.word	0x3c1cd57d
    2444:	000207ac 	.word	0x000207ac

00002448 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2448:	b570      	push	{r4, r5, r6, lr}
    244a:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    244c:	4b15      	ldr	r3, [pc, #84]	; (24a4 <wait_for_firmware_start+0x5c>)
    244e:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2450:	4b15      	ldr	r3, [pc, #84]	; (24a8 <wait_for_firmware_start+0x60>)
    2452:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2454:	3802      	subs	r0, #2
    2456:	2801      	cmp	r0, #1
    2458:	d911      	bls.n	247e <wait_for_firmware_start+0x36>
{
    245a:	2401      	movs	r4, #1
    245c:	4264      	negs	r4, r4
    245e:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2460:	4e12      	ldr	r6, [pc, #72]	; (24ac <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    2462:	4d13      	ldr	r5, [pc, #76]	; (24b0 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    2464:	9b00      	ldr	r3, [sp, #0]
    2466:	4298      	cmp	r0, r3
    2468:	d00e      	beq.n	2488 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    246a:	2002      	movs	r0, #2
    246c:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    246e:	9801      	ldr	r0, [sp, #4]
    2470:	47a8      	blx	r5
    2472:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    2474:	2c00      	cmp	r4, #0
    2476:	d1f5      	bne.n	2464 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    2478:	2005      	movs	r0, #5
    247a:	4240      	negs	r0, r0
    247c:	e009      	b.n	2492 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    247e:	4b0d      	ldr	r3, [pc, #52]	; (24b4 <wait_for_firmware_start+0x6c>)
    2480:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    2482:	4b0d      	ldr	r3, [pc, #52]	; (24b8 <wait_for_firmware_start+0x70>)
    2484:	9300      	str	r3, [sp, #0]
    2486:	e7e8      	b.n	245a <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    2488:	9a00      	ldr	r2, [sp, #0]
    248a:	4b07      	ldr	r3, [pc, #28]	; (24a8 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    248c:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    248e:	429a      	cmp	r2, r3
    2490:	d001      	beq.n	2496 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    2492:	b002      	add	sp, #8
    2494:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    2496:	2100      	movs	r1, #0
    2498:	4802      	ldr	r0, [pc, #8]	; (24a4 <wait_for_firmware_start+0x5c>)
    249a:	4b08      	ldr	r3, [pc, #32]	; (24bc <wait_for_firmware_start+0x74>)
    249c:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    249e:	2000      	movs	r0, #0
    24a0:	e7f7      	b.n	2492 <wait_for_firmware_start+0x4a>
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	0000108c 	.word	0x0000108c
    24a8:	02532636 	.word	0x02532636
    24ac:	00000d29 	.word	0x00000d29
    24b0:	00002571 	.word	0x00002571
    24b4:	000207ac 	.word	0x000207ac
    24b8:	d75dc1c3 	.word	0xd75dc1c3
    24bc:	00002589 	.word	0x00002589

000024c0 <chip_deinit>:

sint8 chip_deinit(void)
{
    24c0:	b510      	push	{r4, lr}
    24c2:	b082      	sub	sp, #8
	uint32 reg = 0;
    24c4:	2300      	movs	r3, #0
    24c6:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    24c8:	a901      	add	r1, sp, #4
    24ca:	20a0      	movs	r0, #160	; 0xa0
    24cc:	0140      	lsls	r0, r0, #5
    24ce:	4b14      	ldr	r3, [pc, #80]	; (2520 <chip_deinit+0x60>)
    24d0:	4798      	blx	r3
    24d2:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    24d4:	d115      	bne.n	2502 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    24d6:	4913      	ldr	r1, [pc, #76]	; (2524 <chip_deinit+0x64>)
    24d8:	9b01      	ldr	r3, [sp, #4]
    24da:	4019      	ands	r1, r3
    24dc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    24de:	20a0      	movs	r0, #160	; 0xa0
    24e0:	0140      	lsls	r0, r0, #5
    24e2:	4b11      	ldr	r3, [pc, #68]	; (2528 <chip_deinit+0x68>)
    24e4:	4798      	blx	r3
    24e6:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    24e8:	d016      	beq.n	2518 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    24ea:	4a10      	ldr	r2, [pc, #64]	; (252c <chip_deinit+0x6c>)
    24ec:	4910      	ldr	r1, [pc, #64]	; (2530 <chip_deinit+0x70>)
    24ee:	4811      	ldr	r0, [pc, #68]	; (2534 <chip_deinit+0x74>)
    24f0:	4b11      	ldr	r3, [pc, #68]	; (2538 <chip_deinit+0x78>)
    24f2:	4798      	blx	r3
    24f4:	4811      	ldr	r0, [pc, #68]	; (253c <chip_deinit+0x7c>)
    24f6:	4b12      	ldr	r3, [pc, #72]	; (2540 <chip_deinit+0x80>)
    24f8:	4798      	blx	r3
    24fa:	200d      	movs	r0, #13
    24fc:	4b11      	ldr	r3, [pc, #68]	; (2544 <chip_deinit+0x84>)
    24fe:	4798      	blx	r3
		goto ERR1;
    2500:	e00a      	b.n	2518 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    2502:	4a11      	ldr	r2, [pc, #68]	; (2548 <chip_deinit+0x88>)
    2504:	490a      	ldr	r1, [pc, #40]	; (2530 <chip_deinit+0x70>)
    2506:	480b      	ldr	r0, [pc, #44]	; (2534 <chip_deinit+0x74>)
    2508:	4b0b      	ldr	r3, [pc, #44]	; (2538 <chip_deinit+0x78>)
    250a:	4798      	blx	r3
    250c:	480b      	ldr	r0, [pc, #44]	; (253c <chip_deinit+0x7c>)
    250e:	4b0c      	ldr	r3, [pc, #48]	; (2540 <chip_deinit+0x80>)
    2510:	4798      	blx	r3
    2512:	200d      	movs	r0, #13
    2514:	4b0b      	ldr	r3, [pc, #44]	; (2544 <chip_deinit+0x84>)
    2516:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    2518:	0020      	movs	r0, r4
    251a:	b002      	add	sp, #8
    251c:	bd10      	pop	{r4, pc}
    251e:	46c0      	nop			; (mov r8, r8)
    2520:	0000257d 	.word	0x0000257d
    2524:	fffffbff 	.word	0xfffffbff
    2528:	00002589 	.word	0x00002589
    252c:	0000020b 	.word	0x0000020b
    2530:	00009a90 	.word	0x00009a90
    2534:	00009544 	.word	0x00009544
    2538:	00007eed 	.word	0x00007eed
    253c:	00009a9c 	.word	0x00009a9c
    2540:	00008009 	.word	0x00008009
    2544:	00007f21 	.word	0x00007f21
    2548:	00000205 	.word	0x00000205

0000254c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    254c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    254e:	4b01      	ldr	r3, [pc, #4]	; (2554 <nm_bus_iface_init+0x8>)
    2550:	4798      	blx	r3
	return ret;
}
    2552:	bd10      	pop	{r4, pc}
    2554:	00000e65 	.word	0x00000e65

00002558 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2558:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    255a:	4b01      	ldr	r3, [pc, #4]	; (2560 <nm_bus_iface_deinit+0x8>)
    255c:	4798      	blx	r3

	return ret;
}
    255e:	bd10      	pop	{r4, pc}
    2560:	000010b5 	.word	0x000010b5

00002564 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2564:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    2566:	4b01      	ldr	r3, [pc, #4]	; (256c <nm_bus_reset+0x8>)
    2568:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    256a:	bd10      	pop	{r4, pc}
    256c:	00002f15 	.word	0x00002f15

00002570 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2570:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2572:	4b01      	ldr	r3, [pc, #4]	; (2578 <nm_read_reg+0x8>)
    2574:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2576:	bd10      	pop	{r4, pc}
    2578:	00002f4d 	.word	0x00002f4d

0000257c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    257c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    257e:	4b01      	ldr	r3, [pc, #4]	; (2584 <nm_read_reg_with_ret+0x8>)
    2580:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2582:	bd10      	pop	{r4, pc}
    2584:	00002f61 	.word	0x00002f61

00002588 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2588:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    258a:	4b01      	ldr	r3, [pc, #4]	; (2590 <nm_write_reg+0x8>)
    258c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    258e:	bd10      	pop	{r4, pc}
    2590:	00002f79 	.word	0x00002f79

00002594 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2594:	b5f0      	push	{r4, r5, r6, r7, lr}
    2596:	46d6      	mov	lr, sl
    2598:	464f      	mov	r7, r9
    259a:	4646      	mov	r6, r8
    259c:	b5c0      	push	{r6, r7, lr}
    259e:	b082      	sub	sp, #8
    25a0:	4680      	mov	r8, r0
    25a2:	4689      	mov	r9, r1
    25a4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    25a6:	4b13      	ldr	r3, [pc, #76]	; (25f4 <nm_read_block+0x60>)
    25a8:	881f      	ldrh	r7, [r3, #0]
    25aa:	3f08      	subs	r7, #8
    25ac:	b2bb      	uxth	r3, r7
    25ae:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    25b0:	001e      	movs	r6, r3
    25b2:	0004      	movs	r4, r0
    25b4:	429a      	cmp	r2, r3
    25b6:	d91a      	bls.n	25ee <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    25b8:	4b0f      	ldr	r3, [pc, #60]	; (25f8 <nm_read_block+0x64>)
    25ba:	469a      	mov	sl, r3
    25bc:	1a37      	subs	r7, r6, r0
    25be:	4643      	mov	r3, r8
    25c0:	1ae1      	subs	r1, r4, r3
    25c2:	4449      	add	r1, r9
    25c4:	9a01      	ldr	r2, [sp, #4]
    25c6:	0020      	movs	r0, r4
    25c8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    25ca:	2800      	cmp	r0, #0
    25cc:	d109      	bne.n	25e2 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    25ce:	1bad      	subs	r5, r5, r6
    25d0:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    25d2:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    25d4:	42b5      	cmp	r5, r6
    25d6:	d8f2      	bhi.n	25be <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    25d8:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    25da:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    25dc:	0020      	movs	r0, r4
    25de:	4b06      	ldr	r3, [pc, #24]	; (25f8 <nm_read_block+0x64>)
    25e0:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    25e2:	b002      	add	sp, #8
    25e4:	bc1c      	pop	{r2, r3, r4}
    25e6:	4690      	mov	r8, r2
    25e8:	4699      	mov	r9, r3
    25ea:	46a2      	mov	sl, r4
    25ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    25ee:	2100      	movs	r1, #0
    25f0:	e7f2      	b.n	25d8 <nm_read_block+0x44>
    25f2:	46c0      	nop			; (mov r8, r8)
    25f4:	20000008 	.word	0x20000008
    25f8:	000030bd 	.word	0x000030bd

000025fc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    25fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    25fe:	46d6      	mov	lr, sl
    2600:	464f      	mov	r7, r9
    2602:	4646      	mov	r6, r8
    2604:	b5c0      	push	{r6, r7, lr}
    2606:	b082      	sub	sp, #8
    2608:	4680      	mov	r8, r0
    260a:	4689      	mov	r9, r1
    260c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    260e:	4b13      	ldr	r3, [pc, #76]	; (265c <nm_write_block+0x60>)
    2610:	881f      	ldrh	r7, [r3, #0]
    2612:	3f08      	subs	r7, #8
    2614:	b2bb      	uxth	r3, r7
    2616:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2618:	001e      	movs	r6, r3
    261a:	0004      	movs	r4, r0
    261c:	429a      	cmp	r2, r3
    261e:	d91a      	bls.n	2656 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2620:	4b0f      	ldr	r3, [pc, #60]	; (2660 <nm_write_block+0x64>)
    2622:	469a      	mov	sl, r3
    2624:	1a37      	subs	r7, r6, r0
    2626:	4643      	mov	r3, r8
    2628:	1ae1      	subs	r1, r4, r3
    262a:	4449      	add	r1, r9
    262c:	9a01      	ldr	r2, [sp, #4]
    262e:	0020      	movs	r0, r4
    2630:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2632:	2800      	cmp	r0, #0
    2634:	d109      	bne.n	264a <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2636:	1bad      	subs	r5, r5, r6
    2638:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    263a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    263c:	42b5      	cmp	r5, r6
    263e:	d8f2      	bhi.n	2626 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2640:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2642:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2644:	0020      	movs	r0, r4
    2646:	4b06      	ldr	r3, [pc, #24]	; (2660 <nm_write_block+0x64>)
    2648:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    264a:	b002      	add	sp, #8
    264c:	bc1c      	pop	{r2, r3, r4}
    264e:	4690      	mov	r8, r2
    2650:	4699      	mov	r9, r3
    2652:	46a2      	mov	sl, r4
    2654:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2656:	2100      	movs	r1, #0
    2658:	e7f2      	b.n	2640 <nm_write_block+0x44>
    265a:	46c0      	nop			; (mov r8, r8)
    265c:	20000008 	.word	0x20000008
    2660:	00003219 	.word	0x00003219

00002664 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2664:	b570      	push	{r4, r5, r6, lr}
    2666:	b084      	sub	sp, #16
    2668:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    266a:	2300      	movs	r3, #0
    266c:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    266e:	2208      	movs	r2, #8
    2670:	2100      	movs	r1, #0
    2672:	a801      	add	r0, sp, #4
    2674:	4b2d      	ldr	r3, [pc, #180]	; (272c <nm_get_firmware_full_info+0xc8>)
    2676:	4798      	blx	r3
	if (pstrRev != NULL)
    2678:	2c00      	cmp	r4, #0
    267a:	d044      	beq.n	2706 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    267c:	2228      	movs	r2, #40	; 0x28
    267e:	2100      	movs	r1, #0
    2680:	0020      	movs	r0, r4
    2682:	4b2b      	ldr	r3, [pc, #172]	; (2730 <nm_get_firmware_full_info+0xcc>)
    2684:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2686:	a903      	add	r1, sp, #12
    2688:	482a      	ldr	r0, [pc, #168]	; (2734 <nm_get_firmware_full_info+0xd0>)
    268a:	4b2b      	ldr	r3, [pc, #172]	; (2738 <nm_get_firmware_full_info+0xd4>)
    268c:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    268e:	2800      	cmp	r0, #0
    2690:	d13a      	bne.n	2708 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    2692:	9b03      	ldr	r3, [sp, #12]
    2694:	2b00      	cmp	r3, #0
    2696:	d039      	beq.n	270c <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2698:	20c0      	movs	r0, #192	; 0xc0
    269a:	0280      	lsls	r0, r0, #10
    269c:	4318      	orrs	r0, r3
    269e:	2208      	movs	r2, #8
    26a0:	a901      	add	r1, sp, #4
    26a2:	4b26      	ldr	r3, [pc, #152]	; (273c <nm_get_firmware_full_info+0xd8>)
    26a4:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    26a6:	2800      	cmp	r0, #0
    26a8:	d12e      	bne.n	2708 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    26aa:	9b02      	ldr	r3, [sp, #8]
    26ac:	0418      	lsls	r0, r3, #16
    26ae:	0c00      	lsrs	r0, r0, #16
    26b0:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    26b2:	d02e      	beq.n	2712 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    26b4:	23c0      	movs	r3, #192	; 0xc0
    26b6:	029b      	lsls	r3, r3, #10
    26b8:	4318      	orrs	r0, r3
    26ba:	2228      	movs	r2, #40	; 0x28
    26bc:	0021      	movs	r1, r4
    26be:	4b1f      	ldr	r3, [pc, #124]	; (273c <nm_get_firmware_full_info+0xd8>)
    26c0:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    26c2:	2800      	cmp	r0, #0
    26c4:	d120      	bne.n	2708 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    26c6:	7921      	ldrb	r1, [r4, #4]
    26c8:	0209      	lsls	r1, r1, #8
    26ca:	79a2      	ldrb	r2, [r4, #6]
    26cc:	230f      	movs	r3, #15
    26ce:	401a      	ands	r2, r3
    26d0:	430a      	orrs	r2, r1
    26d2:	7961      	ldrb	r1, [r4, #5]
    26d4:	0109      	lsls	r1, r1, #4
    26d6:	25ff      	movs	r5, #255	; 0xff
    26d8:	4029      	ands	r1, r5
    26da:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    26dc:	79e1      	ldrb	r1, [r4, #7]
    26de:	0209      	lsls	r1, r1, #8
    26e0:	7a66      	ldrb	r6, [r4, #9]
    26e2:	4033      	ands	r3, r6
    26e4:	430b      	orrs	r3, r1
    26e6:	7a21      	ldrb	r1, [r4, #8]
    26e8:	0109      	lsls	r1, r1, #4
    26ea:	400d      	ands	r5, r1
    26ec:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    26ee:	2a00      	cmp	r2, #0
    26f0:	d012      	beq.n	2718 <nm_get_firmware_full_info+0xb4>
    26f2:	2b00      	cmp	r3, #0
    26f4:	d013      	beq.n	271e <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    26f6:	4912      	ldr	r1, [pc, #72]	; (2740 <nm_get_firmware_full_info+0xdc>)
    26f8:	428b      	cmp	r3, r1
    26fa:	d813      	bhi.n	2724 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    26fc:	4b11      	ldr	r3, [pc, #68]	; (2744 <nm_get_firmware_full_info+0xe0>)
    26fe:	429a      	cmp	r2, r3
    2700:	d802      	bhi.n	2708 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    2702:	380d      	subs	r0, #13
    2704:	e000      	b.n	2708 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    2706:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    2708:	b004      	add	sp, #16
    270a:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    270c:	200c      	movs	r0, #12
    270e:	4240      	negs	r0, r0
    2710:	e7fa      	b.n	2708 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    2712:	200c      	movs	r0, #12
    2714:	4240      	negs	r0, r0
    2716:	e7f7      	b.n	2708 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    2718:	200c      	movs	r0, #12
    271a:	4240      	negs	r0, r0
    271c:	e7f4      	b.n	2708 <nm_get_firmware_full_info+0xa4>
    271e:	200c      	movs	r0, #12
    2720:	4240      	negs	r0, r0
    2722:	e7f1      	b.n	2708 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    2724:	200d      	movs	r0, #13
    2726:	4240      	negs	r0, r0
    2728:	e7ee      	b.n	2708 <nm_get_firmware_full_info+0xa4>
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	00007d8b 	.word	0x00007d8b
    2730:	00001135 	.word	0x00001135
    2734:	000c0008 	.word	0x000c0008
    2738:	0000257d 	.word	0x0000257d
    273c:	00002595 	.word	0x00002595
    2740:	00001352 	.word	0x00001352
    2744:	00001351 	.word	0x00001351

00002748 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    2748:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    274a:	2800      	cmp	r0, #0
    274c:	d037      	beq.n	27be <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    274e:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    2750:	1e6b      	subs	r3, r5, #1
    2752:	2b03      	cmp	r3, #3
    2754:	d900      	bls.n	2758 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    2756:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    2758:	2000      	movs	r0, #0
    275a:	4b20      	ldr	r3, [pc, #128]	; (27dc <nm_drv_init+0x94>)
    275c:	4798      	blx	r3
    275e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2760:	d12f      	bne.n	27c2 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    2762:	481f      	ldr	r0, [pc, #124]	; (27e0 <nm_drv_init+0x98>)
    2764:	4c1f      	ldr	r4, [pc, #124]	; (27e4 <nm_drv_init+0x9c>)
    2766:	47a0      	blx	r4
    2768:	4b1f      	ldr	r3, [pc, #124]	; (27e8 <nm_drv_init+0xa0>)
    276a:	4798      	blx	r3
    276c:	0001      	movs	r1, r0
    276e:	481f      	ldr	r0, [pc, #124]	; (27ec <nm_drv_init+0xa4>)
    2770:	47a0      	blx	r4
    2772:	200d      	movs	r0, #13
    2774:	4b1e      	ldr	r3, [pc, #120]	; (27f0 <nm_drv_init+0xa8>)
    2776:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    2778:	4b1e      	ldr	r3, [pc, #120]	; (27f4 <nm_drv_init+0xac>)
    277a:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    277c:	0028      	movs	r0, r5
    277e:	4b1e      	ldr	r3, [pc, #120]	; (27f8 <nm_drv_init+0xb0>)
    2780:	4798      	blx	r3
    2782:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2784:	d117      	bne.n	27b6 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    2786:	0028      	movs	r0, r5
    2788:	4b1c      	ldr	r3, [pc, #112]	; (27fc <nm_drv_init+0xb4>)
    278a:	4798      	blx	r3
    278c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    278e:	d112      	bne.n	27b6 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    2790:	3d02      	subs	r5, #2
    2792:	2d01      	cmp	r5, #1
    2794:	d911      	bls.n	27ba <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    2796:	4b1a      	ldr	r3, [pc, #104]	; (2800 <nm_drv_init+0xb8>)
    2798:	4798      	blx	r3
    279a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    279c:	d00d      	beq.n	27ba <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    279e:	2256      	movs	r2, #86	; 0x56
    27a0:	32ff      	adds	r2, #255	; 0xff
    27a2:	4918      	ldr	r1, [pc, #96]	; (2804 <nm_drv_init+0xbc>)
    27a4:	4818      	ldr	r0, [pc, #96]	; (2808 <nm_drv_init+0xc0>)
    27a6:	4b0f      	ldr	r3, [pc, #60]	; (27e4 <nm_drv_init+0x9c>)
    27a8:	4798      	blx	r3
    27aa:	4818      	ldr	r0, [pc, #96]	; (280c <nm_drv_init+0xc4>)
    27ac:	4b18      	ldr	r3, [pc, #96]	; (2810 <nm_drv_init+0xc8>)
    27ae:	4798      	blx	r3
    27b0:	200d      	movs	r0, #13
    27b2:	4b0f      	ldr	r3, [pc, #60]	; (27f0 <nm_drv_init+0xa8>)
    27b4:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    27b6:	4b17      	ldr	r3, [pc, #92]	; (2814 <nm_drv_init+0xcc>)
    27b8:	4798      	blx	r3
ERR1:
	return ret;
}
    27ba:	0020      	movs	r0, r4
    27bc:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    27be:	2501      	movs	r5, #1
    27c0:	e7ca      	b.n	2758 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    27c2:	2228      	movs	r2, #40	; 0x28
    27c4:	32ff      	adds	r2, #255	; 0xff
    27c6:	490f      	ldr	r1, [pc, #60]	; (2804 <nm_drv_init+0xbc>)
    27c8:	480f      	ldr	r0, [pc, #60]	; (2808 <nm_drv_init+0xc0>)
    27ca:	4b06      	ldr	r3, [pc, #24]	; (27e4 <nm_drv_init+0x9c>)
    27cc:	4798      	blx	r3
    27ce:	4812      	ldr	r0, [pc, #72]	; (2818 <nm_drv_init+0xd0>)
    27d0:	4b0f      	ldr	r3, [pc, #60]	; (2810 <nm_drv_init+0xc8>)
    27d2:	4798      	blx	r3
    27d4:	200d      	movs	r0, #13
    27d6:	4b06      	ldr	r3, [pc, #24]	; (27f0 <nm_drv_init+0xa8>)
    27d8:	4798      	blx	r3
		goto ERR1;
    27da:	e7ee      	b.n	27ba <nm_drv_init+0x72>
    27dc:	0000254d 	.word	0x0000254d
    27e0:	00009874 	.word	0x00009874
    27e4:	00007eed 	.word	0x00007eed
    27e8:	0000212d 	.word	0x0000212d
    27ec:	00009bb8 	.word	0x00009bb8
    27f0:	00007f21 	.word	0x00007f21
    27f4:	00002f91 	.word	0x00002f91
    27f8:	00002341 	.word	0x00002341
    27fc:	00002449 	.word	0x00002449
    2800:	000020d1 	.word	0x000020d1
    2804:	00009b00 	.word	0x00009b00
    2808:	00009544 	.word	0x00009544
    280c:	00009b7c 	.word	0x00009b7c
    2810:	00008009 	.word	0x00008009
    2814:	00002559 	.word	0x00002559
    2818:	00009b9c 	.word	0x00009b9c

0000281c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    281c:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    281e:	4b1c      	ldr	r3, [pc, #112]	; (2890 <nm_drv_deinit+0x74>)
    2820:	4798      	blx	r3
    2822:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2824:	d10b      	bne.n	283e <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    2826:	2000      	movs	r0, #0
    2828:	4b1a      	ldr	r3, [pc, #104]	; (2894 <nm_drv_deinit+0x78>)
    282a:	4798      	blx	r3
    282c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    282e:	d114      	bne.n	285a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    2830:	4b19      	ldr	r3, [pc, #100]	; (2898 <nm_drv_deinit+0x7c>)
    2832:	4798      	blx	r3
    2834:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2836:	d11d      	bne.n	2874 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    2838:	4b18      	ldr	r3, [pc, #96]	; (289c <nm_drv_deinit+0x80>)
    283a:	4798      	blx	r3
    283c:	e00b      	b.n	2856 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    283e:	22b6      	movs	r2, #182	; 0xb6
    2840:	0052      	lsls	r2, r2, #1
    2842:	4917      	ldr	r1, [pc, #92]	; (28a0 <nm_drv_deinit+0x84>)
    2844:	4817      	ldr	r0, [pc, #92]	; (28a4 <nm_drv_deinit+0x88>)
    2846:	4b18      	ldr	r3, [pc, #96]	; (28a8 <nm_drv_deinit+0x8c>)
    2848:	4798      	blx	r3
    284a:	4818      	ldr	r0, [pc, #96]	; (28ac <nm_drv_deinit+0x90>)
    284c:	4b18      	ldr	r3, [pc, #96]	; (28b0 <nm_drv_deinit+0x94>)
    284e:	4798      	blx	r3
    2850:	200d      	movs	r0, #13
    2852:	4b18      	ldr	r3, [pc, #96]	; (28b4 <nm_drv_deinit+0x98>)
    2854:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    2856:	0020      	movs	r0, r4
    2858:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    285a:	2274      	movs	r2, #116	; 0x74
    285c:	32ff      	adds	r2, #255	; 0xff
    285e:	4910      	ldr	r1, [pc, #64]	; (28a0 <nm_drv_deinit+0x84>)
    2860:	4810      	ldr	r0, [pc, #64]	; (28a4 <nm_drv_deinit+0x88>)
    2862:	4b11      	ldr	r3, [pc, #68]	; (28a8 <nm_drv_deinit+0x8c>)
    2864:	4798      	blx	r3
    2866:	4814      	ldr	r0, [pc, #80]	; (28b8 <nm_drv_deinit+0x9c>)
    2868:	4b11      	ldr	r3, [pc, #68]	; (28b0 <nm_drv_deinit+0x94>)
    286a:	4798      	blx	r3
    286c:	200d      	movs	r0, #13
    286e:	4b11      	ldr	r3, [pc, #68]	; (28b4 <nm_drv_deinit+0x98>)
    2870:	4798      	blx	r3
		goto ERR1;
    2872:	e7f0      	b.n	2856 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    2874:	227a      	movs	r2, #122	; 0x7a
    2876:	32ff      	adds	r2, #255	; 0xff
    2878:	4909      	ldr	r1, [pc, #36]	; (28a0 <nm_drv_deinit+0x84>)
    287a:	480a      	ldr	r0, [pc, #40]	; (28a4 <nm_drv_deinit+0x88>)
    287c:	4b0a      	ldr	r3, [pc, #40]	; (28a8 <nm_drv_deinit+0x8c>)
    287e:	4798      	blx	r3
    2880:	480e      	ldr	r0, [pc, #56]	; (28bc <nm_drv_deinit+0xa0>)
    2882:	4b0b      	ldr	r3, [pc, #44]	; (28b0 <nm_drv_deinit+0x94>)
    2884:	4798      	blx	r3
    2886:	200d      	movs	r0, #13
    2888:	4b0a      	ldr	r3, [pc, #40]	; (28b4 <nm_drv_deinit+0x98>)
    288a:	4798      	blx	r3
		goto ERR1;
    288c:	e7e3      	b.n	2856 <nm_drv_deinit+0x3a>
    288e:	46c0      	nop			; (mov r8, r8)
    2890:	000024c1 	.word	0x000024c1
    2894:	00003db1 	.word	0x00003db1
    2898:	00002559 	.word	0x00002559
    289c:	00002f3d 	.word	0x00002f3d
    28a0:	00009b0c 	.word	0x00009b0c
    28a4:	00009544 	.word	0x00009544
    28a8:	00007eed 	.word	0x00007eed
    28ac:	00009b1c 	.word	0x00009b1c
    28b0:	00008009 	.word	0x00008009
    28b4:	00007f21 	.word	0x00007f21
    28b8:	00009b3c 	.word	0x00009b3c
    28bc:	00009b60 	.word	0x00009b60

000028c0 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    28c0:	b500      	push	{lr}
    28c2:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    28c4:	ab01      	add	r3, sp, #4
    28c6:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    28c8:	2200      	movs	r2, #0
    28ca:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    28cc:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    28ce:	0019      	movs	r1, r3
    28d0:	2003      	movs	r0, #3
    28d2:	4b02      	ldr	r3, [pc, #8]	; (28dc <nmi_spi_write+0x1c>)
    28d4:	4798      	blx	r3
}
    28d6:	b005      	add	sp, #20
    28d8:	bd00      	pop	{pc}
    28da:	46c0      	nop			; (mov r8, r8)
    28dc:	00000f69 	.word	0x00000f69

000028e0 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    28e0:	b570      	push	{r4, r5, r6, lr}
    28e2:	b084      	sub	sp, #16
    28e4:	ac08      	add	r4, sp, #32
    28e6:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    28e8:	ac01      	add	r4, sp, #4
    28ea:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    28ec:	303f      	adds	r0, #63	; 0x3f
    28ee:	b2c4      	uxtb	r4, r0
    28f0:	2c0e      	cmp	r4, #14
    28f2:	d900      	bls.n	28f6 <spi_cmd+0x16>
    28f4:	e084      	b.n	2a00 <spi_cmd+0x120>
    28f6:	00a0      	lsls	r0, r4, #2
    28f8:	4c4f      	ldr	r4, [pc, #316]	; (2a38 <spi_cmd+0x158>)
    28fa:	5820      	ldr	r0, [r4, r0]
    28fc:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    28fe:	ab01      	add	r3, sp, #4
    2900:	0c0a      	lsrs	r2, r1, #16
    2902:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2904:	0a0a      	lsrs	r2, r1, #8
    2906:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2908:	70d9      	strb	r1, [r3, #3]
		len = 5;
    290a:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    290c:	4b4b      	ldr	r3, [pc, #300]	; (2a3c <spi_cmd+0x15c>)
    290e:	781b      	ldrb	r3, [r3, #0]
    2910:	2b00      	cmp	r3, #0
    2912:	d077      	beq.n	2a04 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    2914:	3901      	subs	r1, #1
    2916:	b2c9      	uxtb	r1, r1
    2918:	e083      	b.n	2a22 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    291a:	0a0b      	lsrs	r3, r1, #8
    291c:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    291e:	2d00      	cmp	r5, #0
    2920:	d107      	bne.n	2932 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    2922:	aa01      	add	r2, sp, #4
    2924:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    2926:	ab01      	add	r3, sp, #4
    2928:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    292a:	2200      	movs	r2, #0
    292c:	70da      	strb	r2, [r3, #3]
		len = 5;
    292e:	2105      	movs	r1, #5
		break;
    2930:	e7ec      	b.n	290c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2932:	2280      	movs	r2, #128	; 0x80
    2934:	4252      	negs	r2, r2
    2936:	4313      	orrs	r3, r2
    2938:	aa01      	add	r2, sp, #4
    293a:	7053      	strb	r3, [r2, #1]
    293c:	e7f3      	b.n	2926 <spi_cmd+0x46>
		bc[1] = 0x00;
    293e:	ab01      	add	r3, sp, #4
    2940:	2200      	movs	r2, #0
    2942:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2944:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2946:	70da      	strb	r2, [r3, #3]
		len = 5;
    2948:	2105      	movs	r1, #5
		break;
    294a:	e7df      	b.n	290c <spi_cmd+0x2c>
		bc[1] = 0x00;
    294c:	ab01      	add	r3, sp, #4
    294e:	2200      	movs	r2, #0
    2950:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2952:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2954:	70da      	strb	r2, [r3, #3]
		len = 5;
    2956:	2105      	movs	r1, #5
		break;
    2958:	e7d8      	b.n	290c <spi_cmd+0x2c>
		bc[1] = 0xff;
    295a:	ab01      	add	r3, sp, #4
    295c:	22ff      	movs	r2, #255	; 0xff
    295e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    2960:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    2962:	70da      	strb	r2, [r3, #3]
		len = 5;
    2964:	2105      	movs	r1, #5
		break;
    2966:	e7d1      	b.n	290c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2968:	aa01      	add	r2, sp, #4
    296a:	0c08      	lsrs	r0, r1, #16
    296c:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    296e:	0a08      	lsrs	r0, r1, #8
    2970:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2972:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    2974:	0a19      	lsrs	r1, r3, #8
    2976:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    2978:	7153      	strb	r3, [r2, #5]
		len = 7;
    297a:	2107      	movs	r1, #7
		break;
    297c:	e7c6      	b.n	290c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    297e:	aa01      	add	r2, sp, #4
    2980:	0c08      	lsrs	r0, r1, #16
    2982:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2984:	0a08      	lsrs	r0, r1, #8
    2986:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2988:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    298a:	0c19      	lsrs	r1, r3, #16
    298c:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    298e:	0a19      	lsrs	r1, r3, #8
    2990:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    2992:	7193      	strb	r3, [r2, #6]
		len = 8;
    2994:	2108      	movs	r1, #8
		break;
    2996:	e7b9      	b.n	290c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    2998:	0a0b      	lsrs	r3, r1, #8
    299a:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    299c:	2d00      	cmp	r5, #0
    299e:	d10c      	bne.n	29ba <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    29a0:	a801      	add	r0, sp, #4
    29a2:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    29a4:	ab01      	add	r3, sp, #4
    29a6:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    29a8:	0e11      	lsrs	r1, r2, #24
    29aa:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    29ac:	0c11      	lsrs	r1, r2, #16
    29ae:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    29b0:	0a11      	lsrs	r1, r2, #8
    29b2:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    29b4:	719a      	strb	r2, [r3, #6]
		len = 8;
    29b6:	2108      	movs	r1, #8
		break;
    29b8:	e7a8      	b.n	290c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    29ba:	2080      	movs	r0, #128	; 0x80
    29bc:	4240      	negs	r0, r0
    29be:	4303      	orrs	r3, r0
    29c0:	a801      	add	r0, sp, #4
    29c2:	7043      	strb	r3, [r0, #1]
    29c4:	e7ee      	b.n	29a4 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    29c6:	ab01      	add	r3, sp, #4
    29c8:	0c08      	lsrs	r0, r1, #16
    29ca:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    29cc:	0a08      	lsrs	r0, r1, #8
    29ce:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    29d0:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    29d2:	0e11      	lsrs	r1, r2, #24
    29d4:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    29d6:	0c11      	lsrs	r1, r2, #16
    29d8:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    29da:	0a11      	lsrs	r1, r2, #8
    29dc:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    29de:	71da      	strb	r2, [r3, #7]
		len = 9;
    29e0:	2109      	movs	r1, #9
		break;
    29e2:	e793      	b.n	290c <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    29e4:	2228      	movs	r2, #40	; 0x28
    29e6:	32ff      	adds	r2, #255	; 0xff
    29e8:	4915      	ldr	r1, [pc, #84]	; (2a40 <spi_cmd+0x160>)
    29ea:	4816      	ldr	r0, [pc, #88]	; (2a44 <spi_cmd+0x164>)
    29ec:	4b16      	ldr	r3, [pc, #88]	; (2a48 <spi_cmd+0x168>)
    29ee:	4798      	blx	r3
    29f0:	4816      	ldr	r0, [pc, #88]	; (2a4c <spi_cmd+0x16c>)
    29f2:	4b17      	ldr	r3, [pc, #92]	; (2a50 <spi_cmd+0x170>)
    29f4:	4798      	blx	r3
    29f6:	200d      	movs	r0, #13
    29f8:	4b16      	ldr	r3, [pc, #88]	; (2a54 <spi_cmd+0x174>)
    29fa:	4798      	blx	r3
			result = N_FAIL;
    29fc:	2300      	movs	r3, #0
    29fe:	e017      	b.n	2a30 <spi_cmd+0x150>
	switch (cmd) {
    2a00:	2300      	movs	r3, #0
    2a02:	e015      	b.n	2a30 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2a04:	1e4e      	subs	r6, r1, #1
    2a06:	aa01      	add	r2, sp, #4
    2a08:	1995      	adds	r5, r2, r6
    2a0a:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    2a0c:	4c12      	ldr	r4, [pc, #72]	; (2a58 <spi_cmd+0x178>)
    2a0e:	005b      	lsls	r3, r3, #1
    2a10:	7810      	ldrb	r0, [r2, #0]
    2a12:	4043      	eors	r3, r0
    2a14:	5ce3      	ldrb	r3, [r4, r3]
    2a16:	3201      	adds	r2, #1
	while (len--)
    2a18:	42aa      	cmp	r2, r5
    2a1a:	d1f8      	bne.n	2a0e <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2a1c:	005b      	lsls	r3, r3, #1
    2a1e:	aa01      	add	r2, sp, #4
    2a20:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    2a22:	b289      	uxth	r1, r1
    2a24:	a801      	add	r0, sp, #4
    2a26:	4b0d      	ldr	r3, [pc, #52]	; (2a5c <spi_cmd+0x17c>)
    2a28:	4798      	blx	r3
    2a2a:	2301      	movs	r3, #1
    2a2c:	2800      	cmp	r0, #0
    2a2e:	d1d9      	bne.n	29e4 <spi_cmd+0x104>
		}
	}

	return result;
}
    2a30:	0018      	movs	r0, r3
    2a32:	b004      	add	sp, #16
    2a34:	bd70      	pop	{r4, r5, r6, pc}
    2a36:	46c0      	nop			; (mov r8, r8)
    2a38:	00009bc8 	.word	0x00009bc8
    2a3c:	2000020c 	.word	0x2000020c
    2a40:	00009c08 	.word	0x00009c08
    2a44:	00009544 	.word	0x00009544
    2a48:	00007eed 	.word	0x00007eed
    2a4c:	0000a098 	.word	0x0000a098
    2a50:	00008009 	.word	0x00008009
    2a54:	00007f21 	.word	0x00007f21
    2a58:	00009c94 	.word	0x00009c94
    2a5c:	000028c1 	.word	0x000028c1

00002a60 <nmi_spi_read>:
{
    2a60:	b500      	push	{lr}
    2a62:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    2a64:	ab01      	add	r3, sp, #4
    2a66:	2200      	movs	r2, #0
    2a68:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    2a6a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    2a6c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2a6e:	0019      	movs	r1, r3
    2a70:	2003      	movs	r0, #3
    2a72:	4b02      	ldr	r3, [pc, #8]	; (2a7c <nmi_spi_read+0x1c>)
    2a74:	4798      	blx	r3
}
    2a76:	b005      	add	sp, #20
    2a78:	bd00      	pop	{pc}
    2a7a:	46c0      	nop			; (mov r8, r8)
    2a7c:	00000f69 	.word	0x00000f69

00002a80 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a82:	46c6      	mov	lr, r8
    2a84:	b500      	push	{lr}
    2a86:	b082      	sub	sp, #8
    2a88:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2a8a:	28cf      	cmp	r0, #207	; 0xcf
    2a8c:	d02b      	beq.n	2ae6 <spi_cmd_rsp+0x66>
    2a8e:	0003      	movs	r3, r0
    2a90:	333b      	adds	r3, #59	; 0x3b
    2a92:	b2db      	uxtb	r3, r3
    2a94:	2b01      	cmp	r3, #1
    2a96:	d926      	bls.n	2ae6 <spi_cmd_rsp+0x66>
{
    2a98:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2a9a:	466b      	mov	r3, sp
    2a9c:	1dde      	adds	r6, r3, #7
    2a9e:	4b26      	ldr	r3, [pc, #152]	; (2b38 <spi_cmd_rsp+0xb8>)
    2aa0:	4698      	mov	r8, r3
    2aa2:	2101      	movs	r1, #1
    2aa4:	0030      	movs	r0, r6
    2aa6:	47c0      	blx	r8
    2aa8:	1e05      	subs	r5, r0, #0
    2aaa:	d125      	bne.n	2af8 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2aac:	7833      	ldrb	r3, [r6, #0]
    2aae:	42bb      	cmp	r3, r7
    2ab0:	d030      	beq.n	2b14 <spi_cmd_rsp+0x94>
    2ab2:	3c01      	subs	r4, #1
    2ab4:	b2e4      	uxtb	r4, r4
    2ab6:	2c00      	cmp	r4, #0
    2ab8:	d1f3      	bne.n	2aa2 <spi_cmd_rsp+0x22>
    2aba:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2abc:	466b      	mov	r3, sp
    2abe:	1dde      	adds	r6, r3, #7
    2ac0:	4f1d      	ldr	r7, [pc, #116]	; (2b38 <spi_cmd_rsp+0xb8>)
    2ac2:	2101      	movs	r1, #1
    2ac4:	0030      	movs	r0, r6
    2ac6:	47b8      	blx	r7
    2ac8:	2800      	cmp	r0, #0
    2aca:	d125      	bne.n	2b18 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    2acc:	7833      	ldrb	r3, [r6, #0]
    2ace:	2b00      	cmp	r3, #0
    2ad0:	d02f      	beq.n	2b32 <spi_cmd_rsp+0xb2>
    2ad2:	3c01      	subs	r4, #1
    2ad4:	b2e4      	uxtb	r4, r4
    2ad6:	2c00      	cmp	r4, #0
    2ad8:	d1f3      	bne.n	2ac2 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    2ada:	2501      	movs	r5, #1

_fail_:

	return result;
}
    2adc:	0028      	movs	r0, r5
    2ade:	b002      	add	sp, #8
    2ae0:	bc04      	pop	{r2}
    2ae2:	4690      	mov	r8, r2
    2ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2ae6:	2101      	movs	r1, #1
    2ae8:	466b      	mov	r3, sp
    2aea:	1dd8      	adds	r0, r3, #7
    2aec:	4b12      	ldr	r3, [pc, #72]	; (2b38 <spi_cmd_rsp+0xb8>)
    2aee:	4798      	blx	r3
			result = N_FAIL;
    2af0:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2af2:	2800      	cmp	r0, #0
    2af4:	d0d0      	beq.n	2a98 <spi_cmd_rsp+0x18>
    2af6:	e7f1      	b.n	2adc <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2af8:	22b1      	movs	r2, #177	; 0xb1
    2afa:	0052      	lsls	r2, r2, #1
    2afc:	490f      	ldr	r1, [pc, #60]	; (2b3c <spi_cmd_rsp+0xbc>)
    2afe:	4810      	ldr	r0, [pc, #64]	; (2b40 <spi_cmd_rsp+0xc0>)
    2b00:	4b10      	ldr	r3, [pc, #64]	; (2b44 <spi_cmd_rsp+0xc4>)
    2b02:	4798      	blx	r3
    2b04:	4810      	ldr	r0, [pc, #64]	; (2b48 <spi_cmd_rsp+0xc8>)
    2b06:	4b11      	ldr	r3, [pc, #68]	; (2b4c <spi_cmd_rsp+0xcc>)
    2b08:	4798      	blx	r3
    2b0a:	200d      	movs	r0, #13
    2b0c:	4b10      	ldr	r3, [pc, #64]	; (2b50 <spi_cmd_rsp+0xd0>)
    2b0e:	4798      	blx	r3
			result = N_FAIL;
    2b10:	2500      	movs	r5, #0
			goto _fail_;
    2b12:	e7e3      	b.n	2adc <spi_cmd_rsp+0x5c>
    2b14:	240b      	movs	r4, #11
    2b16:	e7d1      	b.n	2abc <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2b18:	22b8      	movs	r2, #184	; 0xb8
    2b1a:	0052      	lsls	r2, r2, #1
    2b1c:	4907      	ldr	r1, [pc, #28]	; (2b3c <spi_cmd_rsp+0xbc>)
    2b1e:	4808      	ldr	r0, [pc, #32]	; (2b40 <spi_cmd_rsp+0xc0>)
    2b20:	4b08      	ldr	r3, [pc, #32]	; (2b44 <spi_cmd_rsp+0xc4>)
    2b22:	4798      	blx	r3
    2b24:	4808      	ldr	r0, [pc, #32]	; (2b48 <spi_cmd_rsp+0xc8>)
    2b26:	4b09      	ldr	r3, [pc, #36]	; (2b4c <spi_cmd_rsp+0xcc>)
    2b28:	4798      	blx	r3
    2b2a:	200d      	movs	r0, #13
    2b2c:	4b08      	ldr	r3, [pc, #32]	; (2b50 <spi_cmd_rsp+0xd0>)
    2b2e:	4798      	blx	r3
			goto _fail_;
    2b30:	e7d4      	b.n	2adc <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    2b32:	2501      	movs	r5, #1
    2b34:	e7d2      	b.n	2adc <spi_cmd_rsp+0x5c>
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	00002a61 	.word	0x00002a61
    2b3c:	00009c20 	.word	0x00009c20
    2b40:	00009544 	.word	0x00009544
    2b44:	00007eed 	.word	0x00007eed
    2b48:	0000a0c4 	.word	0x0000a0c4
    2b4c:	00008009 	.word	0x00008009
    2b50:	00007f21 	.word	0x00007f21

00002b54 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    2b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b56:	46de      	mov	lr, fp
    2b58:	4657      	mov	r7, sl
    2b5a:	464e      	mov	r6, r9
    2b5c:	4645      	mov	r5, r8
    2b5e:	b5e0      	push	{r5, r6, r7, lr}
    2b60:	b087      	sub	sp, #28
    2b62:	9001      	str	r0, [sp, #4]
    2b64:	4689      	mov	r9, r1
    2b66:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2b68:	2300      	movs	r3, #0
    2b6a:	469a      	mov	sl, r3
    2b6c:	2380      	movs	r3, #128	; 0x80
    2b6e:	019b      	lsls	r3, r3, #6
    2b70:	469b      	mov	fp, r3
    2b72:	466a      	mov	r2, sp
    2b74:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2b76:	4b3b      	ldr	r3, [pc, #236]	; (2c64 <spi_data_read+0x110>)
    2b78:	4698      	mov	r8, r3
    2b7a:	e02e      	b.n	2bda <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    2b7c:	4a3a      	ldr	r2, [pc, #232]	; (2c68 <spi_data_read+0x114>)
    2b7e:	493b      	ldr	r1, [pc, #236]	; (2c6c <spi_data_read+0x118>)
    2b80:	483b      	ldr	r0, [pc, #236]	; (2c70 <spi_data_read+0x11c>)
    2b82:	4b3c      	ldr	r3, [pc, #240]	; (2c74 <spi_data_read+0x120>)
    2b84:	4798      	blx	r3
    2b86:	483c      	ldr	r0, [pc, #240]	; (2c78 <spi_data_read+0x124>)
    2b88:	4b3c      	ldr	r3, [pc, #240]	; (2c7c <spi_data_read+0x128>)
    2b8a:	4798      	blx	r3
    2b8c:	200d      	movs	r0, #13
    2b8e:	4b3c      	ldr	r3, [pc, #240]	; (2c80 <spi_data_read+0x12c>)
    2b90:	4798      	blx	r3
    2b92:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    2b94:	0028      	movs	r0, r5
    2b96:	b007      	add	sp, #28
    2b98:	bc3c      	pop	{r2, r3, r4, r5}
    2b9a:	4690      	mov	r8, r2
    2b9c:	4699      	mov	r9, r3
    2b9e:	46a2      	mov	sl, r4
    2ba0:	46ab      	mov	fp, r5
    2ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    2ba4:	2c00      	cmp	r4, #0
    2ba6:	dd2e      	ble.n	2c06 <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    2ba8:	9b01      	ldr	r3, [sp, #4]
    2baa:	4453      	add	r3, sl
    2bac:	0018      	movs	r0, r3
    2bae:	0039      	movs	r1, r7
    2bb0:	4b2c      	ldr	r3, [pc, #176]	; (2c64 <spi_data_read+0x110>)
    2bb2:	4798      	blx	r3
    2bb4:	1e04      	subs	r4, r0, #0
    2bb6:	d133      	bne.n	2c20 <spi_data_read+0xcc>
		if(!clockless)
    2bb8:	9b02      	ldr	r3, [sp, #8]
    2bba:	2b00      	cmp	r3, #0
    2bbc:	d103      	bne.n	2bc6 <spi_data_read+0x72>
			if (!gu8Crc_off) {
    2bbe:	4b31      	ldr	r3, [pc, #196]	; (2c84 <spi_data_read+0x130>)
    2bc0:	781b      	ldrb	r3, [r3, #0]
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d039      	beq.n	2c3a <spi_data_read+0xe6>
		ix += nbytes;
    2bc6:	4653      	mov	r3, sl
    2bc8:	18fb      	adds	r3, r7, r3
    2bca:	b21b      	sxth	r3, r3
    2bcc:	469a      	mov	sl, r3
		sz -= nbytes;
    2bce:	464b      	mov	r3, r9
    2bd0:	1bdf      	subs	r7, r3, r7
    2bd2:	b2bb      	uxth	r3, r7
    2bd4:	4699      	mov	r9, r3
	} while (sz);
    2bd6:	2b00      	cmp	r3, #0
    2bd8:	d042      	beq.n	2c60 <spi_data_read+0x10c>
    2bda:	464f      	mov	r7, r9
    2bdc:	45d9      	cmp	r9, fp
    2bde:	d901      	bls.n	2be4 <spi_data_read+0x90>
    2be0:	466b      	mov	r3, sp
    2be2:	89df      	ldrh	r7, [r3, #14]
    2be4:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    2be6:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2be8:	ab04      	add	r3, sp, #16
    2bea:	1cde      	adds	r6, r3, #3
    2bec:	2101      	movs	r1, #1
    2bee:	0030      	movs	r0, r6
    2bf0:	47c0      	blx	r8
    2bf2:	1e05      	subs	r5, r0, #0
    2bf4:	d1c2      	bne.n	2b7c <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    2bf6:	7833      	ldrb	r3, [r6, #0]
    2bf8:	091b      	lsrs	r3, r3, #4
    2bfa:	2b0f      	cmp	r3, #15
    2bfc:	d0d2      	beq.n	2ba4 <spi_data_read+0x50>
    2bfe:	3c01      	subs	r4, #1
    2c00:	b224      	sxth	r4, r4
		} while (retry--);
    2c02:	1c63      	adds	r3, r4, #1
    2c04:	d1f2      	bne.n	2bec <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2c06:	4a20      	ldr	r2, [pc, #128]	; (2c88 <spi_data_read+0x134>)
    2c08:	4918      	ldr	r1, [pc, #96]	; (2c6c <spi_data_read+0x118>)
    2c0a:	4819      	ldr	r0, [pc, #100]	; (2c70 <spi_data_read+0x11c>)
    2c0c:	4c19      	ldr	r4, [pc, #100]	; (2c74 <spi_data_read+0x120>)
    2c0e:	47a0      	blx	r4
    2c10:	ab04      	add	r3, sp, #16
    2c12:	78d9      	ldrb	r1, [r3, #3]
    2c14:	481d      	ldr	r0, [pc, #116]	; (2c8c <spi_data_read+0x138>)
    2c16:	47a0      	blx	r4
    2c18:	200d      	movs	r0, #13
    2c1a:	4b19      	ldr	r3, [pc, #100]	; (2c80 <spi_data_read+0x12c>)
    2c1c:	4798      	blx	r3
			break;
    2c1e:	e7b9      	b.n	2b94 <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    2c20:	22c5      	movs	r2, #197	; 0xc5
    2c22:	0092      	lsls	r2, r2, #2
    2c24:	4911      	ldr	r1, [pc, #68]	; (2c6c <spi_data_read+0x118>)
    2c26:	4812      	ldr	r0, [pc, #72]	; (2c70 <spi_data_read+0x11c>)
    2c28:	4b12      	ldr	r3, [pc, #72]	; (2c74 <spi_data_read+0x120>)
    2c2a:	4798      	blx	r3
    2c2c:	4818      	ldr	r0, [pc, #96]	; (2c90 <spi_data_read+0x13c>)
    2c2e:	4b13      	ldr	r3, [pc, #76]	; (2c7c <spi_data_read+0x128>)
    2c30:	4798      	blx	r3
    2c32:	200d      	movs	r0, #13
    2c34:	4b12      	ldr	r3, [pc, #72]	; (2c80 <spi_data_read+0x12c>)
    2c36:	4798      	blx	r3
			break;
    2c38:	e7ac      	b.n	2b94 <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    2c3a:	2102      	movs	r1, #2
    2c3c:	a805      	add	r0, sp, #20
    2c3e:	4b09      	ldr	r3, [pc, #36]	; (2c64 <spi_data_read+0x110>)
    2c40:	4798      	blx	r3
    2c42:	2800      	cmp	r0, #0
    2c44:	d0bf      	beq.n	2bc6 <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    2c46:	4a13      	ldr	r2, [pc, #76]	; (2c94 <spi_data_read+0x140>)
    2c48:	4908      	ldr	r1, [pc, #32]	; (2c6c <spi_data_read+0x118>)
    2c4a:	4809      	ldr	r0, [pc, #36]	; (2c70 <spi_data_read+0x11c>)
    2c4c:	4b09      	ldr	r3, [pc, #36]	; (2c74 <spi_data_read+0x120>)
    2c4e:	4798      	blx	r3
    2c50:	4811      	ldr	r0, [pc, #68]	; (2c98 <spi_data_read+0x144>)
    2c52:	4b0a      	ldr	r3, [pc, #40]	; (2c7c <spi_data_read+0x128>)
    2c54:	4798      	blx	r3
    2c56:	200d      	movs	r0, #13
    2c58:	4b09      	ldr	r3, [pc, #36]	; (2c80 <spi_data_read+0x12c>)
    2c5a:	4798      	blx	r3
					result = N_FAIL;
    2c5c:	0025      	movs	r5, r4
					break;
    2c5e:	e799      	b.n	2b94 <spi_data_read+0x40>
    2c60:	2501      	movs	r5, #1
    2c62:	e797      	b.n	2b94 <spi_data_read+0x40>
    2c64:	00002a61 	.word	0x00002a61
    2c68:	000002ff 	.word	0x000002ff
    2c6c:	00009c2c 	.word	0x00009c2c
    2c70:	00009544 	.word	0x00009544
    2c74:	00007eed 	.word	0x00007eed
    2c78:	0000a0f8 	.word	0x0000a0f8
    2c7c:	00008009 	.word	0x00008009
    2c80:	00007f21 	.word	0x00007f21
    2c84:	2000020c 	.word	0x2000020c
    2c88:	0000030b 	.word	0x0000030b
    2c8c:	0000a12c 	.word	0x0000a12c
    2c90:	0000a15c 	.word	0x0000a15c
    2c94:	0000031f 	.word	0x0000031f
    2c98:	0000a18c 	.word	0x0000a18c

00002c9c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    2c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c9e:	46d6      	mov	lr, sl
    2ca0:	464f      	mov	r7, r9
    2ca2:	4646      	mov	r6, r8
    2ca4:	b5c0      	push	{r6, r7, lr}
    2ca6:	b086      	sub	sp, #24
    2ca8:	9003      	str	r0, [sp, #12]
    2caa:	9104      	str	r1, [sp, #16]
    2cac:	2830      	cmp	r0, #48	; 0x30
    2cae:	d80f      	bhi.n	2cd0 <spi_write_reg+0x34>
    2cb0:	4b30      	ldr	r3, [pc, #192]	; (2d74 <spi_write_reg+0xd8>)
    2cb2:	781f      	ldrb	r7, [r3, #0]
    2cb4:	b2fb      	uxtb	r3, r7
    2cb6:	9305      	str	r3, [sp, #20]
    2cb8:	2300      	movs	r3, #0
    2cba:	2230      	movs	r2, #48	; 0x30
    2cbc:	9903      	ldr	r1, [sp, #12]
    2cbe:	428a      	cmp	r2, r1
    2cc0:	415b      	adcs	r3, r3
    2cc2:	b2db      	uxtb	r3, r3
    2cc4:	469a      	mov	sl, r3
    2cc6:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2cc8:	4b2b      	ldr	r3, [pc, #172]	; (2d78 <spi_write_reg+0xdc>)
    2cca:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    2ccc:	46d1      	mov	r9, sl
    2cce:	e033      	b.n	2d38 <spi_write_reg+0x9c>
    2cd0:	4b2a      	ldr	r3, [pc, #168]	; (2d7c <spi_write_reg+0xe0>)
    2cd2:	781f      	ldrb	r7, [r3, #0]
    2cd4:	e7ee      	b.n	2cb4 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    2cd6:	9805      	ldr	r0, [sp, #20]
    2cd8:	4b29      	ldr	r3, [pc, #164]	; (2d80 <spi_write_reg+0xe4>)
    2cda:	4798      	blx	r3
    2cdc:	0004      	movs	r4, r0
	if (result != N_OK) {
    2cde:	2801      	cmp	r0, #1
    2ce0:	d041      	beq.n	2d66 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    2ce2:	22e7      	movs	r2, #231	; 0xe7
    2ce4:	0092      	lsls	r2, r2, #2
    2ce6:	4927      	ldr	r1, [pc, #156]	; (2d84 <spi_write_reg+0xe8>)
    2ce8:	4827      	ldr	r0, [pc, #156]	; (2d88 <spi_write_reg+0xec>)
    2cea:	4e28      	ldr	r6, [pc, #160]	; (2d8c <spi_write_reg+0xf0>)
    2cec:	47b0      	blx	r6
    2cee:	9903      	ldr	r1, [sp, #12]
    2cf0:	4827      	ldr	r0, [pc, #156]	; (2d90 <spi_write_reg+0xf4>)
    2cf2:	47b0      	blx	r6
    2cf4:	200d      	movs	r0, #13
    2cf6:	4b27      	ldr	r3, [pc, #156]	; (2d94 <spi_write_reg+0xf8>)
    2cf8:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    2cfa:	2001      	movs	r0, #1
    2cfc:	4e26      	ldr	r6, [pc, #152]	; (2d98 <spi_write_reg+0xfc>)
    2cfe:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2d00:	2300      	movs	r3, #0
    2d02:	9300      	str	r3, [sp, #0]
    2d04:	2200      	movs	r2, #0
    2d06:	2100      	movs	r1, #0
    2d08:	20cf      	movs	r0, #207	; 0xcf
    2d0a:	4f1b      	ldr	r7, [pc, #108]	; (2d78 <spi_write_reg+0xdc>)
    2d0c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    2d0e:	20cf      	movs	r0, #207	; 0xcf
    2d10:	4b1b      	ldr	r3, [pc, #108]	; (2d80 <spi_write_reg+0xe4>)
    2d12:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    2d14:	4a21      	ldr	r2, [pc, #132]	; (2d9c <spi_write_reg+0x100>)
    2d16:	491b      	ldr	r1, [pc, #108]	; (2d84 <spi_write_reg+0xe8>)
    2d18:	481b      	ldr	r0, [pc, #108]	; (2d88 <spi_write_reg+0xec>)
    2d1a:	4f1c      	ldr	r7, [pc, #112]	; (2d8c <spi_write_reg+0xf0>)
    2d1c:	47b8      	blx	r7
    2d1e:	9b04      	ldr	r3, [sp, #16]
    2d20:	9a03      	ldr	r2, [sp, #12]
    2d22:	0029      	movs	r1, r5
    2d24:	481e      	ldr	r0, [pc, #120]	; (2da0 <spi_write_reg+0x104>)
    2d26:	47b8      	blx	r7
    2d28:	200d      	movs	r0, #13
    2d2a:	4b1a      	ldr	r3, [pc, #104]	; (2d94 <spi_write_reg+0xf8>)
    2d2c:	4798      	blx	r3
		nm_bsp_sleep(1);
    2d2e:	2001      	movs	r0, #1
    2d30:	47b0      	blx	r6
    2d32:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    2d34:	2d00      	cmp	r5, #0
    2d36:	d016      	beq.n	2d66 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2d38:	464b      	mov	r3, r9
    2d3a:	9300      	str	r3, [sp, #0]
    2d3c:	2304      	movs	r3, #4
    2d3e:	9a04      	ldr	r2, [sp, #16]
    2d40:	9f03      	ldr	r7, [sp, #12]
    2d42:	0039      	movs	r1, r7
    2d44:	9805      	ldr	r0, [sp, #20]
    2d46:	47c0      	blx	r8
    2d48:	0004      	movs	r4, r0
	if (result != N_OK) {
    2d4a:	2801      	cmp	r0, #1
    2d4c:	d0c3      	beq.n	2cd6 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    2d4e:	4a15      	ldr	r2, [pc, #84]	; (2da4 <spi_write_reg+0x108>)
    2d50:	490c      	ldr	r1, [pc, #48]	; (2d84 <spi_write_reg+0xe8>)
    2d52:	480d      	ldr	r0, [pc, #52]	; (2d88 <spi_write_reg+0xec>)
    2d54:	4e0d      	ldr	r6, [pc, #52]	; (2d8c <spi_write_reg+0xf0>)
    2d56:	47b0      	blx	r6
    2d58:	0039      	movs	r1, r7
    2d5a:	4813      	ldr	r0, [pc, #76]	; (2da8 <spi_write_reg+0x10c>)
    2d5c:	47b0      	blx	r6
    2d5e:	200d      	movs	r0, #13
    2d60:	4b0c      	ldr	r3, [pc, #48]	; (2d94 <spi_write_reg+0xf8>)
    2d62:	4798      	blx	r3
		goto _FAIL_;
    2d64:	e7c9      	b.n	2cfa <spi_write_reg+0x5e>
	}

	return result;
}
    2d66:	0020      	movs	r0, r4
    2d68:	b006      	add	sp, #24
    2d6a:	bc1c      	pop	{r2, r3, r4}
    2d6c:	4690      	mov	r8, r2
    2d6e:	4699      	mov	r9, r3
    2d70:	46a2      	mov	sl, r4
    2d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d74:	00009c04 	.word	0x00009c04
    2d78:	000028e1 	.word	0x000028e1
    2d7c:	00009c05 	.word	0x00009c05
    2d80:	00002a81 	.word	0x00002a81
    2d84:	00009c4c 	.word	0x00009c4c
    2d88:	00009544 	.word	0x00009544
    2d8c:	00007eed 	.word	0x00007eed
    2d90:	0000a284 	.word	0x0000a284
    2d94:	00007f21 	.word	0x00007f21
    2d98:	00000d29 	.word	0x00000d29
    2d9c:	000003af 	.word	0x000003af
    2da0:	0000a2bc 	.word	0x0000a2bc
    2da4:	00000396 	.word	0x00000396
    2da8:	0000a258 	.word	0x0000a258

00002dac <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    2dac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dae:	46de      	mov	lr, fp
    2db0:	4657      	mov	r7, sl
    2db2:	464e      	mov	r6, r9
    2db4:	4645      	mov	r5, r8
    2db6:	b5e0      	push	{r5, r6, r7, lr}
    2db8:	b087      	sub	sp, #28
    2dba:	9002      	str	r0, [sp, #8]
    2dbc:	468b      	mov	fp, r1
    2dbe:	28ff      	cmp	r0, #255	; 0xff
    2dc0:	d80f      	bhi.n	2de2 <spi_read_reg+0x36>
    2dc2:	4b41      	ldr	r3, [pc, #260]	; (2ec8 <spi_read_reg+0x11c>)
    2dc4:	781f      	ldrb	r7, [r3, #0]
    2dc6:	b2fb      	uxtb	r3, r7
    2dc8:	9303      	str	r3, [sp, #12]
    2dca:	2300      	movs	r3, #0
    2dcc:	22ff      	movs	r2, #255	; 0xff
    2dce:	9902      	ldr	r1, [sp, #8]
    2dd0:	428a      	cmp	r2, r1
    2dd2:	415b      	adcs	r3, r3
    2dd4:	b2db      	uxtb	r3, r3
    2dd6:	469a      	mov	sl, r3
    2dd8:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2dda:	4b3c      	ldr	r3, [pc, #240]	; (2ecc <spi_read_reg+0x120>)
    2ddc:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    2dde:	46d1      	mov	r9, sl
    2de0:	e031      	b.n	2e46 <spi_read_reg+0x9a>
    2de2:	4b3b      	ldr	r3, [pc, #236]	; (2ed0 <spi_read_reg+0x124>)
    2de4:	781f      	ldrb	r7, [r3, #0]
    2de6:	e7ee      	b.n	2dc6 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    2de8:	9803      	ldr	r0, [sp, #12]
    2dea:	4b3a      	ldr	r3, [pc, #232]	; (2ed4 <spi_read_reg+0x128>)
    2dec:	4798      	blx	r3
    2dee:	0004      	movs	r4, r0
	if (result != N_OK) {
    2df0:	2801      	cmp	r0, #1
    2df2:	d03f      	beq.n	2e74 <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    2df4:	4a38      	ldr	r2, [pc, #224]	; (2ed8 <spi_read_reg+0x12c>)
    2df6:	4939      	ldr	r1, [pc, #228]	; (2edc <spi_read_reg+0x130>)
    2df8:	4839      	ldr	r0, [pc, #228]	; (2ee0 <spi_read_reg+0x134>)
    2dfa:	4e3a      	ldr	r6, [pc, #232]	; (2ee4 <spi_read_reg+0x138>)
    2dfc:	47b0      	blx	r6
    2dfe:	9902      	ldr	r1, [sp, #8]
    2e00:	4839      	ldr	r0, [pc, #228]	; (2ee8 <spi_read_reg+0x13c>)
    2e02:	47b0      	blx	r6
    2e04:	200d      	movs	r0, #13
    2e06:	4b39      	ldr	r3, [pc, #228]	; (2eec <spi_read_reg+0x140>)
    2e08:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    2e0a:	2001      	movs	r0, #1
    2e0c:	4e38      	ldr	r6, [pc, #224]	; (2ef0 <spi_read_reg+0x144>)
    2e0e:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2e10:	2300      	movs	r3, #0
    2e12:	9300      	str	r3, [sp, #0]
    2e14:	2200      	movs	r2, #0
    2e16:	2100      	movs	r1, #0
    2e18:	20cf      	movs	r0, #207	; 0xcf
    2e1a:	4f2c      	ldr	r7, [pc, #176]	; (2ecc <spi_read_reg+0x120>)
    2e1c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    2e1e:	20cf      	movs	r0, #207	; 0xcf
    2e20:	4b2c      	ldr	r3, [pc, #176]	; (2ed4 <spi_read_reg+0x128>)
    2e22:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    2e24:	4a33      	ldr	r2, [pc, #204]	; (2ef4 <spi_read_reg+0x148>)
    2e26:	492d      	ldr	r1, [pc, #180]	; (2edc <spi_read_reg+0x130>)
    2e28:	482d      	ldr	r0, [pc, #180]	; (2ee0 <spi_read_reg+0x134>)
    2e2a:	4f2e      	ldr	r7, [pc, #184]	; (2ee4 <spi_read_reg+0x138>)
    2e2c:	47b8      	blx	r7
    2e2e:	9a02      	ldr	r2, [sp, #8]
    2e30:	0029      	movs	r1, r5
    2e32:	4831      	ldr	r0, [pc, #196]	; (2ef8 <spi_read_reg+0x14c>)
    2e34:	47b8      	blx	r7
    2e36:	200d      	movs	r0, #13
    2e38:	4b2c      	ldr	r3, [pc, #176]	; (2eec <spi_read_reg+0x140>)
    2e3a:	4798      	blx	r3
		nm_bsp_sleep(1);
    2e3c:	2001      	movs	r0, #1
    2e3e:	47b0      	blx	r6
    2e40:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    2e42:	2d00      	cmp	r5, #0
    2e44:	d037      	beq.n	2eb6 <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2e46:	464b      	mov	r3, r9
    2e48:	9300      	str	r3, [sp, #0]
    2e4a:	2304      	movs	r3, #4
    2e4c:	2200      	movs	r2, #0
    2e4e:	9f02      	ldr	r7, [sp, #8]
    2e50:	0039      	movs	r1, r7
    2e52:	9803      	ldr	r0, [sp, #12]
    2e54:	47c0      	blx	r8
    2e56:	0004      	movs	r4, r0
	if (result != N_OK) {
    2e58:	2801      	cmp	r0, #1
    2e5a:	d0c5      	beq.n	2de8 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    2e5c:	4a27      	ldr	r2, [pc, #156]	; (2efc <spi_read_reg+0x150>)
    2e5e:	491f      	ldr	r1, [pc, #124]	; (2edc <spi_read_reg+0x130>)
    2e60:	481f      	ldr	r0, [pc, #124]	; (2ee0 <spi_read_reg+0x134>)
    2e62:	4e20      	ldr	r6, [pc, #128]	; (2ee4 <spi_read_reg+0x138>)
    2e64:	47b0      	blx	r6
    2e66:	0039      	movs	r1, r7
    2e68:	4825      	ldr	r0, [pc, #148]	; (2f00 <spi_read_reg+0x154>)
    2e6a:	47b0      	blx	r6
    2e6c:	200d      	movs	r0, #13
    2e6e:	4b1f      	ldr	r3, [pc, #124]	; (2eec <spi_read_reg+0x140>)
    2e70:	4798      	blx	r3
		goto _FAIL_;
    2e72:	e7ca      	b.n	2e0a <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    2e74:	464a      	mov	r2, r9
    2e76:	2104      	movs	r1, #4
    2e78:	a805      	add	r0, sp, #20
    2e7a:	4b22      	ldr	r3, [pc, #136]	; (2f04 <spi_read_reg+0x158>)
    2e7c:	4798      	blx	r3
    2e7e:	0004      	movs	r4, r0
	if (result != N_OK) {
    2e80:	2801      	cmp	r0, #1
    2e82:	d00b      	beq.n	2e9c <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    2e84:	4a20      	ldr	r2, [pc, #128]	; (2f08 <spi_read_reg+0x15c>)
    2e86:	4915      	ldr	r1, [pc, #84]	; (2edc <spi_read_reg+0x130>)
    2e88:	4815      	ldr	r0, [pc, #84]	; (2ee0 <spi_read_reg+0x134>)
    2e8a:	4b16      	ldr	r3, [pc, #88]	; (2ee4 <spi_read_reg+0x138>)
    2e8c:	4798      	blx	r3
    2e8e:	481f      	ldr	r0, [pc, #124]	; (2f0c <spi_read_reg+0x160>)
    2e90:	4b1f      	ldr	r3, [pc, #124]	; (2f10 <spi_read_reg+0x164>)
    2e92:	4798      	blx	r3
    2e94:	200d      	movs	r0, #13
    2e96:	4b15      	ldr	r3, [pc, #84]	; (2eec <spi_read_reg+0x140>)
    2e98:	4798      	blx	r3
		goto _FAIL_;
    2e9a:	e7b6      	b.n	2e0a <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    2e9c:	aa05      	add	r2, sp, #20
    2e9e:	7853      	ldrb	r3, [r2, #1]
    2ea0:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    2ea2:	7891      	ldrb	r1, [r2, #2]
    2ea4:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    2ea6:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    2ea8:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    2eaa:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    2eac:	78d2      	ldrb	r2, [r2, #3]
    2eae:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    2eb0:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    2eb2:	465a      	mov	r2, fp
    2eb4:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    2eb6:	0020      	movs	r0, r4
    2eb8:	b007      	add	sp, #28
    2eba:	bc3c      	pop	{r2, r3, r4, r5}
    2ebc:	4690      	mov	r8, r2
    2ebe:	4699      	mov	r9, r3
    2ec0:	46a2      	mov	sl, r4
    2ec2:	46ab      	mov	fp, r5
    2ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ec6:	46c0      	nop			; (mov r8, r8)
    2ec8:	00009c06 	.word	0x00009c06
    2ecc:	000028e1 	.word	0x000028e1
    2ed0:	00009c07 	.word	0x00009c07
    2ed4:	00002a81 	.word	0x00002a81
    2ed8:	0000041d 	.word	0x0000041d
    2edc:	00009c6c 	.word	0x00009c6c
    2ee0:	00009544 	.word	0x00009544
    2ee4:	00007eed 	.word	0x00007eed
    2ee8:	0000a1ec 	.word	0x0000a1ec
    2eec:	00007f21 	.word	0x00007f21
    2ef0:	00000d29 	.word	0x00000d29
    2ef4:	0000043c 	.word	0x0000043c
    2ef8:	0000a240 	.word	0x0000a240
    2efc:	00000417 	.word	0x00000417
    2f00:	0000a1c0 	.word	0x0000a1c0
    2f04:	00002b55 	.word	0x00002b55
    2f08:	00000424 	.word	0x00000424
    2f0c:	0000a220 	.word	0x0000a220
    2f10:	00008009 	.word	0x00008009

00002f14 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    2f14:	b510      	push	{r4, lr}
    2f16:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2f18:	2300      	movs	r3, #0
    2f1a:	9300      	str	r3, [sp, #0]
    2f1c:	2200      	movs	r2, #0
    2f1e:	2100      	movs	r1, #0
    2f20:	20cf      	movs	r0, #207	; 0xcf
    2f22:	4c04      	ldr	r4, [pc, #16]	; (2f34 <nm_spi_reset+0x20>)
    2f24:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    2f26:	20cf      	movs	r0, #207	; 0xcf
    2f28:	4b03      	ldr	r3, [pc, #12]	; (2f38 <nm_spi_reset+0x24>)
    2f2a:	4798      	blx	r3
	return M2M_SUCCESS;
}
    2f2c:	2000      	movs	r0, #0
    2f2e:	b002      	add	sp, #8
    2f30:	bd10      	pop	{r4, pc}
    2f32:	46c0      	nop			; (mov r8, r8)
    2f34:	000028e1 	.word	0x000028e1
    2f38:	00002a81 	.word	0x00002a81

00002f3c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    2f3c:	2200      	movs	r2, #0
    2f3e:	4b02      	ldr	r3, [pc, #8]	; (2f48 <nm_spi_deinit+0xc>)
    2f40:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    2f42:	2000      	movs	r0, #0
    2f44:	4770      	bx	lr
    2f46:	46c0      	nop			; (mov r8, r8)
    2f48:	2000020c 	.word	0x2000020c

00002f4c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    2f4c:	b500      	push	{lr}
    2f4e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    2f50:	a901      	add	r1, sp, #4
    2f52:	4b02      	ldr	r3, [pc, #8]	; (2f5c <nm_spi_read_reg+0x10>)
    2f54:	4798      	blx	r3

	return u32Val;
}
    2f56:	9801      	ldr	r0, [sp, #4]
    2f58:	b003      	add	sp, #12
    2f5a:	bd00      	pop	{pc}
    2f5c:	00002dad 	.word	0x00002dad

00002f60 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2f60:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    2f62:	4b04      	ldr	r3, [pc, #16]	; (2f74 <nm_spi_read_reg_with_ret+0x14>)
    2f64:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2f66:	2300      	movs	r3, #0
    2f68:	2801      	cmp	r0, #1
    2f6a:	d101      	bne.n	2f70 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2f6c:	0018      	movs	r0, r3
    2f6e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2f70:	3b06      	subs	r3, #6
    2f72:	e7fb      	b.n	2f6c <nm_spi_read_reg_with_ret+0xc>
    2f74:	00002dad 	.word	0x00002dad

00002f78 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2f78:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    2f7a:	4b04      	ldr	r3, [pc, #16]	; (2f8c <nm_spi_write_reg+0x14>)
    2f7c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2f7e:	2300      	movs	r3, #0
    2f80:	2801      	cmp	r0, #1
    2f82:	d101      	bne.n	2f88 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2f84:	0018      	movs	r0, r3
    2f86:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2f88:	3b06      	subs	r3, #6
    2f8a:	e7fb      	b.n	2f84 <nm_spi_write_reg+0xc>
    2f8c:	00002c9d 	.word	0x00002c9d

00002f90 <nm_spi_init>:
{
    2f90:	b510      	push	{r4, lr}
    2f92:	b082      	sub	sp, #8
	uint32 reg = 0;
    2f94:	2300      	movs	r3, #0
    2f96:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    2f98:	4a35      	ldr	r2, [pc, #212]	; (3070 <nm_spi_init+0xe0>)
    2f9a:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    2f9c:	4669      	mov	r1, sp
    2f9e:	4835      	ldr	r0, [pc, #212]	; (3074 <nm_spi_init+0xe4>)
    2fa0:	4b35      	ldr	r3, [pc, #212]	; (3078 <nm_spi_init+0xe8>)
    2fa2:	4798      	blx	r3
    2fa4:	2800      	cmp	r0, #0
    2fa6:	d028      	beq.n	2ffa <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    2fa8:	4b31      	ldr	r3, [pc, #196]	; (3070 <nm_spi_init+0xe0>)
    2faa:	781b      	ldrb	r3, [r3, #0]
    2fac:	2b00      	cmp	r3, #0
    2fae:	d10d      	bne.n	2fcc <nm_spi_init+0x3c>
		reg &= ~0x70;
    2fb0:	337c      	adds	r3, #124	; 0x7c
    2fb2:	9900      	ldr	r1, [sp, #0]
    2fb4:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    2fb6:	3b2c      	subs	r3, #44	; 0x2c
    2fb8:	4319      	orrs	r1, r3
    2fba:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    2fbc:	482d      	ldr	r0, [pc, #180]	; (3074 <nm_spi_init+0xe4>)
    2fbe:	4b2f      	ldr	r3, [pc, #188]	; (307c <nm_spi_init+0xec>)
    2fc0:	4798      	blx	r3
    2fc2:	1e04      	subs	r4, r0, #0
    2fc4:	d039      	beq.n	303a <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    2fc6:	2201      	movs	r2, #1
    2fc8:	4b29      	ldr	r3, [pc, #164]	; (3070 <nm_spi_init+0xe0>)
    2fca:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    2fcc:	a901      	add	r1, sp, #4
    2fce:	2080      	movs	r0, #128	; 0x80
    2fd0:	0140      	lsls	r0, r0, #5
    2fd2:	4b29      	ldr	r3, [pc, #164]	; (3078 <nm_spi_init+0xe8>)
    2fd4:	4798      	blx	r3
    2fd6:	2800      	cmp	r0, #0
    2fd8:	d03b      	beq.n	3052 <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    2fda:	4c26      	ldr	r4, [pc, #152]	; (3074 <nm_spi_init+0xe4>)
    2fdc:	0020      	movs	r0, r4
    2fde:	4b28      	ldr	r3, [pc, #160]	; (3080 <nm_spi_init+0xf0>)
    2fe0:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    2fe2:	2370      	movs	r3, #112	; 0x70
    2fe4:	0001      	movs	r1, r0
    2fe6:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    2fe8:	2050      	movs	r0, #80	; 0x50
    2fea:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    2fec:	0020      	movs	r0, r4
    2fee:	4b25      	ldr	r3, [pc, #148]	; (3084 <nm_spi_init+0xf4>)
    2ff0:	4798      	blx	r3
	return M2M_SUCCESS;
    2ff2:	2400      	movs	r4, #0
}
    2ff4:	0020      	movs	r0, r4
    2ff6:	b002      	add	sp, #8
    2ff8:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    2ffa:	2201      	movs	r2, #1
    2ffc:	4b1c      	ldr	r3, [pc, #112]	; (3070 <nm_spi_init+0xe0>)
    2ffe:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    3000:	4a21      	ldr	r2, [pc, #132]	; (3088 <nm_spi_init+0xf8>)
    3002:	4922      	ldr	r1, [pc, #136]	; (308c <nm_spi_init+0xfc>)
    3004:	4822      	ldr	r0, [pc, #136]	; (3090 <nm_spi_init+0x100>)
    3006:	4b23      	ldr	r3, [pc, #140]	; (3094 <nm_spi_init+0x104>)
    3008:	4798      	blx	r3
    300a:	4823      	ldr	r0, [pc, #140]	; (3098 <nm_spi_init+0x108>)
    300c:	4b23      	ldr	r3, [pc, #140]	; (309c <nm_spi_init+0x10c>)
    300e:	4798      	blx	r3
    3010:	200d      	movs	r0, #13
    3012:	4b23      	ldr	r3, [pc, #140]	; (30a0 <nm_spi_init+0x110>)
    3014:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    3016:	4669      	mov	r1, sp
    3018:	4816      	ldr	r0, [pc, #88]	; (3074 <nm_spi_init+0xe4>)
    301a:	4b17      	ldr	r3, [pc, #92]	; (3078 <nm_spi_init+0xe8>)
    301c:	4798      	blx	r3
    301e:	1e04      	subs	r4, r0, #0
    3020:	d1c2      	bne.n	2fa8 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    3022:	4a20      	ldr	r2, [pc, #128]	; (30a4 <nm_spi_init+0x114>)
    3024:	4919      	ldr	r1, [pc, #100]	; (308c <nm_spi_init+0xfc>)
    3026:	481a      	ldr	r0, [pc, #104]	; (3090 <nm_spi_init+0x100>)
    3028:	4b1a      	ldr	r3, [pc, #104]	; (3094 <nm_spi_init+0x104>)
    302a:	4798      	blx	r3
    302c:	481e      	ldr	r0, [pc, #120]	; (30a8 <nm_spi_init+0x118>)
    302e:	4b1b      	ldr	r3, [pc, #108]	; (309c <nm_spi_init+0x10c>)
    3030:	4798      	blx	r3
    3032:	200d      	movs	r0, #13
    3034:	4b1a      	ldr	r3, [pc, #104]	; (30a0 <nm_spi_init+0x110>)
    3036:	4798      	blx	r3
			return 0;
    3038:	e7dc      	b.n	2ff4 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    303a:	4a1c      	ldr	r2, [pc, #112]	; (30ac <nm_spi_init+0x11c>)
    303c:	4913      	ldr	r1, [pc, #76]	; (308c <nm_spi_init+0xfc>)
    303e:	4814      	ldr	r0, [pc, #80]	; (3090 <nm_spi_init+0x100>)
    3040:	4b14      	ldr	r3, [pc, #80]	; (3094 <nm_spi_init+0x104>)
    3042:	4798      	blx	r3
    3044:	481a      	ldr	r0, [pc, #104]	; (30b0 <nm_spi_init+0x120>)
    3046:	4b15      	ldr	r3, [pc, #84]	; (309c <nm_spi_init+0x10c>)
    3048:	4798      	blx	r3
    304a:	200d      	movs	r0, #13
    304c:	4b14      	ldr	r3, [pc, #80]	; (30a0 <nm_spi_init+0x110>)
    304e:	4798      	blx	r3
			return 0;
    3050:	e7d0      	b.n	2ff4 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    3052:	4a18      	ldr	r2, [pc, #96]	; (30b4 <nm_spi_init+0x124>)
    3054:	490d      	ldr	r1, [pc, #52]	; (308c <nm_spi_init+0xfc>)
    3056:	480e      	ldr	r0, [pc, #56]	; (3090 <nm_spi_init+0x100>)
    3058:	4b0e      	ldr	r3, [pc, #56]	; (3094 <nm_spi_init+0x104>)
    305a:	4798      	blx	r3
    305c:	4816      	ldr	r0, [pc, #88]	; (30b8 <nm_spi_init+0x128>)
    305e:	4b0f      	ldr	r3, [pc, #60]	; (309c <nm_spi_init+0x10c>)
    3060:	4798      	blx	r3
    3062:	200d      	movs	r0, #13
    3064:	4b0e      	ldr	r3, [pc, #56]	; (30a0 <nm_spi_init+0x110>)
    3066:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    3068:	2406      	movs	r4, #6
    306a:	4264      	negs	r4, r4
    306c:	e7c2      	b.n	2ff4 <nm_spi_init+0x64>
    306e:	46c0      	nop			; (mov r8, r8)
    3070:	2000020c 	.word	0x2000020c
    3074:	0000e824 	.word	0x0000e824
    3078:	00002dad 	.word	0x00002dad
    307c:	00002c9d 	.word	0x00002c9d
    3080:	00002f4d 	.word	0x00002f4d
    3084:	00002f79 	.word	0x00002f79
    3088:	000004c7 	.word	0x000004c7
    308c:	00009c88 	.word	0x00009c88
    3090:	00009544 	.word	0x00009544
    3094:	00007eed 	.word	0x00007eed
    3098:	00009d94 	.word	0x00009d94
    309c:	00008009 	.word	0x00008009
    30a0:	00007f21 	.word	0x00007f21
    30a4:	000004ca 	.word	0x000004ca
    30a8:	00009de4 	.word	0x00009de4
    30ac:	000004d4 	.word	0x000004d4
    30b0:	00009e10 	.word	0x00009e10
    30b4:	000004de 	.word	0x000004de
    30b8:	00009e44 	.word	0x00009e44

000030bc <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    30bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    30be:	46de      	mov	lr, fp
    30c0:	4657      	mov	r7, sl
    30c2:	464e      	mov	r6, r9
    30c4:	4645      	mov	r5, r8
    30c6:	b5e0      	push	{r5, r6, r7, lr}
    30c8:	b087      	sub	sp, #28
    30ca:	9002      	str	r0, [sp, #8]
    30cc:	9103      	str	r1, [sp, #12]
    30ce:	0016      	movs	r6, r2
    30d0:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    30d2:	2300      	movs	r3, #0
    30d4:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    30d6:	2400      	movs	r4, #0
    30d8:	4b3e      	ldr	r3, [pc, #248]	; (31d4 <nm_spi_read_block+0x118>)
    30da:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    30dc:	46a9      	mov	r9, r5
    30de:	e037      	b.n	3150 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    30e0:	2301      	movs	r3, #1
    30e2:	469b      	mov	fp, r3
		size = 2;
    30e4:	3601      	adds	r6, #1
    30e6:	e035      	b.n	3154 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    30e8:	20c8      	movs	r0, #200	; 0xc8
    30ea:	4b3b      	ldr	r3, [pc, #236]	; (31d8 <nm_spi_read_block+0x11c>)
    30ec:	4798      	blx	r3
	if (result != N_OK) {
    30ee:	2801      	cmp	r0, #1
    30f0:	d045      	beq.n	317e <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    30f2:	4a3a      	ldr	r2, [pc, #232]	; (31dc <nm_spi_read_block+0x120>)
    30f4:	493a      	ldr	r1, [pc, #232]	; (31e0 <nm_spi_read_block+0x124>)
    30f6:	483b      	ldr	r0, [pc, #236]	; (31e4 <nm_spi_read_block+0x128>)
    30f8:	4f3b      	ldr	r7, [pc, #236]	; (31e8 <nm_spi_read_block+0x12c>)
    30fa:	47b8      	blx	r7
    30fc:	9902      	ldr	r1, [sp, #8]
    30fe:	483b      	ldr	r0, [pc, #236]	; (31ec <nm_spi_read_block+0x130>)
    3100:	47b8      	blx	r7
    3102:	200d      	movs	r0, #13
    3104:	4b3a      	ldr	r3, [pc, #232]	; (31f0 <nm_spi_read_block+0x134>)
    3106:	4798      	blx	r3
		nm_bsp_sleep(1);
    3108:	2001      	movs	r0, #1
    310a:	4f3a      	ldr	r7, [pc, #232]	; (31f4 <nm_spi_read_block+0x138>)
    310c:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    310e:	9400      	str	r4, [sp, #0]
    3110:	0023      	movs	r3, r4
    3112:	0022      	movs	r2, r4
    3114:	0021      	movs	r1, r4
    3116:	20cf      	movs	r0, #207	; 0xcf
    3118:	4d2e      	ldr	r5, [pc, #184]	; (31d4 <nm_spi_read_block+0x118>)
    311a:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    311c:	20cf      	movs	r0, #207	; 0xcf
    311e:	4b2e      	ldr	r3, [pc, #184]	; (31d8 <nm_spi_read_block+0x11c>)
    3120:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    3122:	4a35      	ldr	r2, [pc, #212]	; (31f8 <nm_spi_read_block+0x13c>)
    3124:	492e      	ldr	r1, [pc, #184]	; (31e0 <nm_spi_read_block+0x124>)
    3126:	482f      	ldr	r0, [pc, #188]	; (31e4 <nm_spi_read_block+0x128>)
    3128:	4b2f      	ldr	r3, [pc, #188]	; (31e8 <nm_spi_read_block+0x12c>)
    312a:	469a      	mov	sl, r3
    312c:	4798      	blx	r3
    312e:	0033      	movs	r3, r6
    3130:	9a02      	ldr	r2, [sp, #8]
    3132:	4649      	mov	r1, r9
    3134:	4831      	ldr	r0, [pc, #196]	; (31fc <nm_spi_read_block+0x140>)
    3136:	47d0      	blx	sl
    3138:	200d      	movs	r0, #13
    313a:	4b2d      	ldr	r3, [pc, #180]	; (31f0 <nm_spi_read_block+0x134>)
    313c:	4798      	blx	r3
		nm_bsp_sleep(1);
    313e:	2001      	movs	r0, #1
    3140:	47b8      	blx	r7
    3142:	2301      	movs	r3, #1
    3144:	425b      	negs	r3, r3
    3146:	469c      	mov	ip, r3
    3148:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    314a:	464b      	mov	r3, r9
    314c:	2b00      	cmp	r3, #0
    314e:	d038      	beq.n	31c2 <nm_spi_read_block+0x106>
	if (size == 1)
    3150:	2e01      	cmp	r6, #1
    3152:	d0c5      	beq.n	30e0 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    3154:	9400      	str	r4, [sp, #0]
    3156:	0033      	movs	r3, r6
    3158:	0022      	movs	r2, r4
    315a:	9d02      	ldr	r5, [sp, #8]
    315c:	0029      	movs	r1, r5
    315e:	20c8      	movs	r0, #200	; 0xc8
    3160:	47c0      	blx	r8
	if (result != N_OK) {
    3162:	2801      	cmp	r0, #1
    3164:	d0c0      	beq.n	30e8 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    3166:	4a26      	ldr	r2, [pc, #152]	; (3200 <nm_spi_read_block+0x144>)
    3168:	491d      	ldr	r1, [pc, #116]	; (31e0 <nm_spi_read_block+0x124>)
    316a:	481e      	ldr	r0, [pc, #120]	; (31e4 <nm_spi_read_block+0x128>)
    316c:	4f1e      	ldr	r7, [pc, #120]	; (31e8 <nm_spi_read_block+0x12c>)
    316e:	47b8      	blx	r7
    3170:	0029      	movs	r1, r5
    3172:	4824      	ldr	r0, [pc, #144]	; (3204 <nm_spi_read_block+0x148>)
    3174:	47b8      	blx	r7
    3176:	200d      	movs	r0, #13
    3178:	4b1d      	ldr	r3, [pc, #116]	; (31f0 <nm_spi_read_block+0x134>)
    317a:	4798      	blx	r3
    317c:	e7c4      	b.n	3108 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    317e:	465b      	mov	r3, fp
    3180:	2b00      	cmp	r3, #0
    3182:	d016      	beq.n	31b2 <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    3184:	af05      	add	r7, sp, #20
    3186:	0022      	movs	r2, r4
    3188:	0031      	movs	r1, r6
    318a:	0038      	movs	r0, r7
    318c:	4b1e      	ldr	r3, [pc, #120]	; (3208 <nm_spi_read_block+0x14c>)
    318e:	4798      	blx	r3
		buf[0] = tmp[0];
    3190:	783b      	ldrb	r3, [r7, #0]
    3192:	9a03      	ldr	r2, [sp, #12]
    3194:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    3196:	2801      	cmp	r0, #1
    3198:	d011      	beq.n	31be <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    319a:	4a1c      	ldr	r2, [pc, #112]	; (320c <nm_spi_read_block+0x150>)
    319c:	4910      	ldr	r1, [pc, #64]	; (31e0 <nm_spi_read_block+0x124>)
    319e:	4811      	ldr	r0, [pc, #68]	; (31e4 <nm_spi_read_block+0x128>)
    31a0:	4b11      	ldr	r3, [pc, #68]	; (31e8 <nm_spi_read_block+0x12c>)
    31a2:	4798      	blx	r3
    31a4:	481a      	ldr	r0, [pc, #104]	; (3210 <nm_spi_read_block+0x154>)
    31a6:	4b1b      	ldr	r3, [pc, #108]	; (3214 <nm_spi_read_block+0x158>)
    31a8:	4798      	blx	r3
    31aa:	200d      	movs	r0, #13
    31ac:	4b10      	ldr	r3, [pc, #64]	; (31f0 <nm_spi_read_block+0x134>)
    31ae:	4798      	blx	r3
    31b0:	e7aa      	b.n	3108 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    31b2:	0022      	movs	r2, r4
    31b4:	0031      	movs	r1, r6
    31b6:	9803      	ldr	r0, [sp, #12]
    31b8:	4b13      	ldr	r3, [pc, #76]	; (3208 <nm_spi_read_block+0x14c>)
    31ba:	4798      	blx	r3
    31bc:	e7eb      	b.n	3196 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    31be:	2000      	movs	r0, #0
    31c0:	e001      	b.n	31c6 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    31c2:	2006      	movs	r0, #6
    31c4:	4240      	negs	r0, r0

	return s8Ret;
}
    31c6:	b007      	add	sp, #28
    31c8:	bc3c      	pop	{r2, r3, r4, r5}
    31ca:	4690      	mov	r8, r2
    31cc:	4699      	mov	r9, r3
    31ce:	46a2      	mov	sl, r4
    31d0:	46ab      	mov	fp, r5
    31d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31d4:	000028e1 	.word	0x000028e1
    31d8:	00002a81 	.word	0x00002a81
    31dc:	00000463 	.word	0x00000463
    31e0:	00009c7c 	.word	0x00009c7c
    31e4:	00009544 	.word	0x00009544
    31e8:	00007eed 	.word	0x00007eed
    31ec:	00009e98 	.word	0x00009e98
    31f0:	00007f21 	.word	0x00007f21
    31f4:	00000d29 	.word	0x00000d29
    31f8:	00000484 	.word	0x00000484
    31fc:	00009ef8 	.word	0x00009ef8
    3200:	0000045d 	.word	0x0000045d
    3204:	00009e68 	.word	0x00009e68
    3208:	00002b55 	.word	0x00002b55
    320c:	00000473 	.word	0x00000473
    3210:	00009ed0 	.word	0x00009ed0
    3214:	00008009 	.word	0x00008009

00003218 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3218:	b5f0      	push	{r4, r5, r6, r7, lr}
    321a:	46de      	mov	lr, fp
    321c:	4647      	mov	r7, r8
    321e:	b580      	push	{r7, lr}
    3220:	b089      	sub	sp, #36	; 0x24
    3222:	9004      	str	r0, [sp, #16]
    3224:	468b      	mov	fp, r1
    3226:	9203      	str	r2, [sp, #12]
    3228:	260a      	movs	r6, #10
    322a:	2780      	movs	r7, #128	; 0x80
    322c:	01bf      	lsls	r7, r7, #6
    322e:	466b      	mov	r3, sp
    3230:	82df      	strh	r7, [r3, #22]
    3232:	0035      	movs	r5, r6
    3234:	e02d      	b.n	3292 <nm_spi_write_block+0x7a>
		size = 2;
    3236:	3301      	adds	r3, #1
    3238:	9303      	str	r3, [sp, #12]
    323a:	e02d      	b.n	3298 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    323c:	4a83      	ldr	r2, [pc, #524]	; (344c <nm_spi_write_block+0x234>)
    323e:	4984      	ldr	r1, [pc, #528]	; (3450 <nm_spi_write_block+0x238>)
    3240:	4884      	ldr	r0, [pc, #528]	; (3454 <nm_spi_write_block+0x23c>)
    3242:	4c85      	ldr	r4, [pc, #532]	; (3458 <nm_spi_write_block+0x240>)
    3244:	47a0      	blx	r4
    3246:	0031      	movs	r1, r6
    3248:	4884      	ldr	r0, [pc, #528]	; (345c <nm_spi_write_block+0x244>)
    324a:	47a0      	blx	r4
    324c:	200d      	movs	r0, #13
    324e:	4b84      	ldr	r3, [pc, #528]	; (3460 <nm_spi_write_block+0x248>)
    3250:	4798      	blx	r3
		nm_bsp_sleep(1);
    3252:	2001      	movs	r0, #1
    3254:	4c83      	ldr	r4, [pc, #524]	; (3464 <nm_spi_write_block+0x24c>)
    3256:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3258:	2300      	movs	r3, #0
    325a:	9300      	str	r3, [sp, #0]
    325c:	2200      	movs	r2, #0
    325e:	2100      	movs	r1, #0
    3260:	20cf      	movs	r0, #207	; 0xcf
    3262:	4e81      	ldr	r6, [pc, #516]	; (3468 <nm_spi_write_block+0x250>)
    3264:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    3266:	20cf      	movs	r0, #207	; 0xcf
    3268:	4b80      	ldr	r3, [pc, #512]	; (346c <nm_spi_write_block+0x254>)
    326a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    326c:	4a80      	ldr	r2, [pc, #512]	; (3470 <nm_spi_write_block+0x258>)
    326e:	4978      	ldr	r1, [pc, #480]	; (3450 <nm_spi_write_block+0x238>)
    3270:	4878      	ldr	r0, [pc, #480]	; (3454 <nm_spi_write_block+0x23c>)
    3272:	4e79      	ldr	r6, [pc, #484]	; (3458 <nm_spi_write_block+0x240>)
    3274:	47b0      	blx	r6
    3276:	9b03      	ldr	r3, [sp, #12]
    3278:	9a04      	ldr	r2, [sp, #16]
    327a:	0029      	movs	r1, r5
    327c:	487d      	ldr	r0, [pc, #500]	; (3474 <nm_spi_write_block+0x25c>)
    327e:	47b0      	blx	r6
    3280:	200d      	movs	r0, #13
    3282:	4b77      	ldr	r3, [pc, #476]	; (3460 <nm_spi_write_block+0x248>)
    3284:	4798      	blx	r3
		nm_bsp_sleep(1);
    3286:	2001      	movs	r0, #1
    3288:	47a0      	blx	r4
    328a:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    328c:	2d00      	cmp	r5, #0
    328e:	d100      	bne.n	3292 <nm_spi_write_block+0x7a>
    3290:	e0d5      	b.n	343e <nm_spi_write_block+0x226>
	if (size == 1)
    3292:	9b03      	ldr	r3, [sp, #12]
    3294:	2b01      	cmp	r3, #1
    3296:	d0ce      	beq.n	3236 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    3298:	2300      	movs	r3, #0
    329a:	9300      	str	r3, [sp, #0]
    329c:	9b03      	ldr	r3, [sp, #12]
    329e:	2200      	movs	r2, #0
    32a0:	9e04      	ldr	r6, [sp, #16]
    32a2:	0031      	movs	r1, r6
    32a4:	20c7      	movs	r0, #199	; 0xc7
    32a6:	4c70      	ldr	r4, [pc, #448]	; (3468 <nm_spi_write_block+0x250>)
    32a8:	47a0      	blx	r4
	if (result != N_OK) {
    32aa:	2801      	cmp	r0, #1
    32ac:	d1c6      	bne.n	323c <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    32ae:	20c7      	movs	r0, #199	; 0xc7
    32b0:	4b6e      	ldr	r3, [pc, #440]	; (346c <nm_spi_write_block+0x254>)
    32b2:	4798      	blx	r3
	if (result != N_OK) {
    32b4:	2801      	cmp	r0, #1
    32b6:	d00c      	beq.n	32d2 <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    32b8:	22f4      	movs	r2, #244	; 0xf4
    32ba:	0092      	lsls	r2, r2, #2
    32bc:	4964      	ldr	r1, [pc, #400]	; (3450 <nm_spi_write_block+0x238>)
    32be:	4865      	ldr	r0, [pc, #404]	; (3454 <nm_spi_write_block+0x23c>)
    32c0:	4c65      	ldr	r4, [pc, #404]	; (3458 <nm_spi_write_block+0x240>)
    32c2:	47a0      	blx	r4
    32c4:	9904      	ldr	r1, [sp, #16]
    32c6:	486c      	ldr	r0, [pc, #432]	; (3478 <nm_spi_write_block+0x260>)
    32c8:	47a0      	blx	r4
    32ca:	200d      	movs	r0, #13
    32cc:	4b64      	ldr	r3, [pc, #400]	; (3460 <nm_spi_write_block+0x248>)
    32ce:	4798      	blx	r3
    32d0:	e7bf      	b.n	3252 <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    32d2:	2200      	movs	r2, #0
    32d4:	ab07      	add	r3, sp, #28
    32d6:	801a      	strh	r2, [r3, #0]
    32d8:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    32da:	2600      	movs	r6, #0
				order = 0x1;
    32dc:	46a8      	mov	r8, r5
    32de:	0035      	movs	r5, r6
    32e0:	0026      	movs	r6, r4
    32e2:	e021      	b.n	3328 <nm_spi_write_block+0x110>
				order = 0x2;
    32e4:	2300      	movs	r3, #0
    32e6:	42b7      	cmp	r7, r6
    32e8:	415b      	adcs	r3, r3
    32ea:	3302      	adds	r3, #2
		cmd |= order;
    32ec:	200b      	movs	r0, #11
    32ee:	aa04      	add	r2, sp, #16
    32f0:	4694      	mov	ip, r2
    32f2:	4460      	add	r0, ip
    32f4:	2210      	movs	r2, #16
    32f6:	4252      	negs	r2, r2
    32f8:	4313      	orrs	r3, r2
    32fa:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    32fc:	2101      	movs	r1, #1
    32fe:	4b5f      	ldr	r3, [pc, #380]	; (347c <nm_spi_write_block+0x264>)
    3300:	4798      	blx	r3
    3302:	2800      	cmp	r0, #0
    3304:	d11d      	bne.n	3342 <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    3306:	465b      	mov	r3, fp
    3308:	1958      	adds	r0, r3, r5
    330a:	0021      	movs	r1, r4
    330c:	4b5b      	ldr	r3, [pc, #364]	; (347c <nm_spi_write_block+0x264>)
    330e:	4798      	blx	r3
    3310:	2800      	cmp	r0, #0
    3312:	d130      	bne.n	3376 <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    3314:	4b5a      	ldr	r3, [pc, #360]	; (3480 <nm_spi_write_block+0x268>)
    3316:	781b      	ldrb	r3, [r3, #0]
    3318:	2b00      	cmp	r3, #0
    331a:	d039      	beq.n	3390 <nm_spi_write_block+0x178>
		ix += nbytes;
    331c:	1965      	adds	r5, r4, r5
    331e:	b22d      	sxth	r5, r5
		sz -= nbytes;
    3320:	1b36      	subs	r6, r6, r4
    3322:	b2b6      	uxth	r6, r6
	} while (sz);
    3324:	2e00      	cmp	r6, #0
    3326:	d053      	beq.n	33d0 <nm_spi_write_block+0x1b8>
    3328:	1c34      	adds	r4, r6, #0
    332a:	42be      	cmp	r6, r7
    332c:	d901      	bls.n	3332 <nm_spi_write_block+0x11a>
    332e:	466b      	mov	r3, sp
    3330:	8adc      	ldrh	r4, [r3, #22]
    3332:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    3334:	2d00      	cmp	r5, #0
    3336:	d1d5      	bne.n	32e4 <nm_spi_write_block+0xcc>
				order = 0x3;
    3338:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    333a:	42be      	cmp	r6, r7
    333c:	d9d6      	bls.n	32ec <nm_spi_write_block+0xd4>
				order = 0x1;
    333e:	3b02      	subs	r3, #2
    3340:	e7d4      	b.n	32ec <nm_spi_write_block+0xd4>
    3342:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    3344:	22d4      	movs	r2, #212	; 0xd4
    3346:	0092      	lsls	r2, r2, #2
    3348:	494e      	ldr	r1, [pc, #312]	; (3484 <nm_spi_write_block+0x26c>)
    334a:	4842      	ldr	r0, [pc, #264]	; (3454 <nm_spi_write_block+0x23c>)
    334c:	4b42      	ldr	r3, [pc, #264]	; (3458 <nm_spi_write_block+0x240>)
    334e:	4798      	blx	r3
    3350:	484d      	ldr	r0, [pc, #308]	; (3488 <nm_spi_write_block+0x270>)
    3352:	4b4e      	ldr	r3, [pc, #312]	; (348c <nm_spi_write_block+0x274>)
    3354:	4798      	blx	r3
    3356:	200d      	movs	r0, #13
    3358:	4b41      	ldr	r3, [pc, #260]	; (3460 <nm_spi_write_block+0x248>)
    335a:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    335c:	22f8      	movs	r2, #248	; 0xf8
    335e:	0092      	lsls	r2, r2, #2
    3360:	493b      	ldr	r1, [pc, #236]	; (3450 <nm_spi_write_block+0x238>)
    3362:	483c      	ldr	r0, [pc, #240]	; (3454 <nm_spi_write_block+0x23c>)
    3364:	4b3c      	ldr	r3, [pc, #240]	; (3458 <nm_spi_write_block+0x240>)
    3366:	4798      	blx	r3
    3368:	4849      	ldr	r0, [pc, #292]	; (3490 <nm_spi_write_block+0x278>)
    336a:	4b48      	ldr	r3, [pc, #288]	; (348c <nm_spi_write_block+0x274>)
    336c:	4798      	blx	r3
    336e:	200d      	movs	r0, #13
    3370:	4b3b      	ldr	r3, [pc, #236]	; (3460 <nm_spi_write_block+0x248>)
    3372:	4798      	blx	r3
    3374:	e76d      	b.n	3252 <nm_spi_write_block+0x3a>
    3376:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    3378:	4a46      	ldr	r2, [pc, #280]	; (3494 <nm_spi_write_block+0x27c>)
    337a:	4942      	ldr	r1, [pc, #264]	; (3484 <nm_spi_write_block+0x26c>)
    337c:	4835      	ldr	r0, [pc, #212]	; (3454 <nm_spi_write_block+0x23c>)
    337e:	4b36      	ldr	r3, [pc, #216]	; (3458 <nm_spi_write_block+0x240>)
    3380:	4798      	blx	r3
    3382:	4845      	ldr	r0, [pc, #276]	; (3498 <nm_spi_write_block+0x280>)
    3384:	4b41      	ldr	r3, [pc, #260]	; (348c <nm_spi_write_block+0x274>)
    3386:	4798      	blx	r3
    3388:	200d      	movs	r0, #13
    338a:	4b35      	ldr	r3, [pc, #212]	; (3460 <nm_spi_write_block+0x248>)
    338c:	4798      	blx	r3
    338e:	e7e5      	b.n	335c <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    3390:	2102      	movs	r1, #2
    3392:	a807      	add	r0, sp, #28
    3394:	4b39      	ldr	r3, [pc, #228]	; (347c <nm_spi_write_block+0x264>)
    3396:	4798      	blx	r3
    3398:	2800      	cmp	r0, #0
    339a:	d0bf      	beq.n	331c <nm_spi_write_block+0x104>
    339c:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    339e:	4a3f      	ldr	r2, [pc, #252]	; (349c <nm_spi_write_block+0x284>)
    33a0:	4938      	ldr	r1, [pc, #224]	; (3484 <nm_spi_write_block+0x26c>)
    33a2:	482c      	ldr	r0, [pc, #176]	; (3454 <nm_spi_write_block+0x23c>)
    33a4:	4b2c      	ldr	r3, [pc, #176]	; (3458 <nm_spi_write_block+0x240>)
    33a6:	4798      	blx	r3
    33a8:	483d      	ldr	r0, [pc, #244]	; (34a0 <nm_spi_write_block+0x288>)
    33aa:	4b38      	ldr	r3, [pc, #224]	; (348c <nm_spi_write_block+0x274>)
    33ac:	4798      	blx	r3
    33ae:	200d      	movs	r0, #13
    33b0:	4b2b      	ldr	r3, [pc, #172]	; (3460 <nm_spi_write_block+0x248>)
    33b2:	4798      	blx	r3
    33b4:	e7d2      	b.n	335c <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    33b6:	223c      	movs	r2, #60	; 0x3c
    33b8:	32ff      	adds	r2, #255	; 0xff
    33ba:	493a      	ldr	r1, [pc, #232]	; (34a4 <nm_spi_write_block+0x28c>)
    33bc:	4825      	ldr	r0, [pc, #148]	; (3454 <nm_spi_write_block+0x23c>)
    33be:	4b26      	ldr	r3, [pc, #152]	; (3458 <nm_spi_write_block+0x240>)
    33c0:	4798      	blx	r3
    33c2:	4839      	ldr	r0, [pc, #228]	; (34a8 <nm_spi_write_block+0x290>)
    33c4:	4b31      	ldr	r3, [pc, #196]	; (348c <nm_spi_write_block+0x274>)
    33c6:	4798      	blx	r3
    33c8:	200d      	movs	r0, #13
    33ca:	4b25      	ldr	r3, [pc, #148]	; (3460 <nm_spi_write_block+0x248>)
    33cc:	4798      	blx	r3
    33ce:	e027      	b.n	3420 <nm_spi_write_block+0x208>
    33d0:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    33d2:	4b2b      	ldr	r3, [pc, #172]	; (3480 <nm_spi_write_block+0x268>)
    33d4:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    33d6:	1e63      	subs	r3, r4, #1
    33d8:	419c      	sbcs	r4, r3
    33da:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    33dc:	b2a1      	uxth	r1, r4
    33de:	a807      	add	r0, sp, #28
    33e0:	4b32      	ldr	r3, [pc, #200]	; (34ac <nm_spi_write_block+0x294>)
    33e2:	4798      	blx	r3
    33e4:	2800      	cmp	r0, #0
    33e6:	d1e6      	bne.n	33b6 <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    33e8:	ab08      	add	r3, sp, #32
    33ea:	191b      	adds	r3, r3, r4
    33ec:	3b05      	subs	r3, #5
    33ee:	781b      	ldrb	r3, [r3, #0]
    33f0:	2b00      	cmp	r3, #0
    33f2:	d106      	bne.n	3402 <nm_spi_write_block+0x1ea>
    33f4:	ab08      	add	r3, sp, #32
    33f6:	469c      	mov	ip, r3
    33f8:	4464      	add	r4, ip
    33fa:	3c06      	subs	r4, #6
    33fc:	7823      	ldrb	r3, [r4, #0]
    33fe:	2bc3      	cmp	r3, #195	; 0xc3
    3400:	d01b      	beq.n	343a <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    3402:	22a1      	movs	r2, #161	; 0xa1
    3404:	0052      	lsls	r2, r2, #1
    3406:	4927      	ldr	r1, [pc, #156]	; (34a4 <nm_spi_write_block+0x28c>)
    3408:	4812      	ldr	r0, [pc, #72]	; (3454 <nm_spi_write_block+0x23c>)
    340a:	4c13      	ldr	r4, [pc, #76]	; (3458 <nm_spi_write_block+0x240>)
    340c:	47a0      	blx	r4
    340e:	a907      	add	r1, sp, #28
    3410:	788b      	ldrb	r3, [r1, #2]
    3412:	784a      	ldrb	r2, [r1, #1]
    3414:	7809      	ldrb	r1, [r1, #0]
    3416:	4826      	ldr	r0, [pc, #152]	; (34b0 <nm_spi_write_block+0x298>)
    3418:	47a0      	blx	r4
    341a:	200d      	movs	r0, #13
    341c:	4b10      	ldr	r3, [pc, #64]	; (3460 <nm_spi_write_block+0x248>)
    341e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3420:	22fa      	movs	r2, #250	; 0xfa
    3422:	0092      	lsls	r2, r2, #2
    3424:	490a      	ldr	r1, [pc, #40]	; (3450 <nm_spi_write_block+0x238>)
    3426:	480b      	ldr	r0, [pc, #44]	; (3454 <nm_spi_write_block+0x23c>)
    3428:	4b0b      	ldr	r3, [pc, #44]	; (3458 <nm_spi_write_block+0x240>)
    342a:	4798      	blx	r3
    342c:	4818      	ldr	r0, [pc, #96]	; (3490 <nm_spi_write_block+0x278>)
    342e:	4b17      	ldr	r3, [pc, #92]	; (348c <nm_spi_write_block+0x274>)
    3430:	4798      	blx	r3
    3432:	200d      	movs	r0, #13
    3434:	4b0a      	ldr	r3, [pc, #40]	; (3460 <nm_spi_write_block+0x248>)
    3436:	4798      	blx	r3
    3438:	e70b      	b.n	3252 <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    343a:	2000      	movs	r0, #0
    343c:	e001      	b.n	3442 <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    343e:	2006      	movs	r0, #6
    3440:	4240      	negs	r0, r0

	return s8Ret;
}
    3442:	b009      	add	sp, #36	; 0x24
    3444:	bc0c      	pop	{r2, r3}
    3446:	4690      	mov	r8, r2
    3448:	469b      	mov	fp, r3
    344a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    344c:	000003ca 	.word	0x000003ca
    3450:	00009c5c 	.word	0x00009c5c
    3454:	00009544 	.word	0x00009544
    3458:	00007eed 	.word	0x00007eed
    345c:	00009f14 	.word	0x00009f14
    3460:	00007f21 	.word	0x00007f21
    3464:	00000d29 	.word	0x00000d29
    3468:	000028e1 	.word	0x000028e1
    346c:	00002a81 	.word	0x00002a81
    3470:	000003f2 	.word	0x000003f2
    3474:	00009ef8 	.word	0x00009ef8
    3478:	00009f44 	.word	0x00009f44
    347c:	000028c1 	.word	0x000028c1
    3480:	2000020c 	.word	0x2000020c
    3484:	00009c3c 	.word	0x00009c3c
    3488:	00009f7c 	.word	0x00009f7c
    348c:	00008009 	.word	0x00008009
    3490:	0000a070 	.word	0x0000a070
    3494:	00000359 	.word	0x00000359
    3498:	00009fb4 	.word	0x00009fb4
    349c:	00000363 	.word	0x00000363
    34a0:	00009fe8 	.word	0x00009fe8
    34a4:	00009c10 	.word	0x00009c10
    34a8:	0000a020 	.word	0x0000a020
    34ac:	00002a61 	.word	0x00002a61
    34b0:	0000a040 	.word	0x0000a040

000034b4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    34b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34b6:	46de      	mov	lr, fp
    34b8:	4657      	mov	r7, sl
    34ba:	464e      	mov	r6, r9
    34bc:	4645      	mov	r5, r8
    34be:	b5e0      	push	{r5, r6, r7, lr}
    34c0:	b085      	sub	sp, #20
    34c2:	9001      	str	r0, [sp, #4]
    34c4:	000e      	movs	r6, r1
    34c6:	9202      	str	r2, [sp, #8]
    34c8:	001d      	movs	r5, r3
    34ca:	ab0e      	add	r3, sp, #56	; 0x38
    34cc:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    34ce:	2c00      	cmp	r4, #0
    34d0:	d064      	beq.n	359c <Socket_ReadSocketData+0xe8>
    34d2:	0103      	lsls	r3, r0, #4
    34d4:	4935      	ldr	r1, [pc, #212]	; (35ac <Socket_ReadSocketData+0xf8>)
    34d6:	585b      	ldr	r3, [r3, r1]
    34d8:	2b00      	cmp	r3, #0
    34da:	d05f      	beq.n	359c <Socket_ReadSocketData+0xe8>
    34dc:	0101      	lsls	r1, r0, #4
    34de:	4b33      	ldr	r3, [pc, #204]	; (35ac <Socket_ReadSocketData+0xf8>)
    34e0:	185b      	adds	r3, r3, r1
    34e2:	889b      	ldrh	r3, [r3, #4]
    34e4:	b29b      	uxth	r3, r3
    34e6:	2b00      	cmp	r3, #0
    34e8:	d058      	beq.n	359c <Socket_ReadSocketData+0xe8>
    34ea:	4b30      	ldr	r3, [pc, #192]	; (35ac <Socket_ReadSocketData+0xf8>)
    34ec:	185b      	adds	r3, r3, r1
    34ee:	7a9b      	ldrb	r3, [r3, #10]
    34f0:	2b01      	cmp	r3, #1
    34f2:	d153      	bne.n	359c <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    34f4:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    34f6:	4b2d      	ldr	r3, [pc, #180]	; (35ac <Socket_ReadSocketData+0xf8>)
    34f8:	469b      	mov	fp, r3
    34fa:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    34fc:	465b      	mov	r3, fp
    34fe:	220a      	movs	r2, #10
    3500:	4690      	mov	r8, r2
    3502:	44d8      	add	r8, fp
    3504:	468a      	mov	sl, r1
    3506:	9500      	str	r5, [sp, #0]
    3508:	9303      	str	r3, [sp, #12]
    350a:	e015      	b.n	3538 <Socket_ReadSocketData+0x84>
    350c:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    350e:	2301      	movs	r3, #1
    3510:	e01c      	b.n	354c <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    3512:	3301      	adds	r3, #1
    3514:	2200      	movs	r2, #0
    3516:	2100      	movs	r1, #0
    3518:	2000      	movs	r0, #0
    351a:	4c25      	ldr	r4, [pc, #148]	; (35b0 <Socket_ReadSocketData+0xfc>)
    351c:	47a0      	blx	r4
    351e:	e03d      	b.n	359c <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    3520:	4824      	ldr	r0, [pc, #144]	; (35b4 <Socket_ReadSocketData+0x100>)
    3522:	4d25      	ldr	r5, [pc, #148]	; (35b8 <Socket_ReadSocketData+0x104>)
    3524:	47a8      	blx	r5
    3526:	0021      	movs	r1, r4
    3528:	4824      	ldr	r0, [pc, #144]	; (35bc <Socket_ReadSocketData+0x108>)
    352a:	47a8      	blx	r5
    352c:	200d      	movs	r0, #13
    352e:	4b24      	ldr	r3, [pc, #144]	; (35c0 <Socket_ReadSocketData+0x10c>)
    3530:	4798      	blx	r3
				break;
    3532:	e033      	b.n	359c <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    3534:	2c00      	cmp	r4, #0
    3536:	d031      	beq.n	359c <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    3538:	465b      	mov	r3, fp
    353a:	889b      	ldrh	r3, [r3, #4]
    353c:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    353e:	b21b      	sxth	r3, r3
    3540:	2b00      	cmp	r3, #0
    3542:	dde3      	ble.n	350c <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    3544:	9b03      	ldr	r3, [sp, #12]
    3546:	889d      	ldrh	r5, [r3, #4]
    3548:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    354a:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    354c:	4a17      	ldr	r2, [pc, #92]	; (35ac <Socket_ReadSocketData+0xf8>)
    354e:	4651      	mov	r1, sl
    3550:	5889      	ldr	r1, [r1, r2]
    3552:	002a      	movs	r2, r5
    3554:	9800      	ldr	r0, [sp, #0]
    3556:	4f16      	ldr	r7, [pc, #88]	; (35b0 <Socket_ReadSocketData+0xfc>)
    3558:	47b8      	blx	r7
    355a:	2800      	cmp	r0, #0
    355c:	d1e0      	bne.n	3520 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    355e:	4b13      	ldr	r3, [pc, #76]	; (35ac <Socket_ReadSocketData+0xf8>)
    3560:	4652      	mov	r2, sl
    3562:	58d3      	ldr	r3, [r2, r3]
    3564:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    3566:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    3568:	88f3      	ldrh	r3, [r6, #6]
    356a:	1b5b      	subs	r3, r3, r5
    356c:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    356e:	4b15      	ldr	r3, [pc, #84]	; (35c4 <Socket_ReadSocketData+0x110>)
    3570:	681b      	ldr	r3, [r3, #0]
    3572:	2b00      	cmp	r3, #0
    3574:	d005      	beq.n	3582 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    3576:	4b13      	ldr	r3, [pc, #76]	; (35c4 <Socket_ReadSocketData+0x110>)
    3578:	681b      	ldr	r3, [r3, #0]
    357a:	0032      	movs	r2, r6
    357c:	9902      	ldr	r1, [sp, #8]
    357e:	9801      	ldr	r0, [sp, #4]
    3580:	4798      	blx	r3
				u16ReadCount -= u16Read;
    3582:	1b64      	subs	r4, r4, r5
    3584:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    3586:	9b00      	ldr	r3, [sp, #0]
    3588:	469c      	mov	ip, r3
    358a:	44ac      	add	ip, r5
    358c:	4663      	mov	r3, ip
    358e:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    3590:	4643      	mov	r3, r8
    3592:	781b      	ldrb	r3, [r3, #0]
    3594:	2b00      	cmp	r3, #0
    3596:	d1cd      	bne.n	3534 <Socket_ReadSocketData+0x80>
    3598:	2c00      	cmp	r4, #0
    359a:	d1ba      	bne.n	3512 <Socket_ReadSocketData+0x5e>
	}
}
    359c:	b005      	add	sp, #20
    359e:	bc3c      	pop	{r2, r3, r4, r5}
    35a0:	4690      	mov	r8, r2
    35a2:	4699      	mov	r9, r3
    35a4:	46a2      	mov	sl, r4
    35a6:	46ab      	mov	fp, r5
    35a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35aa:	46c0      	nop			; (mov r8, r8)
    35ac:	2000032c 	.word	0x2000032c
    35b0:	00001855 	.word	0x00001855
    35b4:	00009874 	.word	0x00009874
    35b8:	00007eed 	.word	0x00007eed
    35bc:	0000a2d8 	.word	0x0000a2d8
    35c0:	00007f21 	.word	0x00007f21
    35c4:	200003dc 	.word	0x200003dc

000035c8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    35c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ca:	46d6      	mov	lr, sl
    35cc:	464f      	mov	r7, r9
    35ce:	4646      	mov	r6, r8
    35d0:	b5c0      	push	{r6, r7, lr}
    35d2:	b09a      	sub	sp, #104	; 0x68
    35d4:	000d      	movs	r5, r1
    35d6:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    35d8:	2841      	cmp	r0, #65	; 0x41
    35da:	d039      	beq.n	3650 <m2m_ip_cb+0x88>
    35dc:	2854      	cmp	r0, #84	; 0x54
    35de:	d037      	beq.n	3650 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    35e0:	2842      	cmp	r0, #66	; 0x42
    35e2:	d053      	beq.n	368c <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    35e4:	2843      	cmp	r0, #67	; 0x43
    35e6:	d06a      	beq.n	36be <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    35e8:	2844      	cmp	r0, #68	; 0x44
    35ea:	d100      	bne.n	35ee <m2m_ip_cb+0x26>
    35ec:	e0af      	b.n	374e <m2m_ip_cb+0x186>
    35ee:	284b      	cmp	r0, #75	; 0x4b
    35f0:	d100      	bne.n	35f4 <m2m_ip_cb+0x2c>
    35f2:	e0ac      	b.n	374e <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    35f4:	284a      	cmp	r0, #74	; 0x4a
    35f6:	d100      	bne.n	35fa <m2m_ip_cb+0x32>
    35f8:	e0cf      	b.n	379a <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    35fa:	2846      	cmp	r0, #70	; 0x46
    35fc:	d100      	bne.n	3600 <m2m_ip_cb+0x38>
    35fe:	e0e5      	b.n	37cc <m2m_ip_cb+0x204>
    3600:	2848      	cmp	r0, #72	; 0x48
    3602:	d100      	bne.n	3606 <m2m_ip_cb+0x3e>
    3604:	e10e      	b.n	3824 <m2m_ip_cb+0x25c>
    3606:	284d      	cmp	r0, #77	; 0x4d
    3608:	d100      	bne.n	360c <m2m_ip_cb+0x44>
    360a:	e0dc      	b.n	37c6 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    360c:	2845      	cmp	r0, #69	; 0x45
    360e:	d100      	bne.n	3612 <m2m_ip_cb+0x4a>
    3610:	e12c      	b.n	386c <m2m_ip_cb+0x2a4>
    3612:	2847      	cmp	r0, #71	; 0x47
    3614:	d100      	bne.n	3618 <m2m_ip_cb+0x50>
    3616:	e14d      	b.n	38b4 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3618:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    361a:	284c      	cmp	r0, #76	; 0x4c
    361c:	d100      	bne.n	3620 <m2m_ip_cb+0x58>
    361e:	e126      	b.n	386e <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    3620:	2852      	cmp	r0, #82	; 0x52
    3622:	d12d      	bne.n	3680 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    3624:	2301      	movs	r3, #1
    3626:	2214      	movs	r2, #20
    3628:	a909      	add	r1, sp, #36	; 0x24
    362a:	0020      	movs	r0, r4
    362c:	4ca2      	ldr	r4, [pc, #648]	; (38b8 <m2m_ip_cb+0x2f0>)
    362e:	47a0      	blx	r4
    3630:	2800      	cmp	r0, #0
    3632:	d125      	bne.n	3680 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    3634:	4ba1      	ldr	r3, [pc, #644]	; (38bc <m2m_ip_cb+0x2f4>)
    3636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3638:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    363a:	681b      	ldr	r3, [r3, #0]
    363c:	2b00      	cmp	r3, #0
    363e:	d01f      	beq.n	3680 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    3640:	4b9e      	ldr	r3, [pc, #632]	; (38bc <m2m_ip_cb+0x2f4>)
    3642:	681c      	ldr	r4, [r3, #0]
    3644:	ab09      	add	r3, sp, #36	; 0x24
    3646:	7c1a      	ldrb	r2, [r3, #16]
    3648:	990b      	ldr	r1, [sp, #44]	; 0x2c
    364a:	9809      	ldr	r0, [sp, #36]	; 0x24
    364c:	47a0      	blx	r4
			}
		}
	}
}
    364e:	e017      	b.n	3680 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    3650:	2300      	movs	r3, #0
    3652:	2204      	movs	r2, #4
    3654:	a909      	add	r1, sp, #36	; 0x24
    3656:	0020      	movs	r0, r4
    3658:	4c97      	ldr	r4, [pc, #604]	; (38b8 <m2m_ip_cb+0x2f0>)
    365a:	47a0      	blx	r4
    365c:	2800      	cmp	r0, #0
    365e:	d10f      	bne.n	3680 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    3660:	ab09      	add	r3, sp, #36	; 0x24
    3662:	785a      	ldrb	r2, [r3, #1]
    3664:	ab05      	add	r3, sp, #20
    3666:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3668:	4b95      	ldr	r3, [pc, #596]	; (38c0 <m2m_ip_cb+0x2f8>)
    366a:	681b      	ldr	r3, [r3, #0]
    366c:	2b00      	cmp	r3, #0
    366e:	d007      	beq.n	3680 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    3670:	4b93      	ldr	r3, [pc, #588]	; (38c0 <m2m_ip_cb+0x2f8>)
    3672:	681b      	ldr	r3, [r3, #0]
    3674:	aa09      	add	r2, sp, #36	; 0x24
    3676:	2000      	movs	r0, #0
    3678:	5610      	ldrsb	r0, [r2, r0]
    367a:	aa05      	add	r2, sp, #20
    367c:	2101      	movs	r1, #1
    367e:	4798      	blx	r3
}
    3680:	b01a      	add	sp, #104	; 0x68
    3682:	bc1c      	pop	{r2, r3, r4}
    3684:	4690      	mov	r8, r2
    3686:	4699      	mov	r9, r3
    3688:	46a2      	mov	sl, r4
    368a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    368c:	2300      	movs	r3, #0
    368e:	2204      	movs	r2, #4
    3690:	a909      	add	r1, sp, #36	; 0x24
    3692:	0020      	movs	r0, r4
    3694:	4c88      	ldr	r4, [pc, #544]	; (38b8 <m2m_ip_cb+0x2f0>)
    3696:	47a0      	blx	r4
    3698:	2800      	cmp	r0, #0
    369a:	d1f1      	bne.n	3680 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    369c:	ab09      	add	r3, sp, #36	; 0x24
    369e:	785a      	ldrb	r2, [r3, #1]
    36a0:	ab05      	add	r3, sp, #20
    36a2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    36a4:	4b86      	ldr	r3, [pc, #536]	; (38c0 <m2m_ip_cb+0x2f8>)
    36a6:	681b      	ldr	r3, [r3, #0]
    36a8:	2b00      	cmp	r3, #0
    36aa:	d0e9      	beq.n	3680 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    36ac:	4b84      	ldr	r3, [pc, #528]	; (38c0 <m2m_ip_cb+0x2f8>)
    36ae:	681b      	ldr	r3, [r3, #0]
    36b0:	aa09      	add	r2, sp, #36	; 0x24
    36b2:	2000      	movs	r0, #0
    36b4:	5610      	ldrsb	r0, [r2, r0]
    36b6:	aa05      	add	r2, sp, #20
    36b8:	2102      	movs	r1, #2
    36ba:	4798      	blx	r3
    36bc:	e7e0      	b.n	3680 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    36be:	2300      	movs	r3, #0
    36c0:	220c      	movs	r2, #12
    36c2:	a905      	add	r1, sp, #20
    36c4:	0020      	movs	r0, r4
    36c6:	4c7c      	ldr	r4, [pc, #496]	; (38b8 <m2m_ip_cb+0x2f0>)
    36c8:	47a0      	blx	r4
    36ca:	2800      	cmp	r0, #0
    36cc:	d1d8      	bne.n	3680 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    36ce:	ab05      	add	r3, sp, #20
    36d0:	2209      	movs	r2, #9
    36d2:	569a      	ldrsb	r2, [r3, r2]
    36d4:	2a00      	cmp	r2, #0
    36d6:	db24      	blt.n	3722 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    36d8:	0018      	movs	r0, r3
    36da:	2108      	movs	r1, #8
    36dc:	5659      	ldrsb	r1, [r3, r1]
    36de:	4b79      	ldr	r3, [pc, #484]	; (38c4 <m2m_ip_cb+0x2fc>)
    36e0:	0109      	lsls	r1, r1, #4
    36e2:	1859      	adds	r1, r3, r1
    36e4:	7ac9      	ldrb	r1, [r1, #11]
    36e6:	b2c9      	uxtb	r1, r1
    36e8:	0114      	lsls	r4, r2, #4
    36ea:	191b      	adds	r3, r3, r4
    36ec:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    36ee:	2101      	movs	r1, #1
    36f0:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    36f2:	8941      	ldrh	r1, [r0, #10]
    36f4:	3908      	subs	r1, #8
    36f6:	b289      	uxth	r1, r1
    36f8:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    36fa:	4973      	ldr	r1, [pc, #460]	; (38c8 <m2m_ip_cb+0x300>)
    36fc:	880b      	ldrh	r3, [r1, #0]
    36fe:	3301      	adds	r3, #1
    3700:	b29b      	uxth	r3, r3
    3702:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    3704:	880b      	ldrh	r3, [r1, #0]
    3706:	b29b      	uxth	r3, r3
    3708:	2b00      	cmp	r3, #0
    370a:	d103      	bne.n	3714 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    370c:	880b      	ldrh	r3, [r1, #0]
    370e:	3301      	adds	r3, #1
    3710:	b29b      	uxth	r3, r3
    3712:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    3714:	4b6c      	ldr	r3, [pc, #432]	; (38c8 <m2m_ip_cb+0x300>)
    3716:	8819      	ldrh	r1, [r3, #0]
    3718:	b289      	uxth	r1, r1
    371a:	0110      	lsls	r0, r2, #4
    371c:	4b69      	ldr	r3, [pc, #420]	; (38c4 <m2m_ip_cb+0x2fc>)
    371e:	181b      	adds	r3, r3, r0
    3720:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    3722:	ab09      	add	r3, sp, #36	; 0x24
    3724:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    3726:	2202      	movs	r2, #2
    3728:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    372a:	aa05      	add	r2, sp, #20
    372c:	8851      	ldrh	r1, [r2, #2]
    372e:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    3730:	9a06      	ldr	r2, [sp, #24]
    3732:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    3734:	4b62      	ldr	r3, [pc, #392]	; (38c0 <m2m_ip_cb+0x2f8>)
    3736:	681b      	ldr	r3, [r3, #0]
    3738:	2b00      	cmp	r3, #0
    373a:	d0a1      	beq.n	3680 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    373c:	4b60      	ldr	r3, [pc, #384]	; (38c0 <m2m_ip_cb+0x2f8>)
    373e:	681b      	ldr	r3, [r3, #0]
    3740:	aa05      	add	r2, sp, #20
    3742:	2008      	movs	r0, #8
    3744:	5610      	ldrsb	r0, [r2, r0]
    3746:	aa09      	add	r2, sp, #36	; 0x24
    3748:	2104      	movs	r1, #4
    374a:	4798      	blx	r3
    374c:	e798      	b.n	3680 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    374e:	2300      	movs	r3, #0
    3750:	2204      	movs	r2, #4
    3752:	a909      	add	r1, sp, #36	; 0x24
    3754:	0020      	movs	r0, r4
    3756:	4c58      	ldr	r4, [pc, #352]	; (38b8 <m2m_ip_cb+0x2f0>)
    3758:	47a0      	blx	r4
    375a:	2800      	cmp	r0, #0
    375c:	d000      	beq.n	3760 <m2m_ip_cb+0x198>
    375e:	e78f      	b.n	3680 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    3760:	ab09      	add	r3, sp, #36	; 0x24
    3762:	2000      	movs	r0, #0
    3764:	5618      	ldrsb	r0, [r3, r0]
    3766:	aa05      	add	r2, sp, #20
    3768:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    376a:	785b      	ldrb	r3, [r3, #1]
    376c:	b25b      	sxtb	r3, r3
    376e:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    3770:	2b00      	cmp	r3, #0
    3772:	d107      	bne.n	3784 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3774:	ab09      	add	r3, sp, #36	; 0x24
    3776:	885b      	ldrh	r3, [r3, #2]
    3778:	3b08      	subs	r3, #8
    377a:	b29b      	uxth	r3, r3
    377c:	0101      	lsls	r1, r0, #4
    377e:	4a51      	ldr	r2, [pc, #324]	; (38c4 <m2m_ip_cb+0x2fc>)
    3780:	1852      	adds	r2, r2, r1
    3782:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    3784:	4b4e      	ldr	r3, [pc, #312]	; (38c0 <m2m_ip_cb+0x2f8>)
    3786:	681b      	ldr	r3, [r3, #0]
    3788:	2b00      	cmp	r3, #0
    378a:	d100      	bne.n	378e <m2m_ip_cb+0x1c6>
    378c:	e778      	b.n	3680 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    378e:	4b4c      	ldr	r3, [pc, #304]	; (38c0 <m2m_ip_cb+0x2f8>)
    3790:	681b      	ldr	r3, [r3, #0]
    3792:	aa05      	add	r2, sp, #20
    3794:	2105      	movs	r1, #5
    3796:	4798      	blx	r3
	{
    3798:	e772      	b.n	3680 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    379a:	2300      	movs	r3, #0
    379c:	2244      	movs	r2, #68	; 0x44
    379e:	a909      	add	r1, sp, #36	; 0x24
    37a0:	0020      	movs	r0, r4
    37a2:	4c45      	ldr	r4, [pc, #276]	; (38b8 <m2m_ip_cb+0x2f0>)
    37a4:	47a0      	blx	r4
    37a6:	2800      	cmp	r0, #0
    37a8:	d000      	beq.n	37ac <m2m_ip_cb+0x1e4>
    37aa:	e769      	b.n	3680 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    37ac:	4b47      	ldr	r3, [pc, #284]	; (38cc <m2m_ip_cb+0x304>)
    37ae:	681b      	ldr	r3, [r3, #0]
    37b0:	2b00      	cmp	r3, #0
    37b2:	d100      	bne.n	37b6 <m2m_ip_cb+0x1ee>
    37b4:	e764      	b.n	3680 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    37b6:	4b45      	ldr	r3, [pc, #276]	; (38cc <m2m_ip_cb+0x304>)
    37b8:	681b      	ldr	r3, [r3, #0]
    37ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
    37bc:	9203      	str	r2, [sp, #12]
    37be:	0011      	movs	r1, r2
    37c0:	a809      	add	r0, sp, #36	; 0x24
    37c2:	4798      	blx	r3
    37c4:	e75c      	b.n	3680 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    37c6:	2306      	movs	r3, #6
    37c8:	469a      	mov	sl, r3
    37ca:	e001      	b.n	37d0 <m2m_ip_cb+0x208>
    37cc:	2306      	movs	r3, #6
    37ce:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    37d0:	2300      	movs	r3, #0
    37d2:	2210      	movs	r2, #16
    37d4:	a905      	add	r1, sp, #20
    37d6:	0020      	movs	r0, r4
    37d8:	4f37      	ldr	r7, [pc, #220]	; (38b8 <m2m_ip_cb+0x2f0>)
    37da:	47b8      	blx	r7
    37dc:	2800      	cmp	r0, #0
    37de:	d000      	beq.n	37e2 <m2m_ip_cb+0x21a>
    37e0:	e74e      	b.n	3680 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    37e2:	aa05      	add	r2, sp, #20
    37e4:	200c      	movs	r0, #12
    37e6:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    37e8:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    37ea:	0107      	lsls	r7, r0, #4
    37ec:	4935      	ldr	r1, [pc, #212]	; (38c4 <m2m_ip_cb+0x2fc>)
    37ee:	19c9      	adds	r1, r1, r7
    37f0:	2700      	movs	r7, #0
    37f2:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    37f4:	2608      	movs	r6, #8
    37f6:	5f97      	ldrsh	r7, [r2, r6]
    37f8:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    37fa:	8957      	ldrh	r7, [r2, #10]
    37fc:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    37fe:	af09      	add	r7, sp, #36	; 0x24
    3800:	8856      	ldrh	r6, [r2, #2]
    3802:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    3804:	9a06      	ldr	r2, [sp, #24]
    3806:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3808:	88ca      	ldrh	r2, [r1, #6]
    380a:	b292      	uxth	r2, r2
    380c:	4293      	cmp	r3, r2
    380e:	d00c      	beq.n	382a <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    3810:	2d10      	cmp	r5, #16
    3812:	d800      	bhi.n	3816 <m2m_ip_cb+0x24e>
    3814:	e734      	b.n	3680 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    3816:	2301      	movs	r3, #1
    3818:	2200      	movs	r2, #0
    381a:	2100      	movs	r1, #0
    381c:	2000      	movs	r0, #0
    381e:	4c26      	ldr	r4, [pc, #152]	; (38b8 <m2m_ip_cb+0x2f0>)
    3820:	47a0      	blx	r4
	{
    3822:	e72d      	b.n	3680 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    3824:	2309      	movs	r3, #9
    3826:	469a      	mov	sl, r3
    3828:	e7d2      	b.n	37d0 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    382a:	4643      	mov	r3, r8
    382c:	2b00      	cmp	r3, #0
    382e:	dd01      	ble.n	3834 <m2m_ip_cb+0x26c>
    3830:	45a8      	cmp	r8, r5
    3832:	db0f      	blt.n	3854 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    3834:	ab09      	add	r3, sp, #36	; 0x24
    3836:	4642      	mov	r2, r8
    3838:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    383a:	2300      	movs	r3, #0
    383c:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    383e:	4b20      	ldr	r3, [pc, #128]	; (38c0 <m2m_ip_cb+0x2f8>)
    3840:	681b      	ldr	r3, [r3, #0]
    3842:	2b00      	cmp	r3, #0
    3844:	d100      	bne.n	3848 <m2m_ip_cb+0x280>
    3846:	e71b      	b.n	3680 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    3848:	4b1d      	ldr	r3, [pc, #116]	; (38c0 <m2m_ip_cb+0x2f8>)
    384a:	681b      	ldr	r3, [r3, #0]
    384c:	aa09      	add	r2, sp, #36	; 0x24
    384e:	4651      	mov	r1, sl
    3850:	4798      	blx	r3
    3852:	e715      	b.n	3680 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    3854:	0023      	movs	r3, r4
    3856:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    3858:	4642      	mov	r2, r8
    385a:	4669      	mov	r1, sp
    385c:	818a      	strh	r2, [r1, #12]
    385e:	898a      	ldrh	r2, [r1, #12]
    3860:	9200      	str	r2, [sp, #0]
    3862:	4652      	mov	r2, sl
    3864:	0039      	movs	r1, r7
    3866:	4c1a      	ldr	r4, [pc, #104]	; (38d0 <m2m_ip_cb+0x308>)
    3868:	47a0      	blx	r4
    386a:	e709      	b.n	3680 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    386c:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    386e:	2300      	movs	r3, #0
    3870:	2208      	movs	r2, #8
    3872:	a909      	add	r1, sp, #36	; 0x24
    3874:	0020      	movs	r0, r4
    3876:	4c10      	ldr	r4, [pc, #64]	; (38b8 <m2m_ip_cb+0x2f0>)
    3878:	47a0      	blx	r4
    387a:	2800      	cmp	r0, #0
    387c:	d000      	beq.n	3880 <m2m_ip_cb+0x2b8>
    387e:	e6ff      	b.n	3680 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    3880:	ab09      	add	r3, sp, #36	; 0x24
    3882:	2000      	movs	r0, #0
    3884:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    3886:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    3888:	8859      	ldrh	r1, [r3, #2]
    388a:	ab05      	add	r3, sp, #20
    388c:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    388e:	0101      	lsls	r1, r0, #4
    3890:	4b0c      	ldr	r3, [pc, #48]	; (38c4 <m2m_ip_cb+0x2fc>)
    3892:	185b      	adds	r3, r3, r1
    3894:	88db      	ldrh	r3, [r3, #6]
    3896:	b29b      	uxth	r3, r3
    3898:	429a      	cmp	r2, r3
    389a:	d000      	beq.n	389e <m2m_ip_cb+0x2d6>
    389c:	e6f0      	b.n	3680 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    389e:	4b08      	ldr	r3, [pc, #32]	; (38c0 <m2m_ip_cb+0x2f8>)
    38a0:	681b      	ldr	r3, [r3, #0]
    38a2:	2b00      	cmp	r3, #0
    38a4:	d100      	bne.n	38a8 <m2m_ip_cb+0x2e0>
    38a6:	e6eb      	b.n	3680 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    38a8:	4b05      	ldr	r3, [pc, #20]	; (38c0 <m2m_ip_cb+0x2f8>)
    38aa:	681b      	ldr	r3, [r3, #0]
    38ac:	aa05      	add	r2, sp, #20
    38ae:	0029      	movs	r1, r5
    38b0:	4798      	blx	r3
	{
    38b2:	e6e5      	b.n	3680 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    38b4:	2508      	movs	r5, #8
    38b6:	e7da      	b.n	386e <m2m_ip_cb+0x2a6>
    38b8:	00001855 	.word	0x00001855
    38bc:	200003e0 	.word	0x200003e0
    38c0:	200003dc 	.word	0x200003dc
    38c4:	2000032c 	.word	0x2000032c
    38c8:	2000020e 	.word	0x2000020e
    38cc:	200003e4 	.word	0x200003e4
    38d0:	000034b5 	.word	0x000034b5

000038d4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    38d4:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    38d6:	4b0a      	ldr	r3, [pc, #40]	; (3900 <socketInit+0x2c>)
    38d8:	781b      	ldrb	r3, [r3, #0]
    38da:	2b00      	cmp	r3, #0
    38dc:	d000      	beq.n	38e0 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    38de:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    38e0:	22b0      	movs	r2, #176	; 0xb0
    38e2:	2100      	movs	r1, #0
    38e4:	4807      	ldr	r0, [pc, #28]	; (3904 <socketInit+0x30>)
    38e6:	4b08      	ldr	r3, [pc, #32]	; (3908 <socketInit+0x34>)
    38e8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    38ea:	4908      	ldr	r1, [pc, #32]	; (390c <socketInit+0x38>)
    38ec:	2002      	movs	r0, #2
    38ee:	4b08      	ldr	r3, [pc, #32]	; (3910 <socketInit+0x3c>)
    38f0:	4798      	blx	r3
		gbSocketInit	= 1;
    38f2:	2201      	movs	r2, #1
    38f4:	4b02      	ldr	r3, [pc, #8]	; (3900 <socketInit+0x2c>)
    38f6:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    38f8:	2200      	movs	r2, #0
    38fa:	4b06      	ldr	r3, [pc, #24]	; (3914 <socketInit+0x40>)
    38fc:	801a      	strh	r2, [r3, #0]
}
    38fe:	e7ee      	b.n	38de <socketInit+0xa>
    3900:	2000020d 	.word	0x2000020d
    3904:	2000032c 	.word	0x2000032c
    3908:	00001135 	.word	0x00001135
    390c:	000035c9 	.word	0x000035c9
    3910:	00001941 	.word	0x00001941
    3914:	2000020e 	.word	0x2000020e

00003918 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    3918:	4b02      	ldr	r3, [pc, #8]	; (3924 <registerSocketCallback+0xc>)
    391a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    391c:	4b02      	ldr	r3, [pc, #8]	; (3928 <registerSocketCallback+0x10>)
    391e:	6019      	str	r1, [r3, #0]
}
    3920:	4770      	bx	lr
    3922:	46c0      	nop			; (mov r8, r8)
    3924:	200003dc 	.word	0x200003dc
    3928:	200003e4 	.word	0x200003e4

0000392c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    392c:	b5f0      	push	{r4, r5, r6, r7, lr}
    392e:	46d6      	mov	lr, sl
    3930:	4647      	mov	r7, r8
    3932:	b580      	push	{r7, lr}
    3934:	b089      	sub	sp, #36	; 0x24
    3936:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    3938:	2802      	cmp	r0, #2
    393a:	d000      	beq.n	393e <socket+0x12>
    393c:	e09c      	b.n	3a78 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    393e:	2901      	cmp	r1, #1
    3940:	d00a      	beq.n	3958 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    3942:	2902      	cmp	r1, #2
    3944:	d100      	bne.n	3948 <socket+0x1c>
    3946:	e070      	b.n	3a2a <socket+0xfe>
	SOCKET					sock = -1;
    3948:	2501      	movs	r5, #1
    394a:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    394c:	0028      	movs	r0, r5
    394e:	b009      	add	sp, #36	; 0x24
    3950:	bc0c      	pop	{r2, r3}
    3952:	4690      	mov	r8, r2
    3954:	469a      	mov	sl, r3
    3956:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    3958:	4c49      	ldr	r4, [pc, #292]	; (3a80 <socket+0x154>)
    395a:	7827      	ldrb	r7, [r4, #0]
    395c:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    395e:	7826      	ldrb	r6, [r4, #0]
    3960:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3962:	7820      	ldrb	r0, [r4, #0]
    3964:	3001      	adds	r0, #1
    3966:	3106      	adds	r1, #6
    3968:	4b46      	ldr	r3, [pc, #280]	; (3a84 <socket+0x158>)
    396a:	4798      	blx	r3
    396c:	b2c9      	uxtb	r1, r1
    396e:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    3970:	0132      	lsls	r2, r6, #4
    3972:	4b45      	ldr	r3, [pc, #276]	; (3a88 <socket+0x15c>)
    3974:	189b      	adds	r3, r3, r2
    3976:	7a9b      	ldrb	r3, [r3, #10]
    3978:	2506      	movs	r5, #6
    397a:	2b00      	cmp	r3, #0
    397c:	d018      	beq.n	39b0 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    397e:	4e40      	ldr	r6, [pc, #256]	; (3a80 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3980:	4b40      	ldr	r3, [pc, #256]	; (3a84 <socket+0x158>)
    3982:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    3984:	4b40      	ldr	r3, [pc, #256]	; (3a88 <socket+0x15c>)
    3986:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    3988:	7837      	ldrb	r7, [r6, #0]
    398a:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    398c:	7834      	ldrb	r4, [r6, #0]
    398e:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3990:	7830      	ldrb	r0, [r6, #0]
    3992:	3001      	adds	r0, #1
    3994:	2107      	movs	r1, #7
    3996:	47d0      	blx	sl
    3998:	b2c9      	uxtb	r1, r1
    399a:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    399c:	0123      	lsls	r3, r4, #4
    399e:	4443      	add	r3, r8
    39a0:	7a9b      	ldrb	r3, [r3, #10]
    39a2:	2b00      	cmp	r3, #0
    39a4:	d007      	beq.n	39b6 <socket+0x8a>
    39a6:	3d01      	subs	r5, #1
    39a8:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    39aa:	2d00      	cmp	r5, #0
    39ac:	d1ec      	bne.n	3988 <socket+0x5c>
    39ae:	e7cb      	b.n	3948 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    39b0:	4b35      	ldr	r3, [pc, #212]	; (3a88 <socket+0x15c>)
    39b2:	18d4      	adds	r4, r2, r3
    39b4:	e002      	b.n	39bc <socket+0x90>
    39b6:	0124      	lsls	r4, r4, #4
    39b8:	4b33      	ldr	r3, [pc, #204]	; (3a88 <socket+0x15c>)
    39ba:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    39bc:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    39be:	2d00      	cmp	r5, #0
    39c0:	dbc4      	blt.n	394c <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    39c2:	2210      	movs	r2, #16
    39c4:	2100      	movs	r1, #0
    39c6:	0020      	movs	r0, r4
    39c8:	4b30      	ldr	r3, [pc, #192]	; (3a8c <socket+0x160>)
    39ca:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    39cc:	2301      	movs	r3, #1
    39ce:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    39d0:	4a2f      	ldr	r2, [pc, #188]	; (3a90 <socket+0x164>)
    39d2:	8813      	ldrh	r3, [r2, #0]
    39d4:	3301      	adds	r3, #1
    39d6:	b29b      	uxth	r3, r3
    39d8:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    39da:	8813      	ldrh	r3, [r2, #0]
    39dc:	b29b      	uxth	r3, r3
    39de:	2b00      	cmp	r3, #0
    39e0:	d103      	bne.n	39ea <socket+0xbe>
				++gu16SessionID;
    39e2:	8813      	ldrh	r3, [r2, #0]
    39e4:	3301      	adds	r3, #1
    39e6:	b29b      	uxth	r3, r3
    39e8:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    39ea:	4e29      	ldr	r6, [pc, #164]	; (3a90 <socket+0x164>)
    39ec:	8833      	ldrh	r3, [r6, #0]
    39ee:	b29b      	uxth	r3, r3
    39f0:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    39f2:	4828      	ldr	r0, [pc, #160]	; (3a94 <socket+0x168>)
    39f4:	4f28      	ldr	r7, [pc, #160]	; (3a98 <socket+0x16c>)
    39f6:	47b8      	blx	r7
    39f8:	8832      	ldrh	r2, [r6, #0]
    39fa:	b292      	uxth	r2, r2
    39fc:	0029      	movs	r1, r5
    39fe:	4827      	ldr	r0, [pc, #156]	; (3a9c <socket+0x170>)
    3a00:	47b8      	blx	r7
    3a02:	200d      	movs	r0, #13
    3a04:	4b26      	ldr	r3, [pc, #152]	; (3aa0 <socket+0x174>)
    3a06:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    3a08:	9b05      	ldr	r3, [sp, #20]
    3a0a:	07db      	lsls	r3, r3, #31
    3a0c:	d59e      	bpl.n	394c <socket+0x20>
				strSSLCreate.sslSock = sock;
    3a0e:	aa07      	add	r2, sp, #28
    3a10:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    3a12:	2321      	movs	r3, #33	; 0x21
    3a14:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    3a16:	2300      	movs	r3, #0
    3a18:	9302      	str	r3, [sp, #8]
    3a1a:	9301      	str	r3, [sp, #4]
    3a1c:	9300      	str	r3, [sp, #0]
    3a1e:	3304      	adds	r3, #4
    3a20:	2150      	movs	r1, #80	; 0x50
    3a22:	2002      	movs	r0, #2
    3a24:	4c1f      	ldr	r4, [pc, #124]	; (3aa4 <socket+0x178>)
    3a26:	47a0      	blx	r4
    3a28:	e790      	b.n	394c <socket+0x20>
				u8SockID		= u8NextUdpSock;
    3a2a:	4b1f      	ldr	r3, [pc, #124]	; (3aa8 <socket+0x17c>)
    3a2c:	781d      	ldrb	r5, [r3, #0]
    3a2e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3a30:	781c      	ldrb	r4, [r3, #0]
    3a32:	0124      	lsls	r4, r4, #4
    3a34:	4a1d      	ldr	r2, [pc, #116]	; (3aac <socket+0x180>)
    3a36:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3a38:	7819      	ldrb	r1, [r3, #0]
    3a3a:	3101      	adds	r1, #1
    3a3c:	2203      	movs	r2, #3
    3a3e:	400a      	ands	r2, r1
    3a40:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    3a42:	7aa3      	ldrb	r3, [r4, #10]
    3a44:	2b00      	cmp	r3, #0
    3a46:	d014      	beq.n	3a72 <socket+0x146>
    3a48:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    3a4a:	4917      	ldr	r1, [pc, #92]	; (3aa8 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3a4c:	4f17      	ldr	r7, [pc, #92]	; (3aac <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3a4e:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    3a50:	780d      	ldrb	r5, [r1, #0]
    3a52:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3a54:	780c      	ldrb	r4, [r1, #0]
    3a56:	0124      	lsls	r4, r4, #4
    3a58:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3a5a:	780b      	ldrb	r3, [r1, #0]
    3a5c:	3301      	adds	r3, #1
    3a5e:	4003      	ands	r3, r0
    3a60:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    3a62:	7aa3      	ldrb	r3, [r4, #10]
    3a64:	2b00      	cmp	r3, #0
    3a66:	d004      	beq.n	3a72 <socket+0x146>
    3a68:	3a01      	subs	r2, #1
    3a6a:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    3a6c:	2a00      	cmp	r2, #0
    3a6e:	d1ef      	bne.n	3a50 <socket+0x124>
    3a70:	e76a      	b.n	3948 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    3a72:	3507      	adds	r5, #7
    3a74:	b26d      	sxtb	r5, r5
					break;
    3a76:	e7a2      	b.n	39be <socket+0x92>
	SOCKET					sock = -1;
    3a78:	2501      	movs	r5, #1
    3a7a:	426d      	negs	r5, r5
    3a7c:	e766      	b.n	394c <socket+0x20>
    3a7e:	46c0      	nop			; (mov r8, r8)
    3a80:	20000210 	.word	0x20000210
    3a84:	00007c79 	.word	0x00007c79
    3a88:	2000032c 	.word	0x2000032c
    3a8c:	00001135 	.word	0x00001135
    3a90:	2000020e 	.word	0x2000020e
    3a94:	00009874 	.word	0x00009874
    3a98:	00007eed 	.word	0x00007eed
    3a9c:	0000a304 	.word	0x0000a304
    3aa0:	00007f21 	.word	0x00007f21
    3aa4:	00001249 	.word	0x00001249
    3aa8:	20000211 	.word	0x20000211
    3aac:	2000039c 	.word	0x2000039c

00003ab0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    3ab0:	b570      	push	{r4, r5, r6, lr}
    3ab2:	b088      	sub	sp, #32
    3ab4:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    3ab6:	db30      	blt.n	3b1a <connect+0x6a>
    3ab8:	2900      	cmp	r1, #0
    3aba:	d031      	beq.n	3b20 <connect+0x70>
    3abc:	0100      	lsls	r0, r0, #4
    3abe:	4b1d      	ldr	r3, [pc, #116]	; (3b34 <connect+0x84>)
    3ac0:	181b      	adds	r3, r3, r0
    3ac2:	7a9b      	ldrb	r3, [r3, #10]
    3ac4:	2b01      	cmp	r3, #1
    3ac6:	d12e      	bne.n	3b26 <connect+0x76>
    3ac8:	2a00      	cmp	r2, #0
    3aca:	d02f      	beq.n	3b2c <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3acc:	4b19      	ldr	r3, [pc, #100]	; (3b34 <connect+0x84>)
    3ace:	181b      	adds	r3, r3, r0
    3ad0:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    3ad2:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3ad4:	07db      	lsls	r3, r3, #31
    3ad6:	d505      	bpl.n	3ae4 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    3ad8:	4b16      	ldr	r3, [pc, #88]	; (3b34 <connect+0x84>)
    3ada:	181b      	adds	r3, r3, r0
    3adc:	7ada      	ldrb	r2, [r3, #11]
    3ade:	ab05      	add	r3, sp, #20
    3ae0:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    3ae2:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    3ae4:	ad05      	add	r5, sp, #20
    3ae6:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    3ae8:	2208      	movs	r2, #8
    3aea:	0028      	movs	r0, r5
    3aec:	4b12      	ldr	r3, [pc, #72]	; (3b38 <connect+0x88>)
    3aee:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    3af0:	0124      	lsls	r4, r4, #4
    3af2:	4b10      	ldr	r3, [pc, #64]	; (3b34 <connect+0x84>)
    3af4:	191c      	adds	r4, r3, r4
    3af6:	88e3      	ldrh	r3, [r4, #6]
    3af8:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    3afa:	2300      	movs	r3, #0
    3afc:	9302      	str	r3, [sp, #8]
    3afe:	9301      	str	r3, [sp, #4]
    3b00:	9300      	str	r3, [sp, #0]
    3b02:	330c      	adds	r3, #12
    3b04:	002a      	movs	r2, r5
    3b06:	0031      	movs	r1, r6
    3b08:	2002      	movs	r0, #2
    3b0a:	4c0c      	ldr	r4, [pc, #48]	; (3b3c <connect+0x8c>)
    3b0c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3b0e:	2800      	cmp	r0, #0
    3b10:	d001      	beq.n	3b16 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    3b12:	2009      	movs	r0, #9
    3b14:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    3b16:	b008      	add	sp, #32
    3b18:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3b1a:	2006      	movs	r0, #6
    3b1c:	4240      	negs	r0, r0
    3b1e:	e7fa      	b.n	3b16 <connect+0x66>
    3b20:	2006      	movs	r0, #6
    3b22:	4240      	negs	r0, r0
    3b24:	e7f7      	b.n	3b16 <connect+0x66>
    3b26:	2006      	movs	r0, #6
    3b28:	4240      	negs	r0, r0
    3b2a:	e7f4      	b.n	3b16 <connect+0x66>
    3b2c:	2006      	movs	r0, #6
    3b2e:	4240      	negs	r0, r0
    3b30:	e7f1      	b.n	3b16 <connect+0x66>
    3b32:	46c0      	nop			; (mov r8, r8)
    3b34:	2000032c 	.word	0x2000032c
    3b38:	00001121 	.word	0x00001121
    3b3c:	00001249 	.word	0x00001249

00003b40 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    3b40:	b530      	push	{r4, r5, lr}
    3b42:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    3b44:	2800      	cmp	r0, #0
    3b46:	db36      	blt.n	3bb6 <send+0x76>
    3b48:	2900      	cmp	r1, #0
    3b4a:	d037      	beq.n	3bbc <send+0x7c>
    3b4c:	23af      	movs	r3, #175	; 0xaf
    3b4e:	00db      	lsls	r3, r3, #3
    3b50:	429a      	cmp	r2, r3
    3b52:	d836      	bhi.n	3bc2 <send+0x82>
    3b54:	0104      	lsls	r4, r0, #4
    3b56:	4b1e      	ldr	r3, [pc, #120]	; (3bd0 <send+0x90>)
    3b58:	191b      	adds	r3, r3, r4
    3b5a:	7a9b      	ldrb	r3, [r3, #10]
    3b5c:	2b01      	cmp	r3, #1
    3b5e:	d133      	bne.n	3bc8 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    3b60:	ab04      	add	r3, sp, #16
    3b62:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    3b64:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    3b66:	0025      	movs	r5, r4
    3b68:	4c19      	ldr	r4, [pc, #100]	; (3bd0 <send+0x90>)
    3b6a:	1964      	adds	r4, r4, r5
    3b6c:	88e4      	ldrh	r4, [r4, #6]
    3b6e:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    3b70:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    3b72:	2806      	cmp	r0, #6
    3b74:	dd00      	ble.n	3b78 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3b76:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3b78:	0104      	lsls	r4, r0, #4
    3b7a:	4b15      	ldr	r3, [pc, #84]	; (3bd0 <send+0x90>)
    3b7c:	191b      	adds	r3, r3, r4
    3b7e:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    3b80:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3b82:	07e4      	lsls	r4, r4, #31
    3b84:	d505      	bpl.n	3b92 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    3b86:	0100      	lsls	r0, r0, #4
    3b88:	4b11      	ldr	r3, [pc, #68]	; (3bd0 <send+0x90>)
    3b8a:	1818      	adds	r0, r3, r0
    3b8c:	8905      	ldrh	r5, [r0, #8]
    3b8e:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3b90:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3b92:	2080      	movs	r0, #128	; 0x80
    3b94:	4318      	orrs	r0, r3
    3b96:	9502      	str	r5, [sp, #8]
    3b98:	9201      	str	r2, [sp, #4]
    3b9a:	9100      	str	r1, [sp, #0]
    3b9c:	2310      	movs	r3, #16
    3b9e:	aa04      	add	r2, sp, #16
    3ba0:	0001      	movs	r1, r0
    3ba2:	2002      	movs	r0, #2
    3ba4:	4c0b      	ldr	r4, [pc, #44]	; (3bd4 <send+0x94>)
    3ba6:	47a0      	blx	r4
    3ba8:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    3baa:	2800      	cmp	r0, #0
    3bac:	d000      	beq.n	3bb0 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    3bae:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    3bb0:	0018      	movs	r0, r3
    3bb2:	b009      	add	sp, #36	; 0x24
    3bb4:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3bb6:	2306      	movs	r3, #6
    3bb8:	425b      	negs	r3, r3
    3bba:	e7f9      	b.n	3bb0 <send+0x70>
    3bbc:	2306      	movs	r3, #6
    3bbe:	425b      	negs	r3, r3
    3bc0:	e7f6      	b.n	3bb0 <send+0x70>
    3bc2:	2306      	movs	r3, #6
    3bc4:	425b      	negs	r3, r3
    3bc6:	e7f3      	b.n	3bb0 <send+0x70>
    3bc8:	2306      	movs	r3, #6
    3bca:	425b      	negs	r3, r3
    3bcc:	e7f0      	b.n	3bb0 <send+0x70>
    3bce:	46c0      	nop			; (mov r8, r8)
    3bd0:	2000032c 	.word	0x2000032c
    3bd4:	00001249 	.word	0x00001249

00003bd8 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    3bd8:	b530      	push	{r4, r5, lr}
    3bda:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3bdc:	2800      	cmp	r0, #0
    3bde:	db34      	blt.n	3c4a <recv+0x72>
    3be0:	2900      	cmp	r1, #0
    3be2:	d035      	beq.n	3c50 <recv+0x78>
    3be4:	2a00      	cmp	r2, #0
    3be6:	d036      	beq.n	3c56 <recv+0x7e>
    3be8:	0105      	lsls	r5, r0, #4
    3bea:	4c1e      	ldr	r4, [pc, #120]	; (3c64 <recv+0x8c>)
    3bec:	1964      	adds	r4, r4, r5
    3bee:	7aa4      	ldrb	r4, [r4, #10]
    3bf0:	2c01      	cmp	r4, #1
    3bf2:	d133      	bne.n	3c5c <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    3bf4:	4c1b      	ldr	r4, [pc, #108]	; (3c64 <recv+0x8c>)
    3bf6:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    3bf8:	1964      	adds	r4, r4, r5
    3bfa:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    3bfc:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    3bfe:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    3c00:	2900      	cmp	r1, #0
    3c02:	d11d      	bne.n	3c40 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    3c04:	2101      	movs	r1, #1
    3c06:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3c08:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    3c0a:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3c0c:	07d2      	lsls	r2, r2, #31
    3c0e:	d500      	bpl.n	3c12 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    3c10:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    3c12:	2b00      	cmp	r3, #0
    3c14:	d117      	bne.n	3c46 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    3c16:	3b01      	subs	r3, #1
    3c18:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    3c1a:	aa04      	add	r2, sp, #16
    3c1c:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    3c1e:	0100      	lsls	r0, r0, #4
    3c20:	4b10      	ldr	r3, [pc, #64]	; (3c64 <recv+0x8c>)
    3c22:	1818      	adds	r0, r3, r0
    3c24:	88c3      	ldrh	r3, [r0, #6]
    3c26:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3c28:	2300      	movs	r3, #0
    3c2a:	9302      	str	r3, [sp, #8]
    3c2c:	9301      	str	r3, [sp, #4]
    3c2e:	9300      	str	r3, [sp, #0]
    3c30:	3308      	adds	r3, #8
    3c32:	2002      	movs	r0, #2
    3c34:	4c0c      	ldr	r4, [pc, #48]	; (3c68 <recv+0x90>)
    3c36:	47a0      	blx	r4
    3c38:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    3c3a:	2800      	cmp	r0, #0
    3c3c:	d000      	beq.n	3c40 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    3c3e:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    3c40:	0010      	movs	r0, r2
    3c42:	b007      	add	sp, #28
    3c44:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    3c46:	9304      	str	r3, [sp, #16]
    3c48:	e7e7      	b.n	3c1a <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3c4a:	2206      	movs	r2, #6
    3c4c:	4252      	negs	r2, r2
    3c4e:	e7f7      	b.n	3c40 <recv+0x68>
    3c50:	2206      	movs	r2, #6
    3c52:	4252      	negs	r2, r2
    3c54:	e7f4      	b.n	3c40 <recv+0x68>
    3c56:	2206      	movs	r2, #6
    3c58:	4252      	negs	r2, r2
    3c5a:	e7f1      	b.n	3c40 <recv+0x68>
    3c5c:	2206      	movs	r2, #6
    3c5e:	4252      	negs	r2, r2
    3c60:	e7ee      	b.n	3c40 <recv+0x68>
    3c62:	46c0      	nop			; (mov r8, r8)
    3c64:	2000032c 	.word	0x2000032c
    3c68:	00001249 	.word	0x00001249

00003c6c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    3c6c:	b530      	push	{r4, r5, lr}
    3c6e:	b087      	sub	sp, #28
    3c70:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    3c72:	481e      	ldr	r0, [pc, #120]	; (3cec <close+0x80>)
    3c74:	4d1e      	ldr	r5, [pc, #120]	; (3cf0 <close+0x84>)
    3c76:	47a8      	blx	r5
    3c78:	0021      	movs	r1, r4
    3c7a:	481e      	ldr	r0, [pc, #120]	; (3cf4 <close+0x88>)
    3c7c:	47a8      	blx	r5
    3c7e:	200d      	movs	r0, #13
    3c80:	4b1d      	ldr	r3, [pc, #116]	; (3cf8 <close+0x8c>)
    3c82:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    3c84:	2c00      	cmp	r4, #0
    3c86:	db2a      	blt.n	3cde <close+0x72>
    3c88:	0122      	lsls	r2, r4, #4
    3c8a:	4b1c      	ldr	r3, [pc, #112]	; (3cfc <close+0x90>)
    3c8c:	189b      	adds	r3, r3, r2
    3c8e:	7a9b      	ldrb	r3, [r3, #10]
    3c90:	2b01      	cmp	r3, #1
    3c92:	d127      	bne.n	3ce4 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3c94:	a905      	add	r1, sp, #20
    3c96:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    3c98:	4b18      	ldr	r3, [pc, #96]	; (3cfc <close+0x90>)
    3c9a:	189b      	adds	r3, r3, r2
    3c9c:	88da      	ldrh	r2, [r3, #6]
    3c9e:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    3ca0:	2200      	movs	r2, #0
    3ca2:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    3ca4:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3ca6:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    3ca8:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3caa:	07db      	lsls	r3, r3, #31
    3cac:	d500      	bpl.n	3cb0 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    3cae:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    3cb0:	2300      	movs	r3, #0
    3cb2:	9302      	str	r3, [sp, #8]
    3cb4:	9301      	str	r3, [sp, #4]
    3cb6:	9300      	str	r3, [sp, #0]
    3cb8:	3304      	adds	r3, #4
    3cba:	aa05      	add	r2, sp, #20
    3cbc:	2002      	movs	r0, #2
    3cbe:	4d10      	ldr	r5, [pc, #64]	; (3d00 <close+0x94>)
    3cc0:	47a8      	blx	r5
    3cc2:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3cc4:	d001      	beq.n	3cca <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    3cc6:	2509      	movs	r5, #9
    3cc8:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3cca:	0124      	lsls	r4, r4, #4
    3ccc:	480b      	ldr	r0, [pc, #44]	; (3cfc <close+0x90>)
    3cce:	1820      	adds	r0, r4, r0
    3cd0:	2210      	movs	r2, #16
    3cd2:	2100      	movs	r1, #0
    3cd4:	4b0b      	ldr	r3, [pc, #44]	; (3d04 <close+0x98>)
    3cd6:	4798      	blx	r3
	}
	return s8Ret;
}
    3cd8:	0028      	movs	r0, r5
    3cda:	b007      	add	sp, #28
    3cdc:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3cde:	2506      	movs	r5, #6
    3ce0:	426d      	negs	r5, r5
    3ce2:	e7f9      	b.n	3cd8 <close+0x6c>
    3ce4:	2506      	movs	r5, #6
    3ce6:	426d      	negs	r5, r5
    3ce8:	e7f6      	b.n	3cd8 <close+0x6c>
    3cea:	46c0      	nop			; (mov r8, r8)
    3cec:	00009874 	.word	0x00009874
    3cf0:	00007eed 	.word	0x00007eed
    3cf4:	0000a2ec 	.word	0x0000a2ec
    3cf8:	00007f21 	.word	0x00007f21
    3cfc:	2000032c 	.word	0x2000032c
    3d00:	00001249 	.word	0x00001249
    3d04:	00001135 	.word	0x00001135

00003d08 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    3d08:	b570      	push	{r4, r5, r6, lr}
    3d0a:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    3d0c:	2300      	movs	r3, #0
    3d0e:	9301      	str	r3, [sp, #4]
    3d10:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    3d12:	2100      	movs	r1, #0
    3d14:	7802      	ldrb	r2, [r0, #0]
    3d16:	1c44      	adds	r4, r0, #1
    3d18:	3005      	adds	r0, #5
    3d1a:	000b      	movs	r3, r1
    3d1c:	e009      	b.n	3d32 <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    3d1e:	009d      	lsls	r5, r3, #2
    3d20:	195b      	adds	r3, r3, r5
    3d22:	005b      	lsls	r3, r3, #1
    3d24:	189b      	adds	r3, r3, r2
    3d26:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    3d28:	0022      	movs	r2, r4
    3d2a:	3401      	adds	r4, #1
			if(j > 4)
    3d2c:	42a0      	cmp	r0, r4
    3d2e:	d00a      	beq.n	3d46 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    3d30:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    3d32:	2a2e      	cmp	r2, #46	; 0x2e
    3d34:	d00a      	beq.n	3d4c <nmi_inet_addr+0x44>
    3d36:	2a00      	cmp	r2, #0
    3d38:	d00c      	beq.n	3d54 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    3d3a:	3a30      	subs	r2, #48	; 0x30
    3d3c:	b2d2      	uxtb	r2, r2
    3d3e:	2a09      	cmp	r2, #9
    3d40:	d9ed      	bls.n	3d1e <nmi_inet_addr+0x16>
				return 0;
    3d42:	2000      	movs	r0, #0
    3d44:	e000      	b.n	3d48 <nmi_inet_addr+0x40>
				return 0;
    3d46:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    3d48:	b002      	add	sp, #8
    3d4a:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    3d4c:	466a      	mov	r2, sp
    3d4e:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    3d50:	0020      	movs	r0, r4
    3d52:	e002      	b.n	3d5a <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    3d54:	466a      	mov	r2, sp
    3d56:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    3d58:	0020      	movs	r0, r4
    3d5a:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    3d5c:	2e04      	cmp	r6, #4
    3d5e:	d1d9      	bne.n	3d14 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    3d60:	2204      	movs	r2, #4
    3d62:	4669      	mov	r1, sp
    3d64:	a801      	add	r0, sp, #4
    3d66:	4b02      	ldr	r3, [pc, #8]	; (3d70 <nmi_inet_addr+0x68>)
    3d68:	4798      	blx	r3
	return u32IP;
    3d6a:	9801      	ldr	r0, [sp, #4]
    3d6c:	e7ec      	b.n	3d48 <nmi_inet_addr+0x40>
    3d6e:	46c0      	nop			; (mov r8, r8)
    3d70:	00001121 	.word	0x00001121

00003d74 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    3d74:	b510      	push	{r4, lr}
    3d76:	b084      	sub	sp, #16
    3d78:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    3d7a:	4b0b      	ldr	r3, [pc, #44]	; (3da8 <gethostbyname+0x34>)
    3d7c:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    3d7e:	b2c3      	uxtb	r3, r0
    3d80:	2b40      	cmp	r3, #64	; 0x40
    3d82:	d80d      	bhi.n	3da0 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    3d84:	23ff      	movs	r3, #255	; 0xff
    3d86:	4003      	ands	r3, r0
    3d88:	3301      	adds	r3, #1
    3d8a:	2200      	movs	r2, #0
    3d8c:	9202      	str	r2, [sp, #8]
    3d8e:	9201      	str	r2, [sp, #4]
    3d90:	9200      	str	r2, [sp, #0]
    3d92:	0022      	movs	r2, r4
    3d94:	214a      	movs	r1, #74	; 0x4a
    3d96:	2002      	movs	r0, #2
    3d98:	4c04      	ldr	r4, [pc, #16]	; (3dac <gethostbyname+0x38>)
    3d9a:	47a0      	blx	r4
	}
	return s8Err;
}
    3d9c:	b004      	add	sp, #16
    3d9e:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    3da0:	2006      	movs	r0, #6
    3da2:	4240      	negs	r0, r0
    3da4:	e7fa      	b.n	3d9c <gethostbyname+0x28>
    3da6:	46c0      	nop			; (mov r8, r8)
    3da8:	00001145 	.word	0x00001145
    3dac:	00001249 	.word	0x00001249

00003db0 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    3db0:	b570      	push	{r4, r5, r6, lr}
    3db2:	b082      	sub	sp, #8
    3db4:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3db6:	4b2a      	ldr	r3, [pc, #168]	; (3e60 <spi_flash_enable+0xb0>)
    3db8:	4798      	blx	r3
    3dba:	0500      	lsls	r0, r0, #20
    3dbc:	0d00      	lsrs	r0, r0, #20
    3dbe:	4b29      	ldr	r3, [pc, #164]	; (3e64 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    3dc0:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3dc2:	4298      	cmp	r0, r3
    3dc4:	d802      	bhi.n	3dcc <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    3dc6:	0028      	movs	r0, r5
    3dc8:	b002      	add	sp, #8
    3dca:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    3dcc:	a901      	add	r1, sp, #4
    3dce:	4826      	ldr	r0, [pc, #152]	; (3e68 <spi_flash_enable+0xb8>)
    3dd0:	4b26      	ldr	r3, [pc, #152]	; (3e6c <spi_flash_enable+0xbc>)
    3dd2:	4798      	blx	r3
    3dd4:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    3dd6:	d1f6      	bne.n	3dc6 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    3dd8:	4b25      	ldr	r3, [pc, #148]	; (3e70 <spi_flash_enable+0xc0>)
    3dda:	9a01      	ldr	r2, [sp, #4]
    3ddc:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    3dde:	4925      	ldr	r1, [pc, #148]	; (3e74 <spi_flash_enable+0xc4>)
    3de0:	4319      	orrs	r1, r3
    3de2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3de4:	4820      	ldr	r0, [pc, #128]	; (3e68 <spi_flash_enable+0xb8>)
    3de6:	4b24      	ldr	r3, [pc, #144]	; (3e78 <spi_flash_enable+0xc8>)
    3de8:	4798      	blx	r3
		if(enable) {
    3dea:	2c00      	cmp	r4, #0
    3dec:	d020      	beq.n	3e30 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3dee:	2100      	movs	r1, #0
    3df0:	4822      	ldr	r0, [pc, #136]	; (3e7c <spi_flash_enable+0xcc>)
    3df2:	4c21      	ldr	r4, [pc, #132]	; (3e78 <spi_flash_enable+0xc8>)
    3df4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3df6:	21ab      	movs	r1, #171	; 0xab
    3df8:	4821      	ldr	r0, [pc, #132]	; (3e80 <spi_flash_enable+0xd0>)
    3dfa:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    3dfc:	2101      	movs	r1, #1
    3dfe:	4821      	ldr	r0, [pc, #132]	; (3e84 <spi_flash_enable+0xd4>)
    3e00:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3e02:	2100      	movs	r1, #0
    3e04:	4820      	ldr	r0, [pc, #128]	; (3e88 <spi_flash_enable+0xd8>)
    3e06:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    3e08:	2181      	movs	r1, #129	; 0x81
    3e0a:	4820      	ldr	r0, [pc, #128]	; (3e8c <spi_flash_enable+0xdc>)
    3e0c:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3e0e:	4e20      	ldr	r6, [pc, #128]	; (3e90 <spi_flash_enable+0xe0>)
    3e10:	4c20      	ldr	r4, [pc, #128]	; (3e94 <spi_flash_enable+0xe4>)
    3e12:	0030      	movs	r0, r6
    3e14:	47a0      	blx	r4
    3e16:	2801      	cmp	r0, #1
    3e18:	d1fb      	bne.n	3e12 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    3e1a:	4b15      	ldr	r3, [pc, #84]	; (3e70 <spi_flash_enable+0xc0>)
    3e1c:	9a01      	ldr	r2, [sp, #4]
    3e1e:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    3e20:	2180      	movs	r1, #128	; 0x80
    3e22:	0249      	lsls	r1, r1, #9
    3e24:	4319      	orrs	r1, r3
    3e26:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3e28:	480f      	ldr	r0, [pc, #60]	; (3e68 <spi_flash_enable+0xb8>)
    3e2a:	4b13      	ldr	r3, [pc, #76]	; (3e78 <spi_flash_enable+0xc8>)
    3e2c:	4798      	blx	r3
    3e2e:	e7ca      	b.n	3dc6 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3e30:	2100      	movs	r1, #0
    3e32:	4812      	ldr	r0, [pc, #72]	; (3e7c <spi_flash_enable+0xcc>)
    3e34:	4c10      	ldr	r4, [pc, #64]	; (3e78 <spi_flash_enable+0xc8>)
    3e36:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3e38:	21b9      	movs	r1, #185	; 0xb9
    3e3a:	4811      	ldr	r0, [pc, #68]	; (3e80 <spi_flash_enable+0xd0>)
    3e3c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    3e3e:	2101      	movs	r1, #1
    3e40:	4810      	ldr	r0, [pc, #64]	; (3e84 <spi_flash_enable+0xd4>)
    3e42:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3e44:	2100      	movs	r1, #0
    3e46:	4810      	ldr	r0, [pc, #64]	; (3e88 <spi_flash_enable+0xd8>)
    3e48:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    3e4a:	2181      	movs	r1, #129	; 0x81
    3e4c:	480f      	ldr	r0, [pc, #60]	; (3e8c <spi_flash_enable+0xdc>)
    3e4e:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3e50:	4e0f      	ldr	r6, [pc, #60]	; (3e90 <spi_flash_enable+0xe0>)
    3e52:	4c10      	ldr	r4, [pc, #64]	; (3e94 <spi_flash_enable+0xe4>)
    3e54:	0030      	movs	r0, r6
    3e56:	47a0      	blx	r4
    3e58:	2801      	cmp	r0, #1
    3e5a:	d1fb      	bne.n	3e54 <spi_flash_enable+0xa4>
    3e5c:	e7dd      	b.n	3e1a <spi_flash_enable+0x6a>
    3e5e:	46c0      	nop			; (mov r8, r8)
    3e60:	0000212d 	.word	0x0000212d
    3e64:	0000039f 	.word	0x0000039f
    3e68:	00001410 	.word	0x00001410
    3e6c:	0000257d 	.word	0x0000257d
    3e70:	f8888fff 	.word	0xf8888fff
    3e74:	01111000 	.word	0x01111000
    3e78:	00002589 	.word	0x00002589
    3e7c:	00010208 	.word	0x00010208
    3e80:	0001020c 	.word	0x0001020c
    3e84:	00010214 	.word	0x00010214
    3e88:	0001021c 	.word	0x0001021c
    3e8c:	00010204 	.word	0x00010204
    3e90:	00010218 	.word	0x00010218
    3e94:	00002571 	.word	0x00002571

00003e98 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3e98:	4b0c      	ldr	r3, [pc, #48]	; (3ecc <cpu_irq_enter_critical+0x34>)
    3e9a:	681b      	ldr	r3, [r3, #0]
    3e9c:	2b00      	cmp	r3, #0
    3e9e:	d106      	bne.n	3eae <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3ea0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3ea4:	2b00      	cmp	r3, #0
    3ea6:	d007      	beq.n	3eb8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3ea8:	2200      	movs	r2, #0
    3eaa:	4b09      	ldr	r3, [pc, #36]	; (3ed0 <cpu_irq_enter_critical+0x38>)
    3eac:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3eae:	4a07      	ldr	r2, [pc, #28]	; (3ecc <cpu_irq_enter_critical+0x34>)
    3eb0:	6813      	ldr	r3, [r2, #0]
    3eb2:	3301      	adds	r3, #1
    3eb4:	6013      	str	r3, [r2, #0]
}
    3eb6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    3eb8:	b672      	cpsid	i
    3eba:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3ebe:	2200      	movs	r2, #0
    3ec0:	4b04      	ldr	r3, [pc, #16]	; (3ed4 <cpu_irq_enter_critical+0x3c>)
    3ec2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3ec4:	3201      	adds	r2, #1
    3ec6:	4b02      	ldr	r3, [pc, #8]	; (3ed0 <cpu_irq_enter_critical+0x38>)
    3ec8:	701a      	strb	r2, [r3, #0]
    3eca:	e7f0      	b.n	3eae <cpu_irq_enter_critical+0x16>
    3ecc:	20000214 	.word	0x20000214
    3ed0:	20000218 	.word	0x20000218
    3ed4:	2000000a 	.word	0x2000000a

00003ed8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3ed8:	4b08      	ldr	r3, [pc, #32]	; (3efc <cpu_irq_leave_critical+0x24>)
    3eda:	681a      	ldr	r2, [r3, #0]
    3edc:	3a01      	subs	r2, #1
    3ede:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3ee0:	681b      	ldr	r3, [r3, #0]
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	d109      	bne.n	3efa <cpu_irq_leave_critical+0x22>
    3ee6:	4b06      	ldr	r3, [pc, #24]	; (3f00 <cpu_irq_leave_critical+0x28>)
    3ee8:	781b      	ldrb	r3, [r3, #0]
    3eea:	2b00      	cmp	r3, #0
    3eec:	d005      	beq.n	3efa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3eee:	2201      	movs	r2, #1
    3ef0:	4b04      	ldr	r3, [pc, #16]	; (3f04 <cpu_irq_leave_critical+0x2c>)
    3ef2:	701a      	strb	r2, [r3, #0]
    3ef4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3ef8:	b662      	cpsie	i
	}
}
    3efa:	4770      	bx	lr
    3efc:	20000214 	.word	0x20000214
    3f00:	20000218 	.word	0x20000218
    3f04:	2000000a 	.word	0x2000000a

00003f08 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f0a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    3f0c:	ac01      	add	r4, sp, #4
    3f0e:	2501      	movs	r5, #1
    3f10:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    3f12:	2700      	movs	r7, #0
    3f14:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3f16:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3f18:	0021      	movs	r1, r4
    3f1a:	2017      	movs	r0, #23
    3f1c:	4e06      	ldr	r6, [pc, #24]	; (3f38 <system_board_init+0x30>)
    3f1e:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    3f20:	2280      	movs	r2, #128	; 0x80
    3f22:	0412      	lsls	r2, r2, #16
    3f24:	4b05      	ldr	r3, [pc, #20]	; (3f3c <system_board_init+0x34>)
    3f26:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3f28:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3f2a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3f2c:	0021      	movs	r1, r4
    3f2e:	2037      	movs	r0, #55	; 0x37
    3f30:	47b0      	blx	r6
}
    3f32:	b003      	add	sp, #12
    3f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	00004111 	.word	0x00004111
    3f3c:	41004400 	.word	0x41004400

00003f40 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3f40:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    3f42:	2a00      	cmp	r2, #0
    3f44:	d001      	beq.n	3f4a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    3f46:	0018      	movs	r0, r3
    3f48:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    3f4a:	008b      	lsls	r3, r1, #2
    3f4c:	4a06      	ldr	r2, [pc, #24]	; (3f68 <extint_register_callback+0x28>)
    3f4e:	589b      	ldr	r3, [r3, r2]
    3f50:	2b00      	cmp	r3, #0
    3f52:	d003      	beq.n	3f5c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    3f54:	4283      	cmp	r3, r0
    3f56:	d005      	beq.n	3f64 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    3f58:	231d      	movs	r3, #29
    3f5a:	e7f4      	b.n	3f46 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    3f5c:	0089      	lsls	r1, r1, #2
    3f5e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    3f60:	2300      	movs	r3, #0
    3f62:	e7f0      	b.n	3f46 <extint_register_callback+0x6>
		return STATUS_OK;
    3f64:	2300      	movs	r3, #0
    3f66:	e7ee      	b.n	3f46 <extint_register_callback+0x6>
    3f68:	200003ec 	.word	0x200003ec

00003f6c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3f6c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3f6e:	2900      	cmp	r1, #0
    3f70:	d001      	beq.n	3f76 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    3f72:	0018      	movs	r0, r3
    3f74:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    3f76:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    3f78:	281f      	cmp	r0, #31
    3f7a:	d800      	bhi.n	3f7e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    3f7c:	4a02      	ldr	r2, [pc, #8]	; (3f88 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    3f7e:	2301      	movs	r3, #1
    3f80:	4083      	lsls	r3, r0
    3f82:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    3f84:	2300      	movs	r3, #0
    3f86:	e7f4      	b.n	3f72 <extint_chan_enable_callback+0x6>
    3f88:	40001800 	.word	0x40001800

00003f8c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3f8c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3f8e:	2900      	cmp	r1, #0
    3f90:	d001      	beq.n	3f96 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    3f92:	0018      	movs	r0, r3
    3f94:	4770      	bx	lr
		return NULL;
    3f96:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    3f98:	281f      	cmp	r0, #31
    3f9a:	d800      	bhi.n	3f9e <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    3f9c:	4a02      	ldr	r2, [pc, #8]	; (3fa8 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    3f9e:	2301      	movs	r3, #1
    3fa0:	4083      	lsls	r3, r0
    3fa2:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    3fa4:	2300      	movs	r3, #0
    3fa6:	e7f4      	b.n	3f92 <extint_chan_disable_callback+0x6>
    3fa8:	40001800 	.word	0x40001800

00003fac <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3fac:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3fae:	2200      	movs	r2, #0
    3fb0:	4b10      	ldr	r3, [pc, #64]	; (3ff4 <EIC_Handler+0x48>)
    3fb2:	701a      	strb	r2, [r3, #0]
    3fb4:	2300      	movs	r3, #0
    3fb6:	4910      	ldr	r1, [pc, #64]	; (3ff8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3fb8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3fba:	4e10      	ldr	r6, [pc, #64]	; (3ffc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3fbc:	4c0d      	ldr	r4, [pc, #52]	; (3ff4 <EIC_Handler+0x48>)
    3fbe:	e00a      	b.n	3fd6 <EIC_Handler+0x2a>
		return eics[eic_index];
    3fc0:	490d      	ldr	r1, [pc, #52]	; (3ff8 <EIC_Handler+0x4c>)
    3fc2:	e008      	b.n	3fd6 <EIC_Handler+0x2a>
    3fc4:	7823      	ldrb	r3, [r4, #0]
    3fc6:	3301      	adds	r3, #1
    3fc8:	b2db      	uxtb	r3, r3
    3fca:	7023      	strb	r3, [r4, #0]
    3fcc:	2b0f      	cmp	r3, #15
    3fce:	d810      	bhi.n	3ff2 <EIC_Handler+0x46>
		return NULL;
    3fd0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    3fd2:	2b1f      	cmp	r3, #31
    3fd4:	d9f4      	bls.n	3fc0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    3fd6:	0028      	movs	r0, r5
    3fd8:	4018      	ands	r0, r3
    3fda:	2201      	movs	r2, #1
    3fdc:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    3fde:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    3fe0:	4210      	tst	r0, r2
    3fe2:	d0ef      	beq.n	3fc4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3fe4:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3fe6:	009b      	lsls	r3, r3, #2
    3fe8:	599b      	ldr	r3, [r3, r6]
    3fea:	2b00      	cmp	r3, #0
    3fec:	d0ea      	beq.n	3fc4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3fee:	4798      	blx	r3
    3ff0:	e7e8      	b.n	3fc4 <EIC_Handler+0x18>
			}
		}
	}
}
    3ff2:	bd70      	pop	{r4, r5, r6, pc}
    3ff4:	200003e8 	.word	0x200003e8
    3ff8:	40001800 	.word	0x40001800
    3ffc:	200003ec 	.word	0x200003ec

00004000 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4000:	4a04      	ldr	r2, [pc, #16]	; (4014 <_extint_enable+0x14>)
    4002:	7813      	ldrb	r3, [r2, #0]
    4004:	2102      	movs	r1, #2
    4006:	430b      	orrs	r3, r1
    4008:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    400a:	7853      	ldrb	r3, [r2, #1]
    400c:	b25b      	sxtb	r3, r3
    400e:	2b00      	cmp	r3, #0
    4010:	dbfb      	blt.n	400a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4012:	4770      	bx	lr
    4014:	40001800 	.word	0x40001800

00004018 <_system_extint_init>:
{
    4018:	b500      	push	{lr}
    401a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    401c:	4a12      	ldr	r2, [pc, #72]	; (4068 <_system_extint_init+0x50>)
    401e:	6993      	ldr	r3, [r2, #24]
    4020:	2140      	movs	r1, #64	; 0x40
    4022:	430b      	orrs	r3, r1
    4024:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4026:	a901      	add	r1, sp, #4
    4028:	2300      	movs	r3, #0
    402a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    402c:	2005      	movs	r0, #5
    402e:	4b0f      	ldr	r3, [pc, #60]	; (406c <_system_extint_init+0x54>)
    4030:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    4032:	2005      	movs	r0, #5
    4034:	4b0e      	ldr	r3, [pc, #56]	; (4070 <_system_extint_init+0x58>)
    4036:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4038:	4a0e      	ldr	r2, [pc, #56]	; (4074 <_system_extint_init+0x5c>)
    403a:	7813      	ldrb	r3, [r2, #0]
    403c:	2101      	movs	r1, #1
    403e:	430b      	orrs	r3, r1
    4040:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4042:	7853      	ldrb	r3, [r2, #1]
    4044:	b25b      	sxtb	r3, r3
    4046:	2b00      	cmp	r3, #0
    4048:	dbfb      	blt.n	4042 <_system_extint_init+0x2a>
    404a:	4b0b      	ldr	r3, [pc, #44]	; (4078 <_system_extint_init+0x60>)
    404c:	0019      	movs	r1, r3
    404e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4050:	2200      	movs	r2, #0
    4052:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4054:	4299      	cmp	r1, r3
    4056:	d1fc      	bne.n	4052 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4058:	2210      	movs	r2, #16
    405a:	4b08      	ldr	r3, [pc, #32]	; (407c <_system_extint_init+0x64>)
    405c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    405e:	4b08      	ldr	r3, [pc, #32]	; (4080 <_system_extint_init+0x68>)
    4060:	4798      	blx	r3
}
    4062:	b003      	add	sp, #12
    4064:	bd00      	pop	{pc}
    4066:	46c0      	nop			; (mov r8, r8)
    4068:	40000400 	.word	0x40000400
    406c:	000057b1 	.word	0x000057b1
    4070:	00005725 	.word	0x00005725
    4074:	40001800 	.word	0x40001800
    4078:	200003ec 	.word	0x200003ec
    407c:	e000e100 	.word	0xe000e100
    4080:	00004001 	.word	0x00004001

00004084 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4084:	2300      	movs	r3, #0
    4086:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4088:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    408a:	2201      	movs	r2, #1
    408c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    408e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    4090:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4092:	3302      	adds	r3, #2
    4094:	72c3      	strb	r3, [r0, #11]
}
    4096:	4770      	bx	lr

00004098 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4098:	b5f0      	push	{r4, r5, r6, r7, lr}
    409a:	b083      	sub	sp, #12
    409c:	0005      	movs	r5, r0
    409e:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    40a0:	a901      	add	r1, sp, #4
    40a2:	2300      	movs	r3, #0
    40a4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    40a6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    40a8:	7923      	ldrb	r3, [r4, #4]
    40aa:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    40ac:	7a23      	ldrb	r3, [r4, #8]
    40ae:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    40b0:	7820      	ldrb	r0, [r4, #0]
    40b2:	4b15      	ldr	r3, [pc, #84]	; (4108 <extint_chan_set_config+0x70>)
    40b4:	4798      	blx	r3
		return NULL;
    40b6:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    40b8:	2d1f      	cmp	r5, #31
    40ba:	d800      	bhi.n	40be <extint_chan_set_config+0x26>
		return eics[eic_index];
    40bc:	4813      	ldr	r0, [pc, #76]	; (410c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    40be:	2207      	movs	r2, #7
    40c0:	402a      	ands	r2, r5
    40c2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    40c4:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    40c6:	7aa3      	ldrb	r3, [r4, #10]
    40c8:	2b00      	cmp	r3, #0
    40ca:	d001      	beq.n	40d0 <extint_chan_set_config+0x38>
    40cc:	2308      	movs	r3, #8
    40ce:	431f      	orrs	r7, r3
    40d0:	08eb      	lsrs	r3, r5, #3
    40d2:	009b      	lsls	r3, r3, #2
    40d4:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    40d6:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    40d8:	260f      	movs	r6, #15
    40da:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    40dc:	43b1      	bics	r1, r6
			(new_config << config_pos);
    40de:	4097      	lsls	r7, r2
    40e0:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    40e2:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    40e4:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    40e6:	7a63      	ldrb	r3, [r4, #9]
    40e8:	2b00      	cmp	r3, #0
    40ea:	d106      	bne.n	40fa <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    40ec:	6943      	ldr	r3, [r0, #20]
    40ee:	2201      	movs	r2, #1
    40f0:	40aa      	lsls	r2, r5
    40f2:	4393      	bics	r3, r2
    40f4:	6143      	str	r3, [r0, #20]
	}
}
    40f6:	b003      	add	sp, #12
    40f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    40fa:	6942      	ldr	r2, [r0, #20]
    40fc:	2301      	movs	r3, #1
    40fe:	40ab      	lsls	r3, r5
    4100:	4313      	orrs	r3, r2
    4102:	6143      	str	r3, [r0, #20]
    4104:	e7f7      	b.n	40f6 <extint_chan_set_config+0x5e>
    4106:	46c0      	nop			; (mov r8, r8)
    4108:	000058a9 	.word	0x000058a9
    410c:	40001800 	.word	0x40001800

00004110 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4110:	b500      	push	{lr}
    4112:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4114:	ab01      	add	r3, sp, #4
    4116:	2280      	movs	r2, #128	; 0x80
    4118:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    411a:	780a      	ldrb	r2, [r1, #0]
    411c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    411e:	784a      	ldrb	r2, [r1, #1]
    4120:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4122:	788a      	ldrb	r2, [r1, #2]
    4124:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4126:	0019      	movs	r1, r3
    4128:	4b01      	ldr	r3, [pc, #4]	; (4130 <port_pin_set_config+0x20>)
    412a:	4798      	blx	r3
}
    412c:	b003      	add	sp, #12
    412e:	bd00      	pop	{pc}
    4130:	000058a9 	.word	0x000058a9

00004134 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    4134:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    4136:	4b0f      	ldr	r3, [pc, #60]	; (4174 <RTC_Handler+0x40>)
    4138:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    413a:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    413c:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    413e:	8a13      	ldrh	r3, [r2, #16]
    4140:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    4142:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    4144:	79e3      	ldrb	r3, [r4, #7]
    4146:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    4148:	b258      	sxtb	r0, r3
    414a:	2800      	cmp	r0, #0
    414c:	db06      	blt.n	415c <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    414e:	07db      	lsls	r3, r3, #31
    4150:	d503      	bpl.n	415a <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    4152:	07cb      	lsls	r3, r1, #31
    4154:	d40a      	bmi.n	416c <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    4156:	2301      	movs	r3, #1
    4158:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    415a:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    415c:	078b      	lsls	r3, r1, #30
    415e:	d402      	bmi.n	4166 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    4160:	2380      	movs	r3, #128	; 0x80
    4162:	7223      	strb	r3, [r4, #8]
    4164:	e7f9      	b.n	415a <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    4166:	68d3      	ldr	r3, [r2, #12]
    4168:	4798      	blx	r3
    416a:	e7f9      	b.n	4160 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    416c:	6893      	ldr	r3, [r2, #8]
    416e:	4798      	blx	r3
    4170:	e7f1      	b.n	4156 <RTC_Handler+0x22>
    4172:	46c0      	nop			; (mov r8, r8)
    4174:	2000042c 	.word	0x2000042c

00004178 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4178:	b5f0      	push	{r4, r5, r6, r7, lr}
    417a:	46de      	mov	lr, fp
    417c:	4657      	mov	r7, sl
    417e:	464e      	mov	r6, r9
    4180:	4645      	mov	r5, r8
    4182:	b5e0      	push	{r5, r6, r7, lr}
    4184:	b087      	sub	sp, #28
    4186:	4680      	mov	r8, r0
    4188:	9104      	str	r1, [sp, #16]
    418a:	0016      	movs	r6, r2
    418c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    418e:	2200      	movs	r2, #0
    4190:	2300      	movs	r3, #0
    4192:	2100      	movs	r1, #0
    4194:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    4196:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    4198:	2001      	movs	r0, #1
    419a:	0021      	movs	r1, r4
    419c:	9600      	str	r6, [sp, #0]
    419e:	9701      	str	r7, [sp, #4]
    41a0:	465c      	mov	r4, fp
    41a2:	9403      	str	r4, [sp, #12]
    41a4:	4644      	mov	r4, r8
    41a6:	9405      	str	r4, [sp, #20]
    41a8:	e013      	b.n	41d2 <long_division+0x5a>
    41aa:	2420      	movs	r4, #32
    41ac:	1a64      	subs	r4, r4, r1
    41ae:	0005      	movs	r5, r0
    41b0:	40e5      	lsrs	r5, r4
    41b2:	46a8      	mov	r8, r5
    41b4:	e014      	b.n	41e0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    41b6:	9c00      	ldr	r4, [sp, #0]
    41b8:	9d01      	ldr	r5, [sp, #4]
    41ba:	1b12      	subs	r2, r2, r4
    41bc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    41be:	465c      	mov	r4, fp
    41c0:	464d      	mov	r5, r9
    41c2:	432c      	orrs	r4, r5
    41c4:	46a3      	mov	fp, r4
    41c6:	9c03      	ldr	r4, [sp, #12]
    41c8:	4645      	mov	r5, r8
    41ca:	432c      	orrs	r4, r5
    41cc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    41ce:	3901      	subs	r1, #1
    41d0:	d325      	bcc.n	421e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    41d2:	2420      	movs	r4, #32
    41d4:	4264      	negs	r4, r4
    41d6:	190c      	adds	r4, r1, r4
    41d8:	d4e7      	bmi.n	41aa <long_division+0x32>
    41da:	0005      	movs	r5, r0
    41dc:	40a5      	lsls	r5, r4
    41de:	46a8      	mov	r8, r5
    41e0:	0004      	movs	r4, r0
    41e2:	408c      	lsls	r4, r1
    41e4:	46a1      	mov	r9, r4
		r = r << 1;
    41e6:	1892      	adds	r2, r2, r2
    41e8:	415b      	adcs	r3, r3
    41ea:	0014      	movs	r4, r2
    41ec:	001d      	movs	r5, r3
		if (n & bit_shift) {
    41ee:	9e05      	ldr	r6, [sp, #20]
    41f0:	464f      	mov	r7, r9
    41f2:	403e      	ands	r6, r7
    41f4:	46b4      	mov	ip, r6
    41f6:	9e04      	ldr	r6, [sp, #16]
    41f8:	4647      	mov	r7, r8
    41fa:	403e      	ands	r6, r7
    41fc:	46b2      	mov	sl, r6
    41fe:	4666      	mov	r6, ip
    4200:	4657      	mov	r7, sl
    4202:	433e      	orrs	r6, r7
    4204:	d003      	beq.n	420e <long_division+0x96>
			r |= 0x01;
    4206:	0006      	movs	r6, r0
    4208:	4326      	orrs	r6, r4
    420a:	0032      	movs	r2, r6
    420c:	002b      	movs	r3, r5
		if (r >= d) {
    420e:	9c00      	ldr	r4, [sp, #0]
    4210:	9d01      	ldr	r5, [sp, #4]
    4212:	429d      	cmp	r5, r3
    4214:	d8db      	bhi.n	41ce <long_division+0x56>
    4216:	d1ce      	bne.n	41b6 <long_division+0x3e>
    4218:	4294      	cmp	r4, r2
    421a:	d8d8      	bhi.n	41ce <long_division+0x56>
    421c:	e7cb      	b.n	41b6 <long_division+0x3e>
    421e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4220:	4658      	mov	r0, fp
    4222:	0019      	movs	r1, r3
    4224:	b007      	add	sp, #28
    4226:	bc3c      	pop	{r2, r3, r4, r5}
    4228:	4690      	mov	r8, r2
    422a:	4699      	mov	r9, r3
    422c:	46a2      	mov	sl, r4
    422e:	46ab      	mov	fp, r5
    4230:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004232 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4232:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4234:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4236:	2340      	movs	r3, #64	; 0x40
    4238:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    423a:	4281      	cmp	r1, r0
    423c:	d202      	bcs.n	4244 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    423e:	0018      	movs	r0, r3
    4240:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4242:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4244:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    4246:	1c63      	adds	r3, r4, #1
    4248:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    424a:	4288      	cmp	r0, r1
    424c:	d9f9      	bls.n	4242 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    424e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    4250:	2cff      	cmp	r4, #255	; 0xff
    4252:	d8f4      	bhi.n	423e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4254:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    4256:	2300      	movs	r3, #0
    4258:	e7f1      	b.n	423e <_sercom_get_sync_baud_val+0xc>
	...

0000425c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    425c:	b5f0      	push	{r4, r5, r6, r7, lr}
    425e:	b083      	sub	sp, #12
    4260:	000f      	movs	r7, r1
    4262:	0016      	movs	r6, r2
    4264:	aa08      	add	r2, sp, #32
    4266:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4268:	0004      	movs	r4, r0
    426a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    426c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    426e:	42bc      	cmp	r4, r7
    4270:	d902      	bls.n	4278 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    4272:	0010      	movs	r0, r2
    4274:	b003      	add	sp, #12
    4276:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4278:	2b00      	cmp	r3, #0
    427a:	d114      	bne.n	42a6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    427c:	0002      	movs	r2, r0
    427e:	0008      	movs	r0, r1
    4280:	2100      	movs	r1, #0
    4282:	4c19      	ldr	r4, [pc, #100]	; (42e8 <_sercom_get_async_baud_val+0x8c>)
    4284:	47a0      	blx	r4
    4286:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    4288:	003a      	movs	r2, r7
    428a:	2300      	movs	r3, #0
    428c:	2000      	movs	r0, #0
    428e:	4c17      	ldr	r4, [pc, #92]	; (42ec <_sercom_get_async_baud_val+0x90>)
    4290:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4292:	2200      	movs	r2, #0
    4294:	2301      	movs	r3, #1
    4296:	1a12      	subs	r2, r2, r0
    4298:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    429a:	0c12      	lsrs	r2, r2, #16
    429c:	041b      	lsls	r3, r3, #16
    429e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    42a0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    42a2:	2200      	movs	r2, #0
    42a4:	e7e5      	b.n	4272 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    42a6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    42a8:	2b01      	cmp	r3, #1
    42aa:	d1f9      	bne.n	42a0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    42ac:	000a      	movs	r2, r1
    42ae:	2300      	movs	r3, #0
    42b0:	2100      	movs	r1, #0
    42b2:	4c0d      	ldr	r4, [pc, #52]	; (42e8 <_sercom_get_async_baud_val+0x8c>)
    42b4:	47a0      	blx	r4
    42b6:	0002      	movs	r2, r0
    42b8:	000b      	movs	r3, r1
    42ba:	9200      	str	r2, [sp, #0]
    42bc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    42be:	0038      	movs	r0, r7
    42c0:	2100      	movs	r1, #0
    42c2:	4c0a      	ldr	r4, [pc, #40]	; (42ec <_sercom_get_async_baud_val+0x90>)
    42c4:	47a0      	blx	r4
    42c6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    42c8:	2380      	movs	r3, #128	; 0x80
    42ca:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    42cc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    42ce:	4298      	cmp	r0, r3
    42d0:	d8cf      	bhi.n	4272 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    42d2:	0f79      	lsrs	r1, r7, #29
    42d4:	00f8      	lsls	r0, r7, #3
    42d6:	9a00      	ldr	r2, [sp, #0]
    42d8:	9b01      	ldr	r3, [sp, #4]
    42da:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    42dc:	00ea      	lsls	r2, r5, #3
    42de:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    42e0:	b2d2      	uxtb	r2, r2
    42e2:	0352      	lsls	r2, r2, #13
    42e4:	432a      	orrs	r2, r5
    42e6:	e7db      	b.n	42a0 <_sercom_get_async_baud_val+0x44>
    42e8:	00007c85 	.word	0x00007c85
    42ec:	00004179 	.word	0x00004179

000042f0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    42f0:	b510      	push	{r4, lr}
    42f2:	b082      	sub	sp, #8
    42f4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    42f6:	4b0e      	ldr	r3, [pc, #56]	; (4330 <sercom_set_gclk_generator+0x40>)
    42f8:	781b      	ldrb	r3, [r3, #0]
    42fa:	2b00      	cmp	r3, #0
    42fc:	d007      	beq.n	430e <sercom_set_gclk_generator+0x1e>
    42fe:	2900      	cmp	r1, #0
    4300:	d105      	bne.n	430e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4302:	4b0b      	ldr	r3, [pc, #44]	; (4330 <sercom_set_gclk_generator+0x40>)
    4304:	785b      	ldrb	r3, [r3, #1]
    4306:	4283      	cmp	r3, r0
    4308:	d010      	beq.n	432c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    430a:	201d      	movs	r0, #29
    430c:	e00c      	b.n	4328 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    430e:	a901      	add	r1, sp, #4
    4310:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4312:	2013      	movs	r0, #19
    4314:	4b07      	ldr	r3, [pc, #28]	; (4334 <sercom_set_gclk_generator+0x44>)
    4316:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4318:	2013      	movs	r0, #19
    431a:	4b07      	ldr	r3, [pc, #28]	; (4338 <sercom_set_gclk_generator+0x48>)
    431c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    431e:	4b04      	ldr	r3, [pc, #16]	; (4330 <sercom_set_gclk_generator+0x40>)
    4320:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4322:	2201      	movs	r2, #1
    4324:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4326:	2000      	movs	r0, #0
}
    4328:	b002      	add	sp, #8
    432a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    432c:	2000      	movs	r0, #0
    432e:	e7fb      	b.n	4328 <sercom_set_gclk_generator+0x38>
    4330:	2000021c 	.word	0x2000021c
    4334:	000057b1 	.word	0x000057b1
    4338:	00005725 	.word	0x00005725

0000433c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    433c:	4b40      	ldr	r3, [pc, #256]	; (4440 <_sercom_get_default_pad+0x104>)
    433e:	4298      	cmp	r0, r3
    4340:	d031      	beq.n	43a6 <_sercom_get_default_pad+0x6a>
    4342:	d90a      	bls.n	435a <_sercom_get_default_pad+0x1e>
    4344:	4b3f      	ldr	r3, [pc, #252]	; (4444 <_sercom_get_default_pad+0x108>)
    4346:	4298      	cmp	r0, r3
    4348:	d04d      	beq.n	43e6 <_sercom_get_default_pad+0xaa>
    434a:	4b3f      	ldr	r3, [pc, #252]	; (4448 <_sercom_get_default_pad+0x10c>)
    434c:	4298      	cmp	r0, r3
    434e:	d05a      	beq.n	4406 <_sercom_get_default_pad+0xca>
    4350:	4b3e      	ldr	r3, [pc, #248]	; (444c <_sercom_get_default_pad+0x110>)
    4352:	4298      	cmp	r0, r3
    4354:	d037      	beq.n	43c6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    4356:	2000      	movs	r0, #0
}
    4358:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    435a:	4b3d      	ldr	r3, [pc, #244]	; (4450 <_sercom_get_default_pad+0x114>)
    435c:	4298      	cmp	r0, r3
    435e:	d00c      	beq.n	437a <_sercom_get_default_pad+0x3e>
    4360:	4b3c      	ldr	r3, [pc, #240]	; (4454 <_sercom_get_default_pad+0x118>)
    4362:	4298      	cmp	r0, r3
    4364:	d1f7      	bne.n	4356 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4366:	2901      	cmp	r1, #1
    4368:	d017      	beq.n	439a <_sercom_get_default_pad+0x5e>
    436a:	2900      	cmp	r1, #0
    436c:	d05d      	beq.n	442a <_sercom_get_default_pad+0xee>
    436e:	2902      	cmp	r1, #2
    4370:	d015      	beq.n	439e <_sercom_get_default_pad+0x62>
    4372:	2903      	cmp	r1, #3
    4374:	d015      	beq.n	43a2 <_sercom_get_default_pad+0x66>
	return 0;
    4376:	2000      	movs	r0, #0
    4378:	e7ee      	b.n	4358 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    437a:	2901      	cmp	r1, #1
    437c:	d007      	beq.n	438e <_sercom_get_default_pad+0x52>
    437e:	2900      	cmp	r1, #0
    4380:	d051      	beq.n	4426 <_sercom_get_default_pad+0xea>
    4382:	2902      	cmp	r1, #2
    4384:	d005      	beq.n	4392 <_sercom_get_default_pad+0x56>
    4386:	2903      	cmp	r1, #3
    4388:	d005      	beq.n	4396 <_sercom_get_default_pad+0x5a>
	return 0;
    438a:	2000      	movs	r0, #0
    438c:	e7e4      	b.n	4358 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    438e:	4832      	ldr	r0, [pc, #200]	; (4458 <_sercom_get_default_pad+0x11c>)
    4390:	e7e2      	b.n	4358 <_sercom_get_default_pad+0x1c>
    4392:	4832      	ldr	r0, [pc, #200]	; (445c <_sercom_get_default_pad+0x120>)
    4394:	e7e0      	b.n	4358 <_sercom_get_default_pad+0x1c>
    4396:	4832      	ldr	r0, [pc, #200]	; (4460 <_sercom_get_default_pad+0x124>)
    4398:	e7de      	b.n	4358 <_sercom_get_default_pad+0x1c>
    439a:	4832      	ldr	r0, [pc, #200]	; (4464 <_sercom_get_default_pad+0x128>)
    439c:	e7dc      	b.n	4358 <_sercom_get_default_pad+0x1c>
    439e:	4832      	ldr	r0, [pc, #200]	; (4468 <_sercom_get_default_pad+0x12c>)
    43a0:	e7da      	b.n	4358 <_sercom_get_default_pad+0x1c>
    43a2:	4832      	ldr	r0, [pc, #200]	; (446c <_sercom_get_default_pad+0x130>)
    43a4:	e7d8      	b.n	4358 <_sercom_get_default_pad+0x1c>
    43a6:	2901      	cmp	r1, #1
    43a8:	d007      	beq.n	43ba <_sercom_get_default_pad+0x7e>
    43aa:	2900      	cmp	r1, #0
    43ac:	d03f      	beq.n	442e <_sercom_get_default_pad+0xf2>
    43ae:	2902      	cmp	r1, #2
    43b0:	d005      	beq.n	43be <_sercom_get_default_pad+0x82>
    43b2:	2903      	cmp	r1, #3
    43b4:	d005      	beq.n	43c2 <_sercom_get_default_pad+0x86>
	return 0;
    43b6:	2000      	movs	r0, #0
    43b8:	e7ce      	b.n	4358 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    43ba:	482d      	ldr	r0, [pc, #180]	; (4470 <_sercom_get_default_pad+0x134>)
    43bc:	e7cc      	b.n	4358 <_sercom_get_default_pad+0x1c>
    43be:	482d      	ldr	r0, [pc, #180]	; (4474 <_sercom_get_default_pad+0x138>)
    43c0:	e7ca      	b.n	4358 <_sercom_get_default_pad+0x1c>
    43c2:	482d      	ldr	r0, [pc, #180]	; (4478 <_sercom_get_default_pad+0x13c>)
    43c4:	e7c8      	b.n	4358 <_sercom_get_default_pad+0x1c>
    43c6:	2901      	cmp	r1, #1
    43c8:	d007      	beq.n	43da <_sercom_get_default_pad+0x9e>
    43ca:	2900      	cmp	r1, #0
    43cc:	d031      	beq.n	4432 <_sercom_get_default_pad+0xf6>
    43ce:	2902      	cmp	r1, #2
    43d0:	d005      	beq.n	43de <_sercom_get_default_pad+0xa2>
    43d2:	2903      	cmp	r1, #3
    43d4:	d005      	beq.n	43e2 <_sercom_get_default_pad+0xa6>
	return 0;
    43d6:	2000      	movs	r0, #0
    43d8:	e7be      	b.n	4358 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    43da:	4828      	ldr	r0, [pc, #160]	; (447c <_sercom_get_default_pad+0x140>)
    43dc:	e7bc      	b.n	4358 <_sercom_get_default_pad+0x1c>
    43de:	4828      	ldr	r0, [pc, #160]	; (4480 <_sercom_get_default_pad+0x144>)
    43e0:	e7ba      	b.n	4358 <_sercom_get_default_pad+0x1c>
    43e2:	4828      	ldr	r0, [pc, #160]	; (4484 <_sercom_get_default_pad+0x148>)
    43e4:	e7b8      	b.n	4358 <_sercom_get_default_pad+0x1c>
    43e6:	2901      	cmp	r1, #1
    43e8:	d007      	beq.n	43fa <_sercom_get_default_pad+0xbe>
    43ea:	2900      	cmp	r1, #0
    43ec:	d023      	beq.n	4436 <_sercom_get_default_pad+0xfa>
    43ee:	2902      	cmp	r1, #2
    43f0:	d005      	beq.n	43fe <_sercom_get_default_pad+0xc2>
    43f2:	2903      	cmp	r1, #3
    43f4:	d005      	beq.n	4402 <_sercom_get_default_pad+0xc6>
	return 0;
    43f6:	2000      	movs	r0, #0
    43f8:	e7ae      	b.n	4358 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    43fa:	4823      	ldr	r0, [pc, #140]	; (4488 <_sercom_get_default_pad+0x14c>)
    43fc:	e7ac      	b.n	4358 <_sercom_get_default_pad+0x1c>
    43fe:	4823      	ldr	r0, [pc, #140]	; (448c <_sercom_get_default_pad+0x150>)
    4400:	e7aa      	b.n	4358 <_sercom_get_default_pad+0x1c>
    4402:	4823      	ldr	r0, [pc, #140]	; (4490 <_sercom_get_default_pad+0x154>)
    4404:	e7a8      	b.n	4358 <_sercom_get_default_pad+0x1c>
    4406:	2901      	cmp	r1, #1
    4408:	d007      	beq.n	441a <_sercom_get_default_pad+0xde>
    440a:	2900      	cmp	r1, #0
    440c:	d015      	beq.n	443a <_sercom_get_default_pad+0xfe>
    440e:	2902      	cmp	r1, #2
    4410:	d005      	beq.n	441e <_sercom_get_default_pad+0xe2>
    4412:	2903      	cmp	r1, #3
    4414:	d005      	beq.n	4422 <_sercom_get_default_pad+0xe6>
	return 0;
    4416:	2000      	movs	r0, #0
    4418:	e79e      	b.n	4358 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    441a:	481e      	ldr	r0, [pc, #120]	; (4494 <_sercom_get_default_pad+0x158>)
    441c:	e79c      	b.n	4358 <_sercom_get_default_pad+0x1c>
    441e:	481e      	ldr	r0, [pc, #120]	; (4498 <_sercom_get_default_pad+0x15c>)
    4420:	e79a      	b.n	4358 <_sercom_get_default_pad+0x1c>
    4422:	481e      	ldr	r0, [pc, #120]	; (449c <_sercom_get_default_pad+0x160>)
    4424:	e798      	b.n	4358 <_sercom_get_default_pad+0x1c>
    4426:	481e      	ldr	r0, [pc, #120]	; (44a0 <_sercom_get_default_pad+0x164>)
    4428:	e796      	b.n	4358 <_sercom_get_default_pad+0x1c>
    442a:	2003      	movs	r0, #3
    442c:	e794      	b.n	4358 <_sercom_get_default_pad+0x1c>
    442e:	481d      	ldr	r0, [pc, #116]	; (44a4 <_sercom_get_default_pad+0x168>)
    4430:	e792      	b.n	4358 <_sercom_get_default_pad+0x1c>
    4432:	481d      	ldr	r0, [pc, #116]	; (44a8 <_sercom_get_default_pad+0x16c>)
    4434:	e790      	b.n	4358 <_sercom_get_default_pad+0x1c>
    4436:	481d      	ldr	r0, [pc, #116]	; (44ac <_sercom_get_default_pad+0x170>)
    4438:	e78e      	b.n	4358 <_sercom_get_default_pad+0x1c>
    443a:	481d      	ldr	r0, [pc, #116]	; (44b0 <_sercom_get_default_pad+0x174>)
    443c:	e78c      	b.n	4358 <_sercom_get_default_pad+0x1c>
    443e:	46c0      	nop			; (mov r8, r8)
    4440:	42001000 	.word	0x42001000
    4444:	42001800 	.word	0x42001800
    4448:	42001c00 	.word	0x42001c00
    444c:	42001400 	.word	0x42001400
    4450:	42000800 	.word	0x42000800
    4454:	42000c00 	.word	0x42000c00
    4458:	00050003 	.word	0x00050003
    445c:	00060003 	.word	0x00060003
    4460:	00070003 	.word	0x00070003
    4464:	00010003 	.word	0x00010003
    4468:	001e0003 	.word	0x001e0003
    446c:	001f0003 	.word	0x001f0003
    4470:	00090003 	.word	0x00090003
    4474:	000a0003 	.word	0x000a0003
    4478:	000b0003 	.word	0x000b0003
    447c:	00110003 	.word	0x00110003
    4480:	00120003 	.word	0x00120003
    4484:	00130003 	.word	0x00130003
    4488:	000d0003 	.word	0x000d0003
    448c:	000e0003 	.word	0x000e0003
    4490:	000f0003 	.word	0x000f0003
    4494:	00170003 	.word	0x00170003
    4498:	00180003 	.word	0x00180003
    449c:	00190003 	.word	0x00190003
    44a0:	00040003 	.word	0x00040003
    44a4:	00080003 	.word	0x00080003
    44a8:	00100003 	.word	0x00100003
    44ac:	000c0003 	.word	0x000c0003
    44b0:	00160003 	.word	0x00160003

000044b4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    44b4:	b530      	push	{r4, r5, lr}
    44b6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    44b8:	4b0b      	ldr	r3, [pc, #44]	; (44e8 <_sercom_get_sercom_inst_index+0x34>)
    44ba:	466a      	mov	r2, sp
    44bc:	cb32      	ldmia	r3!, {r1, r4, r5}
    44be:	c232      	stmia	r2!, {r1, r4, r5}
    44c0:	cb32      	ldmia	r3!, {r1, r4, r5}
    44c2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    44c4:	9b00      	ldr	r3, [sp, #0]
    44c6:	4283      	cmp	r3, r0
    44c8:	d00b      	beq.n	44e2 <_sercom_get_sercom_inst_index+0x2e>
    44ca:	2301      	movs	r3, #1
    44cc:	009a      	lsls	r2, r3, #2
    44ce:	4669      	mov	r1, sp
    44d0:	5852      	ldr	r2, [r2, r1]
    44d2:	4282      	cmp	r2, r0
    44d4:	d006      	beq.n	44e4 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    44d6:	3301      	adds	r3, #1
    44d8:	2b06      	cmp	r3, #6
    44da:	d1f7      	bne.n	44cc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    44dc:	2000      	movs	r0, #0
}
    44de:	b007      	add	sp, #28
    44e0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    44e2:	2300      	movs	r3, #0
			return i;
    44e4:	b2d8      	uxtb	r0, r3
    44e6:	e7fa      	b.n	44de <_sercom_get_sercom_inst_index+0x2a>
    44e8:	0000a320 	.word	0x0000a320

000044ec <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    44ec:	4770      	bx	lr
	...

000044f0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    44f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    44f2:	4b0a      	ldr	r3, [pc, #40]	; (451c <_sercom_set_handler+0x2c>)
    44f4:	781b      	ldrb	r3, [r3, #0]
    44f6:	2b00      	cmp	r3, #0
    44f8:	d10c      	bne.n	4514 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    44fa:	4f09      	ldr	r7, [pc, #36]	; (4520 <_sercom_set_handler+0x30>)
    44fc:	4e09      	ldr	r6, [pc, #36]	; (4524 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    44fe:	4d0a      	ldr	r5, [pc, #40]	; (4528 <_sercom_set_handler+0x38>)
    4500:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4502:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4504:	195a      	adds	r2, r3, r5
    4506:	6014      	str	r4, [r2, #0]
    4508:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    450a:	2b18      	cmp	r3, #24
    450c:	d1f9      	bne.n	4502 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    450e:	2201      	movs	r2, #1
    4510:	4b02      	ldr	r3, [pc, #8]	; (451c <_sercom_set_handler+0x2c>)
    4512:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4514:	0080      	lsls	r0, r0, #2
    4516:	4b02      	ldr	r3, [pc, #8]	; (4520 <_sercom_set_handler+0x30>)
    4518:	50c1      	str	r1, [r0, r3]
}
    451a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    451c:	2000021e 	.word	0x2000021e
    4520:	20000220 	.word	0x20000220
    4524:	000044ed 	.word	0x000044ed
    4528:	20000430 	.word	0x20000430

0000452c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    452c:	b500      	push	{lr}
    452e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4530:	2309      	movs	r3, #9
    4532:	466a      	mov	r2, sp
    4534:	7013      	strb	r3, [r2, #0]
    4536:	3301      	adds	r3, #1
    4538:	7053      	strb	r3, [r2, #1]
    453a:	3301      	adds	r3, #1
    453c:	7093      	strb	r3, [r2, #2]
    453e:	3301      	adds	r3, #1
    4540:	70d3      	strb	r3, [r2, #3]
    4542:	3301      	adds	r3, #1
    4544:	7113      	strb	r3, [r2, #4]
    4546:	3301      	adds	r3, #1
    4548:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    454a:	4b03      	ldr	r3, [pc, #12]	; (4558 <_sercom_get_interrupt_vector+0x2c>)
    454c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    454e:	466b      	mov	r3, sp
    4550:	5618      	ldrsb	r0, [r3, r0]
}
    4552:	b003      	add	sp, #12
    4554:	bd00      	pop	{pc}
    4556:	46c0      	nop			; (mov r8, r8)
    4558:	000044b5 	.word	0x000044b5

0000455c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    455c:	b510      	push	{r4, lr}
    455e:	4b02      	ldr	r3, [pc, #8]	; (4568 <SERCOM0_Handler+0xc>)
    4560:	681b      	ldr	r3, [r3, #0]
    4562:	2000      	movs	r0, #0
    4564:	4798      	blx	r3
    4566:	bd10      	pop	{r4, pc}
    4568:	20000220 	.word	0x20000220

0000456c <SERCOM1_Handler>:
    456c:	b510      	push	{r4, lr}
    456e:	4b02      	ldr	r3, [pc, #8]	; (4578 <SERCOM1_Handler+0xc>)
    4570:	685b      	ldr	r3, [r3, #4]
    4572:	2001      	movs	r0, #1
    4574:	4798      	blx	r3
    4576:	bd10      	pop	{r4, pc}
    4578:	20000220 	.word	0x20000220

0000457c <SERCOM2_Handler>:
    457c:	b510      	push	{r4, lr}
    457e:	4b02      	ldr	r3, [pc, #8]	; (4588 <SERCOM2_Handler+0xc>)
    4580:	689b      	ldr	r3, [r3, #8]
    4582:	2002      	movs	r0, #2
    4584:	4798      	blx	r3
    4586:	bd10      	pop	{r4, pc}
    4588:	20000220 	.word	0x20000220

0000458c <SERCOM3_Handler>:
    458c:	b510      	push	{r4, lr}
    458e:	4b02      	ldr	r3, [pc, #8]	; (4598 <SERCOM3_Handler+0xc>)
    4590:	68db      	ldr	r3, [r3, #12]
    4592:	2003      	movs	r0, #3
    4594:	4798      	blx	r3
    4596:	bd10      	pop	{r4, pc}
    4598:	20000220 	.word	0x20000220

0000459c <SERCOM4_Handler>:
    459c:	b510      	push	{r4, lr}
    459e:	4b02      	ldr	r3, [pc, #8]	; (45a8 <SERCOM4_Handler+0xc>)
    45a0:	691b      	ldr	r3, [r3, #16]
    45a2:	2004      	movs	r0, #4
    45a4:	4798      	blx	r3
    45a6:	bd10      	pop	{r4, pc}
    45a8:	20000220 	.word	0x20000220

000045ac <SERCOM5_Handler>:
    45ac:	b510      	push	{r4, lr}
    45ae:	4b02      	ldr	r3, [pc, #8]	; (45b8 <SERCOM5_Handler+0xc>)
    45b0:	695b      	ldr	r3, [r3, #20]
    45b2:	2005      	movs	r0, #5
    45b4:	4798      	blx	r3
    45b6:	bd10      	pop	{r4, pc}
    45b8:	20000220 	.word	0x20000220

000045bc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    45bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    45be:	b08b      	sub	sp, #44	; 0x2c
    45c0:	0005      	movs	r5, r0
    45c2:	000c      	movs	r4, r1
    45c4:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    45c6:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    45c8:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    45ca:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    45cc:	079b      	lsls	r3, r3, #30
    45ce:	d501      	bpl.n	45d4 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    45d0:	b00b      	add	sp, #44	; 0x2c
    45d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    45d4:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    45d6:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    45d8:	07db      	lsls	r3, r3, #31
    45da:	d4f9      	bmi.n	45d0 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    45dc:	0008      	movs	r0, r1
    45de:	4b60      	ldr	r3, [pc, #384]	; (4760 <spi_init+0x1a4>)
    45e0:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    45e2:	4a60      	ldr	r2, [pc, #384]	; (4764 <spi_init+0x1a8>)
    45e4:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    45e6:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    45e8:	2301      	movs	r3, #1
    45ea:	40bb      	lsls	r3, r7
    45ec:	430b      	orrs	r3, r1
    45ee:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    45f0:	a909      	add	r1, sp, #36	; 0x24
    45f2:	2724      	movs	r7, #36	; 0x24
    45f4:	5df3      	ldrb	r3, [r6, r7]
    45f6:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    45f8:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    45fa:	b2c3      	uxtb	r3, r0
    45fc:	9301      	str	r3, [sp, #4]
    45fe:	0018      	movs	r0, r3
    4600:	4b59      	ldr	r3, [pc, #356]	; (4768 <spi_init+0x1ac>)
    4602:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4604:	9801      	ldr	r0, [sp, #4]
    4606:	4b59      	ldr	r3, [pc, #356]	; (476c <spi_init+0x1b0>)
    4608:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    460a:	5df0      	ldrb	r0, [r6, r7]
    460c:	2100      	movs	r1, #0
    460e:	4b58      	ldr	r3, [pc, #352]	; (4770 <spi_init+0x1b4>)
    4610:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4612:	7833      	ldrb	r3, [r6, #0]
    4614:	2b01      	cmp	r3, #1
    4616:	d038      	beq.n	468a <spi_init+0xce>
    4618:	002b      	movs	r3, r5
    461a:	330c      	adds	r3, #12
    461c:	0029      	movs	r1, r5
    461e:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    4620:	2200      	movs	r2, #0
    4622:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4624:	428b      	cmp	r3, r1
    4626:	d1fc      	bne.n	4622 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    4628:	2300      	movs	r3, #0
    462a:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    462c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    462e:	2400      	movs	r4, #0
    4630:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4632:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    4634:	3336      	adds	r3, #54	; 0x36
    4636:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    4638:	3301      	adds	r3, #1
    463a:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    463c:	3301      	adds	r3, #1
    463e:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    4640:	3b35      	subs	r3, #53	; 0x35
    4642:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    4644:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4646:	6828      	ldr	r0, [r5, #0]
    4648:	4b45      	ldr	r3, [pc, #276]	; (4760 <spi_init+0x1a4>)
    464a:	4798      	blx	r3
    464c:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    464e:	4949      	ldr	r1, [pc, #292]	; (4774 <spi_init+0x1b8>)
    4650:	4b49      	ldr	r3, [pc, #292]	; (4778 <spi_init+0x1bc>)
    4652:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4654:	00bf      	lsls	r7, r7, #2
    4656:	4b49      	ldr	r3, [pc, #292]	; (477c <spi_init+0x1c0>)
    4658:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    465a:	682f      	ldr	r7, [r5, #0]
    465c:	ab04      	add	r3, sp, #16
    465e:	2280      	movs	r2, #128	; 0x80
    4660:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4662:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4664:	3a7f      	subs	r2, #127	; 0x7f
    4666:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4668:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    466a:	7833      	ldrb	r3, [r6, #0]
    466c:	2b00      	cmp	r3, #0
    466e:	d102      	bne.n	4676 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4670:	2200      	movs	r2, #0
    4672:	ab04      	add	r3, sp, #16
    4674:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4676:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4678:	9305      	str	r3, [sp, #20]
    467a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    467c:	9306      	str	r3, [sp, #24]
    467e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4680:	9307      	str	r3, [sp, #28]
    4682:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4684:	9308      	str	r3, [sp, #32]
    4686:	2400      	movs	r4, #0
    4688:	e00b      	b.n	46a2 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    468a:	6823      	ldr	r3, [r4, #0]
    468c:	220c      	movs	r2, #12
    468e:	4313      	orrs	r3, r2
    4690:	6023      	str	r3, [r4, #0]
    4692:	e7c1      	b.n	4618 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4694:	0038      	movs	r0, r7
    4696:	4b3a      	ldr	r3, [pc, #232]	; (4780 <spi_init+0x1c4>)
    4698:	4798      	blx	r3
    469a:	e00a      	b.n	46b2 <spi_init+0xf6>
    469c:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    469e:	2c04      	cmp	r4, #4
    46a0:	d010      	beq.n	46c4 <spi_init+0x108>
    46a2:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    46a4:	00a3      	lsls	r3, r4, #2
    46a6:	aa02      	add	r2, sp, #8
    46a8:	200c      	movs	r0, #12
    46aa:	1812      	adds	r2, r2, r0
    46ac:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    46ae:	2800      	cmp	r0, #0
    46b0:	d0f0      	beq.n	4694 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    46b2:	1c43      	adds	r3, r0, #1
    46b4:	d0f2      	beq.n	469c <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    46b6:	a904      	add	r1, sp, #16
    46b8:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    46ba:	0c00      	lsrs	r0, r0, #16
    46bc:	b2c0      	uxtb	r0, r0
    46be:	4b31      	ldr	r3, [pc, #196]	; (4784 <spi_init+0x1c8>)
    46c0:	4798      	blx	r3
    46c2:	e7eb      	b.n	469c <spi_init+0xe0>
	module->mode             = config->mode;
    46c4:	7833      	ldrb	r3, [r6, #0]
    46c6:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    46c8:	7c33      	ldrb	r3, [r6, #16]
    46ca:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    46cc:	7cb3      	ldrb	r3, [r6, #18]
    46ce:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    46d0:	7d33      	ldrb	r3, [r6, #20]
    46d2:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    46d4:	2200      	movs	r2, #0
    46d6:	ab02      	add	r3, sp, #8
    46d8:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    46da:	7833      	ldrb	r3, [r6, #0]
    46dc:	2b01      	cmp	r3, #1
    46de:	d028      	beq.n	4732 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    46e0:	6873      	ldr	r3, [r6, #4]
    46e2:	68b2      	ldr	r2, [r6, #8]
    46e4:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    46e6:	68f2      	ldr	r2, [r6, #12]
    46e8:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    46ea:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    46ec:	7c72      	ldrb	r2, [r6, #17]
    46ee:	2a00      	cmp	r2, #0
    46f0:	d103      	bne.n	46fa <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    46f2:	4a25      	ldr	r2, [pc, #148]	; (4788 <spi_init+0x1cc>)
    46f4:	7892      	ldrb	r2, [r2, #2]
    46f6:	0792      	lsls	r2, r2, #30
    46f8:	d501      	bpl.n	46fe <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    46fa:	2280      	movs	r2, #128	; 0x80
    46fc:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    46fe:	7cb2      	ldrb	r2, [r6, #18]
    4700:	2a00      	cmp	r2, #0
    4702:	d002      	beq.n	470a <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4704:	2280      	movs	r2, #128	; 0x80
    4706:	0292      	lsls	r2, r2, #10
    4708:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    470a:	7cf2      	ldrb	r2, [r6, #19]
    470c:	2a00      	cmp	r2, #0
    470e:	d002      	beq.n	4716 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4710:	2280      	movs	r2, #128	; 0x80
    4712:	0092      	lsls	r2, r2, #2
    4714:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    4716:	7d32      	ldrb	r2, [r6, #20]
    4718:	2a00      	cmp	r2, #0
    471a:	d002      	beq.n	4722 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    471c:	2280      	movs	r2, #128	; 0x80
    471e:	0192      	lsls	r2, r2, #6
    4720:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    4722:	683a      	ldr	r2, [r7, #0]
    4724:	4313      	orrs	r3, r2
    4726:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    4728:	687b      	ldr	r3, [r7, #4]
    472a:	430b      	orrs	r3, r1
    472c:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    472e:	2000      	movs	r0, #0
    4730:	e74e      	b.n	45d0 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4732:	6828      	ldr	r0, [r5, #0]
    4734:	4b0a      	ldr	r3, [pc, #40]	; (4760 <spi_init+0x1a4>)
    4736:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4738:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    473a:	b2c0      	uxtb	r0, r0
    473c:	4b13      	ldr	r3, [pc, #76]	; (478c <spi_init+0x1d0>)
    473e:	4798      	blx	r3
    4740:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    4742:	ab02      	add	r3, sp, #8
    4744:	1d9a      	adds	r2, r3, #6
    4746:	69b0      	ldr	r0, [r6, #24]
    4748:	4b11      	ldr	r3, [pc, #68]	; (4790 <spi_init+0x1d4>)
    474a:	4798      	blx	r3
    474c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    474e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4750:	2b00      	cmp	r3, #0
    4752:	d000      	beq.n	4756 <spi_init+0x19a>
    4754:	e73c      	b.n	45d0 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    4756:	ab02      	add	r3, sp, #8
    4758:	3306      	adds	r3, #6
    475a:	781b      	ldrb	r3, [r3, #0]
    475c:	733b      	strb	r3, [r7, #12]
    475e:	e7bf      	b.n	46e0 <spi_init+0x124>
    4760:	000044b5 	.word	0x000044b5
    4764:	40000400 	.word	0x40000400
    4768:	000057b1 	.word	0x000057b1
    476c:	00005725 	.word	0x00005725
    4770:	000042f1 	.word	0x000042f1
    4774:	00004a29 	.word	0x00004a29
    4778:	000044f1 	.word	0x000044f1
    477c:	20000430 	.word	0x20000430
    4780:	0000433d 	.word	0x0000433d
    4784:	000058a9 	.word	0x000058a9
    4788:	41002000 	.word	0x41002000
    478c:	000057cd 	.word	0x000057cd
    4790:	00004233 	.word	0x00004233

00004794 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    4794:	b5f0      	push	{r4, r5, r6, r7, lr}
    4796:	46d6      	mov	lr, sl
    4798:	4647      	mov	r7, r8
    479a:	b580      	push	{r7, lr}
    479c:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    479e:	2438      	movs	r4, #56	; 0x38
    47a0:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    47a2:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    47a4:	2d05      	cmp	r5, #5
    47a6:	d002      	beq.n	47ae <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    47a8:	3412      	adds	r4, #18
	if (length == 0) {
    47aa:	2a00      	cmp	r2, #0
    47ac:	d105      	bne.n	47ba <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    47ae:	0020      	movs	r0, r4
    47b0:	b003      	add	sp, #12
    47b2:	bc0c      	pop	{r2, r3}
    47b4:	4690      	mov	r8, r2
    47b6:	469a      	mov	sl, r3
    47b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    47ba:	79c4      	ldrb	r4, [r0, #7]
    47bc:	2c00      	cmp	r4, #0
    47be:	d144      	bne.n	484a <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    47c0:	341c      	adds	r4, #28
    47c2:	e7f4      	b.n	47ae <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    47c4:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    47c6:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    47c8:	423c      	tst	r4, r7
    47ca:	d0fc      	beq.n	47c6 <spi_read_buffer_wait+0x32>
    47cc:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    47ce:	423c      	tst	r4, r7
    47d0:	d01a      	beq.n	4808 <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    47d2:	4644      	mov	r4, r8
    47d4:	62ac      	str	r4, [r5, #40]	; 0x28
    47d6:	e017      	b.n	4808 <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    47d8:	7984      	ldrb	r4, [r0, #6]
    47da:	2c01      	cmp	r4, #1
    47dc:	d026      	beq.n	482c <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    47de:	6aad      	ldr	r5, [r5, #40]	; 0x28
    47e0:	b2ec      	uxtb	r4, r5
    47e2:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    47e4:	9c01      	ldr	r4, [sp, #4]
    47e6:	2c00      	cmp	r4, #0
    47e8:	d13a      	bne.n	4860 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    47ea:	1c75      	adds	r5, r6, #1
    47ec:	b2ad      	uxth	r5, r5
    47ee:	4664      	mov	r4, ip
    47f0:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    47f2:	7984      	ldrb	r4, [r0, #6]
    47f4:	2c01      	cmp	r4, #1
    47f6:	d01e      	beq.n	4836 <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    47f8:	002e      	movs	r6, r5
	while (length--) {
    47fa:	3a01      	subs	r2, #1
    47fc:	b292      	uxth	r2, r2
    47fe:	4552      	cmp	r2, sl
    4800:	d01f      	beq.n	4842 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    4802:	7944      	ldrb	r4, [r0, #5]
    4804:	2c01      	cmp	r4, #1
    4806:	d0dd      	beq.n	47c4 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4808:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    480a:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    480c:	421c      	tst	r4, r3
    480e:	d0fc      	beq.n	480a <spi_read_buffer_wait+0x76>
    4810:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    4812:	421c      	tst	r4, r3
    4814:	d017      	beq.n	4846 <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4816:	8b6c      	ldrh	r4, [r5, #26]
    4818:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    481a:	2400      	movs	r4, #0
    481c:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    481e:	4664      	mov	r4, ip
    4820:	421c      	tst	r4, r3
    4822:	d0d9      	beq.n	47d8 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4824:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    4826:	241e      	movs	r4, #30
    4828:	9401      	str	r4, [sp, #4]
    482a:	e7d5      	b.n	47d8 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    482c:	6aac      	ldr	r4, [r5, #40]	; 0x28
    482e:	05e4      	lsls	r4, r4, #23
    4830:	0de4      	lsrs	r4, r4, #23
    4832:	46a4      	mov	ip, r4
    4834:	e7d6      	b.n	47e4 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    4836:	3602      	adds	r6, #2
    4838:	b2b6      	uxth	r6, r6
    483a:	4664      	mov	r4, ip
    483c:	0a24      	lsrs	r4, r4, #8
    483e:	554c      	strb	r4, [r1, r5]
    4840:	e7db      	b.n	47fa <spi_read_buffer_wait+0x66>
    4842:	9c01      	ldr	r4, [sp, #4]
    4844:	e7b3      	b.n	47ae <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    4846:	2410      	movs	r4, #16
    4848:	e7b1      	b.n	47ae <spi_read_buffer_wait+0x1a>
	while (length--) {
    484a:	3a01      	subs	r2, #1
    484c:	b292      	uxth	r2, r2
    484e:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    4850:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4852:	05db      	lsls	r3, r3, #23
    4854:	0ddb      	lsrs	r3, r3, #23
    4856:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    4858:	2304      	movs	r3, #4
	while (length--) {
    485a:	4c02      	ldr	r4, [pc, #8]	; (4864 <spi_read_buffer_wait+0xd0>)
    485c:	46a2      	mov	sl, r4
    485e:	e7d0      	b.n	4802 <spi_read_buffer_wait+0x6e>
    4860:	9c01      	ldr	r4, [sp, #4]
    4862:	e7a4      	b.n	47ae <spi_read_buffer_wait+0x1a>
    4864:	0000ffff 	.word	0x0000ffff

00004868 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4868:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    486a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    486c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    486e:	2c01      	cmp	r4, #1
    4870:	d001      	beq.n	4876 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    4872:	0018      	movs	r0, r3
    4874:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    4876:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    4878:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    487a:	2c00      	cmp	r4, #0
    487c:	d1f9      	bne.n	4872 <spi_select_slave+0xa>
		if (select) {
    487e:	2a00      	cmp	r2, #0
    4880:	d058      	beq.n	4934 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    4882:	784b      	ldrb	r3, [r1, #1]
    4884:	2b00      	cmp	r3, #0
    4886:	d044      	beq.n	4912 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4888:	6803      	ldr	r3, [r0, #0]
    488a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    488c:	07db      	lsls	r3, r3, #31
    488e:	d410      	bmi.n	48b2 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    4890:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4892:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4894:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4896:	2900      	cmp	r1, #0
    4898:	d104      	bne.n	48a4 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    489a:	0953      	lsrs	r3, r2, #5
    489c:	01db      	lsls	r3, r3, #7
    489e:	492e      	ldr	r1, [pc, #184]	; (4958 <spi_select_slave+0xf0>)
    48a0:	468c      	mov	ip, r1
    48a2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    48a4:	211f      	movs	r1, #31
    48a6:	4011      	ands	r1, r2
    48a8:	2201      	movs	r2, #1
    48aa:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    48ac:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    48ae:	2305      	movs	r3, #5
    48b0:	e7df      	b.n	4872 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    48b2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    48b4:	09d4      	lsrs	r4, r2, #7
		return NULL;
    48b6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    48b8:	2c00      	cmp	r4, #0
    48ba:	d104      	bne.n	48c6 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    48bc:	0953      	lsrs	r3, r2, #5
    48be:	01db      	lsls	r3, r3, #7
    48c0:	4c25      	ldr	r4, [pc, #148]	; (4958 <spi_select_slave+0xf0>)
    48c2:	46a4      	mov	ip, r4
    48c4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    48c6:	241f      	movs	r4, #31
    48c8:	4014      	ands	r4, r2
    48ca:	2201      	movs	r2, #1
    48cc:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    48ce:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    48d0:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    48d2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    48d4:	07d2      	lsls	r2, r2, #31
    48d6:	d501      	bpl.n	48dc <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    48d8:	788a      	ldrb	r2, [r1, #2]
    48da:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    48dc:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    48de:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    48e0:	2a00      	cmp	r2, #0
    48e2:	d1c6      	bne.n	4872 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    48e4:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    48e6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    48e8:	7e13      	ldrb	r3, [r2, #24]
    48ea:	420b      	tst	r3, r1
    48ec:	d0fc      	beq.n	48e8 <spi_select_slave+0x80>
    48ee:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    48f0:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    48f2:	0749      	lsls	r1, r1, #29
    48f4:	d5bd      	bpl.n	4872 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    48f6:	8b53      	ldrh	r3, [r2, #26]
    48f8:	075b      	lsls	r3, r3, #29
    48fa:	d501      	bpl.n	4900 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    48fc:	2304      	movs	r3, #4
    48fe:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4900:	7983      	ldrb	r3, [r0, #6]
    4902:	2b01      	cmp	r3, #1
    4904:	d002      	beq.n	490c <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4906:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4908:	2300      	movs	r3, #0
    490a:	e7b2      	b.n	4872 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    490c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    490e:	2300      	movs	r3, #0
    4910:	e7af      	b.n	4872 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4912:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4914:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4916:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4918:	2900      	cmp	r1, #0
    491a:	d104      	bne.n	4926 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    491c:	0953      	lsrs	r3, r2, #5
    491e:	01db      	lsls	r3, r3, #7
    4920:	490d      	ldr	r1, [pc, #52]	; (4958 <spi_select_slave+0xf0>)
    4922:	468c      	mov	ip, r1
    4924:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4926:	211f      	movs	r1, #31
    4928:	4011      	ands	r1, r2
    492a:	2201      	movs	r2, #1
    492c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    492e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    4930:	2300      	movs	r3, #0
    4932:	e79e      	b.n	4872 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    4934:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4936:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4938:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    493a:	2900      	cmp	r1, #0
    493c:	d104      	bne.n	4948 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    493e:	0953      	lsrs	r3, r2, #5
    4940:	01db      	lsls	r3, r3, #7
    4942:	4905      	ldr	r1, [pc, #20]	; (4958 <spi_select_slave+0xf0>)
    4944:	468c      	mov	ip, r1
    4946:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4948:	211f      	movs	r1, #31
    494a:	4011      	ands	r1, r2
    494c:	2201      	movs	r2, #1
    494e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4950:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    4952:	2300      	movs	r3, #0
    4954:	e78d      	b.n	4872 <spi_select_slave+0xa>
    4956:	46c0      	nop			; (mov r8, r8)
    4958:	41004400 	.word	0x41004400

0000495c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    495c:	b5f0      	push	{r4, r5, r6, r7, lr}
    495e:	46de      	mov	lr, fp
    4960:	4657      	mov	r7, sl
    4962:	464e      	mov	r6, r9
    4964:	4645      	mov	r5, r8
    4966:	b5e0      	push	{r5, r6, r7, lr}
    4968:	b083      	sub	sp, #12
    496a:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    496c:	2338      	movs	r3, #56	; 0x38
    496e:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4970:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    4972:	2c05      	cmp	r4, #5
    4974:	d002      	beq.n	497c <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    4976:	3312      	adds	r3, #18
	if (length == 0) {
    4978:	2a00      	cmp	r2, #0
    497a:	d14b      	bne.n	4a14 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    497c:	0018      	movs	r0, r3
    497e:	b003      	add	sp, #12
    4980:	bc3c      	pop	{r2, r3, r4, r5}
    4982:	4690      	mov	r8, r2
    4984:	4699      	mov	r9, r3
    4986:	46a2      	mov	sl, r4
    4988:	46ab      	mov	fp, r5
    498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    498c:	3702      	adds	r7, #2
    498e:	b2bf      	uxth	r7, r7
    4990:	4641      	mov	r1, r8
    4992:	4653      	mov	r3, sl
    4994:	5c59      	ldrb	r1, [r3, r1]
    4996:	0209      	lsls	r1, r1, #8
    4998:	465b      	mov	r3, fp
    499a:	430b      	orrs	r3, r1
    499c:	e018      	b.n	49d0 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    499e:	7983      	ldrb	r3, [r0, #6]
    49a0:	2b01      	cmp	r3, #1
    49a2:	d02a      	beq.n	49fa <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    49a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    49a6:	3e01      	subs	r6, #1
    49a8:	b2b6      	uxth	r6, r6
    49aa:	4566      	cmp	r6, ip
    49ac:	d027      	beq.n	49fe <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    49ae:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    49b0:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    49b2:	4223      	tst	r3, r4
    49b4:	d0fc      	beq.n	49b0 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    49b6:	1c7b      	adds	r3, r7, #1
    49b8:	b29b      	uxth	r3, r3
    49ba:	4698      	mov	r8, r3
    49bc:	4653      	mov	r3, sl
    49be:	5ddb      	ldrb	r3, [r3, r7]
    49c0:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    49c2:	7981      	ldrb	r1, [r0, #6]
    49c4:	2901      	cmp	r1, #1
    49c6:	d0e1      	beq.n	498c <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    49c8:	4669      	mov	r1, sp
    49ca:	80cb      	strh	r3, [r1, #6]
    49cc:	88cb      	ldrh	r3, [r1, #6]
    49ce:	4647      	mov	r7, r8
    49d0:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    49d2:	4221      	tst	r1, r4
    49d4:	d002      	beq.n	49dc <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    49d6:	05db      	lsls	r3, r3, #23
    49d8:	0ddb      	lsrs	r3, r3, #23
    49da:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    49dc:	79c3      	ldrb	r3, [r0, #7]
    49de:	2b00      	cmp	r3, #0
    49e0:	d0e1      	beq.n	49a6 <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    49e2:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    49e4:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    49e6:	422b      	tst	r3, r5
    49e8:	d0fc      	beq.n	49e4 <spi_write_buffer_wait+0x88>
    49ea:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    49ec:	422b      	tst	r3, r5
    49ee:	d0da      	beq.n	49a6 <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    49f0:	8b53      	ldrh	r3, [r2, #26]
    49f2:	422b      	tst	r3, r5
    49f4:	d0d3      	beq.n	499e <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    49f6:	8355      	strh	r5, [r2, #26]
    49f8:	e7d1      	b.n	499e <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    49fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    49fc:	e7d3      	b.n	49a6 <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    49fe:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    4a00:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    4a02:	2a01      	cmp	r2, #1
    4a04:	d1ba      	bne.n	497c <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4a06:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    4a08:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    4a0a:	7e0b      	ldrb	r3, [r1, #24]
    4a0c:	4213      	tst	r3, r2
    4a0e:	d0fc      	beq.n	4a0a <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    4a10:	2300      	movs	r3, #0
    4a12:	e7b3      	b.n	497c <spi_write_buffer_wait+0x20>
	while (length--) {
    4a14:	3a01      	subs	r2, #1
    4a16:	b296      	uxth	r6, r2
    4a18:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    4a1a:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    4a1c:	2504      	movs	r5, #4
	while (length--) {
    4a1e:	4b01      	ldr	r3, [pc, #4]	; (4a24 <spi_write_buffer_wait+0xc8>)
    4a20:	469c      	mov	ip, r3
    4a22:	e7c4      	b.n	49ae <spi_write_buffer_wait+0x52>
    4a24:	0000ffff 	.word	0x0000ffff

00004a28 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    4a2a:	0080      	lsls	r0, r0, #2
    4a2c:	4b70      	ldr	r3, [pc, #448]	; (4bf0 <_spi_interrupt_handler+0x1c8>)
    4a2e:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4a30:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4a32:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    4a34:	5ce7      	ldrb	r7, [r4, r3]
    4a36:	2236      	movs	r2, #54	; 0x36
    4a38:	5ca2      	ldrb	r2, [r4, r2]
    4a3a:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4a3c:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    4a3e:	7db5      	ldrb	r5, [r6, #22]
    4a40:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4a42:	07eb      	lsls	r3, r5, #31
    4a44:	d502      	bpl.n	4a4c <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4a46:	7963      	ldrb	r3, [r4, #5]
    4a48:	2b01      	cmp	r3, #1
    4a4a:	d01e      	beq.n	4a8a <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4a4c:	076b      	lsls	r3, r5, #29
    4a4e:	d511      	bpl.n	4a74 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4a50:	8b73      	ldrh	r3, [r6, #26]
    4a52:	075b      	lsls	r3, r3, #29
    4a54:	d55a      	bpl.n	4b0c <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4a56:	7a63      	ldrb	r3, [r4, #9]
    4a58:	2b01      	cmp	r3, #1
    4a5a:	d008      	beq.n	4a6e <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4a5c:	221e      	movs	r2, #30
    4a5e:	2338      	movs	r3, #56	; 0x38
    4a60:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4a62:	3b35      	subs	r3, #53	; 0x35
    4a64:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4a66:	3302      	adds	r3, #2
    4a68:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4a6a:	073b      	lsls	r3, r7, #28
    4a6c:	d44a      	bmi.n	4b04 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4a6e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4a70:	2304      	movs	r3, #4
    4a72:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4a74:	07ab      	lsls	r3, r5, #30
    4a76:	d503      	bpl.n	4a80 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4a78:	7963      	ldrb	r3, [r4, #5]
    4a7a:	2b01      	cmp	r3, #1
    4a7c:	d100      	bne.n	4a80 <_spi_interrupt_handler+0x58>
    4a7e:	e097      	b.n	4bb0 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4a80:	b26d      	sxtb	r5, r5
    4a82:	2d00      	cmp	r5, #0
    4a84:	da00      	bge.n	4a88 <_spi_interrupt_handler+0x60>
    4a86:	e0a9      	b.n	4bdc <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    4a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    4a8a:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d022      	beq.n	4ad6 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    4a90:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    4a92:	2b00      	cmp	r3, #0
    4a94:	d0da      	beq.n	4a4c <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4a96:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4a98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4a9a:	7813      	ldrb	r3, [r2, #0]
    4a9c:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    4a9e:	1c50      	adds	r0, r2, #1
    4aa0:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4aa2:	79a0      	ldrb	r0, [r4, #6]
    4aa4:	2801      	cmp	r0, #1
    4aa6:	d027      	beq.n	4af8 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4aa8:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4aaa:	05db      	lsls	r3, r3, #23
    4aac:	0ddb      	lsrs	r3, r3, #23
    4aae:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    4ab0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4ab2:	3b01      	subs	r3, #1
    4ab4:	b29b      	uxth	r3, r3
    4ab6:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    4ab8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4aba:	b29b      	uxth	r3, r3
    4abc:	2b00      	cmp	r3, #0
    4abe:	d1c5      	bne.n	4a4c <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4ac0:	3301      	adds	r3, #1
    4ac2:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    4ac4:	7a63      	ldrb	r3, [r4, #9]
    4ac6:	2b01      	cmp	r3, #1
    4ac8:	d1c0      	bne.n	4a4c <_spi_interrupt_handler+0x24>
    4aca:	79e3      	ldrb	r3, [r4, #7]
    4acc:	2b00      	cmp	r3, #0
    4ace:	d1bd      	bne.n	4a4c <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4ad0:	3302      	adds	r3, #2
    4ad2:	75b3      	strb	r3, [r6, #22]
    4ad4:	e7ba      	b.n	4a4c <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    4ad6:	4b47      	ldr	r3, [pc, #284]	; (4bf4 <_spi_interrupt_handler+0x1cc>)
    4ad8:	881b      	ldrh	r3, [r3, #0]
    4ada:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4adc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4ade:	3b01      	subs	r3, #1
    4ae0:	b29b      	uxth	r3, r3
    4ae2:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    4ae4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4ae6:	b29b      	uxth	r3, r3
    4ae8:	2b00      	cmp	r3, #0
    4aea:	d101      	bne.n	4af0 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4aec:	3301      	adds	r3, #1
    4aee:	7533      	strb	r3, [r6, #20]
		if (0
    4af0:	7963      	ldrb	r3, [r4, #5]
    4af2:	2b01      	cmp	r3, #1
    4af4:	d0cc      	beq.n	4a90 <_spi_interrupt_handler+0x68>
    4af6:	e7a9      	b.n	4a4c <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4af8:	7850      	ldrb	r0, [r2, #1]
    4afa:	0200      	lsls	r0, r0, #8
    4afc:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    4afe:	3202      	adds	r2, #2
    4b00:	62e2      	str	r2, [r4, #44]	; 0x2c
    4b02:	e7d2      	b.n	4aaa <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4b04:	0020      	movs	r0, r4
    4b06:	69a3      	ldr	r3, [r4, #24]
    4b08:	4798      	blx	r3
    4b0a:	e7b0      	b.n	4a6e <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    4b0c:	7a63      	ldrb	r3, [r4, #9]
    4b0e:	2b01      	cmp	r3, #1
    4b10:	d028      	beq.n	4b64 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4b12:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4b16:	05db      	lsls	r3, r3, #23
    4b18:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    4b1a:	b2da      	uxtb	r2, r3
    4b1c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    4b1e:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    4b20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4b22:	1c51      	adds	r1, r2, #1
    4b24:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b26:	79a1      	ldrb	r1, [r4, #6]
    4b28:	2901      	cmp	r1, #1
    4b2a:	d034      	beq.n	4b96 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    4b2c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4b2e:	3b01      	subs	r3, #1
    4b30:	b29b      	uxth	r3, r3
    4b32:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    4b34:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    4b36:	b29b      	uxth	r3, r3
    4b38:	2b00      	cmp	r3, #0
    4b3a:	d000      	beq.n	4b3e <_spi_interrupt_handler+0x116>
    4b3c:	e79a      	b.n	4a74 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    4b3e:	2200      	movs	r2, #0
    4b40:	3338      	adds	r3, #56	; 0x38
    4b42:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4b44:	3b34      	subs	r3, #52	; 0x34
    4b46:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4b48:	7a63      	ldrb	r3, [r4, #9]
    4b4a:	2b02      	cmp	r3, #2
    4b4c:	d029      	beq.n	4ba2 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    4b4e:	7a63      	ldrb	r3, [r4, #9]
    4b50:	2b00      	cmp	r3, #0
    4b52:	d000      	beq.n	4b56 <_spi_interrupt_handler+0x12e>
    4b54:	e78e      	b.n	4a74 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4b56:	07bb      	lsls	r3, r7, #30
    4b58:	d400      	bmi.n	4b5c <_spi_interrupt_handler+0x134>
    4b5a:	e78b      	b.n	4a74 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4b5c:	0020      	movs	r0, r4
    4b5e:	6923      	ldr	r3, [r4, #16]
    4b60:	4798      	blx	r3
    4b62:	e787      	b.n	4a74 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4b64:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    4b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4b68:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4b6a:	3b01      	subs	r3, #1
    4b6c:	b29b      	uxth	r3, r3
    4b6e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    4b70:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4b72:	b29b      	uxth	r3, r3
    4b74:	2b00      	cmp	r3, #0
    4b76:	d000      	beq.n	4b7a <_spi_interrupt_handler+0x152>
    4b78:	e77c      	b.n	4a74 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4b7a:	3304      	adds	r3, #4
    4b7c:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    4b7e:	2200      	movs	r2, #0
    4b80:	3334      	adds	r3, #52	; 0x34
    4b82:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    4b84:	3b35      	subs	r3, #53	; 0x35
    4b86:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    4b88:	07fb      	lsls	r3, r7, #31
    4b8a:	d400      	bmi.n	4b8e <_spi_interrupt_handler+0x166>
    4b8c:	e772      	b.n	4a74 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4b8e:	0020      	movs	r0, r4
    4b90:	68e3      	ldr	r3, [r4, #12]
    4b92:	4798      	blx	r3
    4b94:	e76e      	b.n	4a74 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4b96:	0a1b      	lsrs	r3, r3, #8
    4b98:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    4b9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4b9c:	3301      	adds	r3, #1
    4b9e:	62a3      	str	r3, [r4, #40]	; 0x28
    4ba0:	e7c4      	b.n	4b2c <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4ba2:	077b      	lsls	r3, r7, #29
    4ba4:	d400      	bmi.n	4ba8 <_spi_interrupt_handler+0x180>
    4ba6:	e765      	b.n	4a74 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4ba8:	0020      	movs	r0, r4
    4baa:	6963      	ldr	r3, [r4, #20]
    4bac:	4798      	blx	r3
    4bae:	e761      	b.n	4a74 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4bb0:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4bb2:	2b01      	cmp	r3, #1
    4bb4:	d000      	beq.n	4bb8 <_spi_interrupt_handler+0x190>
    4bb6:	e763      	b.n	4a80 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4bb8:	79e3      	ldrb	r3, [r4, #7]
    4bba:	2b00      	cmp	r3, #0
    4bbc:	d000      	beq.n	4bc0 <_spi_interrupt_handler+0x198>
    4bbe:	e75f      	b.n	4a80 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4bc0:	3302      	adds	r3, #2
    4bc2:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    4bc4:	3301      	adds	r3, #1
    4bc6:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    4bc8:	2200      	movs	r2, #0
    4bca:	3335      	adds	r3, #53	; 0x35
    4bcc:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4bce:	07fb      	lsls	r3, r7, #31
    4bd0:	d400      	bmi.n	4bd4 <_spi_interrupt_handler+0x1ac>
    4bd2:	e755      	b.n	4a80 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4bd4:	0020      	movs	r0, r4
    4bd6:	68e3      	ldr	r3, [r4, #12]
    4bd8:	4798      	blx	r3
    4bda:	e751      	b.n	4a80 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4bdc:	2380      	movs	r3, #128	; 0x80
    4bde:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4be0:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4be2:	067b      	lsls	r3, r7, #25
    4be4:	d400      	bmi.n	4be8 <_spi_interrupt_handler+0x1c0>
    4be6:	e74f      	b.n	4a88 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4bea:	0020      	movs	r0, r4
    4bec:	4798      	blx	r3
}
    4bee:	e74b      	b.n	4a88 <_spi_interrupt_handler+0x60>
    4bf0:	20000430 	.word	0x20000430
    4bf4:	20000448 	.word	0x20000448

00004bf8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bfa:	46de      	mov	lr, fp
    4bfc:	4657      	mov	r7, sl
    4bfe:	464e      	mov	r6, r9
    4c00:	4645      	mov	r5, r8
    4c02:	b5e0      	push	{r5, r6, r7, lr}
    4c04:	b091      	sub	sp, #68	; 0x44
    4c06:	0005      	movs	r5, r0
    4c08:	000c      	movs	r4, r1
    4c0a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4c0c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4c0e:	0008      	movs	r0, r1
    4c10:	4bbc      	ldr	r3, [pc, #752]	; (4f04 <usart_init+0x30c>)
    4c12:	4798      	blx	r3
    4c14:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4c16:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4c18:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4c1a:	07db      	lsls	r3, r3, #31
    4c1c:	d506      	bpl.n	4c2c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    4c1e:	b011      	add	sp, #68	; 0x44
    4c20:	bc3c      	pop	{r2, r3, r4, r5}
    4c22:	4690      	mov	r8, r2
    4c24:	4699      	mov	r9, r3
    4c26:	46a2      	mov	sl, r4
    4c28:	46ab      	mov	fp, r5
    4c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4c2c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    4c2e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4c30:	079b      	lsls	r3, r3, #30
    4c32:	d4f4      	bmi.n	4c1e <usart_init+0x26>
    4c34:	49b4      	ldr	r1, [pc, #720]	; (4f08 <usart_init+0x310>)
    4c36:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4c38:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4c3a:	2301      	movs	r3, #1
    4c3c:	40bb      	lsls	r3, r7
    4c3e:	4303      	orrs	r3, r0
    4c40:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4c42:	a90f      	add	r1, sp, #60	; 0x3c
    4c44:	272d      	movs	r7, #45	; 0x2d
    4c46:	5df3      	ldrb	r3, [r6, r7]
    4c48:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4c4a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4c4c:	b2d3      	uxtb	r3, r2
    4c4e:	9302      	str	r3, [sp, #8]
    4c50:	0018      	movs	r0, r3
    4c52:	4bae      	ldr	r3, [pc, #696]	; (4f0c <usart_init+0x314>)
    4c54:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4c56:	9802      	ldr	r0, [sp, #8]
    4c58:	4bad      	ldr	r3, [pc, #692]	; (4f10 <usart_init+0x318>)
    4c5a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4c5c:	5df0      	ldrb	r0, [r6, r7]
    4c5e:	2100      	movs	r1, #0
    4c60:	4bac      	ldr	r3, [pc, #688]	; (4f14 <usart_init+0x31c>)
    4c62:	4798      	blx	r3
	module->character_size = config->character_size;
    4c64:	7af3      	ldrb	r3, [r6, #11]
    4c66:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    4c68:	2324      	movs	r3, #36	; 0x24
    4c6a:	5cf3      	ldrb	r3, [r6, r3]
    4c6c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4c6e:	2325      	movs	r3, #37	; 0x25
    4c70:	5cf3      	ldrb	r3, [r6, r3]
    4c72:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    4c74:	7ef3      	ldrb	r3, [r6, #27]
    4c76:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4c78:	7f33      	ldrb	r3, [r6, #28]
    4c7a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4c7c:	682b      	ldr	r3, [r5, #0]
    4c7e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4c80:	0018      	movs	r0, r3
    4c82:	4ba0      	ldr	r3, [pc, #640]	; (4f04 <usart_init+0x30c>)
    4c84:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4c86:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    4c88:	2200      	movs	r2, #0
    4c8a:	230e      	movs	r3, #14
    4c8c:	a906      	add	r1, sp, #24
    4c8e:	468c      	mov	ip, r1
    4c90:	4463      	add	r3, ip
    4c92:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    4c94:	8a32      	ldrh	r2, [r6, #16]
    4c96:	9202      	str	r2, [sp, #8]
    4c98:	2380      	movs	r3, #128	; 0x80
    4c9a:	01db      	lsls	r3, r3, #7
    4c9c:	429a      	cmp	r2, r3
    4c9e:	d100      	bne.n	4ca2 <usart_init+0xaa>
    4ca0:	e09e      	b.n	4de0 <usart_init+0x1e8>
    4ca2:	d90f      	bls.n	4cc4 <usart_init+0xcc>
    4ca4:	23c0      	movs	r3, #192	; 0xc0
    4ca6:	01db      	lsls	r3, r3, #7
    4ca8:	9a02      	ldr	r2, [sp, #8]
    4caa:	429a      	cmp	r2, r3
    4cac:	d100      	bne.n	4cb0 <usart_init+0xb8>
    4cae:	e092      	b.n	4dd6 <usart_init+0x1de>
    4cb0:	2380      	movs	r3, #128	; 0x80
    4cb2:	021b      	lsls	r3, r3, #8
    4cb4:	429a      	cmp	r2, r3
    4cb6:	d000      	beq.n	4cba <usart_init+0xc2>
    4cb8:	e11f      	b.n	4efa <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4cba:	2303      	movs	r3, #3
    4cbc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4cbe:	2300      	movs	r3, #0
    4cc0:	9307      	str	r3, [sp, #28]
    4cc2:	e008      	b.n	4cd6 <usart_init+0xde>
	switch (config->sample_rate) {
    4cc4:	2380      	movs	r3, #128	; 0x80
    4cc6:	019b      	lsls	r3, r3, #6
    4cc8:	429a      	cmp	r2, r3
    4cca:	d000      	beq.n	4cce <usart_init+0xd6>
    4ccc:	e115      	b.n	4efa <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4cce:	2310      	movs	r3, #16
    4cd0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4cd2:	3b0f      	subs	r3, #15
    4cd4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    4cd6:	6833      	ldr	r3, [r6, #0]
    4cd8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4cda:	68f3      	ldr	r3, [r6, #12]
    4cdc:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4cde:	6973      	ldr	r3, [r6, #20]
    4ce0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4ce2:	7e33      	ldrb	r3, [r6, #24]
    4ce4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4ce6:	2326      	movs	r3, #38	; 0x26
    4ce8:	5cf3      	ldrb	r3, [r6, r3]
    4cea:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4cec:	6873      	ldr	r3, [r6, #4]
    4cee:	4699      	mov	r9, r3
	switch (transfer_mode)
    4cf0:	2b00      	cmp	r3, #0
    4cf2:	d100      	bne.n	4cf6 <usart_init+0xfe>
    4cf4:	e0a0      	b.n	4e38 <usart_init+0x240>
    4cf6:	2380      	movs	r3, #128	; 0x80
    4cf8:	055b      	lsls	r3, r3, #21
    4cfa:	4599      	cmp	r9, r3
    4cfc:	d100      	bne.n	4d00 <usart_init+0x108>
    4cfe:	e084      	b.n	4e0a <usart_init+0x212>
	if(config->encoding_format_enable) {
    4d00:	7e73      	ldrb	r3, [r6, #25]
    4d02:	2b00      	cmp	r3, #0
    4d04:	d002      	beq.n	4d0c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4d06:	7eb3      	ldrb	r3, [r6, #26]
    4d08:	4642      	mov	r2, r8
    4d0a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4d0c:	682a      	ldr	r2, [r5, #0]
    4d0e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4d10:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4d12:	2b00      	cmp	r3, #0
    4d14:	d1fc      	bne.n	4d10 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    4d16:	330e      	adds	r3, #14
    4d18:	aa06      	add	r2, sp, #24
    4d1a:	4694      	mov	ip, r2
    4d1c:	4463      	add	r3, ip
    4d1e:	881b      	ldrh	r3, [r3, #0]
    4d20:	4642      	mov	r2, r8
    4d22:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    4d24:	9b05      	ldr	r3, [sp, #20]
    4d26:	9a03      	ldr	r2, [sp, #12]
    4d28:	4313      	orrs	r3, r2
    4d2a:	9a04      	ldr	r2, [sp, #16]
    4d2c:	4313      	orrs	r3, r2
    4d2e:	464a      	mov	r2, r9
    4d30:	4313      	orrs	r3, r2
    4d32:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4d34:	465b      	mov	r3, fp
    4d36:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    4d38:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4d3a:	4653      	mov	r3, sl
    4d3c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    4d3e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    4d40:	2327      	movs	r3, #39	; 0x27
    4d42:	5cf3      	ldrb	r3, [r6, r3]
    4d44:	2b00      	cmp	r3, #0
    4d46:	d101      	bne.n	4d4c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4d48:	3304      	adds	r3, #4
    4d4a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4d4c:	7e73      	ldrb	r3, [r6, #25]
    4d4e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4d50:	7f32      	ldrb	r2, [r6, #28]
    4d52:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4d54:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4d56:	7f72      	ldrb	r2, [r6, #29]
    4d58:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4d5a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4d5c:	2224      	movs	r2, #36	; 0x24
    4d5e:	5cb2      	ldrb	r2, [r6, r2]
    4d60:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4d62:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4d64:	2225      	movs	r2, #37	; 0x25
    4d66:	5cb2      	ldrb	r2, [r6, r2]
    4d68:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4d6a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4d6c:	7ab1      	ldrb	r1, [r6, #10]
    4d6e:	7af2      	ldrb	r2, [r6, #11]
    4d70:	4311      	orrs	r1, r2
    4d72:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    4d74:	8933      	ldrh	r3, [r6, #8]
    4d76:	2bff      	cmp	r3, #255	; 0xff
    4d78:	d100      	bne.n	4d7c <usart_init+0x184>
    4d7a:	e081      	b.n	4e80 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4d7c:	2280      	movs	r2, #128	; 0x80
    4d7e:	0452      	lsls	r2, r2, #17
    4d80:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    4d82:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    4d84:	232c      	movs	r3, #44	; 0x2c
    4d86:	5cf3      	ldrb	r3, [r6, r3]
    4d88:	2b00      	cmp	r3, #0
    4d8a:	d103      	bne.n	4d94 <usart_init+0x19c>
    4d8c:	4b62      	ldr	r3, [pc, #392]	; (4f18 <usart_init+0x320>)
    4d8e:	789b      	ldrb	r3, [r3, #2]
    4d90:	079b      	lsls	r3, r3, #30
    4d92:	d501      	bpl.n	4d98 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4d94:	2380      	movs	r3, #128	; 0x80
    4d96:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d98:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4d9a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4d9c:	2b00      	cmp	r3, #0
    4d9e:	d1fc      	bne.n	4d9a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    4da0:	4643      	mov	r3, r8
    4da2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4da4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4da6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4da8:	2b00      	cmp	r3, #0
    4daa:	d1fc      	bne.n	4da6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    4dac:	4643      	mov	r3, r8
    4dae:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4db0:	ab0e      	add	r3, sp, #56	; 0x38
    4db2:	2280      	movs	r2, #128	; 0x80
    4db4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4db6:	2200      	movs	r2, #0
    4db8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    4dba:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4dbc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4dbe:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4dc0:	930a      	str	r3, [sp, #40]	; 0x28
    4dc2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4dc4:	930b      	str	r3, [sp, #44]	; 0x2c
    4dc6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    4dc8:	930c      	str	r3, [sp, #48]	; 0x30
    4dca:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    4dcc:	9302      	str	r3, [sp, #8]
    4dce:	930d      	str	r3, [sp, #52]	; 0x34
    4dd0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4dd2:	ae0a      	add	r6, sp, #40	; 0x28
    4dd4:	e063      	b.n	4e9e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4dd6:	2308      	movs	r3, #8
    4dd8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4dda:	3b07      	subs	r3, #7
    4ddc:	9307      	str	r3, [sp, #28]
    4dde:	e77a      	b.n	4cd6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    4de0:	6833      	ldr	r3, [r6, #0]
    4de2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4de4:	68f3      	ldr	r3, [r6, #12]
    4de6:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4de8:	6973      	ldr	r3, [r6, #20]
    4dea:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4dec:	7e33      	ldrb	r3, [r6, #24]
    4dee:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4df0:	2326      	movs	r3, #38	; 0x26
    4df2:	5cf3      	ldrb	r3, [r6, r3]
    4df4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4df6:	6873      	ldr	r3, [r6, #4]
    4df8:	4699      	mov	r9, r3
	switch (transfer_mode)
    4dfa:	2b00      	cmp	r3, #0
    4dfc:	d018      	beq.n	4e30 <usart_init+0x238>
    4dfe:	2380      	movs	r3, #128	; 0x80
    4e00:	055b      	lsls	r3, r3, #21
    4e02:	4599      	cmp	r9, r3
    4e04:	d001      	beq.n	4e0a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    4e06:	2000      	movs	r0, #0
    4e08:	e025      	b.n	4e56 <usart_init+0x25e>
			if (!config->use_external_clock) {
    4e0a:	2327      	movs	r3, #39	; 0x27
    4e0c:	5cf3      	ldrb	r3, [r6, r3]
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d000      	beq.n	4e14 <usart_init+0x21c>
    4e12:	e775      	b.n	4d00 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4e14:	6a33      	ldr	r3, [r6, #32]
    4e16:	001f      	movs	r7, r3
    4e18:	b2c0      	uxtb	r0, r0
    4e1a:	4b40      	ldr	r3, [pc, #256]	; (4f1c <usart_init+0x324>)
    4e1c:	4798      	blx	r3
    4e1e:	0001      	movs	r1, r0
    4e20:	220e      	movs	r2, #14
    4e22:	ab06      	add	r3, sp, #24
    4e24:	469c      	mov	ip, r3
    4e26:	4462      	add	r2, ip
    4e28:	0038      	movs	r0, r7
    4e2a:	4b3d      	ldr	r3, [pc, #244]	; (4f20 <usart_init+0x328>)
    4e2c:	4798      	blx	r3
    4e2e:	e012      	b.n	4e56 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4e30:	2308      	movs	r3, #8
    4e32:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4e34:	2300      	movs	r3, #0
    4e36:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    4e38:	2327      	movs	r3, #39	; 0x27
    4e3a:	5cf3      	ldrb	r3, [r6, r3]
    4e3c:	2b00      	cmp	r3, #0
    4e3e:	d00e      	beq.n	4e5e <usart_init+0x266>
				status_code =
    4e40:	9b06      	ldr	r3, [sp, #24]
    4e42:	9300      	str	r3, [sp, #0]
    4e44:	9b07      	ldr	r3, [sp, #28]
    4e46:	220e      	movs	r2, #14
    4e48:	a906      	add	r1, sp, #24
    4e4a:	468c      	mov	ip, r1
    4e4c:	4462      	add	r2, ip
    4e4e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    4e50:	6a30      	ldr	r0, [r6, #32]
    4e52:	4f34      	ldr	r7, [pc, #208]	; (4f24 <usart_init+0x32c>)
    4e54:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    4e56:	2800      	cmp	r0, #0
    4e58:	d000      	beq.n	4e5c <usart_init+0x264>
    4e5a:	e6e0      	b.n	4c1e <usart_init+0x26>
    4e5c:	e750      	b.n	4d00 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    4e5e:	6a33      	ldr	r3, [r6, #32]
    4e60:	001f      	movs	r7, r3
    4e62:	b2c0      	uxtb	r0, r0
    4e64:	4b2d      	ldr	r3, [pc, #180]	; (4f1c <usart_init+0x324>)
    4e66:	4798      	blx	r3
    4e68:	0001      	movs	r1, r0
				status_code =
    4e6a:	9b06      	ldr	r3, [sp, #24]
    4e6c:	9300      	str	r3, [sp, #0]
    4e6e:	9b07      	ldr	r3, [sp, #28]
    4e70:	220e      	movs	r2, #14
    4e72:	a806      	add	r0, sp, #24
    4e74:	4684      	mov	ip, r0
    4e76:	4462      	add	r2, ip
    4e78:	0038      	movs	r0, r7
    4e7a:	4f2a      	ldr	r7, [pc, #168]	; (4f24 <usart_init+0x32c>)
    4e7c:	47b8      	blx	r7
    4e7e:	e7ea      	b.n	4e56 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    4e80:	7ef3      	ldrb	r3, [r6, #27]
    4e82:	2b00      	cmp	r3, #0
    4e84:	d100      	bne.n	4e88 <usart_init+0x290>
    4e86:	e77d      	b.n	4d84 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4e88:	2380      	movs	r3, #128	; 0x80
    4e8a:	04db      	lsls	r3, r3, #19
    4e8c:	431f      	orrs	r7, r3
    4e8e:	e779      	b.n	4d84 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4e90:	0020      	movs	r0, r4
    4e92:	4b25      	ldr	r3, [pc, #148]	; (4f28 <usart_init+0x330>)
    4e94:	4798      	blx	r3
    4e96:	e007      	b.n	4ea8 <usart_init+0x2b0>
    4e98:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4e9a:	2f04      	cmp	r7, #4
    4e9c:	d00d      	beq.n	4eba <usart_init+0x2c2>
    4e9e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4ea0:	00bb      	lsls	r3, r7, #2
    4ea2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    4ea4:	2800      	cmp	r0, #0
    4ea6:	d0f3      	beq.n	4e90 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    4ea8:	1c43      	adds	r3, r0, #1
    4eaa:	d0f5      	beq.n	4e98 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4eac:	a90e      	add	r1, sp, #56	; 0x38
    4eae:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4eb0:	0c00      	lsrs	r0, r0, #16
    4eb2:	b2c0      	uxtb	r0, r0
    4eb4:	4b1d      	ldr	r3, [pc, #116]	; (4f2c <usart_init+0x334>)
    4eb6:	4798      	blx	r3
    4eb8:	e7ee      	b.n	4e98 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    4eba:	2300      	movs	r3, #0
    4ebc:	60eb      	str	r3, [r5, #12]
    4ebe:	612b      	str	r3, [r5, #16]
    4ec0:	616b      	str	r3, [r5, #20]
    4ec2:	61ab      	str	r3, [r5, #24]
    4ec4:	61eb      	str	r3, [r5, #28]
    4ec6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    4ec8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4eca:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4ecc:	2200      	movs	r2, #0
    4ece:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4ed0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4ed2:	3330      	adds	r3, #48	; 0x30
    4ed4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    4ed6:	3301      	adds	r3, #1
    4ed8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    4eda:	3301      	adds	r3, #1
    4edc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    4ede:	3301      	adds	r3, #1
    4ee0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4ee2:	6828      	ldr	r0, [r5, #0]
    4ee4:	4b07      	ldr	r3, [pc, #28]	; (4f04 <usart_init+0x30c>)
    4ee6:	4798      	blx	r3
    4ee8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4eea:	4911      	ldr	r1, [pc, #68]	; (4f30 <usart_init+0x338>)
    4eec:	4b11      	ldr	r3, [pc, #68]	; (4f34 <usart_init+0x33c>)
    4eee:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4ef0:	00a4      	lsls	r4, r4, #2
    4ef2:	4b11      	ldr	r3, [pc, #68]	; (4f38 <usart_init+0x340>)
    4ef4:	50e5      	str	r5, [r4, r3]
	return status_code;
    4ef6:	2000      	movs	r0, #0
    4ef8:	e691      	b.n	4c1e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4efa:	2310      	movs	r3, #16
    4efc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4efe:	2300      	movs	r3, #0
    4f00:	9307      	str	r3, [sp, #28]
    4f02:	e6e8      	b.n	4cd6 <usart_init+0xde>
    4f04:	000044b5 	.word	0x000044b5
    4f08:	40000400 	.word	0x40000400
    4f0c:	000057b1 	.word	0x000057b1
    4f10:	00005725 	.word	0x00005725
    4f14:	000042f1 	.word	0x000042f1
    4f18:	41002000 	.word	0x41002000
    4f1c:	000057cd 	.word	0x000057cd
    4f20:	00004233 	.word	0x00004233
    4f24:	0000425d 	.word	0x0000425d
    4f28:	0000433d 	.word	0x0000433d
    4f2c:	000058a9 	.word	0x000058a9
    4f30:	00004fd9 	.word	0x00004fd9
    4f34:	000044f1 	.word	0x000044f1
    4f38:	20000430 	.word	0x20000430

00004f3c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4f3c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    4f3e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    4f40:	2a00      	cmp	r2, #0
    4f42:	d101      	bne.n	4f48 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    4f44:	0018      	movs	r0, r3
    4f46:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    4f48:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    4f4a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4f4c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    4f4e:	2a00      	cmp	r2, #0
    4f50:	d1f8      	bne.n	4f44 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4f52:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    4f54:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    4f56:	2a00      	cmp	r2, #0
    4f58:	d1fc      	bne.n	4f54 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    4f5a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4f5c:	2102      	movs	r1, #2
    4f5e:	7e1a      	ldrb	r2, [r3, #24]
    4f60:	420a      	tst	r2, r1
    4f62:	d0fc      	beq.n	4f5e <usart_write_wait+0x22>
	return STATUS_OK;
    4f64:	2300      	movs	r3, #0
    4f66:	e7ed      	b.n	4f44 <usart_write_wait+0x8>

00004f68 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4f68:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4f6a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    4f6c:	2a00      	cmp	r2, #0
    4f6e:	d101      	bne.n	4f74 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    4f70:	0018      	movs	r0, r3
    4f72:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    4f74:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    4f76:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4f78:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    4f7a:	2a00      	cmp	r2, #0
    4f7c:	d1f8      	bne.n	4f70 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4f7e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4f80:	7e10      	ldrb	r0, [r2, #24]
    4f82:	0740      	lsls	r0, r0, #29
    4f84:	d5f4      	bpl.n	4f70 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    4f86:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4f88:	2b00      	cmp	r3, #0
    4f8a:	d1fc      	bne.n	4f86 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4f8c:	8b53      	ldrh	r3, [r2, #26]
    4f8e:	b2db      	uxtb	r3, r3
	if (error_code) {
    4f90:	0698      	lsls	r0, r3, #26
    4f92:	d01d      	beq.n	4fd0 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4f94:	0798      	lsls	r0, r3, #30
    4f96:	d503      	bpl.n	4fa0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4f98:	2302      	movs	r3, #2
    4f9a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    4f9c:	3318      	adds	r3, #24
    4f9e:	e7e7      	b.n	4f70 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4fa0:	0758      	lsls	r0, r3, #29
    4fa2:	d503      	bpl.n	4fac <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4fa4:	2304      	movs	r3, #4
    4fa6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    4fa8:	331a      	adds	r3, #26
    4faa:	e7e1      	b.n	4f70 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4fac:	07d8      	lsls	r0, r3, #31
    4fae:	d503      	bpl.n	4fb8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4fb0:	2301      	movs	r3, #1
    4fb2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    4fb4:	3312      	adds	r3, #18
    4fb6:	e7db      	b.n	4f70 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4fb8:	06d8      	lsls	r0, r3, #27
    4fba:	d503      	bpl.n	4fc4 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4fbc:	2310      	movs	r3, #16
    4fbe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    4fc0:	3332      	adds	r3, #50	; 0x32
    4fc2:	e7d5      	b.n	4f70 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4fc4:	069b      	lsls	r3, r3, #26
    4fc6:	d503      	bpl.n	4fd0 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4fc8:	2320      	movs	r3, #32
    4fca:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    4fcc:	3321      	adds	r3, #33	; 0x21
    4fce:	e7cf      	b.n	4f70 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    4fd0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4fd2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    4fd4:	2300      	movs	r3, #0
    4fd6:	e7cb      	b.n	4f70 <usart_read_wait+0x8>

00004fd8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4fda:	0080      	lsls	r0, r0, #2
    4fdc:	4b62      	ldr	r3, [pc, #392]	; (5168 <_usart_interrupt_handler+0x190>)
    4fde:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4fe0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4fe2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    4fe4:	2b00      	cmp	r3, #0
    4fe6:	d1fc      	bne.n	4fe2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4fe8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    4fea:	7da6      	ldrb	r6, [r4, #22]
    4fec:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    4fee:	2330      	movs	r3, #48	; 0x30
    4ff0:	5ceb      	ldrb	r3, [r5, r3]
    4ff2:	2231      	movs	r2, #49	; 0x31
    4ff4:	5caf      	ldrb	r7, [r5, r2]
    4ff6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4ff8:	07f3      	lsls	r3, r6, #31
    4ffa:	d522      	bpl.n	5042 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    4ffc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4ffe:	b29b      	uxth	r3, r3
    5000:	2b00      	cmp	r3, #0
    5002:	d01c      	beq.n	503e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5004:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5006:	7813      	ldrb	r3, [r2, #0]
    5008:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    500a:	1c51      	adds	r1, r2, #1
    500c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    500e:	7969      	ldrb	r1, [r5, #5]
    5010:	2901      	cmp	r1, #1
    5012:	d00e      	beq.n	5032 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5014:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5016:	05db      	lsls	r3, r3, #23
    5018:	0ddb      	lsrs	r3, r3, #23
    501a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    501c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    501e:	3b01      	subs	r3, #1
    5020:	b29b      	uxth	r3, r3
    5022:	85eb      	strh	r3, [r5, #46]	; 0x2e
    5024:	2b00      	cmp	r3, #0
    5026:	d10c      	bne.n	5042 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5028:	3301      	adds	r3, #1
    502a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    502c:	3301      	adds	r3, #1
    502e:	75a3      	strb	r3, [r4, #22]
    5030:	e007      	b.n	5042 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5032:	7851      	ldrb	r1, [r2, #1]
    5034:	0209      	lsls	r1, r1, #8
    5036:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    5038:	3202      	adds	r2, #2
    503a:	62aa      	str	r2, [r5, #40]	; 0x28
    503c:	e7eb      	b.n	5016 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    503e:	2301      	movs	r3, #1
    5040:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5042:	07b3      	lsls	r3, r6, #30
    5044:	d506      	bpl.n	5054 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5046:	2302      	movs	r3, #2
    5048:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    504a:	2200      	movs	r2, #0
    504c:	3331      	adds	r3, #49	; 0x31
    504e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5050:	07fb      	lsls	r3, r7, #31
    5052:	d41a      	bmi.n	508a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5054:	0773      	lsls	r3, r6, #29
    5056:	d565      	bpl.n	5124 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    5058:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    505a:	b29b      	uxth	r3, r3
    505c:	2b00      	cmp	r3, #0
    505e:	d05f      	beq.n	5120 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5060:	8b63      	ldrh	r3, [r4, #26]
    5062:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5064:	071a      	lsls	r2, r3, #28
    5066:	d414      	bmi.n	5092 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5068:	223f      	movs	r2, #63	; 0x3f
    506a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    506c:	2b00      	cmp	r3, #0
    506e:	d034      	beq.n	50da <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5070:	079a      	lsls	r2, r3, #30
    5072:	d511      	bpl.n	5098 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5074:	221a      	movs	r2, #26
    5076:	2332      	movs	r3, #50	; 0x32
    5078:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    507a:	3b30      	subs	r3, #48	; 0x30
    507c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    507e:	077b      	lsls	r3, r7, #29
    5080:	d550      	bpl.n	5124 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5082:	0028      	movs	r0, r5
    5084:	696b      	ldr	r3, [r5, #20]
    5086:	4798      	blx	r3
    5088:	e04c      	b.n	5124 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    508a:	0028      	movs	r0, r5
    508c:	68eb      	ldr	r3, [r5, #12]
    508e:	4798      	blx	r3
    5090:	e7e0      	b.n	5054 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5092:	2237      	movs	r2, #55	; 0x37
    5094:	4013      	ands	r3, r2
    5096:	e7e9      	b.n	506c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5098:	075a      	lsls	r2, r3, #29
    509a:	d505      	bpl.n	50a8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    509c:	221e      	movs	r2, #30
    509e:	2332      	movs	r3, #50	; 0x32
    50a0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    50a2:	3b2e      	subs	r3, #46	; 0x2e
    50a4:	8363      	strh	r3, [r4, #26]
    50a6:	e7ea      	b.n	507e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    50a8:	07da      	lsls	r2, r3, #31
    50aa:	d505      	bpl.n	50b8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    50ac:	2213      	movs	r2, #19
    50ae:	2332      	movs	r3, #50	; 0x32
    50b0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    50b2:	3b31      	subs	r3, #49	; 0x31
    50b4:	8363      	strh	r3, [r4, #26]
    50b6:	e7e2      	b.n	507e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    50b8:	06da      	lsls	r2, r3, #27
    50ba:	d505      	bpl.n	50c8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    50bc:	2242      	movs	r2, #66	; 0x42
    50be:	2332      	movs	r3, #50	; 0x32
    50c0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    50c2:	3b22      	subs	r3, #34	; 0x22
    50c4:	8363      	strh	r3, [r4, #26]
    50c6:	e7da      	b.n	507e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    50c8:	2220      	movs	r2, #32
    50ca:	421a      	tst	r2, r3
    50cc:	d0d7      	beq.n	507e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    50ce:	3221      	adds	r2, #33	; 0x21
    50d0:	2332      	movs	r3, #50	; 0x32
    50d2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    50d4:	3b12      	subs	r3, #18
    50d6:	8363      	strh	r3, [r4, #26]
    50d8:	e7d1      	b.n	507e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    50da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    50dc:	05db      	lsls	r3, r3, #23
    50de:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    50e0:	b2da      	uxtb	r2, r3
    50e2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    50e4:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    50e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    50e8:	1c51      	adds	r1, r2, #1
    50ea:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    50ec:	7969      	ldrb	r1, [r5, #5]
    50ee:	2901      	cmp	r1, #1
    50f0:	d010      	beq.n	5114 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    50f2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    50f4:	3b01      	subs	r3, #1
    50f6:	b29b      	uxth	r3, r3
    50f8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    50fa:	2b00      	cmp	r3, #0
    50fc:	d112      	bne.n	5124 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    50fe:	3304      	adds	r3, #4
    5100:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    5102:	2200      	movs	r2, #0
    5104:	332e      	adds	r3, #46	; 0x2e
    5106:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    5108:	07bb      	lsls	r3, r7, #30
    510a:	d50b      	bpl.n	5124 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    510c:	0028      	movs	r0, r5
    510e:	692b      	ldr	r3, [r5, #16]
    5110:	4798      	blx	r3
    5112:	e007      	b.n	5124 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5114:	0a1b      	lsrs	r3, r3, #8
    5116:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    5118:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    511a:	3301      	adds	r3, #1
    511c:	626b      	str	r3, [r5, #36]	; 0x24
    511e:	e7e8      	b.n	50f2 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5120:	2304      	movs	r3, #4
    5122:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5124:	06f3      	lsls	r3, r6, #27
    5126:	d504      	bpl.n	5132 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5128:	2310      	movs	r3, #16
    512a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    512c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    512e:	06fb      	lsls	r3, r7, #27
    5130:	d40e      	bmi.n	5150 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5132:	06b3      	lsls	r3, r6, #26
    5134:	d504      	bpl.n	5140 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5136:	2320      	movs	r3, #32
    5138:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    513a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    513c:	073b      	lsls	r3, r7, #28
    513e:	d40b      	bmi.n	5158 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5140:	0733      	lsls	r3, r6, #28
    5142:	d504      	bpl.n	514e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5144:	2308      	movs	r3, #8
    5146:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5148:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    514a:	06bb      	lsls	r3, r7, #26
    514c:	d408      	bmi.n	5160 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    514e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5150:	0028      	movs	r0, r5
    5152:	69eb      	ldr	r3, [r5, #28]
    5154:	4798      	blx	r3
    5156:	e7ec      	b.n	5132 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5158:	0028      	movs	r0, r5
    515a:	69ab      	ldr	r3, [r5, #24]
    515c:	4798      	blx	r3
    515e:	e7ef      	b.n	5140 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5160:	6a2b      	ldr	r3, [r5, #32]
    5162:	0028      	movs	r0, r5
    5164:	4798      	blx	r3
}
    5166:	e7f2      	b.n	514e <_usart_interrupt_handler+0x176>
    5168:	20000430 	.word	0x20000430

0000516c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    516c:	b510      	push	{r4, lr}
	switch (clock_source) {
    516e:	2808      	cmp	r0, #8
    5170:	d803      	bhi.n	517a <system_clock_source_get_hz+0xe>
    5172:	0080      	lsls	r0, r0, #2
    5174:	4b1b      	ldr	r3, [pc, #108]	; (51e4 <system_clock_source_get_hz+0x78>)
    5176:	581b      	ldr	r3, [r3, r0]
    5178:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    517a:	2000      	movs	r0, #0
    517c:	e030      	b.n	51e0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    517e:	4b1a      	ldr	r3, [pc, #104]	; (51e8 <system_clock_source_get_hz+0x7c>)
    5180:	6918      	ldr	r0, [r3, #16]
    5182:	e02d      	b.n	51e0 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5184:	4b19      	ldr	r3, [pc, #100]	; (51ec <system_clock_source_get_hz+0x80>)
    5186:	6a1b      	ldr	r3, [r3, #32]
    5188:	059b      	lsls	r3, r3, #22
    518a:	0f9b      	lsrs	r3, r3, #30
    518c:	4818      	ldr	r0, [pc, #96]	; (51f0 <system_clock_source_get_hz+0x84>)
    518e:	40d8      	lsrs	r0, r3
    5190:	e026      	b.n	51e0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    5192:	4b15      	ldr	r3, [pc, #84]	; (51e8 <system_clock_source_get_hz+0x7c>)
    5194:	6958      	ldr	r0, [r3, #20]
    5196:	e023      	b.n	51e0 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5198:	4b13      	ldr	r3, [pc, #76]	; (51e8 <system_clock_source_get_hz+0x7c>)
    519a:	681b      	ldr	r3, [r3, #0]
			return 0;
    519c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    519e:	079b      	lsls	r3, r3, #30
    51a0:	d51e      	bpl.n	51e0 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    51a2:	4912      	ldr	r1, [pc, #72]	; (51ec <system_clock_source_get_hz+0x80>)
    51a4:	2210      	movs	r2, #16
    51a6:	68cb      	ldr	r3, [r1, #12]
    51a8:	421a      	tst	r2, r3
    51aa:	d0fc      	beq.n	51a6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    51ac:	4b0e      	ldr	r3, [pc, #56]	; (51e8 <system_clock_source_get_hz+0x7c>)
    51ae:	681b      	ldr	r3, [r3, #0]
    51b0:	075b      	lsls	r3, r3, #29
    51b2:	d401      	bmi.n	51b8 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    51b4:	480f      	ldr	r0, [pc, #60]	; (51f4 <system_clock_source_get_hz+0x88>)
    51b6:	e013      	b.n	51e0 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    51b8:	2000      	movs	r0, #0
    51ba:	4b0f      	ldr	r3, [pc, #60]	; (51f8 <system_clock_source_get_hz+0x8c>)
    51bc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    51be:	4b0a      	ldr	r3, [pc, #40]	; (51e8 <system_clock_source_get_hz+0x7c>)
    51c0:	689b      	ldr	r3, [r3, #8]
    51c2:	041b      	lsls	r3, r3, #16
    51c4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    51c6:	4358      	muls	r0, r3
    51c8:	e00a      	b.n	51e0 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    51ca:	2350      	movs	r3, #80	; 0x50
    51cc:	4a07      	ldr	r2, [pc, #28]	; (51ec <system_clock_source_get_hz+0x80>)
    51ce:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    51d0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    51d2:	075b      	lsls	r3, r3, #29
    51d4:	d504      	bpl.n	51e0 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    51d6:	4b04      	ldr	r3, [pc, #16]	; (51e8 <system_clock_source_get_hz+0x7c>)
    51d8:	68d8      	ldr	r0, [r3, #12]
    51da:	e001      	b.n	51e0 <system_clock_source_get_hz+0x74>
		return 32768UL;
    51dc:	2080      	movs	r0, #128	; 0x80
    51de:	0200      	lsls	r0, r0, #8
	}
}
    51e0:	bd10      	pop	{r4, pc}
    51e2:	46c0      	nop			; (mov r8, r8)
    51e4:	0000a338 	.word	0x0000a338
    51e8:	20000238 	.word	0x20000238
    51ec:	40000800 	.word	0x40000800
    51f0:	007a1200 	.word	0x007a1200
    51f4:	02dc6c00 	.word	0x02dc6c00
    51f8:	000057cd 	.word	0x000057cd

000051fc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    51fc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    51fe:	490c      	ldr	r1, [pc, #48]	; (5230 <system_clock_source_osc8m_set_config+0x34>)
    5200:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5202:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5204:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    5206:	7840      	ldrb	r0, [r0, #1]
    5208:	2201      	movs	r2, #1
    520a:	4010      	ands	r0, r2
    520c:	0180      	lsls	r0, r0, #6
    520e:	2640      	movs	r6, #64	; 0x40
    5210:	43b3      	bics	r3, r6
    5212:	4303      	orrs	r3, r0
    5214:	402a      	ands	r2, r5
    5216:	01d2      	lsls	r2, r2, #7
    5218:	2080      	movs	r0, #128	; 0x80
    521a:	4383      	bics	r3, r0
    521c:	4313      	orrs	r3, r2
    521e:	2203      	movs	r2, #3
    5220:	4022      	ands	r2, r4
    5222:	0212      	lsls	r2, r2, #8
    5224:	4803      	ldr	r0, [pc, #12]	; (5234 <system_clock_source_osc8m_set_config+0x38>)
    5226:	4003      	ands	r3, r0
    5228:	4313      	orrs	r3, r2
    522a:	620b      	str	r3, [r1, #32]
}
    522c:	bd70      	pop	{r4, r5, r6, pc}
    522e:	46c0      	nop			; (mov r8, r8)
    5230:	40000800 	.word	0x40000800
    5234:	fffffcff 	.word	0xfffffcff

00005238 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5238:	b5f0      	push	{r4, r5, r6, r7, lr}
    523a:	46de      	mov	lr, fp
    523c:	4657      	mov	r7, sl
    523e:	464e      	mov	r6, r9
    5240:	4645      	mov	r5, r8
    5242:	b5e0      	push	{r5, r6, r7, lr}
    5244:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5246:	4b26      	ldr	r3, [pc, #152]	; (52e0 <system_clock_source_xosc32k_set_config+0xa8>)
    5248:	469b      	mov	fp, r3
    524a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    524c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    524e:	7800      	ldrb	r0, [r0, #0]
    5250:	4242      	negs	r2, r0
    5252:	4142      	adcs	r2, r0
    5254:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5256:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    5258:	78ca      	ldrb	r2, [r1, #3]
    525a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    525c:	790a      	ldrb	r2, [r1, #4]
    525e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    5260:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5262:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    5264:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5266:	688a      	ldr	r2, [r1, #8]
    5268:	491e      	ldr	r1, [pc, #120]	; (52e4 <system_clock_source_xosc32k_set_config+0xac>)
    526a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    526c:	2101      	movs	r1, #1
    526e:	464a      	mov	r2, r9
    5270:	0092      	lsls	r2, r2, #2
    5272:	4691      	mov	r9, r2
    5274:	2204      	movs	r2, #4
    5276:	4393      	bics	r3, r2
    5278:	464a      	mov	r2, r9
    527a:	4313      	orrs	r3, r2
    527c:	4642      	mov	r2, r8
    527e:	400a      	ands	r2, r1
    5280:	00d2      	lsls	r2, r2, #3
    5282:	4690      	mov	r8, r2
    5284:	2208      	movs	r2, #8
    5286:	4393      	bics	r3, r2
    5288:	4642      	mov	r2, r8
    528a:	4313      	orrs	r3, r2
    528c:	4662      	mov	r2, ip
    528e:	400a      	ands	r2, r1
    5290:	0112      	lsls	r2, r2, #4
    5292:	4694      	mov	ip, r2
    5294:	2210      	movs	r2, #16
    5296:	4393      	bics	r3, r2
    5298:	4662      	mov	r2, ip
    529a:	4313      	orrs	r3, r2
    529c:	4008      	ands	r0, r1
    529e:	0140      	lsls	r0, r0, #5
    52a0:	2220      	movs	r2, #32
    52a2:	4393      	bics	r3, r2
    52a4:	4303      	orrs	r3, r0
    52a6:	400f      	ands	r7, r1
    52a8:	01bf      	lsls	r7, r7, #6
    52aa:	2040      	movs	r0, #64	; 0x40
    52ac:	4383      	bics	r3, r0
    52ae:	433b      	orrs	r3, r7
    52b0:	400e      	ands	r6, r1
    52b2:	01f6      	lsls	r6, r6, #7
    52b4:	3040      	adds	r0, #64	; 0x40
    52b6:	4383      	bics	r3, r0
    52b8:	4333      	orrs	r3, r6
    52ba:	3879      	subs	r0, #121	; 0x79
    52bc:	4005      	ands	r5, r0
    52be:	022d      	lsls	r5, r5, #8
    52c0:	4809      	ldr	r0, [pc, #36]	; (52e8 <system_clock_source_xosc32k_set_config+0xb0>)
    52c2:	4003      	ands	r3, r0
    52c4:	432b      	orrs	r3, r5
    52c6:	4021      	ands	r1, r4
    52c8:	0309      	lsls	r1, r1, #12
    52ca:	4808      	ldr	r0, [pc, #32]	; (52ec <system_clock_source_xosc32k_set_config+0xb4>)
    52cc:	4003      	ands	r3, r0
    52ce:	430b      	orrs	r3, r1
    52d0:	465a      	mov	r2, fp
    52d2:	8293      	strh	r3, [r2, #20]
}
    52d4:	bc3c      	pop	{r2, r3, r4, r5}
    52d6:	4690      	mov	r8, r2
    52d8:	4699      	mov	r9, r3
    52da:	46a2      	mov	sl, r4
    52dc:	46ab      	mov	fp, r5
    52de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52e0:	40000800 	.word	0x40000800
    52e4:	20000238 	.word	0x20000238
    52e8:	fffff8ff 	.word	0xfffff8ff
    52ec:	ffffefff 	.word	0xffffefff

000052f0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    52f0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    52f2:	7a03      	ldrb	r3, [r0, #8]
    52f4:	069b      	lsls	r3, r3, #26
    52f6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    52f8:	8942      	ldrh	r2, [r0, #10]
    52fa:	0592      	lsls	r2, r2, #22
    52fc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    52fe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    5300:	4918      	ldr	r1, [pc, #96]	; (5364 <system_clock_source_dfll_set_config+0x74>)
    5302:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5304:	7983      	ldrb	r3, [r0, #6]
    5306:	79c2      	ldrb	r2, [r0, #7]
    5308:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    530a:	8842      	ldrh	r2, [r0, #2]
    530c:	8884      	ldrh	r4, [r0, #4]
    530e:	4322      	orrs	r2, r4
    5310:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5312:	7842      	ldrb	r2, [r0, #1]
    5314:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    5316:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    5318:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    531a:	7803      	ldrb	r3, [r0, #0]
    531c:	2b04      	cmp	r3, #4
    531e:	d011      	beq.n	5344 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5320:	2b20      	cmp	r3, #32
    5322:	d10e      	bne.n	5342 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5324:	7b03      	ldrb	r3, [r0, #12]
    5326:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5328:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    532a:	4313      	orrs	r3, r2
    532c:	89c2      	ldrh	r2, [r0, #14]
    532e:	0412      	lsls	r2, r2, #16
    5330:	490d      	ldr	r1, [pc, #52]	; (5368 <system_clock_source_dfll_set_config+0x78>)
    5332:	400a      	ands	r2, r1
    5334:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5336:	4a0b      	ldr	r2, [pc, #44]	; (5364 <system_clock_source_dfll_set_config+0x74>)
    5338:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    533a:	6811      	ldr	r1, [r2, #0]
    533c:	4b0b      	ldr	r3, [pc, #44]	; (536c <system_clock_source_dfll_set_config+0x7c>)
    533e:	430b      	orrs	r3, r1
    5340:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5342:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5344:	7b03      	ldrb	r3, [r0, #12]
    5346:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5348:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    534a:	4313      	orrs	r3, r2
    534c:	89c2      	ldrh	r2, [r0, #14]
    534e:	0412      	lsls	r2, r2, #16
    5350:	4905      	ldr	r1, [pc, #20]	; (5368 <system_clock_source_dfll_set_config+0x78>)
    5352:	400a      	ands	r2, r1
    5354:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5356:	4a03      	ldr	r2, [pc, #12]	; (5364 <system_clock_source_dfll_set_config+0x74>)
    5358:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    535a:	6813      	ldr	r3, [r2, #0]
    535c:	2104      	movs	r1, #4
    535e:	430b      	orrs	r3, r1
    5360:	6013      	str	r3, [r2, #0]
    5362:	e7ee      	b.n	5342 <system_clock_source_dfll_set_config+0x52>
    5364:	20000238 	.word	0x20000238
    5368:	03ff0000 	.word	0x03ff0000
    536c:	00000424 	.word	0x00000424

00005370 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    5370:	2808      	cmp	r0, #8
    5372:	d803      	bhi.n	537c <system_clock_source_enable+0xc>
    5374:	0080      	lsls	r0, r0, #2
    5376:	4b25      	ldr	r3, [pc, #148]	; (540c <system_clock_source_enable+0x9c>)
    5378:	581b      	ldr	r3, [r3, r0]
    537a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    537c:	2017      	movs	r0, #23
    537e:	e044      	b.n	540a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5380:	4a23      	ldr	r2, [pc, #140]	; (5410 <system_clock_source_enable+0xa0>)
    5382:	6a13      	ldr	r3, [r2, #32]
    5384:	2102      	movs	r1, #2
    5386:	430b      	orrs	r3, r1
    5388:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    538a:	2000      	movs	r0, #0
    538c:	e03d      	b.n	540a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    538e:	4a20      	ldr	r2, [pc, #128]	; (5410 <system_clock_source_enable+0xa0>)
    5390:	6993      	ldr	r3, [r2, #24]
    5392:	2102      	movs	r1, #2
    5394:	430b      	orrs	r3, r1
    5396:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    5398:	2000      	movs	r0, #0
		break;
    539a:	e036      	b.n	540a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    539c:	4a1c      	ldr	r2, [pc, #112]	; (5410 <system_clock_source_enable+0xa0>)
    539e:	8a13      	ldrh	r3, [r2, #16]
    53a0:	2102      	movs	r1, #2
    53a2:	430b      	orrs	r3, r1
    53a4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    53a6:	2000      	movs	r0, #0
		break;
    53a8:	e02f      	b.n	540a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    53aa:	4a19      	ldr	r2, [pc, #100]	; (5410 <system_clock_source_enable+0xa0>)
    53ac:	8a93      	ldrh	r3, [r2, #20]
    53ae:	2102      	movs	r1, #2
    53b0:	430b      	orrs	r3, r1
    53b2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    53b4:	2000      	movs	r0, #0
		break;
    53b6:	e028      	b.n	540a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    53b8:	4916      	ldr	r1, [pc, #88]	; (5414 <system_clock_source_enable+0xa4>)
    53ba:	680b      	ldr	r3, [r1, #0]
    53bc:	2202      	movs	r2, #2
    53be:	4313      	orrs	r3, r2
    53c0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    53c2:	4b13      	ldr	r3, [pc, #76]	; (5410 <system_clock_source_enable+0xa0>)
    53c4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    53c6:	0019      	movs	r1, r3
    53c8:	320e      	adds	r2, #14
    53ca:	68cb      	ldr	r3, [r1, #12]
    53cc:	421a      	tst	r2, r3
    53ce:	d0fc      	beq.n	53ca <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    53d0:	4a10      	ldr	r2, [pc, #64]	; (5414 <system_clock_source_enable+0xa4>)
    53d2:	6891      	ldr	r1, [r2, #8]
    53d4:	4b0e      	ldr	r3, [pc, #56]	; (5410 <system_clock_source_enable+0xa0>)
    53d6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    53d8:	6852      	ldr	r2, [r2, #4]
    53da:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    53dc:	2200      	movs	r2, #0
    53de:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    53e0:	0019      	movs	r1, r3
    53e2:	3210      	adds	r2, #16
    53e4:	68cb      	ldr	r3, [r1, #12]
    53e6:	421a      	tst	r2, r3
    53e8:	d0fc      	beq.n	53e4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    53ea:	4b0a      	ldr	r3, [pc, #40]	; (5414 <system_clock_source_enable+0xa4>)
    53ec:	681b      	ldr	r3, [r3, #0]
    53ee:	b29b      	uxth	r3, r3
    53f0:	4a07      	ldr	r2, [pc, #28]	; (5410 <system_clock_source_enable+0xa0>)
    53f2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    53f4:	2000      	movs	r0, #0
    53f6:	e008      	b.n	540a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    53f8:	4905      	ldr	r1, [pc, #20]	; (5410 <system_clock_source_enable+0xa0>)
    53fa:	2244      	movs	r2, #68	; 0x44
    53fc:	5c8b      	ldrb	r3, [r1, r2]
    53fe:	2002      	movs	r0, #2
    5400:	4303      	orrs	r3, r0
    5402:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    5404:	2000      	movs	r0, #0
		break;
    5406:	e000      	b.n	540a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    5408:	2000      	movs	r0, #0
}
    540a:	4770      	bx	lr
    540c:	0000a35c 	.word	0x0000a35c
    5410:	40000800 	.word	0x40000800
    5414:	20000238 	.word	0x20000238

00005418 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5418:	b5f0      	push	{r4, r5, r6, r7, lr}
    541a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    541c:	22c2      	movs	r2, #194	; 0xc2
    541e:	00d2      	lsls	r2, r2, #3
    5420:	4b47      	ldr	r3, [pc, #284]	; (5540 <system_clock_init+0x128>)
    5422:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5424:	4a47      	ldr	r2, [pc, #284]	; (5544 <system_clock_init+0x12c>)
    5426:	6853      	ldr	r3, [r2, #4]
    5428:	211e      	movs	r1, #30
    542a:	438b      	bics	r3, r1
    542c:	391a      	subs	r1, #26
    542e:	430b      	orrs	r3, r1
    5430:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    5432:	2202      	movs	r2, #2
    5434:	ab01      	add	r3, sp, #4
    5436:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5438:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    543a:	4d43      	ldr	r5, [pc, #268]	; (5548 <system_clock_init+0x130>)
    543c:	b2e0      	uxtb	r0, r4
    543e:	a901      	add	r1, sp, #4
    5440:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5442:	3401      	adds	r4, #1
    5444:	2c25      	cmp	r4, #37	; 0x25
    5446:	d1f9      	bne.n	543c <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5448:	a80a      	add	r0, sp, #40	; 0x28
    544a:	2300      	movs	r3, #0
    544c:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    544e:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    5450:	2280      	movs	r2, #128	; 0x80
    5452:	0212      	lsls	r2, r2, #8
    5454:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    5456:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    5458:	2201      	movs	r2, #1
    545a:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    545c:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    545e:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5460:	3202      	adds	r2, #2
    5462:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    5464:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5466:	4b39      	ldr	r3, [pc, #228]	; (554c <system_clock_init+0x134>)
    5468:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    546a:	2005      	movs	r0, #5
    546c:	4b38      	ldr	r3, [pc, #224]	; (5550 <system_clock_init+0x138>)
    546e:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5470:	4933      	ldr	r1, [pc, #204]	; (5540 <system_clock_init+0x128>)
    5472:	2202      	movs	r2, #2
    5474:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5476:	421a      	tst	r2, r3
    5478:	d0fc      	beq.n	5474 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    547a:	4a31      	ldr	r2, [pc, #196]	; (5540 <system_clock_init+0x128>)
    547c:	8a93      	ldrh	r3, [r2, #20]
    547e:	2180      	movs	r1, #128	; 0x80
    5480:	430b      	orrs	r3, r1
    5482:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5484:	ab05      	add	r3, sp, #20
    5486:	2100      	movs	r1, #0
    5488:	2200      	movs	r2, #0
    548a:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    548c:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    548e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5490:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5492:	313f      	adds	r1, #63	; 0x3f
    5494:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5496:	393b      	subs	r1, #59	; 0x3b
    5498:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    549a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    549c:	4b2d      	ldr	r3, [pc, #180]	; (5554 <system_clock_init+0x13c>)
    549e:	681b      	ldr	r3, [r3, #0]
    54a0:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    54a2:	2b3f      	cmp	r3, #63	; 0x3f
    54a4:	d04a      	beq.n	553c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    54a6:	a805      	add	r0, sp, #20
    54a8:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    54aa:	4b2b      	ldr	r3, [pc, #172]	; (5558 <system_clock_init+0x140>)
    54ac:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    54ae:	2307      	movs	r3, #7
    54b0:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    54b2:	3338      	adds	r3, #56	; 0x38
    54b4:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    54b6:	4b29      	ldr	r3, [pc, #164]	; (555c <system_clock_init+0x144>)
    54b8:	4798      	blx	r3
	config->run_in_standby  = false;
    54ba:	a804      	add	r0, sp, #16
    54bc:	2500      	movs	r5, #0
    54be:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    54c0:	2601      	movs	r6, #1
    54c2:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    54c4:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    54c6:	4b26      	ldr	r3, [pc, #152]	; (5560 <system_clock_init+0x148>)
    54c8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    54ca:	2006      	movs	r0, #6
    54cc:	4f20      	ldr	r7, [pc, #128]	; (5550 <system_clock_init+0x138>)
    54ce:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    54d0:	4b24      	ldr	r3, [pc, #144]	; (5564 <system_clock_init+0x14c>)
    54d2:	4798      	blx	r3
	config->division_factor    = 1;
    54d4:	ac01      	add	r4, sp, #4
    54d6:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    54d8:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    54da:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    54dc:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    54de:	2305      	movs	r3, #5
    54e0:	7023      	strb	r3, [r4, #0]
    54e2:	0021      	movs	r1, r4
    54e4:	2001      	movs	r0, #1
    54e6:	4b20      	ldr	r3, [pc, #128]	; (5568 <system_clock_init+0x150>)
    54e8:	4798      	blx	r3
    54ea:	2001      	movs	r0, #1
    54ec:	4b1f      	ldr	r3, [pc, #124]	; (556c <system_clock_init+0x154>)
    54ee:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    54f0:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    54f2:	0021      	movs	r1, r4
    54f4:	2000      	movs	r0, #0
    54f6:	4b14      	ldr	r3, [pc, #80]	; (5548 <system_clock_init+0x130>)
    54f8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    54fa:	2000      	movs	r0, #0
    54fc:	4b1c      	ldr	r3, [pc, #112]	; (5570 <system_clock_init+0x158>)
    54fe:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5500:	2007      	movs	r0, #7
    5502:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5504:	490e      	ldr	r1, [pc, #56]	; (5540 <system_clock_init+0x128>)
    5506:	22d0      	movs	r2, #208	; 0xd0
    5508:	68cb      	ldr	r3, [r1, #12]
    550a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    550c:	2bd0      	cmp	r3, #208	; 0xd0
    550e:	d1fb      	bne.n	5508 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    5510:	4a18      	ldr	r2, [pc, #96]	; (5574 <system_clock_init+0x15c>)
    5512:	2300      	movs	r3, #0
    5514:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    5516:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    5518:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    551a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    551c:	a901      	add	r1, sp, #4
    551e:	2201      	movs	r2, #1
    5520:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    5522:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    5524:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    5526:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5528:	3307      	adds	r3, #7
    552a:	700b      	strb	r3, [r1, #0]
    552c:	2000      	movs	r0, #0
    552e:	4b0e      	ldr	r3, [pc, #56]	; (5568 <system_clock_init+0x150>)
    5530:	4798      	blx	r3
    5532:	2000      	movs	r0, #0
    5534:	4b0d      	ldr	r3, [pc, #52]	; (556c <system_clock_init+0x154>)
    5536:	4798      	blx	r3
#endif
}
    5538:	b00f      	add	sp, #60	; 0x3c
    553a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    553c:	3b20      	subs	r3, #32
    553e:	e7b2      	b.n	54a6 <system_clock_init+0x8e>
    5540:	40000800 	.word	0x40000800
    5544:	41004000 	.word	0x41004000
    5548:	000057b1 	.word	0x000057b1
    554c:	00005239 	.word	0x00005239
    5550:	00005371 	.word	0x00005371
    5554:	00806024 	.word	0x00806024
    5558:	000005b9 	.word	0x000005b9
    555c:	000052f1 	.word	0x000052f1
    5560:	000051fd 	.word	0x000051fd
    5564:	00005579 	.word	0x00005579
    5568:	0000559d 	.word	0x0000559d
    556c:	00005655 	.word	0x00005655
    5570:	00005725 	.word	0x00005725
    5574:	40000400 	.word	0x40000400

00005578 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    5578:	4a06      	ldr	r2, [pc, #24]	; (5594 <system_gclk_init+0x1c>)
    557a:	6993      	ldr	r3, [r2, #24]
    557c:	2108      	movs	r1, #8
    557e:	430b      	orrs	r3, r1
    5580:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5582:	2201      	movs	r2, #1
    5584:	4b04      	ldr	r3, [pc, #16]	; (5598 <system_gclk_init+0x20>)
    5586:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5588:	0019      	movs	r1, r3
    558a:	780b      	ldrb	r3, [r1, #0]
    558c:	4213      	tst	r3, r2
    558e:	d1fc      	bne.n	558a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    5590:	4770      	bx	lr
    5592:	46c0      	nop			; (mov r8, r8)
    5594:	40000400 	.word	0x40000400
    5598:	40000c00 	.word	0x40000c00

0000559c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    559c:	b570      	push	{r4, r5, r6, lr}
    559e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    55a0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    55a2:	780d      	ldrb	r5, [r1, #0]
    55a4:	022d      	lsls	r5, r5, #8
    55a6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    55a8:	784b      	ldrb	r3, [r1, #1]
    55aa:	2b00      	cmp	r3, #0
    55ac:	d002      	beq.n	55b4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    55ae:	2380      	movs	r3, #128	; 0x80
    55b0:	02db      	lsls	r3, r3, #11
    55b2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    55b4:	7a4b      	ldrb	r3, [r1, #9]
    55b6:	2b00      	cmp	r3, #0
    55b8:	d002      	beq.n	55c0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    55ba:	2380      	movs	r3, #128	; 0x80
    55bc:	031b      	lsls	r3, r3, #12
    55be:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    55c0:	6848      	ldr	r0, [r1, #4]
    55c2:	2801      	cmp	r0, #1
    55c4:	d910      	bls.n	55e8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    55c6:	1e43      	subs	r3, r0, #1
    55c8:	4218      	tst	r0, r3
    55ca:	d134      	bne.n	5636 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    55cc:	2802      	cmp	r0, #2
    55ce:	d930      	bls.n	5632 <system_gclk_gen_set_config+0x96>
    55d0:	2302      	movs	r3, #2
    55d2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    55d4:	3201      	adds	r2, #1
						mask <<= 1) {
    55d6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    55d8:	4298      	cmp	r0, r3
    55da:	d8fb      	bhi.n	55d4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    55dc:	0212      	lsls	r2, r2, #8
    55de:	4332      	orrs	r2, r6
    55e0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    55e2:	2380      	movs	r3, #128	; 0x80
    55e4:	035b      	lsls	r3, r3, #13
    55e6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    55e8:	7a0b      	ldrb	r3, [r1, #8]
    55ea:	2b00      	cmp	r3, #0
    55ec:	d002      	beq.n	55f4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    55ee:	2380      	movs	r3, #128	; 0x80
    55f0:	039b      	lsls	r3, r3, #14
    55f2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    55f4:	4a13      	ldr	r2, [pc, #76]	; (5644 <system_gclk_gen_set_config+0xa8>)
    55f6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    55f8:	b25b      	sxtb	r3, r3
    55fa:	2b00      	cmp	r3, #0
    55fc:	dbfb      	blt.n	55f6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    55fe:	4b12      	ldr	r3, [pc, #72]	; (5648 <system_gclk_gen_set_config+0xac>)
    5600:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5602:	4b12      	ldr	r3, [pc, #72]	; (564c <system_gclk_gen_set_config+0xb0>)
    5604:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5606:	4a0f      	ldr	r2, [pc, #60]	; (5644 <system_gclk_gen_set_config+0xa8>)
    5608:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    560a:	b25b      	sxtb	r3, r3
    560c:	2b00      	cmp	r3, #0
    560e:	dbfb      	blt.n	5608 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5610:	4b0c      	ldr	r3, [pc, #48]	; (5644 <system_gclk_gen_set_config+0xa8>)
    5612:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5614:	001a      	movs	r2, r3
    5616:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    5618:	b25b      	sxtb	r3, r3
    561a:	2b00      	cmp	r3, #0
    561c:	dbfb      	blt.n	5616 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    561e:	4a09      	ldr	r2, [pc, #36]	; (5644 <system_gclk_gen_set_config+0xa8>)
    5620:	6853      	ldr	r3, [r2, #4]
    5622:	2180      	movs	r1, #128	; 0x80
    5624:	0249      	lsls	r1, r1, #9
    5626:	400b      	ands	r3, r1
    5628:	431d      	orrs	r5, r3
    562a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    562c:	4b08      	ldr	r3, [pc, #32]	; (5650 <system_gclk_gen_set_config+0xb4>)
    562e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5630:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    5632:	2200      	movs	r2, #0
    5634:	e7d2      	b.n	55dc <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5636:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    5638:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    563a:	2380      	movs	r3, #128	; 0x80
    563c:	029b      	lsls	r3, r3, #10
    563e:	431d      	orrs	r5, r3
    5640:	e7d2      	b.n	55e8 <system_gclk_gen_set_config+0x4c>
    5642:	46c0      	nop			; (mov r8, r8)
    5644:	40000c00 	.word	0x40000c00
    5648:	00003e99 	.word	0x00003e99
    564c:	40000c08 	.word	0x40000c08
    5650:	00003ed9 	.word	0x00003ed9

00005654 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5654:	b510      	push	{r4, lr}
    5656:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5658:	4a0b      	ldr	r2, [pc, #44]	; (5688 <system_gclk_gen_enable+0x34>)
    565a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    565c:	b25b      	sxtb	r3, r3
    565e:	2b00      	cmp	r3, #0
    5660:	dbfb      	blt.n	565a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    5662:	4b0a      	ldr	r3, [pc, #40]	; (568c <system_gclk_gen_enable+0x38>)
    5664:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5666:	4b0a      	ldr	r3, [pc, #40]	; (5690 <system_gclk_gen_enable+0x3c>)
    5668:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    566a:	4a07      	ldr	r2, [pc, #28]	; (5688 <system_gclk_gen_enable+0x34>)
    566c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    566e:	b25b      	sxtb	r3, r3
    5670:	2b00      	cmp	r3, #0
    5672:	dbfb      	blt.n	566c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    5674:	4a04      	ldr	r2, [pc, #16]	; (5688 <system_gclk_gen_enable+0x34>)
    5676:	6851      	ldr	r1, [r2, #4]
    5678:	2380      	movs	r3, #128	; 0x80
    567a:	025b      	lsls	r3, r3, #9
    567c:	430b      	orrs	r3, r1
    567e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    5680:	4b04      	ldr	r3, [pc, #16]	; (5694 <system_gclk_gen_enable+0x40>)
    5682:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5684:	bd10      	pop	{r4, pc}
    5686:	46c0      	nop			; (mov r8, r8)
    5688:	40000c00 	.word	0x40000c00
    568c:	00003e99 	.word	0x00003e99
    5690:	40000c04 	.word	0x40000c04
    5694:	00003ed9 	.word	0x00003ed9

00005698 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5698:	b570      	push	{r4, r5, r6, lr}
    569a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    569c:	4a1a      	ldr	r2, [pc, #104]	; (5708 <system_gclk_gen_get_hz+0x70>)
    569e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    56a0:	b25b      	sxtb	r3, r3
    56a2:	2b00      	cmp	r3, #0
    56a4:	dbfb      	blt.n	569e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    56a6:	4b19      	ldr	r3, [pc, #100]	; (570c <system_gclk_gen_get_hz+0x74>)
    56a8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    56aa:	4b19      	ldr	r3, [pc, #100]	; (5710 <system_gclk_gen_get_hz+0x78>)
    56ac:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    56ae:	4a16      	ldr	r2, [pc, #88]	; (5708 <system_gclk_gen_get_hz+0x70>)
    56b0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    56b2:	b25b      	sxtb	r3, r3
    56b4:	2b00      	cmp	r3, #0
    56b6:	dbfb      	blt.n	56b0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    56b8:	4e13      	ldr	r6, [pc, #76]	; (5708 <system_gclk_gen_get_hz+0x70>)
    56ba:	6870      	ldr	r0, [r6, #4]
    56bc:	04c0      	lsls	r0, r0, #19
    56be:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    56c0:	4b14      	ldr	r3, [pc, #80]	; (5714 <system_gclk_gen_get_hz+0x7c>)
    56c2:	4798      	blx	r3
    56c4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    56c6:	4b12      	ldr	r3, [pc, #72]	; (5710 <system_gclk_gen_get_hz+0x78>)
    56c8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    56ca:	6876      	ldr	r6, [r6, #4]
    56cc:	02f6      	lsls	r6, r6, #11
    56ce:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    56d0:	4b11      	ldr	r3, [pc, #68]	; (5718 <system_gclk_gen_get_hz+0x80>)
    56d2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    56d4:	4a0c      	ldr	r2, [pc, #48]	; (5708 <system_gclk_gen_get_hz+0x70>)
    56d6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    56d8:	b25b      	sxtb	r3, r3
    56da:	2b00      	cmp	r3, #0
    56dc:	dbfb      	blt.n	56d6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    56de:	4b0a      	ldr	r3, [pc, #40]	; (5708 <system_gclk_gen_get_hz+0x70>)
    56e0:	689c      	ldr	r4, [r3, #8]
    56e2:	0224      	lsls	r4, r4, #8
    56e4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    56e6:	4b0d      	ldr	r3, [pc, #52]	; (571c <system_gclk_gen_get_hz+0x84>)
    56e8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    56ea:	2e00      	cmp	r6, #0
    56ec:	d107      	bne.n	56fe <system_gclk_gen_get_hz+0x66>
    56ee:	2c01      	cmp	r4, #1
    56f0:	d907      	bls.n	5702 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    56f2:	0021      	movs	r1, r4
    56f4:	0028      	movs	r0, r5
    56f6:	4b0a      	ldr	r3, [pc, #40]	; (5720 <system_gclk_gen_get_hz+0x88>)
    56f8:	4798      	blx	r3
    56fa:	0005      	movs	r5, r0
    56fc:	e001      	b.n	5702 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    56fe:	3401      	adds	r4, #1
    5700:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    5702:	0028      	movs	r0, r5
    5704:	bd70      	pop	{r4, r5, r6, pc}
    5706:	46c0      	nop			; (mov r8, r8)
    5708:	40000c00 	.word	0x40000c00
    570c:	00003e99 	.word	0x00003e99
    5710:	40000c04 	.word	0x40000c04
    5714:	0000516d 	.word	0x0000516d
    5718:	40000c08 	.word	0x40000c08
    571c:	00003ed9 	.word	0x00003ed9
    5720:	00007999 	.word	0x00007999

00005724 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5724:	b510      	push	{r4, lr}
    5726:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5728:	4b06      	ldr	r3, [pc, #24]	; (5744 <system_gclk_chan_enable+0x20>)
    572a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    572c:	4b06      	ldr	r3, [pc, #24]	; (5748 <system_gclk_chan_enable+0x24>)
    572e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5730:	4a06      	ldr	r2, [pc, #24]	; (574c <system_gclk_chan_enable+0x28>)
    5732:	8853      	ldrh	r3, [r2, #2]
    5734:	2180      	movs	r1, #128	; 0x80
    5736:	01c9      	lsls	r1, r1, #7
    5738:	430b      	orrs	r3, r1
    573a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    573c:	4b04      	ldr	r3, [pc, #16]	; (5750 <system_gclk_chan_enable+0x2c>)
    573e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5740:	bd10      	pop	{r4, pc}
    5742:	46c0      	nop			; (mov r8, r8)
    5744:	00003e99 	.word	0x00003e99
    5748:	40000c02 	.word	0x40000c02
    574c:	40000c00 	.word	0x40000c00
    5750:	00003ed9 	.word	0x00003ed9

00005754 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5754:	b510      	push	{r4, lr}
    5756:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5758:	4b0f      	ldr	r3, [pc, #60]	; (5798 <system_gclk_chan_disable+0x44>)
    575a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    575c:	4b0f      	ldr	r3, [pc, #60]	; (579c <system_gclk_chan_disable+0x48>)
    575e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5760:	4a0f      	ldr	r2, [pc, #60]	; (57a0 <system_gclk_chan_disable+0x4c>)
    5762:	8853      	ldrh	r3, [r2, #2]
    5764:	051b      	lsls	r3, r3, #20
    5766:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    5768:	8853      	ldrh	r3, [r2, #2]
    576a:	490e      	ldr	r1, [pc, #56]	; (57a4 <system_gclk_chan_disable+0x50>)
    576c:	400b      	ands	r3, r1
    576e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5770:	8853      	ldrh	r3, [r2, #2]
    5772:	490d      	ldr	r1, [pc, #52]	; (57a8 <system_gclk_chan_disable+0x54>)
    5774:	400b      	ands	r3, r1
    5776:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5778:	0011      	movs	r1, r2
    577a:	2280      	movs	r2, #128	; 0x80
    577c:	01d2      	lsls	r2, r2, #7
    577e:	884b      	ldrh	r3, [r1, #2]
    5780:	4213      	tst	r3, r2
    5782:	d1fc      	bne.n	577e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5784:	4906      	ldr	r1, [pc, #24]	; (57a0 <system_gclk_chan_disable+0x4c>)
    5786:	884a      	ldrh	r2, [r1, #2]
    5788:	0203      	lsls	r3, r0, #8
    578a:	4806      	ldr	r0, [pc, #24]	; (57a4 <system_gclk_chan_disable+0x50>)
    578c:	4002      	ands	r2, r0
    578e:	4313      	orrs	r3, r2
    5790:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    5792:	4b06      	ldr	r3, [pc, #24]	; (57ac <system_gclk_chan_disable+0x58>)
    5794:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5796:	bd10      	pop	{r4, pc}
    5798:	00003e99 	.word	0x00003e99
    579c:	40000c02 	.word	0x40000c02
    57a0:	40000c00 	.word	0x40000c00
    57a4:	fffff0ff 	.word	0xfffff0ff
    57a8:	ffffbfff 	.word	0xffffbfff
    57ac:	00003ed9 	.word	0x00003ed9

000057b0 <system_gclk_chan_set_config>:
{
    57b0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    57b2:	780c      	ldrb	r4, [r1, #0]
    57b4:	0224      	lsls	r4, r4, #8
    57b6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    57b8:	4b02      	ldr	r3, [pc, #8]	; (57c4 <system_gclk_chan_set_config+0x14>)
    57ba:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    57bc:	b2a4      	uxth	r4, r4
    57be:	4b02      	ldr	r3, [pc, #8]	; (57c8 <system_gclk_chan_set_config+0x18>)
    57c0:	805c      	strh	r4, [r3, #2]
}
    57c2:	bd10      	pop	{r4, pc}
    57c4:	00005755 	.word	0x00005755
    57c8:	40000c00 	.word	0x40000c00

000057cc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    57cc:	b510      	push	{r4, lr}
    57ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    57d0:	4b06      	ldr	r3, [pc, #24]	; (57ec <system_gclk_chan_get_hz+0x20>)
    57d2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    57d4:	4b06      	ldr	r3, [pc, #24]	; (57f0 <system_gclk_chan_get_hz+0x24>)
    57d6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    57d8:	4b06      	ldr	r3, [pc, #24]	; (57f4 <system_gclk_chan_get_hz+0x28>)
    57da:	885c      	ldrh	r4, [r3, #2]
    57dc:	0524      	lsls	r4, r4, #20
    57de:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    57e0:	4b05      	ldr	r3, [pc, #20]	; (57f8 <system_gclk_chan_get_hz+0x2c>)
    57e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    57e4:	0020      	movs	r0, r4
    57e6:	4b05      	ldr	r3, [pc, #20]	; (57fc <system_gclk_chan_get_hz+0x30>)
    57e8:	4798      	blx	r3
}
    57ea:	bd10      	pop	{r4, pc}
    57ec:	00003e99 	.word	0x00003e99
    57f0:	40000c02 	.word	0x40000c02
    57f4:	40000c00 	.word	0x40000c00
    57f8:	00003ed9 	.word	0x00003ed9
    57fc:	00005699 	.word	0x00005699

00005800 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5800:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5802:	78d3      	ldrb	r3, [r2, #3]
    5804:	2b00      	cmp	r3, #0
    5806:	d135      	bne.n	5874 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5808:	7813      	ldrb	r3, [r2, #0]
    580a:	2b80      	cmp	r3, #128	; 0x80
    580c:	d029      	beq.n	5862 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    580e:	061b      	lsls	r3, r3, #24
    5810:	2480      	movs	r4, #128	; 0x80
    5812:	0264      	lsls	r4, r4, #9
    5814:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5816:	7854      	ldrb	r4, [r2, #1]
    5818:	2502      	movs	r5, #2
    581a:	43ac      	bics	r4, r5
    581c:	d106      	bne.n	582c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    581e:	7894      	ldrb	r4, [r2, #2]
    5820:	2c00      	cmp	r4, #0
    5822:	d120      	bne.n	5866 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    5824:	2480      	movs	r4, #128	; 0x80
    5826:	02a4      	lsls	r4, r4, #10
    5828:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    582a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    582c:	7854      	ldrb	r4, [r2, #1]
    582e:	3c01      	subs	r4, #1
    5830:	2c01      	cmp	r4, #1
    5832:	d91c      	bls.n	586e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5834:	040d      	lsls	r5, r1, #16
    5836:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5838:	24a0      	movs	r4, #160	; 0xa0
    583a:	05e4      	lsls	r4, r4, #23
    583c:	432c      	orrs	r4, r5
    583e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5840:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5842:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5844:	24d0      	movs	r4, #208	; 0xd0
    5846:	0624      	lsls	r4, r4, #24
    5848:	432c      	orrs	r4, r5
    584a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    584c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    584e:	78d4      	ldrb	r4, [r2, #3]
    5850:	2c00      	cmp	r4, #0
    5852:	d122      	bne.n	589a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5854:	035b      	lsls	r3, r3, #13
    5856:	d51c      	bpl.n	5892 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5858:	7893      	ldrb	r3, [r2, #2]
    585a:	2b01      	cmp	r3, #1
    585c:	d01e      	beq.n	589c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    585e:	6141      	str	r1, [r0, #20]
    5860:	e017      	b.n	5892 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    5862:	2300      	movs	r3, #0
    5864:	e7d7      	b.n	5816 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5866:	24c0      	movs	r4, #192	; 0xc0
    5868:	02e4      	lsls	r4, r4, #11
    586a:	4323      	orrs	r3, r4
    586c:	e7dd      	b.n	582a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    586e:	4c0d      	ldr	r4, [pc, #52]	; (58a4 <_system_pinmux_config+0xa4>)
    5870:	4023      	ands	r3, r4
    5872:	e7df      	b.n	5834 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    5874:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5876:	040c      	lsls	r4, r1, #16
    5878:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    587a:	23a0      	movs	r3, #160	; 0xa0
    587c:	05db      	lsls	r3, r3, #23
    587e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5880:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5882:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5884:	23d0      	movs	r3, #208	; 0xd0
    5886:	061b      	lsls	r3, r3, #24
    5888:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    588a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    588c:	78d3      	ldrb	r3, [r2, #3]
    588e:	2b00      	cmp	r3, #0
    5890:	d103      	bne.n	589a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5892:	7853      	ldrb	r3, [r2, #1]
    5894:	3b01      	subs	r3, #1
    5896:	2b01      	cmp	r3, #1
    5898:	d902      	bls.n	58a0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    589a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    589c:	6181      	str	r1, [r0, #24]
    589e:	e7f8      	b.n	5892 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    58a0:	6081      	str	r1, [r0, #8]
}
    58a2:	e7fa      	b.n	589a <_system_pinmux_config+0x9a>
    58a4:	fffbffff 	.word	0xfffbffff

000058a8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    58a8:	b510      	push	{r4, lr}
    58aa:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    58ac:	09c1      	lsrs	r1, r0, #7
		return NULL;
    58ae:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    58b0:	2900      	cmp	r1, #0
    58b2:	d104      	bne.n	58be <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    58b4:	0943      	lsrs	r3, r0, #5
    58b6:	01db      	lsls	r3, r3, #7
    58b8:	4905      	ldr	r1, [pc, #20]	; (58d0 <system_pinmux_pin_set_config+0x28>)
    58ba:	468c      	mov	ip, r1
    58bc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    58be:	241f      	movs	r4, #31
    58c0:	4020      	ands	r0, r4
    58c2:	2101      	movs	r1, #1
    58c4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    58c6:	0018      	movs	r0, r3
    58c8:	4b02      	ldr	r3, [pc, #8]	; (58d4 <system_pinmux_pin_set_config+0x2c>)
    58ca:	4798      	blx	r3
}
    58cc:	bd10      	pop	{r4, pc}
    58ce:	46c0      	nop			; (mov r8, r8)
    58d0:	41004400 	.word	0x41004400
    58d4:	00005801 	.word	0x00005801

000058d8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    58d8:	4770      	bx	lr
	...

000058dc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    58dc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    58de:	4b05      	ldr	r3, [pc, #20]	; (58f4 <system_init+0x18>)
    58e0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    58e2:	4b05      	ldr	r3, [pc, #20]	; (58f8 <system_init+0x1c>)
    58e4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    58e6:	4b05      	ldr	r3, [pc, #20]	; (58fc <system_init+0x20>)
    58e8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    58ea:	4b05      	ldr	r3, [pc, #20]	; (5900 <system_init+0x24>)
    58ec:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    58ee:	4b05      	ldr	r3, [pc, #20]	; (5904 <system_init+0x28>)
    58f0:	4798      	blx	r3
}
    58f2:	bd10      	pop	{r4, pc}
    58f4:	00005419 	.word	0x00005419
    58f8:	00003f09 	.word	0x00003f09
    58fc:	000058d9 	.word	0x000058d9
    5900:	00004019 	.word	0x00004019
    5904:	000058d9 	.word	0x000058d9

00005908 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    5908:	4b09      	ldr	r3, [pc, #36]	; (5930 <_tcc_get_inst_index+0x28>)
    590a:	4298      	cmp	r0, r3
    590c:	d00c      	beq.n	5928 <_tcc_get_inst_index+0x20>
    590e:	4b09      	ldr	r3, [pc, #36]	; (5934 <_tcc_get_inst_index+0x2c>)
    5910:	4298      	cmp	r0, r3
    5912:	d007      	beq.n	5924 <_tcc_get_inst_index+0x1c>
    5914:	4a08      	ldr	r2, [pc, #32]	; (5938 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5916:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    5918:	4290      	cmp	r0, r2
    591a:	d001      	beq.n	5920 <_tcc_get_inst_index+0x18>
}
    591c:	0018      	movs	r0, r3
    591e:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    5920:	3302      	adds	r3, #2
    5922:	e002      	b.n	592a <_tcc_get_inst_index+0x22>
    5924:	2301      	movs	r3, #1
    5926:	e000      	b.n	592a <_tcc_get_inst_index+0x22>
    5928:	2300      	movs	r3, #0
			return i;
    592a:	b2db      	uxtb	r3, r3
    592c:	e7f6      	b.n	591c <_tcc_get_inst_index+0x14>
    592e:	46c0      	nop			; (mov r8, r8)
    5930:	42002000 	.word	0x42002000
    5934:	42002400 	.word	0x42002400
    5938:	42002800 	.word	0x42002800

0000593c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    593c:	b510      	push	{r4, lr}
    593e:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5940:	0008      	movs	r0, r1
    5942:	4b4f      	ldr	r3, [pc, #316]	; (5a80 <tcc_get_config_defaults+0x144>)
    5944:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    5946:	2300      	movs	r3, #0
    5948:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    594a:	0080      	lsls	r0, r0, #2
    594c:	4a4d      	ldr	r2, [pc, #308]	; (5a84 <tcc_get_config_defaults+0x148>)
    594e:	5882      	ldr	r2, [r0, r2]
    5950:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    5952:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    5954:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    5956:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    5958:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    595a:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    595c:	61e3      	str	r3, [r4, #28]
    595e:	6223      	str	r3, [r4, #32]
    5960:	6263      	str	r3, [r4, #36]	; 0x24
    5962:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5964:	7523      	strb	r3, [r4, #20]
    5966:	7563      	strb	r3, [r4, #21]
    5968:	75a3      	strb	r3, [r4, #22]
    596a:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    596c:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    596e:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5970:	7423      	strb	r3, [r4, #16]
    5972:	7463      	strb	r3, [r4, #17]
    5974:	74a3      	strb	r3, [r4, #18]
    5976:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    5978:	222c      	movs	r2, #44	; 0x2c
    597a:	54a3      	strb	r3, [r4, r2]
    597c:	3201      	adds	r2, #1
    597e:	54a3      	strb	r3, [r4, r2]
    5980:	3201      	adds	r2, #1
    5982:	54a3      	strb	r3, [r4, r2]
    5984:	3201      	adds	r2, #1
    5986:	54a3      	strb	r3, [r4, r2]
    5988:	3201      	adds	r2, #1
    598a:	54a3      	strb	r3, [r4, r2]
    598c:	3201      	adds	r2, #1
    598e:	54a3      	strb	r3, [r4, r2]
    5990:	3201      	adds	r2, #1
    5992:	54a3      	strb	r3, [r4, r2]
    5994:	3201      	adds	r2, #1
    5996:	54a3      	strb	r3, [r4, r2]
    5998:	3201      	adds	r2, #1
    599a:	54a3      	strb	r3, [r4, r2]
    599c:	3201      	adds	r2, #1
    599e:	54a3      	strb	r3, [r4, r2]
    59a0:	3201      	adds	r2, #1
    59a2:	54a3      	strb	r3, [r4, r2]
    59a4:	3201      	adds	r2, #1
    59a6:	54a3      	strb	r3, [r4, r2]
    59a8:	3201      	adds	r2, #1
    59aa:	54a3      	strb	r3, [r4, r2]
    59ac:	3201      	adds	r2, #1
    59ae:	54a3      	strb	r3, [r4, r2]
    59b0:	3201      	adds	r2, #1
    59b2:	54a3      	strb	r3, [r4, r2]
    59b4:	3201      	adds	r2, #1
    59b6:	54a3      	strb	r3, [r4, r2]
    59b8:	3201      	adds	r2, #1
    59ba:	54a3      	strb	r3, [r4, r2]
    59bc:	3201      	adds	r2, #1
    59be:	54a3      	strb	r3, [r4, r2]
    59c0:	3201      	adds	r2, #1
    59c2:	54a3      	strb	r3, [r4, r2]
    59c4:	3201      	adds	r2, #1
    59c6:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    59c8:	3201      	adds	r2, #1
    59ca:	54a3      	strb	r3, [r4, r2]
    59cc:	3201      	adds	r2, #1
    59ce:	54a3      	strb	r3, [r4, r2]
    59d0:	3201      	adds	r2, #1
    59d2:	54a3      	strb	r3, [r4, r2]
    59d4:	3201      	adds	r2, #1
    59d6:	54a3      	strb	r3, [r4, r2]
    59d8:	3201      	adds	r2, #1
    59da:	54a3      	strb	r3, [r4, r2]
    59dc:	3201      	adds	r2, #1
    59de:	54a3      	strb	r3, [r4, r2]
    59e0:	3201      	adds	r2, #1
    59e2:	54a3      	strb	r3, [r4, r2]
    59e4:	3201      	adds	r2, #1
    59e6:	54a3      	strb	r3, [r4, r2]
    59e8:	3201      	adds	r2, #1
    59ea:	54a3      	strb	r3, [r4, r2]
    59ec:	3201      	adds	r2, #1
    59ee:	54a3      	strb	r3, [r4, r2]
    59f0:	3201      	adds	r2, #1
    59f2:	54a3      	strb	r3, [r4, r2]
    59f4:	3201      	adds	r2, #1
    59f6:	54a3      	strb	r3, [r4, r2]
    59f8:	3201      	adds	r2, #1
    59fa:	54a3      	strb	r3, [r4, r2]
    59fc:	3201      	adds	r2, #1
    59fe:	54a3      	strb	r3, [r4, r2]
    5a00:	3201      	adds	r2, #1
    5a02:	54a3      	strb	r3, [r4, r2]
    5a04:	3201      	adds	r2, #1
    5a06:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    5a08:	3201      	adds	r2, #1
    5a0a:	54a3      	strb	r3, [r4, r2]
    5a0c:	3201      	adds	r2, #1
    5a0e:	54a3      	strb	r3, [r4, r2]
    5a10:	3201      	adds	r2, #1
    5a12:	54a3      	strb	r3, [r4, r2]
    5a14:	3201      	adds	r2, #1
    5a16:	54a3      	strb	r3, [r4, r2]
    5a18:	3201      	adds	r2, #1
    5a1a:	54a3      	strb	r3, [r4, r2]
    5a1c:	3201      	adds	r2, #1
    5a1e:	54a3      	strb	r3, [r4, r2]
    5a20:	3201      	adds	r2, #1
    5a22:	54a3      	strb	r3, [r4, r2]
    5a24:	3201      	adds	r2, #1
    5a26:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    5a28:	3241      	adds	r2, #65	; 0x41
    5a2a:	54a3      	strb	r3, [r4, r2]
    5a2c:	65a3      	str	r3, [r4, #88]	; 0x58
    5a2e:	67a3      	str	r3, [r4, #120]	; 0x78
    5a30:	3201      	adds	r2, #1
    5a32:	54a3      	strb	r3, [r4, r2]
    5a34:	65e3      	str	r3, [r4, #92]	; 0x5c
    5a36:	67e3      	str	r3, [r4, #124]	; 0x7c
    5a38:	3201      	adds	r2, #1
    5a3a:	54a3      	strb	r3, [r4, r2]
    5a3c:	6623      	str	r3, [r4, #96]	; 0x60
    5a3e:	3a1a      	subs	r2, #26
    5a40:	50a3      	str	r3, [r4, r2]
    5a42:	321b      	adds	r2, #27
    5a44:	54a3      	strb	r3, [r4, r2]
    5a46:	6663      	str	r3, [r4, #100]	; 0x64
    5a48:	3a17      	subs	r2, #23
    5a4a:	50a3      	str	r3, [r4, r2]
    5a4c:	3218      	adds	r2, #24
    5a4e:	54a3      	strb	r3, [r4, r2]
    5a50:	66a3      	str	r3, [r4, #104]	; 0x68
    5a52:	3a14      	subs	r2, #20
    5a54:	50a3      	str	r3, [r4, r2]
    5a56:	3215      	adds	r2, #21
    5a58:	54a3      	strb	r3, [r4, r2]
    5a5a:	66e3      	str	r3, [r4, #108]	; 0x6c
    5a5c:	3a11      	subs	r2, #17
    5a5e:	50a3      	str	r3, [r4, r2]
    5a60:	3212      	adds	r2, #18
    5a62:	54a3      	strb	r3, [r4, r2]
    5a64:	6723      	str	r3, [r4, #112]	; 0x70
    5a66:	3a0e      	subs	r2, #14
    5a68:	50a3      	str	r3, [r4, r2]
    5a6a:	320f      	adds	r2, #15
    5a6c:	54a3      	strb	r3, [r4, r2]
    5a6e:	6763      	str	r3, [r4, #116]	; 0x74
    5a70:	3a0b      	subs	r2, #11
    5a72:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    5a74:	2101      	movs	r1, #1
    5a76:	320c      	adds	r2, #12
    5a78:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    5a7a:	3201      	adds	r2, #1
    5a7c:	54a3      	strb	r3, [r4, r2]
}
    5a7e:	bd10      	pop	{r4, pc}
    5a80:	00005909 	.word	0x00005909
    5a84:	0000a394 	.word	0x0000a394

00005a88 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    5a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a8a:	46de      	mov	lr, fp
    5a8c:	4657      	mov	r7, sl
    5a8e:	464e      	mov	r6, r9
    5a90:	4645      	mov	r5, r8
    5a92:	b5e0      	push	{r5, r6, r7, lr}
    5a94:	b091      	sub	sp, #68	; 0x44
    5a96:	9001      	str	r0, [sp, #4]
    5a98:	000c      	movs	r4, r1
    5a9a:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5a9c:	0008      	movs	r0, r1
    5a9e:	4bc3      	ldr	r3, [pc, #780]	; (5dac <tcc_init+0x324>)
    5aa0:	4798      	blx	r3
    5aa2:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5aa4:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    5aa6:	48c2      	ldr	r0, [pc, #776]	; (5db0 <tcc_init+0x328>)
    5aa8:	6a02      	ldr	r2, [r0, #32]
    5aaa:	009e      	lsls	r6, r3, #2
    5aac:	4fc1      	ldr	r7, [pc, #772]	; (5db4 <tcc_init+0x32c>)
    5aae:	59f7      	ldr	r7, [r6, r7]
    5ab0:	433a      	orrs	r2, r7
    5ab2:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    5ab4:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    5ab6:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    5ab8:	0792      	lsls	r2, r2, #30
    5aba:	d506      	bpl.n	5aca <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    5abc:	b011      	add	sp, #68	; 0x44
    5abe:	bc3c      	pop	{r2, r3, r4, r5}
    5ac0:	4690      	mov	r8, r2
    5ac2:	4699      	mov	r9, r3
    5ac4:	46a2      	mov	sl, r4
    5ac6:	46ab      	mov	fp, r5
    5ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    5aca:	6822      	ldr	r2, [r4, #0]
    5acc:	2701      	movs	r7, #1
    5ace:	4017      	ands	r7, r2
    5ad0:	d1f4      	bne.n	5abc <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    5ad2:	48b9      	ldr	r0, [pc, #740]	; (5db8 <tcc_init+0x330>)
    5ad4:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    5ad6:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    5ad8:	682e      	ldr	r6, [r5, #0]
    5ada:	42b2      	cmp	r2, r6
    5adc:	d3ee      	bcc.n	5abc <tcc_init+0x34>
		|| (config->counter.period > count_max)
    5ade:	686e      	ldr	r6, [r5, #4]
    5ae0:	42b2      	cmp	r2, r6
    5ae2:	d3eb      	bcc.n	5abc <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    5ae4:	69e8      	ldr	r0, [r5, #28]
    5ae6:	4282      	cmp	r2, r0
    5ae8:	d200      	bcs.n	5aec <tcc_init+0x64>
    5aea:	e1b9      	b.n	5e60 <tcc_init+0x3d8>
    5aec:	6a28      	ldr	r0, [r5, #32]
    5aee:	4282      	cmp	r2, r0
    5af0:	d200      	bcs.n	5af4 <tcc_init+0x6c>
    5af2:	e1b7      	b.n	5e64 <tcc_init+0x3dc>
    5af4:	6a68      	ldr	r0, [r5, #36]	; 0x24
    5af6:	4282      	cmp	r2, r0
    5af8:	d200      	bcs.n	5afc <tcc_init+0x74>
    5afa:	e1b5      	b.n	5e68 <tcc_init+0x3e0>
    5afc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5afe:	4282      	cmp	r2, r0
    5b00:	d200      	bcs.n	5b04 <tcc_init+0x7c>
    5b02:	e1b3      	b.n	5e6c <tcc_init+0x3e4>
    5b04:	2298      	movs	r2, #152	; 0x98
    5b06:	4694      	mov	ip, r2
    5b08:	44ac      	add	ip, r5
    5b0a:	4662      	mov	r2, ip
    5b0c:	9208      	str	r2, [sp, #32]
    5b0e:	2000      	movs	r0, #0
    5b10:	e003      	b.n	5b1a <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5b12:	3001      	adds	r0, #1
    5b14:	3201      	adds	r2, #1
    5b16:	2808      	cmp	r0, #8
    5b18:	d008      	beq.n	5b2c <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    5b1a:	7816      	ldrb	r6, [r2, #0]
    5b1c:	2e00      	cmp	r6, #0
    5b1e:	d0f8      	beq.n	5b12 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    5b20:	4ea6      	ldr	r6, [pc, #664]	; (5dbc <tcc_init+0x334>)
    5b22:	5c76      	ldrb	r6, [r6, r1]
    5b24:	4286      	cmp	r6, r0
    5b26:	dcf4      	bgt.n	5b12 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    5b28:	2017      	movs	r0, #23
    5b2a:	e7c7      	b.n	5abc <tcc_init+0x34>
    5b2c:	2200      	movs	r2, #0
    5b2e:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    5b30:	2080      	movs	r0, #128	; 0x80
    5b32:	0440      	lsls	r0, r0, #17
    5b34:	4684      	mov	ip, r0
    5b36:	e002      	b.n	5b3e <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    5b38:	3201      	adds	r2, #1
    5b3a:	2a04      	cmp	r2, #4
    5b3c:	d00e      	beq.n	5b5c <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    5b3e:	18a8      	adds	r0, r5, r2
    5b40:	7c00      	ldrb	r0, [r0, #16]
    5b42:	2801      	cmp	r0, #1
    5b44:	d1f8      	bne.n	5b38 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    5b46:	489e      	ldr	r0, [pc, #632]	; (5dc0 <tcc_init+0x338>)
    5b48:	5c40      	ldrb	r0, [r0, r1]
    5b4a:	4290      	cmp	r0, r2
    5b4c:	da00      	bge.n	5b50 <tcc_init+0xc8>
    5b4e:	e18f      	b.n	5e70 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    5b50:	4660      	mov	r0, ip
    5b52:	4090      	lsls	r0, r2
    5b54:	9e02      	ldr	r6, [sp, #8]
    5b56:	4306      	orrs	r6, r0
    5b58:	9602      	str	r6, [sp, #8]
    5b5a:	e7ed      	b.n	5b38 <tcc_init+0xb0>
	if (config->run_in_standby) {
    5b5c:	329d      	adds	r2, #157	; 0x9d
    5b5e:	5caa      	ldrb	r2, [r5, r2]
    5b60:	2a00      	cmp	r2, #0
    5b62:	d004      	beq.n	5b6e <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    5b64:	2280      	movs	r2, #128	; 0x80
    5b66:	0112      	lsls	r2, r2, #4
    5b68:	9902      	ldr	r1, [sp, #8]
    5b6a:	4311      	orrs	r1, r2
    5b6c:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    5b6e:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    5b70:	1e51      	subs	r1, r2, #1
    5b72:	418a      	sbcs	r2, r1
    5b74:	0092      	lsls	r2, r2, #2
    5b76:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    5b78:	7a6a      	ldrb	r2, [r5, #9]
    5b7a:	2a01      	cmp	r2, #1
    5b7c:	d022      	beq.n	5bc4 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    5b7e:	4a90      	ldr	r2, [pc, #576]	; (5dc0 <tcc_init+0x338>)
    5b80:	5cd2      	ldrb	r2, [r2, r3]
    5b82:	0011      	movs	r1, r2
    5b84:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    5b86:	2235      	movs	r2, #53	; 0x35
    5b88:	5caa      	ldrb	r2, [r5, r2]
    5b8a:	428a      	cmp	r2, r1
    5b8c:	d300      	bcc.n	5b90 <tcc_init+0x108>
    5b8e:	e179      	b.n	5e84 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    5b90:	212c      	movs	r1, #44	; 0x2c
    5b92:	5c69      	ldrb	r1, [r5, r1]
    5b94:	290f      	cmp	r1, #15
    5b96:	d900      	bls.n	5b9a <tcc_init+0x112>
    5b98:	e174      	b.n	5e84 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    5b9a:	7b28      	ldrb	r0, [r5, #12]
    5b9c:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    5b9e:	7ae8      	ldrb	r0, [r5, #11]
    5ba0:	900b      	str	r0, [sp, #44]	; 0x2c
    5ba2:	202d      	movs	r0, #45	; 0x2d
    5ba4:	4682      	mov	sl, r0
    5ba6:	44aa      	add	sl, r5
    5ba8:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5baa:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    5bac:	ae0e      	add	r6, sp, #56	; 0x38
    5bae:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    5bb0:	26c0      	movs	r6, #192	; 0xc0
    5bb2:	0136      	lsls	r6, r6, #4
    5bb4:	46b1      	mov	r9, r6
    5bb6:	4684      	mov	ip, r0
    5bb8:	46a0      	mov	r8, r4
    5bba:	0028      	movs	r0, r5
    5bbc:	4655      	mov	r5, sl
    5bbe:	9309      	str	r3, [sp, #36]	; 0x24
    5bc0:	4682      	mov	sl, r0
    5bc2:	e035      	b.n	5c30 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    5bc4:	9906      	ldr	r1, [sp, #24]
    5bc6:	4311      	orrs	r1, r2
    5bc8:	9106      	str	r1, [sp, #24]
    5bca:	e7d8      	b.n	5b7e <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    5bcc:	0292      	lsls	r2, r2, #10
    5bce:	464f      	mov	r7, r9
    5bd0:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5bd2:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    5bd4:	7919      	ldrb	r1, [r3, #4]
    5bd6:	468b      	mov	fp, r1
    5bd8:	2103      	movs	r1, #3
    5bda:	465f      	mov	r7, fp
    5bdc:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5bde:	430a      	orrs	r2, r1
    5be0:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    5be2:	795a      	ldrb	r2, [r3, #5]
    5be4:	0152      	lsls	r2, r2, #5
    5be6:	2160      	movs	r1, #96	; 0x60
    5be8:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5bea:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    5bec:	7999      	ldrb	r1, [r3, #6]
    5bee:	0209      	lsls	r1, r1, #8
    5bf0:	26c0      	movs	r6, #192	; 0xc0
    5bf2:	00b6      	lsls	r6, r6, #2
    5bf4:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5bf6:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    5bf8:	79da      	ldrb	r2, [r3, #7]
    5bfa:	0312      	lsls	r2, r2, #12
    5bfc:	21e0      	movs	r1, #224	; 0xe0
    5bfe:	01c9      	lsls	r1, r1, #7
    5c00:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5c02:	4316      	orrs	r6, r2
    5c04:	4334      	orrs	r4, r6
    5c06:	9a03      	ldr	r2, [sp, #12]
    5c08:	4314      	orrs	r4, r2
    5c0a:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    5c0c:	4662      	mov	r2, ip
    5c0e:	9907      	ldr	r1, [sp, #28]
    5c10:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    5c12:	2a04      	cmp	r2, #4
    5c14:	d02a      	beq.n	5c6c <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    5c16:	7c9a      	ldrb	r2, [r3, #18]
    5c18:	9905      	ldr	r1, [sp, #20]
    5c1a:	4291      	cmp	r1, r2
    5c1c:	d800      	bhi.n	5c20 <tcc_init+0x198>
    5c1e:	e131      	b.n	5e84 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    5c20:	7a59      	ldrb	r1, [r3, #9]
    5c22:	350a      	adds	r5, #10
    5c24:	2304      	movs	r3, #4
    5c26:	469b      	mov	fp, r3
    5c28:	44dc      	add	ip, fp
    5c2a:	290f      	cmp	r1, #15
    5c2c:	d900      	bls.n	5c30 <tcc_init+0x1a8>
    5c2e:	e129      	b.n	5e84 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5c30:	0609      	lsls	r1, r1, #24
    5c32:	23f0      	movs	r3, #240	; 0xf0
    5c34:	051b      	lsls	r3, r3, #20
    5c36:	4019      	ands	r1, r3
    5c38:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    5c3a:	782e      	ldrb	r6, [r5, #0]
    5c3c:	0436      	lsls	r6, r6, #16
    5c3e:	20ff      	movs	r0, #255	; 0xff
    5c40:	0400      	lsls	r0, r0, #16
    5c42:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5c44:	7868      	ldrb	r0, [r5, #1]
    5c46:	2480      	movs	r4, #128	; 0x80
    5c48:	2800      	cmp	r0, #0
    5c4a:	d100      	bne.n	5c4e <tcc_init+0x1c6>
    5c4c:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    5c4e:	7898      	ldrb	r0, [r3, #2]
    5c50:	2708      	movs	r7, #8
    5c52:	9703      	str	r7, [sp, #12]
    5c54:	2800      	cmp	r0, #0
    5c56:	d101      	bne.n	5c5c <tcc_init+0x1d4>
    5c58:	9804      	ldr	r0, [sp, #16]
    5c5a:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    5c5c:	78d8      	ldrb	r0, [r3, #3]
    5c5e:	4683      	mov	fp, r0
    5c60:	2010      	movs	r0, #16
    5c62:	465f      	mov	r7, fp
    5c64:	2f00      	cmp	r7, #0
    5c66:	d1b1      	bne.n	5bcc <tcc_init+0x144>
    5c68:	9804      	ldr	r0, [sp, #16]
    5c6a:	e7af      	b.n	5bcc <tcc_init+0x144>
    5c6c:	4644      	mov	r4, r8
    5c6e:	4655      	mov	r5, sl
    5c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    5c72:	4a52      	ldr	r2, [pc, #328]	; (5dbc <tcc_init+0x334>)
    5c74:	5cd2      	ldrb	r2, [r2, r3]
    5c76:	4691      	mov	r9, r2
    5c78:	4651      	mov	r1, sl
    5c7a:	3150      	adds	r1, #80	; 0x50
    5c7c:	4650      	mov	r0, sl
    5c7e:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    5c80:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5c82:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5c84:	2601      	movs	r6, #1
    5c86:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    5c88:	2602      	movs	r6, #2
    5c8a:	36ff      	adds	r6, #255	; 0xff
    5c8c:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5c8e:	2680      	movs	r6, #128	; 0x80
    5c90:	0276      	lsls	r6, r6, #9
    5c92:	46b0      	mov	r8, r6
    5c94:	46a4      	mov	ip, r4
    5c96:	001c      	movs	r4, r3
    5c98:	464b      	mov	r3, r9
    5c9a:	e00f      	b.n	5cbc <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5c9c:	7806      	ldrb	r6, [r0, #0]
    5c9e:	2e00      	cmp	r6, #0
    5ca0:	d007      	beq.n	5cb2 <tcc_init+0x22a>
			if (i >= ow_num) {
    5ca2:	4293      	cmp	r3, r2
    5ca4:	d800      	bhi.n	5ca8 <tcc_init+0x220>
    5ca6:	e0e7      	b.n	5e78 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    5ca8:	2e02      	cmp	r6, #2
    5caa:	d014      	beq.n	5cd6 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5cac:	4656      	mov	r6, sl
    5cae:	4096      	lsls	r6, r2
    5cb0:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5cb2:	3201      	adds	r2, #1
    5cb4:	3101      	adds	r1, #1
    5cb6:	3002      	adds	r0, #2
    5cb8:	2a08      	cmp	r2, #8
    5cba:	d010      	beq.n	5cde <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    5cbc:	780e      	ldrb	r6, [r1, #0]
    5cbe:	2e00      	cmp	r6, #0
    5cc0:	d0ec      	beq.n	5c9c <tcc_init+0x214>
			if (i >= ow_num) {
    5cc2:	4293      	cmp	r3, r2
    5cc4:	d800      	bhi.n	5cc8 <tcc_init+0x240>
    5cc6:	e0d5      	b.n	5e74 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    5cc8:	4646      	mov	r6, r8
    5cca:	4096      	lsls	r6, r2
    5ccc:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5cce:	7806      	ldrb	r6, [r0, #0]
    5cd0:	2e00      	cmp	r6, #0
    5cd2:	d1e9      	bne.n	5ca8 <tcc_init+0x220>
    5cd4:	e7ed      	b.n	5cb2 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    5cd6:	465e      	mov	r6, fp
    5cd8:	4096      	lsls	r6, r2
    5cda:	4337      	orrs	r7, r6
    5cdc:	e7e9      	b.n	5cb2 <tcc_init+0x22a>
    5cde:	4699      	mov	r9, r3
    5ce0:	0023      	movs	r3, r4
    5ce2:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5ce4:	7e6a      	ldrb	r2, [r5, #25]
    5ce6:	0112      	lsls	r2, r2, #4
    5ce8:	2130      	movs	r1, #48	; 0x30
    5cea:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    5cec:	7e28      	ldrb	r0, [r5, #24]
    5cee:	2207      	movs	r2, #7
    5cf0:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5cf2:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5cf4:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    5cf6:	2080      	movs	r0, #128	; 0x80
    5cf8:	0240      	lsls	r0, r0, #9
    5cfa:	000e      	movs	r6, r1
    5cfc:	e002      	b.n	5d04 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5cfe:	3201      	adds	r2, #1
    5d00:	2a04      	cmp	r2, #4
    5d02:	d00b      	beq.n	5d1c <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    5d04:	18a9      	adds	r1, r5, r2
    5d06:	7d09      	ldrb	r1, [r1, #20]
    5d08:	2900      	cmp	r1, #0
    5d0a:	d0f8      	beq.n	5cfe <tcc_init+0x276>
			if (n >= cc_num) {
    5d0c:	9905      	ldr	r1, [sp, #20]
    5d0e:	4291      	cmp	r1, r2
    5d10:	dc00      	bgt.n	5d14 <tcc_init+0x28c>
    5d12:	e0b3      	b.n	5e7c <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    5d14:	0001      	movs	r1, r0
    5d16:	4091      	lsls	r1, r2
    5d18:	430e      	orrs	r6, r1
    5d1a:	e7f0      	b.n	5cfe <tcc_init+0x276>
    5d1c:	46b2      	mov	sl, r6
    5d1e:	9801      	ldr	r0, [sp, #4]
    5d20:	0002      	movs	r2, r0
    5d22:	3204      	adds	r2, #4
    5d24:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    5d26:	2100      	movs	r1, #0
    5d28:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5d2a:	4282      	cmp	r2, r0
    5d2c:	d1fc      	bne.n	5d28 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    5d2e:	2200      	movs	r2, #0
    5d30:	9801      	ldr	r0, [sp, #4]
    5d32:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5d34:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5d36:	0099      	lsls	r1, r3, #2
    5d38:	4a22      	ldr	r2, [pc, #136]	; (5dc4 <tcc_init+0x33c>)
    5d3a:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    5d3c:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    5d3e:	22a0      	movs	r2, #160	; 0xa0
    5d40:	5ca9      	ldrb	r1, [r5, r2]
    5d42:	3a64      	subs	r2, #100	; 0x64
    5d44:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    5d46:	a90d      	add	r1, sp, #52	; 0x34
    5d48:	7aaa      	ldrb	r2, [r5, #10]
    5d4a:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    5d4c:	4a1e      	ldr	r2, [pc, #120]	; (5dc8 <tcc_init+0x340>)
    5d4e:	5cd6      	ldrb	r6, [r2, r3]
    5d50:	0030      	movs	r0, r6
    5d52:	4b1e      	ldr	r3, [pc, #120]	; (5dcc <tcc_init+0x344>)
    5d54:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    5d56:	0030      	movs	r0, r6
    5d58:	4b1d      	ldr	r3, [pc, #116]	; (5dd0 <tcc_init+0x348>)
    5d5a:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5d5c:	464b      	mov	r3, r9
    5d5e:	2b00      	cmp	r3, #0
    5d60:	dd3c      	ble.n	5ddc <tcc_init+0x354>
    5d62:	002e      	movs	r6, r5
    5d64:	3658      	adds	r6, #88	; 0x58
    5d66:	3398      	adds	r3, #152	; 0x98
    5d68:	4698      	mov	r8, r3
    5d6a:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5d6c:	2301      	movs	r3, #1
    5d6e:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    5d70:	46ab      	mov	fp, r5
    5d72:	4645      	mov	r5, r8
    5d74:	46a0      	mov	r8, r4
    5d76:	9c08      	ldr	r4, [sp, #32]
    5d78:	e003      	b.n	5d82 <tcc_init+0x2fa>
    5d7a:	3401      	adds	r4, #1
    5d7c:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5d7e:	42ac      	cmp	r4, r5
    5d80:	d02a      	beq.n	5dd8 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    5d82:	7823      	ldrb	r3, [r4, #0]
    5d84:	2b00      	cmp	r3, #0
    5d86:	d0f8      	beq.n	5d7a <tcc_init+0x2f2>
    5d88:	ab0c      	add	r3, sp, #48	; 0x30
    5d8a:	464a      	mov	r2, r9
    5d8c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5d8e:	2300      	movs	r3, #0
    5d90:	aa0c      	add	r2, sp, #48	; 0x30
    5d92:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    5d94:	0013      	movs	r3, r2
    5d96:	2220      	movs	r2, #32
    5d98:	18b2      	adds	r2, r6, r2
    5d9a:	7812      	ldrb	r2, [r2, #0]
    5d9c:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5d9e:	464a      	mov	r2, r9
    5da0:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    5da2:	7830      	ldrb	r0, [r6, #0]
    5da4:	0019      	movs	r1, r3
    5da6:	4b0b      	ldr	r3, [pc, #44]	; (5dd4 <tcc_init+0x34c>)
    5da8:	4798      	blx	r3
    5daa:	e7e6      	b.n	5d7a <tcc_init+0x2f2>
    5dac:	00005909 	.word	0x00005909
    5db0:	40000400 	.word	0x40000400
    5db4:	0000a380 	.word	0x0000a380
    5db8:	0000a394 	.word	0x0000a394
    5dbc:	0000a3a0 	.word	0x0000a3a0
    5dc0:	0000a38c 	.word	0x0000a38c
    5dc4:	2000044c 	.word	0x2000044c
    5dc8:	0000a390 	.word	0x0000a390
    5dcc:	000057b1 	.word	0x000057b1
    5dd0:	00005725 	.word	0x00005725
    5dd4:	000058a9 	.word	0x000058a9
    5dd8:	4644      	mov	r4, r8
    5dda:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    5ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5dde:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    5de0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5de2:	0212      	lsls	r2, r2, #8
    5de4:	4313      	orrs	r3, r2
    5de6:	9a02      	ldr	r2, [sp, #8]
    5de8:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    5dea:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5dec:	2204      	movs	r2, #4
    5dee:	68a3      	ldr	r3, [r4, #8]
    5df0:	421a      	tst	r2, r3
    5df2:	d1fc      	bne.n	5dee <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    5df4:	23ff      	movs	r3, #255	; 0xff
    5df6:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5df8:	2204      	movs	r2, #4
    5dfa:	68a3      	ldr	r3, [r4, #8]
    5dfc:	421a      	tst	r2, r3
    5dfe:	d1fc      	bne.n	5dfa <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    5e00:	466b      	mov	r3, sp
    5e02:	7e1b      	ldrb	r3, [r3, #24]
    5e04:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    5e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5e08:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    5e0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5e0c:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    5e0e:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    5e10:	4a1d      	ldr	r2, [pc, #116]	; (5e88 <tcc_init+0x400>)
    5e12:	68a3      	ldr	r3, [r4, #8]
    5e14:	4213      	tst	r3, r2
    5e16:	d1fc      	bne.n	5e12 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    5e18:	4653      	mov	r3, sl
    5e1a:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    5e1c:	2210      	movs	r2, #16
    5e1e:	68a3      	ldr	r3, [r4, #8]
    5e20:	421a      	tst	r2, r3
    5e22:	d1fc      	bne.n	5e1e <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    5e24:	682b      	ldr	r3, [r5, #0]
    5e26:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    5e28:	4a18      	ldr	r2, [pc, #96]	; (5e8c <tcc_init+0x404>)
    5e2a:	68a3      	ldr	r3, [r4, #8]
    5e2c:	4213      	tst	r3, r2
    5e2e:	d1fc      	bne.n	5e2a <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    5e30:	686b      	ldr	r3, [r5, #4]
    5e32:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5e34:	9805      	ldr	r0, [sp, #20]
    5e36:	2800      	cmp	r0, #0
    5e38:	dd22      	ble.n	5e80 <tcc_init+0x3f8>
    5e3a:	351c      	adds	r5, #28
    5e3c:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    5e3e:	4e14      	ldr	r6, [pc, #80]	; (5e90 <tcc_init+0x408>)
    5e40:	0032      	movs	r2, r6
    5e42:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    5e44:	68a3      	ldr	r3, [r4, #8]
    5e46:	421a      	tst	r2, r3
    5e48:	d1fc      	bne.n	5e44 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    5e4a:	cd04      	ldmia	r5!, {r2}
    5e4c:	000b      	movs	r3, r1
    5e4e:	3310      	adds	r3, #16
    5e50:	009b      	lsls	r3, r3, #2
    5e52:	18e3      	adds	r3, r4, r3
    5e54:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5e56:	3101      	adds	r1, #1
    5e58:	4288      	cmp	r0, r1
    5e5a:	dcf1      	bgt.n	5e40 <tcc_init+0x3b8>
	return STATUS_OK;
    5e5c:	2000      	movs	r0, #0
    5e5e:	e62d      	b.n	5abc <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    5e60:	2017      	movs	r0, #23
    5e62:	e62b      	b.n	5abc <tcc_init+0x34>
    5e64:	2017      	movs	r0, #23
    5e66:	e629      	b.n	5abc <tcc_init+0x34>
    5e68:	2017      	movs	r0, #23
    5e6a:	e627      	b.n	5abc <tcc_init+0x34>
    5e6c:	2017      	movs	r0, #23
    5e6e:	e625      	b.n	5abc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5e70:	2017      	movs	r0, #23
    5e72:	e623      	b.n	5abc <tcc_init+0x34>
			if (i >= ow_num) {
    5e74:	2017      	movs	r0, #23
    5e76:	e621      	b.n	5abc <tcc_init+0x34>
			if (i >= ow_num) {
    5e78:	2017      	movs	r0, #23
    5e7a:	e61f      	b.n	5abc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5e7c:	2017      	movs	r0, #23
    5e7e:	e61d      	b.n	5abc <tcc_init+0x34>
	return STATUS_OK;
    5e80:	2000      	movs	r0, #0
    5e82:	e61b      	b.n	5abc <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5e84:	2017      	movs	r0, #23
    5e86:	e619      	b.n	5abc <tcc_init+0x34>
    5e88:	00020040 	.word	0x00020040
    5e8c:	00040080 	.word	0x00040080
    5e90:	00080100 	.word	0x00080100

00005e94 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5e94:	0092      	lsls	r2, r2, #2
    5e96:	1883      	adds	r3, r0, r2
    5e98:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    5e9a:	4b03      	ldr	r3, [pc, #12]	; (5ea8 <tcc_register_callback+0x14>)
    5e9c:	58d3      	ldr	r3, [r2, r3]
    5e9e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    5ea0:	4313      	orrs	r3, r2
    5ea2:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    5ea4:	2000      	movs	r0, #0
    5ea6:	4770      	bx	lr
    5ea8:	0000a3a4 	.word	0x0000a3a4

00005eac <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    5eac:	b570      	push	{r4, r5, r6, lr}
    5eae:	0004      	movs	r4, r0
    5eb0:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    5eb2:	6800      	ldr	r0, [r0, #0]
    5eb4:	4b09      	ldr	r3, [pc, #36]	; (5edc <tcc_enable_callback+0x30>)
    5eb6:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    5eb8:	4b09      	ldr	r3, [pc, #36]	; (5ee0 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5eba:	5c1b      	ldrb	r3, [r3, r0]
    5ebc:	221f      	movs	r2, #31
    5ebe:	401a      	ands	r2, r3
    5ec0:	2301      	movs	r3, #1
    5ec2:	4093      	lsls	r3, r2
    5ec4:	4a07      	ldr	r2, [pc, #28]	; (5ee4 <tcc_enable_callback+0x38>)
    5ec6:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    5ec8:	00ad      	lsls	r5, r5, #2
    5eca:	4b07      	ldr	r3, [pc, #28]	; (5ee8 <tcc_enable_callback+0x3c>)
    5ecc:	58ea      	ldr	r2, [r5, r3]
    5ece:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5ed0:	4313      	orrs	r3, r2
    5ed2:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    5ed4:	6823      	ldr	r3, [r4, #0]
    5ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
    5ed8:	bd70      	pop	{r4, r5, r6, pc}
    5eda:	46c0      	nop			; (mov r8, r8)
    5edc:	00005909 	.word	0x00005909
    5ee0:	0000a3d4 	.word	0x0000a3d4
    5ee4:	e000e100 	.word	0xe000e100
    5ee8:	0000a3a4 	.word	0x0000a3a4

00005eec <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    5eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    5eee:	46c6      	mov	lr, r8
    5ef0:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    5ef2:	0080      	lsls	r0, r0, #2
    5ef4:	4b0e      	ldr	r3, [pc, #56]	; (5f30 <_tcc_interrupt_handler+0x44>)
    5ef6:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    5ef8:	683b      	ldr	r3, [r7, #0]
    5efa:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    5efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    5f00:	4013      	ands	r3, r2
    5f02:	401e      	ands	r6, r3
    5f04:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    5f06:	4b0b      	ldr	r3, [pc, #44]	; (5f34 <_tcc_interrupt_handler+0x48>)
    5f08:	4698      	mov	r8, r3
    5f0a:	e002      	b.n	5f12 <_tcc_interrupt_handler+0x26>
    5f0c:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5f0e:	2c30      	cmp	r4, #48	; 0x30
    5f10:	d00a      	beq.n	5f28 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    5f12:	4643      	mov	r3, r8
    5f14:	58e5      	ldr	r5, [r4, r3]
    5f16:	4235      	tst	r5, r6
    5f18:	d0f8      	beq.n	5f0c <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    5f1a:	193b      	adds	r3, r7, r4
    5f1c:	685b      	ldr	r3, [r3, #4]
    5f1e:	0038      	movs	r0, r7
    5f20:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    5f22:	683b      	ldr	r3, [r7, #0]
    5f24:	62dd      	str	r5, [r3, #44]	; 0x2c
    5f26:	e7f1      	b.n	5f0c <_tcc_interrupt_handler+0x20>
		}
	}
}
    5f28:	bc04      	pop	{r2}
    5f2a:	4690      	mov	r8, r2
    5f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f2e:	46c0      	nop			; (mov r8, r8)
    5f30:	2000044c 	.word	0x2000044c
    5f34:	0000a3a4 	.word	0x0000a3a4

00005f38 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    5f38:	b510      	push	{r4, lr}
    5f3a:	2000      	movs	r0, #0
    5f3c:	4b01      	ldr	r3, [pc, #4]	; (5f44 <TCC0_Handler+0xc>)
    5f3e:	4798      	blx	r3
    5f40:	bd10      	pop	{r4, pc}
    5f42:	46c0      	nop			; (mov r8, r8)
    5f44:	00005eed 	.word	0x00005eed

00005f48 <TCC1_Handler>:
    5f48:	b510      	push	{r4, lr}
    5f4a:	2001      	movs	r0, #1
    5f4c:	4b01      	ldr	r3, [pc, #4]	; (5f54 <TCC1_Handler+0xc>)
    5f4e:	4798      	blx	r3
    5f50:	bd10      	pop	{r4, pc}
    5f52:	46c0      	nop			; (mov r8, r8)
    5f54:	00005eed 	.word	0x00005eed

00005f58 <TCC2_Handler>:
    5f58:	b510      	push	{r4, lr}
    5f5a:	2002      	movs	r0, #2
    5f5c:	4b01      	ldr	r3, [pc, #4]	; (5f64 <TCC2_Handler+0xc>)
    5f5e:	4798      	blx	r3
    5f60:	bd10      	pop	{r4, pc}
    5f62:	46c0      	nop			; (mov r8, r8)
    5f64:	00005eed 	.word	0x00005eed

00005f68 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5f68:	e7fe      	b.n	5f68 <Dummy_Handler>
	...

00005f6c <Reset_Handler>:
{
    5f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    5f6e:	4a2a      	ldr	r2, [pc, #168]	; (6018 <Reset_Handler+0xac>)
    5f70:	4b2a      	ldr	r3, [pc, #168]	; (601c <Reset_Handler+0xb0>)
    5f72:	429a      	cmp	r2, r3
    5f74:	d011      	beq.n	5f9a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    5f76:	001a      	movs	r2, r3
    5f78:	4b29      	ldr	r3, [pc, #164]	; (6020 <Reset_Handler+0xb4>)
    5f7a:	429a      	cmp	r2, r3
    5f7c:	d20d      	bcs.n	5f9a <Reset_Handler+0x2e>
    5f7e:	4a29      	ldr	r2, [pc, #164]	; (6024 <Reset_Handler+0xb8>)
    5f80:	3303      	adds	r3, #3
    5f82:	1a9b      	subs	r3, r3, r2
    5f84:	089b      	lsrs	r3, r3, #2
    5f86:	3301      	adds	r3, #1
    5f88:	009b      	lsls	r3, r3, #2
    5f8a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    5f8c:	4823      	ldr	r0, [pc, #140]	; (601c <Reset_Handler+0xb0>)
    5f8e:	4922      	ldr	r1, [pc, #136]	; (6018 <Reset_Handler+0xac>)
    5f90:	588c      	ldr	r4, [r1, r2]
    5f92:	5084      	str	r4, [r0, r2]
    5f94:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    5f96:	429a      	cmp	r2, r3
    5f98:	d1fa      	bne.n	5f90 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    5f9a:	4a23      	ldr	r2, [pc, #140]	; (6028 <Reset_Handler+0xbc>)
    5f9c:	4b23      	ldr	r3, [pc, #140]	; (602c <Reset_Handler+0xc0>)
    5f9e:	429a      	cmp	r2, r3
    5fa0:	d20a      	bcs.n	5fb8 <Reset_Handler+0x4c>
    5fa2:	43d3      	mvns	r3, r2
    5fa4:	4921      	ldr	r1, [pc, #132]	; (602c <Reset_Handler+0xc0>)
    5fa6:	185b      	adds	r3, r3, r1
    5fa8:	2103      	movs	r1, #3
    5faa:	438b      	bics	r3, r1
    5fac:	3304      	adds	r3, #4
    5fae:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    5fb0:	2100      	movs	r1, #0
    5fb2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    5fb4:	4293      	cmp	r3, r2
    5fb6:	d1fc      	bne.n	5fb2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5fb8:	4a1d      	ldr	r2, [pc, #116]	; (6030 <Reset_Handler+0xc4>)
    5fba:	21ff      	movs	r1, #255	; 0xff
    5fbc:	4b1d      	ldr	r3, [pc, #116]	; (6034 <Reset_Handler+0xc8>)
    5fbe:	438b      	bics	r3, r1
    5fc0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5fc2:	39fd      	subs	r1, #253	; 0xfd
    5fc4:	2390      	movs	r3, #144	; 0x90
    5fc6:	005b      	lsls	r3, r3, #1
    5fc8:	4a1b      	ldr	r2, [pc, #108]	; (6038 <Reset_Handler+0xcc>)
    5fca:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5fcc:	4a1b      	ldr	r2, [pc, #108]	; (603c <Reset_Handler+0xd0>)
    5fce:	78d3      	ldrb	r3, [r2, #3]
    5fd0:	2503      	movs	r5, #3
    5fd2:	43ab      	bics	r3, r5
    5fd4:	2402      	movs	r4, #2
    5fd6:	4323      	orrs	r3, r4
    5fd8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5fda:	78d3      	ldrb	r3, [r2, #3]
    5fdc:	270c      	movs	r7, #12
    5fde:	43bb      	bics	r3, r7
    5fe0:	2608      	movs	r6, #8
    5fe2:	4333      	orrs	r3, r6
    5fe4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    5fe6:	4b16      	ldr	r3, [pc, #88]	; (6040 <Reset_Handler+0xd4>)
    5fe8:	7b98      	ldrb	r0, [r3, #14]
    5fea:	2230      	movs	r2, #48	; 0x30
    5fec:	4390      	bics	r0, r2
    5fee:	2220      	movs	r2, #32
    5ff0:	4310      	orrs	r0, r2
    5ff2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5ff4:	7b99      	ldrb	r1, [r3, #14]
    5ff6:	43b9      	bics	r1, r7
    5ff8:	4331      	orrs	r1, r6
    5ffa:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5ffc:	7b9a      	ldrb	r2, [r3, #14]
    5ffe:	43aa      	bics	r2, r5
    6000:	4322      	orrs	r2, r4
    6002:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6004:	4a0f      	ldr	r2, [pc, #60]	; (6044 <Reset_Handler+0xd8>)
    6006:	6853      	ldr	r3, [r2, #4]
    6008:	2180      	movs	r1, #128	; 0x80
    600a:	430b      	orrs	r3, r1
    600c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    600e:	4b0e      	ldr	r3, [pc, #56]	; (6048 <Reset_Handler+0xdc>)
    6010:	4798      	blx	r3
        main();
    6012:	4b0e      	ldr	r3, [pc, #56]	; (604c <Reset_Handler+0xe0>)
    6014:	4798      	blx	r3
    6016:	e7fe      	b.n	6016 <Reset_Handler+0xaa>
    6018:	0000aba0 	.word	0x0000aba0
    601c:	20000000 	.word	0x20000000
    6020:	200001e0 	.word	0x200001e0
    6024:	20000004 	.word	0x20000004
    6028:	200001e0 	.word	0x200001e0
    602c:	200005ec 	.word	0x200005ec
    6030:	e000ed00 	.word	0xe000ed00
    6034:	00000000 	.word	0x00000000
    6038:	41007000 	.word	0x41007000
    603c:	41005000 	.word	0x41005000
    6040:	41004800 	.word	0x41004800
    6044:	41004000 	.word	0x41004000
    6048:	00007ce5 	.word	0x00007ce5
    604c:	00007675 	.word	0x00007675

00006050 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6050:	b5f0      	push	{r4, r5, r6, r7, lr}
    6052:	46c6      	mov	lr, r8
    6054:	b500      	push	{lr}
    6056:	000c      	movs	r4, r1
    6058:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    605a:	2800      	cmp	r0, #0
    605c:	d10f      	bne.n	607e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    605e:	2a00      	cmp	r2, #0
    6060:	dd11      	ble.n	6086 <_read+0x36>
    6062:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    6064:	4e09      	ldr	r6, [pc, #36]	; (608c <_read+0x3c>)
    6066:	4d0a      	ldr	r5, [pc, #40]	; (6090 <_read+0x40>)
    6068:	6830      	ldr	r0, [r6, #0]
    606a:	0021      	movs	r1, r4
    606c:	682b      	ldr	r3, [r5, #0]
    606e:	4798      	blx	r3
		ptr++;
    6070:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    6072:	42bc      	cmp	r4, r7
    6074:	d1f8      	bne.n	6068 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    6076:	4640      	mov	r0, r8
    6078:	bc04      	pop	{r2}
    607a:	4690      	mov	r8, r2
    607c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    607e:	2301      	movs	r3, #1
    6080:	425b      	negs	r3, r3
    6082:	4698      	mov	r8, r3
    6084:	e7f7      	b.n	6076 <_read+0x26>
	for (; len > 0; --len) {
    6086:	4680      	mov	r8, r0
    6088:	e7f5      	b.n	6076 <_read+0x26>
    608a:	46c0      	nop			; (mov r8, r8)
    608c:	20000460 	.word	0x20000460
    6090:	20000458 	.word	0x20000458

00006094 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6094:	b5f0      	push	{r4, r5, r6, r7, lr}
    6096:	46c6      	mov	lr, r8
    6098:	b500      	push	{lr}
    609a:	000e      	movs	r6, r1
    609c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    609e:	3801      	subs	r0, #1
    60a0:	2802      	cmp	r0, #2
    60a2:	d810      	bhi.n	60c6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    60a4:	2a00      	cmp	r2, #0
    60a6:	d011      	beq.n	60cc <_write+0x38>
    60a8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    60aa:	4b0c      	ldr	r3, [pc, #48]	; (60dc <_write+0x48>)
    60ac:	4698      	mov	r8, r3
    60ae:	4f0c      	ldr	r7, [pc, #48]	; (60e0 <_write+0x4c>)
    60b0:	4643      	mov	r3, r8
    60b2:	6818      	ldr	r0, [r3, #0]
    60b4:	5d31      	ldrb	r1, [r6, r4]
    60b6:	683b      	ldr	r3, [r7, #0]
    60b8:	4798      	blx	r3
    60ba:	2800      	cmp	r0, #0
    60bc:	db08      	blt.n	60d0 <_write+0x3c>
			return -1;
		}
		++nChars;
    60be:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    60c0:	42a5      	cmp	r5, r4
    60c2:	d1f5      	bne.n	60b0 <_write+0x1c>
    60c4:	e006      	b.n	60d4 <_write+0x40>
		return -1;
    60c6:	2401      	movs	r4, #1
    60c8:	4264      	negs	r4, r4
    60ca:	e003      	b.n	60d4 <_write+0x40>
	for (; len != 0; --len) {
    60cc:	0014      	movs	r4, r2
    60ce:	e001      	b.n	60d4 <_write+0x40>
			return -1;
    60d0:	2401      	movs	r4, #1
    60d2:	4264      	negs	r4, r4
	}
	return nChars;
}
    60d4:	0020      	movs	r0, r4
    60d6:	bc04      	pop	{r2}
    60d8:	4690      	mov	r8, r2
    60da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60dc:	20000460 	.word	0x20000460
    60e0:	2000045c 	.word	0x2000045c

000060e4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    60e4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    60e6:	4a06      	ldr	r2, [pc, #24]	; (6100 <_sbrk+0x1c>)
    60e8:	6812      	ldr	r2, [r2, #0]
    60ea:	2a00      	cmp	r2, #0
    60ec:	d004      	beq.n	60f8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    60ee:	4a04      	ldr	r2, [pc, #16]	; (6100 <_sbrk+0x1c>)
    60f0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    60f2:	18c3      	adds	r3, r0, r3
    60f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    60f6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    60f8:	4902      	ldr	r1, [pc, #8]	; (6104 <_sbrk+0x20>)
    60fa:	4a01      	ldr	r2, [pc, #4]	; (6100 <_sbrk+0x1c>)
    60fc:	6011      	str	r1, [r2, #0]
    60fe:	e7f6      	b.n	60ee <_sbrk+0xa>
    6100:	20000250 	.word	0x20000250
    6104:	200025f0 	.word	0x200025f0

00006108 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    6108:	2001      	movs	r0, #1
    610a:	4240      	negs	r0, r0
    610c:	4770      	bx	lr

0000610e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    610e:	2380      	movs	r3, #128	; 0x80
    6110:	019b      	lsls	r3, r3, #6
    6112:	604b      	str	r3, [r1, #4]

	return 0;
}
    6114:	2000      	movs	r0, #0
    6116:	4770      	bx	lr

00006118 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    6118:	2001      	movs	r0, #1
    611a:	4770      	bx	lr

0000611c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    611c:	2000      	movs	r0, #0
    611e:	4770      	bx	lr

00006120 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    6120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6122:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    6124:	2041      	movs	r0, #65	; 0x41
    6126:	5c23      	ldrb	r3, [r4, r0]
    6128:	2501      	movs	r5, #1
    612a:	432b      	orrs	r3, r5
    612c:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    612e:	b292      	uxth	r2, r2
    6130:	2000      	movs	r0, #0
    6132:	5620      	ldrsb	r0, [r4, r0]
    6134:	2300      	movs	r3, #0
    6136:	4d12      	ldr	r5, [pc, #72]	; (6180 <_http_client_send_wait+0x60>)
    6138:	47a8      	blx	r5
    613a:	2800      	cmp	r0, #0
    613c:	db16      	blt.n	616c <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    613e:	2341      	movs	r3, #65	; 0x41
    6140:	5ce3      	ldrb	r3, [r4, r3]
    6142:	07db      	lsls	r3, r3, #31
    6144:	d518      	bpl.n	6178 <_http_client_send_wait+0x58>
    6146:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    6148:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    614a:	2b02      	cmp	r3, #2
    614c:	d917      	bls.n	617e <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    614e:	4f0d      	ldr	r7, [pc, #52]	; (6184 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    6150:	4e0d      	ldr	r6, [pc, #52]	; (6188 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    6152:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    6154:	2000      	movs	r0, #0
    6156:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    6158:	6d60      	ldr	r0, [r4, #84]	; 0x54
    615a:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    615c:	5d63      	ldrb	r3, [r4, r5]
    615e:	07db      	lsls	r3, r3, #31
    6160:	d50c      	bpl.n	617c <_http_client_send_wait+0x5c>
    6162:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    6164:	2b02      	cmp	r3, #2
    6166:	d8f5      	bhi.n	6154 <_http_client_send_wait+0x34>
	return 0;
    6168:	2000      	movs	r0, #0
    616a:	e008      	b.n	617e <_http_client_send_wait+0x5e>
		module->sending = 0;
    616c:	2241      	movs	r2, #65	; 0x41
    616e:	5ca3      	ldrb	r3, [r4, r2]
    6170:	2101      	movs	r1, #1
    6172:	438b      	bics	r3, r1
    6174:	54a3      	strb	r3, [r4, r2]
		return result;
    6176:	e002      	b.n	617e <_http_client_send_wait+0x5e>
	return 0;
    6178:	2000      	movs	r0, #0
    617a:	e000      	b.n	617e <_http_client_send_wait+0x5e>
    617c:	2000      	movs	r0, #0
}
    617e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6180:	00003b41 	.word	0x00003b41
    6184:	00001ddd 	.word	0x00001ddd
    6188:	000072b5 	.word	0x000072b5

0000618c <http_client_get_config_defaults>:
	config->port = 80;
    618c:	2350      	movs	r3, #80	; 0x50
    618e:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    6190:	2300      	movs	r3, #0
    6192:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    6194:	4a05      	ldr	r2, [pc, #20]	; (61ac <http_client_get_config_defaults+0x20>)
    6196:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    6198:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    619a:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    619c:	3301      	adds	r3, #1
    619e:	33ff      	adds	r3, #255	; 0xff
    61a0:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    61a2:	3bae      	subs	r3, #174	; 0xae
    61a4:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    61a6:	4b02      	ldr	r3, [pc, #8]	; (61b0 <http_client_get_config_defaults+0x24>)
    61a8:	6183      	str	r3, [r0, #24]
}
    61aa:	4770      	bx	lr
    61ac:	00004e20 	.word	0x00004e20
    61b0:	0000a5a0 	.word	0x0000a5a0

000061b4 <http_client_init>:
{
    61b4:	b570      	push	{r4, r5, r6, lr}
    61b6:	0004      	movs	r4, r0
    61b8:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    61ba:	2800      	cmp	r0, #0
    61bc:	d038      	beq.n	6230 <http_client_init+0x7c>
    61be:	2900      	cmp	r1, #0
    61c0:	d039      	beq.n	6236 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    61c2:	690b      	ldr	r3, [r1, #16]
    61c4:	2b00      	cmp	r3, #0
    61c6:	d039      	beq.n	623c <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    61c8:	684b      	ldr	r3, [r1, #4]
    61ca:	2b00      	cmp	r3, #0
    61cc:	d039      	beq.n	6242 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    61ce:	694b      	ldr	r3, [r1, #20]
    61d0:	2b51      	cmp	r3, #81	; 0x51
    61d2:	d939      	bls.n	6248 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    61d4:	22e8      	movs	r2, #232	; 0xe8
    61d6:	2100      	movs	r1, #0
    61d8:	4b1e      	ldr	r3, [pc, #120]	; (6254 <http_client_init+0xa0>)
    61da:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    61dc:	0020      	movs	r0, r4
    61de:	3050      	adds	r0, #80	; 0x50
    61e0:	221c      	movs	r2, #28
    61e2:	0029      	movs	r1, r5
    61e4:	4b1c      	ldr	r3, [pc, #112]	; (6258 <http_client_init+0xa4>)
    61e6:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    61e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    61ea:	2b00      	cmp	r3, #0
    61ec:	d008      	beq.n	6200 <http_client_init+0x4c>
	if (config->timeout > 0) {
    61ee:	892b      	ldrh	r3, [r5, #8]
    61f0:	2b00      	cmp	r3, #0
    61f2:	d111      	bne.n	6218 <http_client_init+0x64>
	module->req.state = STATE_INIT;
    61f4:	2300      	movs	r3, #0
    61f6:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    61f8:	22d8      	movs	r2, #216	; 0xd8
    61fa:	50a3      	str	r3, [r4, r2]
	return 0;
    61fc:	2000      	movs	r0, #0
}
    61fe:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    6200:	6928      	ldr	r0, [r5, #16]
    6202:	4b16      	ldr	r3, [pc, #88]	; (625c <http_client_init+0xa8>)
    6204:	4798      	blx	r3
    6206:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    6208:	2800      	cmp	r0, #0
    620a:	d020      	beq.n	624e <http_client_init+0x9a>
		module->alloc_buffer = 1;
    620c:	2241      	movs	r2, #65	; 0x41
    620e:	5ca3      	ldrb	r3, [r4, r2]
    6210:	2104      	movs	r1, #4
    6212:	430b      	orrs	r3, r1
    6214:	54a3      	strb	r3, [r4, r2]
    6216:	e7ea      	b.n	61ee <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    6218:	6868      	ldr	r0, [r5, #4]
    621a:	2300      	movs	r3, #0
    621c:	0022      	movs	r2, r4
    621e:	4910      	ldr	r1, [pc, #64]	; (6260 <http_client_init+0xac>)
    6220:	4d10      	ldr	r5, [pc, #64]	; (6264 <http_client_init+0xb0>)
    6222:	47a8      	blx	r5
    6224:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    6226:	2800      	cmp	r0, #0
    6228:	dae4      	bge.n	61f4 <http_client_init+0x40>
			return -ENOSPC;
    622a:	201c      	movs	r0, #28
    622c:	4240      	negs	r0, r0
    622e:	e7e6      	b.n	61fe <http_client_init+0x4a>
		return -EINVAL;
    6230:	2016      	movs	r0, #22
    6232:	4240      	negs	r0, r0
    6234:	e7e3      	b.n	61fe <http_client_init+0x4a>
    6236:	2016      	movs	r0, #22
    6238:	4240      	negs	r0, r0
    623a:	e7e0      	b.n	61fe <http_client_init+0x4a>
		return -EINVAL;
    623c:	2016      	movs	r0, #22
    623e:	4240      	negs	r0, r0
    6240:	e7dd      	b.n	61fe <http_client_init+0x4a>
		return -EINVAL;
    6242:	2016      	movs	r0, #22
    6244:	4240      	negs	r0, r0
    6246:	e7da      	b.n	61fe <http_client_init+0x4a>
		return -EINVAL;
    6248:	2016      	movs	r0, #22
    624a:	4240      	negs	r0, r0
    624c:	e7d7      	b.n	61fe <http_client_init+0x4a>
			return -ENOMEM;
    624e:	200c      	movs	r0, #12
    6250:	4240      	negs	r0, r0
    6252:	e7d4      	b.n	61fe <http_client_init+0x4a>
    6254:	00007d8b 	.word	0x00007d8b
    6258:	00007d55 	.word	0x00007d55
    625c:	00007d2d 	.word	0x00007d2d
    6260:	00006379 	.word	0x00006379
    6264:	00007241 	.word	0x00007241

00006268 <http_client_register_callback>:
	if (module == NULL) {
    6268:	2800      	cmp	r0, #0
    626a:	d002      	beq.n	6272 <http_client_register_callback+0xa>
	module->cb = callback;
    626c:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    626e:	2000      	movs	r0, #0
}
    6270:	4770      	bx	lr
		return -EINVAL;
    6272:	2016      	movs	r0, #22
    6274:	4240      	negs	r0, r0
    6276:	e7fb      	b.n	6270 <http_client_register_callback+0x8>

00006278 <_http_client_clear_conn>:
{
    6278:	b5f0      	push	{r4, r5, r6, r7, lr}
    627a:	b085      	sub	sp, #20
    627c:	0004      	movs	r4, r0
    627e:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    6280:	23c0      	movs	r3, #192	; 0xc0
    6282:	58c3      	ldr	r3, [r0, r3]
    6284:	2b00      	cmp	r3, #0
    6286:	d002      	beq.n	628e <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    6288:	22c4      	movs	r2, #196	; 0xc4
    628a:	5880      	ldr	r0, [r0, r2]
    628c:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    628e:	0020      	movs	r0, r4
    6290:	30b0      	adds	r0, #176	; 0xb0
    6292:	2218      	movs	r2, #24
    6294:	2100      	movs	r1, #0
    6296:	4b17      	ldr	r3, [pc, #92]	; (62f4 <_http_client_clear_conn+0x7c>)
    6298:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    629a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    629c:	2b00      	cmp	r3, #0
    629e:	d124      	bne.n	62ea <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    62a0:	2300      	movs	r3, #0
    62a2:	56e3      	ldrsb	r3, [r4, r3]
    62a4:	009b      	lsls	r3, r3, #2
    62a6:	2500      	movs	r5, #0
    62a8:	4a13      	ldr	r2, [pc, #76]	; (62f8 <_http_client_clear_conn+0x80>)
    62aa:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    62ac:	0020      	movs	r0, r4
    62ae:	306c      	adds	r0, #108	; 0x6c
    62b0:	226c      	movs	r2, #108	; 0x6c
    62b2:	2100      	movs	r1, #0
    62b4:	4f0f      	ldr	r7, [pc, #60]	; (62f4 <_http_client_clear_conn+0x7c>)
    62b6:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    62b8:	0020      	movs	r0, r4
    62ba:	30d8      	adds	r0, #216	; 0xd8
    62bc:	2210      	movs	r2, #16
    62be:	2100      	movs	r1, #0
    62c0:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    62c2:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    62c4:	23d8      	movs	r3, #216	; 0xd8
    62c6:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    62c8:	2241      	movs	r2, #65	; 0x41
    62ca:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    62cc:	2101      	movs	r1, #1
    62ce:	438b      	bics	r3, r1
    62d0:	3101      	adds	r1, #1
    62d2:	438b      	bics	r3, r1
    62d4:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    62d6:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    62d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    62da:	2b00      	cmp	r3, #0
    62dc:	d003      	beq.n	62e6 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    62de:	aa01      	add	r2, sp, #4
    62e0:	3102      	adds	r1, #2
    62e2:	0020      	movs	r0, r4
    62e4:	4798      	blx	r3
}
    62e6:	b005      	add	sp, #20
    62e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    62ea:	2000      	movs	r0, #0
    62ec:	5620      	ldrsb	r0, [r4, r0]
    62ee:	4b03      	ldr	r3, [pc, #12]	; (62fc <_http_client_clear_conn+0x84>)
    62f0:	4798      	blx	r3
    62f2:	e7d5      	b.n	62a0 <_http_client_clear_conn+0x28>
    62f4:	00007d8b 	.word	0x00007d8b
    62f8:	20000254 	.word	0x20000254
    62fc:	00003c6d 	.word	0x00003c6d

00006300 <http_client_socket_resolve_handler>:
{
    6300:	b5f0      	push	{r4, r5, r6, r7, lr}
    6302:	b087      	sub	sp, #28
    6304:	9000      	str	r0, [sp, #0]
    6306:	9101      	str	r1, [sp, #4]
    6308:	4c17      	ldr	r4, [pc, #92]	; (6368 <http_client_socket_resolve_handler+0x68>)
    630a:	0026      	movs	r6, r4
    630c:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    630e:	4f17      	ldr	r7, [pc, #92]	; (636c <http_client_socket_resolve_handler+0x6c>)
    6310:	e015      	b.n	633e <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
    6312:	2302      	movs	r3, #2
    6314:	aa02      	add	r2, sp, #8
    6316:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    6318:	334e      	adds	r3, #78	; 0x4e
    631a:	5aeb      	ldrh	r3, [r5, r3]
    631c:	021a      	lsls	r2, r3, #8
    631e:	0a1b      	lsrs	r3, r3, #8
    6320:	4313      	orrs	r3, r2
    6322:	aa02      	add	r2, sp, #8
    6324:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    6326:	9b01      	ldr	r3, [sp, #4]
    6328:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    632a:	2000      	movs	r0, #0
    632c:	5628      	ldrsb	r0, [r5, r0]
    632e:	2210      	movs	r2, #16
    6330:	a902      	add	r1, sp, #8
    6332:	4b0f      	ldr	r3, [pc, #60]	; (6370 <http_client_socket_resolve_handler+0x70>)
    6334:	4798      	blx	r3
				return;
    6336:	e015      	b.n	6364 <http_client_socket_resolve_handler+0x64>
    6338:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    633a:	42b4      	cmp	r4, r6
    633c:	d012      	beq.n	6364 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
    633e:	6825      	ldr	r5, [r4, #0]
    6340:	2d00      	cmp	r5, #0
    6342:	d0f9      	beq.n	6338 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    6344:	1c69      	adds	r1, r5, #1
    6346:	9800      	ldr	r0, [sp, #0]
    6348:	47b8      	blx	r7
    634a:	2800      	cmp	r0, #0
    634c:	d1f4      	bne.n	6338 <http_client_socket_resolve_handler+0x38>
    634e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    6350:	2b01      	cmp	r3, #1
    6352:	d1f1      	bne.n	6338 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    6354:	9b01      	ldr	r3, [sp, #4]
    6356:	2b00      	cmp	r3, #0
    6358:	d1db      	bne.n	6312 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    635a:	2176      	movs	r1, #118	; 0x76
    635c:	4249      	negs	r1, r1
    635e:	0028      	movs	r0, r5
    6360:	4b04      	ldr	r3, [pc, #16]	; (6374 <http_client_socket_resolve_handler+0x74>)
    6362:	4798      	blx	r3
}
    6364:	b007      	add	sp, #28
    6366:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6368:	20000254 	.word	0x20000254
    636c:	000081f1 	.word	0x000081f1
    6370:	00003ab1 	.word	0x00003ab1
    6374:	00006279 	.word	0x00006279

00006378 <http_client_timer_callback>:
{
    6378:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    637a:	2a00      	cmp	r2, #0
    637c:	d004      	beq.n	6388 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    637e:	213e      	movs	r1, #62	; 0x3e
    6380:	4249      	negs	r1, r1
    6382:	0010      	movs	r0, r2
    6384:	4b01      	ldr	r3, [pc, #4]	; (638c <http_client_timer_callback+0x14>)
    6386:	4798      	blx	r3
}
    6388:	bd10      	pop	{r4, pc}
    638a:	46c0      	nop			; (mov r8, r8)
    638c:	00006279 	.word	0x00006279

00006390 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    6390:	b5f0      	push	{r4, r5, r6, r7, lr}
    6392:	46de      	mov	lr, fp
    6394:	4657      	mov	r7, sl
    6396:	b580      	push	{r7, lr}
    6398:	b095      	sub	sp, #84	; 0x54
    639a:	af02      	add	r7, sp, #8
    639c:	0004      	movs	r4, r0
    639e:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    63a0:	2210      	movs	r2, #16
    63a2:	49b2      	ldr	r1, [pc, #712]	; (666c <_http_client_request+0x2dc>)
    63a4:	2310      	movs	r3, #16
    63a6:	2008      	movs	r0, #8
    63a8:	1838      	adds	r0, r7, r0
    63aa:	18c0      	adds	r0, r0, r3
    63ac:	4bb0      	ldr	r3, [pc, #704]	; (6670 <_http_client_request+0x2e0>)
    63ae:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    63b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
    63b2:	1dd3      	adds	r3, r2, #7
    63b4:	08db      	lsrs	r3, r3, #3
    63b6:	00db      	lsls	r3, r3, #3
    63b8:	4669      	mov	r1, sp
    63ba:	1acb      	subs	r3, r1, r3
    63bc:	469d      	mov	sp, r3
    63be:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    63c0:	2c00      	cmp	r4, #0
    63c2:	d100      	bne.n	63c6 <_http_client_request+0x36>
    63c4:	e1f1      	b.n	67aa <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    63c6:	2341      	movs	r3, #65	; 0x41
    63c8:	5ce3      	ldrb	r3, [r4, r3]
    63ca:	07db      	lsls	r3, r3, #31
    63cc:	d500      	bpl.n	63d0 <_http_client_request+0x40>
    63ce:	e1ec      	b.n	67aa <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    63d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    63d2:	2b03      	cmp	r3, #3
    63d4:	d004      	beq.n	63e0 <_http_client_request+0x50>
    63d6:	2b04      	cmp	r3, #4
    63d8:	d100      	bne.n	63dc <_http_client_request+0x4c>
    63da:	e120      	b.n	661e <_http_client_request+0x28e>
    63dc:	46dd      	mov	sp, fp
    63de:	e1e5      	b.n	67ac <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    63e0:	2300      	movs	r3, #0
    63e2:	21cc      	movs	r1, #204	; 0xcc
    63e4:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    63e6:	3104      	adds	r1, #4
    63e8:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    63ea:	9400      	str	r4, [sp, #0]
    63ec:	4ba1      	ldr	r3, [pc, #644]	; (6674 <_http_client_request+0x2e4>)
    63ee:	0031      	movs	r1, r6
    63f0:	202c      	movs	r0, #44	; 0x2c
    63f2:	2508      	movs	r5, #8
    63f4:	46ac      	mov	ip, r5
    63f6:	44bc      	add	ip, r7
    63f8:	4460      	add	r0, ip
    63fa:	4d9f      	ldr	r5, [pc, #636]	; (6678 <_http_client_request+0x2e8>)
    63fc:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    63fe:	23c8      	movs	r3, #200	; 0xc8
    6400:	5ce3      	ldrb	r3, [r4, r3]
    6402:	2b01      	cmp	r3, #1
    6404:	d100      	bne.n	6408 <_http_client_request+0x78>
    6406:	e0a9      	b.n	655c <_http_client_request+0x1cc>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    6408:	2b02      	cmp	r3, #2
    640a:	d100      	bne.n	640e <_http_client_request+0x7e>
    640c:	e0af      	b.n	656e <_http_client_request+0x1de>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    640e:	2b03      	cmp	r3, #3
    6410:	d100      	bne.n	6414 <_http_client_request+0x84>
    6412:	e0b5      	b.n	6580 <_http_client_request+0x1f0>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    6414:	2b04      	cmp	r3, #4
    6416:	d100      	bne.n	641a <_http_client_request+0x8a>
    6418:	e0bb      	b.n	6592 <_http_client_request+0x202>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    641a:	2b05      	cmp	r3, #5
    641c:	d100      	bne.n	6420 <_http_client_request+0x90>
    641e:	e0c1      	b.n	65a4 <_http_client_request+0x214>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    6420:	2b06      	cmp	r3, #6
    6422:	d100      	bne.n	6426 <_http_client_request+0x96>
    6424:	e0c7      	b.n	65b6 <_http_client_request+0x226>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    6426:	0025      	movs	r5, r4
    6428:	3570      	adds	r5, #112	; 0x70
    642a:	0028      	movs	r0, r5
    642c:	4b93      	ldr	r3, [pc, #588]	; (667c <_http_client_request+0x2ec>)
    642e:	469a      	mov	sl, r3
    6430:	4798      	blx	r3
    6432:	0002      	movs	r2, r0
    6434:	0029      	movs	r1, r5
    6436:	232c      	movs	r3, #44	; 0x2c
    6438:	2008      	movs	r0, #8
    643a:	1838      	adds	r0, r7, r0
    643c:	18c0      	adds	r0, r0, r3
    643e:	4d90      	ldr	r5, [pc, #576]	; (6680 <_http_client_request+0x2f0>)
    6440:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    6442:	220b      	movs	r2, #11
    6444:	498f      	ldr	r1, [pc, #572]	; (6684 <_http_client_request+0x2f4>)
    6446:	232c      	movs	r3, #44	; 0x2c
    6448:	2008      	movs	r0, #8
    644a:	1838      	adds	r0, r7, r0
    644c:	18c0      	adds	r0, r0, r3
    644e:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    6450:	220c      	movs	r2, #12
    6452:	498d      	ldr	r1, [pc, #564]	; (6688 <_http_client_request+0x2f8>)
    6454:	232c      	movs	r3, #44	; 0x2c
    6456:	2008      	movs	r0, #8
    6458:	1838      	adds	r0, r7, r0
    645a:	18c0      	adds	r0, r0, r3
    645c:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    645e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    6460:	607b      	str	r3, [r7, #4]
    6462:	0018      	movs	r0, r3
    6464:	47d0      	blx	sl
    6466:	0002      	movs	r2, r0
    6468:	6879      	ldr	r1, [r7, #4]
    646a:	232c      	movs	r3, #44	; 0x2c
    646c:	2008      	movs	r0, #8
    646e:	1838      	adds	r0, r7, r0
    6470:	18c0      	adds	r0, r0, r3
    6472:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    6474:	2202      	movs	r2, #2
    6476:	4985      	ldr	r1, [pc, #532]	; (668c <_http_client_request+0x2fc>)
    6478:	232c      	movs	r3, #44	; 0x2c
    647a:	2008      	movs	r0, #8
    647c:	1838      	adds	r0, r7, r0
    647e:	18c0      	adds	r0, r0, r3
    6480:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    6482:	2206      	movs	r2, #6
    6484:	4982      	ldr	r1, [pc, #520]	; (6690 <_http_client_request+0x300>)
    6486:	232c      	movs	r3, #44	; 0x2c
    6488:	2008      	movs	r0, #8
    648a:	1838      	adds	r0, r7, r0
    648c:	18c0      	adds	r0, r0, r3
    648e:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    6490:	1c63      	adds	r3, r4, #1
    6492:	607b      	str	r3, [r7, #4]
    6494:	0018      	movs	r0, r3
    6496:	47d0      	blx	sl
    6498:	0002      	movs	r2, r0
    649a:	6879      	ldr	r1, [r7, #4]
    649c:	232c      	movs	r3, #44	; 0x2c
    649e:	2008      	movs	r0, #8
    64a0:	1838      	adds	r0, r7, r0
    64a2:	18c0      	adds	r0, r0, r3
    64a4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    64a6:	2202      	movs	r2, #2
    64a8:	4978      	ldr	r1, [pc, #480]	; (668c <_http_client_request+0x2fc>)
    64aa:	232c      	movs	r3, #44	; 0x2c
    64ac:	2008      	movs	r0, #8
    64ae:	1838      	adds	r0, r7, r0
    64b0:	18c0      	adds	r0, r0, r3
    64b2:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    64b4:	2218      	movs	r2, #24
    64b6:	4977      	ldr	r1, [pc, #476]	; (6694 <_http_client_request+0x304>)
    64b8:	232c      	movs	r3, #44	; 0x2c
    64ba:	2008      	movs	r0, #8
    64bc:	1838      	adds	r0, r7, r0
    64be:	18c0      	adds	r0, r0, r3
    64c0:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    64c2:	2213      	movs	r2, #19
    64c4:	4974      	ldr	r1, [pc, #464]	; (6698 <_http_client_request+0x308>)
    64c6:	232c      	movs	r3, #44	; 0x2c
    64c8:	2008      	movs	r0, #8
    64ca:	1838      	adds	r0, r7, r0
    64cc:	18c0      	adds	r0, r0, r3
    64ce:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    64d0:	2217      	movs	r2, #23
    64d2:	4972      	ldr	r1, [pc, #456]	; (669c <_http_client_request+0x30c>)
    64d4:	232c      	movs	r3, #44	; 0x2c
    64d6:	2008      	movs	r0, #8
    64d8:	1838      	adds	r0, r7, r0
    64da:	18c0      	adds	r0, r0, r3
    64dc:	47a8      	blx	r5

		if (entity->read != NULL) {
    64de:	0023      	movs	r3, r4
    64e0:	33b0      	adds	r3, #176	; 0xb0
    64e2:	68db      	ldr	r3, [r3, #12]
    64e4:	2b00      	cmp	r3, #0
    64e6:	d07b      	beq.n	65e0 <_http_client_request+0x250>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    64e8:	23b0      	movs	r3, #176	; 0xb0
    64ea:	5ce3      	ldrb	r3, [r4, r3]
    64ec:	2b00      	cmp	r3, #0
    64ee:	d16b      	bne.n	65c8 <_http_client_request+0x238>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    64f0:	0023      	movs	r3, r4
    64f2:	33b0      	adds	r3, #176	; 0xb0
    64f4:	689b      	ldr	r3, [r3, #8]
    64f6:	2b00      	cmp	r3, #0
    64f8:	d072      	beq.n	65e0 <_http_client_request+0x250>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    64fa:	0022      	movs	r2, r4
    64fc:	32b0      	adds	r2, #176	; 0xb0
    64fe:	6950      	ldr	r0, [r2, #20]
    6500:	4798      	blx	r3
    6502:	23cc      	movs	r3, #204	; 0xcc
    6504:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    6506:	2800      	cmp	r0, #0
    6508:	da00      	bge.n	650c <_http_client_request+0x17c>
    650a:	e0ac      	b.n	6666 <_http_client_request+0x2d6>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    650c:	0002      	movs	r2, r0
    650e:	4964      	ldr	r1, [pc, #400]	; (66a0 <_http_client_request+0x310>)
    6510:	2320      	movs	r3, #32
    6512:	2008      	movs	r0, #8
    6514:	1838      	adds	r0, r7, r0
    6516:	18c0      	adds	r0, r0, r3
    6518:	4b62      	ldr	r3, [pc, #392]	; (66a4 <_http_client_request+0x314>)
    651a:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    651c:	2210      	movs	r2, #16
    651e:	4962      	ldr	r1, [pc, #392]	; (66a8 <_http_client_request+0x318>)
    6520:	232c      	movs	r3, #44	; 0x2c
    6522:	2008      	movs	r0, #8
    6524:	1838      	adds	r0, r7, r0
    6526:	18c0      	adds	r0, r0, r3
    6528:	4d55      	ldr	r5, [pc, #340]	; (6680 <_http_client_request+0x2f0>)
    652a:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    652c:	2320      	movs	r3, #32
    652e:	2208      	movs	r2, #8
    6530:	18ba      	adds	r2, r7, r2
    6532:	18d0      	adds	r0, r2, r3
    6534:	4b51      	ldr	r3, [pc, #324]	; (667c <_http_client_request+0x2ec>)
    6536:	4798      	blx	r3
    6538:	0002      	movs	r2, r0
    653a:	2320      	movs	r3, #32
    653c:	2108      	movs	r1, #8
    653e:	1879      	adds	r1, r7, r1
    6540:	18c9      	adds	r1, r1, r3
    6542:	330c      	adds	r3, #12
    6544:	2008      	movs	r0, #8
    6546:	1838      	adds	r0, r7, r0
    6548:	18c0      	adds	r0, r0, r3
    654a:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    654c:	2202      	movs	r2, #2
    654e:	494f      	ldr	r1, [pc, #316]	; (668c <_http_client_request+0x2fc>)
    6550:	232c      	movs	r3, #44	; 0x2c
    6552:	2008      	movs	r0, #8
    6554:	1838      	adds	r0, r7, r0
    6556:	18c0      	adds	r0, r0, r3
    6558:	47a8      	blx	r5
    655a:	e041      	b.n	65e0 <_http_client_request+0x250>
			stream_writer_send_buffer(&writer, "GET ", 4);
    655c:	2204      	movs	r2, #4
    655e:	4953      	ldr	r1, [pc, #332]	; (66ac <_http_client_request+0x31c>)
    6560:	332b      	adds	r3, #43	; 0x2b
    6562:	2008      	movs	r0, #8
    6564:	1838      	adds	r0, r7, r0
    6566:	18c0      	adds	r0, r0, r3
    6568:	4b45      	ldr	r3, [pc, #276]	; (6680 <_http_client_request+0x2f0>)
    656a:	4798      	blx	r3
    656c:	e75b      	b.n	6426 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "POST ", 5);
    656e:	2205      	movs	r2, #5
    6570:	494f      	ldr	r1, [pc, #316]	; (66b0 <_http_client_request+0x320>)
    6572:	332a      	adds	r3, #42	; 0x2a
    6574:	2008      	movs	r0, #8
    6576:	1838      	adds	r0, r7, r0
    6578:	18c0      	adds	r0, r0, r3
    657a:	4b41      	ldr	r3, [pc, #260]	; (6680 <_http_client_request+0x2f0>)
    657c:	4798      	blx	r3
    657e:	e752      	b.n	6426 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    6580:	2207      	movs	r2, #7
    6582:	494c      	ldr	r1, [pc, #304]	; (66b4 <_http_client_request+0x324>)
    6584:	3329      	adds	r3, #41	; 0x29
    6586:	2008      	movs	r0, #8
    6588:	1838      	adds	r0, r7, r0
    658a:	18c0      	adds	r0, r0, r3
    658c:	4b3c      	ldr	r3, [pc, #240]	; (6680 <_http_client_request+0x2f0>)
    658e:	4798      	blx	r3
    6590:	e749      	b.n	6426 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    6592:	2204      	movs	r2, #4
    6594:	4948      	ldr	r1, [pc, #288]	; (66b8 <_http_client_request+0x328>)
    6596:	3328      	adds	r3, #40	; 0x28
    6598:	2008      	movs	r0, #8
    659a:	1838      	adds	r0, r7, r0
    659c:	18c0      	adds	r0, r0, r3
    659e:	4b38      	ldr	r3, [pc, #224]	; (6680 <_http_client_request+0x2f0>)
    65a0:	4798      	blx	r3
    65a2:	e740      	b.n	6426 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    65a4:	2208      	movs	r2, #8
    65a6:	4945      	ldr	r1, [pc, #276]	; (66bc <_http_client_request+0x32c>)
    65a8:	3327      	adds	r3, #39	; 0x27
    65aa:	2008      	movs	r0, #8
    65ac:	1838      	adds	r0, r7, r0
    65ae:	18c0      	adds	r0, r0, r3
    65b0:	4b33      	ldr	r3, [pc, #204]	; (6680 <_http_client_request+0x2f0>)
    65b2:	4798      	blx	r3
    65b4:	e737      	b.n	6426 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    65b6:	2205      	movs	r2, #5
    65b8:	4941      	ldr	r1, [pc, #260]	; (66c0 <_http_client_request+0x330>)
    65ba:	3326      	adds	r3, #38	; 0x26
    65bc:	2008      	movs	r0, #8
    65be:	1838      	adds	r0, r7, r0
    65c0:	18c0      	adds	r0, r0, r3
    65c2:	4b2f      	ldr	r3, [pc, #188]	; (6680 <_http_client_request+0x2f0>)
    65c4:	4798      	blx	r3
    65c6:	e72e      	b.n	6426 <_http_client_request+0x96>
				module->req.content_length = -1;
    65c8:	2201      	movs	r2, #1
    65ca:	4252      	negs	r2, r2
    65cc:	23cc      	movs	r3, #204	; 0xcc
    65ce:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    65d0:	321d      	adds	r2, #29
    65d2:	493c      	ldr	r1, [pc, #240]	; (66c4 <_http_client_request+0x334>)
    65d4:	3ba0      	subs	r3, #160	; 0xa0
    65d6:	2008      	movs	r0, #8
    65d8:	1838      	adds	r0, r7, r0
    65da:	18c0      	adds	r0, r0, r3
    65dc:	4b28      	ldr	r3, [pc, #160]	; (6680 <_http_client_request+0x2f0>)
    65de:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    65e0:	23d4      	movs	r3, #212	; 0xd4
    65e2:	58e5      	ldr	r5, [r4, r3]
    65e4:	2d00      	cmp	r5, #0
    65e6:	d00a      	beq.n	65fe <_http_client_request+0x26e>
			stream_writer_send_buffer(&writer,
    65e8:	0028      	movs	r0, r5
    65ea:	4b24      	ldr	r3, [pc, #144]	; (667c <_http_client_request+0x2ec>)
    65ec:	4798      	blx	r3
    65ee:	0002      	movs	r2, r0
    65f0:	0029      	movs	r1, r5
    65f2:	232c      	movs	r3, #44	; 0x2c
    65f4:	2008      	movs	r0, #8
    65f6:	1838      	adds	r0, r7, r0
    65f8:	18c0      	adds	r0, r0, r3
    65fa:	4b21      	ldr	r3, [pc, #132]	; (6680 <_http_client_request+0x2f0>)
    65fc:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    65fe:	2202      	movs	r2, #2
    6600:	4922      	ldr	r1, [pc, #136]	; (668c <_http_client_request+0x2fc>)
    6602:	232c      	movs	r3, #44	; 0x2c
    6604:	2008      	movs	r0, #8
    6606:	1838      	adds	r0, r7, r0
    6608:	18c0      	adds	r0, r0, r3
    660a:	4b1d      	ldr	r3, [pc, #116]	; (6680 <_http_client_request+0x2f0>)
    660c:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    660e:	232c      	movs	r3, #44	; 0x2c
    6610:	2208      	movs	r2, #8
    6612:	18ba      	adds	r2, r7, r2
    6614:	18d0      	adds	r0, r2, r3
    6616:	4b2c      	ldr	r3, [pc, #176]	; (66c8 <_http_client_request+0x338>)
    6618:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    661a:	2304      	movs	r3, #4
    661c:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    661e:	23cc      	movs	r3, #204	; 0xcc
    6620:	58e2      	ldr	r2, [r4, r3]
    6622:	2a00      	cmp	r2, #0
    6624:	db52      	blt.n	66cc <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    6626:	dc00      	bgt.n	662a <_http_client_request+0x29a>
    6628:	e0f1      	b.n	680e <_http_client_request+0x47e>
    662a:	0023      	movs	r3, r4
    662c:	33b0      	adds	r3, #176	; 0xb0
    662e:	68dd      	ldr	r5, [r3, #12]
    6630:	2d00      	cmp	r5, #0
    6632:	d100      	bne.n	6636 <_http_client_request+0x2a6>
    6634:	e0eb      	b.n	680e <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    6636:	23d0      	movs	r3, #208	; 0xd0
    6638:	58e3      	ldr	r3, [r4, r3]
    663a:	429a      	cmp	r2, r3
    663c:	dd00      	ble.n	6640 <_http_client_request+0x2b0>
    663e:	e0bb      	b.n	67b8 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    6640:	23c0      	movs	r3, #192	; 0xc0
    6642:	58e3      	ldr	r3, [r4, r3]
    6644:	2b00      	cmp	r3, #0
    6646:	d002      	beq.n	664e <_http_client_request+0x2be>
					module->req.entity.close(module->req.entity.priv_data);
    6648:	22c4      	movs	r2, #196	; 0xc4
    664a:	58a0      	ldr	r0, [r4, r2]
    664c:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    664e:	2302      	movs	r3, #2
    6650:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    6652:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6654:	2b00      	cmp	r3, #0
    6656:	d100      	bne.n	665a <_http_client_request+0x2ca>
    6658:	e6c0      	b.n	63dc <_http_client_request+0x4c>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    665a:	220c      	movs	r2, #12
    665c:	18ba      	adds	r2, r7, r2
    665e:	2101      	movs	r1, #1
    6660:	0020      	movs	r0, r4
    6662:	4798      	blx	r3
    6664:	e6ba      	b.n	63dc <_http_client_request+0x4c>
					module->req.content_length = 0;
    6666:	2200      	movs	r2, #0
    6668:	50e2      	str	r2, [r4, r3]
    666a:	e7b9      	b.n	65e0 <_http_client_request+0x250>
    666c:	0000a488 	.word	0x0000a488
    6670:	00007d55 	.word	0x00007d55
    6674:	00006121 	.word	0x00006121
    6678:	000070ed 	.word	0x000070ed
    667c:	0000824f 	.word	0x0000824f
    6680:	00007141 	.word	0x00007141
    6684:	0000a4fc 	.word	0x0000a4fc
    6688:	0000a508 	.word	0x0000a508
    668c:	0000a80c 	.word	0x0000a80c
    6690:	0000a518 	.word	0x0000a518
    6694:	0000a520 	.word	0x0000a520
    6698:	0000a53c 	.word	0x0000a53c
    669c:	0000a550 	.word	0x0000a550
    66a0:	0000a588 	.word	0x0000a588
    66a4:	000081ad 	.word	0x000081ad
    66a8:	0000a58c 	.word	0x0000a58c
    66ac:	0000a4c8 	.word	0x0000a4c8
    66b0:	0000a4d0 	.word	0x0000a4d0
    66b4:	0000a4d8 	.word	0x0000a4d8
    66b8:	0000a4e0 	.word	0x0000a4e0
    66bc:	0000a4e8 	.word	0x0000a4e8
    66c0:	0000a4f4 	.word	0x0000a4f4
    66c4:	0000a568 	.word	0x0000a568
    66c8:	000070fd 	.word	0x000070fd
		if (module->req.content_length < 0 && entity->read) {
    66cc:	0023      	movs	r3, r4
    66ce:	33b0      	adds	r3, #176	; 0xb0
    66d0:	68dd      	ldr	r5, [r3, #12]
    66d2:	2d00      	cmp	r5, #0
    66d4:	d100      	bne.n	66d8 <_http_client_request+0x348>
    66d6:	e09a      	b.n	680e <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    66d8:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    66da:	58e3      	ldr	r3, [r4, r3]
    66dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
    66de:	3a07      	subs	r2, #7
    66e0:	1d71      	adds	r1, r6, #5
    66e2:	0020      	movs	r0, r4
    66e4:	30b0      	adds	r0, #176	; 0xb0
    66e6:	6940      	ldr	r0, [r0, #20]
    66e8:	47a8      	blx	r5
    66ea:	0005      	movs	r5, r0
    66ec:	43c3      	mvns	r3, r0
    66ee:	17db      	asrs	r3, r3, #31
    66f0:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    66f2:	220a      	movs	r2, #10
    66f4:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    66f6:	210d      	movs	r1, #13
    66f8:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    66fa:	1973      	adds	r3, r6, r5
    66fc:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    66fe:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    6700:	230f      	movs	r3, #15
    6702:	402b      	ands	r3, r5
    6704:	3206      	adds	r2, #6
    6706:	3905      	subs	r1, #5
    6708:	468c      	mov	ip, r1
    670a:	44bc      	add	ip, r7
    670c:	4462      	add	r2, ip
    670e:	5cd3      	ldrb	r3, [r2, r3]
    6710:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    6712:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    6714:	2d0f      	cmp	r5, #15
    6716:	dd0d      	ble.n	6734 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    6718:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    671a:	17eb      	asrs	r3, r5, #31
    671c:	220f      	movs	r2, #15
    671e:	4013      	ands	r3, r2
    6720:	195b      	adds	r3, r3, r5
    6722:	111b      	asrs	r3, r3, #4
    6724:	4013      	ands	r3, r2
    6726:	3201      	adds	r2, #1
    6728:	2008      	movs	r0, #8
    672a:	4684      	mov	ip, r0
    672c:	44bc      	add	ip, r7
    672e:	4462      	add	r2, ip
    6730:	5cd3      	ldrb	r3, [r2, r3]
    6732:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    6734:	2dff      	cmp	r5, #255	; 0xff
    6736:	dd0d      	ble.n	6754 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    6738:	17ea      	asrs	r2, r5, #31
    673a:	23ff      	movs	r3, #255	; 0xff
    673c:	4013      	ands	r3, r2
    673e:	195b      	adds	r3, r3, r5
    6740:	051b      	lsls	r3, r3, #20
    6742:	0f1b      	lsrs	r3, r3, #28
    6744:	2210      	movs	r2, #16
    6746:	2108      	movs	r1, #8
    6748:	468c      	mov	ip, r1
    674a:	44bc      	add	ip, r7
    674c:	4462      	add	r2, ip
    674e:	5cd3      	ldrb	r3, [r2, r3]
    6750:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    6752:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    6754:	1cca      	adds	r2, r1, #3
    6756:	1b92      	subs	r2, r2, r6
    6758:	1d2b      	adds	r3, r5, #4
    675a:	18d2      	adds	r2, r2, r3
    675c:	b292      	uxth	r2, r2
    675e:	2000      	movs	r0, #0
    6760:	5620      	ldrsb	r0, [r4, r0]
    6762:	2300      	movs	r3, #0
    6764:	4e30      	ldr	r6, [pc, #192]	; (6828 <_http_client_request+0x498>)
    6766:	47b0      	blx	r6
    6768:	2800      	cmp	r0, #0
    676a:	db19      	blt.n	67a0 <_http_client_request+0x410>
			module->req.sent_length += size;
    676c:	22d0      	movs	r2, #208	; 0xd0
    676e:	58a3      	ldr	r3, [r4, r2]
    6770:	195b      	adds	r3, r3, r5
    6772:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    6774:	2d00      	cmp	r5, #0
    6776:	d000      	beq.n	677a <_http_client_request+0x3ea>
    6778:	e630      	b.n	63dc <_http_client_request+0x4c>
				if (module->req.entity.close) {
    677a:	23c0      	movs	r3, #192	; 0xc0
    677c:	58e3      	ldr	r3, [r4, r3]
    677e:	2b00      	cmp	r3, #0
    6780:	d002      	beq.n	6788 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    6782:	3a0c      	subs	r2, #12
    6784:	58a0      	ldr	r0, [r4, r2]
    6786:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    6788:	2302      	movs	r3, #2
    678a:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    678c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    678e:	2b00      	cmp	r3, #0
    6790:	d100      	bne.n	6794 <_http_client_request+0x404>
    6792:	e623      	b.n	63dc <_http_client_request+0x4c>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    6794:	220c      	movs	r2, #12
    6796:	18ba      	adds	r2, r7, r2
    6798:	2101      	movs	r1, #1
    679a:	0020      	movs	r0, r4
    679c:	4798      	blx	r3
    679e:	e61d      	b.n	63dc <_http_client_request+0x4c>
				_http_client_clear_conn(module, -EIO);
    67a0:	2105      	movs	r1, #5
    67a2:	4249      	negs	r1, r1
    67a4:	0020      	movs	r0, r4
    67a6:	4b21      	ldr	r3, [pc, #132]	; (682c <_http_client_request+0x49c>)
    67a8:	4798      	blx	r3
    67aa:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    67ac:	46bd      	mov	sp, r7
    67ae:	b013      	add	sp, #76	; 0x4c
    67b0:	bc0c      	pop	{r2, r3}
    67b2:	4692      	mov	sl, r2
    67b4:	469b      	mov	fp, r3
    67b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    67b8:	0022      	movs	r2, r4
    67ba:	32b0      	adds	r2, #176	; 0xb0
    67bc:	6950      	ldr	r0, [r2, #20]
    67be:	6e62      	ldr	r2, [r4, #100]	; 0x64
    67c0:	0031      	movs	r1, r6
    67c2:	47a8      	blx	r5
			if (size < 0) {
    67c4:	2800      	cmp	r0, #0
    67c6:	db16      	blt.n	67f6 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    67c8:	23cc      	movs	r3, #204	; 0xcc
    67ca:	58e5      	ldr	r5, [r4, r3]
    67cc:	3304      	adds	r3, #4
    67ce:	58e3      	ldr	r3, [r4, r3]
    67d0:	1aed      	subs	r5, r5, r3
    67d2:	4285      	cmp	r5, r0
    67d4:	dd00      	ble.n	67d8 <_http_client_request+0x448>
    67d6:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    67d8:	b2aa      	uxth	r2, r5
    67da:	2000      	movs	r0, #0
    67dc:	5620      	ldrsb	r0, [r4, r0]
    67de:	2300      	movs	r3, #0
    67e0:	0031      	movs	r1, r6
    67e2:	4e11      	ldr	r6, [pc, #68]	; (6828 <_http_client_request+0x498>)
    67e4:	47b0      	blx	r6
    67e6:	2800      	cmp	r0, #0
    67e8:	db0b      	blt.n	6802 <_http_client_request+0x472>
				module->req.sent_length += size;
    67ea:	23d0      	movs	r3, #208	; 0xd0
    67ec:	58e2      	ldr	r2, [r4, r3]
    67ee:	4694      	mov	ip, r2
    67f0:	4465      	add	r5, ip
    67f2:	50e5      	str	r5, [r4, r3]
    67f4:	e5f2      	b.n	63dc <_http_client_request+0x4c>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    67f6:	2105      	movs	r1, #5
    67f8:	4249      	negs	r1, r1
    67fa:	0020      	movs	r0, r4
    67fc:	4b0b      	ldr	r3, [pc, #44]	; (682c <_http_client_request+0x49c>)
    67fe:	4798      	blx	r3
    6800:	e5ec      	b.n	63dc <_http_client_request+0x4c>
					_http_client_clear_conn(module, -EIO);
    6802:	2105      	movs	r1, #5
    6804:	4249      	negs	r1, r1
    6806:	0020      	movs	r0, r4
    6808:	4b08      	ldr	r3, [pc, #32]	; (682c <_http_client_request+0x49c>)
    680a:	4798      	blx	r3
					return;
    680c:	e7cd      	b.n	67aa <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    680e:	2302      	movs	r3, #2
    6810:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    6812:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6814:	2b00      	cmp	r3, #0
    6816:	d100      	bne.n	681a <_http_client_request+0x48a>
    6818:	e5e0      	b.n	63dc <_http_client_request+0x4c>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    681a:	220c      	movs	r2, #12
    681c:	18ba      	adds	r2, r7, r2
    681e:	2101      	movs	r1, #1
    6820:	0020      	movs	r0, r4
    6822:	4798      	blx	r3
    6824:	e5da      	b.n	63dc <_http_client_request+0x4c>
    6826:	46c0      	nop			; (mov r8, r8)
    6828:	00003b41 	.word	0x00003b41
    682c:	00006279 	.word	0x00006279

00006830 <http_client_send_request>:
{
    6830:	b5f0      	push	{r4, r5, r6, r7, lr}
    6832:	46d6      	mov	lr, sl
    6834:	b500      	push	{lr}
    6836:	b088      	sub	sp, #32
    6838:	0004      	movs	r4, r0
    683a:	000f      	movs	r7, r1
    683c:	4692      	mov	sl, r2
    683e:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    6840:	2800      	cmp	r0, #0
    6842:	d100      	bne.n	6846 <http_client_send_request+0x16>
    6844:	e0d3      	b.n	69ee <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    6846:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6848:	2b02      	cmp	r3, #2
    684a:	d900      	bls.n	684e <http_client_send_request+0x1e>
    684c:	e0d3      	b.n	69f6 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    684e:	2207      	movs	r2, #7
    6850:	4981      	ldr	r1, [pc, #516]	; (6a58 <http_client_send_request+0x228>)
    6852:	0038      	movs	r0, r7
    6854:	4b81      	ldr	r3, [pc, #516]	; (6a5c <http_client_send_request+0x22c>)
    6856:	4798      	blx	r3
		i = 7;
    6858:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    685a:	2800      	cmp	r0, #0
    685c:	d007      	beq.n	686e <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    685e:	2208      	movs	r2, #8
    6860:	497f      	ldr	r1, [pc, #508]	; (6a60 <http_client_send_request+0x230>)
    6862:	0038      	movs	r0, r7
    6864:	4b7d      	ldr	r3, [pc, #500]	; (6a5c <http_client_send_request+0x22c>)
    6866:	4798      	blx	r3
		i = 8;
    6868:	4246      	negs	r6, r0
    686a:	4146      	adcs	r6, r0
    686c:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    686e:	1c63      	adds	r3, r4, #1
    6870:	19bd      	adds	r5, r7, r6
    6872:	9302      	str	r3, [sp, #8]
    6874:	0018      	movs	r0, r3
    6876:	4b7b      	ldr	r3, [pc, #492]	; (6a64 <http_client_send_request+0x234>)
    6878:	4798      	blx	r3
    687a:	0002      	movs	r2, r0
    687c:	0029      	movs	r1, r5
    687e:	9802      	ldr	r0, [sp, #8]
    6880:	4b76      	ldr	r3, [pc, #472]	; (6a5c <http_client_send_request+0x22c>)
    6882:	4798      	blx	r3
    6884:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    6886:	782b      	ldrb	r3, [r5, #0]
    6888:	2b00      	cmp	r3, #0
    688a:	d052      	beq.n	6932 <http_client_send_request+0x102>
    688c:	2b2f      	cmp	r3, #47	; 0x2f
    688e:	d052      	beq.n	6936 <http_client_send_request+0x106>
    6890:	1c71      	adds	r1, r6, #1
    6892:	1879      	adds	r1, r7, r1
    6894:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    6896:	3201      	adds	r2, #1
    6898:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    689a:	000d      	movs	r5, r1
    689c:	780b      	ldrb	r3, [r1, #0]
    689e:	2b00      	cmp	r3, #0
    68a0:	d002      	beq.n	68a8 <http_client_send_request+0x78>
    68a2:	3101      	adds	r1, #1
    68a4:	2b2f      	cmp	r3, #47	; 0x2f
    68a6:	d1f6      	bne.n	6896 <http_client_send_request+0x66>
	module->host[j] = '\0';
    68a8:	18a2      	adds	r2, r4, r2
    68aa:	2300      	movs	r3, #0
    68ac:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    68ae:	7863      	ldrb	r3, [r4, #1]
    68b0:	2b00      	cmp	r3, #0
    68b2:	d100      	bne.n	68b6 <http_client_send_request+0x86>
    68b4:	e0a3      	b.n	69fe <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    68b6:	0028      	movs	r0, r5
    68b8:	4b6a      	ldr	r3, [pc, #424]	; (6a64 <http_client_send_request+0x234>)
    68ba:	4798      	blx	r3
    68bc:	283f      	cmp	r0, #63	; 0x3f
    68be:	d900      	bls.n	68c2 <http_client_send_request+0x92>
    68c0:	e0a1      	b.n	6a06 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    68c2:	23d4      	movs	r3, #212	; 0xd4
    68c4:	58e0      	ldr	r0, [r4, r3]
    68c6:	2800      	cmp	r0, #0
    68c8:	d001      	beq.n	68ce <http_client_send_request+0x9e>
		free(module->req.ext_header);
    68ca:	4b67      	ldr	r3, [pc, #412]	; (6a68 <http_client_send_request+0x238>)
    68cc:	4798      	blx	r3
	if (ext_header != NULL) {
    68ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    68d0:	2b00      	cmp	r3, #0
    68d2:	d032      	beq.n	693a <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    68d4:	0018      	movs	r0, r3
    68d6:	4b65      	ldr	r3, [pc, #404]	; (6a6c <http_client_send_request+0x23c>)
    68d8:	4798      	blx	r3
    68da:	23d4      	movs	r3, #212	; 0xd4
    68dc:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    68de:	2800      	cmp	r0, #0
    68e0:	d100      	bne.n	68e4 <http_client_send_request+0xb4>
    68e2:	e094      	b.n	6a0e <http_client_send_request+0x1de>
	module->sending = 0;
    68e4:	2241      	movs	r2, #65	; 0x41
    68e6:	5ca3      	ldrb	r3, [r4, r2]
    68e8:	2101      	movs	r1, #1
    68ea:	438b      	bics	r3, r1
    68ec:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    68ee:	2300      	movs	r3, #0
    68f0:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    68f2:	782b      	ldrb	r3, [r5, #0]
    68f4:	2b2f      	cmp	r3, #47	; 0x2f
    68f6:	d024      	beq.n	6942 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    68f8:	222f      	movs	r2, #47	; 0x2f
    68fa:	2370      	movs	r3, #112	; 0x70
    68fc:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    68fe:	782b      	ldrb	r3, [r5, #0]
    6900:	2b00      	cmp	r3, #0
    6902:	d124      	bne.n	694e <http_client_send_request+0x11e>
	if (entity != NULL) {
    6904:	9b03      	ldr	r3, [sp, #12]
    6906:	2b00      	cmp	r3, #0
    6908:	d027      	beq.n	695a <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    690a:	0020      	movs	r0, r4
    690c:	30b0      	adds	r0, #176	; 0xb0
    690e:	2218      	movs	r2, #24
    6910:	0019      	movs	r1, r3
    6912:	4b57      	ldr	r3, [pc, #348]	; (6a70 <http_client_send_request+0x240>)
    6914:	4798      	blx	r3
	module->req.method = method;
    6916:	23c8      	movs	r3, #200	; 0xc8
    6918:	4652      	mov	r2, sl
    691a:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    691c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    691e:	2b01      	cmp	r3, #1
    6920:	d022      	beq.n	6968 <http_client_send_request+0x138>
    6922:	2b00      	cmp	r3, #0
    6924:	d027      	beq.n	6976 <http_client_send_request+0x146>
    6926:	2b02      	cmp	r3, #2
    6928:	d03a      	beq.n	69a0 <http_client_send_request+0x170>
		return -EAGAIN;
    692a:	230b      	movs	r3, #11
    692c:	425b      	negs	r3, r3
    692e:	9301      	str	r3, [sp, #4]
    6930:	e08d      	b.n	6a4e <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    6932:	2200      	movs	r2, #0
    6934:	e7b8      	b.n	68a8 <http_client_send_request+0x78>
    6936:	2200      	movs	r2, #0
    6938:	e7b6      	b.n	68a8 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    693a:	2200      	movs	r2, #0
    693c:	23d4      	movs	r3, #212	; 0xd4
    693e:	50e2      	str	r2, [r4, r3]
    6940:	e7d0      	b.n	68e4 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    6942:	0020      	movs	r0, r4
    6944:	3070      	adds	r0, #112	; 0x70
    6946:	0029      	movs	r1, r5
    6948:	4b4a      	ldr	r3, [pc, #296]	; (6a74 <http_client_send_request+0x244>)
    694a:	4798      	blx	r3
    694c:	e7da      	b.n	6904 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    694e:	0029      	movs	r1, r5
    6950:	0020      	movs	r0, r4
    6952:	3071      	adds	r0, #113	; 0x71
    6954:	4b47      	ldr	r3, [pc, #284]	; (6a74 <http_client_send_request+0x244>)
    6956:	4798      	blx	r3
    6958:	e7d4      	b.n	6904 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    695a:	0020      	movs	r0, r4
    695c:	30b0      	adds	r0, #176	; 0xb0
    695e:	2218      	movs	r2, #24
    6960:	2100      	movs	r1, #0
    6962:	4b45      	ldr	r3, [pc, #276]	; (6a78 <http_client_send_request+0x248>)
    6964:	4798      	blx	r3
    6966:	e7d6      	b.n	6916 <http_client_send_request+0xe6>
		if (!reconnect) {
    6968:	9b01      	ldr	r3, [sp, #4]
    696a:	2b00      	cmp	r3, #0
    696c:	d06f      	beq.n	6a4e <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    696e:	2100      	movs	r1, #0
    6970:	0020      	movs	r0, r4
    6972:	4b42      	ldr	r3, [pc, #264]	; (6a7c <http_client_send_request+0x24c>)
    6974:	4798      	blx	r3
		if (module->config.tls) {
    6976:	2352      	movs	r3, #82	; 0x52
    6978:	5ce2      	ldrb	r2, [r4, r3]
    697a:	1e53      	subs	r3, r2, #1
    697c:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    697e:	b2d2      	uxtb	r2, r2
    6980:	2101      	movs	r1, #1
    6982:	2002      	movs	r0, #2
    6984:	4b3e      	ldr	r3, [pc, #248]	; (6a80 <http_client_send_request+0x250>)
    6986:	4798      	blx	r3
    6988:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    698a:	2800      	cmp	r0, #0
    698c:	db43      	blt.n	6a16 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    698e:	0080      	lsls	r0, r0, #2
    6990:	4b3c      	ldr	r3, [pc, #240]	; (6a84 <http_client_send_request+0x254>)
    6992:	50c4      	str	r4, [r0, r3]
    6994:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    6996:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    6998:	2620      	movs	r6, #32
			isv6 = 1;
    699a:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    699c:	2730      	movs	r7, #48	; 0x30
    699e:	e00c      	b.n	69ba <http_client_send_request+0x18a>
		if (!reconnect) {
    69a0:	9b01      	ldr	r3, [sp, #4]
    69a2:	2b00      	cmp	r3, #0
    69a4:	d1e3      	bne.n	696e <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    69a6:	3303      	adds	r3, #3
    69a8:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    69aa:	0020      	movs	r0, r4
    69ac:	4b36      	ldr	r3, [pc, #216]	; (6a88 <http_client_send_request+0x258>)
    69ae:	4798      	blx	r3
			break;
    69b0:	e04d      	b.n	6a4e <http_client_send_request+0x21e>
			if (isv6) {
    69b2:	2900      	cmp	r1, #0
    69b4:	d001      	beq.n	69ba <http_client_send_request+0x18a>
    69b6:	e012      	b.n	69de <http_client_send_request+0x1ae>
			isv6 = 1;
    69b8:	0001      	movs	r1, r0
	while (*host != '\0') {
    69ba:	782a      	ldrb	r2, [r5, #0]
    69bc:	2a00      	cmp	r2, #0
    69be:	d02e      	beq.n	6a1e <http_client_send_request+0x1ee>
		ch = *host++;
    69c0:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    69c2:	0013      	movs	r3, r2
    69c4:	43b3      	bics	r3, r6
    69c6:	3b41      	subs	r3, #65	; 0x41
    69c8:	2b05      	cmp	r3, #5
    69ca:	d9f5      	bls.n	69b8 <http_client_send_request+0x188>
    69cc:	2a3a      	cmp	r2, #58	; 0x3a
    69ce:	d00a      	beq.n	69e6 <http_client_send_request+0x1b6>
    69d0:	2a2f      	cmp	r2, #47	; 0x2f
    69d2:	d00a      	beq.n	69ea <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    69d4:	2a2e      	cmp	r2, #46	; 0x2e
    69d6:	d0ec      	beq.n	69b2 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    69d8:	403a      	ands	r2, r7
    69da:	2a30      	cmp	r2, #48	; 0x30
    69dc:	d0ed      	beq.n	69ba <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    69de:	9802      	ldr	r0, [sp, #8]
    69e0:	4b2a      	ldr	r3, [pc, #168]	; (6a8c <http_client_send_request+0x25c>)
    69e2:	4798      	blx	r3
    69e4:	e02f      	b.n	6a46 <http_client_send_request+0x216>
			isv6 = 1;
    69e6:	0001      	movs	r1, r0
    69e8:	e7e7      	b.n	69ba <http_client_send_request+0x18a>
    69ea:	0001      	movs	r1, r0
    69ec:	e7e5      	b.n	69ba <http_client_send_request+0x18a>
		return -EINVAL;
    69ee:	2316      	movs	r3, #22
    69f0:	425b      	negs	r3, r3
    69f2:	9301      	str	r3, [sp, #4]
    69f4:	e02b      	b.n	6a4e <http_client_send_request+0x21e>
		return -EBUSY;
    69f6:	2310      	movs	r3, #16
    69f8:	425b      	negs	r3, r3
    69fa:	9301      	str	r3, [sp, #4]
    69fc:	e027      	b.n	6a4e <http_client_send_request+0x21e>
		return -EINVAL;
    69fe:	2316      	movs	r3, #22
    6a00:	425b      	negs	r3, r3
    6a02:	9301      	str	r3, [sp, #4]
    6a04:	e023      	b.n	6a4e <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    6a06:	235b      	movs	r3, #91	; 0x5b
    6a08:	425b      	negs	r3, r3
    6a0a:	9301      	str	r3, [sp, #4]
    6a0c:	e01f      	b.n	6a4e <http_client_send_request+0x21e>
			return -ENOMEM;
    6a0e:	230c      	movs	r3, #12
    6a10:	425b      	negs	r3, r3
    6a12:	9301      	str	r3, [sp, #4]
    6a14:	e01b      	b.n	6a4e <http_client_send_request+0x21e>
			return -ENOSPC;
    6a16:	231c      	movs	r3, #28
    6a18:	425b      	negs	r3, r3
    6a1a:	9301      	str	r3, [sp, #4]
    6a1c:	e017      	b.n	6a4e <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    6a1e:	2302      	movs	r3, #2
    6a20:	aa04      	add	r2, sp, #16
    6a22:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    6a24:	334e      	adds	r3, #78	; 0x4e
    6a26:	5ae3      	ldrh	r3, [r4, r3]
    6a28:	021a      	lsls	r2, r3, #8
    6a2a:	0a1b      	lsrs	r3, r3, #8
    6a2c:	4313      	orrs	r3, r2
    6a2e:	aa04      	add	r2, sp, #16
    6a30:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    6a32:	9802      	ldr	r0, [sp, #8]
    6a34:	4b16      	ldr	r3, [pc, #88]	; (6a90 <http_client_send_request+0x260>)
    6a36:	4798      	blx	r3
    6a38:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    6a3a:	2000      	movs	r0, #0
    6a3c:	5620      	ldrsb	r0, [r4, r0]
    6a3e:	2210      	movs	r2, #16
    6a40:	a904      	add	r1, sp, #16
    6a42:	4b14      	ldr	r3, [pc, #80]	; (6a94 <http_client_send_request+0x264>)
    6a44:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    6a46:	2301      	movs	r3, #1
    6a48:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    6a4a:	2300      	movs	r3, #0
    6a4c:	9301      	str	r3, [sp, #4]
}
    6a4e:	9801      	ldr	r0, [sp, #4]
    6a50:	b008      	add	sp, #32
    6a52:	bc04      	pop	{r2}
    6a54:	4692      	mov	sl, r2
    6a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a58:	0000a5ac 	.word	0x0000a5ac
    6a5c:	0000825d 	.word	0x0000825d
    6a60:	0000a5b4 	.word	0x0000a5b4
    6a64:	0000824f 	.word	0x0000824f
    6a68:	00007d41 	.word	0x00007d41
    6a6c:	00008215 	.word	0x00008215
    6a70:	00007d55 	.word	0x00007d55
    6a74:	00008205 	.word	0x00008205
    6a78:	00007d8b 	.word	0x00007d8b
    6a7c:	00006279 	.word	0x00006279
    6a80:	0000392d 	.word	0x0000392d
    6a84:	20000254 	.word	0x20000254
    6a88:	00006391 	.word	0x00006391
    6a8c:	00003d75 	.word	0x00003d75
    6a90:	00003d09 	.word	0x00003d09
    6a94:	00003ab1 	.word	0x00003ab1

00006a98 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    6a98:	b510      	push	{r4, lr}
	if (module == NULL) {
    6a9a:	2800      	cmp	r0, #0
    6a9c:	d00d      	beq.n	6aba <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    6a9e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    6aa0:	6e02      	ldr	r2, [r0, #96]	; 0x60
    6aa2:	4291      	cmp	r1, r2
    6aa4:	d20a      	bcs.n	6abc <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    6aa6:	1a52      	subs	r2, r2, r1
    6aa8:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    6aaa:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    6aac:	469c      	mov	ip, r3
    6aae:	4461      	add	r1, ip
	recv(module->sock,
    6ab0:	7800      	ldrb	r0, [r0, #0]
    6ab2:	b240      	sxtb	r0, r0
    6ab4:	2300      	movs	r3, #0
    6ab6:	4c04      	ldr	r4, [pc, #16]	; (6ac8 <_http_client_recv_packet+0x30>)
    6ab8:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    6aba:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    6abc:	218b      	movs	r1, #139	; 0x8b
    6abe:	4249      	negs	r1, r1
    6ac0:	4b02      	ldr	r3, [pc, #8]	; (6acc <_http_client_recv_packet+0x34>)
    6ac2:	4798      	blx	r3
		return;
    6ac4:	e7f9      	b.n	6aba <_http_client_recv_packet+0x22>
    6ac6:	46c0      	nop			; (mov r8, r8)
    6ac8:	00003bd9 	.word	0x00003bd9
    6acc:	00006279 	.word	0x00006279

00006ad0 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    6ad0:	b570      	push	{r4, r5, r6, lr}
    6ad2:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    6ad4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    6ad6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    6ad8:	1a5c      	subs	r4, r3, r1
    6ada:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    6adc:	2c00      	cmp	r4, #0
    6ade:	dc02      	bgt.n	6ae6 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    6ae0:	2300      	movs	r3, #0
    6ae2:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    6ae4:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    6ae6:	0022      	movs	r2, r4
    6ae8:	4b01      	ldr	r3, [pc, #4]	; (6af0 <_http_client_move_buffer+0x20>)
    6aea:	4798      	blx	r3
		module->recved_size = remain;
    6aec:	646c      	str	r4, [r5, #68]	; 0x44
    6aee:	e7f9      	b.n	6ae4 <_http_client_move_buffer+0x14>
    6af0:	00007d67 	.word	0x00007d67

00006af4 <_http_client_handle_header>:
{
    6af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6af6:	46ce      	mov	lr, r9
    6af8:	b500      	push	{lr}
    6afa:	b084      	sub	sp, #16
    6afc:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
    6afe:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    6b00:	4b62      	ldr	r3, [pc, #392]	; (6c8c <_http_client_handle_header+0x198>)
    6b02:	4699      	mov	r9, r3
    6b04:	e049      	b.n	6b9a <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
    6b06:	0021      	movs	r1, r4
    6b08:	0038      	movs	r0, r7
    6b0a:	4b61      	ldr	r3, [pc, #388]	; (6c90 <_http_client_handle_header+0x19c>)
    6b0c:	4798      	blx	r3
			return 0;
    6b0e:	2600      	movs	r6, #0
}
    6b10:	0030      	movs	r0, r6
    6b12:	b004      	add	sp, #16
    6b14:	bc04      	pop	{r2}
    6b16:	4691      	mov	r9, r2
    6b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    6b1a:	1ca1      	adds	r1, r4, #2
    6b1c:	0038      	movs	r0, r7
    6b1e:	4b5c      	ldr	r3, [pc, #368]	; (6c90 <_http_client_handle_header+0x19c>)
    6b20:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    6b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6b24:	2b00      	cmp	r3, #0
    6b26:	d00a      	beq.n	6b3e <_http_client_handle_header+0x4a>
    6b28:	22e4      	movs	r2, #228	; 0xe4
    6b2a:	5ab9      	ldrh	r1, [r7, r2]
    6b2c:	2900      	cmp	r1, #0
    6b2e:	d006      	beq.n	6b3e <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
    6b30:	3a08      	subs	r2, #8
    6b32:	58b8      	ldr	r0, [r7, r2]
    6b34:	2800      	cmp	r0, #0
    6b36:	db07      	blt.n	6b48 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    6b38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6b3a:	4290      	cmp	r0, r2
    6b3c:	dc10      	bgt.n	6b60 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
    6b3e:	2201      	movs	r2, #1
    6b40:	23d8      	movs	r3, #216	; 0xd8
    6b42:	50fa      	str	r2, [r7, r3]
			return 1;
    6b44:	2601      	movs	r6, #1
    6b46:	e7e3      	b.n	6b10 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
    6b48:	aa01      	add	r2, sp, #4
    6b4a:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    6b4c:	2101      	movs	r1, #1
    6b4e:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    6b50:	2100      	movs	r1, #0
    6b52:	20e0      	movs	r0, #224	; 0xe0
    6b54:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    6b56:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    6b58:	3102      	adds	r1, #2
    6b5a:	0038      	movs	r0, r7
    6b5c:	4798      	blx	r3
    6b5e:	e7ee      	b.n	6b3e <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
    6b60:	aa01      	add	r2, sp, #4
    6b62:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    6b64:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    6b66:	2100      	movs	r1, #0
    6b68:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    6b6a:	20e0      	movs	r0, #224	; 0xe0
    6b6c:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    6b6e:	3102      	adds	r1, #2
    6b70:	0038      	movs	r0, r7
    6b72:	4798      	blx	r3
    6b74:	e7e3      	b.n	6b3e <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    6b76:	0020      	movs	r0, r4
    6b78:	3010      	adds	r0, #16
    6b7a:	4b46      	ldr	r3, [pc, #280]	; (6c94 <_http_client_handle_header+0x1a0>)
    6b7c:	4798      	blx	r3
    6b7e:	23dc      	movs	r3, #220	; 0xdc
    6b80:	50f8      	str	r0, [r7, r3]
    6b82:	e009      	b.n	6b98 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    6b84:	3201      	adds	r2, #1
    6b86:	4295      	cmp	r5, r2
    6b88:	d006      	beq.n	6b98 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    6b8a:	7813      	ldrb	r3, [r2, #0]
    6b8c:	2b20      	cmp	r3, #32
    6b8e:	d12b      	bne.n	6be8 <_http_client_handle_header+0xf4>
    6b90:	e7f8      	b.n	6b84 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
    6b92:	3a21      	subs	r2, #33	; 0x21
    6b94:	3389      	adds	r3, #137	; 0x89
    6b96:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    6b98:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    6b9a:	493f      	ldr	r1, [pc, #252]	; (6c98 <_http_client_handle_header+0x1a4>)
    6b9c:	0020      	movs	r0, r4
    6b9e:	47c8      	blx	r9
    6ba0:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    6ba2:	d0b0      	beq.n	6b06 <_http_client_handle_header+0x12>
    6ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    6ba6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6ba8:	4694      	mov	ip, r2
    6baa:	4463      	add	r3, ip
    6bac:	4298      	cmp	r0, r3
    6bae:	d2aa      	bcs.n	6b06 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    6bb0:	2202      	movs	r2, #2
    6bb2:	4939      	ldr	r1, [pc, #228]	; (6c98 <_http_client_handle_header+0x1a4>)
    6bb4:	0020      	movs	r0, r4
    6bb6:	4b39      	ldr	r3, [pc, #228]	; (6c9c <_http_client_handle_header+0x1a8>)
    6bb8:	4798      	blx	r3
    6bba:	2800      	cmp	r0, #0
    6bbc:	d0ad      	beq.n	6b1a <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    6bbe:	2210      	movs	r2, #16
    6bc0:	4937      	ldr	r1, [pc, #220]	; (6ca0 <_http_client_handle_header+0x1ac>)
    6bc2:	0020      	movs	r0, r4
    6bc4:	4b35      	ldr	r3, [pc, #212]	; (6c9c <_http_client_handle_header+0x1a8>)
    6bc6:	4798      	blx	r3
    6bc8:	2800      	cmp	r0, #0
    6bca:	d0d4      	beq.n	6b76 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    6bcc:	2213      	movs	r2, #19
    6bce:	4935      	ldr	r1, [pc, #212]	; (6ca4 <_http_client_handle_header+0x1b0>)
    6bd0:	0020      	movs	r0, r4
    6bd2:	4b32      	ldr	r3, [pc, #200]	; (6c9c <_http_client_handle_header+0x1a8>)
    6bd4:	4798      	blx	r3
    6bd6:	1e06      	subs	r6, r0, #0
    6bd8:	d110      	bne.n	6bfc <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    6bda:	0022      	movs	r2, r4
    6bdc:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    6bde:	4295      	cmp	r5, r2
    6be0:	d9da      	bls.n	6b98 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    6be2:	7ce3      	ldrb	r3, [r4, #19]
    6be4:	2b20      	cmp	r3, #32
    6be6:	d0cd      	beq.n	6b84 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    6be8:	2220      	movs	r2, #32
    6bea:	4393      	bics	r3, r2
    6bec:	2b43      	cmp	r3, #67	; 0x43
    6bee:	d0d0      	beq.n	6b92 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
    6bf0:	2186      	movs	r1, #134	; 0x86
    6bf2:	4249      	negs	r1, r1
    6bf4:	0038      	movs	r0, r7
    6bf6:	4b2c      	ldr	r3, [pc, #176]	; (6ca8 <_http_client_handle_header+0x1b4>)
    6bf8:	4798      	blx	r3
					return 0;
    6bfa:	e789      	b.n	6b10 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    6bfc:	220c      	movs	r2, #12
    6bfe:	492b      	ldr	r1, [pc, #172]	; (6cac <_http_client_handle_header+0x1b8>)
    6c00:	0020      	movs	r0, r4
    6c02:	4b26      	ldr	r3, [pc, #152]	; (6c9c <_http_client_handle_header+0x1a8>)
    6c04:	4798      	blx	r3
    6c06:	2800      	cmp	r0, #0
    6c08:	d11d      	bne.n	6c46 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
    6c0a:	0022      	movs	r2, r4
    6c0c:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    6c0e:	4295      	cmp	r5, r2
    6c10:	d9c2      	bls.n	6b98 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    6c12:	7b23      	ldrb	r3, [r4, #12]
    6c14:	2b20      	cmp	r3, #32
    6c16:	d009      	beq.n	6c2c <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    6c18:	2220      	movs	r2, #32
    6c1a:	4393      	bics	r3, r2
    6c1c:	2b4b      	cmp	r3, #75	; 0x4b
    6c1e:	d00c      	beq.n	6c3a <_http_client_handle_header+0x146>
					module->permanent = 0;
    6c20:	2241      	movs	r2, #65	; 0x41
    6c22:	5cbb      	ldrb	r3, [r7, r2]
    6c24:	2102      	movs	r1, #2
    6c26:	438b      	bics	r3, r1
    6c28:	54bb      	strb	r3, [r7, r2]
    6c2a:	e7b5      	b.n	6b98 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    6c2c:	3201      	adds	r2, #1
    6c2e:	4295      	cmp	r5, r2
    6c30:	d0b2      	beq.n	6b98 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    6c32:	7813      	ldrb	r3, [r2, #0]
    6c34:	2b20      	cmp	r3, #32
    6c36:	d1ef      	bne.n	6c18 <_http_client_handle_header+0x124>
    6c38:	e7f8      	b.n	6c2c <_http_client_handle_header+0x138>
					module->permanent = 1;
    6c3a:	3221      	adds	r2, #33	; 0x21
    6c3c:	5cbb      	ldrb	r3, [r7, r2]
    6c3e:	2102      	movs	r1, #2
    6c40:	430b      	orrs	r3, r1
    6c42:	54bb      	strb	r3, [r7, r2]
    6c44:	e7a8      	b.n	6b98 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    6c46:	2205      	movs	r2, #5
    6c48:	4919      	ldr	r1, [pc, #100]	; (6cb0 <_http_client_handle_header+0x1bc>)
    6c4a:	0020      	movs	r0, r4
    6c4c:	4b13      	ldr	r3, [pc, #76]	; (6c9c <_http_client_handle_header+0x1a8>)
    6c4e:	4798      	blx	r3
    6c50:	2800      	cmp	r0, #0
    6c52:	d1a1      	bne.n	6b98 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    6c54:	0020      	movs	r0, r4
    6c56:	3009      	adds	r0, #9
    6c58:	4b0e      	ldr	r3, [pc, #56]	; (6c94 <_http_client_handle_header+0x1a0>)
    6c5a:	4798      	blx	r3
    6c5c:	23e4      	movs	r3, #228	; 0xe4
    6c5e:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    6c60:	2200      	movs	r2, #0
    6c62:	3b08      	subs	r3, #8
    6c64:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    6c66:	7963      	ldrb	r3, [r4, #5]
    6c68:	2b31      	cmp	r3, #49	; 0x31
    6c6a:	d802      	bhi.n	6c72 <_http_client_handle_header+0x17e>
    6c6c:	79e3      	ldrb	r3, [r4, #7]
    6c6e:	2b30      	cmp	r3, #48	; 0x30
    6c70:	d905      	bls.n	6c7e <_http_client_handle_header+0x18a>
				module->permanent = 1;
    6c72:	2241      	movs	r2, #65	; 0x41
    6c74:	5cbb      	ldrb	r3, [r7, r2]
    6c76:	2102      	movs	r1, #2
    6c78:	430b      	orrs	r3, r1
    6c7a:	54bb      	strb	r3, [r7, r2]
    6c7c:	e78c      	b.n	6b98 <_http_client_handle_header+0xa4>
				module->permanent = 0;
    6c7e:	2241      	movs	r2, #65	; 0x41
    6c80:	5cbb      	ldrb	r3, [r7, r2]
    6c82:	2102      	movs	r1, #2
    6c84:	438b      	bics	r3, r1
    6c86:	54bb      	strb	r3, [r7, r2]
    6c88:	e786      	b.n	6b98 <_http_client_handle_header+0xa4>
    6c8a:	46c0      	nop			; (mov r8, r8)
    6c8c:	0000827f 	.word	0x0000827f
    6c90:	00006ad1 	.word	0x00006ad1
    6c94:	00007cd9 	.word	0x00007cd9
    6c98:	0000a80c 	.word	0x0000a80c
    6c9c:	0000825d 	.word	0x0000825d
    6ca0:	0000a58c 	.word	0x0000a58c
    6ca4:	0000a49c 	.word	0x0000a49c
    6ca8:	00006279 	.word	0x00006279
    6cac:	0000a4b0 	.word	0x0000a4b0
    6cb0:	0000a4c0 	.word	0x0000a4c0

00006cb4 <_http_client_handle_entity>:
{
    6cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cb6:	46ce      	mov	lr, r9
    6cb8:	b500      	push	{lr}
    6cba:	b086      	sub	sp, #24
    6cbc:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    6cbe:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    6cc0:	23dc      	movs	r3, #220	; 0xdc
    6cc2:	58c3      	ldr	r3, [r0, r3]
    6cc4:	2b00      	cmp	r3, #0
    6cc6:	db69      	blt.n	6d9c <_http_client_handle_entity+0xe8>
    6cc8:	6e02      	ldr	r2, [r0, #96]	; 0x60
    6cca:	4293      	cmp	r3, r2
    6ccc:	dc2b      	bgt.n	6d26 <_http_client_handle_entity+0x72>
	return 0;
    6cce:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    6cd0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    6cd2:	4293      	cmp	r3, r2
    6cd4:	dc4e      	bgt.n	6d74 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
    6cd6:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    6cd8:	2e00      	cmp	r6, #0
    6cda:	d003      	beq.n	6ce4 <_http_client_handle_entity+0x30>
    6cdc:	22e4      	movs	r2, #228	; 0xe4
    6cde:	5aa1      	ldrh	r1, [r4, r2]
    6ce0:	2900      	cmp	r1, #0
    6ce2:	d10e      	bne.n	6d02 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
    6ce4:	2300      	movs	r3, #0
    6ce6:	22d8      	movs	r2, #216	; 0xd8
    6ce8:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    6cea:	320c      	adds	r2, #12
    6cec:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    6cee:	3341      	adds	r3, #65	; 0x41
    6cf0:	5ce3      	ldrb	r3, [r4, r3]
    6cf2:	079b      	lsls	r3, r3, #30
    6cf4:	d40f      	bmi.n	6d16 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
    6cf6:	2100      	movs	r1, #0
    6cf8:	0020      	movs	r0, r4
    6cfa:	4b71      	ldr	r3, [pc, #452]	; (6ec0 <_http_client_handle_entity+0x20c>)
    6cfc:	4798      	blx	r3
	return 0;
    6cfe:	2000      	movs	r0, #0
    6d00:	e038      	b.n	6d74 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
    6d02:	aa03      	add	r2, sp, #12
    6d04:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    6d06:	2100      	movs	r1, #0
    6d08:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    6d0a:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    6d0c:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    6d0e:	3102      	adds	r1, #2
    6d10:	0020      	movs	r0, r4
    6d12:	47b0      	blx	r6
    6d14:	e7e6      	b.n	6ce4 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    6d16:	23dc      	movs	r3, #220	; 0xdc
    6d18:	58e1      	ldr	r1, [r4, r3]
    6d1a:	1869      	adds	r1, r5, r1
    6d1c:	0020      	movs	r0, r4
    6d1e:	4b69      	ldr	r3, [pc, #420]	; (6ec4 <_http_client_handle_entity+0x210>)
    6d20:	4798      	blx	r3
				return module->recved_size;
    6d22:	6c60      	ldr	r0, [r4, #68]	; 0x44
    6d24:	e026      	b.n	6d74 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
    6d26:	6c42      	ldr	r2, [r0, #68]	; 0x44
    6d28:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    6d2a:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    6d2c:	21e0      	movs	r1, #224	; 0xe0
    6d2e:	5840      	ldr	r0, [r0, r1]
    6d30:	4684      	mov	ip, r0
    6d32:	4462      	add	r2, ip
    6d34:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    6d36:	4293      	cmp	r3, r2
    6d38:	dc20      	bgt.n	6d7c <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
    6d3a:	2300      	movs	r3, #0
    6d3c:	22d8      	movs	r2, #216	; 0xd8
    6d3e:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    6d40:	320c      	adds	r2, #12
    6d42:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    6d44:	3ae3      	subs	r2, #227	; 0xe3
    6d46:	ab03      	add	r3, sp, #12
    6d48:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    6d4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6d4c:	2b00      	cmp	r3, #0
    6d4e:	d007      	beq.n	6d60 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    6d50:	ae03      	add	r6, sp, #12
    6d52:	0032      	movs	r2, r6
    6d54:	2103      	movs	r1, #3
    6d56:	0020      	movs	r0, r4
    6d58:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    6d5a:	7a33      	ldrb	r3, [r6, #8]
    6d5c:	2b01      	cmp	r3, #1
    6d5e:	d103      	bne.n	6d68 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
    6d60:	2341      	movs	r3, #65	; 0x41
    6d62:	5ce3      	ldrb	r3, [r4, r3]
    6d64:	079b      	lsls	r3, r3, #30
    6d66:	d510      	bpl.n	6d8a <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
    6d68:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6d6a:	18e9      	adds	r1, r5, r3
    6d6c:	0020      	movs	r0, r4
    6d6e:	4b55      	ldr	r3, [pc, #340]	; (6ec4 <_http_client_handle_entity+0x210>)
    6d70:	4798      	blx	r3
	return 0;
    6d72:	2000      	movs	r0, #0
}
    6d74:	b006      	add	sp, #24
    6d76:	bc04      	pop	{r2}
    6d78:	4691      	mov	r9, r2
    6d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    6d7c:	2200      	movs	r2, #0
    6d7e:	ab03      	add	r3, sp, #12
    6d80:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    6d82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6d84:	2b00      	cmp	r3, #0
    6d86:	d0ef      	beq.n	6d68 <_http_client_handle_entity+0xb4>
    6d88:	e7e2      	b.n	6d50 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
    6d8a:	484f      	ldr	r0, [pc, #316]	; (6ec8 <_http_client_handle_entity+0x214>)
    6d8c:	4b4f      	ldr	r3, [pc, #316]	; (6ecc <_http_client_handle_entity+0x218>)
    6d8e:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    6d90:	2100      	movs	r1, #0
    6d92:	0020      	movs	r0, r4
    6d94:	4b4a      	ldr	r3, [pc, #296]	; (6ec0 <_http_client_handle_entity+0x20c>)
    6d96:	4798      	blx	r3
					return 0;
    6d98:	2000      	movs	r0, #0
    6d9a:	e7eb      	b.n	6d74 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
    6d9c:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    6d9e:	2300      	movs	r3, #0
    6da0:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
    6da2:	26e0      	movs	r6, #224	; 0xe0
    6da4:	e00a      	b.n	6dbc <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
    6da6:	2341      	movs	r3, #65	; 0x41
    6da8:	5ce3      	ldrb	r3, [r4, r3]
    6daa:	079b      	lsls	r3, r3, #30
    6dac:	d51b      	bpl.n	6de6 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
    6dae:	1ca9      	adds	r1, r5, #2
    6db0:	0020      	movs	r0, r4
    6db2:	4b44      	ldr	r3, [pc, #272]	; (6ec4 <_http_client_handle_entity+0x210>)
    6db4:	4798      	blx	r3
	} while(module->recved_size > 0);
    6db6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6db8:	2b00      	cmp	r3, #0
    6dba:	d073      	beq.n	6ea4 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
    6dbc:	59a3      	ldr	r3, [r4, r6]
    6dbe:	2b00      	cmp	r3, #0
    6dc0:	db30      	blt.n	6e24 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
    6dc2:	d116      	bne.n	6df2 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
    6dc4:	22d8      	movs	r2, #216	; 0xd8
    6dc6:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    6dc8:	320c      	adds	r2, #12
    6dca:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    6dcc:	3ae3      	subs	r2, #227	; 0xe3
    6dce:	4669      	mov	r1, sp
    6dd0:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    6dd2:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    6dd4:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    6dd6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6dd8:	2b00      	cmp	r3, #0
    6dda:	d0e4      	beq.n	6da6 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    6ddc:	466a      	mov	r2, sp
    6dde:	2103      	movs	r1, #3
    6de0:	0020      	movs	r0, r4
    6de2:	4798      	blx	r3
    6de4:	e7df      	b.n	6da6 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
    6de6:	2100      	movs	r1, #0
    6de8:	0020      	movs	r0, r4
    6dea:	4b35      	ldr	r3, [pc, #212]	; (6ec0 <_http_client_handle_entity+0x20c>)
    6dec:	4798      	blx	r3
	return 0;
    6dee:	2000      	movs	r0, #0
    6df0:	e7c0      	b.n	6d74 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
    6df2:	42bb      	cmp	r3, r7
    6df4:	dcdf      	bgt.n	6db6 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
    6df6:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    6df8:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    6dfa:	2300      	movs	r3, #0
    6dfc:	466a      	mov	r2, sp
    6dfe:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    6e00:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6e02:	2b00      	cmp	r3, #0
    6e04:	d002      	beq.n	6e0c <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    6e06:	2103      	movs	r1, #3
    6e08:	0020      	movs	r0, r4
    6e0a:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    6e0c:	59a3      	ldr	r3, [r4, r6]
    6e0e:	1c99      	adds	r1, r3, #2
    6e10:	1869      	adds	r1, r5, r1
    6e12:	0020      	movs	r0, r4
    6e14:	4b2b      	ldr	r3, [pc, #172]	; (6ec4 <_http_client_handle_entity+0x210>)
    6e16:	4798      	blx	r3
				length = (int)module->recved_size;
    6e18:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    6e1a:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    6e1c:	2301      	movs	r3, #1
    6e1e:	425b      	negs	r3, r3
    6e20:	51a3      	str	r3, [r4, r6]
    6e22:	e7c8      	b.n	6db6 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
    6e24:	2300      	movs	r3, #0
    6e26:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    6e28:	2f00      	cmp	r7, #0
    6e2a:	dd04      	ble.n	6e36 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
    6e2c:	782b      	ldrb	r3, [r5, #0]
    6e2e:	2b0a      	cmp	r3, #10
    6e30:	d11c      	bne.n	6e6c <_http_client_handle_entity+0x1b8>
					buffer++;
    6e32:	3501      	adds	r5, #1
					length--;
    6e34:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    6e36:	59a3      	ldr	r3, [r4, r6]
    6e38:	6e22      	ldr	r2, [r4, #96]	; 0x60
    6e3a:	4293      	cmp	r3, r2
    6e3c:	dc39      	bgt.n	6eb2 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
    6e3e:	2f00      	cmp	r7, #0
    6e40:	d1b9      	bne.n	6db6 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
    6e42:	2201      	movs	r2, #1
    6e44:	4252      	negs	r2, r2
    6e46:	23e0      	movs	r3, #224	; 0xe0
    6e48:	50e2      	str	r2, [r4, r3]
    6e4a:	e7d0      	b.n	6dee <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    6e4c:	001a      	movs	r2, r3
    6e4e:	3a61      	subs	r2, #97	; 0x61
    6e50:	2a05      	cmp	r2, #5
    6e52:	d818      	bhi.n	6e86 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    6e54:	59a2      	ldr	r2, [r4, r6]
    6e56:	0112      	lsls	r2, r2, #4
    6e58:	18d3      	adds	r3, r2, r3
    6e5a:	3b61      	subs	r3, #97	; 0x61
    6e5c:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    6e5e:	3501      	adds	r5, #1
    6e60:	3f01      	subs	r7, #1
    6e62:	2f00      	cmp	r7, #0
    6e64:	d020      	beq.n	6ea8 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
    6e66:	782b      	ldrb	r3, [r5, #0]
    6e68:	2b0a      	cmp	r3, #10
    6e6a:	d0e2      	beq.n	6e32 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
    6e6c:	464a      	mov	r2, r9
    6e6e:	2a00      	cmp	r2, #0
    6e70:	d1f5      	bne.n	6e5e <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
    6e72:	001a      	movs	r2, r3
    6e74:	3a30      	subs	r2, #48	; 0x30
    6e76:	2a09      	cmp	r2, #9
    6e78:	d8e8      	bhi.n	6e4c <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    6e7a:	59a2      	ldr	r2, [r4, r6]
    6e7c:	0112      	lsls	r2, r2, #4
    6e7e:	18d3      	adds	r3, r2, r3
    6e80:	3b30      	subs	r3, #48	; 0x30
    6e82:	51a3      	str	r3, [r4, r6]
    6e84:	e7eb      	b.n	6e5e <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    6e86:	001a      	movs	r2, r3
    6e88:	3a41      	subs	r2, #65	; 0x41
    6e8a:	2a05      	cmp	r2, #5
    6e8c:	d805      	bhi.n	6e9a <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    6e8e:	59a2      	ldr	r2, [r4, r6]
    6e90:	0112      	lsls	r2, r2, #4
    6e92:	18d3      	adds	r3, r2, r3
    6e94:	3b41      	subs	r3, #65	; 0x41
    6e96:	51a3      	str	r3, [r4, r6]
    6e98:	e7e1      	b.n	6e5e <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
    6e9a:	3b3b      	subs	r3, #59	; 0x3b
    6e9c:	425a      	negs	r2, r3
    6e9e:	415a      	adcs	r2, r3
    6ea0:	4691      	mov	r9, r2
    6ea2:	e7dc      	b.n	6e5e <_http_client_handle_entity+0x1aa>
	return 0;
    6ea4:	2000      	movs	r0, #0
    6ea6:	e765      	b.n	6d74 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    6ea8:	23e0      	movs	r3, #224	; 0xe0
    6eaa:	58e3      	ldr	r3, [r4, r3]
    6eac:	6e22      	ldr	r2, [r4, #96]	; 0x60
    6eae:	4293      	cmp	r3, r2
    6eb0:	ddc7      	ble.n	6e42 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
    6eb2:	218b      	movs	r1, #139	; 0x8b
    6eb4:	4249      	negs	r1, r1
    6eb6:	0020      	movs	r0, r4
    6eb8:	4b01      	ldr	r3, [pc, #4]	; (6ec0 <_http_client_handle_entity+0x20c>)
    6eba:	4798      	blx	r3
    6ebc:	e797      	b.n	6dee <_http_client_handle_entity+0x13a>
    6ebe:	46c0      	nop			; (mov r8, r8)
    6ec0:	00006279 	.word	0x00006279
    6ec4:	00006ad1 	.word	0x00006ad1
    6ec8:	0000a498 	.word	0x0000a498
    6ecc:	00008009 	.word	0x00008009

00006ed0 <_http_client_handle_response>:
{
    6ed0:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    6ed2:	23d8      	movs	r3, #216	; 0xd8
    6ed4:	58c3      	ldr	r3, [r0, r3]
    6ed6:	2b00      	cmp	r3, #0
    6ed8:	d003      	beq.n	6ee2 <_http_client_handle_response+0x12>
    6eda:	2b01      	cmp	r3, #1
    6edc:	d004      	beq.n	6ee8 <_http_client_handle_response+0x18>
	return 0;
    6ede:	2000      	movs	r0, #0
    6ee0:	e001      	b.n	6ee6 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
    6ee2:	4b03      	ldr	r3, [pc, #12]	; (6ef0 <_http_client_handle_response+0x20>)
    6ee4:	4798      	blx	r3
}
    6ee6:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    6ee8:	4b02      	ldr	r3, [pc, #8]	; (6ef4 <_http_client_handle_response+0x24>)
    6eea:	4798      	blx	r3
    6eec:	e7fb      	b.n	6ee6 <_http_client_handle_response+0x16>
    6eee:	46c0      	nop			; (mov r8, r8)
    6ef0:	00006af5 	.word	0x00006af5
    6ef4:	00006cb5 	.word	0x00006cb5

00006ef8 <_http_client_recved_packet>:
{
    6ef8:	b570      	push	{r4, r5, r6, lr}
    6efa:	0004      	movs	r4, r0
	module->recved_size += read_len;
    6efc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    6efe:	469c      	mov	ip, r3
    6f00:	4461      	add	r1, ip
    6f02:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    6f04:	2358      	movs	r3, #88	; 0x58
    6f06:	5ac3      	ldrh	r3, [r0, r3]
    6f08:	2b00      	cmp	r3, #0
    6f0a:	d105      	bne.n	6f18 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
    6f0c:	4d05      	ldr	r5, [pc, #20]	; (6f24 <_http_client_recved_packet+0x2c>)
    6f0e:	0020      	movs	r0, r4
    6f10:	47a8      	blx	r5
    6f12:	2800      	cmp	r0, #0
    6f14:	d1fb      	bne.n	6f0e <_http_client_recved_packet+0x16>
}
    6f16:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    6f18:	6c81      	ldr	r1, [r0, #72]	; 0x48
    6f1a:	6d40      	ldr	r0, [r0, #84]	; 0x54
    6f1c:	4b02      	ldr	r3, [pc, #8]	; (6f28 <_http_client_recved_packet+0x30>)
    6f1e:	4798      	blx	r3
    6f20:	e7f4      	b.n	6f0c <_http_client_recved_packet+0x14>
    6f22:	46c0      	nop			; (mov r8, r8)
    6f24:	00006ed1 	.word	0x00006ed1
    6f28:	000072a5 	.word	0x000072a5

00006f2c <http_client_socket_event_handler>:
{
    6f2c:	b510      	push	{r4, lr}
    6f2e:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
    6f30:	0080      	lsls	r0, r0, #2
    6f32:	4b65      	ldr	r3, [pc, #404]	; (70c8 <http_client_socket_event_handler+0x19c>)
    6f34:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    6f36:	2c00      	cmp	r4, #0
    6f38:	d006      	beq.n	6f48 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
    6f3a:	2906      	cmp	r1, #6
    6f3c:	d051      	beq.n	6fe2 <http_client_socket_event_handler+0xb6>
    6f3e:	2907      	cmp	r1, #7
    6f40:	d100      	bne.n	6f44 <http_client_socket_event_handler+0x18>
    6f42:	e08a      	b.n	705a <http_client_socket_event_handler+0x12e>
    6f44:	2905      	cmp	r1, #5
    6f46:	d001      	beq.n	6f4c <http_client_socket_event_handler+0x20>
}
    6f48:	b004      	add	sp, #16
    6f4a:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    6f4c:	2301      	movs	r3, #1
    6f4e:	56d3      	ldrsb	r3, [r2, r3]
    6f50:	1e1a      	subs	r2, r3, #0
    6f52:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    6f54:	db15      	blt.n	6f82 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
    6f56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6f58:	2b00      	cmp	r3, #0
    6f5a:	d003      	beq.n	6f64 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    6f5c:	aa01      	add	r2, sp, #4
    6f5e:	2100      	movs	r1, #0
    6f60:	0020      	movs	r0, r4
    6f62:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    6f64:	2303      	movs	r3, #3
    6f66:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    6f68:	3355      	adds	r3, #85	; 0x55
    6f6a:	5ae2      	ldrh	r2, [r4, r3]
    6f6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    6f6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6f70:	4b56      	ldr	r3, [pc, #344]	; (70cc <http_client_socket_event_handler+0x1a0>)
    6f72:	4798      	blx	r3
    		_http_client_recv_packet(module);
    6f74:	0020      	movs	r0, r4
    6f76:	4b56      	ldr	r3, [pc, #344]	; (70d0 <http_client_socket_event_handler+0x1a4>)
    6f78:	4798      	blx	r3
			_http_client_request(module);
    6f7a:	0020      	movs	r0, r4
    6f7c:	4b55      	ldr	r3, [pc, #340]	; (70d4 <http_client_socket_event_handler+0x1a8>)
    6f7e:	4798      	blx	r3
    6f80:	e7e2      	b.n	6f48 <http_client_socket_event_handler+0x1c>
	switch (err) {
    6f82:	330e      	adds	r3, #14
    6f84:	b2d9      	uxtb	r1, r3
    6f86:	290e      	cmp	r1, #14
    6f88:	d81e      	bhi.n	6fc8 <http_client_socket_event_handler+0x9c>
    6f8a:	008b      	lsls	r3, r1, #2
    6f8c:	4952      	ldr	r1, [pc, #328]	; (70d8 <http_client_socket_event_handler+0x1ac>)
    6f8e:	58cb      	ldr	r3, [r1, r3]
    6f90:	469f      	mov	pc, r3
			return -ENOENT;
    6f92:	2102      	movs	r1, #2
    6f94:	4249      	negs	r1, r1
    6f96:	e01d      	b.n	6fd4 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
    6f98:	2170      	movs	r1, #112	; 0x70
    6f9a:	4249      	negs	r1, r1
    6f9c:	e01a      	b.n	6fd4 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    6f9e:	210c      	movs	r1, #12
    6fa0:	4249      	negs	r1, r1
    6fa2:	e017      	b.n	6fd4 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
    6fa4:	2116      	movs	r1, #22
    6fa6:	4249      	negs	r1, r1
    6fa8:	e014      	b.n	6fd4 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    6faa:	210c      	movs	r1, #12
    6fac:	4249      	negs	r1, r1
    6fae:	e011      	b.n	6fd4 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
    6fb0:	2179      	movs	r1, #121	; 0x79
    6fb2:	4249      	negs	r1, r1
    6fb4:	e00e      	b.n	6fd4 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
    6fb6:	2168      	movs	r1, #104	; 0x68
    6fb8:	4249      	negs	r1, r1
    6fba:	e00b      	b.n	6fd4 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
    6fbc:	210b      	movs	r1, #11
    6fbe:	4249      	negs	r1, r1
    6fc0:	e008      	b.n	6fd4 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
    6fc2:	2110      	movs	r1, #16
    6fc4:	4249      	negs	r1, r1
    6fc6:	e005      	b.n	6fd4 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
    6fc8:	2a00      	cmp	r2, #0
    6fca:	db07      	blt.n	6fdc <http_client_socket_event_handler+0xb0>
			return 0;
    6fcc:	2100      	movs	r1, #0
    6fce:	e001      	b.n	6fd4 <http_client_socket_event_handler+0xa8>
			return -EIO;
    6fd0:	2105      	movs	r1, #5
    6fd2:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    6fd4:	0020      	movs	r0, r4
    6fd6:	4b41      	ldr	r3, [pc, #260]	; (70dc <http_client_socket_event_handler+0x1b0>)
    6fd8:	4798      	blx	r3
    6fda:	e7b5      	b.n	6f48 <http_client_socket_event_handler+0x1c>
				return -EIO;
    6fdc:	2105      	movs	r1, #5
    6fde:	4249      	negs	r1, r1
    6fe0:	e7f8      	b.n	6fd4 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
    6fe2:	2304      	movs	r3, #4
    6fe4:	5ed1      	ldrsh	r1, [r2, r3]
    6fe6:	2900      	cmp	r1, #0
    6fe8:	dd06      	ble.n	6ff8 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    6fea:	0020      	movs	r0, r4
    6fec:	4b3c      	ldr	r3, [pc, #240]	; (70e0 <http_client_socket_event_handler+0x1b4>)
    6fee:	4798      	blx	r3
		_http_client_recv_packet(module);
    6ff0:	0020      	movs	r0, r4
    6ff2:	4b37      	ldr	r3, [pc, #220]	; (70d0 <http_client_socket_event_handler+0x1a4>)
    6ff4:	4798      	blx	r3
		break;
    6ff6:	e7a7      	b.n	6f48 <http_client_socket_event_handler+0x1c>
	switch (err) {
    6ff8:	000b      	movs	r3, r1
    6ffa:	330e      	adds	r3, #14
    6ffc:	b29a      	uxth	r2, r3
    6ffe:	2a0e      	cmp	r2, #14
    7000:	d81e      	bhi.n	7040 <http_client_socket_event_handler+0x114>
    7002:	0093      	lsls	r3, r2, #2
    7004:	4a37      	ldr	r2, [pc, #220]	; (70e4 <http_client_socket_event_handler+0x1b8>)
    7006:	58d3      	ldr	r3, [r2, r3]
    7008:	469f      	mov	pc, r3
			return -ENOENT;
    700a:	2102      	movs	r1, #2
    700c:	4249      	negs	r1, r1
    700e:	e01d      	b.n	704c <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    7010:	2170      	movs	r1, #112	; 0x70
    7012:	4249      	negs	r1, r1
    7014:	e01a      	b.n	704c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    7016:	210c      	movs	r1, #12
    7018:	4249      	negs	r1, r1
    701a:	e017      	b.n	704c <http_client_socket_event_handler+0x120>
			return -EINVAL;
    701c:	2116      	movs	r1, #22
    701e:	4249      	negs	r1, r1
    7020:	e014      	b.n	704c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    7022:	210c      	movs	r1, #12
    7024:	4249      	negs	r1, r1
    7026:	e011      	b.n	704c <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    7028:	2179      	movs	r1, #121	; 0x79
    702a:	4249      	negs	r1, r1
    702c:	e00e      	b.n	704c <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    702e:	2168      	movs	r1, #104	; 0x68
    7030:	4249      	negs	r1, r1
    7032:	e00b      	b.n	704c <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    7034:	210b      	movs	r1, #11
    7036:	4249      	negs	r1, r1
    7038:	e008      	b.n	704c <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    703a:	2110      	movs	r1, #16
    703c:	4249      	negs	r1, r1
    703e:	e005      	b.n	704c <http_client_socket_event_handler+0x120>
			if (err < 0) {
    7040:	2900      	cmp	r1, #0
    7042:	db07      	blt.n	7054 <http_client_socket_event_handler+0x128>
			return 0;
    7044:	2100      	movs	r1, #0
    7046:	e001      	b.n	704c <http_client_socket_event_handler+0x120>
			return -EIO;
    7048:	2105      	movs	r1, #5
    704a:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    704c:	0020      	movs	r0, r4
    704e:	4b23      	ldr	r3, [pc, #140]	; (70dc <http_client_socket_event_handler+0x1b0>)
    7050:	4798      	blx	r3
    7052:	e7cd      	b.n	6ff0 <http_client_socket_event_handler+0xc4>
				return -EIO;
    7054:	2105      	movs	r1, #5
    7056:	4249      	negs	r1, r1
    7058:	e7f8      	b.n	704c <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    705a:	2300      	movs	r3, #0
    705c:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    705e:	2b00      	cmp	r3, #0
    7060:	db08      	blt.n	7074 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    7062:	0020      	movs	r0, r4
    7064:	4b1b      	ldr	r3, [pc, #108]	; (70d4 <http_client_socket_event_handler+0x1a8>)
    7066:	4798      	blx	r3
		module->sending = 0;
    7068:	2241      	movs	r2, #65	; 0x41
    706a:	5ca3      	ldrb	r3, [r4, r2]
    706c:	2101      	movs	r1, #1
    706e:	438b      	bics	r3, r1
    7070:	54a3      	strb	r3, [r4, r2]
    	break;
    7072:	e769      	b.n	6f48 <http_client_socket_event_handler+0x1c>
	switch (err) {
    7074:	330e      	adds	r3, #14
    7076:	b29a      	uxth	r2, r3
    7078:	2a0d      	cmp	r2, #13
    707a:	d81e      	bhi.n	70ba <http_client_socket_event_handler+0x18e>
    707c:	0093      	lsls	r3, r2, #2
    707e:	4a1a      	ldr	r2, [pc, #104]	; (70e8 <http_client_socket_event_handler+0x1bc>)
    7080:	58d3      	ldr	r3, [r2, r3]
    7082:	469f      	mov	pc, r3
			return -ENOENT;
    7084:	2102      	movs	r1, #2
    7086:	4249      	negs	r1, r1
    7088:	e019      	b.n	70be <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    708a:	2170      	movs	r1, #112	; 0x70
    708c:	4249      	negs	r1, r1
    708e:	e016      	b.n	70be <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    7090:	210c      	movs	r1, #12
    7092:	4249      	negs	r1, r1
    7094:	e013      	b.n	70be <http_client_socket_event_handler+0x192>
			return -EINVAL;
    7096:	2116      	movs	r1, #22
    7098:	4249      	negs	r1, r1
    709a:	e010      	b.n	70be <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    709c:	210c      	movs	r1, #12
    709e:	4249      	negs	r1, r1
    70a0:	e00d      	b.n	70be <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    70a2:	2179      	movs	r1, #121	; 0x79
    70a4:	4249      	negs	r1, r1
    70a6:	e00a      	b.n	70be <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    70a8:	2168      	movs	r1, #104	; 0x68
    70aa:	4249      	negs	r1, r1
    70ac:	e007      	b.n	70be <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    70ae:	210b      	movs	r1, #11
    70b0:	4249      	negs	r1, r1
    70b2:	e004      	b.n	70be <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    70b4:	2110      	movs	r1, #16
    70b6:	4249      	negs	r1, r1
    70b8:	e001      	b.n	70be <http_client_socket_event_handler+0x192>
			return -EIO;
    70ba:	2105      	movs	r1, #5
    70bc:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    70be:	0020      	movs	r0, r4
    70c0:	4b06      	ldr	r3, [pc, #24]	; (70dc <http_client_socket_event_handler+0x1b0>)
    70c2:	4798      	blx	r3
    70c4:	e7d0      	b.n	7068 <http_client_socket_event_handler+0x13c>
    70c6:	46c0      	nop			; (mov r8, r8)
    70c8:	20000254 	.word	0x20000254
    70cc:	00007279 	.word	0x00007279
    70d0:	00006a99 	.word	0x00006a99
    70d4:	00006391 	.word	0x00006391
    70d8:	0000a3d8 	.word	0x0000a3d8
    70dc:	00006279 	.word	0x00006279
    70e0:	00006ef9 	.word	0x00006ef9
    70e4:	0000a414 	.word	0x0000a414
    70e8:	0000a450 	.word	0x0000a450

000070ec <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    70ec:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    70ee:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    70f0:	2200      	movs	r2, #0
    70f2:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    70f4:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    70f6:	9b00      	ldr	r3, [sp, #0]
    70f8:	60c3      	str	r3, [r0, #12]
}
    70fa:	4770      	bx	lr

000070fc <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    70fc:	b510      	push	{r4, lr}
    70fe:	0004      	movs	r4, r0
	if(writer->written > 0) {
    7100:	6842      	ldr	r2, [r0, #4]
    7102:	2a00      	cmp	r2, #0
    7104:	d100      	bne.n	7108 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    7106:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    7108:	6901      	ldr	r1, [r0, #16]
    710a:	68c0      	ldr	r0, [r0, #12]
    710c:	68a3      	ldr	r3, [r4, #8]
    710e:	4798      	blx	r3
		writer->written = 0;
    7110:	2300      	movs	r3, #0
    7112:	6063      	str	r3, [r4, #4]
}
    7114:	e7f7      	b.n	7106 <stream_writer_send_remain+0xa>
	...

00007118 <stream_writer_send_8>:
{
    7118:	b570      	push	{r4, r5, r6, lr}
    711a:	0004      	movs	r4, r0
    711c:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    711e:	6803      	ldr	r3, [r0, #0]
    7120:	6842      	ldr	r2, [r0, #4]
    7122:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    7124:	2b00      	cmp	r3, #0
    7126:	dd05      	ble.n	7134 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    7128:	6922      	ldr	r2, [r4, #16]
    712a:	6863      	ldr	r3, [r4, #4]
    712c:	1c59      	adds	r1, r3, #1
    712e:	6061      	str	r1, [r4, #4]
    7130:	54d5      	strb	r5, [r2, r3]
}
    7132:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    7134:	4b01      	ldr	r3, [pc, #4]	; (713c <stream_writer_send_8+0x24>)
    7136:	4798      	blx	r3
    7138:	e7f6      	b.n	7128 <stream_writer_send_8+0x10>
    713a:	46c0      	nop			; (mov r8, r8)
    713c:	000070fd 	.word	0x000070fd

00007140 <stream_writer_send_buffer>:
{
    7140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7142:	0006      	movs	r6, r0
    7144:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    7146:	2a00      	cmp	r2, #0
    7148:	d008      	beq.n	715c <stream_writer_send_buffer+0x1c>
    714a:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    714c:	4f04      	ldr	r7, [pc, #16]	; (7160 <stream_writer_send_buffer+0x20>)
    714e:	2100      	movs	r1, #0
    7150:	5661      	ldrsb	r1, [r4, r1]
    7152:	0030      	movs	r0, r6
    7154:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    7156:	3401      	adds	r4, #1
    7158:	42a5      	cmp	r5, r4
    715a:	d1f8      	bne.n	714e <stream_writer_send_buffer+0xe>
}
    715c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    715e:	46c0      	nop			; (mov r8, r8)
    7160:	00007119 	.word	0x00007119

00007164 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    7164:	4a02      	ldr	r2, [pc, #8]	; (7170 <sw_timer_tcc_callback+0xc>)
    7166:	6813      	ldr	r3, [r2, #0]
    7168:	3301      	adds	r3, #1
    716a:	6013      	str	r3, [r2, #0]
}
    716c:	4770      	bx	lr
    716e:	46c0      	nop			; (mov r8, r8)
    7170:	20000270 	.word	0x20000270

00007174 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    7174:	2364      	movs	r3, #100	; 0x64
    7176:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    7178:	2300      	movs	r3, #0
    717a:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    717c:	7043      	strb	r3, [r0, #1]
}
    717e:	4770      	bx	lr

00007180 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    7180:	b5f0      	push	{r4, r5, r6, r7, lr}
    7182:	46c6      	mov	lr, r8
    7184:	b500      	push	{lr}
    7186:	b0ac      	sub	sp, #176	; 0xb0
    7188:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    718a:	466e      	mov	r6, sp
    718c:	4b1d      	ldr	r3, [pc, #116]	; (7204 <sw_timer_init+0x84>)
    718e:	466a      	mov	r2, sp
    7190:	cb92      	ldmia	r3!, {r1, r4, r7}
    7192:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    7194:	886b      	ldrh	r3, [r5, #2]
    7196:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    7198:	3014      	adds	r0, #20
    719a:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    719c:	782b      	ldrb	r3, [r5, #0]
    719e:	009b      	lsls	r3, r3, #2
    71a0:	5999      	ldr	r1, [r3, r6]
    71a2:	0017      	movs	r7, r2
    71a4:	0010      	movs	r0, r2
    71a6:	4b18      	ldr	r3, [pc, #96]	; (7208 <sw_timer_init+0x88>)
    71a8:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    71aa:	2000      	movs	r0, #0
    71ac:	4b17      	ldr	r3, [pc, #92]	; (720c <sw_timer_init+0x8c>)
    71ae:	4798      	blx	r3
    71b0:	4b17      	ldr	r3, [pc, #92]	; (7210 <sw_timer_init+0x90>)
    71b2:	7a1b      	ldrb	r3, [r3, #8]
    71b4:	b2db      	uxtb	r3, r3
    71b6:	40d8      	lsrs	r0, r3
    71b8:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    71ba:	8869      	ldrh	r1, [r5, #2]
    71bc:	20fa      	movs	r0, #250	; 0xfa
    71be:	0200      	lsls	r0, r0, #8
    71c0:	4b14      	ldr	r3, [pc, #80]	; (7214 <sw_timer_init+0x94>)
    71c2:	4798      	blx	r3
    71c4:	0001      	movs	r1, r0
    71c6:	4640      	mov	r0, r8
    71c8:	4b13      	ldr	r3, [pc, #76]	; (7218 <sw_timer_init+0x98>)
    71ca:	4798      	blx	r3
    71cc:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    71ce:	2305      	movs	r3, #5
    71d0:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    71d2:	782b      	ldrb	r3, [r5, #0]
    71d4:	009b      	lsls	r3, r3, #2
    71d6:	5999      	ldr	r1, [r3, r6]
    71d8:	003a      	movs	r2, r7
    71da:	0020      	movs	r0, r4
    71dc:	4b0f      	ldr	r3, [pc, #60]	; (721c <sw_timer_init+0x9c>)
    71de:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    71e0:	786a      	ldrb	r2, [r5, #1]
    71e2:	3208      	adds	r2, #8
    71e4:	b2d2      	uxtb	r2, r2
    71e6:	490e      	ldr	r1, [pc, #56]	; (7220 <sw_timer_init+0xa0>)
    71e8:	0020      	movs	r0, r4
    71ea:	4b0e      	ldr	r3, [pc, #56]	; (7224 <sw_timer_init+0xa4>)
    71ec:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    71ee:	7869      	ldrb	r1, [r5, #1]
    71f0:	3108      	adds	r1, #8
    71f2:	b2c9      	uxtb	r1, r1
    71f4:	0020      	movs	r0, r4
    71f6:	4b0c      	ldr	r3, [pc, #48]	; (7228 <sw_timer_init+0xa8>)
    71f8:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    71fa:	b02c      	add	sp, #176	; 0xb0
    71fc:	bc04      	pop	{r2}
    71fe:	4690      	mov	r8, r2
    7200:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7202:	46c0      	nop			; (mov r8, r8)
    7204:	0000a5c0 	.word	0x0000a5c0
    7208:	0000593d 	.word	0x0000593d
    720c:	00005699 	.word	0x00005699
    7210:	40000400 	.word	0x40000400
    7214:	00007aad 	.word	0x00007aad
    7218:	00007999 	.word	0x00007999
    721c:	00005a89 	.word	0x00005a89
    7220:	00007165 	.word	0x00007165
    7224:	00005e95 	.word	0x00005e95
    7228:	00005ead 	.word	0x00005ead

0000722c <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    722c:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    722e:	2102      	movs	r1, #2
    7230:	6893      	ldr	r3, [r2, #8]
    7232:	4219      	tst	r1, r3
    7234:	d1fc      	bne.n	7230 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    7236:	6813      	ldr	r3, [r2, #0]
    7238:	2102      	movs	r1, #2
    723a:	430b      	orrs	r3, r1
    723c:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    723e:	4770      	bx	lr

00007240 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    7240:	b570      	push	{r4, r5, r6, lr}
    7242:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    7244:	7805      	ldrb	r5, [r0, #0]
    7246:	07e8      	lsls	r0, r5, #31
    7248:	d502      	bpl.n	7250 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    724a:	2001      	movs	r0, #1
    724c:	4240      	negs	r0, r0
}
    724e:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    7250:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    7252:	0029      	movs	r1, r5
    7254:	2002      	movs	r0, #2
    7256:	4381      	bics	r1, r0
    7258:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    725a:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    725c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    725e:	0018      	movs	r0, r3
    7260:	4b04      	ldr	r3, [pc, #16]	; (7274 <sw_timer_register_callback+0x34>)
    7262:	4798      	blx	r3
    7264:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    7266:	7823      	ldrb	r3, [r4, #0]
    7268:	2201      	movs	r2, #1
    726a:	4313      	orrs	r3, r2
    726c:	7023      	strb	r3, [r4, #0]
			return index;
    726e:	2000      	movs	r0, #0
    7270:	e7ed      	b.n	724e <sw_timer_register_callback+0xe>
    7272:	46c0      	nop			; (mov r8, r8)
    7274:	00007999 	.word	0x00007999

00007278 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    7278:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    727a:	008b      	lsls	r3, r1, #2
    727c:	185d      	adds	r5, r3, r1
    727e:	00ad      	lsls	r5, r5, #2
    7280:	5c29      	ldrb	r1, [r5, r0]
    7282:	2602      	movs	r6, #2
    7284:	4331      	orrs	r1, r6
    7286:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    7288:	1944      	adds	r4, r0, r5
    728a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    728c:	0010      	movs	r0, r2
    728e:	4b03      	ldr	r3, [pc, #12]	; (729c <sw_timer_enable_callback+0x24>)
    7290:	4798      	blx	r3
    7292:	4b03      	ldr	r3, [pc, #12]	; (72a0 <sw_timer_enable_callback+0x28>)
    7294:	681b      	ldr	r3, [r3, #0]
    7296:	18c0      	adds	r0, r0, r3
    7298:	6120      	str	r0, [r4, #16]
}
    729a:	bd70      	pop	{r4, r5, r6, pc}
    729c:	00007999 	.word	0x00007999
    72a0:	20000270 	.word	0x20000270

000072a4 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    72a4:	008b      	lsls	r3, r1, #2
    72a6:	1859      	adds	r1, r3, r1
    72a8:	0089      	lsls	r1, r1, #2
    72aa:	5c0b      	ldrb	r3, [r1, r0]
    72ac:	2202      	movs	r2, #2
    72ae:	4393      	bics	r3, r2
    72b0:	540b      	strb	r3, [r1, r0]
}
    72b2:	4770      	bx	lr

000072b4 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    72b4:	b570      	push	{r4, r5, r6, lr}
    72b6:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    72b8:	7803      	ldrb	r3, [r0, #0]
    72ba:	07db      	lsls	r3, r3, #31
    72bc:	d507      	bpl.n	72ce <sw_timer_task+0x1a>
    72be:	7803      	ldrb	r3, [r0, #0]
    72c0:	079b      	lsls	r3, r3, #30
    72c2:	d504      	bpl.n	72ce <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    72c4:	4b10      	ldr	r3, [pc, #64]	; (7308 <sw_timer_task+0x54>)
    72c6:	681a      	ldr	r2, [r3, #0]
    72c8:	6903      	ldr	r3, [r0, #16]
    72ca:	1a9b      	subs	r3, r3, r2
    72cc:	d400      	bmi.n	72d0 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    72ce:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    72d0:	7803      	ldrb	r3, [r0, #0]
    72d2:	075b      	lsls	r3, r3, #29
    72d4:	d4fb      	bmi.n	72ce <sw_timer_task+0x1a>
				handler->busy = 1;
    72d6:	7803      	ldrb	r3, [r0, #0]
    72d8:	2104      	movs	r1, #4
    72da:	430b      	orrs	r3, r1
    72dc:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
    72de:	68c3      	ldr	r3, [r0, #12]
    72e0:	2b00      	cmp	r3, #0
    72e2:	d00b      	beq.n	72fc <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
    72e4:	18d2      	adds	r2, r2, r3
    72e6:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
    72e8:	68a2      	ldr	r2, [r4, #8]
    72ea:	2100      	movs	r1, #0
    72ec:	0020      	movs	r0, r4
    72ee:	6865      	ldr	r5, [r4, #4]
    72f0:	47a8      	blx	r5
				handler->busy = 0;
    72f2:	7823      	ldrb	r3, [r4, #0]
    72f4:	2204      	movs	r2, #4
    72f6:	4393      	bics	r3, r2
    72f8:	7023      	strb	r3, [r4, #0]
}
    72fa:	e7e8      	b.n	72ce <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    72fc:	7802      	ldrb	r2, [r0, #0]
    72fe:	2102      	movs	r1, #2
    7300:	438a      	bics	r2, r1
    7302:	7002      	strb	r2, [r0, #0]
    7304:	e7f0      	b.n	72e8 <sw_timer_task+0x34>
    7306:	46c0      	nop			; (mov r8, r8)
    7308:	20000270 	.word	0x20000270

0000730c <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    730c:	b570      	push	{r4, r5, r6, lr}
    730e:	b082      	sub	sp, #8
    7310:	0005      	movs	r5, r0
    7312:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    7314:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    7316:	21ff      	movs	r1, #255	; 0xff
    7318:	400b      	ands	r3, r1
    731a:	000a      	movs	r2, r1
    731c:	4022      	ands	r2, r4
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    731e:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    7320:	9001      	str	r0, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    7322:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    7324:	4001      	ands	r1, r0
    7326:	9100      	str	r1, [sp, #0]
    7328:	0029      	movs	r1, r5
    732a:	4804      	ldr	r0, [pc, #16]	; (733c <resolve_cb+0x30>)
    732c:	4e04      	ldr	r6, [pc, #16]	; (7340 <resolve_cb+0x34>)
    732e:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    7330:	0021      	movs	r1, r4
    7332:	0028      	movs	r0, r5
    7334:	4b03      	ldr	r3, [pc, #12]	; (7344 <resolve_cb+0x38>)
    7336:	4798      	blx	r3
}
    7338:	b002      	add	sp, #8
    733a:	bd70      	pop	{r4, r5, r6, pc}
    733c:	0000a844 	.word	0x0000a844
    7340:	00007eed 	.word	0x00007eed
    7344:	00006301 	.word	0x00006301

00007348 <socket_cb>:
{
    7348:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    734a:	4b01      	ldr	r3, [pc, #4]	; (7350 <socket_cb+0x8>)
    734c:	4798      	blx	r3
}
    734e:	bd10      	pop	{r4, pc}
    7350:	00006f2d 	.word	0x00006f2d

00007354 <start_download>:
{
    7354:	b510      	push	{r4, lr}
    7356:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
    7358:	4b0f      	ldr	r3, [pc, #60]	; (7398 <start_download+0x44>)
    735a:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(WIFI_CONNECTED)) {
    735c:	079a      	lsls	r2, r3, #30
    735e:	d50f      	bpl.n	7380 <start_download+0x2c>
	if (is_state_set(GET_REQUESTED)) {
    7360:	075a      	lsls	r2, r3, #29
    7362:	d411      	bmi.n	7388 <start_download+0x34>
	if (is_state_set(DOWNLOADING)) {
    7364:	071b      	lsls	r3, r3, #28
    7366:	d413      	bmi.n	7390 <start_download+0x3c>
	printf("start_download: sending HTTP request...\r\n");
    7368:	480c      	ldr	r0, [pc, #48]	; (739c <start_download+0x48>)
    736a:	4b0d      	ldr	r3, [pc, #52]	; (73a0 <start_download+0x4c>)
    736c:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    736e:	2300      	movs	r3, #0
    7370:	9300      	str	r3, [sp, #0]
    7372:	2201      	movs	r2, #1
    7374:	490b      	ldr	r1, [pc, #44]	; (73a4 <start_download+0x50>)
    7376:	480c      	ldr	r0, [pc, #48]	; (73a8 <start_download+0x54>)
    7378:	4c0c      	ldr	r4, [pc, #48]	; (73ac <start_download+0x58>)
    737a:	47a0      	blx	r4
}
    737c:	b002      	add	sp, #8
    737e:	bd10      	pop	{r4, pc}
		printf("start_download: Wi-Fi is not connected.\r\n");
    7380:	480b      	ldr	r0, [pc, #44]	; (73b0 <start_download+0x5c>)
    7382:	4b07      	ldr	r3, [pc, #28]	; (73a0 <start_download+0x4c>)
    7384:	4798      	blx	r3
		return;
    7386:	e7f9      	b.n	737c <start_download+0x28>
		printf("start_download: request is sent already.\r\n");
    7388:	480a      	ldr	r0, [pc, #40]	; (73b4 <start_download+0x60>)
    738a:	4b05      	ldr	r3, [pc, #20]	; (73a0 <start_download+0x4c>)
    738c:	4798      	blx	r3
		return;
    738e:	e7f5      	b.n	737c <start_download+0x28>
		printf("start_download: running download already.\r\n");
    7390:	4809      	ldr	r0, [pc, #36]	; (73b8 <start_download+0x64>)
    7392:	4b03      	ldr	r3, [pc, #12]	; (73a0 <start_download+0x4c>)
    7394:	4798      	blx	r3
		return;
    7396:	e7f1      	b.n	737c <start_download+0x28>
    7398:	200002a8 	.word	0x200002a8
    739c:	0000a8f8 	.word	0x0000a8f8
    73a0:	00008009 	.word	0x00008009
    73a4:	0000a924 	.word	0x0000a924
    73a8:	200004c4 	.word	0x200004c4
    73ac:	00006831 	.word	0x00006831
    73b0:	0000a874 	.word	0x0000a874
    73b4:	0000a8a0 	.word	0x0000a8a0
    73b8:	0000a8cc 	.word	0x0000a8cc

000073bc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    73bc:	b570      	push	{r4, r5, r6, lr}
    73be:	b082      	sub	sp, #8
    73c0:	0005      	movs	r5, r0
    73c2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    73c4:	2200      	movs	r2, #0
    73c6:	466b      	mov	r3, sp
    73c8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    73ca:	4c06      	ldr	r4, [pc, #24]	; (73e4 <usart_serial_getchar+0x28>)
    73cc:	466b      	mov	r3, sp
    73ce:	1d99      	adds	r1, r3, #6
    73d0:	0028      	movs	r0, r5
    73d2:	47a0      	blx	r4
    73d4:	2800      	cmp	r0, #0
    73d6:	d1f9      	bne.n	73cc <usart_serial_getchar+0x10>

	*c = temp;
    73d8:	466b      	mov	r3, sp
    73da:	3306      	adds	r3, #6
    73dc:	881b      	ldrh	r3, [r3, #0]
    73de:	7033      	strb	r3, [r6, #0]
}
    73e0:	b002      	add	sp, #8
    73e2:	bd70      	pop	{r4, r5, r6, pc}
    73e4:	00004f69 	.word	0x00004f69

000073e8 <usart_serial_putchar>:
{
    73e8:	b570      	push	{r4, r5, r6, lr}
    73ea:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    73ec:	b28c      	uxth	r4, r1
    73ee:	4e03      	ldr	r6, [pc, #12]	; (73fc <usart_serial_putchar+0x14>)
    73f0:	0021      	movs	r1, r4
    73f2:	0028      	movs	r0, r5
    73f4:	47b0      	blx	r6
    73f6:	2800      	cmp	r0, #0
    73f8:	d1fa      	bne.n	73f0 <usart_serial_putchar+0x8>
}
    73fa:	bd70      	pop	{r4, r5, r6, pc}
    73fc:	00004f3d 	.word	0x00004f3d

00007400 <http_client_callback>:
{
    7400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7402:	0014      	movs	r4, r2
	switch (type) {
    7404:	2904      	cmp	r1, #4
    7406:	d806      	bhi.n	7416 <http_client_callback+0x16>
    7408:	0089      	lsls	r1, r1, #2
    740a:	4b55      	ldr	r3, [pc, #340]	; (7560 <http_client_callback+0x160>)
    740c:	585b      	ldr	r3, [r3, r1]
    740e:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
    7410:	4854      	ldr	r0, [pc, #336]	; (7564 <http_client_callback+0x164>)
    7412:	4b55      	ldr	r3, [pc, #340]	; (7568 <http_client_callback+0x168>)
    7414:	4798      	blx	r3
}
    7416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("http_client_callback: request completed.\r\n");
    7418:	4854      	ldr	r0, [pc, #336]	; (756c <http_client_callback+0x16c>)
    741a:	4b53      	ldr	r3, [pc, #332]	; (7568 <http_client_callback+0x168>)
    741c:	4798      	blx	r3
	down_state |= mask;
    741e:	4a54      	ldr	r2, [pc, #336]	; (7570 <http_client_callback+0x170>)
    7420:	7813      	ldrb	r3, [r2, #0]
    7422:	2104      	movs	r1, #4
    7424:	430b      	orrs	r3, r1
    7426:	7013      	strb	r3, [r2, #0]
    7428:	e7f5      	b.n	7416 <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
    742a:	8811      	ldrh	r1, [r2, #0]
    742c:	6852      	ldr	r2, [r2, #4]
    742e:	4851      	ldr	r0, [pc, #324]	; (7574 <http_client_callback+0x174>)
    7430:	4b51      	ldr	r3, [pc, #324]	; (7578 <http_client_callback+0x178>)
    7432:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    7434:	8823      	ldrh	r3, [r4, #0]
    7436:	2bc8      	cmp	r3, #200	; 0xc8
    7438:	d130      	bne.n	749c <http_client_callback+0x9c>
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    743a:	2380      	movs	r3, #128	; 0x80
    743c:	015b      	lsls	r3, r3, #5
    743e:	6862      	ldr	r2, [r4, #4]
    7440:	429a      	cmp	r2, r3
    7442:	d8e8      	bhi.n	7416 <http_client_callback+0x16>
			at25dfx_chip_wake(&at25dfx_chip);
    7444:	4d4d      	ldr	r5, [pc, #308]	; (757c <http_client_callback+0x17c>)
    7446:	0028      	movs	r0, r5
    7448:	4b4d      	ldr	r3, [pc, #308]	; (7580 <http_client_callback+0x180>)
    744a:	4798      	blx	r3
			if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    744c:	0028      	movs	r0, r5
    744e:	4b4d      	ldr	r3, [pc, #308]	; (7584 <http_client_callback+0x184>)
    7450:	4798      	blx	r3
			at25dfx_chip_set_sector_protect(&at25dfx_chip, 0x10000, false);				// unprotect sector
    7452:	2680      	movs	r6, #128	; 0x80
    7454:	0276      	lsls	r6, r6, #9
    7456:	2200      	movs	r2, #0
    7458:	0031      	movs	r1, r6
    745a:	0028      	movs	r0, r5
    745c:	4b4a      	ldr	r3, [pc, #296]	; (7588 <http_client_callback+0x188>)
    745e:	4798      	blx	r3
			at25dfx_chip_erase_block(&at25dfx_chip, 0x10000, AT25DFX_BLOCK_SIZE_4KB);	// erase block
    7460:	2200      	movs	r2, #0
    7462:	0031      	movs	r1, r6
    7464:	0028      	movs	r0, r5
    7466:	4b49      	ldr	r3, [pc, #292]	; (758c <http_client_callback+0x18c>)
    7468:	4798      	blx	r3
			at25dfx_chip_write_buffer(&at25dfx_chip, 0x10000, data->recv_response.content, data->recv_response.content_length);	// write buffer
    746a:	88a3      	ldrh	r3, [r4, #4]
    746c:	68a2      	ldr	r2, [r4, #8]
    746e:	0031      	movs	r1, r6
    7470:	0028      	movs	r0, r5
    7472:	4c47      	ldr	r4, [pc, #284]	; (7590 <http_client_callback+0x190>)
    7474:	47a0      	blx	r4
			at25dfx_chip_read_buffer(&at25dfx_chip, 0x10FF6, read_buffer, AT25DFX_BUFFER_SIZE);		// read same location only first ten bytes
    7476:	230a      	movs	r3, #10
    7478:	4a46      	ldr	r2, [pc, #280]	; (7594 <http_client_callback+0x194>)
    747a:	4947      	ldr	r1, [pc, #284]	; (7598 <http_client_callback+0x198>)
    747c:	0028      	movs	r0, r5
    747e:	4c47      	ldr	r4, [pc, #284]	; (759c <http_client_callback+0x19c>)
    7480:	47a0      	blx	r4
			at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);				// protect sector
    7482:	2101      	movs	r1, #1
    7484:	0028      	movs	r0, r5
    7486:	4b46      	ldr	r3, [pc, #280]	; (75a0 <http_client_callback+0x1a0>)
    7488:	4798      	blx	r3
			at25dfx_chip_sleep(&at25dfx_chip);											// back to sleep
    748a:	0028      	movs	r0, r5
    748c:	4b45      	ldr	r3, [pc, #276]	; (75a4 <http_client_callback+0x1a4>)
    748e:	4798      	blx	r3
	down_state |= mask;
    7490:	4a37      	ldr	r2, [pc, #220]	; (7570 <http_client_callback+0x170>)
    7492:	7813      	ldrb	r3, [r2, #0]
    7494:	2110      	movs	r1, #16
    7496:	430b      	orrs	r3, r1
    7498:	7013      	strb	r3, [r2, #0]
    749a:	e7bc      	b.n	7416 <http_client_callback+0x16>
    749c:	4a34      	ldr	r2, [pc, #208]	; (7570 <http_client_callback+0x170>)
    749e:	7813      	ldrb	r3, [r2, #0]
    74a0:	2120      	movs	r1, #32
    74a2:	430b      	orrs	r3, r1
    74a4:	7013      	strb	r3, [r2, #0]
    74a6:	e7b6      	b.n	7416 <http_client_callback+0x16>
		printf("http_client_callback_CHUNKED DATA: received response data size %u\r\n",
    74a8:	6811      	ldr	r1, [r2, #0]
    74aa:	483f      	ldr	r0, [pc, #252]	; (75a8 <http_client_callback+0x1a8>)
    74ac:	4b32      	ldr	r3, [pc, #200]	; (7578 <http_client_callback+0x178>)
    74ae:	4798      	blx	r3
		at25dfx_chip_wake(&at25dfx_chip);
    74b0:	4d32      	ldr	r5, [pc, #200]	; (757c <http_client_callback+0x17c>)
    74b2:	0028      	movs	r0, r5
    74b4:	4b32      	ldr	r3, [pc, #200]	; (7580 <http_client_callback+0x180>)
    74b6:	4798      	blx	r3
		if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    74b8:	0028      	movs	r0, r5
    74ba:	4b32      	ldr	r3, [pc, #200]	; (7584 <http_client_callback+0x184>)
    74bc:	4798      	blx	r3
		at25dfx_chip_set_sector_protect(&at25dfx_chip, flash_addr, false);				// unprotect sector
    74be:	4e3b      	ldr	r6, [pc, #236]	; (75ac <http_client_callback+0x1ac>)
    74c0:	2200      	movs	r2, #0
    74c2:	6831      	ldr	r1, [r6, #0]
    74c4:	0028      	movs	r0, r5
    74c6:	4b30      	ldr	r3, [pc, #192]	; (7588 <http_client_callback+0x188>)
    74c8:	4798      	blx	r3
		at25dfx_chip_erase_block(&at25dfx_chip, flash_addr, AT25DFX_BLOCK_SIZE_4KB);	// erase block
    74ca:	2200      	movs	r2, #0
    74cc:	6831      	ldr	r1, [r6, #0]
    74ce:	0028      	movs	r0, r5
    74d0:	4b2e      	ldr	r3, [pc, #184]	; (758c <http_client_callback+0x18c>)
    74d2:	4798      	blx	r3
		at25dfx_chip_write_buffer(&at25dfx_chip, flash_addr, data->recv_chunked_data.data, data->recv_chunked_data.length);	// write buffer
    74d4:	8823      	ldrh	r3, [r4, #0]
    74d6:	6862      	ldr	r2, [r4, #4]
    74d8:	6831      	ldr	r1, [r6, #0]
    74da:	0028      	movs	r0, r5
    74dc:	4f2c      	ldr	r7, [pc, #176]	; (7590 <http_client_callback+0x190>)
    74de:	47b8      	blx	r7
		at25dfx_chip_read_buffer(&at25dfx_chip, flash_addr, read_buffer, AT25DFX_BUFFER_SIZE);		// read same location
    74e0:	230a      	movs	r3, #10
    74e2:	4a2c      	ldr	r2, [pc, #176]	; (7594 <http_client_callback+0x194>)
    74e4:	6831      	ldr	r1, [r6, #0]
    74e6:	0028      	movs	r0, r5
    74e8:	4f2c      	ldr	r7, [pc, #176]	; (759c <http_client_callback+0x19c>)
    74ea:	47b8      	blx	r7
		at25dfx_chip_read_buffer(&at25dfx_chip, (flash_addr+0x0020), read_buffer, AT25DFX_BUFFER_SIZE);		// read same location
    74ec:	6831      	ldr	r1, [r6, #0]
    74ee:	3120      	adds	r1, #32
    74f0:	230a      	movs	r3, #10
    74f2:	4a28      	ldr	r2, [pc, #160]	; (7594 <http_client_callback+0x194>)
    74f4:	0028      	movs	r0, r5
    74f6:	47b8      	blx	r7
		at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);				// protect sector
    74f8:	2101      	movs	r1, #1
    74fa:	0028      	movs	r0, r5
    74fc:	4b28      	ldr	r3, [pc, #160]	; (75a0 <http_client_callback+0x1a0>)
    74fe:	4798      	blx	r3
		at25dfx_chip_sleep(&at25dfx_chip);											// back to sleep
    7500:	0028      	movs	r0, r5
    7502:	4b28      	ldr	r3, [pc, #160]	; (75a4 <http_client_callback+0x1a4>)
    7504:	4798      	blx	r3
		flash_addr = flash_addr + (uint32_t)data->recv_chunked_data.length;
    7506:	6823      	ldr	r3, [r4, #0]
    7508:	6832      	ldr	r2, [r6, #0]
    750a:	4694      	mov	ip, r2
    750c:	4463      	add	r3, ip
    750e:	6033      	str	r3, [r6, #0]
		if (data->recv_chunked_data.is_complete) {
    7510:	7a23      	ldrb	r3, [r4, #8]
    7512:	2b00      	cmp	r3, #0
    7514:	d100      	bne.n	7518 <http_client_callback+0x118>
    7516:	e77e      	b.n	7416 <http_client_callback+0x16>
	down_state |= mask;
    7518:	4a15      	ldr	r2, [pc, #84]	; (7570 <http_client_callback+0x170>)
    751a:	7813      	ldrb	r3, [r2, #0]
    751c:	2110      	movs	r1, #16
    751e:	430b      	orrs	r3, r1
    7520:	7013      	strb	r3, [r2, #0]
    7522:	e778      	b.n	7416 <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    7524:	6811      	ldr	r1, [r2, #0]
    7526:	4822      	ldr	r0, [pc, #136]	; (75b0 <http_client_callback+0x1b0>)
    7528:	4b13      	ldr	r3, [pc, #76]	; (7578 <http_client_callback+0x178>)
    752a:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    752c:	6823      	ldr	r3, [r4, #0]
    752e:	330b      	adds	r3, #11
    7530:	d000      	beq.n	7534 <http_client_callback+0x134>
    7532:	e770      	b.n	7416 <http_client_callback+0x16>
	return ((down_state & mask) != 0);
    7534:	4b0e      	ldr	r3, [pc, #56]	; (7570 <http_client_callback+0x170>)
    7536:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
    7538:	071a      	lsls	r2, r3, #28
    753a:	d406      	bmi.n	754a <http_client_callback+0x14a>
	return ((down_state & mask) != 0);
    753c:	4b0c      	ldr	r3, [pc, #48]	; (7570 <http_client_callback+0x170>)
    753e:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    7540:	075a      	lsls	r2, r3, #29
    7542:	d407      	bmi.n	7554 <http_client_callback+0x154>
			start_download();
    7544:	4b1b      	ldr	r3, [pc, #108]	; (75b4 <http_client_callback+0x1b4>)
    7546:	4798      	blx	r3
    7548:	e765      	b.n	7416 <http_client_callback+0x16>
	down_state &= ~mask;
    754a:	2208      	movs	r2, #8
    754c:	4393      	bics	r3, r2
    754e:	4a08      	ldr	r2, [pc, #32]	; (7570 <http_client_callback+0x170>)
    7550:	7013      	strb	r3, [r2, #0]
    7552:	e7f3      	b.n	753c <http_client_callback+0x13c>
    7554:	2204      	movs	r2, #4
    7556:	4393      	bics	r3, r2
    7558:	4a05      	ldr	r2, [pc, #20]	; (7570 <http_client_callback+0x170>)
    755a:	7013      	strb	r3, [r2, #0]
    755c:	e7f2      	b.n	7544 <http_client_callback+0x144>
    755e:	46c0      	nop			; (mov r8, r8)
    7560:	0000a5cc 	.word	0x0000a5cc
    7564:	0000a5e0 	.word	0x0000a5e0
    7568:	00008009 	.word	0x00008009
    756c:	0000a618 	.word	0x0000a618
    7570:	200002a8 	.word	0x200002a8
    7574:	0000a644 	.word	0x0000a644
    7578:	00007eed 	.word	0x00007eed
    757c:	20000464 	.word	0x20000464
    7580:	00000c1d 	.word	0x00000c1d
    7584:	00000115 	.word	0x00000115
    7588:	00000a5d 	.word	0x00000a5d
    758c:	00000755 	.word	0x00000755
    7590:	00000319 	.word	0x00000319
    7594:	200002ac 	.word	0x200002ac
    7598:	00010ff6 	.word	0x00010ff6
    759c:	00000221 	.word	0x00000221
    75a0:	0000096d 	.word	0x0000096d
    75a4:	00000b91 	.word	0x00000b91
    75a8:	0000a680 	.word	0x0000a680
    75ac:	2000000c 	.word	0x2000000c
    75b0:	0000a6c4 	.word	0x0000a6c4
    75b4:	00007355 	.word	0x00007355

000075b8 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    75b8:	b510      	push	{r4, lr}
    75ba:	b082      	sub	sp, #8
	switch (u8MsgType) {
    75bc:	282c      	cmp	r0, #44	; 0x2c
    75be:	d003      	beq.n	75c8 <wifi_cb+0x10>
    75c0:	2832      	cmp	r0, #50	; 0x32
    75c2:	d02f      	beq.n	7624 <wifi_cb+0x6c>
	}

	default:
		break;
	}
}
    75c4:	b002      	add	sp, #8
    75c6:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    75c8:	780b      	ldrb	r3, [r1, #0]
    75ca:	2b01      	cmp	r3, #1
    75cc:	d01a      	beq.n	7604 <wifi_cb+0x4c>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    75ce:	2b00      	cmp	r3, #0
    75d0:	d1f8      	bne.n	75c4 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    75d2:	481d      	ldr	r0, [pc, #116]	; (7648 <wifi_cb+0x90>)
    75d4:	4b1d      	ldr	r3, [pc, #116]	; (764c <wifi_cb+0x94>)
    75d6:	4798      	blx	r3
	down_state &= ~mask;
    75d8:	4b1d      	ldr	r3, [pc, #116]	; (7650 <wifi_cb+0x98>)
    75da:	2200      	movs	r2, #0
    75dc:	569a      	ldrsb	r2, [r3, r2]
    75de:	23fd      	movs	r3, #253	; 0xfd
    75e0:	4013      	ands	r3, r2
			if (is_state_set(DOWNLOADING)) {
    75e2:	0719      	lsls	r1, r3, #28
    75e4:	d414      	bmi.n	7610 <wifi_cb+0x58>
	down_state &= ~mask;
    75e6:	4a1a      	ldr	r2, [pc, #104]	; (7650 <wifi_cb+0x98>)
    75e8:	7013      	strb	r3, [r2, #0]
	return ((down_state & mask) != 0);
    75ea:	4b19      	ldr	r3, [pc, #100]	; (7650 <wifi_cb+0x98>)
    75ec:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    75ee:	075a      	lsls	r2, r3, #29
    75f0:	d413      	bmi.n	761a <wifi_cb+0x62>
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    75f2:	23ff      	movs	r3, #255	; 0xff
    75f4:	9300      	str	r3, [sp, #0]
    75f6:	4b17      	ldr	r3, [pc, #92]	; (7654 <wifi_cb+0x9c>)
    75f8:	2202      	movs	r2, #2
    75fa:	2110      	movs	r1, #16
    75fc:	4816      	ldr	r0, [pc, #88]	; (7658 <wifi_cb+0xa0>)
    75fe:	4c17      	ldr	r4, [pc, #92]	; (765c <wifi_cb+0xa4>)
    7600:	47a0      	blx	r4
    7602:	e7df      	b.n	75c4 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    7604:	4816      	ldr	r0, [pc, #88]	; (7660 <wifi_cb+0xa8>)
    7606:	4b11      	ldr	r3, [pc, #68]	; (764c <wifi_cb+0x94>)
    7608:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    760a:	4b16      	ldr	r3, [pc, #88]	; (7664 <wifi_cb+0xac>)
    760c:	4798      	blx	r3
    760e:	e7d9      	b.n	75c4 <wifi_cb+0xc>
	down_state &= ~mask;
    7610:	230a      	movs	r3, #10
    7612:	439a      	bics	r2, r3
    7614:	4b0e      	ldr	r3, [pc, #56]	; (7650 <wifi_cb+0x98>)
    7616:	701a      	strb	r2, [r3, #0]
    7618:	e7e7      	b.n	75ea <wifi_cb+0x32>
    761a:	2204      	movs	r2, #4
    761c:	4393      	bics	r3, r2
    761e:	4a0c      	ldr	r2, [pc, #48]	; (7650 <wifi_cb+0x98>)
    7620:	7013      	strb	r3, [r2, #0]
    7622:	e7e6      	b.n	75f2 <wifi_cb+0x3a>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    7624:	788b      	ldrb	r3, [r1, #2]
    7626:	784a      	ldrb	r2, [r1, #1]
    7628:	7808      	ldrb	r0, [r1, #0]
    762a:	78c9      	ldrb	r1, [r1, #3]
    762c:	9100      	str	r1, [sp, #0]
    762e:	0001      	movs	r1, r0
    7630:	480d      	ldr	r0, [pc, #52]	; (7668 <wifi_cb+0xb0>)
    7632:	4c0e      	ldr	r4, [pc, #56]	; (766c <wifi_cb+0xb4>)
    7634:	47a0      	blx	r4
	down_state |= mask;
    7636:	4a06      	ldr	r2, [pc, #24]	; (7650 <wifi_cb+0x98>)
    7638:	7813      	ldrb	r3, [r2, #0]
    763a:	2102      	movs	r1, #2
    763c:	430b      	orrs	r3, r1
    763e:	7013      	strb	r3, [r2, #0]
		start_download();
    7640:	4b0b      	ldr	r3, [pc, #44]	; (7670 <wifi_cb+0xb8>)
    7642:	4798      	blx	r3
}
    7644:	e7be      	b.n	75c4 <wifi_cb+0xc>
    7646:	46c0      	nop			; (mov r8, r8)
    7648:	0000a974 	.word	0x0000a974
    764c:	00008009 	.word	0x00008009
    7650:	200002a8 	.word	0x200002a8
    7654:	0000a994 	.word	0x0000a994
    7658:	0000a9a4 	.word	0x0000a9a4
    765c:	00002079 	.word	0x00002079
    7660:	0000a954 	.word	0x0000a954
    7664:	00002095 	.word	0x00002095
    7668:	0000a9b4 	.word	0x0000a9b4
    766c:	00007eed 	.word	0x00007eed
    7670:	00007355 	.word	0x00007355

00007674 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    7674:	b5f0      	push	{r4, r5, r6, r7, lr}
    7676:	b09b      	sub	sp, #108	; 0x6c
	down_state = NOT_READY;
    7678:	2400      	movs	r4, #0
    767a:	2600      	movs	r6, #0
    767c:	4b8c      	ldr	r3, [pc, #560]	; (78b0 <main+0x23c>)
    767e:	701c      	strb	r4, [r3, #0]
	tstrWifiInitParam param;
	int8_t ret;
	init_state();

	/* Initialize the board. */
	system_init();
    7680:	4b8c      	ldr	r3, [pc, #560]	; (78b4 <main+0x240>)
    7682:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    7684:	aa04      	add	r2, sp, #16
    7686:	2380      	movs	r3, #128	; 0x80
    7688:	05db      	lsls	r3, r3, #23
    768a:	9304      	str	r3, [sp, #16]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    768c:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    768e:	23ff      	movs	r3, #255	; 0xff
    7690:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    7692:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    7694:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    7696:	2501      	movs	r5, #1
    7698:	3bdb      	subs	r3, #219	; 0xdb
    769a:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
    769c:	3301      	adds	r3, #1
    769e:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
    76a0:	3301      	adds	r3, #1
    76a2:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    76a4:	3301      	adds	r3, #1
    76a6:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    76a8:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    76aa:	3305      	adds	r3, #5
    76ac:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    76ae:	3301      	adds	r3, #1
    76b0:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    76b2:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    76b4:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    76b6:	2300      	movs	r3, #0
    76b8:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    76ba:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    76bc:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    76be:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
    76c0:	2313      	movs	r3, #19
    76c2:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    76c4:	7756      	strb	r6, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    76c6:	23c4      	movs	r3, #196	; 0xc4
    76c8:	039b      	lsls	r3, r3, #14
    76ca:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    76cc:	2301      	movs	r3, #1
    76ce:	425b      	negs	r3, r3
    76d0:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    76d2:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    76d4:	4b78      	ldr	r3, [pc, #480]	; (78b8 <main+0x244>)
    76d6:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    76d8:	4b78      	ldr	r3, [pc, #480]	; (78bc <main+0x248>)
    76da:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    76dc:	23e1      	movs	r3, #225	; 0xe1
    76de:	025b      	lsls	r3, r3, #9
    76e0:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    76e2:	4c77      	ldr	r4, [pc, #476]	; (78c0 <main+0x24c>)
    76e4:	4b77      	ldr	r3, [pc, #476]	; (78c4 <main+0x250>)
    76e6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    76e8:	4977      	ldr	r1, [pc, #476]	; (78c8 <main+0x254>)
    76ea:	4b78      	ldr	r3, [pc, #480]	; (78cc <main+0x258>)
    76ec:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    76ee:	4978      	ldr	r1, [pc, #480]	; (78d0 <main+0x25c>)
    76f0:	4b78      	ldr	r3, [pc, #480]	; (78d4 <main+0x260>)
    76f2:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    76f4:	4978      	ldr	r1, [pc, #480]	; (78d8 <main+0x264>)
    76f6:	0020      	movs	r0, r4
    76f8:	4b78      	ldr	r3, [pc, #480]	; (78dc <main+0x268>)
    76fa:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    76fc:	4f78      	ldr	r7, [pc, #480]	; (78e0 <main+0x26c>)
    76fe:	683b      	ldr	r3, [r7, #0]
    7700:	6898      	ldr	r0, [r3, #8]
    7702:	2100      	movs	r1, #0
    7704:	4e77      	ldr	r6, [pc, #476]	; (78e4 <main+0x270>)
    7706:	47b0      	blx	r6
	setbuf(stdin, NULL);
    7708:	683b      	ldr	r3, [r7, #0]
    770a:	6858      	ldr	r0, [r3, #4]
    770c:	2100      	movs	r1, #0
    770e:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7710:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7712:	0030      	movs	r0, r6
    7714:	4b74      	ldr	r3, [pc, #464]	; (78e8 <main+0x274>)
    7716:	4798      	blx	r3
    7718:	231f      	movs	r3, #31
    771a:	4018      	ands	r0, r3
    771c:	4085      	lsls	r5, r0
    771e:	4b73      	ldr	r3, [pc, #460]	; (78ec <main+0x278>)
    7720:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7722:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    7724:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7726:	2b00      	cmp	r3, #0
    7728:	d1fc      	bne.n	7724 <main+0xb0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    772a:	6833      	ldr	r3, [r6, #0]
    772c:	2202      	movs	r2, #2
    772e:	4313      	orrs	r3, r2
    7730:	6033      	str	r3, [r6, #0]
	
	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
    7732:	486f      	ldr	r0, [pc, #444]	; (78f0 <main+0x27c>)
    7734:	4c6f      	ldr	r4, [pc, #444]	; (78f4 <main+0x280>)
    7736:	47a0      	blx	r4
	printf("\r\nThis application requires the AP to have internet access.\r\n\r\n");
    7738:	486f      	ldr	r0, [pc, #444]	; (78f8 <main+0x284>)
    773a:	47a0      	blx	r4
	sw_timer_get_config_defaults(&swt_conf);
    773c:	a804      	add	r0, sp, #16
    773e:	4b6f      	ldr	r3, [pc, #444]	; (78fc <main+0x288>)
    7740:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    7742:	4c6f      	ldr	r4, [pc, #444]	; (7900 <main+0x28c>)
    7744:	a904      	add	r1, sp, #16
    7746:	0020      	movs	r0, r4
    7748:	4b6e      	ldr	r3, [pc, #440]	; (7904 <main+0x290>)
    774a:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    774c:	0020      	movs	r0, r4
    774e:	4b6e      	ldr	r3, [pc, #440]	; (7908 <main+0x294>)
    7750:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
    7752:	a804      	add	r0, sp, #16
    7754:	4b6d      	ldr	r3, [pc, #436]	; (790c <main+0x298>)
    7756:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    7758:	2380      	movs	r3, #128	; 0x80
    775a:	015b      	lsls	r3, r3, #5
    775c:	9308      	str	r3, [sp, #32]
	httpc_conf.timer_inst = &swt_module_inst;
    775e:	9405      	str	r4, [sp, #20]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    7760:	a904      	add	r1, sp, #16
    7762:	486b      	ldr	r0, [pc, #428]	; (7910 <main+0x29c>)
    7764:	4b6b      	ldr	r3, [pc, #428]	; (7914 <main+0x2a0>)
    7766:	4798      	blx	r3
    7768:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
    776a:	db6a      	blt.n	7842 <main+0x1ce>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
    776c:	496a      	ldr	r1, [pc, #424]	; (7918 <main+0x2a4>)
    776e:	4868      	ldr	r0, [pc, #416]	; (7910 <main+0x29c>)
    7770:	4b6a      	ldr	r3, [pc, #424]	; (791c <main+0x2a8>)
    7772:	4798      	blx	r3

	/* Initialize the HTTP client service. */
	configure_http_client();

	/* Initialize the BSP. Part of WiFi*/
	nm_bsp_init();
    7774:	4b6a      	ldr	r3, [pc, #424]	; (7920 <main+0x2ac>)
    7776:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    7778:	ac04      	add	r4, sp, #16
    777a:	2501      	movs	r5, #1
    777c:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    777e:	2300      	movs	r3, #0
    7780:	9305      	str	r3, [sp, #20]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    7782:	9306      	str	r3, [sp, #24]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    7784:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    7786:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    7788:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    778a:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    778c:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    778e:	2224      	movs	r2, #36	; 0x24
    7790:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    7792:	3a18      	subs	r2, #24
    7794:	2100      	movs	r1, #0
    7796:	a80a      	add	r0, sp, #40	; 0x28
    7798:	4b62      	ldr	r3, [pc, #392]	; (7924 <main+0x2b0>)
    779a:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    779c:	4b62      	ldr	r3, [pc, #392]	; (7928 <main+0x2b4>)
    779e:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    77a0:	2380      	movs	r3, #128	; 0x80
    77a2:	025b      	lsls	r3, r3, #9
    77a4:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    77a6:	4b61      	ldr	r3, [pc, #388]	; (792c <main+0x2b8>)
    77a8:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    77aa:	4b61      	ldr	r3, [pc, #388]	; (7930 <main+0x2bc>)
    77ac:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    77ae:	4b61      	ldr	r3, [pc, #388]	; (7934 <main+0x2c0>)
    77b0:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    77b2:	4b61      	ldr	r3, [pc, #388]	; (7938 <main+0x2c4>)
    77b4:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    77b6:	4e61      	ldr	r6, [pc, #388]	; (793c <main+0x2c8>)
    77b8:	0022      	movs	r2, r4
    77ba:	4961      	ldr	r1, [pc, #388]	; (7940 <main+0x2cc>)
    77bc:	0030      	movs	r0, r6
    77be:	4b61      	ldr	r3, [pc, #388]	; (7944 <main+0x2d0>)
    77c0:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    77c2:	6834      	ldr	r4, [r6, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    77c4:	0020      	movs	r0, r4
    77c6:	4b48      	ldr	r3, [pc, #288]	; (78e8 <main+0x274>)
    77c8:	4798      	blx	r3
    77ca:	231f      	movs	r3, #31
    77cc:	4018      	ands	r0, r3
    77ce:	4085      	lsls	r5, r0
    77d0:	4b46      	ldr	r3, [pc, #280]	; (78ec <main+0x278>)
    77d2:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    77d4:	6833      	ldr	r3, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    77d6:	69da      	ldr	r2, [r3, #28]
	while (spi_is_syncing(module)) {
    77d8:	2a00      	cmp	r2, #0
    77da:	d1fc      	bne.n	77d6 <main+0x162>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    77dc:	6823      	ldr	r3, [r4, #0]
    77de:	3202      	adds	r2, #2
    77e0:	4313      	orrs	r3, r2
    77e2:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
    77e4:	4c58      	ldr	r4, [pc, #352]	; (7948 <main+0x2d4>)
    77e6:	2304      	movs	r3, #4
    77e8:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
    77ea:	3303      	adds	r3, #3
    77ec:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
    77ee:	4b53      	ldr	r3, [pc, #332]	; (793c <main+0x2c8>)
    77f0:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    77f2:	a903      	add	r1, sp, #12
    77f4:	2301      	movs	r3, #1
    77f6:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    77f8:	2200      	movs	r2, #0
    77fa:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    77fc:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    77fe:	2007      	movs	r0, #7
    7800:	4b52      	ldr	r3, [pc, #328]	; (794c <main+0x2d8>)
    7802:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    7804:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    7806:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7808:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    780a:	2900      	cmp	r1, #0
    780c:	d104      	bne.n	7818 <main+0x1a4>
		return &(ports[port_index]->Group[group_index]);
    780e:	0953      	lsrs	r3, r2, #5
    7810:	01db      	lsls	r3, r3, #7
    7812:	494f      	ldr	r1, [pc, #316]	; (7950 <main+0x2dc>)
    7814:	468c      	mov	ip, r1
    7816:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7818:	211f      	movs	r1, #31
    781a:	4011      	ands	r1, r2
    781c:	2201      	movs	r2, #1
    781e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7820:	619a      	str	r2, [r3, #24]

	/* Initialize Flash*/
	at25dfx_init();
	
	/* Initialize Wi-Fi parameters structure to zero */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    7822:	2218      	movs	r2, #24
    7824:	2100      	movs	r1, #0
    7826:	a814      	add	r0, sp, #80	; 0x50
    7828:	4b3e      	ldr	r3, [pc, #248]	; (7924 <main+0x2b0>)
    782a:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
    782c:	4b49      	ldr	r3, [pc, #292]	; (7954 <main+0x2e0>)
    782e:	9314      	str	r3, [sp, #80]	; 0x50
	ret = m2m_wifi_init(&param);
    7830:	a814      	add	r0, sp, #80	; 0x50
    7832:	4b49      	ldr	r3, [pc, #292]	; (7958 <main+0x2e4>)
    7834:	4798      	blx	r3
    7836:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    7838:	d007      	beq.n	784a <main+0x1d6>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
    783a:	4848      	ldr	r0, [pc, #288]	; (795c <main+0x2e8>)
    783c:	4b48      	ldr	r3, [pc, #288]	; (7960 <main+0x2ec>)
    783e:	4798      	blx	r3
    7840:	e7fe      	b.n	7840 <main+0x1cc>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    7842:	4848      	ldr	r0, [pc, #288]	; (7964 <main+0x2f0>)
    7844:	4b46      	ldr	r3, [pc, #280]	; (7960 <main+0x2ec>)
    7846:	4798      	blx	r3
    7848:	e7fe      	b.n	7848 <main+0x1d4>
		while (1) {
		}
	}

	/* Initialize socket module. */
	socketInit();
    784a:	4b47      	ldr	r3, [pc, #284]	; (7968 <main+0x2f4>)
    784c:	4798      	blx	r3
	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
    784e:	4947      	ldr	r1, [pc, #284]	; (796c <main+0x2f8>)
    7850:	4847      	ldr	r0, [pc, #284]	; (7970 <main+0x2fc>)
    7852:	4b48      	ldr	r3, [pc, #288]	; (7974 <main+0x300>)
    7854:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    7856:	4c48      	ldr	r4, [pc, #288]	; (7978 <main+0x304>)
    7858:	0021      	movs	r1, r4
    785a:	4848      	ldr	r0, [pc, #288]	; (797c <main+0x308>)
    785c:	4b40      	ldr	r3, [pc, #256]	; (7960 <main+0x2ec>)
    785e:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    7860:	23ff      	movs	r3, #255	; 0xff
    7862:	9300      	str	r3, [sp, #0]
    7864:	4b46      	ldr	r3, [pc, #280]	; (7980 <main+0x30c>)
    7866:	2202      	movs	r2, #2
    7868:	2110      	movs	r1, #16
    786a:	0020      	movs	r0, r4
    786c:	4c45      	ldr	r4, [pc, #276]	; (7984 <main+0x310>)
    786e:	47a0      	blx	r4
	return ((down_state & mask) != 0);
    7870:	4b0f      	ldr	r3, [pc, #60]	; (78b0 <main+0x23c>)

	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    7872:	781a      	ldrb	r2, [r3, #0]
    7874:	2330      	movs	r3, #48	; 0x30
    7876:	421a      	tst	r2, r3
    7878:	d10b      	bne.n	7892 <main+0x21e>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    787a:	4e43      	ldr	r6, [pc, #268]	; (7988 <main+0x314>)
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    787c:	4d20      	ldr	r5, [pc, #128]	; (7900 <main+0x28c>)
    787e:	4c43      	ldr	r4, [pc, #268]	; (798c <main+0x318>)
		m2m_wifi_handle_events(NULL);
    7880:	2000      	movs	r0, #0
    7882:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
    7884:	0028      	movs	r0, r5
    7886:	47a0      	blx	r4
	return ((down_state & mask) != 0);
    7888:	4b09      	ldr	r3, [pc, #36]	; (78b0 <main+0x23c>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    788a:	781b      	ldrb	r3, [r3, #0]
    788c:	2230      	movs	r2, #48	; 0x30
    788e:	421a      	tst	r2, r3
    7890:	d0f6      	beq.n	7880 <main+0x20c>
	}
	//printf("main: please unplug the SD/MMC card.\r\n");
	printf("main: done.\r\n");
    7892:	483f      	ldr	r0, [pc, #252]	; (7990 <main+0x31c>)
    7894:	4b17      	ldr	r3, [pc, #92]	; (78f4 <main+0x280>)
    7896:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    7898:	483e      	ldr	r0, [pc, #248]	; (7994 <main+0x320>)
    789a:	2380      	movs	r3, #128	; 0x80
    789c:	041b      	lsls	r3, r3, #16
		port_base->OUTSET.reg = pin_mask;
    789e:	492c      	ldr	r1, [pc, #176]	; (7950 <main+0x2dc>)
    78a0:	e000      	b.n	78a4 <main+0x230>
    78a2:	618b      	str	r3, [r1, #24]
	return (port_base->IN.reg & pin_mask);
    78a4:	6a02      	ldr	r2, [r0, #32]

	while (1) {
		/* Is button pressed? */
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    78a6:	421a      	tst	r2, r3
    78a8:	d1fb      	bne.n	78a2 <main+0x22e>
		port_base->OUTCLR.reg = pin_mask;
    78aa:	614b      	str	r3, [r1, #20]
    78ac:	e7fa      	b.n	78a4 <main+0x230>
    78ae:	46c0      	nop			; (mov r8, r8)
    78b0:	200002a8 	.word	0x200002a8
    78b4:	000058dd 	.word	0x000058dd
    78b8:	002a0003 	.word	0x002a0003
    78bc:	002b0003 	.word	0x002b0003
    78c0:	20000274 	.word	0x20000274
    78c4:	20000460 	.word	0x20000460
    78c8:	000073e9 	.word	0x000073e9
    78cc:	2000045c 	.word	0x2000045c
    78d0:	000073bd 	.word	0x000073bd
    78d4:	20000458 	.word	0x20000458
    78d8:	42001800 	.word	0x42001800
    78dc:	00004bf9 	.word	0x00004bf9
    78e0:	20000010 	.word	0x20000010
    78e4:	00008041 	.word	0x00008041
    78e8:	0000452d 	.word	0x0000452d
    78ec:	e000e100 	.word	0xe000e100
    78f0:	0000a6f4 	.word	0x0000a6f4
    78f4:	00008009 	.word	0x00008009
    78f8:	0000a75c 	.word	0x0000a75c
    78fc:	00007175 	.word	0x00007175
    7900:	2000046c 	.word	0x2000046c
    7904:	00007181 	.word	0x00007181
    7908:	0000722d 	.word	0x0000722d
    790c:	0000618d 	.word	0x0000618d
    7910:	200004c4 	.word	0x200004c4
    7914:	000061b5 	.word	0x000061b5
    7918:	00007401 	.word	0x00007401
    791c:	00006269 	.word	0x00006269
    7920:	00000d6d 	.word	0x00000d6d
    7924:	00007d8b 	.word	0x00007d8b
    7928:	0001d4c0 	.word	0x0001d4c0
    792c:	00100002 	.word	0x00100002
    7930:	00110002 	.word	0x00110002
    7934:	00120002 	.word	0x00120002
    7938:	00130002 	.word	0x00130002
    793c:	200005ac 	.word	0x200005ac
    7940:	42000c00 	.word	0x42000c00
    7944:	000045bd 	.word	0x000045bd
    7948:	20000464 	.word	0x20000464
    794c:	00004111 	.word	0x00004111
    7950:	41004400 	.word	0x41004400
    7954:	000075b9 	.word	0x000075b9
    7958:	00001ca9 	.word	0x00001ca9
    795c:	0000a7e4 	.word	0x0000a7e4
    7960:	00007eed 	.word	0x00007eed
    7964:	0000a79c 	.word	0x0000a79c
    7968:	000038d5 	.word	0x000038d5
    796c:	0000730d 	.word	0x0000730d
    7970:	00007349 	.word	0x00007349
    7974:	00003919 	.word	0x00003919
    7978:	0000a9a4 	.word	0x0000a9a4
    797c:	0000a810 	.word	0x0000a810
    7980:	0000a994 	.word	0x0000a994
    7984:	00002079 	.word	0x00002079
    7988:	00001ddd 	.word	0x00001ddd
    798c:	000072b5 	.word	0x000072b5
    7990:	0000a834 	.word	0x0000a834
    7994:	41004480 	.word	0x41004480

00007998 <__udivsi3>:
    7998:	2200      	movs	r2, #0
    799a:	0843      	lsrs	r3, r0, #1
    799c:	428b      	cmp	r3, r1
    799e:	d374      	bcc.n	7a8a <__udivsi3+0xf2>
    79a0:	0903      	lsrs	r3, r0, #4
    79a2:	428b      	cmp	r3, r1
    79a4:	d35f      	bcc.n	7a66 <__udivsi3+0xce>
    79a6:	0a03      	lsrs	r3, r0, #8
    79a8:	428b      	cmp	r3, r1
    79aa:	d344      	bcc.n	7a36 <__udivsi3+0x9e>
    79ac:	0b03      	lsrs	r3, r0, #12
    79ae:	428b      	cmp	r3, r1
    79b0:	d328      	bcc.n	7a04 <__udivsi3+0x6c>
    79b2:	0c03      	lsrs	r3, r0, #16
    79b4:	428b      	cmp	r3, r1
    79b6:	d30d      	bcc.n	79d4 <__udivsi3+0x3c>
    79b8:	22ff      	movs	r2, #255	; 0xff
    79ba:	0209      	lsls	r1, r1, #8
    79bc:	ba12      	rev	r2, r2
    79be:	0c03      	lsrs	r3, r0, #16
    79c0:	428b      	cmp	r3, r1
    79c2:	d302      	bcc.n	79ca <__udivsi3+0x32>
    79c4:	1212      	asrs	r2, r2, #8
    79c6:	0209      	lsls	r1, r1, #8
    79c8:	d065      	beq.n	7a96 <__udivsi3+0xfe>
    79ca:	0b03      	lsrs	r3, r0, #12
    79cc:	428b      	cmp	r3, r1
    79ce:	d319      	bcc.n	7a04 <__udivsi3+0x6c>
    79d0:	e000      	b.n	79d4 <__udivsi3+0x3c>
    79d2:	0a09      	lsrs	r1, r1, #8
    79d4:	0bc3      	lsrs	r3, r0, #15
    79d6:	428b      	cmp	r3, r1
    79d8:	d301      	bcc.n	79de <__udivsi3+0x46>
    79da:	03cb      	lsls	r3, r1, #15
    79dc:	1ac0      	subs	r0, r0, r3
    79de:	4152      	adcs	r2, r2
    79e0:	0b83      	lsrs	r3, r0, #14
    79e2:	428b      	cmp	r3, r1
    79e4:	d301      	bcc.n	79ea <__udivsi3+0x52>
    79e6:	038b      	lsls	r3, r1, #14
    79e8:	1ac0      	subs	r0, r0, r3
    79ea:	4152      	adcs	r2, r2
    79ec:	0b43      	lsrs	r3, r0, #13
    79ee:	428b      	cmp	r3, r1
    79f0:	d301      	bcc.n	79f6 <__udivsi3+0x5e>
    79f2:	034b      	lsls	r3, r1, #13
    79f4:	1ac0      	subs	r0, r0, r3
    79f6:	4152      	adcs	r2, r2
    79f8:	0b03      	lsrs	r3, r0, #12
    79fa:	428b      	cmp	r3, r1
    79fc:	d301      	bcc.n	7a02 <__udivsi3+0x6a>
    79fe:	030b      	lsls	r3, r1, #12
    7a00:	1ac0      	subs	r0, r0, r3
    7a02:	4152      	adcs	r2, r2
    7a04:	0ac3      	lsrs	r3, r0, #11
    7a06:	428b      	cmp	r3, r1
    7a08:	d301      	bcc.n	7a0e <__udivsi3+0x76>
    7a0a:	02cb      	lsls	r3, r1, #11
    7a0c:	1ac0      	subs	r0, r0, r3
    7a0e:	4152      	adcs	r2, r2
    7a10:	0a83      	lsrs	r3, r0, #10
    7a12:	428b      	cmp	r3, r1
    7a14:	d301      	bcc.n	7a1a <__udivsi3+0x82>
    7a16:	028b      	lsls	r3, r1, #10
    7a18:	1ac0      	subs	r0, r0, r3
    7a1a:	4152      	adcs	r2, r2
    7a1c:	0a43      	lsrs	r3, r0, #9
    7a1e:	428b      	cmp	r3, r1
    7a20:	d301      	bcc.n	7a26 <__udivsi3+0x8e>
    7a22:	024b      	lsls	r3, r1, #9
    7a24:	1ac0      	subs	r0, r0, r3
    7a26:	4152      	adcs	r2, r2
    7a28:	0a03      	lsrs	r3, r0, #8
    7a2a:	428b      	cmp	r3, r1
    7a2c:	d301      	bcc.n	7a32 <__udivsi3+0x9a>
    7a2e:	020b      	lsls	r3, r1, #8
    7a30:	1ac0      	subs	r0, r0, r3
    7a32:	4152      	adcs	r2, r2
    7a34:	d2cd      	bcs.n	79d2 <__udivsi3+0x3a>
    7a36:	09c3      	lsrs	r3, r0, #7
    7a38:	428b      	cmp	r3, r1
    7a3a:	d301      	bcc.n	7a40 <__udivsi3+0xa8>
    7a3c:	01cb      	lsls	r3, r1, #7
    7a3e:	1ac0      	subs	r0, r0, r3
    7a40:	4152      	adcs	r2, r2
    7a42:	0983      	lsrs	r3, r0, #6
    7a44:	428b      	cmp	r3, r1
    7a46:	d301      	bcc.n	7a4c <__udivsi3+0xb4>
    7a48:	018b      	lsls	r3, r1, #6
    7a4a:	1ac0      	subs	r0, r0, r3
    7a4c:	4152      	adcs	r2, r2
    7a4e:	0943      	lsrs	r3, r0, #5
    7a50:	428b      	cmp	r3, r1
    7a52:	d301      	bcc.n	7a58 <__udivsi3+0xc0>
    7a54:	014b      	lsls	r3, r1, #5
    7a56:	1ac0      	subs	r0, r0, r3
    7a58:	4152      	adcs	r2, r2
    7a5a:	0903      	lsrs	r3, r0, #4
    7a5c:	428b      	cmp	r3, r1
    7a5e:	d301      	bcc.n	7a64 <__udivsi3+0xcc>
    7a60:	010b      	lsls	r3, r1, #4
    7a62:	1ac0      	subs	r0, r0, r3
    7a64:	4152      	adcs	r2, r2
    7a66:	08c3      	lsrs	r3, r0, #3
    7a68:	428b      	cmp	r3, r1
    7a6a:	d301      	bcc.n	7a70 <__udivsi3+0xd8>
    7a6c:	00cb      	lsls	r3, r1, #3
    7a6e:	1ac0      	subs	r0, r0, r3
    7a70:	4152      	adcs	r2, r2
    7a72:	0883      	lsrs	r3, r0, #2
    7a74:	428b      	cmp	r3, r1
    7a76:	d301      	bcc.n	7a7c <__udivsi3+0xe4>
    7a78:	008b      	lsls	r3, r1, #2
    7a7a:	1ac0      	subs	r0, r0, r3
    7a7c:	4152      	adcs	r2, r2
    7a7e:	0843      	lsrs	r3, r0, #1
    7a80:	428b      	cmp	r3, r1
    7a82:	d301      	bcc.n	7a88 <__udivsi3+0xf0>
    7a84:	004b      	lsls	r3, r1, #1
    7a86:	1ac0      	subs	r0, r0, r3
    7a88:	4152      	adcs	r2, r2
    7a8a:	1a41      	subs	r1, r0, r1
    7a8c:	d200      	bcs.n	7a90 <__udivsi3+0xf8>
    7a8e:	4601      	mov	r1, r0
    7a90:	4152      	adcs	r2, r2
    7a92:	4610      	mov	r0, r2
    7a94:	4770      	bx	lr
    7a96:	e7ff      	b.n	7a98 <__udivsi3+0x100>
    7a98:	b501      	push	{r0, lr}
    7a9a:	2000      	movs	r0, #0
    7a9c:	f000 f8f0 	bl	7c80 <__aeabi_idiv0>
    7aa0:	bd02      	pop	{r1, pc}
    7aa2:	46c0      	nop			; (mov r8, r8)

00007aa4 <__aeabi_uidivmod>:
    7aa4:	2900      	cmp	r1, #0
    7aa6:	d0f7      	beq.n	7a98 <__udivsi3+0x100>
    7aa8:	e776      	b.n	7998 <__udivsi3>
    7aaa:	4770      	bx	lr

00007aac <__divsi3>:
    7aac:	4603      	mov	r3, r0
    7aae:	430b      	orrs	r3, r1
    7ab0:	d47f      	bmi.n	7bb2 <__divsi3+0x106>
    7ab2:	2200      	movs	r2, #0
    7ab4:	0843      	lsrs	r3, r0, #1
    7ab6:	428b      	cmp	r3, r1
    7ab8:	d374      	bcc.n	7ba4 <__divsi3+0xf8>
    7aba:	0903      	lsrs	r3, r0, #4
    7abc:	428b      	cmp	r3, r1
    7abe:	d35f      	bcc.n	7b80 <__divsi3+0xd4>
    7ac0:	0a03      	lsrs	r3, r0, #8
    7ac2:	428b      	cmp	r3, r1
    7ac4:	d344      	bcc.n	7b50 <__divsi3+0xa4>
    7ac6:	0b03      	lsrs	r3, r0, #12
    7ac8:	428b      	cmp	r3, r1
    7aca:	d328      	bcc.n	7b1e <__divsi3+0x72>
    7acc:	0c03      	lsrs	r3, r0, #16
    7ace:	428b      	cmp	r3, r1
    7ad0:	d30d      	bcc.n	7aee <__divsi3+0x42>
    7ad2:	22ff      	movs	r2, #255	; 0xff
    7ad4:	0209      	lsls	r1, r1, #8
    7ad6:	ba12      	rev	r2, r2
    7ad8:	0c03      	lsrs	r3, r0, #16
    7ada:	428b      	cmp	r3, r1
    7adc:	d302      	bcc.n	7ae4 <__divsi3+0x38>
    7ade:	1212      	asrs	r2, r2, #8
    7ae0:	0209      	lsls	r1, r1, #8
    7ae2:	d065      	beq.n	7bb0 <__divsi3+0x104>
    7ae4:	0b03      	lsrs	r3, r0, #12
    7ae6:	428b      	cmp	r3, r1
    7ae8:	d319      	bcc.n	7b1e <__divsi3+0x72>
    7aea:	e000      	b.n	7aee <__divsi3+0x42>
    7aec:	0a09      	lsrs	r1, r1, #8
    7aee:	0bc3      	lsrs	r3, r0, #15
    7af0:	428b      	cmp	r3, r1
    7af2:	d301      	bcc.n	7af8 <__divsi3+0x4c>
    7af4:	03cb      	lsls	r3, r1, #15
    7af6:	1ac0      	subs	r0, r0, r3
    7af8:	4152      	adcs	r2, r2
    7afa:	0b83      	lsrs	r3, r0, #14
    7afc:	428b      	cmp	r3, r1
    7afe:	d301      	bcc.n	7b04 <__divsi3+0x58>
    7b00:	038b      	lsls	r3, r1, #14
    7b02:	1ac0      	subs	r0, r0, r3
    7b04:	4152      	adcs	r2, r2
    7b06:	0b43      	lsrs	r3, r0, #13
    7b08:	428b      	cmp	r3, r1
    7b0a:	d301      	bcc.n	7b10 <__divsi3+0x64>
    7b0c:	034b      	lsls	r3, r1, #13
    7b0e:	1ac0      	subs	r0, r0, r3
    7b10:	4152      	adcs	r2, r2
    7b12:	0b03      	lsrs	r3, r0, #12
    7b14:	428b      	cmp	r3, r1
    7b16:	d301      	bcc.n	7b1c <__divsi3+0x70>
    7b18:	030b      	lsls	r3, r1, #12
    7b1a:	1ac0      	subs	r0, r0, r3
    7b1c:	4152      	adcs	r2, r2
    7b1e:	0ac3      	lsrs	r3, r0, #11
    7b20:	428b      	cmp	r3, r1
    7b22:	d301      	bcc.n	7b28 <__divsi3+0x7c>
    7b24:	02cb      	lsls	r3, r1, #11
    7b26:	1ac0      	subs	r0, r0, r3
    7b28:	4152      	adcs	r2, r2
    7b2a:	0a83      	lsrs	r3, r0, #10
    7b2c:	428b      	cmp	r3, r1
    7b2e:	d301      	bcc.n	7b34 <__divsi3+0x88>
    7b30:	028b      	lsls	r3, r1, #10
    7b32:	1ac0      	subs	r0, r0, r3
    7b34:	4152      	adcs	r2, r2
    7b36:	0a43      	lsrs	r3, r0, #9
    7b38:	428b      	cmp	r3, r1
    7b3a:	d301      	bcc.n	7b40 <__divsi3+0x94>
    7b3c:	024b      	lsls	r3, r1, #9
    7b3e:	1ac0      	subs	r0, r0, r3
    7b40:	4152      	adcs	r2, r2
    7b42:	0a03      	lsrs	r3, r0, #8
    7b44:	428b      	cmp	r3, r1
    7b46:	d301      	bcc.n	7b4c <__divsi3+0xa0>
    7b48:	020b      	lsls	r3, r1, #8
    7b4a:	1ac0      	subs	r0, r0, r3
    7b4c:	4152      	adcs	r2, r2
    7b4e:	d2cd      	bcs.n	7aec <__divsi3+0x40>
    7b50:	09c3      	lsrs	r3, r0, #7
    7b52:	428b      	cmp	r3, r1
    7b54:	d301      	bcc.n	7b5a <__divsi3+0xae>
    7b56:	01cb      	lsls	r3, r1, #7
    7b58:	1ac0      	subs	r0, r0, r3
    7b5a:	4152      	adcs	r2, r2
    7b5c:	0983      	lsrs	r3, r0, #6
    7b5e:	428b      	cmp	r3, r1
    7b60:	d301      	bcc.n	7b66 <__divsi3+0xba>
    7b62:	018b      	lsls	r3, r1, #6
    7b64:	1ac0      	subs	r0, r0, r3
    7b66:	4152      	adcs	r2, r2
    7b68:	0943      	lsrs	r3, r0, #5
    7b6a:	428b      	cmp	r3, r1
    7b6c:	d301      	bcc.n	7b72 <__divsi3+0xc6>
    7b6e:	014b      	lsls	r3, r1, #5
    7b70:	1ac0      	subs	r0, r0, r3
    7b72:	4152      	adcs	r2, r2
    7b74:	0903      	lsrs	r3, r0, #4
    7b76:	428b      	cmp	r3, r1
    7b78:	d301      	bcc.n	7b7e <__divsi3+0xd2>
    7b7a:	010b      	lsls	r3, r1, #4
    7b7c:	1ac0      	subs	r0, r0, r3
    7b7e:	4152      	adcs	r2, r2
    7b80:	08c3      	lsrs	r3, r0, #3
    7b82:	428b      	cmp	r3, r1
    7b84:	d301      	bcc.n	7b8a <__divsi3+0xde>
    7b86:	00cb      	lsls	r3, r1, #3
    7b88:	1ac0      	subs	r0, r0, r3
    7b8a:	4152      	adcs	r2, r2
    7b8c:	0883      	lsrs	r3, r0, #2
    7b8e:	428b      	cmp	r3, r1
    7b90:	d301      	bcc.n	7b96 <__divsi3+0xea>
    7b92:	008b      	lsls	r3, r1, #2
    7b94:	1ac0      	subs	r0, r0, r3
    7b96:	4152      	adcs	r2, r2
    7b98:	0843      	lsrs	r3, r0, #1
    7b9a:	428b      	cmp	r3, r1
    7b9c:	d301      	bcc.n	7ba2 <__divsi3+0xf6>
    7b9e:	004b      	lsls	r3, r1, #1
    7ba0:	1ac0      	subs	r0, r0, r3
    7ba2:	4152      	adcs	r2, r2
    7ba4:	1a41      	subs	r1, r0, r1
    7ba6:	d200      	bcs.n	7baa <__divsi3+0xfe>
    7ba8:	4601      	mov	r1, r0
    7baa:	4152      	adcs	r2, r2
    7bac:	4610      	mov	r0, r2
    7bae:	4770      	bx	lr
    7bb0:	e05d      	b.n	7c6e <__divsi3+0x1c2>
    7bb2:	0fca      	lsrs	r2, r1, #31
    7bb4:	d000      	beq.n	7bb8 <__divsi3+0x10c>
    7bb6:	4249      	negs	r1, r1
    7bb8:	1003      	asrs	r3, r0, #32
    7bba:	d300      	bcc.n	7bbe <__divsi3+0x112>
    7bbc:	4240      	negs	r0, r0
    7bbe:	4053      	eors	r3, r2
    7bc0:	2200      	movs	r2, #0
    7bc2:	469c      	mov	ip, r3
    7bc4:	0903      	lsrs	r3, r0, #4
    7bc6:	428b      	cmp	r3, r1
    7bc8:	d32d      	bcc.n	7c26 <__divsi3+0x17a>
    7bca:	0a03      	lsrs	r3, r0, #8
    7bcc:	428b      	cmp	r3, r1
    7bce:	d312      	bcc.n	7bf6 <__divsi3+0x14a>
    7bd0:	22fc      	movs	r2, #252	; 0xfc
    7bd2:	0189      	lsls	r1, r1, #6
    7bd4:	ba12      	rev	r2, r2
    7bd6:	0a03      	lsrs	r3, r0, #8
    7bd8:	428b      	cmp	r3, r1
    7bda:	d30c      	bcc.n	7bf6 <__divsi3+0x14a>
    7bdc:	0189      	lsls	r1, r1, #6
    7bde:	1192      	asrs	r2, r2, #6
    7be0:	428b      	cmp	r3, r1
    7be2:	d308      	bcc.n	7bf6 <__divsi3+0x14a>
    7be4:	0189      	lsls	r1, r1, #6
    7be6:	1192      	asrs	r2, r2, #6
    7be8:	428b      	cmp	r3, r1
    7bea:	d304      	bcc.n	7bf6 <__divsi3+0x14a>
    7bec:	0189      	lsls	r1, r1, #6
    7bee:	d03a      	beq.n	7c66 <__divsi3+0x1ba>
    7bf0:	1192      	asrs	r2, r2, #6
    7bf2:	e000      	b.n	7bf6 <__divsi3+0x14a>
    7bf4:	0989      	lsrs	r1, r1, #6
    7bf6:	09c3      	lsrs	r3, r0, #7
    7bf8:	428b      	cmp	r3, r1
    7bfa:	d301      	bcc.n	7c00 <__divsi3+0x154>
    7bfc:	01cb      	lsls	r3, r1, #7
    7bfe:	1ac0      	subs	r0, r0, r3
    7c00:	4152      	adcs	r2, r2
    7c02:	0983      	lsrs	r3, r0, #6
    7c04:	428b      	cmp	r3, r1
    7c06:	d301      	bcc.n	7c0c <__divsi3+0x160>
    7c08:	018b      	lsls	r3, r1, #6
    7c0a:	1ac0      	subs	r0, r0, r3
    7c0c:	4152      	adcs	r2, r2
    7c0e:	0943      	lsrs	r3, r0, #5
    7c10:	428b      	cmp	r3, r1
    7c12:	d301      	bcc.n	7c18 <__divsi3+0x16c>
    7c14:	014b      	lsls	r3, r1, #5
    7c16:	1ac0      	subs	r0, r0, r3
    7c18:	4152      	adcs	r2, r2
    7c1a:	0903      	lsrs	r3, r0, #4
    7c1c:	428b      	cmp	r3, r1
    7c1e:	d301      	bcc.n	7c24 <__divsi3+0x178>
    7c20:	010b      	lsls	r3, r1, #4
    7c22:	1ac0      	subs	r0, r0, r3
    7c24:	4152      	adcs	r2, r2
    7c26:	08c3      	lsrs	r3, r0, #3
    7c28:	428b      	cmp	r3, r1
    7c2a:	d301      	bcc.n	7c30 <__divsi3+0x184>
    7c2c:	00cb      	lsls	r3, r1, #3
    7c2e:	1ac0      	subs	r0, r0, r3
    7c30:	4152      	adcs	r2, r2
    7c32:	0883      	lsrs	r3, r0, #2
    7c34:	428b      	cmp	r3, r1
    7c36:	d301      	bcc.n	7c3c <__divsi3+0x190>
    7c38:	008b      	lsls	r3, r1, #2
    7c3a:	1ac0      	subs	r0, r0, r3
    7c3c:	4152      	adcs	r2, r2
    7c3e:	d2d9      	bcs.n	7bf4 <__divsi3+0x148>
    7c40:	0843      	lsrs	r3, r0, #1
    7c42:	428b      	cmp	r3, r1
    7c44:	d301      	bcc.n	7c4a <__divsi3+0x19e>
    7c46:	004b      	lsls	r3, r1, #1
    7c48:	1ac0      	subs	r0, r0, r3
    7c4a:	4152      	adcs	r2, r2
    7c4c:	1a41      	subs	r1, r0, r1
    7c4e:	d200      	bcs.n	7c52 <__divsi3+0x1a6>
    7c50:	4601      	mov	r1, r0
    7c52:	4663      	mov	r3, ip
    7c54:	4152      	adcs	r2, r2
    7c56:	105b      	asrs	r3, r3, #1
    7c58:	4610      	mov	r0, r2
    7c5a:	d301      	bcc.n	7c60 <__divsi3+0x1b4>
    7c5c:	4240      	negs	r0, r0
    7c5e:	2b00      	cmp	r3, #0
    7c60:	d500      	bpl.n	7c64 <__divsi3+0x1b8>
    7c62:	4249      	negs	r1, r1
    7c64:	4770      	bx	lr
    7c66:	4663      	mov	r3, ip
    7c68:	105b      	asrs	r3, r3, #1
    7c6a:	d300      	bcc.n	7c6e <__divsi3+0x1c2>
    7c6c:	4240      	negs	r0, r0
    7c6e:	b501      	push	{r0, lr}
    7c70:	2000      	movs	r0, #0
    7c72:	f000 f805 	bl	7c80 <__aeabi_idiv0>
    7c76:	bd02      	pop	{r1, pc}

00007c78 <__aeabi_idivmod>:
    7c78:	2900      	cmp	r1, #0
    7c7a:	d0f8      	beq.n	7c6e <__divsi3+0x1c2>
    7c7c:	e716      	b.n	7aac <__divsi3>
    7c7e:	4770      	bx	lr

00007c80 <__aeabi_idiv0>:
    7c80:	4770      	bx	lr
    7c82:	46c0      	nop			; (mov r8, r8)

00007c84 <__aeabi_lmul>:
    7c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c86:	46ce      	mov	lr, r9
    7c88:	4647      	mov	r7, r8
    7c8a:	0415      	lsls	r5, r2, #16
    7c8c:	0c2d      	lsrs	r5, r5, #16
    7c8e:	002e      	movs	r6, r5
    7c90:	b580      	push	{r7, lr}
    7c92:	0407      	lsls	r7, r0, #16
    7c94:	0c14      	lsrs	r4, r2, #16
    7c96:	0c3f      	lsrs	r7, r7, #16
    7c98:	4699      	mov	r9, r3
    7c9a:	0c03      	lsrs	r3, r0, #16
    7c9c:	437e      	muls	r6, r7
    7c9e:	435d      	muls	r5, r3
    7ca0:	4367      	muls	r7, r4
    7ca2:	4363      	muls	r3, r4
    7ca4:	197f      	adds	r7, r7, r5
    7ca6:	0c34      	lsrs	r4, r6, #16
    7ca8:	19e4      	adds	r4, r4, r7
    7caa:	469c      	mov	ip, r3
    7cac:	42a5      	cmp	r5, r4
    7cae:	d903      	bls.n	7cb8 <__aeabi_lmul+0x34>
    7cb0:	2380      	movs	r3, #128	; 0x80
    7cb2:	025b      	lsls	r3, r3, #9
    7cb4:	4698      	mov	r8, r3
    7cb6:	44c4      	add	ip, r8
    7cb8:	464b      	mov	r3, r9
    7cba:	4351      	muls	r1, r2
    7cbc:	4343      	muls	r3, r0
    7cbe:	0436      	lsls	r6, r6, #16
    7cc0:	0c36      	lsrs	r6, r6, #16
    7cc2:	0c25      	lsrs	r5, r4, #16
    7cc4:	0424      	lsls	r4, r4, #16
    7cc6:	4465      	add	r5, ip
    7cc8:	19a4      	adds	r4, r4, r6
    7cca:	1859      	adds	r1, r3, r1
    7ccc:	1949      	adds	r1, r1, r5
    7cce:	0020      	movs	r0, r4
    7cd0:	bc0c      	pop	{r2, r3}
    7cd2:	4690      	mov	r8, r2
    7cd4:	4699      	mov	r9, r3
    7cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007cd8 <atoi>:
    7cd8:	b510      	push	{r4, lr}
    7cda:	220a      	movs	r2, #10
    7cdc:	2100      	movs	r1, #0
    7cde:	f000 fb6d 	bl	83bc <strtol>
    7ce2:	bd10      	pop	{r4, pc}

00007ce4 <__libc_init_array>:
    7ce4:	b570      	push	{r4, r5, r6, lr}
    7ce6:	2600      	movs	r6, #0
    7ce8:	4d0c      	ldr	r5, [pc, #48]	; (7d1c <__libc_init_array+0x38>)
    7cea:	4c0d      	ldr	r4, [pc, #52]	; (7d20 <__libc_init_array+0x3c>)
    7cec:	1b64      	subs	r4, r4, r5
    7cee:	10a4      	asrs	r4, r4, #2
    7cf0:	42a6      	cmp	r6, r4
    7cf2:	d109      	bne.n	7d08 <__libc_init_array+0x24>
    7cf4:	2600      	movs	r6, #0
    7cf6:	f002 ff43 	bl	ab80 <_init>
    7cfa:	4d0a      	ldr	r5, [pc, #40]	; (7d24 <__libc_init_array+0x40>)
    7cfc:	4c0a      	ldr	r4, [pc, #40]	; (7d28 <__libc_init_array+0x44>)
    7cfe:	1b64      	subs	r4, r4, r5
    7d00:	10a4      	asrs	r4, r4, #2
    7d02:	42a6      	cmp	r6, r4
    7d04:	d105      	bne.n	7d12 <__libc_init_array+0x2e>
    7d06:	bd70      	pop	{r4, r5, r6, pc}
    7d08:	00b3      	lsls	r3, r6, #2
    7d0a:	58eb      	ldr	r3, [r5, r3]
    7d0c:	4798      	blx	r3
    7d0e:	3601      	adds	r6, #1
    7d10:	e7ee      	b.n	7cf0 <__libc_init_array+0xc>
    7d12:	00b3      	lsls	r3, r6, #2
    7d14:	58eb      	ldr	r3, [r5, r3]
    7d16:	4798      	blx	r3
    7d18:	3601      	adds	r6, #1
    7d1a:	e7f2      	b.n	7d02 <__libc_init_array+0x1e>
    7d1c:	0000ab8c 	.word	0x0000ab8c
    7d20:	0000ab8c 	.word	0x0000ab8c
    7d24:	0000ab8c 	.word	0x0000ab8c
    7d28:	0000ab90 	.word	0x0000ab90

00007d2c <malloc>:
    7d2c:	b510      	push	{r4, lr}
    7d2e:	4b03      	ldr	r3, [pc, #12]	; (7d3c <malloc+0x10>)
    7d30:	0001      	movs	r1, r0
    7d32:	6818      	ldr	r0, [r3, #0]
    7d34:	f000 f87c 	bl	7e30 <_malloc_r>
    7d38:	bd10      	pop	{r4, pc}
    7d3a:	46c0      	nop			; (mov r8, r8)
    7d3c:	20000010 	.word	0x20000010

00007d40 <free>:
    7d40:	b510      	push	{r4, lr}
    7d42:	4b03      	ldr	r3, [pc, #12]	; (7d50 <free+0x10>)
    7d44:	0001      	movs	r1, r0
    7d46:	6818      	ldr	r0, [r3, #0]
    7d48:	f000 f828 	bl	7d9c <_free_r>
    7d4c:	bd10      	pop	{r4, pc}
    7d4e:	46c0      	nop			; (mov r8, r8)
    7d50:	20000010 	.word	0x20000010

00007d54 <memcpy>:
    7d54:	2300      	movs	r3, #0
    7d56:	b510      	push	{r4, lr}
    7d58:	429a      	cmp	r2, r3
    7d5a:	d100      	bne.n	7d5e <memcpy+0xa>
    7d5c:	bd10      	pop	{r4, pc}
    7d5e:	5ccc      	ldrb	r4, [r1, r3]
    7d60:	54c4      	strb	r4, [r0, r3]
    7d62:	3301      	adds	r3, #1
    7d64:	e7f8      	b.n	7d58 <memcpy+0x4>

00007d66 <memmove>:
    7d66:	b510      	push	{r4, lr}
    7d68:	4288      	cmp	r0, r1
    7d6a:	d902      	bls.n	7d72 <memmove+0xc>
    7d6c:	188b      	adds	r3, r1, r2
    7d6e:	4298      	cmp	r0, r3
    7d70:	d308      	bcc.n	7d84 <memmove+0x1e>
    7d72:	2300      	movs	r3, #0
    7d74:	429a      	cmp	r2, r3
    7d76:	d007      	beq.n	7d88 <memmove+0x22>
    7d78:	5ccc      	ldrb	r4, [r1, r3]
    7d7a:	54c4      	strb	r4, [r0, r3]
    7d7c:	3301      	adds	r3, #1
    7d7e:	e7f9      	b.n	7d74 <memmove+0xe>
    7d80:	5c8b      	ldrb	r3, [r1, r2]
    7d82:	5483      	strb	r3, [r0, r2]
    7d84:	3a01      	subs	r2, #1
    7d86:	d2fb      	bcs.n	7d80 <memmove+0x1a>
    7d88:	bd10      	pop	{r4, pc}

00007d8a <memset>:
    7d8a:	0003      	movs	r3, r0
    7d8c:	1882      	adds	r2, r0, r2
    7d8e:	4293      	cmp	r3, r2
    7d90:	d100      	bne.n	7d94 <memset+0xa>
    7d92:	4770      	bx	lr
    7d94:	7019      	strb	r1, [r3, #0]
    7d96:	3301      	adds	r3, #1
    7d98:	e7f9      	b.n	7d8e <memset+0x4>
	...

00007d9c <_free_r>:
    7d9c:	b570      	push	{r4, r5, r6, lr}
    7d9e:	0005      	movs	r5, r0
    7da0:	2900      	cmp	r1, #0
    7da2:	d010      	beq.n	7dc6 <_free_r+0x2a>
    7da4:	1f0c      	subs	r4, r1, #4
    7da6:	6823      	ldr	r3, [r4, #0]
    7da8:	2b00      	cmp	r3, #0
    7daa:	da00      	bge.n	7dae <_free_r+0x12>
    7dac:	18e4      	adds	r4, r4, r3
    7dae:	0028      	movs	r0, r5
    7db0:	f000 fdec 	bl	898c <__malloc_lock>
    7db4:	4a1d      	ldr	r2, [pc, #116]	; (7e2c <_free_r+0x90>)
    7db6:	6813      	ldr	r3, [r2, #0]
    7db8:	2b00      	cmp	r3, #0
    7dba:	d105      	bne.n	7dc8 <_free_r+0x2c>
    7dbc:	6063      	str	r3, [r4, #4]
    7dbe:	6014      	str	r4, [r2, #0]
    7dc0:	0028      	movs	r0, r5
    7dc2:	f000 fde4 	bl	898e <__malloc_unlock>
    7dc6:	bd70      	pop	{r4, r5, r6, pc}
    7dc8:	42a3      	cmp	r3, r4
    7dca:	d909      	bls.n	7de0 <_free_r+0x44>
    7dcc:	6821      	ldr	r1, [r4, #0]
    7dce:	1860      	adds	r0, r4, r1
    7dd0:	4283      	cmp	r3, r0
    7dd2:	d1f3      	bne.n	7dbc <_free_r+0x20>
    7dd4:	6818      	ldr	r0, [r3, #0]
    7dd6:	685b      	ldr	r3, [r3, #4]
    7dd8:	1841      	adds	r1, r0, r1
    7dda:	6021      	str	r1, [r4, #0]
    7ddc:	e7ee      	b.n	7dbc <_free_r+0x20>
    7dde:	0013      	movs	r3, r2
    7de0:	685a      	ldr	r2, [r3, #4]
    7de2:	2a00      	cmp	r2, #0
    7de4:	d001      	beq.n	7dea <_free_r+0x4e>
    7de6:	42a2      	cmp	r2, r4
    7de8:	d9f9      	bls.n	7dde <_free_r+0x42>
    7dea:	6819      	ldr	r1, [r3, #0]
    7dec:	1858      	adds	r0, r3, r1
    7dee:	42a0      	cmp	r0, r4
    7df0:	d10b      	bne.n	7e0a <_free_r+0x6e>
    7df2:	6820      	ldr	r0, [r4, #0]
    7df4:	1809      	adds	r1, r1, r0
    7df6:	1858      	adds	r0, r3, r1
    7df8:	6019      	str	r1, [r3, #0]
    7dfa:	4282      	cmp	r2, r0
    7dfc:	d1e0      	bne.n	7dc0 <_free_r+0x24>
    7dfe:	6810      	ldr	r0, [r2, #0]
    7e00:	6852      	ldr	r2, [r2, #4]
    7e02:	1841      	adds	r1, r0, r1
    7e04:	6019      	str	r1, [r3, #0]
    7e06:	605a      	str	r2, [r3, #4]
    7e08:	e7da      	b.n	7dc0 <_free_r+0x24>
    7e0a:	42a0      	cmp	r0, r4
    7e0c:	d902      	bls.n	7e14 <_free_r+0x78>
    7e0e:	230c      	movs	r3, #12
    7e10:	602b      	str	r3, [r5, #0]
    7e12:	e7d5      	b.n	7dc0 <_free_r+0x24>
    7e14:	6821      	ldr	r1, [r4, #0]
    7e16:	1860      	adds	r0, r4, r1
    7e18:	4282      	cmp	r2, r0
    7e1a:	d103      	bne.n	7e24 <_free_r+0x88>
    7e1c:	6810      	ldr	r0, [r2, #0]
    7e1e:	6852      	ldr	r2, [r2, #4]
    7e20:	1841      	adds	r1, r0, r1
    7e22:	6021      	str	r1, [r4, #0]
    7e24:	6062      	str	r2, [r4, #4]
    7e26:	605c      	str	r4, [r3, #4]
    7e28:	e7ca      	b.n	7dc0 <_free_r+0x24>
    7e2a:	46c0      	nop			; (mov r8, r8)
    7e2c:	200002b8 	.word	0x200002b8

00007e30 <_malloc_r>:
    7e30:	2303      	movs	r3, #3
    7e32:	b570      	push	{r4, r5, r6, lr}
    7e34:	1ccd      	adds	r5, r1, #3
    7e36:	439d      	bics	r5, r3
    7e38:	3508      	adds	r5, #8
    7e3a:	0006      	movs	r6, r0
    7e3c:	2d0c      	cmp	r5, #12
    7e3e:	d21e      	bcs.n	7e7e <_malloc_r+0x4e>
    7e40:	250c      	movs	r5, #12
    7e42:	42a9      	cmp	r1, r5
    7e44:	d81d      	bhi.n	7e82 <_malloc_r+0x52>
    7e46:	0030      	movs	r0, r6
    7e48:	f000 fda0 	bl	898c <__malloc_lock>
    7e4c:	4a25      	ldr	r2, [pc, #148]	; (7ee4 <_malloc_r+0xb4>)
    7e4e:	6814      	ldr	r4, [r2, #0]
    7e50:	0021      	movs	r1, r4
    7e52:	2900      	cmp	r1, #0
    7e54:	d119      	bne.n	7e8a <_malloc_r+0x5a>
    7e56:	4c24      	ldr	r4, [pc, #144]	; (7ee8 <_malloc_r+0xb8>)
    7e58:	6823      	ldr	r3, [r4, #0]
    7e5a:	2b00      	cmp	r3, #0
    7e5c:	d103      	bne.n	7e66 <_malloc_r+0x36>
    7e5e:	0030      	movs	r0, r6
    7e60:	f000 f8dc 	bl	801c <_sbrk_r>
    7e64:	6020      	str	r0, [r4, #0]
    7e66:	0029      	movs	r1, r5
    7e68:	0030      	movs	r0, r6
    7e6a:	f000 f8d7 	bl	801c <_sbrk_r>
    7e6e:	1c43      	adds	r3, r0, #1
    7e70:	d12c      	bne.n	7ecc <_malloc_r+0x9c>
    7e72:	230c      	movs	r3, #12
    7e74:	0030      	movs	r0, r6
    7e76:	6033      	str	r3, [r6, #0]
    7e78:	f000 fd89 	bl	898e <__malloc_unlock>
    7e7c:	e003      	b.n	7e86 <_malloc_r+0x56>
    7e7e:	2d00      	cmp	r5, #0
    7e80:	dadf      	bge.n	7e42 <_malloc_r+0x12>
    7e82:	230c      	movs	r3, #12
    7e84:	6033      	str	r3, [r6, #0]
    7e86:	2000      	movs	r0, #0
    7e88:	bd70      	pop	{r4, r5, r6, pc}
    7e8a:	680b      	ldr	r3, [r1, #0]
    7e8c:	1b5b      	subs	r3, r3, r5
    7e8e:	d41a      	bmi.n	7ec6 <_malloc_r+0x96>
    7e90:	2b0b      	cmp	r3, #11
    7e92:	d903      	bls.n	7e9c <_malloc_r+0x6c>
    7e94:	600b      	str	r3, [r1, #0]
    7e96:	18cc      	adds	r4, r1, r3
    7e98:	6025      	str	r5, [r4, #0]
    7e9a:	e003      	b.n	7ea4 <_malloc_r+0x74>
    7e9c:	428c      	cmp	r4, r1
    7e9e:	d10e      	bne.n	7ebe <_malloc_r+0x8e>
    7ea0:	6863      	ldr	r3, [r4, #4]
    7ea2:	6013      	str	r3, [r2, #0]
    7ea4:	0030      	movs	r0, r6
    7ea6:	f000 fd72 	bl	898e <__malloc_unlock>
    7eaa:	0020      	movs	r0, r4
    7eac:	2207      	movs	r2, #7
    7eae:	300b      	adds	r0, #11
    7eb0:	1d23      	adds	r3, r4, #4
    7eb2:	4390      	bics	r0, r2
    7eb4:	1ac3      	subs	r3, r0, r3
    7eb6:	d0e7      	beq.n	7e88 <_malloc_r+0x58>
    7eb8:	425a      	negs	r2, r3
    7eba:	50e2      	str	r2, [r4, r3]
    7ebc:	e7e4      	b.n	7e88 <_malloc_r+0x58>
    7ebe:	684b      	ldr	r3, [r1, #4]
    7ec0:	6063      	str	r3, [r4, #4]
    7ec2:	000c      	movs	r4, r1
    7ec4:	e7ee      	b.n	7ea4 <_malloc_r+0x74>
    7ec6:	000c      	movs	r4, r1
    7ec8:	6849      	ldr	r1, [r1, #4]
    7eca:	e7c2      	b.n	7e52 <_malloc_r+0x22>
    7ecc:	2303      	movs	r3, #3
    7ece:	1cc4      	adds	r4, r0, #3
    7ed0:	439c      	bics	r4, r3
    7ed2:	42a0      	cmp	r0, r4
    7ed4:	d0e0      	beq.n	7e98 <_malloc_r+0x68>
    7ed6:	1a21      	subs	r1, r4, r0
    7ed8:	0030      	movs	r0, r6
    7eda:	f000 f89f 	bl	801c <_sbrk_r>
    7ede:	1c43      	adds	r3, r0, #1
    7ee0:	d1da      	bne.n	7e98 <_malloc_r+0x68>
    7ee2:	e7c6      	b.n	7e72 <_malloc_r+0x42>
    7ee4:	200002b8 	.word	0x200002b8
    7ee8:	200002bc 	.word	0x200002bc

00007eec <iprintf>:
    7eec:	b40f      	push	{r0, r1, r2, r3}
    7eee:	4b0b      	ldr	r3, [pc, #44]	; (7f1c <iprintf+0x30>)
    7ef0:	b513      	push	{r0, r1, r4, lr}
    7ef2:	681c      	ldr	r4, [r3, #0]
    7ef4:	2c00      	cmp	r4, #0
    7ef6:	d005      	beq.n	7f04 <iprintf+0x18>
    7ef8:	69a3      	ldr	r3, [r4, #24]
    7efa:	2b00      	cmp	r3, #0
    7efc:	d102      	bne.n	7f04 <iprintf+0x18>
    7efe:	0020      	movs	r0, r4
    7f00:	f000 fc34 	bl	876c <__sinit>
    7f04:	ab05      	add	r3, sp, #20
    7f06:	9a04      	ldr	r2, [sp, #16]
    7f08:	68a1      	ldr	r1, [r4, #8]
    7f0a:	0020      	movs	r0, r4
    7f0c:	9301      	str	r3, [sp, #4]
    7f0e:	f000 fecd 	bl	8cac <_vfiprintf_r>
    7f12:	bc16      	pop	{r1, r2, r4}
    7f14:	bc08      	pop	{r3}
    7f16:	b004      	add	sp, #16
    7f18:	4718      	bx	r3
    7f1a:	46c0      	nop			; (mov r8, r8)
    7f1c:	20000010 	.word	0x20000010

00007f20 <putchar>:
    7f20:	4b08      	ldr	r3, [pc, #32]	; (7f44 <putchar+0x24>)
    7f22:	b570      	push	{r4, r5, r6, lr}
    7f24:	681c      	ldr	r4, [r3, #0]
    7f26:	0005      	movs	r5, r0
    7f28:	2c00      	cmp	r4, #0
    7f2a:	d005      	beq.n	7f38 <putchar+0x18>
    7f2c:	69a3      	ldr	r3, [r4, #24]
    7f2e:	2b00      	cmp	r3, #0
    7f30:	d102      	bne.n	7f38 <putchar+0x18>
    7f32:	0020      	movs	r0, r4
    7f34:	f000 fc1a 	bl	876c <__sinit>
    7f38:	0029      	movs	r1, r5
    7f3a:	68a2      	ldr	r2, [r4, #8]
    7f3c:	0020      	movs	r0, r4
    7f3e:	f001 f959 	bl	91f4 <_putc_r>
    7f42:	bd70      	pop	{r4, r5, r6, pc}
    7f44:	20000010 	.word	0x20000010

00007f48 <_puts_r>:
    7f48:	b570      	push	{r4, r5, r6, lr}
    7f4a:	0005      	movs	r5, r0
    7f4c:	000e      	movs	r6, r1
    7f4e:	2800      	cmp	r0, #0
    7f50:	d004      	beq.n	7f5c <_puts_r+0x14>
    7f52:	6983      	ldr	r3, [r0, #24]
    7f54:	2b00      	cmp	r3, #0
    7f56:	d101      	bne.n	7f5c <_puts_r+0x14>
    7f58:	f000 fc08 	bl	876c <__sinit>
    7f5c:	69ab      	ldr	r3, [r5, #24]
    7f5e:	68ac      	ldr	r4, [r5, #8]
    7f60:	2b00      	cmp	r3, #0
    7f62:	d102      	bne.n	7f6a <_puts_r+0x22>
    7f64:	0028      	movs	r0, r5
    7f66:	f000 fc01 	bl	876c <__sinit>
    7f6a:	4b24      	ldr	r3, [pc, #144]	; (7ffc <_puts_r+0xb4>)
    7f6c:	429c      	cmp	r4, r3
    7f6e:	d10f      	bne.n	7f90 <_puts_r+0x48>
    7f70:	686c      	ldr	r4, [r5, #4]
    7f72:	89a3      	ldrh	r3, [r4, #12]
    7f74:	071b      	lsls	r3, r3, #28
    7f76:	d502      	bpl.n	7f7e <_puts_r+0x36>
    7f78:	6923      	ldr	r3, [r4, #16]
    7f7a:	2b00      	cmp	r3, #0
    7f7c:	d120      	bne.n	7fc0 <_puts_r+0x78>
    7f7e:	0021      	movs	r1, r4
    7f80:	0028      	movs	r0, r5
    7f82:	f000 fa85 	bl	8490 <__swsetup_r>
    7f86:	2800      	cmp	r0, #0
    7f88:	d01a      	beq.n	7fc0 <_puts_r+0x78>
    7f8a:	2001      	movs	r0, #1
    7f8c:	4240      	negs	r0, r0
    7f8e:	bd70      	pop	{r4, r5, r6, pc}
    7f90:	4b1b      	ldr	r3, [pc, #108]	; (8000 <_puts_r+0xb8>)
    7f92:	429c      	cmp	r4, r3
    7f94:	d101      	bne.n	7f9a <_puts_r+0x52>
    7f96:	68ac      	ldr	r4, [r5, #8]
    7f98:	e7eb      	b.n	7f72 <_puts_r+0x2a>
    7f9a:	4b1a      	ldr	r3, [pc, #104]	; (8004 <_puts_r+0xbc>)
    7f9c:	429c      	cmp	r4, r3
    7f9e:	d1e8      	bne.n	7f72 <_puts_r+0x2a>
    7fa0:	68ec      	ldr	r4, [r5, #12]
    7fa2:	e7e6      	b.n	7f72 <_puts_r+0x2a>
    7fa4:	3b01      	subs	r3, #1
    7fa6:	3601      	adds	r6, #1
    7fa8:	60a3      	str	r3, [r4, #8]
    7faa:	2b00      	cmp	r3, #0
    7fac:	da04      	bge.n	7fb8 <_puts_r+0x70>
    7fae:	69a2      	ldr	r2, [r4, #24]
    7fb0:	4293      	cmp	r3, r2
    7fb2:	db16      	blt.n	7fe2 <_puts_r+0x9a>
    7fb4:	290a      	cmp	r1, #10
    7fb6:	d014      	beq.n	7fe2 <_puts_r+0x9a>
    7fb8:	6823      	ldr	r3, [r4, #0]
    7fba:	1c5a      	adds	r2, r3, #1
    7fbc:	6022      	str	r2, [r4, #0]
    7fbe:	7019      	strb	r1, [r3, #0]
    7fc0:	7831      	ldrb	r1, [r6, #0]
    7fc2:	68a3      	ldr	r3, [r4, #8]
    7fc4:	2900      	cmp	r1, #0
    7fc6:	d1ed      	bne.n	7fa4 <_puts_r+0x5c>
    7fc8:	3b01      	subs	r3, #1
    7fca:	60a3      	str	r3, [r4, #8]
    7fcc:	2b00      	cmp	r3, #0
    7fce:	da0f      	bge.n	7ff0 <_puts_r+0xa8>
    7fd0:	0022      	movs	r2, r4
    7fd2:	310a      	adds	r1, #10
    7fd4:	0028      	movs	r0, r5
    7fd6:	f000 fa05 	bl	83e4 <__swbuf_r>
    7fda:	1c43      	adds	r3, r0, #1
    7fdc:	d0d5      	beq.n	7f8a <_puts_r+0x42>
    7fde:	200a      	movs	r0, #10
    7fe0:	e7d5      	b.n	7f8e <_puts_r+0x46>
    7fe2:	0022      	movs	r2, r4
    7fe4:	0028      	movs	r0, r5
    7fe6:	f000 f9fd 	bl	83e4 <__swbuf_r>
    7fea:	1c43      	adds	r3, r0, #1
    7fec:	d1e8      	bne.n	7fc0 <_puts_r+0x78>
    7fee:	e7cc      	b.n	7f8a <_puts_r+0x42>
    7ff0:	200a      	movs	r0, #10
    7ff2:	6823      	ldr	r3, [r4, #0]
    7ff4:	1c5a      	adds	r2, r3, #1
    7ff6:	6022      	str	r2, [r4, #0]
    7ff8:	7018      	strb	r0, [r3, #0]
    7ffa:	e7c8      	b.n	7f8e <_puts_r+0x46>
    7ffc:	0000aa00 	.word	0x0000aa00
    8000:	0000aa20 	.word	0x0000aa20
    8004:	0000a9e0 	.word	0x0000a9e0

00008008 <puts>:
    8008:	b510      	push	{r4, lr}
    800a:	4b03      	ldr	r3, [pc, #12]	; (8018 <puts+0x10>)
    800c:	0001      	movs	r1, r0
    800e:	6818      	ldr	r0, [r3, #0]
    8010:	f7ff ff9a 	bl	7f48 <_puts_r>
    8014:	bd10      	pop	{r4, pc}
    8016:	46c0      	nop			; (mov r8, r8)
    8018:	20000010 	.word	0x20000010

0000801c <_sbrk_r>:
    801c:	2300      	movs	r3, #0
    801e:	b570      	push	{r4, r5, r6, lr}
    8020:	4c06      	ldr	r4, [pc, #24]	; (803c <_sbrk_r+0x20>)
    8022:	0005      	movs	r5, r0
    8024:	0008      	movs	r0, r1
    8026:	6023      	str	r3, [r4, #0]
    8028:	f7fe f85c 	bl	60e4 <_sbrk>
    802c:	1c43      	adds	r3, r0, #1
    802e:	d103      	bne.n	8038 <_sbrk_r+0x1c>
    8030:	6823      	ldr	r3, [r4, #0]
    8032:	2b00      	cmp	r3, #0
    8034:	d000      	beq.n	8038 <_sbrk_r+0x1c>
    8036:	602b      	str	r3, [r5, #0]
    8038:	bd70      	pop	{r4, r5, r6, pc}
    803a:	46c0      	nop			; (mov r8, r8)
    803c:	200005e8 	.word	0x200005e8

00008040 <setbuf>:
    8040:	424a      	negs	r2, r1
    8042:	414a      	adcs	r2, r1
    8044:	2380      	movs	r3, #128	; 0x80
    8046:	b510      	push	{r4, lr}
    8048:	0052      	lsls	r2, r2, #1
    804a:	00db      	lsls	r3, r3, #3
    804c:	f000 f802 	bl	8054 <setvbuf>
    8050:	bd10      	pop	{r4, pc}
	...

00008054 <setvbuf>:
    8054:	b5f0      	push	{r4, r5, r6, r7, lr}
    8056:	001d      	movs	r5, r3
    8058:	4b4f      	ldr	r3, [pc, #316]	; (8198 <setvbuf+0x144>)
    805a:	b085      	sub	sp, #20
    805c:	681e      	ldr	r6, [r3, #0]
    805e:	0004      	movs	r4, r0
    8060:	000f      	movs	r7, r1
    8062:	9200      	str	r2, [sp, #0]
    8064:	2e00      	cmp	r6, #0
    8066:	d005      	beq.n	8074 <setvbuf+0x20>
    8068:	69b3      	ldr	r3, [r6, #24]
    806a:	2b00      	cmp	r3, #0
    806c:	d102      	bne.n	8074 <setvbuf+0x20>
    806e:	0030      	movs	r0, r6
    8070:	f000 fb7c 	bl	876c <__sinit>
    8074:	4b49      	ldr	r3, [pc, #292]	; (819c <setvbuf+0x148>)
    8076:	429c      	cmp	r4, r3
    8078:	d150      	bne.n	811c <setvbuf+0xc8>
    807a:	6874      	ldr	r4, [r6, #4]
    807c:	9b00      	ldr	r3, [sp, #0]
    807e:	2b02      	cmp	r3, #2
    8080:	d005      	beq.n	808e <setvbuf+0x3a>
    8082:	2b01      	cmp	r3, #1
    8084:	d900      	bls.n	8088 <setvbuf+0x34>
    8086:	e084      	b.n	8192 <setvbuf+0x13e>
    8088:	2d00      	cmp	r5, #0
    808a:	da00      	bge.n	808e <setvbuf+0x3a>
    808c:	e081      	b.n	8192 <setvbuf+0x13e>
    808e:	0021      	movs	r1, r4
    8090:	0030      	movs	r0, r6
    8092:	f000 fafd 	bl	8690 <_fflush_r>
    8096:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8098:	2900      	cmp	r1, #0
    809a:	d008      	beq.n	80ae <setvbuf+0x5a>
    809c:	0023      	movs	r3, r4
    809e:	3344      	adds	r3, #68	; 0x44
    80a0:	4299      	cmp	r1, r3
    80a2:	d002      	beq.n	80aa <setvbuf+0x56>
    80a4:	0030      	movs	r0, r6
    80a6:	f7ff fe79 	bl	7d9c <_free_r>
    80aa:	2300      	movs	r3, #0
    80ac:	6363      	str	r3, [r4, #52]	; 0x34
    80ae:	2300      	movs	r3, #0
    80b0:	61a3      	str	r3, [r4, #24]
    80b2:	6063      	str	r3, [r4, #4]
    80b4:	89a3      	ldrh	r3, [r4, #12]
    80b6:	061b      	lsls	r3, r3, #24
    80b8:	d503      	bpl.n	80c2 <setvbuf+0x6e>
    80ba:	6921      	ldr	r1, [r4, #16]
    80bc:	0030      	movs	r0, r6
    80be:	f7ff fe6d 	bl	7d9c <_free_r>
    80c2:	89a3      	ldrh	r3, [r4, #12]
    80c4:	4a36      	ldr	r2, [pc, #216]	; (81a0 <setvbuf+0x14c>)
    80c6:	4013      	ands	r3, r2
    80c8:	81a3      	strh	r3, [r4, #12]
    80ca:	9b00      	ldr	r3, [sp, #0]
    80cc:	2b02      	cmp	r3, #2
    80ce:	d05a      	beq.n	8186 <setvbuf+0x132>
    80d0:	ab03      	add	r3, sp, #12
    80d2:	aa02      	add	r2, sp, #8
    80d4:	0021      	movs	r1, r4
    80d6:	0030      	movs	r0, r6
    80d8:	f000 fbe0 	bl	889c <__swhatbuf_r>
    80dc:	89a3      	ldrh	r3, [r4, #12]
    80de:	4318      	orrs	r0, r3
    80e0:	81a0      	strh	r0, [r4, #12]
    80e2:	2d00      	cmp	r5, #0
    80e4:	d124      	bne.n	8130 <setvbuf+0xdc>
    80e6:	9d02      	ldr	r5, [sp, #8]
    80e8:	0028      	movs	r0, r5
    80ea:	f7ff fe1f 	bl	7d2c <malloc>
    80ee:	9501      	str	r5, [sp, #4]
    80f0:	1e07      	subs	r7, r0, #0
    80f2:	d142      	bne.n	817a <setvbuf+0x126>
    80f4:	9b02      	ldr	r3, [sp, #8]
    80f6:	9301      	str	r3, [sp, #4]
    80f8:	42ab      	cmp	r3, r5
    80fa:	d139      	bne.n	8170 <setvbuf+0x11c>
    80fc:	2001      	movs	r0, #1
    80fe:	4240      	negs	r0, r0
    8100:	2302      	movs	r3, #2
    8102:	89a2      	ldrh	r2, [r4, #12]
    8104:	4313      	orrs	r3, r2
    8106:	81a3      	strh	r3, [r4, #12]
    8108:	2300      	movs	r3, #0
    810a:	60a3      	str	r3, [r4, #8]
    810c:	0023      	movs	r3, r4
    810e:	3347      	adds	r3, #71	; 0x47
    8110:	6023      	str	r3, [r4, #0]
    8112:	6123      	str	r3, [r4, #16]
    8114:	2301      	movs	r3, #1
    8116:	6163      	str	r3, [r4, #20]
    8118:	b005      	add	sp, #20
    811a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    811c:	4b21      	ldr	r3, [pc, #132]	; (81a4 <setvbuf+0x150>)
    811e:	429c      	cmp	r4, r3
    8120:	d101      	bne.n	8126 <setvbuf+0xd2>
    8122:	68b4      	ldr	r4, [r6, #8]
    8124:	e7aa      	b.n	807c <setvbuf+0x28>
    8126:	4b20      	ldr	r3, [pc, #128]	; (81a8 <setvbuf+0x154>)
    8128:	429c      	cmp	r4, r3
    812a:	d1a7      	bne.n	807c <setvbuf+0x28>
    812c:	68f4      	ldr	r4, [r6, #12]
    812e:	e7a5      	b.n	807c <setvbuf+0x28>
    8130:	2f00      	cmp	r7, #0
    8132:	d0d9      	beq.n	80e8 <setvbuf+0x94>
    8134:	69b3      	ldr	r3, [r6, #24]
    8136:	2b00      	cmp	r3, #0
    8138:	d102      	bne.n	8140 <setvbuf+0xec>
    813a:	0030      	movs	r0, r6
    813c:	f000 fb16 	bl	876c <__sinit>
    8140:	9b00      	ldr	r3, [sp, #0]
    8142:	2b01      	cmp	r3, #1
    8144:	d103      	bne.n	814e <setvbuf+0xfa>
    8146:	89a3      	ldrh	r3, [r4, #12]
    8148:	9a00      	ldr	r2, [sp, #0]
    814a:	431a      	orrs	r2, r3
    814c:	81a2      	strh	r2, [r4, #12]
    814e:	2008      	movs	r0, #8
    8150:	89a3      	ldrh	r3, [r4, #12]
    8152:	6027      	str	r7, [r4, #0]
    8154:	6127      	str	r7, [r4, #16]
    8156:	6165      	str	r5, [r4, #20]
    8158:	4018      	ands	r0, r3
    815a:	d018      	beq.n	818e <setvbuf+0x13a>
    815c:	2001      	movs	r0, #1
    815e:	4018      	ands	r0, r3
    8160:	2300      	movs	r3, #0
    8162:	4298      	cmp	r0, r3
    8164:	d011      	beq.n	818a <setvbuf+0x136>
    8166:	426d      	negs	r5, r5
    8168:	60a3      	str	r3, [r4, #8]
    816a:	61a5      	str	r5, [r4, #24]
    816c:	0018      	movs	r0, r3
    816e:	e7d3      	b.n	8118 <setvbuf+0xc4>
    8170:	9801      	ldr	r0, [sp, #4]
    8172:	f7ff fddb 	bl	7d2c <malloc>
    8176:	1e07      	subs	r7, r0, #0
    8178:	d0c0      	beq.n	80fc <setvbuf+0xa8>
    817a:	2380      	movs	r3, #128	; 0x80
    817c:	89a2      	ldrh	r2, [r4, #12]
    817e:	9d01      	ldr	r5, [sp, #4]
    8180:	4313      	orrs	r3, r2
    8182:	81a3      	strh	r3, [r4, #12]
    8184:	e7d6      	b.n	8134 <setvbuf+0xe0>
    8186:	2000      	movs	r0, #0
    8188:	e7ba      	b.n	8100 <setvbuf+0xac>
    818a:	60a5      	str	r5, [r4, #8]
    818c:	e7c4      	b.n	8118 <setvbuf+0xc4>
    818e:	60a0      	str	r0, [r4, #8]
    8190:	e7c2      	b.n	8118 <setvbuf+0xc4>
    8192:	2001      	movs	r0, #1
    8194:	4240      	negs	r0, r0
    8196:	e7bf      	b.n	8118 <setvbuf+0xc4>
    8198:	20000010 	.word	0x20000010
    819c:	0000aa00 	.word	0x0000aa00
    81a0:	fffff35c 	.word	0xfffff35c
    81a4:	0000aa20 	.word	0x0000aa20
    81a8:	0000a9e0 	.word	0x0000a9e0

000081ac <siprintf>:
    81ac:	b40e      	push	{r1, r2, r3}
    81ae:	b510      	push	{r4, lr}
    81b0:	b09d      	sub	sp, #116	; 0x74
    81b2:	a902      	add	r1, sp, #8
    81b4:	9002      	str	r0, [sp, #8]
    81b6:	6108      	str	r0, [r1, #16]
    81b8:	480b      	ldr	r0, [pc, #44]	; (81e8 <siprintf+0x3c>)
    81ba:	2482      	movs	r4, #130	; 0x82
    81bc:	6088      	str	r0, [r1, #8]
    81be:	6148      	str	r0, [r1, #20]
    81c0:	2001      	movs	r0, #1
    81c2:	4240      	negs	r0, r0
    81c4:	ab1f      	add	r3, sp, #124	; 0x7c
    81c6:	81c8      	strh	r0, [r1, #14]
    81c8:	4808      	ldr	r0, [pc, #32]	; (81ec <siprintf+0x40>)
    81ca:	cb04      	ldmia	r3!, {r2}
    81cc:	00a4      	lsls	r4, r4, #2
    81ce:	6800      	ldr	r0, [r0, #0]
    81d0:	9301      	str	r3, [sp, #4]
    81d2:	818c      	strh	r4, [r1, #12]
    81d4:	f000 fc3e 	bl	8a54 <_svfiprintf_r>
    81d8:	2300      	movs	r3, #0
    81da:	9a02      	ldr	r2, [sp, #8]
    81dc:	7013      	strb	r3, [r2, #0]
    81de:	b01d      	add	sp, #116	; 0x74
    81e0:	bc10      	pop	{r4}
    81e2:	bc08      	pop	{r3}
    81e4:	b003      	add	sp, #12
    81e6:	4718      	bx	r3
    81e8:	7fffffff 	.word	0x7fffffff
    81ec:	20000010 	.word	0x20000010

000081f0 <strcmp>:
    81f0:	7802      	ldrb	r2, [r0, #0]
    81f2:	780b      	ldrb	r3, [r1, #0]
    81f4:	2a00      	cmp	r2, #0
    81f6:	d003      	beq.n	8200 <strcmp+0x10>
    81f8:	3001      	adds	r0, #1
    81fa:	3101      	adds	r1, #1
    81fc:	429a      	cmp	r2, r3
    81fe:	d0f7      	beq.n	81f0 <strcmp>
    8200:	1ad0      	subs	r0, r2, r3
    8202:	4770      	bx	lr

00008204 <strcpy>:
    8204:	1c03      	adds	r3, r0, #0
    8206:	780a      	ldrb	r2, [r1, #0]
    8208:	3101      	adds	r1, #1
    820a:	701a      	strb	r2, [r3, #0]
    820c:	3301      	adds	r3, #1
    820e:	2a00      	cmp	r2, #0
    8210:	d1f9      	bne.n	8206 <strcpy+0x2>
    8212:	4770      	bx	lr

00008214 <strdup>:
    8214:	b510      	push	{r4, lr}
    8216:	4b03      	ldr	r3, [pc, #12]	; (8224 <strdup+0x10>)
    8218:	0001      	movs	r1, r0
    821a:	6818      	ldr	r0, [r3, #0]
    821c:	f000 f804 	bl	8228 <_strdup_r>
    8220:	bd10      	pop	{r4, pc}
    8222:	46c0      	nop			; (mov r8, r8)
    8224:	20000010 	.word	0x20000010

00008228 <_strdup_r>:
    8228:	b570      	push	{r4, r5, r6, lr}
    822a:	0005      	movs	r5, r0
    822c:	0008      	movs	r0, r1
    822e:	000e      	movs	r6, r1
    8230:	f000 f80d 	bl	824e <strlen>
    8234:	1c44      	adds	r4, r0, #1
    8236:	0021      	movs	r1, r4
    8238:	0028      	movs	r0, r5
    823a:	f7ff fdf9 	bl	7e30 <_malloc_r>
    823e:	1e05      	subs	r5, r0, #0
    8240:	d003      	beq.n	824a <_strdup_r+0x22>
    8242:	0022      	movs	r2, r4
    8244:	0031      	movs	r1, r6
    8246:	f7ff fd85 	bl	7d54 <memcpy>
    824a:	0028      	movs	r0, r5
    824c:	bd70      	pop	{r4, r5, r6, pc}

0000824e <strlen>:
    824e:	2300      	movs	r3, #0
    8250:	5cc2      	ldrb	r2, [r0, r3]
    8252:	3301      	adds	r3, #1
    8254:	2a00      	cmp	r2, #0
    8256:	d1fb      	bne.n	8250 <strlen+0x2>
    8258:	1e58      	subs	r0, r3, #1
    825a:	4770      	bx	lr

0000825c <strncmp>:
    825c:	2300      	movs	r3, #0
    825e:	b530      	push	{r4, r5, lr}
    8260:	429a      	cmp	r2, r3
    8262:	d00a      	beq.n	827a <strncmp+0x1e>
    8264:	3a01      	subs	r2, #1
    8266:	5cc4      	ldrb	r4, [r0, r3]
    8268:	5ccd      	ldrb	r5, [r1, r3]
    826a:	42ac      	cmp	r4, r5
    826c:	d104      	bne.n	8278 <strncmp+0x1c>
    826e:	429a      	cmp	r2, r3
    8270:	d002      	beq.n	8278 <strncmp+0x1c>
    8272:	3301      	adds	r3, #1
    8274:	2c00      	cmp	r4, #0
    8276:	d1f6      	bne.n	8266 <strncmp+0xa>
    8278:	1b63      	subs	r3, r4, r5
    827a:	0018      	movs	r0, r3
    827c:	bd30      	pop	{r4, r5, pc}

0000827e <strstr>:
    827e:	b510      	push	{r4, lr}
    8280:	0002      	movs	r2, r0
    8282:	7800      	ldrb	r0, [r0, #0]
    8284:	2800      	cmp	r0, #0
    8286:	d104      	bne.n	8292 <strstr+0x14>
    8288:	7809      	ldrb	r1, [r1, #0]
    828a:	2900      	cmp	r1, #0
    828c:	d00d      	beq.n	82aa <strstr+0x2c>
    828e:	bd10      	pop	{r4, pc}
    8290:	3201      	adds	r2, #1
    8292:	7810      	ldrb	r0, [r2, #0]
    8294:	2800      	cmp	r0, #0
    8296:	d0fa      	beq.n	828e <strstr+0x10>
    8298:	2300      	movs	r3, #0
    829a:	5cc8      	ldrb	r0, [r1, r3]
    829c:	2800      	cmp	r0, #0
    829e:	d004      	beq.n	82aa <strstr+0x2c>
    82a0:	5cd4      	ldrb	r4, [r2, r3]
    82a2:	4284      	cmp	r4, r0
    82a4:	d1f4      	bne.n	8290 <strstr+0x12>
    82a6:	3301      	adds	r3, #1
    82a8:	e7f7      	b.n	829a <strstr+0x1c>
    82aa:	0010      	movs	r0, r2
    82ac:	e7ef      	b.n	828e <strstr+0x10>
	...

000082b0 <_strtol_l.isra.0>:
    82b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    82b2:	001f      	movs	r7, r3
    82b4:	000e      	movs	r6, r1
    82b6:	b087      	sub	sp, #28
    82b8:	9005      	str	r0, [sp, #20]
    82ba:	9103      	str	r1, [sp, #12]
    82bc:	9202      	str	r2, [sp, #8]
    82be:	980c      	ldr	r0, [sp, #48]	; 0x30
    82c0:	7834      	ldrb	r4, [r6, #0]
    82c2:	f000 fae8 	bl	8896 <__locale_ctype_ptr_l>
    82c6:	2208      	movs	r2, #8
    82c8:	1900      	adds	r0, r0, r4
    82ca:	7843      	ldrb	r3, [r0, #1]
    82cc:	1c75      	adds	r5, r6, #1
    82ce:	4013      	ands	r3, r2
    82d0:	d10c      	bne.n	82ec <_strtol_l.isra.0+0x3c>
    82d2:	2c2d      	cmp	r4, #45	; 0x2d
    82d4:	d10c      	bne.n	82f0 <_strtol_l.isra.0+0x40>
    82d6:	3301      	adds	r3, #1
    82d8:	782c      	ldrb	r4, [r5, #0]
    82da:	9301      	str	r3, [sp, #4]
    82dc:	1cb5      	adds	r5, r6, #2
    82de:	2f00      	cmp	r7, #0
    82e0:	d00c      	beq.n	82fc <_strtol_l.isra.0+0x4c>
    82e2:	2f10      	cmp	r7, #16
    82e4:	d114      	bne.n	8310 <_strtol_l.isra.0+0x60>
    82e6:	2c30      	cmp	r4, #48	; 0x30
    82e8:	d00a      	beq.n	8300 <_strtol_l.isra.0+0x50>
    82ea:	e011      	b.n	8310 <_strtol_l.isra.0+0x60>
    82ec:	002e      	movs	r6, r5
    82ee:	e7e6      	b.n	82be <_strtol_l.isra.0+0xe>
    82f0:	9301      	str	r3, [sp, #4]
    82f2:	2c2b      	cmp	r4, #43	; 0x2b
    82f4:	d1f3      	bne.n	82de <_strtol_l.isra.0+0x2e>
    82f6:	782c      	ldrb	r4, [r5, #0]
    82f8:	1cb5      	adds	r5, r6, #2
    82fa:	e7f0      	b.n	82de <_strtol_l.isra.0+0x2e>
    82fc:	2c30      	cmp	r4, #48	; 0x30
    82fe:	d12f      	bne.n	8360 <_strtol_l.isra.0+0xb0>
    8300:	2220      	movs	r2, #32
    8302:	782b      	ldrb	r3, [r5, #0]
    8304:	4393      	bics	r3, r2
    8306:	2b58      	cmp	r3, #88	; 0x58
    8308:	d151      	bne.n	83ae <_strtol_l.isra.0+0xfe>
    830a:	2710      	movs	r7, #16
    830c:	786c      	ldrb	r4, [r5, #1]
    830e:	3502      	adds	r5, #2
    8310:	9b01      	ldr	r3, [sp, #4]
    8312:	4a29      	ldr	r2, [pc, #164]	; (83b8 <_strtol_l.isra.0+0x108>)
    8314:	0039      	movs	r1, r7
    8316:	189e      	adds	r6, r3, r2
    8318:	0030      	movs	r0, r6
    831a:	f7ff fbc3 	bl	7aa4 <__aeabi_uidivmod>
    831e:	0030      	movs	r0, r6
    8320:	9104      	str	r1, [sp, #16]
    8322:	0039      	movs	r1, r7
    8324:	f7ff fb38 	bl	7998 <__udivsi3>
    8328:	2101      	movs	r1, #1
    832a:	2300      	movs	r3, #0
    832c:	4249      	negs	r1, r1
    832e:	0002      	movs	r2, r0
    8330:	468c      	mov	ip, r1
    8332:	0018      	movs	r0, r3
    8334:	0021      	movs	r1, r4
    8336:	3930      	subs	r1, #48	; 0x30
    8338:	2909      	cmp	r1, #9
    833a:	d813      	bhi.n	8364 <_strtol_l.isra.0+0xb4>
    833c:	000c      	movs	r4, r1
    833e:	42a7      	cmp	r7, r4
    8340:	dd1c      	ble.n	837c <_strtol_l.isra.0+0xcc>
    8342:	1c59      	adds	r1, r3, #1
    8344:	d009      	beq.n	835a <_strtol_l.isra.0+0xaa>
    8346:	4663      	mov	r3, ip
    8348:	4282      	cmp	r2, r0
    834a:	d306      	bcc.n	835a <_strtol_l.isra.0+0xaa>
    834c:	d102      	bne.n	8354 <_strtol_l.isra.0+0xa4>
    834e:	9904      	ldr	r1, [sp, #16]
    8350:	42a1      	cmp	r1, r4
    8352:	db02      	blt.n	835a <_strtol_l.isra.0+0xaa>
    8354:	2301      	movs	r3, #1
    8356:	4378      	muls	r0, r7
    8358:	1820      	adds	r0, r4, r0
    835a:	782c      	ldrb	r4, [r5, #0]
    835c:	3501      	adds	r5, #1
    835e:	e7e9      	b.n	8334 <_strtol_l.isra.0+0x84>
    8360:	270a      	movs	r7, #10
    8362:	e7d5      	b.n	8310 <_strtol_l.isra.0+0x60>
    8364:	0021      	movs	r1, r4
    8366:	3941      	subs	r1, #65	; 0x41
    8368:	2919      	cmp	r1, #25
    836a:	d801      	bhi.n	8370 <_strtol_l.isra.0+0xc0>
    836c:	3c37      	subs	r4, #55	; 0x37
    836e:	e7e6      	b.n	833e <_strtol_l.isra.0+0x8e>
    8370:	0021      	movs	r1, r4
    8372:	3961      	subs	r1, #97	; 0x61
    8374:	2919      	cmp	r1, #25
    8376:	d801      	bhi.n	837c <_strtol_l.isra.0+0xcc>
    8378:	3c57      	subs	r4, #87	; 0x57
    837a:	e7e0      	b.n	833e <_strtol_l.isra.0+0x8e>
    837c:	1c5a      	adds	r2, r3, #1
    837e:	d108      	bne.n	8392 <_strtol_l.isra.0+0xe2>
    8380:	9a05      	ldr	r2, [sp, #20]
    8382:	3323      	adds	r3, #35	; 0x23
    8384:	6013      	str	r3, [r2, #0]
    8386:	9b02      	ldr	r3, [sp, #8]
    8388:	0030      	movs	r0, r6
    838a:	2b00      	cmp	r3, #0
    838c:	d10b      	bne.n	83a6 <_strtol_l.isra.0+0xf6>
    838e:	b007      	add	sp, #28
    8390:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8392:	9a01      	ldr	r2, [sp, #4]
    8394:	2a00      	cmp	r2, #0
    8396:	d000      	beq.n	839a <_strtol_l.isra.0+0xea>
    8398:	4240      	negs	r0, r0
    839a:	9a02      	ldr	r2, [sp, #8]
    839c:	2a00      	cmp	r2, #0
    839e:	d0f6      	beq.n	838e <_strtol_l.isra.0+0xde>
    83a0:	9a03      	ldr	r2, [sp, #12]
    83a2:	2b00      	cmp	r3, #0
    83a4:	d000      	beq.n	83a8 <_strtol_l.isra.0+0xf8>
    83a6:	1e6a      	subs	r2, r5, #1
    83a8:	9b02      	ldr	r3, [sp, #8]
    83aa:	601a      	str	r2, [r3, #0]
    83ac:	e7ef      	b.n	838e <_strtol_l.isra.0+0xde>
    83ae:	2430      	movs	r4, #48	; 0x30
    83b0:	2f00      	cmp	r7, #0
    83b2:	d1ad      	bne.n	8310 <_strtol_l.isra.0+0x60>
    83b4:	3708      	adds	r7, #8
    83b6:	e7ab      	b.n	8310 <_strtol_l.isra.0+0x60>
    83b8:	7fffffff 	.word	0x7fffffff

000083bc <strtol>:
    83bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    83be:	0013      	movs	r3, r2
    83c0:	4a06      	ldr	r2, [pc, #24]	; (83dc <strtol+0x20>)
    83c2:	0005      	movs	r5, r0
    83c4:	6810      	ldr	r0, [r2, #0]
    83c6:	6a04      	ldr	r4, [r0, #32]
    83c8:	2c00      	cmp	r4, #0
    83ca:	d100      	bne.n	83ce <strtol+0x12>
    83cc:	4c04      	ldr	r4, [pc, #16]	; (83e0 <strtol+0x24>)
    83ce:	000a      	movs	r2, r1
    83d0:	9400      	str	r4, [sp, #0]
    83d2:	0029      	movs	r1, r5
    83d4:	f7ff ff6c 	bl	82b0 <_strtol_l.isra.0>
    83d8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    83da:	46c0      	nop			; (mov r8, r8)
    83dc:	20000010 	.word	0x20000010
    83e0:	20000074 	.word	0x20000074

000083e4 <__swbuf_r>:
    83e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83e6:	0005      	movs	r5, r0
    83e8:	000e      	movs	r6, r1
    83ea:	0014      	movs	r4, r2
    83ec:	2800      	cmp	r0, #0
    83ee:	d004      	beq.n	83fa <__swbuf_r+0x16>
    83f0:	6983      	ldr	r3, [r0, #24]
    83f2:	2b00      	cmp	r3, #0
    83f4:	d101      	bne.n	83fa <__swbuf_r+0x16>
    83f6:	f000 f9b9 	bl	876c <__sinit>
    83fa:	4b22      	ldr	r3, [pc, #136]	; (8484 <__swbuf_r+0xa0>)
    83fc:	429c      	cmp	r4, r3
    83fe:	d12d      	bne.n	845c <__swbuf_r+0x78>
    8400:	686c      	ldr	r4, [r5, #4]
    8402:	69a3      	ldr	r3, [r4, #24]
    8404:	60a3      	str	r3, [r4, #8]
    8406:	89a3      	ldrh	r3, [r4, #12]
    8408:	071b      	lsls	r3, r3, #28
    840a:	d531      	bpl.n	8470 <__swbuf_r+0x8c>
    840c:	6923      	ldr	r3, [r4, #16]
    840e:	2b00      	cmp	r3, #0
    8410:	d02e      	beq.n	8470 <__swbuf_r+0x8c>
    8412:	6823      	ldr	r3, [r4, #0]
    8414:	6922      	ldr	r2, [r4, #16]
    8416:	b2f7      	uxtb	r7, r6
    8418:	1a98      	subs	r0, r3, r2
    841a:	6963      	ldr	r3, [r4, #20]
    841c:	b2f6      	uxtb	r6, r6
    841e:	4298      	cmp	r0, r3
    8420:	db05      	blt.n	842e <__swbuf_r+0x4a>
    8422:	0021      	movs	r1, r4
    8424:	0028      	movs	r0, r5
    8426:	f000 f933 	bl	8690 <_fflush_r>
    842a:	2800      	cmp	r0, #0
    842c:	d126      	bne.n	847c <__swbuf_r+0x98>
    842e:	68a3      	ldr	r3, [r4, #8]
    8430:	3001      	adds	r0, #1
    8432:	3b01      	subs	r3, #1
    8434:	60a3      	str	r3, [r4, #8]
    8436:	6823      	ldr	r3, [r4, #0]
    8438:	1c5a      	adds	r2, r3, #1
    843a:	6022      	str	r2, [r4, #0]
    843c:	701f      	strb	r7, [r3, #0]
    843e:	6963      	ldr	r3, [r4, #20]
    8440:	4298      	cmp	r0, r3
    8442:	d004      	beq.n	844e <__swbuf_r+0x6a>
    8444:	89a3      	ldrh	r3, [r4, #12]
    8446:	07db      	lsls	r3, r3, #31
    8448:	d51a      	bpl.n	8480 <__swbuf_r+0x9c>
    844a:	2e0a      	cmp	r6, #10
    844c:	d118      	bne.n	8480 <__swbuf_r+0x9c>
    844e:	0021      	movs	r1, r4
    8450:	0028      	movs	r0, r5
    8452:	f000 f91d 	bl	8690 <_fflush_r>
    8456:	2800      	cmp	r0, #0
    8458:	d012      	beq.n	8480 <__swbuf_r+0x9c>
    845a:	e00f      	b.n	847c <__swbuf_r+0x98>
    845c:	4b0a      	ldr	r3, [pc, #40]	; (8488 <__swbuf_r+0xa4>)
    845e:	429c      	cmp	r4, r3
    8460:	d101      	bne.n	8466 <__swbuf_r+0x82>
    8462:	68ac      	ldr	r4, [r5, #8]
    8464:	e7cd      	b.n	8402 <__swbuf_r+0x1e>
    8466:	4b09      	ldr	r3, [pc, #36]	; (848c <__swbuf_r+0xa8>)
    8468:	429c      	cmp	r4, r3
    846a:	d1ca      	bne.n	8402 <__swbuf_r+0x1e>
    846c:	68ec      	ldr	r4, [r5, #12]
    846e:	e7c8      	b.n	8402 <__swbuf_r+0x1e>
    8470:	0021      	movs	r1, r4
    8472:	0028      	movs	r0, r5
    8474:	f000 f80c 	bl	8490 <__swsetup_r>
    8478:	2800      	cmp	r0, #0
    847a:	d0ca      	beq.n	8412 <__swbuf_r+0x2e>
    847c:	2601      	movs	r6, #1
    847e:	4276      	negs	r6, r6
    8480:	0030      	movs	r0, r6
    8482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8484:	0000aa00 	.word	0x0000aa00
    8488:	0000aa20 	.word	0x0000aa20
    848c:	0000a9e0 	.word	0x0000a9e0

00008490 <__swsetup_r>:
    8490:	4b36      	ldr	r3, [pc, #216]	; (856c <__swsetup_r+0xdc>)
    8492:	b570      	push	{r4, r5, r6, lr}
    8494:	681d      	ldr	r5, [r3, #0]
    8496:	0006      	movs	r6, r0
    8498:	000c      	movs	r4, r1
    849a:	2d00      	cmp	r5, #0
    849c:	d005      	beq.n	84aa <__swsetup_r+0x1a>
    849e:	69ab      	ldr	r3, [r5, #24]
    84a0:	2b00      	cmp	r3, #0
    84a2:	d102      	bne.n	84aa <__swsetup_r+0x1a>
    84a4:	0028      	movs	r0, r5
    84a6:	f000 f961 	bl	876c <__sinit>
    84aa:	4b31      	ldr	r3, [pc, #196]	; (8570 <__swsetup_r+0xe0>)
    84ac:	429c      	cmp	r4, r3
    84ae:	d10f      	bne.n	84d0 <__swsetup_r+0x40>
    84b0:	686c      	ldr	r4, [r5, #4]
    84b2:	230c      	movs	r3, #12
    84b4:	5ee2      	ldrsh	r2, [r4, r3]
    84b6:	b293      	uxth	r3, r2
    84b8:	0719      	lsls	r1, r3, #28
    84ba:	d42d      	bmi.n	8518 <__swsetup_r+0x88>
    84bc:	06d9      	lsls	r1, r3, #27
    84be:	d411      	bmi.n	84e4 <__swsetup_r+0x54>
    84c0:	2309      	movs	r3, #9
    84c2:	2001      	movs	r0, #1
    84c4:	6033      	str	r3, [r6, #0]
    84c6:	3337      	adds	r3, #55	; 0x37
    84c8:	4313      	orrs	r3, r2
    84ca:	81a3      	strh	r3, [r4, #12]
    84cc:	4240      	negs	r0, r0
    84ce:	bd70      	pop	{r4, r5, r6, pc}
    84d0:	4b28      	ldr	r3, [pc, #160]	; (8574 <__swsetup_r+0xe4>)
    84d2:	429c      	cmp	r4, r3
    84d4:	d101      	bne.n	84da <__swsetup_r+0x4a>
    84d6:	68ac      	ldr	r4, [r5, #8]
    84d8:	e7eb      	b.n	84b2 <__swsetup_r+0x22>
    84da:	4b27      	ldr	r3, [pc, #156]	; (8578 <__swsetup_r+0xe8>)
    84dc:	429c      	cmp	r4, r3
    84de:	d1e8      	bne.n	84b2 <__swsetup_r+0x22>
    84e0:	68ec      	ldr	r4, [r5, #12]
    84e2:	e7e6      	b.n	84b2 <__swsetup_r+0x22>
    84e4:	075b      	lsls	r3, r3, #29
    84e6:	d513      	bpl.n	8510 <__swsetup_r+0x80>
    84e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    84ea:	2900      	cmp	r1, #0
    84ec:	d008      	beq.n	8500 <__swsetup_r+0x70>
    84ee:	0023      	movs	r3, r4
    84f0:	3344      	adds	r3, #68	; 0x44
    84f2:	4299      	cmp	r1, r3
    84f4:	d002      	beq.n	84fc <__swsetup_r+0x6c>
    84f6:	0030      	movs	r0, r6
    84f8:	f7ff fc50 	bl	7d9c <_free_r>
    84fc:	2300      	movs	r3, #0
    84fe:	6363      	str	r3, [r4, #52]	; 0x34
    8500:	2224      	movs	r2, #36	; 0x24
    8502:	89a3      	ldrh	r3, [r4, #12]
    8504:	4393      	bics	r3, r2
    8506:	81a3      	strh	r3, [r4, #12]
    8508:	2300      	movs	r3, #0
    850a:	6063      	str	r3, [r4, #4]
    850c:	6923      	ldr	r3, [r4, #16]
    850e:	6023      	str	r3, [r4, #0]
    8510:	2308      	movs	r3, #8
    8512:	89a2      	ldrh	r2, [r4, #12]
    8514:	4313      	orrs	r3, r2
    8516:	81a3      	strh	r3, [r4, #12]
    8518:	6923      	ldr	r3, [r4, #16]
    851a:	2b00      	cmp	r3, #0
    851c:	d10b      	bne.n	8536 <__swsetup_r+0xa6>
    851e:	21a0      	movs	r1, #160	; 0xa0
    8520:	2280      	movs	r2, #128	; 0x80
    8522:	89a3      	ldrh	r3, [r4, #12]
    8524:	0089      	lsls	r1, r1, #2
    8526:	0092      	lsls	r2, r2, #2
    8528:	400b      	ands	r3, r1
    852a:	4293      	cmp	r3, r2
    852c:	d003      	beq.n	8536 <__swsetup_r+0xa6>
    852e:	0021      	movs	r1, r4
    8530:	0030      	movs	r0, r6
    8532:	f000 f9db 	bl	88ec <__smakebuf_r>
    8536:	2301      	movs	r3, #1
    8538:	89a2      	ldrh	r2, [r4, #12]
    853a:	4013      	ands	r3, r2
    853c:	d011      	beq.n	8562 <__swsetup_r+0xd2>
    853e:	2300      	movs	r3, #0
    8540:	60a3      	str	r3, [r4, #8]
    8542:	6963      	ldr	r3, [r4, #20]
    8544:	425b      	negs	r3, r3
    8546:	61a3      	str	r3, [r4, #24]
    8548:	2000      	movs	r0, #0
    854a:	6923      	ldr	r3, [r4, #16]
    854c:	4283      	cmp	r3, r0
    854e:	d1be      	bne.n	84ce <__swsetup_r+0x3e>
    8550:	230c      	movs	r3, #12
    8552:	5ee2      	ldrsh	r2, [r4, r3]
    8554:	0613      	lsls	r3, r2, #24
    8556:	d5ba      	bpl.n	84ce <__swsetup_r+0x3e>
    8558:	2340      	movs	r3, #64	; 0x40
    855a:	4313      	orrs	r3, r2
    855c:	81a3      	strh	r3, [r4, #12]
    855e:	3801      	subs	r0, #1
    8560:	e7b5      	b.n	84ce <__swsetup_r+0x3e>
    8562:	0792      	lsls	r2, r2, #30
    8564:	d400      	bmi.n	8568 <__swsetup_r+0xd8>
    8566:	6963      	ldr	r3, [r4, #20]
    8568:	60a3      	str	r3, [r4, #8]
    856a:	e7ed      	b.n	8548 <__swsetup_r+0xb8>
    856c:	20000010 	.word	0x20000010
    8570:	0000aa00 	.word	0x0000aa00
    8574:	0000aa20 	.word	0x0000aa20
    8578:	0000a9e0 	.word	0x0000a9e0

0000857c <__sflush_r>:
    857c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    857e:	898a      	ldrh	r2, [r1, #12]
    8580:	0005      	movs	r5, r0
    8582:	000c      	movs	r4, r1
    8584:	0713      	lsls	r3, r2, #28
    8586:	d460      	bmi.n	864a <__sflush_r+0xce>
    8588:	684b      	ldr	r3, [r1, #4]
    858a:	2b00      	cmp	r3, #0
    858c:	dc04      	bgt.n	8598 <__sflush_r+0x1c>
    858e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    8590:	2b00      	cmp	r3, #0
    8592:	dc01      	bgt.n	8598 <__sflush_r+0x1c>
    8594:	2000      	movs	r0, #0
    8596:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8598:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    859a:	2f00      	cmp	r7, #0
    859c:	d0fa      	beq.n	8594 <__sflush_r+0x18>
    859e:	2300      	movs	r3, #0
    85a0:	682e      	ldr	r6, [r5, #0]
    85a2:	602b      	str	r3, [r5, #0]
    85a4:	2380      	movs	r3, #128	; 0x80
    85a6:	015b      	lsls	r3, r3, #5
    85a8:	401a      	ands	r2, r3
    85aa:	d034      	beq.n	8616 <__sflush_r+0x9a>
    85ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
    85ae:	89a3      	ldrh	r3, [r4, #12]
    85b0:	075b      	lsls	r3, r3, #29
    85b2:	d506      	bpl.n	85c2 <__sflush_r+0x46>
    85b4:	6863      	ldr	r3, [r4, #4]
    85b6:	1ac0      	subs	r0, r0, r3
    85b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    85ba:	2b00      	cmp	r3, #0
    85bc:	d001      	beq.n	85c2 <__sflush_r+0x46>
    85be:	6c23      	ldr	r3, [r4, #64]	; 0x40
    85c0:	1ac0      	subs	r0, r0, r3
    85c2:	0002      	movs	r2, r0
    85c4:	6a21      	ldr	r1, [r4, #32]
    85c6:	2300      	movs	r3, #0
    85c8:	0028      	movs	r0, r5
    85ca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    85cc:	47b8      	blx	r7
    85ce:	89a1      	ldrh	r1, [r4, #12]
    85d0:	1c43      	adds	r3, r0, #1
    85d2:	d106      	bne.n	85e2 <__sflush_r+0x66>
    85d4:	682b      	ldr	r3, [r5, #0]
    85d6:	2b1d      	cmp	r3, #29
    85d8:	d831      	bhi.n	863e <__sflush_r+0xc2>
    85da:	4a2c      	ldr	r2, [pc, #176]	; (868c <__sflush_r+0x110>)
    85dc:	40da      	lsrs	r2, r3
    85de:	07d3      	lsls	r3, r2, #31
    85e0:	d52d      	bpl.n	863e <__sflush_r+0xc2>
    85e2:	2300      	movs	r3, #0
    85e4:	6063      	str	r3, [r4, #4]
    85e6:	6923      	ldr	r3, [r4, #16]
    85e8:	6023      	str	r3, [r4, #0]
    85ea:	04cb      	lsls	r3, r1, #19
    85ec:	d505      	bpl.n	85fa <__sflush_r+0x7e>
    85ee:	1c43      	adds	r3, r0, #1
    85f0:	d102      	bne.n	85f8 <__sflush_r+0x7c>
    85f2:	682b      	ldr	r3, [r5, #0]
    85f4:	2b00      	cmp	r3, #0
    85f6:	d100      	bne.n	85fa <__sflush_r+0x7e>
    85f8:	6560      	str	r0, [r4, #84]	; 0x54
    85fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    85fc:	602e      	str	r6, [r5, #0]
    85fe:	2900      	cmp	r1, #0
    8600:	d0c8      	beq.n	8594 <__sflush_r+0x18>
    8602:	0023      	movs	r3, r4
    8604:	3344      	adds	r3, #68	; 0x44
    8606:	4299      	cmp	r1, r3
    8608:	d002      	beq.n	8610 <__sflush_r+0x94>
    860a:	0028      	movs	r0, r5
    860c:	f7ff fbc6 	bl	7d9c <_free_r>
    8610:	2000      	movs	r0, #0
    8612:	6360      	str	r0, [r4, #52]	; 0x34
    8614:	e7bf      	b.n	8596 <__sflush_r+0x1a>
    8616:	2301      	movs	r3, #1
    8618:	6a21      	ldr	r1, [r4, #32]
    861a:	0028      	movs	r0, r5
    861c:	47b8      	blx	r7
    861e:	1c43      	adds	r3, r0, #1
    8620:	d1c5      	bne.n	85ae <__sflush_r+0x32>
    8622:	682b      	ldr	r3, [r5, #0]
    8624:	2b00      	cmp	r3, #0
    8626:	d0c2      	beq.n	85ae <__sflush_r+0x32>
    8628:	2b1d      	cmp	r3, #29
    862a:	d001      	beq.n	8630 <__sflush_r+0xb4>
    862c:	2b16      	cmp	r3, #22
    862e:	d101      	bne.n	8634 <__sflush_r+0xb8>
    8630:	602e      	str	r6, [r5, #0]
    8632:	e7af      	b.n	8594 <__sflush_r+0x18>
    8634:	2340      	movs	r3, #64	; 0x40
    8636:	89a2      	ldrh	r2, [r4, #12]
    8638:	4313      	orrs	r3, r2
    863a:	81a3      	strh	r3, [r4, #12]
    863c:	e7ab      	b.n	8596 <__sflush_r+0x1a>
    863e:	2340      	movs	r3, #64	; 0x40
    8640:	430b      	orrs	r3, r1
    8642:	2001      	movs	r0, #1
    8644:	81a3      	strh	r3, [r4, #12]
    8646:	4240      	negs	r0, r0
    8648:	e7a5      	b.n	8596 <__sflush_r+0x1a>
    864a:	690f      	ldr	r7, [r1, #16]
    864c:	2f00      	cmp	r7, #0
    864e:	d0a1      	beq.n	8594 <__sflush_r+0x18>
    8650:	680b      	ldr	r3, [r1, #0]
    8652:	600f      	str	r7, [r1, #0]
    8654:	1bdb      	subs	r3, r3, r7
    8656:	9301      	str	r3, [sp, #4]
    8658:	2300      	movs	r3, #0
    865a:	0792      	lsls	r2, r2, #30
    865c:	d100      	bne.n	8660 <__sflush_r+0xe4>
    865e:	694b      	ldr	r3, [r1, #20]
    8660:	60a3      	str	r3, [r4, #8]
    8662:	9b01      	ldr	r3, [sp, #4]
    8664:	2b00      	cmp	r3, #0
    8666:	dc00      	bgt.n	866a <__sflush_r+0xee>
    8668:	e794      	b.n	8594 <__sflush_r+0x18>
    866a:	9b01      	ldr	r3, [sp, #4]
    866c:	003a      	movs	r2, r7
    866e:	6a21      	ldr	r1, [r4, #32]
    8670:	0028      	movs	r0, r5
    8672:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    8674:	47b0      	blx	r6
    8676:	2800      	cmp	r0, #0
    8678:	dc03      	bgt.n	8682 <__sflush_r+0x106>
    867a:	2340      	movs	r3, #64	; 0x40
    867c:	89a2      	ldrh	r2, [r4, #12]
    867e:	4313      	orrs	r3, r2
    8680:	e7df      	b.n	8642 <__sflush_r+0xc6>
    8682:	9b01      	ldr	r3, [sp, #4]
    8684:	183f      	adds	r7, r7, r0
    8686:	1a1b      	subs	r3, r3, r0
    8688:	9301      	str	r3, [sp, #4]
    868a:	e7ea      	b.n	8662 <__sflush_r+0xe6>
    868c:	20400001 	.word	0x20400001

00008690 <_fflush_r>:
    8690:	690b      	ldr	r3, [r1, #16]
    8692:	b570      	push	{r4, r5, r6, lr}
    8694:	0005      	movs	r5, r0
    8696:	000c      	movs	r4, r1
    8698:	2b00      	cmp	r3, #0
    869a:	d101      	bne.n	86a0 <_fflush_r+0x10>
    869c:	2000      	movs	r0, #0
    869e:	bd70      	pop	{r4, r5, r6, pc}
    86a0:	2800      	cmp	r0, #0
    86a2:	d004      	beq.n	86ae <_fflush_r+0x1e>
    86a4:	6983      	ldr	r3, [r0, #24]
    86a6:	2b00      	cmp	r3, #0
    86a8:	d101      	bne.n	86ae <_fflush_r+0x1e>
    86aa:	f000 f85f 	bl	876c <__sinit>
    86ae:	4b0b      	ldr	r3, [pc, #44]	; (86dc <_fflush_r+0x4c>)
    86b0:	429c      	cmp	r4, r3
    86b2:	d109      	bne.n	86c8 <_fflush_r+0x38>
    86b4:	686c      	ldr	r4, [r5, #4]
    86b6:	220c      	movs	r2, #12
    86b8:	5ea3      	ldrsh	r3, [r4, r2]
    86ba:	2b00      	cmp	r3, #0
    86bc:	d0ee      	beq.n	869c <_fflush_r+0xc>
    86be:	0021      	movs	r1, r4
    86c0:	0028      	movs	r0, r5
    86c2:	f7ff ff5b 	bl	857c <__sflush_r>
    86c6:	e7ea      	b.n	869e <_fflush_r+0xe>
    86c8:	4b05      	ldr	r3, [pc, #20]	; (86e0 <_fflush_r+0x50>)
    86ca:	429c      	cmp	r4, r3
    86cc:	d101      	bne.n	86d2 <_fflush_r+0x42>
    86ce:	68ac      	ldr	r4, [r5, #8]
    86d0:	e7f1      	b.n	86b6 <_fflush_r+0x26>
    86d2:	4b04      	ldr	r3, [pc, #16]	; (86e4 <_fflush_r+0x54>)
    86d4:	429c      	cmp	r4, r3
    86d6:	d1ee      	bne.n	86b6 <_fflush_r+0x26>
    86d8:	68ec      	ldr	r4, [r5, #12]
    86da:	e7ec      	b.n	86b6 <_fflush_r+0x26>
    86dc:	0000aa00 	.word	0x0000aa00
    86e0:	0000aa20 	.word	0x0000aa20
    86e4:	0000a9e0 	.word	0x0000a9e0

000086e8 <_cleanup_r>:
    86e8:	b510      	push	{r4, lr}
    86ea:	4902      	ldr	r1, [pc, #8]	; (86f4 <_cleanup_r+0xc>)
    86ec:	f000 f8b2 	bl	8854 <_fwalk_reent>
    86f0:	bd10      	pop	{r4, pc}
    86f2:	46c0      	nop			; (mov r8, r8)
    86f4:	00008691 	.word	0x00008691

000086f8 <std.isra.0>:
    86f8:	2300      	movs	r3, #0
    86fa:	b510      	push	{r4, lr}
    86fc:	0004      	movs	r4, r0
    86fe:	6003      	str	r3, [r0, #0]
    8700:	6043      	str	r3, [r0, #4]
    8702:	6083      	str	r3, [r0, #8]
    8704:	8181      	strh	r1, [r0, #12]
    8706:	6643      	str	r3, [r0, #100]	; 0x64
    8708:	81c2      	strh	r2, [r0, #14]
    870a:	6103      	str	r3, [r0, #16]
    870c:	6143      	str	r3, [r0, #20]
    870e:	6183      	str	r3, [r0, #24]
    8710:	0019      	movs	r1, r3
    8712:	2208      	movs	r2, #8
    8714:	305c      	adds	r0, #92	; 0x5c
    8716:	f7ff fb38 	bl	7d8a <memset>
    871a:	4b05      	ldr	r3, [pc, #20]	; (8730 <std.isra.0+0x38>)
    871c:	6224      	str	r4, [r4, #32]
    871e:	6263      	str	r3, [r4, #36]	; 0x24
    8720:	4b04      	ldr	r3, [pc, #16]	; (8734 <std.isra.0+0x3c>)
    8722:	62a3      	str	r3, [r4, #40]	; 0x28
    8724:	4b04      	ldr	r3, [pc, #16]	; (8738 <std.isra.0+0x40>)
    8726:	62e3      	str	r3, [r4, #44]	; 0x2c
    8728:	4b04      	ldr	r3, [pc, #16]	; (873c <std.isra.0+0x44>)
    872a:	6323      	str	r3, [r4, #48]	; 0x30
    872c:	bd10      	pop	{r4, pc}
    872e:	46c0      	nop			; (mov r8, r8)
    8730:	00009261 	.word	0x00009261
    8734:	00009289 	.word	0x00009289
    8738:	000092c1 	.word	0x000092c1
    873c:	000092ed 	.word	0x000092ed

00008740 <__sfmoreglue>:
    8740:	b570      	push	{r4, r5, r6, lr}
    8742:	2568      	movs	r5, #104	; 0x68
    8744:	1e4a      	subs	r2, r1, #1
    8746:	4355      	muls	r5, r2
    8748:	000e      	movs	r6, r1
    874a:	0029      	movs	r1, r5
    874c:	3174      	adds	r1, #116	; 0x74
    874e:	f7ff fb6f 	bl	7e30 <_malloc_r>
    8752:	1e04      	subs	r4, r0, #0
    8754:	d008      	beq.n	8768 <__sfmoreglue+0x28>
    8756:	2100      	movs	r1, #0
    8758:	002a      	movs	r2, r5
    875a:	6001      	str	r1, [r0, #0]
    875c:	6046      	str	r6, [r0, #4]
    875e:	300c      	adds	r0, #12
    8760:	60a0      	str	r0, [r4, #8]
    8762:	3268      	adds	r2, #104	; 0x68
    8764:	f7ff fb11 	bl	7d8a <memset>
    8768:	0020      	movs	r0, r4
    876a:	bd70      	pop	{r4, r5, r6, pc}

0000876c <__sinit>:
    876c:	6983      	ldr	r3, [r0, #24]
    876e:	b513      	push	{r0, r1, r4, lr}
    8770:	0004      	movs	r4, r0
    8772:	2b00      	cmp	r3, #0
    8774:	d128      	bne.n	87c8 <__sinit+0x5c>
    8776:	6483      	str	r3, [r0, #72]	; 0x48
    8778:	64c3      	str	r3, [r0, #76]	; 0x4c
    877a:	6503      	str	r3, [r0, #80]	; 0x50
    877c:	4b13      	ldr	r3, [pc, #76]	; (87cc <__sinit+0x60>)
    877e:	4a14      	ldr	r2, [pc, #80]	; (87d0 <__sinit+0x64>)
    8780:	681b      	ldr	r3, [r3, #0]
    8782:	6282      	str	r2, [r0, #40]	; 0x28
    8784:	9301      	str	r3, [sp, #4]
    8786:	4298      	cmp	r0, r3
    8788:	d101      	bne.n	878e <__sinit+0x22>
    878a:	2301      	movs	r3, #1
    878c:	6183      	str	r3, [r0, #24]
    878e:	0020      	movs	r0, r4
    8790:	f000 f820 	bl	87d4 <__sfp>
    8794:	6060      	str	r0, [r4, #4]
    8796:	0020      	movs	r0, r4
    8798:	f000 f81c 	bl	87d4 <__sfp>
    879c:	60a0      	str	r0, [r4, #8]
    879e:	0020      	movs	r0, r4
    87a0:	f000 f818 	bl	87d4 <__sfp>
    87a4:	2200      	movs	r2, #0
    87a6:	60e0      	str	r0, [r4, #12]
    87a8:	2104      	movs	r1, #4
    87aa:	6860      	ldr	r0, [r4, #4]
    87ac:	f7ff ffa4 	bl	86f8 <std.isra.0>
    87b0:	2201      	movs	r2, #1
    87b2:	2109      	movs	r1, #9
    87b4:	68a0      	ldr	r0, [r4, #8]
    87b6:	f7ff ff9f 	bl	86f8 <std.isra.0>
    87ba:	2202      	movs	r2, #2
    87bc:	2112      	movs	r1, #18
    87be:	68e0      	ldr	r0, [r4, #12]
    87c0:	f7ff ff9a 	bl	86f8 <std.isra.0>
    87c4:	2301      	movs	r3, #1
    87c6:	61a3      	str	r3, [r4, #24]
    87c8:	bd13      	pop	{r0, r1, r4, pc}
    87ca:	46c0      	nop			; (mov r8, r8)
    87cc:	0000a9dc 	.word	0x0000a9dc
    87d0:	000086e9 	.word	0x000086e9

000087d4 <__sfp>:
    87d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87d6:	4b1e      	ldr	r3, [pc, #120]	; (8850 <__sfp+0x7c>)
    87d8:	0007      	movs	r7, r0
    87da:	681e      	ldr	r6, [r3, #0]
    87dc:	69b3      	ldr	r3, [r6, #24]
    87de:	2b00      	cmp	r3, #0
    87e0:	d102      	bne.n	87e8 <__sfp+0x14>
    87e2:	0030      	movs	r0, r6
    87e4:	f7ff ffc2 	bl	876c <__sinit>
    87e8:	3648      	adds	r6, #72	; 0x48
    87ea:	68b4      	ldr	r4, [r6, #8]
    87ec:	6873      	ldr	r3, [r6, #4]
    87ee:	3b01      	subs	r3, #1
    87f0:	d504      	bpl.n	87fc <__sfp+0x28>
    87f2:	6833      	ldr	r3, [r6, #0]
    87f4:	2b00      	cmp	r3, #0
    87f6:	d007      	beq.n	8808 <__sfp+0x34>
    87f8:	6836      	ldr	r6, [r6, #0]
    87fa:	e7f6      	b.n	87ea <__sfp+0x16>
    87fc:	220c      	movs	r2, #12
    87fe:	5ea5      	ldrsh	r5, [r4, r2]
    8800:	2d00      	cmp	r5, #0
    8802:	d00d      	beq.n	8820 <__sfp+0x4c>
    8804:	3468      	adds	r4, #104	; 0x68
    8806:	e7f2      	b.n	87ee <__sfp+0x1a>
    8808:	2104      	movs	r1, #4
    880a:	0038      	movs	r0, r7
    880c:	f7ff ff98 	bl	8740 <__sfmoreglue>
    8810:	6030      	str	r0, [r6, #0]
    8812:	2800      	cmp	r0, #0
    8814:	d1f0      	bne.n	87f8 <__sfp+0x24>
    8816:	230c      	movs	r3, #12
    8818:	0004      	movs	r4, r0
    881a:	603b      	str	r3, [r7, #0]
    881c:	0020      	movs	r0, r4
    881e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8820:	2301      	movs	r3, #1
    8822:	0020      	movs	r0, r4
    8824:	425b      	negs	r3, r3
    8826:	81e3      	strh	r3, [r4, #14]
    8828:	3302      	adds	r3, #2
    882a:	81a3      	strh	r3, [r4, #12]
    882c:	6665      	str	r5, [r4, #100]	; 0x64
    882e:	6025      	str	r5, [r4, #0]
    8830:	60a5      	str	r5, [r4, #8]
    8832:	6065      	str	r5, [r4, #4]
    8834:	6125      	str	r5, [r4, #16]
    8836:	6165      	str	r5, [r4, #20]
    8838:	61a5      	str	r5, [r4, #24]
    883a:	2208      	movs	r2, #8
    883c:	0029      	movs	r1, r5
    883e:	305c      	adds	r0, #92	; 0x5c
    8840:	f7ff faa3 	bl	7d8a <memset>
    8844:	6365      	str	r5, [r4, #52]	; 0x34
    8846:	63a5      	str	r5, [r4, #56]	; 0x38
    8848:	64a5      	str	r5, [r4, #72]	; 0x48
    884a:	64e5      	str	r5, [r4, #76]	; 0x4c
    884c:	e7e6      	b.n	881c <__sfp+0x48>
    884e:	46c0      	nop			; (mov r8, r8)
    8850:	0000a9dc 	.word	0x0000a9dc

00008854 <_fwalk_reent>:
    8854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8856:	0004      	movs	r4, r0
    8858:	0007      	movs	r7, r0
    885a:	2600      	movs	r6, #0
    885c:	9101      	str	r1, [sp, #4]
    885e:	3448      	adds	r4, #72	; 0x48
    8860:	2c00      	cmp	r4, #0
    8862:	d101      	bne.n	8868 <_fwalk_reent+0x14>
    8864:	0030      	movs	r0, r6
    8866:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8868:	6863      	ldr	r3, [r4, #4]
    886a:	68a5      	ldr	r5, [r4, #8]
    886c:	9300      	str	r3, [sp, #0]
    886e:	9b00      	ldr	r3, [sp, #0]
    8870:	3b01      	subs	r3, #1
    8872:	9300      	str	r3, [sp, #0]
    8874:	d501      	bpl.n	887a <_fwalk_reent+0x26>
    8876:	6824      	ldr	r4, [r4, #0]
    8878:	e7f2      	b.n	8860 <_fwalk_reent+0xc>
    887a:	89ab      	ldrh	r3, [r5, #12]
    887c:	2b01      	cmp	r3, #1
    887e:	d908      	bls.n	8892 <_fwalk_reent+0x3e>
    8880:	220e      	movs	r2, #14
    8882:	5eab      	ldrsh	r3, [r5, r2]
    8884:	3301      	adds	r3, #1
    8886:	d004      	beq.n	8892 <_fwalk_reent+0x3e>
    8888:	0029      	movs	r1, r5
    888a:	0038      	movs	r0, r7
    888c:	9b01      	ldr	r3, [sp, #4]
    888e:	4798      	blx	r3
    8890:	4306      	orrs	r6, r0
    8892:	3568      	adds	r5, #104	; 0x68
    8894:	e7eb      	b.n	886e <_fwalk_reent+0x1a>

00008896 <__locale_ctype_ptr_l>:
    8896:	30ec      	adds	r0, #236	; 0xec
    8898:	6800      	ldr	r0, [r0, #0]
    889a:	4770      	bx	lr

0000889c <__swhatbuf_r>:
    889c:	b570      	push	{r4, r5, r6, lr}
    889e:	000e      	movs	r6, r1
    88a0:	001d      	movs	r5, r3
    88a2:	230e      	movs	r3, #14
    88a4:	5ec9      	ldrsh	r1, [r1, r3]
    88a6:	b090      	sub	sp, #64	; 0x40
    88a8:	0014      	movs	r4, r2
    88aa:	2900      	cmp	r1, #0
    88ac:	da07      	bge.n	88be <__swhatbuf_r+0x22>
    88ae:	2300      	movs	r3, #0
    88b0:	602b      	str	r3, [r5, #0]
    88b2:	89b3      	ldrh	r3, [r6, #12]
    88b4:	061b      	lsls	r3, r3, #24
    88b6:	d411      	bmi.n	88dc <__swhatbuf_r+0x40>
    88b8:	2380      	movs	r3, #128	; 0x80
    88ba:	00db      	lsls	r3, r3, #3
    88bc:	e00f      	b.n	88de <__swhatbuf_r+0x42>
    88be:	aa01      	add	r2, sp, #4
    88c0:	f000 fd4c 	bl	935c <_fstat_r>
    88c4:	2800      	cmp	r0, #0
    88c6:	dbf2      	blt.n	88ae <__swhatbuf_r+0x12>
    88c8:	22f0      	movs	r2, #240	; 0xf0
    88ca:	9b02      	ldr	r3, [sp, #8]
    88cc:	0212      	lsls	r2, r2, #8
    88ce:	4013      	ands	r3, r2
    88d0:	4a05      	ldr	r2, [pc, #20]	; (88e8 <__swhatbuf_r+0x4c>)
    88d2:	189b      	adds	r3, r3, r2
    88d4:	425a      	negs	r2, r3
    88d6:	4153      	adcs	r3, r2
    88d8:	602b      	str	r3, [r5, #0]
    88da:	e7ed      	b.n	88b8 <__swhatbuf_r+0x1c>
    88dc:	2340      	movs	r3, #64	; 0x40
    88de:	2000      	movs	r0, #0
    88e0:	6023      	str	r3, [r4, #0]
    88e2:	b010      	add	sp, #64	; 0x40
    88e4:	bd70      	pop	{r4, r5, r6, pc}
    88e6:	46c0      	nop			; (mov r8, r8)
    88e8:	ffffe000 	.word	0xffffe000

000088ec <__smakebuf_r>:
    88ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    88ee:	2602      	movs	r6, #2
    88f0:	898b      	ldrh	r3, [r1, #12]
    88f2:	0005      	movs	r5, r0
    88f4:	000c      	movs	r4, r1
    88f6:	4233      	tst	r3, r6
    88f8:	d006      	beq.n	8908 <__smakebuf_r+0x1c>
    88fa:	0023      	movs	r3, r4
    88fc:	3347      	adds	r3, #71	; 0x47
    88fe:	6023      	str	r3, [r4, #0]
    8900:	6123      	str	r3, [r4, #16]
    8902:	2301      	movs	r3, #1
    8904:	6163      	str	r3, [r4, #20]
    8906:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    8908:	ab01      	add	r3, sp, #4
    890a:	466a      	mov	r2, sp
    890c:	f7ff ffc6 	bl	889c <__swhatbuf_r>
    8910:	9900      	ldr	r1, [sp, #0]
    8912:	0007      	movs	r7, r0
    8914:	0028      	movs	r0, r5
    8916:	f7ff fa8b 	bl	7e30 <_malloc_r>
    891a:	2800      	cmp	r0, #0
    891c:	d106      	bne.n	892c <__smakebuf_r+0x40>
    891e:	220c      	movs	r2, #12
    8920:	5ea3      	ldrsh	r3, [r4, r2]
    8922:	059a      	lsls	r2, r3, #22
    8924:	d4ef      	bmi.n	8906 <__smakebuf_r+0x1a>
    8926:	431e      	orrs	r6, r3
    8928:	81a6      	strh	r6, [r4, #12]
    892a:	e7e6      	b.n	88fa <__smakebuf_r+0xe>
    892c:	4b0d      	ldr	r3, [pc, #52]	; (8964 <__smakebuf_r+0x78>)
    892e:	62ab      	str	r3, [r5, #40]	; 0x28
    8930:	2380      	movs	r3, #128	; 0x80
    8932:	89a2      	ldrh	r2, [r4, #12]
    8934:	6020      	str	r0, [r4, #0]
    8936:	4313      	orrs	r3, r2
    8938:	81a3      	strh	r3, [r4, #12]
    893a:	9b00      	ldr	r3, [sp, #0]
    893c:	6120      	str	r0, [r4, #16]
    893e:	6163      	str	r3, [r4, #20]
    8940:	9b01      	ldr	r3, [sp, #4]
    8942:	2b00      	cmp	r3, #0
    8944:	d00a      	beq.n	895c <__smakebuf_r+0x70>
    8946:	230e      	movs	r3, #14
    8948:	5ee1      	ldrsh	r1, [r4, r3]
    894a:	0028      	movs	r0, r5
    894c:	f000 fd18 	bl	9380 <_isatty_r>
    8950:	2800      	cmp	r0, #0
    8952:	d003      	beq.n	895c <__smakebuf_r+0x70>
    8954:	2301      	movs	r3, #1
    8956:	89a2      	ldrh	r2, [r4, #12]
    8958:	4313      	orrs	r3, r2
    895a:	81a3      	strh	r3, [r4, #12]
    895c:	89a0      	ldrh	r0, [r4, #12]
    895e:	4338      	orrs	r0, r7
    8960:	81a0      	strh	r0, [r4, #12]
    8962:	e7d0      	b.n	8906 <__smakebuf_r+0x1a>
    8964:	000086e9 	.word	0x000086e9

00008968 <__ascii_mbtowc>:
    8968:	b082      	sub	sp, #8
    896a:	2900      	cmp	r1, #0
    896c:	d100      	bne.n	8970 <__ascii_mbtowc+0x8>
    896e:	a901      	add	r1, sp, #4
    8970:	1e10      	subs	r0, r2, #0
    8972:	d006      	beq.n	8982 <__ascii_mbtowc+0x1a>
    8974:	2b00      	cmp	r3, #0
    8976:	d006      	beq.n	8986 <__ascii_mbtowc+0x1e>
    8978:	7813      	ldrb	r3, [r2, #0]
    897a:	600b      	str	r3, [r1, #0]
    897c:	7810      	ldrb	r0, [r2, #0]
    897e:	1e43      	subs	r3, r0, #1
    8980:	4198      	sbcs	r0, r3
    8982:	b002      	add	sp, #8
    8984:	4770      	bx	lr
    8986:	2002      	movs	r0, #2
    8988:	4240      	negs	r0, r0
    898a:	e7fa      	b.n	8982 <__ascii_mbtowc+0x1a>

0000898c <__malloc_lock>:
    898c:	4770      	bx	lr

0000898e <__malloc_unlock>:
    898e:	4770      	bx	lr

00008990 <__ssputs_r>:
    8990:	b5f0      	push	{r4, r5, r6, r7, lr}
    8992:	688e      	ldr	r6, [r1, #8]
    8994:	b085      	sub	sp, #20
    8996:	0007      	movs	r7, r0
    8998:	000c      	movs	r4, r1
    899a:	9203      	str	r2, [sp, #12]
    899c:	9301      	str	r3, [sp, #4]
    899e:	429e      	cmp	r6, r3
    89a0:	d839      	bhi.n	8a16 <__ssputs_r+0x86>
    89a2:	2390      	movs	r3, #144	; 0x90
    89a4:	898a      	ldrh	r2, [r1, #12]
    89a6:	00db      	lsls	r3, r3, #3
    89a8:	421a      	tst	r2, r3
    89aa:	d034      	beq.n	8a16 <__ssputs_r+0x86>
    89ac:	2503      	movs	r5, #3
    89ae:	6909      	ldr	r1, [r1, #16]
    89b0:	6823      	ldr	r3, [r4, #0]
    89b2:	1a5b      	subs	r3, r3, r1
    89b4:	9302      	str	r3, [sp, #8]
    89b6:	6963      	ldr	r3, [r4, #20]
    89b8:	9802      	ldr	r0, [sp, #8]
    89ba:	435d      	muls	r5, r3
    89bc:	0feb      	lsrs	r3, r5, #31
    89be:	195d      	adds	r5, r3, r5
    89c0:	9b01      	ldr	r3, [sp, #4]
    89c2:	106d      	asrs	r5, r5, #1
    89c4:	3301      	adds	r3, #1
    89c6:	181b      	adds	r3, r3, r0
    89c8:	42ab      	cmp	r3, r5
    89ca:	d900      	bls.n	89ce <__ssputs_r+0x3e>
    89cc:	001d      	movs	r5, r3
    89ce:	0553      	lsls	r3, r2, #21
    89d0:	d532      	bpl.n	8a38 <__ssputs_r+0xa8>
    89d2:	0029      	movs	r1, r5
    89d4:	0038      	movs	r0, r7
    89d6:	f7ff fa2b 	bl	7e30 <_malloc_r>
    89da:	1e06      	subs	r6, r0, #0
    89dc:	d109      	bne.n	89f2 <__ssputs_r+0x62>
    89de:	230c      	movs	r3, #12
    89e0:	603b      	str	r3, [r7, #0]
    89e2:	2340      	movs	r3, #64	; 0x40
    89e4:	2001      	movs	r0, #1
    89e6:	89a2      	ldrh	r2, [r4, #12]
    89e8:	4240      	negs	r0, r0
    89ea:	4313      	orrs	r3, r2
    89ec:	81a3      	strh	r3, [r4, #12]
    89ee:	b005      	add	sp, #20
    89f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89f2:	9a02      	ldr	r2, [sp, #8]
    89f4:	6921      	ldr	r1, [r4, #16]
    89f6:	f7ff f9ad 	bl	7d54 <memcpy>
    89fa:	89a3      	ldrh	r3, [r4, #12]
    89fc:	4a14      	ldr	r2, [pc, #80]	; (8a50 <__ssputs_r+0xc0>)
    89fe:	401a      	ands	r2, r3
    8a00:	2380      	movs	r3, #128	; 0x80
    8a02:	4313      	orrs	r3, r2
    8a04:	81a3      	strh	r3, [r4, #12]
    8a06:	9b02      	ldr	r3, [sp, #8]
    8a08:	6126      	str	r6, [r4, #16]
    8a0a:	18f6      	adds	r6, r6, r3
    8a0c:	6026      	str	r6, [r4, #0]
    8a0e:	6165      	str	r5, [r4, #20]
    8a10:	9e01      	ldr	r6, [sp, #4]
    8a12:	1aed      	subs	r5, r5, r3
    8a14:	60a5      	str	r5, [r4, #8]
    8a16:	9b01      	ldr	r3, [sp, #4]
    8a18:	42b3      	cmp	r3, r6
    8a1a:	d200      	bcs.n	8a1e <__ssputs_r+0x8e>
    8a1c:	001e      	movs	r6, r3
    8a1e:	0032      	movs	r2, r6
    8a20:	9903      	ldr	r1, [sp, #12]
    8a22:	6820      	ldr	r0, [r4, #0]
    8a24:	f7ff f99f 	bl	7d66 <memmove>
    8a28:	68a3      	ldr	r3, [r4, #8]
    8a2a:	2000      	movs	r0, #0
    8a2c:	1b9b      	subs	r3, r3, r6
    8a2e:	60a3      	str	r3, [r4, #8]
    8a30:	6823      	ldr	r3, [r4, #0]
    8a32:	199e      	adds	r6, r3, r6
    8a34:	6026      	str	r6, [r4, #0]
    8a36:	e7da      	b.n	89ee <__ssputs_r+0x5e>
    8a38:	002a      	movs	r2, r5
    8a3a:	0038      	movs	r0, r7
    8a3c:	f000 fcd1 	bl	93e2 <_realloc_r>
    8a40:	1e06      	subs	r6, r0, #0
    8a42:	d1e0      	bne.n	8a06 <__ssputs_r+0x76>
    8a44:	6921      	ldr	r1, [r4, #16]
    8a46:	0038      	movs	r0, r7
    8a48:	f7ff f9a8 	bl	7d9c <_free_r>
    8a4c:	e7c7      	b.n	89de <__ssputs_r+0x4e>
    8a4e:	46c0      	nop			; (mov r8, r8)
    8a50:	fffffb7f 	.word	0xfffffb7f

00008a54 <_svfiprintf_r>:
    8a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a56:	b09f      	sub	sp, #124	; 0x7c
    8a58:	9002      	str	r0, [sp, #8]
    8a5a:	9305      	str	r3, [sp, #20]
    8a5c:	898b      	ldrh	r3, [r1, #12]
    8a5e:	000f      	movs	r7, r1
    8a60:	0016      	movs	r6, r2
    8a62:	061b      	lsls	r3, r3, #24
    8a64:	d511      	bpl.n	8a8a <_svfiprintf_r+0x36>
    8a66:	690b      	ldr	r3, [r1, #16]
    8a68:	2b00      	cmp	r3, #0
    8a6a:	d10e      	bne.n	8a8a <_svfiprintf_r+0x36>
    8a6c:	2140      	movs	r1, #64	; 0x40
    8a6e:	f7ff f9df 	bl	7e30 <_malloc_r>
    8a72:	6038      	str	r0, [r7, #0]
    8a74:	6138      	str	r0, [r7, #16]
    8a76:	2800      	cmp	r0, #0
    8a78:	d105      	bne.n	8a86 <_svfiprintf_r+0x32>
    8a7a:	230c      	movs	r3, #12
    8a7c:	9a02      	ldr	r2, [sp, #8]
    8a7e:	3801      	subs	r0, #1
    8a80:	6013      	str	r3, [r2, #0]
    8a82:	b01f      	add	sp, #124	; 0x7c
    8a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a86:	2340      	movs	r3, #64	; 0x40
    8a88:	617b      	str	r3, [r7, #20]
    8a8a:	2300      	movs	r3, #0
    8a8c:	ad06      	add	r5, sp, #24
    8a8e:	616b      	str	r3, [r5, #20]
    8a90:	3320      	adds	r3, #32
    8a92:	766b      	strb	r3, [r5, #25]
    8a94:	3310      	adds	r3, #16
    8a96:	76ab      	strb	r3, [r5, #26]
    8a98:	0034      	movs	r4, r6
    8a9a:	7823      	ldrb	r3, [r4, #0]
    8a9c:	2b00      	cmp	r3, #0
    8a9e:	d147      	bne.n	8b30 <_svfiprintf_r+0xdc>
    8aa0:	1ba3      	subs	r3, r4, r6
    8aa2:	9304      	str	r3, [sp, #16]
    8aa4:	d00d      	beq.n	8ac2 <_svfiprintf_r+0x6e>
    8aa6:	1ba3      	subs	r3, r4, r6
    8aa8:	0032      	movs	r2, r6
    8aaa:	0039      	movs	r1, r7
    8aac:	9802      	ldr	r0, [sp, #8]
    8aae:	f7ff ff6f 	bl	8990 <__ssputs_r>
    8ab2:	1c43      	adds	r3, r0, #1
    8ab4:	d100      	bne.n	8ab8 <_svfiprintf_r+0x64>
    8ab6:	e0b5      	b.n	8c24 <_svfiprintf_r+0x1d0>
    8ab8:	696a      	ldr	r2, [r5, #20]
    8aba:	9b04      	ldr	r3, [sp, #16]
    8abc:	4694      	mov	ip, r2
    8abe:	4463      	add	r3, ip
    8ac0:	616b      	str	r3, [r5, #20]
    8ac2:	7823      	ldrb	r3, [r4, #0]
    8ac4:	2b00      	cmp	r3, #0
    8ac6:	d100      	bne.n	8aca <_svfiprintf_r+0x76>
    8ac8:	e0ac      	b.n	8c24 <_svfiprintf_r+0x1d0>
    8aca:	2201      	movs	r2, #1
    8acc:	2300      	movs	r3, #0
    8ace:	4252      	negs	r2, r2
    8ad0:	606a      	str	r2, [r5, #4]
    8ad2:	a902      	add	r1, sp, #8
    8ad4:	3254      	adds	r2, #84	; 0x54
    8ad6:	1852      	adds	r2, r2, r1
    8ad8:	3401      	adds	r4, #1
    8ada:	602b      	str	r3, [r5, #0]
    8adc:	60eb      	str	r3, [r5, #12]
    8ade:	60ab      	str	r3, [r5, #8]
    8ae0:	7013      	strb	r3, [r2, #0]
    8ae2:	65ab      	str	r3, [r5, #88]	; 0x58
    8ae4:	4e58      	ldr	r6, [pc, #352]	; (8c48 <_svfiprintf_r+0x1f4>)
    8ae6:	2205      	movs	r2, #5
    8ae8:	7821      	ldrb	r1, [r4, #0]
    8aea:	0030      	movs	r0, r6
    8aec:	f000 fc6e 	bl	93cc <memchr>
    8af0:	1c62      	adds	r2, r4, #1
    8af2:	2800      	cmp	r0, #0
    8af4:	d120      	bne.n	8b38 <_svfiprintf_r+0xe4>
    8af6:	6829      	ldr	r1, [r5, #0]
    8af8:	06cb      	lsls	r3, r1, #27
    8afa:	d504      	bpl.n	8b06 <_svfiprintf_r+0xb2>
    8afc:	2353      	movs	r3, #83	; 0x53
    8afe:	ae02      	add	r6, sp, #8
    8b00:	3020      	adds	r0, #32
    8b02:	199b      	adds	r3, r3, r6
    8b04:	7018      	strb	r0, [r3, #0]
    8b06:	070b      	lsls	r3, r1, #28
    8b08:	d504      	bpl.n	8b14 <_svfiprintf_r+0xc0>
    8b0a:	2353      	movs	r3, #83	; 0x53
    8b0c:	202b      	movs	r0, #43	; 0x2b
    8b0e:	ae02      	add	r6, sp, #8
    8b10:	199b      	adds	r3, r3, r6
    8b12:	7018      	strb	r0, [r3, #0]
    8b14:	7823      	ldrb	r3, [r4, #0]
    8b16:	2b2a      	cmp	r3, #42	; 0x2a
    8b18:	d016      	beq.n	8b48 <_svfiprintf_r+0xf4>
    8b1a:	2000      	movs	r0, #0
    8b1c:	210a      	movs	r1, #10
    8b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8b20:	7822      	ldrb	r2, [r4, #0]
    8b22:	3a30      	subs	r2, #48	; 0x30
    8b24:	2a09      	cmp	r2, #9
    8b26:	d955      	bls.n	8bd4 <_svfiprintf_r+0x180>
    8b28:	2800      	cmp	r0, #0
    8b2a:	d015      	beq.n	8b58 <_svfiprintf_r+0x104>
    8b2c:	9309      	str	r3, [sp, #36]	; 0x24
    8b2e:	e013      	b.n	8b58 <_svfiprintf_r+0x104>
    8b30:	2b25      	cmp	r3, #37	; 0x25
    8b32:	d0b5      	beq.n	8aa0 <_svfiprintf_r+0x4c>
    8b34:	3401      	adds	r4, #1
    8b36:	e7b0      	b.n	8a9a <_svfiprintf_r+0x46>
    8b38:	2301      	movs	r3, #1
    8b3a:	1b80      	subs	r0, r0, r6
    8b3c:	4083      	lsls	r3, r0
    8b3e:	6829      	ldr	r1, [r5, #0]
    8b40:	0014      	movs	r4, r2
    8b42:	430b      	orrs	r3, r1
    8b44:	602b      	str	r3, [r5, #0]
    8b46:	e7cd      	b.n	8ae4 <_svfiprintf_r+0x90>
    8b48:	9b05      	ldr	r3, [sp, #20]
    8b4a:	1d18      	adds	r0, r3, #4
    8b4c:	681b      	ldr	r3, [r3, #0]
    8b4e:	9005      	str	r0, [sp, #20]
    8b50:	2b00      	cmp	r3, #0
    8b52:	db39      	blt.n	8bc8 <_svfiprintf_r+0x174>
    8b54:	9309      	str	r3, [sp, #36]	; 0x24
    8b56:	0014      	movs	r4, r2
    8b58:	7823      	ldrb	r3, [r4, #0]
    8b5a:	2b2e      	cmp	r3, #46	; 0x2e
    8b5c:	d10b      	bne.n	8b76 <_svfiprintf_r+0x122>
    8b5e:	7863      	ldrb	r3, [r4, #1]
    8b60:	1c62      	adds	r2, r4, #1
    8b62:	2b2a      	cmp	r3, #42	; 0x2a
    8b64:	d13e      	bne.n	8be4 <_svfiprintf_r+0x190>
    8b66:	9b05      	ldr	r3, [sp, #20]
    8b68:	3402      	adds	r4, #2
    8b6a:	1d1a      	adds	r2, r3, #4
    8b6c:	681b      	ldr	r3, [r3, #0]
    8b6e:	9205      	str	r2, [sp, #20]
    8b70:	2b00      	cmp	r3, #0
    8b72:	db34      	blt.n	8bde <_svfiprintf_r+0x18a>
    8b74:	9307      	str	r3, [sp, #28]
    8b76:	4e35      	ldr	r6, [pc, #212]	; (8c4c <_svfiprintf_r+0x1f8>)
    8b78:	7821      	ldrb	r1, [r4, #0]
    8b7a:	2203      	movs	r2, #3
    8b7c:	0030      	movs	r0, r6
    8b7e:	f000 fc25 	bl	93cc <memchr>
    8b82:	2800      	cmp	r0, #0
    8b84:	d006      	beq.n	8b94 <_svfiprintf_r+0x140>
    8b86:	2340      	movs	r3, #64	; 0x40
    8b88:	1b80      	subs	r0, r0, r6
    8b8a:	4083      	lsls	r3, r0
    8b8c:	682a      	ldr	r2, [r5, #0]
    8b8e:	3401      	adds	r4, #1
    8b90:	4313      	orrs	r3, r2
    8b92:	602b      	str	r3, [r5, #0]
    8b94:	7821      	ldrb	r1, [r4, #0]
    8b96:	2206      	movs	r2, #6
    8b98:	482d      	ldr	r0, [pc, #180]	; (8c50 <_svfiprintf_r+0x1fc>)
    8b9a:	1c66      	adds	r6, r4, #1
    8b9c:	7629      	strb	r1, [r5, #24]
    8b9e:	f000 fc15 	bl	93cc <memchr>
    8ba2:	2800      	cmp	r0, #0
    8ba4:	d046      	beq.n	8c34 <_svfiprintf_r+0x1e0>
    8ba6:	4b2b      	ldr	r3, [pc, #172]	; (8c54 <_svfiprintf_r+0x200>)
    8ba8:	2b00      	cmp	r3, #0
    8baa:	d12f      	bne.n	8c0c <_svfiprintf_r+0x1b8>
    8bac:	6829      	ldr	r1, [r5, #0]
    8bae:	9b05      	ldr	r3, [sp, #20]
    8bb0:	2207      	movs	r2, #7
    8bb2:	05c9      	lsls	r1, r1, #23
    8bb4:	d528      	bpl.n	8c08 <_svfiprintf_r+0x1b4>
    8bb6:	189b      	adds	r3, r3, r2
    8bb8:	4393      	bics	r3, r2
    8bba:	3308      	adds	r3, #8
    8bbc:	9305      	str	r3, [sp, #20]
    8bbe:	696b      	ldr	r3, [r5, #20]
    8bc0:	9a03      	ldr	r2, [sp, #12]
    8bc2:	189b      	adds	r3, r3, r2
    8bc4:	616b      	str	r3, [r5, #20]
    8bc6:	e767      	b.n	8a98 <_svfiprintf_r+0x44>
    8bc8:	425b      	negs	r3, r3
    8bca:	60eb      	str	r3, [r5, #12]
    8bcc:	2302      	movs	r3, #2
    8bce:	430b      	orrs	r3, r1
    8bd0:	602b      	str	r3, [r5, #0]
    8bd2:	e7c0      	b.n	8b56 <_svfiprintf_r+0x102>
    8bd4:	434b      	muls	r3, r1
    8bd6:	3401      	adds	r4, #1
    8bd8:	189b      	adds	r3, r3, r2
    8bda:	2001      	movs	r0, #1
    8bdc:	e7a0      	b.n	8b20 <_svfiprintf_r+0xcc>
    8bde:	2301      	movs	r3, #1
    8be0:	425b      	negs	r3, r3
    8be2:	e7c7      	b.n	8b74 <_svfiprintf_r+0x120>
    8be4:	2300      	movs	r3, #0
    8be6:	0014      	movs	r4, r2
    8be8:	200a      	movs	r0, #10
    8bea:	001a      	movs	r2, r3
    8bec:	606b      	str	r3, [r5, #4]
    8bee:	7821      	ldrb	r1, [r4, #0]
    8bf0:	3930      	subs	r1, #48	; 0x30
    8bf2:	2909      	cmp	r1, #9
    8bf4:	d903      	bls.n	8bfe <_svfiprintf_r+0x1aa>
    8bf6:	2b00      	cmp	r3, #0
    8bf8:	d0bd      	beq.n	8b76 <_svfiprintf_r+0x122>
    8bfa:	9207      	str	r2, [sp, #28]
    8bfc:	e7bb      	b.n	8b76 <_svfiprintf_r+0x122>
    8bfe:	4342      	muls	r2, r0
    8c00:	3401      	adds	r4, #1
    8c02:	1852      	adds	r2, r2, r1
    8c04:	2301      	movs	r3, #1
    8c06:	e7f2      	b.n	8bee <_svfiprintf_r+0x19a>
    8c08:	3307      	adds	r3, #7
    8c0a:	e7d5      	b.n	8bb8 <_svfiprintf_r+0x164>
    8c0c:	ab05      	add	r3, sp, #20
    8c0e:	9300      	str	r3, [sp, #0]
    8c10:	003a      	movs	r2, r7
    8c12:	4b11      	ldr	r3, [pc, #68]	; (8c58 <_svfiprintf_r+0x204>)
    8c14:	0029      	movs	r1, r5
    8c16:	9802      	ldr	r0, [sp, #8]
    8c18:	e000      	b.n	8c1c <_svfiprintf_r+0x1c8>
    8c1a:	bf00      	nop
    8c1c:	9003      	str	r0, [sp, #12]
    8c1e:	9b03      	ldr	r3, [sp, #12]
    8c20:	3301      	adds	r3, #1
    8c22:	d1cc      	bne.n	8bbe <_svfiprintf_r+0x16a>
    8c24:	89bb      	ldrh	r3, [r7, #12]
    8c26:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8c28:	065b      	lsls	r3, r3, #25
    8c2a:	d400      	bmi.n	8c2e <_svfiprintf_r+0x1da>
    8c2c:	e729      	b.n	8a82 <_svfiprintf_r+0x2e>
    8c2e:	2001      	movs	r0, #1
    8c30:	4240      	negs	r0, r0
    8c32:	e726      	b.n	8a82 <_svfiprintf_r+0x2e>
    8c34:	ab05      	add	r3, sp, #20
    8c36:	9300      	str	r3, [sp, #0]
    8c38:	003a      	movs	r2, r7
    8c3a:	4b07      	ldr	r3, [pc, #28]	; (8c58 <_svfiprintf_r+0x204>)
    8c3c:	0029      	movs	r1, r5
    8c3e:	9802      	ldr	r0, [sp, #8]
    8c40:	f000 f9be 	bl	8fc0 <_printf_i>
    8c44:	e7ea      	b.n	8c1c <_svfiprintf_r+0x1c8>
    8c46:	46c0      	nop			; (mov r8, r8)
    8c48:	0000aa4a 	.word	0x0000aa4a
    8c4c:	0000aa50 	.word	0x0000aa50
    8c50:	0000aa54 	.word	0x0000aa54
    8c54:	00000000 	.word	0x00000000
    8c58:	00008991 	.word	0x00008991

00008c5c <__sfputc_r>:
    8c5c:	6893      	ldr	r3, [r2, #8]
    8c5e:	b510      	push	{r4, lr}
    8c60:	3b01      	subs	r3, #1
    8c62:	6093      	str	r3, [r2, #8]
    8c64:	2b00      	cmp	r3, #0
    8c66:	da05      	bge.n	8c74 <__sfputc_r+0x18>
    8c68:	6994      	ldr	r4, [r2, #24]
    8c6a:	42a3      	cmp	r3, r4
    8c6c:	db08      	blt.n	8c80 <__sfputc_r+0x24>
    8c6e:	b2cb      	uxtb	r3, r1
    8c70:	2b0a      	cmp	r3, #10
    8c72:	d005      	beq.n	8c80 <__sfputc_r+0x24>
    8c74:	6813      	ldr	r3, [r2, #0]
    8c76:	1c58      	adds	r0, r3, #1
    8c78:	6010      	str	r0, [r2, #0]
    8c7a:	7019      	strb	r1, [r3, #0]
    8c7c:	b2c8      	uxtb	r0, r1
    8c7e:	bd10      	pop	{r4, pc}
    8c80:	f7ff fbb0 	bl	83e4 <__swbuf_r>
    8c84:	e7fb      	b.n	8c7e <__sfputc_r+0x22>

00008c86 <__sfputs_r>:
    8c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c88:	0006      	movs	r6, r0
    8c8a:	000f      	movs	r7, r1
    8c8c:	0014      	movs	r4, r2
    8c8e:	18d5      	adds	r5, r2, r3
    8c90:	42ac      	cmp	r4, r5
    8c92:	d101      	bne.n	8c98 <__sfputs_r+0x12>
    8c94:	2000      	movs	r0, #0
    8c96:	e007      	b.n	8ca8 <__sfputs_r+0x22>
    8c98:	7821      	ldrb	r1, [r4, #0]
    8c9a:	003a      	movs	r2, r7
    8c9c:	0030      	movs	r0, r6
    8c9e:	f7ff ffdd 	bl	8c5c <__sfputc_r>
    8ca2:	3401      	adds	r4, #1
    8ca4:	1c43      	adds	r3, r0, #1
    8ca6:	d1f3      	bne.n	8c90 <__sfputs_r+0xa>
    8ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008cac <_vfiprintf_r>:
    8cac:	b5f0      	push	{r4, r5, r6, r7, lr}
    8cae:	b09f      	sub	sp, #124	; 0x7c
    8cb0:	0006      	movs	r6, r0
    8cb2:	000f      	movs	r7, r1
    8cb4:	0014      	movs	r4, r2
    8cb6:	9305      	str	r3, [sp, #20]
    8cb8:	2800      	cmp	r0, #0
    8cba:	d004      	beq.n	8cc6 <_vfiprintf_r+0x1a>
    8cbc:	6983      	ldr	r3, [r0, #24]
    8cbe:	2b00      	cmp	r3, #0
    8cc0:	d101      	bne.n	8cc6 <_vfiprintf_r+0x1a>
    8cc2:	f7ff fd53 	bl	876c <__sinit>
    8cc6:	4b7f      	ldr	r3, [pc, #508]	; (8ec4 <_vfiprintf_r+0x218>)
    8cc8:	429f      	cmp	r7, r3
    8cca:	d15c      	bne.n	8d86 <_vfiprintf_r+0xda>
    8ccc:	6877      	ldr	r7, [r6, #4]
    8cce:	89bb      	ldrh	r3, [r7, #12]
    8cd0:	071b      	lsls	r3, r3, #28
    8cd2:	d562      	bpl.n	8d9a <_vfiprintf_r+0xee>
    8cd4:	693b      	ldr	r3, [r7, #16]
    8cd6:	2b00      	cmp	r3, #0
    8cd8:	d05f      	beq.n	8d9a <_vfiprintf_r+0xee>
    8cda:	2300      	movs	r3, #0
    8cdc:	ad06      	add	r5, sp, #24
    8cde:	616b      	str	r3, [r5, #20]
    8ce0:	3320      	adds	r3, #32
    8ce2:	766b      	strb	r3, [r5, #25]
    8ce4:	3310      	adds	r3, #16
    8ce6:	76ab      	strb	r3, [r5, #26]
    8ce8:	9402      	str	r4, [sp, #8]
    8cea:	9c02      	ldr	r4, [sp, #8]
    8cec:	7823      	ldrb	r3, [r4, #0]
    8cee:	2b00      	cmp	r3, #0
    8cf0:	d15d      	bne.n	8dae <_vfiprintf_r+0x102>
    8cf2:	9b02      	ldr	r3, [sp, #8]
    8cf4:	1ae3      	subs	r3, r4, r3
    8cf6:	9304      	str	r3, [sp, #16]
    8cf8:	d00d      	beq.n	8d16 <_vfiprintf_r+0x6a>
    8cfa:	9b04      	ldr	r3, [sp, #16]
    8cfc:	9a02      	ldr	r2, [sp, #8]
    8cfe:	0039      	movs	r1, r7
    8d00:	0030      	movs	r0, r6
    8d02:	f7ff ffc0 	bl	8c86 <__sfputs_r>
    8d06:	1c43      	adds	r3, r0, #1
    8d08:	d100      	bne.n	8d0c <_vfiprintf_r+0x60>
    8d0a:	e0cc      	b.n	8ea6 <_vfiprintf_r+0x1fa>
    8d0c:	696a      	ldr	r2, [r5, #20]
    8d0e:	9b04      	ldr	r3, [sp, #16]
    8d10:	4694      	mov	ip, r2
    8d12:	4463      	add	r3, ip
    8d14:	616b      	str	r3, [r5, #20]
    8d16:	7823      	ldrb	r3, [r4, #0]
    8d18:	2b00      	cmp	r3, #0
    8d1a:	d100      	bne.n	8d1e <_vfiprintf_r+0x72>
    8d1c:	e0c3      	b.n	8ea6 <_vfiprintf_r+0x1fa>
    8d1e:	2201      	movs	r2, #1
    8d20:	2300      	movs	r3, #0
    8d22:	4252      	negs	r2, r2
    8d24:	606a      	str	r2, [r5, #4]
    8d26:	a902      	add	r1, sp, #8
    8d28:	3254      	adds	r2, #84	; 0x54
    8d2a:	1852      	adds	r2, r2, r1
    8d2c:	3401      	adds	r4, #1
    8d2e:	602b      	str	r3, [r5, #0]
    8d30:	60eb      	str	r3, [r5, #12]
    8d32:	60ab      	str	r3, [r5, #8]
    8d34:	7013      	strb	r3, [r2, #0]
    8d36:	65ab      	str	r3, [r5, #88]	; 0x58
    8d38:	7821      	ldrb	r1, [r4, #0]
    8d3a:	2205      	movs	r2, #5
    8d3c:	4862      	ldr	r0, [pc, #392]	; (8ec8 <_vfiprintf_r+0x21c>)
    8d3e:	f000 fb45 	bl	93cc <memchr>
    8d42:	1c63      	adds	r3, r4, #1
    8d44:	469c      	mov	ip, r3
    8d46:	2800      	cmp	r0, #0
    8d48:	d135      	bne.n	8db6 <_vfiprintf_r+0x10a>
    8d4a:	6829      	ldr	r1, [r5, #0]
    8d4c:	06cb      	lsls	r3, r1, #27
    8d4e:	d504      	bpl.n	8d5a <_vfiprintf_r+0xae>
    8d50:	2353      	movs	r3, #83	; 0x53
    8d52:	aa02      	add	r2, sp, #8
    8d54:	3020      	adds	r0, #32
    8d56:	189b      	adds	r3, r3, r2
    8d58:	7018      	strb	r0, [r3, #0]
    8d5a:	070b      	lsls	r3, r1, #28
    8d5c:	d504      	bpl.n	8d68 <_vfiprintf_r+0xbc>
    8d5e:	2353      	movs	r3, #83	; 0x53
    8d60:	202b      	movs	r0, #43	; 0x2b
    8d62:	aa02      	add	r2, sp, #8
    8d64:	189b      	adds	r3, r3, r2
    8d66:	7018      	strb	r0, [r3, #0]
    8d68:	7823      	ldrb	r3, [r4, #0]
    8d6a:	2b2a      	cmp	r3, #42	; 0x2a
    8d6c:	d02c      	beq.n	8dc8 <_vfiprintf_r+0x11c>
    8d6e:	2000      	movs	r0, #0
    8d70:	210a      	movs	r1, #10
    8d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8d74:	7822      	ldrb	r2, [r4, #0]
    8d76:	3a30      	subs	r2, #48	; 0x30
    8d78:	2a09      	cmp	r2, #9
    8d7a:	d800      	bhi.n	8d7e <_vfiprintf_r+0xd2>
    8d7c:	e06b      	b.n	8e56 <_vfiprintf_r+0x1aa>
    8d7e:	2800      	cmp	r0, #0
    8d80:	d02a      	beq.n	8dd8 <_vfiprintf_r+0x12c>
    8d82:	9309      	str	r3, [sp, #36]	; 0x24
    8d84:	e028      	b.n	8dd8 <_vfiprintf_r+0x12c>
    8d86:	4b51      	ldr	r3, [pc, #324]	; (8ecc <_vfiprintf_r+0x220>)
    8d88:	429f      	cmp	r7, r3
    8d8a:	d101      	bne.n	8d90 <_vfiprintf_r+0xe4>
    8d8c:	68b7      	ldr	r7, [r6, #8]
    8d8e:	e79e      	b.n	8cce <_vfiprintf_r+0x22>
    8d90:	4b4f      	ldr	r3, [pc, #316]	; (8ed0 <_vfiprintf_r+0x224>)
    8d92:	429f      	cmp	r7, r3
    8d94:	d19b      	bne.n	8cce <_vfiprintf_r+0x22>
    8d96:	68f7      	ldr	r7, [r6, #12]
    8d98:	e799      	b.n	8cce <_vfiprintf_r+0x22>
    8d9a:	0039      	movs	r1, r7
    8d9c:	0030      	movs	r0, r6
    8d9e:	f7ff fb77 	bl	8490 <__swsetup_r>
    8da2:	2800      	cmp	r0, #0
    8da4:	d099      	beq.n	8cda <_vfiprintf_r+0x2e>
    8da6:	2001      	movs	r0, #1
    8da8:	4240      	negs	r0, r0
    8daa:	b01f      	add	sp, #124	; 0x7c
    8dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8dae:	2b25      	cmp	r3, #37	; 0x25
    8db0:	d09f      	beq.n	8cf2 <_vfiprintf_r+0x46>
    8db2:	3401      	adds	r4, #1
    8db4:	e79a      	b.n	8cec <_vfiprintf_r+0x40>
    8db6:	4b44      	ldr	r3, [pc, #272]	; (8ec8 <_vfiprintf_r+0x21c>)
    8db8:	6829      	ldr	r1, [r5, #0]
    8dba:	1ac0      	subs	r0, r0, r3
    8dbc:	2301      	movs	r3, #1
    8dbe:	4083      	lsls	r3, r0
    8dc0:	430b      	orrs	r3, r1
    8dc2:	602b      	str	r3, [r5, #0]
    8dc4:	4664      	mov	r4, ip
    8dc6:	e7b7      	b.n	8d38 <_vfiprintf_r+0x8c>
    8dc8:	9b05      	ldr	r3, [sp, #20]
    8dca:	1d18      	adds	r0, r3, #4
    8dcc:	681b      	ldr	r3, [r3, #0]
    8dce:	9005      	str	r0, [sp, #20]
    8dd0:	2b00      	cmp	r3, #0
    8dd2:	db3a      	blt.n	8e4a <_vfiprintf_r+0x19e>
    8dd4:	9309      	str	r3, [sp, #36]	; 0x24
    8dd6:	4664      	mov	r4, ip
    8dd8:	7823      	ldrb	r3, [r4, #0]
    8dda:	2b2e      	cmp	r3, #46	; 0x2e
    8ddc:	d10b      	bne.n	8df6 <_vfiprintf_r+0x14a>
    8dde:	7863      	ldrb	r3, [r4, #1]
    8de0:	1c62      	adds	r2, r4, #1
    8de2:	2b2a      	cmp	r3, #42	; 0x2a
    8de4:	d13f      	bne.n	8e66 <_vfiprintf_r+0x1ba>
    8de6:	9b05      	ldr	r3, [sp, #20]
    8de8:	3402      	adds	r4, #2
    8dea:	1d1a      	adds	r2, r3, #4
    8dec:	681b      	ldr	r3, [r3, #0]
    8dee:	9205      	str	r2, [sp, #20]
    8df0:	2b00      	cmp	r3, #0
    8df2:	db35      	blt.n	8e60 <_vfiprintf_r+0x1b4>
    8df4:	9307      	str	r3, [sp, #28]
    8df6:	7821      	ldrb	r1, [r4, #0]
    8df8:	2203      	movs	r2, #3
    8dfa:	4836      	ldr	r0, [pc, #216]	; (8ed4 <_vfiprintf_r+0x228>)
    8dfc:	f000 fae6 	bl	93cc <memchr>
    8e00:	2800      	cmp	r0, #0
    8e02:	d007      	beq.n	8e14 <_vfiprintf_r+0x168>
    8e04:	4b33      	ldr	r3, [pc, #204]	; (8ed4 <_vfiprintf_r+0x228>)
    8e06:	682a      	ldr	r2, [r5, #0]
    8e08:	1ac0      	subs	r0, r0, r3
    8e0a:	2340      	movs	r3, #64	; 0x40
    8e0c:	4083      	lsls	r3, r0
    8e0e:	4313      	orrs	r3, r2
    8e10:	602b      	str	r3, [r5, #0]
    8e12:	3401      	adds	r4, #1
    8e14:	7821      	ldrb	r1, [r4, #0]
    8e16:	1c63      	adds	r3, r4, #1
    8e18:	2206      	movs	r2, #6
    8e1a:	482f      	ldr	r0, [pc, #188]	; (8ed8 <_vfiprintf_r+0x22c>)
    8e1c:	9302      	str	r3, [sp, #8]
    8e1e:	7629      	strb	r1, [r5, #24]
    8e20:	f000 fad4 	bl	93cc <memchr>
    8e24:	2800      	cmp	r0, #0
    8e26:	d044      	beq.n	8eb2 <_vfiprintf_r+0x206>
    8e28:	4b2c      	ldr	r3, [pc, #176]	; (8edc <_vfiprintf_r+0x230>)
    8e2a:	2b00      	cmp	r3, #0
    8e2c:	d12f      	bne.n	8e8e <_vfiprintf_r+0x1e2>
    8e2e:	6829      	ldr	r1, [r5, #0]
    8e30:	9b05      	ldr	r3, [sp, #20]
    8e32:	2207      	movs	r2, #7
    8e34:	05c9      	lsls	r1, r1, #23
    8e36:	d528      	bpl.n	8e8a <_vfiprintf_r+0x1de>
    8e38:	189b      	adds	r3, r3, r2
    8e3a:	4393      	bics	r3, r2
    8e3c:	3308      	adds	r3, #8
    8e3e:	9305      	str	r3, [sp, #20]
    8e40:	696b      	ldr	r3, [r5, #20]
    8e42:	9a03      	ldr	r2, [sp, #12]
    8e44:	189b      	adds	r3, r3, r2
    8e46:	616b      	str	r3, [r5, #20]
    8e48:	e74f      	b.n	8cea <_vfiprintf_r+0x3e>
    8e4a:	425b      	negs	r3, r3
    8e4c:	60eb      	str	r3, [r5, #12]
    8e4e:	2302      	movs	r3, #2
    8e50:	430b      	orrs	r3, r1
    8e52:	602b      	str	r3, [r5, #0]
    8e54:	e7bf      	b.n	8dd6 <_vfiprintf_r+0x12a>
    8e56:	434b      	muls	r3, r1
    8e58:	3401      	adds	r4, #1
    8e5a:	189b      	adds	r3, r3, r2
    8e5c:	2001      	movs	r0, #1
    8e5e:	e789      	b.n	8d74 <_vfiprintf_r+0xc8>
    8e60:	2301      	movs	r3, #1
    8e62:	425b      	negs	r3, r3
    8e64:	e7c6      	b.n	8df4 <_vfiprintf_r+0x148>
    8e66:	2300      	movs	r3, #0
    8e68:	0014      	movs	r4, r2
    8e6a:	200a      	movs	r0, #10
    8e6c:	001a      	movs	r2, r3
    8e6e:	606b      	str	r3, [r5, #4]
    8e70:	7821      	ldrb	r1, [r4, #0]
    8e72:	3930      	subs	r1, #48	; 0x30
    8e74:	2909      	cmp	r1, #9
    8e76:	d903      	bls.n	8e80 <_vfiprintf_r+0x1d4>
    8e78:	2b00      	cmp	r3, #0
    8e7a:	d0bc      	beq.n	8df6 <_vfiprintf_r+0x14a>
    8e7c:	9207      	str	r2, [sp, #28]
    8e7e:	e7ba      	b.n	8df6 <_vfiprintf_r+0x14a>
    8e80:	4342      	muls	r2, r0
    8e82:	3401      	adds	r4, #1
    8e84:	1852      	adds	r2, r2, r1
    8e86:	2301      	movs	r3, #1
    8e88:	e7f2      	b.n	8e70 <_vfiprintf_r+0x1c4>
    8e8a:	3307      	adds	r3, #7
    8e8c:	e7d5      	b.n	8e3a <_vfiprintf_r+0x18e>
    8e8e:	ab05      	add	r3, sp, #20
    8e90:	9300      	str	r3, [sp, #0]
    8e92:	003a      	movs	r2, r7
    8e94:	4b12      	ldr	r3, [pc, #72]	; (8ee0 <_vfiprintf_r+0x234>)
    8e96:	0029      	movs	r1, r5
    8e98:	0030      	movs	r0, r6
    8e9a:	e000      	b.n	8e9e <_vfiprintf_r+0x1f2>
    8e9c:	bf00      	nop
    8e9e:	9003      	str	r0, [sp, #12]
    8ea0:	9b03      	ldr	r3, [sp, #12]
    8ea2:	3301      	adds	r3, #1
    8ea4:	d1cc      	bne.n	8e40 <_vfiprintf_r+0x194>
    8ea6:	89bb      	ldrh	r3, [r7, #12]
    8ea8:	065b      	lsls	r3, r3, #25
    8eaa:	d500      	bpl.n	8eae <_vfiprintf_r+0x202>
    8eac:	e77b      	b.n	8da6 <_vfiprintf_r+0xfa>
    8eae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8eb0:	e77b      	b.n	8daa <_vfiprintf_r+0xfe>
    8eb2:	ab05      	add	r3, sp, #20
    8eb4:	9300      	str	r3, [sp, #0]
    8eb6:	003a      	movs	r2, r7
    8eb8:	4b09      	ldr	r3, [pc, #36]	; (8ee0 <_vfiprintf_r+0x234>)
    8eba:	0029      	movs	r1, r5
    8ebc:	0030      	movs	r0, r6
    8ebe:	f000 f87f 	bl	8fc0 <_printf_i>
    8ec2:	e7ec      	b.n	8e9e <_vfiprintf_r+0x1f2>
    8ec4:	0000aa00 	.word	0x0000aa00
    8ec8:	0000aa4a 	.word	0x0000aa4a
    8ecc:	0000aa20 	.word	0x0000aa20
    8ed0:	0000a9e0 	.word	0x0000a9e0
    8ed4:	0000aa50 	.word	0x0000aa50
    8ed8:	0000aa54 	.word	0x0000aa54
    8edc:	00000000 	.word	0x00000000
    8ee0:	00008c87 	.word	0x00008c87

00008ee4 <_printf_common>:
    8ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8ee6:	0015      	movs	r5, r2
    8ee8:	9301      	str	r3, [sp, #4]
    8eea:	688a      	ldr	r2, [r1, #8]
    8eec:	690b      	ldr	r3, [r1, #16]
    8eee:	9000      	str	r0, [sp, #0]
    8ef0:	000c      	movs	r4, r1
    8ef2:	4293      	cmp	r3, r2
    8ef4:	da00      	bge.n	8ef8 <_printf_common+0x14>
    8ef6:	0013      	movs	r3, r2
    8ef8:	0022      	movs	r2, r4
    8efa:	602b      	str	r3, [r5, #0]
    8efc:	3243      	adds	r2, #67	; 0x43
    8efe:	7812      	ldrb	r2, [r2, #0]
    8f00:	2a00      	cmp	r2, #0
    8f02:	d001      	beq.n	8f08 <_printf_common+0x24>
    8f04:	3301      	adds	r3, #1
    8f06:	602b      	str	r3, [r5, #0]
    8f08:	6823      	ldr	r3, [r4, #0]
    8f0a:	069b      	lsls	r3, r3, #26
    8f0c:	d502      	bpl.n	8f14 <_printf_common+0x30>
    8f0e:	682b      	ldr	r3, [r5, #0]
    8f10:	3302      	adds	r3, #2
    8f12:	602b      	str	r3, [r5, #0]
    8f14:	2706      	movs	r7, #6
    8f16:	6823      	ldr	r3, [r4, #0]
    8f18:	401f      	ands	r7, r3
    8f1a:	d027      	beq.n	8f6c <_printf_common+0x88>
    8f1c:	0023      	movs	r3, r4
    8f1e:	3343      	adds	r3, #67	; 0x43
    8f20:	781b      	ldrb	r3, [r3, #0]
    8f22:	1e5a      	subs	r2, r3, #1
    8f24:	4193      	sbcs	r3, r2
    8f26:	6822      	ldr	r2, [r4, #0]
    8f28:	0692      	lsls	r2, r2, #26
    8f2a:	d430      	bmi.n	8f8e <_printf_common+0xaa>
    8f2c:	0022      	movs	r2, r4
    8f2e:	9901      	ldr	r1, [sp, #4]
    8f30:	3243      	adds	r2, #67	; 0x43
    8f32:	9800      	ldr	r0, [sp, #0]
    8f34:	9e08      	ldr	r6, [sp, #32]
    8f36:	47b0      	blx	r6
    8f38:	1c43      	adds	r3, r0, #1
    8f3a:	d025      	beq.n	8f88 <_printf_common+0xa4>
    8f3c:	2306      	movs	r3, #6
    8f3e:	6820      	ldr	r0, [r4, #0]
    8f40:	682a      	ldr	r2, [r5, #0]
    8f42:	68e1      	ldr	r1, [r4, #12]
    8f44:	4003      	ands	r3, r0
    8f46:	2500      	movs	r5, #0
    8f48:	2b04      	cmp	r3, #4
    8f4a:	d103      	bne.n	8f54 <_printf_common+0x70>
    8f4c:	1a8d      	subs	r5, r1, r2
    8f4e:	43eb      	mvns	r3, r5
    8f50:	17db      	asrs	r3, r3, #31
    8f52:	401d      	ands	r5, r3
    8f54:	68a3      	ldr	r3, [r4, #8]
    8f56:	6922      	ldr	r2, [r4, #16]
    8f58:	4293      	cmp	r3, r2
    8f5a:	dd01      	ble.n	8f60 <_printf_common+0x7c>
    8f5c:	1a9b      	subs	r3, r3, r2
    8f5e:	18ed      	adds	r5, r5, r3
    8f60:	2700      	movs	r7, #0
    8f62:	42bd      	cmp	r5, r7
    8f64:	d120      	bne.n	8fa8 <_printf_common+0xc4>
    8f66:	2000      	movs	r0, #0
    8f68:	e010      	b.n	8f8c <_printf_common+0xa8>
    8f6a:	3701      	adds	r7, #1
    8f6c:	68e3      	ldr	r3, [r4, #12]
    8f6e:	682a      	ldr	r2, [r5, #0]
    8f70:	1a9b      	subs	r3, r3, r2
    8f72:	429f      	cmp	r7, r3
    8f74:	dad2      	bge.n	8f1c <_printf_common+0x38>
    8f76:	0022      	movs	r2, r4
    8f78:	2301      	movs	r3, #1
    8f7a:	3219      	adds	r2, #25
    8f7c:	9901      	ldr	r1, [sp, #4]
    8f7e:	9800      	ldr	r0, [sp, #0]
    8f80:	9e08      	ldr	r6, [sp, #32]
    8f82:	47b0      	blx	r6
    8f84:	1c43      	adds	r3, r0, #1
    8f86:	d1f0      	bne.n	8f6a <_printf_common+0x86>
    8f88:	2001      	movs	r0, #1
    8f8a:	4240      	negs	r0, r0
    8f8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8f8e:	2030      	movs	r0, #48	; 0x30
    8f90:	18e1      	adds	r1, r4, r3
    8f92:	3143      	adds	r1, #67	; 0x43
    8f94:	7008      	strb	r0, [r1, #0]
    8f96:	0021      	movs	r1, r4
    8f98:	1c5a      	adds	r2, r3, #1
    8f9a:	3145      	adds	r1, #69	; 0x45
    8f9c:	7809      	ldrb	r1, [r1, #0]
    8f9e:	18a2      	adds	r2, r4, r2
    8fa0:	3243      	adds	r2, #67	; 0x43
    8fa2:	3302      	adds	r3, #2
    8fa4:	7011      	strb	r1, [r2, #0]
    8fa6:	e7c1      	b.n	8f2c <_printf_common+0x48>
    8fa8:	0022      	movs	r2, r4
    8faa:	2301      	movs	r3, #1
    8fac:	321a      	adds	r2, #26
    8fae:	9901      	ldr	r1, [sp, #4]
    8fb0:	9800      	ldr	r0, [sp, #0]
    8fb2:	9e08      	ldr	r6, [sp, #32]
    8fb4:	47b0      	blx	r6
    8fb6:	1c43      	adds	r3, r0, #1
    8fb8:	d0e6      	beq.n	8f88 <_printf_common+0xa4>
    8fba:	3701      	adds	r7, #1
    8fbc:	e7d1      	b.n	8f62 <_printf_common+0x7e>
	...

00008fc0 <_printf_i>:
    8fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fc2:	b08b      	sub	sp, #44	; 0x2c
    8fc4:	9206      	str	r2, [sp, #24]
    8fc6:	000a      	movs	r2, r1
    8fc8:	3243      	adds	r2, #67	; 0x43
    8fca:	9307      	str	r3, [sp, #28]
    8fcc:	9005      	str	r0, [sp, #20]
    8fce:	9204      	str	r2, [sp, #16]
    8fd0:	7e0a      	ldrb	r2, [r1, #24]
    8fd2:	000c      	movs	r4, r1
    8fd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8fd6:	2a6e      	cmp	r2, #110	; 0x6e
    8fd8:	d100      	bne.n	8fdc <_printf_i+0x1c>
    8fda:	e08f      	b.n	90fc <_printf_i+0x13c>
    8fdc:	d817      	bhi.n	900e <_printf_i+0x4e>
    8fde:	2a63      	cmp	r2, #99	; 0x63
    8fe0:	d02c      	beq.n	903c <_printf_i+0x7c>
    8fe2:	d808      	bhi.n	8ff6 <_printf_i+0x36>
    8fe4:	2a00      	cmp	r2, #0
    8fe6:	d100      	bne.n	8fea <_printf_i+0x2a>
    8fe8:	e099      	b.n	911e <_printf_i+0x15e>
    8fea:	2a58      	cmp	r2, #88	; 0x58
    8fec:	d054      	beq.n	9098 <_printf_i+0xd8>
    8fee:	0026      	movs	r6, r4
    8ff0:	3642      	adds	r6, #66	; 0x42
    8ff2:	7032      	strb	r2, [r6, #0]
    8ff4:	e029      	b.n	904a <_printf_i+0x8a>
    8ff6:	2a64      	cmp	r2, #100	; 0x64
    8ff8:	d001      	beq.n	8ffe <_printf_i+0x3e>
    8ffa:	2a69      	cmp	r2, #105	; 0x69
    8ffc:	d1f7      	bne.n	8fee <_printf_i+0x2e>
    8ffe:	6821      	ldr	r1, [r4, #0]
    9000:	681a      	ldr	r2, [r3, #0]
    9002:	0608      	lsls	r0, r1, #24
    9004:	d523      	bpl.n	904e <_printf_i+0x8e>
    9006:	1d11      	adds	r1, r2, #4
    9008:	6019      	str	r1, [r3, #0]
    900a:	6815      	ldr	r5, [r2, #0]
    900c:	e025      	b.n	905a <_printf_i+0x9a>
    900e:	2a73      	cmp	r2, #115	; 0x73
    9010:	d100      	bne.n	9014 <_printf_i+0x54>
    9012:	e088      	b.n	9126 <_printf_i+0x166>
    9014:	d808      	bhi.n	9028 <_printf_i+0x68>
    9016:	2a6f      	cmp	r2, #111	; 0x6f
    9018:	d029      	beq.n	906e <_printf_i+0xae>
    901a:	2a70      	cmp	r2, #112	; 0x70
    901c:	d1e7      	bne.n	8fee <_printf_i+0x2e>
    901e:	2220      	movs	r2, #32
    9020:	6809      	ldr	r1, [r1, #0]
    9022:	430a      	orrs	r2, r1
    9024:	6022      	str	r2, [r4, #0]
    9026:	e003      	b.n	9030 <_printf_i+0x70>
    9028:	2a75      	cmp	r2, #117	; 0x75
    902a:	d020      	beq.n	906e <_printf_i+0xae>
    902c:	2a78      	cmp	r2, #120	; 0x78
    902e:	d1de      	bne.n	8fee <_printf_i+0x2e>
    9030:	0022      	movs	r2, r4
    9032:	2178      	movs	r1, #120	; 0x78
    9034:	3245      	adds	r2, #69	; 0x45
    9036:	7011      	strb	r1, [r2, #0]
    9038:	4a6c      	ldr	r2, [pc, #432]	; (91ec <_printf_i+0x22c>)
    903a:	e030      	b.n	909e <_printf_i+0xde>
    903c:	000e      	movs	r6, r1
    903e:	681a      	ldr	r2, [r3, #0]
    9040:	3642      	adds	r6, #66	; 0x42
    9042:	1d11      	adds	r1, r2, #4
    9044:	6019      	str	r1, [r3, #0]
    9046:	6813      	ldr	r3, [r2, #0]
    9048:	7033      	strb	r3, [r6, #0]
    904a:	2301      	movs	r3, #1
    904c:	e079      	b.n	9142 <_printf_i+0x182>
    904e:	0649      	lsls	r1, r1, #25
    9050:	d5d9      	bpl.n	9006 <_printf_i+0x46>
    9052:	1d11      	adds	r1, r2, #4
    9054:	6019      	str	r1, [r3, #0]
    9056:	2300      	movs	r3, #0
    9058:	5ed5      	ldrsh	r5, [r2, r3]
    905a:	2d00      	cmp	r5, #0
    905c:	da03      	bge.n	9066 <_printf_i+0xa6>
    905e:	232d      	movs	r3, #45	; 0x2d
    9060:	9a04      	ldr	r2, [sp, #16]
    9062:	426d      	negs	r5, r5
    9064:	7013      	strb	r3, [r2, #0]
    9066:	4b62      	ldr	r3, [pc, #392]	; (91f0 <_printf_i+0x230>)
    9068:	270a      	movs	r7, #10
    906a:	9303      	str	r3, [sp, #12]
    906c:	e02f      	b.n	90ce <_printf_i+0x10e>
    906e:	6820      	ldr	r0, [r4, #0]
    9070:	6819      	ldr	r1, [r3, #0]
    9072:	0605      	lsls	r5, r0, #24
    9074:	d503      	bpl.n	907e <_printf_i+0xbe>
    9076:	1d08      	adds	r0, r1, #4
    9078:	6018      	str	r0, [r3, #0]
    907a:	680d      	ldr	r5, [r1, #0]
    907c:	e005      	b.n	908a <_printf_i+0xca>
    907e:	0640      	lsls	r0, r0, #25
    9080:	d5f9      	bpl.n	9076 <_printf_i+0xb6>
    9082:	680d      	ldr	r5, [r1, #0]
    9084:	1d08      	adds	r0, r1, #4
    9086:	6018      	str	r0, [r3, #0]
    9088:	b2ad      	uxth	r5, r5
    908a:	4b59      	ldr	r3, [pc, #356]	; (91f0 <_printf_i+0x230>)
    908c:	2708      	movs	r7, #8
    908e:	9303      	str	r3, [sp, #12]
    9090:	2a6f      	cmp	r2, #111	; 0x6f
    9092:	d018      	beq.n	90c6 <_printf_i+0x106>
    9094:	270a      	movs	r7, #10
    9096:	e016      	b.n	90c6 <_printf_i+0x106>
    9098:	3145      	adds	r1, #69	; 0x45
    909a:	700a      	strb	r2, [r1, #0]
    909c:	4a54      	ldr	r2, [pc, #336]	; (91f0 <_printf_i+0x230>)
    909e:	9203      	str	r2, [sp, #12]
    90a0:	681a      	ldr	r2, [r3, #0]
    90a2:	6821      	ldr	r1, [r4, #0]
    90a4:	1d10      	adds	r0, r2, #4
    90a6:	6018      	str	r0, [r3, #0]
    90a8:	6815      	ldr	r5, [r2, #0]
    90aa:	0608      	lsls	r0, r1, #24
    90ac:	d522      	bpl.n	90f4 <_printf_i+0x134>
    90ae:	07cb      	lsls	r3, r1, #31
    90b0:	d502      	bpl.n	90b8 <_printf_i+0xf8>
    90b2:	2320      	movs	r3, #32
    90b4:	4319      	orrs	r1, r3
    90b6:	6021      	str	r1, [r4, #0]
    90b8:	2710      	movs	r7, #16
    90ba:	2d00      	cmp	r5, #0
    90bc:	d103      	bne.n	90c6 <_printf_i+0x106>
    90be:	2320      	movs	r3, #32
    90c0:	6822      	ldr	r2, [r4, #0]
    90c2:	439a      	bics	r2, r3
    90c4:	6022      	str	r2, [r4, #0]
    90c6:	0023      	movs	r3, r4
    90c8:	2200      	movs	r2, #0
    90ca:	3343      	adds	r3, #67	; 0x43
    90cc:	701a      	strb	r2, [r3, #0]
    90ce:	6863      	ldr	r3, [r4, #4]
    90d0:	60a3      	str	r3, [r4, #8]
    90d2:	2b00      	cmp	r3, #0
    90d4:	db5c      	blt.n	9190 <_printf_i+0x1d0>
    90d6:	2204      	movs	r2, #4
    90d8:	6821      	ldr	r1, [r4, #0]
    90da:	4391      	bics	r1, r2
    90dc:	6021      	str	r1, [r4, #0]
    90de:	2d00      	cmp	r5, #0
    90e0:	d158      	bne.n	9194 <_printf_i+0x1d4>
    90e2:	9e04      	ldr	r6, [sp, #16]
    90e4:	2b00      	cmp	r3, #0
    90e6:	d064      	beq.n	91b2 <_printf_i+0x1f2>
    90e8:	0026      	movs	r6, r4
    90ea:	9b03      	ldr	r3, [sp, #12]
    90ec:	3642      	adds	r6, #66	; 0x42
    90ee:	781b      	ldrb	r3, [r3, #0]
    90f0:	7033      	strb	r3, [r6, #0]
    90f2:	e05e      	b.n	91b2 <_printf_i+0x1f2>
    90f4:	0648      	lsls	r0, r1, #25
    90f6:	d5da      	bpl.n	90ae <_printf_i+0xee>
    90f8:	b2ad      	uxth	r5, r5
    90fa:	e7d8      	b.n	90ae <_printf_i+0xee>
    90fc:	6809      	ldr	r1, [r1, #0]
    90fe:	681a      	ldr	r2, [r3, #0]
    9100:	0608      	lsls	r0, r1, #24
    9102:	d505      	bpl.n	9110 <_printf_i+0x150>
    9104:	1d11      	adds	r1, r2, #4
    9106:	6019      	str	r1, [r3, #0]
    9108:	6813      	ldr	r3, [r2, #0]
    910a:	6962      	ldr	r2, [r4, #20]
    910c:	601a      	str	r2, [r3, #0]
    910e:	e006      	b.n	911e <_printf_i+0x15e>
    9110:	0649      	lsls	r1, r1, #25
    9112:	d5f7      	bpl.n	9104 <_printf_i+0x144>
    9114:	1d11      	adds	r1, r2, #4
    9116:	6019      	str	r1, [r3, #0]
    9118:	6813      	ldr	r3, [r2, #0]
    911a:	8aa2      	ldrh	r2, [r4, #20]
    911c:	801a      	strh	r2, [r3, #0]
    911e:	2300      	movs	r3, #0
    9120:	9e04      	ldr	r6, [sp, #16]
    9122:	6123      	str	r3, [r4, #16]
    9124:	e054      	b.n	91d0 <_printf_i+0x210>
    9126:	681a      	ldr	r2, [r3, #0]
    9128:	1d11      	adds	r1, r2, #4
    912a:	6019      	str	r1, [r3, #0]
    912c:	6816      	ldr	r6, [r2, #0]
    912e:	2100      	movs	r1, #0
    9130:	6862      	ldr	r2, [r4, #4]
    9132:	0030      	movs	r0, r6
    9134:	f000 f94a 	bl	93cc <memchr>
    9138:	2800      	cmp	r0, #0
    913a:	d001      	beq.n	9140 <_printf_i+0x180>
    913c:	1b80      	subs	r0, r0, r6
    913e:	6060      	str	r0, [r4, #4]
    9140:	6863      	ldr	r3, [r4, #4]
    9142:	6123      	str	r3, [r4, #16]
    9144:	2300      	movs	r3, #0
    9146:	9a04      	ldr	r2, [sp, #16]
    9148:	7013      	strb	r3, [r2, #0]
    914a:	e041      	b.n	91d0 <_printf_i+0x210>
    914c:	6923      	ldr	r3, [r4, #16]
    914e:	0032      	movs	r2, r6
    9150:	9906      	ldr	r1, [sp, #24]
    9152:	9805      	ldr	r0, [sp, #20]
    9154:	9d07      	ldr	r5, [sp, #28]
    9156:	47a8      	blx	r5
    9158:	1c43      	adds	r3, r0, #1
    915a:	d043      	beq.n	91e4 <_printf_i+0x224>
    915c:	6823      	ldr	r3, [r4, #0]
    915e:	2500      	movs	r5, #0
    9160:	079b      	lsls	r3, r3, #30
    9162:	d40f      	bmi.n	9184 <_printf_i+0x1c4>
    9164:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9166:	68e0      	ldr	r0, [r4, #12]
    9168:	4298      	cmp	r0, r3
    916a:	da3d      	bge.n	91e8 <_printf_i+0x228>
    916c:	0018      	movs	r0, r3
    916e:	e03b      	b.n	91e8 <_printf_i+0x228>
    9170:	0022      	movs	r2, r4
    9172:	2301      	movs	r3, #1
    9174:	3219      	adds	r2, #25
    9176:	9906      	ldr	r1, [sp, #24]
    9178:	9805      	ldr	r0, [sp, #20]
    917a:	9e07      	ldr	r6, [sp, #28]
    917c:	47b0      	blx	r6
    917e:	1c43      	adds	r3, r0, #1
    9180:	d030      	beq.n	91e4 <_printf_i+0x224>
    9182:	3501      	adds	r5, #1
    9184:	68e3      	ldr	r3, [r4, #12]
    9186:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9188:	1a9b      	subs	r3, r3, r2
    918a:	429d      	cmp	r5, r3
    918c:	dbf0      	blt.n	9170 <_printf_i+0x1b0>
    918e:	e7e9      	b.n	9164 <_printf_i+0x1a4>
    9190:	2d00      	cmp	r5, #0
    9192:	d0a9      	beq.n	90e8 <_printf_i+0x128>
    9194:	9e04      	ldr	r6, [sp, #16]
    9196:	0028      	movs	r0, r5
    9198:	0039      	movs	r1, r7
    919a:	f7fe fc83 	bl	7aa4 <__aeabi_uidivmod>
    919e:	9b03      	ldr	r3, [sp, #12]
    91a0:	3e01      	subs	r6, #1
    91a2:	5c5b      	ldrb	r3, [r3, r1]
    91a4:	0028      	movs	r0, r5
    91a6:	7033      	strb	r3, [r6, #0]
    91a8:	0039      	movs	r1, r7
    91aa:	f7fe fbf5 	bl	7998 <__udivsi3>
    91ae:	1e05      	subs	r5, r0, #0
    91b0:	d1f1      	bne.n	9196 <_printf_i+0x1d6>
    91b2:	2f08      	cmp	r7, #8
    91b4:	d109      	bne.n	91ca <_printf_i+0x20a>
    91b6:	6823      	ldr	r3, [r4, #0]
    91b8:	07db      	lsls	r3, r3, #31
    91ba:	d506      	bpl.n	91ca <_printf_i+0x20a>
    91bc:	6863      	ldr	r3, [r4, #4]
    91be:	6922      	ldr	r2, [r4, #16]
    91c0:	4293      	cmp	r3, r2
    91c2:	dc02      	bgt.n	91ca <_printf_i+0x20a>
    91c4:	2330      	movs	r3, #48	; 0x30
    91c6:	3e01      	subs	r6, #1
    91c8:	7033      	strb	r3, [r6, #0]
    91ca:	9b04      	ldr	r3, [sp, #16]
    91cc:	1b9b      	subs	r3, r3, r6
    91ce:	6123      	str	r3, [r4, #16]
    91d0:	9b07      	ldr	r3, [sp, #28]
    91d2:	aa09      	add	r2, sp, #36	; 0x24
    91d4:	9300      	str	r3, [sp, #0]
    91d6:	0021      	movs	r1, r4
    91d8:	9b06      	ldr	r3, [sp, #24]
    91da:	9805      	ldr	r0, [sp, #20]
    91dc:	f7ff fe82 	bl	8ee4 <_printf_common>
    91e0:	1c43      	adds	r3, r0, #1
    91e2:	d1b3      	bne.n	914c <_printf_i+0x18c>
    91e4:	2001      	movs	r0, #1
    91e6:	4240      	negs	r0, r0
    91e8:	b00b      	add	sp, #44	; 0x2c
    91ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91ec:	0000aa6c 	.word	0x0000aa6c
    91f0:	0000aa5b 	.word	0x0000aa5b

000091f4 <_putc_r>:
    91f4:	b570      	push	{r4, r5, r6, lr}
    91f6:	0006      	movs	r6, r0
    91f8:	000d      	movs	r5, r1
    91fa:	0014      	movs	r4, r2
    91fc:	2800      	cmp	r0, #0
    91fe:	d004      	beq.n	920a <_putc_r+0x16>
    9200:	6983      	ldr	r3, [r0, #24]
    9202:	2b00      	cmp	r3, #0
    9204:	d101      	bne.n	920a <_putc_r+0x16>
    9206:	f7ff fab1 	bl	876c <__sinit>
    920a:	4b12      	ldr	r3, [pc, #72]	; (9254 <_putc_r+0x60>)
    920c:	429c      	cmp	r4, r3
    920e:	d111      	bne.n	9234 <_putc_r+0x40>
    9210:	6874      	ldr	r4, [r6, #4]
    9212:	68a3      	ldr	r3, [r4, #8]
    9214:	3b01      	subs	r3, #1
    9216:	60a3      	str	r3, [r4, #8]
    9218:	2b00      	cmp	r3, #0
    921a:	da05      	bge.n	9228 <_putc_r+0x34>
    921c:	69a2      	ldr	r2, [r4, #24]
    921e:	4293      	cmp	r3, r2
    9220:	db12      	blt.n	9248 <_putc_r+0x54>
    9222:	b2eb      	uxtb	r3, r5
    9224:	2b0a      	cmp	r3, #10
    9226:	d00f      	beq.n	9248 <_putc_r+0x54>
    9228:	6823      	ldr	r3, [r4, #0]
    922a:	b2e8      	uxtb	r0, r5
    922c:	1c5a      	adds	r2, r3, #1
    922e:	6022      	str	r2, [r4, #0]
    9230:	701d      	strb	r5, [r3, #0]
    9232:	bd70      	pop	{r4, r5, r6, pc}
    9234:	4b08      	ldr	r3, [pc, #32]	; (9258 <_putc_r+0x64>)
    9236:	429c      	cmp	r4, r3
    9238:	d101      	bne.n	923e <_putc_r+0x4a>
    923a:	68b4      	ldr	r4, [r6, #8]
    923c:	e7e9      	b.n	9212 <_putc_r+0x1e>
    923e:	4b07      	ldr	r3, [pc, #28]	; (925c <_putc_r+0x68>)
    9240:	429c      	cmp	r4, r3
    9242:	d1e6      	bne.n	9212 <_putc_r+0x1e>
    9244:	68f4      	ldr	r4, [r6, #12]
    9246:	e7e4      	b.n	9212 <_putc_r+0x1e>
    9248:	0022      	movs	r2, r4
    924a:	0029      	movs	r1, r5
    924c:	0030      	movs	r0, r6
    924e:	f7ff f8c9 	bl	83e4 <__swbuf_r>
    9252:	e7ee      	b.n	9232 <_putc_r+0x3e>
    9254:	0000aa00 	.word	0x0000aa00
    9258:	0000aa20 	.word	0x0000aa20
    925c:	0000a9e0 	.word	0x0000a9e0

00009260 <__sread>:
    9260:	b570      	push	{r4, r5, r6, lr}
    9262:	000c      	movs	r4, r1
    9264:	250e      	movs	r5, #14
    9266:	5f49      	ldrsh	r1, [r1, r5]
    9268:	f000 f8e2 	bl	9430 <_read_r>
    926c:	2800      	cmp	r0, #0
    926e:	db03      	blt.n	9278 <__sread+0x18>
    9270:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9272:	181b      	adds	r3, r3, r0
    9274:	6563      	str	r3, [r4, #84]	; 0x54
    9276:	bd70      	pop	{r4, r5, r6, pc}
    9278:	89a3      	ldrh	r3, [r4, #12]
    927a:	4a02      	ldr	r2, [pc, #8]	; (9284 <__sread+0x24>)
    927c:	4013      	ands	r3, r2
    927e:	81a3      	strh	r3, [r4, #12]
    9280:	e7f9      	b.n	9276 <__sread+0x16>
    9282:	46c0      	nop			; (mov r8, r8)
    9284:	ffffefff 	.word	0xffffefff

00009288 <__swrite>:
    9288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    928a:	001f      	movs	r7, r3
    928c:	898b      	ldrh	r3, [r1, #12]
    928e:	0005      	movs	r5, r0
    9290:	000c      	movs	r4, r1
    9292:	0016      	movs	r6, r2
    9294:	05db      	lsls	r3, r3, #23
    9296:	d505      	bpl.n	92a4 <__swrite+0x1c>
    9298:	230e      	movs	r3, #14
    929a:	5ec9      	ldrsh	r1, [r1, r3]
    929c:	2200      	movs	r2, #0
    929e:	2302      	movs	r3, #2
    92a0:	f000 f880 	bl	93a4 <_lseek_r>
    92a4:	89a3      	ldrh	r3, [r4, #12]
    92a6:	4a05      	ldr	r2, [pc, #20]	; (92bc <__swrite+0x34>)
    92a8:	0028      	movs	r0, r5
    92aa:	4013      	ands	r3, r2
    92ac:	81a3      	strh	r3, [r4, #12]
    92ae:	0032      	movs	r2, r6
    92b0:	230e      	movs	r3, #14
    92b2:	5ee1      	ldrsh	r1, [r4, r3]
    92b4:	003b      	movs	r3, r7
    92b6:	f000 f82b 	bl	9310 <_write_r>
    92ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    92bc:	ffffefff 	.word	0xffffefff

000092c0 <__sseek>:
    92c0:	b570      	push	{r4, r5, r6, lr}
    92c2:	000c      	movs	r4, r1
    92c4:	250e      	movs	r5, #14
    92c6:	5f49      	ldrsh	r1, [r1, r5]
    92c8:	f000 f86c 	bl	93a4 <_lseek_r>
    92cc:	89a3      	ldrh	r3, [r4, #12]
    92ce:	1c42      	adds	r2, r0, #1
    92d0:	d103      	bne.n	92da <__sseek+0x1a>
    92d2:	4a05      	ldr	r2, [pc, #20]	; (92e8 <__sseek+0x28>)
    92d4:	4013      	ands	r3, r2
    92d6:	81a3      	strh	r3, [r4, #12]
    92d8:	bd70      	pop	{r4, r5, r6, pc}
    92da:	2280      	movs	r2, #128	; 0x80
    92dc:	0152      	lsls	r2, r2, #5
    92de:	4313      	orrs	r3, r2
    92e0:	81a3      	strh	r3, [r4, #12]
    92e2:	6560      	str	r0, [r4, #84]	; 0x54
    92e4:	e7f8      	b.n	92d8 <__sseek+0x18>
    92e6:	46c0      	nop			; (mov r8, r8)
    92e8:	ffffefff 	.word	0xffffefff

000092ec <__sclose>:
    92ec:	b510      	push	{r4, lr}
    92ee:	230e      	movs	r3, #14
    92f0:	5ec9      	ldrsh	r1, [r1, r3]
    92f2:	f000 f821 	bl	9338 <_close_r>
    92f6:	bd10      	pop	{r4, pc}

000092f8 <__ascii_wctomb>:
    92f8:	1e0b      	subs	r3, r1, #0
    92fa:	d004      	beq.n	9306 <__ascii_wctomb+0xe>
    92fc:	2aff      	cmp	r2, #255	; 0xff
    92fe:	d904      	bls.n	930a <__ascii_wctomb+0x12>
    9300:	238a      	movs	r3, #138	; 0x8a
    9302:	6003      	str	r3, [r0, #0]
    9304:	3b8b      	subs	r3, #139	; 0x8b
    9306:	0018      	movs	r0, r3
    9308:	4770      	bx	lr
    930a:	700a      	strb	r2, [r1, #0]
    930c:	2301      	movs	r3, #1
    930e:	e7fa      	b.n	9306 <__ascii_wctomb+0xe>

00009310 <_write_r>:
    9310:	b570      	push	{r4, r5, r6, lr}
    9312:	0005      	movs	r5, r0
    9314:	0008      	movs	r0, r1
    9316:	0011      	movs	r1, r2
    9318:	2200      	movs	r2, #0
    931a:	4c06      	ldr	r4, [pc, #24]	; (9334 <_write_r+0x24>)
    931c:	6022      	str	r2, [r4, #0]
    931e:	001a      	movs	r2, r3
    9320:	f7fc feb8 	bl	6094 <_write>
    9324:	1c43      	adds	r3, r0, #1
    9326:	d103      	bne.n	9330 <_write_r+0x20>
    9328:	6823      	ldr	r3, [r4, #0]
    932a:	2b00      	cmp	r3, #0
    932c:	d000      	beq.n	9330 <_write_r+0x20>
    932e:	602b      	str	r3, [r5, #0]
    9330:	bd70      	pop	{r4, r5, r6, pc}
    9332:	46c0      	nop			; (mov r8, r8)
    9334:	200005e8 	.word	0x200005e8

00009338 <_close_r>:
    9338:	2300      	movs	r3, #0
    933a:	b570      	push	{r4, r5, r6, lr}
    933c:	4c06      	ldr	r4, [pc, #24]	; (9358 <_close_r+0x20>)
    933e:	0005      	movs	r5, r0
    9340:	0008      	movs	r0, r1
    9342:	6023      	str	r3, [r4, #0]
    9344:	f7fc fee0 	bl	6108 <_close>
    9348:	1c43      	adds	r3, r0, #1
    934a:	d103      	bne.n	9354 <_close_r+0x1c>
    934c:	6823      	ldr	r3, [r4, #0]
    934e:	2b00      	cmp	r3, #0
    9350:	d000      	beq.n	9354 <_close_r+0x1c>
    9352:	602b      	str	r3, [r5, #0]
    9354:	bd70      	pop	{r4, r5, r6, pc}
    9356:	46c0      	nop			; (mov r8, r8)
    9358:	200005e8 	.word	0x200005e8

0000935c <_fstat_r>:
    935c:	2300      	movs	r3, #0
    935e:	b570      	push	{r4, r5, r6, lr}
    9360:	4c06      	ldr	r4, [pc, #24]	; (937c <_fstat_r+0x20>)
    9362:	0005      	movs	r5, r0
    9364:	0008      	movs	r0, r1
    9366:	0011      	movs	r1, r2
    9368:	6023      	str	r3, [r4, #0]
    936a:	f7fc fed0 	bl	610e <_fstat>
    936e:	1c43      	adds	r3, r0, #1
    9370:	d103      	bne.n	937a <_fstat_r+0x1e>
    9372:	6823      	ldr	r3, [r4, #0]
    9374:	2b00      	cmp	r3, #0
    9376:	d000      	beq.n	937a <_fstat_r+0x1e>
    9378:	602b      	str	r3, [r5, #0]
    937a:	bd70      	pop	{r4, r5, r6, pc}
    937c:	200005e8 	.word	0x200005e8

00009380 <_isatty_r>:
    9380:	2300      	movs	r3, #0
    9382:	b570      	push	{r4, r5, r6, lr}
    9384:	4c06      	ldr	r4, [pc, #24]	; (93a0 <_isatty_r+0x20>)
    9386:	0005      	movs	r5, r0
    9388:	0008      	movs	r0, r1
    938a:	6023      	str	r3, [r4, #0]
    938c:	f7fc fec4 	bl	6118 <_isatty>
    9390:	1c43      	adds	r3, r0, #1
    9392:	d103      	bne.n	939c <_isatty_r+0x1c>
    9394:	6823      	ldr	r3, [r4, #0]
    9396:	2b00      	cmp	r3, #0
    9398:	d000      	beq.n	939c <_isatty_r+0x1c>
    939a:	602b      	str	r3, [r5, #0]
    939c:	bd70      	pop	{r4, r5, r6, pc}
    939e:	46c0      	nop			; (mov r8, r8)
    93a0:	200005e8 	.word	0x200005e8

000093a4 <_lseek_r>:
    93a4:	b570      	push	{r4, r5, r6, lr}
    93a6:	0005      	movs	r5, r0
    93a8:	0008      	movs	r0, r1
    93aa:	0011      	movs	r1, r2
    93ac:	2200      	movs	r2, #0
    93ae:	4c06      	ldr	r4, [pc, #24]	; (93c8 <_lseek_r+0x24>)
    93b0:	6022      	str	r2, [r4, #0]
    93b2:	001a      	movs	r2, r3
    93b4:	f7fc feb2 	bl	611c <_lseek>
    93b8:	1c43      	adds	r3, r0, #1
    93ba:	d103      	bne.n	93c4 <_lseek_r+0x20>
    93bc:	6823      	ldr	r3, [r4, #0]
    93be:	2b00      	cmp	r3, #0
    93c0:	d000      	beq.n	93c4 <_lseek_r+0x20>
    93c2:	602b      	str	r3, [r5, #0]
    93c4:	bd70      	pop	{r4, r5, r6, pc}
    93c6:	46c0      	nop			; (mov r8, r8)
    93c8:	200005e8 	.word	0x200005e8

000093cc <memchr>:
    93cc:	b2c9      	uxtb	r1, r1
    93ce:	1882      	adds	r2, r0, r2
    93d0:	4290      	cmp	r0, r2
    93d2:	d101      	bne.n	93d8 <memchr+0xc>
    93d4:	2000      	movs	r0, #0
    93d6:	4770      	bx	lr
    93d8:	7803      	ldrb	r3, [r0, #0]
    93da:	428b      	cmp	r3, r1
    93dc:	d0fb      	beq.n	93d6 <memchr+0xa>
    93de:	3001      	adds	r0, #1
    93e0:	e7f6      	b.n	93d0 <memchr+0x4>

000093e2 <_realloc_r>:
    93e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    93e4:	0007      	movs	r7, r0
    93e6:	000d      	movs	r5, r1
    93e8:	0016      	movs	r6, r2
    93ea:	2900      	cmp	r1, #0
    93ec:	d105      	bne.n	93fa <_realloc_r+0x18>
    93ee:	0011      	movs	r1, r2
    93f0:	f7fe fd1e 	bl	7e30 <_malloc_r>
    93f4:	0004      	movs	r4, r0
    93f6:	0020      	movs	r0, r4
    93f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    93fa:	2a00      	cmp	r2, #0
    93fc:	d103      	bne.n	9406 <_realloc_r+0x24>
    93fe:	f7fe fccd 	bl	7d9c <_free_r>
    9402:	0034      	movs	r4, r6
    9404:	e7f7      	b.n	93f6 <_realloc_r+0x14>
    9406:	f000 f827 	bl	9458 <_malloc_usable_size_r>
    940a:	002c      	movs	r4, r5
    940c:	4286      	cmp	r6, r0
    940e:	d9f2      	bls.n	93f6 <_realloc_r+0x14>
    9410:	0031      	movs	r1, r6
    9412:	0038      	movs	r0, r7
    9414:	f7fe fd0c 	bl	7e30 <_malloc_r>
    9418:	1e04      	subs	r4, r0, #0
    941a:	d0ec      	beq.n	93f6 <_realloc_r+0x14>
    941c:	0029      	movs	r1, r5
    941e:	0032      	movs	r2, r6
    9420:	f7fe fc98 	bl	7d54 <memcpy>
    9424:	0029      	movs	r1, r5
    9426:	0038      	movs	r0, r7
    9428:	f7fe fcb8 	bl	7d9c <_free_r>
    942c:	e7e3      	b.n	93f6 <_realloc_r+0x14>
	...

00009430 <_read_r>:
    9430:	b570      	push	{r4, r5, r6, lr}
    9432:	0005      	movs	r5, r0
    9434:	0008      	movs	r0, r1
    9436:	0011      	movs	r1, r2
    9438:	2200      	movs	r2, #0
    943a:	4c06      	ldr	r4, [pc, #24]	; (9454 <_read_r+0x24>)
    943c:	6022      	str	r2, [r4, #0]
    943e:	001a      	movs	r2, r3
    9440:	f7fc fe06 	bl	6050 <_read>
    9444:	1c43      	adds	r3, r0, #1
    9446:	d103      	bne.n	9450 <_read_r+0x20>
    9448:	6823      	ldr	r3, [r4, #0]
    944a:	2b00      	cmp	r3, #0
    944c:	d000      	beq.n	9450 <_read_r+0x20>
    944e:	602b      	str	r3, [r5, #0]
    9450:	bd70      	pop	{r4, r5, r6, pc}
    9452:	46c0      	nop			; (mov r8, r8)
    9454:	200005e8 	.word	0x200005e8

00009458 <_malloc_usable_size_r>:
    9458:	1f0b      	subs	r3, r1, #4
    945a:	681b      	ldr	r3, [r3, #0]
    945c:	1f18      	subs	r0, r3, #4
    945e:	2b00      	cmp	r3, #0
    9460:	da01      	bge.n	9466 <_malloc_usable_size_r+0xe>
    9462:	580b      	ldr	r3, [r1, r0]
    9464:	18c0      	adds	r0, r0, r3
    9466:	4770      	bx	lr
    9468:	000001c6 	.word	0x000001c6
    946c:	0000019e 	.word	0x0000019e
    9470:	000001a2 	.word	0x000001a2
    9474:	000001a6 	.word	0x000001a6
    9478:	000001aa 	.word	0x000001aa
    947c:	000001ae 	.word	0x000001ae
    9480:	000001b2 	.word	0x000001b2
    9484:	000001b6 	.word	0x000001b6
    9488:	000001ba 	.word	0x000001ba
    948c:	000001be 	.word	0x000001be
    9490:	00000264 	.word	0x00000264
    9494:	0000023c 	.word	0x0000023c
    9498:	00000242 	.word	0x00000242
    949c:	00000248 	.word	0x00000248
    94a0:	00000248 	.word	0x00000248
    94a4:	0000024e 	.word	0x0000024e
    94a8:	0000024e 	.word	0x0000024e
    94ac:	0000024e 	.word	0x0000024e
    94b0:	00000254 	.word	0x00000254
    94b4:	0000025a 	.word	0x0000025a
    94b8:	00000100 	.word	0x00000100
    94bc:	00000366 	.word	0x00000366
    94c0:	0000033e 	.word	0x0000033e
    94c4:	00000344 	.word	0x00000344
    94c8:	0000034a 	.word	0x0000034a
    94cc:	0000034a 	.word	0x0000034a
    94d0:	00000350 	.word	0x00000350
    94d4:	00000350 	.word	0x00000350
    94d8:	00000350 	.word	0x00000350
    94dc:	00000356 	.word	0x00000356
    94e0:	0000035c 	.word	0x0000035c
    94e4:	00000792 	.word	0x00000792
    94e8:	0000076e 	.word	0x0000076e
    94ec:	00000774 	.word	0x00000774
    94f0:	0000077a 	.word	0x0000077a
    94f4:	0000077a 	.word	0x0000077a
    94f8:	00000780 	.word	0x00000780
    94fc:	00000780 	.word	0x00000780
    9500:	00000780 	.word	0x00000780
    9504:	00000786 	.word	0x00000786
    9508:	0000078c 	.word	0x0000078c
    950c:	00000a9a 	.word	0x00000a9a
    9510:	00000a76 	.word	0x00000a76
    9514:	00000a7c 	.word	0x00000a7c
    9518:	00000a82 	.word	0x00000a82
    951c:	00000a82 	.word	0x00000a82
    9520:	00000a88 	.word	0x00000a88
    9524:	00000a88 	.word	0x00000a88
    9528:	00000a88 	.word	0x00000a88
    952c:	00000a8e 	.word	0x00000a8e
    9530:	00000a94 	.word	0x00000a94

00009534 <__FUNCTION__.14237>:
    9534:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    9544:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    9554:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    9564:	6320746c 0000646d 00001988 00001958     lt cmd......X...
    9574:	00001950 00001968 00001960 00001980     P...h...`.......
    9584:	00001970 00001978                       p...x...

0000958c <__FUNCTION__.13058>:
    958c:	5f666968 646e6573 00000000              hif_send....

00009598 <__FUNCTION__.13068>:
    9598:	5f666968 00727369                       hif_isr.

000095a0 <__FUNCTION__.13074>:
    95a0:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

000095b0 <__FUNCTION__.13086>:
    95b0:	5f666968 65636572 00657669              hif_receive.

000095bc <__FUNCTION__.13102>:
    95bc:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    95cc:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    95dc:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    95ec:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    95fc:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    960c:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    961c:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    962c:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    963c:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
    964c:	6c616320 6361626c 7369206b 746f6e20      callback is not
    965c:	67657220 65747369 00646572 6b6f6353      registered.Scok
    966c:	63207465 626c6c61 206b6361 6e207369     et callback is n
    967c:	7220746f 73696765 65726574 00000064     ot registered...
    968c:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
    969c:	20746f6e 69676572 72657473 00006465     not registered..
    96ac:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
    96bc:	6e207369 7220746f 73696765 65726574     is not registere
    96cc:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
    96dc:	69206b63 6f6e2073 65722074 74736967     ck is not regist
    96ec:	64657265 00000000 66696828 6e692029     ered....(hif) in
    96fc:	696c6176 72672064 2070756f 00004449     valid group ID..
    970c:	66696828 6f682029 61207473 64207070     (hif) host app d
    971c:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
    972c:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
    973c:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
    974c:	66696828 61462029 2065736c 65746e69     (hif) False inte
    975c:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
    976c:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
    977c:	7265746e 74707572 67657220 00000000     nterrupt reg....
    978c:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
    979c:	656c646e 746e6920 75727265 25207470     ndle interrupt %
    97ac:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
    97bc:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    97cc:	696c6176 72612064 656d7567 0000746e     valid argument..
    97dc:	20505041 75716552 65747365 69532064     APP Requested Si
    97ec:	6920657a 616c2073 72656772 61687420     ze is larger tha
    97fc:	6874206e 65722065 65766963 75622064     n the recived bu
    980c:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
    981c:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
    982c:	65747365 64412064 73657264 65622073     ested Address be
    983c:	646e6f79 65687420 63657220 64657669     yond the recived
    984c:	66756220 20726566 72646461 20737365      buffer address 
    985c:	20646e61 676e656c 00006874 20705247     and length..GRp 
    986c:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
    987c:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
    988c:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
    989c:	6b617720 74207075 63206568 00706968      wakup the chip.

000098ac <__FUNCTION__.13037>:
    98ac:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

000098b8 <__FUNCTION__.13066>:
    98b8:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

000098c8 <__FUNCTION__.13094>:
    98c8:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    98d8:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
    98e8:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
    98f8:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
    9908:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
    9918:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    9928:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    9938:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    9948:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    9958:	20706557 2079656b 65646e69 64252078     Wep key index %d
    9968:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    9978:	2079656b 676e656c 25206874 00000a64     key length %d...
    9988:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    9998:	656c2079 6874676e 00000000 65646e75     y length....unde
    99a8:	656e6966 65732064 79742063 00006570     fined sec type..
    99b8:	6d726946 65726177 72657620 3a202020     Firmware ver   :
    99c8:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
    99d8:	0a752520 00000000 6d726946 65726177      %u.....Firmware
    99e8:	69754220 2520646c 69542073 2520656d      Build %s Time %
    99f8:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
    9a08:	69726420 20726576 20726576 7525203a      driver ver : %u
    9a18:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
    9a28:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
    9a38:	353a3731 35313a30 00000000 20727041     17:50:15....Apr 
    9a48:	32203220 00373130 76697244 62207265      2 2017.Driver b
    9a58:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
    9a68:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
    9a78:	65562065 6f697372 0000006e              e Version...

00009a84 <__FUNCTION__.12900>:
    9a84:	70696863 6b61775f 00000065              chip_wake...

00009a90 <__FUNCTION__.12949>:
    9a90:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
    9aa0:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    9ab0:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
    9ac0:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
    9ad0:	74206465 6177206f 2070756b 20656874     ed to wakup the 
    9ae0:	70696863 00000000 76697244 65567265     chip....DriverVe
    9af0:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

00009b00 <__FUNCTION__.12947>:
    9b00:	645f6d6e 695f7672 0074696e              nm_drv_init.

00009b0c <__FUNCTION__.12954>:
    9b0c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    9b1c:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
    9b2c:	6965645f 2074696e 6c696166 00000000     _deinit fail....
    9b3c:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
    9b4c:	73616c66 69642068 6c626173 61662065     flash disable fa
    9b5c:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
    9b6c:	6c696166 696e6920 75622074 00000073     fail init bus...
    9b7c:	6c696166 74206465 6e65206f 656c6261     failed to enable
    9b8c:	746e6920 75727265 2e737470 0000002e      interrupts.....
    9b9c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    9bac:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    9bbc:	20444920 0a786c25 00000000 00002968      ID %lx.....h)..
    9bcc:	00002968 00002998 0000291a 0000293e     h)...)...)..>)..
    9bdc:	0000294c 0000297e 0000297e 000029c6     L)..~)..~)...)..
    9bec:	000028fe 00002a00 00002a00 00002a00     .(...*...*...*..
    9bfc:	00002a00 0000295a cac4c9c3              .*..Z)......

00009c08 <__FUNCTION__.12253>:
    9c08:	5f697073 00646d63                       spi_cmd.

00009c10 <__FUNCTION__.12260>:
    9c10:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00009c20 <__FUNCTION__.12269>:
    9c20:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00009c2c <__FUNCTION__.12285>:
    9c2c:	5f697073 61746164 6165725f 00000064     spi_data_read...

00009c3c <__FUNCTION__.12300>:
    9c3c:	5f697073 61746164 6972775f 00006574     spi_data_write..

00009c4c <__FUNCTION__.12312>:
    9c4c:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00009c5c <__FUNCTION__.12323>:
    9c5c:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00009c6c <__FUNCTION__.12335>:
    9c6c:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00009c7c <__FUNCTION__.12348>:
    9c7c:	735f6d6e 725f6970 00646165              nm_spi_read.

00009c88 <__FUNCTION__.12369>:
    9c88:	735f6d6e 695f6970 0074696e              nm_spi_init.

00009c94 <crc7_syndrome_table>:
    9c94:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    9ca4:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    9cb4:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    9cc4:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    9cd4:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    9ce4:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    9cf4:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    9d04:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    9d14:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    9d24:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    9d34:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    9d44:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    9d54:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    9d64:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    9d74:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    9d84:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    9d94:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9da4:	6e692064 6e726574 72206c61 20646165     d internal read 
    9db4:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    9dc4:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
    9dd4:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    9de4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9df4:	6e692064 6e726574 72206c61 20646165     d internal read 
    9e04:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    9e14:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    9e24:	6e726574 77206c61 65746972 6f727020     ternal write pro
    9e34:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    9e44:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    9e54:	20646d63 64616572 69686320 64692070     cmd read chip id
    9e64:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9e74:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    9e84:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    9e94:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9ea4:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    9eb4:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    9ec4:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    9ed4:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    9ee4:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    9ef4:	00000000 65736552 6e612074 65722064     ....Reset and re
    9f04:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
    9f14:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9f24:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    9f34:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    9f44:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    9f54:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    9f64:	69727720 62206574 6b636f6c 30252820      write block (%0
    9f74:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    9f84:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    9f94:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    9fa4:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    9fb4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    9fc4:	61642064 62206174 6b636f6c 69727720     d data block wri
    9fd4:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    9fe4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    9ff4:	656c6961 61642064 62206174 6b636f6c     ailed data block
    a004:	63726320 69727720 202c6574 20737562      crc write, bus 
    a014:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    a024:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
    a034:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    a044:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    a054:	72206174 6f707365 2065736e 64616572     ta response read
    a064:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
    a074:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    a084:	206b636f 61746164 69727720 2e2e6574     ock data write..
    a094:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    a0a4:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    a0b4:	73756220 72726520 2e2e726f 0000002e      bus error......
    a0c4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    a0d4:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    a0e4:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    a0f4:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    a104:	656c6961 61642064 72206174 6f707365     ailed data respo
    a114:	2065736e 64616572 7562202c 72652073     nse read, bus er
    a124:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    a134:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    a144:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    a154:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    a164:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    a174:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    a184:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    a194:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    a1a4:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    a1b4:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    a1c4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    a1d4:	72202c64 20646165 20676572 38302528     d, read reg (%08
    a1e4:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    a1f4:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    a204:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    a214:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    a224:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    a234:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    a244:	6e612074 65722064 20797274 25206425     t and retry %d %
    a254:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    a264:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    a274:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    a284:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    a294:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    a2a4:	74697277 65722065 25282067 29783830     write reg (%08x)
    a2b4:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
    a2c4:	65722064 20797274 25206425 2520786c     d retry %d %lx %
    a2d4:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
    a2e4:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
    a2f4:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
    a304:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
    a314:	4449206e 25203d20 000a0d64 42000800     n ID = %d......B
    a324:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    a334:	42001c00 0000517e 0000517a 0000517a     ...B~Q..zQ..zQ..
    a344:	000051dc 000051dc 00005192 00005184     .Q...Q...Q...Q..
    a354:	00005198 000051ca 0000539c 0000537c     .Q...Q...S..|S..
    a364:	0000537c 00005408 0000538e 000053aa     |S...T...S...S..
    a374:	00005380 000053b8 000053f8              .S...S...S..

0000a380 <_tcc_apbcmasks>:
    a380:	00000100 00000200 00000400              ............

0000a38c <_tcc_cc_nums>:
    a38c:	00020204                                ....

0000a390 <_tcc_gclk_ids>:
    a390:	001b1a1a                                ....

0000a394 <_tcc_maxs>:
    a394:	00ffffff 00ffffff 0000ffff              ............

0000a3a0 <_tcc_ow_nums>:
    a3a0:	00020408                                ....

0000a3a4 <_tcc_intflag>:
    a3a4:	00000001 00000002 00000004 00000008     ................
    a3b4:	00001000 00002000 00004000 00008000     ..... ...@......
    a3c4:	00010000 00020000 00040000 00080000     ................

0000a3d4 <tcc_interrupt_vectors.12434>:
    a3d4:	0011100f 00006fc2 00006fbc 00006fb6     .....o...o...o..
    a3e4:	00006fb0 00006fc8 00006fd0 00006fc8     .o...o...o...o..
    a3f4:	00006faa 00006fa4 00006fc8 00006f9e     .o...o...o...o..
    a404:	00006f9e 00006f98 00006f92 00006fd0     .o...o...o...o..
    a414:	0000703a 00007034 0000702e 00007028     :p..4p...p..(p..
    a424:	00007040 00007048 00007040 00007022     @p..Hp..@p.."p..
    a434:	0000701c 00007040 00007016 00007016     .p..@p...p...p..
    a444:	00007010 0000700a 00007048 000070b4     .p...p..Hp...p..
    a454:	000070ae 000070a8 000070a2 000070ba     .p...p...p...p..
    a464:	000070ba 000070ba 0000709c 00007096     .p...p...p...p..
    a474:	000070ba 00007090 00007090 0000708a     .p...p...p...p..
    a484:	00007084 33323130 37363534 62613938     .p..0123456789ab
    a494:	66656463 00000d31 6e617254 72656673     cdef1...Transfer
    a4a4:	636e452d 6e69646f 00203a67 6e6e6f43     -Encoding: .Conn
    a4b4:	69746365 203a6e6f 00000000 50545448     ection: ....HTTP
    a4c4:	0000002f 20544547 00000000 54534f50     /...GET ....POST
    a4d4:	00000020 454c4544 00204554 20545550      ...DELETE .PUT 
    a4e4:	00000000 4954504f 20534e4f 00000000     ....OPTIONS ....
    a4f4:	44414548 00000020 54544820 2e312f50     HEAD ... HTTP/1.
    a504:	000a0d31 72657355 6567412d 203a746e     1...User-Agent: 
    a514:	00000000 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
    a524:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
    a534:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
    a544:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
    a554:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
    a564:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
    a574:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
    a584:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
    a594:	676e654c 203a6874 00000000 656d7461     Length: ....atme
    a5a4:	2e312f6c 00322e30 70747468 002f2f3a     l/1.0.2.http://.
    a5b4:	70747468 2f2f3a73 00000000 42002000     https://..... .B
    a5c4:	42002400 42002800 00007410 00007418     .$.B.(.B.t...t..
    a5d4:	0000742a 000074a8 00007524 70747468     *t...t..$u..http
    a5e4:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
    a5f4:	5448203a 63205054 6e65696c 6f732074     : HTTP client so
    a604:	74656b63 6e6f6320 7463656e 0d2e6465     cket connected..
    a614:	00000000 70747468 696c635f 5f746e65     ....http_client_
    a624:	6c6c6163 6b636162 6572203a 73657571     callback: reques
    a634:	6f632074 656c706d 2e646574 0000000d     t completed.....
    a644:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
    a654:	6b636162 6572203a 76696563 72206465     back: received r
    a664:	6f707365 2065736e 64207525 20617461     esponse %u data 
    a674:	657a6973 0d752520 0000000a 70747468     size %u.....http
    a684:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
    a694:	5548435f 44454b4e 54414420 72203a41     _CHUNKED DATA: r
    a6a4:	69656365 20646576 70736572 65736e6f     eceived response
    a6b4:	74616420 69732061 2520657a 000a0d75      data size %u...
    a6c4:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
    a6d4:	6b636162 6964203a 6e6f6373 7463656e     back: disconnect
    a6e4:	206e6f69 73616572 253a6e6f 000a0d64     ion reason:%d...
    a6f4:	48202d2d 20505454 656c6966 776f6420     -- HTTP file dow
    a704:	616f6c6e 20726564 6d617865 20656c70     nloader example 
    a714:	0a0d2d2d 53202d2d 32574d41 50585f35     --..-- SAMW25_XP
    a724:	4e49414c 505f4445 2d204f52 2d0a0d2d     LAINED_PRO --..-
    a734:	6f43202d 6c69706d 203a6465 20727041     - Compiled: Apr 
    a744:	32203220 20373130 313a3332 34323a33      2 2017 23:13:24
    a754:	0d2d2d20 00000000 68540a0d 61207369      --.......This a
    a764:	696c7070 69746163 72206e6f 69757165     pplication requi
    a774:	20736572 20656874 74205041 6168206f     res the AP to ha
    a784:	69206576 7265746e 2074656e 65636361     ve internet acce
    a794:	0d2e7373 00000d0a 666e6f63 72756769     ss......configur
    a7a4:	74685f65 635f7074 6e65696c 48203a74     e_http_client: H
    a7b4:	20505454 65696c63 6920746e 6974696e     TTP client initi
    a7c4:	7a696c61 6f697461 6166206e 64656c69     alization failed
    a7d4:	72282021 25207365 0a0d2964 00000000     ! (res %d)......
    a7e4:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
    a7f4:	2074696e 6c6c6163 72726520 2021726f     nit call error! 
    a804:	73657228 29642520 00000a0d 6e69616d     (res %d)....main
    a814:	6f63203a 63656e6e 676e6974 206f7420     : connecting to 
    a824:	69466957 20504120 2e2e7325 000a0d2e     WiFi AP %s......
    a834:	6e69616d 6f64203a 0d2e656e 00000000     main: done......
    a844:	6f736572 5f65766c 203a6263 49207325     resolve_cb: %s I
    a854:	64612050 73657264 73692073 2e642520     P address is %d.
    a864:	252e6425 64252e64 0a0d0a0d 00000000     %d.%d.%d........
    a874:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
    a884:	462d6957 73692069 746f6e20 6e6f6320     Wi-Fi is not con
    a894:	7463656e 0d2e6465 00000000 72617473     nected......star
    a8a4:	6f645f74 6f6c6e77 203a6461 75716572     t_download: requ
    a8b4:	20747365 73207369 20746e65 65726c61     est is sent alre
    a8c4:	2e796461 0000000d 72617473 6f645f74     ady.....start_do
    a8d4:	6f6c6e77 203a6461 6e6e7572 20676e69     wnload: running 
    a8e4:	6e776f64 64616f6c 726c6120 79646165     download already
    a8f4:	00000d2e 72617473 6f645f74 6f6c6e77     ....start_downlo
    a904:	203a6461 646e6573 20676e69 50545448     ad: sending HTTP
    a914:	71657220 74736575 0d2e2e2e 00000000      request........
    a924:	70747468 2f2f3a73 2e777777 73616573     https://www.seas
    a934:	6570752e 652e6e6e 7e2f7564 6863696e     .upenn.edu/~nich
    a944:	2f736e69 74736574 2e426b34 00747874     ins/test4kB.txt.
    a954:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
    a964:	4f435f49 43454e4e 0d444554 00000000     I_CONNECTED.....
    a974:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
    a984:	49445f49 4e4f4353 5443454e 000d4445     I_DISCONNECTED..
    a994:	7473616d 69737265 6169646e 00000000     mastersindia....
    a9a4:	6f6c2742 72476572 2d736461 00342e32     B'loreGrads-2.4.
    a9b4:	69666977 3a62635f 20504920 72646461     wifi_cb: IP addr
    a9c4:	20737365 25207369 75252e75 2e75252e     ess is %u.%u.%u.
    a9d4:	0a0d7525 00000000                       %u......

0000a9dc <_global_impure_ptr>:
    a9dc:	20000014                                ... 

0000a9e0 <__sf_fake_stderr>:
	...

0000aa00 <__sf_fake_stdin>:
	...

0000aa20 <__sf_fake_stdout>:
	...
    aa40:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    aa50:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    aa60:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    aa70:	37363534 62613938 66656463 20200000              456789abcdef.

0000aa7d <_ctype_>:
    aa7d:	20202000 20202020 28282020 20282828     .         ((((( 
    aa8d:	20202020 20202020 20202020 20202020                     
    aa9d:	10108820 10101010 10101010 10101010      ...............
    aaad:	04040410 04040404 10040404 10101010     ................
    aabd:	41411010 41414141 01010101 01010101     ..AAAAAA........
    aacd:	01010101 01010101 01010101 10101010     ................
    aadd:	42421010 42424242 02020202 02020202     ..BBBBBB........
    aaed:	02020202 02020202 02020202 10101010     ................
    aafd:	00000020 00000000 00000000 00000000      ...............
	...

0000ab80 <_init>:
    ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab82:	46c0      	nop			; (mov r8, r8)
    ab84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ab86:	bc08      	pop	{r3}
    ab88:	469e      	mov	lr, r3
    ab8a:	4770      	bx	lr

0000ab8c <__init_array_start>:
    ab8c:	000000dd 	.word	0x000000dd

0000ab90 <_fini>:
    ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab92:	46c0      	nop			; (mov r8, r8)
    ab94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ab96:	bc08      	pop	{r3}
    ab98:	469e      	mov	lr, r3
    ab9a:	4770      	bx	lr

0000ab9c <__fini_array_start>:
    ab9c:	000000b5 	.word	0x000000b5
