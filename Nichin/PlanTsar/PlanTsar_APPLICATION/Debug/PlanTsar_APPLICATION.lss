
PlanTsar_APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ca40  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001f0  20000000  00014a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000dcc  200001f0  00014c30  000201f0  2**2
                  ALLOC
  3 .stack        00002004  20000fbc  000159fc  000201f0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .debug_info   00068cdc  00000000  00000000  000202e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008d46  00000000  00000000  00088fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001ab8d  00000000  00000000  00091d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f80  00000000  00000000  000ac891  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001d40  00000000  00000000  000ad811  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00023a93  00000000  00000000  000af551  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00020492  00000000  00000000  000d2fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009522e  00000000  00000000  000f3476  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003710  00000000  00000000  001886a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <exception_table>:
    8000:	c0 2f 00 20 19 f5 00 00 15 f5 00 00 15 f5 00 00     ./. ............
	...
    802c:	15 f5 00 00 00 00 00 00 00 00 00 00 15 f5 00 00     ................
    803c:	15 f5 00 00 15 f5 00 00 15 f5 00 00 15 f5 00 00     ................
    804c:	15 f5 00 00 89 d0 00 00 15 f5 00 00 15 f5 00 00     ................
    805c:	15 f5 00 00 15 f5 00 00 8d d8 00 00 9d d8 00 00     ................
    806c:	ad d8 00 00 bd d8 00 00 cd d8 00 00 dd d8 00 00     ................
    807c:	e5 f4 00 00 f5 f4 00 00 05 f5 00 00 15 f5 00 00     ................
    808c:	15 f5 00 00 15 f5 00 00 00 00 00 00 00 00 00 00     ................
    809c:	15 f5 00 00 15 f5 00 00 15 f5 00 00 15 f5 00 00     ................
    80ac:	15 f5 00 00 00 00 00 00                             ........

000080b4 <__do_global_dtors_aux>:
    80b4:	b510      	push	{r4, lr}
    80b6:	4c06      	ldr	r4, [pc, #24]	; (80d0 <__do_global_dtors_aux+0x1c>)
    80b8:	7823      	ldrb	r3, [r4, #0]
    80ba:	2b00      	cmp	r3, #0
    80bc:	d107      	bne.n	80ce <__do_global_dtors_aux+0x1a>
    80be:	4b05      	ldr	r3, [pc, #20]	; (80d4 <__do_global_dtors_aux+0x20>)
    80c0:	2b00      	cmp	r3, #0
    80c2:	d002      	beq.n	80ca <__do_global_dtors_aux+0x16>
    80c4:	4804      	ldr	r0, [pc, #16]	; (80d8 <__do_global_dtors_aux+0x24>)
    80c6:	e000      	b.n	80ca <__do_global_dtors_aux+0x16>
    80c8:	bf00      	nop
    80ca:	2301      	movs	r3, #1
    80cc:	7023      	strb	r3, [r4, #0]
    80ce:	bd10      	pop	{r4, pc}
    80d0:	200001f0 	.word	0x200001f0
    80d4:	00000000 	.word	0x00000000
    80d8:	00014a40 	.word	0x00014a40

000080dc <frame_dummy>:
    80dc:	4b08      	ldr	r3, [pc, #32]	; (8100 <frame_dummy+0x24>)
    80de:	b510      	push	{r4, lr}
    80e0:	2b00      	cmp	r3, #0
    80e2:	d003      	beq.n	80ec <frame_dummy+0x10>
    80e4:	4907      	ldr	r1, [pc, #28]	; (8104 <frame_dummy+0x28>)
    80e6:	4808      	ldr	r0, [pc, #32]	; (8108 <frame_dummy+0x2c>)
    80e8:	e000      	b.n	80ec <frame_dummy+0x10>
    80ea:	bf00      	nop
    80ec:	4807      	ldr	r0, [pc, #28]	; (810c <frame_dummy+0x30>)
    80ee:	6803      	ldr	r3, [r0, #0]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d100      	bne.n	80f6 <frame_dummy+0x1a>
    80f4:	bd10      	pop	{r4, pc}
    80f6:	4b06      	ldr	r3, [pc, #24]	; (8110 <frame_dummy+0x34>)
    80f8:	2b00      	cmp	r3, #0
    80fa:	d0fb      	beq.n	80f4 <frame_dummy+0x18>
    80fc:	4798      	blx	r3
    80fe:	e7f9      	b.n	80f4 <frame_dummy+0x18>
    8100:	00000000 	.word	0x00000000
    8104:	200001f4 	.word	0x200001f4
    8108:	00014a40 	.word	0x00014a40
    810c:	00014a40 	.word	0x00014a40
    8110:	00000000 	.word	0x00000000

00008114 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    8114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8116:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    8118:	2041      	movs	r0, #65	; 0x41
    811a:	5c23      	ldrb	r3, [r4, r0]
    811c:	2501      	movs	r5, #1
    811e:	432b      	orrs	r3, r5
    8120:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    8122:	b292      	uxth	r2, r2
    8124:	2000      	movs	r0, #0
    8126:	5620      	ldrsb	r0, [r4, r0]
    8128:	2300      	movs	r3, #0
    812a:	4d12      	ldr	r5, [pc, #72]	; (8174 <_http_client_send_wait+0x60>)
    812c:	47a8      	blx	r5
    812e:	2800      	cmp	r0, #0
    8130:	db16      	blt.n	8160 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    8132:	2341      	movs	r3, #65	; 0x41
    8134:	5ce3      	ldrb	r3, [r4, r3]
    8136:	07db      	lsls	r3, r3, #31
    8138:	d518      	bpl.n	816c <_http_client_send_wait+0x58>
    813a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    813c:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    813e:	2b02      	cmp	r3, #2
    8140:	d917      	bls.n	8172 <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    8142:	4f0d      	ldr	r7, [pc, #52]	; (8178 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    8144:	4e0d      	ldr	r6, [pc, #52]	; (817c <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    8146:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    8148:	2000      	movs	r0, #0
    814a:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    814c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    814e:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    8150:	5d63      	ldrb	r3, [r4, r5]
    8152:	07db      	lsls	r3, r3, #31
    8154:	d50c      	bpl.n	8170 <_http_client_send_wait+0x5c>
    8156:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    8158:	2b02      	cmp	r3, #2
    815a:	d8f5      	bhi.n	8148 <_http_client_send_wait+0x34>
	return 0;
    815c:	2000      	movs	r0, #0
    815e:	e008      	b.n	8172 <_http_client_send_wait+0x5e>
		module->sending = 0;
    8160:	2241      	movs	r2, #65	; 0x41
    8162:	5ca3      	ldrb	r3, [r4, r2]
    8164:	2101      	movs	r1, #1
    8166:	438b      	bics	r3, r1
    8168:	54a3      	strb	r3, [r4, r2]
		return result;
    816a:	e002      	b.n	8172 <_http_client_send_wait+0x5e>
	return 0;
    816c:	2000      	movs	r0, #0
    816e:	e000      	b.n	8172 <_http_client_send_wait+0x5e>
    8170:	2000      	movs	r0, #0
}
    8172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8174:	0000cb7d 	.word	0x0000cb7d
    8178:	0000addd 	.word	0x0000addd
    817c:	000092d1 	.word	0x000092d1

00008180 <http_client_get_config_defaults>:
	config->port = 80;
    8180:	2350      	movs	r3, #80	; 0x50
    8182:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    8184:	2300      	movs	r3, #0
    8186:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    8188:	4a05      	ldr	r2, [pc, #20]	; (81a0 <http_client_get_config_defaults+0x20>)
    818a:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    818c:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    818e:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    8190:	3301      	adds	r3, #1
    8192:	33ff      	adds	r3, #255	; 0xff
    8194:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    8196:	3bae      	subs	r3, #174	; 0xae
    8198:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    819a:	4b02      	ldr	r3, [pc, #8]	; (81a4 <http_client_get_config_defaults+0x24>)
    819c:	6183      	str	r3, [r0, #24]
}
    819e:	4770      	bx	lr
    81a0:	00004e20 	.word	0x00004e20
    81a4:	00013084 	.word	0x00013084

000081a8 <http_client_init>:
{
    81a8:	b570      	push	{r4, r5, r6, lr}
    81aa:	0004      	movs	r4, r0
    81ac:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    81ae:	2800      	cmp	r0, #0
    81b0:	d038      	beq.n	8224 <http_client_init+0x7c>
    81b2:	2900      	cmp	r1, #0
    81b4:	d039      	beq.n	822a <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    81b6:	690b      	ldr	r3, [r1, #16]
    81b8:	2b00      	cmp	r3, #0
    81ba:	d039      	beq.n	8230 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    81bc:	684b      	ldr	r3, [r1, #4]
    81be:	2b00      	cmp	r3, #0
    81c0:	d039      	beq.n	8236 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    81c2:	694b      	ldr	r3, [r1, #20]
    81c4:	2b51      	cmp	r3, #81	; 0x51
    81c6:	d939      	bls.n	823c <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    81c8:	22e8      	movs	r2, #232	; 0xe8
    81ca:	2100      	movs	r1, #0
    81cc:	4b1e      	ldr	r3, [pc, #120]	; (8248 <http_client_init+0xa0>)
    81ce:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    81d0:	0020      	movs	r0, r4
    81d2:	3050      	adds	r0, #80	; 0x50
    81d4:	221c      	movs	r2, #28
    81d6:	0029      	movs	r1, r5
    81d8:	4b1c      	ldr	r3, [pc, #112]	; (824c <http_client_init+0xa4>)
    81da:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    81dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    81de:	2b00      	cmp	r3, #0
    81e0:	d008      	beq.n	81f4 <http_client_init+0x4c>
	if (config->timeout > 0) {
    81e2:	892b      	ldrh	r3, [r5, #8]
    81e4:	2b00      	cmp	r3, #0
    81e6:	d111      	bne.n	820c <http_client_init+0x64>
	module->req.state = STATE_INIT;
    81e8:	2300      	movs	r3, #0
    81ea:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    81ec:	22d8      	movs	r2, #216	; 0xd8
    81ee:	50a3      	str	r3, [r4, r2]
	return 0;
    81f0:	2000      	movs	r0, #0
}
    81f2:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    81f4:	6928      	ldr	r0, [r5, #16]
    81f6:	4b16      	ldr	r3, [pc, #88]	; (8250 <http_client_init+0xa8>)
    81f8:	4798      	blx	r3
    81fa:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    81fc:	2800      	cmp	r0, #0
    81fe:	d020      	beq.n	8242 <http_client_init+0x9a>
		module->alloc_buffer = 1;
    8200:	2241      	movs	r2, #65	; 0x41
    8202:	5ca3      	ldrb	r3, [r4, r2]
    8204:	2104      	movs	r1, #4
    8206:	430b      	orrs	r3, r1
    8208:	54a3      	strb	r3, [r4, r2]
    820a:	e7ea      	b.n	81e2 <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    820c:	6868      	ldr	r0, [r5, #4]
    820e:	2300      	movs	r3, #0
    8210:	0022      	movs	r2, r4
    8212:	4910      	ldr	r1, [pc, #64]	; (8254 <http_client_init+0xac>)
    8214:	4d10      	ldr	r5, [pc, #64]	; (8258 <http_client_init+0xb0>)
    8216:	47a8      	blx	r5
    8218:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    821a:	2800      	cmp	r0, #0
    821c:	dae4      	bge.n	81e8 <http_client_init+0x40>
			return -ENOSPC;
    821e:	201c      	movs	r0, #28
    8220:	4240      	negs	r0, r0
    8222:	e7e6      	b.n	81f2 <http_client_init+0x4a>
		return -EINVAL;
    8224:	2016      	movs	r0, #22
    8226:	4240      	negs	r0, r0
    8228:	e7e3      	b.n	81f2 <http_client_init+0x4a>
    822a:	2016      	movs	r0, #22
    822c:	4240      	negs	r0, r0
    822e:	e7e0      	b.n	81f2 <http_client_init+0x4a>
		return -EINVAL;
    8230:	2016      	movs	r0, #22
    8232:	4240      	negs	r0, r0
    8234:	e7dd      	b.n	81f2 <http_client_init+0x4a>
		return -EINVAL;
    8236:	2016      	movs	r0, #22
    8238:	4240      	negs	r0, r0
    823a:	e7da      	b.n	81f2 <http_client_init+0x4a>
		return -EINVAL;
    823c:	2016      	movs	r0, #22
    823e:	4240      	negs	r0, r0
    8240:	e7d7      	b.n	81f2 <http_client_init+0x4a>
			return -ENOMEM;
    8242:	200c      	movs	r0, #12
    8244:	4240      	negs	r0, r0
    8246:	e7d4      	b.n	81f2 <http_client_init+0x4a>
    8248:	000117df 	.word	0x000117df
    824c:	000117a9 	.word	0x000117a9
    8250:	00011781 	.word	0x00011781
    8254:	0000836d 	.word	0x0000836d
    8258:	0000924d 	.word	0x0000924d

0000825c <http_client_register_callback>:
	if (module == NULL) {
    825c:	2800      	cmp	r0, #0
    825e:	d002      	beq.n	8266 <http_client_register_callback+0xa>
	module->cb = callback;
    8260:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    8262:	2000      	movs	r0, #0
}
    8264:	4770      	bx	lr
		return -EINVAL;
    8266:	2016      	movs	r0, #22
    8268:	4240      	negs	r0, r0
    826a:	e7fb      	b.n	8264 <http_client_register_callback+0x8>

0000826c <_http_client_clear_conn>:
{
    826c:	b5f0      	push	{r4, r5, r6, r7, lr}
    826e:	b085      	sub	sp, #20
    8270:	0004      	movs	r4, r0
    8272:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    8274:	23c0      	movs	r3, #192	; 0xc0
    8276:	58c3      	ldr	r3, [r0, r3]
    8278:	2b00      	cmp	r3, #0
    827a:	d002      	beq.n	8282 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    827c:	22c4      	movs	r2, #196	; 0xc4
    827e:	5880      	ldr	r0, [r0, r2]
    8280:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    8282:	0020      	movs	r0, r4
    8284:	30b0      	adds	r0, #176	; 0xb0
    8286:	2218      	movs	r2, #24
    8288:	2100      	movs	r1, #0
    828a:	4b17      	ldr	r3, [pc, #92]	; (82e8 <_http_client_clear_conn+0x7c>)
    828c:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    828e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    8290:	2b00      	cmp	r3, #0
    8292:	d124      	bne.n	82de <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    8294:	2300      	movs	r3, #0
    8296:	56e3      	ldrsb	r3, [r4, r3]
    8298:	009b      	lsls	r3, r3, #2
    829a:	2500      	movs	r5, #0
    829c:	4a13      	ldr	r2, [pc, #76]	; (82ec <_http_client_clear_conn+0x80>)
    829e:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    82a0:	0020      	movs	r0, r4
    82a2:	306c      	adds	r0, #108	; 0x6c
    82a4:	226c      	movs	r2, #108	; 0x6c
    82a6:	2100      	movs	r1, #0
    82a8:	4f0f      	ldr	r7, [pc, #60]	; (82e8 <_http_client_clear_conn+0x7c>)
    82aa:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    82ac:	0020      	movs	r0, r4
    82ae:	30d8      	adds	r0, #216	; 0xd8
    82b0:	2210      	movs	r2, #16
    82b2:	2100      	movs	r1, #0
    82b4:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    82b6:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    82b8:	23d8      	movs	r3, #216	; 0xd8
    82ba:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    82bc:	2241      	movs	r2, #65	; 0x41
    82be:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    82c0:	2101      	movs	r1, #1
    82c2:	438b      	bics	r3, r1
    82c4:	3101      	adds	r1, #1
    82c6:	438b      	bics	r3, r1
    82c8:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    82ca:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    82cc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    82ce:	2b00      	cmp	r3, #0
    82d0:	d003      	beq.n	82da <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    82d2:	aa01      	add	r2, sp, #4
    82d4:	3102      	adds	r1, #2
    82d6:	0020      	movs	r0, r4
    82d8:	4798      	blx	r3
}
    82da:	b005      	add	sp, #20
    82dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    82de:	2000      	movs	r0, #0
    82e0:	5620      	ldrsb	r0, [r4, r0]
    82e2:	4b03      	ldr	r3, [pc, #12]	; (82f0 <_http_client_clear_conn+0x84>)
    82e4:	4798      	blx	r3
    82e6:	e7d5      	b.n	8294 <_http_client_clear_conn+0x28>
    82e8:	000117df 	.word	0x000117df
    82ec:	2000020c 	.word	0x2000020c
    82f0:	0000cca9 	.word	0x0000cca9

000082f4 <http_client_socket_resolve_handler>:
{
    82f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    82f6:	b087      	sub	sp, #28
    82f8:	9000      	str	r0, [sp, #0]
    82fa:	9101      	str	r1, [sp, #4]
    82fc:	4c17      	ldr	r4, [pc, #92]	; (835c <http_client_socket_resolve_handler+0x68>)
    82fe:	0026      	movs	r6, r4
    8300:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    8302:	4f17      	ldr	r7, [pc, #92]	; (8360 <http_client_socket_resolve_handler+0x6c>)
    8304:	e015      	b.n	8332 <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
    8306:	2302      	movs	r3, #2
    8308:	aa02      	add	r2, sp, #8
    830a:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    830c:	334e      	adds	r3, #78	; 0x4e
    830e:	5aeb      	ldrh	r3, [r5, r3]
    8310:	021a      	lsls	r2, r3, #8
    8312:	0a1b      	lsrs	r3, r3, #8
    8314:	4313      	orrs	r3, r2
    8316:	aa02      	add	r2, sp, #8
    8318:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    831a:	9b01      	ldr	r3, [sp, #4]
    831c:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    831e:	2000      	movs	r0, #0
    8320:	5628      	ldrsb	r0, [r5, r0]
    8322:	2210      	movs	r2, #16
    8324:	a902      	add	r1, sp, #8
    8326:	4b0f      	ldr	r3, [pc, #60]	; (8364 <http_client_socket_resolve_handler+0x70>)
    8328:	4798      	blx	r3
				return;
    832a:	e015      	b.n	8358 <http_client_socket_resolve_handler+0x64>
    832c:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    832e:	42b4      	cmp	r4, r6
    8330:	d012      	beq.n	8358 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
    8332:	6825      	ldr	r5, [r4, #0]
    8334:	2d00      	cmp	r5, #0
    8336:	d0f9      	beq.n	832c <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    8338:	1c69      	adds	r1, r5, #1
    833a:	9800      	ldr	r0, [sp, #0]
    833c:	47b8      	blx	r7
    833e:	2800      	cmp	r0, #0
    8340:	d1f4      	bne.n	832c <http_client_socket_resolve_handler+0x38>
    8342:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    8344:	2b01      	cmp	r3, #1
    8346:	d1f1      	bne.n	832c <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    8348:	9b01      	ldr	r3, [sp, #4]
    834a:	2b00      	cmp	r3, #0
    834c:	d1db      	bne.n	8306 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    834e:	2176      	movs	r1, #118	; 0x76
    8350:	4249      	negs	r1, r1
    8352:	0028      	movs	r0, r5
    8354:	4b04      	ldr	r3, [pc, #16]	; (8368 <http_client_socket_resolve_handler+0x74>)
    8356:	4798      	blx	r3
}
    8358:	b007      	add	sp, #28
    835a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    835c:	2000020c 	.word	0x2000020c
    8360:	00011c45 	.word	0x00011c45
    8364:	0000caed 	.word	0x0000caed
    8368:	0000826d 	.word	0x0000826d

0000836c <http_client_timer_callback>:
{
    836c:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    836e:	2a00      	cmp	r2, #0
    8370:	d004      	beq.n	837c <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    8372:	213e      	movs	r1, #62	; 0x3e
    8374:	4249      	negs	r1, r1
    8376:	0010      	movs	r0, r2
    8378:	4b01      	ldr	r3, [pc, #4]	; (8380 <http_client_timer_callback+0x14>)
    837a:	4798      	blx	r3
}
    837c:	bd10      	pop	{r4, pc}
    837e:	46c0      	nop			; (mov r8, r8)
    8380:	0000826d 	.word	0x0000826d

00008384 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    8384:	b5f0      	push	{r4, r5, r6, r7, lr}
    8386:	46de      	mov	lr, fp
    8388:	4657      	mov	r7, sl
    838a:	b580      	push	{r7, lr}
    838c:	b095      	sub	sp, #84	; 0x54
    838e:	af02      	add	r7, sp, #8
    8390:	0004      	movs	r4, r0
    8392:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    8394:	2210      	movs	r2, #16
    8396:	49b2      	ldr	r1, [pc, #712]	; (8660 <_http_client_request+0x2dc>)
    8398:	2310      	movs	r3, #16
    839a:	2008      	movs	r0, #8
    839c:	1838      	adds	r0, r7, r0
    839e:	18c0      	adds	r0, r0, r3
    83a0:	4bb0      	ldr	r3, [pc, #704]	; (8664 <_http_client_request+0x2e0>)
    83a2:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    83a4:	6e62      	ldr	r2, [r4, #100]	; 0x64
    83a6:	1dd3      	adds	r3, r2, #7
    83a8:	08db      	lsrs	r3, r3, #3
    83aa:	00db      	lsls	r3, r3, #3
    83ac:	4669      	mov	r1, sp
    83ae:	1acb      	subs	r3, r1, r3
    83b0:	469d      	mov	sp, r3
    83b2:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    83b4:	2c00      	cmp	r4, #0
    83b6:	d100      	bne.n	83ba <_http_client_request+0x36>
    83b8:	e1f1      	b.n	879e <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    83ba:	2341      	movs	r3, #65	; 0x41
    83bc:	5ce3      	ldrb	r3, [r4, r3]
    83be:	07db      	lsls	r3, r3, #31
    83c0:	d500      	bpl.n	83c4 <_http_client_request+0x40>
    83c2:	e1ec      	b.n	879e <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    83c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    83c6:	2b03      	cmp	r3, #3
    83c8:	d004      	beq.n	83d4 <_http_client_request+0x50>
    83ca:	2b04      	cmp	r3, #4
    83cc:	d100      	bne.n	83d0 <_http_client_request+0x4c>
    83ce:	e120      	b.n	8612 <_http_client_request+0x28e>
    83d0:	46dd      	mov	sp, fp
    83d2:	e1e5      	b.n	87a0 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    83d4:	2300      	movs	r3, #0
    83d6:	21cc      	movs	r1, #204	; 0xcc
    83d8:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    83da:	3104      	adds	r1, #4
    83dc:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    83de:	9400      	str	r4, [sp, #0]
    83e0:	4ba1      	ldr	r3, [pc, #644]	; (8668 <_http_client_request+0x2e4>)
    83e2:	0031      	movs	r1, r6
    83e4:	202c      	movs	r0, #44	; 0x2c
    83e6:	2508      	movs	r5, #8
    83e8:	46ac      	mov	ip, r5
    83ea:	44bc      	add	ip, r7
    83ec:	4460      	add	r0, ip
    83ee:	4d9f      	ldr	r5, [pc, #636]	; (866c <_http_client_request+0x2e8>)
    83f0:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    83f2:	23c8      	movs	r3, #200	; 0xc8
    83f4:	5ce3      	ldrb	r3, [r4, r3]
    83f6:	2b01      	cmp	r3, #1
    83f8:	d100      	bne.n	83fc <_http_client_request+0x78>
    83fa:	e0a9      	b.n	8550 <_http_client_request+0x1cc>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    83fc:	2b02      	cmp	r3, #2
    83fe:	d100      	bne.n	8402 <_http_client_request+0x7e>
    8400:	e0af      	b.n	8562 <_http_client_request+0x1de>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    8402:	2b03      	cmp	r3, #3
    8404:	d100      	bne.n	8408 <_http_client_request+0x84>
    8406:	e0b5      	b.n	8574 <_http_client_request+0x1f0>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    8408:	2b04      	cmp	r3, #4
    840a:	d100      	bne.n	840e <_http_client_request+0x8a>
    840c:	e0bb      	b.n	8586 <_http_client_request+0x202>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    840e:	2b05      	cmp	r3, #5
    8410:	d100      	bne.n	8414 <_http_client_request+0x90>
    8412:	e0c1      	b.n	8598 <_http_client_request+0x214>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    8414:	2b06      	cmp	r3, #6
    8416:	d100      	bne.n	841a <_http_client_request+0x96>
    8418:	e0c7      	b.n	85aa <_http_client_request+0x226>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    841a:	0025      	movs	r5, r4
    841c:	3570      	adds	r5, #112	; 0x70
    841e:	0028      	movs	r0, r5
    8420:	4b93      	ldr	r3, [pc, #588]	; (8670 <_http_client_request+0x2ec>)
    8422:	469a      	mov	sl, r3
    8424:	4798      	blx	r3
    8426:	0002      	movs	r2, r0
    8428:	0029      	movs	r1, r5
    842a:	232c      	movs	r3, #44	; 0x2c
    842c:	2008      	movs	r0, #8
    842e:	1838      	adds	r0, r7, r0
    8430:	18c0      	adds	r0, r0, r3
    8432:	4d90      	ldr	r5, [pc, #576]	; (8674 <_http_client_request+0x2f0>)
    8434:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    8436:	220b      	movs	r2, #11
    8438:	498f      	ldr	r1, [pc, #572]	; (8678 <_http_client_request+0x2f4>)
    843a:	232c      	movs	r3, #44	; 0x2c
    843c:	2008      	movs	r0, #8
    843e:	1838      	adds	r0, r7, r0
    8440:	18c0      	adds	r0, r0, r3
    8442:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    8444:	220c      	movs	r2, #12
    8446:	498d      	ldr	r1, [pc, #564]	; (867c <_http_client_request+0x2f8>)
    8448:	232c      	movs	r3, #44	; 0x2c
    844a:	2008      	movs	r0, #8
    844c:	1838      	adds	r0, r7, r0
    844e:	18c0      	adds	r0, r0, r3
    8450:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    8452:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    8454:	607b      	str	r3, [r7, #4]
    8456:	0018      	movs	r0, r3
    8458:	47d0      	blx	sl
    845a:	0002      	movs	r2, r0
    845c:	6879      	ldr	r1, [r7, #4]
    845e:	232c      	movs	r3, #44	; 0x2c
    8460:	2008      	movs	r0, #8
    8462:	1838      	adds	r0, r7, r0
    8464:	18c0      	adds	r0, r0, r3
    8466:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    8468:	2202      	movs	r2, #2
    846a:	4985      	ldr	r1, [pc, #532]	; (8680 <_http_client_request+0x2fc>)
    846c:	232c      	movs	r3, #44	; 0x2c
    846e:	2008      	movs	r0, #8
    8470:	1838      	adds	r0, r7, r0
    8472:	18c0      	adds	r0, r0, r3
    8474:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    8476:	2206      	movs	r2, #6
    8478:	4982      	ldr	r1, [pc, #520]	; (8684 <_http_client_request+0x300>)
    847a:	232c      	movs	r3, #44	; 0x2c
    847c:	2008      	movs	r0, #8
    847e:	1838      	adds	r0, r7, r0
    8480:	18c0      	adds	r0, r0, r3
    8482:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    8484:	1c63      	adds	r3, r4, #1
    8486:	607b      	str	r3, [r7, #4]
    8488:	0018      	movs	r0, r3
    848a:	47d0      	blx	sl
    848c:	0002      	movs	r2, r0
    848e:	6879      	ldr	r1, [r7, #4]
    8490:	232c      	movs	r3, #44	; 0x2c
    8492:	2008      	movs	r0, #8
    8494:	1838      	adds	r0, r7, r0
    8496:	18c0      	adds	r0, r0, r3
    8498:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    849a:	2202      	movs	r2, #2
    849c:	4978      	ldr	r1, [pc, #480]	; (8680 <_http_client_request+0x2fc>)
    849e:	232c      	movs	r3, #44	; 0x2c
    84a0:	2008      	movs	r0, #8
    84a2:	1838      	adds	r0, r7, r0
    84a4:	18c0      	adds	r0, r0, r3
    84a6:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    84a8:	2218      	movs	r2, #24
    84aa:	4977      	ldr	r1, [pc, #476]	; (8688 <_http_client_request+0x304>)
    84ac:	232c      	movs	r3, #44	; 0x2c
    84ae:	2008      	movs	r0, #8
    84b0:	1838      	adds	r0, r7, r0
    84b2:	18c0      	adds	r0, r0, r3
    84b4:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    84b6:	2213      	movs	r2, #19
    84b8:	4974      	ldr	r1, [pc, #464]	; (868c <_http_client_request+0x308>)
    84ba:	232c      	movs	r3, #44	; 0x2c
    84bc:	2008      	movs	r0, #8
    84be:	1838      	adds	r0, r7, r0
    84c0:	18c0      	adds	r0, r0, r3
    84c2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    84c4:	2217      	movs	r2, #23
    84c6:	4972      	ldr	r1, [pc, #456]	; (8690 <_http_client_request+0x30c>)
    84c8:	232c      	movs	r3, #44	; 0x2c
    84ca:	2008      	movs	r0, #8
    84cc:	1838      	adds	r0, r7, r0
    84ce:	18c0      	adds	r0, r0, r3
    84d0:	47a8      	blx	r5

		if (entity->read != NULL) {
    84d2:	0023      	movs	r3, r4
    84d4:	33b0      	adds	r3, #176	; 0xb0
    84d6:	68db      	ldr	r3, [r3, #12]
    84d8:	2b00      	cmp	r3, #0
    84da:	d07b      	beq.n	85d4 <_http_client_request+0x250>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    84dc:	23b0      	movs	r3, #176	; 0xb0
    84de:	5ce3      	ldrb	r3, [r4, r3]
    84e0:	2b00      	cmp	r3, #0
    84e2:	d16b      	bne.n	85bc <_http_client_request+0x238>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    84e4:	0023      	movs	r3, r4
    84e6:	33b0      	adds	r3, #176	; 0xb0
    84e8:	689b      	ldr	r3, [r3, #8]
    84ea:	2b00      	cmp	r3, #0
    84ec:	d072      	beq.n	85d4 <_http_client_request+0x250>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    84ee:	0022      	movs	r2, r4
    84f0:	32b0      	adds	r2, #176	; 0xb0
    84f2:	6950      	ldr	r0, [r2, #20]
    84f4:	4798      	blx	r3
    84f6:	23cc      	movs	r3, #204	; 0xcc
    84f8:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    84fa:	2800      	cmp	r0, #0
    84fc:	da00      	bge.n	8500 <_http_client_request+0x17c>
    84fe:	e0ac      	b.n	865a <_http_client_request+0x2d6>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    8500:	0002      	movs	r2, r0
    8502:	4964      	ldr	r1, [pc, #400]	; (8694 <_http_client_request+0x310>)
    8504:	2320      	movs	r3, #32
    8506:	2008      	movs	r0, #8
    8508:	1838      	adds	r0, r7, r0
    850a:	18c0      	adds	r0, r0, r3
    850c:	4b62      	ldr	r3, [pc, #392]	; (8698 <_http_client_request+0x314>)
    850e:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    8510:	2210      	movs	r2, #16
    8512:	4962      	ldr	r1, [pc, #392]	; (869c <_http_client_request+0x318>)
    8514:	232c      	movs	r3, #44	; 0x2c
    8516:	2008      	movs	r0, #8
    8518:	1838      	adds	r0, r7, r0
    851a:	18c0      	adds	r0, r0, r3
    851c:	4d55      	ldr	r5, [pc, #340]	; (8674 <_http_client_request+0x2f0>)
    851e:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    8520:	2320      	movs	r3, #32
    8522:	2208      	movs	r2, #8
    8524:	18ba      	adds	r2, r7, r2
    8526:	18d0      	adds	r0, r2, r3
    8528:	4b51      	ldr	r3, [pc, #324]	; (8670 <_http_client_request+0x2ec>)
    852a:	4798      	blx	r3
    852c:	0002      	movs	r2, r0
    852e:	2320      	movs	r3, #32
    8530:	2108      	movs	r1, #8
    8532:	1879      	adds	r1, r7, r1
    8534:	18c9      	adds	r1, r1, r3
    8536:	330c      	adds	r3, #12
    8538:	2008      	movs	r0, #8
    853a:	1838      	adds	r0, r7, r0
    853c:	18c0      	adds	r0, r0, r3
    853e:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    8540:	2202      	movs	r2, #2
    8542:	494f      	ldr	r1, [pc, #316]	; (8680 <_http_client_request+0x2fc>)
    8544:	232c      	movs	r3, #44	; 0x2c
    8546:	2008      	movs	r0, #8
    8548:	1838      	adds	r0, r7, r0
    854a:	18c0      	adds	r0, r0, r3
    854c:	47a8      	blx	r5
    854e:	e041      	b.n	85d4 <_http_client_request+0x250>
			stream_writer_send_buffer(&writer, "GET ", 4);
    8550:	2204      	movs	r2, #4
    8552:	4953      	ldr	r1, [pc, #332]	; (86a0 <_http_client_request+0x31c>)
    8554:	332b      	adds	r3, #43	; 0x2b
    8556:	2008      	movs	r0, #8
    8558:	1838      	adds	r0, r7, r0
    855a:	18c0      	adds	r0, r0, r3
    855c:	4b45      	ldr	r3, [pc, #276]	; (8674 <_http_client_request+0x2f0>)
    855e:	4798      	blx	r3
    8560:	e75b      	b.n	841a <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "POST ", 5);
    8562:	2205      	movs	r2, #5
    8564:	494f      	ldr	r1, [pc, #316]	; (86a4 <_http_client_request+0x320>)
    8566:	332a      	adds	r3, #42	; 0x2a
    8568:	2008      	movs	r0, #8
    856a:	1838      	adds	r0, r7, r0
    856c:	18c0      	adds	r0, r0, r3
    856e:	4b41      	ldr	r3, [pc, #260]	; (8674 <_http_client_request+0x2f0>)
    8570:	4798      	blx	r3
    8572:	e752      	b.n	841a <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    8574:	2207      	movs	r2, #7
    8576:	494c      	ldr	r1, [pc, #304]	; (86a8 <_http_client_request+0x324>)
    8578:	3329      	adds	r3, #41	; 0x29
    857a:	2008      	movs	r0, #8
    857c:	1838      	adds	r0, r7, r0
    857e:	18c0      	adds	r0, r0, r3
    8580:	4b3c      	ldr	r3, [pc, #240]	; (8674 <_http_client_request+0x2f0>)
    8582:	4798      	blx	r3
    8584:	e749      	b.n	841a <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    8586:	2204      	movs	r2, #4
    8588:	4948      	ldr	r1, [pc, #288]	; (86ac <_http_client_request+0x328>)
    858a:	3328      	adds	r3, #40	; 0x28
    858c:	2008      	movs	r0, #8
    858e:	1838      	adds	r0, r7, r0
    8590:	18c0      	adds	r0, r0, r3
    8592:	4b38      	ldr	r3, [pc, #224]	; (8674 <_http_client_request+0x2f0>)
    8594:	4798      	blx	r3
    8596:	e740      	b.n	841a <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    8598:	2208      	movs	r2, #8
    859a:	4945      	ldr	r1, [pc, #276]	; (86b0 <_http_client_request+0x32c>)
    859c:	3327      	adds	r3, #39	; 0x27
    859e:	2008      	movs	r0, #8
    85a0:	1838      	adds	r0, r7, r0
    85a2:	18c0      	adds	r0, r0, r3
    85a4:	4b33      	ldr	r3, [pc, #204]	; (8674 <_http_client_request+0x2f0>)
    85a6:	4798      	blx	r3
    85a8:	e737      	b.n	841a <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    85aa:	2205      	movs	r2, #5
    85ac:	4941      	ldr	r1, [pc, #260]	; (86b4 <_http_client_request+0x330>)
    85ae:	3326      	adds	r3, #38	; 0x26
    85b0:	2008      	movs	r0, #8
    85b2:	1838      	adds	r0, r7, r0
    85b4:	18c0      	adds	r0, r0, r3
    85b6:	4b2f      	ldr	r3, [pc, #188]	; (8674 <_http_client_request+0x2f0>)
    85b8:	4798      	blx	r3
    85ba:	e72e      	b.n	841a <_http_client_request+0x96>
				module->req.content_length = -1;
    85bc:	2201      	movs	r2, #1
    85be:	4252      	negs	r2, r2
    85c0:	23cc      	movs	r3, #204	; 0xcc
    85c2:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    85c4:	321d      	adds	r2, #29
    85c6:	493c      	ldr	r1, [pc, #240]	; (86b8 <_http_client_request+0x334>)
    85c8:	3ba0      	subs	r3, #160	; 0xa0
    85ca:	2008      	movs	r0, #8
    85cc:	1838      	adds	r0, r7, r0
    85ce:	18c0      	adds	r0, r0, r3
    85d0:	4b28      	ldr	r3, [pc, #160]	; (8674 <_http_client_request+0x2f0>)
    85d2:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    85d4:	23d4      	movs	r3, #212	; 0xd4
    85d6:	58e5      	ldr	r5, [r4, r3]
    85d8:	2d00      	cmp	r5, #0
    85da:	d00a      	beq.n	85f2 <_http_client_request+0x26e>
			stream_writer_send_buffer(&writer,
    85dc:	0028      	movs	r0, r5
    85de:	4b24      	ldr	r3, [pc, #144]	; (8670 <_http_client_request+0x2ec>)
    85e0:	4798      	blx	r3
    85e2:	0002      	movs	r2, r0
    85e4:	0029      	movs	r1, r5
    85e6:	232c      	movs	r3, #44	; 0x2c
    85e8:	2008      	movs	r0, #8
    85ea:	1838      	adds	r0, r7, r0
    85ec:	18c0      	adds	r0, r0, r3
    85ee:	4b21      	ldr	r3, [pc, #132]	; (8674 <_http_client_request+0x2f0>)
    85f0:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    85f2:	2202      	movs	r2, #2
    85f4:	4922      	ldr	r1, [pc, #136]	; (8680 <_http_client_request+0x2fc>)
    85f6:	232c      	movs	r3, #44	; 0x2c
    85f8:	2008      	movs	r0, #8
    85fa:	1838      	adds	r0, r7, r0
    85fc:	18c0      	adds	r0, r0, r3
    85fe:	4b1d      	ldr	r3, [pc, #116]	; (8674 <_http_client_request+0x2f0>)
    8600:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    8602:	232c      	movs	r3, #44	; 0x2c
    8604:	2208      	movs	r2, #8
    8606:	18ba      	adds	r2, r7, r2
    8608:	18d0      	adds	r0, r2, r3
    860a:	4b2c      	ldr	r3, [pc, #176]	; (86bc <_http_client_request+0x338>)
    860c:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    860e:	2304      	movs	r3, #4
    8610:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    8612:	23cc      	movs	r3, #204	; 0xcc
    8614:	58e2      	ldr	r2, [r4, r3]
    8616:	2a00      	cmp	r2, #0
    8618:	db52      	blt.n	86c0 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    861a:	dc00      	bgt.n	861e <_http_client_request+0x29a>
    861c:	e0f1      	b.n	8802 <_http_client_request+0x47e>
    861e:	0023      	movs	r3, r4
    8620:	33b0      	adds	r3, #176	; 0xb0
    8622:	68dd      	ldr	r5, [r3, #12]
    8624:	2d00      	cmp	r5, #0
    8626:	d100      	bne.n	862a <_http_client_request+0x2a6>
    8628:	e0eb      	b.n	8802 <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    862a:	23d0      	movs	r3, #208	; 0xd0
    862c:	58e3      	ldr	r3, [r4, r3]
    862e:	429a      	cmp	r2, r3
    8630:	dd00      	ble.n	8634 <_http_client_request+0x2b0>
    8632:	e0bb      	b.n	87ac <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    8634:	23c0      	movs	r3, #192	; 0xc0
    8636:	58e3      	ldr	r3, [r4, r3]
    8638:	2b00      	cmp	r3, #0
    863a:	d002      	beq.n	8642 <_http_client_request+0x2be>
					module->req.entity.close(module->req.entity.priv_data);
    863c:	22c4      	movs	r2, #196	; 0xc4
    863e:	58a0      	ldr	r0, [r4, r2]
    8640:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    8642:	2302      	movs	r3, #2
    8644:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    8646:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8648:	2b00      	cmp	r3, #0
    864a:	d100      	bne.n	864e <_http_client_request+0x2ca>
    864c:	e6c0      	b.n	83d0 <_http_client_request+0x4c>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    864e:	220c      	movs	r2, #12
    8650:	18ba      	adds	r2, r7, r2
    8652:	2101      	movs	r1, #1
    8654:	0020      	movs	r0, r4
    8656:	4798      	blx	r3
    8658:	e6ba      	b.n	83d0 <_http_client_request+0x4c>
					module->req.content_length = 0;
    865a:	2200      	movs	r2, #0
    865c:	50e2      	str	r2, [r4, r3]
    865e:	e7b9      	b.n	85d4 <_http_client_request+0x250>
    8660:	00012f6c 	.word	0x00012f6c
    8664:	000117a9 	.word	0x000117a9
    8668:	00008115 	.word	0x00008115
    866c:	000090e1 	.word	0x000090e1
    8670:	00011ca3 	.word	0x00011ca3
    8674:	0000914d 	.word	0x0000914d
    8678:	00012fe0 	.word	0x00012fe0
    867c:	00012fec 	.word	0x00012fec
    8680:	000143fc 	.word	0x000143fc
    8684:	00012ffc 	.word	0x00012ffc
    8688:	00013004 	.word	0x00013004
    868c:	00013020 	.word	0x00013020
    8690:	00013034 	.word	0x00013034
    8694:	0001306c 	.word	0x0001306c
    8698:	00011c01 	.word	0x00011c01
    869c:	00013070 	.word	0x00013070
    86a0:	00012fac 	.word	0x00012fac
    86a4:	00012fb4 	.word	0x00012fb4
    86a8:	00012fbc 	.word	0x00012fbc
    86ac:	00012fc4 	.word	0x00012fc4
    86b0:	00012fcc 	.word	0x00012fcc
    86b4:	00012fd8 	.word	0x00012fd8
    86b8:	0001304c 	.word	0x0001304c
    86bc:	000090f1 	.word	0x000090f1
		if (module->req.content_length < 0 && entity->read) {
    86c0:	0023      	movs	r3, r4
    86c2:	33b0      	adds	r3, #176	; 0xb0
    86c4:	68dd      	ldr	r5, [r3, #12]
    86c6:	2d00      	cmp	r5, #0
    86c8:	d100      	bne.n	86cc <_http_client_request+0x348>
    86ca:	e09a      	b.n	8802 <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    86cc:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    86ce:	58e3      	ldr	r3, [r4, r3]
    86d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
    86d2:	3a07      	subs	r2, #7
    86d4:	1d71      	adds	r1, r6, #5
    86d6:	0020      	movs	r0, r4
    86d8:	30b0      	adds	r0, #176	; 0xb0
    86da:	6940      	ldr	r0, [r0, #20]
    86dc:	47a8      	blx	r5
    86de:	0005      	movs	r5, r0
    86e0:	43c3      	mvns	r3, r0
    86e2:	17db      	asrs	r3, r3, #31
    86e4:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    86e6:	220a      	movs	r2, #10
    86e8:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    86ea:	210d      	movs	r1, #13
    86ec:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    86ee:	1973      	adds	r3, r6, r5
    86f0:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    86f2:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    86f4:	230f      	movs	r3, #15
    86f6:	402b      	ands	r3, r5
    86f8:	3206      	adds	r2, #6
    86fa:	3905      	subs	r1, #5
    86fc:	468c      	mov	ip, r1
    86fe:	44bc      	add	ip, r7
    8700:	4462      	add	r2, ip
    8702:	5cd3      	ldrb	r3, [r2, r3]
    8704:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    8706:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    8708:	2d0f      	cmp	r5, #15
    870a:	dd0d      	ble.n	8728 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    870c:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    870e:	17eb      	asrs	r3, r5, #31
    8710:	220f      	movs	r2, #15
    8712:	4013      	ands	r3, r2
    8714:	195b      	adds	r3, r3, r5
    8716:	111b      	asrs	r3, r3, #4
    8718:	4013      	ands	r3, r2
    871a:	3201      	adds	r2, #1
    871c:	2008      	movs	r0, #8
    871e:	4684      	mov	ip, r0
    8720:	44bc      	add	ip, r7
    8722:	4462      	add	r2, ip
    8724:	5cd3      	ldrb	r3, [r2, r3]
    8726:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    8728:	2dff      	cmp	r5, #255	; 0xff
    872a:	dd0d      	ble.n	8748 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    872c:	17ea      	asrs	r2, r5, #31
    872e:	23ff      	movs	r3, #255	; 0xff
    8730:	4013      	ands	r3, r2
    8732:	195b      	adds	r3, r3, r5
    8734:	051b      	lsls	r3, r3, #20
    8736:	0f1b      	lsrs	r3, r3, #28
    8738:	2210      	movs	r2, #16
    873a:	2108      	movs	r1, #8
    873c:	468c      	mov	ip, r1
    873e:	44bc      	add	ip, r7
    8740:	4462      	add	r2, ip
    8742:	5cd3      	ldrb	r3, [r2, r3]
    8744:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    8746:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    8748:	1cca      	adds	r2, r1, #3
    874a:	1b92      	subs	r2, r2, r6
    874c:	1d2b      	adds	r3, r5, #4
    874e:	18d2      	adds	r2, r2, r3
    8750:	b292      	uxth	r2, r2
    8752:	2000      	movs	r0, #0
    8754:	5620      	ldrsb	r0, [r4, r0]
    8756:	2300      	movs	r3, #0
    8758:	4e30      	ldr	r6, [pc, #192]	; (881c <_http_client_request+0x498>)
    875a:	47b0      	blx	r6
    875c:	2800      	cmp	r0, #0
    875e:	db19      	blt.n	8794 <_http_client_request+0x410>
			module->req.sent_length += size;
    8760:	22d0      	movs	r2, #208	; 0xd0
    8762:	58a3      	ldr	r3, [r4, r2]
    8764:	195b      	adds	r3, r3, r5
    8766:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    8768:	2d00      	cmp	r5, #0
    876a:	d000      	beq.n	876e <_http_client_request+0x3ea>
    876c:	e630      	b.n	83d0 <_http_client_request+0x4c>
				if (module->req.entity.close) {
    876e:	23c0      	movs	r3, #192	; 0xc0
    8770:	58e3      	ldr	r3, [r4, r3]
    8772:	2b00      	cmp	r3, #0
    8774:	d002      	beq.n	877c <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    8776:	3a0c      	subs	r2, #12
    8778:	58a0      	ldr	r0, [r4, r2]
    877a:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    877c:	2302      	movs	r3, #2
    877e:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    8780:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8782:	2b00      	cmp	r3, #0
    8784:	d100      	bne.n	8788 <_http_client_request+0x404>
    8786:	e623      	b.n	83d0 <_http_client_request+0x4c>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    8788:	220c      	movs	r2, #12
    878a:	18ba      	adds	r2, r7, r2
    878c:	2101      	movs	r1, #1
    878e:	0020      	movs	r0, r4
    8790:	4798      	blx	r3
    8792:	e61d      	b.n	83d0 <_http_client_request+0x4c>
				_http_client_clear_conn(module, -EIO);
    8794:	2105      	movs	r1, #5
    8796:	4249      	negs	r1, r1
    8798:	0020      	movs	r0, r4
    879a:	4b21      	ldr	r3, [pc, #132]	; (8820 <_http_client_request+0x49c>)
    879c:	4798      	blx	r3
    879e:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    87a0:	46bd      	mov	sp, r7
    87a2:	b013      	add	sp, #76	; 0x4c
    87a4:	bc0c      	pop	{r2, r3}
    87a6:	4692      	mov	sl, r2
    87a8:	469b      	mov	fp, r3
    87aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    87ac:	0022      	movs	r2, r4
    87ae:	32b0      	adds	r2, #176	; 0xb0
    87b0:	6950      	ldr	r0, [r2, #20]
    87b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
    87b4:	0031      	movs	r1, r6
    87b6:	47a8      	blx	r5
			if (size < 0) {
    87b8:	2800      	cmp	r0, #0
    87ba:	db16      	blt.n	87ea <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    87bc:	23cc      	movs	r3, #204	; 0xcc
    87be:	58e5      	ldr	r5, [r4, r3]
    87c0:	3304      	adds	r3, #4
    87c2:	58e3      	ldr	r3, [r4, r3]
    87c4:	1aed      	subs	r5, r5, r3
    87c6:	4285      	cmp	r5, r0
    87c8:	dd00      	ble.n	87cc <_http_client_request+0x448>
    87ca:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    87cc:	b2aa      	uxth	r2, r5
    87ce:	2000      	movs	r0, #0
    87d0:	5620      	ldrsb	r0, [r4, r0]
    87d2:	2300      	movs	r3, #0
    87d4:	0031      	movs	r1, r6
    87d6:	4e11      	ldr	r6, [pc, #68]	; (881c <_http_client_request+0x498>)
    87d8:	47b0      	blx	r6
    87da:	2800      	cmp	r0, #0
    87dc:	db0b      	blt.n	87f6 <_http_client_request+0x472>
				module->req.sent_length += size;
    87de:	23d0      	movs	r3, #208	; 0xd0
    87e0:	58e2      	ldr	r2, [r4, r3]
    87e2:	4694      	mov	ip, r2
    87e4:	4465      	add	r5, ip
    87e6:	50e5      	str	r5, [r4, r3]
    87e8:	e5f2      	b.n	83d0 <_http_client_request+0x4c>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    87ea:	2105      	movs	r1, #5
    87ec:	4249      	negs	r1, r1
    87ee:	0020      	movs	r0, r4
    87f0:	4b0b      	ldr	r3, [pc, #44]	; (8820 <_http_client_request+0x49c>)
    87f2:	4798      	blx	r3
    87f4:	e5ec      	b.n	83d0 <_http_client_request+0x4c>
					_http_client_clear_conn(module, -EIO);
    87f6:	2105      	movs	r1, #5
    87f8:	4249      	negs	r1, r1
    87fa:	0020      	movs	r0, r4
    87fc:	4b08      	ldr	r3, [pc, #32]	; (8820 <_http_client_request+0x49c>)
    87fe:	4798      	blx	r3
					return;
    8800:	e7cd      	b.n	879e <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    8802:	2302      	movs	r3, #2
    8804:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    8806:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8808:	2b00      	cmp	r3, #0
    880a:	d100      	bne.n	880e <_http_client_request+0x48a>
    880c:	e5e0      	b.n	83d0 <_http_client_request+0x4c>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    880e:	220c      	movs	r2, #12
    8810:	18ba      	adds	r2, r7, r2
    8812:	2101      	movs	r1, #1
    8814:	0020      	movs	r0, r4
    8816:	4798      	blx	r3
    8818:	e5da      	b.n	83d0 <_http_client_request+0x4c>
    881a:	46c0      	nop			; (mov r8, r8)
    881c:	0000cb7d 	.word	0x0000cb7d
    8820:	0000826d 	.word	0x0000826d

00008824 <http_client_send_request>:
{
    8824:	b5f0      	push	{r4, r5, r6, r7, lr}
    8826:	46d6      	mov	lr, sl
    8828:	b500      	push	{lr}
    882a:	b088      	sub	sp, #32
    882c:	0004      	movs	r4, r0
    882e:	000f      	movs	r7, r1
    8830:	4692      	mov	sl, r2
    8832:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    8834:	2800      	cmp	r0, #0
    8836:	d100      	bne.n	883a <http_client_send_request+0x16>
    8838:	e0d3      	b.n	89e2 <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    883a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    883c:	2b02      	cmp	r3, #2
    883e:	d900      	bls.n	8842 <http_client_send_request+0x1e>
    8840:	e0d3      	b.n	89ea <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    8842:	2207      	movs	r2, #7
    8844:	4981      	ldr	r1, [pc, #516]	; (8a4c <http_client_send_request+0x228>)
    8846:	0038      	movs	r0, r7
    8848:	4b81      	ldr	r3, [pc, #516]	; (8a50 <http_client_send_request+0x22c>)
    884a:	4798      	blx	r3
		i = 7;
    884c:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    884e:	2800      	cmp	r0, #0
    8850:	d007      	beq.n	8862 <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    8852:	2208      	movs	r2, #8
    8854:	497f      	ldr	r1, [pc, #508]	; (8a54 <http_client_send_request+0x230>)
    8856:	0038      	movs	r0, r7
    8858:	4b7d      	ldr	r3, [pc, #500]	; (8a50 <http_client_send_request+0x22c>)
    885a:	4798      	blx	r3
		i = 8;
    885c:	4246      	negs	r6, r0
    885e:	4146      	adcs	r6, r0
    8860:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    8862:	1c63      	adds	r3, r4, #1
    8864:	19bd      	adds	r5, r7, r6
    8866:	9302      	str	r3, [sp, #8]
    8868:	0018      	movs	r0, r3
    886a:	4b7b      	ldr	r3, [pc, #492]	; (8a58 <http_client_send_request+0x234>)
    886c:	4798      	blx	r3
    886e:	0002      	movs	r2, r0
    8870:	0029      	movs	r1, r5
    8872:	9802      	ldr	r0, [sp, #8]
    8874:	4b76      	ldr	r3, [pc, #472]	; (8a50 <http_client_send_request+0x22c>)
    8876:	4798      	blx	r3
    8878:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    887a:	782b      	ldrb	r3, [r5, #0]
    887c:	2b00      	cmp	r3, #0
    887e:	d052      	beq.n	8926 <http_client_send_request+0x102>
    8880:	2b2f      	cmp	r3, #47	; 0x2f
    8882:	d052      	beq.n	892a <http_client_send_request+0x106>
    8884:	1c71      	adds	r1, r6, #1
    8886:	1879      	adds	r1, r7, r1
    8888:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    888a:	3201      	adds	r2, #1
    888c:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    888e:	000d      	movs	r5, r1
    8890:	780b      	ldrb	r3, [r1, #0]
    8892:	2b00      	cmp	r3, #0
    8894:	d002      	beq.n	889c <http_client_send_request+0x78>
    8896:	3101      	adds	r1, #1
    8898:	2b2f      	cmp	r3, #47	; 0x2f
    889a:	d1f6      	bne.n	888a <http_client_send_request+0x66>
	module->host[j] = '\0';
    889c:	18a2      	adds	r2, r4, r2
    889e:	2300      	movs	r3, #0
    88a0:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    88a2:	7863      	ldrb	r3, [r4, #1]
    88a4:	2b00      	cmp	r3, #0
    88a6:	d100      	bne.n	88aa <http_client_send_request+0x86>
    88a8:	e0a3      	b.n	89f2 <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    88aa:	0028      	movs	r0, r5
    88ac:	4b6a      	ldr	r3, [pc, #424]	; (8a58 <http_client_send_request+0x234>)
    88ae:	4798      	blx	r3
    88b0:	283f      	cmp	r0, #63	; 0x3f
    88b2:	d900      	bls.n	88b6 <http_client_send_request+0x92>
    88b4:	e0a1      	b.n	89fa <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    88b6:	23d4      	movs	r3, #212	; 0xd4
    88b8:	58e0      	ldr	r0, [r4, r3]
    88ba:	2800      	cmp	r0, #0
    88bc:	d001      	beq.n	88c2 <http_client_send_request+0x9e>
		free(module->req.ext_header);
    88be:	4b67      	ldr	r3, [pc, #412]	; (8a5c <http_client_send_request+0x238>)
    88c0:	4798      	blx	r3
	if (ext_header != NULL) {
    88c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    88c4:	2b00      	cmp	r3, #0
    88c6:	d032      	beq.n	892e <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    88c8:	0018      	movs	r0, r3
    88ca:	4b65      	ldr	r3, [pc, #404]	; (8a60 <http_client_send_request+0x23c>)
    88cc:	4798      	blx	r3
    88ce:	23d4      	movs	r3, #212	; 0xd4
    88d0:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    88d2:	2800      	cmp	r0, #0
    88d4:	d100      	bne.n	88d8 <http_client_send_request+0xb4>
    88d6:	e094      	b.n	8a02 <http_client_send_request+0x1de>
	module->sending = 0;
    88d8:	2241      	movs	r2, #65	; 0x41
    88da:	5ca3      	ldrb	r3, [r4, r2]
    88dc:	2101      	movs	r1, #1
    88de:	438b      	bics	r3, r1
    88e0:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    88e2:	2300      	movs	r3, #0
    88e4:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    88e6:	782b      	ldrb	r3, [r5, #0]
    88e8:	2b2f      	cmp	r3, #47	; 0x2f
    88ea:	d024      	beq.n	8936 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    88ec:	222f      	movs	r2, #47	; 0x2f
    88ee:	2370      	movs	r3, #112	; 0x70
    88f0:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    88f2:	782b      	ldrb	r3, [r5, #0]
    88f4:	2b00      	cmp	r3, #0
    88f6:	d124      	bne.n	8942 <http_client_send_request+0x11e>
	if (entity != NULL) {
    88f8:	9b03      	ldr	r3, [sp, #12]
    88fa:	2b00      	cmp	r3, #0
    88fc:	d027      	beq.n	894e <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    88fe:	0020      	movs	r0, r4
    8900:	30b0      	adds	r0, #176	; 0xb0
    8902:	2218      	movs	r2, #24
    8904:	0019      	movs	r1, r3
    8906:	4b57      	ldr	r3, [pc, #348]	; (8a64 <http_client_send_request+0x240>)
    8908:	4798      	blx	r3
	module->req.method = method;
    890a:	23c8      	movs	r3, #200	; 0xc8
    890c:	4652      	mov	r2, sl
    890e:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    8910:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    8912:	2b01      	cmp	r3, #1
    8914:	d022      	beq.n	895c <http_client_send_request+0x138>
    8916:	2b00      	cmp	r3, #0
    8918:	d027      	beq.n	896a <http_client_send_request+0x146>
    891a:	2b02      	cmp	r3, #2
    891c:	d03a      	beq.n	8994 <http_client_send_request+0x170>
		return -EAGAIN;
    891e:	230b      	movs	r3, #11
    8920:	425b      	negs	r3, r3
    8922:	9301      	str	r3, [sp, #4]
    8924:	e08d      	b.n	8a42 <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    8926:	2200      	movs	r2, #0
    8928:	e7b8      	b.n	889c <http_client_send_request+0x78>
    892a:	2200      	movs	r2, #0
    892c:	e7b6      	b.n	889c <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    892e:	2200      	movs	r2, #0
    8930:	23d4      	movs	r3, #212	; 0xd4
    8932:	50e2      	str	r2, [r4, r3]
    8934:	e7d0      	b.n	88d8 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    8936:	0020      	movs	r0, r4
    8938:	3070      	adds	r0, #112	; 0x70
    893a:	0029      	movs	r1, r5
    893c:	4b4a      	ldr	r3, [pc, #296]	; (8a68 <http_client_send_request+0x244>)
    893e:	4798      	blx	r3
    8940:	e7da      	b.n	88f8 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    8942:	0029      	movs	r1, r5
    8944:	0020      	movs	r0, r4
    8946:	3071      	adds	r0, #113	; 0x71
    8948:	4b47      	ldr	r3, [pc, #284]	; (8a68 <http_client_send_request+0x244>)
    894a:	4798      	blx	r3
    894c:	e7d4      	b.n	88f8 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    894e:	0020      	movs	r0, r4
    8950:	30b0      	adds	r0, #176	; 0xb0
    8952:	2218      	movs	r2, #24
    8954:	2100      	movs	r1, #0
    8956:	4b45      	ldr	r3, [pc, #276]	; (8a6c <http_client_send_request+0x248>)
    8958:	4798      	blx	r3
    895a:	e7d6      	b.n	890a <http_client_send_request+0xe6>
		if (!reconnect) {
    895c:	9b01      	ldr	r3, [sp, #4]
    895e:	2b00      	cmp	r3, #0
    8960:	d06f      	beq.n	8a42 <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    8962:	2100      	movs	r1, #0
    8964:	0020      	movs	r0, r4
    8966:	4b42      	ldr	r3, [pc, #264]	; (8a70 <http_client_send_request+0x24c>)
    8968:	4798      	blx	r3
		if (module->config.tls) {
    896a:	2352      	movs	r3, #82	; 0x52
    896c:	5ce2      	ldrb	r2, [r4, r3]
    896e:	1e53      	subs	r3, r2, #1
    8970:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    8972:	b2d2      	uxtb	r2, r2
    8974:	2101      	movs	r1, #1
    8976:	2002      	movs	r0, #2
    8978:	4b3e      	ldr	r3, [pc, #248]	; (8a74 <http_client_send_request+0x250>)
    897a:	4798      	blx	r3
    897c:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    897e:	2800      	cmp	r0, #0
    8980:	db43      	blt.n	8a0a <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    8982:	0080      	lsls	r0, r0, #2
    8984:	4b3c      	ldr	r3, [pc, #240]	; (8a78 <http_client_send_request+0x254>)
    8986:	50c4      	str	r4, [r0, r3]
    8988:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    898a:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    898c:	2620      	movs	r6, #32
			isv6 = 1;
    898e:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    8990:	2730      	movs	r7, #48	; 0x30
    8992:	e00c      	b.n	89ae <http_client_send_request+0x18a>
		if (!reconnect) {
    8994:	9b01      	ldr	r3, [sp, #4]
    8996:	2b00      	cmp	r3, #0
    8998:	d1e3      	bne.n	8962 <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    899a:	3303      	adds	r3, #3
    899c:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    899e:	0020      	movs	r0, r4
    89a0:	4b36      	ldr	r3, [pc, #216]	; (8a7c <http_client_send_request+0x258>)
    89a2:	4798      	blx	r3
			break;
    89a4:	e04d      	b.n	8a42 <http_client_send_request+0x21e>
			if (isv6) {
    89a6:	2900      	cmp	r1, #0
    89a8:	d001      	beq.n	89ae <http_client_send_request+0x18a>
    89aa:	e012      	b.n	89d2 <http_client_send_request+0x1ae>
			isv6 = 1;
    89ac:	0001      	movs	r1, r0
	while (*host != '\0') {
    89ae:	782a      	ldrb	r2, [r5, #0]
    89b0:	2a00      	cmp	r2, #0
    89b2:	d02e      	beq.n	8a12 <http_client_send_request+0x1ee>
		ch = *host++;
    89b4:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    89b6:	0013      	movs	r3, r2
    89b8:	43b3      	bics	r3, r6
    89ba:	3b41      	subs	r3, #65	; 0x41
    89bc:	2b05      	cmp	r3, #5
    89be:	d9f5      	bls.n	89ac <http_client_send_request+0x188>
    89c0:	2a3a      	cmp	r2, #58	; 0x3a
    89c2:	d00a      	beq.n	89da <http_client_send_request+0x1b6>
    89c4:	2a2f      	cmp	r2, #47	; 0x2f
    89c6:	d00a      	beq.n	89de <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    89c8:	2a2e      	cmp	r2, #46	; 0x2e
    89ca:	d0ec      	beq.n	89a6 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    89cc:	403a      	ands	r2, r7
    89ce:	2a30      	cmp	r2, #48	; 0x30
    89d0:	d0ed      	beq.n	89ae <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    89d2:	9802      	ldr	r0, [sp, #8]
    89d4:	4b2a      	ldr	r3, [pc, #168]	; (8a80 <http_client_send_request+0x25c>)
    89d6:	4798      	blx	r3
    89d8:	e02f      	b.n	8a3a <http_client_send_request+0x216>
			isv6 = 1;
    89da:	0001      	movs	r1, r0
    89dc:	e7e7      	b.n	89ae <http_client_send_request+0x18a>
    89de:	0001      	movs	r1, r0
    89e0:	e7e5      	b.n	89ae <http_client_send_request+0x18a>
		return -EINVAL;
    89e2:	2316      	movs	r3, #22
    89e4:	425b      	negs	r3, r3
    89e6:	9301      	str	r3, [sp, #4]
    89e8:	e02b      	b.n	8a42 <http_client_send_request+0x21e>
		return -EBUSY;
    89ea:	2310      	movs	r3, #16
    89ec:	425b      	negs	r3, r3
    89ee:	9301      	str	r3, [sp, #4]
    89f0:	e027      	b.n	8a42 <http_client_send_request+0x21e>
		return -EINVAL;
    89f2:	2316      	movs	r3, #22
    89f4:	425b      	negs	r3, r3
    89f6:	9301      	str	r3, [sp, #4]
    89f8:	e023      	b.n	8a42 <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    89fa:	235b      	movs	r3, #91	; 0x5b
    89fc:	425b      	negs	r3, r3
    89fe:	9301      	str	r3, [sp, #4]
    8a00:	e01f      	b.n	8a42 <http_client_send_request+0x21e>
			return -ENOMEM;
    8a02:	230c      	movs	r3, #12
    8a04:	425b      	negs	r3, r3
    8a06:	9301      	str	r3, [sp, #4]
    8a08:	e01b      	b.n	8a42 <http_client_send_request+0x21e>
			return -ENOSPC;
    8a0a:	231c      	movs	r3, #28
    8a0c:	425b      	negs	r3, r3
    8a0e:	9301      	str	r3, [sp, #4]
    8a10:	e017      	b.n	8a42 <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    8a12:	2302      	movs	r3, #2
    8a14:	aa04      	add	r2, sp, #16
    8a16:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    8a18:	334e      	adds	r3, #78	; 0x4e
    8a1a:	5ae3      	ldrh	r3, [r4, r3]
    8a1c:	021a      	lsls	r2, r3, #8
    8a1e:	0a1b      	lsrs	r3, r3, #8
    8a20:	4313      	orrs	r3, r2
    8a22:	aa04      	add	r2, sp, #16
    8a24:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    8a26:	9802      	ldr	r0, [sp, #8]
    8a28:	4b16      	ldr	r3, [pc, #88]	; (8a84 <http_client_send_request+0x260>)
    8a2a:	4798      	blx	r3
    8a2c:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    8a2e:	2000      	movs	r0, #0
    8a30:	5620      	ldrsb	r0, [r4, r0]
    8a32:	2210      	movs	r2, #16
    8a34:	a904      	add	r1, sp, #16
    8a36:	4b14      	ldr	r3, [pc, #80]	; (8a88 <http_client_send_request+0x264>)
    8a38:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    8a3a:	2301      	movs	r3, #1
    8a3c:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    8a3e:	2300      	movs	r3, #0
    8a40:	9301      	str	r3, [sp, #4]
}
    8a42:	9801      	ldr	r0, [sp, #4]
    8a44:	b008      	add	sp, #32
    8a46:	bc04      	pop	{r2}
    8a48:	4692      	mov	sl, r2
    8a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a4c:	00013090 	.word	0x00013090
    8a50:	00011cb1 	.word	0x00011cb1
    8a54:	00013098 	.word	0x00013098
    8a58:	00011ca3 	.word	0x00011ca3
    8a5c:	00011795 	.word	0x00011795
    8a60:	00011c69 	.word	0x00011c69
    8a64:	000117a9 	.word	0x000117a9
    8a68:	00011c59 	.word	0x00011c59
    8a6c:	000117df 	.word	0x000117df
    8a70:	0000826d 	.word	0x0000826d
    8a74:	0000c969 	.word	0x0000c969
    8a78:	2000020c 	.word	0x2000020c
    8a7c:	00008385 	.word	0x00008385
    8a80:	0000cdb1 	.word	0x0000cdb1
    8a84:	0000cd45 	.word	0x0000cd45
    8a88:	0000caed 	.word	0x0000caed

00008a8c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    8a8c:	b510      	push	{r4, lr}
	if (module == NULL) {
    8a8e:	2800      	cmp	r0, #0
    8a90:	d00d      	beq.n	8aae <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    8a92:	6c41      	ldr	r1, [r0, #68]	; 0x44
    8a94:	6e02      	ldr	r2, [r0, #96]	; 0x60
    8a96:	4291      	cmp	r1, r2
    8a98:	d20a      	bcs.n	8ab0 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    8a9a:	1a52      	subs	r2, r2, r1
    8a9c:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    8a9e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    8aa0:	469c      	mov	ip, r3
    8aa2:	4461      	add	r1, ip
	recv(module->sock,
    8aa4:	7800      	ldrb	r0, [r0, #0]
    8aa6:	b240      	sxtb	r0, r0
    8aa8:	2300      	movs	r3, #0
    8aaa:	4c04      	ldr	r4, [pc, #16]	; (8abc <_http_client_recv_packet+0x30>)
    8aac:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    8aae:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    8ab0:	218b      	movs	r1, #139	; 0x8b
    8ab2:	4249      	negs	r1, r1
    8ab4:	4b02      	ldr	r3, [pc, #8]	; (8ac0 <_http_client_recv_packet+0x34>)
    8ab6:	4798      	blx	r3
		return;
    8ab8:	e7f9      	b.n	8aae <_http_client_recv_packet+0x22>
    8aba:	46c0      	nop			; (mov r8, r8)
    8abc:	0000cc15 	.word	0x0000cc15
    8ac0:	0000826d 	.word	0x0000826d

00008ac4 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    8ac4:	b570      	push	{r4, r5, r6, lr}
    8ac6:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    8ac8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    8aca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    8acc:	1a5c      	subs	r4, r3, r1
    8ace:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    8ad0:	2c00      	cmp	r4, #0
    8ad2:	dc02      	bgt.n	8ada <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    8ad4:	2300      	movs	r3, #0
    8ad6:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    8ad8:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    8ada:	0022      	movs	r2, r4
    8adc:	4b01      	ldr	r3, [pc, #4]	; (8ae4 <_http_client_move_buffer+0x20>)
    8ade:	4798      	blx	r3
		module->recved_size = remain;
    8ae0:	646c      	str	r4, [r5, #68]	; 0x44
    8ae2:	e7f9      	b.n	8ad8 <_http_client_move_buffer+0x14>
    8ae4:	000117bb 	.word	0x000117bb

00008ae8 <_http_client_handle_header>:
{
    8ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8aea:	46ce      	mov	lr, r9
    8aec:	b500      	push	{lr}
    8aee:	b084      	sub	sp, #16
    8af0:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
    8af2:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    8af4:	4b62      	ldr	r3, [pc, #392]	; (8c80 <_http_client_handle_header+0x198>)
    8af6:	4699      	mov	r9, r3
    8af8:	e049      	b.n	8b8e <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
    8afa:	0021      	movs	r1, r4
    8afc:	0038      	movs	r0, r7
    8afe:	4b61      	ldr	r3, [pc, #388]	; (8c84 <_http_client_handle_header+0x19c>)
    8b00:	4798      	blx	r3
			return 0;
    8b02:	2600      	movs	r6, #0
}
    8b04:	0030      	movs	r0, r6
    8b06:	b004      	add	sp, #16
    8b08:	bc04      	pop	{r2}
    8b0a:	4691      	mov	r9, r2
    8b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    8b0e:	1ca1      	adds	r1, r4, #2
    8b10:	0038      	movs	r0, r7
    8b12:	4b5c      	ldr	r3, [pc, #368]	; (8c84 <_http_client_handle_header+0x19c>)
    8b14:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    8b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b18:	2b00      	cmp	r3, #0
    8b1a:	d00a      	beq.n	8b32 <_http_client_handle_header+0x4a>
    8b1c:	22e4      	movs	r2, #228	; 0xe4
    8b1e:	5ab9      	ldrh	r1, [r7, r2]
    8b20:	2900      	cmp	r1, #0
    8b22:	d006      	beq.n	8b32 <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
    8b24:	3a08      	subs	r2, #8
    8b26:	58b8      	ldr	r0, [r7, r2]
    8b28:	2800      	cmp	r0, #0
    8b2a:	db07      	blt.n	8b3c <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    8b2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    8b2e:	4290      	cmp	r0, r2
    8b30:	dc10      	bgt.n	8b54 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
    8b32:	2201      	movs	r2, #1
    8b34:	23d8      	movs	r3, #216	; 0xd8
    8b36:	50fa      	str	r2, [r7, r3]
			return 1;
    8b38:	2601      	movs	r6, #1
    8b3a:	e7e3      	b.n	8b04 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
    8b3c:	aa01      	add	r2, sp, #4
    8b3e:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    8b40:	2101      	movs	r1, #1
    8b42:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    8b44:	2100      	movs	r1, #0
    8b46:	20e0      	movs	r0, #224	; 0xe0
    8b48:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    8b4a:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    8b4c:	3102      	adds	r1, #2
    8b4e:	0038      	movs	r0, r7
    8b50:	4798      	blx	r3
    8b52:	e7ee      	b.n	8b32 <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
    8b54:	aa01      	add	r2, sp, #4
    8b56:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    8b58:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    8b5a:	2100      	movs	r1, #0
    8b5c:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    8b5e:	20e0      	movs	r0, #224	; 0xe0
    8b60:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    8b62:	3102      	adds	r1, #2
    8b64:	0038      	movs	r0, r7
    8b66:	4798      	blx	r3
    8b68:	e7e3      	b.n	8b32 <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    8b6a:	0020      	movs	r0, r4
    8b6c:	3010      	adds	r0, #16
    8b6e:	4b46      	ldr	r3, [pc, #280]	; (8c88 <_http_client_handle_header+0x1a0>)
    8b70:	4798      	blx	r3
    8b72:	23dc      	movs	r3, #220	; 0xdc
    8b74:	50f8      	str	r0, [r7, r3]
    8b76:	e009      	b.n	8b8c <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    8b78:	3201      	adds	r2, #1
    8b7a:	4295      	cmp	r5, r2
    8b7c:	d006      	beq.n	8b8c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    8b7e:	7813      	ldrb	r3, [r2, #0]
    8b80:	2b20      	cmp	r3, #32
    8b82:	d12b      	bne.n	8bdc <_http_client_handle_header+0xf4>
    8b84:	e7f8      	b.n	8b78 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
    8b86:	3a21      	subs	r2, #33	; 0x21
    8b88:	3389      	adds	r3, #137	; 0x89
    8b8a:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    8b8c:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    8b8e:	493f      	ldr	r1, [pc, #252]	; (8c8c <_http_client_handle_header+0x1a4>)
    8b90:	0020      	movs	r0, r4
    8b92:	47c8      	blx	r9
    8b94:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    8b96:	d0b0      	beq.n	8afa <_http_client_handle_header+0x12>
    8b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    8b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8b9c:	4694      	mov	ip, r2
    8b9e:	4463      	add	r3, ip
    8ba0:	4298      	cmp	r0, r3
    8ba2:	d2aa      	bcs.n	8afa <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    8ba4:	2202      	movs	r2, #2
    8ba6:	4939      	ldr	r1, [pc, #228]	; (8c8c <_http_client_handle_header+0x1a4>)
    8ba8:	0020      	movs	r0, r4
    8baa:	4b39      	ldr	r3, [pc, #228]	; (8c90 <_http_client_handle_header+0x1a8>)
    8bac:	4798      	blx	r3
    8bae:	2800      	cmp	r0, #0
    8bb0:	d0ad      	beq.n	8b0e <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    8bb2:	2210      	movs	r2, #16
    8bb4:	4937      	ldr	r1, [pc, #220]	; (8c94 <_http_client_handle_header+0x1ac>)
    8bb6:	0020      	movs	r0, r4
    8bb8:	4b35      	ldr	r3, [pc, #212]	; (8c90 <_http_client_handle_header+0x1a8>)
    8bba:	4798      	blx	r3
    8bbc:	2800      	cmp	r0, #0
    8bbe:	d0d4      	beq.n	8b6a <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    8bc0:	2213      	movs	r2, #19
    8bc2:	4935      	ldr	r1, [pc, #212]	; (8c98 <_http_client_handle_header+0x1b0>)
    8bc4:	0020      	movs	r0, r4
    8bc6:	4b32      	ldr	r3, [pc, #200]	; (8c90 <_http_client_handle_header+0x1a8>)
    8bc8:	4798      	blx	r3
    8bca:	1e06      	subs	r6, r0, #0
    8bcc:	d110      	bne.n	8bf0 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    8bce:	0022      	movs	r2, r4
    8bd0:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    8bd2:	4295      	cmp	r5, r2
    8bd4:	d9da      	bls.n	8b8c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    8bd6:	7ce3      	ldrb	r3, [r4, #19]
    8bd8:	2b20      	cmp	r3, #32
    8bda:	d0cd      	beq.n	8b78 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    8bdc:	2220      	movs	r2, #32
    8bde:	4393      	bics	r3, r2
    8be0:	2b43      	cmp	r3, #67	; 0x43
    8be2:	d0d0      	beq.n	8b86 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
    8be4:	2186      	movs	r1, #134	; 0x86
    8be6:	4249      	negs	r1, r1
    8be8:	0038      	movs	r0, r7
    8bea:	4b2c      	ldr	r3, [pc, #176]	; (8c9c <_http_client_handle_header+0x1b4>)
    8bec:	4798      	blx	r3
					return 0;
    8bee:	e789      	b.n	8b04 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    8bf0:	220c      	movs	r2, #12
    8bf2:	492b      	ldr	r1, [pc, #172]	; (8ca0 <_http_client_handle_header+0x1b8>)
    8bf4:	0020      	movs	r0, r4
    8bf6:	4b26      	ldr	r3, [pc, #152]	; (8c90 <_http_client_handle_header+0x1a8>)
    8bf8:	4798      	blx	r3
    8bfa:	2800      	cmp	r0, #0
    8bfc:	d11d      	bne.n	8c3a <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
    8bfe:	0022      	movs	r2, r4
    8c00:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    8c02:	4295      	cmp	r5, r2
    8c04:	d9c2      	bls.n	8b8c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    8c06:	7b23      	ldrb	r3, [r4, #12]
    8c08:	2b20      	cmp	r3, #32
    8c0a:	d009      	beq.n	8c20 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    8c0c:	2220      	movs	r2, #32
    8c0e:	4393      	bics	r3, r2
    8c10:	2b4b      	cmp	r3, #75	; 0x4b
    8c12:	d00c      	beq.n	8c2e <_http_client_handle_header+0x146>
					module->permanent = 0;
    8c14:	2241      	movs	r2, #65	; 0x41
    8c16:	5cbb      	ldrb	r3, [r7, r2]
    8c18:	2102      	movs	r1, #2
    8c1a:	438b      	bics	r3, r1
    8c1c:	54bb      	strb	r3, [r7, r2]
    8c1e:	e7b5      	b.n	8b8c <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    8c20:	3201      	adds	r2, #1
    8c22:	4295      	cmp	r5, r2
    8c24:	d0b2      	beq.n	8b8c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    8c26:	7813      	ldrb	r3, [r2, #0]
    8c28:	2b20      	cmp	r3, #32
    8c2a:	d1ef      	bne.n	8c0c <_http_client_handle_header+0x124>
    8c2c:	e7f8      	b.n	8c20 <_http_client_handle_header+0x138>
					module->permanent = 1;
    8c2e:	3221      	adds	r2, #33	; 0x21
    8c30:	5cbb      	ldrb	r3, [r7, r2]
    8c32:	2102      	movs	r1, #2
    8c34:	430b      	orrs	r3, r1
    8c36:	54bb      	strb	r3, [r7, r2]
    8c38:	e7a8      	b.n	8b8c <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    8c3a:	2205      	movs	r2, #5
    8c3c:	4919      	ldr	r1, [pc, #100]	; (8ca4 <_http_client_handle_header+0x1bc>)
    8c3e:	0020      	movs	r0, r4
    8c40:	4b13      	ldr	r3, [pc, #76]	; (8c90 <_http_client_handle_header+0x1a8>)
    8c42:	4798      	blx	r3
    8c44:	2800      	cmp	r0, #0
    8c46:	d1a1      	bne.n	8b8c <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    8c48:	0020      	movs	r0, r4
    8c4a:	3009      	adds	r0, #9
    8c4c:	4b0e      	ldr	r3, [pc, #56]	; (8c88 <_http_client_handle_header+0x1a0>)
    8c4e:	4798      	blx	r3
    8c50:	23e4      	movs	r3, #228	; 0xe4
    8c52:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    8c54:	2200      	movs	r2, #0
    8c56:	3b08      	subs	r3, #8
    8c58:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    8c5a:	7963      	ldrb	r3, [r4, #5]
    8c5c:	2b31      	cmp	r3, #49	; 0x31
    8c5e:	d802      	bhi.n	8c66 <_http_client_handle_header+0x17e>
    8c60:	79e3      	ldrb	r3, [r4, #7]
    8c62:	2b30      	cmp	r3, #48	; 0x30
    8c64:	d905      	bls.n	8c72 <_http_client_handle_header+0x18a>
				module->permanent = 1;
    8c66:	2241      	movs	r2, #65	; 0x41
    8c68:	5cbb      	ldrb	r3, [r7, r2]
    8c6a:	2102      	movs	r1, #2
    8c6c:	430b      	orrs	r3, r1
    8c6e:	54bb      	strb	r3, [r7, r2]
    8c70:	e78c      	b.n	8b8c <_http_client_handle_header+0xa4>
				module->permanent = 0;
    8c72:	2241      	movs	r2, #65	; 0x41
    8c74:	5cbb      	ldrb	r3, [r7, r2]
    8c76:	2102      	movs	r1, #2
    8c78:	438b      	bics	r3, r1
    8c7a:	54bb      	strb	r3, [r7, r2]
    8c7c:	e786      	b.n	8b8c <_http_client_handle_header+0xa4>
    8c7e:	46c0      	nop			; (mov r8, r8)
    8c80:	00011cd3 	.word	0x00011cd3
    8c84:	00008ac5 	.word	0x00008ac5
    8c88:	0001172d 	.word	0x0001172d
    8c8c:	000143fc 	.word	0x000143fc
    8c90:	00011cb1 	.word	0x00011cb1
    8c94:	00013070 	.word	0x00013070
    8c98:	00012f80 	.word	0x00012f80
    8c9c:	0000826d 	.word	0x0000826d
    8ca0:	00012f94 	.word	0x00012f94
    8ca4:	00012fa4 	.word	0x00012fa4

00008ca8 <_http_client_handle_entity>:
{
    8ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8caa:	46ce      	mov	lr, r9
    8cac:	b500      	push	{lr}
    8cae:	b086      	sub	sp, #24
    8cb0:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    8cb2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    8cb4:	23dc      	movs	r3, #220	; 0xdc
    8cb6:	58c3      	ldr	r3, [r0, r3]
    8cb8:	2b00      	cmp	r3, #0
    8cba:	db69      	blt.n	8d90 <_http_client_handle_entity+0xe8>
    8cbc:	6e02      	ldr	r2, [r0, #96]	; 0x60
    8cbe:	4293      	cmp	r3, r2
    8cc0:	dc2b      	bgt.n	8d1a <_http_client_handle_entity+0x72>
	return 0;
    8cc2:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    8cc4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    8cc6:	4293      	cmp	r3, r2
    8cc8:	dc4e      	bgt.n	8d68 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
    8cca:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    8ccc:	2e00      	cmp	r6, #0
    8cce:	d003      	beq.n	8cd8 <_http_client_handle_entity+0x30>
    8cd0:	22e4      	movs	r2, #228	; 0xe4
    8cd2:	5aa1      	ldrh	r1, [r4, r2]
    8cd4:	2900      	cmp	r1, #0
    8cd6:	d10e      	bne.n	8cf6 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
    8cd8:	2300      	movs	r3, #0
    8cda:	22d8      	movs	r2, #216	; 0xd8
    8cdc:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    8cde:	320c      	adds	r2, #12
    8ce0:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    8ce2:	3341      	adds	r3, #65	; 0x41
    8ce4:	5ce3      	ldrb	r3, [r4, r3]
    8ce6:	079b      	lsls	r3, r3, #30
    8ce8:	d40f      	bmi.n	8d0a <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
    8cea:	2100      	movs	r1, #0
    8cec:	0020      	movs	r0, r4
    8cee:	4b71      	ldr	r3, [pc, #452]	; (8eb4 <_http_client_handle_entity+0x20c>)
    8cf0:	4798      	blx	r3
	return 0;
    8cf2:	2000      	movs	r0, #0
    8cf4:	e038      	b.n	8d68 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
    8cf6:	aa03      	add	r2, sp, #12
    8cf8:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    8cfa:	2100      	movs	r1, #0
    8cfc:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    8cfe:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    8d00:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    8d02:	3102      	adds	r1, #2
    8d04:	0020      	movs	r0, r4
    8d06:	47b0      	blx	r6
    8d08:	e7e6      	b.n	8cd8 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    8d0a:	23dc      	movs	r3, #220	; 0xdc
    8d0c:	58e1      	ldr	r1, [r4, r3]
    8d0e:	1869      	adds	r1, r5, r1
    8d10:	0020      	movs	r0, r4
    8d12:	4b69      	ldr	r3, [pc, #420]	; (8eb8 <_http_client_handle_entity+0x210>)
    8d14:	4798      	blx	r3
				return module->recved_size;
    8d16:	6c60      	ldr	r0, [r4, #68]	; 0x44
    8d18:	e026      	b.n	8d68 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
    8d1a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    8d1c:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    8d1e:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    8d20:	21e0      	movs	r1, #224	; 0xe0
    8d22:	5840      	ldr	r0, [r0, r1]
    8d24:	4684      	mov	ip, r0
    8d26:	4462      	add	r2, ip
    8d28:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    8d2a:	4293      	cmp	r3, r2
    8d2c:	dc20      	bgt.n	8d70 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
    8d2e:	2300      	movs	r3, #0
    8d30:	22d8      	movs	r2, #216	; 0xd8
    8d32:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    8d34:	320c      	adds	r2, #12
    8d36:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    8d38:	3ae3      	subs	r2, #227	; 0xe3
    8d3a:	ab03      	add	r3, sp, #12
    8d3c:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    8d3e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8d40:	2b00      	cmp	r3, #0
    8d42:	d007      	beq.n	8d54 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    8d44:	ae03      	add	r6, sp, #12
    8d46:	0032      	movs	r2, r6
    8d48:	2103      	movs	r1, #3
    8d4a:	0020      	movs	r0, r4
    8d4c:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    8d4e:	7a33      	ldrb	r3, [r6, #8]
    8d50:	2b01      	cmp	r3, #1
    8d52:	d103      	bne.n	8d5c <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
    8d54:	2341      	movs	r3, #65	; 0x41
    8d56:	5ce3      	ldrb	r3, [r4, r3]
    8d58:	079b      	lsls	r3, r3, #30
    8d5a:	d510      	bpl.n	8d7e <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
    8d5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8d5e:	18e9      	adds	r1, r5, r3
    8d60:	0020      	movs	r0, r4
    8d62:	4b55      	ldr	r3, [pc, #340]	; (8eb8 <_http_client_handle_entity+0x210>)
    8d64:	4798      	blx	r3
	return 0;
    8d66:	2000      	movs	r0, #0
}
    8d68:	b006      	add	sp, #24
    8d6a:	bc04      	pop	{r2}
    8d6c:	4691      	mov	r9, r2
    8d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    8d70:	2200      	movs	r2, #0
    8d72:	ab03      	add	r3, sp, #12
    8d74:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    8d76:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8d78:	2b00      	cmp	r3, #0
    8d7a:	d0ef      	beq.n	8d5c <_http_client_handle_entity+0xb4>
    8d7c:	e7e2      	b.n	8d44 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
    8d7e:	484f      	ldr	r0, [pc, #316]	; (8ebc <_http_client_handle_entity+0x214>)
    8d80:	4b4f      	ldr	r3, [pc, #316]	; (8ec0 <_http_client_handle_entity+0x218>)
    8d82:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    8d84:	2100      	movs	r1, #0
    8d86:	0020      	movs	r0, r4
    8d88:	4b4a      	ldr	r3, [pc, #296]	; (8eb4 <_http_client_handle_entity+0x20c>)
    8d8a:	4798      	blx	r3
					return 0;
    8d8c:	2000      	movs	r0, #0
    8d8e:	e7eb      	b.n	8d68 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
    8d90:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    8d92:	2300      	movs	r3, #0
    8d94:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
    8d96:	26e0      	movs	r6, #224	; 0xe0
    8d98:	e00a      	b.n	8db0 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
    8d9a:	2341      	movs	r3, #65	; 0x41
    8d9c:	5ce3      	ldrb	r3, [r4, r3]
    8d9e:	079b      	lsls	r3, r3, #30
    8da0:	d51b      	bpl.n	8dda <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
    8da2:	1ca9      	adds	r1, r5, #2
    8da4:	0020      	movs	r0, r4
    8da6:	4b44      	ldr	r3, [pc, #272]	; (8eb8 <_http_client_handle_entity+0x210>)
    8da8:	4798      	blx	r3
	} while(module->recved_size > 0);
    8daa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8dac:	2b00      	cmp	r3, #0
    8dae:	d073      	beq.n	8e98 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
    8db0:	59a3      	ldr	r3, [r4, r6]
    8db2:	2b00      	cmp	r3, #0
    8db4:	db30      	blt.n	8e18 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
    8db6:	d116      	bne.n	8de6 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
    8db8:	22d8      	movs	r2, #216	; 0xd8
    8dba:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    8dbc:	320c      	adds	r2, #12
    8dbe:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    8dc0:	3ae3      	subs	r2, #227	; 0xe3
    8dc2:	4669      	mov	r1, sp
    8dc4:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    8dc6:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    8dc8:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    8dca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8dcc:	2b00      	cmp	r3, #0
    8dce:	d0e4      	beq.n	8d9a <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    8dd0:	466a      	mov	r2, sp
    8dd2:	2103      	movs	r1, #3
    8dd4:	0020      	movs	r0, r4
    8dd6:	4798      	blx	r3
    8dd8:	e7df      	b.n	8d9a <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
    8dda:	2100      	movs	r1, #0
    8ddc:	0020      	movs	r0, r4
    8dde:	4b35      	ldr	r3, [pc, #212]	; (8eb4 <_http_client_handle_entity+0x20c>)
    8de0:	4798      	blx	r3
	return 0;
    8de2:	2000      	movs	r0, #0
    8de4:	e7c0      	b.n	8d68 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
    8de6:	42bb      	cmp	r3, r7
    8de8:	dcdf      	bgt.n	8daa <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
    8dea:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    8dec:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    8dee:	2300      	movs	r3, #0
    8df0:	466a      	mov	r2, sp
    8df2:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    8df4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8df6:	2b00      	cmp	r3, #0
    8df8:	d002      	beq.n	8e00 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    8dfa:	2103      	movs	r1, #3
    8dfc:	0020      	movs	r0, r4
    8dfe:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    8e00:	59a3      	ldr	r3, [r4, r6]
    8e02:	1c99      	adds	r1, r3, #2
    8e04:	1869      	adds	r1, r5, r1
    8e06:	0020      	movs	r0, r4
    8e08:	4b2b      	ldr	r3, [pc, #172]	; (8eb8 <_http_client_handle_entity+0x210>)
    8e0a:	4798      	blx	r3
				length = (int)module->recved_size;
    8e0c:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    8e0e:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    8e10:	2301      	movs	r3, #1
    8e12:	425b      	negs	r3, r3
    8e14:	51a3      	str	r3, [r4, r6]
    8e16:	e7c8      	b.n	8daa <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
    8e18:	2300      	movs	r3, #0
    8e1a:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    8e1c:	2f00      	cmp	r7, #0
    8e1e:	dd04      	ble.n	8e2a <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
    8e20:	782b      	ldrb	r3, [r5, #0]
    8e22:	2b0a      	cmp	r3, #10
    8e24:	d11c      	bne.n	8e60 <_http_client_handle_entity+0x1b8>
					buffer++;
    8e26:	3501      	adds	r5, #1
					length--;
    8e28:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    8e2a:	59a3      	ldr	r3, [r4, r6]
    8e2c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8e2e:	4293      	cmp	r3, r2
    8e30:	dc39      	bgt.n	8ea6 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
    8e32:	2f00      	cmp	r7, #0
    8e34:	d1b9      	bne.n	8daa <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
    8e36:	2201      	movs	r2, #1
    8e38:	4252      	negs	r2, r2
    8e3a:	23e0      	movs	r3, #224	; 0xe0
    8e3c:	50e2      	str	r2, [r4, r3]
    8e3e:	e7d0      	b.n	8de2 <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    8e40:	001a      	movs	r2, r3
    8e42:	3a61      	subs	r2, #97	; 0x61
    8e44:	2a05      	cmp	r2, #5
    8e46:	d818      	bhi.n	8e7a <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    8e48:	59a2      	ldr	r2, [r4, r6]
    8e4a:	0112      	lsls	r2, r2, #4
    8e4c:	18d3      	adds	r3, r2, r3
    8e4e:	3b61      	subs	r3, #97	; 0x61
    8e50:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    8e52:	3501      	adds	r5, #1
    8e54:	3f01      	subs	r7, #1
    8e56:	2f00      	cmp	r7, #0
    8e58:	d020      	beq.n	8e9c <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
    8e5a:	782b      	ldrb	r3, [r5, #0]
    8e5c:	2b0a      	cmp	r3, #10
    8e5e:	d0e2      	beq.n	8e26 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
    8e60:	464a      	mov	r2, r9
    8e62:	2a00      	cmp	r2, #0
    8e64:	d1f5      	bne.n	8e52 <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
    8e66:	001a      	movs	r2, r3
    8e68:	3a30      	subs	r2, #48	; 0x30
    8e6a:	2a09      	cmp	r2, #9
    8e6c:	d8e8      	bhi.n	8e40 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    8e6e:	59a2      	ldr	r2, [r4, r6]
    8e70:	0112      	lsls	r2, r2, #4
    8e72:	18d3      	adds	r3, r2, r3
    8e74:	3b30      	subs	r3, #48	; 0x30
    8e76:	51a3      	str	r3, [r4, r6]
    8e78:	e7eb      	b.n	8e52 <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    8e7a:	001a      	movs	r2, r3
    8e7c:	3a41      	subs	r2, #65	; 0x41
    8e7e:	2a05      	cmp	r2, #5
    8e80:	d805      	bhi.n	8e8e <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    8e82:	59a2      	ldr	r2, [r4, r6]
    8e84:	0112      	lsls	r2, r2, #4
    8e86:	18d3      	adds	r3, r2, r3
    8e88:	3b41      	subs	r3, #65	; 0x41
    8e8a:	51a3      	str	r3, [r4, r6]
    8e8c:	e7e1      	b.n	8e52 <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
    8e8e:	3b3b      	subs	r3, #59	; 0x3b
    8e90:	425a      	negs	r2, r3
    8e92:	415a      	adcs	r2, r3
    8e94:	4691      	mov	r9, r2
    8e96:	e7dc      	b.n	8e52 <_http_client_handle_entity+0x1aa>
	return 0;
    8e98:	2000      	movs	r0, #0
    8e9a:	e765      	b.n	8d68 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    8e9c:	23e0      	movs	r3, #224	; 0xe0
    8e9e:	58e3      	ldr	r3, [r4, r3]
    8ea0:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8ea2:	4293      	cmp	r3, r2
    8ea4:	ddc7      	ble.n	8e36 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
    8ea6:	218b      	movs	r1, #139	; 0x8b
    8ea8:	4249      	negs	r1, r1
    8eaa:	0020      	movs	r0, r4
    8eac:	4b01      	ldr	r3, [pc, #4]	; (8eb4 <_http_client_handle_entity+0x20c>)
    8eae:	4798      	blx	r3
    8eb0:	e797      	b.n	8de2 <_http_client_handle_entity+0x13a>
    8eb2:	46c0      	nop			; (mov r8, r8)
    8eb4:	0000826d 	.word	0x0000826d
    8eb8:	00008ac5 	.word	0x00008ac5
    8ebc:	00012f7c 	.word	0x00012f7c
    8ec0:	00011a5d 	.word	0x00011a5d

00008ec4 <_http_client_handle_response>:
{
    8ec4:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    8ec6:	23d8      	movs	r3, #216	; 0xd8
    8ec8:	58c3      	ldr	r3, [r0, r3]
    8eca:	2b00      	cmp	r3, #0
    8ecc:	d003      	beq.n	8ed6 <_http_client_handle_response+0x12>
    8ece:	2b01      	cmp	r3, #1
    8ed0:	d004      	beq.n	8edc <_http_client_handle_response+0x18>
	return 0;
    8ed2:	2000      	movs	r0, #0
    8ed4:	e001      	b.n	8eda <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
    8ed6:	4b03      	ldr	r3, [pc, #12]	; (8ee4 <_http_client_handle_response+0x20>)
    8ed8:	4798      	blx	r3
}
    8eda:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    8edc:	4b02      	ldr	r3, [pc, #8]	; (8ee8 <_http_client_handle_response+0x24>)
    8ede:	4798      	blx	r3
    8ee0:	e7fb      	b.n	8eda <_http_client_handle_response+0x16>
    8ee2:	46c0      	nop			; (mov r8, r8)
    8ee4:	00008ae9 	.word	0x00008ae9
    8ee8:	00008ca9 	.word	0x00008ca9

00008eec <_http_client_recved_packet>:
{
    8eec:	b570      	push	{r4, r5, r6, lr}
    8eee:	0004      	movs	r4, r0
	module->recved_size += read_len;
    8ef0:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8ef2:	469c      	mov	ip, r3
    8ef4:	4461      	add	r1, ip
    8ef6:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    8ef8:	2358      	movs	r3, #88	; 0x58
    8efa:	5ac3      	ldrh	r3, [r0, r3]
    8efc:	2b00      	cmp	r3, #0
    8efe:	d105      	bne.n	8f0c <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
    8f00:	4d05      	ldr	r5, [pc, #20]	; (8f18 <_http_client_recved_packet+0x2c>)
    8f02:	0020      	movs	r0, r4
    8f04:	47a8      	blx	r5
    8f06:	2800      	cmp	r0, #0
    8f08:	d1fb      	bne.n	8f02 <_http_client_recved_packet+0x16>
}
    8f0a:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    8f0c:	6c81      	ldr	r1, [r0, #72]	; 0x48
    8f0e:	6d40      	ldr	r0, [r0, #84]	; 0x54
    8f10:	4b02      	ldr	r3, [pc, #8]	; (8f1c <_http_client_recved_packet+0x30>)
    8f12:	4798      	blx	r3
    8f14:	e7f4      	b.n	8f00 <_http_client_recved_packet+0x14>
    8f16:	46c0      	nop			; (mov r8, r8)
    8f18:	00008ec5 	.word	0x00008ec5
    8f1c:	000092c1 	.word	0x000092c1

00008f20 <http_client_socket_event_handler>:
{
    8f20:	b510      	push	{r4, lr}
    8f22:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
    8f24:	0080      	lsls	r0, r0, #2
    8f26:	4b65      	ldr	r3, [pc, #404]	; (90bc <http_client_socket_event_handler+0x19c>)
    8f28:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    8f2a:	2c00      	cmp	r4, #0
    8f2c:	d006      	beq.n	8f3c <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
    8f2e:	2906      	cmp	r1, #6
    8f30:	d051      	beq.n	8fd6 <http_client_socket_event_handler+0xb6>
    8f32:	2907      	cmp	r1, #7
    8f34:	d100      	bne.n	8f38 <http_client_socket_event_handler+0x18>
    8f36:	e08a      	b.n	904e <http_client_socket_event_handler+0x12e>
    8f38:	2905      	cmp	r1, #5
    8f3a:	d001      	beq.n	8f40 <http_client_socket_event_handler+0x20>
}
    8f3c:	b004      	add	sp, #16
    8f3e:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    8f40:	2301      	movs	r3, #1
    8f42:	56d3      	ldrsb	r3, [r2, r3]
    8f44:	1e1a      	subs	r2, r3, #0
    8f46:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    8f48:	db15      	blt.n	8f76 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
    8f4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    8f4c:	2b00      	cmp	r3, #0
    8f4e:	d003      	beq.n	8f58 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    8f50:	aa01      	add	r2, sp, #4
    8f52:	2100      	movs	r1, #0
    8f54:	0020      	movs	r0, r4
    8f56:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    8f58:	2303      	movs	r3, #3
    8f5a:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    8f5c:	3355      	adds	r3, #85	; 0x55
    8f5e:	5ae2      	ldrh	r2, [r4, r3]
    8f60:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    8f62:	6d60      	ldr	r0, [r4, #84]	; 0x54
    8f64:	4b56      	ldr	r3, [pc, #344]	; (90c0 <http_client_socket_event_handler+0x1a0>)
    8f66:	4798      	blx	r3
    		_http_client_recv_packet(module);
    8f68:	0020      	movs	r0, r4
    8f6a:	4b56      	ldr	r3, [pc, #344]	; (90c4 <http_client_socket_event_handler+0x1a4>)
    8f6c:	4798      	blx	r3
			_http_client_request(module);
    8f6e:	0020      	movs	r0, r4
    8f70:	4b55      	ldr	r3, [pc, #340]	; (90c8 <http_client_socket_event_handler+0x1a8>)
    8f72:	4798      	blx	r3
    8f74:	e7e2      	b.n	8f3c <http_client_socket_event_handler+0x1c>
	switch (err) {
    8f76:	330e      	adds	r3, #14
    8f78:	b2d9      	uxtb	r1, r3
    8f7a:	290e      	cmp	r1, #14
    8f7c:	d81e      	bhi.n	8fbc <http_client_socket_event_handler+0x9c>
    8f7e:	008b      	lsls	r3, r1, #2
    8f80:	4952      	ldr	r1, [pc, #328]	; (90cc <http_client_socket_event_handler+0x1ac>)
    8f82:	58cb      	ldr	r3, [r1, r3]
    8f84:	469f      	mov	pc, r3
			return -ENOENT;
    8f86:	2102      	movs	r1, #2
    8f88:	4249      	negs	r1, r1
    8f8a:	e01d      	b.n	8fc8 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
    8f8c:	2170      	movs	r1, #112	; 0x70
    8f8e:	4249      	negs	r1, r1
    8f90:	e01a      	b.n	8fc8 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    8f92:	210c      	movs	r1, #12
    8f94:	4249      	negs	r1, r1
    8f96:	e017      	b.n	8fc8 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
    8f98:	2116      	movs	r1, #22
    8f9a:	4249      	negs	r1, r1
    8f9c:	e014      	b.n	8fc8 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    8f9e:	210c      	movs	r1, #12
    8fa0:	4249      	negs	r1, r1
    8fa2:	e011      	b.n	8fc8 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
    8fa4:	2179      	movs	r1, #121	; 0x79
    8fa6:	4249      	negs	r1, r1
    8fa8:	e00e      	b.n	8fc8 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
    8faa:	2168      	movs	r1, #104	; 0x68
    8fac:	4249      	negs	r1, r1
    8fae:	e00b      	b.n	8fc8 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
    8fb0:	210b      	movs	r1, #11
    8fb2:	4249      	negs	r1, r1
    8fb4:	e008      	b.n	8fc8 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
    8fb6:	2110      	movs	r1, #16
    8fb8:	4249      	negs	r1, r1
    8fba:	e005      	b.n	8fc8 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
    8fbc:	2a00      	cmp	r2, #0
    8fbe:	db07      	blt.n	8fd0 <http_client_socket_event_handler+0xb0>
			return 0;
    8fc0:	2100      	movs	r1, #0
    8fc2:	e001      	b.n	8fc8 <http_client_socket_event_handler+0xa8>
			return -EIO;
    8fc4:	2105      	movs	r1, #5
    8fc6:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    8fc8:	0020      	movs	r0, r4
    8fca:	4b41      	ldr	r3, [pc, #260]	; (90d0 <http_client_socket_event_handler+0x1b0>)
    8fcc:	4798      	blx	r3
    8fce:	e7b5      	b.n	8f3c <http_client_socket_event_handler+0x1c>
				return -EIO;
    8fd0:	2105      	movs	r1, #5
    8fd2:	4249      	negs	r1, r1
    8fd4:	e7f8      	b.n	8fc8 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
    8fd6:	2304      	movs	r3, #4
    8fd8:	5ed1      	ldrsh	r1, [r2, r3]
    8fda:	2900      	cmp	r1, #0
    8fdc:	dd06      	ble.n	8fec <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    8fde:	0020      	movs	r0, r4
    8fe0:	4b3c      	ldr	r3, [pc, #240]	; (90d4 <http_client_socket_event_handler+0x1b4>)
    8fe2:	4798      	blx	r3
		_http_client_recv_packet(module);
    8fe4:	0020      	movs	r0, r4
    8fe6:	4b37      	ldr	r3, [pc, #220]	; (90c4 <http_client_socket_event_handler+0x1a4>)
    8fe8:	4798      	blx	r3
		break;
    8fea:	e7a7      	b.n	8f3c <http_client_socket_event_handler+0x1c>
	switch (err) {
    8fec:	000b      	movs	r3, r1
    8fee:	330e      	adds	r3, #14
    8ff0:	b29a      	uxth	r2, r3
    8ff2:	2a0e      	cmp	r2, #14
    8ff4:	d81e      	bhi.n	9034 <http_client_socket_event_handler+0x114>
    8ff6:	0093      	lsls	r3, r2, #2
    8ff8:	4a37      	ldr	r2, [pc, #220]	; (90d8 <http_client_socket_event_handler+0x1b8>)
    8ffa:	58d3      	ldr	r3, [r2, r3]
    8ffc:	469f      	mov	pc, r3
			return -ENOENT;
    8ffe:	2102      	movs	r1, #2
    9000:	4249      	negs	r1, r1
    9002:	e01d      	b.n	9040 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    9004:	2170      	movs	r1, #112	; 0x70
    9006:	4249      	negs	r1, r1
    9008:	e01a      	b.n	9040 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    900a:	210c      	movs	r1, #12
    900c:	4249      	negs	r1, r1
    900e:	e017      	b.n	9040 <http_client_socket_event_handler+0x120>
			return -EINVAL;
    9010:	2116      	movs	r1, #22
    9012:	4249      	negs	r1, r1
    9014:	e014      	b.n	9040 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    9016:	210c      	movs	r1, #12
    9018:	4249      	negs	r1, r1
    901a:	e011      	b.n	9040 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    901c:	2179      	movs	r1, #121	; 0x79
    901e:	4249      	negs	r1, r1
    9020:	e00e      	b.n	9040 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    9022:	2168      	movs	r1, #104	; 0x68
    9024:	4249      	negs	r1, r1
    9026:	e00b      	b.n	9040 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    9028:	210b      	movs	r1, #11
    902a:	4249      	negs	r1, r1
    902c:	e008      	b.n	9040 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    902e:	2110      	movs	r1, #16
    9030:	4249      	negs	r1, r1
    9032:	e005      	b.n	9040 <http_client_socket_event_handler+0x120>
			if (err < 0) {
    9034:	2900      	cmp	r1, #0
    9036:	db07      	blt.n	9048 <http_client_socket_event_handler+0x128>
			return 0;
    9038:	2100      	movs	r1, #0
    903a:	e001      	b.n	9040 <http_client_socket_event_handler+0x120>
			return -EIO;
    903c:	2105      	movs	r1, #5
    903e:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    9040:	0020      	movs	r0, r4
    9042:	4b23      	ldr	r3, [pc, #140]	; (90d0 <http_client_socket_event_handler+0x1b0>)
    9044:	4798      	blx	r3
    9046:	e7cd      	b.n	8fe4 <http_client_socket_event_handler+0xc4>
				return -EIO;
    9048:	2105      	movs	r1, #5
    904a:	4249      	negs	r1, r1
    904c:	e7f8      	b.n	9040 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    904e:	2300      	movs	r3, #0
    9050:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    9052:	2b00      	cmp	r3, #0
    9054:	db08      	blt.n	9068 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    9056:	0020      	movs	r0, r4
    9058:	4b1b      	ldr	r3, [pc, #108]	; (90c8 <http_client_socket_event_handler+0x1a8>)
    905a:	4798      	blx	r3
		module->sending = 0;
    905c:	2241      	movs	r2, #65	; 0x41
    905e:	5ca3      	ldrb	r3, [r4, r2]
    9060:	2101      	movs	r1, #1
    9062:	438b      	bics	r3, r1
    9064:	54a3      	strb	r3, [r4, r2]
    	break;
    9066:	e769      	b.n	8f3c <http_client_socket_event_handler+0x1c>
	switch (err) {
    9068:	330e      	adds	r3, #14
    906a:	b29a      	uxth	r2, r3
    906c:	2a0d      	cmp	r2, #13
    906e:	d81e      	bhi.n	90ae <http_client_socket_event_handler+0x18e>
    9070:	0093      	lsls	r3, r2, #2
    9072:	4a1a      	ldr	r2, [pc, #104]	; (90dc <http_client_socket_event_handler+0x1bc>)
    9074:	58d3      	ldr	r3, [r2, r3]
    9076:	469f      	mov	pc, r3
			return -ENOENT;
    9078:	2102      	movs	r1, #2
    907a:	4249      	negs	r1, r1
    907c:	e019      	b.n	90b2 <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    907e:	2170      	movs	r1, #112	; 0x70
    9080:	4249      	negs	r1, r1
    9082:	e016      	b.n	90b2 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    9084:	210c      	movs	r1, #12
    9086:	4249      	negs	r1, r1
    9088:	e013      	b.n	90b2 <http_client_socket_event_handler+0x192>
			return -EINVAL;
    908a:	2116      	movs	r1, #22
    908c:	4249      	negs	r1, r1
    908e:	e010      	b.n	90b2 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    9090:	210c      	movs	r1, #12
    9092:	4249      	negs	r1, r1
    9094:	e00d      	b.n	90b2 <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    9096:	2179      	movs	r1, #121	; 0x79
    9098:	4249      	negs	r1, r1
    909a:	e00a      	b.n	90b2 <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    909c:	2168      	movs	r1, #104	; 0x68
    909e:	4249      	negs	r1, r1
    90a0:	e007      	b.n	90b2 <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    90a2:	210b      	movs	r1, #11
    90a4:	4249      	negs	r1, r1
    90a6:	e004      	b.n	90b2 <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    90a8:	2110      	movs	r1, #16
    90aa:	4249      	negs	r1, r1
    90ac:	e001      	b.n	90b2 <http_client_socket_event_handler+0x192>
			return -EIO;
    90ae:	2105      	movs	r1, #5
    90b0:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    90b2:	0020      	movs	r0, r4
    90b4:	4b06      	ldr	r3, [pc, #24]	; (90d0 <http_client_socket_event_handler+0x1b0>)
    90b6:	4798      	blx	r3
    90b8:	e7d0      	b.n	905c <http_client_socket_event_handler+0x13c>
    90ba:	46c0      	nop			; (mov r8, r8)
    90bc:	2000020c 	.word	0x2000020c
    90c0:	00009295 	.word	0x00009295
    90c4:	00008a8d 	.word	0x00008a8d
    90c8:	00008385 	.word	0x00008385
    90cc:	00012ebc 	.word	0x00012ebc
    90d0:	0000826d 	.word	0x0000826d
    90d4:	00008eed 	.word	0x00008eed
    90d8:	00012ef8 	.word	0x00012ef8
    90dc:	00012f34 	.word	0x00012f34

000090e0 <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    90e0:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    90e2:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    90e4:	2200      	movs	r2, #0
    90e6:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    90e8:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    90ea:	9b00      	ldr	r3, [sp, #0]
    90ec:	60c3      	str	r3, [r0, #12]
}
    90ee:	4770      	bx	lr

000090f0 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    90f0:	b510      	push	{r4, lr}
    90f2:	0004      	movs	r4, r0
	if(writer->written > 0) {
    90f4:	6842      	ldr	r2, [r0, #4]
    90f6:	2a00      	cmp	r2, #0
    90f8:	d100      	bne.n	90fc <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    90fa:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    90fc:	6901      	ldr	r1, [r0, #16]
    90fe:	68c0      	ldr	r0, [r0, #12]
    9100:	68a3      	ldr	r3, [r4, #8]
    9102:	4798      	blx	r3
		writer->written = 0;
    9104:	2300      	movs	r3, #0
    9106:	6063      	str	r3, [r4, #4]
}
    9108:	e7f7      	b.n	90fa <stream_writer_send_remain+0xa>
	...

0000910c <stream_writer_send_8>:
{
    910c:	b570      	push	{r4, r5, r6, lr}
    910e:	0004      	movs	r4, r0
    9110:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    9112:	6803      	ldr	r3, [r0, #0]
    9114:	6842      	ldr	r2, [r0, #4]
    9116:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    9118:	2b00      	cmp	r3, #0
    911a:	dd05      	ble.n	9128 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    911c:	6922      	ldr	r2, [r4, #16]
    911e:	6863      	ldr	r3, [r4, #4]
    9120:	1c59      	adds	r1, r3, #1
    9122:	6061      	str	r1, [r4, #4]
    9124:	54d5      	strb	r5, [r2, r3]
}
    9126:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    9128:	4b01      	ldr	r3, [pc, #4]	; (9130 <stream_writer_send_8+0x24>)
    912a:	4798      	blx	r3
    912c:	e7f6      	b.n	911c <stream_writer_send_8+0x10>
    912e:	46c0      	nop			; (mov r8, r8)
    9130:	000090f1 	.word	0x000090f1

00009134 <stream_writer_send_16BE>:
{
    9134:	b570      	push	{r4, r5, r6, lr}
    9136:	0006      	movs	r6, r0
    9138:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    913a:	1209      	asrs	r1, r1, #8
    913c:	4d02      	ldr	r5, [pc, #8]	; (9148 <stream_writer_send_16BE+0x14>)
    913e:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    9140:	b261      	sxtb	r1, r4
    9142:	0030      	movs	r0, r6
    9144:	47a8      	blx	r5
}
    9146:	bd70      	pop	{r4, r5, r6, pc}
    9148:	0000910d 	.word	0x0000910d

0000914c <stream_writer_send_buffer>:
{
    914c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    914e:	0006      	movs	r6, r0
    9150:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    9152:	2a00      	cmp	r2, #0
    9154:	d008      	beq.n	9168 <stream_writer_send_buffer+0x1c>
    9156:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    9158:	4f04      	ldr	r7, [pc, #16]	; (916c <stream_writer_send_buffer+0x20>)
    915a:	2100      	movs	r1, #0
    915c:	5661      	ldrsb	r1, [r4, r1]
    915e:	0030      	movs	r0, r6
    9160:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    9162:	3401      	adds	r4, #1
    9164:	42a5      	cmp	r5, r4
    9166:	d1f8      	bne.n	915a <stream_writer_send_buffer+0xe>
}
    9168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    916a:	46c0      	nop			; (mov r8, r8)
    916c:	0000910d 	.word	0x0000910d

00009170 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    9170:	4a02      	ldr	r2, [pc, #8]	; (917c <sw_timer_tcc_callback+0xc>)
    9172:	6813      	ldr	r3, [r2, #0]
    9174:	3301      	adds	r3, #1
    9176:	6013      	str	r3, [r2, #0]
}
    9178:	4770      	bx	lr
    917a:	46c0      	nop			; (mov r8, r8)
    917c:	20000228 	.word	0x20000228

00009180 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    9180:	2364      	movs	r3, #100	; 0x64
    9182:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    9184:	2300      	movs	r3, #0
    9186:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    9188:	7043      	strb	r3, [r0, #1]
}
    918a:	4770      	bx	lr

0000918c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    918c:	b5f0      	push	{r4, r5, r6, r7, lr}
    918e:	46c6      	mov	lr, r8
    9190:	b500      	push	{lr}
    9192:	b0ac      	sub	sp, #176	; 0xb0
    9194:	000d      	movs	r5, r1
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    9196:	466e      	mov	r6, sp
    9198:	4b1d      	ldr	r3, [pc, #116]	; (9210 <sw_timer_init+0x84>)
    919a:	466a      	mov	r2, sp
    919c:	cb92      	ldmia	r3!, {r1, r4, r7}
    919e:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    91a0:	886b      	ldrh	r3, [r5, #2]
    91a2:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    91a4:	3014      	adds	r0, #20
    91a6:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    91a8:	782b      	ldrb	r3, [r5, #0]
    91aa:	009b      	lsls	r3, r3, #2
    91ac:	5999      	ldr	r1, [r3, r6]
    91ae:	0017      	movs	r7, r2
    91b0:	0010      	movs	r0, r2
    91b2:	4b18      	ldr	r3, [pc, #96]	; (9214 <sw_timer_init+0x88>)
    91b4:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    91b6:	2000      	movs	r0, #0
    91b8:	4b17      	ldr	r3, [pc, #92]	; (9218 <sw_timer_init+0x8c>)
    91ba:	4798      	blx	r3
    91bc:	4b17      	ldr	r3, [pc, #92]	; (921c <sw_timer_init+0x90>)
    91be:	7a1b      	ldrb	r3, [r3, #8]
    91c0:	b2db      	uxtb	r3, r3
    91c2:	40d8      	lsrs	r0, r3
    91c4:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    91c6:	8869      	ldrh	r1, [r5, #2]
    91c8:	20fa      	movs	r0, #250	; 0xfa
    91ca:	0200      	lsls	r0, r0, #8
    91cc:	4b14      	ldr	r3, [pc, #80]	; (9220 <sw_timer_init+0x94>)
    91ce:	4798      	blx	r3
    91d0:	0001      	movs	r1, r0
    91d2:	4640      	mov	r0, r8
    91d4:	4b13      	ldr	r3, [pc, #76]	; (9224 <sw_timer_init+0x98>)
    91d6:	4798      	blx	r3
    91d8:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    91da:	2305      	movs	r3, #5
    91dc:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    91de:	782b      	ldrb	r3, [r5, #0]
    91e0:	009b      	lsls	r3, r3, #2
    91e2:	5999      	ldr	r1, [r3, r6]
    91e4:	003a      	movs	r2, r7
    91e6:	0020      	movs	r0, r4
    91e8:	4b0f      	ldr	r3, [pc, #60]	; (9228 <sw_timer_init+0x9c>)
    91ea:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    91ec:	786a      	ldrb	r2, [r5, #1]
    91ee:	3208      	adds	r2, #8
    91f0:	b2d2      	uxtb	r2, r2
    91f2:	490e      	ldr	r1, [pc, #56]	; (922c <sw_timer_init+0xa0>)
    91f4:	0020      	movs	r0, r4
    91f6:	4b0e      	ldr	r3, [pc, #56]	; (9230 <sw_timer_init+0xa4>)
    91f8:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    91fa:	7869      	ldrb	r1, [r5, #1]
    91fc:	3108      	adds	r1, #8
    91fe:	b2c9      	uxtb	r1, r1
    9200:	0020      	movs	r0, r4
    9202:	4b0c      	ldr	r3, [pc, #48]	; (9234 <sw_timer_init+0xa8>)
    9204:	4798      	blx	r3
}
    9206:	b02c      	add	sp, #176	; 0xb0
    9208:	bc04      	pop	{r2}
    920a:	4690      	mov	r8, r2
    920c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    920e:	46c0      	nop			; (mov r8, r8)
    9210:	000130a4 	.word	0x000130a4
    9214:	0000eee9 	.word	0x0000eee9
    9218:	0000ec45 	.word	0x0000ec45
    921c:	40000400 	.word	0x40000400
    9220:	00011501 	.word	0x00011501
    9224:	000113ed 	.word	0x000113ed
    9228:	0000f035 	.word	0x0000f035
    922c:	00009171 	.word	0x00009171
    9230:	0000f441 	.word	0x0000f441
    9234:	0000f459 	.word	0x0000f459

00009238 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    9238:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    923a:	2102      	movs	r1, #2
    923c:	6893      	ldr	r3, [r2, #8]
    923e:	4219      	tst	r1, r3
    9240:	d1fc      	bne.n	923c <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    9242:	6813      	ldr	r3, [r2, #0]
    9244:	2102      	movs	r1, #2
    9246:	430b      	orrs	r3, r1
    9248:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    924a:	4770      	bx	lr

0000924c <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    924c:	b570      	push	{r4, r5, r6, lr}
    924e:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    9250:	7805      	ldrb	r5, [r0, #0]
    9252:	07e8      	lsls	r0, r5, #31
    9254:	d502      	bpl.n	925c <sw_timer_register_callback+0x10>
			handler->used = 1;
			return index;
		}
	}

	return -1;
    9256:	2001      	movs	r0, #1
    9258:	4240      	negs	r0, r0
}
    925a:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    925c:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    925e:	0029      	movs	r1, r5
    9260:	2002      	movs	r0, #2
    9262:	4381      	bics	r1, r0
    9264:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    9266:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    9268:	6d61      	ldr	r1, [r4, #84]	; 0x54
    926a:	0018      	movs	r0, r3
    926c:	4b04      	ldr	r3, [pc, #16]	; (9280 <sw_timer_register_callback+0x34>)
    926e:	4798      	blx	r3
    9270:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    9272:	7823      	ldrb	r3, [r4, #0]
    9274:	2201      	movs	r2, #1
    9276:	4313      	orrs	r3, r2
    9278:	7023      	strb	r3, [r4, #0]
			return index;
    927a:	2000      	movs	r0, #0
    927c:	e7ed      	b.n	925a <sw_timer_register_callback+0xe>
    927e:	46c0      	nop			; (mov r8, r8)
    9280:	000113ed 	.word	0x000113ed

00009284 <sw_timer_unregister_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->used = 0;
    9284:	008b      	lsls	r3, r1, #2
    9286:	1859      	adds	r1, r3, r1
    9288:	0089      	lsls	r1, r1, #2
    928a:	5c0b      	ldrb	r3, [r1, r0]
    928c:	2201      	movs	r2, #1
    928e:	4393      	bics	r3, r2
    9290:	540b      	strb	r3, [r1, r0]
}
    9292:	4770      	bx	lr

00009294 <sw_timer_enable_callback>:

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    9294:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    9296:	008b      	lsls	r3, r1, #2
    9298:	185d      	adds	r5, r3, r1
    929a:	00ad      	lsls	r5, r5, #2
    929c:	5c29      	ldrb	r1, [r5, r0]
    929e:	2602      	movs	r6, #2
    92a0:	4331      	orrs	r1, r6
    92a2:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    92a4:	1944      	adds	r4, r0, r5
    92a6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    92a8:	0010      	movs	r0, r2
    92aa:	4b03      	ldr	r3, [pc, #12]	; (92b8 <sw_timer_enable_callback+0x24>)
    92ac:	4798      	blx	r3
    92ae:	4b03      	ldr	r3, [pc, #12]	; (92bc <sw_timer_enable_callback+0x28>)
    92b0:	681b      	ldr	r3, [r3, #0]
    92b2:	18c0      	adds	r0, r0, r3
    92b4:	6120      	str	r0, [r4, #16]
}
    92b6:	bd70      	pop	{r4, r5, r6, pc}
    92b8:	000113ed 	.word	0x000113ed
    92bc:	20000228 	.word	0x20000228

000092c0 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    92c0:	008b      	lsls	r3, r1, #2
    92c2:	1859      	adds	r1, r3, r1
    92c4:	0089      	lsls	r1, r1, #2
    92c6:	5c0b      	ldrb	r3, [r1, r0]
    92c8:	2202      	movs	r2, #2
    92ca:	4393      	bics	r3, r2
    92cc:	540b      	strb	r3, [r1, r0]
}
    92ce:	4770      	bx	lr

000092d0 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    92d0:	b570      	push	{r4, r5, r6, lr}
    92d2:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    92d4:	7803      	ldrb	r3, [r0, #0]
    92d6:	07db      	lsls	r3, r3, #31
    92d8:	d507      	bpl.n	92ea <sw_timer_task+0x1a>
    92da:	7803      	ldrb	r3, [r0, #0]
    92dc:	079b      	lsls	r3, r3, #30
    92de:	d504      	bpl.n	92ea <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    92e0:	4b11      	ldr	r3, [pc, #68]	; (9328 <sw_timer_task+0x58>)
    92e2:	681b      	ldr	r3, [r3, #0]
    92e4:	6902      	ldr	r2, [r0, #16]
    92e6:	1ad3      	subs	r3, r2, r3
    92e8:	d400      	bmi.n	92ec <sw_timer_task+0x1c>
				handler->busy = 0;
			}
		}
	}

}
    92ea:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    92ec:	7803      	ldrb	r3, [r0, #0]
    92ee:	075b      	lsls	r3, r3, #29
    92f0:	d4fb      	bmi.n	92ea <sw_timer_task+0x1a>
				handler->busy = 1;
    92f2:	7803      	ldrb	r3, [r0, #0]
    92f4:	2204      	movs	r2, #4
    92f6:	4313      	orrs	r3, r2
    92f8:	7003      	strb	r3, [r0, #0]
				handler->callback(module_inst, index, handler->context, handler->period);
    92fa:	68c3      	ldr	r3, [r0, #12]
    92fc:	6882      	ldr	r2, [r0, #8]
    92fe:	2100      	movs	r1, #0
    9300:	6845      	ldr	r5, [r0, #4]
    9302:	47a8      	blx	r5
				if (handler->period > 0) {
    9304:	68e3      	ldr	r3, [r4, #12]
    9306:	2b00      	cmp	r3, #0
    9308:	d008      	beq.n	931c <sw_timer_task+0x4c>
					handler->expire_time = sw_timer_tick + handler->period;
    930a:	4a07      	ldr	r2, [pc, #28]	; (9328 <sw_timer_task+0x58>)
    930c:	6812      	ldr	r2, [r2, #0]
    930e:	18d3      	adds	r3, r2, r3
    9310:	6123      	str	r3, [r4, #16]
				handler->busy = 0;
    9312:	7823      	ldrb	r3, [r4, #0]
    9314:	2204      	movs	r2, #4
    9316:	4393      	bics	r3, r2
    9318:	7023      	strb	r3, [r4, #0]
}
    931a:	e7e6      	b.n	92ea <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    931c:	7823      	ldrb	r3, [r4, #0]
    931e:	2202      	movs	r2, #2
    9320:	4393      	bics	r3, r2
    9322:	7023      	strb	r3, [r4, #0]
    9324:	e7f5      	b.n	9312 <sw_timer_task+0x42>
    9326:	46c0      	nop			; (mov r8, r8)
    9328:	20000228 	.word	0x20000228

0000932c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    932c:	4770      	bx	lr
	...

00009330 <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    9330:	b530      	push	{r4, r5, lr}
    9332:	b085      	sub	sp, #20
    9334:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    9336:	2300      	movs	r3, #0
    9338:	9303      	str	r3, [sp, #12]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    933a:	6805      	ldr	r5, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    933c:	4b2f      	ldr	r3, [pc, #188]	; (93fc <at25dfx_chip_check_presence+0xcc>)
    933e:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
    9340:	792b      	ldrb	r3, [r5, #4]
    9342:	2b00      	cmp	r3, #0
    9344:	d156      	bne.n	93f4 <at25dfx_chip_check_presence+0xc4>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
    9346:	3301      	adds	r3, #1
    9348:	712b      	strb	r3, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    934a:	4b2d      	ldr	r3, [pc, #180]	; (9400 <at25dfx_chip_check_presence+0xd0>)
    934c:	4798      	blx	r3
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    934e:	229f      	movs	r2, #159	; 0x9f
    9350:	ab01      	add	r3, sp, #4
    9352:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    9354:	7962      	ldrb	r2, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    9356:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    9358:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    935a:	2900      	cmp	r1, #0
    935c:	d104      	bne.n	9368 <at25dfx_chip_check_presence+0x38>
		return &(ports[port_index]->Group[group_index]);
    935e:	0953      	lsrs	r3, r2, #5
    9360:	01db      	lsls	r3, r3, #7
    9362:	4928      	ldr	r1, [pc, #160]	; (9404 <at25dfx_chip_check_presence+0xd4>)
    9364:	468c      	mov	ip, r1
    9366:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9368:	211f      	movs	r1, #31
    936a:	4011      	ands	r1, r2
    936c:	2201      	movs	r2, #1
    936e:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    9370:	615a      	str	r2, [r3, #20]
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    9372:	2201      	movs	r2, #1
    9374:	a901      	add	r1, sp, #4
    9376:	6820      	ldr	r0, [r4, #0]
    9378:	4b23      	ldr	r3, [pc, #140]	; (9408 <at25dfx_chip_check_presence+0xd8>)
    937a:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    937c:	2300      	movs	r3, #0
    937e:	2203      	movs	r2, #3
    9380:	a903      	add	r1, sp, #12
    9382:	6820      	ldr	r0, [r4, #0]
    9384:	4d21      	ldr	r5, [pc, #132]	; (940c <at25dfx_chip_check_presence+0xdc>)
    9386:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    9388:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    938a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    938c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    938e:	2900      	cmp	r1, #0
    9390:	d104      	bne.n	939c <at25dfx_chip_check_presence+0x6c>
		return &(ports[port_index]->Group[group_index]);
    9392:	0953      	lsrs	r3, r2, #5
    9394:	01db      	lsls	r3, r3, #7
    9396:	491b      	ldr	r1, [pc, #108]	; (9404 <at25dfx_chip_check_presence+0xd4>)
    9398:	468c      	mov	ip, r1
    939a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    939c:	211f      	movs	r1, #31
    939e:	4011      	ands	r1, r2
    93a0:	2201      	movs	r2, #1
    93a2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    93a4:	619a      	str	r2, [r3, #24]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
    93a6:	2300      	movs	r3, #0
    93a8:	6822      	ldr	r2, [r4, #0]
    93aa:	7113      	strb	r3, [r2, #4]
	switch (type) {
    93ac:	7923      	ldrb	r3, [r4, #4]
    93ae:	2b09      	cmp	r3, #9
    93b0:	d815      	bhi.n	93de <at25dfx_chip_check_presence+0xae>
    93b2:	009b      	lsls	r3, r3, #2
    93b4:	4a16      	ldr	r2, [pc, #88]	; (9410 <at25dfx_chip_check_presence+0xe0>)
    93b6:	58d3      	ldr	r3, [r2, r3]
    93b8:	469f      	mov	pc, r3
		return 0x00431f;
    93ba:	4b16      	ldr	r3, [pc, #88]	; (9414 <at25dfx_chip_check_presence+0xe4>)
    93bc:	e012      	b.n	93e4 <at25dfx_chip_check_presence+0xb4>
		return 0x01441f;
    93be:	4b16      	ldr	r3, [pc, #88]	; (9418 <at25dfx_chip_check_presence+0xe8>)
    93c0:	e010      	b.n	93e4 <at25dfx_chip_check_presence+0xb4>
		return 0x02451f;
    93c2:	4b16      	ldr	r3, [pc, #88]	; (941c <at25dfx_chip_check_presence+0xec>)
    93c4:	e00e      	b.n	93e4 <at25dfx_chip_check_presence+0xb4>
		return 0x01451f;
    93c6:	4b16      	ldr	r3, [pc, #88]	; (9420 <at25dfx_chip_check_presence+0xf0>)
    93c8:	e00c      	b.n	93e4 <at25dfx_chip_check_presence+0xb4>
		return 0x02461f;
    93ca:	4b16      	ldr	r3, [pc, #88]	; (9424 <at25dfx_chip_check_presence+0xf4>)
    93cc:	e00a      	b.n	93e4 <at25dfx_chip_check_presence+0xb4>
		return 0x03461f;
    93ce:	4b16      	ldr	r3, [pc, #88]	; (9428 <at25dfx_chip_check_presence+0xf8>)
    93d0:	e008      	b.n	93e4 <at25dfx_chip_check_presence+0xb4>
		return 0x00861f;
    93d2:	4b16      	ldr	r3, [pc, #88]	; (942c <at25dfx_chip_check_presence+0xfc>)
    93d4:	e006      	b.n	93e4 <at25dfx_chip_check_presence+0xb4>
		return 0x01471f;
    93d6:	4b16      	ldr	r3, [pc, #88]	; (9430 <at25dfx_chip_check_presence+0x100>)
    93d8:	e004      	b.n	93e4 <at25dfx_chip_check_presence+0xb4>
		return 0x00481f;
    93da:	4b16      	ldr	r3, [pc, #88]	; (9434 <at25dfx_chip_check_presence+0x104>)
    93dc:	e002      	b.n	93e4 <at25dfx_chip_check_presence+0xb4>
		return 0;
    93de:	2300      	movs	r3, #0
    93e0:	e000      	b.n	93e4 <at25dfx_chip_check_presence+0xb4>
		return 0x00651f;
    93e2:	4b15      	ldr	r3, [pc, #84]	; (9438 <at25dfx_chip_check_presence+0x108>)

	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	if (id == _at25dfx_get_device_id(chip->type)) {
    93e4:	9a03      	ldr	r2, [sp, #12]
    93e6:	429a      	cmp	r2, r3
    93e8:	d002      	beq.n	93f0 <at25dfx_chip_check_presence+0xc0>
		return STATUS_OK;
	} else {
		return STATUS_ERR_NOT_FOUND;
    93ea:	2014      	movs	r0, #20
	}
}
    93ec:	b005      	add	sp, #20
    93ee:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
    93f0:	2000      	movs	r0, #0
    93f2:	e7fb      	b.n	93ec <at25dfx_chip_check_presence+0xbc>
    93f4:	4b02      	ldr	r3, [pc, #8]	; (9400 <at25dfx_chip_check_presence+0xd0>)
    93f6:	4798      	blx	r3
		return status;
    93f8:	2005      	movs	r0, #5
    93fa:	e7f7      	b.n	93ec <at25dfx_chip_check_presence+0xbc>
    93fc:	0000cfad 	.word	0x0000cfad
    9400:	0000cfed 	.word	0x0000cfed
    9404:	41004400 	.word	0x41004400
    9408:	0000dd11 	.word	0x0000dd11
    940c:	0000db01 	.word	0x0000db01
    9410:	000130b0 	.word	0x000130b0
    9414:	0000431f 	.word	0x0000431f
    9418:	0001441f 	.word	0x0001441f
    941c:	0002451f 	.word	0x0002451f
    9420:	0001451f 	.word	0x0001451f
    9424:	0002461f 	.word	0x0002461f
    9428:	0003461f 	.word	0x0003461f
    942c:	0000861f 	.word	0x0000861f
    9430:	0001471f 	.word	0x0001471f
    9434:	0000481f 	.word	0x0000481f
    9438:	0000651f 	.word	0x0000651f

0000943c <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    943c:	b5f0      	push	{r4, r5, r6, r7, lr}
    943e:	46de      	mov	lr, fp
    9440:	4657      	mov	r7, sl
    9442:	464e      	mov	r6, r9
    9444:	4645      	mov	r5, r8
    9446:	b5e0      	push	{r5, r6, r7, lr}
    9448:	b085      	sub	sp, #20
    944a:	0005      	movs	r5, r0
    944c:	000e      	movs	r6, r1
    944e:	9201      	str	r2, [sp, #4]
    9450:	001f      	movs	r7, r3

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    9452:	185a      	adds	r2, r3, r1
	switch (type) {
    9454:	7903      	ldrb	r3, [r0, #4]
    9456:	2b09      	cmp	r3, #9
    9458:	d815      	bhi.n	9486 <at25dfx_chip_write_buffer+0x4a>
    945a:	009b      	lsls	r3, r3, #2
    945c:	49ae      	ldr	r1, [pc, #696]	; (9718 <at25dfx_chip_write_buffer+0x2dc>)
    945e:	58cb      	ldr	r3, [r1, r3]
    9460:	469f      	mov	pc, r3
		return 256 * 1024UL;
    9462:	2380      	movs	r3, #128	; 0x80
    9464:	02db      	lsls	r3, r3, #11
    9466:	e012      	b.n	948e <at25dfx_chip_write_buffer+0x52>
		return 512 * 1024UL;
    9468:	2380      	movs	r3, #128	; 0x80
    946a:	031b      	lsls	r3, r3, #12
    946c:	e00f      	b.n	948e <at25dfx_chip_write_buffer+0x52>
		return 1024 * 1024UL;
    946e:	2380      	movs	r3, #128	; 0x80
    9470:	035b      	lsls	r3, r3, #13
    9472:	e00c      	b.n	948e <at25dfx_chip_write_buffer+0x52>
		return 2048 * 1024UL;
    9474:	2380      	movs	r3, #128	; 0x80
    9476:	039b      	lsls	r3, r3, #14
    9478:	e009      	b.n	948e <at25dfx_chip_write_buffer+0x52>
		return 4096 * 1024UL;
    947a:	2380      	movs	r3, #128	; 0x80
    947c:	03db      	lsls	r3, r3, #15
    947e:	e006      	b.n	948e <at25dfx_chip_write_buffer+0x52>
		return 8192 * 1024UL;
    9480:	2380      	movs	r3, #128	; 0x80
    9482:	041b      	lsls	r3, r3, #16
    9484:	e003      	b.n	948e <at25dfx_chip_write_buffer+0x52>
		return 0;
    9486:	2300      	movs	r3, #0
    9488:	e001      	b.n	948e <at25dfx_chip_write_buffer+0x52>
		return 64 * 1024UL;
    948a:	2380      	movs	r3, #128	; 0x80
    948c:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
    948e:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    9490:	429a      	cmp	r2, r3
    9492:	d906      	bls.n	94a2 <at25dfx_chip_write_buffer+0x66>
	}

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    9494:	b005      	add	sp, #20
    9496:	bc3c      	pop	{r2, r3, r4, r5}
    9498:	4690      	mov	r8, r2
    949a:	4699      	mov	r9, r3
    949c:	46a2      	mov	sl, r4
    949e:	46ab      	mov	fp, r5
    94a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    94a2:	682c      	ldr	r4, [r5, #0]
	cpu_irq_enter_critical();
    94a4:	4b9d      	ldr	r3, [pc, #628]	; (971c <at25dfx_chip_write_buffer+0x2e0>)
    94a6:	4798      	blx	r3
	if (module->locked) {
    94a8:	7923      	ldrb	r3, [r4, #4]
    94aa:	2b00      	cmp	r3, #0
    94ac:	d000      	beq.n	94b0 <at25dfx_chip_write_buffer+0x74>
    94ae:	e12e      	b.n	970e <at25dfx_chip_write_buffer+0x2d2>
		module->locked = true;
    94b0:	3301      	adds	r3, #1
    94b2:	7123      	strb	r3, [r4, #4]
	cpu_irq_leave_critical();
    94b4:	4b9a      	ldr	r3, [pc, #616]	; (9720 <at25dfx_chip_write_buffer+0x2e4>)
    94b6:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    94b8:	2306      	movs	r3, #6
    94ba:	aa02      	add	r2, sp, #8
    94bc:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    94be:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    94c0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    94c2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    94c4:	2900      	cmp	r1, #0
    94c6:	d104      	bne.n	94d2 <at25dfx_chip_write_buffer+0x96>
		return &(ports[port_index]->Group[group_index]);
    94c8:	0953      	lsrs	r3, r2, #5
    94ca:	01db      	lsls	r3, r3, #7
    94cc:	4995      	ldr	r1, [pc, #596]	; (9724 <at25dfx_chip_write_buffer+0x2e8>)
    94ce:	468c      	mov	ip, r1
    94d0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    94d2:	211f      	movs	r1, #31
    94d4:	4011      	ands	r1, r2
    94d6:	2201      	movs	r2, #1
    94d8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    94da:	615a      	str	r2, [r3, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    94dc:	2201      	movs	r2, #1
    94de:	a902      	add	r1, sp, #8
    94e0:	6828      	ldr	r0, [r5, #0]
    94e2:	4b91      	ldr	r3, [pc, #580]	; (9728 <at25dfx_chip_write_buffer+0x2ec>)
    94e4:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    94e6:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    94e8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    94ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    94ec:	2900      	cmp	r1, #0
    94ee:	d104      	bne.n	94fa <at25dfx_chip_write_buffer+0xbe>
		return &(ports[port_index]->Group[group_index]);
    94f0:	0953      	lsrs	r3, r2, #5
    94f2:	01db      	lsls	r3, r3, #7
    94f4:	498b      	ldr	r1, [pc, #556]	; (9724 <at25dfx_chip_write_buffer+0x2e8>)
    94f6:	468c      	mov	ip, r1
    94f8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    94fa:	211f      	movs	r1, #31
    94fc:	4011      	ands	r1, r2
    94fe:	2201      	movs	r2, #1
    9500:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    9502:	619a      	str	r2, [r3, #24]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    9504:	22ff      	movs	r2, #255	; 0xff
    9506:	4032      	ands	r2, r6
    9508:	2380      	movs	r3, #128	; 0x80
    950a:	005b      	lsls	r3, r3, #1
    950c:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
    950e:	1c1a      	adds	r2, r3, #0
    9510:	b29b      	uxth	r3, r3
    9512:	42bb      	cmp	r3, r7
    9514:	d900      	bls.n	9518 <at25dfx_chip_write_buffer+0xdc>
    9516:	1c3a      	adds	r2, r7, #0
    9518:	b293      	uxth	r3, r2
    951a:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
    951c:	2302      	movs	r3, #2
    951e:	aa02      	add	r2, sp, #8
    9520:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    9522:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    9524:	0a33      	lsrs	r3, r6, #8
    9526:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    9528:	0c33      	lsrs	r3, r6, #16
    952a:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    952c:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    952e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9530:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9532:	2900      	cmp	r1, #0
    9534:	d104      	bne.n	9540 <at25dfx_chip_write_buffer+0x104>
		return &(ports[port_index]->Group[group_index]);
    9536:	0953      	lsrs	r3, r2, #5
    9538:	01db      	lsls	r3, r3, #7
    953a:	497a      	ldr	r1, [pc, #488]	; (9724 <at25dfx_chip_write_buffer+0x2e8>)
    953c:	468c      	mov	ip, r1
    953e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9540:	211f      	movs	r1, #31
    9542:	4011      	ands	r1, r2
    9544:	2201      	movs	r2, #1
    9546:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    9548:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    954a:	2204      	movs	r2, #4
    954c:	a902      	add	r1, sp, #8
    954e:	6828      	ldr	r0, [r5, #0]
    9550:	4b75      	ldr	r3, [pc, #468]	; (9728 <at25dfx_chip_write_buffer+0x2ec>)
    9552:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
    9554:	4653      	mov	r3, sl
    9556:	2b00      	cmp	r3, #0
    9558:	d145      	bne.n	95e6 <at25dfx_chip_write_buffer+0x1aa>
	port_pin_set_output_level(chip->cs_pin, true);
    955a:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    955c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    955e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9560:	2900      	cmp	r1, #0
    9562:	d104      	bne.n	956e <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
    9564:	0953      	lsrs	r3, r2, #5
    9566:	01db      	lsls	r3, r3, #7
    9568:	496e      	ldr	r1, [pc, #440]	; (9724 <at25dfx_chip_write_buffer+0x2e8>)
    956a:	468c      	mov	ip, r1
    956c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    956e:	211f      	movs	r1, #31
    9570:	4011      	ands	r1, r2
    9572:	2201      	movs	r2, #1
    9574:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    9576:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9578:	682b      	ldr	r3, [r5, #0]
    957a:	6819      	ldr	r1, [r3, #0]
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    957c:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    957e:	7e0b      	ldrb	r3, [r1, #24]
    9580:	4213      	tst	r3, r2
    9582:	d0fc      	beq.n	957e <at25dfx_chip_write_buffer+0x142>
	port_pin_set_output_level(chip->cs_pin, false);
    9584:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    9586:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9588:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    958a:	2900      	cmp	r1, #0
    958c:	d104      	bne.n	9598 <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
    958e:	0953      	lsrs	r3, r2, #5
    9590:	01db      	lsls	r3, r3, #7
    9592:	4964      	ldr	r1, [pc, #400]	; (9724 <at25dfx_chip_write_buffer+0x2e8>)
    9594:	468c      	mov	ip, r1
    9596:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9598:	211f      	movs	r1, #31
    959a:	4011      	ands	r1, r2
    959c:	2201      	movs	r2, #1
    959e:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    95a0:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    95a2:	682b      	ldr	r3, [r5, #0]
    95a4:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    95a6:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    95a8:	07d2      	lsls	r2, r2, #31
    95aa:	d501      	bpl.n	95b0 <at25dfx_chip_write_buffer+0x174>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    95ac:	2205      	movs	r2, #5
    95ae:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    95b0:	6828      	ldr	r0, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    95b2:	6802      	ldr	r2, [r0, #0]
    95b4:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    95b6:	7e13      	ldrb	r3, [r2, #24]
    95b8:	420b      	tst	r3, r1
    95ba:	d0fc      	beq.n	95b6 <at25dfx_chip_write_buffer+0x17a>
    95bc:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    95be:	2400      	movs	r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    95c0:	075b      	lsls	r3, r3, #29
    95c2:	d509      	bpl.n	95d8 <at25dfx_chip_write_buffer+0x19c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    95c4:	8b53      	ldrh	r3, [r2, #26]
    95c6:	075b      	lsls	r3, r3, #29
    95c8:	d501      	bpl.n	95ce <at25dfx_chip_write_buffer+0x192>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    95ca:	2304      	movs	r3, #4
    95cc:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    95ce:	7983      	ldrb	r3, [r0, #6]
    95d0:	2b01      	cmp	r3, #1
    95d2:	d00e      	beq.n	95f2 <at25dfx_chip_write_buffer+0x1b6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    95d4:	6a94      	ldr	r4, [r2, #40]	; 0x28
    95d6:	b2e4      	uxtb	r4, r4

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    95d8:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    95da:	2300      	movs	r3, #0
    95dc:	4698      	mov	r8, r3
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    95de:	2004      	movs	r0, #4
    95e0:	46b4      	mov	ip, r6
    95e2:	002e      	movs	r6, r5
    95e4:	e010      	b.n	9608 <at25dfx_chip_write_buffer+0x1cc>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    95e6:	4652      	mov	r2, sl
    95e8:	9901      	ldr	r1, [sp, #4]
    95ea:	6828      	ldr	r0, [r5, #0]
    95ec:	4b4e      	ldr	r3, [pc, #312]	; (9728 <at25dfx_chip_write_buffer+0x2ec>)
    95ee:	4798      	blx	r3
    95f0:	e7b3      	b.n	955a <at25dfx_chip_write_buffer+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    95f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    95f4:	05db      	lsls	r3, r3, #23
    95f6:	0ddc      	lsrs	r4, r3, #23
    95f8:	e7ee      	b.n	95d8 <at25dfx_chip_write_buffer+0x19c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    95fa:	79ab      	ldrb	r3, [r5, #6]
    95fc:	2b01      	cmp	r3, #1
    95fe:	d01a      	beq.n	9636 <at25dfx_chip_write_buffer+0x1fa>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    9600:	6a94      	ldr	r4, [r2, #40]	; 0x28
    9602:	b2e4      	uxtb	r4, r4
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    9604:	4221      	tst	r1, r4
    9606:	d01a      	beq.n	963e <at25dfx_chip_write_buffer+0x202>
	SercomSpi *const spi_module = &(module->hw->SPI);
    9608:	6833      	ldr	r3, [r6, #0]
    960a:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    960c:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    960e:	420b      	tst	r3, r1
    9610:	d0fc      	beq.n	960c <at25dfx_chip_write_buffer+0x1d0>
    9612:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    9614:	420b      	tst	r3, r1
    9616:	d001      	beq.n	961c <at25dfx_chip_write_buffer+0x1e0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    9618:	4643      	mov	r3, r8
    961a:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    961c:	6835      	ldr	r5, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    961e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    9620:	7e13      	ldrb	r3, [r2, #24]
    9622:	4203      	tst	r3, r0
    9624:	d0fc      	beq.n	9620 <at25dfx_chip_write_buffer+0x1e4>
    9626:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    9628:	4203      	tst	r3, r0
    962a:	d0eb      	beq.n	9604 <at25dfx_chip_write_buffer+0x1c8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    962c:	8b53      	ldrh	r3, [r2, #26]
    962e:	4203      	tst	r3, r0
    9630:	d0e3      	beq.n	95fa <at25dfx_chip_write_buffer+0x1be>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9632:	8350      	strh	r0, [r2, #26]
    9634:	e7e1      	b.n	95fa <at25dfx_chip_write_buffer+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    9636:	6a94      	ldr	r4, [r2, #40]	; 0x28
    9638:	05e4      	lsls	r4, r4, #23
    963a:	0de4      	lsrs	r4, r4, #23
    963c:	e7e2      	b.n	9604 <at25dfx_chip_write_buffer+0x1c8>
    963e:	0035      	movs	r5, r6
    9640:	4666      	mov	r6, ip
	port_pin_set_output_level(chip->cs_pin, true);
    9642:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    9644:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9646:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9648:	2900      	cmp	r1, #0
    964a:	d104      	bne.n	9656 <at25dfx_chip_write_buffer+0x21a>
		return &(ports[port_index]->Group[group_index]);
    964c:	0953      	lsrs	r3, r2, #5
    964e:	01db      	lsls	r3, r3, #7
    9650:	4934      	ldr	r1, [pc, #208]	; (9724 <at25dfx_chip_write_buffer+0x2e8>)
    9652:	468c      	mov	ip, r1
    9654:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9656:	211f      	movs	r1, #31
    9658:	4011      	ands	r1, r2
    965a:	2201      	movs	r2, #1
    965c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    965e:	619a      	str	r2, [r3, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
    9660:	2010      	movs	r0, #16
	if (status_reg & AT25DFX_STATUS_ERROR) {
    9662:	06a3      	lsls	r3, r4, #26
    9664:	d44f      	bmi.n	9706 <at25dfx_chip_write_buffer+0x2ca>
	length -= cmd.length;
    9666:	4653      	mov	r3, sl
    9668:	1aff      	subs	r7, r7, r3
    966a:	b2bb      	uxth	r3, r7
    966c:	0019      	movs	r1, r3
	while (length && (status == STATUS_OK)) {
    966e:	9a01      	ldr	r2, [sp, #4]
    9670:	4691      	mov	r9, r2
	}
	return STATUS_OK;
    9672:	2000      	movs	r0, #0
    9674:	2b00      	cmp	r3, #0
    9676:	d046      	beq.n	9706 <at25dfx_chip_write_buffer+0x2ca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9678:	231f      	movs	r3, #31
    967a:	469b      	mov	fp, r3
    967c:	2401      	movs	r4, #1
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    967e:	4b2a      	ldr	r3, [pc, #168]	; (9728 <at25dfx_chip_write_buffer+0x2ec>)
    9680:	4698      	mov	r8, r3
    9682:	4653      	mov	r3, sl
    9684:	9301      	str	r3, [sp, #4]
    9686:	468a      	mov	sl, r1
    9688:	e058      	b.n	973c <at25dfx_chip_write_buffer+0x300>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    968a:	001a      	movs	r2, r3
    968c:	4649      	mov	r1, r9
    968e:	6828      	ldr	r0, [r5, #0]
    9690:	4b25      	ldr	r3, [pc, #148]	; (9728 <at25dfx_chip_write_buffer+0x2ec>)
    9692:	4798      	blx	r3
    9694:	e0a4      	b.n	97e0 <at25dfx_chip_write_buffer+0x3a4>
    9696:	6a90      	ldr	r0, [r2, #40]	; 0x28
    9698:	05c0      	lsls	r0, r0, #23
    969a:	0dc0      	lsrs	r0, r0, #23
    969c:	e0e1      	b.n	9862 <at25dfx_chip_write_buffer+0x426>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    969e:	79bb      	ldrb	r3, [r7, #6]
    96a0:	2b01      	cmp	r3, #1
    96a2:	d01a      	beq.n	96da <at25dfx_chip_write_buffer+0x29e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    96a4:	6a90      	ldr	r0, [r2, #40]	; 0x28
    96a6:	b2c0      	uxtb	r0, r0
	} while (status_reg & AT25DFX_STATUS_BUSY);
    96a8:	4204      	tst	r4, r0
    96aa:	d01a      	beq.n	96e2 <at25dfx_chip_write_buffer+0x2a6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    96ac:	682b      	ldr	r3, [r5, #0]
    96ae:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    96b0:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    96b2:	4223      	tst	r3, r4
    96b4:	d0fc      	beq.n	96b0 <at25dfx_chip_write_buffer+0x274>
    96b6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    96b8:	4223      	tst	r3, r4
    96ba:	d001      	beq.n	96c0 <at25dfx_chip_write_buffer+0x284>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    96bc:	2300      	movs	r3, #0
    96be:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    96c0:	682f      	ldr	r7, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    96c2:	683a      	ldr	r2, [r7, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    96c4:	7e13      	ldrb	r3, [r2, #24]
    96c6:	420b      	tst	r3, r1
    96c8:	d0fc      	beq.n	96c4 <at25dfx_chip_write_buffer+0x288>
    96ca:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    96cc:	420b      	tst	r3, r1
    96ce:	d0eb      	beq.n	96a8 <at25dfx_chip_write_buffer+0x26c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    96d0:	8b53      	ldrh	r3, [r2, #26]
    96d2:	420b      	tst	r3, r1
    96d4:	d0e3      	beq.n	969e <at25dfx_chip_write_buffer+0x262>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    96d6:	8351      	strh	r1, [r2, #26]
    96d8:	e7e1      	b.n	969e <at25dfx_chip_write_buffer+0x262>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    96da:	6a90      	ldr	r0, [r2, #40]	; 0x28
    96dc:	05c0      	lsls	r0, r0, #23
    96de:	0dc0      	lsrs	r0, r0, #23
    96e0:	e7e2      	b.n	96a8 <at25dfx_chip_write_buffer+0x26c>
	port_pin_set_output_level(chip->cs_pin, true);
    96e2:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    96e4:	09d9      	lsrs	r1, r3, #7
		return NULL;
    96e6:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    96e8:	2900      	cmp	r1, #0
    96ea:	d104      	bne.n	96f6 <at25dfx_chip_write_buffer+0x2ba>
		return &(ports[port_index]->Group[group_index]);
    96ec:	095a      	lsrs	r2, r3, #5
    96ee:	01d2      	lsls	r2, r2, #7
    96f0:	490c      	ldr	r1, [pc, #48]	; (9724 <at25dfx_chip_write_buffer+0x2e8>)
    96f2:	468c      	mov	ip, r1
    96f4:	4462      	add	r2, ip
    96f6:	4659      	mov	r1, fp
    96f8:	400b      	ands	r3, r1
    96fa:	0021      	movs	r1, r4
    96fc:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    96fe:	6191      	str	r1, [r2, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    9700:	0683      	lsls	r3, r0, #26
    9702:	d513      	bpl.n	972c <at25dfx_chip_write_buffer+0x2f0>
		return STATUS_ERR_IO;
    9704:	2010      	movs	r0, #16
	_at25dfx_spi_unlock(chip->spi);
    9706:	682b      	ldr	r3, [r5, #0]
	module->locked = false;
    9708:	2200      	movs	r2, #0
    970a:	711a      	strb	r2, [r3, #4]
	return status;
    970c:	e6c2      	b.n	9494 <at25dfx_chip_write_buffer+0x58>
    970e:	4b04      	ldr	r3, [pc, #16]	; (9720 <at25dfx_chip_write_buffer+0x2e4>)
    9710:	4798      	blx	r3
		return status;
    9712:	2005      	movs	r0, #5
    9714:	e6be      	b.n	9494 <at25dfx_chip_write_buffer+0x58>
    9716:	46c0      	nop			; (mov r8, r8)
    9718:	000130dc 	.word	0x000130dc
    971c:	0000cfad 	.word	0x0000cfad
    9720:	0000cfed 	.word	0x0000cfed
    9724:	41004400 	.word	0x41004400
    9728:	0000dd11 	.word	0x0000dd11
		length -= cmd.length;
    972c:	4653      	mov	r3, sl
    972e:	9a01      	ldr	r2, [sp, #4]
    9730:	1a9b      	subs	r3, r3, r2
    9732:	b29b      	uxth	r3, r3
    9734:	469a      	mov	sl, r3
	while (length && (status == STATUS_OK)) {
    9736:	2b00      	cmp	r3, #0
    9738:	d100      	bne.n	973c <at25dfx_chip_write_buffer+0x300>
    973a:	e094      	b.n	9866 <at25dfx_chip_write_buffer+0x42a>
	cmd_buffer[0] = cmd.opcode;
    973c:	ab02      	add	r3, sp, #8
    973e:	2206      	movs	r2, #6
    9740:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    9742:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    9744:	09d9      	lsrs	r1, r3, #7
		return NULL;
    9746:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    9748:	2900      	cmp	r1, #0
    974a:	d104      	bne.n	9756 <at25dfx_chip_write_buffer+0x31a>
		return &(ports[port_index]->Group[group_index]);
    974c:	095a      	lsrs	r2, r3, #5
    974e:	01d2      	lsls	r2, r2, #7
    9750:	4946      	ldr	r1, [pc, #280]	; (986c <at25dfx_chip_write_buffer+0x430>)
    9752:	468c      	mov	ip, r1
    9754:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9756:	4659      	mov	r1, fp
    9758:	400b      	ands	r3, r1
    975a:	0021      	movs	r1, r4
    975c:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    975e:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    9760:	0022      	movs	r2, r4
    9762:	a902      	add	r1, sp, #8
    9764:	6828      	ldr	r0, [r5, #0]
    9766:	47c0      	blx	r8
	port_pin_set_output_level(chip->cs_pin, true);
    9768:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    976a:	09d9      	lsrs	r1, r3, #7
		return NULL;
    976c:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    976e:	2900      	cmp	r1, #0
    9770:	d104      	bne.n	977c <at25dfx_chip_write_buffer+0x340>
		return &(ports[port_index]->Group[group_index]);
    9772:	095a      	lsrs	r2, r3, #5
    9774:	01d2      	lsls	r2, r2, #7
    9776:	493d      	ldr	r1, [pc, #244]	; (986c <at25dfx_chip_write_buffer+0x430>)
    9778:	468c      	mov	ip, r1
    977a:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    977c:	4659      	mov	r1, fp
    977e:	400b      	ands	r3, r1
    9780:	0021      	movs	r1, r4
    9782:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    9784:	6191      	str	r1, [r2, #24]
		cmd.address += cmd.length;
    9786:	9a01      	ldr	r2, [sp, #4]
    9788:	4694      	mov	ip, r2
    978a:	4466      	add	r6, ip
		cmd.data.tx += cmd.length;
    978c:	44e1      	add	r9, ip
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    978e:	4657      	mov	r7, sl
    9790:	2380      	movs	r3, #128	; 0x80
    9792:	005b      	lsls	r3, r3, #1
    9794:	459a      	cmp	sl, r3
    9796:	d901      	bls.n	979c <at25dfx_chip_write_buffer+0x360>
    9798:	4b35      	ldr	r3, [pc, #212]	; (9870 <at25dfx_chip_write_buffer+0x434>)
    979a:	881f      	ldrh	r7, [r3, #0]
    979c:	b2bb      	uxth	r3, r7
    979e:	9301      	str	r3, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
    97a0:	2302      	movs	r3, #2
    97a2:	aa02      	add	r2, sp, #8
    97a4:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    97a6:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    97a8:	0a33      	lsrs	r3, r6, #8
    97aa:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    97ac:	0c33      	lsrs	r3, r6, #16
    97ae:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    97b0:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    97b2:	09d9      	lsrs	r1, r3, #7
		return NULL;
    97b4:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    97b6:	2900      	cmp	r1, #0
    97b8:	d104      	bne.n	97c4 <at25dfx_chip_write_buffer+0x388>
		return &(ports[port_index]->Group[group_index]);
    97ba:	095a      	lsrs	r2, r3, #5
    97bc:	01d2      	lsls	r2, r2, #7
    97be:	492b      	ldr	r1, [pc, #172]	; (986c <at25dfx_chip_write_buffer+0x430>)
    97c0:	468c      	mov	ip, r1
    97c2:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    97c4:	4659      	mov	r1, fp
    97c6:	400b      	ands	r3, r1
    97c8:	0021      	movs	r1, r4
    97ca:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    97cc:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    97ce:	2204      	movs	r2, #4
    97d0:	a902      	add	r1, sp, #8
    97d2:	6828      	ldr	r0, [r5, #0]
    97d4:	4b27      	ldr	r3, [pc, #156]	; (9874 <at25dfx_chip_write_buffer+0x438>)
    97d6:	4798      	blx	r3
	if (cmd.length) {
    97d8:	9b01      	ldr	r3, [sp, #4]
    97da:	2b00      	cmp	r3, #0
    97dc:	d000      	beq.n	97e0 <at25dfx_chip_write_buffer+0x3a4>
    97de:	e754      	b.n	968a <at25dfx_chip_write_buffer+0x24e>
	port_pin_set_output_level(chip->cs_pin, true);
    97e0:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    97e2:	09d9      	lsrs	r1, r3, #7
		return NULL;
    97e4:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    97e6:	2900      	cmp	r1, #0
    97e8:	d104      	bne.n	97f4 <at25dfx_chip_write_buffer+0x3b8>
		return &(ports[port_index]->Group[group_index]);
    97ea:	095a      	lsrs	r2, r3, #5
    97ec:	01d2      	lsls	r2, r2, #7
    97ee:	491f      	ldr	r1, [pc, #124]	; (986c <at25dfx_chip_write_buffer+0x430>)
    97f0:	468c      	mov	ip, r1
    97f2:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    97f4:	4659      	mov	r1, fp
    97f6:	400b      	ands	r3, r1
    97f8:	0021      	movs	r1, r4
    97fa:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    97fc:	6191      	str	r1, [r2, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    97fe:	682b      	ldr	r3, [r5, #0]
    9800:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    9802:	7e13      	ldrb	r3, [r2, #24]
	while (!spi_is_ready_to_write(chip->spi)) {
    9804:	4223      	tst	r3, r4
    9806:	d0fc      	beq.n	9802 <at25dfx_chip_write_buffer+0x3c6>
	port_pin_set_output_level(chip->cs_pin, false);
    9808:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    980a:	09d9      	lsrs	r1, r3, #7
		return NULL;
    980c:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    980e:	2900      	cmp	r1, #0
    9810:	d104      	bne.n	981c <at25dfx_chip_write_buffer+0x3e0>
		return &(ports[port_index]->Group[group_index]);
    9812:	095a      	lsrs	r2, r3, #5
    9814:	01d2      	lsls	r2, r2, #7
    9816:	4915      	ldr	r1, [pc, #84]	; (986c <at25dfx_chip_write_buffer+0x430>)
    9818:	468c      	mov	ip, r1
    981a:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    981c:	4659      	mov	r1, fp
    981e:	400b      	ands	r3, r1
    9820:	0021      	movs	r1, r4
    9822:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    9824:	6151      	str	r1, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9826:	682b      	ldr	r3, [r5, #0]
    9828:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    982a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    982c:	4222      	tst	r2, r4
    982e:	d001      	beq.n	9834 <at25dfx_chip_write_buffer+0x3f8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    9830:	2205      	movs	r2, #5
    9832:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    9834:	682b      	ldr	r3, [r5, #0]
    9836:	469c      	mov	ip, r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    9838:	681a      	ldr	r2, [r3, #0]
    983a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    983c:	7e13      	ldrb	r3, [r2, #24]
    983e:	420b      	tst	r3, r1
    9840:	d0fc      	beq.n	983c <at25dfx_chip_write_buffer+0x400>
    9842:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    9844:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    9846:	075b      	lsls	r3, r3, #29
    9848:	d50b      	bpl.n	9862 <at25dfx_chip_write_buffer+0x426>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    984a:	8b53      	ldrh	r3, [r2, #26]
    984c:	075b      	lsls	r3, r3, #29
    984e:	d501      	bpl.n	9854 <at25dfx_chip_write_buffer+0x418>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9850:	2304      	movs	r3, #4
    9852:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9854:	4663      	mov	r3, ip
    9856:	799b      	ldrb	r3, [r3, #6]
    9858:	2b01      	cmp	r3, #1
    985a:	d100      	bne.n	985e <at25dfx_chip_write_buffer+0x422>
    985c:	e71b      	b.n	9696 <at25dfx_chip_write_buffer+0x25a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    985e:	6a90      	ldr	r0, [r2, #40]	; 0x28
    9860:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_read(chip->spi)) {
    9862:	2104      	movs	r1, #4
    9864:	e722      	b.n	96ac <at25dfx_chip_write_buffer+0x270>
	return STATUS_OK;
    9866:	2000      	movs	r0, #0
    9868:	e74d      	b.n	9706 <at25dfx_chip_write_buffer+0x2ca>
    986a:	46c0      	nop			; (mov r8, r8)
    986c:	41004400 	.word	0x41004400
    9870:	000130d8 	.word	0x000130d8
    9874:	0000dd11 	.word	0x0000dd11

00009878 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    9878:	b5f0      	push	{r4, r5, r6, r7, lr}
    987a:	b083      	sub	sp, #12
    987c:	0004      	movs	r4, r0
    987e:	000e      	movs	r6, r1
    9880:	0015      	movs	r5, r2
	switch (type) {
    9882:	7903      	ldrb	r3, [r0, #4]
    9884:	2b09      	cmp	r3, #9
    9886:	d900      	bls.n	988a <at25dfx_chip_erase_block+0x12>
    9888:	e0f2      	b.n	9a70 <at25dfx_chip_erase_block+0x1f8>
    988a:	009b      	lsls	r3, r3, #2
    988c:	4a7b      	ldr	r2, [pc, #492]	; (9a7c <at25dfx_chip_erase_block+0x204>)
    988e:	58d3      	ldr	r3, [r2, r3]
    9890:	469f      	mov	pc, r3
		return 256 * 1024UL;
    9892:	2380      	movs	r3, #128	; 0x80
    9894:	02db      	lsls	r3, r3, #11
    9896:	e010      	b.n	98ba <at25dfx_chip_erase_block+0x42>
		return 512 * 1024UL;
    9898:	2380      	movs	r3, #128	; 0x80
    989a:	031b      	lsls	r3, r3, #12
    989c:	e00d      	b.n	98ba <at25dfx_chip_erase_block+0x42>
		return 1024 * 1024UL;
    989e:	2380      	movs	r3, #128	; 0x80
    98a0:	035b      	lsls	r3, r3, #13
    98a2:	e00a      	b.n	98ba <at25dfx_chip_erase_block+0x42>
		return 2048 * 1024UL;
    98a4:	2380      	movs	r3, #128	; 0x80
    98a6:	039b      	lsls	r3, r3, #14
    98a8:	e007      	b.n	98ba <at25dfx_chip_erase_block+0x42>
		return 4096 * 1024UL;
    98aa:	2380      	movs	r3, #128	; 0x80
    98ac:	03db      	lsls	r3, r3, #15
    98ae:	e004      	b.n	98ba <at25dfx_chip_erase_block+0x42>
		return 8192 * 1024UL;
    98b0:	2380      	movs	r3, #128	; 0x80
    98b2:	041b      	lsls	r3, r3, #16
    98b4:	e001      	b.n	98ba <at25dfx_chip_erase_block+0x42>
		return 64 * 1024UL;
    98b6:	2380      	movs	r3, #128	; 0x80
    98b8:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
    98ba:	2017      	movs	r0, #23
	if (address >= _at25dfx_get_device_size(chip->type)) {
    98bc:	42b3      	cmp	r3, r6
    98be:	d801      	bhi.n	98c4 <at25dfx_chip_erase_block+0x4c>
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    98c0:	b003      	add	sp, #12
    98c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    98c4:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
    98c6:	4b6e      	ldr	r3, [pc, #440]	; (9a80 <at25dfx_chip_erase_block+0x208>)
    98c8:	4798      	blx	r3
	if (module->locked) {
    98ca:	793b      	ldrb	r3, [r7, #4]
    98cc:	2b00      	cmp	r3, #0
    98ce:	d000      	beq.n	98d2 <at25dfx_chip_erase_block+0x5a>
    98d0:	e0d0      	b.n	9a74 <at25dfx_chip_erase_block+0x1fc>
		module->locked = true;
    98d2:	3301      	adds	r3, #1
    98d4:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
    98d6:	4b6b      	ldr	r3, [pc, #428]	; (9a84 <at25dfx_chip_erase_block+0x20c>)
    98d8:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    98da:	2306      	movs	r3, #6
    98dc:	466a      	mov	r2, sp
    98de:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    98e0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    98e2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    98e4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    98e6:	2900      	cmp	r1, #0
    98e8:	d104      	bne.n	98f4 <at25dfx_chip_erase_block+0x7c>
		return &(ports[port_index]->Group[group_index]);
    98ea:	0953      	lsrs	r3, r2, #5
    98ec:	01db      	lsls	r3, r3, #7
    98ee:	4966      	ldr	r1, [pc, #408]	; (9a88 <at25dfx_chip_erase_block+0x210>)
    98f0:	468c      	mov	ip, r1
    98f2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    98f4:	211f      	movs	r1, #31
    98f6:	4011      	ands	r1, r2
    98f8:	2201      	movs	r2, #1
    98fa:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    98fc:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    98fe:	2201      	movs	r2, #1
    9900:	4669      	mov	r1, sp
    9902:	6820      	ldr	r0, [r4, #0]
    9904:	4b61      	ldr	r3, [pc, #388]	; (9a8c <at25dfx_chip_erase_block+0x214>)
    9906:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    9908:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    990a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    990c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    990e:	2900      	cmp	r1, #0
    9910:	d104      	bne.n	991c <at25dfx_chip_erase_block+0xa4>
		return &(ports[port_index]->Group[group_index]);
    9912:	0953      	lsrs	r3, r2, #5
    9914:	01db      	lsls	r3, r3, #7
    9916:	495c      	ldr	r1, [pc, #368]	; (9a88 <at25dfx_chip_erase_block+0x210>)
    9918:	468c      	mov	ip, r1
    991a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    991c:	211f      	movs	r1, #31
    991e:	4011      	ands	r1, r2
    9920:	2201      	movs	r2, #1
    9922:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    9924:	619a      	str	r2, [r3, #24]
	switch (block_size) {
    9926:	2d01      	cmp	r5, #1
    9928:	d006      	beq.n	9938 <at25dfx_chip_erase_block+0xc0>
    992a:	2d00      	cmp	r5, #0
    992c:	d063      	beq.n	99f6 <at25dfx_chip_erase_block+0x17e>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    992e:	23d8      	movs	r3, #216	; 0xd8
	switch (block_size) {
    9930:	2d02      	cmp	r5, #2
    9932:	d002      	beq.n	993a <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = (enum at25dfx_command_opcode)0;
    9934:	2300      	movs	r3, #0
    9936:	e000      	b.n	993a <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    9938:	2352      	movs	r3, #82	; 0x52
	cmd_buffer[0] = cmd.opcode;
    993a:	466a      	mov	r2, sp
    993c:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    993e:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    9940:	0a33      	lsrs	r3, r6, #8
    9942:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    9944:	0c36      	lsrs	r6, r6, #16
    9946:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    9948:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    994a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    994c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    994e:	2900      	cmp	r1, #0
    9950:	d104      	bne.n	995c <at25dfx_chip_erase_block+0xe4>
		return &(ports[port_index]->Group[group_index]);
    9952:	0953      	lsrs	r3, r2, #5
    9954:	01db      	lsls	r3, r3, #7
    9956:	494c      	ldr	r1, [pc, #304]	; (9a88 <at25dfx_chip_erase_block+0x210>)
    9958:	468c      	mov	ip, r1
    995a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    995c:	211f      	movs	r1, #31
    995e:	4011      	ands	r1, r2
    9960:	2201      	movs	r2, #1
    9962:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    9964:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    9966:	2204      	movs	r2, #4
    9968:	4669      	mov	r1, sp
    996a:	6820      	ldr	r0, [r4, #0]
    996c:	4b47      	ldr	r3, [pc, #284]	; (9a8c <at25dfx_chip_erase_block+0x214>)
    996e:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    9970:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    9972:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9974:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9976:	2900      	cmp	r1, #0
    9978:	d104      	bne.n	9984 <at25dfx_chip_erase_block+0x10c>
		return &(ports[port_index]->Group[group_index]);
    997a:	0953      	lsrs	r3, r2, #5
    997c:	01db      	lsls	r3, r3, #7
    997e:	4942      	ldr	r1, [pc, #264]	; (9a88 <at25dfx_chip_erase_block+0x210>)
    9980:	468c      	mov	ip, r1
    9982:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9984:	211f      	movs	r1, #31
    9986:	4011      	ands	r1, r2
    9988:	2201      	movs	r2, #1
    998a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    998c:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    998e:	6823      	ldr	r3, [r4, #0]
    9990:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
    9992:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    9994:	7e0b      	ldrb	r3, [r1, #24]
    9996:	4213      	tst	r3, r2
    9998:	d0fc      	beq.n	9994 <at25dfx_chip_erase_block+0x11c>
	port_pin_set_output_level(chip->cs_pin, false);
    999a:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    999c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    999e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    99a0:	2900      	cmp	r1, #0
    99a2:	d104      	bne.n	99ae <at25dfx_chip_erase_block+0x136>
		return &(ports[port_index]->Group[group_index]);
    99a4:	0953      	lsrs	r3, r2, #5
    99a6:	01db      	lsls	r3, r3, #7
    99a8:	4937      	ldr	r1, [pc, #220]	; (9a88 <at25dfx_chip_erase_block+0x210>)
    99aa:	468c      	mov	ip, r1
    99ac:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    99ae:	211f      	movs	r1, #31
    99b0:	4011      	ands	r1, r2
    99b2:	2201      	movs	r2, #1
    99b4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    99b6:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    99b8:	6823      	ldr	r3, [r4, #0]
    99ba:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    99bc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    99be:	07d2      	lsls	r2, r2, #31
    99c0:	d501      	bpl.n	99c6 <at25dfx_chip_erase_block+0x14e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    99c2:	2205      	movs	r2, #5
    99c4:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    99c6:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    99c8:	6802      	ldr	r2, [r0, #0]
    99ca:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    99cc:	7e13      	ldrb	r3, [r2, #24]
    99ce:	420b      	tst	r3, r1
    99d0:	d0fc      	beq.n	99cc <at25dfx_chip_erase_block+0x154>
    99d2:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    99d4:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    99d6:	075b      	lsls	r3, r3, #29
    99d8:	d509      	bpl.n	99ee <at25dfx_chip_erase_block+0x176>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    99da:	8b53      	ldrh	r3, [r2, #26]
    99dc:	075b      	lsls	r3, r3, #29
    99de:	d501      	bpl.n	99e4 <at25dfx_chip_erase_block+0x16c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    99e0:	2304      	movs	r3, #4
    99e2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    99e4:	7983      	ldrb	r3, [r0, #6]
    99e6:	2b01      	cmp	r3, #1
    99e8:	d007      	beq.n	99fa <at25dfx_chip_erase_block+0x182>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    99ea:	6a95      	ldr	r5, [r2, #40]	; 0x28
    99ec:	b2ed      	uxtb	r5, r5
		while (!spi_is_ready_to_write(chip->spi)) {
    99ee:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    99f0:	2700      	movs	r7, #0
		while (!spi_is_ready_to_read(chip->spi)) {
    99f2:	2004      	movs	r0, #4
    99f4:	e00c      	b.n	9a10 <at25dfx_chip_erase_block+0x198>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    99f6:	2320      	movs	r3, #32
    99f8:	e79f      	b.n	993a <at25dfx_chip_erase_block+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    99fa:	6a95      	ldr	r5, [r2, #40]	; 0x28
    99fc:	05ed      	lsls	r5, r5, #23
    99fe:	0ded      	lsrs	r5, r5, #23
    9a00:	e7f5      	b.n	99ee <at25dfx_chip_erase_block+0x176>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9a02:	79b3      	ldrb	r3, [r6, #6]
    9a04:	2b01      	cmp	r3, #1
    9a06:	d019      	beq.n	9a3c <at25dfx_chip_erase_block+0x1c4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    9a08:	6a95      	ldr	r5, [r2, #40]	; 0x28
    9a0a:	b2ed      	uxtb	r5, r5
	} while (status_reg & AT25DFX_STATUS_BUSY);
    9a0c:	4229      	tst	r1, r5
    9a0e:	d019      	beq.n	9a44 <at25dfx_chip_erase_block+0x1cc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    9a10:	6823      	ldr	r3, [r4, #0]
    9a12:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    9a14:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    9a16:	420b      	tst	r3, r1
    9a18:	d0fc      	beq.n	9a14 <at25dfx_chip_erase_block+0x19c>
    9a1a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    9a1c:	420b      	tst	r3, r1
    9a1e:	d000      	beq.n	9a22 <at25dfx_chip_erase_block+0x1aa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    9a20:	6297      	str	r7, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    9a22:	6826      	ldr	r6, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9a24:	6832      	ldr	r2, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    9a26:	7e13      	ldrb	r3, [r2, #24]
    9a28:	4203      	tst	r3, r0
    9a2a:	d0fc      	beq.n	9a26 <at25dfx_chip_erase_block+0x1ae>
    9a2c:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    9a2e:	4203      	tst	r3, r0
    9a30:	d0ec      	beq.n	9a0c <at25dfx_chip_erase_block+0x194>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    9a32:	8b53      	ldrh	r3, [r2, #26]
    9a34:	4203      	tst	r3, r0
    9a36:	d0e4      	beq.n	9a02 <at25dfx_chip_erase_block+0x18a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9a38:	8350      	strh	r0, [r2, #26]
    9a3a:	e7e2      	b.n	9a02 <at25dfx_chip_erase_block+0x18a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    9a3c:	6a95      	ldr	r5, [r2, #40]	; 0x28
    9a3e:	05ed      	lsls	r5, r5, #23
    9a40:	0ded      	lsrs	r5, r5, #23
    9a42:	e7e3      	b.n	9a0c <at25dfx_chip_erase_block+0x194>
	port_pin_set_output_level(chip->cs_pin, true);
    9a44:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    9a46:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9a48:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9a4a:	2900      	cmp	r1, #0
    9a4c:	d104      	bne.n	9a58 <at25dfx_chip_erase_block+0x1e0>
		return &(ports[port_index]->Group[group_index]);
    9a4e:	0953      	lsrs	r3, r2, #5
    9a50:	01db      	lsls	r3, r3, #7
    9a52:	490d      	ldr	r1, [pc, #52]	; (9a88 <at25dfx_chip_erase_block+0x210>)
    9a54:	468c      	mov	ip, r1
    9a56:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9a58:	211f      	movs	r1, #31
    9a5a:	4011      	ands	r1, r2
    9a5c:	2201      	movs	r2, #1
    9a5e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    9a60:	619a      	str	r2, [r3, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    9a62:	06a8      	lsls	r0, r5, #26
	return STATUS_OK;
    9a64:	0fc0      	lsrs	r0, r0, #31
    9a66:	0100      	lsls	r0, r0, #4
	_at25dfx_spi_unlock(chip->spi);
    9a68:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    9a6a:	2200      	movs	r2, #0
    9a6c:	711a      	strb	r2, [r3, #4]
	return status;
    9a6e:	e727      	b.n	98c0 <at25dfx_chip_erase_block+0x48>
		return STATUS_ERR_INVALID_ARG;
    9a70:	2017      	movs	r0, #23
    9a72:	e725      	b.n	98c0 <at25dfx_chip_erase_block+0x48>
    9a74:	4b03      	ldr	r3, [pc, #12]	; (9a84 <at25dfx_chip_erase_block+0x20c>)
    9a76:	4798      	blx	r3
		return status;
    9a78:	2005      	movs	r0, #5
    9a7a:	e721      	b.n	98c0 <at25dfx_chip_erase_block+0x48>
    9a7c:	00013104 	.word	0x00013104
    9a80:	0000cfad 	.word	0x0000cfad
    9a84:	0000cfed 	.word	0x0000cfed
    9a88:	41004400 	.word	0x41004400
    9a8c:	0000dd11 	.word	0x0000dd11

00009a90 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
    9a90:	b570      	push	{r4, r5, r6, lr}
    9a92:	b082      	sub	sp, #8
    9a94:	0004      	movs	r4, r0
    9a96:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    9a98:	6806      	ldr	r6, [r0, #0]
	cpu_irq_enter_critical();
    9a9a:	4b35      	ldr	r3, [pc, #212]	; (9b70 <at25dfx_chip_set_global_sector_protect+0xe0>)
    9a9c:	4798      	blx	r3
	if (module->locked) {
    9a9e:	7933      	ldrb	r3, [r6, #4]
    9aa0:	2b00      	cmp	r3, #0
    9aa2:	d160      	bne.n	9b66 <at25dfx_chip_set_global_sector_protect+0xd6>
		module->locked = true;
    9aa4:	3301      	adds	r3, #1
    9aa6:	7133      	strb	r3, [r6, #4]
	cpu_irq_leave_critical();
    9aa8:	4b32      	ldr	r3, [pc, #200]	; (9b74 <at25dfx_chip_set_global_sector_protect+0xe4>)
    9aaa:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    9aac:	2306      	movs	r3, #6
    9aae:	466a      	mov	r2, sp
    9ab0:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    9ab2:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    9ab4:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9ab6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9ab8:	2900      	cmp	r1, #0
    9aba:	d104      	bne.n	9ac6 <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
    9abc:	0953      	lsrs	r3, r2, #5
    9abe:	01db      	lsls	r3, r3, #7
    9ac0:	492d      	ldr	r1, [pc, #180]	; (9b78 <at25dfx_chip_set_global_sector_protect+0xe8>)
    9ac2:	468c      	mov	ip, r1
    9ac4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9ac6:	211f      	movs	r1, #31
    9ac8:	4011      	ands	r1, r2
    9aca:	2201      	movs	r2, #1
    9acc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    9ace:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    9ad0:	2201      	movs	r2, #1
    9ad2:	4669      	mov	r1, sp
    9ad4:	6820      	ldr	r0, [r4, #0]
    9ad6:	4b29      	ldr	r3, [pc, #164]	; (9b7c <at25dfx_chip_set_global_sector_protect+0xec>)
    9ad8:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    9ada:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    9adc:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9ade:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9ae0:	2900      	cmp	r1, #0
    9ae2:	d104      	bne.n	9aee <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
    9ae4:	0953      	lsrs	r3, r2, #5
    9ae6:	01db      	lsls	r3, r3, #7
    9ae8:	4923      	ldr	r1, [pc, #140]	; (9b78 <at25dfx_chip_set_global_sector_protect+0xe8>)
    9aea:	468c      	mov	ip, r1
    9aec:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9aee:	211f      	movs	r1, #31
    9af0:	4011      	ands	r1, r2
    9af2:	2201      	movs	r2, #1
    9af4:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    9af6:	619a      	str	r2, [r3, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
    9af8:	233c      	movs	r3, #60	; 0x3c
    9afa:	1e6a      	subs	r2, r5, #1
    9afc:	4195      	sbcs	r5, r2
    9afe:	426d      	negs	r5, r5
    9b00:	402b      	ands	r3, r5
    9b02:	466a      	mov	r2, sp
    9b04:	71d3      	strb	r3, [r2, #7]
	cmd_buffer[0] = cmd.opcode;
    9b06:	2301      	movs	r3, #1
    9b08:	466a      	mov	r2, sp
    9b0a:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    9b0c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    9b0e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9b10:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9b12:	2900      	cmp	r1, #0
    9b14:	d104      	bne.n	9b20 <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
    9b16:	0953      	lsrs	r3, r2, #5
    9b18:	01db      	lsls	r3, r3, #7
    9b1a:	4917      	ldr	r1, [pc, #92]	; (9b78 <at25dfx_chip_set_global_sector_protect+0xe8>)
    9b1c:	468c      	mov	ip, r1
    9b1e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9b20:	211f      	movs	r1, #31
    9b22:	4011      	ands	r1, r2
    9b24:	2201      	movs	r2, #1
    9b26:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    9b28:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    9b2a:	2201      	movs	r2, #1
    9b2c:	4669      	mov	r1, sp
    9b2e:	6820      	ldr	r0, [r4, #0]
    9b30:	4d12      	ldr	r5, [pc, #72]	; (9b7c <at25dfx_chip_set_global_sector_protect+0xec>)
    9b32:	47a8      	blx	r5
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    9b34:	2201      	movs	r2, #1
    9b36:	466b      	mov	r3, sp
    9b38:	1dd9      	adds	r1, r3, #7
    9b3a:	6820      	ldr	r0, [r4, #0]
    9b3c:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    9b3e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    9b40:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9b42:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9b44:	2900      	cmp	r1, #0
    9b46:	d104      	bne.n	9b52 <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
    9b48:	0953      	lsrs	r3, r2, #5
    9b4a:	01db      	lsls	r3, r3, #7
    9b4c:	490a      	ldr	r1, [pc, #40]	; (9b78 <at25dfx_chip_set_global_sector_protect+0xe8>)
    9b4e:	468c      	mov	ip, r1
    9b50:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9b52:	211f      	movs	r1, #31
    9b54:	4011      	ands	r1, r2
    9b56:	2201      	movs	r2, #1
    9b58:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    9b5a:	619a      	str	r2, [r3, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    9b5c:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    9b5e:	2200      	movs	r2, #0
    9b60:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    9b62:	2000      	movs	r0, #0
    9b64:	e002      	b.n	9b6c <at25dfx_chip_set_global_sector_protect+0xdc>
    9b66:	4b03      	ldr	r3, [pc, #12]	; (9b74 <at25dfx_chip_set_global_sector_protect+0xe4>)
    9b68:	4798      	blx	r3
		return status;
    9b6a:	2005      	movs	r0, #5
}
    9b6c:	b002      	add	sp, #8
    9b6e:	bd70      	pop	{r4, r5, r6, pc}
    9b70:	0000cfad 	.word	0x0000cfad
    9b74:	0000cfed 	.word	0x0000cfed
    9b78:	41004400 	.word	0x41004400
    9b7c:	0000dd11 	.word	0x0000dd11

00009b80 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    9b80:	b530      	push	{r4, r5, lr}
    9b82:	b083      	sub	sp, #12
    9b84:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    9b86:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    9b88:	4b1c      	ldr	r3, [pc, #112]	; (9bfc <at25dfx_chip_sleep+0x7c>)
    9b8a:	4798      	blx	r3
	if (module->locked) {
    9b8c:	792b      	ldrb	r3, [r5, #4]
    9b8e:	2b00      	cmp	r3, #0
    9b90:	d12e      	bne.n	9bf0 <at25dfx_chip_sleep+0x70>
		module->locked = true;
    9b92:	3301      	adds	r3, #1
    9b94:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    9b96:	4b1a      	ldr	r3, [pc, #104]	; (9c00 <at25dfx_chip_sleep+0x80>)
    9b98:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    9b9a:	23b9      	movs	r3, #185	; 0xb9
    9b9c:	466a      	mov	r2, sp
    9b9e:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    9ba0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    9ba2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9ba4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9ba6:	2900      	cmp	r1, #0
    9ba8:	d104      	bne.n	9bb4 <at25dfx_chip_sleep+0x34>
		return &(ports[port_index]->Group[group_index]);
    9baa:	0953      	lsrs	r3, r2, #5
    9bac:	01db      	lsls	r3, r3, #7
    9bae:	4915      	ldr	r1, [pc, #84]	; (9c04 <at25dfx_chip_sleep+0x84>)
    9bb0:	468c      	mov	ip, r1
    9bb2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9bb4:	211f      	movs	r1, #31
    9bb6:	4011      	ands	r1, r2
    9bb8:	2201      	movs	r2, #1
    9bba:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    9bbc:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    9bbe:	2201      	movs	r2, #1
    9bc0:	4669      	mov	r1, sp
    9bc2:	6820      	ldr	r0, [r4, #0]
    9bc4:	4b10      	ldr	r3, [pc, #64]	; (9c08 <at25dfx_chip_sleep+0x88>)
    9bc6:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    9bc8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    9bca:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9bcc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9bce:	2900      	cmp	r1, #0
    9bd0:	d104      	bne.n	9bdc <at25dfx_chip_sleep+0x5c>
		return &(ports[port_index]->Group[group_index]);
    9bd2:	0953      	lsrs	r3, r2, #5
    9bd4:	01db      	lsls	r3, r3, #7
    9bd6:	490b      	ldr	r1, [pc, #44]	; (9c04 <at25dfx_chip_sleep+0x84>)
    9bd8:	468c      	mov	ip, r1
    9bda:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9bdc:	211f      	movs	r1, #31
    9bde:	4011      	ands	r1, r2
    9be0:	2201      	movs	r2, #1
    9be2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    9be4:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    9be6:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    9be8:	2200      	movs	r2, #0
    9bea:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    9bec:	2000      	movs	r0, #0
    9bee:	e002      	b.n	9bf6 <at25dfx_chip_sleep+0x76>
    9bf0:	4b03      	ldr	r3, [pc, #12]	; (9c00 <at25dfx_chip_sleep+0x80>)
    9bf2:	4798      	blx	r3
		return status;
    9bf4:	2005      	movs	r0, #5
}
    9bf6:	b003      	add	sp, #12
    9bf8:	bd30      	pop	{r4, r5, pc}
    9bfa:	46c0      	nop			; (mov r8, r8)
    9bfc:	0000cfad 	.word	0x0000cfad
    9c00:	0000cfed 	.word	0x0000cfed
    9c04:	41004400 	.word	0x41004400
    9c08:	0000dd11 	.word	0x0000dd11

00009c0c <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    9c0c:	b530      	push	{r4, r5, lr}
    9c0e:	b083      	sub	sp, #12
    9c10:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    9c12:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    9c14:	4b1c      	ldr	r3, [pc, #112]	; (9c88 <at25dfx_chip_wake+0x7c>)
    9c16:	4798      	blx	r3
	if (module->locked) {
    9c18:	792b      	ldrb	r3, [r5, #4]
    9c1a:	2b00      	cmp	r3, #0
    9c1c:	d12e      	bne.n	9c7c <at25dfx_chip_wake+0x70>
		module->locked = true;
    9c1e:	3301      	adds	r3, #1
    9c20:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    9c22:	4b1a      	ldr	r3, [pc, #104]	; (9c8c <at25dfx_chip_wake+0x80>)
    9c24:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    9c26:	23ab      	movs	r3, #171	; 0xab
    9c28:	466a      	mov	r2, sp
    9c2a:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    9c2c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    9c2e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9c30:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9c32:	2900      	cmp	r1, #0
    9c34:	d104      	bne.n	9c40 <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
    9c36:	0953      	lsrs	r3, r2, #5
    9c38:	01db      	lsls	r3, r3, #7
    9c3a:	4915      	ldr	r1, [pc, #84]	; (9c90 <at25dfx_chip_wake+0x84>)
    9c3c:	468c      	mov	ip, r1
    9c3e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9c40:	211f      	movs	r1, #31
    9c42:	4011      	ands	r1, r2
    9c44:	2201      	movs	r2, #1
    9c46:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    9c48:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    9c4a:	2201      	movs	r2, #1
    9c4c:	4669      	mov	r1, sp
    9c4e:	6820      	ldr	r0, [r4, #0]
    9c50:	4b10      	ldr	r3, [pc, #64]	; (9c94 <at25dfx_chip_wake+0x88>)
    9c52:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    9c54:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    9c56:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9c58:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9c5a:	2900      	cmp	r1, #0
    9c5c:	d104      	bne.n	9c68 <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
    9c5e:	0953      	lsrs	r3, r2, #5
    9c60:	01db      	lsls	r3, r3, #7
    9c62:	490b      	ldr	r1, [pc, #44]	; (9c90 <at25dfx_chip_wake+0x84>)
    9c64:	468c      	mov	ip, r1
    9c66:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9c68:	211f      	movs	r1, #31
    9c6a:	4011      	ands	r1, r2
    9c6c:	2201      	movs	r2, #1
    9c6e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    9c70:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    9c72:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    9c74:	2200      	movs	r2, #0
    9c76:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    9c78:	2000      	movs	r0, #0
    9c7a:	e002      	b.n	9c82 <at25dfx_chip_wake+0x76>
    9c7c:	4b03      	ldr	r3, [pc, #12]	; (9c8c <at25dfx_chip_wake+0x80>)
    9c7e:	4798      	blx	r3
		return status;
    9c80:	2005      	movs	r0, #5
    9c82:	b003      	add	sp, #12
    9c84:	bd30      	pop	{r4, r5, pc}
    9c86:	46c0      	nop			; (mov r8, r8)
    9c88:	0000cfad 	.word	0x0000cfad
    9c8c:	0000cfed 	.word	0x0000cfed
    9c90:	41004400 	.word	0x41004400
    9c94:	0000dd11 	.word	0x0000dd11

00009c98 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    9c98:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    9c9a:	2000      	movs	r0, #0
    9c9c:	4b08      	ldr	r3, [pc, #32]	; (9cc0 <delay_init+0x28>)
    9c9e:	4798      	blx	r3
    9ca0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    9ca2:	4c08      	ldr	r4, [pc, #32]	; (9cc4 <delay_init+0x2c>)
    9ca4:	21fa      	movs	r1, #250	; 0xfa
    9ca6:	0089      	lsls	r1, r1, #2
    9ca8:	47a0      	blx	r4
    9caa:	4b07      	ldr	r3, [pc, #28]	; (9cc8 <delay_init+0x30>)
    9cac:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    9cae:	4907      	ldr	r1, [pc, #28]	; (9ccc <delay_init+0x34>)
    9cb0:	0028      	movs	r0, r5
    9cb2:	47a0      	blx	r4
    9cb4:	4b06      	ldr	r3, [pc, #24]	; (9cd0 <delay_init+0x38>)
    9cb6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    9cb8:	2205      	movs	r2, #5
    9cba:	4b06      	ldr	r3, [pc, #24]	; (9cd4 <delay_init+0x3c>)
    9cbc:	601a      	str	r2, [r3, #0]
}
    9cbe:	bd70      	pop	{r4, r5, r6, pc}
    9cc0:	0000ec45 	.word	0x0000ec45
    9cc4:	000113ed 	.word	0x000113ed
    9cc8:	20000000 	.word	0x20000000
    9ccc:	000f4240 	.word	0x000f4240
    9cd0:	20000004 	.word	0x20000004
    9cd4:	e000e010 	.word	0xe000e010

00009cd8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    9cd8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    9cda:	4b08      	ldr	r3, [pc, #32]	; (9cfc <delay_cycles_ms+0x24>)
    9cdc:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    9cde:	4a08      	ldr	r2, [pc, #32]	; (9d00 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    9ce0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    9ce2:	2180      	movs	r1, #128	; 0x80
    9ce4:	0249      	lsls	r1, r1, #9
	while (n--) {
    9ce6:	3801      	subs	r0, #1
    9ce8:	d307      	bcc.n	9cfa <delay_cycles_ms+0x22>
	if (n > 0) {
    9cea:	2c00      	cmp	r4, #0
    9cec:	d0fb      	beq.n	9ce6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    9cee:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    9cf0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    9cf2:	6813      	ldr	r3, [r2, #0]
    9cf4:	420b      	tst	r3, r1
    9cf6:	d0fc      	beq.n	9cf2 <delay_cycles_ms+0x1a>
    9cf8:	e7f5      	b.n	9ce6 <delay_cycles_ms+0xe>
	}
}
    9cfa:	bd30      	pop	{r4, r5, pc}
    9cfc:	20000000 	.word	0x20000000
    9d00:	e000e010 	.word	0xe000e010

00009d04 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    9d04:	b510      	push	{r4, lr}
	if (gpfIsr) {
    9d06:	4b03      	ldr	r3, [pc, #12]	; (9d14 <chip_isr+0x10>)
    9d08:	681b      	ldr	r3, [r3, #0]
    9d0a:	2b00      	cmp	r3, #0
    9d0c:	d000      	beq.n	9d10 <chip_isr+0xc>
		gpfIsr();
    9d0e:	4798      	blx	r3
	}
}
    9d10:	bd10      	pop	{r4, pc}
    9d12:	46c0      	nop			; (mov r8, r8)
    9d14:	2000022c 	.word	0x2000022c

00009d18 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    9d18:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    9d1a:	1e44      	subs	r4, r0, #1
    9d1c:	2800      	cmp	r0, #0
    9d1e:	d004      	beq.n	9d2a <nm_bsp_sleep+0x12>
		delay_ms(1);
    9d20:	4d02      	ldr	r5, [pc, #8]	; (9d2c <nm_bsp_sleep+0x14>)
    9d22:	2001      	movs	r0, #1
    9d24:	47a8      	blx	r5
	while (u32TimeMsec--) {
    9d26:	3c01      	subs	r4, #1
    9d28:	d2fb      	bcs.n	9d22 <nm_bsp_sleep+0xa>
	}
}
    9d2a:	bd70      	pop	{r4, r5, r6, pc}
    9d2c:	00009cd9 	.word	0x00009cd9

00009d30 <nm_bsp_reset>:
{
    9d30:	b570      	push	{r4, r5, r6, lr}
		port_base->OUTCLR.reg = pin_mask;
    9d32:	4c07      	ldr	r4, [pc, #28]	; (9d50 <nm_bsp_reset+0x20>)
    9d34:	2501      	movs	r5, #1
    9d36:	6165      	str	r5, [r4, #20]
    9d38:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(100);
    9d3a:	2064      	movs	r0, #100	; 0x64
    9d3c:	4e05      	ldr	r6, [pc, #20]	; (9d54 <nm_bsp_reset+0x24>)
    9d3e:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    9d40:	61a5      	str	r5, [r4, #24]
	nm_bsp_sleep(100);
    9d42:	2064      	movs	r0, #100	; 0x64
    9d44:	47b0      	blx	r6
    9d46:	61a5      	str	r5, [r4, #24]
	nm_bsp_sleep(100);
    9d48:	2064      	movs	r0, #100	; 0x64
    9d4a:	47b0      	blx	r6
}
    9d4c:	bd70      	pop	{r4, r5, r6, pc}
    9d4e:	46c0      	nop			; (mov r8, r8)
    9d50:	41004400 	.word	0x41004400
    9d54:	00009d19 	.word	0x00009d19

00009d58 <nm_bsp_init>:
{
    9d58:	b570      	push	{r4, r5, r6, lr}
    9d5a:	b082      	sub	sp, #8
	gpfIsr = NULL;
    9d5c:	2300      	movs	r3, #0
    9d5e:	4a14      	ldr	r2, [pc, #80]	; (9db0 <nm_bsp_init+0x58>)
    9d60:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    9d62:	ac01      	add	r4, sp, #4
    9d64:	2501      	movs	r5, #1
    9d66:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    9d68:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    9d6a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    9d6c:	0021      	movs	r1, r4
    9d6e:	2000      	movs	r0, #0
    9d70:	4e10      	ldr	r6, [pc, #64]	; (9db4 <nm_bsp_init+0x5c>)
    9d72:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    9d74:	0021      	movs	r1, r4
    9d76:	2000      	movs	r0, #0
    9d78:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    9d7a:	0021      	movs	r1, r4
    9d7c:	2000      	movs	r0, #0
    9d7e:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    9d80:	4b0d      	ldr	r3, [pc, #52]	; (9db8 <nm_bsp_init+0x60>)
    9d82:	615d      	str	r5, [r3, #20]
    9d84:	615d      	str	r5, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    9d86:	4b0d      	ldr	r3, [pc, #52]	; (9dbc <nm_bsp_init+0x64>)
    9d88:	681b      	ldr	r3, [r3, #0]
    9d8a:	421d      	tst	r5, r3
    9d8c:	d003      	beq.n	9d96 <nm_bsp_init+0x3e>
    9d8e:	4b0b      	ldr	r3, [pc, #44]	; (9dbc <nm_bsp_init+0x64>)
    9d90:	681b      	ldr	r3, [r3, #0]
    9d92:	079b      	lsls	r3, r3, #30
    9d94:	d401      	bmi.n	9d9a <nm_bsp_init+0x42>
	    delay_init();
    9d96:	4b0a      	ldr	r3, [pc, #40]	; (9dc0 <nm_bsp_init+0x68>)
    9d98:	4798      	blx	r3
	nm_bsp_reset();
    9d9a:	4b0a      	ldr	r3, [pc, #40]	; (9dc4 <nm_bsp_init+0x6c>)
    9d9c:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    9d9e:	2201      	movs	r2, #1
    9da0:	4b09      	ldr	r3, [pc, #36]	; (9dc8 <nm_bsp_init+0x70>)
    9da2:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    9da4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    9da8:	b662      	cpsie	i
}
    9daa:	2000      	movs	r0, #0
    9dac:	b002      	add	sp, #8
    9dae:	bd70      	pop	{r4, r5, r6, pc}
    9db0:	2000022c 	.word	0x2000022c
    9db4:	0000d485 	.word	0x0000d485
    9db8:	41004400 	.word	0x41004400
    9dbc:	e000e010 	.word	0xe000e010
    9dc0:	00009c99 	.word	0x00009c99
    9dc4:	00009d31 	.word	0x00009d31
    9dc8:	2000000a 	.word	0x2000000a

00009dcc <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    9dcc:	b510      	push	{r4, lr}
    9dce:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    9dd0:	4b0d      	ldr	r3, [pc, #52]	; (9e08 <nm_bsp_register_isr+0x3c>)
    9dd2:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    9dd4:	ac01      	add	r4, sp, #4
    9dd6:	0020      	movs	r0, r4
    9dd8:	4b0c      	ldr	r3, [pc, #48]	; (9e0c <nm_bsp_register_isr+0x40>)
    9dda:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    9ddc:	2300      	movs	r3, #0
    9dde:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    9de0:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    9de2:	3301      	adds	r3, #1
    9de4:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    9de6:	3301      	adds	r3, #1
    9de8:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    9dea:	0021      	movs	r1, r4
    9dec:	2000      	movs	r0, #0
    9dee:	4b08      	ldr	r3, [pc, #32]	; (9e10 <nm_bsp_register_isr+0x44>)
    9df0:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    9df2:	2200      	movs	r2, #0
    9df4:	2100      	movs	r1, #0
    9df6:	4807      	ldr	r0, [pc, #28]	; (9e14 <nm_bsp_register_isr+0x48>)
    9df8:	4b07      	ldr	r3, [pc, #28]	; (9e18 <nm_bsp_register_isr+0x4c>)
    9dfa:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    9dfc:	2100      	movs	r1, #0
    9dfe:	2000      	movs	r0, #0
    9e00:	4b06      	ldr	r3, [pc, #24]	; (9e1c <nm_bsp_register_isr+0x50>)
    9e02:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    9e04:	b004      	add	sp, #16
    9e06:	bd10      	pop	{r4, pc}
    9e08:	2000022c 	.word	0x2000022c
    9e0c:	0000d161 	.word	0x0000d161
    9e10:	0000d175 	.word	0x0000d175
    9e14:	00009d05 	.word	0x00009d05
    9e18:	0000d01d 	.word	0x0000d01d
    9e1c:	0000d049 	.word	0x0000d049

00009e20 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    9e20:	b510      	push	{r4, lr}
	if (u8Enable) {
    9e22:	2800      	cmp	r0, #0
    9e24:	d104      	bne.n	9e30 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    9e26:	2100      	movs	r1, #0
    9e28:	2000      	movs	r0, #0
    9e2a:	4b04      	ldr	r3, [pc, #16]	; (9e3c <nm_bsp_interrupt_ctrl+0x1c>)
    9e2c:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    9e2e:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    9e30:	2100      	movs	r1, #0
    9e32:	2000      	movs	r0, #0
    9e34:	4b02      	ldr	r3, [pc, #8]	; (9e40 <nm_bsp_interrupt_ctrl+0x20>)
    9e36:	4798      	blx	r3
    9e38:	e7f9      	b.n	9e2e <nm_bsp_interrupt_ctrl+0xe>
    9e3a:	46c0      	nop			; (mov r8, r8)
    9e3c:	0000d069 	.word	0x0000d069
    9e40:	0000d049 	.word	0x0000d049

00009e44 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    9e44:	b530      	push	{r4, r5, lr}
    9e46:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    9e48:	4c2c      	ldr	r4, [pc, #176]	; (9efc <nm_bus_init+0xb8>)
    9e4a:	2300      	movs	r3, #0
    9e4c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    9e4e:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    9e50:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    9e52:	a901      	add	r1, sp, #4
    9e54:	2201      	movs	r2, #1
    9e56:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    9e58:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    9e5a:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    9e5c:	2000      	movs	r0, #0
    9e5e:	4b28      	ldr	r3, [pc, #160]	; (9f00 <nm_bus_init+0xbc>)
    9e60:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    9e62:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    9e64:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9e66:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9e68:	2900      	cmp	r1, #0
    9e6a:	d104      	bne.n	9e76 <nm_bus_init+0x32>
		return &(ports[port_index]->Group[group_index]);
    9e6c:	0953      	lsrs	r3, r2, #5
    9e6e:	01db      	lsls	r3, r3, #7
    9e70:	4924      	ldr	r1, [pc, #144]	; (9f04 <nm_bus_init+0xc0>)
    9e72:	468c      	mov	ip, r1
    9e74:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9e76:	211f      	movs	r1, #31
    9e78:	4011      	ands	r1, r2
    9e7a:	2201      	movs	r2, #1
    9e7c:	0010      	movs	r0, r2
    9e7e:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    9e80:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    9e82:	ac02      	add	r4, sp, #8
    9e84:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    9e86:	2500      	movs	r5, #0
    9e88:	9503      	str	r5, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    9e8a:	9504      	str	r5, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    9e8c:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    9e8e:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    9e90:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    9e92:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    9e94:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    9e96:	2324      	movs	r3, #36	; 0x24
    9e98:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    9e9a:	320b      	adds	r2, #11
    9e9c:	2100      	movs	r1, #0
    9e9e:	a808      	add	r0, sp, #32
    9ea0:	4b19      	ldr	r3, [pc, #100]	; (9f08 <nm_bus_init+0xc4>)
    9ea2:	4798      	blx	r3
	config->pinmux_pad0 = PINMUX_DEFAULT;
    9ea4:	62a5      	str	r5, [r4, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    9ea6:	62e5      	str	r5, [r4, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    9ea8:	6325      	str	r5, [r4, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    9eaa:	6365      	str	r5, [r4, #52]	; 0x34
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    9eac:	60e5      	str	r5, [r4, #12]
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    9eae:	4b17      	ldr	r3, [pc, #92]	; (9f0c <nm_bus_init+0xc8>)
    9eb0:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    9eb2:	0022      	movs	r2, r4
    9eb4:	2100      	movs	r1, #0
    9eb6:	4816      	ldr	r0, [pc, #88]	; (9f10 <nm_bus_init+0xcc>)
    9eb8:	4b16      	ldr	r3, [pc, #88]	; (9f14 <nm_bus_init+0xd0>)
    9eba:	4798      	blx	r3
    9ebc:	2800      	cmp	r0, #0
    9ebe:	d11a      	bne.n	9ef6 <nm_bus_init+0xb2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    9ec0:	4d13      	ldr	r5, [pc, #76]	; (9f10 <nm_bus_init+0xcc>)
    9ec2:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    9ec4:	0020      	movs	r0, r4
    9ec6:	4b14      	ldr	r3, [pc, #80]	; (9f18 <nm_bus_init+0xd4>)
    9ec8:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9eca:	231f      	movs	r3, #31
    9ecc:	4018      	ands	r0, r3
    9ece:	3b1e      	subs	r3, #30
    9ed0:	4083      	lsls	r3, r0
    9ed2:	4a12      	ldr	r2, [pc, #72]	; (9f1c <nm_bus_init+0xd8>)
    9ed4:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9ed6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    9ed8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    9eda:	2b00      	cmp	r3, #0
    9edc:	d1fc      	bne.n	9ed8 <nm_bus_init+0x94>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    9ede:	6823      	ldr	r3, [r4, #0]
    9ee0:	2202      	movs	r2, #2
    9ee2:	4313      	orrs	r3, r2
    9ee4:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    9ee6:	4b0e      	ldr	r3, [pc, #56]	; (9f20 <nm_bus_init+0xdc>)
    9ee8:	4798      	blx	r3
	nm_bsp_sleep(1);
    9eea:	2001      	movs	r0, #1
    9eec:	4b0d      	ldr	r3, [pc, #52]	; (9f24 <nm_bus_init+0xe0>)
    9eee:	4798      	blx	r3
#endif
	return result;
    9ef0:	2000      	movs	r0, #0
}
    9ef2:	b011      	add	sp, #68	; 0x44
    9ef4:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    9ef6:	2006      	movs	r0, #6
    9ef8:	4240      	negs	r0, r0
    9efa:	e7fa      	b.n	9ef2 <nm_bus_init+0xae>
    9efc:	200003f8 	.word	0x200003f8
    9f00:	0000d485 	.word	0x0000d485
    9f04:	41004400 	.word	0x41004400
    9f08:	000117df 	.word	0x000117df
    9f0c:	00b71b00 	.word	0x00b71b00
    9f10:	200003fc 	.word	0x200003fc
    9f14:	0000d8ed 	.word	0x0000d8ed
    9f18:	0000d85d 	.word	0x0000d85d
    9f1c:	e000e100 	.word	0xe000e100
    9f20:	00009d31 	.word	0x00009d31
    9f24:	00009d19 	.word	0x00009d19

00009f28 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    9f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f2a:	46de      	mov	lr, fp
    9f2c:	4657      	mov	r7, sl
    9f2e:	464e      	mov	r6, r9
    9f30:	4645      	mov	r5, r8
    9f32:	b5e0      	push	{r5, r6, r7, lr}
    9f34:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    9f36:	2803      	cmp	r0, #3
    9f38:	d000      	beq.n	9f3c <nm_bus_ioctl+0x14>
    9f3a:	e075      	b.n	a028 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    9f3c:	680e      	ldr	r6, [r1, #0]
    9f3e:	684d      	ldr	r5, [r1, #4]
    9f40:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    9f42:	2200      	movs	r2, #0
    9f44:	466b      	mov	r3, sp
    9f46:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    9f48:	2d00      	cmp	r5, #0
    9f4a:	d027      	beq.n	9f9c <nm_bus_ioctl+0x74>
    9f4c:	2c00      	cmp	r4, #0
    9f4e:	d065      	beq.n	a01c <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    9f50:	2e00      	cmp	r6, #0
    9f52:	d100      	bne.n	9f56 <nm_bus_ioctl+0x2e>
    9f54:	e077      	b.n	a046 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    9f56:	2300      	movs	r3, #0
    9f58:	4698      	mov	r8, r3
    9f5a:	2300      	movs	r3, #0
    9f5c:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    9f5e:	2201      	movs	r2, #1
    9f60:	493b      	ldr	r1, [pc, #236]	; (a050 <nm_bus_ioctl+0x128>)
    9f62:	483c      	ldr	r0, [pc, #240]	; (a054 <nm_bus_ioctl+0x12c>)
    9f64:	4b3c      	ldr	r3, [pc, #240]	; (a058 <nm_bus_ioctl+0x130>)
    9f66:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    9f68:	4b3a      	ldr	r3, [pc, #232]	; (a054 <nm_bus_ioctl+0x12c>)
    9f6a:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    9f6c:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    9f6e:	2204      	movs	r2, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9f70:	4699      	mov	r9, r3
			pu8Miso++;
    9f72:	4659      	mov	r1, fp
    9f74:	424b      	negs	r3, r1
    9f76:	4159      	adcs	r1, r3
    9f78:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    9f7a:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9f7c:	4653      	mov	r3, sl
    9f7e:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    9f80:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    9f82:	4239      	tst	r1, r7
    9f84:	d0fc      	beq.n	9f80 <nm_bus_ioctl+0x58>
    9f86:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    9f88:	4239      	tst	r1, r7
    9f8a:	d0fc      	beq.n	9f86 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    9f8c:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    9f8e:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    9f90:	4211      	tst	r1, r2
    9f92:	d0fc      	beq.n	9f8e <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9f94:	4649      	mov	r1, r9
    9f96:	7989      	ldrb	r1, [r1, #6]
    9f98:	468c      	mov	ip, r1
    9f9a:	e011      	b.n	9fc0 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    9f9c:	2e00      	cmp	r6, #0
    9f9e:	d03a      	beq.n	a016 <nm_bus_ioctl+0xee>
    9fa0:	2c00      	cmp	r4, #0
    9fa2:	d03e      	beq.n	a022 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    9fa4:	2300      	movs	r3, #0
    9fa6:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    9fa8:	3301      	adds	r3, #1
    9faa:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    9fac:	466b      	mov	r3, sp
    9fae:	1ddd      	adds	r5, r3, #7
    9fb0:	e7d5      	b.n	9f5e <nm_bus_ioctl+0x36>
    9fb2:	4660      	mov	r0, ip
    9fb4:	2801      	cmp	r0, #1
    9fb6:	d00d      	beq.n	9fd4 <nm_bus_ioctl+0xac>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    9fb8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9fba:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    9fbc:	2900      	cmp	r1, #0
    9fbe:	d00d      	beq.n	9fdc <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    9fc0:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    9fc2:	4211      	tst	r1, r2
    9fc4:	d0fc      	beq.n	9fc0 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    9fc6:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    9fc8:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    9fca:	4210      	tst	r0, r2
    9fcc:	d0f1      	beq.n	9fb2 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9fce:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    9fd0:	311e      	adds	r1, #30
    9fd2:	e7ee      	b.n	9fb2 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    9fd4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9fd6:	05c0      	lsls	r0, r0, #23
    9fd8:	0dc0      	lsrs	r0, r0, #23
    9fda:	e7ef      	b.n	9fbc <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    9fdc:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    9fde:	3c01      	subs	r4, #1
    9fe0:	b2a4      	uxth	r4, r4
			pu8Miso++;
    9fe2:	445d      	add	r5, fp
			pu8Mosi++;
    9fe4:	4643      	mov	r3, r8
    9fe6:	4259      	negs	r1, r3
    9fe8:	414b      	adcs	r3, r1
    9fea:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    9fec:	2c00      	cmp	r4, #0
    9fee:	d1c4      	bne.n	9f7a <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    9ff0:	4b18      	ldr	r3, [pc, #96]	; (a054 <nm_bus_ioctl+0x12c>)
    9ff2:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    9ff4:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    9ff6:	7e0b      	ldrb	r3, [r1, #24]
    9ff8:	4213      	tst	r3, r2
    9ffa:	d0fc      	beq.n	9ff6 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    9ffc:	2200      	movs	r2, #0
    9ffe:	4914      	ldr	r1, [pc, #80]	; (a050 <nm_bus_ioctl+0x128>)
    a000:	4814      	ldr	r0, [pc, #80]	; (a054 <nm_bus_ioctl+0x12c>)
    a002:	4b15      	ldr	r3, [pc, #84]	; (a058 <nm_bus_ioctl+0x130>)
    a004:	4798      	blx	r3
	return M2M_SUCCESS;
    a006:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    a008:	b003      	add	sp, #12
    a00a:	bc3c      	pop	{r2, r3, r4, r5}
    a00c:	4690      	mov	r8, r2
    a00e:	4699      	mov	r9, r3
    a010:	46a2      	mov	sl, r4
    a012:	46ab      	mov	fp, r5
    a014:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    a016:	200f      	movs	r0, #15
    a018:	4240      	negs	r0, r0
    a01a:	e7f5      	b.n	a008 <nm_bus_ioctl+0xe0>
    a01c:	200f      	movs	r0, #15
    a01e:	4240      	negs	r0, r0
    a020:	e7f2      	b.n	a008 <nm_bus_ioctl+0xe0>
    a022:	200f      	movs	r0, #15
    a024:	4240      	negs	r0, r0
		break;
    a026:	e7ef      	b.n	a008 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    a028:	220e      	movs	r2, #14
    a02a:	32ff      	adds	r2, #255	; 0xff
    a02c:	490b      	ldr	r1, [pc, #44]	; (a05c <nm_bus_ioctl+0x134>)
    a02e:	480c      	ldr	r0, [pc, #48]	; (a060 <nm_bus_ioctl+0x138>)
    a030:	4b0c      	ldr	r3, [pc, #48]	; (a064 <nm_bus_ioctl+0x13c>)
    a032:	4798      	blx	r3
    a034:	480c      	ldr	r0, [pc, #48]	; (a068 <nm_bus_ioctl+0x140>)
    a036:	4b0d      	ldr	r3, [pc, #52]	; (a06c <nm_bus_ioctl+0x144>)
    a038:	4798      	blx	r3
    a03a:	200d      	movs	r0, #13
    a03c:	4b0c      	ldr	r3, [pc, #48]	; (a070 <nm_bus_ioctl+0x148>)
    a03e:	4798      	blx	r3
			s8Ret = -1;
    a040:	2001      	movs	r0, #1
    a042:	4240      	negs	r0, r0
	return s8Ret;
    a044:	e7e0      	b.n	a008 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    a046:	2301      	movs	r3, #1
    a048:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    a04a:	466b      	mov	r3, sp
    a04c:	1dde      	adds	r6, r3, #7
    a04e:	e784      	b.n	9f5a <nm_bus_ioctl+0x32>
    a050:	200003f8 	.word	0x200003f8
    a054:	200003fc 	.word	0x200003fc
    a058:	0000dc1d 	.word	0x0000dc1d
    a05c:	0001312c 	.word	0x0001312c
    a060:	0001313c 	.word	0x0001313c
    a064:	00011941 	.word	0x00011941
    a068:	00013150 	.word	0x00013150
    a06c:	00011a5d 	.word	0x00011a5d
    a070:	00011975 	.word	0x00011975

0000a074 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    a074:	b530      	push	{r4, r5, lr}
    a076:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    a078:	ab01      	add	r3, sp, #4
    a07a:	2200      	movs	r2, #0
    a07c:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    a07e:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    a080:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a082:	4d13      	ldr	r5, [pc, #76]	; (a0d0 <nm_bus_deinit+0x5c>)
    a084:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    a086:	0020      	movs	r0, r4
    a088:	4b12      	ldr	r3, [pc, #72]	; (a0d4 <nm_bus_deinit+0x60>)
    a08a:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a08c:	231f      	movs	r3, #31
    a08e:	4018      	ands	r0, r3
    a090:	3b1e      	subs	r3, #30
    a092:	4083      	lsls	r3, r0
    a094:	2280      	movs	r2, #128	; 0x80
    a096:	4910      	ldr	r1, [pc, #64]	; (a0d8 <nm_bus_deinit+0x64>)
    a098:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a09a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    a09c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    a09e:	2b00      	cmp	r3, #0
    a0a0:	d1fc      	bne.n	a09c <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    a0a2:	338f      	adds	r3, #143	; 0x8f
    a0a4:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    a0a6:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    a0a8:	6823      	ldr	r3, [r4, #0]
    a0aa:	2202      	movs	r2, #2
    a0ac:	4393      	bics	r3, r2
    a0ae:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    a0b0:	a901      	add	r1, sp, #4
    a0b2:	2000      	movs	r0, #0
    a0b4:	4c09      	ldr	r4, [pc, #36]	; (a0dc <nm_bus_deinit+0x68>)
    a0b6:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    a0b8:	a901      	add	r1, sp, #4
    a0ba:	2000      	movs	r0, #0
    a0bc:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    a0be:	a901      	add	r1, sp, #4
    a0c0:	2000      	movs	r0, #0
    a0c2:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    a0c4:	a901      	add	r1, sp, #4
    a0c6:	2000      	movs	r0, #0
    a0c8:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    a0ca:	2000      	movs	r0, #0
    a0cc:	b003      	add	sp, #12
    a0ce:	bd30      	pop	{r4, r5, pc}
    a0d0:	200003fc 	.word	0x200003fc
    a0d4:	0000d85d 	.word	0x0000d85d
    a0d8:	e000e100 	.word	0xe000e100
    a0dc:	0000d485 	.word	0x0000d485

0000a0e0 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    a0e0:	2a00      	cmp	r2, #0
    a0e2:	d006      	beq.n	a0f2 <m2m_memcpy+0x12>
    a0e4:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    a0e6:	780b      	ldrb	r3, [r1, #0]
    a0e8:	7003      	strb	r3, [r0, #0]
		pDst++;
    a0ea:	3001      	adds	r0, #1
		pSrc++;
    a0ec:	3101      	adds	r1, #1
	}while(--sz);
    a0ee:	4290      	cmp	r0, r2
    a0f0:	d1f9      	bne.n	a0e6 <m2m_memcpy+0x6>
}
    a0f2:	4770      	bx	lr

0000a0f4 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    a0f4:	2a00      	cmp	r2, #0
    a0f6:	d004      	beq.n	a102 <m2m_memset+0xe>
    a0f8:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    a0fa:	7001      	strb	r1, [r0, #0]
		pBuf++;
    a0fc:	3001      	adds	r0, #1
	}while(--sz);
    a0fe:	4290      	cmp	r0, r2
    a100:	d1fb      	bne.n	a0fa <m2m_memset+0x6>
}
    a102:	4770      	bx	lr

0000a104 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    a104:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    a106:	7802      	ldrb	r2, [r0, #0]
    a108:	2a00      	cmp	r2, #0
    a10a:	d007      	beq.n	a11c <m2m_strlen+0x18>
    a10c:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    a10e:	3001      	adds	r0, #1
    a110:	b280      	uxth	r0, r0
		pcStr++;
    a112:	3301      	adds	r3, #1
	while(*pcStr)
    a114:	781a      	ldrb	r2, [r3, #0]
    a116:	2a00      	cmp	r2, #0
    a118:	d1f9      	bne.n	a10e <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    a11a:	4770      	bx	lr
	uint16	u16StrLen = 0;
    a11c:	2000      	movs	r0, #0
    a11e:	e7fc      	b.n	a11a <m2m_strlen+0x16>

0000a120 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    a120:	4a02      	ldr	r2, [pc, #8]	; (a12c <isr+0xc>)
    a122:	78d3      	ldrb	r3, [r2, #3]
    a124:	3301      	adds	r3, #1
    a126:	b2db      	uxtb	r3, r3
    a128:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    a12a:	4770      	bx	lr
    a12c:	20000438 	.word	0x20000438

0000a130 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    a130:	4770      	bx	lr
	...

0000a134 <hif_set_rx_done>:
{
    a134:	b500      	push	{lr}
    a136:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    a138:	2200      	movs	r2, #0
    a13a:	4b0a      	ldr	r3, [pc, #40]	; (a164 <hif_set_rx_done+0x30>)
    a13c:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    a13e:	2001      	movs	r0, #1
    a140:	4b09      	ldr	r3, [pc, #36]	; (a168 <hif_set_rx_done+0x34>)
    a142:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    a144:	a901      	add	r1, sp, #4
    a146:	4809      	ldr	r0, [pc, #36]	; (a16c <hif_set_rx_done+0x38>)
    a148:	4b09      	ldr	r3, [pc, #36]	; (a170 <hif_set_rx_done+0x3c>)
    a14a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    a14c:	2800      	cmp	r0, #0
    a14e:	d001      	beq.n	a154 <hif_set_rx_done+0x20>
}
    a150:	b003      	add	sp, #12
    a152:	bd00      	pop	{pc}
	reg |= NBIT1;
    a154:	2102      	movs	r1, #2
    a156:	9b01      	ldr	r3, [sp, #4]
    a158:	4319      	orrs	r1, r3
    a15a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    a15c:	4803      	ldr	r0, [pc, #12]	; (a16c <hif_set_rx_done+0x38>)
    a15e:	4b05      	ldr	r3, [pc, #20]	; (a174 <hif_set_rx_done+0x40>)
    a160:	4798      	blx	r3
    a162:	e7f5      	b.n	a150 <hif_set_rx_done+0x1c>
    a164:	20000438 	.word	0x20000438
    a168:	00009e21 	.word	0x00009e21
    a16c:	00001070 	.word	0x00001070
    a170:	0000b57d 	.word	0x0000b57d
    a174:	0000b589 	.word	0x0000b589

0000a178 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    a178:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    a17a:	4b0c      	ldr	r3, [pc, #48]	; (a1ac <hif_chip_wake+0x34>)
    a17c:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    a17e:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    a180:	2b00      	cmp	r3, #0
    a182:	d10d      	bne.n	a1a0 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    a184:	4b09      	ldr	r3, [pc, #36]	; (a1ac <hif_chip_wake+0x34>)
    a186:	785b      	ldrb	r3, [r3, #1]
    a188:	2b00      	cmp	r3, #0
    a18a:	d103      	bne.n	a194 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    a18c:	4b07      	ldr	r3, [pc, #28]	; (a1ac <hif_chip_wake+0x34>)
    a18e:	781b      	ldrb	r3, [r3, #0]
    a190:	2b00      	cmp	r3, #0
    a192:	d106      	bne.n	a1a2 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    a194:	4a05      	ldr	r2, [pc, #20]	; (a1ac <hif_chip_wake+0x34>)
    a196:	7853      	ldrb	r3, [r2, #1]
    a198:	3301      	adds	r3, #1
    a19a:	b2db      	uxtb	r3, r3
    a19c:	7053      	strb	r3, [r2, #1]
    a19e:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    a1a0:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    a1a2:	4b03      	ldr	r3, [pc, #12]	; (a1b0 <hif_chip_wake+0x38>)
    a1a4:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    a1a6:	2800      	cmp	r0, #0
    a1a8:	d0f4      	beq.n	a194 <hif_chip_wake+0x1c>
    a1aa:	e7f9      	b.n	a1a0 <hif_chip_wake+0x28>
    a1ac:	20000438 	.word	0x20000438
    a1b0:	0000b265 	.word	0x0000b265

0000a1b4 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    a1b4:	4b05      	ldr	r3, [pc, #20]	; (a1cc <hif_chip_sleep_sc+0x18>)
    a1b6:	785b      	ldrb	r3, [r3, #1]
    a1b8:	2b00      	cmp	r3, #0
    a1ba:	d004      	beq.n	a1c6 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    a1bc:	4a03      	ldr	r2, [pc, #12]	; (a1cc <hif_chip_sleep_sc+0x18>)
    a1be:	7853      	ldrb	r3, [r2, #1]
    a1c0:	3b01      	subs	r3, #1
    a1c2:	b2db      	uxtb	r3, r3
    a1c4:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    a1c6:	2000      	movs	r0, #0
    a1c8:	4770      	bx	lr
    a1ca:	46c0      	nop			; (mov r8, r8)
    a1cc:	20000438 	.word	0x20000438

0000a1d0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    a1d0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    a1d2:	4b0b      	ldr	r3, [pc, #44]	; (a200 <hif_chip_sleep+0x30>)
    a1d4:	785b      	ldrb	r3, [r3, #1]
    a1d6:	2b00      	cmp	r3, #0
    a1d8:	d004      	beq.n	a1e4 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    a1da:	4a09      	ldr	r2, [pc, #36]	; (a200 <hif_chip_sleep+0x30>)
    a1dc:	7853      	ldrb	r3, [r2, #1]
    a1de:	3b01      	subs	r3, #1
    a1e0:	b2db      	uxtb	r3, r3
    a1e2:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    a1e4:	4b06      	ldr	r3, [pc, #24]	; (a200 <hif_chip_sleep+0x30>)
    a1e6:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    a1e8:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    a1ea:	2b00      	cmp	r3, #0
    a1ec:	d103      	bne.n	a1f6 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    a1ee:	4b04      	ldr	r3, [pc, #16]	; (a200 <hif_chip_sleep+0x30>)
    a1f0:	781b      	ldrb	r3, [r3, #0]
    a1f2:	2b00      	cmp	r3, #0
    a1f4:	d100      	bne.n	a1f8 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    a1f6:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    a1f8:	4b02      	ldr	r3, [pc, #8]	; (a204 <hif_chip_sleep+0x34>)
    a1fa:	4798      	blx	r3
    a1fc:	e7fb      	b.n	a1f6 <hif_chip_sleep+0x26>
    a1fe:	46c0      	nop			; (mov r8, r8)
    a200:	20000438 	.word	0x20000438
    a204:	0000b1fd 	.word	0x0000b1fd

0000a208 <hif_deinit>:
*    @param [in]	arg
*				Pointer to the arguments.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_deinit(void * arg)
{
    a208:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    a20a:	4b05      	ldr	r3, [pc, #20]	; (a220 <hif_deinit+0x18>)
    a20c:	4798      	blx	r3
    a20e:	0004      	movs	r4, r0
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    a210:	2228      	movs	r2, #40	; 0x28
    a212:	2100      	movs	r1, #0
    a214:	4803      	ldr	r0, [pc, #12]	; (a224 <hif_deinit+0x1c>)
    a216:	4b04      	ldr	r3, [pc, #16]	; (a228 <hif_deinit+0x20>)
    a218:	4798      	blx	r3
	return ret;
}
    a21a:	0020      	movs	r0, r4
    a21c:	bd10      	pop	{r4, pc}
    a21e:	46c0      	nop			; (mov r8, r8)
    a220:	0000a179 	.word	0x0000a179
    a224:	20000438 	.word	0x20000438
    a228:	0000a0f5 	.word	0x0000a0f5

0000a22c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    a22c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a22e:	46de      	mov	lr, fp
    a230:	4657      	mov	r7, sl
    a232:	b580      	push	{r7, lr}
    a234:	b089      	sub	sp, #36	; 0x24
    a236:	4683      	mov	fp, r0
    a238:	468a      	mov	sl, r1
    a23a:	9201      	str	r2, [sp, #4]
    a23c:	9300      	str	r3, [sp, #0]
    a23e:	ab10      	add	r3, sp, #64	; 0x40
    a240:	cb80      	ldmia	r3!, {r7}
    a242:	881e      	ldrh	r6, [r3, #0]
    a244:	ab12      	add	r3, sp, #72	; 0x48
    a246:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    a248:	227f      	movs	r2, #127	; 0x7f
    a24a:	400a      	ands	r2, r1
    a24c:	ab07      	add	r3, sp, #28
    a24e:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    a250:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    a252:	2208      	movs	r2, #8
    a254:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    a256:	2f00      	cmp	r7, #0
    a258:	d03d      	beq.n	a2d6 <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    a25a:	885a      	ldrh	r2, [r3, #2]
    a25c:	1992      	adds	r2, r2, r6
    a25e:	18aa      	adds	r2, r5, r2
    a260:	b292      	uxth	r2, r2
    a262:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    a264:	4b69      	ldr	r3, [pc, #420]	; (a40c <hif_send+0x1e0>)
    a266:	4798      	blx	r3
    a268:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    a26a:	d000      	beq.n	a26e <hif_send+0x42>
    a26c:	e0c1      	b.n	a3f2 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    a26e:	2300      	movs	r3, #0
    a270:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    a272:	aa02      	add	r2, sp, #8
    a274:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    a276:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    a278:	9b04      	ldr	r3, [sp, #16]
    a27a:	465a      	mov	r2, fp
    a27c:	431a      	orrs	r2, r3
    a27e:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    a280:	9a04      	ldr	r2, [sp, #16]
    a282:	4653      	mov	r3, sl
    a284:	021b      	lsls	r3, r3, #8
    a286:	4313      	orrs	r3, r2
    a288:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    a28a:	ab07      	add	r3, sp, #28
    a28c:	885b      	ldrh	r3, [r3, #2]
    a28e:	9a04      	ldr	r2, [sp, #16]
    a290:	041b      	lsls	r3, r3, #16
    a292:	4313      	orrs	r3, r2
    a294:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    a296:	9904      	ldr	r1, [sp, #16]
    a298:	485d      	ldr	r0, [pc, #372]	; (a410 <hif_send+0x1e4>)
    a29a:	4b5e      	ldr	r3, [pc, #376]	; (a414 <hif_send+0x1e8>)
    a29c:	4798      	blx	r3
    a29e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    a2a0:	d157      	bne.n	a352 <hif_send+0x126>

		reg = 0UL;
    a2a2:	2300      	movs	r3, #0
    a2a4:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    a2a6:	9b04      	ldr	r3, [sp, #16]
    a2a8:	2202      	movs	r2, #2
    a2aa:	4313      	orrs	r3, r2
    a2ac:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    a2ae:	9904      	ldr	r1, [sp, #16]
    a2b0:	4859      	ldr	r0, [pc, #356]	; (a418 <hif_send+0x1ec>)
    a2b2:	4b58      	ldr	r3, [pc, #352]	; (a414 <hif_send+0x1e8>)
    a2b4:	4798      	blx	r3
    a2b6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    a2b8:	d14b      	bne.n	a352 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    a2ba:	2200      	movs	r2, #0
    a2bc:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    a2be:	ab02      	add	r3, sp, #8
    a2c0:	80da      	strh	r2, [r3, #6]
    a2c2:	3306      	adds	r3, #6
    a2c4:	881b      	ldrh	r3, [r3, #0]
    a2c6:	b29b      	uxth	r3, r3
    a2c8:	4a54      	ldr	r2, [pc, #336]	; (a41c <hif_send+0x1f0>)
    a2ca:	4293      	cmp	r3, r2
    a2cc:	d849      	bhi.n	a362 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    a2ce:	4c54      	ldr	r4, [pc, #336]	; (a420 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    a2d0:	4b54      	ldr	r3, [pc, #336]	; (a424 <hif_send+0x1f8>)
    a2d2:	469a      	mov	sl, r3
    a2d4:	e017      	b.n	a306 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    a2d6:	ab07      	add	r3, sp, #28
    a2d8:	885a      	ldrh	r2, [r3, #2]
    a2da:	9900      	ldr	r1, [sp, #0]
    a2dc:	468c      	mov	ip, r1
    a2de:	4462      	add	r2, ip
    a2e0:	b292      	uxth	r2, r2
    a2e2:	805a      	strh	r2, [r3, #2]
    a2e4:	e7be      	b.n	a264 <hif_send+0x38>
				nm_bsp_sleep(1);
    a2e6:	2001      	movs	r0, #1
    a2e8:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    a2ea:	9b04      	ldr	r3, [sp, #16]
    a2ec:	079b      	lsls	r3, r3, #30
    a2ee:	d528      	bpl.n	a342 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    a2f0:	ab02      	add	r3, sp, #8
    a2f2:	88da      	ldrh	r2, [r3, #6]
    a2f4:	3201      	adds	r2, #1
    a2f6:	b292      	uxth	r2, r2
    a2f8:	80da      	strh	r2, [r3, #6]
    a2fa:	3306      	adds	r3, #6
    a2fc:	881b      	ldrh	r3, [r3, #0]
    a2fe:	b29b      	uxth	r3, r3
    a300:	4a46      	ldr	r2, [pc, #280]	; (a41c <hif_send+0x1f0>)
    a302:	4293      	cmp	r3, r2
    a304:	d82d      	bhi.n	a362 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    a306:	a904      	add	r1, sp, #16
    a308:	4843      	ldr	r0, [pc, #268]	; (a418 <hif_send+0x1ec>)
    a30a:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    a30c:	2800      	cmp	r0, #0
    a30e:	d128      	bne.n	a362 <hif_send+0x136>
			if(cnt >= 500) {
    a310:	ab02      	add	r3, sp, #8
    a312:	3306      	adds	r3, #6
    a314:	881b      	ldrh	r3, [r3, #0]
    a316:	b29b      	uxth	r3, r3
    a318:	22f4      	movs	r2, #244	; 0xf4
    a31a:	32ff      	adds	r2, #255	; 0xff
    a31c:	4293      	cmp	r3, r2
    a31e:	d9e4      	bls.n	a2ea <hif_send+0xbe>
				if(cnt < 501) {
    a320:	ab02      	add	r3, sp, #8
    a322:	3306      	adds	r3, #6
    a324:	881b      	ldrh	r3, [r3, #0]
    a326:	b29b      	uxth	r3, r3
    a328:	3201      	adds	r2, #1
    a32a:	4293      	cmp	r3, r2
    a32c:	d8db      	bhi.n	a2e6 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    a32e:	483e      	ldr	r0, [pc, #248]	; (a428 <hif_send+0x1fc>)
    a330:	4b3e      	ldr	r3, [pc, #248]	; (a42c <hif_send+0x200>)
    a332:	4798      	blx	r3
    a334:	483e      	ldr	r0, [pc, #248]	; (a430 <hif_send+0x204>)
    a336:	4b3f      	ldr	r3, [pc, #252]	; (a434 <hif_send+0x208>)
    a338:	4798      	blx	r3
    a33a:	200d      	movs	r0, #13
    a33c:	4b3e      	ldr	r3, [pc, #248]	; (a438 <hif_send+0x20c>)
    a33e:	4798      	blx	r3
    a340:	e7d1      	b.n	a2e6 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    a342:	a905      	add	r1, sp, #20
    a344:	483d      	ldr	r0, [pc, #244]	; (a43c <hif_send+0x210>)
    a346:	4b36      	ldr	r3, [pc, #216]	; (a420 <hif_send+0x1f4>)
    a348:	4798      	blx	r3
    a34a:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    a34c:	d009      	beq.n	a362 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    a34e:	2300      	movs	r3, #0
    a350:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    a352:	4b3b      	ldr	r3, [pc, #236]	; (a440 <hif_send+0x214>)
    a354:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    a356:	0020      	movs	r0, r4
    a358:	b009      	add	sp, #36	; 0x24
    a35a:	bc0c      	pop	{r2, r3}
    a35c:	4692      	mov	sl, r2
    a35e:	469b      	mov	fp, r3
    a360:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    a362:	9b05      	ldr	r3, [sp, #20]
    a364:	2b00      	cmp	r3, #0
    a366:	d03f      	beq.n	a3e8 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    a368:	9b05      	ldr	r3, [sp, #20]
    a36a:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    a36c:	a907      	add	r1, sp, #28
    a36e:	884b      	ldrh	r3, [r1, #2]
    a370:	b29b      	uxth	r3, r3
    a372:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    a374:	9806      	ldr	r0, [sp, #24]
    a376:	2208      	movs	r2, #8
    a378:	4b32      	ldr	r3, [pc, #200]	; (a444 <hif_send+0x218>)
    a37a:	4798      	blx	r3
    a37c:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    a37e:	d1e8      	bne.n	a352 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    a380:	9b06      	ldr	r3, [sp, #24]
    a382:	3308      	adds	r3, #8
    a384:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    a386:	9b01      	ldr	r3, [sp, #4]
    a388:	2b00      	cmp	r3, #0
    a38a:	d00b      	beq.n	a3a4 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    a38c:	9806      	ldr	r0, [sp, #24]
    a38e:	9a00      	ldr	r2, [sp, #0]
    a390:	0019      	movs	r1, r3
    a392:	4b2c      	ldr	r3, [pc, #176]	; (a444 <hif_send+0x218>)
    a394:	4798      	blx	r3
    a396:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    a398:	d1db      	bne.n	a352 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    a39a:	9b06      	ldr	r3, [sp, #24]
    a39c:	9a00      	ldr	r2, [sp, #0]
    a39e:	4694      	mov	ip, r2
    a3a0:	4463      	add	r3, ip
    a3a2:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    a3a4:	2f00      	cmp	r7, #0
    a3a6:	d00e      	beq.n	a3c6 <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    a3a8:	9b06      	ldr	r3, [sp, #24]
    a3aa:	9a00      	ldr	r2, [sp, #0]
    a3ac:	1aad      	subs	r5, r5, r2
    a3ae:	18ed      	adds	r5, r5, r3
    a3b0:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    a3b2:	9806      	ldr	r0, [sp, #24]
    a3b4:	0032      	movs	r2, r6
    a3b6:	0039      	movs	r1, r7
    a3b8:	4b22      	ldr	r3, [pc, #136]	; (a444 <hif_send+0x218>)
    a3ba:	4798      	blx	r3
    a3bc:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    a3be:	d1c8      	bne.n	a352 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    a3c0:	9b06      	ldr	r3, [sp, #24]
    a3c2:	18f3      	adds	r3, r6, r3
    a3c4:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    a3c6:	9b05      	ldr	r3, [sp, #20]
    a3c8:	009b      	lsls	r3, r3, #2
    a3ca:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    a3cc:	9b04      	ldr	r3, [sp, #16]
    a3ce:	2202      	movs	r2, #2
    a3d0:	4313      	orrs	r3, r2
    a3d2:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    a3d4:	9904      	ldr	r1, [sp, #16]
    a3d6:	481c      	ldr	r0, [pc, #112]	; (a448 <hif_send+0x21c>)
    a3d8:	4b0e      	ldr	r3, [pc, #56]	; (a414 <hif_send+0x1e8>)
    a3da:	4798      	blx	r3
    a3dc:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    a3de:	d1b8      	bne.n	a352 <hif_send+0x126>
 	ret = hif_chip_sleep();
    a3e0:	4b1a      	ldr	r3, [pc, #104]	; (a44c <hif_send+0x220>)
    a3e2:	4798      	blx	r3
    a3e4:	0004      	movs	r4, r0
	return ret;
    a3e6:	e7b6      	b.n	a356 <hif_send+0x12a>
			ret = hif_chip_sleep();
    a3e8:	4b18      	ldr	r3, [pc, #96]	; (a44c <hif_send+0x220>)
    a3ea:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    a3ec:	2403      	movs	r4, #3
    a3ee:	4264      	negs	r4, r4
			goto ERR2;
    a3f0:	e7b1      	b.n	a356 <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    a3f2:	22cb      	movs	r2, #203	; 0xcb
    a3f4:	0052      	lsls	r2, r2, #1
    a3f6:	4916      	ldr	r1, [pc, #88]	; (a450 <hif_send+0x224>)
    a3f8:	4816      	ldr	r0, [pc, #88]	; (a454 <hif_send+0x228>)
    a3fa:	4b0c      	ldr	r3, [pc, #48]	; (a42c <hif_send+0x200>)
    a3fc:	4798      	blx	r3
    a3fe:	4816      	ldr	r0, [pc, #88]	; (a458 <hif_send+0x22c>)
    a400:	4b0c      	ldr	r3, [pc, #48]	; (a434 <hif_send+0x208>)
    a402:	4798      	blx	r3
    a404:	200d      	movs	r0, #13
    a406:	4b0c      	ldr	r3, [pc, #48]	; (a438 <hif_send+0x20c>)
    a408:	4798      	blx	r3
		goto ERR2;
    a40a:	e7a4      	b.n	a356 <hif_send+0x12a>
    a40c:	0000a179 	.word	0x0000a179
    a410:	0000108c 	.word	0x0000108c
    a414:	0000b589 	.word	0x0000b589
    a418:	00001078 	.word	0x00001078
    a41c:	000003e7 	.word	0x000003e7
    a420:	0000b57d 	.word	0x0000b57d
    a424:	00009d19 	.word	0x00009d19
    a428:	0001346c 	.word	0x0001346c
    a42c:	00011941 	.word	0x00011941
    a430:	00013478 	.word	0x00013478
    a434:	00011a5d 	.word	0x00011a5d
    a438:	00011975 	.word	0x00011975
    a43c:	00150400 	.word	0x00150400
    a440:	0000a1b5 	.word	0x0000a1b5
    a444:	0000b5fd 	.word	0x0000b5fd
    a448:	0000106c 	.word	0x0000106c
    a44c:	0000a1d1 	.word	0x0000a1d1
    a450:	00013184 	.word	0x00013184
    a454:	0001313c 	.word	0x0001313c
    a458:	00013488 	.word	0x00013488

0000a45c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    a45c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a45e:	46ce      	mov	lr, r9
    a460:	4647      	mov	r7, r8
    a462:	b580      	push	{r7, lr}
    a464:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    a466:	4bcf      	ldr	r3, [pc, #828]	; (a7a4 <hif_handle_isr+0x348>)
    a468:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    a46a:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    a46c:	e080      	b.n	a570 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    a46e:	4bcd      	ldr	r3, [pc, #820]	; (a7a4 <hif_handle_isr+0x348>)
    a470:	9a05      	ldr	r2, [sp, #20]
    a472:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    a474:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    a476:	af04      	add	r7, sp, #16
    a478:	2204      	movs	r2, #4
    a47a:	0039      	movs	r1, r7
    a47c:	9805      	ldr	r0, [sp, #20]
    a47e:	4bca      	ldr	r3, [pc, #808]	; (a7a8 <hif_handle_isr+0x34c>)
    a480:	4798      	blx	r3
    a482:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    a484:	887b      	ldrh	r3, [r7, #2]
    a486:	b29b      	uxth	r3, r3
    a488:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    a48a:	2800      	cmp	r0, #0
    a48c:	d133      	bne.n	a4f6 <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    a48e:	ab04      	add	r3, sp, #16
    a490:	885b      	ldrh	r3, [r3, #2]
    a492:	b29b      	uxth	r3, r3
    a494:	429d      	cmp	r5, r3
    a496:	d004      	beq.n	a4a2 <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    a498:	ab04      	add	r3, sp, #16
    a49a:	885b      	ldrh	r3, [r3, #2]
    a49c:	1aeb      	subs	r3, r5, r3
    a49e:	2b04      	cmp	r3, #4
    a4a0:	dc39      	bgt.n	a516 <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    a4a2:	ab04      	add	r3, sp, #16
    a4a4:	781b      	ldrb	r3, [r3, #0]
    a4a6:	2b01      	cmp	r3, #1
    a4a8:	d04e      	beq.n	a548 <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    a4aa:	ab04      	add	r3, sp, #16
    a4ac:	781b      	ldrb	r3, [r3, #0]
    a4ae:	2b02      	cmp	r3, #2
    a4b0:	d078      	beq.n	a5a4 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    a4b2:	ab04      	add	r3, sp, #16
    a4b4:	781b      	ldrb	r3, [r3, #0]
    a4b6:	2b04      	cmp	r3, #4
    a4b8:	d100      	bne.n	a4bc <hif_handle_isr+0x60>
    a4ba:	e090      	b.n	a5de <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    a4bc:	ab04      	add	r3, sp, #16
    a4be:	781b      	ldrb	r3, [r3, #0]
    a4c0:	2b06      	cmp	r3, #6
    a4c2:	d100      	bne.n	a4c6 <hif_handle_isr+0x6a>
    a4c4:	e0a8      	b.n	a618 <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    a4c6:	ab04      	add	r3, sp, #16
    a4c8:	781b      	ldrb	r3, [r3, #0]
    a4ca:	2b07      	cmp	r3, #7
    a4cc:	d100      	bne.n	a4d0 <hif_handle_isr+0x74>
    a4ce:	e0bf      	b.n	a650 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    a4d0:	ab04      	add	r3, sp, #16
    a4d2:	781b      	ldrb	r3, [r3, #0]
    a4d4:	2b05      	cmp	r3, #5
    a4d6:	d100      	bne.n	a4da <hif_handle_isr+0x7e>
    a4d8:	e0d6      	b.n	a688 <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    a4da:	4ab4      	ldr	r2, [pc, #720]	; (a7ac <hif_handle_isr+0x350>)
    a4dc:	49b4      	ldr	r1, [pc, #720]	; (a7b0 <hif_handle_isr+0x354>)
    a4de:	48b5      	ldr	r0, [pc, #724]	; (a7b4 <hif_handle_isr+0x358>)
    a4e0:	4bb5      	ldr	r3, [pc, #724]	; (a7b8 <hif_handle_isr+0x35c>)
    a4e2:	4798      	blx	r3
    a4e4:	48b5      	ldr	r0, [pc, #724]	; (a7bc <hif_handle_isr+0x360>)
    a4e6:	4bb6      	ldr	r3, [pc, #728]	; (a7c0 <hif_handle_isr+0x364>)
    a4e8:	4798      	blx	r3
    a4ea:	200d      	movs	r0, #13
    a4ec:	4bb5      	ldr	r3, [pc, #724]	; (a7c4 <hif_handle_isr+0x368>)
    a4ee:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    a4f0:	2406      	movs	r4, #6
    a4f2:	4264      	negs	r4, r4
    a4f4:	e116      	b.n	a724 <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    a4f6:	22d2      	movs	r2, #210	; 0xd2
    a4f8:	32ff      	adds	r2, #255	; 0xff
    a4fa:	49ad      	ldr	r1, [pc, #692]	; (a7b0 <hif_handle_isr+0x354>)
    a4fc:	48ad      	ldr	r0, [pc, #692]	; (a7b4 <hif_handle_isr+0x358>)
    a4fe:	4bae      	ldr	r3, [pc, #696]	; (a7b8 <hif_handle_isr+0x35c>)
    a500:	4798      	blx	r3
    a502:	48b1      	ldr	r0, [pc, #708]	; (a7c8 <hif_handle_isr+0x36c>)
    a504:	4bae      	ldr	r3, [pc, #696]	; (a7c0 <hif_handle_isr+0x364>)
    a506:	4798      	blx	r3
    a508:	200d      	movs	r0, #13
    a50a:	4bae      	ldr	r3, [pc, #696]	; (a7c4 <hif_handle_isr+0x368>)
    a50c:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    a50e:	2001      	movs	r0, #1
    a510:	4bae      	ldr	r3, [pc, #696]	; (a7cc <hif_handle_isr+0x370>)
    a512:	4798      	blx	r3
    a514:	e106      	b.n	a724 <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    a516:	22ed      	movs	r2, #237	; 0xed
    a518:	0052      	lsls	r2, r2, #1
    a51a:	49a5      	ldr	r1, [pc, #660]	; (a7b0 <hif_handle_isr+0x354>)
    a51c:	48a5      	ldr	r0, [pc, #660]	; (a7b4 <hif_handle_isr+0x358>)
    a51e:	4ca6      	ldr	r4, [pc, #664]	; (a7b8 <hif_handle_isr+0x35c>)
    a520:	47a0      	blx	r4
    a522:	a904      	add	r1, sp, #16
    a524:	884a      	ldrh	r2, [r1, #2]
    a526:	b292      	uxth	r2, r2
    a528:	780b      	ldrb	r3, [r1, #0]
    a52a:	b2db      	uxtb	r3, r3
    a52c:	7849      	ldrb	r1, [r1, #1]
    a52e:	9100      	str	r1, [sp, #0]
    a530:	0029      	movs	r1, r5
    a532:	48a7      	ldr	r0, [pc, #668]	; (a7d0 <hif_handle_isr+0x374>)
    a534:	47a0      	blx	r4
    a536:	200d      	movs	r0, #13
    a538:	4ba2      	ldr	r3, [pc, #648]	; (a7c4 <hif_handle_isr+0x368>)
    a53a:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    a53c:	2001      	movs	r0, #1
    a53e:	4ba3      	ldr	r3, [pc, #652]	; (a7cc <hif_handle_isr+0x370>)
    a540:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    a542:	2406      	movs	r4, #6
    a544:	4264      	negs	r4, r4
    a546:	e0ed      	b.n	a724 <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    a548:	4b96      	ldr	r3, [pc, #600]	; (a7a4 <hif_handle_isr+0x348>)
    a54a:	68db      	ldr	r3, [r3, #12]
    a54c:	2b00      	cmp	r3, #0
    a54e:	d01c      	beq.n	a58a <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a550:	4b94      	ldr	r3, [pc, #592]	; (a7a4 <hif_handle_isr+0x348>)
    a552:	68db      	ldr	r3, [r3, #12]
    a554:	aa04      	add	r2, sp, #16
    a556:	7850      	ldrb	r0, [r2, #1]
    a558:	b2c0      	uxtb	r0, r0
    a55a:	8851      	ldrh	r1, [r2, #2]
    a55c:	9a05      	ldr	r2, [sp, #20]
    a55e:	3208      	adds	r2, #8
    a560:	3908      	subs	r1, #8
    a562:	b289      	uxth	r1, r1
    a564:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    a566:	4b8f      	ldr	r3, [pc, #572]	; (a7a4 <hif_handle_isr+0x348>)
    a568:	789b      	ldrb	r3, [r3, #2]
    a56a:	2b00      	cmp	r3, #0
    a56c:	d000      	beq.n	a570 <hif_handle_isr+0x114>
    a56e:	e09c      	b.n	a6aa <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    a570:	4643      	mov	r3, r8
    a572:	78db      	ldrb	r3, [r3, #3]
    a574:	2b00      	cmp	r3, #0
    a576:	d100      	bne.n	a57a <hif_handle_isr+0x11e>
    a578:	e158      	b.n	a82c <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    a57a:	464b      	mov	r3, r9
    a57c:	78db      	ldrb	r3, [r3, #3]
    a57e:	3b01      	subs	r3, #1
    a580:	b2db      	uxtb	r3, r3
    a582:	464a      	mov	r2, r9
    a584:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    a586:	4e93      	ldr	r6, [pc, #588]	; (a7d4 <hif_handle_isr+0x378>)
    a588:	e0d7      	b.n	a73a <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    a58a:	22f3      	movs	r2, #243	; 0xf3
    a58c:	0052      	lsls	r2, r2, #1
    a58e:	4988      	ldr	r1, [pc, #544]	; (a7b0 <hif_handle_isr+0x354>)
    a590:	4888      	ldr	r0, [pc, #544]	; (a7b4 <hif_handle_isr+0x358>)
    a592:	4b89      	ldr	r3, [pc, #548]	; (a7b8 <hif_handle_isr+0x35c>)
    a594:	4798      	blx	r3
    a596:	4890      	ldr	r0, [pc, #576]	; (a7d8 <hif_handle_isr+0x37c>)
    a598:	4b89      	ldr	r3, [pc, #548]	; (a7c0 <hif_handle_isr+0x364>)
    a59a:	4798      	blx	r3
    a59c:	200d      	movs	r0, #13
    a59e:	4b89      	ldr	r3, [pc, #548]	; (a7c4 <hif_handle_isr+0x368>)
    a5a0:	4798      	blx	r3
    a5a2:	e7e0      	b.n	a566 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    a5a4:	4b7f      	ldr	r3, [pc, #508]	; (a7a4 <hif_handle_isr+0x348>)
    a5a6:	691b      	ldr	r3, [r3, #16]
    a5a8:	2b00      	cmp	r3, #0
    a5aa:	d00b      	beq.n	a5c4 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a5ac:	4b7d      	ldr	r3, [pc, #500]	; (a7a4 <hif_handle_isr+0x348>)
    a5ae:	691b      	ldr	r3, [r3, #16]
    a5b0:	aa04      	add	r2, sp, #16
    a5b2:	7850      	ldrb	r0, [r2, #1]
    a5b4:	b2c0      	uxtb	r0, r0
    a5b6:	8851      	ldrh	r1, [r2, #2]
    a5b8:	9a05      	ldr	r2, [sp, #20]
    a5ba:	3208      	adds	r2, #8
    a5bc:	3908      	subs	r1, #8
    a5be:	b289      	uxth	r1, r1
    a5c0:	4798      	blx	r3
    a5c2:	e7d0      	b.n	a566 <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    a5c4:	22f7      	movs	r2, #247	; 0xf7
    a5c6:	0052      	lsls	r2, r2, #1
    a5c8:	4979      	ldr	r1, [pc, #484]	; (a7b0 <hif_handle_isr+0x354>)
    a5ca:	487a      	ldr	r0, [pc, #488]	; (a7b4 <hif_handle_isr+0x358>)
    a5cc:	4b7a      	ldr	r3, [pc, #488]	; (a7b8 <hif_handle_isr+0x35c>)
    a5ce:	4798      	blx	r3
    a5d0:	4882      	ldr	r0, [pc, #520]	; (a7dc <hif_handle_isr+0x380>)
    a5d2:	4b7b      	ldr	r3, [pc, #492]	; (a7c0 <hif_handle_isr+0x364>)
    a5d4:	4798      	blx	r3
    a5d6:	200d      	movs	r0, #13
    a5d8:	4b7a      	ldr	r3, [pc, #488]	; (a7c4 <hif_handle_isr+0x368>)
    a5da:	4798      	blx	r3
    a5dc:	e7c3      	b.n	a566 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    a5de:	4b71      	ldr	r3, [pc, #452]	; (a7a4 <hif_handle_isr+0x348>)
    a5e0:	695b      	ldr	r3, [r3, #20]
    a5e2:	2b00      	cmp	r3, #0
    a5e4:	d00b      	beq.n	a5fe <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a5e6:	4b6f      	ldr	r3, [pc, #444]	; (a7a4 <hif_handle_isr+0x348>)
    a5e8:	695b      	ldr	r3, [r3, #20]
    a5ea:	aa04      	add	r2, sp, #16
    a5ec:	7850      	ldrb	r0, [r2, #1]
    a5ee:	b2c0      	uxtb	r0, r0
    a5f0:	8851      	ldrh	r1, [r2, #2]
    a5f2:	9a05      	ldr	r2, [sp, #20]
    a5f4:	3208      	adds	r2, #8
    a5f6:	3908      	subs	r1, #8
    a5f8:	b289      	uxth	r1, r1
    a5fa:	4798      	blx	r3
    a5fc:	e7b3      	b.n	a566 <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    a5fe:	22fb      	movs	r2, #251	; 0xfb
    a600:	0052      	lsls	r2, r2, #1
    a602:	496b      	ldr	r1, [pc, #428]	; (a7b0 <hif_handle_isr+0x354>)
    a604:	486b      	ldr	r0, [pc, #428]	; (a7b4 <hif_handle_isr+0x358>)
    a606:	4b6c      	ldr	r3, [pc, #432]	; (a7b8 <hif_handle_isr+0x35c>)
    a608:	4798      	blx	r3
    a60a:	4875      	ldr	r0, [pc, #468]	; (a7e0 <hif_handle_isr+0x384>)
    a60c:	4b6c      	ldr	r3, [pc, #432]	; (a7c0 <hif_handle_isr+0x364>)
    a60e:	4798      	blx	r3
    a610:	200d      	movs	r0, #13
    a612:	4b6c      	ldr	r3, [pc, #432]	; (a7c4 <hif_handle_isr+0x368>)
    a614:	4798      	blx	r3
    a616:	e7a6      	b.n	a566 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    a618:	4b62      	ldr	r3, [pc, #392]	; (a7a4 <hif_handle_isr+0x348>)
    a61a:	6a1b      	ldr	r3, [r3, #32]
    a61c:	2b00      	cmp	r3, #0
    a61e:	d00b      	beq.n	a638 <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a620:	4b60      	ldr	r3, [pc, #384]	; (a7a4 <hif_handle_isr+0x348>)
    a622:	6a1b      	ldr	r3, [r3, #32]
    a624:	aa04      	add	r2, sp, #16
    a626:	7850      	ldrb	r0, [r2, #1]
    a628:	b2c0      	uxtb	r0, r0
    a62a:	8851      	ldrh	r1, [r2, #2]
    a62c:	9a05      	ldr	r2, [sp, #20]
    a62e:	3208      	adds	r2, #8
    a630:	3908      	subs	r1, #8
    a632:	b289      	uxth	r1, r1
    a634:	4798      	blx	r3
    a636:	e796      	b.n	a566 <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    a638:	4a6a      	ldr	r2, [pc, #424]	; (a7e4 <hif_handle_isr+0x388>)
    a63a:	495d      	ldr	r1, [pc, #372]	; (a7b0 <hif_handle_isr+0x354>)
    a63c:	485d      	ldr	r0, [pc, #372]	; (a7b4 <hif_handle_isr+0x358>)
    a63e:	4b5e      	ldr	r3, [pc, #376]	; (a7b8 <hif_handle_isr+0x35c>)
    a640:	4798      	blx	r3
    a642:	4869      	ldr	r0, [pc, #420]	; (a7e8 <hif_handle_isr+0x38c>)
    a644:	4b5e      	ldr	r3, [pc, #376]	; (a7c0 <hif_handle_isr+0x364>)
    a646:	4798      	blx	r3
    a648:	200d      	movs	r0, #13
    a64a:	4b5e      	ldr	r3, [pc, #376]	; (a7c4 <hif_handle_isr+0x368>)
    a64c:	4798      	blx	r3
    a64e:	e78a      	b.n	a566 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    a650:	4b54      	ldr	r3, [pc, #336]	; (a7a4 <hif_handle_isr+0x348>)
    a652:	699b      	ldr	r3, [r3, #24]
    a654:	2b00      	cmp	r3, #0
    a656:	d00b      	beq.n	a670 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a658:	4b52      	ldr	r3, [pc, #328]	; (a7a4 <hif_handle_isr+0x348>)
    a65a:	699b      	ldr	r3, [r3, #24]
    a65c:	aa04      	add	r2, sp, #16
    a65e:	7850      	ldrb	r0, [r2, #1]
    a660:	b2c0      	uxtb	r0, r0
    a662:	8851      	ldrh	r1, [r2, #2]
    a664:	9a05      	ldr	r2, [sp, #20]
    a666:	3208      	adds	r2, #8
    a668:	3908      	subs	r1, #8
    a66a:	b289      	uxth	r1, r1
    a66c:	4798      	blx	r3
    a66e:	e77a      	b.n	a566 <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    a670:	4a5e      	ldr	r2, [pc, #376]	; (a7ec <hif_handle_isr+0x390>)
    a672:	494f      	ldr	r1, [pc, #316]	; (a7b0 <hif_handle_isr+0x354>)
    a674:	484f      	ldr	r0, [pc, #316]	; (a7b4 <hif_handle_isr+0x358>)
    a676:	4b50      	ldr	r3, [pc, #320]	; (a7b8 <hif_handle_isr+0x35c>)
    a678:	4798      	blx	r3
    a67a:	485d      	ldr	r0, [pc, #372]	; (a7f0 <hif_handle_isr+0x394>)
    a67c:	4b50      	ldr	r3, [pc, #320]	; (a7c0 <hif_handle_isr+0x364>)
    a67e:	4798      	blx	r3
    a680:	200d      	movs	r0, #13
    a682:	4b50      	ldr	r3, [pc, #320]	; (a7c4 <hif_handle_isr+0x368>)
    a684:	4798      	blx	r3
    a686:	e76e      	b.n	a566 <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    a688:	4b46      	ldr	r3, [pc, #280]	; (a7a4 <hif_handle_isr+0x348>)
    a68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a68c:	2b00      	cmp	r3, #0
    a68e:	d100      	bne.n	a692 <hif_handle_isr+0x236>
    a690:	e769      	b.n	a566 <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    a692:	4b44      	ldr	r3, [pc, #272]	; (a7a4 <hif_handle_isr+0x348>)
    a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a696:	aa04      	add	r2, sp, #16
    a698:	7850      	ldrb	r0, [r2, #1]
    a69a:	b2c0      	uxtb	r0, r0
    a69c:	8851      	ldrh	r1, [r2, #2]
    a69e:	9a05      	ldr	r2, [sp, #20]
    a6a0:	3208      	adds	r2, #8
    a6a2:	3908      	subs	r1, #8
    a6a4:	b289      	uxth	r1, r1
    a6a6:	4798      	blx	r3
    a6a8:	e75d      	b.n	a566 <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    a6aa:	4a52      	ldr	r2, [pc, #328]	; (a7f4 <hif_handle_isr+0x398>)
    a6ac:	4940      	ldr	r1, [pc, #256]	; (a7b0 <hif_handle_isr+0x354>)
    a6ae:	4841      	ldr	r0, [pc, #260]	; (a7b4 <hif_handle_isr+0x358>)
    a6b0:	4c41      	ldr	r4, [pc, #260]	; (a7b8 <hif_handle_isr+0x35c>)
    a6b2:	47a0      	blx	r4
    a6b4:	ab04      	add	r3, sp, #16
    a6b6:	7819      	ldrb	r1, [r3, #0]
    a6b8:	b2c9      	uxtb	r1, r1
    a6ba:	785a      	ldrb	r2, [r3, #1]
    a6bc:	b2d2      	uxtb	r2, r2
    a6be:	484e      	ldr	r0, [pc, #312]	; (a7f8 <hif_handle_isr+0x39c>)
    a6c0:	47a0      	blx	r4
    a6c2:	200d      	movs	r0, #13
    a6c4:	4b3f      	ldr	r3, [pc, #252]	; (a7c4 <hif_handle_isr+0x368>)
    a6c6:	4798      	blx	r3
					ret = hif_set_rx_done();
    a6c8:	4b4c      	ldr	r3, [pc, #304]	; (a7fc <hif_handle_isr+0x3a0>)
    a6ca:	4798      	blx	r3
    a6cc:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    a6ce:	d129      	bne.n	a724 <hif_handle_isr+0x2c8>
    a6d0:	e74e      	b.n	a570 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    a6d2:	2287      	movs	r2, #135	; 0x87
    a6d4:	0092      	lsls	r2, r2, #2
    a6d6:	4936      	ldr	r1, [pc, #216]	; (a7b0 <hif_handle_isr+0x354>)
    a6d8:	4836      	ldr	r0, [pc, #216]	; (a7b4 <hif_handle_isr+0x358>)
    a6da:	4b37      	ldr	r3, [pc, #220]	; (a7b8 <hif_handle_isr+0x35c>)
    a6dc:	4798      	blx	r3
    a6de:	4848      	ldr	r0, [pc, #288]	; (a800 <hif_handle_isr+0x3a4>)
    a6e0:	4b37      	ldr	r3, [pc, #220]	; (a7c0 <hif_handle_isr+0x364>)
    a6e2:	4798      	blx	r3
    a6e4:	200d      	movs	r0, #13
    a6e6:	4b37      	ldr	r3, [pc, #220]	; (a7c4 <hif_handle_isr+0x368>)
    a6e8:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    a6ea:	2402      	movs	r4, #2
    a6ec:	4264      	negs	r4, r4
    a6ee:	e019      	b.n	a724 <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    a6f0:	2289      	movs	r2, #137	; 0x89
    a6f2:	0092      	lsls	r2, r2, #2
    a6f4:	492e      	ldr	r1, [pc, #184]	; (a7b0 <hif_handle_isr+0x354>)
    a6f6:	482f      	ldr	r0, [pc, #188]	; (a7b4 <hif_handle_isr+0x358>)
    a6f8:	4c2f      	ldr	r4, [pc, #188]	; (a7b8 <hif_handle_isr+0x35c>)
    a6fa:	47a0      	blx	r4
    a6fc:	9903      	ldr	r1, [sp, #12]
    a6fe:	4841      	ldr	r0, [pc, #260]	; (a804 <hif_handle_isr+0x3a8>)
    a700:	47a0      	blx	r4
    a702:	200d      	movs	r0, #13
    a704:	4b2f      	ldr	r3, [pc, #188]	; (a7c4 <hif_handle_isr+0x368>)
    a706:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a708:	240c      	movs	r4, #12
    a70a:	4264      	negs	r4, r4
    a70c:	e00a      	b.n	a724 <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    a70e:	4a3e      	ldr	r2, [pc, #248]	; (a808 <hif_handle_isr+0x3ac>)
    a710:	4927      	ldr	r1, [pc, #156]	; (a7b0 <hif_handle_isr+0x354>)
    a712:	4828      	ldr	r0, [pc, #160]	; (a7b4 <hif_handle_isr+0x358>)
    a714:	4b28      	ldr	r3, [pc, #160]	; (a7b8 <hif_handle_isr+0x35c>)
    a716:	4798      	blx	r3
    a718:	483c      	ldr	r0, [pc, #240]	; (a80c <hif_handle_isr+0x3b0>)
    a71a:	4b29      	ldr	r3, [pc, #164]	; (a7c0 <hif_handle_isr+0x364>)
    a71c:	4798      	blx	r3
    a71e:	200d      	movs	r0, #13
    a720:	4b28      	ldr	r3, [pc, #160]	; (a7c4 <hif_handle_isr+0x368>)
    a722:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    a724:	4a3a      	ldr	r2, [pc, #232]	; (a810 <hif_handle_isr+0x3b4>)
    a726:	493b      	ldr	r1, [pc, #236]	; (a814 <hif_handle_isr+0x3b8>)
    a728:	4822      	ldr	r0, [pc, #136]	; (a7b4 <hif_handle_isr+0x358>)
    a72a:	4f23      	ldr	r7, [pc, #140]	; (a7b8 <hif_handle_isr+0x35c>)
    a72c:	47b8      	blx	r7
    a72e:	0021      	movs	r1, r4
    a730:	4839      	ldr	r0, [pc, #228]	; (a818 <hif_handle_isr+0x3bc>)
    a732:	47b8      	blx	r7
    a734:	200d      	movs	r0, #13
    a736:	4b23      	ldr	r3, [pc, #140]	; (a7c4 <hif_handle_isr+0x368>)
    a738:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    a73a:	a903      	add	r1, sp, #12
    a73c:	4837      	ldr	r0, [pc, #220]	; (a81c <hif_handle_isr+0x3c0>)
    a73e:	47b0      	blx	r6
    a740:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    a742:	d1e4      	bne.n	a70e <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    a744:	9b03      	ldr	r3, [sp, #12]
    a746:	07db      	lsls	r3, r3, #31
    a748:	d5d2      	bpl.n	a6f0 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    a74a:	2000      	movs	r0, #0
    a74c:	4b1f      	ldr	r3, [pc, #124]	; (a7cc <hif_handle_isr+0x370>)
    a74e:	4798      	blx	r3
			reg &= ~NBIT0;
    a750:	2301      	movs	r3, #1
    a752:	9903      	ldr	r1, [sp, #12]
    a754:	4399      	bics	r1, r3
    a756:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    a758:	4830      	ldr	r0, [pc, #192]	; (a81c <hif_handle_isr+0x3c0>)
    a75a:	4b31      	ldr	r3, [pc, #196]	; (a820 <hif_handle_isr+0x3c4>)
    a75c:	4798      	blx	r3
    a75e:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    a760:	d1e0      	bne.n	a724 <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    a762:	2201      	movs	r2, #1
    a764:	4b0f      	ldr	r3, [pc, #60]	; (a7a4 <hif_handle_isr+0x348>)
    a766:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    a768:	9b03      	ldr	r3, [sp, #12]
    a76a:	049d      	lsls	r5, r3, #18
    a76c:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    a76e:	d0b0      	beq.n	a6d2 <hif_handle_isr+0x276>
				uint32 address = 0;
    a770:	2300      	movs	r3, #0
    a772:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    a774:	a905      	add	r1, sp, #20
    a776:	482b      	ldr	r0, [pc, #172]	; (a824 <hif_handle_isr+0x3c8>)
    a778:	4b16      	ldr	r3, [pc, #88]	; (a7d4 <hif_handle_isr+0x378>)
    a77a:	4798      	blx	r3
    a77c:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    a77e:	d100      	bne.n	a782 <hif_handle_isr+0x326>
    a780:	e675      	b.n	a46e <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    a782:	22c8      	movs	r2, #200	; 0xc8
    a784:	32ff      	adds	r2, #255	; 0xff
    a786:	490a      	ldr	r1, [pc, #40]	; (a7b0 <hif_handle_isr+0x354>)
    a788:	480a      	ldr	r0, [pc, #40]	; (a7b4 <hif_handle_isr+0x358>)
    a78a:	4b0b      	ldr	r3, [pc, #44]	; (a7b8 <hif_handle_isr+0x35c>)
    a78c:	4798      	blx	r3
    a78e:	4826      	ldr	r0, [pc, #152]	; (a828 <hif_handle_isr+0x3cc>)
    a790:	4b0b      	ldr	r3, [pc, #44]	; (a7c0 <hif_handle_isr+0x364>)
    a792:	4798      	blx	r3
    a794:	200d      	movs	r0, #13
    a796:	4b0b      	ldr	r3, [pc, #44]	; (a7c4 <hif_handle_isr+0x368>)
    a798:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    a79a:	2001      	movs	r0, #1
    a79c:	4b0b      	ldr	r3, [pc, #44]	; (a7cc <hif_handle_isr+0x370>)
    a79e:	4798      	blx	r3
    a7a0:	e7c0      	b.n	a724 <hif_handle_isr+0x2c8>
    a7a2:	46c0      	nop			; (mov r8, r8)
    a7a4:	20000438 	.word	0x20000438
    a7a8:	0000b595 	.word	0x0000b595
    a7ac:	0000020f 	.word	0x0000020f
    a7b0:	00013190 	.word	0x00013190
    a7b4:	0001313c 	.word	0x0001313c
    a7b8:	00011941 	.word	0x00011941
    a7bc:	000132ec 	.word	0x000132ec
    a7c0:	00011a5d 	.word	0x00011a5d
    a7c4:	00011975 	.word	0x00011975
    a7c8:	000131e8 	.word	0x000131e8
    a7cc:	00009e21 	.word	0x00009e21
    a7d0:	00013200 	.word	0x00013200
    a7d4:	0000b57d 	.word	0x0000b57d
    a7d8:	00013240 	.word	0x00013240
    a7dc:	00013260 	.word	0x00013260
    a7e0:	00013284 	.word	0x00013284
    a7e4:	000001ff 	.word	0x000001ff
    a7e8:	000132a4 	.word	0x000132a4
    a7ec:	00000206 	.word	0x00000206
    a7f0:	000132c8 	.word	0x000132c8
    a7f4:	00000215 	.word	0x00000215
    a7f8:	00013304 	.word	0x00013304
    a7fc:	0000a135 	.word	0x0000a135
    a800:	00013330 	.word	0x00013330
    a804:	00013344 	.word	0x00013344
    a808:	0000022d 	.word	0x0000022d
    a80c:	00013360 	.word	0x00013360
    a810:	0000024a 	.word	0x0000024a
    a814:	00013198 	.word	0x00013198
    a818:	00013384 	.word	0x00013384
    a81c:	00001070 	.word	0x00001070
    a820:	0000b589 	.word	0x0000b589
    a824:	00001084 	.word	0x00001084
    a828:	000131c4 	.word	0x000131c4
			}
		}
	}

	return ret;
}
    a82c:	2000      	movs	r0, #0
    a82e:	b007      	add	sp, #28
    a830:	bc0c      	pop	{r2, r3}
    a832:	4690      	mov	r8, r2
    a834:	4699      	mov	r9, r3
    a836:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a838 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    a838:	b570      	push	{r4, r5, r6, lr}
    a83a:	0014      	movs	r4, r2
    a83c:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    a83e:	2800      	cmp	r0, #0
    a840:	d003      	beq.n	a84a <hif_receive+0x12>
    a842:	2900      	cmp	r1, #0
    a844:	d001      	beq.n	a84a <hif_receive+0x12>
    a846:	2a00      	cmp	r2, #0
    a848:	d112      	bne.n	a870 <hif_receive+0x38>
	{
		if(isDone)
    a84a:	2d00      	cmp	r5, #0
    a84c:	d002      	beq.n	a854 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    a84e:	4b27      	ldr	r3, [pc, #156]	; (a8ec <hif_receive+0xb4>)
    a850:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    a852:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    a854:	4a26      	ldr	r2, [pc, #152]	; (a8f0 <hif_receive+0xb8>)
    a856:	4927      	ldr	r1, [pc, #156]	; (a8f4 <hif_receive+0xbc>)
    a858:	4827      	ldr	r0, [pc, #156]	; (a8f8 <hif_receive+0xc0>)
    a85a:	4b28      	ldr	r3, [pc, #160]	; (a8fc <hif_receive+0xc4>)
    a85c:	4798      	blx	r3
    a85e:	4828      	ldr	r0, [pc, #160]	; (a900 <hif_receive+0xc8>)
    a860:	4b28      	ldr	r3, [pc, #160]	; (a904 <hif_receive+0xcc>)
    a862:	4798      	blx	r3
    a864:	200d      	movs	r0, #13
    a866:	4b28      	ldr	r3, [pc, #160]	; (a908 <hif_receive+0xd0>)
    a868:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a86a:	200c      	movs	r0, #12
    a86c:	4240      	negs	r0, r0
    a86e:	e7f0      	b.n	a852 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    a870:	4b26      	ldr	r3, [pc, #152]	; (a90c <hif_receive+0xd4>)
    a872:	689b      	ldr	r3, [r3, #8]
    a874:	429a      	cmp	r2, r3
    a876:	d81a      	bhi.n	a8ae <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    a878:	4b24      	ldr	r3, [pc, #144]	; (a90c <hif_receive+0xd4>)
    a87a:	685b      	ldr	r3, [r3, #4]
    a87c:	4298      	cmp	r0, r3
    a87e:	d326      	bcc.n	a8ce <hif_receive+0x96>
    a880:	1886      	adds	r6, r0, r2
    a882:	4a22      	ldr	r2, [pc, #136]	; (a90c <hif_receive+0xd4>)
    a884:	6853      	ldr	r3, [r2, #4]
    a886:	6892      	ldr	r2, [r2, #8]
    a888:	189b      	adds	r3, r3, r2
    a88a:	429e      	cmp	r6, r3
    a88c:	d81f      	bhi.n	a8ce <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    a88e:	0022      	movs	r2, r4
    a890:	4b1f      	ldr	r3, [pc, #124]	; (a910 <hif_receive+0xd8>)
    a892:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    a894:	2800      	cmp	r0, #0
    a896:	d1dc      	bne.n	a852 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    a898:	4a1c      	ldr	r2, [pc, #112]	; (a90c <hif_receive+0xd4>)
    a89a:	6853      	ldr	r3, [r2, #4]
    a89c:	6892      	ldr	r2, [r2, #8]
    a89e:	189b      	adds	r3, r3, r2
    a8a0:	429e      	cmp	r6, r3
    a8a2:	d001      	beq.n	a8a8 <hif_receive+0x70>
    a8a4:	2d00      	cmp	r5, #0
    a8a6:	d0d4      	beq.n	a852 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    a8a8:	4b10      	ldr	r3, [pc, #64]	; (a8ec <hif_receive+0xb4>)
    a8aa:	4798      	blx	r3
    a8ac:	e7d1      	b.n	a852 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    a8ae:	4a19      	ldr	r2, [pc, #100]	; (a914 <hif_receive+0xdc>)
    a8b0:	4910      	ldr	r1, [pc, #64]	; (a8f4 <hif_receive+0xbc>)
    a8b2:	4811      	ldr	r0, [pc, #68]	; (a8f8 <hif_receive+0xc0>)
    a8b4:	4d11      	ldr	r5, [pc, #68]	; (a8fc <hif_receive+0xc4>)
    a8b6:	47a8      	blx	r5
    a8b8:	4b14      	ldr	r3, [pc, #80]	; (a90c <hif_receive+0xd4>)
    a8ba:	689a      	ldr	r2, [r3, #8]
    a8bc:	0021      	movs	r1, r4
    a8be:	4816      	ldr	r0, [pc, #88]	; (a918 <hif_receive+0xe0>)
    a8c0:	47a8      	blx	r5
    a8c2:	200d      	movs	r0, #13
    a8c4:	4b10      	ldr	r3, [pc, #64]	; (a908 <hif_receive+0xd0>)
    a8c6:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    a8c8:	200c      	movs	r0, #12
    a8ca:	4240      	negs	r0, r0
		goto ERR1;
    a8cc:	e7c1      	b.n	a852 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    a8ce:	4a13      	ldr	r2, [pc, #76]	; (a91c <hif_receive+0xe4>)
    a8d0:	4908      	ldr	r1, [pc, #32]	; (a8f4 <hif_receive+0xbc>)
    a8d2:	4809      	ldr	r0, [pc, #36]	; (a8f8 <hif_receive+0xc0>)
    a8d4:	4b09      	ldr	r3, [pc, #36]	; (a8fc <hif_receive+0xc4>)
    a8d6:	4798      	blx	r3
    a8d8:	4811      	ldr	r0, [pc, #68]	; (a920 <hif_receive+0xe8>)
    a8da:	4b0a      	ldr	r3, [pc, #40]	; (a904 <hif_receive+0xcc>)
    a8dc:	4798      	blx	r3
    a8de:	200d      	movs	r0, #13
    a8e0:	4b09      	ldr	r3, [pc, #36]	; (a908 <hif_receive+0xd0>)
    a8e2:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    a8e4:	200c      	movs	r0, #12
    a8e6:	4240      	negs	r0, r0
		goto ERR1;
    a8e8:	e7b3      	b.n	a852 <hif_receive+0x1a>
    a8ea:	46c0      	nop			; (mov r8, r8)
    a8ec:	0000a135 	.word	0x0000a135
    a8f0:	0000026b 	.word	0x0000026b
    a8f4:	000131a8 	.word	0x000131a8
    a8f8:	0001313c 	.word	0x0001313c
    a8fc:	00011941 	.word	0x00011941
    a900:	000133b4 	.word	0x000133b4
    a904:	00011a5d 	.word	0x00011a5d
    a908:	00011975 	.word	0x00011975
    a90c:	20000438 	.word	0x20000438
    a910:	0000b595 	.word	0x0000b595
    a914:	00000273 	.word	0x00000273
    a918:	000133d4 	.word	0x000133d4
    a91c:	00000279 	.word	0x00000279
    a920:	0001341c 	.word	0x0001341c

0000a924 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    a924:	b570      	push	{r4, r5, r6, lr}
    a926:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    a928:	2807      	cmp	r0, #7
    a92a:	d81f      	bhi.n	a96c <hif_register_cb+0x48>
    a92c:	0083      	lsls	r3, r0, #2
    a92e:	4a16      	ldr	r2, [pc, #88]	; (a988 <hif_register_cb+0x64>)
    a930:	58d3      	ldr	r3, [r2, r3]
    a932:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    a934:	4b15      	ldr	r3, [pc, #84]	; (a98c <hif_register_cb+0x68>)
    a936:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    a938:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    a93a:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    a93c:	4b13      	ldr	r3, [pc, #76]	; (a98c <hif_register_cb+0x68>)
    a93e:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    a940:	2000      	movs	r0, #0
			break;
    a942:	e7fa      	b.n	a93a <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    a944:	4b11      	ldr	r3, [pc, #68]	; (a98c <hif_register_cb+0x68>)
    a946:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    a948:	2000      	movs	r0, #0
			break;
    a94a:	e7f6      	b.n	a93a <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    a94c:	4b0f      	ldr	r3, [pc, #60]	; (a98c <hif_register_cb+0x68>)
    a94e:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    a950:	2000      	movs	r0, #0
			break;
    a952:	e7f2      	b.n	a93a <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    a954:	4b0d      	ldr	r3, [pc, #52]	; (a98c <hif_register_cb+0x68>)
    a956:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    a958:	2000      	movs	r0, #0
			break;
    a95a:	e7ee      	b.n	a93a <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    a95c:	4b0b      	ldr	r3, [pc, #44]	; (a98c <hif_register_cb+0x68>)
    a95e:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    a960:	2000      	movs	r0, #0
			break;
    a962:	e7ea      	b.n	a93a <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    a964:	4b09      	ldr	r3, [pc, #36]	; (a98c <hif_register_cb+0x68>)
    a966:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    a968:	2000      	movs	r0, #0
			break;
    a96a:	e7e6      	b.n	a93a <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    a96c:	4a08      	ldr	r2, [pc, #32]	; (a990 <hif_register_cb+0x6c>)
    a96e:	4909      	ldr	r1, [pc, #36]	; (a994 <hif_register_cb+0x70>)
    a970:	4809      	ldr	r0, [pc, #36]	; (a998 <hif_register_cb+0x74>)
    a972:	4d0a      	ldr	r5, [pc, #40]	; (a99c <hif_register_cb+0x78>)
    a974:	47a8      	blx	r5
    a976:	0021      	movs	r1, r4
    a978:	4809      	ldr	r0, [pc, #36]	; (a9a0 <hif_register_cb+0x7c>)
    a97a:	47a8      	blx	r5
    a97c:	200d      	movs	r0, #13
    a97e:	4b09      	ldr	r3, [pc, #36]	; (a9a4 <hif_register_cb+0x80>)
    a980:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a982:	200c      	movs	r0, #12
    a984:	4240      	negs	r0, r0
			break;
    a986:	e7d8      	b.n	a93a <hif_register_cb+0x16>
    a988:	00013164 	.word	0x00013164
    a98c:	20000438 	.word	0x20000438
    a990:	000002b1 	.word	0x000002b1
    a994:	000131b4 	.word	0x000131b4
    a998:	0001313c 	.word	0x0001313c
    a99c:	00011941 	.word	0x00011941
    a9a0:	00013460 	.word	0x00013460
    a9a4:	00011975 	.word	0x00011975

0000a9a8 <hif_init>:
{
    a9a8:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    a9aa:	2228      	movs	r2, #40	; 0x28
    a9ac:	2100      	movs	r1, #0
    a9ae:	4806      	ldr	r0, [pc, #24]	; (a9c8 <hif_init+0x20>)
    a9b0:	4b06      	ldr	r3, [pc, #24]	; (a9cc <hif_init+0x24>)
    a9b2:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    a9b4:	4806      	ldr	r0, [pc, #24]	; (a9d0 <hif_init+0x28>)
    a9b6:	4b07      	ldr	r3, [pc, #28]	; (a9d4 <hif_init+0x2c>)
    a9b8:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    a9ba:	4907      	ldr	r1, [pc, #28]	; (a9d8 <hif_init+0x30>)
    a9bc:	2003      	movs	r0, #3
    a9be:	4b07      	ldr	r3, [pc, #28]	; (a9dc <hif_init+0x34>)
    a9c0:	4798      	blx	r3
}
    a9c2:	2000      	movs	r0, #0
    a9c4:	bd10      	pop	{r4, pc}
    a9c6:	46c0      	nop			; (mov r8, r8)
    a9c8:	20000438 	.word	0x20000438
    a9cc:	0000a0f5 	.word	0x0000a0f5
    a9d0:	0000a121 	.word	0x0000a121
    a9d4:	00009dcd 	.word	0x00009dcd
    a9d8:	0000a131 	.word	0x0000a131
    a9dc:	0000a925 	.word	0x0000a925

0000a9e0 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    a9e0:	b530      	push	{r4, r5, lr}
    a9e2:	b09f      	sub	sp, #124	; 0x7c
    a9e4:	0004      	movs	r4, r0
    a9e6:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    a9e8:	282c      	cmp	r0, #44	; 0x2c
    a9ea:	d02f      	beq.n	aa4c <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    a9ec:	281b      	cmp	r0, #27
    a9ee:	d03d      	beq.n	aa6c <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    a9f0:	2806      	cmp	r0, #6
    a9f2:	d04b      	beq.n	aa8c <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    a9f4:	280e      	cmp	r0, #14
    a9f6:	d027      	beq.n	aa48 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    a9f8:	2832      	cmp	r0, #50	; 0x32
    a9fa:	d057      	beq.n	aaac <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    a9fc:	282f      	cmp	r0, #47	; 0x2f
    a9fe:	d065      	beq.n	aacc <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    aa00:	2834      	cmp	r0, #52	; 0x34
    aa02:	d100      	bne.n	aa06 <m2m_wifi_cb+0x26>
    aa04:	e077      	b.n	aaf6 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    aa06:	2811      	cmp	r0, #17
    aa08:	d100      	bne.n	aa0c <m2m_wifi_cb+0x2c>
    aa0a:	e096      	b.n	ab3a <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    aa0c:	2813      	cmp	r0, #19
    aa0e:	d100      	bne.n	aa12 <m2m_wifi_cb+0x32>
    aa10:	e0ac      	b.n	ab6c <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    aa12:	2804      	cmp	r0, #4
    aa14:	d100      	bne.n	aa18 <m2m_wifi_cb+0x38>
    aa16:	e0bb      	b.n	ab90 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    aa18:	2865      	cmp	r0, #101	; 0x65
    aa1a:	d100      	bne.n	aa1e <m2m_wifi_cb+0x3e>
    aa1c:	e0ca      	b.n	abb4 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    aa1e:	2809      	cmp	r0, #9
    aa20:	d100      	bne.n	aa24 <m2m_wifi_cb+0x44>
    aa22:	e0d9      	b.n	abd8 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    aa24:	282a      	cmp	r0, #42	; 0x2a
    aa26:	d100      	bne.n	aa2a <m2m_wifi_cb+0x4a>
    aa28:	e0e8      	b.n	abfc <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    aa2a:	2820      	cmp	r0, #32
    aa2c:	d100      	bne.n	aa30 <m2m_wifi_cb+0x50>
    aa2e:	e0f7      	b.n	ac20 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    aa30:	2292      	movs	r2, #146	; 0x92
    aa32:	0052      	lsls	r2, r2, #1
    aa34:	4989      	ldr	r1, [pc, #548]	; (ac5c <m2m_wifi_cb+0x27c>)
    aa36:	488a      	ldr	r0, [pc, #552]	; (ac60 <m2m_wifi_cb+0x280>)
    aa38:	4d8a      	ldr	r5, [pc, #552]	; (ac64 <m2m_wifi_cb+0x284>)
    aa3a:	47a8      	blx	r5
    aa3c:	0021      	movs	r1, r4
    aa3e:	488a      	ldr	r0, [pc, #552]	; (ac68 <m2m_wifi_cb+0x288>)
    aa40:	47a8      	blx	r5
    aa42:	200d      	movs	r0, #13
    aa44:	4b89      	ldr	r3, [pc, #548]	; (ac6c <m2m_wifi_cb+0x28c>)
    aa46:	4798      	blx	r3
	}
}
    aa48:	b01f      	add	sp, #124	; 0x7c
    aa4a:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    aa4c:	2300      	movs	r3, #0
    aa4e:	2204      	movs	r2, #4
    aa50:	a903      	add	r1, sp, #12
    aa52:	0028      	movs	r0, r5
    aa54:	4c86      	ldr	r4, [pc, #536]	; (ac70 <m2m_wifi_cb+0x290>)
    aa56:	47a0      	blx	r4
    aa58:	2800      	cmp	r0, #0
    aa5a:	d1f5      	bne.n	aa48 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    aa5c:	4b85      	ldr	r3, [pc, #532]	; (ac74 <m2m_wifi_cb+0x294>)
    aa5e:	681b      	ldr	r3, [r3, #0]
    aa60:	2b00      	cmp	r3, #0
    aa62:	d0f1      	beq.n	aa48 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    aa64:	a903      	add	r1, sp, #12
    aa66:	302c      	adds	r0, #44	; 0x2c
    aa68:	4798      	blx	r3
    aa6a:	e7ed      	b.n	aa48 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    aa6c:	2300      	movs	r3, #0
    aa6e:	2208      	movs	r2, #8
    aa70:	a903      	add	r1, sp, #12
    aa72:	0028      	movs	r0, r5
    aa74:	4c7e      	ldr	r4, [pc, #504]	; (ac70 <m2m_wifi_cb+0x290>)
    aa76:	47a0      	blx	r4
    aa78:	2800      	cmp	r0, #0
    aa7a:	d1e5      	bne.n	aa48 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    aa7c:	4b7d      	ldr	r3, [pc, #500]	; (ac74 <m2m_wifi_cb+0x294>)
    aa7e:	681b      	ldr	r3, [r3, #0]
    aa80:	2b00      	cmp	r3, #0
    aa82:	d0e1      	beq.n	aa48 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    aa84:	a903      	add	r1, sp, #12
    aa86:	301b      	adds	r0, #27
    aa88:	4798      	blx	r3
    aa8a:	e7dd      	b.n	aa48 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    aa8c:	2301      	movs	r3, #1
    aa8e:	2230      	movs	r2, #48	; 0x30
    aa90:	a903      	add	r1, sp, #12
    aa92:	0028      	movs	r0, r5
    aa94:	4c76      	ldr	r4, [pc, #472]	; (ac70 <m2m_wifi_cb+0x290>)
    aa96:	47a0      	blx	r4
    aa98:	2800      	cmp	r0, #0
    aa9a:	d1d5      	bne.n	aa48 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    aa9c:	4b75      	ldr	r3, [pc, #468]	; (ac74 <m2m_wifi_cb+0x294>)
    aa9e:	681b      	ldr	r3, [r3, #0]
    aaa0:	2b00      	cmp	r3, #0
    aaa2:	d0d1      	beq.n	aa48 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    aaa4:	a903      	add	r1, sp, #12
    aaa6:	3006      	adds	r0, #6
    aaa8:	4798      	blx	r3
    aaaa:	e7cd      	b.n	aa48 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    aaac:	2300      	movs	r3, #0
    aaae:	2214      	movs	r2, #20
    aab0:	a903      	add	r1, sp, #12
    aab2:	0028      	movs	r0, r5
    aab4:	4c6e      	ldr	r4, [pc, #440]	; (ac70 <m2m_wifi_cb+0x290>)
    aab6:	47a0      	blx	r4
    aab8:	2800      	cmp	r0, #0
    aaba:	d1c5      	bne.n	aa48 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    aabc:	4b6d      	ldr	r3, [pc, #436]	; (ac74 <m2m_wifi_cb+0x294>)
    aabe:	681b      	ldr	r3, [r3, #0]
    aac0:	2b00      	cmp	r3, #0
    aac2:	d0c1      	beq.n	aa48 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    aac4:	a903      	add	r1, sp, #12
    aac6:	3032      	adds	r0, #50	; 0x32
    aac8:	4798      	blx	r3
    aaca:	e7bd      	b.n	aa48 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    aacc:	2264      	movs	r2, #100	; 0x64
    aace:	2100      	movs	r1, #0
    aad0:	a803      	add	r0, sp, #12
    aad2:	4b69      	ldr	r3, [pc, #420]	; (ac78 <m2m_wifi_cb+0x298>)
    aad4:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    aad6:	2300      	movs	r3, #0
    aad8:	2264      	movs	r2, #100	; 0x64
    aada:	a903      	add	r1, sp, #12
    aadc:	0028      	movs	r0, r5
    aade:	4c64      	ldr	r4, [pc, #400]	; (ac70 <m2m_wifi_cb+0x290>)
    aae0:	47a0      	blx	r4
    aae2:	2800      	cmp	r0, #0
    aae4:	d1b0      	bne.n	aa48 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    aae6:	4b63      	ldr	r3, [pc, #396]	; (ac74 <m2m_wifi_cb+0x294>)
    aae8:	681b      	ldr	r3, [r3, #0]
    aaea:	2b00      	cmp	r3, #0
    aaec:	d0ac      	beq.n	aa48 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    aaee:	a903      	add	r1, sp, #12
    aaf0:	302f      	adds	r0, #47	; 0x2f
    aaf2:	4798      	blx	r3
    aaf4:	e7a8      	b.n	aa48 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    aaf6:	2300      	movs	r3, #0
    aaf8:	2204      	movs	r2, #4
    aafa:	a903      	add	r1, sp, #12
    aafc:	0028      	movs	r0, r5
    aafe:	4c5c      	ldr	r4, [pc, #368]	; (ac70 <m2m_wifi_cb+0x290>)
    ab00:	47a0      	blx	r4
    ab02:	2800      	cmp	r0, #0
    ab04:	d1a0      	bne.n	aa48 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    ab06:	485d      	ldr	r0, [pc, #372]	; (ac7c <m2m_wifi_cb+0x29c>)
    ab08:	4d56      	ldr	r5, [pc, #344]	; (ac64 <m2m_wifi_cb+0x284>)
    ab0a:	47a8      	blx	r5
    ab0c:	9c03      	ldr	r4, [sp, #12]
    ab0e:	0a23      	lsrs	r3, r4, #8
    ab10:	20ff      	movs	r0, #255	; 0xff
    ab12:	4003      	ands	r3, r0
    ab14:	0c22      	lsrs	r2, r4, #16
    ab16:	4002      	ands	r2, r0
    ab18:	0e21      	lsrs	r1, r4, #24
    ab1a:	4020      	ands	r0, r4
    ab1c:	9000      	str	r0, [sp, #0]
    ab1e:	4858      	ldr	r0, [pc, #352]	; (ac80 <m2m_wifi_cb+0x2a0>)
    ab20:	47a8      	blx	r5
    ab22:	200d      	movs	r0, #13
    ab24:	4b51      	ldr	r3, [pc, #324]	; (ac6c <m2m_wifi_cb+0x28c>)
    ab26:	4798      	blx	r3
			if (gpfAppWifiCb)
    ab28:	4b52      	ldr	r3, [pc, #328]	; (ac74 <m2m_wifi_cb+0x294>)
    ab2a:	681b      	ldr	r3, [r3, #0]
    ab2c:	2b00      	cmp	r3, #0
    ab2e:	d100      	bne.n	ab32 <m2m_wifi_cb+0x152>
    ab30:	e78a      	b.n	aa48 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    ab32:	2100      	movs	r1, #0
    ab34:	2034      	movs	r0, #52	; 0x34
    ab36:	4798      	blx	r3
    ab38:	e786      	b.n	aa48 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    ab3a:	2200      	movs	r2, #0
    ab3c:	4b51      	ldr	r3, [pc, #324]	; (ac84 <m2m_wifi_cb+0x2a4>)
    ab3e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    ab40:	2300      	movs	r3, #0
    ab42:	3204      	adds	r2, #4
    ab44:	a903      	add	r1, sp, #12
    ab46:	0028      	movs	r0, r5
    ab48:	4c49      	ldr	r4, [pc, #292]	; (ac70 <m2m_wifi_cb+0x290>)
    ab4a:	47a0      	blx	r4
    ab4c:	2800      	cmp	r0, #0
    ab4e:	d000      	beq.n	ab52 <m2m_wifi_cb+0x172>
    ab50:	e77a      	b.n	aa48 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    ab52:	ab03      	add	r3, sp, #12
    ab54:	781a      	ldrb	r2, [r3, #0]
    ab56:	4b4c      	ldr	r3, [pc, #304]	; (ac88 <m2m_wifi_cb+0x2a8>)
    ab58:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    ab5a:	4b46      	ldr	r3, [pc, #280]	; (ac74 <m2m_wifi_cb+0x294>)
    ab5c:	681b      	ldr	r3, [r3, #0]
    ab5e:	2b00      	cmp	r3, #0
    ab60:	d100      	bne.n	ab64 <m2m_wifi_cb+0x184>
    ab62:	e771      	b.n	aa48 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    ab64:	a903      	add	r1, sp, #12
    ab66:	3011      	adds	r0, #17
    ab68:	4798      	blx	r3
    ab6a:	e76d      	b.n	aa48 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    ab6c:	2300      	movs	r3, #0
    ab6e:	222c      	movs	r2, #44	; 0x2c
    ab70:	a903      	add	r1, sp, #12
    ab72:	0028      	movs	r0, r5
    ab74:	4c3e      	ldr	r4, [pc, #248]	; (ac70 <m2m_wifi_cb+0x290>)
    ab76:	47a0      	blx	r4
    ab78:	2800      	cmp	r0, #0
    ab7a:	d000      	beq.n	ab7e <m2m_wifi_cb+0x19e>
    ab7c:	e764      	b.n	aa48 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    ab7e:	4b3d      	ldr	r3, [pc, #244]	; (ac74 <m2m_wifi_cb+0x294>)
    ab80:	681b      	ldr	r3, [r3, #0]
    ab82:	2b00      	cmp	r3, #0
    ab84:	d100      	bne.n	ab88 <m2m_wifi_cb+0x1a8>
    ab86:	e75f      	b.n	aa48 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    ab88:	a903      	add	r1, sp, #12
    ab8a:	3013      	adds	r0, #19
    ab8c:	4798      	blx	r3
    ab8e:	e75b      	b.n	aa48 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    ab90:	2300      	movs	r3, #0
    ab92:	2204      	movs	r2, #4
    ab94:	a91c      	add	r1, sp, #112	; 0x70
    ab96:	0028      	movs	r0, r5
    ab98:	4c35      	ldr	r4, [pc, #212]	; (ac70 <m2m_wifi_cb+0x290>)
    ab9a:	47a0      	blx	r4
    ab9c:	2800      	cmp	r0, #0
    ab9e:	d000      	beq.n	aba2 <m2m_wifi_cb+0x1c2>
    aba0:	e752      	b.n	aa48 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    aba2:	4b34      	ldr	r3, [pc, #208]	; (ac74 <m2m_wifi_cb+0x294>)
    aba4:	681b      	ldr	r3, [r3, #0]
    aba6:	2b00      	cmp	r3, #0
    aba8:	d100      	bne.n	abac <m2m_wifi_cb+0x1cc>
    abaa:	e74d      	b.n	aa48 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    abac:	a91c      	add	r1, sp, #112	; 0x70
    abae:	3004      	adds	r0, #4
    abb0:	4798      	blx	r3
    abb2:	e749      	b.n	aa48 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    abb4:	2300      	movs	r3, #0
    abb6:	2204      	movs	r2, #4
    abb8:	a91c      	add	r1, sp, #112	; 0x70
    abba:	0028      	movs	r0, r5
    abbc:	4c2c      	ldr	r4, [pc, #176]	; (ac70 <m2m_wifi_cb+0x290>)
    abbe:	47a0      	blx	r4
    abc0:	2800      	cmp	r0, #0
    abc2:	d000      	beq.n	abc6 <m2m_wifi_cb+0x1e6>
    abc4:	e740      	b.n	aa48 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    abc6:	4b2b      	ldr	r3, [pc, #172]	; (ac74 <m2m_wifi_cb+0x294>)
    abc8:	681b      	ldr	r3, [r3, #0]
    abca:	2b00      	cmp	r3, #0
    abcc:	d100      	bne.n	abd0 <m2m_wifi_cb+0x1f0>
    abce:	e73b      	b.n	aa48 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    abd0:	a91c      	add	r1, sp, #112	; 0x70
    abd2:	3065      	adds	r0, #101	; 0x65
    abd4:	4798      	blx	r3
    abd6:	e737      	b.n	aa48 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    abd8:	2301      	movs	r3, #1
    abda:	2264      	movs	r2, #100	; 0x64
    abdc:	a903      	add	r1, sp, #12
    abde:	0028      	movs	r0, r5
    abe0:	4c23      	ldr	r4, [pc, #140]	; (ac70 <m2m_wifi_cb+0x290>)
    abe2:	47a0      	blx	r4
    abe4:	2800      	cmp	r0, #0
    abe6:	d000      	beq.n	abea <m2m_wifi_cb+0x20a>
    abe8:	e72e      	b.n	aa48 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    abea:	4b22      	ldr	r3, [pc, #136]	; (ac74 <m2m_wifi_cb+0x294>)
    abec:	681b      	ldr	r3, [r3, #0]
    abee:	2b00      	cmp	r3, #0
    abf0:	d100      	bne.n	abf4 <m2m_wifi_cb+0x214>
    abf2:	e729      	b.n	aa48 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    abf4:	a903      	add	r1, sp, #12
    abf6:	3009      	adds	r0, #9
    abf8:	4798      	blx	r3
    abfa:	e725      	b.n	aa48 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    abfc:	2301      	movs	r3, #1
    abfe:	2204      	movs	r2, #4
    ac00:	a903      	add	r1, sp, #12
    ac02:	0028      	movs	r0, r5
    ac04:	4c1a      	ldr	r4, [pc, #104]	; (ac70 <m2m_wifi_cb+0x290>)
    ac06:	47a0      	blx	r4
    ac08:	2800      	cmp	r0, #0
    ac0a:	d000      	beq.n	ac0e <m2m_wifi_cb+0x22e>
    ac0c:	e71c      	b.n	aa48 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    ac0e:	4b19      	ldr	r3, [pc, #100]	; (ac74 <m2m_wifi_cb+0x294>)
    ac10:	681b      	ldr	r3, [r3, #0]
    ac12:	2b00      	cmp	r3, #0
    ac14:	d100      	bne.n	ac18 <m2m_wifi_cb+0x238>
    ac16:	e717      	b.n	aa48 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    ac18:	a903      	add	r1, sp, #12
    ac1a:	302a      	adds	r0, #42	; 0x2a
    ac1c:	4798      	blx	r3
    ac1e:	e713      	b.n	aa48 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    ac20:	2300      	movs	r3, #0
    ac22:	2208      	movs	r2, #8
    ac24:	a903      	add	r1, sp, #12
    ac26:	0028      	movs	r0, r5
    ac28:	4c11      	ldr	r4, [pc, #68]	; (ac70 <m2m_wifi_cb+0x290>)
    ac2a:	47a0      	blx	r4
    ac2c:	2800      	cmp	r0, #0
    ac2e:	d000      	beq.n	ac32 <m2m_wifi_cb+0x252>
    ac30:	e70a      	b.n	aa48 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    ac32:	ab03      	add	r3, sp, #12
    ac34:	889a      	ldrh	r2, [r3, #4]
    ac36:	0028      	movs	r0, r5
    ac38:	3008      	adds	r0, #8
    ac3a:	2301      	movs	r3, #1
    ac3c:	9903      	ldr	r1, [sp, #12]
    ac3e:	4c0c      	ldr	r4, [pc, #48]	; (ac70 <m2m_wifi_cb+0x290>)
    ac40:	47a0      	blx	r4
    ac42:	2800      	cmp	r0, #0
    ac44:	d000      	beq.n	ac48 <m2m_wifi_cb+0x268>
    ac46:	e6ff      	b.n	aa48 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    ac48:	4b0a      	ldr	r3, [pc, #40]	; (ac74 <m2m_wifi_cb+0x294>)
    ac4a:	681b      	ldr	r3, [r3, #0]
    ac4c:	2b00      	cmp	r3, #0
    ac4e:	d100      	bne.n	ac52 <m2m_wifi_cb+0x272>
    ac50:	e6fa      	b.n	aa48 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    ac52:	a903      	add	r1, sp, #12
    ac54:	3020      	adds	r0, #32
    ac56:	4798      	blx	r3
    ac58:	e6f6      	b.n	aa48 <m2m_wifi_cb+0x68>
    ac5a:	46c0      	nop			; (mov r8, r8)
    ac5c:	000134a4 	.word	0x000134a4
    ac60:	0001313c 	.word	0x0001313c
    ac64:	00011941 	.word	0x00011941
    ac68:	000134f4 	.word	0x000134f4
    ac6c:	00011975 	.word	0x00011975
    ac70:	0000a839 	.word	0x0000a839
    ac74:	20000230 	.word	0x20000230
    ac78:	0000a0f5 	.word	0x0000a0f5
    ac7c:	0001346c 	.word	0x0001346c
    ac80:	000134d4 	.word	0x000134d4
    ac84:	20000235 	.word	0x20000235
    ac88:	20000234 	.word	0x20000234

0000ac8c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    ac8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac8e:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    ac90:	2201      	movs	r2, #1
    ac92:	230f      	movs	r3, #15
    ac94:	446b      	add	r3, sp
    ac96:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    ac98:	2800      	cmp	r0, #0
    ac9a:	d061      	beq.n	ad60 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    ac9c:	6802      	ldr	r2, [r0, #0]
    ac9e:	4b32      	ldr	r3, [pc, #200]	; (ad68 <m2m_wifi_init+0xdc>)
    aca0:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    aca2:	2200      	movs	r2, #0
    aca4:	4b31      	ldr	r3, [pc, #196]	; (ad6c <m2m_wifi_init+0xe0>)
    aca6:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    aca8:	200f      	movs	r0, #15
    acaa:	4468      	add	r0, sp
    acac:	4b30      	ldr	r3, [pc, #192]	; (ad70 <m2m_wifi_init+0xe4>)
    acae:	4798      	blx	r3
    acb0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    acb2:	d002      	beq.n	acba <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    acb4:	0020      	movs	r0, r4
    acb6:	b00f      	add	sp, #60	; 0x3c
    acb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    acba:	2000      	movs	r0, #0
    acbc:	4b2d      	ldr	r3, [pc, #180]	; (ad74 <m2m_wifi_init+0xe8>)
    acbe:	4798      	blx	r3
    acc0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    acc2:	d149      	bne.n	ad58 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    acc4:	492c      	ldr	r1, [pc, #176]	; (ad78 <m2m_wifi_init+0xec>)
    acc6:	2001      	movs	r0, #1
    acc8:	4b2c      	ldr	r3, [pc, #176]	; (ad7c <m2m_wifi_init+0xf0>)
    acca:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    accc:	ae04      	add	r6, sp, #16
    acce:	0030      	movs	r0, r6
    acd0:	4b2b      	ldr	r3, [pc, #172]	; (ad80 <m2m_wifi_init+0xf4>)
    acd2:	4798      	blx	r3
    acd4:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    acd6:	482b      	ldr	r0, [pc, #172]	; (ad84 <m2m_wifi_init+0xf8>)
    acd8:	4d2b      	ldr	r5, [pc, #172]	; (ad88 <m2m_wifi_init+0xfc>)
    acda:	47a8      	blx	r5
    acdc:	79b3      	ldrb	r3, [r6, #6]
    acde:	7972      	ldrb	r2, [r6, #5]
    ace0:	7931      	ldrb	r1, [r6, #4]
    ace2:	8c30      	ldrh	r0, [r6, #32]
    ace4:	9000      	str	r0, [sp, #0]
    ace6:	4829      	ldr	r0, [pc, #164]	; (ad8c <m2m_wifi_init+0x100>)
    ace8:	47a8      	blx	r5
    acea:	200d      	movs	r0, #13
    acec:	4f28      	ldr	r7, [pc, #160]	; (ad90 <m2m_wifi_init+0x104>)
    acee:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    acf0:	4824      	ldr	r0, [pc, #144]	; (ad84 <m2m_wifi_init+0xf8>)
    acf2:	47a8      	blx	r5
    acf4:	2226      	movs	r2, #38	; 0x26
    acf6:	446a      	add	r2, sp
    acf8:	211a      	movs	r1, #26
    acfa:	4469      	add	r1, sp
    acfc:	4825      	ldr	r0, [pc, #148]	; (ad94 <m2m_wifi_init+0x108>)
    acfe:	47a8      	blx	r5
    ad00:	200d      	movs	r0, #13
    ad02:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    ad04:	481f      	ldr	r0, [pc, #124]	; (ad84 <m2m_wifi_init+0xf8>)
    ad06:	47a8      	blx	r5
    ad08:	7a73      	ldrb	r3, [r6, #9]
    ad0a:	7a32      	ldrb	r2, [r6, #8]
    ad0c:	79f1      	ldrb	r1, [r6, #7]
    ad0e:	4822      	ldr	r0, [pc, #136]	; (ad98 <m2m_wifi_init+0x10c>)
    ad10:	47a8      	blx	r5
    ad12:	200d      	movs	r0, #13
    ad14:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    ad16:	481b      	ldr	r0, [pc, #108]	; (ad84 <m2m_wifi_init+0xf8>)
    ad18:	47a8      	blx	r5
    ad1a:	2302      	movs	r3, #2
    ad1c:	2205      	movs	r2, #5
    ad1e:	2113      	movs	r1, #19
    ad20:	481e      	ldr	r0, [pc, #120]	; (ad9c <m2m_wifi_init+0x110>)
    ad22:	47a8      	blx	r5
    ad24:	200d      	movs	r0, #13
    ad26:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    ad28:	4816      	ldr	r0, [pc, #88]	; (ad84 <m2m_wifi_init+0xf8>)
    ad2a:	47a8      	blx	r5
    ad2c:	4a1c      	ldr	r2, [pc, #112]	; (ada0 <m2m_wifi_init+0x114>)
    ad2e:	491d      	ldr	r1, [pc, #116]	; (ada4 <m2m_wifi_init+0x118>)
    ad30:	481d      	ldr	r0, [pc, #116]	; (ada8 <m2m_wifi_init+0x11c>)
    ad32:	47a8      	blx	r5
    ad34:	200d      	movs	r0, #13
    ad36:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    ad38:	0023      	movs	r3, r4
    ad3a:	330d      	adds	r3, #13
    ad3c:	d1ba      	bne.n	acb4 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    ad3e:	22e8      	movs	r2, #232	; 0xe8
    ad40:	32ff      	adds	r2, #255	; 0xff
    ad42:	491a      	ldr	r1, [pc, #104]	; (adac <m2m_wifi_init+0x120>)
    ad44:	481a      	ldr	r0, [pc, #104]	; (adb0 <m2m_wifi_init+0x124>)
    ad46:	4b10      	ldr	r3, [pc, #64]	; (ad88 <m2m_wifi_init+0xfc>)
    ad48:	4798      	blx	r3
    ad4a:	481a      	ldr	r0, [pc, #104]	; (adb4 <m2m_wifi_init+0x128>)
    ad4c:	4b1a      	ldr	r3, [pc, #104]	; (adb8 <m2m_wifi_init+0x12c>)
    ad4e:	4798      	blx	r3
    ad50:	200d      	movs	r0, #13
    ad52:	4b0f      	ldr	r3, [pc, #60]	; (ad90 <m2m_wifi_init+0x104>)
    ad54:	4798      	blx	r3
    ad56:	e7ad      	b.n	acb4 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    ad58:	2000      	movs	r0, #0
    ad5a:	4b18      	ldr	r3, [pc, #96]	; (adbc <m2m_wifi_init+0x130>)
    ad5c:	4798      	blx	r3
    ad5e:	e7a9      	b.n	acb4 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    ad60:	240c      	movs	r4, #12
    ad62:	4264      	negs	r4, r4
    ad64:	e7a6      	b.n	acb4 <m2m_wifi_init+0x28>
    ad66:	46c0      	nop			; (mov r8, r8)
    ad68:	20000230 	.word	0x20000230
    ad6c:	20000235 	.word	0x20000235
    ad70:	0000b749 	.word	0x0000b749
    ad74:	0000a9a9 	.word	0x0000a9a9
    ad78:	0000a9e1 	.word	0x0000a9e1
    ad7c:	0000a925 	.word	0x0000a925
    ad80:	0000b665 	.word	0x0000b665
    ad84:	0001346c 	.word	0x0001346c
    ad88:	00011941 	.word	0x00011941
    ad8c:	000135b0 	.word	0x000135b0
    ad90:	00011975 	.word	0x00011975
    ad94:	000135d8 	.word	0x000135d8
    ad98:	000135f4 	.word	0x000135f4
    ad9c:	00013618 	.word	0x00013618
    ada0:	00013630 	.word	0x00013630
    ada4:	0001363c 	.word	0x0001363c
    ada8:	00013648 	.word	0x00013648
    adac:	000134b0 	.word	0x000134b0
    adb0:	0001313c 	.word	0x0001313c
    adb4:	00013660 	.word	0x00013660
    adb8:	00011a5d 	.word	0x00011a5d
    adbc:	0000b81d 	.word	0x0000b81d

0000adc0 <m2m_wifi_deinit>:

sint8  m2m_wifi_deinit(void * arg)
{
    adc0:	b510      	push	{r4, lr}

	hif_deinit(NULL);
    adc2:	2000      	movs	r0, #0
    adc4:	4b03      	ldr	r3, [pc, #12]	; (add4 <m2m_wifi_deinit+0x14>)
    adc6:	4798      	blx	r3

	nm_drv_deinit(NULL);
    adc8:	2000      	movs	r0, #0
    adca:	4b03      	ldr	r3, [pc, #12]	; (add8 <m2m_wifi_deinit+0x18>)
    adcc:	4798      	blx	r3

	return M2M_SUCCESS;
}
    adce:	2000      	movs	r0, #0
    add0:	bd10      	pop	{r4, pc}
    add2:	46c0      	nop			; (mov r8, r8)
    add4:	0000a209 	.word	0x0000a209
    add8:	0000b81d 	.word	0x0000b81d

0000addc <m2m_wifi_handle_events>:


sint8 m2m_wifi_handle_events(void * arg)
{
    addc:	b510      	push	{r4, lr}
	return hif_handle_isr();
    adde:	4b01      	ldr	r3, [pc, #4]	; (ade4 <m2m_wifi_handle_events+0x8>)
    ade0:	4798      	blx	r3
}
    ade2:	bd10      	pop	{r4, pc}
    ade4:	0000a45d 	.word	0x0000a45d

0000ade8 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    ade8:	b5f0      	push	{r4, r5, r6, r7, lr}
    adea:	46ce      	mov	lr, r9
    adec:	4647      	mov	r7, r8
    adee:	b580      	push	{r7, lr}
    adf0:	b0a3      	sub	sp, #140	; 0x8c
    adf2:	9005      	str	r0, [sp, #20]
    adf4:	000c      	movs	r4, r1
    adf6:	0015      	movs	r5, r2
    adf8:	001f      	movs	r7, r3
    adfa:	ab2a      	add	r3, sp, #168	; 0xa8
    adfc:	881b      	ldrh	r3, [r3, #0]
    adfe:	4699      	mov	r9, r3
    ae00:	ab2b      	add	r3, sp, #172	; 0xac
    ae02:	781b      	ldrb	r3, [r3, #0]
    ae04:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    ae06:	2a01      	cmp	r2, #1
    ae08:	d003      	beq.n	ae12 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    ae0a:	2f00      	cmp	r7, #0
    ae0c:	d040      	beq.n	ae90 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    ae0e:	2a02      	cmp	r2, #2
    ae10:	d04c      	beq.n	aeac <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    ae12:	1e63      	subs	r3, r4, #1
    ae14:	2b1f      	cmp	r3, #31
    ae16:	d900      	bls.n	ae1a <m2m_wifi_connect_sc+0x32>
    ae18:	e078      	b.n	af0c <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    ae1a:	464b      	mov	r3, r9
    ae1c:	3b01      	subs	r3, #1
    ae1e:	b29b      	uxth	r3, r3
    ae20:	2b0d      	cmp	r3, #13
    ae22:	d903      	bls.n	ae2c <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    ae24:	464b      	mov	r3, r9
    ae26:	2bff      	cmp	r3, #255	; 0xff
    ae28:	d000      	beq.n	ae2c <m2m_wifi_connect_sc+0x44>
    ae2a:	e07d      	b.n	af28 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    ae2c:	ae07      	add	r6, sp, #28
    ae2e:	0022      	movs	r2, r4
    ae30:	9905      	ldr	r1, [sp, #20]
    ae32:	205a      	movs	r0, #90	; 0x5a
    ae34:	ab02      	add	r3, sp, #8
    ae36:	469c      	mov	ip, r3
    ae38:	4460      	add	r0, ip
    ae3a:	4b78      	ldr	r3, [pc, #480]	; (b01c <m2m_wifi_connect_sc+0x234>)
    ae3c:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    ae3e:	1934      	adds	r4, r6, r4
    ae40:	3446      	adds	r4, #70	; 0x46
    ae42:	2300      	movs	r3, #0
    ae44:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    ae46:	3344      	adds	r3, #68	; 0x44
    ae48:	464a      	mov	r2, r9
    ae4a:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    ae4c:	4643      	mov	r3, r8
    ae4e:	1e5a      	subs	r2, r3, #1
    ae50:	4193      	sbcs	r3, r2
    ae52:	2267      	movs	r2, #103	; 0x67
    ae54:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    ae56:	2341      	movs	r3, #65	; 0x41
    ae58:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    ae5a:	2d03      	cmp	r5, #3
    ae5c:	d100      	bne.n	ae60 <m2m_wifi_connect_sc+0x78>
    ae5e:	e072      	b.n	af46 <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    ae60:	2d02      	cmp	r5, #2
    ae62:	d100      	bne.n	ae66 <m2m_wifi_connect_sc+0x7e>
    ae64:	e0ab      	b.n	afbe <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    ae66:	2d04      	cmp	r5, #4
    ae68:	d100      	bne.n	ae6c <m2m_wifi_connect_sc+0x84>
    ae6a:	e0c3      	b.n	aff4 <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    ae6c:	2d01      	cmp	r5, #1
    ae6e:	d000      	beq.n	ae72 <m2m_wifi_connect_sc+0x8a>
    ae70:	e0c6      	b.n	b000 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    ae72:	2300      	movs	r3, #0
    ae74:	9302      	str	r3, [sp, #8]
    ae76:	9301      	str	r3, [sp, #4]
    ae78:	9300      	str	r3, [sp, #0]
    ae7a:	336c      	adds	r3, #108	; 0x6c
    ae7c:	aa07      	add	r2, sp, #28
    ae7e:	2128      	movs	r1, #40	; 0x28
    ae80:	2001      	movs	r0, #1
    ae82:	4c67      	ldr	r4, [pc, #412]	; (b020 <m2m_wifi_connect_sc+0x238>)
    ae84:	47a0      	blx	r4

ERR1:
	return ret;
}
    ae86:	b023      	add	sp, #140	; 0x8c
    ae88:	bc0c      	pop	{r2, r3}
    ae8a:	4690      	mov	r8, r2
    ae8c:	4699      	mov	r9, r3
    ae8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    ae90:	4a64      	ldr	r2, [pc, #400]	; (b024 <m2m_wifi_connect_sc+0x23c>)
    ae92:	4965      	ldr	r1, [pc, #404]	; (b028 <m2m_wifi_connect_sc+0x240>)
    ae94:	4865      	ldr	r0, [pc, #404]	; (b02c <m2m_wifi_connect_sc+0x244>)
    ae96:	4b66      	ldr	r3, [pc, #408]	; (b030 <m2m_wifi_connect_sc+0x248>)
    ae98:	4798      	blx	r3
    ae9a:	4866      	ldr	r0, [pc, #408]	; (b034 <m2m_wifi_connect_sc+0x24c>)
    ae9c:	4b66      	ldr	r3, [pc, #408]	; (b038 <m2m_wifi_connect_sc+0x250>)
    ae9e:	4798      	blx	r3
    aea0:	200d      	movs	r0, #13
    aea2:	4b66      	ldr	r3, [pc, #408]	; (b03c <m2m_wifi_connect_sc+0x254>)
    aea4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    aea6:	200c      	movs	r0, #12
    aea8:	4240      	negs	r0, r0
			goto ERR1;
    aeaa:	e7ec      	b.n	ae86 <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    aeac:	0038      	movs	r0, r7
    aeae:	4b64      	ldr	r3, [pc, #400]	; (b040 <m2m_wifi_connect_sc+0x258>)
    aeb0:	4798      	blx	r3
    aeb2:	2840      	cmp	r0, #64	; 0x40
    aeb4:	d1ad      	bne.n	ae12 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    aeb6:	783b      	ldrb	r3, [r7, #0]
    aeb8:	001a      	movs	r2, r3
    aeba:	3a30      	subs	r2, #48	; 0x30
    aebc:	2a36      	cmp	r2, #54	; 0x36
    aebe:	d817      	bhi.n	aef0 <m2m_wifi_connect_sc+0x108>
    aec0:	3a0a      	subs	r2, #10
    aec2:	2a06      	cmp	r2, #6
    aec4:	d914      	bls.n	aef0 <m2m_wifi_connect_sc+0x108>
    aec6:	3b47      	subs	r3, #71	; 0x47
    aec8:	2b19      	cmp	r3, #25
    aeca:	d911      	bls.n	aef0 <m2m_wifi_connect_sc+0x108>
    aecc:	1c7a      	adds	r2, r7, #1
    aece:	0038      	movs	r0, r7
    aed0:	3040      	adds	r0, #64	; 0x40
    aed2:	7813      	ldrb	r3, [r2, #0]
    aed4:	0019      	movs	r1, r3
    aed6:	3930      	subs	r1, #48	; 0x30
    aed8:	2936      	cmp	r1, #54	; 0x36
    aeda:	d809      	bhi.n	aef0 <m2m_wifi_connect_sc+0x108>
    aedc:	390a      	subs	r1, #10
    aede:	2906      	cmp	r1, #6
    aee0:	d906      	bls.n	aef0 <m2m_wifi_connect_sc+0x108>
    aee2:	3b47      	subs	r3, #71	; 0x47
    aee4:	2b19      	cmp	r3, #25
    aee6:	d903      	bls.n	aef0 <m2m_wifi_connect_sc+0x108>
    aee8:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    aeea:	4282      	cmp	r2, r0
    aeec:	d1f1      	bne.n	aed2 <m2m_wifi_connect_sc+0xea>
    aeee:	e790      	b.n	ae12 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    aef0:	4a54      	ldr	r2, [pc, #336]	; (b044 <m2m_wifi_connect_sc+0x25c>)
    aef2:	494d      	ldr	r1, [pc, #308]	; (b028 <m2m_wifi_connect_sc+0x240>)
    aef4:	484d      	ldr	r0, [pc, #308]	; (b02c <m2m_wifi_connect_sc+0x244>)
    aef6:	4b4e      	ldr	r3, [pc, #312]	; (b030 <m2m_wifi_connect_sc+0x248>)
    aef8:	4798      	blx	r3
    aefa:	4853      	ldr	r0, [pc, #332]	; (b048 <m2m_wifi_connect_sc+0x260>)
    aefc:	4b4e      	ldr	r3, [pc, #312]	; (b038 <m2m_wifi_connect_sc+0x250>)
    aefe:	4798      	blx	r3
    af00:	200d      	movs	r0, #13
    af02:	4b4e      	ldr	r3, [pc, #312]	; (b03c <m2m_wifi_connect_sc+0x254>)
    af04:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    af06:	200c      	movs	r0, #12
    af08:	4240      	negs	r0, r0
					goto ERR1;
    af0a:	e7bc      	b.n	ae86 <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    af0c:	4a4f      	ldr	r2, [pc, #316]	; (b04c <m2m_wifi_connect_sc+0x264>)
    af0e:	4946      	ldr	r1, [pc, #280]	; (b028 <m2m_wifi_connect_sc+0x240>)
    af10:	4846      	ldr	r0, [pc, #280]	; (b02c <m2m_wifi_connect_sc+0x244>)
    af12:	4b47      	ldr	r3, [pc, #284]	; (b030 <m2m_wifi_connect_sc+0x248>)
    af14:	4798      	blx	r3
    af16:	484e      	ldr	r0, [pc, #312]	; (b050 <m2m_wifi_connect_sc+0x268>)
    af18:	4b47      	ldr	r3, [pc, #284]	; (b038 <m2m_wifi_connect_sc+0x250>)
    af1a:	4798      	blx	r3
    af1c:	200d      	movs	r0, #13
    af1e:	4b47      	ldr	r3, [pc, #284]	; (b03c <m2m_wifi_connect_sc+0x254>)
    af20:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    af22:	200c      	movs	r0, #12
    af24:	4240      	negs	r0, r0
		goto ERR1;
    af26:	e7ae      	b.n	ae86 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    af28:	228d      	movs	r2, #141	; 0x8d
    af2a:	0092      	lsls	r2, r2, #2
    af2c:	493e      	ldr	r1, [pc, #248]	; (b028 <m2m_wifi_connect_sc+0x240>)
    af2e:	483f      	ldr	r0, [pc, #252]	; (b02c <m2m_wifi_connect_sc+0x244>)
    af30:	4b3f      	ldr	r3, [pc, #252]	; (b030 <m2m_wifi_connect_sc+0x248>)
    af32:	4798      	blx	r3
    af34:	4847      	ldr	r0, [pc, #284]	; (b054 <m2m_wifi_connect_sc+0x26c>)
    af36:	4b40      	ldr	r3, [pc, #256]	; (b038 <m2m_wifi_connect_sc+0x250>)
    af38:	4798      	blx	r3
    af3a:	200d      	movs	r0, #13
    af3c:	4b3f      	ldr	r3, [pc, #252]	; (b03c <m2m_wifi_connect_sc+0x254>)
    af3e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    af40:	200c      	movs	r0, #12
    af42:	4240      	negs	r0, r0
			goto ERR1;
    af44:	e79f      	b.n	ae86 <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    af46:	783b      	ldrb	r3, [r7, #0]
    af48:	3b01      	subs	r3, #1
    af4a:	b2db      	uxtb	r3, r3
    af4c:	aa07      	add	r2, sp, #28
    af4e:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    af50:	2b03      	cmp	r3, #3
    af52:	d817      	bhi.n	af84 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    af54:	787a      	ldrb	r2, [r7, #1]
    af56:	1e51      	subs	r1, r2, #1
    af58:	ab07      	add	r3, sp, #28
    af5a:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    af5c:	2310      	movs	r3, #16
    af5e:	0011      	movs	r1, r2
    af60:	4399      	bics	r1, r3
    af62:	290b      	cmp	r1, #11
    af64:	d01d      	beq.n	afa2 <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    af66:	4a3c      	ldr	r2, [pc, #240]	; (b058 <m2m_wifi_connect_sc+0x270>)
    af68:	492f      	ldr	r1, [pc, #188]	; (b028 <m2m_wifi_connect_sc+0x240>)
    af6a:	4830      	ldr	r0, [pc, #192]	; (b02c <m2m_wifi_connect_sc+0x244>)
    af6c:	4c30      	ldr	r4, [pc, #192]	; (b030 <m2m_wifi_connect_sc+0x248>)
    af6e:	47a0      	blx	r4
    af70:	ab07      	add	r3, sp, #28
    af72:	7859      	ldrb	r1, [r3, #1]
    af74:	4839      	ldr	r0, [pc, #228]	; (b05c <m2m_wifi_connect_sc+0x274>)
    af76:	47a0      	blx	r4
    af78:	200d      	movs	r0, #13
    af7a:	4b30      	ldr	r3, [pc, #192]	; (b03c <m2m_wifi_connect_sc+0x254>)
    af7c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    af7e:	200c      	movs	r0, #12
    af80:	4240      	negs	r0, r0
			goto ERR1;
    af82:	e780      	b.n	ae86 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    af84:	4a36      	ldr	r2, [pc, #216]	; (b060 <m2m_wifi_connect_sc+0x278>)
    af86:	4928      	ldr	r1, [pc, #160]	; (b028 <m2m_wifi_connect_sc+0x240>)
    af88:	4828      	ldr	r0, [pc, #160]	; (b02c <m2m_wifi_connect_sc+0x244>)
    af8a:	4c29      	ldr	r4, [pc, #164]	; (b030 <m2m_wifi_connect_sc+0x248>)
    af8c:	47a0      	blx	r4
    af8e:	ab07      	add	r3, sp, #28
    af90:	7819      	ldrb	r1, [r3, #0]
    af92:	4834      	ldr	r0, [pc, #208]	; (b064 <m2m_wifi_connect_sc+0x27c>)
    af94:	47a0      	blx	r4
    af96:	200d      	movs	r0, #13
    af98:	4b28      	ldr	r3, [pc, #160]	; (b03c <m2m_wifi_connect_sc+0x254>)
    af9a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    af9c:	200c      	movs	r0, #12
    af9e:	4240      	negs	r0, r0
			goto ERR1;
    afa0:	e771      	b.n	ae86 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    afa2:	1cb9      	adds	r1, r7, #2
    afa4:	2016      	movs	r0, #22
    afa6:	ab02      	add	r3, sp, #8
    afa8:	469c      	mov	ip, r3
    afaa:	4460      	add	r0, ip
    afac:	4b1b      	ldr	r3, [pc, #108]	; (b01c <m2m_wifi_connect_sc+0x234>)
    afae:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    afb0:	787b      	ldrb	r3, [r7, #1]
    afb2:	aa07      	add	r2, sp, #28
    afb4:	4694      	mov	ip, r2
    afb6:	4463      	add	r3, ip
    afb8:	2200      	movs	r2, #0
    afba:	709a      	strb	r2, [r3, #2]
    afbc:	e759      	b.n	ae72 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    afbe:	0038      	movs	r0, r7
    afc0:	4b1f      	ldr	r3, [pc, #124]	; (b040 <m2m_wifi_connect_sc+0x258>)
    afc2:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    afc4:	1e43      	subs	r3, r0, #1
    afc6:	b29b      	uxth	r3, r3
    afc8:	2b3f      	cmp	r3, #63	; 0x3f
    afca:	d805      	bhi.n	afd8 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    afcc:	1c42      	adds	r2, r0, #1
    afce:	0039      	movs	r1, r7
    afd0:	a807      	add	r0, sp, #28
    afd2:	4b12      	ldr	r3, [pc, #72]	; (b01c <m2m_wifi_connect_sc+0x234>)
    afd4:	4798      	blx	r3
    afd6:	e74c      	b.n	ae72 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    afd8:	4a23      	ldr	r2, [pc, #140]	; (b068 <m2m_wifi_connect_sc+0x280>)
    afda:	4913      	ldr	r1, [pc, #76]	; (b028 <m2m_wifi_connect_sc+0x240>)
    afdc:	4813      	ldr	r0, [pc, #76]	; (b02c <m2m_wifi_connect_sc+0x244>)
    afde:	4b14      	ldr	r3, [pc, #80]	; (b030 <m2m_wifi_connect_sc+0x248>)
    afe0:	4798      	blx	r3
    afe2:	4822      	ldr	r0, [pc, #136]	; (b06c <m2m_wifi_connect_sc+0x284>)
    afe4:	4b14      	ldr	r3, [pc, #80]	; (b038 <m2m_wifi_connect_sc+0x250>)
    afe6:	4798      	blx	r3
    afe8:	200d      	movs	r0, #13
    afea:	4b14      	ldr	r3, [pc, #80]	; (b03c <m2m_wifi_connect_sc+0x254>)
    afec:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    afee:	200c      	movs	r0, #12
    aff0:	4240      	negs	r0, r0
			goto ERR1;
    aff2:	e748      	b.n	ae86 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    aff4:	223e      	movs	r2, #62	; 0x3e
    aff6:	0039      	movs	r1, r7
    aff8:	a807      	add	r0, sp, #28
    affa:	4b08      	ldr	r3, [pc, #32]	; (b01c <m2m_wifi_connect_sc+0x234>)
    affc:	4798      	blx	r3
    affe:	e738      	b.n	ae72 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    b000:	4a1b      	ldr	r2, [pc, #108]	; (b070 <m2m_wifi_connect_sc+0x288>)
    b002:	4909      	ldr	r1, [pc, #36]	; (b028 <m2m_wifi_connect_sc+0x240>)
    b004:	4809      	ldr	r0, [pc, #36]	; (b02c <m2m_wifi_connect_sc+0x244>)
    b006:	4b0a      	ldr	r3, [pc, #40]	; (b030 <m2m_wifi_connect_sc+0x248>)
    b008:	4798      	blx	r3
    b00a:	481a      	ldr	r0, [pc, #104]	; (b074 <m2m_wifi_connect_sc+0x28c>)
    b00c:	4b0a      	ldr	r3, [pc, #40]	; (b038 <m2m_wifi_connect_sc+0x250>)
    b00e:	4798      	blx	r3
    b010:	200d      	movs	r0, #13
    b012:	4b0a      	ldr	r3, [pc, #40]	; (b03c <m2m_wifi_connect_sc+0x254>)
    b014:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    b016:	200c      	movs	r0, #12
    b018:	4240      	negs	r0, r0
		goto ERR1;
    b01a:	e734      	b.n	ae86 <m2m_wifi_connect_sc+0x9e>
    b01c:	0000a0e1 	.word	0x0000a0e1
    b020:	0000a22d 	.word	0x0000a22d
    b024:	00000215 	.word	0x00000215
    b028:	000134c0 	.word	0x000134c0
    b02c:	0001313c 	.word	0x0001313c
    b030:	00011941 	.word	0x00011941
    b034:	00013508 	.word	0x00013508
    b038:	00011a5d 	.word	0x00011a5d
    b03c:	00011975 	.word	0x00011975
    b040:	0000a105 	.word	0x0000a105
    b044:	00000221 	.word	0x00000221
    b048:	0001351c 	.word	0x0001351c
    b04c:	0000022b 	.word	0x0000022b
    b050:	00013528 	.word	0x00013528
    b054:	0001353c 	.word	0x0001353c
    b058:	00000252 	.word	0x00000252
    b05c:	00013564 	.word	0x00013564
    b060:	0000024b 	.word	0x0000024b
    b064:	00013548 	.word	0x00013548
    b068:	00000261 	.word	0x00000261
    b06c:	00013580 	.word	0x00013580
    b070:	00000271 	.word	0x00000271
    b074:	0001359c 	.word	0x0001359c

0000b078 <m2m_wifi_connect>:
{
    b078:	b530      	push	{r4, r5, lr}
    b07a:	b083      	sub	sp, #12
    b07c:	ac06      	add	r4, sp, #24
    b07e:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    b080:	2500      	movs	r5, #0
    b082:	9501      	str	r5, [sp, #4]
    b084:	9400      	str	r4, [sp, #0]
    b086:	4c02      	ldr	r4, [pc, #8]	; (b090 <m2m_wifi_connect+0x18>)
    b088:	47a0      	blx	r4
}
    b08a:	b003      	add	sp, #12
    b08c:	bd30      	pop	{r4, r5, pc}
    b08e:	46c0      	nop			; (mov r8, r8)
    b090:	0000ade9 	.word	0x0000ade9

0000b094 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    b094:	2000      	movs	r0, #0
    b096:	4770      	bx	lr

0000b098 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    b098:	b5f0      	push	{r4, r5, r6, r7, lr}
    b09a:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    b09c:	2580      	movs	r5, #128	; 0x80
    b09e:	006d      	lsls	r5, r5, #1
    b0a0:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    b0a2:	24a5      	movs	r4, #165	; 0xa5
    b0a4:	0164      	lsls	r4, r4, #5
    b0a6:	4f08      	ldr	r7, [pc, #32]	; (b0c8 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    b0a8:	4e08      	ldr	r6, [pc, #32]	; (b0cc <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    b0aa:	0029      	movs	r1, r5
    b0ac:	0020      	movs	r0, r4
    b0ae:	47b8      	blx	r7
			uint32 reg = 0;
    b0b0:	2300      	movs	r3, #0
    b0b2:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    b0b4:	a901      	add	r1, sp, #4
    b0b6:	0020      	movs	r0, r4
    b0b8:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    b0ba:	2800      	cmp	r0, #0
    b0bc:	d1f5      	bne.n	b0aa <chip_apply_conf+0x12>
				if(reg == val32)
    b0be:	9b01      	ldr	r3, [sp, #4]
    b0c0:	429d      	cmp	r5, r3
    b0c2:	d1f2      	bne.n	b0aa <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    b0c4:	b003      	add	sp, #12
    b0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0c8:	0000b589 	.word	0x0000b589
    b0cc:	0000b57d 	.word	0x0000b57d

0000b0d0 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    b0d0:	b500      	push	{lr}
    b0d2:	b083      	sub	sp, #12
	uint32 reg = 0;
    b0d4:	2300      	movs	r3, #0
    b0d6:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    b0d8:	a901      	add	r1, sp, #4
    b0da:	4811      	ldr	r0, [pc, #68]	; (b120 <enable_interrupts+0x50>)
    b0dc:	4b11      	ldr	r3, [pc, #68]	; (b124 <enable_interrupts+0x54>)
    b0de:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    b0e0:	2800      	cmp	r0, #0
    b0e2:	d001      	beq.n	b0e8 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    b0e4:	b003      	add	sp, #12
    b0e6:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    b0e8:	2180      	movs	r1, #128	; 0x80
    b0ea:	0049      	lsls	r1, r1, #1
    b0ec:	9b01      	ldr	r3, [sp, #4]
    b0ee:	4319      	orrs	r1, r3
    b0f0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    b0f2:	480b      	ldr	r0, [pc, #44]	; (b120 <enable_interrupts+0x50>)
    b0f4:	4b0c      	ldr	r3, [pc, #48]	; (b128 <enable_interrupts+0x58>)
    b0f6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    b0f8:	2800      	cmp	r0, #0
    b0fa:	d1f3      	bne.n	b0e4 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    b0fc:	a901      	add	r1, sp, #4
    b0fe:	20d0      	movs	r0, #208	; 0xd0
    b100:	0140      	lsls	r0, r0, #5
    b102:	4b08      	ldr	r3, [pc, #32]	; (b124 <enable_interrupts+0x54>)
    b104:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    b106:	2800      	cmp	r0, #0
    b108:	d1ec      	bne.n	b0e4 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    b10a:	2180      	movs	r1, #128	; 0x80
    b10c:	0249      	lsls	r1, r1, #9
    b10e:	9b01      	ldr	r3, [sp, #4]
    b110:	4319      	orrs	r1, r3
    b112:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    b114:	20d0      	movs	r0, #208	; 0xd0
    b116:	0140      	lsls	r0, r0, #5
    b118:	4b03      	ldr	r3, [pc, #12]	; (b128 <enable_interrupts+0x58>)
    b11a:	4798      	blx	r3
    b11c:	e7e2      	b.n	b0e4 <enable_interrupts+0x14>
    b11e:	46c0      	nop			; (mov r8, r8)
    b120:	00001408 	.word	0x00001408
    b124:	0000b57d 	.word	0x0000b57d
    b128:	0000b589 	.word	0x0000b589

0000b12c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    b12c:	b510      	push	{r4, lr}
    b12e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    b130:	4b28      	ldr	r3, [pc, #160]	; (b1d4 <nmi_get_chipid+0xa8>)
    b132:	681c      	ldr	r4, [r3, #0]
    b134:	2c00      	cmp	r4, #0
    b136:	d004      	beq.n	b142 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    b138:	4b26      	ldr	r3, [pc, #152]	; (b1d4 <nmi_get_chipid+0xa8>)
    b13a:	681c      	ldr	r4, [r3, #0]
}
    b13c:	0020      	movs	r0, r4
    b13e:	b002      	add	sp, #8
    b140:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    b142:	0019      	movs	r1, r3
    b144:	2080      	movs	r0, #128	; 0x80
    b146:	0140      	lsls	r0, r0, #5
    b148:	4b23      	ldr	r3, [pc, #140]	; (b1d8 <nmi_get_chipid+0xac>)
    b14a:	4798      	blx	r3
    b14c:	2800      	cmp	r0, #0
    b14e:	d003      	beq.n	b158 <nmi_get_chipid+0x2c>
			chipid = 0;
    b150:	2200      	movs	r2, #0
    b152:	4b20      	ldr	r3, [pc, #128]	; (b1d4 <nmi_get_chipid+0xa8>)
    b154:	601a      	str	r2, [r3, #0]
			return 0;
    b156:	e7f1      	b.n	b13c <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    b158:	a901      	add	r1, sp, #4
    b15a:	4820      	ldr	r0, [pc, #128]	; (b1dc <nmi_get_chipid+0xb0>)
    b15c:	4b1e      	ldr	r3, [pc, #120]	; (b1d8 <nmi_get_chipid+0xac>)
    b15e:	4798      	blx	r3
    b160:	2800      	cmp	r0, #0
    b162:	d003      	beq.n	b16c <nmi_get_chipid+0x40>
			chipid = 0;
    b164:	2200      	movs	r2, #0
    b166:	4b1b      	ldr	r3, [pc, #108]	; (b1d4 <nmi_get_chipid+0xa8>)
    b168:	601a      	str	r2, [r3, #0]
			return 0;
    b16a:	e7e7      	b.n	b13c <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    b16c:	4b19      	ldr	r3, [pc, #100]	; (b1d4 <nmi_get_chipid+0xa8>)
    b16e:	681b      	ldr	r3, [r3, #0]
    b170:	4a1b      	ldr	r2, [pc, #108]	; (b1e0 <nmi_get_chipid+0xb4>)
    b172:	4293      	cmp	r3, r2
    b174:	d00e      	beq.n	b194 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    b176:	4a1b      	ldr	r2, [pc, #108]	; (b1e4 <nmi_get_chipid+0xb8>)
    b178:	4293      	cmp	r3, r2
    b17a:	d012      	beq.n	b1a2 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    b17c:	4a1a      	ldr	r2, [pc, #104]	; (b1e8 <nmi_get_chipid+0xbc>)
    b17e:	4293      	cmp	r3, r2
    b180:	d01c      	beq.n	b1bc <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    b182:	4914      	ldr	r1, [pc, #80]	; (b1d4 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    b184:	4a19      	ldr	r2, [pc, #100]	; (b1ec <nmi_get_chipid+0xc0>)
    b186:	680b      	ldr	r3, [r1, #0]
    b188:	401a      	ands	r2, r3
		chipid |= 0x050000;
    b18a:	23a0      	movs	r3, #160	; 0xa0
    b18c:	02db      	lsls	r3, r3, #11
    b18e:	4313      	orrs	r3, r2
    b190:	600b      	str	r3, [r1, #0]
    b192:	e7d1      	b.n	b138 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    b194:	9b01      	ldr	r3, [sp, #4]
    b196:	2b01      	cmp	r3, #1
    b198:	d0f3      	beq.n	b182 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    b19a:	4a15      	ldr	r2, [pc, #84]	; (b1f0 <nmi_get_chipid+0xc4>)
    b19c:	4b0d      	ldr	r3, [pc, #52]	; (b1d4 <nmi_get_chipid+0xa8>)
    b19e:	601a      	str	r2, [r3, #0]
    b1a0:	e7ef      	b.n	b182 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    b1a2:	9b01      	ldr	r3, [sp, #4]
    b1a4:	2b03      	cmp	r3, #3
    b1a6:	d0ec      	beq.n	b182 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    b1a8:	2b04      	cmp	r3, #4
    b1aa:	d003      	beq.n	b1b4 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    b1ac:	4a11      	ldr	r2, [pc, #68]	; (b1f4 <nmi_get_chipid+0xc8>)
    b1ae:	4b09      	ldr	r3, [pc, #36]	; (b1d4 <nmi_get_chipid+0xa8>)
    b1b0:	601a      	str	r2, [r3, #0]
    b1b2:	e7e6      	b.n	b182 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    b1b4:	4a10      	ldr	r2, [pc, #64]	; (b1f8 <nmi_get_chipid+0xcc>)
    b1b6:	4b07      	ldr	r3, [pc, #28]	; (b1d4 <nmi_get_chipid+0xa8>)
    b1b8:	601a      	str	r2, [r3, #0]
    b1ba:	e7e2      	b.n	b182 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    b1bc:	4905      	ldr	r1, [pc, #20]	; (b1d4 <nmi_get_chipid+0xa8>)
    b1be:	20ec      	movs	r0, #236	; 0xec
    b1c0:	0380      	lsls	r0, r0, #14
    b1c2:	4b05      	ldr	r3, [pc, #20]	; (b1d8 <nmi_get_chipid+0xac>)
    b1c4:	4798      	blx	r3
    b1c6:	2800      	cmp	r0, #0
    b1c8:	d0db      	beq.n	b182 <nmi_get_chipid+0x56>
			chipid = 0;
    b1ca:	2200      	movs	r2, #0
    b1cc:	4b01      	ldr	r3, [pc, #4]	; (b1d4 <nmi_get_chipid+0xa8>)
    b1ce:	601a      	str	r2, [r3, #0]
			return 0;
    b1d0:	e7b4      	b.n	b13c <nmi_get_chipid+0x10>
    b1d2:	46c0      	nop			; (mov r8, r8)
    b1d4:	20000238 	.word	0x20000238
    b1d8:	0000b57d 	.word	0x0000b57d
    b1dc:	000013f4 	.word	0x000013f4
    b1e0:	001002a0 	.word	0x001002a0
    b1e4:	001002b0 	.word	0x001002b0
    b1e8:	001000f0 	.word	0x001000f0
    b1ec:	fff0ffff 	.word	0xfff0ffff
    b1f0:	001002a1 	.word	0x001002a1
    b1f4:	001002b2 	.word	0x001002b2
    b1f8:	001002b1 	.word	0x001002b1

0000b1fc <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    b1fc:	b530      	push	{r4, r5, lr}
    b1fe:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    b200:	4c16      	ldr	r4, [pc, #88]	; (b25c <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    b202:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    b204:	a901      	add	r1, sp, #4
    b206:	2010      	movs	r0, #16
    b208:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    b20a:	2800      	cmp	r0, #0
    b20c:	d11c      	bne.n	b248 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    b20e:	9b01      	ldr	r3, [sp, #4]
    b210:	422b      	tst	r3, r5
    b212:	d1f7      	bne.n	b204 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    b214:	a901      	add	r1, sp, #4
    b216:	3001      	adds	r0, #1
    b218:	4b10      	ldr	r3, [pc, #64]	; (b25c <chip_sleep+0x60>)
    b21a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    b21c:	2800      	cmp	r0, #0
    b21e:	d113      	bne.n	b248 <chip_sleep+0x4c>
	if(reg & NBIT1)
    b220:	9901      	ldr	r1, [sp, #4]
    b222:	078b      	lsls	r3, r1, #30
    b224:	d507      	bpl.n	b236 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    b226:	2302      	movs	r3, #2
    b228:	4399      	bics	r1, r3
    b22a:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    b22c:	3001      	adds	r0, #1
    b22e:	4b0c      	ldr	r3, [pc, #48]	; (b260 <chip_sleep+0x64>)
    b230:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    b232:	2800      	cmp	r0, #0
    b234:	d108      	bne.n	b248 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    b236:	a901      	add	r1, sp, #4
    b238:	200b      	movs	r0, #11
    b23a:	4b08      	ldr	r3, [pc, #32]	; (b25c <chip_sleep+0x60>)
    b23c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    b23e:	2800      	cmp	r0, #0
    b240:	d102      	bne.n	b248 <chip_sleep+0x4c>
	if(reg & NBIT0)
    b242:	9901      	ldr	r1, [sp, #4]
    b244:	07cb      	lsls	r3, r1, #31
    b246:	d401      	bmi.n	b24c <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    b248:	b003      	add	sp, #12
    b24a:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    b24c:	2301      	movs	r3, #1
    b24e:	4399      	bics	r1, r3
    b250:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    b252:	300b      	adds	r0, #11
    b254:	4b02      	ldr	r3, [pc, #8]	; (b260 <chip_sleep+0x64>)
    b256:	4798      	blx	r3
    b258:	e7f6      	b.n	b248 <chip_sleep+0x4c>
    b25a:	46c0      	nop			; (mov r8, r8)
    b25c:	0000b57d 	.word	0x0000b57d
    b260:	0000b589 	.word	0x0000b589

0000b264 <chip_wake>:
sint8 chip_wake(void)
{
    b264:	b5f0      	push	{r4, r5, r6, r7, lr}
    b266:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    b268:	2300      	movs	r3, #0
    b26a:	9301      	str	r3, [sp, #4]
    b26c:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    b26e:	a901      	add	r1, sp, #4
    b270:	200b      	movs	r0, #11
    b272:	4b28      	ldr	r3, [pc, #160]	; (b314 <chip_wake+0xb0>)
    b274:	4798      	blx	r3
    b276:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    b278:	d130      	bne.n	b2dc <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    b27a:	9901      	ldr	r1, [sp, #4]
    b27c:	07cb      	lsls	r3, r1, #31
    b27e:	d406      	bmi.n	b28e <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    b280:	2301      	movs	r3, #1
    b282:	4319      	orrs	r1, r3
    b284:	200b      	movs	r0, #11
    b286:	4b24      	ldr	r3, [pc, #144]	; (b318 <chip_wake+0xb4>)
    b288:	4798      	blx	r3
    b28a:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    b28c:	d126      	bne.n	b2dc <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    b28e:	a901      	add	r1, sp, #4
    b290:	2001      	movs	r0, #1
    b292:	4b20      	ldr	r3, [pc, #128]	; (b314 <chip_wake+0xb0>)
    b294:	4798      	blx	r3
    b296:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    b298:	d120      	bne.n	b2dc <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    b29a:	9901      	ldr	r1, [sp, #4]
    b29c:	078b      	lsls	r3, r1, #30
    b29e:	d520      	bpl.n	b2e2 <chip_wake+0x7e>
{
    b2a0:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    b2a2:	4f1c      	ldr	r7, [pc, #112]	; (b314 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    b2a4:	4e1d      	ldr	r6, [pc, #116]	; (b31c <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    b2a6:	4669      	mov	r1, sp
    b2a8:	200f      	movs	r0, #15
    b2aa:	47b8      	blx	r7
    b2ac:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    b2ae:	d120      	bne.n	b2f2 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    b2b0:	9b00      	ldr	r3, [sp, #0]
    b2b2:	075b      	lsls	r3, r3, #29
    b2b4:	d42b      	bmi.n	b30e <chip_wake+0xaa>
		nm_bsp_sleep(2);
    b2b6:	2002      	movs	r0, #2
    b2b8:	47b0      	blx	r6
    b2ba:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    b2bc:	2d00      	cmp	r5, #0
    b2be:	d1f2      	bne.n	b2a6 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    b2c0:	22af      	movs	r2, #175	; 0xaf
    b2c2:	0052      	lsls	r2, r2, #1
    b2c4:	4916      	ldr	r1, [pc, #88]	; (b320 <chip_wake+0xbc>)
    b2c6:	4817      	ldr	r0, [pc, #92]	; (b324 <chip_wake+0xc0>)
    b2c8:	4b17      	ldr	r3, [pc, #92]	; (b328 <chip_wake+0xc4>)
    b2ca:	4798      	blx	r3
    b2cc:	4817      	ldr	r0, [pc, #92]	; (b32c <chip_wake+0xc8>)
    b2ce:	4b18      	ldr	r3, [pc, #96]	; (b330 <chip_wake+0xcc>)
    b2d0:	4798      	blx	r3
    b2d2:	200d      	movs	r0, #13
    b2d4:	4b17      	ldr	r3, [pc, #92]	; (b334 <chip_wake+0xd0>)
    b2d6:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    b2d8:	2404      	movs	r4, #4
    b2da:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    b2dc:	0020      	movs	r0, r4
    b2de:	b003      	add	sp, #12
    b2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    b2e2:	2302      	movs	r3, #2
    b2e4:	4319      	orrs	r1, r3
    b2e6:	2001      	movs	r0, #1
    b2e8:	4b0b      	ldr	r3, [pc, #44]	; (b318 <chip_wake+0xb4>)
    b2ea:	4798      	blx	r3
    b2ec:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    b2ee:	d0d7      	beq.n	b2a0 <chip_wake+0x3c>
    b2f0:	e7f4      	b.n	b2dc <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    b2f2:	22aa      	movs	r2, #170	; 0xaa
    b2f4:	0052      	lsls	r2, r2, #1
    b2f6:	490a      	ldr	r1, [pc, #40]	; (b320 <chip_wake+0xbc>)
    b2f8:	480a      	ldr	r0, [pc, #40]	; (b324 <chip_wake+0xc0>)
    b2fa:	4d0b      	ldr	r5, [pc, #44]	; (b328 <chip_wake+0xc4>)
    b2fc:	47a8      	blx	r5
    b2fe:	9a00      	ldr	r2, [sp, #0]
    b300:	0021      	movs	r1, r4
    b302:	480d      	ldr	r0, [pc, #52]	; (b338 <chip_wake+0xd4>)
    b304:	47a8      	blx	r5
    b306:	200d      	movs	r0, #13
    b308:	4b0a      	ldr	r3, [pc, #40]	; (b334 <chip_wake+0xd0>)
    b30a:	4798      	blx	r3
			goto _WAKE_EXIT;
    b30c:	e7e6      	b.n	b2dc <chip_wake+0x78>
	nm_bus_reset();
    b30e:	4b0b      	ldr	r3, [pc, #44]	; (b33c <chip_wake+0xd8>)
    b310:	4798      	blx	r3
    b312:	e7e3      	b.n	b2dc <chip_wake+0x78>
    b314:	0000b57d 	.word	0x0000b57d
    b318:	0000b589 	.word	0x0000b589
    b31c:	00009d19 	.word	0x00009d19
    b320:	0001367c 	.word	0x0001367c
    b324:	0001313c 	.word	0x0001313c
    b328:	00011941 	.word	0x00011941
    b32c:	000136c4 	.word	0x000136c4
    b330:	00011a5d 	.word	0x00011a5d
    b334:	00011975 	.word	0x00011975
    b338:	000136ac 	.word	0x000136ac
    b33c:	0000b565 	.word	0x0000b565

0000b340 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    b340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b342:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    b344:	4d2d      	ldr	r5, [pc, #180]	; (b3fc <wait_for_bootrom+0xbc>)
    b346:	4c2e      	ldr	r4, [pc, #184]	; (b400 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    b348:	4e2e      	ldr	r6, [pc, #184]	; (b404 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    b34a:	0028      	movs	r0, r5
    b34c:	47a0      	blx	r4
		if (reg & 0x80000000) {
    b34e:	2800      	cmp	r0, #0
    b350:	db02      	blt.n	b358 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    b352:	2001      	movs	r0, #1
    b354:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    b356:	e7f8      	b.n	b34a <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    b358:	482b      	ldr	r0, [pc, #172]	; (b408 <wait_for_bootrom+0xc8>)
    b35a:	4b29      	ldr	r3, [pc, #164]	; (b400 <wait_for_bootrom+0xc0>)
    b35c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    b35e:	07c3      	lsls	r3, r0, #31
    b360:	d409      	bmi.n	b376 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    b362:	4e28      	ldr	r6, [pc, #160]	; (b404 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    b364:	4c29      	ldr	r4, [pc, #164]	; (b40c <wait_for_bootrom+0xcc>)
    b366:	4d26      	ldr	r5, [pc, #152]	; (b400 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    b368:	2001      	movs	r0, #1
    b36a:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    b36c:	0020      	movs	r0, r4
    b36e:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    b370:	4b27      	ldr	r3, [pc, #156]	; (b410 <wait_for_bootrom+0xd0>)
    b372:	4298      	cmp	r0, r3
    b374:	d1f8      	bne.n	b368 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    b376:	2f02      	cmp	r7, #2
    b378:	d021      	beq.n	b3be <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    b37a:	2f03      	cmp	r7, #3
    b37c:	d029      	beq.n	b3d2 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    b37e:	2f04      	cmp	r7, #4
    b380:	d030      	beq.n	b3e4 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    b382:	4924      	ldr	r1, [pc, #144]	; (b414 <wait_for_bootrom+0xd4>)
    b384:	4824      	ldr	r0, [pc, #144]	; (b418 <wait_for_bootrom+0xd8>)
    b386:	4b25      	ldr	r3, [pc, #148]	; (b41c <wait_for_bootrom+0xdc>)
    b388:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    b38a:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    b38c:	4b24      	ldr	r3, [pc, #144]	; (b420 <wait_for_bootrom+0xe0>)
    b38e:	4798      	blx	r3
    b390:	0500      	lsls	r0, r0, #20
    b392:	0d00      	lsrs	r0, r0, #20
    b394:	4b23      	ldr	r3, [pc, #140]	; (b424 <wait_for_bootrom+0xe4>)
    b396:	4298      	cmp	r0, r3
    b398:	d82a      	bhi.n	b3f0 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    b39a:	0020      	movs	r0, r4
    b39c:	4b22      	ldr	r3, [pc, #136]	; (b428 <wait_for_bootrom+0xe8>)
    b39e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    b3a0:	4822      	ldr	r0, [pc, #136]	; (b42c <wait_for_bootrom+0xec>)
    b3a2:	4c23      	ldr	r4, [pc, #140]	; (b430 <wait_for_bootrom+0xf0>)
    b3a4:	47a0      	blx	r4
    b3a6:	491b      	ldr	r1, [pc, #108]	; (b414 <wait_for_bootrom+0xd4>)
    b3a8:	4822      	ldr	r0, [pc, #136]	; (b434 <wait_for_bootrom+0xf4>)
    b3aa:	47a0      	blx	r4
    b3ac:	200d      	movs	r0, #13
    b3ae:	4b22      	ldr	r3, [pc, #136]	; (b438 <wait_for_bootrom+0xf8>)
    b3b0:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    b3b2:	4922      	ldr	r1, [pc, #136]	; (b43c <wait_for_bootrom+0xfc>)
    b3b4:	4815      	ldr	r0, [pc, #84]	; (b40c <wait_for_bootrom+0xcc>)
    b3b6:	4b19      	ldr	r3, [pc, #100]	; (b41c <wait_for_bootrom+0xdc>)
    b3b8:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    b3ba:	2000      	movs	r0, #0
    b3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    b3be:	4920      	ldr	r1, [pc, #128]	; (b440 <wait_for_bootrom+0x100>)
    b3c0:	4820      	ldr	r0, [pc, #128]	; (b444 <wait_for_bootrom+0x104>)
    b3c2:	4c16      	ldr	r4, [pc, #88]	; (b41c <wait_for_bootrom+0xdc>)
    b3c4:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    b3c6:	2180      	movs	r1, #128	; 0x80
    b3c8:	0349      	lsls	r1, r1, #13
    b3ca:	4813      	ldr	r0, [pc, #76]	; (b418 <wait_for_bootrom+0xd8>)
    b3cc:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    b3ce:	2400      	movs	r4, #0
    b3d0:	e7dc      	b.n	b38c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    b3d2:	491b      	ldr	r1, [pc, #108]	; (b440 <wait_for_bootrom+0x100>)
    b3d4:	481b      	ldr	r0, [pc, #108]	; (b444 <wait_for_bootrom+0x104>)
    b3d6:	4c11      	ldr	r4, [pc, #68]	; (b41c <wait_for_bootrom+0xdc>)
    b3d8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    b3da:	2100      	movs	r1, #0
    b3dc:	480e      	ldr	r0, [pc, #56]	; (b418 <wait_for_bootrom+0xd8>)
    b3de:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    b3e0:	2400      	movs	r4, #0
    b3e2:	e7d3      	b.n	b38c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    b3e4:	490b      	ldr	r1, [pc, #44]	; (b414 <wait_for_bootrom+0xd4>)
    b3e6:	480c      	ldr	r0, [pc, #48]	; (b418 <wait_for_bootrom+0xd8>)
    b3e8:	4b0c      	ldr	r3, [pc, #48]	; (b41c <wait_for_bootrom+0xdc>)
    b3ea:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    b3ec:	2480      	movs	r4, #128	; 0x80
    b3ee:	e7cd      	b.n	b38c <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    b3f0:	2002      	movs	r0, #2
    b3f2:	4320      	orrs	r0, r4
    b3f4:	4b0c      	ldr	r3, [pc, #48]	; (b428 <wait_for_bootrom+0xe8>)
    b3f6:	4798      	blx	r3
    b3f8:	e7d2      	b.n	b3a0 <wait_for_bootrom+0x60>
    b3fa:	46c0      	nop			; (mov r8, r8)
    b3fc:	00001014 	.word	0x00001014
    b400:	0000b571 	.word	0x0000b571
    b404:	00009d19 	.word	0x00009d19
    b408:	000207bc 	.word	0x000207bc
    b40c:	000c000c 	.word	0x000c000c
    b410:	10add09e 	.word	0x10add09e
    b414:	13521352 	.word	0x13521352
    b418:	0000108c 	.word	0x0000108c
    b41c:	0000b589 	.word	0x0000b589
    b420:	0000b12d 	.word	0x0000b12d
    b424:	0000039f 	.word	0x0000039f
    b428:	0000b099 	.word	0x0000b099
    b42c:	0001346c 	.word	0x0001346c
    b430:	00011941 	.word	0x00011941
    b434:	000136e0 	.word	0x000136e0
    b438:	00011975 	.word	0x00011975
    b43c:	ef522f61 	.word	0xef522f61
    b440:	3c1cd57d 	.word	0x3c1cd57d
    b444:	000207ac 	.word	0x000207ac

0000b448 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    b448:	b570      	push	{r4, r5, r6, lr}
    b44a:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    b44c:	4b15      	ldr	r3, [pc, #84]	; (b4a4 <wait_for_firmware_start+0x5c>)
    b44e:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    b450:	4b15      	ldr	r3, [pc, #84]	; (b4a8 <wait_for_firmware_start+0x60>)
    b452:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    b454:	3802      	subs	r0, #2
    b456:	2801      	cmp	r0, #1
    b458:	d911      	bls.n	b47e <wait_for_firmware_start+0x36>
{
    b45a:	2401      	movs	r4, #1
    b45c:	4264      	negs	r4, r4
    b45e:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    b460:	4e12      	ldr	r6, [pc, #72]	; (b4ac <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    b462:	4d13      	ldr	r5, [pc, #76]	; (b4b0 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    b464:	9b00      	ldr	r3, [sp, #0]
    b466:	4298      	cmp	r0, r3
    b468:	d00e      	beq.n	b488 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    b46a:	2002      	movs	r0, #2
    b46c:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    b46e:	9801      	ldr	r0, [sp, #4]
    b470:	47a8      	blx	r5
    b472:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    b474:	2c00      	cmp	r4, #0
    b476:	d1f5      	bne.n	b464 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    b478:	2005      	movs	r0, #5
    b47a:	4240      	negs	r0, r0
    b47c:	e009      	b.n	b492 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    b47e:	4b0d      	ldr	r3, [pc, #52]	; (b4b4 <wait_for_firmware_start+0x6c>)
    b480:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    b482:	4b0d      	ldr	r3, [pc, #52]	; (b4b8 <wait_for_firmware_start+0x70>)
    b484:	9300      	str	r3, [sp, #0]
    b486:	e7e8      	b.n	b45a <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    b488:	9a00      	ldr	r2, [sp, #0]
    b48a:	4b07      	ldr	r3, [pc, #28]	; (b4a8 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    b48c:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    b48e:	429a      	cmp	r2, r3
    b490:	d001      	beq.n	b496 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    b492:	b002      	add	sp, #8
    b494:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    b496:	2100      	movs	r1, #0
    b498:	4802      	ldr	r0, [pc, #8]	; (b4a4 <wait_for_firmware_start+0x5c>)
    b49a:	4b08      	ldr	r3, [pc, #32]	; (b4bc <wait_for_firmware_start+0x74>)
    b49c:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    b49e:	2000      	movs	r0, #0
    b4a0:	e7f7      	b.n	b492 <wait_for_firmware_start+0x4a>
    b4a2:	46c0      	nop			; (mov r8, r8)
    b4a4:	0000108c 	.word	0x0000108c
    b4a8:	02532636 	.word	0x02532636
    b4ac:	00009d19 	.word	0x00009d19
    b4b0:	0000b571 	.word	0x0000b571
    b4b4:	000207ac 	.word	0x000207ac
    b4b8:	d75dc1c3 	.word	0xd75dc1c3
    b4bc:	0000b589 	.word	0x0000b589

0000b4c0 <chip_deinit>:

sint8 chip_deinit(void)
{
    b4c0:	b510      	push	{r4, lr}
    b4c2:	b082      	sub	sp, #8
	uint32 reg = 0;
    b4c4:	2300      	movs	r3, #0
    b4c6:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    b4c8:	a901      	add	r1, sp, #4
    b4ca:	20a0      	movs	r0, #160	; 0xa0
    b4cc:	0140      	lsls	r0, r0, #5
    b4ce:	4b14      	ldr	r3, [pc, #80]	; (b520 <chip_deinit+0x60>)
    b4d0:	4798      	blx	r3
    b4d2:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    b4d4:	d115      	bne.n	b502 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    b4d6:	4913      	ldr	r1, [pc, #76]	; (b524 <chip_deinit+0x64>)
    b4d8:	9b01      	ldr	r3, [sp, #4]
    b4da:	4019      	ands	r1, r3
    b4dc:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    b4de:	20a0      	movs	r0, #160	; 0xa0
    b4e0:	0140      	lsls	r0, r0, #5
    b4e2:	4b11      	ldr	r3, [pc, #68]	; (b528 <chip_deinit+0x68>)
    b4e4:	4798      	blx	r3
    b4e6:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    b4e8:	d016      	beq.n	b518 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    b4ea:	4a10      	ldr	r2, [pc, #64]	; (b52c <chip_deinit+0x6c>)
    b4ec:	4910      	ldr	r1, [pc, #64]	; (b530 <chip_deinit+0x70>)
    b4ee:	4811      	ldr	r0, [pc, #68]	; (b534 <chip_deinit+0x74>)
    b4f0:	4b11      	ldr	r3, [pc, #68]	; (b538 <chip_deinit+0x78>)
    b4f2:	4798      	blx	r3
    b4f4:	4811      	ldr	r0, [pc, #68]	; (b53c <chip_deinit+0x7c>)
    b4f6:	4b12      	ldr	r3, [pc, #72]	; (b540 <chip_deinit+0x80>)
    b4f8:	4798      	blx	r3
    b4fa:	200d      	movs	r0, #13
    b4fc:	4b11      	ldr	r3, [pc, #68]	; (b544 <chip_deinit+0x84>)
    b4fe:	4798      	blx	r3
		goto ERR1;
    b500:	e00a      	b.n	b518 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    b502:	4a11      	ldr	r2, [pc, #68]	; (b548 <chip_deinit+0x88>)
    b504:	490a      	ldr	r1, [pc, #40]	; (b530 <chip_deinit+0x70>)
    b506:	480b      	ldr	r0, [pc, #44]	; (b534 <chip_deinit+0x74>)
    b508:	4b0b      	ldr	r3, [pc, #44]	; (b538 <chip_deinit+0x78>)
    b50a:	4798      	blx	r3
    b50c:	480b      	ldr	r0, [pc, #44]	; (b53c <chip_deinit+0x7c>)
    b50e:	4b0c      	ldr	r3, [pc, #48]	; (b540 <chip_deinit+0x80>)
    b510:	4798      	blx	r3
    b512:	200d      	movs	r0, #13
    b514:	4b0b      	ldr	r3, [pc, #44]	; (b544 <chip_deinit+0x84>)
    b516:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    b518:	0020      	movs	r0, r4
    b51a:	b002      	add	sp, #8
    b51c:	bd10      	pop	{r4, pc}
    b51e:	46c0      	nop			; (mov r8, r8)
    b520:	0000b57d 	.word	0x0000b57d
    b524:	fffffbff 	.word	0xfffffbff
    b528:	0000b589 	.word	0x0000b589
    b52c:	0000020b 	.word	0x0000020b
    b530:	00013688 	.word	0x00013688
    b534:	0001313c 	.word	0x0001313c
    b538:	00011941 	.word	0x00011941
    b53c:	00013694 	.word	0x00013694
    b540:	00011a5d 	.word	0x00011a5d
    b544:	00011975 	.word	0x00011975
    b548:	00000205 	.word	0x00000205

0000b54c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    b54c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    b54e:	4b01      	ldr	r3, [pc, #4]	; (b554 <nm_bus_iface_init+0x8>)
    b550:	4798      	blx	r3
	return ret;
}
    b552:	bd10      	pop	{r4, pc}
    b554:	00009e45 	.word	0x00009e45

0000b558 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    b558:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    b55a:	4b01      	ldr	r3, [pc, #4]	; (b560 <nm_bus_iface_deinit+0x8>)
    b55c:	4798      	blx	r3

	return ret;
}
    b55e:	bd10      	pop	{r4, pc}
    b560:	0000a075 	.word	0x0000a075

0000b564 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    b564:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    b566:	4b01      	ldr	r3, [pc, #4]	; (b56c <nm_bus_reset+0x8>)
    b568:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    b56a:	bd10      	pop	{r4, pc}
    b56c:	0000bf15 	.word	0x0000bf15

0000b570 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    b570:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    b572:	4b01      	ldr	r3, [pc, #4]	; (b578 <nm_read_reg+0x8>)
    b574:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    b576:	bd10      	pop	{r4, pc}
    b578:	0000bf4d 	.word	0x0000bf4d

0000b57c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    b57c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    b57e:	4b01      	ldr	r3, [pc, #4]	; (b584 <nm_read_reg_with_ret+0x8>)
    b580:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    b582:	bd10      	pop	{r4, pc}
    b584:	0000bf61 	.word	0x0000bf61

0000b588 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    b588:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    b58a:	4b01      	ldr	r3, [pc, #4]	; (b590 <nm_write_reg+0x8>)
    b58c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    b58e:	bd10      	pop	{r4, pc}
    b590:	0000bf79 	.word	0x0000bf79

0000b594 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    b594:	b5f0      	push	{r4, r5, r6, r7, lr}
    b596:	46d6      	mov	lr, sl
    b598:	464f      	mov	r7, r9
    b59a:	4646      	mov	r6, r8
    b59c:	b5c0      	push	{r6, r7, lr}
    b59e:	b082      	sub	sp, #8
    b5a0:	4680      	mov	r8, r0
    b5a2:	4689      	mov	r9, r1
    b5a4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    b5a6:	4b13      	ldr	r3, [pc, #76]	; (b5f4 <nm_read_block+0x60>)
    b5a8:	881f      	ldrh	r7, [r3, #0]
    b5aa:	3f08      	subs	r7, #8
    b5ac:	b2bb      	uxth	r3, r7
    b5ae:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    b5b0:	001e      	movs	r6, r3
    b5b2:	0004      	movs	r4, r0
    b5b4:	429a      	cmp	r2, r3
    b5b6:	d91a      	bls.n	b5ee <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    b5b8:	4b0f      	ldr	r3, [pc, #60]	; (b5f8 <nm_read_block+0x64>)
    b5ba:	469a      	mov	sl, r3
    b5bc:	1a37      	subs	r7, r6, r0
    b5be:	4643      	mov	r3, r8
    b5c0:	1ae1      	subs	r1, r4, r3
    b5c2:	4449      	add	r1, r9
    b5c4:	9a01      	ldr	r2, [sp, #4]
    b5c6:	0020      	movs	r0, r4
    b5c8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    b5ca:	2800      	cmp	r0, #0
    b5cc:	d109      	bne.n	b5e2 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    b5ce:	1bad      	subs	r5, r5, r6
    b5d0:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    b5d2:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    b5d4:	42b5      	cmp	r5, r6
    b5d6:	d8f2      	bhi.n	b5be <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    b5d8:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    b5da:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    b5dc:	0020      	movs	r0, r4
    b5de:	4b06      	ldr	r3, [pc, #24]	; (b5f8 <nm_read_block+0x64>)
    b5e0:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    b5e2:	b002      	add	sp, #8
    b5e4:	bc1c      	pop	{r2, r3, r4}
    b5e6:	4690      	mov	r8, r2
    b5e8:	4699      	mov	r9, r3
    b5ea:	46a2      	mov	sl, r4
    b5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    b5ee:	2100      	movs	r1, #0
    b5f0:	e7f2      	b.n	b5d8 <nm_read_block+0x44>
    b5f2:	46c0      	nop			; (mov r8, r8)
    b5f4:	20000008 	.word	0x20000008
    b5f8:	0000c0bd 	.word	0x0000c0bd

0000b5fc <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    b5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5fe:	46d6      	mov	lr, sl
    b600:	464f      	mov	r7, r9
    b602:	4646      	mov	r6, r8
    b604:	b5c0      	push	{r6, r7, lr}
    b606:	b082      	sub	sp, #8
    b608:	4680      	mov	r8, r0
    b60a:	4689      	mov	r9, r1
    b60c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    b60e:	4b13      	ldr	r3, [pc, #76]	; (b65c <nm_write_block+0x60>)
    b610:	881f      	ldrh	r7, [r3, #0]
    b612:	3f08      	subs	r7, #8
    b614:	b2bb      	uxth	r3, r7
    b616:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    b618:	001e      	movs	r6, r3
    b61a:	0004      	movs	r4, r0
    b61c:	429a      	cmp	r2, r3
    b61e:	d91a      	bls.n	b656 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    b620:	4b0f      	ldr	r3, [pc, #60]	; (b660 <nm_write_block+0x64>)
    b622:	469a      	mov	sl, r3
    b624:	1a37      	subs	r7, r6, r0
    b626:	4643      	mov	r3, r8
    b628:	1ae1      	subs	r1, r4, r3
    b62a:	4449      	add	r1, r9
    b62c:	9a01      	ldr	r2, [sp, #4]
    b62e:	0020      	movs	r0, r4
    b630:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    b632:	2800      	cmp	r0, #0
    b634:	d109      	bne.n	b64a <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    b636:	1bad      	subs	r5, r5, r6
    b638:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    b63a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    b63c:	42b5      	cmp	r5, r6
    b63e:	d8f2      	bhi.n	b626 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    b640:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    b642:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    b644:	0020      	movs	r0, r4
    b646:	4b06      	ldr	r3, [pc, #24]	; (b660 <nm_write_block+0x64>)
    b648:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    b64a:	b002      	add	sp, #8
    b64c:	bc1c      	pop	{r2, r3, r4}
    b64e:	4690      	mov	r8, r2
    b650:	4699      	mov	r9, r3
    b652:	46a2      	mov	sl, r4
    b654:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    b656:	2100      	movs	r1, #0
    b658:	e7f2      	b.n	b640 <nm_write_block+0x44>
    b65a:	46c0      	nop			; (mov r8, r8)
    b65c:	20000008 	.word	0x20000008
    b660:	0000c219 	.word	0x0000c219

0000b664 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    b664:	b570      	push	{r4, r5, r6, lr}
    b666:	b084      	sub	sp, #16
    b668:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    b66a:	2300      	movs	r3, #0
    b66c:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    b66e:	2208      	movs	r2, #8
    b670:	2100      	movs	r1, #0
    b672:	a801      	add	r0, sp, #4
    b674:	4b2d      	ldr	r3, [pc, #180]	; (b72c <nm_get_firmware_full_info+0xc8>)
    b676:	4798      	blx	r3
	if (pstrRev != NULL)
    b678:	2c00      	cmp	r4, #0
    b67a:	d044      	beq.n	b706 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    b67c:	2228      	movs	r2, #40	; 0x28
    b67e:	2100      	movs	r1, #0
    b680:	0020      	movs	r0, r4
    b682:	4b2b      	ldr	r3, [pc, #172]	; (b730 <nm_get_firmware_full_info+0xcc>)
    b684:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    b686:	a903      	add	r1, sp, #12
    b688:	482a      	ldr	r0, [pc, #168]	; (b734 <nm_get_firmware_full_info+0xd0>)
    b68a:	4b2b      	ldr	r3, [pc, #172]	; (b738 <nm_get_firmware_full_info+0xd4>)
    b68c:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    b68e:	2800      	cmp	r0, #0
    b690:	d13a      	bne.n	b708 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    b692:	9b03      	ldr	r3, [sp, #12]
    b694:	2b00      	cmp	r3, #0
    b696:	d039      	beq.n	b70c <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    b698:	20c0      	movs	r0, #192	; 0xc0
    b69a:	0280      	lsls	r0, r0, #10
    b69c:	4318      	orrs	r0, r3
    b69e:	2208      	movs	r2, #8
    b6a0:	a901      	add	r1, sp, #4
    b6a2:	4b26      	ldr	r3, [pc, #152]	; (b73c <nm_get_firmware_full_info+0xd8>)
    b6a4:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    b6a6:	2800      	cmp	r0, #0
    b6a8:	d12e      	bne.n	b708 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    b6aa:	9b02      	ldr	r3, [sp, #8]
    b6ac:	0418      	lsls	r0, r3, #16
    b6ae:	0c00      	lsrs	r0, r0, #16
    b6b0:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    b6b2:	d02e      	beq.n	b712 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    b6b4:	23c0      	movs	r3, #192	; 0xc0
    b6b6:	029b      	lsls	r3, r3, #10
    b6b8:	4318      	orrs	r0, r3
    b6ba:	2228      	movs	r2, #40	; 0x28
    b6bc:	0021      	movs	r1, r4
    b6be:	4b1f      	ldr	r3, [pc, #124]	; (b73c <nm_get_firmware_full_info+0xd8>)
    b6c0:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    b6c2:	2800      	cmp	r0, #0
    b6c4:	d120      	bne.n	b708 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    b6c6:	7921      	ldrb	r1, [r4, #4]
    b6c8:	0209      	lsls	r1, r1, #8
    b6ca:	79a2      	ldrb	r2, [r4, #6]
    b6cc:	230f      	movs	r3, #15
    b6ce:	401a      	ands	r2, r3
    b6d0:	430a      	orrs	r2, r1
    b6d2:	7961      	ldrb	r1, [r4, #5]
    b6d4:	0109      	lsls	r1, r1, #4
    b6d6:	25ff      	movs	r5, #255	; 0xff
    b6d8:	4029      	ands	r1, r5
    b6da:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    b6dc:	79e1      	ldrb	r1, [r4, #7]
    b6de:	0209      	lsls	r1, r1, #8
    b6e0:	7a66      	ldrb	r6, [r4, #9]
    b6e2:	4033      	ands	r3, r6
    b6e4:	430b      	orrs	r3, r1
    b6e6:	7a21      	ldrb	r1, [r4, #8]
    b6e8:	0109      	lsls	r1, r1, #4
    b6ea:	400d      	ands	r5, r1
    b6ec:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    b6ee:	2a00      	cmp	r2, #0
    b6f0:	d012      	beq.n	b718 <nm_get_firmware_full_info+0xb4>
    b6f2:	2b00      	cmp	r3, #0
    b6f4:	d013      	beq.n	b71e <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    b6f6:	4912      	ldr	r1, [pc, #72]	; (b740 <nm_get_firmware_full_info+0xdc>)
    b6f8:	428b      	cmp	r3, r1
    b6fa:	d813      	bhi.n	b724 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    b6fc:	4b11      	ldr	r3, [pc, #68]	; (b744 <nm_get_firmware_full_info+0xe0>)
    b6fe:	429a      	cmp	r2, r3
    b700:	d802      	bhi.n	b708 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    b702:	380d      	subs	r0, #13
    b704:	e000      	b.n	b708 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    b706:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    b708:	b004      	add	sp, #16
    b70a:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    b70c:	200c      	movs	r0, #12
    b70e:	4240      	negs	r0, r0
    b710:	e7fa      	b.n	b708 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    b712:	200c      	movs	r0, #12
    b714:	4240      	negs	r0, r0
    b716:	e7f7      	b.n	b708 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    b718:	200c      	movs	r0, #12
    b71a:	4240      	negs	r0, r0
    b71c:	e7f4      	b.n	b708 <nm_get_firmware_full_info+0xa4>
    b71e:	200c      	movs	r0, #12
    b720:	4240      	negs	r0, r0
    b722:	e7f1      	b.n	b708 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    b724:	200d      	movs	r0, #13
    b726:	4240      	negs	r0, r0
    b728:	e7ee      	b.n	b708 <nm_get_firmware_full_info+0xa4>
    b72a:	46c0      	nop			; (mov r8, r8)
    b72c:	000117df 	.word	0x000117df
    b730:	0000a0f5 	.word	0x0000a0f5
    b734:	000c0008 	.word	0x000c0008
    b738:	0000b57d 	.word	0x0000b57d
    b73c:	0000b595 	.word	0x0000b595
    b740:	00001352 	.word	0x00001352
    b744:	00001351 	.word	0x00001351

0000b748 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    b748:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    b74a:	2800      	cmp	r0, #0
    b74c:	d037      	beq.n	b7be <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    b74e:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    b750:	1e6b      	subs	r3, r5, #1
    b752:	2b03      	cmp	r3, #3
    b754:	d900      	bls.n	b758 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    b756:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    b758:	2000      	movs	r0, #0
    b75a:	4b20      	ldr	r3, [pc, #128]	; (b7dc <nm_drv_init+0x94>)
    b75c:	4798      	blx	r3
    b75e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b760:	d12f      	bne.n	b7c2 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    b762:	481f      	ldr	r0, [pc, #124]	; (b7e0 <nm_drv_init+0x98>)
    b764:	4c1f      	ldr	r4, [pc, #124]	; (b7e4 <nm_drv_init+0x9c>)
    b766:	47a0      	blx	r4
    b768:	4b1f      	ldr	r3, [pc, #124]	; (b7e8 <nm_drv_init+0xa0>)
    b76a:	4798      	blx	r3
    b76c:	0001      	movs	r1, r0
    b76e:	481f      	ldr	r0, [pc, #124]	; (b7ec <nm_drv_init+0xa4>)
    b770:	47a0      	blx	r4
    b772:	200d      	movs	r0, #13
    b774:	4b1e      	ldr	r3, [pc, #120]	; (b7f0 <nm_drv_init+0xa8>)
    b776:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    b778:	4b1e      	ldr	r3, [pc, #120]	; (b7f4 <nm_drv_init+0xac>)
    b77a:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    b77c:	0028      	movs	r0, r5
    b77e:	4b1e      	ldr	r3, [pc, #120]	; (b7f8 <nm_drv_init+0xb0>)
    b780:	4798      	blx	r3
    b782:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b784:	d117      	bne.n	b7b6 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    b786:	0028      	movs	r0, r5
    b788:	4b1c      	ldr	r3, [pc, #112]	; (b7fc <nm_drv_init+0xb4>)
    b78a:	4798      	blx	r3
    b78c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b78e:	d112      	bne.n	b7b6 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    b790:	3d02      	subs	r5, #2
    b792:	2d01      	cmp	r5, #1
    b794:	d911      	bls.n	b7ba <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    b796:	4b1a      	ldr	r3, [pc, #104]	; (b800 <nm_drv_init+0xb8>)
    b798:	4798      	blx	r3
    b79a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b79c:	d00d      	beq.n	b7ba <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    b79e:	2256      	movs	r2, #86	; 0x56
    b7a0:	32ff      	adds	r2, #255	; 0xff
    b7a2:	4918      	ldr	r1, [pc, #96]	; (b804 <nm_drv_init+0xbc>)
    b7a4:	4818      	ldr	r0, [pc, #96]	; (b808 <nm_drv_init+0xc0>)
    b7a6:	4b0f      	ldr	r3, [pc, #60]	; (b7e4 <nm_drv_init+0x9c>)
    b7a8:	4798      	blx	r3
    b7aa:	4818      	ldr	r0, [pc, #96]	; (b80c <nm_drv_init+0xc4>)
    b7ac:	4b18      	ldr	r3, [pc, #96]	; (b810 <nm_drv_init+0xc8>)
    b7ae:	4798      	blx	r3
    b7b0:	200d      	movs	r0, #13
    b7b2:	4b0f      	ldr	r3, [pc, #60]	; (b7f0 <nm_drv_init+0xa8>)
    b7b4:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    b7b6:	4b17      	ldr	r3, [pc, #92]	; (b814 <nm_drv_init+0xcc>)
    b7b8:	4798      	blx	r3
ERR1:
	return ret;
}
    b7ba:	0020      	movs	r0, r4
    b7bc:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    b7be:	2501      	movs	r5, #1
    b7c0:	e7ca      	b.n	b758 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    b7c2:	2228      	movs	r2, #40	; 0x28
    b7c4:	32ff      	adds	r2, #255	; 0xff
    b7c6:	490f      	ldr	r1, [pc, #60]	; (b804 <nm_drv_init+0xbc>)
    b7c8:	480f      	ldr	r0, [pc, #60]	; (b808 <nm_drv_init+0xc0>)
    b7ca:	4b06      	ldr	r3, [pc, #24]	; (b7e4 <nm_drv_init+0x9c>)
    b7cc:	4798      	blx	r3
    b7ce:	4812      	ldr	r0, [pc, #72]	; (b818 <nm_drv_init+0xd0>)
    b7d0:	4b0f      	ldr	r3, [pc, #60]	; (b810 <nm_drv_init+0xc8>)
    b7d2:	4798      	blx	r3
    b7d4:	200d      	movs	r0, #13
    b7d6:	4b06      	ldr	r3, [pc, #24]	; (b7f0 <nm_drv_init+0xa8>)
    b7d8:	4798      	blx	r3
		goto ERR1;
    b7da:	e7ee      	b.n	b7ba <nm_drv_init+0x72>
    b7dc:	0000b54d 	.word	0x0000b54d
    b7e0:	0001346c 	.word	0x0001346c
    b7e4:	00011941 	.word	0x00011941
    b7e8:	0000b12d 	.word	0x0000b12d
    b7ec:	000137b0 	.word	0x000137b0
    b7f0:	00011975 	.word	0x00011975
    b7f4:	0000bf91 	.word	0x0000bf91
    b7f8:	0000b341 	.word	0x0000b341
    b7fc:	0000b449 	.word	0x0000b449
    b800:	0000b0d1 	.word	0x0000b0d1
    b804:	000136f8 	.word	0x000136f8
    b808:	0001313c 	.word	0x0001313c
    b80c:	00013774 	.word	0x00013774
    b810:	00011a5d 	.word	0x00011a5d
    b814:	0000b559 	.word	0x0000b559
    b818:	00013794 	.word	0x00013794

0000b81c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    b81c:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    b81e:	4b1c      	ldr	r3, [pc, #112]	; (b890 <nm_drv_deinit+0x74>)
    b820:	4798      	blx	r3
    b822:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b824:	d10b      	bne.n	b83e <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    b826:	2000      	movs	r0, #0
    b828:	4b1a      	ldr	r3, [pc, #104]	; (b894 <nm_drv_deinit+0x78>)
    b82a:	4798      	blx	r3
    b82c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b82e:	d114      	bne.n	b85a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    b830:	4b19      	ldr	r3, [pc, #100]	; (b898 <nm_drv_deinit+0x7c>)
    b832:	4798      	blx	r3
    b834:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    b836:	d11d      	bne.n	b874 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    b838:	4b18      	ldr	r3, [pc, #96]	; (b89c <nm_drv_deinit+0x80>)
    b83a:	4798      	blx	r3
    b83c:	e00b      	b.n	b856 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    b83e:	22b6      	movs	r2, #182	; 0xb6
    b840:	0052      	lsls	r2, r2, #1
    b842:	4917      	ldr	r1, [pc, #92]	; (b8a0 <nm_drv_deinit+0x84>)
    b844:	4817      	ldr	r0, [pc, #92]	; (b8a4 <nm_drv_deinit+0x88>)
    b846:	4b18      	ldr	r3, [pc, #96]	; (b8a8 <nm_drv_deinit+0x8c>)
    b848:	4798      	blx	r3
    b84a:	4818      	ldr	r0, [pc, #96]	; (b8ac <nm_drv_deinit+0x90>)
    b84c:	4b18      	ldr	r3, [pc, #96]	; (b8b0 <nm_drv_deinit+0x94>)
    b84e:	4798      	blx	r3
    b850:	200d      	movs	r0, #13
    b852:	4b18      	ldr	r3, [pc, #96]	; (b8b4 <nm_drv_deinit+0x98>)
    b854:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    b856:	0020      	movs	r0, r4
    b858:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    b85a:	2274      	movs	r2, #116	; 0x74
    b85c:	32ff      	adds	r2, #255	; 0xff
    b85e:	4910      	ldr	r1, [pc, #64]	; (b8a0 <nm_drv_deinit+0x84>)
    b860:	4810      	ldr	r0, [pc, #64]	; (b8a4 <nm_drv_deinit+0x88>)
    b862:	4b11      	ldr	r3, [pc, #68]	; (b8a8 <nm_drv_deinit+0x8c>)
    b864:	4798      	blx	r3
    b866:	4814      	ldr	r0, [pc, #80]	; (b8b8 <nm_drv_deinit+0x9c>)
    b868:	4b11      	ldr	r3, [pc, #68]	; (b8b0 <nm_drv_deinit+0x94>)
    b86a:	4798      	blx	r3
    b86c:	200d      	movs	r0, #13
    b86e:	4b11      	ldr	r3, [pc, #68]	; (b8b4 <nm_drv_deinit+0x98>)
    b870:	4798      	blx	r3
		goto ERR1;
    b872:	e7f0      	b.n	b856 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    b874:	227a      	movs	r2, #122	; 0x7a
    b876:	32ff      	adds	r2, #255	; 0xff
    b878:	4909      	ldr	r1, [pc, #36]	; (b8a0 <nm_drv_deinit+0x84>)
    b87a:	480a      	ldr	r0, [pc, #40]	; (b8a4 <nm_drv_deinit+0x88>)
    b87c:	4b0a      	ldr	r3, [pc, #40]	; (b8a8 <nm_drv_deinit+0x8c>)
    b87e:	4798      	blx	r3
    b880:	480e      	ldr	r0, [pc, #56]	; (b8bc <nm_drv_deinit+0xa0>)
    b882:	4b0b      	ldr	r3, [pc, #44]	; (b8b0 <nm_drv_deinit+0x94>)
    b884:	4798      	blx	r3
    b886:	200d      	movs	r0, #13
    b888:	4b0a      	ldr	r3, [pc, #40]	; (b8b4 <nm_drv_deinit+0x98>)
    b88a:	4798      	blx	r3
		goto ERR1;
    b88c:	e7e3      	b.n	b856 <nm_drv_deinit+0x3a>
    b88e:	46c0      	nop			; (mov r8, r8)
    b890:	0000b4c1 	.word	0x0000b4c1
    b894:	0000cded 	.word	0x0000cded
    b898:	0000b559 	.word	0x0000b559
    b89c:	0000bf3d 	.word	0x0000bf3d
    b8a0:	00013704 	.word	0x00013704
    b8a4:	0001313c 	.word	0x0001313c
    b8a8:	00011941 	.word	0x00011941
    b8ac:	00013714 	.word	0x00013714
    b8b0:	00011a5d 	.word	0x00011a5d
    b8b4:	00011975 	.word	0x00011975
    b8b8:	00013734 	.word	0x00013734
    b8bc:	00013758 	.word	0x00013758

0000b8c0 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    b8c0:	b500      	push	{lr}
    b8c2:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    b8c4:	ab01      	add	r3, sp, #4
    b8c6:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    b8c8:	2200      	movs	r2, #0
    b8ca:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    b8cc:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    b8ce:	0019      	movs	r1, r3
    b8d0:	2003      	movs	r0, #3
    b8d2:	4b02      	ldr	r3, [pc, #8]	; (b8dc <nmi_spi_write+0x1c>)
    b8d4:	4798      	blx	r3
}
    b8d6:	b005      	add	sp, #20
    b8d8:	bd00      	pop	{pc}
    b8da:	46c0      	nop			; (mov r8, r8)
    b8dc:	00009f29 	.word	0x00009f29

0000b8e0 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    b8e0:	b570      	push	{r4, r5, r6, lr}
    b8e2:	b084      	sub	sp, #16
    b8e4:	ac08      	add	r4, sp, #32
    b8e6:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    b8e8:	ac01      	add	r4, sp, #4
    b8ea:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    b8ec:	303f      	adds	r0, #63	; 0x3f
    b8ee:	b2c4      	uxtb	r4, r0
    b8f0:	2c0e      	cmp	r4, #14
    b8f2:	d900      	bls.n	b8f6 <spi_cmd+0x16>
    b8f4:	e084      	b.n	ba00 <spi_cmd+0x120>
    b8f6:	00a0      	lsls	r0, r4, #2
    b8f8:	4c4f      	ldr	r4, [pc, #316]	; (ba38 <spi_cmd+0x158>)
    b8fa:	5820      	ldr	r0, [r4, r0]
    b8fc:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    b8fe:	ab01      	add	r3, sp, #4
    b900:	0c0a      	lsrs	r2, r1, #16
    b902:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b904:	0a0a      	lsrs	r2, r1, #8
    b906:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    b908:	70d9      	strb	r1, [r3, #3]
		len = 5;
    b90a:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    b90c:	4b4b      	ldr	r3, [pc, #300]	; (ba3c <spi_cmd+0x15c>)
    b90e:	781b      	ldrb	r3, [r3, #0]
    b910:	2b00      	cmp	r3, #0
    b912:	d077      	beq.n	ba04 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    b914:	3901      	subs	r1, #1
    b916:	b2c9      	uxtb	r1, r1
    b918:	e083      	b.n	ba22 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    b91a:	0a0b      	lsrs	r3, r1, #8
    b91c:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    b91e:	2d00      	cmp	r5, #0
    b920:	d107      	bne.n	b932 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    b922:	aa01      	add	r2, sp, #4
    b924:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    b926:	ab01      	add	r3, sp, #4
    b928:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    b92a:	2200      	movs	r2, #0
    b92c:	70da      	strb	r2, [r3, #3]
		len = 5;
    b92e:	2105      	movs	r1, #5
		break;
    b930:	e7ec      	b.n	b90c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    b932:	2280      	movs	r2, #128	; 0x80
    b934:	4252      	negs	r2, r2
    b936:	4313      	orrs	r3, r2
    b938:	aa01      	add	r2, sp, #4
    b93a:	7053      	strb	r3, [r2, #1]
    b93c:	e7f3      	b.n	b926 <spi_cmd+0x46>
		bc[1] = 0x00;
    b93e:	ab01      	add	r3, sp, #4
    b940:	2200      	movs	r2, #0
    b942:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    b944:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b946:	70da      	strb	r2, [r3, #3]
		len = 5;
    b948:	2105      	movs	r1, #5
		break;
    b94a:	e7df      	b.n	b90c <spi_cmd+0x2c>
		bc[1] = 0x00;
    b94c:	ab01      	add	r3, sp, #4
    b94e:	2200      	movs	r2, #0
    b950:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    b952:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b954:	70da      	strb	r2, [r3, #3]
		len = 5;
    b956:	2105      	movs	r1, #5
		break;
    b958:	e7d8      	b.n	b90c <spi_cmd+0x2c>
		bc[1] = 0xff;
    b95a:	ab01      	add	r3, sp, #4
    b95c:	22ff      	movs	r2, #255	; 0xff
    b95e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    b960:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    b962:	70da      	strb	r2, [r3, #3]
		len = 5;
    b964:	2105      	movs	r1, #5
		break;
    b966:	e7d1      	b.n	b90c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    b968:	aa01      	add	r2, sp, #4
    b96a:	0c08      	lsrs	r0, r1, #16
    b96c:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    b96e:	0a08      	lsrs	r0, r1, #8
    b970:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    b972:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    b974:	0a19      	lsrs	r1, r3, #8
    b976:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    b978:	7153      	strb	r3, [r2, #5]
		len = 7;
    b97a:	2107      	movs	r1, #7
		break;
    b97c:	e7c6      	b.n	b90c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    b97e:	aa01      	add	r2, sp, #4
    b980:	0c08      	lsrs	r0, r1, #16
    b982:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    b984:	0a08      	lsrs	r0, r1, #8
    b986:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    b988:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    b98a:	0c19      	lsrs	r1, r3, #16
    b98c:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    b98e:	0a19      	lsrs	r1, r3, #8
    b990:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    b992:	7193      	strb	r3, [r2, #6]
		len = 8;
    b994:	2108      	movs	r1, #8
		break;
    b996:	e7b9      	b.n	b90c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    b998:	0a0b      	lsrs	r3, r1, #8
    b99a:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    b99c:	2d00      	cmp	r5, #0
    b99e:	d10c      	bne.n	b9ba <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    b9a0:	a801      	add	r0, sp, #4
    b9a2:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    b9a4:	ab01      	add	r3, sp, #4
    b9a6:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    b9a8:	0e11      	lsrs	r1, r2, #24
    b9aa:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    b9ac:	0c11      	lsrs	r1, r2, #16
    b9ae:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    b9b0:	0a11      	lsrs	r1, r2, #8
    b9b2:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    b9b4:	719a      	strb	r2, [r3, #6]
		len = 8;
    b9b6:	2108      	movs	r1, #8
		break;
    b9b8:	e7a8      	b.n	b90c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    b9ba:	2080      	movs	r0, #128	; 0x80
    b9bc:	4240      	negs	r0, r0
    b9be:	4303      	orrs	r3, r0
    b9c0:	a801      	add	r0, sp, #4
    b9c2:	7043      	strb	r3, [r0, #1]
    b9c4:	e7ee      	b.n	b9a4 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    b9c6:	ab01      	add	r3, sp, #4
    b9c8:	0c08      	lsrs	r0, r1, #16
    b9ca:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b9cc:	0a08      	lsrs	r0, r1, #8
    b9ce:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    b9d0:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    b9d2:	0e11      	lsrs	r1, r2, #24
    b9d4:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    b9d6:	0c11      	lsrs	r1, r2, #16
    b9d8:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    b9da:	0a11      	lsrs	r1, r2, #8
    b9dc:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    b9de:	71da      	strb	r2, [r3, #7]
		len = 9;
    b9e0:	2109      	movs	r1, #9
		break;
    b9e2:	e793      	b.n	b90c <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    b9e4:	2228      	movs	r2, #40	; 0x28
    b9e6:	32ff      	adds	r2, #255	; 0xff
    b9e8:	4915      	ldr	r1, [pc, #84]	; (ba40 <spi_cmd+0x160>)
    b9ea:	4816      	ldr	r0, [pc, #88]	; (ba44 <spi_cmd+0x164>)
    b9ec:	4b16      	ldr	r3, [pc, #88]	; (ba48 <spi_cmd+0x168>)
    b9ee:	4798      	blx	r3
    b9f0:	4816      	ldr	r0, [pc, #88]	; (ba4c <spi_cmd+0x16c>)
    b9f2:	4b17      	ldr	r3, [pc, #92]	; (ba50 <spi_cmd+0x170>)
    b9f4:	4798      	blx	r3
    b9f6:	200d      	movs	r0, #13
    b9f8:	4b16      	ldr	r3, [pc, #88]	; (ba54 <spi_cmd+0x174>)
    b9fa:	4798      	blx	r3
			result = N_FAIL;
    b9fc:	2300      	movs	r3, #0
    b9fe:	e017      	b.n	ba30 <spi_cmd+0x150>
	switch (cmd) {
    ba00:	2300      	movs	r3, #0
    ba02:	e015      	b.n	ba30 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    ba04:	1e4e      	subs	r6, r1, #1
    ba06:	aa01      	add	r2, sp, #4
    ba08:	1995      	adds	r5, r2, r6
    ba0a:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    ba0c:	4c12      	ldr	r4, [pc, #72]	; (ba58 <spi_cmd+0x178>)
    ba0e:	005b      	lsls	r3, r3, #1
    ba10:	7810      	ldrb	r0, [r2, #0]
    ba12:	4043      	eors	r3, r0
    ba14:	5ce3      	ldrb	r3, [r4, r3]
    ba16:	3201      	adds	r2, #1
	while (len--)
    ba18:	42aa      	cmp	r2, r5
    ba1a:	d1f8      	bne.n	ba0e <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    ba1c:	005b      	lsls	r3, r3, #1
    ba1e:	aa01      	add	r2, sp, #4
    ba20:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    ba22:	b289      	uxth	r1, r1
    ba24:	a801      	add	r0, sp, #4
    ba26:	4b0d      	ldr	r3, [pc, #52]	; (ba5c <spi_cmd+0x17c>)
    ba28:	4798      	blx	r3
    ba2a:	2301      	movs	r3, #1
    ba2c:	2800      	cmp	r0, #0
    ba2e:	d1d9      	bne.n	b9e4 <spi_cmd+0x104>
		}
	}

	return result;
}
    ba30:	0018      	movs	r0, r3
    ba32:	b004      	add	sp, #16
    ba34:	bd70      	pop	{r4, r5, r6, pc}
    ba36:	46c0      	nop			; (mov r8, r8)
    ba38:	000137c0 	.word	0x000137c0
    ba3c:	2000023c 	.word	0x2000023c
    ba40:	00013800 	.word	0x00013800
    ba44:	0001313c 	.word	0x0001313c
    ba48:	00011941 	.word	0x00011941
    ba4c:	00013c90 	.word	0x00013c90
    ba50:	00011a5d 	.word	0x00011a5d
    ba54:	00011975 	.word	0x00011975
    ba58:	0001388c 	.word	0x0001388c
    ba5c:	0000b8c1 	.word	0x0000b8c1

0000ba60 <nmi_spi_read>:
{
    ba60:	b500      	push	{lr}
    ba62:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    ba64:	ab01      	add	r3, sp, #4
    ba66:	2200      	movs	r2, #0
    ba68:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    ba6a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    ba6c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    ba6e:	0019      	movs	r1, r3
    ba70:	2003      	movs	r0, #3
    ba72:	4b02      	ldr	r3, [pc, #8]	; (ba7c <nmi_spi_read+0x1c>)
    ba74:	4798      	blx	r3
}
    ba76:	b005      	add	sp, #20
    ba78:	bd00      	pop	{pc}
    ba7a:	46c0      	nop			; (mov r8, r8)
    ba7c:	00009f29 	.word	0x00009f29

0000ba80 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    ba80:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba82:	46c6      	mov	lr, r8
    ba84:	b500      	push	{lr}
    ba86:	b082      	sub	sp, #8
    ba88:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    ba8a:	28cf      	cmp	r0, #207	; 0xcf
    ba8c:	d02b      	beq.n	bae6 <spi_cmd_rsp+0x66>
    ba8e:	0003      	movs	r3, r0
    ba90:	333b      	adds	r3, #59	; 0x3b
    ba92:	b2db      	uxtb	r3, r3
    ba94:	2b01      	cmp	r3, #1
    ba96:	d926      	bls.n	bae6 <spi_cmd_rsp+0x66>
{
    ba98:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    ba9a:	466b      	mov	r3, sp
    ba9c:	1dde      	adds	r6, r3, #7
    ba9e:	4b26      	ldr	r3, [pc, #152]	; (bb38 <spi_cmd_rsp+0xb8>)
    baa0:	4698      	mov	r8, r3
    baa2:	2101      	movs	r1, #1
    baa4:	0030      	movs	r0, r6
    baa6:	47c0      	blx	r8
    baa8:	1e05      	subs	r5, r0, #0
    baaa:	d125      	bne.n	baf8 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    baac:	7833      	ldrb	r3, [r6, #0]
    baae:	42bb      	cmp	r3, r7
    bab0:	d030      	beq.n	bb14 <spi_cmd_rsp+0x94>
    bab2:	3c01      	subs	r4, #1
    bab4:	b2e4      	uxtb	r4, r4
    bab6:	2c00      	cmp	r4, #0
    bab8:	d1f3      	bne.n	baa2 <spi_cmd_rsp+0x22>
    baba:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    babc:	466b      	mov	r3, sp
    babe:	1dde      	adds	r6, r3, #7
    bac0:	4f1d      	ldr	r7, [pc, #116]	; (bb38 <spi_cmd_rsp+0xb8>)
    bac2:	2101      	movs	r1, #1
    bac4:	0030      	movs	r0, r6
    bac6:	47b8      	blx	r7
    bac8:	2800      	cmp	r0, #0
    baca:	d125      	bne.n	bb18 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    bacc:	7833      	ldrb	r3, [r6, #0]
    bace:	2b00      	cmp	r3, #0
    bad0:	d02f      	beq.n	bb32 <spi_cmd_rsp+0xb2>
    bad2:	3c01      	subs	r4, #1
    bad4:	b2e4      	uxtb	r4, r4
    bad6:	2c00      	cmp	r4, #0
    bad8:	d1f3      	bne.n	bac2 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    bada:	2501      	movs	r5, #1

_fail_:

	return result;
}
    badc:	0028      	movs	r0, r5
    bade:	b002      	add	sp, #8
    bae0:	bc04      	pop	{r2}
    bae2:	4690      	mov	r8, r2
    bae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    bae6:	2101      	movs	r1, #1
    bae8:	466b      	mov	r3, sp
    baea:	1dd8      	adds	r0, r3, #7
    baec:	4b12      	ldr	r3, [pc, #72]	; (bb38 <spi_cmd_rsp+0xb8>)
    baee:	4798      	blx	r3
			result = N_FAIL;
    baf0:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    baf2:	2800      	cmp	r0, #0
    baf4:	d0d0      	beq.n	ba98 <spi_cmd_rsp+0x18>
    baf6:	e7f1      	b.n	badc <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    baf8:	22b1      	movs	r2, #177	; 0xb1
    bafa:	0052      	lsls	r2, r2, #1
    bafc:	490f      	ldr	r1, [pc, #60]	; (bb3c <spi_cmd_rsp+0xbc>)
    bafe:	4810      	ldr	r0, [pc, #64]	; (bb40 <spi_cmd_rsp+0xc0>)
    bb00:	4b10      	ldr	r3, [pc, #64]	; (bb44 <spi_cmd_rsp+0xc4>)
    bb02:	4798      	blx	r3
    bb04:	4810      	ldr	r0, [pc, #64]	; (bb48 <spi_cmd_rsp+0xc8>)
    bb06:	4b11      	ldr	r3, [pc, #68]	; (bb4c <spi_cmd_rsp+0xcc>)
    bb08:	4798      	blx	r3
    bb0a:	200d      	movs	r0, #13
    bb0c:	4b10      	ldr	r3, [pc, #64]	; (bb50 <spi_cmd_rsp+0xd0>)
    bb0e:	4798      	blx	r3
			result = N_FAIL;
    bb10:	2500      	movs	r5, #0
			goto _fail_;
    bb12:	e7e3      	b.n	badc <spi_cmd_rsp+0x5c>
    bb14:	240b      	movs	r4, #11
    bb16:	e7d1      	b.n	babc <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    bb18:	22b8      	movs	r2, #184	; 0xb8
    bb1a:	0052      	lsls	r2, r2, #1
    bb1c:	4907      	ldr	r1, [pc, #28]	; (bb3c <spi_cmd_rsp+0xbc>)
    bb1e:	4808      	ldr	r0, [pc, #32]	; (bb40 <spi_cmd_rsp+0xc0>)
    bb20:	4b08      	ldr	r3, [pc, #32]	; (bb44 <spi_cmd_rsp+0xc4>)
    bb22:	4798      	blx	r3
    bb24:	4808      	ldr	r0, [pc, #32]	; (bb48 <spi_cmd_rsp+0xc8>)
    bb26:	4b09      	ldr	r3, [pc, #36]	; (bb4c <spi_cmd_rsp+0xcc>)
    bb28:	4798      	blx	r3
    bb2a:	200d      	movs	r0, #13
    bb2c:	4b08      	ldr	r3, [pc, #32]	; (bb50 <spi_cmd_rsp+0xd0>)
    bb2e:	4798      	blx	r3
			goto _fail_;
    bb30:	e7d4      	b.n	badc <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    bb32:	2501      	movs	r5, #1
    bb34:	e7d2      	b.n	badc <spi_cmd_rsp+0x5c>
    bb36:	46c0      	nop			; (mov r8, r8)
    bb38:	0000ba61 	.word	0x0000ba61
    bb3c:	00013818 	.word	0x00013818
    bb40:	0001313c 	.word	0x0001313c
    bb44:	00011941 	.word	0x00011941
    bb48:	00013cbc 	.word	0x00013cbc
    bb4c:	00011a5d 	.word	0x00011a5d
    bb50:	00011975 	.word	0x00011975

0000bb54 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    bb54:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb56:	46de      	mov	lr, fp
    bb58:	4657      	mov	r7, sl
    bb5a:	464e      	mov	r6, r9
    bb5c:	4645      	mov	r5, r8
    bb5e:	b5e0      	push	{r5, r6, r7, lr}
    bb60:	b087      	sub	sp, #28
    bb62:	9001      	str	r0, [sp, #4]
    bb64:	4689      	mov	r9, r1
    bb66:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    bb68:	2300      	movs	r3, #0
    bb6a:	469a      	mov	sl, r3
    bb6c:	2380      	movs	r3, #128	; 0x80
    bb6e:	019b      	lsls	r3, r3, #6
    bb70:	469b      	mov	fp, r3
    bb72:	466a      	mov	r2, sp
    bb74:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    bb76:	4b3b      	ldr	r3, [pc, #236]	; (bc64 <spi_data_read+0x110>)
    bb78:	4698      	mov	r8, r3
    bb7a:	e02e      	b.n	bbda <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    bb7c:	4a3a      	ldr	r2, [pc, #232]	; (bc68 <spi_data_read+0x114>)
    bb7e:	493b      	ldr	r1, [pc, #236]	; (bc6c <spi_data_read+0x118>)
    bb80:	483b      	ldr	r0, [pc, #236]	; (bc70 <spi_data_read+0x11c>)
    bb82:	4b3c      	ldr	r3, [pc, #240]	; (bc74 <spi_data_read+0x120>)
    bb84:	4798      	blx	r3
    bb86:	483c      	ldr	r0, [pc, #240]	; (bc78 <spi_data_read+0x124>)
    bb88:	4b3c      	ldr	r3, [pc, #240]	; (bc7c <spi_data_read+0x128>)
    bb8a:	4798      	blx	r3
    bb8c:	200d      	movs	r0, #13
    bb8e:	4b3c      	ldr	r3, [pc, #240]	; (bc80 <spi_data_read+0x12c>)
    bb90:	4798      	blx	r3
    bb92:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    bb94:	0028      	movs	r0, r5
    bb96:	b007      	add	sp, #28
    bb98:	bc3c      	pop	{r2, r3, r4, r5}
    bb9a:	4690      	mov	r8, r2
    bb9c:	4699      	mov	r9, r3
    bb9e:	46a2      	mov	sl, r4
    bba0:	46ab      	mov	fp, r5
    bba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    bba4:	2c00      	cmp	r4, #0
    bba6:	dd2e      	ble.n	bc06 <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    bba8:	9b01      	ldr	r3, [sp, #4]
    bbaa:	4453      	add	r3, sl
    bbac:	0018      	movs	r0, r3
    bbae:	0039      	movs	r1, r7
    bbb0:	4b2c      	ldr	r3, [pc, #176]	; (bc64 <spi_data_read+0x110>)
    bbb2:	4798      	blx	r3
    bbb4:	1e04      	subs	r4, r0, #0
    bbb6:	d133      	bne.n	bc20 <spi_data_read+0xcc>
		if(!clockless)
    bbb8:	9b02      	ldr	r3, [sp, #8]
    bbba:	2b00      	cmp	r3, #0
    bbbc:	d103      	bne.n	bbc6 <spi_data_read+0x72>
			if (!gu8Crc_off) {
    bbbe:	4b31      	ldr	r3, [pc, #196]	; (bc84 <spi_data_read+0x130>)
    bbc0:	781b      	ldrb	r3, [r3, #0]
    bbc2:	2b00      	cmp	r3, #0
    bbc4:	d039      	beq.n	bc3a <spi_data_read+0xe6>
		ix += nbytes;
    bbc6:	4653      	mov	r3, sl
    bbc8:	18fb      	adds	r3, r7, r3
    bbca:	b21b      	sxth	r3, r3
    bbcc:	469a      	mov	sl, r3
		sz -= nbytes;
    bbce:	464b      	mov	r3, r9
    bbd0:	1bdf      	subs	r7, r3, r7
    bbd2:	b2bb      	uxth	r3, r7
    bbd4:	4699      	mov	r9, r3
	} while (sz);
    bbd6:	2b00      	cmp	r3, #0
    bbd8:	d042      	beq.n	bc60 <spi_data_read+0x10c>
    bbda:	464f      	mov	r7, r9
    bbdc:	45d9      	cmp	r9, fp
    bbde:	d901      	bls.n	bbe4 <spi_data_read+0x90>
    bbe0:	466b      	mov	r3, sp
    bbe2:	89df      	ldrh	r7, [r3, #14]
    bbe4:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    bbe6:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    bbe8:	ab04      	add	r3, sp, #16
    bbea:	1cde      	adds	r6, r3, #3
    bbec:	2101      	movs	r1, #1
    bbee:	0030      	movs	r0, r6
    bbf0:	47c0      	blx	r8
    bbf2:	1e05      	subs	r5, r0, #0
    bbf4:	d1c2      	bne.n	bb7c <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    bbf6:	7833      	ldrb	r3, [r6, #0]
    bbf8:	091b      	lsrs	r3, r3, #4
    bbfa:	2b0f      	cmp	r3, #15
    bbfc:	d0d2      	beq.n	bba4 <spi_data_read+0x50>
    bbfe:	3c01      	subs	r4, #1
    bc00:	b224      	sxth	r4, r4
		} while (retry--);
    bc02:	1c63      	adds	r3, r4, #1
    bc04:	d1f2      	bne.n	bbec <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    bc06:	4a20      	ldr	r2, [pc, #128]	; (bc88 <spi_data_read+0x134>)
    bc08:	4918      	ldr	r1, [pc, #96]	; (bc6c <spi_data_read+0x118>)
    bc0a:	4819      	ldr	r0, [pc, #100]	; (bc70 <spi_data_read+0x11c>)
    bc0c:	4c19      	ldr	r4, [pc, #100]	; (bc74 <spi_data_read+0x120>)
    bc0e:	47a0      	blx	r4
    bc10:	ab04      	add	r3, sp, #16
    bc12:	78d9      	ldrb	r1, [r3, #3]
    bc14:	481d      	ldr	r0, [pc, #116]	; (bc8c <spi_data_read+0x138>)
    bc16:	47a0      	blx	r4
    bc18:	200d      	movs	r0, #13
    bc1a:	4b19      	ldr	r3, [pc, #100]	; (bc80 <spi_data_read+0x12c>)
    bc1c:	4798      	blx	r3
			break;
    bc1e:	e7b9      	b.n	bb94 <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    bc20:	22c5      	movs	r2, #197	; 0xc5
    bc22:	0092      	lsls	r2, r2, #2
    bc24:	4911      	ldr	r1, [pc, #68]	; (bc6c <spi_data_read+0x118>)
    bc26:	4812      	ldr	r0, [pc, #72]	; (bc70 <spi_data_read+0x11c>)
    bc28:	4b12      	ldr	r3, [pc, #72]	; (bc74 <spi_data_read+0x120>)
    bc2a:	4798      	blx	r3
    bc2c:	4818      	ldr	r0, [pc, #96]	; (bc90 <spi_data_read+0x13c>)
    bc2e:	4b13      	ldr	r3, [pc, #76]	; (bc7c <spi_data_read+0x128>)
    bc30:	4798      	blx	r3
    bc32:	200d      	movs	r0, #13
    bc34:	4b12      	ldr	r3, [pc, #72]	; (bc80 <spi_data_read+0x12c>)
    bc36:	4798      	blx	r3
			break;
    bc38:	e7ac      	b.n	bb94 <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    bc3a:	2102      	movs	r1, #2
    bc3c:	a805      	add	r0, sp, #20
    bc3e:	4b09      	ldr	r3, [pc, #36]	; (bc64 <spi_data_read+0x110>)
    bc40:	4798      	blx	r3
    bc42:	2800      	cmp	r0, #0
    bc44:	d0bf      	beq.n	bbc6 <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    bc46:	4a13      	ldr	r2, [pc, #76]	; (bc94 <spi_data_read+0x140>)
    bc48:	4908      	ldr	r1, [pc, #32]	; (bc6c <spi_data_read+0x118>)
    bc4a:	4809      	ldr	r0, [pc, #36]	; (bc70 <spi_data_read+0x11c>)
    bc4c:	4b09      	ldr	r3, [pc, #36]	; (bc74 <spi_data_read+0x120>)
    bc4e:	4798      	blx	r3
    bc50:	4811      	ldr	r0, [pc, #68]	; (bc98 <spi_data_read+0x144>)
    bc52:	4b0a      	ldr	r3, [pc, #40]	; (bc7c <spi_data_read+0x128>)
    bc54:	4798      	blx	r3
    bc56:	200d      	movs	r0, #13
    bc58:	4b09      	ldr	r3, [pc, #36]	; (bc80 <spi_data_read+0x12c>)
    bc5a:	4798      	blx	r3
					result = N_FAIL;
    bc5c:	0025      	movs	r5, r4
					break;
    bc5e:	e799      	b.n	bb94 <spi_data_read+0x40>
    bc60:	2501      	movs	r5, #1
    bc62:	e797      	b.n	bb94 <spi_data_read+0x40>
    bc64:	0000ba61 	.word	0x0000ba61
    bc68:	000002ff 	.word	0x000002ff
    bc6c:	00013824 	.word	0x00013824
    bc70:	0001313c 	.word	0x0001313c
    bc74:	00011941 	.word	0x00011941
    bc78:	00013cf0 	.word	0x00013cf0
    bc7c:	00011a5d 	.word	0x00011a5d
    bc80:	00011975 	.word	0x00011975
    bc84:	2000023c 	.word	0x2000023c
    bc88:	0000030b 	.word	0x0000030b
    bc8c:	00013d24 	.word	0x00013d24
    bc90:	00013d54 	.word	0x00013d54
    bc94:	0000031f 	.word	0x0000031f
    bc98:	00013d84 	.word	0x00013d84

0000bc9c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    bc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc9e:	46d6      	mov	lr, sl
    bca0:	464f      	mov	r7, r9
    bca2:	4646      	mov	r6, r8
    bca4:	b5c0      	push	{r6, r7, lr}
    bca6:	b086      	sub	sp, #24
    bca8:	9003      	str	r0, [sp, #12]
    bcaa:	9104      	str	r1, [sp, #16]
    bcac:	2830      	cmp	r0, #48	; 0x30
    bcae:	d80f      	bhi.n	bcd0 <spi_write_reg+0x34>
    bcb0:	4b30      	ldr	r3, [pc, #192]	; (bd74 <spi_write_reg+0xd8>)
    bcb2:	781f      	ldrb	r7, [r3, #0]
    bcb4:	b2fb      	uxtb	r3, r7
    bcb6:	9305      	str	r3, [sp, #20]
    bcb8:	2300      	movs	r3, #0
    bcba:	2230      	movs	r2, #48	; 0x30
    bcbc:	9903      	ldr	r1, [sp, #12]
    bcbe:	428a      	cmp	r2, r1
    bcc0:	415b      	adcs	r3, r3
    bcc2:	b2db      	uxtb	r3, r3
    bcc4:	469a      	mov	sl, r3
    bcc6:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    bcc8:	4b2b      	ldr	r3, [pc, #172]	; (bd78 <spi_write_reg+0xdc>)
    bcca:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    bccc:	46d1      	mov	r9, sl
    bcce:	e033      	b.n	bd38 <spi_write_reg+0x9c>
    bcd0:	4b2a      	ldr	r3, [pc, #168]	; (bd7c <spi_write_reg+0xe0>)
    bcd2:	781f      	ldrb	r7, [r3, #0]
    bcd4:	e7ee      	b.n	bcb4 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    bcd6:	9805      	ldr	r0, [sp, #20]
    bcd8:	4b29      	ldr	r3, [pc, #164]	; (bd80 <spi_write_reg+0xe4>)
    bcda:	4798      	blx	r3
    bcdc:	0004      	movs	r4, r0
	if (result != N_OK) {
    bcde:	2801      	cmp	r0, #1
    bce0:	d041      	beq.n	bd66 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    bce2:	22e7      	movs	r2, #231	; 0xe7
    bce4:	0092      	lsls	r2, r2, #2
    bce6:	4927      	ldr	r1, [pc, #156]	; (bd84 <spi_write_reg+0xe8>)
    bce8:	4827      	ldr	r0, [pc, #156]	; (bd88 <spi_write_reg+0xec>)
    bcea:	4e28      	ldr	r6, [pc, #160]	; (bd8c <spi_write_reg+0xf0>)
    bcec:	47b0      	blx	r6
    bcee:	9903      	ldr	r1, [sp, #12]
    bcf0:	4827      	ldr	r0, [pc, #156]	; (bd90 <spi_write_reg+0xf4>)
    bcf2:	47b0      	blx	r6
    bcf4:	200d      	movs	r0, #13
    bcf6:	4b27      	ldr	r3, [pc, #156]	; (bd94 <spi_write_reg+0xf8>)
    bcf8:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    bcfa:	2001      	movs	r0, #1
    bcfc:	4e26      	ldr	r6, [pc, #152]	; (bd98 <spi_write_reg+0xfc>)
    bcfe:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    bd00:	2300      	movs	r3, #0
    bd02:	9300      	str	r3, [sp, #0]
    bd04:	2200      	movs	r2, #0
    bd06:	2100      	movs	r1, #0
    bd08:	20cf      	movs	r0, #207	; 0xcf
    bd0a:	4f1b      	ldr	r7, [pc, #108]	; (bd78 <spi_write_reg+0xdc>)
    bd0c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    bd0e:	20cf      	movs	r0, #207	; 0xcf
    bd10:	4b1b      	ldr	r3, [pc, #108]	; (bd80 <spi_write_reg+0xe4>)
    bd12:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    bd14:	4a21      	ldr	r2, [pc, #132]	; (bd9c <spi_write_reg+0x100>)
    bd16:	491b      	ldr	r1, [pc, #108]	; (bd84 <spi_write_reg+0xe8>)
    bd18:	481b      	ldr	r0, [pc, #108]	; (bd88 <spi_write_reg+0xec>)
    bd1a:	4f1c      	ldr	r7, [pc, #112]	; (bd8c <spi_write_reg+0xf0>)
    bd1c:	47b8      	blx	r7
    bd1e:	9b04      	ldr	r3, [sp, #16]
    bd20:	9a03      	ldr	r2, [sp, #12]
    bd22:	0029      	movs	r1, r5
    bd24:	481e      	ldr	r0, [pc, #120]	; (bda0 <spi_write_reg+0x104>)
    bd26:	47b8      	blx	r7
    bd28:	200d      	movs	r0, #13
    bd2a:	4b1a      	ldr	r3, [pc, #104]	; (bd94 <spi_write_reg+0xf8>)
    bd2c:	4798      	blx	r3
		nm_bsp_sleep(1);
    bd2e:	2001      	movs	r0, #1
    bd30:	47b0      	blx	r6
    bd32:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    bd34:	2d00      	cmp	r5, #0
    bd36:	d016      	beq.n	bd66 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    bd38:	464b      	mov	r3, r9
    bd3a:	9300      	str	r3, [sp, #0]
    bd3c:	2304      	movs	r3, #4
    bd3e:	9a04      	ldr	r2, [sp, #16]
    bd40:	9f03      	ldr	r7, [sp, #12]
    bd42:	0039      	movs	r1, r7
    bd44:	9805      	ldr	r0, [sp, #20]
    bd46:	47c0      	blx	r8
    bd48:	0004      	movs	r4, r0
	if (result != N_OK) {
    bd4a:	2801      	cmp	r0, #1
    bd4c:	d0c3      	beq.n	bcd6 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    bd4e:	4a15      	ldr	r2, [pc, #84]	; (bda4 <spi_write_reg+0x108>)
    bd50:	490c      	ldr	r1, [pc, #48]	; (bd84 <spi_write_reg+0xe8>)
    bd52:	480d      	ldr	r0, [pc, #52]	; (bd88 <spi_write_reg+0xec>)
    bd54:	4e0d      	ldr	r6, [pc, #52]	; (bd8c <spi_write_reg+0xf0>)
    bd56:	47b0      	blx	r6
    bd58:	0039      	movs	r1, r7
    bd5a:	4813      	ldr	r0, [pc, #76]	; (bda8 <spi_write_reg+0x10c>)
    bd5c:	47b0      	blx	r6
    bd5e:	200d      	movs	r0, #13
    bd60:	4b0c      	ldr	r3, [pc, #48]	; (bd94 <spi_write_reg+0xf8>)
    bd62:	4798      	blx	r3
		goto _FAIL_;
    bd64:	e7c9      	b.n	bcfa <spi_write_reg+0x5e>
	}

	return result;
}
    bd66:	0020      	movs	r0, r4
    bd68:	b006      	add	sp, #24
    bd6a:	bc1c      	pop	{r2, r3, r4}
    bd6c:	4690      	mov	r8, r2
    bd6e:	4699      	mov	r9, r3
    bd70:	46a2      	mov	sl, r4
    bd72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd74:	000137fc 	.word	0x000137fc
    bd78:	0000b8e1 	.word	0x0000b8e1
    bd7c:	000137fd 	.word	0x000137fd
    bd80:	0000ba81 	.word	0x0000ba81
    bd84:	00013844 	.word	0x00013844
    bd88:	0001313c 	.word	0x0001313c
    bd8c:	00011941 	.word	0x00011941
    bd90:	00013e7c 	.word	0x00013e7c
    bd94:	00011975 	.word	0x00011975
    bd98:	00009d19 	.word	0x00009d19
    bd9c:	000003af 	.word	0x000003af
    bda0:	00013eb4 	.word	0x00013eb4
    bda4:	00000396 	.word	0x00000396
    bda8:	00013e50 	.word	0x00013e50

0000bdac <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    bdac:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdae:	46de      	mov	lr, fp
    bdb0:	4657      	mov	r7, sl
    bdb2:	464e      	mov	r6, r9
    bdb4:	4645      	mov	r5, r8
    bdb6:	b5e0      	push	{r5, r6, r7, lr}
    bdb8:	b087      	sub	sp, #28
    bdba:	9002      	str	r0, [sp, #8]
    bdbc:	468b      	mov	fp, r1
    bdbe:	28ff      	cmp	r0, #255	; 0xff
    bdc0:	d80f      	bhi.n	bde2 <spi_read_reg+0x36>
    bdc2:	4b41      	ldr	r3, [pc, #260]	; (bec8 <spi_read_reg+0x11c>)
    bdc4:	781f      	ldrb	r7, [r3, #0]
    bdc6:	b2fb      	uxtb	r3, r7
    bdc8:	9303      	str	r3, [sp, #12]
    bdca:	2300      	movs	r3, #0
    bdcc:	22ff      	movs	r2, #255	; 0xff
    bdce:	9902      	ldr	r1, [sp, #8]
    bdd0:	428a      	cmp	r2, r1
    bdd2:	415b      	adcs	r3, r3
    bdd4:	b2db      	uxtb	r3, r3
    bdd6:	469a      	mov	sl, r3
    bdd8:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    bdda:	4b3c      	ldr	r3, [pc, #240]	; (becc <spi_read_reg+0x120>)
    bddc:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    bdde:	46d1      	mov	r9, sl
    bde0:	e031      	b.n	be46 <spi_read_reg+0x9a>
    bde2:	4b3b      	ldr	r3, [pc, #236]	; (bed0 <spi_read_reg+0x124>)
    bde4:	781f      	ldrb	r7, [r3, #0]
    bde6:	e7ee      	b.n	bdc6 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    bde8:	9803      	ldr	r0, [sp, #12]
    bdea:	4b3a      	ldr	r3, [pc, #232]	; (bed4 <spi_read_reg+0x128>)
    bdec:	4798      	blx	r3
    bdee:	0004      	movs	r4, r0
	if (result != N_OK) {
    bdf0:	2801      	cmp	r0, #1
    bdf2:	d03f      	beq.n	be74 <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    bdf4:	4a38      	ldr	r2, [pc, #224]	; (bed8 <spi_read_reg+0x12c>)
    bdf6:	4939      	ldr	r1, [pc, #228]	; (bedc <spi_read_reg+0x130>)
    bdf8:	4839      	ldr	r0, [pc, #228]	; (bee0 <spi_read_reg+0x134>)
    bdfa:	4e3a      	ldr	r6, [pc, #232]	; (bee4 <spi_read_reg+0x138>)
    bdfc:	47b0      	blx	r6
    bdfe:	9902      	ldr	r1, [sp, #8]
    be00:	4839      	ldr	r0, [pc, #228]	; (bee8 <spi_read_reg+0x13c>)
    be02:	47b0      	blx	r6
    be04:	200d      	movs	r0, #13
    be06:	4b39      	ldr	r3, [pc, #228]	; (beec <spi_read_reg+0x140>)
    be08:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    be0a:	2001      	movs	r0, #1
    be0c:	4e38      	ldr	r6, [pc, #224]	; (bef0 <spi_read_reg+0x144>)
    be0e:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    be10:	2300      	movs	r3, #0
    be12:	9300      	str	r3, [sp, #0]
    be14:	2200      	movs	r2, #0
    be16:	2100      	movs	r1, #0
    be18:	20cf      	movs	r0, #207	; 0xcf
    be1a:	4f2c      	ldr	r7, [pc, #176]	; (becc <spi_read_reg+0x120>)
    be1c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    be1e:	20cf      	movs	r0, #207	; 0xcf
    be20:	4b2c      	ldr	r3, [pc, #176]	; (bed4 <spi_read_reg+0x128>)
    be22:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    be24:	4a33      	ldr	r2, [pc, #204]	; (bef4 <spi_read_reg+0x148>)
    be26:	492d      	ldr	r1, [pc, #180]	; (bedc <spi_read_reg+0x130>)
    be28:	482d      	ldr	r0, [pc, #180]	; (bee0 <spi_read_reg+0x134>)
    be2a:	4f2e      	ldr	r7, [pc, #184]	; (bee4 <spi_read_reg+0x138>)
    be2c:	47b8      	blx	r7
    be2e:	9a02      	ldr	r2, [sp, #8]
    be30:	0029      	movs	r1, r5
    be32:	4831      	ldr	r0, [pc, #196]	; (bef8 <spi_read_reg+0x14c>)
    be34:	47b8      	blx	r7
    be36:	200d      	movs	r0, #13
    be38:	4b2c      	ldr	r3, [pc, #176]	; (beec <spi_read_reg+0x140>)
    be3a:	4798      	blx	r3
		nm_bsp_sleep(1);
    be3c:	2001      	movs	r0, #1
    be3e:	47b0      	blx	r6
    be40:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    be42:	2d00      	cmp	r5, #0
    be44:	d037      	beq.n	beb6 <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    be46:	464b      	mov	r3, r9
    be48:	9300      	str	r3, [sp, #0]
    be4a:	2304      	movs	r3, #4
    be4c:	2200      	movs	r2, #0
    be4e:	9f02      	ldr	r7, [sp, #8]
    be50:	0039      	movs	r1, r7
    be52:	9803      	ldr	r0, [sp, #12]
    be54:	47c0      	blx	r8
    be56:	0004      	movs	r4, r0
	if (result != N_OK) {
    be58:	2801      	cmp	r0, #1
    be5a:	d0c5      	beq.n	bde8 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    be5c:	4a27      	ldr	r2, [pc, #156]	; (befc <spi_read_reg+0x150>)
    be5e:	491f      	ldr	r1, [pc, #124]	; (bedc <spi_read_reg+0x130>)
    be60:	481f      	ldr	r0, [pc, #124]	; (bee0 <spi_read_reg+0x134>)
    be62:	4e20      	ldr	r6, [pc, #128]	; (bee4 <spi_read_reg+0x138>)
    be64:	47b0      	blx	r6
    be66:	0039      	movs	r1, r7
    be68:	4825      	ldr	r0, [pc, #148]	; (bf00 <spi_read_reg+0x154>)
    be6a:	47b0      	blx	r6
    be6c:	200d      	movs	r0, #13
    be6e:	4b1f      	ldr	r3, [pc, #124]	; (beec <spi_read_reg+0x140>)
    be70:	4798      	blx	r3
		goto _FAIL_;
    be72:	e7ca      	b.n	be0a <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    be74:	464a      	mov	r2, r9
    be76:	2104      	movs	r1, #4
    be78:	a805      	add	r0, sp, #20
    be7a:	4b22      	ldr	r3, [pc, #136]	; (bf04 <spi_read_reg+0x158>)
    be7c:	4798      	blx	r3
    be7e:	0004      	movs	r4, r0
	if (result != N_OK) {
    be80:	2801      	cmp	r0, #1
    be82:	d00b      	beq.n	be9c <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    be84:	4a20      	ldr	r2, [pc, #128]	; (bf08 <spi_read_reg+0x15c>)
    be86:	4915      	ldr	r1, [pc, #84]	; (bedc <spi_read_reg+0x130>)
    be88:	4815      	ldr	r0, [pc, #84]	; (bee0 <spi_read_reg+0x134>)
    be8a:	4b16      	ldr	r3, [pc, #88]	; (bee4 <spi_read_reg+0x138>)
    be8c:	4798      	blx	r3
    be8e:	481f      	ldr	r0, [pc, #124]	; (bf0c <spi_read_reg+0x160>)
    be90:	4b1f      	ldr	r3, [pc, #124]	; (bf10 <spi_read_reg+0x164>)
    be92:	4798      	blx	r3
    be94:	200d      	movs	r0, #13
    be96:	4b15      	ldr	r3, [pc, #84]	; (beec <spi_read_reg+0x140>)
    be98:	4798      	blx	r3
		goto _FAIL_;
    be9a:	e7b6      	b.n	be0a <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    be9c:	aa05      	add	r2, sp, #20
    be9e:	7853      	ldrb	r3, [r2, #1]
    bea0:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    bea2:	7891      	ldrb	r1, [r2, #2]
    bea4:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    bea6:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    bea8:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    beaa:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    beac:	78d2      	ldrb	r2, [r2, #3]
    beae:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    beb0:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    beb2:	465a      	mov	r2, fp
    beb4:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    beb6:	0020      	movs	r0, r4
    beb8:	b007      	add	sp, #28
    beba:	bc3c      	pop	{r2, r3, r4, r5}
    bebc:	4690      	mov	r8, r2
    bebe:	4699      	mov	r9, r3
    bec0:	46a2      	mov	sl, r4
    bec2:	46ab      	mov	fp, r5
    bec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bec6:	46c0      	nop			; (mov r8, r8)
    bec8:	000137fe 	.word	0x000137fe
    becc:	0000b8e1 	.word	0x0000b8e1
    bed0:	000137ff 	.word	0x000137ff
    bed4:	0000ba81 	.word	0x0000ba81
    bed8:	0000041d 	.word	0x0000041d
    bedc:	00013864 	.word	0x00013864
    bee0:	0001313c 	.word	0x0001313c
    bee4:	00011941 	.word	0x00011941
    bee8:	00013de4 	.word	0x00013de4
    beec:	00011975 	.word	0x00011975
    bef0:	00009d19 	.word	0x00009d19
    bef4:	0000043c 	.word	0x0000043c
    bef8:	00013e38 	.word	0x00013e38
    befc:	00000417 	.word	0x00000417
    bf00:	00013db8 	.word	0x00013db8
    bf04:	0000bb55 	.word	0x0000bb55
    bf08:	00000424 	.word	0x00000424
    bf0c:	00013e18 	.word	0x00013e18
    bf10:	00011a5d 	.word	0x00011a5d

0000bf14 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    bf14:	b510      	push	{r4, lr}
    bf16:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    bf18:	2300      	movs	r3, #0
    bf1a:	9300      	str	r3, [sp, #0]
    bf1c:	2200      	movs	r2, #0
    bf1e:	2100      	movs	r1, #0
    bf20:	20cf      	movs	r0, #207	; 0xcf
    bf22:	4c04      	ldr	r4, [pc, #16]	; (bf34 <nm_spi_reset+0x20>)
    bf24:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    bf26:	20cf      	movs	r0, #207	; 0xcf
    bf28:	4b03      	ldr	r3, [pc, #12]	; (bf38 <nm_spi_reset+0x24>)
    bf2a:	4798      	blx	r3
	return M2M_SUCCESS;
}
    bf2c:	2000      	movs	r0, #0
    bf2e:	b002      	add	sp, #8
    bf30:	bd10      	pop	{r4, pc}
    bf32:	46c0      	nop			; (mov r8, r8)
    bf34:	0000b8e1 	.word	0x0000b8e1
    bf38:	0000ba81 	.word	0x0000ba81

0000bf3c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    bf3c:	2200      	movs	r2, #0
    bf3e:	4b02      	ldr	r3, [pc, #8]	; (bf48 <nm_spi_deinit+0xc>)
    bf40:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    bf42:	2000      	movs	r0, #0
    bf44:	4770      	bx	lr
    bf46:	46c0      	nop			; (mov r8, r8)
    bf48:	2000023c 	.word	0x2000023c

0000bf4c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    bf4c:	b500      	push	{lr}
    bf4e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    bf50:	a901      	add	r1, sp, #4
    bf52:	4b02      	ldr	r3, [pc, #8]	; (bf5c <nm_spi_read_reg+0x10>)
    bf54:	4798      	blx	r3

	return u32Val;
}
    bf56:	9801      	ldr	r0, [sp, #4]
    bf58:	b003      	add	sp, #12
    bf5a:	bd00      	pop	{pc}
    bf5c:	0000bdad 	.word	0x0000bdad

0000bf60 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    bf60:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    bf62:	4b04      	ldr	r3, [pc, #16]	; (bf74 <nm_spi_read_reg_with_ret+0x14>)
    bf64:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    bf66:	2300      	movs	r3, #0
    bf68:	2801      	cmp	r0, #1
    bf6a:	d101      	bne.n	bf70 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    bf6c:	0018      	movs	r0, r3
    bf6e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    bf70:	3b06      	subs	r3, #6
    bf72:	e7fb      	b.n	bf6c <nm_spi_read_reg_with_ret+0xc>
    bf74:	0000bdad 	.word	0x0000bdad

0000bf78 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    bf78:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    bf7a:	4b04      	ldr	r3, [pc, #16]	; (bf8c <nm_spi_write_reg+0x14>)
    bf7c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    bf7e:	2300      	movs	r3, #0
    bf80:	2801      	cmp	r0, #1
    bf82:	d101      	bne.n	bf88 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    bf84:	0018      	movs	r0, r3
    bf86:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    bf88:	3b06      	subs	r3, #6
    bf8a:	e7fb      	b.n	bf84 <nm_spi_write_reg+0xc>
    bf8c:	0000bc9d 	.word	0x0000bc9d

0000bf90 <nm_spi_init>:
{
    bf90:	b510      	push	{r4, lr}
    bf92:	b082      	sub	sp, #8
	uint32 reg = 0;
    bf94:	2300      	movs	r3, #0
    bf96:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    bf98:	4a35      	ldr	r2, [pc, #212]	; (c070 <nm_spi_init+0xe0>)
    bf9a:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    bf9c:	4669      	mov	r1, sp
    bf9e:	4835      	ldr	r0, [pc, #212]	; (c074 <nm_spi_init+0xe4>)
    bfa0:	4b35      	ldr	r3, [pc, #212]	; (c078 <nm_spi_init+0xe8>)
    bfa2:	4798      	blx	r3
    bfa4:	2800      	cmp	r0, #0
    bfa6:	d028      	beq.n	bffa <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    bfa8:	4b31      	ldr	r3, [pc, #196]	; (c070 <nm_spi_init+0xe0>)
    bfaa:	781b      	ldrb	r3, [r3, #0]
    bfac:	2b00      	cmp	r3, #0
    bfae:	d10d      	bne.n	bfcc <nm_spi_init+0x3c>
		reg &= ~0x70;
    bfb0:	337c      	adds	r3, #124	; 0x7c
    bfb2:	9900      	ldr	r1, [sp, #0]
    bfb4:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    bfb6:	3b2c      	subs	r3, #44	; 0x2c
    bfb8:	4319      	orrs	r1, r3
    bfba:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    bfbc:	482d      	ldr	r0, [pc, #180]	; (c074 <nm_spi_init+0xe4>)
    bfbe:	4b2f      	ldr	r3, [pc, #188]	; (c07c <nm_spi_init+0xec>)
    bfc0:	4798      	blx	r3
    bfc2:	1e04      	subs	r4, r0, #0
    bfc4:	d039      	beq.n	c03a <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    bfc6:	2201      	movs	r2, #1
    bfc8:	4b29      	ldr	r3, [pc, #164]	; (c070 <nm_spi_init+0xe0>)
    bfca:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    bfcc:	a901      	add	r1, sp, #4
    bfce:	2080      	movs	r0, #128	; 0x80
    bfd0:	0140      	lsls	r0, r0, #5
    bfd2:	4b29      	ldr	r3, [pc, #164]	; (c078 <nm_spi_init+0xe8>)
    bfd4:	4798      	blx	r3
    bfd6:	2800      	cmp	r0, #0
    bfd8:	d03b      	beq.n	c052 <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    bfda:	4c26      	ldr	r4, [pc, #152]	; (c074 <nm_spi_init+0xe4>)
    bfdc:	0020      	movs	r0, r4
    bfde:	4b28      	ldr	r3, [pc, #160]	; (c080 <nm_spi_init+0xf0>)
    bfe0:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    bfe2:	2370      	movs	r3, #112	; 0x70
    bfe4:	0001      	movs	r1, r0
    bfe6:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    bfe8:	2050      	movs	r0, #80	; 0x50
    bfea:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    bfec:	0020      	movs	r0, r4
    bfee:	4b25      	ldr	r3, [pc, #148]	; (c084 <nm_spi_init+0xf4>)
    bff0:	4798      	blx	r3
	return M2M_SUCCESS;
    bff2:	2400      	movs	r4, #0
}
    bff4:	0020      	movs	r0, r4
    bff6:	b002      	add	sp, #8
    bff8:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    bffa:	2201      	movs	r2, #1
    bffc:	4b1c      	ldr	r3, [pc, #112]	; (c070 <nm_spi_init+0xe0>)
    bffe:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    c000:	4a21      	ldr	r2, [pc, #132]	; (c088 <nm_spi_init+0xf8>)
    c002:	4922      	ldr	r1, [pc, #136]	; (c08c <nm_spi_init+0xfc>)
    c004:	4822      	ldr	r0, [pc, #136]	; (c090 <nm_spi_init+0x100>)
    c006:	4b23      	ldr	r3, [pc, #140]	; (c094 <nm_spi_init+0x104>)
    c008:	4798      	blx	r3
    c00a:	4823      	ldr	r0, [pc, #140]	; (c098 <nm_spi_init+0x108>)
    c00c:	4b23      	ldr	r3, [pc, #140]	; (c09c <nm_spi_init+0x10c>)
    c00e:	4798      	blx	r3
    c010:	200d      	movs	r0, #13
    c012:	4b23      	ldr	r3, [pc, #140]	; (c0a0 <nm_spi_init+0x110>)
    c014:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    c016:	4669      	mov	r1, sp
    c018:	4816      	ldr	r0, [pc, #88]	; (c074 <nm_spi_init+0xe4>)
    c01a:	4b17      	ldr	r3, [pc, #92]	; (c078 <nm_spi_init+0xe8>)
    c01c:	4798      	blx	r3
    c01e:	1e04      	subs	r4, r0, #0
    c020:	d1c2      	bne.n	bfa8 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    c022:	4a20      	ldr	r2, [pc, #128]	; (c0a4 <nm_spi_init+0x114>)
    c024:	4919      	ldr	r1, [pc, #100]	; (c08c <nm_spi_init+0xfc>)
    c026:	481a      	ldr	r0, [pc, #104]	; (c090 <nm_spi_init+0x100>)
    c028:	4b1a      	ldr	r3, [pc, #104]	; (c094 <nm_spi_init+0x104>)
    c02a:	4798      	blx	r3
    c02c:	481e      	ldr	r0, [pc, #120]	; (c0a8 <nm_spi_init+0x118>)
    c02e:	4b1b      	ldr	r3, [pc, #108]	; (c09c <nm_spi_init+0x10c>)
    c030:	4798      	blx	r3
    c032:	200d      	movs	r0, #13
    c034:	4b1a      	ldr	r3, [pc, #104]	; (c0a0 <nm_spi_init+0x110>)
    c036:	4798      	blx	r3
			return 0;
    c038:	e7dc      	b.n	bff4 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    c03a:	4a1c      	ldr	r2, [pc, #112]	; (c0ac <nm_spi_init+0x11c>)
    c03c:	4913      	ldr	r1, [pc, #76]	; (c08c <nm_spi_init+0xfc>)
    c03e:	4814      	ldr	r0, [pc, #80]	; (c090 <nm_spi_init+0x100>)
    c040:	4b14      	ldr	r3, [pc, #80]	; (c094 <nm_spi_init+0x104>)
    c042:	4798      	blx	r3
    c044:	481a      	ldr	r0, [pc, #104]	; (c0b0 <nm_spi_init+0x120>)
    c046:	4b15      	ldr	r3, [pc, #84]	; (c09c <nm_spi_init+0x10c>)
    c048:	4798      	blx	r3
    c04a:	200d      	movs	r0, #13
    c04c:	4b14      	ldr	r3, [pc, #80]	; (c0a0 <nm_spi_init+0x110>)
    c04e:	4798      	blx	r3
			return 0;
    c050:	e7d0      	b.n	bff4 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    c052:	4a18      	ldr	r2, [pc, #96]	; (c0b4 <nm_spi_init+0x124>)
    c054:	490d      	ldr	r1, [pc, #52]	; (c08c <nm_spi_init+0xfc>)
    c056:	480e      	ldr	r0, [pc, #56]	; (c090 <nm_spi_init+0x100>)
    c058:	4b0e      	ldr	r3, [pc, #56]	; (c094 <nm_spi_init+0x104>)
    c05a:	4798      	blx	r3
    c05c:	4816      	ldr	r0, [pc, #88]	; (c0b8 <nm_spi_init+0x128>)
    c05e:	4b0f      	ldr	r3, [pc, #60]	; (c09c <nm_spi_init+0x10c>)
    c060:	4798      	blx	r3
    c062:	200d      	movs	r0, #13
    c064:	4b0e      	ldr	r3, [pc, #56]	; (c0a0 <nm_spi_init+0x110>)
    c066:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    c068:	2406      	movs	r4, #6
    c06a:	4264      	negs	r4, r4
    c06c:	e7c2      	b.n	bff4 <nm_spi_init+0x64>
    c06e:	46c0      	nop			; (mov r8, r8)
    c070:	2000023c 	.word	0x2000023c
    c074:	0000e824 	.word	0x0000e824
    c078:	0000bdad 	.word	0x0000bdad
    c07c:	0000bc9d 	.word	0x0000bc9d
    c080:	0000bf4d 	.word	0x0000bf4d
    c084:	0000bf79 	.word	0x0000bf79
    c088:	000004c7 	.word	0x000004c7
    c08c:	00013880 	.word	0x00013880
    c090:	0001313c 	.word	0x0001313c
    c094:	00011941 	.word	0x00011941
    c098:	0001398c 	.word	0x0001398c
    c09c:	00011a5d 	.word	0x00011a5d
    c0a0:	00011975 	.word	0x00011975
    c0a4:	000004ca 	.word	0x000004ca
    c0a8:	000139dc 	.word	0x000139dc
    c0ac:	000004d4 	.word	0x000004d4
    c0b0:	00013a08 	.word	0x00013a08
    c0b4:	000004de 	.word	0x000004de
    c0b8:	00013a3c 	.word	0x00013a3c

0000c0bc <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    c0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0be:	46de      	mov	lr, fp
    c0c0:	4657      	mov	r7, sl
    c0c2:	464e      	mov	r6, r9
    c0c4:	4645      	mov	r5, r8
    c0c6:	b5e0      	push	{r5, r6, r7, lr}
    c0c8:	b087      	sub	sp, #28
    c0ca:	9002      	str	r0, [sp, #8]
    c0cc:	9103      	str	r1, [sp, #12]
    c0ce:	0016      	movs	r6, r2
    c0d0:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    c0d2:	2300      	movs	r3, #0
    c0d4:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    c0d6:	2400      	movs	r4, #0
    c0d8:	4b3e      	ldr	r3, [pc, #248]	; (c1d4 <nm_spi_read_block+0x118>)
    c0da:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    c0dc:	46a9      	mov	r9, r5
    c0de:	e037      	b.n	c150 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    c0e0:	2301      	movs	r3, #1
    c0e2:	469b      	mov	fp, r3
		size = 2;
    c0e4:	3601      	adds	r6, #1
    c0e6:	e035      	b.n	c154 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    c0e8:	20c8      	movs	r0, #200	; 0xc8
    c0ea:	4b3b      	ldr	r3, [pc, #236]	; (c1d8 <nm_spi_read_block+0x11c>)
    c0ec:	4798      	blx	r3
	if (result != N_OK) {
    c0ee:	2801      	cmp	r0, #1
    c0f0:	d045      	beq.n	c17e <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    c0f2:	4a3a      	ldr	r2, [pc, #232]	; (c1dc <nm_spi_read_block+0x120>)
    c0f4:	493a      	ldr	r1, [pc, #232]	; (c1e0 <nm_spi_read_block+0x124>)
    c0f6:	483b      	ldr	r0, [pc, #236]	; (c1e4 <nm_spi_read_block+0x128>)
    c0f8:	4f3b      	ldr	r7, [pc, #236]	; (c1e8 <nm_spi_read_block+0x12c>)
    c0fa:	47b8      	blx	r7
    c0fc:	9902      	ldr	r1, [sp, #8]
    c0fe:	483b      	ldr	r0, [pc, #236]	; (c1ec <nm_spi_read_block+0x130>)
    c100:	47b8      	blx	r7
    c102:	200d      	movs	r0, #13
    c104:	4b3a      	ldr	r3, [pc, #232]	; (c1f0 <nm_spi_read_block+0x134>)
    c106:	4798      	blx	r3
		nm_bsp_sleep(1);
    c108:	2001      	movs	r0, #1
    c10a:	4f3a      	ldr	r7, [pc, #232]	; (c1f4 <nm_spi_read_block+0x138>)
    c10c:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c10e:	9400      	str	r4, [sp, #0]
    c110:	0023      	movs	r3, r4
    c112:	0022      	movs	r2, r4
    c114:	0021      	movs	r1, r4
    c116:	20cf      	movs	r0, #207	; 0xcf
    c118:	4d2e      	ldr	r5, [pc, #184]	; (c1d4 <nm_spi_read_block+0x118>)
    c11a:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    c11c:	20cf      	movs	r0, #207	; 0xcf
    c11e:	4b2e      	ldr	r3, [pc, #184]	; (c1d8 <nm_spi_read_block+0x11c>)
    c120:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    c122:	4a35      	ldr	r2, [pc, #212]	; (c1f8 <nm_spi_read_block+0x13c>)
    c124:	492e      	ldr	r1, [pc, #184]	; (c1e0 <nm_spi_read_block+0x124>)
    c126:	482f      	ldr	r0, [pc, #188]	; (c1e4 <nm_spi_read_block+0x128>)
    c128:	4b2f      	ldr	r3, [pc, #188]	; (c1e8 <nm_spi_read_block+0x12c>)
    c12a:	469a      	mov	sl, r3
    c12c:	4798      	blx	r3
    c12e:	0033      	movs	r3, r6
    c130:	9a02      	ldr	r2, [sp, #8]
    c132:	4649      	mov	r1, r9
    c134:	4831      	ldr	r0, [pc, #196]	; (c1fc <nm_spi_read_block+0x140>)
    c136:	47d0      	blx	sl
    c138:	200d      	movs	r0, #13
    c13a:	4b2d      	ldr	r3, [pc, #180]	; (c1f0 <nm_spi_read_block+0x134>)
    c13c:	4798      	blx	r3
		nm_bsp_sleep(1);
    c13e:	2001      	movs	r0, #1
    c140:	47b8      	blx	r7
    c142:	2301      	movs	r3, #1
    c144:	425b      	negs	r3, r3
    c146:	469c      	mov	ip, r3
    c148:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    c14a:	464b      	mov	r3, r9
    c14c:	2b00      	cmp	r3, #0
    c14e:	d038      	beq.n	c1c2 <nm_spi_read_block+0x106>
	if (size == 1)
    c150:	2e01      	cmp	r6, #1
    c152:	d0c5      	beq.n	c0e0 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    c154:	9400      	str	r4, [sp, #0]
    c156:	0033      	movs	r3, r6
    c158:	0022      	movs	r2, r4
    c15a:	9d02      	ldr	r5, [sp, #8]
    c15c:	0029      	movs	r1, r5
    c15e:	20c8      	movs	r0, #200	; 0xc8
    c160:	47c0      	blx	r8
	if (result != N_OK) {
    c162:	2801      	cmp	r0, #1
    c164:	d0c0      	beq.n	c0e8 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    c166:	4a26      	ldr	r2, [pc, #152]	; (c200 <nm_spi_read_block+0x144>)
    c168:	491d      	ldr	r1, [pc, #116]	; (c1e0 <nm_spi_read_block+0x124>)
    c16a:	481e      	ldr	r0, [pc, #120]	; (c1e4 <nm_spi_read_block+0x128>)
    c16c:	4f1e      	ldr	r7, [pc, #120]	; (c1e8 <nm_spi_read_block+0x12c>)
    c16e:	47b8      	blx	r7
    c170:	0029      	movs	r1, r5
    c172:	4824      	ldr	r0, [pc, #144]	; (c204 <nm_spi_read_block+0x148>)
    c174:	47b8      	blx	r7
    c176:	200d      	movs	r0, #13
    c178:	4b1d      	ldr	r3, [pc, #116]	; (c1f0 <nm_spi_read_block+0x134>)
    c17a:	4798      	blx	r3
    c17c:	e7c4      	b.n	c108 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    c17e:	465b      	mov	r3, fp
    c180:	2b00      	cmp	r3, #0
    c182:	d016      	beq.n	c1b2 <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    c184:	af05      	add	r7, sp, #20
    c186:	0022      	movs	r2, r4
    c188:	0031      	movs	r1, r6
    c18a:	0038      	movs	r0, r7
    c18c:	4b1e      	ldr	r3, [pc, #120]	; (c208 <nm_spi_read_block+0x14c>)
    c18e:	4798      	blx	r3
		buf[0] = tmp[0];
    c190:	783b      	ldrb	r3, [r7, #0]
    c192:	9a03      	ldr	r2, [sp, #12]
    c194:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    c196:	2801      	cmp	r0, #1
    c198:	d011      	beq.n	c1be <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    c19a:	4a1c      	ldr	r2, [pc, #112]	; (c20c <nm_spi_read_block+0x150>)
    c19c:	4910      	ldr	r1, [pc, #64]	; (c1e0 <nm_spi_read_block+0x124>)
    c19e:	4811      	ldr	r0, [pc, #68]	; (c1e4 <nm_spi_read_block+0x128>)
    c1a0:	4b11      	ldr	r3, [pc, #68]	; (c1e8 <nm_spi_read_block+0x12c>)
    c1a2:	4798      	blx	r3
    c1a4:	481a      	ldr	r0, [pc, #104]	; (c210 <nm_spi_read_block+0x154>)
    c1a6:	4b1b      	ldr	r3, [pc, #108]	; (c214 <nm_spi_read_block+0x158>)
    c1a8:	4798      	blx	r3
    c1aa:	200d      	movs	r0, #13
    c1ac:	4b10      	ldr	r3, [pc, #64]	; (c1f0 <nm_spi_read_block+0x134>)
    c1ae:	4798      	blx	r3
    c1b0:	e7aa      	b.n	c108 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    c1b2:	0022      	movs	r2, r4
    c1b4:	0031      	movs	r1, r6
    c1b6:	9803      	ldr	r0, [sp, #12]
    c1b8:	4b13      	ldr	r3, [pc, #76]	; (c208 <nm_spi_read_block+0x14c>)
    c1ba:	4798      	blx	r3
    c1bc:	e7eb      	b.n	c196 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c1be:	2000      	movs	r0, #0
    c1c0:	e001      	b.n	c1c6 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c1c2:	2006      	movs	r0, #6
    c1c4:	4240      	negs	r0, r0

	return s8Ret;
}
    c1c6:	b007      	add	sp, #28
    c1c8:	bc3c      	pop	{r2, r3, r4, r5}
    c1ca:	4690      	mov	r8, r2
    c1cc:	4699      	mov	r9, r3
    c1ce:	46a2      	mov	sl, r4
    c1d0:	46ab      	mov	fp, r5
    c1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1d4:	0000b8e1 	.word	0x0000b8e1
    c1d8:	0000ba81 	.word	0x0000ba81
    c1dc:	00000463 	.word	0x00000463
    c1e0:	00013874 	.word	0x00013874
    c1e4:	0001313c 	.word	0x0001313c
    c1e8:	00011941 	.word	0x00011941
    c1ec:	00013a90 	.word	0x00013a90
    c1f0:	00011975 	.word	0x00011975
    c1f4:	00009d19 	.word	0x00009d19
    c1f8:	00000484 	.word	0x00000484
    c1fc:	00013af0 	.word	0x00013af0
    c200:	0000045d 	.word	0x0000045d
    c204:	00013a60 	.word	0x00013a60
    c208:	0000bb55 	.word	0x0000bb55
    c20c:	00000473 	.word	0x00000473
    c210:	00013ac8 	.word	0x00013ac8
    c214:	00011a5d 	.word	0x00011a5d

0000c218 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    c218:	b5f0      	push	{r4, r5, r6, r7, lr}
    c21a:	46de      	mov	lr, fp
    c21c:	4647      	mov	r7, r8
    c21e:	b580      	push	{r7, lr}
    c220:	b089      	sub	sp, #36	; 0x24
    c222:	9004      	str	r0, [sp, #16]
    c224:	468b      	mov	fp, r1
    c226:	9203      	str	r2, [sp, #12]
    c228:	260a      	movs	r6, #10
    c22a:	2780      	movs	r7, #128	; 0x80
    c22c:	01bf      	lsls	r7, r7, #6
    c22e:	466b      	mov	r3, sp
    c230:	82df      	strh	r7, [r3, #22]
    c232:	0035      	movs	r5, r6
    c234:	e02d      	b.n	c292 <nm_spi_write_block+0x7a>
		size = 2;
    c236:	3301      	adds	r3, #1
    c238:	9303      	str	r3, [sp, #12]
    c23a:	e02d      	b.n	c298 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    c23c:	4a83      	ldr	r2, [pc, #524]	; (c44c <nm_spi_write_block+0x234>)
    c23e:	4984      	ldr	r1, [pc, #528]	; (c450 <nm_spi_write_block+0x238>)
    c240:	4884      	ldr	r0, [pc, #528]	; (c454 <nm_spi_write_block+0x23c>)
    c242:	4c85      	ldr	r4, [pc, #532]	; (c458 <nm_spi_write_block+0x240>)
    c244:	47a0      	blx	r4
    c246:	0031      	movs	r1, r6
    c248:	4884      	ldr	r0, [pc, #528]	; (c45c <nm_spi_write_block+0x244>)
    c24a:	47a0      	blx	r4
    c24c:	200d      	movs	r0, #13
    c24e:	4b84      	ldr	r3, [pc, #528]	; (c460 <nm_spi_write_block+0x248>)
    c250:	4798      	blx	r3
		nm_bsp_sleep(1);
    c252:	2001      	movs	r0, #1
    c254:	4c83      	ldr	r4, [pc, #524]	; (c464 <nm_spi_write_block+0x24c>)
    c256:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c258:	2300      	movs	r3, #0
    c25a:	9300      	str	r3, [sp, #0]
    c25c:	2200      	movs	r2, #0
    c25e:	2100      	movs	r1, #0
    c260:	20cf      	movs	r0, #207	; 0xcf
    c262:	4e81      	ldr	r6, [pc, #516]	; (c468 <nm_spi_write_block+0x250>)
    c264:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    c266:	20cf      	movs	r0, #207	; 0xcf
    c268:	4b80      	ldr	r3, [pc, #512]	; (c46c <nm_spi_write_block+0x254>)
    c26a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    c26c:	4a80      	ldr	r2, [pc, #512]	; (c470 <nm_spi_write_block+0x258>)
    c26e:	4978      	ldr	r1, [pc, #480]	; (c450 <nm_spi_write_block+0x238>)
    c270:	4878      	ldr	r0, [pc, #480]	; (c454 <nm_spi_write_block+0x23c>)
    c272:	4e79      	ldr	r6, [pc, #484]	; (c458 <nm_spi_write_block+0x240>)
    c274:	47b0      	blx	r6
    c276:	9b03      	ldr	r3, [sp, #12]
    c278:	9a04      	ldr	r2, [sp, #16]
    c27a:	0029      	movs	r1, r5
    c27c:	487d      	ldr	r0, [pc, #500]	; (c474 <nm_spi_write_block+0x25c>)
    c27e:	47b0      	blx	r6
    c280:	200d      	movs	r0, #13
    c282:	4b77      	ldr	r3, [pc, #476]	; (c460 <nm_spi_write_block+0x248>)
    c284:	4798      	blx	r3
		nm_bsp_sleep(1);
    c286:	2001      	movs	r0, #1
    c288:	47a0      	blx	r4
    c28a:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    c28c:	2d00      	cmp	r5, #0
    c28e:	d100      	bne.n	c292 <nm_spi_write_block+0x7a>
    c290:	e0d5      	b.n	c43e <nm_spi_write_block+0x226>
	if (size == 1)
    c292:	9b03      	ldr	r3, [sp, #12]
    c294:	2b01      	cmp	r3, #1
    c296:	d0ce      	beq.n	c236 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    c298:	2300      	movs	r3, #0
    c29a:	9300      	str	r3, [sp, #0]
    c29c:	9b03      	ldr	r3, [sp, #12]
    c29e:	2200      	movs	r2, #0
    c2a0:	9e04      	ldr	r6, [sp, #16]
    c2a2:	0031      	movs	r1, r6
    c2a4:	20c7      	movs	r0, #199	; 0xc7
    c2a6:	4c70      	ldr	r4, [pc, #448]	; (c468 <nm_spi_write_block+0x250>)
    c2a8:	47a0      	blx	r4
	if (result != N_OK) {
    c2aa:	2801      	cmp	r0, #1
    c2ac:	d1c6      	bne.n	c23c <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    c2ae:	20c7      	movs	r0, #199	; 0xc7
    c2b0:	4b6e      	ldr	r3, [pc, #440]	; (c46c <nm_spi_write_block+0x254>)
    c2b2:	4798      	blx	r3
	if (result != N_OK) {
    c2b4:	2801      	cmp	r0, #1
    c2b6:	d00c      	beq.n	c2d2 <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    c2b8:	22f4      	movs	r2, #244	; 0xf4
    c2ba:	0092      	lsls	r2, r2, #2
    c2bc:	4964      	ldr	r1, [pc, #400]	; (c450 <nm_spi_write_block+0x238>)
    c2be:	4865      	ldr	r0, [pc, #404]	; (c454 <nm_spi_write_block+0x23c>)
    c2c0:	4c65      	ldr	r4, [pc, #404]	; (c458 <nm_spi_write_block+0x240>)
    c2c2:	47a0      	blx	r4
    c2c4:	9904      	ldr	r1, [sp, #16]
    c2c6:	486c      	ldr	r0, [pc, #432]	; (c478 <nm_spi_write_block+0x260>)
    c2c8:	47a0      	blx	r4
    c2ca:	200d      	movs	r0, #13
    c2cc:	4b64      	ldr	r3, [pc, #400]	; (c460 <nm_spi_write_block+0x248>)
    c2ce:	4798      	blx	r3
    c2d0:	e7bf      	b.n	c252 <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    c2d2:	2200      	movs	r2, #0
    c2d4:	ab07      	add	r3, sp, #28
    c2d6:	801a      	strh	r2, [r3, #0]
    c2d8:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    c2da:	2600      	movs	r6, #0
				order = 0x1;
    c2dc:	46a8      	mov	r8, r5
    c2de:	0035      	movs	r5, r6
    c2e0:	0026      	movs	r6, r4
    c2e2:	e021      	b.n	c328 <nm_spi_write_block+0x110>
				order = 0x2;
    c2e4:	2300      	movs	r3, #0
    c2e6:	42b7      	cmp	r7, r6
    c2e8:	415b      	adcs	r3, r3
    c2ea:	3302      	adds	r3, #2
		cmd |= order;
    c2ec:	200b      	movs	r0, #11
    c2ee:	aa04      	add	r2, sp, #16
    c2f0:	4694      	mov	ip, r2
    c2f2:	4460      	add	r0, ip
    c2f4:	2210      	movs	r2, #16
    c2f6:	4252      	negs	r2, r2
    c2f8:	4313      	orrs	r3, r2
    c2fa:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    c2fc:	2101      	movs	r1, #1
    c2fe:	4b5f      	ldr	r3, [pc, #380]	; (c47c <nm_spi_write_block+0x264>)
    c300:	4798      	blx	r3
    c302:	2800      	cmp	r0, #0
    c304:	d11d      	bne.n	c342 <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    c306:	465b      	mov	r3, fp
    c308:	1958      	adds	r0, r3, r5
    c30a:	0021      	movs	r1, r4
    c30c:	4b5b      	ldr	r3, [pc, #364]	; (c47c <nm_spi_write_block+0x264>)
    c30e:	4798      	blx	r3
    c310:	2800      	cmp	r0, #0
    c312:	d130      	bne.n	c376 <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    c314:	4b5a      	ldr	r3, [pc, #360]	; (c480 <nm_spi_write_block+0x268>)
    c316:	781b      	ldrb	r3, [r3, #0]
    c318:	2b00      	cmp	r3, #0
    c31a:	d039      	beq.n	c390 <nm_spi_write_block+0x178>
		ix += nbytes;
    c31c:	1965      	adds	r5, r4, r5
    c31e:	b22d      	sxth	r5, r5
		sz -= nbytes;
    c320:	1b36      	subs	r6, r6, r4
    c322:	b2b6      	uxth	r6, r6
	} while (sz);
    c324:	2e00      	cmp	r6, #0
    c326:	d053      	beq.n	c3d0 <nm_spi_write_block+0x1b8>
    c328:	1c34      	adds	r4, r6, #0
    c32a:	42be      	cmp	r6, r7
    c32c:	d901      	bls.n	c332 <nm_spi_write_block+0x11a>
    c32e:	466b      	mov	r3, sp
    c330:	8adc      	ldrh	r4, [r3, #22]
    c332:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    c334:	2d00      	cmp	r5, #0
    c336:	d1d5      	bne.n	c2e4 <nm_spi_write_block+0xcc>
				order = 0x3;
    c338:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    c33a:	42be      	cmp	r6, r7
    c33c:	d9d6      	bls.n	c2ec <nm_spi_write_block+0xd4>
				order = 0x1;
    c33e:	3b02      	subs	r3, #2
    c340:	e7d4      	b.n	c2ec <nm_spi_write_block+0xd4>
    c342:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    c344:	22d4      	movs	r2, #212	; 0xd4
    c346:	0092      	lsls	r2, r2, #2
    c348:	494e      	ldr	r1, [pc, #312]	; (c484 <nm_spi_write_block+0x26c>)
    c34a:	4842      	ldr	r0, [pc, #264]	; (c454 <nm_spi_write_block+0x23c>)
    c34c:	4b42      	ldr	r3, [pc, #264]	; (c458 <nm_spi_write_block+0x240>)
    c34e:	4798      	blx	r3
    c350:	484d      	ldr	r0, [pc, #308]	; (c488 <nm_spi_write_block+0x270>)
    c352:	4b4e      	ldr	r3, [pc, #312]	; (c48c <nm_spi_write_block+0x274>)
    c354:	4798      	blx	r3
    c356:	200d      	movs	r0, #13
    c358:	4b41      	ldr	r3, [pc, #260]	; (c460 <nm_spi_write_block+0x248>)
    c35a:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    c35c:	22f8      	movs	r2, #248	; 0xf8
    c35e:	0092      	lsls	r2, r2, #2
    c360:	493b      	ldr	r1, [pc, #236]	; (c450 <nm_spi_write_block+0x238>)
    c362:	483c      	ldr	r0, [pc, #240]	; (c454 <nm_spi_write_block+0x23c>)
    c364:	4b3c      	ldr	r3, [pc, #240]	; (c458 <nm_spi_write_block+0x240>)
    c366:	4798      	blx	r3
    c368:	4849      	ldr	r0, [pc, #292]	; (c490 <nm_spi_write_block+0x278>)
    c36a:	4b48      	ldr	r3, [pc, #288]	; (c48c <nm_spi_write_block+0x274>)
    c36c:	4798      	blx	r3
    c36e:	200d      	movs	r0, #13
    c370:	4b3b      	ldr	r3, [pc, #236]	; (c460 <nm_spi_write_block+0x248>)
    c372:	4798      	blx	r3
    c374:	e76d      	b.n	c252 <nm_spi_write_block+0x3a>
    c376:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    c378:	4a46      	ldr	r2, [pc, #280]	; (c494 <nm_spi_write_block+0x27c>)
    c37a:	4942      	ldr	r1, [pc, #264]	; (c484 <nm_spi_write_block+0x26c>)
    c37c:	4835      	ldr	r0, [pc, #212]	; (c454 <nm_spi_write_block+0x23c>)
    c37e:	4b36      	ldr	r3, [pc, #216]	; (c458 <nm_spi_write_block+0x240>)
    c380:	4798      	blx	r3
    c382:	4845      	ldr	r0, [pc, #276]	; (c498 <nm_spi_write_block+0x280>)
    c384:	4b41      	ldr	r3, [pc, #260]	; (c48c <nm_spi_write_block+0x274>)
    c386:	4798      	blx	r3
    c388:	200d      	movs	r0, #13
    c38a:	4b35      	ldr	r3, [pc, #212]	; (c460 <nm_spi_write_block+0x248>)
    c38c:	4798      	blx	r3
    c38e:	e7e5      	b.n	c35c <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    c390:	2102      	movs	r1, #2
    c392:	a807      	add	r0, sp, #28
    c394:	4b39      	ldr	r3, [pc, #228]	; (c47c <nm_spi_write_block+0x264>)
    c396:	4798      	blx	r3
    c398:	2800      	cmp	r0, #0
    c39a:	d0bf      	beq.n	c31c <nm_spi_write_block+0x104>
    c39c:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    c39e:	4a3f      	ldr	r2, [pc, #252]	; (c49c <nm_spi_write_block+0x284>)
    c3a0:	4938      	ldr	r1, [pc, #224]	; (c484 <nm_spi_write_block+0x26c>)
    c3a2:	482c      	ldr	r0, [pc, #176]	; (c454 <nm_spi_write_block+0x23c>)
    c3a4:	4b2c      	ldr	r3, [pc, #176]	; (c458 <nm_spi_write_block+0x240>)
    c3a6:	4798      	blx	r3
    c3a8:	483d      	ldr	r0, [pc, #244]	; (c4a0 <nm_spi_write_block+0x288>)
    c3aa:	4b38      	ldr	r3, [pc, #224]	; (c48c <nm_spi_write_block+0x274>)
    c3ac:	4798      	blx	r3
    c3ae:	200d      	movs	r0, #13
    c3b0:	4b2b      	ldr	r3, [pc, #172]	; (c460 <nm_spi_write_block+0x248>)
    c3b2:	4798      	blx	r3
    c3b4:	e7d2      	b.n	c35c <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    c3b6:	223c      	movs	r2, #60	; 0x3c
    c3b8:	32ff      	adds	r2, #255	; 0xff
    c3ba:	493a      	ldr	r1, [pc, #232]	; (c4a4 <nm_spi_write_block+0x28c>)
    c3bc:	4825      	ldr	r0, [pc, #148]	; (c454 <nm_spi_write_block+0x23c>)
    c3be:	4b26      	ldr	r3, [pc, #152]	; (c458 <nm_spi_write_block+0x240>)
    c3c0:	4798      	blx	r3
    c3c2:	4839      	ldr	r0, [pc, #228]	; (c4a8 <nm_spi_write_block+0x290>)
    c3c4:	4b31      	ldr	r3, [pc, #196]	; (c48c <nm_spi_write_block+0x274>)
    c3c6:	4798      	blx	r3
    c3c8:	200d      	movs	r0, #13
    c3ca:	4b25      	ldr	r3, [pc, #148]	; (c460 <nm_spi_write_block+0x248>)
    c3cc:	4798      	blx	r3
    c3ce:	e027      	b.n	c420 <nm_spi_write_block+0x208>
    c3d0:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    c3d2:	4b2b      	ldr	r3, [pc, #172]	; (c480 <nm_spi_write_block+0x268>)
    c3d4:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    c3d6:	1e63      	subs	r3, r4, #1
    c3d8:	419c      	sbcs	r4, r3
    c3da:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    c3dc:	b2a1      	uxth	r1, r4
    c3de:	a807      	add	r0, sp, #28
    c3e0:	4b32      	ldr	r3, [pc, #200]	; (c4ac <nm_spi_write_block+0x294>)
    c3e2:	4798      	blx	r3
    c3e4:	2800      	cmp	r0, #0
    c3e6:	d1e6      	bne.n	c3b6 <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    c3e8:	ab08      	add	r3, sp, #32
    c3ea:	191b      	adds	r3, r3, r4
    c3ec:	3b05      	subs	r3, #5
    c3ee:	781b      	ldrb	r3, [r3, #0]
    c3f0:	2b00      	cmp	r3, #0
    c3f2:	d106      	bne.n	c402 <nm_spi_write_block+0x1ea>
    c3f4:	ab08      	add	r3, sp, #32
    c3f6:	469c      	mov	ip, r3
    c3f8:	4464      	add	r4, ip
    c3fa:	3c06      	subs	r4, #6
    c3fc:	7823      	ldrb	r3, [r4, #0]
    c3fe:	2bc3      	cmp	r3, #195	; 0xc3
    c400:	d01b      	beq.n	c43a <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    c402:	22a1      	movs	r2, #161	; 0xa1
    c404:	0052      	lsls	r2, r2, #1
    c406:	4927      	ldr	r1, [pc, #156]	; (c4a4 <nm_spi_write_block+0x28c>)
    c408:	4812      	ldr	r0, [pc, #72]	; (c454 <nm_spi_write_block+0x23c>)
    c40a:	4c13      	ldr	r4, [pc, #76]	; (c458 <nm_spi_write_block+0x240>)
    c40c:	47a0      	blx	r4
    c40e:	a907      	add	r1, sp, #28
    c410:	788b      	ldrb	r3, [r1, #2]
    c412:	784a      	ldrb	r2, [r1, #1]
    c414:	7809      	ldrb	r1, [r1, #0]
    c416:	4826      	ldr	r0, [pc, #152]	; (c4b0 <nm_spi_write_block+0x298>)
    c418:	47a0      	blx	r4
    c41a:	200d      	movs	r0, #13
    c41c:	4b10      	ldr	r3, [pc, #64]	; (c460 <nm_spi_write_block+0x248>)
    c41e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    c420:	22fa      	movs	r2, #250	; 0xfa
    c422:	0092      	lsls	r2, r2, #2
    c424:	490a      	ldr	r1, [pc, #40]	; (c450 <nm_spi_write_block+0x238>)
    c426:	480b      	ldr	r0, [pc, #44]	; (c454 <nm_spi_write_block+0x23c>)
    c428:	4b0b      	ldr	r3, [pc, #44]	; (c458 <nm_spi_write_block+0x240>)
    c42a:	4798      	blx	r3
    c42c:	4818      	ldr	r0, [pc, #96]	; (c490 <nm_spi_write_block+0x278>)
    c42e:	4b17      	ldr	r3, [pc, #92]	; (c48c <nm_spi_write_block+0x274>)
    c430:	4798      	blx	r3
    c432:	200d      	movs	r0, #13
    c434:	4b0a      	ldr	r3, [pc, #40]	; (c460 <nm_spi_write_block+0x248>)
    c436:	4798      	blx	r3
    c438:	e70b      	b.n	c252 <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c43a:	2000      	movs	r0, #0
    c43c:	e001      	b.n	c442 <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c43e:	2006      	movs	r0, #6
    c440:	4240      	negs	r0, r0

	return s8Ret;
}
    c442:	b009      	add	sp, #36	; 0x24
    c444:	bc0c      	pop	{r2, r3}
    c446:	4690      	mov	r8, r2
    c448:	469b      	mov	fp, r3
    c44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c44c:	000003ca 	.word	0x000003ca
    c450:	00013854 	.word	0x00013854
    c454:	0001313c 	.word	0x0001313c
    c458:	00011941 	.word	0x00011941
    c45c:	00013b0c 	.word	0x00013b0c
    c460:	00011975 	.word	0x00011975
    c464:	00009d19 	.word	0x00009d19
    c468:	0000b8e1 	.word	0x0000b8e1
    c46c:	0000ba81 	.word	0x0000ba81
    c470:	000003f2 	.word	0x000003f2
    c474:	00013af0 	.word	0x00013af0
    c478:	00013b3c 	.word	0x00013b3c
    c47c:	0000b8c1 	.word	0x0000b8c1
    c480:	2000023c 	.word	0x2000023c
    c484:	00013834 	.word	0x00013834
    c488:	00013b74 	.word	0x00013b74
    c48c:	00011a5d 	.word	0x00011a5d
    c490:	00013c68 	.word	0x00013c68
    c494:	00000359 	.word	0x00000359
    c498:	00013bac 	.word	0x00013bac
    c49c:	00000363 	.word	0x00000363
    c4a0:	00013be0 	.word	0x00013be0
    c4a4:	00013808 	.word	0x00013808
    c4a8:	00013c18 	.word	0x00013c18
    c4ac:	0000ba61 	.word	0x0000ba61
    c4b0:	00013c38 	.word	0x00013c38

0000c4b4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    c4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4b6:	46de      	mov	lr, fp
    c4b8:	4657      	mov	r7, sl
    c4ba:	464e      	mov	r6, r9
    c4bc:	4645      	mov	r5, r8
    c4be:	b5e0      	push	{r5, r6, r7, lr}
    c4c0:	b085      	sub	sp, #20
    c4c2:	9001      	str	r0, [sp, #4]
    c4c4:	000e      	movs	r6, r1
    c4c6:	9202      	str	r2, [sp, #8]
    c4c8:	001d      	movs	r5, r3
    c4ca:	ab0e      	add	r3, sp, #56	; 0x38
    c4cc:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    c4ce:	2c00      	cmp	r4, #0
    c4d0:	d064      	beq.n	c59c <Socket_ReadSocketData+0xe8>
    c4d2:	0103      	lsls	r3, r0, #4
    c4d4:	4935      	ldr	r1, [pc, #212]	; (c5ac <Socket_ReadSocketData+0xf8>)
    c4d6:	585b      	ldr	r3, [r3, r1]
    c4d8:	2b00      	cmp	r3, #0
    c4da:	d05f      	beq.n	c59c <Socket_ReadSocketData+0xe8>
    c4dc:	0101      	lsls	r1, r0, #4
    c4de:	4b33      	ldr	r3, [pc, #204]	; (c5ac <Socket_ReadSocketData+0xf8>)
    c4e0:	185b      	adds	r3, r3, r1
    c4e2:	889b      	ldrh	r3, [r3, #4]
    c4e4:	b29b      	uxth	r3, r3
    c4e6:	2b00      	cmp	r3, #0
    c4e8:	d058      	beq.n	c59c <Socket_ReadSocketData+0xe8>
    c4ea:	4b30      	ldr	r3, [pc, #192]	; (c5ac <Socket_ReadSocketData+0xf8>)
    c4ec:	185b      	adds	r3, r3, r1
    c4ee:	7a9b      	ldrb	r3, [r3, #10]
    c4f0:	2b01      	cmp	r3, #1
    c4f2:	d153      	bne.n	c59c <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    c4f4:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    c4f6:	4b2d      	ldr	r3, [pc, #180]	; (c5ac <Socket_ReadSocketData+0xf8>)
    c4f8:	469b      	mov	fp, r3
    c4fa:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    c4fc:	465b      	mov	r3, fp
    c4fe:	220a      	movs	r2, #10
    c500:	4690      	mov	r8, r2
    c502:	44d8      	add	r8, fp
    c504:	468a      	mov	sl, r1
    c506:	9500      	str	r5, [sp, #0]
    c508:	9303      	str	r3, [sp, #12]
    c50a:	e015      	b.n	c538 <Socket_ReadSocketData+0x84>
    c50c:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    c50e:	2301      	movs	r3, #1
    c510:	e01c      	b.n	c54c <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    c512:	3301      	adds	r3, #1
    c514:	2200      	movs	r2, #0
    c516:	2100      	movs	r1, #0
    c518:	2000      	movs	r0, #0
    c51a:	4c25      	ldr	r4, [pc, #148]	; (c5b0 <Socket_ReadSocketData+0xfc>)
    c51c:	47a0      	blx	r4
    c51e:	e03d      	b.n	c59c <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    c520:	4824      	ldr	r0, [pc, #144]	; (c5b4 <Socket_ReadSocketData+0x100>)
    c522:	4d25      	ldr	r5, [pc, #148]	; (c5b8 <Socket_ReadSocketData+0x104>)
    c524:	47a8      	blx	r5
    c526:	0021      	movs	r1, r4
    c528:	4824      	ldr	r0, [pc, #144]	; (c5bc <Socket_ReadSocketData+0x108>)
    c52a:	47a8      	blx	r5
    c52c:	200d      	movs	r0, #13
    c52e:	4b24      	ldr	r3, [pc, #144]	; (c5c0 <Socket_ReadSocketData+0x10c>)
    c530:	4798      	blx	r3
				break;
    c532:	e033      	b.n	c59c <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    c534:	2c00      	cmp	r4, #0
    c536:	d031      	beq.n	c59c <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    c538:	465b      	mov	r3, fp
    c53a:	889b      	ldrh	r3, [r3, #4]
    c53c:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    c53e:	b21b      	sxth	r3, r3
    c540:	2b00      	cmp	r3, #0
    c542:	dde3      	ble.n	c50c <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    c544:	9b03      	ldr	r3, [sp, #12]
    c546:	889d      	ldrh	r5, [r3, #4]
    c548:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    c54a:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    c54c:	4a17      	ldr	r2, [pc, #92]	; (c5ac <Socket_ReadSocketData+0xf8>)
    c54e:	4651      	mov	r1, sl
    c550:	5889      	ldr	r1, [r1, r2]
    c552:	002a      	movs	r2, r5
    c554:	9800      	ldr	r0, [sp, #0]
    c556:	4f16      	ldr	r7, [pc, #88]	; (c5b0 <Socket_ReadSocketData+0xfc>)
    c558:	47b8      	blx	r7
    c55a:	2800      	cmp	r0, #0
    c55c:	d1e0      	bne.n	c520 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    c55e:	4b13      	ldr	r3, [pc, #76]	; (c5ac <Socket_ReadSocketData+0xf8>)
    c560:	4652      	mov	r2, sl
    c562:	58d3      	ldr	r3, [r2, r3]
    c564:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    c566:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    c568:	88f3      	ldrh	r3, [r6, #6]
    c56a:	1b5b      	subs	r3, r3, r5
    c56c:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    c56e:	4b15      	ldr	r3, [pc, #84]	; (c5c4 <Socket_ReadSocketData+0x110>)
    c570:	681b      	ldr	r3, [r3, #0]
    c572:	2b00      	cmp	r3, #0
    c574:	d005      	beq.n	c582 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    c576:	4b13      	ldr	r3, [pc, #76]	; (c5c4 <Socket_ReadSocketData+0x110>)
    c578:	681b      	ldr	r3, [r3, #0]
    c57a:	0032      	movs	r2, r6
    c57c:	9902      	ldr	r1, [sp, #8]
    c57e:	9801      	ldr	r0, [sp, #4]
    c580:	4798      	blx	r3
				u16ReadCount -= u16Read;
    c582:	1b64      	subs	r4, r4, r5
    c584:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    c586:	9b00      	ldr	r3, [sp, #0]
    c588:	469c      	mov	ip, r3
    c58a:	44ac      	add	ip, r5
    c58c:	4663      	mov	r3, ip
    c58e:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    c590:	4643      	mov	r3, r8
    c592:	781b      	ldrb	r3, [r3, #0]
    c594:	2b00      	cmp	r3, #0
    c596:	d1cd      	bne.n	c534 <Socket_ReadSocketData+0x80>
    c598:	2c00      	cmp	r4, #0
    c59a:	d1ba      	bne.n	c512 <Socket_ReadSocketData+0x5e>
	}
}
    c59c:	b005      	add	sp, #20
    c59e:	bc3c      	pop	{r2, r3, r4, r5}
    c5a0:	4690      	mov	r8, r2
    c5a2:	4699      	mov	r9, r3
    c5a4:	46a2      	mov	sl, r4
    c5a6:	46ab      	mov	fp, r5
    c5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c5aa:	46c0      	nop			; (mov r8, r8)
    c5ac:	20000464 	.word	0x20000464
    c5b0:	0000a839 	.word	0x0000a839
    c5b4:	0001346c 	.word	0x0001346c
    c5b8:	00011941 	.word	0x00011941
    c5bc:	00013ed0 	.word	0x00013ed0
    c5c0:	00011975 	.word	0x00011975
    c5c4:	20000514 	.word	0x20000514

0000c5c8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    c5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5ca:	46d6      	mov	lr, sl
    c5cc:	464f      	mov	r7, r9
    c5ce:	4646      	mov	r6, r8
    c5d0:	b5c0      	push	{r6, r7, lr}
    c5d2:	b09a      	sub	sp, #104	; 0x68
    c5d4:	000d      	movs	r5, r1
    c5d6:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    c5d8:	2841      	cmp	r0, #65	; 0x41
    c5da:	d039      	beq.n	c650 <m2m_ip_cb+0x88>
    c5dc:	2854      	cmp	r0, #84	; 0x54
    c5de:	d037      	beq.n	c650 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    c5e0:	2842      	cmp	r0, #66	; 0x42
    c5e2:	d053      	beq.n	c68c <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    c5e4:	2843      	cmp	r0, #67	; 0x43
    c5e6:	d06a      	beq.n	c6be <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    c5e8:	2844      	cmp	r0, #68	; 0x44
    c5ea:	d100      	bne.n	c5ee <m2m_ip_cb+0x26>
    c5ec:	e0af      	b.n	c74e <m2m_ip_cb+0x186>
    c5ee:	284b      	cmp	r0, #75	; 0x4b
    c5f0:	d100      	bne.n	c5f4 <m2m_ip_cb+0x2c>
    c5f2:	e0ac      	b.n	c74e <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    c5f4:	284a      	cmp	r0, #74	; 0x4a
    c5f6:	d100      	bne.n	c5fa <m2m_ip_cb+0x32>
    c5f8:	e0cf      	b.n	c79a <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    c5fa:	2846      	cmp	r0, #70	; 0x46
    c5fc:	d100      	bne.n	c600 <m2m_ip_cb+0x38>
    c5fe:	e0e5      	b.n	c7cc <m2m_ip_cb+0x204>
    c600:	2848      	cmp	r0, #72	; 0x48
    c602:	d100      	bne.n	c606 <m2m_ip_cb+0x3e>
    c604:	e10e      	b.n	c824 <m2m_ip_cb+0x25c>
    c606:	284d      	cmp	r0, #77	; 0x4d
    c608:	d100      	bne.n	c60c <m2m_ip_cb+0x44>
    c60a:	e0dc      	b.n	c7c6 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    c60c:	2845      	cmp	r0, #69	; 0x45
    c60e:	d100      	bne.n	c612 <m2m_ip_cb+0x4a>
    c610:	e12c      	b.n	c86c <m2m_ip_cb+0x2a4>
    c612:	2847      	cmp	r0, #71	; 0x47
    c614:	d100      	bne.n	c618 <m2m_ip_cb+0x50>
    c616:	e14d      	b.n	c8b4 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    c618:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    c61a:	284c      	cmp	r0, #76	; 0x4c
    c61c:	d100      	bne.n	c620 <m2m_ip_cb+0x58>
    c61e:	e126      	b.n	c86e <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    c620:	2852      	cmp	r0, #82	; 0x52
    c622:	d12d      	bne.n	c680 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    c624:	2301      	movs	r3, #1
    c626:	2214      	movs	r2, #20
    c628:	a909      	add	r1, sp, #36	; 0x24
    c62a:	0020      	movs	r0, r4
    c62c:	4ca2      	ldr	r4, [pc, #648]	; (c8b8 <m2m_ip_cb+0x2f0>)
    c62e:	47a0      	blx	r4
    c630:	2800      	cmp	r0, #0
    c632:	d125      	bne.n	c680 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    c634:	4ba1      	ldr	r3, [pc, #644]	; (c8bc <m2m_ip_cb+0x2f4>)
    c636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c638:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    c63a:	681b      	ldr	r3, [r3, #0]
    c63c:	2b00      	cmp	r3, #0
    c63e:	d01f      	beq.n	c680 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    c640:	4b9e      	ldr	r3, [pc, #632]	; (c8bc <m2m_ip_cb+0x2f4>)
    c642:	681c      	ldr	r4, [r3, #0]
    c644:	ab09      	add	r3, sp, #36	; 0x24
    c646:	7c1a      	ldrb	r2, [r3, #16]
    c648:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c64a:	9809      	ldr	r0, [sp, #36]	; 0x24
    c64c:	47a0      	blx	r4
			}
		}
	}
}
    c64e:	e017      	b.n	c680 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    c650:	2300      	movs	r3, #0
    c652:	2204      	movs	r2, #4
    c654:	a909      	add	r1, sp, #36	; 0x24
    c656:	0020      	movs	r0, r4
    c658:	4c97      	ldr	r4, [pc, #604]	; (c8b8 <m2m_ip_cb+0x2f0>)
    c65a:	47a0      	blx	r4
    c65c:	2800      	cmp	r0, #0
    c65e:	d10f      	bne.n	c680 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    c660:	ab09      	add	r3, sp, #36	; 0x24
    c662:	785a      	ldrb	r2, [r3, #1]
    c664:	ab05      	add	r3, sp, #20
    c666:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    c668:	4b95      	ldr	r3, [pc, #596]	; (c8c0 <m2m_ip_cb+0x2f8>)
    c66a:	681b      	ldr	r3, [r3, #0]
    c66c:	2b00      	cmp	r3, #0
    c66e:	d007      	beq.n	c680 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    c670:	4b93      	ldr	r3, [pc, #588]	; (c8c0 <m2m_ip_cb+0x2f8>)
    c672:	681b      	ldr	r3, [r3, #0]
    c674:	aa09      	add	r2, sp, #36	; 0x24
    c676:	2000      	movs	r0, #0
    c678:	5610      	ldrsb	r0, [r2, r0]
    c67a:	aa05      	add	r2, sp, #20
    c67c:	2101      	movs	r1, #1
    c67e:	4798      	blx	r3
}
    c680:	b01a      	add	sp, #104	; 0x68
    c682:	bc1c      	pop	{r2, r3, r4}
    c684:	4690      	mov	r8, r2
    c686:	4699      	mov	r9, r3
    c688:	46a2      	mov	sl, r4
    c68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    c68c:	2300      	movs	r3, #0
    c68e:	2204      	movs	r2, #4
    c690:	a909      	add	r1, sp, #36	; 0x24
    c692:	0020      	movs	r0, r4
    c694:	4c88      	ldr	r4, [pc, #544]	; (c8b8 <m2m_ip_cb+0x2f0>)
    c696:	47a0      	blx	r4
    c698:	2800      	cmp	r0, #0
    c69a:	d1f1      	bne.n	c680 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    c69c:	ab09      	add	r3, sp, #36	; 0x24
    c69e:	785a      	ldrb	r2, [r3, #1]
    c6a0:	ab05      	add	r3, sp, #20
    c6a2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    c6a4:	4b86      	ldr	r3, [pc, #536]	; (c8c0 <m2m_ip_cb+0x2f8>)
    c6a6:	681b      	ldr	r3, [r3, #0]
    c6a8:	2b00      	cmp	r3, #0
    c6aa:	d0e9      	beq.n	c680 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    c6ac:	4b84      	ldr	r3, [pc, #528]	; (c8c0 <m2m_ip_cb+0x2f8>)
    c6ae:	681b      	ldr	r3, [r3, #0]
    c6b0:	aa09      	add	r2, sp, #36	; 0x24
    c6b2:	2000      	movs	r0, #0
    c6b4:	5610      	ldrsb	r0, [r2, r0]
    c6b6:	aa05      	add	r2, sp, #20
    c6b8:	2102      	movs	r1, #2
    c6ba:	4798      	blx	r3
    c6bc:	e7e0      	b.n	c680 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    c6be:	2300      	movs	r3, #0
    c6c0:	220c      	movs	r2, #12
    c6c2:	a905      	add	r1, sp, #20
    c6c4:	0020      	movs	r0, r4
    c6c6:	4c7c      	ldr	r4, [pc, #496]	; (c8b8 <m2m_ip_cb+0x2f0>)
    c6c8:	47a0      	blx	r4
    c6ca:	2800      	cmp	r0, #0
    c6cc:	d1d8      	bne.n	c680 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    c6ce:	ab05      	add	r3, sp, #20
    c6d0:	2209      	movs	r2, #9
    c6d2:	569a      	ldrsb	r2, [r3, r2]
    c6d4:	2a00      	cmp	r2, #0
    c6d6:	db24      	blt.n	c722 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    c6d8:	0018      	movs	r0, r3
    c6da:	2108      	movs	r1, #8
    c6dc:	5659      	ldrsb	r1, [r3, r1]
    c6de:	4b79      	ldr	r3, [pc, #484]	; (c8c4 <m2m_ip_cb+0x2fc>)
    c6e0:	0109      	lsls	r1, r1, #4
    c6e2:	1859      	adds	r1, r3, r1
    c6e4:	7ac9      	ldrb	r1, [r1, #11]
    c6e6:	b2c9      	uxtb	r1, r1
    c6e8:	0114      	lsls	r4, r2, #4
    c6ea:	191b      	adds	r3, r3, r4
    c6ec:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    c6ee:	2101      	movs	r1, #1
    c6f0:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    c6f2:	8941      	ldrh	r1, [r0, #10]
    c6f4:	3908      	subs	r1, #8
    c6f6:	b289      	uxth	r1, r1
    c6f8:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    c6fa:	4973      	ldr	r1, [pc, #460]	; (c8c8 <m2m_ip_cb+0x300>)
    c6fc:	880b      	ldrh	r3, [r1, #0]
    c6fe:	3301      	adds	r3, #1
    c700:	b29b      	uxth	r3, r3
    c702:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    c704:	880b      	ldrh	r3, [r1, #0]
    c706:	b29b      	uxth	r3, r3
    c708:	2b00      	cmp	r3, #0
    c70a:	d103      	bne.n	c714 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    c70c:	880b      	ldrh	r3, [r1, #0]
    c70e:	3301      	adds	r3, #1
    c710:	b29b      	uxth	r3, r3
    c712:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    c714:	4b6c      	ldr	r3, [pc, #432]	; (c8c8 <m2m_ip_cb+0x300>)
    c716:	8819      	ldrh	r1, [r3, #0]
    c718:	b289      	uxth	r1, r1
    c71a:	0110      	lsls	r0, r2, #4
    c71c:	4b69      	ldr	r3, [pc, #420]	; (c8c4 <m2m_ip_cb+0x2fc>)
    c71e:	181b      	adds	r3, r3, r0
    c720:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    c722:	ab09      	add	r3, sp, #36	; 0x24
    c724:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    c726:	2202      	movs	r2, #2
    c728:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    c72a:	aa05      	add	r2, sp, #20
    c72c:	8851      	ldrh	r1, [r2, #2]
    c72e:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    c730:	9a06      	ldr	r2, [sp, #24]
    c732:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    c734:	4b62      	ldr	r3, [pc, #392]	; (c8c0 <m2m_ip_cb+0x2f8>)
    c736:	681b      	ldr	r3, [r3, #0]
    c738:	2b00      	cmp	r3, #0
    c73a:	d0a1      	beq.n	c680 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    c73c:	4b60      	ldr	r3, [pc, #384]	; (c8c0 <m2m_ip_cb+0x2f8>)
    c73e:	681b      	ldr	r3, [r3, #0]
    c740:	aa05      	add	r2, sp, #20
    c742:	2008      	movs	r0, #8
    c744:	5610      	ldrsb	r0, [r2, r0]
    c746:	aa09      	add	r2, sp, #36	; 0x24
    c748:	2104      	movs	r1, #4
    c74a:	4798      	blx	r3
    c74c:	e798      	b.n	c680 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    c74e:	2300      	movs	r3, #0
    c750:	2204      	movs	r2, #4
    c752:	a909      	add	r1, sp, #36	; 0x24
    c754:	0020      	movs	r0, r4
    c756:	4c58      	ldr	r4, [pc, #352]	; (c8b8 <m2m_ip_cb+0x2f0>)
    c758:	47a0      	blx	r4
    c75a:	2800      	cmp	r0, #0
    c75c:	d000      	beq.n	c760 <m2m_ip_cb+0x198>
    c75e:	e78f      	b.n	c680 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    c760:	ab09      	add	r3, sp, #36	; 0x24
    c762:	2000      	movs	r0, #0
    c764:	5618      	ldrsb	r0, [r3, r0]
    c766:	aa05      	add	r2, sp, #20
    c768:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    c76a:	785b      	ldrb	r3, [r3, #1]
    c76c:	b25b      	sxtb	r3, r3
    c76e:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    c770:	2b00      	cmp	r3, #0
    c772:	d107      	bne.n	c784 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    c774:	ab09      	add	r3, sp, #36	; 0x24
    c776:	885b      	ldrh	r3, [r3, #2]
    c778:	3b08      	subs	r3, #8
    c77a:	b29b      	uxth	r3, r3
    c77c:	0101      	lsls	r1, r0, #4
    c77e:	4a51      	ldr	r2, [pc, #324]	; (c8c4 <m2m_ip_cb+0x2fc>)
    c780:	1852      	adds	r2, r2, r1
    c782:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    c784:	4b4e      	ldr	r3, [pc, #312]	; (c8c0 <m2m_ip_cb+0x2f8>)
    c786:	681b      	ldr	r3, [r3, #0]
    c788:	2b00      	cmp	r3, #0
    c78a:	d100      	bne.n	c78e <m2m_ip_cb+0x1c6>
    c78c:	e778      	b.n	c680 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    c78e:	4b4c      	ldr	r3, [pc, #304]	; (c8c0 <m2m_ip_cb+0x2f8>)
    c790:	681b      	ldr	r3, [r3, #0]
    c792:	aa05      	add	r2, sp, #20
    c794:	2105      	movs	r1, #5
    c796:	4798      	blx	r3
	{
    c798:	e772      	b.n	c680 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    c79a:	2300      	movs	r3, #0
    c79c:	2244      	movs	r2, #68	; 0x44
    c79e:	a909      	add	r1, sp, #36	; 0x24
    c7a0:	0020      	movs	r0, r4
    c7a2:	4c45      	ldr	r4, [pc, #276]	; (c8b8 <m2m_ip_cb+0x2f0>)
    c7a4:	47a0      	blx	r4
    c7a6:	2800      	cmp	r0, #0
    c7a8:	d000      	beq.n	c7ac <m2m_ip_cb+0x1e4>
    c7aa:	e769      	b.n	c680 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    c7ac:	4b47      	ldr	r3, [pc, #284]	; (c8cc <m2m_ip_cb+0x304>)
    c7ae:	681b      	ldr	r3, [r3, #0]
    c7b0:	2b00      	cmp	r3, #0
    c7b2:	d100      	bne.n	c7b6 <m2m_ip_cb+0x1ee>
    c7b4:	e764      	b.n	c680 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    c7b6:	4b45      	ldr	r3, [pc, #276]	; (c8cc <m2m_ip_cb+0x304>)
    c7b8:	681b      	ldr	r3, [r3, #0]
    c7ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
    c7bc:	9203      	str	r2, [sp, #12]
    c7be:	0011      	movs	r1, r2
    c7c0:	a809      	add	r0, sp, #36	; 0x24
    c7c2:	4798      	blx	r3
    c7c4:	e75c      	b.n	c680 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    c7c6:	2306      	movs	r3, #6
    c7c8:	469a      	mov	sl, r3
    c7ca:	e001      	b.n	c7d0 <m2m_ip_cb+0x208>
    c7cc:	2306      	movs	r3, #6
    c7ce:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    c7d0:	2300      	movs	r3, #0
    c7d2:	2210      	movs	r2, #16
    c7d4:	a905      	add	r1, sp, #20
    c7d6:	0020      	movs	r0, r4
    c7d8:	4f37      	ldr	r7, [pc, #220]	; (c8b8 <m2m_ip_cb+0x2f0>)
    c7da:	47b8      	blx	r7
    c7dc:	2800      	cmp	r0, #0
    c7de:	d000      	beq.n	c7e2 <m2m_ip_cb+0x21a>
    c7e0:	e74e      	b.n	c680 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    c7e2:	aa05      	add	r2, sp, #20
    c7e4:	200c      	movs	r0, #12
    c7e6:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    c7e8:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    c7ea:	0107      	lsls	r7, r0, #4
    c7ec:	4935      	ldr	r1, [pc, #212]	; (c8c4 <m2m_ip_cb+0x2fc>)
    c7ee:	19c9      	adds	r1, r1, r7
    c7f0:	2700      	movs	r7, #0
    c7f2:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    c7f4:	2608      	movs	r6, #8
    c7f6:	5f97      	ldrsh	r7, [r2, r6]
    c7f8:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    c7fa:	8957      	ldrh	r7, [r2, #10]
    c7fc:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    c7fe:	af09      	add	r7, sp, #36	; 0x24
    c800:	8856      	ldrh	r6, [r2, #2]
    c802:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    c804:	9a06      	ldr	r2, [sp, #24]
    c806:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    c808:	88ca      	ldrh	r2, [r1, #6]
    c80a:	b292      	uxth	r2, r2
    c80c:	4293      	cmp	r3, r2
    c80e:	d00c      	beq.n	c82a <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    c810:	2d10      	cmp	r5, #16
    c812:	d800      	bhi.n	c816 <m2m_ip_cb+0x24e>
    c814:	e734      	b.n	c680 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    c816:	2301      	movs	r3, #1
    c818:	2200      	movs	r2, #0
    c81a:	2100      	movs	r1, #0
    c81c:	2000      	movs	r0, #0
    c81e:	4c26      	ldr	r4, [pc, #152]	; (c8b8 <m2m_ip_cb+0x2f0>)
    c820:	47a0      	blx	r4
	{
    c822:	e72d      	b.n	c680 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    c824:	2309      	movs	r3, #9
    c826:	469a      	mov	sl, r3
    c828:	e7d2      	b.n	c7d0 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    c82a:	4643      	mov	r3, r8
    c82c:	2b00      	cmp	r3, #0
    c82e:	dd01      	ble.n	c834 <m2m_ip_cb+0x26c>
    c830:	45a8      	cmp	r8, r5
    c832:	db0f      	blt.n	c854 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    c834:	ab09      	add	r3, sp, #36	; 0x24
    c836:	4642      	mov	r2, r8
    c838:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    c83a:	2300      	movs	r3, #0
    c83c:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    c83e:	4b20      	ldr	r3, [pc, #128]	; (c8c0 <m2m_ip_cb+0x2f8>)
    c840:	681b      	ldr	r3, [r3, #0]
    c842:	2b00      	cmp	r3, #0
    c844:	d100      	bne.n	c848 <m2m_ip_cb+0x280>
    c846:	e71b      	b.n	c680 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    c848:	4b1d      	ldr	r3, [pc, #116]	; (c8c0 <m2m_ip_cb+0x2f8>)
    c84a:	681b      	ldr	r3, [r3, #0]
    c84c:	aa09      	add	r2, sp, #36	; 0x24
    c84e:	4651      	mov	r1, sl
    c850:	4798      	blx	r3
    c852:	e715      	b.n	c680 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    c854:	0023      	movs	r3, r4
    c856:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    c858:	4642      	mov	r2, r8
    c85a:	4669      	mov	r1, sp
    c85c:	818a      	strh	r2, [r1, #12]
    c85e:	898a      	ldrh	r2, [r1, #12]
    c860:	9200      	str	r2, [sp, #0]
    c862:	4652      	mov	r2, sl
    c864:	0039      	movs	r1, r7
    c866:	4c1a      	ldr	r4, [pc, #104]	; (c8d0 <m2m_ip_cb+0x308>)
    c868:	47a0      	blx	r4
    c86a:	e709      	b.n	c680 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    c86c:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    c86e:	2300      	movs	r3, #0
    c870:	2208      	movs	r2, #8
    c872:	a909      	add	r1, sp, #36	; 0x24
    c874:	0020      	movs	r0, r4
    c876:	4c10      	ldr	r4, [pc, #64]	; (c8b8 <m2m_ip_cb+0x2f0>)
    c878:	47a0      	blx	r4
    c87a:	2800      	cmp	r0, #0
    c87c:	d000      	beq.n	c880 <m2m_ip_cb+0x2b8>
    c87e:	e6ff      	b.n	c680 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    c880:	ab09      	add	r3, sp, #36	; 0x24
    c882:	2000      	movs	r0, #0
    c884:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    c886:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    c888:	8859      	ldrh	r1, [r3, #2]
    c88a:	ab05      	add	r3, sp, #20
    c88c:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    c88e:	0101      	lsls	r1, r0, #4
    c890:	4b0c      	ldr	r3, [pc, #48]	; (c8c4 <m2m_ip_cb+0x2fc>)
    c892:	185b      	adds	r3, r3, r1
    c894:	88db      	ldrh	r3, [r3, #6]
    c896:	b29b      	uxth	r3, r3
    c898:	429a      	cmp	r2, r3
    c89a:	d000      	beq.n	c89e <m2m_ip_cb+0x2d6>
    c89c:	e6f0      	b.n	c680 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    c89e:	4b08      	ldr	r3, [pc, #32]	; (c8c0 <m2m_ip_cb+0x2f8>)
    c8a0:	681b      	ldr	r3, [r3, #0]
    c8a2:	2b00      	cmp	r3, #0
    c8a4:	d100      	bne.n	c8a8 <m2m_ip_cb+0x2e0>
    c8a6:	e6eb      	b.n	c680 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    c8a8:	4b05      	ldr	r3, [pc, #20]	; (c8c0 <m2m_ip_cb+0x2f8>)
    c8aa:	681b      	ldr	r3, [r3, #0]
    c8ac:	aa05      	add	r2, sp, #20
    c8ae:	0029      	movs	r1, r5
    c8b0:	4798      	blx	r3
	{
    c8b2:	e6e5      	b.n	c680 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    c8b4:	2508      	movs	r5, #8
    c8b6:	e7da      	b.n	c86e <m2m_ip_cb+0x2a6>
    c8b8:	0000a839 	.word	0x0000a839
    c8bc:	20000518 	.word	0x20000518
    c8c0:	20000514 	.word	0x20000514
    c8c4:	20000464 	.word	0x20000464
    c8c8:	2000023e 	.word	0x2000023e
    c8cc:	2000051c 	.word	0x2000051c
    c8d0:	0000c4b5 	.word	0x0000c4b5

0000c8d4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    c8d4:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    c8d6:	4b0a      	ldr	r3, [pc, #40]	; (c900 <socketInit+0x2c>)
    c8d8:	781b      	ldrb	r3, [r3, #0]
    c8da:	2b00      	cmp	r3, #0
    c8dc:	d000      	beq.n	c8e0 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    c8de:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    c8e0:	22b0      	movs	r2, #176	; 0xb0
    c8e2:	2100      	movs	r1, #0
    c8e4:	4807      	ldr	r0, [pc, #28]	; (c904 <socketInit+0x30>)
    c8e6:	4b08      	ldr	r3, [pc, #32]	; (c908 <socketInit+0x34>)
    c8e8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    c8ea:	4908      	ldr	r1, [pc, #32]	; (c90c <socketInit+0x38>)
    c8ec:	2002      	movs	r0, #2
    c8ee:	4b08      	ldr	r3, [pc, #32]	; (c910 <socketInit+0x3c>)
    c8f0:	4798      	blx	r3
		gbSocketInit	= 1;
    c8f2:	2201      	movs	r2, #1
    c8f4:	4b02      	ldr	r3, [pc, #8]	; (c900 <socketInit+0x2c>)
    c8f6:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    c8f8:	2200      	movs	r2, #0
    c8fa:	4b06      	ldr	r3, [pc, #24]	; (c914 <socketInit+0x40>)
    c8fc:	801a      	strh	r2, [r3, #0]
}
    c8fe:	e7ee      	b.n	c8de <socketInit+0xa>
    c900:	2000023d 	.word	0x2000023d
    c904:	20000464 	.word	0x20000464
    c908:	0000a0f5 	.word	0x0000a0f5
    c90c:	0000c5c9 	.word	0x0000c5c9
    c910:	0000a925 	.word	0x0000a925
    c914:	2000023e 	.word	0x2000023e

0000c918 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    c918:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    c91a:	22b0      	movs	r2, #176	; 0xb0
    c91c:	2100      	movs	r1, #0
    c91e:	4807      	ldr	r0, [pc, #28]	; (c93c <socketDeinit+0x24>)
    c920:	4b07      	ldr	r3, [pc, #28]	; (c940 <socketDeinit+0x28>)
    c922:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    c924:	2100      	movs	r1, #0
    c926:	2002      	movs	r0, #2
    c928:	4b06      	ldr	r3, [pc, #24]	; (c944 <socketDeinit+0x2c>)
    c92a:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    c92c:	2300      	movs	r3, #0
    c92e:	4a06      	ldr	r2, [pc, #24]	; (c948 <socketDeinit+0x30>)
    c930:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    c932:	4a06      	ldr	r2, [pc, #24]	; (c94c <socketDeinit+0x34>)
    c934:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    c936:	4a06      	ldr	r2, [pc, #24]	; (c950 <socketDeinit+0x38>)
    c938:	7013      	strb	r3, [r2, #0]
}
    c93a:	bd10      	pop	{r4, pc}
    c93c:	20000464 	.word	0x20000464
    c940:	0000a0f5 	.word	0x0000a0f5
    c944:	0000a925 	.word	0x0000a925
    c948:	20000514 	.word	0x20000514
    c94c:	2000051c 	.word	0x2000051c
    c950:	2000023d 	.word	0x2000023d

0000c954 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    c954:	4b02      	ldr	r3, [pc, #8]	; (c960 <registerSocketCallback+0xc>)
    c956:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    c958:	4b02      	ldr	r3, [pc, #8]	; (c964 <registerSocketCallback+0x10>)
    c95a:	6019      	str	r1, [r3, #0]
}
    c95c:	4770      	bx	lr
    c95e:	46c0      	nop			; (mov r8, r8)
    c960:	20000514 	.word	0x20000514
    c964:	2000051c 	.word	0x2000051c

0000c968 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    c968:	b5f0      	push	{r4, r5, r6, r7, lr}
    c96a:	46d6      	mov	lr, sl
    c96c:	4647      	mov	r7, r8
    c96e:	b580      	push	{r7, lr}
    c970:	b089      	sub	sp, #36	; 0x24
    c972:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    c974:	2802      	cmp	r0, #2
    c976:	d000      	beq.n	c97a <socket+0x12>
    c978:	e09c      	b.n	cab4 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    c97a:	2901      	cmp	r1, #1
    c97c:	d00a      	beq.n	c994 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    c97e:	2902      	cmp	r1, #2
    c980:	d100      	bne.n	c984 <socket+0x1c>
    c982:	e070      	b.n	ca66 <socket+0xfe>
	SOCKET					sock = -1;
    c984:	2501      	movs	r5, #1
    c986:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    c988:	0028      	movs	r0, r5
    c98a:	b009      	add	sp, #36	; 0x24
    c98c:	bc0c      	pop	{r2, r3}
    c98e:	4690      	mov	r8, r2
    c990:	469a      	mov	sl, r3
    c992:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    c994:	4c49      	ldr	r4, [pc, #292]	; (cabc <socket+0x154>)
    c996:	7827      	ldrb	r7, [r4, #0]
    c998:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    c99a:	7826      	ldrb	r6, [r4, #0]
    c99c:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    c99e:	7820      	ldrb	r0, [r4, #0]
    c9a0:	3001      	adds	r0, #1
    c9a2:	3106      	adds	r1, #6
    c9a4:	4b46      	ldr	r3, [pc, #280]	; (cac0 <socket+0x158>)
    c9a6:	4798      	blx	r3
    c9a8:	b2c9      	uxtb	r1, r1
    c9aa:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    c9ac:	0132      	lsls	r2, r6, #4
    c9ae:	4b45      	ldr	r3, [pc, #276]	; (cac4 <socket+0x15c>)
    c9b0:	189b      	adds	r3, r3, r2
    c9b2:	7a9b      	ldrb	r3, [r3, #10]
    c9b4:	2506      	movs	r5, #6
    c9b6:	2b00      	cmp	r3, #0
    c9b8:	d018      	beq.n	c9ec <socket+0x84>
				u8SockID	= u8NextTcpSock;
    c9ba:	4e40      	ldr	r6, [pc, #256]	; (cabc <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    c9bc:	4b40      	ldr	r3, [pc, #256]	; (cac0 <socket+0x158>)
    c9be:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    c9c0:	4b40      	ldr	r3, [pc, #256]	; (cac4 <socket+0x15c>)
    c9c2:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    c9c4:	7837      	ldrb	r7, [r6, #0]
    c9c6:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    c9c8:	7834      	ldrb	r4, [r6, #0]
    c9ca:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    c9cc:	7830      	ldrb	r0, [r6, #0]
    c9ce:	3001      	adds	r0, #1
    c9d0:	2107      	movs	r1, #7
    c9d2:	47d0      	blx	sl
    c9d4:	b2c9      	uxtb	r1, r1
    c9d6:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    c9d8:	0123      	lsls	r3, r4, #4
    c9da:	4443      	add	r3, r8
    c9dc:	7a9b      	ldrb	r3, [r3, #10]
    c9de:	2b00      	cmp	r3, #0
    c9e0:	d007      	beq.n	c9f2 <socket+0x8a>
    c9e2:	3d01      	subs	r5, #1
    c9e4:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    c9e6:	2d00      	cmp	r5, #0
    c9e8:	d1ec      	bne.n	c9c4 <socket+0x5c>
    c9ea:	e7cb      	b.n	c984 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    c9ec:	4b35      	ldr	r3, [pc, #212]	; (cac4 <socket+0x15c>)
    c9ee:	18d4      	adds	r4, r2, r3
    c9f0:	e002      	b.n	c9f8 <socket+0x90>
    c9f2:	0124      	lsls	r4, r4, #4
    c9f4:	4b33      	ldr	r3, [pc, #204]	; (cac4 <socket+0x15c>)
    c9f6:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    c9f8:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    c9fa:	2d00      	cmp	r5, #0
    c9fc:	dbc4      	blt.n	c988 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    c9fe:	2210      	movs	r2, #16
    ca00:	2100      	movs	r1, #0
    ca02:	0020      	movs	r0, r4
    ca04:	4b30      	ldr	r3, [pc, #192]	; (cac8 <socket+0x160>)
    ca06:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    ca08:	2301      	movs	r3, #1
    ca0a:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    ca0c:	4a2f      	ldr	r2, [pc, #188]	; (cacc <socket+0x164>)
    ca0e:	8813      	ldrh	r3, [r2, #0]
    ca10:	3301      	adds	r3, #1
    ca12:	b29b      	uxth	r3, r3
    ca14:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    ca16:	8813      	ldrh	r3, [r2, #0]
    ca18:	b29b      	uxth	r3, r3
    ca1a:	2b00      	cmp	r3, #0
    ca1c:	d103      	bne.n	ca26 <socket+0xbe>
				++gu16SessionID;
    ca1e:	8813      	ldrh	r3, [r2, #0]
    ca20:	3301      	adds	r3, #1
    ca22:	b29b      	uxth	r3, r3
    ca24:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    ca26:	4e29      	ldr	r6, [pc, #164]	; (cacc <socket+0x164>)
    ca28:	8833      	ldrh	r3, [r6, #0]
    ca2a:	b29b      	uxth	r3, r3
    ca2c:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    ca2e:	4828      	ldr	r0, [pc, #160]	; (cad0 <socket+0x168>)
    ca30:	4f28      	ldr	r7, [pc, #160]	; (cad4 <socket+0x16c>)
    ca32:	47b8      	blx	r7
    ca34:	8832      	ldrh	r2, [r6, #0]
    ca36:	b292      	uxth	r2, r2
    ca38:	0029      	movs	r1, r5
    ca3a:	4827      	ldr	r0, [pc, #156]	; (cad8 <socket+0x170>)
    ca3c:	47b8      	blx	r7
    ca3e:	200d      	movs	r0, #13
    ca40:	4b26      	ldr	r3, [pc, #152]	; (cadc <socket+0x174>)
    ca42:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    ca44:	9b05      	ldr	r3, [sp, #20]
    ca46:	07db      	lsls	r3, r3, #31
    ca48:	d59e      	bpl.n	c988 <socket+0x20>
				strSSLCreate.sslSock = sock;
    ca4a:	aa07      	add	r2, sp, #28
    ca4c:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    ca4e:	2321      	movs	r3, #33	; 0x21
    ca50:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    ca52:	2300      	movs	r3, #0
    ca54:	9302      	str	r3, [sp, #8]
    ca56:	9301      	str	r3, [sp, #4]
    ca58:	9300      	str	r3, [sp, #0]
    ca5a:	3304      	adds	r3, #4
    ca5c:	2150      	movs	r1, #80	; 0x50
    ca5e:	2002      	movs	r0, #2
    ca60:	4c1f      	ldr	r4, [pc, #124]	; (cae0 <socket+0x178>)
    ca62:	47a0      	blx	r4
    ca64:	e790      	b.n	c988 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    ca66:	4b1f      	ldr	r3, [pc, #124]	; (cae4 <socket+0x17c>)
    ca68:	781d      	ldrb	r5, [r3, #0]
    ca6a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    ca6c:	781c      	ldrb	r4, [r3, #0]
    ca6e:	0124      	lsls	r4, r4, #4
    ca70:	4a1d      	ldr	r2, [pc, #116]	; (cae8 <socket+0x180>)
    ca72:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    ca74:	7819      	ldrb	r1, [r3, #0]
    ca76:	3101      	adds	r1, #1
    ca78:	2203      	movs	r2, #3
    ca7a:	400a      	ands	r2, r1
    ca7c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    ca7e:	7aa3      	ldrb	r3, [r4, #10]
    ca80:	2b00      	cmp	r3, #0
    ca82:	d014      	beq.n	caae <socket+0x146>
    ca84:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    ca86:	4917      	ldr	r1, [pc, #92]	; (cae4 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    ca88:	4f17      	ldr	r7, [pc, #92]	; (cae8 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    ca8a:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    ca8c:	780d      	ldrb	r5, [r1, #0]
    ca8e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    ca90:	780c      	ldrb	r4, [r1, #0]
    ca92:	0124      	lsls	r4, r4, #4
    ca94:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    ca96:	780b      	ldrb	r3, [r1, #0]
    ca98:	3301      	adds	r3, #1
    ca9a:	4003      	ands	r3, r0
    ca9c:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    ca9e:	7aa3      	ldrb	r3, [r4, #10]
    caa0:	2b00      	cmp	r3, #0
    caa2:	d004      	beq.n	caae <socket+0x146>
    caa4:	3a01      	subs	r2, #1
    caa6:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    caa8:	2a00      	cmp	r2, #0
    caaa:	d1ef      	bne.n	ca8c <socket+0x124>
    caac:	e76a      	b.n	c984 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    caae:	3507      	adds	r5, #7
    cab0:	b26d      	sxtb	r5, r5
					break;
    cab2:	e7a2      	b.n	c9fa <socket+0x92>
	SOCKET					sock = -1;
    cab4:	2501      	movs	r5, #1
    cab6:	426d      	negs	r5, r5
    cab8:	e766      	b.n	c988 <socket+0x20>
    caba:	46c0      	nop			; (mov r8, r8)
    cabc:	20000240 	.word	0x20000240
    cac0:	000116cd 	.word	0x000116cd
    cac4:	20000464 	.word	0x20000464
    cac8:	0000a0f5 	.word	0x0000a0f5
    cacc:	2000023e 	.word	0x2000023e
    cad0:	0001346c 	.word	0x0001346c
    cad4:	00011941 	.word	0x00011941
    cad8:	00013efc 	.word	0x00013efc
    cadc:	00011975 	.word	0x00011975
    cae0:	0000a22d 	.word	0x0000a22d
    cae4:	20000241 	.word	0x20000241
    cae8:	200004d4 	.word	0x200004d4

0000caec <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    caec:	b570      	push	{r4, r5, r6, lr}
    caee:	b088      	sub	sp, #32
    caf0:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    caf2:	db30      	blt.n	cb56 <connect+0x6a>
    caf4:	2900      	cmp	r1, #0
    caf6:	d031      	beq.n	cb5c <connect+0x70>
    caf8:	0100      	lsls	r0, r0, #4
    cafa:	4b1d      	ldr	r3, [pc, #116]	; (cb70 <connect+0x84>)
    cafc:	181b      	adds	r3, r3, r0
    cafe:	7a9b      	ldrb	r3, [r3, #10]
    cb00:	2b01      	cmp	r3, #1
    cb02:	d12e      	bne.n	cb62 <connect+0x76>
    cb04:	2a00      	cmp	r2, #0
    cb06:	d02f      	beq.n	cb68 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    cb08:	4b19      	ldr	r3, [pc, #100]	; (cb70 <connect+0x84>)
    cb0a:	181b      	adds	r3, r3, r0
    cb0c:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    cb0e:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    cb10:	07db      	lsls	r3, r3, #31
    cb12:	d505      	bpl.n	cb20 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    cb14:	4b16      	ldr	r3, [pc, #88]	; (cb70 <connect+0x84>)
    cb16:	181b      	adds	r3, r3, r0
    cb18:	7ada      	ldrb	r2, [r3, #11]
    cb1a:	ab05      	add	r3, sp, #20
    cb1c:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    cb1e:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    cb20:	ad05      	add	r5, sp, #20
    cb22:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    cb24:	2208      	movs	r2, #8
    cb26:	0028      	movs	r0, r5
    cb28:	4b12      	ldr	r3, [pc, #72]	; (cb74 <connect+0x88>)
    cb2a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    cb2c:	0124      	lsls	r4, r4, #4
    cb2e:	4b10      	ldr	r3, [pc, #64]	; (cb70 <connect+0x84>)
    cb30:	191c      	adds	r4, r3, r4
    cb32:	88e3      	ldrh	r3, [r4, #6]
    cb34:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    cb36:	2300      	movs	r3, #0
    cb38:	9302      	str	r3, [sp, #8]
    cb3a:	9301      	str	r3, [sp, #4]
    cb3c:	9300      	str	r3, [sp, #0]
    cb3e:	330c      	adds	r3, #12
    cb40:	002a      	movs	r2, r5
    cb42:	0031      	movs	r1, r6
    cb44:	2002      	movs	r0, #2
    cb46:	4c0c      	ldr	r4, [pc, #48]	; (cb78 <connect+0x8c>)
    cb48:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    cb4a:	2800      	cmp	r0, #0
    cb4c:	d001      	beq.n	cb52 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    cb4e:	2009      	movs	r0, #9
    cb50:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    cb52:	b008      	add	sp, #32
    cb54:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    cb56:	2006      	movs	r0, #6
    cb58:	4240      	negs	r0, r0
    cb5a:	e7fa      	b.n	cb52 <connect+0x66>
    cb5c:	2006      	movs	r0, #6
    cb5e:	4240      	negs	r0, r0
    cb60:	e7f7      	b.n	cb52 <connect+0x66>
    cb62:	2006      	movs	r0, #6
    cb64:	4240      	negs	r0, r0
    cb66:	e7f4      	b.n	cb52 <connect+0x66>
    cb68:	2006      	movs	r0, #6
    cb6a:	4240      	negs	r0, r0
    cb6c:	e7f1      	b.n	cb52 <connect+0x66>
    cb6e:	46c0      	nop			; (mov r8, r8)
    cb70:	20000464 	.word	0x20000464
    cb74:	0000a0e1 	.word	0x0000a0e1
    cb78:	0000a22d 	.word	0x0000a22d

0000cb7c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    cb7c:	b530      	push	{r4, r5, lr}
    cb7e:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    cb80:	2800      	cmp	r0, #0
    cb82:	db36      	blt.n	cbf2 <send+0x76>
    cb84:	2900      	cmp	r1, #0
    cb86:	d037      	beq.n	cbf8 <send+0x7c>
    cb88:	23af      	movs	r3, #175	; 0xaf
    cb8a:	00db      	lsls	r3, r3, #3
    cb8c:	429a      	cmp	r2, r3
    cb8e:	d836      	bhi.n	cbfe <send+0x82>
    cb90:	0104      	lsls	r4, r0, #4
    cb92:	4b1e      	ldr	r3, [pc, #120]	; (cc0c <send+0x90>)
    cb94:	191b      	adds	r3, r3, r4
    cb96:	7a9b      	ldrb	r3, [r3, #10]
    cb98:	2b01      	cmp	r3, #1
    cb9a:	d133      	bne.n	cc04 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    cb9c:	ab04      	add	r3, sp, #16
    cb9e:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    cba0:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    cba2:	0025      	movs	r5, r4
    cba4:	4c19      	ldr	r4, [pc, #100]	; (cc0c <send+0x90>)
    cba6:	1964      	adds	r4, r4, r5
    cba8:	88e4      	ldrh	r4, [r4, #6]
    cbaa:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    cbac:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    cbae:	2806      	cmp	r0, #6
    cbb0:	dd00      	ble.n	cbb4 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    cbb2:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    cbb4:	0104      	lsls	r4, r0, #4
    cbb6:	4b15      	ldr	r3, [pc, #84]	; (cc0c <send+0x90>)
    cbb8:	191b      	adds	r3, r3, r4
    cbba:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    cbbc:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    cbbe:	07e4      	lsls	r4, r4, #31
    cbc0:	d505      	bpl.n	cbce <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    cbc2:	0100      	lsls	r0, r0, #4
    cbc4:	4b11      	ldr	r3, [pc, #68]	; (cc0c <send+0x90>)
    cbc6:	1818      	adds	r0, r3, r0
    cbc8:	8905      	ldrh	r5, [r0, #8]
    cbca:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    cbcc:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    cbce:	2080      	movs	r0, #128	; 0x80
    cbd0:	4318      	orrs	r0, r3
    cbd2:	9502      	str	r5, [sp, #8]
    cbd4:	9201      	str	r2, [sp, #4]
    cbd6:	9100      	str	r1, [sp, #0]
    cbd8:	2310      	movs	r3, #16
    cbda:	aa04      	add	r2, sp, #16
    cbdc:	0001      	movs	r1, r0
    cbde:	2002      	movs	r0, #2
    cbe0:	4c0b      	ldr	r4, [pc, #44]	; (cc10 <send+0x94>)
    cbe2:	47a0      	blx	r4
    cbe4:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    cbe6:	2800      	cmp	r0, #0
    cbe8:	d000      	beq.n	cbec <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    cbea:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    cbec:	0018      	movs	r0, r3
    cbee:	b009      	add	sp, #36	; 0x24
    cbf0:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    cbf2:	2306      	movs	r3, #6
    cbf4:	425b      	negs	r3, r3
    cbf6:	e7f9      	b.n	cbec <send+0x70>
    cbf8:	2306      	movs	r3, #6
    cbfa:	425b      	negs	r3, r3
    cbfc:	e7f6      	b.n	cbec <send+0x70>
    cbfe:	2306      	movs	r3, #6
    cc00:	425b      	negs	r3, r3
    cc02:	e7f3      	b.n	cbec <send+0x70>
    cc04:	2306      	movs	r3, #6
    cc06:	425b      	negs	r3, r3
    cc08:	e7f0      	b.n	cbec <send+0x70>
    cc0a:	46c0      	nop			; (mov r8, r8)
    cc0c:	20000464 	.word	0x20000464
    cc10:	0000a22d 	.word	0x0000a22d

0000cc14 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    cc14:	b530      	push	{r4, r5, lr}
    cc16:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    cc18:	2800      	cmp	r0, #0
    cc1a:	db34      	blt.n	cc86 <recv+0x72>
    cc1c:	2900      	cmp	r1, #0
    cc1e:	d035      	beq.n	cc8c <recv+0x78>
    cc20:	2a00      	cmp	r2, #0
    cc22:	d036      	beq.n	cc92 <recv+0x7e>
    cc24:	0105      	lsls	r5, r0, #4
    cc26:	4c1e      	ldr	r4, [pc, #120]	; (cca0 <recv+0x8c>)
    cc28:	1964      	adds	r4, r4, r5
    cc2a:	7aa4      	ldrb	r4, [r4, #10]
    cc2c:	2c01      	cmp	r4, #1
    cc2e:	d133      	bne.n	cc98 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    cc30:	4c1b      	ldr	r4, [pc, #108]	; (cca0 <recv+0x8c>)
    cc32:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    cc34:	1964      	adds	r4, r4, r5
    cc36:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    cc38:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    cc3a:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    cc3c:	2900      	cmp	r1, #0
    cc3e:	d11d      	bne.n	cc7c <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    cc40:	2101      	movs	r1, #1
    cc42:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    cc44:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    cc46:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    cc48:	07d2      	lsls	r2, r2, #31
    cc4a:	d500      	bpl.n	cc4e <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    cc4c:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    cc4e:	2b00      	cmp	r3, #0
    cc50:	d117      	bne.n	cc82 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    cc52:	3b01      	subs	r3, #1
    cc54:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    cc56:	aa04      	add	r2, sp, #16
    cc58:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    cc5a:	0100      	lsls	r0, r0, #4
    cc5c:	4b10      	ldr	r3, [pc, #64]	; (cca0 <recv+0x8c>)
    cc5e:	1818      	adds	r0, r3, r0
    cc60:	88c3      	ldrh	r3, [r0, #6]
    cc62:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    cc64:	2300      	movs	r3, #0
    cc66:	9302      	str	r3, [sp, #8]
    cc68:	9301      	str	r3, [sp, #4]
    cc6a:	9300      	str	r3, [sp, #0]
    cc6c:	3308      	adds	r3, #8
    cc6e:	2002      	movs	r0, #2
    cc70:	4c0c      	ldr	r4, [pc, #48]	; (cca4 <recv+0x90>)
    cc72:	47a0      	blx	r4
    cc74:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    cc76:	2800      	cmp	r0, #0
    cc78:	d000      	beq.n	cc7c <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    cc7a:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    cc7c:	0010      	movs	r0, r2
    cc7e:	b007      	add	sp, #28
    cc80:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    cc82:	9304      	str	r3, [sp, #16]
    cc84:	e7e7      	b.n	cc56 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    cc86:	2206      	movs	r2, #6
    cc88:	4252      	negs	r2, r2
    cc8a:	e7f7      	b.n	cc7c <recv+0x68>
    cc8c:	2206      	movs	r2, #6
    cc8e:	4252      	negs	r2, r2
    cc90:	e7f4      	b.n	cc7c <recv+0x68>
    cc92:	2206      	movs	r2, #6
    cc94:	4252      	negs	r2, r2
    cc96:	e7f1      	b.n	cc7c <recv+0x68>
    cc98:	2206      	movs	r2, #6
    cc9a:	4252      	negs	r2, r2
    cc9c:	e7ee      	b.n	cc7c <recv+0x68>
    cc9e:	46c0      	nop			; (mov r8, r8)
    cca0:	20000464 	.word	0x20000464
    cca4:	0000a22d 	.word	0x0000a22d

0000cca8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    cca8:	b530      	push	{r4, r5, lr}
    ccaa:	b087      	sub	sp, #28
    ccac:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    ccae:	481e      	ldr	r0, [pc, #120]	; (cd28 <close+0x80>)
    ccb0:	4d1e      	ldr	r5, [pc, #120]	; (cd2c <close+0x84>)
    ccb2:	47a8      	blx	r5
    ccb4:	0021      	movs	r1, r4
    ccb6:	481e      	ldr	r0, [pc, #120]	; (cd30 <close+0x88>)
    ccb8:	47a8      	blx	r5
    ccba:	200d      	movs	r0, #13
    ccbc:	4b1d      	ldr	r3, [pc, #116]	; (cd34 <close+0x8c>)
    ccbe:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    ccc0:	2c00      	cmp	r4, #0
    ccc2:	db2a      	blt.n	cd1a <close+0x72>
    ccc4:	0122      	lsls	r2, r4, #4
    ccc6:	4b1c      	ldr	r3, [pc, #112]	; (cd38 <close+0x90>)
    ccc8:	189b      	adds	r3, r3, r2
    ccca:	7a9b      	ldrb	r3, [r3, #10]
    cccc:	2b01      	cmp	r3, #1
    ccce:	d127      	bne.n	cd20 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    ccd0:	a905      	add	r1, sp, #20
    ccd2:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    ccd4:	4b18      	ldr	r3, [pc, #96]	; (cd38 <close+0x90>)
    ccd6:	189b      	adds	r3, r3, r2
    ccd8:	88da      	ldrh	r2, [r3, #6]
    ccda:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    ccdc:	2200      	movs	r2, #0
    ccde:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    cce0:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    cce2:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    cce4:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    cce6:	07db      	lsls	r3, r3, #31
    cce8:	d500      	bpl.n	ccec <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    ccea:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    ccec:	2300      	movs	r3, #0
    ccee:	9302      	str	r3, [sp, #8]
    ccf0:	9301      	str	r3, [sp, #4]
    ccf2:	9300      	str	r3, [sp, #0]
    ccf4:	3304      	adds	r3, #4
    ccf6:	aa05      	add	r2, sp, #20
    ccf8:	2002      	movs	r0, #2
    ccfa:	4d10      	ldr	r5, [pc, #64]	; (cd3c <close+0x94>)
    ccfc:	47a8      	blx	r5
    ccfe:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    cd00:	d001      	beq.n	cd06 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    cd02:	2509      	movs	r5, #9
    cd04:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    cd06:	0124      	lsls	r4, r4, #4
    cd08:	480b      	ldr	r0, [pc, #44]	; (cd38 <close+0x90>)
    cd0a:	1820      	adds	r0, r4, r0
    cd0c:	2210      	movs	r2, #16
    cd0e:	2100      	movs	r1, #0
    cd10:	4b0b      	ldr	r3, [pc, #44]	; (cd40 <close+0x98>)
    cd12:	4798      	blx	r3
	}
	return s8Ret;
}
    cd14:	0028      	movs	r0, r5
    cd16:	b007      	add	sp, #28
    cd18:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    cd1a:	2506      	movs	r5, #6
    cd1c:	426d      	negs	r5, r5
    cd1e:	e7f9      	b.n	cd14 <close+0x6c>
    cd20:	2506      	movs	r5, #6
    cd22:	426d      	negs	r5, r5
    cd24:	e7f6      	b.n	cd14 <close+0x6c>
    cd26:	46c0      	nop			; (mov r8, r8)
    cd28:	0001346c 	.word	0x0001346c
    cd2c:	00011941 	.word	0x00011941
    cd30:	00013ee4 	.word	0x00013ee4
    cd34:	00011975 	.word	0x00011975
    cd38:	20000464 	.word	0x20000464
    cd3c:	0000a22d 	.word	0x0000a22d
    cd40:	0000a0f5 	.word	0x0000a0f5

0000cd44 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    cd44:	b570      	push	{r4, r5, r6, lr}
    cd46:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    cd48:	2300      	movs	r3, #0
    cd4a:	9301      	str	r3, [sp, #4]
    cd4c:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    cd4e:	2100      	movs	r1, #0
    cd50:	7802      	ldrb	r2, [r0, #0]
    cd52:	1c44      	adds	r4, r0, #1
    cd54:	3005      	adds	r0, #5
    cd56:	000b      	movs	r3, r1
    cd58:	e009      	b.n	cd6e <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    cd5a:	009d      	lsls	r5, r3, #2
    cd5c:	195b      	adds	r3, r3, r5
    cd5e:	005b      	lsls	r3, r3, #1
    cd60:	189b      	adds	r3, r3, r2
    cd62:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    cd64:	0022      	movs	r2, r4
    cd66:	3401      	adds	r4, #1
			if(j > 4)
    cd68:	42a0      	cmp	r0, r4
    cd6a:	d00a      	beq.n	cd82 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    cd6c:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    cd6e:	2a2e      	cmp	r2, #46	; 0x2e
    cd70:	d00a      	beq.n	cd88 <nmi_inet_addr+0x44>
    cd72:	2a00      	cmp	r2, #0
    cd74:	d00c      	beq.n	cd90 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    cd76:	3a30      	subs	r2, #48	; 0x30
    cd78:	b2d2      	uxtb	r2, r2
    cd7a:	2a09      	cmp	r2, #9
    cd7c:	d9ed      	bls.n	cd5a <nmi_inet_addr+0x16>
				return 0;
    cd7e:	2000      	movs	r0, #0
    cd80:	e000      	b.n	cd84 <nmi_inet_addr+0x40>
				return 0;
    cd82:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    cd84:	b002      	add	sp, #8
    cd86:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    cd88:	466a      	mov	r2, sp
    cd8a:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    cd8c:	0020      	movs	r0, r4
    cd8e:	e002      	b.n	cd96 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    cd90:	466a      	mov	r2, sp
    cd92:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    cd94:	0020      	movs	r0, r4
    cd96:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    cd98:	2e04      	cmp	r6, #4
    cd9a:	d1d9      	bne.n	cd50 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    cd9c:	2204      	movs	r2, #4
    cd9e:	4669      	mov	r1, sp
    cda0:	a801      	add	r0, sp, #4
    cda2:	4b02      	ldr	r3, [pc, #8]	; (cdac <nmi_inet_addr+0x68>)
    cda4:	4798      	blx	r3
	return u32IP;
    cda6:	9801      	ldr	r0, [sp, #4]
    cda8:	e7ec      	b.n	cd84 <nmi_inet_addr+0x40>
    cdaa:	46c0      	nop			; (mov r8, r8)
    cdac:	0000a0e1 	.word	0x0000a0e1

0000cdb0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    cdb0:	b510      	push	{r4, lr}
    cdb2:	b084      	sub	sp, #16
    cdb4:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    cdb6:	4b0b      	ldr	r3, [pc, #44]	; (cde4 <gethostbyname+0x34>)
    cdb8:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    cdba:	b2c3      	uxtb	r3, r0
    cdbc:	2b40      	cmp	r3, #64	; 0x40
    cdbe:	d80d      	bhi.n	cddc <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    cdc0:	23ff      	movs	r3, #255	; 0xff
    cdc2:	4003      	ands	r3, r0
    cdc4:	3301      	adds	r3, #1
    cdc6:	2200      	movs	r2, #0
    cdc8:	9202      	str	r2, [sp, #8]
    cdca:	9201      	str	r2, [sp, #4]
    cdcc:	9200      	str	r2, [sp, #0]
    cdce:	0022      	movs	r2, r4
    cdd0:	214a      	movs	r1, #74	; 0x4a
    cdd2:	2002      	movs	r0, #2
    cdd4:	4c04      	ldr	r4, [pc, #16]	; (cde8 <gethostbyname+0x38>)
    cdd6:	47a0      	blx	r4
	}
	return s8Err;
}
    cdd8:	b004      	add	sp, #16
    cdda:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    cddc:	2006      	movs	r0, #6
    cdde:	4240      	negs	r0, r0
    cde0:	e7fa      	b.n	cdd8 <gethostbyname+0x28>
    cde2:	46c0      	nop			; (mov r8, r8)
    cde4:	0000a105 	.word	0x0000a105
    cde8:	0000a22d 	.word	0x0000a22d

0000cdec <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    cdec:	b570      	push	{r4, r5, r6, lr}
    cdee:	b082      	sub	sp, #8
    cdf0:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    cdf2:	4b2a      	ldr	r3, [pc, #168]	; (ce9c <spi_flash_enable+0xb0>)
    cdf4:	4798      	blx	r3
    cdf6:	0500      	lsls	r0, r0, #20
    cdf8:	0d00      	lsrs	r0, r0, #20
    cdfa:	4b29      	ldr	r3, [pc, #164]	; (cea0 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    cdfc:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    cdfe:	4298      	cmp	r0, r3
    ce00:	d802      	bhi.n	ce08 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    ce02:	0028      	movs	r0, r5
    ce04:	b002      	add	sp, #8
    ce06:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    ce08:	a901      	add	r1, sp, #4
    ce0a:	4826      	ldr	r0, [pc, #152]	; (cea4 <spi_flash_enable+0xb8>)
    ce0c:	4b26      	ldr	r3, [pc, #152]	; (cea8 <spi_flash_enable+0xbc>)
    ce0e:	4798      	blx	r3
    ce10:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    ce12:	d1f6      	bne.n	ce02 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    ce14:	4b25      	ldr	r3, [pc, #148]	; (ceac <spi_flash_enable+0xc0>)
    ce16:	9a01      	ldr	r2, [sp, #4]
    ce18:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    ce1a:	4925      	ldr	r1, [pc, #148]	; (ceb0 <spi_flash_enable+0xc4>)
    ce1c:	4319      	orrs	r1, r3
    ce1e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    ce20:	4820      	ldr	r0, [pc, #128]	; (cea4 <spi_flash_enable+0xb8>)
    ce22:	4b24      	ldr	r3, [pc, #144]	; (ceb4 <spi_flash_enable+0xc8>)
    ce24:	4798      	blx	r3
		if(enable) {
    ce26:	2c00      	cmp	r4, #0
    ce28:	d020      	beq.n	ce6c <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    ce2a:	2100      	movs	r1, #0
    ce2c:	4822      	ldr	r0, [pc, #136]	; (ceb8 <spi_flash_enable+0xcc>)
    ce2e:	4c21      	ldr	r4, [pc, #132]	; (ceb4 <spi_flash_enable+0xc8>)
    ce30:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    ce32:	21ab      	movs	r1, #171	; 0xab
    ce34:	4821      	ldr	r0, [pc, #132]	; (cebc <spi_flash_enable+0xd0>)
    ce36:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    ce38:	2101      	movs	r1, #1
    ce3a:	4821      	ldr	r0, [pc, #132]	; (cec0 <spi_flash_enable+0xd4>)
    ce3c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    ce3e:	2100      	movs	r1, #0
    ce40:	4820      	ldr	r0, [pc, #128]	; (cec4 <spi_flash_enable+0xd8>)
    ce42:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    ce44:	2181      	movs	r1, #129	; 0x81
    ce46:	4820      	ldr	r0, [pc, #128]	; (cec8 <spi_flash_enable+0xdc>)
    ce48:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    ce4a:	4e20      	ldr	r6, [pc, #128]	; (cecc <spi_flash_enable+0xe0>)
    ce4c:	4c20      	ldr	r4, [pc, #128]	; (ced0 <spi_flash_enable+0xe4>)
    ce4e:	0030      	movs	r0, r6
    ce50:	47a0      	blx	r4
    ce52:	2801      	cmp	r0, #1
    ce54:	d1fb      	bne.n	ce4e <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    ce56:	4b15      	ldr	r3, [pc, #84]	; (ceac <spi_flash_enable+0xc0>)
    ce58:	9a01      	ldr	r2, [sp, #4]
    ce5a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    ce5c:	2180      	movs	r1, #128	; 0x80
    ce5e:	0249      	lsls	r1, r1, #9
    ce60:	4319      	orrs	r1, r3
    ce62:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    ce64:	480f      	ldr	r0, [pc, #60]	; (cea4 <spi_flash_enable+0xb8>)
    ce66:	4b13      	ldr	r3, [pc, #76]	; (ceb4 <spi_flash_enable+0xc8>)
    ce68:	4798      	blx	r3
    ce6a:	e7ca      	b.n	ce02 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    ce6c:	2100      	movs	r1, #0
    ce6e:	4812      	ldr	r0, [pc, #72]	; (ceb8 <spi_flash_enable+0xcc>)
    ce70:	4c10      	ldr	r4, [pc, #64]	; (ceb4 <spi_flash_enable+0xc8>)
    ce72:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    ce74:	21b9      	movs	r1, #185	; 0xb9
    ce76:	4811      	ldr	r0, [pc, #68]	; (cebc <spi_flash_enable+0xd0>)
    ce78:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    ce7a:	2101      	movs	r1, #1
    ce7c:	4810      	ldr	r0, [pc, #64]	; (cec0 <spi_flash_enable+0xd4>)
    ce7e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    ce80:	2100      	movs	r1, #0
    ce82:	4810      	ldr	r0, [pc, #64]	; (cec4 <spi_flash_enable+0xd8>)
    ce84:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    ce86:	2181      	movs	r1, #129	; 0x81
    ce88:	480f      	ldr	r0, [pc, #60]	; (cec8 <spi_flash_enable+0xdc>)
    ce8a:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    ce8c:	4e0f      	ldr	r6, [pc, #60]	; (cecc <spi_flash_enable+0xe0>)
    ce8e:	4c10      	ldr	r4, [pc, #64]	; (ced0 <spi_flash_enable+0xe4>)
    ce90:	0030      	movs	r0, r6
    ce92:	47a0      	blx	r4
    ce94:	2801      	cmp	r0, #1
    ce96:	d1fb      	bne.n	ce90 <spi_flash_enable+0xa4>
    ce98:	e7dd      	b.n	ce56 <spi_flash_enable+0x6a>
    ce9a:	46c0      	nop			; (mov r8, r8)
    ce9c:	0000b12d 	.word	0x0000b12d
    cea0:	0000039f 	.word	0x0000039f
    cea4:	00001410 	.word	0x00001410
    cea8:	0000b57d 	.word	0x0000b57d
    ceac:	f8888fff 	.word	0xf8888fff
    ceb0:	01111000 	.word	0x01111000
    ceb4:	0000b589 	.word	0x0000b589
    ceb8:	00010208 	.word	0x00010208
    cebc:	0001020c 	.word	0x0001020c
    cec0:	00010214 	.word	0x00010214
    cec4:	0001021c 	.word	0x0001021c
    cec8:	00010204 	.word	0x00010204
    cecc:	00010218 	.word	0x00010218
    ced0:	0000b571 	.word	0x0000b571

0000ced4 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    ced4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ced6:	46c6      	mov	lr, r8
    ced8:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    ceda:	2303      	movs	r3, #3
    cedc:	0007      	movs	r7, r0
    cede:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    cee0:	6813      	ldr	r3, [r2, #0]
    cee2:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    cee4:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    cee6:	2903      	cmp	r1, #3
    cee8:	d902      	bls.n	cef0 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    ceea:	4244      	negs	r4, r0
    ceec:	2003      	movs	r0, #3
    ceee:	4004      	ands	r4, r0
	}

	if (temp_length) {
    cef0:	2c00      	cmp	r4, #0
    cef2:	d016      	beq.n	cf22 <crc32_recalculate+0x4e>
		length -= temp_length;
    cef4:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    cef6:	1d3e      	adds	r6, r7, #4
    cef8:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    cefa:	00e0      	lsls	r0, r4, #3
    cefc:	4240      	negs	r0, r0
    cefe:	3020      	adds	r0, #32
    cf00:	40c5      	lsrs	r5, r0
	crc ^= data;
    cf02:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    cf04:	00e0      	lsls	r0, r4, #3
    cf06:	d019      	beq.n	cf3c <crc32_recalculate+0x68>
		if (crc & 1) {
    cf08:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    cf0a:	4d27      	ldr	r5, [pc, #156]	; (cfa8 <crc32_recalculate+0xd4>)
    cf0c:	e003      	b.n	cf16 <crc32_recalculate+0x42>
			crc >>= 1;
    cf0e:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    cf10:	3801      	subs	r0, #1
    cf12:	2800      	cmp	r0, #0
    cf14:	d004      	beq.n	cf20 <crc32_recalculate+0x4c>
		if (crc & 1) {
    cf16:	421c      	tst	r4, r3
    cf18:	d0f9      	beq.n	cf0e <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    cf1a:	085b      	lsrs	r3, r3, #1
    cf1c:	406b      	eors	r3, r5
    cf1e:	e7f7      	b.n	cf10 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    cf20:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    cf22:	2003      	movs	r0, #3
    cf24:	000c      	movs	r4, r1
    cf26:	4384      	bics	r4, r0

	if (temp_length) {
    cf28:	d01e      	beq.n	cf68 <crc32_recalculate+0x94>
		length -= temp_length;
    cf2a:	1b08      	subs	r0, r1, r4
    cf2c:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    cf2e:	0889      	lsrs	r1, r1, #2
    cf30:	4688      	mov	r8, r1
    cf32:	003e      	movs	r6, r7
    cf34:	000d      	movs	r5, r1
		if (crc & 1) {
    cf36:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    cf38:	4c1b      	ldr	r4, [pc, #108]	; (cfa8 <crc32_recalculate+0xd4>)

		while (temp_length--) {
    cf3a:	e00b      	b.n	cf54 <crc32_recalculate+0x80>
		word = *(word_ptr++);
    cf3c:	0037      	movs	r7, r6
    cf3e:	e7f0      	b.n	cf22 <crc32_recalculate+0x4e>
			crc >>= 1;
    cf40:	085b      	lsrs	r3, r3, #1
    cf42:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    cf44:	2900      	cmp	r1, #0
    cf46:	d004      	beq.n	cf52 <crc32_recalculate+0x7e>
		if (crc & 1) {
    cf48:	4218      	tst	r0, r3
    cf4a:	d0f9      	beq.n	cf40 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    cf4c:	085b      	lsrs	r3, r3, #1
    cf4e:	4063      	eors	r3, r4
    cf50:	e7f7      	b.n	cf42 <crc32_recalculate+0x6e>
    cf52:	3604      	adds	r6, #4
		while (temp_length--) {
    cf54:	3d01      	subs	r5, #1
    cf56:	d303      	bcc.n	cf60 <crc32_recalculate+0x8c>
	crc ^= data;
    cf58:	6831      	ldr	r1, [r6, #0]
    cf5a:	404b      	eors	r3, r1
    cf5c:	2120      	movs	r1, #32
    cf5e:	e7f3      	b.n	cf48 <crc32_recalculate+0x74>
    cf60:	4641      	mov	r1, r8
    cf62:	0089      	lsls	r1, r1, #2
    cf64:	187f      	adds	r7, r7, r1
		length -= temp_length;
    cf66:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    cf68:	2900      	cmp	r1, #0
    cf6a:	d017      	beq.n	cf9c <crc32_recalculate+0xc8>
		word = *word_ptr;
    cf6c:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    cf6e:	00c8      	lsls	r0, r1, #3
    cf70:	4240      	negs	r0, r0
    cf72:	3020      	adds	r0, #32
    cf74:	2501      	movs	r5, #1
    cf76:	426d      	negs	r5, r5
    cf78:	40c5      	lsrs	r5, r0
    cf7a:	0028      	movs	r0, r5
    cf7c:	4020      	ands	r0, r4
	crc ^= data;
    cf7e:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    cf80:	00c9      	lsls	r1, r1, #3
    cf82:	d00b      	beq.n	cf9c <crc32_recalculate+0xc8>
		if (crc & 1) {
    cf84:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    cf86:	4c08      	ldr	r4, [pc, #32]	; (cfa8 <crc32_recalculate+0xd4>)
    cf88:	e003      	b.n	cf92 <crc32_recalculate+0xbe>
			crc >>= 1;
    cf8a:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    cf8c:	3901      	subs	r1, #1
    cf8e:	2900      	cmp	r1, #0
    cf90:	d004      	beq.n	cf9c <crc32_recalculate+0xc8>
		if (crc & 1) {
    cf92:	4218      	tst	r0, r3
    cf94:	d0f9      	beq.n	cf8a <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    cf96:	085b      	lsrs	r3, r3, #1
    cf98:	4063      	eors	r3, r4
    cf9a:	e7f7      	b.n	cf8c <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    cf9c:	43db      	mvns	r3, r3
    cf9e:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    cfa0:	2000      	movs	r0, #0
    cfa2:	bc04      	pop	{r2}
    cfa4:	4690      	mov	r8, r2
    cfa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cfa8:	edb88320 	.word	0xedb88320

0000cfac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    cfac:	4b0c      	ldr	r3, [pc, #48]	; (cfe0 <cpu_irq_enter_critical+0x34>)
    cfae:	681b      	ldr	r3, [r3, #0]
    cfb0:	2b00      	cmp	r3, #0
    cfb2:	d106      	bne.n	cfc2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    cfb4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    cfb8:	2b00      	cmp	r3, #0
    cfba:	d007      	beq.n	cfcc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    cfbc:	2200      	movs	r2, #0
    cfbe:	4b09      	ldr	r3, [pc, #36]	; (cfe4 <cpu_irq_enter_critical+0x38>)
    cfc0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    cfc2:	4a07      	ldr	r2, [pc, #28]	; (cfe0 <cpu_irq_enter_critical+0x34>)
    cfc4:	6813      	ldr	r3, [r2, #0]
    cfc6:	3301      	adds	r3, #1
    cfc8:	6013      	str	r3, [r2, #0]
}
    cfca:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    cfcc:	b672      	cpsid	i
    cfce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    cfd2:	2200      	movs	r2, #0
    cfd4:	4b04      	ldr	r3, [pc, #16]	; (cfe8 <cpu_irq_enter_critical+0x3c>)
    cfd6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    cfd8:	3201      	adds	r2, #1
    cfda:	4b02      	ldr	r3, [pc, #8]	; (cfe4 <cpu_irq_enter_critical+0x38>)
    cfdc:	701a      	strb	r2, [r3, #0]
    cfde:	e7f0      	b.n	cfc2 <cpu_irq_enter_critical+0x16>
    cfe0:	20000244 	.word	0x20000244
    cfe4:	20000248 	.word	0x20000248
    cfe8:	2000000a 	.word	0x2000000a

0000cfec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    cfec:	4b08      	ldr	r3, [pc, #32]	; (d010 <cpu_irq_leave_critical+0x24>)
    cfee:	681a      	ldr	r2, [r3, #0]
    cff0:	3a01      	subs	r2, #1
    cff2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    cff4:	681b      	ldr	r3, [r3, #0]
    cff6:	2b00      	cmp	r3, #0
    cff8:	d109      	bne.n	d00e <cpu_irq_leave_critical+0x22>
    cffa:	4b06      	ldr	r3, [pc, #24]	; (d014 <cpu_irq_leave_critical+0x28>)
    cffc:	781b      	ldrb	r3, [r3, #0]
    cffe:	2b00      	cmp	r3, #0
    d000:	d005      	beq.n	d00e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    d002:	2201      	movs	r2, #1
    d004:	4b04      	ldr	r3, [pc, #16]	; (d018 <cpu_irq_leave_critical+0x2c>)
    d006:	701a      	strb	r2, [r3, #0]
    d008:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d00c:	b662      	cpsie	i
	}
}
    d00e:	4770      	bx	lr
    d010:	20000244 	.word	0x20000244
    d014:	20000248 	.word	0x20000248
    d018:	2000000a 	.word	0x2000000a

0000d01c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    d01c:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    d01e:	2a00      	cmp	r2, #0
    d020:	d001      	beq.n	d026 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    d022:	0018      	movs	r0, r3
    d024:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    d026:	008b      	lsls	r3, r1, #2
    d028:	4a06      	ldr	r2, [pc, #24]	; (d044 <extint_register_callback+0x28>)
    d02a:	589b      	ldr	r3, [r3, r2]
    d02c:	2b00      	cmp	r3, #0
    d02e:	d003      	beq.n	d038 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    d030:	4283      	cmp	r3, r0
    d032:	d005      	beq.n	d040 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    d034:	231d      	movs	r3, #29
    d036:	e7f4      	b.n	d022 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    d038:	0089      	lsls	r1, r1, #2
    d03a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    d03c:	2300      	movs	r3, #0
    d03e:	e7f0      	b.n	d022 <extint_register_callback+0x6>
		return STATUS_OK;
    d040:	2300      	movs	r3, #0
    d042:	e7ee      	b.n	d022 <extint_register_callback+0x6>
    d044:	20000524 	.word	0x20000524

0000d048 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    d048:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    d04a:	2900      	cmp	r1, #0
    d04c:	d001      	beq.n	d052 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    d04e:	0018      	movs	r0, r3
    d050:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    d052:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    d054:	281f      	cmp	r0, #31
    d056:	d800      	bhi.n	d05a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    d058:	4a02      	ldr	r2, [pc, #8]	; (d064 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    d05a:	2301      	movs	r3, #1
    d05c:	4083      	lsls	r3, r0
    d05e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    d060:	2300      	movs	r3, #0
    d062:	e7f4      	b.n	d04e <extint_chan_enable_callback+0x6>
    d064:	40001800 	.word	0x40001800

0000d068 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    d068:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    d06a:	2900      	cmp	r1, #0
    d06c:	d001      	beq.n	d072 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    d06e:	0018      	movs	r0, r3
    d070:	4770      	bx	lr
		return NULL;
    d072:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    d074:	281f      	cmp	r0, #31
    d076:	d800      	bhi.n	d07a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    d078:	4a02      	ldr	r2, [pc, #8]	; (d084 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    d07a:	2301      	movs	r3, #1
    d07c:	4083      	lsls	r3, r0
    d07e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    d080:	2300      	movs	r3, #0
    d082:	e7f4      	b.n	d06e <extint_chan_disable_callback+0x6>
    d084:	40001800 	.word	0x40001800

0000d088 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    d088:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    d08a:	2200      	movs	r2, #0
    d08c:	4b10      	ldr	r3, [pc, #64]	; (d0d0 <EIC_Handler+0x48>)
    d08e:	701a      	strb	r2, [r3, #0]
    d090:	2300      	movs	r3, #0
    d092:	4910      	ldr	r1, [pc, #64]	; (d0d4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    d094:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    d096:	4e10      	ldr	r6, [pc, #64]	; (d0d8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    d098:	4c0d      	ldr	r4, [pc, #52]	; (d0d0 <EIC_Handler+0x48>)
    d09a:	e00a      	b.n	d0b2 <EIC_Handler+0x2a>
		return eics[eic_index];
    d09c:	490d      	ldr	r1, [pc, #52]	; (d0d4 <EIC_Handler+0x4c>)
    d09e:	e008      	b.n	d0b2 <EIC_Handler+0x2a>
    d0a0:	7823      	ldrb	r3, [r4, #0]
    d0a2:	3301      	adds	r3, #1
    d0a4:	b2db      	uxtb	r3, r3
    d0a6:	7023      	strb	r3, [r4, #0]
    d0a8:	2b0f      	cmp	r3, #15
    d0aa:	d810      	bhi.n	d0ce <EIC_Handler+0x46>
		return NULL;
    d0ac:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    d0ae:	2b1f      	cmp	r3, #31
    d0b0:	d9f4      	bls.n	d09c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    d0b2:	0028      	movs	r0, r5
    d0b4:	4018      	ands	r0, r3
    d0b6:	2201      	movs	r2, #1
    d0b8:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    d0ba:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    d0bc:	4210      	tst	r0, r2
    d0be:	d0ef      	beq.n	d0a0 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    d0c0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    d0c2:	009b      	lsls	r3, r3, #2
    d0c4:	599b      	ldr	r3, [r3, r6]
    d0c6:	2b00      	cmp	r3, #0
    d0c8:	d0ea      	beq.n	d0a0 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    d0ca:	4798      	blx	r3
    d0cc:	e7e8      	b.n	d0a0 <EIC_Handler+0x18>
			}
		}
	}
}
    d0ce:	bd70      	pop	{r4, r5, r6, pc}
    d0d0:	20000520 	.word	0x20000520
    d0d4:	40001800 	.word	0x40001800
    d0d8:	20000524 	.word	0x20000524

0000d0dc <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    d0dc:	4a04      	ldr	r2, [pc, #16]	; (d0f0 <_extint_enable+0x14>)
    d0de:	7813      	ldrb	r3, [r2, #0]
    d0e0:	2102      	movs	r1, #2
    d0e2:	430b      	orrs	r3, r1
    d0e4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    d0e6:	7853      	ldrb	r3, [r2, #1]
    d0e8:	b25b      	sxtb	r3, r3
    d0ea:	2b00      	cmp	r3, #0
    d0ec:	dbfb      	blt.n	d0e6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    d0ee:	4770      	bx	lr
    d0f0:	40001800 	.word	0x40001800

0000d0f4 <_system_extint_init>:
{
    d0f4:	b500      	push	{lr}
    d0f6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    d0f8:	4a12      	ldr	r2, [pc, #72]	; (d144 <_system_extint_init+0x50>)
    d0fa:	6993      	ldr	r3, [r2, #24]
    d0fc:	2140      	movs	r1, #64	; 0x40
    d0fe:	430b      	orrs	r3, r1
    d100:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    d102:	a901      	add	r1, sp, #4
    d104:	2300      	movs	r3, #0
    d106:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    d108:	2005      	movs	r0, #5
    d10a:	4b0f      	ldr	r3, [pc, #60]	; (d148 <_system_extint_init+0x54>)
    d10c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    d10e:	2005      	movs	r0, #5
    d110:	4b0e      	ldr	r3, [pc, #56]	; (d14c <_system_extint_init+0x58>)
    d112:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    d114:	4a0e      	ldr	r2, [pc, #56]	; (d150 <_system_extint_init+0x5c>)
    d116:	7813      	ldrb	r3, [r2, #0]
    d118:	2101      	movs	r1, #1
    d11a:	430b      	orrs	r3, r1
    d11c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    d11e:	7853      	ldrb	r3, [r2, #1]
    d120:	b25b      	sxtb	r3, r3
    d122:	2b00      	cmp	r3, #0
    d124:	dbfb      	blt.n	d11e <_system_extint_init+0x2a>
    d126:	4b0b      	ldr	r3, [pc, #44]	; (d154 <_system_extint_init+0x60>)
    d128:	0019      	movs	r1, r3
    d12a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    d12c:	2200      	movs	r2, #0
    d12e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    d130:	4299      	cmp	r1, r3
    d132:	d1fc      	bne.n	d12e <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d134:	2210      	movs	r2, #16
    d136:	4b08      	ldr	r3, [pc, #32]	; (d158 <_system_extint_init+0x64>)
    d138:	601a      	str	r2, [r3, #0]
	_extint_enable();
    d13a:	4b08      	ldr	r3, [pc, #32]	; (d15c <_system_extint_init+0x68>)
    d13c:	4798      	blx	r3
}
    d13e:	b003      	add	sp, #12
    d140:	bd00      	pop	{pc}
    d142:	46c0      	nop			; (mov r8, r8)
    d144:	40000400 	.word	0x40000400
    d148:	0000ed5d 	.word	0x0000ed5d
    d14c:	0000ecd1 	.word	0x0000ecd1
    d150:	40001800 	.word	0x40001800
    d154:	20000524 	.word	0x20000524
    d158:	e000e100 	.word	0xe000e100
    d15c:	0000d0dd 	.word	0x0000d0dd

0000d160 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    d160:	2300      	movs	r3, #0
    d162:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    d164:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    d166:	2201      	movs	r2, #1
    d168:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    d16a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    d16c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    d16e:	3302      	adds	r3, #2
    d170:	72c3      	strb	r3, [r0, #11]
}
    d172:	4770      	bx	lr

0000d174 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    d174:	b5f0      	push	{r4, r5, r6, r7, lr}
    d176:	b083      	sub	sp, #12
    d178:	0005      	movs	r5, r0
    d17a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    d17c:	a901      	add	r1, sp, #4
    d17e:	2300      	movs	r3, #0
    d180:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    d182:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    d184:	7923      	ldrb	r3, [r4, #4]
    d186:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    d188:	7a23      	ldrb	r3, [r4, #8]
    d18a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    d18c:	7820      	ldrb	r0, [r4, #0]
    d18e:	4b15      	ldr	r3, [pc, #84]	; (d1e4 <extint_chan_set_config+0x70>)
    d190:	4798      	blx	r3
		return NULL;
    d192:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    d194:	2d1f      	cmp	r5, #31
    d196:	d800      	bhi.n	d19a <extint_chan_set_config+0x26>
		return eics[eic_index];
    d198:	4813      	ldr	r0, [pc, #76]	; (d1e8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    d19a:	2207      	movs	r2, #7
    d19c:	402a      	ands	r2, r5
    d19e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    d1a0:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    d1a2:	7aa3      	ldrb	r3, [r4, #10]
    d1a4:	2b00      	cmp	r3, #0
    d1a6:	d001      	beq.n	d1ac <extint_chan_set_config+0x38>
    d1a8:	2308      	movs	r3, #8
    d1aa:	431f      	orrs	r7, r3
    d1ac:	08eb      	lsrs	r3, r5, #3
    d1ae:	009b      	lsls	r3, r3, #2
    d1b0:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    d1b2:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    d1b4:	260f      	movs	r6, #15
    d1b6:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    d1b8:	43b1      	bics	r1, r6
			(new_config << config_pos);
    d1ba:	4097      	lsls	r7, r2
    d1bc:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    d1be:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    d1c0:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    d1c2:	7a63      	ldrb	r3, [r4, #9]
    d1c4:	2b00      	cmp	r3, #0
    d1c6:	d106      	bne.n	d1d6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    d1c8:	6943      	ldr	r3, [r0, #20]
    d1ca:	2201      	movs	r2, #1
    d1cc:	40aa      	lsls	r2, r5
    d1ce:	4393      	bics	r3, r2
    d1d0:	6143      	str	r3, [r0, #20]
	}
}
    d1d2:	b003      	add	sp, #12
    d1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    d1d6:	6942      	ldr	r2, [r0, #20]
    d1d8:	2301      	movs	r3, #1
    d1da:	40ab      	lsls	r3, r5
    d1dc:	4313      	orrs	r3, r2
    d1de:	6143      	str	r3, [r0, #20]
    d1e0:	e7f7      	b.n	d1d2 <extint_chan_set_config+0x5e>
    d1e2:	46c0      	nop			; (mov r8, r8)
    d1e4:	0000ee55 	.word	0x0000ee55
    d1e8:	40001800 	.word	0x40001800

0000d1ec <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    d1ec:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    d1ee:	4a1e      	ldr	r2, [pc, #120]	; (d268 <nvm_set_config+0x7c>)
    d1f0:	69d3      	ldr	r3, [r2, #28]
    d1f2:	2104      	movs	r1, #4
    d1f4:	430b      	orrs	r3, r1
    d1f6:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    d1f8:	4b1c      	ldr	r3, [pc, #112]	; (d26c <nvm_set_config+0x80>)
    d1fa:	2220      	movs	r2, #32
    d1fc:	32ff      	adds	r2, #255	; 0xff
    d1fe:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    d200:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    d202:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    d204:	07d2      	lsls	r2, r2, #31
    d206:	d401      	bmi.n	d20c <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    d208:	0018      	movs	r0, r3
    d20a:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    d20c:	7803      	ldrb	r3, [r0, #0]
    d20e:	021b      	lsls	r3, r3, #8
    d210:	22c0      	movs	r2, #192	; 0xc0
    d212:	0092      	lsls	r2, r2, #2
    d214:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    d216:	7841      	ldrb	r1, [r0, #1]
    d218:	01c9      	lsls	r1, r1, #7
    d21a:	22ff      	movs	r2, #255	; 0xff
    d21c:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    d21e:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    d220:	7881      	ldrb	r1, [r0, #2]
    d222:	0049      	lsls	r1, r1, #1
    d224:	221e      	movs	r2, #30
    d226:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    d228:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    d22a:	78c2      	ldrb	r2, [r0, #3]
    d22c:	0492      	lsls	r2, r2, #18
    d22e:	2180      	movs	r1, #128	; 0x80
    d230:	02c9      	lsls	r1, r1, #11
    d232:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    d234:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    d236:	7902      	ldrb	r2, [r0, #4]
    d238:	0412      	lsls	r2, r2, #16
    d23a:	21c0      	movs	r1, #192	; 0xc0
    d23c:	0289      	lsls	r1, r1, #10
    d23e:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    d240:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    d242:	4a0a      	ldr	r2, [pc, #40]	; (d26c <nvm_set_config+0x80>)
    d244:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    d246:	6893      	ldr	r3, [r2, #8]
    d248:	035b      	lsls	r3, r3, #13
    d24a:	0f5b      	lsrs	r3, r3, #29
    d24c:	4908      	ldr	r1, [pc, #32]	; (d270 <nvm_set_config+0x84>)
    d24e:	2408      	movs	r4, #8
    d250:	409c      	lsls	r4, r3
    d252:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    d254:	6893      	ldr	r3, [r2, #8]
    d256:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    d258:	7843      	ldrb	r3, [r0, #1]
    d25a:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    d25c:	8b13      	ldrh	r3, [r2, #24]
    d25e:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    d260:	0fdb      	lsrs	r3, r3, #31
    d262:	011b      	lsls	r3, r3, #4
    d264:	e7d0      	b.n	d208 <nvm_set_config+0x1c>
    d266:	46c0      	nop			; (mov r8, r8)
    d268:	40000400 	.word	0x40000400
    d26c:	41004000 	.word	0x41004000
    d270:	2000024c 	.word	0x2000024c

0000d274 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    d274:	b530      	push	{r4, r5, lr}
    d276:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    d278:	4a22      	ldr	r2, [pc, #136]	; (d304 <nvm_execute_command+0x90>)
    d27a:	8810      	ldrh	r0, [r2, #0]
    d27c:	8853      	ldrh	r3, [r2, #2]
    d27e:	4343      	muls	r3, r0
    d280:	428b      	cmp	r3, r1
    d282:	d206      	bcs.n	d292 <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    d284:	2280      	movs	r2, #128	; 0x80
    d286:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    d288:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    d28a:	4b1f      	ldr	r3, [pc, #124]	; (d308 <nvm_execute_command+0x94>)
    d28c:	18cb      	adds	r3, r1, r3
    d28e:	4293      	cmp	r3, r2
    d290:	d80e      	bhi.n	d2b0 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    d292:	4b1e      	ldr	r3, [pc, #120]	; (d30c <nvm_execute_command+0x98>)
    d294:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    d296:	2280      	movs	r2, #128	; 0x80
    d298:	02d2      	lsls	r2, r2, #11
    d29a:	432a      	orrs	r2, r5
    d29c:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    d29e:	2220      	movs	r2, #32
    d2a0:	32ff      	adds	r2, #255	; 0xff
    d2a2:	831a      	strh	r2, [r3, #24]
    d2a4:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    d2a6:	07db      	lsls	r3, r3, #31
    d2a8:	d403      	bmi.n	d2b2 <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    d2aa:	4b18      	ldr	r3, [pc, #96]	; (d30c <nvm_execute_command+0x98>)
    d2ac:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    d2ae:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    d2b0:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    d2b2:	2c45      	cmp	r4, #69	; 0x45
    d2b4:	d822      	bhi.n	d2fc <nvm_execute_command+0x88>
    d2b6:	00a3      	lsls	r3, r4, #2
    d2b8:	4a15      	ldr	r2, [pc, #84]	; (d310 <nvm_execute_command+0x9c>)
    d2ba:	58d3      	ldr	r3, [r2, r3]
    d2bc:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    d2be:	4b13      	ldr	r3, [pc, #76]	; (d30c <nvm_execute_command+0x98>)
    d2c0:	8b1b      	ldrh	r3, [r3, #24]
    d2c2:	05db      	lsls	r3, r3, #23
    d2c4:	d503      	bpl.n	d2ce <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    d2c6:	4b11      	ldr	r3, [pc, #68]	; (d30c <nvm_execute_command+0x98>)
    d2c8:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    d2ca:	2010      	movs	r0, #16
    d2cc:	e7f0      	b.n	d2b0 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    d2ce:	0889      	lsrs	r1, r1, #2
    d2d0:	0049      	lsls	r1, r1, #1
    d2d2:	4b0e      	ldr	r3, [pc, #56]	; (d30c <nvm_execute_command+0x98>)
    d2d4:	61d9      	str	r1, [r3, #28]
			break;
    d2d6:	e003      	b.n	d2e0 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    d2d8:	0889      	lsrs	r1, r1, #2
    d2da:	0049      	lsls	r1, r1, #1
    d2dc:	4b0b      	ldr	r3, [pc, #44]	; (d30c <nvm_execute_command+0x98>)
    d2de:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    d2e0:	20a5      	movs	r0, #165	; 0xa5
    d2e2:	0200      	lsls	r0, r0, #8
    d2e4:	4304      	orrs	r4, r0
    d2e6:	4b09      	ldr	r3, [pc, #36]	; (d30c <nvm_execute_command+0x98>)
    d2e8:	801c      	strh	r4, [r3, #0]
    d2ea:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    d2ec:	2201      	movs	r2, #1
    d2ee:	7d0b      	ldrb	r3, [r1, #20]
    d2f0:	4213      	tst	r3, r2
    d2f2:	d0fc      	beq.n	d2ee <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    d2f4:	4b05      	ldr	r3, [pc, #20]	; (d30c <nvm_execute_command+0x98>)
    d2f6:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    d2f8:	2000      	movs	r0, #0
    d2fa:	e7d9      	b.n	d2b0 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    d2fc:	4b03      	ldr	r3, [pc, #12]	; (d30c <nvm_execute_command+0x98>)
    d2fe:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    d300:	2017      	movs	r0, #23
    d302:	e7d5      	b.n	d2b0 <nvm_execute_command+0x3c>
    d304:	2000024c 	.word	0x2000024c
    d308:	ff7fc000 	.word	0xff7fc000
    d30c:	41004000 	.word	0x41004000
    d310:	00013f18 	.word	0x00013f18

0000d314 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    d314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    d316:	4b25      	ldr	r3, [pc, #148]	; (d3ac <nvm_write_buffer+0x98>)
    d318:	881d      	ldrh	r5, [r3, #0]
    d31a:	885b      	ldrh	r3, [r3, #2]
    d31c:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    d31e:	2418      	movs	r4, #24
	if (destination_address >
    d320:	4283      	cmp	r3, r0
    d322:	d201      	bcs.n	d328 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    d324:	0020      	movs	r0, r4
    d326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    d328:	1e6b      	subs	r3, r5, #1
    d32a:	4218      	tst	r0, r3
    d32c:	d1fa      	bne.n	d324 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    d32e:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    d330:	4295      	cmp	r5, r2
    d332:	d3f7      	bcc.n	d324 <nvm_write_buffer+0x10>
    d334:	4b1e      	ldr	r3, [pc, #120]	; (d3b0 <nvm_write_buffer+0x9c>)
    d336:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    d338:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    d33a:	07db      	lsls	r3, r3, #31
    d33c:	d5f2      	bpl.n	d324 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    d33e:	4c1d      	ldr	r4, [pc, #116]	; (d3b4 <nvm_write_buffer+0xa0>)
    d340:	4b1b      	ldr	r3, [pc, #108]	; (d3b0 <nvm_write_buffer+0x9c>)
    d342:	801c      	strh	r4, [r3, #0]
    d344:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    d346:	2401      	movs	r4, #1
    d348:	7d2b      	ldrb	r3, [r5, #20]
    d34a:	4223      	tst	r3, r4
    d34c:	d0fc      	beq.n	d348 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    d34e:	2420      	movs	r4, #32
    d350:	34ff      	adds	r4, #255	; 0xff
    d352:	4b17      	ldr	r3, [pc, #92]	; (d3b0 <nvm_write_buffer+0x9c>)
    d354:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    d356:	2a00      	cmp	r2, #0
    d358:	d022      	beq.n	d3a0 <nvm_write_buffer+0x8c>
    d35a:	2301      	movs	r3, #1
    d35c:	0005      	movs	r5, r0
    d35e:	439d      	bics	r5, r3
    d360:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    d362:	1e57      	subs	r7, r2, #1
    d364:	e009      	b.n	d37a <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    d366:	18ce      	adds	r6, r1, r3
    d368:	7876      	ldrb	r6, [r6, #1]
    d36a:	0236      	lsls	r6, r6, #8
    d36c:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    d36e:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    d370:	3302      	adds	r3, #2
    d372:	b29b      	uxth	r3, r3
    d374:	3502      	adds	r5, #2
    d376:	429a      	cmp	r2, r3
    d378:	d904      	bls.n	d384 <nvm_write_buffer+0x70>
		data = buffer[i];
    d37a:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    d37c:	42bb      	cmp	r3, r7
    d37e:	dbf2      	blt.n	d366 <nvm_write_buffer+0x52>
		data = buffer[i];
    d380:	b2a4      	uxth	r4, r4
    d382:	e7f4      	b.n	d36e <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    d384:	4b09      	ldr	r3, [pc, #36]	; (d3ac <nvm_write_buffer+0x98>)
    d386:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    d388:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    d38a:	2b00      	cmp	r3, #0
    d38c:	d1ca      	bne.n	d324 <nvm_write_buffer+0x10>
    d38e:	2a3f      	cmp	r2, #63	; 0x3f
    d390:	d8c8      	bhi.n	d324 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    d392:	2200      	movs	r2, #0
    d394:	0001      	movs	r1, r0
    d396:	2004      	movs	r0, #4
    d398:	4b07      	ldr	r3, [pc, #28]	; (d3b8 <nvm_write_buffer+0xa4>)
    d39a:	4798      	blx	r3
    d39c:	0004      	movs	r4, r0
    d39e:	e7c1      	b.n	d324 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    d3a0:	4b02      	ldr	r3, [pc, #8]	; (d3ac <nvm_write_buffer+0x98>)
    d3a2:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    d3a4:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    d3a6:	2b00      	cmp	r3, #0
    d3a8:	d0f3      	beq.n	d392 <nvm_write_buffer+0x7e>
    d3aa:	e7bb      	b.n	d324 <nvm_write_buffer+0x10>
    d3ac:	2000024c 	.word	0x2000024c
    d3b0:	41004000 	.word	0x41004000
    d3b4:	ffffa544 	.word	0xffffa544
    d3b8:	0000d275 	.word	0x0000d275

0000d3bc <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    d3bc:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    d3be:	4b18      	ldr	r3, [pc, #96]	; (d420 <nvm_read_buffer+0x64>)
    d3c0:	881d      	ldrh	r5, [r3, #0]
    d3c2:	885b      	ldrh	r3, [r3, #2]
    d3c4:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    d3c6:	2418      	movs	r4, #24
	if (source_address >
    d3c8:	4283      	cmp	r3, r0
    d3ca:	d201      	bcs.n	d3d0 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    d3cc:	0020      	movs	r0, r4
    d3ce:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    d3d0:	1e6b      	subs	r3, r5, #1
    d3d2:	4218      	tst	r0, r3
    d3d4:	d1fa      	bne.n	d3cc <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    d3d6:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    d3d8:	4295      	cmp	r5, r2
    d3da:	d3f7      	bcc.n	d3cc <nvm_read_buffer+0x10>
    d3dc:	4b11      	ldr	r3, [pc, #68]	; (d424 <nvm_read_buffer+0x68>)
    d3de:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    d3e0:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    d3e2:	07db      	lsls	r3, r3, #31
    d3e4:	d5f2      	bpl.n	d3cc <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    d3e6:	2420      	movs	r4, #32
    d3e8:	34ff      	adds	r4, #255	; 0xff
    d3ea:	4b0e      	ldr	r3, [pc, #56]	; (d424 <nvm_read_buffer+0x68>)
    d3ec:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    d3ee:	2a00      	cmp	r2, #0
    d3f0:	d014      	beq.n	d41c <nvm_read_buffer+0x60>
    d3f2:	2301      	movs	r3, #1
    d3f4:	4398      	bics	r0, r3
    d3f6:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    d3f8:	1e56      	subs	r6, r2, #1
    d3fa:	e004      	b.n	d406 <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    d3fc:	3302      	adds	r3, #2
    d3fe:	b29b      	uxth	r3, r3
    d400:	3002      	adds	r0, #2
    d402:	429a      	cmp	r2, r3
    d404:	d908      	bls.n	d418 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    d406:	8804      	ldrh	r4, [r0, #0]
    d408:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    d40a:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    d40c:	42b3      	cmp	r3, r6
    d40e:	daf5      	bge.n	d3fc <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    d410:	18cd      	adds	r5, r1, r3
    d412:	0a24      	lsrs	r4, r4, #8
    d414:	706c      	strb	r4, [r5, #1]
    d416:	e7f1      	b.n	d3fc <nvm_read_buffer+0x40>
	return STATUS_OK;
    d418:	2400      	movs	r4, #0
    d41a:	e7d7      	b.n	d3cc <nvm_read_buffer+0x10>
    d41c:	2400      	movs	r4, #0
    d41e:	e7d5      	b.n	d3cc <nvm_read_buffer+0x10>
    d420:	2000024c 	.word	0x2000024c
    d424:	41004000 	.word	0x41004000

0000d428 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    d428:	4b13      	ldr	r3, [pc, #76]	; (d478 <nvm_erase_row+0x50>)
    d42a:	881a      	ldrh	r2, [r3, #0]
    d42c:	885b      	ldrh	r3, [r3, #2]
    d42e:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    d430:	2118      	movs	r1, #24
	if (row_address >
    d432:	4283      	cmp	r3, r0
    d434:	d201      	bcs.n	d43a <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    d436:	0008      	movs	r0, r1
    d438:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    d43a:	0092      	lsls	r2, r2, #2
    d43c:	3a01      	subs	r2, #1
    d43e:	4210      	tst	r0, r2
    d440:	d1f9      	bne.n	d436 <nvm_erase_row+0xe>
    d442:	4b0e      	ldr	r3, [pc, #56]	; (d47c <nvm_erase_row+0x54>)
    d444:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    d446:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    d448:	07db      	lsls	r3, r3, #31
    d44a:	d5f4      	bpl.n	d436 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    d44c:	4b0b      	ldr	r3, [pc, #44]	; (d47c <nvm_erase_row+0x54>)
    d44e:	2220      	movs	r2, #32
    d450:	32ff      	adds	r2, #255	; 0xff
    d452:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    d454:	0880      	lsrs	r0, r0, #2
    d456:	0040      	lsls	r0, r0, #1
    d458:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    d45a:	4a09      	ldr	r2, [pc, #36]	; (d480 <nvm_erase_row+0x58>)
    d45c:	801a      	strh	r2, [r3, #0]
    d45e:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    d460:	2201      	movs	r2, #1
    d462:	7d0b      	ldrb	r3, [r1, #20]
    d464:	4213      	tst	r3, r2
    d466:	d0fc      	beq.n	d462 <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    d468:	4b04      	ldr	r3, [pc, #16]	; (d47c <nvm_erase_row+0x54>)
    d46a:	8b19      	ldrh	r1, [r3, #24]
    d46c:	201c      	movs	r0, #28
    d46e:	4001      	ands	r1, r0
	return STATUS_OK;
    d470:	1e48      	subs	r0, r1, #1
    d472:	4181      	sbcs	r1, r0
    d474:	0089      	lsls	r1, r1, #2
    d476:	e7de      	b.n	d436 <nvm_erase_row+0xe>
    d478:	2000024c 	.word	0x2000024c
    d47c:	41004000 	.word	0x41004000
    d480:	ffffa502 	.word	0xffffa502

0000d484 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    d484:	b500      	push	{lr}
    d486:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    d488:	ab01      	add	r3, sp, #4
    d48a:	2280      	movs	r2, #128	; 0x80
    d48c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    d48e:	780a      	ldrb	r2, [r1, #0]
    d490:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    d492:	784a      	ldrb	r2, [r1, #1]
    d494:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    d496:	788a      	ldrb	r2, [r1, #2]
    d498:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    d49a:	0019      	movs	r1, r3
    d49c:	4b01      	ldr	r3, [pc, #4]	; (d4a4 <port_pin_set_config+0x20>)
    d49e:	4798      	blx	r3
}
    d4a0:	b003      	add	sp, #12
    d4a2:	bd00      	pop	{pc}
    d4a4:	0000ee55 	.word	0x0000ee55

0000d4a8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    d4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4aa:	46de      	mov	lr, fp
    d4ac:	4657      	mov	r7, sl
    d4ae:	464e      	mov	r6, r9
    d4b0:	4645      	mov	r5, r8
    d4b2:	b5e0      	push	{r5, r6, r7, lr}
    d4b4:	b087      	sub	sp, #28
    d4b6:	4680      	mov	r8, r0
    d4b8:	9104      	str	r1, [sp, #16]
    d4ba:	0016      	movs	r6, r2
    d4bc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    d4be:	2200      	movs	r2, #0
    d4c0:	2300      	movs	r3, #0
    d4c2:	2100      	movs	r1, #0
    d4c4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    d4c6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    d4c8:	2001      	movs	r0, #1
    d4ca:	0021      	movs	r1, r4
    d4cc:	9600      	str	r6, [sp, #0]
    d4ce:	9701      	str	r7, [sp, #4]
    d4d0:	465c      	mov	r4, fp
    d4d2:	9403      	str	r4, [sp, #12]
    d4d4:	4644      	mov	r4, r8
    d4d6:	9405      	str	r4, [sp, #20]
    d4d8:	e013      	b.n	d502 <long_division+0x5a>
    d4da:	2420      	movs	r4, #32
    d4dc:	1a64      	subs	r4, r4, r1
    d4de:	0005      	movs	r5, r0
    d4e0:	40e5      	lsrs	r5, r4
    d4e2:	46a8      	mov	r8, r5
    d4e4:	e014      	b.n	d510 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    d4e6:	9c00      	ldr	r4, [sp, #0]
    d4e8:	9d01      	ldr	r5, [sp, #4]
    d4ea:	1b12      	subs	r2, r2, r4
    d4ec:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    d4ee:	465c      	mov	r4, fp
    d4f0:	464d      	mov	r5, r9
    d4f2:	432c      	orrs	r4, r5
    d4f4:	46a3      	mov	fp, r4
    d4f6:	9c03      	ldr	r4, [sp, #12]
    d4f8:	4645      	mov	r5, r8
    d4fa:	432c      	orrs	r4, r5
    d4fc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    d4fe:	3901      	subs	r1, #1
    d500:	d325      	bcc.n	d54e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    d502:	2420      	movs	r4, #32
    d504:	4264      	negs	r4, r4
    d506:	190c      	adds	r4, r1, r4
    d508:	d4e7      	bmi.n	d4da <long_division+0x32>
    d50a:	0005      	movs	r5, r0
    d50c:	40a5      	lsls	r5, r4
    d50e:	46a8      	mov	r8, r5
    d510:	0004      	movs	r4, r0
    d512:	408c      	lsls	r4, r1
    d514:	46a1      	mov	r9, r4
		r = r << 1;
    d516:	1892      	adds	r2, r2, r2
    d518:	415b      	adcs	r3, r3
    d51a:	0014      	movs	r4, r2
    d51c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    d51e:	9e05      	ldr	r6, [sp, #20]
    d520:	464f      	mov	r7, r9
    d522:	403e      	ands	r6, r7
    d524:	46b4      	mov	ip, r6
    d526:	9e04      	ldr	r6, [sp, #16]
    d528:	4647      	mov	r7, r8
    d52a:	403e      	ands	r6, r7
    d52c:	46b2      	mov	sl, r6
    d52e:	4666      	mov	r6, ip
    d530:	4657      	mov	r7, sl
    d532:	433e      	orrs	r6, r7
    d534:	d003      	beq.n	d53e <long_division+0x96>
			r |= 0x01;
    d536:	0006      	movs	r6, r0
    d538:	4326      	orrs	r6, r4
    d53a:	0032      	movs	r2, r6
    d53c:	002b      	movs	r3, r5
		if (r >= d) {
    d53e:	9c00      	ldr	r4, [sp, #0]
    d540:	9d01      	ldr	r5, [sp, #4]
    d542:	429d      	cmp	r5, r3
    d544:	d8db      	bhi.n	d4fe <long_division+0x56>
    d546:	d1ce      	bne.n	d4e6 <long_division+0x3e>
    d548:	4294      	cmp	r4, r2
    d54a:	d8d8      	bhi.n	d4fe <long_division+0x56>
    d54c:	e7cb      	b.n	d4e6 <long_division+0x3e>
    d54e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    d550:	4658      	mov	r0, fp
    d552:	0019      	movs	r1, r3
    d554:	b007      	add	sp, #28
    d556:	bc3c      	pop	{r2, r3, r4, r5}
    d558:	4690      	mov	r8, r2
    d55a:	4699      	mov	r9, r3
    d55c:	46a2      	mov	sl, r4
    d55e:	46ab      	mov	fp, r5
    d560:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d562 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    d562:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    d564:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d566:	2340      	movs	r3, #64	; 0x40
    d568:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    d56a:	4281      	cmp	r1, r0
    d56c:	d202      	bcs.n	d574 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    d56e:	0018      	movs	r0, r3
    d570:	bd10      	pop	{r4, pc}
		baud_calculated++;
    d572:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    d574:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    d576:	1c63      	adds	r3, r4, #1
    d578:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    d57a:	4288      	cmp	r0, r1
    d57c:	d9f9      	bls.n	d572 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d57e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    d580:	2cff      	cmp	r4, #255	; 0xff
    d582:	d8f4      	bhi.n	d56e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    d584:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    d586:	2300      	movs	r3, #0
    d588:	e7f1      	b.n	d56e <_sercom_get_sync_baud_val+0xc>
	...

0000d58c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    d58c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d58e:	b083      	sub	sp, #12
    d590:	000f      	movs	r7, r1
    d592:	0016      	movs	r6, r2
    d594:	aa08      	add	r2, sp, #32
    d596:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    d598:	0004      	movs	r4, r0
    d59a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d59c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    d59e:	42bc      	cmp	r4, r7
    d5a0:	d902      	bls.n	d5a8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    d5a2:	0010      	movs	r0, r2
    d5a4:	b003      	add	sp, #12
    d5a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    d5a8:	2b00      	cmp	r3, #0
    d5aa:	d114      	bne.n	d5d6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    d5ac:	0002      	movs	r2, r0
    d5ae:	0008      	movs	r0, r1
    d5b0:	2100      	movs	r1, #0
    d5b2:	4c19      	ldr	r4, [pc, #100]	; (d618 <_sercom_get_async_baud_val+0x8c>)
    d5b4:	47a0      	blx	r4
    d5b6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    d5b8:	003a      	movs	r2, r7
    d5ba:	2300      	movs	r3, #0
    d5bc:	2000      	movs	r0, #0
    d5be:	4c17      	ldr	r4, [pc, #92]	; (d61c <_sercom_get_async_baud_val+0x90>)
    d5c0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    d5c2:	2200      	movs	r2, #0
    d5c4:	2301      	movs	r3, #1
    d5c6:	1a12      	subs	r2, r2, r0
    d5c8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    d5ca:	0c12      	lsrs	r2, r2, #16
    d5cc:	041b      	lsls	r3, r3, #16
    d5ce:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    d5d0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    d5d2:	2200      	movs	r2, #0
    d5d4:	e7e5      	b.n	d5a2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    d5d6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    d5d8:	2b01      	cmp	r3, #1
    d5da:	d1f9      	bne.n	d5d0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    d5dc:	000a      	movs	r2, r1
    d5de:	2300      	movs	r3, #0
    d5e0:	2100      	movs	r1, #0
    d5e2:	4c0d      	ldr	r4, [pc, #52]	; (d618 <_sercom_get_async_baud_val+0x8c>)
    d5e4:	47a0      	blx	r4
    d5e6:	0002      	movs	r2, r0
    d5e8:	000b      	movs	r3, r1
    d5ea:	9200      	str	r2, [sp, #0]
    d5ec:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    d5ee:	0038      	movs	r0, r7
    d5f0:	2100      	movs	r1, #0
    d5f2:	4c0a      	ldr	r4, [pc, #40]	; (d61c <_sercom_get_async_baud_val+0x90>)
    d5f4:	47a0      	blx	r4
    d5f6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    d5f8:	2380      	movs	r3, #128	; 0x80
    d5fa:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    d5fc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    d5fe:	4298      	cmp	r0, r3
    d600:	d8cf      	bhi.n	d5a2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    d602:	0f79      	lsrs	r1, r7, #29
    d604:	00f8      	lsls	r0, r7, #3
    d606:	9a00      	ldr	r2, [sp, #0]
    d608:	9b01      	ldr	r3, [sp, #4]
    d60a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    d60c:	00ea      	lsls	r2, r5, #3
    d60e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    d610:	b2d2      	uxtb	r2, r2
    d612:	0352      	lsls	r2, r2, #13
    d614:	432a      	orrs	r2, r5
    d616:	e7db      	b.n	d5d0 <_sercom_get_async_baud_val+0x44>
    d618:	000116d9 	.word	0x000116d9
    d61c:	0000d4a9 	.word	0x0000d4a9

0000d620 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    d620:	b510      	push	{r4, lr}
    d622:	b082      	sub	sp, #8
    d624:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    d626:	4b0e      	ldr	r3, [pc, #56]	; (d660 <sercom_set_gclk_generator+0x40>)
    d628:	781b      	ldrb	r3, [r3, #0]
    d62a:	2b00      	cmp	r3, #0
    d62c:	d007      	beq.n	d63e <sercom_set_gclk_generator+0x1e>
    d62e:	2900      	cmp	r1, #0
    d630:	d105      	bne.n	d63e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    d632:	4b0b      	ldr	r3, [pc, #44]	; (d660 <sercom_set_gclk_generator+0x40>)
    d634:	785b      	ldrb	r3, [r3, #1]
    d636:	4283      	cmp	r3, r0
    d638:	d010      	beq.n	d65c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    d63a:	201d      	movs	r0, #29
    d63c:	e00c      	b.n	d658 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    d63e:	a901      	add	r1, sp, #4
    d640:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    d642:	2013      	movs	r0, #19
    d644:	4b07      	ldr	r3, [pc, #28]	; (d664 <sercom_set_gclk_generator+0x44>)
    d646:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    d648:	2013      	movs	r0, #19
    d64a:	4b07      	ldr	r3, [pc, #28]	; (d668 <sercom_set_gclk_generator+0x48>)
    d64c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    d64e:	4b04      	ldr	r3, [pc, #16]	; (d660 <sercom_set_gclk_generator+0x40>)
    d650:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    d652:	2201      	movs	r2, #1
    d654:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    d656:	2000      	movs	r0, #0
}
    d658:	b002      	add	sp, #8
    d65a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    d65c:	2000      	movs	r0, #0
    d65e:	e7fb      	b.n	d658 <sercom_set_gclk_generator+0x38>
    d660:	20000254 	.word	0x20000254
    d664:	0000ed5d 	.word	0x0000ed5d
    d668:	0000ecd1 	.word	0x0000ecd1

0000d66c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    d66c:	4b40      	ldr	r3, [pc, #256]	; (d770 <_sercom_get_default_pad+0x104>)
    d66e:	4298      	cmp	r0, r3
    d670:	d031      	beq.n	d6d6 <_sercom_get_default_pad+0x6a>
    d672:	d90a      	bls.n	d68a <_sercom_get_default_pad+0x1e>
    d674:	4b3f      	ldr	r3, [pc, #252]	; (d774 <_sercom_get_default_pad+0x108>)
    d676:	4298      	cmp	r0, r3
    d678:	d04d      	beq.n	d716 <_sercom_get_default_pad+0xaa>
    d67a:	4b3f      	ldr	r3, [pc, #252]	; (d778 <_sercom_get_default_pad+0x10c>)
    d67c:	4298      	cmp	r0, r3
    d67e:	d05a      	beq.n	d736 <_sercom_get_default_pad+0xca>
    d680:	4b3e      	ldr	r3, [pc, #248]	; (d77c <_sercom_get_default_pad+0x110>)
    d682:	4298      	cmp	r0, r3
    d684:	d037      	beq.n	d6f6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    d686:	2000      	movs	r0, #0
}
    d688:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    d68a:	4b3d      	ldr	r3, [pc, #244]	; (d780 <_sercom_get_default_pad+0x114>)
    d68c:	4298      	cmp	r0, r3
    d68e:	d00c      	beq.n	d6aa <_sercom_get_default_pad+0x3e>
    d690:	4b3c      	ldr	r3, [pc, #240]	; (d784 <_sercom_get_default_pad+0x118>)
    d692:	4298      	cmp	r0, r3
    d694:	d1f7      	bne.n	d686 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d696:	2901      	cmp	r1, #1
    d698:	d017      	beq.n	d6ca <_sercom_get_default_pad+0x5e>
    d69a:	2900      	cmp	r1, #0
    d69c:	d05d      	beq.n	d75a <_sercom_get_default_pad+0xee>
    d69e:	2902      	cmp	r1, #2
    d6a0:	d015      	beq.n	d6ce <_sercom_get_default_pad+0x62>
    d6a2:	2903      	cmp	r1, #3
    d6a4:	d015      	beq.n	d6d2 <_sercom_get_default_pad+0x66>
	return 0;
    d6a6:	2000      	movs	r0, #0
    d6a8:	e7ee      	b.n	d688 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d6aa:	2901      	cmp	r1, #1
    d6ac:	d007      	beq.n	d6be <_sercom_get_default_pad+0x52>
    d6ae:	2900      	cmp	r1, #0
    d6b0:	d051      	beq.n	d756 <_sercom_get_default_pad+0xea>
    d6b2:	2902      	cmp	r1, #2
    d6b4:	d005      	beq.n	d6c2 <_sercom_get_default_pad+0x56>
    d6b6:	2903      	cmp	r1, #3
    d6b8:	d005      	beq.n	d6c6 <_sercom_get_default_pad+0x5a>
	return 0;
    d6ba:	2000      	movs	r0, #0
    d6bc:	e7e4      	b.n	d688 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d6be:	4832      	ldr	r0, [pc, #200]	; (d788 <_sercom_get_default_pad+0x11c>)
    d6c0:	e7e2      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d6c2:	4832      	ldr	r0, [pc, #200]	; (d78c <_sercom_get_default_pad+0x120>)
    d6c4:	e7e0      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d6c6:	4832      	ldr	r0, [pc, #200]	; (d790 <_sercom_get_default_pad+0x124>)
    d6c8:	e7de      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d6ca:	4832      	ldr	r0, [pc, #200]	; (d794 <_sercom_get_default_pad+0x128>)
    d6cc:	e7dc      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d6ce:	4832      	ldr	r0, [pc, #200]	; (d798 <_sercom_get_default_pad+0x12c>)
    d6d0:	e7da      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d6d2:	4832      	ldr	r0, [pc, #200]	; (d79c <_sercom_get_default_pad+0x130>)
    d6d4:	e7d8      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d6d6:	2901      	cmp	r1, #1
    d6d8:	d007      	beq.n	d6ea <_sercom_get_default_pad+0x7e>
    d6da:	2900      	cmp	r1, #0
    d6dc:	d03f      	beq.n	d75e <_sercom_get_default_pad+0xf2>
    d6de:	2902      	cmp	r1, #2
    d6e0:	d005      	beq.n	d6ee <_sercom_get_default_pad+0x82>
    d6e2:	2903      	cmp	r1, #3
    d6e4:	d005      	beq.n	d6f2 <_sercom_get_default_pad+0x86>
	return 0;
    d6e6:	2000      	movs	r0, #0
    d6e8:	e7ce      	b.n	d688 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d6ea:	482d      	ldr	r0, [pc, #180]	; (d7a0 <_sercom_get_default_pad+0x134>)
    d6ec:	e7cc      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d6ee:	482d      	ldr	r0, [pc, #180]	; (d7a4 <_sercom_get_default_pad+0x138>)
    d6f0:	e7ca      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d6f2:	482d      	ldr	r0, [pc, #180]	; (d7a8 <_sercom_get_default_pad+0x13c>)
    d6f4:	e7c8      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d6f6:	2901      	cmp	r1, #1
    d6f8:	d007      	beq.n	d70a <_sercom_get_default_pad+0x9e>
    d6fa:	2900      	cmp	r1, #0
    d6fc:	d031      	beq.n	d762 <_sercom_get_default_pad+0xf6>
    d6fe:	2902      	cmp	r1, #2
    d700:	d005      	beq.n	d70e <_sercom_get_default_pad+0xa2>
    d702:	2903      	cmp	r1, #3
    d704:	d005      	beq.n	d712 <_sercom_get_default_pad+0xa6>
	return 0;
    d706:	2000      	movs	r0, #0
    d708:	e7be      	b.n	d688 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d70a:	4828      	ldr	r0, [pc, #160]	; (d7ac <_sercom_get_default_pad+0x140>)
    d70c:	e7bc      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d70e:	4828      	ldr	r0, [pc, #160]	; (d7b0 <_sercom_get_default_pad+0x144>)
    d710:	e7ba      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d712:	4828      	ldr	r0, [pc, #160]	; (d7b4 <_sercom_get_default_pad+0x148>)
    d714:	e7b8      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d716:	2901      	cmp	r1, #1
    d718:	d007      	beq.n	d72a <_sercom_get_default_pad+0xbe>
    d71a:	2900      	cmp	r1, #0
    d71c:	d023      	beq.n	d766 <_sercom_get_default_pad+0xfa>
    d71e:	2902      	cmp	r1, #2
    d720:	d005      	beq.n	d72e <_sercom_get_default_pad+0xc2>
    d722:	2903      	cmp	r1, #3
    d724:	d005      	beq.n	d732 <_sercom_get_default_pad+0xc6>
	return 0;
    d726:	2000      	movs	r0, #0
    d728:	e7ae      	b.n	d688 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d72a:	4823      	ldr	r0, [pc, #140]	; (d7b8 <_sercom_get_default_pad+0x14c>)
    d72c:	e7ac      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d72e:	4823      	ldr	r0, [pc, #140]	; (d7bc <_sercom_get_default_pad+0x150>)
    d730:	e7aa      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d732:	4823      	ldr	r0, [pc, #140]	; (d7c0 <_sercom_get_default_pad+0x154>)
    d734:	e7a8      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d736:	2901      	cmp	r1, #1
    d738:	d007      	beq.n	d74a <_sercom_get_default_pad+0xde>
    d73a:	2900      	cmp	r1, #0
    d73c:	d015      	beq.n	d76a <_sercom_get_default_pad+0xfe>
    d73e:	2902      	cmp	r1, #2
    d740:	d005      	beq.n	d74e <_sercom_get_default_pad+0xe2>
    d742:	2903      	cmp	r1, #3
    d744:	d005      	beq.n	d752 <_sercom_get_default_pad+0xe6>
	return 0;
    d746:	2000      	movs	r0, #0
    d748:	e79e      	b.n	d688 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    d74a:	481e      	ldr	r0, [pc, #120]	; (d7c4 <_sercom_get_default_pad+0x158>)
    d74c:	e79c      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d74e:	481e      	ldr	r0, [pc, #120]	; (d7c8 <_sercom_get_default_pad+0x15c>)
    d750:	e79a      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d752:	481e      	ldr	r0, [pc, #120]	; (d7cc <_sercom_get_default_pad+0x160>)
    d754:	e798      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d756:	481e      	ldr	r0, [pc, #120]	; (d7d0 <_sercom_get_default_pad+0x164>)
    d758:	e796      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d75a:	2003      	movs	r0, #3
    d75c:	e794      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d75e:	481d      	ldr	r0, [pc, #116]	; (d7d4 <_sercom_get_default_pad+0x168>)
    d760:	e792      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d762:	481d      	ldr	r0, [pc, #116]	; (d7d8 <_sercom_get_default_pad+0x16c>)
    d764:	e790      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d766:	481d      	ldr	r0, [pc, #116]	; (d7dc <_sercom_get_default_pad+0x170>)
    d768:	e78e      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d76a:	481d      	ldr	r0, [pc, #116]	; (d7e0 <_sercom_get_default_pad+0x174>)
    d76c:	e78c      	b.n	d688 <_sercom_get_default_pad+0x1c>
    d76e:	46c0      	nop			; (mov r8, r8)
    d770:	42001000 	.word	0x42001000
    d774:	42001800 	.word	0x42001800
    d778:	42001c00 	.word	0x42001c00
    d77c:	42001400 	.word	0x42001400
    d780:	42000800 	.word	0x42000800
    d784:	42000c00 	.word	0x42000c00
    d788:	00050003 	.word	0x00050003
    d78c:	00060003 	.word	0x00060003
    d790:	00070003 	.word	0x00070003
    d794:	00010003 	.word	0x00010003
    d798:	001e0003 	.word	0x001e0003
    d79c:	001f0003 	.word	0x001f0003
    d7a0:	00090003 	.word	0x00090003
    d7a4:	000a0003 	.word	0x000a0003
    d7a8:	000b0003 	.word	0x000b0003
    d7ac:	00110003 	.word	0x00110003
    d7b0:	00120003 	.word	0x00120003
    d7b4:	00130003 	.word	0x00130003
    d7b8:	000d0003 	.word	0x000d0003
    d7bc:	000e0003 	.word	0x000e0003
    d7c0:	000f0003 	.word	0x000f0003
    d7c4:	00170003 	.word	0x00170003
    d7c8:	00180003 	.word	0x00180003
    d7cc:	00190003 	.word	0x00190003
    d7d0:	00040003 	.word	0x00040003
    d7d4:	00080003 	.word	0x00080003
    d7d8:	00100003 	.word	0x00100003
    d7dc:	000c0003 	.word	0x000c0003
    d7e0:	00160003 	.word	0x00160003

0000d7e4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    d7e4:	b530      	push	{r4, r5, lr}
    d7e6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    d7e8:	4b0b      	ldr	r3, [pc, #44]	; (d818 <_sercom_get_sercom_inst_index+0x34>)
    d7ea:	466a      	mov	r2, sp
    d7ec:	cb32      	ldmia	r3!, {r1, r4, r5}
    d7ee:	c232      	stmia	r2!, {r1, r4, r5}
    d7f0:	cb32      	ldmia	r3!, {r1, r4, r5}
    d7f2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    d7f4:	9b00      	ldr	r3, [sp, #0]
    d7f6:	4283      	cmp	r3, r0
    d7f8:	d00b      	beq.n	d812 <_sercom_get_sercom_inst_index+0x2e>
    d7fa:	2301      	movs	r3, #1
    d7fc:	009a      	lsls	r2, r3, #2
    d7fe:	4669      	mov	r1, sp
    d800:	5852      	ldr	r2, [r2, r1]
    d802:	4282      	cmp	r2, r0
    d804:	d006      	beq.n	d814 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    d806:	3301      	adds	r3, #1
    d808:	2b06      	cmp	r3, #6
    d80a:	d1f7      	bne.n	d7fc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    d80c:	2000      	movs	r0, #0
}
    d80e:	b007      	add	sp, #28
    d810:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    d812:	2300      	movs	r3, #0
			return i;
    d814:	b2d8      	uxtb	r0, r3
    d816:	e7fa      	b.n	d80e <_sercom_get_sercom_inst_index+0x2a>
    d818:	00014030 	.word	0x00014030

0000d81c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    d81c:	4770      	bx	lr
	...

0000d820 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    d820:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    d822:	4b0a      	ldr	r3, [pc, #40]	; (d84c <_sercom_set_handler+0x2c>)
    d824:	781b      	ldrb	r3, [r3, #0]
    d826:	2b00      	cmp	r3, #0
    d828:	d10c      	bne.n	d844 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    d82a:	4f09      	ldr	r7, [pc, #36]	; (d850 <_sercom_set_handler+0x30>)
    d82c:	4e09      	ldr	r6, [pc, #36]	; (d854 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    d82e:	4d0a      	ldr	r5, [pc, #40]	; (d858 <_sercom_set_handler+0x38>)
    d830:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    d832:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    d834:	195a      	adds	r2, r3, r5
    d836:	6014      	str	r4, [r2, #0]
    d838:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    d83a:	2b18      	cmp	r3, #24
    d83c:	d1f9      	bne.n	d832 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    d83e:	2201      	movs	r2, #1
    d840:	4b02      	ldr	r3, [pc, #8]	; (d84c <_sercom_set_handler+0x2c>)
    d842:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    d844:	0080      	lsls	r0, r0, #2
    d846:	4b02      	ldr	r3, [pc, #8]	; (d850 <_sercom_set_handler+0x30>)
    d848:	50c1      	str	r1, [r0, r3]
}
    d84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d84c:	20000256 	.word	0x20000256
    d850:	20000258 	.word	0x20000258
    d854:	0000d81d 	.word	0x0000d81d
    d858:	20000564 	.word	0x20000564

0000d85c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    d85c:	b500      	push	{lr}
    d85e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    d860:	2309      	movs	r3, #9
    d862:	466a      	mov	r2, sp
    d864:	7013      	strb	r3, [r2, #0]
    d866:	3301      	adds	r3, #1
    d868:	7053      	strb	r3, [r2, #1]
    d86a:	3301      	adds	r3, #1
    d86c:	7093      	strb	r3, [r2, #2]
    d86e:	3301      	adds	r3, #1
    d870:	70d3      	strb	r3, [r2, #3]
    d872:	3301      	adds	r3, #1
    d874:	7113      	strb	r3, [r2, #4]
    d876:	3301      	adds	r3, #1
    d878:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    d87a:	4b03      	ldr	r3, [pc, #12]	; (d888 <_sercom_get_interrupt_vector+0x2c>)
    d87c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    d87e:	466b      	mov	r3, sp
    d880:	5618      	ldrsb	r0, [r3, r0]
}
    d882:	b003      	add	sp, #12
    d884:	bd00      	pop	{pc}
    d886:	46c0      	nop			; (mov r8, r8)
    d888:	0000d7e5 	.word	0x0000d7e5

0000d88c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    d88c:	b510      	push	{r4, lr}
    d88e:	4b02      	ldr	r3, [pc, #8]	; (d898 <SERCOM0_Handler+0xc>)
    d890:	681b      	ldr	r3, [r3, #0]
    d892:	2000      	movs	r0, #0
    d894:	4798      	blx	r3
    d896:	bd10      	pop	{r4, pc}
    d898:	20000258 	.word	0x20000258

0000d89c <SERCOM1_Handler>:
    d89c:	b510      	push	{r4, lr}
    d89e:	4b02      	ldr	r3, [pc, #8]	; (d8a8 <SERCOM1_Handler+0xc>)
    d8a0:	685b      	ldr	r3, [r3, #4]
    d8a2:	2001      	movs	r0, #1
    d8a4:	4798      	blx	r3
    d8a6:	bd10      	pop	{r4, pc}
    d8a8:	20000258 	.word	0x20000258

0000d8ac <SERCOM2_Handler>:
    d8ac:	b510      	push	{r4, lr}
    d8ae:	4b02      	ldr	r3, [pc, #8]	; (d8b8 <SERCOM2_Handler+0xc>)
    d8b0:	689b      	ldr	r3, [r3, #8]
    d8b2:	2002      	movs	r0, #2
    d8b4:	4798      	blx	r3
    d8b6:	bd10      	pop	{r4, pc}
    d8b8:	20000258 	.word	0x20000258

0000d8bc <SERCOM3_Handler>:
    d8bc:	b510      	push	{r4, lr}
    d8be:	4b02      	ldr	r3, [pc, #8]	; (d8c8 <SERCOM3_Handler+0xc>)
    d8c0:	68db      	ldr	r3, [r3, #12]
    d8c2:	2003      	movs	r0, #3
    d8c4:	4798      	blx	r3
    d8c6:	bd10      	pop	{r4, pc}
    d8c8:	20000258 	.word	0x20000258

0000d8cc <SERCOM4_Handler>:
    d8cc:	b510      	push	{r4, lr}
    d8ce:	4b02      	ldr	r3, [pc, #8]	; (d8d8 <SERCOM4_Handler+0xc>)
    d8d0:	691b      	ldr	r3, [r3, #16]
    d8d2:	2004      	movs	r0, #4
    d8d4:	4798      	blx	r3
    d8d6:	bd10      	pop	{r4, pc}
    d8d8:	20000258 	.word	0x20000258

0000d8dc <SERCOM5_Handler>:
    d8dc:	b510      	push	{r4, lr}
    d8de:	4b02      	ldr	r3, [pc, #8]	; (d8e8 <SERCOM5_Handler+0xc>)
    d8e0:	695b      	ldr	r3, [r3, #20]
    d8e2:	2005      	movs	r0, #5
    d8e4:	4798      	blx	r3
    d8e6:	bd10      	pop	{r4, pc}
    d8e8:	20000258 	.word	0x20000258

0000d8ec <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    d8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8ee:	b08b      	sub	sp, #44	; 0x2c
    d8f0:	0005      	movs	r5, r0
    d8f2:	000c      	movs	r4, r1
    d8f4:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    d8f6:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    d8f8:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    d8fa:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    d8fc:	079b      	lsls	r3, r3, #30
    d8fe:	d501      	bpl.n	d904 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    d900:	b00b      	add	sp, #44	; 0x2c
    d902:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    d904:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    d906:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    d908:	07db      	lsls	r3, r3, #31
    d90a:	d4f9      	bmi.n	d900 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    d90c:	0008      	movs	r0, r1
    d90e:	4b6f      	ldr	r3, [pc, #444]	; (dacc <spi_init+0x1e0>)
    d910:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    d912:	4a6f      	ldr	r2, [pc, #444]	; (dad0 <spi_init+0x1e4>)
    d914:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    d916:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    d918:	2301      	movs	r3, #1
    d91a:	40bb      	lsls	r3, r7
    d91c:	430b      	orrs	r3, r1
    d91e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    d920:	a909      	add	r1, sp, #36	; 0x24
    d922:	2724      	movs	r7, #36	; 0x24
    d924:	5df3      	ldrb	r3, [r6, r7]
    d926:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    d928:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    d92a:	b2c3      	uxtb	r3, r0
    d92c:	9301      	str	r3, [sp, #4]
    d92e:	0018      	movs	r0, r3
    d930:	4b68      	ldr	r3, [pc, #416]	; (dad4 <spi_init+0x1e8>)
    d932:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    d934:	9801      	ldr	r0, [sp, #4]
    d936:	4b68      	ldr	r3, [pc, #416]	; (dad8 <spi_init+0x1ec>)
    d938:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    d93a:	5df0      	ldrb	r0, [r6, r7]
    d93c:	2100      	movs	r1, #0
    d93e:	4b67      	ldr	r3, [pc, #412]	; (dadc <spi_init+0x1f0>)
    d940:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    d942:	7833      	ldrb	r3, [r6, #0]
    d944:	2b01      	cmp	r3, #1
    d946:	d03f      	beq.n	d9c8 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    d948:	7833      	ldrb	r3, [r6, #0]
    d94a:	2b00      	cmp	r3, #0
    d94c:	d103      	bne.n	d956 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    d94e:	6823      	ldr	r3, [r4, #0]
    d950:	2208      	movs	r2, #8
    d952:	4313      	orrs	r3, r2
    d954:	6023      	str	r3, [r4, #0]
    d956:	002b      	movs	r3, r5
    d958:	330c      	adds	r3, #12
    d95a:	0029      	movs	r1, r5
    d95c:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    d95e:	2200      	movs	r2, #0
    d960:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    d962:	428b      	cmp	r3, r1
    d964:	d1fc      	bne.n	d960 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    d966:	2300      	movs	r3, #0
    d968:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    d96a:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    d96c:	2400      	movs	r4, #0
    d96e:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    d970:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    d972:	3336      	adds	r3, #54	; 0x36
    d974:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    d976:	3301      	adds	r3, #1
    d978:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    d97a:	3301      	adds	r3, #1
    d97c:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    d97e:	3b35      	subs	r3, #53	; 0x35
    d980:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    d982:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    d984:	6828      	ldr	r0, [r5, #0]
    d986:	4b51      	ldr	r3, [pc, #324]	; (dacc <spi_init+0x1e0>)
    d988:	4798      	blx	r3
    d98a:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    d98c:	4954      	ldr	r1, [pc, #336]	; (dae0 <spi_init+0x1f4>)
    d98e:	4b55      	ldr	r3, [pc, #340]	; (dae4 <spi_init+0x1f8>)
    d990:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    d992:	00bf      	lsls	r7, r7, #2
    d994:	4b54      	ldr	r3, [pc, #336]	; (dae8 <spi_init+0x1fc>)
    d996:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d998:	682f      	ldr	r7, [r5, #0]
    d99a:	ab04      	add	r3, sp, #16
    d99c:	2280      	movs	r2, #128	; 0x80
    d99e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    d9a0:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    d9a2:	3a7f      	subs	r2, #127	; 0x7f
    d9a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    d9a6:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    d9a8:	7833      	ldrb	r3, [r6, #0]
    d9aa:	2b00      	cmp	r3, #0
    d9ac:	d102      	bne.n	d9b4 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    d9ae:	2200      	movs	r2, #0
    d9b0:	ab04      	add	r3, sp, #16
    d9b2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    d9b4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    d9b6:	9305      	str	r3, [sp, #20]
    d9b8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    d9ba:	9306      	str	r3, [sp, #24]
    d9bc:	6b33      	ldr	r3, [r6, #48]	; 0x30
    d9be:	9307      	str	r3, [sp, #28]
    d9c0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    d9c2:	9308      	str	r3, [sp, #32]
    d9c4:	2400      	movs	r4, #0
    d9c6:	e00b      	b.n	d9e0 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    d9c8:	6823      	ldr	r3, [r4, #0]
    d9ca:	220c      	movs	r2, #12
    d9cc:	4313      	orrs	r3, r2
    d9ce:	6023      	str	r3, [r4, #0]
    d9d0:	e7ba      	b.n	d948 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    d9d2:	0038      	movs	r0, r7
    d9d4:	4b45      	ldr	r3, [pc, #276]	; (daec <spi_init+0x200>)
    d9d6:	4798      	blx	r3
    d9d8:	e00a      	b.n	d9f0 <spi_init+0x104>
    d9da:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    d9dc:	2c04      	cmp	r4, #4
    d9de:	d010      	beq.n	da02 <spi_init+0x116>
    d9e0:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    d9e2:	00a3      	lsls	r3, r4, #2
    d9e4:	aa02      	add	r2, sp, #8
    d9e6:	200c      	movs	r0, #12
    d9e8:	1812      	adds	r2, r2, r0
    d9ea:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    d9ec:	2800      	cmp	r0, #0
    d9ee:	d0f0      	beq.n	d9d2 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    d9f0:	1c43      	adds	r3, r0, #1
    d9f2:	d0f2      	beq.n	d9da <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    d9f4:	a904      	add	r1, sp, #16
    d9f6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    d9f8:	0c00      	lsrs	r0, r0, #16
    d9fa:	b2c0      	uxtb	r0, r0
    d9fc:	4b3c      	ldr	r3, [pc, #240]	; (daf0 <spi_init+0x204>)
    d9fe:	4798      	blx	r3
    da00:	e7eb      	b.n	d9da <spi_init+0xee>
	module->mode             = config->mode;
    da02:	7833      	ldrb	r3, [r6, #0]
    da04:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    da06:	7c33      	ldrb	r3, [r6, #16]
    da08:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    da0a:	7cb3      	ldrb	r3, [r6, #18]
    da0c:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    da0e:	7d33      	ldrb	r3, [r6, #20]
    da10:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    da12:	2200      	movs	r2, #0
    da14:	ab02      	add	r3, sp, #8
    da16:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    da18:	7833      	ldrb	r3, [r6, #0]
    da1a:	2b01      	cmp	r3, #1
    da1c:	d012      	beq.n	da44 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    da1e:	7833      	ldrb	r3, [r6, #0]
    da20:	2b00      	cmp	r3, #0
    da22:	d126      	bne.n	da72 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    da24:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    da26:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    da28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    da2a:	7ff1      	ldrb	r1, [r6, #31]
    da2c:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    da2e:	7fb4      	ldrb	r4, [r6, #30]
    da30:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    da32:	4319      	orrs	r1, r3
    da34:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    da36:	2320      	movs	r3, #32
    da38:	5cf3      	ldrb	r3, [r6, r3]
    da3a:	2b00      	cmp	r3, #0
    da3c:	d01b      	beq.n	da76 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    da3e:	2340      	movs	r3, #64	; 0x40
    da40:	431a      	orrs	r2, r3
    da42:	e018      	b.n	da76 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    da44:	6828      	ldr	r0, [r5, #0]
    da46:	4b21      	ldr	r3, [pc, #132]	; (dacc <spi_init+0x1e0>)
    da48:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    da4a:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    da4c:	b2c0      	uxtb	r0, r0
    da4e:	4b29      	ldr	r3, [pc, #164]	; (daf4 <spi_init+0x208>)
    da50:	4798      	blx	r3
    da52:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    da54:	ab02      	add	r3, sp, #8
    da56:	1d9a      	adds	r2, r3, #6
    da58:	69b0      	ldr	r0, [r6, #24]
    da5a:	4b27      	ldr	r3, [pc, #156]	; (daf8 <spi_init+0x20c>)
    da5c:	4798      	blx	r3
    da5e:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    da60:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    da62:	2b00      	cmp	r3, #0
    da64:	d000      	beq.n	da68 <spi_init+0x17c>
    da66:	e74b      	b.n	d900 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    da68:	ab02      	add	r3, sp, #8
    da6a:	3306      	adds	r3, #6
    da6c:	781b      	ldrb	r3, [r3, #0]
    da6e:	733b      	strb	r3, [r7, #12]
    da70:	e7d5      	b.n	da1e <spi_init+0x132>
	uint32_t ctrlb = 0;
    da72:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    da74:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    da76:	6873      	ldr	r3, [r6, #4]
    da78:	68b1      	ldr	r1, [r6, #8]
    da7a:	430b      	orrs	r3, r1
    da7c:	68f1      	ldr	r1, [r6, #12]
    da7e:	430b      	orrs	r3, r1
    da80:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    da82:	7c31      	ldrb	r1, [r6, #16]
    da84:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    da86:	7c71      	ldrb	r1, [r6, #17]
    da88:	2900      	cmp	r1, #0
    da8a:	d103      	bne.n	da94 <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    da8c:	491b      	ldr	r1, [pc, #108]	; (dafc <spi_init+0x210>)
    da8e:	7889      	ldrb	r1, [r1, #2]
    da90:	0789      	lsls	r1, r1, #30
    da92:	d501      	bpl.n	da98 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    da94:	2180      	movs	r1, #128	; 0x80
    da96:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    da98:	7cb1      	ldrb	r1, [r6, #18]
    da9a:	2900      	cmp	r1, #0
    da9c:	d002      	beq.n	daa4 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    da9e:	2180      	movs	r1, #128	; 0x80
    daa0:	0289      	lsls	r1, r1, #10
    daa2:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    daa4:	7cf1      	ldrb	r1, [r6, #19]
    daa6:	2900      	cmp	r1, #0
    daa8:	d002      	beq.n	dab0 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    daaa:	2180      	movs	r1, #128	; 0x80
    daac:	0089      	lsls	r1, r1, #2
    daae:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    dab0:	7d31      	ldrb	r1, [r6, #20]
    dab2:	2900      	cmp	r1, #0
    dab4:	d002      	beq.n	dabc <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    dab6:	2180      	movs	r1, #128	; 0x80
    dab8:	0189      	lsls	r1, r1, #6
    daba:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    dabc:	6839      	ldr	r1, [r7, #0]
    dabe:	430b      	orrs	r3, r1
    dac0:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    dac2:	687b      	ldr	r3, [r7, #4]
    dac4:	431a      	orrs	r2, r3
    dac6:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    dac8:	2000      	movs	r0, #0
    daca:	e719      	b.n	d900 <spi_init+0x14>
    dacc:	0000d7e5 	.word	0x0000d7e5
    dad0:	40000400 	.word	0x40000400
    dad4:	0000ed5d 	.word	0x0000ed5d
    dad8:	0000ecd1 	.word	0x0000ecd1
    dadc:	0000d621 	.word	0x0000d621
    dae0:	0000df21 	.word	0x0000df21
    dae4:	0000d821 	.word	0x0000d821
    dae8:	20000564 	.word	0x20000564
    daec:	0000d66d 	.word	0x0000d66d
    daf0:	0000ee55 	.word	0x0000ee55
    daf4:	0000ed79 	.word	0x0000ed79
    daf8:	0000d563 	.word	0x0000d563
    dafc:	41002000 	.word	0x41002000

0000db00 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    db00:	b5f0      	push	{r4, r5, r6, r7, lr}
    db02:	46d6      	mov	lr, sl
    db04:	464f      	mov	r7, r9
    db06:	b580      	push	{r7, lr}
    db08:	b083      	sub	sp, #12
    db0a:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    db0c:	2538      	movs	r5, #56	; 0x38
    db0e:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    db10:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    db12:	2e05      	cmp	r6, #5
    db14:	d075      	beq.n	dc02 <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    db16:	3512      	adds	r5, #18
	if (length == 0) {
    db18:	2a00      	cmp	r2, #0
    db1a:	d072      	beq.n	dc02 <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    db1c:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    db1e:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    db20:	2c00      	cmp	r4, #0
    db22:	d06e      	beq.n	dc02 <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    db24:	7944      	ldrb	r4, [r0, #5]
    db26:	2c00      	cmp	r4, #0
    db28:	d103      	bne.n	db32 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    db2a:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    db2c:	7e25      	ldrb	r5, [r4, #24]
    db2e:	07a9      	lsls	r1, r5, #30
    db30:	d40a      	bmi.n	db48 <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    db32:	3a01      	subs	r2, #1
    db34:	b294      	uxth	r4, r2
    db36:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    db38:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    db3a:	2102      	movs	r1, #2
    db3c:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    db3e:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    db40:	05db      	lsls	r3, r3, #23
    db42:	0ddb      	lsrs	r3, r3, #23
    db44:	469a      	mov	sl, r3
    db46:	e037      	b.n	dbb8 <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    db48:	2502      	movs	r5, #2
    db4a:	7625      	strb	r5, [r4, #24]
    db4c:	e7f1      	b.n	db32 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    db4e:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    db50:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    db52:	423b      	tst	r3, r7
    db54:	d0fc      	beq.n	db50 <spi_read_buffer_wait+0x50>
    db56:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    db58:	423b      	tst	r3, r7
    db5a:	d009      	beq.n	db70 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    db5c:	4653      	mov	r3, sl
    db5e:	628b      	str	r3, [r1, #40]	; 0x28
    db60:	e02d      	b.n	dbbe <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    db62:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    db64:	464d      	mov	r5, r9
    db66:	422b      	tst	r3, r5
    db68:	d138      	bne.n	dbdc <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    db6a:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    db6c:	4213      	tst	r3, r2
    db6e:	d045      	beq.n	dbfc <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    db70:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    db72:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    db74:	4213      	tst	r3, r2
    db76:	d0fc      	beq.n	db72 <spi_read_buffer_wait+0x72>
    db78:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    db7a:	4213      	tst	r3, r2
    db7c:	d040      	beq.n	dc00 <spi_read_buffer_wait+0x100>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    db7e:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    db80:	2500      	movs	r5, #0
    db82:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    db84:	4213      	tst	r3, r2
    db86:	d002      	beq.n	db8e <spi_read_buffer_wait+0x8e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    db88:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    db8a:	231e      	movs	r3, #30
    db8c:	9301      	str	r3, [sp, #4]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    db8e:	7983      	ldrb	r3, [r0, #6]
    db90:	2b01      	cmp	r3, #1
    db92:	d027      	beq.n	dbe4 <spi_read_buffer_wait+0xe4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    db94:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    db96:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    db98:	9901      	ldr	r1, [sp, #4]
    db9a:	2900      	cmp	r1, #0
    db9c:	d137      	bne.n	dc0e <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    db9e:	1c75      	adds	r5, r6, #1
    dba0:	b2ad      	uxth	r5, r5
    dba2:	4661      	mov	r1, ip
    dba4:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dba6:	7981      	ldrb	r1, [r0, #6]
    dba8:	2901      	cmp	r1, #1
    dbaa:	d01f      	beq.n	dbec <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    dbac:	002e      	movs	r6, r5
	while (length--) {
    dbae:	3c01      	subs	r4, #1
    dbb0:	b2a4      	uxth	r4, r4
    dbb2:	4b18      	ldr	r3, [pc, #96]	; (dc14 <spi_read_buffer_wait+0x114>)
    dbb4:	429c      	cmp	r4, r3
    dbb6:	d01f      	beq.n	dbf8 <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    dbb8:	7943      	ldrb	r3, [r0, #5]
    dbba:	2b01      	cmp	r3, #1
    dbbc:	d0c7      	beq.n	db4e <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    dbbe:	7943      	ldrb	r3, [r0, #5]
    dbc0:	2b00      	cmp	r3, #0
    dbc2:	d1d5      	bne.n	db70 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    dbc4:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    dbc6:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    dbc8:	4213      	tst	r3, r2
    dbca:	d1ca      	bne.n	db62 <spi_read_buffer_wait+0x62>
    dbcc:	4b12      	ldr	r3, [pc, #72]	; (dc18 <spi_read_buffer_wait+0x118>)
    dbce:	7e0d      	ldrb	r5, [r1, #24]
    dbd0:	4215      	tst	r5, r2
    dbd2:	d1c6      	bne.n	db62 <spi_read_buffer_wait+0x62>
    dbd4:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    dbd6:	2b00      	cmp	r3, #0
    dbd8:	d1f9      	bne.n	dbce <spi_read_buffer_wait+0xce>
    dbda:	e7c2      	b.n	db62 <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    dbdc:	2302      	movs	r3, #2
    dbde:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    dbe0:	2504      	movs	r5, #4
    dbe2:	e00e      	b.n	dc02 <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    dbe4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    dbe6:	05db      	lsls	r3, r3, #23
    dbe8:	0ddb      	lsrs	r3, r3, #23
    dbea:	e7d5      	b.n	db98 <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    dbec:	3602      	adds	r6, #2
    dbee:	b2b6      	uxth	r6, r6
    dbf0:	0a1b      	lsrs	r3, r3, #8
    dbf2:	4661      	mov	r1, ip
    dbf4:	554b      	strb	r3, [r1, r5]
    dbf6:	e7da      	b.n	dbae <spi_read_buffer_wait+0xae>
    dbf8:	9d01      	ldr	r5, [sp, #4]
    dbfa:	e002      	b.n	dc02 <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    dbfc:	2512      	movs	r5, #18
    dbfe:	e000      	b.n	dc02 <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    dc00:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    dc02:	0028      	movs	r0, r5
    dc04:	b003      	add	sp, #12
    dc06:	bc0c      	pop	{r2, r3}
    dc08:	4691      	mov	r9, r2
    dc0a:	469a      	mov	sl, r3
    dc0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc0e:	9d01      	ldr	r5, [sp, #4]
    dc10:	e7f7      	b.n	dc02 <spi_read_buffer_wait+0x102>
    dc12:	46c0      	nop			; (mov r8, r8)
    dc14:	0000ffff 	.word	0x0000ffff
    dc18:	00002710 	.word	0x00002710

0000dc1c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    dc1c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    dc1e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    dc20:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    dc22:	2c01      	cmp	r4, #1
    dc24:	d001      	beq.n	dc2a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    dc26:	0018      	movs	r0, r3
    dc28:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    dc2a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    dc2c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    dc2e:	2c00      	cmp	r4, #0
    dc30:	d1f9      	bne.n	dc26 <spi_select_slave+0xa>
		if (select) {
    dc32:	2a00      	cmp	r2, #0
    dc34:	d058      	beq.n	dce8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    dc36:	784b      	ldrb	r3, [r1, #1]
    dc38:	2b00      	cmp	r3, #0
    dc3a:	d044      	beq.n	dcc6 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    dc3c:	6803      	ldr	r3, [r0, #0]
    dc3e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    dc40:	07db      	lsls	r3, r3, #31
    dc42:	d410      	bmi.n	dc66 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    dc44:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    dc46:	09d1      	lsrs	r1, r2, #7
		return NULL;
    dc48:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    dc4a:	2900      	cmp	r1, #0
    dc4c:	d104      	bne.n	dc58 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    dc4e:	0953      	lsrs	r3, r2, #5
    dc50:	01db      	lsls	r3, r3, #7
    dc52:	492e      	ldr	r1, [pc, #184]	; (dd0c <spi_select_slave+0xf0>)
    dc54:	468c      	mov	ip, r1
    dc56:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    dc58:	211f      	movs	r1, #31
    dc5a:	4011      	ands	r1, r2
    dc5c:	2201      	movs	r2, #1
    dc5e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    dc60:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    dc62:	2305      	movs	r3, #5
    dc64:	e7df      	b.n	dc26 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    dc66:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    dc68:	09d4      	lsrs	r4, r2, #7
		return NULL;
    dc6a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    dc6c:	2c00      	cmp	r4, #0
    dc6e:	d104      	bne.n	dc7a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    dc70:	0953      	lsrs	r3, r2, #5
    dc72:	01db      	lsls	r3, r3, #7
    dc74:	4c25      	ldr	r4, [pc, #148]	; (dd0c <spi_select_slave+0xf0>)
    dc76:	46a4      	mov	ip, r4
    dc78:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    dc7a:	241f      	movs	r4, #31
    dc7c:	4014      	ands	r4, r2
    dc7e:	2201      	movs	r2, #1
    dc80:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    dc82:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    dc84:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    dc86:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    dc88:	07d2      	lsls	r2, r2, #31
    dc8a:	d501      	bpl.n	dc90 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    dc8c:	788a      	ldrb	r2, [r1, #2]
    dc8e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    dc90:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    dc92:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    dc94:	2a00      	cmp	r2, #0
    dc96:	d1c6      	bne.n	dc26 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    dc98:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    dc9a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    dc9c:	7e13      	ldrb	r3, [r2, #24]
    dc9e:	420b      	tst	r3, r1
    dca0:	d0fc      	beq.n	dc9c <spi_select_slave+0x80>
    dca2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    dca4:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    dca6:	0749      	lsls	r1, r1, #29
    dca8:	d5bd      	bpl.n	dc26 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dcaa:	8b53      	ldrh	r3, [r2, #26]
    dcac:	075b      	lsls	r3, r3, #29
    dcae:	d501      	bpl.n	dcb4 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dcb0:	2304      	movs	r3, #4
    dcb2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dcb4:	7983      	ldrb	r3, [r0, #6]
    dcb6:	2b01      	cmp	r3, #1
    dcb8:	d002      	beq.n	dcc0 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    dcba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dcbc:	2300      	movs	r3, #0
    dcbe:	e7b2      	b.n	dc26 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    dcc0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dcc2:	2300      	movs	r3, #0
    dcc4:	e7af      	b.n	dc26 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    dcc6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    dcc8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    dcca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    dccc:	2900      	cmp	r1, #0
    dcce:	d104      	bne.n	dcda <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    dcd0:	0953      	lsrs	r3, r2, #5
    dcd2:	01db      	lsls	r3, r3, #7
    dcd4:	490d      	ldr	r1, [pc, #52]	; (dd0c <spi_select_slave+0xf0>)
    dcd6:	468c      	mov	ip, r1
    dcd8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    dcda:	211f      	movs	r1, #31
    dcdc:	4011      	ands	r1, r2
    dcde:	2201      	movs	r2, #1
    dce0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    dce2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    dce4:	2300      	movs	r3, #0
    dce6:	e79e      	b.n	dc26 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    dce8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    dcea:	09d1      	lsrs	r1, r2, #7
		return NULL;
    dcec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    dcee:	2900      	cmp	r1, #0
    dcf0:	d104      	bne.n	dcfc <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    dcf2:	0953      	lsrs	r3, r2, #5
    dcf4:	01db      	lsls	r3, r3, #7
    dcf6:	4905      	ldr	r1, [pc, #20]	; (dd0c <spi_select_slave+0xf0>)
    dcf8:	468c      	mov	ip, r1
    dcfa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    dcfc:	211f      	movs	r1, #31
    dcfe:	4011      	ands	r1, r2
    dd00:	2201      	movs	r2, #1
    dd02:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    dd04:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    dd06:	2300      	movs	r3, #0
    dd08:	e78d      	b.n	dc26 <spi_select_slave+0xa>
    dd0a:	46c0      	nop			; (mov r8, r8)
    dd0c:	41004400 	.word	0x41004400

0000dd10 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    dd10:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd12:	46de      	mov	lr, fp
    dd14:	4657      	mov	r7, sl
    dd16:	464e      	mov	r6, r9
    dd18:	4645      	mov	r5, r8
    dd1a:	b5e0      	push	{r5, r6, r7, lr}
    dd1c:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    dd1e:	2338      	movs	r3, #56	; 0x38
    dd20:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    dd22:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    dd24:	2c05      	cmp	r4, #5
    dd26:	d002      	beq.n	dd2e <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    dd28:	3312      	adds	r3, #18
	if (length == 0) {
    dd2a:	2a00      	cmp	r2, #0
    dd2c:	d107      	bne.n	dd3e <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    dd2e:	0018      	movs	r0, r3
    dd30:	b003      	add	sp, #12
    dd32:	bc3c      	pop	{r2, r3, r4, r5}
    dd34:	4690      	mov	r8, r2
    dd36:	4699      	mov	r9, r3
    dd38:	46a2      	mov	sl, r4
    dd3a:	46ab      	mov	fp, r5
    dd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    dd3e:	7943      	ldrb	r3, [r0, #5]
    dd40:	2b00      	cmp	r3, #0
    dd42:	d103      	bne.n	dd4c <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    dd44:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    dd46:	7e1c      	ldrb	r4, [r3, #24]
    dd48:	07a4      	lsls	r4, r4, #30
    dd4a:	d40a      	bmi.n	dd62 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    dd4c:	4693      	mov	fp, r2
    dd4e:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    dd50:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    dd52:	2502      	movs	r5, #2
    dd54:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    dd56:	3502      	adds	r5, #2
    dd58:	46a8      	mov	r8, r5
    dd5a:	3a01      	subs	r2, #1
    dd5c:	b292      	uxth	r2, r2
    dd5e:	468a      	mov	sl, r1
    dd60:	e023      	b.n	ddaa <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    dd62:	2402      	movs	r4, #2
    dd64:	761c      	strb	r4, [r3, #24]
    dd66:	e7f1      	b.n	dd4c <spi_write_buffer_wait+0x3c>
    dd68:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    dd6a:	4661      	mov	r1, ip
    dd6c:	420d      	tst	r5, r1
    dd6e:	d12e      	bne.n	ddce <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    dd70:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    dd72:	421d      	tst	r5, r3
    dd74:	d100      	bne.n	dd78 <spi_write_buffer_wait+0x68>
    dd76:	e0c2      	b.n	defe <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    dd78:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    dd7a:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    dd7c:	421d      	tst	r5, r3
    dd7e:	d0fc      	beq.n	dd7a <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    dd80:	1c67      	adds	r7, r4, #1
    dd82:	b2bf      	uxth	r7, r7
    dd84:	4651      	mov	r1, sl
    dd86:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dd88:	7981      	ldrb	r1, [r0, #6]
    dd8a:	2901      	cmp	r1, #1
    dd8c:	d023      	beq.n	ddd6 <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    dd8e:	b2ad      	uxth	r5, r5
    dd90:	003c      	movs	r4, r7
    dd92:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    dd94:	421f      	tst	r7, r3
    dd96:	d002      	beq.n	dd9e <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    dd98:	05ed      	lsls	r5, r5, #23
    dd9a:	0ded      	lsrs	r5, r5, #23
    dd9c:	62b5      	str	r5, [r6, #40]	; 0x28
    dd9e:	1e55      	subs	r5, r2, #1
    dda0:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    dda2:	79c6      	ldrb	r6, [r0, #7]
    dda4:	2e00      	cmp	r6, #0
    dda6:	d11d      	bne.n	dde4 <spi_write_buffer_wait+0xd4>
    dda8:	002a      	movs	r2, r5
	while (length--) {
    ddaa:	4d5a      	ldr	r5, [pc, #360]	; (df14 <spi_write_buffer_wait+0x204>)
    ddac:	42aa      	cmp	r2, r5
    ddae:	d070      	beq.n	de92 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    ddb0:	7945      	ldrb	r5, [r0, #5]
    ddb2:	2d00      	cmp	r5, #0
    ddb4:	d1e0      	bne.n	dd78 <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ddb6:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ddb8:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    ddba:	421d      	tst	r5, r3
    ddbc:	d1d4      	bne.n	dd68 <spi_write_buffer_wait+0x58>
    ddbe:	4d56      	ldr	r5, [pc, #344]	; (df18 <spi_write_buffer_wait+0x208>)
    ddc0:	7e37      	ldrb	r7, [r6, #24]
    ddc2:	421f      	tst	r7, r3
    ddc4:	d1d0      	bne.n	dd68 <spi_write_buffer_wait+0x58>
    ddc6:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    ddc8:	2d00      	cmp	r5, #0
    ddca:	d1f9      	bne.n	ddc0 <spi_write_buffer_wait+0xb0>
    ddcc:	e7cc      	b.n	dd68 <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    ddce:	2302      	movs	r3, #2
    ddd0:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    ddd2:	3302      	adds	r3, #2
    ddd4:	e7ab      	b.n	dd2e <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    ddd6:	3402      	adds	r4, #2
    ddd8:	b2a4      	uxth	r4, r4
    ddda:	4651      	mov	r1, sl
    dddc:	5dcf      	ldrb	r7, [r1, r7]
    ddde:	023f      	lsls	r7, r7, #8
    dde0:	433d      	orrs	r5, r7
    dde2:	e7d6      	b.n	dd92 <spi_write_buffer_wait+0x82>
    dde4:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    dde6:	7945      	ldrb	r5, [r0, #5]
    dde8:	2d00      	cmp	r5, #0
    ddea:	d137      	bne.n	de5c <spi_write_buffer_wait+0x14c>
    ddec:	4d4b      	ldr	r5, [pc, #300]	; (df1c <spi_write_buffer_wait+0x20c>)
    ddee:	9101      	str	r1, [sp, #4]
    ddf0:	e012      	b.n	de18 <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    ddf2:	3402      	adds	r4, #2
    ddf4:	b2a4      	uxth	r4, r4
    ddf6:	4649      	mov	r1, r9
    ddf8:	9f01      	ldr	r7, [sp, #4]
    ddfa:	5c79      	ldrb	r1, [r7, r1]
    ddfc:	0209      	lsls	r1, r1, #8
    ddfe:	9f00      	ldr	r7, [sp, #0]
    de00:	430f      	orrs	r7, r1
    de02:	e01b      	b.n	de3c <spi_write_buffer_wait+0x12c>
						length--;
    de04:	3a01      	subs	r2, #1
    de06:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    de08:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    de0a:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    de0c:	4641      	mov	r1, r8
    de0e:	420f      	tst	r7, r1
    de10:	d11b      	bne.n	de4a <spi_write_buffer_wait+0x13a>
    de12:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    de14:	2d00      	cmp	r5, #0
    de16:	d018      	beq.n	de4a <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    de18:	2a00      	cmp	r2, #0
    de1a:	d0f5      	beq.n	de08 <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    de1c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    de1e:	7e37      	ldrb	r7, [r6, #24]
    de20:	421f      	tst	r7, r3
    de22:	d0f1      	beq.n	de08 <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    de24:	1c67      	adds	r7, r4, #1
    de26:	b2b9      	uxth	r1, r7
    de28:	4689      	mov	r9, r1
    de2a:	9901      	ldr	r1, [sp, #4]
    de2c:	5d09      	ldrb	r1, [r1, r4]
    de2e:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    de30:	7981      	ldrb	r1, [r0, #6]
    de32:	2901      	cmp	r1, #1
    de34:	d0dd      	beq.n	ddf2 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    de36:	4669      	mov	r1, sp
    de38:	880f      	ldrh	r7, [r1, #0]
    de3a:	464c      	mov	r4, r9
    de3c:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    de3e:	4219      	tst	r1, r3
    de40:	d0e0      	beq.n	de04 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    de42:	05ff      	lsls	r7, r7, #23
    de44:	0dff      	lsrs	r7, r7, #23
    de46:	62b7      	str	r7, [r6, #40]	; 0x28
    de48:	e7dc      	b.n	de04 <spi_write_buffer_wait+0xf4>
    de4a:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    de4c:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    de4e:	4667      	mov	r7, ip
    de50:	423d      	tst	r5, r7
    de52:	d118      	bne.n	de86 <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    de54:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    de56:	4646      	mov	r6, r8
    de58:	4235      	tst	r5, r6
    de5a:	d052      	beq.n	df02 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    de5c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    de5e:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    de60:	4647      	mov	r7, r8
    de62:	423d      	tst	r5, r7
    de64:	d0fb      	beq.n	de5e <spi_write_buffer_wait+0x14e>
    de66:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    de68:	423d      	tst	r5, r7
    de6a:	d007      	beq.n	de7c <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    de6c:	8b75      	ldrh	r5, [r6, #26]
    de6e:	423d      	tst	r5, r7
    de70:	d000      	beq.n	de74 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    de72:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    de74:	7985      	ldrb	r5, [r0, #6]
    de76:	2d01      	cmp	r5, #1
    de78:	d009      	beq.n	de8e <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    de7a:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    de7c:	465d      	mov	r5, fp
    de7e:	3d01      	subs	r5, #1
    de80:	b2ad      	uxth	r5, r5
    de82:	46ab      	mov	fp, r5
    de84:	e769      	b.n	dd5a <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    de86:	2302      	movs	r3, #2
    de88:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    de8a:	3302      	adds	r3, #2
    de8c:	e74f      	b.n	dd2e <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    de8e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    de90:	e7f4      	b.n	de7c <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    de92:	7943      	ldrb	r3, [r0, #5]
    de94:	2b01      	cmp	r3, #1
    de96:	d00b      	beq.n	deb0 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    de98:	2b00      	cmp	r3, #0
    de9a:	d134      	bne.n	df06 <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    de9c:	79c2      	ldrb	r2, [r0, #7]
    de9e:	2a00      	cmp	r2, #0
    dea0:	d100      	bne.n	dea4 <spi_write_buffer_wait+0x194>
    dea2:	e744      	b.n	dd2e <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    dea4:	2404      	movs	r4, #4
			while (flush_length) {
    dea6:	465b      	mov	r3, fp
    dea8:	465d      	mov	r5, fp
    deaa:	2b00      	cmp	r3, #0
    deac:	d119      	bne.n	dee2 <spi_write_buffer_wait+0x1d2>
    deae:	e73e      	b.n	dd2e <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    deb0:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    deb2:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    deb4:	7e0b      	ldrb	r3, [r1, #24]
    deb6:	4213      	tst	r3, r2
    deb8:	d0fc      	beq.n	deb4 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    deba:	2300      	movs	r3, #0
    debc:	e737      	b.n	dd2e <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    debe:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    dec0:	4223      	tst	r3, r4
    dec2:	d022      	beq.n	df0a <spi_write_buffer_wait+0x1fa>
    dec4:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    dec6:	4223      	tst	r3, r4
    dec8:	d007      	beq.n	deda <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    deca:	8b4b      	ldrh	r3, [r1, #26]
    decc:	4223      	tst	r3, r4
    dece:	d000      	beq.n	ded2 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ded0:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ded2:	7983      	ldrb	r3, [r0, #6]
    ded4:	2b01      	cmp	r3, #1
    ded6:	d010      	beq.n	defa <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ded8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    deda:	3d01      	subs	r5, #1
    dedc:	b2ad      	uxth	r5, r5
			while (flush_length) {
    dede:	2d00      	cmp	r5, #0
    dee0:	d015      	beq.n	df0e <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    dee2:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    dee4:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    dee6:	4223      	tst	r3, r4
    dee8:	d1e9      	bne.n	debe <spi_write_buffer_wait+0x1ae>
    deea:	4b0b      	ldr	r3, [pc, #44]	; (df18 <spi_write_buffer_wait+0x208>)
    deec:	7e0a      	ldrb	r2, [r1, #24]
    deee:	4222      	tst	r2, r4
    def0:	d1e5      	bne.n	debe <spi_write_buffer_wait+0x1ae>
    def2:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    def4:	2b00      	cmp	r3, #0
    def6:	d1f9      	bne.n	deec <spi_write_buffer_wait+0x1dc>
    def8:	e7e1      	b.n	debe <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    defa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    defc:	e7ed      	b.n	deda <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    defe:	2312      	movs	r3, #18
    df00:	e715      	b.n	dd2e <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    df02:	2312      	movs	r3, #18
    df04:	e713      	b.n	dd2e <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    df06:	2300      	movs	r3, #0
    df08:	e711      	b.n	dd2e <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    df0a:	2312      	movs	r3, #18
    df0c:	e70f      	b.n	dd2e <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    df0e:	2300      	movs	r3, #0
    df10:	e70d      	b.n	dd2e <spi_write_buffer_wait+0x1e>
    df12:	46c0      	nop			; (mov r8, r8)
    df14:	0000ffff 	.word	0x0000ffff
    df18:	00002710 	.word	0x00002710
    df1c:	00002711 	.word	0x00002711

0000df20 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    df20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    df22:	0080      	lsls	r0, r0, #2
    df24:	4b85      	ldr	r3, [pc, #532]	; (e13c <_spi_interrupt_handler+0x21c>)
    df26:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    df28:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    df2a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    df2c:	5ce3      	ldrb	r3, [r4, r3]
    df2e:	2236      	movs	r2, #54	; 0x36
    df30:	5ca7      	ldrb	r7, [r4, r2]
    df32:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    df34:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    df36:	7db5      	ldrb	r5, [r6, #22]
    df38:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    df3a:	07eb      	lsls	r3, r5, #31
    df3c:	d52e      	bpl.n	df9c <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    df3e:	7963      	ldrb	r3, [r4, #5]
    df40:	2b01      	cmp	r3, #1
    df42:	d025      	beq.n	df90 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    df44:	2b00      	cmp	r3, #0
    df46:	d129      	bne.n	df9c <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    df48:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    df4a:	2b00      	cmp	r3, #0
    df4c:	d026      	beq.n	df9c <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    df4e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    df50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    df52:	7813      	ldrb	r3, [r2, #0]
    df54:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    df56:	1c50      	adds	r0, r2, #1
    df58:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    df5a:	79a0      	ldrb	r0, [r4, #6]
    df5c:	2801      	cmp	r0, #1
    df5e:	d100      	bne.n	df62 <_spi_interrupt_handler+0x42>
    df60:	e069      	b.n	e036 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    df62:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    df64:	05db      	lsls	r3, r3, #23
    df66:	0ddb      	lsrs	r3, r3, #23
    df68:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    df6a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    df6c:	3b01      	subs	r3, #1
    df6e:	b29b      	uxth	r3, r3
    df70:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    df72:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    df74:	b29b      	uxth	r3, r3
    df76:	2b00      	cmp	r3, #0
    df78:	d110      	bne.n	df9c <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    df7a:	3301      	adds	r3, #1
    df7c:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    df7e:	7a63      	ldrb	r3, [r4, #9]
    df80:	2b01      	cmp	r3, #1
    df82:	d10b      	bne.n	df9c <_spi_interrupt_handler+0x7c>
    df84:	79e3      	ldrb	r3, [r4, #7]
    df86:	2b00      	cmp	r3, #0
    df88:	d108      	bne.n	df9c <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    df8a:	3302      	adds	r3, #2
    df8c:	75b3      	strb	r3, [r6, #22]
    df8e:	e005      	b.n	df9c <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    df90:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    df92:	2b00      	cmp	r3, #0
    df94:	d03e      	beq.n	e014 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    df96:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    df98:	2b00      	cmp	r3, #0
    df9a:	d1d8      	bne.n	df4e <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    df9c:	076b      	lsls	r3, r5, #29
    df9e:	d511      	bpl.n	dfc4 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dfa0:	8b73      	ldrh	r3, [r6, #26]
    dfa2:	075b      	lsls	r3, r3, #29
    dfa4:	d551      	bpl.n	e04a <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    dfa6:	7a63      	ldrb	r3, [r4, #9]
    dfa8:	2b01      	cmp	r3, #1
    dfaa:	d008      	beq.n	dfbe <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    dfac:	221e      	movs	r2, #30
    dfae:	2338      	movs	r3, #56	; 0x38
    dfb0:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    dfb2:	3b35      	subs	r3, #53	; 0x35
    dfb4:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    dfb6:	3302      	adds	r3, #2
    dfb8:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    dfba:	073b      	lsls	r3, r7, #28
    dfbc:	d441      	bmi.n	e042 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    dfbe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dfc0:	2304      	movs	r3, #4
    dfc2:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    dfc4:	07ab      	lsls	r3, r5, #30
    dfc6:	d515      	bpl.n	dff4 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    dfc8:	7963      	ldrb	r3, [r4, #5]
    dfca:	2b00      	cmp	r3, #0
    dfcc:	d10e      	bne.n	dfec <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    dfce:	3307      	adds	r3, #7
    dfd0:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    dfd2:	3b05      	subs	r3, #5
    dfd4:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    dfd6:	3301      	adds	r3, #1
    dfd8:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    dfda:	2300      	movs	r3, #0
    dfdc:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    dfde:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    dfe0:	3338      	adds	r3, #56	; 0x38
    dfe2:	2200      	movs	r2, #0
    dfe4:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    dfe6:	06fb      	lsls	r3, r7, #27
    dfe8:	d500      	bpl.n	dfec <_spi_interrupt_handler+0xcc>
    dfea:	e07f      	b.n	e0ec <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    dfec:	7963      	ldrb	r3, [r4, #5]
    dfee:	2b01      	cmp	r3, #1
    dff0:	d100      	bne.n	dff4 <_spi_interrupt_handler+0xd4>
    dff2:	e07f      	b.n	e0f4 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    dff4:	072b      	lsls	r3, r5, #28
    dff6:	d508      	bpl.n	e00a <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    dff8:	7963      	ldrb	r3, [r4, #5]
    dffa:	2b00      	cmp	r3, #0
    dffc:	d105      	bne.n	e00a <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    dffe:	3308      	adds	r3, #8
    e000:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    e002:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    e004:	06bb      	lsls	r3, r7, #26
    e006:	d500      	bpl.n	e00a <_spi_interrupt_handler+0xea>
    e008:	e08a      	b.n	e120 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    e00a:	b26d      	sxtb	r5, r5
    e00c:	2d00      	cmp	r5, #0
    e00e:	da00      	bge.n	e012 <_spi_interrupt_handler+0xf2>
    e010:	e08a      	b.n	e128 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    e012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    e014:	4b4a      	ldr	r3, [pc, #296]	; (e140 <_spi_interrupt_handler+0x220>)
    e016:	881b      	ldrh	r3, [r3, #0]
    e018:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    e01a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    e01c:	3b01      	subs	r3, #1
    e01e:	b29b      	uxth	r3, r3
    e020:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    e022:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    e024:	b29b      	uxth	r3, r3
    e026:	2b00      	cmp	r3, #0
    e028:	d101      	bne.n	e02e <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    e02a:	3301      	adds	r3, #1
    e02c:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    e02e:	7963      	ldrb	r3, [r4, #5]
		if (0
    e030:	2b01      	cmp	r3, #1
    e032:	d0b0      	beq.n	df96 <_spi_interrupt_handler+0x76>
    e034:	e786      	b.n	df44 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    e036:	7850      	ldrb	r0, [r2, #1]
    e038:	0200      	lsls	r0, r0, #8
    e03a:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    e03c:	3202      	adds	r2, #2
    e03e:	62e2      	str	r2, [r4, #44]	; 0x2c
    e040:	e790      	b.n	df64 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    e042:	0020      	movs	r0, r4
    e044:	69a3      	ldr	r3, [r4, #24]
    e046:	4798      	blx	r3
    e048:	e7b9      	b.n	dfbe <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    e04a:	7a63      	ldrb	r3, [r4, #9]
    e04c:	2b01      	cmp	r3, #1
    e04e:	d027      	beq.n	e0a0 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    e050:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    e052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e054:	05db      	lsls	r3, r3, #23
    e056:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    e058:	b2da      	uxtb	r2, r3
    e05a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    e05c:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    e05e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e060:	1c51      	adds	r1, r2, #1
    e062:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e064:	79a1      	ldrb	r1, [r4, #6]
    e066:	2901      	cmp	r1, #1
    e068:	d033      	beq.n	e0d2 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    e06a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e06c:	3b01      	subs	r3, #1
    e06e:	b29b      	uxth	r3, r3
    e070:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    e072:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e074:	b29b      	uxth	r3, r3
    e076:	2b00      	cmp	r3, #0
    e078:	d1a4      	bne.n	dfc4 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    e07a:	2200      	movs	r2, #0
    e07c:	3338      	adds	r3, #56	; 0x38
    e07e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    e080:	3b34      	subs	r3, #52	; 0x34
    e082:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    e084:	7a63      	ldrb	r3, [r4, #9]
    e086:	2b02      	cmp	r3, #2
    e088:	d029      	beq.n	e0de <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    e08a:	7a63      	ldrb	r3, [r4, #9]
    e08c:	2b00      	cmp	r3, #0
    e08e:	d000      	beq.n	e092 <_spi_interrupt_handler+0x172>
    e090:	e798      	b.n	dfc4 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    e092:	07bb      	lsls	r3, r7, #30
    e094:	d400      	bmi.n	e098 <_spi_interrupt_handler+0x178>
    e096:	e795      	b.n	dfc4 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    e098:	0020      	movs	r0, r4
    e09a:	6923      	ldr	r3, [r4, #16]
    e09c:	4798      	blx	r3
    e09e:	e791      	b.n	dfc4 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    e0a0:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    e0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    e0a4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    e0a6:	3b01      	subs	r3, #1
    e0a8:	b29b      	uxth	r3, r3
    e0aa:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    e0ac:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    e0ae:	b29b      	uxth	r3, r3
    e0b0:	2b00      	cmp	r3, #0
    e0b2:	d000      	beq.n	e0b6 <_spi_interrupt_handler+0x196>
    e0b4:	e786      	b.n	dfc4 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    e0b6:	3304      	adds	r3, #4
    e0b8:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    e0ba:	2200      	movs	r2, #0
    e0bc:	3334      	adds	r3, #52	; 0x34
    e0be:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    e0c0:	3b35      	subs	r3, #53	; 0x35
    e0c2:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    e0c4:	07fb      	lsls	r3, r7, #31
    e0c6:	d400      	bmi.n	e0ca <_spi_interrupt_handler+0x1aa>
    e0c8:	e77c      	b.n	dfc4 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    e0ca:	0020      	movs	r0, r4
    e0cc:	68e3      	ldr	r3, [r4, #12]
    e0ce:	4798      	blx	r3
    e0d0:	e778      	b.n	dfc4 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    e0d2:	0a1b      	lsrs	r3, r3, #8
    e0d4:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    e0d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e0d8:	3301      	adds	r3, #1
    e0da:	62a3      	str	r3, [r4, #40]	; 0x28
    e0dc:	e7c5      	b.n	e06a <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    e0de:	077b      	lsls	r3, r7, #29
    e0e0:	d400      	bmi.n	e0e4 <_spi_interrupt_handler+0x1c4>
    e0e2:	e76f      	b.n	dfc4 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    e0e4:	0020      	movs	r0, r4
    e0e6:	6963      	ldr	r3, [r4, #20]
    e0e8:	4798      	blx	r3
    e0ea:	e76b      	b.n	dfc4 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    e0ec:	0020      	movs	r0, r4
    e0ee:	69e3      	ldr	r3, [r4, #28]
    e0f0:	4798      	blx	r3
    e0f2:	e77b      	b.n	dfec <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    e0f4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    e0f6:	2b01      	cmp	r3, #1
    e0f8:	d000      	beq.n	e0fc <_spi_interrupt_handler+0x1dc>
    e0fa:	e786      	b.n	e00a <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    e0fc:	79e3      	ldrb	r3, [r4, #7]
    e0fe:	2b00      	cmp	r3, #0
    e100:	d000      	beq.n	e104 <_spi_interrupt_handler+0x1e4>
    e102:	e782      	b.n	e00a <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    e104:	3302      	adds	r3, #2
    e106:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    e108:	3301      	adds	r3, #1
    e10a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    e10c:	2200      	movs	r2, #0
    e10e:	3335      	adds	r3, #53	; 0x35
    e110:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    e112:	07fb      	lsls	r3, r7, #31
    e114:	d400      	bmi.n	e118 <_spi_interrupt_handler+0x1f8>
    e116:	e76d      	b.n	dff4 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    e118:	0020      	movs	r0, r4
    e11a:	68e3      	ldr	r3, [r4, #12]
    e11c:	4798      	blx	r3
    e11e:	e769      	b.n	dff4 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    e120:	0020      	movs	r0, r4
    e122:	6a23      	ldr	r3, [r4, #32]
    e124:	4798      	blx	r3
    e126:	e770      	b.n	e00a <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    e128:	2380      	movs	r3, #128	; 0x80
    e12a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    e12c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    e12e:	067b      	lsls	r3, r7, #25
    e130:	d400      	bmi.n	e134 <_spi_interrupt_handler+0x214>
    e132:	e76e      	b.n	e012 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    e134:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e136:	0020      	movs	r0, r4
    e138:	4798      	blx	r3
}
    e13a:	e76a      	b.n	e012 <_spi_interrupt_handler+0xf2>
    e13c:	20000564 	.word	0x20000564
    e140:	2000057c 	.word	0x2000057c

0000e144 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    e144:	b5f0      	push	{r4, r5, r6, r7, lr}
    e146:	46de      	mov	lr, fp
    e148:	4657      	mov	r7, sl
    e14a:	464e      	mov	r6, r9
    e14c:	4645      	mov	r5, r8
    e14e:	b5e0      	push	{r5, r6, r7, lr}
    e150:	b091      	sub	sp, #68	; 0x44
    e152:	0005      	movs	r5, r0
    e154:	000c      	movs	r4, r1
    e156:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    e158:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    e15a:	0008      	movs	r0, r1
    e15c:	4bbc      	ldr	r3, [pc, #752]	; (e450 <usart_init+0x30c>)
    e15e:	4798      	blx	r3
    e160:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    e162:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    e164:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    e166:	07db      	lsls	r3, r3, #31
    e168:	d506      	bpl.n	e178 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    e16a:	b011      	add	sp, #68	; 0x44
    e16c:	bc3c      	pop	{r2, r3, r4, r5}
    e16e:	4690      	mov	r8, r2
    e170:	4699      	mov	r9, r3
    e172:	46a2      	mov	sl, r4
    e174:	46ab      	mov	fp, r5
    e176:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    e178:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    e17a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    e17c:	079b      	lsls	r3, r3, #30
    e17e:	d4f4      	bmi.n	e16a <usart_init+0x26>
    e180:	49b4      	ldr	r1, [pc, #720]	; (e454 <usart_init+0x310>)
    e182:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    e184:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    e186:	2301      	movs	r3, #1
    e188:	40bb      	lsls	r3, r7
    e18a:	4303      	orrs	r3, r0
    e18c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    e18e:	a90f      	add	r1, sp, #60	; 0x3c
    e190:	272d      	movs	r7, #45	; 0x2d
    e192:	5df3      	ldrb	r3, [r6, r7]
    e194:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    e196:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    e198:	b2d3      	uxtb	r3, r2
    e19a:	9302      	str	r3, [sp, #8]
    e19c:	0018      	movs	r0, r3
    e19e:	4bae      	ldr	r3, [pc, #696]	; (e458 <usart_init+0x314>)
    e1a0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    e1a2:	9802      	ldr	r0, [sp, #8]
    e1a4:	4bad      	ldr	r3, [pc, #692]	; (e45c <usart_init+0x318>)
    e1a6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    e1a8:	5df0      	ldrb	r0, [r6, r7]
    e1aa:	2100      	movs	r1, #0
    e1ac:	4bac      	ldr	r3, [pc, #688]	; (e460 <usart_init+0x31c>)
    e1ae:	4798      	blx	r3
	module->character_size = config->character_size;
    e1b0:	7af3      	ldrb	r3, [r6, #11]
    e1b2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    e1b4:	2324      	movs	r3, #36	; 0x24
    e1b6:	5cf3      	ldrb	r3, [r6, r3]
    e1b8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    e1ba:	2325      	movs	r3, #37	; 0x25
    e1bc:	5cf3      	ldrb	r3, [r6, r3]
    e1be:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    e1c0:	7ef3      	ldrb	r3, [r6, #27]
    e1c2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    e1c4:	7f33      	ldrb	r3, [r6, #28]
    e1c6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    e1c8:	682b      	ldr	r3, [r5, #0]
    e1ca:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    e1cc:	0018      	movs	r0, r3
    e1ce:	4ba0      	ldr	r3, [pc, #640]	; (e450 <usart_init+0x30c>)
    e1d0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    e1d2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    e1d4:	2200      	movs	r2, #0
    e1d6:	230e      	movs	r3, #14
    e1d8:	a906      	add	r1, sp, #24
    e1da:	468c      	mov	ip, r1
    e1dc:	4463      	add	r3, ip
    e1de:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    e1e0:	8a32      	ldrh	r2, [r6, #16]
    e1e2:	9202      	str	r2, [sp, #8]
    e1e4:	2380      	movs	r3, #128	; 0x80
    e1e6:	01db      	lsls	r3, r3, #7
    e1e8:	429a      	cmp	r2, r3
    e1ea:	d100      	bne.n	e1ee <usart_init+0xaa>
    e1ec:	e09e      	b.n	e32c <usart_init+0x1e8>
    e1ee:	d90f      	bls.n	e210 <usart_init+0xcc>
    e1f0:	23c0      	movs	r3, #192	; 0xc0
    e1f2:	01db      	lsls	r3, r3, #7
    e1f4:	9a02      	ldr	r2, [sp, #8]
    e1f6:	429a      	cmp	r2, r3
    e1f8:	d100      	bne.n	e1fc <usart_init+0xb8>
    e1fa:	e092      	b.n	e322 <usart_init+0x1de>
    e1fc:	2380      	movs	r3, #128	; 0x80
    e1fe:	021b      	lsls	r3, r3, #8
    e200:	429a      	cmp	r2, r3
    e202:	d000      	beq.n	e206 <usart_init+0xc2>
    e204:	e11f      	b.n	e446 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    e206:	2303      	movs	r3, #3
    e208:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    e20a:	2300      	movs	r3, #0
    e20c:	9307      	str	r3, [sp, #28]
    e20e:	e008      	b.n	e222 <usart_init+0xde>
	switch (config->sample_rate) {
    e210:	2380      	movs	r3, #128	; 0x80
    e212:	019b      	lsls	r3, r3, #6
    e214:	429a      	cmp	r2, r3
    e216:	d000      	beq.n	e21a <usart_init+0xd6>
    e218:	e115      	b.n	e446 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    e21a:	2310      	movs	r3, #16
    e21c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    e21e:	3b0f      	subs	r3, #15
    e220:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    e222:	6833      	ldr	r3, [r6, #0]
    e224:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    e226:	68f3      	ldr	r3, [r6, #12]
    e228:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    e22a:	6973      	ldr	r3, [r6, #20]
    e22c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    e22e:	7e33      	ldrb	r3, [r6, #24]
    e230:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    e232:	2326      	movs	r3, #38	; 0x26
    e234:	5cf3      	ldrb	r3, [r6, r3]
    e236:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    e238:	6873      	ldr	r3, [r6, #4]
    e23a:	4699      	mov	r9, r3
	switch (transfer_mode)
    e23c:	2b00      	cmp	r3, #0
    e23e:	d100      	bne.n	e242 <usart_init+0xfe>
    e240:	e0a0      	b.n	e384 <usart_init+0x240>
    e242:	2380      	movs	r3, #128	; 0x80
    e244:	055b      	lsls	r3, r3, #21
    e246:	4599      	cmp	r9, r3
    e248:	d100      	bne.n	e24c <usart_init+0x108>
    e24a:	e084      	b.n	e356 <usart_init+0x212>
	if(config->encoding_format_enable) {
    e24c:	7e73      	ldrb	r3, [r6, #25]
    e24e:	2b00      	cmp	r3, #0
    e250:	d002      	beq.n	e258 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    e252:	7eb3      	ldrb	r3, [r6, #26]
    e254:	4642      	mov	r2, r8
    e256:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    e258:	682a      	ldr	r2, [r5, #0]
    e25a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    e25c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    e25e:	2b00      	cmp	r3, #0
    e260:	d1fc      	bne.n	e25c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    e262:	330e      	adds	r3, #14
    e264:	aa06      	add	r2, sp, #24
    e266:	4694      	mov	ip, r2
    e268:	4463      	add	r3, ip
    e26a:	881b      	ldrh	r3, [r3, #0]
    e26c:	4642      	mov	r2, r8
    e26e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    e270:	9b05      	ldr	r3, [sp, #20]
    e272:	9a03      	ldr	r2, [sp, #12]
    e274:	4313      	orrs	r3, r2
    e276:	9a04      	ldr	r2, [sp, #16]
    e278:	4313      	orrs	r3, r2
    e27a:	464a      	mov	r2, r9
    e27c:	4313      	orrs	r3, r2
    e27e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    e280:	465b      	mov	r3, fp
    e282:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    e284:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    e286:	4653      	mov	r3, sl
    e288:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    e28a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    e28c:	2327      	movs	r3, #39	; 0x27
    e28e:	5cf3      	ldrb	r3, [r6, r3]
    e290:	2b00      	cmp	r3, #0
    e292:	d101      	bne.n	e298 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    e294:	3304      	adds	r3, #4
    e296:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    e298:	7e73      	ldrb	r3, [r6, #25]
    e29a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    e29c:	7f32      	ldrb	r2, [r6, #28]
    e29e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    e2a0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    e2a2:	7f72      	ldrb	r2, [r6, #29]
    e2a4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    e2a6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    e2a8:	2224      	movs	r2, #36	; 0x24
    e2aa:	5cb2      	ldrb	r2, [r6, r2]
    e2ac:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    e2ae:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    e2b0:	2225      	movs	r2, #37	; 0x25
    e2b2:	5cb2      	ldrb	r2, [r6, r2]
    e2b4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    e2b6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    e2b8:	7ab1      	ldrb	r1, [r6, #10]
    e2ba:	7af2      	ldrb	r2, [r6, #11]
    e2bc:	4311      	orrs	r1, r2
    e2be:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    e2c0:	8933      	ldrh	r3, [r6, #8]
    e2c2:	2bff      	cmp	r3, #255	; 0xff
    e2c4:	d100      	bne.n	e2c8 <usart_init+0x184>
    e2c6:	e081      	b.n	e3cc <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    e2c8:	2280      	movs	r2, #128	; 0x80
    e2ca:	0452      	lsls	r2, r2, #17
    e2cc:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    e2ce:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    e2d0:	232c      	movs	r3, #44	; 0x2c
    e2d2:	5cf3      	ldrb	r3, [r6, r3]
    e2d4:	2b00      	cmp	r3, #0
    e2d6:	d103      	bne.n	e2e0 <usart_init+0x19c>
    e2d8:	4b62      	ldr	r3, [pc, #392]	; (e464 <usart_init+0x320>)
    e2da:	789b      	ldrb	r3, [r3, #2]
    e2dc:	079b      	lsls	r3, r3, #30
    e2de:	d501      	bpl.n	e2e4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    e2e0:	2380      	movs	r3, #128	; 0x80
    e2e2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    e2e4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    e2e6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    e2e8:	2b00      	cmp	r3, #0
    e2ea:	d1fc      	bne.n	e2e6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    e2ec:	4643      	mov	r3, r8
    e2ee:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    e2f0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    e2f2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    e2f4:	2b00      	cmp	r3, #0
    e2f6:	d1fc      	bne.n	e2f2 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    e2f8:	4643      	mov	r3, r8
    e2fa:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    e2fc:	ab0e      	add	r3, sp, #56	; 0x38
    e2fe:	2280      	movs	r2, #128	; 0x80
    e300:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    e302:	2200      	movs	r2, #0
    e304:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    e306:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    e308:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    e30a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    e30c:	930a      	str	r3, [sp, #40]	; 0x28
    e30e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    e310:	930b      	str	r3, [sp, #44]	; 0x2c
    e312:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    e314:	930c      	str	r3, [sp, #48]	; 0x30
    e316:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    e318:	9302      	str	r3, [sp, #8]
    e31a:	930d      	str	r3, [sp, #52]	; 0x34
    e31c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    e31e:	ae0a      	add	r6, sp, #40	; 0x28
    e320:	e063      	b.n	e3ea <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    e322:	2308      	movs	r3, #8
    e324:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    e326:	3b07      	subs	r3, #7
    e328:	9307      	str	r3, [sp, #28]
    e32a:	e77a      	b.n	e222 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    e32c:	6833      	ldr	r3, [r6, #0]
    e32e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    e330:	68f3      	ldr	r3, [r6, #12]
    e332:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    e334:	6973      	ldr	r3, [r6, #20]
    e336:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    e338:	7e33      	ldrb	r3, [r6, #24]
    e33a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    e33c:	2326      	movs	r3, #38	; 0x26
    e33e:	5cf3      	ldrb	r3, [r6, r3]
    e340:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    e342:	6873      	ldr	r3, [r6, #4]
    e344:	4699      	mov	r9, r3
	switch (transfer_mode)
    e346:	2b00      	cmp	r3, #0
    e348:	d018      	beq.n	e37c <usart_init+0x238>
    e34a:	2380      	movs	r3, #128	; 0x80
    e34c:	055b      	lsls	r3, r3, #21
    e34e:	4599      	cmp	r9, r3
    e350:	d001      	beq.n	e356 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    e352:	2000      	movs	r0, #0
    e354:	e025      	b.n	e3a2 <usart_init+0x25e>
			if (!config->use_external_clock) {
    e356:	2327      	movs	r3, #39	; 0x27
    e358:	5cf3      	ldrb	r3, [r6, r3]
    e35a:	2b00      	cmp	r3, #0
    e35c:	d000      	beq.n	e360 <usart_init+0x21c>
    e35e:	e775      	b.n	e24c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    e360:	6a33      	ldr	r3, [r6, #32]
    e362:	001f      	movs	r7, r3
    e364:	b2c0      	uxtb	r0, r0
    e366:	4b40      	ldr	r3, [pc, #256]	; (e468 <usart_init+0x324>)
    e368:	4798      	blx	r3
    e36a:	0001      	movs	r1, r0
    e36c:	220e      	movs	r2, #14
    e36e:	ab06      	add	r3, sp, #24
    e370:	469c      	mov	ip, r3
    e372:	4462      	add	r2, ip
    e374:	0038      	movs	r0, r7
    e376:	4b3d      	ldr	r3, [pc, #244]	; (e46c <usart_init+0x328>)
    e378:	4798      	blx	r3
    e37a:	e012      	b.n	e3a2 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    e37c:	2308      	movs	r3, #8
    e37e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    e380:	2300      	movs	r3, #0
    e382:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    e384:	2327      	movs	r3, #39	; 0x27
    e386:	5cf3      	ldrb	r3, [r6, r3]
    e388:	2b00      	cmp	r3, #0
    e38a:	d00e      	beq.n	e3aa <usart_init+0x266>
				status_code =
    e38c:	9b06      	ldr	r3, [sp, #24]
    e38e:	9300      	str	r3, [sp, #0]
    e390:	9b07      	ldr	r3, [sp, #28]
    e392:	220e      	movs	r2, #14
    e394:	a906      	add	r1, sp, #24
    e396:	468c      	mov	ip, r1
    e398:	4462      	add	r2, ip
    e39a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    e39c:	6a30      	ldr	r0, [r6, #32]
    e39e:	4f34      	ldr	r7, [pc, #208]	; (e470 <usart_init+0x32c>)
    e3a0:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    e3a2:	2800      	cmp	r0, #0
    e3a4:	d000      	beq.n	e3a8 <usart_init+0x264>
    e3a6:	e6e0      	b.n	e16a <usart_init+0x26>
    e3a8:	e750      	b.n	e24c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    e3aa:	6a33      	ldr	r3, [r6, #32]
    e3ac:	001f      	movs	r7, r3
    e3ae:	b2c0      	uxtb	r0, r0
    e3b0:	4b2d      	ldr	r3, [pc, #180]	; (e468 <usart_init+0x324>)
    e3b2:	4798      	blx	r3
    e3b4:	0001      	movs	r1, r0
				status_code =
    e3b6:	9b06      	ldr	r3, [sp, #24]
    e3b8:	9300      	str	r3, [sp, #0]
    e3ba:	9b07      	ldr	r3, [sp, #28]
    e3bc:	220e      	movs	r2, #14
    e3be:	a806      	add	r0, sp, #24
    e3c0:	4684      	mov	ip, r0
    e3c2:	4462      	add	r2, ip
    e3c4:	0038      	movs	r0, r7
    e3c6:	4f2a      	ldr	r7, [pc, #168]	; (e470 <usart_init+0x32c>)
    e3c8:	47b8      	blx	r7
    e3ca:	e7ea      	b.n	e3a2 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    e3cc:	7ef3      	ldrb	r3, [r6, #27]
    e3ce:	2b00      	cmp	r3, #0
    e3d0:	d100      	bne.n	e3d4 <usart_init+0x290>
    e3d2:	e77d      	b.n	e2d0 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    e3d4:	2380      	movs	r3, #128	; 0x80
    e3d6:	04db      	lsls	r3, r3, #19
    e3d8:	431f      	orrs	r7, r3
    e3da:	e779      	b.n	e2d0 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    e3dc:	0020      	movs	r0, r4
    e3de:	4b25      	ldr	r3, [pc, #148]	; (e474 <usart_init+0x330>)
    e3e0:	4798      	blx	r3
    e3e2:	e007      	b.n	e3f4 <usart_init+0x2b0>
    e3e4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    e3e6:	2f04      	cmp	r7, #4
    e3e8:	d00d      	beq.n	e406 <usart_init+0x2c2>
    e3ea:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    e3ec:	00bb      	lsls	r3, r7, #2
    e3ee:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    e3f0:	2800      	cmp	r0, #0
    e3f2:	d0f3      	beq.n	e3dc <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    e3f4:	1c43      	adds	r3, r0, #1
    e3f6:	d0f5      	beq.n	e3e4 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    e3f8:	a90e      	add	r1, sp, #56	; 0x38
    e3fa:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    e3fc:	0c00      	lsrs	r0, r0, #16
    e3fe:	b2c0      	uxtb	r0, r0
    e400:	4b1d      	ldr	r3, [pc, #116]	; (e478 <usart_init+0x334>)
    e402:	4798      	blx	r3
    e404:	e7ee      	b.n	e3e4 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    e406:	2300      	movs	r3, #0
    e408:	60eb      	str	r3, [r5, #12]
    e40a:	612b      	str	r3, [r5, #16]
    e40c:	616b      	str	r3, [r5, #20]
    e40e:	61ab      	str	r3, [r5, #24]
    e410:	61eb      	str	r3, [r5, #28]
    e412:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    e414:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    e416:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    e418:	2200      	movs	r2, #0
    e41a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    e41c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    e41e:	3330      	adds	r3, #48	; 0x30
    e420:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    e422:	3301      	adds	r3, #1
    e424:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    e426:	3301      	adds	r3, #1
    e428:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    e42a:	3301      	adds	r3, #1
    e42c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    e42e:	6828      	ldr	r0, [r5, #0]
    e430:	4b07      	ldr	r3, [pc, #28]	; (e450 <usart_init+0x30c>)
    e432:	4798      	blx	r3
    e434:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    e436:	4911      	ldr	r1, [pc, #68]	; (e47c <usart_init+0x338>)
    e438:	4b11      	ldr	r3, [pc, #68]	; (e480 <usart_init+0x33c>)
    e43a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    e43c:	00a4      	lsls	r4, r4, #2
    e43e:	4b11      	ldr	r3, [pc, #68]	; (e484 <usart_init+0x340>)
    e440:	50e5      	str	r5, [r4, r3]
	return status_code;
    e442:	2000      	movs	r0, #0
    e444:	e691      	b.n	e16a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    e446:	2310      	movs	r3, #16
    e448:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    e44a:	2300      	movs	r3, #0
    e44c:	9307      	str	r3, [sp, #28]
    e44e:	e6e8      	b.n	e222 <usart_init+0xde>
    e450:	0000d7e5 	.word	0x0000d7e5
    e454:	40000400 	.word	0x40000400
    e458:	0000ed5d 	.word	0x0000ed5d
    e45c:	0000ecd1 	.word	0x0000ecd1
    e460:	0000d621 	.word	0x0000d621
    e464:	41002000 	.word	0x41002000
    e468:	0000ed79 	.word	0x0000ed79
    e46c:	0000d563 	.word	0x0000d563
    e470:	0000d58d 	.word	0x0000d58d
    e474:	0000d66d 	.word	0x0000d66d
    e478:	0000ee55 	.word	0x0000ee55
    e47c:	0000e585 	.word	0x0000e585
    e480:	0000d821 	.word	0x0000d821
    e484:	20000564 	.word	0x20000564

0000e488 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    e488:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    e48a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    e48c:	2a00      	cmp	r2, #0
    e48e:	d101      	bne.n	e494 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    e490:	0018      	movs	r0, r3
    e492:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    e494:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    e496:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    e498:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    e49a:	2a00      	cmp	r2, #0
    e49c:	d1f8      	bne.n	e490 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    e49e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    e4a0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    e4a2:	2a00      	cmp	r2, #0
    e4a4:	d1fc      	bne.n	e4a0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    e4a6:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    e4a8:	2102      	movs	r1, #2
    e4aa:	7e1a      	ldrb	r2, [r3, #24]
    e4ac:	420a      	tst	r2, r1
    e4ae:	d0fc      	beq.n	e4aa <usart_write_wait+0x22>
	return STATUS_OK;
    e4b0:	2300      	movs	r3, #0
    e4b2:	e7ed      	b.n	e490 <usart_write_wait+0x8>

0000e4b4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    e4b4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    e4b6:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    e4b8:	2a00      	cmp	r2, #0
    e4ba:	d101      	bne.n	e4c0 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    e4bc:	0018      	movs	r0, r3
    e4be:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    e4c0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    e4c2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    e4c4:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    e4c6:	2a00      	cmp	r2, #0
    e4c8:	d1f8      	bne.n	e4bc <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    e4ca:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    e4cc:	7e10      	ldrb	r0, [r2, #24]
    e4ce:	0740      	lsls	r0, r0, #29
    e4d0:	d5f4      	bpl.n	e4bc <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    e4d2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    e4d4:	2b00      	cmp	r3, #0
    e4d6:	d1fc      	bne.n	e4d2 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    e4d8:	8b53      	ldrh	r3, [r2, #26]
    e4da:	b2db      	uxtb	r3, r3
	if (error_code) {
    e4dc:	0698      	lsls	r0, r3, #26
    e4de:	d01d      	beq.n	e51c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    e4e0:	0798      	lsls	r0, r3, #30
    e4e2:	d503      	bpl.n	e4ec <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    e4e4:	2302      	movs	r3, #2
    e4e6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    e4e8:	3318      	adds	r3, #24
    e4ea:	e7e7      	b.n	e4bc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    e4ec:	0758      	lsls	r0, r3, #29
    e4ee:	d503      	bpl.n	e4f8 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    e4f0:	2304      	movs	r3, #4
    e4f2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    e4f4:	331a      	adds	r3, #26
    e4f6:	e7e1      	b.n	e4bc <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    e4f8:	07d8      	lsls	r0, r3, #31
    e4fa:	d503      	bpl.n	e504 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    e4fc:	2301      	movs	r3, #1
    e4fe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    e500:	3312      	adds	r3, #18
    e502:	e7db      	b.n	e4bc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    e504:	06d8      	lsls	r0, r3, #27
    e506:	d503      	bpl.n	e510 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    e508:	2310      	movs	r3, #16
    e50a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    e50c:	3332      	adds	r3, #50	; 0x32
    e50e:	e7d5      	b.n	e4bc <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    e510:	069b      	lsls	r3, r3, #26
    e512:	d503      	bpl.n	e51c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    e514:	2320      	movs	r3, #32
    e516:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    e518:	3321      	adds	r3, #33	; 0x21
    e51a:	e7cf      	b.n	e4bc <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    e51c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    e51e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    e520:	2300      	movs	r3, #0
    e522:	e7cb      	b.n	e4bc <usart_read_wait+0x8>

0000e524 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    e524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e526:	0004      	movs	r4, r0
    e528:	000d      	movs	r5, r1
    e52a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    e52c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    e52e:	4b0f      	ldr	r3, [pc, #60]	; (e56c <_usart_read_buffer+0x48>)
    e530:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    e532:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    e534:	b29b      	uxth	r3, r3
    e536:	2b00      	cmp	r3, #0
    e538:	d003      	beq.n	e542 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    e53a:	4b0d      	ldr	r3, [pc, #52]	; (e570 <_usart_read_buffer+0x4c>)
    e53c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    e53e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    e540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    e542:	85a6      	strh	r6, [r4, #44]	; 0x2c
    e544:	4b0a      	ldr	r3, [pc, #40]	; (e570 <_usart_read_buffer+0x4c>)
    e546:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    e548:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    e54a:	2205      	movs	r2, #5
    e54c:	2332      	movs	r3, #50	; 0x32
    e54e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    e550:	3b2e      	subs	r3, #46	; 0x2e
    e552:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    e554:	7a23      	ldrb	r3, [r4, #8]
    e556:	2b00      	cmp	r3, #0
    e558:	d001      	beq.n	e55e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    e55a:	2320      	movs	r3, #32
    e55c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    e55e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    e560:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    e562:	2b00      	cmp	r3, #0
    e564:	d0ec      	beq.n	e540 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    e566:	2308      	movs	r3, #8
    e568:	75bb      	strb	r3, [r7, #22]
    e56a:	e7e9      	b.n	e540 <_usart_read_buffer+0x1c>
    e56c:	0000cfad 	.word	0x0000cfad
    e570:	0000cfed 	.word	0x0000cfed

0000e574 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    e574:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    e576:	2201      	movs	r2, #1
    e578:	4b01      	ldr	r3, [pc, #4]	; (e580 <usart_read_job+0xc>)
    e57a:	4798      	blx	r3
}
    e57c:	bd10      	pop	{r4, pc}
    e57e:	46c0      	nop			; (mov r8, r8)
    e580:	0000e525 	.word	0x0000e525

0000e584 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    e584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    e586:	0080      	lsls	r0, r0, #2
    e588:	4b62      	ldr	r3, [pc, #392]	; (e714 <_usart_interrupt_handler+0x190>)
    e58a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    e58c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    e58e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    e590:	2b00      	cmp	r3, #0
    e592:	d1fc      	bne.n	e58e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    e594:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    e596:	7da6      	ldrb	r6, [r4, #22]
    e598:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    e59a:	2330      	movs	r3, #48	; 0x30
    e59c:	5ceb      	ldrb	r3, [r5, r3]
    e59e:	2231      	movs	r2, #49	; 0x31
    e5a0:	5caf      	ldrb	r7, [r5, r2]
    e5a2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    e5a4:	07f3      	lsls	r3, r6, #31
    e5a6:	d522      	bpl.n	e5ee <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    e5a8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    e5aa:	b29b      	uxth	r3, r3
    e5ac:	2b00      	cmp	r3, #0
    e5ae:	d01c      	beq.n	e5ea <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    e5b0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    e5b2:	7813      	ldrb	r3, [r2, #0]
    e5b4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    e5b6:	1c51      	adds	r1, r2, #1
    e5b8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    e5ba:	7969      	ldrb	r1, [r5, #5]
    e5bc:	2901      	cmp	r1, #1
    e5be:	d00e      	beq.n	e5de <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    e5c0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    e5c2:	05db      	lsls	r3, r3, #23
    e5c4:	0ddb      	lsrs	r3, r3, #23
    e5c6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    e5c8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    e5ca:	3b01      	subs	r3, #1
    e5cc:	b29b      	uxth	r3, r3
    e5ce:	85eb      	strh	r3, [r5, #46]	; 0x2e
    e5d0:	2b00      	cmp	r3, #0
    e5d2:	d10c      	bne.n	e5ee <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    e5d4:	3301      	adds	r3, #1
    e5d6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    e5d8:	3301      	adds	r3, #1
    e5da:	75a3      	strb	r3, [r4, #22]
    e5dc:	e007      	b.n	e5ee <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    e5de:	7851      	ldrb	r1, [r2, #1]
    e5e0:	0209      	lsls	r1, r1, #8
    e5e2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    e5e4:	3202      	adds	r2, #2
    e5e6:	62aa      	str	r2, [r5, #40]	; 0x28
    e5e8:	e7eb      	b.n	e5c2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    e5ea:	2301      	movs	r3, #1
    e5ec:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    e5ee:	07b3      	lsls	r3, r6, #30
    e5f0:	d506      	bpl.n	e600 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    e5f2:	2302      	movs	r3, #2
    e5f4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    e5f6:	2200      	movs	r2, #0
    e5f8:	3331      	adds	r3, #49	; 0x31
    e5fa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    e5fc:	07fb      	lsls	r3, r7, #31
    e5fe:	d41a      	bmi.n	e636 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    e600:	0773      	lsls	r3, r6, #29
    e602:	d565      	bpl.n	e6d0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    e604:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    e606:	b29b      	uxth	r3, r3
    e608:	2b00      	cmp	r3, #0
    e60a:	d05f      	beq.n	e6cc <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    e60c:	8b63      	ldrh	r3, [r4, #26]
    e60e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    e610:	071a      	lsls	r2, r3, #28
    e612:	d414      	bmi.n	e63e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    e614:	223f      	movs	r2, #63	; 0x3f
    e616:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    e618:	2b00      	cmp	r3, #0
    e61a:	d034      	beq.n	e686 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    e61c:	079a      	lsls	r2, r3, #30
    e61e:	d511      	bpl.n	e644 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    e620:	221a      	movs	r2, #26
    e622:	2332      	movs	r3, #50	; 0x32
    e624:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    e626:	3b30      	subs	r3, #48	; 0x30
    e628:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    e62a:	077b      	lsls	r3, r7, #29
    e62c:	d550      	bpl.n	e6d0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    e62e:	0028      	movs	r0, r5
    e630:	696b      	ldr	r3, [r5, #20]
    e632:	4798      	blx	r3
    e634:	e04c      	b.n	e6d0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    e636:	0028      	movs	r0, r5
    e638:	68eb      	ldr	r3, [r5, #12]
    e63a:	4798      	blx	r3
    e63c:	e7e0      	b.n	e600 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    e63e:	2237      	movs	r2, #55	; 0x37
    e640:	4013      	ands	r3, r2
    e642:	e7e9      	b.n	e618 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    e644:	075a      	lsls	r2, r3, #29
    e646:	d505      	bpl.n	e654 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    e648:	221e      	movs	r2, #30
    e64a:	2332      	movs	r3, #50	; 0x32
    e64c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    e64e:	3b2e      	subs	r3, #46	; 0x2e
    e650:	8363      	strh	r3, [r4, #26]
    e652:	e7ea      	b.n	e62a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    e654:	07da      	lsls	r2, r3, #31
    e656:	d505      	bpl.n	e664 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    e658:	2213      	movs	r2, #19
    e65a:	2332      	movs	r3, #50	; 0x32
    e65c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    e65e:	3b31      	subs	r3, #49	; 0x31
    e660:	8363      	strh	r3, [r4, #26]
    e662:	e7e2      	b.n	e62a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    e664:	06da      	lsls	r2, r3, #27
    e666:	d505      	bpl.n	e674 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    e668:	2242      	movs	r2, #66	; 0x42
    e66a:	2332      	movs	r3, #50	; 0x32
    e66c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    e66e:	3b22      	subs	r3, #34	; 0x22
    e670:	8363      	strh	r3, [r4, #26]
    e672:	e7da      	b.n	e62a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    e674:	2220      	movs	r2, #32
    e676:	421a      	tst	r2, r3
    e678:	d0d7      	beq.n	e62a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    e67a:	3221      	adds	r2, #33	; 0x21
    e67c:	2332      	movs	r3, #50	; 0x32
    e67e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    e680:	3b12      	subs	r3, #18
    e682:	8363      	strh	r3, [r4, #26]
    e684:	e7d1      	b.n	e62a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    e686:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    e688:	05db      	lsls	r3, r3, #23
    e68a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    e68c:	b2da      	uxtb	r2, r3
    e68e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    e690:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    e692:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    e694:	1c51      	adds	r1, r2, #1
    e696:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    e698:	7969      	ldrb	r1, [r5, #5]
    e69a:	2901      	cmp	r1, #1
    e69c:	d010      	beq.n	e6c0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    e69e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    e6a0:	3b01      	subs	r3, #1
    e6a2:	b29b      	uxth	r3, r3
    e6a4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    e6a6:	2b00      	cmp	r3, #0
    e6a8:	d112      	bne.n	e6d0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    e6aa:	3304      	adds	r3, #4
    e6ac:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    e6ae:	2200      	movs	r2, #0
    e6b0:	332e      	adds	r3, #46	; 0x2e
    e6b2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    e6b4:	07bb      	lsls	r3, r7, #30
    e6b6:	d50b      	bpl.n	e6d0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    e6b8:	0028      	movs	r0, r5
    e6ba:	692b      	ldr	r3, [r5, #16]
    e6bc:	4798      	blx	r3
    e6be:	e007      	b.n	e6d0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    e6c0:	0a1b      	lsrs	r3, r3, #8
    e6c2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    e6c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e6c6:	3301      	adds	r3, #1
    e6c8:	626b      	str	r3, [r5, #36]	; 0x24
    e6ca:	e7e8      	b.n	e69e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    e6cc:	2304      	movs	r3, #4
    e6ce:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    e6d0:	06f3      	lsls	r3, r6, #27
    e6d2:	d504      	bpl.n	e6de <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    e6d4:	2310      	movs	r3, #16
    e6d6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    e6d8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    e6da:	06fb      	lsls	r3, r7, #27
    e6dc:	d40e      	bmi.n	e6fc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    e6de:	06b3      	lsls	r3, r6, #26
    e6e0:	d504      	bpl.n	e6ec <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    e6e2:	2320      	movs	r3, #32
    e6e4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    e6e6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    e6e8:	073b      	lsls	r3, r7, #28
    e6ea:	d40b      	bmi.n	e704 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    e6ec:	0733      	lsls	r3, r6, #28
    e6ee:	d504      	bpl.n	e6fa <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    e6f0:	2308      	movs	r3, #8
    e6f2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    e6f4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    e6f6:	06bb      	lsls	r3, r7, #26
    e6f8:	d408      	bmi.n	e70c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    e6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    e6fc:	0028      	movs	r0, r5
    e6fe:	69eb      	ldr	r3, [r5, #28]
    e700:	4798      	blx	r3
    e702:	e7ec      	b.n	e6de <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    e704:	0028      	movs	r0, r5
    e706:	69ab      	ldr	r3, [r5, #24]
    e708:	4798      	blx	r3
    e70a:	e7ef      	b.n	e6ec <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    e70c:	6a2b      	ldr	r3, [r5, #32]
    e70e:	0028      	movs	r0, r5
    e710:	4798      	blx	r3
}
    e712:	e7f2      	b.n	e6fa <_usart_interrupt_handler+0x176>
    e714:	20000564 	.word	0x20000564

0000e718 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    e718:	b510      	push	{r4, lr}
	switch (clock_source) {
    e71a:	2808      	cmp	r0, #8
    e71c:	d803      	bhi.n	e726 <system_clock_source_get_hz+0xe>
    e71e:	0080      	lsls	r0, r0, #2
    e720:	4b1b      	ldr	r3, [pc, #108]	; (e790 <system_clock_source_get_hz+0x78>)
    e722:	581b      	ldr	r3, [r3, r0]
    e724:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    e726:	2000      	movs	r0, #0
    e728:	e030      	b.n	e78c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    e72a:	4b1a      	ldr	r3, [pc, #104]	; (e794 <system_clock_source_get_hz+0x7c>)
    e72c:	6918      	ldr	r0, [r3, #16]
    e72e:	e02d      	b.n	e78c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    e730:	4b19      	ldr	r3, [pc, #100]	; (e798 <system_clock_source_get_hz+0x80>)
    e732:	6a1b      	ldr	r3, [r3, #32]
    e734:	059b      	lsls	r3, r3, #22
    e736:	0f9b      	lsrs	r3, r3, #30
    e738:	4818      	ldr	r0, [pc, #96]	; (e79c <system_clock_source_get_hz+0x84>)
    e73a:	40d8      	lsrs	r0, r3
    e73c:	e026      	b.n	e78c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    e73e:	4b15      	ldr	r3, [pc, #84]	; (e794 <system_clock_source_get_hz+0x7c>)
    e740:	6958      	ldr	r0, [r3, #20]
    e742:	e023      	b.n	e78c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    e744:	4b13      	ldr	r3, [pc, #76]	; (e794 <system_clock_source_get_hz+0x7c>)
    e746:	681b      	ldr	r3, [r3, #0]
			return 0;
    e748:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    e74a:	079b      	lsls	r3, r3, #30
    e74c:	d51e      	bpl.n	e78c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    e74e:	4912      	ldr	r1, [pc, #72]	; (e798 <system_clock_source_get_hz+0x80>)
    e750:	2210      	movs	r2, #16
    e752:	68cb      	ldr	r3, [r1, #12]
    e754:	421a      	tst	r2, r3
    e756:	d0fc      	beq.n	e752 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    e758:	4b0e      	ldr	r3, [pc, #56]	; (e794 <system_clock_source_get_hz+0x7c>)
    e75a:	681b      	ldr	r3, [r3, #0]
    e75c:	075b      	lsls	r3, r3, #29
    e75e:	d401      	bmi.n	e764 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    e760:	480f      	ldr	r0, [pc, #60]	; (e7a0 <system_clock_source_get_hz+0x88>)
    e762:	e013      	b.n	e78c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    e764:	2000      	movs	r0, #0
    e766:	4b0f      	ldr	r3, [pc, #60]	; (e7a4 <system_clock_source_get_hz+0x8c>)
    e768:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    e76a:	4b0a      	ldr	r3, [pc, #40]	; (e794 <system_clock_source_get_hz+0x7c>)
    e76c:	689b      	ldr	r3, [r3, #8]
    e76e:	041b      	lsls	r3, r3, #16
    e770:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    e772:	4358      	muls	r0, r3
    e774:	e00a      	b.n	e78c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    e776:	2350      	movs	r3, #80	; 0x50
    e778:	4a07      	ldr	r2, [pc, #28]	; (e798 <system_clock_source_get_hz+0x80>)
    e77a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    e77c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    e77e:	075b      	lsls	r3, r3, #29
    e780:	d504      	bpl.n	e78c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    e782:	4b04      	ldr	r3, [pc, #16]	; (e794 <system_clock_source_get_hz+0x7c>)
    e784:	68d8      	ldr	r0, [r3, #12]
    e786:	e001      	b.n	e78c <system_clock_source_get_hz+0x74>
		return 32768UL;
    e788:	2080      	movs	r0, #128	; 0x80
    e78a:	0200      	lsls	r0, r0, #8
	}
}
    e78c:	bd10      	pop	{r4, pc}
    e78e:	46c0      	nop			; (mov r8, r8)
    e790:	00014048 	.word	0x00014048
    e794:	20000270 	.word	0x20000270
    e798:	40000800 	.word	0x40000800
    e79c:	007a1200 	.word	0x007a1200
    e7a0:	02dc6c00 	.word	0x02dc6c00
    e7a4:	0000ed79 	.word	0x0000ed79

0000e7a8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    e7a8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    e7aa:	490c      	ldr	r1, [pc, #48]	; (e7dc <system_clock_source_osc8m_set_config+0x34>)
    e7ac:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    e7ae:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    e7b0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    e7b2:	7840      	ldrb	r0, [r0, #1]
    e7b4:	2201      	movs	r2, #1
    e7b6:	4010      	ands	r0, r2
    e7b8:	0180      	lsls	r0, r0, #6
    e7ba:	2640      	movs	r6, #64	; 0x40
    e7bc:	43b3      	bics	r3, r6
    e7be:	4303      	orrs	r3, r0
    e7c0:	402a      	ands	r2, r5
    e7c2:	01d2      	lsls	r2, r2, #7
    e7c4:	2080      	movs	r0, #128	; 0x80
    e7c6:	4383      	bics	r3, r0
    e7c8:	4313      	orrs	r3, r2
    e7ca:	2203      	movs	r2, #3
    e7cc:	4022      	ands	r2, r4
    e7ce:	0212      	lsls	r2, r2, #8
    e7d0:	4803      	ldr	r0, [pc, #12]	; (e7e0 <system_clock_source_osc8m_set_config+0x38>)
    e7d2:	4003      	ands	r3, r0
    e7d4:	4313      	orrs	r3, r2
    e7d6:	620b      	str	r3, [r1, #32]
}
    e7d8:	bd70      	pop	{r4, r5, r6, pc}
    e7da:	46c0      	nop			; (mov r8, r8)
    e7dc:	40000800 	.word	0x40000800
    e7e0:	fffffcff 	.word	0xfffffcff

0000e7e4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    e7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7e6:	46de      	mov	lr, fp
    e7e8:	4657      	mov	r7, sl
    e7ea:	464e      	mov	r6, r9
    e7ec:	4645      	mov	r5, r8
    e7ee:	b5e0      	push	{r5, r6, r7, lr}
    e7f0:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    e7f2:	4b26      	ldr	r3, [pc, #152]	; (e88c <system_clock_source_xosc32k_set_config+0xa8>)
    e7f4:	469b      	mov	fp, r3
    e7f6:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    e7f8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    e7fa:	7800      	ldrb	r0, [r0, #0]
    e7fc:	4242      	negs	r2, r0
    e7fe:	4142      	adcs	r2, r0
    e800:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    e802:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    e804:	78ca      	ldrb	r2, [r1, #3]
    e806:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    e808:	790a      	ldrb	r2, [r1, #4]
    e80a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    e80c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    e80e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    e810:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    e812:	688a      	ldr	r2, [r1, #8]
    e814:	491e      	ldr	r1, [pc, #120]	; (e890 <system_clock_source_xosc32k_set_config+0xac>)
    e816:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    e818:	2101      	movs	r1, #1
    e81a:	464a      	mov	r2, r9
    e81c:	0092      	lsls	r2, r2, #2
    e81e:	4691      	mov	r9, r2
    e820:	2204      	movs	r2, #4
    e822:	4393      	bics	r3, r2
    e824:	464a      	mov	r2, r9
    e826:	4313      	orrs	r3, r2
    e828:	4642      	mov	r2, r8
    e82a:	400a      	ands	r2, r1
    e82c:	00d2      	lsls	r2, r2, #3
    e82e:	4690      	mov	r8, r2
    e830:	2208      	movs	r2, #8
    e832:	4393      	bics	r3, r2
    e834:	4642      	mov	r2, r8
    e836:	4313      	orrs	r3, r2
    e838:	4662      	mov	r2, ip
    e83a:	400a      	ands	r2, r1
    e83c:	0112      	lsls	r2, r2, #4
    e83e:	4694      	mov	ip, r2
    e840:	2210      	movs	r2, #16
    e842:	4393      	bics	r3, r2
    e844:	4662      	mov	r2, ip
    e846:	4313      	orrs	r3, r2
    e848:	4008      	ands	r0, r1
    e84a:	0140      	lsls	r0, r0, #5
    e84c:	2220      	movs	r2, #32
    e84e:	4393      	bics	r3, r2
    e850:	4303      	orrs	r3, r0
    e852:	400f      	ands	r7, r1
    e854:	01bf      	lsls	r7, r7, #6
    e856:	2040      	movs	r0, #64	; 0x40
    e858:	4383      	bics	r3, r0
    e85a:	433b      	orrs	r3, r7
    e85c:	400e      	ands	r6, r1
    e85e:	01f6      	lsls	r6, r6, #7
    e860:	3040      	adds	r0, #64	; 0x40
    e862:	4383      	bics	r3, r0
    e864:	4333      	orrs	r3, r6
    e866:	3879      	subs	r0, #121	; 0x79
    e868:	4005      	ands	r5, r0
    e86a:	022d      	lsls	r5, r5, #8
    e86c:	4809      	ldr	r0, [pc, #36]	; (e894 <system_clock_source_xosc32k_set_config+0xb0>)
    e86e:	4003      	ands	r3, r0
    e870:	432b      	orrs	r3, r5
    e872:	4021      	ands	r1, r4
    e874:	0309      	lsls	r1, r1, #12
    e876:	4808      	ldr	r0, [pc, #32]	; (e898 <system_clock_source_xosc32k_set_config+0xb4>)
    e878:	4003      	ands	r3, r0
    e87a:	430b      	orrs	r3, r1
    e87c:	465a      	mov	r2, fp
    e87e:	8293      	strh	r3, [r2, #20]
}
    e880:	bc3c      	pop	{r2, r3, r4, r5}
    e882:	4690      	mov	r8, r2
    e884:	4699      	mov	r9, r3
    e886:	46a2      	mov	sl, r4
    e888:	46ab      	mov	fp, r5
    e88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e88c:	40000800 	.word	0x40000800
    e890:	20000270 	.word	0x20000270
    e894:	fffff8ff 	.word	0xfffff8ff
    e898:	ffffefff 	.word	0xffffefff

0000e89c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    e89c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    e89e:	7a03      	ldrb	r3, [r0, #8]
    e8a0:	069b      	lsls	r3, r3, #26
    e8a2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    e8a4:	8942      	ldrh	r2, [r0, #10]
    e8a6:	0592      	lsls	r2, r2, #22
    e8a8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    e8aa:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    e8ac:	4918      	ldr	r1, [pc, #96]	; (e910 <system_clock_source_dfll_set_config+0x74>)
    e8ae:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    e8b0:	7983      	ldrb	r3, [r0, #6]
    e8b2:	79c2      	ldrb	r2, [r0, #7]
    e8b4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    e8b6:	8842      	ldrh	r2, [r0, #2]
    e8b8:	8884      	ldrh	r4, [r0, #4]
    e8ba:	4322      	orrs	r2, r4
    e8bc:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    e8be:	7842      	ldrb	r2, [r0, #1]
    e8c0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    e8c2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    e8c4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    e8c6:	7803      	ldrb	r3, [r0, #0]
    e8c8:	2b04      	cmp	r3, #4
    e8ca:	d011      	beq.n	e8f0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    e8cc:	2b20      	cmp	r3, #32
    e8ce:	d10e      	bne.n	e8ee <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    e8d0:	7b03      	ldrb	r3, [r0, #12]
    e8d2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    e8d4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    e8d6:	4313      	orrs	r3, r2
    e8d8:	89c2      	ldrh	r2, [r0, #14]
    e8da:	0412      	lsls	r2, r2, #16
    e8dc:	490d      	ldr	r1, [pc, #52]	; (e914 <system_clock_source_dfll_set_config+0x78>)
    e8de:	400a      	ands	r2, r1
    e8e0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    e8e2:	4a0b      	ldr	r2, [pc, #44]	; (e910 <system_clock_source_dfll_set_config+0x74>)
    e8e4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    e8e6:	6811      	ldr	r1, [r2, #0]
    e8e8:	4b0b      	ldr	r3, [pc, #44]	; (e918 <system_clock_source_dfll_set_config+0x7c>)
    e8ea:	430b      	orrs	r3, r1
    e8ec:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    e8ee:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    e8f0:	7b03      	ldrb	r3, [r0, #12]
    e8f2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    e8f4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    e8f6:	4313      	orrs	r3, r2
    e8f8:	89c2      	ldrh	r2, [r0, #14]
    e8fa:	0412      	lsls	r2, r2, #16
    e8fc:	4905      	ldr	r1, [pc, #20]	; (e914 <system_clock_source_dfll_set_config+0x78>)
    e8fe:	400a      	ands	r2, r1
    e900:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    e902:	4a03      	ldr	r2, [pc, #12]	; (e910 <system_clock_source_dfll_set_config+0x74>)
    e904:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    e906:	6813      	ldr	r3, [r2, #0]
    e908:	2104      	movs	r1, #4
    e90a:	430b      	orrs	r3, r1
    e90c:	6013      	str	r3, [r2, #0]
    e90e:	e7ee      	b.n	e8ee <system_clock_source_dfll_set_config+0x52>
    e910:	20000270 	.word	0x20000270
    e914:	03ff0000 	.word	0x03ff0000
    e918:	00000424 	.word	0x00000424

0000e91c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    e91c:	2808      	cmp	r0, #8
    e91e:	d803      	bhi.n	e928 <system_clock_source_enable+0xc>
    e920:	0080      	lsls	r0, r0, #2
    e922:	4b25      	ldr	r3, [pc, #148]	; (e9b8 <system_clock_source_enable+0x9c>)
    e924:	581b      	ldr	r3, [r3, r0]
    e926:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    e928:	2017      	movs	r0, #23
    e92a:	e044      	b.n	e9b6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    e92c:	4a23      	ldr	r2, [pc, #140]	; (e9bc <system_clock_source_enable+0xa0>)
    e92e:	6a13      	ldr	r3, [r2, #32]
    e930:	2102      	movs	r1, #2
    e932:	430b      	orrs	r3, r1
    e934:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    e936:	2000      	movs	r0, #0
    e938:	e03d      	b.n	e9b6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    e93a:	4a20      	ldr	r2, [pc, #128]	; (e9bc <system_clock_source_enable+0xa0>)
    e93c:	6993      	ldr	r3, [r2, #24]
    e93e:	2102      	movs	r1, #2
    e940:	430b      	orrs	r3, r1
    e942:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    e944:	2000      	movs	r0, #0
		break;
    e946:	e036      	b.n	e9b6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    e948:	4a1c      	ldr	r2, [pc, #112]	; (e9bc <system_clock_source_enable+0xa0>)
    e94a:	8a13      	ldrh	r3, [r2, #16]
    e94c:	2102      	movs	r1, #2
    e94e:	430b      	orrs	r3, r1
    e950:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    e952:	2000      	movs	r0, #0
		break;
    e954:	e02f      	b.n	e9b6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    e956:	4a19      	ldr	r2, [pc, #100]	; (e9bc <system_clock_source_enable+0xa0>)
    e958:	8a93      	ldrh	r3, [r2, #20]
    e95a:	2102      	movs	r1, #2
    e95c:	430b      	orrs	r3, r1
    e95e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    e960:	2000      	movs	r0, #0
		break;
    e962:	e028      	b.n	e9b6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    e964:	4916      	ldr	r1, [pc, #88]	; (e9c0 <system_clock_source_enable+0xa4>)
    e966:	680b      	ldr	r3, [r1, #0]
    e968:	2202      	movs	r2, #2
    e96a:	4313      	orrs	r3, r2
    e96c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    e96e:	4b13      	ldr	r3, [pc, #76]	; (e9bc <system_clock_source_enable+0xa0>)
    e970:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    e972:	0019      	movs	r1, r3
    e974:	320e      	adds	r2, #14
    e976:	68cb      	ldr	r3, [r1, #12]
    e978:	421a      	tst	r2, r3
    e97a:	d0fc      	beq.n	e976 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    e97c:	4a10      	ldr	r2, [pc, #64]	; (e9c0 <system_clock_source_enable+0xa4>)
    e97e:	6891      	ldr	r1, [r2, #8]
    e980:	4b0e      	ldr	r3, [pc, #56]	; (e9bc <system_clock_source_enable+0xa0>)
    e982:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    e984:	6852      	ldr	r2, [r2, #4]
    e986:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    e988:	2200      	movs	r2, #0
    e98a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    e98c:	0019      	movs	r1, r3
    e98e:	3210      	adds	r2, #16
    e990:	68cb      	ldr	r3, [r1, #12]
    e992:	421a      	tst	r2, r3
    e994:	d0fc      	beq.n	e990 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    e996:	4b0a      	ldr	r3, [pc, #40]	; (e9c0 <system_clock_source_enable+0xa4>)
    e998:	681b      	ldr	r3, [r3, #0]
    e99a:	b29b      	uxth	r3, r3
    e99c:	4a07      	ldr	r2, [pc, #28]	; (e9bc <system_clock_source_enable+0xa0>)
    e99e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    e9a0:	2000      	movs	r0, #0
    e9a2:	e008      	b.n	e9b6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    e9a4:	4905      	ldr	r1, [pc, #20]	; (e9bc <system_clock_source_enable+0xa0>)
    e9a6:	2244      	movs	r2, #68	; 0x44
    e9a8:	5c8b      	ldrb	r3, [r1, r2]
    e9aa:	2002      	movs	r0, #2
    e9ac:	4303      	orrs	r3, r0
    e9ae:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    e9b0:	2000      	movs	r0, #0
		break;
    e9b2:	e000      	b.n	e9b6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    e9b4:	2000      	movs	r0, #0
}
    e9b6:	4770      	bx	lr
    e9b8:	0001406c 	.word	0x0001406c
    e9bc:	40000800 	.word	0x40000800
    e9c0:	20000270 	.word	0x20000270

0000e9c4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    e9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9c6:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    e9c8:	22c2      	movs	r2, #194	; 0xc2
    e9ca:	00d2      	lsls	r2, r2, #3
    e9cc:	4b47      	ldr	r3, [pc, #284]	; (eaec <system_clock_init+0x128>)
    e9ce:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    e9d0:	4a47      	ldr	r2, [pc, #284]	; (eaf0 <system_clock_init+0x12c>)
    e9d2:	6853      	ldr	r3, [r2, #4]
    e9d4:	211e      	movs	r1, #30
    e9d6:	438b      	bics	r3, r1
    e9d8:	391a      	subs	r1, #26
    e9da:	430b      	orrs	r3, r1
    e9dc:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    e9de:	2202      	movs	r2, #2
    e9e0:	ab01      	add	r3, sp, #4
    e9e2:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    e9e4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    e9e6:	4d43      	ldr	r5, [pc, #268]	; (eaf4 <system_clock_init+0x130>)
    e9e8:	b2e0      	uxtb	r0, r4
    e9ea:	a901      	add	r1, sp, #4
    e9ec:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    e9ee:	3401      	adds	r4, #1
    e9f0:	2c25      	cmp	r4, #37	; 0x25
    e9f2:	d1f9      	bne.n	e9e8 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    e9f4:	a80a      	add	r0, sp, #40	; 0x28
    e9f6:	2300      	movs	r3, #0
    e9f8:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    e9fa:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    e9fc:	2280      	movs	r2, #128	; 0x80
    e9fe:	0212      	lsls	r2, r2, #8
    ea00:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    ea02:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    ea04:	2201      	movs	r2, #1
    ea06:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    ea08:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    ea0a:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    ea0c:	3202      	adds	r2, #2
    ea0e:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    ea10:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    ea12:	4b39      	ldr	r3, [pc, #228]	; (eaf8 <system_clock_init+0x134>)
    ea14:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    ea16:	2005      	movs	r0, #5
    ea18:	4b38      	ldr	r3, [pc, #224]	; (eafc <system_clock_init+0x138>)
    ea1a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    ea1c:	4933      	ldr	r1, [pc, #204]	; (eaec <system_clock_init+0x128>)
    ea1e:	2202      	movs	r2, #2
    ea20:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    ea22:	421a      	tst	r2, r3
    ea24:	d0fc      	beq.n	ea20 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    ea26:	4a31      	ldr	r2, [pc, #196]	; (eaec <system_clock_init+0x128>)
    ea28:	8a93      	ldrh	r3, [r2, #20]
    ea2a:	2180      	movs	r1, #128	; 0x80
    ea2c:	430b      	orrs	r3, r1
    ea2e:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    ea30:	ab05      	add	r3, sp, #20
    ea32:	2100      	movs	r1, #0
    ea34:	2200      	movs	r2, #0
    ea36:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    ea38:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    ea3a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    ea3c:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    ea3e:	313f      	adds	r1, #63	; 0x3f
    ea40:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    ea42:	393b      	subs	r1, #59	; 0x3b
    ea44:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    ea46:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    ea48:	4b2d      	ldr	r3, [pc, #180]	; (eb00 <system_clock_init+0x13c>)
    ea4a:	681b      	ldr	r3, [r3, #0]
    ea4c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    ea4e:	2b3f      	cmp	r3, #63	; 0x3f
    ea50:	d04a      	beq.n	eae8 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    ea52:	a805      	add	r0, sp, #20
    ea54:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    ea56:	4b2b      	ldr	r3, [pc, #172]	; (eb04 <system_clock_init+0x140>)
    ea58:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    ea5a:	2307      	movs	r3, #7
    ea5c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    ea5e:	3338      	adds	r3, #56	; 0x38
    ea60:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    ea62:	4b29      	ldr	r3, [pc, #164]	; (eb08 <system_clock_init+0x144>)
    ea64:	4798      	blx	r3
	config->run_in_standby  = false;
    ea66:	a804      	add	r0, sp, #16
    ea68:	2500      	movs	r5, #0
    ea6a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    ea6c:	2601      	movs	r6, #1
    ea6e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    ea70:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    ea72:	4b26      	ldr	r3, [pc, #152]	; (eb0c <system_clock_init+0x148>)
    ea74:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    ea76:	2006      	movs	r0, #6
    ea78:	4f20      	ldr	r7, [pc, #128]	; (eafc <system_clock_init+0x138>)
    ea7a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    ea7c:	4b24      	ldr	r3, [pc, #144]	; (eb10 <system_clock_init+0x14c>)
    ea7e:	4798      	blx	r3
	config->division_factor    = 1;
    ea80:	ac01      	add	r4, sp, #4
    ea82:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    ea84:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    ea86:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    ea88:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    ea8a:	2305      	movs	r3, #5
    ea8c:	7023      	strb	r3, [r4, #0]
    ea8e:	0021      	movs	r1, r4
    ea90:	2001      	movs	r0, #1
    ea92:	4b20      	ldr	r3, [pc, #128]	; (eb14 <system_clock_init+0x150>)
    ea94:	4798      	blx	r3
    ea96:	2001      	movs	r0, #1
    ea98:	4b1f      	ldr	r3, [pc, #124]	; (eb18 <system_clock_init+0x154>)
    ea9a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    ea9c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    ea9e:	0021      	movs	r1, r4
    eaa0:	2000      	movs	r0, #0
    eaa2:	4b14      	ldr	r3, [pc, #80]	; (eaf4 <system_clock_init+0x130>)
    eaa4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    eaa6:	2000      	movs	r0, #0
    eaa8:	4b1c      	ldr	r3, [pc, #112]	; (eb1c <system_clock_init+0x158>)
    eaaa:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    eaac:	2007      	movs	r0, #7
    eaae:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    eab0:	490e      	ldr	r1, [pc, #56]	; (eaec <system_clock_init+0x128>)
    eab2:	22d0      	movs	r2, #208	; 0xd0
    eab4:	68cb      	ldr	r3, [r1, #12]
    eab6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    eab8:	2bd0      	cmp	r3, #208	; 0xd0
    eaba:	d1fb      	bne.n	eab4 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    eabc:	4a18      	ldr	r2, [pc, #96]	; (eb20 <system_clock_init+0x15c>)
    eabe:	2300      	movs	r3, #0
    eac0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    eac2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    eac4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    eac6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    eac8:	a901      	add	r1, sp, #4
    eaca:	2201      	movs	r2, #1
    eacc:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    eace:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    ead0:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    ead2:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    ead4:	3307      	adds	r3, #7
    ead6:	700b      	strb	r3, [r1, #0]
    ead8:	2000      	movs	r0, #0
    eada:	4b0e      	ldr	r3, [pc, #56]	; (eb14 <system_clock_init+0x150>)
    eadc:	4798      	blx	r3
    eade:	2000      	movs	r0, #0
    eae0:	4b0d      	ldr	r3, [pc, #52]	; (eb18 <system_clock_init+0x154>)
    eae2:	4798      	blx	r3
#endif
}
    eae4:	b00f      	add	sp, #60	; 0x3c
    eae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    eae8:	3b20      	subs	r3, #32
    eaea:	e7b2      	b.n	ea52 <system_clock_init+0x8e>
    eaec:	40000800 	.word	0x40000800
    eaf0:	41004000 	.word	0x41004000
    eaf4:	0000ed5d 	.word	0x0000ed5d
    eaf8:	0000e7e5 	.word	0x0000e7e5
    eafc:	0000e91d 	.word	0x0000e91d
    eb00:	00806024 	.word	0x00806024
    eb04:	000005b9 	.word	0x000005b9
    eb08:	0000e89d 	.word	0x0000e89d
    eb0c:	0000e7a9 	.word	0x0000e7a9
    eb10:	0000eb25 	.word	0x0000eb25
    eb14:	0000eb49 	.word	0x0000eb49
    eb18:	0000ec01 	.word	0x0000ec01
    eb1c:	0000ecd1 	.word	0x0000ecd1
    eb20:	40000400 	.word	0x40000400

0000eb24 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    eb24:	4a06      	ldr	r2, [pc, #24]	; (eb40 <system_gclk_init+0x1c>)
    eb26:	6993      	ldr	r3, [r2, #24]
    eb28:	2108      	movs	r1, #8
    eb2a:	430b      	orrs	r3, r1
    eb2c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    eb2e:	2201      	movs	r2, #1
    eb30:	4b04      	ldr	r3, [pc, #16]	; (eb44 <system_gclk_init+0x20>)
    eb32:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    eb34:	0019      	movs	r1, r3
    eb36:	780b      	ldrb	r3, [r1, #0]
    eb38:	4213      	tst	r3, r2
    eb3a:	d1fc      	bne.n	eb36 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    eb3c:	4770      	bx	lr
    eb3e:	46c0      	nop			; (mov r8, r8)
    eb40:	40000400 	.word	0x40000400
    eb44:	40000c00 	.word	0x40000c00

0000eb48 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    eb48:	b570      	push	{r4, r5, r6, lr}
    eb4a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    eb4c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    eb4e:	780d      	ldrb	r5, [r1, #0]
    eb50:	022d      	lsls	r5, r5, #8
    eb52:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    eb54:	784b      	ldrb	r3, [r1, #1]
    eb56:	2b00      	cmp	r3, #0
    eb58:	d002      	beq.n	eb60 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    eb5a:	2380      	movs	r3, #128	; 0x80
    eb5c:	02db      	lsls	r3, r3, #11
    eb5e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    eb60:	7a4b      	ldrb	r3, [r1, #9]
    eb62:	2b00      	cmp	r3, #0
    eb64:	d002      	beq.n	eb6c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    eb66:	2380      	movs	r3, #128	; 0x80
    eb68:	031b      	lsls	r3, r3, #12
    eb6a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    eb6c:	6848      	ldr	r0, [r1, #4]
    eb6e:	2801      	cmp	r0, #1
    eb70:	d910      	bls.n	eb94 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    eb72:	1e43      	subs	r3, r0, #1
    eb74:	4218      	tst	r0, r3
    eb76:	d134      	bne.n	ebe2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    eb78:	2802      	cmp	r0, #2
    eb7a:	d930      	bls.n	ebde <system_gclk_gen_set_config+0x96>
    eb7c:	2302      	movs	r3, #2
    eb7e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    eb80:	3201      	adds	r2, #1
						mask <<= 1) {
    eb82:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    eb84:	4298      	cmp	r0, r3
    eb86:	d8fb      	bhi.n	eb80 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    eb88:	0212      	lsls	r2, r2, #8
    eb8a:	4332      	orrs	r2, r6
    eb8c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    eb8e:	2380      	movs	r3, #128	; 0x80
    eb90:	035b      	lsls	r3, r3, #13
    eb92:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    eb94:	7a0b      	ldrb	r3, [r1, #8]
    eb96:	2b00      	cmp	r3, #0
    eb98:	d002      	beq.n	eba0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    eb9a:	2380      	movs	r3, #128	; 0x80
    eb9c:	039b      	lsls	r3, r3, #14
    eb9e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    eba0:	4a13      	ldr	r2, [pc, #76]	; (ebf0 <system_gclk_gen_set_config+0xa8>)
    eba2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    eba4:	b25b      	sxtb	r3, r3
    eba6:	2b00      	cmp	r3, #0
    eba8:	dbfb      	blt.n	eba2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    ebaa:	4b12      	ldr	r3, [pc, #72]	; (ebf4 <system_gclk_gen_set_config+0xac>)
    ebac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    ebae:	4b12      	ldr	r3, [pc, #72]	; (ebf8 <system_gclk_gen_set_config+0xb0>)
    ebb0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ebb2:	4a0f      	ldr	r2, [pc, #60]	; (ebf0 <system_gclk_gen_set_config+0xa8>)
    ebb4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    ebb6:	b25b      	sxtb	r3, r3
    ebb8:	2b00      	cmp	r3, #0
    ebba:	dbfb      	blt.n	ebb4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    ebbc:	4b0c      	ldr	r3, [pc, #48]	; (ebf0 <system_gclk_gen_set_config+0xa8>)
    ebbe:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ebc0:	001a      	movs	r2, r3
    ebc2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    ebc4:	b25b      	sxtb	r3, r3
    ebc6:	2b00      	cmp	r3, #0
    ebc8:	dbfb      	blt.n	ebc2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    ebca:	4a09      	ldr	r2, [pc, #36]	; (ebf0 <system_gclk_gen_set_config+0xa8>)
    ebcc:	6853      	ldr	r3, [r2, #4]
    ebce:	2180      	movs	r1, #128	; 0x80
    ebd0:	0249      	lsls	r1, r1, #9
    ebd2:	400b      	ands	r3, r1
    ebd4:	431d      	orrs	r5, r3
    ebd6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    ebd8:	4b08      	ldr	r3, [pc, #32]	; (ebfc <system_gclk_gen_set_config+0xb4>)
    ebda:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    ebdc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    ebde:	2200      	movs	r2, #0
    ebe0:	e7d2      	b.n	eb88 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    ebe2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    ebe4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    ebe6:	2380      	movs	r3, #128	; 0x80
    ebe8:	029b      	lsls	r3, r3, #10
    ebea:	431d      	orrs	r5, r3
    ebec:	e7d2      	b.n	eb94 <system_gclk_gen_set_config+0x4c>
    ebee:	46c0      	nop			; (mov r8, r8)
    ebf0:	40000c00 	.word	0x40000c00
    ebf4:	0000cfad 	.word	0x0000cfad
    ebf8:	40000c08 	.word	0x40000c08
    ebfc:	0000cfed 	.word	0x0000cfed

0000ec00 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    ec00:	b510      	push	{r4, lr}
    ec02:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ec04:	4a0b      	ldr	r2, [pc, #44]	; (ec34 <system_gclk_gen_enable+0x34>)
    ec06:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    ec08:	b25b      	sxtb	r3, r3
    ec0a:	2b00      	cmp	r3, #0
    ec0c:	dbfb      	blt.n	ec06 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    ec0e:	4b0a      	ldr	r3, [pc, #40]	; (ec38 <system_gclk_gen_enable+0x38>)
    ec10:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ec12:	4b0a      	ldr	r3, [pc, #40]	; (ec3c <system_gclk_gen_enable+0x3c>)
    ec14:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ec16:	4a07      	ldr	r2, [pc, #28]	; (ec34 <system_gclk_gen_enable+0x34>)
    ec18:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    ec1a:	b25b      	sxtb	r3, r3
    ec1c:	2b00      	cmp	r3, #0
    ec1e:	dbfb      	blt.n	ec18 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    ec20:	4a04      	ldr	r2, [pc, #16]	; (ec34 <system_gclk_gen_enable+0x34>)
    ec22:	6851      	ldr	r1, [r2, #4]
    ec24:	2380      	movs	r3, #128	; 0x80
    ec26:	025b      	lsls	r3, r3, #9
    ec28:	430b      	orrs	r3, r1
    ec2a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    ec2c:	4b04      	ldr	r3, [pc, #16]	; (ec40 <system_gclk_gen_enable+0x40>)
    ec2e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    ec30:	bd10      	pop	{r4, pc}
    ec32:	46c0      	nop			; (mov r8, r8)
    ec34:	40000c00 	.word	0x40000c00
    ec38:	0000cfad 	.word	0x0000cfad
    ec3c:	40000c04 	.word	0x40000c04
    ec40:	0000cfed 	.word	0x0000cfed

0000ec44 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    ec44:	b570      	push	{r4, r5, r6, lr}
    ec46:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ec48:	4a1a      	ldr	r2, [pc, #104]	; (ecb4 <system_gclk_gen_get_hz+0x70>)
    ec4a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    ec4c:	b25b      	sxtb	r3, r3
    ec4e:	2b00      	cmp	r3, #0
    ec50:	dbfb      	blt.n	ec4a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    ec52:	4b19      	ldr	r3, [pc, #100]	; (ecb8 <system_gclk_gen_get_hz+0x74>)
    ec54:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ec56:	4b19      	ldr	r3, [pc, #100]	; (ecbc <system_gclk_gen_get_hz+0x78>)
    ec58:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ec5a:	4a16      	ldr	r2, [pc, #88]	; (ecb4 <system_gclk_gen_get_hz+0x70>)
    ec5c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    ec5e:	b25b      	sxtb	r3, r3
    ec60:	2b00      	cmp	r3, #0
    ec62:	dbfb      	blt.n	ec5c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    ec64:	4e13      	ldr	r6, [pc, #76]	; (ecb4 <system_gclk_gen_get_hz+0x70>)
    ec66:	6870      	ldr	r0, [r6, #4]
    ec68:	04c0      	lsls	r0, r0, #19
    ec6a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    ec6c:	4b14      	ldr	r3, [pc, #80]	; (ecc0 <system_gclk_gen_get_hz+0x7c>)
    ec6e:	4798      	blx	r3
    ec70:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ec72:	4b12      	ldr	r3, [pc, #72]	; (ecbc <system_gclk_gen_get_hz+0x78>)
    ec74:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    ec76:	6876      	ldr	r6, [r6, #4]
    ec78:	02f6      	lsls	r6, r6, #11
    ec7a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    ec7c:	4b11      	ldr	r3, [pc, #68]	; (ecc4 <system_gclk_gen_get_hz+0x80>)
    ec7e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ec80:	4a0c      	ldr	r2, [pc, #48]	; (ecb4 <system_gclk_gen_get_hz+0x70>)
    ec82:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    ec84:	b25b      	sxtb	r3, r3
    ec86:	2b00      	cmp	r3, #0
    ec88:	dbfb      	blt.n	ec82 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    ec8a:	4b0a      	ldr	r3, [pc, #40]	; (ecb4 <system_gclk_gen_get_hz+0x70>)
    ec8c:	689c      	ldr	r4, [r3, #8]
    ec8e:	0224      	lsls	r4, r4, #8
    ec90:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    ec92:	4b0d      	ldr	r3, [pc, #52]	; (ecc8 <system_gclk_gen_get_hz+0x84>)
    ec94:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    ec96:	2e00      	cmp	r6, #0
    ec98:	d107      	bne.n	ecaa <system_gclk_gen_get_hz+0x66>
    ec9a:	2c01      	cmp	r4, #1
    ec9c:	d907      	bls.n	ecae <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    ec9e:	0021      	movs	r1, r4
    eca0:	0028      	movs	r0, r5
    eca2:	4b0a      	ldr	r3, [pc, #40]	; (eccc <system_gclk_gen_get_hz+0x88>)
    eca4:	4798      	blx	r3
    eca6:	0005      	movs	r5, r0
    eca8:	e001      	b.n	ecae <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    ecaa:	3401      	adds	r4, #1
    ecac:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    ecae:	0028      	movs	r0, r5
    ecb0:	bd70      	pop	{r4, r5, r6, pc}
    ecb2:	46c0      	nop			; (mov r8, r8)
    ecb4:	40000c00 	.word	0x40000c00
    ecb8:	0000cfad 	.word	0x0000cfad
    ecbc:	40000c04 	.word	0x40000c04
    ecc0:	0000e719 	.word	0x0000e719
    ecc4:	40000c08 	.word	0x40000c08
    ecc8:	0000cfed 	.word	0x0000cfed
    eccc:	000113ed 	.word	0x000113ed

0000ecd0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    ecd0:	b510      	push	{r4, lr}
    ecd2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    ecd4:	4b06      	ldr	r3, [pc, #24]	; (ecf0 <system_gclk_chan_enable+0x20>)
    ecd6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    ecd8:	4b06      	ldr	r3, [pc, #24]	; (ecf4 <system_gclk_chan_enable+0x24>)
    ecda:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    ecdc:	4a06      	ldr	r2, [pc, #24]	; (ecf8 <system_gclk_chan_enable+0x28>)
    ecde:	8853      	ldrh	r3, [r2, #2]
    ece0:	2180      	movs	r1, #128	; 0x80
    ece2:	01c9      	lsls	r1, r1, #7
    ece4:	430b      	orrs	r3, r1
    ece6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    ece8:	4b04      	ldr	r3, [pc, #16]	; (ecfc <system_gclk_chan_enable+0x2c>)
    ecea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    ecec:	bd10      	pop	{r4, pc}
    ecee:	46c0      	nop			; (mov r8, r8)
    ecf0:	0000cfad 	.word	0x0000cfad
    ecf4:	40000c02 	.word	0x40000c02
    ecf8:	40000c00 	.word	0x40000c00
    ecfc:	0000cfed 	.word	0x0000cfed

0000ed00 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    ed00:	b510      	push	{r4, lr}
    ed02:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    ed04:	4b0f      	ldr	r3, [pc, #60]	; (ed44 <system_gclk_chan_disable+0x44>)
    ed06:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    ed08:	4b0f      	ldr	r3, [pc, #60]	; (ed48 <system_gclk_chan_disable+0x48>)
    ed0a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    ed0c:	4a0f      	ldr	r2, [pc, #60]	; (ed4c <system_gclk_chan_disable+0x4c>)
    ed0e:	8853      	ldrh	r3, [r2, #2]
    ed10:	051b      	lsls	r3, r3, #20
    ed12:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    ed14:	8853      	ldrh	r3, [r2, #2]
    ed16:	490e      	ldr	r1, [pc, #56]	; (ed50 <system_gclk_chan_disable+0x50>)
    ed18:	400b      	ands	r3, r1
    ed1a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    ed1c:	8853      	ldrh	r3, [r2, #2]
    ed1e:	490d      	ldr	r1, [pc, #52]	; (ed54 <system_gclk_chan_disable+0x54>)
    ed20:	400b      	ands	r3, r1
    ed22:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    ed24:	0011      	movs	r1, r2
    ed26:	2280      	movs	r2, #128	; 0x80
    ed28:	01d2      	lsls	r2, r2, #7
    ed2a:	884b      	ldrh	r3, [r1, #2]
    ed2c:	4213      	tst	r3, r2
    ed2e:	d1fc      	bne.n	ed2a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    ed30:	4906      	ldr	r1, [pc, #24]	; (ed4c <system_gclk_chan_disable+0x4c>)
    ed32:	884a      	ldrh	r2, [r1, #2]
    ed34:	0203      	lsls	r3, r0, #8
    ed36:	4806      	ldr	r0, [pc, #24]	; (ed50 <system_gclk_chan_disable+0x50>)
    ed38:	4002      	ands	r2, r0
    ed3a:	4313      	orrs	r3, r2
    ed3c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    ed3e:	4b06      	ldr	r3, [pc, #24]	; (ed58 <system_gclk_chan_disable+0x58>)
    ed40:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    ed42:	bd10      	pop	{r4, pc}
    ed44:	0000cfad 	.word	0x0000cfad
    ed48:	40000c02 	.word	0x40000c02
    ed4c:	40000c00 	.word	0x40000c00
    ed50:	fffff0ff 	.word	0xfffff0ff
    ed54:	ffffbfff 	.word	0xffffbfff
    ed58:	0000cfed 	.word	0x0000cfed

0000ed5c <system_gclk_chan_set_config>:
{
    ed5c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    ed5e:	780c      	ldrb	r4, [r1, #0]
    ed60:	0224      	lsls	r4, r4, #8
    ed62:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    ed64:	4b02      	ldr	r3, [pc, #8]	; (ed70 <system_gclk_chan_set_config+0x14>)
    ed66:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    ed68:	b2a4      	uxth	r4, r4
    ed6a:	4b02      	ldr	r3, [pc, #8]	; (ed74 <system_gclk_chan_set_config+0x18>)
    ed6c:	805c      	strh	r4, [r3, #2]
}
    ed6e:	bd10      	pop	{r4, pc}
    ed70:	0000ed01 	.word	0x0000ed01
    ed74:	40000c00 	.word	0x40000c00

0000ed78 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    ed78:	b510      	push	{r4, lr}
    ed7a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    ed7c:	4b06      	ldr	r3, [pc, #24]	; (ed98 <system_gclk_chan_get_hz+0x20>)
    ed7e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    ed80:	4b06      	ldr	r3, [pc, #24]	; (ed9c <system_gclk_chan_get_hz+0x24>)
    ed82:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    ed84:	4b06      	ldr	r3, [pc, #24]	; (eda0 <system_gclk_chan_get_hz+0x28>)
    ed86:	885c      	ldrh	r4, [r3, #2]
    ed88:	0524      	lsls	r4, r4, #20
    ed8a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    ed8c:	4b05      	ldr	r3, [pc, #20]	; (eda4 <system_gclk_chan_get_hz+0x2c>)
    ed8e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    ed90:	0020      	movs	r0, r4
    ed92:	4b05      	ldr	r3, [pc, #20]	; (eda8 <system_gclk_chan_get_hz+0x30>)
    ed94:	4798      	blx	r3
}
    ed96:	bd10      	pop	{r4, pc}
    ed98:	0000cfad 	.word	0x0000cfad
    ed9c:	40000c02 	.word	0x40000c02
    eda0:	40000c00 	.word	0x40000c00
    eda4:	0000cfed 	.word	0x0000cfed
    eda8:	0000ec45 	.word	0x0000ec45

0000edac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    edac:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    edae:	78d3      	ldrb	r3, [r2, #3]
    edb0:	2b00      	cmp	r3, #0
    edb2:	d135      	bne.n	ee20 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    edb4:	7813      	ldrb	r3, [r2, #0]
    edb6:	2b80      	cmp	r3, #128	; 0x80
    edb8:	d029      	beq.n	ee0e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    edba:	061b      	lsls	r3, r3, #24
    edbc:	2480      	movs	r4, #128	; 0x80
    edbe:	0264      	lsls	r4, r4, #9
    edc0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    edc2:	7854      	ldrb	r4, [r2, #1]
    edc4:	2502      	movs	r5, #2
    edc6:	43ac      	bics	r4, r5
    edc8:	d106      	bne.n	edd8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    edca:	7894      	ldrb	r4, [r2, #2]
    edcc:	2c00      	cmp	r4, #0
    edce:	d120      	bne.n	ee12 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    edd0:	2480      	movs	r4, #128	; 0x80
    edd2:	02a4      	lsls	r4, r4, #10
    edd4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    edd6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    edd8:	7854      	ldrb	r4, [r2, #1]
    edda:	3c01      	subs	r4, #1
    eddc:	2c01      	cmp	r4, #1
    edde:	d91c      	bls.n	ee1a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    ede0:	040d      	lsls	r5, r1, #16
    ede2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    ede4:	24a0      	movs	r4, #160	; 0xa0
    ede6:	05e4      	lsls	r4, r4, #23
    ede8:	432c      	orrs	r4, r5
    edea:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    edec:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    edee:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    edf0:	24d0      	movs	r4, #208	; 0xd0
    edf2:	0624      	lsls	r4, r4, #24
    edf4:	432c      	orrs	r4, r5
    edf6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    edf8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    edfa:	78d4      	ldrb	r4, [r2, #3]
    edfc:	2c00      	cmp	r4, #0
    edfe:	d122      	bne.n	ee46 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    ee00:	035b      	lsls	r3, r3, #13
    ee02:	d51c      	bpl.n	ee3e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    ee04:	7893      	ldrb	r3, [r2, #2]
    ee06:	2b01      	cmp	r3, #1
    ee08:	d01e      	beq.n	ee48 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    ee0a:	6141      	str	r1, [r0, #20]
    ee0c:	e017      	b.n	ee3e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    ee0e:	2300      	movs	r3, #0
    ee10:	e7d7      	b.n	edc2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    ee12:	24c0      	movs	r4, #192	; 0xc0
    ee14:	02e4      	lsls	r4, r4, #11
    ee16:	4323      	orrs	r3, r4
    ee18:	e7dd      	b.n	edd6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    ee1a:	4c0d      	ldr	r4, [pc, #52]	; (ee50 <_system_pinmux_config+0xa4>)
    ee1c:	4023      	ands	r3, r4
    ee1e:	e7df      	b.n	ede0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    ee20:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    ee22:	040c      	lsls	r4, r1, #16
    ee24:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    ee26:	23a0      	movs	r3, #160	; 0xa0
    ee28:	05db      	lsls	r3, r3, #23
    ee2a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    ee2c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    ee2e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    ee30:	23d0      	movs	r3, #208	; 0xd0
    ee32:	061b      	lsls	r3, r3, #24
    ee34:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    ee36:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    ee38:	78d3      	ldrb	r3, [r2, #3]
    ee3a:	2b00      	cmp	r3, #0
    ee3c:	d103      	bne.n	ee46 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    ee3e:	7853      	ldrb	r3, [r2, #1]
    ee40:	3b01      	subs	r3, #1
    ee42:	2b01      	cmp	r3, #1
    ee44:	d902      	bls.n	ee4c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    ee46:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    ee48:	6181      	str	r1, [r0, #24]
    ee4a:	e7f8      	b.n	ee3e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    ee4c:	6081      	str	r1, [r0, #8]
}
    ee4e:	e7fa      	b.n	ee46 <_system_pinmux_config+0x9a>
    ee50:	fffbffff 	.word	0xfffbffff

0000ee54 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    ee54:	b510      	push	{r4, lr}
    ee56:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    ee58:	09c1      	lsrs	r1, r0, #7
		return NULL;
    ee5a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    ee5c:	2900      	cmp	r1, #0
    ee5e:	d104      	bne.n	ee6a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    ee60:	0943      	lsrs	r3, r0, #5
    ee62:	01db      	lsls	r3, r3, #7
    ee64:	4905      	ldr	r1, [pc, #20]	; (ee7c <system_pinmux_pin_set_config+0x28>)
    ee66:	468c      	mov	ip, r1
    ee68:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    ee6a:	241f      	movs	r4, #31
    ee6c:	4020      	ands	r0, r4
    ee6e:	2101      	movs	r1, #1
    ee70:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    ee72:	0018      	movs	r0, r3
    ee74:	4b02      	ldr	r3, [pc, #8]	; (ee80 <system_pinmux_pin_set_config+0x2c>)
    ee76:	4798      	blx	r3
}
    ee78:	bd10      	pop	{r4, pc}
    ee7a:	46c0      	nop			; (mov r8, r8)
    ee7c:	41004400 	.word	0x41004400
    ee80:	0000edad 	.word	0x0000edad

0000ee84 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    ee84:	4770      	bx	lr
	...

0000ee88 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    ee88:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    ee8a:	4b05      	ldr	r3, [pc, #20]	; (eea0 <system_init+0x18>)
    ee8c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    ee8e:	4b05      	ldr	r3, [pc, #20]	; (eea4 <system_init+0x1c>)
    ee90:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    ee92:	4b05      	ldr	r3, [pc, #20]	; (eea8 <system_init+0x20>)
    ee94:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    ee96:	4b05      	ldr	r3, [pc, #20]	; (eeac <system_init+0x24>)
    ee98:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    ee9a:	4b05      	ldr	r3, [pc, #20]	; (eeb0 <system_init+0x28>)
    ee9c:	4798      	blx	r3
}
    ee9e:	bd10      	pop	{r4, pc}
    eea0:	0000e9c5 	.word	0x0000e9c5
    eea4:	0000932d 	.word	0x0000932d
    eea8:	0000ee85 	.word	0x0000ee85
    eeac:	0000d0f5 	.word	0x0000d0f5
    eeb0:	0000ee85 	.word	0x0000ee85

0000eeb4 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    eeb4:	4b09      	ldr	r3, [pc, #36]	; (eedc <_tcc_get_inst_index+0x28>)
    eeb6:	4298      	cmp	r0, r3
    eeb8:	d00c      	beq.n	eed4 <_tcc_get_inst_index+0x20>
    eeba:	4b09      	ldr	r3, [pc, #36]	; (eee0 <_tcc_get_inst_index+0x2c>)
    eebc:	4298      	cmp	r0, r3
    eebe:	d007      	beq.n	eed0 <_tcc_get_inst_index+0x1c>
    eec0:	4a08      	ldr	r2, [pc, #32]	; (eee4 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    eec2:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    eec4:	4290      	cmp	r0, r2
    eec6:	d001      	beq.n	eecc <_tcc_get_inst_index+0x18>
}
    eec8:	0018      	movs	r0, r3
    eeca:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    eecc:	3302      	adds	r3, #2
    eece:	e002      	b.n	eed6 <_tcc_get_inst_index+0x22>
    eed0:	2301      	movs	r3, #1
    eed2:	e000      	b.n	eed6 <_tcc_get_inst_index+0x22>
    eed4:	2300      	movs	r3, #0
			return i;
    eed6:	b2db      	uxtb	r3, r3
    eed8:	e7f6      	b.n	eec8 <_tcc_get_inst_index+0x14>
    eeda:	46c0      	nop			; (mov r8, r8)
    eedc:	42002000 	.word	0x42002000
    eee0:	42002400 	.word	0x42002400
    eee4:	42002800 	.word	0x42002800

0000eee8 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    eee8:	b510      	push	{r4, lr}
    eeea:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    eeec:	0008      	movs	r0, r1
    eeee:	4b4f      	ldr	r3, [pc, #316]	; (f02c <tcc_get_config_defaults+0x144>)
    eef0:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    eef2:	2300      	movs	r3, #0
    eef4:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    eef6:	0080      	lsls	r0, r0, #2
    eef8:	4a4d      	ldr	r2, [pc, #308]	; (f030 <tcc_get_config_defaults+0x148>)
    eefa:	5882      	ldr	r2, [r0, r2]
    eefc:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    eefe:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    ef00:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    ef02:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    ef04:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    ef06:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    ef08:	61e3      	str	r3, [r4, #28]
    ef0a:	6223      	str	r3, [r4, #32]
    ef0c:	6263      	str	r3, [r4, #36]	; 0x24
    ef0e:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    ef10:	7523      	strb	r3, [r4, #20]
    ef12:	7563      	strb	r3, [r4, #21]
    ef14:	75a3      	strb	r3, [r4, #22]
    ef16:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    ef18:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    ef1a:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    ef1c:	7423      	strb	r3, [r4, #16]
    ef1e:	7463      	strb	r3, [r4, #17]
    ef20:	74a3      	strb	r3, [r4, #18]
    ef22:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    ef24:	222c      	movs	r2, #44	; 0x2c
    ef26:	54a3      	strb	r3, [r4, r2]
    ef28:	3201      	adds	r2, #1
    ef2a:	54a3      	strb	r3, [r4, r2]
    ef2c:	3201      	adds	r2, #1
    ef2e:	54a3      	strb	r3, [r4, r2]
    ef30:	3201      	adds	r2, #1
    ef32:	54a3      	strb	r3, [r4, r2]
    ef34:	3201      	adds	r2, #1
    ef36:	54a3      	strb	r3, [r4, r2]
    ef38:	3201      	adds	r2, #1
    ef3a:	54a3      	strb	r3, [r4, r2]
    ef3c:	3201      	adds	r2, #1
    ef3e:	54a3      	strb	r3, [r4, r2]
    ef40:	3201      	adds	r2, #1
    ef42:	54a3      	strb	r3, [r4, r2]
    ef44:	3201      	adds	r2, #1
    ef46:	54a3      	strb	r3, [r4, r2]
    ef48:	3201      	adds	r2, #1
    ef4a:	54a3      	strb	r3, [r4, r2]
    ef4c:	3201      	adds	r2, #1
    ef4e:	54a3      	strb	r3, [r4, r2]
    ef50:	3201      	adds	r2, #1
    ef52:	54a3      	strb	r3, [r4, r2]
    ef54:	3201      	adds	r2, #1
    ef56:	54a3      	strb	r3, [r4, r2]
    ef58:	3201      	adds	r2, #1
    ef5a:	54a3      	strb	r3, [r4, r2]
    ef5c:	3201      	adds	r2, #1
    ef5e:	54a3      	strb	r3, [r4, r2]
    ef60:	3201      	adds	r2, #1
    ef62:	54a3      	strb	r3, [r4, r2]
    ef64:	3201      	adds	r2, #1
    ef66:	54a3      	strb	r3, [r4, r2]
    ef68:	3201      	adds	r2, #1
    ef6a:	54a3      	strb	r3, [r4, r2]
    ef6c:	3201      	adds	r2, #1
    ef6e:	54a3      	strb	r3, [r4, r2]
    ef70:	3201      	adds	r2, #1
    ef72:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    ef74:	3201      	adds	r2, #1
    ef76:	54a3      	strb	r3, [r4, r2]
    ef78:	3201      	adds	r2, #1
    ef7a:	54a3      	strb	r3, [r4, r2]
    ef7c:	3201      	adds	r2, #1
    ef7e:	54a3      	strb	r3, [r4, r2]
    ef80:	3201      	adds	r2, #1
    ef82:	54a3      	strb	r3, [r4, r2]
    ef84:	3201      	adds	r2, #1
    ef86:	54a3      	strb	r3, [r4, r2]
    ef88:	3201      	adds	r2, #1
    ef8a:	54a3      	strb	r3, [r4, r2]
    ef8c:	3201      	adds	r2, #1
    ef8e:	54a3      	strb	r3, [r4, r2]
    ef90:	3201      	adds	r2, #1
    ef92:	54a3      	strb	r3, [r4, r2]
    ef94:	3201      	adds	r2, #1
    ef96:	54a3      	strb	r3, [r4, r2]
    ef98:	3201      	adds	r2, #1
    ef9a:	54a3      	strb	r3, [r4, r2]
    ef9c:	3201      	adds	r2, #1
    ef9e:	54a3      	strb	r3, [r4, r2]
    efa0:	3201      	adds	r2, #1
    efa2:	54a3      	strb	r3, [r4, r2]
    efa4:	3201      	adds	r2, #1
    efa6:	54a3      	strb	r3, [r4, r2]
    efa8:	3201      	adds	r2, #1
    efaa:	54a3      	strb	r3, [r4, r2]
    efac:	3201      	adds	r2, #1
    efae:	54a3      	strb	r3, [r4, r2]
    efb0:	3201      	adds	r2, #1
    efb2:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    efb4:	3201      	adds	r2, #1
    efb6:	54a3      	strb	r3, [r4, r2]
    efb8:	3201      	adds	r2, #1
    efba:	54a3      	strb	r3, [r4, r2]
    efbc:	3201      	adds	r2, #1
    efbe:	54a3      	strb	r3, [r4, r2]
    efc0:	3201      	adds	r2, #1
    efc2:	54a3      	strb	r3, [r4, r2]
    efc4:	3201      	adds	r2, #1
    efc6:	54a3      	strb	r3, [r4, r2]
    efc8:	3201      	adds	r2, #1
    efca:	54a3      	strb	r3, [r4, r2]
    efcc:	3201      	adds	r2, #1
    efce:	54a3      	strb	r3, [r4, r2]
    efd0:	3201      	adds	r2, #1
    efd2:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    efd4:	3241      	adds	r2, #65	; 0x41
    efd6:	54a3      	strb	r3, [r4, r2]
    efd8:	65a3      	str	r3, [r4, #88]	; 0x58
    efda:	67a3      	str	r3, [r4, #120]	; 0x78
    efdc:	3201      	adds	r2, #1
    efde:	54a3      	strb	r3, [r4, r2]
    efe0:	65e3      	str	r3, [r4, #92]	; 0x5c
    efe2:	67e3      	str	r3, [r4, #124]	; 0x7c
    efe4:	3201      	adds	r2, #1
    efe6:	54a3      	strb	r3, [r4, r2]
    efe8:	6623      	str	r3, [r4, #96]	; 0x60
    efea:	3a1a      	subs	r2, #26
    efec:	50a3      	str	r3, [r4, r2]
    efee:	321b      	adds	r2, #27
    eff0:	54a3      	strb	r3, [r4, r2]
    eff2:	6663      	str	r3, [r4, #100]	; 0x64
    eff4:	3a17      	subs	r2, #23
    eff6:	50a3      	str	r3, [r4, r2]
    eff8:	3218      	adds	r2, #24
    effa:	54a3      	strb	r3, [r4, r2]
    effc:	66a3      	str	r3, [r4, #104]	; 0x68
    effe:	3a14      	subs	r2, #20
    f000:	50a3      	str	r3, [r4, r2]
    f002:	3215      	adds	r2, #21
    f004:	54a3      	strb	r3, [r4, r2]
    f006:	66e3      	str	r3, [r4, #108]	; 0x6c
    f008:	3a11      	subs	r2, #17
    f00a:	50a3      	str	r3, [r4, r2]
    f00c:	3212      	adds	r2, #18
    f00e:	54a3      	strb	r3, [r4, r2]
    f010:	6723      	str	r3, [r4, #112]	; 0x70
    f012:	3a0e      	subs	r2, #14
    f014:	50a3      	str	r3, [r4, r2]
    f016:	320f      	adds	r2, #15
    f018:	54a3      	strb	r3, [r4, r2]
    f01a:	6763      	str	r3, [r4, #116]	; 0x74
    f01c:	3a0b      	subs	r2, #11
    f01e:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    f020:	2101      	movs	r1, #1
    f022:	320c      	adds	r2, #12
    f024:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    f026:	3201      	adds	r2, #1
    f028:	54a3      	strb	r3, [r4, r2]
}
    f02a:	bd10      	pop	{r4, pc}
    f02c:	0000eeb5 	.word	0x0000eeb5
    f030:	000140a4 	.word	0x000140a4

0000f034 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    f034:	b5f0      	push	{r4, r5, r6, r7, lr}
    f036:	46de      	mov	lr, fp
    f038:	4657      	mov	r7, sl
    f03a:	464e      	mov	r6, r9
    f03c:	4645      	mov	r5, r8
    f03e:	b5e0      	push	{r5, r6, r7, lr}
    f040:	b091      	sub	sp, #68	; 0x44
    f042:	9001      	str	r0, [sp, #4]
    f044:	000c      	movs	r4, r1
    f046:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    f048:	0008      	movs	r0, r1
    f04a:	4bc3      	ldr	r3, [pc, #780]	; (f358 <tcc_init+0x324>)
    f04c:	4798      	blx	r3
    f04e:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    f050:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    f052:	48c2      	ldr	r0, [pc, #776]	; (f35c <tcc_init+0x328>)
    f054:	6a02      	ldr	r2, [r0, #32]
    f056:	009e      	lsls	r6, r3, #2
    f058:	4fc1      	ldr	r7, [pc, #772]	; (f360 <tcc_init+0x32c>)
    f05a:	59f7      	ldr	r7, [r6, r7]
    f05c:	433a      	orrs	r2, r7
    f05e:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    f060:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    f062:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    f064:	0792      	lsls	r2, r2, #30
    f066:	d506      	bpl.n	f076 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    f068:	b011      	add	sp, #68	; 0x44
    f06a:	bc3c      	pop	{r2, r3, r4, r5}
    f06c:	4690      	mov	r8, r2
    f06e:	4699      	mov	r9, r3
    f070:	46a2      	mov	sl, r4
    f072:	46ab      	mov	fp, r5
    f074:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    f076:	6822      	ldr	r2, [r4, #0]
    f078:	2701      	movs	r7, #1
    f07a:	4017      	ands	r7, r2
    f07c:	d1f4      	bne.n	f068 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    f07e:	48b9      	ldr	r0, [pc, #740]	; (f364 <tcc_init+0x330>)
    f080:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    f082:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    f084:	682e      	ldr	r6, [r5, #0]
    f086:	42b2      	cmp	r2, r6
    f088:	d3ee      	bcc.n	f068 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    f08a:	686e      	ldr	r6, [r5, #4]
    f08c:	42b2      	cmp	r2, r6
    f08e:	d3eb      	bcc.n	f068 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    f090:	69e8      	ldr	r0, [r5, #28]
    f092:	4282      	cmp	r2, r0
    f094:	d200      	bcs.n	f098 <tcc_init+0x64>
    f096:	e1b9      	b.n	f40c <tcc_init+0x3d8>
    f098:	6a28      	ldr	r0, [r5, #32]
    f09a:	4282      	cmp	r2, r0
    f09c:	d200      	bcs.n	f0a0 <tcc_init+0x6c>
    f09e:	e1b7      	b.n	f410 <tcc_init+0x3dc>
    f0a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f0a2:	4282      	cmp	r2, r0
    f0a4:	d200      	bcs.n	f0a8 <tcc_init+0x74>
    f0a6:	e1b5      	b.n	f414 <tcc_init+0x3e0>
    f0a8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    f0aa:	4282      	cmp	r2, r0
    f0ac:	d200      	bcs.n	f0b0 <tcc_init+0x7c>
    f0ae:	e1b3      	b.n	f418 <tcc_init+0x3e4>
    f0b0:	2298      	movs	r2, #152	; 0x98
    f0b2:	4694      	mov	ip, r2
    f0b4:	44ac      	add	ip, r5
    f0b6:	4662      	mov	r2, ip
    f0b8:	9208      	str	r2, [sp, #32]
    f0ba:	2000      	movs	r0, #0
    f0bc:	e003      	b.n	f0c6 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    f0be:	3001      	adds	r0, #1
    f0c0:	3201      	adds	r2, #1
    f0c2:	2808      	cmp	r0, #8
    f0c4:	d008      	beq.n	f0d8 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    f0c6:	7816      	ldrb	r6, [r2, #0]
    f0c8:	2e00      	cmp	r6, #0
    f0ca:	d0f8      	beq.n	f0be <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    f0cc:	4ea6      	ldr	r6, [pc, #664]	; (f368 <tcc_init+0x334>)
    f0ce:	5c76      	ldrb	r6, [r6, r1]
    f0d0:	4286      	cmp	r6, r0
    f0d2:	dcf4      	bgt.n	f0be <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    f0d4:	2017      	movs	r0, #23
    f0d6:	e7c7      	b.n	f068 <tcc_init+0x34>
    f0d8:	2200      	movs	r2, #0
    f0da:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    f0dc:	2080      	movs	r0, #128	; 0x80
    f0de:	0440      	lsls	r0, r0, #17
    f0e0:	4684      	mov	ip, r0
    f0e2:	e002      	b.n	f0ea <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    f0e4:	3201      	adds	r2, #1
    f0e6:	2a04      	cmp	r2, #4
    f0e8:	d00e      	beq.n	f108 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    f0ea:	18a8      	adds	r0, r5, r2
    f0ec:	7c00      	ldrb	r0, [r0, #16]
    f0ee:	2801      	cmp	r0, #1
    f0f0:	d1f8      	bne.n	f0e4 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    f0f2:	489e      	ldr	r0, [pc, #632]	; (f36c <tcc_init+0x338>)
    f0f4:	5c40      	ldrb	r0, [r0, r1]
    f0f6:	4290      	cmp	r0, r2
    f0f8:	da00      	bge.n	f0fc <tcc_init+0xc8>
    f0fa:	e18f      	b.n	f41c <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    f0fc:	4660      	mov	r0, ip
    f0fe:	4090      	lsls	r0, r2
    f100:	9e02      	ldr	r6, [sp, #8]
    f102:	4306      	orrs	r6, r0
    f104:	9602      	str	r6, [sp, #8]
    f106:	e7ed      	b.n	f0e4 <tcc_init+0xb0>
	if (config->run_in_standby) {
    f108:	329d      	adds	r2, #157	; 0x9d
    f10a:	5caa      	ldrb	r2, [r5, r2]
    f10c:	2a00      	cmp	r2, #0
    f10e:	d004      	beq.n	f11a <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    f110:	2280      	movs	r2, #128	; 0x80
    f112:	0112      	lsls	r2, r2, #4
    f114:	9902      	ldr	r1, [sp, #8]
    f116:	4311      	orrs	r1, r2
    f118:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    f11a:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    f11c:	1e51      	subs	r1, r2, #1
    f11e:	418a      	sbcs	r2, r1
    f120:	0092      	lsls	r2, r2, #2
    f122:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    f124:	7a6a      	ldrb	r2, [r5, #9]
    f126:	2a01      	cmp	r2, #1
    f128:	d022      	beq.n	f170 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    f12a:	4a90      	ldr	r2, [pc, #576]	; (f36c <tcc_init+0x338>)
    f12c:	5cd2      	ldrb	r2, [r2, r3]
    f12e:	0011      	movs	r1, r2
    f130:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    f132:	2235      	movs	r2, #53	; 0x35
    f134:	5caa      	ldrb	r2, [r5, r2]
    f136:	428a      	cmp	r2, r1
    f138:	d300      	bcc.n	f13c <tcc_init+0x108>
    f13a:	e179      	b.n	f430 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    f13c:	212c      	movs	r1, #44	; 0x2c
    f13e:	5c69      	ldrb	r1, [r5, r1]
    f140:	290f      	cmp	r1, #15
    f142:	d900      	bls.n	f146 <tcc_init+0x112>
    f144:	e174      	b.n	f430 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    f146:	7b28      	ldrb	r0, [r5, #12]
    f148:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    f14a:	7ae8      	ldrb	r0, [r5, #11]
    f14c:	900b      	str	r0, [sp, #44]	; 0x2c
    f14e:	202d      	movs	r0, #45	; 0x2d
    f150:	4682      	mov	sl, r0
    f152:	44aa      	add	sl, r5
    f154:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    f156:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    f158:	ae0e      	add	r6, sp, #56	; 0x38
    f15a:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    f15c:	26c0      	movs	r6, #192	; 0xc0
    f15e:	0136      	lsls	r6, r6, #4
    f160:	46b1      	mov	r9, r6
    f162:	4684      	mov	ip, r0
    f164:	46a0      	mov	r8, r4
    f166:	0028      	movs	r0, r5
    f168:	4655      	mov	r5, sl
    f16a:	9309      	str	r3, [sp, #36]	; 0x24
    f16c:	4682      	mov	sl, r0
    f16e:	e035      	b.n	f1dc <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    f170:	9906      	ldr	r1, [sp, #24]
    f172:	4311      	orrs	r1, r2
    f174:	9106      	str	r1, [sp, #24]
    f176:	e7d8      	b.n	f12a <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    f178:	0292      	lsls	r2, r2, #10
    f17a:	464f      	mov	r7, r9
    f17c:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    f17e:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    f180:	7919      	ldrb	r1, [r3, #4]
    f182:	468b      	mov	fp, r1
    f184:	2103      	movs	r1, #3
    f186:	465f      	mov	r7, fp
    f188:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    f18a:	430a      	orrs	r2, r1
    f18c:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    f18e:	795a      	ldrb	r2, [r3, #5]
    f190:	0152      	lsls	r2, r2, #5
    f192:	2160      	movs	r1, #96	; 0x60
    f194:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    f196:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    f198:	7999      	ldrb	r1, [r3, #6]
    f19a:	0209      	lsls	r1, r1, #8
    f19c:	26c0      	movs	r6, #192	; 0xc0
    f19e:	00b6      	lsls	r6, r6, #2
    f1a0:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    f1a2:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    f1a4:	79da      	ldrb	r2, [r3, #7]
    f1a6:	0312      	lsls	r2, r2, #12
    f1a8:	21e0      	movs	r1, #224	; 0xe0
    f1aa:	01c9      	lsls	r1, r1, #7
    f1ac:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    f1ae:	4316      	orrs	r6, r2
    f1b0:	4334      	orrs	r4, r6
    f1b2:	9a03      	ldr	r2, [sp, #12]
    f1b4:	4314      	orrs	r4, r2
    f1b6:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    f1b8:	4662      	mov	r2, ip
    f1ba:	9907      	ldr	r1, [sp, #28]
    f1bc:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    f1be:	2a04      	cmp	r2, #4
    f1c0:	d02a      	beq.n	f218 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    f1c2:	7c9a      	ldrb	r2, [r3, #18]
    f1c4:	9905      	ldr	r1, [sp, #20]
    f1c6:	4291      	cmp	r1, r2
    f1c8:	d800      	bhi.n	f1cc <tcc_init+0x198>
    f1ca:	e131      	b.n	f430 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    f1cc:	7a59      	ldrb	r1, [r3, #9]
    f1ce:	350a      	adds	r5, #10
    f1d0:	2304      	movs	r3, #4
    f1d2:	469b      	mov	fp, r3
    f1d4:	44dc      	add	ip, fp
    f1d6:	290f      	cmp	r1, #15
    f1d8:	d900      	bls.n	f1dc <tcc_init+0x1a8>
    f1da:	e129      	b.n	f430 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    f1dc:	0609      	lsls	r1, r1, #24
    f1de:	23f0      	movs	r3, #240	; 0xf0
    f1e0:	051b      	lsls	r3, r3, #20
    f1e2:	4019      	ands	r1, r3
    f1e4:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    f1e6:	782e      	ldrb	r6, [r5, #0]
    f1e8:	0436      	lsls	r6, r6, #16
    f1ea:	20ff      	movs	r0, #255	; 0xff
    f1ec:	0400      	lsls	r0, r0, #16
    f1ee:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    f1f0:	7868      	ldrb	r0, [r5, #1]
    f1f2:	2480      	movs	r4, #128	; 0x80
    f1f4:	2800      	cmp	r0, #0
    f1f6:	d100      	bne.n	f1fa <tcc_init+0x1c6>
    f1f8:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    f1fa:	7898      	ldrb	r0, [r3, #2]
    f1fc:	2708      	movs	r7, #8
    f1fe:	9703      	str	r7, [sp, #12]
    f200:	2800      	cmp	r0, #0
    f202:	d101      	bne.n	f208 <tcc_init+0x1d4>
    f204:	9804      	ldr	r0, [sp, #16]
    f206:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    f208:	78d8      	ldrb	r0, [r3, #3]
    f20a:	4683      	mov	fp, r0
    f20c:	2010      	movs	r0, #16
    f20e:	465f      	mov	r7, fp
    f210:	2f00      	cmp	r7, #0
    f212:	d1b1      	bne.n	f178 <tcc_init+0x144>
    f214:	9804      	ldr	r0, [sp, #16]
    f216:	e7af      	b.n	f178 <tcc_init+0x144>
    f218:	4644      	mov	r4, r8
    f21a:	4655      	mov	r5, sl
    f21c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    f21e:	4a52      	ldr	r2, [pc, #328]	; (f368 <tcc_init+0x334>)
    f220:	5cd2      	ldrb	r2, [r2, r3]
    f222:	4691      	mov	r9, r2
    f224:	4651      	mov	r1, sl
    f226:	3150      	adds	r1, #80	; 0x50
    f228:	4650      	mov	r0, sl
    f22a:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    f22c:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    f22e:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    f230:	2601      	movs	r6, #1
    f232:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    f234:	2602      	movs	r6, #2
    f236:	36ff      	adds	r6, #255	; 0xff
    f238:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    f23a:	2680      	movs	r6, #128	; 0x80
    f23c:	0276      	lsls	r6, r6, #9
    f23e:	46b0      	mov	r8, r6
    f240:	46a4      	mov	ip, r4
    f242:	001c      	movs	r4, r3
    f244:	464b      	mov	r3, r9
    f246:	e00f      	b.n	f268 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    f248:	7806      	ldrb	r6, [r0, #0]
    f24a:	2e00      	cmp	r6, #0
    f24c:	d007      	beq.n	f25e <tcc_init+0x22a>
			if (i >= ow_num) {
    f24e:	4293      	cmp	r3, r2
    f250:	d800      	bhi.n	f254 <tcc_init+0x220>
    f252:	e0e7      	b.n	f424 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    f254:	2e02      	cmp	r6, #2
    f256:	d014      	beq.n	f282 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    f258:	4656      	mov	r6, sl
    f25a:	4096      	lsls	r6, r2
    f25c:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    f25e:	3201      	adds	r2, #1
    f260:	3101      	adds	r1, #1
    f262:	3002      	adds	r0, #2
    f264:	2a08      	cmp	r2, #8
    f266:	d010      	beq.n	f28a <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    f268:	780e      	ldrb	r6, [r1, #0]
    f26a:	2e00      	cmp	r6, #0
    f26c:	d0ec      	beq.n	f248 <tcc_init+0x214>
			if (i >= ow_num) {
    f26e:	4293      	cmp	r3, r2
    f270:	d800      	bhi.n	f274 <tcc_init+0x240>
    f272:	e0d5      	b.n	f420 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    f274:	4646      	mov	r6, r8
    f276:	4096      	lsls	r6, r2
    f278:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    f27a:	7806      	ldrb	r6, [r0, #0]
    f27c:	2e00      	cmp	r6, #0
    f27e:	d1e9      	bne.n	f254 <tcc_init+0x220>
    f280:	e7ed      	b.n	f25e <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    f282:	465e      	mov	r6, fp
    f284:	4096      	lsls	r6, r2
    f286:	4337      	orrs	r7, r6
    f288:	e7e9      	b.n	f25e <tcc_init+0x22a>
    f28a:	4699      	mov	r9, r3
    f28c:	0023      	movs	r3, r4
    f28e:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    f290:	7e6a      	ldrb	r2, [r5, #25]
    f292:	0112      	lsls	r2, r2, #4
    f294:	2130      	movs	r1, #48	; 0x30
    f296:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    f298:	7e28      	ldrb	r0, [r5, #24]
    f29a:	2207      	movs	r2, #7
    f29c:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    f29e:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    f2a0:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    f2a2:	2080      	movs	r0, #128	; 0x80
    f2a4:	0240      	lsls	r0, r0, #9
    f2a6:	000e      	movs	r6, r1
    f2a8:	e002      	b.n	f2b0 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    f2aa:	3201      	adds	r2, #1
    f2ac:	2a04      	cmp	r2, #4
    f2ae:	d00b      	beq.n	f2c8 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    f2b0:	18a9      	adds	r1, r5, r2
    f2b2:	7d09      	ldrb	r1, [r1, #20]
    f2b4:	2900      	cmp	r1, #0
    f2b6:	d0f8      	beq.n	f2aa <tcc_init+0x276>
			if (n >= cc_num) {
    f2b8:	9905      	ldr	r1, [sp, #20]
    f2ba:	4291      	cmp	r1, r2
    f2bc:	dc00      	bgt.n	f2c0 <tcc_init+0x28c>
    f2be:	e0b3      	b.n	f428 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    f2c0:	0001      	movs	r1, r0
    f2c2:	4091      	lsls	r1, r2
    f2c4:	430e      	orrs	r6, r1
    f2c6:	e7f0      	b.n	f2aa <tcc_init+0x276>
    f2c8:	46b2      	mov	sl, r6
    f2ca:	9801      	ldr	r0, [sp, #4]
    f2cc:	0002      	movs	r2, r0
    f2ce:	3204      	adds	r2, #4
    f2d0:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    f2d2:	2100      	movs	r1, #0
    f2d4:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    f2d6:	4282      	cmp	r2, r0
    f2d8:	d1fc      	bne.n	f2d4 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    f2da:	2200      	movs	r2, #0
    f2dc:	9801      	ldr	r0, [sp, #4]
    f2de:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    f2e0:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    f2e2:	0099      	lsls	r1, r3, #2
    f2e4:	4a22      	ldr	r2, [pc, #136]	; (f370 <tcc_init+0x33c>)
    f2e6:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    f2e8:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    f2ea:	22a0      	movs	r2, #160	; 0xa0
    f2ec:	5ca9      	ldrb	r1, [r5, r2]
    f2ee:	3a64      	subs	r2, #100	; 0x64
    f2f0:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    f2f2:	a90d      	add	r1, sp, #52	; 0x34
    f2f4:	7aaa      	ldrb	r2, [r5, #10]
    f2f6:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    f2f8:	4a1e      	ldr	r2, [pc, #120]	; (f374 <tcc_init+0x340>)
    f2fa:	5cd6      	ldrb	r6, [r2, r3]
    f2fc:	0030      	movs	r0, r6
    f2fe:	4b1e      	ldr	r3, [pc, #120]	; (f378 <tcc_init+0x344>)
    f300:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    f302:	0030      	movs	r0, r6
    f304:	4b1d      	ldr	r3, [pc, #116]	; (f37c <tcc_init+0x348>)
    f306:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    f308:	464b      	mov	r3, r9
    f30a:	2b00      	cmp	r3, #0
    f30c:	dd3c      	ble.n	f388 <tcc_init+0x354>
    f30e:	002e      	movs	r6, r5
    f310:	3658      	adds	r6, #88	; 0x58
    f312:	3398      	adds	r3, #152	; 0x98
    f314:	4698      	mov	r8, r3
    f316:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    f318:	2301      	movs	r3, #1
    f31a:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    f31c:	46ab      	mov	fp, r5
    f31e:	4645      	mov	r5, r8
    f320:	46a0      	mov	r8, r4
    f322:	9c08      	ldr	r4, [sp, #32]
    f324:	e003      	b.n	f32e <tcc_init+0x2fa>
    f326:	3401      	adds	r4, #1
    f328:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    f32a:	42ac      	cmp	r4, r5
    f32c:	d02a      	beq.n	f384 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    f32e:	7823      	ldrb	r3, [r4, #0]
    f330:	2b00      	cmp	r3, #0
    f332:	d0f8      	beq.n	f326 <tcc_init+0x2f2>
    f334:	ab0c      	add	r3, sp, #48	; 0x30
    f336:	464a      	mov	r2, r9
    f338:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    f33a:	2300      	movs	r3, #0
    f33c:	aa0c      	add	r2, sp, #48	; 0x30
    f33e:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    f340:	0013      	movs	r3, r2
    f342:	2220      	movs	r2, #32
    f344:	18b2      	adds	r2, r6, r2
    f346:	7812      	ldrb	r2, [r2, #0]
    f348:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    f34a:	464a      	mov	r2, r9
    f34c:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    f34e:	7830      	ldrb	r0, [r6, #0]
    f350:	0019      	movs	r1, r3
    f352:	4b0b      	ldr	r3, [pc, #44]	; (f380 <tcc_init+0x34c>)
    f354:	4798      	blx	r3
    f356:	e7e6      	b.n	f326 <tcc_init+0x2f2>
    f358:	0000eeb5 	.word	0x0000eeb5
    f35c:	40000400 	.word	0x40000400
    f360:	00014090 	.word	0x00014090
    f364:	000140a4 	.word	0x000140a4
    f368:	000140b0 	.word	0x000140b0
    f36c:	0001409c 	.word	0x0001409c
    f370:	20000580 	.word	0x20000580
    f374:	000140a0 	.word	0x000140a0
    f378:	0000ed5d 	.word	0x0000ed5d
    f37c:	0000ecd1 	.word	0x0000ecd1
    f380:	0000ee55 	.word	0x0000ee55
    f384:	4644      	mov	r4, r8
    f386:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    f388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f38a:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    f38c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f38e:	0212      	lsls	r2, r2, #8
    f390:	4313      	orrs	r3, r2
    f392:	9a02      	ldr	r2, [sp, #8]
    f394:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    f396:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    f398:	2204      	movs	r2, #4
    f39a:	68a3      	ldr	r3, [r4, #8]
    f39c:	421a      	tst	r2, r3
    f39e:	d1fc      	bne.n	f39a <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    f3a0:	23ff      	movs	r3, #255	; 0xff
    f3a2:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    f3a4:	2204      	movs	r2, #4
    f3a6:	68a3      	ldr	r3, [r4, #8]
    f3a8:	421a      	tst	r2, r3
    f3aa:	d1fc      	bne.n	f3a6 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    f3ac:	466b      	mov	r3, sp
    f3ae:	7e1b      	ldrb	r3, [r3, #24]
    f3b0:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    f3b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f3b4:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    f3b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f3b8:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    f3ba:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    f3bc:	4a1d      	ldr	r2, [pc, #116]	; (f434 <tcc_init+0x400>)
    f3be:	68a3      	ldr	r3, [r4, #8]
    f3c0:	4213      	tst	r3, r2
    f3c2:	d1fc      	bne.n	f3be <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    f3c4:	4653      	mov	r3, sl
    f3c6:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    f3c8:	2210      	movs	r2, #16
    f3ca:	68a3      	ldr	r3, [r4, #8]
    f3cc:	421a      	tst	r2, r3
    f3ce:	d1fc      	bne.n	f3ca <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    f3d0:	682b      	ldr	r3, [r5, #0]
    f3d2:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    f3d4:	4a18      	ldr	r2, [pc, #96]	; (f438 <tcc_init+0x404>)
    f3d6:	68a3      	ldr	r3, [r4, #8]
    f3d8:	4213      	tst	r3, r2
    f3da:	d1fc      	bne.n	f3d6 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    f3dc:	686b      	ldr	r3, [r5, #4]
    f3de:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    f3e0:	9805      	ldr	r0, [sp, #20]
    f3e2:	2800      	cmp	r0, #0
    f3e4:	dd22      	ble.n	f42c <tcc_init+0x3f8>
    f3e6:	351c      	adds	r5, #28
    f3e8:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    f3ea:	4e14      	ldr	r6, [pc, #80]	; (f43c <tcc_init+0x408>)
    f3ec:	0032      	movs	r2, r6
    f3ee:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    f3f0:	68a3      	ldr	r3, [r4, #8]
    f3f2:	421a      	tst	r2, r3
    f3f4:	d1fc      	bne.n	f3f0 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    f3f6:	cd04      	ldmia	r5!, {r2}
    f3f8:	000b      	movs	r3, r1
    f3fa:	3310      	adds	r3, #16
    f3fc:	009b      	lsls	r3, r3, #2
    f3fe:	18e3      	adds	r3, r4, r3
    f400:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    f402:	3101      	adds	r1, #1
    f404:	4288      	cmp	r0, r1
    f406:	dcf1      	bgt.n	f3ec <tcc_init+0x3b8>
	return STATUS_OK;
    f408:	2000      	movs	r0, #0
    f40a:	e62d      	b.n	f068 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    f40c:	2017      	movs	r0, #23
    f40e:	e62b      	b.n	f068 <tcc_init+0x34>
    f410:	2017      	movs	r0, #23
    f412:	e629      	b.n	f068 <tcc_init+0x34>
    f414:	2017      	movs	r0, #23
    f416:	e627      	b.n	f068 <tcc_init+0x34>
    f418:	2017      	movs	r0, #23
    f41a:	e625      	b.n	f068 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    f41c:	2017      	movs	r0, #23
    f41e:	e623      	b.n	f068 <tcc_init+0x34>
			if (i >= ow_num) {
    f420:	2017      	movs	r0, #23
    f422:	e621      	b.n	f068 <tcc_init+0x34>
			if (i >= ow_num) {
    f424:	2017      	movs	r0, #23
    f426:	e61f      	b.n	f068 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    f428:	2017      	movs	r0, #23
    f42a:	e61d      	b.n	f068 <tcc_init+0x34>
	return STATUS_OK;
    f42c:	2000      	movs	r0, #0
    f42e:	e61b      	b.n	f068 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    f430:	2017      	movs	r0, #23
    f432:	e619      	b.n	f068 <tcc_init+0x34>
    f434:	00020040 	.word	0x00020040
    f438:	00040080 	.word	0x00040080
    f43c:	00080100 	.word	0x00080100

0000f440 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    f440:	0092      	lsls	r2, r2, #2
    f442:	1883      	adds	r3, r0, r2
    f444:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    f446:	4b03      	ldr	r3, [pc, #12]	; (f454 <tcc_register_callback+0x14>)
    f448:	58d3      	ldr	r3, [r2, r3]
    f44a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    f44c:	4313      	orrs	r3, r2
    f44e:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    f450:	2000      	movs	r0, #0
    f452:	4770      	bx	lr
    f454:	000140b4 	.word	0x000140b4

0000f458 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    f458:	b570      	push	{r4, r5, r6, lr}
    f45a:	0004      	movs	r4, r0
    f45c:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    f45e:	6800      	ldr	r0, [r0, #0]
    f460:	4b09      	ldr	r3, [pc, #36]	; (f488 <tcc_enable_callback+0x30>)
    f462:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    f464:	4b09      	ldr	r3, [pc, #36]	; (f48c <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f466:	5c1b      	ldrb	r3, [r3, r0]
    f468:	221f      	movs	r2, #31
    f46a:	401a      	ands	r2, r3
    f46c:	2301      	movs	r3, #1
    f46e:	4093      	lsls	r3, r2
    f470:	4a07      	ldr	r2, [pc, #28]	; (f490 <tcc_enable_callback+0x38>)
    f472:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    f474:	00ad      	lsls	r5, r5, #2
    f476:	4b07      	ldr	r3, [pc, #28]	; (f494 <tcc_enable_callback+0x3c>)
    f478:	58ea      	ldr	r2, [r5, r3]
    f47a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f47c:	4313      	orrs	r3, r2
    f47e:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    f480:	6823      	ldr	r3, [r4, #0]
    f482:	629a      	str	r2, [r3, #40]	; 0x28
}
    f484:	bd70      	pop	{r4, r5, r6, pc}
    f486:	46c0      	nop			; (mov r8, r8)
    f488:	0000eeb5 	.word	0x0000eeb5
    f48c:	000140e4 	.word	0x000140e4
    f490:	e000e100 	.word	0xe000e100
    f494:	000140b4 	.word	0x000140b4

0000f498 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    f498:	b5f0      	push	{r4, r5, r6, r7, lr}
    f49a:	46c6      	mov	lr, r8
    f49c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    f49e:	0080      	lsls	r0, r0, #2
    f4a0:	4b0e      	ldr	r3, [pc, #56]	; (f4dc <_tcc_interrupt_handler+0x44>)
    f4a2:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    f4a4:	683b      	ldr	r3, [r7, #0]
    f4a6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    f4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f4aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f4ac:	4013      	ands	r3, r2
    f4ae:	401e      	ands	r6, r3
    f4b0:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    f4b2:	4b0b      	ldr	r3, [pc, #44]	; (f4e0 <_tcc_interrupt_handler+0x48>)
    f4b4:	4698      	mov	r8, r3
    f4b6:	e002      	b.n	f4be <_tcc_interrupt_handler+0x26>
    f4b8:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    f4ba:	2c30      	cmp	r4, #48	; 0x30
    f4bc:	d00a      	beq.n	f4d4 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    f4be:	4643      	mov	r3, r8
    f4c0:	58e5      	ldr	r5, [r4, r3]
    f4c2:	4235      	tst	r5, r6
    f4c4:	d0f8      	beq.n	f4b8 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    f4c6:	193b      	adds	r3, r7, r4
    f4c8:	685b      	ldr	r3, [r3, #4]
    f4ca:	0038      	movs	r0, r7
    f4cc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    f4ce:	683b      	ldr	r3, [r7, #0]
    f4d0:	62dd      	str	r5, [r3, #44]	; 0x2c
    f4d2:	e7f1      	b.n	f4b8 <_tcc_interrupt_handler+0x20>
		}
	}
}
    f4d4:	bc04      	pop	{r2}
    f4d6:	4690      	mov	r8, r2
    f4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4da:	46c0      	nop			; (mov r8, r8)
    f4dc:	20000580 	.word	0x20000580
    f4e0:	000140b4 	.word	0x000140b4

0000f4e4 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    f4e4:	b510      	push	{r4, lr}
    f4e6:	2000      	movs	r0, #0
    f4e8:	4b01      	ldr	r3, [pc, #4]	; (f4f0 <TCC0_Handler+0xc>)
    f4ea:	4798      	blx	r3
    f4ec:	bd10      	pop	{r4, pc}
    f4ee:	46c0      	nop			; (mov r8, r8)
    f4f0:	0000f499 	.word	0x0000f499

0000f4f4 <TCC1_Handler>:
    f4f4:	b510      	push	{r4, lr}
    f4f6:	2001      	movs	r0, #1
    f4f8:	4b01      	ldr	r3, [pc, #4]	; (f500 <TCC1_Handler+0xc>)
    f4fa:	4798      	blx	r3
    f4fc:	bd10      	pop	{r4, pc}
    f4fe:	46c0      	nop			; (mov r8, r8)
    f500:	0000f499 	.word	0x0000f499

0000f504 <TCC2_Handler>:
    f504:	b510      	push	{r4, lr}
    f506:	2002      	movs	r0, #2
    f508:	4b01      	ldr	r3, [pc, #4]	; (f510 <TCC2_Handler+0xc>)
    f50a:	4798      	blx	r3
    f50c:	bd10      	pop	{r4, pc}
    f50e:	46c0      	nop			; (mov r8, r8)
    f510:	0000f499 	.word	0x0000f499

0000f514 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    f514:	e7fe      	b.n	f514 <Dummy_Handler>
	...

0000f518 <Reset_Handler>:
{
    f518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    f51a:	4a2a      	ldr	r2, [pc, #168]	; (f5c4 <Reset_Handler+0xac>)
    f51c:	4b2a      	ldr	r3, [pc, #168]	; (f5c8 <Reset_Handler+0xb0>)
    f51e:	429a      	cmp	r2, r3
    f520:	d011      	beq.n	f546 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    f522:	001a      	movs	r2, r3
    f524:	4b29      	ldr	r3, [pc, #164]	; (f5cc <Reset_Handler+0xb4>)
    f526:	429a      	cmp	r2, r3
    f528:	d20d      	bcs.n	f546 <Reset_Handler+0x2e>
    f52a:	4a29      	ldr	r2, [pc, #164]	; (f5d0 <Reset_Handler+0xb8>)
    f52c:	3303      	adds	r3, #3
    f52e:	1a9b      	subs	r3, r3, r2
    f530:	089b      	lsrs	r3, r3, #2
    f532:	3301      	adds	r3, #1
    f534:	009b      	lsls	r3, r3, #2
    f536:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    f538:	4823      	ldr	r0, [pc, #140]	; (f5c8 <Reset_Handler+0xb0>)
    f53a:	4922      	ldr	r1, [pc, #136]	; (f5c4 <Reset_Handler+0xac>)
    f53c:	588c      	ldr	r4, [r1, r2]
    f53e:	5084      	str	r4, [r0, r2]
    f540:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    f542:	429a      	cmp	r2, r3
    f544:	d1fa      	bne.n	f53c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    f546:	4a23      	ldr	r2, [pc, #140]	; (f5d4 <Reset_Handler+0xbc>)
    f548:	4b23      	ldr	r3, [pc, #140]	; (f5d8 <Reset_Handler+0xc0>)
    f54a:	429a      	cmp	r2, r3
    f54c:	d20a      	bcs.n	f564 <Reset_Handler+0x4c>
    f54e:	43d3      	mvns	r3, r2
    f550:	4921      	ldr	r1, [pc, #132]	; (f5d8 <Reset_Handler+0xc0>)
    f552:	185b      	adds	r3, r3, r1
    f554:	2103      	movs	r1, #3
    f556:	438b      	bics	r3, r1
    f558:	3304      	adds	r3, #4
    f55a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    f55c:	2100      	movs	r1, #0
    f55e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    f560:	4293      	cmp	r3, r2
    f562:	d1fc      	bne.n	f55e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    f564:	4a1d      	ldr	r2, [pc, #116]	; (f5dc <Reset_Handler+0xc4>)
    f566:	21ff      	movs	r1, #255	; 0xff
    f568:	4b1d      	ldr	r3, [pc, #116]	; (f5e0 <Reset_Handler+0xc8>)
    f56a:	438b      	bics	r3, r1
    f56c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    f56e:	39fd      	subs	r1, #253	; 0xfd
    f570:	2390      	movs	r3, #144	; 0x90
    f572:	005b      	lsls	r3, r3, #1
    f574:	4a1b      	ldr	r2, [pc, #108]	; (f5e4 <Reset_Handler+0xcc>)
    f576:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    f578:	4a1b      	ldr	r2, [pc, #108]	; (f5e8 <Reset_Handler+0xd0>)
    f57a:	78d3      	ldrb	r3, [r2, #3]
    f57c:	2503      	movs	r5, #3
    f57e:	43ab      	bics	r3, r5
    f580:	2402      	movs	r4, #2
    f582:	4323      	orrs	r3, r4
    f584:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    f586:	78d3      	ldrb	r3, [r2, #3]
    f588:	270c      	movs	r7, #12
    f58a:	43bb      	bics	r3, r7
    f58c:	2608      	movs	r6, #8
    f58e:	4333      	orrs	r3, r6
    f590:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    f592:	4b16      	ldr	r3, [pc, #88]	; (f5ec <Reset_Handler+0xd4>)
    f594:	7b98      	ldrb	r0, [r3, #14]
    f596:	2230      	movs	r2, #48	; 0x30
    f598:	4390      	bics	r0, r2
    f59a:	2220      	movs	r2, #32
    f59c:	4310      	orrs	r0, r2
    f59e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    f5a0:	7b99      	ldrb	r1, [r3, #14]
    f5a2:	43b9      	bics	r1, r7
    f5a4:	4331      	orrs	r1, r6
    f5a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    f5a8:	7b9a      	ldrb	r2, [r3, #14]
    f5aa:	43aa      	bics	r2, r5
    f5ac:	4322      	orrs	r2, r4
    f5ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    f5b0:	4a0f      	ldr	r2, [pc, #60]	; (f5f0 <Reset_Handler+0xd8>)
    f5b2:	6853      	ldr	r3, [r2, #4]
    f5b4:	2180      	movs	r1, #128	; 0x80
    f5b6:	430b      	orrs	r3, r1
    f5b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    f5ba:	4b0e      	ldr	r3, [pc, #56]	; (f5f4 <Reset_Handler+0xdc>)
    f5bc:	4798      	blx	r3
        main();
    f5be:	4b0e      	ldr	r3, [pc, #56]	; (f5f8 <Reset_Handler+0xe0>)
    f5c0:	4798      	blx	r3
    f5c2:	e7fe      	b.n	f5c2 <Reset_Handler+0xaa>
    f5c4:	00014a40 	.word	0x00014a40
    f5c8:	20000000 	.word	0x20000000
    f5cc:	200001f0 	.word	0x200001f0
    f5d0:	20000004 	.word	0x20000004
    f5d4:	200001f0 	.word	0x200001f0
    f5d8:	20000fbc 	.word	0x20000fbc
    f5dc:	e000ed00 	.word	0xe000ed00
    f5e0:	00008000 	.word	0x00008000
    f5e4:	41007000 	.word	0x41007000
    f5e8:	41005000 	.word	0x41005000
    f5ec:	41004800 	.word	0x41004800
    f5f0:	41004000 	.word	0x41004000
    f5f4:	00011739 	.word	0x00011739
    f5f8:	0000fe8d 	.word	0x0000fe8d

0000f5fc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    f5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f5fe:	46c6      	mov	lr, r8
    f600:	b500      	push	{lr}
    f602:	000c      	movs	r4, r1
    f604:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    f606:	2800      	cmp	r0, #0
    f608:	d10f      	bne.n	f62a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    f60a:	2a00      	cmp	r2, #0
    f60c:	dd11      	ble.n	f632 <_read+0x36>
    f60e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    f610:	4e09      	ldr	r6, [pc, #36]	; (f638 <_read+0x3c>)
    f612:	4d0a      	ldr	r5, [pc, #40]	; (f63c <_read+0x40>)
    f614:	6830      	ldr	r0, [r6, #0]
    f616:	0021      	movs	r1, r4
    f618:	682b      	ldr	r3, [r5, #0]
    f61a:	4798      	blx	r3
		ptr++;
    f61c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    f61e:	42bc      	cmp	r4, r7
    f620:	d1f8      	bne.n	f614 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    f622:	4640      	mov	r0, r8
    f624:	bc04      	pop	{r2}
    f626:	4690      	mov	r8, r2
    f628:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    f62a:	2301      	movs	r3, #1
    f62c:	425b      	negs	r3, r3
    f62e:	4698      	mov	r8, r3
    f630:	e7f7      	b.n	f622 <_read+0x26>
	for (; len > 0; --len) {
    f632:	4680      	mov	r8, r0
    f634:	e7f5      	b.n	f622 <_read+0x26>
    f636:	46c0      	nop			; (mov r8, r8)
    f638:	20000594 	.word	0x20000594
    f63c:	2000058c 	.word	0x2000058c

0000f640 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    f640:	b5f0      	push	{r4, r5, r6, r7, lr}
    f642:	46c6      	mov	lr, r8
    f644:	b500      	push	{lr}
    f646:	000e      	movs	r6, r1
    f648:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    f64a:	3801      	subs	r0, #1
    f64c:	2802      	cmp	r0, #2
    f64e:	d810      	bhi.n	f672 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    f650:	2a00      	cmp	r2, #0
    f652:	d011      	beq.n	f678 <_write+0x38>
    f654:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    f656:	4b0c      	ldr	r3, [pc, #48]	; (f688 <_write+0x48>)
    f658:	4698      	mov	r8, r3
    f65a:	4f0c      	ldr	r7, [pc, #48]	; (f68c <_write+0x4c>)
    f65c:	4643      	mov	r3, r8
    f65e:	6818      	ldr	r0, [r3, #0]
    f660:	5d31      	ldrb	r1, [r6, r4]
    f662:	683b      	ldr	r3, [r7, #0]
    f664:	4798      	blx	r3
    f666:	2800      	cmp	r0, #0
    f668:	db08      	blt.n	f67c <_write+0x3c>
			return -1;
		}
		++nChars;
    f66a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    f66c:	42a5      	cmp	r5, r4
    f66e:	d1f5      	bne.n	f65c <_write+0x1c>
    f670:	e006      	b.n	f680 <_write+0x40>
		return -1;
    f672:	2401      	movs	r4, #1
    f674:	4264      	negs	r4, r4
    f676:	e003      	b.n	f680 <_write+0x40>
	for (; len != 0; --len) {
    f678:	0014      	movs	r4, r2
    f67a:	e001      	b.n	f680 <_write+0x40>
			return -1;
    f67c:	2401      	movs	r4, #1
    f67e:	4264      	negs	r4, r4
	}
	return nChars;
}
    f680:	0020      	movs	r0, r4
    f682:	bc04      	pop	{r2}
    f684:	4690      	mov	r8, r2
    f686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f688:	20000594 	.word	0x20000594
    f68c:	20000590 	.word	0x20000590

0000f690 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    f690:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    f692:	4a06      	ldr	r2, [pc, #24]	; (f6ac <_sbrk+0x1c>)
    f694:	6812      	ldr	r2, [r2, #0]
    f696:	2a00      	cmp	r2, #0
    f698:	d004      	beq.n	f6a4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    f69a:	4a04      	ldr	r2, [pc, #16]	; (f6ac <_sbrk+0x1c>)
    f69c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    f69e:	18c3      	adds	r3, r0, r3
    f6a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    f6a2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    f6a4:	4902      	ldr	r1, [pc, #8]	; (f6b0 <_sbrk+0x20>)
    f6a6:	4a01      	ldr	r2, [pc, #4]	; (f6ac <_sbrk+0x1c>)
    f6a8:	6011      	str	r1, [r2, #0]
    f6aa:	e7f6      	b.n	f69a <_sbrk+0xa>
    f6ac:	20000288 	.word	0x20000288
    f6b0:	20002fc0 	.word	0x20002fc0

0000f6b4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    f6b4:	2001      	movs	r0, #1
    f6b6:	4240      	negs	r0, r0
    f6b8:	4770      	bx	lr

0000f6ba <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    f6ba:	2380      	movs	r3, #128	; 0x80
    f6bc:	019b      	lsls	r3, r3, #6
    f6be:	604b      	str	r3, [r1, #4]

	return 0;
}
    f6c0:	2000      	movs	r0, #0
    f6c2:	4770      	bx	lr

0000f6c4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    f6c4:	2001      	movs	r0, #1
    f6c6:	4770      	bx	lr

0000f6c8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    f6c8:	2000      	movs	r0, #0
    f6ca:	4770      	bx	lr

0000f6cc <resolve_cb>:
{
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
}

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    f6cc:	b570      	push	{r4, r5, r6, lr}
    f6ce:	b082      	sub	sp, #8
    f6d0:	0005      	movs	r5, r0
    f6d2:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    f6d4:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    f6d6:	21ff      	movs	r1, #255	; 0xff
    f6d8:	400b      	ands	r3, r1
    f6da:	000a      	movs	r2, r1
    f6dc:	4022      	ands	r2, r4
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    f6de:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    f6e0:	9001      	str	r0, [sp, #4]
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    f6e2:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    f6e4:	4001      	ands	r1, r0
    f6e6:	9100      	str	r1, [sp, #0]
    f6e8:	0029      	movs	r1, r5
    f6ea:	4804      	ldr	r0, [pc, #16]	; (f6fc <resolve_cb+0x30>)
    f6ec:	4e04      	ldr	r6, [pc, #16]	; (f700 <resolve_cb+0x34>)
    f6ee:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    f6f0:	0021      	movs	r1, r4
    f6f2:	0028      	movs	r0, r5
    f6f4:	4b03      	ldr	r3, [pc, #12]	; (f704 <resolve_cb+0x38>)
    f6f6:	4798      	blx	r3
}
    f6f8:	b002      	add	sp, #8
    f6fa:	bd70      	pop	{r4, r5, r6, pc}
    f6fc:	00014630 	.word	0x00014630
    f700:	00011941 	.word	0x00011941
    f704:	000082f5 	.word	0x000082f5

0000f708 <socket_cb>:
{
    f708:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    f70a:	4b01      	ldr	r3, [pc, #4]	; (f710 <socket_cb+0x8>)
    f70c:	4798      	blx	r3
}
    f70e:	bd10      	pop	{r4, pc}
    f710:	00008f21 	.word	0x00008f21

0000f714 <start_download>:
{
    f714:	b510      	push	{r4, lr}
    f716:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
    f718:	4b17      	ldr	r3, [pc, #92]	; (f778 <start_download+0x64>)
    f71a:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(WIFI_CONNECTED)) {
    f71c:	079a      	lsls	r2, r3, #30
    f71e:	d513      	bpl.n	f748 <start_download+0x34>
	if (is_state_set(GET_REQUESTED)) {
    f720:	075a      	lsls	r2, r3, #29
    f722:	d415      	bmi.n	f750 <start_download+0x3c>
	if (is_state_set(DOWNLOADING)) {
    f724:	071b      	lsls	r3, r3, #28
    f726:	d417      	bmi.n	f758 <start_download+0x44>
	if(download_CRC == false){
    f728:	4b14      	ldr	r3, [pc, #80]	; (f77c <start_download+0x68>)
    f72a:	781b      	ldrb	r3, [r3, #0]
    f72c:	2b00      	cmp	r3, #0
    f72e:	d017      	beq.n	f760 <start_download+0x4c>
		printf("start_download CRC: sending HTTP request...\r\n");
    f730:	4813      	ldr	r0, [pc, #76]	; (f780 <start_download+0x6c>)
    f732:	4b14      	ldr	r3, [pc, #80]	; (f784 <start_download+0x70>)
    f734:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_CRC_URL, HTTP_METHOD_GET, NULL, NULL);
    f736:	2300      	movs	r3, #0
    f738:	9300      	str	r3, [sp, #0]
    f73a:	2201      	movs	r2, #1
    f73c:	4912      	ldr	r1, [pc, #72]	; (f788 <start_download+0x74>)
    f73e:	4813      	ldr	r0, [pc, #76]	; (f78c <start_download+0x78>)
    f740:	4c13      	ldr	r4, [pc, #76]	; (f790 <start_download+0x7c>)
    f742:	47a0      	blx	r4
}
    f744:	b002      	add	sp, #8
    f746:	bd10      	pop	{r4, pc}
		printf("start_download: Wi-Fi is not connected.\r\n");
    f748:	4812      	ldr	r0, [pc, #72]	; (f794 <start_download+0x80>)
    f74a:	4b0e      	ldr	r3, [pc, #56]	; (f784 <start_download+0x70>)
    f74c:	4798      	blx	r3
		return;
    f74e:	e7f9      	b.n	f744 <start_download+0x30>
		printf("start_download: request is sent already.\r\n");
    f750:	4811      	ldr	r0, [pc, #68]	; (f798 <start_download+0x84>)
    f752:	4b0c      	ldr	r3, [pc, #48]	; (f784 <start_download+0x70>)
    f754:	4798      	blx	r3
		return;
    f756:	e7f5      	b.n	f744 <start_download+0x30>
		printf("start_download: running download already.\r\n");
    f758:	4810      	ldr	r0, [pc, #64]	; (f79c <start_download+0x88>)
    f75a:	4b0a      	ldr	r3, [pc, #40]	; (f784 <start_download+0x70>)
    f75c:	4798      	blx	r3
		return;
    f75e:	e7f1      	b.n	f744 <start_download+0x30>
		printf("start_download: sending HTTP request...\r\n");
    f760:	480f      	ldr	r0, [pc, #60]	; (f7a0 <start_download+0x8c>)
    f762:	4b08      	ldr	r3, [pc, #32]	; (f784 <start_download+0x70>)
    f764:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    f766:	2300      	movs	r3, #0
    f768:	9300      	str	r3, [sp, #0]
    f76a:	2201      	movs	r2, #1
    f76c:	490d      	ldr	r1, [pc, #52]	; (f7a4 <start_download+0x90>)
    f76e:	4807      	ldr	r0, [pc, #28]	; (f78c <start_download+0x78>)
    f770:	4c07      	ldr	r4, [pc, #28]	; (f790 <start_download+0x7c>)
    f772:	47a0      	blx	r4
    f774:	e7e6      	b.n	f744 <start_download+0x30>
    f776:	46c0      	nop			; (mov r8, r8)
    f778:	2000028c 	.word	0x2000028c
    f77c:	2000028d 	.word	0x2000028d
    f780:	0001473c 	.word	0x0001473c
    f784:	00011a5d 	.word	0x00011a5d
    f788:	0001476c 	.word	0x0001476c
    f78c:	20000e88 	.word	0x20000e88
    f790:	00008825 	.word	0x00008825
    f794:	00014660 	.word	0x00014660
    f798:	0001468c 	.word	0x0001468c
    f79c:	000146b8 	.word	0x000146b8
    f7a0:	000146e4 	.word	0x000146e4
    f7a4:	00014710 	.word	0x00014710

0000f7a8 <socket_resolve_handler>:
{
    f7a8:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    f7aa:	4b01      	ldr	r3, [pc, #4]	; (f7b0 <socket_resolve_handler+0x8>)
    f7ac:	4798      	blx	r3
}
    f7ae:	bd10      	pop	{r4, pc}
    f7b0:	00010739 	.word	0x00010739

0000f7b4 <socket_event_handler>:
{
    f7b4:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    f7b6:	4b01      	ldr	r3, [pc, #4]	; (f7bc <socket_event_handler+0x8>)
    f7b8:	4798      	blx	r3
}
    f7ba:	bd10      	pop	{r4, pc}
    f7bc:	000112d9 	.word	0x000112d9

0000f7c0 <wifi_callback>:
{
    f7c0:	b510      	push	{r4, lr}
    f7c2:	b082      	sub	sp, #8
	switch (msg_type) {
    f7c4:	282c      	cmp	r0, #44	; 0x2c
    f7c6:	d003      	beq.n	f7d0 <wifi_callback+0x10>
    f7c8:	2832      	cmp	r0, #50	; 0x32
    f7ca:	d01c      	beq.n	f806 <wifi_callback+0x46>
}
    f7cc:	b002      	add	sp, #8
    f7ce:	bd10      	pop	{r4, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    f7d0:	780b      	ldrb	r3, [r1, #0]
    f7d2:	2b01      	cmp	r3, #1
    f7d4:	d011      	beq.n	f7fa <wifi_callback+0x3a>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    f7d6:	2b00      	cmp	r3, #0
    f7d8:	d1f8      	bne.n	f7cc <wifi_callback+0xc>
			printf("Wi-Fi disconnected\r\n");
    f7da:	4812      	ldr	r0, [pc, #72]	; (f824 <wifi_callback+0x64>)
    f7dc:	4b12      	ldr	r3, [pc, #72]	; (f828 <wifi_callback+0x68>)
    f7de:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    f7e0:	23ff      	movs	r3, #255	; 0xff
    f7e2:	9300      	str	r3, [sp, #0]
    f7e4:	4b11      	ldr	r3, [pc, #68]	; (f82c <wifi_callback+0x6c>)
    f7e6:	2202      	movs	r2, #2
    f7e8:	210b      	movs	r1, #11
    f7ea:	4811      	ldr	r0, [pc, #68]	; (f830 <wifi_callback+0x70>)
    f7ec:	4c11      	ldr	r4, [pc, #68]	; (f834 <wifi_callback+0x74>)
    f7ee:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    f7f0:	2101      	movs	r1, #1
    f7f2:	4811      	ldr	r0, [pc, #68]	; (f838 <wifi_callback+0x78>)
    f7f4:	4b11      	ldr	r3, [pc, #68]	; (f83c <wifi_callback+0x7c>)
    f7f6:	4798      	blx	r3
    f7f8:	e7e8      	b.n	f7cc <wifi_callback+0xc>
			printf("Wi-Fi connected\r\n");
    f7fa:	4811      	ldr	r0, [pc, #68]	; (f840 <wifi_callback+0x80>)
    f7fc:	4b0a      	ldr	r3, [pc, #40]	; (f828 <wifi_callback+0x68>)
    f7fe:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    f800:	4b10      	ldr	r3, [pc, #64]	; (f844 <wifi_callback+0x84>)
    f802:	4798      	blx	r3
    f804:	e7e2      	b.n	f7cc <wifi_callback+0xc>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    f806:	788b      	ldrb	r3, [r1, #2]
    f808:	784a      	ldrb	r2, [r1, #1]
    f80a:	7808      	ldrb	r0, [r1, #0]
    f80c:	78c9      	ldrb	r1, [r1, #3]
    f80e:	9100      	str	r1, [sp, #0]
    f810:	0001      	movs	r1, r0
    f812:	480d      	ldr	r0, [pc, #52]	; (f848 <wifi_callback+0x88>)
    f814:	4c0d      	ldr	r4, [pc, #52]	; (f84c <wifi_callback+0x8c>)
    f816:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    f818:	490d      	ldr	r1, [pc, #52]	; (f850 <wifi_callback+0x90>)
    f81a:	4807      	ldr	r0, [pc, #28]	; (f838 <wifi_callback+0x78>)
    f81c:	4b0d      	ldr	r3, [pc, #52]	; (f854 <wifi_callback+0x94>)
    f81e:	4798      	blx	r3
}
    f820:	e7d4      	b.n	f7cc <wifi_callback+0xc>
    f822:	46c0      	nop			; (mov r8, r8)
    f824:	000147b0 	.word	0x000147b0
    f828:	00011a5d 	.word	0x00011a5d
    f82c:	000147c4 	.word	0x000147c4
    f830:	000147d0 	.word	0x000147d0
    f834:	0000b079 	.word	0x0000b079
    f838:	20000318 	.word	0x20000318
    f83c:	00010f99 	.word	0x00010f99
    f840:	0001479c 	.word	0x0001479c
    f844:	0000b095 	.word	0x0000b095
    f848:	000147dc 	.word	0x000147dc
    f84c:	00011941 	.word	0x00011941
    f850:	00014524 	.word	0x00014524
    f854:	0001078d 	.word	0x0001078d

0000f858 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    f858:	b570      	push	{r4, r5, r6, lr}
    f85a:	b082      	sub	sp, #8
    f85c:	0005      	movs	r5, r0
    f85e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    f860:	2200      	movs	r2, #0
    f862:	466b      	mov	r3, sp
    f864:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    f866:	4c06      	ldr	r4, [pc, #24]	; (f880 <usart_serial_getchar+0x28>)
    f868:	466b      	mov	r3, sp
    f86a:	1d99      	adds	r1, r3, #6
    f86c:	0028      	movs	r0, r5
    f86e:	47a0      	blx	r4
    f870:	2800      	cmp	r0, #0
    f872:	d1f9      	bne.n	f868 <usart_serial_getchar+0x10>

	*c = temp;
    f874:	466b      	mov	r3, sp
    f876:	3306      	adds	r3, #6
    f878:	881b      	ldrh	r3, [r3, #0]
    f87a:	7033      	strb	r3, [r6, #0]
}
    f87c:	b002      	add	sp, #8
    f87e:	bd70      	pop	{r4, r5, r6, pc}
    f880:	0000e4b5 	.word	0x0000e4b5

0000f884 <usart_serial_putchar>:
{
    f884:	b570      	push	{r4, r5, r6, lr}
    f886:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    f888:	b28c      	uxth	r4, r1
    f88a:	4e03      	ldr	r6, [pc, #12]	; (f898 <usart_serial_putchar+0x14>)
    f88c:	0021      	movs	r1, r4
    f88e:	0028      	movs	r0, r5
    f890:	47b0      	blx	r6
    f892:	2800      	cmp	r0, #0
    f894:	d1fa      	bne.n	f88c <usart_serial_putchar+0x8>
}
    f896:	bd70      	pop	{r4, r5, r6, pc}
    f898:	0000e489 	.word	0x0000e489

0000f89c <mqtt_callback>:
{
    f89c:	b570      	push	{r4, r5, r6, lr}
    f89e:	b086      	sub	sp, #24
    f8a0:	0005      	movs	r5, r0
    f8a2:	0014      	movs	r4, r2
	switch (type) {
    f8a4:	2901      	cmp	r1, #1
    f8a6:	d062      	beq.n	f96e <mqtt_callback+0xd2>
    f8a8:	dd41      	ble.n	f92e <mqtt_callback+0x92>
    f8aa:	2905      	cmp	r1, #5
    f8ac:	d100      	bne.n	f8b0 <mqtt_callback+0x14>
    f8ae:	e0be      	b.n	fa2e <mqtt_callback+0x192>
    f8b0:	2906      	cmp	r1, #6
    f8b2:	d000      	beq.n	f8b6 <mqtt_callback+0x1a>
    f8b4:	e0c4      	b.n	fa40 <mqtt_callback+0x1a4>
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    f8b6:	6810      	ldr	r0, [r2, #0]
    f8b8:	2800      	cmp	r0, #0
    f8ba:	d100      	bne.n	f8be <mqtt_callback+0x22>
    f8bc:	e0c0      	b.n	fa40 <mqtt_callback+0x1a4>
    f8be:	6893      	ldr	r3, [r2, #8]
    f8c0:	2b00      	cmp	r3, #0
    f8c2:	d100      	bne.n	f8c6 <mqtt_callback+0x2a>
    f8c4:	e0bc      	b.n	fa40 <mqtt_callback+0x1a4>
      if (!strncmp(data->recv_publish.topic, ACTUATOR_TOPIC, strlen(ACTUATOR_TOPIC)) ) {
    f8c6:	2208      	movs	r2, #8
    f8c8:	495e      	ldr	r1, [pc, #376]	; (fa44 <mqtt_callback+0x1a8>)
    f8ca:	4b5f      	ldr	r3, [pc, #380]	; (fa48 <mqtt_callback+0x1ac>)
    f8cc:	4798      	blx	r3
    f8ce:	1e05      	subs	r5, r0, #0
    f8d0:	d06e      	beq.n	f9b0 <mqtt_callback+0x114>
       if (!strncmp(data->recv_publish.topic, UPGRADE_TOPIC, strlen(UPGRADE_TOPIC)) ) {
    f8d2:	2207      	movs	r2, #7
    f8d4:	495d      	ldr	r1, [pc, #372]	; (fa4c <mqtt_callback+0x1b0>)
    f8d6:	6820      	ldr	r0, [r4, #0]
    f8d8:	4b5b      	ldr	r3, [pc, #364]	; (fa48 <mqtt_callback+0x1ac>)
    f8da:	4798      	blx	r3
    f8dc:	1e05      	subs	r5, r0, #0
    f8de:	d100      	bne.n	f8e2 <mqtt_callback+0x46>
    f8e0:	e087      	b.n	f9f2 <mqtt_callback+0x156>
	   if (!strncmp(data->recv_publish.topic, VERSION_TOPIC, strlen(VERSION_TOPIC)) ) {
    f8e2:	2207      	movs	r2, #7
    f8e4:	495a      	ldr	r1, [pc, #360]	; (fa50 <mqtt_callback+0x1b4>)
    f8e6:	6820      	ldr	r0, [r4, #0]
    f8e8:	4b57      	ldr	r3, [pc, #348]	; (fa48 <mqtt_callback+0x1ac>)
    f8ea:	4798      	blx	r3
    f8ec:	1e05      	subs	r5, r0, #0
    f8ee:	d000      	beq.n	f8f2 <mqtt_callback+0x56>
    f8f0:	e0a6      	b.n	fa40 <mqtt_callback+0x1a4>
		   printf("%s >> ", VERSION_TOPIC);
    f8f2:	4957      	ldr	r1, [pc, #348]	; (fa50 <mqtt_callback+0x1b4>)
    f8f4:	4857      	ldr	r0, [pc, #348]	; (fa54 <mqtt_callback+0x1b8>)
    f8f6:	4b58      	ldr	r3, [pc, #352]	; (fa58 <mqtt_callback+0x1bc>)
    f8f8:	4798      	blx	r3
		   for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f8fa:	68e3      	ldr	r3, [r4, #12]
    f8fc:	2b00      	cmp	r3, #0
    f8fe:	dd07      	ble.n	f910 <mqtt_callback+0x74>
			   printf("%c", data->recv_publish.msg[i]);
    f900:	4e56      	ldr	r6, [pc, #344]	; (fa5c <mqtt_callback+0x1c0>)
    f902:	68a3      	ldr	r3, [r4, #8]
    f904:	5d58      	ldrb	r0, [r3, r5]
    f906:	47b0      	blx	r6
		   for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f908:	3501      	adds	r5, #1
    f90a:	68e3      	ldr	r3, [r4, #12]
    f90c:	42ab      	cmp	r3, r5
    f90e:	dcf8      	bgt.n	f902 <mqtt_callback+0x66>
		   printf("\r\n");
    f910:	4853      	ldr	r0, [pc, #332]	; (fa60 <mqtt_callback+0x1c4>)
    f912:	4b54      	ldr	r3, [pc, #336]	; (fa64 <mqtt_callback+0x1c8>)
    f914:	4798      	blx	r3
		   if(!strncmp(data->recv_publish.msg,"reply", data->recv_publish.msg_size)){
    f916:	68e2      	ldr	r2, [r4, #12]
    f918:	68a0      	ldr	r0, [r4, #8]
    f91a:	4953      	ldr	r1, [pc, #332]	; (fa68 <mqtt_callback+0x1cc>)
    f91c:	4b4a      	ldr	r3, [pc, #296]	; (fa48 <mqtt_callback+0x1ac>)
    f91e:	4798      	blx	r3
    f920:	2800      	cmp	r0, #0
    f922:	d000      	beq.n	f926 <mqtt_callback+0x8a>
    f924:	e08c      	b.n	fa40 <mqtt_callback+0x1a4>
			   reply_firmware_ver=true;
    f926:	2201      	movs	r2, #1
    f928:	4b50      	ldr	r3, [pc, #320]	; (fa6c <mqtt_callback+0x1d0>)
    f92a:	701a      	strb	r2, [r3, #0]
    f92c:	e088      	b.n	fa40 <mqtt_callback+0x1a4>
	switch (type) {
    f92e:	2900      	cmp	r1, #0
    f930:	d000      	beq.n	f934 <mqtt_callback+0x98>
    f932:	e085      	b.n	fa40 <mqtt_callback+0x1a4>
		if (data->sock_connected.result >= 0) {
    f934:	6813      	ldr	r3, [r2, #0]
    f936:	2b00      	cmp	r3, #0
    f938:	db0f      	blt.n	f95a <mqtt_callback+0xbe>
      status = mqtt_connect_broker(module_inst, 1, mqtt_user, mqtt_pass, mqtt_user, NULL, NULL, 0, 2, 0);
    f93a:	4a4d      	ldr	r2, [pc, #308]	; (fa70 <mqtt_callback+0x1d4>)
    f93c:	2300      	movs	r3, #0
    f93e:	9305      	str	r3, [sp, #20]
    f940:	2102      	movs	r1, #2
    f942:	9104      	str	r1, [sp, #16]
    f944:	9303      	str	r3, [sp, #12]
    f946:	9302      	str	r3, [sp, #8]
    f948:	9301      	str	r3, [sp, #4]
    f94a:	9200      	str	r2, [sp, #0]
    f94c:	4b49      	ldr	r3, [pc, #292]	; (fa74 <mqtt_callback+0x1d8>)
    f94e:	3901      	subs	r1, #1
    f950:	4c49      	ldr	r4, [pc, #292]	; (fa78 <mqtt_callback+0x1dc>)
    f952:	47a0      	blx	r4
    f954:	4b49      	ldr	r3, [pc, #292]	; (fa7c <mqtt_callback+0x1e0>)
    f956:	6018      	str	r0, [r3, #0]
    f958:	e072      	b.n	fa40 <mqtt_callback+0x1a4>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    f95a:	4c49      	ldr	r4, [pc, #292]	; (fa80 <mqtt_callback+0x1e4>)
    f95c:	0021      	movs	r1, r4
    f95e:	4849      	ldr	r0, [pc, #292]	; (fa84 <mqtt_callback+0x1e8>)
    f960:	4b3d      	ldr	r3, [pc, #244]	; (fa58 <mqtt_callback+0x1bc>)
    f962:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    f964:	0021      	movs	r1, r4
    f966:	0028      	movs	r0, r5
    f968:	4b47      	ldr	r3, [pc, #284]	; (fa88 <mqtt_callback+0x1ec>)
    f96a:	4798      	blx	r3
    f96c:	e068      	b.n	fa40 <mqtt_callback+0x1a4>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    f96e:	7811      	ldrb	r1, [r2, #0]
    f970:	2900      	cmp	r1, #0
    f972:	d119      	bne.n	f9a8 <mqtt_callback+0x10c>
			status = mqtt_subscribe(module_inst, ACTUATOR_TOPIC, 2);
    f974:	2202      	movs	r2, #2
    f976:	4933      	ldr	r1, [pc, #204]	; (fa44 <mqtt_callback+0x1a8>)
    f978:	4e44      	ldr	r6, [pc, #272]	; (fa8c <mqtt_callback+0x1f0>)
    f97a:	47b0      	blx	r6
    f97c:	4c3f      	ldr	r4, [pc, #252]	; (fa7c <mqtt_callback+0x1e0>)
    f97e:	6020      	str	r0, [r4, #0]
			status = mqtt_subscribe(module_inst, UPGRADE_TOPIC, 2);
    f980:	2202      	movs	r2, #2
    f982:	4932      	ldr	r1, [pc, #200]	; (fa4c <mqtt_callback+0x1b0>)
    f984:	0028      	movs	r0, r5
    f986:	47b0      	blx	r6
    f988:	6020      	str	r0, [r4, #0]
			status = mqtt_subscribe(module_inst, VERSION_TOPIC, 2);
    f98a:	2202      	movs	r2, #2
    f98c:	4930      	ldr	r1, [pc, #192]	; (fa50 <mqtt_callback+0x1b4>)
    f98e:	0028      	movs	r0, r5
    f990:	47b0      	blx	r6
    f992:	6020      	str	r0, [r4, #0]
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    f994:	493e      	ldr	r1, [pc, #248]	; (fa90 <mqtt_callback+0x1f4>)
    f996:	2231      	movs	r2, #49	; 0x31
    f998:	5c8b      	ldrb	r3, [r1, r2]
    f99a:	2002      	movs	r0, #2
    f99c:	4303      	orrs	r3, r0
    f99e:	548b      	strb	r3, [r1, r2]
			printf("Preparation of the chat has been completed.\r\n");
    f9a0:	483c      	ldr	r0, [pc, #240]	; (fa94 <mqtt_callback+0x1f8>)
    f9a2:	4b30      	ldr	r3, [pc, #192]	; (fa64 <mqtt_callback+0x1c8>)
    f9a4:	4798      	blx	r3
    f9a6:	e04b      	b.n	fa40 <mqtt_callback+0x1a4>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    f9a8:	483b      	ldr	r0, [pc, #236]	; (fa98 <mqtt_callback+0x1fc>)
    f9aa:	4b2b      	ldr	r3, [pc, #172]	; (fa58 <mqtt_callback+0x1bc>)
    f9ac:	4798      	blx	r3
    f9ae:	e047      	b.n	fa40 <mqtt_callback+0x1a4>
        printf("%s >> ", ACTUATOR_TOPIC);
    f9b0:	4924      	ldr	r1, [pc, #144]	; (fa44 <mqtt_callback+0x1a8>)
    f9b2:	4828      	ldr	r0, [pc, #160]	; (fa54 <mqtt_callback+0x1b8>)
    f9b4:	4b28      	ldr	r3, [pc, #160]	; (fa58 <mqtt_callback+0x1bc>)
    f9b6:	4798      	blx	r3
		if(!strncmp(data->recv_publish.msg,"true", data->recv_publish.msg_size)){
    f9b8:	68e2      	ldr	r2, [r4, #12]
    f9ba:	4938      	ldr	r1, [pc, #224]	; (fa9c <mqtt_callback+0x200>)
    f9bc:	68a0      	ldr	r0, [r4, #8]
    f9be:	4b22      	ldr	r3, [pc, #136]	; (fa48 <mqtt_callback+0x1ac>)
    f9c0:	4798      	blx	r3
    f9c2:	2800      	cmp	r0, #0
    f9c4:	d111      	bne.n	f9ea <mqtt_callback+0x14e>
    f9c6:	2204      	movs	r2, #4
    f9c8:	4b35      	ldr	r3, [pc, #212]	; (faa0 <mqtt_callback+0x204>)
    f9ca:	619a      	str	r2, [r3, #24]
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f9cc:	68e3      	ldr	r3, [r4, #12]
    f9ce:	2b00      	cmp	r3, #0
    f9d0:	dd07      	ble.n	f9e2 <mqtt_callback+0x146>
          printf("%c", data->recv_publish.msg[i]);
    f9d2:	4e22      	ldr	r6, [pc, #136]	; (fa5c <mqtt_callback+0x1c0>)
    f9d4:	68a3      	ldr	r3, [r4, #8]
    f9d6:	5d58      	ldrb	r0, [r3, r5]
    f9d8:	47b0      	blx	r6
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f9da:	3501      	adds	r5, #1
    f9dc:	68e3      	ldr	r3, [r4, #12]
    f9de:	42ab      	cmp	r3, r5
    f9e0:	dcf8      	bgt.n	f9d4 <mqtt_callback+0x138>
        printf("\r\n");
    f9e2:	481f      	ldr	r0, [pc, #124]	; (fa60 <mqtt_callback+0x1c4>)
    f9e4:	4b1f      	ldr	r3, [pc, #124]	; (fa64 <mqtt_callback+0x1c8>)
    f9e6:	4798      	blx	r3
    f9e8:	e773      	b.n	f8d2 <mqtt_callback+0x36>
		port_base->OUTCLR.reg = pin_mask;
    f9ea:	2204      	movs	r2, #4
    f9ec:	4b2c      	ldr	r3, [pc, #176]	; (faa0 <mqtt_callback+0x204>)
    f9ee:	615a      	str	r2, [r3, #20]
    f9f0:	e7ec      	b.n	f9cc <mqtt_callback+0x130>
	       printf("%s >> ", UPGRADE_TOPIC);
    f9f2:	4916      	ldr	r1, [pc, #88]	; (fa4c <mqtt_callback+0x1b0>)
    f9f4:	4817      	ldr	r0, [pc, #92]	; (fa54 <mqtt_callback+0x1b8>)
    f9f6:	4b18      	ldr	r3, [pc, #96]	; (fa58 <mqtt_callback+0x1bc>)
    f9f8:	4798      	blx	r3
	       for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f9fa:	68e3      	ldr	r3, [r4, #12]
    f9fc:	2b00      	cmp	r3, #0
    f9fe:	dd07      	ble.n	fa10 <mqtt_callback+0x174>
		       printf("%c", data->recv_publish.msg[i]);
    fa00:	4e16      	ldr	r6, [pc, #88]	; (fa5c <mqtt_callback+0x1c0>)
    fa02:	68a3      	ldr	r3, [r4, #8]
    fa04:	5d58      	ldrb	r0, [r3, r5]
    fa06:	47b0      	blx	r6
	       for (int i = 0; i < data->recv_publish.msg_size; i++) {
    fa08:	3501      	adds	r5, #1
    fa0a:	68e3      	ldr	r3, [r4, #12]
    fa0c:	42ab      	cmp	r3, r5
    fa0e:	dcf8      	bgt.n	fa02 <mqtt_callback+0x166>
	       printf("\r\n");
    fa10:	4813      	ldr	r0, [pc, #76]	; (fa60 <mqtt_callback+0x1c4>)
    fa12:	4b14      	ldr	r3, [pc, #80]	; (fa64 <mqtt_callback+0x1c8>)
    fa14:	4798      	blx	r3
		   if(!strncmp(data->recv_publish.msg,"upgrade firmware", data->recv_publish.msg_size)){
    fa16:	68e2      	ldr	r2, [r4, #12]
    fa18:	4922      	ldr	r1, [pc, #136]	; (faa4 <mqtt_callback+0x208>)
    fa1a:	68a0      	ldr	r0, [r4, #8]
    fa1c:	4b0a      	ldr	r3, [pc, #40]	; (fa48 <mqtt_callback+0x1ac>)
    fa1e:	4798      	blx	r3
    fa20:	2800      	cmp	r0, #0
    fa22:	d000      	beq.n	fa26 <mqtt_callback+0x18a>
    fa24:	e75d      	b.n	f8e2 <mqtt_callback+0x46>
			   write_firmware=true;
    fa26:	2201      	movs	r2, #1
    fa28:	4b1f      	ldr	r3, [pc, #124]	; (faa8 <mqtt_callback+0x20c>)
    fa2a:	701a      	strb	r2, [r3, #0]
    fa2c:	e759      	b.n	f8e2 <mqtt_callback+0x46>
		printf("MQTT disconnected\r\n");
    fa2e:	481f      	ldr	r0, [pc, #124]	; (faac <mqtt_callback+0x210>)
    fa30:	4b0c      	ldr	r3, [pc, #48]	; (fa64 <mqtt_callback+0x1c8>)
    fa32:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    fa34:	4916      	ldr	r1, [pc, #88]	; (fa90 <mqtt_callback+0x1f4>)
    fa36:	2231      	movs	r2, #49	; 0x31
    fa38:	5c8b      	ldrb	r3, [r1, r2]
    fa3a:	2002      	movs	r0, #2
    fa3c:	4383      	bics	r3, r0
    fa3e:	548b      	strb	r3, [r1, r2]
}
    fa40:	b006      	add	sp, #24
    fa42:	bd70      	pop	{r4, r5, r6, pc}
    fa44:	00014570 	.word	0x00014570
    fa48:	00011cb1 	.word	0x00011cb1
    fa4c:	0001457c 	.word	0x0001457c
    fa50:	00014584 	.word	0x00014584
    fa54:	000145f0 	.word	0x000145f0
    fa58:	00011941 	.word	0x00011941
    fa5c:	00011975 	.word	0x00011975
    fa60:	00014870 	.word	0x00014870
    fa64:	00011a5d 	.word	0x00011a5d
    fa68:	00014614 	.word	0x00014614
    fa6c:	200003cc 	.word	0x200003cc
    fa70:	20000018 	.word	0x20000018
    fa74:	20000010 	.word	0x20000010
    fa78:	000108a1 	.word	0x000108a1
    fa7c:	20000fb4 	.word	0x20000fb4
    fa80:	00014524 	.word	0x00014524
    fa84:	00014538 	.word	0x00014538
    fa88:	0001078d 	.word	0x0001078d
    fa8c:	00010cf9 	.word	0x00010cf9
    fa90:	20000598 	.word	0x20000598
    fa94:	0001458c 	.word	0x0001458c
    fa98:	000145bc 	.word	0x000145bc
    fa9c:	000145f8 	.word	0x000145f8
    faa0:	41004480 	.word	0x41004480
    faa4:	00014600 	.word	0x00014600
    faa8:	200003d0 	.word	0x200003d0
    faac:	0001461c 	.word	0x0001461c

0000fab0 <wifi_cb>:

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    fab0:	b510      	push	{r4, lr}
    fab2:	b082      	sub	sp, #8
	switch (u8MsgType) {
    fab4:	282c      	cmp	r0, #44	; 0x2c
    fab6:	d003      	beq.n	fac0 <wifi_cb+0x10>
    fab8:	2832      	cmp	r0, #50	; 0x32
    faba:	d02f      	beq.n	fb1c <wifi_cb+0x6c>
		}

		default:
		break;
	}
}
    fabc:	b002      	add	sp, #8
    fabe:	bd10      	pop	{r4, pc}
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    fac0:	780b      	ldrb	r3, [r1, #0]
    fac2:	2b01      	cmp	r3, #1
    fac4:	d01a      	beq.n	fafc <wifi_cb+0x4c>
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    fac6:	2b00      	cmp	r3, #0
    fac8:	d1f8      	bne.n	fabc <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    faca:	481d      	ldr	r0, [pc, #116]	; (fb40 <wifi_cb+0x90>)
    facc:	4b1d      	ldr	r3, [pc, #116]	; (fb44 <wifi_cb+0x94>)
    face:	4798      	blx	r3
	down_state &= ~mask;
    fad0:	4b1d      	ldr	r3, [pc, #116]	; (fb48 <wifi_cb+0x98>)
    fad2:	2200      	movs	r2, #0
    fad4:	569a      	ldrsb	r2, [r3, r2]
    fad6:	23fd      	movs	r3, #253	; 0xfd
    fad8:	4013      	ands	r3, r2
				if (is_state_set(DOWNLOADING)) {
    fada:	0719      	lsls	r1, r3, #28
    fadc:	d414      	bmi.n	fb08 <wifi_cb+0x58>
	down_state &= ~mask;
    fade:	4a1a      	ldr	r2, [pc, #104]	; (fb48 <wifi_cb+0x98>)
    fae0:	7013      	strb	r3, [r2, #0]
	return ((down_state & mask) != 0);
    fae2:	4b19      	ldr	r3, [pc, #100]	; (fb48 <wifi_cb+0x98>)
    fae4:	781b      	ldrb	r3, [r3, #0]
				if (is_state_set(GET_REQUESTED)) {
    fae6:	075a      	lsls	r2, r3, #29
    fae8:	d413      	bmi.n	fb12 <wifi_cb+0x62>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    faea:	23ff      	movs	r3, #255	; 0xff
    faec:	9300      	str	r3, [sp, #0]
    faee:	4b17      	ldr	r3, [pc, #92]	; (fb4c <wifi_cb+0x9c>)
    faf0:	2202      	movs	r2, #2
    faf2:	210b      	movs	r1, #11
    faf4:	4816      	ldr	r0, [pc, #88]	; (fb50 <wifi_cb+0xa0>)
    faf6:	4c17      	ldr	r4, [pc, #92]	; (fb54 <wifi_cb+0xa4>)
    faf8:	47a0      	blx	r4
    fafa:	e7df      	b.n	fabc <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    fafc:	4816      	ldr	r0, [pc, #88]	; (fb58 <wifi_cb+0xa8>)
    fafe:	4b11      	ldr	r3, [pc, #68]	; (fb44 <wifi_cb+0x94>)
    fb00:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
    fb02:	4b16      	ldr	r3, [pc, #88]	; (fb5c <wifi_cb+0xac>)
    fb04:	4798      	blx	r3
    fb06:	e7d9      	b.n	fabc <wifi_cb+0xc>
	down_state &= ~mask;
    fb08:	230a      	movs	r3, #10
    fb0a:	439a      	bics	r2, r3
    fb0c:	4b0e      	ldr	r3, [pc, #56]	; (fb48 <wifi_cb+0x98>)
    fb0e:	701a      	strb	r2, [r3, #0]
    fb10:	e7e7      	b.n	fae2 <wifi_cb+0x32>
    fb12:	2204      	movs	r2, #4
    fb14:	4393      	bics	r3, r2
    fb16:	4a0c      	ldr	r2, [pc, #48]	; (fb48 <wifi_cb+0x98>)
    fb18:	7013      	strb	r3, [r2, #0]
    fb1a:	e7e6      	b.n	faea <wifi_cb+0x3a>
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    fb1c:	788b      	ldrb	r3, [r1, #2]
    fb1e:	784a      	ldrb	r2, [r1, #1]
    fb20:	7808      	ldrb	r0, [r1, #0]
    fb22:	78c9      	ldrb	r1, [r1, #3]
    fb24:	9100      	str	r1, [sp, #0]
    fb26:	0001      	movs	r1, r0
    fb28:	480d      	ldr	r0, [pc, #52]	; (fb60 <wifi_cb+0xb0>)
    fb2a:	4c0e      	ldr	r4, [pc, #56]	; (fb64 <wifi_cb+0xb4>)
    fb2c:	47a0      	blx	r4
	down_state |= mask;
    fb2e:	4a06      	ldr	r2, [pc, #24]	; (fb48 <wifi_cb+0x98>)
    fb30:	7813      	ldrb	r3, [r2, #0]
    fb32:	2102      	movs	r1, #2
    fb34:	430b      	orrs	r3, r1
    fb36:	7013      	strb	r3, [r2, #0]
			start_download();
    fb38:	4b0b      	ldr	r3, [pc, #44]	; (fb68 <wifi_cb+0xb8>)
    fb3a:	4798      	blx	r3
}
    fb3c:	e7be      	b.n	fabc <wifi_cb+0xc>
    fb3e:	46c0      	nop			; (mov r8, r8)
    fb40:	00014818 	.word	0x00014818
    fb44:	00011a5d 	.word	0x00011a5d
    fb48:	2000028c 	.word	0x2000028c
    fb4c:	000147c4 	.word	0x000147c4
    fb50:	000147d0 	.word	0x000147d0
    fb54:	0000b079 	.word	0x0000b079
    fb58:	000147f8 	.word	0x000147f8
    fb5c:	0000b095 	.word	0x0000b095
    fb60:	00014838 	.word	0x00014838
    fb64:	00011941 	.word	0x00011941
    fb68:	0000f715 	.word	0x0000f715

0000fb6c <configure_port_pins>:
{
    fb6c:	b570      	push	{r4, r5, r6, lr}
    fb6e:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    fb70:	ac01      	add	r4, sp, #4
    fb72:	2301      	movs	r3, #1
    fb74:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    fb76:	2600      	movs	r6, #0
    fb78:	70a6      	strb	r6, [r4, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    fb7a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
    fb7c:	0021      	movs	r1, r4
    fb7e:	2022      	movs	r0, #34	; 0x22
    fb80:	4d03      	ldr	r5, [pc, #12]	; (fb90 <configure_port_pins+0x24>)
    fb82:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    fb84:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(B1, &config_port_pin);
    fb86:	0021      	movs	r1, r4
    fb88:	2036      	movs	r0, #54	; 0x36
    fb8a:	47a8      	blx	r5
}
    fb8c:	b002      	add	sp, #8
    fb8e:	bd70      	pop	{r4, r5, r6, pc}
    fb90:	0000d485 	.word	0x0000d485

0000fb94 <write_spi_flash_frm_buf>:
void write_spi_flash_frm_buf(uint32 len){
    fb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb96:	0005      	movs	r5, r0
	at25dfx_chip_wake(&at25dfx_chip);
    fb98:	4c0f      	ldr	r4, [pc, #60]	; (fbd8 <write_spi_flash_frm_buf+0x44>)
    fb9a:	0020      	movs	r0, r4
    fb9c:	4b0f      	ldr	r3, [pc, #60]	; (fbdc <write_spi_flash_frm_buf+0x48>)
    fb9e:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    fba0:	0020      	movs	r0, r4
    fba2:	4b0f      	ldr	r3, [pc, #60]	; (fbe0 <write_spi_flash_frm_buf+0x4c>)
    fba4:	4798      	blx	r3
    fba6:	2800      	cmp	r0, #0
    fba8:	d112      	bne.n	fbd0 <write_spi_flash_frm_buf+0x3c>
	at25dfx_chip_write_buffer(&at25dfx_chip, flash_addr, http_buf + http_buf_read_ptr, len);	// write buffer
    fbaa:	b2ab      	uxth	r3, r5
    fbac:	4a0d      	ldr	r2, [pc, #52]	; (fbe4 <write_spi_flash_frm_buf+0x50>)
    fbae:	6812      	ldr	r2, [r2, #0]
    fbb0:	490d      	ldr	r1, [pc, #52]	; (fbe8 <write_spi_flash_frm_buf+0x54>)
    fbb2:	1852      	adds	r2, r2, r1
    fbb4:	4c0d      	ldr	r4, [pc, #52]	; (fbec <write_spi_flash_frm_buf+0x58>)
    fbb6:	4e08      	ldr	r6, [pc, #32]	; (fbd8 <write_spi_flash_frm_buf+0x44>)
    fbb8:	6821      	ldr	r1, [r4, #0]
    fbba:	0030      	movs	r0, r6
    fbbc:	4f0c      	ldr	r7, [pc, #48]	; (fbf0 <write_spi_flash_frm_buf+0x5c>)
    fbbe:	47b8      	blx	r7
	at25dfx_chip_sleep(&at25dfx_chip);											// back to sleep
    fbc0:	0030      	movs	r0, r6
    fbc2:	4b0c      	ldr	r3, [pc, #48]	; (fbf4 <write_spi_flash_frm_buf+0x60>)
    fbc4:	4798      	blx	r3
	flash_addr = flash_addr + len;
    fbc6:	6823      	ldr	r3, [r4, #0]
    fbc8:	469c      	mov	ip, r3
    fbca:	4465      	add	r5, ip
    fbcc:	6025      	str	r5, [r4, #0]
}
    fbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("Chip didnt wake \r\n");
    fbd0:	4809      	ldr	r0, [pc, #36]	; (fbf8 <write_spi_flash_frm_buf+0x64>)
    fbd2:	4b0a      	ldr	r3, [pc, #40]	; (fbfc <write_spi_flash_frm_buf+0x68>)
    fbd4:	4798      	blx	r3
    fbd6:	e7e8      	b.n	fbaa <write_spi_flash_frm_buf+0x16>
    fbd8:	20000e28 	.word	0x20000e28
    fbdc:	00009c0d 	.word	0x00009c0d
    fbe0:	00009331 	.word	0x00009331
    fbe4:	20000290 	.word	0x20000290
    fbe8:	20000628 	.word	0x20000628
    fbec:	200005cc 	.word	0x200005cc
    fbf0:	0000943d 	.word	0x0000943d
    fbf4:	00009b81 	.word	0x00009b81
    fbf8:	00014860 	.word	0x00014860
    fbfc:	00011a5d 	.word	0x00011a5d

0000fc00 <http_client_callback>:
{
    fc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc02:	46ce      	mov	lr, r9
    fc04:	4647      	mov	r7, r8
    fc06:	b580      	push	{r7, lr}
    fc08:	0014      	movs	r4, r2
	switch (type) {
    fc0a:	2904      	cmp	r1, #4
    fc0c:	d806      	bhi.n	fc1c <http_client_callback+0x1c>
    fc0e:	0089      	lsls	r1, r1, #2
    fc10:	4b86      	ldr	r3, [pc, #536]	; (fe2c <http_client_callback+0x22c>)
    fc12:	585b      	ldr	r3, [r3, r1]
    fc14:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
    fc16:	4886      	ldr	r0, [pc, #536]	; (fe30 <http_client_callback+0x230>)
    fc18:	4b86      	ldr	r3, [pc, #536]	; (fe34 <http_client_callback+0x234>)
    fc1a:	4798      	blx	r3
}
    fc1c:	bc0c      	pop	{r2, r3}
    fc1e:	4690      	mov	r8, r2
    fc20:	4699      	mov	r9, r3
    fc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("http_client_callback: request completed.\r\n");
    fc24:	4884      	ldr	r0, [pc, #528]	; (fe38 <http_client_callback+0x238>)
    fc26:	4b83      	ldr	r3, [pc, #524]	; (fe34 <http_client_callback+0x234>)
    fc28:	4798      	blx	r3
	down_state |= mask;
    fc2a:	4a84      	ldr	r2, [pc, #528]	; (fe3c <http_client_callback+0x23c>)
    fc2c:	7813      	ldrb	r3, [r2, #0]
    fc2e:	2104      	movs	r1, #4
    fc30:	430b      	orrs	r3, r1
    fc32:	7013      	strb	r3, [r2, #0]
    fc34:	e7f2      	b.n	fc1c <http_client_callback+0x1c>
		printf("http_client_callback: received response %u data size %u\r\n",
    fc36:	8811      	ldrh	r1, [r2, #0]
    fc38:	6852      	ldr	r2, [r2, #4]
    fc3a:	4881      	ldr	r0, [pc, #516]	; (fe40 <http_client_callback+0x240>)
    fc3c:	4b81      	ldr	r3, [pc, #516]	; (fe44 <http_client_callback+0x244>)
    fc3e:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    fc40:	8823      	ldrh	r3, [r4, #0]
    fc42:	2bc8      	cmp	r3, #200	; 0xc8
    fc44:	d121      	bne.n	fc8a <http_client_callback+0x8a>
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    fc46:	2380      	movs	r3, #128	; 0x80
    fc48:	00db      	lsls	r3, r3, #3
    fc4a:	6862      	ldr	r2, [r4, #4]
    fc4c:	429a      	cmp	r2, r3
    fc4e:	d8e5      	bhi.n	fc1c <http_client_callback+0x1c>
			printf("Callback: CRC download......\r\n");
    fc50:	487d      	ldr	r0, [pc, #500]	; (fe48 <http_client_callback+0x248>)
    fc52:	4b78      	ldr	r3, [pc, #480]	; (fe34 <http_client_callback+0x234>)
    fc54:	4798      	blx	r3
			dlCRC = *(uint32_t *)data->recv_response.content;
    fc56:	68a3      	ldr	r3, [r4, #8]
    fc58:	681b      	ldr	r3, [r3, #0]
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
    fc5a:	0e19      	lsrs	r1, r3, #24
                    ((dlCRC<<24)&0xff000000); // byte 0 to byte 3
    fc5c:	061a      	lsls	r2, r3, #24
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
    fc5e:	4311      	orrs	r1, r2
                    ((dlCRC<<8)&0xff0000) | // move byte 1 to byte 2
    fc60:	021a      	lsls	r2, r3, #8
    fc62:	20ff      	movs	r0, #255	; 0xff
    fc64:	0400      	lsls	r0, r0, #16
    fc66:	4002      	ands	r2, r0
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
    fc68:	4311      	orrs	r1, r2
    fc6a:	0a1b      	lsrs	r3, r3, #8
    fc6c:	22ff      	movs	r2, #255	; 0xff
    fc6e:	0212      	lsls	r2, r2, #8
    fc70:	4013      	ands	r3, r2
    fc72:	4319      	orrs	r1, r3
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
    fc74:	4b75      	ldr	r3, [pc, #468]	; (fe4c <http_client_callback+0x24c>)
    fc76:	6019      	str	r1, [r3, #0]
			printf("Received %x\r\n", (uint32_t)dlCRC);
    fc78:	4875      	ldr	r0, [pc, #468]	; (fe50 <http_client_callback+0x250>)
    fc7a:	4b72      	ldr	r3, [pc, #456]	; (fe44 <http_client_callback+0x244>)
    fc7c:	4798      	blx	r3
	down_state |= mask;
    fc7e:	4a6f      	ldr	r2, [pc, #444]	; (fe3c <http_client_callback+0x23c>)
    fc80:	7813      	ldrb	r3, [r2, #0]
    fc82:	2110      	movs	r1, #16
    fc84:	430b      	orrs	r3, r1
    fc86:	7013      	strb	r3, [r2, #0]
    fc88:	e7c8      	b.n	fc1c <http_client_callback+0x1c>
    fc8a:	4a6c      	ldr	r2, [pc, #432]	; (fe3c <http_client_callback+0x23c>)
    fc8c:	7813      	ldrb	r3, [r2, #0]
    fc8e:	2120      	movs	r1, #32
    fc90:	430b      	orrs	r3, r1
    fc92:	7013      	strb	r3, [r2, #0]
    fc94:	e7c2      	b.n	fc1c <http_client_callback+0x1c>
		printf("http_client_callback_CHUNKED DATA: received response data size %u\r\n",
    fc96:	6811      	ldr	r1, [r2, #0]
    fc98:	486e      	ldr	r0, [pc, #440]	; (fe54 <http_client_callback+0x254>)
    fc9a:	4b6a      	ldr	r3, [pc, #424]	; (fe44 <http_client_callback+0x244>)
    fc9c:	4798      	blx	r3
		if (firstCRC) {
    fc9e:	4b6e      	ldr	r3, [pc, #440]	; (fe58 <http_client_callback+0x258>)
    fca0:	781b      	ldrb	r3, [r3, #0]
    fca2:	2b00      	cmp	r3, #0
    fca4:	d05a      	beq.n	fd5c <http_client_callback+0x15c>
			crc32_calculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
    fca6:	6821      	ldr	r1, [r4, #0]
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
	*crc = 0;
    fca8:	4d6c      	ldr	r5, [pc, #432]	; (fe5c <http_client_callback+0x25c>)
    fcaa:	2600      	movs	r6, #0
    fcac:	602e      	str	r6, [r5, #0]

	return crc32_recalculate(data, length, crc);
    fcae:	002a      	movs	r2, r5
    fcb0:	6860      	ldr	r0, [r4, #4]
    fcb2:	4b6b      	ldr	r3, [pc, #428]	; (fe60 <http_client_callback+0x260>)
    fcb4:	4798      	blx	r3
			printf("First block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
    fcb6:	682a      	ldr	r2, [r5, #0]
    fcb8:	6821      	ldr	r1, [r4, #0]
    fcba:	486a      	ldr	r0, [pc, #424]	; (fe64 <http_client_callback+0x264>)
    fcbc:	4b61      	ldr	r3, [pc, #388]	; (fe44 <http_client_callback+0x244>)
    fcbe:	4798      	blx	r3
			firstCRC = false;
    fcc0:	4b65      	ldr	r3, [pc, #404]	; (fe58 <http_client_callback+0x258>)
    fcc2:	701e      	strb	r6, [r3, #0]
		if (http_buf_write_ptr + data->recv_chunked_data.length > 2048){
    fcc4:	6822      	ldr	r2, [r4, #0]
    fcc6:	4b68      	ldr	r3, [pc, #416]	; (fe68 <http_client_callback+0x268>)
    fcc8:	681d      	ldr	r5, [r3, #0]
    fcca:	1951      	adds	r1, r2, r5
    fccc:	2380      	movs	r3, #128	; 0x80
    fcce:	011b      	lsls	r3, r3, #4
    fcd0:	4299      	cmp	r1, r3
    fcd2:	d94f      	bls.n	fd74 <http_client_callback+0x174>
			memcpy_ram2ram(http_buf + http_buf_write_ptr,data->recv_chunked_data.data,(2048-http_buf_write_ptr));
    fcd4:	1b5e      	subs	r6, r3, r5
    fcd6:	4b65      	ldr	r3, [pc, #404]	; (fe6c <http_client_callback+0x26c>)
    fcd8:	4698      	mov	r8, r3
    fcda:	18e8      	adds	r0, r5, r3
    fcdc:	0032      	movs	r2, r6
    fcde:	6861      	ldr	r1, [r4, #4]
    fce0:	4f63      	ldr	r7, [pc, #396]	; (fe70 <http_client_callback+0x270>)
    fce2:	47b8      	blx	r7
    fce4:	4b63      	ldr	r3, [pc, #396]	; (fe74 <http_client_callback+0x274>)
    fce6:	469c      	mov	ip, r3
    fce8:	4465      	add	r5, ip
			memcpy_ram2ram(http_buf, data->recv_chunked_data.data + (2048-http_buf_write_ptr), data->recv_chunked_data.length-(2048-http_buf_write_ptr));
    fcea:	6823      	ldr	r3, [r4, #0]
    fcec:	18ea      	adds	r2, r5, r3
    fcee:	6863      	ldr	r3, [r4, #4]
    fcf0:	1999      	adds	r1, r3, r6
    fcf2:	4640      	mov	r0, r8
    fcf4:	47b8      	blx	r7
			http_buf_write_ptr = data->recv_chunked_data.length-(2048-http_buf_write_ptr);
    fcf6:	6823      	ldr	r3, [r4, #0]
    fcf8:	469c      	mov	ip, r3
    fcfa:	4465      	add	r5, ip
    fcfc:	4b5a      	ldr	r3, [pc, #360]	; (fe68 <http_client_callback+0x268>)
    fcfe:	601d      	str	r5, [r3, #0]
		if  (http_buf_write_ptr > http_buf_read_ptr){
    fd00:	4b59      	ldr	r3, [pc, #356]	; (fe68 <http_client_callback+0x268>)
    fd02:	681f      	ldr	r7, [r3, #0]
    fd04:	4b5c      	ldr	r3, [pc, #368]	; (fe78 <http_client_callback+0x278>)
    fd06:	681b      	ldr	r3, [r3, #0]
    fd08:	429f      	cmp	r7, r3
    fd0a:	d93e      	bls.n	fd8a <http_client_callback+0x18a>
			uint8 n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
    fd0c:	1aff      	subs	r7, r7, r3
			for (int i=0 ; i<n ; i++ ){
    fd0e:	043f      	lsls	r7, r7, #16
    fd10:	0e3f      	lsrs	r7, r7, #24
    fd12:	2f00      	cmp	r7, #0
    fd14:	dd0d      	ble.n	fd32 <http_client_callback+0x132>
    fd16:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
    fd18:	4b58      	ldr	r3, [pc, #352]	; (fe7c <http_client_callback+0x27c>)
    fd1a:	4699      	mov	r9, r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fd1c:	4e56      	ldr	r6, [pc, #344]	; (fe78 <http_client_callback+0x278>)
				write_spi_flash_frm_buf(256);
    fd1e:	2080      	movs	r0, #128	; 0x80
    fd20:	0040      	lsls	r0, r0, #1
    fd22:	47c8      	blx	r9
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fd24:	6833      	ldr	r3, [r6, #0]
    fd26:	3301      	adds	r3, #1
    fd28:	33ff      	adds	r3, #255	; 0xff
    fd2a:	6033      	str	r3, [r6, #0]
			for (int i=0 ; i<n ; i++ ){
    fd2c:	3501      	adds	r5, #1
    fd2e:	42bd      	cmp	r5, r7
    fd30:	d1f5      	bne.n	fd1e <http_client_callback+0x11e>
		if (data->recv_chunked_data.is_complete) {
    fd32:	7a23      	ldrb	r3, [r4, #8]
    fd34:	2b00      	cmp	r3, #0
    fd36:	d100      	bne.n	fd3a <http_client_callback+0x13a>
    fd38:	e770      	b.n	fc1c <http_client_callback+0x1c>
	down_state |= mask;
    fd3a:	4a40      	ldr	r2, [pc, #256]	; (fe3c <http_client_callback+0x23c>)
    fd3c:	7813      	ldrb	r3, [r2, #0]
    fd3e:	2110      	movs	r1, #16
    fd40:	430b      	orrs	r3, r1
    fd42:	7013      	strb	r3, [r2, #0]
			if  (http_buf_write_ptr < http_buf_read_ptr){
    fd44:	4b48      	ldr	r3, [pc, #288]	; (fe68 <http_client_callback+0x268>)
    fd46:	6818      	ldr	r0, [r3, #0]
    fd48:	4b4b      	ldr	r3, [pc, #300]	; (fe78 <http_client_callback+0x278>)
    fd4a:	681b      	ldr	r3, [r3, #0]
    fd4c:	4298      	cmp	r0, r3
    fd4e:	d349      	bcc.n	fde4 <http_client_callback+0x1e4>
			else if(http_buf_write_ptr > http_buf_read_ptr){
    fd50:	d800      	bhi.n	fd54 <http_client_callback+0x154>
    fd52:	e763      	b.n	fc1c <http_client_callback+0x1c>
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
    fd54:	1ac0      	subs	r0, r0, r3
    fd56:	4b49      	ldr	r3, [pc, #292]	; (fe7c <http_client_callback+0x27c>)
    fd58:	4798      	blx	r3
    fd5a:	e75f      	b.n	fc1c <http_client_callback+0x1c>
			crc32_recalculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
    fd5c:	4d3f      	ldr	r5, [pc, #252]	; (fe5c <http_client_callback+0x25c>)
    fd5e:	002a      	movs	r2, r5
    fd60:	6821      	ldr	r1, [r4, #0]
    fd62:	6860      	ldr	r0, [r4, #4]
    fd64:	4b3e      	ldr	r3, [pc, #248]	; (fe60 <http_client_callback+0x260>)
    fd66:	4798      	blx	r3
			printf("Block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
    fd68:	682a      	ldr	r2, [r5, #0]
    fd6a:	6821      	ldr	r1, [r4, #0]
    fd6c:	4844      	ldr	r0, [pc, #272]	; (fe80 <http_client_callback+0x280>)
    fd6e:	4b35      	ldr	r3, [pc, #212]	; (fe44 <http_client_callback+0x244>)
    fd70:	4798      	blx	r3
    fd72:	e7a7      	b.n	fcc4 <http_client_callback+0xc4>
			memcpy_ram2ram(http_buf + http_buf_write_ptr, data->recv_chunked_data.data, data->recv_chunked_data.length);
    fd74:	483d      	ldr	r0, [pc, #244]	; (fe6c <http_client_callback+0x26c>)
    fd76:	1828      	adds	r0, r5, r0
    fd78:	6861      	ldr	r1, [r4, #4]
    fd7a:	4b3d      	ldr	r3, [pc, #244]	; (fe70 <http_client_callback+0x270>)
    fd7c:	4798      	blx	r3
			http_buf_write_ptr = http_buf_write_ptr + data->recv_chunked_data.length;
    fd7e:	6823      	ldr	r3, [r4, #0]
    fd80:	469c      	mov	ip, r3
    fd82:	4465      	add	r5, ip
    fd84:	4b38      	ldr	r3, [pc, #224]	; (fe68 <http_client_callback+0x268>)
    fd86:	601d      	str	r5, [r3, #0]
    fd88:	e7ba      	b.n	fd00 <http_client_callback+0x100>
		else if (http_buf_write_ptr < http_buf_read_ptr){
    fd8a:	429f      	cmp	r7, r3
    fd8c:	d2d1      	bcs.n	fd32 <http_client_callback+0x132>
			uint8 n = (2048 - http_buf_read_ptr) / 256;
    fd8e:	2780      	movs	r7, #128	; 0x80
    fd90:	013f      	lsls	r7, r7, #4
    fd92:	1aff      	subs	r7, r7, r3
			for (int i=0 ; i<n ; i++ ){
    fd94:	043f      	lsls	r7, r7, #16
    fd96:	0e3b      	lsrs	r3, r7, #24
    fd98:	4698      	mov	r8, r3
    fd9a:	2b00      	cmp	r3, #0
    fd9c:	dd0c      	ble.n	fdb8 <http_client_callback+0x1b8>
    fd9e:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
    fda0:	4e36      	ldr	r6, [pc, #216]	; (fe7c <http_client_callback+0x27c>)
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fda2:	4f35      	ldr	r7, [pc, #212]	; (fe78 <http_client_callback+0x278>)
				write_spi_flash_frm_buf(256);
    fda4:	2080      	movs	r0, #128	; 0x80
    fda6:	0040      	lsls	r0, r0, #1
    fda8:	47b0      	blx	r6
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fdaa:	683b      	ldr	r3, [r7, #0]
    fdac:	3301      	adds	r3, #1
    fdae:	33ff      	adds	r3, #255	; 0xff
    fdb0:	603b      	str	r3, [r7, #0]
			for (int i=0 ; i<n ; i++ ){
    fdb2:	3501      	adds	r5, #1
    fdb4:	45a8      	cmp	r8, r5
    fdb6:	d1f5      	bne.n	fda4 <http_client_callback+0x1a4>
			http_buf_read_ptr = 0;
    fdb8:	2200      	movs	r2, #0
    fdba:	4b2f      	ldr	r3, [pc, #188]	; (fe78 <http_client_callback+0x278>)
    fdbc:	601a      	str	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
    fdbe:	4b2a      	ldr	r3, [pc, #168]	; (fe68 <http_client_callback+0x268>)
    fdc0:	785b      	ldrb	r3, [r3, #1]
    fdc2:	4698      	mov	r8, r3
    fdc4:	2b00      	cmp	r3, #0
    fdc6:	ddb4      	ble.n	fd32 <http_client_callback+0x132>
    fdc8:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
    fdca:	4e2c      	ldr	r6, [pc, #176]	; (fe7c <http_client_callback+0x27c>)
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fdcc:	4f2a      	ldr	r7, [pc, #168]	; (fe78 <http_client_callback+0x278>)
				write_spi_flash_frm_buf(256);
    fdce:	2080      	movs	r0, #128	; 0x80
    fdd0:	0040      	lsls	r0, r0, #1
    fdd2:	47b0      	blx	r6
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fdd4:	683b      	ldr	r3, [r7, #0]
    fdd6:	3301      	adds	r3, #1
    fdd8:	33ff      	adds	r3, #255	; 0xff
    fdda:	603b      	str	r3, [r7, #0]
			for (int i=0 ; i<n ; i++ ){
    fddc:	3501      	adds	r5, #1
    fdde:	4545      	cmp	r5, r8
    fde0:	d1f5      	bne.n	fdce <http_client_callback+0x1ce>
    fde2:	e7a6      	b.n	fd32 <http_client_callback+0x132>
				http_buf_read_ptr =0;
    fde4:	2200      	movs	r2, #0
    fde6:	4b24      	ldr	r3, [pc, #144]	; (fe78 <http_client_callback+0x278>)
    fde8:	601a      	str	r2, [r3, #0]
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
    fdea:	4b24      	ldr	r3, [pc, #144]	; (fe7c <http_client_callback+0x27c>)
    fdec:	4798      	blx	r3
    fdee:	e715      	b.n	fc1c <http_client_callback+0x1c>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    fdf0:	6811      	ldr	r1, [r2, #0]
    fdf2:	4824      	ldr	r0, [pc, #144]	; (fe84 <http_client_callback+0x284>)
    fdf4:	4b13      	ldr	r3, [pc, #76]	; (fe44 <http_client_callback+0x244>)
    fdf6:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    fdf8:	6823      	ldr	r3, [r4, #0]
    fdfa:	330b      	adds	r3, #11
    fdfc:	d000      	beq.n	fe00 <http_client_callback+0x200>
    fdfe:	e70d      	b.n	fc1c <http_client_callback+0x1c>
	return ((down_state & mask) != 0);
    fe00:	4b0e      	ldr	r3, [pc, #56]	; (fe3c <http_client_callback+0x23c>)
    fe02:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
    fe04:	071a      	lsls	r2, r3, #28
    fe06:	d406      	bmi.n	fe16 <http_client_callback+0x216>
	return ((down_state & mask) != 0);
    fe08:	4b0c      	ldr	r3, [pc, #48]	; (fe3c <http_client_callback+0x23c>)
    fe0a:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    fe0c:	075a      	lsls	r2, r3, #29
    fe0e:	d407      	bmi.n	fe20 <http_client_callback+0x220>
			start_download();
    fe10:	4b1d      	ldr	r3, [pc, #116]	; (fe88 <http_client_callback+0x288>)
    fe12:	4798      	blx	r3
    fe14:	e702      	b.n	fc1c <http_client_callback+0x1c>
	down_state &= ~mask;
    fe16:	2208      	movs	r2, #8
    fe18:	4393      	bics	r3, r2
    fe1a:	4a08      	ldr	r2, [pc, #32]	; (fe3c <http_client_callback+0x23c>)
    fe1c:	7013      	strb	r3, [r2, #0]
    fe1e:	e7f3      	b.n	fe08 <http_client_callback+0x208>
    fe20:	2204      	movs	r2, #4
    fe22:	4393      	bics	r3, r2
    fe24:	4a05      	ldr	r2, [pc, #20]	; (fe3c <http_client_callback+0x23c>)
    fe26:	7013      	strb	r3, [r2, #0]
    fe28:	e7f2      	b.n	fe10 <http_client_callback+0x210>
    fe2a:	46c0      	nop			; (mov r8, r8)
    fe2c:	000140e8 	.word	0x000140e8
    fe30:	000140fc 	.word	0x000140fc
    fe34:	00011a5d 	.word	0x00011a5d
    fe38:	00014134 	.word	0x00014134
    fe3c:	2000028c 	.word	0x2000028c
    fe40:	00014160 	.word	0x00014160
    fe44:	00011941 	.word	0x00011941
    fe48:	0001419c 	.word	0x0001419c
    fe4c:	20000fb0 	.word	0x20000fb0
    fe50:	000141bc 	.word	0x000141bc
    fe54:	000141cc 	.word	0x000141cc
    fe58:	2000000c 	.word	0x2000000c
    fe5c:	20000fac 	.word	0x20000fac
    fe60:	0000ced5 	.word	0x0000ced5
    fe64:	00014210 	.word	0x00014210
    fe68:	20000294 	.word	0x20000294
    fe6c:	20000628 	.word	0x20000628
    fe70:	000117a9 	.word	0x000117a9
    fe74:	fffff800 	.word	0xfffff800
    fe78:	20000290 	.word	0x20000290
    fe7c:	0000fb95 	.word	0x0000fb95
    fe80:	00014230 	.word	0x00014230
    fe84:	0001424c 	.word	0x0001424c
    fe88:	0000f715 	.word	0x0000f715

0000fe8c <main>:
	//flash_addr = 0x00000;

}

int main (void)
{
    fe8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe8e:	46d6      	mov	lr, sl
    fe90:	464f      	mov	r7, r9
    fe92:	4646      	mov	r6, r8
    fe94:	b5c0      	push	{r6, r7, lr}
    fe96:	b0ac      	sub	sp, #176	; 0xb0
	int8_t ret;
	
	char topic[strlen(MAIN_CHAT_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];
	
	
	system_init();
    fe98:	4bcc      	ldr	r3, [pc, #816]	; (101cc <main+0x340>)
    fe9a:	4798      	blx	r3
	down_state = NOT_READY;
    fe9c:	2400      	movs	r4, #0
    fe9e:	2600      	movs	r6, #0
    fea0:	4bcb      	ldr	r3, [pc, #812]	; (101d0 <main+0x344>)
    fea2:	701c      	strb	r4, [r3, #0]
	cpu_irq_enable();
    fea4:	2501      	movs	r5, #1
    fea6:	4bcb      	ldr	r3, [pc, #812]	; (101d4 <main+0x348>)
    fea8:	701d      	strb	r5, [r3, #0]
    feaa:	f3bf 8f5f 	dmb	sy
    feae:	b662      	cpsie	i
	init_state();
	system_interrupt_enable_global();
	configure_port_pins();
    feb0:	4bc9      	ldr	r3, [pc, #804]	; (101d8 <main+0x34c>)
    feb2:	4798      	blx	r3
	delay_init();
    feb4:	4bc9      	ldr	r3, [pc, #804]	; (101dc <main+0x350>)
    feb6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    feb8:	aa14      	add	r2, sp, #80	; 0x50
    feba:	2380      	movs	r3, #128	; 0x80
    febc:	05db      	lsls	r3, r3, #23
    febe:	9314      	str	r3, [sp, #80]	; 0x50
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    fec0:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    fec2:	23ff      	movs	r3, #255	; 0xff
    fec4:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    fec6:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    fec8:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    feca:	3bdb      	subs	r3, #219	; 0xdb
    fecc:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
    fece:	3301      	adds	r3, #1
    fed0:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
    fed2:	3301      	adds	r3, #1
    fed4:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    fed6:	3301      	adds	r3, #1
    fed8:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    feda:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    fedc:	3305      	adds	r3, #5
    fede:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    fee0:	3301      	adds	r3, #1
    fee2:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    fee4:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    fee6:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    fee8:	2300      	movs	r3, #0
    feea:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    feec:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    feee:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    fef0:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
    fef2:	2313      	movs	r3, #19
    fef4:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    fef6:	7756      	strb	r6, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    fef8:	23c4      	movs	r3, #196	; 0xc4
    fefa:	039b      	lsls	r3, r3, #14
    fefc:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    fefe:	2301      	movs	r3, #1
    ff00:	425b      	negs	r3, r3
    ff02:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    ff04:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    ff06:	4bb6      	ldr	r3, [pc, #728]	; (101e0 <main+0x354>)
    ff08:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    ff0a:	4bb6      	ldr	r3, [pc, #728]	; (101e4 <main+0x358>)
    ff0c:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    ff0e:	23e1      	movs	r3, #225	; 0xe1
    ff10:	025b      	lsls	r3, r3, #9
    ff12:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    ff14:	4cb4      	ldr	r4, [pc, #720]	; (101e8 <main+0x35c>)
    ff16:	4bb5      	ldr	r3, [pc, #724]	; (101ec <main+0x360>)
    ff18:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    ff1a:	49b5      	ldr	r1, [pc, #724]	; (101f0 <main+0x364>)
    ff1c:	4bb5      	ldr	r3, [pc, #724]	; (101f4 <main+0x368>)
    ff1e:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    ff20:	49b5      	ldr	r1, [pc, #724]	; (101f8 <main+0x36c>)
    ff22:	4bb6      	ldr	r3, [pc, #728]	; (101fc <main+0x370>)
    ff24:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    ff26:	49b6      	ldr	r1, [pc, #728]	; (10200 <main+0x374>)
    ff28:	0020      	movs	r0, r4
    ff2a:	4bb6      	ldr	r3, [pc, #728]	; (10204 <main+0x378>)
    ff2c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    ff2e:	4fb6      	ldr	r7, [pc, #728]	; (10208 <main+0x37c>)
    ff30:	683b      	ldr	r3, [r7, #0]
    ff32:	6898      	ldr	r0, [r3, #8]
    ff34:	2100      	movs	r1, #0
    ff36:	4eb5      	ldr	r6, [pc, #724]	; (1020c <main+0x380>)
    ff38:	47b0      	blx	r6
	setbuf(stdin, NULL);
    ff3a:	683b      	ldr	r3, [r7, #0]
    ff3c:	6858      	ldr	r0, [r3, #4]
    ff3e:	2100      	movs	r1, #0
    ff40:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    ff42:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    ff44:	0030      	movs	r0, r6
    ff46:	4bb2      	ldr	r3, [pc, #712]	; (10210 <main+0x384>)
    ff48:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ff4a:	231f      	movs	r3, #31
    ff4c:	4018      	ands	r0, r3
    ff4e:	4085      	lsls	r5, r0
    ff50:	4bb0      	ldr	r3, [pc, #704]	; (10214 <main+0x388>)
    ff52:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    ff54:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    ff56:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    ff58:	2b00      	cmp	r3, #0
    ff5a:	d1fc      	bne.n	ff56 <main+0xca>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    ff5c:	6833      	ldr	r3, [r6, #0]
    ff5e:	2202      	movs	r2, #2
    ff60:	4313      	orrs	r3, r2
    ff62:	6033      	str	r3, [r6, #0]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    ff64:	ac14      	add	r4, sp, #80	; 0x50
    ff66:	2500      	movs	r5, #0
    ff68:	7025      	strb	r5, [r4, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    ff6a:	4bab      	ldr	r3, [pc, #684]	; (10218 <main+0x38c>)
    ff6c:	685b      	ldr	r3, [r3, #4]
    ff6e:	06db      	lsls	r3, r3, #27
    ff70:	0f1b      	lsrs	r3, r3, #28
    ff72:	70a3      	strb	r3, [r4, #2]
	config->disable_cache     = false;
    ff74:	70e5      	strb	r5, [r4, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    ff76:	7125      	strb	r5, [r4, #4]
	config.manual_page_write = false;
    ff78:	7065      	strb	r5, [r4, #1]
	nvm_set_config(&config);
    ff7a:	0020      	movs	r0, r4
    ff7c:	4ba7      	ldr	r3, [pc, #668]	; (1021c <main+0x390>)
    ff7e:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    ff80:	2601      	movs	r6, #1
    ff82:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    ff84:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    ff86:	60a5      	str	r5, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    ff88:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    ff8a:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    ff8c:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    ff8e:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    ff90:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    ff92:	2324      	movs	r3, #36	; 0x24
    ff94:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    ff96:	220c      	movs	r2, #12
    ff98:	2100      	movs	r1, #0
    ff9a:	a81a      	add	r0, sp, #104	; 0x68
    ff9c:	4ba0      	ldr	r3, [pc, #640]	; (10220 <main+0x394>)
    ff9e:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    ffa0:	4ba0      	ldr	r3, [pc, #640]	; (10224 <main+0x398>)
    ffa2:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    ffa4:	2380      	movs	r3, #128	; 0x80
    ffa6:	025b      	lsls	r3, r3, #9
    ffa8:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    ffaa:	4b9f      	ldr	r3, [pc, #636]	; (10228 <main+0x39c>)
    ffac:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    ffae:	4b9f      	ldr	r3, [pc, #636]	; (1022c <main+0x3a0>)
    ffb0:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    ffb2:	4b9f      	ldr	r3, [pc, #636]	; (10230 <main+0x3a4>)
    ffb4:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    ffb6:	4b9f      	ldr	r3, [pc, #636]	; (10234 <main+0x3a8>)
    ffb8:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    ffba:	4d9f      	ldr	r5, [pc, #636]	; (10238 <main+0x3ac>)
    ffbc:	0022      	movs	r2, r4
    ffbe:	499f      	ldr	r1, [pc, #636]	; (1023c <main+0x3b0>)
    ffc0:	0028      	movs	r0, r5
    ffc2:	4b9f      	ldr	r3, [pc, #636]	; (10240 <main+0x3b4>)
    ffc4:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    ffc6:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    ffc8:	0020      	movs	r0, r4
    ffca:	4b91      	ldr	r3, [pc, #580]	; (10210 <main+0x384>)
    ffcc:	4798      	blx	r3
    ffce:	231f      	movs	r3, #31
    ffd0:	4018      	ands	r0, r3
    ffd2:	4086      	lsls	r6, r0
    ffd4:	4b8f      	ldr	r3, [pc, #572]	; (10214 <main+0x388>)
    ffd6:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    ffd8:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    ffda:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    ffdc:	2b00      	cmp	r3, #0
    ffde:	d1fc      	bne.n	ffda <main+0x14e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    ffe0:	6823      	ldr	r3, [r4, #0]
    ffe2:	2202      	movs	r2, #2
    ffe4:	4313      	orrs	r3, r2
    ffe6:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
    ffe8:	4c96      	ldr	r4, [pc, #600]	; (10244 <main+0x3b8>)
    ffea:	2304      	movs	r3, #4
    ffec:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
    ffee:	3303      	adds	r3, #3
    fff0:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
    fff2:	4b91      	ldr	r3, [pc, #580]	; (10238 <main+0x3ac>)
    fff4:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    fff6:	a904      	add	r1, sp, #16
    fff8:	2301      	movs	r3, #1
    fffa:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    fffc:	2200      	movs	r2, #0
    fffe:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
   10000:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
   10002:	2007      	movs	r0, #7
   10004:	4b90      	ldr	r3, [pc, #576]	; (10248 <main+0x3bc>)
   10006:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
   10008:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
   1000a:	09d1      	lsrs	r1, r2, #7
		return NULL;
   1000c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   1000e:	2900      	cmp	r1, #0
   10010:	d104      	bne.n	1001c <main+0x190>
		return &(ports[port_index]->Group[group_index]);
   10012:	0953      	lsrs	r3, r2, #5
   10014:	01db      	lsls	r3, r3, #7
   10016:	498d      	ldr	r1, [pc, #564]	; (1024c <main+0x3c0>)
   10018:	468c      	mov	ip, r1
   1001a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1001c:	211f      	movs	r1, #31
   1001e:	4011      	ands	r1, r2
   10020:	2201      	movs	r2, #1
   10022:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   10024:	619a      	str	r2, [r3, #24]
	sw_timer_get_config_defaults(&swt_conf);
   10026:	ac14      	add	r4, sp, #80	; 0x50
   10028:	0020      	movs	r0, r4
   1002a:	4b89      	ldr	r3, [pc, #548]	; (10250 <main+0x3c4>)
   1002c:	4798      	blx	r3
	sw_timer_init(&swt_module_inst_mqtt, &swt_conf);
   1002e:	4d89      	ldr	r5, [pc, #548]	; (10254 <main+0x3c8>)
   10030:	0021      	movs	r1, r4
   10032:	0028      	movs	r0, r5
   10034:	4b88      	ldr	r3, [pc, #544]	; (10258 <main+0x3cc>)
   10036:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst_mqtt);
   10038:	0028      	movs	r0, r5
   1003a:	4b88      	ldr	r3, [pc, #544]	; (1025c <main+0x3d0>)
   1003c:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
   1003e:	0020      	movs	r0, r4
   10040:	4b87      	ldr	r3, [pc, #540]	; (10260 <main+0x3d4>)
   10042:	4798      	blx	r3
	mqtt_conf.timer_inst = &swt_module_inst_mqtt;
   10044:	6065      	str	r5, [r4, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
   10046:	4b87      	ldr	r3, [pc, #540]	; (10264 <main+0x3d8>)
   10048:	60e3      	str	r3, [r4, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1004a:	2380      	movs	r3, #128	; 0x80
   1004c:	6123      	str	r3, [r4, #16]
    mqtt_conf.port = MQTT_PORT;
   1004e:	4b86      	ldr	r3, [pc, #536]	; (10268 <main+0x3dc>)
   10050:	8023      	strh	r3, [r4, #0]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   10052:	0021      	movs	r1, r4
   10054:	4885      	ldr	r0, [pc, #532]	; (1026c <main+0x3e0>)
   10056:	4b86      	ldr	r3, [pc, #536]	; (10270 <main+0x3e4>)
   10058:	4798      	blx	r3
   1005a:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   1005c:	db27      	blt.n	100ae <main+0x222>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   1005e:	4985      	ldr	r1, [pc, #532]	; (10274 <main+0x3e8>)
   10060:	4882      	ldr	r0, [pc, #520]	; (1026c <main+0x3e0>)
   10062:	4b85      	ldr	r3, [pc, #532]	; (10278 <main+0x3ec>)
   10064:	4798      	blx	r3
   10066:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   10068:	db25      	blt.n	100b6 <main+0x22a>
	configure_nvm();
	configure_spi_flash();
	configure_timer();
	
	configure_mqtt();
	nm_bsp_init();
   1006a:	4b84      	ldr	r3, [pc, #528]	; (1027c <main+0x3f0>)
   1006c:	4798      	blx	r3
	printf("User : %s\r\n", mqtt_user);
   1006e:	4d84      	ldr	r5, [pc, #528]	; (10280 <main+0x3f4>)
   10070:	0029      	movs	r1, r5
   10072:	4884      	ldr	r0, [pc, #528]	; (10284 <main+0x3f8>)
   10074:	4c84      	ldr	r4, [pc, #528]	; (10288 <main+0x3fc>)
   10076:	47a0      	blx	r4
	printf("Password : %s\r\n", mqtt_user);
   10078:	0029      	movs	r1, r5
   1007a:	4884      	ldr	r0, [pc, #528]	; (1028c <main+0x400>)
   1007c:	47a0      	blx	r4
	sprintf(topic, "%s", MAIN_CHAT_TOPIC);
   1007e:	a914      	add	r1, sp, #80	; 0x50
   10080:	4b83      	ldr	r3, [pc, #524]	; (10290 <main+0x404>)
   10082:	681a      	ldr	r2, [r3, #0]
   10084:	9214      	str	r2, [sp, #80]	; 0x50
   10086:	791b      	ldrb	r3, [r3, #4]
   10088:	710b      	strb	r3, [r1, #4]
	printf("Topic : %s\r\n", topic);
   1008a:	4882      	ldr	r0, [pc, #520]	; (10294 <main+0x408>)
   1008c:	47a0      	blx	r4

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1008e:	2218      	movs	r2, #24
   10090:	2100      	movs	r1, #0
   10092:	a826      	add	r0, sp, #152	; 0x98
   10094:	4b62      	ldr	r3, [pc, #392]	; (10220 <main+0x394>)
   10096:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
   10098:	4b7f      	ldr	r3, [pc, #508]	; (10298 <main+0x40c>)
   1009a:	9326      	str	r3, [sp, #152]	; 0x98
	ret = m2m_wifi_init(&param);
   1009c:	a826      	add	r0, sp, #152	; 0x98
   1009e:	4b7f      	ldr	r3, [pc, #508]	; (1029c <main+0x410>)
   100a0:	4798      	blx	r3
   100a2:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
   100a4:	d00b      	beq.n	100be <main+0x232>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
   100a6:	487e      	ldr	r0, [pc, #504]	; (102a0 <main+0x414>)
   100a8:	4b77      	ldr	r3, [pc, #476]	; (10288 <main+0x3fc>)
   100aa:	4798      	blx	r3
   100ac:	e7fe      	b.n	100ac <main+0x220>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
   100ae:	487d      	ldr	r0, [pc, #500]	; (102a4 <main+0x418>)
   100b0:	4b75      	ldr	r3, [pc, #468]	; (10288 <main+0x3fc>)
   100b2:	4798      	blx	r3
   100b4:	e7fe      	b.n	100b4 <main+0x228>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
   100b6:	487c      	ldr	r0, [pc, #496]	; (102a8 <main+0x41c>)
   100b8:	4b73      	ldr	r3, [pc, #460]	; (10288 <main+0x3fc>)
   100ba:	4798      	blx	r3
   100bc:	e7fe      	b.n	100bc <main+0x230>
		while (1) { /* Loop forever. */
		}
	}

	/* Initialize socket interface. */
	socketInit();
   100be:	4b7b      	ldr	r3, [pc, #492]	; (102ac <main+0x420>)
   100c0:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   100c2:	497b      	ldr	r1, [pc, #492]	; (102b0 <main+0x424>)
   100c4:	487b      	ldr	r0, [pc, #492]	; (102b4 <main+0x428>)
   100c6:	4b7c      	ldr	r3, [pc, #496]	; (102b8 <main+0x42c>)
   100c8:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   100ca:	23ff      	movs	r3, #255	; 0xff
   100cc:	9300      	str	r3, [sp, #0]
   100ce:	4b7b      	ldr	r3, [pc, #492]	; (102bc <main+0x430>)
   100d0:	2202      	movs	r2, #2
   100d2:	210b      	movs	r1, #11
   100d4:	487a      	ldr	r0, [pc, #488]	; (102c0 <main+0x434>)
   100d6:	4c7b      	ldr	r4, [pc, #492]	; (102c4 <main+0x438>)
   100d8:	47a0      	blx	r4
	MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	/* ~~~~~~~~~~~~~End MQTT init~~~~~~~~~~~~~~ */
	
	write_firmware = false; 
   100da:	2200      	movs	r2, #0
   100dc:	4b7a      	ldr	r3, [pc, #488]	; (102c8 <main+0x43c>)
   100de:	701a      	strb	r2, [r3, #0]
	
	while (1) {
		/* Handle pending events from network controller. */
		sint8 wifiStatus = m2m_wifi_handle_events(NULL);
   100e0:	4f7a      	ldr	r7, [pc, #488]	; (102cc <main+0x440>)
		/* Try to read user input from USART. */
		usart_read_job(&usart_instance, &uart_ch_buffer);
   100e2:	4e7b      	ldr	r6, [pc, #492]	; (102d0 <main+0x444>)
   100e4:	4b40      	ldr	r3, [pc, #256]	; (101e8 <main+0x35c>)
   100e6:	4699      	mov	r9, r3
   100e8:	e007      	b.n	100fa <main+0x26e>
			sprintf(pub_text, "%d", buttonLevel);
			mqtt_publish(&mqtt_inst, SENSOR_TOPIC, pub_text, 1, 2, 0);
		}

		// reply with version number
		if(reply_firmware_ver)
   100ea:	4b7a      	ldr	r3, [pc, #488]	; (102d4 <main+0x448>)
   100ec:	781b      	ldrb	r3, [r3, #0]
   100ee:	2b00      	cmp	r3, #0
   100f0:	d12a      	bne.n	10148 <main+0x2bc>
			sprintf(pub_text, "%s", FIRMWARE_VERSION);
			mqtt_publish(&mqtt_inst, VERSIONREADOUT_TOPIC, pub_text, strlen(FIRMWARE_VERSION), 2, 0);
			reply_firmware_ver=false;
		}
		// firmware upgrade
		if (write_firmware) {
   100f2:	4b75      	ldr	r3, [pc, #468]	; (102c8 <main+0x43c>)
   100f4:	781b      	ldrb	r3, [r3, #0]
   100f6:	2b00      	cmp	r3, #0
   100f8:	d138      	bne.n	1016c <main+0x2e0>
		sint8 wifiStatus = m2m_wifi_handle_events(NULL);
   100fa:	2000      	movs	r0, #0
   100fc:	47b8      	blx	r7
		usart_read_job(&usart_instance, &uart_ch_buffer);
   100fe:	0031      	movs	r1, r6
   10100:	4648      	mov	r0, r9
   10102:	4b75      	ldr	r3, [pc, #468]	; (102d8 <main+0x44c>)
   10104:	4798      	blx	r3
		sw_timer_task(&swt_module_inst_mqtt);
   10106:	4853      	ldr	r0, [pc, #332]	; (10254 <main+0x3c8>)
   10108:	4b74      	ldr	r3, [pc, #464]	; (102dc <main+0x450>)
   1010a:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
   1010c:	4b74      	ldr	r3, [pc, #464]	; (102e0 <main+0x454>)
   1010e:	6a1b      	ldr	r3, [r3, #32]
   10110:	025b      	lsls	r3, r3, #9
   10112:	0fdb      	lsrs	r3, r3, #31
		if( port_pin_get_input_level(B1) != buttonLevel )
   10114:	4a73      	ldr	r2, [pc, #460]	; (102e4 <main+0x458>)
   10116:	7812      	ldrb	r2, [r2, #0]
   10118:	4293      	cmp	r3, r2
   1011a:	d0e6      	beq.n	100ea <main+0x25e>
   1011c:	4b70      	ldr	r3, [pc, #448]	; (102e0 <main+0x454>)
   1011e:	6a1a      	ldr	r2, [r3, #32]
   10120:	0252      	lsls	r2, r2, #9
   10122:	0fd2      	lsrs	r2, r2, #31
			buttonLevel = port_pin_get_input_level(B1);
   10124:	4b6f      	ldr	r3, [pc, #444]	; (102e4 <main+0x458>)
   10126:	701a      	strb	r2, [r3, #0]
			sprintf(pub_text, "%d", buttonLevel);
   10128:	4c6f      	ldr	r4, [pc, #444]	; (102e8 <main+0x45c>)
   1012a:	4970      	ldr	r1, [pc, #448]	; (102ec <main+0x460>)
   1012c:	0020      	movs	r0, r4
   1012e:	4b70      	ldr	r3, [pc, #448]	; (102f0 <main+0x464>)
   10130:	4798      	blx	r3
			mqtt_publish(&mqtt_inst, SENSOR_TOPIC, pub_text, 1, 2, 0);
   10132:	2300      	movs	r3, #0
   10134:	9301      	str	r3, [sp, #4]
   10136:	3302      	adds	r3, #2
   10138:	9300      	str	r3, [sp, #0]
   1013a:	3b01      	subs	r3, #1
   1013c:	0022      	movs	r2, r4
   1013e:	496d      	ldr	r1, [pc, #436]	; (102f4 <main+0x468>)
   10140:	484a      	ldr	r0, [pc, #296]	; (1026c <main+0x3e0>)
   10142:	4c6d      	ldr	r4, [pc, #436]	; (102f8 <main+0x46c>)
   10144:	47a0      	blx	r4
   10146:	e7d0      	b.n	100ea <main+0x25e>
			sprintf(pub_text, "%s", FIRMWARE_VERSION);
   10148:	4a67      	ldr	r2, [pc, #412]	; (102e8 <main+0x45c>)
   1014a:	4b6c      	ldr	r3, [pc, #432]	; (102fc <main+0x470>)
   1014c:	6819      	ldr	r1, [r3, #0]
   1014e:	6011      	str	r1, [r2, #0]
   10150:	889b      	ldrh	r3, [r3, #4]
   10152:	8093      	strh	r3, [r2, #4]
			mqtt_publish(&mqtt_inst, VERSIONREADOUT_TOPIC, pub_text, strlen(FIRMWARE_VERSION), 2, 0);
   10154:	2400      	movs	r4, #0
   10156:	9401      	str	r4, [sp, #4]
   10158:	2302      	movs	r3, #2
   1015a:	9300      	str	r3, [sp, #0]
   1015c:	3303      	adds	r3, #3
   1015e:	4968      	ldr	r1, [pc, #416]	; (10300 <main+0x474>)
   10160:	4842      	ldr	r0, [pc, #264]	; (1026c <main+0x3e0>)
   10162:	4d65      	ldr	r5, [pc, #404]	; (102f8 <main+0x46c>)
   10164:	47a8      	blx	r5
			reply_firmware_ver=false;
   10166:	4b5b      	ldr	r3, [pc, #364]	; (102d4 <main+0x448>)
   10168:	701c      	strb	r4, [r3, #0]
   1016a:	e7c2      	b.n	100f2 <main+0x266>
			socketDeinit();
   1016c:	4b65      	ldr	r3, [pc, #404]	; (10304 <main+0x478>)
   1016e:	4798      	blx	r3
			mqtt_deinit(&mqtt_inst);
   10170:	483e      	ldr	r0, [pc, #248]	; (1026c <main+0x3e0>)
   10172:	4b65      	ldr	r3, [pc, #404]	; (10308 <main+0x47c>)
   10174:	4798      	blx	r3
			ret = m2m_wifi_deinit(&param);
   10176:	a826      	add	r0, sp, #152	; 0x98
   10178:	4b64      	ldr	r3, [pc, #400]	; (1030c <main+0x480>)
   1017a:	4798      	blx	r3
   1017c:	1e01      	subs	r1, r0, #0
			if (M2M_SUCCESS != ret) {
   1017e:	d003      	beq.n	10188 <main+0x2fc>
				printf("main: m2m_wifi_deinit call error!(%d)\r\n", ret);
   10180:	4863      	ldr	r0, [pc, #396]	; (10310 <main+0x484>)
   10182:	4b41      	ldr	r3, [pc, #260]	; (10288 <main+0x3fc>)
   10184:	4798      	blx	r3
   10186:	e7fe      	b.n	10186 <main+0x2fa>
	http_client_get_config_defaults(&httpc_conf);
   10188:	a804      	add	r0, sp, #16
   1018a:	4b62      	ldr	r3, [pc, #392]	; (10314 <main+0x488>)
   1018c:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   1018e:	2380      	movs	r3, #128	; 0x80
   10190:	00db      	lsls	r3, r3, #3
   10192:	9308      	str	r3, [sp, #32]
	httpc_conf.timer_inst = &swt_module_inst;
   10194:	4b60      	ldr	r3, [pc, #384]	; (10318 <main+0x48c>)
   10196:	9305      	str	r3, [sp, #20]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   10198:	a904      	add	r1, sp, #16
   1019a:	4860      	ldr	r0, [pc, #384]	; (1031c <main+0x490>)
   1019c:	4b60      	ldr	r3, [pc, #384]	; (10320 <main+0x494>)
   1019e:	4798      	blx	r3
   101a0:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
   101a2:	da03      	bge.n	101ac <main+0x320>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   101a4:	485f      	ldr	r0, [pc, #380]	; (10324 <main+0x498>)
   101a6:	4b38      	ldr	r3, [pc, #224]	; (10288 <main+0x3fc>)
   101a8:	4798      	blx	r3
   101aa:	e7fe      	b.n	101aa <main+0x31e>
		http_client_register_callback(&http_client_module_inst, http_client_callback);
   101ac:	495e      	ldr	r1, [pc, #376]	; (10328 <main+0x49c>)
   101ae:	485b      	ldr	r0, [pc, #364]	; (1031c <main+0x490>)
   101b0:	4b5e      	ldr	r3, [pc, #376]	; (1032c <main+0x4a0>)
   101b2:	4798      	blx	r3
			/* ~~~~~~~~~~~~~~~~Begin HTTP client init~~~~~~~~~~~~~~~~~~*/
			configure_http_client();
			
			//memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
			
			param.pfAppWifiCb = wifi_cb;
   101b4:	4b5e      	ldr	r3, [pc, #376]	; (10330 <main+0x4a4>)
   101b6:	9326      	str	r3, [sp, #152]	; 0x98
			
			ret = m2m_wifi_init(&param);
   101b8:	a826      	add	r0, sp, #152	; 0x98
   101ba:	4b38      	ldr	r3, [pc, #224]	; (1029c <main+0x410>)
   101bc:	4798      	blx	r3
   101be:	1e01      	subs	r1, r0, #0
			if (M2M_SUCCESS != ret) {
   101c0:	d100      	bne.n	101c4 <main+0x338>
   101c2:	e0b9      	b.n	10338 <main+0x4ac>
				printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   101c4:	485b      	ldr	r0, [pc, #364]	; (10334 <main+0x4a8>)
   101c6:	4b30      	ldr	r3, [pc, #192]	; (10288 <main+0x3fc>)
   101c8:	4798      	blx	r3
   101ca:	e7fe      	b.n	101ca <main+0x33e>
   101cc:	0000ee89 	.word	0x0000ee89
   101d0:	2000028c 	.word	0x2000028c
   101d4:	2000000a 	.word	0x2000000a
   101d8:	0000fb6d 	.word	0x0000fb6d
   101dc:	00009c99 	.word	0x00009c99
   101e0:	002a0003 	.word	0x002a0003
   101e4:	002b0003 	.word	0x002b0003
   101e8:	20000598 	.word	0x20000598
   101ec:	20000594 	.word	0x20000594
   101f0:	0000f885 	.word	0x0000f885
   101f4:	20000590 	.word	0x20000590
   101f8:	0000f859 	.word	0x0000f859
   101fc:	2000058c 	.word	0x2000058c
   10200:	42001800 	.word	0x42001800
   10204:	0000e145 	.word	0x0000e145
   10208:	20000020 	.word	0x20000020
   1020c:	00011a95 	.word	0x00011a95
   10210:	0000d85d 	.word	0x0000d85d
   10214:	e000e100 	.word	0xe000e100
   10218:	41004000 	.word	0x41004000
   1021c:	0000d1ed 	.word	0x0000d1ed
   10220:	000117df 	.word	0x000117df
   10224:	0001d4c0 	.word	0x0001d4c0
   10228:	00100002 	.word	0x00100002
   1022c:	00110002 	.word	0x00110002
   10230:	00120002 	.word	0x00120002
   10234:	00130002 	.word	0x00130002
   10238:	20000f70 	.word	0x20000f70
   1023c:	42000c00 	.word	0x42000c00
   10240:	0000d8ed 	.word	0x0000d8ed
   10244:	20000e28 	.word	0x20000e28
   10248:	0000d485 	.word	0x0000d485
   1024c:	41004400 	.word	0x41004400
   10250:	00009181 	.word	0x00009181
   10254:	200005d0 	.word	0x200005d0
   10258:	0000918d 	.word	0x0000918d
   1025c:	00009239 	.word	0x00009239
   10260:	00010635 	.word	0x00010635
   10264:	20000298 	.word	0x20000298
   10268:	00004574 	.word	0x00004574
   1026c:	20000318 	.word	0x20000318
   10270:	00010659 	.word	0x00010659
   10274:	0000f89d 	.word	0x0000f89d
   10278:	00010729 	.word	0x00010729
   1027c:	00009d59 	.word	0x00009d59
   10280:	20000018 	.word	0x20000018
   10284:	000142e4 	.word	0x000142e4
   10288:	00011941 	.word	0x00011941
   1028c:	000142f0 	.word	0x000142f0
   10290:	00014300 	.word	0x00014300
   10294:	00014308 	.word	0x00014308
   10298:	0000f7c1 	.word	0x0000f7c1
   1029c:	0000ac8d 	.word	0x0000ac8d
   102a0:	00014318 	.word	0x00014318
   102a4:	0001427c 	.word	0x0001427c
   102a8:	000142b0 	.word	0x000142b0
   102ac:	0000c8d5 	.word	0x0000c8d5
   102b0:	0000f7a9 	.word	0x0000f7a9
   102b4:	0000f7b5 	.word	0x0000f7b5
   102b8:	0000c955 	.word	0x0000c955
   102bc:	000147c4 	.word	0x000147c4
   102c0:	000147d0 	.word	0x000147d0
   102c4:	0000b079 	.word	0x0000b079
   102c8:	200003d0 	.word	0x200003d0
   102cc:	0000addd 	.word	0x0000addd
   102d0:	200003ce 	.word	0x200003ce
   102d4:	200003cc 	.word	0x200003cc
   102d8:	0000e575 	.word	0x0000e575
   102dc:	000092d1 	.word	0x000092d1
   102e0:	41004480 	.word	0x41004480
   102e4:	2000000b 	.word	0x2000000b
   102e8:	2000038c 	.word	0x2000038c
   102ec:	00014340 	.word	0x00014340
   102f0:	00011c01 	.word	0x00011c01
   102f4:	00014344 	.word	0x00014344
   102f8:	00010b51 	.word	0x00010b51
   102fc:	0001434c 	.word	0x0001434c
   10300:	00014354 	.word	0x00014354
   10304:	0000c919 	.word	0x0000c919
   10308:	000106e5 	.word	0x000106e5
   1030c:	0000adc1 	.word	0x0000adc1
   10310:	00014364 	.word	0x00014364
   10314:	00008181 	.word	0x00008181
   10318:	20000e30 	.word	0x20000e30
   1031c:	20000e88 	.word	0x20000e88
   10320:	000081a9 	.word	0x000081a9
   10324:	0001438c 	.word	0x0001438c
   10328:	0000fc01 	.word	0x0000fc01
   1032c:	0000825d 	.word	0x0000825d
   10330:	0000fab1 	.word	0x0000fab1
   10334:	000143d4 	.word	0x000143d4
				while (1) {
				}
			}
			socketInit();
   10338:	4b6c      	ldr	r3, [pc, #432]	; (104ec <main+0x660>)
   1033a:	4798      	blx	r3
			registerSocketCallback(socket_cb, resolve_cb);
   1033c:	496c      	ldr	r1, [pc, #432]	; (104f0 <main+0x664>)
   1033e:	486d      	ldr	r0, [pc, #436]	; (104f4 <main+0x668>)
   10340:	4b6d      	ldr	r3, [pc, #436]	; (104f8 <main+0x66c>)
   10342:	4798      	blx	r3
			printf("Survived http client setup\r\n");
   10344:	486d      	ldr	r0, [pc, #436]	; (104fc <main+0x670>)
   10346:	4b6e      	ldr	r3, [pc, #440]	; (10500 <main+0x674>)
   10348:	4798      	blx	r3
	uint8_t read_buffer[NVMCTRL_PAGE_SIZE]={0};
   1034a:	2240      	movs	r2, #64	; 0x40
   1034c:	2100      	movs	r1, #0
   1034e:	a804      	add	r0, sp, #16
   10350:	4b6c      	ldr	r3, [pc, #432]	; (10504 <main+0x678>)
   10352:	4798      	blx	r3
		error_code = nvm_read_buffer(FW_STAT_ADDRESS, read_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   10354:	25fe      	movs	r5, #254	; 0xfe
   10356:	01ed      	lsls	r5, r5, #7
   10358:	4c6b      	ldr	r4, [pc, #428]	; (10508 <main+0x67c>)
   1035a:	2240      	movs	r2, #64	; 0x40
   1035c:	a904      	add	r1, sp, #16
   1035e:	0028      	movs	r0, r5
   10360:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
   10362:	2805      	cmp	r0, #5
   10364:	d0f9      	beq.n	1035a <main+0x4ce>
	thisFW.executing_image		= read_buffer[4];
   10366:	ab04      	add	r3, sp, #16
   10368:	791b      	ldrb	r3, [r3, #4]
   1036a:	4698      	mov	r8, r3
			Firmware_Status_t fw_status = getFWStat();
			if (fw_status.executing_image == 1) {
				fw_status.downloaded_image = 2;
			}
			else {
				fw_status.downloaded_image = 1;
   1036c:	1e5d      	subs	r5, r3, #1
   1036e:	426a      	negs	r2, r5
   10370:	416a      	adcs	r2, r5
   10372:	1c55      	adds	r5, r2, #1
			}
			printf("Executing image: %d, DL to: %d\r\n", fw_status.executing_image, fw_status.downloaded_image);
   10374:	002a      	movs	r2, r5
   10376:	4641      	mov	r1, r8
   10378:	4864      	ldr	r0, [pc, #400]	; (1050c <main+0x680>)
   1037a:	4b65      	ldr	r3, [pc, #404]	; (10510 <main+0x684>)
   1037c:	4699      	mov	r9, r3
   1037e:	4798      	blx	r3
			firstCRC=true;
   10380:	2201      	movs	r2, #1
   10382:	4b64      	ldr	r3, [pc, #400]	; (10514 <main+0x688>)
   10384:	701a      	strb	r2, [r3, #0]
	flash_addr = 0x40000 * slot; //Starting addr on flash where downloaded file is stored
   10386:	4e64      	ldr	r6, [pc, #400]	; (10518 <main+0x68c>)
   10388:	04ab      	lsls	r3, r5, #18
   1038a:	6033      	str	r3, [r6, #0]
	at25dfx_chip_wake(&at25dfx_chip);
   1038c:	4c63      	ldr	r4, [pc, #396]	; (1051c <main+0x690>)
   1038e:	0020      	movs	r0, r4
   10390:	4b63      	ldr	r3, [pc, #396]	; (10520 <main+0x694>)
   10392:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
   10394:	0020      	movs	r0, r4
   10396:	4b63      	ldr	r3, [pc, #396]	; (10524 <main+0x698>)
   10398:	4798      	blx	r3
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
   1039a:	2100      	movs	r1, #0
   1039c:	0020      	movs	r0, r4
   1039e:	4b62      	ldr	r3, [pc, #392]	; (10528 <main+0x69c>)
   103a0:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr, AT25DFX_BLOCK_SIZE_64KB);	// erase block
   103a2:	2202      	movs	r2, #2
   103a4:	6831      	ldr	r1, [r6, #0]
   103a6:	0020      	movs	r0, r4
   103a8:	4f60      	ldr	r7, [pc, #384]	; (1052c <main+0x6a0>)
   103aa:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x10000, AT25DFX_BLOCK_SIZE_64KB);
   103ac:	6833      	ldr	r3, [r6, #0]
   103ae:	2280      	movs	r2, #128	; 0x80
   103b0:	0252      	lsls	r2, r2, #9
   103b2:	4694      	mov	ip, r2
   103b4:	4463      	add	r3, ip
   103b6:	0019      	movs	r1, r3
   103b8:	2202      	movs	r2, #2
   103ba:	0020      	movs	r0, r4
   103bc:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x20000, AT25DFX_BLOCK_SIZE_64KB);
   103be:	6833      	ldr	r3, [r6, #0]
   103c0:	2280      	movs	r2, #128	; 0x80
   103c2:	0292      	lsls	r2, r2, #10
   103c4:	4694      	mov	ip, r2
   103c6:	4463      	add	r3, ip
   103c8:	0019      	movs	r1, r3
   103ca:	2202      	movs	r2, #2
   103cc:	0020      	movs	r0, r4
   103ce:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x30000, AT25DFX_BLOCK_SIZE_64KB);
   103d0:	6831      	ldr	r1, [r6, #0]
   103d2:	23c0      	movs	r3, #192	; 0xc0
   103d4:	029b      	lsls	r3, r3, #10
   103d6:	469c      	mov	ip, r3
   103d8:	4461      	add	r1, ip
   103da:	2202      	movs	r2, #2
   103dc:	0020      	movs	r0, r4
   103de:	47b8      	blx	r7
	printf("download_firmware: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   103e0:	4c53      	ldr	r4, [pc, #332]	; (10530 <main+0x6a4>)
   103e2:	0021      	movs	r1, r4
   103e4:	4853      	ldr	r0, [pc, #332]	; (10534 <main+0x6a8>)
   103e6:	47c8      	blx	r9
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   103e8:	23ff      	movs	r3, #255	; 0xff
   103ea:	9300      	str	r3, [sp, #0]
   103ec:	4b52      	ldr	r3, [pc, #328]	; (10538 <main+0x6ac>)
   103ee:	2202      	movs	r2, #2
   103f0:	210b      	movs	r1, #11
   103f2:	0020      	movs	r0, r4
   103f4:	4c51      	ldr	r4, [pc, #324]	; (1053c <main+0x6b0>)
   103f6:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   103f8:	4b51      	ldr	r3, [pc, #324]	; (10540 <main+0x6b4>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   103fa:	781a      	ldrb	r2, [r3, #0]
   103fc:	2330      	movs	r3, #48	; 0x30
   103fe:	421a      	tst	r2, r3
   10400:	d10b      	bne.n	1041a <main+0x58e>
		m2m_wifi_handle_events(NULL);
   10402:	4f50      	ldr	r7, [pc, #320]	; (10544 <main+0x6b8>)
		sw_timer_task(&swt_module_inst);
   10404:	4e50      	ldr	r6, [pc, #320]	; (10548 <main+0x6bc>)
   10406:	4c51      	ldr	r4, [pc, #324]	; (1054c <main+0x6c0>)
		m2m_wifi_handle_events(NULL);
   10408:	2000      	movs	r0, #0
   1040a:	47b8      	blx	r7
		sw_timer_task(&swt_module_inst);
   1040c:	0030      	movs	r0, r6
   1040e:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   10410:	4b4b      	ldr	r3, [pc, #300]	; (10540 <main+0x6b4>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   10412:	781b      	ldrb	r3, [r3, #0]
   10414:	2230      	movs	r2, #48	; 0x30
   10416:	421a      	tst	r2, r3
   10418:	d0f6      	beq.n	10408 <main+0x57c>
	printf("download_firmware: done.\r\n");
   1041a:	484d      	ldr	r0, [pc, #308]	; (10550 <main+0x6c4>)
   1041c:	4b38      	ldr	r3, [pc, #224]	; (10500 <main+0x674>)
   1041e:	4798      	blx	r3
	printf("Calculated CRC: %x\r\n", (uint32_t)crcChecker);
   10420:	4b4c      	ldr	r3, [pc, #304]	; (10554 <main+0x6c8>)
   10422:	6819      	ldr	r1, [r3, #0]
   10424:	484c      	ldr	r0, [pc, #304]	; (10558 <main+0x6cc>)
   10426:	4b3a      	ldr	r3, [pc, #232]	; (10510 <main+0x684>)
   10428:	4798      	blx	r3
	down_state &= ~mask;
   1042a:	4c45      	ldr	r4, [pc, #276]	; (10540 <main+0x6b4>)
   1042c:	7823      	ldrb	r3, [r4, #0]
   1042e:	223c      	movs	r2, #60	; 0x3c
   10430:	4393      	bics	r3, r2
   10432:	7023      	strb	r3, [r4, #0]
	download_CRC = true;
   10434:	3a3b      	subs	r2, #59	; 0x3b
   10436:	4b49      	ldr	r3, [pc, #292]	; (1055c <main+0x6d0>)
   10438:	701a      	strb	r2, [r3, #0]
	start_download();
   1043a:	4b49      	ldr	r3, [pc, #292]	; (10560 <main+0x6d4>)
   1043c:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1043e:	7822      	ldrb	r2, [r4, #0]
   10440:	2330      	movs	r3, #48	; 0x30
   10442:	421a      	tst	r2, r3
   10444:	d10b      	bne.n	1045e <main+0x5d2>
		m2m_wifi_handle_events(NULL);
   10446:	4f3f      	ldr	r7, [pc, #252]	; (10544 <main+0x6b8>)
		sw_timer_task(&swt_module_inst);
   10448:	4e3f      	ldr	r6, [pc, #252]	; (10548 <main+0x6bc>)
   1044a:	4c40      	ldr	r4, [pc, #256]	; (1054c <main+0x6c0>)
		m2m_wifi_handle_events(NULL);
   1044c:	2000      	movs	r0, #0
   1044e:	47b8      	blx	r7
		sw_timer_task(&swt_module_inst);
   10450:	0030      	movs	r0, r6
   10452:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   10454:	4b3a      	ldr	r3, [pc, #232]	; (10540 <main+0x6b4>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   10456:	781b      	ldrb	r3, [r3, #0]
   10458:	2230      	movs	r2, #48	; 0x30
   1045a:	421a      	tst	r2, r3
   1045c:	d0f6      	beq.n	1044c <main+0x5c0>
	download_CRC = false;
   1045e:	2200      	movs	r2, #0
   10460:	4b3e      	ldr	r3, [pc, #248]	; (1055c <main+0x6d0>)
   10462:	701a      	strb	r2, [r3, #0]
			download_firmware(fw_status.downloaded_image);
			printf("\n\rMain: Done downloading firmware and CRC\n\r");
   10464:	483f      	ldr	r0, [pc, #252]	; (10564 <main+0x6d8>)
   10466:	4b2a      	ldr	r3, [pc, #168]	; (10510 <main+0x684>)
   10468:	4798      	blx	r3
			if (dlCRC == crcChecker){
   1046a:	4b3f      	ldr	r3, [pc, #252]	; (10568 <main+0x6dc>)
   1046c:	681a      	ldr	r2, [r3, #0]
   1046e:	4b39      	ldr	r3, [pc, #228]	; (10554 <main+0x6c8>)
   10470:	681b      	ldr	r3, [r3, #0]
   10472:	429a      	cmp	r2, r3
   10474:	d136      	bne.n	104e4 <main+0x658>
				printf("\n\rMain: CRC MATCHED! starting firmware upgrade. \n\r");
   10476:	483d      	ldr	r0, [pc, #244]	; (1056c <main+0x6e0>)
   10478:	4b25      	ldr	r3, [pc, #148]	; (10510 <main+0x684>)
   1047a:	4798      	blx	r3
				*(uint32_t*)fw_status.signature = (uint32_t)crcChecker; //replace with checksum of downloaded image
   1047c:	4b35      	ldr	r3, [pc, #212]	; (10554 <main+0x6c8>)
   1047e:	681e      	ldr	r6, [r3, #0]
   10480:	0a32      	lsrs	r2, r6, #8
   10482:	0c37      	lsrs	r7, r6, #16
   10484:	b2f3      	uxtb	r3, r6
   10486:	469a      	mov	sl, r3
   10488:	b2d3      	uxtb	r3, r2
   1048a:	4699      	mov	r9, r3
   1048c:	b2ff      	uxtb	r7, r7
   1048e:	0e36      	lsrs	r6, r6, #24
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE]={0};
   10490:	ac04      	add	r4, sp, #16
   10492:	2240      	movs	r2, #64	; 0x40
   10494:	2100      	movs	r1, #0
   10496:	0020      	movs	r0, r4
   10498:	4b1a      	ldr	r3, [pc, #104]	; (10504 <main+0x678>)
   1049a:	4798      	blx	r3
	page_buffer[0] = thisFW.signature[0];
   1049c:	4653      	mov	r3, sl
   1049e:	7023      	strb	r3, [r4, #0]
	page_buffer[1] = thisFW.signature[1];
   104a0:	464b      	mov	r3, r9
   104a2:	7063      	strb	r3, [r4, #1]
	page_buffer[2] = thisFW.signature[2];
   104a4:	70a7      	strb	r7, [r4, #2]
	page_buffer[3] = thisFW.signature[3];
   104a6:	70e6      	strb	r6, [r4, #3]
	page_buffer[4] = thisFW.executing_image;
   104a8:	4643      	mov	r3, r8
   104aa:	7123      	strb	r3, [r4, #4]
	page_buffer[5] = thisFW.downloaded_image;
   104ac:	7165      	strb	r5, [r4, #5]
	page_buffer[6] = thisFW.writenew_image;
   104ae:	2301      	movs	r3, #1
   104b0:	71a3      	strb	r3, [r4, #6]
		error_code = nvm_erase_row(FW_STAT_ADDRESS);			// Erase FW stat row
   104b2:	25fe      	movs	r5, #254	; 0xfe
   104b4:	01ed      	lsls	r5, r5, #7
   104b6:	4c2e      	ldr	r4, [pc, #184]	; (10570 <main+0x6e4>)
   104b8:	0028      	movs	r0, r5
   104ba:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
   104bc:	2805      	cmp	r0, #5
   104be:	d0fb      	beq.n	104b8 <main+0x62c>
		error_code = nvm_write_buffer(FW_STAT_ADDRESS, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   104c0:	25fe      	movs	r5, #254	; 0xfe
   104c2:	01ed      	lsls	r5, r5, #7
   104c4:	2440      	movs	r4, #64	; 0x40
   104c6:	0022      	movs	r2, r4
   104c8:	a904      	add	r1, sp, #16
   104ca:	0028      	movs	r0, r5
   104cc:	4b29      	ldr	r3, [pc, #164]	; (10574 <main+0x6e8>)
   104ce:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
   104d0:	2805      	cmp	r0, #5
   104d2:	d0f8      	beq.n	104c6 <main+0x63a>
  __ASM volatile ("dsb");
   104d4:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   104d8:	4a27      	ldr	r2, [pc, #156]	; (10578 <main+0x6ec>)
   104da:	4b28      	ldr	r3, [pc, #160]	; (1057c <main+0x6f0>)
   104dc:	60da      	str	r2, [r3, #12]
   104de:	f3bf 8f4f 	dsb	sy
   104e2:	e7fe      	b.n	104e2 <main+0x656>
				fw_status.writenew_image = 1;  // write image flag
				writeFWStat(fw_status);
			} 
			else {
				printf("\n\r Main: CRC Check Fail!\n\r");
   104e4:	4826      	ldr	r0, [pc, #152]	; (10580 <main+0x6f4>)
   104e6:	4b0a      	ldr	r3, [pc, #40]	; (10510 <main+0x684>)
   104e8:	4798      	blx	r3
   104ea:	e7f3      	b.n	104d4 <main+0x648>
   104ec:	0000c8d5 	.word	0x0000c8d5
   104f0:	0000f6cd 	.word	0x0000f6cd
   104f4:	0000f709 	.word	0x0000f709
   104f8:	0000c955 	.word	0x0000c955
   104fc:	00014400 	.word	0x00014400
   10500:	00011a5d 	.word	0x00011a5d
   10504:	000117df 	.word	0x000117df
   10508:	0000d3bd 	.word	0x0000d3bd
   1050c:	0001441c 	.word	0x0001441c
   10510:	00011941 	.word	0x00011941
   10514:	2000000c 	.word	0x2000000c
   10518:	200005cc 	.word	0x200005cc
   1051c:	20000e28 	.word	0x20000e28
   10520:	00009c0d 	.word	0x00009c0d
   10524:	00009331 	.word	0x00009331
   10528:	00009a91 	.word	0x00009a91
   1052c:	00009879 	.word	0x00009879
   10530:	000147d0 	.word	0x000147d0
   10534:	00014440 	.word	0x00014440
   10538:	000147c4 	.word	0x000147c4
   1053c:	0000b079 	.word	0x0000b079
   10540:	2000028c 	.word	0x2000028c
   10544:	0000addd 	.word	0x0000addd
   10548:	20000e30 	.word	0x20000e30
   1054c:	000092d1 	.word	0x000092d1
   10550:	00014474 	.word	0x00014474
   10554:	20000fac 	.word	0x20000fac
   10558:	00014490 	.word	0x00014490
   1055c:	2000028d 	.word	0x2000028d
   10560:	0000f715 	.word	0x0000f715
   10564:	000144a8 	.word	0x000144a8
   10568:	20000fb0 	.word	0x20000fb0
   1056c:	000144d4 	.word	0x000144d4
   10570:	0000d429 	.word	0x0000d429
   10574:	0000d315 	.word	0x0000d315
   10578:	05fa0004 	.word	0x05fa0004
   1057c:	e000ed00 	.word	0xe000ed00
   10580:	00014508 	.word	0x00014508

00010584 <_hwerr_to_stderr>:
   10584:	1c03      	adds	r3, r0, #0
   10586:	300e      	adds	r0, #14
   10588:	b500      	push	{lr}
   1058a:	280e      	cmp	r0, #14
   1058c:	d819      	bhi.n	105c2 <_hwerr_to_stderr+0x3e>
   1058e:	f000 ff23 	bl	113d8 <__gnu_thumb1_case_uqi>
   10592:	1416      	.short	0x1416
   10594:	1b181012 	.word	0x1b181012
   10598:	180c0e18 	.word	0x180c0e18
   1059c:	1d0a0e0e 	.word	0x1d0a0e0e
   105a0:	08          	.byte	0x08
   105a1:	00          	.byte	0x00
   105a2:	2000      	movs	r0, #0
   105a4:	e014      	b.n	105d0 <_hwerr_to_stderr+0x4c>
   105a6:	2070      	movs	r0, #112	; 0x70
   105a8:	e011      	b.n	105ce <_hwerr_to_stderr+0x4a>
   105aa:	2016      	movs	r0, #22
   105ac:	e00f      	b.n	105ce <_hwerr_to_stderr+0x4a>
   105ae:	200c      	movs	r0, #12
   105b0:	e00d      	b.n	105ce <_hwerr_to_stderr+0x4a>
   105b2:	2079      	movs	r0, #121	; 0x79
   105b4:	e00b      	b.n	105ce <_hwerr_to_stderr+0x4a>
   105b6:	2068      	movs	r0, #104	; 0x68
   105b8:	e009      	b.n	105ce <_hwerr_to_stderr+0x4a>
   105ba:	200b      	movs	r0, #11
   105bc:	e007      	b.n	105ce <_hwerr_to_stderr+0x4a>
   105be:	2010      	movs	r0, #16
   105c0:	e005      	b.n	105ce <_hwerr_to_stderr+0x4a>
   105c2:	2000      	movs	r0, #0
   105c4:	4283      	cmp	r3, r0
   105c6:	da03      	bge.n	105d0 <_hwerr_to_stderr+0x4c>
   105c8:	2005      	movs	r0, #5
   105ca:	e000      	b.n	105ce <_hwerr_to_stderr+0x4a>
   105cc:	2002      	movs	r0, #2
   105ce:	4240      	negs	r0, r0
   105d0:	bd00      	pop	{pc}
	...

000105d4 <_mqtt_send_wait>:
   105d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   105d6:	1c04      	adds	r4, r0, #0
   105d8:	3443      	adds	r4, #67	; 0x43
   105da:	7823      	ldrb	r3, [r4, #0]
   105dc:	1c05      	adds	r5, r0, #0
   105de:	07d8      	lsls	r0, r3, #31
   105e0:	d51c      	bpl.n	1061c <_mqtt_send_wait+0x48>
   105e2:	2604      	movs	r6, #4
   105e4:	4333      	orrs	r3, r6
   105e6:	7023      	strb	r3, [r4, #0]
   105e8:	2002      	movs	r0, #2
   105ea:	5628      	ldrsb	r0, [r5, r0]
   105ec:	b292      	uxth	r2, r2
   105ee:	2300      	movs	r3, #0
   105f0:	4f0c      	ldr	r7, [pc, #48]	; (10624 <_mqtt_send_wait+0x50>)
   105f2:	47b8      	blx	r7
   105f4:	2800      	cmp	r0, #0
   105f6:	da05      	bge.n	10604 <_mqtt_send_wait+0x30>
   105f8:	7823      	ldrb	r3, [r4, #0]
   105fa:	43b3      	bics	r3, r6
   105fc:	7023      	strb	r3, [r4, #0]
   105fe:	4b0a      	ldr	r3, [pc, #40]	; (10628 <_mqtt_send_wait+0x54>)
   10600:	4798      	blx	r3
   10602:	e00d      	b.n	10620 <_mqtt_send_wait+0x4c>
   10604:	7822      	ldrb	r2, [r4, #0]
   10606:	2314      	movs	r3, #20
   10608:	4013      	ands	r3, r2
   1060a:	2000      	movs	r0, #0
   1060c:	2b04      	cmp	r3, #4
   1060e:	d107      	bne.n	10620 <_mqtt_send_wait+0x4c>
   10610:	4b06      	ldr	r3, [pc, #24]	; (1062c <_mqtt_send_wait+0x58>)
   10612:	4798      	blx	r3
   10614:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   10616:	4b06      	ldr	r3, [pc, #24]	; (10630 <_mqtt_send_wait+0x5c>)
   10618:	4798      	blx	r3
   1061a:	e7f3      	b.n	10604 <_mqtt_send_wait+0x30>
   1061c:	2001      	movs	r0, #1
   1061e:	4240      	negs	r0, r0
   10620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10622:	46c0      	nop			; (mov r8, r8)
   10624:	0000cb7d 	.word	0x0000cb7d
   10628:	00010585 	.word	0x00010585
   1062c:	0000addd 	.word	0x0000addd
   10630:	000092d1 	.word	0x000092d1

00010634 <mqtt_get_config_defaults>:
   10634:	4b07      	ldr	r3, [pc, #28]	; (10654 <mqtt_get_config_defaults+0x20>)
   10636:	2240      	movs	r2, #64	; 0x40
   10638:	8003      	strh	r3, [r0, #0]
   1063a:	2396      	movs	r3, #150	; 0x96
   1063c:	009b      	lsls	r3, r3, #2
   1063e:	8103      	strh	r3, [r0, #8]
   10640:	6102      	str	r2, [r0, #16]
   10642:	2300      	movs	r3, #0
   10644:	2220      	movs	r2, #32
   10646:	7083      	strb	r3, [r0, #2]
   10648:	6043      	str	r3, [r0, #4]
   1064a:	60c3      	str	r3, [r0, #12]
   1064c:	6142      	str	r2, [r0, #20]
   1064e:	7603      	strb	r3, [r0, #24]
   10650:	4770      	bx	lr
   10652:	46c0      	nop			; (mov r8, r8)
   10654:	0000075b 	.word	0x0000075b

00010658 <mqtt_init>:
   10658:	b538      	push	{r3, r4, r5, lr}
   1065a:	1c04      	adds	r4, r0, #0
   1065c:	1c0d      	adds	r5, r1, #0
   1065e:	2800      	cmp	r0, #0
   10660:	d030      	beq.n	106c4 <mqtt_init+0x6c>
   10662:	2900      	cmp	r1, #0
   10664:	d02e      	beq.n	106c4 <mqtt_init+0x6c>
   10666:	690b      	ldr	r3, [r1, #16]
   10668:	2b00      	cmp	r3, #0
   1066a:	d02b      	beq.n	106c4 <mqtt_init+0x6c>
   1066c:	684b      	ldr	r3, [r1, #4]
   1066e:	2b00      	cmp	r3, #0
   10670:	d028      	beq.n	106c4 <mqtt_init+0x6c>
   10672:	2100      	movs	r1, #0
   10674:	2274      	movs	r2, #116	; 0x74
   10676:	4b16      	ldr	r3, [pc, #88]	; (106d0 <mqtt_init+0x78>)
   10678:	4798      	blx	r3
   1067a:	1c20      	adds	r0, r4, #0
   1067c:	4b15      	ldr	r3, [pc, #84]	; (106d4 <mqtt_init+0x7c>)
   1067e:	3058      	adds	r0, #88	; 0x58
   10680:	1c29      	adds	r1, r5, #0
   10682:	221c      	movs	r2, #28
   10684:	4798      	blx	r3
   10686:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10688:	2b00      	cmp	r3, #0
   1068a:	d10b      	bne.n	106a4 <mqtt_init+0x4c>
   1068c:	6928      	ldr	r0, [r5, #16]
   1068e:	4b12      	ldr	r3, [pc, #72]	; (106d8 <mqtt_init+0x80>)
   10690:	4798      	blx	r3
   10692:	6660      	str	r0, [r4, #100]	; 0x64
   10694:	2800      	cmp	r0, #0
   10696:	d017      	beq.n	106c8 <mqtt_init+0x70>
   10698:	1c23      	adds	r3, r4, #0
   1069a:	3343      	adds	r3, #67	; 0x43
   1069c:	781a      	ldrb	r2, [r3, #0]
   1069e:	2120      	movs	r1, #32
   106a0:	430a      	orrs	r2, r1
   106a2:	701a      	strb	r2, [r3, #0]
   106a4:	892a      	ldrh	r2, [r5, #8]
   106a6:	23fa      	movs	r3, #250	; 0xfa
   106a8:	005b      	lsls	r3, r3, #1
   106aa:	4353      	muls	r3, r2
   106ac:	6868      	ldr	r0, [r5, #4]
   106ae:	490b      	ldr	r1, [pc, #44]	; (106dc <mqtt_init+0x84>)
   106b0:	1c22      	adds	r2, r4, #0
   106b2:	4d0b      	ldr	r5, [pc, #44]	; (106e0 <mqtt_init+0x88>)
   106b4:	47a8      	blx	r5
   106b6:	1c03      	adds	r3, r0, #0
   106b8:	6520      	str	r0, [r4, #80]	; 0x50
   106ba:	2000      	movs	r0, #0
   106bc:	4283      	cmp	r3, r0
   106be:	da05      	bge.n	106cc <mqtt_init+0x74>
   106c0:	201c      	movs	r0, #28
   106c2:	e002      	b.n	106ca <mqtt_init+0x72>
   106c4:	2016      	movs	r0, #22
   106c6:	e000      	b.n	106ca <mqtt_init+0x72>
   106c8:	200c      	movs	r0, #12
   106ca:	4240      	negs	r0, r0
   106cc:	bd38      	pop	{r3, r4, r5, pc}
   106ce:	46c0      	nop			; (mov r8, r8)
   106d0:	000117df 	.word	0x000117df
   106d4:	000117a9 	.word	0x000117a9
   106d8:	00011781 	.word	0x00011781
   106dc:	00010ea5 	.word	0x00010ea5
   106e0:	0000924d 	.word	0x0000924d

000106e4 <mqtt_deinit>:
   106e4:	b510      	push	{r4, lr}
   106e6:	1e04      	subs	r4, r0, #0
   106e8:	d014      	beq.n	10714 <mqtt_deinit+0x30>
   106ea:	6e40      	ldr	r0, [r0, #100]	; 0x64
   106ec:	2800      	cmp	r0, #0
   106ee:	d008      	beq.n	10702 <mqtt_deinit+0x1e>
   106f0:	1c23      	adds	r3, r4, #0
   106f2:	3343      	adds	r3, #67	; 0x43
   106f4:	781b      	ldrb	r3, [r3, #0]
   106f6:	069a      	lsls	r2, r3, #26
   106f8:	d503      	bpl.n	10702 <mqtt_deinit+0x1e>
   106fa:	4b09      	ldr	r3, [pc, #36]	; (10720 <mqtt_deinit+0x3c>)
   106fc:	4798      	blx	r3
   106fe:	2300      	movs	r3, #0
   10700:	6663      	str	r3, [r4, #100]	; 0x64
   10702:	6d21      	ldr	r1, [r4, #80]	; 0x50
   10704:	2900      	cmp	r1, #0
   10706:	db08      	blt.n	1071a <mqtt_deinit+0x36>
   10708:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   1070a:	2800      	cmp	r0, #0
   1070c:	d006      	beq.n	1071c <mqtt_deinit+0x38>
   1070e:	4b05      	ldr	r3, [pc, #20]	; (10724 <mqtt_deinit+0x40>)
   10710:	4798      	blx	r3
   10712:	e002      	b.n	1071a <mqtt_deinit+0x36>
   10714:	2016      	movs	r0, #22
   10716:	4240      	negs	r0, r0
   10718:	e000      	b.n	1071c <mqtt_deinit+0x38>
   1071a:	2000      	movs	r0, #0
   1071c:	bd10      	pop	{r4, pc}
   1071e:	46c0      	nop			; (mov r8, r8)
   10720:	00011795 	.word	0x00011795
   10724:	00009285 	.word	0x00009285

00010728 <mqtt_register_callback>:
   10728:	2800      	cmp	r0, #0
   1072a:	d002      	beq.n	10732 <mqtt_register_callback+0xa>
   1072c:	6541      	str	r1, [r0, #84]	; 0x54
   1072e:	2000      	movs	r0, #0
   10730:	e001      	b.n	10736 <mqtt_register_callback+0xe>
   10732:	2016      	movs	r0, #22
   10734:	4240      	negs	r0, r0
   10736:	4770      	bx	lr

00010738 <mqtt_socket_resolve_handler>:
   10738:	b5f0      	push	{r4, r5, r6, r7, lr}
   1073a:	1c06      	adds	r6, r0, #0
   1073c:	b085      	sub	sp, #20
   1073e:	1c0f      	adds	r7, r1, #0
   10740:	2400      	movs	r4, #0
   10742:	4b0f      	ldr	r3, [pc, #60]	; (10780 <mqtt_socket_resolve_handler+0x48>)
   10744:	58e5      	ldr	r5, [r4, r3]
   10746:	2d00      	cmp	r5, #0
   10748:	d015      	beq.n	10776 <mqtt_socket_resolve_handler+0x3e>
   1074a:	1ce9      	adds	r1, r5, #3
   1074c:	1c30      	adds	r0, r6, #0
   1074e:	4b0d      	ldr	r3, [pc, #52]	; (10784 <mqtt_socket_resolve_handler+0x4c>)
   10750:	4798      	blx	r3
   10752:	2800      	cmp	r0, #0
   10754:	d10f      	bne.n	10776 <mqtt_socket_resolve_handler+0x3e>
   10756:	466a      	mov	r2, sp
   10758:	2302      	movs	r3, #2
   1075a:	8013      	strh	r3, [r2, #0]
   1075c:	1c2b      	adds	r3, r5, #0
   1075e:	3358      	adds	r3, #88	; 0x58
   10760:	881b      	ldrh	r3, [r3, #0]
   10762:	9701      	str	r7, [sp, #4]
   10764:	ba5b      	rev16	r3, r3
   10766:	8053      	strh	r3, [r2, #2]
   10768:	2002      	movs	r0, #2
   1076a:	5628      	ldrsb	r0, [r5, r0]
   1076c:	4669      	mov	r1, sp
   1076e:	2210      	movs	r2, #16
   10770:	4b05      	ldr	r3, [pc, #20]	; (10788 <mqtt_socket_resolve_handler+0x50>)
   10772:	4798      	blx	r3
   10774:	e002      	b.n	1077c <mqtt_socket_resolve_handler+0x44>
   10776:	3404      	adds	r4, #4
   10778:	2c1c      	cmp	r4, #28
   1077a:	d1e2      	bne.n	10742 <mqtt_socket_resolve_handler+0xa>
   1077c:	b005      	add	sp, #20
   1077e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10780:	200003d4 	.word	0x200003d4
   10784:	00011c45 	.word	0x00011c45
   10788:	0000caed 	.word	0x0000caed

0001078c <mqtt_connect>:
   1078c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1078e:	1c04      	adds	r4, r0, #0
   10790:	b089      	sub	sp, #36	; 0x24
   10792:	1c0d      	adds	r5, r1, #0
   10794:	2800      	cmp	r0, #0
   10796:	d051      	beq.n	1083c <mqtt_connect+0xb0>
   10798:	2900      	cmp	r1, #0
   1079a:	d04f      	beq.n	1083c <mqtt_connect+0xb0>
   1079c:	1c08      	adds	r0, r1, #0
   1079e:	4b39      	ldr	r3, [pc, #228]	; (10884 <mqtt_connect+0xf8>)
   107a0:	4798      	blx	r3
   107a2:	2840      	cmp	r0, #64	; 0x40
   107a4:	d84c      	bhi.n	10840 <mqtt_connect+0xb4>
   107a6:	1c21      	adds	r1, r4, #0
   107a8:	3143      	adds	r1, #67	; 0x43
   107aa:	780b      	ldrb	r3, [r1, #0]
   107ac:	9101      	str	r1, [sp, #4]
   107ae:	07db      	lsls	r3, r3, #31
   107b0:	0fd9      	lsrs	r1, r3, #31
   107b2:	466a      	mov	r2, sp
   107b4:	b2ce      	uxtb	r6, r1
   107b6:	1ce0      	adds	r0, r4, #3
   107b8:	7211      	strb	r1, [r2, #8]
   107ba:	2e00      	cmp	r6, #0
   107bc:	d142      	bne.n	10844 <mqtt_connect+0xb8>
   107be:	2701      	movs	r7, #1
   107c0:	1c29      	adds	r1, r5, #0
   107c2:	4b31      	ldr	r3, [pc, #196]	; (10888 <mqtt_connect+0xfc>)
   107c4:	8027      	strh	r7, [r4, #0]
   107c6:	4798      	blx	r3
   107c8:	9a01      	ldr	r2, [sp, #4]
   107ca:	2002      	movs	r0, #2
   107cc:	7813      	ldrb	r3, [r2, #0]
   107ce:	9901      	ldr	r1, [sp, #4]
   107d0:	43bb      	bics	r3, r7
   107d2:	4383      	bics	r3, r0
   107d4:	22e3      	movs	r2, #227	; 0xe3
   107d6:	4013      	ands	r3, r2
   107d8:	466a      	mov	r2, sp
   107da:	700b      	strb	r3, [r1, #0]
   107dc:	7a12      	ldrb	r2, [r2, #8]
   107de:	1c23      	adds	r3, r4, #0
   107e0:	3348      	adds	r3, #72	; 0x48
   107e2:	6466      	str	r6, [r4, #68]	; 0x44
   107e4:	701a      	strb	r2, [r3, #0]
   107e6:	7c9a      	ldrb	r2, [r3, #18]
   107e8:	805e      	strh	r6, [r3, #2]
   107ea:	1e53      	subs	r3, r2, #1
   107ec:	419a      	sbcs	r2, r3
   107ee:	b2d2      	uxtb	r2, r2
   107f0:	1c39      	adds	r1, r7, #0
   107f2:	4b26      	ldr	r3, [pc, #152]	; (1088c <mqtt_connect+0x100>)
   107f4:	4798      	blx	r3
   107f6:	70a0      	strb	r0, [r4, #2]
   107f8:	2800      	cmp	r0, #0
   107fa:	db25      	blt.n	10848 <mqtt_connect+0xbc>
   107fc:	4b24      	ldr	r3, [pc, #144]	; (10890 <mqtt_connect+0x104>)
   107fe:	0080      	lsls	r0, r0, #2
   10800:	50c4      	str	r4, [r0, r3]
   10802:	1c2b      	adds	r3, r5, #0
   10804:	781f      	ldrb	r7, [r3, #0]
   10806:	2f00      	cmp	r7, #0
   10808:	d026      	beq.n	10858 <mqtt_connect+0xcc>
   1080a:	2220      	movs	r2, #32
   1080c:	1c39      	adds	r1, r7, #0
   1080e:	4391      	bics	r1, r2
   10810:	1c0a      	adds	r2, r1, #0
   10812:	3a41      	subs	r2, #65	; 0x41
   10814:	b2d2      	uxtb	r2, r2
   10816:	3301      	adds	r3, #1
   10818:	2a05      	cmp	r2, #5
   1081a:	d90d      	bls.n	10838 <mqtt_connect+0xac>
   1081c:	2f3a      	cmp	r7, #58	; 0x3a
   1081e:	d00b      	beq.n	10838 <mqtt_connect+0xac>
   10820:	2f2f      	cmp	r7, #47	; 0x2f
   10822:	d009      	beq.n	10838 <mqtt_connect+0xac>
   10824:	2f2e      	cmp	r7, #46	; 0x2e
   10826:	d102      	bne.n	1082e <mqtt_connect+0xa2>
   10828:	2e00      	cmp	r6, #0
   1082a:	d0eb      	beq.n	10804 <mqtt_connect+0x78>
   1082c:	e00f      	b.n	1084e <mqtt_connect+0xc2>
   1082e:	2230      	movs	r2, #48	; 0x30
   10830:	4017      	ands	r7, r2
   10832:	4297      	cmp	r7, r2
   10834:	d0e6      	beq.n	10804 <mqtt_connect+0x78>
   10836:	e00a      	b.n	1084e <mqtt_connect+0xc2>
   10838:	2601      	movs	r6, #1
   1083a:	e7e3      	b.n	10804 <mqtt_connect+0x78>
   1083c:	2016      	movs	r0, #22
   1083e:	e004      	b.n	1084a <mqtt_connect+0xbe>
   10840:	205b      	movs	r0, #91	; 0x5b
   10842:	e002      	b.n	1084a <mqtt_connect+0xbe>
   10844:	2078      	movs	r0, #120	; 0x78
   10846:	e000      	b.n	1084a <mqtt_connect+0xbe>
   10848:	201c      	movs	r0, #28
   1084a:	4240      	negs	r0, r0
   1084c:	e017      	b.n	1087e <mqtt_connect+0xf2>
   1084e:	1c28      	adds	r0, r5, #0
   10850:	4b10      	ldr	r3, [pc, #64]	; (10894 <mqtt_connect+0x108>)
   10852:	4798      	blx	r3
   10854:	2000      	movs	r0, #0
   10856:	e012      	b.n	1087e <mqtt_connect+0xf2>
   10858:	466a      	mov	r2, sp
   1085a:	2302      	movs	r3, #2
   1085c:	8213      	strh	r3, [r2, #16]
   1085e:	1c23      	adds	r3, r4, #0
   10860:	3358      	adds	r3, #88	; 0x58
   10862:	881b      	ldrh	r3, [r3, #0]
   10864:	1c28      	adds	r0, r5, #0
   10866:	ba5b      	rev16	r3, r3
   10868:	8253      	strh	r3, [r2, #18]
   1086a:	4b0b      	ldr	r3, [pc, #44]	; (10898 <mqtt_connect+0x10c>)
   1086c:	4798      	blx	r3
   1086e:	9005      	str	r0, [sp, #20]
   10870:	2002      	movs	r0, #2
   10872:	5620      	ldrsb	r0, [r4, r0]
   10874:	a904      	add	r1, sp, #16
   10876:	2210      	movs	r2, #16
   10878:	4b08      	ldr	r3, [pc, #32]	; (1089c <mqtt_connect+0x110>)
   1087a:	4798      	blx	r3
   1087c:	1c38      	adds	r0, r7, #0
   1087e:	b009      	add	sp, #36	; 0x24
   10880:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10882:	46c0      	nop			; (mov r8, r8)
   10884:	00011ca3 	.word	0x00011ca3
   10888:	00011c59 	.word	0x00011c59
   1088c:	0000c969 	.word	0x0000c969
   10890:	200003d4 	.word	0x200003d4
   10894:	0000cdb1 	.word	0x0000cdb1
   10898:	0000cd45 	.word	0x0000cd45
   1089c:	0000caed 	.word	0x0000caed

000108a0 <mqtt_connect_broker>:
   108a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   108a2:	b095      	sub	sp, #84	; 0x54
   108a4:	af02      	add	r7, sp, #8
   108a6:	617b      	str	r3, [r7, #20]
   108a8:	1c3b      	adds	r3, r7, #0
   108aa:	3370      	adds	r3, #112	; 0x70
   108ac:	781b      	ldrb	r3, [r3, #0]
   108ae:	1c05      	adds	r5, r0, #0
   108b0:	60fb      	str	r3, [r7, #12]
   108b2:	1c3b      	adds	r3, r7, #0
   108b4:	3374      	adds	r3, #116	; 0x74
   108b6:	781b      	ldrb	r3, [r3, #0]
   108b8:	6139      	str	r1, [r7, #16]
   108ba:	61fa      	str	r2, [r7, #28]
   108bc:	60bb      	str	r3, [r7, #8]
   108be:	2800      	cmp	r0, #0
   108c0:	d101      	bne.n	108c6 <mqtt_connect_broker+0x26>
   108c2:	2016      	movs	r0, #22
   108c4:	e129      	b.n	10b1a <mqtt_connect_broker+0x27a>
   108c6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   108c8:	4668      	mov	r0, sp
   108ca:	3307      	adds	r3, #7
   108cc:	08db      	lsrs	r3, r3, #3
   108ce:	00db      	lsls	r3, r3, #3
   108d0:	1ac0      	subs	r0, r0, r3
   108d2:	4685      	mov	sp, r0
   108d4:	ac02      	add	r4, sp, #8
   108d6:	607c      	str	r4, [r7, #4]
   108d8:	6e3c      	ldr	r4, [r7, #96]	; 0x60
   108da:	2c00      	cmp	r4, #0
   108dc:	d0f1      	beq.n	108c2 <mqtt_connect_broker+0x22>
   108de:	1c2b      	adds	r3, r5, #0
   108e0:	3343      	adds	r3, #67	; 0x43
   108e2:	781b      	ldrb	r3, [r3, #0]
   108e4:	07d8      	lsls	r0, r3, #31
   108e6:	d400      	bmi.n	108ea <mqtt_connect_broker+0x4a>
   108e8:	e112      	b.n	10b10 <mqtt_connect_broker+0x270>
   108ea:	079a      	lsls	r2, r3, #30
   108ec:	d500      	bpl.n	108f0 <mqtt_connect_broker+0x50>
   108ee:	e111      	b.n	10b14 <mqtt_connect_broker+0x274>
   108f0:	071c      	lsls	r4, r3, #28
   108f2:	d40b      	bmi.n	1090c <mqtt_connect_broker+0x6c>
   108f4:	4e8b      	ldr	r6, [pc, #556]	; (10b24 <mqtt_connect_broker+0x284>)
   108f6:	6e38      	ldr	r0, [r7, #96]	; 0x60
   108f8:	47b0      	blx	r6
   108fa:	1c03      	adds	r3, r0, #0
   108fc:	61b8      	str	r0, [r7, #24]
   108fe:	69f8      	ldr	r0, [r7, #28]
   10900:	330e      	adds	r3, #14
   10902:	1c34      	adds	r4, r6, #0
   10904:	2800      	cmp	r0, #0
   10906:	d113      	bne.n	10930 <mqtt_connect_broker+0x90>
   10908:	1c1e      	adds	r6, r3, #0
   1090a:	e01d      	b.n	10948 <mqtt_connect_broker+0xa8>
   1090c:	1c2b      	adds	r3, r5, #0
   1090e:	3370      	adds	r3, #112	; 0x70
   10910:	781b      	ldrb	r3, [r3, #0]
   10912:	2b00      	cmp	r3, #0
   10914:	d000      	beq.n	10918 <mqtt_connect_broker+0x78>
   10916:	e0ff      	b.n	10b18 <mqtt_connect_broker+0x278>
   10918:	1c2b      	adds	r3, r5, #0
   1091a:	3343      	adds	r3, #67	; 0x43
   1091c:	781b      	ldrb	r3, [r3, #0]
   1091e:	071a      	lsls	r2, r3, #28
   10920:	d5e8      	bpl.n	108f4 <mqtt_connect_broker+0x54>
   10922:	4b81      	ldr	r3, [pc, #516]	; (10b28 <mqtt_connect_broker+0x288>)
   10924:	2000      	movs	r0, #0
   10926:	4798      	blx	r3
   10928:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   1092a:	4b80      	ldr	r3, [pc, #512]	; (10b2c <mqtt_connect_broker+0x28c>)
   1092c:	4798      	blx	r3
   1092e:	e7f3      	b.n	10918 <mqtt_connect_broker+0x78>
   10930:	69f8      	ldr	r0, [r7, #28]
   10932:	47b0      	blx	r6
   10934:	69be      	ldr	r6, [r7, #24]
   10936:	697b      	ldr	r3, [r7, #20]
   10938:	3610      	adds	r6, #16
   1093a:	1836      	adds	r6, r6, r0
   1093c:	2b00      	cmp	r3, #0
   1093e:	d003      	beq.n	10948 <mqtt_connect_broker+0xa8>
   10940:	1c18      	adds	r0, r3, #0
   10942:	47a0      	blx	r4
   10944:	3602      	adds	r6, #2
   10946:	1836      	adds	r6, r6, r0
   10948:	6e78      	ldr	r0, [r7, #100]	; 0x64
   1094a:	2800      	cmp	r0, #0
   1094c:	d007      	beq.n	1095e <mqtt_connect_broker+0xbe>
   1094e:	47a0      	blx	r4
   10950:	3602      	adds	r6, #2
   10952:	6efc      	ldr	r4, [r7, #108]	; 0x6c
   10954:	1830      	adds	r0, r6, r0
   10956:	1906      	adds	r6, r0, r4
   10958:	2c00      	cmp	r4, #0
   1095a:	d100      	bne.n	1095e <mqtt_connect_broker+0xbe>
   1095c:	1c06      	adds	r6, r0, #0
   1095e:	69fc      	ldr	r4, [r7, #28]
   10960:	2c00      	cmp	r4, #0
   10962:	d006      	beq.n	10972 <mqtt_connect_broker+0xd2>
   10964:	24c0      	movs	r4, #192	; 0xc0
   10966:	61bc      	str	r4, [r7, #24]
   10968:	697c      	ldr	r4, [r7, #20]
   1096a:	2c00      	cmp	r4, #0
   1096c:	d103      	bne.n	10976 <mqtt_connect_broker+0xd6>
   1096e:	2480      	movs	r4, #128	; 0x80
   10970:	e000      	b.n	10974 <mqtt_connect_broker+0xd4>
   10972:	69fc      	ldr	r4, [r7, #28]
   10974:	61bc      	str	r4, [r7, #24]
   10976:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   10978:	2c00      	cmp	r4, #0
   1097a:	d00f      	beq.n	1099c <mqtt_connect_broker+0xfc>
   1097c:	68bc      	ldr	r4, [r7, #8]
   1097e:	2c00      	cmp	r4, #0
   10980:	d003      	beq.n	1098a <mqtt_connect_broker+0xea>
   10982:	69bc      	ldr	r4, [r7, #24]
   10984:	2320      	movs	r3, #32
   10986:	431c      	orrs	r4, r3
   10988:	61bc      	str	r4, [r7, #24]
   1098a:	68fc      	ldr	r4, [r7, #12]
   1098c:	2303      	movs	r3, #3
   1098e:	4023      	ands	r3, r4
   10990:	00db      	lsls	r3, r3, #3
   10992:	69bc      	ldr	r4, [r7, #24]
   10994:	2204      	movs	r2, #4
   10996:	4313      	orrs	r3, r2
   10998:	431c      	orrs	r4, r3
   1099a:	61bc      	str	r4, [r7, #24]
   1099c:	693c      	ldr	r4, [r7, #16]
   1099e:	2c00      	cmp	r4, #0
   109a0:	d003      	beq.n	109aa <mqtt_connect_broker+0x10a>
   109a2:	69bc      	ldr	r4, [r7, #24]
   109a4:	2302      	movs	r3, #2
   109a6:	431c      	orrs	r4, r3
   109a8:	61bc      	str	r4, [r7, #24]
   109aa:	1c2b      	adds	r3, r5, #0
   109ac:	3343      	adds	r3, #67	; 0x43
   109ae:	781a      	ldrb	r2, [r3, #0]
   109b0:	2108      	movs	r1, #8
   109b2:	430a      	orrs	r2, r1
   109b4:	701a      	strb	r2, [r3, #0]
   109b6:	1c38      	adds	r0, r7, #0
   109b8:	9500      	str	r5, [sp, #0]
   109ba:	3020      	adds	r0, #32
   109bc:	6879      	ldr	r1, [r7, #4]
   109be:	4b5c      	ldr	r3, [pc, #368]	; (10b30 <mqtt_connect_broker+0x290>)
   109c0:	6eea      	ldr	r2, [r5, #108]	; 0x6c
   109c2:	4c5c      	ldr	r4, [pc, #368]	; (10b34 <mqtt_connect_broker+0x294>)
   109c4:	47a0      	blx	r4
   109c6:	1c38      	adds	r0, r7, #0
   109c8:	3020      	adds	r0, #32
   109ca:	2110      	movs	r1, #16
   109cc:	4b5a      	ldr	r3, [pc, #360]	; (10b38 <mqtt_connect_broker+0x298>)
   109ce:	4798      	blx	r3
   109d0:	2e80      	cmp	r6, #128	; 0x80
   109d2:	dd09      	ble.n	109e8 <mqtt_connect_broker+0x148>
   109d4:	2180      	movs	r1, #128	; 0x80
   109d6:	4249      	negs	r1, r1
   109d8:	4331      	orrs	r1, r6
   109da:	1c38      	adds	r0, r7, #0
   109dc:	b249      	sxtb	r1, r1
   109de:	3020      	adds	r0, #32
   109e0:	4c55      	ldr	r4, [pc, #340]	; (10b38 <mqtt_connect_broker+0x298>)
   109e2:	47a0      	blx	r4
   109e4:	11f6      	asrs	r6, r6, #7
   109e6:	e7f3      	b.n	109d0 <mqtt_connect_broker+0x130>
   109e8:	4b54      	ldr	r3, [pc, #336]	; (10b3c <mqtt_connect_broker+0x29c>)
   109ea:	401e      	ands	r6, r3
   109ec:	d504      	bpl.n	109f8 <mqtt_connect_broker+0x158>
   109ee:	2380      	movs	r3, #128	; 0x80
   109f0:	3e01      	subs	r6, #1
   109f2:	425b      	negs	r3, r3
   109f4:	431e      	orrs	r6, r3
   109f6:	3601      	adds	r6, #1
   109f8:	1c38      	adds	r0, r7, #0
   109fa:	b271      	sxtb	r1, r6
   109fc:	3020      	adds	r0, #32
   109fe:	4c4e      	ldr	r4, [pc, #312]	; (10b38 <mqtt_connect_broker+0x298>)
   10a00:	47a0      	blx	r4
   10a02:	1c38      	adds	r0, r7, #0
   10a04:	4c4e      	ldr	r4, [pc, #312]	; (10b40 <mqtt_connect_broker+0x2a0>)
   10a06:	3020      	adds	r0, #32
   10a08:	2106      	movs	r1, #6
   10a0a:	47a0      	blx	r4
   10a0c:	1c38      	adds	r0, r7, #0
   10a0e:	4b4d      	ldr	r3, [pc, #308]	; (10b44 <mqtt_connect_broker+0x2a4>)
   10a10:	3020      	adds	r0, #32
   10a12:	494d      	ldr	r1, [pc, #308]	; (10b48 <mqtt_connect_broker+0x2a8>)
   10a14:	2206      	movs	r2, #6
   10a16:	4798      	blx	r3
   10a18:	1c38      	adds	r0, r7, #0
   10a1a:	3020      	adds	r0, #32
   10a1c:	2103      	movs	r1, #3
   10a1e:	4a46      	ldr	r2, [pc, #280]	; (10b38 <mqtt_connect_broker+0x298>)
   10a20:	4790      	blx	r2
   10a22:	69bb      	ldr	r3, [r7, #24]
   10a24:	1c38      	adds	r0, r7, #0
   10a26:	4a44      	ldr	r2, [pc, #272]	; (10b38 <mqtt_connect_broker+0x298>)
   10a28:	b259      	sxtb	r1, r3
   10a2a:	3020      	adds	r0, #32
   10a2c:	4790      	blx	r2
   10a2e:	1c2b      	adds	r3, r5, #0
   10a30:	3360      	adds	r3, #96	; 0x60
   10a32:	2000      	movs	r0, #0
   10a34:	5e19      	ldrsh	r1, [r3, r0]
   10a36:	1c38      	adds	r0, r7, #0
   10a38:	3020      	adds	r0, #32
   10a3a:	47a0      	blx	r4
   10a3c:	4e39      	ldr	r6, [pc, #228]	; (10b24 <mqtt_connect_broker+0x284>)
   10a3e:	6e38      	ldr	r0, [r7, #96]	; 0x60
   10a40:	47b0      	blx	r6
   10a42:	b201      	sxth	r1, r0
   10a44:	1c38      	adds	r0, r7, #0
   10a46:	3020      	adds	r0, #32
   10a48:	47a0      	blx	r4
   10a4a:	6e38      	ldr	r0, [r7, #96]	; 0x60
   10a4c:	47b0      	blx	r6
   10a4e:	1c02      	adds	r2, r0, #0
   10a50:	1c38      	adds	r0, r7, #0
   10a52:	3020      	adds	r0, #32
   10a54:	6e39      	ldr	r1, [r7, #96]	; 0x60
   10a56:	4b3b      	ldr	r3, [pc, #236]	; (10b44 <mqtt_connect_broker+0x2a4>)
   10a58:	4798      	blx	r3
   10a5a:	6e78      	ldr	r0, [r7, #100]	; 0x64
   10a5c:	2800      	cmp	r0, #0
   10a5e:	d015      	beq.n	10a8c <mqtt_connect_broker+0x1ec>
   10a60:	47b0      	blx	r6
   10a62:	b201      	sxth	r1, r0
   10a64:	1c38      	adds	r0, r7, #0
   10a66:	3020      	adds	r0, #32
   10a68:	47a0      	blx	r4
   10a6a:	6e78      	ldr	r0, [r7, #100]	; 0x64
   10a6c:	47b0      	blx	r6
   10a6e:	1c02      	adds	r2, r0, #0
   10a70:	1c38      	adds	r0, r7, #0
   10a72:	4c34      	ldr	r4, [pc, #208]	; (10b44 <mqtt_connect_broker+0x2a4>)
   10a74:	3020      	adds	r0, #32
   10a76:	6e79      	ldr	r1, [r7, #100]	; 0x64
   10a78:	47a0      	blx	r4
   10a7a:	6ebc      	ldr	r4, [r7, #104]	; 0x68
   10a7c:	2c00      	cmp	r4, #0
   10a7e:	d005      	beq.n	10a8c <mqtt_connect_broker+0x1ec>
   10a80:	1c38      	adds	r0, r7, #0
   10a82:	1c21      	adds	r1, r4, #0
   10a84:	3020      	adds	r0, #32
   10a86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   10a88:	4c2e      	ldr	r4, [pc, #184]	; (10b44 <mqtt_connect_broker+0x2a4>)
   10a8a:	47a0      	blx	r4
   10a8c:	69fc      	ldr	r4, [r7, #28]
   10a8e:	2c00      	cmp	r4, #0
   10a90:	d01f      	beq.n	10ad2 <mqtt_connect_broker+0x232>
   10a92:	4e24      	ldr	r6, [pc, #144]	; (10b24 <mqtt_connect_broker+0x284>)
   10a94:	1c20      	adds	r0, r4, #0
   10a96:	47b0      	blx	r6
   10a98:	b201      	sxth	r1, r0
   10a9a:	1c38      	adds	r0, r7, #0
   10a9c:	3020      	adds	r0, #32
   10a9e:	4c28      	ldr	r4, [pc, #160]	; (10b40 <mqtt_connect_broker+0x2a0>)
   10aa0:	47a0      	blx	r4
   10aa2:	69f8      	ldr	r0, [r7, #28]
   10aa4:	47b0      	blx	r6
   10aa6:	1c02      	adds	r2, r0, #0
   10aa8:	1c38      	adds	r0, r7, #0
   10aaa:	3020      	adds	r0, #32
   10aac:	69f9      	ldr	r1, [r7, #28]
   10aae:	4c25      	ldr	r4, [pc, #148]	; (10b44 <mqtt_connect_broker+0x2a4>)
   10ab0:	47a0      	blx	r4
   10ab2:	6978      	ldr	r0, [r7, #20]
   10ab4:	2800      	cmp	r0, #0
   10ab6:	d00c      	beq.n	10ad2 <mqtt_connect_broker+0x232>
   10ab8:	47b0      	blx	r6
   10aba:	b201      	sxth	r1, r0
   10abc:	1c38      	adds	r0, r7, #0
   10abe:	4a20      	ldr	r2, [pc, #128]	; (10b40 <mqtt_connect_broker+0x2a0>)
   10ac0:	3020      	adds	r0, #32
   10ac2:	4790      	blx	r2
   10ac4:	6978      	ldr	r0, [r7, #20]
   10ac6:	47b0      	blx	r6
   10ac8:	1c02      	adds	r2, r0, #0
   10aca:	1c38      	adds	r0, r7, #0
   10acc:	3020      	adds	r0, #32
   10ace:	6979      	ldr	r1, [r7, #20]
   10ad0:	47a0      	blx	r4
   10ad2:	1c38      	adds	r0, r7, #0
   10ad4:	1c2c      	adds	r4, r5, #0
   10ad6:	3020      	adds	r0, #32
   10ad8:	4b1c      	ldr	r3, [pc, #112]	; (10b4c <mqtt_connect_broker+0x2ac>)
   10ada:	3443      	adds	r4, #67	; 0x43
   10adc:	4798      	blx	r3
   10ade:	7821      	ldrb	r1, [r4, #0]
   10ae0:	0789      	lsls	r1, r1, #30
   10ae2:	0fc9      	lsrs	r1, r1, #31
   10ae4:	2901      	cmp	r1, #1
   10ae6:	d10b      	bne.n	10b00 <mqtt_connect_broker+0x260>
   10ae8:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   10aea:	2a00      	cmp	r2, #0
   10aec:	d108      	bne.n	10b00 <mqtt_connect_broker+0x260>
   10aee:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   10af0:	2b00      	cmp	r3, #0
   10af2:	d005      	beq.n	10b00 <mqtt_connect_broker+0x260>
   10af4:	2034      	movs	r0, #52	; 0x34
   10af6:	55c2      	strb	r2, [r0, r7]
   10af8:	1c3a      	adds	r2, r7, #0
   10afa:	1c28      	adds	r0, r5, #0
   10afc:	3234      	adds	r2, #52	; 0x34
   10afe:	4798      	blx	r3
   10b00:	7823      	ldrb	r3, [r4, #0]
   10b02:	2202      	movs	r2, #2
   10b04:	4313      	orrs	r3, r2
   10b06:	2208      	movs	r2, #8
   10b08:	4393      	bics	r3, r2
   10b0a:	7023      	strb	r3, [r4, #0]
   10b0c:	2000      	movs	r0, #0
   10b0e:	e005      	b.n	10b1c <mqtt_connect_broker+0x27c>
   10b10:	2080      	movs	r0, #128	; 0x80
   10b12:	e002      	b.n	10b1a <mqtt_connect_broker+0x27a>
   10b14:	2078      	movs	r0, #120	; 0x78
   10b16:	e000      	b.n	10b1a <mqtt_connect_broker+0x27a>
   10b18:	200b      	movs	r0, #11
   10b1a:	4240      	negs	r0, r0
   10b1c:	46bd      	mov	sp, r7
   10b1e:	b013      	add	sp, #76	; 0x4c
   10b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b22:	46c0      	nop			; (mov r8, r8)
   10b24:	00011ca3 	.word	0x00011ca3
   10b28:	0000addd 	.word	0x0000addd
   10b2c:	000092d1 	.word	0x000092d1
   10b30:	000105d5 	.word	0x000105d5
   10b34:	000090e1 	.word	0x000090e1
   10b38:	0000910d 	.word	0x0000910d
   10b3c:	8000007f 	.word	0x8000007f
   10b40:	00009135 	.word	0x00009135
   10b44:	0000914d 	.word	0x0000914d
   10b48:	00014874 	.word	0x00014874
   10b4c:	000090f1 	.word	0x000090f1

00010b50 <mqtt_publish>:
   10b50:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b52:	b093      	sub	sp, #76	; 0x4c
   10b54:	af02      	add	r7, sp, #8
   10b56:	60fb      	str	r3, [r7, #12]
   10b58:	1c3b      	adds	r3, r7, #0
   10b5a:	3358      	adds	r3, #88	; 0x58
   10b5c:	781b      	ldrb	r3, [r3, #0]
   10b5e:	1c04      	adds	r4, r0, #0
   10b60:	613b      	str	r3, [r7, #16]
   10b62:	1c3b      	adds	r3, r7, #0
   10b64:	335c      	adds	r3, #92	; 0x5c
   10b66:	781b      	ldrb	r3, [r3, #0]
   10b68:	6179      	str	r1, [r7, #20]
   10b6a:	60ba      	str	r2, [r7, #8]
   10b6c:	607b      	str	r3, [r7, #4]
   10b6e:	2800      	cmp	r0, #0
   10b70:	d101      	bne.n	10b76 <mqtt_publish+0x26>
   10b72:	2516      	movs	r5, #22
   10b74:	e0a7      	b.n	10cc6 <mqtt_publish+0x176>
   10b76:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   10b78:	466a      	mov	r2, sp
   10b7a:	3307      	adds	r3, #7
   10b7c:	08db      	lsrs	r3, r3, #3
   10b7e:	00db      	lsls	r3, r3, #3
   10b80:	1ad2      	subs	r2, r2, r3
   10b82:	697b      	ldr	r3, [r7, #20]
   10b84:	4695      	mov	sp, r2
   10b86:	ae02      	add	r6, sp, #8
   10b88:	2b00      	cmp	r3, #0
   10b8a:	d0f2      	beq.n	10b72 <mqtt_publish+0x22>
   10b8c:	693a      	ldr	r2, [r7, #16]
   10b8e:	2a02      	cmp	r2, #2
   10b90:	d8ef      	bhi.n	10b72 <mqtt_publish+0x22>
   10b92:	1c05      	adds	r5, r0, #0
   10b94:	3543      	adds	r5, #67	; 0x43
   10b96:	782b      	ldrb	r3, [r5, #0]
   10b98:	079a      	lsls	r2, r3, #30
   10b9a:	d400      	bmi.n	10b9e <mqtt_publish+0x4e>
   10b9c:	e090      	b.n	10cc0 <mqtt_publish+0x170>
   10b9e:	071a      	lsls	r2, r3, #28
   10ba0:	d40a      	bmi.n	10bb8 <mqtt_publish+0x68>
   10ba2:	4b4b      	ldr	r3, [pc, #300]	; (10cd0 <mqtt_publish+0x180>)
   10ba4:	6978      	ldr	r0, [r7, #20]
   10ba6:	4798      	blx	r3
   10ba8:	68fd      	ldr	r5, [r7, #12]
   10baa:	693b      	ldr	r3, [r7, #16]
   10bac:	3502      	adds	r5, #2
   10bae:	182d      	adds	r5, r5, r0
   10bb0:	2b00      	cmp	r3, #0
   10bb2:	d011      	beq.n	10bd8 <mqtt_publish+0x88>
   10bb4:	3502      	adds	r5, #2
   10bb6:	e00f      	b.n	10bd8 <mqtt_publish+0x88>
   10bb8:	1c03      	adds	r3, r0, #0
   10bba:	3370      	adds	r3, #112	; 0x70
   10bbc:	781b      	ldrb	r3, [r3, #0]
   10bbe:	2b00      	cmp	r3, #0
   10bc0:	d000      	beq.n	10bc4 <mqtt_publish+0x74>
   10bc2:	e07f      	b.n	10cc4 <mqtt_publish+0x174>
   10bc4:	782b      	ldrb	r3, [r5, #0]
   10bc6:	071a      	lsls	r2, r3, #28
   10bc8:	d5eb      	bpl.n	10ba2 <mqtt_publish+0x52>
   10bca:	4b42      	ldr	r3, [pc, #264]	; (10cd4 <mqtt_publish+0x184>)
   10bcc:	2000      	movs	r0, #0
   10bce:	4798      	blx	r3
   10bd0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   10bd2:	4b41      	ldr	r3, [pc, #260]	; (10cd8 <mqtt_publish+0x188>)
   10bd4:	4798      	blx	r3
   10bd6:	e7f5      	b.n	10bc4 <mqtt_publish+0x74>
   10bd8:	1c23      	adds	r3, r4, #0
   10bda:	3343      	adds	r3, #67	; 0x43
   10bdc:	781a      	ldrb	r2, [r3, #0]
   10bde:	2108      	movs	r1, #8
   10be0:	430a      	orrs	r2, r1
   10be2:	701a      	strb	r2, [r3, #0]
   10be4:	1c38      	adds	r0, r7, #0
   10be6:	9400      	str	r4, [sp, #0]
   10be8:	1c31      	adds	r1, r6, #0
   10bea:	302c      	adds	r0, #44	; 0x2c
   10bec:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   10bee:	4b3b      	ldr	r3, [pc, #236]	; (10cdc <mqtt_publish+0x18c>)
   10bf0:	4e3b      	ldr	r6, [pc, #236]	; (10ce0 <mqtt_publish+0x190>)
   10bf2:	47b0      	blx	r6
   10bf4:	687b      	ldr	r3, [r7, #4]
   10bf6:	2101      	movs	r1, #1
   10bf8:	4019      	ands	r1, r3
   10bfa:	2330      	movs	r3, #48	; 0x30
   10bfc:	4319      	orrs	r1, r3
   10bfe:	693b      	ldr	r3, [r7, #16]
   10c00:	1c38      	adds	r0, r7, #0
   10c02:	005a      	lsls	r2, r3, #1
   10c04:	2306      	movs	r3, #6
   10c06:	4013      	ands	r3, r2
   10c08:	4319      	orrs	r1, r3
   10c0a:	302c      	adds	r0, #44	; 0x2c
   10c0c:	4b35      	ldr	r3, [pc, #212]	; (10ce4 <mqtt_publish+0x194>)
   10c0e:	4798      	blx	r3
   10c10:	4b34      	ldr	r3, [pc, #208]	; (10ce4 <mqtt_publish+0x194>)
   10c12:	2d80      	cmp	r5, #128	; 0x80
   10c14:	dd08      	ble.n	10c28 <mqtt_publish+0xd8>
   10c16:	2180      	movs	r1, #128	; 0x80
   10c18:	4249      	negs	r1, r1
   10c1a:	4329      	orrs	r1, r5
   10c1c:	1c38      	adds	r0, r7, #0
   10c1e:	b249      	sxtb	r1, r1
   10c20:	302c      	adds	r0, #44	; 0x2c
   10c22:	4798      	blx	r3
   10c24:	11ed      	asrs	r5, r5, #7
   10c26:	e7f3      	b.n	10c10 <mqtt_publish+0xc0>
   10c28:	4a2f      	ldr	r2, [pc, #188]	; (10ce8 <mqtt_publish+0x198>)
   10c2a:	4015      	ands	r5, r2
   10c2c:	d504      	bpl.n	10c38 <mqtt_publish+0xe8>
   10c2e:	2280      	movs	r2, #128	; 0x80
   10c30:	3d01      	subs	r5, #1
   10c32:	4252      	negs	r2, r2
   10c34:	4315      	orrs	r5, r2
   10c36:	3501      	adds	r5, #1
   10c38:	1c38      	adds	r0, r7, #0
   10c3a:	b269      	sxtb	r1, r5
   10c3c:	302c      	adds	r0, #44	; 0x2c
   10c3e:	4798      	blx	r3
   10c40:	4e23      	ldr	r6, [pc, #140]	; (10cd0 <mqtt_publish+0x180>)
   10c42:	6978      	ldr	r0, [r7, #20]
   10c44:	47b0      	blx	r6
   10c46:	b201      	sxth	r1, r0
   10c48:	1c38      	adds	r0, r7, #0
   10c4a:	302c      	adds	r0, #44	; 0x2c
   10c4c:	4d27      	ldr	r5, [pc, #156]	; (10cec <mqtt_publish+0x19c>)
   10c4e:	47a8      	blx	r5
   10c50:	6978      	ldr	r0, [r7, #20]
   10c52:	47b0      	blx	r6
   10c54:	1c02      	adds	r2, r0, #0
   10c56:	1c38      	adds	r0, r7, #0
   10c58:	302c      	adds	r0, #44	; 0x2c
   10c5a:	6979      	ldr	r1, [r7, #20]
   10c5c:	4e24      	ldr	r6, [pc, #144]	; (10cf0 <mqtt_publish+0x1a0>)
   10c5e:	47b0      	blx	r6
   10c60:	693a      	ldr	r2, [r7, #16]
   10c62:	2a00      	cmp	r2, #0
   10c64:	d006      	beq.n	10c74 <mqtt_publish+0x124>
   10c66:	8821      	ldrh	r1, [r4, #0]
   10c68:	1c38      	adds	r0, r7, #0
   10c6a:	1c4b      	adds	r3, r1, #1
   10c6c:	8023      	strh	r3, [r4, #0]
   10c6e:	b209      	sxth	r1, r1
   10c70:	302c      	adds	r0, #44	; 0x2c
   10c72:	47a8      	blx	r5
   10c74:	8823      	ldrh	r3, [r4, #0]
   10c76:	2b00      	cmp	r3, #0
   10c78:	d101      	bne.n	10c7e <mqtt_publish+0x12e>
   10c7a:	2301      	movs	r3, #1
   10c7c:	8023      	strh	r3, [r4, #0]
   10c7e:	68bb      	ldr	r3, [r7, #8]
   10c80:	2b00      	cmp	r3, #0
   10c82:	d006      	beq.n	10c92 <mqtt_publish+0x142>
   10c84:	68fa      	ldr	r2, [r7, #12]
   10c86:	2a00      	cmp	r2, #0
   10c88:	d003      	beq.n	10c92 <mqtt_publish+0x142>
   10c8a:	1c38      	adds	r0, r7, #0
   10c8c:	302c      	adds	r0, #44	; 0x2c
   10c8e:	1c19      	adds	r1, r3, #0
   10c90:	47b0      	blx	r6
   10c92:	1c38      	adds	r0, r7, #0
   10c94:	4b17      	ldr	r3, [pc, #92]	; (10cf4 <mqtt_publish+0x1a4>)
   10c96:	302c      	adds	r0, #44	; 0x2c
   10c98:	4798      	blx	r3
   10c9a:	1c23      	adds	r3, r4, #0
   10c9c:	3343      	adds	r3, #67	; 0x43
   10c9e:	781a      	ldrb	r2, [r3, #0]
   10ca0:	2108      	movs	r1, #8
   10ca2:	438a      	bics	r2, r1
   10ca4:	701a      	strb	r2, [r3, #0]
   10ca6:	693b      	ldr	r3, [r7, #16]
   10ca8:	2500      	movs	r5, #0
   10caa:	42ab      	cmp	r3, r5
   10cac:	d10c      	bne.n	10cc8 <mqtt_publish+0x178>
   10cae:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10cb0:	42ab      	cmp	r3, r5
   10cb2:	d009      	beq.n	10cc8 <mqtt_publish+0x178>
   10cb4:	1c3a      	adds	r2, r7, #0
   10cb6:	1c20      	adds	r0, r4, #0
   10cb8:	2102      	movs	r1, #2
   10cba:	3218      	adds	r2, #24
   10cbc:	4798      	blx	r3
   10cbe:	e003      	b.n	10cc8 <mqtt_publish+0x178>
   10cc0:	2580      	movs	r5, #128	; 0x80
   10cc2:	e000      	b.n	10cc6 <mqtt_publish+0x176>
   10cc4:	250b      	movs	r5, #11
   10cc6:	426d      	negs	r5, r5
   10cc8:	1c28      	adds	r0, r5, #0
   10cca:	46bd      	mov	sp, r7
   10ccc:	b011      	add	sp, #68	; 0x44
   10cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10cd0:	00011ca3 	.word	0x00011ca3
   10cd4:	0000addd 	.word	0x0000addd
   10cd8:	000092d1 	.word	0x000092d1
   10cdc:	000105d5 	.word	0x000105d5
   10ce0:	000090e1 	.word	0x000090e1
   10ce4:	0000910d 	.word	0x0000910d
   10ce8:	8000007f 	.word	0x8000007f
   10cec:	00009135 	.word	0x00009135
   10cf0:	0000914d 	.word	0x0000914d
   10cf4:	000090f1 	.word	0x000090f1

00010cf8 <mqtt_subscribe>:
   10cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cfa:	b08d      	sub	sp, #52	; 0x34
   10cfc:	af02      	add	r7, sp, #8
   10cfe:	1c04      	adds	r4, r0, #0
   10d00:	60b9      	str	r1, [r7, #8]
   10d02:	607a      	str	r2, [r7, #4]
   10d04:	d101      	bne.n	10d0a <mqtt_subscribe+0x12>
   10d06:	2016      	movs	r0, #22
   10d08:	e086      	b.n	10e18 <mqtt_subscribe+0x120>
   10d0a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   10d0c:	466a      	mov	r2, sp
   10d0e:	3307      	adds	r3, #7
   10d10:	08db      	lsrs	r3, r3, #3
   10d12:	00db      	lsls	r3, r3, #3
   10d14:	1ad2      	subs	r2, r2, r3
   10d16:	4695      	mov	sp, r2
   10d18:	ad02      	add	r5, sp, #8
   10d1a:	603d      	str	r5, [r7, #0]
   10d1c:	68bd      	ldr	r5, [r7, #8]
   10d1e:	2d00      	cmp	r5, #0
   10d20:	d0f1      	beq.n	10d06 <mqtt_subscribe+0xe>
   10d22:	687d      	ldr	r5, [r7, #4]
   10d24:	2d02      	cmp	r5, #2
   10d26:	d8ee      	bhi.n	10d06 <mqtt_subscribe+0xe>
   10d28:	1c05      	adds	r5, r0, #0
   10d2a:	3543      	adds	r5, #67	; 0x43
   10d2c:	782b      	ldrb	r3, [r5, #0]
   10d2e:	079a      	lsls	r2, r3, #30
   10d30:	d56f      	bpl.n	10e12 <mqtt_subscribe+0x11a>
   10d32:	071a      	lsls	r2, r3, #28
   10d34:	d41a      	bmi.n	10d6c <mqtt_subscribe+0x74>
   10d36:	68b8      	ldr	r0, [r7, #8]
   10d38:	4d39      	ldr	r5, [pc, #228]	; (10e20 <mqtt_subscribe+0x128>)
   10d3a:	47a8      	blx	r5
   10d3c:	1c25      	adds	r5, r4, #0
   10d3e:	3543      	adds	r5, #67	; 0x43
   10d40:	782b      	ldrb	r3, [r5, #0]
   10d42:	2208      	movs	r2, #8
   10d44:	4313      	orrs	r3, r2
   10d46:	702b      	strb	r3, [r5, #0]
   10d48:	60fd      	str	r5, [r7, #12]
   10d4a:	1d46      	adds	r6, r0, #5
   10d4c:	9400      	str	r4, [sp, #0]
   10d4e:	1c38      	adds	r0, r7, #0
   10d50:	3014      	adds	r0, #20
   10d52:	6839      	ldr	r1, [r7, #0]
   10d54:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   10d56:	4b33      	ldr	r3, [pc, #204]	; (10e24 <mqtt_subscribe+0x12c>)
   10d58:	4d33      	ldr	r5, [pc, #204]	; (10e28 <mqtt_subscribe+0x130>)
   10d5a:	47a8      	blx	r5
   10d5c:	1c38      	adds	r0, r7, #0
   10d5e:	217e      	movs	r1, #126	; 0x7e
   10d60:	3014      	adds	r0, #20
   10d62:	4249      	negs	r1, r1
   10d64:	4b31      	ldr	r3, [pc, #196]	; (10e2c <mqtt_subscribe+0x134>)
   10d66:	4798      	blx	r3
   10d68:	4d2d      	ldr	r5, [pc, #180]	; (10e20 <mqtt_subscribe+0x128>)
   10d6a:	e00e      	b.n	10d8a <mqtt_subscribe+0x92>
   10d6c:	1c03      	adds	r3, r0, #0
   10d6e:	3370      	adds	r3, #112	; 0x70
   10d70:	781b      	ldrb	r3, [r3, #0]
   10d72:	2b00      	cmp	r3, #0
   10d74:	d14f      	bne.n	10e16 <mqtt_subscribe+0x11e>
   10d76:	782b      	ldrb	r3, [r5, #0]
   10d78:	071a      	lsls	r2, r3, #28
   10d7a:	d5dc      	bpl.n	10d36 <mqtt_subscribe+0x3e>
   10d7c:	4b2c      	ldr	r3, [pc, #176]	; (10e30 <mqtt_subscribe+0x138>)
   10d7e:	2000      	movs	r0, #0
   10d80:	4798      	blx	r3
   10d82:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   10d84:	4b2b      	ldr	r3, [pc, #172]	; (10e34 <mqtt_subscribe+0x13c>)
   10d86:	4798      	blx	r3
   10d88:	e7f5      	b.n	10d76 <mqtt_subscribe+0x7e>
   10d8a:	4b28      	ldr	r3, [pc, #160]	; (10e2c <mqtt_subscribe+0x134>)
   10d8c:	2e80      	cmp	r6, #128	; 0x80
   10d8e:	dd08      	ble.n	10da2 <mqtt_subscribe+0xaa>
   10d90:	2180      	movs	r1, #128	; 0x80
   10d92:	4249      	negs	r1, r1
   10d94:	4331      	orrs	r1, r6
   10d96:	1c38      	adds	r0, r7, #0
   10d98:	b249      	sxtb	r1, r1
   10d9a:	3014      	adds	r0, #20
   10d9c:	4798      	blx	r3
   10d9e:	11f6      	asrs	r6, r6, #7
   10da0:	e7f3      	b.n	10d8a <mqtt_subscribe+0x92>
   10da2:	4925      	ldr	r1, [pc, #148]	; (10e38 <mqtt_subscribe+0x140>)
   10da4:	4031      	ands	r1, r6
   10da6:	d504      	bpl.n	10db2 <mqtt_subscribe+0xba>
   10da8:	2280      	movs	r2, #128	; 0x80
   10daa:	3901      	subs	r1, #1
   10dac:	4252      	negs	r2, r2
   10dae:	4311      	orrs	r1, r2
   10db0:	3101      	adds	r1, #1
   10db2:	1c38      	adds	r0, r7, #0
   10db4:	b249      	sxtb	r1, r1
   10db6:	3014      	adds	r0, #20
   10db8:	4798      	blx	r3
   10dba:	8821      	ldrh	r1, [r4, #0]
   10dbc:	1c38      	adds	r0, r7, #0
   10dbe:	1c4b      	adds	r3, r1, #1
   10dc0:	8023      	strh	r3, [r4, #0]
   10dc2:	b209      	sxth	r1, r1
   10dc4:	3014      	adds	r0, #20
   10dc6:	4e1d      	ldr	r6, [pc, #116]	; (10e3c <mqtt_subscribe+0x144>)
   10dc8:	47b0      	blx	r6
   10dca:	8823      	ldrh	r3, [r4, #0]
   10dcc:	2b00      	cmp	r3, #0
   10dce:	d101      	bne.n	10dd4 <mqtt_subscribe+0xdc>
   10dd0:	2301      	movs	r3, #1
   10dd2:	8023      	strh	r3, [r4, #0]
   10dd4:	68b8      	ldr	r0, [r7, #8]
   10dd6:	47a8      	blx	r5
   10dd8:	b201      	sxth	r1, r0
   10dda:	1c38      	adds	r0, r7, #0
   10ddc:	3014      	adds	r0, #20
   10dde:	47b0      	blx	r6
   10de0:	68b8      	ldr	r0, [r7, #8]
   10de2:	47a8      	blx	r5
   10de4:	1c02      	adds	r2, r0, #0
   10de6:	1c38      	adds	r0, r7, #0
   10de8:	3014      	adds	r0, #20
   10dea:	68b9      	ldr	r1, [r7, #8]
   10dec:	4b14      	ldr	r3, [pc, #80]	; (10e40 <mqtt_subscribe+0x148>)
   10dee:	4798      	blx	r3
   10df0:	687d      	ldr	r5, [r7, #4]
   10df2:	1c38      	adds	r0, r7, #0
   10df4:	b269      	sxtb	r1, r5
   10df6:	3014      	adds	r0, #20
   10df8:	4b0c      	ldr	r3, [pc, #48]	; (10e2c <mqtt_subscribe+0x134>)
   10dfa:	4798      	blx	r3
   10dfc:	1c38      	adds	r0, r7, #0
   10dfe:	3014      	adds	r0, #20
   10e00:	4b10      	ldr	r3, [pc, #64]	; (10e44 <mqtt_subscribe+0x14c>)
   10e02:	4798      	blx	r3
   10e04:	68fd      	ldr	r5, [r7, #12]
   10e06:	2208      	movs	r2, #8
   10e08:	782b      	ldrb	r3, [r5, #0]
   10e0a:	2000      	movs	r0, #0
   10e0c:	4393      	bics	r3, r2
   10e0e:	702b      	strb	r3, [r5, #0]
   10e10:	e003      	b.n	10e1a <mqtt_subscribe+0x122>
   10e12:	2080      	movs	r0, #128	; 0x80
   10e14:	e000      	b.n	10e18 <mqtt_subscribe+0x120>
   10e16:	200b      	movs	r0, #11
   10e18:	4240      	negs	r0, r0
   10e1a:	46bd      	mov	sp, r7
   10e1c:	b00b      	add	sp, #44	; 0x2c
   10e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e20:	00011ca3 	.word	0x00011ca3
   10e24:	000105d5 	.word	0x000105d5
   10e28:	000090e1 	.word	0x000090e1
   10e2c:	0000910d 	.word	0x0000910d
   10e30:	0000addd 	.word	0x0000addd
   10e34:	000092d1 	.word	0x000092d1
   10e38:	8000007f 	.word	0x8000007f
   10e3c:	00009135 	.word	0x00009135
   10e40:	0000914d 	.word	0x0000914d
   10e44:	000090f1 	.word	0x000090f1

00010e48 <_mqtt_ping>:
   10e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10e4a:	23c0      	movs	r3, #192	; 0xc0
   10e4c:	a901      	add	r1, sp, #4
   10e4e:	2500      	movs	r5, #0
   10e50:	700b      	strb	r3, [r1, #0]
   10e52:	704d      	strb	r5, [r1, #1]
   10e54:	42a8      	cmp	r0, r5
   10e56:	d019      	beq.n	10e8c <_mqtt_ping+0x44>
   10e58:	1c04      	adds	r4, r0, #0
   10e5a:	3443      	adds	r4, #67	; 0x43
   10e5c:	7823      	ldrb	r3, [r4, #0]
   10e5e:	079a      	lsls	r2, r3, #30
   10e60:	d516      	bpl.n	10e90 <_mqtt_ping+0x48>
   10e62:	071a      	lsls	r2, r3, #28
   10e64:	d416      	bmi.n	10e94 <_mqtt_ping+0x4c>
   10e66:	2608      	movs	r6, #8
   10e68:	4333      	orrs	r3, r6
   10e6a:	7023      	strb	r3, [r4, #0]
   10e6c:	7880      	ldrb	r0, [r0, #2]
   10e6e:	1c2b      	adds	r3, r5, #0
   10e70:	b240      	sxtb	r0, r0
   10e72:	2202      	movs	r2, #2
   10e74:	4f09      	ldr	r7, [pc, #36]	; (10e9c <_mqtt_ping+0x54>)
   10e76:	47b8      	blx	r7
   10e78:	1c2b      	adds	r3, r5, #0
   10e7a:	42a8      	cmp	r0, r5
   10e7c:	da0c      	bge.n	10e98 <_mqtt_ping+0x50>
   10e7e:	7823      	ldrb	r3, [r4, #0]
   10e80:	43b3      	bics	r3, r6
   10e82:	7023      	strb	r3, [r4, #0]
   10e84:	4b06      	ldr	r3, [pc, #24]	; (10ea0 <_mqtt_ping+0x58>)
   10e86:	4798      	blx	r3
   10e88:	1c03      	adds	r3, r0, #0
   10e8a:	e005      	b.n	10e98 <_mqtt_ping+0x50>
   10e8c:	2316      	movs	r3, #22
   10e8e:	e002      	b.n	10e96 <_mqtt_ping+0x4e>
   10e90:	2380      	movs	r3, #128	; 0x80
   10e92:	e000      	b.n	10e96 <_mqtt_ping+0x4e>
   10e94:	230b      	movs	r3, #11
   10e96:	425b      	negs	r3, r3
   10e98:	1c18      	adds	r0, r3, #0
   10e9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10e9c:	0000cb7d 	.word	0x0000cb7d
   10ea0:	00010585 	.word	0x00010585

00010ea4 <mqtt_timer_callback>:
   10ea4:	b570      	push	{r4, r5, r6, lr}
   10ea6:	1c05      	adds	r5, r0, #0
   10ea8:	b086      	sub	sp, #24
   10eaa:	1c0e      	adds	r6, r1, #0
   10eac:	1c14      	adds	r4, r2, #0
   10eae:	2800      	cmp	r0, #0
   10eb0:	d012      	beq.n	10ed8 <mqtt_timer_callback+0x34>
   10eb2:	2a00      	cmp	r2, #0
   10eb4:	d010      	beq.n	10ed8 <mqtt_timer_callback+0x34>
   10eb6:	1c10      	adds	r0, r2, #0
   10eb8:	4b08      	ldr	r3, [pc, #32]	; (10edc <mqtt_timer_callback+0x38>)
   10eba:	4798      	blx	r3
   10ebc:	2800      	cmp	r0, #0
   10ebe:	da04      	bge.n	10eca <mqtt_timer_callback+0x26>
   10ec0:	1c28      	adds	r0, r5, #0
   10ec2:	1c31      	adds	r1, r6, #0
   10ec4:	2200      	movs	r2, #0
   10ec6:	4b06      	ldr	r3, [pc, #24]	; (10ee0 <mqtt_timer_callback+0x3c>)
   10ec8:	e005      	b.n	10ed6 <mqtt_timer_callback+0x32>
   10eca:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10ecc:	2b00      	cmp	r3, #0
   10ece:	d003      	beq.n	10ed8 <mqtt_timer_callback+0x34>
   10ed0:	1c20      	adds	r0, r4, #0
   10ed2:	2107      	movs	r1, #7
   10ed4:	aa01      	add	r2, sp, #4
   10ed6:	4798      	blx	r3
   10ed8:	b006      	add	sp, #24
   10eda:	bd70      	pop	{r4, r5, r6, pc}
   10edc:	00010e49 	.word	0x00010e49
   10ee0:	00009295 	.word	0x00009295

00010ee4 <_mqtt_puback>:
   10ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10ee6:	2302      	movs	r3, #2
   10ee8:	ac01      	add	r4, sp, #4
   10eea:	2700      	movs	r7, #0
   10eec:	7063      	strb	r3, [r4, #1]
   10eee:	42b8      	cmp	r0, r7
   10ef0:	d01e      	beq.n	10f30 <_mqtt_puback+0x4c>
   10ef2:	1c05      	adds	r5, r0, #0
   10ef4:	3543      	adds	r5, #67	; 0x43
   10ef6:	782b      	ldrb	r3, [r5, #0]
   10ef8:	079e      	lsls	r6, r3, #30
   10efa:	d51b      	bpl.n	10f34 <_mqtt_puback+0x50>
   10efc:	071e      	lsls	r6, r3, #28
   10efe:	d41b      	bmi.n	10f38 <_mqtt_puback+0x54>
   10f00:	2608      	movs	r6, #8
   10f02:	4333      	orrs	r3, r6
   10f04:	702b      	strb	r3, [r5, #0]
   10f06:	7880      	ldrb	r0, [r0, #2]
   10f08:	7021      	strb	r1, [r4, #0]
   10f0a:	0a11      	lsrs	r1, r2, #8
   10f0c:	70a1      	strb	r1, [r4, #2]
   10f0e:	70e2      	strb	r2, [r4, #3]
   10f10:	1c21      	adds	r1, r4, #0
   10f12:	1c3b      	adds	r3, r7, #0
   10f14:	b240      	sxtb	r0, r0
   10f16:	2204      	movs	r2, #4
   10f18:	4c09      	ldr	r4, [pc, #36]	; (10f40 <_mqtt_puback+0x5c>)
   10f1a:	47a0      	blx	r4
   10f1c:	1c3b      	adds	r3, r7, #0
   10f1e:	42b8      	cmp	r0, r7
   10f20:	da0c      	bge.n	10f3c <_mqtt_puback+0x58>
   10f22:	782b      	ldrb	r3, [r5, #0]
   10f24:	43b3      	bics	r3, r6
   10f26:	702b      	strb	r3, [r5, #0]
   10f28:	4b06      	ldr	r3, [pc, #24]	; (10f44 <_mqtt_puback+0x60>)
   10f2a:	4798      	blx	r3
   10f2c:	1c03      	adds	r3, r0, #0
   10f2e:	e005      	b.n	10f3c <_mqtt_puback+0x58>
   10f30:	2316      	movs	r3, #22
   10f32:	e002      	b.n	10f3a <_mqtt_puback+0x56>
   10f34:	2380      	movs	r3, #128	; 0x80
   10f36:	e000      	b.n	10f3a <_mqtt_puback+0x56>
   10f38:	230b      	movs	r3, #11
   10f3a:	425b      	negs	r3, r3
   10f3c:	1c18      	adds	r0, r3, #0
   10f3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10f40:	0000cb7d 	.word	0x0000cb7d
   10f44:	00010585 	.word	0x00010585

00010f48 <mqtt_clear_conn>:
   10f48:	b530      	push	{r4, r5, lr}
   10f4a:	1c04      	adds	r4, r0, #0
   10f4c:	b087      	sub	sp, #28
   10f4e:	2800      	cmp	r0, #0
   10f50:	d01c      	beq.n	10f8c <mqtt_clear_conn+0x44>
   10f52:	2002      	movs	r0, #2
   10f54:	4b0e      	ldr	r3, [pc, #56]	; (10f90 <mqtt_clear_conn+0x48>)
   10f56:	5620      	ldrsb	r0, [r4, r0]
   10f58:	4798      	blx	r3
   10f5a:	1c23      	adds	r3, r4, #0
   10f5c:	3343      	adds	r3, #67	; 0x43
   10f5e:	781a      	ldrb	r2, [r3, #0]
   10f60:	21fc      	movs	r1, #252	; 0xfc
   10f62:	0795      	lsls	r5, r2, #30
   10f64:	400a      	ands	r2, r1
   10f66:	701a      	strb	r2, [r3, #0]
   10f68:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   10f6a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   10f6c:	9301      	str	r3, [sp, #4]
   10f6e:	2300      	movs	r3, #0
   10f70:	64e3      	str	r3, [r4, #76]	; 0x4c
   10f72:	6d21      	ldr	r1, [r4, #80]	; 0x50
   10f74:	4b07      	ldr	r3, [pc, #28]	; (10f94 <mqtt_clear_conn+0x4c>)
   10f76:	4798      	blx	r3
   10f78:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10f7a:	0fed      	lsrs	r5, r5, #31
   10f7c:	2b00      	cmp	r3, #0
   10f7e:	d005      	beq.n	10f8c <mqtt_clear_conn+0x44>
   10f80:	2d00      	cmp	r5, #0
   10f82:	d003      	beq.n	10f8c <mqtt_clear_conn+0x44>
   10f84:	1c20      	adds	r0, r4, #0
   10f86:	2105      	movs	r1, #5
   10f88:	aa01      	add	r2, sp, #4
   10f8a:	4798      	blx	r3
   10f8c:	b007      	add	sp, #28
   10f8e:	bd30      	pop	{r4, r5, pc}
   10f90:	0000cca9 	.word	0x0000cca9
   10f94:	000092c1 	.word	0x000092c1

00010f98 <mqtt_disconnect>:
   10f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10f9a:	23e0      	movs	r3, #224	; 0xe0
   10f9c:	ae01      	add	r6, sp, #4
   10f9e:	2700      	movs	r7, #0
   10fa0:	1c05      	adds	r5, r0, #0
   10fa2:	7033      	strb	r3, [r6, #0]
   10fa4:	7077      	strb	r7, [r6, #1]
   10fa6:	42b8      	cmp	r0, r7
   10fa8:	d036      	beq.n	11018 <mqtt_disconnect+0x80>
   10faa:	1c04      	adds	r4, r0, #0
   10fac:	3443      	adds	r4, #67	; 0x43
   10fae:	7823      	ldrb	r3, [r4, #0]
   10fb0:	079a      	lsls	r2, r3, #30
   10fb2:	d533      	bpl.n	1101c <mqtt_disconnect+0x84>
   10fb4:	42b9      	cmp	r1, r7
   10fb6:	d12b      	bne.n	11010 <mqtt_disconnect+0x78>
   10fb8:	071a      	lsls	r2, r3, #28
   10fba:	d414      	bmi.n	10fe6 <mqtt_disconnect+0x4e>
   10fbc:	7823      	ldrb	r3, [r4, #0]
   10fbe:	2210      	movs	r2, #16
   10fc0:	4313      	orrs	r3, r2
   10fc2:	2708      	movs	r7, #8
   10fc4:	433b      	orrs	r3, r7
   10fc6:	7023      	strb	r3, [r4, #0]
   10fc8:	2002      	movs	r0, #2
   10fca:	5628      	ldrsb	r0, [r5, r0]
   10fcc:	1c31      	adds	r1, r6, #0
   10fce:	2202      	movs	r2, #2
   10fd0:	2300      	movs	r3, #0
   10fd2:	4d15      	ldr	r5, [pc, #84]	; (11028 <mqtt_disconnect+0x90>)
   10fd4:	47a8      	blx	r5
   10fd6:	2800      	cmp	r0, #0
   10fd8:	da14      	bge.n	11004 <mqtt_disconnect+0x6c>
   10fda:	7823      	ldrb	r3, [r4, #0]
   10fdc:	43bb      	bics	r3, r7
   10fde:	7023      	strb	r3, [r4, #0]
   10fe0:	4b12      	ldr	r3, [pc, #72]	; (1102c <mqtt_disconnect+0x94>)
   10fe2:	4798      	blx	r3
   10fe4:	e01e      	b.n	11024 <mqtt_disconnect+0x8c>
   10fe6:	1c03      	adds	r3, r0, #0
   10fe8:	3370      	adds	r3, #112	; 0x70
   10fea:	781b      	ldrb	r3, [r3, #0]
   10fec:	2b00      	cmp	r3, #0
   10fee:	d117      	bne.n	11020 <mqtt_disconnect+0x88>
   10ff0:	7823      	ldrb	r3, [r4, #0]
   10ff2:	071a      	lsls	r2, r3, #28
   10ff4:	d5e2      	bpl.n	10fbc <mqtt_disconnect+0x24>
   10ff6:	4b0e      	ldr	r3, [pc, #56]	; (11030 <mqtt_disconnect+0x98>)
   10ff8:	2000      	movs	r0, #0
   10ffa:	4798      	blx	r3
   10ffc:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   10ffe:	4b0d      	ldr	r3, [pc, #52]	; (11034 <mqtt_disconnect+0x9c>)
   11000:	4798      	blx	r3
   11002:	e7f5      	b.n	10ff0 <mqtt_disconnect+0x58>
   11004:	7823      	ldrb	r3, [r4, #0]
   11006:	2202      	movs	r2, #2
   11008:	4393      	bics	r3, r2
   1100a:	7023      	strb	r3, [r4, #0]
   1100c:	2000      	movs	r0, #0
   1100e:	e009      	b.n	11024 <mqtt_disconnect+0x8c>
   11010:	4b09      	ldr	r3, [pc, #36]	; (11038 <mqtt_disconnect+0xa0>)
   11012:	4798      	blx	r3
   11014:	1c38      	adds	r0, r7, #0
   11016:	e005      	b.n	11024 <mqtt_disconnect+0x8c>
   11018:	2016      	movs	r0, #22
   1101a:	e002      	b.n	11022 <mqtt_disconnect+0x8a>
   1101c:	2080      	movs	r0, #128	; 0x80
   1101e:	e000      	b.n	11022 <mqtt_disconnect+0x8a>
   11020:	200b      	movs	r0, #11
   11022:	4240      	negs	r0, r0
   11024:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11026:	46c0      	nop			; (mov r8, r8)
   11028:	0000cb7d 	.word	0x0000cb7d
   1102c:	00010585 	.word	0x00010585
   11030:	0000addd 	.word	0x0000addd
   11034:	000092d1 	.word	0x000092d1
   11038:	00010f49 	.word	0x00010f49

0001103c <_mqtt_recv_handler>:
   1103c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1103e:	1c04      	adds	r4, r0, #0
   11040:	6e40      	ldr	r0, [r0, #100]	; 0x64
   11042:	230f      	movs	r3, #15
   11044:	7802      	ldrb	r2, [r0, #0]
   11046:	b087      	sub	sp, #28
   11048:	1c15      	adds	r5, r2, #0
   1104a:	439d      	bics	r5, r3
   1104c:	2d50      	cmp	r5, #80	; 0x50
   1104e:	d100      	bne.n	11052 <_mqtt_recv_handler+0x16>
   11050:	e098      	b.n	11184 <_mqtt_recv_handler+0x148>
   11052:	d808      	bhi.n	11066 <_mqtt_recv_handler+0x2a>
   11054:	2d30      	cmp	r5, #48	; 0x30
   11056:	d03f      	beq.n	110d8 <_mqtt_recv_handler+0x9c>
   11058:	2d40      	cmp	r5, #64	; 0x40
   1105a:	d100      	bne.n	1105e <_mqtt_recv_handler+0x22>
   1105c:	e0b3      	b.n	111c6 <_mqtt_recv_handler+0x18a>
   1105e:	2d20      	cmp	r5, #32
   11060:	d000      	beq.n	11064 <_mqtt_recv_handler+0x28>
   11062:	e0c3      	b.n	111ec <_mqtt_recv_handler+0x1b0>
   11064:	e00e      	b.n	11084 <_mqtt_recv_handler+0x48>
   11066:	2d70      	cmp	r5, #112	; 0x70
   11068:	d100      	bne.n	1106c <_mqtt_recv_handler+0x30>
   1106a:	e0ac      	b.n	111c6 <_mqtt_recv_handler+0x18a>
   1106c:	d803      	bhi.n	11076 <_mqtt_recv_handler+0x3a>
   1106e:	2d60      	cmp	r5, #96	; 0x60
   11070:	d100      	bne.n	11074 <_mqtt_recv_handler+0x38>
   11072:	e096      	b.n	111a2 <_mqtt_recv_handler+0x166>
   11074:	e0ba      	b.n	111ec <_mqtt_recv_handler+0x1b0>
   11076:	2d90      	cmp	r5, #144	; 0x90
   11078:	d100      	bne.n	1107c <_mqtt_recv_handler+0x40>
   1107a:	e0aa      	b.n	111d2 <_mqtt_recv_handler+0x196>
   1107c:	2db0      	cmp	r5, #176	; 0xb0
   1107e:	d100      	bne.n	11082 <_mqtt_recv_handler+0x46>
   11080:	e0ad      	b.n	111de <_mqtt_recv_handler+0x1a2>
   11082:	e0b3      	b.n	111ec <_mqtt_recv_handler+0x1b0>
   11084:	aa01      	add	r2, sp, #4
   11086:	2303      	movs	r3, #3
   11088:	2901      	cmp	r1, #1
   1108a:	d900      	bls.n	1108e <_mqtt_recv_handler+0x52>
   1108c:	78c3      	ldrb	r3, [r0, #3]
   1108e:	7013      	strb	r3, [r2, #0]
   11090:	7813      	ldrb	r3, [r2, #0]
   11092:	2b00      	cmp	r3, #0
   11094:	d00d      	beq.n	110b2 <_mqtt_recv_handler+0x76>
   11096:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11098:	2b00      	cmp	r3, #0
   1109a:	d002      	beq.n	110a2 <_mqtt_recv_handler+0x66>
   1109c:	1c20      	adds	r0, r4, #0
   1109e:	2101      	movs	r1, #1
   110a0:	4798      	blx	r3
   110a2:	236f      	movs	r3, #111	; 0x6f
   110a4:	425b      	negs	r3, r3
   110a6:	64e3      	str	r3, [r4, #76]	; 0x4c
   110a8:	1c20      	adds	r0, r4, #0
   110aa:	2100      	movs	r1, #0
   110ac:	4b50      	ldr	r3, [pc, #320]	; (111f0 <_mqtt_recv_handler+0x1b4>)
   110ae:	4798      	blx	r3
   110b0:	e09c      	b.n	111ec <_mqtt_recv_handler+0x1b0>
   110b2:	1c23      	adds	r3, r4, #0
   110b4:	3343      	adds	r3, #67	; 0x43
   110b6:	7819      	ldrb	r1, [r3, #0]
   110b8:	0789      	lsls	r1, r1, #30
   110ba:	0fc9      	lsrs	r1, r1, #31
   110bc:	d105      	bne.n	110ca <_mqtt_recv_handler+0x8e>
   110be:	781a      	ldrb	r2, [r3, #0]
   110c0:	64e1      	str	r1, [r4, #76]	; 0x4c
   110c2:	2102      	movs	r1, #2
   110c4:	430a      	orrs	r2, r1
   110c6:	701a      	strb	r2, [r3, #0]
   110c8:	e090      	b.n	111ec <_mqtt_recv_handler+0x1b0>
   110ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
   110cc:	2b00      	cmp	r3, #0
   110ce:	d100      	bne.n	110d2 <_mqtt_recv_handler+0x96>
   110d0:	e08c      	b.n	111ec <_mqtt_recv_handler+0x1b0>
   110d2:	1c20      	adds	r0, r4, #0
   110d4:	2101      	movs	r1, #1
   110d6:	e088      	b.n	111ea <_mqtt_recv_handler+0x1ae>
   110d8:	ad01      	add	r5, sp, #4
   110da:	0713      	lsls	r3, r2, #28
   110dc:	7c2a      	ldrb	r2, [r5, #16]
   110de:	0fdb      	lsrs	r3, r3, #31
   110e0:	2604      	movs	r6, #4
   110e2:	009b      	lsls	r3, r3, #2
   110e4:	43b2      	bics	r2, r6
   110e6:	431a      	orrs	r2, r3
   110e8:	742a      	strb	r2, [r5, #16]
   110ea:	7807      	ldrb	r7, [r0, #0]
   110ec:	2303      	movs	r3, #3
   110ee:	b2d2      	uxtb	r2, r2
   110f0:	087f      	lsrs	r7, r7, #1
   110f2:	439a      	bics	r2, r3
   110f4:	401f      	ands	r7, r3
   110f6:	1c13      	adds	r3, r2, #0
   110f8:	433b      	orrs	r3, r7
   110fa:	742b      	strb	r3, [r5, #16]
   110fc:	1c43      	adds	r3, r0, #1
   110fe:	7818      	ldrb	r0, [r3, #0]
   11100:	1c5a      	adds	r2, r3, #1
   11102:	287f      	cmp	r0, #127	; 0x7f
   11104:	d901      	bls.n	1110a <_mqtt_recv_handler+0xce>
   11106:	1c13      	adds	r3, r2, #0
   11108:	e7f9      	b.n	110fe <_mqtt_recv_handler+0xc2>
   1110a:	7858      	ldrb	r0, [r3, #1]
   1110c:	789e      	ldrb	r6, [r3, #2]
   1110e:	0200      	lsls	r0, r0, #8
   11110:	4330      	orrs	r0, r6
   11112:	3303      	adds	r3, #3
   11114:	2600      	movs	r6, #0
   11116:	6068      	str	r0, [r5, #4]
   11118:	9301      	str	r3, [sp, #4]
   1111a:	1818      	adds	r0, r3, r0
   1111c:	42b7      	cmp	r7, r6
   1111e:	d004      	beq.n	1112a <_mqtt_recv_handler+0xee>
   11120:	7806      	ldrb	r6, [r0, #0]
   11122:	7843      	ldrb	r3, [r0, #1]
   11124:	0236      	lsls	r6, r6, #8
   11126:	431e      	orrs	r6, r3
   11128:	3002      	adds	r0, #2
   1112a:	1851      	adds	r1, r2, r1
   1112c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1112e:	60a8      	str	r0, [r5, #8]
   11130:	1a08      	subs	r0, r1, r0
   11132:	60e8      	str	r0, [r5, #12]
   11134:	2b00      	cmp	r3, #0
   11136:	d003      	beq.n	11140 <_mqtt_recv_handler+0x104>
   11138:	1c20      	adds	r0, r4, #0
   1113a:	2106      	movs	r1, #6
   1113c:	1c2a      	adds	r2, r5, #0
   1113e:	4798      	blx	r3
   11140:	7c2b      	ldrb	r3, [r5, #16]
   11142:	079b      	lsls	r3, r3, #30
   11144:	0f9b      	lsrs	r3, r3, #30
   11146:	2b01      	cmp	r3, #1
   11148:	d10b      	bne.n	11162 <_mqtt_recv_handler+0x126>
   1114a:	b2b6      	uxth	r6, r6
   1114c:	1c20      	adds	r0, r4, #0
   1114e:	2140      	movs	r1, #64	; 0x40
   11150:	1c32      	adds	r2, r6, #0
   11152:	4b28      	ldr	r3, [pc, #160]	; (111f4 <_mqtt_recv_handler+0x1b8>)
   11154:	4798      	blx	r3
   11156:	2800      	cmp	r0, #0
   11158:	d048      	beq.n	111ec <_mqtt_recv_handler+0x1b0>
   1115a:	1c23      	adds	r3, r4, #0
   1115c:	3348      	adds	r3, #72	; 0x48
   1115e:	2240      	movs	r2, #64	; 0x40
   11160:	e00c      	b.n	1117c <_mqtt_recv_handler+0x140>
   11162:	2b02      	cmp	r3, #2
   11164:	d142      	bne.n	111ec <_mqtt_recv_handler+0x1b0>
   11166:	b2b6      	uxth	r6, r6
   11168:	1c20      	adds	r0, r4, #0
   1116a:	2150      	movs	r1, #80	; 0x50
   1116c:	1c32      	adds	r2, r6, #0
   1116e:	4b21      	ldr	r3, [pc, #132]	; (111f4 <_mqtt_recv_handler+0x1b8>)
   11170:	4798      	blx	r3
   11172:	2800      	cmp	r0, #0
   11174:	d03a      	beq.n	111ec <_mqtt_recv_handler+0x1b0>
   11176:	1c23      	adds	r3, r4, #0
   11178:	3348      	adds	r3, #72	; 0x48
   1117a:	2250      	movs	r2, #80	; 0x50
   1117c:	344a      	adds	r4, #74	; 0x4a
   1117e:	701a      	strb	r2, [r3, #0]
   11180:	8026      	strh	r6, [r4, #0]
   11182:	e033      	b.n	111ec <_mqtt_recv_handler+0x1b0>
   11184:	7885      	ldrb	r5, [r0, #2]
   11186:	78c3      	ldrb	r3, [r0, #3]
   11188:	022d      	lsls	r5, r5, #8
   1118a:	431d      	orrs	r5, r3
   1118c:	1c20      	adds	r0, r4, #0
   1118e:	2162      	movs	r1, #98	; 0x62
   11190:	1c2a      	adds	r2, r5, #0
   11192:	4b18      	ldr	r3, [pc, #96]	; (111f4 <_mqtt_recv_handler+0x1b8>)
   11194:	4798      	blx	r3
   11196:	2800      	cmp	r0, #0
   11198:	d028      	beq.n	111ec <_mqtt_recv_handler+0x1b0>
   1119a:	1c23      	adds	r3, r4, #0
   1119c:	3348      	adds	r3, #72	; 0x48
   1119e:	2260      	movs	r2, #96	; 0x60
   111a0:	e00d      	b.n	111be <_mqtt_recv_handler+0x182>
   111a2:	7885      	ldrb	r5, [r0, #2]
   111a4:	78c3      	ldrb	r3, [r0, #3]
   111a6:	022d      	lsls	r5, r5, #8
   111a8:	431d      	orrs	r5, r3
   111aa:	1c20      	adds	r0, r4, #0
   111ac:	2170      	movs	r1, #112	; 0x70
   111ae:	1c2a      	adds	r2, r5, #0
   111b0:	4b10      	ldr	r3, [pc, #64]	; (111f4 <_mqtt_recv_handler+0x1b8>)
   111b2:	4798      	blx	r3
   111b4:	2800      	cmp	r0, #0
   111b6:	d019      	beq.n	111ec <_mqtt_recv_handler+0x1b0>
   111b8:	1c23      	adds	r3, r4, #0
   111ba:	3348      	adds	r3, #72	; 0x48
   111bc:	2270      	movs	r2, #112	; 0x70
   111be:	344a      	adds	r4, #74	; 0x4a
   111c0:	701a      	strb	r2, [r3, #0]
   111c2:	8025      	strh	r5, [r4, #0]
   111c4:	e012      	b.n	111ec <_mqtt_recv_handler+0x1b0>
   111c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   111c8:	2b00      	cmp	r3, #0
   111ca:	d00f      	beq.n	111ec <_mqtt_recv_handler+0x1b0>
   111cc:	1c20      	adds	r0, r4, #0
   111ce:	2102      	movs	r1, #2
   111d0:	e00a      	b.n	111e8 <_mqtt_recv_handler+0x1ac>
   111d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   111d4:	2b00      	cmp	r3, #0
   111d6:	d009      	beq.n	111ec <_mqtt_recv_handler+0x1b0>
   111d8:	1c20      	adds	r0, r4, #0
   111da:	2103      	movs	r1, #3
   111dc:	e004      	b.n	111e8 <_mqtt_recv_handler+0x1ac>
   111de:	6d63      	ldr	r3, [r4, #84]	; 0x54
   111e0:	2b00      	cmp	r3, #0
   111e2:	d003      	beq.n	111ec <_mqtt_recv_handler+0x1b0>
   111e4:	1c20      	adds	r0, r4, #0
   111e6:	2104      	movs	r1, #4
   111e8:	aa01      	add	r2, sp, #4
   111ea:	4798      	blx	r3
   111ec:	b007      	add	sp, #28
   111ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111f0:	00010f99 	.word	0x00010f99
   111f4:	00010ee5 	.word	0x00010ee5

000111f8 <mqtt_recv_packet>:
   111f8:	b538      	push	{r3, r4, r5, lr}
   111fa:	1e04      	subs	r4, r0, #0
   111fc:	d017      	beq.n	1122e <mqtt_recv_packet+0x36>
   111fe:	6c42      	ldr	r2, [r0, #68]	; 0x44
   11200:	6e83      	ldr	r3, [r0, #104]	; 0x68
   11202:	429a      	cmp	r2, r3
   11204:	d906      	bls.n	11214 <mqtt_recv_packet+0x1c>
   11206:	238b      	movs	r3, #139	; 0x8b
   11208:	425b      	negs	r3, r3
   1120a:	64c3      	str	r3, [r0, #76]	; 0x4c
   1120c:	2100      	movs	r1, #0
   1120e:	4b08      	ldr	r3, [pc, #32]	; (11230 <mqtt_recv_packet+0x38>)
   11210:	4798      	blx	r3
   11212:	e00c      	b.n	1122e <mqtt_recv_packet+0x36>
   11214:	6c62      	ldr	r2, [r4, #68]	; 0x44
   11216:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11218:	2002      	movs	r0, #2
   1121a:	1899      	adds	r1, r3, r2
   1121c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1121e:	5620      	ldrsb	r0, [r4, r0]
   11220:	1a9a      	subs	r2, r3, r2
   11222:	b292      	uxth	r2, r2
   11224:	2300      	movs	r3, #0
   11226:	4d03      	ldr	r5, [pc, #12]	; (11234 <mqtt_recv_packet+0x3c>)
   11228:	47a8      	blx	r5
   1122a:	2800      	cmp	r0, #0
   1122c:	d1f2      	bne.n	11214 <mqtt_recv_packet+0x1c>
   1122e:	bd38      	pop	{r3, r4, r5, pc}
   11230:	00010f99 	.word	0x00010f99
   11234:	0000cc15 	.word	0x0000cc15

00011238 <mqtt_recved_packet>:
   11238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1123a:	1e04      	subs	r4, r0, #0
   1123c:	d042      	beq.n	112c4 <mqtt_recved_packet+0x8c>
   1123e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   11240:	6e67      	ldr	r7, [r4, #100]	; 0x64
   11242:	18ca      	adds	r2, r1, r3
   11244:	2301      	movs	r3, #1
   11246:	9701      	str	r7, [sp, #4]
   11248:	6462      	str	r2, [r4, #68]	; 0x44
   1124a:	2600      	movs	r6, #0
   1124c:	1c1d      	adds	r5, r3, #0
   1124e:	42a9      	cmp	r1, r5
   11250:	dc03      	bgt.n	1125a <mqtt_recved_packet+0x22>
   11252:	1c20      	adds	r0, r4, #0
   11254:	4b1c      	ldr	r3, [pc, #112]	; (112c8 <mqtt_recved_packet+0x90>)
   11256:	4798      	blx	r3
   11258:	e034      	b.n	112c4 <mqtt_recved_packet+0x8c>
   1125a:	9f01      	ldr	r7, [sp, #4]
   1125c:	5d78      	ldrb	r0, [r7, r5]
   1125e:	01df      	lsls	r7, r3, #7
   11260:	46bc      	mov	ip, r7
   11262:	2d03      	cmp	r5, #3
   11264:	d101      	bne.n	1126a <mqtt_recved_packet+0x32>
   11266:	234d      	movs	r3, #77	; 0x4d
   11268:	e00e      	b.n	11288 <mqtt_recved_packet+0x50>
   1126a:	277f      	movs	r7, #127	; 0x7f
   1126c:	4007      	ands	r7, r0
   1126e:	437b      	muls	r3, r7
   11270:	b240      	sxtb	r0, r0
   11272:	3501      	adds	r5, #1
   11274:	18f6      	adds	r6, r6, r3
   11276:	2800      	cmp	r0, #0
   11278:	da01      	bge.n	1127e <mqtt_recved_packet+0x46>
   1127a:	4663      	mov	r3, ip
   1127c:	e7e7      	b.n	1124e <mqtt_recved_packet+0x16>
   1127e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   11280:	19af      	adds	r7, r5, r6
   11282:	429f      	cmp	r7, r3
   11284:	d907      	bls.n	11296 <mqtt_recved_packet+0x5e>
   11286:	238b      	movs	r3, #139	; 0x8b
   11288:	425b      	negs	r3, r3
   1128a:	64e3      	str	r3, [r4, #76]	; 0x4c
   1128c:	1c20      	adds	r0, r4, #0
   1128e:	2100      	movs	r1, #0
   11290:	4b0e      	ldr	r3, [pc, #56]	; (112cc <mqtt_recved_packet+0x94>)
   11292:	4798      	blx	r3
   11294:	e016      	b.n	112c4 <mqtt_recved_packet+0x8c>
   11296:	42ba      	cmp	r2, r7
   11298:	d314      	bcc.n	112c4 <mqtt_recved_packet+0x8c>
   1129a:	4b0d      	ldr	r3, [pc, #52]	; (112d0 <mqtt_recved_packet+0x98>)
   1129c:	1c20      	adds	r0, r4, #0
   1129e:	1c31      	adds	r1, r6, #0
   112a0:	4798      	blx	r3
   112a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   112a4:	42bb      	cmp	r3, r7
   112a6:	d102      	bne.n	112ae <mqtt_recved_packet+0x76>
   112a8:	2300      	movs	r3, #0
   112aa:	6463      	str	r3, [r4, #68]	; 0x44
   112ac:	e00a      	b.n	112c4 <mqtt_recved_packet+0x8c>
   112ae:	1b9e      	subs	r6, r3, r6
   112b0:	9b01      	ldr	r3, [sp, #4]
   112b2:	1b75      	subs	r5, r6, r5
   112b4:	19d9      	adds	r1, r3, r7
   112b6:	1c18      	adds	r0, r3, #0
   112b8:	1c2a      	adds	r2, r5, #0
   112ba:	4b06      	ldr	r3, [pc, #24]	; (112d4 <mqtt_recved_packet+0x9c>)
   112bc:	4798      	blx	r3
   112be:	6465      	str	r5, [r4, #68]	; 0x44
   112c0:	2100      	movs	r1, #0
   112c2:	e7bc      	b.n	1123e <mqtt_recved_packet+0x6>
   112c4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   112c6:	46c0      	nop			; (mov r8, r8)
   112c8:	000111f9 	.word	0x000111f9
   112cc:	00010f99 	.word	0x00010f99
   112d0:	0001103d 	.word	0x0001103d
   112d4:	000117bb 	.word	0x000117bb

000112d8 <mqtt_socket_event_handler>:
   112d8:	b570      	push	{r4, r5, r6, lr}
   112da:	4d37      	ldr	r5, [pc, #220]	; (113b8 <mqtt_socket_event_handler+0xe0>)
   112dc:	0086      	lsls	r6, r0, #2
   112de:	5974      	ldr	r4, [r6, r5]
   112e0:	b086      	sub	sp, #24
   112e2:	2c00      	cmp	r4, #0
   112e4:	d066      	beq.n	113b4 <mqtt_socket_event_handler+0xdc>
   112e6:	2906      	cmp	r1, #6
   112e8:	d02b      	beq.n	11342 <mqtt_socket_event_handler+0x6a>
   112ea:	2907      	cmp	r1, #7
   112ec:	d039      	beq.n	11362 <mqtt_socket_event_handler+0x8a>
   112ee:	2905      	cmp	r1, #5
   112f0:	d160      	bne.n	113b4 <mqtt_socket_event_handler+0xdc>
   112f2:	2001      	movs	r0, #1
   112f4:	5610      	ldrsb	r0, [r2, r0]
   112f6:	4b31      	ldr	r3, [pc, #196]	; (113bc <mqtt_socket_event_handler+0xe4>)
   112f8:	4798      	blx	r3
   112fa:	9001      	str	r0, [sp, #4]
   112fc:	2800      	cmp	r0, #0
   112fe:	da06      	bge.n	1130e <mqtt_socket_event_handler+0x36>
   11300:	2002      	movs	r0, #2
   11302:	4b2f      	ldr	r3, [pc, #188]	; (113c0 <mqtt_socket_event_handler+0xe8>)
   11304:	5620      	ldrsb	r0, [r4, r0]
   11306:	4798      	blx	r3
   11308:	2300      	movs	r3, #0
   1130a:	5173      	str	r3, [r6, r5]
   1130c:	e011      	b.n	11332 <mqtt_socket_event_handler+0x5a>
   1130e:	1c23      	adds	r3, r4, #0
   11310:	3343      	adds	r3, #67	; 0x43
   11312:	781a      	ldrb	r2, [r3, #0]
   11314:	2101      	movs	r1, #1
   11316:	430a      	orrs	r2, r1
   11318:	701a      	strb	r2, [r3, #0]
   1131a:	331d      	adds	r3, #29
   1131c:	881b      	ldrh	r3, [r3, #0]
   1131e:	2b00      	cmp	r3, #0
   11320:	d004      	beq.n	1132c <mqtt_socket_event_handler+0x54>
   11322:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   11324:	6d21      	ldr	r1, [r4, #80]	; 0x50
   11326:	2200      	movs	r2, #0
   11328:	4b26      	ldr	r3, [pc, #152]	; (113c4 <mqtt_socket_event_handler+0xec>)
   1132a:	4798      	blx	r3
   1132c:	1c20      	adds	r0, r4, #0
   1132e:	4b26      	ldr	r3, [pc, #152]	; (113c8 <mqtt_socket_event_handler+0xf0>)
   11330:	4798      	blx	r3
   11332:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11334:	2b00      	cmp	r3, #0
   11336:	d03d      	beq.n	113b4 <mqtt_socket_event_handler+0xdc>
   11338:	1c20      	adds	r0, r4, #0
   1133a:	2100      	movs	r1, #0
   1133c:	aa01      	add	r2, sp, #4
   1133e:	4798      	blx	r3
   11340:	e038      	b.n	113b4 <mqtt_socket_event_handler+0xdc>
   11342:	2304      	movs	r3, #4
   11344:	5ed1      	ldrsh	r1, [r2, r3]
   11346:	2900      	cmp	r1, #0
   11348:	dd03      	ble.n	11352 <mqtt_socket_event_handler+0x7a>
   1134a:	1c20      	adds	r0, r4, #0
   1134c:	4b1f      	ldr	r3, [pc, #124]	; (113cc <mqtt_socket_event_handler+0xf4>)
   1134e:	4798      	blx	r3
   11350:	e003      	b.n	1135a <mqtt_socket_event_handler+0x82>
   11352:	1c0b      	adds	r3, r1, #0
   11354:	1c08      	adds	r0, r1, #0
   11356:	330d      	adds	r3, #13
   11358:	d11a      	bne.n	11390 <mqtt_socket_event_handler+0xb8>
   1135a:	4b1b      	ldr	r3, [pc, #108]	; (113c8 <mqtt_socket_event_handler+0xf0>)
   1135c:	1c20      	adds	r0, r4, #0
   1135e:	4798      	blx	r3
   11360:	e028      	b.n	113b4 <mqtt_socket_event_handler+0xdc>
   11362:	1c23      	adds	r3, r4, #0
   11364:	3343      	adds	r3, #67	; 0x43
   11366:	8810      	ldrh	r0, [r2, #0]
   11368:	781a      	ldrb	r2, [r3, #0]
   1136a:	0751      	lsls	r1, r2, #29
   1136c:	d402      	bmi.n	11374 <mqtt_socket_event_handler+0x9c>
   1136e:	2108      	movs	r1, #8
   11370:	438a      	bics	r2, r1
   11372:	701a      	strb	r2, [r3, #0]
   11374:	781a      	ldrb	r2, [r3, #0]
   11376:	2104      	movs	r1, #4
   11378:	438a      	bics	r2, r1
   1137a:	701a      	strb	r2, [r3, #0]
   1137c:	06d3      	lsls	r3, r2, #27
   1137e:	0fde      	lsrs	r6, r3, #31
   11380:	b200      	sxth	r0, r0
   11382:	2b00      	cmp	r3, #0
   11384:	db02      	blt.n	1138c <mqtt_socket_event_handler+0xb4>
   11386:	2800      	cmp	r0, #0
   11388:	da08      	bge.n	1139c <mqtt_socket_event_handler+0xc4>
   1138a:	e001      	b.n	11390 <mqtt_socket_event_handler+0xb8>
   1138c:	2800      	cmp	r0, #0
   1138e:	da02      	bge.n	11396 <mqtt_socket_event_handler+0xbe>
   11390:	4b0a      	ldr	r3, [pc, #40]	; (113bc <mqtt_socket_event_handler+0xe4>)
   11392:	4798      	blx	r3
   11394:	64e0      	str	r0, [r4, #76]	; 0x4c
   11396:	1c20      	adds	r0, r4, #0
   11398:	4b0d      	ldr	r3, [pc, #52]	; (113d0 <mqtt_socket_event_handler+0xf8>)
   1139a:	e7e0      	b.n	1135e <mqtt_socket_event_handler+0x86>
   1139c:	1c25      	adds	r5, r4, #0
   1139e:	3548      	adds	r5, #72	; 0x48
   113a0:	7829      	ldrb	r1, [r5, #0]
   113a2:	2900      	cmp	r1, #0
   113a4:	d006      	beq.n	113b4 <mqtt_socket_event_handler+0xdc>
   113a6:	1c23      	adds	r3, r4, #0
   113a8:	334a      	adds	r3, #74	; 0x4a
   113aa:	881a      	ldrh	r2, [r3, #0]
   113ac:	1c20      	adds	r0, r4, #0
   113ae:	4b09      	ldr	r3, [pc, #36]	; (113d4 <mqtt_socket_event_handler+0xfc>)
   113b0:	4798      	blx	r3
   113b2:	702e      	strb	r6, [r5, #0]
   113b4:	b006      	add	sp, #24
   113b6:	bd70      	pop	{r4, r5, r6, pc}
   113b8:	200003d4 	.word	0x200003d4
   113bc:	00010585 	.word	0x00010585
   113c0:	0000cca9 	.word	0x0000cca9
   113c4:	00009295 	.word	0x00009295
   113c8:	000111f9 	.word	0x000111f9
   113cc:	00011239 	.word	0x00011239
   113d0:	00010f49 	.word	0x00010f49
   113d4:	00010ee5 	.word	0x00010ee5

000113d8 <__gnu_thumb1_case_uqi>:
   113d8:	b402      	push	{r1}
   113da:	4671      	mov	r1, lr
   113dc:	0849      	lsrs	r1, r1, #1
   113de:	0049      	lsls	r1, r1, #1
   113e0:	5c09      	ldrb	r1, [r1, r0]
   113e2:	0049      	lsls	r1, r1, #1
   113e4:	448e      	add	lr, r1
   113e6:	bc02      	pop	{r1}
   113e8:	4770      	bx	lr
   113ea:	46c0      	nop			; (mov r8, r8)

000113ec <__udivsi3>:
   113ec:	2200      	movs	r2, #0
   113ee:	0843      	lsrs	r3, r0, #1
   113f0:	428b      	cmp	r3, r1
   113f2:	d374      	bcc.n	114de <__udivsi3+0xf2>
   113f4:	0903      	lsrs	r3, r0, #4
   113f6:	428b      	cmp	r3, r1
   113f8:	d35f      	bcc.n	114ba <__udivsi3+0xce>
   113fa:	0a03      	lsrs	r3, r0, #8
   113fc:	428b      	cmp	r3, r1
   113fe:	d344      	bcc.n	1148a <__udivsi3+0x9e>
   11400:	0b03      	lsrs	r3, r0, #12
   11402:	428b      	cmp	r3, r1
   11404:	d328      	bcc.n	11458 <__udivsi3+0x6c>
   11406:	0c03      	lsrs	r3, r0, #16
   11408:	428b      	cmp	r3, r1
   1140a:	d30d      	bcc.n	11428 <__udivsi3+0x3c>
   1140c:	22ff      	movs	r2, #255	; 0xff
   1140e:	0209      	lsls	r1, r1, #8
   11410:	ba12      	rev	r2, r2
   11412:	0c03      	lsrs	r3, r0, #16
   11414:	428b      	cmp	r3, r1
   11416:	d302      	bcc.n	1141e <__udivsi3+0x32>
   11418:	1212      	asrs	r2, r2, #8
   1141a:	0209      	lsls	r1, r1, #8
   1141c:	d065      	beq.n	114ea <__udivsi3+0xfe>
   1141e:	0b03      	lsrs	r3, r0, #12
   11420:	428b      	cmp	r3, r1
   11422:	d319      	bcc.n	11458 <__udivsi3+0x6c>
   11424:	e000      	b.n	11428 <__udivsi3+0x3c>
   11426:	0a09      	lsrs	r1, r1, #8
   11428:	0bc3      	lsrs	r3, r0, #15
   1142a:	428b      	cmp	r3, r1
   1142c:	d301      	bcc.n	11432 <__udivsi3+0x46>
   1142e:	03cb      	lsls	r3, r1, #15
   11430:	1ac0      	subs	r0, r0, r3
   11432:	4152      	adcs	r2, r2
   11434:	0b83      	lsrs	r3, r0, #14
   11436:	428b      	cmp	r3, r1
   11438:	d301      	bcc.n	1143e <__udivsi3+0x52>
   1143a:	038b      	lsls	r3, r1, #14
   1143c:	1ac0      	subs	r0, r0, r3
   1143e:	4152      	adcs	r2, r2
   11440:	0b43      	lsrs	r3, r0, #13
   11442:	428b      	cmp	r3, r1
   11444:	d301      	bcc.n	1144a <__udivsi3+0x5e>
   11446:	034b      	lsls	r3, r1, #13
   11448:	1ac0      	subs	r0, r0, r3
   1144a:	4152      	adcs	r2, r2
   1144c:	0b03      	lsrs	r3, r0, #12
   1144e:	428b      	cmp	r3, r1
   11450:	d301      	bcc.n	11456 <__udivsi3+0x6a>
   11452:	030b      	lsls	r3, r1, #12
   11454:	1ac0      	subs	r0, r0, r3
   11456:	4152      	adcs	r2, r2
   11458:	0ac3      	lsrs	r3, r0, #11
   1145a:	428b      	cmp	r3, r1
   1145c:	d301      	bcc.n	11462 <__udivsi3+0x76>
   1145e:	02cb      	lsls	r3, r1, #11
   11460:	1ac0      	subs	r0, r0, r3
   11462:	4152      	adcs	r2, r2
   11464:	0a83      	lsrs	r3, r0, #10
   11466:	428b      	cmp	r3, r1
   11468:	d301      	bcc.n	1146e <__udivsi3+0x82>
   1146a:	028b      	lsls	r3, r1, #10
   1146c:	1ac0      	subs	r0, r0, r3
   1146e:	4152      	adcs	r2, r2
   11470:	0a43      	lsrs	r3, r0, #9
   11472:	428b      	cmp	r3, r1
   11474:	d301      	bcc.n	1147a <__udivsi3+0x8e>
   11476:	024b      	lsls	r3, r1, #9
   11478:	1ac0      	subs	r0, r0, r3
   1147a:	4152      	adcs	r2, r2
   1147c:	0a03      	lsrs	r3, r0, #8
   1147e:	428b      	cmp	r3, r1
   11480:	d301      	bcc.n	11486 <__udivsi3+0x9a>
   11482:	020b      	lsls	r3, r1, #8
   11484:	1ac0      	subs	r0, r0, r3
   11486:	4152      	adcs	r2, r2
   11488:	d2cd      	bcs.n	11426 <__udivsi3+0x3a>
   1148a:	09c3      	lsrs	r3, r0, #7
   1148c:	428b      	cmp	r3, r1
   1148e:	d301      	bcc.n	11494 <__udivsi3+0xa8>
   11490:	01cb      	lsls	r3, r1, #7
   11492:	1ac0      	subs	r0, r0, r3
   11494:	4152      	adcs	r2, r2
   11496:	0983      	lsrs	r3, r0, #6
   11498:	428b      	cmp	r3, r1
   1149a:	d301      	bcc.n	114a0 <__udivsi3+0xb4>
   1149c:	018b      	lsls	r3, r1, #6
   1149e:	1ac0      	subs	r0, r0, r3
   114a0:	4152      	adcs	r2, r2
   114a2:	0943      	lsrs	r3, r0, #5
   114a4:	428b      	cmp	r3, r1
   114a6:	d301      	bcc.n	114ac <__udivsi3+0xc0>
   114a8:	014b      	lsls	r3, r1, #5
   114aa:	1ac0      	subs	r0, r0, r3
   114ac:	4152      	adcs	r2, r2
   114ae:	0903      	lsrs	r3, r0, #4
   114b0:	428b      	cmp	r3, r1
   114b2:	d301      	bcc.n	114b8 <__udivsi3+0xcc>
   114b4:	010b      	lsls	r3, r1, #4
   114b6:	1ac0      	subs	r0, r0, r3
   114b8:	4152      	adcs	r2, r2
   114ba:	08c3      	lsrs	r3, r0, #3
   114bc:	428b      	cmp	r3, r1
   114be:	d301      	bcc.n	114c4 <__udivsi3+0xd8>
   114c0:	00cb      	lsls	r3, r1, #3
   114c2:	1ac0      	subs	r0, r0, r3
   114c4:	4152      	adcs	r2, r2
   114c6:	0883      	lsrs	r3, r0, #2
   114c8:	428b      	cmp	r3, r1
   114ca:	d301      	bcc.n	114d0 <__udivsi3+0xe4>
   114cc:	008b      	lsls	r3, r1, #2
   114ce:	1ac0      	subs	r0, r0, r3
   114d0:	4152      	adcs	r2, r2
   114d2:	0843      	lsrs	r3, r0, #1
   114d4:	428b      	cmp	r3, r1
   114d6:	d301      	bcc.n	114dc <__udivsi3+0xf0>
   114d8:	004b      	lsls	r3, r1, #1
   114da:	1ac0      	subs	r0, r0, r3
   114dc:	4152      	adcs	r2, r2
   114de:	1a41      	subs	r1, r0, r1
   114e0:	d200      	bcs.n	114e4 <__udivsi3+0xf8>
   114e2:	4601      	mov	r1, r0
   114e4:	4152      	adcs	r2, r2
   114e6:	4610      	mov	r0, r2
   114e8:	4770      	bx	lr
   114ea:	e7ff      	b.n	114ec <__udivsi3+0x100>
   114ec:	b501      	push	{r0, lr}
   114ee:	2000      	movs	r0, #0
   114f0:	f000 f8f0 	bl	116d4 <__aeabi_idiv0>
   114f4:	bd02      	pop	{r1, pc}
   114f6:	46c0      	nop			; (mov r8, r8)

000114f8 <__aeabi_uidivmod>:
   114f8:	2900      	cmp	r1, #0
   114fa:	d0f7      	beq.n	114ec <__udivsi3+0x100>
   114fc:	e776      	b.n	113ec <__udivsi3>
   114fe:	4770      	bx	lr

00011500 <__divsi3>:
   11500:	4603      	mov	r3, r0
   11502:	430b      	orrs	r3, r1
   11504:	d47f      	bmi.n	11606 <__divsi3+0x106>
   11506:	2200      	movs	r2, #0
   11508:	0843      	lsrs	r3, r0, #1
   1150a:	428b      	cmp	r3, r1
   1150c:	d374      	bcc.n	115f8 <__divsi3+0xf8>
   1150e:	0903      	lsrs	r3, r0, #4
   11510:	428b      	cmp	r3, r1
   11512:	d35f      	bcc.n	115d4 <__divsi3+0xd4>
   11514:	0a03      	lsrs	r3, r0, #8
   11516:	428b      	cmp	r3, r1
   11518:	d344      	bcc.n	115a4 <__divsi3+0xa4>
   1151a:	0b03      	lsrs	r3, r0, #12
   1151c:	428b      	cmp	r3, r1
   1151e:	d328      	bcc.n	11572 <__divsi3+0x72>
   11520:	0c03      	lsrs	r3, r0, #16
   11522:	428b      	cmp	r3, r1
   11524:	d30d      	bcc.n	11542 <__divsi3+0x42>
   11526:	22ff      	movs	r2, #255	; 0xff
   11528:	0209      	lsls	r1, r1, #8
   1152a:	ba12      	rev	r2, r2
   1152c:	0c03      	lsrs	r3, r0, #16
   1152e:	428b      	cmp	r3, r1
   11530:	d302      	bcc.n	11538 <__divsi3+0x38>
   11532:	1212      	asrs	r2, r2, #8
   11534:	0209      	lsls	r1, r1, #8
   11536:	d065      	beq.n	11604 <__divsi3+0x104>
   11538:	0b03      	lsrs	r3, r0, #12
   1153a:	428b      	cmp	r3, r1
   1153c:	d319      	bcc.n	11572 <__divsi3+0x72>
   1153e:	e000      	b.n	11542 <__divsi3+0x42>
   11540:	0a09      	lsrs	r1, r1, #8
   11542:	0bc3      	lsrs	r3, r0, #15
   11544:	428b      	cmp	r3, r1
   11546:	d301      	bcc.n	1154c <__divsi3+0x4c>
   11548:	03cb      	lsls	r3, r1, #15
   1154a:	1ac0      	subs	r0, r0, r3
   1154c:	4152      	adcs	r2, r2
   1154e:	0b83      	lsrs	r3, r0, #14
   11550:	428b      	cmp	r3, r1
   11552:	d301      	bcc.n	11558 <__divsi3+0x58>
   11554:	038b      	lsls	r3, r1, #14
   11556:	1ac0      	subs	r0, r0, r3
   11558:	4152      	adcs	r2, r2
   1155a:	0b43      	lsrs	r3, r0, #13
   1155c:	428b      	cmp	r3, r1
   1155e:	d301      	bcc.n	11564 <__divsi3+0x64>
   11560:	034b      	lsls	r3, r1, #13
   11562:	1ac0      	subs	r0, r0, r3
   11564:	4152      	adcs	r2, r2
   11566:	0b03      	lsrs	r3, r0, #12
   11568:	428b      	cmp	r3, r1
   1156a:	d301      	bcc.n	11570 <__divsi3+0x70>
   1156c:	030b      	lsls	r3, r1, #12
   1156e:	1ac0      	subs	r0, r0, r3
   11570:	4152      	adcs	r2, r2
   11572:	0ac3      	lsrs	r3, r0, #11
   11574:	428b      	cmp	r3, r1
   11576:	d301      	bcc.n	1157c <__divsi3+0x7c>
   11578:	02cb      	lsls	r3, r1, #11
   1157a:	1ac0      	subs	r0, r0, r3
   1157c:	4152      	adcs	r2, r2
   1157e:	0a83      	lsrs	r3, r0, #10
   11580:	428b      	cmp	r3, r1
   11582:	d301      	bcc.n	11588 <__divsi3+0x88>
   11584:	028b      	lsls	r3, r1, #10
   11586:	1ac0      	subs	r0, r0, r3
   11588:	4152      	adcs	r2, r2
   1158a:	0a43      	lsrs	r3, r0, #9
   1158c:	428b      	cmp	r3, r1
   1158e:	d301      	bcc.n	11594 <__divsi3+0x94>
   11590:	024b      	lsls	r3, r1, #9
   11592:	1ac0      	subs	r0, r0, r3
   11594:	4152      	adcs	r2, r2
   11596:	0a03      	lsrs	r3, r0, #8
   11598:	428b      	cmp	r3, r1
   1159a:	d301      	bcc.n	115a0 <__divsi3+0xa0>
   1159c:	020b      	lsls	r3, r1, #8
   1159e:	1ac0      	subs	r0, r0, r3
   115a0:	4152      	adcs	r2, r2
   115a2:	d2cd      	bcs.n	11540 <__divsi3+0x40>
   115a4:	09c3      	lsrs	r3, r0, #7
   115a6:	428b      	cmp	r3, r1
   115a8:	d301      	bcc.n	115ae <__divsi3+0xae>
   115aa:	01cb      	lsls	r3, r1, #7
   115ac:	1ac0      	subs	r0, r0, r3
   115ae:	4152      	adcs	r2, r2
   115b0:	0983      	lsrs	r3, r0, #6
   115b2:	428b      	cmp	r3, r1
   115b4:	d301      	bcc.n	115ba <__divsi3+0xba>
   115b6:	018b      	lsls	r3, r1, #6
   115b8:	1ac0      	subs	r0, r0, r3
   115ba:	4152      	adcs	r2, r2
   115bc:	0943      	lsrs	r3, r0, #5
   115be:	428b      	cmp	r3, r1
   115c0:	d301      	bcc.n	115c6 <__divsi3+0xc6>
   115c2:	014b      	lsls	r3, r1, #5
   115c4:	1ac0      	subs	r0, r0, r3
   115c6:	4152      	adcs	r2, r2
   115c8:	0903      	lsrs	r3, r0, #4
   115ca:	428b      	cmp	r3, r1
   115cc:	d301      	bcc.n	115d2 <__divsi3+0xd2>
   115ce:	010b      	lsls	r3, r1, #4
   115d0:	1ac0      	subs	r0, r0, r3
   115d2:	4152      	adcs	r2, r2
   115d4:	08c3      	lsrs	r3, r0, #3
   115d6:	428b      	cmp	r3, r1
   115d8:	d301      	bcc.n	115de <__divsi3+0xde>
   115da:	00cb      	lsls	r3, r1, #3
   115dc:	1ac0      	subs	r0, r0, r3
   115de:	4152      	adcs	r2, r2
   115e0:	0883      	lsrs	r3, r0, #2
   115e2:	428b      	cmp	r3, r1
   115e4:	d301      	bcc.n	115ea <__divsi3+0xea>
   115e6:	008b      	lsls	r3, r1, #2
   115e8:	1ac0      	subs	r0, r0, r3
   115ea:	4152      	adcs	r2, r2
   115ec:	0843      	lsrs	r3, r0, #1
   115ee:	428b      	cmp	r3, r1
   115f0:	d301      	bcc.n	115f6 <__divsi3+0xf6>
   115f2:	004b      	lsls	r3, r1, #1
   115f4:	1ac0      	subs	r0, r0, r3
   115f6:	4152      	adcs	r2, r2
   115f8:	1a41      	subs	r1, r0, r1
   115fa:	d200      	bcs.n	115fe <__divsi3+0xfe>
   115fc:	4601      	mov	r1, r0
   115fe:	4152      	adcs	r2, r2
   11600:	4610      	mov	r0, r2
   11602:	4770      	bx	lr
   11604:	e05d      	b.n	116c2 <__divsi3+0x1c2>
   11606:	0fca      	lsrs	r2, r1, #31
   11608:	d000      	beq.n	1160c <__divsi3+0x10c>
   1160a:	4249      	negs	r1, r1
   1160c:	1003      	asrs	r3, r0, #32
   1160e:	d300      	bcc.n	11612 <__divsi3+0x112>
   11610:	4240      	negs	r0, r0
   11612:	4053      	eors	r3, r2
   11614:	2200      	movs	r2, #0
   11616:	469c      	mov	ip, r3
   11618:	0903      	lsrs	r3, r0, #4
   1161a:	428b      	cmp	r3, r1
   1161c:	d32d      	bcc.n	1167a <__divsi3+0x17a>
   1161e:	0a03      	lsrs	r3, r0, #8
   11620:	428b      	cmp	r3, r1
   11622:	d312      	bcc.n	1164a <__divsi3+0x14a>
   11624:	22fc      	movs	r2, #252	; 0xfc
   11626:	0189      	lsls	r1, r1, #6
   11628:	ba12      	rev	r2, r2
   1162a:	0a03      	lsrs	r3, r0, #8
   1162c:	428b      	cmp	r3, r1
   1162e:	d30c      	bcc.n	1164a <__divsi3+0x14a>
   11630:	0189      	lsls	r1, r1, #6
   11632:	1192      	asrs	r2, r2, #6
   11634:	428b      	cmp	r3, r1
   11636:	d308      	bcc.n	1164a <__divsi3+0x14a>
   11638:	0189      	lsls	r1, r1, #6
   1163a:	1192      	asrs	r2, r2, #6
   1163c:	428b      	cmp	r3, r1
   1163e:	d304      	bcc.n	1164a <__divsi3+0x14a>
   11640:	0189      	lsls	r1, r1, #6
   11642:	d03a      	beq.n	116ba <__divsi3+0x1ba>
   11644:	1192      	asrs	r2, r2, #6
   11646:	e000      	b.n	1164a <__divsi3+0x14a>
   11648:	0989      	lsrs	r1, r1, #6
   1164a:	09c3      	lsrs	r3, r0, #7
   1164c:	428b      	cmp	r3, r1
   1164e:	d301      	bcc.n	11654 <__divsi3+0x154>
   11650:	01cb      	lsls	r3, r1, #7
   11652:	1ac0      	subs	r0, r0, r3
   11654:	4152      	adcs	r2, r2
   11656:	0983      	lsrs	r3, r0, #6
   11658:	428b      	cmp	r3, r1
   1165a:	d301      	bcc.n	11660 <__divsi3+0x160>
   1165c:	018b      	lsls	r3, r1, #6
   1165e:	1ac0      	subs	r0, r0, r3
   11660:	4152      	adcs	r2, r2
   11662:	0943      	lsrs	r3, r0, #5
   11664:	428b      	cmp	r3, r1
   11666:	d301      	bcc.n	1166c <__divsi3+0x16c>
   11668:	014b      	lsls	r3, r1, #5
   1166a:	1ac0      	subs	r0, r0, r3
   1166c:	4152      	adcs	r2, r2
   1166e:	0903      	lsrs	r3, r0, #4
   11670:	428b      	cmp	r3, r1
   11672:	d301      	bcc.n	11678 <__divsi3+0x178>
   11674:	010b      	lsls	r3, r1, #4
   11676:	1ac0      	subs	r0, r0, r3
   11678:	4152      	adcs	r2, r2
   1167a:	08c3      	lsrs	r3, r0, #3
   1167c:	428b      	cmp	r3, r1
   1167e:	d301      	bcc.n	11684 <__divsi3+0x184>
   11680:	00cb      	lsls	r3, r1, #3
   11682:	1ac0      	subs	r0, r0, r3
   11684:	4152      	adcs	r2, r2
   11686:	0883      	lsrs	r3, r0, #2
   11688:	428b      	cmp	r3, r1
   1168a:	d301      	bcc.n	11690 <__divsi3+0x190>
   1168c:	008b      	lsls	r3, r1, #2
   1168e:	1ac0      	subs	r0, r0, r3
   11690:	4152      	adcs	r2, r2
   11692:	d2d9      	bcs.n	11648 <__divsi3+0x148>
   11694:	0843      	lsrs	r3, r0, #1
   11696:	428b      	cmp	r3, r1
   11698:	d301      	bcc.n	1169e <__divsi3+0x19e>
   1169a:	004b      	lsls	r3, r1, #1
   1169c:	1ac0      	subs	r0, r0, r3
   1169e:	4152      	adcs	r2, r2
   116a0:	1a41      	subs	r1, r0, r1
   116a2:	d200      	bcs.n	116a6 <__divsi3+0x1a6>
   116a4:	4601      	mov	r1, r0
   116a6:	4663      	mov	r3, ip
   116a8:	4152      	adcs	r2, r2
   116aa:	105b      	asrs	r3, r3, #1
   116ac:	4610      	mov	r0, r2
   116ae:	d301      	bcc.n	116b4 <__divsi3+0x1b4>
   116b0:	4240      	negs	r0, r0
   116b2:	2b00      	cmp	r3, #0
   116b4:	d500      	bpl.n	116b8 <__divsi3+0x1b8>
   116b6:	4249      	negs	r1, r1
   116b8:	4770      	bx	lr
   116ba:	4663      	mov	r3, ip
   116bc:	105b      	asrs	r3, r3, #1
   116be:	d300      	bcc.n	116c2 <__divsi3+0x1c2>
   116c0:	4240      	negs	r0, r0
   116c2:	b501      	push	{r0, lr}
   116c4:	2000      	movs	r0, #0
   116c6:	f000 f805 	bl	116d4 <__aeabi_idiv0>
   116ca:	bd02      	pop	{r1, pc}

000116cc <__aeabi_idivmod>:
   116cc:	2900      	cmp	r1, #0
   116ce:	d0f8      	beq.n	116c2 <__divsi3+0x1c2>
   116d0:	e716      	b.n	11500 <__divsi3>
   116d2:	4770      	bx	lr

000116d4 <__aeabi_idiv0>:
   116d4:	4770      	bx	lr
   116d6:	46c0      	nop			; (mov r8, r8)

000116d8 <__aeabi_lmul>:
   116d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   116da:	46ce      	mov	lr, r9
   116dc:	4647      	mov	r7, r8
   116de:	0415      	lsls	r5, r2, #16
   116e0:	0c2d      	lsrs	r5, r5, #16
   116e2:	002e      	movs	r6, r5
   116e4:	b580      	push	{r7, lr}
   116e6:	0407      	lsls	r7, r0, #16
   116e8:	0c14      	lsrs	r4, r2, #16
   116ea:	0c3f      	lsrs	r7, r7, #16
   116ec:	4699      	mov	r9, r3
   116ee:	0c03      	lsrs	r3, r0, #16
   116f0:	437e      	muls	r6, r7
   116f2:	435d      	muls	r5, r3
   116f4:	4367      	muls	r7, r4
   116f6:	4363      	muls	r3, r4
   116f8:	197f      	adds	r7, r7, r5
   116fa:	0c34      	lsrs	r4, r6, #16
   116fc:	19e4      	adds	r4, r4, r7
   116fe:	469c      	mov	ip, r3
   11700:	42a5      	cmp	r5, r4
   11702:	d903      	bls.n	1170c <__aeabi_lmul+0x34>
   11704:	2380      	movs	r3, #128	; 0x80
   11706:	025b      	lsls	r3, r3, #9
   11708:	4698      	mov	r8, r3
   1170a:	44c4      	add	ip, r8
   1170c:	464b      	mov	r3, r9
   1170e:	4351      	muls	r1, r2
   11710:	4343      	muls	r3, r0
   11712:	0436      	lsls	r6, r6, #16
   11714:	0c36      	lsrs	r6, r6, #16
   11716:	0c25      	lsrs	r5, r4, #16
   11718:	0424      	lsls	r4, r4, #16
   1171a:	4465      	add	r5, ip
   1171c:	19a4      	adds	r4, r4, r6
   1171e:	1859      	adds	r1, r3, r1
   11720:	1949      	adds	r1, r1, r5
   11722:	0020      	movs	r0, r4
   11724:	bc0c      	pop	{r2, r3}
   11726:	4690      	mov	r8, r2
   11728:	4699      	mov	r9, r3
   1172a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001172c <atoi>:
   1172c:	b510      	push	{r4, lr}
   1172e:	220a      	movs	r2, #10
   11730:	2100      	movs	r1, #0
   11732:	f000 fb6d 	bl	11e10 <strtol>
   11736:	bd10      	pop	{r4, pc}

00011738 <__libc_init_array>:
   11738:	b570      	push	{r4, r5, r6, lr}
   1173a:	2600      	movs	r6, #0
   1173c:	4d0c      	ldr	r5, [pc, #48]	; (11770 <__libc_init_array+0x38>)
   1173e:	4c0d      	ldr	r4, [pc, #52]	; (11774 <__libc_init_array+0x3c>)
   11740:	1b64      	subs	r4, r4, r5
   11742:	10a4      	asrs	r4, r4, #2
   11744:	42a6      	cmp	r6, r4
   11746:	d109      	bne.n	1175c <__libc_init_array+0x24>
   11748:	2600      	movs	r6, #0
   1174a:	f003 f969 	bl	14a20 <_init>
   1174e:	4d0a      	ldr	r5, [pc, #40]	; (11778 <__libc_init_array+0x40>)
   11750:	4c0a      	ldr	r4, [pc, #40]	; (1177c <__libc_init_array+0x44>)
   11752:	1b64      	subs	r4, r4, r5
   11754:	10a4      	asrs	r4, r4, #2
   11756:	42a6      	cmp	r6, r4
   11758:	d105      	bne.n	11766 <__libc_init_array+0x2e>
   1175a:	bd70      	pop	{r4, r5, r6, pc}
   1175c:	00b3      	lsls	r3, r6, #2
   1175e:	58eb      	ldr	r3, [r5, r3]
   11760:	4798      	blx	r3
   11762:	3601      	adds	r6, #1
   11764:	e7ee      	b.n	11744 <__libc_init_array+0xc>
   11766:	00b3      	lsls	r3, r6, #2
   11768:	58eb      	ldr	r3, [r5, r3]
   1176a:	4798      	blx	r3
   1176c:	3601      	adds	r6, #1
   1176e:	e7f2      	b.n	11756 <__libc_init_array+0x1e>
   11770:	00014a2c 	.word	0x00014a2c
   11774:	00014a2c 	.word	0x00014a2c
   11778:	00014a2c 	.word	0x00014a2c
   1177c:	00014a30 	.word	0x00014a30

00011780 <malloc>:
   11780:	b510      	push	{r4, lr}
   11782:	4b03      	ldr	r3, [pc, #12]	; (11790 <malloc+0x10>)
   11784:	0001      	movs	r1, r0
   11786:	6818      	ldr	r0, [r3, #0]
   11788:	f000 f87c 	bl	11884 <_malloc_r>
   1178c:	bd10      	pop	{r4, pc}
   1178e:	46c0      	nop			; (mov r8, r8)
   11790:	20000020 	.word	0x20000020

00011794 <free>:
   11794:	b510      	push	{r4, lr}
   11796:	4b03      	ldr	r3, [pc, #12]	; (117a4 <free+0x10>)
   11798:	0001      	movs	r1, r0
   1179a:	6818      	ldr	r0, [r3, #0]
   1179c:	f000 f828 	bl	117f0 <_free_r>
   117a0:	bd10      	pop	{r4, pc}
   117a2:	46c0      	nop			; (mov r8, r8)
   117a4:	20000020 	.word	0x20000020

000117a8 <memcpy>:
   117a8:	2300      	movs	r3, #0
   117aa:	b510      	push	{r4, lr}
   117ac:	429a      	cmp	r2, r3
   117ae:	d100      	bne.n	117b2 <memcpy+0xa>
   117b0:	bd10      	pop	{r4, pc}
   117b2:	5ccc      	ldrb	r4, [r1, r3]
   117b4:	54c4      	strb	r4, [r0, r3]
   117b6:	3301      	adds	r3, #1
   117b8:	e7f8      	b.n	117ac <memcpy+0x4>

000117ba <memmove>:
   117ba:	b510      	push	{r4, lr}
   117bc:	4288      	cmp	r0, r1
   117be:	d902      	bls.n	117c6 <memmove+0xc>
   117c0:	188b      	adds	r3, r1, r2
   117c2:	4298      	cmp	r0, r3
   117c4:	d308      	bcc.n	117d8 <memmove+0x1e>
   117c6:	2300      	movs	r3, #0
   117c8:	429a      	cmp	r2, r3
   117ca:	d007      	beq.n	117dc <memmove+0x22>
   117cc:	5ccc      	ldrb	r4, [r1, r3]
   117ce:	54c4      	strb	r4, [r0, r3]
   117d0:	3301      	adds	r3, #1
   117d2:	e7f9      	b.n	117c8 <memmove+0xe>
   117d4:	5c8b      	ldrb	r3, [r1, r2]
   117d6:	5483      	strb	r3, [r0, r2]
   117d8:	3a01      	subs	r2, #1
   117da:	d2fb      	bcs.n	117d4 <memmove+0x1a>
   117dc:	bd10      	pop	{r4, pc}

000117de <memset>:
   117de:	0003      	movs	r3, r0
   117e0:	1882      	adds	r2, r0, r2
   117e2:	4293      	cmp	r3, r2
   117e4:	d100      	bne.n	117e8 <memset+0xa>
   117e6:	4770      	bx	lr
   117e8:	7019      	strb	r1, [r3, #0]
   117ea:	3301      	adds	r3, #1
   117ec:	e7f9      	b.n	117e2 <memset+0x4>
	...

000117f0 <_free_r>:
   117f0:	b570      	push	{r4, r5, r6, lr}
   117f2:	0005      	movs	r5, r0
   117f4:	2900      	cmp	r1, #0
   117f6:	d010      	beq.n	1181a <_free_r+0x2a>
   117f8:	1f0c      	subs	r4, r1, #4
   117fa:	6823      	ldr	r3, [r4, #0]
   117fc:	2b00      	cmp	r3, #0
   117fe:	da00      	bge.n	11802 <_free_r+0x12>
   11800:	18e4      	adds	r4, r4, r3
   11802:	0028      	movs	r0, r5
   11804:	f000 fdec 	bl	123e0 <__malloc_lock>
   11808:	4a1d      	ldr	r2, [pc, #116]	; (11880 <_free_r+0x90>)
   1180a:	6813      	ldr	r3, [r2, #0]
   1180c:	2b00      	cmp	r3, #0
   1180e:	d105      	bne.n	1181c <_free_r+0x2c>
   11810:	6063      	str	r3, [r4, #4]
   11812:	6014      	str	r4, [r2, #0]
   11814:	0028      	movs	r0, r5
   11816:	f000 fde4 	bl	123e2 <__malloc_unlock>
   1181a:	bd70      	pop	{r4, r5, r6, pc}
   1181c:	42a3      	cmp	r3, r4
   1181e:	d909      	bls.n	11834 <_free_r+0x44>
   11820:	6821      	ldr	r1, [r4, #0]
   11822:	1860      	adds	r0, r4, r1
   11824:	4283      	cmp	r3, r0
   11826:	d1f3      	bne.n	11810 <_free_r+0x20>
   11828:	6818      	ldr	r0, [r3, #0]
   1182a:	685b      	ldr	r3, [r3, #4]
   1182c:	1841      	adds	r1, r0, r1
   1182e:	6021      	str	r1, [r4, #0]
   11830:	e7ee      	b.n	11810 <_free_r+0x20>
   11832:	0013      	movs	r3, r2
   11834:	685a      	ldr	r2, [r3, #4]
   11836:	2a00      	cmp	r2, #0
   11838:	d001      	beq.n	1183e <_free_r+0x4e>
   1183a:	42a2      	cmp	r2, r4
   1183c:	d9f9      	bls.n	11832 <_free_r+0x42>
   1183e:	6819      	ldr	r1, [r3, #0]
   11840:	1858      	adds	r0, r3, r1
   11842:	42a0      	cmp	r0, r4
   11844:	d10b      	bne.n	1185e <_free_r+0x6e>
   11846:	6820      	ldr	r0, [r4, #0]
   11848:	1809      	adds	r1, r1, r0
   1184a:	1858      	adds	r0, r3, r1
   1184c:	6019      	str	r1, [r3, #0]
   1184e:	4282      	cmp	r2, r0
   11850:	d1e0      	bne.n	11814 <_free_r+0x24>
   11852:	6810      	ldr	r0, [r2, #0]
   11854:	6852      	ldr	r2, [r2, #4]
   11856:	1841      	adds	r1, r0, r1
   11858:	6019      	str	r1, [r3, #0]
   1185a:	605a      	str	r2, [r3, #4]
   1185c:	e7da      	b.n	11814 <_free_r+0x24>
   1185e:	42a0      	cmp	r0, r4
   11860:	d902      	bls.n	11868 <_free_r+0x78>
   11862:	230c      	movs	r3, #12
   11864:	602b      	str	r3, [r5, #0]
   11866:	e7d5      	b.n	11814 <_free_r+0x24>
   11868:	6821      	ldr	r1, [r4, #0]
   1186a:	1860      	adds	r0, r4, r1
   1186c:	4282      	cmp	r2, r0
   1186e:	d103      	bne.n	11878 <_free_r+0x88>
   11870:	6810      	ldr	r0, [r2, #0]
   11872:	6852      	ldr	r2, [r2, #4]
   11874:	1841      	adds	r1, r0, r1
   11876:	6021      	str	r1, [r4, #0]
   11878:	6062      	str	r2, [r4, #4]
   1187a:	605c      	str	r4, [r3, #4]
   1187c:	e7ca      	b.n	11814 <_free_r+0x24>
   1187e:	46c0      	nop			; (mov r8, r8)
   11880:	200003f0 	.word	0x200003f0

00011884 <_malloc_r>:
   11884:	2303      	movs	r3, #3
   11886:	b570      	push	{r4, r5, r6, lr}
   11888:	1ccd      	adds	r5, r1, #3
   1188a:	439d      	bics	r5, r3
   1188c:	3508      	adds	r5, #8
   1188e:	0006      	movs	r6, r0
   11890:	2d0c      	cmp	r5, #12
   11892:	d21e      	bcs.n	118d2 <_malloc_r+0x4e>
   11894:	250c      	movs	r5, #12
   11896:	42a9      	cmp	r1, r5
   11898:	d81d      	bhi.n	118d6 <_malloc_r+0x52>
   1189a:	0030      	movs	r0, r6
   1189c:	f000 fda0 	bl	123e0 <__malloc_lock>
   118a0:	4a25      	ldr	r2, [pc, #148]	; (11938 <_malloc_r+0xb4>)
   118a2:	6814      	ldr	r4, [r2, #0]
   118a4:	0021      	movs	r1, r4
   118a6:	2900      	cmp	r1, #0
   118a8:	d119      	bne.n	118de <_malloc_r+0x5a>
   118aa:	4c24      	ldr	r4, [pc, #144]	; (1193c <_malloc_r+0xb8>)
   118ac:	6823      	ldr	r3, [r4, #0]
   118ae:	2b00      	cmp	r3, #0
   118b0:	d103      	bne.n	118ba <_malloc_r+0x36>
   118b2:	0030      	movs	r0, r6
   118b4:	f000 f8dc 	bl	11a70 <_sbrk_r>
   118b8:	6020      	str	r0, [r4, #0]
   118ba:	0029      	movs	r1, r5
   118bc:	0030      	movs	r0, r6
   118be:	f000 f8d7 	bl	11a70 <_sbrk_r>
   118c2:	1c43      	adds	r3, r0, #1
   118c4:	d12c      	bne.n	11920 <_malloc_r+0x9c>
   118c6:	230c      	movs	r3, #12
   118c8:	0030      	movs	r0, r6
   118ca:	6033      	str	r3, [r6, #0]
   118cc:	f000 fd89 	bl	123e2 <__malloc_unlock>
   118d0:	e003      	b.n	118da <_malloc_r+0x56>
   118d2:	2d00      	cmp	r5, #0
   118d4:	dadf      	bge.n	11896 <_malloc_r+0x12>
   118d6:	230c      	movs	r3, #12
   118d8:	6033      	str	r3, [r6, #0]
   118da:	2000      	movs	r0, #0
   118dc:	bd70      	pop	{r4, r5, r6, pc}
   118de:	680b      	ldr	r3, [r1, #0]
   118e0:	1b5b      	subs	r3, r3, r5
   118e2:	d41a      	bmi.n	1191a <_malloc_r+0x96>
   118e4:	2b0b      	cmp	r3, #11
   118e6:	d903      	bls.n	118f0 <_malloc_r+0x6c>
   118e8:	600b      	str	r3, [r1, #0]
   118ea:	18cc      	adds	r4, r1, r3
   118ec:	6025      	str	r5, [r4, #0]
   118ee:	e003      	b.n	118f8 <_malloc_r+0x74>
   118f0:	428c      	cmp	r4, r1
   118f2:	d10e      	bne.n	11912 <_malloc_r+0x8e>
   118f4:	6863      	ldr	r3, [r4, #4]
   118f6:	6013      	str	r3, [r2, #0]
   118f8:	0030      	movs	r0, r6
   118fa:	f000 fd72 	bl	123e2 <__malloc_unlock>
   118fe:	0020      	movs	r0, r4
   11900:	2207      	movs	r2, #7
   11902:	300b      	adds	r0, #11
   11904:	1d23      	adds	r3, r4, #4
   11906:	4390      	bics	r0, r2
   11908:	1ac3      	subs	r3, r0, r3
   1190a:	d0e7      	beq.n	118dc <_malloc_r+0x58>
   1190c:	425a      	negs	r2, r3
   1190e:	50e2      	str	r2, [r4, r3]
   11910:	e7e4      	b.n	118dc <_malloc_r+0x58>
   11912:	684b      	ldr	r3, [r1, #4]
   11914:	6063      	str	r3, [r4, #4]
   11916:	000c      	movs	r4, r1
   11918:	e7ee      	b.n	118f8 <_malloc_r+0x74>
   1191a:	000c      	movs	r4, r1
   1191c:	6849      	ldr	r1, [r1, #4]
   1191e:	e7c2      	b.n	118a6 <_malloc_r+0x22>
   11920:	2303      	movs	r3, #3
   11922:	1cc4      	adds	r4, r0, #3
   11924:	439c      	bics	r4, r3
   11926:	42a0      	cmp	r0, r4
   11928:	d0e0      	beq.n	118ec <_malloc_r+0x68>
   1192a:	1a21      	subs	r1, r4, r0
   1192c:	0030      	movs	r0, r6
   1192e:	f000 f89f 	bl	11a70 <_sbrk_r>
   11932:	1c43      	adds	r3, r0, #1
   11934:	d1da      	bne.n	118ec <_malloc_r+0x68>
   11936:	e7c6      	b.n	118c6 <_malloc_r+0x42>
   11938:	200003f0 	.word	0x200003f0
   1193c:	200003f4 	.word	0x200003f4

00011940 <iprintf>:
   11940:	b40f      	push	{r0, r1, r2, r3}
   11942:	4b0b      	ldr	r3, [pc, #44]	; (11970 <iprintf+0x30>)
   11944:	b513      	push	{r0, r1, r4, lr}
   11946:	681c      	ldr	r4, [r3, #0]
   11948:	2c00      	cmp	r4, #0
   1194a:	d005      	beq.n	11958 <iprintf+0x18>
   1194c:	69a3      	ldr	r3, [r4, #24]
   1194e:	2b00      	cmp	r3, #0
   11950:	d102      	bne.n	11958 <iprintf+0x18>
   11952:	0020      	movs	r0, r4
   11954:	f000 fc34 	bl	121c0 <__sinit>
   11958:	ab05      	add	r3, sp, #20
   1195a:	9a04      	ldr	r2, [sp, #16]
   1195c:	68a1      	ldr	r1, [r4, #8]
   1195e:	0020      	movs	r0, r4
   11960:	9301      	str	r3, [sp, #4]
   11962:	f000 fecd 	bl	12700 <_vfiprintf_r>
   11966:	bc16      	pop	{r1, r2, r4}
   11968:	bc08      	pop	{r3}
   1196a:	b004      	add	sp, #16
   1196c:	4718      	bx	r3
   1196e:	46c0      	nop			; (mov r8, r8)
   11970:	20000020 	.word	0x20000020

00011974 <putchar>:
   11974:	4b08      	ldr	r3, [pc, #32]	; (11998 <putchar+0x24>)
   11976:	b570      	push	{r4, r5, r6, lr}
   11978:	681c      	ldr	r4, [r3, #0]
   1197a:	0005      	movs	r5, r0
   1197c:	2c00      	cmp	r4, #0
   1197e:	d005      	beq.n	1198c <putchar+0x18>
   11980:	69a3      	ldr	r3, [r4, #24]
   11982:	2b00      	cmp	r3, #0
   11984:	d102      	bne.n	1198c <putchar+0x18>
   11986:	0020      	movs	r0, r4
   11988:	f000 fc1a 	bl	121c0 <__sinit>
   1198c:	0029      	movs	r1, r5
   1198e:	68a2      	ldr	r2, [r4, #8]
   11990:	0020      	movs	r0, r4
   11992:	f001 f959 	bl	12c48 <_putc_r>
   11996:	bd70      	pop	{r4, r5, r6, pc}
   11998:	20000020 	.word	0x20000020

0001199c <_puts_r>:
   1199c:	b570      	push	{r4, r5, r6, lr}
   1199e:	0005      	movs	r5, r0
   119a0:	000e      	movs	r6, r1
   119a2:	2800      	cmp	r0, #0
   119a4:	d004      	beq.n	119b0 <_puts_r+0x14>
   119a6:	6983      	ldr	r3, [r0, #24]
   119a8:	2b00      	cmp	r3, #0
   119aa:	d101      	bne.n	119b0 <_puts_r+0x14>
   119ac:	f000 fc08 	bl	121c0 <__sinit>
   119b0:	69ab      	ldr	r3, [r5, #24]
   119b2:	68ac      	ldr	r4, [r5, #8]
   119b4:	2b00      	cmp	r3, #0
   119b6:	d102      	bne.n	119be <_puts_r+0x22>
   119b8:	0028      	movs	r0, r5
   119ba:	f000 fc01 	bl	121c0 <__sinit>
   119be:	4b24      	ldr	r3, [pc, #144]	; (11a50 <_puts_r+0xb4>)
   119c0:	429c      	cmp	r4, r3
   119c2:	d10f      	bne.n	119e4 <_puts_r+0x48>
   119c4:	686c      	ldr	r4, [r5, #4]
   119c6:	89a3      	ldrh	r3, [r4, #12]
   119c8:	071b      	lsls	r3, r3, #28
   119ca:	d502      	bpl.n	119d2 <_puts_r+0x36>
   119cc:	6923      	ldr	r3, [r4, #16]
   119ce:	2b00      	cmp	r3, #0
   119d0:	d120      	bne.n	11a14 <_puts_r+0x78>
   119d2:	0021      	movs	r1, r4
   119d4:	0028      	movs	r0, r5
   119d6:	f000 fa85 	bl	11ee4 <__swsetup_r>
   119da:	2800      	cmp	r0, #0
   119dc:	d01a      	beq.n	11a14 <_puts_r+0x78>
   119de:	2001      	movs	r0, #1
   119e0:	4240      	negs	r0, r0
   119e2:	bd70      	pop	{r4, r5, r6, pc}
   119e4:	4b1b      	ldr	r3, [pc, #108]	; (11a54 <_puts_r+0xb8>)
   119e6:	429c      	cmp	r4, r3
   119e8:	d101      	bne.n	119ee <_puts_r+0x52>
   119ea:	68ac      	ldr	r4, [r5, #8]
   119ec:	e7eb      	b.n	119c6 <_puts_r+0x2a>
   119ee:	4b1a      	ldr	r3, [pc, #104]	; (11a58 <_puts_r+0xbc>)
   119f0:	429c      	cmp	r4, r3
   119f2:	d1e8      	bne.n	119c6 <_puts_r+0x2a>
   119f4:	68ec      	ldr	r4, [r5, #12]
   119f6:	e7e6      	b.n	119c6 <_puts_r+0x2a>
   119f8:	3b01      	subs	r3, #1
   119fa:	3601      	adds	r6, #1
   119fc:	60a3      	str	r3, [r4, #8]
   119fe:	2b00      	cmp	r3, #0
   11a00:	da04      	bge.n	11a0c <_puts_r+0x70>
   11a02:	69a2      	ldr	r2, [r4, #24]
   11a04:	4293      	cmp	r3, r2
   11a06:	db16      	blt.n	11a36 <_puts_r+0x9a>
   11a08:	290a      	cmp	r1, #10
   11a0a:	d014      	beq.n	11a36 <_puts_r+0x9a>
   11a0c:	6823      	ldr	r3, [r4, #0]
   11a0e:	1c5a      	adds	r2, r3, #1
   11a10:	6022      	str	r2, [r4, #0]
   11a12:	7019      	strb	r1, [r3, #0]
   11a14:	7831      	ldrb	r1, [r6, #0]
   11a16:	68a3      	ldr	r3, [r4, #8]
   11a18:	2900      	cmp	r1, #0
   11a1a:	d1ed      	bne.n	119f8 <_puts_r+0x5c>
   11a1c:	3b01      	subs	r3, #1
   11a1e:	60a3      	str	r3, [r4, #8]
   11a20:	2b00      	cmp	r3, #0
   11a22:	da0f      	bge.n	11a44 <_puts_r+0xa8>
   11a24:	0022      	movs	r2, r4
   11a26:	310a      	adds	r1, #10
   11a28:	0028      	movs	r0, r5
   11a2a:	f000 fa05 	bl	11e38 <__swbuf_r>
   11a2e:	1c43      	adds	r3, r0, #1
   11a30:	d0d5      	beq.n	119de <_puts_r+0x42>
   11a32:	200a      	movs	r0, #10
   11a34:	e7d5      	b.n	119e2 <_puts_r+0x46>
   11a36:	0022      	movs	r2, r4
   11a38:	0028      	movs	r0, r5
   11a3a:	f000 f9fd 	bl	11e38 <__swbuf_r>
   11a3e:	1c43      	adds	r3, r0, #1
   11a40:	d1e8      	bne.n	11a14 <_puts_r+0x78>
   11a42:	e7cc      	b.n	119de <_puts_r+0x42>
   11a44:	200a      	movs	r0, #10
   11a46:	6823      	ldr	r3, [r4, #0]
   11a48:	1c5a      	adds	r2, r3, #1
   11a4a:	6022      	str	r2, [r4, #0]
   11a4c:	7018      	strb	r0, [r3, #0]
   11a4e:	e7c8      	b.n	119e2 <_puts_r+0x46>
   11a50:	000148a0 	.word	0x000148a0
   11a54:	000148c0 	.word	0x000148c0
   11a58:	00014880 	.word	0x00014880

00011a5c <puts>:
   11a5c:	b510      	push	{r4, lr}
   11a5e:	4b03      	ldr	r3, [pc, #12]	; (11a6c <puts+0x10>)
   11a60:	0001      	movs	r1, r0
   11a62:	6818      	ldr	r0, [r3, #0]
   11a64:	f7ff ff9a 	bl	1199c <_puts_r>
   11a68:	bd10      	pop	{r4, pc}
   11a6a:	46c0      	nop			; (mov r8, r8)
   11a6c:	20000020 	.word	0x20000020

00011a70 <_sbrk_r>:
   11a70:	2300      	movs	r3, #0
   11a72:	b570      	push	{r4, r5, r6, lr}
   11a74:	4c06      	ldr	r4, [pc, #24]	; (11a90 <_sbrk_r+0x20>)
   11a76:	0005      	movs	r5, r0
   11a78:	0008      	movs	r0, r1
   11a7a:	6023      	str	r3, [r4, #0]
   11a7c:	f7fd fe08 	bl	f690 <_sbrk>
   11a80:	1c43      	adds	r3, r0, #1
   11a82:	d103      	bne.n	11a8c <_sbrk_r+0x1c>
   11a84:	6823      	ldr	r3, [r4, #0]
   11a86:	2b00      	cmp	r3, #0
   11a88:	d000      	beq.n	11a8c <_sbrk_r+0x1c>
   11a8a:	602b      	str	r3, [r5, #0]
   11a8c:	bd70      	pop	{r4, r5, r6, pc}
   11a8e:	46c0      	nop			; (mov r8, r8)
   11a90:	20000fb8 	.word	0x20000fb8

00011a94 <setbuf>:
   11a94:	424a      	negs	r2, r1
   11a96:	414a      	adcs	r2, r1
   11a98:	2380      	movs	r3, #128	; 0x80
   11a9a:	b510      	push	{r4, lr}
   11a9c:	0052      	lsls	r2, r2, #1
   11a9e:	00db      	lsls	r3, r3, #3
   11aa0:	f000 f802 	bl	11aa8 <setvbuf>
   11aa4:	bd10      	pop	{r4, pc}
	...

00011aa8 <setvbuf>:
   11aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11aaa:	001d      	movs	r5, r3
   11aac:	4b4f      	ldr	r3, [pc, #316]	; (11bec <setvbuf+0x144>)
   11aae:	b085      	sub	sp, #20
   11ab0:	681e      	ldr	r6, [r3, #0]
   11ab2:	0004      	movs	r4, r0
   11ab4:	000f      	movs	r7, r1
   11ab6:	9200      	str	r2, [sp, #0]
   11ab8:	2e00      	cmp	r6, #0
   11aba:	d005      	beq.n	11ac8 <setvbuf+0x20>
   11abc:	69b3      	ldr	r3, [r6, #24]
   11abe:	2b00      	cmp	r3, #0
   11ac0:	d102      	bne.n	11ac8 <setvbuf+0x20>
   11ac2:	0030      	movs	r0, r6
   11ac4:	f000 fb7c 	bl	121c0 <__sinit>
   11ac8:	4b49      	ldr	r3, [pc, #292]	; (11bf0 <setvbuf+0x148>)
   11aca:	429c      	cmp	r4, r3
   11acc:	d150      	bne.n	11b70 <setvbuf+0xc8>
   11ace:	6874      	ldr	r4, [r6, #4]
   11ad0:	9b00      	ldr	r3, [sp, #0]
   11ad2:	2b02      	cmp	r3, #2
   11ad4:	d005      	beq.n	11ae2 <setvbuf+0x3a>
   11ad6:	2b01      	cmp	r3, #1
   11ad8:	d900      	bls.n	11adc <setvbuf+0x34>
   11ada:	e084      	b.n	11be6 <setvbuf+0x13e>
   11adc:	2d00      	cmp	r5, #0
   11ade:	da00      	bge.n	11ae2 <setvbuf+0x3a>
   11ae0:	e081      	b.n	11be6 <setvbuf+0x13e>
   11ae2:	0021      	movs	r1, r4
   11ae4:	0030      	movs	r0, r6
   11ae6:	f000 fafd 	bl	120e4 <_fflush_r>
   11aea:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11aec:	2900      	cmp	r1, #0
   11aee:	d008      	beq.n	11b02 <setvbuf+0x5a>
   11af0:	0023      	movs	r3, r4
   11af2:	3344      	adds	r3, #68	; 0x44
   11af4:	4299      	cmp	r1, r3
   11af6:	d002      	beq.n	11afe <setvbuf+0x56>
   11af8:	0030      	movs	r0, r6
   11afa:	f7ff fe79 	bl	117f0 <_free_r>
   11afe:	2300      	movs	r3, #0
   11b00:	6363      	str	r3, [r4, #52]	; 0x34
   11b02:	2300      	movs	r3, #0
   11b04:	61a3      	str	r3, [r4, #24]
   11b06:	6063      	str	r3, [r4, #4]
   11b08:	89a3      	ldrh	r3, [r4, #12]
   11b0a:	061b      	lsls	r3, r3, #24
   11b0c:	d503      	bpl.n	11b16 <setvbuf+0x6e>
   11b0e:	6921      	ldr	r1, [r4, #16]
   11b10:	0030      	movs	r0, r6
   11b12:	f7ff fe6d 	bl	117f0 <_free_r>
   11b16:	89a3      	ldrh	r3, [r4, #12]
   11b18:	4a36      	ldr	r2, [pc, #216]	; (11bf4 <setvbuf+0x14c>)
   11b1a:	4013      	ands	r3, r2
   11b1c:	81a3      	strh	r3, [r4, #12]
   11b1e:	9b00      	ldr	r3, [sp, #0]
   11b20:	2b02      	cmp	r3, #2
   11b22:	d05a      	beq.n	11bda <setvbuf+0x132>
   11b24:	ab03      	add	r3, sp, #12
   11b26:	aa02      	add	r2, sp, #8
   11b28:	0021      	movs	r1, r4
   11b2a:	0030      	movs	r0, r6
   11b2c:	f000 fbe0 	bl	122f0 <__swhatbuf_r>
   11b30:	89a3      	ldrh	r3, [r4, #12]
   11b32:	4318      	orrs	r0, r3
   11b34:	81a0      	strh	r0, [r4, #12]
   11b36:	2d00      	cmp	r5, #0
   11b38:	d124      	bne.n	11b84 <setvbuf+0xdc>
   11b3a:	9d02      	ldr	r5, [sp, #8]
   11b3c:	0028      	movs	r0, r5
   11b3e:	f7ff fe1f 	bl	11780 <malloc>
   11b42:	9501      	str	r5, [sp, #4]
   11b44:	1e07      	subs	r7, r0, #0
   11b46:	d142      	bne.n	11bce <setvbuf+0x126>
   11b48:	9b02      	ldr	r3, [sp, #8]
   11b4a:	9301      	str	r3, [sp, #4]
   11b4c:	42ab      	cmp	r3, r5
   11b4e:	d139      	bne.n	11bc4 <setvbuf+0x11c>
   11b50:	2001      	movs	r0, #1
   11b52:	4240      	negs	r0, r0
   11b54:	2302      	movs	r3, #2
   11b56:	89a2      	ldrh	r2, [r4, #12]
   11b58:	4313      	orrs	r3, r2
   11b5a:	81a3      	strh	r3, [r4, #12]
   11b5c:	2300      	movs	r3, #0
   11b5e:	60a3      	str	r3, [r4, #8]
   11b60:	0023      	movs	r3, r4
   11b62:	3347      	adds	r3, #71	; 0x47
   11b64:	6023      	str	r3, [r4, #0]
   11b66:	6123      	str	r3, [r4, #16]
   11b68:	2301      	movs	r3, #1
   11b6a:	6163      	str	r3, [r4, #20]
   11b6c:	b005      	add	sp, #20
   11b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b70:	4b21      	ldr	r3, [pc, #132]	; (11bf8 <setvbuf+0x150>)
   11b72:	429c      	cmp	r4, r3
   11b74:	d101      	bne.n	11b7a <setvbuf+0xd2>
   11b76:	68b4      	ldr	r4, [r6, #8]
   11b78:	e7aa      	b.n	11ad0 <setvbuf+0x28>
   11b7a:	4b20      	ldr	r3, [pc, #128]	; (11bfc <setvbuf+0x154>)
   11b7c:	429c      	cmp	r4, r3
   11b7e:	d1a7      	bne.n	11ad0 <setvbuf+0x28>
   11b80:	68f4      	ldr	r4, [r6, #12]
   11b82:	e7a5      	b.n	11ad0 <setvbuf+0x28>
   11b84:	2f00      	cmp	r7, #0
   11b86:	d0d9      	beq.n	11b3c <setvbuf+0x94>
   11b88:	69b3      	ldr	r3, [r6, #24]
   11b8a:	2b00      	cmp	r3, #0
   11b8c:	d102      	bne.n	11b94 <setvbuf+0xec>
   11b8e:	0030      	movs	r0, r6
   11b90:	f000 fb16 	bl	121c0 <__sinit>
   11b94:	9b00      	ldr	r3, [sp, #0]
   11b96:	2b01      	cmp	r3, #1
   11b98:	d103      	bne.n	11ba2 <setvbuf+0xfa>
   11b9a:	89a3      	ldrh	r3, [r4, #12]
   11b9c:	9a00      	ldr	r2, [sp, #0]
   11b9e:	431a      	orrs	r2, r3
   11ba0:	81a2      	strh	r2, [r4, #12]
   11ba2:	2008      	movs	r0, #8
   11ba4:	89a3      	ldrh	r3, [r4, #12]
   11ba6:	6027      	str	r7, [r4, #0]
   11ba8:	6127      	str	r7, [r4, #16]
   11baa:	6165      	str	r5, [r4, #20]
   11bac:	4018      	ands	r0, r3
   11bae:	d018      	beq.n	11be2 <setvbuf+0x13a>
   11bb0:	2001      	movs	r0, #1
   11bb2:	4018      	ands	r0, r3
   11bb4:	2300      	movs	r3, #0
   11bb6:	4298      	cmp	r0, r3
   11bb8:	d011      	beq.n	11bde <setvbuf+0x136>
   11bba:	426d      	negs	r5, r5
   11bbc:	60a3      	str	r3, [r4, #8]
   11bbe:	61a5      	str	r5, [r4, #24]
   11bc0:	0018      	movs	r0, r3
   11bc2:	e7d3      	b.n	11b6c <setvbuf+0xc4>
   11bc4:	9801      	ldr	r0, [sp, #4]
   11bc6:	f7ff fddb 	bl	11780 <malloc>
   11bca:	1e07      	subs	r7, r0, #0
   11bcc:	d0c0      	beq.n	11b50 <setvbuf+0xa8>
   11bce:	2380      	movs	r3, #128	; 0x80
   11bd0:	89a2      	ldrh	r2, [r4, #12]
   11bd2:	9d01      	ldr	r5, [sp, #4]
   11bd4:	4313      	orrs	r3, r2
   11bd6:	81a3      	strh	r3, [r4, #12]
   11bd8:	e7d6      	b.n	11b88 <setvbuf+0xe0>
   11bda:	2000      	movs	r0, #0
   11bdc:	e7ba      	b.n	11b54 <setvbuf+0xac>
   11bde:	60a5      	str	r5, [r4, #8]
   11be0:	e7c4      	b.n	11b6c <setvbuf+0xc4>
   11be2:	60a0      	str	r0, [r4, #8]
   11be4:	e7c2      	b.n	11b6c <setvbuf+0xc4>
   11be6:	2001      	movs	r0, #1
   11be8:	4240      	negs	r0, r0
   11bea:	e7bf      	b.n	11b6c <setvbuf+0xc4>
   11bec:	20000020 	.word	0x20000020
   11bf0:	000148a0 	.word	0x000148a0
   11bf4:	fffff35c 	.word	0xfffff35c
   11bf8:	000148c0 	.word	0x000148c0
   11bfc:	00014880 	.word	0x00014880

00011c00 <siprintf>:
   11c00:	b40e      	push	{r1, r2, r3}
   11c02:	b510      	push	{r4, lr}
   11c04:	b09d      	sub	sp, #116	; 0x74
   11c06:	a902      	add	r1, sp, #8
   11c08:	9002      	str	r0, [sp, #8]
   11c0a:	6108      	str	r0, [r1, #16]
   11c0c:	480b      	ldr	r0, [pc, #44]	; (11c3c <siprintf+0x3c>)
   11c0e:	2482      	movs	r4, #130	; 0x82
   11c10:	6088      	str	r0, [r1, #8]
   11c12:	6148      	str	r0, [r1, #20]
   11c14:	2001      	movs	r0, #1
   11c16:	4240      	negs	r0, r0
   11c18:	ab1f      	add	r3, sp, #124	; 0x7c
   11c1a:	81c8      	strh	r0, [r1, #14]
   11c1c:	4808      	ldr	r0, [pc, #32]	; (11c40 <siprintf+0x40>)
   11c1e:	cb04      	ldmia	r3!, {r2}
   11c20:	00a4      	lsls	r4, r4, #2
   11c22:	6800      	ldr	r0, [r0, #0]
   11c24:	9301      	str	r3, [sp, #4]
   11c26:	818c      	strh	r4, [r1, #12]
   11c28:	f000 fc3e 	bl	124a8 <_svfiprintf_r>
   11c2c:	2300      	movs	r3, #0
   11c2e:	9a02      	ldr	r2, [sp, #8]
   11c30:	7013      	strb	r3, [r2, #0]
   11c32:	b01d      	add	sp, #116	; 0x74
   11c34:	bc10      	pop	{r4}
   11c36:	bc08      	pop	{r3}
   11c38:	b003      	add	sp, #12
   11c3a:	4718      	bx	r3
   11c3c:	7fffffff 	.word	0x7fffffff
   11c40:	20000020 	.word	0x20000020

00011c44 <strcmp>:
   11c44:	7802      	ldrb	r2, [r0, #0]
   11c46:	780b      	ldrb	r3, [r1, #0]
   11c48:	2a00      	cmp	r2, #0
   11c4a:	d003      	beq.n	11c54 <strcmp+0x10>
   11c4c:	3001      	adds	r0, #1
   11c4e:	3101      	adds	r1, #1
   11c50:	429a      	cmp	r2, r3
   11c52:	d0f7      	beq.n	11c44 <strcmp>
   11c54:	1ad0      	subs	r0, r2, r3
   11c56:	4770      	bx	lr

00011c58 <strcpy>:
   11c58:	1c03      	adds	r3, r0, #0
   11c5a:	780a      	ldrb	r2, [r1, #0]
   11c5c:	3101      	adds	r1, #1
   11c5e:	701a      	strb	r2, [r3, #0]
   11c60:	3301      	adds	r3, #1
   11c62:	2a00      	cmp	r2, #0
   11c64:	d1f9      	bne.n	11c5a <strcpy+0x2>
   11c66:	4770      	bx	lr

00011c68 <strdup>:
   11c68:	b510      	push	{r4, lr}
   11c6a:	4b03      	ldr	r3, [pc, #12]	; (11c78 <strdup+0x10>)
   11c6c:	0001      	movs	r1, r0
   11c6e:	6818      	ldr	r0, [r3, #0]
   11c70:	f000 f804 	bl	11c7c <_strdup_r>
   11c74:	bd10      	pop	{r4, pc}
   11c76:	46c0      	nop			; (mov r8, r8)
   11c78:	20000020 	.word	0x20000020

00011c7c <_strdup_r>:
   11c7c:	b570      	push	{r4, r5, r6, lr}
   11c7e:	0005      	movs	r5, r0
   11c80:	0008      	movs	r0, r1
   11c82:	000e      	movs	r6, r1
   11c84:	f000 f80d 	bl	11ca2 <strlen>
   11c88:	1c44      	adds	r4, r0, #1
   11c8a:	0021      	movs	r1, r4
   11c8c:	0028      	movs	r0, r5
   11c8e:	f7ff fdf9 	bl	11884 <_malloc_r>
   11c92:	1e05      	subs	r5, r0, #0
   11c94:	d003      	beq.n	11c9e <_strdup_r+0x22>
   11c96:	0022      	movs	r2, r4
   11c98:	0031      	movs	r1, r6
   11c9a:	f7ff fd85 	bl	117a8 <memcpy>
   11c9e:	0028      	movs	r0, r5
   11ca0:	bd70      	pop	{r4, r5, r6, pc}

00011ca2 <strlen>:
   11ca2:	2300      	movs	r3, #0
   11ca4:	5cc2      	ldrb	r2, [r0, r3]
   11ca6:	3301      	adds	r3, #1
   11ca8:	2a00      	cmp	r2, #0
   11caa:	d1fb      	bne.n	11ca4 <strlen+0x2>
   11cac:	1e58      	subs	r0, r3, #1
   11cae:	4770      	bx	lr

00011cb0 <strncmp>:
   11cb0:	2300      	movs	r3, #0
   11cb2:	b530      	push	{r4, r5, lr}
   11cb4:	429a      	cmp	r2, r3
   11cb6:	d00a      	beq.n	11cce <strncmp+0x1e>
   11cb8:	3a01      	subs	r2, #1
   11cba:	5cc4      	ldrb	r4, [r0, r3]
   11cbc:	5ccd      	ldrb	r5, [r1, r3]
   11cbe:	42ac      	cmp	r4, r5
   11cc0:	d104      	bne.n	11ccc <strncmp+0x1c>
   11cc2:	429a      	cmp	r2, r3
   11cc4:	d002      	beq.n	11ccc <strncmp+0x1c>
   11cc6:	3301      	adds	r3, #1
   11cc8:	2c00      	cmp	r4, #0
   11cca:	d1f6      	bne.n	11cba <strncmp+0xa>
   11ccc:	1b63      	subs	r3, r4, r5
   11cce:	0018      	movs	r0, r3
   11cd0:	bd30      	pop	{r4, r5, pc}

00011cd2 <strstr>:
   11cd2:	b510      	push	{r4, lr}
   11cd4:	0002      	movs	r2, r0
   11cd6:	7800      	ldrb	r0, [r0, #0]
   11cd8:	2800      	cmp	r0, #0
   11cda:	d104      	bne.n	11ce6 <strstr+0x14>
   11cdc:	7809      	ldrb	r1, [r1, #0]
   11cde:	2900      	cmp	r1, #0
   11ce0:	d00d      	beq.n	11cfe <strstr+0x2c>
   11ce2:	bd10      	pop	{r4, pc}
   11ce4:	3201      	adds	r2, #1
   11ce6:	7810      	ldrb	r0, [r2, #0]
   11ce8:	2800      	cmp	r0, #0
   11cea:	d0fa      	beq.n	11ce2 <strstr+0x10>
   11cec:	2300      	movs	r3, #0
   11cee:	5cc8      	ldrb	r0, [r1, r3]
   11cf0:	2800      	cmp	r0, #0
   11cf2:	d004      	beq.n	11cfe <strstr+0x2c>
   11cf4:	5cd4      	ldrb	r4, [r2, r3]
   11cf6:	4284      	cmp	r4, r0
   11cf8:	d1f4      	bne.n	11ce4 <strstr+0x12>
   11cfa:	3301      	adds	r3, #1
   11cfc:	e7f7      	b.n	11cee <strstr+0x1c>
   11cfe:	0010      	movs	r0, r2
   11d00:	e7ef      	b.n	11ce2 <strstr+0x10>
	...

00011d04 <_strtol_l.isra.0>:
   11d04:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d06:	001f      	movs	r7, r3
   11d08:	000e      	movs	r6, r1
   11d0a:	b087      	sub	sp, #28
   11d0c:	9005      	str	r0, [sp, #20]
   11d0e:	9103      	str	r1, [sp, #12]
   11d10:	9202      	str	r2, [sp, #8]
   11d12:	980c      	ldr	r0, [sp, #48]	; 0x30
   11d14:	7834      	ldrb	r4, [r6, #0]
   11d16:	f000 fae8 	bl	122ea <__locale_ctype_ptr_l>
   11d1a:	2208      	movs	r2, #8
   11d1c:	1900      	adds	r0, r0, r4
   11d1e:	7843      	ldrb	r3, [r0, #1]
   11d20:	1c75      	adds	r5, r6, #1
   11d22:	4013      	ands	r3, r2
   11d24:	d10c      	bne.n	11d40 <_strtol_l.isra.0+0x3c>
   11d26:	2c2d      	cmp	r4, #45	; 0x2d
   11d28:	d10c      	bne.n	11d44 <_strtol_l.isra.0+0x40>
   11d2a:	3301      	adds	r3, #1
   11d2c:	782c      	ldrb	r4, [r5, #0]
   11d2e:	9301      	str	r3, [sp, #4]
   11d30:	1cb5      	adds	r5, r6, #2
   11d32:	2f00      	cmp	r7, #0
   11d34:	d00c      	beq.n	11d50 <_strtol_l.isra.0+0x4c>
   11d36:	2f10      	cmp	r7, #16
   11d38:	d114      	bne.n	11d64 <_strtol_l.isra.0+0x60>
   11d3a:	2c30      	cmp	r4, #48	; 0x30
   11d3c:	d00a      	beq.n	11d54 <_strtol_l.isra.0+0x50>
   11d3e:	e011      	b.n	11d64 <_strtol_l.isra.0+0x60>
   11d40:	002e      	movs	r6, r5
   11d42:	e7e6      	b.n	11d12 <_strtol_l.isra.0+0xe>
   11d44:	9301      	str	r3, [sp, #4]
   11d46:	2c2b      	cmp	r4, #43	; 0x2b
   11d48:	d1f3      	bne.n	11d32 <_strtol_l.isra.0+0x2e>
   11d4a:	782c      	ldrb	r4, [r5, #0]
   11d4c:	1cb5      	adds	r5, r6, #2
   11d4e:	e7f0      	b.n	11d32 <_strtol_l.isra.0+0x2e>
   11d50:	2c30      	cmp	r4, #48	; 0x30
   11d52:	d12f      	bne.n	11db4 <_strtol_l.isra.0+0xb0>
   11d54:	2220      	movs	r2, #32
   11d56:	782b      	ldrb	r3, [r5, #0]
   11d58:	4393      	bics	r3, r2
   11d5a:	2b58      	cmp	r3, #88	; 0x58
   11d5c:	d151      	bne.n	11e02 <_strtol_l.isra.0+0xfe>
   11d5e:	2710      	movs	r7, #16
   11d60:	786c      	ldrb	r4, [r5, #1]
   11d62:	3502      	adds	r5, #2
   11d64:	9b01      	ldr	r3, [sp, #4]
   11d66:	4a29      	ldr	r2, [pc, #164]	; (11e0c <_strtol_l.isra.0+0x108>)
   11d68:	0039      	movs	r1, r7
   11d6a:	189e      	adds	r6, r3, r2
   11d6c:	0030      	movs	r0, r6
   11d6e:	f7ff fbc3 	bl	114f8 <__aeabi_uidivmod>
   11d72:	0030      	movs	r0, r6
   11d74:	9104      	str	r1, [sp, #16]
   11d76:	0039      	movs	r1, r7
   11d78:	f7ff fb38 	bl	113ec <__udivsi3>
   11d7c:	2101      	movs	r1, #1
   11d7e:	2300      	movs	r3, #0
   11d80:	4249      	negs	r1, r1
   11d82:	0002      	movs	r2, r0
   11d84:	468c      	mov	ip, r1
   11d86:	0018      	movs	r0, r3
   11d88:	0021      	movs	r1, r4
   11d8a:	3930      	subs	r1, #48	; 0x30
   11d8c:	2909      	cmp	r1, #9
   11d8e:	d813      	bhi.n	11db8 <_strtol_l.isra.0+0xb4>
   11d90:	000c      	movs	r4, r1
   11d92:	42a7      	cmp	r7, r4
   11d94:	dd1c      	ble.n	11dd0 <_strtol_l.isra.0+0xcc>
   11d96:	1c59      	adds	r1, r3, #1
   11d98:	d009      	beq.n	11dae <_strtol_l.isra.0+0xaa>
   11d9a:	4663      	mov	r3, ip
   11d9c:	4282      	cmp	r2, r0
   11d9e:	d306      	bcc.n	11dae <_strtol_l.isra.0+0xaa>
   11da0:	d102      	bne.n	11da8 <_strtol_l.isra.0+0xa4>
   11da2:	9904      	ldr	r1, [sp, #16]
   11da4:	42a1      	cmp	r1, r4
   11da6:	db02      	blt.n	11dae <_strtol_l.isra.0+0xaa>
   11da8:	2301      	movs	r3, #1
   11daa:	4378      	muls	r0, r7
   11dac:	1820      	adds	r0, r4, r0
   11dae:	782c      	ldrb	r4, [r5, #0]
   11db0:	3501      	adds	r5, #1
   11db2:	e7e9      	b.n	11d88 <_strtol_l.isra.0+0x84>
   11db4:	270a      	movs	r7, #10
   11db6:	e7d5      	b.n	11d64 <_strtol_l.isra.0+0x60>
   11db8:	0021      	movs	r1, r4
   11dba:	3941      	subs	r1, #65	; 0x41
   11dbc:	2919      	cmp	r1, #25
   11dbe:	d801      	bhi.n	11dc4 <_strtol_l.isra.0+0xc0>
   11dc0:	3c37      	subs	r4, #55	; 0x37
   11dc2:	e7e6      	b.n	11d92 <_strtol_l.isra.0+0x8e>
   11dc4:	0021      	movs	r1, r4
   11dc6:	3961      	subs	r1, #97	; 0x61
   11dc8:	2919      	cmp	r1, #25
   11dca:	d801      	bhi.n	11dd0 <_strtol_l.isra.0+0xcc>
   11dcc:	3c57      	subs	r4, #87	; 0x57
   11dce:	e7e0      	b.n	11d92 <_strtol_l.isra.0+0x8e>
   11dd0:	1c5a      	adds	r2, r3, #1
   11dd2:	d108      	bne.n	11de6 <_strtol_l.isra.0+0xe2>
   11dd4:	9a05      	ldr	r2, [sp, #20]
   11dd6:	3323      	adds	r3, #35	; 0x23
   11dd8:	6013      	str	r3, [r2, #0]
   11dda:	9b02      	ldr	r3, [sp, #8]
   11ddc:	0030      	movs	r0, r6
   11dde:	2b00      	cmp	r3, #0
   11de0:	d10b      	bne.n	11dfa <_strtol_l.isra.0+0xf6>
   11de2:	b007      	add	sp, #28
   11de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11de6:	9a01      	ldr	r2, [sp, #4]
   11de8:	2a00      	cmp	r2, #0
   11dea:	d000      	beq.n	11dee <_strtol_l.isra.0+0xea>
   11dec:	4240      	negs	r0, r0
   11dee:	9a02      	ldr	r2, [sp, #8]
   11df0:	2a00      	cmp	r2, #0
   11df2:	d0f6      	beq.n	11de2 <_strtol_l.isra.0+0xde>
   11df4:	9a03      	ldr	r2, [sp, #12]
   11df6:	2b00      	cmp	r3, #0
   11df8:	d000      	beq.n	11dfc <_strtol_l.isra.0+0xf8>
   11dfa:	1e6a      	subs	r2, r5, #1
   11dfc:	9b02      	ldr	r3, [sp, #8]
   11dfe:	601a      	str	r2, [r3, #0]
   11e00:	e7ef      	b.n	11de2 <_strtol_l.isra.0+0xde>
   11e02:	2430      	movs	r4, #48	; 0x30
   11e04:	2f00      	cmp	r7, #0
   11e06:	d1ad      	bne.n	11d64 <_strtol_l.isra.0+0x60>
   11e08:	3708      	adds	r7, #8
   11e0a:	e7ab      	b.n	11d64 <_strtol_l.isra.0+0x60>
   11e0c:	7fffffff 	.word	0x7fffffff

00011e10 <strtol>:
   11e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11e12:	0013      	movs	r3, r2
   11e14:	4a06      	ldr	r2, [pc, #24]	; (11e30 <strtol+0x20>)
   11e16:	0005      	movs	r5, r0
   11e18:	6810      	ldr	r0, [r2, #0]
   11e1a:	6a04      	ldr	r4, [r0, #32]
   11e1c:	2c00      	cmp	r4, #0
   11e1e:	d100      	bne.n	11e22 <strtol+0x12>
   11e20:	4c04      	ldr	r4, [pc, #16]	; (11e34 <strtol+0x24>)
   11e22:	000a      	movs	r2, r1
   11e24:	9400      	str	r4, [sp, #0]
   11e26:	0029      	movs	r1, r5
   11e28:	f7ff ff6c 	bl	11d04 <_strtol_l.isra.0>
   11e2c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11e2e:	46c0      	nop			; (mov r8, r8)
   11e30:	20000020 	.word	0x20000020
   11e34:	20000084 	.word	0x20000084

00011e38 <__swbuf_r>:
   11e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e3a:	0005      	movs	r5, r0
   11e3c:	000e      	movs	r6, r1
   11e3e:	0014      	movs	r4, r2
   11e40:	2800      	cmp	r0, #0
   11e42:	d004      	beq.n	11e4e <__swbuf_r+0x16>
   11e44:	6983      	ldr	r3, [r0, #24]
   11e46:	2b00      	cmp	r3, #0
   11e48:	d101      	bne.n	11e4e <__swbuf_r+0x16>
   11e4a:	f000 f9b9 	bl	121c0 <__sinit>
   11e4e:	4b22      	ldr	r3, [pc, #136]	; (11ed8 <__swbuf_r+0xa0>)
   11e50:	429c      	cmp	r4, r3
   11e52:	d12d      	bne.n	11eb0 <__swbuf_r+0x78>
   11e54:	686c      	ldr	r4, [r5, #4]
   11e56:	69a3      	ldr	r3, [r4, #24]
   11e58:	60a3      	str	r3, [r4, #8]
   11e5a:	89a3      	ldrh	r3, [r4, #12]
   11e5c:	071b      	lsls	r3, r3, #28
   11e5e:	d531      	bpl.n	11ec4 <__swbuf_r+0x8c>
   11e60:	6923      	ldr	r3, [r4, #16]
   11e62:	2b00      	cmp	r3, #0
   11e64:	d02e      	beq.n	11ec4 <__swbuf_r+0x8c>
   11e66:	6823      	ldr	r3, [r4, #0]
   11e68:	6922      	ldr	r2, [r4, #16]
   11e6a:	b2f7      	uxtb	r7, r6
   11e6c:	1a98      	subs	r0, r3, r2
   11e6e:	6963      	ldr	r3, [r4, #20]
   11e70:	b2f6      	uxtb	r6, r6
   11e72:	4298      	cmp	r0, r3
   11e74:	db05      	blt.n	11e82 <__swbuf_r+0x4a>
   11e76:	0021      	movs	r1, r4
   11e78:	0028      	movs	r0, r5
   11e7a:	f000 f933 	bl	120e4 <_fflush_r>
   11e7e:	2800      	cmp	r0, #0
   11e80:	d126      	bne.n	11ed0 <__swbuf_r+0x98>
   11e82:	68a3      	ldr	r3, [r4, #8]
   11e84:	3001      	adds	r0, #1
   11e86:	3b01      	subs	r3, #1
   11e88:	60a3      	str	r3, [r4, #8]
   11e8a:	6823      	ldr	r3, [r4, #0]
   11e8c:	1c5a      	adds	r2, r3, #1
   11e8e:	6022      	str	r2, [r4, #0]
   11e90:	701f      	strb	r7, [r3, #0]
   11e92:	6963      	ldr	r3, [r4, #20]
   11e94:	4298      	cmp	r0, r3
   11e96:	d004      	beq.n	11ea2 <__swbuf_r+0x6a>
   11e98:	89a3      	ldrh	r3, [r4, #12]
   11e9a:	07db      	lsls	r3, r3, #31
   11e9c:	d51a      	bpl.n	11ed4 <__swbuf_r+0x9c>
   11e9e:	2e0a      	cmp	r6, #10
   11ea0:	d118      	bne.n	11ed4 <__swbuf_r+0x9c>
   11ea2:	0021      	movs	r1, r4
   11ea4:	0028      	movs	r0, r5
   11ea6:	f000 f91d 	bl	120e4 <_fflush_r>
   11eaa:	2800      	cmp	r0, #0
   11eac:	d012      	beq.n	11ed4 <__swbuf_r+0x9c>
   11eae:	e00f      	b.n	11ed0 <__swbuf_r+0x98>
   11eb0:	4b0a      	ldr	r3, [pc, #40]	; (11edc <__swbuf_r+0xa4>)
   11eb2:	429c      	cmp	r4, r3
   11eb4:	d101      	bne.n	11eba <__swbuf_r+0x82>
   11eb6:	68ac      	ldr	r4, [r5, #8]
   11eb8:	e7cd      	b.n	11e56 <__swbuf_r+0x1e>
   11eba:	4b09      	ldr	r3, [pc, #36]	; (11ee0 <__swbuf_r+0xa8>)
   11ebc:	429c      	cmp	r4, r3
   11ebe:	d1ca      	bne.n	11e56 <__swbuf_r+0x1e>
   11ec0:	68ec      	ldr	r4, [r5, #12]
   11ec2:	e7c8      	b.n	11e56 <__swbuf_r+0x1e>
   11ec4:	0021      	movs	r1, r4
   11ec6:	0028      	movs	r0, r5
   11ec8:	f000 f80c 	bl	11ee4 <__swsetup_r>
   11ecc:	2800      	cmp	r0, #0
   11ece:	d0ca      	beq.n	11e66 <__swbuf_r+0x2e>
   11ed0:	2601      	movs	r6, #1
   11ed2:	4276      	negs	r6, r6
   11ed4:	0030      	movs	r0, r6
   11ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ed8:	000148a0 	.word	0x000148a0
   11edc:	000148c0 	.word	0x000148c0
   11ee0:	00014880 	.word	0x00014880

00011ee4 <__swsetup_r>:
   11ee4:	4b36      	ldr	r3, [pc, #216]	; (11fc0 <__swsetup_r+0xdc>)
   11ee6:	b570      	push	{r4, r5, r6, lr}
   11ee8:	681d      	ldr	r5, [r3, #0]
   11eea:	0006      	movs	r6, r0
   11eec:	000c      	movs	r4, r1
   11eee:	2d00      	cmp	r5, #0
   11ef0:	d005      	beq.n	11efe <__swsetup_r+0x1a>
   11ef2:	69ab      	ldr	r3, [r5, #24]
   11ef4:	2b00      	cmp	r3, #0
   11ef6:	d102      	bne.n	11efe <__swsetup_r+0x1a>
   11ef8:	0028      	movs	r0, r5
   11efa:	f000 f961 	bl	121c0 <__sinit>
   11efe:	4b31      	ldr	r3, [pc, #196]	; (11fc4 <__swsetup_r+0xe0>)
   11f00:	429c      	cmp	r4, r3
   11f02:	d10f      	bne.n	11f24 <__swsetup_r+0x40>
   11f04:	686c      	ldr	r4, [r5, #4]
   11f06:	230c      	movs	r3, #12
   11f08:	5ee2      	ldrsh	r2, [r4, r3]
   11f0a:	b293      	uxth	r3, r2
   11f0c:	0719      	lsls	r1, r3, #28
   11f0e:	d42d      	bmi.n	11f6c <__swsetup_r+0x88>
   11f10:	06d9      	lsls	r1, r3, #27
   11f12:	d411      	bmi.n	11f38 <__swsetup_r+0x54>
   11f14:	2309      	movs	r3, #9
   11f16:	2001      	movs	r0, #1
   11f18:	6033      	str	r3, [r6, #0]
   11f1a:	3337      	adds	r3, #55	; 0x37
   11f1c:	4313      	orrs	r3, r2
   11f1e:	81a3      	strh	r3, [r4, #12]
   11f20:	4240      	negs	r0, r0
   11f22:	bd70      	pop	{r4, r5, r6, pc}
   11f24:	4b28      	ldr	r3, [pc, #160]	; (11fc8 <__swsetup_r+0xe4>)
   11f26:	429c      	cmp	r4, r3
   11f28:	d101      	bne.n	11f2e <__swsetup_r+0x4a>
   11f2a:	68ac      	ldr	r4, [r5, #8]
   11f2c:	e7eb      	b.n	11f06 <__swsetup_r+0x22>
   11f2e:	4b27      	ldr	r3, [pc, #156]	; (11fcc <__swsetup_r+0xe8>)
   11f30:	429c      	cmp	r4, r3
   11f32:	d1e8      	bne.n	11f06 <__swsetup_r+0x22>
   11f34:	68ec      	ldr	r4, [r5, #12]
   11f36:	e7e6      	b.n	11f06 <__swsetup_r+0x22>
   11f38:	075b      	lsls	r3, r3, #29
   11f3a:	d513      	bpl.n	11f64 <__swsetup_r+0x80>
   11f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11f3e:	2900      	cmp	r1, #0
   11f40:	d008      	beq.n	11f54 <__swsetup_r+0x70>
   11f42:	0023      	movs	r3, r4
   11f44:	3344      	adds	r3, #68	; 0x44
   11f46:	4299      	cmp	r1, r3
   11f48:	d002      	beq.n	11f50 <__swsetup_r+0x6c>
   11f4a:	0030      	movs	r0, r6
   11f4c:	f7ff fc50 	bl	117f0 <_free_r>
   11f50:	2300      	movs	r3, #0
   11f52:	6363      	str	r3, [r4, #52]	; 0x34
   11f54:	2224      	movs	r2, #36	; 0x24
   11f56:	89a3      	ldrh	r3, [r4, #12]
   11f58:	4393      	bics	r3, r2
   11f5a:	81a3      	strh	r3, [r4, #12]
   11f5c:	2300      	movs	r3, #0
   11f5e:	6063      	str	r3, [r4, #4]
   11f60:	6923      	ldr	r3, [r4, #16]
   11f62:	6023      	str	r3, [r4, #0]
   11f64:	2308      	movs	r3, #8
   11f66:	89a2      	ldrh	r2, [r4, #12]
   11f68:	4313      	orrs	r3, r2
   11f6a:	81a3      	strh	r3, [r4, #12]
   11f6c:	6923      	ldr	r3, [r4, #16]
   11f6e:	2b00      	cmp	r3, #0
   11f70:	d10b      	bne.n	11f8a <__swsetup_r+0xa6>
   11f72:	21a0      	movs	r1, #160	; 0xa0
   11f74:	2280      	movs	r2, #128	; 0x80
   11f76:	89a3      	ldrh	r3, [r4, #12]
   11f78:	0089      	lsls	r1, r1, #2
   11f7a:	0092      	lsls	r2, r2, #2
   11f7c:	400b      	ands	r3, r1
   11f7e:	4293      	cmp	r3, r2
   11f80:	d003      	beq.n	11f8a <__swsetup_r+0xa6>
   11f82:	0021      	movs	r1, r4
   11f84:	0030      	movs	r0, r6
   11f86:	f000 f9db 	bl	12340 <__smakebuf_r>
   11f8a:	2301      	movs	r3, #1
   11f8c:	89a2      	ldrh	r2, [r4, #12]
   11f8e:	4013      	ands	r3, r2
   11f90:	d011      	beq.n	11fb6 <__swsetup_r+0xd2>
   11f92:	2300      	movs	r3, #0
   11f94:	60a3      	str	r3, [r4, #8]
   11f96:	6963      	ldr	r3, [r4, #20]
   11f98:	425b      	negs	r3, r3
   11f9a:	61a3      	str	r3, [r4, #24]
   11f9c:	2000      	movs	r0, #0
   11f9e:	6923      	ldr	r3, [r4, #16]
   11fa0:	4283      	cmp	r3, r0
   11fa2:	d1be      	bne.n	11f22 <__swsetup_r+0x3e>
   11fa4:	230c      	movs	r3, #12
   11fa6:	5ee2      	ldrsh	r2, [r4, r3]
   11fa8:	0613      	lsls	r3, r2, #24
   11faa:	d5ba      	bpl.n	11f22 <__swsetup_r+0x3e>
   11fac:	2340      	movs	r3, #64	; 0x40
   11fae:	4313      	orrs	r3, r2
   11fb0:	81a3      	strh	r3, [r4, #12]
   11fb2:	3801      	subs	r0, #1
   11fb4:	e7b5      	b.n	11f22 <__swsetup_r+0x3e>
   11fb6:	0792      	lsls	r2, r2, #30
   11fb8:	d400      	bmi.n	11fbc <__swsetup_r+0xd8>
   11fba:	6963      	ldr	r3, [r4, #20]
   11fbc:	60a3      	str	r3, [r4, #8]
   11fbe:	e7ed      	b.n	11f9c <__swsetup_r+0xb8>
   11fc0:	20000020 	.word	0x20000020
   11fc4:	000148a0 	.word	0x000148a0
   11fc8:	000148c0 	.word	0x000148c0
   11fcc:	00014880 	.word	0x00014880

00011fd0 <__sflush_r>:
   11fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11fd2:	898a      	ldrh	r2, [r1, #12]
   11fd4:	0005      	movs	r5, r0
   11fd6:	000c      	movs	r4, r1
   11fd8:	0713      	lsls	r3, r2, #28
   11fda:	d460      	bmi.n	1209e <__sflush_r+0xce>
   11fdc:	684b      	ldr	r3, [r1, #4]
   11fde:	2b00      	cmp	r3, #0
   11fe0:	dc04      	bgt.n	11fec <__sflush_r+0x1c>
   11fe2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   11fe4:	2b00      	cmp	r3, #0
   11fe6:	dc01      	bgt.n	11fec <__sflush_r+0x1c>
   11fe8:	2000      	movs	r0, #0
   11fea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11fec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   11fee:	2f00      	cmp	r7, #0
   11ff0:	d0fa      	beq.n	11fe8 <__sflush_r+0x18>
   11ff2:	2300      	movs	r3, #0
   11ff4:	682e      	ldr	r6, [r5, #0]
   11ff6:	602b      	str	r3, [r5, #0]
   11ff8:	2380      	movs	r3, #128	; 0x80
   11ffa:	015b      	lsls	r3, r3, #5
   11ffc:	401a      	ands	r2, r3
   11ffe:	d034      	beq.n	1206a <__sflush_r+0x9a>
   12000:	6d60      	ldr	r0, [r4, #84]	; 0x54
   12002:	89a3      	ldrh	r3, [r4, #12]
   12004:	075b      	lsls	r3, r3, #29
   12006:	d506      	bpl.n	12016 <__sflush_r+0x46>
   12008:	6863      	ldr	r3, [r4, #4]
   1200a:	1ac0      	subs	r0, r0, r3
   1200c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1200e:	2b00      	cmp	r3, #0
   12010:	d001      	beq.n	12016 <__sflush_r+0x46>
   12012:	6c23      	ldr	r3, [r4, #64]	; 0x40
   12014:	1ac0      	subs	r0, r0, r3
   12016:	0002      	movs	r2, r0
   12018:	6a21      	ldr	r1, [r4, #32]
   1201a:	2300      	movs	r3, #0
   1201c:	0028      	movs	r0, r5
   1201e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   12020:	47b8      	blx	r7
   12022:	89a1      	ldrh	r1, [r4, #12]
   12024:	1c43      	adds	r3, r0, #1
   12026:	d106      	bne.n	12036 <__sflush_r+0x66>
   12028:	682b      	ldr	r3, [r5, #0]
   1202a:	2b1d      	cmp	r3, #29
   1202c:	d831      	bhi.n	12092 <__sflush_r+0xc2>
   1202e:	4a2c      	ldr	r2, [pc, #176]	; (120e0 <__sflush_r+0x110>)
   12030:	40da      	lsrs	r2, r3
   12032:	07d3      	lsls	r3, r2, #31
   12034:	d52d      	bpl.n	12092 <__sflush_r+0xc2>
   12036:	2300      	movs	r3, #0
   12038:	6063      	str	r3, [r4, #4]
   1203a:	6923      	ldr	r3, [r4, #16]
   1203c:	6023      	str	r3, [r4, #0]
   1203e:	04cb      	lsls	r3, r1, #19
   12040:	d505      	bpl.n	1204e <__sflush_r+0x7e>
   12042:	1c43      	adds	r3, r0, #1
   12044:	d102      	bne.n	1204c <__sflush_r+0x7c>
   12046:	682b      	ldr	r3, [r5, #0]
   12048:	2b00      	cmp	r3, #0
   1204a:	d100      	bne.n	1204e <__sflush_r+0x7e>
   1204c:	6560      	str	r0, [r4, #84]	; 0x54
   1204e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   12050:	602e      	str	r6, [r5, #0]
   12052:	2900      	cmp	r1, #0
   12054:	d0c8      	beq.n	11fe8 <__sflush_r+0x18>
   12056:	0023      	movs	r3, r4
   12058:	3344      	adds	r3, #68	; 0x44
   1205a:	4299      	cmp	r1, r3
   1205c:	d002      	beq.n	12064 <__sflush_r+0x94>
   1205e:	0028      	movs	r0, r5
   12060:	f7ff fbc6 	bl	117f0 <_free_r>
   12064:	2000      	movs	r0, #0
   12066:	6360      	str	r0, [r4, #52]	; 0x34
   12068:	e7bf      	b.n	11fea <__sflush_r+0x1a>
   1206a:	2301      	movs	r3, #1
   1206c:	6a21      	ldr	r1, [r4, #32]
   1206e:	0028      	movs	r0, r5
   12070:	47b8      	blx	r7
   12072:	1c43      	adds	r3, r0, #1
   12074:	d1c5      	bne.n	12002 <__sflush_r+0x32>
   12076:	682b      	ldr	r3, [r5, #0]
   12078:	2b00      	cmp	r3, #0
   1207a:	d0c2      	beq.n	12002 <__sflush_r+0x32>
   1207c:	2b1d      	cmp	r3, #29
   1207e:	d001      	beq.n	12084 <__sflush_r+0xb4>
   12080:	2b16      	cmp	r3, #22
   12082:	d101      	bne.n	12088 <__sflush_r+0xb8>
   12084:	602e      	str	r6, [r5, #0]
   12086:	e7af      	b.n	11fe8 <__sflush_r+0x18>
   12088:	2340      	movs	r3, #64	; 0x40
   1208a:	89a2      	ldrh	r2, [r4, #12]
   1208c:	4313      	orrs	r3, r2
   1208e:	81a3      	strh	r3, [r4, #12]
   12090:	e7ab      	b.n	11fea <__sflush_r+0x1a>
   12092:	2340      	movs	r3, #64	; 0x40
   12094:	430b      	orrs	r3, r1
   12096:	2001      	movs	r0, #1
   12098:	81a3      	strh	r3, [r4, #12]
   1209a:	4240      	negs	r0, r0
   1209c:	e7a5      	b.n	11fea <__sflush_r+0x1a>
   1209e:	690f      	ldr	r7, [r1, #16]
   120a0:	2f00      	cmp	r7, #0
   120a2:	d0a1      	beq.n	11fe8 <__sflush_r+0x18>
   120a4:	680b      	ldr	r3, [r1, #0]
   120a6:	600f      	str	r7, [r1, #0]
   120a8:	1bdb      	subs	r3, r3, r7
   120aa:	9301      	str	r3, [sp, #4]
   120ac:	2300      	movs	r3, #0
   120ae:	0792      	lsls	r2, r2, #30
   120b0:	d100      	bne.n	120b4 <__sflush_r+0xe4>
   120b2:	694b      	ldr	r3, [r1, #20]
   120b4:	60a3      	str	r3, [r4, #8]
   120b6:	9b01      	ldr	r3, [sp, #4]
   120b8:	2b00      	cmp	r3, #0
   120ba:	dc00      	bgt.n	120be <__sflush_r+0xee>
   120bc:	e794      	b.n	11fe8 <__sflush_r+0x18>
   120be:	9b01      	ldr	r3, [sp, #4]
   120c0:	003a      	movs	r2, r7
   120c2:	6a21      	ldr	r1, [r4, #32]
   120c4:	0028      	movs	r0, r5
   120c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   120c8:	47b0      	blx	r6
   120ca:	2800      	cmp	r0, #0
   120cc:	dc03      	bgt.n	120d6 <__sflush_r+0x106>
   120ce:	2340      	movs	r3, #64	; 0x40
   120d0:	89a2      	ldrh	r2, [r4, #12]
   120d2:	4313      	orrs	r3, r2
   120d4:	e7df      	b.n	12096 <__sflush_r+0xc6>
   120d6:	9b01      	ldr	r3, [sp, #4]
   120d8:	183f      	adds	r7, r7, r0
   120da:	1a1b      	subs	r3, r3, r0
   120dc:	9301      	str	r3, [sp, #4]
   120de:	e7ea      	b.n	120b6 <__sflush_r+0xe6>
   120e0:	20400001 	.word	0x20400001

000120e4 <_fflush_r>:
   120e4:	690b      	ldr	r3, [r1, #16]
   120e6:	b570      	push	{r4, r5, r6, lr}
   120e8:	0005      	movs	r5, r0
   120ea:	000c      	movs	r4, r1
   120ec:	2b00      	cmp	r3, #0
   120ee:	d101      	bne.n	120f4 <_fflush_r+0x10>
   120f0:	2000      	movs	r0, #0
   120f2:	bd70      	pop	{r4, r5, r6, pc}
   120f4:	2800      	cmp	r0, #0
   120f6:	d004      	beq.n	12102 <_fflush_r+0x1e>
   120f8:	6983      	ldr	r3, [r0, #24]
   120fa:	2b00      	cmp	r3, #0
   120fc:	d101      	bne.n	12102 <_fflush_r+0x1e>
   120fe:	f000 f85f 	bl	121c0 <__sinit>
   12102:	4b0b      	ldr	r3, [pc, #44]	; (12130 <_fflush_r+0x4c>)
   12104:	429c      	cmp	r4, r3
   12106:	d109      	bne.n	1211c <_fflush_r+0x38>
   12108:	686c      	ldr	r4, [r5, #4]
   1210a:	220c      	movs	r2, #12
   1210c:	5ea3      	ldrsh	r3, [r4, r2]
   1210e:	2b00      	cmp	r3, #0
   12110:	d0ee      	beq.n	120f0 <_fflush_r+0xc>
   12112:	0021      	movs	r1, r4
   12114:	0028      	movs	r0, r5
   12116:	f7ff ff5b 	bl	11fd0 <__sflush_r>
   1211a:	e7ea      	b.n	120f2 <_fflush_r+0xe>
   1211c:	4b05      	ldr	r3, [pc, #20]	; (12134 <_fflush_r+0x50>)
   1211e:	429c      	cmp	r4, r3
   12120:	d101      	bne.n	12126 <_fflush_r+0x42>
   12122:	68ac      	ldr	r4, [r5, #8]
   12124:	e7f1      	b.n	1210a <_fflush_r+0x26>
   12126:	4b04      	ldr	r3, [pc, #16]	; (12138 <_fflush_r+0x54>)
   12128:	429c      	cmp	r4, r3
   1212a:	d1ee      	bne.n	1210a <_fflush_r+0x26>
   1212c:	68ec      	ldr	r4, [r5, #12]
   1212e:	e7ec      	b.n	1210a <_fflush_r+0x26>
   12130:	000148a0 	.word	0x000148a0
   12134:	000148c0 	.word	0x000148c0
   12138:	00014880 	.word	0x00014880

0001213c <_cleanup_r>:
   1213c:	b510      	push	{r4, lr}
   1213e:	4902      	ldr	r1, [pc, #8]	; (12148 <_cleanup_r+0xc>)
   12140:	f000 f8b2 	bl	122a8 <_fwalk_reent>
   12144:	bd10      	pop	{r4, pc}
   12146:	46c0      	nop			; (mov r8, r8)
   12148:	000120e5 	.word	0x000120e5

0001214c <std.isra.0>:
   1214c:	2300      	movs	r3, #0
   1214e:	b510      	push	{r4, lr}
   12150:	0004      	movs	r4, r0
   12152:	6003      	str	r3, [r0, #0]
   12154:	6043      	str	r3, [r0, #4]
   12156:	6083      	str	r3, [r0, #8]
   12158:	8181      	strh	r1, [r0, #12]
   1215a:	6643      	str	r3, [r0, #100]	; 0x64
   1215c:	81c2      	strh	r2, [r0, #14]
   1215e:	6103      	str	r3, [r0, #16]
   12160:	6143      	str	r3, [r0, #20]
   12162:	6183      	str	r3, [r0, #24]
   12164:	0019      	movs	r1, r3
   12166:	2208      	movs	r2, #8
   12168:	305c      	adds	r0, #92	; 0x5c
   1216a:	f7ff fb38 	bl	117de <memset>
   1216e:	4b05      	ldr	r3, [pc, #20]	; (12184 <std.isra.0+0x38>)
   12170:	6224      	str	r4, [r4, #32]
   12172:	6263      	str	r3, [r4, #36]	; 0x24
   12174:	4b04      	ldr	r3, [pc, #16]	; (12188 <std.isra.0+0x3c>)
   12176:	62a3      	str	r3, [r4, #40]	; 0x28
   12178:	4b04      	ldr	r3, [pc, #16]	; (1218c <std.isra.0+0x40>)
   1217a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1217c:	4b04      	ldr	r3, [pc, #16]	; (12190 <std.isra.0+0x44>)
   1217e:	6323      	str	r3, [r4, #48]	; 0x30
   12180:	bd10      	pop	{r4, pc}
   12182:	46c0      	nop			; (mov r8, r8)
   12184:	00012cb5 	.word	0x00012cb5
   12188:	00012cdd 	.word	0x00012cdd
   1218c:	00012d15 	.word	0x00012d15
   12190:	00012d41 	.word	0x00012d41

00012194 <__sfmoreglue>:
   12194:	b570      	push	{r4, r5, r6, lr}
   12196:	2568      	movs	r5, #104	; 0x68
   12198:	1e4a      	subs	r2, r1, #1
   1219a:	4355      	muls	r5, r2
   1219c:	000e      	movs	r6, r1
   1219e:	0029      	movs	r1, r5
   121a0:	3174      	adds	r1, #116	; 0x74
   121a2:	f7ff fb6f 	bl	11884 <_malloc_r>
   121a6:	1e04      	subs	r4, r0, #0
   121a8:	d008      	beq.n	121bc <__sfmoreglue+0x28>
   121aa:	2100      	movs	r1, #0
   121ac:	002a      	movs	r2, r5
   121ae:	6001      	str	r1, [r0, #0]
   121b0:	6046      	str	r6, [r0, #4]
   121b2:	300c      	adds	r0, #12
   121b4:	60a0      	str	r0, [r4, #8]
   121b6:	3268      	adds	r2, #104	; 0x68
   121b8:	f7ff fb11 	bl	117de <memset>
   121bc:	0020      	movs	r0, r4
   121be:	bd70      	pop	{r4, r5, r6, pc}

000121c0 <__sinit>:
   121c0:	6983      	ldr	r3, [r0, #24]
   121c2:	b513      	push	{r0, r1, r4, lr}
   121c4:	0004      	movs	r4, r0
   121c6:	2b00      	cmp	r3, #0
   121c8:	d128      	bne.n	1221c <__sinit+0x5c>
   121ca:	6483      	str	r3, [r0, #72]	; 0x48
   121cc:	64c3      	str	r3, [r0, #76]	; 0x4c
   121ce:	6503      	str	r3, [r0, #80]	; 0x50
   121d0:	4b13      	ldr	r3, [pc, #76]	; (12220 <__sinit+0x60>)
   121d2:	4a14      	ldr	r2, [pc, #80]	; (12224 <__sinit+0x64>)
   121d4:	681b      	ldr	r3, [r3, #0]
   121d6:	6282      	str	r2, [r0, #40]	; 0x28
   121d8:	9301      	str	r3, [sp, #4]
   121da:	4298      	cmp	r0, r3
   121dc:	d101      	bne.n	121e2 <__sinit+0x22>
   121de:	2301      	movs	r3, #1
   121e0:	6183      	str	r3, [r0, #24]
   121e2:	0020      	movs	r0, r4
   121e4:	f000 f820 	bl	12228 <__sfp>
   121e8:	6060      	str	r0, [r4, #4]
   121ea:	0020      	movs	r0, r4
   121ec:	f000 f81c 	bl	12228 <__sfp>
   121f0:	60a0      	str	r0, [r4, #8]
   121f2:	0020      	movs	r0, r4
   121f4:	f000 f818 	bl	12228 <__sfp>
   121f8:	2200      	movs	r2, #0
   121fa:	60e0      	str	r0, [r4, #12]
   121fc:	2104      	movs	r1, #4
   121fe:	6860      	ldr	r0, [r4, #4]
   12200:	f7ff ffa4 	bl	1214c <std.isra.0>
   12204:	2201      	movs	r2, #1
   12206:	2109      	movs	r1, #9
   12208:	68a0      	ldr	r0, [r4, #8]
   1220a:	f7ff ff9f 	bl	1214c <std.isra.0>
   1220e:	2202      	movs	r2, #2
   12210:	2112      	movs	r1, #18
   12212:	68e0      	ldr	r0, [r4, #12]
   12214:	f7ff ff9a 	bl	1214c <std.isra.0>
   12218:	2301      	movs	r3, #1
   1221a:	61a3      	str	r3, [r4, #24]
   1221c:	bd13      	pop	{r0, r1, r4, pc}
   1221e:	46c0      	nop			; (mov r8, r8)
   12220:	0001487c 	.word	0x0001487c
   12224:	0001213d 	.word	0x0001213d

00012228 <__sfp>:
   12228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1222a:	4b1e      	ldr	r3, [pc, #120]	; (122a4 <__sfp+0x7c>)
   1222c:	0007      	movs	r7, r0
   1222e:	681e      	ldr	r6, [r3, #0]
   12230:	69b3      	ldr	r3, [r6, #24]
   12232:	2b00      	cmp	r3, #0
   12234:	d102      	bne.n	1223c <__sfp+0x14>
   12236:	0030      	movs	r0, r6
   12238:	f7ff ffc2 	bl	121c0 <__sinit>
   1223c:	3648      	adds	r6, #72	; 0x48
   1223e:	68b4      	ldr	r4, [r6, #8]
   12240:	6873      	ldr	r3, [r6, #4]
   12242:	3b01      	subs	r3, #1
   12244:	d504      	bpl.n	12250 <__sfp+0x28>
   12246:	6833      	ldr	r3, [r6, #0]
   12248:	2b00      	cmp	r3, #0
   1224a:	d007      	beq.n	1225c <__sfp+0x34>
   1224c:	6836      	ldr	r6, [r6, #0]
   1224e:	e7f6      	b.n	1223e <__sfp+0x16>
   12250:	220c      	movs	r2, #12
   12252:	5ea5      	ldrsh	r5, [r4, r2]
   12254:	2d00      	cmp	r5, #0
   12256:	d00d      	beq.n	12274 <__sfp+0x4c>
   12258:	3468      	adds	r4, #104	; 0x68
   1225a:	e7f2      	b.n	12242 <__sfp+0x1a>
   1225c:	2104      	movs	r1, #4
   1225e:	0038      	movs	r0, r7
   12260:	f7ff ff98 	bl	12194 <__sfmoreglue>
   12264:	6030      	str	r0, [r6, #0]
   12266:	2800      	cmp	r0, #0
   12268:	d1f0      	bne.n	1224c <__sfp+0x24>
   1226a:	230c      	movs	r3, #12
   1226c:	0004      	movs	r4, r0
   1226e:	603b      	str	r3, [r7, #0]
   12270:	0020      	movs	r0, r4
   12272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12274:	2301      	movs	r3, #1
   12276:	0020      	movs	r0, r4
   12278:	425b      	negs	r3, r3
   1227a:	81e3      	strh	r3, [r4, #14]
   1227c:	3302      	adds	r3, #2
   1227e:	81a3      	strh	r3, [r4, #12]
   12280:	6665      	str	r5, [r4, #100]	; 0x64
   12282:	6025      	str	r5, [r4, #0]
   12284:	60a5      	str	r5, [r4, #8]
   12286:	6065      	str	r5, [r4, #4]
   12288:	6125      	str	r5, [r4, #16]
   1228a:	6165      	str	r5, [r4, #20]
   1228c:	61a5      	str	r5, [r4, #24]
   1228e:	2208      	movs	r2, #8
   12290:	0029      	movs	r1, r5
   12292:	305c      	adds	r0, #92	; 0x5c
   12294:	f7ff faa3 	bl	117de <memset>
   12298:	6365      	str	r5, [r4, #52]	; 0x34
   1229a:	63a5      	str	r5, [r4, #56]	; 0x38
   1229c:	64a5      	str	r5, [r4, #72]	; 0x48
   1229e:	64e5      	str	r5, [r4, #76]	; 0x4c
   122a0:	e7e6      	b.n	12270 <__sfp+0x48>
   122a2:	46c0      	nop			; (mov r8, r8)
   122a4:	0001487c 	.word	0x0001487c

000122a8 <_fwalk_reent>:
   122a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   122aa:	0004      	movs	r4, r0
   122ac:	0007      	movs	r7, r0
   122ae:	2600      	movs	r6, #0
   122b0:	9101      	str	r1, [sp, #4]
   122b2:	3448      	adds	r4, #72	; 0x48
   122b4:	2c00      	cmp	r4, #0
   122b6:	d101      	bne.n	122bc <_fwalk_reent+0x14>
   122b8:	0030      	movs	r0, r6
   122ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   122bc:	6863      	ldr	r3, [r4, #4]
   122be:	68a5      	ldr	r5, [r4, #8]
   122c0:	9300      	str	r3, [sp, #0]
   122c2:	9b00      	ldr	r3, [sp, #0]
   122c4:	3b01      	subs	r3, #1
   122c6:	9300      	str	r3, [sp, #0]
   122c8:	d501      	bpl.n	122ce <_fwalk_reent+0x26>
   122ca:	6824      	ldr	r4, [r4, #0]
   122cc:	e7f2      	b.n	122b4 <_fwalk_reent+0xc>
   122ce:	89ab      	ldrh	r3, [r5, #12]
   122d0:	2b01      	cmp	r3, #1
   122d2:	d908      	bls.n	122e6 <_fwalk_reent+0x3e>
   122d4:	220e      	movs	r2, #14
   122d6:	5eab      	ldrsh	r3, [r5, r2]
   122d8:	3301      	adds	r3, #1
   122da:	d004      	beq.n	122e6 <_fwalk_reent+0x3e>
   122dc:	0029      	movs	r1, r5
   122de:	0038      	movs	r0, r7
   122e0:	9b01      	ldr	r3, [sp, #4]
   122e2:	4798      	blx	r3
   122e4:	4306      	orrs	r6, r0
   122e6:	3568      	adds	r5, #104	; 0x68
   122e8:	e7eb      	b.n	122c2 <_fwalk_reent+0x1a>

000122ea <__locale_ctype_ptr_l>:
   122ea:	30ec      	adds	r0, #236	; 0xec
   122ec:	6800      	ldr	r0, [r0, #0]
   122ee:	4770      	bx	lr

000122f0 <__swhatbuf_r>:
   122f0:	b570      	push	{r4, r5, r6, lr}
   122f2:	000e      	movs	r6, r1
   122f4:	001d      	movs	r5, r3
   122f6:	230e      	movs	r3, #14
   122f8:	5ec9      	ldrsh	r1, [r1, r3]
   122fa:	b090      	sub	sp, #64	; 0x40
   122fc:	0014      	movs	r4, r2
   122fe:	2900      	cmp	r1, #0
   12300:	da07      	bge.n	12312 <__swhatbuf_r+0x22>
   12302:	2300      	movs	r3, #0
   12304:	602b      	str	r3, [r5, #0]
   12306:	89b3      	ldrh	r3, [r6, #12]
   12308:	061b      	lsls	r3, r3, #24
   1230a:	d411      	bmi.n	12330 <__swhatbuf_r+0x40>
   1230c:	2380      	movs	r3, #128	; 0x80
   1230e:	00db      	lsls	r3, r3, #3
   12310:	e00f      	b.n	12332 <__swhatbuf_r+0x42>
   12312:	aa01      	add	r2, sp, #4
   12314:	f000 fd4c 	bl	12db0 <_fstat_r>
   12318:	2800      	cmp	r0, #0
   1231a:	dbf2      	blt.n	12302 <__swhatbuf_r+0x12>
   1231c:	22f0      	movs	r2, #240	; 0xf0
   1231e:	9b02      	ldr	r3, [sp, #8]
   12320:	0212      	lsls	r2, r2, #8
   12322:	4013      	ands	r3, r2
   12324:	4a05      	ldr	r2, [pc, #20]	; (1233c <__swhatbuf_r+0x4c>)
   12326:	189b      	adds	r3, r3, r2
   12328:	425a      	negs	r2, r3
   1232a:	4153      	adcs	r3, r2
   1232c:	602b      	str	r3, [r5, #0]
   1232e:	e7ed      	b.n	1230c <__swhatbuf_r+0x1c>
   12330:	2340      	movs	r3, #64	; 0x40
   12332:	2000      	movs	r0, #0
   12334:	6023      	str	r3, [r4, #0]
   12336:	b010      	add	sp, #64	; 0x40
   12338:	bd70      	pop	{r4, r5, r6, pc}
   1233a:	46c0      	nop			; (mov r8, r8)
   1233c:	ffffe000 	.word	0xffffe000

00012340 <__smakebuf_r>:
   12340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12342:	2602      	movs	r6, #2
   12344:	898b      	ldrh	r3, [r1, #12]
   12346:	0005      	movs	r5, r0
   12348:	000c      	movs	r4, r1
   1234a:	4233      	tst	r3, r6
   1234c:	d006      	beq.n	1235c <__smakebuf_r+0x1c>
   1234e:	0023      	movs	r3, r4
   12350:	3347      	adds	r3, #71	; 0x47
   12352:	6023      	str	r3, [r4, #0]
   12354:	6123      	str	r3, [r4, #16]
   12356:	2301      	movs	r3, #1
   12358:	6163      	str	r3, [r4, #20]
   1235a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1235c:	ab01      	add	r3, sp, #4
   1235e:	466a      	mov	r2, sp
   12360:	f7ff ffc6 	bl	122f0 <__swhatbuf_r>
   12364:	9900      	ldr	r1, [sp, #0]
   12366:	0007      	movs	r7, r0
   12368:	0028      	movs	r0, r5
   1236a:	f7ff fa8b 	bl	11884 <_malloc_r>
   1236e:	2800      	cmp	r0, #0
   12370:	d106      	bne.n	12380 <__smakebuf_r+0x40>
   12372:	220c      	movs	r2, #12
   12374:	5ea3      	ldrsh	r3, [r4, r2]
   12376:	059a      	lsls	r2, r3, #22
   12378:	d4ef      	bmi.n	1235a <__smakebuf_r+0x1a>
   1237a:	431e      	orrs	r6, r3
   1237c:	81a6      	strh	r6, [r4, #12]
   1237e:	e7e6      	b.n	1234e <__smakebuf_r+0xe>
   12380:	4b0d      	ldr	r3, [pc, #52]	; (123b8 <__smakebuf_r+0x78>)
   12382:	62ab      	str	r3, [r5, #40]	; 0x28
   12384:	2380      	movs	r3, #128	; 0x80
   12386:	89a2      	ldrh	r2, [r4, #12]
   12388:	6020      	str	r0, [r4, #0]
   1238a:	4313      	orrs	r3, r2
   1238c:	81a3      	strh	r3, [r4, #12]
   1238e:	9b00      	ldr	r3, [sp, #0]
   12390:	6120      	str	r0, [r4, #16]
   12392:	6163      	str	r3, [r4, #20]
   12394:	9b01      	ldr	r3, [sp, #4]
   12396:	2b00      	cmp	r3, #0
   12398:	d00a      	beq.n	123b0 <__smakebuf_r+0x70>
   1239a:	230e      	movs	r3, #14
   1239c:	5ee1      	ldrsh	r1, [r4, r3]
   1239e:	0028      	movs	r0, r5
   123a0:	f000 fd18 	bl	12dd4 <_isatty_r>
   123a4:	2800      	cmp	r0, #0
   123a6:	d003      	beq.n	123b0 <__smakebuf_r+0x70>
   123a8:	2301      	movs	r3, #1
   123aa:	89a2      	ldrh	r2, [r4, #12]
   123ac:	4313      	orrs	r3, r2
   123ae:	81a3      	strh	r3, [r4, #12]
   123b0:	89a0      	ldrh	r0, [r4, #12]
   123b2:	4338      	orrs	r0, r7
   123b4:	81a0      	strh	r0, [r4, #12]
   123b6:	e7d0      	b.n	1235a <__smakebuf_r+0x1a>
   123b8:	0001213d 	.word	0x0001213d

000123bc <__ascii_mbtowc>:
   123bc:	b082      	sub	sp, #8
   123be:	2900      	cmp	r1, #0
   123c0:	d100      	bne.n	123c4 <__ascii_mbtowc+0x8>
   123c2:	a901      	add	r1, sp, #4
   123c4:	1e10      	subs	r0, r2, #0
   123c6:	d006      	beq.n	123d6 <__ascii_mbtowc+0x1a>
   123c8:	2b00      	cmp	r3, #0
   123ca:	d006      	beq.n	123da <__ascii_mbtowc+0x1e>
   123cc:	7813      	ldrb	r3, [r2, #0]
   123ce:	600b      	str	r3, [r1, #0]
   123d0:	7810      	ldrb	r0, [r2, #0]
   123d2:	1e43      	subs	r3, r0, #1
   123d4:	4198      	sbcs	r0, r3
   123d6:	b002      	add	sp, #8
   123d8:	4770      	bx	lr
   123da:	2002      	movs	r0, #2
   123dc:	4240      	negs	r0, r0
   123de:	e7fa      	b.n	123d6 <__ascii_mbtowc+0x1a>

000123e0 <__malloc_lock>:
   123e0:	4770      	bx	lr

000123e2 <__malloc_unlock>:
   123e2:	4770      	bx	lr

000123e4 <__ssputs_r>:
   123e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   123e6:	688e      	ldr	r6, [r1, #8]
   123e8:	b085      	sub	sp, #20
   123ea:	0007      	movs	r7, r0
   123ec:	000c      	movs	r4, r1
   123ee:	9203      	str	r2, [sp, #12]
   123f0:	9301      	str	r3, [sp, #4]
   123f2:	429e      	cmp	r6, r3
   123f4:	d839      	bhi.n	1246a <__ssputs_r+0x86>
   123f6:	2390      	movs	r3, #144	; 0x90
   123f8:	898a      	ldrh	r2, [r1, #12]
   123fa:	00db      	lsls	r3, r3, #3
   123fc:	421a      	tst	r2, r3
   123fe:	d034      	beq.n	1246a <__ssputs_r+0x86>
   12400:	2503      	movs	r5, #3
   12402:	6909      	ldr	r1, [r1, #16]
   12404:	6823      	ldr	r3, [r4, #0]
   12406:	1a5b      	subs	r3, r3, r1
   12408:	9302      	str	r3, [sp, #8]
   1240a:	6963      	ldr	r3, [r4, #20]
   1240c:	9802      	ldr	r0, [sp, #8]
   1240e:	435d      	muls	r5, r3
   12410:	0feb      	lsrs	r3, r5, #31
   12412:	195d      	adds	r5, r3, r5
   12414:	9b01      	ldr	r3, [sp, #4]
   12416:	106d      	asrs	r5, r5, #1
   12418:	3301      	adds	r3, #1
   1241a:	181b      	adds	r3, r3, r0
   1241c:	42ab      	cmp	r3, r5
   1241e:	d900      	bls.n	12422 <__ssputs_r+0x3e>
   12420:	001d      	movs	r5, r3
   12422:	0553      	lsls	r3, r2, #21
   12424:	d532      	bpl.n	1248c <__ssputs_r+0xa8>
   12426:	0029      	movs	r1, r5
   12428:	0038      	movs	r0, r7
   1242a:	f7ff fa2b 	bl	11884 <_malloc_r>
   1242e:	1e06      	subs	r6, r0, #0
   12430:	d109      	bne.n	12446 <__ssputs_r+0x62>
   12432:	230c      	movs	r3, #12
   12434:	603b      	str	r3, [r7, #0]
   12436:	2340      	movs	r3, #64	; 0x40
   12438:	2001      	movs	r0, #1
   1243a:	89a2      	ldrh	r2, [r4, #12]
   1243c:	4240      	negs	r0, r0
   1243e:	4313      	orrs	r3, r2
   12440:	81a3      	strh	r3, [r4, #12]
   12442:	b005      	add	sp, #20
   12444:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12446:	9a02      	ldr	r2, [sp, #8]
   12448:	6921      	ldr	r1, [r4, #16]
   1244a:	f7ff f9ad 	bl	117a8 <memcpy>
   1244e:	89a3      	ldrh	r3, [r4, #12]
   12450:	4a14      	ldr	r2, [pc, #80]	; (124a4 <__ssputs_r+0xc0>)
   12452:	401a      	ands	r2, r3
   12454:	2380      	movs	r3, #128	; 0x80
   12456:	4313      	orrs	r3, r2
   12458:	81a3      	strh	r3, [r4, #12]
   1245a:	9b02      	ldr	r3, [sp, #8]
   1245c:	6126      	str	r6, [r4, #16]
   1245e:	18f6      	adds	r6, r6, r3
   12460:	6026      	str	r6, [r4, #0]
   12462:	6165      	str	r5, [r4, #20]
   12464:	9e01      	ldr	r6, [sp, #4]
   12466:	1aed      	subs	r5, r5, r3
   12468:	60a5      	str	r5, [r4, #8]
   1246a:	9b01      	ldr	r3, [sp, #4]
   1246c:	42b3      	cmp	r3, r6
   1246e:	d200      	bcs.n	12472 <__ssputs_r+0x8e>
   12470:	001e      	movs	r6, r3
   12472:	0032      	movs	r2, r6
   12474:	9903      	ldr	r1, [sp, #12]
   12476:	6820      	ldr	r0, [r4, #0]
   12478:	f7ff f99f 	bl	117ba <memmove>
   1247c:	68a3      	ldr	r3, [r4, #8]
   1247e:	2000      	movs	r0, #0
   12480:	1b9b      	subs	r3, r3, r6
   12482:	60a3      	str	r3, [r4, #8]
   12484:	6823      	ldr	r3, [r4, #0]
   12486:	199e      	adds	r6, r3, r6
   12488:	6026      	str	r6, [r4, #0]
   1248a:	e7da      	b.n	12442 <__ssputs_r+0x5e>
   1248c:	002a      	movs	r2, r5
   1248e:	0038      	movs	r0, r7
   12490:	f000 fcd1 	bl	12e36 <_realloc_r>
   12494:	1e06      	subs	r6, r0, #0
   12496:	d1e0      	bne.n	1245a <__ssputs_r+0x76>
   12498:	6921      	ldr	r1, [r4, #16]
   1249a:	0038      	movs	r0, r7
   1249c:	f7ff f9a8 	bl	117f0 <_free_r>
   124a0:	e7c7      	b.n	12432 <__ssputs_r+0x4e>
   124a2:	46c0      	nop			; (mov r8, r8)
   124a4:	fffffb7f 	.word	0xfffffb7f

000124a8 <_svfiprintf_r>:
   124a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   124aa:	b09f      	sub	sp, #124	; 0x7c
   124ac:	9002      	str	r0, [sp, #8]
   124ae:	9305      	str	r3, [sp, #20]
   124b0:	898b      	ldrh	r3, [r1, #12]
   124b2:	000f      	movs	r7, r1
   124b4:	0016      	movs	r6, r2
   124b6:	061b      	lsls	r3, r3, #24
   124b8:	d511      	bpl.n	124de <_svfiprintf_r+0x36>
   124ba:	690b      	ldr	r3, [r1, #16]
   124bc:	2b00      	cmp	r3, #0
   124be:	d10e      	bne.n	124de <_svfiprintf_r+0x36>
   124c0:	2140      	movs	r1, #64	; 0x40
   124c2:	f7ff f9df 	bl	11884 <_malloc_r>
   124c6:	6038      	str	r0, [r7, #0]
   124c8:	6138      	str	r0, [r7, #16]
   124ca:	2800      	cmp	r0, #0
   124cc:	d105      	bne.n	124da <_svfiprintf_r+0x32>
   124ce:	230c      	movs	r3, #12
   124d0:	9a02      	ldr	r2, [sp, #8]
   124d2:	3801      	subs	r0, #1
   124d4:	6013      	str	r3, [r2, #0]
   124d6:	b01f      	add	sp, #124	; 0x7c
   124d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   124da:	2340      	movs	r3, #64	; 0x40
   124dc:	617b      	str	r3, [r7, #20]
   124de:	2300      	movs	r3, #0
   124e0:	ad06      	add	r5, sp, #24
   124e2:	616b      	str	r3, [r5, #20]
   124e4:	3320      	adds	r3, #32
   124e6:	766b      	strb	r3, [r5, #25]
   124e8:	3310      	adds	r3, #16
   124ea:	76ab      	strb	r3, [r5, #26]
   124ec:	0034      	movs	r4, r6
   124ee:	7823      	ldrb	r3, [r4, #0]
   124f0:	2b00      	cmp	r3, #0
   124f2:	d147      	bne.n	12584 <_svfiprintf_r+0xdc>
   124f4:	1ba3      	subs	r3, r4, r6
   124f6:	9304      	str	r3, [sp, #16]
   124f8:	d00d      	beq.n	12516 <_svfiprintf_r+0x6e>
   124fa:	1ba3      	subs	r3, r4, r6
   124fc:	0032      	movs	r2, r6
   124fe:	0039      	movs	r1, r7
   12500:	9802      	ldr	r0, [sp, #8]
   12502:	f7ff ff6f 	bl	123e4 <__ssputs_r>
   12506:	1c43      	adds	r3, r0, #1
   12508:	d100      	bne.n	1250c <_svfiprintf_r+0x64>
   1250a:	e0b5      	b.n	12678 <_svfiprintf_r+0x1d0>
   1250c:	696a      	ldr	r2, [r5, #20]
   1250e:	9b04      	ldr	r3, [sp, #16]
   12510:	4694      	mov	ip, r2
   12512:	4463      	add	r3, ip
   12514:	616b      	str	r3, [r5, #20]
   12516:	7823      	ldrb	r3, [r4, #0]
   12518:	2b00      	cmp	r3, #0
   1251a:	d100      	bne.n	1251e <_svfiprintf_r+0x76>
   1251c:	e0ac      	b.n	12678 <_svfiprintf_r+0x1d0>
   1251e:	2201      	movs	r2, #1
   12520:	2300      	movs	r3, #0
   12522:	4252      	negs	r2, r2
   12524:	606a      	str	r2, [r5, #4]
   12526:	a902      	add	r1, sp, #8
   12528:	3254      	adds	r2, #84	; 0x54
   1252a:	1852      	adds	r2, r2, r1
   1252c:	3401      	adds	r4, #1
   1252e:	602b      	str	r3, [r5, #0]
   12530:	60eb      	str	r3, [r5, #12]
   12532:	60ab      	str	r3, [r5, #8]
   12534:	7013      	strb	r3, [r2, #0]
   12536:	65ab      	str	r3, [r5, #88]	; 0x58
   12538:	4e58      	ldr	r6, [pc, #352]	; (1269c <_svfiprintf_r+0x1f4>)
   1253a:	2205      	movs	r2, #5
   1253c:	7821      	ldrb	r1, [r4, #0]
   1253e:	0030      	movs	r0, r6
   12540:	f000 fc6e 	bl	12e20 <memchr>
   12544:	1c62      	adds	r2, r4, #1
   12546:	2800      	cmp	r0, #0
   12548:	d120      	bne.n	1258c <_svfiprintf_r+0xe4>
   1254a:	6829      	ldr	r1, [r5, #0]
   1254c:	06cb      	lsls	r3, r1, #27
   1254e:	d504      	bpl.n	1255a <_svfiprintf_r+0xb2>
   12550:	2353      	movs	r3, #83	; 0x53
   12552:	ae02      	add	r6, sp, #8
   12554:	3020      	adds	r0, #32
   12556:	199b      	adds	r3, r3, r6
   12558:	7018      	strb	r0, [r3, #0]
   1255a:	070b      	lsls	r3, r1, #28
   1255c:	d504      	bpl.n	12568 <_svfiprintf_r+0xc0>
   1255e:	2353      	movs	r3, #83	; 0x53
   12560:	202b      	movs	r0, #43	; 0x2b
   12562:	ae02      	add	r6, sp, #8
   12564:	199b      	adds	r3, r3, r6
   12566:	7018      	strb	r0, [r3, #0]
   12568:	7823      	ldrb	r3, [r4, #0]
   1256a:	2b2a      	cmp	r3, #42	; 0x2a
   1256c:	d016      	beq.n	1259c <_svfiprintf_r+0xf4>
   1256e:	2000      	movs	r0, #0
   12570:	210a      	movs	r1, #10
   12572:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12574:	7822      	ldrb	r2, [r4, #0]
   12576:	3a30      	subs	r2, #48	; 0x30
   12578:	2a09      	cmp	r2, #9
   1257a:	d955      	bls.n	12628 <_svfiprintf_r+0x180>
   1257c:	2800      	cmp	r0, #0
   1257e:	d015      	beq.n	125ac <_svfiprintf_r+0x104>
   12580:	9309      	str	r3, [sp, #36]	; 0x24
   12582:	e013      	b.n	125ac <_svfiprintf_r+0x104>
   12584:	2b25      	cmp	r3, #37	; 0x25
   12586:	d0b5      	beq.n	124f4 <_svfiprintf_r+0x4c>
   12588:	3401      	adds	r4, #1
   1258a:	e7b0      	b.n	124ee <_svfiprintf_r+0x46>
   1258c:	2301      	movs	r3, #1
   1258e:	1b80      	subs	r0, r0, r6
   12590:	4083      	lsls	r3, r0
   12592:	6829      	ldr	r1, [r5, #0]
   12594:	0014      	movs	r4, r2
   12596:	430b      	orrs	r3, r1
   12598:	602b      	str	r3, [r5, #0]
   1259a:	e7cd      	b.n	12538 <_svfiprintf_r+0x90>
   1259c:	9b05      	ldr	r3, [sp, #20]
   1259e:	1d18      	adds	r0, r3, #4
   125a0:	681b      	ldr	r3, [r3, #0]
   125a2:	9005      	str	r0, [sp, #20]
   125a4:	2b00      	cmp	r3, #0
   125a6:	db39      	blt.n	1261c <_svfiprintf_r+0x174>
   125a8:	9309      	str	r3, [sp, #36]	; 0x24
   125aa:	0014      	movs	r4, r2
   125ac:	7823      	ldrb	r3, [r4, #0]
   125ae:	2b2e      	cmp	r3, #46	; 0x2e
   125b0:	d10b      	bne.n	125ca <_svfiprintf_r+0x122>
   125b2:	7863      	ldrb	r3, [r4, #1]
   125b4:	1c62      	adds	r2, r4, #1
   125b6:	2b2a      	cmp	r3, #42	; 0x2a
   125b8:	d13e      	bne.n	12638 <_svfiprintf_r+0x190>
   125ba:	9b05      	ldr	r3, [sp, #20]
   125bc:	3402      	adds	r4, #2
   125be:	1d1a      	adds	r2, r3, #4
   125c0:	681b      	ldr	r3, [r3, #0]
   125c2:	9205      	str	r2, [sp, #20]
   125c4:	2b00      	cmp	r3, #0
   125c6:	db34      	blt.n	12632 <_svfiprintf_r+0x18a>
   125c8:	9307      	str	r3, [sp, #28]
   125ca:	4e35      	ldr	r6, [pc, #212]	; (126a0 <_svfiprintf_r+0x1f8>)
   125cc:	7821      	ldrb	r1, [r4, #0]
   125ce:	2203      	movs	r2, #3
   125d0:	0030      	movs	r0, r6
   125d2:	f000 fc25 	bl	12e20 <memchr>
   125d6:	2800      	cmp	r0, #0
   125d8:	d006      	beq.n	125e8 <_svfiprintf_r+0x140>
   125da:	2340      	movs	r3, #64	; 0x40
   125dc:	1b80      	subs	r0, r0, r6
   125de:	4083      	lsls	r3, r0
   125e0:	682a      	ldr	r2, [r5, #0]
   125e2:	3401      	adds	r4, #1
   125e4:	4313      	orrs	r3, r2
   125e6:	602b      	str	r3, [r5, #0]
   125e8:	7821      	ldrb	r1, [r4, #0]
   125ea:	2206      	movs	r2, #6
   125ec:	482d      	ldr	r0, [pc, #180]	; (126a4 <_svfiprintf_r+0x1fc>)
   125ee:	1c66      	adds	r6, r4, #1
   125f0:	7629      	strb	r1, [r5, #24]
   125f2:	f000 fc15 	bl	12e20 <memchr>
   125f6:	2800      	cmp	r0, #0
   125f8:	d046      	beq.n	12688 <_svfiprintf_r+0x1e0>
   125fa:	4b2b      	ldr	r3, [pc, #172]	; (126a8 <_svfiprintf_r+0x200>)
   125fc:	2b00      	cmp	r3, #0
   125fe:	d12f      	bne.n	12660 <_svfiprintf_r+0x1b8>
   12600:	6829      	ldr	r1, [r5, #0]
   12602:	9b05      	ldr	r3, [sp, #20]
   12604:	2207      	movs	r2, #7
   12606:	05c9      	lsls	r1, r1, #23
   12608:	d528      	bpl.n	1265c <_svfiprintf_r+0x1b4>
   1260a:	189b      	adds	r3, r3, r2
   1260c:	4393      	bics	r3, r2
   1260e:	3308      	adds	r3, #8
   12610:	9305      	str	r3, [sp, #20]
   12612:	696b      	ldr	r3, [r5, #20]
   12614:	9a03      	ldr	r2, [sp, #12]
   12616:	189b      	adds	r3, r3, r2
   12618:	616b      	str	r3, [r5, #20]
   1261a:	e767      	b.n	124ec <_svfiprintf_r+0x44>
   1261c:	425b      	negs	r3, r3
   1261e:	60eb      	str	r3, [r5, #12]
   12620:	2302      	movs	r3, #2
   12622:	430b      	orrs	r3, r1
   12624:	602b      	str	r3, [r5, #0]
   12626:	e7c0      	b.n	125aa <_svfiprintf_r+0x102>
   12628:	434b      	muls	r3, r1
   1262a:	3401      	adds	r4, #1
   1262c:	189b      	adds	r3, r3, r2
   1262e:	2001      	movs	r0, #1
   12630:	e7a0      	b.n	12574 <_svfiprintf_r+0xcc>
   12632:	2301      	movs	r3, #1
   12634:	425b      	negs	r3, r3
   12636:	e7c7      	b.n	125c8 <_svfiprintf_r+0x120>
   12638:	2300      	movs	r3, #0
   1263a:	0014      	movs	r4, r2
   1263c:	200a      	movs	r0, #10
   1263e:	001a      	movs	r2, r3
   12640:	606b      	str	r3, [r5, #4]
   12642:	7821      	ldrb	r1, [r4, #0]
   12644:	3930      	subs	r1, #48	; 0x30
   12646:	2909      	cmp	r1, #9
   12648:	d903      	bls.n	12652 <_svfiprintf_r+0x1aa>
   1264a:	2b00      	cmp	r3, #0
   1264c:	d0bd      	beq.n	125ca <_svfiprintf_r+0x122>
   1264e:	9207      	str	r2, [sp, #28]
   12650:	e7bb      	b.n	125ca <_svfiprintf_r+0x122>
   12652:	4342      	muls	r2, r0
   12654:	3401      	adds	r4, #1
   12656:	1852      	adds	r2, r2, r1
   12658:	2301      	movs	r3, #1
   1265a:	e7f2      	b.n	12642 <_svfiprintf_r+0x19a>
   1265c:	3307      	adds	r3, #7
   1265e:	e7d5      	b.n	1260c <_svfiprintf_r+0x164>
   12660:	ab05      	add	r3, sp, #20
   12662:	9300      	str	r3, [sp, #0]
   12664:	003a      	movs	r2, r7
   12666:	4b11      	ldr	r3, [pc, #68]	; (126ac <_svfiprintf_r+0x204>)
   12668:	0029      	movs	r1, r5
   1266a:	9802      	ldr	r0, [sp, #8]
   1266c:	e000      	b.n	12670 <_svfiprintf_r+0x1c8>
   1266e:	bf00      	nop
   12670:	9003      	str	r0, [sp, #12]
   12672:	9b03      	ldr	r3, [sp, #12]
   12674:	3301      	adds	r3, #1
   12676:	d1cc      	bne.n	12612 <_svfiprintf_r+0x16a>
   12678:	89bb      	ldrh	r3, [r7, #12]
   1267a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1267c:	065b      	lsls	r3, r3, #25
   1267e:	d400      	bmi.n	12682 <_svfiprintf_r+0x1da>
   12680:	e729      	b.n	124d6 <_svfiprintf_r+0x2e>
   12682:	2001      	movs	r0, #1
   12684:	4240      	negs	r0, r0
   12686:	e726      	b.n	124d6 <_svfiprintf_r+0x2e>
   12688:	ab05      	add	r3, sp, #20
   1268a:	9300      	str	r3, [sp, #0]
   1268c:	003a      	movs	r2, r7
   1268e:	4b07      	ldr	r3, [pc, #28]	; (126ac <_svfiprintf_r+0x204>)
   12690:	0029      	movs	r1, r5
   12692:	9802      	ldr	r0, [sp, #8]
   12694:	f000 f9be 	bl	12a14 <_printf_i>
   12698:	e7ea      	b.n	12670 <_svfiprintf_r+0x1c8>
   1269a:	46c0      	nop			; (mov r8, r8)
   1269c:	000148ea 	.word	0x000148ea
   126a0:	000148f0 	.word	0x000148f0
   126a4:	000148f4 	.word	0x000148f4
   126a8:	00000000 	.word	0x00000000
   126ac:	000123e5 	.word	0x000123e5

000126b0 <__sfputc_r>:
   126b0:	6893      	ldr	r3, [r2, #8]
   126b2:	b510      	push	{r4, lr}
   126b4:	3b01      	subs	r3, #1
   126b6:	6093      	str	r3, [r2, #8]
   126b8:	2b00      	cmp	r3, #0
   126ba:	da05      	bge.n	126c8 <__sfputc_r+0x18>
   126bc:	6994      	ldr	r4, [r2, #24]
   126be:	42a3      	cmp	r3, r4
   126c0:	db08      	blt.n	126d4 <__sfputc_r+0x24>
   126c2:	b2cb      	uxtb	r3, r1
   126c4:	2b0a      	cmp	r3, #10
   126c6:	d005      	beq.n	126d4 <__sfputc_r+0x24>
   126c8:	6813      	ldr	r3, [r2, #0]
   126ca:	1c58      	adds	r0, r3, #1
   126cc:	6010      	str	r0, [r2, #0]
   126ce:	7019      	strb	r1, [r3, #0]
   126d0:	b2c8      	uxtb	r0, r1
   126d2:	bd10      	pop	{r4, pc}
   126d4:	f7ff fbb0 	bl	11e38 <__swbuf_r>
   126d8:	e7fb      	b.n	126d2 <__sfputc_r+0x22>

000126da <__sfputs_r>:
   126da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126dc:	0006      	movs	r6, r0
   126de:	000f      	movs	r7, r1
   126e0:	0014      	movs	r4, r2
   126e2:	18d5      	adds	r5, r2, r3
   126e4:	42ac      	cmp	r4, r5
   126e6:	d101      	bne.n	126ec <__sfputs_r+0x12>
   126e8:	2000      	movs	r0, #0
   126ea:	e007      	b.n	126fc <__sfputs_r+0x22>
   126ec:	7821      	ldrb	r1, [r4, #0]
   126ee:	003a      	movs	r2, r7
   126f0:	0030      	movs	r0, r6
   126f2:	f7ff ffdd 	bl	126b0 <__sfputc_r>
   126f6:	3401      	adds	r4, #1
   126f8:	1c43      	adds	r3, r0, #1
   126fa:	d1f3      	bne.n	126e4 <__sfputs_r+0xa>
   126fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00012700 <_vfiprintf_r>:
   12700:	b5f0      	push	{r4, r5, r6, r7, lr}
   12702:	b09f      	sub	sp, #124	; 0x7c
   12704:	0006      	movs	r6, r0
   12706:	000f      	movs	r7, r1
   12708:	0014      	movs	r4, r2
   1270a:	9305      	str	r3, [sp, #20]
   1270c:	2800      	cmp	r0, #0
   1270e:	d004      	beq.n	1271a <_vfiprintf_r+0x1a>
   12710:	6983      	ldr	r3, [r0, #24]
   12712:	2b00      	cmp	r3, #0
   12714:	d101      	bne.n	1271a <_vfiprintf_r+0x1a>
   12716:	f7ff fd53 	bl	121c0 <__sinit>
   1271a:	4b7f      	ldr	r3, [pc, #508]	; (12918 <_vfiprintf_r+0x218>)
   1271c:	429f      	cmp	r7, r3
   1271e:	d15c      	bne.n	127da <_vfiprintf_r+0xda>
   12720:	6877      	ldr	r7, [r6, #4]
   12722:	89bb      	ldrh	r3, [r7, #12]
   12724:	071b      	lsls	r3, r3, #28
   12726:	d562      	bpl.n	127ee <_vfiprintf_r+0xee>
   12728:	693b      	ldr	r3, [r7, #16]
   1272a:	2b00      	cmp	r3, #0
   1272c:	d05f      	beq.n	127ee <_vfiprintf_r+0xee>
   1272e:	2300      	movs	r3, #0
   12730:	ad06      	add	r5, sp, #24
   12732:	616b      	str	r3, [r5, #20]
   12734:	3320      	adds	r3, #32
   12736:	766b      	strb	r3, [r5, #25]
   12738:	3310      	adds	r3, #16
   1273a:	76ab      	strb	r3, [r5, #26]
   1273c:	9402      	str	r4, [sp, #8]
   1273e:	9c02      	ldr	r4, [sp, #8]
   12740:	7823      	ldrb	r3, [r4, #0]
   12742:	2b00      	cmp	r3, #0
   12744:	d15d      	bne.n	12802 <_vfiprintf_r+0x102>
   12746:	9b02      	ldr	r3, [sp, #8]
   12748:	1ae3      	subs	r3, r4, r3
   1274a:	9304      	str	r3, [sp, #16]
   1274c:	d00d      	beq.n	1276a <_vfiprintf_r+0x6a>
   1274e:	9b04      	ldr	r3, [sp, #16]
   12750:	9a02      	ldr	r2, [sp, #8]
   12752:	0039      	movs	r1, r7
   12754:	0030      	movs	r0, r6
   12756:	f7ff ffc0 	bl	126da <__sfputs_r>
   1275a:	1c43      	adds	r3, r0, #1
   1275c:	d100      	bne.n	12760 <_vfiprintf_r+0x60>
   1275e:	e0cc      	b.n	128fa <_vfiprintf_r+0x1fa>
   12760:	696a      	ldr	r2, [r5, #20]
   12762:	9b04      	ldr	r3, [sp, #16]
   12764:	4694      	mov	ip, r2
   12766:	4463      	add	r3, ip
   12768:	616b      	str	r3, [r5, #20]
   1276a:	7823      	ldrb	r3, [r4, #0]
   1276c:	2b00      	cmp	r3, #0
   1276e:	d100      	bne.n	12772 <_vfiprintf_r+0x72>
   12770:	e0c3      	b.n	128fa <_vfiprintf_r+0x1fa>
   12772:	2201      	movs	r2, #1
   12774:	2300      	movs	r3, #0
   12776:	4252      	negs	r2, r2
   12778:	606a      	str	r2, [r5, #4]
   1277a:	a902      	add	r1, sp, #8
   1277c:	3254      	adds	r2, #84	; 0x54
   1277e:	1852      	adds	r2, r2, r1
   12780:	3401      	adds	r4, #1
   12782:	602b      	str	r3, [r5, #0]
   12784:	60eb      	str	r3, [r5, #12]
   12786:	60ab      	str	r3, [r5, #8]
   12788:	7013      	strb	r3, [r2, #0]
   1278a:	65ab      	str	r3, [r5, #88]	; 0x58
   1278c:	7821      	ldrb	r1, [r4, #0]
   1278e:	2205      	movs	r2, #5
   12790:	4862      	ldr	r0, [pc, #392]	; (1291c <_vfiprintf_r+0x21c>)
   12792:	f000 fb45 	bl	12e20 <memchr>
   12796:	1c63      	adds	r3, r4, #1
   12798:	469c      	mov	ip, r3
   1279a:	2800      	cmp	r0, #0
   1279c:	d135      	bne.n	1280a <_vfiprintf_r+0x10a>
   1279e:	6829      	ldr	r1, [r5, #0]
   127a0:	06cb      	lsls	r3, r1, #27
   127a2:	d504      	bpl.n	127ae <_vfiprintf_r+0xae>
   127a4:	2353      	movs	r3, #83	; 0x53
   127a6:	aa02      	add	r2, sp, #8
   127a8:	3020      	adds	r0, #32
   127aa:	189b      	adds	r3, r3, r2
   127ac:	7018      	strb	r0, [r3, #0]
   127ae:	070b      	lsls	r3, r1, #28
   127b0:	d504      	bpl.n	127bc <_vfiprintf_r+0xbc>
   127b2:	2353      	movs	r3, #83	; 0x53
   127b4:	202b      	movs	r0, #43	; 0x2b
   127b6:	aa02      	add	r2, sp, #8
   127b8:	189b      	adds	r3, r3, r2
   127ba:	7018      	strb	r0, [r3, #0]
   127bc:	7823      	ldrb	r3, [r4, #0]
   127be:	2b2a      	cmp	r3, #42	; 0x2a
   127c0:	d02c      	beq.n	1281c <_vfiprintf_r+0x11c>
   127c2:	2000      	movs	r0, #0
   127c4:	210a      	movs	r1, #10
   127c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   127c8:	7822      	ldrb	r2, [r4, #0]
   127ca:	3a30      	subs	r2, #48	; 0x30
   127cc:	2a09      	cmp	r2, #9
   127ce:	d800      	bhi.n	127d2 <_vfiprintf_r+0xd2>
   127d0:	e06b      	b.n	128aa <_vfiprintf_r+0x1aa>
   127d2:	2800      	cmp	r0, #0
   127d4:	d02a      	beq.n	1282c <_vfiprintf_r+0x12c>
   127d6:	9309      	str	r3, [sp, #36]	; 0x24
   127d8:	e028      	b.n	1282c <_vfiprintf_r+0x12c>
   127da:	4b51      	ldr	r3, [pc, #324]	; (12920 <_vfiprintf_r+0x220>)
   127dc:	429f      	cmp	r7, r3
   127de:	d101      	bne.n	127e4 <_vfiprintf_r+0xe4>
   127e0:	68b7      	ldr	r7, [r6, #8]
   127e2:	e79e      	b.n	12722 <_vfiprintf_r+0x22>
   127e4:	4b4f      	ldr	r3, [pc, #316]	; (12924 <_vfiprintf_r+0x224>)
   127e6:	429f      	cmp	r7, r3
   127e8:	d19b      	bne.n	12722 <_vfiprintf_r+0x22>
   127ea:	68f7      	ldr	r7, [r6, #12]
   127ec:	e799      	b.n	12722 <_vfiprintf_r+0x22>
   127ee:	0039      	movs	r1, r7
   127f0:	0030      	movs	r0, r6
   127f2:	f7ff fb77 	bl	11ee4 <__swsetup_r>
   127f6:	2800      	cmp	r0, #0
   127f8:	d099      	beq.n	1272e <_vfiprintf_r+0x2e>
   127fa:	2001      	movs	r0, #1
   127fc:	4240      	negs	r0, r0
   127fe:	b01f      	add	sp, #124	; 0x7c
   12800:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12802:	2b25      	cmp	r3, #37	; 0x25
   12804:	d09f      	beq.n	12746 <_vfiprintf_r+0x46>
   12806:	3401      	adds	r4, #1
   12808:	e79a      	b.n	12740 <_vfiprintf_r+0x40>
   1280a:	4b44      	ldr	r3, [pc, #272]	; (1291c <_vfiprintf_r+0x21c>)
   1280c:	6829      	ldr	r1, [r5, #0]
   1280e:	1ac0      	subs	r0, r0, r3
   12810:	2301      	movs	r3, #1
   12812:	4083      	lsls	r3, r0
   12814:	430b      	orrs	r3, r1
   12816:	602b      	str	r3, [r5, #0]
   12818:	4664      	mov	r4, ip
   1281a:	e7b7      	b.n	1278c <_vfiprintf_r+0x8c>
   1281c:	9b05      	ldr	r3, [sp, #20]
   1281e:	1d18      	adds	r0, r3, #4
   12820:	681b      	ldr	r3, [r3, #0]
   12822:	9005      	str	r0, [sp, #20]
   12824:	2b00      	cmp	r3, #0
   12826:	db3a      	blt.n	1289e <_vfiprintf_r+0x19e>
   12828:	9309      	str	r3, [sp, #36]	; 0x24
   1282a:	4664      	mov	r4, ip
   1282c:	7823      	ldrb	r3, [r4, #0]
   1282e:	2b2e      	cmp	r3, #46	; 0x2e
   12830:	d10b      	bne.n	1284a <_vfiprintf_r+0x14a>
   12832:	7863      	ldrb	r3, [r4, #1]
   12834:	1c62      	adds	r2, r4, #1
   12836:	2b2a      	cmp	r3, #42	; 0x2a
   12838:	d13f      	bne.n	128ba <_vfiprintf_r+0x1ba>
   1283a:	9b05      	ldr	r3, [sp, #20]
   1283c:	3402      	adds	r4, #2
   1283e:	1d1a      	adds	r2, r3, #4
   12840:	681b      	ldr	r3, [r3, #0]
   12842:	9205      	str	r2, [sp, #20]
   12844:	2b00      	cmp	r3, #0
   12846:	db35      	blt.n	128b4 <_vfiprintf_r+0x1b4>
   12848:	9307      	str	r3, [sp, #28]
   1284a:	7821      	ldrb	r1, [r4, #0]
   1284c:	2203      	movs	r2, #3
   1284e:	4836      	ldr	r0, [pc, #216]	; (12928 <_vfiprintf_r+0x228>)
   12850:	f000 fae6 	bl	12e20 <memchr>
   12854:	2800      	cmp	r0, #0
   12856:	d007      	beq.n	12868 <_vfiprintf_r+0x168>
   12858:	4b33      	ldr	r3, [pc, #204]	; (12928 <_vfiprintf_r+0x228>)
   1285a:	682a      	ldr	r2, [r5, #0]
   1285c:	1ac0      	subs	r0, r0, r3
   1285e:	2340      	movs	r3, #64	; 0x40
   12860:	4083      	lsls	r3, r0
   12862:	4313      	orrs	r3, r2
   12864:	602b      	str	r3, [r5, #0]
   12866:	3401      	adds	r4, #1
   12868:	7821      	ldrb	r1, [r4, #0]
   1286a:	1c63      	adds	r3, r4, #1
   1286c:	2206      	movs	r2, #6
   1286e:	482f      	ldr	r0, [pc, #188]	; (1292c <_vfiprintf_r+0x22c>)
   12870:	9302      	str	r3, [sp, #8]
   12872:	7629      	strb	r1, [r5, #24]
   12874:	f000 fad4 	bl	12e20 <memchr>
   12878:	2800      	cmp	r0, #0
   1287a:	d044      	beq.n	12906 <_vfiprintf_r+0x206>
   1287c:	4b2c      	ldr	r3, [pc, #176]	; (12930 <_vfiprintf_r+0x230>)
   1287e:	2b00      	cmp	r3, #0
   12880:	d12f      	bne.n	128e2 <_vfiprintf_r+0x1e2>
   12882:	6829      	ldr	r1, [r5, #0]
   12884:	9b05      	ldr	r3, [sp, #20]
   12886:	2207      	movs	r2, #7
   12888:	05c9      	lsls	r1, r1, #23
   1288a:	d528      	bpl.n	128de <_vfiprintf_r+0x1de>
   1288c:	189b      	adds	r3, r3, r2
   1288e:	4393      	bics	r3, r2
   12890:	3308      	adds	r3, #8
   12892:	9305      	str	r3, [sp, #20]
   12894:	696b      	ldr	r3, [r5, #20]
   12896:	9a03      	ldr	r2, [sp, #12]
   12898:	189b      	adds	r3, r3, r2
   1289a:	616b      	str	r3, [r5, #20]
   1289c:	e74f      	b.n	1273e <_vfiprintf_r+0x3e>
   1289e:	425b      	negs	r3, r3
   128a0:	60eb      	str	r3, [r5, #12]
   128a2:	2302      	movs	r3, #2
   128a4:	430b      	orrs	r3, r1
   128a6:	602b      	str	r3, [r5, #0]
   128a8:	e7bf      	b.n	1282a <_vfiprintf_r+0x12a>
   128aa:	434b      	muls	r3, r1
   128ac:	3401      	adds	r4, #1
   128ae:	189b      	adds	r3, r3, r2
   128b0:	2001      	movs	r0, #1
   128b2:	e789      	b.n	127c8 <_vfiprintf_r+0xc8>
   128b4:	2301      	movs	r3, #1
   128b6:	425b      	negs	r3, r3
   128b8:	e7c6      	b.n	12848 <_vfiprintf_r+0x148>
   128ba:	2300      	movs	r3, #0
   128bc:	0014      	movs	r4, r2
   128be:	200a      	movs	r0, #10
   128c0:	001a      	movs	r2, r3
   128c2:	606b      	str	r3, [r5, #4]
   128c4:	7821      	ldrb	r1, [r4, #0]
   128c6:	3930      	subs	r1, #48	; 0x30
   128c8:	2909      	cmp	r1, #9
   128ca:	d903      	bls.n	128d4 <_vfiprintf_r+0x1d4>
   128cc:	2b00      	cmp	r3, #0
   128ce:	d0bc      	beq.n	1284a <_vfiprintf_r+0x14a>
   128d0:	9207      	str	r2, [sp, #28]
   128d2:	e7ba      	b.n	1284a <_vfiprintf_r+0x14a>
   128d4:	4342      	muls	r2, r0
   128d6:	3401      	adds	r4, #1
   128d8:	1852      	adds	r2, r2, r1
   128da:	2301      	movs	r3, #1
   128dc:	e7f2      	b.n	128c4 <_vfiprintf_r+0x1c4>
   128de:	3307      	adds	r3, #7
   128e0:	e7d5      	b.n	1288e <_vfiprintf_r+0x18e>
   128e2:	ab05      	add	r3, sp, #20
   128e4:	9300      	str	r3, [sp, #0]
   128e6:	003a      	movs	r2, r7
   128e8:	4b12      	ldr	r3, [pc, #72]	; (12934 <_vfiprintf_r+0x234>)
   128ea:	0029      	movs	r1, r5
   128ec:	0030      	movs	r0, r6
   128ee:	e000      	b.n	128f2 <_vfiprintf_r+0x1f2>
   128f0:	bf00      	nop
   128f2:	9003      	str	r0, [sp, #12]
   128f4:	9b03      	ldr	r3, [sp, #12]
   128f6:	3301      	adds	r3, #1
   128f8:	d1cc      	bne.n	12894 <_vfiprintf_r+0x194>
   128fa:	89bb      	ldrh	r3, [r7, #12]
   128fc:	065b      	lsls	r3, r3, #25
   128fe:	d500      	bpl.n	12902 <_vfiprintf_r+0x202>
   12900:	e77b      	b.n	127fa <_vfiprintf_r+0xfa>
   12902:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12904:	e77b      	b.n	127fe <_vfiprintf_r+0xfe>
   12906:	ab05      	add	r3, sp, #20
   12908:	9300      	str	r3, [sp, #0]
   1290a:	003a      	movs	r2, r7
   1290c:	4b09      	ldr	r3, [pc, #36]	; (12934 <_vfiprintf_r+0x234>)
   1290e:	0029      	movs	r1, r5
   12910:	0030      	movs	r0, r6
   12912:	f000 f87f 	bl	12a14 <_printf_i>
   12916:	e7ec      	b.n	128f2 <_vfiprintf_r+0x1f2>
   12918:	000148a0 	.word	0x000148a0
   1291c:	000148ea 	.word	0x000148ea
   12920:	000148c0 	.word	0x000148c0
   12924:	00014880 	.word	0x00014880
   12928:	000148f0 	.word	0x000148f0
   1292c:	000148f4 	.word	0x000148f4
   12930:	00000000 	.word	0x00000000
   12934:	000126db 	.word	0x000126db

00012938 <_printf_common>:
   12938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1293a:	0015      	movs	r5, r2
   1293c:	9301      	str	r3, [sp, #4]
   1293e:	688a      	ldr	r2, [r1, #8]
   12940:	690b      	ldr	r3, [r1, #16]
   12942:	9000      	str	r0, [sp, #0]
   12944:	000c      	movs	r4, r1
   12946:	4293      	cmp	r3, r2
   12948:	da00      	bge.n	1294c <_printf_common+0x14>
   1294a:	0013      	movs	r3, r2
   1294c:	0022      	movs	r2, r4
   1294e:	602b      	str	r3, [r5, #0]
   12950:	3243      	adds	r2, #67	; 0x43
   12952:	7812      	ldrb	r2, [r2, #0]
   12954:	2a00      	cmp	r2, #0
   12956:	d001      	beq.n	1295c <_printf_common+0x24>
   12958:	3301      	adds	r3, #1
   1295a:	602b      	str	r3, [r5, #0]
   1295c:	6823      	ldr	r3, [r4, #0]
   1295e:	069b      	lsls	r3, r3, #26
   12960:	d502      	bpl.n	12968 <_printf_common+0x30>
   12962:	682b      	ldr	r3, [r5, #0]
   12964:	3302      	adds	r3, #2
   12966:	602b      	str	r3, [r5, #0]
   12968:	2706      	movs	r7, #6
   1296a:	6823      	ldr	r3, [r4, #0]
   1296c:	401f      	ands	r7, r3
   1296e:	d027      	beq.n	129c0 <_printf_common+0x88>
   12970:	0023      	movs	r3, r4
   12972:	3343      	adds	r3, #67	; 0x43
   12974:	781b      	ldrb	r3, [r3, #0]
   12976:	1e5a      	subs	r2, r3, #1
   12978:	4193      	sbcs	r3, r2
   1297a:	6822      	ldr	r2, [r4, #0]
   1297c:	0692      	lsls	r2, r2, #26
   1297e:	d430      	bmi.n	129e2 <_printf_common+0xaa>
   12980:	0022      	movs	r2, r4
   12982:	9901      	ldr	r1, [sp, #4]
   12984:	3243      	adds	r2, #67	; 0x43
   12986:	9800      	ldr	r0, [sp, #0]
   12988:	9e08      	ldr	r6, [sp, #32]
   1298a:	47b0      	blx	r6
   1298c:	1c43      	adds	r3, r0, #1
   1298e:	d025      	beq.n	129dc <_printf_common+0xa4>
   12990:	2306      	movs	r3, #6
   12992:	6820      	ldr	r0, [r4, #0]
   12994:	682a      	ldr	r2, [r5, #0]
   12996:	68e1      	ldr	r1, [r4, #12]
   12998:	4003      	ands	r3, r0
   1299a:	2500      	movs	r5, #0
   1299c:	2b04      	cmp	r3, #4
   1299e:	d103      	bne.n	129a8 <_printf_common+0x70>
   129a0:	1a8d      	subs	r5, r1, r2
   129a2:	43eb      	mvns	r3, r5
   129a4:	17db      	asrs	r3, r3, #31
   129a6:	401d      	ands	r5, r3
   129a8:	68a3      	ldr	r3, [r4, #8]
   129aa:	6922      	ldr	r2, [r4, #16]
   129ac:	4293      	cmp	r3, r2
   129ae:	dd01      	ble.n	129b4 <_printf_common+0x7c>
   129b0:	1a9b      	subs	r3, r3, r2
   129b2:	18ed      	adds	r5, r5, r3
   129b4:	2700      	movs	r7, #0
   129b6:	42bd      	cmp	r5, r7
   129b8:	d120      	bne.n	129fc <_printf_common+0xc4>
   129ba:	2000      	movs	r0, #0
   129bc:	e010      	b.n	129e0 <_printf_common+0xa8>
   129be:	3701      	adds	r7, #1
   129c0:	68e3      	ldr	r3, [r4, #12]
   129c2:	682a      	ldr	r2, [r5, #0]
   129c4:	1a9b      	subs	r3, r3, r2
   129c6:	429f      	cmp	r7, r3
   129c8:	dad2      	bge.n	12970 <_printf_common+0x38>
   129ca:	0022      	movs	r2, r4
   129cc:	2301      	movs	r3, #1
   129ce:	3219      	adds	r2, #25
   129d0:	9901      	ldr	r1, [sp, #4]
   129d2:	9800      	ldr	r0, [sp, #0]
   129d4:	9e08      	ldr	r6, [sp, #32]
   129d6:	47b0      	blx	r6
   129d8:	1c43      	adds	r3, r0, #1
   129da:	d1f0      	bne.n	129be <_printf_common+0x86>
   129dc:	2001      	movs	r0, #1
   129de:	4240      	negs	r0, r0
   129e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   129e2:	2030      	movs	r0, #48	; 0x30
   129e4:	18e1      	adds	r1, r4, r3
   129e6:	3143      	adds	r1, #67	; 0x43
   129e8:	7008      	strb	r0, [r1, #0]
   129ea:	0021      	movs	r1, r4
   129ec:	1c5a      	adds	r2, r3, #1
   129ee:	3145      	adds	r1, #69	; 0x45
   129f0:	7809      	ldrb	r1, [r1, #0]
   129f2:	18a2      	adds	r2, r4, r2
   129f4:	3243      	adds	r2, #67	; 0x43
   129f6:	3302      	adds	r3, #2
   129f8:	7011      	strb	r1, [r2, #0]
   129fa:	e7c1      	b.n	12980 <_printf_common+0x48>
   129fc:	0022      	movs	r2, r4
   129fe:	2301      	movs	r3, #1
   12a00:	321a      	adds	r2, #26
   12a02:	9901      	ldr	r1, [sp, #4]
   12a04:	9800      	ldr	r0, [sp, #0]
   12a06:	9e08      	ldr	r6, [sp, #32]
   12a08:	47b0      	blx	r6
   12a0a:	1c43      	adds	r3, r0, #1
   12a0c:	d0e6      	beq.n	129dc <_printf_common+0xa4>
   12a0e:	3701      	adds	r7, #1
   12a10:	e7d1      	b.n	129b6 <_printf_common+0x7e>
	...

00012a14 <_printf_i>:
   12a14:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a16:	b08b      	sub	sp, #44	; 0x2c
   12a18:	9206      	str	r2, [sp, #24]
   12a1a:	000a      	movs	r2, r1
   12a1c:	3243      	adds	r2, #67	; 0x43
   12a1e:	9307      	str	r3, [sp, #28]
   12a20:	9005      	str	r0, [sp, #20]
   12a22:	9204      	str	r2, [sp, #16]
   12a24:	7e0a      	ldrb	r2, [r1, #24]
   12a26:	000c      	movs	r4, r1
   12a28:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12a2a:	2a6e      	cmp	r2, #110	; 0x6e
   12a2c:	d100      	bne.n	12a30 <_printf_i+0x1c>
   12a2e:	e08f      	b.n	12b50 <_printf_i+0x13c>
   12a30:	d817      	bhi.n	12a62 <_printf_i+0x4e>
   12a32:	2a63      	cmp	r2, #99	; 0x63
   12a34:	d02c      	beq.n	12a90 <_printf_i+0x7c>
   12a36:	d808      	bhi.n	12a4a <_printf_i+0x36>
   12a38:	2a00      	cmp	r2, #0
   12a3a:	d100      	bne.n	12a3e <_printf_i+0x2a>
   12a3c:	e099      	b.n	12b72 <_printf_i+0x15e>
   12a3e:	2a58      	cmp	r2, #88	; 0x58
   12a40:	d054      	beq.n	12aec <_printf_i+0xd8>
   12a42:	0026      	movs	r6, r4
   12a44:	3642      	adds	r6, #66	; 0x42
   12a46:	7032      	strb	r2, [r6, #0]
   12a48:	e029      	b.n	12a9e <_printf_i+0x8a>
   12a4a:	2a64      	cmp	r2, #100	; 0x64
   12a4c:	d001      	beq.n	12a52 <_printf_i+0x3e>
   12a4e:	2a69      	cmp	r2, #105	; 0x69
   12a50:	d1f7      	bne.n	12a42 <_printf_i+0x2e>
   12a52:	6821      	ldr	r1, [r4, #0]
   12a54:	681a      	ldr	r2, [r3, #0]
   12a56:	0608      	lsls	r0, r1, #24
   12a58:	d523      	bpl.n	12aa2 <_printf_i+0x8e>
   12a5a:	1d11      	adds	r1, r2, #4
   12a5c:	6019      	str	r1, [r3, #0]
   12a5e:	6815      	ldr	r5, [r2, #0]
   12a60:	e025      	b.n	12aae <_printf_i+0x9a>
   12a62:	2a73      	cmp	r2, #115	; 0x73
   12a64:	d100      	bne.n	12a68 <_printf_i+0x54>
   12a66:	e088      	b.n	12b7a <_printf_i+0x166>
   12a68:	d808      	bhi.n	12a7c <_printf_i+0x68>
   12a6a:	2a6f      	cmp	r2, #111	; 0x6f
   12a6c:	d029      	beq.n	12ac2 <_printf_i+0xae>
   12a6e:	2a70      	cmp	r2, #112	; 0x70
   12a70:	d1e7      	bne.n	12a42 <_printf_i+0x2e>
   12a72:	2220      	movs	r2, #32
   12a74:	6809      	ldr	r1, [r1, #0]
   12a76:	430a      	orrs	r2, r1
   12a78:	6022      	str	r2, [r4, #0]
   12a7a:	e003      	b.n	12a84 <_printf_i+0x70>
   12a7c:	2a75      	cmp	r2, #117	; 0x75
   12a7e:	d020      	beq.n	12ac2 <_printf_i+0xae>
   12a80:	2a78      	cmp	r2, #120	; 0x78
   12a82:	d1de      	bne.n	12a42 <_printf_i+0x2e>
   12a84:	0022      	movs	r2, r4
   12a86:	2178      	movs	r1, #120	; 0x78
   12a88:	3245      	adds	r2, #69	; 0x45
   12a8a:	7011      	strb	r1, [r2, #0]
   12a8c:	4a6c      	ldr	r2, [pc, #432]	; (12c40 <_printf_i+0x22c>)
   12a8e:	e030      	b.n	12af2 <_printf_i+0xde>
   12a90:	000e      	movs	r6, r1
   12a92:	681a      	ldr	r2, [r3, #0]
   12a94:	3642      	adds	r6, #66	; 0x42
   12a96:	1d11      	adds	r1, r2, #4
   12a98:	6019      	str	r1, [r3, #0]
   12a9a:	6813      	ldr	r3, [r2, #0]
   12a9c:	7033      	strb	r3, [r6, #0]
   12a9e:	2301      	movs	r3, #1
   12aa0:	e079      	b.n	12b96 <_printf_i+0x182>
   12aa2:	0649      	lsls	r1, r1, #25
   12aa4:	d5d9      	bpl.n	12a5a <_printf_i+0x46>
   12aa6:	1d11      	adds	r1, r2, #4
   12aa8:	6019      	str	r1, [r3, #0]
   12aaa:	2300      	movs	r3, #0
   12aac:	5ed5      	ldrsh	r5, [r2, r3]
   12aae:	2d00      	cmp	r5, #0
   12ab0:	da03      	bge.n	12aba <_printf_i+0xa6>
   12ab2:	232d      	movs	r3, #45	; 0x2d
   12ab4:	9a04      	ldr	r2, [sp, #16]
   12ab6:	426d      	negs	r5, r5
   12ab8:	7013      	strb	r3, [r2, #0]
   12aba:	4b62      	ldr	r3, [pc, #392]	; (12c44 <_printf_i+0x230>)
   12abc:	270a      	movs	r7, #10
   12abe:	9303      	str	r3, [sp, #12]
   12ac0:	e02f      	b.n	12b22 <_printf_i+0x10e>
   12ac2:	6820      	ldr	r0, [r4, #0]
   12ac4:	6819      	ldr	r1, [r3, #0]
   12ac6:	0605      	lsls	r5, r0, #24
   12ac8:	d503      	bpl.n	12ad2 <_printf_i+0xbe>
   12aca:	1d08      	adds	r0, r1, #4
   12acc:	6018      	str	r0, [r3, #0]
   12ace:	680d      	ldr	r5, [r1, #0]
   12ad0:	e005      	b.n	12ade <_printf_i+0xca>
   12ad2:	0640      	lsls	r0, r0, #25
   12ad4:	d5f9      	bpl.n	12aca <_printf_i+0xb6>
   12ad6:	680d      	ldr	r5, [r1, #0]
   12ad8:	1d08      	adds	r0, r1, #4
   12ada:	6018      	str	r0, [r3, #0]
   12adc:	b2ad      	uxth	r5, r5
   12ade:	4b59      	ldr	r3, [pc, #356]	; (12c44 <_printf_i+0x230>)
   12ae0:	2708      	movs	r7, #8
   12ae2:	9303      	str	r3, [sp, #12]
   12ae4:	2a6f      	cmp	r2, #111	; 0x6f
   12ae6:	d018      	beq.n	12b1a <_printf_i+0x106>
   12ae8:	270a      	movs	r7, #10
   12aea:	e016      	b.n	12b1a <_printf_i+0x106>
   12aec:	3145      	adds	r1, #69	; 0x45
   12aee:	700a      	strb	r2, [r1, #0]
   12af0:	4a54      	ldr	r2, [pc, #336]	; (12c44 <_printf_i+0x230>)
   12af2:	9203      	str	r2, [sp, #12]
   12af4:	681a      	ldr	r2, [r3, #0]
   12af6:	6821      	ldr	r1, [r4, #0]
   12af8:	1d10      	adds	r0, r2, #4
   12afa:	6018      	str	r0, [r3, #0]
   12afc:	6815      	ldr	r5, [r2, #0]
   12afe:	0608      	lsls	r0, r1, #24
   12b00:	d522      	bpl.n	12b48 <_printf_i+0x134>
   12b02:	07cb      	lsls	r3, r1, #31
   12b04:	d502      	bpl.n	12b0c <_printf_i+0xf8>
   12b06:	2320      	movs	r3, #32
   12b08:	4319      	orrs	r1, r3
   12b0a:	6021      	str	r1, [r4, #0]
   12b0c:	2710      	movs	r7, #16
   12b0e:	2d00      	cmp	r5, #0
   12b10:	d103      	bne.n	12b1a <_printf_i+0x106>
   12b12:	2320      	movs	r3, #32
   12b14:	6822      	ldr	r2, [r4, #0]
   12b16:	439a      	bics	r2, r3
   12b18:	6022      	str	r2, [r4, #0]
   12b1a:	0023      	movs	r3, r4
   12b1c:	2200      	movs	r2, #0
   12b1e:	3343      	adds	r3, #67	; 0x43
   12b20:	701a      	strb	r2, [r3, #0]
   12b22:	6863      	ldr	r3, [r4, #4]
   12b24:	60a3      	str	r3, [r4, #8]
   12b26:	2b00      	cmp	r3, #0
   12b28:	db5c      	blt.n	12be4 <_printf_i+0x1d0>
   12b2a:	2204      	movs	r2, #4
   12b2c:	6821      	ldr	r1, [r4, #0]
   12b2e:	4391      	bics	r1, r2
   12b30:	6021      	str	r1, [r4, #0]
   12b32:	2d00      	cmp	r5, #0
   12b34:	d158      	bne.n	12be8 <_printf_i+0x1d4>
   12b36:	9e04      	ldr	r6, [sp, #16]
   12b38:	2b00      	cmp	r3, #0
   12b3a:	d064      	beq.n	12c06 <_printf_i+0x1f2>
   12b3c:	0026      	movs	r6, r4
   12b3e:	9b03      	ldr	r3, [sp, #12]
   12b40:	3642      	adds	r6, #66	; 0x42
   12b42:	781b      	ldrb	r3, [r3, #0]
   12b44:	7033      	strb	r3, [r6, #0]
   12b46:	e05e      	b.n	12c06 <_printf_i+0x1f2>
   12b48:	0648      	lsls	r0, r1, #25
   12b4a:	d5da      	bpl.n	12b02 <_printf_i+0xee>
   12b4c:	b2ad      	uxth	r5, r5
   12b4e:	e7d8      	b.n	12b02 <_printf_i+0xee>
   12b50:	6809      	ldr	r1, [r1, #0]
   12b52:	681a      	ldr	r2, [r3, #0]
   12b54:	0608      	lsls	r0, r1, #24
   12b56:	d505      	bpl.n	12b64 <_printf_i+0x150>
   12b58:	1d11      	adds	r1, r2, #4
   12b5a:	6019      	str	r1, [r3, #0]
   12b5c:	6813      	ldr	r3, [r2, #0]
   12b5e:	6962      	ldr	r2, [r4, #20]
   12b60:	601a      	str	r2, [r3, #0]
   12b62:	e006      	b.n	12b72 <_printf_i+0x15e>
   12b64:	0649      	lsls	r1, r1, #25
   12b66:	d5f7      	bpl.n	12b58 <_printf_i+0x144>
   12b68:	1d11      	adds	r1, r2, #4
   12b6a:	6019      	str	r1, [r3, #0]
   12b6c:	6813      	ldr	r3, [r2, #0]
   12b6e:	8aa2      	ldrh	r2, [r4, #20]
   12b70:	801a      	strh	r2, [r3, #0]
   12b72:	2300      	movs	r3, #0
   12b74:	9e04      	ldr	r6, [sp, #16]
   12b76:	6123      	str	r3, [r4, #16]
   12b78:	e054      	b.n	12c24 <_printf_i+0x210>
   12b7a:	681a      	ldr	r2, [r3, #0]
   12b7c:	1d11      	adds	r1, r2, #4
   12b7e:	6019      	str	r1, [r3, #0]
   12b80:	6816      	ldr	r6, [r2, #0]
   12b82:	2100      	movs	r1, #0
   12b84:	6862      	ldr	r2, [r4, #4]
   12b86:	0030      	movs	r0, r6
   12b88:	f000 f94a 	bl	12e20 <memchr>
   12b8c:	2800      	cmp	r0, #0
   12b8e:	d001      	beq.n	12b94 <_printf_i+0x180>
   12b90:	1b80      	subs	r0, r0, r6
   12b92:	6060      	str	r0, [r4, #4]
   12b94:	6863      	ldr	r3, [r4, #4]
   12b96:	6123      	str	r3, [r4, #16]
   12b98:	2300      	movs	r3, #0
   12b9a:	9a04      	ldr	r2, [sp, #16]
   12b9c:	7013      	strb	r3, [r2, #0]
   12b9e:	e041      	b.n	12c24 <_printf_i+0x210>
   12ba0:	6923      	ldr	r3, [r4, #16]
   12ba2:	0032      	movs	r2, r6
   12ba4:	9906      	ldr	r1, [sp, #24]
   12ba6:	9805      	ldr	r0, [sp, #20]
   12ba8:	9d07      	ldr	r5, [sp, #28]
   12baa:	47a8      	blx	r5
   12bac:	1c43      	adds	r3, r0, #1
   12bae:	d043      	beq.n	12c38 <_printf_i+0x224>
   12bb0:	6823      	ldr	r3, [r4, #0]
   12bb2:	2500      	movs	r5, #0
   12bb4:	079b      	lsls	r3, r3, #30
   12bb6:	d40f      	bmi.n	12bd8 <_printf_i+0x1c4>
   12bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12bba:	68e0      	ldr	r0, [r4, #12]
   12bbc:	4298      	cmp	r0, r3
   12bbe:	da3d      	bge.n	12c3c <_printf_i+0x228>
   12bc0:	0018      	movs	r0, r3
   12bc2:	e03b      	b.n	12c3c <_printf_i+0x228>
   12bc4:	0022      	movs	r2, r4
   12bc6:	2301      	movs	r3, #1
   12bc8:	3219      	adds	r2, #25
   12bca:	9906      	ldr	r1, [sp, #24]
   12bcc:	9805      	ldr	r0, [sp, #20]
   12bce:	9e07      	ldr	r6, [sp, #28]
   12bd0:	47b0      	blx	r6
   12bd2:	1c43      	adds	r3, r0, #1
   12bd4:	d030      	beq.n	12c38 <_printf_i+0x224>
   12bd6:	3501      	adds	r5, #1
   12bd8:	68e3      	ldr	r3, [r4, #12]
   12bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12bdc:	1a9b      	subs	r3, r3, r2
   12bde:	429d      	cmp	r5, r3
   12be0:	dbf0      	blt.n	12bc4 <_printf_i+0x1b0>
   12be2:	e7e9      	b.n	12bb8 <_printf_i+0x1a4>
   12be4:	2d00      	cmp	r5, #0
   12be6:	d0a9      	beq.n	12b3c <_printf_i+0x128>
   12be8:	9e04      	ldr	r6, [sp, #16]
   12bea:	0028      	movs	r0, r5
   12bec:	0039      	movs	r1, r7
   12bee:	f7fe fc83 	bl	114f8 <__aeabi_uidivmod>
   12bf2:	9b03      	ldr	r3, [sp, #12]
   12bf4:	3e01      	subs	r6, #1
   12bf6:	5c5b      	ldrb	r3, [r3, r1]
   12bf8:	0028      	movs	r0, r5
   12bfa:	7033      	strb	r3, [r6, #0]
   12bfc:	0039      	movs	r1, r7
   12bfe:	f7fe fbf5 	bl	113ec <__udivsi3>
   12c02:	1e05      	subs	r5, r0, #0
   12c04:	d1f1      	bne.n	12bea <_printf_i+0x1d6>
   12c06:	2f08      	cmp	r7, #8
   12c08:	d109      	bne.n	12c1e <_printf_i+0x20a>
   12c0a:	6823      	ldr	r3, [r4, #0]
   12c0c:	07db      	lsls	r3, r3, #31
   12c0e:	d506      	bpl.n	12c1e <_printf_i+0x20a>
   12c10:	6863      	ldr	r3, [r4, #4]
   12c12:	6922      	ldr	r2, [r4, #16]
   12c14:	4293      	cmp	r3, r2
   12c16:	dc02      	bgt.n	12c1e <_printf_i+0x20a>
   12c18:	2330      	movs	r3, #48	; 0x30
   12c1a:	3e01      	subs	r6, #1
   12c1c:	7033      	strb	r3, [r6, #0]
   12c1e:	9b04      	ldr	r3, [sp, #16]
   12c20:	1b9b      	subs	r3, r3, r6
   12c22:	6123      	str	r3, [r4, #16]
   12c24:	9b07      	ldr	r3, [sp, #28]
   12c26:	aa09      	add	r2, sp, #36	; 0x24
   12c28:	9300      	str	r3, [sp, #0]
   12c2a:	0021      	movs	r1, r4
   12c2c:	9b06      	ldr	r3, [sp, #24]
   12c2e:	9805      	ldr	r0, [sp, #20]
   12c30:	f7ff fe82 	bl	12938 <_printf_common>
   12c34:	1c43      	adds	r3, r0, #1
   12c36:	d1b3      	bne.n	12ba0 <_printf_i+0x18c>
   12c38:	2001      	movs	r0, #1
   12c3a:	4240      	negs	r0, r0
   12c3c:	b00b      	add	sp, #44	; 0x2c
   12c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c40:	0001490c 	.word	0x0001490c
   12c44:	000148fb 	.word	0x000148fb

00012c48 <_putc_r>:
   12c48:	b570      	push	{r4, r5, r6, lr}
   12c4a:	0006      	movs	r6, r0
   12c4c:	000d      	movs	r5, r1
   12c4e:	0014      	movs	r4, r2
   12c50:	2800      	cmp	r0, #0
   12c52:	d004      	beq.n	12c5e <_putc_r+0x16>
   12c54:	6983      	ldr	r3, [r0, #24]
   12c56:	2b00      	cmp	r3, #0
   12c58:	d101      	bne.n	12c5e <_putc_r+0x16>
   12c5a:	f7ff fab1 	bl	121c0 <__sinit>
   12c5e:	4b12      	ldr	r3, [pc, #72]	; (12ca8 <_putc_r+0x60>)
   12c60:	429c      	cmp	r4, r3
   12c62:	d111      	bne.n	12c88 <_putc_r+0x40>
   12c64:	6874      	ldr	r4, [r6, #4]
   12c66:	68a3      	ldr	r3, [r4, #8]
   12c68:	3b01      	subs	r3, #1
   12c6a:	60a3      	str	r3, [r4, #8]
   12c6c:	2b00      	cmp	r3, #0
   12c6e:	da05      	bge.n	12c7c <_putc_r+0x34>
   12c70:	69a2      	ldr	r2, [r4, #24]
   12c72:	4293      	cmp	r3, r2
   12c74:	db12      	blt.n	12c9c <_putc_r+0x54>
   12c76:	b2eb      	uxtb	r3, r5
   12c78:	2b0a      	cmp	r3, #10
   12c7a:	d00f      	beq.n	12c9c <_putc_r+0x54>
   12c7c:	6823      	ldr	r3, [r4, #0]
   12c7e:	b2e8      	uxtb	r0, r5
   12c80:	1c5a      	adds	r2, r3, #1
   12c82:	6022      	str	r2, [r4, #0]
   12c84:	701d      	strb	r5, [r3, #0]
   12c86:	bd70      	pop	{r4, r5, r6, pc}
   12c88:	4b08      	ldr	r3, [pc, #32]	; (12cac <_putc_r+0x64>)
   12c8a:	429c      	cmp	r4, r3
   12c8c:	d101      	bne.n	12c92 <_putc_r+0x4a>
   12c8e:	68b4      	ldr	r4, [r6, #8]
   12c90:	e7e9      	b.n	12c66 <_putc_r+0x1e>
   12c92:	4b07      	ldr	r3, [pc, #28]	; (12cb0 <_putc_r+0x68>)
   12c94:	429c      	cmp	r4, r3
   12c96:	d1e6      	bne.n	12c66 <_putc_r+0x1e>
   12c98:	68f4      	ldr	r4, [r6, #12]
   12c9a:	e7e4      	b.n	12c66 <_putc_r+0x1e>
   12c9c:	0022      	movs	r2, r4
   12c9e:	0029      	movs	r1, r5
   12ca0:	0030      	movs	r0, r6
   12ca2:	f7ff f8c9 	bl	11e38 <__swbuf_r>
   12ca6:	e7ee      	b.n	12c86 <_putc_r+0x3e>
   12ca8:	000148a0 	.word	0x000148a0
   12cac:	000148c0 	.word	0x000148c0
   12cb0:	00014880 	.word	0x00014880

00012cb4 <__sread>:
   12cb4:	b570      	push	{r4, r5, r6, lr}
   12cb6:	000c      	movs	r4, r1
   12cb8:	250e      	movs	r5, #14
   12cba:	5f49      	ldrsh	r1, [r1, r5]
   12cbc:	f000 f8e2 	bl	12e84 <_read_r>
   12cc0:	2800      	cmp	r0, #0
   12cc2:	db03      	blt.n	12ccc <__sread+0x18>
   12cc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12cc6:	181b      	adds	r3, r3, r0
   12cc8:	6563      	str	r3, [r4, #84]	; 0x54
   12cca:	bd70      	pop	{r4, r5, r6, pc}
   12ccc:	89a3      	ldrh	r3, [r4, #12]
   12cce:	4a02      	ldr	r2, [pc, #8]	; (12cd8 <__sread+0x24>)
   12cd0:	4013      	ands	r3, r2
   12cd2:	81a3      	strh	r3, [r4, #12]
   12cd4:	e7f9      	b.n	12cca <__sread+0x16>
   12cd6:	46c0      	nop			; (mov r8, r8)
   12cd8:	ffffefff 	.word	0xffffefff

00012cdc <__swrite>:
   12cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12cde:	001f      	movs	r7, r3
   12ce0:	898b      	ldrh	r3, [r1, #12]
   12ce2:	0005      	movs	r5, r0
   12ce4:	000c      	movs	r4, r1
   12ce6:	0016      	movs	r6, r2
   12ce8:	05db      	lsls	r3, r3, #23
   12cea:	d505      	bpl.n	12cf8 <__swrite+0x1c>
   12cec:	230e      	movs	r3, #14
   12cee:	5ec9      	ldrsh	r1, [r1, r3]
   12cf0:	2200      	movs	r2, #0
   12cf2:	2302      	movs	r3, #2
   12cf4:	f000 f880 	bl	12df8 <_lseek_r>
   12cf8:	89a3      	ldrh	r3, [r4, #12]
   12cfa:	4a05      	ldr	r2, [pc, #20]	; (12d10 <__swrite+0x34>)
   12cfc:	0028      	movs	r0, r5
   12cfe:	4013      	ands	r3, r2
   12d00:	81a3      	strh	r3, [r4, #12]
   12d02:	0032      	movs	r2, r6
   12d04:	230e      	movs	r3, #14
   12d06:	5ee1      	ldrsh	r1, [r4, r3]
   12d08:	003b      	movs	r3, r7
   12d0a:	f000 f82b 	bl	12d64 <_write_r>
   12d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d10:	ffffefff 	.word	0xffffefff

00012d14 <__sseek>:
   12d14:	b570      	push	{r4, r5, r6, lr}
   12d16:	000c      	movs	r4, r1
   12d18:	250e      	movs	r5, #14
   12d1a:	5f49      	ldrsh	r1, [r1, r5]
   12d1c:	f000 f86c 	bl	12df8 <_lseek_r>
   12d20:	89a3      	ldrh	r3, [r4, #12]
   12d22:	1c42      	adds	r2, r0, #1
   12d24:	d103      	bne.n	12d2e <__sseek+0x1a>
   12d26:	4a05      	ldr	r2, [pc, #20]	; (12d3c <__sseek+0x28>)
   12d28:	4013      	ands	r3, r2
   12d2a:	81a3      	strh	r3, [r4, #12]
   12d2c:	bd70      	pop	{r4, r5, r6, pc}
   12d2e:	2280      	movs	r2, #128	; 0x80
   12d30:	0152      	lsls	r2, r2, #5
   12d32:	4313      	orrs	r3, r2
   12d34:	81a3      	strh	r3, [r4, #12]
   12d36:	6560      	str	r0, [r4, #84]	; 0x54
   12d38:	e7f8      	b.n	12d2c <__sseek+0x18>
   12d3a:	46c0      	nop			; (mov r8, r8)
   12d3c:	ffffefff 	.word	0xffffefff

00012d40 <__sclose>:
   12d40:	b510      	push	{r4, lr}
   12d42:	230e      	movs	r3, #14
   12d44:	5ec9      	ldrsh	r1, [r1, r3]
   12d46:	f000 f821 	bl	12d8c <_close_r>
   12d4a:	bd10      	pop	{r4, pc}

00012d4c <__ascii_wctomb>:
   12d4c:	1e0b      	subs	r3, r1, #0
   12d4e:	d004      	beq.n	12d5a <__ascii_wctomb+0xe>
   12d50:	2aff      	cmp	r2, #255	; 0xff
   12d52:	d904      	bls.n	12d5e <__ascii_wctomb+0x12>
   12d54:	238a      	movs	r3, #138	; 0x8a
   12d56:	6003      	str	r3, [r0, #0]
   12d58:	3b8b      	subs	r3, #139	; 0x8b
   12d5a:	0018      	movs	r0, r3
   12d5c:	4770      	bx	lr
   12d5e:	700a      	strb	r2, [r1, #0]
   12d60:	2301      	movs	r3, #1
   12d62:	e7fa      	b.n	12d5a <__ascii_wctomb+0xe>

00012d64 <_write_r>:
   12d64:	b570      	push	{r4, r5, r6, lr}
   12d66:	0005      	movs	r5, r0
   12d68:	0008      	movs	r0, r1
   12d6a:	0011      	movs	r1, r2
   12d6c:	2200      	movs	r2, #0
   12d6e:	4c06      	ldr	r4, [pc, #24]	; (12d88 <_write_r+0x24>)
   12d70:	6022      	str	r2, [r4, #0]
   12d72:	001a      	movs	r2, r3
   12d74:	f7fc fc64 	bl	f640 <_write>
   12d78:	1c43      	adds	r3, r0, #1
   12d7a:	d103      	bne.n	12d84 <_write_r+0x20>
   12d7c:	6823      	ldr	r3, [r4, #0]
   12d7e:	2b00      	cmp	r3, #0
   12d80:	d000      	beq.n	12d84 <_write_r+0x20>
   12d82:	602b      	str	r3, [r5, #0]
   12d84:	bd70      	pop	{r4, r5, r6, pc}
   12d86:	46c0      	nop			; (mov r8, r8)
   12d88:	20000fb8 	.word	0x20000fb8

00012d8c <_close_r>:
   12d8c:	2300      	movs	r3, #0
   12d8e:	b570      	push	{r4, r5, r6, lr}
   12d90:	4c06      	ldr	r4, [pc, #24]	; (12dac <_close_r+0x20>)
   12d92:	0005      	movs	r5, r0
   12d94:	0008      	movs	r0, r1
   12d96:	6023      	str	r3, [r4, #0]
   12d98:	f7fc fc8c 	bl	f6b4 <_close>
   12d9c:	1c43      	adds	r3, r0, #1
   12d9e:	d103      	bne.n	12da8 <_close_r+0x1c>
   12da0:	6823      	ldr	r3, [r4, #0]
   12da2:	2b00      	cmp	r3, #0
   12da4:	d000      	beq.n	12da8 <_close_r+0x1c>
   12da6:	602b      	str	r3, [r5, #0]
   12da8:	bd70      	pop	{r4, r5, r6, pc}
   12daa:	46c0      	nop			; (mov r8, r8)
   12dac:	20000fb8 	.word	0x20000fb8

00012db0 <_fstat_r>:
   12db0:	2300      	movs	r3, #0
   12db2:	b570      	push	{r4, r5, r6, lr}
   12db4:	4c06      	ldr	r4, [pc, #24]	; (12dd0 <_fstat_r+0x20>)
   12db6:	0005      	movs	r5, r0
   12db8:	0008      	movs	r0, r1
   12dba:	0011      	movs	r1, r2
   12dbc:	6023      	str	r3, [r4, #0]
   12dbe:	f7fc fc7c 	bl	f6ba <_fstat>
   12dc2:	1c43      	adds	r3, r0, #1
   12dc4:	d103      	bne.n	12dce <_fstat_r+0x1e>
   12dc6:	6823      	ldr	r3, [r4, #0]
   12dc8:	2b00      	cmp	r3, #0
   12dca:	d000      	beq.n	12dce <_fstat_r+0x1e>
   12dcc:	602b      	str	r3, [r5, #0]
   12dce:	bd70      	pop	{r4, r5, r6, pc}
   12dd0:	20000fb8 	.word	0x20000fb8

00012dd4 <_isatty_r>:
   12dd4:	2300      	movs	r3, #0
   12dd6:	b570      	push	{r4, r5, r6, lr}
   12dd8:	4c06      	ldr	r4, [pc, #24]	; (12df4 <_isatty_r+0x20>)
   12dda:	0005      	movs	r5, r0
   12ddc:	0008      	movs	r0, r1
   12dde:	6023      	str	r3, [r4, #0]
   12de0:	f7fc fc70 	bl	f6c4 <_isatty>
   12de4:	1c43      	adds	r3, r0, #1
   12de6:	d103      	bne.n	12df0 <_isatty_r+0x1c>
   12de8:	6823      	ldr	r3, [r4, #0]
   12dea:	2b00      	cmp	r3, #0
   12dec:	d000      	beq.n	12df0 <_isatty_r+0x1c>
   12dee:	602b      	str	r3, [r5, #0]
   12df0:	bd70      	pop	{r4, r5, r6, pc}
   12df2:	46c0      	nop			; (mov r8, r8)
   12df4:	20000fb8 	.word	0x20000fb8

00012df8 <_lseek_r>:
   12df8:	b570      	push	{r4, r5, r6, lr}
   12dfa:	0005      	movs	r5, r0
   12dfc:	0008      	movs	r0, r1
   12dfe:	0011      	movs	r1, r2
   12e00:	2200      	movs	r2, #0
   12e02:	4c06      	ldr	r4, [pc, #24]	; (12e1c <_lseek_r+0x24>)
   12e04:	6022      	str	r2, [r4, #0]
   12e06:	001a      	movs	r2, r3
   12e08:	f7fc fc5e 	bl	f6c8 <_lseek>
   12e0c:	1c43      	adds	r3, r0, #1
   12e0e:	d103      	bne.n	12e18 <_lseek_r+0x20>
   12e10:	6823      	ldr	r3, [r4, #0]
   12e12:	2b00      	cmp	r3, #0
   12e14:	d000      	beq.n	12e18 <_lseek_r+0x20>
   12e16:	602b      	str	r3, [r5, #0]
   12e18:	bd70      	pop	{r4, r5, r6, pc}
   12e1a:	46c0      	nop			; (mov r8, r8)
   12e1c:	20000fb8 	.word	0x20000fb8

00012e20 <memchr>:
   12e20:	b2c9      	uxtb	r1, r1
   12e22:	1882      	adds	r2, r0, r2
   12e24:	4290      	cmp	r0, r2
   12e26:	d101      	bne.n	12e2c <memchr+0xc>
   12e28:	2000      	movs	r0, #0
   12e2a:	4770      	bx	lr
   12e2c:	7803      	ldrb	r3, [r0, #0]
   12e2e:	428b      	cmp	r3, r1
   12e30:	d0fb      	beq.n	12e2a <memchr+0xa>
   12e32:	3001      	adds	r0, #1
   12e34:	e7f6      	b.n	12e24 <memchr+0x4>

00012e36 <_realloc_r>:
   12e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e38:	0007      	movs	r7, r0
   12e3a:	000d      	movs	r5, r1
   12e3c:	0016      	movs	r6, r2
   12e3e:	2900      	cmp	r1, #0
   12e40:	d105      	bne.n	12e4e <_realloc_r+0x18>
   12e42:	0011      	movs	r1, r2
   12e44:	f7fe fd1e 	bl	11884 <_malloc_r>
   12e48:	0004      	movs	r4, r0
   12e4a:	0020      	movs	r0, r4
   12e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e4e:	2a00      	cmp	r2, #0
   12e50:	d103      	bne.n	12e5a <_realloc_r+0x24>
   12e52:	f7fe fccd 	bl	117f0 <_free_r>
   12e56:	0034      	movs	r4, r6
   12e58:	e7f7      	b.n	12e4a <_realloc_r+0x14>
   12e5a:	f000 f827 	bl	12eac <_malloc_usable_size_r>
   12e5e:	002c      	movs	r4, r5
   12e60:	4286      	cmp	r6, r0
   12e62:	d9f2      	bls.n	12e4a <_realloc_r+0x14>
   12e64:	0031      	movs	r1, r6
   12e66:	0038      	movs	r0, r7
   12e68:	f7fe fd0c 	bl	11884 <_malloc_r>
   12e6c:	1e04      	subs	r4, r0, #0
   12e6e:	d0ec      	beq.n	12e4a <_realloc_r+0x14>
   12e70:	0029      	movs	r1, r5
   12e72:	0032      	movs	r2, r6
   12e74:	f7fe fc98 	bl	117a8 <memcpy>
   12e78:	0029      	movs	r1, r5
   12e7a:	0038      	movs	r0, r7
   12e7c:	f7fe fcb8 	bl	117f0 <_free_r>
   12e80:	e7e3      	b.n	12e4a <_realloc_r+0x14>
	...

00012e84 <_read_r>:
   12e84:	b570      	push	{r4, r5, r6, lr}
   12e86:	0005      	movs	r5, r0
   12e88:	0008      	movs	r0, r1
   12e8a:	0011      	movs	r1, r2
   12e8c:	2200      	movs	r2, #0
   12e8e:	4c06      	ldr	r4, [pc, #24]	; (12ea8 <_read_r+0x24>)
   12e90:	6022      	str	r2, [r4, #0]
   12e92:	001a      	movs	r2, r3
   12e94:	f7fc fbb2 	bl	f5fc <_read>
   12e98:	1c43      	adds	r3, r0, #1
   12e9a:	d103      	bne.n	12ea4 <_read_r+0x20>
   12e9c:	6823      	ldr	r3, [r4, #0]
   12e9e:	2b00      	cmp	r3, #0
   12ea0:	d000      	beq.n	12ea4 <_read_r+0x20>
   12ea2:	602b      	str	r3, [r5, #0]
   12ea4:	bd70      	pop	{r4, r5, r6, pc}
   12ea6:	46c0      	nop			; (mov r8, r8)
   12ea8:	20000fb8 	.word	0x20000fb8

00012eac <_malloc_usable_size_r>:
   12eac:	1f0b      	subs	r3, r1, #4
   12eae:	681b      	ldr	r3, [r3, #0]
   12eb0:	1f18      	subs	r0, r3, #4
   12eb2:	2b00      	cmp	r3, #0
   12eb4:	da01      	bge.n	12eba <_malloc_usable_size_r+0xe>
   12eb6:	580b      	ldr	r3, [r1, r0]
   12eb8:	18c0      	adds	r0, r0, r3
   12eba:	4770      	bx	lr
   12ebc:	00008fb6 	.word	0x00008fb6
   12ec0:	00008fb0 	.word	0x00008fb0
   12ec4:	00008faa 	.word	0x00008faa
   12ec8:	00008fa4 	.word	0x00008fa4
   12ecc:	00008fbc 	.word	0x00008fbc
   12ed0:	00008fc4 	.word	0x00008fc4
   12ed4:	00008fbc 	.word	0x00008fbc
   12ed8:	00008f9e 	.word	0x00008f9e
   12edc:	00008f98 	.word	0x00008f98
   12ee0:	00008fbc 	.word	0x00008fbc
   12ee4:	00008f92 	.word	0x00008f92
   12ee8:	00008f92 	.word	0x00008f92
   12eec:	00008f8c 	.word	0x00008f8c
   12ef0:	00008f86 	.word	0x00008f86
   12ef4:	00008fc4 	.word	0x00008fc4
   12ef8:	0000902e 	.word	0x0000902e
   12efc:	00009028 	.word	0x00009028
   12f00:	00009022 	.word	0x00009022
   12f04:	0000901c 	.word	0x0000901c
   12f08:	00009034 	.word	0x00009034
   12f0c:	0000903c 	.word	0x0000903c
   12f10:	00009034 	.word	0x00009034
   12f14:	00009016 	.word	0x00009016
   12f18:	00009010 	.word	0x00009010
   12f1c:	00009034 	.word	0x00009034
   12f20:	0000900a 	.word	0x0000900a
   12f24:	0000900a 	.word	0x0000900a
   12f28:	00009004 	.word	0x00009004
   12f2c:	00008ffe 	.word	0x00008ffe
   12f30:	0000903c 	.word	0x0000903c
   12f34:	000090a8 	.word	0x000090a8
   12f38:	000090a2 	.word	0x000090a2
   12f3c:	0000909c 	.word	0x0000909c
   12f40:	00009096 	.word	0x00009096
   12f44:	000090ae 	.word	0x000090ae
   12f48:	000090ae 	.word	0x000090ae
   12f4c:	000090ae 	.word	0x000090ae
   12f50:	00009090 	.word	0x00009090
   12f54:	0000908a 	.word	0x0000908a
   12f58:	000090ae 	.word	0x000090ae
   12f5c:	00009084 	.word	0x00009084
   12f60:	00009084 	.word	0x00009084
   12f64:	0000907e 	.word	0x0000907e
   12f68:	00009078 	.word	0x00009078
   12f6c:	33323130 	.word	0x33323130
   12f70:	37363534 	.word	0x37363534
   12f74:	62613938 	.word	0x62613938
   12f78:	66656463 	.word	0x66656463
   12f7c:	00000d31 	.word	0x00000d31
   12f80:	6e617254 	.word	0x6e617254
   12f84:	72656673 	.word	0x72656673
   12f88:	636e452d 	.word	0x636e452d
   12f8c:	6e69646f 	.word	0x6e69646f
   12f90:	00203a67 	.word	0x00203a67
   12f94:	6e6e6f43 	.word	0x6e6e6f43
   12f98:	69746365 	.word	0x69746365
   12f9c:	203a6e6f 	.word	0x203a6e6f
   12fa0:	00000000 	.word	0x00000000
   12fa4:	50545448 	.word	0x50545448
   12fa8:	0000002f 	.word	0x0000002f
   12fac:	20544547 	.word	0x20544547
   12fb0:	00000000 	.word	0x00000000
   12fb4:	54534f50 	.word	0x54534f50
   12fb8:	00000020 	.word	0x00000020
   12fbc:	454c4544 	.word	0x454c4544
   12fc0:	00204554 	.word	0x00204554
   12fc4:	20545550 	.word	0x20545550
   12fc8:	00000000 	.word	0x00000000
   12fcc:	4954504f 	.word	0x4954504f
   12fd0:	20534e4f 	.word	0x20534e4f
   12fd4:	00000000 	.word	0x00000000
   12fd8:	44414548 	.word	0x44414548
   12fdc:	00000020 	.word	0x00000020
   12fe0:	54544820 	.word	0x54544820
   12fe4:	2e312f50 	.word	0x2e312f50
   12fe8:	000a0d31 	.word	0x000a0d31
   12fec:	72657355 	.word	0x72657355
   12ff0:	6567412d 	.word	0x6567412d
   12ff4:	203a746e 	.word	0x203a746e
   12ff8:	00000000 	.word	0x00000000
   12ffc:	74736f48 	.word	0x74736f48
   13000:	0000203a 	.word	0x0000203a
   13004:	6e6e6f43 	.word	0x6e6e6f43
   13008:	69746365 	.word	0x69746365
   1300c:	203a6e6f 	.word	0x203a6e6f
   13010:	7065654b 	.word	0x7065654b
   13014:	696c412d 	.word	0x696c412d
   13018:	0a0d6576 	.word	0x0a0d6576
   1301c:	00000000 	.word	0x00000000
   13020:	65636341 	.word	0x65636341
   13024:	452d7470 	.word	0x452d7470
   13028:	646f636e 	.word	0x646f636e
   1302c:	3a676e69 	.word	0x3a676e69
   13030:	000a0d20 	.word	0x000a0d20
   13034:	65636341 	.word	0x65636341
   13038:	432d7470 	.word	0x432d7470
   1303c:	73726168 	.word	0x73726168
   13040:	203a7465 	.word	0x203a7465
   13044:	2d667475 	.word	0x2d667475
   13048:	000a0d38 	.word	0x000a0d38
   1304c:	6e617254 	.word	0x6e617254
   13050:	72656673 	.word	0x72656673
   13054:	636e452d 	.word	0x636e452d
   13058:	6e69646f 	.word	0x6e69646f
   1305c:	63203a67 	.word	0x63203a67
   13060:	6b6e7568 	.word	0x6b6e7568
   13064:	0a0d6465 	.word	0x0a0d6465
   13068:	00000000 	.word	0x00000000
   1306c:	00007525 	.word	0x00007525
   13070:	746e6f43 	.word	0x746e6f43
   13074:	2d746e65 	.word	0x2d746e65
   13078:	676e654c 	.word	0x676e654c
   1307c:	203a6874 	.word	0x203a6874
   13080:	00000000 	.word	0x00000000
   13084:	656d7461 	.word	0x656d7461
   13088:	2e312f6c 	.word	0x2e312f6c
   1308c:	00322e30 	.word	0x00322e30
   13090:	70747468 	.word	0x70747468
   13094:	002f2f3a 	.word	0x002f2f3a
   13098:	70747468 	.word	0x70747468
   1309c:	2f2f3a73 	.word	0x2f2f3a73
   130a0:	00000000 	.word	0x00000000
   130a4:	42002000 	.word	0x42002000
   130a8:	42002400 	.word	0x42002400
   130ac:	42002800 	.word	0x42002800
   130b0:	000093e2 	.word	0x000093e2
   130b4:	000093ba 	.word	0x000093ba
   130b8:	000093be 	.word	0x000093be
   130bc:	000093c2 	.word	0x000093c2
   130c0:	000093c6 	.word	0x000093c6
   130c4:	000093ca 	.word	0x000093ca
   130c8:	000093ce 	.word	0x000093ce
   130cc:	000093d2 	.word	0x000093d2
   130d0:	000093d6 	.word	0x000093d6
   130d4:	000093da 	.word	0x000093da
   130d8:	00000100 	.word	0x00000100
   130dc:	0000948a 	.word	0x0000948a
   130e0:	00009462 	.word	0x00009462
   130e4:	00009468 	.word	0x00009468
   130e8:	0000946e 	.word	0x0000946e
   130ec:	0000946e 	.word	0x0000946e
   130f0:	00009474 	.word	0x00009474
   130f4:	00009474 	.word	0x00009474
   130f8:	00009474 	.word	0x00009474
   130fc:	0000947a 	.word	0x0000947a
   13100:	00009480 	.word	0x00009480
   13104:	000098b6 	.word	0x000098b6
   13108:	00009892 	.word	0x00009892
   1310c:	00009898 	.word	0x00009898
   13110:	0000989e 	.word	0x0000989e
   13114:	0000989e 	.word	0x0000989e
   13118:	000098a4 	.word	0x000098a4
   1311c:	000098a4 	.word	0x000098a4
   13120:	000098a4 	.word	0x000098a4
   13124:	000098aa 	.word	0x000098aa
   13128:	000098b0 	.word	0x000098b0

0001312c <__FUNCTION__.14503>:
   1312c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   1313c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1314c:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   1315c:	6320746c 0000646d 0000a96c 0000a93c     lt cmd..l...<...
   1316c:	0000a934 0000a94c 0000a944 0000a964     4...L...D...d...
   1317c:	0000a954 0000a95c                       T...\...

00013184 <__FUNCTION__.13058>:
   13184:	5f666968 646e6573 00000000              hif_send....

00013190 <__FUNCTION__.13068>:
   13190:	5f666968 00727369                       hif_isr.

00013198 <__FUNCTION__.13074>:
   13198:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

000131a8 <__FUNCTION__.13086>:
   131a8:	5f666968 65636572 00657669              hif_receive.

000131b4 <__FUNCTION__.13102>:
   131b4:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   131c4:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   131d4:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   131e4:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   131f4:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   13204:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   13214:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   13224:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   13234:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
   13244:	6c616320 6361626c 7369206b 746f6e20      callback is not
   13254:	67657220 65747369 00646572 6b6f6353      registered.Scok
   13264:	63207465 626c6c61 206b6361 6e207369     et callback is n
   13274:	7220746f 73696765 65726574 00000064     ot registered...
   13284:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   13294:	20746f6e 69676572 72657473 00006465     not registered..
   132a4:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   132b4:	6e207369 7220746f 73696765 65726574     is not registere
   132c4:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
   132d4:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   132e4:	64657265 00000000 66696828 6e692029     ered....(hif) in
   132f4:	696c6176 72672064 2070756f 00004449     valid group ID..
   13304:	66696828 6f682029 61207473 64207070     (hif) host app d
   13314:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   13324:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   13334:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
   13344:	66696828 61462029 2065736c 65746e69     (hif) False inte
   13354:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   13364:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   13374:	7265746e 74707572 67657220 00000000     nterrupt reg....
   13384:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   13394:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   133a4:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   133b4:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   133c4:	696c6176 72612064 656d7567 0000746e     valid argument..
   133d4:	20505041 75716552 65747365 69532064     APP Requested Si
   133e4:	6920657a 616c2073 72656772 61687420     ze is larger tha
   133f4:	6874206e 65722065 65766963 75622064     n the recived bu
   13404:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   13414:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   13424:	65747365 64412064 73657264 65622073     ested Address be
   13434:	646e6f79 65687420 63657220 64657669     yond the recived
   13444:	66756220 20726566 72646461 20737365      buffer address 
   13454:	20646e61 676e656c 00006874 20705247     and length..GRp 
   13464:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
   13474:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
   13484:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
   13494:	6b617720 74207075 63206568 00706968      wakup the chip.

000134a4 <__FUNCTION__.13037>:
   134a4:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

000134b0 <__FUNCTION__.13066>:
   134b0:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

000134c0 <__FUNCTION__.13094>:
   134c0:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   134d0:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   134e0:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   134f0:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   13500:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   13510:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   13520:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   13530:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   13540:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   13550:	20706557 2079656b 65646e69 64252078     Wep key index %d
   13560:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   13570:	2079656b 676e656c 25206874 00000a64     key length %d...
   13580:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   13590:	656c2079 6874676e 00000000 65646e75     y length....unde
   135a0:	656e6966 65732064 79742063 00006570     fined sec type..
   135b0:	6d726946 65726177 72657620 3a202020     Firmware ver   :
   135c0:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
   135d0:	0a752520 00000000 6d726946 65726177      %u.....Firmware
   135e0:	69754220 2520646c 69542073 2520656d      Build %s Time %
   135f0:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
   13600:	69726420 20726576 20726576 7525203a      driver ver : %u
   13610:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
   13620:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
   13630:	333a3132 38333a33 00000000 20727041     21:33:38....Apr 
   13640:	32203332 00373130 76697244 62207265     23 2017.Driver b
   13650:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
   13660:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
   13670:	65562065 6f697372 0000006e              e Version...

0001367c <__FUNCTION__.12900>:
   1367c:	70696863 6b61775f 00000065              chip_wake...

00013688 <__FUNCTION__.12949>:
   13688:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   13698:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   136a8:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
   136b8:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
   136c8:	74206465 6177206f 2070756b 20656874     ed to wakup the 
   136d8:	70696863 00000000 76697244 65567265     chip....DriverVe
   136e8:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

000136f8 <__FUNCTION__.12947>:
   136f8:	645f6d6e 695f7672 0074696e              nm_drv_init.

00013704 <__FUNCTION__.12954>:
   13704:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   13714:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   13724:	6965645f 2074696e 6c696166 00000000     _deinit fail....
   13734:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   13744:	73616c66 69642068 6c626173 61662065     flash disable fa
   13754:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   13764:	6c696166 696e6920 75622074 00000073     fail init bus...
   13774:	6c696166 74206465 6e65206f 656c6261     failed to enable
   13784:	746e6920 75727265 2e737470 0000002e      interrupts.....
   13794:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   137a4:	6e69206c 62207469 00007375 70696843     l init bus..Chip
   137b4:	20444920 0a786c25 00000000 0000b968      ID %lx.....h...
   137c4:	0000b968 0000b998 0000b91a 0000b93e     h...........>...
   137d4:	0000b94c 0000b97e 0000b97e 0000b9c6     L...~...~.......
   137e4:	0000b8fe 0000ba00 0000ba00 0000ba00     ................
   137f4:	0000ba00 0000b95a cac4c9c3              ....Z.......

00013800 <__FUNCTION__.12253>:
   13800:	5f697073 00646d63                       spi_cmd.

00013808 <__FUNCTION__.12260>:
   13808:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00013818 <__FUNCTION__.12269>:
   13818:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00013824 <__FUNCTION__.12285>:
   13824:	5f697073 61746164 6165725f 00000064     spi_data_read...

00013834 <__FUNCTION__.12300>:
   13834:	5f697073 61746164 6972775f 00006574     spi_data_write..

00013844 <__FUNCTION__.12312>:
   13844:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00013854 <__FUNCTION__.12323>:
   13854:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00013864 <__FUNCTION__.12335>:
   13864:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00013874 <__FUNCTION__.12348>:
   13874:	735f6d6e 725f6970 00646165              nm_spi_read.

00013880 <__FUNCTION__.12369>:
   13880:	735f6d6e 695f6970 0074696e              nm_spi_init.

0001388c <crc7_syndrome_table>:
   1388c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1389c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   138ac:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   138bc:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   138cc:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   138dc:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   138ec:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   138fc:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1390c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1391c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1392c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1393c:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1394c:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1395c:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1396c:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1397c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   1398c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1399c:	6e692064 6e726574 72206c61 20646165     d internal read 
   139ac:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   139bc:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   139cc:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
   139dc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   139ec:	6e692064 6e726574 72206c61 20646165     d internal read 
   139fc:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
   13a0c:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   13a1c:	6e726574 77206c61 65746972 6f727020     ternal write pro
   13a2c:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
   13a3c:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   13a4c:	20646d63 64616572 69686320 64692070     cmd read chip id
   13a5c:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13a6c:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   13a7c:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   13a8c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13a9c:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   13aac:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   13abc:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   13acc:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   13adc:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   13aec:	00000000 65736552 6e612074 65722064     ....Reset and re
   13afc:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
   13b0c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13b1c:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   13b2c:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   13b3c:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   13b4c:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   13b5c:	69727720 62206574 6b636f6c 30252820      write block (%0
   13b6c:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   13b7c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   13b8c:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   13b9c:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   13bac:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13bbc:	61642064 62206174 6b636f6c 69727720     d data block wri
   13bcc:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   13bdc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13bec:	656c6961 61642064 62206174 6b636f6c     ailed data block
   13bfc:	63726320 69727720 202c6574 20737562      crc write, bus 
   13c0c:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
   13c1c:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   13c2c:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
   13c3c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   13c4c:	72206174 6f707365 2065736e 64616572     ta response read
   13c5c:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   13c6c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   13c7c:	206b636f 61746164 69727720 2e2e6574     ock data write..
   13c8c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13c9c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   13cac:	73756220 72726520 2e2e726f 0000002e      bus error......
   13cbc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13ccc:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   13cdc:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   13cec:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13cfc:	656c6961 61642064 72206174 6f707365     ailed data respo
   13d0c:	2065736e 64616572 7562202c 72652073     nse read, bus er
   13d1c:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   13d2c:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   13d3c:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   13d4c:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   13d5c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   13d6c:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   13d7c:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   13d8c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   13d9c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   13dac:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   13dbc:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   13dcc:	72202c64 20646165 20676572 38302528     d, read reg (%08
   13ddc:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   13dec:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   13dfc:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   13e0c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   13e1c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   13e2c:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   13e3c:	6e612074 65722064 20797274 25206425     t and retry %d %
   13e4c:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   13e5c:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   13e6c:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
   13e7c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13e8c:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   13e9c:	74697277 65722065 25282067 29783830     write reg (%08x)
   13eac:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
   13ebc:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   13ecc:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
   13edc:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
   13eec:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   13efc:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   13f0c:	4449206e 25203d20 000a0d64 0000d2fc     n ID = %d.......
   13f1c:	0000d2fc 0000d2d8 0000d2fc 0000d2d8     ................
   13f2c:	0000d2be 0000d2be 0000d2fc 0000d2fc     ................
   13f3c:	0000d2fc 0000d2fc 0000d2fc 0000d2fc     ................
   13f4c:	0000d2fc 0000d2fc 0000d2fc 0000d2fc     ................
   13f5c:	0000d2fc 0000d2fc 0000d2fc 0000d2fc     ................
   13f6c:	0000d2fc 0000d2fc 0000d2fc 0000d2fc     ................
   13f7c:	0000d2fc 0000d2fc 0000d2fc 0000d2fc     ................
   13f8c:	0000d2fc 0000d2fc 0000d2fc 0000d2fc     ................
   13f9c:	0000d2fc 0000d2fc 0000d2fc 0000d2fc     ................
   13fac:	0000d2fc 0000d2fc 0000d2fc 0000d2fc     ................
   13fbc:	0000d2fc 0000d2fc 0000d2fc 0000d2fc     ................
   13fcc:	0000d2fc 0000d2fc 0000d2fc 0000d2fc     ................
   13fdc:	0000d2fc 0000d2fc 0000d2fc 0000d2fc     ................
   13fec:	0000d2fc 0000d2fc 0000d2fc 0000d2fc     ................
   13ffc:	0000d2fc 0000d2fc 0000d2fc 0000d2fc     ................
   1400c:	0000d2fc 0000d2fc 0000d2fc 0000d2d8     ................
   1401c:	0000d2d8 0000d2e0 0000d2e0 0000d2e0     ................
   1402c:	0000d2e0 42000800 42000c00 42001000     .......B...B...B
   1403c:	42001400 42001800 42001c00 0000e72a     ...B...B...B*...
   1404c:	0000e726 0000e726 0000e788 0000e788     &...&...........
   1405c:	0000e73e 0000e730 0000e744 0000e776     >...0...D...v...
   1406c:	0000e948 0000e928 0000e928 0000e9b4     H...(...(.......
   1407c:	0000e93a 0000e956 0000e92c 0000e964     :...V...,...d...
   1408c:	0000e9a4                                ....

00014090 <_tcc_apbcmasks>:
   14090:	00000100 00000200 00000400              ............

0001409c <_tcc_cc_nums>:
   1409c:	00020204                                ....

000140a0 <_tcc_gclk_ids>:
   140a0:	001b1a1a                                ....

000140a4 <_tcc_maxs>:
   140a4:	00ffffff 00ffffff 0000ffff              ............

000140b0 <_tcc_ow_nums>:
   140b0:	00020408                                ....

000140b4 <_tcc_intflag>:
   140b4:	00000001 00000002 00000004 00000008     ................
   140c4:	00001000 00002000 00004000 00008000     ..... ...@......
   140d4:	00010000 00020000 00040000 00080000     ................

000140e4 <tcc_interrupt_vectors.12434>:
   140e4:	0011100f 0000fc16 0000fc24 0000fc36     ........$...6...
   140f4:	0000fc96 0000fdf0 70747468 696c635f     ........http_cli
   14104:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   14114:	63205054 6e65696c 6f732074 74656b63     TP client socket
   14124:	6e6f6320 7463656e 0d2e6465 00000000      connected......
   14134:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   14144:	6b636162 6572203a 73657571 6f632074     back: request co
   14154:	656c706d 2e646574 0000000d 70747468     mpleted.....http
   14164:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   14174:	6572203a 76696563 72206465 6f707365     : received respo
   14184:	2065736e 64207525 20617461 657a6973     nse %u data size
   14194:	0d752520 0000000a 6c6c6143 6b636162      %u.....Callback
   141a4:	5243203a 6f642043 6f6c6e77 2e2e6461     : CRC download..
   141b4:	2e2e2e2e 0000000d 65636552 64657669     ........Received
   141c4:	0d782520 0000000a 70747468 696c635f      %x.....http_cli
   141d4:	5f746e65 6c6c6163 6b636162 5548435f     ent_callback_CHU
   141e4:	44454b4e 54414420 72203a41 69656365     NKED DATA: recei
   141f4:	20646576 70736572 65736e6f 74616420     ved response dat
   14204:	69732061 2520657a 000a0d75 73726946     a size %u...Firs
   14214:	6c622074 206b636f 676e656c 25206874     t block length %
   14224:	52432064 25203a43 000a0d75 636f6c42     d CRC: %u...Bloc
   14234:	656c206b 6874676e 20642520 3a435243     k length %d CRC:
   14244:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   14254:	5f746e65 6c6c6163 6b636162 6964203a     ent_callback: di
   14264:	6e6f6373 7463656e 206e6f69 73616572     sconnection reas
   14274:	253a6e6f 000a0d64 5454514d 696e6920     on:%d...MQTT ini
   14284:	6c616974 74617a69 206e6f69 6c696166     tialization fail
   14294:	202e6465 6f727245 6f632072 69206564     ed. Error code i
   142a4:	25282073 0a0d2964 00000000 5454514d     s (%d)......MQTT
   142b4:	67657220 65747369 61632072 61626c6c      register callba
   142c4:	66206b63 656c6961 45202e64 726f7272     ck failed. Error
   142d4:	646f6320 73692065 64252820 000a0d29      code is (%d)...
   142e4:	72657355 25203a20 000a0d73 73736150     User : %s...Pass
   142f4:	64726f77 25203a20 000a0d73 74616863     word : %s...chat
   14304:	00000000 69706f54 203a2063 0a0d7325     ....Topic : %s..
   14314:	00000000 6e69616d 326d203a 69775f6d     ....main: m2m_wi
   14324:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
   14334:	2821726f 0d296425 0000000a 00006425     or!(%d).....%d..
   14344:	736e6573 0000726f 2e302e31 00000030     sensor..1.0.0...
   14354:	73726576 726e6f69 6f646165 00007475     versionreadout..
   14364:	6e69616d 326d203a 69775f6d 645f6966     main: m2m_wifi_d
   14374:	696e6965 61632074 65206c6c 726f7272     einit call error
   14384:	64252821 000a0d29 666e6f63 72756769     !(%d)...configur
   14394:	74685f65 635f7074 6e65696c 48203a74     e_http_client: H
   143a4:	20505454 65696c63 6920746e 6974696e     TTP client initi
   143b4:	7a696c61 6f697461 6166206e 64656c69     alization failed
   143c4:	72282021 25207365 0a0d2964 00000000     ! (res %d)......
   143d4:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   143e4:	2074696e 6c6c6163 72726520 2021726f     nit call error! 
   143f4:	73657228 29642520 00000a0d 76727553     (res %d)....Surv
   14404:	64657669 74746820 6c632070 746e6569     ived http client
   14414:	74657320 000d7075 63657845 6e697475      setup..Executin
   14424:	6d692067 3a656761 2c642520 204c4420     g image: %d, DL 
   14434:	203a6f74 0a0d6425 00000000 6e776f64     to: %d......down
   14444:	64616f6c 7269665f 7261776d 63203a65     load_firmware: c
   14454:	656e6e6f 6e697463 6f742067 46695720     onnecting to WiF
   14464:	50412069 2e732520 0a0d2e2e 00000000     i AP %s.........
   14474:	6e776f64 64616f6c 7269665f 7261776d     download_firmwar
   14484:	64203a65 2e656e6f 0000000d 636c6143     e: done.....Calc
   14494:	74616c75 43206465 203a4352 0a0d7825     ulated CRC: %x..
   144a4:	00000000 614d0d0a 203a6e69 656e6f44     ......Main: Done
   144b4:	776f6420 616f6c6e 676e6964 72696620      downloading fir
   144c4:	7261776d 6e612065 52432064 000d0a43     mware and CRC...
   144d4:	614d0d0a 203a6e69 20435243 4354414d     ..Main: CRC MATC
   144e4:	21444548 61747320 6e697472 69662067     HED! starting fi
   144f4:	61776d72 75206572 61726770 202e6564     rmware upgrade. 
   14504:	00000d0a 4d200d0a 3a6e6961 43524320     ...... Main: CRC
   14514:	65684320 46206b63 216c6961 00000d0a      Check Fail!....

00014524 <main_mqtt_broker>:
   14524:	2e31316d 756f6c63 74716d64 6f632e74     m11.cloudmqtt.co
   14534:	0000006d 6e6e6f43 20746365 6c696166     m...Connect fail
   14544:	206f7420 76726573 25287265 20212973      to server(%s)! 
   14554:	72746572 74692079 74756120 74616d6f     retry it automat
   14564:	6c616369 0d2e796c 0000000a 75746361     ically......actu
   14574:	726f7461 00000000 72677075 00656461     ator....upgrade.
   14584:	73726576 006e6f69 70657250 74617261     version.Preparat
   14594:	206e6f69 7420666f 63206568 20746168     ion of the chat 
   145a4:	20736168 6e656562 6d6f6320 74656c70     has been complet
   145b4:	0d2e6465 00000000 5454514d 6f726220     ed......MQTT bro
   145c4:	2072656b 6c636564 20656e69 72756f79     ker decline your
   145d4:	63636120 21737365 72726520 6320726f      access! error c
   145e4:	2065646f 0a0d6425 00000000 3e207325     ode %d......%s >
   145f4:	0000203e 65757274 00000000 72677075     > ..true....upgr
   14604:	20656461 6d726966 65726177 00000000     ade firmware....
   14614:	6c706572 00000079 5454514d 73696420     reply...MQTT dis
   14624:	6e6e6f63 65746365 00000d64 6f736572     connected...reso
   14634:	5f65766c 203a6263 49207325 64612050     lve_cb: %s IP ad
   14644:	73657264 73692073 2e642520 252e6425     dress is %d.%d.%
   14654:	64252e64 0a0d0a0d 00000000 72617473     d.%d........star
   14664:	6f645f74 6f6c6e77 203a6461 462d6957     t_download: Wi-F
   14674:	73692069 746f6e20 6e6f6320 7463656e     i is not connect
   14684:	0d2e6465 00000000 72617473 6f645f74     ed......start_do
   14694:	6f6c6e77 203a6461 75716572 20747365     wnload: request 
   146a4:	73207369 20746e65 65726c61 2e796461     is sent already.
   146b4:	0000000d 72617473 6f645f74 6f6c6e77     ....start_downlo
   146c4:	203a6461 6e6e7572 20676e69 6e776f64     ad: running down
   146d4:	64616f6c 726c6120 79646165 00000d2e     load already....
   146e4:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   146f4:	646e6573 20676e69 50545448 71657220     sending HTTP req
   14704:	74736575 0d2e2e2e 00000000 70747468     uest........http
   14714:	2f2f3a73 2e777777 73616573 6570752e     s://www.seas.upe
   14724:	652e6e6e 7e2f7564 69707372 2f726563     nn.edu/~rspicer/
   14734:	622e5746 00006e69 72617473 6f645f74     FW.bin..start_do
   14744:	6f6c6e77 43206461 203a4352 646e6573     wnload CRC: send
   14754:	20676e69 50545448 71657220 74736575     ing HTTP request
   14764:	0d2e2e2e 00000000 70747468 2f2f3a73     ........https://
   14774:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   14784:	7e2f7564 69707372 2f726563 435f5746     du/~rspicer/FW_C
   14794:	622e4352 00006e69 462d6957 6f632069     RC.bin..Wi-Fi co
   147a4:	63656e6e 0d646574 00000000 462d6957     nnected.....Wi-F
   147b4:	69642069 6e6f6373 7463656e 000d6465     i disconnected..
   147c4:	636c6557 48656d6f 00006c61 732d7068     WelcomeHal..hp-s
   147d4:	70757465 0000312d 462d6957 50492069     etup-1..Wi-Fi IP
   147e4:	20736920 252e7525 75252e75 0d75252e      is %u.%u.%u.%u.
   147f4:	0000000a 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
   14804:	4649575f 4f435f49 43454e4e 0d444554     _WIFI_CONNECTED.
   14814:	00000000 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
   14824:	4649575f 49445f49 4e4f4353 5443454e     _WIFI_DISCONNECT
   14834:	000d4445 69666977 3a62635f 20504920     ED..wifi_cb: IP 
   14844:	72646461 20737365 25207369 75252e75     address is %u.%u
   14854:	2e75252e 0a0d7525 00000000 70696843     .%u.%u......Chip
   14864:	64696420 7720746e 20656b61 0000000d      didnt wake ....
   14874:	7349514d 00007064                       MQIsdp..

0001487c <_global_impure_ptr>:
   1487c:	20000024                                $.. 

00014880 <__sf_fake_stderr>:
	...

000148a0 <__sf_fake_stdin>:
	...

000148c0 <__sf_fake_stdout>:
	...
   148e0:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   148f0:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   14900:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   14910:	37363534 62613938 66656463 20200000              456789abcdef.

0001491d <_ctype_>:
   1491d:	20202000 20202020 28282020 20282828     .         ((((( 
   1492d:	20202020 20202020 20202020 20202020                     
   1493d:	10108820 10101010 10101010 10101010      ...............
   1494d:	04040410 04040404 10040404 10101010     ................
   1495d:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1496d:	01010101 01010101 01010101 10101010     ................
   1497d:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1498d:	02020202 02020202 02020202 10101010     ................
   1499d:	00000020 00000000 00000000 00000000      ...............
	...

00014a20 <_init>:
   14a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a22:	46c0      	nop			; (mov r8, r8)
   14a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14a26:	bc08      	pop	{r3}
   14a28:	469e      	mov	lr, r3
   14a2a:	4770      	bx	lr

00014a2c <__init_array_start>:
   14a2c:	000080dd 	.word	0x000080dd

00014a30 <_fini>:
   14a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a32:	46c0      	nop			; (mov r8, r8)
   14a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14a36:	bc08      	pop	{r3}
   14a38:	469e      	mov	lr, r3
   14a3a:	4770      	bx	lr

00014a3c <__fini_array_start>:
   14a3c:	000080b5 	.word	0x000080b5
