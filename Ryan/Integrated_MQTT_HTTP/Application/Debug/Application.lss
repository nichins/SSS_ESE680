
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cc3c  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000084  20000000  00014c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d7c  20000084  00014cc0  00020084  2**2
                  ALLOC
  3 .stack        00002000  20000e00  00015a3c  00020084  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  6 .debug_info   00054240  00000000  00000000  00020176  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006fb0  00000000  00000000  000743b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001858d  00000000  00000000  0007b366  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f68  00000000  00000000  000938f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000016d0  00000000  00000000  0009485b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022bf0  00000000  00000000  00095f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001e76f  00000000  00000000  000b8b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00096916  00000000  00000000  000d728a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000035ac  00000000  00000000  0016dba0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <_sfixed>:
    8000:	20002e00 	.word	0x20002e00
    8004:	0000e095 	.word	0x0000e095
    8008:	0000e091 	.word	0x0000e091
    800c:	0000e091 	.word	0x0000e091
	...
    802c:	0000e091 	.word	0x0000e091
	...
    8038:	0000e091 	.word	0x0000e091
    803c:	0000e091 	.word	0x0000e091
    8040:	0000e091 	.word	0x0000e091
    8044:	0000e091 	.word	0x0000e091
    8048:	0000e091 	.word	0x0000e091
    804c:	0000e091 	.word	0x0000e091
    8050:	0000be45 	.word	0x0000be45
    8054:	0000e091 	.word	0x0000e091
    8058:	0000e091 	.word	0x0000e091
    805c:	0000e091 	.word	0x0000e091
    8060:	0000e091 	.word	0x0000e091
    8064:	0000c669 	.word	0x0000c669
    8068:	0000c679 	.word	0x0000c679
    806c:	0000c689 	.word	0x0000c689
    8070:	0000c699 	.word	0x0000c699
    8074:	0000c6a9 	.word	0x0000c6a9
    8078:	0000c6b9 	.word	0x0000c6b9
    807c:	0000e061 	.word	0x0000e061
    8080:	0000e071 	.word	0x0000e071
    8084:	0000e081 	.word	0x0000e081
    8088:	0000e091 	.word	0x0000e091
    808c:	0000e091 	.word	0x0000e091
    8090:	0000e091 	.word	0x0000e091
	...
    809c:	0000e091 	.word	0x0000e091
    80a0:	0000e091 	.word	0x0000e091
    80a4:	0000e091 	.word	0x0000e091
    80a8:	0000e091 	.word	0x0000e091
    80ac:	0000e091 	.word	0x0000e091
    80b0:	00000000 	.word	0x00000000

000080b4 <__do_global_dtors_aux>:
    80b4:	b510      	push	{r4, lr}
    80b6:	4c06      	ldr	r4, [pc, #24]	; (80d0 <__do_global_dtors_aux+0x1c>)
    80b8:	7823      	ldrb	r3, [r4, #0]
    80ba:	2b00      	cmp	r3, #0
    80bc:	d107      	bne.n	80ce <__do_global_dtors_aux+0x1a>
    80be:	4b05      	ldr	r3, [pc, #20]	; (80d4 <__do_global_dtors_aux+0x20>)
    80c0:	2b00      	cmp	r3, #0
    80c2:	d002      	beq.n	80ca <__do_global_dtors_aux+0x16>
    80c4:	4804      	ldr	r0, [pc, #16]	; (80d8 <__do_global_dtors_aux+0x24>)
    80c6:	e000      	b.n	80ca <__do_global_dtors_aux+0x16>
    80c8:	bf00      	nop
    80ca:	2301      	movs	r3, #1
    80cc:	7023      	strb	r3, [r4, #0]
    80ce:	bd10      	pop	{r4, pc}
    80d0:	20000084 	.word	0x20000084
    80d4:	00000000 	.word	0x00000000
    80d8:	00014c3c 	.word	0x00014c3c

000080dc <frame_dummy>:
    80dc:	4b08      	ldr	r3, [pc, #32]	; (8100 <frame_dummy+0x24>)
    80de:	b510      	push	{r4, lr}
    80e0:	2b00      	cmp	r3, #0
    80e2:	d003      	beq.n	80ec <frame_dummy+0x10>
    80e4:	4907      	ldr	r1, [pc, #28]	; (8104 <frame_dummy+0x28>)
    80e6:	4808      	ldr	r0, [pc, #32]	; (8108 <frame_dummy+0x2c>)
    80e8:	e000      	b.n	80ec <frame_dummy+0x10>
    80ea:	bf00      	nop
    80ec:	4807      	ldr	r0, [pc, #28]	; (810c <frame_dummy+0x30>)
    80ee:	6803      	ldr	r3, [r0, #0]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d100      	bne.n	80f6 <frame_dummy+0x1a>
    80f4:	bd10      	pop	{r4, pc}
    80f6:	4b06      	ldr	r3, [pc, #24]	; (8110 <frame_dummy+0x34>)
    80f8:	2b00      	cmp	r3, #0
    80fa:	d0fb      	beq.n	80f4 <frame_dummy+0x18>
    80fc:	4798      	blx	r3
    80fe:	e7f9      	b.n	80f4 <frame_dummy+0x18>
    8100:	00000000 	.word	0x00000000
    8104:	20000088 	.word	0x20000088
    8108:	00014c3c 	.word	0x00014c3c
    810c:	00014c3c 	.word	0x00014c3c
    8110:	00000000 	.word	0x00000000

00008114 <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    8114:	b530      	push	{r4, r5, lr}
    8116:	b085      	sub	sp, #20
    8118:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    811a:	2300      	movs	r3, #0
    811c:	9303      	str	r3, [sp, #12]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    811e:	6805      	ldr	r5, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    8120:	4b2f      	ldr	r3, [pc, #188]	; (81e0 <at25dfx_chip_check_presence+0xcc>)
    8122:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
    8124:	792b      	ldrb	r3, [r5, #4]
    8126:	2b00      	cmp	r3, #0
    8128:	d155      	bne.n	81d6 <at25dfx_chip_check_presence+0xc2>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
    812a:	3301      	adds	r3, #1
    812c:	712b      	strb	r3, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    812e:	4b2d      	ldr	r3, [pc, #180]	; (81e4 <at25dfx_chip_check_presence+0xd0>)
    8130:	4798      	blx	r3
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    8132:	229f      	movs	r2, #159	; 0x9f
    8134:	ab01      	add	r3, sp, #4
    8136:	701a      	strb	r2, [r3, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    8138:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    813a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    813c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    813e:	2900      	cmp	r1, #0
    8140:	d104      	bne.n	814c <at25dfx_chip_check_presence+0x38>
		return &(ports[port_index]->Group[group_index]);
    8142:	095a      	lsrs	r2, r3, #5
    8144:	01d2      	lsls	r2, r2, #7
    8146:	4928      	ldr	r1, [pc, #160]	; (81e8 <at25dfx_chip_check_presence+0xd4>)
    8148:	468c      	mov	ip, r1
    814a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    814c:	211f      	movs	r1, #31
    814e:	400b      	ands	r3, r1
    8150:	391e      	subs	r1, #30
    8152:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8154:	6151      	str	r1, [r2, #20]
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    8156:	2201      	movs	r2, #1
    8158:	a901      	add	r1, sp, #4
    815a:	6820      	ldr	r0, [r4, #0]
    815c:	4b23      	ldr	r3, [pc, #140]	; (81ec <at25dfx_chip_check_presence+0xd8>)
    815e:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    8160:	2300      	movs	r3, #0
    8162:	2203      	movs	r2, #3
    8164:	a903      	add	r1, sp, #12
    8166:	6820      	ldr	r0, [r4, #0]
    8168:	4d21      	ldr	r5, [pc, #132]	; (81f0 <at25dfx_chip_check_presence+0xdc>)
    816a:	47a8      	blx	r5
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    816c:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    816e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8170:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8172:	2900      	cmp	r1, #0
    8174:	d104      	bne.n	8180 <at25dfx_chip_check_presence+0x6c>
		return &(ports[port_index]->Group[group_index]);
    8176:	095a      	lsrs	r2, r3, #5
    8178:	01d2      	lsls	r2, r2, #7
    817a:	491b      	ldr	r1, [pc, #108]	; (81e8 <at25dfx_chip_check_presence+0xd4>)
    817c:	468c      	mov	ip, r1
    817e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8180:	211f      	movs	r1, #31
    8182:	400b      	ands	r3, r1
    8184:	391e      	subs	r1, #30
    8186:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    8188:	6191      	str	r1, [r2, #24]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
    818a:	2300      	movs	r3, #0
    818c:	6822      	ldr	r2, [r4, #0]
    818e:	7113      	strb	r3, [r2, #4]
 *
 * \return SerialFlash device ID.
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
	switch (type) {
    8190:	7923      	ldrb	r3, [r4, #4]
    8192:	2b09      	cmp	r3, #9
    8194:	d815      	bhi.n	81c2 <at25dfx_chip_check_presence+0xae>
    8196:	009b      	lsls	r3, r3, #2
    8198:	4a16      	ldr	r2, [pc, #88]	; (81f4 <at25dfx_chip_check_presence+0xe0>)
    819a:	58d3      	ldr	r3, [r2, r3]
    819c:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 0x00651f;

	case AT25DFX_021:
		return 0x00431f;
    819e:	4b16      	ldr	r3, [pc, #88]	; (81f8 <at25dfx_chip_check_presence+0xe4>)
    81a0:	e012      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>

	case AT25DFX_041A:
		return 0x01441f;
    81a2:	4b16      	ldr	r3, [pc, #88]	; (81fc <at25dfx_chip_check_presence+0xe8>)
    81a4:	e010      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>

	case AT25DFX_081:
		return 0x02451f;
    81a6:	4b16      	ldr	r3, [pc, #88]	; (8200 <at25dfx_chip_check_presence+0xec>)
    81a8:	e00e      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>

	case AT25DFX_081A:
		return 0x01451f;
    81aa:	4b16      	ldr	r3, [pc, #88]	; (8204 <at25dfx_chip_check_presence+0xf0>)
    81ac:	e00c      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>

	case AT25DFX_161:
		return 0x02461f;
    81ae:	4b16      	ldr	r3, [pc, #88]	; (8208 <at25dfx_chip_check_presence+0xf4>)
    81b0:	e00a      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>

	case AT25DFX_L161:
		return 0x03461f;
    81b2:	4b16      	ldr	r3, [pc, #88]	; (820c <at25dfx_chip_check_presence+0xf8>)
    81b4:	e008      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>

	case AT25DFX_Q161:
		return 0x00861f;
    81b6:	4b16      	ldr	r3, [pc, #88]	; (8210 <at25dfx_chip_check_presence+0xfc>)
    81b8:	e006      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>

	case AT25DFX_321A:
		return 0x01471f;
    81ba:	4b16      	ldr	r3, [pc, #88]	; (8214 <at25dfx_chip_check_presence+0x100>)
    81bc:	e004      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>

	case AT25DFX_641:
		return 0x00481f;
    81be:	4b16      	ldr	r3, [pc, #88]	; (8218 <at25dfx_chip_check_presence+0x104>)
    81c0:	e002      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>

	default:
		Assert(false);
		return 0;
    81c2:	2300      	movs	r3, #0
    81c4:	e000      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
	switch (type) {
	case AT25DFX_512B:
		return 0x00651f;
    81c6:	4b15      	ldr	r3, [pc, #84]	; (821c <at25dfx_chip_check_presence+0x108>)

	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	if (id == _at25dfx_get_device_id(chip->type)) {
    81c8:	9a03      	ldr	r2, [sp, #12]
    81ca:	429a      	cmp	r2, r3
    81cc:	d001      	beq.n	81d2 <at25dfx_chip_check_presence+0xbe>
		return STATUS_OK;
	} else {
		return STATUS_ERR_NOT_FOUND;
    81ce:	2014      	movs	r0, #20
    81d0:	e004      	b.n	81dc <at25dfx_chip_check_presence+0xc8>
	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	if (id == _at25dfx_get_device_id(chip->type)) {
		return STATUS_OK;
    81d2:	2000      	movs	r0, #0
    81d4:	e002      	b.n	81dc <at25dfx_chip_check_presence+0xc8>
    81d6:	4b03      	ldr	r3, [pc, #12]	; (81e4 <at25dfx_chip_check_presence+0xd0>)
    81d8:	4798      	blx	r3
	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
    81da:	2005      	movs	r0, #5
	if (id == _at25dfx_get_device_id(chip->type)) {
		return STATUS_OK;
	} else {
		return STATUS_ERR_NOT_FOUND;
	}
}
    81dc:	b005      	add	sp, #20
    81de:	bd30      	pop	{r4, r5, pc}
    81e0:	0000bd69 	.word	0x0000bd69
    81e4:	0000bda9 	.word	0x0000bda9
    81e8:	41004400 	.word	0x41004400
    81ec:	0000ca35 	.word	0x0000ca35
    81f0:	0000c895 	.word	0x0000c895
    81f4:	00012df0 	.word	0x00012df0
    81f8:	0000431f 	.word	0x0000431f
    81fc:	0001441f 	.word	0x0001441f
    8200:	0002451f 	.word	0x0002451f
    8204:	0001451f 	.word	0x0001451f
    8208:	0002461f 	.word	0x0002461f
    820c:	0003461f 	.word	0x0003461f
    8210:	0000861f 	.word	0x0000861f
    8214:	0001471f 	.word	0x0001471f
    8218:	0000481f 	.word	0x0000481f
    821c:	0000651f 	.word	0x0000651f

00008220 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    8220:	b5f0      	push	{r4, r5, r6, r7, lr}
    8222:	465f      	mov	r7, fp
    8224:	4656      	mov	r6, sl
    8226:	464d      	mov	r5, r9
    8228:	4644      	mov	r4, r8
    822a:	b4f0      	push	{r4, r5, r6, r7}
    822c:	b085      	sub	sp, #20
    822e:	0005      	movs	r5, r0
    8230:	000e      	movs	r6, r1
    8232:	9200      	str	r2, [sp, #0]
    8234:	001f      	movs	r7, r3

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    8236:	185a      	adds	r2, r3, r1
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
	switch (type) {
    8238:	7903      	ldrb	r3, [r0, #4]
    823a:	2b09      	cmp	r3, #9
    823c:	d815      	bhi.n	826a <at25dfx_chip_write_buffer+0x4a>
    823e:	009b      	lsls	r3, r3, #2
    8240:	49cd      	ldr	r1, [pc, #820]	; (8578 <at25dfx_chip_write_buffer+0x358>)
    8242:	58cb      	ldr	r3, [r1, r3]
    8244:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;

	case AT25DFX_021:
		return 256 * 1024UL;
    8246:	2380      	movs	r3, #128	; 0x80
    8248:	02db      	lsls	r3, r3, #11
    824a:	e012      	b.n	8272 <at25dfx_chip_write_buffer+0x52>

	case AT25DFX_041A:
		return 512 * 1024UL;
    824c:	2380      	movs	r3, #128	; 0x80
    824e:	031b      	lsls	r3, r3, #12
    8250:	e00f      	b.n	8272 <at25dfx_chip_write_buffer+0x52>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
    8252:	2380      	movs	r3, #128	; 0x80
    8254:	035b      	lsls	r3, r3, #13
    8256:	e00c      	b.n	8272 <at25dfx_chip_write_buffer+0x52>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
    8258:	2380      	movs	r3, #128	; 0x80
    825a:	039b      	lsls	r3, r3, #14
    825c:	e009      	b.n	8272 <at25dfx_chip_write_buffer+0x52>

	case AT25DFX_321A:
		return 4096 * 1024UL;
    825e:	2380      	movs	r3, #128	; 0x80
    8260:	03db      	lsls	r3, r3, #15
    8262:	e006      	b.n	8272 <at25dfx_chip_write_buffer+0x52>

	case AT25DFX_641:
		return 8192 * 1024UL;
    8264:	2380      	movs	r3, #128	; 0x80
    8266:	041b      	lsls	r3, r3, #16
    8268:	e003      	b.n	8272 <at25dfx_chip_write_buffer+0x52>

	default:
		Assert(false);
		return 0;
    826a:	2300      	movs	r3, #0
    826c:	e001      	b.n	8272 <at25dfx_chip_write_buffer+0x52>
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
	switch (type) {
	case AT25DFX_512B:
		return 64 * 1024UL;
    826e:	2380      	movs	r3, #128	; 0x80
    8270:	025b      	lsls	r3, r3, #9
	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
    8272:	2017      	movs	r0, #23

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    8274:	429a      	cmp	r2, r3
    8276:	d900      	bls.n	827a <at25dfx_chip_write_buffer+0x5a>
    8278:	e1dd      	b.n	8636 <at25dfx_chip_write_buffer+0x416>
		return STATUS_ERR_INVALID_ARG;
	}

	status = _at25dfx_spi_lock(chip->spi);
    827a:	682c      	ldr	r4, [r5, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    827c:	4bbf      	ldr	r3, [pc, #764]	; (857c <at25dfx_chip_write_buffer+0x35c>)
    827e:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
    8280:	7923      	ldrb	r3, [r4, #4]
    8282:	2b00      	cmp	r3, #0
    8284:	d000      	beq.n	8288 <at25dfx_chip_write_buffer+0x68>
    8286:	e1bc      	b.n	8602 <at25dfx_chip_write_buffer+0x3e2>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
    8288:	3301      	adds	r3, #1
    828a:	7123      	strb	r3, [r4, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    828c:	4bbc      	ldr	r3, [pc, #752]	; (8580 <at25dfx_chip_write_buffer+0x360>)
    828e:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    8290:	2306      	movs	r3, #6
    8292:	aa02      	add	r2, sp, #8
    8294:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    8296:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8298:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    829a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    829c:	2900      	cmp	r1, #0
    829e:	d104      	bne.n	82aa <at25dfx_chip_write_buffer+0x8a>
		return &(ports[port_index]->Group[group_index]);
    82a0:	095a      	lsrs	r2, r3, #5
    82a2:	01d2      	lsls	r2, r2, #7
    82a4:	49b7      	ldr	r1, [pc, #732]	; (8584 <at25dfx_chip_write_buffer+0x364>)
    82a6:	468c      	mov	ip, r1
    82a8:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    82aa:	211f      	movs	r1, #31
    82ac:	400b      	ands	r3, r1
    82ae:	391e      	subs	r1, #30
    82b0:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    82b2:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    82b4:	2201      	movs	r2, #1
    82b6:	a902      	add	r1, sp, #8
    82b8:	6828      	ldr	r0, [r5, #0]
    82ba:	4bb3      	ldr	r3, [pc, #716]	; (8588 <at25dfx_chip_write_buffer+0x368>)
    82bc:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    82be:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    82c0:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    82c2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    82c4:	2900      	cmp	r1, #0
    82c6:	d104      	bne.n	82d2 <at25dfx_chip_write_buffer+0xb2>
		return &(ports[port_index]->Group[group_index]);
    82c8:	095a      	lsrs	r2, r3, #5
    82ca:	01d2      	lsls	r2, r2, #7
    82cc:	49ad      	ldr	r1, [pc, #692]	; (8584 <at25dfx_chip_write_buffer+0x364>)
    82ce:	468c      	mov	ip, r1
    82d0:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    82d2:	211f      	movs	r1, #31
    82d4:	400b      	ands	r3, r1
    82d6:	391e      	subs	r1, #30
    82d8:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    82da:	6191      	str	r1, [r2, #24]
	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
	cmd.command_size = 4;
	cmd.address = address;
	cmd.data.tx = (uint8_t *)data;
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
	cmd.length = min(page_bytes, length);
    82dc:	23ff      	movs	r3, #255	; 0xff
    82de:	4033      	ands	r3, r6
    82e0:	001a      	movs	r2, r3
    82e2:	2380      	movs	r3, #128	; 0x80
    82e4:	005b      	lsls	r3, r3, #1
    82e6:	1a9b      	subs	r3, r3, r2
    82e8:	1c1a      	adds	r2, r3, #0
    82ea:	b29b      	uxth	r3, r3
    82ec:	42bb      	cmp	r3, r7
    82ee:	d900      	bls.n	82f2 <at25dfx_chip_write_buffer+0xd2>
    82f0:	1c3a      	adds	r2, r7, #0
    82f2:	b293      	uxth	r3, r2
    82f4:	4699      	mov	r9, r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    82f6:	2302      	movs	r3, #2
    82f8:	aa02      	add	r2, sp, #8
    82fa:	7013      	strb	r3, [r2, #0]

	if (cmd.command_size > 1) {
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
    82fc:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    82fe:	0a33      	lsrs	r3, r6, #8
    8300:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    8302:	0c33      	lsrs	r3, r6, #16
    8304:	7053      	strb	r3, [r2, #1]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    8306:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8308:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    830a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    830c:	2900      	cmp	r1, #0
    830e:	d104      	bne.n	831a <at25dfx_chip_write_buffer+0xfa>
		return &(ports[port_index]->Group[group_index]);
    8310:	095a      	lsrs	r2, r3, #5
    8312:	01d2      	lsls	r2, r2, #7
    8314:	499b      	ldr	r1, [pc, #620]	; (8584 <at25dfx_chip_write_buffer+0x364>)
    8316:	468c      	mov	ip, r1
    8318:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    831a:	211f      	movs	r1, #31
    831c:	400b      	ands	r3, r1
    831e:	391e      	subs	r1, #30
    8320:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8322:	6151      	str	r1, [r2, #20]
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    8324:	2204      	movs	r2, #4
    8326:	a902      	add	r1, sp, #8
    8328:	6828      	ldr	r0, [r5, #0]
    832a:	4b97      	ldr	r3, [pc, #604]	; (8588 <at25dfx_chip_write_buffer+0x368>)
    832c:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
    832e:	464b      	mov	r3, r9
    8330:	2b00      	cmp	r3, #0
    8332:	d004      	beq.n	833e <at25dfx_chip_write_buffer+0x11e>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    8334:	464a      	mov	r2, r9
    8336:	9900      	ldr	r1, [sp, #0]
    8338:	6828      	ldr	r0, [r5, #0]
    833a:	4b93      	ldr	r3, [pc, #588]	; (8588 <at25dfx_chip_write_buffer+0x368>)
    833c:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    833e:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8340:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8342:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8344:	2900      	cmp	r1, #0
    8346:	d104      	bne.n	8352 <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
    8348:	095a      	lsrs	r2, r3, #5
    834a:	01d2      	lsls	r2, r2, #7
    834c:	498d      	ldr	r1, [pc, #564]	; (8584 <at25dfx_chip_write_buffer+0x364>)
    834e:	468c      	mov	ip, r1
    8350:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8352:	211f      	movs	r1, #31
    8354:	400b      	ands	r3, r1
    8356:	391e      	subs	r1, #30
    8358:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    835a:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    835c:	682b      	ldr	r3, [r5, #0]
    835e:	6819      	ldr	r1, [r3, #0]
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    8360:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8362:	7e0b      	ldrb	r3, [r1, #24]
    8364:	4213      	tst	r3, r2
    8366:	d0fc      	beq.n	8362 <at25dfx_chip_write_buffer+0x142>
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    8368:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    836a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    836c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    836e:	2900      	cmp	r1, #0
    8370:	d104      	bne.n	837c <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
    8372:	095a      	lsrs	r2, r3, #5
    8374:	01d2      	lsls	r2, r2, #7
    8376:	4983      	ldr	r1, [pc, #524]	; (8584 <at25dfx_chip_write_buffer+0x364>)
    8378:	468c      	mov	ip, r1
    837a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    837c:	211f      	movs	r1, #31
    837e:	400b      	ands	r3, r1
    8380:	391e      	subs	r1, #30
    8382:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8384:	6151      	str	r1, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8386:	682b      	ldr	r3, [r5, #0]
    8388:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    838a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    838c:	07d2      	lsls	r2, r2, #31
    838e:	d501      	bpl.n	8394 <at25dfx_chip_write_buffer+0x174>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8390:	2205      	movs	r2, #5
    8392:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    8394:	6828      	ldr	r0, [r5, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8396:	6802      	ldr	r2, [r0, #0]
    8398:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    839a:	7e13      	ldrb	r3, [r2, #24]
    839c:	420b      	tst	r3, r1
    839e:	d0fc      	beq.n	839a <at25dfx_chip_write_buffer+0x17a>
    83a0:	7e13      	ldrb	r3, [r2, #24]
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
	enum status_code status;
	uint16_t status_reg = 0;
    83a2:	2400      	movs	r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    83a4:	075b      	lsls	r3, r3, #29
    83a6:	d50d      	bpl.n	83c4 <at25dfx_chip_write_buffer+0x1a4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    83a8:	8b53      	ldrh	r3, [r2, #26]
    83aa:	075b      	lsls	r3, r3, #29
    83ac:	d501      	bpl.n	83b2 <at25dfx_chip_write_buffer+0x192>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    83ae:	2304      	movs	r3, #4
    83b0:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    83b2:	7983      	ldrb	r3, [r0, #6]
    83b4:	2b01      	cmp	r3, #1
    83b6:	d103      	bne.n	83c0 <at25dfx_chip_write_buffer+0x1a0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    83b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    83ba:	05db      	lsls	r3, r3, #23
    83bc:	0ddc      	lsrs	r4, r3, #23
    83be:	e001      	b.n	83c4 <at25dfx_chip_write_buffer+0x1a4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    83c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    83c2:	b2dc      	uxtb	r4, r3

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    83c4:	2101      	movs	r1, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    83c6:	2300      	movs	r3, #0
    83c8:	4698      	mov	r8, r3
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    83ca:	2004      	movs	r0, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    83cc:	682b      	ldr	r3, [r5, #0]
    83ce:	681a      	ldr	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    83d0:	7e13      	ldrb	r3, [r2, #24]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    83d2:	420b      	tst	r3, r1
    83d4:	d0fc      	beq.n	83d0 <at25dfx_chip_write_buffer+0x1b0>
    83d6:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    83d8:	420b      	tst	r3, r1
    83da:	d001      	beq.n	83e0 <at25dfx_chip_write_buffer+0x1c0>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    83dc:	4643      	mov	r3, r8
    83de:	6293      	str	r3, [r2, #40]	; 0x28
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    83e0:	682b      	ldr	r3, [r5, #0]
    83e2:	469a      	mov	sl, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    83e4:	681a      	ldr	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    83e6:	7e13      	ldrb	r3, [r2, #24]
    83e8:	4203      	tst	r3, r0
    83ea:	d0fc      	beq.n	83e6 <at25dfx_chip_write_buffer+0x1c6>
    83ec:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    83ee:	4203      	tst	r3, r0
    83f0:	d00d      	beq.n	840e <at25dfx_chip_write_buffer+0x1ee>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    83f2:	8b53      	ldrh	r3, [r2, #26]
    83f4:	4203      	tst	r3, r0
    83f6:	d000      	beq.n	83fa <at25dfx_chip_write_buffer+0x1da>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    83f8:	8350      	strh	r0, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    83fa:	4653      	mov	r3, sl
    83fc:	799b      	ldrb	r3, [r3, #6]
    83fe:	2b01      	cmp	r3, #1
    8400:	d103      	bne.n	840a <at25dfx_chip_write_buffer+0x1ea>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8402:	6a93      	ldr	r3, [r2, #40]	; 0x28
    8404:	05db      	lsls	r3, r3, #23
    8406:	0ddc      	lsrs	r4, r3, #23
    8408:	e001      	b.n	840e <at25dfx_chip_write_buffer+0x1ee>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    840a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    840c:	b2dc      	uxtb	r4, r3
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    840e:	4221      	tst	r1, r4
    8410:	d1dc      	bne.n	83cc <at25dfx_chip_write_buffer+0x1ac>
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    8412:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8414:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8416:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8418:	2900      	cmp	r1, #0
    841a:	d104      	bne.n	8426 <at25dfx_chip_write_buffer+0x206>
		return &(ports[port_index]->Group[group_index]);
    841c:	095a      	lsrs	r2, r3, #5
    841e:	01d2      	lsls	r2, r2, #7
    8420:	4958      	ldr	r1, [pc, #352]	; (8584 <at25dfx_chip_write_buffer+0x364>)
    8422:	468c      	mov	ip, r1
    8424:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8426:	211f      	movs	r1, #31
    8428:	400b      	ands	r3, r1
    842a:	391e      	subs	r1, #30
    842c:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    842e:	6191      	str	r1, [r2, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
    8430:	2010      	movs	r0, #16
	} while (status_reg & AT25DFX_STATUS_BUSY);

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
    8432:	06a3      	lsls	r3, r4, #26
    8434:	d500      	bpl.n	8438 <at25dfx_chip_write_buffer+0x218>
    8436:	e0e0      	b.n	85fa <at25dfx_chip_write_buffer+0x3da>
    8438:	e0e7      	b.n	860a <at25dfx_chip_write_buffer+0x3ea>
	} else {
		Assert(false);
		return NULL;
    843a:	2700      	movs	r7, #0
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    843c:	231f      	movs	r3, #31
    843e:	469a      	mov	sl, r3
    8440:	2401      	movs	r4, #1

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    8442:	2306      	movs	r3, #6
    8444:	aa02      	add	r2, sp, #8
    8446:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    8448:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    844a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    844c:	003a      	movs	r2, r7
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    844e:	2900      	cmp	r1, #0
    8450:	d104      	bne.n	845c <at25dfx_chip_write_buffer+0x23c>
		return &(ports[port_index]->Group[group_index]);
    8452:	095a      	lsrs	r2, r3, #5
    8454:	01d2      	lsls	r2, r2, #7
    8456:	494b      	ldr	r1, [pc, #300]	; (8584 <at25dfx_chip_write_buffer+0x364>)
    8458:	468c      	mov	ip, r1
    845a:	4462      	add	r2, ip
    845c:	4651      	mov	r1, sl
    845e:	400b      	ands	r3, r1
    8460:	0021      	movs	r1, r4
    8462:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8464:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    8466:	0022      	movs	r2, r4
    8468:	a902      	add	r1, sp, #8
    846a:	6828      	ldr	r0, [r5, #0]
    846c:	4b46      	ldr	r3, [pc, #280]	; (8588 <at25dfx_chip_write_buffer+0x368>)
    846e:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    8470:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8472:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8474:	003a      	movs	r2, r7
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8476:	2900      	cmp	r1, #0
    8478:	d104      	bne.n	8484 <at25dfx_chip_write_buffer+0x264>
		return &(ports[port_index]->Group[group_index]);
    847a:	095a      	lsrs	r2, r3, #5
    847c:	01d2      	lsls	r2, r2, #7
    847e:	4941      	ldr	r1, [pc, #260]	; (8584 <at25dfx_chip_write_buffer+0x364>)
    8480:	468c      	mov	ip, r1
    8482:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8484:	4651      	mov	r1, sl
    8486:	400b      	ands	r3, r1
    8488:	0021      	movs	r1, r4
    848a:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    848c:	6191      	str	r1, [r2, #24]
	length -= cmd.length;

	while (length && (status == STATUS_OK)) {
		_at25dfx_chip_enable_write(chip);

		cmd.address += cmd.length;
    848e:	9b01      	ldr	r3, [sp, #4]
    8490:	444b      	add	r3, r9
    8492:	9301      	str	r3, [sp, #4]
		cmd.data.tx += cmd.length;
    8494:	44cb      	add	fp, r9
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    8496:	4643      	mov	r3, r8
    8498:	2280      	movs	r2, #128	; 0x80
    849a:	0052      	lsls	r2, r2, #1
    849c:	4590      	cmp	r8, r2
    849e:	d901      	bls.n	84a4 <at25dfx_chip_write_buffer+0x284>
    84a0:	4b3a      	ldr	r3, [pc, #232]	; (858c <at25dfx_chip_write_buffer+0x36c>)
    84a2:	881b      	ldrh	r3, [r3, #0]
    84a4:	b29b      	uxth	r3, r3
    84a6:	4699      	mov	r9, r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    84a8:	2302      	movs	r3, #2
    84aa:	aa02      	add	r2, sp, #8
    84ac:	7013      	strb	r3, [r2, #0]

	if (cmd.command_size > 1) {
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
    84ae:	0011      	movs	r1, r2
    84b0:	9a01      	ldr	r2, [sp, #4]
    84b2:	70ca      	strb	r2, [r1, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    84b4:	0a13      	lsrs	r3, r2, #8
    84b6:	708b      	strb	r3, [r1, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    84b8:	0c13      	lsrs	r3, r2, #16
    84ba:	704b      	strb	r3, [r1, #1]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    84bc:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    84be:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    84c0:	003a      	movs	r2, r7
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    84c2:	2900      	cmp	r1, #0
    84c4:	d104      	bne.n	84d0 <at25dfx_chip_write_buffer+0x2b0>
		return &(ports[port_index]->Group[group_index]);
    84c6:	095a      	lsrs	r2, r3, #5
    84c8:	01d2      	lsls	r2, r2, #7
    84ca:	492e      	ldr	r1, [pc, #184]	; (8584 <at25dfx_chip_write_buffer+0x364>)
    84cc:	468c      	mov	ip, r1
    84ce:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    84d0:	4651      	mov	r1, sl
    84d2:	400b      	ands	r3, r1
    84d4:	0021      	movs	r1, r4
    84d6:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    84d8:	6151      	str	r1, [r2, #20]
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    84da:	2204      	movs	r2, #4
    84dc:	a902      	add	r1, sp, #8
    84de:	6828      	ldr	r0, [r5, #0]
    84e0:	4b29      	ldr	r3, [pc, #164]	; (8588 <at25dfx_chip_write_buffer+0x368>)
    84e2:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
    84e4:	464b      	mov	r3, r9
    84e6:	2b00      	cmp	r3, #0
    84e8:	d004      	beq.n	84f4 <at25dfx_chip_write_buffer+0x2d4>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    84ea:	464a      	mov	r2, r9
    84ec:	4659      	mov	r1, fp
    84ee:	6828      	ldr	r0, [r5, #0]
    84f0:	4b25      	ldr	r3, [pc, #148]	; (8588 <at25dfx_chip_write_buffer+0x368>)
    84f2:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    84f4:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    84f6:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    84f8:	003a      	movs	r2, r7
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    84fa:	2900      	cmp	r1, #0
    84fc:	d104      	bne.n	8508 <at25dfx_chip_write_buffer+0x2e8>
		return &(ports[port_index]->Group[group_index]);
    84fe:	095a      	lsrs	r2, r3, #5
    8500:	01d2      	lsls	r2, r2, #7
    8502:	4920      	ldr	r1, [pc, #128]	; (8584 <at25dfx_chip_write_buffer+0x364>)
    8504:	468c      	mov	ip, r1
    8506:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8508:	4651      	mov	r1, sl
    850a:	400b      	ands	r3, r1
    850c:	0021      	movs	r1, r4
    850e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    8510:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8512:	682b      	ldr	r3, [r5, #0]
    8514:	681a      	ldr	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8516:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    8518:	4223      	tst	r3, r4
    851a:	d0fc      	beq.n	8516 <at25dfx_chip_write_buffer+0x2f6>
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    851c:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    851e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8520:	003a      	movs	r2, r7
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8522:	2900      	cmp	r1, #0
    8524:	d104      	bne.n	8530 <at25dfx_chip_write_buffer+0x310>
		return &(ports[port_index]->Group[group_index]);
    8526:	095a      	lsrs	r2, r3, #5
    8528:	01d2      	lsls	r2, r2, #7
    852a:	4916      	ldr	r1, [pc, #88]	; (8584 <at25dfx_chip_write_buffer+0x364>)
    852c:	468c      	mov	ip, r1
    852e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8530:	4651      	mov	r1, sl
    8532:	400b      	ands	r3, r1
    8534:	0021      	movs	r1, r4
    8536:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8538:	6151      	str	r1, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    853a:	682b      	ldr	r3, [r5, #0]
    853c:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    853e:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    8540:	4222      	tst	r2, r4
    8542:	d001      	beq.n	8548 <at25dfx_chip_write_buffer+0x328>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8544:	2205      	movs	r2, #5
    8546:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    8548:	682b      	ldr	r3, [r5, #0]
    854a:	469c      	mov	ip, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    854c:	681a      	ldr	r2, [r3, #0]
    854e:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8550:	7e13      	ldrb	r3, [r2, #24]
    8552:	420b      	tst	r3, r1
    8554:	d0fc      	beq.n	8550 <at25dfx_chip_write_buffer+0x330>
    8556:	7e13      	ldrb	r3, [r2, #24]
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
	enum status_code status;
	uint16_t status_reg = 0;
    8558:	0038      	movs	r0, r7
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    855a:	075b      	lsls	r3, r3, #29
    855c:	d51a      	bpl.n	8594 <at25dfx_chip_write_buffer+0x374>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    855e:	8b53      	ldrh	r3, [r2, #26]
    8560:	075b      	lsls	r3, r3, #29
    8562:	d501      	bpl.n	8568 <at25dfx_chip_write_buffer+0x348>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8564:	2304      	movs	r3, #4
    8566:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8568:	4663      	mov	r3, ip
    856a:	799b      	ldrb	r3, [r3, #6]
    856c:	2b01      	cmp	r3, #1
    856e:	d10f      	bne.n	8590 <at25dfx_chip_write_buffer+0x370>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8570:	6a90      	ldr	r0, [r2, #40]	; 0x28
    8572:	05c0      	lsls	r0, r0, #23
    8574:	0dc0      	lsrs	r0, r0, #23
    8576:	e00d      	b.n	8594 <at25dfx_chip_write_buffer+0x374>
    8578:	00012e1c 	.word	0x00012e1c
    857c:	0000bd69 	.word	0x0000bd69
    8580:	0000bda9 	.word	0x0000bda9
    8584:	41004400 	.word	0x41004400
    8588:	0000ca35 	.word	0x0000ca35
    858c:	00012e18 	.word	0x00012e18
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8590:	6a90      	ldr	r0, [r2, #40]	; 0x28
    8592:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_write(chip->spi)) {
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    8594:	2104      	movs	r1, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8596:	682b      	ldr	r3, [r5, #0]
    8598:	681a      	ldr	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    859a:	7e13      	ldrb	r3, [r2, #24]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    859c:	4223      	tst	r3, r4
    859e:	d0fc      	beq.n	859a <at25dfx_chip_write_buffer+0x37a>
    85a0:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    85a2:	4223      	tst	r3, r4
    85a4:	d000      	beq.n	85a8 <at25dfx_chip_write_buffer+0x388>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    85a6:	6297      	str	r7, [r2, #40]	; 0x28
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    85a8:	682e      	ldr	r6, [r5, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    85aa:	6832      	ldr	r2, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    85ac:	7e13      	ldrb	r3, [r2, #24]
    85ae:	420b      	tst	r3, r1
    85b0:	d0fc      	beq.n	85ac <at25dfx_chip_write_buffer+0x38c>
    85b2:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    85b4:	420b      	tst	r3, r1
    85b6:	d00c      	beq.n	85d2 <at25dfx_chip_write_buffer+0x3b2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    85b8:	8b53      	ldrh	r3, [r2, #26]
    85ba:	420b      	tst	r3, r1
    85bc:	d000      	beq.n	85c0 <at25dfx_chip_write_buffer+0x3a0>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    85be:	8351      	strh	r1, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    85c0:	79b3      	ldrb	r3, [r6, #6]
    85c2:	2b01      	cmp	r3, #1
    85c4:	d103      	bne.n	85ce <at25dfx_chip_write_buffer+0x3ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    85c6:	6a90      	ldr	r0, [r2, #40]	; 0x28
    85c8:	05c0      	lsls	r0, r0, #23
    85ca:	0dc0      	lsrs	r0, r0, #23
    85cc:	e001      	b.n	85d2 <at25dfx_chip_write_buffer+0x3b2>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    85ce:	6a90      	ldr	r0, [r2, #40]	; 0x28
    85d0:	b2c0      	uxtb	r0, r0
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    85d2:	4204      	tst	r4, r0
    85d4:	d1df      	bne.n	8596 <at25dfx_chip_write_buffer+0x376>
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    85d6:	796b      	ldrb	r3, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    85d8:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    85da:	003a      	movs	r2, r7
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    85dc:	2900      	cmp	r1, #0
    85de:	d104      	bne.n	85ea <at25dfx_chip_write_buffer+0x3ca>
		return &(ports[port_index]->Group[group_index]);
    85e0:	095a      	lsrs	r2, r3, #5
    85e2:	01d2      	lsls	r2, r2, #7
    85e4:	4917      	ldr	r1, [pc, #92]	; (8644 <at25dfx_chip_write_buffer+0x424>)
    85e6:	468c      	mov	ip, r1
    85e8:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    85ea:	4651      	mov	r1, sl
    85ec:	400b      	ands	r3, r1
    85ee:	0021      	movs	r1, r4
    85f0:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    85f2:	6191      	str	r1, [r2, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
    85f4:	0683      	lsls	r3, r0, #26
    85f6:	d514      	bpl.n	8622 <at25dfx_chip_write_buffer+0x402>
		return STATUS_ERR_IO;
    85f8:	2010      	movs	r0, #16
		status = _at25dfx_chip_get_nonbusy_status(chip);

		length -= cmd.length;
	}

	_at25dfx_spi_unlock(chip->spi);
    85fa:	682b      	ldr	r3, [r5, #0]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
    85fc:	2200      	movs	r2, #0
    85fe:	711a      	strb	r2, [r3, #4]

	return status;
    8600:	e019      	b.n	8636 <at25dfx_chip_write_buffer+0x416>
    8602:	4b11      	ldr	r3, [pc, #68]	; (8648 <at25dfx_chip_write_buffer+0x428>)
    8604:	4798      	blx	r3
		return STATUS_ERR_INVALID_ARG;
	}

	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
    8606:	2005      	movs	r0, #5
    8608:	e015      	b.n	8636 <at25dfx_chip_write_buffer+0x416>
	cmd.length = min(page_bytes, length);
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	status = _at25dfx_chip_get_nonbusy_status(chip);

	length -= cmd.length;
    860a:	464b      	mov	r3, r9
    860c:	1aff      	subs	r7, r7, r3
    860e:	b2bb      	uxth	r3, r7
    8610:	4698      	mov	r8, r3

	while (length && (status == STATUS_OK)) {
    8612:	9601      	str	r6, [sp, #4]
    8614:	9b00      	ldr	r3, [sp, #0]
    8616:	469b      	mov	fp, r3
    8618:	4643      	mov	r3, r8
	}
	return STATUS_OK;
    861a:	2000      	movs	r0, #0
    861c:	2b00      	cmp	r3, #0
    861e:	d0ec      	beq.n	85fa <at25dfx_chip_write_buffer+0x3da>
    8620:	e70b      	b.n	843a <at25dfx_chip_write_buffer+0x21a>

		_at25dfx_chip_issue_write_command_wait(chip, cmd);

		status = _at25dfx_chip_get_nonbusy_status(chip);

		length -= cmd.length;
    8622:	4643      	mov	r3, r8
    8624:	464a      	mov	r2, r9
    8626:	1a9b      	subs	r3, r3, r2
    8628:	b29b      	uxth	r3, r3
    862a:	4698      	mov	r8, r3

	status = _at25dfx_chip_get_nonbusy_status(chip);

	length -= cmd.length;

	while (length && (status == STATUS_OK)) {
    862c:	2b00      	cmp	r3, #0
    862e:	d000      	beq.n	8632 <at25dfx_chip_write_buffer+0x412>
    8630:	e707      	b.n	8442 <at25dfx_chip_write_buffer+0x222>
    8632:	2000      	movs	r0, #0
    8634:	e7e1      	b.n	85fa <at25dfx_chip_write_buffer+0x3da>
	}

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    8636:	b005      	add	sp, #20
    8638:	bc3c      	pop	{r2, r3, r4, r5}
    863a:	4690      	mov	r8, r2
    863c:	4699      	mov	r9, r3
    863e:	46a2      	mov	sl, r4
    8640:	46ab      	mov	fp, r5
    8642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8644:	41004400 	.word	0x41004400
    8648:	0000bda9 	.word	0x0000bda9

0000864c <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    864c:	b5f0      	push	{r4, r5, r6, r7, lr}
    864e:	b083      	sub	sp, #12
    8650:	0004      	movs	r4, r0
    8652:	000e      	movs	r6, r1
    8654:	0015      	movs	r5, r2
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
	switch (type) {
    8656:	7903      	ldrb	r3, [r0, #4]
    8658:	2b09      	cmp	r3, #9
    865a:	d900      	bls.n	865e <at25dfx_chip_erase_block+0x12>
    865c:	e0f0      	b.n	8840 <at25dfx_chip_erase_block+0x1f4>
    865e:	009b      	lsls	r3, r3, #2
    8660:	4a7b      	ldr	r2, [pc, #492]	; (8850 <at25dfx_chip_erase_block+0x204>)
    8662:	58d3      	ldr	r3, [r2, r3]
    8664:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;

	case AT25DFX_021:
		return 256 * 1024UL;
    8666:	2380      	movs	r3, #128	; 0x80
    8668:	02db      	lsls	r3, r3, #11
    866a:	e010      	b.n	868e <at25dfx_chip_erase_block+0x42>

	case AT25DFX_041A:
		return 512 * 1024UL;
    866c:	2380      	movs	r3, #128	; 0x80
    866e:	031b      	lsls	r3, r3, #12
    8670:	e00d      	b.n	868e <at25dfx_chip_erase_block+0x42>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
    8672:	2380      	movs	r3, #128	; 0x80
    8674:	035b      	lsls	r3, r3, #13
    8676:	e00a      	b.n	868e <at25dfx_chip_erase_block+0x42>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
    8678:	2380      	movs	r3, #128	; 0x80
    867a:	039b      	lsls	r3, r3, #14
    867c:	e007      	b.n	868e <at25dfx_chip_erase_block+0x42>

	case AT25DFX_321A:
		return 4096 * 1024UL;
    867e:	2380      	movs	r3, #128	; 0x80
    8680:	03db      	lsls	r3, r3, #15
    8682:	e004      	b.n	868e <at25dfx_chip_erase_block+0x42>

	case AT25DFX_641:
		return 8192 * 1024UL;
    8684:	2380      	movs	r3, #128	; 0x80
    8686:	041b      	lsls	r3, r3, #16
    8688:	e001      	b.n	868e <at25dfx_chip_erase_block+0x42>
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
	switch (type) {
	case AT25DFX_512B:
		return 64 * 1024UL;
    868a:	2380      	movs	r3, #128	; 0x80
    868c:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
    868e:	2017      	movs	r0, #23
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
    8690:	42b3      	cmp	r3, r6
    8692:	d800      	bhi.n	8696 <at25dfx_chip_erase_block+0x4a>
    8694:	e0d9      	b.n	884a <at25dfx_chip_erase_block+0x1fe>
		return STATUS_ERR_INVALID_ARG;
	}

	status = _at25dfx_spi_lock(chip->spi);
    8696:	6827      	ldr	r7, [r4, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    8698:	4b6e      	ldr	r3, [pc, #440]	; (8854 <at25dfx_chip_erase_block+0x208>)
    869a:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
    869c:	793b      	ldrb	r3, [r7, #4]
    869e:	2b00      	cmp	r3, #0
    86a0:	d000      	beq.n	86a4 <at25dfx_chip_erase_block+0x58>
    86a2:	e0cf      	b.n	8844 <at25dfx_chip_erase_block+0x1f8>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
    86a4:	3301      	adds	r3, #1
    86a6:	713b      	strb	r3, [r7, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    86a8:	4b6b      	ldr	r3, [pc, #428]	; (8858 <at25dfx_chip_erase_block+0x20c>)
    86aa:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    86ac:	2306      	movs	r3, #6
    86ae:	466a      	mov	r2, sp
    86b0:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    86b2:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    86b4:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    86b6:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    86b8:	2900      	cmp	r1, #0
    86ba:	d104      	bne.n	86c6 <at25dfx_chip_erase_block+0x7a>
		return &(ports[port_index]->Group[group_index]);
    86bc:	095a      	lsrs	r2, r3, #5
    86be:	01d2      	lsls	r2, r2, #7
    86c0:	4966      	ldr	r1, [pc, #408]	; (885c <at25dfx_chip_erase_block+0x210>)
    86c2:	468c      	mov	ip, r1
    86c4:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    86c6:	211f      	movs	r1, #31
    86c8:	400b      	ands	r3, r1
    86ca:	391e      	subs	r1, #30
    86cc:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    86ce:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    86d0:	2201      	movs	r2, #1
    86d2:	4669      	mov	r1, sp
    86d4:	6820      	ldr	r0, [r4, #0]
    86d6:	4b62      	ldr	r3, [pc, #392]	; (8860 <at25dfx_chip_erase_block+0x214>)
    86d8:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    86da:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    86dc:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    86de:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    86e0:	2900      	cmp	r1, #0
    86e2:	d104      	bne.n	86ee <at25dfx_chip_erase_block+0xa2>
		return &(ports[port_index]->Group[group_index]);
    86e4:	095a      	lsrs	r2, r3, #5
    86e6:	01d2      	lsls	r2, r2, #7
    86e8:	495c      	ldr	r1, [pc, #368]	; (885c <at25dfx_chip_erase_block+0x210>)
    86ea:	468c      	mov	ip, r1
    86ec:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    86ee:	211f      	movs	r1, #31
    86f0:	400b      	ands	r3, r1
    86f2:	391e      	subs	r1, #30
    86f4:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    86f6:	6191      	str	r1, [r2, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	switch (block_size) {
    86f8:	2d01      	cmp	r5, #1
    86fa:	d005      	beq.n	8708 <at25dfx_chip_erase_block+0xbc>
    86fc:	2d00      	cmp	r5, #0
    86fe:	d007      	beq.n	8710 <at25dfx_chip_erase_block+0xc4>
	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
		break;

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    8700:	23d8      	movs	r3, #216	; 0xd8
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	switch (block_size) {
    8702:	2d02      	cmp	r5, #2
    8704:	d005      	beq.n	8712 <at25dfx_chip_erase_block+0xc6>
    8706:	e001      	b.n	870c <at25dfx_chip_erase_block+0xc0>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
		break;

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    8708:	2352      	movs	r3, #82	; 0x52
    870a:	e002      	b.n	8712 <at25dfx_chip_erase_block+0xc6>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
		break;

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
    870c:	2300      	movs	r3, #0
    870e:	e000      	b.n	8712 <at25dfx_chip_erase_block+0xc6>

	_at25dfx_chip_enable_write(chip);

	switch (block_size) {
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    8710:	2320      	movs	r3, #32

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    8712:	466a      	mov	r2, sp
    8714:	7013      	strb	r3, [r2, #0]

	if (cmd.command_size > 1) {
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
    8716:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    8718:	0a33      	lsrs	r3, r6, #8
    871a:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    871c:	0c36      	lsrs	r6, r6, #16
    871e:	7056      	strb	r6, [r2, #1]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    8720:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8722:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8724:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8726:	2900      	cmp	r1, #0
    8728:	d104      	bne.n	8734 <at25dfx_chip_erase_block+0xe8>
		return &(ports[port_index]->Group[group_index]);
    872a:	095a      	lsrs	r2, r3, #5
    872c:	01d2      	lsls	r2, r2, #7
    872e:	494b      	ldr	r1, [pc, #300]	; (885c <at25dfx_chip_erase_block+0x210>)
    8730:	468c      	mov	ip, r1
    8732:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8734:	211f      	movs	r1, #31
    8736:	400b      	ands	r3, r1
    8738:	391e      	subs	r1, #30
    873a:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    873c:	6151      	str	r1, [r2, #20]
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    873e:	2204      	movs	r2, #4
    8740:	4669      	mov	r1, sp
    8742:	6820      	ldr	r0, [r4, #0]
    8744:	4b46      	ldr	r3, [pc, #280]	; (8860 <at25dfx_chip_erase_block+0x214>)
    8746:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    8748:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    874a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    874c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    874e:	2900      	cmp	r1, #0
    8750:	d104      	bne.n	875c <at25dfx_chip_erase_block+0x110>
		return &(ports[port_index]->Group[group_index]);
    8752:	095a      	lsrs	r2, r3, #5
    8754:	01d2      	lsls	r2, r2, #7
    8756:	4941      	ldr	r1, [pc, #260]	; (885c <at25dfx_chip_erase_block+0x210>)
    8758:	468c      	mov	ip, r1
    875a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    875c:	211f      	movs	r1, #31
    875e:	400b      	ands	r3, r1
    8760:	391e      	subs	r1, #30
    8762:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    8764:	6191      	str	r1, [r2, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8766:	6823      	ldr	r3, [r4, #0]
    8768:	6819      	ldr	r1, [r3, #0]
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    876a:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    876c:	7e0b      	ldrb	r3, [r1, #24]
    876e:	4213      	tst	r3, r2
    8770:	d0fc      	beq.n	876c <at25dfx_chip_erase_block+0x120>
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    8772:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8774:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8776:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8778:	2900      	cmp	r1, #0
    877a:	d104      	bne.n	8786 <at25dfx_chip_erase_block+0x13a>
		return &(ports[port_index]->Group[group_index]);
    877c:	095a      	lsrs	r2, r3, #5
    877e:	01d2      	lsls	r2, r2, #7
    8780:	4936      	ldr	r1, [pc, #216]	; (885c <at25dfx_chip_erase_block+0x210>)
    8782:	468c      	mov	ip, r1
    8784:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8786:	211f      	movs	r1, #31
    8788:	400b      	ands	r3, r1
    878a:	391e      	subs	r1, #30
    878c:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    878e:	6151      	str	r1, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8790:	6823      	ldr	r3, [r4, #0]
    8792:	681b      	ldr	r3, [r3, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8794:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    8796:	07d2      	lsls	r2, r2, #31
    8798:	d501      	bpl.n	879e <at25dfx_chip_erase_block+0x152>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    879a:	2205      	movs	r2, #5
    879c:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    879e:	6820      	ldr	r0, [r4, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    87a0:	6802      	ldr	r2, [r0, #0]
    87a2:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    87a4:	7e13      	ldrb	r3, [r2, #24]
    87a6:	420b      	tst	r3, r1
    87a8:	d0fc      	beq.n	87a4 <at25dfx_chip_erase_block+0x158>
    87aa:	7e13      	ldrb	r3, [r2, #24]
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
	enum status_code status;
	uint16_t status_reg = 0;
    87ac:	2500      	movs	r5, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    87ae:	075b      	lsls	r3, r3, #29
    87b0:	d50d      	bpl.n	87ce <at25dfx_chip_erase_block+0x182>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    87b2:	8b53      	ldrh	r3, [r2, #26]
    87b4:	075b      	lsls	r3, r3, #29
    87b6:	d501      	bpl.n	87bc <at25dfx_chip_erase_block+0x170>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    87b8:	2304      	movs	r3, #4
    87ba:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    87bc:	7983      	ldrb	r3, [r0, #6]
    87be:	2b01      	cmp	r3, #1
    87c0:	d103      	bne.n	87ca <at25dfx_chip_erase_block+0x17e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    87c2:	6a95      	ldr	r5, [r2, #40]	; 0x28
    87c4:	05ed      	lsls	r5, r5, #23
    87c6:	0ded      	lsrs	r5, r5, #23
    87c8:	e001      	b.n	87ce <at25dfx_chip_erase_block+0x182>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    87ca:	6a95      	ldr	r5, [r2, #40]	; 0x28
    87cc:	b2ed      	uxtb	r5, r5

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    87ce:	2101      	movs	r1, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    87d0:	2700      	movs	r7, #0
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    87d2:	2004      	movs	r0, #4
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    87d4:	6823      	ldr	r3, [r4, #0]
    87d6:	681a      	ldr	r2, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    87d8:	7e13      	ldrb	r3, [r2, #24]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    87da:	420b      	tst	r3, r1
    87dc:	d0fc      	beq.n	87d8 <at25dfx_chip_erase_block+0x18c>
    87de:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    87e0:	420b      	tst	r3, r1
    87e2:	d000      	beq.n	87e6 <at25dfx_chip_erase_block+0x19a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    87e4:	6297      	str	r7, [r2, #40]	; 0x28
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    87e6:	6826      	ldr	r6, [r4, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    87e8:	6832      	ldr	r2, [r6, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    87ea:	7e13      	ldrb	r3, [r2, #24]
    87ec:	4203      	tst	r3, r0
    87ee:	d0fc      	beq.n	87ea <at25dfx_chip_erase_block+0x19e>
    87f0:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    87f2:	4203      	tst	r3, r0
    87f4:	d00c      	beq.n	8810 <at25dfx_chip_erase_block+0x1c4>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    87f6:	8b53      	ldrh	r3, [r2, #26]
    87f8:	4203      	tst	r3, r0
    87fa:	d000      	beq.n	87fe <at25dfx_chip_erase_block+0x1b2>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    87fc:	8350      	strh	r0, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    87fe:	79b3      	ldrb	r3, [r6, #6]
    8800:	2b01      	cmp	r3, #1
    8802:	d103      	bne.n	880c <at25dfx_chip_erase_block+0x1c0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8804:	6a95      	ldr	r5, [r2, #40]	; 0x28
    8806:	05ed      	lsls	r5, r5, #23
    8808:	0ded      	lsrs	r5, r5, #23
    880a:	e001      	b.n	8810 <at25dfx_chip_erase_block+0x1c4>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    880c:	6a95      	ldr	r5, [r2, #40]	; 0x28
    880e:	b2ed      	uxtb	r5, r5
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    8810:	4229      	tst	r1, r5
    8812:	d1df      	bne.n	87d4 <at25dfx_chip_erase_block+0x188>
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    8814:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8816:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8818:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    881a:	2900      	cmp	r1, #0
    881c:	d104      	bne.n	8828 <at25dfx_chip_erase_block+0x1dc>
		return &(ports[port_index]->Group[group_index]);
    881e:	095a      	lsrs	r2, r3, #5
    8820:	01d2      	lsls	r2, r2, #7
    8822:	490e      	ldr	r1, [pc, #56]	; (885c <at25dfx_chip_erase_block+0x210>)
    8824:	468c      	mov	ip, r1
    8826:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8828:	211f      	movs	r1, #31
    882a:	400b      	ands	r3, r1
    882c:	391e      	subs	r1, #30
    882e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    8830:	6191      	str	r1, [r2, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
    8832:	06a8      	lsls	r0, r5, #26
		return STATUS_ERR_IO;
	}
	return STATUS_OK;
    8834:	0fc0      	lsrs	r0, r0, #31
    8836:	0100      	lsls	r0, r0, #4

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);
    8838:	6823      	ldr	r3, [r4, #0]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
    883a:	2200      	movs	r2, #0
    883c:	711a      	strb	r2, [r3, #4]

	return status;
    883e:	e004      	b.n	884a <at25dfx_chip_erase_block+0x1fe>
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
    8840:	2017      	movs	r0, #23
    8842:	e002      	b.n	884a <at25dfx_chip_erase_block+0x1fe>
    8844:	4b04      	ldr	r3, [pc, #16]	; (8858 <at25dfx_chip_erase_block+0x20c>)
    8846:	4798      	blx	r3
	}

	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
    8848:	2005      	movs	r0, #5
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    884a:	b003      	add	sp, #12
    884c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    884e:	46c0      	nop			; (mov r8, r8)
    8850:	00012e44 	.word	0x00012e44
    8854:	0000bd69 	.word	0x0000bd69
    8858:	0000bda9 	.word	0x0000bda9
    885c:	41004400 	.word	0x41004400
    8860:	0000ca35 	.word	0x0000ca35

00008864 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
    8864:	b570      	push	{r4, r5, r6, lr}
    8866:	b082      	sub	sp, #8
    8868:	0004      	movs	r4, r0
    886a:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    886c:	6806      	ldr	r6, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    886e:	4b35      	ldr	r3, [pc, #212]	; (8944 <at25dfx_chip_set_global_sector_protect+0xe0>)
    8870:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
    8872:	7933      	ldrb	r3, [r6, #4]
    8874:	2b00      	cmp	r3, #0
    8876:	d160      	bne.n	893a <at25dfx_chip_set_global_sector_protect+0xd6>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
    8878:	3301      	adds	r3, #1
    887a:	7133      	strb	r3, [r6, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    887c:	4b32      	ldr	r3, [pc, #200]	; (8948 <at25dfx_chip_set_global_sector_protect+0xe4>)
    887e:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    8880:	2306      	movs	r3, #6
    8882:	466a      	mov	r2, sp
    8884:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    8886:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8888:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    888a:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    888c:	2900      	cmp	r1, #0
    888e:	d104      	bne.n	889a <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
    8890:	095a      	lsrs	r2, r3, #5
    8892:	01d2      	lsls	r2, r2, #7
    8894:	492d      	ldr	r1, [pc, #180]	; (894c <at25dfx_chip_set_global_sector_protect+0xe8>)
    8896:	468c      	mov	ip, r1
    8898:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    889a:	211f      	movs	r1, #31
    889c:	400b      	ands	r3, r1
    889e:	391e      	subs	r1, #30
    88a0:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    88a2:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    88a4:	2201      	movs	r2, #1
    88a6:	4669      	mov	r1, sp
    88a8:	6820      	ldr	r0, [r4, #0]
    88aa:	4b29      	ldr	r3, [pc, #164]	; (8950 <at25dfx_chip_set_global_sector_protect+0xec>)
    88ac:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    88ae:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    88b0:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    88b2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    88b4:	2900      	cmp	r1, #0
    88b6:	d104      	bne.n	88c2 <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
    88b8:	095a      	lsrs	r2, r3, #5
    88ba:	01d2      	lsls	r2, r2, #7
    88bc:	4923      	ldr	r1, [pc, #140]	; (894c <at25dfx_chip_set_global_sector_protect+0xe8>)
    88be:	468c      	mov	ip, r1
    88c0:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    88c2:	211f      	movs	r1, #31
    88c4:	400b      	ands	r3, r1
    88c6:	391e      	subs	r1, #30
    88c8:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    88ca:	6191      	str	r1, [r2, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
    88cc:	233c      	movs	r3, #60	; 0x3c
    88ce:	1e6a      	subs	r2, r5, #1
    88d0:	4195      	sbcs	r5, r2
    88d2:	426d      	negs	r5, r5
    88d4:	402b      	ands	r3, r5
    88d6:	466a      	mov	r2, sp
    88d8:	71d3      	strb	r3, [r2, #7]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    88da:	2301      	movs	r3, #1
    88dc:	466a      	mov	r2, sp
    88de:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    88e0:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    88e2:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    88e4:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    88e6:	2900      	cmp	r1, #0
    88e8:	d104      	bne.n	88f4 <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
    88ea:	095a      	lsrs	r2, r3, #5
    88ec:	01d2      	lsls	r2, r2, #7
    88ee:	4917      	ldr	r1, [pc, #92]	; (894c <at25dfx_chip_set_global_sector_protect+0xe8>)
    88f0:	468c      	mov	ip, r1
    88f2:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    88f4:	211f      	movs	r1, #31
    88f6:	400b      	ands	r3, r1
    88f8:	391e      	subs	r1, #30
    88fa:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    88fc:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    88fe:	2201      	movs	r2, #1
    8900:	4669      	mov	r1, sp
    8902:	6820      	ldr	r0, [r4, #0]
    8904:	4d12      	ldr	r5, [pc, #72]	; (8950 <at25dfx_chip_set_global_sector_protect+0xec>)
    8906:	47a8      	blx	r5
	Assert(status == STATUS_OK);

	if (cmd.length) {
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    8908:	2201      	movs	r2, #1
    890a:	466b      	mov	r3, sp
    890c:	1dd9      	adds	r1, r3, #7
    890e:	6820      	ldr	r0, [r4, #0]
    8910:	47a8      	blx	r5
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    8912:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8914:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8916:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8918:	2900      	cmp	r1, #0
    891a:	d104      	bne.n	8926 <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
    891c:	095a      	lsrs	r2, r3, #5
    891e:	01d2      	lsls	r2, r2, #7
    8920:	490a      	ldr	r1, [pc, #40]	; (894c <at25dfx_chip_set_global_sector_protect+0xe8>)
    8922:	468c      	mov	ip, r1
    8924:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8926:	211f      	movs	r1, #31
    8928:	400b      	ands	r3, r1
    892a:	391e      	subs	r1, #30
    892c:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    892e:	6191      	str	r1, [r2, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    8930:	6823      	ldr	r3, [r4, #0]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
    8932:	2200      	movs	r2, #0
    8934:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    8936:	2000      	movs	r0, #0
    8938:	e002      	b.n	8940 <at25dfx_chip_set_global_sector_protect+0xdc>
    893a:	4b03      	ldr	r3, [pc, #12]	; (8948 <at25dfx_chip_set_global_sector_protect+0xe4>)
    893c:	4798      	blx	r3

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
    893e:	2005      	movs	r0, #5
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
    8940:	b002      	add	sp, #8
    8942:	bd70      	pop	{r4, r5, r6, pc}
    8944:	0000bd69 	.word	0x0000bd69
    8948:	0000bda9 	.word	0x0000bda9
    894c:	41004400 	.word	0x41004400
    8950:	0000ca35 	.word	0x0000ca35

00008954 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    8954:	b530      	push	{r4, r5, lr}
    8956:	b083      	sub	sp, #12
    8958:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    895a:	6805      	ldr	r5, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    895c:	4b1c      	ldr	r3, [pc, #112]	; (89d0 <at25dfx_chip_sleep+0x7c>)
    895e:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
    8960:	792b      	ldrb	r3, [r5, #4]
    8962:	2b00      	cmp	r3, #0
    8964:	d12e      	bne.n	89c4 <at25dfx_chip_sleep+0x70>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
    8966:	3301      	adds	r3, #1
    8968:	712b      	strb	r3, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    896a:	4b1a      	ldr	r3, [pc, #104]	; (89d4 <at25dfx_chip_sleep+0x80>)
    896c:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    896e:	23b9      	movs	r3, #185	; 0xb9
    8970:	466a      	mov	r2, sp
    8972:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    8974:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8976:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8978:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    897a:	2900      	cmp	r1, #0
    897c:	d104      	bne.n	8988 <at25dfx_chip_sleep+0x34>
		return &(ports[port_index]->Group[group_index]);
    897e:	095a      	lsrs	r2, r3, #5
    8980:	01d2      	lsls	r2, r2, #7
    8982:	4915      	ldr	r1, [pc, #84]	; (89d8 <at25dfx_chip_sleep+0x84>)
    8984:	468c      	mov	ip, r1
    8986:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8988:	211f      	movs	r1, #31
    898a:	400b      	ands	r3, r1
    898c:	391e      	subs	r1, #30
    898e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8990:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    8992:	2201      	movs	r2, #1
    8994:	4669      	mov	r1, sp
    8996:	6820      	ldr	r0, [r4, #0]
    8998:	4b10      	ldr	r3, [pc, #64]	; (89dc <at25dfx_chip_sleep+0x88>)
    899a:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    899c:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    899e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    89a0:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    89a2:	2900      	cmp	r1, #0
    89a4:	d104      	bne.n	89b0 <at25dfx_chip_sleep+0x5c>
		return &(ports[port_index]->Group[group_index]);
    89a6:	095a      	lsrs	r2, r3, #5
    89a8:	01d2      	lsls	r2, r2, #7
    89aa:	490b      	ldr	r1, [pc, #44]	; (89d8 <at25dfx_chip_sleep+0x84>)
    89ac:	468c      	mov	ip, r1
    89ae:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    89b0:	211f      	movs	r1, #31
    89b2:	400b      	ands	r3, r1
    89b4:	391e      	subs	r1, #30
    89b6:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    89b8:	6191      	str	r1, [r2, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    89ba:	6823      	ldr	r3, [r4, #0]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
    89bc:	2200      	movs	r2, #0
    89be:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    89c0:	2000      	movs	r0, #0
    89c2:	e002      	b.n	89ca <at25dfx_chip_sleep+0x76>
    89c4:	4b03      	ldr	r3, [pc, #12]	; (89d4 <at25dfx_chip_sleep+0x80>)
    89c6:	4798      	blx	r3

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
    89c8:	2005      	movs	r0, #5
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
    89ca:	b003      	add	sp, #12
    89cc:	bd30      	pop	{r4, r5, pc}
    89ce:	46c0      	nop			; (mov r8, r8)
    89d0:	0000bd69 	.word	0x0000bd69
    89d4:	0000bda9 	.word	0x0000bda9
    89d8:	41004400 	.word	0x41004400
    89dc:	0000ca35 	.word	0x0000ca35

000089e0 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    89e0:	b530      	push	{r4, r5, lr}
    89e2:	b083      	sub	sp, #12
    89e4:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    89e6:	6805      	ldr	r5, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    89e8:	4b1c      	ldr	r3, [pc, #112]	; (8a5c <at25dfx_chip_wake+0x7c>)
    89ea:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
    89ec:	792b      	ldrb	r3, [r5, #4]
    89ee:	2b00      	cmp	r3, #0
    89f0:	d12e      	bne.n	8a50 <at25dfx_chip_wake+0x70>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
    89f2:	3301      	adds	r3, #1
    89f4:	712b      	strb	r3, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    89f6:	4b1a      	ldr	r3, [pc, #104]	; (8a60 <at25dfx_chip_wake+0x80>)
    89f8:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    89fa:	23ab      	movs	r3, #171	; 0xab
    89fc:	466a      	mov	r2, sp
    89fe:	7013      	strb	r3, [r2, #0]
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, false);
    8a00:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8a02:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8a04:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8a06:	2900      	cmp	r1, #0
    8a08:	d104      	bne.n	8a14 <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
    8a0a:	095a      	lsrs	r2, r3, #5
    8a0c:	01d2      	lsls	r2, r2, #7
    8a0e:	4915      	ldr	r1, [pc, #84]	; (8a64 <at25dfx_chip_wake+0x84>)
    8a10:	468c      	mov	ip, r1
    8a12:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8a14:	211f      	movs	r1, #31
    8a16:	400b      	ands	r3, r1
    8a18:	391e      	subs	r1, #30
    8a1a:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8a1c:	6151      	str	r1, [r2, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    8a1e:	2201      	movs	r2, #1
    8a20:	4669      	mov	r1, sp
    8a22:	6820      	ldr	r0, [r4, #0]
    8a24:	4b10      	ldr	r3, [pc, #64]	; (8a68 <at25dfx_chip_wake+0x88>)
    8a26:	4798      	blx	r3
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
    8a28:	7963      	ldrb	r3, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8a2a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8a2c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8a2e:	2900      	cmp	r1, #0
    8a30:	d104      	bne.n	8a3c <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
    8a32:	095a      	lsrs	r2, r3, #5
    8a34:	01d2      	lsls	r2, r2, #7
    8a36:	490b      	ldr	r1, [pc, #44]	; (8a64 <at25dfx_chip_wake+0x84>)
    8a38:	468c      	mov	ip, r1
    8a3a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8a3c:	211f      	movs	r1, #31
    8a3e:	400b      	ands	r3, r1
    8a40:	391e      	subs	r1, #30
    8a42:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    8a44:	6191      	str	r1, [r2, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    8a46:	6823      	ldr	r3, [r4, #0]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
    8a48:	2200      	movs	r2, #0
    8a4a:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    8a4c:	2000      	movs	r0, #0
    8a4e:	e002      	b.n	8a56 <at25dfx_chip_wake+0x76>
    8a50:	4b03      	ldr	r3, [pc, #12]	; (8a60 <at25dfx_chip_wake+0x80>)
    8a52:	4798      	blx	r3

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
	if (status == STATUS_BUSY) {
		return status;
    8a54:	2005      	movs	r0, #5
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
    8a56:	b003      	add	sp, #12
    8a58:	bd30      	pop	{r4, r5, pc}
    8a5a:	46c0      	nop			; (mov r8, r8)
    8a5c:	0000bd69 	.word	0x0000bd69
    8a60:	0000bda9 	.word	0x0000bda9
    8a64:	41004400 	.word	0x41004400
    8a68:	0000ca35 	.word	0x0000ca35

00008a6c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    8a6c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    8a6e:	2000      	movs	r0, #0
    8a70:	4b08      	ldr	r3, [pc, #32]	; (8a94 <delay_init+0x28>)
    8a72:	4798      	blx	r3
    8a74:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    8a76:	4c08      	ldr	r4, [pc, #32]	; (8a98 <delay_init+0x2c>)
    8a78:	21fa      	movs	r1, #250	; 0xfa
    8a7a:	0089      	lsls	r1, r1, #2
    8a7c:	47a0      	blx	r4
    8a7e:	4b07      	ldr	r3, [pc, #28]	; (8a9c <delay_init+0x30>)
    8a80:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    8a82:	4907      	ldr	r1, [pc, #28]	; (8aa0 <delay_init+0x34>)
    8a84:	0028      	movs	r0, r5
    8a86:	47a0      	blx	r4
    8a88:	4b06      	ldr	r3, [pc, #24]	; (8aa4 <delay_init+0x38>)
    8a8a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    8a8c:	2205      	movs	r2, #5
    8a8e:	4b06      	ldr	r3, [pc, #24]	; (8aa8 <delay_init+0x3c>)
    8a90:	601a      	str	r2, [r3, #0]
}
    8a92:	bd70      	pop	{r4, r5, r6, pc}
    8a94:	0000d7dd 	.word	0x0000d7dd
    8a98:	00011355 	.word	0x00011355
    8a9c:	20000004 	.word	0x20000004
    8aa0:	000f4240 	.word	0x000f4240
    8aa4:	20000000 	.word	0x20000000
    8aa8:	e000e010 	.word	0xe000e010

00008aac <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    8aac:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    8aae:	4b08      	ldr	r3, [pc, #32]	; (8ad0 <delay_cycles_ms+0x24>)
    8ab0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    8ab2:	4a08      	ldr	r2, [pc, #32]	; (8ad4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    8ab4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    8ab6:	2180      	movs	r1, #128	; 0x80
    8ab8:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    8aba:	e006      	b.n	8aca <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
    8abc:	2c00      	cmp	r4, #0
    8abe:	d004      	beq.n	8aca <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
    8ac0:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    8ac2:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    8ac4:	6813      	ldr	r3, [r2, #0]
    8ac6:	420b      	tst	r3, r1
    8ac8:	d0fc      	beq.n	8ac4 <delay_cycles_ms+0x18>
    8aca:	3801      	subs	r0, #1
    8acc:	d2f6      	bcs.n	8abc <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    8ace:	bd30      	pop	{r4, r5, pc}
    8ad0:	20000004 	.word	0x20000004
    8ad4:	e000e010 	.word	0xe000e010

00008ad8 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    8ad8:	b510      	push	{r4, lr}
	if (gpfIsr) {
    8ada:	4b03      	ldr	r3, [pc, #12]	; (8ae8 <chip_isr+0x10>)
    8adc:	681b      	ldr	r3, [r3, #0]
    8ade:	2b00      	cmp	r3, #0
    8ae0:	d000      	beq.n	8ae4 <chip_isr+0xc>
		gpfIsr();
    8ae2:	4798      	blx	r3
	}
}
    8ae4:	bd10      	pop	{r4, pc}
    8ae6:	46c0      	nop			; (mov r8, r8)
    8ae8:	200000a0 	.word	0x200000a0

00008aec <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    8aec:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    8aee:	2800      	cmp	r0, #0
    8af0:	d006      	beq.n	8b00 <nm_bsp_sleep+0x14>
    8af2:	0004      	movs	r4, r0
		delay_ms(1);
    8af4:	4d03      	ldr	r5, [pc, #12]	; (8b04 <nm_bsp_sleep+0x18>)
    8af6:	2001      	movs	r0, #1
    8af8:	47a8      	blx	r5
    8afa:	3c01      	subs	r4, #1
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
    8afc:	2c00      	cmp	r4, #0
    8afe:	d1fa      	bne.n	8af6 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
    8b00:	bd70      	pop	{r4, r5, r6, pc}
    8b02:	46c0      	nop			; (mov r8, r8)
    8b04:	00008aad 	.word	0x00008aad

00008b08 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    8b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8b0a:	4c08      	ldr	r4, [pc, #32]	; (8b2c <nm_bsp_reset+0x24>)
    8b0c:	2780      	movs	r7, #128	; 0x80
    8b0e:	057f      	lsls	r7, r7, #21
    8b10:	6167      	str	r7, [r4, #20]
    8b12:	2680      	movs	r6, #128	; 0x80
    8b14:	0536      	lsls	r6, r6, #20
    8b16:	6166      	str	r6, [r4, #20]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
	nm_bsp_sleep(100);
    8b18:	2064      	movs	r0, #100	; 0x64
    8b1a:	4d05      	ldr	r5, [pc, #20]	; (8b30 <nm_bsp_reset+0x28>)
    8b1c:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    8b1e:	61a7      	str	r7, [r4, #24]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
	nm_bsp_sleep(100);
    8b20:	2064      	movs	r0, #100	; 0x64
    8b22:	47a8      	blx	r5
    8b24:	61a6      	str	r6, [r4, #24]
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
	nm_bsp_sleep(100);
    8b26:	2064      	movs	r0, #100	; 0x64
    8b28:	47a8      	blx	r5
}
    8b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b2c:	41004400 	.word	0x41004400
    8b30:	00008aed 	.word	0x00008aed

00008b34 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    8b34:	b570      	push	{r4, r5, r6, lr}
    8b36:	b082      	sub	sp, #8
	gpfIsr = NULL;
    8b38:	2300      	movs	r3, #0
    8b3a:	4a16      	ldr	r2, [pc, #88]	; (8b94 <nm_bsp_init+0x60>)
    8b3c:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    8b3e:	ac01      	add	r4, sp, #4
    8b40:	2501      	movs	r5, #1
    8b42:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    8b44:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    8b46:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    8b48:	0021      	movs	r1, r4
    8b4a:	201b      	movs	r0, #27
    8b4c:	4e12      	ldr	r6, [pc, #72]	; (8b98 <nm_bsp_init+0x64>)
    8b4e:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    8b50:	0021      	movs	r1, r4
    8b52:	201c      	movs	r0, #28
    8b54:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    8b56:	0021      	movs	r1, r4
    8b58:	2028      	movs	r0, #40	; 0x28
    8b5a:	47b0      	blx	r6

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8b5c:	4b0f      	ldr	r3, [pc, #60]	; (8b9c <nm_bsp_init+0x68>)
    8b5e:	2280      	movs	r2, #128	; 0x80
    8b60:	0552      	lsls	r2, r2, #21
    8b62:	615a      	str	r2, [r3, #20]
    8b64:	2280      	movs	r2, #128	; 0x80
    8b66:	0512      	lsls	r2, r2, #20
    8b68:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    8b6a:	4b0d      	ldr	r3, [pc, #52]	; (8ba0 <nm_bsp_init+0x6c>)
    8b6c:	681b      	ldr	r3, [r3, #0]
    8b6e:	421d      	tst	r5, r3
    8b70:	d003      	beq.n	8b7a <nm_bsp_init+0x46>
    8b72:	4b0b      	ldr	r3, [pc, #44]	; (8ba0 <nm_bsp_init+0x6c>)
    8b74:	681b      	ldr	r3, [r3, #0]
    8b76:	079b      	lsls	r3, r3, #30
    8b78:	d401      	bmi.n	8b7e <nm_bsp_init+0x4a>
	    delay_init();
    8b7a:	4b0a      	ldr	r3, [pc, #40]	; (8ba4 <nm_bsp_init+0x70>)
    8b7c:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    8b7e:	4b0a      	ldr	r3, [pc, #40]	; (8ba8 <nm_bsp_init+0x74>)
    8b80:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    8b82:	2201      	movs	r2, #1
    8b84:	4b09      	ldr	r3, [pc, #36]	; (8bac <nm_bsp_init+0x78>)
    8b86:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    8b88:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    8b8c:	b662      	cpsie	i

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    8b8e:	2000      	movs	r0, #0
    8b90:	b002      	add	sp, #8
    8b92:	bd70      	pop	{r4, r5, r6, pc}
    8b94:	200000a0 	.word	0x200000a0
    8b98:	0000c251 	.word	0x0000c251
    8b9c:	41004400 	.word	0x41004400
    8ba0:	e000e010 	.word	0xe000e010
    8ba4:	00008a6d 	.word	0x00008a6d
    8ba8:	00008b09 	.word	0x00008b09
    8bac:	2000000a 	.word	0x2000000a

00008bb0 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    8bb0:	b510      	push	{r4, lr}
    8bb2:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    8bb4:	4b0e      	ldr	r3, [pc, #56]	; (8bf0 <nm_bsp_register_isr+0x40>)
    8bb6:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    8bb8:	ac01      	add	r4, sp, #4
    8bba:	0020      	movs	r0, r4
    8bbc:	4b0d      	ldr	r3, [pc, #52]	; (8bf4 <nm_bsp_register_isr+0x44>)
    8bbe:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    8bc0:	2329      	movs	r3, #41	; 0x29
    8bc2:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    8bc4:	2300      	movs	r3, #0
    8bc6:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    8bc8:	3301      	adds	r3, #1
    8bca:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    8bcc:	3301      	adds	r3, #1
    8bce:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    8bd0:	0021      	movs	r1, r4
    8bd2:	2009      	movs	r0, #9
    8bd4:	4b08      	ldr	r3, [pc, #32]	; (8bf8 <nm_bsp_register_isr+0x48>)
    8bd6:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    8bd8:	2200      	movs	r2, #0
    8bda:	2109      	movs	r1, #9
    8bdc:	4807      	ldr	r0, [pc, #28]	; (8bfc <nm_bsp_register_isr+0x4c>)
    8bde:	4b08      	ldr	r3, [pc, #32]	; (8c00 <nm_bsp_register_isr+0x50>)
    8be0:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    8be2:	2100      	movs	r1, #0
    8be4:	2009      	movs	r0, #9
    8be6:	4b07      	ldr	r3, [pc, #28]	; (8c04 <nm_bsp_register_isr+0x54>)
    8be8:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    8bea:	b004      	add	sp, #16
    8bec:	bd10      	pop	{r4, pc}
    8bee:	46c0      	nop			; (mov r8, r8)
    8bf0:	200000a0 	.word	0x200000a0
    8bf4:	0000bf31 	.word	0x0000bf31
    8bf8:	0000bf45 	.word	0x0000bf45
    8bfc:	00008ad9 	.word	0x00008ad9
    8c00:	0000bdd9 	.word	0x0000bdd9
    8c04:	0000be05 	.word	0x0000be05

00008c08 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    8c08:	b510      	push	{r4, lr}
	if (u8Enable) {
    8c0a:	2800      	cmp	r0, #0
    8c0c:	d004      	beq.n	8c18 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    8c0e:	2100      	movs	r1, #0
    8c10:	2009      	movs	r0, #9
    8c12:	4b04      	ldr	r3, [pc, #16]	; (8c24 <nm_bsp_interrupt_ctrl+0x1c>)
    8c14:	4798      	blx	r3
    8c16:	e003      	b.n	8c20 <nm_bsp_interrupt_ctrl+0x18>
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    8c18:	2100      	movs	r1, #0
    8c1a:	2009      	movs	r0, #9
    8c1c:	4b02      	ldr	r3, [pc, #8]	; (8c28 <nm_bsp_interrupt_ctrl+0x20>)
    8c1e:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    8c20:	bd10      	pop	{r4, pc}
    8c22:	46c0      	nop			; (mov r8, r8)
    8c24:	0000be05 	.word	0x0000be05
    8c28:	0000be25 	.word	0x0000be25

00008c2c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    8c2c:	b530      	push	{r4, r5, lr}
    8c2e:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    8c30:	4c30      	ldr	r4, [pc, #192]	; (8cf4 <nm_bus_init+0xc8>)
    8c32:	230e      	movs	r3, #14
    8c34:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    8c36:	2300      	movs	r3, #0
    8c38:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    8c3a:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    8c3c:	a901      	add	r1, sp, #4
    8c3e:	2201      	movs	r2, #1
    8c40:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    8c42:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    8c44:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    8c46:	200e      	movs	r0, #14
    8c48:	4b2b      	ldr	r3, [pc, #172]	; (8cf8 <nm_bus_init+0xcc>)
    8c4a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    8c4c:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8c4e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8c50:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8c52:	2900      	cmp	r1, #0
    8c54:	d104      	bne.n	8c60 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    8c56:	095a      	lsrs	r2, r3, #5
    8c58:	01d2      	lsls	r2, r2, #7
    8c5a:	4928      	ldr	r1, [pc, #160]	; (8cfc <nm_bus_init+0xd0>)
    8c5c:	468c      	mov	ip, r1
    8c5e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8c60:	211f      	movs	r1, #31
    8c62:	400b      	ands	r3, r1
    8c64:	391e      	subs	r1, #30
    8c66:	0008      	movs	r0, r1
    8c68:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    8c6a:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    8c6c:	ac02      	add	r4, sp, #8
    8c6e:	7021      	strb	r1, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    8c70:	2300      	movs	r3, #0
    8c72:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    8c74:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    8c76:	22c0      	movs	r2, #192	; 0xc0
    8c78:	0392      	lsls	r2, r2, #14
    8c7a:	9205      	str	r2, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    8c7c:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    8c7e:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    8c80:	74a1      	strb	r1, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    8c82:	74e1      	strb	r1, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    8c84:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    8c86:	2224      	movs	r2, #36	; 0x24
    8c88:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    8c8a:	3a18      	subs	r2, #24
    8c8c:	2100      	movs	r1, #0
    8c8e:	a808      	add	r0, sp, #32
    8c90:	4b1b      	ldr	r3, [pc, #108]	; (8d00 <nm_bus_init+0xd4>)
    8c92:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    8c94:	4b1b      	ldr	r3, [pc, #108]	; (8d04 <nm_bus_init+0xd8>)
    8c96:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    8c98:	4b1b      	ldr	r3, [pc, #108]	; (8d08 <nm_bus_init+0xdc>)
    8c9a:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    8c9c:	2301      	movs	r3, #1
    8c9e:	425b      	negs	r3, r3
    8ca0:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    8ca2:	4b1a      	ldr	r3, [pc, #104]	; (8d0c <nm_bus_init+0xe0>)
    8ca4:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    8ca6:	4b1a      	ldr	r3, [pc, #104]	; (8d10 <nm_bus_init+0xe4>)
    8ca8:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    8caa:	0022      	movs	r2, r4
    8cac:	4919      	ldr	r1, [pc, #100]	; (8d14 <nm_bus_init+0xe8>)
    8cae:	481a      	ldr	r0, [pc, #104]	; (8d18 <nm_bus_init+0xec>)
    8cb0:	4b1a      	ldr	r3, [pc, #104]	; (8d1c <nm_bus_init+0xf0>)
    8cb2:	4798      	blx	r3
    8cb4:	2800      	cmp	r0, #0
    8cb6:	d119      	bne.n	8cec <nm_bus_init+0xc0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8cb8:	4d17      	ldr	r5, [pc, #92]	; (8d18 <nm_bus_init+0xec>)
    8cba:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8cbc:	0020      	movs	r0, r4
    8cbe:	4b18      	ldr	r3, [pc, #96]	; (8d20 <nm_bus_init+0xf4>)
    8cc0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8cc2:	231f      	movs	r3, #31
    8cc4:	4018      	ands	r0, r3
    8cc6:	3b1e      	subs	r3, #30
    8cc8:	4083      	lsls	r3, r0
    8cca:	4a16      	ldr	r2, [pc, #88]	; (8d24 <nm_bus_init+0xf8>)
    8ccc:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8cce:	682a      	ldr	r2, [r5, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    8cd0:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    8cd2:	2b00      	cmp	r3, #0
    8cd4:	d1fc      	bne.n	8cd0 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    8cd6:	6822      	ldr	r2, [r4, #0]
    8cd8:	3302      	adds	r3, #2
    8cda:	4313      	orrs	r3, r2
    8cdc:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    8cde:	4b12      	ldr	r3, [pc, #72]	; (8d28 <nm_bus_init+0xfc>)
    8ce0:	4798      	blx	r3
	nm_bsp_sleep(1);
    8ce2:	2001      	movs	r0, #1
    8ce4:	4b11      	ldr	r3, [pc, #68]	; (8d2c <nm_bus_init+0x100>)
    8ce6:	4798      	blx	r3
#endif
	return result;
    8ce8:	2000      	movs	r0, #0
    8cea:	e001      	b.n	8cf0 <nm_bus_init+0xc4>
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
		return M2M_ERR_BUS_FAIL;
    8cec:	2006      	movs	r0, #6
    8cee:	4240      	negs	r0, r0

	nm_bsp_reset();
	nm_bsp_sleep(1);
#endif
	return result;
}
    8cf0:	b011      	add	sp, #68	; 0x44
    8cf2:	bd30      	pop	{r4, r5, pc}
    8cf4:	200002c8 	.word	0x200002c8
    8cf8:	0000c251 	.word	0x0000c251
    8cfc:	41004400 	.word	0x41004400
    8d00:	00011755 	.word	0x00011755
    8d04:	000c0002 	.word	0x000c0002
    8d08:	000d0002 	.word	0x000d0002
    8d0c:	000f0002 	.word	0x000f0002
    8d10:	00b71b00 	.word	0x00b71b00
    8d14:	42001000 	.word	0x42001000
    8d18:	200002cc 	.word	0x200002cc
    8d1c:	0000c6c9 	.word	0x0000c6c9
    8d20:	0000c63d 	.word	0x0000c63d
    8d24:	e000e100 	.word	0xe000e100
    8d28:	00008b09 	.word	0x00008b09
    8d2c:	00008aed 	.word	0x00008aed

00008d30 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    8d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d32:	465f      	mov	r7, fp
    8d34:	4656      	mov	r6, sl
    8d36:	464d      	mov	r5, r9
    8d38:	4644      	mov	r4, r8
    8d3a:	b4f0      	push	{r4, r5, r6, r7}
    8d3c:	b085      	sub	sp, #20
	sint8 s8Ret = 0;
	switch(u8Cmd)
    8d3e:	2803      	cmp	r0, #3
    8d40:	d15c      	bne.n	8dfc <nm_bus_ioctl+0xcc>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    8d42:	680f      	ldr	r7, [r1, #0]
    8d44:	684e      	ldr	r6, [r1, #4]
    8d46:	890d      	ldrh	r5, [r1, #8]
struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
    8d48:	2200      	movs	r2, #0
    8d4a:	ab02      	add	r3, sp, #8
    8d4c:	71da      	strb	r2, [r3, #7]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    8d4e:	2e00      	cmp	r6, #0
    8d50:	d102      	bne.n	8d58 <nm_bus_ioctl+0x28>
    8d52:	2f00      	cmp	r7, #0
    8d54:	d174      	bne.n	8e40 <nm_bus_ioctl+0x110>
    8d56:	e048      	b.n	8dea <nm_bus_ioctl+0xba>
    8d58:	2d00      	cmp	r5, #0
    8d5a:	d049      	beq.n	8df0 <nm_bus_ioctl+0xc0>
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    8d5c:	2300      	movs	r3, #0
    8d5e:	4698      	mov	r8, r3

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
		return M2M_ERR_INVALID_ARG;
	}

	if (pu8Mosi == NULL) {
    8d60:	2f00      	cmp	r7, #0
    8d62:	d103      	bne.n	8d6c <nm_bus_ioctl+0x3c>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
    8d64:	3301      	adds	r3, #1
    8d66:	4698      	mov	r8, r3
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
		return M2M_ERR_INVALID_ARG;
	}

	if (pu8Mosi == NULL) {
		pu8Mosi = &u8Dummy;
    8d68:	ab02      	add	r3, sp, #8
    8d6a:	1ddf      	adds	r7, r3, #7
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    8d6c:	2400      	movs	r4, #0

	if (pu8Mosi == NULL) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	if(pu8Miso == NULL) {
    8d6e:	2e00      	cmp	r6, #0
    8d70:	d153      	bne.n	8e1a <nm_bus_ioctl+0xea>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
    8d72:	3401      	adds	r4, #1
	if (pu8Mosi == NULL) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	if(pu8Miso == NULL) {
		pu8Miso = &u8Dummy;
    8d74:	ab02      	add	r3, sp, #8
    8d76:	1dde      	adds	r6, r3, #7
    8d78:	e04f      	b.n	8e1a <nm_bus_ioctl+0xea>
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
		txd_data = *pu8Mosi;
    8d7a:	783c      	ldrb	r4, [r7, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8d7c:	4653      	mov	r3, sl
    8d7e:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8d80:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    8d82:	4201      	tst	r1, r0
    8d84:	d0fc      	beq.n	8d80 <nm_bus_ioctl+0x50>
    8d86:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    8d88:	4201      	tst	r1, r0
    8d8a:	d0fc      	beq.n	8d86 <nm_bus_ioctl+0x56>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8d8c:	629c      	str	r4, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8d8e:	7e19      	ldrb	r1, [r3, #24]
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    8d90:	4211      	tst	r1, r2
    8d92:	d0fc      	beq.n	8d8e <nm_bus_ioctl+0x5e>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8d94:	4649      	mov	r1, r9
    8d96:	798c      	ldrb	r4, [r1, #6]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8d98:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    8d9a:	4211      	tst	r1, r2
    8d9c:	d0fc      	beq.n	8d98 <nm_bus_ioctl+0x68>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8d9e:	8b59      	ldrh	r1, [r3, #26]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    8da0:	2500      	movs	r5, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8da2:	4211      	tst	r1, r2
    8da4:	d001      	beq.n	8daa <nm_bus_ioctl+0x7a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8da6:	835a      	strh	r2, [r3, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    8da8:	351e      	adds	r5, #30
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8daa:	2c01      	cmp	r4, #1
    8dac:	d103      	bne.n	8db6 <nm_bus_ioctl+0x86>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8dae:	6a99      	ldr	r1, [r3, #40]	; 0x28
    8db0:	05c9      	lsls	r1, r1, #23
    8db2:	0dc9      	lsrs	r1, r1, #23
    8db4:	e001      	b.n	8dba <nm_bus_ioctl+0x8a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8db6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    8db8:	b2c9      	uxtb	r1, r1
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    8dba:	2d00      	cmp	r5, #0
    8dbc:	d1ec      	bne.n	8d98 <nm_bus_ioctl+0x68>
			;
		*pu8Miso = rxd_data;
    8dbe:	7031      	strb	r1, [r6, #0]
			
		u16Sz--;
    8dc0:	9d01      	ldr	r5, [sp, #4]
    8dc2:	3d01      	subs	r5, #1
    8dc4:	b2ab      	uxth	r3, r5
    8dc6:	9301      	str	r3, [sp, #4]
		if (!u8SkipMiso)
			pu8Miso++;
    8dc8:	445e      	add	r6, fp
		if (!u8SkipMosi)
			pu8Mosi++;
    8dca:	4447      	add	r7, r8
		u8SkipMiso = 1;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    8dcc:	2b00      	cmp	r3, #0
    8dce:	d1d4      	bne.n	8d7a <nm_bus_ioctl+0x4a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8dd0:	4b21      	ldr	r3, [pc, #132]	; (8e58 <nm_bus_ioctl+0x128>)
    8dd2:	6819      	ldr	r1, [r3, #0]
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    8dd4:	2202      	movs	r2, #2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    8dd6:	7e0b      	ldrb	r3, [r1, #24]
    8dd8:	4213      	tst	r3, r2
    8dda:	d0fc      	beq.n	8dd6 <nm_bus_ioctl+0xa6>
		;

	spi_select_slave(&master, &slave_inst, false);
    8ddc:	2200      	movs	r2, #0
    8dde:	491f      	ldr	r1, [pc, #124]	; (8e5c <nm_bus_ioctl+0x12c>)
    8de0:	481d      	ldr	r0, [pc, #116]	; (8e58 <nm_bus_ioctl+0x128>)
    8de2:	4b1f      	ldr	r3, [pc, #124]	; (8e60 <nm_bus_ioctl+0x130>)
    8de4:	4798      	blx	r3

	return M2M_SUCCESS;
    8de6:	2000      	movs	r0, #0
    8de8:	e02f      	b.n	8e4a <nm_bus_ioctl+0x11a>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
		return M2M_ERR_INVALID_ARG;
    8dea:	200f      	movs	r0, #15
    8dec:	4240      	negs	r0, r0
    8dee:	e02c      	b.n	8e4a <nm_bus_ioctl+0x11a>
    8df0:	200f      	movs	r0, #15
    8df2:	4240      	negs	r0, r0
    8df4:	e029      	b.n	8e4a <nm_bus_ioctl+0x11a>
    8df6:	200f      	movs	r0, #15
    8df8:	4240      	negs	r0, r0
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
    8dfa:	e026      	b.n	8e4a <nm_bus_ioctl+0x11a>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("invalide ioclt cmd\n");
    8dfc:	220e      	movs	r2, #14
    8dfe:	32ff      	adds	r2, #255	; 0xff
    8e00:	4918      	ldr	r1, [pc, #96]	; (8e64 <nm_bus_ioctl+0x134>)
    8e02:	4819      	ldr	r0, [pc, #100]	; (8e68 <nm_bus_ioctl+0x138>)
    8e04:	4b19      	ldr	r3, [pc, #100]	; (8e6c <nm_bus_ioctl+0x13c>)
    8e06:	4798      	blx	r3
    8e08:	4819      	ldr	r0, [pc, #100]	; (8e70 <nm_bus_ioctl+0x140>)
    8e0a:	4b1a      	ldr	r3, [pc, #104]	; (8e74 <nm_bus_ioctl+0x144>)
    8e0c:	4798      	blx	r3
    8e0e:	200d      	movs	r0, #13
    8e10:	4b19      	ldr	r3, [pc, #100]	; (8e78 <nm_bus_ioctl+0x148>)
    8e12:	4798      	blx	r3
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
    8e14:	2001      	movs	r0, #1
    8e16:	4240      	negs	r0, r0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
    8e18:	e017      	b.n	8e4a <nm_bus_ioctl+0x11a>
	if(pu8Miso == NULL) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}

	spi_select_slave(&master, &slave_inst, true);
    8e1a:	2201      	movs	r2, #1
    8e1c:	490f      	ldr	r1, [pc, #60]	; (8e5c <nm_bus_ioctl+0x12c>)
    8e1e:	480e      	ldr	r0, [pc, #56]	; (8e58 <nm_bus_ioctl+0x128>)
    8e20:	4b0f      	ldr	r3, [pc, #60]	; (8e60 <nm_bus_ioctl+0x130>)
    8e22:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8e24:	4b0c      	ldr	r3, [pc, #48]	; (8e58 <nm_bus_ioctl+0x128>)
    8e26:	469a      	mov	sl, r3

	while (u16Sz) {
		txd_data = *pu8Mosi;
		while (!spi_is_ready_to_write(&master))
    8e28:	2001      	movs	r0, #1
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    8e2a:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8e2c:	4699      	mov	r9, r3
			;
		*pu8Miso = rxd_data;
			
		u16Sz--;
		if (!u8SkipMiso)
			pu8Miso++;
    8e2e:	4263      	negs	r3, r4
    8e30:	4163      	adcs	r3, r4
    8e32:	469b      	mov	fp, r3
		if (!u8SkipMosi)
			pu8Mosi++;
    8e34:	4641      	mov	r1, r8
    8e36:	424b      	negs	r3, r1
    8e38:	4159      	adcs	r1, r3
    8e3a:	4688      	mov	r8, r1
    8e3c:	9501      	str	r5, [sp, #4]
    8e3e:	e79c      	b.n	8d7a <nm_bus_ioctl+0x4a>
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    8e40:	2d00      	cmp	r5, #0
    8e42:	d0d8      	beq.n	8df6 <nm_bus_ioctl+0xc6>
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    8e44:	2300      	movs	r3, #0
    8e46:	4698      	mov	r8, r3
    8e48:	e790      	b.n	8d6c <nm_bus_ioctl+0x3c>
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    8e4a:	b005      	add	sp, #20
    8e4c:	bc3c      	pop	{r2, r3, r4, r5}
    8e4e:	4690      	mov	r8, r2
    8e50:	4699      	mov	r9, r3
    8e52:	46a2      	mov	sl, r4
    8e54:	46ab      	mov	fp, r5
    8e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e58:	200002cc 	.word	0x200002cc
    8e5c:	200002c8 	.word	0x200002c8
    8e60:	0000c945 	.word	0x0000c945
    8e64:	00012e6c 	.word	0x00012e6c
    8e68:	00012e7c 	.word	0x00012e7c
    8e6c:	0001189d 	.word	0x0001189d
    8e70:	00012e90 	.word	0x00012e90
    8e74:	000119bd 	.word	0x000119bd
    8e78:	000118d1 	.word	0x000118d1

00008e7c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    8e7c:	b530      	push	{r4, r5, lr}
    8e7e:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    8e80:	ab01      	add	r3, sp, #4
    8e82:	2200      	movs	r2, #0
    8e84:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
    8e86:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    8e88:	705a      	strb	r2, [r3, #1]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8e8a:	4d13      	ldr	r5, [pc, #76]	; (8ed8 <nm_bus_deinit+0x5c>)
    8e8c:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    8e8e:	0020      	movs	r0, r4
    8e90:	4b12      	ldr	r3, [pc, #72]	; (8edc <nm_bus_deinit+0x60>)
    8e92:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8e94:	231f      	movs	r3, #31
    8e96:	4018      	ands	r0, r3
    8e98:	3b1e      	subs	r3, #30
    8e9a:	4083      	lsls	r3, r0
    8e9c:	2280      	movs	r2, #128	; 0x80
    8e9e:	4910      	ldr	r1, [pc, #64]	; (8ee0 <nm_bus_deinit+0x64>)
    8ea0:	508b      	str	r3, [r1, r2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8ea2:	682a      	ldr	r2, [r5, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    8ea4:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    8ea6:	2b00      	cmp	r3, #0
    8ea8:	d1fc      	bne.n	8ea4 <nm_bus_deinit+0x28>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    8eaa:	338f      	adds	r3, #143	; 0x8f
    8eac:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    8eae:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    8eb0:	6823      	ldr	r3, [r4, #0]
    8eb2:	2202      	movs	r2, #2
    8eb4:	4393      	bics	r3, r2
    8eb6:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    8eb8:	a901      	add	r1, sp, #4
    8eba:	200c      	movs	r0, #12
    8ebc:	4c09      	ldr	r4, [pc, #36]	; (8ee4 <nm_bus_deinit+0x68>)
    8ebe:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    8ec0:	a901      	add	r1, sp, #4
    8ec2:	200f      	movs	r0, #15
    8ec4:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    8ec6:	a901      	add	r1, sp, #4
    8ec8:	200d      	movs	r0, #13
    8eca:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    8ecc:	a901      	add	r1, sp, #4
    8ece:	200e      	movs	r0, #14
    8ed0:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    8ed2:	2000      	movs	r0, #0
    8ed4:	b003      	add	sp, #12
    8ed6:	bd30      	pop	{r4, r5, pc}
    8ed8:	200002cc 	.word	0x200002cc
    8edc:	0000c63d 	.word	0x0000c63d
    8ee0:	e000e100 	.word	0xe000e100
    8ee4:	0000c251 	.word	0x0000c251

00008ee8 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    8ee8:	2a00      	cmp	r2, #0
    8eea:	d006      	beq.n	8efa <m2m_memcpy+0x12>
    8eec:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    8eee:	780b      	ldrb	r3, [r1, #0]
    8ef0:	7003      	strb	r3, [r0, #0]
		pDst++;
    8ef2:	3001      	adds	r0, #1
		pSrc++;
    8ef4:	3101      	adds	r1, #1
	}while(--sz);
    8ef6:	4290      	cmp	r0, r2
    8ef8:	d1f9      	bne.n	8eee <m2m_memcpy+0x6>
}
    8efa:	4770      	bx	lr

00008efc <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    8efc:	2a00      	cmp	r2, #0
    8efe:	d004      	beq.n	8f0a <m2m_memset+0xe>
    8f00:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    8f02:	7001      	strb	r1, [r0, #0]
		pBuf++;
    8f04:	3001      	adds	r0, #1
	}while(--sz);
    8f06:	4290      	cmp	r0, r2
    8f08:	d1fb      	bne.n	8f02 <m2m_memset+0x6>
}
    8f0a:	4770      	bx	lr

00008f0c <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    8f0c:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    8f0e:	7802      	ldrb	r2, [r0, #0]
    8f10:	2a00      	cmp	r2, #0
    8f12:	d007      	beq.n	8f24 <m2m_strlen+0x18>
    8f14:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    8f16:	3001      	adds	r0, #1
    8f18:	b280      	uxth	r0, r0
		pcStr++;
    8f1a:	3301      	adds	r3, #1
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    8f1c:	781a      	ldrb	r2, [r3, #0]
    8f1e:	2a00      	cmp	r2, #0
    8f20:	d1f9      	bne.n	8f16 <m2m_strlen+0xa>
    8f22:	e000      	b.n	8f26 <m2m_strlen+0x1a>
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
    8f24:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
    8f26:	4770      	bx	lr

00008f28 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    8f28:	4a02      	ldr	r2, [pc, #8]	; (8f34 <isr+0xc>)
    8f2a:	78d3      	ldrb	r3, [r2, #3]
    8f2c:	3301      	adds	r3, #1
    8f2e:	b2db      	uxtb	r3, r3
    8f30:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    8f32:	4770      	bx	lr
    8f34:	20000308 	.word	0x20000308

00008f38 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    8f38:	4770      	bx	lr
    8f3a:	46c0      	nop			; (mov r8, r8)

00008f3c <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
    8f3c:	b500      	push	{lr}
    8f3e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;

	gstrHifCxt.u8HifRXDone = 0;
    8f40:	2200      	movs	r2, #0
    8f42:	4b0a      	ldr	r3, [pc, #40]	; (8f6c <hif_set_rx_done+0x30>)
    8f44:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    8f46:	2001      	movs	r0, #1
    8f48:	4b09      	ldr	r3, [pc, #36]	; (8f70 <hif_set_rx_done+0x34>)
    8f4a:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    8f4c:	a901      	add	r1, sp, #4
    8f4e:	4809      	ldr	r0, [pc, #36]	; (8f74 <hif_set_rx_done+0x38>)
    8f50:	4b09      	ldr	r3, [pc, #36]	; (8f78 <hif_set_rx_done+0x3c>)
    8f52:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    8f54:	2800      	cmp	r0, #0
    8f56:	d106      	bne.n	8f66 <hif_set_rx_done+0x2a>
	/* Set RX Done */
	reg |= NBIT1;
    8f58:	2102      	movs	r1, #2
    8f5a:	9b01      	ldr	r3, [sp, #4]
    8f5c:	4319      	orrs	r1, r3
    8f5e:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    8f60:	4804      	ldr	r0, [pc, #16]	; (8f74 <hif_set_rx_done+0x38>)
    8f62:	4b06      	ldr	r3, [pc, #24]	; (8f7c <hif_set_rx_done+0x40>)
    8f64:	4798      	blx	r3
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;

}
    8f66:	b003      	add	sp, #12
    8f68:	bd00      	pop	{pc}
    8f6a:	46c0      	nop			; (mov r8, r8)
    8f6c:	20000308 	.word	0x20000308
    8f70:	00008c09 	.word	0x00008c09
    8f74:	00001070 	.word	0x00001070
    8f78:	0000a359 	.word	0x0000a359
    8f7c:	0000a365 	.word	0x0000a365

00008f80 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    8f80:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    8f82:	4b0c      	ldr	r3, [pc, #48]	; (8fb4 <hif_chip_wake+0x34>)
    8f84:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    8f86:	2000      	movs	r0, #0
*/

sint8 hif_chip_wake(void)
{
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    8f88:	2b00      	cmp	r3, #0
    8f8a:	d111      	bne.n	8fb0 <hif_chip_wake+0x30>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    8f8c:	4b09      	ldr	r3, [pc, #36]	; (8fb4 <hif_chip_wake+0x34>)
    8f8e:	785b      	ldrb	r3, [r3, #1]
    8f90:	2b00      	cmp	r3, #0
    8f92:	d107      	bne.n	8fa4 <hif_chip_wake+0x24>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    8f94:	4b07      	ldr	r3, [pc, #28]	; (8fb4 <hif_chip_wake+0x34>)
    8f96:	781b      	ldrb	r3, [r3, #0]
    8f98:	2b00      	cmp	r3, #0
    8f9a:	d003      	beq.n	8fa4 <hif_chip_wake+0x24>
		{
			ret = chip_wake();
    8f9c:	4b06      	ldr	r3, [pc, #24]	; (8fb8 <hif_chip_wake+0x38>)
    8f9e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    8fa0:	2800      	cmp	r0, #0
    8fa2:	d105      	bne.n	8fb0 <hif_chip_wake+0x30>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    8fa4:	4a03      	ldr	r2, [pc, #12]	; (8fb4 <hif_chip_wake+0x34>)
    8fa6:	7853      	ldrb	r3, [r2, #1]
    8fa8:	3301      	adds	r3, #1
    8faa:	b2db      	uxtb	r3, r3
    8fac:	7053      	strb	r3, [r2, #1]
    8fae:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    8fb0:	bd10      	pop	{r4, pc}
    8fb2:	46c0      	nop			; (mov r8, r8)
    8fb4:	20000308 	.word	0x20000308
    8fb8:	0000a041 	.word	0x0000a041

00008fbc <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    8fbc:	4b05      	ldr	r3, [pc, #20]	; (8fd4 <hif_chip_sleep_sc+0x18>)
    8fbe:	785b      	ldrb	r3, [r3, #1]
    8fc0:	2b00      	cmp	r3, #0
    8fc2:	d004      	beq.n	8fce <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    8fc4:	4a03      	ldr	r2, [pc, #12]	; (8fd4 <hif_chip_sleep_sc+0x18>)
    8fc6:	7853      	ldrb	r3, [r2, #1]
    8fc8:	3b01      	subs	r3, #1
    8fca:	b2db      	uxtb	r3, r3
    8fcc:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    8fce:	2000      	movs	r0, #0
    8fd0:	4770      	bx	lr
    8fd2:	46c0      	nop			; (mov r8, r8)
    8fd4:	20000308 	.word	0x20000308

00008fd8 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    8fd8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    8fda:	4b0a      	ldr	r3, [pc, #40]	; (9004 <hif_chip_sleep+0x2c>)
    8fdc:	785b      	ldrb	r3, [r3, #1]
    8fde:	2b00      	cmp	r3, #0
    8fe0:	d004      	beq.n	8fec <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    8fe2:	4a08      	ldr	r2, [pc, #32]	; (9004 <hif_chip_sleep+0x2c>)
    8fe4:	7853      	ldrb	r3, [r2, #1]
    8fe6:	3b01      	subs	r3, #1
    8fe8:	b2db      	uxtb	r3, r3
    8fea:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    8fec:	4b05      	ldr	r3, [pc, #20]	; (9004 <hif_chip_sleep+0x2c>)
    8fee:	785b      	ldrb	r3, [r3, #1]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
    8ff0:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
	{
		gstrHifCxt.u8ChipSleep--;
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    8ff2:	2b00      	cmp	r3, #0
    8ff4:	d105      	bne.n	9002 <hif_chip_sleep+0x2a>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    8ff6:	4b03      	ldr	r3, [pc, #12]	; (9004 <hif_chip_sleep+0x2c>)
    8ff8:	781b      	ldrb	r3, [r3, #0]
    8ffa:	2b00      	cmp	r3, #0
    8ffc:	d001      	beq.n	9002 <hif_chip_sleep+0x2a>
		{
			ret = chip_sleep();
    8ffe:	4b02      	ldr	r3, [pc, #8]	; (9008 <hif_chip_sleep+0x30>)
    9000:	4798      	blx	r3
		{
		}
	}
ERR1:
	return ret;
}
    9002:	bd10      	pop	{r4, pc}
    9004:	20000308 	.word	0x20000308
    9008:	00009fdd 	.word	0x00009fdd

0000900c <hif_deinit>:
*    @param [in]	arg
*				Pointer to the arguments.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_deinit(void * arg)
{
    900c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    900e:	4b05      	ldr	r3, [pc, #20]	; (9024 <hif_deinit+0x18>)
    9010:	4798      	blx	r3
    9012:	0004      	movs	r4, r0
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    9014:	2228      	movs	r2, #40	; 0x28
    9016:	2100      	movs	r1, #0
    9018:	4803      	ldr	r0, [pc, #12]	; (9028 <hif_deinit+0x1c>)
    901a:	4b04      	ldr	r3, [pc, #16]	; (902c <hif_deinit+0x20>)
    901c:	4798      	blx	r3
	return ret;
}
    901e:	0020      	movs	r0, r4
    9020:	bd10      	pop	{r4, pc}
    9022:	46c0      	nop			; (mov r8, r8)
    9024:	00008f81 	.word	0x00008f81
    9028:	20000308 	.word	0x20000308
    902c:	00008efd 	.word	0x00008efd

00009030 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    9030:	b5f0      	push	{r4, r5, r6, r7, lr}
    9032:	465f      	mov	r7, fp
    9034:	4656      	mov	r6, sl
    9036:	b4c0      	push	{r6, r7}
    9038:	b08b      	sub	sp, #44	; 0x2c
    903a:	4683      	mov	fp, r0
    903c:	000c      	movs	r4, r1
    903e:	9203      	str	r2, [sp, #12]
    9040:	9302      	str	r3, [sp, #8]
    9042:	ab12      	add	r3, sp, #72	; 0x48
    9044:	cb80      	ldmia	r3!, {r7}
    9046:	881e      	ldrh	r6, [r3, #0]
    9048:	ab14      	add	r3, sp, #80	; 0x50
    904a:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    904c:	227f      	movs	r2, #127	; 0x7f
    904e:	400a      	ands	r2, r1
    9050:	ab09      	add	r3, sp, #36	; 0x24
    9052:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    9054:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    9056:	2208      	movs	r2, #8
    9058:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    905a:	2f00      	cmp	r7, #0
    905c:	d005      	beq.n	906a <hif_send+0x3a>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    905e:	885a      	ldrh	r2, [r3, #2]
    9060:	1992      	adds	r2, r2, r6
    9062:	18aa      	adds	r2, r5, r2
    9064:	b292      	uxth	r2, r2
    9066:	805a      	strh	r2, [r3, #2]
    9068:	e006      	b.n	9078 <hif_send+0x48>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    906a:	ab09      	add	r3, sp, #36	; 0x24
    906c:	885a      	ldrh	r2, [r3, #2]
    906e:	9902      	ldr	r1, [sp, #8]
    9070:	468c      	mov	ip, r1
    9072:	4462      	add	r2, ip
    9074:	b292      	uxth	r2, r2
    9076:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    9078:	4b66      	ldr	r3, [pc, #408]	; (9214 <hif_send+0x1e4>)
    907a:	4798      	blx	r3
    907c:	9001      	str	r0, [sp, #4]
	if(ret == M2M_SUCCESS)
    907e:	2800      	cmp	r0, #0
    9080:	d000      	beq.n	9084 <hif_send+0x54>
    9082:	e0ad      	b.n	91e0 <hif_send+0x1b0>
	{
		volatile uint32 reg, dma_addr = 0;
    9084:	9007      	str	r0, [sp, #28]
		volatile uint16 cnt = 0;
    9086:	aa04      	add	r2, sp, #16
    9088:	80d0      	strh	r0, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    908a:	9006      	str	r0, [sp, #24]
		reg |= (uint32)u8Gid;
    908c:	9b06      	ldr	r3, [sp, #24]
    908e:	465a      	mov	r2, fp
    9090:	431a      	orrs	r2, r3
    9092:	9206      	str	r2, [sp, #24]
		reg |= ((uint32)u8Opcode<<8);
    9094:	9a06      	ldr	r2, [sp, #24]
    9096:	0223      	lsls	r3, r4, #8
    9098:	4313      	orrs	r3, r2
    909a:	9306      	str	r3, [sp, #24]
		reg |= ((uint32)strHif.u16Length<<16);
    909c:	ab09      	add	r3, sp, #36	; 0x24
    909e:	885b      	ldrh	r3, [r3, #2]
    90a0:	9a06      	ldr	r2, [sp, #24]
    90a2:	041b      	lsls	r3, r3, #16
    90a4:	4313      	orrs	r3, r2
    90a6:	9306      	str	r3, [sp, #24]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    90a8:	9906      	ldr	r1, [sp, #24]
    90aa:	485b      	ldr	r0, [pc, #364]	; (9218 <hif_send+0x1e8>)
    90ac:	4b5b      	ldr	r3, [pc, #364]	; (921c <hif_send+0x1ec>)
    90ae:	4798      	blx	r3
    90b0:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    90b2:	d000      	beq.n	90b6 <hif_send+0x86>
    90b4:	e0a5      	b.n	9202 <hif_send+0x1d2>

		reg = 0UL;
    90b6:	2300      	movs	r3, #0
    90b8:	9306      	str	r3, [sp, #24]
		reg |= NBIT1;
    90ba:	9a06      	ldr	r2, [sp, #24]
    90bc:	3302      	adds	r3, #2
    90be:	4313      	orrs	r3, r2
    90c0:	9306      	str	r3, [sp, #24]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    90c2:	9906      	ldr	r1, [sp, #24]
    90c4:	4856      	ldr	r0, [pc, #344]	; (9220 <hif_send+0x1f0>)
    90c6:	4b55      	ldr	r3, [pc, #340]	; (921c <hif_send+0x1ec>)
    90c8:	4798      	blx	r3
    90ca:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    90cc:	d000      	beq.n	90d0 <hif_send+0xa0>
    90ce:	e098      	b.n	9202 <hif_send+0x1d2>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    90d0:	2200      	movs	r2, #0
    90d2:	9207      	str	r2, [sp, #28]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    90d4:	ab04      	add	r3, sp, #16
    90d6:	80da      	strh	r2, [r3, #6]
    90d8:	3306      	adds	r3, #6
    90da:	881b      	ldrh	r3, [r3, #0]
    90dc:	b29b      	uxth	r3, r3
    90de:	4a51      	ldr	r2, [pc, #324]	; (9224 <hif_send+0x1f4>)
    90e0:	4293      	cmp	r3, r2
    90e2:	d838      	bhi.n	9156 <hif_send+0x126>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    90e4:	4c50      	ldr	r4, [pc, #320]	; (9228 <hif_send+0x1f8>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    90e6:	4b51      	ldr	r3, [pc, #324]	; (922c <hif_send+0x1fc>)
    90e8:	469a      	mov	sl, r3
#endif
		dma_addr = 0;
		
		for(cnt = 0; cnt < 1000; cnt ++)
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    90ea:	a906      	add	r1, sp, #24
    90ec:	484c      	ldr	r0, [pc, #304]	; (9220 <hif_send+0x1f0>)
    90ee:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    90f0:	2800      	cmp	r0, #0
    90f2:	d130      	bne.n	9156 <hif_send+0x126>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    90f4:	ab04      	add	r3, sp, #16
    90f6:	3306      	adds	r3, #6
    90f8:	881b      	ldrh	r3, [r3, #0]
    90fa:	b29b      	uxth	r3, r3
    90fc:	22f4      	movs	r2, #244	; 0xf4
    90fe:	32ff      	adds	r2, #255	; 0xff
    9100:	4293      	cmp	r3, r2
    9102:	d911      	bls.n	9128 <hif_send+0xf8>
				if(cnt < 501) {
    9104:	ab04      	add	r3, sp, #16
    9106:	3306      	adds	r3, #6
    9108:	881b      	ldrh	r3, [r3, #0]
    910a:	b29b      	uxth	r3, r3
    910c:	3201      	adds	r2, #1
    910e:	4293      	cmp	r3, r2
    9110:	d808      	bhi.n	9124 <hif_send+0xf4>
					M2M_INFO("Slowing down...\n");
    9112:	4847      	ldr	r0, [pc, #284]	; (9230 <hif_send+0x200>)
    9114:	4b47      	ldr	r3, [pc, #284]	; (9234 <hif_send+0x204>)
    9116:	4798      	blx	r3
    9118:	4847      	ldr	r0, [pc, #284]	; (9238 <hif_send+0x208>)
    911a:	4b48      	ldr	r3, [pc, #288]	; (923c <hif_send+0x20c>)
    911c:	4798      	blx	r3
    911e:	200d      	movs	r0, #13
    9120:	4b47      	ldr	r3, [pc, #284]	; (9240 <hif_send+0x210>)
    9122:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    9124:	2001      	movs	r0, #1
    9126:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    9128:	9b06      	ldr	r3, [sp, #24]
    912a:	079b      	lsls	r3, r3, #30
    912c:	d408      	bmi.n	9140 <hif_send+0x110>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    912e:	a907      	add	r1, sp, #28
    9130:	4844      	ldr	r0, [pc, #272]	; (9244 <hif_send+0x214>)
    9132:	4b3d      	ldr	r3, [pc, #244]	; (9228 <hif_send+0x1f8>)
    9134:	4798      	blx	r3
    9136:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    9138:	d00d      	beq.n	9156 <hif_send+0x126>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    913a:	2300      	movs	r3, #0
    913c:	9307      	str	r3, [sp, #28]
					goto ERR1;
    913e:	e060      	b.n	9202 <hif_send+0x1d2>
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
		
		for(cnt = 0; cnt < 1000; cnt ++)
    9140:	ab04      	add	r3, sp, #16
    9142:	88da      	ldrh	r2, [r3, #6]
    9144:	3201      	adds	r2, #1
    9146:	b292      	uxth	r2, r2
    9148:	80da      	strh	r2, [r3, #6]
    914a:	3306      	adds	r3, #6
    914c:	881b      	ldrh	r3, [r3, #0]
    914e:	b29b      	uxth	r3, r3
    9150:	4a34      	ldr	r2, [pc, #208]	; (9224 <hif_send+0x1f4>)
    9152:	4293      	cmp	r3, r2
    9154:	d9c9      	bls.n	90ea <hif_send+0xba>
				/*in case of success break */
				break;
			}
		}

		if (dma_addr != 0)
    9156:	9b07      	ldr	r3, [sp, #28]
    9158:	2b00      	cmp	r3, #0
    915a:	d03c      	beq.n	91d6 <hif_send+0x1a6>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    915c:	9b07      	ldr	r3, [sp, #28]
    915e:	9308      	str	r3, [sp, #32]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    9160:	a909      	add	r1, sp, #36	; 0x24
    9162:	884b      	ldrh	r3, [r1, #2]
    9164:	b29b      	uxth	r3, r3
    9166:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    9168:	9808      	ldr	r0, [sp, #32]
    916a:	2208      	movs	r2, #8
    916c:	4b36      	ldr	r3, [pc, #216]	; (9248 <hif_send+0x218>)
    916e:	4798      	blx	r3
    9170:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    9172:	d146      	bne.n	9202 <hif_send+0x1d2>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    9174:	9b08      	ldr	r3, [sp, #32]
    9176:	3308      	adds	r3, #8
    9178:	9308      	str	r3, [sp, #32]
			if(pu8CtrlBuf != NULL)
    917a:	9b03      	ldr	r3, [sp, #12]
    917c:	2b00      	cmp	r3, #0
    917e:	d00b      	beq.n	9198 <hif_send+0x168>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    9180:	9808      	ldr	r0, [sp, #32]
    9182:	9a02      	ldr	r2, [sp, #8]
    9184:	0019      	movs	r1, r3
    9186:	4b30      	ldr	r3, [pc, #192]	; (9248 <hif_send+0x218>)
    9188:	4798      	blx	r3
    918a:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    918c:	d139      	bne.n	9202 <hif_send+0x1d2>
				u32CurrAddr += u16CtrlBufSize;
    918e:	9b08      	ldr	r3, [sp, #32]
    9190:	9a02      	ldr	r2, [sp, #8]
    9192:	4694      	mov	ip, r2
    9194:	4463      	add	r3, ip
    9196:	9308      	str	r3, [sp, #32]
			}
			if(pu8DataBuf != NULL)
    9198:	2f00      	cmp	r7, #0
    919a:	d00e      	beq.n	91ba <hif_send+0x18a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    919c:	9b08      	ldr	r3, [sp, #32]
    919e:	9a02      	ldr	r2, [sp, #8]
    91a0:	1aad      	subs	r5, r5, r2
    91a2:	18ed      	adds	r5, r5, r3
    91a4:	9508      	str	r5, [sp, #32]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    91a6:	9808      	ldr	r0, [sp, #32]
    91a8:	0032      	movs	r2, r6
    91aa:	0039      	movs	r1, r7
    91ac:	4b26      	ldr	r3, [pc, #152]	; (9248 <hif_send+0x218>)
    91ae:	4798      	blx	r3
    91b0:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    91b2:	d126      	bne.n	9202 <hif_send+0x1d2>
				u32CurrAddr += u16DataSize;
    91b4:	9b08      	ldr	r3, [sp, #32]
    91b6:	18f3      	adds	r3, r6, r3
    91b8:	9308      	str	r3, [sp, #32]
			}

			reg = dma_addr << 2;
    91ba:	9b07      	ldr	r3, [sp, #28]
    91bc:	009b      	lsls	r3, r3, #2
    91be:	9306      	str	r3, [sp, #24]
			reg |= NBIT1;
    91c0:	9a06      	ldr	r2, [sp, #24]
    91c2:	2302      	movs	r3, #2
    91c4:	4313      	orrs	r3, r2
    91c6:	9306      	str	r3, [sp, #24]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    91c8:	9906      	ldr	r1, [sp, #24]
    91ca:	4820      	ldr	r0, [pc, #128]	; (924c <hif_send+0x21c>)
    91cc:	4b13      	ldr	r3, [pc, #76]	; (921c <hif_send+0x1ec>)
    91ce:	4798      	blx	r3
    91d0:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    91d2:	d116      	bne.n	9202 <hif_send+0x1d2>
    91d4:	e012      	b.n	91fc <hif_send+0x1cc>
		}
		else
		{
			ret = hif_chip_sleep();
    91d6:	4b1e      	ldr	r3, [pc, #120]	; (9250 <hif_send+0x220>)
    91d8:	4798      	blx	r3
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    91da:	2003      	movs	r0, #3
    91dc:	4240      	negs	r0, r0
			goto ERR2;
    91de:	e013      	b.n	9208 <hif_send+0x1d8>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    91e0:	22cb      	movs	r2, #203	; 0xcb
    91e2:	0052      	lsls	r2, r2, #1
    91e4:	491b      	ldr	r1, [pc, #108]	; (9254 <hif_send+0x224>)
    91e6:	481c      	ldr	r0, [pc, #112]	; (9258 <hif_send+0x228>)
    91e8:	4b12      	ldr	r3, [pc, #72]	; (9234 <hif_send+0x204>)
    91ea:	4798      	blx	r3
    91ec:	481b      	ldr	r0, [pc, #108]	; (925c <hif_send+0x22c>)
    91ee:	4b13      	ldr	r3, [pc, #76]	; (923c <hif_send+0x20c>)
    91f0:	4798      	blx	r3
    91f2:	200d      	movs	r0, #13
    91f4:	4b12      	ldr	r3, [pc, #72]	; (9240 <hif_send+0x210>)
    91f6:	4798      	blx	r3
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    91f8:	9801      	ldr	r0, [sp, #4]

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR2;
    91fa:	e005      	b.n	9208 <hif_send+0x1d8>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    91fc:	4b14      	ldr	r3, [pc, #80]	; (9250 <hif_send+0x220>)
    91fe:	4798      	blx	r3
	return ret;
    9200:	e002      	b.n	9208 <hif_send+0x1d8>
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    9202:	4b17      	ldr	r3, [pc, #92]	; (9260 <hif_send+0x230>)
    9204:	4798      	blx	r3
    9206:	0020      	movs	r0, r4
ERR2:
	/*logical error*/
	return ret;
}
    9208:	b00b      	add	sp, #44	; 0x2c
    920a:	bc0c      	pop	{r2, r3}
    920c:	4692      	mov	sl, r2
    920e:	469b      	mov	fp, r3
    9210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9212:	46c0      	nop			; (mov r8, r8)
    9214:	00008f81 	.word	0x00008f81
    9218:	0000108c 	.word	0x0000108c
    921c:	0000a365 	.word	0x0000a365
    9220:	00001078 	.word	0x00001078
    9224:	000003e7 	.word	0x000003e7
    9228:	0000a359 	.word	0x0000a359
    922c:	00008aed 	.word	0x00008aed
    9230:	00012ee0 	.word	0x00012ee0
    9234:	0001189d 	.word	0x0001189d
    9238:	00012eec 	.word	0x00012eec
    923c:	000119bd 	.word	0x000119bd
    9240:	000118d1 	.word	0x000118d1
    9244:	00150400 	.word	0x00150400
    9248:	0000a3d9 	.word	0x0000a3d9
    924c:	0000106c 	.word	0x0000106c
    9250:	00008fd9 	.word	0x00008fd9
    9254:	000131c0 	.word	0x000131c0
    9258:	00012e7c 	.word	0x00012e7c
    925c:	00012efc 	.word	0x00012efc
    9260:	00008fbd 	.word	0x00008fbd

00009264 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    9264:	b5f0      	push	{r4, r5, r6, r7, lr}
    9266:	464f      	mov	r7, r9
    9268:	4646      	mov	r6, r8
    926a:	b4c0      	push	{r6, r7}
    926c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    926e:	4bcd      	ldr	r3, [pc, #820]	; (95a4 <hif_handle_isr+0x340>)
    9270:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    9272:	4699      	mov	r9, r3
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    9274:	4ecc      	ldr	r6, [pc, #816]	; (95a8 <hif_handle_isr+0x344>)
*/

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    9276:	e1d9      	b.n	962c <hif_handle_isr+0x3c8>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    9278:	464b      	mov	r3, r9
    927a:	78db      	ldrb	r3, [r3, #3]
    927c:	3b01      	subs	r3, #1
    927e:	b2db      	uxtb	r3, r3
    9280:	464a      	mov	r2, r9
    9282:	70d3      	strb	r3, [r2, #3]
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    9284:	a903      	add	r1, sp, #12
    9286:	48c9      	ldr	r0, [pc, #804]	; (95ac <hif_handle_isr+0x348>)
    9288:	47b0      	blx	r6
    928a:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    928c:	d000      	beq.n	9290 <hif_handle_isr+0x2c>
    928e:	e16f      	b.n	9570 <hif_handle_isr+0x30c>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    9290:	9b03      	ldr	r3, [sp, #12]
    9292:	07db      	lsls	r3, r3, #31
    9294:	d400      	bmi.n	9298 <hif_handle_isr+0x34>
    9296:	e15c      	b.n	9552 <hif_handle_isr+0x2ee>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    9298:	2000      	movs	r0, #0
    929a:	4bc5      	ldr	r3, [pc, #788]	; (95b0 <hif_handle_isr+0x34c>)
    929c:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    929e:	2301      	movs	r3, #1
    92a0:	9903      	ldr	r1, [sp, #12]
    92a2:	4399      	bics	r1, r3
    92a4:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    92a6:	48c1      	ldr	r0, [pc, #772]	; (95ac <hif_handle_isr+0x348>)
    92a8:	4bc2      	ldr	r3, [pc, #776]	; (95b4 <hif_handle_isr+0x350>)
    92aa:	4798      	blx	r3
    92ac:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    92ae:	d000      	beq.n	92b2 <hif_handle_isr+0x4e>
    92b0:	e16c      	b.n	958c <hif_handle_isr+0x328>
			gstrHifCxt.u8HifRXDone = 1;
    92b2:	2201      	movs	r2, #1
    92b4:	4bbb      	ldr	r3, [pc, #748]	; (95a4 <hif_handle_isr+0x340>)
    92b6:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    92b8:	9b03      	ldr	r3, [sp, #12]
    92ba:	0499      	lsls	r1, r3, #18
    92bc:	0d0f      	lsrs	r7, r1, #20
			if (size > 0) {
    92be:	d100      	bne.n	92c2 <hif_handle_isr+0x5e>
    92c0:	e138      	b.n	9534 <hif_handle_isr+0x2d0>
				uint32 address = 0;
    92c2:	2300      	movs	r3, #0
    92c4:	9305      	str	r3, [sp, #20]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    92c6:	a905      	add	r1, sp, #20
    92c8:	48bb      	ldr	r0, [pc, #748]	; (95b8 <hif_handle_isr+0x354>)
    92ca:	4bb7      	ldr	r3, [pc, #732]	; (95a8 <hif_handle_isr+0x344>)
    92cc:	4798      	blx	r3
    92ce:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    92d0:	d00f      	beq.n	92f2 <hif_handle_isr+0x8e>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    92d2:	22c8      	movs	r2, #200	; 0xc8
    92d4:	32ff      	adds	r2, #255	; 0xff
    92d6:	49b9      	ldr	r1, [pc, #740]	; (95bc <hif_handle_isr+0x358>)
    92d8:	48b9      	ldr	r0, [pc, #740]	; (95c0 <hif_handle_isr+0x35c>)
    92da:	4bba      	ldr	r3, [pc, #744]	; (95c4 <hif_handle_isr+0x360>)
    92dc:	4798      	blx	r3
    92de:	48ba      	ldr	r0, [pc, #744]	; (95c8 <hif_handle_isr+0x364>)
    92e0:	4bba      	ldr	r3, [pc, #744]	; (95cc <hif_handle_isr+0x368>)
    92e2:	4798      	blx	r3
    92e4:	200d      	movs	r0, #13
    92e6:	4bba      	ldr	r3, [pc, #744]	; (95d0 <hif_handle_isr+0x36c>)
    92e8:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    92ea:	2001      	movs	r0, #1
    92ec:	4bb0      	ldr	r3, [pc, #704]	; (95b0 <hif_handle_isr+0x34c>)
    92ee:	4798      	blx	r3
    92f0:	e14a      	b.n	9588 <hif_handle_isr+0x324>
					goto ERR1;
				}
				gstrHifCxt.u32RxAddr = address;
    92f2:	4bac      	ldr	r3, [pc, #688]	; (95a4 <hif_handle_isr+0x340>)
    92f4:	9a05      	ldr	r2, [sp, #20]
    92f6:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    92f8:	609f      	str	r7, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    92fa:	ad04      	add	r5, sp, #16
    92fc:	2204      	movs	r2, #4
    92fe:	0029      	movs	r1, r5
    9300:	9805      	ldr	r0, [sp, #20]
    9302:	4bb4      	ldr	r3, [pc, #720]	; (95d4 <hif_handle_isr+0x370>)
    9304:	4798      	blx	r3
    9306:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    9308:	886b      	ldrh	r3, [r5, #2]
    930a:	b29b      	uxth	r3, r3
    930c:	806b      	strh	r3, [r5, #2]
				if(M2M_SUCCESS != ret)
    930e:	2800      	cmp	r0, #0
    9310:	d00f      	beq.n	9332 <hif_handle_isr+0xce>
				{
					M2M_ERR("(hif) address bus fail\n");
    9312:	22d2      	movs	r2, #210	; 0xd2
    9314:	32ff      	adds	r2, #255	; 0xff
    9316:	49a9      	ldr	r1, [pc, #676]	; (95bc <hif_handle_isr+0x358>)
    9318:	48a9      	ldr	r0, [pc, #676]	; (95c0 <hif_handle_isr+0x35c>)
    931a:	4baa      	ldr	r3, [pc, #680]	; (95c4 <hif_handle_isr+0x360>)
    931c:	4798      	blx	r3
    931e:	48ae      	ldr	r0, [pc, #696]	; (95d8 <hif_handle_isr+0x374>)
    9320:	4baa      	ldr	r3, [pc, #680]	; (95cc <hif_handle_isr+0x368>)
    9322:	4798      	blx	r3
    9324:	200d      	movs	r0, #13
    9326:	4baa      	ldr	r3, [pc, #680]	; (95d0 <hif_handle_isr+0x36c>)
    9328:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    932a:	2001      	movs	r0, #1
    932c:	4ba0      	ldr	r3, [pc, #640]	; (95b0 <hif_handle_isr+0x34c>)
    932e:	4798      	blx	r3
    9330:	e12a      	b.n	9588 <hif_handle_isr+0x324>
					goto ERR1;
				}
				if(strHif.u16Length != size)
    9332:	ab04      	add	r3, sp, #16
    9334:	885b      	ldrh	r3, [r3, #2]
    9336:	b29b      	uxth	r3, r3
    9338:	429f      	cmp	r7, r3
    933a:	d01d      	beq.n	9378 <hif_handle_isr+0x114>
				{
					if((size - strHif.u16Length) > 4)
    933c:	ab04      	add	r3, sp, #16
    933e:	885b      	ldrh	r3, [r3, #2]
    9340:	1afb      	subs	r3, r7, r3
    9342:	2b04      	cmp	r3, #4
    9344:	dd18      	ble.n	9378 <hif_handle_isr+0x114>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    9346:	22ed      	movs	r2, #237	; 0xed
    9348:	0052      	lsls	r2, r2, #1
    934a:	499c      	ldr	r1, [pc, #624]	; (95bc <hif_handle_isr+0x358>)
    934c:	489c      	ldr	r0, [pc, #624]	; (95c0 <hif_handle_isr+0x35c>)
    934e:	4c9d      	ldr	r4, [pc, #628]	; (95c4 <hif_handle_isr+0x360>)
    9350:	47a0      	blx	r4
    9352:	a904      	add	r1, sp, #16
    9354:	884a      	ldrh	r2, [r1, #2]
    9356:	b292      	uxth	r2, r2
    9358:	780b      	ldrb	r3, [r1, #0]
    935a:	b2db      	uxtb	r3, r3
    935c:	7849      	ldrb	r1, [r1, #1]
    935e:	9100      	str	r1, [sp, #0]
    9360:	0039      	movs	r1, r7
    9362:	489e      	ldr	r0, [pc, #632]	; (95dc <hif_handle_isr+0x378>)
    9364:	47a0      	blx	r4
    9366:	200d      	movs	r0, #13
    9368:	4b99      	ldr	r3, [pc, #612]	; (95d0 <hif_handle_isr+0x36c>)
    936a:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    936c:	2001      	movs	r0, #1
    936e:	4b90      	ldr	r3, [pc, #576]	; (95b0 <hif_handle_isr+0x34c>)
    9370:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    9372:	2406      	movs	r4, #6
    9374:	4264      	negs	r4, r4
    9376:	e107      	b.n	9588 <hif_handle_isr+0x324>
						goto ERR1;
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    9378:	ab04      	add	r3, sp, #16
    937a:	781b      	ldrb	r3, [r3, #0]
    937c:	2b01      	cmp	r3, #1
    937e:	d11c      	bne.n	93ba <hif_handle_isr+0x156>
				{
					if(gstrHifCxt.pfWifiCb)
    9380:	4b88      	ldr	r3, [pc, #544]	; (95a4 <hif_handle_isr+0x340>)
    9382:	68db      	ldr	r3, [r3, #12]
    9384:	2b00      	cmp	r3, #0
    9386:	d00b      	beq.n	93a0 <hif_handle_isr+0x13c>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9388:	4b86      	ldr	r3, [pc, #536]	; (95a4 <hif_handle_isr+0x340>)
    938a:	68db      	ldr	r3, [r3, #12]
    938c:	aa04      	add	r2, sp, #16
    938e:	7850      	ldrb	r0, [r2, #1]
    9390:	b2c0      	uxtb	r0, r0
    9392:	8851      	ldrh	r1, [r2, #2]
    9394:	9a05      	ldr	r2, [sp, #20]
    9396:	3208      	adds	r2, #8
    9398:	3908      	subs	r1, #8
    939a:	b289      	uxth	r1, r1
    939c:	4798      	blx	r3
    939e:	e0b0      	b.n	9502 <hif_handle_isr+0x29e>
					else
						M2M_ERR("WIFI callback is not registered\n");
    93a0:	22f3      	movs	r2, #243	; 0xf3
    93a2:	0052      	lsls	r2, r2, #1
    93a4:	4985      	ldr	r1, [pc, #532]	; (95bc <hif_handle_isr+0x358>)
    93a6:	4886      	ldr	r0, [pc, #536]	; (95c0 <hif_handle_isr+0x35c>)
    93a8:	4b86      	ldr	r3, [pc, #536]	; (95c4 <hif_handle_isr+0x360>)
    93aa:	4798      	blx	r3
    93ac:	488c      	ldr	r0, [pc, #560]	; (95e0 <hif_handle_isr+0x37c>)
    93ae:	4b87      	ldr	r3, [pc, #540]	; (95cc <hif_handle_isr+0x368>)
    93b0:	4798      	blx	r3
    93b2:	200d      	movs	r0, #13
    93b4:	4b86      	ldr	r3, [pc, #536]	; (95d0 <hif_handle_isr+0x36c>)
    93b6:	4798      	blx	r3
    93b8:	e0a3      	b.n	9502 <hif_handle_isr+0x29e>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    93ba:	ab04      	add	r3, sp, #16
    93bc:	781b      	ldrb	r3, [r3, #0]
    93be:	2b02      	cmp	r3, #2
    93c0:	d11c      	bne.n	93fc <hif_handle_isr+0x198>
				{
					if(gstrHifCxt.pfIpCb)
    93c2:	4b78      	ldr	r3, [pc, #480]	; (95a4 <hif_handle_isr+0x340>)
    93c4:	691b      	ldr	r3, [r3, #16]
    93c6:	2b00      	cmp	r3, #0
    93c8:	d00b      	beq.n	93e2 <hif_handle_isr+0x17e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    93ca:	4b76      	ldr	r3, [pc, #472]	; (95a4 <hif_handle_isr+0x340>)
    93cc:	691b      	ldr	r3, [r3, #16]
    93ce:	aa04      	add	r2, sp, #16
    93d0:	7850      	ldrb	r0, [r2, #1]
    93d2:	b2c0      	uxtb	r0, r0
    93d4:	8851      	ldrh	r1, [r2, #2]
    93d6:	9a05      	ldr	r2, [sp, #20]
    93d8:	3208      	adds	r2, #8
    93da:	3908      	subs	r1, #8
    93dc:	b289      	uxth	r1, r1
    93de:	4798      	blx	r3
    93e0:	e08f      	b.n	9502 <hif_handle_isr+0x29e>
					else
						M2M_ERR("Scoket callback is not registered\n");
    93e2:	22f7      	movs	r2, #247	; 0xf7
    93e4:	0052      	lsls	r2, r2, #1
    93e6:	4975      	ldr	r1, [pc, #468]	; (95bc <hif_handle_isr+0x358>)
    93e8:	4875      	ldr	r0, [pc, #468]	; (95c0 <hif_handle_isr+0x35c>)
    93ea:	4b76      	ldr	r3, [pc, #472]	; (95c4 <hif_handle_isr+0x360>)
    93ec:	4798      	blx	r3
    93ee:	487d      	ldr	r0, [pc, #500]	; (95e4 <hif_handle_isr+0x380>)
    93f0:	4b76      	ldr	r3, [pc, #472]	; (95cc <hif_handle_isr+0x368>)
    93f2:	4798      	blx	r3
    93f4:	200d      	movs	r0, #13
    93f6:	4b76      	ldr	r3, [pc, #472]	; (95d0 <hif_handle_isr+0x36c>)
    93f8:	4798      	blx	r3
    93fa:	e082      	b.n	9502 <hif_handle_isr+0x29e>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    93fc:	ab04      	add	r3, sp, #16
    93fe:	781b      	ldrb	r3, [r3, #0]
    9400:	2b04      	cmp	r3, #4
    9402:	d11c      	bne.n	943e <hif_handle_isr+0x1da>
				{
					if(gstrHifCxt.pfOtaCb)
    9404:	4b67      	ldr	r3, [pc, #412]	; (95a4 <hif_handle_isr+0x340>)
    9406:	695b      	ldr	r3, [r3, #20]
    9408:	2b00      	cmp	r3, #0
    940a:	d00b      	beq.n	9424 <hif_handle_isr+0x1c0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    940c:	4b65      	ldr	r3, [pc, #404]	; (95a4 <hif_handle_isr+0x340>)
    940e:	695b      	ldr	r3, [r3, #20]
    9410:	aa04      	add	r2, sp, #16
    9412:	7850      	ldrb	r0, [r2, #1]
    9414:	b2c0      	uxtb	r0, r0
    9416:	8851      	ldrh	r1, [r2, #2]
    9418:	9a05      	ldr	r2, [sp, #20]
    941a:	3208      	adds	r2, #8
    941c:	3908      	subs	r1, #8
    941e:	b289      	uxth	r1, r1
    9420:	4798      	blx	r3
    9422:	e06e      	b.n	9502 <hif_handle_isr+0x29e>
					else
						M2M_ERR("Ota callback is not registered\n");
    9424:	22fb      	movs	r2, #251	; 0xfb
    9426:	0052      	lsls	r2, r2, #1
    9428:	4964      	ldr	r1, [pc, #400]	; (95bc <hif_handle_isr+0x358>)
    942a:	4865      	ldr	r0, [pc, #404]	; (95c0 <hif_handle_isr+0x35c>)
    942c:	4b65      	ldr	r3, [pc, #404]	; (95c4 <hif_handle_isr+0x360>)
    942e:	4798      	blx	r3
    9430:	486d      	ldr	r0, [pc, #436]	; (95e8 <hif_handle_isr+0x384>)
    9432:	4b66      	ldr	r3, [pc, #408]	; (95cc <hif_handle_isr+0x368>)
    9434:	4798      	blx	r3
    9436:	200d      	movs	r0, #13
    9438:	4b65      	ldr	r3, [pc, #404]	; (95d0 <hif_handle_isr+0x36c>)
    943a:	4798      	blx	r3
    943c:	e061      	b.n	9502 <hif_handle_isr+0x29e>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    943e:	ab04      	add	r3, sp, #16
    9440:	781b      	ldrb	r3, [r3, #0]
    9442:	2b06      	cmp	r3, #6
    9444:	d11b      	bne.n	947e <hif_handle_isr+0x21a>
				{
					if(gstrHifCxt.pfCryptoCb)
    9446:	4b57      	ldr	r3, [pc, #348]	; (95a4 <hif_handle_isr+0x340>)
    9448:	6a1b      	ldr	r3, [r3, #32]
    944a:	2b00      	cmp	r3, #0
    944c:	d00b      	beq.n	9466 <hif_handle_isr+0x202>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    944e:	4b55      	ldr	r3, [pc, #340]	; (95a4 <hif_handle_isr+0x340>)
    9450:	6a1b      	ldr	r3, [r3, #32]
    9452:	aa04      	add	r2, sp, #16
    9454:	7850      	ldrb	r0, [r2, #1]
    9456:	b2c0      	uxtb	r0, r0
    9458:	8851      	ldrh	r1, [r2, #2]
    945a:	9a05      	ldr	r2, [sp, #20]
    945c:	3208      	adds	r2, #8
    945e:	3908      	subs	r1, #8
    9460:	b289      	uxth	r1, r1
    9462:	4798      	blx	r3
    9464:	e04d      	b.n	9502 <hif_handle_isr+0x29e>

					else
						M2M_ERR("Crypto callback is not registered\n");
    9466:	4a61      	ldr	r2, [pc, #388]	; (95ec <hif_handle_isr+0x388>)
    9468:	4954      	ldr	r1, [pc, #336]	; (95bc <hif_handle_isr+0x358>)
    946a:	4855      	ldr	r0, [pc, #340]	; (95c0 <hif_handle_isr+0x35c>)
    946c:	4b55      	ldr	r3, [pc, #340]	; (95c4 <hif_handle_isr+0x360>)
    946e:	4798      	blx	r3
    9470:	485f      	ldr	r0, [pc, #380]	; (95f0 <hif_handle_isr+0x38c>)
    9472:	4b56      	ldr	r3, [pc, #344]	; (95cc <hif_handle_isr+0x368>)
    9474:	4798      	blx	r3
    9476:	200d      	movs	r0, #13
    9478:	4b55      	ldr	r3, [pc, #340]	; (95d0 <hif_handle_isr+0x36c>)
    947a:	4798      	blx	r3
    947c:	e041      	b.n	9502 <hif_handle_isr+0x29e>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    947e:	ab04      	add	r3, sp, #16
    9480:	781b      	ldrb	r3, [r3, #0]
    9482:	2b07      	cmp	r3, #7
    9484:	d11b      	bne.n	94be <hif_handle_isr+0x25a>
				{
					if(gstrHifCxt.pfSigmaCb)
    9486:	4b47      	ldr	r3, [pc, #284]	; (95a4 <hif_handle_isr+0x340>)
    9488:	699b      	ldr	r3, [r3, #24]
    948a:	2b00      	cmp	r3, #0
    948c:	d00b      	beq.n	94a6 <hif_handle_isr+0x242>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    948e:	4b45      	ldr	r3, [pc, #276]	; (95a4 <hif_handle_isr+0x340>)
    9490:	699b      	ldr	r3, [r3, #24]
    9492:	aa04      	add	r2, sp, #16
    9494:	7850      	ldrb	r0, [r2, #1]
    9496:	b2c0      	uxtb	r0, r0
    9498:	8851      	ldrh	r1, [r2, #2]
    949a:	9a05      	ldr	r2, [sp, #20]
    949c:	3208      	adds	r2, #8
    949e:	3908      	subs	r1, #8
    94a0:	b289      	uxth	r1, r1
    94a2:	4798      	blx	r3
    94a4:	e02d      	b.n	9502 <hif_handle_isr+0x29e>
					else
						M2M_ERR("Sigma callback is not registered\n");
    94a6:	4a53      	ldr	r2, [pc, #332]	; (95f4 <hif_handle_isr+0x390>)
    94a8:	4944      	ldr	r1, [pc, #272]	; (95bc <hif_handle_isr+0x358>)
    94aa:	4845      	ldr	r0, [pc, #276]	; (95c0 <hif_handle_isr+0x35c>)
    94ac:	4b45      	ldr	r3, [pc, #276]	; (95c4 <hif_handle_isr+0x360>)
    94ae:	4798      	blx	r3
    94b0:	4851      	ldr	r0, [pc, #324]	; (95f8 <hif_handle_isr+0x394>)
    94b2:	4b46      	ldr	r3, [pc, #280]	; (95cc <hif_handle_isr+0x368>)
    94b4:	4798      	blx	r3
    94b6:	200d      	movs	r0, #13
    94b8:	4b45      	ldr	r3, [pc, #276]	; (95d0 <hif_handle_isr+0x36c>)
    94ba:	4798      	blx	r3
    94bc:	e021      	b.n	9502 <hif_handle_isr+0x29e>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    94be:	ab04      	add	r3, sp, #16
    94c0:	781b      	ldrb	r3, [r3, #0]
    94c2:	2b05      	cmp	r3, #5
    94c4:	d10f      	bne.n	94e6 <hif_handle_isr+0x282>
				{
				    if(gstrHifCxt.pfSslCb)
    94c6:	4b37      	ldr	r3, [pc, #220]	; (95a4 <hif_handle_isr+0x340>)
    94c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    94ca:	2b00      	cmp	r3, #0
    94cc:	d019      	beq.n	9502 <hif_handle_isr+0x29e>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    94ce:	4b35      	ldr	r3, [pc, #212]	; (95a4 <hif_handle_isr+0x340>)
    94d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    94d2:	aa04      	add	r2, sp, #16
    94d4:	7850      	ldrb	r0, [r2, #1]
    94d6:	b2c0      	uxtb	r0, r0
    94d8:	8851      	ldrh	r1, [r2, #2]
    94da:	9a05      	ldr	r2, [sp, #20]
    94dc:	3208      	adds	r2, #8
    94de:	3908      	subs	r1, #8
    94e0:	b289      	uxth	r1, r1
    94e2:	4798      	blx	r3
    94e4:	e00d      	b.n	9502 <hif_handle_isr+0x29e>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    94e6:	4a45      	ldr	r2, [pc, #276]	; (95fc <hif_handle_isr+0x398>)
    94e8:	4934      	ldr	r1, [pc, #208]	; (95bc <hif_handle_isr+0x358>)
    94ea:	4835      	ldr	r0, [pc, #212]	; (95c0 <hif_handle_isr+0x35c>)
    94ec:	4b35      	ldr	r3, [pc, #212]	; (95c4 <hif_handle_isr+0x360>)
    94ee:	4798      	blx	r3
    94f0:	4843      	ldr	r0, [pc, #268]	; (9600 <hif_handle_isr+0x39c>)
    94f2:	4b36      	ldr	r3, [pc, #216]	; (95cc <hif_handle_isr+0x368>)
    94f4:	4798      	blx	r3
    94f6:	200d      	movs	r0, #13
    94f8:	4b35      	ldr	r3, [pc, #212]	; (95d0 <hif_handle_isr+0x36c>)
    94fa:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    94fc:	2406      	movs	r4, #6
    94fe:	4264      	negs	r4, r4
    9500:	e042      	b.n	9588 <hif_handle_isr+0x324>
					goto ERR1;
				}
				if(gstrHifCxt.u8HifRXDone)
    9502:	4b28      	ldr	r3, [pc, #160]	; (95a4 <hif_handle_isr+0x340>)
    9504:	789b      	ldrb	r3, [r3, #2]
    9506:	2b00      	cmp	r3, #0
    9508:	d03e      	beq.n	9588 <hif_handle_isr+0x324>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    950a:	4a3e      	ldr	r2, [pc, #248]	; (9604 <hif_handle_isr+0x3a0>)
    950c:	492b      	ldr	r1, [pc, #172]	; (95bc <hif_handle_isr+0x358>)
    950e:	482c      	ldr	r0, [pc, #176]	; (95c0 <hif_handle_isr+0x35c>)
    9510:	4d2c      	ldr	r5, [pc, #176]	; (95c4 <hif_handle_isr+0x360>)
    9512:	47a8      	blx	r5
    9514:	ab04      	add	r3, sp, #16
    9516:	7819      	ldrb	r1, [r3, #0]
    9518:	b2c9      	uxtb	r1, r1
    951a:	785a      	ldrb	r2, [r3, #1]
    951c:	b2d2      	uxtb	r2, r2
    951e:	483a      	ldr	r0, [pc, #232]	; (9608 <hif_handle_isr+0x3a4>)
    9520:	47a8      	blx	r5
    9522:	200d      	movs	r0, #13
    9524:	4b2a      	ldr	r3, [pc, #168]	; (95d0 <hif_handle_isr+0x36c>)
    9526:	4798      	blx	r3
					ret = hif_set_rx_done();
    9528:	4b38      	ldr	r3, [pc, #224]	; (960c <hif_handle_isr+0x3a8>)
    952a:	4798      	blx	r3
					if(ret != M2M_SUCCESS) goto ERR1;
    952c:	2800      	cmp	r0, #0
    952e:	d02b      	beq.n	9588 <hif_handle_isr+0x324>
					goto ERR1;
				}
				if(gstrHifCxt.u8HifRXDone)
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
					ret = hif_set_rx_done();
    9530:	0004      	movs	r4, r0
    9532:	e029      	b.n	9588 <hif_handle_isr+0x324>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    9534:	2287      	movs	r2, #135	; 0x87
    9536:	0092      	lsls	r2, r2, #2
    9538:	4920      	ldr	r1, [pc, #128]	; (95bc <hif_handle_isr+0x358>)
    953a:	4821      	ldr	r0, [pc, #132]	; (95c0 <hif_handle_isr+0x35c>)
    953c:	4b21      	ldr	r3, [pc, #132]	; (95c4 <hif_handle_isr+0x360>)
    953e:	4798      	blx	r3
    9540:	4833      	ldr	r0, [pc, #204]	; (9610 <hif_handle_isr+0x3ac>)
    9542:	4b22      	ldr	r3, [pc, #136]	; (95cc <hif_handle_isr+0x368>)
    9544:	4798      	blx	r3
    9546:	200d      	movs	r0, #13
    9548:	4b21      	ldr	r3, [pc, #132]	; (95d0 <hif_handle_isr+0x36c>)
    954a:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    954c:	2402      	movs	r4, #2
    954e:	4264      	negs	r4, r4
    9550:	e01c      	b.n	958c <hif_handle_isr+0x328>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    9552:	2289      	movs	r2, #137	; 0x89
    9554:	0092      	lsls	r2, r2, #2
    9556:	4919      	ldr	r1, [pc, #100]	; (95bc <hif_handle_isr+0x358>)
    9558:	4819      	ldr	r0, [pc, #100]	; (95c0 <hif_handle_isr+0x35c>)
    955a:	4c1a      	ldr	r4, [pc, #104]	; (95c4 <hif_handle_isr+0x360>)
    955c:	47a0      	blx	r4
    955e:	9903      	ldr	r1, [sp, #12]
    9560:	482c      	ldr	r0, [pc, #176]	; (9614 <hif_handle_isr+0x3b0>)
    9562:	47a0      	blx	r4
    9564:	200d      	movs	r0, #13
    9566:	4b1a      	ldr	r3, [pc, #104]	; (95d0 <hif_handle_isr+0x36c>)
    9568:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    956a:	240c      	movs	r4, #12
    956c:	4264      	negs	r4, r4
    956e:	e00d      	b.n	958c <hif_handle_isr+0x328>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    9570:	4a29      	ldr	r2, [pc, #164]	; (9618 <hif_handle_isr+0x3b4>)
    9572:	4912      	ldr	r1, [pc, #72]	; (95bc <hif_handle_isr+0x358>)
    9574:	4812      	ldr	r0, [pc, #72]	; (95c0 <hif_handle_isr+0x35c>)
    9576:	4b13      	ldr	r3, [pc, #76]	; (95c4 <hif_handle_isr+0x360>)
    9578:	4798      	blx	r3
    957a:	4828      	ldr	r0, [pc, #160]	; (961c <hif_handle_isr+0x3b8>)
    957c:	4b13      	ldr	r3, [pc, #76]	; (95cc <hif_handle_isr+0x368>)
    957e:	4798      	blx	r3
    9580:	200d      	movs	r0, #13
    9582:	4b13      	ldr	r3, [pc, #76]	; (95d0 <hif_handle_isr+0x36c>)
    9584:	4798      	blx	r3
    9586:	e001      	b.n	958c <hif_handle_isr+0x328>
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
    9588:	2c00      	cmp	r4, #0
    958a:	d04f      	beq.n	962c <hif_handle_isr+0x3c8>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    958c:	4a24      	ldr	r2, [pc, #144]	; (9620 <hif_handle_isr+0x3bc>)
    958e:	4925      	ldr	r1, [pc, #148]	; (9624 <hif_handle_isr+0x3c0>)
    9590:	480b      	ldr	r0, [pc, #44]	; (95c0 <hif_handle_isr+0x35c>)
    9592:	4d0c      	ldr	r5, [pc, #48]	; (95c4 <hif_handle_isr+0x360>)
    9594:	47a8      	blx	r5
    9596:	0021      	movs	r1, r4
    9598:	4823      	ldr	r0, [pc, #140]	; (9628 <hif_handle_isr+0x3c4>)
    959a:	47a8      	blx	r5
    959c:	200d      	movs	r0, #13
    959e:	4b0c      	ldr	r3, [pc, #48]	; (95d0 <hif_handle_isr+0x36c>)
    95a0:	4798      	blx	r3
			}
		}
    95a2:	e66f      	b.n	9284 <hif_handle_isr+0x20>
    95a4:	20000308 	.word	0x20000308
    95a8:	0000a359 	.word	0x0000a359
    95ac:	00001070 	.word	0x00001070
    95b0:	00008c09 	.word	0x00008c09
    95b4:	0000a365 	.word	0x0000a365
    95b8:	00001084 	.word	0x00001084
    95bc:	000131cc 	.word	0x000131cc
    95c0:	00012e7c 	.word	0x00012e7c
    95c4:	0001189d 	.word	0x0001189d
    95c8:	00012f18 	.word	0x00012f18
    95cc:	000119bd 	.word	0x000119bd
    95d0:	000118d1 	.word	0x000118d1
    95d4:	0000a371 	.word	0x0000a371
    95d8:	00012f3c 	.word	0x00012f3c
    95dc:	00012f54 	.word	0x00012f54
    95e0:	00012f94 	.word	0x00012f94
    95e4:	00012fb4 	.word	0x00012fb4
    95e8:	00012fd8 	.word	0x00012fd8
    95ec:	000001ff 	.word	0x000001ff
    95f0:	00012ff8 	.word	0x00012ff8
    95f4:	00000206 	.word	0x00000206
    95f8:	0001301c 	.word	0x0001301c
    95fc:	0000020f 	.word	0x0000020f
    9600:	00013040 	.word	0x00013040
    9604:	00000215 	.word	0x00000215
    9608:	00013058 	.word	0x00013058
    960c:	00008f3d 	.word	0x00008f3d
    9610:	00013084 	.word	0x00013084
    9614:	00013098 	.word	0x00013098
    9618:	0000022d 	.word	0x0000022d
    961c:	000130b4 	.word	0x000130b4
    9620:	0000024a 	.word	0x0000024a
    9624:	000131d4 	.word	0x000131d4
    9628:	000130d8 	.word	0x000130d8
*/

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    962c:	4643      	mov	r3, r8
    962e:	78db      	ldrb	r3, [r3, #3]
    9630:	2b00      	cmp	r3, #0
    9632:	d000      	beq.n	9636 <hif_handle_isr+0x3d2>
    9634:	e620      	b.n	9278 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
    9636:	2000      	movs	r0, #0
    9638:	b007      	add	sp, #28
    963a:	bc0c      	pop	{r2, r3}
    963c:	4690      	mov	r8, r2
    963e:	4699      	mov	r9, r3
    9640:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9642:	46c0      	nop			; (mov r8, r8)

00009644 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    9644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9646:	0014      	movs	r4, r2
    9648:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    964a:	2800      	cmp	r0, #0
    964c:	d003      	beq.n	9656 <hif_receive+0x12>
    964e:	2900      	cmp	r1, #0
    9650:	d001      	beq.n	9656 <hif_receive+0x12>
    9652:	2a00      	cmp	r2, #0
    9654:	d112      	bne.n	967c <hif_receive+0x38>
	{
		if(isDone)
    9656:	2d00      	cmp	r5, #0
    9658:	d002      	beq.n	9660 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    965a:	4b27      	ldr	r3, [pc, #156]	; (96f8 <hif_receive+0xb4>)
    965c:	4798      	blx	r3
    965e:	e049      	b.n	96f4 <hif_receive+0xb0>
		}
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
    9660:	4a26      	ldr	r2, [pc, #152]	; (96fc <hif_receive+0xb8>)
    9662:	4927      	ldr	r1, [pc, #156]	; (9700 <hif_receive+0xbc>)
    9664:	4827      	ldr	r0, [pc, #156]	; (9704 <hif_receive+0xc0>)
    9666:	4b28      	ldr	r3, [pc, #160]	; (9708 <hif_receive+0xc4>)
    9668:	4798      	blx	r3
    966a:	4828      	ldr	r0, [pc, #160]	; (970c <hif_receive+0xc8>)
    966c:	4b28      	ldr	r3, [pc, #160]	; (9710 <hif_receive+0xcc>)
    966e:	4798      	blx	r3
    9670:	200d      	movs	r0, #13
    9672:	4b28      	ldr	r3, [pc, #160]	; (9714 <hif_receive+0xd0>)
    9674:	4798      	blx	r3
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    9676:	200c      	movs	r0, #12
    9678:	4240      	negs	r0, r0
    967a:	e03b      	b.n	96f4 <hif_receive+0xb0>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    967c:	4b26      	ldr	r3, [pc, #152]	; (9718 <hif_receive+0xd4>)
    967e:	689b      	ldr	r3, [r3, #8]
    9680:	429a      	cmp	r2, r3
    9682:	d90f      	bls.n	96a4 <hif_receive+0x60>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    9684:	4a25      	ldr	r2, [pc, #148]	; (971c <hif_receive+0xd8>)
    9686:	491e      	ldr	r1, [pc, #120]	; (9700 <hif_receive+0xbc>)
    9688:	481e      	ldr	r0, [pc, #120]	; (9704 <hif_receive+0xc0>)
    968a:	4d1f      	ldr	r5, [pc, #124]	; (9708 <hif_receive+0xc4>)
    968c:	47a8      	blx	r5
    968e:	4b22      	ldr	r3, [pc, #136]	; (9718 <hif_receive+0xd4>)
    9690:	689a      	ldr	r2, [r3, #8]
    9692:	0021      	movs	r1, r4
    9694:	4822      	ldr	r0, [pc, #136]	; (9720 <hif_receive+0xdc>)
    9696:	47a8      	blx	r5
    9698:	200d      	movs	r0, #13
    969a:	4b1e      	ldr	r3, [pc, #120]	; (9714 <hif_receive+0xd0>)
    969c:	4798      	blx	r3
		goto ERR1;
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
	{
		ret = M2M_ERR_FAIL;
    969e:	200c      	movs	r0, #12
    96a0:	4240      	negs	r0, r0
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
    96a2:	e027      	b.n	96f4 <hif_receive+0xb0>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    96a4:	4b1c      	ldr	r3, [pc, #112]	; (9718 <hif_receive+0xd4>)
    96a6:	685b      	ldr	r3, [r3, #4]
    96a8:	4298      	cmp	r0, r3
    96aa:	d306      	bcc.n	96ba <hif_receive+0x76>
    96ac:	1886      	adds	r6, r0, r2
    96ae:	4a1a      	ldr	r2, [pc, #104]	; (9718 <hif_receive+0xd4>)
    96b0:	6857      	ldr	r7, [r2, #4]
    96b2:	6893      	ldr	r3, [r2, #8]
    96b4:	18fb      	adds	r3, r7, r3
    96b6:	429e      	cmp	r6, r3
    96b8:	d90d      	bls.n	96d6 <hif_receive+0x92>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    96ba:	4a1a      	ldr	r2, [pc, #104]	; (9724 <hif_receive+0xe0>)
    96bc:	4910      	ldr	r1, [pc, #64]	; (9700 <hif_receive+0xbc>)
    96be:	4811      	ldr	r0, [pc, #68]	; (9704 <hif_receive+0xc0>)
    96c0:	4b11      	ldr	r3, [pc, #68]	; (9708 <hif_receive+0xc4>)
    96c2:	4798      	blx	r3
    96c4:	4818      	ldr	r0, [pc, #96]	; (9728 <hif_receive+0xe4>)
    96c6:	4b12      	ldr	r3, [pc, #72]	; (9710 <hif_receive+0xcc>)
    96c8:	4798      	blx	r3
    96ca:	200d      	movs	r0, #13
    96cc:	4b11      	ldr	r3, [pc, #68]	; (9714 <hif_receive+0xd0>)
    96ce:	4798      	blx	r3
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
	{
		ret = M2M_ERR_FAIL;
    96d0:	200c      	movs	r0, #12
    96d2:	4240      	negs	r0, r0
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
    96d4:	e00e      	b.n	96f4 <hif_receive+0xb0>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    96d6:	0022      	movs	r2, r4
    96d8:	4b14      	ldr	r3, [pc, #80]	; (972c <hif_receive+0xe8>)
    96da:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    96dc:	2800      	cmp	r0, #0
    96de:	d109      	bne.n	96f4 <hif_receive+0xb0>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    96e0:	4a0d      	ldr	r2, [pc, #52]	; (9718 <hif_receive+0xd4>)
    96e2:	6851      	ldr	r1, [r2, #4]
    96e4:	6893      	ldr	r3, [r2, #8]
    96e6:	18cb      	adds	r3, r1, r3
    96e8:	429e      	cmp	r6, r3
    96ea:	d001      	beq.n	96f0 <hif_receive+0xac>
    96ec:	2d00      	cmp	r5, #0
    96ee:	d001      	beq.n	96f4 <hif_receive+0xb0>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    96f0:	4b01      	ldr	r3, [pc, #4]	; (96f8 <hif_receive+0xb4>)
    96f2:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    96f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    96f6:	46c0      	nop			; (mov r8, r8)
    96f8:	00008f3d 	.word	0x00008f3d
    96fc:	0000026b 	.word	0x0000026b
    9700:	00012ec4 	.word	0x00012ec4
    9704:	00012e7c 	.word	0x00012e7c
    9708:	0001189d 	.word	0x0001189d
    970c:	00013108 	.word	0x00013108
    9710:	000119bd 	.word	0x000119bd
    9714:	000118d1 	.word	0x000118d1
    9718:	20000308 	.word	0x20000308
    971c:	00000273 	.word	0x00000273
    9720:	00013128 	.word	0x00013128
    9724:	00000279 	.word	0x00000279
    9728:	00013170 	.word	0x00013170
    972c:	0000a371 	.word	0x0000a371

00009730 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    9730:	b570      	push	{r4, r5, r6, lr}
    9732:	1e04      	subs	r4, r0, #0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    9734:	2c07      	cmp	r4, #7
    9736:	d81f      	bhi.n	9778 <hif_register_cb+0x48>
    9738:	0083      	lsls	r3, r0, #2
    973a:	4a16      	ldr	r2, [pc, #88]	; (9794 <hif_register_cb+0x64>)
    973c:	58d3      	ldr	r3, [r2, r3]
    973e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    9740:	4b15      	ldr	r3, [pc, #84]	; (9798 <hif_register_cb+0x68>)
    9742:	6119      	str	r1, [r3, #16]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    9744:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
			break;
    9746:	e024      	b.n	9792 <hif_register_cb+0x62>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    9748:	4b13      	ldr	r3, [pc, #76]	; (9798 <hif_register_cb+0x68>)
    974a:	60d9      	str	r1, [r3, #12]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    974c:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
			break;
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
			break;
    974e:	e020      	b.n	9792 <hif_register_cb+0x62>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    9750:	4b11      	ldr	r3, [pc, #68]	; (9798 <hif_register_cb+0x68>)
    9752:	6159      	str	r1, [r3, #20]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    9754:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
			break;
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
			break;
    9756:	e01c      	b.n	9792 <hif_register_cb+0x62>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    9758:	4b0f      	ldr	r3, [pc, #60]	; (9798 <hif_register_cb+0x68>)
    975a:	61d9      	str	r1, [r3, #28]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    975c:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
			break;
    975e:	e018      	b.n	9792 <hif_register_cb+0x62>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    9760:	4b0d      	ldr	r3, [pc, #52]	; (9798 <hif_register_cb+0x68>)
    9762:	6219      	str	r1, [r3, #32]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    9764:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
			break;
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
			break;
    9766:	e014      	b.n	9792 <hif_register_cb+0x62>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    9768:	4b0b      	ldr	r3, [pc, #44]	; (9798 <hif_register_cb+0x68>)
    976a:	6199      	str	r1, [r3, #24]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    976c:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
			break;
    976e:	e010      	b.n	9792 <hif_register_cb+0x62>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    9770:	4b09      	ldr	r3, [pc, #36]	; (9798 <hif_register_cb+0x68>)
    9772:	6259      	str	r1, [r3, #36]	; 0x24
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
    9774:	2000      	movs	r0, #0
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
			break;
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
			break;
    9776:	e00c      	b.n	9792 <hif_register_cb+0x62>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    9778:	4a08      	ldr	r2, [pc, #32]	; (979c <hif_register_cb+0x6c>)
    977a:	4909      	ldr	r1, [pc, #36]	; (97a0 <hif_register_cb+0x70>)
    977c:	4809      	ldr	r0, [pc, #36]	; (97a4 <hif_register_cb+0x74>)
    977e:	4d0a      	ldr	r5, [pc, #40]	; (97a8 <hif_register_cb+0x78>)
    9780:	47a8      	blx	r5
    9782:	0021      	movs	r1, r4
    9784:	4809      	ldr	r0, [pc, #36]	; (97ac <hif_register_cb+0x7c>)
    9786:	47a8      	blx	r5
    9788:	200d      	movs	r0, #13
    978a:	4b09      	ldr	r3, [pc, #36]	; (97b0 <hif_register_cb+0x80>)
    978c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    978e:	200c      	movs	r0, #12
    9790:	4240      	negs	r0, r0
			break;
	}
	return ret;
}
    9792:	bd70      	pop	{r4, r5, r6, pc}
    9794:	00012ea4 	.word	0x00012ea4
    9798:	20000308 	.word	0x20000308
    979c:	000002b1 	.word	0x000002b1
    97a0:	00012ed0 	.word	0x00012ed0
    97a4:	00012e7c 	.word	0x00012e7c
    97a8:	0001189d 	.word	0x0001189d
    97ac:	000131b4 	.word	0x000131b4
    97b0:	000118d1 	.word	0x000118d1

000097b4 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    97b4:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    97b6:	2228      	movs	r2, #40	; 0x28
    97b8:	2100      	movs	r1, #0
    97ba:	4806      	ldr	r0, [pc, #24]	; (97d4 <hif_init+0x20>)
    97bc:	4b06      	ldr	r3, [pc, #24]	; (97d8 <hif_init+0x24>)
    97be:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    97c0:	4806      	ldr	r0, [pc, #24]	; (97dc <hif_init+0x28>)
    97c2:	4b07      	ldr	r3, [pc, #28]	; (97e0 <hif_init+0x2c>)
    97c4:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    97c6:	4907      	ldr	r1, [pc, #28]	; (97e4 <hif_init+0x30>)
    97c8:	2003      	movs	r0, #3
    97ca:	4b07      	ldr	r3, [pc, #28]	; (97e8 <hif_init+0x34>)
    97cc:	4798      	blx	r3
	return M2M_SUCCESS;
}
    97ce:	2000      	movs	r0, #0
    97d0:	bd10      	pop	{r4, pc}
    97d2:	46c0      	nop			; (mov r8, r8)
    97d4:	20000308 	.word	0x20000308
    97d8:	00008efd 	.word	0x00008efd
    97dc:	00008f29 	.word	0x00008f29
    97e0:	00008bb1 	.word	0x00008bb1
    97e4:	00008f39 	.word	0x00008f39
    97e8:	00009731 	.word	0x00009731

000097ec <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    97ec:	b530      	push	{r4, r5, lr}
    97ee:	b09f      	sub	sp, #124	; 0x7c
    97f0:	0004      	movs	r4, r0
    97f2:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    97f4:	282c      	cmp	r0, #44	; 0x2c
    97f6:	d111      	bne.n	981c <m2m_wifi_cb+0x30>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    97f8:	2300      	movs	r3, #0
    97fa:	2204      	movs	r2, #4
    97fc:	a903      	add	r1, sp, #12
    97fe:	0028      	movs	r0, r5
    9800:	4c94      	ldr	r4, [pc, #592]	; (9a54 <m2m_wifi_cb+0x268>)
    9802:	47a0      	blx	r4
    9804:	2800      	cmp	r0, #0
    9806:	d000      	beq.n	980a <m2m_wifi_cb+0x1e>
    9808:	e122      	b.n	9a50 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    980a:	4b93      	ldr	r3, [pc, #588]	; (9a58 <m2m_wifi_cb+0x26c>)
    980c:	681b      	ldr	r3, [r3, #0]
    980e:	2b00      	cmp	r3, #0
    9810:	d100      	bne.n	9814 <m2m_wifi_cb+0x28>
    9812:	e11d      	b.n	9a50 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    9814:	a903      	add	r1, sp, #12
    9816:	302c      	adds	r0, #44	; 0x2c
    9818:	4798      	blx	r3
    981a:	e119      	b.n	9a50 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    981c:	281b      	cmp	r0, #27
    981e:	d111      	bne.n	9844 <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    9820:	2300      	movs	r3, #0
    9822:	2208      	movs	r2, #8
    9824:	a903      	add	r1, sp, #12
    9826:	0028      	movs	r0, r5
    9828:	4c8a      	ldr	r4, [pc, #552]	; (9a54 <m2m_wifi_cb+0x268>)
    982a:	47a0      	blx	r4
    982c:	2800      	cmp	r0, #0
    982e:	d000      	beq.n	9832 <m2m_wifi_cb+0x46>
    9830:	e10e      	b.n	9a50 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    9832:	4b89      	ldr	r3, [pc, #548]	; (9a58 <m2m_wifi_cb+0x26c>)
    9834:	681b      	ldr	r3, [r3, #0]
    9836:	2b00      	cmp	r3, #0
    9838:	d100      	bne.n	983c <m2m_wifi_cb+0x50>
    983a:	e109      	b.n	9a50 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    983c:	a903      	add	r1, sp, #12
    983e:	301b      	adds	r0, #27
    9840:	4798      	blx	r3
    9842:	e105      	b.n	9a50 <m2m_wifi_cb+0x264>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    9844:	2806      	cmp	r0, #6
    9846:	d111      	bne.n	986c <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    9848:	2301      	movs	r3, #1
    984a:	2230      	movs	r2, #48	; 0x30
    984c:	a903      	add	r1, sp, #12
    984e:	0028      	movs	r0, r5
    9850:	4c80      	ldr	r4, [pc, #512]	; (9a54 <m2m_wifi_cb+0x268>)
    9852:	47a0      	blx	r4
    9854:	2800      	cmp	r0, #0
    9856:	d000      	beq.n	985a <m2m_wifi_cb+0x6e>
    9858:	e0fa      	b.n	9a50 <m2m_wifi_cb+0x264>
		{
			if(gpfAppWifiCb)
    985a:	4b7f      	ldr	r3, [pc, #508]	; (9a58 <m2m_wifi_cb+0x26c>)
    985c:	681b      	ldr	r3, [r3, #0]
    985e:	2b00      	cmp	r3, #0
    9860:	d100      	bne.n	9864 <m2m_wifi_cb+0x78>
    9862:	e0f5      	b.n	9a50 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    9864:	a903      	add	r1, sp, #12
    9866:	3006      	adds	r0, #6
    9868:	4798      	blx	r3
    986a:	e0f1      	b.n	9a50 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    986c:	280e      	cmp	r0, #14
    986e:	d100      	bne.n	9872 <m2m_wifi_cb+0x86>
    9870:	e0ee      	b.n	9a50 <m2m_wifi_cb+0x264>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    9872:	2832      	cmp	r0, #50	; 0x32
    9874:	d111      	bne.n	989a <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    9876:	2300      	movs	r3, #0
    9878:	2214      	movs	r2, #20
    987a:	a903      	add	r1, sp, #12
    987c:	0028      	movs	r0, r5
    987e:	4c75      	ldr	r4, [pc, #468]	; (9a54 <m2m_wifi_cb+0x268>)
    9880:	47a0      	blx	r4
    9882:	2800      	cmp	r0, #0
    9884:	d000      	beq.n	9888 <m2m_wifi_cb+0x9c>
    9886:	e0e3      	b.n	9a50 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    9888:	4b73      	ldr	r3, [pc, #460]	; (9a58 <m2m_wifi_cb+0x26c>)
    988a:	681b      	ldr	r3, [r3, #0]
    988c:	2b00      	cmp	r3, #0
    988e:	d100      	bne.n	9892 <m2m_wifi_cb+0xa6>
    9890:	e0de      	b.n	9a50 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    9892:	a903      	add	r1, sp, #12
    9894:	3032      	adds	r0, #50	; 0x32
    9896:	4798      	blx	r3
    9898:	e0da      	b.n	9a50 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    989a:	282f      	cmp	r0, #47	; 0x2f
    989c:	d116      	bne.n	98cc <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    989e:	2264      	movs	r2, #100	; 0x64
    98a0:	2100      	movs	r1, #0
    98a2:	a803      	add	r0, sp, #12
    98a4:	4b6d      	ldr	r3, [pc, #436]	; (9a5c <m2m_wifi_cb+0x270>)
    98a6:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    98a8:	2300      	movs	r3, #0
    98aa:	2264      	movs	r2, #100	; 0x64
    98ac:	a903      	add	r1, sp, #12
    98ae:	0028      	movs	r0, r5
    98b0:	4c68      	ldr	r4, [pc, #416]	; (9a54 <m2m_wifi_cb+0x268>)
    98b2:	47a0      	blx	r4
    98b4:	2800      	cmp	r0, #0
    98b6:	d000      	beq.n	98ba <m2m_wifi_cb+0xce>
    98b8:	e0ca      	b.n	9a50 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    98ba:	4b67      	ldr	r3, [pc, #412]	; (9a58 <m2m_wifi_cb+0x26c>)
    98bc:	681b      	ldr	r3, [r3, #0]
    98be:	2b00      	cmp	r3, #0
    98c0:	d100      	bne.n	98c4 <m2m_wifi_cb+0xd8>
    98c2:	e0c5      	b.n	9a50 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    98c4:	a903      	add	r1, sp, #12
    98c6:	302f      	adds	r0, #47	; 0x2f
    98c8:	4798      	blx	r3
    98ca:	e0c1      	b.n	9a50 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    98cc:	2834      	cmp	r0, #52	; 0x34
    98ce:	d122      	bne.n	9916 <m2m_wifi_cb+0x12a>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    98d0:	2300      	movs	r3, #0
    98d2:	2204      	movs	r2, #4
    98d4:	a903      	add	r1, sp, #12
    98d6:	0028      	movs	r0, r5
    98d8:	4c5e      	ldr	r4, [pc, #376]	; (9a54 <m2m_wifi_cb+0x268>)
    98da:	47a0      	blx	r4
    98dc:	2800      	cmp	r0, #0
    98de:	d000      	beq.n	98e2 <m2m_wifi_cb+0xf6>
    98e0:	e0b6      	b.n	9a50 <m2m_wifi_cb+0x264>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    98e2:	485f      	ldr	r0, [pc, #380]	; (9a60 <m2m_wifi_cb+0x274>)
    98e4:	4c5f      	ldr	r4, [pc, #380]	; (9a64 <m2m_wifi_cb+0x278>)
    98e6:	47a0      	blx	r4
    98e8:	9803      	ldr	r0, [sp, #12]
    98ea:	0c03      	lsrs	r3, r0, #16
    98ec:	21ff      	movs	r1, #255	; 0xff
    98ee:	400b      	ands	r3, r1
    98f0:	0a02      	lsrs	r2, r0, #8
    98f2:	400a      	ands	r2, r1
    98f4:	4001      	ands	r1, r0
    98f6:	0e00      	lsrs	r0, r0, #24
    98f8:	9000      	str	r0, [sp, #0]
    98fa:	485b      	ldr	r0, [pc, #364]	; (9a68 <m2m_wifi_cb+0x27c>)
    98fc:	47a0      	blx	r4
    98fe:	200d      	movs	r0, #13
    9900:	4b5a      	ldr	r3, [pc, #360]	; (9a6c <m2m_wifi_cb+0x280>)
    9902:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
    9904:	4b54      	ldr	r3, [pc, #336]	; (9a58 <m2m_wifi_cb+0x26c>)
    9906:	681b      	ldr	r3, [r3, #0]
    9908:	2b00      	cmp	r3, #0
    990a:	d100      	bne.n	990e <m2m_wifi_cb+0x122>
    990c:	e0a0      	b.n	9a50 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    990e:	2100      	movs	r1, #0
    9910:	2034      	movs	r0, #52	; 0x34
    9912:	4798      	blx	r3
    9914:	e09c      	b.n	9a50 <m2m_wifi_cb+0x264>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    9916:	2811      	cmp	r0, #17
    9918:	d118      	bne.n	994c <m2m_wifi_cb+0x160>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    991a:	2200      	movs	r2, #0
    991c:	4b54      	ldr	r3, [pc, #336]	; (9a70 <m2m_wifi_cb+0x284>)
    991e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    9920:	2300      	movs	r3, #0
    9922:	3204      	adds	r2, #4
    9924:	a903      	add	r1, sp, #12
    9926:	0028      	movs	r0, r5
    9928:	4c4a      	ldr	r4, [pc, #296]	; (9a54 <m2m_wifi_cb+0x268>)
    992a:	47a0      	blx	r4
    992c:	2800      	cmp	r0, #0
    992e:	d000      	beq.n	9932 <m2m_wifi_cb+0x146>
    9930:	e08e      	b.n	9a50 <m2m_wifi_cb+0x264>
		{
			gu8ChNum = strState.u8NumofCh;
    9932:	ab03      	add	r3, sp, #12
    9934:	781a      	ldrb	r2, [r3, #0]
    9936:	4b4f      	ldr	r3, [pc, #316]	; (9a74 <m2m_wifi_cb+0x288>)
    9938:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    993a:	4b47      	ldr	r3, [pc, #284]	; (9a58 <m2m_wifi_cb+0x26c>)
    993c:	681b      	ldr	r3, [r3, #0]
    993e:	2b00      	cmp	r3, #0
    9940:	d100      	bne.n	9944 <m2m_wifi_cb+0x158>
    9942:	e085      	b.n	9a50 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    9944:	a903      	add	r1, sp, #12
    9946:	3011      	adds	r0, #17
    9948:	4798      	blx	r3
    994a:	e081      	b.n	9a50 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    994c:	2813      	cmp	r0, #19
    994e:	d10f      	bne.n	9970 <m2m_wifi_cb+0x184>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    9950:	2300      	movs	r3, #0
    9952:	222c      	movs	r2, #44	; 0x2c
    9954:	a903      	add	r1, sp, #12
    9956:	0028      	movs	r0, r5
    9958:	4c3e      	ldr	r4, [pc, #248]	; (9a54 <m2m_wifi_cb+0x268>)
    995a:	47a0      	blx	r4
    995c:	2800      	cmp	r0, #0
    995e:	d177      	bne.n	9a50 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    9960:	4b3d      	ldr	r3, [pc, #244]	; (9a58 <m2m_wifi_cb+0x26c>)
    9962:	681b      	ldr	r3, [r3, #0]
    9964:	2b00      	cmp	r3, #0
    9966:	d073      	beq.n	9a50 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    9968:	a903      	add	r1, sp, #12
    996a:	3013      	adds	r0, #19
    996c:	4798      	blx	r3
    996e:	e06f      	b.n	9a50 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    9970:	2804      	cmp	r0, #4
    9972:	d10f      	bne.n	9994 <m2m_wifi_cb+0x1a8>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    9974:	2300      	movs	r3, #0
    9976:	2204      	movs	r2, #4
    9978:	a91c      	add	r1, sp, #112	; 0x70
    997a:	0028      	movs	r0, r5
    997c:	4c35      	ldr	r4, [pc, #212]	; (9a54 <m2m_wifi_cb+0x268>)
    997e:	47a0      	blx	r4
    9980:	2800      	cmp	r0, #0
    9982:	d165      	bne.n	9a50 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    9984:	4b34      	ldr	r3, [pc, #208]	; (9a58 <m2m_wifi_cb+0x26c>)
    9986:	681b      	ldr	r3, [r3, #0]
    9988:	2b00      	cmp	r3, #0
    998a:	d061      	beq.n	9a50 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    998c:	a91c      	add	r1, sp, #112	; 0x70
    998e:	3004      	adds	r0, #4
    9990:	4798      	blx	r3
    9992:	e05d      	b.n	9a50 <m2m_wifi_cb+0x264>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    9994:	2865      	cmp	r0, #101	; 0x65
    9996:	d10f      	bne.n	99b8 <m2m_wifi_cb+0x1cc>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    9998:	2300      	movs	r3, #0
    999a:	2204      	movs	r2, #4
    999c:	a91c      	add	r1, sp, #112	; 0x70
    999e:	0028      	movs	r0, r5
    99a0:	4c2c      	ldr	r4, [pc, #176]	; (9a54 <m2m_wifi_cb+0x268>)
    99a2:	47a0      	blx	r4
    99a4:	2800      	cmp	r0, #0
    99a6:	d153      	bne.n	9a50 <m2m_wifi_cb+0x264>
		{
			if (gpfAppWifiCb)
    99a8:	4b2b      	ldr	r3, [pc, #172]	; (9a58 <m2m_wifi_cb+0x26c>)
    99aa:	681b      	ldr	r3, [r3, #0]
    99ac:	2b00      	cmp	r3, #0
    99ae:	d04f      	beq.n	9a50 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    99b0:	a91c      	add	r1, sp, #112	; 0x70
    99b2:	3065      	adds	r0, #101	; 0x65
    99b4:	4798      	blx	r3
    99b6:	e04b      	b.n	9a50 <m2m_wifi_cb+0x264>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    99b8:	2809      	cmp	r0, #9
    99ba:	d10f      	bne.n	99dc <m2m_wifi_cb+0x1f0>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    99bc:	2301      	movs	r3, #1
    99be:	2264      	movs	r2, #100	; 0x64
    99c0:	a903      	add	r1, sp, #12
    99c2:	0028      	movs	r0, r5
    99c4:	4c23      	ldr	r4, [pc, #140]	; (9a54 <m2m_wifi_cb+0x268>)
    99c6:	47a0      	blx	r4
    99c8:	2800      	cmp	r0, #0
    99ca:	d141      	bne.n	9a50 <m2m_wifi_cb+0x264>
		{
			if(gpfAppWifiCb)
    99cc:	4b22      	ldr	r3, [pc, #136]	; (9a58 <m2m_wifi_cb+0x26c>)
    99ce:	681b      	ldr	r3, [r3, #0]
    99d0:	2b00      	cmp	r3, #0
    99d2:	d03d      	beq.n	9a50 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    99d4:	a903      	add	r1, sp, #12
    99d6:	3009      	adds	r0, #9
    99d8:	4798      	blx	r3
    99da:	e039      	b.n	9a50 <m2m_wifi_cb+0x264>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    99dc:	282a      	cmp	r0, #42	; 0x2a
    99de:	d10f      	bne.n	9a00 <m2m_wifi_cb+0x214>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    99e0:	2301      	movs	r3, #1
    99e2:	2204      	movs	r2, #4
    99e4:	a903      	add	r1, sp, #12
    99e6:	0028      	movs	r0, r5
    99e8:	4c1a      	ldr	r4, [pc, #104]	; (9a54 <m2m_wifi_cb+0x268>)
    99ea:	47a0      	blx	r4
    99ec:	2800      	cmp	r0, #0
    99ee:	d12f      	bne.n	9a50 <m2m_wifi_cb+0x264>
		{
			if(gpfAppWifiCb)
    99f0:	4b19      	ldr	r3, [pc, #100]	; (9a58 <m2m_wifi_cb+0x26c>)
    99f2:	681b      	ldr	r3, [r3, #0]
    99f4:	2b00      	cmp	r3, #0
    99f6:	d02b      	beq.n	9a50 <m2m_wifi_cb+0x264>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    99f8:	a903      	add	r1, sp, #12
    99fa:	302a      	adds	r0, #42	; 0x2a
    99fc:	4798      	blx	r3
    99fe:	e027      	b.n	9a50 <m2m_wifi_cb+0x264>
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    9a00:	2820      	cmp	r0, #32
    9a02:	d119      	bne.n	9a38 <m2m_wifi_cb+0x24c>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    9a04:	2300      	movs	r3, #0
    9a06:	2208      	movs	r2, #8
    9a08:	a903      	add	r1, sp, #12
    9a0a:	0028      	movs	r0, r5
    9a0c:	4c11      	ldr	r4, [pc, #68]	; (9a54 <m2m_wifi_cb+0x268>)
    9a0e:	47a0      	blx	r4
    9a10:	2800      	cmp	r0, #0
    9a12:	d11d      	bne.n	9a50 <m2m_wifi_cb+0x264>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    9a14:	ab03      	add	r3, sp, #12
    9a16:	889a      	ldrh	r2, [r3, #4]
    9a18:	0028      	movs	r0, r5
    9a1a:	3008      	adds	r0, #8
    9a1c:	2301      	movs	r3, #1
    9a1e:	9903      	ldr	r1, [sp, #12]
    9a20:	4c0c      	ldr	r4, [pc, #48]	; (9a54 <m2m_wifi_cb+0x268>)
    9a22:	47a0      	blx	r4
    9a24:	2800      	cmp	r0, #0
    9a26:	d113      	bne.n	9a50 <m2m_wifi_cb+0x264>
			{
				if(gpfAppWifiCb)
    9a28:	4b0b      	ldr	r3, [pc, #44]	; (9a58 <m2m_wifi_cb+0x26c>)
    9a2a:	681b      	ldr	r3, [r3, #0]
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	d00f      	beq.n	9a50 <m2m_wifi_cb+0x264>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    9a30:	a903      	add	r1, sp, #12
    9a32:	3020      	adds	r0, #32
    9a34:	4798      	blx	r3
    9a36:	e00b      	b.n	9a50 <m2m_wifi_cb+0x264>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    9a38:	2292      	movs	r2, #146	; 0x92
    9a3a:	0052      	lsls	r2, r2, #1
    9a3c:	490e      	ldr	r1, [pc, #56]	; (9a78 <m2m_wifi_cb+0x28c>)
    9a3e:	480f      	ldr	r0, [pc, #60]	; (9a7c <m2m_wifi_cb+0x290>)
    9a40:	4d08      	ldr	r5, [pc, #32]	; (9a64 <m2m_wifi_cb+0x278>)
    9a42:	47a8      	blx	r5
    9a44:	0021      	movs	r1, r4
    9a46:	480e      	ldr	r0, [pc, #56]	; (9a80 <m2m_wifi_cb+0x294>)
    9a48:	47a8      	blx	r5
    9a4a:	200d      	movs	r0, #13
    9a4c:	4b07      	ldr	r3, [pc, #28]	; (9a6c <m2m_wifi_cb+0x280>)
    9a4e:	4798      	blx	r3
	}
}
    9a50:	b01f      	add	sp, #124	; 0x7c
    9a52:	bd30      	pop	{r4, r5, pc}
    9a54:	00009645 	.word	0x00009645
    9a58:	200000a4 	.word	0x200000a4
    9a5c:	00008efd 	.word	0x00008efd
    9a60:	00012ee0 	.word	0x00012ee0
    9a64:	0001189d 	.word	0x0001189d
    9a68:	00013214 	.word	0x00013214
    9a6c:	000118d1 	.word	0x000118d1
    9a70:	200000a8 	.word	0x200000a8
    9a74:	200000a9 	.word	0x200000a9
    9a78:	000131f4 	.word	0x000131f4
    9a7c:	00012e7c 	.word	0x00012e7c
    9a80:	00013234 	.word	0x00013234

00009a84 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    9a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a86:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    9a88:	2201      	movs	r2, #1
    9a8a:	230f      	movs	r3, #15
    9a8c:	446b      	add	r3, sp
    9a8e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    9a90:	2800      	cmp	r0, #0
    9a92:	d05e      	beq.n	9b52 <m2m_wifi_init+0xce>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    9a94:	6802      	ldr	r2, [r0, #0]
    9a96:	4b31      	ldr	r3, [pc, #196]	; (9b5c <m2m_wifi_init+0xd8>)
    9a98:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    9a9a:	2200      	movs	r2, #0
    9a9c:	4b30      	ldr	r3, [pc, #192]	; (9b60 <m2m_wifi_init+0xdc>)
    9a9e:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    9aa0:	200f      	movs	r0, #15
    9aa2:	4468      	add	r0, sp
    9aa4:	4b2f      	ldr	r3, [pc, #188]	; (9b64 <m2m_wifi_init+0xe0>)
    9aa6:	4798      	blx	r3
    9aa8:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    9aaa:	d154      	bne.n	9b56 <m2m_wifi_init+0xd2>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    9aac:	2000      	movs	r0, #0
    9aae:	4b2e      	ldr	r3, [pc, #184]	; (9b68 <m2m_wifi_init+0xe4>)
    9ab0:	4798      	blx	r3
    9ab2:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    9ab4:	d149      	bne.n	9b4a <m2m_wifi_init+0xc6>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    9ab6:	492d      	ldr	r1, [pc, #180]	; (9b6c <m2m_wifi_init+0xe8>)
    9ab8:	2001      	movs	r0, #1
    9aba:	4b2d      	ldr	r3, [pc, #180]	; (9b70 <m2m_wifi_init+0xec>)
    9abc:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    9abe:	ae04      	add	r6, sp, #16
    9ac0:	0030      	movs	r0, r6
    9ac2:	4b2c      	ldr	r3, [pc, #176]	; (9b74 <m2m_wifi_init+0xf0>)
    9ac4:	4798      	blx	r3
    9ac6:	0004      	movs	r4, r0

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    9ac8:	482b      	ldr	r0, [pc, #172]	; (9b78 <m2m_wifi_init+0xf4>)
    9aca:	4d2c      	ldr	r5, [pc, #176]	; (9b7c <m2m_wifi_init+0xf8>)
    9acc:	47a8      	blx	r5
    9ace:	79b3      	ldrb	r3, [r6, #6]
    9ad0:	7972      	ldrb	r2, [r6, #5]
    9ad2:	7931      	ldrb	r1, [r6, #4]
    9ad4:	8c30      	ldrh	r0, [r6, #32]
    9ad6:	9000      	str	r0, [sp, #0]
    9ad8:	4829      	ldr	r0, [pc, #164]	; (9b80 <m2m_wifi_init+0xfc>)
    9ada:	47a8      	blx	r5
    9adc:	200d      	movs	r0, #13
    9ade:	4f29      	ldr	r7, [pc, #164]	; (9b84 <m2m_wifi_init+0x100>)
    9ae0:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    9ae2:	4825      	ldr	r0, [pc, #148]	; (9b78 <m2m_wifi_init+0xf4>)
    9ae4:	47a8      	blx	r5
    9ae6:	2226      	movs	r2, #38	; 0x26
    9ae8:	446a      	add	r2, sp
    9aea:	211a      	movs	r1, #26
    9aec:	4469      	add	r1, sp
    9aee:	4826      	ldr	r0, [pc, #152]	; (9b88 <m2m_wifi_init+0x104>)
    9af0:	47a8      	blx	r5
    9af2:	200d      	movs	r0, #13
    9af4:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    9af6:	4820      	ldr	r0, [pc, #128]	; (9b78 <m2m_wifi_init+0xf4>)
    9af8:	47a8      	blx	r5
    9afa:	7a73      	ldrb	r3, [r6, #9]
    9afc:	7a32      	ldrb	r2, [r6, #8]
    9afe:	79f1      	ldrb	r1, [r6, #7]
    9b00:	4822      	ldr	r0, [pc, #136]	; (9b8c <m2m_wifi_init+0x108>)
    9b02:	47a8      	blx	r5
    9b04:	200d      	movs	r0, #13
    9b06:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    9b08:	481b      	ldr	r0, [pc, #108]	; (9b78 <m2m_wifi_init+0xf4>)
    9b0a:	47a8      	blx	r5
    9b0c:	2302      	movs	r3, #2
    9b0e:	2205      	movs	r2, #5
    9b10:	2113      	movs	r1, #19
    9b12:	481f      	ldr	r0, [pc, #124]	; (9b90 <m2m_wifi_init+0x10c>)
    9b14:	47a8      	blx	r5
    9b16:	200d      	movs	r0, #13
    9b18:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    9b1a:	4817      	ldr	r0, [pc, #92]	; (9b78 <m2m_wifi_init+0xf4>)
    9b1c:	47a8      	blx	r5
    9b1e:	4a1d      	ldr	r2, [pc, #116]	; (9b94 <m2m_wifi_init+0x110>)
    9b20:	491d      	ldr	r1, [pc, #116]	; (9b98 <m2m_wifi_init+0x114>)
    9b22:	481e      	ldr	r0, [pc, #120]	; (9b9c <m2m_wifi_init+0x118>)
    9b24:	47a8      	blx	r5
    9b26:	200d      	movs	r0, #13
    9b28:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    9b2a:	0023      	movs	r3, r4
    9b2c:	330d      	adds	r3, #13
    9b2e:	d112      	bne.n	9b56 <m2m_wifi_init+0xd2>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    9b30:	22e8      	movs	r2, #232	; 0xe8
    9b32:	32ff      	adds	r2, #255	; 0xff
    9b34:	491a      	ldr	r1, [pc, #104]	; (9ba0 <m2m_wifi_init+0x11c>)
    9b36:	481b      	ldr	r0, [pc, #108]	; (9ba4 <m2m_wifi_init+0x120>)
    9b38:	4b10      	ldr	r3, [pc, #64]	; (9b7c <m2m_wifi_init+0xf8>)
    9b3a:	4798      	blx	r3
    9b3c:	481a      	ldr	r0, [pc, #104]	; (9ba8 <m2m_wifi_init+0x124>)
    9b3e:	4b1b      	ldr	r3, [pc, #108]	; (9bac <m2m_wifi_init+0x128>)
    9b40:	4798      	blx	r3
    9b42:	200d      	movs	r0, #13
    9b44:	4b0f      	ldr	r3, [pc, #60]	; (9b84 <m2m_wifi_init+0x100>)
    9b46:	4798      	blx	r3
    9b48:	e005      	b.n	9b56 <m2m_wifi_init+0xd2>
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
    9b4a:	2000      	movs	r0, #0
    9b4c:	4b18      	ldr	r3, [pc, #96]	; (9bb0 <m2m_wifi_init+0x12c>)
    9b4e:	4798      	blx	r3
    9b50:	e001      	b.n	9b56 <m2m_wifi_init+0xd2>
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
    9b52:	240c      	movs	r4, #12
    9b54:	4264      	negs	r4, r4

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    9b56:	0020      	movs	r0, r4
    9b58:	b00f      	add	sp, #60	; 0x3c
    9b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b5c:	200000a4 	.word	0x200000a4
    9b60:	200000a8 	.word	0x200000a8
    9b64:	0000a525 	.word	0x0000a525
    9b68:	000097b5 	.word	0x000097b5
    9b6c:	000097ed 	.word	0x000097ed
    9b70:	00009731 	.word	0x00009731
    9b74:	0000a441 	.word	0x0000a441
    9b78:	00012ee0 	.word	0x00012ee0
    9b7c:	0001189d 	.word	0x0001189d
    9b80:	00013300 	.word	0x00013300
    9b84:	000118d1 	.word	0x000118d1
    9b88:	00013328 	.word	0x00013328
    9b8c:	00013344 	.word	0x00013344
    9b90:	00013368 	.word	0x00013368
    9b94:	00013380 	.word	0x00013380
    9b98:	0001338c 	.word	0x0001338c
    9b9c:	00013398 	.word	0x00013398
    9ba0:	000131e4 	.word	0x000131e4
    9ba4:	00012e7c 	.word	0x00012e7c
    9ba8:	000133b0 	.word	0x000133b0
    9bac:	000119bd 	.word	0x000119bd
    9bb0:	0000a5f9 	.word	0x0000a5f9

00009bb4 <m2m_wifi_deinit>:

sint8  m2m_wifi_deinit(void * arg)
{
    9bb4:	b510      	push	{r4, lr}

	hif_deinit(NULL);
    9bb6:	2000      	movs	r0, #0
    9bb8:	4b03      	ldr	r3, [pc, #12]	; (9bc8 <m2m_wifi_deinit+0x14>)
    9bba:	4798      	blx	r3

	nm_drv_deinit(NULL);
    9bbc:	2000      	movs	r0, #0
    9bbe:	4b03      	ldr	r3, [pc, #12]	; (9bcc <m2m_wifi_deinit+0x18>)
    9bc0:	4798      	blx	r3

	return M2M_SUCCESS;
}
    9bc2:	2000      	movs	r0, #0
    9bc4:	bd10      	pop	{r4, pc}
    9bc6:	46c0      	nop			; (mov r8, r8)
    9bc8:	0000900d 	.word	0x0000900d
    9bcc:	0000a5f9 	.word	0x0000a5f9

00009bd0 <m2m_wifi_handle_events>:


sint8 m2m_wifi_handle_events(void * arg)
{
    9bd0:	b510      	push	{r4, lr}
	return hif_handle_isr();
    9bd2:	4b01      	ldr	r3, [pc, #4]	; (9bd8 <m2m_wifi_handle_events+0x8>)
    9bd4:	4798      	blx	r3
}
    9bd6:	bd10      	pop	{r4, pc}
    9bd8:	00009265 	.word	0x00009265

00009bdc <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    9bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bde:	464f      	mov	r7, r9
    9be0:	4646      	mov	r6, r8
    9be2:	b4c0      	push	{r6, r7}
    9be4:	b0a3      	sub	sp, #140	; 0x8c
    9be6:	9005      	str	r0, [sp, #20]
    9be8:	000c      	movs	r4, r1
    9bea:	0015      	movs	r5, r2
    9bec:	001f      	movs	r7, r3
    9bee:	ab2a      	add	r3, sp, #168	; 0xa8
    9bf0:	881b      	ldrh	r3, [r3, #0]
    9bf2:	4699      	mov	r9, r3
    9bf4:	ab2b      	add	r3, sp, #172	; 0xac
    9bf6:	781b      	ldrb	r3, [r3, #0]
    9bf8:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    9bfa:	2a01      	cmp	r2, #1
    9bfc:	d040      	beq.n	9c80 <m2m_wifi_connect_sc+0xa4>
	{
		if(pvAuthInfo == NULL)
    9bfe:	2f00      	cmp	r7, #0
    9c00:	d10d      	bne.n	9c1e <m2m_wifi_connect_sc+0x42>
		{
			M2M_ERR("Key is not valid\n");
    9c02:	4a80      	ldr	r2, [pc, #512]	; (9e04 <m2m_wifi_connect_sc+0x228>)
    9c04:	4980      	ldr	r1, [pc, #512]	; (9e08 <m2m_wifi_connect_sc+0x22c>)
    9c06:	4881      	ldr	r0, [pc, #516]	; (9e0c <m2m_wifi_connect_sc+0x230>)
    9c08:	4b81      	ldr	r3, [pc, #516]	; (9e10 <m2m_wifi_connect_sc+0x234>)
    9c0a:	4798      	blx	r3
    9c0c:	4881      	ldr	r0, [pc, #516]	; (9e14 <m2m_wifi_connect_sc+0x238>)
    9c0e:	4b82      	ldr	r3, [pc, #520]	; (9e18 <m2m_wifi_connect_sc+0x23c>)
    9c10:	4798      	blx	r3
    9c12:	200d      	movs	r0, #13
    9c14:	4b81      	ldr	r3, [pc, #516]	; (9e1c <m2m_wifi_connect_sc+0x240>)
    9c16:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9c18:	200c      	movs	r0, #12
    9c1a:	4240      	negs	r0, r0
			goto ERR1;
    9c1c:	e0ec      	b.n	9df8 <m2m_wifi_connect_sc+0x21c>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    9c1e:	2a02      	cmp	r2, #2
    9c20:	d12e      	bne.n	9c80 <m2m_wifi_connect_sc+0xa4>
    9c22:	0038      	movs	r0, r7
    9c24:	4b7e      	ldr	r3, [pc, #504]	; (9e20 <m2m_wifi_connect_sc+0x244>)
    9c26:	4798      	blx	r3
    9c28:	2840      	cmp	r0, #64	; 0x40
    9c2a:	d129      	bne.n	9c80 <m2m_wifi_connect_sc+0xa4>
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    9c2c:	783b      	ldrb	r3, [r7, #0]
    9c2e:	001a      	movs	r2, r3
    9c30:	3a30      	subs	r2, #48	; 0x30
    9c32:	2a36      	cmp	r2, #54	; 0x36
    9c34:	d813      	bhi.n	9c5e <m2m_wifi_connect_sc+0x82>
    9c36:	3a0a      	subs	r2, #10
    9c38:	2a06      	cmp	r2, #6
    9c3a:	d910      	bls.n	9c5e <m2m_wifi_connect_sc+0x82>
    9c3c:	3b47      	subs	r3, #71	; 0x47
    9c3e:	2b19      	cmp	r3, #25
    9c40:	d90d      	bls.n	9c5e <m2m_wifi_connect_sc+0x82>
    9c42:	1c7a      	adds	r2, r7, #1
    9c44:	0038      	movs	r0, r7
    9c46:	3040      	adds	r0, #64	; 0x40
    9c48:	7813      	ldrb	r3, [r2, #0]
    9c4a:	0019      	movs	r1, r3
    9c4c:	3930      	subs	r1, #48	; 0x30
    9c4e:	2936      	cmp	r1, #54	; 0x36
    9c50:	d805      	bhi.n	9c5e <m2m_wifi_connect_sc+0x82>
    9c52:	390a      	subs	r1, #10
    9c54:	2906      	cmp	r1, #6
    9c56:	d902      	bls.n	9c5e <m2m_wifi_connect_sc+0x82>
    9c58:	3b47      	subs	r3, #71	; 0x47
    9c5a:	2b19      	cmp	r3, #25
    9c5c:	d80d      	bhi.n	9c7a <m2m_wifi_connect_sc+0x9e>
				{
					M2M_ERR("Invalid Key\n");
    9c5e:	4a71      	ldr	r2, [pc, #452]	; (9e24 <m2m_wifi_connect_sc+0x248>)
    9c60:	4969      	ldr	r1, [pc, #420]	; (9e08 <m2m_wifi_connect_sc+0x22c>)
    9c62:	486a      	ldr	r0, [pc, #424]	; (9e0c <m2m_wifi_connect_sc+0x230>)
    9c64:	4b6a      	ldr	r3, [pc, #424]	; (9e10 <m2m_wifi_connect_sc+0x234>)
    9c66:	4798      	blx	r3
    9c68:	486f      	ldr	r0, [pc, #444]	; (9e28 <m2m_wifi_connect_sc+0x24c>)
    9c6a:	4b6b      	ldr	r3, [pc, #428]	; (9e18 <m2m_wifi_connect_sc+0x23c>)
    9c6c:	4798      	blx	r3
    9c6e:	200d      	movs	r0, #13
    9c70:	4b6a      	ldr	r3, [pc, #424]	; (9e1c <m2m_wifi_connect_sc+0x240>)
    9c72:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    9c74:	200c      	movs	r0, #12
    9c76:	4240      	negs	r0, r0
					goto ERR1;
    9c78:	e0be      	b.n	9df8 <m2m_wifi_connect_sc+0x21c>
    9c7a:	3201      	adds	r2, #1
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    9c7c:	4282      	cmp	r2, r0
    9c7e:	d1e3      	bne.n	9c48 <m2m_wifi_connect_sc+0x6c>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    9c80:	1e63      	subs	r3, r4, #1
    9c82:	2b1f      	cmp	r3, #31
    9c84:	d90d      	bls.n	9ca2 <m2m_wifi_connect_sc+0xc6>
	{
		M2M_ERR("SSID LEN INVALID\n");
    9c86:	4a69      	ldr	r2, [pc, #420]	; (9e2c <m2m_wifi_connect_sc+0x250>)
    9c88:	495f      	ldr	r1, [pc, #380]	; (9e08 <m2m_wifi_connect_sc+0x22c>)
    9c8a:	4860      	ldr	r0, [pc, #384]	; (9e0c <m2m_wifi_connect_sc+0x230>)
    9c8c:	4b60      	ldr	r3, [pc, #384]	; (9e10 <m2m_wifi_connect_sc+0x234>)
    9c8e:	4798      	blx	r3
    9c90:	4867      	ldr	r0, [pc, #412]	; (9e30 <m2m_wifi_connect_sc+0x254>)
    9c92:	4b61      	ldr	r3, [pc, #388]	; (9e18 <m2m_wifi_connect_sc+0x23c>)
    9c94:	4798      	blx	r3
    9c96:	200d      	movs	r0, #13
    9c98:	4b60      	ldr	r3, [pc, #384]	; (9e1c <m2m_wifi_connect_sc+0x240>)
    9c9a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    9c9c:	200c      	movs	r0, #12
    9c9e:	4240      	negs	r0, r0
		goto ERR1;
    9ca0:	e0aa      	b.n	9df8 <m2m_wifi_connect_sc+0x21c>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    9ca2:	464b      	mov	r3, r9
    9ca4:	3b01      	subs	r3, #1
    9ca6:	b29b      	uxth	r3, r3
    9ca8:	2b0d      	cmp	r3, #13
    9caa:	d911      	bls.n	9cd0 <m2m_wifi_connect_sc+0xf4>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    9cac:	464b      	mov	r3, r9
    9cae:	2bff      	cmp	r3, #255	; 0xff
    9cb0:	d00e      	beq.n	9cd0 <m2m_wifi_connect_sc+0xf4>
		{
			M2M_ERR("CH INVALID\n");
    9cb2:	228d      	movs	r2, #141	; 0x8d
    9cb4:	0092      	lsls	r2, r2, #2
    9cb6:	4954      	ldr	r1, [pc, #336]	; (9e08 <m2m_wifi_connect_sc+0x22c>)
    9cb8:	4854      	ldr	r0, [pc, #336]	; (9e0c <m2m_wifi_connect_sc+0x230>)
    9cba:	4b55      	ldr	r3, [pc, #340]	; (9e10 <m2m_wifi_connect_sc+0x234>)
    9cbc:	4798      	blx	r3
    9cbe:	485d      	ldr	r0, [pc, #372]	; (9e34 <m2m_wifi_connect_sc+0x258>)
    9cc0:	4b55      	ldr	r3, [pc, #340]	; (9e18 <m2m_wifi_connect_sc+0x23c>)
    9cc2:	4798      	blx	r3
    9cc4:	200d      	movs	r0, #13
    9cc6:	4b55      	ldr	r3, [pc, #340]	; (9e1c <m2m_wifi_connect_sc+0x240>)
    9cc8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9cca:	200c      	movs	r0, #12
    9ccc:	4240      	negs	r0, r0
			goto ERR1;
    9cce:	e093      	b.n	9df8 <m2m_wifi_connect_sc+0x21c>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    9cd0:	ae07      	add	r6, sp, #28
    9cd2:	0022      	movs	r2, r4
    9cd4:	9905      	ldr	r1, [sp, #20]
    9cd6:	205a      	movs	r0, #90	; 0x5a
    9cd8:	ab02      	add	r3, sp, #8
    9cda:	469c      	mov	ip, r3
    9cdc:	4460      	add	r0, ip
    9cde:	4b56      	ldr	r3, [pc, #344]	; (9e38 <m2m_wifi_connect_sc+0x25c>)
    9ce0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    9ce2:	1934      	adds	r4, r6, r4
    9ce4:	3446      	adds	r4, #70	; 0x46
    9ce6:	2300      	movs	r3, #0
    9ce8:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    9cea:	3344      	adds	r3, #68	; 0x44
    9cec:	464a      	mov	r2, r9
    9cee:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    9cf0:	4643      	mov	r3, r8
    9cf2:	1e5a      	subs	r2, r3, #1
    9cf4:	4193      	sbcs	r3, r2
    9cf6:	2267      	movs	r2, #103	; 0x67
    9cf8:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    9cfa:	2341      	movs	r3, #65	; 0x41
    9cfc:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    9cfe:	2d03      	cmp	r5, #3
    9d00:	d13b      	bne.n	9d7a <m2m_wifi_connect_sc+0x19e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    9d02:	783b      	ldrb	r3, [r7, #0]
    9d04:	3b01      	subs	r3, #1
    9d06:	b2db      	uxtb	r3, r3
    9d08:	aa07      	add	r2, sp, #28
    9d0a:	7013      	strb	r3, [r2, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    9d0c:	2b03      	cmp	r3, #3
    9d0e:	d90e      	bls.n	9d2e <m2m_wifi_connect_sc+0x152>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    9d10:	4a4a      	ldr	r2, [pc, #296]	; (9e3c <m2m_wifi_connect_sc+0x260>)
    9d12:	493d      	ldr	r1, [pc, #244]	; (9e08 <m2m_wifi_connect_sc+0x22c>)
    9d14:	483d      	ldr	r0, [pc, #244]	; (9e0c <m2m_wifi_connect_sc+0x230>)
    9d16:	4c3e      	ldr	r4, [pc, #248]	; (9e10 <m2m_wifi_connect_sc+0x234>)
    9d18:	47a0      	blx	r4
    9d1a:	ab07      	add	r3, sp, #28
    9d1c:	7819      	ldrb	r1, [r3, #0]
    9d1e:	4848      	ldr	r0, [pc, #288]	; (9e40 <m2m_wifi_connect_sc+0x264>)
    9d20:	47a0      	blx	r4
    9d22:	200d      	movs	r0, #13
    9d24:	4b3d      	ldr	r3, [pc, #244]	; (9e1c <m2m_wifi_connect_sc+0x240>)
    9d26:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9d28:	200c      	movs	r0, #12
    9d2a:	4240      	negs	r0, r0
			goto ERR1;
    9d2c:	e064      	b.n	9df8 <m2m_wifi_connect_sc+0x21c>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    9d2e:	787a      	ldrb	r2, [r7, #1]
    9d30:	1e51      	subs	r1, r2, #1
    9d32:	ab07      	add	r3, sp, #28
    9d34:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    9d36:	2310      	movs	r3, #16
    9d38:	0011      	movs	r1, r2
    9d3a:	4399      	bics	r1, r3
    9d3c:	290b      	cmp	r1, #11
    9d3e:	d00e      	beq.n	9d5e <m2m_wifi_connect_sc+0x182>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    9d40:	4a40      	ldr	r2, [pc, #256]	; (9e44 <m2m_wifi_connect_sc+0x268>)
    9d42:	4931      	ldr	r1, [pc, #196]	; (9e08 <m2m_wifi_connect_sc+0x22c>)
    9d44:	4831      	ldr	r0, [pc, #196]	; (9e0c <m2m_wifi_connect_sc+0x230>)
    9d46:	4c32      	ldr	r4, [pc, #200]	; (9e10 <m2m_wifi_connect_sc+0x234>)
    9d48:	47a0      	blx	r4
    9d4a:	ab07      	add	r3, sp, #28
    9d4c:	7859      	ldrb	r1, [r3, #1]
    9d4e:	483e      	ldr	r0, [pc, #248]	; (9e48 <m2m_wifi_connect_sc+0x26c>)
    9d50:	47a0      	blx	r4
    9d52:	200d      	movs	r0, #13
    9d54:	4b31      	ldr	r3, [pc, #196]	; (9e1c <m2m_wifi_connect_sc+0x240>)
    9d56:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9d58:	200c      	movs	r0, #12
    9d5a:	4240      	negs	r0, r0
			goto ERR1;
    9d5c:	e04c      	b.n	9df8 <m2m_wifi_connect_sc+0x21c>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    9d5e:	1cb9      	adds	r1, r7, #2
    9d60:	2016      	movs	r0, #22
    9d62:	ab02      	add	r3, sp, #8
    9d64:	469c      	mov	ip, r3
    9d66:	4460      	add	r0, ip
    9d68:	4b33      	ldr	r3, [pc, #204]	; (9e38 <m2m_wifi_connect_sc+0x25c>)
    9d6a:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    9d6c:	787b      	ldrb	r3, [r7, #1]
    9d6e:	aa07      	add	r2, sp, #28
    9d70:	4694      	mov	ip, r2
    9d72:	4463      	add	r3, ip
    9d74:	2200      	movs	r2, #0
    9d76:	709a      	strb	r2, [r3, #2]
    9d78:	e034      	b.n	9de4 <m2m_wifi_connect_sc+0x208>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    9d7a:	2d02      	cmp	r5, #2
    9d7c:	d11a      	bne.n	9db4 <m2m_wifi_connect_sc+0x1d8>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    9d7e:	0038      	movs	r0, r7
    9d80:	4b27      	ldr	r3, [pc, #156]	; (9e20 <m2m_wifi_connect_sc+0x244>)
    9d82:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    9d84:	1e43      	subs	r3, r0, #1
    9d86:	b29b      	uxth	r3, r3
    9d88:	2b3f      	cmp	r3, #63	; 0x3f
    9d8a:	d90d      	bls.n	9da8 <m2m_wifi_connect_sc+0x1cc>
		{
			M2M_ERR("Incorrect PSK key length\n");
    9d8c:	4a2f      	ldr	r2, [pc, #188]	; (9e4c <m2m_wifi_connect_sc+0x270>)
    9d8e:	491e      	ldr	r1, [pc, #120]	; (9e08 <m2m_wifi_connect_sc+0x22c>)
    9d90:	481e      	ldr	r0, [pc, #120]	; (9e0c <m2m_wifi_connect_sc+0x230>)
    9d92:	4b1f      	ldr	r3, [pc, #124]	; (9e10 <m2m_wifi_connect_sc+0x234>)
    9d94:	4798      	blx	r3
    9d96:	482e      	ldr	r0, [pc, #184]	; (9e50 <m2m_wifi_connect_sc+0x274>)
    9d98:	4b1f      	ldr	r3, [pc, #124]	; (9e18 <m2m_wifi_connect_sc+0x23c>)
    9d9a:	4798      	blx	r3
    9d9c:	200d      	movs	r0, #13
    9d9e:	4b1f      	ldr	r3, [pc, #124]	; (9e1c <m2m_wifi_connect_sc+0x240>)
    9da0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9da2:	200c      	movs	r0, #12
    9da4:	4240      	negs	r0, r0
			goto ERR1;
    9da6:	e027      	b.n	9df8 <m2m_wifi_connect_sc+0x21c>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    9da8:	1c42      	adds	r2, r0, #1
    9daa:	0039      	movs	r1, r7
    9dac:	a807      	add	r0, sp, #28
    9dae:	4b22      	ldr	r3, [pc, #136]	; (9e38 <m2m_wifi_connect_sc+0x25c>)
    9db0:	4798      	blx	r3
    9db2:	e017      	b.n	9de4 <m2m_wifi_connect_sc+0x208>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    9db4:	2d04      	cmp	r5, #4
    9db6:	d105      	bne.n	9dc4 <m2m_wifi_connect_sc+0x1e8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    9db8:	223e      	movs	r2, #62	; 0x3e
    9dba:	0039      	movs	r1, r7
    9dbc:	a807      	add	r0, sp, #28
    9dbe:	4b1e      	ldr	r3, [pc, #120]	; (9e38 <m2m_wifi_connect_sc+0x25c>)
    9dc0:	4798      	blx	r3
    9dc2:	e00f      	b.n	9de4 <m2m_wifi_connect_sc+0x208>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    9dc4:	2d01      	cmp	r5, #1
    9dc6:	d00d      	beq.n	9de4 <m2m_wifi_connect_sc+0x208>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    9dc8:	4a22      	ldr	r2, [pc, #136]	; (9e54 <m2m_wifi_connect_sc+0x278>)
    9dca:	490f      	ldr	r1, [pc, #60]	; (9e08 <m2m_wifi_connect_sc+0x22c>)
    9dcc:	480f      	ldr	r0, [pc, #60]	; (9e0c <m2m_wifi_connect_sc+0x230>)
    9dce:	4b10      	ldr	r3, [pc, #64]	; (9e10 <m2m_wifi_connect_sc+0x234>)
    9dd0:	4798      	blx	r3
    9dd2:	4821      	ldr	r0, [pc, #132]	; (9e58 <m2m_wifi_connect_sc+0x27c>)
    9dd4:	4b10      	ldr	r3, [pc, #64]	; (9e18 <m2m_wifi_connect_sc+0x23c>)
    9dd6:	4798      	blx	r3
    9dd8:	200d      	movs	r0, #13
    9dda:	4b10      	ldr	r3, [pc, #64]	; (9e1c <m2m_wifi_connect_sc+0x240>)
    9ddc:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    9dde:	200c      	movs	r0, #12
    9de0:	4240      	negs	r0, r0
		goto ERR1;
    9de2:	e009      	b.n	9df8 <m2m_wifi_connect_sc+0x21c>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    9de4:	2300      	movs	r3, #0
    9de6:	9302      	str	r3, [sp, #8]
    9de8:	9301      	str	r3, [sp, #4]
    9dea:	9300      	str	r3, [sp, #0]
    9dec:	336c      	adds	r3, #108	; 0x6c
    9dee:	aa07      	add	r2, sp, #28
    9df0:	2128      	movs	r1, #40	; 0x28
    9df2:	2001      	movs	r0, #1
    9df4:	4c19      	ldr	r4, [pc, #100]	; (9e5c <m2m_wifi_connect_sc+0x280>)
    9df6:	47a0      	blx	r4

ERR1:
	return ret;
}
    9df8:	b023      	add	sp, #140	; 0x8c
    9dfa:	bc0c      	pop	{r2, r3}
    9dfc:	4690      	mov	r8, r2
    9dfe:	4699      	mov	r9, r3
    9e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e02:	46c0      	nop			; (mov r8, r8)
    9e04:	00000215 	.word	0x00000215
    9e08:	00013200 	.word	0x00013200
    9e0c:	00012e7c 	.word	0x00012e7c
    9e10:	0001189d 	.word	0x0001189d
    9e14:	000133cc 	.word	0x000133cc
    9e18:	000119bd 	.word	0x000119bd
    9e1c:	000118d1 	.word	0x000118d1
    9e20:	00008f0d 	.word	0x00008f0d
    9e24:	00000221 	.word	0x00000221
    9e28:	000133e0 	.word	0x000133e0
    9e2c:	0000022b 	.word	0x0000022b
    9e30:	000133ec 	.word	0x000133ec
    9e34:	00013400 	.word	0x00013400
    9e38:	00008ee9 	.word	0x00008ee9
    9e3c:	0000024b 	.word	0x0000024b
    9e40:	0001340c 	.word	0x0001340c
    9e44:	00000252 	.word	0x00000252
    9e48:	00013428 	.word	0x00013428
    9e4c:	00000261 	.word	0x00000261
    9e50:	00013444 	.word	0x00013444
    9e54:	00000271 	.word	0x00000271
    9e58:	00013460 	.word	0x00013460
    9e5c:	00009031 	.word	0x00009031

00009e60 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    9e60:	b530      	push	{r4, r5, lr}
    9e62:	b083      	sub	sp, #12
    9e64:	ac06      	add	r4, sp, #24
    9e66:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    9e68:	2500      	movs	r5, #0
    9e6a:	9501      	str	r5, [sp, #4]
    9e6c:	9400      	str	r4, [sp, #0]
    9e6e:	4c02      	ldr	r4, [pc, #8]	; (9e78 <m2m_wifi_connect+0x18>)
    9e70:	47a0      	blx	r4
}
    9e72:	b003      	add	sp, #12
    9e74:	bd30      	pop	{r4, r5, pc}
    9e76:	46c0      	nop			; (mov r8, r8)
    9e78:	00009bdd 	.word	0x00009bdd

00009e7c <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    9e7c:	2000      	movs	r0, #0
    9e7e:	4770      	bx	lr

00009e80 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    9e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e82:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    9e84:	2580      	movs	r5, #128	; 0x80
    9e86:	006d      	lsls	r5, r5, #1
    9e88:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    9e8a:	24a5      	movs	r4, #165	; 0xa5
    9e8c:	0164      	lsls	r4, r4, #5
    9e8e:	4f08      	ldr	r7, [pc, #32]	; (9eb0 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    9e90:	4e08      	ldr	r6, [pc, #32]	; (9eb4 <chip_apply_conf+0x34>)
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    9e92:	0029      	movs	r1, r5
    9e94:	0020      	movs	r0, r4
    9e96:	47b8      	blx	r7
		if(val32 != 0) {		
			uint32 reg = 0;
    9e98:	2300      	movs	r3, #0
    9e9a:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    9e9c:	a901      	add	r1, sp, #4
    9e9e:	0020      	movs	r0, r4
    9ea0:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    9ea2:	2800      	cmp	r0, #0
    9ea4:	d1f5      	bne.n	9e92 <chip_apply_conf+0x12>
				if(reg == val32)
    9ea6:	9b01      	ldr	r3, [sp, #4]
    9ea8:	429d      	cmp	r5, r3
    9eaa:	d1f2      	bne.n	9e92 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    9eac:	b003      	add	sp, #12
    9eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9eb0:	0000a365 	.word	0x0000a365
    9eb4:	0000a359 	.word	0x0000a359

00009eb8 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    9eb8:	b500      	push	{lr}
    9eba:	b083      	sub	sp, #12
	uint32 reg = 0;
    9ebc:	2300      	movs	r3, #0
    9ebe:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    9ec0:	a901      	add	r1, sp, #4
    9ec2:	4810      	ldr	r0, [pc, #64]	; (9f04 <enable_interrupts+0x4c>)
    9ec4:	4b10      	ldr	r3, [pc, #64]	; (9f08 <enable_interrupts+0x50>)
    9ec6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    9ec8:	2800      	cmp	r0, #0
    9eca:	d119      	bne.n	9f00 <enable_interrupts+0x48>
	
	reg |= ((uint32) 1 << 8);
    9ecc:	2180      	movs	r1, #128	; 0x80
    9ece:	0049      	lsls	r1, r1, #1
    9ed0:	9b01      	ldr	r3, [sp, #4]
    9ed2:	4319      	orrs	r1, r3
    9ed4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    9ed6:	480b      	ldr	r0, [pc, #44]	; (9f04 <enable_interrupts+0x4c>)
    9ed8:	4b0c      	ldr	r3, [pc, #48]	; (9f0c <enable_interrupts+0x54>)
    9eda:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    9edc:	2800      	cmp	r0, #0
    9ede:	d10f      	bne.n	9f00 <enable_interrupts+0x48>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    9ee0:	a901      	add	r1, sp, #4
    9ee2:	20d0      	movs	r0, #208	; 0xd0
    9ee4:	0140      	lsls	r0, r0, #5
    9ee6:	4b08      	ldr	r3, [pc, #32]	; (9f08 <enable_interrupts+0x50>)
    9ee8:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    9eea:	2800      	cmp	r0, #0
    9eec:	d108      	bne.n	9f00 <enable_interrupts+0x48>
	
	reg |= ((uint32) 1 << 16);
    9eee:	2180      	movs	r1, #128	; 0x80
    9ef0:	0249      	lsls	r1, r1, #9
    9ef2:	9b01      	ldr	r3, [sp, #4]
    9ef4:	4319      	orrs	r1, r3
    9ef6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    9ef8:	20d0      	movs	r0, #208	; 0xd0
    9efa:	0140      	lsls	r0, r0, #5
    9efc:	4b03      	ldr	r3, [pc, #12]	; (9f0c <enable_interrupts+0x54>)
    9efe:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    9f00:	b003      	add	sp, #12
    9f02:	bd00      	pop	{pc}
    9f04:	00001408 	.word	0x00001408
    9f08:	0000a359 	.word	0x0000a359
    9f0c:	0000a365 	.word	0x0000a365

00009f10 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    9f10:	b510      	push	{r4, lr}
    9f12:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    9f14:	4b27      	ldr	r3, [pc, #156]	; (9fb4 <nmi_get_chipid+0xa4>)
    9f16:	681c      	ldr	r4, [r3, #0]
    9f18:	2c00      	cmp	r4, #0
    9f1a:	d146      	bne.n	9faa <nmi_get_chipid+0x9a>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    9f1c:	0019      	movs	r1, r3
    9f1e:	2080      	movs	r0, #128	; 0x80
    9f20:	0140      	lsls	r0, r0, #5
    9f22:	4b25      	ldr	r3, [pc, #148]	; (9fb8 <nmi_get_chipid+0xa8>)
    9f24:	4798      	blx	r3
    9f26:	2800      	cmp	r0, #0
    9f28:	d003      	beq.n	9f32 <nmi_get_chipid+0x22>
			chipid = 0;
    9f2a:	2200      	movs	r2, #0
    9f2c:	4b21      	ldr	r3, [pc, #132]	; (9fb4 <nmi_get_chipid+0xa4>)
    9f2e:	601a      	str	r2, [r3, #0]
			return 0;
    9f30:	e03d      	b.n	9fae <nmi_get_chipid+0x9e>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    9f32:	a901      	add	r1, sp, #4
    9f34:	4821      	ldr	r0, [pc, #132]	; (9fbc <nmi_get_chipid+0xac>)
    9f36:	4b20      	ldr	r3, [pc, #128]	; (9fb8 <nmi_get_chipid+0xa8>)
    9f38:	4798      	blx	r3
    9f3a:	2800      	cmp	r0, #0
    9f3c:	d003      	beq.n	9f46 <nmi_get_chipid+0x36>
			chipid = 0;
    9f3e:	2200      	movs	r2, #0
    9f40:	4b1c      	ldr	r3, [pc, #112]	; (9fb4 <nmi_get_chipid+0xa4>)
    9f42:	601a      	str	r2, [r3, #0]
			return 0;
    9f44:	e033      	b.n	9fae <nmi_get_chipid+0x9e>
		}

		if (chipid == 0x1002a0)  {
    9f46:	4b1b      	ldr	r3, [pc, #108]	; (9fb4 <nmi_get_chipid+0xa4>)
    9f48:	681b      	ldr	r3, [r3, #0]
    9f4a:	4a1d      	ldr	r2, [pc, #116]	; (9fc0 <nmi_get_chipid+0xb0>)
    9f4c:	4293      	cmp	r3, r2
    9f4e:	d106      	bne.n	9f5e <nmi_get_chipid+0x4e>
			if (rfrevid == 0x1) { /* 1002A0 */
    9f50:	9b01      	ldr	r3, [sp, #4]
    9f52:	2b01      	cmp	r3, #1
    9f54:	d021      	beq.n	9f9a <nmi_get_chipid+0x8a>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    9f56:	4a1b      	ldr	r2, [pc, #108]	; (9fc4 <nmi_get_chipid+0xb4>)
    9f58:	4b16      	ldr	r3, [pc, #88]	; (9fb4 <nmi_get_chipid+0xa4>)
    9f5a:	601a      	str	r2, [r3, #0]
    9f5c:	e01d      	b.n	9f9a <nmi_get_chipid+0x8a>
			}
		} else if(chipid == 0x1002b0) {
    9f5e:	4a1a      	ldr	r2, [pc, #104]	; (9fc8 <nmi_get_chipid+0xb8>)
    9f60:	4293      	cmp	r3, r2
    9f62:	d10c      	bne.n	9f7e <nmi_get_chipid+0x6e>
			if(rfrevid == 3) { /* 1002B0 */
    9f64:	9b01      	ldr	r3, [sp, #4]
    9f66:	2b03      	cmp	r3, #3
    9f68:	d017      	beq.n	9f9a <nmi_get_chipid+0x8a>
			} else if(rfrevid == 4) { /* 1002B1 */
    9f6a:	2b04      	cmp	r3, #4
    9f6c:	d103      	bne.n	9f76 <nmi_get_chipid+0x66>
				chipid = 0x1002b1;
    9f6e:	4a17      	ldr	r2, [pc, #92]	; (9fcc <nmi_get_chipid+0xbc>)
    9f70:	4b10      	ldr	r3, [pc, #64]	; (9fb4 <nmi_get_chipid+0xa4>)
    9f72:	601a      	str	r2, [r3, #0]
    9f74:	e011      	b.n	9f9a <nmi_get_chipid+0x8a>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    9f76:	4a16      	ldr	r2, [pc, #88]	; (9fd0 <nmi_get_chipid+0xc0>)
    9f78:	4b0e      	ldr	r3, [pc, #56]	; (9fb4 <nmi_get_chipid+0xa4>)
    9f7a:	601a      	str	r2, [r3, #0]
    9f7c:	e00d      	b.n	9f9a <nmi_get_chipid+0x8a>
			}
		}else if(chipid == 0x1000F0) { 
    9f7e:	4a15      	ldr	r2, [pc, #84]	; (9fd4 <nmi_get_chipid+0xc4>)
    9f80:	4293      	cmp	r3, r2
    9f82:	d10a      	bne.n	9f9a <nmi_get_chipid+0x8a>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    9f84:	490b      	ldr	r1, [pc, #44]	; (9fb4 <nmi_get_chipid+0xa4>)
    9f86:	20ec      	movs	r0, #236	; 0xec
    9f88:	0380      	lsls	r0, r0, #14
    9f8a:	4b0b      	ldr	r3, [pc, #44]	; (9fb8 <nmi_get_chipid+0xa8>)
    9f8c:	4798      	blx	r3
    9f8e:	2800      	cmp	r0, #0
    9f90:	d003      	beq.n	9f9a <nmi_get_chipid+0x8a>
			chipid = 0;
    9f92:	2200      	movs	r2, #0
    9f94:	4b07      	ldr	r3, [pc, #28]	; (9fb4 <nmi_get_chipid+0xa4>)
    9f96:	601a      	str	r2, [r3, #0]
			return 0;
    9f98:	e009      	b.n	9fae <nmi_get_chipid+0x9e>
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
    9f9a:	4a06      	ldr	r2, [pc, #24]	; (9fb4 <nmi_get_chipid+0xa4>)
    9f9c:	4b0e      	ldr	r3, [pc, #56]	; (9fd8 <nmi_get_chipid+0xc8>)
    9f9e:	6811      	ldr	r1, [r2, #0]
    9fa0:	400b      	ands	r3, r1
    9fa2:	21a0      	movs	r1, #160	; 0xa0
    9fa4:	02c9      	lsls	r1, r1, #11
    9fa6:	430b      	orrs	r3, r1
    9fa8:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    9faa:	4b02      	ldr	r3, [pc, #8]	; (9fb4 <nmi_get_chipid+0xa4>)
    9fac:	681c      	ldr	r4, [r3, #0]
}
    9fae:	0020      	movs	r0, r4
    9fb0:	b002      	add	sp, #8
    9fb2:	bd10      	pop	{r4, pc}
    9fb4:	200000ac 	.word	0x200000ac
    9fb8:	0000a359 	.word	0x0000a359
    9fbc:	000013f4 	.word	0x000013f4
    9fc0:	001002a0 	.word	0x001002a0
    9fc4:	001002a1 	.word	0x001002a1
    9fc8:	001002b0 	.word	0x001002b0
    9fcc:	001002b1 	.word	0x001002b1
    9fd0:	001002b2 	.word	0x001002b2
    9fd4:	001000f0 	.word	0x001000f0
    9fd8:	fff0ffff 	.word	0xfff0ffff

00009fdc <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    9fdc:	b530      	push	{r4, r5, lr}
    9fde:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    9fe0:	4c15      	ldr	r4, [pc, #84]	; (a038 <chip_sleep+0x5c>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    9fe2:	2501      	movs	r5, #1
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    9fe4:	a901      	add	r1, sp, #4
    9fe6:	2010      	movs	r0, #16
    9fe8:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    9fea:	2800      	cmp	r0, #0
    9fec:	d122      	bne.n	a034 <chip_sleep+0x58>
		if((reg & NBIT0) == 0) break;
    9fee:	9b01      	ldr	r3, [sp, #4]
    9ff0:	422b      	tst	r3, r5
    9ff2:	d1f7      	bne.n	9fe4 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    9ff4:	a901      	add	r1, sp, #4
    9ff6:	3001      	adds	r0, #1
    9ff8:	4b0f      	ldr	r3, [pc, #60]	; (a038 <chip_sleep+0x5c>)
    9ffa:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    9ffc:	2800      	cmp	r0, #0
    9ffe:	d119      	bne.n	a034 <chip_sleep+0x58>
	if(reg & NBIT1)
    a000:	9901      	ldr	r1, [sp, #4]
    a002:	078b      	lsls	r3, r1, #30
    a004:	d507      	bpl.n	a016 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    a006:	2302      	movs	r3, #2
    a008:	4399      	bics	r1, r3
    a00a:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    a00c:	3001      	adds	r0, #1
    a00e:	4b0b      	ldr	r3, [pc, #44]	; (a03c <chip_sleep+0x60>)
    a010:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    a012:	2800      	cmp	r0, #0
    a014:	d10e      	bne.n	a034 <chip_sleep+0x58>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    a016:	a901      	add	r1, sp, #4
    a018:	200b      	movs	r0, #11
    a01a:	4b07      	ldr	r3, [pc, #28]	; (a038 <chip_sleep+0x5c>)
    a01c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    a01e:	2800      	cmp	r0, #0
    a020:	d108      	bne.n	a034 <chip_sleep+0x58>
	if(reg & NBIT0)
    a022:	9901      	ldr	r1, [sp, #4]
    a024:	07cb      	lsls	r3, r1, #31
    a026:	d505      	bpl.n	a034 <chip_sleep+0x58>
	{
		reg &= ~NBIT0;
    a028:	2301      	movs	r3, #1
    a02a:	4399      	bics	r1, r3
    a02c:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    a02e:	300b      	adds	r0, #11
    a030:	4b02      	ldr	r3, [pc, #8]	; (a03c <chip_sleep+0x60>)
    a032:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    a034:	b003      	add	sp, #12
    a036:	bd30      	pop	{r4, r5, pc}
    a038:	0000a359 	.word	0x0000a359
    a03c:	0000a365 	.word	0x0000a365

0000a040 <chip_wake>:
sint8 chip_wake(void)
{
    a040:	b5f0      	push	{r4, r5, r6, r7, lr}
    a042:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    a044:	2300      	movs	r3, #0
    a046:	9301      	str	r3, [sp, #4]
    a048:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    a04a:	a901      	add	r1, sp, #4
    a04c:	200b      	movs	r0, #11
    a04e:	4b28      	ldr	r3, [pc, #160]	; (a0f0 <chip_wake+0xb0>)
    a050:	4798      	blx	r3
    a052:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a054:	d148      	bne.n	a0e8 <chip_wake+0xa8>
	
	if(!(reg & NBIT0))
    a056:	9901      	ldr	r1, [sp, #4]
    a058:	07cb      	lsls	r3, r1, #31
    a05a:	d406      	bmi.n	a06a <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    a05c:	2301      	movs	r3, #1
    a05e:	4319      	orrs	r1, r3
    a060:	200b      	movs	r0, #11
    a062:	4b24      	ldr	r3, [pc, #144]	; (a0f4 <chip_wake+0xb4>)
    a064:	4798      	blx	r3
    a066:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a068:	d13e      	bne.n	a0e8 <chip_wake+0xa8>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    a06a:	a901      	add	r1, sp, #4
    a06c:	2001      	movs	r0, #1
    a06e:	4b20      	ldr	r3, [pc, #128]	; (a0f0 <chip_wake+0xb0>)
    a070:	4798      	blx	r3
    a072:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a074:	d138      	bne.n	a0e8 <chip_wake+0xa8>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    a076:	9901      	ldr	r1, [sp, #4]
    a078:	078b      	lsls	r3, r1, #30
    a07a:	d406      	bmi.n	a08a <chip_wake+0x4a>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    a07c:	2302      	movs	r3, #2
    a07e:	4319      	orrs	r1, r3
    a080:	2001      	movs	r0, #1
    a082:	4b1c      	ldr	r3, [pc, #112]	; (a0f4 <chip_wake+0xb4>)
    a084:	4798      	blx	r3
    a086:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    a088:	d12e      	bne.n	a0e8 <chip_wake+0xa8>

ERR1:
	return ret;
}
sint8 chip_wake(void)
{
    a08a:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    a08c:	4f18      	ldr	r7, [pc, #96]	; (a0f0 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    a08e:	4e1a      	ldr	r6, [pc, #104]	; (a0f8 <chip_wake+0xb8>)
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    a090:	4669      	mov	r1, sp
    a092:	200f      	movs	r0, #15
    a094:	47b8      	blx	r7
    a096:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    a098:	d00d      	beq.n	a0b6 <chip_wake+0x76>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    a09a:	22aa      	movs	r2, #170	; 0xaa
    a09c:	0052      	lsls	r2, r2, #1
    a09e:	4917      	ldr	r1, [pc, #92]	; (a0fc <chip_wake+0xbc>)
    a0a0:	4817      	ldr	r0, [pc, #92]	; (a100 <chip_wake+0xc0>)
    a0a2:	4d18      	ldr	r5, [pc, #96]	; (a104 <chip_wake+0xc4>)
    a0a4:	47a8      	blx	r5
    a0a6:	9a00      	ldr	r2, [sp, #0]
    a0a8:	0021      	movs	r1, r4
    a0aa:	4817      	ldr	r0, [pc, #92]	; (a108 <chip_wake+0xc8>)
    a0ac:	47a8      	blx	r5
    a0ae:	200d      	movs	r0, #13
    a0b0:	4b16      	ldr	r3, [pc, #88]	; (a10c <chip_wake+0xcc>)
    a0b2:	4798      	blx	r3
			goto _WAKE_EXIT;
    a0b4:	e018      	b.n	a0e8 <chip_wake+0xa8>
		}
		if(clk_status_reg & NBIT2) {
    a0b6:	9b00      	ldr	r3, [sp, #0]
    a0b8:	075b      	lsls	r3, r3, #29
    a0ba:	d413      	bmi.n	a0e4 <chip_wake+0xa4>
			break;
		}
		nm_bsp_sleep(2);
    a0bc:	2002      	movs	r0, #2
    a0be:	47b0      	blx	r6
    a0c0:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    a0c2:	2d00      	cmp	r5, #0
    a0c4:	d1e4      	bne.n	a090 <chip_wake+0x50>
		{
			M2M_ERR("Failed to wakup the chip\n");
    a0c6:	22af      	movs	r2, #175	; 0xaf
    a0c8:	0052      	lsls	r2, r2, #1
    a0ca:	490c      	ldr	r1, [pc, #48]	; (a0fc <chip_wake+0xbc>)
    a0cc:	480c      	ldr	r0, [pc, #48]	; (a100 <chip_wake+0xc0>)
    a0ce:	4b0d      	ldr	r3, [pc, #52]	; (a104 <chip_wake+0xc4>)
    a0d0:	4798      	blx	r3
    a0d2:	480f      	ldr	r0, [pc, #60]	; (a110 <chip_wake+0xd0>)
    a0d4:	4b0f      	ldr	r3, [pc, #60]	; (a114 <chip_wake+0xd4>)
    a0d6:	4798      	blx	r3
    a0d8:	200d      	movs	r0, #13
    a0da:	4b0c      	ldr	r3, [pc, #48]	; (a10c <chip_wake+0xcc>)
    a0dc:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    a0de:	2404      	movs	r4, #4
    a0e0:	4264      	negs	r4, r4
			goto _WAKE_EXIT;
    a0e2:	e001      	b.n	a0e8 <chip_wake+0xa8>
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    a0e4:	4b0c      	ldr	r3, [pc, #48]	; (a118 <chip_wake+0xd8>)
    a0e6:	4798      	blx	r3
	
_WAKE_EXIT:
	return ret;
}
    a0e8:	0020      	movs	r0, r4
    a0ea:	b003      	add	sp, #12
    a0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0ee:	46c0      	nop			; (mov r8, r8)
    a0f0:	0000a359 	.word	0x0000a359
    a0f4:	0000a365 	.word	0x0000a365
    a0f8:	00008aed 	.word	0x00008aed
    a0fc:	00013618 	.word	0x00013618
    a100:	00012e7c 	.word	0x00012e7c
    a104:	0001189d 	.word	0x0001189d
    a108:	000135a8 	.word	0x000135a8
    a10c:	000118d1 	.word	0x000118d1
    a110:	000135c0 	.word	0x000135c0
    a114:	000119bd 	.word	0x000119bd
    a118:	0000a341 	.word	0x0000a341

0000a11c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a11e:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    a120:	4d2d      	ldr	r5, [pc, #180]	; (a1d8 <wait_for_bootrom+0xbc>)
    a122:	4c2e      	ldr	r4, [pc, #184]	; (a1dc <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    a124:	4e2e      	ldr	r6, [pc, #184]	; (a1e0 <wait_for_bootrom+0xc4>)
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    a126:	0028      	movs	r0, r5
    a128:	47a0      	blx	r4
		if (reg & 0x80000000) {
    a12a:	2800      	cmp	r0, #0
    a12c:	db02      	blt.n	a134 <wait_for_bootrom+0x18>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    a12e:	2001      	movs	r0, #1
    a130:	47b0      	blx	r6
	}
    a132:	e7f8      	b.n	a126 <wait_for_bootrom+0xa>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    a134:	482b      	ldr	r0, [pc, #172]	; (a1e4 <wait_for_bootrom+0xc8>)
    a136:	4b29      	ldr	r3, [pc, #164]	; (a1dc <wait_for_bootrom+0xc0>)
    a138:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    a13a:	07c3      	lsls	r3, r0, #31
    a13c:	d409      	bmi.n	a152 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    a13e:	4e28      	ldr	r6, [pc, #160]	; (a1e0 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    a140:	4c29      	ldr	r4, [pc, #164]	; (a1e8 <wait_for_bootrom+0xcc>)
    a142:	4d26      	ldr	r5, [pc, #152]	; (a1dc <wait_for_bootrom+0xc0>)
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    a144:	2001      	movs	r0, #1
    a146:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    a148:	0020      	movs	r0, r4
    a14a:	47a8      	blx	r5

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    a14c:	4b27      	ldr	r3, [pc, #156]	; (a1ec <wait_for_bootrom+0xd0>)
    a14e:	4298      	cmp	r0, r3
    a150:	d1f8      	bne.n	a144 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    a152:	2f02      	cmp	r7, #2
    a154:	d109      	bne.n	a16a <wait_for_bootrom+0x4e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    a156:	4926      	ldr	r1, [pc, #152]	; (a1f0 <wait_for_bootrom+0xd4>)
    a158:	4826      	ldr	r0, [pc, #152]	; (a1f4 <wait_for_bootrom+0xd8>)
    a15a:	4c27      	ldr	r4, [pc, #156]	; (a1f8 <wait_for_bootrom+0xdc>)
    a15c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    a15e:	2180      	movs	r1, #128	; 0x80
    a160:	0349      	lsls	r1, r1, #13
    a162:	4826      	ldr	r0, [pc, #152]	; (a1fc <wait_for_bootrom+0xe0>)
    a164:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
    a166:	2400      	movs	r4, #0
    a168:	e017      	b.n	a19a <wait_for_bootrom+0x7e>
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    a16a:	2f03      	cmp	r7, #3
    a16c:	d108      	bne.n	a180 <wait_for_bootrom+0x64>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    a16e:	4920      	ldr	r1, [pc, #128]	; (a1f0 <wait_for_bootrom+0xd4>)
    a170:	4820      	ldr	r0, [pc, #128]	; (a1f4 <wait_for_bootrom+0xd8>)
    a172:	4c21      	ldr	r4, [pc, #132]	; (a1f8 <wait_for_bootrom+0xdc>)
    a174:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    a176:	2100      	movs	r1, #0
    a178:	4820      	ldr	r0, [pc, #128]	; (a1fc <wait_for_bootrom+0xe0>)
    a17a:	47a0      	blx	r4

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
    a17c:	2400      	movs	r4, #0
    a17e:	e00c      	b.n	a19a <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    a180:	2f04      	cmp	r7, #4
    a182:	d105      	bne.n	a190 <wait_for_bootrom+0x74>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    a184:	491e      	ldr	r1, [pc, #120]	; (a200 <wait_for_bootrom+0xe4>)
    a186:	481d      	ldr	r0, [pc, #116]	; (a1fc <wait_for_bootrom+0xe0>)
    a188:	4b1b      	ldr	r3, [pc, #108]	; (a1f8 <wait_for_bootrom+0xdc>)
    a18a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    a18c:	2480      	movs	r4, #128	; 0x80
    a18e:	e004      	b.n	a19a <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    a190:	491b      	ldr	r1, [pc, #108]	; (a200 <wait_for_bootrom+0xe4>)
    a192:	481a      	ldr	r0, [pc, #104]	; (a1fc <wait_for_bootrom+0xe0>)
    a194:	4b18      	ldr	r3, [pc, #96]	; (a1f8 <wait_for_bootrom+0xdc>)
    a196:	4798      	blx	r3

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;
    a198:	2400      	movs	r4, #0
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    a19a:	4b1a      	ldr	r3, [pc, #104]	; (a204 <wait_for_bootrom+0xe8>)
    a19c:	4798      	blx	r3
    a19e:	0500      	lsls	r0, r0, #20
    a1a0:	0d00      	lsrs	r0, r0, #20
    a1a2:	4b19      	ldr	r3, [pc, #100]	; (a208 <wait_for_bootrom+0xec>)
    a1a4:	4298      	cmp	r0, r3
    a1a6:	d904      	bls.n	a1b2 <wait_for_bootrom+0x96>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    a1a8:	2002      	movs	r0, #2
    a1aa:	4320      	orrs	r0, r4
    a1ac:	4b17      	ldr	r3, [pc, #92]	; (a20c <wait_for_bootrom+0xf0>)
    a1ae:	4798      	blx	r3
    a1b0:	e002      	b.n	a1b8 <wait_for_bootrom+0x9c>
	} else {
		chip_apply_conf(u32GpReg1);
    a1b2:	0020      	movs	r0, r4
    a1b4:	4b15      	ldr	r3, [pc, #84]	; (a20c <wait_for_bootrom+0xf0>)
    a1b6:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    a1b8:	4815      	ldr	r0, [pc, #84]	; (a210 <wait_for_bootrom+0xf4>)
    a1ba:	4c16      	ldr	r4, [pc, #88]	; (a214 <wait_for_bootrom+0xf8>)
    a1bc:	47a0      	blx	r4
    a1be:	4910      	ldr	r1, [pc, #64]	; (a200 <wait_for_bootrom+0xe4>)
    a1c0:	4815      	ldr	r0, [pc, #84]	; (a218 <wait_for_bootrom+0xfc>)
    a1c2:	47a0      	blx	r4
    a1c4:	200d      	movs	r0, #13
    a1c6:	4b15      	ldr	r3, [pc, #84]	; (a21c <wait_for_bootrom+0x100>)
    a1c8:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    a1ca:	4915      	ldr	r1, [pc, #84]	; (a220 <wait_for_bootrom+0x104>)
    a1cc:	4806      	ldr	r0, [pc, #24]	; (a1e8 <wait_for_bootrom+0xcc>)
    a1ce:	4b0a      	ldr	r3, [pc, #40]	; (a1f8 <wait_for_bootrom+0xdc>)
    a1d0:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    a1d2:	2000      	movs	r0, #0
    a1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1d6:	46c0      	nop			; (mov r8, r8)
    a1d8:	00001014 	.word	0x00001014
    a1dc:	0000a34d 	.word	0x0000a34d
    a1e0:	00008aed 	.word	0x00008aed
    a1e4:	000207bc 	.word	0x000207bc
    a1e8:	000c000c 	.word	0x000c000c
    a1ec:	10add09e 	.word	0x10add09e
    a1f0:	3c1cd57d 	.word	0x3c1cd57d
    a1f4:	000207ac 	.word	0x000207ac
    a1f8:	0000a365 	.word	0x0000a365
    a1fc:	0000108c 	.word	0x0000108c
    a200:	13521352 	.word	0x13521352
    a204:	00009f11 	.word	0x00009f11
    a208:	0000039f 	.word	0x0000039f
    a20c:	00009e81 	.word	0x00009e81
    a210:	00012ee0 	.word	0x00012ee0
    a214:	0001189d 	.word	0x0001189d
    a218:	000135dc 	.word	0x000135dc
    a21c:	000118d1 	.word	0x000118d1
    a220:	ef522f61 	.word	0xef522f61

0000a224 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    a224:	b570      	push	{r4, r5, r6, lr}
    a226:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    a228:	4b15      	ldr	r3, [pc, #84]	; (a280 <wait_for_firmware_start+0x5c>)
    a22a:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    a22c:	4b15      	ldr	r3, [pc, #84]	; (a284 <wait_for_firmware_start+0x60>)
    a22e:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    a230:	3802      	subs	r0, #2
    a232:	2801      	cmp	r0, #1
    a234:	d80c      	bhi.n	a250 <wait_for_firmware_start+0x2c>
		regAddress = NMI_REV_REG;
    a236:	4b14      	ldr	r3, [pc, #80]	; (a288 <wait_for_firmware_start+0x64>)
    a238:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    a23a:	4b14      	ldr	r3, [pc, #80]	; (a28c <wait_for_firmware_start+0x68>)
    a23c:	9300      	str	r3, [sp, #0]
    a23e:	e007      	b.n	a250 <wait_for_firmware_start+0x2c>
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    a240:	2002      	movs	r0, #2
    a242:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    a244:	9801      	ldr	r0, [sp, #4]
    a246:	47a8      	blx	r5
    a248:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    a24a:	2c00      	cmp	r4, #0
    a24c:	d105      	bne.n	a25a <wait_for_firmware_start+0x36>
    a24e:	e012      	b.n	a276 <wait_for_firmware_start+0x52>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
    a250:	2401      	movs	r4, #1
    a252:	4264      	negs	r4, r4
    a254:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    a256:	4e0e      	ldr	r6, [pc, #56]	; (a290 <wait_for_firmware_start+0x6c>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    a258:	4d0e      	ldr	r5, [pc, #56]	; (a294 <wait_for_firmware_start+0x70>)
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    a25a:	9b00      	ldr	r3, [sp, #0]
    a25c:	4298      	cmp	r0, r3
    a25e:	d1ef      	bne.n	a240 <wait_for_firmware_start+0x1c>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    a260:	9a00      	ldr	r2, [sp, #0]
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    a262:	2000      	movs	r0, #0
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    a264:	4b07      	ldr	r3, [pc, #28]	; (a284 <wait_for_firmware_start+0x60>)
    a266:	429a      	cmp	r2, r3
    a268:	d107      	bne.n	a27a <wait_for_firmware_start+0x56>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    a26a:	2100      	movs	r1, #0
    a26c:	4804      	ldr	r0, [pc, #16]	; (a280 <wait_for_firmware_start+0x5c>)
    a26e:	4b0a      	ldr	r3, [pc, #40]	; (a298 <wait_for_firmware_start+0x74>)
    a270:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    a272:	2000      	movs	r0, #0
    a274:	e001      	b.n	a27a <wait_for_firmware_start+0x56>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt >= u32Timeout)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    a276:	2005      	movs	r0, #5
    a278:	4240      	negs	r0, r0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    a27a:	b002      	add	sp, #8
    a27c:	bd70      	pop	{r4, r5, r6, pc}
    a27e:	46c0      	nop			; (mov r8, r8)
    a280:	0000108c 	.word	0x0000108c
    a284:	02532636 	.word	0x02532636
    a288:	000207ac 	.word	0x000207ac
    a28c:	d75dc1c3 	.word	0xd75dc1c3
    a290:	00008aed 	.word	0x00008aed
    a294:	0000a34d 	.word	0x0000a34d
    a298:	0000a365 	.word	0x0000a365

0000a29c <chip_deinit>:

sint8 chip_deinit(void)
{
    a29c:	b510      	push	{r4, lr}
    a29e:	b082      	sub	sp, #8
	uint32 reg = 0;
    a2a0:	2300      	movs	r3, #0
    a2a2:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    a2a4:	a901      	add	r1, sp, #4
    a2a6:	20a0      	movs	r0, #160	; 0xa0
    a2a8:	0140      	lsls	r0, r0, #5
    a2aa:	4b14      	ldr	r3, [pc, #80]	; (a2fc <chip_deinit+0x60>)
    a2ac:	4798      	blx	r3
    a2ae:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    a2b0:	d00b      	beq.n	a2ca <chip_deinit+0x2e>
		M2M_ERR("failed to de-initialize\n");
    a2b2:	4a13      	ldr	r2, [pc, #76]	; (a300 <chip_deinit+0x64>)
    a2b4:	4913      	ldr	r1, [pc, #76]	; (a304 <chip_deinit+0x68>)
    a2b6:	4814      	ldr	r0, [pc, #80]	; (a308 <chip_deinit+0x6c>)
    a2b8:	4b14      	ldr	r3, [pc, #80]	; (a30c <chip_deinit+0x70>)
    a2ba:	4798      	blx	r3
    a2bc:	4814      	ldr	r0, [pc, #80]	; (a310 <chip_deinit+0x74>)
    a2be:	4b15      	ldr	r3, [pc, #84]	; (a314 <chip_deinit+0x78>)
    a2c0:	4798      	blx	r3
    a2c2:	200d      	movs	r0, #13
    a2c4:	4b14      	ldr	r3, [pc, #80]	; (a318 <chip_deinit+0x7c>)
    a2c6:	4798      	blx	r3
		goto ERR1;
    a2c8:	e014      	b.n	a2f4 <chip_deinit+0x58>
	}
	reg &= ~(1 << 10);
    a2ca:	4914      	ldr	r1, [pc, #80]	; (a31c <chip_deinit+0x80>)
    a2cc:	9b01      	ldr	r3, [sp, #4]
    a2ce:	4019      	ands	r1, r3
    a2d0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    a2d2:	20a0      	movs	r0, #160	; 0xa0
    a2d4:	0140      	lsls	r0, r0, #5
    a2d6:	4b12      	ldr	r3, [pc, #72]	; (a320 <chip_deinit+0x84>)
    a2d8:	4798      	blx	r3
    a2da:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    a2dc:	d00a      	beq.n	a2f4 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    a2de:	4a11      	ldr	r2, [pc, #68]	; (a324 <chip_deinit+0x88>)
    a2e0:	4908      	ldr	r1, [pc, #32]	; (a304 <chip_deinit+0x68>)
    a2e2:	4809      	ldr	r0, [pc, #36]	; (a308 <chip_deinit+0x6c>)
    a2e4:	4b09      	ldr	r3, [pc, #36]	; (a30c <chip_deinit+0x70>)
    a2e6:	4798      	blx	r3
    a2e8:	4809      	ldr	r0, [pc, #36]	; (a310 <chip_deinit+0x74>)
    a2ea:	4b0a      	ldr	r3, [pc, #40]	; (a314 <chip_deinit+0x78>)
    a2ec:	4798      	blx	r3
    a2ee:	200d      	movs	r0, #13
    a2f0:	4b09      	ldr	r3, [pc, #36]	; (a318 <chip_deinit+0x7c>)
    a2f2:	4798      	blx	r3
		goto ERR1;
	}

ERR1:
	return ret;
}
    a2f4:	0020      	movs	r0, r4
    a2f6:	b002      	add	sp, #8
    a2f8:	bd10      	pop	{r4, pc}
    a2fa:	46c0      	nop			; (mov r8, r8)
    a2fc:	0000a359 	.word	0x0000a359
    a300:	00000205 	.word	0x00000205
    a304:	0001360c 	.word	0x0001360c
    a308:	00012e7c 	.word	0x00012e7c
    a30c:	0001189d 	.word	0x0001189d
    a310:	000135f4 	.word	0x000135f4
    a314:	000119bd 	.word	0x000119bd
    a318:	000118d1 	.word	0x000118d1
    a31c:	fffffbff 	.word	0xfffffbff
    a320:	0000a365 	.word	0x0000a365
    a324:	0000020b 	.word	0x0000020b

0000a328 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    a328:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    a32a:	4b01      	ldr	r3, [pc, #4]	; (a330 <nm_bus_iface_init+0x8>)
    a32c:	4798      	blx	r3
	return ret;
}
    a32e:	bd10      	pop	{r4, pc}
    a330:	00008c2d 	.word	0x00008c2d

0000a334 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    a334:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    a336:	4b01      	ldr	r3, [pc, #4]	; (a33c <nm_bus_iface_deinit+0x8>)
    a338:	4798      	blx	r3

	return ret;
}
    a33a:	bd10      	pop	{r4, pc}
    a33c:	00008e7d 	.word	0x00008e7d

0000a340 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    a340:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    a342:	4b01      	ldr	r3, [pc, #4]	; (a348 <nm_bus_reset+0x8>)
    a344:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    a346:	bd10      	pop	{r4, pc}
    a348:	0000ace5 	.word	0x0000ace5

0000a34c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    a34c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    a34e:	4b01      	ldr	r3, [pc, #4]	; (a354 <nm_read_reg+0x8>)
    a350:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    a352:	bd10      	pop	{r4, pc}
    a354:	0000ad1d 	.word	0x0000ad1d

0000a358 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    a358:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    a35a:	4b01      	ldr	r3, [pc, #4]	; (a360 <nm_read_reg_with_ret+0x8>)
    a35c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    a35e:	bd10      	pop	{r4, pc}
    a360:	0000ad31 	.word	0x0000ad31

0000a364 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    a364:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    a366:	4b01      	ldr	r3, [pc, #4]	; (a36c <nm_write_reg+0x8>)
    a368:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    a36a:	bd10      	pop	{r4, pc}
    a36c:	0000ad49 	.word	0x0000ad49

0000a370 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    a370:	b5f0      	push	{r4, r5, r6, r7, lr}
    a372:	4657      	mov	r7, sl
    a374:	464e      	mov	r6, r9
    a376:	4645      	mov	r5, r8
    a378:	b4e0      	push	{r5, r6, r7}
    a37a:	b082      	sub	sp, #8
    a37c:	4680      	mov	r8, r0
    a37e:	4689      	mov	r9, r1
    a380:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    a382:	4b13      	ldr	r3, [pc, #76]	; (a3d0 <nm_read_block+0x60>)
    a384:	881f      	ldrh	r7, [r3, #0]
    a386:	3f08      	subs	r7, #8
    a388:	b2bb      	uxth	r3, r7
    a38a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    a38c:	001e      	movs	r6, r3
    a38e:	0004      	movs	r4, r0
    a390:	429a      	cmp	r2, r3
    a392:	d806      	bhi.n	a3a2 <nm_read_block+0x32>
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    a394:	2100      	movs	r1, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    a396:	b2aa      	uxth	r2, r5
    a398:	4449      	add	r1, r9
    a39a:	0020      	movs	r0, r4
    a39c:	4b0d      	ldr	r3, [pc, #52]	; (a3d4 <nm_read_block+0x64>)
    a39e:	4798      	blx	r3
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
			break;
    a3a0:	e010      	b.n	a3c4 <nm_read_block+0x54>
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    a3a2:	4b0c      	ldr	r3, [pc, #48]	; (a3d4 <nm_read_block+0x64>)
    a3a4:	469a      	mov	sl, r3
    a3a6:	1a37      	subs	r7, r6, r0
    a3a8:	4643      	mov	r3, r8
    a3aa:	1ae1      	subs	r1, r4, r3
    a3ac:	4449      	add	r1, r9
    a3ae:	9a01      	ldr	r2, [sp, #4]
    a3b0:	0020      	movs	r0, r4
    a3b2:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    a3b4:	2800      	cmp	r0, #0
    a3b6:	d105      	bne.n	a3c4 <nm_read_block+0x54>
			u32Sz -= u16MaxTrxSz;
    a3b8:	1bad      	subs	r5, r5, r6
    a3ba:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    a3bc:	19a4      	adds	r4, r4, r6
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    a3be:	42b5      	cmp	r5, r6
    a3c0:	d8f2      	bhi.n	a3a8 <nm_read_block+0x38>
    a3c2:	e7e8      	b.n	a396 <nm_read_block+0x26>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
    a3c4:	b002      	add	sp, #8
    a3c6:	bc1c      	pop	{r2, r3, r4}
    a3c8:	4690      	mov	r8, r2
    a3ca:	4699      	mov	r9, r3
    a3cc:	46a2      	mov	sl, r4
    a3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3d0:	20000008 	.word	0x20000008
    a3d4:	0000ae8d 	.word	0x0000ae8d

0000a3d8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    a3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3da:	4657      	mov	r7, sl
    a3dc:	464e      	mov	r6, r9
    a3de:	4645      	mov	r5, r8
    a3e0:	b4e0      	push	{r5, r6, r7}
    a3e2:	b082      	sub	sp, #8
    a3e4:	4680      	mov	r8, r0
    a3e6:	4689      	mov	r9, r1
    a3e8:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    a3ea:	4b13      	ldr	r3, [pc, #76]	; (a438 <nm_write_block+0x60>)
    a3ec:	881f      	ldrh	r7, [r3, #0]
    a3ee:	3f08      	subs	r7, #8
    a3f0:	b2bb      	uxth	r3, r7
    a3f2:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    a3f4:	001e      	movs	r6, r3
    a3f6:	0004      	movs	r4, r0
    a3f8:	429a      	cmp	r2, r3
    a3fa:	d806      	bhi.n	a40a <nm_write_block+0x32>
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    a3fc:	2100      	movs	r1, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    a3fe:	b2aa      	uxth	r2, r5
    a400:	4449      	add	r1, r9
    a402:	0020      	movs	r0, r4
    a404:	4b0d      	ldr	r3, [pc, #52]	; (a43c <nm_write_block+0x64>)
    a406:	4798      	blx	r3
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
			break;
    a408:	e010      	b.n	a42c <nm_write_block+0x54>
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    a40a:	4b0c      	ldr	r3, [pc, #48]	; (a43c <nm_write_block+0x64>)
    a40c:	469a      	mov	sl, r3
    a40e:	1a37      	subs	r7, r6, r0
    a410:	4643      	mov	r3, r8
    a412:	1ae1      	subs	r1, r4, r3
    a414:	4449      	add	r1, r9
    a416:	9a01      	ldr	r2, [sp, #4]
    a418:	0020      	movs	r0, r4
    a41a:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    a41c:	2800      	cmp	r0, #0
    a41e:	d105      	bne.n	a42c <nm_write_block+0x54>
			u32Sz -= u16MaxTrxSz;
    a420:	1bad      	subs	r5, r5, r6
    a422:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    a424:	19a4      	adds	r4, r4, r6
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    a426:	42b5      	cmp	r5, r6
    a428:	d8f2      	bhi.n	a410 <nm_write_block+0x38>
    a42a:	e7e8      	b.n	a3fe <nm_write_block+0x26>
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
}
    a42c:	b002      	add	sp, #8
    a42e:	bc1c      	pop	{r2, r3, r4}
    a430:	4690      	mov	r8, r2
    a432:	4699      	mov	r9, r3
    a434:	46a2      	mov	sl, r4
    a436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a438:	20000008 	.word	0x20000008
    a43c:	0000afe9 	.word	0x0000afe9

0000a440 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    a440:	b570      	push	{r4, r5, r6, lr}
    a442:	b084      	sub	sp, #16
    a444:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    a446:	2300      	movs	r3, #0
    a448:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    a44a:	2208      	movs	r2, #8
    a44c:	2100      	movs	r1, #0
    a44e:	a801      	add	r0, sp, #4
    a450:	4b2d      	ldr	r3, [pc, #180]	; (a508 <nm_get_firmware_full_info+0xc8>)
    a452:	4798      	blx	r3
	if (pstrRev != NULL)
    a454:	2c00      	cmp	r4, #0
    a456:	d045      	beq.n	a4e4 <nm_get_firmware_full_info+0xa4>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    a458:	2228      	movs	r2, #40	; 0x28
    a45a:	2100      	movs	r1, #0
    a45c:	0020      	movs	r0, r4
    a45e:	4b2b      	ldr	r3, [pc, #172]	; (a50c <nm_get_firmware_full_info+0xcc>)
    a460:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    a462:	a903      	add	r1, sp, #12
    a464:	482a      	ldr	r0, [pc, #168]	; (a510 <nm_get_firmware_full_info+0xd0>)
    a466:	4b2b      	ldr	r3, [pc, #172]	; (a514 <nm_get_firmware_full_info+0xd4>)
    a468:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    a46a:	2800      	cmp	r0, #0
    a46c:	d14a      	bne.n	a504 <nm_get_firmware_full_info+0xc4>
		{
			if(reg != 0)
    a46e:	9803      	ldr	r0, [sp, #12]
    a470:	2800      	cmp	r0, #0
    a472:	d039      	beq.n	a4e8 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    a474:	23c0      	movs	r3, #192	; 0xc0
    a476:	029b      	lsls	r3, r3, #10
    a478:	4318      	orrs	r0, r3
    a47a:	2208      	movs	r2, #8
    a47c:	a901      	add	r1, sp, #4
    a47e:	4b26      	ldr	r3, [pc, #152]	; (a518 <nm_get_firmware_full_info+0xd8>)
    a480:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    a482:	2800      	cmp	r0, #0
    a484:	d13e      	bne.n	a504 <nm_get_firmware_full_info+0xc4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    a486:	9b02      	ldr	r3, [sp, #8]
    a488:	0418      	lsls	r0, r3, #16
    a48a:	0c00      	lsrs	r0, r0, #16
    a48c:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    a48e:	d02e      	beq.n	a4ee <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    a490:	23c0      	movs	r3, #192	; 0xc0
    a492:	029b      	lsls	r3, r3, #10
    a494:	4318      	orrs	r0, r3
    a496:	2228      	movs	r2, #40	; 0x28
    a498:	0021      	movs	r1, r4
    a49a:	4b1f      	ldr	r3, [pc, #124]	; (a518 <nm_get_firmware_full_info+0xd8>)
    a49c:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    a49e:	2800      	cmp	r0, #0
    a4a0:	d130      	bne.n	a504 <nm_get_firmware_full_info+0xc4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    a4a2:	7923      	ldrb	r3, [r4, #4]
    a4a4:	0219      	lsls	r1, r3, #8
    a4a6:	79a3      	ldrb	r3, [r4, #6]
    a4a8:	250f      	movs	r5, #15
    a4aa:	402b      	ands	r3, r5
    a4ac:	430b      	orrs	r3, r1
    a4ae:	7966      	ldrb	r6, [r4, #5]
    a4b0:	0136      	lsls	r6, r6, #4
    a4b2:	22ff      	movs	r2, #255	; 0xff
    a4b4:	4016      	ands	r6, r2
    a4b6:	4333      	orrs	r3, r6
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    a4b8:	79e6      	ldrb	r6, [r4, #7]
    a4ba:	0236      	lsls	r6, r6, #8
    a4bc:	7a61      	ldrb	r1, [r4, #9]
    a4be:	400d      	ands	r5, r1
    a4c0:	4335      	orrs	r5, r6
    a4c2:	7a21      	ldrb	r1, [r4, #8]
    a4c4:	0109      	lsls	r1, r1, #4
    a4c6:	4011      	ands	r1, r2
    a4c8:	002a      	movs	r2, r5
    a4ca:	430a      	orrs	r2, r1
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    a4cc:	2b00      	cmp	r3, #0
    a4ce:	d011      	beq.n	a4f4 <nm_get_firmware_full_info+0xb4>
    a4d0:	2a00      	cmp	r2, #0
    a4d2:	d012      	beq.n	a4fa <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    a4d4:	4911      	ldr	r1, [pc, #68]	; (a51c <nm_get_firmware_full_info+0xdc>)
    a4d6:	428a      	cmp	r2, r1
    a4d8:	d812      	bhi.n	a500 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    a4da:	4a11      	ldr	r2, [pc, #68]	; (a520 <nm_get_firmware_full_info+0xe0>)
    a4dc:	4293      	cmp	r3, r2
    a4de:	d811      	bhi.n	a504 <nm_get_firmware_full_info+0xc4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    a4e0:	380d      	subs	r0, #13
    a4e2:	e00f      	b.n	a504 <nm_get_firmware_full_info+0xc4>
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
	sint8	ret = M2M_SUCCESS;
    a4e4:	2000      	movs	r0, #0
    a4e6:	e00d      	b.n	a504 <nm_get_firmware_full_info+0xc4>
					}else {
						ret = M2M_ERR_FAIL;
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    a4e8:	200c      	movs	r0, #12
    a4ea:	4240      	negs	r0, r0
    a4ec:	e00a      	b.n	a504 <nm_get_firmware_full_info+0xc4>
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    a4ee:	200c      	movs	r0, #12
    a4f0:	4240      	negs	r0, r0
    a4f2:	e007      	b.n	a504 <nm_get_firmware_full_info+0xc4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
								ret = M2M_ERR_FAIL;
    a4f4:	200c      	movs	r0, #12
    a4f6:	4240      	negs	r0, r0
    a4f8:	e004      	b.n	a504 <nm_get_firmware_full_info+0xc4>
    a4fa:	200c      	movs	r0, #12
    a4fc:	4240      	negs	r0, r0
    a4fe:	e001      	b.n	a504 <nm_get_firmware_full_info+0xc4>
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    a500:	200d      	movs	r0, #13
    a502:	4240      	negs	r0, r0
			}
		}
	}
EXIT:
	return ret;
}
    a504:	b004      	add	sp, #16
    a506:	bd70      	pop	{r4, r5, r6, pc}
    a508:	00011755 	.word	0x00011755
    a50c:	00008efd 	.word	0x00008efd
    a510:	000c0008 	.word	0x000c0008
    a514:	0000a359 	.word	0x0000a359
    a518:	0000a371 	.word	0x0000a371
    a51c:	00001352 	.word	0x00001352
    a520:	00001351 	.word	0x00001351

0000a524 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    a524:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    a526:	2800      	cmp	r0, #0
    a528:	d005      	beq.n	a536 <nm_drv_init+0x12>
		u8Mode = *((uint8 *)arg);
    a52a:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    a52c:	1e6b      	subs	r3, r5, #1
    a52e:	2b03      	cmp	r3, #3
    a530:	d902      	bls.n	a538 <nm_drv_init+0x14>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    a532:	2501      	movs	r5, #1
    a534:	e000      	b.n	a538 <nm_drv_init+0x14>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    a536:	2501      	movs	r5, #1
	}
	
	ret = nm_bus_iface_init(NULL);
    a538:	2000      	movs	r0, #0
    a53a:	4b1f      	ldr	r3, [pc, #124]	; (a5b8 <nm_drv_init+0x94>)
    a53c:	4798      	blx	r3
    a53e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a540:	d00c      	beq.n	a55c <nm_drv_init+0x38>
		M2M_ERR("[nmi start]: fail init bus\n");
    a542:	2228      	movs	r2, #40	; 0x28
    a544:	32ff      	adds	r2, #255	; 0xff
    a546:	491d      	ldr	r1, [pc, #116]	; (a5bc <nm_drv_init+0x98>)
    a548:	481d      	ldr	r0, [pc, #116]	; (a5c0 <nm_drv_init+0x9c>)
    a54a:	4b1e      	ldr	r3, [pc, #120]	; (a5c4 <nm_drv_init+0xa0>)
    a54c:	4798      	blx	r3
    a54e:	481e      	ldr	r0, [pc, #120]	; (a5c8 <nm_drv_init+0xa4>)
    a550:	4b1e      	ldr	r3, [pc, #120]	; (a5cc <nm_drv_init+0xa8>)
    a552:	4798      	blx	r3
    a554:	200d      	movs	r0, #13
    a556:	4b1e      	ldr	r3, [pc, #120]	; (a5d0 <nm_drv_init+0xac>)
    a558:	4798      	blx	r3
		goto ERR1;
    a55a:	e02b      	b.n	a5b4 <nm_drv_init+0x90>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    a55c:	481d      	ldr	r0, [pc, #116]	; (a5d4 <nm_drv_init+0xb0>)
    a55e:	4c19      	ldr	r4, [pc, #100]	; (a5c4 <nm_drv_init+0xa0>)
    a560:	47a0      	blx	r4
    a562:	4b1d      	ldr	r3, [pc, #116]	; (a5d8 <nm_drv_init+0xb4>)
    a564:	4798      	blx	r3
    a566:	0001      	movs	r1, r0
    a568:	481c      	ldr	r0, [pc, #112]	; (a5dc <nm_drv_init+0xb8>)
    a56a:	47a0      	blx	r4
    a56c:	200d      	movs	r0, #13
    a56e:	4b18      	ldr	r3, [pc, #96]	; (a5d0 <nm_drv_init+0xac>)
    a570:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    a572:	4b1b      	ldr	r3, [pc, #108]	; (a5e0 <nm_drv_init+0xbc>)
    a574:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    a576:	0028      	movs	r0, r5
    a578:	4b1a      	ldr	r3, [pc, #104]	; (a5e4 <nm_drv_init+0xc0>)
    a57a:	4798      	blx	r3
    a57c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a57e:	d117      	bne.n	a5b0 <nm_drv_init+0x8c>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    a580:	0028      	movs	r0, r5
    a582:	4b19      	ldr	r3, [pc, #100]	; (a5e8 <nm_drv_init+0xc4>)
    a584:	4798      	blx	r3
    a586:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a588:	d112      	bne.n	a5b0 <nm_drv_init+0x8c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    a58a:	1ea8      	subs	r0, r5, #2
    a58c:	2801      	cmp	r0, #1
    a58e:	d911      	bls.n	a5b4 <nm_drv_init+0x90>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    a590:	4b16      	ldr	r3, [pc, #88]	; (a5ec <nm_drv_init+0xc8>)
    a592:	4798      	blx	r3
    a594:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a596:	d00d      	beq.n	a5b4 <nm_drv_init+0x90>
		M2M_ERR("failed to enable interrupts..\n");
    a598:	2256      	movs	r2, #86	; 0x56
    a59a:	32ff      	adds	r2, #255	; 0xff
    a59c:	4907      	ldr	r1, [pc, #28]	; (a5bc <nm_drv_init+0x98>)
    a59e:	4808      	ldr	r0, [pc, #32]	; (a5c0 <nm_drv_init+0x9c>)
    a5a0:	4b08      	ldr	r3, [pc, #32]	; (a5c4 <nm_drv_init+0xa0>)
    a5a2:	4798      	blx	r3
    a5a4:	4812      	ldr	r0, [pc, #72]	; (a5f0 <nm_drv_init+0xcc>)
    a5a6:	4b09      	ldr	r3, [pc, #36]	; (a5cc <nm_drv_init+0xa8>)
    a5a8:	4798      	blx	r3
    a5aa:	200d      	movs	r0, #13
    a5ac:	4b08      	ldr	r3, [pc, #32]	; (a5d0 <nm_drv_init+0xac>)
    a5ae:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    a5b0:	4b10      	ldr	r3, [pc, #64]	; (a5f4 <nm_drv_init+0xd0>)
    a5b2:	4798      	blx	r3
ERR1:
	return ret;
}
    a5b4:	0020      	movs	r0, r4
    a5b6:	bd70      	pop	{r4, r5, r6, pc}
    a5b8:	0000a329 	.word	0x0000a329
    a5bc:	000136d0 	.word	0x000136d0
    a5c0:	00012e7c 	.word	0x00012e7c
    a5c4:	0001189d 	.word	0x0001189d
    a5c8:	00013624 	.word	0x00013624
    a5cc:	000119bd 	.word	0x000119bd
    a5d0:	000118d1 	.word	0x000118d1
    a5d4:	00012ee0 	.word	0x00012ee0
    a5d8:	00009f11 	.word	0x00009f11
    a5dc:	00013640 	.word	0x00013640
    a5e0:	0000ad61 	.word	0x0000ad61
    a5e4:	0000a11d 	.word	0x0000a11d
    a5e8:	0000a225 	.word	0x0000a225
    a5ec:	00009eb9 	.word	0x00009eb9
    a5f0:	00013650 	.word	0x00013650
    a5f4:	0000a335 	.word	0x0000a335

0000a5f8 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    a5f8:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    a5fa:	4b1c      	ldr	r3, [pc, #112]	; (a66c <nm_drv_deinit+0x74>)
    a5fc:	4798      	blx	r3
    a5fe:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a600:	d00c      	beq.n	a61c <nm_drv_deinit+0x24>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    a602:	22b6      	movs	r2, #182	; 0xb6
    a604:	0052      	lsls	r2, r2, #1
    a606:	491a      	ldr	r1, [pc, #104]	; (a670 <nm_drv_deinit+0x78>)
    a608:	481a      	ldr	r0, [pc, #104]	; (a674 <nm_drv_deinit+0x7c>)
    a60a:	4b1b      	ldr	r3, [pc, #108]	; (a678 <nm_drv_deinit+0x80>)
    a60c:	4798      	blx	r3
    a60e:	481b      	ldr	r0, [pc, #108]	; (a67c <nm_drv_deinit+0x84>)
    a610:	4b1b      	ldr	r3, [pc, #108]	; (a680 <nm_drv_deinit+0x88>)
    a612:	4798      	blx	r3
    a614:	200d      	movs	r0, #13
    a616:	4b1b      	ldr	r3, [pc, #108]	; (a684 <nm_drv_deinit+0x8c>)
    a618:	4798      	blx	r3
		goto ERR1;
    a61a:	e024      	b.n	a666 <nm_drv_deinit+0x6e>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    a61c:	2000      	movs	r0, #0
    a61e:	4b1a      	ldr	r3, [pc, #104]	; (a688 <nm_drv_deinit+0x90>)
    a620:	4798      	blx	r3
    a622:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a624:	d00c      	beq.n	a640 <nm_drv_deinit+0x48>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    a626:	2274      	movs	r2, #116	; 0x74
    a628:	32ff      	adds	r2, #255	; 0xff
    a62a:	4911      	ldr	r1, [pc, #68]	; (a670 <nm_drv_deinit+0x78>)
    a62c:	4811      	ldr	r0, [pc, #68]	; (a674 <nm_drv_deinit+0x7c>)
    a62e:	4b12      	ldr	r3, [pc, #72]	; (a678 <nm_drv_deinit+0x80>)
    a630:	4798      	blx	r3
    a632:	4816      	ldr	r0, [pc, #88]	; (a68c <nm_drv_deinit+0x94>)
    a634:	4b12      	ldr	r3, [pc, #72]	; (a680 <nm_drv_deinit+0x88>)
    a636:	4798      	blx	r3
    a638:	200d      	movs	r0, #13
    a63a:	4b12      	ldr	r3, [pc, #72]	; (a684 <nm_drv_deinit+0x8c>)
    a63c:	4798      	blx	r3
		goto ERR1;
    a63e:	e012      	b.n	a666 <nm_drv_deinit+0x6e>
	}

	ret = nm_bus_iface_deinit();
    a640:	4b13      	ldr	r3, [pc, #76]	; (a690 <nm_drv_deinit+0x98>)
    a642:	4798      	blx	r3
    a644:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a646:	d00c      	beq.n	a662 <nm_drv_deinit+0x6a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    a648:	227a      	movs	r2, #122	; 0x7a
    a64a:	32ff      	adds	r2, #255	; 0xff
    a64c:	4908      	ldr	r1, [pc, #32]	; (a670 <nm_drv_deinit+0x78>)
    a64e:	4809      	ldr	r0, [pc, #36]	; (a674 <nm_drv_deinit+0x7c>)
    a650:	4b09      	ldr	r3, [pc, #36]	; (a678 <nm_drv_deinit+0x80>)
    a652:	4798      	blx	r3
    a654:	480f      	ldr	r0, [pc, #60]	; (a694 <nm_drv_deinit+0x9c>)
    a656:	4b0a      	ldr	r3, [pc, #40]	; (a680 <nm_drv_deinit+0x88>)
    a658:	4798      	blx	r3
    a65a:	200d      	movs	r0, #13
    a65c:	4b09      	ldr	r3, [pc, #36]	; (a684 <nm_drv_deinit+0x8c>)
    a65e:	4798      	blx	r3
		goto ERR1;
    a660:	e001      	b.n	a666 <nm_drv_deinit+0x6e>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    a662:	4b0d      	ldr	r3, [pc, #52]	; (a698 <nm_drv_deinit+0xa0>)
    a664:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    a666:	0020      	movs	r0, r4
    a668:	bd10      	pop	{r4, pc}
    a66a:	46c0      	nop			; (mov r8, r8)
    a66c:	0000a29d 	.word	0x0000a29d
    a670:	000136dc 	.word	0x000136dc
    a674:	00012e7c 	.word	0x00012e7c
    a678:	0001189d 	.word	0x0001189d
    a67c:	00013670 	.word	0x00013670
    a680:	000119bd 	.word	0x000119bd
    a684:	000118d1 	.word	0x000118d1
    a688:	0000bbb1 	.word	0x0000bbb1
    a68c:	00013690 	.word	0x00013690
    a690:	0000a335 	.word	0x0000a335
    a694:	000136b4 	.word	0x000136b4
    a698:	0000ad0d 	.word	0x0000ad0d

0000a69c <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    a69c:	b500      	push	{lr}
    a69e:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    a6a0:	ab01      	add	r3, sp, #4
    a6a2:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    a6a4:	2200      	movs	r2, #0
    a6a6:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    a6a8:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    a6aa:	0019      	movs	r1, r3
    a6ac:	2003      	movs	r0, #3
    a6ae:	4b02      	ldr	r3, [pc, #8]	; (a6b8 <nmi_spi_write+0x1c>)
    a6b0:	4798      	blx	r3
}
    a6b2:	b005      	add	sp, #20
    a6b4:	bd00      	pop	{pc}
    a6b6:	46c0      	nop			; (mov r8, r8)
    a6b8:	00008d31 	.word	0x00008d31

0000a6bc <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    a6bc:	b570      	push	{r4, r5, r6, lr}
    a6be:	b084      	sub	sp, #16
    a6c0:	ac08      	add	r4, sp, #32
    a6c2:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    a6c4:	ac01      	add	r4, sp, #4
    a6c6:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    a6c8:	303f      	adds	r0, #63	; 0x3f
    a6ca:	b2c4      	uxtb	r4, r0
    a6cc:	2c0e      	cmp	r4, #14
    a6ce:	d900      	bls.n	a6d2 <spi_cmd+0x16>
    a6d0:	e092      	b.n	a7f8 <spi_cmd+0x13c>
    a6d2:	00a0      	lsls	r0, r4, #2
    a6d4:	4c50      	ldr	r4, [pc, #320]	; (a818 <spi_cmd+0x15c>)
    a6d6:	5820      	ldr	r0, [r4, r0]
    a6d8:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    a6da:	ab01      	add	r3, sp, #4
    a6dc:	0c0a      	lsrs	r2, r1, #16
    a6de:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    a6e0:	0a0a      	lsrs	r2, r1, #8
    a6e2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    a6e4:	70d9      	strb	r1, [r3, #3]
		len = 5;
    a6e6:	2105      	movs	r1, #5
		break;
    a6e8:	e08e      	b.n	a808 <spi_cmd+0x14c>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    a6ea:	0a0b      	lsrs	r3, r1, #8
    a6ec:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    a6ee:	2d00      	cmp	r5, #0
    a6f0:	d102      	bne.n	a6f8 <spi_cmd+0x3c>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    a6f2:	aa01      	add	r2, sp, #4
    a6f4:	7053      	strb	r3, [r2, #1]
    a6f6:	e004      	b.n	a702 <spi_cmd+0x46>
		if(clockless)  bc[1] |= (1 << 7);
    a6f8:	2280      	movs	r2, #128	; 0x80
    a6fa:	4252      	negs	r2, r2
    a6fc:	4313      	orrs	r3, r2
    a6fe:	aa01      	add	r2, sp, #4
    a700:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    a702:	ab01      	add	r3, sp, #4
    a704:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    a706:	2200      	movs	r2, #0
    a708:	70da      	strb	r2, [r3, #3]
		len = 5;
    a70a:	2105      	movs	r1, #5
		break;
    a70c:	e07c      	b.n	a808 <spi_cmd+0x14c>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    a70e:	ab01      	add	r3, sp, #4
    a710:	2200      	movs	r2, #0
    a712:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    a714:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    a716:	70da      	strb	r2, [r3, #3]
		len = 5;
    a718:	2105      	movs	r1, #5
		break;
    a71a:	e075      	b.n	a808 <spi_cmd+0x14c>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    a71c:	ab01      	add	r3, sp, #4
    a71e:	2200      	movs	r2, #0
    a720:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    a722:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    a724:	70da      	strb	r2, [r3, #3]
		len = 5;
    a726:	2105      	movs	r1, #5
		break;
    a728:	e06e      	b.n	a808 <spi_cmd+0x14c>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    a72a:	ab01      	add	r3, sp, #4
    a72c:	22ff      	movs	r2, #255	; 0xff
    a72e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    a730:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    a732:	70da      	strb	r2, [r3, #3]
		len = 5;
    a734:	2105      	movs	r1, #5
		break;
    a736:	e067      	b.n	a808 <spi_cmd+0x14c>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    a738:	aa01      	add	r2, sp, #4
    a73a:	0c08      	lsrs	r0, r1, #16
    a73c:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    a73e:	0a08      	lsrs	r0, r1, #8
    a740:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    a742:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    a744:	0a19      	lsrs	r1, r3, #8
    a746:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    a748:	7153      	strb	r3, [r2, #5]
		len = 7;
    a74a:	2107      	movs	r1, #7
		break;
    a74c:	e05c      	b.n	a808 <spi_cmd+0x14c>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    a74e:	aa01      	add	r2, sp, #4
    a750:	0c08      	lsrs	r0, r1, #16
    a752:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    a754:	0a08      	lsrs	r0, r1, #8
    a756:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    a758:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    a75a:	0c19      	lsrs	r1, r3, #16
    a75c:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    a75e:	0a19      	lsrs	r1, r3, #8
    a760:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    a762:	7193      	strb	r3, [r2, #6]
		len = 8;
    a764:	2108      	movs	r1, #8
		break;
    a766:	e04f      	b.n	a808 <spi_cmd+0x14c>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    a768:	0a0b      	lsrs	r3, r1, #8
    a76a:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    a76c:	2d00      	cmp	r5, #0
    a76e:	d102      	bne.n	a776 <spi_cmd+0xba>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    a770:	a801      	add	r0, sp, #4
    a772:	7043      	strb	r3, [r0, #1]
    a774:	e004      	b.n	a780 <spi_cmd+0xc4>
		if(clockless)  bc[1] |= (1 << 7);
    a776:	2080      	movs	r0, #128	; 0x80
    a778:	4240      	negs	r0, r0
    a77a:	4303      	orrs	r3, r0
    a77c:	a801      	add	r0, sp, #4
    a77e:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    a780:	ab01      	add	r3, sp, #4
    a782:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    a784:	0e11      	lsrs	r1, r2, #24
    a786:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    a788:	0c11      	lsrs	r1, r2, #16
    a78a:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    a78c:	0a11      	lsrs	r1, r2, #8
    a78e:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    a790:	719a      	strb	r2, [r3, #6]
		len = 8;
    a792:	2108      	movs	r1, #8
		break;
    a794:	e038      	b.n	a808 <spi_cmd+0x14c>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    a796:	ab01      	add	r3, sp, #4
    a798:	0c08      	lsrs	r0, r1, #16
    a79a:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    a79c:	0a08      	lsrs	r0, r1, #8
    a79e:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    a7a0:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    a7a2:	0e11      	lsrs	r1, r2, #24
    a7a4:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    a7a6:	0c11      	lsrs	r1, r2, #16
    a7a8:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    a7aa:	0a11      	lsrs	r1, r2, #8
    a7ac:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    a7ae:	71da      	strb	r2, [r3, #7]
		len = 9;
    a7b0:	2109      	movs	r1, #9
		break;
    a7b2:	e029      	b.n	a808 <spi_cmd+0x14c>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
    a7b4:	005b      	lsls	r3, r3, #1
    a7b6:	7810      	ldrb	r0, [r2, #0]
    a7b8:	4043      	eors	r3, r0
    a7ba:	5ce3      	ldrb	r3, [r4, r3]
    a7bc:	3201      	adds	r2, #1
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    a7be:	4295      	cmp	r5, r2
    a7c0:	d1f8      	bne.n	a7b4 <spi_cmd+0xf8>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    a7c2:	005b      	lsls	r3, r3, #1
    a7c4:	aa01      	add	r2, sp, #4
    a7c6:	5593      	strb	r3, [r2, r6]
    a7c8:	e001      	b.n	a7ce <spi_cmd+0x112>
		else
			len-=1;
    a7ca:	3901      	subs	r1, #1
    a7cc:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    a7ce:	b289      	uxth	r1, r1
    a7d0:	a801      	add	r0, sp, #4
    a7d2:	4b12      	ldr	r3, [pc, #72]	; (a81c <spi_cmd+0x160>)
    a7d4:	4798      	blx	r3
    a7d6:	2301      	movs	r3, #1
    a7d8:	2800      	cmp	r0, #0
    a7da:	d01a      	beq.n	a812 <spi_cmd+0x156>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    a7dc:	2228      	movs	r2, #40	; 0x28
    a7de:	32ff      	adds	r2, #255	; 0xff
    a7e0:	490f      	ldr	r1, [pc, #60]	; (a820 <spi_cmd+0x164>)
    a7e2:	4810      	ldr	r0, [pc, #64]	; (a824 <spi_cmd+0x168>)
    a7e4:	4b10      	ldr	r3, [pc, #64]	; (a828 <spi_cmd+0x16c>)
    a7e6:	4798      	blx	r3
    a7e8:	4810      	ldr	r0, [pc, #64]	; (a82c <spi_cmd+0x170>)
    a7ea:	4b11      	ldr	r3, [pc, #68]	; (a830 <spi_cmd+0x174>)
    a7ec:	4798      	blx	r3
    a7ee:	200d      	movs	r0, #13
    a7f0:	4b10      	ldr	r3, [pc, #64]	; (a834 <spi_cmd+0x178>)
    a7f2:	4798      	blx	r3
			result = N_FAIL;
    a7f4:	2300      	movs	r3, #0
    a7f6:	e00c      	b.n	a812 <spi_cmd+0x156>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
    a7f8:	2300      	movs	r3, #0
    a7fa:	e00a      	b.n	a812 <spi_cmd+0x156>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    a7fc:	1e4e      	subs	r6, r1, #1
    a7fe:	aa01      	add	r2, sp, #4
    a800:	1995      	adds	r5, r2, r6
    a802:	237f      	movs	r3, #127	; 0x7f
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
    a804:	4c0c      	ldr	r4, [pc, #48]	; (a838 <spi_cmd+0x17c>)
    a806:	e7d5      	b.n	a7b4 <spi_cmd+0xf8>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    a808:	4b0c      	ldr	r3, [pc, #48]	; (a83c <spi_cmd+0x180>)
    a80a:	781b      	ldrb	r3, [r3, #0]
    a80c:	2b00      	cmp	r3, #0
    a80e:	d1dc      	bne.n	a7ca <spi_cmd+0x10e>
    a810:	e7f4      	b.n	a7fc <spi_cmd+0x140>
			result = N_FAIL;
		}
	}

	return result;
}
    a812:	0018      	movs	r0, r3
    a814:	b004      	add	sp, #16
    a816:	bd70      	pop	{r4, r5, r6, pc}
    a818:	000136ec 	.word	0x000136ec
    a81c:	0000a69d 	.word	0x0000a69d
    a820:	0001373c 	.word	0x0001373c
    a824:	00012e7c 	.word	0x00012e7c
    a828:	0001189d 	.word	0x0001189d
    a82c:	0001378c 	.word	0x0001378c
    a830:	000119bd 	.word	0x000119bd
    a834:	000118d1 	.word	0x000118d1
    a838:	00013cf0 	.word	0x00013cf0
    a83c:	200000b0 	.word	0x200000b0

0000a840 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    a840:	b500      	push	{lr}
    a842:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    a844:	ab01      	add	r3, sp, #4
    a846:	2200      	movs	r2, #0
    a848:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    a84a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    a84c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    a84e:	0019      	movs	r1, r3
    a850:	2003      	movs	r0, #3
    a852:	4b02      	ldr	r3, [pc, #8]	; (a85c <nmi_spi_read+0x1c>)
    a854:	4798      	blx	r3
}
    a856:	b005      	add	sp, #20
    a858:	bd00      	pop	{pc}
    a85a:	46c0      	nop			; (mov r8, r8)
    a85c:	00008d31 	.word	0x00008d31

0000a860 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    a860:	b5f0      	push	{r4, r5, r6, r7, lr}
    a862:	b083      	sub	sp, #12
    a864:	1e06      	subs	r6, r0, #0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    a866:	2ecf      	cmp	r6, #207	; 0xcf
    a868:	d004      	beq.n	a874 <spi_cmd_rsp+0x14>
    a86a:	0003      	movs	r3, r0
    a86c:	333b      	adds	r3, #59	; 0x3b
    a86e:	b2db      	uxtb	r3, r3
    a870:	2b01      	cmp	r3, #1
    a872:	d807      	bhi.n	a884 <spi_cmd_rsp+0x24>
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    a874:	2101      	movs	r1, #1
    a876:	466b      	mov	r3, sp
    a878:	1dd8      	adds	r0, r3, #7
    a87a:	4b24      	ldr	r3, [pc, #144]	; (a90c <spi_cmd_rsp+0xac>)
    a87c:	4798      	blx	r3
			result = N_FAIL;
    a87e:	2300      	movs	r3, #0
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    a880:	2800      	cmp	r0, #0
    a882:	d140      	bne.n	a906 <spi_cmd_rsp+0xa6>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    a884:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    a886:	466b      	mov	r3, sp
    a888:	1ddd      	adds	r5, r3, #7
    a88a:	4f20      	ldr	r7, [pc, #128]	; (a90c <spi_cmd_rsp+0xac>)
    a88c:	2101      	movs	r1, #1
    a88e:	0028      	movs	r0, r5
    a890:	47b8      	blx	r7
    a892:	2800      	cmp	r0, #0
    a894:	d00d      	beq.n	a8b2 <spi_cmd_rsp+0x52>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    a896:	22b1      	movs	r2, #177	; 0xb1
    a898:	0052      	lsls	r2, r2, #1
    a89a:	491d      	ldr	r1, [pc, #116]	; (a910 <spi_cmd_rsp+0xb0>)
    a89c:	481d      	ldr	r0, [pc, #116]	; (a914 <spi_cmd_rsp+0xb4>)
    a89e:	4b1e      	ldr	r3, [pc, #120]	; (a918 <spi_cmd_rsp+0xb8>)
    a8a0:	4798      	blx	r3
    a8a2:	481e      	ldr	r0, [pc, #120]	; (a91c <spi_cmd_rsp+0xbc>)
    a8a4:	4b1e      	ldr	r3, [pc, #120]	; (a920 <spi_cmd_rsp+0xc0>)
    a8a6:	4798      	blx	r3
    a8a8:	200d      	movs	r0, #13
    a8aa:	4b1e      	ldr	r3, [pc, #120]	; (a924 <spi_cmd_rsp+0xc4>)
    a8ac:	4798      	blx	r3
			result = N_FAIL;
    a8ae:	2300      	movs	r3, #0
			goto _fail_;
    a8b0:	e029      	b.n	a906 <spi_cmd_rsp+0xa6>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    a8b2:	782b      	ldrb	r3, [r5, #0]
    a8b4:	42b3      	cmp	r3, r6
    a8b6:	d005      	beq.n	a8c4 <spi_cmd_rsp+0x64>
    a8b8:	3c01      	subs	r4, #1
    a8ba:	b2e4      	uxtb	r4, r4
    a8bc:	2c00      	cmp	r4, #0
    a8be:	d1e5      	bne.n	a88c <spi_cmd_rsp+0x2c>
    a8c0:	340b      	adds	r4, #11
    a8c2:	e000      	b.n	a8c6 <spi_cmd_rsp+0x66>
    a8c4:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    a8c6:	466b      	mov	r3, sp
    a8c8:	1ddd      	adds	r5, r3, #7
    a8ca:	4e10      	ldr	r6, [pc, #64]	; (a90c <spi_cmd_rsp+0xac>)
    a8cc:	2101      	movs	r1, #1
    a8ce:	0028      	movs	r0, r5
    a8d0:	47b0      	blx	r6
    a8d2:	2800      	cmp	r0, #0
    a8d4:	d00d      	beq.n	a8f2 <spi_cmd_rsp+0x92>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    a8d6:	22b8      	movs	r2, #184	; 0xb8
    a8d8:	0052      	lsls	r2, r2, #1
    a8da:	490d      	ldr	r1, [pc, #52]	; (a910 <spi_cmd_rsp+0xb0>)
    a8dc:	480d      	ldr	r0, [pc, #52]	; (a914 <spi_cmd_rsp+0xb4>)
    a8de:	4b0e      	ldr	r3, [pc, #56]	; (a918 <spi_cmd_rsp+0xb8>)
    a8e0:	4798      	blx	r3
    a8e2:	480e      	ldr	r0, [pc, #56]	; (a91c <spi_cmd_rsp+0xbc>)
    a8e4:	4b0e      	ldr	r3, [pc, #56]	; (a920 <spi_cmd_rsp+0xc0>)
    a8e6:	4798      	blx	r3
    a8e8:	200d      	movs	r0, #13
    a8ea:	4b0e      	ldr	r3, [pc, #56]	; (a924 <spi_cmd_rsp+0xc4>)
    a8ec:	4798      	blx	r3
			result = N_FAIL;
    a8ee:	2300      	movs	r3, #0
			goto _fail_;
    a8f0:	e009      	b.n	a906 <spi_cmd_rsp+0xa6>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    a8f2:	782b      	ldrb	r3, [r5, #0]
    a8f4:	2b00      	cmp	r3, #0
    a8f6:	d005      	beq.n	a904 <spi_cmd_rsp+0xa4>
    a8f8:	3c01      	subs	r4, #1
    a8fa:	b2e4      	uxtb	r4, r4
    a8fc:	2c00      	cmp	r4, #0
    a8fe:	d1e5      	bne.n	a8cc <spi_cmd_rsp+0x6c>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
    a900:	2301      	movs	r3, #1
    a902:	e000      	b.n	a906 <spi_cmd_rsp+0xa6>
    a904:	2301      	movs	r3, #1
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
}
    a906:	0018      	movs	r0, r3
    a908:	b003      	add	sp, #12
    a90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a90c:	0000a841 	.word	0x0000a841
    a910:	00013780 	.word	0x00013780
    a914:	00012e7c 	.word	0x00012e7c
    a918:	0001189d 	.word	0x0001189d
    a91c:	000137b8 	.word	0x000137b8
    a920:	000119bd 	.word	0x000119bd
    a924:	000118d1 	.word	0x000118d1

0000a928 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    a928:	b5f0      	push	{r4, r5, r6, r7, lr}
    a92a:	465f      	mov	r7, fp
    a92c:	4656      	mov	r6, sl
    a92e:	464d      	mov	r5, r9
    a930:	4644      	mov	r4, r8
    a932:	b4f0      	push	{r4, r5, r6, r7}
    a934:	b083      	sub	sp, #12
    a936:	4682      	mov	sl, r0
    a938:	4689      	mov	r9, r1
    a93a:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    a93c:	2300      	movs	r3, #0
    a93e:	4698      	mov	r8, r3
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    a940:	4f3c      	ldr	r7, [pc, #240]	; (aa34 <spi_data_read+0x10c>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
    a942:	2380      	movs	r3, #128	; 0x80
    a944:	019b      	lsls	r3, r3, #6
    a946:	4599      	cmp	r9, r3
    a948:	d802      	bhi.n	a950 <spi_data_read+0x28>
			nbytes = sz;
    a94a:	464b      	mov	r3, r9
    a94c:	b21e      	sxth	r6, r3
    a94e:	e001      	b.n	a954 <spi_data_read+0x2c>
		else
			nbytes = DATA_PKT_SZ;
    a950:	2680      	movs	r6, #128	; 0x80
    a952:	01b6      	lsls	r6, r6, #6

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    a954:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    a956:	466b      	mov	r3, sp
    a958:	1cdd      	adds	r5, r3, #3
    a95a:	2101      	movs	r1, #1
    a95c:	0028      	movs	r0, r5
    a95e:	47b8      	blx	r7
    a960:	2800      	cmp	r0, #0
    a962:	d00c      	beq.n	a97e <spi_data_read+0x56>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    a964:	4a34      	ldr	r2, [pc, #208]	; (aa38 <spi_data_read+0x110>)
    a966:	4935      	ldr	r1, [pc, #212]	; (aa3c <spi_data_read+0x114>)
    a968:	4835      	ldr	r0, [pc, #212]	; (aa40 <spi_data_read+0x118>)
    a96a:	4b36      	ldr	r3, [pc, #216]	; (aa44 <spi_data_read+0x11c>)
    a96c:	4798      	blx	r3
    a96e:	4836      	ldr	r0, [pc, #216]	; (aa48 <spi_data_read+0x120>)
    a970:	4b36      	ldr	r3, [pc, #216]	; (aa4c <spi_data_read+0x124>)
    a972:	4798      	blx	r3
    a974:	200d      	movs	r0, #13
    a976:	4b36      	ldr	r3, [pc, #216]	; (aa50 <spi_data_read+0x128>)
    a978:	4798      	blx	r3
    a97a:	2000      	movs	r0, #0
    a97c:	e053      	b.n	aa26 <spi_data_read+0xfe>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    a97e:	782b      	ldrb	r3, [r5, #0]
    a980:	091b      	lsrs	r3, r3, #4
    a982:	2b0f      	cmp	r3, #15
    a984:	d004      	beq.n	a990 <spi_data_read+0x68>
    a986:	3c01      	subs	r4, #1
    a988:	b224      	sxth	r4, r4
				break;
		} while (retry--);
    a98a:	1c63      	adds	r3, r4, #1
    a98c:	d1e5      	bne.n	a95a <spi_data_read+0x32>
    a98e:	e001      	b.n	a994 <spi_data_read+0x6c>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
    a990:	2c00      	cmp	r4, #0
    a992:	dc0d      	bgt.n	a9b0 <spi_data_read+0x88>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    a994:	4a2f      	ldr	r2, [pc, #188]	; (aa54 <spi_data_read+0x12c>)
    a996:	4929      	ldr	r1, [pc, #164]	; (aa3c <spi_data_read+0x114>)
    a998:	4829      	ldr	r0, [pc, #164]	; (aa40 <spi_data_read+0x118>)
    a99a:	4c2a      	ldr	r4, [pc, #168]	; (aa44 <spi_data_read+0x11c>)
    a99c:	47a0      	blx	r4
    a99e:	466b      	mov	r3, sp
    a9a0:	78d9      	ldrb	r1, [r3, #3]
    a9a2:	482d      	ldr	r0, [pc, #180]	; (aa58 <spi_data_read+0x130>)
    a9a4:	47a0      	blx	r4
    a9a6:	200d      	movs	r0, #13
    a9a8:	4b29      	ldr	r3, [pc, #164]	; (aa50 <spi_data_read+0x128>)
    a9aa:	4798      	blx	r3
			result = N_FAIL;
    a9ac:	2000      	movs	r0, #0
			break;
    a9ae:	e03a      	b.n	aa26 <spi_data_read+0xfe>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    a9b0:	b2b6      	uxth	r6, r6
    a9b2:	4650      	mov	r0, sl
    a9b4:	4440      	add	r0, r8
    a9b6:	0031      	movs	r1, r6
    a9b8:	4b1e      	ldr	r3, [pc, #120]	; (aa34 <spi_data_read+0x10c>)
    a9ba:	4798      	blx	r3
    a9bc:	2800      	cmp	r0, #0
    a9be:	d00d      	beq.n	a9dc <spi_data_read+0xb4>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    a9c0:	22c5      	movs	r2, #197	; 0xc5
    a9c2:	0092      	lsls	r2, r2, #2
    a9c4:	491d      	ldr	r1, [pc, #116]	; (aa3c <spi_data_read+0x114>)
    a9c6:	481e      	ldr	r0, [pc, #120]	; (aa40 <spi_data_read+0x118>)
    a9c8:	4b1e      	ldr	r3, [pc, #120]	; (aa44 <spi_data_read+0x11c>)
    a9ca:	4798      	blx	r3
    a9cc:	4823      	ldr	r0, [pc, #140]	; (aa5c <spi_data_read+0x134>)
    a9ce:	4b1f      	ldr	r3, [pc, #124]	; (aa4c <spi_data_read+0x124>)
    a9d0:	4798      	blx	r3
    a9d2:	200d      	movs	r0, #13
    a9d4:	4b1e      	ldr	r3, [pc, #120]	; (aa50 <spi_data_read+0x128>)
    a9d6:	4798      	blx	r3
			result = N_FAIL;
    a9d8:	2000      	movs	r0, #0
			break;
    a9da:	e024      	b.n	aa26 <spi_data_read+0xfe>
		}
		if(!clockless)
    a9dc:	465b      	mov	r3, fp
    a9de:	2b00      	cmp	r3, #0
    a9e0:	d116      	bne.n	aa10 <spi_data_read+0xe8>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    a9e2:	4b1f      	ldr	r3, [pc, #124]	; (aa60 <spi_data_read+0x138>)
    a9e4:	781b      	ldrb	r3, [r3, #0]
    a9e6:	2b00      	cmp	r3, #0
    a9e8:	d112      	bne.n	aa10 <spi_data_read+0xe8>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    a9ea:	2102      	movs	r1, #2
    a9ec:	a801      	add	r0, sp, #4
    a9ee:	4b11      	ldr	r3, [pc, #68]	; (aa34 <spi_data_read+0x10c>)
    a9f0:	4798      	blx	r3
    a9f2:	2800      	cmp	r0, #0
    a9f4:	d00c      	beq.n	aa10 <spi_data_read+0xe8>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    a9f6:	4a1b      	ldr	r2, [pc, #108]	; (aa64 <spi_data_read+0x13c>)
    a9f8:	4910      	ldr	r1, [pc, #64]	; (aa3c <spi_data_read+0x114>)
    a9fa:	4811      	ldr	r0, [pc, #68]	; (aa40 <spi_data_read+0x118>)
    a9fc:	4b11      	ldr	r3, [pc, #68]	; (aa44 <spi_data_read+0x11c>)
    a9fe:	4798      	blx	r3
    aa00:	4819      	ldr	r0, [pc, #100]	; (aa68 <spi_data_read+0x140>)
    aa02:	4b12      	ldr	r3, [pc, #72]	; (aa4c <spi_data_read+0x124>)
    aa04:	4798      	blx	r3
    aa06:	200d      	movs	r0, #13
    aa08:	4b11      	ldr	r3, [pc, #68]	; (aa50 <spi_data_read+0x128>)
    aa0a:	4798      	blx	r3
					result = N_FAIL;
    aa0c:	2000      	movs	r0, #0
					break;
    aa0e:	e00a      	b.n	aa26 <spi_data_read+0xfe>
				}
			}
		}
		ix += nbytes;
    aa10:	4643      	mov	r3, r8
    aa12:	18f3      	adds	r3, r6, r3
    aa14:	b21b      	sxth	r3, r3
    aa16:	4698      	mov	r8, r3
		sz -= nbytes;
    aa18:	464b      	mov	r3, r9
    aa1a:	1b9e      	subs	r6, r3, r6
    aa1c:	b2b3      	uxth	r3, r6
    aa1e:	4699      	mov	r9, r3

	} while (sz);
    aa20:	2b00      	cmp	r3, #0
    aa22:	d18e      	bne.n	a942 <spi_data_read+0x1a>
    aa24:	2001      	movs	r0, #1

	return result;
}
    aa26:	b003      	add	sp, #12
    aa28:	bc3c      	pop	{r2, r3, r4, r5}
    aa2a:	4690      	mov	r8, r2
    aa2c:	4699      	mov	r9, r3
    aa2e:	46a2      	mov	sl, r4
    aa30:	46ab      	mov	fp, r5
    aa32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa34:	0000a841 	.word	0x0000a841
    aa38:	000002ff 	.word	0x000002ff
    aa3c:	00013ce0 	.word	0x00013ce0
    aa40:	00012e7c 	.word	0x00012e7c
    aa44:	0001189d 	.word	0x0001189d
    aa48:	000137ec 	.word	0x000137ec
    aa4c:	000119bd 	.word	0x000119bd
    aa50:	000118d1 	.word	0x000118d1
    aa54:	0000030b 	.word	0x0000030b
    aa58:	00013820 	.word	0x00013820
    aa5c:	00013850 	.word	0x00013850
    aa60:	200000b0 	.word	0x200000b0
    aa64:	0000031f 	.word	0x0000031f
    aa68:	00013880 	.word	0x00013880

0000aa6c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    aa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa6e:	4657      	mov	r7, sl
    aa70:	464e      	mov	r6, r9
    aa72:	4645      	mov	r5, r8
    aa74:	b4e0      	push	{r5, r6, r7}
    aa76:	b086      	sub	sp, #24
    aa78:	9003      	str	r0, [sp, #12]
    aa7a:	9104      	str	r1, [sp, #16]
    aa7c:	2830      	cmp	r0, #48	; 0x30
    aa7e:	d802      	bhi.n	aa86 <spi_write_reg+0x1a>
    aa80:	4b30      	ldr	r3, [pc, #192]	; (ab44 <spi_write_reg+0xd8>)
    aa82:	781f      	ldrb	r7, [r3, #0]
    aa84:	e001      	b.n	aa8a <spi_write_reg+0x1e>
    aa86:	4b30      	ldr	r3, [pc, #192]	; (ab48 <spi_write_reg+0xdc>)
    aa88:	781f      	ldrb	r7, [r3, #0]
    aa8a:	b2fb      	uxtb	r3, r7
    aa8c:	9305      	str	r3, [sp, #20]
    aa8e:	2300      	movs	r3, #0
    aa90:	2230      	movs	r2, #48	; 0x30
    aa92:	9903      	ldr	r1, [sp, #12]
    aa94:	428a      	cmp	r2, r1
    aa96:	415b      	adcs	r3, r3
    aa98:	b2db      	uxtb	r3, r3
    aa9a:	469a      	mov	sl, r3
    aa9c:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    aa9e:	4b2b      	ldr	r3, [pc, #172]	; (ab4c <spi_write_reg+0xe0>)
    aaa0:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    aaa2:	46d1      	mov	r9, sl
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    aaa4:	464b      	mov	r3, r9
    aaa6:	9300      	str	r3, [sp, #0]
    aaa8:	2304      	movs	r3, #4
    aaaa:	9a04      	ldr	r2, [sp, #16]
    aaac:	9f03      	ldr	r7, [sp, #12]
    aaae:	0039      	movs	r1, r7
    aab0:	9805      	ldr	r0, [sp, #20]
    aab2:	47c0      	blx	r8
    aab4:	1e04      	subs	r4, r0, #0
	if (result != N_OK) {
    aab6:	2c01      	cmp	r4, #1
    aab8:	d00b      	beq.n	aad2 <spi_write_reg+0x66>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    aaba:	4a25      	ldr	r2, [pc, #148]	; (ab50 <spi_write_reg+0xe4>)
    aabc:	4925      	ldr	r1, [pc, #148]	; (ab54 <spi_write_reg+0xe8>)
    aabe:	4826      	ldr	r0, [pc, #152]	; (ab58 <spi_write_reg+0xec>)
    aac0:	4e26      	ldr	r6, [pc, #152]	; (ab5c <spi_write_reg+0xf0>)
    aac2:	47b0      	blx	r6
    aac4:	0039      	movs	r1, r7
    aac6:	4826      	ldr	r0, [pc, #152]	; (ab60 <spi_write_reg+0xf4>)
    aac8:	47b0      	blx	r6
    aaca:	200d      	movs	r0, #13
    aacc:	4b25      	ldr	r3, [pc, #148]	; (ab64 <spi_write_reg+0xf8>)
    aace:	4798      	blx	r3
		goto _FAIL_;
    aad0:	e011      	b.n	aaf6 <spi_write_reg+0x8a>
	}

	result = spi_cmd_rsp(cmd);
    aad2:	9805      	ldr	r0, [sp, #20]
    aad4:	4b24      	ldr	r3, [pc, #144]	; (ab68 <spi_write_reg+0xfc>)
    aad6:	4798      	blx	r3
    aad8:	1e04      	subs	r4, r0, #0
	if (result != N_OK) {
    aada:	2c01      	cmp	r4, #1
    aadc:	d02a      	beq.n	ab34 <spi_write_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    aade:	22e7      	movs	r2, #231	; 0xe7
    aae0:	0092      	lsls	r2, r2, #2
    aae2:	491c      	ldr	r1, [pc, #112]	; (ab54 <spi_write_reg+0xe8>)
    aae4:	481c      	ldr	r0, [pc, #112]	; (ab58 <spi_write_reg+0xec>)
    aae6:	4e1d      	ldr	r6, [pc, #116]	; (ab5c <spi_write_reg+0xf0>)
    aae8:	47b0      	blx	r6
    aaea:	9903      	ldr	r1, [sp, #12]
    aaec:	481f      	ldr	r0, [pc, #124]	; (ab6c <spi_write_reg+0x100>)
    aaee:	47b0      	blx	r6
    aaf0:	200d      	movs	r0, #13
    aaf2:	4b1c      	ldr	r3, [pc, #112]	; (ab64 <spi_write_reg+0xf8>)
    aaf4:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    aaf6:	2001      	movs	r0, #1
    aaf8:	4e1d      	ldr	r6, [pc, #116]	; (ab70 <spi_write_reg+0x104>)
    aafa:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    aafc:	2300      	movs	r3, #0
    aafe:	9300      	str	r3, [sp, #0]
    ab00:	2200      	movs	r2, #0
    ab02:	2100      	movs	r1, #0
    ab04:	20cf      	movs	r0, #207	; 0xcf
    ab06:	4f11      	ldr	r7, [pc, #68]	; (ab4c <spi_write_reg+0xe0>)
    ab08:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    ab0a:	20cf      	movs	r0, #207	; 0xcf
    ab0c:	4b16      	ldr	r3, [pc, #88]	; (ab68 <spi_write_reg+0xfc>)
    ab0e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    ab10:	4a18      	ldr	r2, [pc, #96]	; (ab74 <spi_write_reg+0x108>)
    ab12:	4910      	ldr	r1, [pc, #64]	; (ab54 <spi_write_reg+0xe8>)
    ab14:	4810      	ldr	r0, [pc, #64]	; (ab58 <spi_write_reg+0xec>)
    ab16:	4f11      	ldr	r7, [pc, #68]	; (ab5c <spi_write_reg+0xf0>)
    ab18:	47b8      	blx	r7
    ab1a:	9b04      	ldr	r3, [sp, #16]
    ab1c:	9a03      	ldr	r2, [sp, #12]
    ab1e:	0029      	movs	r1, r5
    ab20:	4815      	ldr	r0, [pc, #84]	; (ab78 <spi_write_reg+0x10c>)
    ab22:	47b8      	blx	r7
    ab24:	200d      	movs	r0, #13
    ab26:	4b0f      	ldr	r3, [pc, #60]	; (ab64 <spi_write_reg+0xf8>)
    ab28:	4798      	blx	r3
		nm_bsp_sleep(1);
    ab2a:	2001      	movs	r0, #1
    ab2c:	47b0      	blx	r6
    ab2e:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    ab30:	2d00      	cmp	r5, #0
    ab32:	d1b7      	bne.n	aaa4 <spi_write_reg+0x38>
	}

	return result;
}
    ab34:	0020      	movs	r0, r4
    ab36:	b006      	add	sp, #24
    ab38:	bc1c      	pop	{r2, r3, r4}
    ab3a:	4690      	mov	r8, r2
    ab3c:	4699      	mov	r9, r3
    ab3e:	46a2      	mov	sl, r4
    ab40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab42:	46c0      	nop			; (mov r8, r8)
    ab44:	00013728 	.word	0x00013728
    ab48:	00013729 	.word	0x00013729
    ab4c:	0000a6bd 	.word	0x0000a6bd
    ab50:	00000396 	.word	0x00000396
    ab54:	00013754 	.word	0x00013754
    ab58:	00012e7c 	.word	0x00012e7c
    ab5c:	0001189d 	.word	0x0001189d
    ab60:	000138b4 	.word	0x000138b4
    ab64:	000118d1 	.word	0x000118d1
    ab68:	0000a861 	.word	0x0000a861
    ab6c:	000138e0 	.word	0x000138e0
    ab70:	00008aed 	.word	0x00008aed
    ab74:	000003af 	.word	0x000003af
    ab78:	00013918 	.word	0x00013918

0000ab7c <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    ab7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab7e:	465f      	mov	r7, fp
    ab80:	4656      	mov	r6, sl
    ab82:	464d      	mov	r5, r9
    ab84:	4644      	mov	r4, r8
    ab86:	b4f0      	push	{r4, r5, r6, r7}
    ab88:	b087      	sub	sp, #28
    ab8a:	9002      	str	r0, [sp, #8]
    ab8c:	468b      	mov	fp, r1
    ab8e:	28ff      	cmp	r0, #255	; 0xff
    ab90:	d802      	bhi.n	ab98 <spi_read_reg+0x1c>
    ab92:	4b41      	ldr	r3, [pc, #260]	; (ac98 <spi_read_reg+0x11c>)
    ab94:	781f      	ldrb	r7, [r3, #0]
    ab96:	e001      	b.n	ab9c <spi_read_reg+0x20>
    ab98:	4b40      	ldr	r3, [pc, #256]	; (ac9c <spi_read_reg+0x120>)
    ab9a:	781f      	ldrb	r7, [r3, #0]
    ab9c:	b2fb      	uxtb	r3, r7
    ab9e:	9303      	str	r3, [sp, #12]
    aba0:	2300      	movs	r3, #0
    aba2:	22ff      	movs	r2, #255	; 0xff
    aba4:	9902      	ldr	r1, [sp, #8]
    aba6:	428a      	cmp	r2, r1
    aba8:	415b      	adcs	r3, r3
    abaa:	b2db      	uxtb	r3, r3
    abac:	469a      	mov	sl, r3
    abae:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    abb0:	4b3b      	ldr	r3, [pc, #236]	; (aca0 <spi_read_reg+0x124>)
    abb2:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    abb4:	46d1      	mov	r9, sl
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    abb6:	464b      	mov	r3, r9
    abb8:	9300      	str	r3, [sp, #0]
    abba:	2304      	movs	r3, #4
    abbc:	2200      	movs	r2, #0
    abbe:	9f02      	ldr	r7, [sp, #8]
    abc0:	0039      	movs	r1, r7
    abc2:	9803      	ldr	r0, [sp, #12]
    abc4:	47c0      	blx	r8
    abc6:	1e04      	subs	r4, r0, #0
	if (result != N_OK) {
    abc8:	2c01      	cmp	r4, #1
    abca:	d00b      	beq.n	abe4 <spi_read_reg+0x68>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    abcc:	4a35      	ldr	r2, [pc, #212]	; (aca4 <spi_read_reg+0x128>)
    abce:	4936      	ldr	r1, [pc, #216]	; (aca8 <spi_read_reg+0x12c>)
    abd0:	4836      	ldr	r0, [pc, #216]	; (acac <spi_read_reg+0x130>)
    abd2:	4e37      	ldr	r6, [pc, #220]	; (acb0 <spi_read_reg+0x134>)
    abd4:	47b0      	blx	r6
    abd6:	0039      	movs	r1, r7
    abd8:	4836      	ldr	r0, [pc, #216]	; (acb4 <spi_read_reg+0x138>)
    abda:	47b0      	blx	r6
    abdc:	200d      	movs	r0, #13
    abde:	4b36      	ldr	r3, [pc, #216]	; (acb8 <spi_read_reg+0x13c>)
    abe0:	4798      	blx	r3
		goto _FAIL_;
    abe2:	e033      	b.n	ac4c <spi_read_reg+0xd0>
	}

	result = spi_cmd_rsp(cmd);
    abe4:	9803      	ldr	r0, [sp, #12]
    abe6:	4b35      	ldr	r3, [pc, #212]	; (acbc <spi_read_reg+0x140>)
    abe8:	4798      	blx	r3
    abea:	1e04      	subs	r4, r0, #0
	if (result != N_OK) {
    abec:	2c01      	cmp	r4, #1
    abee:	d00b      	beq.n	ac08 <spi_read_reg+0x8c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    abf0:	4a33      	ldr	r2, [pc, #204]	; (acc0 <spi_read_reg+0x144>)
    abf2:	492d      	ldr	r1, [pc, #180]	; (aca8 <spi_read_reg+0x12c>)
    abf4:	482d      	ldr	r0, [pc, #180]	; (acac <spi_read_reg+0x130>)
    abf6:	4e2e      	ldr	r6, [pc, #184]	; (acb0 <spi_read_reg+0x134>)
    abf8:	47b0      	blx	r6
    abfa:	9902      	ldr	r1, [sp, #8]
    abfc:	4831      	ldr	r0, [pc, #196]	; (acc4 <spi_read_reg+0x148>)
    abfe:	47b0      	blx	r6
    ac00:	200d      	movs	r0, #13
    ac02:	4b2d      	ldr	r3, [pc, #180]	; (acb8 <spi_read_reg+0x13c>)
    ac04:	4798      	blx	r3
		goto _FAIL_;
    ac06:	e021      	b.n	ac4c <spi_read_reg+0xd0>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    ac08:	464a      	mov	r2, r9
    ac0a:	2104      	movs	r1, #4
    ac0c:	a805      	add	r0, sp, #20
    ac0e:	4b2e      	ldr	r3, [pc, #184]	; (acc8 <spi_read_reg+0x14c>)
    ac10:	4798      	blx	r3
    ac12:	1e04      	subs	r4, r0, #0
	if (result != N_OK) {
    ac14:	2c01      	cmp	r4, #1
    ac16:	d00b      	beq.n	ac30 <spi_read_reg+0xb4>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    ac18:	4a2c      	ldr	r2, [pc, #176]	; (accc <spi_read_reg+0x150>)
    ac1a:	4923      	ldr	r1, [pc, #140]	; (aca8 <spi_read_reg+0x12c>)
    ac1c:	4823      	ldr	r0, [pc, #140]	; (acac <spi_read_reg+0x130>)
    ac1e:	4b24      	ldr	r3, [pc, #144]	; (acb0 <spi_read_reg+0x134>)
    ac20:	4798      	blx	r3
    ac22:	482b      	ldr	r0, [pc, #172]	; (acd0 <spi_read_reg+0x154>)
    ac24:	4b2b      	ldr	r3, [pc, #172]	; (acd4 <spi_read_reg+0x158>)
    ac26:	4798      	blx	r3
    ac28:	200d      	movs	r0, #13
    ac2a:	4b23      	ldr	r3, [pc, #140]	; (acb8 <spi_read_reg+0x13c>)
    ac2c:	4798      	blx	r3
		goto _FAIL_;
    ac2e:	e00d      	b.n	ac4c <spi_read_reg+0xd0>
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    ac30:	aa05      	add	r2, sp, #20
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    ac32:	7853      	ldrb	r3, [r2, #1]
    ac34:	0219      	lsls	r1, r3, #8
    ac36:	7893      	ldrb	r3, [r2, #2]
    ac38:	041b      	lsls	r3, r3, #16
    ac3a:	430b      	orrs	r3, r1
    ac3c:	7811      	ldrb	r1, [r2, #0]
    ac3e:	430b      	orrs	r3, r1
    ac40:	78d2      	ldrb	r2, [r2, #3]
    ac42:	0612      	lsls	r2, r2, #24
    ac44:	4313      	orrs	r3, r2
    ac46:	465a      	mov	r2, fp
    ac48:	6013      	str	r3, [r2, #0]
    ac4a:	e01d      	b.n	ac88 <spi_read_reg+0x10c>
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    ac4c:	2001      	movs	r0, #1
    ac4e:	4e22      	ldr	r6, [pc, #136]	; (acd8 <spi_read_reg+0x15c>)
    ac50:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ac52:	2300      	movs	r3, #0
    ac54:	9300      	str	r3, [sp, #0]
    ac56:	2200      	movs	r2, #0
    ac58:	2100      	movs	r1, #0
    ac5a:	20cf      	movs	r0, #207	; 0xcf
    ac5c:	4f10      	ldr	r7, [pc, #64]	; (aca0 <spi_read_reg+0x124>)
    ac5e:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    ac60:	20cf      	movs	r0, #207	; 0xcf
    ac62:	4b16      	ldr	r3, [pc, #88]	; (acbc <spi_read_reg+0x140>)
    ac64:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    ac66:	4a1d      	ldr	r2, [pc, #116]	; (acdc <spi_read_reg+0x160>)
    ac68:	490f      	ldr	r1, [pc, #60]	; (aca8 <spi_read_reg+0x12c>)
    ac6a:	4810      	ldr	r0, [pc, #64]	; (acac <spi_read_reg+0x130>)
    ac6c:	4f10      	ldr	r7, [pc, #64]	; (acb0 <spi_read_reg+0x134>)
    ac6e:	47b8      	blx	r7
    ac70:	9a02      	ldr	r2, [sp, #8]
    ac72:	0029      	movs	r1, r5
    ac74:	481a      	ldr	r0, [pc, #104]	; (ace0 <spi_read_reg+0x164>)
    ac76:	47b8      	blx	r7
    ac78:	200d      	movs	r0, #13
    ac7a:	4b0f      	ldr	r3, [pc, #60]	; (acb8 <spi_read_reg+0x13c>)
    ac7c:	4798      	blx	r3
		nm_bsp_sleep(1);
    ac7e:	2001      	movs	r0, #1
    ac80:	47b0      	blx	r6
    ac82:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    ac84:	2d00      	cmp	r5, #0
    ac86:	d196      	bne.n	abb6 <spi_read_reg+0x3a>
	}
		
	return result;
}
    ac88:	0020      	movs	r0, r4
    ac8a:	b007      	add	sp, #28
    ac8c:	bc3c      	pop	{r2, r3, r4, r5}
    ac8e:	4690      	mov	r8, r2
    ac90:	4699      	mov	r9, r3
    ac92:	46a2      	mov	sl, r4
    ac94:	46ab      	mov	fp, r5
    ac96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ac98:	0001372a 	.word	0x0001372a
    ac9c:	0001372b 	.word	0x0001372b
    aca0:	0000a6bd 	.word	0x0000a6bd
    aca4:	00000417 	.word	0x00000417
    aca8:	00013cd0 	.word	0x00013cd0
    acac:	00012e7c 	.word	0x00012e7c
    acb0:	0001189d 	.word	0x0001189d
    acb4:	00013934 	.word	0x00013934
    acb8:	000118d1 	.word	0x000118d1
    acbc:	0000a861 	.word	0x0000a861
    acc0:	0000041d 	.word	0x0000041d
    acc4:	00013960 	.word	0x00013960
    acc8:	0000a929 	.word	0x0000a929
    accc:	00000424 	.word	0x00000424
    acd0:	00013994 	.word	0x00013994
    acd4:	000119bd 	.word	0x000119bd
    acd8:	00008aed 	.word	0x00008aed
    acdc:	0000043c 	.word	0x0000043c
    ace0:	000139b4 	.word	0x000139b4

0000ace4 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    ace4:	b510      	push	{r4, lr}
    ace6:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ace8:	2300      	movs	r3, #0
    acea:	9300      	str	r3, [sp, #0]
    acec:	2200      	movs	r2, #0
    acee:	2100      	movs	r1, #0
    acf0:	20cf      	movs	r0, #207	; 0xcf
    acf2:	4c04      	ldr	r4, [pc, #16]	; (ad04 <nm_spi_reset+0x20>)
    acf4:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    acf6:	20cf      	movs	r0, #207	; 0xcf
    acf8:	4b03      	ldr	r3, [pc, #12]	; (ad08 <nm_spi_reset+0x24>)
    acfa:	4798      	blx	r3
	return M2M_SUCCESS;
}
    acfc:	2000      	movs	r0, #0
    acfe:	b002      	add	sp, #8
    ad00:	bd10      	pop	{r4, pc}
    ad02:	46c0      	nop			; (mov r8, r8)
    ad04:	0000a6bd 	.word	0x0000a6bd
    ad08:	0000a861 	.word	0x0000a861

0000ad0c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    ad0c:	2200      	movs	r2, #0
    ad0e:	4b02      	ldr	r3, [pc, #8]	; (ad18 <nm_spi_deinit+0xc>)
    ad10:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    ad12:	2000      	movs	r0, #0
    ad14:	4770      	bx	lr
    ad16:	46c0      	nop			; (mov r8, r8)
    ad18:	200000b0 	.word	0x200000b0

0000ad1c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    ad1c:	b500      	push	{lr}
    ad1e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    ad20:	a901      	add	r1, sp, #4
    ad22:	4b02      	ldr	r3, [pc, #8]	; (ad2c <nm_spi_read_reg+0x10>)
    ad24:	4798      	blx	r3

	return u32Val;
}
    ad26:	9801      	ldr	r0, [sp, #4]
    ad28:	b003      	add	sp, #12
    ad2a:	bd00      	pop	{pc}
    ad2c:	0000ab7d 	.word	0x0000ab7d

0000ad30 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    ad30:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    ad32:	4b04      	ldr	r3, [pc, #16]	; (ad44 <nm_spi_read_reg_with_ret+0x14>)
    ad34:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ad36:	2300      	movs	r3, #0
    ad38:	2801      	cmp	r0, #1
    ad3a:	d000      	beq.n	ad3e <nm_spi_read_reg_with_ret+0xe>
	else s8Ret = M2M_ERR_BUS_FAIL;
    ad3c:	3b06      	subs	r3, #6

	return s8Ret;
}
    ad3e:	0018      	movs	r0, r3
    ad40:	bd10      	pop	{r4, pc}
    ad42:	46c0      	nop			; (mov r8, r8)
    ad44:	0000ab7d 	.word	0x0000ab7d

0000ad48 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    ad48:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    ad4a:	4b04      	ldr	r3, [pc, #16]	; (ad5c <nm_spi_write_reg+0x14>)
    ad4c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ad4e:	2300      	movs	r3, #0
    ad50:	2801      	cmp	r0, #1
    ad52:	d000      	beq.n	ad56 <nm_spi_write_reg+0xe>
	else s8Ret = M2M_ERR_BUS_FAIL;
    ad54:	3b06      	subs	r3, #6

	return s8Ret;
}
    ad56:	0018      	movs	r0, r3
    ad58:	bd10      	pop	{r4, pc}
    ad5a:	46c0      	nop			; (mov r8, r8)
    ad5c:	0000aa6d 	.word	0x0000aa6d

0000ad60 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    ad60:	b510      	push	{r4, lr}
    ad62:	b082      	sub	sp, #8
	uint32 chipid;
	uint32 reg = 0;
    ad64:	2300      	movs	r3, #0
    ad66:	9300      	str	r3, [sp, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    ad68:	4a35      	ldr	r2, [pc, #212]	; (ae40 <nm_spi_init+0xe0>)
    ad6a:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    ad6c:	4669      	mov	r1, sp
    ad6e:	4835      	ldr	r0, [pc, #212]	; (ae44 <nm_spi_init+0xe4>)
    ad70:	4b35      	ldr	r3, [pc, #212]	; (ae48 <nm_spi_init+0xe8>)
    ad72:	4798      	blx	r3
    ad74:	2800      	cmp	r0, #0
    ad76:	d11f      	bne.n	adb8 <nm_spi_init+0x58>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    ad78:	2201      	movs	r2, #1
    ad7a:	4b31      	ldr	r3, [pc, #196]	; (ae40 <nm_spi_init+0xe0>)
    ad7c:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    ad7e:	4a33      	ldr	r2, [pc, #204]	; (ae4c <nm_spi_init+0xec>)
    ad80:	4933      	ldr	r1, [pc, #204]	; (ae50 <nm_spi_init+0xf0>)
    ad82:	4834      	ldr	r0, [pc, #208]	; (ae54 <nm_spi_init+0xf4>)
    ad84:	4b34      	ldr	r3, [pc, #208]	; (ae58 <nm_spi_init+0xf8>)
    ad86:	4798      	blx	r3
    ad88:	4834      	ldr	r0, [pc, #208]	; (ae5c <nm_spi_init+0xfc>)
    ad8a:	4b35      	ldr	r3, [pc, #212]	; (ae60 <nm_spi_init+0x100>)
    ad8c:	4798      	blx	r3
    ad8e:	200d      	movs	r0, #13
    ad90:	4b34      	ldr	r3, [pc, #208]	; (ae64 <nm_spi_init+0x104>)
    ad92:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    ad94:	4669      	mov	r1, sp
    ad96:	482b      	ldr	r0, [pc, #172]	; (ae44 <nm_spi_init+0xe4>)
    ad98:	4b2b      	ldr	r3, [pc, #172]	; (ae48 <nm_spi_init+0xe8>)
    ad9a:	4798      	blx	r3
    ad9c:	1e04      	subs	r4, r0, #0
    ad9e:	d10b      	bne.n	adb8 <nm_spi_init+0x58>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    ada0:	4a31      	ldr	r2, [pc, #196]	; (ae68 <nm_spi_init+0x108>)
    ada2:	492b      	ldr	r1, [pc, #172]	; (ae50 <nm_spi_init+0xf0>)
    ada4:	482b      	ldr	r0, [pc, #172]	; (ae54 <nm_spi_init+0xf4>)
    ada6:	4b2c      	ldr	r3, [pc, #176]	; (ae58 <nm_spi_init+0xf8>)
    ada8:	4798      	blx	r3
    adaa:	4830      	ldr	r0, [pc, #192]	; (ae6c <nm_spi_init+0x10c>)
    adac:	4b2c      	ldr	r3, [pc, #176]	; (ae60 <nm_spi_init+0x100>)
    adae:	4798      	blx	r3
    adb0:	200d      	movs	r0, #13
    adb2:	4b2c      	ldr	r3, [pc, #176]	; (ae64 <nm_spi_init+0x104>)
    adb4:	4798      	blx	r3
			return 0;
    adb6:	e03f      	b.n	ae38 <nm_spi_init+0xd8>
		}
	}
	if(gu8Crc_off == 0)
    adb8:	4b21      	ldr	r3, [pc, #132]	; (ae40 <nm_spi_init+0xe0>)
    adba:	781b      	ldrb	r3, [r3, #0]
    adbc:	2b00      	cmp	r3, #0
    adbe:	d119      	bne.n	adf4 <nm_spi_init+0x94>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
		reg |= (0x5 << 4);
    adc0:	337c      	adds	r3, #124	; 0x7c
    adc2:	9900      	ldr	r1, [sp, #0]
    adc4:	4399      	bics	r1, r3
    adc6:	3b2c      	subs	r3, #44	; 0x2c
    adc8:	4319      	orrs	r1, r3
    adca:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    adcc:	481d      	ldr	r0, [pc, #116]	; (ae44 <nm_spi_init+0xe4>)
    adce:	4b28      	ldr	r3, [pc, #160]	; (ae70 <nm_spi_init+0x110>)
    add0:	4798      	blx	r3
    add2:	1e04      	subs	r4, r0, #0
    add4:	d10b      	bne.n	adee <nm_spi_init+0x8e>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    add6:	4a27      	ldr	r2, [pc, #156]	; (ae74 <nm_spi_init+0x114>)
    add8:	491d      	ldr	r1, [pc, #116]	; (ae50 <nm_spi_init+0xf0>)
    adda:	481e      	ldr	r0, [pc, #120]	; (ae54 <nm_spi_init+0xf4>)
    addc:	4b1e      	ldr	r3, [pc, #120]	; (ae58 <nm_spi_init+0xf8>)
    adde:	4798      	blx	r3
    ade0:	4825      	ldr	r0, [pc, #148]	; (ae78 <nm_spi_init+0x118>)
    ade2:	4b1f      	ldr	r3, [pc, #124]	; (ae60 <nm_spi_init+0x100>)
    ade4:	4798      	blx	r3
    ade6:	200d      	movs	r0, #13
    ade8:	4b1e      	ldr	r3, [pc, #120]	; (ae64 <nm_spi_init+0x104>)
    adea:	4798      	blx	r3
			return 0;
    adec:	e024      	b.n	ae38 <nm_spi_init+0xd8>
		}
		gu8Crc_off = 1;
    adee:	2201      	movs	r2, #1
    adf0:	4b13      	ldr	r3, [pc, #76]	; (ae40 <nm_spi_init+0xe0>)
    adf2:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    adf4:	a901      	add	r1, sp, #4
    adf6:	2080      	movs	r0, #128	; 0x80
    adf8:	0140      	lsls	r0, r0, #5
    adfa:	4b13      	ldr	r3, [pc, #76]	; (ae48 <nm_spi_init+0xe8>)
    adfc:	4798      	blx	r3
    adfe:	2800      	cmp	r0, #0
    ae00:	d10d      	bne.n	ae1e <nm_spi_init+0xbe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    ae02:	4a1e      	ldr	r2, [pc, #120]	; (ae7c <nm_spi_init+0x11c>)
    ae04:	4912      	ldr	r1, [pc, #72]	; (ae50 <nm_spi_init+0xf0>)
    ae06:	4813      	ldr	r0, [pc, #76]	; (ae54 <nm_spi_init+0xf4>)
    ae08:	4b13      	ldr	r3, [pc, #76]	; (ae58 <nm_spi_init+0xf8>)
    ae0a:	4798      	blx	r3
    ae0c:	481c      	ldr	r0, [pc, #112]	; (ae80 <nm_spi_init+0x120>)
    ae0e:	4b14      	ldr	r3, [pc, #80]	; (ae60 <nm_spi_init+0x100>)
    ae10:	4798      	blx	r3
    ae12:	200d      	movs	r0, #13
    ae14:	4b13      	ldr	r3, [pc, #76]	; (ae64 <nm_spi_init+0x104>)
    ae16:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    ae18:	2406      	movs	r4, #6
    ae1a:	4264      	negs	r4, r4
    ae1c:	e00c      	b.n	ae38 <nm_spi_init+0xd8>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    ae1e:	4c09      	ldr	r4, [pc, #36]	; (ae44 <nm_spi_init+0xe4>)
    ae20:	0020      	movs	r0, r4
    ae22:	4b18      	ldr	r3, [pc, #96]	; (ae84 <nm_spi_init+0x124>)
    ae24:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    ae26:	2370      	movs	r3, #112	; 0x70
    ae28:	0001      	movs	r1, r0
    ae2a:	4399      	bics	r1, r3
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    ae2c:	3b20      	subs	r3, #32
    ae2e:	4319      	orrs	r1, r3
    ae30:	0020      	movs	r0, r4
    ae32:	4b15      	ldr	r3, [pc, #84]	; (ae88 <nm_spi_init+0x128>)
    ae34:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
    ae36:	2400      	movs	r4, #0
}
    ae38:	0020      	movs	r0, r4
    ae3a:	b002      	add	sp, #8
    ae3c:	bd10      	pop	{r4, pc}
    ae3e:	46c0      	nop			; (mov r8, r8)
    ae40:	200000b0 	.word	0x200000b0
    ae44:	0000e824 	.word	0x0000e824
    ae48:	0000ab7d 	.word	0x0000ab7d
    ae4c:	000004c7 	.word	0x000004c7
    ae50:	00013764 	.word	0x00013764
    ae54:	00012e7c 	.word	0x00012e7c
    ae58:	0001189d 	.word	0x0001189d
    ae5c:	000139cc 	.word	0x000139cc
    ae60:	000119bd 	.word	0x000119bd
    ae64:	000118d1 	.word	0x000118d1
    ae68:	000004ca 	.word	0x000004ca
    ae6c:	00013a1c 	.word	0x00013a1c
    ae70:	0000aa6d 	.word	0x0000aa6d
    ae74:	000004d4 	.word	0x000004d4
    ae78:	00013a48 	.word	0x00013a48
    ae7c:	000004de 	.word	0x000004de
    ae80:	00013a7c 	.word	0x00013a7c
    ae84:	0000ad1d 	.word	0x0000ad1d
    ae88:	0000ad49 	.word	0x0000ad49

0000ae8c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    ae8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae8e:	465f      	mov	r7, fp
    ae90:	4656      	mov	r6, sl
    ae92:	464d      	mov	r5, r9
    ae94:	4644      	mov	r4, r8
    ae96:	b4f0      	push	{r4, r5, r6, r7}
    ae98:	b087      	sub	sp, #28
    ae9a:	9002      	str	r0, [sp, #8]
    ae9c:	9103      	str	r1, [sp, #12]
    ae9e:	0016      	movs	r6, r2
    aea0:	250a      	movs	r5, #10
	uint8 cmd = CMD_DMA_EXT_READ;
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    aea2:	2300      	movs	r3, #0
    aea4:	469b      	mov	fp, r3
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
		single_byte_workaround = 1;
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    aea6:	2400      	movs	r4, #0
    aea8:	4b3e      	ldr	r3, [pc, #248]	; (afa4 <nm_spi_read_block+0x118>)
    aeaa:	4698      	mov	r8, r3
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    aeac:	46a9      	mov	r9, r5

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    aeae:	2e01      	cmp	r6, #1
    aeb0:	d102      	bne.n	aeb8 <nm_spi_read_block+0x2c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
		single_byte_workaround = 1;
    aeb2:	2301      	movs	r3, #1
    aeb4:	469b      	mov	fp, r3
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    aeb6:	3601      	adds	r6, #1
		single_byte_workaround = 1;
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    aeb8:	9400      	str	r4, [sp, #0]
    aeba:	0033      	movs	r3, r6
    aebc:	0022      	movs	r2, r4
    aebe:	9d02      	ldr	r5, [sp, #8]
    aec0:	0029      	movs	r1, r5
    aec2:	20c8      	movs	r0, #200	; 0xc8
    aec4:	47c0      	blx	r8
	if (result != N_OK) {
    aec6:	2801      	cmp	r0, #1
    aec8:	d00b      	beq.n	aee2 <nm_spi_read_block+0x56>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    aeca:	4a37      	ldr	r2, [pc, #220]	; (afa8 <nm_spi_read_block+0x11c>)
    aecc:	4937      	ldr	r1, [pc, #220]	; (afac <nm_spi_read_block+0x120>)
    aece:	4838      	ldr	r0, [pc, #224]	; (afb0 <nm_spi_read_block+0x124>)
    aed0:	4f38      	ldr	r7, [pc, #224]	; (afb4 <nm_spi_read_block+0x128>)
    aed2:	47b8      	blx	r7
    aed4:	0029      	movs	r1, r5
    aed6:	4838      	ldr	r0, [pc, #224]	; (afb8 <nm_spi_read_block+0x12c>)
    aed8:	47b8      	blx	r7
    aeda:	200d      	movs	r0, #13
    aedc:	4b37      	ldr	r3, [pc, #220]	; (afbc <nm_spi_read_block+0x130>)
    aede:	4798      	blx	r3
    aee0:	e032      	b.n	af48 <nm_spi_read_block+0xbc>
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    aee2:	20c8      	movs	r0, #200	; 0xc8
    aee4:	4b36      	ldr	r3, [pc, #216]	; (afc0 <nm_spi_read_block+0x134>)
    aee6:	4798      	blx	r3
	if (result != N_OK) {
    aee8:	2801      	cmp	r0, #1
    aeea:	d00b      	beq.n	af04 <nm_spi_read_block+0x78>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    aeec:	4a35      	ldr	r2, [pc, #212]	; (afc4 <nm_spi_read_block+0x138>)
    aeee:	492f      	ldr	r1, [pc, #188]	; (afac <nm_spi_read_block+0x120>)
    aef0:	482f      	ldr	r0, [pc, #188]	; (afb0 <nm_spi_read_block+0x124>)
    aef2:	4f30      	ldr	r7, [pc, #192]	; (afb4 <nm_spi_read_block+0x128>)
    aef4:	47b8      	blx	r7
    aef6:	9902      	ldr	r1, [sp, #8]
    aef8:	4833      	ldr	r0, [pc, #204]	; (afc8 <nm_spi_read_block+0x13c>)
    aefa:	47b8      	blx	r7
    aefc:	200d      	movs	r0, #13
    aefe:	4b2f      	ldr	r3, [pc, #188]	; (afbc <nm_spi_read_block+0x130>)
    af00:	4798      	blx	r3
    af02:	e021      	b.n	af48 <nm_spi_read_block+0xbc>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    af04:	465b      	mov	r3, fp
    af06:	2b00      	cmp	r3, #0
    af08:	d009      	beq.n	af1e <nm_spi_read_block+0x92>
	{
		result = spi_data_read(tmp, size,0);
    af0a:	af05      	add	r7, sp, #20
    af0c:	0022      	movs	r2, r4
    af0e:	0031      	movs	r1, r6
    af10:	0038      	movs	r0, r7
    af12:	4b2e      	ldr	r3, [pc, #184]	; (afcc <nm_spi_read_block+0x140>)
    af14:	4798      	blx	r3
		buf[0] = tmp[0];
    af16:	783b      	ldrb	r3, [r7, #0]
    af18:	9a03      	ldr	r2, [sp, #12]
    af1a:	7013      	strb	r3, [r2, #0]
    af1c:	e004      	b.n	af28 <nm_spi_read_block+0x9c>
	}
	else
		result = spi_data_read(buf, size,0);
    af1e:	0022      	movs	r2, r4
    af20:	0031      	movs	r1, r6
    af22:	9803      	ldr	r0, [sp, #12]
    af24:	4b29      	ldr	r3, [pc, #164]	; (afcc <nm_spi_read_block+0x140>)
    af26:	4798      	blx	r3

	if (result != N_OK) {
    af28:	2801      	cmp	r0, #1
    af2a:	d00b      	beq.n	af44 <nm_spi_read_block+0xb8>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    af2c:	4a28      	ldr	r2, [pc, #160]	; (afd0 <nm_spi_read_block+0x144>)
    af2e:	491f      	ldr	r1, [pc, #124]	; (afac <nm_spi_read_block+0x120>)
    af30:	481f      	ldr	r0, [pc, #124]	; (afb0 <nm_spi_read_block+0x124>)
    af32:	4b20      	ldr	r3, [pc, #128]	; (afb4 <nm_spi_read_block+0x128>)
    af34:	4798      	blx	r3
    af36:	4827      	ldr	r0, [pc, #156]	; (afd4 <nm_spi_read_block+0x148>)
    af38:	4b27      	ldr	r3, [pc, #156]	; (afd8 <nm_spi_read_block+0x14c>)
    af3a:	4798      	blx	r3
    af3c:	200d      	movs	r0, #13
    af3e:	4b1f      	ldr	r3, [pc, #124]	; (afbc <nm_spi_read_block+0x130>)
    af40:	4798      	blx	r3
    af42:	e001      	b.n	af48 <nm_spi_read_block+0xbc>
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    af44:	2000      	movs	r0, #0
    af46:	e025      	b.n	af94 <nm_spi_read_block+0x108>
#endif

_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    af48:	2001      	movs	r0, #1
    af4a:	4f24      	ldr	r7, [pc, #144]	; (afdc <nm_spi_read_block+0x150>)
    af4c:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    af4e:	9400      	str	r4, [sp, #0]
    af50:	0023      	movs	r3, r4
    af52:	0022      	movs	r2, r4
    af54:	0021      	movs	r1, r4
    af56:	20cf      	movs	r0, #207	; 0xcf
    af58:	4d12      	ldr	r5, [pc, #72]	; (afa4 <nm_spi_read_block+0x118>)
    af5a:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    af5c:	20cf      	movs	r0, #207	; 0xcf
    af5e:	4b18      	ldr	r3, [pc, #96]	; (afc0 <nm_spi_read_block+0x134>)
    af60:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    af62:	4a1f      	ldr	r2, [pc, #124]	; (afe0 <nm_spi_read_block+0x154>)
    af64:	4911      	ldr	r1, [pc, #68]	; (afac <nm_spi_read_block+0x120>)
    af66:	4812      	ldr	r0, [pc, #72]	; (afb0 <nm_spi_read_block+0x124>)
    af68:	4b12      	ldr	r3, [pc, #72]	; (afb4 <nm_spi_read_block+0x128>)
    af6a:	469a      	mov	sl, r3
    af6c:	4798      	blx	r3
    af6e:	0033      	movs	r3, r6
    af70:	9a02      	ldr	r2, [sp, #8]
    af72:	4649      	mov	r1, r9
    af74:	481b      	ldr	r0, [pc, #108]	; (afe4 <nm_spi_read_block+0x158>)
    af76:	47d0      	blx	sl
    af78:	200d      	movs	r0, #13
    af7a:	4b10      	ldr	r3, [pc, #64]	; (afbc <nm_spi_read_block+0x130>)
    af7c:	4798      	blx	r3
		nm_bsp_sleep(1);
    af7e:	2001      	movs	r0, #1
    af80:	47b8      	blx	r7
    af82:	2301      	movs	r3, #1
    af84:	425b      	negs	r3, r3
    af86:	469c      	mov	ip, r3
    af88:	44e1      	add	r9, ip
		retry--;
		if(retry) goto _RETRY_;
    af8a:	464b      	mov	r3, r9
    af8c:	2b00      	cmp	r3, #0
    af8e:	d18e      	bne.n	aeae <nm_spi_read_block+0x22>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    af90:	2006      	movs	r0, #6
    af92:	4240      	negs	r0, r0

	return s8Ret;
}
    af94:	b007      	add	sp, #28
    af96:	bc3c      	pop	{r2, r3, r4, r5}
    af98:	4690      	mov	r8, r2
    af9a:	4699      	mov	r9, r3
    af9c:	46a2      	mov	sl, r4
    af9e:	46ab      	mov	fp, r5
    afa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    afa2:	46c0      	nop			; (mov r8, r8)
    afa4:	0000a6bd 	.word	0x0000a6bd
    afa8:	0000045d 	.word	0x0000045d
    afac:	00013df0 	.word	0x00013df0
    afb0:	00012e7c 	.word	0x00012e7c
    afb4:	0001189d 	.word	0x0001189d
    afb8:	00013aa0 	.word	0x00013aa0
    afbc:	000118d1 	.word	0x000118d1
    afc0:	0000a861 	.word	0x0000a861
    afc4:	00000463 	.word	0x00000463
    afc8:	00013ad0 	.word	0x00013ad0
    afcc:	0000a929 	.word	0x0000a929
    afd0:	00000473 	.word	0x00000473
    afd4:	00013b08 	.word	0x00013b08
    afd8:	000119bd 	.word	0x000119bd
    afdc:	00008aed 	.word	0x00008aed
    afe0:	00000484 	.word	0x00000484
    afe4:	00013b30 	.word	0x00013b30

0000afe8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    afe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    afea:	465f      	mov	r7, fp
    afec:	4656      	mov	r6, sl
    afee:	464d      	mov	r5, r9
    aff0:	4644      	mov	r4, r8
    aff2:	b4f0      	push	{r4, r5, r6, r7}
    aff4:	b089      	sub	sp, #36	; 0x24
    aff6:	9004      	str	r0, [sp, #16]
    aff8:	4688      	mov	r8, r1
    affa:	9203      	str	r2, [sp, #12]
    affc:	270a      	movs	r7, #10
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
		size = 2;

	result = spi_cmd(cmd, addr, 0, size,0);
    affe:	2600      	movs	r6, #0
    b000:	4b89      	ldr	r3, [pc, #548]	; (b228 <nm_spi_write_block+0x240>)
    b002:	469a      	mov	sl, r3
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    b004:	46b9      	mov	r9, r7
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    b006:	9b03      	ldr	r3, [sp, #12]
    b008:	2b01      	cmp	r3, #1
    b00a:	d101      	bne.n	b010 <nm_spi_write_block+0x28>
		size = 2;
    b00c:	3301      	adds	r3, #1
    b00e:	9303      	str	r3, [sp, #12]

	result = spi_cmd(cmd, addr, 0, size,0);
    b010:	9600      	str	r6, [sp, #0]
    b012:	9b03      	ldr	r3, [sp, #12]
    b014:	0032      	movs	r2, r6
    b016:	9d04      	ldr	r5, [sp, #16]
    b018:	0029      	movs	r1, r5
    b01a:	20c7      	movs	r0, #199	; 0xc7
    b01c:	47d0      	blx	sl
	if (result != N_OK) {
    b01e:	2801      	cmp	r0, #1
    b020:	d00b      	beq.n	b03a <nm_spi_write_block+0x52>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    b022:	4a82      	ldr	r2, [pc, #520]	; (b22c <nm_spi_write_block+0x244>)
    b024:	4982      	ldr	r1, [pc, #520]	; (b230 <nm_spi_write_block+0x248>)
    b026:	4883      	ldr	r0, [pc, #524]	; (b234 <nm_spi_write_block+0x24c>)
    b028:	4c83      	ldr	r4, [pc, #524]	; (b238 <nm_spi_write_block+0x250>)
    b02a:	47a0      	blx	r4
    b02c:	0029      	movs	r1, r5
    b02e:	4883      	ldr	r0, [pc, #524]	; (b23c <nm_spi_write_block+0x254>)
    b030:	47a0      	blx	r4
    b032:	200d      	movs	r0, #13
    b034:	4b82      	ldr	r3, [pc, #520]	; (b240 <nm_spi_write_block+0x258>)
    b036:	4798      	blx	r3
    b038:	e0c9      	b.n	b1ce <nm_spi_write_block+0x1e6>
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
    b03a:	20c7      	movs	r0, #199	; 0xc7
    b03c:	4b81      	ldr	r3, [pc, #516]	; (b244 <nm_spi_write_block+0x25c>)
    b03e:	4798      	blx	r3
	if (result != N_OK) {
    b040:	2801      	cmp	r0, #1
    b042:	d00c      	beq.n	b05e <nm_spi_write_block+0x76>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    b044:	22f4      	movs	r2, #244	; 0xf4
    b046:	0092      	lsls	r2, r2, #2
    b048:	4979      	ldr	r1, [pc, #484]	; (b230 <nm_spi_write_block+0x248>)
    b04a:	487a      	ldr	r0, [pc, #488]	; (b234 <nm_spi_write_block+0x24c>)
    b04c:	4c7a      	ldr	r4, [pc, #488]	; (b238 <nm_spi_write_block+0x250>)
    b04e:	47a0      	blx	r4
    b050:	9904      	ldr	r1, [sp, #16]
    b052:	487d      	ldr	r0, [pc, #500]	; (b248 <nm_spi_write_block+0x260>)
    b054:	47a0      	blx	r4
    b056:	200d      	movs	r0, #13
    b058:	4b79      	ldr	r3, [pc, #484]	; (b240 <nm_spi_write_block+0x258>)
    b05a:	4798      	blx	r3
    b05c:	e0b7      	b.n	b1ce <nm_spi_write_block+0x1e6>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
    b05e:	ab07      	add	r3, sp, #28
    b060:	801e      	strh	r6, [r3, #0]
    b062:	9c03      	ldr	r4, [sp, #12]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    b064:	0037      	movs	r7, r6
    b066:	2380      	movs	r3, #128	; 0x80
    b068:	019b      	lsls	r3, r3, #6
    b06a:	469b      	mov	fp, r3
    b06c:	466a      	mov	r2, sp
    b06e:	82d3      	strh	r3, [r2, #22]
    b070:	1c25      	adds	r5, r4, #0
    b072:	455c      	cmp	r4, fp
    b074:	d901      	bls.n	b07a <nm_spi_write_block+0x92>
    b076:	466b      	mov	r3, sp
    b078:	8add      	ldrh	r5, [r3, #22]
    b07a:	b2ad      	uxth	r5, r5

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
    b07c:	2f00      	cmp	r7, #0
    b07e:	d104      	bne.n	b08a <nm_spi_write_block+0xa2>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
    b080:	2303      	movs	r3, #3
		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
			if (sz <= DATA_PKT_SZ)
    b082:	455c      	cmp	r4, fp
    b084:	d906      	bls.n	b094 <nm_spi_write_block+0xac>
				order = 0x3;
			else
				order = 0x1;
    b086:	3b02      	subs	r3, #2
    b088:	e004      	b.n	b094 <nm_spi_write_block+0xac>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
    b08a:	0033      	movs	r3, r6
    b08c:	465a      	mov	r2, fp
    b08e:	42a2      	cmp	r2, r4
    b090:	4173      	adcs	r3, r6
    b092:	3302      	adds	r3, #2
		}
		cmd |= order;
    b094:	200b      	movs	r0, #11
    b096:	aa04      	add	r2, sp, #16
    b098:	4694      	mov	ip, r2
    b09a:	4460      	add	r0, ip
    b09c:	2210      	movs	r2, #16
    b09e:	4252      	negs	r2, r2
    b0a0:	4313      	orrs	r3, r2
    b0a2:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    b0a4:	2101      	movs	r1, #1
    b0a6:	4b69      	ldr	r3, [pc, #420]	; (b24c <nm_spi_write_block+0x264>)
    b0a8:	4798      	blx	r3
    b0aa:	2800      	cmp	r0, #0
    b0ac:	d00c      	beq.n	b0c8 <nm_spi_write_block+0xe0>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    b0ae:	22d4      	movs	r2, #212	; 0xd4
    b0b0:	0092      	lsls	r2, r2, #2
    b0b2:	4967      	ldr	r1, [pc, #412]	; (b250 <nm_spi_write_block+0x268>)
    b0b4:	485f      	ldr	r0, [pc, #380]	; (b234 <nm_spi_write_block+0x24c>)
    b0b6:	4b60      	ldr	r3, [pc, #384]	; (b238 <nm_spi_write_block+0x250>)
    b0b8:	4798      	blx	r3
    b0ba:	4866      	ldr	r0, [pc, #408]	; (b254 <nm_spi_write_block+0x26c>)
    b0bc:	4b66      	ldr	r3, [pc, #408]	; (b258 <nm_spi_write_block+0x270>)
    b0be:	4798      	blx	r3
    b0c0:	200d      	movs	r0, #13
    b0c2:	4b5f      	ldr	r3, [pc, #380]	; (b240 <nm_spi_write_block+0x258>)
    b0c4:	4798      	blx	r3
    b0c6:	e059      	b.n	b17c <nm_spi_write_block+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    b0c8:	4643      	mov	r3, r8
    b0ca:	19d8      	adds	r0, r3, r7
    b0cc:	0029      	movs	r1, r5
    b0ce:	4b5f      	ldr	r3, [pc, #380]	; (b24c <nm_spi_write_block+0x264>)
    b0d0:	4798      	blx	r3
    b0d2:	2800      	cmp	r0, #0
    b0d4:	d00b      	beq.n	b0ee <nm_spi_write_block+0x106>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    b0d6:	4a61      	ldr	r2, [pc, #388]	; (b25c <nm_spi_write_block+0x274>)
    b0d8:	495d      	ldr	r1, [pc, #372]	; (b250 <nm_spi_write_block+0x268>)
    b0da:	4856      	ldr	r0, [pc, #344]	; (b234 <nm_spi_write_block+0x24c>)
    b0dc:	4b56      	ldr	r3, [pc, #344]	; (b238 <nm_spi_write_block+0x250>)
    b0de:	4798      	blx	r3
    b0e0:	485f      	ldr	r0, [pc, #380]	; (b260 <nm_spi_write_block+0x278>)
    b0e2:	4b5d      	ldr	r3, [pc, #372]	; (b258 <nm_spi_write_block+0x270>)
    b0e4:	4798      	blx	r3
    b0e6:	200d      	movs	r0, #13
    b0e8:	4b55      	ldr	r3, [pc, #340]	; (b240 <nm_spi_write_block+0x258>)
    b0ea:	4798      	blx	r3
    b0ec:	e046      	b.n	b17c <nm_spi_write_block+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    b0ee:	4b5d      	ldr	r3, [pc, #372]	; (b264 <nm_spi_write_block+0x27c>)
    b0f0:	781b      	ldrb	r3, [r3, #0]
    b0f2:	2b00      	cmp	r3, #0
    b0f4:	d111      	bne.n	b11a <nm_spi_write_block+0x132>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    b0f6:	2102      	movs	r1, #2
    b0f8:	a807      	add	r0, sp, #28
    b0fa:	4b54      	ldr	r3, [pc, #336]	; (b24c <nm_spi_write_block+0x264>)
    b0fc:	4798      	blx	r3
    b0fe:	2800      	cmp	r0, #0
    b100:	d00b      	beq.n	b11a <nm_spi_write_block+0x132>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    b102:	4a59      	ldr	r2, [pc, #356]	; (b268 <nm_spi_write_block+0x280>)
    b104:	4952      	ldr	r1, [pc, #328]	; (b250 <nm_spi_write_block+0x268>)
    b106:	484b      	ldr	r0, [pc, #300]	; (b234 <nm_spi_write_block+0x24c>)
    b108:	4b4b      	ldr	r3, [pc, #300]	; (b238 <nm_spi_write_block+0x250>)
    b10a:	4798      	blx	r3
    b10c:	4857      	ldr	r0, [pc, #348]	; (b26c <nm_spi_write_block+0x284>)
    b10e:	4b52      	ldr	r3, [pc, #328]	; (b258 <nm_spi_write_block+0x270>)
    b110:	4798      	blx	r3
    b112:	200d      	movs	r0, #13
    b114:	4b4a      	ldr	r3, [pc, #296]	; (b240 <nm_spi_write_block+0x258>)
    b116:	4798      	blx	r3
    b118:	e030      	b.n	b17c <nm_spi_write_block+0x194>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
    b11a:	19ef      	adds	r7, r5, r7
    b11c:	b23f      	sxth	r7, r7
		sz -= nbytes;
    b11e:	1b64      	subs	r4, r4, r5
    b120:	b2a4      	uxth	r4, r4
	} while (sz);
    b122:	2c00      	cmp	r4, #0
    b124:	d1a4      	bne.n	b070 <nm_spi_write_block+0x88>
    b126:	e036      	b.n	b196 <nm_spi_write_block+0x1ae>
		len = 2;
	else
		len = 3;

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    b128:	223c      	movs	r2, #60	; 0x3c
    b12a:	32ff      	adds	r2, #255	; 0xff
    b12c:	4950      	ldr	r1, [pc, #320]	; (b270 <nm_spi_write_block+0x288>)
    b12e:	4841      	ldr	r0, [pc, #260]	; (b234 <nm_spi_write_block+0x24c>)
    b130:	4b41      	ldr	r3, [pc, #260]	; (b238 <nm_spi_write_block+0x250>)
    b132:	4798      	blx	r3
    b134:	484f      	ldr	r0, [pc, #316]	; (b274 <nm_spi_write_block+0x28c>)
    b136:	4b48      	ldr	r3, [pc, #288]	; (b258 <nm_spi_write_block+0x270>)
    b138:	4798      	blx	r3
    b13a:	200d      	movs	r0, #13
    b13c:	4b40      	ldr	r3, [pc, #256]	; (b240 <nm_spi_write_block+0x258>)
    b13e:	4798      	blx	r3
    b140:	e036      	b.n	b1b0 <nm_spi_write_block+0x1c8>
		result = N_FAIL;
		goto _fail_;
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    b142:	ab08      	add	r3, sp, #32
    b144:	191b      	adds	r3, r3, r4
    b146:	3b05      	subs	r3, #5
    b148:	781b      	ldrb	r3, [r3, #0]
    b14a:	2b00      	cmp	r3, #0
    b14c:	d106      	bne.n	b15c <nm_spi_write_block+0x174>
    b14e:	ab08      	add	r3, sp, #32
    b150:	469c      	mov	ip, r3
    b152:	4464      	add	r4, ip
    b154:	3c06      	subs	r4, #6
    b156:	7823      	ldrb	r3, [r4, #0]
    b158:	2bc3      	cmp	r3, #195	; 0xc3
    b15a:	d036      	beq.n	b1ca <nm_spi_write_block+0x1e2>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    b15c:	22a1      	movs	r2, #161	; 0xa1
    b15e:	0052      	lsls	r2, r2, #1
    b160:	4943      	ldr	r1, [pc, #268]	; (b270 <nm_spi_write_block+0x288>)
    b162:	4834      	ldr	r0, [pc, #208]	; (b234 <nm_spi_write_block+0x24c>)
    b164:	4c34      	ldr	r4, [pc, #208]	; (b238 <nm_spi_write_block+0x250>)
    b166:	47a0      	blx	r4
    b168:	a907      	add	r1, sp, #28
    b16a:	788b      	ldrb	r3, [r1, #2]
    b16c:	784a      	ldrb	r2, [r1, #1]
    b16e:	7809      	ldrb	r1, [r1, #0]
    b170:	4841      	ldr	r0, [pc, #260]	; (b278 <nm_spi_write_block+0x290>)
    b172:	47a0      	blx	r4
    b174:	200d      	movs	r0, #13
    b176:	4b32      	ldr	r3, [pc, #200]	; (b240 <nm_spi_write_block+0x258>)
    b178:	4798      	blx	r3
    b17a:	e019      	b.n	b1b0 <nm_spi_write_block+0x1c8>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    b17c:	22f8      	movs	r2, #248	; 0xf8
    b17e:	0092      	lsls	r2, r2, #2
    b180:	492b      	ldr	r1, [pc, #172]	; (b230 <nm_spi_write_block+0x248>)
    b182:	482c      	ldr	r0, [pc, #176]	; (b234 <nm_spi_write_block+0x24c>)
    b184:	4b2c      	ldr	r3, [pc, #176]	; (b238 <nm_spi_write_block+0x250>)
    b186:	4798      	blx	r3
    b188:	483c      	ldr	r0, [pc, #240]	; (b27c <nm_spi_write_block+0x294>)
    b18a:	4b33      	ldr	r3, [pc, #204]	; (b258 <nm_spi_write_block+0x270>)
    b18c:	4798      	blx	r3
    b18e:	200d      	movs	r0, #13
    b190:	4b2b      	ldr	r3, [pc, #172]	; (b240 <nm_spi_write_block+0x258>)
    b192:	4798      	blx	r3
    b194:	e01b      	b.n	b1ce <nm_spi_write_block+0x1e6>
{
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;

    if (!gu8Crc_off)
    b196:	4b33      	ldr	r3, [pc, #204]	; (b264 <nm_spi_write_block+0x27c>)
    b198:	781c      	ldrb	r4, [r3, #0]
		len = 2;
	else
		len = 3;
    b19a:	4263      	negs	r3, r4
    b19c:	4163      	adcs	r3, r4
    b19e:	2403      	movs	r4, #3
    b1a0:	1ae4      	subs	r4, r4, r3

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    b1a2:	b2a1      	uxth	r1, r4
    b1a4:	a807      	add	r0, sp, #28
    b1a6:	4b36      	ldr	r3, [pc, #216]	; (b280 <nm_spi_write_block+0x298>)
    b1a8:	4798      	blx	r3
    b1aa:	2800      	cmp	r0, #0
    b1ac:	d0c9      	beq.n	b142 <nm_spi_write_block+0x15a>
    b1ae:	e7bb      	b.n	b128 <nm_spi_write_block+0x140>
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    b1b0:	22fa      	movs	r2, #250	; 0xfa
    b1b2:	0092      	lsls	r2, r2, #2
    b1b4:	491e      	ldr	r1, [pc, #120]	; (b230 <nm_spi_write_block+0x248>)
    b1b6:	481f      	ldr	r0, [pc, #124]	; (b234 <nm_spi_write_block+0x24c>)
    b1b8:	4b1f      	ldr	r3, [pc, #124]	; (b238 <nm_spi_write_block+0x250>)
    b1ba:	4798      	blx	r3
    b1bc:	482f      	ldr	r0, [pc, #188]	; (b27c <nm_spi_write_block+0x294>)
    b1be:	4b26      	ldr	r3, [pc, #152]	; (b258 <nm_spi_write_block+0x270>)
    b1c0:	4798      	blx	r3
    b1c2:	200d      	movs	r0, #13
    b1c4:	4b1e      	ldr	r3, [pc, #120]	; (b240 <nm_spi_write_block+0x258>)
    b1c6:	4798      	blx	r3
    b1c8:	e001      	b.n	b1ce <nm_spi_write_block+0x1e6>
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    b1ca:	2000      	movs	r0, #0
    b1cc:	e025      	b.n	b21a <nm_spi_write_block+0x232>
	}
	
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    b1ce:	2001      	movs	r0, #1
    b1d0:	4c2c      	ldr	r4, [pc, #176]	; (b284 <nm_spi_write_block+0x29c>)
    b1d2:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    b1d4:	9600      	str	r6, [sp, #0]
    b1d6:	0033      	movs	r3, r6
    b1d8:	0032      	movs	r2, r6
    b1da:	0031      	movs	r1, r6
    b1dc:	20cf      	movs	r0, #207	; 0xcf
    b1de:	4d12      	ldr	r5, [pc, #72]	; (b228 <nm_spi_write_block+0x240>)
    b1e0:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    b1e2:	20cf      	movs	r0, #207	; 0xcf
    b1e4:	4b17      	ldr	r3, [pc, #92]	; (b244 <nm_spi_write_block+0x25c>)
    b1e6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    b1e8:	4a27      	ldr	r2, [pc, #156]	; (b288 <nm_spi_write_block+0x2a0>)
    b1ea:	4911      	ldr	r1, [pc, #68]	; (b230 <nm_spi_write_block+0x248>)
    b1ec:	4811      	ldr	r0, [pc, #68]	; (b234 <nm_spi_write_block+0x24c>)
    b1ee:	4d12      	ldr	r5, [pc, #72]	; (b238 <nm_spi_write_block+0x250>)
    b1f0:	47a8      	blx	r5
    b1f2:	9b03      	ldr	r3, [sp, #12]
    b1f4:	9a04      	ldr	r2, [sp, #16]
    b1f6:	4649      	mov	r1, r9
    b1f8:	4824      	ldr	r0, [pc, #144]	; (b28c <nm_spi_write_block+0x2a4>)
    b1fa:	47a8      	blx	r5
    b1fc:	200d      	movs	r0, #13
    b1fe:	4b10      	ldr	r3, [pc, #64]	; (b240 <nm_spi_write_block+0x258>)
    b200:	4798      	blx	r3
		nm_bsp_sleep(1);
    b202:	2001      	movs	r0, #1
    b204:	47a0      	blx	r4
    b206:	2301      	movs	r3, #1
    b208:	425b      	negs	r3, r3
    b20a:	469c      	mov	ip, r3
    b20c:	44e1      	add	r9, ip
		retry--;
		if(retry) goto _RETRY_;
    b20e:	464b      	mov	r3, r9
    b210:	2b00      	cmp	r3, #0
    b212:	d000      	beq.n	b216 <nm_spi_write_block+0x22e>
    b214:	e6f7      	b.n	b006 <nm_spi_write_block+0x1e>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    b216:	2006      	movs	r0, #6
    b218:	4240      	negs	r0, r0

	return s8Ret;
}
    b21a:	b009      	add	sp, #36	; 0x24
    b21c:	bc3c      	pop	{r2, r3, r4, r5}
    b21e:	4690      	mov	r8, r2
    b220:	4699      	mov	r9, r3
    b222:	46a2      	mov	sl, r4
    b224:	46ab      	mov	fp, r5
    b226:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b228:	0000a6bd 	.word	0x0000a6bd
    b22c:	000003ca 	.word	0x000003ca
    b230:	00013770 	.word	0x00013770
    b234:	00012e7c 	.word	0x00012e7c
    b238:	0001189d 	.word	0x0001189d
    b23c:	00013b4c 	.word	0x00013b4c
    b240:	000118d1 	.word	0x000118d1
    b244:	0000a861 	.word	0x0000a861
    b248:	00013b7c 	.word	0x00013b7c
    b24c:	0000a69d 	.word	0x0000a69d
    b250:	0001372c 	.word	0x0001372c
    b254:	00013bb4 	.word	0x00013bb4
    b258:	000119bd 	.word	0x000119bd
    b25c:	00000359 	.word	0x00000359
    b260:	00013bec 	.word	0x00013bec
    b264:	200000b0 	.word	0x200000b0
    b268:	00000363 	.word	0x00000363
    b26c:	00013c20 	.word	0x00013c20
    b270:	00013744 	.word	0x00013744
    b274:	00013c58 	.word	0x00013c58
    b278:	00013c78 	.word	0x00013c78
    b27c:	00013ca8 	.word	0x00013ca8
    b280:	0000a841 	.word	0x0000a841
    b284:	00008aed 	.word	0x00008aed
    b288:	000003f2 	.word	0x000003f2
    b28c:	00013b30 	.word	0x00013b30

0000b290 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    b290:	b5f0      	push	{r4, r5, r6, r7, lr}
    b292:	465f      	mov	r7, fp
    b294:	4656      	mov	r6, sl
    b296:	464d      	mov	r5, r9
    b298:	4644      	mov	r4, r8
    b29a:	b4f0      	push	{r4, r5, r6, r7}
    b29c:	b085      	sub	sp, #20
    b29e:	9001      	str	r0, [sp, #4]
    b2a0:	000e      	movs	r6, r1
    b2a2:	9202      	str	r2, [sp, #8]
    b2a4:	001d      	movs	r5, r3
    b2a6:	ab0e      	add	r3, sp, #56	; 0x38
    b2a8:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    b2aa:	2c00      	cmp	r4, #0
    b2ac:	d062      	beq.n	b374 <Socket_ReadSocketData+0xe4>
    b2ae:	0103      	lsls	r3, r0, #4
    b2b0:	4934      	ldr	r1, [pc, #208]	; (b384 <Socket_ReadSocketData+0xf4>)
    b2b2:	585b      	ldr	r3, [r3, r1]
    b2b4:	2b00      	cmp	r3, #0
    b2b6:	d05d      	beq.n	b374 <Socket_ReadSocketData+0xe4>
    b2b8:	0103      	lsls	r3, r0, #4
    b2ba:	18cb      	adds	r3, r1, r3
    b2bc:	889b      	ldrh	r3, [r3, #4]
    b2be:	b29b      	uxth	r3, r3
    b2c0:	2b00      	cmp	r3, #0
    b2c2:	d057      	beq.n	b374 <Socket_ReadSocketData+0xe4>
    b2c4:	0103      	lsls	r3, r0, #4
    b2c6:	18cb      	adds	r3, r1, r3
    b2c8:	7a9b      	ldrb	r3, [r3, #10]
    b2ca:	2b01      	cmp	r3, #1
    b2cc:	d152      	bne.n	b374 <Socket_ReadSocketData+0xe4>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    b2ce:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    b2d0:	0107      	lsls	r7, r0, #4
    b2d2:	468b      	mov	fp, r1
    b2d4:	44bb      	add	fp, r7
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    b2d6:	465b      	mov	r3, fp
    b2d8:	220a      	movs	r2, #10
    b2da:	4690      	mov	r8, r2
    b2dc:	44d8      	add	r8, fp
    b2de:	46ba      	mov	sl, r7
    b2e0:	9500      	str	r5, [sp, #0]
    b2e2:	9303      	str	r3, [sp, #12]
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    b2e4:	465b      	mov	r3, fp
    b2e6:	889b      	ldrh	r3, [r3, #4]
			if(s16Diff > 0)
    b2e8:	1ae3      	subs	r3, r4, r3
    b2ea:	b21b      	sxth	r3, r3
    b2ec:	2b00      	cmp	r3, #0
    b2ee:	dd04      	ble.n	b2fa <Socket_ReadSocketData+0x6a>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    b2f0:	9b03      	ldr	r3, [sp, #12]
    b2f2:	889d      	ldrh	r5, [r3, #4]
    b2f4:	b2ad      	uxth	r5, r5
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
    b2f6:	2300      	movs	r3, #0
    b2f8:	e001      	b.n	b2fe <Socket_ReadSocketData+0x6e>
    b2fa:	0025      	movs	r5, r4
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
    b2fc:	2301      	movs	r3, #1
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    b2fe:	4a21      	ldr	r2, [pc, #132]	; (b384 <Socket_ReadSocketData+0xf4>)
    b300:	4651      	mov	r1, sl
    b302:	5889      	ldr	r1, [r1, r2]
    b304:	002a      	movs	r2, r5
    b306:	9800      	ldr	r0, [sp, #0]
    b308:	4f1f      	ldr	r7, [pc, #124]	; (b388 <Socket_ReadSocketData+0xf8>)
    b30a:	47b8      	blx	r7
    b30c:	2800      	cmp	r0, #0
    b30e:	d125      	bne.n	b35c <Socket_ReadSocketData+0xcc>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    b310:	4b1c      	ldr	r3, [pc, #112]	; (b384 <Socket_ReadSocketData+0xf4>)
    b312:	4652      	mov	r2, sl
    b314:	58d3      	ldr	r3, [r2, r3]
    b316:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    b318:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    b31a:	88f3      	ldrh	r3, [r6, #6]
    b31c:	1b5b      	subs	r3, r3, r5
    b31e:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
    b320:	4b1a      	ldr	r3, [pc, #104]	; (b38c <Socket_ReadSocketData+0xfc>)
    b322:	681b      	ldr	r3, [r3, #0]
    b324:	2b00      	cmp	r3, #0
    b326:	d005      	beq.n	b334 <Socket_ReadSocketData+0xa4>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    b328:	4b18      	ldr	r3, [pc, #96]	; (b38c <Socket_ReadSocketData+0xfc>)
    b32a:	681b      	ldr	r3, [r3, #0]
    b32c:	0032      	movs	r2, r6
    b32e:	9902      	ldr	r1, [sp, #8]
    b330:	9801      	ldr	r0, [sp, #4]
    b332:	4798      	blx	r3

				u16ReadCount -= u16Read;
    b334:	1b64      	subs	r4, r4, r5
    b336:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    b338:	9b00      	ldr	r3, [sp, #0]
    b33a:	469c      	mov	ip, r3
    b33c:	44ac      	add	ip, r5
    b33e:	4663      	mov	r3, ip
    b340:	9300      	str	r3, [sp, #0]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    b342:	4643      	mov	r3, r8
    b344:	781b      	ldrb	r3, [r3, #0]
    b346:	2b00      	cmp	r3, #0
    b348:	d112      	bne.n	b370 <Socket_ReadSocketData+0xe0>
    b34a:	2c00      	cmp	r4, #0
    b34c:	d012      	beq.n	b374 <Socket_ReadSocketData+0xe4>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    b34e:	3301      	adds	r3, #1
    b350:	2200      	movs	r2, #0
    b352:	2100      	movs	r1, #0
    b354:	2000      	movs	r0, #0
    b356:	4c0c      	ldr	r4, [pc, #48]	; (b388 <Socket_ReadSocketData+0xf8>)
    b358:	47a0      	blx	r4
    b35a:	e00b      	b.n	b374 <Socket_ReadSocketData+0xe4>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    b35c:	480c      	ldr	r0, [pc, #48]	; (b390 <Socket_ReadSocketData+0x100>)
    b35e:	4d0d      	ldr	r5, [pc, #52]	; (b394 <Socket_ReadSocketData+0x104>)
    b360:	47a8      	blx	r5
    b362:	0021      	movs	r1, r4
    b364:	480c      	ldr	r0, [pc, #48]	; (b398 <Socket_ReadSocketData+0x108>)
    b366:	47a8      	blx	r5
    b368:	200d      	movs	r0, #13
    b36a:	4b0c      	ldr	r3, [pc, #48]	; (b39c <Socket_ReadSocketData+0x10c>)
    b36c:	4798      	blx	r3
				break;
    b36e:	e001      	b.n	b374 <Socket_ReadSocketData+0xe4>
			}
		}while(u16ReadCount != 0);
    b370:	2c00      	cmp	r4, #0
    b372:	d1b7      	bne.n	b2e4 <Socket_ReadSocketData+0x54>
	}
}
    b374:	b005      	add	sp, #20
    b376:	bc3c      	pop	{r2, r3, r4, r5}
    b378:	4690      	mov	r8, r2
    b37a:	4699      	mov	r9, r3
    b37c:	46a2      	mov	sl, r4
    b37e:	46ab      	mov	fp, r5
    b380:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b382:	46c0      	nop			; (mov r8, r8)
    b384:	20000334 	.word	0x20000334
    b388:	00009645 	.word	0x00009645
    b38c:	200003e4 	.word	0x200003e4
    b390:	00012ee0 	.word	0x00012ee0
    b394:	0001189d 	.word	0x0001189d
    b398:	00013dfc 	.word	0x00013dfc
    b39c:	000118d1 	.word	0x000118d1

0000b3a0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    b3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3a2:	464f      	mov	r7, r9
    b3a4:	4646      	mov	r6, r8
    b3a6:	b4c0      	push	{r6, r7}
    b3a8:	b09b      	sub	sp, #108	; 0x6c
    b3aa:	000d      	movs	r5, r1
    b3ac:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    b3ae:	2841      	cmp	r0, #65	; 0x41
    b3b0:	d001      	beq.n	b3b6 <m2m_ip_cb+0x16>
    b3b2:	2854      	cmp	r0, #84	; 0x54
    b3b4:	d11a      	bne.n	b3ec <m2m_ip_cb+0x4c>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    b3b6:	2300      	movs	r3, #0
    b3b8:	2204      	movs	r2, #4
    b3ba:	a909      	add	r1, sp, #36	; 0x24
    b3bc:	0020      	movs	r0, r4
    b3be:	4caf      	ldr	r4, [pc, #700]	; (b67c <m2m_ip_cb+0x2dc>)
    b3c0:	47a0      	blx	r4
    b3c2:	2800      	cmp	r0, #0
    b3c4:	d000      	beq.n	b3c8 <m2m_ip_cb+0x28>
    b3c6:	e153      	b.n	b670 <m2m_ip_cb+0x2d0>
		{
			strBind.status = strBindReply.s8Status;
    b3c8:	ab09      	add	r3, sp, #36	; 0x24
    b3ca:	785a      	ldrb	r2, [r3, #1]
    b3cc:	ab05      	add	r3, sp, #20
    b3ce:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    b3d0:	4bab      	ldr	r3, [pc, #684]	; (b680 <m2m_ip_cb+0x2e0>)
    b3d2:	681b      	ldr	r3, [r3, #0]
    b3d4:	2b00      	cmp	r3, #0
    b3d6:	d100      	bne.n	b3da <m2m_ip_cb+0x3a>
    b3d8:	e14a      	b.n	b670 <m2m_ip_cb+0x2d0>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    b3da:	4ba9      	ldr	r3, [pc, #676]	; (b680 <m2m_ip_cb+0x2e0>)
    b3dc:	681b      	ldr	r3, [r3, #0]
    b3de:	aa09      	add	r2, sp, #36	; 0x24
    b3e0:	2000      	movs	r0, #0
    b3e2:	5610      	ldrsb	r0, [r2, r0]
    b3e4:	aa05      	add	r2, sp, #20
    b3e6:	2101      	movs	r1, #1
    b3e8:	4798      	blx	r3
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
	{
    b3ea:	e141      	b.n	b670 <m2m_ip_cb+0x2d0>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    b3ec:	2842      	cmp	r0, #66	; 0x42
    b3ee:	d11a      	bne.n	b426 <m2m_ip_cb+0x86>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    b3f0:	2300      	movs	r3, #0
    b3f2:	2204      	movs	r2, #4
    b3f4:	a909      	add	r1, sp, #36	; 0x24
    b3f6:	0020      	movs	r0, r4
    b3f8:	4ca0      	ldr	r4, [pc, #640]	; (b67c <m2m_ip_cb+0x2dc>)
    b3fa:	47a0      	blx	r4
    b3fc:	2800      	cmp	r0, #0
    b3fe:	d000      	beq.n	b402 <m2m_ip_cb+0x62>
    b400:	e136      	b.n	b670 <m2m_ip_cb+0x2d0>
		{
			strListen.status = strListenReply.s8Status;
    b402:	ab09      	add	r3, sp, #36	; 0x24
    b404:	785a      	ldrb	r2, [r3, #1]
    b406:	ab05      	add	r3, sp, #20
    b408:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    b40a:	4b9d      	ldr	r3, [pc, #628]	; (b680 <m2m_ip_cb+0x2e0>)
    b40c:	681b      	ldr	r3, [r3, #0]
    b40e:	2b00      	cmp	r3, #0
    b410:	d100      	bne.n	b414 <m2m_ip_cb+0x74>
    b412:	e12d      	b.n	b670 <m2m_ip_cb+0x2d0>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    b414:	4b9a      	ldr	r3, [pc, #616]	; (b680 <m2m_ip_cb+0x2e0>)
    b416:	681b      	ldr	r3, [r3, #0]
    b418:	aa09      	add	r2, sp, #36	; 0x24
    b41a:	2000      	movs	r0, #0
    b41c:	5610      	ldrsb	r0, [r2, r0]
    b41e:	aa05      	add	r2, sp, #20
    b420:	2102      	movs	r1, #2
    b422:	4798      	blx	r3
    b424:	e124      	b.n	b670 <m2m_ip_cb+0x2d0>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    b426:	2843      	cmp	r0, #67	; 0x43
    b428:	d149      	bne.n	b4be <m2m_ip_cb+0x11e>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    b42a:	2300      	movs	r3, #0
    b42c:	220c      	movs	r2, #12
    b42e:	a905      	add	r1, sp, #20
    b430:	0020      	movs	r0, r4
    b432:	4c92      	ldr	r4, [pc, #584]	; (b67c <m2m_ip_cb+0x2dc>)
    b434:	47a0      	blx	r4
    b436:	2800      	cmp	r0, #0
    b438:	d000      	beq.n	b43c <m2m_ip_cb+0x9c>
    b43a:	e119      	b.n	b670 <m2m_ip_cb+0x2d0>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    b43c:	ab05      	add	r3, sp, #20
    b43e:	2209      	movs	r2, #9
    b440:	569a      	ldrsb	r2, [r3, r2]
    b442:	2a00      	cmp	r2, #0
    b444:	db24      	blt.n	b490 <m2m_ip_cb+0xf0>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    b446:	0018      	movs	r0, r3
    b448:	2108      	movs	r1, #8
    b44a:	5659      	ldrsb	r1, [r3, r1]
    b44c:	4c8d      	ldr	r4, [pc, #564]	; (b684 <m2m_ip_cb+0x2e4>)
    b44e:	0109      	lsls	r1, r1, #4
    b450:	1861      	adds	r1, r4, r1
    b452:	7ac9      	ldrb	r1, [r1, #11]
    b454:	b2c9      	uxtb	r1, r1
    b456:	0113      	lsls	r3, r2, #4
    b458:	18e3      	adds	r3, r4, r3
    b45a:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    b45c:	2101      	movs	r1, #1
    b45e:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    b460:	8941      	ldrh	r1, [r0, #10]
    b462:	3908      	subs	r1, #8
    b464:	b289      	uxth	r1, r1
    b466:	8119      	strh	r1, [r3, #8]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    b468:	4987      	ldr	r1, [pc, #540]	; (b688 <m2m_ip_cb+0x2e8>)
    b46a:	880b      	ldrh	r3, [r1, #0]
    b46c:	3301      	adds	r3, #1
    b46e:	b29b      	uxth	r3, r3
    b470:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    b472:	880b      	ldrh	r3, [r1, #0]
    b474:	b29b      	uxth	r3, r3
    b476:	2b00      	cmp	r3, #0
    b478:	d103      	bne.n	b482 <m2m_ip_cb+0xe2>
					++gu16SessionID;
    b47a:	880b      	ldrh	r3, [r1, #0]
    b47c:	3301      	adds	r3, #1
    b47e:	b29b      	uxth	r3, r3
    b480:	800b      	strh	r3, [r1, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    b482:	4b81      	ldr	r3, [pc, #516]	; (b688 <m2m_ip_cb+0x2e8>)
    b484:	8819      	ldrh	r1, [r3, #0]
    b486:	b289      	uxth	r1, r1
    b488:	0113      	lsls	r3, r2, #4
    b48a:	487e      	ldr	r0, [pc, #504]	; (b684 <m2m_ip_cb+0x2e4>)
    b48c:	18c3      	adds	r3, r0, r3
    b48e:	80d9      	strh	r1, [r3, #6]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    b490:	ab09      	add	r3, sp, #36	; 0x24
    b492:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    b494:	2202      	movs	r2, #2
    b496:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    b498:	aa05      	add	r2, sp, #20
    b49a:	8851      	ldrh	r1, [r2, #2]
    b49c:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    b49e:	9a06      	ldr	r2, [sp, #24]
    b4a0:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    b4a2:	4b77      	ldr	r3, [pc, #476]	; (b680 <m2m_ip_cb+0x2e0>)
    b4a4:	681b      	ldr	r3, [r3, #0]
    b4a6:	2b00      	cmp	r3, #0
    b4a8:	d100      	bne.n	b4ac <m2m_ip_cb+0x10c>
    b4aa:	e0e1      	b.n	b670 <m2m_ip_cb+0x2d0>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    b4ac:	4b74      	ldr	r3, [pc, #464]	; (b680 <m2m_ip_cb+0x2e0>)
    b4ae:	681b      	ldr	r3, [r3, #0]
    b4b0:	aa05      	add	r2, sp, #20
    b4b2:	2008      	movs	r0, #8
    b4b4:	5610      	ldrsb	r0, [r2, r0]
    b4b6:	aa09      	add	r2, sp, #36	; 0x24
    b4b8:	2104      	movs	r1, #4
    b4ba:	4798      	blx	r3
    b4bc:	e0d8      	b.n	b670 <m2m_ip_cb+0x2d0>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    b4be:	2844      	cmp	r0, #68	; 0x44
    b4c0:	d001      	beq.n	b4c6 <m2m_ip_cb+0x126>
    b4c2:	284b      	cmp	r0, #75	; 0x4b
    b4c4:	d125      	bne.n	b512 <m2m_ip_cb+0x172>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    b4c6:	2300      	movs	r3, #0
    b4c8:	2204      	movs	r2, #4
    b4ca:	a909      	add	r1, sp, #36	; 0x24
    b4cc:	0020      	movs	r0, r4
    b4ce:	4c6b      	ldr	r4, [pc, #428]	; (b67c <m2m_ip_cb+0x2dc>)
    b4d0:	47a0      	blx	r4
    b4d2:	2800      	cmp	r0, #0
    b4d4:	d000      	beq.n	b4d8 <m2m_ip_cb+0x138>
    b4d6:	e0cb      	b.n	b670 <m2m_ip_cb+0x2d0>
		{
			strConnMsg.sock		= strConnectReply.sock;
    b4d8:	ab09      	add	r3, sp, #36	; 0x24
    b4da:	2000      	movs	r0, #0
    b4dc:	5618      	ldrsb	r0, [r3, r0]
    b4de:	aa05      	add	r2, sp, #20
    b4e0:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    b4e2:	785b      	ldrb	r3, [r3, #1]
    b4e4:	b25b      	sxtb	r3, r3
    b4e6:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    b4e8:	2b00      	cmp	r3, #0
    b4ea:	d107      	bne.n	b4fc <m2m_ip_cb+0x15c>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    b4ec:	ab09      	add	r3, sp, #36	; 0x24
    b4ee:	885a      	ldrh	r2, [r3, #2]
    b4f0:	3a08      	subs	r2, #8
    b4f2:	b292      	uxth	r2, r2
    b4f4:	0103      	lsls	r3, r0, #4
    b4f6:	4963      	ldr	r1, [pc, #396]	; (b684 <m2m_ip_cb+0x2e4>)
    b4f8:	18cb      	adds	r3, r1, r3
    b4fa:	811a      	strh	r2, [r3, #8]
			}
			if(gpfAppSocketCb)
    b4fc:	4b60      	ldr	r3, [pc, #384]	; (b680 <m2m_ip_cb+0x2e0>)
    b4fe:	681b      	ldr	r3, [r3, #0]
    b500:	2b00      	cmp	r3, #0
    b502:	d100      	bne.n	b506 <m2m_ip_cb+0x166>
    b504:	e0b4      	b.n	b670 <m2m_ip_cb+0x2d0>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    b506:	4b5e      	ldr	r3, [pc, #376]	; (b680 <m2m_ip_cb+0x2e0>)
    b508:	681b      	ldr	r3, [r3, #0]
    b50a:	aa05      	add	r2, sp, #20
    b50c:	2105      	movs	r1, #5
    b50e:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    b510:	e0ae      	b.n	b670 <m2m_ip_cb+0x2d0>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    b512:	284a      	cmp	r0, #74	; 0x4a
    b514:	d115      	bne.n	b542 <m2m_ip_cb+0x1a2>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    b516:	2300      	movs	r3, #0
    b518:	2244      	movs	r2, #68	; 0x44
    b51a:	a909      	add	r1, sp, #36	; 0x24
    b51c:	0020      	movs	r0, r4
    b51e:	4c57      	ldr	r4, [pc, #348]	; (b67c <m2m_ip_cb+0x2dc>)
    b520:	47a0      	blx	r4
    b522:	2800      	cmp	r0, #0
    b524:	d000      	beq.n	b528 <m2m_ip_cb+0x188>
    b526:	e0a3      	b.n	b670 <m2m_ip_cb+0x2d0>
		{
			if(gpfAppResolveCb)
    b528:	4b58      	ldr	r3, [pc, #352]	; (b68c <m2m_ip_cb+0x2ec>)
    b52a:	681b      	ldr	r3, [r3, #0]
    b52c:	2b00      	cmp	r3, #0
    b52e:	d100      	bne.n	b532 <m2m_ip_cb+0x192>
    b530:	e09e      	b.n	b670 <m2m_ip_cb+0x2d0>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    b532:	4b56      	ldr	r3, [pc, #344]	; (b68c <m2m_ip_cb+0x2ec>)
    b534:	681b      	ldr	r3, [r3, #0]
    b536:	9a19      	ldr	r2, [sp, #100]	; 0x64
    b538:	9203      	str	r2, [sp, #12]
    b53a:	0011      	movs	r1, r2
    b53c:	a809      	add	r0, sp, #36	; 0x24
    b53e:	4798      	blx	r3
    b540:	e096      	b.n	b670 <m2m_ip_cb+0x2d0>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    b542:	2846      	cmp	r0, #70	; 0x46
    b544:	d005      	beq.n	b552 <m2m_ip_cb+0x1b2>
    b546:	2848      	cmp	r0, #72	; 0x48
    b548:	d005      	beq.n	b556 <m2m_ip_cb+0x1b6>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    b54a:	2606      	movs	r6, #6
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    b54c:	284d      	cmp	r0, #77	; 0x4d
    b54e:	d003      	beq.n	b558 <m2m_ip_cb+0x1b8>
    b550:	e04c      	b.n	b5ec <m2m_ip_cb+0x24c>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    b552:	2606      	movs	r6, #6
    b554:	e000      	b.n	b558 <m2m_ip_cb+0x1b8>
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    b556:	2609      	movs	r6, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    b558:	2300      	movs	r3, #0
    b55a:	2210      	movs	r2, #16
    b55c:	a905      	add	r1, sp, #20
    b55e:	0020      	movs	r0, r4
    b560:	4f46      	ldr	r7, [pc, #280]	; (b67c <m2m_ip_cb+0x2dc>)
    b562:	47b8      	blx	r7
    b564:	2800      	cmp	r0, #0
    b566:	d000      	beq.n	b56a <m2m_ip_cb+0x1ca>
    b568:	e082      	b.n	b670 <m2m_ip_cb+0x2d0>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
    b56a:	aa05      	add	r2, sp, #20
    b56c:	200c      	movs	r0, #12
    b56e:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    b570:	89d3      	ldrh	r3, [r2, #14]
    b572:	469c      	mov	ip, r3
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
    b574:	0103      	lsls	r3, r0, #4
    b576:	4943      	ldr	r1, [pc, #268]	; (b684 <m2m_ip_cb+0x2e4>)
    b578:	18c9      	adds	r1, r1, r3
    b57a:	2300      	movs	r3, #0
    b57c:	730b      	strb	r3, [r1, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    b57e:	2708      	movs	r7, #8
    b580:	5fd3      	ldrsh	r3, [r2, r7]
    b582:	4698      	mov	r8, r3
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    b584:	8953      	ldrh	r3, [r2, #10]
    b586:	4699      	mov	r9, r3
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    b588:	af09      	add	r7, sp, #36	; 0x24
    b58a:	8853      	ldrh	r3, [r2, #2]
    b58c:	817b      	strh	r3, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    b58e:	9b06      	ldr	r3, [sp, #24]
    b590:	930c      	str	r3, [sp, #48]	; 0x30

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    b592:	88ca      	ldrh	r2, [r1, #6]
    b594:	b292      	uxth	r2, r2
    b596:	4594      	cmp	ip, r2
    b598:	d11f      	bne.n	b5da <m2m_ip_cb+0x23a>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    b59a:	4643      	mov	r3, r8
    b59c:	2b00      	cmp	r3, #0
    b59e:	dd0d      	ble.n	b5bc <m2m_ip_cb+0x21c>
    b5a0:	45a8      	cmp	r8, r5
    b5a2:	da0b      	bge.n	b5bc <m2m_ip_cb+0x21c>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    b5a4:	0023      	movs	r3, r4
    b5a6:	444b      	add	r3, r9
    b5a8:	4642      	mov	r2, r8
    b5aa:	4669      	mov	r1, sp
    b5ac:	818a      	strh	r2, [r1, #12]
    b5ae:	898a      	ldrh	r2, [r1, #12]
    b5b0:	9200      	str	r2, [sp, #0]
    b5b2:	0032      	movs	r2, r6
    b5b4:	0039      	movs	r1, r7
    b5b6:	4c36      	ldr	r4, [pc, #216]	; (b690 <m2m_ip_cb+0x2f0>)
    b5b8:	47a0      	blx	r4
    b5ba:	e059      	b.n	b670 <m2m_ip_cb+0x2d0>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    b5bc:	ab09      	add	r3, sp, #36	; 0x24
    b5be:	4642      	mov	r2, r8
    b5c0:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    b5c2:	2300      	movs	r3, #0
    b5c4:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    b5c6:	4b2e      	ldr	r3, [pc, #184]	; (b680 <m2m_ip_cb+0x2e0>)
    b5c8:	681b      	ldr	r3, [r3, #0]
    b5ca:	2b00      	cmp	r3, #0
    b5cc:	d050      	beq.n	b670 <m2m_ip_cb+0x2d0>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    b5ce:	4b2c      	ldr	r3, [pc, #176]	; (b680 <m2m_ip_cb+0x2e0>)
    b5d0:	681b      	ldr	r3, [r3, #0]
    b5d2:	aa09      	add	r2, sp, #36	; 0x24
    b5d4:	0031      	movs	r1, r6
    b5d6:	4798      	blx	r3
    b5d8:	e04a      	b.n	b670 <m2m_ip_cb+0x2d0>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    b5da:	2d10      	cmp	r5, #16
    b5dc:	d948      	bls.n	b670 <m2m_ip_cb+0x2d0>
				{
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    b5de:	2301      	movs	r3, #1
    b5e0:	2200      	movs	r2, #0
    b5e2:	2100      	movs	r1, #0
    b5e4:	2000      	movs	r0, #0
    b5e6:	4c25      	ldr	r4, [pc, #148]	; (b67c <m2m_ip_cb+0x2dc>)
    b5e8:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    b5ea:	e041      	b.n	b670 <m2m_ip_cb+0x2d0>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    b5ec:	2845      	cmp	r0, #69	; 0x45
    b5ee:	d005      	beq.n	b5fc <m2m_ip_cb+0x25c>
    b5f0:	2847      	cmp	r0, #71	; 0x47
    b5f2:	d005      	beq.n	b600 <m2m_ip_cb+0x260>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    b5f4:	2507      	movs	r5, #7
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    b5f6:	284c      	cmp	r0, #76	; 0x4c
    b5f8:	d003      	beq.n	b602 <m2m_ip_cb+0x262>
    b5fa:	e022      	b.n	b642 <m2m_ip_cb+0x2a2>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    b5fc:	2507      	movs	r5, #7
    b5fe:	e000      	b.n	b602 <m2m_ip_cb+0x262>

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    b600:	2508      	movs	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    b602:	2300      	movs	r3, #0
    b604:	2208      	movs	r2, #8
    b606:	a909      	add	r1, sp, #36	; 0x24
    b608:	0020      	movs	r0, r4
    b60a:	4c1c      	ldr	r4, [pc, #112]	; (b67c <m2m_ip_cb+0x2dc>)
    b60c:	47a0      	blx	r4
    b60e:	2800      	cmp	r0, #0
    b610:	d12e      	bne.n	b670 <m2m_ip_cb+0x2d0>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
    b612:	ab09      	add	r3, sp, #36	; 0x24
    b614:	2000      	movs	r0, #0
    b616:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    b618:	889a      	ldrh	r2, [r3, #4]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    b61a:	8859      	ldrh	r1, [r3, #2]
    b61c:	ab05      	add	r3, sp, #20
    b61e:	8019      	strh	r1, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    b620:	0103      	lsls	r3, r0, #4
    b622:	4918      	ldr	r1, [pc, #96]	; (b684 <m2m_ip_cb+0x2e4>)
    b624:	18cb      	adds	r3, r1, r3
    b626:	88db      	ldrh	r3, [r3, #6]
    b628:	b29b      	uxth	r3, r3
    b62a:	429a      	cmp	r2, r3
    b62c:	d120      	bne.n	b670 <m2m_ip_cb+0x2d0>
			{
				if(gpfAppSocketCb)
    b62e:	4b14      	ldr	r3, [pc, #80]	; (b680 <m2m_ip_cb+0x2e0>)
    b630:	681b      	ldr	r3, [r3, #0]
    b632:	2b00      	cmp	r3, #0
    b634:	d01c      	beq.n	b670 <m2m_ip_cb+0x2d0>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    b636:	4b12      	ldr	r3, [pc, #72]	; (b680 <m2m_ip_cb+0x2e0>)
    b638:	681b      	ldr	r3, [r3, #0]
    b63a:	aa05      	add	r2, sp, #20
    b63c:	0029      	movs	r1, r5
    b63e:	4798      	blx	r3
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    b640:	e016      	b.n	b670 <m2m_ip_cb+0x2d0>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    b642:	2852      	cmp	r0, #82	; 0x52
    b644:	d114      	bne.n	b670 <m2m_ip_cb+0x2d0>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    b646:	2301      	movs	r3, #1
    b648:	2214      	movs	r2, #20
    b64a:	a909      	add	r1, sp, #36	; 0x24
    b64c:	0020      	movs	r0, r4
    b64e:	4c0b      	ldr	r4, [pc, #44]	; (b67c <m2m_ip_cb+0x2dc>)
    b650:	47a0      	blx	r4
    b652:	2800      	cmp	r0, #0
    b654:	d10c      	bne.n	b670 <m2m_ip_cb+0x2d0>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    b656:	4b0f      	ldr	r3, [pc, #60]	; (b694 <m2m_ip_cb+0x2f4>)
    b658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b65a:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    b65c:	681b      	ldr	r3, [r3, #0]
    b65e:	2b00      	cmp	r3, #0
    b660:	d006      	beq.n	b670 <m2m_ip_cb+0x2d0>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    b662:	4b0c      	ldr	r3, [pc, #48]	; (b694 <m2m_ip_cb+0x2f4>)
    b664:	681c      	ldr	r4, [r3, #0]
    b666:	ab09      	add	r3, sp, #36	; 0x24
    b668:	7c1a      	ldrb	r2, [r3, #16]
    b66a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b66c:	9809      	ldr	r0, [sp, #36]	; 0x24
    b66e:	47a0      	blx	r4
			}
		}
	}
}
    b670:	b01b      	add	sp, #108	; 0x6c
    b672:	bc0c      	pop	{r2, r3}
    b674:	4690      	mov	r8, r2
    b676:	4699      	mov	r9, r3
    b678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b67a:	46c0      	nop			; (mov r8, r8)
    b67c:	00009645 	.word	0x00009645
    b680:	200003e4 	.word	0x200003e4
    b684:	20000334 	.word	0x20000334
    b688:	200000b4 	.word	0x200000b4
    b68c:	200003ec 	.word	0x200003ec
    b690:	0000b291 	.word	0x0000b291
    b694:	200003e8 	.word	0x200003e8

0000b698 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    b698:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    b69a:	4b0a      	ldr	r3, [pc, #40]	; (b6c4 <socketInit+0x2c>)
    b69c:	781b      	ldrb	r3, [r3, #0]
    b69e:	2b00      	cmp	r3, #0
    b6a0:	d10e      	bne.n	b6c0 <socketInit+0x28>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    b6a2:	22b0      	movs	r2, #176	; 0xb0
    b6a4:	2100      	movs	r1, #0
    b6a6:	4808      	ldr	r0, [pc, #32]	; (b6c8 <socketInit+0x30>)
    b6a8:	4b08      	ldr	r3, [pc, #32]	; (b6cc <socketInit+0x34>)
    b6aa:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    b6ac:	4908      	ldr	r1, [pc, #32]	; (b6d0 <socketInit+0x38>)
    b6ae:	2002      	movs	r0, #2
    b6b0:	4b08      	ldr	r3, [pc, #32]	; (b6d4 <socketInit+0x3c>)
    b6b2:	4798      	blx	r3
		gbSocketInit	= 1;
    b6b4:	2201      	movs	r2, #1
    b6b6:	4b03      	ldr	r3, [pc, #12]	; (b6c4 <socketInit+0x2c>)
    b6b8:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    b6ba:	2200      	movs	r2, #0
    b6bc:	4b06      	ldr	r3, [pc, #24]	; (b6d8 <socketInit+0x40>)
    b6be:	801a      	strh	r2, [r3, #0]
	}
}
    b6c0:	bd10      	pop	{r4, pc}
    b6c2:	46c0      	nop			; (mov r8, r8)
    b6c4:	200000b2 	.word	0x200000b2
    b6c8:	20000334 	.word	0x20000334
    b6cc:	00008efd 	.word	0x00008efd
    b6d0:	0000b3a1 	.word	0x0000b3a1
    b6d4:	00009731 	.word	0x00009731
    b6d8:	200000b4 	.word	0x200000b4

0000b6dc <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    b6dc:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    b6de:	22b0      	movs	r2, #176	; 0xb0
    b6e0:	2100      	movs	r1, #0
    b6e2:	4807      	ldr	r0, [pc, #28]	; (b700 <socketDeinit+0x24>)
    b6e4:	4b07      	ldr	r3, [pc, #28]	; (b704 <socketDeinit+0x28>)
    b6e6:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    b6e8:	2100      	movs	r1, #0
    b6ea:	2002      	movs	r0, #2
    b6ec:	4b06      	ldr	r3, [pc, #24]	; (b708 <socketDeinit+0x2c>)
    b6ee:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    b6f0:	2300      	movs	r3, #0
    b6f2:	4a06      	ldr	r2, [pc, #24]	; (b70c <socketDeinit+0x30>)
    b6f4:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    b6f6:	4a06      	ldr	r2, [pc, #24]	; (b710 <socketDeinit+0x34>)
    b6f8:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    b6fa:	4a06      	ldr	r2, [pc, #24]	; (b714 <socketDeinit+0x38>)
    b6fc:	7013      	strb	r3, [r2, #0]
}
    b6fe:	bd10      	pop	{r4, pc}
    b700:	20000334 	.word	0x20000334
    b704:	00008efd 	.word	0x00008efd
    b708:	00009731 	.word	0x00009731
    b70c:	200003e4 	.word	0x200003e4
    b710:	200003ec 	.word	0x200003ec
    b714:	200000b2 	.word	0x200000b2

0000b718 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    b718:	4b02      	ldr	r3, [pc, #8]	; (b724 <registerSocketCallback+0xc>)
    b71a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    b71c:	4b02      	ldr	r3, [pc, #8]	; (b728 <registerSocketCallback+0x10>)
    b71e:	6019      	str	r1, [r3, #0]
}
    b720:	4770      	bx	lr
    b722:	46c0      	nop			; (mov r8, r8)
    b724:	200003e4 	.word	0x200003e4
    b728:	200003ec 	.word	0x200003ec

0000b72c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    b72c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b72e:	4657      	mov	r7, sl
    b730:	464e      	mov	r6, r9
    b732:	b4c0      	push	{r6, r7}
    b734:	b089      	sub	sp, #36	; 0x24
    b736:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    b738:	2802      	cmp	r0, #2
    b73a:	d000      	beq.n	b73e <socket+0x12>
    b73c:	e094      	b.n	b868 <socket+0x13c>
	{
		if(u8Type == SOCK_STREAM)
    b73e:	2901      	cmp	r1, #1
    b740:	d133      	bne.n	b7aa <socket+0x7e>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
			{
				u8SockID	= u8NextTcpSock;
    b742:	4c4f      	ldr	r4, [pc, #316]	; (b880 <socket+0x154>)
    b744:	7825      	ldrb	r5, [r4, #0]
    b746:	b2ef      	uxtb	r7, r5
				pstrSock	= &gastrSockets[u8NextTcpSock];
    b748:	7823      	ldrb	r3, [r4, #0]
    b74a:	b2de      	uxtb	r6, r3
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    b74c:	7820      	ldrb	r0, [r4, #0]
    b74e:	3001      	adds	r0, #1
    b750:	3106      	adds	r1, #6
    b752:	4b4c      	ldr	r3, [pc, #304]	; (b884 <socket+0x158>)
    b754:	4798      	blx	r3
    b756:	b2c9      	uxtb	r1, r1
    b758:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    b75a:	0133      	lsls	r3, r6, #4
    b75c:	4a4a      	ldr	r2, [pc, #296]	; (b888 <socket+0x15c>)
    b75e:	18d3      	adds	r3, r2, r3
    b760:	7a9b      	ldrb	r3, [r3, #10]
    b762:	2506      	movs	r5, #6
    b764:	2b00      	cmp	r3, #0
    b766:	d102      	bne.n	b76e <socket+0x42>
		if(u8Type == SOCK_STREAM)
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
			{
				u8SockID	= u8NextTcpSock;
				pstrSock	= &gastrSockets[u8NextTcpSock];
    b768:	0134      	lsls	r4, r6, #4
    b76a:	18a4      	adds	r4, r4, r2
    b76c:	e016      	b.n	b79c <socket+0x70>
	{
		if(u8Type == SOCK_STREAM)
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
			{
				u8SockID	= u8NextTcpSock;
    b76e:	4c44      	ldr	r4, [pc, #272]	; (b880 <socket+0x154>)
				pstrSock	= &gastrSockets[u8NextTcpSock];
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    b770:	4b44      	ldr	r3, [pc, #272]	; (b884 <socket+0x158>)
    b772:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    b774:	4b44      	ldr	r3, [pc, #272]	; (b888 <socket+0x15c>)
    b776:	4699      	mov	r9, r3
	{
		if(u8Type == SOCK_STREAM)
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
			{
				u8SockID	= u8NextTcpSock;
    b778:	7827      	ldrb	r7, [r4, #0]
    b77a:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    b77c:	7823      	ldrb	r3, [r4, #0]
    b77e:	b2de      	uxtb	r6, r3
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    b780:	7820      	ldrb	r0, [r4, #0]
    b782:	3001      	adds	r0, #1
    b784:	2107      	movs	r1, #7
    b786:	47d0      	blx	sl
    b788:	b2c9      	uxtb	r1, r1
    b78a:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    b78c:	0133      	lsls	r3, r6, #4
    b78e:	444b      	add	r3, r9
    b790:	7a9b      	ldrb	r3, [r3, #10]
    b792:	2b00      	cmp	r3, #0
    b794:	d104      	bne.n	b7a0 <socket+0x74>
		if(u8Type == SOCK_STREAM)
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
			{
				u8SockID	= u8NextTcpSock;
				pstrSock	= &gastrSockets[u8NextTcpSock];
    b796:	0134      	lsls	r4, r6, #4
    b798:	4b3b      	ldr	r3, [pc, #236]	; (b888 <socket+0x15c>)
    b79a:	18e4      	adds	r4, r4, r3
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
				if(!pstrSock->bIsUsed)
				{
					sock = (SOCKET)u8SockID;
    b79c:	b27d      	sxtb	r5, r7
					break;
    b79e:	e02d      	b.n	b7fc <socket+0xd0>
    b7a0:	3d01      	subs	r5, #1
    b7a2:	b2ed      	uxtb	r5, r5
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    b7a4:	2d00      	cmp	r5, #0
    b7a6:	d1e7      	bne.n	b778 <socket+0x4c>
    b7a8:	e061      	b.n	b86e <socket+0x142>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    b7aa:	2902      	cmp	r1, #2
    b7ac:	d15f      	bne.n	b86e <socket+0x142>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
			{
				u8SockID		= u8NextUdpSock;
    b7ae:	4a37      	ldr	r2, [pc, #220]	; (b88c <socket+0x160>)
    b7b0:	7815      	ldrb	r5, [r2, #0]
    b7b2:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    b7b4:	7814      	ldrb	r4, [r2, #0]
    b7b6:	0124      	lsls	r4, r4, #4
    b7b8:	4b35      	ldr	r3, [pc, #212]	; (b890 <socket+0x164>)
    b7ba:	18e4      	adds	r4, r4, r3
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    b7bc:	7813      	ldrb	r3, [r2, #0]
    b7be:	3301      	adds	r3, #1
    b7c0:	3101      	adds	r1, #1
    b7c2:	400b      	ands	r3, r1
    b7c4:	7013      	strb	r3, [r2, #0]
				if(!pstrSock->bIsUsed)
    b7c6:	7aa3      	ldrb	r3, [r4, #10]
    b7c8:	2b00      	cmp	r3, #0
    b7ca:	d00f      	beq.n	b7ec <socket+0xc0>
    b7cc:	2203      	movs	r2, #3
		else if(u8Type == SOCK_DGRAM)
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
			{
				u8SockID		= u8NextUdpSock;
    b7ce:	492f      	ldr	r1, [pc, #188]	; (b88c <socket+0x160>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    b7d0:	4f2f      	ldr	r7, [pc, #188]	; (b890 <socket+0x164>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    b7d2:	2003      	movs	r0, #3
		else if(u8Type == SOCK_DGRAM)
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
			{
				u8SockID		= u8NextUdpSock;
    b7d4:	780d      	ldrb	r5, [r1, #0]
    b7d6:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    b7d8:	780c      	ldrb	r4, [r1, #0]
    b7da:	0124      	lsls	r4, r4, #4
    b7dc:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    b7de:	780b      	ldrb	r3, [r1, #0]
    b7e0:	3301      	adds	r3, #1
    b7e2:	4003      	ands	r3, r0
    b7e4:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    b7e6:	7aa3      	ldrb	r3, [r4, #10]
    b7e8:	2b00      	cmp	r3, #0
    b7ea:	d102      	bne.n	b7f2 <socket+0xc6>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    b7ec:	3507      	adds	r5, #7
    b7ee:	b26d      	sxtb	r5, r5
					break;
    b7f0:	e004      	b.n	b7fc <socket+0xd0>
    b7f2:	3a01      	subs	r2, #1
    b7f4:	b2d2      	uxtb	r2, r2
			}
		}
		else if(u8Type == SOCK_DGRAM)
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    b7f6:	2a00      	cmp	r2, #0
    b7f8:	d1ec      	bne.n	b7d4 <socket+0xa8>
    b7fa:	e038      	b.n	b86e <socket+0x142>
					break;
				}
			}
		}

		if(sock >= 0)
    b7fc:	2d00      	cmp	r5, #0
    b7fe:	db38      	blt.n	b872 <socket+0x146>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    b800:	2210      	movs	r2, #16
    b802:	2100      	movs	r1, #0
    b804:	0020      	movs	r0, r4
    b806:	4b23      	ldr	r3, [pc, #140]	; (b894 <socket+0x168>)
    b808:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    b80a:	2301      	movs	r3, #1
    b80c:	72a3      	strb	r3, [r4, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    b80e:	4a22      	ldr	r2, [pc, #136]	; (b898 <socket+0x16c>)
    b810:	8813      	ldrh	r3, [r2, #0]
    b812:	3301      	adds	r3, #1
    b814:	b29b      	uxth	r3, r3
    b816:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    b818:	8813      	ldrh	r3, [r2, #0]
    b81a:	b29b      	uxth	r3, r3
    b81c:	2b00      	cmp	r3, #0
    b81e:	d103      	bne.n	b828 <socket+0xfc>
				++gu16SessionID;
    b820:	8813      	ldrh	r3, [r2, #0]
    b822:	3301      	adds	r3, #1
    b824:	b29b      	uxth	r3, r3
    b826:	8013      	strh	r3, [r2, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    b828:	4e1b      	ldr	r6, [pc, #108]	; (b898 <socket+0x16c>)
    b82a:	8833      	ldrh	r3, [r6, #0]
    b82c:	b29b      	uxth	r3, r3
    b82e:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    b830:	481a      	ldr	r0, [pc, #104]	; (b89c <socket+0x170>)
    b832:	4f1b      	ldr	r7, [pc, #108]	; (b8a0 <socket+0x174>)
    b834:	47b8      	blx	r7
    b836:	8832      	ldrh	r2, [r6, #0]
    b838:	b292      	uxth	r2, r2
    b83a:	0029      	movs	r1, r5
    b83c:	4819      	ldr	r0, [pc, #100]	; (b8a4 <socket+0x178>)
    b83e:	47b8      	blx	r7
    b840:	200d      	movs	r0, #13
    b842:	4b19      	ldr	r3, [pc, #100]	; (b8a8 <socket+0x17c>)
    b844:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    b846:	9b05      	ldr	r3, [sp, #20]
    b848:	07db      	lsls	r3, r3, #31
    b84a:	d512      	bpl.n	b872 <socket+0x146>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    b84c:	aa07      	add	r2, sp, #28
    b84e:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    b850:	2321      	movs	r3, #33	; 0x21
    b852:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    b854:	2300      	movs	r3, #0
    b856:	9302      	str	r3, [sp, #8]
    b858:	9301      	str	r3, [sp, #4]
    b85a:	9300      	str	r3, [sp, #0]
    b85c:	3304      	adds	r3, #4
    b85e:	2150      	movs	r1, #80	; 0x50
    b860:	2002      	movs	r0, #2
    b862:	4c12      	ldr	r4, [pc, #72]	; (b8ac <socket+0x180>)
    b864:	47a0      	blx	r4
    b866:	e004      	b.n	b872 <socket+0x146>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET					sock = -1;
    b868:	2501      	movs	r5, #1
    b86a:	426d      	negs	r5, r5
    b86c:	e001      	b.n	b872 <socket+0x146>
    b86e:	2501      	movs	r5, #1
    b870:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    b872:	0028      	movs	r0, r5
    b874:	b009      	add	sp, #36	; 0x24
    b876:	bc0c      	pop	{r2, r3}
    b878:	4691      	mov	r9, r2
    b87a:	469a      	mov	sl, r3
    b87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b87e:	46c0      	nop			; (mov r8, r8)
    b880:	200000b3 	.word	0x200000b3
    b884:	00011635 	.word	0x00011635
    b888:	20000334 	.word	0x20000334
    b88c:	200000b1 	.word	0x200000b1
    b890:	200003a4 	.word	0x200003a4
    b894:	00008efd 	.word	0x00008efd
    b898:	200000b4 	.word	0x200000b4
    b89c:	00012ee0 	.word	0x00012ee0
    b8a0:	0001189d 	.word	0x0001189d
    b8a4:	00013e10 	.word	0x00013e10
    b8a8:	000118d1 	.word	0x000118d1
    b8ac:	00009031 	.word	0x00009031

0000b8b0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    b8b0:	b570      	push	{r4, r5, r6, lr}
    b8b2:	b088      	sub	sp, #32
    b8b4:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    b8b6:	db2f      	blt.n	b918 <connect+0x68>
    b8b8:	2900      	cmp	r1, #0
    b8ba:	d030      	beq.n	b91e <connect+0x6e>
    b8bc:	0103      	lsls	r3, r0, #4
    b8be:	481d      	ldr	r0, [pc, #116]	; (b934 <connect+0x84>)
    b8c0:	18c3      	adds	r3, r0, r3
    b8c2:	7a9b      	ldrb	r3, [r3, #10]
    b8c4:	2b01      	cmp	r3, #1
    b8c6:	d12d      	bne.n	b924 <connect+0x74>
    b8c8:	2a00      	cmp	r2, #0
    b8ca:	d02e      	beq.n	b92a <connect+0x7a>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    b8cc:	0123      	lsls	r3, r4, #4
    b8ce:	18c3      	adds	r3, r0, r3
    b8d0:	7adb      	ldrb	r3, [r3, #11]
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    b8d2:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    b8d4:	07db      	lsls	r3, r3, #31
    b8d6:	d505      	bpl.n	b8e4 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    b8d8:	0123      	lsls	r3, r4, #4
    b8da:	18c3      	adds	r3, r0, r3
    b8dc:	7ada      	ldrb	r2, [r3, #11]
    b8de:	ab05      	add	r3, sp, #20
    b8e0:	725a      	strb	r2, [r3, #9]
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    b8e2:	3607      	adds	r6, #7
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
    b8e4:	ad05      	add	r5, sp, #20
    b8e6:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    b8e8:	2208      	movs	r2, #8
    b8ea:	0028      	movs	r0, r5
    b8ec:	4b12      	ldr	r3, [pc, #72]	; (b938 <connect+0x88>)
    b8ee:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    b8f0:	0124      	lsls	r4, r4, #4
    b8f2:	4b10      	ldr	r3, [pc, #64]	; (b934 <connect+0x84>)
    b8f4:	191c      	adds	r4, r3, r4
    b8f6:	88e3      	ldrh	r3, [r4, #6]
    b8f8:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    b8fa:	2300      	movs	r3, #0
    b8fc:	9302      	str	r3, [sp, #8]
    b8fe:	9301      	str	r3, [sp, #4]
    b900:	9300      	str	r3, [sp, #0]
    b902:	330c      	adds	r3, #12
    b904:	002a      	movs	r2, r5
    b906:	0031      	movs	r1, r6
    b908:	2002      	movs	r0, #2
    b90a:	4c0c      	ldr	r4, [pc, #48]	; (b93c <connect+0x8c>)
    b90c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    b90e:	2800      	cmp	r0, #0
    b910:	d00d      	beq.n	b92e <connect+0x7e>
		{
			s8Ret = SOCK_ERR_INVALID;
    b912:	2009      	movs	r0, #9
    b914:	4240      	negs	r0, r0
    b916:	e00a      	b.n	b92e <connect+0x7e>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    b918:	2006      	movs	r0, #6
    b91a:	4240      	negs	r0, r0
    b91c:	e007      	b.n	b92e <connect+0x7e>
    b91e:	2006      	movs	r0, #6
    b920:	4240      	negs	r0, r0
    b922:	e004      	b.n	b92e <connect+0x7e>
    b924:	2006      	movs	r0, #6
    b926:	4240      	negs	r0, r0
    b928:	e001      	b.n	b92e <connect+0x7e>
    b92a:	2006      	movs	r0, #6
    b92c:	4240      	negs	r0, r0
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
}
    b92e:	b008      	add	sp, #32
    b930:	bd70      	pop	{r4, r5, r6, pc}
    b932:	46c0      	nop			; (mov r8, r8)
    b934:	20000334 	.word	0x20000334
    b938:	00008ee9 	.word	0x00008ee9
    b93c:	00009031 	.word	0x00009031

0000b940 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    b940:	b530      	push	{r4, r5, lr}
    b942:	b089      	sub	sp, #36	; 0x24
    b944:	000c      	movs	r4, r1
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    b946:	2800      	cmp	r0, #0
    b948:	db33      	blt.n	b9b2 <send+0x72>
    b94a:	2900      	cmp	r1, #0
    b94c:	d034      	beq.n	b9b8 <send+0x78>
    b94e:	23af      	movs	r3, #175	; 0xaf
    b950:	00db      	lsls	r3, r3, #3
    b952:	429a      	cmp	r2, r3
    b954:	d833      	bhi.n	b9be <send+0x7e>
    b956:	0103      	lsls	r3, r0, #4
    b958:	491d      	ldr	r1, [pc, #116]	; (b9d0 <send+0x90>)
    b95a:	18cb      	adds	r3, r1, r3
    b95c:	7a9b      	ldrb	r3, [r3, #10]
    b95e:	2b01      	cmp	r3, #1
    b960:	d130      	bne.n	b9c4 <send+0x84>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    b962:	a904      	add	r1, sp, #16
    b964:	7008      	strb	r0, [r1, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    b966:	804a      	strh	r2, [r1, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    b968:	0103      	lsls	r3, r0, #4
    b96a:	4d19      	ldr	r5, [pc, #100]	; (b9d0 <send+0x90>)
    b96c:	18eb      	adds	r3, r5, r3
    b96e:	88db      	ldrh	r3, [r3, #6]
    b970:	818b      	strh	r3, [r1, #12]
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    b972:	2550      	movs	r5, #80	; 0x50

		strSend.sock			= sock;
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;

		if(sock >= TCP_SOCK_MAX)
    b974:	2806      	cmp	r0, #6
    b976:	dd00      	ble.n	b97a <send+0x3a>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    b978:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    b97a:	0103      	lsls	r3, r0, #4
    b97c:	4914      	ldr	r1, [pc, #80]	; (b9d0 <send+0x90>)
    b97e:	18cb      	adds	r3, r1, r3
    b980:	7adb      	ldrb	r3, [r3, #11]
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    b982:	2145      	movs	r1, #69	; 0x45

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    b984:	07db      	lsls	r3, r3, #31
    b986:	d505      	bpl.n	b994 <send+0x54>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    b988:	0100      	lsls	r0, r0, #4
    b98a:	4b11      	ldr	r3, [pc, #68]	; (b9d0 <send+0x90>)
    b98c:	1818      	adds	r0, r3, r0
    b98e:	8905      	ldrh	r5, [r0, #8]
    b990:	b2ad      	uxth	r5, r5
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    b992:	3107      	adds	r1, #7
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    b994:	2380      	movs	r3, #128	; 0x80
    b996:	4319      	orrs	r1, r3
    b998:	9502      	str	r5, [sp, #8]
    b99a:	9201      	str	r2, [sp, #4]
    b99c:	9400      	str	r4, [sp, #0]
    b99e:	3b70      	subs	r3, #112	; 0x70
    b9a0:	aa04      	add	r2, sp, #16
    b9a2:	2002      	movs	r0, #2
    b9a4:	4c0b      	ldr	r4, [pc, #44]	; (b9d4 <send+0x94>)
    b9a6:	47a0      	blx	r4
    b9a8:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    b9aa:	2800      	cmp	r0, #0
    b9ac:	d00c      	beq.n	b9c8 <send+0x88>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    b9ae:	3b0e      	subs	r3, #14
    b9b0:	e00a      	b.n	b9c8 <send+0x88>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    b9b2:	2306      	movs	r3, #6
    b9b4:	425b      	negs	r3, r3
    b9b6:	e007      	b.n	b9c8 <send+0x88>
    b9b8:	2306      	movs	r3, #6
    b9ba:	425b      	negs	r3, r3
    b9bc:	e004      	b.n	b9c8 <send+0x88>
    b9be:	2306      	movs	r3, #6
    b9c0:	425b      	negs	r3, r3
    b9c2:	e001      	b.n	b9c8 <send+0x88>
    b9c4:	2306      	movs	r3, #6
    b9c6:	425b      	negs	r3, r3
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
}
    b9c8:	0018      	movs	r0, r3
    b9ca:	b009      	add	sp, #36	; 0x24
    b9cc:	bd30      	pop	{r4, r5, pc}
    b9ce:	46c0      	nop			; (mov r8, r8)
    b9d0:	20000334 	.word	0x20000334
    b9d4:	00009031 	.word	0x00009031

0000b9d8 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    b9d8:	b530      	push	{r4, r5, lr}
    b9da:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    b9dc:	2800      	cmp	r0, #0
    b9de:	db33      	blt.n	ba48 <recv+0x70>
    b9e0:	2900      	cmp	r1, #0
    b9e2:	d034      	beq.n	ba4e <recv+0x76>
    b9e4:	2a00      	cmp	r2, #0
    b9e6:	d035      	beq.n	ba54 <recv+0x7c>
    b9e8:	0104      	lsls	r4, r0, #4
    b9ea:	4d1e      	ldr	r5, [pc, #120]	; (ba64 <recv+0x8c>)
    b9ec:	192c      	adds	r4, r5, r4
    b9ee:	7aa4      	ldrb	r4, [r4, #10]
    b9f0:	2c01      	cmp	r4, #1
    b9f2:	d132      	bne.n	ba5a <recv+0x82>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    b9f4:	0104      	lsls	r4, r0, #4
    b9f6:	5161      	str	r1, [r4, r5]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    b9f8:	1929      	adds	r1, r5, r4
    b9fa:	808a      	strh	r2, [r1, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    b9fc:	7b09      	ldrb	r1, [r1, #12]
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    b9fe:	2200      	movs	r2, #0
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
    ba00:	2900      	cmp	r1, #0
    ba02:	d12c      	bne.n	ba5e <recv+0x86>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    ba04:	192a      	adds	r2, r5, r4
    ba06:	2101      	movs	r1, #1
    ba08:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    ba0a:	7ad2      	ldrb	r2, [r2, #11]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    ba0c:	3145      	adds	r1, #69	; 0x45

			gastrSockets[sock].bIsRecvPending = 1;
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    ba0e:	07d2      	lsls	r2, r2, #31
    ba10:	d500      	bpl.n	ba14 <recv+0x3c>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    ba12:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    ba14:	2b00      	cmp	r3, #0
    ba16:	d102      	bne.n	ba1e <recv+0x46>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    ba18:	3b01      	subs	r3, #1
    ba1a:	9304      	str	r3, [sp, #16]
    ba1c:	e000      	b.n	ba20 <recv+0x48>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    ba1e:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
    ba20:	aa04      	add	r2, sp, #16
    ba22:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    ba24:	0100      	lsls	r0, r0, #4
    ba26:	4b0f      	ldr	r3, [pc, #60]	; (ba64 <recv+0x8c>)
    ba28:	1818      	adds	r0, r3, r0
    ba2a:	88c3      	ldrh	r3, [r0, #6]
    ba2c:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    ba2e:	2300      	movs	r3, #0
    ba30:	9302      	str	r3, [sp, #8]
    ba32:	9301      	str	r3, [sp, #4]
    ba34:	9300      	str	r3, [sp, #0]
    ba36:	3308      	adds	r3, #8
    ba38:	2002      	movs	r0, #2
    ba3a:	4c0b      	ldr	r4, [pc, #44]	; (ba68 <recv+0x90>)
    ba3c:	47a0      	blx	r4
    ba3e:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    ba40:	2800      	cmp	r0, #0
    ba42:	d00c      	beq.n	ba5e <recv+0x86>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    ba44:	3a0e      	subs	r2, #14
    ba46:	e00a      	b.n	ba5e <recv+0x86>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    ba48:	2206      	movs	r2, #6
    ba4a:	4252      	negs	r2, r2
    ba4c:	e007      	b.n	ba5e <recv+0x86>
    ba4e:	2206      	movs	r2, #6
    ba50:	4252      	negs	r2, r2
    ba52:	e004      	b.n	ba5e <recv+0x86>
    ba54:	2206      	movs	r2, #6
    ba56:	4252      	negs	r2, r2
    ba58:	e001      	b.n	ba5e <recv+0x86>
    ba5a:	2206      	movs	r2, #6
    ba5c:	4252      	negs	r2, r2
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
    ba5e:	0010      	movs	r0, r2
    ba60:	b007      	add	sp, #28
    ba62:	bd30      	pop	{r4, r5, pc}
    ba64:	20000334 	.word	0x20000334
    ba68:	00009031 	.word	0x00009031

0000ba6c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    ba6c:	b530      	push	{r4, r5, lr}
    ba6e:	b087      	sub	sp, #28
    ba70:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    ba72:	481e      	ldr	r0, [pc, #120]	; (baec <close+0x80>)
    ba74:	4d1e      	ldr	r5, [pc, #120]	; (baf0 <close+0x84>)
    ba76:	47a8      	blx	r5
    ba78:	0021      	movs	r1, r4
    ba7a:	481e      	ldr	r0, [pc, #120]	; (baf4 <close+0x88>)
    ba7c:	47a8      	blx	r5
    ba7e:	200d      	movs	r0, #13
    ba80:	4b1d      	ldr	r3, [pc, #116]	; (baf8 <close+0x8c>)
    ba82:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    ba84:	2c00      	cmp	r4, #0
    ba86:	db29      	blt.n	badc <close+0x70>
    ba88:	0123      	lsls	r3, r4, #4
    ba8a:	4a1c      	ldr	r2, [pc, #112]	; (bafc <close+0x90>)
    ba8c:	18d3      	adds	r3, r2, r3
    ba8e:	7a9b      	ldrb	r3, [r3, #10]
    ba90:	2b01      	cmp	r3, #1
    ba92:	d126      	bne.n	bae2 <close+0x76>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    ba94:	a905      	add	r1, sp, #20
    ba96:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    ba98:	0122      	lsls	r2, r4, #4
    ba9a:	4b18      	ldr	r3, [pc, #96]	; (bafc <close+0x90>)
    ba9c:	189b      	adds	r3, r3, r2
    ba9e:	88da      	ldrh	r2, [r3, #6]
    baa0:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    baa2:	2200      	movs	r2, #0
    baa4:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    baa6:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    baa8:	7adb      	ldrb	r3, [r3, #11]
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    baaa:	2149      	movs	r1, #73	; 0x49
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
		
		gastrSockets[sock].bIsUsed = 0;
		gastrSockets[sock].u16SessionID =0;
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    baac:	07db      	lsls	r3, r3, #31
    baae:	d500      	bpl.n	bab2 <close+0x46>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    bab0:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    bab2:	2300      	movs	r3, #0
    bab4:	9302      	str	r3, [sp, #8]
    bab6:	9301      	str	r3, [sp, #4]
    bab8:	9300      	str	r3, [sp, #0]
    baba:	3304      	adds	r3, #4
    babc:	aa05      	add	r2, sp, #20
    babe:	2002      	movs	r0, #2
    bac0:	4d0f      	ldr	r5, [pc, #60]	; (bb00 <close+0x94>)
    bac2:	47a8      	blx	r5
    bac4:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    bac6:	d001      	beq.n	bacc <close+0x60>
		{
			s8Ret = SOCK_ERR_INVALID;
    bac8:	2509      	movs	r5, #9
    baca:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    bacc:	0124      	lsls	r4, r4, #4
    bace:	480b      	ldr	r0, [pc, #44]	; (bafc <close+0x90>)
    bad0:	1820      	adds	r0, r4, r0
    bad2:	2210      	movs	r2, #16
    bad4:	2100      	movs	r1, #0
    bad6:	4b0b      	ldr	r3, [pc, #44]	; (bb04 <close+0x98>)
    bad8:	4798      	blx	r3
    bada:	e004      	b.n	bae6 <close+0x7a>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    badc:	2506      	movs	r5, #6
    bade:	426d      	negs	r5, r5
    bae0:	e001      	b.n	bae6 <close+0x7a>
    bae2:	2506      	movs	r5, #6
    bae4:	426d      	negs	r5, r5
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
}
    bae6:	0028      	movs	r0, r5
    bae8:	b007      	add	sp, #28
    baea:	bd30      	pop	{r4, r5, pc}
    baec:	00012ee0 	.word	0x00012ee0
    baf0:	0001189d 	.word	0x0001189d
    baf4:	00013e2c 	.word	0x00013e2c
    baf8:	000118d1 	.word	0x000118d1
    bafc:	20000334 	.word	0x20000334
    bb00:	00009031 	.word	0x00009031
    bb04:	00008efd 	.word	0x00008efd

0000bb08 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    bb08:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb0a:	b083      	sub	sp, #12
	uint8	tmp;
	uint32	u32IP = 0;
    bb0c:	2300      	movs	r3, #0
    bb0e:	9301      	str	r3, [sp, #4]
    bb10:	2600      	movs	r6, #0
    bb12:	1c45      	adds	r5, r0, #1
    bb14:	1d47      	adds	r7, r0, #5
    bb16:	2200      	movs	r2, #0
		j = 0;
		do
		{
			c = *pcIpAddr;
			++j;
			if(j > 4)
    bb18:	42bd      	cmp	r5, r7
    bb1a:	d01d      	beq.n	bb58 <nmi_inet_addr+0x50>
    bb1c:	0028      	movs	r0, r5
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    bb1e:	1e6b      	subs	r3, r5, #1
    bb20:	781c      	ldrb	r4, [r3, #0]
			++j;
			if(j > 4)
			{
				return 0;
			}
			if(c == '.' || c == 0)
    bb22:	2c2e      	cmp	r4, #46	; 0x2e
    bb24:	d01c      	beq.n	bb60 <nmi_inet_addr+0x58>
    bb26:	2c00      	cmp	r4, #0
    bb28:	d01d      	beq.n	bb66 <nmi_inet_addr+0x5e>
			{
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
    bb2a:	0023      	movs	r3, r4
    bb2c:	3b30      	subs	r3, #48	; 0x30
    bb2e:	2b09      	cmp	r3, #9
    bb30:	d814      	bhi.n	bb5c <nmi_inet_addr+0x54>
    bb32:	0091      	lsls	r1, r2, #2
    bb34:	1852      	adds	r2, r2, r1
    bb36:	0052      	lsls	r2, r2, #1
    bb38:	0013      	movs	r3, r2
    bb3a:	3b30      	subs	r3, #48	; 0x30
			{
				tmp = (tmp * 10) + (c - '0');
    bb3c:	191b      	adds	r3, r3, r4
    bb3e:	b2da      	uxtb	r2, r3
    bb40:	3501      	adds	r5, #1
    bb42:	e7e9      	b.n	bb18 <nmi_inet_addr+0x10>
    bb44:	3601      	adds	r6, #1
	uint8 	c;
	uint8	i, j;

	tmp = 0;

	for(i = 0; i < 4; ++i)
    bb46:	2e04      	cmp	r6, #4
    bb48:	d1e3      	bne.n	bb12 <nmi_inet_addr+0xa>
				return 0;
			}
			++pcIpAddr;
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    bb4a:	2204      	movs	r2, #4
    bb4c:	4669      	mov	r1, sp
    bb4e:	a801      	add	r0, sp, #4
    bb50:	4b07      	ldr	r3, [pc, #28]	; (bb70 <nmi_inet_addr+0x68>)
    bb52:	4798      	blx	r3
	return u32IP;
    bb54:	9801      	ldr	r0, [sp, #4]
    bb56:	e009      	b.n	bb6c <nmi_inet_addr+0x64>
		{
			c = *pcIpAddr;
			++j;
			if(j > 4)
			{
				return 0;
    bb58:	2000      	movs	r0, #0
    bb5a:	e007      	b.n	bb6c <nmi_inet_addr+0x64>
			{
				tmp = (tmp * 10) + (c - '0');
			}
			else
			{
				return 0;
    bb5c:	2000      	movs	r0, #0
    bb5e:	e005      	b.n	bb6c <nmi_inet_addr+0x64>
			{
				return 0;
			}
			if(c == '.' || c == 0)
			{
				au8IP[i] = tmp;
    bb60:	466b      	mov	r3, sp
    bb62:	54f2      	strb	r2, [r6, r3]
    bb64:	e7ee      	b.n	bb44 <nmi_inet_addr+0x3c>
    bb66:	466b      	mov	r3, sp
    bb68:	54f2      	strb	r2, [r6, r3]
    bb6a:	e7eb      	b.n	bb44 <nmi_inet_addr+0x3c>
			++pcIpAddr;
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    bb6c:	b003      	add	sp, #12
    bb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bb70:	00008ee9 	.word	0x00008ee9

0000bb74 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    bb74:	b510      	push	{r4, lr}
    bb76:	b084      	sub	sp, #16
    bb78:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    bb7a:	4b0b      	ldr	r3, [pc, #44]	; (bba8 <gethostbyname+0x34>)
    bb7c:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    bb7e:	b2c3      	uxtb	r3, r0
    bb80:	2b40      	cmp	r3, #64	; 0x40
    bb82:	d80c      	bhi.n	bb9e <gethostbyname+0x2a>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    bb84:	23ff      	movs	r3, #255	; 0xff
    bb86:	4018      	ands	r0, r3
    bb88:	1c43      	adds	r3, r0, #1
    bb8a:	2200      	movs	r2, #0
    bb8c:	9202      	str	r2, [sp, #8]
    bb8e:	9201      	str	r2, [sp, #4]
    bb90:	9200      	str	r2, [sp, #0]
    bb92:	0022      	movs	r2, r4
    bb94:	214a      	movs	r1, #74	; 0x4a
    bb96:	2002      	movs	r0, #2
    bb98:	4c04      	ldr	r4, [pc, #16]	; (bbac <gethostbyname+0x38>)
    bb9a:	47a0      	blx	r4
    bb9c:	e001      	b.n	bba2 <gethostbyname+0x2e>
Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    bb9e:	2006      	movs	r0, #6
    bba0:	4240      	negs	r0, r0
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
	}
	return s8Err;
}
    bba2:	b004      	add	sp, #16
    bba4:	bd10      	pop	{r4, pc}
    bba6:	46c0      	nop			; (mov r8, r8)
    bba8:	00008f0d 	.word	0x00008f0d
    bbac:	00009031 	.word	0x00009031

0000bbb0 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    bbb0:	b570      	push	{r4, r5, r6, lr}
    bbb2:	b082      	sub	sp, #8
    bbb4:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    bbb6:	4b29      	ldr	r3, [pc, #164]	; (bc5c <spi_flash_enable+0xac>)
    bbb8:	4798      	blx	r3
    bbba:	0500      	lsls	r0, r0, #20
    bbbc:	0d00      	lsrs	r0, r0, #20
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
	sint8 s8Ret = M2M_SUCCESS;
    bbbe:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    bbc0:	4b27      	ldr	r3, [pc, #156]	; (bc60 <spi_flash_enable+0xb0>)
    bbc2:	4298      	cmp	r0, r3
    bbc4:	d947      	bls.n	bc56 <spi_flash_enable+0xa6>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    bbc6:	a901      	add	r1, sp, #4
    bbc8:	4826      	ldr	r0, [pc, #152]	; (bc64 <spi_flash_enable+0xb4>)
    bbca:	4b27      	ldr	r3, [pc, #156]	; (bc68 <spi_flash_enable+0xb8>)
    bbcc:	4798      	blx	r3
    bbce:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    bbd0:	d141      	bne.n	bc56 <spi_flash_enable+0xa6>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x1111ul) << 12);
    bbd2:	4926      	ldr	r1, [pc, #152]	; (bc6c <spi_flash_enable+0xbc>)
    bbd4:	9b01      	ldr	r3, [sp, #4]
    bbd6:	4019      	ands	r1, r3
    bbd8:	4b25      	ldr	r3, [pc, #148]	; (bc70 <spi_flash_enable+0xc0>)
    bbda:	4319      	orrs	r1, r3
    bbdc:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    bbde:	4821      	ldr	r0, [pc, #132]	; (bc64 <spi_flash_enable+0xb4>)
    bbe0:	4b24      	ldr	r3, [pc, #144]	; (bc74 <spi_flash_enable+0xc4>)
    bbe2:	4798      	blx	r3
		if(enable) {
    bbe4:	2c00      	cmp	r4, #0
    bbe6:	d016      	beq.n	bc16 <spi_flash_enable+0x66>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xab;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    bbe8:	2100      	movs	r1, #0
    bbea:	4823      	ldr	r0, [pc, #140]	; (bc78 <spi_flash_enable+0xc8>)
    bbec:	4c21      	ldr	r4, [pc, #132]	; (bc74 <spi_flash_enable+0xc4>)
    bbee:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    bbf0:	21ab      	movs	r1, #171	; 0xab
    bbf2:	4822      	ldr	r0, [pc, #136]	; (bc7c <spi_flash_enable+0xcc>)
    bbf4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    bbf6:	2101      	movs	r1, #1
    bbf8:	4821      	ldr	r0, [pc, #132]	; (bc80 <spi_flash_enable+0xd0>)
    bbfa:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    bbfc:	2100      	movs	r1, #0
    bbfe:	4821      	ldr	r0, [pc, #132]	; (bc84 <spi_flash_enable+0xd4>)
    bc00:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    bc02:	2181      	movs	r1, #129	; 0x81
    bc04:	4820      	ldr	r0, [pc, #128]	; (bc88 <spi_flash_enable+0xd8>)
    bc06:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    bc08:	4e20      	ldr	r6, [pc, #128]	; (bc8c <spi_flash_enable+0xdc>)
    bc0a:	4c21      	ldr	r4, [pc, #132]	; (bc90 <spi_flash_enable+0xe0>)
    bc0c:	0030      	movs	r0, r6
    bc0e:	47a0      	blx	r4
    bc10:	2801      	cmp	r0, #1
    bc12:	d1fb      	bne.n	bc0c <spi_flash_enable+0x5c>
    bc14:	e015      	b.n	bc42 <spi_flash_enable+0x92>
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;

	cmd[0] = 0xb9;

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    bc16:	2100      	movs	r1, #0
    bc18:	4817      	ldr	r0, [pc, #92]	; (bc78 <spi_flash_enable+0xc8>)
    bc1a:	4c16      	ldr	r4, [pc, #88]	; (bc74 <spi_flash_enable+0xc4>)
    bc1c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    bc1e:	21b9      	movs	r1, #185	; 0xb9
    bc20:	4816      	ldr	r0, [pc, #88]	; (bc7c <spi_flash_enable+0xcc>)
    bc22:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    bc24:	2101      	movs	r1, #1
    bc26:	4816      	ldr	r0, [pc, #88]	; (bc80 <spi_flash_enable+0xd0>)
    bc28:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    bc2a:	2100      	movs	r1, #0
    bc2c:	4815      	ldr	r0, [pc, #84]	; (bc84 <spi_flash_enable+0xd4>)
    bc2e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    bc30:	2181      	movs	r1, #129	; 0x81
    bc32:	4815      	ldr	r0, [pc, #84]	; (bc88 <spi_flash_enable+0xd8>)
    bc34:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    bc36:	4e15      	ldr	r6, [pc, #84]	; (bc8c <spi_flash_enable+0xdc>)
    bc38:	4c15      	ldr	r4, [pc, #84]	; (bc90 <spi_flash_enable+0xe0>)
    bc3a:	0030      	movs	r0, r6
    bc3c:	47a0      	blx	r4
    bc3e:	2801      	cmp	r0, #1
    bc40:	d1fb      	bne.n	bc3a <spi_flash_enable+0x8a>
		} else {
			spi_flash_enter_low_power_mode();
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
    bc42:	490a      	ldr	r1, [pc, #40]	; (bc6c <spi_flash_enable+0xbc>)
    bc44:	9b01      	ldr	r3, [sp, #4]
    bc46:	4019      	ands	r1, r3
    bc48:	2380      	movs	r3, #128	; 0x80
    bc4a:	025b      	lsls	r3, r3, #9
    bc4c:	4319      	orrs	r1, r3
    bc4e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    bc50:	4804      	ldr	r0, [pc, #16]	; (bc64 <spi_flash_enable+0xb4>)
    bc52:	4b08      	ldr	r3, [pc, #32]	; (bc74 <spi_flash_enable+0xc4>)
    bc54:	4798      	blx	r3
	}
ERR1:
	return s8Ret;
}
    bc56:	0028      	movs	r0, r5
    bc58:	b002      	add	sp, #8
    bc5a:	bd70      	pop	{r4, r5, r6, pc}
    bc5c:	00009f11 	.word	0x00009f11
    bc60:	0000039f 	.word	0x0000039f
    bc64:	00001410 	.word	0x00001410
    bc68:	0000a359 	.word	0x0000a359
    bc6c:	f8888fff 	.word	0xf8888fff
    bc70:	01111000 	.word	0x01111000
    bc74:	0000a365 	.word	0x0000a365
    bc78:	00010208 	.word	0x00010208
    bc7c:	0001020c 	.word	0x0001020c
    bc80:	00010214 	.word	0x00010214
    bc84:	0001021c 	.word	0x0001021c
    bc88:	00010204 	.word	0x00010204
    bc8c:	00010218 	.word	0x00010218
    bc90:	0000a34d 	.word	0x0000a34d

0000bc94 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    bc94:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc96:	4647      	mov	r7, r8
    bc98:	b480      	push	{r7}
	const word_t *word_ptr =
    bc9a:	2303      	movs	r3, #3
    bc9c:	0004      	movs	r4, r0
    bc9e:	439c      	bics	r4, r3
    bca0:	46a4      	mov	ip, r4
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    bca2:	6813      	ldr	r3, [r2, #0]
    bca4:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    bca6:	1e0c      	subs	r4, r1, #0
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
    bca8:	2c03      	cmp	r4, #3
    bcaa:	d902      	bls.n	bcb2 <crc32_recalculate+0x1e>
		temp_length = length;
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    bcac:	4240      	negs	r0, r0
    bcae:	2403      	movs	r4, #3
    bcb0:	4004      	ands	r4, r0
	}

	if (temp_length) {
    bcb2:	2c00      	cmp	r4, #0
    bcb4:	d018      	beq.n	bce8 <crc32_recalculate+0x54>
		length -= temp_length;
    bcb6:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    bcb8:	4660      	mov	r0, ip
    bcba:	1d06      	adds	r6, r0, #4
    bcbc:	6805      	ldr	r5, [r0, #0]
static inline crc32_t _crc32_recalculate_bytes_helper(word_t data,
		crc32_t crc, uint_fast8_t bytes)
{
	uint_fast8_t bit;

	crc ^= data;
    bcbe:	00e0      	lsls	r0, r4, #3
    bcc0:	4240      	negs	r0, r0
    bcc2:	3020      	adds	r0, #32
    bcc4:	40c5      	lsrs	r5, r0
    bcc6:	406b      	eors	r3, r5

	for (bit = 8 * bytes; bit > 0; bit--) {
    bcc8:	00e0      	lsls	r0, r4, #3
    bcca:	d00c      	beq.n	bce6 <crc32_recalculate+0x52>
		if (crc & 1) {
    bccc:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    bcce:	4d25      	ldr	r5, [pc, #148]	; (bd64 <crc32_recalculate+0xd0>)
	uint_fast8_t bit;

	crc ^= data;

	for (bit = 8 * bytes; bit > 0; bit--) {
		if (crc & 1) {
    bcd0:	421c      	tst	r4, r3
    bcd2:	d002      	beq.n	bcda <crc32_recalculate+0x46>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    bcd4:	085b      	lsrs	r3, r3, #1
    bcd6:	406b      	eors	r3, r5
    bcd8:	e000      	b.n	bcdc <crc32_recalculate+0x48>
		} else {
			crc >>= 1;
    bcda:	085b      	lsrs	r3, r3, #1
{
	uint_fast8_t bit;

	crc ^= data;

	for (bit = 8 * bytes; bit > 0; bit--) {
    bcdc:	3801      	subs	r0, #1
    bcde:	2800      	cmp	r0, #0
    bce0:	d1f6      	bne.n	bcd0 <crc32_recalculate+0x3c>
	}

	if (temp_length) {
		length -= temp_length;

		word = *(word_ptr++);
    bce2:	46b4      	mov	ip, r6
    bce4:	e000      	b.n	bce8 <crc32_recalculate+0x54>
    bce6:	46b4      	mov	ip, r6
		word >>= 8 * (WORD_SIZE - temp_length);
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    bce8:	2003      	movs	r0, #3
    bcea:	000c      	movs	r4, r1
    bcec:	4384      	bics	r4, r0

	if (temp_length) {
    bcee:	d019      	beq.n	bd24 <crc32_recalculate+0x90>
		length -= temp_length;
    bcf0:	1b09      	subs	r1, r1, r4
		temp_length /= WORD_SIZE;
    bcf2:	08a0      	lsrs	r0, r4, #2
    bcf4:	4680      	mov	r8, r0
    bcf6:	4667      	mov	r7, ip
    bcf8:	0006      	movs	r6, r0
	uint_fast8_t bit;

	crc ^= data;

	for (bit = 8 * bytes; bit > 0; bit--) {
		if (crc & 1) {
    bcfa:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    bcfc:	4d19      	ldr	r5, [pc, #100]	; (bd64 <crc32_recalculate+0xd0>)

	if (temp_length) {
		length -= temp_length;
		temp_length /= WORD_SIZE;

		while (temp_length--) {
    bcfe:	e00c      	b.n	bd1a <crc32_recalculate+0x86>
static inline crc32_t _crc32_recalculate_bytes_helper(word_t data,
		crc32_t crc, uint_fast8_t bytes)
{
	uint_fast8_t bit;

	crc ^= data;
    bd00:	6838      	ldr	r0, [r7, #0]
    bd02:	4043      	eors	r3, r0
    bd04:	2020      	movs	r0, #32

	for (bit = 8 * bytes; bit > 0; bit--) {
		if (crc & 1) {
    bd06:	421c      	tst	r4, r3
    bd08:	d002      	beq.n	bd10 <crc32_recalculate+0x7c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    bd0a:	085b      	lsrs	r3, r3, #1
    bd0c:	406b      	eors	r3, r5
    bd0e:	e000      	b.n	bd12 <crc32_recalculate+0x7e>
		} else {
			crc >>= 1;
    bd10:	085b      	lsrs	r3, r3, #1
    bd12:	3801      	subs	r0, #1
{
	uint_fast8_t bit;

	crc ^= data;

	for (bit = 8 * bytes; bit > 0; bit--) {
    bd14:	2800      	cmp	r0, #0
    bd16:	d1f6      	bne.n	bd06 <crc32_recalculate+0x72>
    bd18:	3704      	adds	r7, #4

	if (temp_length) {
		length -= temp_length;
		temp_length /= WORD_SIZE;

		while (temp_length--) {
    bd1a:	3e01      	subs	r6, #1
    bd1c:	d2f0      	bcs.n	bd00 <crc32_recalculate+0x6c>
    bd1e:	4640      	mov	r0, r8
    bd20:	0080      	lsls	r0, r0, #2
    bd22:	4484      	add	ip, r0
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    bd24:	2900      	cmp	r1, #0
    bd26:	d016      	beq.n	bd56 <crc32_recalculate+0xc2>
		word = *word_ptr;
    bd28:	4660      	mov	r0, ip
    bd2a:	6805      	ldr	r5, [r0, #0]
static inline crc32_t _crc32_recalculate_bytes_helper(word_t data,
		crc32_t crc, uint_fast8_t bytes)
{
	uint_fast8_t bit;

	crc ^= data;
    bd2c:	00cc      	lsls	r4, r1, #3
    bd2e:	4264      	negs	r4, r4
    bd30:	3420      	adds	r4, #32
    bd32:	2001      	movs	r0, #1
    bd34:	4240      	negs	r0, r0
    bd36:	40e0      	lsrs	r0, r4
    bd38:	4028      	ands	r0, r5
    bd3a:	4043      	eors	r3, r0

	for (bit = 8 * bytes; bit > 0; bit--) {
    bd3c:	00c9      	lsls	r1, r1, #3
    bd3e:	d00a      	beq.n	bd56 <crc32_recalculate+0xc2>
		if (crc & 1) {
    bd40:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    bd42:	4c08      	ldr	r4, [pc, #32]	; (bd64 <crc32_recalculate+0xd0>)
	uint_fast8_t bit;

	crc ^= data;

	for (bit = 8 * bytes; bit > 0; bit--) {
		if (crc & 1) {
    bd44:	4218      	tst	r0, r3
    bd46:	d002      	beq.n	bd4e <crc32_recalculate+0xba>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    bd48:	085b      	lsrs	r3, r3, #1
    bd4a:	4063      	eors	r3, r4
    bd4c:	e000      	b.n	bd50 <crc32_recalculate+0xbc>
		} else {
			crc >>= 1;
    bd4e:	085b      	lsrs	r3, r3, #1
{
	uint_fast8_t bit;

	crc ^= data;

	for (bit = 8 * bytes; bit > 0; bit--) {
    bd50:	3901      	subs	r1, #1
    bd52:	2900      	cmp	r1, #0
    bd54:	d1f6      	bne.n	bd44 <crc32_recalculate+0xb0>
		word = *word_ptr;
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    bd56:	43db      	mvns	r3, r3
    bd58:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    bd5a:	2000      	movs	r0, #0
    bd5c:	bc04      	pop	{r2}
    bd5e:	4690      	mov	r8, r2
    bd60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd62:	46c0      	nop			; (mov r8, r8)
    bd64:	edb88320 	.word	0xedb88320

0000bd68 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    bd68:	4b0c      	ldr	r3, [pc, #48]	; (bd9c <cpu_irq_enter_critical+0x34>)
    bd6a:	681b      	ldr	r3, [r3, #0]
    bd6c:	2b00      	cmp	r3, #0
    bd6e:	d110      	bne.n	bd92 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    bd70:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    bd74:	2b00      	cmp	r3, #0
    bd76:	d109      	bne.n	bd8c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    bd78:	b672      	cpsid	i
    bd7a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    bd7e:	2200      	movs	r2, #0
    bd80:	4b07      	ldr	r3, [pc, #28]	; (bda0 <cpu_irq_enter_critical+0x38>)
    bd82:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    bd84:	3201      	adds	r2, #1
    bd86:	4b07      	ldr	r3, [pc, #28]	; (bda4 <cpu_irq_enter_critical+0x3c>)
    bd88:	701a      	strb	r2, [r3, #0]
    bd8a:	e002      	b.n	bd92 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    bd8c:	2200      	movs	r2, #0
    bd8e:	4b05      	ldr	r3, [pc, #20]	; (bda4 <cpu_irq_enter_critical+0x3c>)
    bd90:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    bd92:	4a02      	ldr	r2, [pc, #8]	; (bd9c <cpu_irq_enter_critical+0x34>)
    bd94:	6813      	ldr	r3, [r2, #0]
    bd96:	3301      	adds	r3, #1
    bd98:	6013      	str	r3, [r2, #0]
}
    bd9a:	4770      	bx	lr
    bd9c:	200000b8 	.word	0x200000b8
    bda0:	2000000a 	.word	0x2000000a
    bda4:	200000bc 	.word	0x200000bc

0000bda8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    bda8:	4b08      	ldr	r3, [pc, #32]	; (bdcc <cpu_irq_leave_critical+0x24>)
    bdaa:	681a      	ldr	r2, [r3, #0]
    bdac:	3a01      	subs	r2, #1
    bdae:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    bdb0:	681b      	ldr	r3, [r3, #0]
    bdb2:	2b00      	cmp	r3, #0
    bdb4:	d109      	bne.n	bdca <cpu_irq_leave_critical+0x22>
    bdb6:	4b06      	ldr	r3, [pc, #24]	; (bdd0 <cpu_irq_leave_critical+0x28>)
    bdb8:	781b      	ldrb	r3, [r3, #0]
    bdba:	2b00      	cmp	r3, #0
    bdbc:	d005      	beq.n	bdca <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    bdbe:	2201      	movs	r2, #1
    bdc0:	4b04      	ldr	r3, [pc, #16]	; (bdd4 <cpu_irq_leave_critical+0x2c>)
    bdc2:	701a      	strb	r2, [r3, #0]
    bdc4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    bdc8:	b662      	cpsie	i
	}
}
    bdca:	4770      	bx	lr
    bdcc:	200000b8 	.word	0x200000b8
    bdd0:	200000bc 	.word	0x200000bc
    bdd4:	2000000a 	.word	0x2000000a

0000bdd8 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    bdd8:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    bdda:	2a00      	cmp	r2, #0
    bddc:	d10d      	bne.n	bdfa <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    bdde:	008b      	lsls	r3, r1, #2
    bde0:	4a07      	ldr	r2, [pc, #28]	; (be00 <extint_register_callback+0x28>)
    bde2:	589b      	ldr	r3, [r3, r2]
    bde4:	2b00      	cmp	r3, #0
    bde6:	d103      	bne.n	bdf0 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    bde8:	0089      	lsls	r1, r1, #2
    bdea:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    bdec:	2300      	movs	r3, #0
    bdee:	e004      	b.n	bdfa <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    bdf0:	4283      	cmp	r3, r0
    bdf2:	d001      	beq.n	bdf8 <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    bdf4:	231d      	movs	r3, #29
    bdf6:	e000      	b.n	bdfa <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    bdf8:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    bdfa:	0018      	movs	r0, r3
    bdfc:	4770      	bx	lr
    bdfe:	46c0      	nop			; (mov r8, r8)
    be00:	200003f4 	.word	0x200003f4

0000be04 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    be04:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    be06:	2900      	cmp	r1, #0
    be08:	d107      	bne.n	be1a <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    be0a:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    be0c:	281f      	cmp	r0, #31
    be0e:	d800      	bhi.n	be12 <extint_chan_enable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    be10:	4a03      	ldr	r2, [pc, #12]	; (be20 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    be12:	2301      	movs	r3, #1
    be14:	4083      	lsls	r3, r0
    be16:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    be18:	2300      	movs	r3, #0
}
    be1a:	0018      	movs	r0, r3
    be1c:	4770      	bx	lr
    be1e:	46c0      	nop			; (mov r8, r8)
    be20:	40001800 	.word	0x40001800

0000be24 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    be24:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    be26:	2900      	cmp	r1, #0
    be28:	d107      	bne.n	be3a <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    be2a:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    be2c:	281f      	cmp	r0, #31
    be2e:	d800      	bhi.n	be32 <extint_chan_disable_callback+0xe>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    be30:	4a03      	ldr	r2, [pc, #12]	; (be40 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
    be32:	2301      	movs	r3, #1
    be34:	4083      	lsls	r3, r0
    be36:	6093      	str	r3, [r2, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    be38:	2300      	movs	r3, #0
}
    be3a:	0018      	movs	r0, r3
    be3c:	4770      	bx	lr
    be3e:	46c0      	nop			; (mov r8, r8)
    be40:	40001800 	.word	0x40001800

0000be44 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    be44:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    be46:	2200      	movs	r2, #0
    be48:	4b15      	ldr	r3, [pc, #84]	; (bea0 <EIC_Handler+0x5c>)
    be4a:	701a      	strb	r2, [r3, #0]
    be4c:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    be4e:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    be50:	4e14      	ldr	r6, [pc, #80]	; (bea4 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    be52:	4c13      	ldr	r4, [pc, #76]	; (bea0 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    be54:	2b1f      	cmp	r3, #31
    be56:	d919      	bls.n	be8c <EIC_Handler+0x48>
    be58:	e00f      	b.n	be7a <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    be5a:	2100      	movs	r1, #0
    be5c:	e000      	b.n	be60 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    be5e:	4912      	ldr	r1, [pc, #72]	; (bea8 <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    be60:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    be62:	009b      	lsls	r3, r3, #2
    be64:	599b      	ldr	r3, [r3, r6]
    be66:	2b00      	cmp	r3, #0
    be68:	d000      	beq.n	be6c <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    be6a:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    be6c:	7823      	ldrb	r3, [r4, #0]
    be6e:	3301      	adds	r3, #1
    be70:	b2db      	uxtb	r3, r3
    be72:	7023      	strb	r3, [r4, #0]
    be74:	2b0f      	cmp	r3, #15
    be76:	d9ed      	bls.n	be54 <EIC_Handler+0x10>
    be78:	e011      	b.n	be9e <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    be7a:	0029      	movs	r1, r5
    be7c:	4019      	ands	r1, r3
    be7e:	2201      	movs	r2, #1
    be80:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    be82:	2100      	movs	r1, #0
    be84:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    be86:	4211      	tst	r1, r2
    be88:	d1e7      	bne.n	be5a <EIC_Handler+0x16>
    be8a:	e7ef      	b.n	be6c <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    be8c:	0029      	movs	r1, r5
    be8e:	4019      	ands	r1, r3
    be90:	2201      	movs	r2, #1
    be92:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    be94:	4904      	ldr	r1, [pc, #16]	; (bea8 <EIC_Handler+0x64>)
    be96:	6909      	ldr	r1, [r1, #16]
    be98:	4211      	tst	r1, r2
    be9a:	d1e0      	bne.n	be5e <EIC_Handler+0x1a>
    be9c:	e7e6      	b.n	be6c <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    be9e:	bd70      	pop	{r4, r5, r6, pc}
    bea0:	200003f0 	.word	0x200003f0
    bea4:	200003f4 	.word	0x200003f4
    bea8:	40001800 	.word	0x40001800

0000beac <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    beac:	4a04      	ldr	r2, [pc, #16]	; (bec0 <_extint_enable+0x14>)
    beae:	7811      	ldrb	r1, [r2, #0]
    beb0:	2302      	movs	r3, #2
    beb2:	430b      	orrs	r3, r1
    beb4:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    beb6:	7853      	ldrb	r3, [r2, #1]
    beb8:	b25b      	sxtb	r3, r3
    beba:	2b00      	cmp	r3, #0
    bebc:	dbfb      	blt.n	beb6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    bebe:	4770      	bx	lr
    bec0:	40001800 	.word	0x40001800

0000bec4 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    bec4:	b500      	push	{lr}
    bec6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    bec8:	4a12      	ldr	r2, [pc, #72]	; (bf14 <_system_extint_init+0x50>)
    beca:	6991      	ldr	r1, [r2, #24]
    becc:	2340      	movs	r3, #64	; 0x40
    bece:	430b      	orrs	r3, r1
    bed0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    bed2:	a901      	add	r1, sp, #4
    bed4:	2300      	movs	r3, #0
    bed6:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    bed8:	2005      	movs	r0, #5
    beda:	4b0f      	ldr	r3, [pc, #60]	; (bf18 <_system_extint_init+0x54>)
    bedc:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    bede:	2005      	movs	r0, #5
    bee0:	4b0e      	ldr	r3, [pc, #56]	; (bf1c <_system_extint_init+0x58>)
    bee2:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    bee4:	4a0e      	ldr	r2, [pc, #56]	; (bf20 <_system_extint_init+0x5c>)
    bee6:	7811      	ldrb	r1, [r2, #0]
    bee8:	2301      	movs	r3, #1
    beea:	430b      	orrs	r3, r1
    beec:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    beee:	7853      	ldrb	r3, [r2, #1]
    bef0:	b25b      	sxtb	r3, r3
    bef2:	2b00      	cmp	r3, #0
    bef4:	dbfb      	blt.n	beee <_system_extint_init+0x2a>
    bef6:	4b0b      	ldr	r3, [pc, #44]	; (bf24 <_system_extint_init+0x60>)
    bef8:	0019      	movs	r1, r3
    befa:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    befc:	2200      	movs	r2, #0
    befe:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    bf00:	4299      	cmp	r1, r3
    bf02:	d1fc      	bne.n	befe <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    bf04:	2210      	movs	r2, #16
    bf06:	4b08      	ldr	r3, [pc, #32]	; (bf28 <_system_extint_init+0x64>)
    bf08:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    bf0a:	4b08      	ldr	r3, [pc, #32]	; (bf2c <_system_extint_init+0x68>)
    bf0c:	4798      	blx	r3
}
    bf0e:	b003      	add	sp, #12
    bf10:	bd00      	pop	{pc}
    bf12:	46c0      	nop			; (mov r8, r8)
    bf14:	40000400 	.word	0x40000400
    bf18:	0000d8f5 	.word	0x0000d8f5
    bf1c:	0000d869 	.word	0x0000d869
    bf20:	40001800 	.word	0x40001800
    bf24:	200003f4 	.word	0x200003f4
    bf28:	e000e100 	.word	0xe000e100
    bf2c:	0000bead 	.word	0x0000bead

0000bf30 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    bf30:	2300      	movs	r3, #0
    bf32:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    bf34:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    bf36:	2201      	movs	r2, #1
    bf38:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    bf3a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    bf3c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    bf3e:	3302      	adds	r3, #2
    bf40:	72c3      	strb	r3, [r0, #11]
}
    bf42:	4770      	bx	lr

0000bf44 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    bf44:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf46:	b083      	sub	sp, #12
    bf48:	0005      	movs	r5, r0
    bf4a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    bf4c:	a901      	add	r1, sp, #4
    bf4e:	2300      	movs	r3, #0
    bf50:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    bf52:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    bf54:	7923      	ldrb	r3, [r4, #4]
    bf56:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    bf58:	7a23      	ldrb	r3, [r4, #8]
    bf5a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    bf5c:	7820      	ldrb	r0, [r4, #0]
    bf5e:	4b14      	ldr	r3, [pc, #80]	; (bfb0 <extint_chan_set_config+0x6c>)
    bf60:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    bf62:	2000      	movs	r0, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    bf64:	2d1f      	cmp	r5, #31
    bf66:	d800      	bhi.n	bf6a <extint_chan_set_config+0x26>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    bf68:	4812      	ldr	r0, [pc, #72]	; (bfb4 <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    bf6a:	2107      	movs	r1, #7
    bf6c:	4029      	ands	r1, r5
    bf6e:	0089      	lsls	r1, r1, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    bf70:	7ae2      	ldrb	r2, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    bf72:	7aa3      	ldrb	r3, [r4, #10]
    bf74:	2b00      	cmp	r3, #0
    bf76:	d001      	beq.n	bf7c <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
    bf78:	2308      	movs	r3, #8
    bf7a:	431a      	orrs	r2, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    bf7c:	08eb      	lsrs	r3, r5, #3
    bf7e:	009b      	lsls	r3, r3, #2
    bf80:	18c3      	adds	r3, r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    bf82:	699e      	ldr	r6, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    bf84:	270f      	movs	r7, #15
    bf86:	408f      	lsls	r7, r1
    bf88:	43be      	bics	r6, r7
    bf8a:	408a      	lsls	r2, r1
    bf8c:	4332      	orrs	r2, r6
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    bf8e:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    bf90:	7a63      	ldrb	r3, [r4, #9]
    bf92:	2b00      	cmp	r3, #0
    bf94:	d005      	beq.n	bfa2 <extint_chan_set_config+0x5e>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    bf96:	6942      	ldr	r2, [r0, #20]
    bf98:	2301      	movs	r3, #1
    bf9a:	40ab      	lsls	r3, r5
    bf9c:	4313      	orrs	r3, r2
    bf9e:	6143      	str	r3, [r0, #20]
    bfa0:	e004      	b.n	bfac <extint_chan_set_config+0x68>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    bfa2:	6943      	ldr	r3, [r0, #20]
    bfa4:	2201      	movs	r2, #1
    bfa6:	40aa      	lsls	r2, r5
    bfa8:	4393      	bics	r3, r2
    bfaa:	6143      	str	r3, [r0, #20]
	}
}
    bfac:	b003      	add	sp, #12
    bfae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bfb0:	0000d9ed 	.word	0x0000d9ed
    bfb4:	40001800 	.word	0x40001800

0000bfb8 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    bfb8:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    bfba:	4a1e      	ldr	r2, [pc, #120]	; (c034 <nvm_set_config+0x7c>)
    bfbc:	69d1      	ldr	r1, [r2, #28]
    bfbe:	2304      	movs	r3, #4
    bfc0:	430b      	orrs	r3, r1
    bfc2:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    bfc4:	4b1c      	ldr	r3, [pc, #112]	; (c038 <nvm_set_config+0x80>)
    bfc6:	2220      	movs	r2, #32
    bfc8:	32ff      	adds	r2, #255	; 0xff
    bfca:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    bfcc:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    bfce:	2305      	movs	r3, #5

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    bfd0:	07d2      	lsls	r2, r2, #31
    bfd2:	d52c      	bpl.n	c02e <nvm_set_config+0x76>
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    bfd4:	7801      	ldrb	r1, [r0, #0]
    bfd6:	0209      	lsls	r1, r1, #8
    bfd8:	22c0      	movs	r2, #192	; 0xc0
    bfda:	0092      	lsls	r2, r2, #2
    bfdc:	4011      	ands	r1, r2
    bfde:	7842      	ldrb	r2, [r0, #1]
    bfe0:	01d2      	lsls	r2, r2, #7
    bfe2:	33fa      	adds	r3, #250	; 0xfa
    bfe4:	4013      	ands	r3, r2
    bfe6:	4319      	orrs	r1, r3
    bfe8:	7882      	ldrb	r2, [r0, #2]
    bfea:	0052      	lsls	r2, r2, #1
    bfec:	231e      	movs	r3, #30
    bfee:	401a      	ands	r2, r3
    bff0:	000b      	movs	r3, r1
    bff2:	4313      	orrs	r3, r2
    bff4:	78c2      	ldrb	r2, [r0, #3]
    bff6:	0492      	lsls	r2, r2, #18
    bff8:	2180      	movs	r1, #128	; 0x80
    bffa:	02c9      	lsls	r1, r1, #11
    bffc:	400a      	ands	r2, r1
    bffe:	4313      	orrs	r3, r2
    c000:	7902      	ldrb	r2, [r0, #4]
    c002:	0412      	lsls	r2, r2, #16
    c004:	21c0      	movs	r1, #192	; 0xc0
    c006:	0289      	lsls	r1, r1, #10
    c008:	400a      	ands	r2, r1
    c00a:	4313      	orrs	r3, r2
		return STATUS_BUSY;
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
    c00c:	4a0a      	ldr	r2, [pc, #40]	; (c038 <nvm_set_config+0x80>)
    c00e:	6053      	str	r3, [r2, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    c010:	6893      	ldr	r3, [r2, #8]
    c012:	035b      	lsls	r3, r3, #13
    c014:	0f5b      	lsrs	r3, r3, #29
    c016:	4909      	ldr	r1, [pc, #36]	; (c03c <nvm_set_config+0x84>)
    c018:	2408      	movs	r4, #8
    c01a:	409c      	lsls	r4, r3
    c01c:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    c01e:	6893      	ldr	r3, [r2, #8]
    c020:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    c022:	7843      	ldrb	r3, [r0, #1]
    c024:	710b      	strb	r3, [r1, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    c026:	8b13      	ldrh	r3, [r2, #24]
    c028:	05db      	lsls	r3, r3, #23
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
    c02a:	0fdb      	lsrs	r3, r3, #31
    c02c:	011b      	lsls	r3, r3, #4
}
    c02e:	0018      	movs	r0, r3
    c030:	bd10      	pop	{r4, pc}
    c032:	46c0      	nop			; (mov r8, r8)
    c034:	40000400 	.word	0x40000400
    c038:	41004000 	.word	0x41004000
    c03c:	200000c0 	.word	0x200000c0

0000c040 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    c040:	b530      	push	{r4, r5, lr}
    c042:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    c044:	4a23      	ldr	r2, [pc, #140]	; (c0d4 <nvm_execute_command+0x94>)
    c046:	8810      	ldrh	r0, [r2, #0]
    c048:	8853      	ldrh	r3, [r2, #2]
    c04a:	4343      	muls	r3, r0
    c04c:	428b      	cmp	r3, r1
    c04e:	d206      	bcs.n	c05e <nvm_execute_command+0x1e>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    c050:	2018      	movs	r0, #24
{
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    c052:	2280      	movs	r2, #128	; 0x80
    c054:	0192      	lsls	r2, r2, #6
    c056:	4b20      	ldr	r3, [pc, #128]	; (c0d8 <nvm_execute_command+0x98>)
    c058:	18cb      	adds	r3, r1, r3
    c05a:	4293      	cmp	r3, r2
    c05c:	d838      	bhi.n	c0d0 <nvm_execute_command+0x90>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    c05e:	4b1f      	ldr	r3, [pc, #124]	; (c0dc <nvm_execute_command+0x9c>)
    c060:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    c062:	2280      	movs	r2, #128	; 0x80
    c064:	02d2      	lsls	r2, r2, #11
    c066:	432a      	orrs	r2, r5
    c068:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    c06a:	2220      	movs	r2, #32
    c06c:	32ff      	adds	r2, #255	; 0xff
    c06e:	831a      	strh	r2, [r3, #24]
    c070:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    c072:	07db      	lsls	r3, r3, #31
    c074:	d403      	bmi.n	c07e <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    c076:	4b19      	ldr	r3, [pc, #100]	; (c0dc <nvm_execute_command+0x9c>)
    c078:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    c07a:	2005      	movs	r0, #5
    c07c:	e028      	b.n	c0d0 <nvm_execute_command+0x90>
	}

	switch (command) {
    c07e:	2c45      	cmp	r4, #69	; 0x45
    c080:	d815      	bhi.n	c0ae <nvm_execute_command+0x6e>
    c082:	00a3      	lsls	r3, r4, #2
    c084:	4a16      	ldr	r2, [pc, #88]	; (c0e0 <nvm_execute_command+0xa0>)
    c086:	58d3      	ldr	r3, [r2, r3]
    c088:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    c08a:	4b14      	ldr	r3, [pc, #80]	; (c0dc <nvm_execute_command+0x9c>)
    c08c:	8b1b      	ldrh	r3, [r3, #24]
    c08e:	05db      	lsls	r3, r3, #23
    c090:	d503      	bpl.n	c09a <nvm_execute_command+0x5a>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    c092:	4b12      	ldr	r3, [pc, #72]	; (c0dc <nvm_execute_command+0x9c>)
    c094:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    c096:	2010      	movs	r0, #16
    c098:	e01a      	b.n	c0d0 <nvm_execute_command+0x90>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    c09a:	0889      	lsrs	r1, r1, #2
    c09c:	0049      	lsls	r1, r1, #1
    c09e:	4b0f      	ldr	r3, [pc, #60]	; (c0dc <nvm_execute_command+0x9c>)
    c0a0:	61d9      	str	r1, [r3, #28]
			break;
    c0a2:	e008      	b.n	c0b6 <nvm_execute_command+0x76>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    c0a4:	0889      	lsrs	r1, r1, #2
    c0a6:	0049      	lsls	r1, r1, #1
    c0a8:	4b0c      	ldr	r3, [pc, #48]	; (c0dc <nvm_execute_command+0x9c>)
    c0aa:	61d9      	str	r1, [r3, #28]
			break;
    c0ac:	e003      	b.n	c0b6 <nvm_execute_command+0x76>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    c0ae:	4b0b      	ldr	r3, [pc, #44]	; (c0dc <nvm_execute_command+0x9c>)
    c0b0:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    c0b2:	2017      	movs	r0, #23
    c0b4:	e00c      	b.n	c0d0 <nvm_execute_command+0x90>
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    c0b6:	20a5      	movs	r0, #165	; 0xa5
    c0b8:	0200      	lsls	r0, r0, #8
    c0ba:	4304      	orrs	r4, r0
    c0bc:	4b07      	ldr	r3, [pc, #28]	; (c0dc <nvm_execute_command+0x9c>)
    c0be:	801c      	strh	r4, [r3, #0]
    c0c0:	0019      	movs	r1, r3

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    c0c2:	2201      	movs	r2, #1
    c0c4:	7d0b      	ldrb	r3, [r1, #20]
    c0c6:	4213      	tst	r3, r2
    c0c8:	d0fc      	beq.n	c0c4 <nvm_execute_command+0x84>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    c0ca:	4b04      	ldr	r3, [pc, #16]	; (c0dc <nvm_execute_command+0x9c>)
    c0cc:	605d      	str	r5, [r3, #4]

	return STATUS_OK;
    c0ce:	2000      	movs	r0, #0
}
    c0d0:	bd30      	pop	{r4, r5, pc}
    c0d2:	46c0      	nop			; (mov r8, r8)
    c0d4:	200000c0 	.word	0x200000c0
    c0d8:	ff7fc000 	.word	0xff7fc000
    c0dc:	41004000 	.word	0x41004000
    c0e0:	00013e8c 	.word	0x00013e8c

0000c0e4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    c0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    c0e6:	4b24      	ldr	r3, [pc, #144]	; (c178 <nvm_write_buffer+0x94>)
    c0e8:	881d      	ldrh	r5, [r3, #0]
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
    c0ea:	885b      	ldrh	r3, [r3, #2]
    c0ec:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    c0ee:	2418      	movs	r4, #24
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
    c0f0:	4283      	cmp	r3, r0
    c0f2:	d33e      	bcc.n	c172 <nvm_write_buffer+0x8e>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    c0f4:	1e6b      	subs	r3, r5, #1
    c0f6:	4218      	tst	r0, r3
    c0f8:	d13b      	bne.n	c172 <nvm_write_buffer+0x8e>
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
    c0fa:	3c01      	subs	r4, #1
	if (destination_address & (_nvm_dev.page_size - 1)) {
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    c0fc:	4295      	cmp	r5, r2
    c0fe:	d338      	bcc.n	c172 <nvm_write_buffer+0x8e>
    c100:	4b1e      	ldr	r3, [pc, #120]	; (c17c <nvm_write_buffer+0x98>)
    c102:	7d1b      	ldrb	r3, [r3, #20]
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    c104:	3c12      	subs	r4, #18

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    c106:	07db      	lsls	r3, r3, #31
    c108:	d533      	bpl.n	c172 <nvm_write_buffer+0x8e>
		return STATUS_BUSY;
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    c10a:	4c1d      	ldr	r4, [pc, #116]	; (c180 <nvm_write_buffer+0x9c>)
    c10c:	4b1b      	ldr	r3, [pc, #108]	; (c17c <nvm_write_buffer+0x98>)
    c10e:	801c      	strh	r4, [r3, #0]
    c110:	001d      	movs	r5, r3

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    c112:	2401      	movs	r4, #1
    c114:	7d2b      	ldrb	r3, [r5, #20]
    c116:	4223      	tst	r3, r4
    c118:	d0fc      	beq.n	c114 <nvm_write_buffer+0x30>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    c11a:	2420      	movs	r4, #32
    c11c:	34ff      	adds	r4, #255	; 0xff
    c11e:	4b17      	ldr	r3, [pc, #92]	; (c17c <nvm_write_buffer+0x98>)
    c120:	831c      	strh	r4, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    c122:	0846      	lsrs	r6, r0, #1

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    c124:	2a00      	cmp	r2, #0
    c126:	d01f      	beq.n	c168 <nvm_write_buffer+0x84>
    c128:	0076      	lsls	r6, r6, #1
    c12a:	2300      	movs	r3, #0
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    c12c:	1e57      	subs	r7, r2, #1
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    c12e:	5ccd      	ldrb	r5, [r1, r3]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    c130:	42bb      	cmp	r3, r7
    c132:	db01      	blt.n	c138 <nvm_write_buffer+0x54>
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    c134:	b2ac      	uxth	r4, r5
    c136:	e003      	b.n	c140 <nvm_write_buffer+0x5c>

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
			data |= (buffer[i + 1] << 8);
    c138:	18cc      	adds	r4, r1, r3
    c13a:	7864      	ldrb	r4, [r4, #1]
    c13c:	0224      	lsls	r4, r4, #8
    c13e:	432c      	orrs	r4, r5
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    c140:	8034      	strh	r4, [r6, #0]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    c142:	3302      	adds	r3, #2
    c144:	b29b      	uxth	r3, r3
    c146:	3602      	adds	r6, #2
    c148:	429a      	cmp	r2, r3
    c14a:	d8f0      	bhi.n	c12e <nvm_write_buffer+0x4a>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    c14c:	4b0a      	ldr	r3, [pc, #40]	; (c178 <nvm_write_buffer+0x94>)
    c14e:	791b      	ldrb	r3, [r3, #4]
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    c150:	2400      	movs	r4, #0
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    c152:	2b00      	cmp	r3, #0
    c154:	d10d      	bne.n	c172 <nvm_write_buffer+0x8e>
    c156:	2a3f      	cmp	r2, #63	; 0x3f
    c158:	d80b      	bhi.n	c172 <nvm_write_buffer+0x8e>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    c15a:	2200      	movs	r2, #0
    c15c:	0001      	movs	r1, r0
    c15e:	2004      	movs	r0, #4
    c160:	4b08      	ldr	r3, [pc, #32]	; (c184 <nvm_write_buffer+0xa0>)
    c162:	4798      	blx	r3
    c164:	0004      	movs	r4, r0
    c166:	e004      	b.n	c172 <nvm_write_buffer+0x8e>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    c168:	4b03      	ldr	r3, [pc, #12]	; (c178 <nvm_write_buffer+0x94>)
    c16a:	791b      	ldrb	r3, [r3, #4]
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    c16c:	2400      	movs	r4, #0
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    c16e:	2b00      	cmp	r3, #0
    c170:	d0f3      	beq.n	c15a <nvm_write_buffer+0x76>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    c172:	0020      	movs	r0, r4
    c174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c176:	46c0      	nop			; (mov r8, r8)
    c178:	200000c0 	.word	0x200000c0
    c17c:	41004000 	.word	0x41004000
    c180:	ffffa544 	.word	0xffffa544
    c184:	0000c041 	.word	0x0000c041

0000c188 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    c188:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    c18a:	4b18      	ldr	r3, [pc, #96]	; (c1ec <nvm_read_buffer+0x64>)
    c18c:	881d      	ldrh	r5, [r3, #0]
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
	/* Check if the source address is valid */
	if (source_address >
    c18e:	885b      	ldrh	r3, [r3, #2]
    c190:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    c192:	2418      	movs	r4, #24
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
	/* Check if the source address is valid */
	if (source_address >
    c194:	4283      	cmp	r3, r0
    c196:	d326      	bcc.n	c1e6 <nvm_read_buffer+0x5e>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    c198:	1e6b      	subs	r3, r5, #1
    c19a:	4218      	tst	r0, r3
    c19c:	d123      	bne.n	c1e6 <nvm_read_buffer+0x5e>
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
    c19e:	3c01      	subs	r4, #1
	if (source_address & (_nvm_dev.page_size - 1)) {
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    c1a0:	4295      	cmp	r5, r2
    c1a2:	d320      	bcc.n	c1e6 <nvm_read_buffer+0x5e>
    c1a4:	4b12      	ldr	r3, [pc, #72]	; (c1f0 <nvm_read_buffer+0x68>)
    c1a6:	7d1b      	ldrb	r3, [r3, #20]
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    c1a8:	3c12      	subs	r4, #18

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    c1aa:	07db      	lsls	r3, r3, #31
    c1ac:	d51b      	bpl.n	c1e6 <nvm_read_buffer+0x5e>
		return STATUS_BUSY;
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    c1ae:	2420      	movs	r4, #32
    c1b0:	34ff      	adds	r4, #255	; 0xff
    c1b2:	4b0f      	ldr	r3, [pc, #60]	; (c1f0 <nvm_read_buffer+0x68>)
    c1b4:	831c      	strh	r4, [r3, #24]

	uint32_t page_address = source_address / 2;
    c1b6:	0840      	lsrs	r0, r0, #1

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    c1b8:	2a00      	cmp	r2, #0
    c1ba:	d013      	beq.n	c1e4 <nvm_read_buffer+0x5c>
    c1bc:	0040      	lsls	r0, r0, #1
    c1be:	2500      	movs	r5, #0
		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    c1c0:	1e56      	subs	r6, r2, #1
    c1c2:	182b      	adds	r3, r5, r0

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
    c1c4:	881c      	ldrh	r4, [r3, #0]
    c1c6:	b2a4      	uxth	r4, r4

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
    c1c8:	042b      	lsls	r3, r5, #16
    c1ca:	0c1b      	lsrs	r3, r3, #16
    c1cc:	54cc      	strb	r4, [r1, r3]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    c1ce:	42b3      	cmp	r3, r6
    c1d0:	da02      	bge.n	c1d8 <nvm_read_buffer+0x50>
			buffer[i + 1] = (data >> 8);
    c1d2:	18cb      	adds	r3, r1, r3
    c1d4:	0a24      	lsrs	r4, r4, #8
    c1d6:	705c      	strb	r4, [r3, #1]
    c1d8:	3502      	adds	r5, #2

	uint32_t page_address = source_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    c1da:	b2ab      	uxth	r3, r5
    c1dc:	429a      	cmp	r2, r3
    c1de:	d8f0      	bhi.n	c1c2 <nvm_read_buffer+0x3a>
		if (i < (length - 1)) {
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
    c1e0:	2400      	movs	r4, #0
    c1e2:	e000      	b.n	c1e6 <nvm_read_buffer+0x5e>
    c1e4:	2400      	movs	r4, #0
}
    c1e6:	0020      	movs	r0, r4
    c1e8:	bd70      	pop	{r4, r5, r6, pc}
    c1ea:	46c0      	nop			; (mov r8, r8)
    c1ec:	200000c0 	.word	0x200000c0
    c1f0:	41004000 	.word	0x41004000

0000c1f4 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    c1f4:	4b13      	ldr	r3, [pc, #76]	; (c244 <nvm_erase_row+0x50>)
    c1f6:	881a      	ldrh	r2, [r3, #0]
#ifdef FEATURE_NVM_RWWEE
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
    c1f8:	885b      	ldrh	r3, [r3, #2]
    c1fa:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    c1fc:	2118      	movs	r1, #24
#ifdef FEATURE_NVM_RWWEE
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
    c1fe:	4283      	cmp	r3, r0
    c200:	d31d      	bcc.n	c23e <nvm_erase_row+0x4a>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    c202:	0092      	lsls	r2, r2, #2
    c204:	3a01      	subs	r2, #1
    c206:	4210      	tst	r0, r2
    c208:	d119      	bne.n	c23e <nvm_erase_row+0x4a>
    c20a:	4b0f      	ldr	r3, [pc, #60]	; (c248 <nvm_erase_row+0x54>)
    c20c:	7d1b      	ldrb	r3, [r3, #20]
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    c20e:	3913      	subs	r1, #19

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    c210:	07db      	lsls	r3, r3, #31
    c212:	d514      	bpl.n	c23e <nvm_erase_row+0x4a>
		return STATUS_BUSY;
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    c214:	4b0c      	ldr	r3, [pc, #48]	; (c248 <nvm_erase_row+0x54>)
    c216:	2220      	movs	r2, #32
    c218:	32ff      	adds	r2, #255	; 0xff
    c21a:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    c21c:	0880      	lsrs	r0, r0, #2
    c21e:	0040      	lsls	r0, r0, #1
    c220:	61d8      	str	r0, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    c222:	4a0a      	ldr	r2, [pc, #40]	; (c24c <nvm_erase_row+0x58>)
    c224:	801a      	strh	r2, [r3, #0]
    c226:	0019      	movs	r1, r3
#endif

	while (!nvm_is_ready()) {
    c228:	2201      	movs	r2, #1
    c22a:	7d0b      	ldrb	r3, [r1, #20]
    c22c:	4213      	tst	r3, r2
    c22e:	d0fc      	beq.n	c22a <nvm_erase_row+0x36>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    c230:	4b05      	ldr	r3, [pc, #20]	; (c248 <nvm_erase_row+0x54>)
    c232:	8b19      	ldrh	r1, [r3, #24]
    c234:	231c      	movs	r3, #28
    c236:	4019      	ands	r1, r3
		return STATUS_ABORTED;
	}

	return STATUS_OK;
    c238:	1e48      	subs	r0, r1, #1
    c23a:	4181      	sbcs	r1, r0
    c23c:	0089      	lsls	r1, r1, #2
}
    c23e:	0008      	movs	r0, r1
    c240:	4770      	bx	lr
    c242:	46c0      	nop			; (mov r8, r8)
    c244:	200000c0 	.word	0x200000c0
    c248:	41004000 	.word	0x41004000
    c24c:	ffffa502 	.word	0xffffa502

0000c250 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    c250:	b500      	push	{lr}
    c252:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    c254:	ab01      	add	r3, sp, #4
    c256:	2280      	movs	r2, #128	; 0x80
    c258:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    c25a:	780a      	ldrb	r2, [r1, #0]
    c25c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    c25e:	784a      	ldrb	r2, [r1, #1]
    c260:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    c262:	788a      	ldrb	r2, [r1, #2]
    c264:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    c266:	0019      	movs	r1, r3
    c268:	4b01      	ldr	r3, [pc, #4]	; (c270 <port_pin_set_config+0x20>)
    c26a:	4798      	blx	r3
}
    c26c:	b003      	add	sp, #12
    c26e:	bd00      	pop	{pc}
    c270:	0000d9ed 	.word	0x0000d9ed

0000c274 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    c274:	b5f0      	push	{r4, r5, r6, r7, lr}
    c276:	465f      	mov	r7, fp
    c278:	4656      	mov	r6, sl
    c27a:	464d      	mov	r5, r9
    c27c:	4644      	mov	r4, r8
    c27e:	b4f0      	push	{r4, r5, r6, r7}
    c280:	b087      	sub	sp, #28
    c282:	4680      	mov	r8, r0
    c284:	9104      	str	r1, [sp, #16]
    c286:	0016      	movs	r6, r2
    c288:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    c28a:	2200      	movs	r2, #0
    c28c:	2300      	movs	r3, #0
    c28e:	2100      	movs	r1, #0
    c290:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    c292:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    c294:	2001      	movs	r0, #1
    c296:	0021      	movs	r1, r4
    c298:	9600      	str	r6, [sp, #0]
    c29a:	9701      	str	r7, [sp, #4]
    c29c:	465c      	mov	r4, fp
    c29e:	9403      	str	r4, [sp, #12]
    c2a0:	4644      	mov	r4, r8
    c2a2:	9405      	str	r4, [sp, #20]
    c2a4:	2420      	movs	r4, #32
    c2a6:	4264      	negs	r4, r4
    c2a8:	190c      	adds	r4, r1, r4
    c2aa:	d403      	bmi.n	c2b4 <long_division+0x40>
    c2ac:	0005      	movs	r5, r0
    c2ae:	40a5      	lsls	r5, r4
    c2b0:	46a8      	mov	r8, r5
    c2b2:	e004      	b.n	c2be <long_division+0x4a>
    c2b4:	2420      	movs	r4, #32
    c2b6:	1a64      	subs	r4, r4, r1
    c2b8:	0005      	movs	r5, r0
    c2ba:	40e5      	lsrs	r5, r4
    c2bc:	46a8      	mov	r8, r5
    c2be:	0004      	movs	r4, r0
    c2c0:	408c      	lsls	r4, r1
    c2c2:	46a1      	mov	r9, r4

		r = r << 1;
    c2c4:	0014      	movs	r4, r2
    c2c6:	001d      	movs	r5, r3
    c2c8:	18a4      	adds	r4, r4, r2
    c2ca:	415d      	adcs	r5, r3
    c2cc:	0022      	movs	r2, r4
    c2ce:	002b      	movs	r3, r5

		if (n & bit_shift) {
    c2d0:	9e05      	ldr	r6, [sp, #20]
    c2d2:	464f      	mov	r7, r9
    c2d4:	403e      	ands	r6, r7
    c2d6:	46b2      	mov	sl, r6
    c2d8:	9e04      	ldr	r6, [sp, #16]
    c2da:	4647      	mov	r7, r8
    c2dc:	403e      	ands	r6, r7
    c2de:	46b4      	mov	ip, r6
    c2e0:	4656      	mov	r6, sl
    c2e2:	4667      	mov	r7, ip
    c2e4:	433e      	orrs	r6, r7
    c2e6:	d003      	beq.n	c2f0 <long_division+0x7c>
			r |= 0x01;
    c2e8:	0006      	movs	r6, r0
    c2ea:	4326      	orrs	r6, r4
    c2ec:	0032      	movs	r2, r6
    c2ee:	002b      	movs	r3, r5
		}

		if (r >= d) {
    c2f0:	9c00      	ldr	r4, [sp, #0]
    c2f2:	9d01      	ldr	r5, [sp, #4]
    c2f4:	429d      	cmp	r5, r3
    c2f6:	d80e      	bhi.n	c316 <long_division+0xa2>
    c2f8:	d101      	bne.n	c2fe <long_division+0x8a>
    c2fa:	4294      	cmp	r4, r2
    c2fc:	d80b      	bhi.n	c316 <long_division+0xa2>
			r = r - d;
    c2fe:	9c00      	ldr	r4, [sp, #0]
    c300:	9d01      	ldr	r5, [sp, #4]
    c302:	1b12      	subs	r2, r2, r4
    c304:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    c306:	465c      	mov	r4, fp
    c308:	464d      	mov	r5, r9
    c30a:	432c      	orrs	r4, r5
    c30c:	46a3      	mov	fp, r4
    c30e:	9c03      	ldr	r4, [sp, #12]
    c310:	4645      	mov	r5, r8
    c312:	432c      	orrs	r4, r5
    c314:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    c316:	3901      	subs	r1, #1
    c318:	d2c4      	bcs.n	c2a4 <long_division+0x30>
    c31a:	9b03      	ldr	r3, [sp, #12]
			q |= bit_shift;
		}
	}

	return q;
}
    c31c:	4658      	mov	r0, fp
    c31e:	0019      	movs	r1, r3
    c320:	b007      	add	sp, #28
    c322:	bc3c      	pop	{r2, r3, r4, r5}
    c324:	4690      	mov	r8, r2
    c326:	4699      	mov	r9, r3
    c328:	46a2      	mov	sl, r4
    c32a:	46ab      	mov	fp, r5
    c32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c32e:	46c0      	nop			; (mov r8, r8)

0000c330 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    c330:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    c332:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    c334:	2340      	movs	r3, #64	; 0x40
    c336:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    c338:	4281      	cmp	r1, r0
    c33a:	d201      	bcs.n	c340 <_sercom_get_sync_baud_val+0x10>
    c33c:	e00a      	b.n	c354 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
    c33e:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    c340:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    c342:	1c63      	adds	r3, r4, #1
    c344:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    c346:	4288      	cmp	r0, r1
    c348:	d9f9      	bls.n	c33e <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    c34a:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    c34c:	2cff      	cmp	r4, #255	; 0xff
    c34e:	d801      	bhi.n	c354 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    c350:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    c352:	2300      	movs	r3, #0
	}
}
    c354:	0018      	movs	r0, r3
    c356:	bd10      	pop	{r4, pc}

0000c358 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    c358:	b5f0      	push	{r4, r5, r6, r7, lr}
    c35a:	b083      	sub	sp, #12
    c35c:	000f      	movs	r7, r1
    c35e:	0016      	movs	r6, r2
    c360:	aa08      	add	r2, sp, #32
    c362:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    c364:	0004      	movs	r4, r0
    c366:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    c368:	2240      	movs	r2, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    c36a:	42bc      	cmp	r4, r7
    c36c:	d836      	bhi.n	c3dc <_sercom_get_async_baud_val+0x84>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    c36e:	2b00      	cmp	r3, #0
    c370:	d112      	bne.n	c398 <_sercom_get_async_baud_val+0x40>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
    c372:	0002      	movs	r2, r0
    c374:	0008      	movs	r0, r1
    c376:	2100      	movs	r1, #0
    c378:	4c1a      	ldr	r4, [pc, #104]	; (c3e4 <_sercom_get_async_baud_val+0x8c>)
    c37a:	47a0      	blx	r4
    c37c:	0001      	movs	r1, r0
    c37e:	003a      	movs	r2, r7
    c380:	2300      	movs	r3, #0
    c382:	2000      	movs	r0, #0
    c384:	4c18      	ldr	r4, [pc, #96]	; (c3e8 <_sercom_get_async_baud_val+0x90>)
    c386:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
    c388:	2200      	movs	r2, #0
    c38a:	2301      	movs	r3, #1
    c38c:	1a12      	subs	r2, r2, r0
    c38e:	418b      	sbcs	r3, r1
    c390:	0c12      	lsrs	r2, r2, #16
    c392:	041b      	lsls	r3, r3, #16
    c394:	431a      	orrs	r2, r3
    c396:	e01f      	b.n	c3d8 <_sercom_get_async_baud_val+0x80>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    c398:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    c39a:	2b01      	cmp	r3, #1
    c39c:	d11c      	bne.n	c3d8 <_sercom_get_async_baud_val+0x80>
		temp1 = ((uint64_t)baudrate * sample_num);
    c39e:	000a      	movs	r2, r1
    c3a0:	2300      	movs	r3, #0
    c3a2:	2100      	movs	r1, #0
    c3a4:	4c0f      	ldr	r4, [pc, #60]	; (c3e4 <_sercom_get_async_baud_val+0x8c>)
    c3a6:	47a0      	blx	r4
    c3a8:	0002      	movs	r2, r0
    c3aa:	000b      	movs	r3, r1
    c3ac:	9200      	str	r2, [sp, #0]
    c3ae:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    c3b0:	0038      	movs	r0, r7
    c3b2:	2100      	movs	r1, #0
    c3b4:	4c0c      	ldr	r4, [pc, #48]	; (c3e8 <_sercom_get_async_baud_val+0x90>)
    c3b6:	47a0      	blx	r4
    c3b8:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    c3ba:	2240      	movs	r2, #64	; 0x40
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		temp1 = ((uint64_t)baudrate * sample_num);
		baud_int = long_division( peripheral_clock, temp1);
		if(baud_int > BAUD_INT_MAX) {
    c3bc:	2380      	movs	r3, #128	; 0x80
    c3be:	019b      	lsls	r3, r3, #6
    c3c0:	4298      	cmp	r0, r3
    c3c2:	d80b      	bhi.n	c3dc <_sercom_get_async_baud_val+0x84>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    c3c4:	0f79      	lsrs	r1, r7, #29
    c3c6:	00f8      	lsls	r0, r7, #3
    c3c8:	9a00      	ldr	r2, [sp, #0]
    c3ca:	9b01      	ldr	r3, [sp, #4]
    c3cc:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
    c3ce:	00ea      	lsls	r2, r5, #3
    c3d0:	1a82      	subs	r2, r0, r2
    c3d2:	b2d2      	uxtb	r2, r2
    c3d4:	0352      	lsls	r2, r2, #13
    c3d6:	432a      	orrs	r2, r5
	}

	*baudval = baud_calculated;
    c3d8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    c3da:	2200      	movs	r2, #0
}
    c3dc:	0010      	movs	r0, r2
    c3de:	b003      	add	sp, #12
    c3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c3e2:	46c0      	nop			; (mov r8, r8)
    c3e4:	00011641 	.word	0x00011641
    c3e8:	0000c275 	.word	0x0000c275

0000c3ec <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    c3ec:	b510      	push	{r4, lr}
    c3ee:	b082      	sub	sp, #8
    c3f0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    c3f2:	4b0e      	ldr	r3, [pc, #56]	; (c42c <sercom_set_gclk_generator+0x40>)
    c3f4:	781b      	ldrb	r3, [r3, #0]
    c3f6:	2b00      	cmp	r3, #0
    c3f8:	d001      	beq.n	c3fe <sercom_set_gclk_generator+0x12>
    c3fa:	2900      	cmp	r1, #0
    c3fc:	d00d      	beq.n	c41a <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    c3fe:	a901      	add	r1, sp, #4
    c400:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    c402:	2013      	movs	r0, #19
    c404:	4b0a      	ldr	r3, [pc, #40]	; (c430 <sercom_set_gclk_generator+0x44>)
    c406:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    c408:	2013      	movs	r0, #19
    c40a:	4b0a      	ldr	r3, [pc, #40]	; (c434 <sercom_set_gclk_generator+0x48>)
    c40c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    c40e:	4b07      	ldr	r3, [pc, #28]	; (c42c <sercom_set_gclk_generator+0x40>)
    c410:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    c412:	2201      	movs	r2, #1
    c414:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    c416:	2000      	movs	r0, #0
    c418:	e006      	b.n	c428 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    c41a:	4b04      	ldr	r3, [pc, #16]	; (c42c <sercom_set_gclk_generator+0x40>)
    c41c:	785b      	ldrb	r3, [r3, #1]
    c41e:	4283      	cmp	r3, r0
    c420:	d001      	beq.n	c426 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    c422:	201d      	movs	r0, #29
    c424:	e000      	b.n	c428 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    c426:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    c428:	b002      	add	sp, #8
    c42a:	bd10      	pop	{r4, pc}
    c42c:	200000c8 	.word	0x200000c8
    c430:	0000d8f5 	.word	0x0000d8f5
    c434:	0000d869 	.word	0x0000d869

0000c438 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    c438:	4b44      	ldr	r3, [pc, #272]	; (c54c <_sercom_get_default_pad+0x114>)
    c43a:	4298      	cmp	r0, r3
    c43c:	d033      	beq.n	c4a6 <_sercom_get_default_pad+0x6e>
    c43e:	d806      	bhi.n	c44e <_sercom_get_default_pad+0x16>
    c440:	4b43      	ldr	r3, [pc, #268]	; (c550 <_sercom_get_default_pad+0x118>)
    c442:	4298      	cmp	r0, r3
    c444:	d00d      	beq.n	c462 <_sercom_get_default_pad+0x2a>
    c446:	4b43      	ldr	r3, [pc, #268]	; (c554 <_sercom_get_default_pad+0x11c>)
    c448:	4298      	cmp	r0, r3
    c44a:	d01b      	beq.n	c484 <_sercom_get_default_pad+0x4c>
    c44c:	e06f      	b.n	c52e <_sercom_get_default_pad+0xf6>
    c44e:	4b42      	ldr	r3, [pc, #264]	; (c558 <_sercom_get_default_pad+0x120>)
    c450:	4298      	cmp	r0, r3
    c452:	d04a      	beq.n	c4ea <_sercom_get_default_pad+0xb2>
    c454:	4b41      	ldr	r3, [pc, #260]	; (c55c <_sercom_get_default_pad+0x124>)
    c456:	4298      	cmp	r0, r3
    c458:	d058      	beq.n	c50c <_sercom_get_default_pad+0xd4>
    c45a:	4b41      	ldr	r3, [pc, #260]	; (c560 <_sercom_get_default_pad+0x128>)
    c45c:	4298      	cmp	r0, r3
    c45e:	d166      	bne.n	c52e <_sercom_get_default_pad+0xf6>
    c460:	e032      	b.n	c4c8 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c462:	2901      	cmp	r1, #1
    c464:	d006      	beq.n	c474 <_sercom_get_default_pad+0x3c>
    c466:	2900      	cmp	r1, #0
    c468:	d063      	beq.n	c532 <_sercom_get_default_pad+0xfa>
    c46a:	2902      	cmp	r1, #2
    c46c:	d006      	beq.n	c47c <_sercom_get_default_pad+0x44>
    c46e:	2903      	cmp	r1, #3
    c470:	d006      	beq.n	c480 <_sercom_get_default_pad+0x48>
    c472:	e001      	b.n	c478 <_sercom_get_default_pad+0x40>
    c474:	483b      	ldr	r0, [pc, #236]	; (c564 <_sercom_get_default_pad+0x12c>)
    c476:	e067      	b.n	c548 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    c478:	2000      	movs	r0, #0
    c47a:	e065      	b.n	c548 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c47c:	483a      	ldr	r0, [pc, #232]	; (c568 <_sercom_get_default_pad+0x130>)
    c47e:	e063      	b.n	c548 <_sercom_get_default_pad+0x110>
    c480:	483a      	ldr	r0, [pc, #232]	; (c56c <_sercom_get_default_pad+0x134>)
    c482:	e061      	b.n	c548 <_sercom_get_default_pad+0x110>
    c484:	2901      	cmp	r1, #1
    c486:	d006      	beq.n	c496 <_sercom_get_default_pad+0x5e>
    c488:	2900      	cmp	r1, #0
    c48a:	d054      	beq.n	c536 <_sercom_get_default_pad+0xfe>
    c48c:	2902      	cmp	r1, #2
    c48e:	d006      	beq.n	c49e <_sercom_get_default_pad+0x66>
    c490:	2903      	cmp	r1, #3
    c492:	d006      	beq.n	c4a2 <_sercom_get_default_pad+0x6a>
    c494:	e001      	b.n	c49a <_sercom_get_default_pad+0x62>
    c496:	4836      	ldr	r0, [pc, #216]	; (c570 <_sercom_get_default_pad+0x138>)
    c498:	e056      	b.n	c548 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    c49a:	2000      	movs	r0, #0
    c49c:	e054      	b.n	c548 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c49e:	4835      	ldr	r0, [pc, #212]	; (c574 <_sercom_get_default_pad+0x13c>)
    c4a0:	e052      	b.n	c548 <_sercom_get_default_pad+0x110>
    c4a2:	4835      	ldr	r0, [pc, #212]	; (c578 <_sercom_get_default_pad+0x140>)
    c4a4:	e050      	b.n	c548 <_sercom_get_default_pad+0x110>
    c4a6:	2901      	cmp	r1, #1
    c4a8:	d006      	beq.n	c4b8 <_sercom_get_default_pad+0x80>
    c4aa:	2900      	cmp	r1, #0
    c4ac:	d045      	beq.n	c53a <_sercom_get_default_pad+0x102>
    c4ae:	2902      	cmp	r1, #2
    c4b0:	d006      	beq.n	c4c0 <_sercom_get_default_pad+0x88>
    c4b2:	2903      	cmp	r1, #3
    c4b4:	d006      	beq.n	c4c4 <_sercom_get_default_pad+0x8c>
    c4b6:	e001      	b.n	c4bc <_sercom_get_default_pad+0x84>
    c4b8:	4830      	ldr	r0, [pc, #192]	; (c57c <_sercom_get_default_pad+0x144>)
    c4ba:	e045      	b.n	c548 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    c4bc:	2000      	movs	r0, #0
    c4be:	e043      	b.n	c548 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c4c0:	482f      	ldr	r0, [pc, #188]	; (c580 <_sercom_get_default_pad+0x148>)
    c4c2:	e041      	b.n	c548 <_sercom_get_default_pad+0x110>
    c4c4:	482f      	ldr	r0, [pc, #188]	; (c584 <_sercom_get_default_pad+0x14c>)
    c4c6:	e03f      	b.n	c548 <_sercom_get_default_pad+0x110>
    c4c8:	2901      	cmp	r1, #1
    c4ca:	d006      	beq.n	c4da <_sercom_get_default_pad+0xa2>
    c4cc:	2900      	cmp	r1, #0
    c4ce:	d036      	beq.n	c53e <_sercom_get_default_pad+0x106>
    c4d0:	2902      	cmp	r1, #2
    c4d2:	d006      	beq.n	c4e2 <_sercom_get_default_pad+0xaa>
    c4d4:	2903      	cmp	r1, #3
    c4d6:	d006      	beq.n	c4e6 <_sercom_get_default_pad+0xae>
    c4d8:	e001      	b.n	c4de <_sercom_get_default_pad+0xa6>
    c4da:	482b      	ldr	r0, [pc, #172]	; (c588 <_sercom_get_default_pad+0x150>)
    c4dc:	e034      	b.n	c548 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    c4de:	2000      	movs	r0, #0
    c4e0:	e032      	b.n	c548 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c4e2:	482a      	ldr	r0, [pc, #168]	; (c58c <_sercom_get_default_pad+0x154>)
    c4e4:	e030      	b.n	c548 <_sercom_get_default_pad+0x110>
    c4e6:	482a      	ldr	r0, [pc, #168]	; (c590 <_sercom_get_default_pad+0x158>)
    c4e8:	e02e      	b.n	c548 <_sercom_get_default_pad+0x110>
    c4ea:	2901      	cmp	r1, #1
    c4ec:	d006      	beq.n	c4fc <_sercom_get_default_pad+0xc4>
    c4ee:	2900      	cmp	r1, #0
    c4f0:	d027      	beq.n	c542 <_sercom_get_default_pad+0x10a>
    c4f2:	2902      	cmp	r1, #2
    c4f4:	d006      	beq.n	c504 <_sercom_get_default_pad+0xcc>
    c4f6:	2903      	cmp	r1, #3
    c4f8:	d006      	beq.n	c508 <_sercom_get_default_pad+0xd0>
    c4fa:	e001      	b.n	c500 <_sercom_get_default_pad+0xc8>
    c4fc:	4825      	ldr	r0, [pc, #148]	; (c594 <_sercom_get_default_pad+0x15c>)
    c4fe:	e023      	b.n	c548 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    c500:	2000      	movs	r0, #0
    c502:	e021      	b.n	c548 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c504:	4824      	ldr	r0, [pc, #144]	; (c598 <_sercom_get_default_pad+0x160>)
    c506:	e01f      	b.n	c548 <_sercom_get_default_pad+0x110>
    c508:	4824      	ldr	r0, [pc, #144]	; (c59c <_sercom_get_default_pad+0x164>)
    c50a:	e01d      	b.n	c548 <_sercom_get_default_pad+0x110>
    c50c:	2901      	cmp	r1, #1
    c50e:	d006      	beq.n	c51e <_sercom_get_default_pad+0xe6>
    c510:	2900      	cmp	r1, #0
    c512:	d018      	beq.n	c546 <_sercom_get_default_pad+0x10e>
    c514:	2902      	cmp	r1, #2
    c516:	d006      	beq.n	c526 <_sercom_get_default_pad+0xee>
    c518:	2903      	cmp	r1, #3
    c51a:	d006      	beq.n	c52a <_sercom_get_default_pad+0xf2>
    c51c:	e001      	b.n	c522 <_sercom_get_default_pad+0xea>
    c51e:	4820      	ldr	r0, [pc, #128]	; (c5a0 <_sercom_get_default_pad+0x168>)
    c520:	e012      	b.n	c548 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    c522:	2000      	movs	r0, #0
    c524:	e010      	b.n	c548 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c526:	481f      	ldr	r0, [pc, #124]	; (c5a4 <_sercom_get_default_pad+0x16c>)
    c528:	e00e      	b.n	c548 <_sercom_get_default_pad+0x110>
    c52a:	481f      	ldr	r0, [pc, #124]	; (c5a8 <_sercom_get_default_pad+0x170>)
    c52c:	e00c      	b.n	c548 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    c52e:	2000      	movs	r0, #0
    c530:	e00a      	b.n	c548 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c532:	481e      	ldr	r0, [pc, #120]	; (c5ac <_sercom_get_default_pad+0x174>)
    c534:	e008      	b.n	c548 <_sercom_get_default_pad+0x110>
    c536:	2003      	movs	r0, #3
    c538:	e006      	b.n	c548 <_sercom_get_default_pad+0x110>
    c53a:	481d      	ldr	r0, [pc, #116]	; (c5b0 <_sercom_get_default_pad+0x178>)
    c53c:	e004      	b.n	c548 <_sercom_get_default_pad+0x110>
    c53e:	481d      	ldr	r0, [pc, #116]	; (c5b4 <_sercom_get_default_pad+0x17c>)
    c540:	e002      	b.n	c548 <_sercom_get_default_pad+0x110>
    c542:	481d      	ldr	r0, [pc, #116]	; (c5b8 <_sercom_get_default_pad+0x180>)
    c544:	e000      	b.n	c548 <_sercom_get_default_pad+0x110>
    c546:	481d      	ldr	r0, [pc, #116]	; (c5bc <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    c548:	4770      	bx	lr
    c54a:	46c0      	nop			; (mov r8, r8)
    c54c:	42001000 	.word	0x42001000
    c550:	42000800 	.word	0x42000800
    c554:	42000c00 	.word	0x42000c00
    c558:	42001800 	.word	0x42001800
    c55c:	42001c00 	.word	0x42001c00
    c560:	42001400 	.word	0x42001400
    c564:	00050003 	.word	0x00050003
    c568:	00060003 	.word	0x00060003
    c56c:	00070003 	.word	0x00070003
    c570:	00010003 	.word	0x00010003
    c574:	001e0003 	.word	0x001e0003
    c578:	001f0003 	.word	0x001f0003
    c57c:	00090003 	.word	0x00090003
    c580:	000a0003 	.word	0x000a0003
    c584:	000b0003 	.word	0x000b0003
    c588:	00110003 	.word	0x00110003
    c58c:	00120003 	.word	0x00120003
    c590:	00130003 	.word	0x00130003
    c594:	000d0003 	.word	0x000d0003
    c598:	000e0003 	.word	0x000e0003
    c59c:	000f0003 	.word	0x000f0003
    c5a0:	00170003 	.word	0x00170003
    c5a4:	00180003 	.word	0x00180003
    c5a8:	00190003 	.word	0x00190003
    c5ac:	00040003 	.word	0x00040003
    c5b0:	00080003 	.word	0x00080003
    c5b4:	00100003 	.word	0x00100003
    c5b8:	000c0003 	.word	0x000c0003
    c5bc:	00160003 	.word	0x00160003

0000c5c0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    c5c0:	b530      	push	{r4, r5, lr}
    c5c2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    c5c4:	4b0c      	ldr	r3, [pc, #48]	; (c5f8 <_sercom_get_sercom_inst_index+0x38>)
    c5c6:	466a      	mov	r2, sp
    c5c8:	cb32      	ldmia	r3!, {r1, r4, r5}
    c5ca:	c232      	stmia	r2!, {r1, r4, r5}
    c5cc:	cb32      	ldmia	r3!, {r1, r4, r5}
    c5ce:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    c5d0:	9b00      	ldr	r3, [sp, #0]
    c5d2:	4283      	cmp	r3, r0
    c5d4:	d006      	beq.n	c5e4 <_sercom_get_sercom_inst_index+0x24>
    c5d6:	2301      	movs	r3, #1
    c5d8:	009a      	lsls	r2, r3, #2
    c5da:	4669      	mov	r1, sp
    c5dc:	5852      	ldr	r2, [r2, r1]
    c5de:	4282      	cmp	r2, r0
    c5e0:	d103      	bne.n	c5ea <_sercom_get_sercom_inst_index+0x2a>
    c5e2:	e000      	b.n	c5e6 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    c5e4:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    c5e6:	b2d8      	uxtb	r0, r3
    c5e8:	e003      	b.n	c5f2 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    c5ea:	3301      	adds	r3, #1
    c5ec:	2b06      	cmp	r3, #6
    c5ee:	d1f3      	bne.n	c5d8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    c5f0:	2000      	movs	r0, #0
}
    c5f2:	b007      	add	sp, #28
    c5f4:	bd30      	pop	{r4, r5, pc}
    c5f6:	46c0      	nop			; (mov r8, r8)
    c5f8:	00013fa4 	.word	0x00013fa4

0000c5fc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    c5fc:	4770      	bx	lr
    c5fe:	46c0      	nop			; (mov r8, r8)

0000c600 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    c600:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    c602:	4b0a      	ldr	r3, [pc, #40]	; (c62c <_sercom_set_handler+0x2c>)
    c604:	781b      	ldrb	r3, [r3, #0]
    c606:	2b00      	cmp	r3, #0
    c608:	d10c      	bne.n	c624 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    c60a:	4f09      	ldr	r7, [pc, #36]	; (c630 <_sercom_set_handler+0x30>)
    c60c:	4e09      	ldr	r6, [pc, #36]	; (c634 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    c60e:	4d0a      	ldr	r5, [pc, #40]	; (c638 <_sercom_set_handler+0x38>)
    c610:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    c612:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    c614:	195a      	adds	r2, r3, r5
    c616:	6014      	str	r4, [r2, #0]
    c618:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    c61a:	2b18      	cmp	r3, #24
    c61c:	d1f9      	bne.n	c612 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    c61e:	2201      	movs	r2, #1
    c620:	4b02      	ldr	r3, [pc, #8]	; (c62c <_sercom_set_handler+0x2c>)
    c622:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    c624:	0080      	lsls	r0, r0, #2
    c626:	4b02      	ldr	r3, [pc, #8]	; (c630 <_sercom_set_handler+0x30>)
    c628:	50c1      	str	r1, [r0, r3]
}
    c62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c62c:	200000ca 	.word	0x200000ca
    c630:	200000cc 	.word	0x200000cc
    c634:	0000c5fd 	.word	0x0000c5fd
    c638:	20000434 	.word	0x20000434

0000c63c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    c63c:	b510      	push	{r4, lr}
    c63e:	b082      	sub	sp, #8
    c640:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    c642:	2206      	movs	r2, #6
    c644:	4905      	ldr	r1, [pc, #20]	; (c65c <_sercom_get_interrupt_vector+0x20>)
    c646:	4668      	mov	r0, sp
    c648:	4b05      	ldr	r3, [pc, #20]	; (c660 <_sercom_get_interrupt_vector+0x24>)
    c64a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    c64c:	0020      	movs	r0, r4
    c64e:	4b05      	ldr	r3, [pc, #20]	; (c664 <_sercom_get_interrupt_vector+0x28>)
    c650:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    c652:	466b      	mov	r3, sp
    c654:	5618      	ldrsb	r0, [r3, r0]
}
    c656:	b002      	add	sp, #8
    c658:	bd10      	pop	{r4, pc}
    c65a:	46c0      	nop			; (mov r8, r8)
    c65c:	00013fbc 	.word	0x00013fbc
    c660:	00011719 	.word	0x00011719
    c664:	0000c5c1 	.word	0x0000c5c1

0000c668 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    c668:	b510      	push	{r4, lr}
    c66a:	4b02      	ldr	r3, [pc, #8]	; (c674 <SERCOM0_Handler+0xc>)
    c66c:	681b      	ldr	r3, [r3, #0]
    c66e:	2000      	movs	r0, #0
    c670:	4798      	blx	r3
    c672:	bd10      	pop	{r4, pc}
    c674:	200000cc 	.word	0x200000cc

0000c678 <SERCOM1_Handler>:
    c678:	b510      	push	{r4, lr}
    c67a:	4b02      	ldr	r3, [pc, #8]	; (c684 <SERCOM1_Handler+0xc>)
    c67c:	685b      	ldr	r3, [r3, #4]
    c67e:	2001      	movs	r0, #1
    c680:	4798      	blx	r3
    c682:	bd10      	pop	{r4, pc}
    c684:	200000cc 	.word	0x200000cc

0000c688 <SERCOM2_Handler>:
    c688:	b510      	push	{r4, lr}
    c68a:	4b02      	ldr	r3, [pc, #8]	; (c694 <SERCOM2_Handler+0xc>)
    c68c:	689b      	ldr	r3, [r3, #8]
    c68e:	2002      	movs	r0, #2
    c690:	4798      	blx	r3
    c692:	bd10      	pop	{r4, pc}
    c694:	200000cc 	.word	0x200000cc

0000c698 <SERCOM3_Handler>:
    c698:	b510      	push	{r4, lr}
    c69a:	4b02      	ldr	r3, [pc, #8]	; (c6a4 <SERCOM3_Handler+0xc>)
    c69c:	68db      	ldr	r3, [r3, #12]
    c69e:	2003      	movs	r0, #3
    c6a0:	4798      	blx	r3
    c6a2:	bd10      	pop	{r4, pc}
    c6a4:	200000cc 	.word	0x200000cc

0000c6a8 <SERCOM4_Handler>:
    c6a8:	b510      	push	{r4, lr}
    c6aa:	4b02      	ldr	r3, [pc, #8]	; (c6b4 <SERCOM4_Handler+0xc>)
    c6ac:	691b      	ldr	r3, [r3, #16]
    c6ae:	2004      	movs	r0, #4
    c6b0:	4798      	blx	r3
    c6b2:	bd10      	pop	{r4, pc}
    c6b4:	200000cc 	.word	0x200000cc

0000c6b8 <SERCOM5_Handler>:
    c6b8:	b510      	push	{r4, lr}
    c6ba:	4b02      	ldr	r3, [pc, #8]	; (c6c4 <SERCOM5_Handler+0xc>)
    c6bc:	695b      	ldr	r3, [r3, #20]
    c6be:	2005      	movs	r0, #5
    c6c0:	4798      	blx	r3
    c6c2:	bd10      	pop	{r4, pc}
    c6c4:	200000cc 	.word	0x200000cc

0000c6c8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    c6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6ca:	b08b      	sub	sp, #44	; 0x2c
    c6cc:	0005      	movs	r5, r0
    c6ce:	000c      	movs	r4, r1
    c6d0:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    c6d2:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    c6d4:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    c6d6:	201c      	movs	r0, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    c6d8:	079b      	lsls	r3, r3, #30
    c6da:	d500      	bpl.n	c6de <spi_init+0x16>
    c6dc:	e0be      	b.n	c85c <spi_init+0x194>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    c6de:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    c6e0:	3817      	subs	r0, #23
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    c6e2:	07db      	lsls	r3, r3, #31
    c6e4:	d500      	bpl.n	c6e8 <spi_init+0x20>
    c6e6:	e0b9      	b.n	c85c <spi_init+0x194>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    c6e8:	0008      	movs	r0, r1
    c6ea:	4b5d      	ldr	r3, [pc, #372]	; (c860 <spi_init+0x198>)
    c6ec:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    c6ee:	495d      	ldr	r1, [pc, #372]	; (c864 <spi_init+0x19c>)
    c6f0:	6a0a      	ldr	r2, [r1, #32]
    c6f2:	1c87      	adds	r7, r0, #2
    c6f4:	2301      	movs	r3, #1
    c6f6:	40bb      	lsls	r3, r7
    c6f8:	4313      	orrs	r3, r2
    c6fa:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    c6fc:	a909      	add	r1, sp, #36	; 0x24
    c6fe:	2724      	movs	r7, #36	; 0x24
    c700:	5df3      	ldrb	r3, [r6, r7]
    c702:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    c704:	3014      	adds	r0, #20
    c706:	b2c3      	uxtb	r3, r0
    c708:	9301      	str	r3, [sp, #4]
    c70a:	0018      	movs	r0, r3
    c70c:	4b56      	ldr	r3, [pc, #344]	; (c868 <spi_init+0x1a0>)
    c70e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    c710:	9801      	ldr	r0, [sp, #4]
    c712:	4b56      	ldr	r3, [pc, #344]	; (c86c <spi_init+0x1a4>)
    c714:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    c716:	5df0      	ldrb	r0, [r6, r7]
    c718:	2100      	movs	r1, #0
    c71a:	4b55      	ldr	r3, [pc, #340]	; (c870 <spi_init+0x1a8>)
    c71c:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    c71e:	7833      	ldrb	r3, [r6, #0]
    c720:	2b01      	cmp	r3, #1
    c722:	d103      	bne.n	c72c <spi_init+0x64>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    c724:	6822      	ldr	r2, [r4, #0]
    c726:	330b      	adds	r3, #11
    c728:	4313      	orrs	r3, r2
    c72a:	6023      	str	r3, [r4, #0]
    c72c:	002b      	movs	r3, r5
    c72e:	330c      	adds	r3, #12
    c730:	0029      	movs	r1, r5
    c732:	3128      	adds	r1, #40	; 0x28
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    c734:	2200      	movs	r2, #0
    c736:	c304      	stmia	r3!, {r2}
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    c738:	4299      	cmp	r1, r3
    c73a:	d1fc      	bne.n	c736 <spi_init+0x6e>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    c73c:	2300      	movs	r3, #0
    c73e:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    c740:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    c742:	2400      	movs	r4, #0
    c744:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    c746:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    c748:	3336      	adds	r3, #54	; 0x36
    c74a:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    c74c:	3301      	adds	r3, #1
    c74e:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    c750:	3301      	adds	r3, #1
    c752:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    c754:	3b35      	subs	r3, #53	; 0x35
    c756:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    c758:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    c75a:	6828      	ldr	r0, [r5, #0]
    c75c:	4b40      	ldr	r3, [pc, #256]	; (c860 <spi_init+0x198>)
    c75e:	4798      	blx	r3
    c760:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    c762:	4944      	ldr	r1, [pc, #272]	; (c874 <spi_init+0x1ac>)
    c764:	4b44      	ldr	r3, [pc, #272]	; (c878 <spi_init+0x1b0>)
    c766:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    c768:	00b8      	lsls	r0, r7, #2
    c76a:	4b44      	ldr	r3, [pc, #272]	; (c87c <spi_init+0x1b4>)
    c76c:	50c5      	str	r5, [r0, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c76e:	682f      	ldr	r7, [r5, #0]
    c770:	ab04      	add	r3, sp, #16
    c772:	2280      	movs	r2, #128	; 0x80
    c774:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    c776:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    c778:	3a7f      	subs	r2, #127	; 0x7f
    c77a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    c77c:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    c77e:	7833      	ldrb	r3, [r6, #0]
    c780:	2b00      	cmp	r3, #0
    c782:	d102      	bne.n	c78a <spi_init+0xc2>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    c784:	2200      	movs	r2, #0
    c786:	ab04      	add	r3, sp, #16
    c788:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    c78a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    c78c:	9305      	str	r3, [sp, #20]
    c78e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    c790:	9306      	str	r3, [sp, #24]
    c792:	6b33      	ldr	r3, [r6, #48]	; 0x30
    c794:	9307      	str	r3, [sp, #28]
    c796:	6b73      	ldr	r3, [r6, #52]	; 0x34
    c798:	9308      	str	r3, [sp, #32]
    c79a:	2400      	movs	r4, #0
    c79c:	b2e1      	uxtb	r1, r4
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    c79e:	00a3      	lsls	r3, r4, #2
    c7a0:	aa05      	add	r2, sp, #20
    c7a2:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    c7a4:	2800      	cmp	r0, #0
    c7a6:	d102      	bne.n	c7ae <spi_init+0xe6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    c7a8:	0038      	movs	r0, r7
    c7aa:	4b35      	ldr	r3, [pc, #212]	; (c880 <spi_init+0x1b8>)
    c7ac:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    c7ae:	1c43      	adds	r3, r0, #1
    c7b0:	d006      	beq.n	c7c0 <spi_init+0xf8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    c7b2:	ab02      	add	r3, sp, #8
    c7b4:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    c7b6:	0c00      	lsrs	r0, r0, #16
    c7b8:	b2c0      	uxtb	r0, r0
    c7ba:	a904      	add	r1, sp, #16
    c7bc:	4b31      	ldr	r3, [pc, #196]	; (c884 <spi_init+0x1bc>)
    c7be:	4798      	blx	r3
    c7c0:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    c7c2:	2c04      	cmp	r4, #4
    c7c4:	d1ea      	bne.n	c79c <spi_init+0xd4>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    c7c6:	7833      	ldrb	r3, [r6, #0]
    c7c8:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    c7ca:	7c33      	ldrb	r3, [r6, #16]
    c7cc:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    c7ce:	7cb3      	ldrb	r3, [r6, #18]
    c7d0:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    c7d2:	7d33      	ldrb	r3, [r6, #20]
    c7d4:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    c7d6:	2200      	movs	r2, #0
    c7d8:	ab02      	add	r3, sp, #8
    c7da:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    c7dc:	7833      	ldrb	r3, [r6, #0]
    c7de:	2b01      	cmp	r3, #1
    c7e0:	d114      	bne.n	c80c <spi_init+0x144>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    c7e2:	6828      	ldr	r0, [r5, #0]
    c7e4:	4b1e      	ldr	r3, [pc, #120]	; (c860 <spi_init+0x198>)
    c7e6:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    c7e8:	3014      	adds	r0, #20
    c7ea:	b2c0      	uxtb	r0, r0
    c7ec:	4b26      	ldr	r3, [pc, #152]	; (c888 <spi_init+0x1c0>)
    c7ee:	4798      	blx	r3
    c7f0:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    c7f2:	ab02      	add	r3, sp, #8
    c7f4:	1d9a      	adds	r2, r3, #6
    c7f6:	69b0      	ldr	r0, [r6, #24]
    c7f8:	4b24      	ldr	r3, [pc, #144]	; (c88c <spi_init+0x1c4>)
    c7fa:	4798      	blx	r3
    c7fc:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    c7fe:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    c800:	2b00      	cmp	r3, #0
    c802:	d12b      	bne.n	c85c <spi_init+0x194>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    c804:	ab02      	add	r3, sp, #8
    c806:	3306      	adds	r3, #6
    c808:	781b      	ldrb	r3, [r3, #0]
    c80a:	733b      	strb	r3, [r7, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    c80c:	6873      	ldr	r3, [r6, #4]
    c80e:	68b2      	ldr	r2, [r6, #8]
    c810:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    c812:	68f2      	ldr	r2, [r6, #12]
    c814:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    c816:	7c32      	ldrb	r2, [r6, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    c818:	7c71      	ldrb	r1, [r6, #17]
    c81a:	2900      	cmp	r1, #0
    c81c:	d103      	bne.n	c826 <spi_init+0x15e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    c81e:	491c      	ldr	r1, [pc, #112]	; (c890 <spi_init+0x1c8>)
    c820:	7889      	ldrb	r1, [r1, #2]
    c822:	0789      	lsls	r1, r1, #30
    c824:	d501      	bpl.n	c82a <spi_init+0x162>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    c826:	2180      	movs	r1, #128	; 0x80
    c828:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    c82a:	7cb1      	ldrb	r1, [r6, #18]
    c82c:	2900      	cmp	r1, #0
    c82e:	d002      	beq.n	c836 <spi_init+0x16e>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    c830:	2180      	movs	r1, #128	; 0x80
    c832:	0289      	lsls	r1, r1, #10
    c834:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    c836:	7cf1      	ldrb	r1, [r6, #19]
    c838:	2900      	cmp	r1, #0
    c83a:	d002      	beq.n	c842 <spi_init+0x17a>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    c83c:	2180      	movs	r1, #128	; 0x80
    c83e:	0089      	lsls	r1, r1, #2
    c840:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    c842:	7d31      	ldrb	r1, [r6, #20]
    c844:	2900      	cmp	r1, #0
    c846:	d002      	beq.n	c84e <spi_init+0x186>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    c848:	2180      	movs	r1, #128	; 0x80
    c84a:	0189      	lsls	r1, r1, #6
    c84c:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    c84e:	6839      	ldr	r1, [r7, #0]
    c850:	430b      	orrs	r3, r1
    c852:	603b      	str	r3, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    c854:	687b      	ldr	r3, [r7, #4]
    c856:	4313      	orrs	r3, r2
    c858:	607b      	str	r3, [r7, #4]

	return STATUS_OK;
    c85a:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    c85c:	b00b      	add	sp, #44	; 0x2c
    c85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c860:	0000c5c1 	.word	0x0000c5c1
    c864:	40000400 	.word	0x40000400
    c868:	0000d8f5 	.word	0x0000d8f5
    c86c:	0000d869 	.word	0x0000d869
    c870:	0000c3ed 	.word	0x0000c3ed
    c874:	0000cb01 	.word	0x0000cb01
    c878:	0000c601 	.word	0x0000c601
    c87c:	20000434 	.word	0x20000434
    c880:	0000c439 	.word	0x0000c439
    c884:	0000d9ed 	.word	0x0000d9ed
    c888:	0000d911 	.word	0x0000d911
    c88c:	0000c331 	.word	0x0000c331
    c890:	41002000 	.word	0x41002000

0000c894 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    c894:	b5f0      	push	{r4, r5, r6, r7, lr}
    c896:	4657      	mov	r7, sl
    c898:	4646      	mov	r6, r8
    c89a:	b4c0      	push	{r6, r7}
    c89c:	0007      	movs	r7, r0
    c89e:	4688      	mov	r8, r1
    c8a0:	001d      	movs	r5, r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    c8a2:	2038      	movs	r0, #56	; 0x38
    c8a4:	5c3c      	ldrb	r4, [r7, r0]
    c8a6:	b2e0      	uxtb	r0, r4
    c8a8:	2805      	cmp	r0, #5
    c8aa:	d047      	beq.n	c93c <spi_read_buffer_wait+0xa8>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    c8ac:	2017      	movs	r0, #23
		return STATUS_BUSY;
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    c8ae:	2a00      	cmp	r2, #0
    c8b0:	d044      	beq.n	c93c <spi_read_buffer_wait+0xa8>
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
    c8b2:	79fc      	ldrb	r4, [r7, #7]
		return STATUS_ERR_DENIED;
    c8b4:	3005      	adds	r0, #5
	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	if (!(module->receiver_enabled)) {
    c8b6:	2c00      	cmp	r4, #0
    c8b8:	d040      	beq.n	c93c <spi_read_buffer_wait+0xa8>
    c8ba:	2300      	movs	r3, #0

	while (length--) {
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    c8bc:	381b      	subs	r0, #27
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c8be:	05ec      	lsls	r4, r5, #23
    c8c0:	0de1      	lsrs	r1, r4, #23
    c8c2:	468c      	mov	ip, r1
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    c8c4:	2604      	movs	r6, #4
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    c8c6:	797c      	ldrb	r4, [r7, #5]
    c8c8:	2c01      	cmp	r4, #1
    c8ca:	d108      	bne.n	c8de <spi_read_buffer_wait+0x4a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c8cc:	683d      	ldr	r5, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c8ce:	7e2c      	ldrb	r4, [r5, #24]
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    c8d0:	4204      	tst	r4, r0
    c8d2:	d0fc      	beq.n	c8ce <spi_read_buffer_wait+0x3a>
    c8d4:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    c8d6:	4204      	tst	r4, r0
    c8d8:	d001      	beq.n	c8de <spi_read_buffer_wait+0x4a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c8da:	4661      	mov	r1, ip
    c8dc:	62a9      	str	r1, [r5, #40]	; 0x28
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c8de:	683d      	ldr	r5, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c8e0:	7e2c      	ldrb	r4, [r5, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    c8e2:	4234      	tst	r4, r6
    c8e4:	d0fc      	beq.n	c8e0 <spi_read_buffer_wait+0x4c>
    c8e6:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    c8e8:	4234      	tst	r4, r6
    c8ea:	d024      	beq.n	c936 <spi_read_buffer_wait+0xa2>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c8ec:	8b69      	ldrh	r1, [r5, #26]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    c8ee:	2400      	movs	r4, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c8f0:	4231      	tst	r1, r6
    c8f2:	d001      	beq.n	c8f8 <spi_read_buffer_wait+0x64>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c8f4:	836e      	strh	r6, [r5, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
    c8f6:	341e      	adds	r4, #30
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c8f8:	79b9      	ldrb	r1, [r7, #6]
    c8fa:	2901      	cmp	r1, #1
    c8fc:	d103      	bne.n	c906 <spi_read_buffer_wait+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c8fe:	6aad      	ldr	r5, [r5, #40]	; 0x28
    c900:	05ed      	lsls	r5, r5, #23
    c902:	0ded      	lsrs	r5, r5, #23
    c904:	e001      	b.n	c90a <spi_read_buffer_wait+0x76>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c906:	6aad      	ldr	r5, [r5, #40]	; 0x28
    c908:	b2ed      	uxtb	r5, r5
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    c90a:	2c00      	cmp	r4, #0
    c90c:	d115      	bne.n	c93a <spi_read_buffer_wait+0xa6>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    c90e:	1c5c      	adds	r4, r3, #1
    c910:	b2a4      	uxth	r4, r4
    c912:	4641      	mov	r1, r8
    c914:	54cd      	strb	r5, [r1, r3]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c916:	79b9      	ldrb	r1, [r7, #6]
    c918:	2901      	cmp	r1, #1
    c91a:	d105      	bne.n	c928 <spi_read_buffer_wait+0x94>
			rx_data[rx_pos++] = (received_data >> 8);
    c91c:	3302      	adds	r3, #2
    c91e:	b29b      	uxth	r3, r3
    c920:	0a2d      	lsrs	r5, r5, #8
    c922:	4641      	mov	r1, r8
    c924:	550d      	strb	r5, [r1, r4]
    c926:	e000      	b.n	c92a <spi_read_buffer_wait+0x96>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    c928:	0023      	movs	r3, r4
    c92a:	3a01      	subs	r2, #1
    c92c:	b292      	uxth	r2, r2
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    c92e:	2a00      	cmp	r2, #0
    c930:	d1c9      	bne.n	c8c6 <spi_read_buffer_wait+0x32>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    c932:	2000      	movs	r0, #0
    c934:	e002      	b.n	c93c <spi_read_buffer_wait+0xa8>
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
    c936:	2010      	movs	r0, #16
    c938:	e000      	b.n	c93c <spi_read_buffer_wait+0xa8>
    c93a:	0020      	movs	r0, r4
}
    c93c:	bc0c      	pop	{r2, r3}
    c93e:	4690      	mov	r8, r2
    c940:	469a      	mov	sl, r3
    c942:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c944 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    c944:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    c946:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    c948:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    c94a:	2c01      	cmp	r4, #1
    c94c:	d16e      	bne.n	ca2c <spi_select_slave+0xe8>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    c94e:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    c950:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    c952:	2c00      	cmp	r4, #0
    c954:	d16a      	bne.n	ca2c <spi_select_slave+0xe8>
#  endif
	{
		if (select) {
    c956:	2a00      	cmp	r2, #0
    c958:	d058      	beq.n	ca0c <spi_select_slave+0xc8>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    c95a:	784b      	ldrb	r3, [r1, #1]
    c95c:	2b00      	cmp	r3, #0
    c95e:	d044      	beq.n	c9ea <spi_select_slave+0xa6>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c960:	6803      	ldr	r3, [r0, #0]
    c962:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    c964:	07db      	lsls	r3, r3, #31
    c966:	d410      	bmi.n	c98a <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    c968:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    c96a:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    c96c:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    c96e:	2900      	cmp	r1, #0
    c970:	d104      	bne.n	c97c <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    c972:	095a      	lsrs	r2, r3, #5
    c974:	01d2      	lsls	r2, r2, #7
    c976:	492e      	ldr	r1, [pc, #184]	; (ca30 <spi_select_slave+0xec>)
    c978:	468c      	mov	ip, r1
    c97a:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c97c:	211f      	movs	r1, #31
    c97e:	400b      	ands	r3, r1
    c980:	391e      	subs	r1, #30
    c982:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    c984:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    c986:	2305      	movs	r3, #5
    c988:	e050      	b.n	ca2c <spi_select_slave+0xe8>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    c98a:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    c98c:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    c98e:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    c990:	2c00      	cmp	r4, #0
    c992:	d104      	bne.n	c99e <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    c994:	095a      	lsrs	r2, r3, #5
    c996:	01d2      	lsls	r2, r2, #7
    c998:	4c25      	ldr	r4, [pc, #148]	; (ca30 <spi_select_slave+0xec>)
    c99a:	46a4      	mov	ip, r4
    c99c:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c99e:	241f      	movs	r4, #31
    c9a0:	4023      	ands	r3, r4
    c9a2:	3c1e      	subs	r4, #30
    c9a4:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    c9a6:	6154      	str	r4, [r2, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c9a8:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c9aa:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    c9ac:	07d2      	lsls	r2, r2, #31
    c9ae:	d501      	bpl.n	c9b4 <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c9b0:	788a      	ldrb	r2, [r1, #2]
    c9b2:	629a      	str	r2, [r3, #40]	; 0x28

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    c9b4:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    c9b6:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    c9b8:	2a00      	cmp	r2, #0
    c9ba:	d137      	bne.n	ca2c <spi_select_slave+0xe8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    c9bc:	6802      	ldr	r2, [r0, #0]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    c9be:	2104      	movs	r1, #4

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c9c0:	7e13      	ldrb	r3, [r2, #24]
    c9c2:	420b      	tst	r3, r1
    c9c4:	d0fc      	beq.n	c9c0 <spi_select_slave+0x7c>
    c9c6:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    c9c8:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    c9ca:	0749      	lsls	r1, r1, #29
    c9cc:	d52e      	bpl.n	ca2c <spi_select_slave+0xe8>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c9ce:	8b53      	ldrh	r3, [r2, #26]
    c9d0:	075b      	lsls	r3, r3, #29
    c9d2:	d501      	bpl.n	c9d8 <spi_select_slave+0x94>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c9d4:	2304      	movs	r3, #4
    c9d6:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c9d8:	7983      	ldrb	r3, [r0, #6]
    c9da:	2b01      	cmp	r3, #1
    c9dc:	d102      	bne.n	c9e4 <spi_select_slave+0xa0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c9de:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c9e0:	2300      	movs	r3, #0
    c9e2:	e023      	b.n	ca2c <spi_select_slave+0xe8>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c9e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    c9e6:	2300      	movs	r3, #0
    c9e8:	e020      	b.n	ca2c <spi_select_slave+0xe8>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    c9ea:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    c9ec:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    c9ee:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    c9f0:	2900      	cmp	r1, #0
    c9f2:	d104      	bne.n	c9fe <spi_select_slave+0xba>
		return &(ports[port_index]->Group[group_index]);
    c9f4:	095a      	lsrs	r2, r3, #5
    c9f6:	01d2      	lsls	r2, r2, #7
    c9f8:	490d      	ldr	r1, [pc, #52]	; (ca30 <spi_select_slave+0xec>)
    c9fa:	468c      	mov	ip, r1
    c9fc:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c9fe:	211f      	movs	r1, #31
    ca00:	400b      	ands	r3, r1
    ca02:	391e      	subs	r1, #30
    ca04:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    ca06:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    ca08:	2300      	movs	r3, #0
    ca0a:	e00f      	b.n	ca2c <spi_select_slave+0xe8>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    ca0c:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    ca0e:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    ca10:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    ca12:	2900      	cmp	r1, #0
    ca14:	d104      	bne.n	ca20 <spi_select_slave+0xdc>
		return &(ports[port_index]->Group[group_index]);
    ca16:	095a      	lsrs	r2, r3, #5
    ca18:	01d2      	lsls	r2, r2, #7
    ca1a:	4905      	ldr	r1, [pc, #20]	; (ca30 <spi_select_slave+0xec>)
    ca1c:	468c      	mov	ip, r1
    ca1e:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ca20:	211f      	movs	r1, #31
    ca22:	400b      	ands	r3, r1
    ca24:	391e      	subs	r1, #30
    ca26:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    ca28:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    ca2a:	2300      	movs	r3, #0
}
    ca2c:	0018      	movs	r0, r3
    ca2e:	bd10      	pop	{r4, pc}
    ca30:	41004400 	.word	0x41004400

0000ca34 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    ca34:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca36:	465f      	mov	r7, fp
    ca38:	4656      	mov	r6, sl
    ca3a:	464d      	mov	r5, r9
    ca3c:	4644      	mov	r4, r8
    ca3e:	b4f0      	push	{r4, r5, r6, r7}
    ca40:	b083      	sub	sp, #12
    ca42:	0007      	movs	r7, r0
    ca44:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    ca46:	2338      	movs	r3, #56	; 0x38
    ca48:	5cc0      	ldrb	r0, [r0, r3]
    ca4a:	b2c0      	uxtb	r0, r0
    ca4c:	2805      	cmp	r0, #5
    ca4e:	d04e      	beq.n	caee <spi_write_buffer_wait+0xba>
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    ca50:	2017      	movs	r0, #23
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
	}
#  endif

	if (length == 0) {
    ca52:	2a00      	cmp	r2, #0
    ca54:	d04b      	beq.n	caee <spi_write_buffer_wait+0xba>
    ca56:	e042      	b.n	cade <spi_write_buffer_wait+0xaa>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    ca58:	683a      	ldr	r2, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ca5a:	7e13      	ldrb	r3, [r2, #24]
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    ca5c:	4223      	tst	r3, r4
    ca5e:	d0fc      	beq.n	ca5a <spi_write_buffer_wait+0x26>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    ca60:	1c43      	adds	r3, r0, #1
    ca62:	b29b      	uxth	r3, r3
    ca64:	4698      	mov	r8, r3
    ca66:	4653      	mov	r3, sl
    ca68:	5c1b      	ldrb	r3, [r3, r0]
    ca6a:	469b      	mov	fp, r3

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ca6c:	79b9      	ldrb	r1, [r7, #6]
    ca6e:	2901      	cmp	r1, #1
    ca70:	d004      	beq.n	ca7c <spi_write_buffer_wait+0x48>
		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    ca72:	4669      	mov	r1, sp
    ca74:	80cb      	strh	r3, [r1, #6]
    ca76:	88cb      	ldrh	r3, [r1, #6]
    ca78:	4640      	mov	r0, r8
    ca7a:	e007      	b.n	ca8c <spi_write_buffer_wait+0x58>

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    ca7c:	3002      	adds	r0, #2
    ca7e:	b280      	uxth	r0, r0
    ca80:	4641      	mov	r1, r8
    ca82:	4653      	mov	r3, sl
    ca84:	5c59      	ldrb	r1, [r3, r1]
    ca86:	0209      	lsls	r1, r1, #8
    ca88:	465b      	mov	r3, fp
    ca8a:	430b      	orrs	r3, r1
    ca8c:	7e11      	ldrb	r1, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    ca8e:	4221      	tst	r1, r4
    ca90:	d002      	beq.n	ca98 <spi_write_buffer_wait+0x64>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ca92:	05db      	lsls	r3, r3, #23
    ca94:	0ddb      	lsrs	r3, r3, #23
    ca96:	6293      	str	r3, [r2, #40]	; 0x28
		}

		/* Write the data to send */
		spi_write(module, data_to_send);

		if (module->receiver_enabled) {
    ca98:	79fb      	ldrb	r3, [r7, #7]
    ca9a:	2b00      	cmp	r3, #0
    ca9c:	d010      	beq.n	cac0 <spi_write_buffer_wait+0x8c>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    ca9e:	683a      	ldr	r2, [r7, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    caa0:	7e13      	ldrb	r3, [r2, #24]
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    caa2:	422b      	tst	r3, r5
    caa4:	d0fc      	beq.n	caa0 <spi_write_buffer_wait+0x6c>
    caa6:	7e13      	ldrb	r3, [r2, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    caa8:	422b      	tst	r3, r5
    caaa:	d009      	beq.n	cac0 <spi_write_buffer_wait+0x8c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    caac:	8b53      	ldrh	r3, [r2, #26]
    caae:	422b      	tst	r3, r5
    cab0:	d000      	beq.n	cab4 <spi_write_buffer_wait+0x80>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cab2:	8355      	strh	r5, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cab4:	79bb      	ldrb	r3, [r7, #6]
    cab6:	2b01      	cmp	r3, #1
    cab8:	d101      	bne.n	cabe <spi_write_buffer_wait+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    caba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    cabc:	e000      	b.n	cac0 <spi_write_buffer_wait+0x8c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cabe:	6a93      	ldr	r3, [r2, #40]	; 0x28

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    cac0:	3e01      	subs	r6, #1
    cac2:	b2b6      	uxth	r6, r6
    cac4:	4566      	cmp	r6, ip
    cac6:	d1c7      	bne.n	ca58 <spi_write_buffer_wait+0x24>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    cac8:	797b      	ldrb	r3, [r7, #5]
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    caca:	2000      	movs	r0, #0
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    cacc:	2b01      	cmp	r3, #1
    cace:	d10e      	bne.n	caee <spi_write_buffer_wait+0xba>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    cad0:	6839      	ldr	r1, [r7, #0]
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    cad2:	2202      	movs	r2, #2

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cad4:	7e0b      	ldrb	r3, [r1, #24]
    cad6:	4213      	tst	r3, r2
    cad8:	d0fc      	beq.n	cad4 <spi_write_buffer_wait+0xa0>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    cada:	2000      	movs	r0, #0
    cadc:	e007      	b.n	caee <spi_write_buffer_wait+0xba>

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    cade:	3a01      	subs	r2, #1
    cae0:	b296      	uxth	r6, r2
    cae2:	2000      	movs	r0, #0
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    cae4:	2401      	movs	r4, #1
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    cae6:	2504      	movs	r5, #4

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
    cae8:	4b04      	ldr	r3, [pc, #16]	; (cafc <spi_write_buffer_wait+0xc8>)
    caea:	469c      	mov	ip, r3
    caec:	e7b4      	b.n	ca58 <spi_write_buffer_wait+0x24>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    caee:	b003      	add	sp, #12
    caf0:	bc3c      	pop	{r2, r3, r4, r5}
    caf2:	4690      	mov	r8, r2
    caf4:	4699      	mov	r9, r3
    caf6:	46a2      	mov	sl, r4
    caf8:	46ab      	mov	fp, r5
    cafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cafc:	0000ffff 	.word	0x0000ffff

0000cb00 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    cb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    cb02:	0080      	lsls	r0, r0, #2
    cb04:	4b67      	ldr	r3, [pc, #412]	; (cca4 <_spi_interrupt_handler+0x1a4>)
    cb06:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    cb08:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    cb0a:	2337      	movs	r3, #55	; 0x37

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    cb0c:	5ce3      	ldrb	r3, [r4, r3]
    cb0e:	2236      	movs	r2, #54	; 0x36
    cb10:	5ca7      	ldrb	r7, [r4, r2]
    cb12:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    cb14:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    cb16:	7db5      	ldrb	r5, [r6, #22]
    cb18:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    cb1a:	07eb      	lsls	r3, r5, #31
    cb1c:	d53d      	bpl.n	cb9a <_spi_interrupt_handler+0x9a>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    cb1e:	7963      	ldrb	r3, [r4, #5]
    cb20:	2b01      	cmp	r3, #1
    cb22:	d13a      	bne.n	cb9a <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_READ)) {
    cb24:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    cb26:	2b00      	cmp	r3, #0
    cb28:	d10f      	bne.n	cb4a <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    cb2a:	4b5f      	ldr	r3, [pc, #380]	; (cca8 <_spi_interrupt_handler+0x1a8>)
    cb2c:	881b      	ldrh	r3, [r3, #0]
    cb2e:	62b3      	str	r3, [r6, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    cb30:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    cb32:	3b01      	subs	r3, #1
    cb34:	b29b      	uxth	r3, r3
    cb36:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
    cb38:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    cb3a:	b29b      	uxth	r3, r3
    cb3c:	2b00      	cmp	r3, #0
    cb3e:	d101      	bne.n	cb44 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    cb40:	3301      	adds	r3, #1
    cb42:	7533      	strb	r3, [r6, #20]
			}
		}
#  endif

		if (0
    cb44:	7963      	ldrb	r3, [r4, #5]
    cb46:	2b01      	cmp	r3, #1
    cb48:	d127      	bne.n	cb9a <_spi_interrupt_handler+0x9a>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    cb4a:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    cb4c:	2b00      	cmp	r3, #0
    cb4e:	d024      	beq.n	cb9a <_spi_interrupt_handler+0x9a>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    cb50:	6820      	ldr	r0, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    cb52:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    cb54:	780b      	ldrb	r3, [r1, #0]
    cb56:	b2da      	uxtb	r2, r3
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    cb58:	1c4b      	adds	r3, r1, #1
    cb5a:	62e3      	str	r3, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cb5c:	79a3      	ldrb	r3, [r4, #6]
    cb5e:	2b01      	cmp	r3, #1
    cb60:	d001      	beq.n	cb66 <_spi_interrupt_handler+0x66>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    cb62:	b293      	uxth	r3, r2
    cb64:	e004      	b.n	cb70 <_spi_interrupt_handler+0x70>
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    cb66:	784b      	ldrb	r3, [r1, #1]
    cb68:	021b      	lsls	r3, r3, #8
    cb6a:	4313      	orrs	r3, r2
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    cb6c:	3102      	adds	r1, #2
    cb6e:	62e1      	str	r1, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    cb70:	05db      	lsls	r3, r3, #23
    cb72:	0ddb      	lsrs	r3, r3, #23
    cb74:	6283      	str	r3, [r0, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    cb76:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    cb78:	3b01      	subs	r3, #1
    cb7a:	b29b      	uxth	r3, r3
    cb7c:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    cb7e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    cb80:	b29b      	uxth	r3, r3
    cb82:	2b00      	cmp	r3, #0
    cb84:	d109      	bne.n	cb9a <_spi_interrupt_handler+0x9a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    cb86:	3301      	adds	r3, #1
    cb88:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    cb8a:	7a63      	ldrb	r3, [r4, #9]
    cb8c:	2b01      	cmp	r3, #1
    cb8e:	d104      	bne.n	cb9a <_spi_interrupt_handler+0x9a>
    cb90:	79e3      	ldrb	r3, [r4, #7]
    cb92:	2b00      	cmp	r3, #0
    cb94:	d101      	bne.n	cb9a <_spi_interrupt_handler+0x9a>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    cb96:	3302      	adds	r3, #2
    cb98:	75b3      	strb	r3, [r6, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    cb9a:	076b      	lsls	r3, r5, #29
    cb9c:	d55f      	bpl.n	cc5e <_spi_interrupt_handler+0x15e>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cb9e:	8b73      	ldrh	r3, [r6, #26]
    cba0:	075b      	lsls	r3, r3, #29
    cba2:	d512      	bpl.n	cbca <_spi_interrupt_handler+0xca>
			if (module->dir != SPI_DIRECTION_WRITE) {
    cba4:	7a63      	ldrb	r3, [r4, #9]
    cba6:	2b01      	cmp	r3, #1
    cba8:	d00b      	beq.n	cbc2 <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    cbaa:	221e      	movs	r2, #30
    cbac:	2338      	movs	r3, #56	; 0x38
    cbae:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    cbb0:	3b35      	subs	r3, #53	; 0x35
    cbb2:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    cbb4:	3302      	adds	r3, #2
    cbb6:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    cbb8:	073b      	lsls	r3, r7, #28
    cbba:	d502      	bpl.n	cbc2 <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    cbbc:	0020      	movs	r0, r4
    cbbe:	69a3      	ldr	r3, [r4, #24]
    cbc0:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    cbc2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cbc4:	2304      	movs	r3, #4
    cbc6:	8373      	strh	r3, [r6, #26]
    cbc8:	e049      	b.n	cc5e <_spi_interrupt_handler+0x15e>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    cbca:	7a63      	ldrb	r3, [r4, #9]
    cbcc:	2b01      	cmp	r3, #1
    cbce:	d116      	bne.n	cbfe <_spi_interrupt_handler+0xfe>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    cbd0:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    cbd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    cbd4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    cbd6:	3b01      	subs	r3, #1
    cbd8:	b29b      	uxth	r3, r3
    cbda:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
    cbdc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    cbde:	b29b      	uxth	r3, r3
    cbe0:	2b00      	cmp	r3, #0
    cbe2:	d13c      	bne.n	cc5e <_spi_interrupt_handler+0x15e>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    cbe4:	3304      	adds	r3, #4
    cbe6:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    cbe8:	2200      	movs	r2, #0
    cbea:	3334      	adds	r3, #52	; 0x34
    cbec:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    cbee:	3b35      	subs	r3, #53	; 0x35
    cbf0:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    cbf2:	07fb      	lsls	r3, r7, #31
    cbf4:	d533      	bpl.n	cc5e <_spi_interrupt_handler+0x15e>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    cbf6:	0020      	movs	r0, r4
    cbf8:	68e3      	ldr	r3, [r4, #12]
    cbfa:	4798      	blx	r3
    cbfc:	e02f      	b.n	cc5e <_spi_interrupt_handler+0x15e>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    cbfe:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    cc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cc02:	05db      	lsls	r3, r3, #23
    cc04:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    cc06:	b2da      	uxtb	r2, r3
    cc08:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    cc0a:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    cc0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    cc0e:	1c51      	adds	r1, r2, #1
    cc10:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cc12:	79a1      	ldrb	r1, [r4, #6]
    cc14:	2901      	cmp	r1, #1
    cc16:	d104      	bne.n	cc22 <_spi_interrupt_handler+0x122>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    cc18:	0a1b      	lsrs	r3, r3, #8
    cc1a:	7053      	strb	r3, [r2, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    cc1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cc1e:	3301      	adds	r3, #1
    cc20:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    cc22:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    cc24:	3b01      	subs	r3, #1
    cc26:	b29b      	uxth	r3, r3
    cc28:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    cc2a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    cc2c:	b29b      	uxth	r3, r3
    cc2e:	2b00      	cmp	r3, #0
    cc30:	d115      	bne.n	cc5e <_spi_interrupt_handler+0x15e>
					module->status = STATUS_OK;
    cc32:	2200      	movs	r2, #0
    cc34:	3338      	adds	r3, #56	; 0x38
    cc36:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    cc38:	3b34      	subs	r3, #52	; 0x34
    cc3a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    cc3c:	7a63      	ldrb	r3, [r4, #9]
    cc3e:	2b02      	cmp	r3, #2
    cc40:	d105      	bne.n	cc4e <_spi_interrupt_handler+0x14e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    cc42:	077b      	lsls	r3, r7, #29
    cc44:	d50b      	bpl.n	cc5e <_spi_interrupt_handler+0x15e>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    cc46:	0020      	movs	r0, r4
    cc48:	6963      	ldr	r3, [r4, #20]
    cc4a:	4798      	blx	r3
    cc4c:	e007      	b.n	cc5e <_spi_interrupt_handler+0x15e>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    cc4e:	7a63      	ldrb	r3, [r4, #9]
    cc50:	2b00      	cmp	r3, #0
    cc52:	d104      	bne.n	cc5e <_spi_interrupt_handler+0x15e>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    cc54:	07bb      	lsls	r3, r7, #30
    cc56:	d502      	bpl.n	cc5e <_spi_interrupt_handler+0x15e>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    cc58:	0020      	movs	r0, r4
    cc5a:	6923      	ldr	r3, [r4, #16]
    cc5c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    cc5e:	07ab      	lsls	r3, r5, #30
    cc60:	d514      	bpl.n	cc8c <_spi_interrupt_handler+0x18c>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    cc62:	7963      	ldrb	r3, [r4, #5]
    cc64:	2b01      	cmp	r3, #1
    cc66:	d111      	bne.n	cc8c <_spi_interrupt_handler+0x18c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    cc68:	7a63      	ldrb	r3, [r4, #9]
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    cc6a:	2b01      	cmp	r3, #1
    cc6c:	d10e      	bne.n	cc8c <_spi_interrupt_handler+0x18c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    cc6e:	79e3      	ldrb	r3, [r4, #7]
    cc70:	2b00      	cmp	r3, #0
    cc72:	d10b      	bne.n	cc8c <_spi_interrupt_handler+0x18c>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    cc74:	3302      	adds	r3, #2
    cc76:	7533      	strb	r3, [r6, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    cc78:	3301      	adds	r3, #1
    cc7a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    cc7c:	2200      	movs	r2, #0
    cc7e:	3335      	adds	r3, #53	; 0x35
    cc80:	54e2      	strb	r2, [r4, r3]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    cc82:	07fb      	lsls	r3, r7, #31
    cc84:	d502      	bpl.n	cc8c <_spi_interrupt_handler+0x18c>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    cc86:	0020      	movs	r0, r4
    cc88:	68e3      	ldr	r3, [r4, #12]
    cc8a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    cc8c:	09ed      	lsrs	r5, r5, #7
    cc8e:	d007      	beq.n	cca0 <_spi_interrupt_handler+0x1a0>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    cc90:	2380      	movs	r3, #128	; 0x80
    cc92:	7533      	strb	r3, [r6, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    cc94:	7633      	strb	r3, [r6, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    cc96:	067b      	lsls	r3, r7, #25
    cc98:	d502      	bpl.n	cca0 <_spi_interrupt_handler+0x1a0>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    cc9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cc9c:	0020      	movs	r0, r4
    cc9e:	4798      	blx	r3
		}
	}
#  endif
}
    cca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cca2:	46c0      	nop			; (mov r8, r8)
    cca4:	20000434 	.word	0x20000434
    cca8:	2000044c 	.word	0x2000044c

0000ccac <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    ccac:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccae:	465f      	mov	r7, fp
    ccb0:	4656      	mov	r6, sl
    ccb2:	464d      	mov	r5, r9
    ccb4:	4644      	mov	r4, r8
    ccb6:	b4f0      	push	{r4, r5, r6, r7}
    ccb8:	b091      	sub	sp, #68	; 0x44
    ccba:	0005      	movs	r5, r0
    ccbc:	000c      	movs	r4, r1
    ccbe:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    ccc0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    ccc2:	0008      	movs	r0, r1
    ccc4:	4bbb      	ldr	r3, [pc, #748]	; (cfb4 <usart_init+0x308>)
    ccc6:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    ccc8:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    ccca:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    cccc:	07d2      	lsls	r2, r2, #31
    ccce:	d500      	bpl.n	ccd2 <usart_init+0x26>
    ccd0:	e167      	b.n	cfa2 <usart_init+0x2f6>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    ccd2:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    ccd4:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    ccd6:	0792      	lsls	r2, r2, #30
    ccd8:	d500      	bpl.n	ccdc <usart_init+0x30>
    ccda:	e162      	b.n	cfa2 <usart_init+0x2f6>
    ccdc:	49b6      	ldr	r1, [pc, #728]	; (cfb8 <usart_init+0x30c>)
    ccde:	6a0a      	ldr	r2, [r1, #32]
    cce0:	1c87      	adds	r7, r0, #2
    cce2:	3b1b      	subs	r3, #27
    cce4:	40bb      	lsls	r3, r7
    cce6:	4313      	orrs	r3, r2
    cce8:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    ccea:	a90f      	add	r1, sp, #60	; 0x3c
    ccec:	272d      	movs	r7, #45	; 0x2d
    ccee:	5df3      	ldrb	r3, [r6, r7]
    ccf0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    ccf2:	3014      	adds	r0, #20
    ccf4:	b2c3      	uxtb	r3, r0
    ccf6:	9302      	str	r3, [sp, #8]
    ccf8:	0018      	movs	r0, r3
    ccfa:	4bb0      	ldr	r3, [pc, #704]	; (cfbc <usart_init+0x310>)
    ccfc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    ccfe:	9802      	ldr	r0, [sp, #8]
    cd00:	4baf      	ldr	r3, [pc, #700]	; (cfc0 <usart_init+0x314>)
    cd02:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    cd04:	5df0      	ldrb	r0, [r6, r7]
    cd06:	2100      	movs	r1, #0
    cd08:	4bae      	ldr	r3, [pc, #696]	; (cfc4 <usart_init+0x318>)
    cd0a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    cd0c:	7af3      	ldrb	r3, [r6, #11]
    cd0e:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    cd10:	2324      	movs	r3, #36	; 0x24
    cd12:	5cf3      	ldrb	r3, [r6, r3]
    cd14:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    cd16:	2325      	movs	r3, #37	; 0x25
    cd18:	5cf3      	ldrb	r3, [r6, r3]
    cd1a:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    cd1c:	7ef3      	ldrb	r3, [r6, #27]
    cd1e:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    cd20:	7f33      	ldrb	r3, [r6, #28]
    cd22:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    cd24:	682b      	ldr	r3, [r5, #0]
    cd26:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    cd28:	0018      	movs	r0, r3
    cd2a:	4ba2      	ldr	r3, [pc, #648]	; (cfb4 <usart_init+0x308>)
    cd2c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    cd2e:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    cd30:	2200      	movs	r2, #0
    cd32:	230e      	movs	r3, #14
    cd34:	a906      	add	r1, sp, #24
    cd36:	468c      	mov	ip, r1
    cd38:	4463      	add	r3, ip
    cd3a:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    cd3c:	8a32      	ldrh	r2, [r6, #16]
    cd3e:	9202      	str	r2, [sp, #8]
    cd40:	2380      	movs	r3, #128	; 0x80
    cd42:	01db      	lsls	r3, r3, #7
    cd44:	429a      	cmp	r2, r3
    cd46:	d01a      	beq.n	cd7e <usart_init+0xd2>
    cd48:	d804      	bhi.n	cd54 <usart_init+0xa8>
    cd4a:	2380      	movs	r3, #128	; 0x80
    cd4c:	019b      	lsls	r3, r3, #6
    cd4e:	429a      	cmp	r2, r3
    cd50:	d00b      	beq.n	cd6a <usart_init+0xbe>
    cd52:	e107      	b.n	cf64 <usart_init+0x2b8>
    cd54:	23c0      	movs	r3, #192	; 0xc0
    cd56:	01db      	lsls	r3, r3, #7
    cd58:	9a02      	ldr	r2, [sp, #8]
    cd5a:	429a      	cmp	r2, r3
    cd5c:	d00a      	beq.n	cd74 <usart_init+0xc8>
    cd5e:	2380      	movs	r3, #128	; 0x80
    cd60:	021b      	lsls	r3, r3, #8
    cd62:	429a      	cmp	r2, r3
    cd64:	d100      	bne.n	cd68 <usart_init+0xbc>
    cd66:	e102      	b.n	cf6e <usart_init+0x2c2>
    cd68:	e0fc      	b.n	cf64 <usart_init+0x2b8>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    cd6a:	2310      	movs	r3, #16
    cd6c:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    cd6e:	3b0f      	subs	r3, #15
    cd70:	9307      	str	r3, [sp, #28]
    cd72:	e100      	b.n	cf76 <usart_init+0x2ca>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    cd74:	2308      	movs	r3, #8
    cd76:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    cd78:	3b07      	subs	r3, #7
    cd7a:	9307      	str	r3, [sp, #28]
    cd7c:	e0fb      	b.n	cf76 <usart_init+0x2ca>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    cd7e:	6833      	ldr	r3, [r6, #0]
    cd80:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    cd82:	68f3      	ldr	r3, [r6, #12]
    cd84:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    cd86:	6973      	ldr	r3, [r6, #20]
    cd88:	4698      	mov	r8, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    cd8a:	7e33      	ldrb	r3, [r6, #24]
    cd8c:	469b      	mov	fp, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    cd8e:	2326      	movs	r3, #38	; 0x26
    cd90:	5cf3      	ldrb	r3, [r6, r3]
    cd92:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    cd94:	6873      	ldr	r3, [r6, #4]
    cd96:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    cd98:	2b00      	cmp	r3, #0
    cd9a:	d015      	beq.n	cdc8 <usart_init+0x11c>
    cd9c:	2380      	movs	r3, #128	; 0x80
    cd9e:	055b      	lsls	r3, r3, #21
    cda0:	459a      	cmp	sl, r3
    cda2:	d136      	bne.n	ce12 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    cda4:	2327      	movs	r3, #39	; 0x27
    cda6:	5cf3      	ldrb	r3, [r6, r3]
    cda8:	2b00      	cmp	r3, #0
    cdaa:	d136      	bne.n	ce1a <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    cdac:	6a33      	ldr	r3, [r6, #32]
    cdae:	001f      	movs	r7, r3
    cdb0:	b2c0      	uxtb	r0, r0
    cdb2:	4b85      	ldr	r3, [pc, #532]	; (cfc8 <usart_init+0x31c>)
    cdb4:	4798      	blx	r3
    cdb6:	0001      	movs	r1, r0
    cdb8:	220e      	movs	r2, #14
    cdba:	ab06      	add	r3, sp, #24
    cdbc:	469c      	mov	ip, r3
    cdbe:	4462      	add	r2, ip
    cdc0:	0038      	movs	r0, r7
    cdc2:	4b82      	ldr	r3, [pc, #520]	; (cfcc <usart_init+0x320>)
    cdc4:	4798      	blx	r3
    cdc6:	e025      	b.n	ce14 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    cdc8:	2308      	movs	r3, #8
    cdca:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    cdcc:	2300      	movs	r3, #0
    cdce:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    cdd0:	2327      	movs	r3, #39	; 0x27
    cdd2:	5cf3      	ldrb	r3, [r6, r3]
    cdd4:	2b00      	cmp	r3, #0
    cdd6:	d00b      	beq.n	cdf0 <usart_init+0x144>
				status_code =
    cdd8:	9b06      	ldr	r3, [sp, #24]
    cdda:	9300      	str	r3, [sp, #0]
    cddc:	9b07      	ldr	r3, [sp, #28]
    cdde:	220e      	movs	r2, #14
    cde0:	a906      	add	r1, sp, #24
    cde2:	468c      	mov	ip, r1
    cde4:	4462      	add	r2, ip
    cde6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    cde8:	6a30      	ldr	r0, [r6, #32]
    cdea:	4f79      	ldr	r7, [pc, #484]	; (cfd0 <usart_init+0x324>)
    cdec:	47b8      	blx	r7
    cdee:	e011      	b.n	ce14 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    cdf0:	6a33      	ldr	r3, [r6, #32]
    cdf2:	001f      	movs	r7, r3
    cdf4:	b2c0      	uxtb	r0, r0
    cdf6:	4b74      	ldr	r3, [pc, #464]	; (cfc8 <usart_init+0x31c>)
    cdf8:	4798      	blx	r3
    cdfa:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    cdfc:	9b06      	ldr	r3, [sp, #24]
    cdfe:	9300      	str	r3, [sp, #0]
    ce00:	9b07      	ldr	r3, [sp, #28]
    ce02:	220e      	movs	r2, #14
    ce04:	a806      	add	r0, sp, #24
    ce06:	4684      	mov	ip, r0
    ce08:	4462      	add	r2, ip
    ce0a:	0038      	movs	r0, r7
    ce0c:	4f70      	ldr	r7, [pc, #448]	; (cfd0 <usart_init+0x324>)
    ce0e:	47b8      	blx	r7
    ce10:	e000      	b.n	ce14 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    ce12:	2000      	movs	r0, #0
    ce14:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    ce16:	d000      	beq.n	ce1a <usart_init+0x16e>
    ce18:	e0c3      	b.n	cfa2 <usart_init+0x2f6>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    ce1a:	7e73      	ldrb	r3, [r6, #25]
    ce1c:	2b00      	cmp	r3, #0
    ce1e:	d002      	beq.n	ce26 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    ce20:	7eb3      	ldrb	r3, [r6, #26]
    ce22:	464a      	mov	r2, r9
    ce24:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    ce26:	682a      	ldr	r2, [r5, #0]
    ce28:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    ce2a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    ce2c:	2b00      	cmp	r3, #0
    ce2e:	d1fc      	bne.n	ce2a <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    ce30:	330e      	adds	r3, #14
    ce32:	aa06      	add	r2, sp, #24
    ce34:	4694      	mov	ip, r2
    ce36:	4463      	add	r3, ip
    ce38:	881b      	ldrh	r3, [r3, #0]
    ce3a:	464a      	mov	r2, r9
    ce3c:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    ce3e:	9b04      	ldr	r3, [sp, #16]
    ce40:	9a03      	ldr	r2, [sp, #12]
    ce42:	4313      	orrs	r3, r2
    ce44:	4642      	mov	r2, r8
    ce46:	4313      	orrs	r3, r2
    ce48:	4652      	mov	r2, sl
    ce4a:	4313      	orrs	r3, r2
    ce4c:	433b      	orrs	r3, r7
    ce4e:	465a      	mov	r2, fp
    ce50:	0212      	lsls	r2, r2, #8
    ce52:	4313      	orrs	r3, r2
    ce54:	9a05      	ldr	r2, [sp, #20]
    ce56:	0757      	lsls	r7, r2, #29
    ce58:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    ce5a:	2327      	movs	r3, #39	; 0x27
    ce5c:	5cf3      	ldrb	r3, [r6, r3]
    ce5e:	2b00      	cmp	r3, #0
    ce60:	d101      	bne.n	ce66 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    ce62:	3304      	adds	r3, #4
    ce64:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    ce66:	7e71      	ldrb	r1, [r6, #25]
    ce68:	0289      	lsls	r1, r1, #10
    ce6a:	7f33      	ldrb	r3, [r6, #28]
    ce6c:	025b      	lsls	r3, r3, #9
    ce6e:	4319      	orrs	r1, r3
    ce70:	7f73      	ldrb	r3, [r6, #29]
    ce72:	021b      	lsls	r3, r3, #8
    ce74:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    ce76:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    ce78:	5cf3      	ldrb	r3, [r6, r3]
    ce7a:	045b      	lsls	r3, r3, #17
    ce7c:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    ce7e:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    ce80:	5cf0      	ldrb	r0, [r6, r3]
    ce82:	0400      	lsls	r0, r0, #16
    ce84:	000a      	movs	r2, r1
    ce86:	4302      	orrs	r2, r0
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
	ctrlb |= (uint32_t)config->character_size;
    ce88:	7ab1      	ldrb	r1, [r6, #10]
    ce8a:	7af3      	ldrb	r3, [r6, #11]
    ce8c:	4319      	orrs	r1, r3
    ce8e:	4311      	orrs	r1, r2
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    ce90:	8933      	ldrh	r3, [r6, #8]
    ce92:	2bff      	cmp	r3, #255	; 0xff
    ce94:	d004      	beq.n	cea0 <usart_init+0x1f4>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    ce96:	2280      	movs	r2, #128	; 0x80
    ce98:	0452      	lsls	r2, r2, #17
    ce9a:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    ce9c:	4319      	orrs	r1, r3
    ce9e:	e005      	b.n	ceac <usart_init+0x200>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    cea0:	7ef3      	ldrb	r3, [r6, #27]
    cea2:	2b00      	cmp	r3, #0
    cea4:	d002      	beq.n	ceac <usart_init+0x200>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    cea6:	2380      	movs	r3, #128	; 0x80
    cea8:	04db      	lsls	r3, r3, #19
    ceaa:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    ceac:	232c      	movs	r3, #44	; 0x2c
    ceae:	5cf3      	ldrb	r3, [r6, r3]
    ceb0:	2b00      	cmp	r3, #0
    ceb2:	d103      	bne.n	cebc <usart_init+0x210>
    ceb4:	4b47      	ldr	r3, [pc, #284]	; (cfd4 <usart_init+0x328>)
    ceb6:	789b      	ldrb	r3, [r3, #2]
    ceb8:	079b      	lsls	r3, r3, #30
    ceba:	d501      	bpl.n	cec0 <usart_init+0x214>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    cebc:	2380      	movs	r3, #128	; 0x80
    cebe:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    cec0:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    cec2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    cec4:	2b00      	cmp	r3, #0
    cec6:	d1fc      	bne.n	cec2 <usart_init+0x216>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    cec8:	464b      	mov	r3, r9
    ceca:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    cecc:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    cece:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    ced0:	2b00      	cmp	r3, #0
    ced2:	d1fc      	bne.n	cece <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    ced4:	464b      	mov	r3, r9
    ced6:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    ced8:	ab0e      	add	r3, sp, #56	; 0x38
    ceda:	2280      	movs	r2, #128	; 0x80
    cedc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    cede:	2200      	movs	r2, #0
    cee0:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    cee2:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    cee4:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    cee6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    cee8:	930a      	str	r3, [sp, #40]	; 0x28
    ceea:	6b73      	ldr	r3, [r6, #52]	; 0x34
    ceec:	930b      	str	r3, [sp, #44]	; 0x2c
    ceee:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    cef0:	930c      	str	r3, [sp, #48]	; 0x30
    cef2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    cef4:	9302      	str	r3, [sp, #8]
    cef6:	930d      	str	r3, [sp, #52]	; 0x34
    cef8:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    cefa:	ae0e      	add	r6, sp, #56	; 0x38
    cefc:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    cefe:	00bb      	lsls	r3, r7, #2
    cf00:	aa0a      	add	r2, sp, #40	; 0x28
    cf02:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    cf04:	2800      	cmp	r0, #0
    cf06:	d102      	bne.n	cf0e <usart_init+0x262>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    cf08:	0020      	movs	r0, r4
    cf0a:	4b33      	ldr	r3, [pc, #204]	; (cfd8 <usart_init+0x32c>)
    cf0c:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    cf0e:	1c43      	adds	r3, r0, #1
    cf10:	d005      	beq.n	cf1e <usart_init+0x272>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    cf12:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    cf14:	0c00      	lsrs	r0, r0, #16
    cf16:	b2c0      	uxtb	r0, r0
    cf18:	0031      	movs	r1, r6
    cf1a:	4b30      	ldr	r3, [pc, #192]	; (cfdc <usart_init+0x330>)
    cf1c:	4798      	blx	r3
    cf1e:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    cf20:	2f04      	cmp	r7, #4
    cf22:	d1eb      	bne.n	cefc <usart_init+0x250>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    cf24:	2300      	movs	r3, #0
    cf26:	60eb      	str	r3, [r5, #12]
    cf28:	612b      	str	r3, [r5, #16]
    cf2a:	616b      	str	r3, [r5, #20]
    cf2c:	61ab      	str	r3, [r5, #24]
    cf2e:	61eb      	str	r3, [r5, #28]
    cf30:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    cf32:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    cf34:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    cf36:	2200      	movs	r2, #0
    cf38:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    cf3a:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    cf3c:	3330      	adds	r3, #48	; 0x30
    cf3e:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    cf40:	3301      	adds	r3, #1
    cf42:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    cf44:	3301      	adds	r3, #1
    cf46:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    cf48:	3301      	adds	r3, #1
    cf4a:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    cf4c:	6828      	ldr	r0, [r5, #0]
    cf4e:	4b19      	ldr	r3, [pc, #100]	; (cfb4 <usart_init+0x308>)
    cf50:	4798      	blx	r3
    cf52:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    cf54:	4922      	ldr	r1, [pc, #136]	; (cfe0 <usart_init+0x334>)
    cf56:	4b23      	ldr	r3, [pc, #140]	; (cfe4 <usart_init+0x338>)
    cf58:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    cf5a:	00a4      	lsls	r4, r4, #2
    cf5c:	4b22      	ldr	r3, [pc, #136]	; (cfe8 <usart_init+0x33c>)
    cf5e:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    cf60:	2300      	movs	r3, #0
    cf62:	e01e      	b.n	cfa2 <usart_init+0x2f6>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    cf64:	2310      	movs	r3, #16
    cf66:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    cf68:	2300      	movs	r3, #0
    cf6a:	9307      	str	r3, [sp, #28]
    cf6c:	e003      	b.n	cf76 <usart_init+0x2ca>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    cf6e:	2303      	movs	r3, #3
    cf70:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    cf72:	2300      	movs	r3, #0
    cf74:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    cf76:	6833      	ldr	r3, [r6, #0]
    cf78:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    cf7a:	68f3      	ldr	r3, [r6, #12]
    cf7c:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    cf7e:	6973      	ldr	r3, [r6, #20]
    cf80:	4698      	mov	r8, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    cf82:	7e33      	ldrb	r3, [r6, #24]
    cf84:	469b      	mov	fp, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    cf86:	2326      	movs	r3, #38	; 0x26
    cf88:	5cf3      	ldrb	r3, [r6, r3]
    cf8a:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    cf8c:	6873      	ldr	r3, [r6, #4]
    cf8e:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    cf90:	2b00      	cmp	r3, #0
    cf92:	d100      	bne.n	cf96 <usart_init+0x2ea>
    cf94:	e71c      	b.n	cdd0 <usart_init+0x124>
    cf96:	2380      	movs	r3, #128	; 0x80
    cf98:	055b      	lsls	r3, r3, #21
    cf9a:	459a      	cmp	sl, r3
    cf9c:	d100      	bne.n	cfa0 <usart_init+0x2f4>
    cf9e:	e701      	b.n	cda4 <usart_init+0xf8>
    cfa0:	e73b      	b.n	ce1a <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    cfa2:	0018      	movs	r0, r3
    cfa4:	b011      	add	sp, #68	; 0x44
    cfa6:	bc3c      	pop	{r2, r3, r4, r5}
    cfa8:	4690      	mov	r8, r2
    cfaa:	4699      	mov	r9, r3
    cfac:	46a2      	mov	sl, r4
    cfae:	46ab      	mov	fp, r5
    cfb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cfb2:	46c0      	nop			; (mov r8, r8)
    cfb4:	0000c5c1 	.word	0x0000c5c1
    cfb8:	40000400 	.word	0x40000400
    cfbc:	0000d8f5 	.word	0x0000d8f5
    cfc0:	0000d869 	.word	0x0000d869
    cfc4:	0000c3ed 	.word	0x0000c3ed
    cfc8:	0000d911 	.word	0x0000d911
    cfcc:	0000c331 	.word	0x0000c331
    cfd0:	0000c359 	.word	0x0000c359
    cfd4:	41002000 	.word	0x41002000
    cfd8:	0000c439 	.word	0x0000c439
    cfdc:	0000d9ed 	.word	0x0000d9ed
    cfe0:	0000d101 	.word	0x0000d101
    cfe4:	0000c601 	.word	0x0000c601
    cfe8:	20000434 	.word	0x20000434

0000cfec <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    cfec:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    cfee:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    cff0:	2a00      	cmp	r2, #0
    cff2:	d00e      	beq.n	d012 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    cff4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    cff6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    cff8:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    cffa:	2a00      	cmp	r2, #0
    cffc:	d109      	bne.n	d012 <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    cffe:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    d000:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    d002:	2a00      	cmp	r2, #0
    d004:	d1fc      	bne.n	d000 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    d006:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    d008:	2102      	movs	r1, #2
    d00a:	7e1a      	ldrb	r2, [r3, #24]
    d00c:	420a      	tst	r2, r1
    d00e:	d0fc      	beq.n	d00a <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    d010:	2300      	movs	r3, #0
}
    d012:	0018      	movs	r0, r3
    d014:	4770      	bx	lr
    d016:	46c0      	nop			; (mov r8, r8)

0000d018 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    d018:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    d01a:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    d01c:	2a00      	cmp	r2, #0
    d01e:	d030      	beq.n	d082 <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    d020:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    d022:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    d024:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    d026:	2a00      	cmp	r2, #0
    d028:	d12b      	bne.n	d082 <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    d02a:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    d02c:	7e10      	ldrb	r0, [r2, #24]
    d02e:	0740      	lsls	r0, r0, #29
    d030:	d527      	bpl.n	d082 <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    d032:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    d034:	2b00      	cmp	r3, #0
    d036:	d1fc      	bne.n	d032 <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    d038:	8b53      	ldrh	r3, [r2, #26]
    d03a:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    d03c:	0698      	lsls	r0, r3, #26
    d03e:	d01d      	beq.n	d07c <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    d040:	0798      	lsls	r0, r3, #30
    d042:	d503      	bpl.n	d04c <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    d044:	2302      	movs	r3, #2
    d046:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    d048:	3318      	adds	r3, #24
    d04a:	e01a      	b.n	d082 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    d04c:	0758      	lsls	r0, r3, #29
    d04e:	d503      	bpl.n	d058 <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    d050:	2304      	movs	r3, #4
    d052:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    d054:	331a      	adds	r3, #26
    d056:	e014      	b.n	d082 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    d058:	07d8      	lsls	r0, r3, #31
    d05a:	d503      	bpl.n	d064 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    d05c:	2301      	movs	r3, #1
    d05e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    d060:	3312      	adds	r3, #18
    d062:	e00e      	b.n	d082 <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    d064:	06d8      	lsls	r0, r3, #27
    d066:	d503      	bpl.n	d070 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    d068:	2310      	movs	r3, #16
    d06a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    d06c:	3332      	adds	r3, #50	; 0x32
    d06e:	e008      	b.n	d082 <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    d070:	069b      	lsls	r3, r3, #26
    d072:	d503      	bpl.n	d07c <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    d074:	2320      	movs	r3, #32
    d076:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    d078:	3321      	adds	r3, #33	; 0x21
    d07a:	e002      	b.n	d082 <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    d07c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    d07e:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    d080:	2300      	movs	r3, #0
}
    d082:	0018      	movs	r0, r3
    d084:	4770      	bx	lr
    d086:	46c0      	nop			; (mov r8, r8)

0000d088 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    d088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d08a:	0004      	movs	r4, r0
    d08c:	000d      	movs	r5, r1
    d08e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    d090:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    d092:	4b0f      	ldr	r3, [pc, #60]	; (d0d0 <_usart_read_buffer+0x48>)
    d094:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    d096:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    d098:	b29b      	uxth	r3, r3
    d09a:	2b00      	cmp	r3, #0
    d09c:	d003      	beq.n	d0a6 <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    d09e:	4b0d      	ldr	r3, [pc, #52]	; (d0d4 <_usart_read_buffer+0x4c>)
    d0a0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    d0a2:	2005      	movs	r0, #5
    d0a4:	e013      	b.n	d0ce <_usart_read_buffer+0x46>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    d0a6:	85a6      	strh	r6, [r4, #44]	; 0x2c
    d0a8:	4b0a      	ldr	r3, [pc, #40]	; (d0d4 <_usart_read_buffer+0x4c>)
    d0aa:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	module->rx_buffer_ptr              = rx_data;
    d0ac:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    d0ae:	2205      	movs	r2, #5
    d0b0:	2332      	movs	r3, #50	; 0x32
    d0b2:	54e2      	strb	r2, [r4, r3]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    d0b4:	3b2e      	subs	r3, #46	; 0x2e
    d0b6:	75bb      	strb	r3, [r7, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    d0b8:	7a23      	ldrb	r3, [r4, #8]
    d0ba:	2b00      	cmp	r3, #0
    d0bc:	d001      	beq.n	d0c2 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    d0be:	2320      	movs	r3, #32
    d0c0:	75bb      	strb	r3, [r7, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    d0c2:	7a63      	ldrb	r3, [r4, #9]
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
    d0c4:	2000      	movs	r0, #0
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    d0c6:	2b00      	cmp	r3, #0
    d0c8:	d001      	beq.n	d0ce <_usart_read_buffer+0x46>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    d0ca:	2308      	movs	r3, #8
    d0cc:	75bb      	strb	r3, [r7, #22]
	}
#endif

	return STATUS_OK;
}
    d0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d0d0:	0000bd69 	.word	0x0000bd69
    d0d4:	0000bda9 	.word	0x0000bda9

0000d0d8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    d0d8:	1c93      	adds	r3, r2, #2
    d0da:	009b      	lsls	r3, r3, #2
    d0dc:	18c3      	adds	r3, r0, r3
    d0de:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    d0e0:	2130      	movs	r1, #48	; 0x30
    d0e2:	2301      	movs	r3, #1
    d0e4:	4093      	lsls	r3, r2
    d0e6:	5c42      	ldrb	r2, [r0, r1]
    d0e8:	4313      	orrs	r3, r2
    d0ea:	5443      	strb	r3, [r0, r1]
}
    d0ec:	4770      	bx	lr
    d0ee:	46c0      	nop			; (mov r8, r8)

0000d0f0 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    d0f0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    d0f2:	2201      	movs	r2, #1
    d0f4:	4b01      	ldr	r3, [pc, #4]	; (d0fc <usart_read_job+0xc>)
    d0f6:	4798      	blx	r3
}
    d0f8:	bd10      	pop	{r4, pc}
    d0fa:	46c0      	nop			; (mov r8, r8)
    d0fc:	0000d089 	.word	0x0000d089

0000d100 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    d100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    d102:	0080      	lsls	r0, r0, #2
    d104:	4b60      	ldr	r3, [pc, #384]	; (d288 <_usart_interrupt_handler+0x188>)
    d106:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    d108:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    d10a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    d10c:	2b00      	cmp	r3, #0
    d10e:	d1fc      	bne.n	d10a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    d110:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    d112:	7da6      	ldrb	r6, [r4, #22]
    d114:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    d116:	2330      	movs	r3, #48	; 0x30
    d118:	5ceb      	ldrb	r3, [r5, r3]
    d11a:	2231      	movs	r2, #49	; 0x31
    d11c:	5caf      	ldrb	r7, [r5, r2]
    d11e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    d120:	07f3      	lsls	r3, r6, #31
    d122:	d522      	bpl.n	d16a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    d124:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    d126:	b29b      	uxth	r3, r3
    d128:	2b00      	cmp	r3, #0
    d12a:	d01c      	beq.n	d166 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    d12c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    d12e:	7813      	ldrb	r3, [r2, #0]
    d130:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    d132:	1c51      	adds	r1, r2, #1
    d134:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    d136:	7969      	ldrb	r1, [r5, #5]
    d138:	2901      	cmp	r1, #1
    d13a:	d001      	beq.n	d140 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    d13c:	b29b      	uxth	r3, r3
    d13e:	e004      	b.n	d14a <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    d140:	7851      	ldrb	r1, [r2, #1]
    d142:	0209      	lsls	r1, r1, #8
    d144:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    d146:	3202      	adds	r2, #2
    d148:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    d14a:	05db      	lsls	r3, r3, #23
    d14c:	0ddb      	lsrs	r3, r3, #23
    d14e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    d150:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    d152:	3b01      	subs	r3, #1
    d154:	b29b      	uxth	r3, r3
    d156:	85eb      	strh	r3, [r5, #46]	; 0x2e
    d158:	2b00      	cmp	r3, #0
    d15a:	d106      	bne.n	d16a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    d15c:	3301      	adds	r3, #1
    d15e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    d160:	3301      	adds	r3, #1
    d162:	75a3      	strb	r3, [r4, #22]
    d164:	e001      	b.n	d16a <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    d166:	2301      	movs	r3, #1
    d168:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    d16a:	07b3      	lsls	r3, r6, #30
    d16c:	d509      	bpl.n	d182 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    d16e:	2302      	movs	r3, #2
    d170:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    d172:	2200      	movs	r2, #0
    d174:	3331      	adds	r3, #49	; 0x31
    d176:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    d178:	07fb      	lsls	r3, r7, #31
    d17a:	d502      	bpl.n	d182 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    d17c:	0028      	movs	r0, r5
    d17e:	68eb      	ldr	r3, [r5, #12]
    d180:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    d182:	0773      	lsls	r3, r6, #29
    d184:	d560      	bpl.n	d248 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    d186:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    d188:	b29b      	uxth	r3, r3
    d18a:	2b00      	cmp	r3, #0
    d18c:	d05a      	beq.n	d244 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    d18e:	8b63      	ldrh	r3, [r4, #26]
    d190:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    d192:	071a      	lsls	r2, r3, #28
    d194:	d402      	bmi.n	d19c <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    d196:	223f      	movs	r2, #63	; 0x3f
    d198:	4013      	ands	r3, r2
    d19a:	e001      	b.n	d1a0 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    d19c:	2237      	movs	r2, #55	; 0x37
    d19e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    d1a0:	2b00      	cmp	r3, #0
    d1a2:	d02d      	beq.n	d200 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    d1a4:	079a      	lsls	r2, r3, #30
    d1a6:	d505      	bpl.n	d1b4 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    d1a8:	221a      	movs	r2, #26
    d1aa:	2332      	movs	r3, #50	; 0x32
    d1ac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    d1ae:	3b30      	subs	r3, #48	; 0x30
    d1b0:	8363      	strh	r3, [r4, #26]
    d1b2:	e01f      	b.n	d1f4 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    d1b4:	075a      	lsls	r2, r3, #29
    d1b6:	d505      	bpl.n	d1c4 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    d1b8:	221e      	movs	r2, #30
    d1ba:	2332      	movs	r3, #50	; 0x32
    d1bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    d1be:	3b2e      	subs	r3, #46	; 0x2e
    d1c0:	8363      	strh	r3, [r4, #26]
    d1c2:	e017      	b.n	d1f4 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    d1c4:	07da      	lsls	r2, r3, #31
    d1c6:	d505      	bpl.n	d1d4 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    d1c8:	2213      	movs	r2, #19
    d1ca:	2332      	movs	r3, #50	; 0x32
    d1cc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    d1ce:	3b31      	subs	r3, #49	; 0x31
    d1d0:	8363      	strh	r3, [r4, #26]
    d1d2:	e00f      	b.n	d1f4 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    d1d4:	06da      	lsls	r2, r3, #27
    d1d6:	d505      	bpl.n	d1e4 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    d1d8:	2242      	movs	r2, #66	; 0x42
    d1da:	2332      	movs	r3, #50	; 0x32
    d1dc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    d1de:	3b22      	subs	r3, #34	; 0x22
    d1e0:	8363      	strh	r3, [r4, #26]
    d1e2:	e007      	b.n	d1f4 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    d1e4:	2220      	movs	r2, #32
    d1e6:	421a      	tst	r2, r3
    d1e8:	d004      	beq.n	d1f4 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    d1ea:	3221      	adds	r2, #33	; 0x21
    d1ec:	2332      	movs	r3, #50	; 0x32
    d1ee:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    d1f0:	3b12      	subs	r3, #18
    d1f2:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    d1f4:	077b      	lsls	r3, r7, #29
    d1f6:	d527      	bpl.n	d248 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    d1f8:	0028      	movs	r0, r5
    d1fa:	696b      	ldr	r3, [r5, #20]
    d1fc:	4798      	blx	r3
    d1fe:	e023      	b.n	d248 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    d200:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    d202:	05db      	lsls	r3, r3, #23
    d204:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    d206:	b2da      	uxtb	r2, r3
    d208:	6a69      	ldr	r1, [r5, #36]	; 0x24
    d20a:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    d20c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    d20e:	1c51      	adds	r1, r2, #1
    d210:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    d212:	7969      	ldrb	r1, [r5, #5]
    d214:	2901      	cmp	r1, #1
    d216:	d104      	bne.n	d222 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    d218:	0a1b      	lsrs	r3, r3, #8
    d21a:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    d21c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d21e:	3301      	adds	r3, #1
    d220:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    d222:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    d224:	3b01      	subs	r3, #1
    d226:	b29b      	uxth	r3, r3
    d228:	85ab      	strh	r3, [r5, #44]	; 0x2c
    d22a:	2b00      	cmp	r3, #0
    d22c:	d10c      	bne.n	d248 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    d22e:	3304      	adds	r3, #4
    d230:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    d232:	2200      	movs	r2, #0
    d234:	332e      	adds	r3, #46	; 0x2e
    d236:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    d238:	07bb      	lsls	r3, r7, #30
    d23a:	d505      	bpl.n	d248 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    d23c:	0028      	movs	r0, r5
    d23e:	692b      	ldr	r3, [r5, #16]
    d240:	4798      	blx	r3
    d242:	e001      	b.n	d248 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    d244:	2304      	movs	r3, #4
    d246:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    d248:	06f3      	lsls	r3, r6, #27
    d24a:	d507      	bpl.n	d25c <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    d24c:	2310      	movs	r3, #16
    d24e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    d250:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    d252:	06fb      	lsls	r3, r7, #27
    d254:	d502      	bpl.n	d25c <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    d256:	0028      	movs	r0, r5
    d258:	69eb      	ldr	r3, [r5, #28]
    d25a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    d25c:	06b3      	lsls	r3, r6, #26
    d25e:	d507      	bpl.n	d270 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    d260:	2320      	movs	r3, #32
    d262:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    d264:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    d266:	073b      	lsls	r3, r7, #28
    d268:	d502      	bpl.n	d270 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    d26a:	0028      	movs	r0, r5
    d26c:	69ab      	ldr	r3, [r5, #24]
    d26e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    d270:	0733      	lsls	r3, r6, #28
    d272:	d507      	bpl.n	d284 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    d274:	2308      	movs	r3, #8
    d276:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    d278:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    d27a:	06bb      	lsls	r3, r7, #26
    d27c:	d502      	bpl.n	d284 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    d27e:	6a2b      	ldr	r3, [r5, #32]
    d280:	0028      	movs	r0, r5
    d282:	4798      	blx	r3
		}
	}
#endif
}
    d284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d286:	46c0      	nop			; (mov r8, r8)
    d288:	20000434 	.word	0x20000434

0000d28c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    d28c:	b510      	push	{r4, lr}
	switch (clock_source) {
    d28e:	2808      	cmp	r0, #8
    d290:	d803      	bhi.n	d29a <system_clock_source_get_hz+0xe>
    d292:	0080      	lsls	r0, r0, #2
    d294:	4b1b      	ldr	r3, [pc, #108]	; (d304 <system_clock_source_get_hz+0x78>)
    d296:	581b      	ldr	r3, [r3, r0]
    d298:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    d29a:	2000      	movs	r0, #0
    d29c:	e030      	b.n	d300 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    d29e:	4b1a      	ldr	r3, [pc, #104]	; (d308 <system_clock_source_get_hz+0x7c>)
    d2a0:	6918      	ldr	r0, [r3, #16]
    d2a2:	e02d      	b.n	d300 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    d2a4:	4b19      	ldr	r3, [pc, #100]	; (d30c <system_clock_source_get_hz+0x80>)
    d2a6:	6a1b      	ldr	r3, [r3, #32]
    d2a8:	059b      	lsls	r3, r3, #22
    d2aa:	0f9b      	lsrs	r3, r3, #30
    d2ac:	4818      	ldr	r0, [pc, #96]	; (d310 <system_clock_source_get_hz+0x84>)
    d2ae:	40d8      	lsrs	r0, r3
    d2b0:	e026      	b.n	d300 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    d2b2:	4b15      	ldr	r3, [pc, #84]	; (d308 <system_clock_source_get_hz+0x7c>)
    d2b4:	6958      	ldr	r0, [r3, #20]
    d2b6:	e023      	b.n	d300 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    d2b8:	4b13      	ldr	r3, [pc, #76]	; (d308 <system_clock_source_get_hz+0x7c>)
    d2ba:	681b      	ldr	r3, [r3, #0]
    d2bc:	2002      	movs	r0, #2
    d2be:	4018      	ands	r0, r3
    d2c0:	d01e      	beq.n	d300 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    d2c2:	4912      	ldr	r1, [pc, #72]	; (d30c <system_clock_source_get_hz+0x80>)
    d2c4:	2210      	movs	r2, #16
    d2c6:	68cb      	ldr	r3, [r1, #12]
    d2c8:	421a      	tst	r2, r3
    d2ca:	d0fc      	beq.n	d2c6 <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    d2cc:	4b0e      	ldr	r3, [pc, #56]	; (d308 <system_clock_source_get_hz+0x7c>)
    d2ce:	681b      	ldr	r3, [r3, #0]
    d2d0:	075b      	lsls	r3, r3, #29
    d2d2:	d514      	bpl.n	d2fe <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    d2d4:	2000      	movs	r0, #0
    d2d6:	4b0f      	ldr	r3, [pc, #60]	; (d314 <system_clock_source_get_hz+0x88>)
    d2d8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    d2da:	4b0b      	ldr	r3, [pc, #44]	; (d308 <system_clock_source_get_hz+0x7c>)
    d2dc:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    d2de:	041b      	lsls	r3, r3, #16
    d2e0:	0c1b      	lsrs	r3, r3, #16
    d2e2:	4358      	muls	r0, r3
    d2e4:	e00c      	b.n	d300 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    d2e6:	2350      	movs	r3, #80	; 0x50
    d2e8:	4a08      	ldr	r2, [pc, #32]	; (d30c <system_clock_source_get_hz+0x80>)
    d2ea:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    d2ec:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    d2ee:	075b      	lsls	r3, r3, #29
    d2f0:	d506      	bpl.n	d300 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    d2f2:	4b05      	ldr	r3, [pc, #20]	; (d308 <system_clock_source_get_hz+0x7c>)
    d2f4:	68d8      	ldr	r0, [r3, #12]
    d2f6:	e003      	b.n	d300 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    d2f8:	2080      	movs	r0, #128	; 0x80
    d2fa:	0200      	lsls	r0, r0, #8
    d2fc:	e000      	b.n	d300 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    d2fe:	4806      	ldr	r0, [pc, #24]	; (d318 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    d300:	bd10      	pop	{r4, pc}
    d302:	46c0      	nop			; (mov r8, r8)
    d304:	00013fc4 	.word	0x00013fc4
    d308:	200000e4 	.word	0x200000e4
    d30c:	40000800 	.word	0x40000800
    d310:	007a1200 	.word	0x007a1200
    d314:	0000d911 	.word	0x0000d911
    d318:	02dc6c00 	.word	0x02dc6c00

0000d31c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    d31c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    d31e:	4c0c      	ldr	r4, [pc, #48]	; (d350 <system_clock_source_osc8m_set_config+0x34>)
    d320:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    d322:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    d324:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    d326:	7842      	ldrb	r2, [r0, #1]
    d328:	2001      	movs	r0, #1
    d32a:	4002      	ands	r2, r0
    d32c:	0192      	lsls	r2, r2, #6
    d32e:	2640      	movs	r6, #64	; 0x40
    d330:	43b3      	bics	r3, r6
    d332:	4313      	orrs	r3, r2
    d334:	0002      	movs	r2, r0
    d336:	402a      	ands	r2, r5
    d338:	01d2      	lsls	r2, r2, #7
    d33a:	307f      	adds	r0, #127	; 0x7f
    d33c:	4383      	bics	r3, r0
    d33e:	4313      	orrs	r3, r2
    d340:	2203      	movs	r2, #3
    d342:	400a      	ands	r2, r1
    d344:	0212      	lsls	r2, r2, #8
    d346:	4903      	ldr	r1, [pc, #12]	; (d354 <system_clock_source_osc8m_set_config+0x38>)
    d348:	400b      	ands	r3, r1
    d34a:	4313      	orrs	r3, r2
    d34c:	6223      	str	r3, [r4, #32]
}
    d34e:	bd70      	pop	{r4, r5, r6, pc}
    d350:	40000800 	.word	0x40000800
    d354:	fffffcff 	.word	0xfffffcff

0000d358 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    d358:	b5f0      	push	{r4, r5, r6, r7, lr}
    d35a:	465f      	mov	r7, fp
    d35c:	4656      	mov	r6, sl
    d35e:	464d      	mov	r5, r9
    d360:	4644      	mov	r4, r8
    d362:	b4f0      	push	{r4, r5, r6, r7}
    d364:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    d366:	4e2e      	ldr	r6, [pc, #184]	; (d420 <system_clock_source_xosc32k_set_config+0xc8>)
    d368:	8ab3      	ldrh	r3, [r6, #20]
    d36a:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    d36c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    d36e:	7803      	ldrb	r3, [r0, #0]
    d370:	425a      	negs	r2, r3
    d372:	415a      	adcs	r2, r3
    d374:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    d376:	7883      	ldrb	r3, [r0, #2]
    d378:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    d37a:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    d37c:	7902      	ldrb	r2, [r0, #4]
    d37e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    d380:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    d382:	7b02      	ldrb	r2, [r0, #12]
    d384:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    d386:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    d388:	6882      	ldr	r2, [r0, #8]
    d38a:	4826      	ldr	r0, [pc, #152]	; (d424 <system_clock_source_xosc32k_set_config+0xcc>)
    d38c:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    d38e:	2001      	movs	r0, #1
    d390:	464a      	mov	r2, r9
    d392:	0092      	lsls	r2, r2, #2
    d394:	4691      	mov	r9, r2
    d396:	2204      	movs	r2, #4
    d398:	4692      	mov	sl, r2
    d39a:	4662      	mov	r2, ip
    d39c:	4651      	mov	r1, sl
    d39e:	438a      	bics	r2, r1
    d3a0:	4694      	mov	ip, r2
    d3a2:	464a      	mov	r2, r9
    d3a4:	4661      	mov	r1, ip
    d3a6:	430a      	orrs	r2, r1
    d3a8:	4694      	mov	ip, r2
    d3aa:	4642      	mov	r2, r8
    d3ac:	4002      	ands	r2, r0
    d3ae:	00d2      	lsls	r2, r2, #3
    d3b0:	4690      	mov	r8, r2
    d3b2:	2208      	movs	r2, #8
    d3b4:	4691      	mov	r9, r2
    d3b6:	4662      	mov	r2, ip
    d3b8:	4649      	mov	r1, r9
    d3ba:	438a      	bics	r2, r1
    d3bc:	4694      	mov	ip, r2
    d3be:	4642      	mov	r2, r8
    d3c0:	4661      	mov	r1, ip
    d3c2:	430a      	orrs	r2, r1
    d3c4:	4694      	mov	ip, r2
    d3c6:	4003      	ands	r3, r0
    d3c8:	011b      	lsls	r3, r3, #4
    d3ca:	2210      	movs	r2, #16
    d3cc:	4690      	mov	r8, r2
    d3ce:	4662      	mov	r2, ip
    d3d0:	4641      	mov	r1, r8
    d3d2:	438a      	bics	r2, r1
    d3d4:	4313      	orrs	r3, r2
    d3d6:	4659      	mov	r1, fp
    d3d8:	4001      	ands	r1, r0
    d3da:	0149      	lsls	r1, r1, #5
    d3dc:	2220      	movs	r2, #32
    d3de:	4393      	bics	r3, r2
    d3e0:	430b      	orrs	r3, r1
    d3e2:	9a01      	ldr	r2, [sp, #4]
    d3e4:	4002      	ands	r2, r0
    d3e6:	0192      	lsls	r2, r2, #6
    d3e8:	2140      	movs	r1, #64	; 0x40
    d3ea:	438b      	bics	r3, r1
    d3ec:	4313      	orrs	r3, r2
    d3ee:	4007      	ands	r7, r0
    d3f0:	01ff      	lsls	r7, r7, #7
    d3f2:	2280      	movs	r2, #128	; 0x80
    d3f4:	4393      	bics	r3, r2
    d3f6:	433b      	orrs	r3, r7
    d3f8:	3a79      	subs	r2, #121	; 0x79
    d3fa:	4015      	ands	r5, r2
    d3fc:	022d      	lsls	r5, r5, #8
    d3fe:	4f0a      	ldr	r7, [pc, #40]	; (d428 <system_clock_source_xosc32k_set_config+0xd0>)
    d400:	403b      	ands	r3, r7
    d402:	432b      	orrs	r3, r5
    d404:	4004      	ands	r4, r0
    d406:	0320      	lsls	r0, r4, #12
    d408:	4c08      	ldr	r4, [pc, #32]	; (d42c <system_clock_source_xosc32k_set_config+0xd4>)
    d40a:	401c      	ands	r4, r3
    d40c:	4304      	orrs	r4, r0
    d40e:	82b4      	strh	r4, [r6, #20]
}
    d410:	b003      	add	sp, #12
    d412:	bc3c      	pop	{r2, r3, r4, r5}
    d414:	4690      	mov	r8, r2
    d416:	4699      	mov	r9, r3
    d418:	46a2      	mov	sl, r4
    d41a:	46ab      	mov	fp, r5
    d41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d41e:	46c0      	nop			; (mov r8, r8)
    d420:	40000800 	.word	0x40000800
    d424:	200000e4 	.word	0x200000e4
    d428:	fffff8ff 	.word	0xfffff8ff
    d42c:	ffffefff 	.word	0xffffefff

0000d430 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    d430:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    d432:	7a03      	ldrb	r3, [r0, #8]
    d434:	069b      	lsls	r3, r3, #26
    d436:	0c1a      	lsrs	r2, r3, #16
    d438:	8943      	ldrh	r3, [r0, #10]
    d43a:	059b      	lsls	r3, r3, #22
    d43c:	0d9b      	lsrs	r3, r3, #22
    d43e:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    d440:	4c19      	ldr	r4, [pc, #100]	; (d4a8 <system_clock_source_dfll_set_config+0x78>)
    d442:	6063      	str	r3, [r4, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    d444:	7981      	ldrb	r1, [r0, #6]
    d446:	79c3      	ldrb	r3, [r0, #7]
    d448:	4319      	orrs	r1, r3
    d44a:	8843      	ldrh	r3, [r0, #2]
    d44c:	8882      	ldrh	r2, [r0, #4]
    d44e:	4313      	orrs	r3, r2
    d450:	430b      	orrs	r3, r1
    d452:	7842      	ldrb	r2, [r0, #1]
    d454:	01d2      	lsls	r2, r2, #7
    d456:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    d458:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    d45a:	7803      	ldrb	r3, [r0, #0]
    d45c:	2b04      	cmp	r3, #4
    d45e:	d10f      	bne.n	d480 <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    d460:	7b03      	ldrb	r3, [r0, #12]
    d462:	069b      	lsls	r3, r3, #26
    d464:	8a02      	ldrh	r2, [r0, #16]
    d466:	4313      	orrs	r3, r2
    d468:	0019      	movs	r1, r3
    d46a:	89c3      	ldrh	r3, [r0, #14]
    d46c:	041b      	lsls	r3, r3, #16
    d46e:	4a0f      	ldr	r2, [pc, #60]	; (d4ac <system_clock_source_dfll_set_config+0x7c>)
    d470:	4013      	ands	r3, r2
    d472:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    d474:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    d476:	6821      	ldr	r1, [r4, #0]
    d478:	2304      	movs	r3, #4
    d47a:	430b      	orrs	r3, r1
    d47c:	6023      	str	r3, [r4, #0]
    d47e:	e011      	b.n	d4a4 <system_clock_source_dfll_set_config+0x74>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    d480:	2b20      	cmp	r3, #32
    d482:	d10f      	bne.n	d4a4 <system_clock_source_dfll_set_config+0x74>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    d484:	7b03      	ldrb	r3, [r0, #12]
    d486:	069b      	lsls	r3, r3, #26
    d488:	8a02      	ldrh	r2, [r0, #16]
    d48a:	4313      	orrs	r3, r2
    d48c:	0019      	movs	r1, r3
    d48e:	89c3      	ldrh	r3, [r0, #14]
    d490:	041b      	lsls	r3, r3, #16
    d492:	4a06      	ldr	r2, [pc, #24]	; (d4ac <system_clock_source_dfll_set_config+0x7c>)
    d494:	4013      	ands	r3, r2
    d496:	430b      	orrs	r3, r1
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    d498:	4a03      	ldr	r2, [pc, #12]	; (d4a8 <system_clock_source_dfll_set_config+0x78>)
    d49a:	6093      	str	r3, [r2, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    d49c:	6813      	ldr	r3, [r2, #0]
    d49e:	4904      	ldr	r1, [pc, #16]	; (d4b0 <system_clock_source_dfll_set_config+0x80>)
    d4a0:	430b      	orrs	r3, r1
    d4a2:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    d4a4:	bd10      	pop	{r4, pc}
    d4a6:	46c0      	nop			; (mov r8, r8)
    d4a8:	200000e4 	.word	0x200000e4
    d4ac:	03ff0000 	.word	0x03ff0000
    d4b0:	00000424 	.word	0x00000424

0000d4b4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    d4b4:	2808      	cmp	r0, #8
    d4b6:	d803      	bhi.n	d4c0 <system_clock_source_enable+0xc>
    d4b8:	0080      	lsls	r0, r0, #2
    d4ba:	4b25      	ldr	r3, [pc, #148]	; (d550 <system_clock_source_enable+0x9c>)
    d4bc:	581b      	ldr	r3, [r3, r0]
    d4be:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    d4c0:	2017      	movs	r0, #23
    d4c2:	e044      	b.n	d54e <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    d4c4:	4a23      	ldr	r2, [pc, #140]	; (d554 <system_clock_source_enable+0xa0>)
    d4c6:	6a11      	ldr	r1, [r2, #32]
    d4c8:	2302      	movs	r3, #2
    d4ca:	430b      	orrs	r3, r1
    d4cc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    d4ce:	2000      	movs	r0, #0
    d4d0:	e03d      	b.n	d54e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    d4d2:	4a20      	ldr	r2, [pc, #128]	; (d554 <system_clock_source_enable+0xa0>)
    d4d4:	6991      	ldr	r1, [r2, #24]
    d4d6:	2302      	movs	r3, #2
    d4d8:	430b      	orrs	r3, r1
    d4da:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    d4dc:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    d4de:	e036      	b.n	d54e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    d4e0:	4a1c      	ldr	r2, [pc, #112]	; (d554 <system_clock_source_enable+0xa0>)
    d4e2:	8a11      	ldrh	r1, [r2, #16]
    d4e4:	2302      	movs	r3, #2
    d4e6:	430b      	orrs	r3, r1
    d4e8:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    d4ea:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    d4ec:	e02f      	b.n	d54e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    d4ee:	4a19      	ldr	r2, [pc, #100]	; (d554 <system_clock_source_enable+0xa0>)
    d4f0:	8a91      	ldrh	r1, [r2, #20]
    d4f2:	2302      	movs	r3, #2
    d4f4:	430b      	orrs	r3, r1
    d4f6:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    d4f8:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    d4fa:	e028      	b.n	d54e <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    d4fc:	4916      	ldr	r1, [pc, #88]	; (d558 <system_clock_source_enable+0xa4>)
    d4fe:	680b      	ldr	r3, [r1, #0]
    d500:	2202      	movs	r2, #2
    d502:	4313      	orrs	r3, r2
    d504:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    d506:	4b13      	ldr	r3, [pc, #76]	; (d554 <system_clock_source_enable+0xa0>)
    d508:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    d50a:	0019      	movs	r1, r3
    d50c:	320e      	adds	r2, #14
    d50e:	68cb      	ldr	r3, [r1, #12]
    d510:	421a      	tst	r2, r3
    d512:	d0fc      	beq.n	d50e <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    d514:	4a10      	ldr	r2, [pc, #64]	; (d558 <system_clock_source_enable+0xa4>)
    d516:	6891      	ldr	r1, [r2, #8]
    d518:	4b0e      	ldr	r3, [pc, #56]	; (d554 <system_clock_source_enable+0xa0>)
    d51a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    d51c:	6852      	ldr	r2, [r2, #4]
    d51e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    d520:	2200      	movs	r2, #0
    d522:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    d524:	0019      	movs	r1, r3
    d526:	3210      	adds	r2, #16
    d528:	68cb      	ldr	r3, [r1, #12]
    d52a:	421a      	tst	r2, r3
    d52c:	d0fc      	beq.n	d528 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    d52e:	4b0a      	ldr	r3, [pc, #40]	; (d558 <system_clock_source_enable+0xa4>)
    d530:	681b      	ldr	r3, [r3, #0]
    d532:	b29b      	uxth	r3, r3
    d534:	4a07      	ldr	r2, [pc, #28]	; (d554 <system_clock_source_enable+0xa0>)
    d536:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    d538:	2000      	movs	r0, #0
    d53a:	e008      	b.n	d54e <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    d53c:	4905      	ldr	r1, [pc, #20]	; (d554 <system_clock_source_enable+0xa0>)
    d53e:	2244      	movs	r2, #68	; 0x44
    d540:	5c88      	ldrb	r0, [r1, r2]
    d542:	2302      	movs	r3, #2
    d544:	4303      	orrs	r3, r0
    d546:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    d548:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    d54a:	e000      	b.n	d54e <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    d54c:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    d54e:	4770      	bx	lr
    d550:	00013fe8 	.word	0x00013fe8
    d554:	40000800 	.word	0x40000800
    d558:	200000e4 	.word	0x200000e4

0000d55c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    d55c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d55e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    d560:	22c2      	movs	r2, #194	; 0xc2
    d562:	00d2      	lsls	r2, r2, #3
    d564:	4b47      	ldr	r3, [pc, #284]	; (d684 <system_clock_init+0x128>)
    d566:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    d568:	4947      	ldr	r1, [pc, #284]	; (d688 <system_clock_init+0x12c>)
    d56a:	684b      	ldr	r3, [r1, #4]
    d56c:	221e      	movs	r2, #30
    d56e:	4393      	bics	r3, r2
    d570:	3a1a      	subs	r2, #26
    d572:	4313      	orrs	r3, r2
    d574:	604b      	str	r3, [r1, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    d576:	3a02      	subs	r2, #2
    d578:	ab01      	add	r3, sp, #4
    d57a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    d57c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    d57e:	4d43      	ldr	r5, [pc, #268]	; (d68c <system_clock_init+0x130>)
    d580:	b2e0      	uxtb	r0, r4
    d582:	a901      	add	r1, sp, #4
    d584:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    d586:	3401      	adds	r4, #1
    d588:	2c25      	cmp	r4, #37	; 0x25
    d58a:	d1f9      	bne.n	d580 <system_clock_init+0x24>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    d58c:	a80a      	add	r0, sp, #40	; 0x28
    d58e:	2300      	movs	r3, #0
    d590:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    d592:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    d594:	2280      	movs	r2, #128	; 0x80
    d596:	0212      	lsls	r2, r2, #8
    d598:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    d59a:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    d59c:	2201      	movs	r2, #1
    d59e:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    d5a0:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    d5a2:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    d5a4:	3202      	adds	r2, #2
    d5a6:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    d5a8:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    d5aa:	4b39      	ldr	r3, [pc, #228]	; (d690 <system_clock_init+0x134>)
    d5ac:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    d5ae:	2005      	movs	r0, #5
    d5b0:	4b38      	ldr	r3, [pc, #224]	; (d694 <system_clock_init+0x138>)
    d5b2:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    d5b4:	4933      	ldr	r1, [pc, #204]	; (d684 <system_clock_init+0x128>)
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    d5b6:	2202      	movs	r2, #2

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    d5b8:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    d5ba:	421a      	tst	r2, r3
    d5bc:	d0fc      	beq.n	d5b8 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    d5be:	4a31      	ldr	r2, [pc, #196]	; (d684 <system_clock_init+0x128>)
    d5c0:	8a91      	ldrh	r1, [r2, #20]
    d5c2:	2380      	movs	r3, #128	; 0x80
    d5c4:	430b      	orrs	r3, r1
    d5c6:	8293      	strh	r3, [r2, #20]
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    d5c8:	ab05      	add	r3, sp, #20
    d5ca:	2100      	movs	r1, #0
    d5cc:	2200      	movs	r2, #0
    d5ce:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    d5d0:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    d5d2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    d5d4:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    d5d6:	313f      	adds	r1, #63	; 0x3f
    d5d8:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    d5da:	393b      	subs	r1, #59	; 0x3b
    d5dc:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    d5de:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    d5e0:	4b2d      	ldr	r3, [pc, #180]	; (d698 <system_clock_init+0x13c>)
    d5e2:	681b      	ldr	r3, [r3, #0]
    d5e4:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    d5e6:	2b3f      	cmp	r3, #63	; 0x3f
    d5e8:	d100      	bne.n	d5ec <system_clock_init+0x90>
		coarse = 0x1f;
    d5ea:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    d5ec:	a805      	add	r0, sp, #20
    d5ee:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    d5f0:	4b2a      	ldr	r3, [pc, #168]	; (d69c <system_clock_init+0x140>)
    d5f2:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    d5f4:	2307      	movs	r3, #7
    d5f6:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    d5f8:	3338      	adds	r3, #56	; 0x38
    d5fa:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    d5fc:	4b28      	ldr	r3, [pc, #160]	; (d6a0 <system_clock_init+0x144>)
    d5fe:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    d600:	a804      	add	r0, sp, #16
    d602:	2500      	movs	r5, #0
    d604:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    d606:	2601      	movs	r6, #1
    d608:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    d60a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    d60c:	4b25      	ldr	r3, [pc, #148]	; (d6a4 <system_clock_init+0x148>)
    d60e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    d610:	2006      	movs	r0, #6
    d612:	4f20      	ldr	r7, [pc, #128]	; (d694 <system_clock_init+0x138>)
    d614:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    d616:	4b24      	ldr	r3, [pc, #144]	; (d6a8 <system_clock_init+0x14c>)
    d618:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    d61a:	ac01      	add	r4, sp, #4
    d61c:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    d61e:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    d620:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    d622:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    d624:	2305      	movs	r3, #5
    d626:	7023      	strb	r3, [r4, #0]
    d628:	0021      	movs	r1, r4
    d62a:	2001      	movs	r0, #1
    d62c:	4b1f      	ldr	r3, [pc, #124]	; (d6ac <system_clock_init+0x150>)
    d62e:	4798      	blx	r3
    d630:	2001      	movs	r0, #1
    d632:	4b1f      	ldr	r3, [pc, #124]	; (d6b0 <system_clock_init+0x154>)
    d634:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    d636:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    d638:	0021      	movs	r1, r4
    d63a:	2000      	movs	r0, #0
    d63c:	4b13      	ldr	r3, [pc, #76]	; (d68c <system_clock_init+0x130>)
    d63e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    d640:	2000      	movs	r0, #0
    d642:	4b1c      	ldr	r3, [pc, #112]	; (d6b4 <system_clock_init+0x158>)
    d644:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    d646:	2007      	movs	r0, #7
    d648:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    d64a:	490e      	ldr	r1, [pc, #56]	; (d684 <system_clock_init+0x128>)


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    d64c:	22d0      	movs	r2, #208	; 0xd0

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    d64e:	68cb      	ldr	r3, [r1, #12]


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    d650:	4013      	ands	r3, r2
    d652:	2bd0      	cmp	r3, #208	; 0xd0
    d654:	d1fb      	bne.n	d64e <system_clock_init+0xf2>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    d656:	4a18      	ldr	r2, [pc, #96]	; (d6b8 <system_clock_init+0x15c>)
    d658:	2300      	movs	r3, #0
    d65a:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    d65c:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    d65e:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    d660:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    d662:	a901      	add	r1, sp, #4
    d664:	2201      	movs	r2, #1
    d666:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    d668:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    d66a:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    d66c:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    d66e:	3307      	adds	r3, #7
    d670:	700b      	strb	r3, [r1, #0]
    d672:	2000      	movs	r0, #0
    d674:	4b0d      	ldr	r3, [pc, #52]	; (d6ac <system_clock_init+0x150>)
    d676:	4798      	blx	r3
    d678:	2000      	movs	r0, #0
    d67a:	4b0d      	ldr	r3, [pc, #52]	; (d6b0 <system_clock_init+0x154>)
    d67c:	4798      	blx	r3
#endif
}
    d67e:	b00f      	add	sp, #60	; 0x3c
    d680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d682:	46c0      	nop			; (mov r8, r8)
    d684:	40000800 	.word	0x40000800
    d688:	41004000 	.word	0x41004000
    d68c:	0000d8f5 	.word	0x0000d8f5
    d690:	0000d359 	.word	0x0000d359
    d694:	0000d4b5 	.word	0x0000d4b5
    d698:	00806024 	.word	0x00806024
    d69c:	000005b9 	.word	0x000005b9
    d6a0:	0000d431 	.word	0x0000d431
    d6a4:	0000d31d 	.word	0x0000d31d
    d6a8:	0000d6bd 	.word	0x0000d6bd
    d6ac:	0000d6e1 	.word	0x0000d6e1
    d6b0:	0000d799 	.word	0x0000d799
    d6b4:	0000d869 	.word	0x0000d869
    d6b8:	40000400 	.word	0x40000400

0000d6bc <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    d6bc:	4a06      	ldr	r2, [pc, #24]	; (d6d8 <system_gclk_init+0x1c>)
    d6be:	6991      	ldr	r1, [r2, #24]
    d6c0:	2308      	movs	r3, #8
    d6c2:	430b      	orrs	r3, r1
    d6c4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    d6c6:	2201      	movs	r2, #1
    d6c8:	4b04      	ldr	r3, [pc, #16]	; (d6dc <system_gclk_init+0x20>)
    d6ca:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    d6cc:	0019      	movs	r1, r3
    d6ce:	780b      	ldrb	r3, [r1, #0]
    d6d0:	4213      	tst	r3, r2
    d6d2:	d1fc      	bne.n	d6ce <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    d6d4:	4770      	bx	lr
    d6d6:	46c0      	nop			; (mov r8, r8)
    d6d8:	40000400 	.word	0x40000400
    d6dc:	40000c00 	.word	0x40000c00

0000d6e0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    d6e0:	b570      	push	{r4, r5, r6, lr}
    d6e2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    d6e4:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    d6e6:	780c      	ldrb	r4, [r1, #0]
    d6e8:	0224      	lsls	r4, r4, #8
    d6ea:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    d6ec:	784b      	ldrb	r3, [r1, #1]
    d6ee:	2b00      	cmp	r3, #0
    d6f0:	d002      	beq.n	d6f8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    d6f2:	2380      	movs	r3, #128	; 0x80
    d6f4:	02db      	lsls	r3, r3, #11
    d6f6:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    d6f8:	7a4b      	ldrb	r3, [r1, #9]
    d6fa:	2b00      	cmp	r3, #0
    d6fc:	d002      	beq.n	d704 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    d6fe:	2380      	movs	r3, #128	; 0x80
    d700:	031b      	lsls	r3, r3, #12
    d702:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    d704:	6848      	ldr	r0, [r1, #4]
    d706:	2801      	cmp	r0, #1
    d708:	d918      	bls.n	d73c <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    d70a:	1e43      	subs	r3, r0, #1
    d70c:	4218      	tst	r0, r3
    d70e:	d110      	bne.n	d732 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    d710:	2802      	cmp	r0, #2
    d712:	d906      	bls.n	d722 <system_gclk_gen_set_config+0x42>
    d714:	2302      	movs	r3, #2
    d716:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    d718:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    d71a:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    d71c:	4298      	cmp	r0, r3
    d71e:	d8fb      	bhi.n	d718 <system_gclk_gen_set_config+0x38>
    d720:	e000      	b.n	d724 <system_gclk_gen_set_config+0x44>
    d722:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    d724:	0212      	lsls	r2, r2, #8
    d726:	4332      	orrs	r2, r6
    d728:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    d72a:	2380      	movs	r3, #128	; 0x80
    d72c:	035b      	lsls	r3, r3, #13
    d72e:	431c      	orrs	r4, r3
    d730:	e004      	b.n	d73c <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    d732:	0205      	lsls	r5, r0, #8
    d734:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    d736:	2380      	movs	r3, #128	; 0x80
    d738:	029b      	lsls	r3, r3, #10
    d73a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    d73c:	7a0b      	ldrb	r3, [r1, #8]
    d73e:	2b00      	cmp	r3, #0
    d740:	d002      	beq.n	d748 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    d742:	2380      	movs	r3, #128	; 0x80
    d744:	039b      	lsls	r3, r3, #14
    d746:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d748:	4a0f      	ldr	r2, [pc, #60]	; (d788 <system_gclk_gen_set_config+0xa8>)
    d74a:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    d74c:	b25b      	sxtb	r3, r3
    d74e:	2b00      	cmp	r3, #0
    d750:	dbfb      	blt.n	d74a <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    d752:	4b0e      	ldr	r3, [pc, #56]	; (d78c <system_gclk_gen_set_config+0xac>)
    d754:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    d756:	4b0e      	ldr	r3, [pc, #56]	; (d790 <system_gclk_gen_set_config+0xb0>)
    d758:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d75a:	4a0b      	ldr	r2, [pc, #44]	; (d788 <system_gclk_gen_set_config+0xa8>)
    d75c:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    d75e:	b25b      	sxtb	r3, r3
    d760:	2b00      	cmp	r3, #0
    d762:	dbfb      	blt.n	d75c <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    d764:	4b08      	ldr	r3, [pc, #32]	; (d788 <system_gclk_gen_set_config+0xa8>)
    d766:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d768:	001a      	movs	r2, r3
    d76a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    d76c:	b25b      	sxtb	r3, r3
    d76e:	2b00      	cmp	r3, #0
    d770:	dbfb      	blt.n	d76a <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    d772:	4a05      	ldr	r2, [pc, #20]	; (d788 <system_gclk_gen_set_config+0xa8>)
    d774:	6851      	ldr	r1, [r2, #4]
    d776:	2380      	movs	r3, #128	; 0x80
    d778:	025b      	lsls	r3, r3, #9
    d77a:	400b      	ands	r3, r1
    d77c:	431c      	orrs	r4, r3
    d77e:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    d780:	4b04      	ldr	r3, [pc, #16]	; (d794 <system_gclk_gen_set_config+0xb4>)
    d782:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    d784:	bd70      	pop	{r4, r5, r6, pc}
    d786:	46c0      	nop			; (mov r8, r8)
    d788:	40000c00 	.word	0x40000c00
    d78c:	0000bd69 	.word	0x0000bd69
    d790:	40000c08 	.word	0x40000c08
    d794:	0000bda9 	.word	0x0000bda9

0000d798 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    d798:	b510      	push	{r4, lr}
    d79a:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d79c:	4a0b      	ldr	r2, [pc, #44]	; (d7cc <system_gclk_gen_enable+0x34>)
    d79e:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    d7a0:	b25b      	sxtb	r3, r3
    d7a2:	2b00      	cmp	r3, #0
    d7a4:	dbfb      	blt.n	d79e <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    d7a6:	4b0a      	ldr	r3, [pc, #40]	; (d7d0 <system_gclk_gen_enable+0x38>)
    d7a8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    d7aa:	4b0a      	ldr	r3, [pc, #40]	; (d7d4 <system_gclk_gen_enable+0x3c>)
    d7ac:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d7ae:	4a07      	ldr	r2, [pc, #28]	; (d7cc <system_gclk_gen_enable+0x34>)
    d7b0:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    d7b2:	b25b      	sxtb	r3, r3
    d7b4:	2b00      	cmp	r3, #0
    d7b6:	dbfb      	blt.n	d7b0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    d7b8:	4a04      	ldr	r2, [pc, #16]	; (d7cc <system_gclk_gen_enable+0x34>)
    d7ba:	6853      	ldr	r3, [r2, #4]
    d7bc:	2180      	movs	r1, #128	; 0x80
    d7be:	0249      	lsls	r1, r1, #9
    d7c0:	430b      	orrs	r3, r1
    d7c2:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    d7c4:	4b04      	ldr	r3, [pc, #16]	; (d7d8 <system_gclk_gen_enable+0x40>)
    d7c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    d7c8:	bd10      	pop	{r4, pc}
    d7ca:	46c0      	nop			; (mov r8, r8)
    d7cc:	40000c00 	.word	0x40000c00
    d7d0:	0000bd69 	.word	0x0000bd69
    d7d4:	40000c04 	.word	0x40000c04
    d7d8:	0000bda9 	.word	0x0000bda9

0000d7dc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    d7dc:	b570      	push	{r4, r5, r6, lr}
    d7de:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d7e0:	4a1a      	ldr	r2, [pc, #104]	; (d84c <system_gclk_gen_get_hz+0x70>)
    d7e2:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    d7e4:	b25b      	sxtb	r3, r3
    d7e6:	2b00      	cmp	r3, #0
    d7e8:	dbfb      	blt.n	d7e2 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    d7ea:	4b19      	ldr	r3, [pc, #100]	; (d850 <system_gclk_gen_get_hz+0x74>)
    d7ec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    d7ee:	4b19      	ldr	r3, [pc, #100]	; (d854 <system_gclk_gen_get_hz+0x78>)
    d7f0:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d7f2:	4a16      	ldr	r2, [pc, #88]	; (d84c <system_gclk_gen_get_hz+0x70>)
    d7f4:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    d7f6:	b25b      	sxtb	r3, r3
    d7f8:	2b00      	cmp	r3, #0
    d7fa:	dbfb      	blt.n	d7f4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    d7fc:	4e13      	ldr	r6, [pc, #76]	; (d84c <system_gclk_gen_get_hz+0x70>)
    d7fe:	6870      	ldr	r0, [r6, #4]
    d800:	04c0      	lsls	r0, r0, #19
    d802:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    d804:	4b14      	ldr	r3, [pc, #80]	; (d858 <system_gclk_gen_get_hz+0x7c>)
    d806:	4798      	blx	r3
    d808:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    d80a:	4b12      	ldr	r3, [pc, #72]	; (d854 <system_gclk_gen_get_hz+0x78>)
    d80c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    d80e:	6876      	ldr	r6, [r6, #4]
    d810:	02f6      	lsls	r6, r6, #11
    d812:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    d814:	4b11      	ldr	r3, [pc, #68]	; (d85c <system_gclk_gen_get_hz+0x80>)
    d816:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d818:	4a0c      	ldr	r2, [pc, #48]	; (d84c <system_gclk_gen_get_hz+0x70>)
    d81a:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    d81c:	b25b      	sxtb	r3, r3
    d81e:	2b00      	cmp	r3, #0
    d820:	dbfb      	blt.n	d81a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    d822:	4b0a      	ldr	r3, [pc, #40]	; (d84c <system_gclk_gen_get_hz+0x70>)
    d824:	689c      	ldr	r4, [r3, #8]
    d826:	0224      	lsls	r4, r4, #8
    d828:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    d82a:	4b0d      	ldr	r3, [pc, #52]	; (d860 <system_gclk_gen_get_hz+0x84>)
    d82c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    d82e:	2e00      	cmp	r6, #0
    d830:	d107      	bne.n	d842 <system_gclk_gen_get_hz+0x66>
    d832:	2c01      	cmp	r4, #1
    d834:	d907      	bls.n	d846 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    d836:	0021      	movs	r1, r4
    d838:	0028      	movs	r0, r5
    d83a:	4b0a      	ldr	r3, [pc, #40]	; (d864 <system_gclk_gen_get_hz+0x88>)
    d83c:	4798      	blx	r3
    d83e:	0005      	movs	r5, r0
    d840:	e001      	b.n	d846 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    d842:	3401      	adds	r4, #1
    d844:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    d846:	0028      	movs	r0, r5
    d848:	bd70      	pop	{r4, r5, r6, pc}
    d84a:	46c0      	nop			; (mov r8, r8)
    d84c:	40000c00 	.word	0x40000c00
    d850:	0000bd69 	.word	0x0000bd69
    d854:	40000c04 	.word	0x40000c04
    d858:	0000d28d 	.word	0x0000d28d
    d85c:	40000c08 	.word	0x40000c08
    d860:	0000bda9 	.word	0x0000bda9
    d864:	00011355 	.word	0x00011355

0000d868 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    d868:	b510      	push	{r4, lr}
    d86a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    d86c:	4b06      	ldr	r3, [pc, #24]	; (d888 <system_gclk_chan_enable+0x20>)
    d86e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    d870:	4b06      	ldr	r3, [pc, #24]	; (d88c <system_gclk_chan_enable+0x24>)
    d872:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    d874:	4a06      	ldr	r2, [pc, #24]	; (d890 <system_gclk_chan_enable+0x28>)
    d876:	8851      	ldrh	r1, [r2, #2]
    d878:	2380      	movs	r3, #128	; 0x80
    d87a:	01db      	lsls	r3, r3, #7
    d87c:	430b      	orrs	r3, r1
    d87e:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    d880:	4b04      	ldr	r3, [pc, #16]	; (d894 <system_gclk_chan_enable+0x2c>)
    d882:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    d884:	bd10      	pop	{r4, pc}
    d886:	46c0      	nop			; (mov r8, r8)
    d888:	0000bd69 	.word	0x0000bd69
    d88c:	40000c02 	.word	0x40000c02
    d890:	40000c00 	.word	0x40000c00
    d894:	0000bda9 	.word	0x0000bda9

0000d898 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    d898:	b510      	push	{r4, lr}
    d89a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    d89c:	4b0f      	ldr	r3, [pc, #60]	; (d8dc <system_gclk_chan_disable+0x44>)
    d89e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    d8a0:	4b0f      	ldr	r3, [pc, #60]	; (d8e0 <system_gclk_chan_disable+0x48>)
    d8a2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    d8a4:	4b0f      	ldr	r3, [pc, #60]	; (d8e4 <system_gclk_chan_disable+0x4c>)
    d8a6:	885a      	ldrh	r2, [r3, #2]
    d8a8:	0512      	lsls	r2, r2, #20
    d8aa:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    d8ac:	8859      	ldrh	r1, [r3, #2]
    d8ae:	4a0e      	ldr	r2, [pc, #56]	; (d8e8 <system_gclk_chan_disable+0x50>)
    d8b0:	400a      	ands	r2, r1
    d8b2:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    d8b4:	8859      	ldrh	r1, [r3, #2]
    d8b6:	4a0d      	ldr	r2, [pc, #52]	; (d8ec <system_gclk_chan_disable+0x54>)
    d8b8:	400a      	ands	r2, r1
    d8ba:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    d8bc:	0019      	movs	r1, r3
    d8be:	2280      	movs	r2, #128	; 0x80
    d8c0:	01d2      	lsls	r2, r2, #7
    d8c2:	884b      	ldrh	r3, [r1, #2]
    d8c4:	4213      	tst	r3, r2
    d8c6:	d1fc      	bne.n	d8c2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    d8c8:	4906      	ldr	r1, [pc, #24]	; (d8e4 <system_gclk_chan_disable+0x4c>)
    d8ca:	884c      	ldrh	r4, [r1, #2]
    d8cc:	0202      	lsls	r2, r0, #8
    d8ce:	4b06      	ldr	r3, [pc, #24]	; (d8e8 <system_gclk_chan_disable+0x50>)
    d8d0:	4023      	ands	r3, r4
    d8d2:	4313      	orrs	r3, r2
    d8d4:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    d8d6:	4b06      	ldr	r3, [pc, #24]	; (d8f0 <system_gclk_chan_disable+0x58>)
    d8d8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    d8da:	bd10      	pop	{r4, pc}
    d8dc:	0000bd69 	.word	0x0000bd69
    d8e0:	40000c02 	.word	0x40000c02
    d8e4:	40000c00 	.word	0x40000c00
    d8e8:	fffff0ff 	.word	0xfffff0ff
    d8ec:	ffffbfff 	.word	0xffffbfff
    d8f0:	0000bda9 	.word	0x0000bda9

0000d8f4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    d8f4:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    d8f6:	780c      	ldrb	r4, [r1, #0]
    d8f8:	0224      	lsls	r4, r4, #8
    d8fa:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    d8fc:	4b02      	ldr	r3, [pc, #8]	; (d908 <system_gclk_chan_set_config+0x14>)
    d8fe:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    d900:	b2a4      	uxth	r4, r4
    d902:	4b02      	ldr	r3, [pc, #8]	; (d90c <system_gclk_chan_set_config+0x18>)
    d904:	805c      	strh	r4, [r3, #2]
}
    d906:	bd10      	pop	{r4, pc}
    d908:	0000d899 	.word	0x0000d899
    d90c:	40000c00 	.word	0x40000c00

0000d910 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    d910:	b510      	push	{r4, lr}
    d912:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    d914:	4b06      	ldr	r3, [pc, #24]	; (d930 <system_gclk_chan_get_hz+0x20>)
    d916:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    d918:	4b06      	ldr	r3, [pc, #24]	; (d934 <system_gclk_chan_get_hz+0x24>)
    d91a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    d91c:	4b06      	ldr	r3, [pc, #24]	; (d938 <system_gclk_chan_get_hz+0x28>)
    d91e:	885c      	ldrh	r4, [r3, #2]
    d920:	0524      	lsls	r4, r4, #20
    d922:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    d924:	4b05      	ldr	r3, [pc, #20]	; (d93c <system_gclk_chan_get_hz+0x2c>)
    d926:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    d928:	0020      	movs	r0, r4
    d92a:	4b05      	ldr	r3, [pc, #20]	; (d940 <system_gclk_chan_get_hz+0x30>)
    d92c:	4798      	blx	r3
}
    d92e:	bd10      	pop	{r4, pc}
    d930:	0000bd69 	.word	0x0000bd69
    d934:	40000c02 	.word	0x40000c02
    d938:	40000c00 	.word	0x40000c00
    d93c:	0000bda9 	.word	0x0000bda9
    d940:	0000d7dd 	.word	0x0000d7dd

0000d944 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    d944:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    d946:	78d3      	ldrb	r3, [r2, #3]
    d948:	2b00      	cmp	r3, #0
    d94a:	d11e      	bne.n	d98a <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    d94c:	7813      	ldrb	r3, [r2, #0]
    d94e:	2b80      	cmp	r3, #128	; 0x80
    d950:	d004      	beq.n	d95c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    d952:	061b      	lsls	r3, r3, #24
    d954:	2480      	movs	r4, #128	; 0x80
    d956:	0264      	lsls	r4, r4, #9
    d958:	4323      	orrs	r3, r4
    d95a:	e000      	b.n	d95e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    d95c:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    d95e:	7854      	ldrb	r4, [r2, #1]
    d960:	2502      	movs	r5, #2
    d962:	43ac      	bics	r4, r5
    d964:	d10a      	bne.n	d97c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    d966:	7894      	ldrb	r4, [r2, #2]
    d968:	2c00      	cmp	r4, #0
    d96a:	d103      	bne.n	d974 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    d96c:	2480      	movs	r4, #128	; 0x80
    d96e:	02a4      	lsls	r4, r4, #10
    d970:	4323      	orrs	r3, r4
    d972:	e002      	b.n	d97a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    d974:	24c0      	movs	r4, #192	; 0xc0
    d976:	02e4      	lsls	r4, r4, #11
    d978:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    d97a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    d97c:	7854      	ldrb	r4, [r2, #1]
    d97e:	3c01      	subs	r4, #1
    d980:	2c01      	cmp	r4, #1
    d982:	d812      	bhi.n	d9aa <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    d984:	4c18      	ldr	r4, [pc, #96]	; (d9e8 <_system_pinmux_config+0xa4>)
    d986:	4023      	ands	r3, r4
    d988:	e00f      	b.n	d9aa <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    d98a:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    d98c:	040b      	lsls	r3, r1, #16
    d98e:	0c1b      	lsrs	r3, r3, #16
    d990:	24a0      	movs	r4, #160	; 0xa0
    d992:	05e4      	lsls	r4, r4, #23
    d994:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    d996:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    d998:	0c0b      	lsrs	r3, r1, #16
    d99a:	24d0      	movs	r4, #208	; 0xd0
    d99c:	0624      	lsls	r4, r4, #24
    d99e:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    d9a0:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    d9a2:	78d3      	ldrb	r3, [r2, #3]
    d9a4:	2b00      	cmp	r3, #0
    d9a6:	d018      	beq.n	d9da <_system_pinmux_config+0x96>
    d9a8:	e01c      	b.n	d9e4 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    d9aa:	040c      	lsls	r4, r1, #16
    d9ac:	0c24      	lsrs	r4, r4, #16
    d9ae:	25a0      	movs	r5, #160	; 0xa0
    d9b0:	05ed      	lsls	r5, r5, #23
    d9b2:	432c      	orrs	r4, r5
    d9b4:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    d9b6:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    d9b8:	0c0c      	lsrs	r4, r1, #16
    d9ba:	25d0      	movs	r5, #208	; 0xd0
    d9bc:	062d      	lsls	r5, r5, #24
    d9be:	432c      	orrs	r4, r5
    d9c0:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    d9c2:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    d9c4:	78d4      	ldrb	r4, [r2, #3]
    d9c6:	2c00      	cmp	r4, #0
    d9c8:	d10c      	bne.n	d9e4 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    d9ca:	035b      	lsls	r3, r3, #13
    d9cc:	d505      	bpl.n	d9da <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    d9ce:	7893      	ldrb	r3, [r2, #2]
    d9d0:	2b01      	cmp	r3, #1
    d9d2:	d101      	bne.n	d9d8 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    d9d4:	6181      	str	r1, [r0, #24]
    d9d6:	e000      	b.n	d9da <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    d9d8:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    d9da:	7853      	ldrb	r3, [r2, #1]
    d9dc:	3b01      	subs	r3, #1
    d9de:	2b01      	cmp	r3, #1
    d9e0:	d800      	bhi.n	d9e4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    d9e2:	6081      	str	r1, [r0, #8]
		}
	}
}
    d9e4:	bd30      	pop	{r4, r5, pc}
    d9e6:	46c0      	nop			; (mov r8, r8)
    d9e8:	fffbffff 	.word	0xfffbffff

0000d9ec <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    d9ec:	b510      	push	{r4, lr}
    d9ee:	0003      	movs	r3, r0
    d9f0:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    d9f2:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    d9f4:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    d9f6:	2900      	cmp	r1, #0
    d9f8:	d104      	bne.n	da04 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    d9fa:	0958      	lsrs	r0, r3, #5
    d9fc:	01c0      	lsls	r0, r0, #7
    d9fe:	4905      	ldr	r1, [pc, #20]	; (da14 <system_pinmux_pin_set_config+0x28>)
    da00:	468c      	mov	ip, r1
    da02:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    da04:	211f      	movs	r1, #31
    da06:	400b      	ands	r3, r1
    da08:	391e      	subs	r1, #30
    da0a:	4099      	lsls	r1, r3
    da0c:	4b02      	ldr	r3, [pc, #8]	; (da18 <system_pinmux_pin_set_config+0x2c>)
    da0e:	4798      	blx	r3
}
    da10:	bd10      	pop	{r4, pc}
    da12:	46c0      	nop			; (mov r8, r8)
    da14:	41004400 	.word	0x41004400
    da18:	0000d945 	.word	0x0000d945

0000da1c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    da1c:	4770      	bx	lr
    da1e:	46c0      	nop			; (mov r8, r8)

0000da20 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    da20:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    da22:	4b04      	ldr	r3, [pc, #16]	; (da34 <system_init+0x14>)
    da24:	4798      	blx	r3

	/* Initialize board hardware */
	//system_board_init();

	/* Initialize EVSYS hardware */
	_system_events_init();
    da26:	4b04      	ldr	r3, [pc, #16]	; (da38 <system_init+0x18>)
    da28:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    da2a:	4b04      	ldr	r3, [pc, #16]	; (da3c <system_init+0x1c>)
    da2c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    da2e:	4b04      	ldr	r3, [pc, #16]	; (da40 <system_init+0x20>)
    da30:	4798      	blx	r3
}
    da32:	bd10      	pop	{r4, pc}
    da34:	0000d55d 	.word	0x0000d55d
    da38:	0000da1d 	.word	0x0000da1d
    da3c:	0000bec5 	.word	0x0000bec5
    da40:	0000da1d 	.word	0x0000da1d

0000da44 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    da44:	4b08      	ldr	r3, [pc, #32]	; (da68 <_tcc_get_inst_index+0x24>)
    da46:	4298      	cmp	r0, r3
    da48:	d00a      	beq.n	da60 <_tcc_get_inst_index+0x1c>
    da4a:	4b08      	ldr	r3, [pc, #32]	; (da6c <_tcc_get_inst_index+0x28>)
    da4c:	4298      	cmp	r0, r3
    da4e:	d005      	beq.n	da5c <_tcc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    da50:	2300      	movs	r3, #0
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    da52:	4a07      	ldr	r2, [pc, #28]	; (da70 <_tcc_get_inst_index+0x2c>)
    da54:	4290      	cmp	r0, r2
    da56:	d105      	bne.n	da64 <_tcc_get_inst_index+0x20>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    da58:	3302      	adds	r3, #2
    da5a:	e002      	b.n	da62 <_tcc_get_inst_index+0x1e>
    da5c:	2301      	movs	r3, #1
    da5e:	e000      	b.n	da62 <_tcc_get_inst_index+0x1e>
    da60:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
			return i;
    da62:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    da64:	0018      	movs	r0, r3
    da66:	4770      	bx	lr
    da68:	42002000 	.word	0x42002000
    da6c:	42002400 	.word	0x42002400
    da70:	42002800 	.word	0x42002800

0000da74 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    da74:	b510      	push	{r4, lr}
    da76:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    da78:	0008      	movs	r0, r1
    da7a:	4b4f      	ldr	r3, [pc, #316]	; (dbb8 <tcc_get_config_defaults+0x144>)
    da7c:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    da7e:	2300      	movs	r3, #0
    da80:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    da82:	0080      	lsls	r0, r0, #2
    da84:	4a4d      	ldr	r2, [pc, #308]	; (dbbc <tcc_get_config_defaults+0x148>)
    da86:	5882      	ldr	r2, [r0, r2]
    da88:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    da8a:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    da8c:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    da8e:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    da90:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    da92:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    da94:	61e3      	str	r3, [r4, #28]
    da96:	6223      	str	r3, [r4, #32]
    da98:	6263      	str	r3, [r4, #36]	; 0x24
    da9a:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    da9c:	7523      	strb	r3, [r4, #20]
    da9e:	7563      	strb	r3, [r4, #21]
    daa0:	75a3      	strb	r3, [r4, #22]
    daa2:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    daa4:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    daa6:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    daa8:	7423      	strb	r3, [r4, #16]
    daaa:	7463      	strb	r3, [r4, #17]
    daac:	74a3      	strb	r3, [r4, #18]
    daae:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    dab0:	222c      	movs	r2, #44	; 0x2c
    dab2:	54a3      	strb	r3, [r4, r2]
    dab4:	3201      	adds	r2, #1
    dab6:	54a3      	strb	r3, [r4, r2]
    dab8:	3201      	adds	r2, #1
    daba:	54a3      	strb	r3, [r4, r2]
    dabc:	3201      	adds	r2, #1
    dabe:	54a3      	strb	r3, [r4, r2]
    dac0:	3201      	adds	r2, #1
    dac2:	54a3      	strb	r3, [r4, r2]
    dac4:	3201      	adds	r2, #1
    dac6:	54a3      	strb	r3, [r4, r2]
    dac8:	3201      	adds	r2, #1
    daca:	54a3      	strb	r3, [r4, r2]
    dacc:	3201      	adds	r2, #1
    dace:	54a3      	strb	r3, [r4, r2]
    dad0:	3201      	adds	r2, #1
    dad2:	54a3      	strb	r3, [r4, r2]
    dad4:	3201      	adds	r2, #1
    dad6:	54a3      	strb	r3, [r4, r2]
    dad8:	3201      	adds	r2, #1
    dada:	54a3      	strb	r3, [r4, r2]
    dadc:	3201      	adds	r2, #1
    dade:	54a3      	strb	r3, [r4, r2]
    dae0:	3201      	adds	r2, #1
    dae2:	54a3      	strb	r3, [r4, r2]
    dae4:	3201      	adds	r2, #1
    dae6:	54a3      	strb	r3, [r4, r2]
    dae8:	3201      	adds	r2, #1
    daea:	54a3      	strb	r3, [r4, r2]
    daec:	3201      	adds	r2, #1
    daee:	54a3      	strb	r3, [r4, r2]
    daf0:	3201      	adds	r2, #1
    daf2:	54a3      	strb	r3, [r4, r2]
    daf4:	3201      	adds	r2, #1
    daf6:	54a3      	strb	r3, [r4, r2]
    daf8:	3201      	adds	r2, #1
    dafa:	54a3      	strb	r3, [r4, r2]
    dafc:	3201      	adds	r2, #1
    dafe:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    db00:	3201      	adds	r2, #1
    db02:	54a3      	strb	r3, [r4, r2]
    db04:	3201      	adds	r2, #1
    db06:	54a3      	strb	r3, [r4, r2]
    db08:	3201      	adds	r2, #1
    db0a:	54a3      	strb	r3, [r4, r2]
    db0c:	3201      	adds	r2, #1
    db0e:	54a3      	strb	r3, [r4, r2]
    db10:	3201      	adds	r2, #1
    db12:	54a3      	strb	r3, [r4, r2]
    db14:	3201      	adds	r2, #1
    db16:	54a3      	strb	r3, [r4, r2]
    db18:	3201      	adds	r2, #1
    db1a:	54a3      	strb	r3, [r4, r2]
    db1c:	3201      	adds	r2, #1
    db1e:	54a3      	strb	r3, [r4, r2]
    db20:	3201      	adds	r2, #1
    db22:	54a3      	strb	r3, [r4, r2]
    db24:	3201      	adds	r2, #1
    db26:	54a3      	strb	r3, [r4, r2]
    db28:	3201      	adds	r2, #1
    db2a:	54a3      	strb	r3, [r4, r2]
    db2c:	3201      	adds	r2, #1
    db2e:	54a3      	strb	r3, [r4, r2]
    db30:	3201      	adds	r2, #1
    db32:	54a3      	strb	r3, [r4, r2]
    db34:	3201      	adds	r2, #1
    db36:	54a3      	strb	r3, [r4, r2]
    db38:	3201      	adds	r2, #1
    db3a:	54a3      	strb	r3, [r4, r2]
    db3c:	3201      	adds	r2, #1
    db3e:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    db40:	3201      	adds	r2, #1
    db42:	54a3      	strb	r3, [r4, r2]
    db44:	3201      	adds	r2, #1
    db46:	54a3      	strb	r3, [r4, r2]
    db48:	3201      	adds	r2, #1
    db4a:	54a3      	strb	r3, [r4, r2]
    db4c:	3201      	adds	r2, #1
    db4e:	54a3      	strb	r3, [r4, r2]
    db50:	3201      	adds	r2, #1
    db52:	54a3      	strb	r3, [r4, r2]
    db54:	3201      	adds	r2, #1
    db56:	54a3      	strb	r3, [r4, r2]
    db58:	3201      	adds	r2, #1
    db5a:	54a3      	strb	r3, [r4, r2]
    db5c:	3201      	adds	r2, #1
    db5e:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    db60:	3241      	adds	r2, #65	; 0x41
    db62:	54a3      	strb	r3, [r4, r2]
    db64:	65a3      	str	r3, [r4, #88]	; 0x58
    db66:	67a3      	str	r3, [r4, #120]	; 0x78
    db68:	3201      	adds	r2, #1
    db6a:	54a3      	strb	r3, [r4, r2]
    db6c:	65e3      	str	r3, [r4, #92]	; 0x5c
    db6e:	67e3      	str	r3, [r4, #124]	; 0x7c
    db70:	3201      	adds	r2, #1
    db72:	54a3      	strb	r3, [r4, r2]
    db74:	6623      	str	r3, [r4, #96]	; 0x60
    db76:	3a1a      	subs	r2, #26
    db78:	50a3      	str	r3, [r4, r2]
    db7a:	321b      	adds	r2, #27
    db7c:	54a3      	strb	r3, [r4, r2]
    db7e:	6663      	str	r3, [r4, #100]	; 0x64
    db80:	3a17      	subs	r2, #23
    db82:	50a3      	str	r3, [r4, r2]
    db84:	3218      	adds	r2, #24
    db86:	54a3      	strb	r3, [r4, r2]
    db88:	66a3      	str	r3, [r4, #104]	; 0x68
    db8a:	3a14      	subs	r2, #20
    db8c:	50a3      	str	r3, [r4, r2]
    db8e:	3215      	adds	r2, #21
    db90:	54a3      	strb	r3, [r4, r2]
    db92:	66e3      	str	r3, [r4, #108]	; 0x6c
    db94:	3a11      	subs	r2, #17
    db96:	50a3      	str	r3, [r4, r2]
    db98:	3212      	adds	r2, #18
    db9a:	54a3      	strb	r3, [r4, r2]
    db9c:	6723      	str	r3, [r4, #112]	; 0x70
    db9e:	3a0e      	subs	r2, #14
    dba0:	50a3      	str	r3, [r4, r2]
    dba2:	320f      	adds	r2, #15
    dba4:	54a3      	strb	r3, [r4, r2]
    dba6:	6763      	str	r3, [r4, #116]	; 0x74
    dba8:	3a0b      	subs	r2, #11
    dbaa:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    dbac:	2101      	movs	r1, #1
    dbae:	320c      	adds	r2, #12
    dbb0:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    dbb2:	3201      	adds	r2, #1
    dbb4:	54a3      	strb	r3, [r4, r2]
}
    dbb6:	bd10      	pop	{r4, pc}
    dbb8:	0000da45 	.word	0x0000da45
    dbbc:	0001401c 	.word	0x0001401c

0000dbc0 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    dbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbc2:	465f      	mov	r7, fp
    dbc4:	4656      	mov	r6, sl
    dbc6:	464d      	mov	r5, r9
    dbc8:	4644      	mov	r4, r8
    dbca:	b4f0      	push	{r4, r5, r6, r7}
    dbcc:	b08f      	sub	sp, #60	; 0x3c
    dbce:	9001      	str	r0, [sp, #4]
    dbd0:	000c      	movs	r4, r1
    dbd2:	0016      	movs	r6, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    dbd4:	0008      	movs	r0, r1
    dbd6:	4b83      	ldr	r3, [pc, #524]	; (dde4 <tcc_init+0x224>)
    dbd8:	4798      	blx	r3
    dbda:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    dbdc:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    dbde:	4882      	ldr	r0, [pc, #520]	; (dde8 <tcc_init+0x228>)
    dbe0:	6a07      	ldr	r7, [r0, #32]
    dbe2:	009d      	lsls	r5, r3, #2
    dbe4:	4a81      	ldr	r2, [pc, #516]	; (ddec <tcc_init+0x22c>)
    dbe6:	58aa      	ldr	r2, [r5, r2]
    dbe8:	433a      	orrs	r2, r7
    dbea:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    dbec:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    dbee:	201c      	movs	r0, #28
	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    dbf0:	0792      	lsls	r2, r2, #30
    dbf2:	d500      	bpl.n	dbf6 <tcc_init+0x36>
    dbf4:	e1c5      	b.n	df82 <tcc_init+0x3c2>
		return STATUS_ERR_DENIED;
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    dbf6:	6822      	ldr	r2, [r4, #0]
    dbf8:	381b      	subs	r0, #27
    dbfa:	4002      	ands	r2, r0
		return STATUS_ERR_DENIED;
    dbfc:	301b      	adds	r0, #27
	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    dbfe:	2a00      	cmp	r2, #0
    dc00:	d000      	beq.n	dc04 <tcc_init+0x44>
    dc02:	e1be      	b.n	df82 <tcc_init+0x3c2>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    dc04:	4f7a      	ldr	r7, [pc, #488]	; (ddf0 <tcc_init+0x230>)
    dc06:	59ef      	ldr	r7, [r5, r7]

	/* Check all counter values */
	if ((config->counter.count > count_max)
		|| (config->counter.period > count_max)
		) {
		return STATUS_ERR_INVALID_ARG;
    dc08:	2017      	movs	r0, #23

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];

	/* Check all counter values */
	if ((config->counter.count > count_max)
    dc0a:	6835      	ldr	r5, [r6, #0]
    dc0c:	42af      	cmp	r7, r5
    dc0e:	d200      	bcs.n	dc12 <tcc_init+0x52>
    dc10:	e1b7      	b.n	df82 <tcc_init+0x3c2>
		|| (config->counter.period > count_max)
    dc12:	6875      	ldr	r5, [r6, #4]
    dc14:	42af      	cmp	r7, r5
    dc16:	d200      	bcs.n	dc1a <tcc_init+0x5a>
    dc18:	e1b3      	b.n	df82 <tcc_init+0x3c2>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
    dc1a:	69f0      	ldr	r0, [r6, #28]
    dc1c:	4287      	cmp	r7, r0
    dc1e:	d200      	bcs.n	dc22 <tcc_init+0x62>
    dc20:	e19a      	b.n	df58 <tcc_init+0x398>
    dc22:	6a30      	ldr	r0, [r6, #32]
    dc24:	4287      	cmp	r7, r0
    dc26:	d200      	bcs.n	dc2a <tcc_init+0x6a>
    dc28:	e198      	b.n	df5c <tcc_init+0x39c>
    dc2a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    dc2c:	4287      	cmp	r7, r0
    dc2e:	d200      	bcs.n	dc32 <tcc_init+0x72>
    dc30:	e196      	b.n	df60 <tcc_init+0x3a0>
    dc32:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    dc34:	4287      	cmp	r7, r0
    dc36:	d200      	bcs.n	dc3a <tcc_init+0x7a>
    dc38:	e194      	b.n	df64 <tcc_init+0x3a4>
    dc3a:	2098      	movs	r0, #152	; 0x98
    dc3c:	4684      	mov	ip, r0
    dc3e:	44b4      	add	ip, r6
    dc40:	4660      	mov	r0, ip
    dc42:	9006      	str	r0, [sp, #24]
    dc44:	2700      	movs	r7, #0
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
    dc46:	7805      	ldrb	r5, [r0, #0]
    dc48:	2d00      	cmp	r5, #0
    dc4a:	d004      	beq.n	dc56 <tcc_init+0x96>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    dc4c:	4d69      	ldr	r5, [pc, #420]	; (ddf4 <tcc_init+0x234>)
    dc4e:	5c6d      	ldrb	r5, [r5, r1]
    dc50:	42bd      	cmp	r5, r7
    dc52:	dc00      	bgt.n	dc56 <tcc_init+0x96>
    dc54:	e188      	b.n	df68 <tcc_init+0x3a8>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    dc56:	3701      	adds	r7, #1
    dc58:	3001      	adds	r0, #1
    dc5a:	2f08      	cmp	r7, #8
    dc5c:	d1f3      	bne.n	dc46 <tcc_init+0x86>
    dc5e:	2000      	movs	r0, #0
    dc60:	9002      	str	r0, [sp, #8]

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    dc62:	2580      	movs	r5, #128	; 0x80
    dc64:	046d      	lsls	r5, r5, #17
    dc66:	46ac      	mov	ip, r5
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if (config->capture.channel_function[i] ==
    dc68:	1835      	adds	r5, r6, r0
    dc6a:	7c2d      	ldrb	r5, [r5, #16]
    dc6c:	2d01      	cmp	r5, #1
    dc6e:	d109      	bne.n	dc84 <tcc_init+0xc4>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    dc70:	4d61      	ldr	r5, [pc, #388]	; (ddf8 <tcc_init+0x238>)
    dc72:	5c6d      	ldrb	r5, [r5, r1]
    dc74:	4285      	cmp	r5, r0
    dc76:	da00      	bge.n	dc7a <tcc_init+0xba>
    dc78:	e178      	b.n	df6c <tcc_init+0x3ac>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    dc7a:	4665      	mov	r5, ip
    dc7c:	4085      	lsls	r5, r0
    dc7e:	9f02      	ldr	r7, [sp, #8]
    dc80:	432f      	orrs	r7, r5
    dc82:	9702      	str	r7, [sp, #8]
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    dc84:	3001      	adds	r0, #1
    dc86:	2804      	cmp	r0, #4
    dc88:	d1ee      	bne.n	dc68 <tcc_init+0xa8>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    dc8a:	21a1      	movs	r1, #161	; 0xa1
    dc8c:	5c71      	ldrb	r1, [r6, r1]
    dc8e:	2900      	cmp	r1, #0
    dc90:	d004      	beq.n	dc9c <tcc_init+0xdc>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    dc92:	2180      	movs	r1, #128	; 0x80
    dc94:	0109      	lsls	r1, r1, #4
    dc96:	9802      	ldr	r0, [sp, #8]
    dc98:	4308      	orrs	r0, r1
    dc9a:	9002      	str	r0, [sp, #8]
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
	uint8_t ctrlb = 0;

	if (config->counter.oneshot) {
    dc9c:	7a31      	ldrb	r1, [r6, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    dc9e:	1e48      	subs	r0, r1, #1
    dca0:	4181      	sbcs	r1, r0
    dca2:	0089      	lsls	r1, r1, #2
    dca4:	9105      	str	r1, [sp, #20]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    dca6:	7a71      	ldrb	r1, [r6, #9]
    dca8:	2901      	cmp	r1, #1
    dcaa:	d102      	bne.n	dcb2 <tcc_init+0xf2>
		ctrlb |= TCC_CTRLBSET_DIR;
    dcac:	9805      	ldr	r0, [sp, #20]
    dcae:	4308      	orrs	r0, r1
    dcb0:	9005      	str	r0, [sp, #20]
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    dcb2:	4951      	ldr	r1, [pc, #324]	; (ddf8 <tcc_init+0x238>)
    dcb4:	5cc9      	ldrb	r1, [r1, r3]
    dcb6:	0008      	movs	r0, r1
    dcb8:	9104      	str	r1, [sp, #16]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    dcba:	2135      	movs	r1, #53	; 0x35
    dcbc:	5c77      	ldrb	r7, [r6, r1]
    dcbe:	4287      	cmp	r7, r0
    dcc0:	d300      	bcc.n	dcc4 <tcc_init+0x104>
    dcc2:	e15d      	b.n	df80 <tcc_init+0x3c0>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
    dcc4:	212c      	movs	r1, #44	; 0x2c
    dcc6:	5c71      	ldrb	r1, [r6, r1]
    dcc8:	290f      	cmp	r1, #15
    dcca:	d900      	bls.n	dcce <tcc_init+0x10e>
    dccc:	e158      	b.n	df80 <tcc_init+0x3c0>
	}

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    dcce:	7b30      	ldrb	r0, [r6, #12]
    dcd0:	9008      	str	r0, [sp, #32]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    dcd2:	7af0      	ldrb	r0, [r6, #11]
    dcd4:	9009      	str	r0, [sp, #36]	; 0x24
    dcd6:	0030      	movs	r0, r6
    dcd8:	302d      	adds	r0, #45	; 0x2d
    dcda:	2500      	movs	r5, #0
    dcdc:	4690      	mov	r8, r2
    dcde:	46a1      	mov	r9, r4
    dce0:	002c      	movs	r4, r5
    dce2:	46b3      	mov	fp, r6
    dce4:	0006      	movs	r6, r0
    dce6:	9307      	str	r3, [sp, #28]
    dce8:	e00a      	b.n	dd00 <tcc_init+0x140>
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    dcea:	7c9f      	ldrb	r7, [r3, #18]
    dcec:	9a04      	ldr	r2, [sp, #16]
    dcee:	42ba      	cmp	r2, r7
    dcf0:	d800      	bhi.n	dcf4 <tcc_init+0x134>
    dcf2:	e145      	b.n	df80 <tcc_init+0x3c0>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
    dcf4:	7a59      	ldrb	r1, [r3, #9]
    dcf6:	360a      	adds	r6, #10
    dcf8:	3404      	adds	r4, #4
    dcfa:	290f      	cmp	r1, #15
    dcfc:	d900      	bls.n	dd00 <tcc_init+0x140>
    dcfe:	e13f      	b.n	df80 <tcc_init+0x3c0>
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    dd00:	0609      	lsls	r1, r1, #24
    dd02:	23f0      	movs	r3, #240	; 0xf0
    dd04:	051b      	lsls	r3, r3, #20
    dd06:	4019      	ands	r1, r3
    dd08:	0033      	movs	r3, r6
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    dd0a:	7835      	ldrb	r5, [r6, #0]
    dd0c:	042d      	lsls	r5, r5, #16
    dd0e:	22ff      	movs	r2, #255	; 0xff
    dd10:	0412      	lsls	r2, r2, #16
    dd12:	4015      	ands	r5, r2
    dd14:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    dd16:	7872      	ldrb	r2, [r6, #1]
    dd18:	2080      	movs	r0, #128	; 0x80
    dd1a:	9003      	str	r0, [sp, #12]
    dd1c:	2a00      	cmp	r2, #0
    dd1e:	d101      	bne.n	dd24 <tcc_init+0x164>
    dd20:	4642      	mov	r2, r8
    dd22:	9203      	str	r2, [sp, #12]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    dd24:	789a      	ldrb	r2, [r3, #2]
    dd26:	2008      	movs	r0, #8
    dd28:	2a00      	cmp	r2, #0
    dd2a:	d100      	bne.n	dd2e <tcc_init+0x16e>
    dd2c:	4640      	mov	r0, r8
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    dd2e:	78da      	ldrb	r2, [r3, #3]
    dd30:	4694      	mov	ip, r2
    dd32:	2210      	movs	r2, #16
    dd34:	4665      	mov	r5, ip
    dd36:	2d00      	cmp	r5, #0
    dd38:	d100      	bne.n	dd3c <tcc_init+0x17c>
    dd3a:	4642      	mov	r2, r8
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    dd3c:	02bf      	lsls	r7, r7, #10
    dd3e:	25c0      	movs	r5, #192	; 0xc0
    dd40:	012d      	lsls	r5, r5, #4
    dd42:	402f      	ands	r7, r5
    dd44:	4339      	orrs	r1, r7
    dd46:	791f      	ldrb	r7, [r3, #4]
    dd48:	2503      	movs	r5, #3
    dd4a:	402f      	ands	r7, r5
    dd4c:	4339      	orrs	r1, r7
    dd4e:	4655      	mov	r5, sl
    dd50:	430d      	orrs	r5, r1
    dd52:	795f      	ldrb	r7, [r3, #5]
    dd54:	017f      	lsls	r7, r7, #5
    dd56:	2160      	movs	r1, #96	; 0x60
    dd58:	400f      	ands	r7, r1
    dd5a:	433d      	orrs	r5, r7
    dd5c:	7999      	ldrb	r1, [r3, #6]
    dd5e:	0209      	lsls	r1, r1, #8
    dd60:	27c0      	movs	r7, #192	; 0xc0
    dd62:	00bf      	lsls	r7, r7, #2
    dd64:	4039      	ands	r1, r7
    dd66:	430d      	orrs	r5, r1
    dd68:	79d9      	ldrb	r1, [r3, #7]
    dd6a:	0309      	lsls	r1, r1, #12
    dd6c:	27e0      	movs	r7, #224	; 0xe0
    dd6e:	01ff      	lsls	r7, r7, #7
    dd70:	4039      	ands	r1, r7
    dd72:	430d      	orrs	r5, r1
    dd74:	9903      	ldr	r1, [sp, #12]
    dd76:	430d      	orrs	r5, r1
    dd78:	4328      	orrs	r0, r5
    dd7a:	4302      	orrs	r2, r0
    dd7c:	a90c      	add	r1, sp, #48	; 0x30
    dd7e:	5062      	str	r2, [r4, r1]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    dd80:	2c04      	cmp	r4, #4
    dd82:	d1b2      	bne.n	dcea <tcc_init+0x12a>
    dd84:	464c      	mov	r4, r9
    dd86:	465e      	mov	r6, fp
    dd88:	9b07      	ldr	r3, [sp, #28]
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    dd8a:	4a1a      	ldr	r2, [pc, #104]	; (ddf4 <tcc_init+0x234>)
    dd8c:	5cd2      	ldrb	r2, [r2, r3]
    dd8e:	4691      	mov	r9, r2
    dd90:	4659      	mov	r1, fp
    dd92:	3150      	adds	r1, #80	; 0x50
    dd94:	4658      	mov	r0, fp
    dd96:	3041      	adds	r0, #65	; 0x41
	uint32_t drvctrl;

	drvctrl = 0;
    dd98:	2700      	movs	r7, #0

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    dd9a:	2200      	movs	r2, #0
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    dd9c:	2501      	movs	r5, #1
    dd9e:	46aa      	mov	sl, r5
			if (i >= ow_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    dda0:	2502      	movs	r5, #2
    dda2:	35ff      	adds	r5, #255	; 0xff
    dda4:	46ab      	mov	fp, r5
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    dda6:	2580      	movs	r5, #128	; 0x80
    dda8:	026d      	lsls	r5, r5, #9
    ddaa:	46a8      	mov	r8, r5
    ddac:	46a4      	mov	ip, r4
    ddae:	001c      	movs	r4, r3
    ddb0:	464b      	mov	r3, r9
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
    ddb2:	780d      	ldrb	r5, [r1, #0]
    ddb4:	2d00      	cmp	r5, #0
    ddb6:	d009      	beq.n	ddcc <tcc_init+0x20c>
			if (i >= ow_num) {
    ddb8:	4293      	cmp	r3, r2
    ddba:	d800      	bhi.n	ddbe <tcc_init+0x1fe>
    ddbc:	e0d8      	b.n	df70 <tcc_init+0x3b0>
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    ddbe:	4645      	mov	r5, r8
    ddc0:	4095      	lsls	r5, r2
    ddc2:	432f      	orrs	r7, r5
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    ddc4:	7805      	ldrb	r5, [r0, #0]
    ddc6:	2d00      	cmp	r5, #0
    ddc8:	d106      	bne.n	ddd8 <tcc_init+0x218>
    ddca:	e01a      	b.n	de02 <tcc_init+0x242>
    ddcc:	7805      	ldrb	r5, [r0, #0]
    ddce:	2d00      	cmp	r5, #0
    ddd0:	d017      	beq.n	de02 <tcc_init+0x242>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    ddd2:	4293      	cmp	r3, r2
    ddd4:	d800      	bhi.n	ddd8 <tcc_init+0x218>
    ddd6:	e0cd      	b.n	df74 <tcc_init+0x3b4>
				return STATUS_ERR_INVALID_ARG;
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    ddd8:	2d02      	cmp	r5, #2
    ddda:	d10f      	bne.n	ddfc <tcc_init+0x23c>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    dddc:	465d      	mov	r5, fp
    ddde:	4095      	lsls	r5, r2
    dde0:	432f      	orrs	r7, r5
    dde2:	e00e      	b.n	de02 <tcc_init+0x242>
    dde4:	0000da45 	.word	0x0000da45
    dde8:	40000400 	.word	0x40000400
    ddec:	00014010 	.word	0x00014010
    ddf0:	0001401c 	.word	0x0001401c
    ddf4:	0001402c 	.word	0x0001402c
    ddf8:	00014028 	.word	0x00014028
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    ddfc:	4655      	mov	r5, sl
    ddfe:	4095      	lsls	r5, r2
    de00:	432f      	orrs	r7, r5
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    de02:	3201      	adds	r2, #1
    de04:	3101      	adds	r1, #1
    de06:	3002      	adds	r0, #2
    de08:	2a08      	cmp	r2, #8
    de0a:	d1d2      	bne.n	ddb2 <tcc_init+0x1f2>
    de0c:	4699      	mov	r9, r3
    de0e:	0023      	movs	r3, r4
    de10:	4664      	mov	r4, ip
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    de12:	7e72      	ldrb	r2, [r6, #25]
    de14:	0112      	lsls	r2, r2, #4
    de16:	2130      	movs	r1, #48	; 0x30
    de18:	400a      	ands	r2, r1
    de1a:	7e31      	ldrb	r1, [r6, #24]
    de1c:	2007      	movs	r0, #7
    de1e:	4001      	ands	r1, r0
    de20:	430a      	orrs	r2, r1
    de22:	4692      	mov	sl, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    de24:	2200      	movs	r2, #0
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    de26:	2080      	movs	r0, #128	; 0x80
    de28:	0240      	lsls	r0, r0, #9
    de2a:	4655      	mov	r5, sl

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
    de2c:	18b1      	adds	r1, r6, r2
    de2e:	7d09      	ldrb	r1, [r1, #20]
    de30:	2900      	cmp	r1, #0
    de32:	d006      	beq.n	de42 <tcc_init+0x282>
			if (n >= cc_num) {
    de34:	9904      	ldr	r1, [sp, #16]
    de36:	4291      	cmp	r1, r2
    de38:	dc00      	bgt.n	de3c <tcc_init+0x27c>
    de3a:	e09d      	b.n	df78 <tcc_init+0x3b8>
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    de3c:	0001      	movs	r1, r0
    de3e:	4091      	lsls	r1, r2
    de40:	430d      	orrs	r5, r1
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    de42:	3201      	adds	r2, #1
    de44:	2a04      	cmp	r2, #4
    de46:	d1f1      	bne.n	de2c <tcc_init+0x26c>
    de48:	46aa      	mov	sl, r5
    de4a:	9801      	ldr	r0, [sp, #4]
    de4c:	0002      	movs	r2, r0
    de4e:	3204      	adds	r2, #4
    de50:	3034      	adds	r0, #52	; 0x34

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		module_inst->callback[i] = NULL;
    de52:	2100      	movs	r1, #0
    de54:	c202      	stmia	r2!, {r1}
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    de56:	4282      	cmp	r2, r0
    de58:	d1fc      	bne.n	de54 <tcc_init+0x294>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    de5a:	2200      	movs	r2, #0
    de5c:	9801      	ldr	r0, [sp, #4]
    de5e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    de60:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    de62:	0099      	lsls	r1, r3, #2
    de64:	4a4a      	ldr	r2, [pc, #296]	; (df90 <tcc_init+0x3d0>)
    de66:	5088      	str	r0, [r1, r2]
#endif

	module_inst->hw = hw;
    de68:	6004      	str	r4, [r0, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    de6a:	22a0      	movs	r2, #160	; 0xa0
    de6c:	5cb1      	ldrb	r1, [r6, r2]
    de6e:	3a64      	subs	r2, #100	; 0x64
    de70:	5481      	strb	r1, [r0, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->counter.clock_source;
    de72:	a90b      	add	r1, sp, #44	; 0x2c
    de74:	7ab2      	ldrb	r2, [r6, #10]
    de76:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    de78:	4a46      	ldr	r2, [pc, #280]	; (df94 <tcc_init+0x3d4>)
    de7a:	5cd5      	ldrb	r5, [r2, r3]
    de7c:	0028      	movs	r0, r5
    de7e:	4b46      	ldr	r3, [pc, #280]	; (df98 <tcc_init+0x3d8>)
    de80:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    de82:	0028      	movs	r0, r5
    de84:	4b45      	ldr	r3, [pc, #276]	; (df9c <tcc_init+0x3dc>)
    de86:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    de88:	464b      	mov	r3, r9
    de8a:	2b00      	cmp	r3, #0
    de8c:	dd22      	ble.n	ded4 <tcc_init+0x314>
    de8e:	0035      	movs	r5, r6
    de90:	3558      	adds	r5, #88	; 0x58
    de92:	3398      	adds	r3, #152	; 0x98
    de94:	4698      	mov	r8, r3
    de96:	44b0      	add	r8, r6
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    de98:	2301      	movs	r3, #1
    de9a:	4699      	mov	r9, r3
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    de9c:	46b3      	mov	fp, r6
    de9e:	4646      	mov	r6, r8
    dea0:	46a0      	mov	r8, r4
    dea2:	9c06      	ldr	r4, [sp, #24]
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
    dea4:	7823      	ldrb	r3, [r4, #0]
    dea6:	2b00      	cmp	r3, #0
    dea8:	d00e      	beq.n	dec8 <tcc_init+0x308>
    deaa:	ab0a      	add	r3, sp, #40	; 0x28
    deac:	464a      	mov	r2, r9
    deae:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    deb0:	2300      	movs	r3, #0
    deb2:	aa0a      	add	r2, sp, #40	; 0x28
    deb4:	70d3      	strb	r3, [r2, #3]
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    deb6:	6a2b      	ldr	r3, [r5, #32]
    deb8:	7013      	strb	r3, [r2, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    deba:	0013      	movs	r3, r2
    debc:	464a      	mov	r2, r9
    debe:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    dec0:	7828      	ldrb	r0, [r5, #0]
    dec2:	0019      	movs	r1, r3
    dec4:	4b36      	ldr	r3, [pc, #216]	; (dfa0 <tcc_init+0x3e0>)
    dec6:	4798      	blx	r3
    dec8:	3401      	adds	r4, #1
    deca:	3504      	adds	r5, #4
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    decc:	42b4      	cmp	r4, r6
    dece:	d1e9      	bne.n	dea4 <tcc_init+0x2e4>
    ded0:	4644      	mov	r4, r8
    ded2:	465e      	mov	r6, fp

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    ded4:	9b08      	ldr	r3, [sp, #32]
    ded6:	031a      	lsls	r2, r3, #12
    ded8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    deda:	021b      	lsls	r3, r3, #8
    dedc:	4313      	orrs	r3, r2
    dede:	9a02      	ldr	r2, [sp, #8]
    dee0:	4313      	orrs	r3, r2
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    dee2:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    dee4:	2204      	movs	r2, #4
    dee6:	68a3      	ldr	r3, [r4, #8]
    dee8:	421a      	tst	r2, r3
    deea:	d1fc      	bne.n	dee6 <tcc_init+0x326>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    deec:	23ff      	movs	r3, #255	; 0xff
    deee:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    def0:	2204      	movs	r2, #4
    def2:	68a3      	ldr	r3, [r4, #8]
    def4:	421a      	tst	r2, r3
    def6:	d1fc      	bne.n	def2 <tcc_init+0x332>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    def8:	466b      	mov	r3, sp
    defa:	7d1b      	ldrb	r3, [r3, #20]
    defc:	7163      	strb	r3, [r4, #5]

	hw->FCTRLA.reg = faults[0];
    defe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    df00:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    df02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    df04:	6123      	str	r3, [r4, #16]

	hw->DRVCTRL.reg = drvctrl;
    df06:	61a7      	str	r7, [r4, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    df08:	4a26      	ldr	r2, [pc, #152]	; (dfa4 <tcc_init+0x3e4>)
    df0a:	68a3      	ldr	r3, [r4, #8]
    df0c:	4213      	tst	r3, r2
    df0e:	d1fc      	bne.n	df0a <tcc_init+0x34a>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    df10:	4653      	mov	r3, sl
    df12:	63e3      	str	r3, [r4, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    df14:	2210      	movs	r2, #16
    df16:	68a3      	ldr	r3, [r4, #8]
    df18:	421a      	tst	r2, r3
    df1a:	d1fc      	bne.n	df16 <tcc_init+0x356>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    df1c:	6833      	ldr	r3, [r6, #0]
    df1e:	6363      	str	r3, [r4, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    df20:	4a21      	ldr	r2, [pc, #132]	; (dfa8 <tcc_init+0x3e8>)
    df22:	68a3      	ldr	r3, [r4, #8]
    df24:	4213      	tst	r3, r2
    df26:	d1fc      	bne.n	df22 <tcc_init+0x362>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    df28:	6873      	ldr	r3, [r6, #4]
    df2a:	6423      	str	r3, [r4, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    df2c:	9804      	ldr	r0, [sp, #16]
    df2e:	2800      	cmp	r0, #0
    df30:	dd24      	ble.n	df7c <tcc_init+0x3bc>
    df32:	361c      	adds	r6, #28
    df34:	2100      	movs	r1, #0
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    df36:	4d1d      	ldr	r5, [pc, #116]	; (dfac <tcc_init+0x3ec>)
    df38:	002a      	movs	r2, r5
    df3a:	408a      	lsls	r2, r1
    df3c:	68a3      	ldr	r3, [r4, #8]
    df3e:	421a      	tst	r2, r3
    df40:	d1fc      	bne.n	df3c <tcc_init+0x37c>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    df42:	ce04      	ldmia	r6!, {r2}
    df44:	000b      	movs	r3, r1
    df46:	3310      	adds	r3, #16
    df48:	009b      	lsls	r3, r3, #2
    df4a:	18e3      	adds	r3, r4, r3
    df4c:	605a      	str	r2, [r3, #4]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    df4e:	3101      	adds	r1, #1
    df50:	4288      	cmp	r0, r1
    df52:	dcf1      	bgt.n	df38 <tcc_init+0x378>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    df54:	2000      	movs	r0, #0
    df56:	e014      	b.n	df82 <tcc_init+0x3c2>

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
			) {
			return STATUS_ERR_INVALID_ARG;
    df58:	2017      	movs	r0, #23
    df5a:	e012      	b.n	df82 <tcc_init+0x3c2>
    df5c:	2017      	movs	r0, #23
    df5e:	e010      	b.n	df82 <tcc_init+0x3c2>
    df60:	2017      	movs	r0, #23
    df62:	e00e      	b.n	df82 <tcc_init+0x3c2>
    df64:	2017      	movs	r0, #23
    df66:	e00c      	b.n	df82 <tcc_init+0x3c2>
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
			return STATUS_ERR_INVALID_ARG;
    df68:	2017      	movs	r0, #23
    df6a:	e00a      	b.n	df82 <tcc_init+0x3c2>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    df6c:	2017      	movs	r0, #23
    df6e:	e008      	b.n	df82 <tcc_init+0x3c2>

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
    df70:	2017      	movs	r0, #23
    df72:	e006      	b.n	df82 <tcc_init+0x3c2>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    df74:	2017      	movs	r0, #23
    df76:	e004      	b.n	df82 <tcc_init+0x3c2>
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
    df78:	2017      	movs	r0, #23
    df7a:	e002      	b.n	df82 <tcc_init+0x3c2>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    df7c:	2000      	movs	r0, #0
    df7e:	e000      	b.n	df82 <tcc_init+0x3c2>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    df80:	2017      	movs	r0, #23
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    df82:	b00f      	add	sp, #60	; 0x3c
    df84:	bc3c      	pop	{r2, r3, r4, r5}
    df86:	4690      	mov	r8, r2
    df88:	4699      	mov	r9, r3
    df8a:	46a2      	mov	sl, r4
    df8c:	46ab      	mov	fp, r5
    df8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df90:	20000450 	.word	0x20000450
    df94:	0001400c 	.word	0x0001400c
    df98:	0000d8f5 	.word	0x0000d8f5
    df9c:	0000d869 	.word	0x0000d869
    dfa0:	0000d9ed 	.word	0x0000d9ed
    dfa4:	00020040 	.word	0x00020040
    dfa8:	00040080 	.word	0x00040080
    dfac:	00080100 	.word	0x00080100

0000dfb0 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    dfb0:	0092      	lsls	r2, r2, #2
    dfb2:	1883      	adds	r3, r0, r2
    dfb4:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    dfb6:	4b03      	ldr	r3, [pc, #12]	; (dfc4 <tcc_register_callback+0x14>)
    dfb8:	58d3      	ldr	r3, [r2, r3]
    dfba:	6b42      	ldr	r2, [r0, #52]	; 0x34
    dfbc:	4313      	orrs	r3, r2
    dfbe:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    dfc0:	2000      	movs	r0, #0
    dfc2:	4770      	bx	lr
    dfc4:	00014030 	.word	0x00014030

0000dfc8 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    dfc8:	b570      	push	{r4, r5, r6, lr}
    dfca:	0004      	movs	r4, r0
    dfcc:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    dfce:	6800      	ldr	r0, [r0, #0]
    dfd0:	4b09      	ldr	r3, [pc, #36]	; (dff8 <tcc_enable_callback+0x30>)
    dfd2:	4798      	blx	r3
{
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    dfd4:	4b09      	ldr	r3, [pc, #36]	; (dffc <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    dfd6:	5c1b      	ldrb	r3, [r3, r0]
    dfd8:	221f      	movs	r2, #31
    dfda:	401a      	ands	r2, r3
    dfdc:	2301      	movs	r3, #1
    dfde:	4093      	lsls	r3, r2
    dfe0:	4a07      	ldr	r2, [pc, #28]	; (e000 <tcc_enable_callback+0x38>)
    dfe2:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    dfe4:	00ad      	lsls	r5, r5, #2
    dfe6:	4b07      	ldr	r3, [pc, #28]	; (e004 <tcc_enable_callback+0x3c>)
    dfe8:	58ea      	ldr	r2, [r5, r3]
    dfea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    dfec:	4313      	orrs	r3, r2
    dfee:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    dff0:	6823      	ldr	r3, [r4, #0]
    dff2:	629a      	str	r2, [r3, #40]	; 0x28
}
    dff4:	bd70      	pop	{r4, r5, r6, pc}
    dff6:	46c0      	nop			; (mov r8, r8)
    dff8:	0000da45 	.word	0x0000da45
    dffc:	00014060 	.word	0x00014060
    e000:	e000e100 	.word	0xe000e100
    e004:	00014030 	.word	0x00014030

0000e008 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    e008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e00a:	464f      	mov	r7, r9
    e00c:	4646      	mov	r6, r8
    e00e:	b4c0      	push	{r6, r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    e010:	0080      	lsls	r0, r0, #2
    e012:	4b11      	ldr	r3, [pc, #68]	; (e058 <_tcc_interrupt_handler+0x50>)
    e014:	58c3      	ldr	r3, [r0, r3]
    e016:	4699      	mov	r9, r3
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    e018:	681b      	ldr	r3, [r3, #0]
    e01a:	6adf      	ldr	r7, [r3, #44]	; 0x2c
    e01c:	464b      	mov	r3, r9
    e01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e020:	401f      	ands	r7, r3
    e022:	464b      	mov	r3, r9
    e024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    e026:	401f      	ands	r7, r3
    e028:	4d0c      	ldr	r5, [pc, #48]	; (e05c <_tcc_interrupt_handler+0x54>)
    e02a:	464b      	mov	r3, r9
    e02c:	1d1c      	adds	r4, r3, #4
    e02e:	2334      	movs	r3, #52	; 0x34
    e030:	444b      	add	r3, r9
    e032:	4698      	mov	r8, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    e034:	682e      	ldr	r6, [r5, #0]
    e036:	423e      	tst	r6, r7
    e038:	d005      	beq.n	e046 <_tcc_interrupt_handler+0x3e>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    e03a:	4648      	mov	r0, r9
    e03c:	6823      	ldr	r3, [r4, #0]
    e03e:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    e040:	464b      	mov	r3, r9
    e042:	681b      	ldr	r3, [r3, #0]
    e044:	62de      	str	r6, [r3, #44]	; 0x2c
    e046:	3504      	adds	r5, #4
    e048:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    e04a:	4544      	cmp	r4, r8
    e04c:	d1f2      	bne.n	e034 <_tcc_interrupt_handler+0x2c>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    e04e:	bc0c      	pop	{r2, r3}
    e050:	4690      	mov	r8, r2
    e052:	4699      	mov	r9, r3
    e054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e056:	46c0      	nop			; (mov r8, r8)
    e058:	20000450 	.word	0x20000450
    e05c:	00014030 	.word	0x00014030

0000e060 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    e060:	b510      	push	{r4, lr}
    e062:	2000      	movs	r0, #0
    e064:	4b01      	ldr	r3, [pc, #4]	; (e06c <TCC0_Handler+0xc>)
    e066:	4798      	blx	r3
    e068:	bd10      	pop	{r4, pc}
    e06a:	46c0      	nop			; (mov r8, r8)
    e06c:	0000e009 	.word	0x0000e009

0000e070 <TCC1_Handler>:
    e070:	b510      	push	{r4, lr}
    e072:	2001      	movs	r0, #1
    e074:	4b01      	ldr	r3, [pc, #4]	; (e07c <TCC1_Handler+0xc>)
    e076:	4798      	blx	r3
    e078:	bd10      	pop	{r4, pc}
    e07a:	46c0      	nop			; (mov r8, r8)
    e07c:	0000e009 	.word	0x0000e009

0000e080 <TCC2_Handler>:
    e080:	b510      	push	{r4, lr}
    e082:	2002      	movs	r0, #2
    e084:	4b01      	ldr	r3, [pc, #4]	; (e08c <TCC2_Handler+0xc>)
    e086:	4798      	blx	r3
    e088:	bd10      	pop	{r4, pc}
    e08a:	46c0      	nop			; (mov r8, r8)
    e08c:	0000e009 	.word	0x0000e009

0000e090 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    e090:	e7fe      	b.n	e090 <Dummy_Handler>
    e092:	46c0      	nop			; (mov r8, r8)

0000e094 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    e094:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    e096:	4b2e      	ldr	r3, [pc, #184]	; (e150 <Reset_Handler+0xbc>)
    e098:	4a2e      	ldr	r2, [pc, #184]	; (e154 <Reset_Handler+0xc0>)
    e09a:	429a      	cmp	r2, r3
    e09c:	d003      	beq.n	e0a6 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    e09e:	4b2e      	ldr	r3, [pc, #184]	; (e158 <Reset_Handler+0xc4>)
    e0a0:	4a2b      	ldr	r2, [pc, #172]	; (e150 <Reset_Handler+0xbc>)
    e0a2:	429a      	cmp	r2, r3
    e0a4:	d304      	bcc.n	e0b0 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    e0a6:	4b2d      	ldr	r3, [pc, #180]	; (e15c <Reset_Handler+0xc8>)
    e0a8:	4a2d      	ldr	r2, [pc, #180]	; (e160 <Reset_Handler+0xcc>)
    e0aa:	429a      	cmp	r2, r3
    e0ac:	d310      	bcc.n	e0d0 <Reset_Handler+0x3c>
    e0ae:	e01e      	b.n	e0ee <Reset_Handler+0x5a>
    e0b0:	4a2c      	ldr	r2, [pc, #176]	; (e164 <Reset_Handler+0xd0>)
    e0b2:	4b29      	ldr	r3, [pc, #164]	; (e158 <Reset_Handler+0xc4>)
    e0b4:	3303      	adds	r3, #3
    e0b6:	1a9b      	subs	r3, r3, r2
    e0b8:	089b      	lsrs	r3, r3, #2
    e0ba:	3301      	adds	r3, #1
    e0bc:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    e0be:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    e0c0:	4823      	ldr	r0, [pc, #140]	; (e150 <Reset_Handler+0xbc>)
    e0c2:	4924      	ldr	r1, [pc, #144]	; (e154 <Reset_Handler+0xc0>)
    e0c4:	588c      	ldr	r4, [r1, r2]
    e0c6:	5084      	str	r4, [r0, r2]
    e0c8:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    e0ca:	429a      	cmp	r2, r3
    e0cc:	d1fa      	bne.n	e0c4 <Reset_Handler+0x30>
    e0ce:	e7ea      	b.n	e0a6 <Reset_Handler+0x12>
    e0d0:	4a25      	ldr	r2, [pc, #148]	; (e168 <Reset_Handler+0xd4>)
    e0d2:	4b22      	ldr	r3, [pc, #136]	; (e15c <Reset_Handler+0xc8>)
    e0d4:	3303      	adds	r3, #3
    e0d6:	1a9b      	subs	r3, r3, r2
    e0d8:	089b      	lsrs	r3, r3, #2
    e0da:	3301      	adds	r3, #1
    e0dc:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    e0de:	2200      	movs	r2, #0
                *pDest++ = 0;
    e0e0:	481f      	ldr	r0, [pc, #124]	; (e160 <Reset_Handler+0xcc>)
    e0e2:	2100      	movs	r1, #0
    e0e4:	1814      	adds	r4, r2, r0
    e0e6:	6021      	str	r1, [r4, #0]
    e0e8:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    e0ea:	429a      	cmp	r2, r3
    e0ec:	d1fa      	bne.n	e0e4 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    e0ee:	4a1f      	ldr	r2, [pc, #124]	; (e16c <Reset_Handler+0xd8>)
    e0f0:	21ff      	movs	r1, #255	; 0xff
    e0f2:	4b1f      	ldr	r3, [pc, #124]	; (e170 <Reset_Handler+0xdc>)
    e0f4:	438b      	bics	r3, r1
    e0f6:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    e0f8:	39fd      	subs	r1, #253	; 0xfd
    e0fa:	2390      	movs	r3, #144	; 0x90
    e0fc:	005b      	lsls	r3, r3, #1
    e0fe:	4a1d      	ldr	r2, [pc, #116]	; (e174 <Reset_Handler+0xe0>)
    e100:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    e102:	481d      	ldr	r0, [pc, #116]	; (e178 <Reset_Handler+0xe4>)
    e104:	78c3      	ldrb	r3, [r0, #3]
    e106:	2403      	movs	r4, #3
    e108:	43a3      	bics	r3, r4
    e10a:	2202      	movs	r2, #2
    e10c:	4313      	orrs	r3, r2
    e10e:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    e110:	78c3      	ldrb	r3, [r0, #3]
    e112:	260c      	movs	r6, #12
    e114:	43b3      	bics	r3, r6
    e116:	2108      	movs	r1, #8
    e118:	430b      	orrs	r3, r1
    e11a:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    e11c:	4b17      	ldr	r3, [pc, #92]	; (e17c <Reset_Handler+0xe8>)
    e11e:	7b98      	ldrb	r0, [r3, #14]
    e120:	2530      	movs	r5, #48	; 0x30
    e122:	43a8      	bics	r0, r5
    e124:	0005      	movs	r5, r0
    e126:	2020      	movs	r0, #32
    e128:	4328      	orrs	r0, r5
    e12a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    e12c:	7b98      	ldrb	r0, [r3, #14]
    e12e:	43b0      	bics	r0, r6
    e130:	4301      	orrs	r1, r0
    e132:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    e134:	7b99      	ldrb	r1, [r3, #14]
    e136:	43a1      	bics	r1, r4
    e138:	430a      	orrs	r2, r1
    e13a:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    e13c:	4a10      	ldr	r2, [pc, #64]	; (e180 <Reset_Handler+0xec>)
    e13e:	6851      	ldr	r1, [r2, #4]
    e140:	2380      	movs	r3, #128	; 0x80
    e142:	430b      	orrs	r3, r1
    e144:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    e146:	4b0f      	ldr	r3, [pc, #60]	; (e184 <Reset_Handler+0xf0>)
    e148:	4798      	blx	r3

        /* Branch to main function */
        main();
    e14a:	4b0f      	ldr	r3, [pc, #60]	; (e188 <Reset_Handler+0xf4>)
    e14c:	4798      	blx	r3
    e14e:	e7fe      	b.n	e14e <Reset_Handler+0xba>
    e150:	20000000 	.word	0x20000000
    e154:	00014c3c 	.word	0x00014c3c
    e158:	20000084 	.word	0x20000084
    e15c:	20000e00 	.word	0x20000e00
    e160:	20000084 	.word	0x20000084
    e164:	20000004 	.word	0x20000004
    e168:	20000088 	.word	0x20000088
    e16c:	e000ed00 	.word	0xe000ed00
    e170:	00008000 	.word	0x00008000
    e174:	41007000 	.word	0x41007000
    e178:	41005000 	.word	0x41005000
    e17c:	41004800 	.word	0x41004800
    e180:	41004000 	.word	0x41004000
    e184:	000116a5 	.word	0x000116a5
    e188:	0000fd09 	.word	0x0000fd09

0000e18c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    e18c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e18e:	4647      	mov	r7, r8
    e190:	b480      	push	{r7}
    e192:	000c      	movs	r4, r1
    e194:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    e196:	2800      	cmp	r0, #0
    e198:	d10d      	bne.n	e1b6 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    e19a:	2a00      	cmp	r2, #0
    e19c:	dd0e      	ble.n	e1bc <_read+0x30>
    e19e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    e1a0:	4e08      	ldr	r6, [pc, #32]	; (e1c4 <_read+0x38>)
    e1a2:	4d09      	ldr	r5, [pc, #36]	; (e1c8 <_read+0x3c>)
    e1a4:	6830      	ldr	r0, [r6, #0]
    e1a6:	0021      	movs	r1, r4
    e1a8:	682b      	ldr	r3, [r5, #0]
    e1aa:	4798      	blx	r3
		ptr++;
    e1ac:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    e1ae:	42a7      	cmp	r7, r4
    e1b0:	d1f8      	bne.n	e1a4 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    e1b2:	4640      	mov	r0, r8
    e1b4:	e003      	b.n	e1be <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    e1b6:	2001      	movs	r0, #1
    e1b8:	4240      	negs	r0, r0
    e1ba:	e000      	b.n	e1be <_read+0x32>
	}

	for (; len > 0; --len) {
    e1bc:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    e1be:	bc04      	pop	{r2}
    e1c0:	4690      	mov	r8, r2
    e1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1c4:	20000464 	.word	0x20000464
    e1c8:	2000045c 	.word	0x2000045c

0000e1cc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    e1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1ce:	4647      	mov	r7, r8
    e1d0:	b480      	push	{r7}
    e1d2:	000e      	movs	r6, r1
    e1d4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    e1d6:	3801      	subs	r0, #1
    e1d8:	2802      	cmp	r0, #2
    e1da:	d811      	bhi.n	e200 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    e1dc:	2a00      	cmp	r2, #0
    e1de:	d012      	beq.n	e206 <_write+0x3a>
    e1e0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    e1e2:	4b0c      	ldr	r3, [pc, #48]	; (e214 <_write+0x48>)
    e1e4:	4698      	mov	r8, r3
    e1e6:	4f0c      	ldr	r7, [pc, #48]	; (e218 <_write+0x4c>)
    e1e8:	4643      	mov	r3, r8
    e1ea:	6818      	ldr	r0, [r3, #0]
    e1ec:	5d31      	ldrb	r1, [r6, r4]
    e1ee:	683b      	ldr	r3, [r7, #0]
    e1f0:	4798      	blx	r3
    e1f2:	2800      	cmp	r0, #0
    e1f4:	db09      	blt.n	e20a <_write+0x3e>
			return -1;
		}
		++nChars;
    e1f6:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    e1f8:	42a5      	cmp	r5, r4
    e1fa:	d1f5      	bne.n	e1e8 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    e1fc:	0020      	movs	r0, r4
    e1fe:	e006      	b.n	e20e <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    e200:	2001      	movs	r0, #1
    e202:	4240      	negs	r0, r0
    e204:	e003      	b.n	e20e <_write+0x42>
	}

	for (; len != 0; --len) {
    e206:	2000      	movs	r0, #0
    e208:	e001      	b.n	e20e <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    e20a:	2001      	movs	r0, #1
    e20c:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    e20e:	bc04      	pop	{r2}
    e210:	4690      	mov	r8, r2
    e212:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e214:	20000464 	.word	0x20000464
    e218:	20000460 	.word	0x20000460

0000e21c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    e21c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    e21e:	4a06      	ldr	r2, [pc, #24]	; (e238 <_sbrk+0x1c>)
    e220:	6812      	ldr	r2, [r2, #0]
    e222:	2a00      	cmp	r2, #0
    e224:	d102      	bne.n	e22c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    e226:	4905      	ldr	r1, [pc, #20]	; (e23c <_sbrk+0x20>)
    e228:	4a03      	ldr	r2, [pc, #12]	; (e238 <_sbrk+0x1c>)
    e22a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    e22c:	4a02      	ldr	r2, [pc, #8]	; (e238 <_sbrk+0x1c>)
    e22e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    e230:	18c3      	adds	r3, r0, r3
    e232:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    e234:	4770      	bx	lr
    e236:	46c0      	nop			; (mov r8, r8)
    e238:	200000fc 	.word	0x200000fc
    e23c:	20002e00 	.word	0x20002e00

0000e240 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    e240:	2001      	movs	r0, #1
    e242:	4240      	negs	r0, r0
    e244:	4770      	bx	lr
    e246:	46c0      	nop			; (mov r8, r8)

0000e248 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    e248:	2380      	movs	r3, #128	; 0x80
    e24a:	019b      	lsls	r3, r3, #6
    e24c:	604b      	str	r3, [r1, #4]

	return 0;
}
    e24e:	2000      	movs	r0, #0
    e250:	4770      	bx	lr
    e252:	46c0      	nop			; (mov r8, r8)

0000e254 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    e254:	2001      	movs	r0, #1
    e256:	4770      	bx	lr

0000e258 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    e258:	2000      	movs	r0, #0
    e25a:	4770      	bx	lr

0000e25c <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    e25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e25e:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    e260:	2041      	movs	r0, #65	; 0x41
    e262:	5c25      	ldrb	r5, [r4, r0]
    e264:	2301      	movs	r3, #1
    e266:	432b      	orrs	r3, r5
    e268:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    e26a:	b292      	uxth	r2, r2
    e26c:	2000      	movs	r0, #0
    e26e:	5620      	ldrsb	r0, [r4, r0]
    e270:	2300      	movs	r3, #0
    e272:	4d13      	ldr	r5, [pc, #76]	; (e2c0 <_http_client_send_wait+0x64>)
    e274:	47a8      	blx	r5
    e276:	2800      	cmp	r0, #0
    e278:	db08      	blt.n	e28c <_http_client_send_wait+0x30>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    e27a:	2341      	movs	r3, #65	; 0x41
    e27c:	5ce3      	ldrb	r3, [r4, r3]
    e27e:	07db      	lsls	r3, r3, #31
    e280:	d519      	bpl.n	e2b6 <_http_client_send_wait+0x5a>
    e282:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    e284:	2000      	movs	r0, #0

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    e286:	2b02      	cmp	r3, #2
    e288:	d918      	bls.n	e2bc <_http_client_send_wait+0x60>
    e28a:	e005      	b.n	e298 <_http_client_send_wait+0x3c>
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
		module->sending = 0;
    e28c:	2241      	movs	r2, #65	; 0x41
    e28e:	5ca3      	ldrb	r3, [r4, r2]
    e290:	2101      	movs	r1, #1
    e292:	438b      	bics	r3, r1
    e294:	54a3      	strb	r3, [r4, r2]
		return result;
    e296:	e011      	b.n	e2bc <_http_client_send_wait+0x60>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
    e298:	4f0a      	ldr	r7, [pc, #40]	; (e2c4 <_http_client_send_wait+0x68>)
		sw_timer_task(module->config.timer_inst);
    e29a:	4e0b      	ldr	r6, [pc, #44]	; (e2c8 <_http_client_send_wait+0x6c>)

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    e29c:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    e29e:	2000      	movs	r0, #0
    e2a0:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    e2a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    e2a4:	47b0      	blx	r6

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    e2a6:	5d63      	ldrb	r3, [r4, r5]
    e2a8:	07db      	lsls	r3, r3, #31
    e2aa:	d506      	bpl.n	e2ba <_http_client_send_wait+0x5e>
    e2ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    e2ae:	2b02      	cmp	r3, #2
    e2b0:	d8f5      	bhi.n	e29e <_http_client_send_wait+0x42>
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    e2b2:	2000      	movs	r0, #0
    e2b4:	e002      	b.n	e2bc <_http_client_send_wait+0x60>
    e2b6:	2000      	movs	r0, #0
    e2b8:	e000      	b.n	e2bc <_http_client_send_wait+0x60>
    e2ba:	2000      	movs	r0, #0
}
    e2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e2be:	46c0      	nop			; (mov r8, r8)
    e2c0:	0000b941 	.word	0x0000b941
    e2c4:	00009bd1 	.word	0x00009bd1
    e2c8:	0000f43d 	.word	0x0000f43d

0000e2cc <http_client_get_config_defaults>:
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
	config->port = 80;
    e2cc:	2350      	movs	r3, #80	; 0x50
    e2ce:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    e2d0:	2300      	movs	r3, #0
    e2d2:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    e2d4:	4a05      	ldr	r2, [pc, #20]	; (e2ec <http_client_get_config_defaults+0x20>)
    e2d6:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    e2d8:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    e2da:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    e2dc:	3301      	adds	r3, #1
    e2de:	33ff      	adds	r3, #255	; 0xff
    e2e0:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    e2e2:	3bae      	subs	r3, #174	; 0xae
    e2e4:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    e2e6:	4b02      	ldr	r3, [pc, #8]	; (e2f0 <http_client_get_config_defaults+0x24>)
    e2e8:	6183      	str	r3, [r0, #24]
}
    e2ea:	4770      	bx	lr
    e2ec:	00004e20 	.word	0x00004e20
    e2f0:	00014124 	.word	0x00014124

0000e2f4 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
    e2f4:	b570      	push	{r4, r5, r6, lr}
    e2f6:	0004      	movs	r4, r0
    e2f8:	000d      	movs	r5, r1
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
    e2fa:	2800      	cmp	r0, #0
    e2fc:	d034      	beq.n	e368 <http_client_init+0x74>
    e2fe:	2900      	cmp	r1, #0
    e300:	d035      	beq.n	e36e <http_client_init+0x7a>
		return -EINVAL;
	}

	if (config->recv_buffer_size == 0) {
    e302:	690b      	ldr	r3, [r1, #16]
    e304:	2b00      	cmp	r3, #0
    e306:	d035      	beq.n	e374 <http_client_init+0x80>
		return -EINVAL;
	}

	if (config->timer_inst == NULL) {
    e308:	684b      	ldr	r3, [r1, #4]
    e30a:	2b00      	cmp	r3, #0
    e30c:	d035      	beq.n	e37a <http_client_init+0x86>
		return -EINVAL;
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    e30e:	694b      	ldr	r3, [r1, #20]
    e310:	2b51      	cmp	r3, #81	; 0x51
    e312:	d935      	bls.n	e380 <http_client_init+0x8c>
		return -EINVAL;
	}

	memset(module, 0, sizeof(struct http_client_module));
    e314:	22e8      	movs	r2, #232	; 0xe8
    e316:	2100      	movs	r1, #0
    e318:	4b1e      	ldr	r3, [pc, #120]	; (e394 <http_client_init+0xa0>)
    e31a:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    e31c:	0020      	movs	r0, r4
    e31e:	3050      	adds	r0, #80	; 0x50
    e320:	221c      	movs	r2, #28
    e322:	0029      	movs	r1, r5
    e324:	4b1c      	ldr	r3, [pc, #112]	; (e398 <http_client_init+0xa4>)
    e326:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
    e328:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    e32a:	2b00      	cmp	r3, #0
    e32c:	d10a      	bne.n	e344 <http_client_init+0x50>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    e32e:	6928      	ldr	r0, [r5, #16]
    e330:	4b1a      	ldr	r3, [pc, #104]	; (e39c <http_client_init+0xa8>)
    e332:	4798      	blx	r3
    e334:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    e336:	2800      	cmp	r0, #0
    e338:	d025      	beq.n	e386 <http_client_init+0x92>
			return -ENOMEM;
		}
		module->alloc_buffer = 1;
    e33a:	2241      	movs	r2, #65	; 0x41
    e33c:	5ca1      	ldrb	r1, [r4, r2]
    e33e:	2304      	movs	r3, #4
    e340:	430b      	orrs	r3, r1
    e342:	54a3      	strb	r3, [r4, r2]
	}

	if (config->timeout > 0) {
    e344:	892b      	ldrh	r3, [r5, #8]
    e346:	2b00      	cmp	r3, #0
    e348:	d008      	beq.n	e35c <http_client_init+0x68>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    e34a:	6868      	ldr	r0, [r5, #4]
    e34c:	2300      	movs	r3, #0
    e34e:	0022      	movs	r2, r4
    e350:	4913      	ldr	r1, [pc, #76]	; (e3a0 <http_client_init+0xac>)
    e352:	4d14      	ldr	r5, [pc, #80]	; (e3a4 <http_client_init+0xb0>)
    e354:	47a8      	blx	r5
    e356:	64a0      	str	r0, [r4, #72]	; 0x48

		if (module->timer_id < 0) {
    e358:	2800      	cmp	r0, #0
    e35a:	db17      	blt.n	e38c <http_client_init+0x98>
			return -ENOSPC;
		}
	}

	module->req.state = STATE_INIT;
    e35c:	2300      	movs	r3, #0
    e35e:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    e360:	22d8      	movs	r2, #216	; 0xd8
    e362:	50a3      	str	r3, [r4, r2]

	return 0;
    e364:	2000      	movs	r0, #0
    e366:	e013      	b.n	e390 <http_client_init+0x9c>

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
		return -EINVAL;
    e368:	2016      	movs	r0, #22
    e36a:	4240      	negs	r0, r0
    e36c:	e010      	b.n	e390 <http_client_init+0x9c>
    e36e:	2016      	movs	r0, #22
    e370:	4240      	negs	r0, r0
    e372:	e00d      	b.n	e390 <http_client_init+0x9c>
	}

	if (config->recv_buffer_size == 0) {
		return -EINVAL;
    e374:	2016      	movs	r0, #22
    e376:	4240      	negs	r0, r0
    e378:	e00a      	b.n	e390 <http_client_init+0x9c>
	}

	if (config->timer_inst == NULL) {
		return -EINVAL;
    e37a:	2016      	movs	r0, #22
    e37c:	4240      	negs	r0, r0
    e37e:	e007      	b.n	e390 <http_client_init+0x9c>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
		return -EINVAL;
    e380:	2016      	movs	r0, #22
    e382:	4240      	negs	r0, r0
    e384:	e004      	b.n	e390 <http_client_init+0x9c>

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
		module->config.recv_buffer = malloc(config->recv_buffer_size);
		if (module->config.recv_buffer == NULL) {
			return -ENOMEM;
    e386:	200c      	movs	r0, #12
    e388:	4240      	negs	r0, r0
    e38a:	e001      	b.n	e390 <http_client_init+0x9c>
	if (config->timeout > 0) {
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);

		if (module->timer_id < 0) {
			return -ENOSPC;
    e38c:	201c      	movs	r0, #28
    e38e:	4240      	negs	r0, r0

	module->req.state = STATE_INIT;
	module->resp.state = STATE_PARSE_HEADER;

	return 0;
}
    e390:	bd70      	pop	{r4, r5, r6, pc}
    e392:	46c0      	nop			; (mov r8, r8)
    e394:	00011755 	.word	0x00011755
    e398:	00011719 	.word	0x00011719
    e39c:	000116f1 	.word	0x000116f1
    e3a0:	0000e4b9 	.word	0x0000e4b9
    e3a4:	0000f3b9 	.word	0x0000f3b9

0000e3a8 <http_client_register_callback>:
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
	/* Checks the parameters. */
	if (module == NULL) {
    e3a8:	2800      	cmp	r0, #0
    e3aa:	d002      	beq.n	e3b2 <http_client_register_callback+0xa>
		return -EINVAL;
	}

	module->cb = callback;
    e3ac:	64c1      	str	r1, [r0, #76]	; 0x4c

	return 0;
    e3ae:	2000      	movs	r0, #0
    e3b0:	e001      	b.n	e3b6 <http_client_register_callback+0xe>

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
	/* Checks the parameters. */
	if (module == NULL) {
		return -EINVAL;
    e3b2:	2016      	movs	r0, #22
    e3b4:	4240      	negs	r0, r0
	}

	module->cb = callback;

	return 0;
}
    e3b6:	4770      	bx	lr

0000e3b8 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
    e3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3ba:	b085      	sub	sp, #20
    e3bc:	0004      	movs	r4, r0
    e3be:	000e      	movs	r6, r1
	union http_client_data data;

	if (module->req.entity.close) {
    e3c0:	23c0      	movs	r3, #192	; 0xc0
    e3c2:	58c3      	ldr	r3, [r0, r3]
    e3c4:	2b00      	cmp	r3, #0
    e3c6:	d002      	beq.n	e3ce <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    e3c8:	22c4      	movs	r2, #196	; 0xc4
    e3ca:	5880      	ldr	r0, [r0, r2]
    e3cc:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
    e3ce:	0020      	movs	r0, r4
    e3d0:	30b0      	adds	r0, #176	; 0xb0
    e3d2:	2218      	movs	r2, #24
    e3d4:	2100      	movs	r1, #0
    e3d6:	4b17      	ldr	r3, [pc, #92]	; (e434 <_http_client_clear_conn+0x7c>)
    e3d8:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    e3da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d003      	beq.n	e3e8 <_http_client_clear_conn+0x30>
		close(module->sock);
    e3e0:	2000      	movs	r0, #0
    e3e2:	5620      	ldrsb	r0, [r4, r0]
    e3e4:	4b14      	ldr	r3, [pc, #80]	; (e438 <_http_client_clear_conn+0x80>)
    e3e6:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
    e3e8:	2300      	movs	r3, #0
    e3ea:	56e3      	ldrsb	r3, [r4, r3]
    e3ec:	009b      	lsls	r3, r3, #2
    e3ee:	2500      	movs	r5, #0
    e3f0:	4a12      	ldr	r2, [pc, #72]	; (e43c <_http_client_clear_conn+0x84>)
    e3f2:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    e3f4:	0020      	movs	r0, r4
    e3f6:	306c      	adds	r0, #108	; 0x6c
    e3f8:	226c      	movs	r2, #108	; 0x6c
    e3fa:	2100      	movs	r1, #0
    e3fc:	4f0d      	ldr	r7, [pc, #52]	; (e434 <_http_client_clear_conn+0x7c>)
    e3fe:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    e400:	0020      	movs	r0, r4
    e402:	30d8      	adds	r0, #216	; 0xd8
    e404:	2210      	movs	r2, #16
    e406:	2100      	movs	r1, #0
    e408:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    e40a:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    e40c:	23d8      	movs	r3, #216	; 0xd8
    e40e:	50e5      	str	r5, [r4, r3]

	module->sending = 0;
    e410:	2241      	movs	r2, #65	; 0x41
    e412:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    e414:	2101      	movs	r1, #1
    e416:	438b      	bics	r3, r1
    e418:	3101      	adds	r1, #1
    e41a:	438b      	bics	r3, r1
    e41c:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    e41e:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    e420:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e422:	2b00      	cmp	r3, #0
    e424:	d003      	beq.n	e42e <_http_client_clear_conn+0x76>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    e426:	aa01      	add	r2, sp, #4
    e428:	3102      	adds	r1, #2
    e42a:	0020      	movs	r0, r4
    e42c:	4798      	blx	r3
	}
}
    e42e:	b005      	add	sp, #20
    e430:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e432:	46c0      	nop			; (mov r8, r8)
    e434:	00011755 	.word	0x00011755
    e438:	0000ba6d 	.word	0x0000ba6d
    e43c:	20000100 	.word	0x20000100

0000e440 <http_client_socket_resolve_handler>:
	}

}

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    e440:	b5f0      	push	{r4, r5, r6, r7, lr}
    e442:	b087      	sub	sp, #28
    e444:	9000      	str	r0, [sp, #0]
    e446:	9101      	str	r1, [sp, #4]
    e448:	4c17      	ldr	r4, [pc, #92]	; (e4a8 <http_client_socket_resolve_handler+0x68>)
    e44a:	0026      	movs	r6, r4
    e44c:	361c      	adds	r6, #28
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
		if (module_ref_inst[i] != NULL) {
			module = module_ref_inst[i];
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    e44e:	4f17      	ldr	r7, [pc, #92]	; (e4ac <http_client_socket_resolve_handler+0x6c>)
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
		if (module_ref_inst[i] != NULL) {
    e450:	6825      	ldr	r5, [r4, #0]
    e452:	2d00      	cmp	r5, #0
    e454:	d023      	beq.n	e49e <http_client_socket_resolve_handler+0x5e>
			module = module_ref_inst[i];
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    e456:	1c69      	adds	r1, r5, #1
    e458:	9800      	ldr	r0, [sp, #0]
    e45a:	47b8      	blx	r7
    e45c:	2800      	cmp	r0, #0
    e45e:	d11e      	bne.n	e49e <http_client_socket_resolve_handler+0x5e>
    e460:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    e462:	2b01      	cmp	r3, #1
    e464:	d11b      	bne.n	e49e <http_client_socket_resolve_handler+0x5e>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    e466:	9b01      	ldr	r3, [sp, #4]
    e468:	2b00      	cmp	r3, #0
    e46a:	d105      	bne.n	e478 <http_client_socket_resolve_handler+0x38>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    e46c:	2176      	movs	r1, #118	; 0x76
    e46e:	4249      	negs	r1, r1
    e470:	0028      	movs	r0, r5
    e472:	4b0f      	ldr	r3, [pc, #60]	; (e4b0 <http_client_socket_resolve_handler+0x70>)
    e474:	4798      	blx	r3
					return;
    e476:	e015      	b.n	e4a4 <http_client_socket_resolve_handler+0x64>
				}
				addr_in.sin_family = AF_INET;
    e478:	2302      	movs	r3, #2
    e47a:	aa02      	add	r2, sp, #8
    e47c:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    e47e:	334e      	adds	r3, #78	; 0x4e
    e480:	5aeb      	ldrh	r3, [r5, r3]
    e482:	021a      	lsls	r2, r3, #8
    e484:	0a1b      	lsrs	r3, r3, #8
    e486:	4313      	orrs	r3, r2
    e488:	aa02      	add	r2, sp, #8
    e48a:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    e48c:	9b01      	ldr	r3, [sp, #4]
    e48e:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    e490:	2000      	movs	r0, #0
    e492:	5628      	ldrsb	r0, [r5, r0]
    e494:	2210      	movs	r2, #16
    e496:	a902      	add	r1, sp, #8
    e498:	4b06      	ldr	r3, [pc, #24]	; (e4b4 <http_client_socket_resolve_handler+0x74>)
    e49a:	4798      	blx	r3
				return;
    e49c:	e002      	b.n	e4a4 <http_client_socket_resolve_handler+0x64>
    e49e:	3404      	adds	r4, #4
{
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
    e4a0:	42b4      	cmp	r4, r6
    e4a2:	d1d5      	bne.n	e450 <http_client_socket_resolve_handler+0x10>
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
				return;
			}
		}
	}
}
    e4a4:	b007      	add	sp, #28
    e4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e4a8:	20000100 	.word	0x20000100
    e4ac:	00011bad 	.word	0x00011bad
    e4b0:	0000e3b9 	.word	0x0000e3b9
    e4b4:	0000b8b1 	.word	0x0000b8b1

0000e4b8 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
    e4b8:	b510      	push	{r4, lr}
	struct http_client_module *module_inst = (struct http_client_module *)context;

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
    e4ba:	2a00      	cmp	r2, #0
    e4bc:	d004      	beq.n	e4c8 <http_client_timer_callback+0x10>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
    e4be:	213e      	movs	r1, #62	; 0x3e
    e4c0:	4249      	negs	r1, r1
    e4c2:	0010      	movs	r0, r2
    e4c4:	4b01      	ldr	r3, [pc, #4]	; (e4cc <http_client_timer_callback+0x14>)
    e4c6:	4798      	blx	r3
}
    e4c8:	bd10      	pop	{r4, pc}
    e4ca:	46c0      	nop			; (mov r8, r8)
    e4cc:	0000e3b9 	.word	0x0000e3b9

0000e4d0 <_http_client_request>:

	return 0;
}

void _http_client_request(struct http_client_module *const module)
{
    e4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4d2:	465f      	mov	r7, fp
    e4d4:	4656      	mov	r6, sl
    e4d6:	b4c0      	push	{r6, r7}
    e4d8:	b095      	sub	sp, #84	; 0x54
    e4da:	af02      	add	r7, sp, #8
    e4dc:	0004      	movs	r4, r0
    e4de:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    e4e0:	2210      	movs	r2, #16
    e4e2:	49dd      	ldr	r1, [pc, #884]	; (e858 <_http_client_request+0x388>)
    e4e4:	2310      	movs	r3, #16
    e4e6:	2008      	movs	r0, #8
    e4e8:	1838      	adds	r0, r7, r0
    e4ea:	18c0      	adds	r0, r0, r3
    e4ec:	4bdb      	ldr	r3, [pc, #876]	; (e85c <_http_client_request+0x38c>)
    e4ee:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    e4f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e4f2:	1dd3      	adds	r3, r2, #7
    e4f4:	08db      	lsrs	r3, r3, #3
    e4f6:	00db      	lsls	r3, r3, #3
    e4f8:	4669      	mov	r1, sp
    e4fa:	1acb      	subs	r3, r1, r3
    e4fc:	469d      	mov	sp, r3
    e4fe:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    e500:	2c00      	cmp	r4, #0
    e502:	d100      	bne.n	e506 <_http_client_request+0x36>
    e504:	e235      	b.n	e972 <_http_client_request+0x4a2>
		return;
	}

	if (module->sending != 0) {
    e506:	2341      	movs	r3, #65	; 0x41
    e508:	5ce3      	ldrb	r3, [r4, r3]
    e50a:	07db      	lsls	r3, r3, #31
    e50c:	d500      	bpl.n	e510 <_http_client_request+0x40>
    e50e:	e230      	b.n	e972 <_http_client_request+0x4a2>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    e510:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    e512:	2b03      	cmp	r3, #3
    e514:	d003      	beq.n	e51e <_http_client_request+0x4e>
    e516:	2b04      	cmp	r3, #4
    e518:	d100      	bne.n	e51c <_http_client_request+0x4c>
    e51a:	e11a      	b.n	e752 <_http_client_request+0x282>
    e51c:	e227      	b.n	e96e <_http_client_request+0x49e>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    e51e:	2300      	movs	r3, #0
    e520:	21cc      	movs	r1, #204	; 0xcc
    e522:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    e524:	3104      	adds	r1, #4
    e526:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    e528:	9400      	str	r4, [sp, #0]
    e52a:	4bcd      	ldr	r3, [pc, #820]	; (e860 <_http_client_request+0x390>)
    e52c:	0031      	movs	r1, r6
    e52e:	202c      	movs	r0, #44	; 0x2c
    e530:	2508      	movs	r5, #8
    e532:	46ac      	mov	ip, r5
    e534:	44bc      	add	ip, r7
    e536:	4460      	add	r0, ip
    e538:	4dca      	ldr	r5, [pc, #808]	; (e864 <_http_client_request+0x394>)
    e53a:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    e53c:	23c8      	movs	r3, #200	; 0xc8
    e53e:	5ce3      	ldrb	r3, [r4, r3]
    e540:	2b01      	cmp	r3, #1
    e542:	d108      	bne.n	e556 <_http_client_request+0x86>
			stream_writer_send_buffer(&writer, "GET ", 4);
    e544:	2204      	movs	r2, #4
    e546:	49c8      	ldr	r1, [pc, #800]	; (e868 <_http_client_request+0x398>)
    e548:	332b      	adds	r3, #43	; 0x2b
    e54a:	2008      	movs	r0, #8
    e54c:	1838      	adds	r0, r7, r0
    e54e:	18c0      	adds	r0, r0, r3
    e550:	4bc6      	ldr	r3, [pc, #792]	; (e86c <_http_client_request+0x39c>)
    e552:	4798      	blx	r3
    e554:	e035      	b.n	e5c2 <_http_client_request+0xf2>
		} else if (module->req.method == HTTP_METHOD_POST) {
    e556:	2b02      	cmp	r3, #2
    e558:	d108      	bne.n	e56c <_http_client_request+0x9c>
			stream_writer_send_buffer(&writer, "POST ", 5);
    e55a:	2205      	movs	r2, #5
    e55c:	49c4      	ldr	r1, [pc, #784]	; (e870 <_http_client_request+0x3a0>)
    e55e:	332a      	adds	r3, #42	; 0x2a
    e560:	2008      	movs	r0, #8
    e562:	1838      	adds	r0, r7, r0
    e564:	18c0      	adds	r0, r0, r3
    e566:	4bc1      	ldr	r3, [pc, #772]	; (e86c <_http_client_request+0x39c>)
    e568:	4798      	blx	r3
    e56a:	e02a      	b.n	e5c2 <_http_client_request+0xf2>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    e56c:	2b03      	cmp	r3, #3
    e56e:	d108      	bne.n	e582 <_http_client_request+0xb2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    e570:	2207      	movs	r2, #7
    e572:	49c0      	ldr	r1, [pc, #768]	; (e874 <_http_client_request+0x3a4>)
    e574:	3329      	adds	r3, #41	; 0x29
    e576:	2008      	movs	r0, #8
    e578:	1838      	adds	r0, r7, r0
    e57a:	18c0      	adds	r0, r0, r3
    e57c:	4bbb      	ldr	r3, [pc, #748]	; (e86c <_http_client_request+0x39c>)
    e57e:	4798      	blx	r3
    e580:	e01f      	b.n	e5c2 <_http_client_request+0xf2>
		} else if (module->req.method == HTTP_METHOD_PUT) {
    e582:	2b04      	cmp	r3, #4
    e584:	d108      	bne.n	e598 <_http_client_request+0xc8>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    e586:	2204      	movs	r2, #4
    e588:	49bb      	ldr	r1, [pc, #748]	; (e878 <_http_client_request+0x3a8>)
    e58a:	3328      	adds	r3, #40	; 0x28
    e58c:	2008      	movs	r0, #8
    e58e:	1838      	adds	r0, r7, r0
    e590:	18c0      	adds	r0, r0, r3
    e592:	4bb6      	ldr	r3, [pc, #728]	; (e86c <_http_client_request+0x39c>)
    e594:	4798      	blx	r3
    e596:	e014      	b.n	e5c2 <_http_client_request+0xf2>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    e598:	2b05      	cmp	r3, #5
    e59a:	d108      	bne.n	e5ae <_http_client_request+0xde>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    e59c:	2208      	movs	r2, #8
    e59e:	49b7      	ldr	r1, [pc, #732]	; (e87c <_http_client_request+0x3ac>)
    e5a0:	3327      	adds	r3, #39	; 0x27
    e5a2:	2008      	movs	r0, #8
    e5a4:	1838      	adds	r0, r7, r0
    e5a6:	18c0      	adds	r0, r0, r3
    e5a8:	4bb0      	ldr	r3, [pc, #704]	; (e86c <_http_client_request+0x39c>)
    e5aa:	4798      	blx	r3
    e5ac:	e009      	b.n	e5c2 <_http_client_request+0xf2>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    e5ae:	2b06      	cmp	r3, #6
    e5b0:	d107      	bne.n	e5c2 <_http_client_request+0xf2>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    e5b2:	2205      	movs	r2, #5
    e5b4:	49b2      	ldr	r1, [pc, #712]	; (e880 <_http_client_request+0x3b0>)
    e5b6:	3326      	adds	r3, #38	; 0x26
    e5b8:	2008      	movs	r0, #8
    e5ba:	1838      	adds	r0, r7, r0
    e5bc:	18c0      	adds	r0, r0, r3
    e5be:	4bab      	ldr	r3, [pc, #684]	; (e86c <_http_client_request+0x39c>)
    e5c0:	4798      	blx	r3
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    e5c2:	0025      	movs	r5, r4
    e5c4:	3570      	adds	r5, #112	; 0x70
    e5c6:	0028      	movs	r0, r5
    e5c8:	4bae      	ldr	r3, [pc, #696]	; (e884 <_http_client_request+0x3b4>)
    e5ca:	469a      	mov	sl, r3
    e5cc:	4798      	blx	r3
    e5ce:	0002      	movs	r2, r0
    e5d0:	0029      	movs	r1, r5
    e5d2:	232c      	movs	r3, #44	; 0x2c
    e5d4:	2008      	movs	r0, #8
    e5d6:	1838      	adds	r0, r7, r0
    e5d8:	18c0      	adds	r0, r0, r3
    e5da:	4da4      	ldr	r5, [pc, #656]	; (e86c <_http_client_request+0x39c>)
    e5dc:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    e5de:	220b      	movs	r2, #11
    e5e0:	49a9      	ldr	r1, [pc, #676]	; (e888 <_http_client_request+0x3b8>)
    e5e2:	232c      	movs	r3, #44	; 0x2c
    e5e4:	2008      	movs	r0, #8
    e5e6:	1838      	adds	r0, r7, r0
    e5e8:	18c0      	adds	r0, r0, r3
    e5ea:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    e5ec:	220c      	movs	r2, #12
    e5ee:	49a7      	ldr	r1, [pc, #668]	; (e88c <_http_client_request+0x3bc>)
    e5f0:	232c      	movs	r3, #44	; 0x2c
    e5f2:	2008      	movs	r0, #8
    e5f4:	1838      	adds	r0, r7, r0
    e5f6:	18c0      	adds	r0, r0, r3
    e5f8:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    e5fa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    e5fc:	607b      	str	r3, [r7, #4]
    e5fe:	0018      	movs	r0, r3
    e600:	47d0      	blx	sl
    e602:	0002      	movs	r2, r0
    e604:	6879      	ldr	r1, [r7, #4]
    e606:	232c      	movs	r3, #44	; 0x2c
    e608:	2008      	movs	r0, #8
    e60a:	1838      	adds	r0, r7, r0
    e60c:	18c0      	adds	r0, r0, r3
    e60e:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    e610:	2202      	movs	r2, #2
    e612:	499f      	ldr	r1, [pc, #636]	; (e890 <_http_client_request+0x3c0>)
    e614:	232c      	movs	r3, #44	; 0x2c
    e616:	2008      	movs	r0, #8
    e618:	1838      	adds	r0, r7, r0
    e61a:	18c0      	adds	r0, r0, r3
    e61c:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    e61e:	2206      	movs	r2, #6
    e620:	499c      	ldr	r1, [pc, #624]	; (e894 <_http_client_request+0x3c4>)
    e622:	232c      	movs	r3, #44	; 0x2c
    e624:	2008      	movs	r0, #8
    e626:	1838      	adds	r0, r7, r0
    e628:	18c0      	adds	r0, r0, r3
    e62a:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    e62c:	1c63      	adds	r3, r4, #1
    e62e:	607b      	str	r3, [r7, #4]
    e630:	0018      	movs	r0, r3
    e632:	47d0      	blx	sl
    e634:	0002      	movs	r2, r0
    e636:	6879      	ldr	r1, [r7, #4]
    e638:	232c      	movs	r3, #44	; 0x2c
    e63a:	2008      	movs	r0, #8
    e63c:	1838      	adds	r0, r7, r0
    e63e:	18c0      	adds	r0, r0, r3
    e640:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    e642:	2202      	movs	r2, #2
    e644:	4992      	ldr	r1, [pc, #584]	; (e890 <_http_client_request+0x3c0>)
    e646:	232c      	movs	r3, #44	; 0x2c
    e648:	2008      	movs	r0, #8
    e64a:	1838      	adds	r0, r7, r0
    e64c:	18c0      	adds	r0, r0, r3
    e64e:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    e650:	2218      	movs	r2, #24
    e652:	4991      	ldr	r1, [pc, #580]	; (e898 <_http_client_request+0x3c8>)
    e654:	232c      	movs	r3, #44	; 0x2c
    e656:	2008      	movs	r0, #8
    e658:	1838      	adds	r0, r7, r0
    e65a:	18c0      	adds	r0, r0, r3
    e65c:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    e65e:	2213      	movs	r2, #19
    e660:	498e      	ldr	r1, [pc, #568]	; (e89c <_http_client_request+0x3cc>)
    e662:	232c      	movs	r3, #44	; 0x2c
    e664:	2008      	movs	r0, #8
    e666:	1838      	adds	r0, r7, r0
    e668:	18c0      	adds	r0, r0, r3
    e66a:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    e66c:	2217      	movs	r2, #23
    e66e:	498c      	ldr	r1, [pc, #560]	; (e8a0 <_http_client_request+0x3d0>)
    e670:	232c      	movs	r3, #44	; 0x2c
    e672:	2008      	movs	r0, #8
    e674:	1838      	adds	r0, r7, r0
    e676:	18c0      	adds	r0, r0, r3
    e678:	47a8      	blx	r5

		if (entity->read != NULL) {
    e67a:	0023      	movs	r3, r4
    e67c:	33b0      	adds	r3, #176	; 0xb0
    e67e:	68db      	ldr	r3, [r3, #12]
    e680:	2b00      	cmp	r3, #0
    e682:	d047      	beq.n	e714 <_http_client_request+0x244>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    e684:	23b0      	movs	r3, #176	; 0xb0
    e686:	5ce3      	ldrb	r3, [r4, r3]
    e688:	2b00      	cmp	r3, #0
    e68a:	d00c      	beq.n	e6a6 <_http_client_request+0x1d6>
				/* Chunked mode. */
				module->req.content_length = -1;
    e68c:	2201      	movs	r2, #1
    e68e:	4252      	negs	r2, r2
    e690:	23cc      	movs	r3, #204	; 0xcc
    e692:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    e694:	321d      	adds	r2, #29
    e696:	4983      	ldr	r1, [pc, #524]	; (e8a4 <_http_client_request+0x3d4>)
    e698:	3ba0      	subs	r3, #160	; 0xa0
    e69a:	2008      	movs	r0, #8
    e69c:	1838      	adds	r0, r7, r0
    e69e:	18c0      	adds	r0, r0, r3
    e6a0:	4b72      	ldr	r3, [pc, #456]	; (e86c <_http_client_request+0x39c>)
    e6a2:	4798      	blx	r3
    e6a4:	e036      	b.n	e714 <_http_client_request+0x244>
			} else if(entity->get_contents_length) {
    e6a6:	0023      	movs	r3, r4
    e6a8:	33b0      	adds	r3, #176	; 0xb0
    e6aa:	689b      	ldr	r3, [r3, #8]
    e6ac:	2b00      	cmp	r3, #0
    e6ae:	d031      	beq.n	e714 <_http_client_request+0x244>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    e6b0:	0022      	movs	r2, r4
    e6b2:	32b0      	adds	r2, #176	; 0xb0
    e6b4:	6950      	ldr	r0, [r2, #20]
    e6b6:	4798      	blx	r3
    e6b8:	23cc      	movs	r3, #204	; 0xcc
    e6ba:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    e6bc:	2800      	cmp	r0, #0
    e6be:	da02      	bge.n	e6c6 <_http_client_request+0x1f6>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
    e6c0:	2200      	movs	r2, #0
    e6c2:	50e2      	str	r2, [r4, r3]
    e6c4:	e026      	b.n	e714 <_http_client_request+0x244>
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    e6c6:	0002      	movs	r2, r0
    e6c8:	4977      	ldr	r1, [pc, #476]	; (e8a8 <_http_client_request+0x3d8>)
    e6ca:	2320      	movs	r3, #32
    e6cc:	2008      	movs	r0, #8
    e6ce:	1838      	adds	r0, r7, r0
    e6d0:	18c0      	adds	r0, r0, r3
    e6d2:	4b76      	ldr	r3, [pc, #472]	; (e8ac <_http_client_request+0x3dc>)
    e6d4:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    e6d6:	2210      	movs	r2, #16
    e6d8:	4975      	ldr	r1, [pc, #468]	; (e8b0 <_http_client_request+0x3e0>)
    e6da:	232c      	movs	r3, #44	; 0x2c
    e6dc:	2008      	movs	r0, #8
    e6de:	1838      	adds	r0, r7, r0
    e6e0:	18c0      	adds	r0, r0, r3
    e6e2:	4d62      	ldr	r5, [pc, #392]	; (e86c <_http_client_request+0x39c>)
    e6e4:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    e6e6:	2320      	movs	r3, #32
    e6e8:	2208      	movs	r2, #8
    e6ea:	18ba      	adds	r2, r7, r2
    e6ec:	18d0      	adds	r0, r2, r3
    e6ee:	4b65      	ldr	r3, [pc, #404]	; (e884 <_http_client_request+0x3b4>)
    e6f0:	4798      	blx	r3
    e6f2:	0002      	movs	r2, r0
    e6f4:	2320      	movs	r3, #32
    e6f6:	2108      	movs	r1, #8
    e6f8:	1879      	adds	r1, r7, r1
    e6fa:	18c9      	adds	r1, r1, r3
    e6fc:	330c      	adds	r3, #12
    e6fe:	2008      	movs	r0, #8
    e700:	1838      	adds	r0, r7, r0
    e702:	18c0      	adds	r0, r0, r3
    e704:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    e706:	2202      	movs	r2, #2
    e708:	4961      	ldr	r1, [pc, #388]	; (e890 <_http_client_request+0x3c0>)
    e70a:	232c      	movs	r3, #44	; 0x2c
    e70c:	2008      	movs	r0, #8
    e70e:	1838      	adds	r0, r7, r0
    e710:	18c0      	adds	r0, r0, r3
    e712:	47a8      	blx	r5
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    e714:	23d4      	movs	r3, #212	; 0xd4
    e716:	58e5      	ldr	r5, [r4, r3]
    e718:	2d00      	cmp	r5, #0
    e71a:	d00a      	beq.n	e732 <_http_client_request+0x262>
			stream_writer_send_buffer(&writer,
    e71c:	0028      	movs	r0, r5
    e71e:	4b59      	ldr	r3, [pc, #356]	; (e884 <_http_client_request+0x3b4>)
    e720:	4798      	blx	r3
    e722:	0002      	movs	r2, r0
    e724:	0029      	movs	r1, r5
    e726:	232c      	movs	r3, #44	; 0x2c
    e728:	2008      	movs	r0, #8
    e72a:	1838      	adds	r0, r7, r0
    e72c:	18c0      	adds	r0, r0, r3
    e72e:	4b4f      	ldr	r3, [pc, #316]	; (e86c <_http_client_request+0x39c>)
    e730:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    e732:	2202      	movs	r2, #2
    e734:	4956      	ldr	r1, [pc, #344]	; (e890 <_http_client_request+0x3c0>)
    e736:	232c      	movs	r3, #44	; 0x2c
    e738:	2008      	movs	r0, #8
    e73a:	1838      	adds	r0, r7, r0
    e73c:	18c0      	adds	r0, r0, r3
    e73e:	4b4b      	ldr	r3, [pc, #300]	; (e86c <_http_client_request+0x39c>)
    e740:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    e742:	232c      	movs	r3, #44	; 0x2c
    e744:	2208      	movs	r2, #8
    e746:	18ba      	adds	r2, r7, r2
    e748:	18d0      	adds	r0, r2, r3
    e74a:	4b5a      	ldr	r3, [pc, #360]	; (e8b4 <_http_client_request+0x3e4>)
    e74c:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    e74e:	2304      	movs	r3, #4
    e750:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    e752:	23cc      	movs	r3, #204	; 0xcc
    e754:	58e2      	ldr	r2, [r4, r3]
    e756:	2a00      	cmp	r2, #0
    e758:	db00      	blt.n	e75c <_http_client_request+0x28c>
    e75a:	e0b1      	b.n	e8c0 <_http_client_request+0x3f0>
    e75c:	0023      	movs	r3, r4
    e75e:	33b0      	adds	r3, #176	; 0xb0
    e760:	68dd      	ldr	r5, [r3, #12]
    e762:	2d00      	cmp	r5, #0
    e764:	d100      	bne.n	e768 <_http_client_request+0x298>
    e766:	e0f8      	b.n	e95a <_http_client_request+0x48a>
			/* Send chunked packet. */
			/*  Chunked header (size + \r\n) tail (\r\n) */
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    e768:	23d0      	movs	r3, #208	; 0xd0
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
			/* Send chunked packet. */
			/*  Chunked header (size + \r\n) tail (\r\n) */
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    e76a:	58e3      	ldr	r3, [r4, r3]
    e76c:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e76e:	3a07      	subs	r2, #7
    e770:	1d71      	adds	r1, r6, #5
    e772:	0020      	movs	r0, r4
    e774:	30b0      	adds	r0, #176	; 0xb0
    e776:	6940      	ldr	r0, [r0, #20]
    e778:	47a8      	blx	r5
    e77a:	0005      	movs	r5, r0
    e77c:	43c3      	mvns	r3, r0
    e77e:	17db      	asrs	r3, r3, #31
    e780:	401d      	ands	r5, r3
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
			if (size < 0) {
				/* If occurs problem during the operation, Close this socket. */
				size = 0;
			}
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    e782:	220a      	movs	r2, #10
    e784:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    e786:	210d      	movs	r1, #13
    e788:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    e78a:	1973      	adds	r3, r6, r5
    e78c:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    e78e:	719a      	strb	r2, [r3, #6]
			if (size >= 0) {
				ptr = buffer + 2;
				*ptr = CH_LUT[size % 16];
    e790:	17eb      	asrs	r3, r5, #31
    e792:	0f19      	lsrs	r1, r3, #28
    e794:	186a      	adds	r2, r5, r1
    e796:	230f      	movs	r3, #15
    e798:	4013      	ands	r3, r2
    e79a:	1a5b      	subs	r3, r3, r1
    e79c:	2210      	movs	r2, #16
    e79e:	2108      	movs	r1, #8
    e7a0:	468c      	mov	ip, r1
    e7a2:	44bc      	add	ip, r7
    e7a4:	4462      	add	r2, ip
    e7a6:	5cd3      	ldrb	r3, [r2, r3]
    e7a8:	70b3      	strb	r3, [r6, #2]
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
			if (size >= 0) {
				ptr = buffer + 2;
    e7aa:	1cb1      	adds	r1, r6, #2
				*ptr = CH_LUT[size % 16];
			}
			if (size >= 0x10) {
    e7ac:	2d0f      	cmp	r5, #15
    e7ae:	dd11      	ble.n	e7d4 <_http_client_request+0x304>
				ptr = buffer + 1;
    e7b0:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    e7b2:	17eb      	asrs	r3, r5, #31
    e7b4:	200f      	movs	r0, #15
    e7b6:	4003      	ands	r3, r0
    e7b8:	195b      	adds	r3, r3, r5
    e7ba:	111a      	asrs	r2, r3, #4
    e7bc:	17db      	asrs	r3, r3, #31
    e7be:	0f1b      	lsrs	r3, r3, #28
    e7c0:	18d2      	adds	r2, r2, r3
    e7c2:	4002      	ands	r2, r0
    e7c4:	1ad3      	subs	r3, r2, r3
    e7c6:	2210      	movs	r2, #16
    e7c8:	3807      	subs	r0, #7
    e7ca:	4684      	mov	ip, r0
    e7cc:	44bc      	add	ip, r7
    e7ce:	4462      	add	r2, ip
    e7d0:	5cd3      	ldrb	r3, [r2, r3]
    e7d2:	7073      	strb	r3, [r6, #1]
			}
			if (size >= 0x100) {
    e7d4:	2dff      	cmp	r5, #255	; 0xff
    e7d6:	dd12      	ble.n	e7fe <_http_client_request+0x32e>
				ptr = buffer;
				*ptr = CH_LUT[(size / 0x100) % 16];
    e7d8:	17eb      	asrs	r3, r5, #31
    e7da:	22ff      	movs	r2, #255	; 0xff
    e7dc:	4013      	ands	r3, r2
    e7de:	195b      	adds	r3, r3, r5
    e7e0:	121a      	asrs	r2, r3, #8
    e7e2:	17db      	asrs	r3, r3, #31
    e7e4:	0f1b      	lsrs	r3, r3, #28
    e7e6:	18d2      	adds	r2, r2, r3
    e7e8:	210f      	movs	r1, #15
    e7ea:	400a      	ands	r2, r1
    e7ec:	1ad3      	subs	r3, r2, r3
    e7ee:	2210      	movs	r2, #16
    e7f0:	3907      	subs	r1, #7
    e7f2:	468c      	mov	ip, r1
    e7f4:	44bc      	add	ip, r7
    e7f6:	4462      	add	r2, ip
    e7f8:	5cd3      	ldrb	r3, [r2, r3]
    e7fa:	7033      	strb	r3, [r6, #0]
			if (size >= 0x10) {
				ptr = buffer + 1;
				*ptr = CH_LUT[(size / 0x10) % 16];
			}
			if (size >= 0x100) {
				ptr = buffer;
    e7fc:	0031      	movs	r1, r6
				*ptr = CH_LUT[(size / 0x100) % 16];
			}		
			//module->sending = 1;
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    e7fe:	1cca      	adds	r2, r1, #3
    e800:	1b92      	subs	r2, r2, r6
    e802:	1d2b      	adds	r3, r5, #4
    e804:	18d2      	adds	r2, r2, r3
    e806:	b292      	uxth	r2, r2
    e808:	2000      	movs	r0, #0
    e80a:	5620      	ldrsb	r0, [r4, r0]
    e80c:	2300      	movs	r3, #0
    e80e:	4e2a      	ldr	r6, [pc, #168]	; (e8b8 <_http_client_request+0x3e8>)
    e810:	47b0      	blx	r6
    e812:	2800      	cmp	r0, #0
    e814:	da05      	bge.n	e822 <_http_client_request+0x352>
				_http_client_clear_conn(module, -EIO);
    e816:	2105      	movs	r1, #5
    e818:	4249      	negs	r1, r1
    e81a:	0020      	movs	r0, r4
    e81c:	4b27      	ldr	r3, [pc, #156]	; (e8bc <_http_client_request+0x3ec>)
    e81e:	4798      	blx	r3
				return;
    e820:	e0a7      	b.n	e972 <_http_client_request+0x4a2>
			}

			module->req.sent_length += size;
    e822:	22d0      	movs	r2, #208	; 0xd0
    e824:	58a3      	ldr	r3, [r4, r2]
    e826:	195b      	adds	r3, r3, r5
    e828:	50a3      	str	r3, [r4, r2]

			if(size == 0) {
    e82a:	2d00      	cmp	r5, #0
    e82c:	d000      	beq.n	e830 <_http_client_request+0x360>
    e82e:	e09e      	b.n	e96e <_http_client_request+0x49e>
				if (module->req.entity.close) {
    e830:	23c0      	movs	r3, #192	; 0xc0
    e832:	58e3      	ldr	r3, [r4, r3]
    e834:	2b00      	cmp	r3, #0
    e836:	d002      	beq.n	e83e <_http_client_request+0x36e>
					module->req.entity.close(module->req.entity.priv_data);
    e838:	3a0c      	subs	r2, #12
    e83a:	58a0      	ldr	r0, [r4, r2]
    e83c:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    e83e:	2302      	movs	r3, #2
    e840:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    e842:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e844:	2b00      	cmp	r3, #0
    e846:	d100      	bne.n	e84a <_http_client_request+0x37a>
    e848:	e091      	b.n	e96e <_http_client_request+0x49e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    e84a:	220c      	movs	r2, #12
    e84c:	18ba      	adds	r2, r7, r2
    e84e:	2101      	movs	r1, #1
    e850:	0020      	movs	r0, r4
    e852:	4798      	blx	r3
    e854:	e08b      	b.n	e96e <_http_client_request+0x49e>
    e856:	46c0      	nop			; (mov r8, r8)
    e858:	00014114 	.word	0x00014114
    e85c:	00011719 	.word	0x00011719
    e860:	0000e25d 	.word	0x0000e25d
    e864:	0000f255 	.word	0x0000f255
    e868:	00014130 	.word	0x00014130
    e86c:	0000f2b9 	.word	0x0000f2b9
    e870:	00014138 	.word	0x00014138
    e874:	00014140 	.word	0x00014140
    e878:	00014148 	.word	0x00014148
    e87c:	00014150 	.word	0x00014150
    e880:	0001415c 	.word	0x0001415c
    e884:	00011c0b 	.word	0x00011c0b
    e888:	00014164 	.word	0x00014164
    e88c:	00014170 	.word	0x00014170
    e890:	0001494c 	.word	0x0001494c
    e894:	00014180 	.word	0x00014180
    e898:	00014188 	.word	0x00014188
    e89c:	000141a4 	.word	0x000141a4
    e8a0:	000141b8 	.word	0x000141b8
    e8a4:	000141d0 	.word	0x000141d0
    e8a8:	000141f0 	.word	0x000141f0
    e8ac:	00011b69 	.word	0x00011b69
    e8b0:	000141f4 	.word	0x000141f4
    e8b4:	0000f265 	.word	0x0000f265
    e8b8:	0000b941 	.word	0x0000b941
    e8bc:	0000e3b9 	.word	0x0000e3b9
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    e8c0:	2a00      	cmp	r2, #0
    e8c2:	dd4a      	ble.n	e95a <_http_client_request+0x48a>
    e8c4:	0023      	movs	r3, r4
    e8c6:	33b0      	adds	r3, #176	; 0xb0
    e8c8:	68dd      	ldr	r5, [r3, #12]
    e8ca:	2d00      	cmp	r5, #0
    e8cc:	d045      	beq.n	e95a <_http_client_request+0x48a>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    e8ce:	23d0      	movs	r3, #208	; 0xd0
    e8d0:	58e3      	ldr	r3, [r4, r3]
    e8d2:	429a      	cmp	r2, r3
    e8d4:	dc11      	bgt.n	e8fa <_http_client_request+0x42a>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    e8d6:	23c0      	movs	r3, #192	; 0xc0
    e8d8:	58e3      	ldr	r3, [r4, r3]
    e8da:	2b00      	cmp	r3, #0
    e8dc:	d002      	beq.n	e8e4 <_http_client_request+0x414>
					module->req.entity.close(module->req.entity.priv_data);
    e8de:	22c4      	movs	r2, #196	; 0xc4
    e8e0:	58a0      	ldr	r0, [r4, r2]
    e8e2:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    e8e4:	2302      	movs	r3, #2
    e8e6:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    e8e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e8ea:	2b00      	cmp	r3, #0
    e8ec:	d03f      	beq.n	e96e <_http_client_request+0x49e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    e8ee:	220c      	movs	r2, #12
    e8f0:	18ba      	adds	r2, r7, r2
    e8f2:	2101      	movs	r1, #1
    e8f4:	0020      	movs	r0, r4
    e8f6:	4798      	blx	r3
    e8f8:	e039      	b.n	e96e <_http_client_request+0x49e>
				}
				break;
			}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    e8fa:	0022      	movs	r2, r4
    e8fc:	32b0      	adds	r2, #176	; 0xb0
    e8fe:	6950      	ldr	r0, [r2, #20]
    e900:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e902:	0031      	movs	r1, r6
    e904:	47a8      	blx	r5

			if (size < 0) {
    e906:	2800      	cmp	r0, #0
    e908:	da09      	bge.n	e91e <_http_client_request+0x44e>
				/* Entity occurs errors or EOS. */
				/* Disconnect it. */
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    e90a:	d002      	beq.n	e912 <_http_client_request+0x442>
    e90c:	2105      	movs	r1, #5
    e90e:	4249      	negs	r1, r1
    e910:	e001      	b.n	e916 <_http_client_request+0x446>
    e912:	214d      	movs	r1, #77	; 0x4d
    e914:	4249      	negs	r1, r1
    e916:	0020      	movs	r0, r4
    e918:	4b19      	ldr	r3, [pc, #100]	; (e980 <_http_client_request+0x4b0>)
    e91a:	4798      	blx	r3
    e91c:	e027      	b.n	e96e <_http_client_request+0x49e>
			} else {
				if (size > module->req.content_length - module->req.sent_length) {
    e91e:	23cc      	movs	r3, #204	; 0xcc
    e920:	58e3      	ldr	r3, [r4, r3]
    e922:	22d0      	movs	r2, #208	; 0xd0
    e924:	58a2      	ldr	r2, [r4, r2]
    e926:	1a9b      	subs	r3, r3, r2
    e928:	1e05      	subs	r5, r0, #0
    e92a:	429d      	cmp	r5, r3
    e92c:	dd00      	ble.n	e930 <_http_client_request+0x460>
    e92e:	001d      	movs	r5, r3
					size = module->req.content_length - module->req.sent_length;
				}
				
				//module->sending = 1;
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    e930:	b2aa      	uxth	r2, r5
    e932:	2000      	movs	r0, #0
    e934:	5620      	ldrsb	r0, [r4, r0]
    e936:	2300      	movs	r3, #0
    e938:	0031      	movs	r1, r6
    e93a:	4e12      	ldr	r6, [pc, #72]	; (e984 <_http_client_request+0x4b4>)
    e93c:	47b0      	blx	r6
    e93e:	2800      	cmp	r0, #0
    e940:	da05      	bge.n	e94e <_http_client_request+0x47e>
					_http_client_clear_conn(module, -EIO);
    e942:	2105      	movs	r1, #5
    e944:	4249      	negs	r1, r1
    e946:	0020      	movs	r0, r4
    e948:	4b0d      	ldr	r3, [pc, #52]	; (e980 <_http_client_request+0x4b0>)
    e94a:	4798      	blx	r3
					return;
    e94c:	e011      	b.n	e972 <_http_client_request+0x4a2>
				}
				module->req.sent_length += size;
    e94e:	23d0      	movs	r3, #208	; 0xd0
    e950:	58e2      	ldr	r2, [r4, r3]
    e952:	4694      	mov	ip, r2
    e954:	4465      	add	r5, ip
    e956:	50e5      	str	r5, [r4, r3]
    e958:	e009      	b.n	e96e <_http_client_request+0x49e>
			}
		} else {
			/* Has not any entity. */
			module->req.state = STATE_SOCK_CONNECTED;
    e95a:	2302      	movs	r3, #2
    e95c:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    e95e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e960:	2b00      	cmp	r3, #0
    e962:	d004      	beq.n	e96e <_http_client_request+0x49e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    e964:	220c      	movs	r2, #12
    e966:	18ba      	adds	r2, r7, r2
    e968:	2101      	movs	r1, #1
    e96a:	0020      	movs	r0, r4
    e96c:	4798      	blx	r3
    e96e:	46dd      	mov	sp, fp
    e970:	e000      	b.n	e974 <_http_client_request+0x4a4>
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];

	if (module == NULL) {
		return;
    e972:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    e974:	46bd      	mov	sp, r7
    e976:	b013      	add	sp, #76	; 0x4c
    e978:	bc0c      	pop	{r2, r3}
    e97a:	4692      	mov	sl, r2
    e97c:	469b      	mov	fp, r3
    e97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e980:	0000e3b9 	.word	0x0000e3b9
    e984:	0000b941 	.word	0x0000b941

0000e988 <http_client_send_request>:
	return 1;
}

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
    e988:	b5f0      	push	{r4, r5, r6, r7, lr}
    e98a:	4647      	mov	r7, r8
    e98c:	b480      	push	{r7}
    e98e:	b088      	sub	sp, #32
    e990:	0004      	movs	r4, r0
    e992:	000e      	movs	r6, r1
    e994:	4690      	mov	r8, r2
    e996:	9302      	str	r3, [sp, #8]
	uint8_t flag = 0;
	struct sockaddr_in addr_in;
	const char *uri = NULL;
	int i = 0, j = 0, reconnect = 0;

	if (module == NULL) {
    e998:	2800      	cmp	r0, #0
    e99a:	d100      	bne.n	e99e <http_client_send_request+0x16>
    e99c:	e0d3      	b.n	eb46 <http_client_send_request+0x1be>
		return -EINVAL;
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
    e99e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    e9a0:	2b02      	cmp	r3, #2
    e9a2:	d900      	bls.n	e9a6 <http_client_send_request+0x1e>
    e9a4:	e0d2      	b.n	eb4c <http_client_send_request+0x1c4>
		return -EBUSY;
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
    e9a6:	2207      	movs	r2, #7
    e9a8:	4980      	ldr	r1, [pc, #512]	; (ebac <http_client_send_request+0x224>)
    e9aa:	0030      	movs	r0, r6
    e9ac:	4b80      	ldr	r3, [pc, #512]	; (ebb0 <http_client_send_request+0x228>)
    e9ae:	4798      	blx	r3
		i = 7;
    e9b0:	2707      	movs	r7, #7
	if (module->req.state > STATE_SOCK_CONNECTED) {
		return -EBUSY;
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
    e9b2:	2800      	cmp	r0, #0
    e9b4:	d007      	beq.n	e9c6 <http_client_send_request+0x3e>
		i = 7;
	} else if (!strncmp(url, "https://", 8)) {
    e9b6:	2208      	movs	r2, #8
    e9b8:	497e      	ldr	r1, [pc, #504]	; (ebb4 <http_client_send_request+0x22c>)
    e9ba:	0030      	movs	r0, r6
    e9bc:	4b7c      	ldr	r3, [pc, #496]	; (ebb0 <http_client_send_request+0x228>)
    e9be:	4798      	blx	r3
		i = 8;
    e9c0:	4241      	negs	r1, r0
    e9c2:	4141      	adcs	r1, r0
    e9c4:	00cf      	lsls	r7, r1, #3
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    e9c6:	19f5      	adds	r5, r6, r7
    e9c8:	1c63      	adds	r3, r4, #1
    e9ca:	9301      	str	r3, [sp, #4]
    e9cc:	0018      	movs	r0, r3
    e9ce:	4b7a      	ldr	r3, [pc, #488]	; (ebb8 <http_client_send_request+0x230>)
    e9d0:	4798      	blx	r3
    e9d2:	0002      	movs	r2, r0
    e9d4:	0029      	movs	r1, r5
    e9d6:	9801      	ldr	r0, [sp, #4]
    e9d8:	4b75      	ldr	r3, [pc, #468]	; (ebb0 <http_client_send_request+0x228>)
    e9da:	4798      	blx	r3
    e9dc:	9003      	str	r0, [sp, #12]

	for (; url[i] != '\0' && url[i] != '/'; i++) {
    e9de:	782b      	ldrb	r3, [r5, #0]
    e9e0:	2b00      	cmp	r3, #0
    e9e2:	d00e      	beq.n	ea02 <http_client_send_request+0x7a>
    e9e4:	2b2f      	cmp	r3, #47	; 0x2f
    e9e6:	d00e      	beq.n	ea06 <http_client_send_request+0x7e>
    e9e8:	1c79      	adds	r1, r7, #1
    e9ea:	1871      	adds	r1, r6, r1
    e9ec:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    e9ee:	3201      	adds	r2, #1
    e9f0:	54a3      	strb	r3, [r4, r2]
	} else if (!strncmp(url, "https://", 8)) {
		i = 8;
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));

	for (; url[i] != '\0' && url[i] != '/'; i++) {
    e9f2:	000d      	movs	r5, r1
    e9f4:	780b      	ldrb	r3, [r1, #0]
    e9f6:	2b00      	cmp	r3, #0
    e9f8:	d006      	beq.n	ea08 <http_client_send_request+0x80>
    e9fa:	3101      	adds	r1, #1
    e9fc:	2b2f      	cmp	r3, #47	; 0x2f
    e9fe:	d1f6      	bne.n	e9ee <http_client_send_request+0x66>
    ea00:	e002      	b.n	ea08 <http_client_send_request+0x80>
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
	uint8_t flag = 0;
	struct sockaddr_in addr_in;
	const char *uri = NULL;
	int i = 0, j = 0, reconnect = 0;
    ea02:	2200      	movs	r2, #0
    ea04:	e000      	b.n	ea08 <http_client_send_request+0x80>
    ea06:	2200      	movs	r2, #0
	reconnect = strncmp(module->host, url + i, strlen(module->host));

	for (; url[i] != '\0' && url[i] != '/'; i++) {
		module->host[j++] = url[i];
	}
	module->host[j] = '\0';
    ea08:	18a2      	adds	r2, r4, r2
    ea0a:	2300      	movs	r3, #0
    ea0c:	7053      	strb	r3, [r2, #1]
	uri = url + i;

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
    ea0e:	7863      	ldrb	r3, [r4, #1]
    ea10:	2b00      	cmp	r3, #0
    ea12:	d100      	bne.n	ea16 <http_client_send_request+0x8e>
    ea14:	e09d      	b.n	eb52 <http_client_send_request+0x1ca>
		return -EINVAL;
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    ea16:	0028      	movs	r0, r5
    ea18:	4b67      	ldr	r3, [pc, #412]	; (ebb8 <http_client_send_request+0x230>)
    ea1a:	4798      	blx	r3
    ea1c:	283f      	cmp	r0, #63	; 0x3f
    ea1e:	d900      	bls.n	ea22 <http_client_send_request+0x9a>
    ea20:	e09a      	b.n	eb58 <http_client_send_request+0x1d0>
		return -ENAMETOOLONG;
	}

	if (module->req.ext_header != NULL) {
    ea22:	23d4      	movs	r3, #212	; 0xd4
    ea24:	58e0      	ldr	r0, [r4, r3]
    ea26:	2800      	cmp	r0, #0
    ea28:	d001      	beq.n	ea2e <http_client_send_request+0xa6>
		free(module->req.ext_header);
    ea2a:	4b64      	ldr	r3, [pc, #400]	; (ebbc <http_client_send_request+0x234>)
    ea2c:	4798      	blx	r3
	}
	if (ext_header != NULL) {
    ea2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ea30:	2b00      	cmp	r3, #0
    ea32:	d007      	beq.n	ea44 <http_client_send_request+0xbc>
		module->req.ext_header = strdup(ext_header);
    ea34:	0018      	movs	r0, r3
    ea36:	4b62      	ldr	r3, [pc, #392]	; (ebc0 <http_client_send_request+0x238>)
    ea38:	4798      	blx	r3
    ea3a:	23d4      	movs	r3, #212	; 0xd4
    ea3c:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    ea3e:	2800      	cmp	r0, #0
    ea40:	d103      	bne.n	ea4a <http_client_send_request+0xc2>
    ea42:	e08c      	b.n	eb5e <http_client_send_request+0x1d6>
			return -ENOMEM;
		}
	} else {
		module->req.ext_header = NULL;
    ea44:	2200      	movs	r2, #0
    ea46:	23d4      	movs	r3, #212	; 0xd4
    ea48:	50e2      	str	r2, [r4, r3]
	}

	module->sending = 0;
    ea4a:	2241      	movs	r2, #65	; 0x41
    ea4c:	5ca3      	ldrb	r3, [r4, r2]
    ea4e:	2101      	movs	r1, #1
    ea50:	438b      	bics	r3, r1
    ea52:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    ea54:	2300      	movs	r3, #0
    ea56:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    ea58:	782b      	ldrb	r3, [r5, #0]
    ea5a:	2b2f      	cmp	r3, #47	; 0x2f
    ea5c:	d105      	bne.n	ea6a <http_client_send_request+0xe2>
		strcpy(module->req.uri, uri);
    ea5e:	0020      	movs	r0, r4
    ea60:	3070      	adds	r0, #112	; 0x70
    ea62:	0029      	movs	r1, r5
    ea64:	4b57      	ldr	r3, [pc, #348]	; (ebc4 <http_client_send_request+0x23c>)
    ea66:	4798      	blx	r3
    ea68:	e00a      	b.n	ea80 <http_client_send_request+0xf8>
		} else {
		module->req.uri[0] = '/';
    ea6a:	222f      	movs	r2, #47	; 0x2f
    ea6c:	2370      	movs	r3, #112	; 0x70
    ea6e:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    ea70:	782b      	ldrb	r3, [r5, #0]
    ea72:	2b00      	cmp	r3, #0
    ea74:	d004      	beq.n	ea80 <http_client_send_request+0xf8>
			strcpy(module->req.uri + 1, uri);
    ea76:	0029      	movs	r1, r5
    ea78:	0020      	movs	r0, r4
    ea7a:	3071      	adds	r0, #113	; 0x71
    ea7c:	4b51      	ldr	r3, [pc, #324]	; (ebc4 <http_client_send_request+0x23c>)
    ea7e:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
    ea80:	9b02      	ldr	r3, [sp, #8]
    ea82:	2b00      	cmp	r3, #0
    ea84:	d006      	beq.n	ea94 <http_client_send_request+0x10c>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    ea86:	0020      	movs	r0, r4
    ea88:	30b0      	adds	r0, #176	; 0xb0
    ea8a:	2218      	movs	r2, #24
    ea8c:	0019      	movs	r1, r3
    ea8e:	4b4e      	ldr	r3, [pc, #312]	; (ebc8 <http_client_send_request+0x240>)
    ea90:	4798      	blx	r3
    ea92:	e005      	b.n	eaa0 <http_client_send_request+0x118>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    ea94:	0020      	movs	r0, r4
    ea96:	30b0      	adds	r0, #176	; 0xb0
    ea98:	2218      	movs	r2, #24
    ea9a:	2100      	movs	r1, #0
    ea9c:	4b4b      	ldr	r3, [pc, #300]	; (ebcc <http_client_send_request+0x244>)
    ea9e:	4798      	blx	r3
	}

	module->req.method = method;
    eaa0:	23c8      	movs	r3, #200	; 0xc8
    eaa2:	4642      	mov	r2, r8
    eaa4:	54e2      	strb	r2, [r4, r3]
	
	switch (module->req.state) {
    eaa6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    eaa8:	2b01      	cmp	r3, #1
    eaaa:	d004      	beq.n	eab6 <http_client_send_request+0x12e>
    eaac:	2b00      	cmp	r3, #0
    eaae:	d015      	beq.n	eadc <http_client_send_request+0x154>
    eab0:	2b02      	cmp	r3, #2
    eab2:	d005      	beq.n	eac0 <http_client_send_request+0x138>
    eab4:	e056      	b.n	eb64 <http_client_send_request+0x1dc>
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
	}

	return 0;
    eab6:	2000      	movs	r0, #0

	module->req.method = method;
	
	switch (module->req.state) {
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
    eab8:	9b03      	ldr	r3, [sp, #12]
    eaba:	2b00      	cmp	r3, #0
    eabc:	d10a      	bne.n	ead4 <http_client_send_request+0x14c>
    eabe:	e070      	b.n	eba2 <http_client_send_request+0x21a>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
    eac0:	9b03      	ldr	r3, [sp, #12]
    eac2:	2b00      	cmp	r3, #0
    eac4:	d106      	bne.n	ead4 <http_client_send_request+0x14c>
			module->req.state = STATE_REQ_SEND_HEADER;
    eac6:	3303      	adds	r3, #3
    eac8:	66e3      	str	r3, [r4, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
    eaca:	0020      	movs	r0, r4
    eacc:	4b40      	ldr	r3, [pc, #256]	; (ebd0 <http_client_send_request+0x248>)
    eace:	4798      	blx	r3
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
	}

	return 0;
    ead0:	2000      	movs	r0, #0
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
			module->req.state = STATE_REQ_SEND_HEADER;
			/* Send request immediately. */
			_http_client_request(module);
			break;
    ead2:	e066      	b.n	eba2 <http_client_send_request+0x21a>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
    ead4:	2100      	movs	r1, #0
    ead6:	0020      	movs	r0, r4
    ead8:	4b3e      	ldr	r3, [pc, #248]	; (ebd4 <http_client_send_request+0x24c>)
    eada:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
    eadc:	2352      	movs	r3, #82	; 0x52
			flag |= SOCKET_FLAGS_SSL;
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    eade:	5ce2      	ldrb	r2, [r4, r3]
    eae0:	1e53      	subs	r3, r2, #1
    eae2:	419a      	sbcs	r2, r3
    eae4:	b2d2      	uxtb	r2, r2
    eae6:	2101      	movs	r1, #1
    eae8:	2002      	movs	r0, #2
    eaea:	4b3b      	ldr	r3, [pc, #236]	; (ebd8 <http_client_send_request+0x250>)
    eaec:	4798      	blx	r3
    eaee:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    eaf0:	2800      	cmp	r0, #0
    eaf2:	db3a      	blt.n	eb6a <http_client_send_request+0x1e2>
			module_ref_inst[module->sock] = module;
    eaf4:	0080      	lsls	r0, r0, #2
    eaf6:	4b39      	ldr	r3, [pc, #228]	; (ebdc <http_client_send_request+0x254>)
    eaf8:	50c4      	str	r4, [r0, r3]
    eafa:	9d01      	ldr	r5, [sp, #4]
	_http_client_clear_conn(module_inst, -ETIME);
}

static int _is_ip(const char *host)
{
	uint32_t isv6 = 0;
    eafc:	2100      	movs	r1, #0
	char ch;

	while (*host != '\0') {
		ch = *host++;
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    eafe:	2620      	movs	r6, #32
			isv6 = 1;
    eb00:	2001      	movs	r0, #1
		} else if (ch == '.') {
			if (isv6) {
				return 0;
			}
		} else if ((ch & 0x30) != 0x30) {
    eb02:	2730      	movs	r7, #48	; 0x30
    eb04:	e017      	b.n	eb36 <http_client_send_request+0x1ae>
{
	uint32_t isv6 = 0;
	char ch;

	while (*host != '\0') {
		ch = *host++;
    eb06:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    eb08:	0013      	movs	r3, r2
    eb0a:	43b3      	bics	r3, r6
    eb0c:	3b41      	subs	r3, #65	; 0x41
    eb0e:	2b05      	cmp	r3, #5
    eb10:	d90c      	bls.n	eb2c <http_client_send_request+0x1a4>
    eb12:	2a3a      	cmp	r2, #58	; 0x3a
    eb14:	d00c      	beq.n	eb30 <http_client_send_request+0x1a8>
    eb16:	2a2f      	cmp	r2, #47	; 0x2f
    eb18:	d00c      	beq.n	eb34 <http_client_send_request+0x1ac>
			isv6 = 1;
		} else if (ch == '.') {
    eb1a:	2a2e      	cmp	r2, #46	; 0x2e
    eb1c:	d102      	bne.n	eb24 <http_client_send_request+0x19c>
			if (isv6) {
    eb1e:	2900      	cmp	r1, #0
    eb20:	d009      	beq.n	eb36 <http_client_send_request+0x1ae>
    eb22:	e03a      	b.n	eb9a <http_client_send_request+0x212>
				return 0;
			}
		} else if ((ch & 0x30) != 0x30) {
    eb24:	403a      	ands	r2, r7
    eb26:	2a30      	cmp	r2, #48	; 0x30
    eb28:	d005      	beq.n	eb36 <http_client_send_request+0x1ae>
    eb2a:	e036      	b.n	eb9a <http_client_send_request+0x212>
	char ch;

	while (*host != '\0') {
		ch = *host++;
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
			isv6 = 1;
    eb2c:	0001      	movs	r1, r0
    eb2e:	e002      	b.n	eb36 <http_client_send_request+0x1ae>
    eb30:	0001      	movs	r1, r0
    eb32:	e000      	b.n	eb36 <http_client_send_request+0x1ae>
    eb34:	0001      	movs	r1, r0
static int _is_ip(const char *host)
{
	uint32_t isv6 = 0;
	char ch;

	while (*host != '\0') {
    eb36:	782a      	ldrb	r2, [r5, #0]
    eb38:	2a00      	cmp	r2, #0
    eb3a:	d1e4      	bne.n	eb06 <http_client_send_request+0x17e>
    eb3c:	e018      	b.n	eb70 <http_client_send_request+0x1e8>
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
			} else {
				gethostbyname((uint8*)module->host);
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
    eb3e:	2301      	movs	r3, #1
    eb40:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
	}

	return 0;
    eb42:	2000      	movs	r0, #0
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
		} else {
			return -ENOSPC;
		}
		break;
    eb44:	e02d      	b.n	eba2 <http_client_send_request+0x21a>
	struct sockaddr_in addr_in;
	const char *uri = NULL;
	int i = 0, j = 0, reconnect = 0;

	if (module == NULL) {
		return -EINVAL;
    eb46:	2016      	movs	r0, #22
    eb48:	4240      	negs	r0, r0
    eb4a:	e02a      	b.n	eba2 <http_client_send_request+0x21a>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
		return -EBUSY;
    eb4c:	2010      	movs	r0, #16
    eb4e:	4240      	negs	r0, r0
    eb50:	e027      	b.n	eba2 <http_client_send_request+0x21a>
	module->host[j] = '\0';
	uri = url + i;

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
		return -EINVAL;
    eb52:	2016      	movs	r0, #22
    eb54:	4240      	negs	r0, r0
    eb56:	e024      	b.n	eba2 <http_client_send_request+0x21a>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
		return -ENAMETOOLONG;
    eb58:	205b      	movs	r0, #91	; 0x5b
    eb5a:	4240      	negs	r0, r0
    eb5c:	e021      	b.n	eba2 <http_client_send_request+0x21a>
		free(module->req.ext_header);
	}
	if (ext_header != NULL) {
		module->req.ext_header = strdup(ext_header);
		if (module->req.ext_header == NULL) {
			return -ENOMEM;
    eb5e:	200c      	movs	r0, #12
    eb60:	4240      	negs	r0, r0
    eb62:	e01e      	b.n	eba2 <http_client_send_request+0x21a>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
    eb64:	200b      	movs	r0, #11
    eb66:	4240      	negs	r0, r0
    eb68:	e01b      	b.n	eba2 <http_client_send_request+0x21a>
			} else {
				gethostbyname((uint8*)module->host);
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
		} else {
			return -ENOSPC;
    eb6a:	201c      	movs	r0, #28
    eb6c:	4240      	negs	r0, r0
    eb6e:	e018      	b.n	eba2 <http_client_send_request+0x21a>
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
		if (module->sock >= 0) {
			module_ref_inst[module->sock] = module;
			if (_is_ip(module->host)) {
				addr_in.sin_family = AF_INET;
    eb70:	2302      	movs	r3, #2
    eb72:	aa04      	add	r2, sp, #16
    eb74:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    eb76:	334e      	adds	r3, #78	; 0x4e
    eb78:	5ae3      	ldrh	r3, [r4, r3]
    eb7a:	021a      	lsls	r2, r3, #8
    eb7c:	0a1b      	lsrs	r3, r3, #8
    eb7e:	4313      	orrs	r3, r2
    eb80:	aa04      	add	r2, sp, #16
    eb82:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    eb84:	9801      	ldr	r0, [sp, #4]
    eb86:	4b16      	ldr	r3, [pc, #88]	; (ebe0 <http_client_send_request+0x258>)
    eb88:	4798      	blx	r3
    eb8a:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    eb8c:	2000      	movs	r0, #0
    eb8e:	5620      	ldrsb	r0, [r4, r0]
    eb90:	2210      	movs	r2, #16
    eb92:	a904      	add	r1, sp, #16
    eb94:	4b13      	ldr	r3, [pc, #76]	; (ebe4 <http_client_send_request+0x25c>)
    eb96:	4798      	blx	r3
    eb98:	e7d1      	b.n	eb3e <http_client_send_request+0x1b6>
			} else {
				gethostbyname((uint8*)module->host);
    eb9a:	9801      	ldr	r0, [sp, #4]
    eb9c:	4b12      	ldr	r3, [pc, #72]	; (ebe8 <http_client_send_request+0x260>)
    eb9e:	4798      	blx	r3
    eba0:	e7cd      	b.n	eb3e <http_client_send_request+0x1b6>
		/* Session was busy. Try again later. */
		return -EAGAIN;
	}

	return 0;
}
    eba2:	b008      	add	sp, #32
    eba4:	bc04      	pop	{r2}
    eba6:	4690      	mov	r8, r2
    eba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebaa:	46c0      	nop			; (mov r8, r8)
    ebac:	00014208 	.word	0x00014208
    ebb0:	00011c19 	.word	0x00011c19
    ebb4:	00014210 	.word	0x00014210
    ebb8:	00011c0b 	.word	0x00011c0b
    ebbc:	00011705 	.word	0x00011705
    ebc0:	00011bd1 	.word	0x00011bd1
    ebc4:	00011bc1 	.word	0x00011bc1
    ebc8:	00011719 	.word	0x00011719
    ebcc:	00011755 	.word	0x00011755
    ebd0:	0000e4d1 	.word	0x0000e4d1
    ebd4:	0000e3b9 	.word	0x0000e3b9
    ebd8:	0000b72d 	.word	0x0000b72d
    ebdc:	20000100 	.word	0x20000100
    ebe0:	0000bb09 	.word	0x0000bb09
    ebe4:	0000b8b1 	.word	0x0000b8b1
    ebe8:	0000bb75 	.word	0x0000bb75

0000ebec <_http_client_recv_packet>:
		break;
	}
}

void _http_client_recv_packet(struct http_client_module *const module)
{
    ebec:	b510      	push	{r4, lr}
	if (module == NULL) {
    ebee:	2800      	cmp	r0, #0
    ebf0:	d012      	beq.n	ec18 <_http_client_recv_packet+0x2c>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    ebf2:	6c41      	ldr	r1, [r0, #68]	; 0x44
    ebf4:	6e02      	ldr	r2, [r0, #96]	; 0x60
    ebf6:	4291      	cmp	r1, r2
    ebf8:	d304      	bcc.n	ec04 <_http_client_recv_packet+0x18>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
    ebfa:	218b      	movs	r1, #139	; 0x8b
    ebfc:	4249      	negs	r1, r1
    ebfe:	4b07      	ldr	r3, [pc, #28]	; (ec1c <_http_client_recv_packet+0x30>)
    ec00:	4798      	blx	r3
		return;
    ec02:	e009      	b.n	ec18 <_http_client_recv_packet+0x2c>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    ec04:	1a52      	subs	r2, r2, r1
    ec06:	b292      	uxth	r2, r2
    ec08:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    ec0a:	469c      	mov	ip, r3
    ec0c:	4461      	add	r1, ip
    ec0e:	7800      	ldrb	r0, [r0, #0]
    ec10:	b240      	sxtb	r0, r0
    ec12:	2300      	movs	r3, #0
    ec14:	4c02      	ldr	r4, [pc, #8]	; (ec20 <_http_client_recv_packet+0x34>)
    ec16:	47a0      	blx	r4
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0);
}
    ec18:	bd10      	pop	{r4, pc}
    ec1a:	46c0      	nop			; (mov r8, r8)
    ec1c:	0000e3b9 	.word	0x0000e3b9
    ec20:	0000b9d9 	.word	0x0000b9d9

0000ec24 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    ec24:	b570      	push	{r4, r5, r6, lr}
    ec26:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    ec28:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    ec2a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    ec2c:	1a5c      	subs	r4, r3, r1
    ec2e:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    ec30:	2c00      	cmp	r4, #0
    ec32:	dd04      	ble.n	ec3e <_http_client_move_buffer+0x1a>
		memmove(buffer, base, remain);
    ec34:	0022      	movs	r2, r4
    ec36:	4b03      	ldr	r3, [pc, #12]	; (ec44 <_http_client_move_buffer+0x20>)
    ec38:	4798      	blx	r3
		module->recved_size = remain;
    ec3a:	646c      	str	r4, [r5, #68]	; 0x44
    ec3c:	e001      	b.n	ec42 <_http_client_move_buffer+0x1e>
	} else {
		module->recved_size = 0;
    ec3e:	2300      	movs	r3, #0
    ec40:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    ec42:	bd70      	pop	{r4, r5, r6, pc}
    ec44:	0001172b 	.word	0x0001172b

0000ec48 <_http_client_handle_header>:
	}
	return 0;
}

int _http_client_handle_header(struct http_client_module *const module)
{
    ec48:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec4a:	464f      	mov	r7, r9
    ec4c:	b480      	push	{r7}
    ec4e:	b084      	sub	sp, #16
    ec50:	0007      	movs	r7, r0
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
    ec52:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    ec54:	4b64      	ldr	r3, [pc, #400]	; (ede8 <_http_client_handle_header+0x1a0>)
    ec56:	4699      	mov	r9, r3
    ec58:	4964      	ldr	r1, [pc, #400]	; (edec <_http_client_handle_header+0x1a4>)
    ec5a:	0020      	movs	r0, r4
    ec5c:	47c8      	blx	r9
    ec5e:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    ec60:	d005      	beq.n	ec6e <_http_client_handle_header+0x26>
    ec62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    ec64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ec66:	4694      	mov	ip, r2
    ec68:	4463      	add	r3, ip
    ec6a:	4298      	cmp	r0, r3
    ec6c:	d305      	bcc.n	ec7a <_http_client_handle_header+0x32>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
    ec6e:	0021      	movs	r1, r4
    ec70:	0038      	movs	r0, r7
    ec72:	4b5f      	ldr	r3, [pc, #380]	; (edf0 <_http_client_handle_header+0x1a8>)
    ec74:	4798      	blx	r3
			return 0;
    ec76:	2600      	movs	r6, #0
    ec78:	e0b0      	b.n	eddc <_http_client_handle_header+0x194>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
    ec7a:	2202      	movs	r2, #2
    ec7c:	495b      	ldr	r1, [pc, #364]	; (edec <_http_client_handle_header+0x1a4>)
    ec7e:	0020      	movs	r0, r4
    ec80:	4b5c      	ldr	r3, [pc, #368]	; (edf4 <_http_client_handle_header+0x1ac>)
    ec82:	4798      	blx	r3
    ec84:	2800      	cmp	r0, #0
    ec86:	d12c      	bne.n	ece2 <_http_client_handle_header+0x9a>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
    ec88:	1ca1      	adds	r1, r4, #2
    ec8a:	0038      	movs	r0, r7
    ec8c:	4b58      	ldr	r3, [pc, #352]	; (edf0 <_http_client_handle_header+0x1a8>)
    ec8e:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
    ec90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ec92:	2b00      	cmp	r3, #0
    ec94:	d020      	beq.n	ecd8 <_http_client_handle_header+0x90>
    ec96:	22e4      	movs	r2, #228	; 0xe4
    ec98:	5ab9      	ldrh	r1, [r7, r2]
    ec9a:	2900      	cmp	r1, #0
    ec9c:	d01c      	beq.n	ecd8 <_http_client_handle_header+0x90>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
    ec9e:	3a08      	subs	r2, #8
    eca0:	58b8      	ldr	r0, [r7, r2]
    eca2:	2800      	cmp	r0, #0
    eca4:	da0b      	bge.n	ecbe <_http_client_handle_header+0x76>
					data.recv_response.response_code = module->resp.response_code;
    eca6:	aa01      	add	r2, sp, #4
    eca8:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    ecaa:	2101      	movs	r1, #1
    ecac:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    ecae:	2100      	movs	r1, #0
    ecb0:	20e0      	movs	r0, #224	; 0xe0
    ecb2:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    ecb4:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    ecb6:	3102      	adds	r1, #2
    ecb8:	0038      	movs	r0, r7
    ecba:	4798      	blx	r3
    ecbc:	e00c      	b.n	ecd8 <_http_client_handle_header+0x90>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    ecbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    ecc0:	4290      	cmp	r0, r2
    ecc2:	dd09      	ble.n	ecd8 <_http_client_handle_header+0x90>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
    ecc4:	aa01      	add	r2, sp, #4
    ecc6:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    ecc8:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    ecca:	2100      	movs	r1, #0
    eccc:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    ecce:	20e0      	movs	r0, #224	; 0xe0
    ecd0:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    ecd2:	3102      	adds	r1, #2
    ecd4:	0038      	movs	r0, r7
    ecd6:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
    ecd8:	2201      	movs	r2, #1
    ecda:	23d8      	movs	r3, #216	; 0xd8
    ecdc:	50fa      	str	r2, [r7, r3]
			return 1;
    ecde:	2601      	movs	r6, #1
    ece0:	e07c      	b.n	eddc <_http_client_handle_header+0x194>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    ece2:	2210      	movs	r2, #16
    ece4:	4944      	ldr	r1, [pc, #272]	; (edf8 <_http_client_handle_header+0x1b0>)
    ece6:	0020      	movs	r0, r4
    ece8:	4b42      	ldr	r3, [pc, #264]	; (edf4 <_http_client_handle_header+0x1ac>)
    ecea:	4798      	blx	r3
    ecec:	2800      	cmp	r0, #0
    ecee:	d106      	bne.n	ecfe <_http_client_handle_header+0xb6>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    ecf0:	0020      	movs	r0, r4
    ecf2:	3010      	adds	r0, #16
    ecf4:	4b41      	ldr	r3, [pc, #260]	; (edfc <_http_client_handle_header+0x1b4>)
    ecf6:	4798      	blx	r3
    ecf8:	23dc      	movs	r3, #220	; 0xdc
    ecfa:	50f8      	str	r0, [r7, r3]
    ecfc:	e06c      	b.n	edd8 <_http_client_handle_header+0x190>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    ecfe:	2213      	movs	r2, #19
    ed00:	493f      	ldr	r1, [pc, #252]	; (ee00 <_http_client_handle_header+0x1b8>)
    ed02:	0020      	movs	r0, r4
    ed04:	4b3b      	ldr	r3, [pc, #236]	; (edf4 <_http_client_handle_header+0x1ac>)
    ed06:	4798      	blx	r3
    ed08:	1e06      	subs	r6, r0, #0
    ed0a:	d11d      	bne.n	ed48 <_http_client_handle_header+0x100>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    ed0c:	0022      	movs	r2, r4
    ed0e:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    ed10:	4295      	cmp	r5, r2
    ed12:	d815      	bhi.n	ed40 <_http_client_handle_header+0xf8>
    ed14:	e060      	b.n	edd8 <_http_client_handle_header+0x190>
				if (*type_ptr == ' ') {
    ed16:	7813      	ldrb	r3, [r2, #0]
    ed18:	2b20      	cmp	r3, #32
    ed1a:	d103      	bne.n	ed24 <_http_client_handle_header+0xdc>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
			for (; ptr_line_end > type_ptr; type_ptr++) {
    ed1c:	3201      	adds	r2, #1
    ed1e:	4295      	cmp	r5, r2
    ed20:	d1f9      	bne.n	ed16 <_http_client_handle_header+0xce>
    ed22:	e059      	b.n	edd8 <_http_client_handle_header+0x190>
				if (*type_ptr == ' ') {
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    ed24:	2220      	movs	r2, #32
    ed26:	4393      	bics	r3, r2
    ed28:	2b43      	cmp	r3, #67	; 0x43
    ed2a:	d103      	bne.n	ed34 <_http_client_handle_header+0xec>
					/* Chunked transfer */
					module->req.content_length = -1;
    ed2c:	3a21      	subs	r2, #33	; 0x21
    ed2e:	3389      	adds	r3, #137	; 0x89
    ed30:	50fa      	str	r2, [r7, r3]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
    ed32:	e051      	b.n	edd8 <_http_client_handle_header+0x190>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
					/* Chunked transfer */
					module->req.content_length = -1;
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
    ed34:	2186      	movs	r1, #134	; 0x86
    ed36:	4249      	negs	r1, r1
    ed38:	0038      	movs	r0, r7
    ed3a:	4b32      	ldr	r3, [pc, #200]	; (ee04 <_http_client_handle_header+0x1bc>)
    ed3c:	4798      	blx	r3
					return 0;
    ed3e:	e04d      	b.n	eddc <_http_client_handle_header+0x194>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
			for (; ptr_line_end > type_ptr; type_ptr++) {
				if (*type_ptr == ' ') {
    ed40:	7ce3      	ldrb	r3, [r4, #19]
    ed42:	2b20      	cmp	r3, #32
    ed44:	d1ee      	bne.n	ed24 <_http_client_handle_header+0xdc>
    ed46:	e7e9      	b.n	ed1c <_http_client_handle_header+0xd4>
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    ed48:	220c      	movs	r2, #12
    ed4a:	492f      	ldr	r1, [pc, #188]	; (ee08 <_http_client_handle_header+0x1c0>)
    ed4c:	0020      	movs	r0, r4
    ed4e:	4b29      	ldr	r3, [pc, #164]	; (edf4 <_http_client_handle_header+0x1ac>)
    ed50:	4798      	blx	r3
    ed52:	2800      	cmp	r0, #0
    ed54:	d11f      	bne.n	ed96 <_http_client_handle_header+0x14e>
			char *type_ptr = ptr + strlen("Connection: ");
    ed56:	0022      	movs	r2, r4
    ed58:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    ed5a:	4295      	cmp	r5, r2
    ed5c:	d817      	bhi.n	ed8e <_http_client_handle_header+0x146>
    ed5e:	e03b      	b.n	edd8 <_http_client_handle_header+0x190>
				if (*type_ptr == ' ') {
    ed60:	7813      	ldrb	r3, [r2, #0]
    ed62:	2b20      	cmp	r3, #32
    ed64:	d103      	bne.n	ed6e <_http_client_handle_header+0x126>
				}
				break;
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
			char *type_ptr = ptr + strlen("Connection: ");
			for (; ptr_line_end > type_ptr; type_ptr++) {
    ed66:	3201      	adds	r2, #1
    ed68:	4295      	cmp	r5, r2
    ed6a:	d1f9      	bne.n	ed60 <_http_client_handle_header+0x118>
    ed6c:	e034      	b.n	edd8 <_http_client_handle_header+0x190>
				if (*type_ptr == ' ') {
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    ed6e:	2220      	movs	r2, #32
    ed70:	4393      	bics	r3, r2
    ed72:	2b4b      	cmp	r3, #75	; 0x4b
    ed74:	d105      	bne.n	ed82 <_http_client_handle_header+0x13a>
					module->permanent = 1;
    ed76:	3221      	adds	r2, #33	; 0x21
    ed78:	5cb9      	ldrb	r1, [r7, r2]
    ed7a:	2302      	movs	r3, #2
    ed7c:	430b      	orrs	r3, r1
    ed7e:	54bb      	strb	r3, [r7, r2]
    ed80:	e02a      	b.n	edd8 <_http_client_handle_header+0x190>
				} else {
					module->permanent = 0;
    ed82:	2241      	movs	r2, #65	; 0x41
    ed84:	5cbb      	ldrb	r3, [r7, r2]
    ed86:	2102      	movs	r1, #2
    ed88:	438b      	bics	r3, r1
    ed8a:	54bb      	strb	r3, [r7, r2]
    ed8c:	e024      	b.n	edd8 <_http_client_handle_header+0x190>
				break;
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
			char *type_ptr = ptr + strlen("Connection: ");
			for (; ptr_line_end > type_ptr; type_ptr++) {
				if (*type_ptr == ' ') {
    ed8e:	7b23      	ldrb	r3, [r4, #12]
    ed90:	2b20      	cmp	r3, #32
    ed92:	d1ec      	bne.n	ed6e <_http_client_handle_header+0x126>
    ed94:	e7e7      	b.n	ed66 <_http_client_handle_header+0x11e>
				} else {
					module->permanent = 0;
				}
				break;
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    ed96:	2205      	movs	r2, #5
    ed98:	491c      	ldr	r1, [pc, #112]	; (ee0c <_http_client_handle_header+0x1c4>)
    ed9a:	0020      	movs	r0, r4
    ed9c:	4b15      	ldr	r3, [pc, #84]	; (edf4 <_http_client_handle_header+0x1ac>)
    ed9e:	4798      	blx	r3
    eda0:	2800      	cmp	r0, #0
    eda2:	d119      	bne.n	edd8 <_http_client_handle_header+0x190>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    eda4:	0020      	movs	r0, r4
    eda6:	3009      	adds	r0, #9
    eda8:	4b14      	ldr	r3, [pc, #80]	; (edfc <_http_client_handle_header+0x1b4>)
    edaa:	4798      	blx	r3
    edac:	23e4      	movs	r3, #228	; 0xe4
    edae:	52f8      	strh	r0, [r7, r3]
			/* Initializing the variables */
			module->resp.content_length = 0;
    edb0:	2200      	movs	r2, #0
    edb2:	3b08      	subs	r3, #8
    edb4:	50fa      	str	r2, [r7, r3]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
    edb6:	7963      	ldrb	r3, [r4, #5]
    edb8:	2b31      	cmp	r3, #49	; 0x31
    edba:	d802      	bhi.n	edc2 <_http_client_handle_header+0x17a>
    edbc:	79e3      	ldrb	r3, [r4, #7]
    edbe:	2b30      	cmp	r3, #48	; 0x30
    edc0:	d905      	bls.n	edce <_http_client_handle_header+0x186>
				module->permanent = 1;
    edc2:	2241      	movs	r2, #65	; 0x41
    edc4:	5cb9      	ldrb	r1, [r7, r2]
    edc6:	2302      	movs	r3, #2
    edc8:	430b      	orrs	r3, r1
    edca:	54bb      	strb	r3, [r7, r2]
    edcc:	e004      	b.n	edd8 <_http_client_handle_header+0x190>
			} else {
				module->permanent = 0;
    edce:	2241      	movs	r2, #65	; 0x41
    edd0:	5cbb      	ldrb	r3, [r7, r2]
    edd2:	2102      	movs	r1, #2
    edd4:	438b      	bics	r3, r1
    edd6:	54bb      	strb	r3, [r7, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
    edd8:	1cac      	adds	r4, r5, #2
	}
    edda:	e73d      	b.n	ec58 <_http_client_handle_header+0x10>
}
    eddc:	0030      	movs	r0, r6
    edde:	b004      	add	sp, #16
    ede0:	bc04      	pop	{r2}
    ede2:	4691      	mov	r9, r2
    ede4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ede6:	46c0      	nop			; (mov r8, r8)
    ede8:	00011c3d 	.word	0x00011c3d
    edec:	0001494c 	.word	0x0001494c
    edf0:	0000ec25 	.word	0x0000ec25
    edf4:	00011c19 	.word	0x00011c19
    edf8:	000141f4 	.word	0x000141f4
    edfc:	00011699 	.word	0x00011699
    ee00:	0001421c 	.word	0x0001421c
    ee04:	0000e3b9 	.word	0x0000e3b9
    ee08:	00014230 	.word	0x00014230
    ee0c:	00014240 	.word	0x00014240

0000ee10 <_http_client_handle_entity>:
		}
	} while(module->recved_size > 0);
}

int _http_client_handle_entity(struct http_client_module *const module)
{
    ee10:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee12:	464f      	mov	r7, r9
    ee14:	4646      	mov	r6, r8
    ee16:	b4c0      	push	{r6, r7}
    ee18:	b087      	sub	sp, #28
    ee1a:	0004      	movs	r4, r0
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
    ee1c:	6dc5      	ldr	r5, [r0, #92]	; 0x5c

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    ee1e:	23dc      	movs	r3, #220	; 0xdc
    ee20:	58c3      	ldr	r3, [r0, r3]
    ee22:	2b00      	cmp	r3, #0
    ee24:	db66      	blt.n	eef4 <_http_client_handle_entity+0xe4>
    ee26:	6e02      	ldr	r2, [r0, #96]	; 0x60
    ee28:	4293      	cmp	r3, r2
    ee2a:	dc2b      	bgt.n	ee84 <_http_client_handle_entity+0x74>
		} else {
			_http_client_read_chuked_entity(module);
		}
	}

	return 0;
    ee2c:	2000      	movs	r0, #0
	union http_client_data data;
	char *buffer = module->config.recv_buffer;

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
		if ((int)module->recved_size >= module->resp.content_length) {
    ee2e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    ee30:	4293      	cmp	r3, r2
    ee32:	dd00      	ble.n	ee36 <_http_client_handle_entity+0x26>
    ee34:	e0f5      	b.n	f022 <_http_client_handle_entity+0x212>
			if (module->cb && module->resp.response_code) {
    ee36:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    ee38:	2e00      	cmp	r6, #0
    ee3a:	d00c      	beq.n	ee56 <_http_client_handle_entity+0x46>
    ee3c:	22e4      	movs	r2, #228	; 0xe4
    ee3e:	5aa1      	ldrh	r1, [r4, r2]
    ee40:	2900      	cmp	r1, #0
    ee42:	d008      	beq.n	ee56 <_http_client_handle_entity+0x46>
				data.recv_response.response_code = module->resp.response_code;
    ee44:	aa03      	add	r2, sp, #12
    ee46:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    ee48:	2100      	movs	r1, #0
    ee4a:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    ee4c:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    ee4e:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    ee50:	3102      	adds	r1, #2
    ee52:	0020      	movs	r0, r4
    ee54:	47b0      	blx	r6
			}
			module->resp.state = STATE_PARSE_HEADER;
    ee56:	2300      	movs	r3, #0
    ee58:	22d8      	movs	r2, #216	; 0xd8
    ee5a:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    ee5c:	320c      	adds	r2, #12
    ee5e:	52a3      	strh	r3, [r4, r2]
			
			if (module->permanent == 0) {
    ee60:	3341      	adds	r3, #65	; 0x41
    ee62:	5ce3      	ldrb	r3, [r4, r3]
    ee64:	079b      	lsls	r3, r3, #30
    ee66:	d405      	bmi.n	ee74 <_http_client_handle_entity+0x64>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
    ee68:	2100      	movs	r1, #0
    ee6a:	0020      	movs	r0, r4
    ee6c:	4b6f      	ldr	r3, [pc, #444]	; (f02c <_http_client_handle_entity+0x21c>)
    ee6e:	4798      	blx	r3
		} else {
			_http_client_read_chuked_entity(module);
		}
	}

	return 0;
    ee70:	2000      	movs	r0, #0
    ee72:	e0d6      	b.n	f022 <_http_client_handle_entity+0x212>
			
			if (module->permanent == 0) {
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    ee74:	23dc      	movs	r3, #220	; 0xdc
    ee76:	58e1      	ldr	r1, [r4, r3]
    ee78:	1869      	adds	r1, r5, r1
    ee7a:	0020      	movs	r0, r4
    ee7c:	4b6c      	ldr	r3, [pc, #432]	; (f030 <_http_client_handle_entity+0x220>)
    ee7e:	4798      	blx	r3
				return module->recved_size;
    ee80:	6c60      	ldr	r0, [r4, #68]	; 0x44
    ee82:	e0ce      	b.n	f022 <_http_client_handle_entity+0x212>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
			data.recv_chunked_data.length = module->recved_size;
    ee84:	6c42      	ldr	r2, [r0, #68]	; 0x44
    ee86:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    ee88:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    ee8a:	21e0      	movs	r1, #224	; 0xe0
    ee8c:	5840      	ldr	r0, [r0, r1]
    ee8e:	4684      	mov	ip, r0
    ee90:	4462      	add	r2, ip
    ee92:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    ee94:	4293      	cmp	r3, r2
    ee96:	dc0b      	bgt.n	eeb0 <_http_client_handle_entity+0xa0>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
    ee98:	2300      	movs	r3, #0
    ee9a:	22d8      	movs	r2, #216	; 0xd8
    ee9c:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    ee9e:	320c      	adds	r2, #12
    eea0:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    eea2:	3ae3      	subs	r2, #227	; 0xe3
    eea4:	ab03      	add	r3, sp, #12
    eea6:	721a      	strb	r2, [r3, #8]
			} else {
				data.recv_chunked_data.is_complete = 0;
			}

			if (module->cb) {
    eea8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    eeaa:	2b00      	cmp	r3, #0
    eeac:	d106      	bne.n	eebc <_http_client_handle_entity+0xac>
    eeae:	e00d      	b.n	eecc <_http_client_handle_entity+0xbc>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
				module->resp.response_code = 0;
				data.recv_chunked_data.is_complete = 1;
			} else {
				data.recv_chunked_data.is_complete = 0;
    eeb0:	2200      	movs	r2, #0
    eeb2:	ab03      	add	r3, sp, #12
    eeb4:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
    eeb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    eeb8:	2b00      	cmp	r3, #0
    eeba:	d014      	beq.n	eee6 <_http_client_handle_entity+0xd6>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    eebc:	ae03      	add	r6, sp, #12
    eebe:	0032      	movs	r2, r6
    eec0:	2103      	movs	r1, #3
    eec2:	0020      	movs	r0, r4
    eec4:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
    eec6:	7a33      	ldrb	r3, [r6, #8]
    eec8:	2b01      	cmp	r3, #1
    eeca:	d10c      	bne.n	eee6 <_http_client_handle_entity+0xd6>
				if (module->permanent == 0) {
    eecc:	2341      	movs	r3, #65	; 0x41
    eece:	5ce3      	ldrb	r3, [r4, r3]
    eed0:	079b      	lsls	r3, r3, #30
    eed2:	d408      	bmi.n	eee6 <_http_client_handle_entity+0xd6>
					/* This server was not supported keep alive. */
					printf("1\r\n");
    eed4:	4857      	ldr	r0, [pc, #348]	; (f034 <_http_client_handle_entity+0x224>)
    eed6:	4b58      	ldr	r3, [pc, #352]	; (f038 <_http_client_handle_entity+0x228>)
    eed8:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    eeda:	2100      	movs	r1, #0
    eedc:	0020      	movs	r0, r4
    eede:	4b53      	ldr	r3, [pc, #332]	; (f02c <_http_client_handle_entity+0x21c>)
    eee0:	4798      	blx	r3
					return 0;
    eee2:	2000      	movs	r0, #0
    eee4:	e09d      	b.n	f022 <_http_client_handle_entity+0x212>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
    eee6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    eee8:	18e9      	adds	r1, r5, r3
    eeea:	0020      	movs	r0, r4
    eeec:	4b50      	ldr	r3, [pc, #320]	; (f030 <_http_client_handle_entity+0x220>)
    eeee:	4798      	blx	r3
		} else {
			_http_client_read_chuked_entity(module);
		}
	}

	return 0;
    eef0:	2000      	movs	r0, #0
    eef2:	e096      	b.n	f022 <_http_client_handle_entity+0x212>

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
    eef4:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    eef6:	2300      	movs	r3, #0
    eef8:	4699      	mov	r9, r3
	char *buffer= module->config.recv_buffer;

	do {
		if (module->resp.read_length >= 0) {
    eefa:	26e0      	movs	r6, #224	; 0xe0
				if (module->permanent == 0) {
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
					return;
				}
				_http_client_move_buffer(module, buffer + 2);
    eefc:	4b4c      	ldr	r3, [pc, #304]	; (f030 <_http_client_handle_entity+0x220>)
    eefe:	4698      	mov	r8, r3
	int length = (int)module->recved_size;
	int extension = 0;
	char *buffer= module->config.recv_buffer;

	do {
		if (module->resp.read_length >= 0) {
    ef00:	59a3      	ldr	r3, [r4, r6]
    ef02:	2b00      	cmp	r3, #0
    ef04:	db36      	blt.n	ef74 <_http_client_handle_entity+0x164>
			if (module->resp.read_length == 0) {
    ef06:	d11c      	bne.n	ef42 <_http_client_handle_entity+0x132>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
    ef08:	22d8      	movs	r2, #216	; 0xd8
    ef0a:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    ef0c:	320c      	adds	r2, #12
    ef0e:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    ef10:	3ae3      	subs	r2, #227	; 0xe3
    ef12:	4669      	mov	r1, sp
    ef14:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    ef16:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    ef18:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    ef1a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    ef1c:	2b00      	cmp	r3, #0
    ef1e:	d003      	beq.n	ef28 <_http_client_handle_entity+0x118>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    ef20:	466a      	mov	r2, sp
    ef22:	2103      	movs	r1, #3
    ef24:	0020      	movs	r0, r4
    ef26:	4798      	blx	r3
				}
				if (module->permanent == 0) {
    ef28:	2341      	movs	r3, #65	; 0x41
    ef2a:	5ce3      	ldrb	r3, [r4, r3]
    ef2c:	079b      	lsls	r3, r3, #30
    ef2e:	d404      	bmi.n	ef3a <_http_client_handle_entity+0x12a>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
    ef30:	2100      	movs	r1, #0
    ef32:	0020      	movs	r0, r4
    ef34:	4b3d      	ldr	r3, [pc, #244]	; (f02c <_http_client_handle_entity+0x21c>)
    ef36:	4798      	blx	r3
    ef38:	e06b      	b.n	f012 <_http_client_handle_entity+0x202>
					return;
				}
				_http_client_move_buffer(module, buffer + 2);
    ef3a:	1ca9      	adds	r1, r5, #2
    ef3c:	0020      	movs	r0, r4
    ef3e:	47c0      	blx	r8
    ef40:	e061      	b.n	f006 <_http_client_handle_entity+0x1f6>
			} else if (module->resp.read_length <= length) {
    ef42:	42bb      	cmp	r3, r7
    ef44:	dc5f      	bgt.n	f006 <_http_client_handle_entity+0x1f6>
				data.recv_chunked_data.length = module->resp.read_length;
    ef46:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    ef48:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    ef4a:	2300      	movs	r3, #0
    ef4c:	466a      	mov	r2, sp
    ef4e:	7213      	strb	r3, [r2, #8]

				if (module->cb) {
    ef50:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    ef52:	2b00      	cmp	r3, #0
    ef54:	d002      	beq.n	ef5c <_http_client_handle_entity+0x14c>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    ef56:	2103      	movs	r1, #3
    ef58:	0020      	movs	r0, r4
    ef5a:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    ef5c:	59a3      	ldr	r3, [r4, r6]
    ef5e:	1c99      	adds	r1, r3, #2
    ef60:	1869      	adds	r1, r5, r1
    ef62:	0020      	movs	r0, r4
    ef64:	4b32      	ldr	r3, [pc, #200]	; (f030 <_http_client_handle_entity+0x220>)
    ef66:	4798      	blx	r3
				length = (int)module->recved_size;
    ef68:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    ef6a:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    ef6c:	2301      	movs	r3, #1
    ef6e:	425b      	negs	r3, r3
    ef70:	51a3      	str	r3, [r4, r6]
    ef72:	e048      	b.n	f006 <_http_client_handle_entity+0x1f6>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
    ef74:	2300      	movs	r3, #0
    ef76:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    ef78:	2f00      	cmp	r7, #0
    ef7a:	dd33      	ble.n	efe4 <_http_client_handle_entity+0x1d4>
				if (*buffer == '\n') {
    ef7c:	782b      	ldrb	r3, [r5, #0]
    ef7e:	2b0a      	cmp	r3, #10
    ef80:	d003      	beq.n	ef8a <_http_client_handle_entity+0x17a>
    ef82:	e005      	b.n	ef90 <_http_client_handle_entity+0x180>
    ef84:	782b      	ldrb	r3, [r5, #0]
    ef86:	2b0a      	cmp	r3, #10
    ef88:	d102      	bne.n	ef90 <_http_client_handle_entity+0x180>
					buffer++;
    ef8a:	3501      	adds	r5, #1
					length--;
    ef8c:	3f01      	subs	r7, #1
    ef8e:	e029      	b.n	efe4 <_http_client_handle_entity+0x1d4>
					break;
				}
				if (extension != 0) {
    ef90:	464a      	mov	r2, r9
    ef92:	2a00      	cmp	r2, #0
    ef94:	d121      	bne.n	efda <_http_client_handle_entity+0x1ca>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
    ef96:	001a      	movs	r2, r3
    ef98:	3a30      	subs	r2, #48	; 0x30
    ef9a:	2a09      	cmp	r2, #9
    ef9c:	d805      	bhi.n	efaa <_http_client_handle_entity+0x19a>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    ef9e:	59a2      	ldr	r2, [r4, r6]
    efa0:	0112      	lsls	r2, r2, #4
    efa2:	18d3      	adds	r3, r2, r3
    efa4:	3b30      	subs	r3, #48	; 0x30
    efa6:	51a3      	str	r3, [r4, r6]
    efa8:	e017      	b.n	efda <_http_client_handle_entity+0x1ca>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    efaa:	001a      	movs	r2, r3
    efac:	3a61      	subs	r2, #97	; 0x61
    efae:	2a05      	cmp	r2, #5
    efb0:	d805      	bhi.n	efbe <_http_client_handle_entity+0x1ae>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    efb2:	59a2      	ldr	r2, [r4, r6]
    efb4:	0112      	lsls	r2, r2, #4
    efb6:	18d3      	adds	r3, r2, r3
    efb8:	3b61      	subs	r3, #97	; 0x61
    efba:	51a3      	str	r3, [r4, r6]
    efbc:	e00d      	b.n	efda <_http_client_handle_entity+0x1ca>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    efbe:	001a      	movs	r2, r3
    efc0:	3a41      	subs	r2, #65	; 0x41
    efc2:	2a05      	cmp	r2, #5
    efc4:	d805      	bhi.n	efd2 <_http_client_handle_entity+0x1c2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    efc6:	59a2      	ldr	r2, [r4, r6]
    efc8:	0112      	lsls	r2, r2, #4
    efca:	18d3      	adds	r3, r2, r3
    efcc:	3b41      	subs	r3, #65	; 0x41
    efce:	51a3      	str	r3, [r4, r6]
    efd0:	e003      	b.n	efda <_http_client_handle_entity+0x1ca>
    efd2:	3b3b      	subs	r3, #59	; 0x3b
    efd4:	425a      	negs	r2, r3
    efd6:	415a      	adcs	r2, r3
    efd8:	4691      	mov	r9, r2
				module->resp.read_length = -1;
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
			for (; length > 0; buffer++, length--) {
    efda:	3501      	adds	r5, #1
    efdc:	3f01      	subs	r7, #1
    efde:	2f00      	cmp	r7, #0
    efe0:	d1d0      	bne.n	ef84 <_http_client_handle_entity+0x174>
    efe2:	e018      	b.n	f016 <_http_client_handle_entity+0x206>
				} else if (*buffer == ';') {
					extension = 1;
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    efe4:	59a3      	ldr	r3, [r4, r6]
    efe6:	6e22      	ldr	r2, [r4, #96]	; 0x60
    efe8:	4293      	cmp	r3, r2
    efea:	dd05      	ble.n	eff8 <_http_client_handle_entity+0x1e8>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
    efec:	218b      	movs	r1, #139	; 0x8b
    efee:	4249      	negs	r1, r1
    eff0:	0020      	movs	r0, r4
    eff2:	4b0e      	ldr	r3, [pc, #56]	; (f02c <_http_client_handle_entity+0x21c>)
    eff4:	4798      	blx	r3
    eff6:	e00c      	b.n	f012 <_http_client_handle_entity+0x202>
				return;
			}

			if (length  == 0) {
    eff8:	2f00      	cmp	r7, #0
    effa:	d104      	bne.n	f006 <_http_client_handle_entity+0x1f6>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
    effc:	2201      	movs	r2, #1
    effe:	4252      	negs	r2, r2
    f000:	23e0      	movs	r3, #224	; 0xe0
    f002:	50e2      	str	r2, [r4, r3]
    f004:	e005      	b.n	f012 <_http_client_handle_entity+0x202>
				return;
			}
		}
	} while(module->recved_size > 0);
    f006:	6c63      	ldr	r3, [r4, #68]	; 0x44
    f008:	2b00      	cmp	r3, #0
    f00a:	d000      	beq.n	f00e <_http_client_handle_entity+0x1fe>
    f00c:	e778      	b.n	ef00 <_http_client_handle_entity+0xf0>
		} else {
			_http_client_read_chuked_entity(module);
		}
	}

	return 0;
    f00e:	2000      	movs	r0, #0
    f010:	e007      	b.n	f022 <_http_client_handle_entity+0x212>
    f012:	2000      	movs	r0, #0
    f014:	e005      	b.n	f022 <_http_client_handle_entity+0x212>
				} else if (*buffer == ';') {
					extension = 1;
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    f016:	23e0      	movs	r3, #224	; 0xe0
    f018:	58e3      	ldr	r3, [r4, r3]
    f01a:	6e22      	ldr	r2, [r4, #96]	; 0x60
    f01c:	4293      	cmp	r3, r2
    f01e:	dce5      	bgt.n	efec <_http_client_handle_entity+0x1dc>
    f020:	e7ec      	b.n	effc <_http_client_handle_entity+0x1ec>
			_http_client_read_chuked_entity(module);
		}
	}

	return 0;
}
    f022:	b007      	add	sp, #28
    f024:	bc0c      	pop	{r2, r3}
    f026:	4690      	mov	r8, r2
    f028:	4699      	mov	r9, r3
    f02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f02c:	0000e3b9 	.word	0x0000e3b9
    f030:	0000ec25 	.word	0x0000ec25
    f034:	00014248 	.word	0x00014248
    f038:	000119bd 	.word	0x000119bd

0000f03c <_http_client_handle_response>:
	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
}

int _http_client_handle_response(struct http_client_module *const module)
{
    f03c:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    f03e:	23d8      	movs	r3, #216	; 0xd8
    f040:	58c3      	ldr	r3, [r0, r3]
    f042:	2b00      	cmp	r3, #0
    f044:	d002      	beq.n	f04c <_http_client_handle_response+0x10>
    f046:	2b01      	cmp	r3, #1
    f048:	d003      	beq.n	f052 <_http_client_handle_response+0x16>
    f04a:	e005      	b.n	f058 <_http_client_handle_response+0x1c>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
    f04c:	4b03      	ldr	r3, [pc, #12]	; (f05c <_http_client_handle_response+0x20>)
    f04e:	4798      	blx	r3
    f050:	e003      	b.n	f05a <_http_client_handle_response+0x1e>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
    f052:	4b03      	ldr	r3, [pc, #12]	; (f060 <_http_client_handle_response+0x24>)
    f054:	4798      	blx	r3
    f056:	e000      	b.n	f05a <_http_client_handle_response+0x1e>
	}
	return 0;
    f058:	2000      	movs	r0, #0
}
    f05a:	bd10      	pop	{r4, pc}
    f05c:	0000ec49 	.word	0x0000ec49
    f060:	0000ee11 	.word	0x0000ee11

0000f064 <_http_client_recved_packet>:
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0);
}

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
    f064:	b570      	push	{r4, r5, r6, lr}
    f066:	0004      	movs	r4, r0
	module->recved_size += read_len;
    f068:	6c43      	ldr	r3, [r0, #68]	; 0x44
    f06a:	469c      	mov	ip, r3
    f06c:	4461      	add	r1, ip
    f06e:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    f070:	2358      	movs	r3, #88	; 0x58
    f072:	5ac3      	ldrh	r3, [r0, r3]
    f074:	2b00      	cmp	r3, #0
    f076:	d003      	beq.n	f080 <_http_client_recved_packet+0x1c>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    f078:	6c81      	ldr	r1, [r0, #72]	; 0x48
    f07a:	6d40      	ldr	r0, [r0, #84]	; 0x54
    f07c:	4b03      	ldr	r3, [pc, #12]	; (f08c <_http_client_recved_packet+0x28>)
    f07e:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
    f080:	4d03      	ldr	r5, [pc, #12]	; (f090 <_http_client_recved_packet+0x2c>)
    f082:	0020      	movs	r0, r4
    f084:	47a8      	blx	r5
    f086:	2800      	cmp	r0, #0
    f088:	d1fb      	bne.n	f082 <_http_client_recved_packet+0x1e>
}
    f08a:	bd70      	pop	{r4, r5, r6, pc}
    f08c:	0000f42d 	.word	0x0000f42d
    f090:	0000f03d 	.word	0x0000f03d

0000f094 <http_client_socket_event_handler>:
			return 0;
	}
}

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    f094:	b510      	push	{r4, lr}
    f096:	b084      	sub	sp, #16
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
    f098:	0080      	lsls	r0, r0, #2
    f09a:	4b65      	ldr	r3, [pc, #404]	; (f230 <http_client_socket_event_handler+0x19c>)
    f09c:	58c4      	ldr	r4, [r0, r3]
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
    f09e:	2c00      	cmp	r4, #0
    f0a0:	d100      	bne.n	f0a4 <http_client_socket_event_handler+0x10>
    f0a2:	e0c3      	b.n	f22c <http_client_socket_event_handler+0x198>
		return;
	}

	switch (msg_type) {
    f0a4:	2906      	cmp	r1, #6
    f0a6:	d050      	beq.n	f14a <http_client_socket_event_handler+0xb6>
    f0a8:	2907      	cmp	r1, #7
    f0aa:	d100      	bne.n	f0ae <http_client_socket_event_handler+0x1a>
    f0ac:	e089      	b.n	f1c2 <http_client_socket_event_handler+0x12e>
    f0ae:	2905      	cmp	r1, #5
    f0b0:	d000      	beq.n	f0b4 <http_client_socket_event_handler+0x20>
    f0b2:	e0bb      	b.n	f22c <http_client_socket_event_handler+0x198>
	case SOCKET_MSG_CONNECT:
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
    	data.sock_connected.result = msg_connect->s8Error;
    f0b4:	2301      	movs	r3, #1
    f0b6:	56d3      	ldrsb	r3, [r2, r3]
    f0b8:	1e1a      	subs	r2, r3, #0
    f0ba:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    f0bc:	da2f      	bge.n	f11e <http_client_socket_event_handler+0x8a>
/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
	switch (err) {
    f0be:	330e      	adds	r3, #14
    f0c0:	b2d9      	uxtb	r1, r3
    f0c2:	290e      	cmp	r1, #14
    f0c4:	d81e      	bhi.n	f104 <http_client_socket_event_handler+0x70>
    f0c6:	008b      	lsls	r3, r1, #2
    f0c8:	495a      	ldr	r1, [pc, #360]	; (f234 <http_client_socket_event_handler+0x1a0>)
    f0ca:	58cb      	ldr	r3, [r1, r3]
    f0cc:	469f      	mov	pc, r3
		case 0:
			return -EIO;
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
    f0ce:	2102      	movs	r1, #2
    f0d0:	4249      	negs	r1, r1
    f0d2:	e020      	b.n	f116 <http_client_socket_event_handler+0x82>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
    f0d4:	2170      	movs	r1, #112	; 0x70
    f0d6:	4249      	negs	r1, r1
    f0d8:	e01d      	b.n	f116 <http_client_socket_event_handler+0x82>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
    f0da:	210c      	movs	r1, #12
    f0dc:	4249      	negs	r1, r1
    f0de:	e01a      	b.n	f116 <http_client_socket_event_handler+0x82>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
    f0e0:	2116      	movs	r1, #22
    f0e2:	4249      	negs	r1, r1
    f0e4:	e017      	b.n	f116 <http_client_socket_event_handler+0x82>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
    f0e6:	210c      	movs	r1, #12
    f0e8:	4249      	negs	r1, r1
    f0ea:	e014      	b.n	f116 <http_client_socket_event_handler+0x82>
		case SOCK_ERR_INVALID:
			return -EIO;
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
    f0ec:	2179      	movs	r1, #121	; 0x79
    f0ee:	4249      	negs	r1, r1
    f0f0:	e011      	b.n	f116 <http_client_socket_event_handler+0x82>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
    f0f2:	2168      	movs	r1, #104	; 0x68
    f0f4:	4249      	negs	r1, r1
    f0f6:	e00e      	b.n	f116 <http_client_socket_event_handler+0x82>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
    f0f8:	210b      	movs	r1, #11
    f0fa:	4249      	negs	r1, r1
    f0fc:	e00b      	b.n	f116 <http_client_socket_event_handler+0x82>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
    f0fe:	2110      	movs	r1, #16
    f100:	4249      	negs	r1, r1
    f102:	e008      	b.n	f116 <http_client_socket_event_handler+0x82>
		default:
			if (err < 0) {
    f104:	2a00      	cmp	r2, #0
    f106:	db04      	blt.n	f112 <http_client_socket_event_handler+0x7e>
				return -EIO;
			}
			return 0;
    f108:	2100      	movs	r1, #0
    f10a:	e004      	b.n	f116 <http_client_socket_event_handler+0x82>
 */
static inline int _hwerr_to_stderr(int err)
{
	switch (err) {
		case 0:
			return -EIO;
    f10c:	2105      	movs	r1, #5
    f10e:	4249      	negs	r1, r1
    f110:	e001      	b.n	f116 <http_client_socket_event_handler+0x82>
			return -EAGAIN;
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
		default:
			if (err < 0) {
				return -EIO;
    f112:	2105      	movs	r1, #5
    f114:	4249      	negs	r1, r1
	case SOCKET_MSG_CONNECT:
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
    	data.sock_connected.result = msg_connect->s8Error;
    	if (msg_connect->s8Error < 0) {
			/* Remove reference. */
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    f116:	0020      	movs	r0, r4
    f118:	4b47      	ldr	r3, [pc, #284]	; (f238 <http_client_socket_event_handler+0x1a4>)
    f11a:	4798      	blx	r3
    f11c:	e086      	b.n	f22c <http_client_socket_event_handler+0x198>
		} else {
			/* Send event to callback. */
			if (module->cb != NULL) {
    f11e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    f120:	2b00      	cmp	r3, #0
    f122:	d003      	beq.n	f12c <http_client_socket_event_handler+0x98>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    f124:	aa01      	add	r2, sp, #4
    f126:	2100      	movs	r1, #0
    f128:	0020      	movs	r0, r4
    f12a:	4798      	blx	r3
			}
			module->req.state = STATE_REQ_SEND_HEADER;
    f12c:	2303      	movs	r3, #3
    f12e:	66e3      	str	r3, [r4, #108]	; 0x6c
			/* Start timer. */
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    f130:	3355      	adds	r3, #85	; 0x55
    f132:	5ae2      	ldrh	r2, [r4, r3]
    f134:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    f136:	6d60      	ldr	r0, [r4, #84]	; 0x54
    f138:	4b40      	ldr	r3, [pc, #256]	; (f23c <http_client_socket_event_handler+0x1a8>)
    f13a:	4798      	blx	r3
    		/* Start receive packet. */
    		_http_client_recv_packet(module);
    f13c:	0020      	movs	r0, r4
    f13e:	4b40      	ldr	r3, [pc, #256]	; (f240 <http_client_socket_event_handler+0x1ac>)
    f140:	4798      	blx	r3
			/* Try to check the FSM. */
			_http_client_request(module);
    f142:	0020      	movs	r0, r4
    f144:	4b3f      	ldr	r3, [pc, #252]	; (f244 <http_client_socket_event_handler+0x1b0>)
    f146:	4798      	blx	r3
    f148:	e070      	b.n	f22c <http_client_socket_event_handler+0x198>
		}
    	break;
	case SOCKET_MSG_RECV:
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
    	/* Start post processing. */
    	if (msg_recv->s16BufferSize > 0) {
    f14a:	2304      	movs	r3, #4
    f14c:	5ed1      	ldrsh	r1, [r2, r3]
    f14e:	2900      	cmp	r1, #0
    f150:	dd03      	ble.n	f15a <http_client_socket_event_handler+0xc6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    f152:	0020      	movs	r0, r4
    f154:	4b3c      	ldr	r3, [pc, #240]	; (f248 <http_client_socket_event_handler+0x1b4>)
    f156:	4798      	blx	r3
    f158:	e02f      	b.n	f1ba <http_client_socket_event_handler+0x126>
/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
	switch (err) {
    f15a:	000b      	movs	r3, r1
    f15c:	330e      	adds	r3, #14
    f15e:	b29a      	uxth	r2, r3
    f160:	2a0e      	cmp	r2, #14
    f162:	d81e      	bhi.n	f1a2 <http_client_socket_event_handler+0x10e>
    f164:	0093      	lsls	r3, r2, #2
    f166:	4a39      	ldr	r2, [pc, #228]	; (f24c <http_client_socket_event_handler+0x1b8>)
    f168:	58d3      	ldr	r3, [r2, r3]
    f16a:	469f      	mov	pc, r3
		case 0:
			return -EIO;
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
    f16c:	2102      	movs	r1, #2
    f16e:	4249      	negs	r1, r1
    f170:	e020      	b.n	f1b4 <http_client_socket_event_handler+0x120>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
    f172:	2170      	movs	r1, #112	; 0x70
    f174:	4249      	negs	r1, r1
    f176:	e01d      	b.n	f1b4 <http_client_socket_event_handler+0x120>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
    f178:	210c      	movs	r1, #12
    f17a:	4249      	negs	r1, r1
    f17c:	e01a      	b.n	f1b4 <http_client_socket_event_handler+0x120>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
    f17e:	2116      	movs	r1, #22
    f180:	4249      	negs	r1, r1
    f182:	e017      	b.n	f1b4 <http_client_socket_event_handler+0x120>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
    f184:	210c      	movs	r1, #12
    f186:	4249      	negs	r1, r1
    f188:	e014      	b.n	f1b4 <http_client_socket_event_handler+0x120>
		case SOCK_ERR_INVALID:
			return -EIO;
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
    f18a:	2179      	movs	r1, #121	; 0x79
    f18c:	4249      	negs	r1, r1
    f18e:	e011      	b.n	f1b4 <http_client_socket_event_handler+0x120>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
    f190:	2168      	movs	r1, #104	; 0x68
    f192:	4249      	negs	r1, r1
    f194:	e00e      	b.n	f1b4 <http_client_socket_event_handler+0x120>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
    f196:	210b      	movs	r1, #11
    f198:	4249      	negs	r1, r1
    f19a:	e00b      	b.n	f1b4 <http_client_socket_event_handler+0x120>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
    f19c:	2110      	movs	r1, #16
    f19e:	4249      	negs	r1, r1
    f1a0:	e008      	b.n	f1b4 <http_client_socket_event_handler+0x120>
		default:
			if (err < 0) {
    f1a2:	2900      	cmp	r1, #0
    f1a4:	db04      	blt.n	f1b0 <http_client_socket_event_handler+0x11c>
				return -EIO;
			}
			return 0;
    f1a6:	2100      	movs	r1, #0
    f1a8:	e004      	b.n	f1b4 <http_client_socket_event_handler+0x120>
 */
static inline int _hwerr_to_stderr(int err)
{
	switch (err) {
		case 0:
			return -EIO;
    f1aa:	2105      	movs	r1, #5
    f1ac:	4249      	negs	r1, r1
    f1ae:	e001      	b.n	f1b4 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
		default:
			if (err < 0) {
				return -EIO;
    f1b0:	2105      	movs	r1, #5
    f1b2:	4249      	negs	r1, r1
    	/* Start post processing. */
    	if (msg_recv->s16BufferSize > 0) {
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
		} else {
			/* Socket was occurred errors. Close this session. */
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    f1b4:	0020      	movs	r0, r4
    f1b6:	4b20      	ldr	r3, [pc, #128]	; (f238 <http_client_socket_event_handler+0x1a4>)
    f1b8:	4798      	blx	r3
		}
		/* COntinue to receive the packet. */
		_http_client_recv_packet(module);
    f1ba:	0020      	movs	r0, r4
    f1bc:	4b20      	ldr	r3, [pc, #128]	; (f240 <http_client_socket_event_handler+0x1ac>)
    f1be:	4798      	blx	r3
		break;
    f1c0:	e034      	b.n	f22c <http_client_socket_event_handler+0x198>
	case SOCKET_MSG_SEND:
		send_ret = *(int16_t*)msg_data;
    f1c2:	2300      	movs	r3, #0
    f1c4:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    f1c6:	2b00      	cmp	r3, #0
    f1c8:	da28      	bge.n	f21c <http_client_socket_event_handler+0x188>
/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
	switch (err) {
    f1ca:	330e      	adds	r3, #14
    f1cc:	b29a      	uxth	r2, r3
    f1ce:	2a0d      	cmp	r2, #13
    f1d0:	d81e      	bhi.n	f210 <http_client_socket_event_handler+0x17c>
    f1d2:	0093      	lsls	r3, r2, #2
    f1d4:	4a1e      	ldr	r2, [pc, #120]	; (f250 <http_client_socket_event_handler+0x1bc>)
    f1d6:	58d3      	ldr	r3, [r2, r3]
    f1d8:	469f      	mov	pc, r3
		case 0:
			return -EIO;
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
    f1da:	2102      	movs	r1, #2
    f1dc:	4249      	negs	r1, r1
    f1de:	e019      	b.n	f214 <http_client_socket_event_handler+0x180>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
    f1e0:	2170      	movs	r1, #112	; 0x70
    f1e2:	4249      	negs	r1, r1
    f1e4:	e016      	b.n	f214 <http_client_socket_event_handler+0x180>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
    f1e6:	210c      	movs	r1, #12
    f1e8:	4249      	negs	r1, r1
    f1ea:	e013      	b.n	f214 <http_client_socket_event_handler+0x180>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
    f1ec:	2116      	movs	r1, #22
    f1ee:	4249      	negs	r1, r1
    f1f0:	e010      	b.n	f214 <http_client_socket_event_handler+0x180>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
    f1f2:	210c      	movs	r1, #12
    f1f4:	4249      	negs	r1, r1
    f1f6:	e00d      	b.n	f214 <http_client_socket_event_handler+0x180>
		case SOCK_ERR_INVALID:
			return -EIO;
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
    f1f8:	2179      	movs	r1, #121	; 0x79
    f1fa:	4249      	negs	r1, r1
    f1fc:	e00a      	b.n	f214 <http_client_socket_event_handler+0x180>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
    f1fe:	2168      	movs	r1, #104	; 0x68
    f200:	4249      	negs	r1, r1
    f202:	e007      	b.n	f214 <http_client_socket_event_handler+0x180>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
    f204:	210b      	movs	r1, #11
    f206:	4249      	negs	r1, r1
    f208:	e004      	b.n	f214 <http_client_socket_event_handler+0x180>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
    f20a:	2110      	movs	r1, #16
    f20c:	4249      	negs	r1, r1
    f20e:	e001      	b.n	f214 <http_client_socket_event_handler+0x180>
 */
static inline int _hwerr_to_stderr(int err)
{
	switch (err) {
		case 0:
			return -EIO;
    f210:	2105      	movs	r1, #5
    f212:	4249      	negs	r1, r1
		break;
	case SOCKET_MSG_SEND:
		send_ret = *(int16_t*)msg_data;
		if (send_ret < 0) {
			/* Send failed. */
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    f214:	0020      	movs	r0, r4
    f216:	4b08      	ldr	r3, [pc, #32]	; (f238 <http_client_socket_event_handler+0x1a4>)
    f218:	4798      	blx	r3
    f21a:	e002      	b.n	f222 <http_client_socket_event_handler+0x18e>
		} else {
			/* Try to check the FSM. */
    		_http_client_request(module);
    f21c:	0020      	movs	r0, r4
    f21e:	4b09      	ldr	r3, [pc, #36]	; (f244 <http_client_socket_event_handler+0x1b0>)
    f220:	4798      	blx	r3
		}
		/* Disable sending flag. */
		module->sending = 0;
    f222:	2241      	movs	r2, #65	; 0x41
    f224:	5ca3      	ldrb	r3, [r4, r2]
    f226:	2101      	movs	r1, #1
    f228:	438b      	bics	r3, r1
    f22a:	54a3      	strb	r3, [r4, r2]
    	break;
	default:
		break;
	}

}
    f22c:	b004      	add	sp, #16
    f22e:	bd10      	pop	{r4, pc}
    f230:	20000100 	.word	0x20000100
    f234:	00014064 	.word	0x00014064
    f238:	0000e3b9 	.word	0x0000e3b9
    f23c:	0000f401 	.word	0x0000f401
    f240:	0000ebed 	.word	0x0000ebed
    f244:	0000e4d1 	.word	0x0000e4d1
    f248:	0000f065 	.word	0x0000f065
    f24c:	000140a0 	.word	0x000140a0
    f250:	000140dc 	.word	0x000140dc

0000f254 <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    f254:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    f256:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    f258:	2200      	movs	r2, #0
    f25a:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    f25c:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    f25e:	9b00      	ldr	r3, [sp, #0]
    f260:	60c3      	str	r3, [r0, #12]
}
    f262:	4770      	bx	lr

0000f264 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    f264:	b510      	push	{r4, lr}
    f266:	0004      	movs	r4, r0
	if(writer->written > 0) {
    f268:	6842      	ldr	r2, [r0, #4]
    f26a:	2a00      	cmp	r2, #0
    f26c:	d005      	beq.n	f27a <stream_writer_send_remain+0x16>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    f26e:	6901      	ldr	r1, [r0, #16]
    f270:	68c0      	ldr	r0, [r0, #12]
    f272:	68a3      	ldr	r3, [r4, #8]
    f274:	4798      	blx	r3
		writer->written = 0;
    f276:	2300      	movs	r3, #0
    f278:	6063      	str	r3, [r4, #4]
	}
}
    f27a:	bd10      	pop	{r4, pc}

0000f27c <stream_writer_send_8>:
	writer->write_func = func;
	writer->priv_data = priv_data;
}

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    f27c:	b570      	push	{r4, r5, r6, lr}
    f27e:	0004      	movs	r4, r0
    f280:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;

	if (remain < 1) {
    f282:	6803      	ldr	r3, [r0, #0]
    f284:	6842      	ldr	r2, [r0, #4]
    f286:	1a9b      	subs	r3, r3, r2
    f288:	2b00      	cmp	r3, #0
    f28a:	dc01      	bgt.n	f290 <stream_writer_send_8+0x14>
		stream_writer_send_remain(writer);
    f28c:	4b03      	ldr	r3, [pc, #12]	; (f29c <stream_writer_send_8+0x20>)
    f28e:	4798      	blx	r3
	}

	writer->buffer[writer->written++] = (char)value;
    f290:	6922      	ldr	r2, [r4, #16]
    f292:	6863      	ldr	r3, [r4, #4]
    f294:	1c59      	adds	r1, r3, #1
    f296:	6061      	str	r1, [r4, #4]
    f298:	54d5      	strb	r5, [r2, r3]
}
    f29a:	bd70      	pop	{r4, r5, r6, pc}
    f29c:	0000f265 	.word	0x0000f265

0000f2a0 <stream_writer_send_16BE>:

void stream_writer_send_16BE(struct stream_writer * writer, int16_t value)
{
    f2a0:	b570      	push	{r4, r5, r6, lr}
    f2a2:	0006      	movs	r6, r0
    f2a4:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    f2a6:	1209      	asrs	r1, r1, #8
    f2a8:	4d02      	ldr	r5, [pc, #8]	; (f2b4 <stream_writer_send_16BE+0x14>)
    f2aa:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    f2ac:	b261      	sxtb	r1, r4
    f2ae:	0030      	movs	r0, r6
    f2b0:	47a8      	blx	r5
}
    f2b2:	bd70      	pop	{r4, r5, r6, pc}
    f2b4:	0000f27d 	.word	0x0000f27d

0000f2b8 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, char *buffer, size_t length)
{
    f2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f2ba:	0006      	movs	r6, r0
    f2bc:	000d      	movs	r5, r1
    f2be:	1e14      	subs	r4, r2, #0
	for (; length > 0; length--, buffer++) {
    f2c0:	d008      	beq.n	f2d4 <stream_writer_send_buffer+0x1c>
		stream_writer_send_8(writer, *buffer);
    f2c2:	4f05      	ldr	r7, [pc, #20]	; (f2d8 <stream_writer_send_buffer+0x20>)
    f2c4:	2100      	movs	r1, #0
    f2c6:	5669      	ldrsb	r1, [r5, r1]
    f2c8:	0030      	movs	r0, r6
    f2ca:	47b8      	blx	r7
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, char *buffer, size_t length)
{
	for (; length > 0; length--, buffer++) {
    f2cc:	3c01      	subs	r4, #1
    f2ce:	3501      	adds	r5, #1
    f2d0:	2c00      	cmp	r4, #0
    f2d2:	d1f7      	bne.n	f2c4 <stream_writer_send_buffer+0xc>
		stream_writer_send_8(writer, *buffer);
	}
}
    f2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f2d6:	46c0      	nop			; (mov r8, r8)
    f2d8:	0000f27d 	.word	0x0000f27d

0000f2dc <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    f2dc:	4a02      	ldr	r2, [pc, #8]	; (f2e8 <sw_timer_tcc_callback+0xc>)
    f2de:	6813      	ldr	r3, [r2, #0]
    f2e0:	3301      	adds	r3, #1
    f2e2:	6013      	str	r3, [r2, #0]
}
    f2e4:	4770      	bx	lr
    f2e6:	46c0      	nop			; (mov r8, r8)
    f2e8:	2000011c 	.word	0x2000011c

0000f2ec <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    f2ec:	2364      	movs	r3, #100	; 0x64
    f2ee:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    f2f0:	2300      	movs	r3, #0
    f2f2:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    f2f4:	7043      	strb	r3, [r0, #1]
}
    f2f6:	4770      	bx	lr

0000f2f8 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    f2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2fa:	4647      	mov	r7, r8
    f2fc:	b480      	push	{r7}
    f2fe:	b0ac      	sub	sp, #176	; 0xb0
    f300:	000d      	movs	r5, r1
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    f302:	466e      	mov	r6, sp
    f304:	4b1d      	ldr	r3, [pc, #116]	; (f37c <sw_timer_init+0x84>)
    f306:	466a      	mov	r2, sp
    f308:	cb92      	ldmia	r3!, {r1, r4, r7}
    f30a:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    f30c:	886b      	ldrh	r3, [r5, #2]
    f30e:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    f310:	3014      	adds	r0, #20
    f312:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    f314:	782b      	ldrb	r3, [r5, #0]
    f316:	009b      	lsls	r3, r3, #2
    f318:	5999      	ldr	r1, [r3, r6]
    f31a:	0017      	movs	r7, r2
    f31c:	0010      	movs	r0, r2
    f31e:	4b18      	ldr	r3, [pc, #96]	; (f380 <sw_timer_init+0x88>)
    f320:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    f322:	2000      	movs	r0, #0
    f324:	4b17      	ldr	r3, [pc, #92]	; (f384 <sw_timer_init+0x8c>)
    f326:	4798      	blx	r3
    f328:	4b17      	ldr	r3, [pc, #92]	; (f388 <sw_timer_init+0x90>)
    f32a:	7a1b      	ldrb	r3, [r3, #8]
    f32c:	b2db      	uxtb	r3, r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    f32e:	40d8      	lsrs	r0, r3
    f330:	4680      	mov	r8, r0
    f332:	8869      	ldrh	r1, [r5, #2]
    f334:	20fa      	movs	r0, #250	; 0xfa
    f336:	0200      	lsls	r0, r0, #8
    f338:	4b14      	ldr	r3, [pc, #80]	; (f38c <sw_timer_init+0x94>)
    f33a:	4798      	blx	r3
    f33c:	0001      	movs	r1, r0
    f33e:	4640      	mov	r0, r8
    f340:	4b13      	ldr	r3, [pc, #76]	; (f390 <sw_timer_init+0x98>)
    f342:	4798      	blx	r3
    f344:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    f346:	2305      	movs	r3, #5
    f348:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    f34a:	782b      	ldrb	r3, [r5, #0]
    f34c:	009b      	lsls	r3, r3, #2
    f34e:	5999      	ldr	r1, [r3, r6]
    f350:	003a      	movs	r2, r7
    f352:	0020      	movs	r0, r4
    f354:	4b0f      	ldr	r3, [pc, #60]	; (f394 <sw_timer_init+0x9c>)
    f356:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    f358:	786a      	ldrb	r2, [r5, #1]
    f35a:	3208      	adds	r2, #8
    f35c:	b2d2      	uxtb	r2, r2
    f35e:	490e      	ldr	r1, [pc, #56]	; (f398 <sw_timer_init+0xa0>)
    f360:	0020      	movs	r0, r4
    f362:	4b0e      	ldr	r3, [pc, #56]	; (f39c <sw_timer_init+0xa4>)
    f364:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    f366:	7869      	ldrb	r1, [r5, #1]
    f368:	3108      	adds	r1, #8
    f36a:	b2c9      	uxtb	r1, r1
    f36c:	0020      	movs	r0, r4
    f36e:	4b0c      	ldr	r3, [pc, #48]	; (f3a0 <sw_timer_init+0xa8>)
    f370:	4798      	blx	r3
}
    f372:	b02c      	add	sp, #176	; 0xb0
    f374:	bc04      	pop	{r2}
    f376:	4690      	mov	r8, r2
    f378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f37a:	46c0      	nop			; (mov r8, r8)
    f37c:	0001424c 	.word	0x0001424c
    f380:	0000da75 	.word	0x0000da75
    f384:	0000d7dd 	.word	0x0000d7dd
    f388:	40000400 	.word	0x40000400
    f38c:	00011469 	.word	0x00011469
    f390:	00011355 	.word	0x00011355
    f394:	0000dbc1 	.word	0x0000dbc1
    f398:	0000f2dd 	.word	0x0000f2dd
    f39c:	0000dfb1 	.word	0x0000dfb1
    f3a0:	0000dfc9 	.word	0x0000dfc9

0000f3a4 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    f3a4:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    f3a6:	2102      	movs	r1, #2
    f3a8:	6893      	ldr	r3, [r2, #8]
    f3aa:	4219      	tst	r1, r3
    f3ac:	d1fc      	bne.n	f3a8 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    f3ae:	6811      	ldr	r1, [r2, #0]
    f3b0:	2302      	movs	r3, #2
    f3b2:	430b      	orrs	r3, r1
    f3b4:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    f3b6:	4770      	bx	lr

0000f3b8 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    f3b8:	b570      	push	{r4, r5, r6, lr}
    f3ba:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    f3bc:	7805      	ldrb	r5, [r0, #0]
    f3be:	07e8      	lsls	r0, r5, #31
    f3c0:	d410      	bmi.n	f3e4 <sw_timer_register_callback+0x2c>
			handler = &module_inst->handler[index];
			handler->callback = callback;
    f3c2:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    f3c4:	0029      	movs	r1, r5
    f3c6:	2002      	movs	r0, #2
    f3c8:	4381      	bics	r1, r0
    f3ca:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    f3cc:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    f3ce:	6d61      	ldr	r1, [r4, #84]	; 0x54
    f3d0:	0018      	movs	r0, r3
    f3d2:	4b06      	ldr	r3, [pc, #24]	; (f3ec <sw_timer_register_callback+0x34>)
    f3d4:	4798      	blx	r3
    f3d6:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    f3d8:	7822      	ldrb	r2, [r4, #0]
    f3da:	2301      	movs	r3, #1
    f3dc:	4313      	orrs	r3, r2
    f3de:	7023      	strb	r3, [r4, #0]
			return index;
    f3e0:	2000      	movs	r0, #0
    f3e2:	e001      	b.n	f3e8 <sw_timer_register_callback+0x30>
		}
	}

	return -1;
    f3e4:	2001      	movs	r0, #1
    f3e6:	4240      	negs	r0, r0
}
    f3e8:	bd70      	pop	{r4, r5, r6, pc}
    f3ea:	46c0      	nop			; (mov r8, r8)
    f3ec:	00011355 	.word	0x00011355

0000f3f0 <sw_timer_unregister_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->used = 0;
    f3f0:	008b      	lsls	r3, r1, #2
    f3f2:	1859      	adds	r1, r3, r1
    f3f4:	0089      	lsls	r1, r1, #2
    f3f6:	5c0b      	ldrb	r3, [r1, r0]
    f3f8:	2201      	movs	r2, #1
    f3fa:	4393      	bics	r3, r2
    f3fc:	540b      	strb	r3, [r1, r0]
}
    f3fe:	4770      	bx	lr

0000f400 <sw_timer_enable_callback>:

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    f400:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    f402:	008c      	lsls	r4, r1, #2
    f404:	1863      	adds	r3, r4, r1
    f406:	009b      	lsls	r3, r3, #2
    f408:	5c1e      	ldrb	r6, [r3, r0]
    f40a:	2502      	movs	r5, #2
    f40c:	4335      	orrs	r5, r6
    f40e:	541d      	strb	r5, [r3, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    f410:	18c4      	adds	r4, r0, r3
    f412:	6d41      	ldr	r1, [r0, #84]	; 0x54
    f414:	0010      	movs	r0, r2
    f416:	4b03      	ldr	r3, [pc, #12]	; (f424 <sw_timer_enable_callback+0x24>)
    f418:	4798      	blx	r3
    f41a:	4b03      	ldr	r3, [pc, #12]	; (f428 <sw_timer_enable_callback+0x28>)
    f41c:	681b      	ldr	r3, [r3, #0]
    f41e:	18c0      	adds	r0, r0, r3
    f420:	6120      	str	r0, [r4, #16]
}
    f422:	bd70      	pop	{r4, r5, r6, pc}
    f424:	00011355 	.word	0x00011355
    f428:	2000011c 	.word	0x2000011c

0000f42c <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    f42c:	008b      	lsls	r3, r1, #2
    f42e:	1859      	adds	r1, r3, r1
    f430:	0089      	lsls	r1, r1, #2
    f432:	5c0b      	ldrb	r3, [r1, r0]
    f434:	2202      	movs	r2, #2
    f436:	4393      	bics	r3, r2
    f438:	540b      	strb	r3, [r1, r0]
}
    f43a:	4770      	bx	lr

0000f43c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    f43c:	b570      	push	{r4, r5, r6, lr}
    f43e:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    f440:	7803      	ldrb	r3, [r0, #0]
    f442:	07db      	lsls	r3, r3, #31
    f444:	d523      	bpl.n	f48e <sw_timer_task+0x52>
    f446:	7803      	ldrb	r3, [r0, #0]
    f448:	079b      	lsls	r3, r3, #30
    f44a:	d520      	bpl.n	f48e <sw_timer_task+0x52>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    f44c:	4b10      	ldr	r3, [pc, #64]	; (f490 <sw_timer_task+0x54>)
    f44e:	681b      	ldr	r3, [r3, #0]
    f450:	6902      	ldr	r2, [r0, #16]
    f452:	1ad3      	subs	r3, r2, r3
    f454:	d51b      	bpl.n	f48e <sw_timer_task+0x52>
    f456:	7803      	ldrb	r3, [r0, #0]
    f458:	075b      	lsls	r3, r3, #29
    f45a:	d418      	bmi.n	f48e <sw_timer_task+0x52>
				/* Enter critical section. */
				handler->busy = 1;
    f45c:	7802      	ldrb	r2, [r0, #0]
    f45e:	2304      	movs	r3, #4
    f460:	4313      	orrs	r3, r2
    f462:	7003      	strb	r3, [r0, #0]
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    f464:	68c3      	ldr	r3, [r0, #12]
    f466:	6882      	ldr	r2, [r0, #8]
    f468:	2100      	movs	r1, #0
    f46a:	6845      	ldr	r5, [r0, #4]
    f46c:	47a8      	blx	r5
				/* Timer was expired. */
				if (handler->period > 0) {
    f46e:	68e3      	ldr	r3, [r4, #12]
    f470:	2b00      	cmp	r3, #0
    f472:	d004      	beq.n	f47e <sw_timer_task+0x42>
					handler->expire_time = sw_timer_tick + handler->period;
    f474:	4a06      	ldr	r2, [pc, #24]	; (f490 <sw_timer_task+0x54>)
    f476:	6812      	ldr	r2, [r2, #0]
    f478:	18d3      	adds	r3, r2, r3
    f47a:	6123      	str	r3, [r4, #16]
    f47c:	e003      	b.n	f486 <sw_timer_task+0x4a>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    f47e:	7823      	ldrb	r3, [r4, #0]
    f480:	2202      	movs	r2, #2
    f482:	4393      	bics	r3, r2
    f484:	7023      	strb	r3, [r4, #0]
				}
				/* Leave critical section. */
				handler->busy = 0;
    f486:	7823      	ldrb	r3, [r4, #0]
    f488:	2204      	movs	r2, #4
    f48a:	4393      	bics	r3, r2
    f48c:	7023      	strb	r3, [r4, #0]
			}
		}
	}

}
    f48e:	bd70      	pop	{r4, r5, r6, pc}
    f490:	2000011c 	.word	0x2000011c

0000f494 <uart_callback>:
 * \param[in] module USART module structure.
 */
static void uart_callback(const struct usart_module *const module)
{
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    f494:	4b03      	ldr	r3, [pc, #12]	; (f4a4 <uart_callback+0x10>)
    f496:	681b      	ldr	r3, [r3, #0]
    f498:	2b3f      	cmp	r3, #63	; 0x3f
    f49a:	dc02      	bgt.n	f4a2 <uart_callback+0xe>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    f49c:	3301      	adds	r3, #1
    f49e:	4a01      	ldr	r2, [pc, #4]	; (f4a4 <uart_callback+0x10>)
    f4a0:	6013      	str	r3, [r2, #0]
	}
}
    f4a2:	4770      	bx	lr
    f4a4:	2000015c 	.word	0x2000015c

0000f4a8 <resolve_cb>:
{
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
}

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    f4a8:	b570      	push	{r4, r5, r6, lr}
    f4aa:	b082      	sub	sp, #8
    f4ac:	0005      	movs	r5, r0
    f4ae:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    f4b0:	0a0b      	lsrs	r3, r1, #8
    f4b2:	20ff      	movs	r0, #255	; 0xff
    f4b4:	4003      	ands	r3, r0
    f4b6:	0002      	movs	r2, r0
    f4b8:	400a      	ands	r2, r1
    f4ba:	0e09      	lsrs	r1, r1, #24
    f4bc:	9101      	str	r1, [sp, #4]
    f4be:	0c21      	lsrs	r1, r4, #16
    f4c0:	4001      	ands	r1, r0
    f4c2:	9100      	str	r1, [sp, #0]
    f4c4:	0029      	movs	r1, r5
    f4c6:	4804      	ldr	r0, [pc, #16]	; (f4d8 <resolve_cb+0x30>)
    f4c8:	4e04      	ldr	r6, [pc, #16]	; (f4dc <resolve_cb+0x34>)
    f4ca:	47b0      	blx	r6
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    f4cc:	0021      	movs	r1, r4
    f4ce:	0028      	movs	r0, r5
    f4d0:	4b03      	ldr	r3, [pc, #12]	; (f4e0 <resolve_cb+0x38>)
    f4d2:	4798      	blx	r3
}
    f4d4:	b002      	add	sp, #8
    f4d6:	bd70      	pop	{r4, r5, r6, pc}
    f4d8:	0001427c 	.word	0x0001427c
    f4dc:	0001189d 	.word	0x0001189d
    f4e0:	0000e441 	.word	0x0000e441

0000f4e4 <socket_cb>:

		break;
	}
}
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    f4e4:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    f4e6:	4b01      	ldr	r3, [pc, #4]	; (f4ec <socket_cb+0x8>)
    f4e8:	4798      	blx	r3
}
    f4ea:	bd10      	pop	{r4, pc}
    f4ec:	0000f095 	.word	0x0000f095

0000f4f0 <start_download>:
	at25dfx_chip_write_buffer(&at25dfx_chip, flash_addr, http_buf + http_buf_read_ptr, len);	// write buffer
	at25dfx_chip_sleep(&at25dfx_chip);											// back to sleep
	flash_addr = flash_addr + len;
}
static void start_download(void)
{
    f4f0:	b510      	push	{r4, lr}
    f4f2:	b082      	sub	sp, #8
	down_state |= mask;
}

static inline bool is_state_set(download_state mask)
{
	return ((down_state & mask) != 0);
    f4f4:	4b17      	ldr	r3, [pc, #92]	; (f554 <start_download+0x64>)
    f4f6:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
		printf("start_download: Flash not initialized.\r\n");
		return;
	}
	*/
	if (!is_state_set(WIFI_CONNECTED)) {
    f4f8:	079a      	lsls	r2, r3, #30
    f4fa:	d403      	bmi.n	f504 <start_download+0x14>
		printf("start_download: Wi-Fi is not connected.\r\n");
    f4fc:	4816      	ldr	r0, [pc, #88]	; (f558 <start_download+0x68>)
    f4fe:	4b17      	ldr	r3, [pc, #92]	; (f55c <start_download+0x6c>)
    f500:	4798      	blx	r3
		return;
    f502:	e024      	b.n	f54e <start_download+0x5e>
	}

	if (is_state_set(GET_REQUESTED)) {
    f504:	075a      	lsls	r2, r3, #29
    f506:	d503      	bpl.n	f510 <start_download+0x20>
		printf("start_download: request is sent already.\r\n");
    f508:	4815      	ldr	r0, [pc, #84]	; (f560 <start_download+0x70>)
    f50a:	4b14      	ldr	r3, [pc, #80]	; (f55c <start_download+0x6c>)
    f50c:	4798      	blx	r3
		return;
    f50e:	e01e      	b.n	f54e <start_download+0x5e>
	}

	if (is_state_set(DOWNLOADING)) {
    f510:	071b      	lsls	r3, r3, #28
    f512:	d503      	bpl.n	f51c <start_download+0x2c>
		printf("start_download: running download already.\r\n");
    f514:	4813      	ldr	r0, [pc, #76]	; (f564 <start_download+0x74>)
    f516:	4b11      	ldr	r3, [pc, #68]	; (f55c <start_download+0x6c>)
    f518:	4798      	blx	r3
		return;
    f51a:	e018      	b.n	f54e <start_download+0x5e>
	}

	/* Send the HTTP request. */
	if(download_CRC == false){
    f51c:	4b12      	ldr	r3, [pc, #72]	; (f568 <start_download+0x78>)
    f51e:	781b      	ldrb	r3, [r3, #0]
    f520:	2b00      	cmp	r3, #0
    f522:	d10a      	bne.n	f53a <start_download+0x4a>
		printf("start_download: sending HTTP request...\r\n");
    f524:	4811      	ldr	r0, [pc, #68]	; (f56c <start_download+0x7c>)
    f526:	4b0d      	ldr	r3, [pc, #52]	; (f55c <start_download+0x6c>)
    f528:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    f52a:	2300      	movs	r3, #0
    f52c:	9300      	str	r3, [sp, #0]
    f52e:	2201      	movs	r2, #1
    f530:	490f      	ldr	r1, [pc, #60]	; (f570 <start_download+0x80>)
    f532:	4810      	ldr	r0, [pc, #64]	; (f574 <start_download+0x84>)
    f534:	4c10      	ldr	r4, [pc, #64]	; (f578 <start_download+0x88>)
    f536:	47a0      	blx	r4
    f538:	e009      	b.n	f54e <start_download+0x5e>
	} else{
		printf("start_download CRC: sending HTTP request...\r\n");
    f53a:	4810      	ldr	r0, [pc, #64]	; (f57c <start_download+0x8c>)
    f53c:	4b07      	ldr	r3, [pc, #28]	; (f55c <start_download+0x6c>)
    f53e:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_CRC_URL, HTTP_METHOD_GET, NULL, NULL);
    f540:	2300      	movs	r3, #0
    f542:	9300      	str	r3, [sp, #0]
    f544:	2201      	movs	r2, #1
    f546:	490e      	ldr	r1, [pc, #56]	; (f580 <start_download+0x90>)
    f548:	480a      	ldr	r0, [pc, #40]	; (f574 <start_download+0x84>)
    f54a:	4c0b      	ldr	r4, [pc, #44]	; (f578 <start_download+0x88>)
    f54c:	47a0      	blx	r4
	}
	
}
    f54e:	b002      	add	sp, #8
    f550:	bd10      	pop	{r4, pc}
    f552:	46c0      	nop			; (mov r8, r8)
    f554:	20000154 	.word	0x20000154
    f558:	000142ac 	.word	0x000142ac
    f55c:	000119bd 	.word	0x000119bd
    f560:	000142d8 	.word	0x000142d8
    f564:	00014304 	.word	0x00014304
    f568:	20000162 	.word	0x20000162
    f56c:	00014330 	.word	0x00014330
    f570:	0001435c 	.word	0x0001435c
    f574:	20000ccc 	.word	0x20000ccc
    f578:	0000e989 	.word	0x0000e989
    f57c:	00014388 	.word	0x00014388
    f580:	000143b8 	.word	0x000143b8

0000f584 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    f584:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    f586:	4b01      	ldr	r3, [pc, #4]	; (f58c <socket_resolve_handler+0x8>)
    f588:	4798      	blx	r3
}
    f58a:	bd10      	pop	{r4, pc}
    f58c:	000106a1 	.word	0x000106a1

0000f590 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    f590:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    f592:	4b01      	ldr	r3, [pc, #4]	; (f598 <socket_event_handler+0x8>)
    f594:	4798      	blx	r3
}
    f596:	bd10      	pop	{r4, pc}
    f598:	00011241 	.word	0x00011241

0000f59c <wifi_callback>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_callback(uint8 msg_type, void *msg_data)
{
    f59c:	b510      	push	{r4, lr}
    f59e:	b082      	sub	sp, #8
	tstrM2mWifiStateChanged *msg_wifi_state;
	uint8 *msg_ip_addr;

	switch (msg_type) {
    f5a0:	282c      	cmp	r0, #44	; 0x2c
    f5a2:	d002      	beq.n	f5aa <wifi_callback+0xe>
    f5a4:	2832      	cmp	r0, #50	; 0x32
    f5a6:	d01b      	beq.n	f5e0 <wifi_callback+0x44>
    f5a8:	e027      	b.n	f5fa <wifi_callback+0x5e>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
		msg_wifi_state = (tstrM2mWifiStateChanged *)msg_data;
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    f5aa:	780b      	ldrb	r3, [r1, #0]
    f5ac:	2b01      	cmp	r3, #1
    f5ae:	d105      	bne.n	f5bc <wifi_callback+0x20>
			/* If Wi-Fi is connected. */
			printf("Wi-Fi connected\r\n");
    f5b0:	4813      	ldr	r0, [pc, #76]	; (f600 <wifi_callback+0x64>)
    f5b2:	4b14      	ldr	r3, [pc, #80]	; (f604 <wifi_callback+0x68>)
    f5b4:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    f5b6:	4b14      	ldr	r3, [pc, #80]	; (f608 <wifi_callback+0x6c>)
    f5b8:	4798      	blx	r3
    f5ba:	e01e      	b.n	f5fa <wifi_callback+0x5e>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    f5bc:	2b00      	cmp	r3, #0
    f5be:	d11c      	bne.n	f5fa <wifi_callback+0x5e>
			/* If Wi-Fi is disconnected. */
			printf("Wi-Fi disconnected\r\n");
    f5c0:	4812      	ldr	r0, [pc, #72]	; (f60c <wifi_callback+0x70>)
    f5c2:	4b10      	ldr	r3, [pc, #64]	; (f604 <wifi_callback+0x68>)
    f5c4:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    f5c6:	23ff      	movs	r3, #255	; 0xff
    f5c8:	9300      	str	r3, [sp, #0]
    f5ca:	4b11      	ldr	r3, [pc, #68]	; (f610 <wifi_callback+0x74>)
    f5cc:	2202      	movs	r2, #2
    f5ce:	2116      	movs	r1, #22
    f5d0:	4810      	ldr	r0, [pc, #64]	; (f614 <wifi_callback+0x78>)
    f5d2:	4c11      	ldr	r4, [pc, #68]	; (f618 <wifi_callback+0x7c>)
    f5d4:	47a0      	blx	r4
					MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			/* Disconnect from MQTT broker. */
			/* Force close the MQTT connection, because cannot send a disconnect message to the broker when network is broken. */
			mqtt_disconnect(&mqtt_inst, 1);
    f5d6:	2101      	movs	r1, #1
    f5d8:	4810      	ldr	r0, [pc, #64]	; (f61c <wifi_callback+0x80>)
    f5da:	4b11      	ldr	r3, [pc, #68]	; (f620 <wifi_callback+0x84>)
    f5dc:	4798      	blx	r3
    f5de:	e00c      	b.n	f5fa <wifi_callback+0x5e>

		break;

	case M2M_WIFI_REQ_DHCP_CONF:
		msg_ip_addr = (uint8 *)msg_data;
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    f5e0:	788b      	ldrb	r3, [r1, #2]
    f5e2:	784a      	ldrb	r2, [r1, #1]
    f5e4:	7808      	ldrb	r0, [r1, #0]
    f5e6:	78c9      	ldrb	r1, [r1, #3]
    f5e8:	9100      	str	r1, [sp, #0]
    f5ea:	0001      	movs	r1, r0
    f5ec:	480d      	ldr	r0, [pc, #52]	; (f624 <wifi_callback+0x88>)
    f5ee:	4c0e      	ldr	r4, [pc, #56]	; (f628 <wifi_callback+0x8c>)
    f5f0:	47a0      	blx	r4
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
		/* Try to connect to MQTT broker when Wi-Fi was connected. */
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    f5f2:	490e      	ldr	r1, [pc, #56]	; (f62c <wifi_callback+0x90>)
    f5f4:	4809      	ldr	r0, [pc, #36]	; (f61c <wifi_callback+0x80>)
    f5f6:	4b0e      	ldr	r3, [pc, #56]	; (f630 <wifi_callback+0x94>)
    f5f8:	4798      	blx	r3
		break;

	default:
		break;
	}
}
    f5fa:	b002      	add	sp, #8
    f5fc:	bd10      	pop	{r4, pc}
    f5fe:	46c0      	nop			; (mov r8, r8)
    f600:	000143e8 	.word	0x000143e8
    f604:	000119bd 	.word	0x000119bd
    f608:	00009e7d 	.word	0x00009e7d
    f60c:	000143fc 	.word	0x000143fc
    f610:	00014410 	.word	0x00014410
    f614:	0001441c 	.word	0x0001441c
    f618:	00009e61 	.word	0x00009e61
    f61c:	200001e4 	.word	0x200001e4
    f620:	00010f01 	.word	0x00010f01
    f624:	00014434 	.word	0x00014434
    f628:	0001189d 	.word	0x0001189d
    f62c:	0001426c 	.word	0x0001426c
    f630:	000106f5 	.word	0x000106f5

0000f634 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    f634:	b570      	push	{r4, r5, r6, lr}
    f636:	b082      	sub	sp, #8
    f638:	0005      	movs	r5, r0
    f63a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    f63c:	2200      	movs	r2, #0
    f63e:	466b      	mov	r3, sp
    f640:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    f642:	4c06      	ldr	r4, [pc, #24]	; (f65c <usart_serial_getchar+0x28>)
    f644:	466b      	mov	r3, sp
    f646:	1d99      	adds	r1, r3, #6
    f648:	0028      	movs	r0, r5
    f64a:	47a0      	blx	r4
    f64c:	2800      	cmp	r0, #0
    f64e:	d1f9      	bne.n	f644 <usart_serial_getchar+0x10>

	*c = temp;
    f650:	466b      	mov	r3, sp
    f652:	3306      	adds	r3, #6
    f654:	881b      	ldrh	r3, [r3, #0]
    f656:	7033      	strb	r3, [r6, #0]
}
    f658:	b002      	add	sp, #8
    f65a:	bd70      	pop	{r4, r5, r6, pc}
    f65c:	0000d019 	.word	0x0000d019

0000f660 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    f660:	b570      	push	{r4, r5, r6, lr}
    f662:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    f664:	b28c      	uxth	r4, r1
    f666:	4e03      	ldr	r6, [pc, #12]	; (f674 <usart_serial_putchar+0x14>)
    f668:	0021      	movs	r1, r4
    f66a:	0028      	movs	r0, r5
    f66c:	47b0      	blx	r6
    f66e:	2800      	cmp	r0, #0
    f670:	d1fa      	bne.n	f668 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    f672:	bd70      	pop	{r4, r5, r6, pc}
    f674:	0000cfed 	.word	0x0000cfed

0000f678 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    f678:	b5f0      	push	{r4, r5, r6, r7, lr}
    f67a:	b087      	sub	sp, #28
    f67c:	0005      	movs	r5, r0
    f67e:	0014      	movs	r4, r2
	switch (type) {
    f680:	2901      	cmp	r1, #1
    f682:	d025      	beq.n	f6d0 <mqtt_callback+0x58>
    f684:	dc02      	bgt.n	f68c <mqtt_callback+0x14>
    f686:	2900      	cmp	r1, #0
    f688:	d006      	beq.n	f698 <mqtt_callback+0x20>
    f68a:	e0f7      	b.n	f87c <mqtt_callback+0x204>
    f68c:	2905      	cmp	r1, #5
    f68e:	d100      	bne.n	f692 <mqtt_callback+0x1a>
    f690:	e0eb      	b.n	f86a <mqtt_callback+0x1f2>
    f692:	2906      	cmp	r1, #6
    f694:	d04a      	beq.n	f72c <mqtt_callback+0xb4>
    f696:	e0f1      	b.n	f87c <mqtt_callback+0x204>
	{
		/*
		 * If connecting to broker server is complete successfully, Start sending CONNECT message of MQTT.
		 * Or else retry to connect to broker server.
		 */
		if (data->sock_connected.result >= 0) {
    f698:	6813      	ldr	r3, [r2, #0]
    f69a:	2b00      	cmp	r3, #0
    f69c:	db0e      	blt.n	f6bc <mqtt_callback+0x44>
			//mqtt_connect_broker(module_inst, 1, NULL, NULL, mqtt_user, NULL, NULL, 0, 0, 0);
			status = mqtt_connect_broker(module_inst, 1, mqtt_user, mqtt_pass, mqtt_user, NULL, NULL, 0, 0, 0);
    f69e:	4a78      	ldr	r2, [pc, #480]	; (f880 <mqtt_callback+0x208>)
    f6a0:	2300      	movs	r3, #0
    f6a2:	9305      	str	r3, [sp, #20]
    f6a4:	9304      	str	r3, [sp, #16]
    f6a6:	9303      	str	r3, [sp, #12]
    f6a8:	9302      	str	r3, [sp, #8]
    f6aa:	9301      	str	r3, [sp, #4]
    f6ac:	9200      	str	r2, [sp, #0]
    f6ae:	4b75      	ldr	r3, [pc, #468]	; (f884 <mqtt_callback+0x20c>)
    f6b0:	2101      	movs	r1, #1
    f6b2:	4c75      	ldr	r4, [pc, #468]	; (f888 <mqtt_callback+0x210>)
    f6b4:	47a0      	blx	r4
    f6b6:	4b75      	ldr	r3, [pc, #468]	; (f88c <mqtt_callback+0x214>)
    f6b8:	6018      	str	r0, [r3, #0]
    f6ba:	e0df      	b.n	f87c <mqtt_callback+0x204>
		} else {
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    f6bc:	4c74      	ldr	r4, [pc, #464]	; (f890 <mqtt_callback+0x218>)
    f6be:	0021      	movs	r1, r4
    f6c0:	4874      	ldr	r0, [pc, #464]	; (f894 <mqtt_callback+0x21c>)
    f6c2:	4b75      	ldr	r3, [pc, #468]	; (f898 <mqtt_callback+0x220>)
    f6c4:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    f6c6:	0021      	movs	r1, r4
    f6c8:	0028      	movs	r0, r5
    f6ca:	4b74      	ldr	r3, [pc, #464]	; (f89c <mqtt_callback+0x224>)
    f6cc:	4798      	blx	r3
    f6ce:	e0d5      	b.n	f87c <mqtt_callback+0x204>
		}
	}
	break;

	case MQTT_CALLBACK_CONNECTED:
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    f6d0:	7811      	ldrb	r1, [r2, #0]
    f6d2:	2900      	cmp	r1, #0
    f6d4:	d126      	bne.n	f724 <mqtt_callback+0xac>
			/* Subscribe chat topic. */
			printf("Trying to sub...\r\n");
    f6d6:	4872      	ldr	r0, [pc, #456]	; (f8a0 <mqtt_callback+0x228>)
    f6d8:	4f72      	ldr	r7, [pc, #456]	; (f8a4 <mqtt_callback+0x22c>)
    f6da:	47b8      	blx	r7
			status = mqtt_subscribe(module_inst, MAIN_CHAT_TOPIC, QOS);
    f6dc:	2202      	movs	r2, #2
    f6de:	4972      	ldr	r1, [pc, #456]	; (f8a8 <mqtt_callback+0x230>)
    f6e0:	0028      	movs	r0, r5
    f6e2:	4e72      	ldr	r6, [pc, #456]	; (f8ac <mqtt_callback+0x234>)
    f6e4:	47b0      	blx	r6
    f6e6:	4c69      	ldr	r4, [pc, #420]	; (f88c <mqtt_callback+0x214>)
    f6e8:	6020      	str	r0, [r4, #0]
			status = mqtt_subscribe(module_inst, ACTUATOR_TOPIC, QOS);
    f6ea:	2202      	movs	r2, #2
    f6ec:	4970      	ldr	r1, [pc, #448]	; (f8b0 <mqtt_callback+0x238>)
    f6ee:	0028      	movs	r0, r5
    f6f0:	47b0      	blx	r6
    f6f2:	6020      	str	r0, [r4, #0]
			status = mqtt_subscribe(module_inst, UPGRADE_TOPIC, QOS);
    f6f4:	2202      	movs	r2, #2
    f6f6:	496f      	ldr	r1, [pc, #444]	; (f8b4 <mqtt_callback+0x23c>)
    f6f8:	0028      	movs	r0, r5
    f6fa:	47b0      	blx	r6
    f6fc:	6020      	str	r0, [r4, #0]
			status = mqtt_subscribe(module_inst, SENSE_FL0_TOPIC, QOS);
    f6fe:	2202      	movs	r2, #2
    f700:	496d      	ldr	r1, [pc, #436]	; (f8b8 <mqtt_callback+0x240>)
    f702:	0028      	movs	r0, r5
    f704:	47b0      	blx	r6
    f706:	6020      	str	r0, [r4, #0]
			status = mqtt_subscribe(module_inst, SENSE_FL1_TOPIC, QOS);
    f708:	2202      	movs	r2, #2
    f70a:	496c      	ldr	r1, [pc, #432]	; (f8bc <mqtt_callback+0x244>)
    f70c:	0028      	movs	r0, r5
    f70e:	47b0      	blx	r6
    f710:	6020      	str	r0, [r4, #0]
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    f712:	496b      	ldr	r1, [pc, #428]	; (f8c0 <mqtt_callback+0x248>)
    f714:	2231      	movs	r2, #49	; 0x31
    f716:	5c88      	ldrb	r0, [r1, r2]
    f718:	2302      	movs	r3, #2
    f71a:	4303      	orrs	r3, r0
    f71c:	548b      	strb	r3, [r1, r2]
			//status = mqtt_subscribe(module_inst, FL0_TOPIC, QOS);
			//status = mqtt_subscribe(module_inst, FL1_TOPIC, QOS);
			/* Enable USART receiving callback. */
			usart_enable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
			printf("Subscriptions completed.\r\n");
    f71e:	4869      	ldr	r0, [pc, #420]	; (f8c4 <mqtt_callback+0x24c>)
    f720:	47b8      	blx	r7
    f722:	e0ab      	b.n	f87c <mqtt_callback+0x204>
		} else {
			/* Cannot connect for some reason. */
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    f724:	4868      	ldr	r0, [pc, #416]	; (f8c8 <mqtt_callback+0x250>)
    f726:	4b5c      	ldr	r3, [pc, #368]	; (f898 <mqtt_callback+0x220>)
    f728:	4798      	blx	r3
    f72a:	e0a7      	b.n	f87c <mqtt_callback+0x204>

		break;

	case MQTT_CALLBACK_RECV_PUBLISH:
		/* You received publish message which you had subscribed. */
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    f72c:	6810      	ldr	r0, [r2, #0]
    f72e:	2800      	cmp	r0, #0
    f730:	d100      	bne.n	f734 <mqtt_callback+0xbc>
    f732:	e0a3      	b.n	f87c <mqtt_callback+0x204>
    f734:	6893      	ldr	r3, [r2, #8]
    f736:	2b00      	cmp	r3, #0
    f738:	d100      	bne.n	f73c <mqtt_callback+0xc4>
    f73a:	e09f      	b.n	f87c <mqtt_callback+0x204>
			printf(" >> ");
			for (int i = 0; i < data->recv_publish.msg_size; i++) {
				printf("%c", data->recv_publish.msg[i]);
			}
			printf("\r\n");*/
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC))) {
    f73c:	2204      	movs	r2, #4
    f73e:	495a      	ldr	r1, [pc, #360]	; (f8a8 <mqtt_callback+0x230>)
    f740:	4b62      	ldr	r3, [pc, #392]	; (f8cc <mqtt_callback+0x254>)
    f742:	4798      	blx	r3
    f744:	2800      	cmp	r0, #0
    f746:	d11d      	bne.n	f784 <mqtt_callback+0x10c>
				/* Print user name and message */
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    f748:	6863      	ldr	r3, [r4, #4]
    f74a:	2b04      	cmp	r3, #4
    f74c:	dd08      	ble.n	f760 <mqtt_callback+0xe8>
    f74e:	2504      	movs	r5, #4
					printf("%c", data->recv_publish.topic[i]);
    f750:	4e5f      	ldr	r6, [pc, #380]	; (f8d0 <mqtt_callback+0x258>)
    f752:	6823      	ldr	r3, [r4, #0]
    f754:	5d58      	ldrb	r0, [r3, r5]
    f756:	47b0      	blx	r6
				printf("%c", data->recv_publish.msg[i]);
			}
			printf("\r\n");*/
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC))) {
				/* Print user name and message */
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    f758:	3501      	adds	r5, #1
    f75a:	6863      	ldr	r3, [r4, #4]
    f75c:	42ab      	cmp	r3, r5
    f75e:	dcf8      	bgt.n	f752 <mqtt_callback+0xda>
					printf("%c", data->recv_publish.topic[i]);
				}
				printf(" >> ");
    f760:	485c      	ldr	r0, [pc, #368]	; (f8d4 <mqtt_callback+0x25c>)
    f762:	4b4d      	ldr	r3, [pc, #308]	; (f898 <mqtt_callback+0x220>)
    f764:	4798      	blx	r3
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f766:	68e3      	ldr	r3, [r4, #12]
    f768:	2b00      	cmp	r3, #0
    f76a:	dd08      	ble.n	f77e <mqtt_callback+0x106>
    f76c:	2500      	movs	r5, #0
					printf("%c", data->recv_publish.msg[i]);
    f76e:	4e58      	ldr	r6, [pc, #352]	; (f8d0 <mqtt_callback+0x258>)
    f770:	68a3      	ldr	r3, [r4, #8]
    f772:	5d58      	ldrb	r0, [r3, r5]
    f774:	47b0      	blx	r6
				/* Print user name and message */
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
					printf("%c", data->recv_publish.topic[i]);
				}
				printf(" >> ");
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f776:	3501      	adds	r5, #1
    f778:	68e3      	ldr	r3, [r4, #12]
    f77a:	42ab      	cmp	r3, r5
    f77c:	dcf8      	bgt.n	f770 <mqtt_callback+0xf8>
					printf("%c", data->recv_publish.msg[i]);
				}
				printf("\r\n");
    f77e:	4856      	ldr	r0, [pc, #344]	; (f8d8 <mqtt_callback+0x260>)
    f780:	4b48      	ldr	r3, [pc, #288]	; (f8a4 <mqtt_callback+0x22c>)
    f782:	4798      	blx	r3
			}
			if (!strncmp(data->recv_publish.topic, ACTUATOR_TOPIC, strlen(ACTUATOR_TOPIC)) ) {
    f784:	2208      	movs	r2, #8
    f786:	494a      	ldr	r1, [pc, #296]	; (f8b0 <mqtt_callback+0x238>)
    f788:	6820      	ldr	r0, [r4, #0]
    f78a:	4b50      	ldr	r3, [pc, #320]	; (f8cc <mqtt_callback+0x254>)
    f78c:	4798      	blx	r3
    f78e:	2800      	cmp	r0, #0
    f790:	d11d      	bne.n	f7ce <mqtt_callback+0x156>
				/* Print Topic */
				printf("%s >> ", ACTUATOR_TOPIC);
    f792:	4947      	ldr	r1, [pc, #284]	; (f8b0 <mqtt_callback+0x238>)
    f794:	4851      	ldr	r0, [pc, #324]	; (f8dc <mqtt_callback+0x264>)
    f796:	4b40      	ldr	r3, [pc, #256]	; (f898 <mqtt_callback+0x220>)
    f798:	4798      	blx	r3
				//port_pin_toggle_output_level(LED_0_PIN);
				/* Print message */
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f79a:	68e3      	ldr	r3, [r4, #12]
    f79c:	2b00      	cmp	r3, #0
    f79e:	dd08      	ble.n	f7b2 <mqtt_callback+0x13a>
    f7a0:	2500      	movs	r5, #0
					printf("%c", data->recv_publish.msg[i]);
    f7a2:	4e4b      	ldr	r6, [pc, #300]	; (f8d0 <mqtt_callback+0x258>)
    f7a4:	68a3      	ldr	r3, [r4, #8]
    f7a6:	5d58      	ldrb	r0, [r3, r5]
    f7a8:	47b0      	blx	r6
			if (!strncmp(data->recv_publish.topic, ACTUATOR_TOPIC, strlen(ACTUATOR_TOPIC)) ) {
				/* Print Topic */
				printf("%s >> ", ACTUATOR_TOPIC);
				//port_pin_toggle_output_level(LED_0_PIN);
				/* Print message */
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f7aa:	3501      	adds	r5, #1
    f7ac:	68e3      	ldr	r3, [r4, #12]
    f7ae:	42ab      	cmp	r3, r5
    f7b0:	dcf8      	bgt.n	f7a4 <mqtt_callback+0x12c>
					printf("%c", data->recv_publish.msg[i]);
				}
				if (data->recv_publish.msg[0] == 't') {
    f7b2:	68a3      	ldr	r3, [r4, #8]
    f7b4:	781b      	ldrb	r3, [r3, #0]
    f7b6:	2b74      	cmp	r3, #116	; 0x74
    f7b8:	d103      	bne.n	f7c2 <mqtt_callback+0x14a>
    f7ba:	2220      	movs	r2, #32
    f7bc:	4b48      	ldr	r3, [pc, #288]	; (f8e0 <mqtt_callback+0x268>)
    f7be:	619a      	str	r2, [r3, #24]
    f7c0:	e002      	b.n	f7c8 <mqtt_callback+0x150>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    f7c2:	2220      	movs	r2, #32
    f7c4:	4b46      	ldr	r3, [pc, #280]	; (f8e0 <mqtt_callback+0x268>)
    f7c6:	615a      	str	r2, [r3, #20]
					port_pin_set_output_level(RELAY, true);
				}
				else {
					port_pin_set_output_level(RELAY, false);
				}
				printf("\r\n");
    f7c8:	4843      	ldr	r0, [pc, #268]	; (f8d8 <mqtt_callback+0x260>)
    f7ca:	4b36      	ldr	r3, [pc, #216]	; (f8a4 <mqtt_callback+0x22c>)
    f7cc:	4798      	blx	r3
			}
			if (!strncmp(data->recv_publish.topic, UPGRADE_TOPIC, strlen(UPGRADE_TOPIC)) ) {
    f7ce:	2207      	movs	r2, #7
    f7d0:	4938      	ldr	r1, [pc, #224]	; (f8b4 <mqtt_callback+0x23c>)
    f7d2:	6820      	ldr	r0, [r4, #0]
    f7d4:	4b3d      	ldr	r3, [pc, #244]	; (f8cc <mqtt_callback+0x254>)
    f7d6:	4798      	blx	r3
    f7d8:	2800      	cmp	r0, #0
    f7da:	d105      	bne.n	f7e8 <mqtt_callback+0x170>
				/* Print Topic */
				printf("Upgrade requested\r\n");
    f7dc:	4841      	ldr	r0, [pc, #260]	; (f8e4 <mqtt_callback+0x26c>)
    f7de:	4b31      	ldr	r3, [pc, #196]	; (f8a4 <mqtt_callback+0x22c>)
    f7e0:	4798      	blx	r3
				write_firmware = true;
    f7e2:	2201      	movs	r2, #1
    f7e4:	4b40      	ldr	r3, [pc, #256]	; (f8e8 <mqtt_callback+0x270>)
    f7e6:	701a      	strb	r2, [r3, #0]
			}
			if (!strncmp(data->recv_publish.topic, SENSE_FL0_TOPIC, strlen(SENSE_FL0_TOPIC)) ) {
    f7e8:	2208      	movs	r2, #8
    f7ea:	4933      	ldr	r1, [pc, #204]	; (f8b8 <mqtt_callback+0x240>)
    f7ec:	6820      	ldr	r0, [r4, #0]
    f7ee:	4b37      	ldr	r3, [pc, #220]	; (f8cc <mqtt_callback+0x254>)
    f7f0:	4798      	blx	r3
    f7f2:	2800      	cmp	r0, #0
    f7f4:	d118      	bne.n	f828 <mqtt_callback+0x1b0>
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    f7f6:	4b3d      	ldr	r3, [pc, #244]	; (f8ec <mqtt_callback+0x274>)
    f7f8:	6a1b      	ldr	r3, [r3, #32]
				/* Print Topic */
				int sensed = !port_pin_get_input_level(FL0);
    f7fa:	0d9b      	lsrs	r3, r3, #22
    f7fc:	2601      	movs	r6, #1
    f7fe:	0037      	movs	r7, r6
    f800:	439f      	bics	r7, r3
				sprintf(pub_text, "%d", sensed);
    f802:	4d3b      	ldr	r5, [pc, #236]	; (f8f0 <mqtt_callback+0x278>)
    f804:	003a      	movs	r2, r7
    f806:	493b      	ldr	r1, [pc, #236]	; (f8f4 <mqtt_callback+0x27c>)
    f808:	0028      	movs	r0, r5
    f80a:	4b3b      	ldr	r3, [pc, #236]	; (f8f8 <mqtt_callback+0x280>)
    f80c:	4798      	blx	r3
				printf("Sensor FL0 requested: Sensed %d\r\n", sensed);
    f80e:	0039      	movs	r1, r7
    f810:	483a      	ldr	r0, [pc, #232]	; (f8fc <mqtt_callback+0x284>)
    f812:	4b21      	ldr	r3, [pc, #132]	; (f898 <mqtt_callback+0x220>)
    f814:	4798      	blx	r3
				mqtt_publish(&mqtt_inst, FL0_TOPIC, pub_text, 8, QOS, 1);
    f816:	9601      	str	r6, [sp, #4]
    f818:	2302      	movs	r3, #2
    f81a:	9300      	str	r3, [sp, #0]
    f81c:	3306      	adds	r3, #6
    f81e:	002a      	movs	r2, r5
    f820:	4937      	ldr	r1, [pc, #220]	; (f900 <mqtt_callback+0x288>)
    f822:	4838      	ldr	r0, [pc, #224]	; (f904 <mqtt_callback+0x28c>)
    f824:	4d38      	ldr	r5, [pc, #224]	; (f908 <mqtt_callback+0x290>)
    f826:	47a8      	blx	r5
			}
			if (!strncmp(data->recv_publish.topic, SENSE_FL1_TOPIC, strlen(SENSE_FL1_TOPIC)) ) {
    f828:	6820      	ldr	r0, [r4, #0]
    f82a:	2208      	movs	r2, #8
    f82c:	4923      	ldr	r1, [pc, #140]	; (f8bc <mqtt_callback+0x244>)
    f82e:	4b27      	ldr	r3, [pc, #156]	; (f8cc <mqtt_callback+0x254>)
    f830:	4798      	blx	r3
    f832:	2800      	cmp	r0, #0
    f834:	d122      	bne.n	f87c <mqtt_callback+0x204>
    f836:	4b2d      	ldr	r3, [pc, #180]	; (f8ec <mqtt_callback+0x274>)
    f838:	6a1b      	ldr	r3, [r3, #32]
				/* Print Topic */
				int sensed = !port_pin_get_input_level(FL1);
    f83a:	0ddb      	lsrs	r3, r3, #23
    f83c:	2501      	movs	r5, #1
    f83e:	002e      	movs	r6, r5
    f840:	439e      	bics	r6, r3
				sprintf(pub_text, "%d", sensed);
    f842:	4c2b      	ldr	r4, [pc, #172]	; (f8f0 <mqtt_callback+0x278>)
    f844:	0032      	movs	r2, r6
    f846:	492b      	ldr	r1, [pc, #172]	; (f8f4 <mqtt_callback+0x27c>)
    f848:	0020      	movs	r0, r4
    f84a:	4b2b      	ldr	r3, [pc, #172]	; (f8f8 <mqtt_callback+0x280>)
    f84c:	4798      	blx	r3
				printf("Sensor FL1 requested: Sensed %d\r\n", sensed);
    f84e:	0031      	movs	r1, r6
    f850:	482e      	ldr	r0, [pc, #184]	; (f90c <mqtt_callback+0x294>)
    f852:	4b11      	ldr	r3, [pc, #68]	; (f898 <mqtt_callback+0x220>)
    f854:	4798      	blx	r3
				mqtt_publish(&mqtt_inst, FL1_TOPIC, pub_text, 8, QOS, 1);
    f856:	9501      	str	r5, [sp, #4]
    f858:	2302      	movs	r3, #2
    f85a:	9300      	str	r3, [sp, #0]
    f85c:	3306      	adds	r3, #6
    f85e:	0022      	movs	r2, r4
    f860:	492b      	ldr	r1, [pc, #172]	; (f910 <mqtt_callback+0x298>)
    f862:	4828      	ldr	r0, [pc, #160]	; (f904 <mqtt_callback+0x28c>)
    f864:	4c28      	ldr	r4, [pc, #160]	; (f908 <mqtt_callback+0x290>)
    f866:	47a0      	blx	r4
    f868:	e008      	b.n	f87c <mqtt_callback+0x204>

		break;

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
    f86a:	482a      	ldr	r0, [pc, #168]	; (f914 <mqtt_callback+0x29c>)
    f86c:	4b0d      	ldr	r3, [pc, #52]	; (f8a4 <mqtt_callback+0x22c>)
    f86e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    f870:	4913      	ldr	r1, [pc, #76]	; (f8c0 <mqtt_callback+0x248>)
    f872:	2231      	movs	r2, #49	; 0x31
    f874:	5c8b      	ldrb	r3, [r1, r2]
    f876:	2002      	movs	r0, #2
    f878:	4383      	bics	r3, r0
    f87a:	548b      	strb	r3, [r1, r2]
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
    f87c:	b007      	add	sp, #28
    f87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f880:	2000000c 	.word	0x2000000c
    f884:	20000014 	.word	0x20000014
    f888:	00010809 	.word	0x00010809
    f88c:	20000df8 	.word	0x20000df8
    f890:	0001426c 	.word	0x0001426c
    f894:	00014450 	.word	0x00014450
    f898:	0001189d 	.word	0x0001189d
    f89c:	000106f5 	.word	0x000106f5
    f8a0:	00014488 	.word	0x00014488
    f8a4:	000119bd 	.word	0x000119bd
    f8a8:	0001449c 	.word	0x0001449c
    f8ac:	00010c61 	.word	0x00010c61
    f8b0:	000144a4 	.word	0x000144a4
    f8b4:	000144b0 	.word	0x000144b0
    f8b8:	000144b8 	.word	0x000144b8
    f8bc:	000144c4 	.word	0x000144c4
    f8c0:	20000120 	.word	0x20000120
    f8c4:	000144d0 	.word	0x000144d0
    f8c8:	000144ec 	.word	0x000144ec
    f8cc:	00011c19 	.word	0x00011c19
    f8d0:	000118d1 	.word	0x000118d1
    f8d4:	00014520 	.word	0x00014520
    f8d8:	00014624 	.word	0x00014624
    f8dc:	00014528 	.word	0x00014528
    f8e0:	41004400 	.word	0x41004400
    f8e4:	00014530 	.word	0x00014530
    f8e8:	20000258 	.word	0x20000258
    f8ec:	41004480 	.word	0x41004480
    f8f0:	20000260 	.word	0x20000260
    f8f4:	00014544 	.word	0x00014544
    f8f8:	00011b69 	.word	0x00011b69
    f8fc:	00014548 	.word	0x00014548
    f900:	0001456c 	.word	0x0001456c
    f904:	200001e4 	.word	0x200001e4
    f908:	00010ab9 	.word	0x00010ab9
    f90c:	00014570 	.word	0x00014570
    f910:	00014594 	.word	0x00014594
    f914:	00014598 	.word	0x00014598

0000f918 <wifi_cb>:
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
}

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    f918:	b510      	push	{r4, lr}
    f91a:	b082      	sub	sp, #8
	switch (u8MsgType) {
    f91c:	282c      	cmp	r0, #44	; 0x2c
    f91e:	d002      	beq.n	f926 <wifi_cb+0xe>
    f920:	2832      	cmp	r0, #50	; 0x32
    f922:	d02d      	beq.n	f980 <wifi_cb+0x68>
    f924:	e03c      	b.n	f9a0 <wifi_cb+0x88>
		case M2M_WIFI_RESP_CON_STATE_CHANGED:
		{
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    f926:	780b      	ldrb	r3, [r1, #0]
    f928:	2b01      	cmp	r3, #1
    f92a:	d105      	bne.n	f938 <wifi_cb+0x20>
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    f92c:	481d      	ldr	r0, [pc, #116]	; (f9a4 <wifi_cb+0x8c>)
    f92e:	4b1e      	ldr	r3, [pc, #120]	; (f9a8 <wifi_cb+0x90>)
    f930:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
    f932:	4b1e      	ldr	r3, [pc, #120]	; (f9ac <wifi_cb+0x94>)
    f934:	4798      	blx	r3
    f936:	e033      	b.n	f9a0 <wifi_cb+0x88>
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    f938:	2b00      	cmp	r3, #0
    f93a:	d131      	bne.n	f9a0 <wifi_cb+0x88>
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    f93c:	481c      	ldr	r0, [pc, #112]	; (f9b0 <wifi_cb+0x98>)
    f93e:	4b1a      	ldr	r3, [pc, #104]	; (f9a8 <wifi_cb+0x90>)
    f940:	4798      	blx	r3
	down_state = NOT_READY;
}

static void clear_state(download_state mask)
{
	down_state &= ~mask;
    f942:	4b1c      	ldr	r3, [pc, #112]	; (f9b4 <wifi_cb+0x9c>)
    f944:	2200      	movs	r2, #0
    f946:	569a      	ldrsb	r2, [r3, r2]
    f948:	23fd      	movs	r3, #253	; 0xfd
    f94a:	4013      	ands	r3, r2
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
				m2m_wifi_request_dhcp_client();
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
				clear_state(WIFI_CONNECTED);
				if (is_state_set(DOWNLOADING)) {
    f94c:	0719      	lsls	r1, r3, #28
    f94e:	d402      	bmi.n	f956 <wifi_cb+0x3e>
	down_state = NOT_READY;
}

static void clear_state(download_state mask)
{
	down_state &= ~mask;
    f950:	4a18      	ldr	r2, [pc, #96]	; (f9b4 <wifi_cb+0x9c>)
    f952:	7013      	strb	r3, [r2, #0]
    f954:	e003      	b.n	f95e <wifi_cb+0x46>
    f956:	230a      	movs	r3, #10
    f958:	439a      	bics	r2, r3
    f95a:	4b16      	ldr	r3, [pc, #88]	; (f9b4 <wifi_cb+0x9c>)
    f95c:	701a      	strb	r2, [r3, #0]
	down_state |= mask;
}

static inline bool is_state_set(download_state mask)
{
	return ((down_state & mask) != 0);
    f95e:	4b15      	ldr	r3, [pc, #84]	; (f9b4 <wifi_cb+0x9c>)
    f960:	781b      	ldrb	r3, [r3, #0]
				clear_state(WIFI_CONNECTED);
				if (is_state_set(DOWNLOADING)) {
					clear_state(DOWNLOADING);
				}

				if (is_state_set(GET_REQUESTED)) {
    f962:	075a      	lsls	r2, r3, #29
    f964:	d503      	bpl.n	f96e <wifi_cb+0x56>
	down_state = NOT_READY;
}

static void clear_state(download_state mask)
{
	down_state &= ~mask;
    f966:	2204      	movs	r2, #4
    f968:	4393      	bics	r3, r2
    f96a:	4a12      	ldr	r2, [pc, #72]	; (f9b4 <wifi_cb+0x9c>)
    f96c:	7013      	strb	r3, [r2, #0]

				if (is_state_set(GET_REQUESTED)) {
					clear_state(GET_REQUESTED);
				}

				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    f96e:	23ff      	movs	r3, #255	; 0xff
    f970:	9300      	str	r3, [sp, #0]
    f972:	4b11      	ldr	r3, [pc, #68]	; (f9b8 <wifi_cb+0xa0>)
    f974:	2202      	movs	r2, #2
    f976:	2116      	movs	r1, #22
    f978:	4810      	ldr	r0, [pc, #64]	; (f9bc <wifi_cb+0xa4>)
    f97a:	4c11      	ldr	r4, [pc, #68]	; (f9c0 <wifi_cb+0xa8>)
    f97c:	47a0      	blx	r4
    f97e:	e00f      	b.n	f9a0 <wifi_cb+0x88>
		}

		case M2M_WIFI_REQ_DHCP_CONF:
		{
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    f980:	788b      	ldrb	r3, [r1, #2]
    f982:	784a      	ldrb	r2, [r1, #1]
    f984:	7808      	ldrb	r0, [r1, #0]
    f986:	78c9      	ldrb	r1, [r1, #3]
    f988:	9100      	str	r1, [sp, #0]
    f98a:	0001      	movs	r1, r0
    f98c:	480d      	ldr	r0, [pc, #52]	; (f9c4 <wifi_cb+0xac>)
    f98e:	4c0e      	ldr	r4, [pc, #56]	; (f9c8 <wifi_cb+0xb0>)
    f990:	47a0      	blx	r4
	down_state &= ~mask;
}

static void add_state(download_state mask)
{
	down_state |= mask;
    f992:	4a08      	ldr	r2, [pc, #32]	; (f9b4 <wifi_cb+0x9c>)
    f994:	7811      	ldrb	r1, [r2, #0]
    f996:	2302      	movs	r3, #2
    f998:	430b      	orrs	r3, r1
    f99a:	7013      	strb	r3, [r2, #0]
		{
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
			add_state(WIFI_CONNECTED);
			start_download();
    f99c:	4b0b      	ldr	r3, [pc, #44]	; (f9cc <wifi_cb+0xb4>)
    f99e:	4798      	blx	r3
		}
		default:
		break;
	}
}
    f9a0:	b002      	add	sp, #8
    f9a2:	bd10      	pop	{r4, pc}
    f9a4:	000145ac 	.word	0x000145ac
    f9a8:	000119bd 	.word	0x000119bd
    f9ac:	00009e7d 	.word	0x00009e7d
    f9b0:	000145cc 	.word	0x000145cc
    f9b4:	20000154 	.word	0x20000154
    f9b8:	00014410 	.word	0x00014410
    f9bc:	0001441c 	.word	0x0001441c
    f9c0:	00009e61 	.word	0x00009e61
    f9c4:	000145ec 	.word	0x000145ec
    f9c8:	0001189d 	.word	0x0001189d
    f9cc:	0000f4f1 	.word	0x0000f4f1

0000f9d0 <configure_port_pins>:
		error_code = nvm_write_buffer(FW_STAT_ADDRESS, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
	} while (error_code == STATUS_BUSY);
}

void configure_port_pins(void)
{
    f9d0:	b570      	push	{r4, r5, r6, lr}
    f9d2:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    f9d4:	ac01      	add	r4, sp, #4
    f9d6:	2301      	movs	r3, #1
    f9d8:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    f9da:	2600      	movs	r6, #0
    f9dc:	70a6      	strb	r6, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    f9de:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
    f9e0:	0021      	movs	r1, r4
    f9e2:	202a      	movs	r0, #42	; 0x2a
    f9e4:	4d09      	ldr	r5, [pc, #36]	; (fa0c <configure_port_pins+0x3c>)
    f9e6:	47a8      	blx	r5
	port_pin_set_config(LED_1_PIN, &config_port_pin);
    f9e8:	0021      	movs	r1, r4
    f9ea:	202b      	movs	r0, #43	; 0x2b
    f9ec:	47a8      	blx	r5
	port_pin_set_config(RELAY, &config_port_pin);
    f9ee:	0021      	movs	r1, r4
    f9f0:	2005      	movs	r0, #5
    f9f2:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    f9f4:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(B1, &config_port_pin);
    f9f6:	0021      	movs	r1, r4
    f9f8:	2006      	movs	r0, #6
    f9fa:	47a8      	blx	r5
	port_pin_set_config(FL0, &config_port_pin);
    f9fc:	0021      	movs	r1, r4
    f9fe:	2036      	movs	r0, #54	; 0x36
    fa00:	47a8      	blx	r5
	port_pin_set_config(FL1, &config_port_pin);
    fa02:	0021      	movs	r1, r4
    fa04:	2037      	movs	r0, #55	; 0x37
    fa06:	47a8      	blx	r5
}
    fa08:	b002      	add	sp, #8
    fa0a:	bd70      	pop	{r4, r5, r6, pc}
    fa0c:	0000c251 	.word	0x0000c251

0000fa10 <write_spi_flash_frm_buf>:
static inline bool is_state_set(download_state mask)
{
	return ((down_state & mask) != 0);
}

void write_spi_flash_frm_buf(uint32 len){
    fa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa12:	0004      	movs	r4, r0
	at25dfx_chip_wake(&at25dfx_chip);
    fa14:	4d0f      	ldr	r5, [pc, #60]	; (fa54 <write_spi_flash_frm_buf+0x44>)
    fa16:	0028      	movs	r0, r5
    fa18:	4b0f      	ldr	r3, [pc, #60]	; (fa58 <write_spi_flash_frm_buf+0x48>)
    fa1a:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    fa1c:	0028      	movs	r0, r5
    fa1e:	4b0f      	ldr	r3, [pc, #60]	; (fa5c <write_spi_flash_frm_buf+0x4c>)
    fa20:	4798      	blx	r3
    fa22:	2800      	cmp	r0, #0
    fa24:	d002      	beq.n	fa2c <write_spi_flash_frm_buf+0x1c>
		// Handle missing or non-responsive device
		printf("Chip didnt wake \r\n");
    fa26:	480e      	ldr	r0, [pc, #56]	; (fa60 <write_spi_flash_frm_buf+0x50>)
    fa28:	4b0e      	ldr	r3, [pc, #56]	; (fa64 <write_spi_flash_frm_buf+0x54>)
    fa2a:	4798      	blx	r3
	}
	at25dfx_chip_write_buffer(&at25dfx_chip, flash_addr, http_buf + http_buf_read_ptr, len);	// write buffer
    fa2c:	b2a3      	uxth	r3, r4
    fa2e:	4a0e      	ldr	r2, [pc, #56]	; (fa68 <write_spi_flash_frm_buf+0x58>)
    fa30:	6811      	ldr	r1, [r2, #0]
    fa32:	4a0e      	ldr	r2, [pc, #56]	; (fa6c <write_spi_flash_frm_buf+0x5c>)
    fa34:	188a      	adds	r2, r1, r2
    fa36:	4d0e      	ldr	r5, [pc, #56]	; (fa70 <write_spi_flash_frm_buf+0x60>)
    fa38:	4e06      	ldr	r6, [pc, #24]	; (fa54 <write_spi_flash_frm_buf+0x44>)
    fa3a:	6829      	ldr	r1, [r5, #0]
    fa3c:	0030      	movs	r0, r6
    fa3e:	4f0d      	ldr	r7, [pc, #52]	; (fa74 <write_spi_flash_frm_buf+0x64>)
    fa40:	47b8      	blx	r7
	at25dfx_chip_sleep(&at25dfx_chip);											// back to sleep
    fa42:	0030      	movs	r0, r6
    fa44:	4b0c      	ldr	r3, [pc, #48]	; (fa78 <write_spi_flash_frm_buf+0x68>)
    fa46:	4798      	blx	r3
	flash_addr = flash_addr + len;
    fa48:	682b      	ldr	r3, [r5, #0]
    fa4a:	469c      	mov	ip, r3
    fa4c:	4464      	add	r4, ip
    fa4e:	602c      	str	r4, [r5, #0]
}
    fa50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa52:	46c0      	nop			; (mov r8, r8)
    fa54:	20000c6c 	.word	0x20000c6c
    fa58:	000089e1 	.word	0x000089e1
    fa5c:	00008115 	.word	0x00008115
    fa60:	00014614 	.word	0x00014614
    fa64:	000119bd 	.word	0x000119bd
    fa68:	20000158 	.word	0x20000158
    fa6c:	2000046c 	.word	0x2000046c
    fa70:	20000468 	.word	0x20000468
    fa74:	00008221 	.word	0x00008221
    fa78:	00008955 	.word	0x00008955

0000fa7c <http_client_callback>:
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_CRC_URL, HTTP_METHOD_GET, NULL, NULL);
	}
	
}
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
    fa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa7e:	464f      	mov	r7, r9
    fa80:	4646      	mov	r6, r8
    fa82:	b4c0      	push	{r6, r7}
    fa84:	0014      	movs	r4, r2
	switch (type) {
    fa86:	2904      	cmp	r1, #4
    fa88:	d900      	bls.n	fa8c <http_client_callback+0x10>
    fa8a:	e109      	b.n	fca0 <http_client_callback+0x224>
    fa8c:	0089      	lsls	r1, r1, #2
    fa8e:	4b86      	ldr	r3, [pc, #536]	; (fca8 <http_client_callback+0x22c>)
    fa90:	585b      	ldr	r3, [r3, r1]
    fa92:	469f      	mov	pc, r3
	case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
		printf("http_client_callback: HTTP client socket connected.\r\n");
    fa94:	4885      	ldr	r0, [pc, #532]	; (fcac <http_client_callback+0x230>)
    fa96:	4b86      	ldr	r3, [pc, #536]	; (fcb0 <http_client_callback+0x234>)
    fa98:	4798      	blx	r3
		break;
    fa9a:	e101      	b.n	fca0 <http_client_callback+0x224>

	case HTTP_CLIENT_CALLBACK_REQUESTED:
		printf("http_client_callback: request completed.\r\n");
    fa9c:	4885      	ldr	r0, [pc, #532]	; (fcb4 <http_client_callback+0x238>)
    fa9e:	4b84      	ldr	r3, [pc, #528]	; (fcb0 <http_client_callback+0x234>)
    faa0:	4798      	blx	r3
	down_state &= ~mask;
}

static void add_state(download_state mask)
{
	down_state |= mask;
    faa2:	4a85      	ldr	r2, [pc, #532]	; (fcb8 <http_client_callback+0x23c>)
    faa4:	7811      	ldrb	r1, [r2, #0]
    faa6:	2304      	movs	r3, #4
    faa8:	430b      	orrs	r3, r1
    faaa:	7013      	strb	r3, [r2, #0]
    faac:	e0f8      	b.n	fca0 <http_client_callback+0x224>
		printf("http_client_callback: request completed.\r\n");
		add_state(GET_REQUESTED);
		break;

	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
		printf("http_client_callback: received response %u data size %u\r\n",
    faae:	8811      	ldrh	r1, [r2, #0]
    fab0:	6852      	ldr	r2, [r2, #4]
    fab2:	4882      	ldr	r0, [pc, #520]	; (fcbc <http_client_callback+0x240>)
    fab4:	4b82      	ldr	r3, [pc, #520]	; (fcc0 <http_client_callback+0x244>)
    fab6:	4798      	blx	r3
				(unsigned int)data->recv_response.response_code,
				(unsigned int)data->recv_response.content_length);
		if ((unsigned int)data->recv_response.response_code == 200) {
    fab8:	8823      	ldrh	r3, [r4, #0]
    faba:	2bc8      	cmp	r3, #200	; 0xc8
    fabc:	d005      	beq.n	faca <http_client_callback+0x4e>
	down_state &= ~mask;
}

static void add_state(download_state mask)
{
	down_state |= mask;
    fabe:	4a7e      	ldr	r2, [pc, #504]	; (fcb8 <http_client_callback+0x23c>)
    fac0:	7811      	ldrb	r1, [r2, #0]
    fac2:	2320      	movs	r3, #32
    fac4:	430b      	orrs	r3, r1
    fac6:	7013      	strb	r3, [r2, #0]
    fac8:	e0ea      	b.n	fca0 <http_client_callback+0x224>
		} 
		else {
			add_state(CANCELED);
			return;
		}
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    faca:	2380      	movs	r3, #128	; 0x80
    facc:	00db      	lsls	r3, r3, #3
    face:	6862      	ldr	r2, [r4, #4]
    fad0:	429a      	cmp	r2, r3
    fad2:	d900      	bls.n	fad6 <http_client_callback+0x5a>
    fad4:	e0e4      	b.n	fca0 <http_client_callback+0x224>
			//***store_file_packet(data->recv_response.content, data->recv_response.content_length);
			
			//This is run only when file size < MAIN_BUFFER_MAX_SIZE which we assume never happens!
			printf("Callback: CRC download......\r\n");
    fad6:	487b      	ldr	r0, [pc, #492]	; (fcc4 <http_client_callback+0x248>)
    fad8:	4b75      	ldr	r3, [pc, #468]	; (fcb0 <http_client_callback+0x234>)
    fada:	4798      	blx	r3
			dlCRC = *(uint32_t *)data->recv_response.content;
    fadc:	68a3      	ldr	r3, [r4, #8]
    fade:	681b      	ldr	r3, [r3, #0]
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
                    ((dlCRC<<8)&0xff0000) | // move byte 1 to byte 2
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
    fae0:	0e19      	lsrs	r1, r3, #24
    fae2:	061a      	lsls	r2, r3, #24
    fae4:	4311      	orrs	r1, r2
    fae6:	0218      	lsls	r0, r3, #8
    fae8:	22ff      	movs	r2, #255	; 0xff
    faea:	0412      	lsls	r2, r2, #16
    faec:	4002      	ands	r2, r0
    faee:	4311      	orrs	r1, r2
    faf0:	0a1b      	lsrs	r3, r3, #8
    faf2:	22ff      	movs	r2, #255	; 0xff
    faf4:	0212      	lsls	r2, r2, #8
    faf6:	4013      	ands	r3, r2
    faf8:	4319      	orrs	r1, r3
			//***store_file_packet(data->recv_response.content, data->recv_response.content_length);
			
			//This is run only when file size < MAIN_BUFFER_MAX_SIZE which we assume never happens!
			printf("Callback: CRC download......\r\n");
			dlCRC = *(uint32_t *)data->recv_response.content;
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
    fafa:	4b73      	ldr	r3, [pc, #460]	; (fcc8 <http_client_callback+0x24c>)
    fafc:	6019      	str	r1, [r3, #0]
                    ((dlCRC<<8)&0xff0000) | // move byte 1 to byte 2
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
                    ((dlCRC<<24)&0xff000000); // byte 0 to byte 3
			printf("Received %x\r\n", (uint32_t)dlCRC);
    fafe:	4873      	ldr	r0, [pc, #460]	; (fccc <http_client_callback+0x250>)
    fb00:	4b6f      	ldr	r3, [pc, #444]	; (fcc0 <http_client_callback+0x244>)
    fb02:	4798      	blx	r3
	down_state &= ~mask;
}

static void add_state(download_state mask)
{
	down_state |= mask;
    fb04:	4a6c      	ldr	r2, [pc, #432]	; (fcb8 <http_client_callback+0x23c>)
    fb06:	7811      	ldrb	r1, [r2, #0]
    fb08:	2310      	movs	r3, #16
    fb0a:	430b      	orrs	r3, r1
    fb0c:	7013      	strb	r3, [r2, #0]
    fb0e:	e0c7      	b.n	fca0 <http_client_callback+0x224>
			add_state(COMPLETED);
		}
		break;

	case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
		printf("http_client_callback_CHUNKED DATA: received response data size %u\r\n",
    fb10:	6811      	ldr	r1, [r2, #0]
    fb12:	486f      	ldr	r0, [pc, #444]	; (fcd0 <http_client_callback+0x254>)
    fb14:	4b6a      	ldr	r3, [pc, #424]	; (fcc0 <http_client_callback+0x244>)
    fb16:	4798      	blx	r3
				(unsigned int)data->recv_chunked_data.length);
		// Calc CRC for this chunk
		if (firstCRC) {
    fb18:	4b6e      	ldr	r3, [pc, #440]	; (fcd4 <http_client_callback+0x258>)
    fb1a:	781b      	ldrb	r3, [r3, #0]
    fb1c:	2b00      	cmp	r3, #0
    fb1e:	d00f      	beq.n	fb40 <http_client_callback+0xc4>
			crc32_calculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
    fb20:	6821      	ldr	r1, [r4, #0]
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
	*crc = 0;
    fb22:	4d6d      	ldr	r5, [pc, #436]	; (fcd8 <http_client_callback+0x25c>)
    fb24:	2600      	movs	r6, #0
    fb26:	602e      	str	r6, [r5, #0]

	return crc32_recalculate(data, length, crc);
    fb28:	002a      	movs	r2, r5
    fb2a:	6860      	ldr	r0, [r4, #4]
    fb2c:	4b6b      	ldr	r3, [pc, #428]	; (fcdc <http_client_callback+0x260>)
    fb2e:	4798      	blx	r3
			printf("First block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
    fb30:	682a      	ldr	r2, [r5, #0]
    fb32:	6821      	ldr	r1, [r4, #0]
    fb34:	486a      	ldr	r0, [pc, #424]	; (fce0 <http_client_callback+0x264>)
    fb36:	4b62      	ldr	r3, [pc, #392]	; (fcc0 <http_client_callback+0x244>)
    fb38:	4798      	blx	r3
			firstCRC = false;
    fb3a:	4b66      	ldr	r3, [pc, #408]	; (fcd4 <http_client_callback+0x258>)
    fb3c:	701e      	strb	r6, [r3, #0]
    fb3e:	e00a      	b.n	fb56 <http_client_callback+0xda>
		}
		else {
			crc32_recalculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
    fb40:	4d65      	ldr	r5, [pc, #404]	; (fcd8 <http_client_callback+0x25c>)
    fb42:	002a      	movs	r2, r5
    fb44:	6821      	ldr	r1, [r4, #0]
    fb46:	6860      	ldr	r0, [r4, #4]
    fb48:	4b64      	ldr	r3, [pc, #400]	; (fcdc <http_client_callback+0x260>)
    fb4a:	4798      	blx	r3
			printf("Block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
    fb4c:	682a      	ldr	r2, [r5, #0]
    fb4e:	6821      	ldr	r1, [r4, #0]
    fb50:	4864      	ldr	r0, [pc, #400]	; (fce4 <http_client_callback+0x268>)
    fb52:	4b5b      	ldr	r3, [pc, #364]	; (fcc0 <http_client_callback+0x244>)
    fb54:	4798      	blx	r3
		}
		
		if (http_buf_write_ptr + data->recv_chunked_data.length > 2048){
    fb56:	6822      	ldr	r2, [r4, #0]
    fb58:	4b63      	ldr	r3, [pc, #396]	; (fce8 <http_client_callback+0x26c>)
    fb5a:	681d      	ldr	r5, [r3, #0]
    fb5c:	1951      	adds	r1, r2, r5
    fb5e:	2380      	movs	r3, #128	; 0x80
    fb60:	011b      	lsls	r3, r3, #4
    fb62:	4299      	cmp	r1, r3
    fb64:	d919      	bls.n	fb9a <http_client_callback+0x11e>
			memcpy_ram2ram(http_buf + http_buf_write_ptr,data->recv_chunked_data.data,(2048-http_buf_write_ptr));
    fb66:	1b5e      	subs	r6, r3, r5
    fb68:	4b60      	ldr	r3, [pc, #384]	; (fcec <http_client_callback+0x270>)
    fb6a:	4698      	mov	r8, r3
    fb6c:	18e8      	adds	r0, r5, r3
    fb6e:	0032      	movs	r2, r6
    fb70:	6861      	ldr	r1, [r4, #4]
    fb72:	4f5f      	ldr	r7, [pc, #380]	; (fcf0 <http_client_callback+0x274>)
    fb74:	47b8      	blx	r7
			memcpy_ram2ram(http_buf, data->recv_chunked_data.data + (2048-http_buf_write_ptr), data->recv_chunked_data.length-(2048-http_buf_write_ptr));
    fb76:	6823      	ldr	r3, [r4, #0]
    fb78:	18ea      	adds	r2, r5, r3
    fb7a:	4b5e      	ldr	r3, [pc, #376]	; (fcf4 <http_client_callback+0x278>)
    fb7c:	469c      	mov	ip, r3
    fb7e:	4462      	add	r2, ip
    fb80:	6863      	ldr	r3, [r4, #4]
    fb82:	1999      	adds	r1, r3, r6
    fb84:	4640      	mov	r0, r8
    fb86:	47b8      	blx	r7
			http_buf_write_ptr = data->recv_chunked_data.length-(2048-http_buf_write_ptr);
    fb88:	6823      	ldr	r3, [r4, #0]
    fb8a:	469c      	mov	ip, r3
    fb8c:	4465      	add	r5, ip
    fb8e:	4b59      	ldr	r3, [pc, #356]	; (fcf4 <http_client_callback+0x278>)
    fb90:	469c      	mov	ip, r3
    fb92:	4465      	add	r5, ip
    fb94:	4b54      	ldr	r3, [pc, #336]	; (fce8 <http_client_callback+0x26c>)
    fb96:	601d      	str	r5, [r3, #0]
    fb98:	e009      	b.n	fbae <http_client_callback+0x132>
		}
		else {
			memcpy_ram2ram(http_buf + http_buf_write_ptr, data->recv_chunked_data.data, data->recv_chunked_data.length);
    fb9a:	4854      	ldr	r0, [pc, #336]	; (fcec <http_client_callback+0x270>)
    fb9c:	1828      	adds	r0, r5, r0
    fb9e:	6861      	ldr	r1, [r4, #4]
    fba0:	4b53      	ldr	r3, [pc, #332]	; (fcf0 <http_client_callback+0x274>)
    fba2:	4798      	blx	r3
			http_buf_write_ptr = http_buf_write_ptr + data->recv_chunked_data.length;
    fba4:	6823      	ldr	r3, [r4, #0]
    fba6:	469c      	mov	ip, r3
    fba8:	4465      	add	r5, ip
    fbaa:	4b4f      	ldr	r3, [pc, #316]	; (fce8 <http_client_callback+0x26c>)
    fbac:	601d      	str	r5, [r3, #0]
		}
		 
		if  (http_buf_write_ptr > http_buf_read_ptr){
    fbae:	4b4e      	ldr	r3, [pc, #312]	; (fce8 <http_client_callback+0x26c>)
    fbb0:	681b      	ldr	r3, [r3, #0]
    fbb2:	4a51      	ldr	r2, [pc, #324]	; (fcf8 <http_client_callback+0x27c>)
    fbb4:	6817      	ldr	r7, [r2, #0]
    fbb6:	42bb      	cmp	r3, r7
    fbb8:	d913      	bls.n	fbe2 <http_client_callback+0x166>
			uint8 n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
    fbba:	1bdf      	subs	r7, r3, r7
    fbbc:	043f      	lsls	r7, r7, #16
    fbbe:	0e3f      	lsrs	r7, r7, #24
    fbc0:	2f00      	cmp	r7, #0
    fbc2:	dd3a      	ble.n	fc3a <http_client_callback+0x1be>
    fbc4:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
    fbc6:	4b4d      	ldr	r3, [pc, #308]	; (fcfc <http_client_callback+0x280>)
    fbc8:	4699      	mov	r9, r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fbca:	0016      	movs	r6, r2
		}
		 
		if  (http_buf_write_ptr > http_buf_read_ptr){
			uint8 n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
				write_spi_flash_frm_buf(256);
    fbcc:	2080      	movs	r0, #128	; 0x80
    fbce:	0040      	lsls	r0, r0, #1
    fbd0:	47c8      	blx	r9
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fbd2:	6833      	ldr	r3, [r6, #0]
    fbd4:	3301      	adds	r3, #1
    fbd6:	33ff      	adds	r3, #255	; 0xff
    fbd8:	6033      	str	r3, [r6, #0]
			http_buf_write_ptr = http_buf_write_ptr + data->recv_chunked_data.length;
		}
		 
		if  (http_buf_write_ptr > http_buf_read_ptr){
			uint8 n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
    fbda:	3501      	adds	r5, #1
    fbdc:	42bd      	cmp	r5, r7
    fbde:	d1f5      	bne.n	fbcc <http_client_callback+0x150>
    fbe0:	e02b      	b.n	fc3a <http_client_callback+0x1be>
				write_spi_flash_frm_buf(256);
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
		}
		else if (http_buf_write_ptr < http_buf_read_ptr){
    fbe2:	42bb      	cmp	r3, r7
    fbe4:	d229      	bcs.n	fc3a <http_client_callback+0x1be>
			uint8 n = (2048 - http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
    fbe6:	2280      	movs	r2, #128	; 0x80
    fbe8:	0112      	lsls	r2, r2, #4
    fbea:	1bd7      	subs	r7, r2, r7
    fbec:	043f      	lsls	r7, r7, #16
    fbee:	0e3b      	lsrs	r3, r7, #24
    fbf0:	4698      	mov	r8, r3
    fbf2:	2b00      	cmp	r3, #0
    fbf4:	dd0c      	ble.n	fc10 <http_client_callback+0x194>
    fbf6:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
    fbf8:	4e40      	ldr	r6, [pc, #256]	; (fcfc <http_client_callback+0x280>)
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fbfa:	4f3f      	ldr	r7, [pc, #252]	; (fcf8 <http_client_callback+0x27c>)
			}
		}
		else if (http_buf_write_ptr < http_buf_read_ptr){
			uint8 n = (2048 - http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
				write_spi_flash_frm_buf(256);
    fbfc:	2080      	movs	r0, #128	; 0x80
    fbfe:	0040      	lsls	r0, r0, #1
    fc00:	47b0      	blx	r6
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fc02:	683b      	ldr	r3, [r7, #0]
    fc04:	3301      	adds	r3, #1
    fc06:	33ff      	adds	r3, #255	; 0xff
    fc08:	603b      	str	r3, [r7, #0]
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
		}
		else if (http_buf_write_ptr < http_buf_read_ptr){
			uint8 n = (2048 - http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
    fc0a:	3501      	adds	r5, #1
    fc0c:	4545      	cmp	r5, r8
    fc0e:	d1f5      	bne.n	fbfc <http_client_callback+0x180>
				write_spi_flash_frm_buf(256);
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
			http_buf_read_ptr = 0;
    fc10:	2200      	movs	r2, #0
    fc12:	4b39      	ldr	r3, [pc, #228]	; (fcf8 <http_client_callback+0x27c>)
    fc14:	601a      	str	r2, [r3, #0]
			n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
    fc16:	4b34      	ldr	r3, [pc, #208]	; (fce8 <http_client_callback+0x26c>)
    fc18:	785b      	ldrb	r3, [r3, #1]
    fc1a:	4698      	mov	r8, r3
    fc1c:	2b00      	cmp	r3, #0
    fc1e:	dd0c      	ble.n	fc3a <http_client_callback+0x1be>
    fc20:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
    fc22:	4e36      	ldr	r6, [pc, #216]	; (fcfc <http_client_callback+0x280>)
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fc24:	4f34      	ldr	r7, [pc, #208]	; (fcf8 <http_client_callback+0x27c>)
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
			http_buf_read_ptr = 0;
			n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
				write_spi_flash_frm_buf(256);
    fc26:	2080      	movs	r0, #128	; 0x80
    fc28:	0040      	lsls	r0, r0, #1
    fc2a:	47b0      	blx	r6
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fc2c:	683b      	ldr	r3, [r7, #0]
    fc2e:	3301      	adds	r3, #1
    fc30:	33ff      	adds	r3, #255	; 0xff
    fc32:	603b      	str	r3, [r7, #0]
				write_spi_flash_frm_buf(256);
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
			http_buf_read_ptr = 0;
			n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
    fc34:	3501      	adds	r5, #1
    fc36:	4545      	cmp	r5, r8
    fc38:	d1f5      	bne.n	fc26 <http_client_callback+0x1aa>
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
		}
		
		
		if (data->recv_chunked_data.is_complete) {
    fc3a:	7a23      	ldrb	r3, [r4, #8]
    fc3c:	2b00      	cmp	r3, #0
    fc3e:	d02f      	beq.n	fca0 <http_client_callback+0x224>
	down_state &= ~mask;
}

static void add_state(download_state mask)
{
	down_state |= mask;
    fc40:	4a1d      	ldr	r2, [pc, #116]	; (fcb8 <http_client_callback+0x23c>)
    fc42:	7811      	ldrb	r1, [r2, #0]
    fc44:	2310      	movs	r3, #16
    fc46:	430b      	orrs	r3, r1
    fc48:	7013      	strb	r3, [r2, #0]
		}
		
		
		if (data->recv_chunked_data.is_complete) {
			add_state(COMPLETED);
			if  (http_buf_write_ptr < http_buf_read_ptr){
    fc4a:	4b27      	ldr	r3, [pc, #156]	; (fce8 <http_client_callback+0x26c>)
    fc4c:	6818      	ldr	r0, [r3, #0]
    fc4e:	4b2a      	ldr	r3, [pc, #168]	; (fcf8 <http_client_callback+0x27c>)
    fc50:	681b      	ldr	r3, [r3, #0]
    fc52:	4298      	cmp	r0, r3
    fc54:	d205      	bcs.n	fc62 <http_client_callback+0x1e6>
				http_buf_read_ptr =0;
    fc56:	2200      	movs	r2, #0
    fc58:	4b27      	ldr	r3, [pc, #156]	; (fcf8 <http_client_callback+0x27c>)
    fc5a:	601a      	str	r2, [r3, #0]
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
    fc5c:	4b27      	ldr	r3, [pc, #156]	; (fcfc <http_client_callback+0x280>)
    fc5e:	4798      	blx	r3
    fc60:	e01e      	b.n	fca0 <http_client_callback+0x224>
			}
			else if(http_buf_write_ptr > http_buf_read_ptr){
    fc62:	4298      	cmp	r0, r3
    fc64:	d91c      	bls.n	fca0 <http_client_callback+0x224>
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
    fc66:	1ac0      	subs	r0, r0, r3
    fc68:	4b24      	ldr	r3, [pc, #144]	; (fcfc <http_client_callback+0x280>)
    fc6a:	4798      	blx	r3
    fc6c:	e018      	b.n	fca0 <http_client_callback+0x224>
			}
		}
		break;

	case HTTP_CLIENT_CALLBACK_DISCONNECTED:
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    fc6e:	6811      	ldr	r1, [r2, #0]
    fc70:	4823      	ldr	r0, [pc, #140]	; (fd00 <http_client_callback+0x284>)
    fc72:	4b13      	ldr	r3, [pc, #76]	; (fcc0 <http_client_callback+0x244>)
    fc74:	4798      	blx	r3

		/* If disconnect reason is equal to -ECONNRESET(-104),
		 * It means the server has closed the connection (timeout).
		 * This is normal operation.
		 */
		if (data->disconnected.reason == -EAGAIN) {
    fc76:	6823      	ldr	r3, [r4, #0]
    fc78:	330b      	adds	r3, #11
    fc7a:	d111      	bne.n	fca0 <http_client_callback+0x224>
	down_state |= mask;
}

static inline bool is_state_set(download_state mask)
{
	return ((down_state & mask) != 0);
    fc7c:	4b0e      	ldr	r3, [pc, #56]	; (fcb8 <http_client_callback+0x23c>)
    fc7e:	781b      	ldrb	r3, [r3, #0]
		 * It means the server has closed the connection (timeout).
		 * This is normal operation.
		 */
		if (data->disconnected.reason == -EAGAIN) {
			/* Server has not responded. Retry immediately. */
			if (is_state_set(DOWNLOADING)) {
    fc80:	071a      	lsls	r2, r3, #28
    fc82:	d503      	bpl.n	fc8c <http_client_callback+0x210>
	down_state = NOT_READY;
}

static void clear_state(download_state mask)
{
	down_state &= ~mask;
    fc84:	2208      	movs	r2, #8
    fc86:	4393      	bics	r3, r2
    fc88:	4a0b      	ldr	r2, [pc, #44]	; (fcb8 <http_client_callback+0x23c>)
    fc8a:	7013      	strb	r3, [r2, #0]
	down_state |= mask;
}

static inline bool is_state_set(download_state mask)
{
	return ((down_state & mask) != 0);
    fc8c:	4b0a      	ldr	r3, [pc, #40]	; (fcb8 <http_client_callback+0x23c>)
    fc8e:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
				//f_close(&file_object);
				clear_state(DOWNLOADING);
			}

			if (is_state_set(GET_REQUESTED)) {
    fc90:	075a      	lsls	r2, r3, #29
    fc92:	d503      	bpl.n	fc9c <http_client_callback+0x220>
	down_state = NOT_READY;
}

static void clear_state(download_state mask)
{
	down_state &= ~mask;
    fc94:	2204      	movs	r2, #4
    fc96:	4393      	bics	r3, r2
    fc98:	4a07      	ldr	r2, [pc, #28]	; (fcb8 <http_client_callback+0x23c>)
    fc9a:	7013      	strb	r3, [r2, #0]

			if (is_state_set(GET_REQUESTED)) {
				clear_state(GET_REQUESTED);
			}

			start_download();
    fc9c:	4b19      	ldr	r3, [pc, #100]	; (fd04 <http_client_callback+0x288>)
    fc9e:	4798      	blx	r3
		}

		break;
	}
}
    fca0:	bc0c      	pop	{r2, r3}
    fca2:	4690      	mov	r8, r2
    fca4:	4699      	mov	r9, r3
    fca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fca8:	00014258 	.word	0x00014258
    fcac:	00014628 	.word	0x00014628
    fcb0:	000119bd 	.word	0x000119bd
    fcb4:	00014660 	.word	0x00014660
    fcb8:	20000154 	.word	0x20000154
    fcbc:	0001468c 	.word	0x0001468c
    fcc0:	0001189d 	.word	0x0001189d
    fcc4:	000146c8 	.word	0x000146c8
    fcc8:	20000df4 	.word	0x20000df4
    fccc:	000146e8 	.word	0x000146e8
    fcd0:	000146f8 	.word	0x000146f8
    fcd4:	20000011 	.word	0x20000011
    fcd8:	20000df0 	.word	0x20000df0
    fcdc:	0000bc95 	.word	0x0000bc95
    fce0:	0001473c 	.word	0x0001473c
    fce4:	0001475c 	.word	0x0001475c
    fce8:	2000025c 	.word	0x2000025c
    fcec:	2000046c 	.word	0x2000046c
    fcf0:	00011719 	.word	0x00011719
    fcf4:	fffff800 	.word	0xfffff800
    fcf8:	20000158 	.word	0x20000158
    fcfc:	0000fa11 	.word	0x0000fa11
    fd00:	00014778 	.word	0x00014778
    fd04:	0000f4f1 	.word	0x0000f4f1

0000fd08 <main>:
	
	download_CRC = false;
}

int main(void)
{
    fd08:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd0a:	465f      	mov	r7, fp
    fd0c:	4656      	mov	r6, sl
    fd0e:	464d      	mov	r5, r9
    fd10:	4644      	mov	r4, r8
    fd12:	b4f0      	push	{r4, r5, r6, r7}
    fd14:	b09d      	sub	sp, #116	; 0x74
	tstrWifiInitParam param;
	int8_t ret;
	int lastSenseFL0 = 0;
	int lastSenseFL1 = 0;
	system_init();
    fd16:	4beb      	ldr	r3, [pc, #940]	; (100c4 <main+0x3bc>)
    fd18:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    fd1a:	aa06      	add	r2, sp, #24
    fd1c:	2380      	movs	r3, #128	; 0x80
    fd1e:	05db      	lsls	r3, r3, #23
    fd20:	9306      	str	r3, [sp, #24]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    fd22:	2300      	movs	r3, #0
    fd24:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    fd26:	21ff      	movs	r1, #255	; 0xff
    fd28:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    fd2a:	2100      	movs	r1, #0
    fd2c:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    fd2e:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    fd30:	2501      	movs	r5, #1
    fd32:	2024      	movs	r0, #36	; 0x24
    fd34:	5415      	strb	r5, [r2, r0]
	config->transmitter_enable = true;
    fd36:	3001      	adds	r0, #1
    fd38:	5415      	strb	r5, [r2, r0]
	config->clock_polarity_inverted = false;
    fd3a:	3001      	adds	r0, #1
    fd3c:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    fd3e:	3001      	adds	r0, #1
    fd40:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    fd42:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    fd44:	3005      	adds	r0, #5
    fd46:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    fd48:	3001      	adds	r0, #1
    fd4a:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    fd4c:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    fd4e:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    fd50:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    fd52:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    fd54:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    fd56:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    fd58:	2313      	movs	r3, #19
    fd5a:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    fd5c:	7751      	strb	r1, [r2, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    fd5e:	23c0      	movs	r3, #192	; 0xc0
    fd60:	039b      	lsls	r3, r3, #14
    fd62:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    fd64:	2301      	movs	r3, #1
    fd66:	425b      	negs	r3, r3
    fd68:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    fd6a:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    fd6c:	4bd6      	ldr	r3, [pc, #856]	; (100c8 <main+0x3c0>)
    fd6e:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    fd70:	4bd6      	ldr	r3, [pc, #856]	; (100cc <main+0x3c4>)
    fd72:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    fd74:	23e1      	movs	r3, #225	; 0xe1
    fd76:	025b      	lsls	r3, r3, #9
    fd78:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    fd7a:	4cd5      	ldr	r4, [pc, #852]	; (100d0 <main+0x3c8>)
    fd7c:	4bd5      	ldr	r3, [pc, #852]	; (100d4 <main+0x3cc>)
    fd7e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    fd80:	49d5      	ldr	r1, [pc, #852]	; (100d8 <main+0x3d0>)
    fd82:	4bd6      	ldr	r3, [pc, #856]	; (100dc <main+0x3d4>)
    fd84:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    fd86:	49d6      	ldr	r1, [pc, #856]	; (100e0 <main+0x3d8>)
    fd88:	4bd6      	ldr	r3, [pc, #856]	; (100e4 <main+0x3dc>)
    fd8a:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    fd8c:	49d6      	ldr	r1, [pc, #856]	; (100e8 <main+0x3e0>)
    fd8e:	0020      	movs	r0, r4
    fd90:	4bd6      	ldr	r3, [pc, #856]	; (100ec <main+0x3e4>)
    fd92:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    fd94:	4fd6      	ldr	r7, [pc, #856]	; (100f0 <main+0x3e8>)
    fd96:	683b      	ldr	r3, [r7, #0]
    fd98:	6898      	ldr	r0, [r3, #8]
    fd9a:	2100      	movs	r1, #0
    fd9c:	4ed5      	ldr	r6, [pc, #852]	; (100f4 <main+0x3ec>)
    fd9e:	47b0      	blx	r6
	setbuf(stdin, NULL);
    fda0:	683b      	ldr	r3, [r7, #0]
    fda2:	6858      	ldr	r0, [r3, #4]
    fda4:	2100      	movs	r1, #0
    fda6:	47b0      	blx	r6

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
	/* Register USART callback for receiving user input. */
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    fda8:	2201      	movs	r2, #1
    fdaa:	49d3      	ldr	r1, [pc, #844]	; (100f8 <main+0x3f0>)
    fdac:	0020      	movs	r0, r4
    fdae:	4bd3      	ldr	r3, [pc, #844]	; (100fc <main+0x3f4>)
    fdb0:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    fdb2:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    fdb4:	0030      	movs	r0, r6
    fdb6:	4bd2      	ldr	r3, [pc, #840]	; (10100 <main+0x3f8>)
    fdb8:	4798      	blx	r3
    fdba:	231f      	movs	r3, #31
    fdbc:	4018      	ands	r0, r3
    fdbe:	4085      	lsls	r5, r0
    fdc0:	4bd0      	ldr	r3, [pc, #832]	; (10104 <main+0x3fc>)
    fdc2:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    fdc4:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    fdc6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    fdc8:	2b00      	cmp	r3, #0
    fdca:	d1fc      	bne.n	fdc6 <main+0xbe>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    fdcc:	6832      	ldr	r2, [r6, #0]
    fdce:	3302      	adds	r3, #2
    fdd0:	4313      	orrs	r3, r2
    fdd2:	6033      	str	r3, [r6, #0]
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
    fdd4:	ac06      	add	r4, sp, #24
    fdd6:	0020      	movs	r0, r4
    fdd8:	4bcb      	ldr	r3, [pc, #812]	; (10108 <main+0x400>)
    fdda:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
    fddc:	4dcb      	ldr	r5, [pc, #812]	; (1010c <main+0x404>)
    fdde:	0021      	movs	r1, r4
    fde0:	0028      	movs	r0, r5
    fde2:	4bcb      	ldr	r3, [pc, #812]	; (10110 <main+0x408>)
    fde4:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    fde6:	0028      	movs	r0, r5
    fde8:	4bca      	ldr	r3, [pc, #808]	; (10114 <main+0x40c>)
    fdea:	4798      	blx	r3
static void configure_mqtt(void)
{
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
    fdec:	0020      	movs	r0, r4
    fdee:	4bca      	ldr	r3, [pc, #808]	; (10118 <main+0x410>)
    fdf0:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.timer_inst = &swt_module_inst;
    fdf2:	6065      	str	r5, [r4, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
    fdf4:	4bc9      	ldr	r3, [pc, #804]	; (1011c <main+0x414>)
    fdf6:	60e3      	str	r3, [r4, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    fdf8:	2380      	movs	r3, #128	; 0x80
    fdfa:	6123      	str	r3, [r4, #16]
	mqtt_conf.port = MQTT_PORT;
    fdfc:	4bc8      	ldr	r3, [pc, #800]	; (10120 <main+0x418>)
    fdfe:	8023      	strh	r3, [r4, #0]

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    fe00:	0021      	movs	r1, r4
    fe02:	48c8      	ldr	r0, [pc, #800]	; (10124 <main+0x41c>)
    fe04:	4bc8      	ldr	r3, [pc, #800]	; (10128 <main+0x420>)
    fe06:	4798      	blx	r3
    fe08:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    fe0a:	da03      	bge.n	fe14 <main+0x10c>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    fe0c:	48c7      	ldr	r0, [pc, #796]	; (1012c <main+0x424>)
    fe0e:	4bc8      	ldr	r3, [pc, #800]	; (10130 <main+0x428>)
    fe10:	4798      	blx	r3
    fe12:	e7fe      	b.n	fe12 <main+0x10a>
		while (1) {
		}
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    fe14:	49c7      	ldr	r1, [pc, #796]	; (10134 <main+0x42c>)
    fe16:	48c3      	ldr	r0, [pc, #780]	; (10124 <main+0x41c>)
    fe18:	4bc7      	ldr	r3, [pc, #796]	; (10138 <main+0x430>)
    fe1a:	4798      	blx	r3
    fe1c:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    fe1e:	da03      	bge.n	fe28 <main+0x120>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    fe20:	48c6      	ldr	r0, [pc, #792]	; (1013c <main+0x434>)
    fe22:	4bc3      	ldr	r3, [pc, #780]	; (10130 <main+0x428>)
    fe24:	4798      	blx	r3
    fe26:	e7fe      	b.n	fe26 <main+0x11e>
	int lastSenseFL1 = 0;
	system_init();
	configure_console();
	configure_timer();
	configure_mqtt();
	nm_bsp_init();
    fe28:	4bc5      	ldr	r3, [pc, #788]	; (10140 <main+0x438>)
    fe2a:	4798      	blx	r3
	at25dfx_chip_config.cs_pin = AT25DFX_CS;
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
}
static void init_state(void)
{
	down_state = NOT_READY;
    fe2c:	2500      	movs	r5, #0
    fe2e:	4bc5      	ldr	r3, [pc, #788]	; (10144 <main+0x43c>)
    fe30:	701d      	strb	r5, [r3, #0]
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    fe32:	ac06      	add	r4, sp, #24
    fe34:	7025      	strb	r5, [r4, #0]
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    fe36:	4bc4      	ldr	r3, [pc, #784]	; (10148 <main+0x440>)
    fe38:	685b      	ldr	r3, [r3, #4]
    fe3a:	06db      	lsls	r3, r3, #27
    fe3c:	0f1b      	lsrs	r3, r3, #28
    fe3e:	70a3      	strb	r3, [r4, #2]
	config->disable_cache     = false;
    fe40:	70e5      	strb	r5, [r4, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    fe42:	7125      	strb	r5, [r4, #4]
/*~~~~~~~ HTTP DOWNLOADER FUNCTIONS ~~~~~~~~~~~~*/
static void configure_nvm()
{
	struct nvm_config config;
	nvm_get_config_defaults(&config);
	config.manual_page_write = false;
    fe44:	7065      	strb	r5, [r4, #1]
	nvm_set_config(&config);
    fe46:	0020      	movs	r0, r4
    fe48:	4bc0      	ldr	r3, [pc, #768]	; (1014c <main+0x444>)
    fe4a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    fe4c:	2601      	movs	r6, #1
    fe4e:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    fe50:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    fe52:	60a5      	str	r5, [r4, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    fe54:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    fe56:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    fe58:	74a6      	strb	r6, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    fe5a:	74e6      	strb	r6, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    fe5c:	7525      	strb	r5, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    fe5e:	2324      	movs	r3, #36	; 0x24
    fe60:	54e5      	strb	r5, [r4, r3]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    fe62:	220c      	movs	r2, #12
    fe64:	2100      	movs	r1, #0
    fe66:	a80c      	add	r0, sp, #48	; 0x30
    fe68:	4bb9      	ldr	r3, [pc, #740]	; (10150 <main+0x448>)
    fe6a:	4798      	blx	r3
static void configure_spi_flash()
{
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	spi_get_config_defaults(&at25dfx_spi_config);
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    fe6c:	4bb9      	ldr	r3, [pc, #740]	; (10154 <main+0x44c>)
    fe6e:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    fe70:	2380      	movs	r3, #128	; 0x80
    fe72:	025b      	lsls	r3, r3, #9
    fe74:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    fe76:	4bb8      	ldr	r3, [pc, #736]	; (10158 <main+0x450>)
    fe78:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    fe7a:	2301      	movs	r3, #1
    fe7c:	425b      	negs	r3, r3
    fe7e:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    fe80:	4bb6      	ldr	r3, [pc, #728]	; (1015c <main+0x454>)
    fe82:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    fe84:	4bb6      	ldr	r3, [pc, #728]	; (10160 <main+0x458>)
    fe86:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    fe88:	4db6      	ldr	r5, [pc, #728]	; (10164 <main+0x45c>)
    fe8a:	0022      	movs	r2, r4
    fe8c:	49b6      	ldr	r1, [pc, #728]	; (10168 <main+0x460>)
    fe8e:	0028      	movs	r0, r5
    fe90:	4bb6      	ldr	r3, [pc, #728]	; (1016c <main+0x464>)
    fe92:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    fe94:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    fe96:	0020      	movs	r0, r4
    fe98:	4b99      	ldr	r3, [pc, #612]	; (10100 <main+0x3f8>)
    fe9a:	4798      	blx	r3
    fe9c:	231f      	movs	r3, #31
    fe9e:	4018      	ands	r0, r3
    fea0:	4086      	lsls	r6, r0
    fea2:	4b98      	ldr	r3, [pc, #608]	; (10104 <main+0x3fc>)
    fea4:	601e      	str	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    fea6:	682a      	ldr	r2, [r5, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    fea8:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    feaa:	2b00      	cmp	r3, #0
    feac:	d1fc      	bne.n	fea8 <main+0x1a0>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    feae:	6822      	ldr	r2, [r4, #0]
    feb0:	3302      	adds	r3, #2
    feb2:	4313      	orrs	r3, r2
    feb4:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
    feb6:	4cae      	ldr	r4, [pc, #696]	; (10170 <main+0x468>)
    feb8:	2304      	movs	r3, #4
    feba:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
    febc:	3303      	adds	r3, #3
    febe:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
    fec0:	4ba8      	ldr	r3, [pc, #672]	; (10164 <main+0x45c>)
    fec2:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    fec4:	a904      	add	r1, sp, #16
    fec6:	2301      	movs	r3, #1
    fec8:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    feca:	2200      	movs	r2, #0
    fecc:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    fece:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    fed0:	2007      	movs	r0, #7
    fed2:	4ba8      	ldr	r3, [pc, #672]	; (10174 <main+0x46c>)
    fed4:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    fed6:	7962      	ldrb	r2, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    fed8:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    feda:	2300      	movs	r3, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    fedc:	2900      	cmp	r1, #0
    fede:	d104      	bne.n	feea <main+0x1e2>
		return &(ports[port_index]->Group[group_index]);
    fee0:	0953      	lsrs	r3, r2, #5
    fee2:	01db      	lsls	r3, r3, #7
    fee4:	49a4      	ldr	r1, [pc, #656]	; (10178 <main+0x470>)
    fee6:	468c      	mov	ip, r1
    fee8:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    feea:	211f      	movs	r1, #31
    feec:	400a      	ands	r2, r1
    feee:	391e      	subs	r1, #30
    fef0:	4091      	lsls	r1, r2

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    fef2:	6199      	str	r1, [r3, #24]
	configure_mqtt();
	nm_bsp_init();
	init_state();
	configure_nvm();
	configure_spi_flash();
	configure_port_pins();
    fef4:	4ba1      	ldr	r3, [pc, #644]	; (1017c <main+0x474>)
    fef6:	4798      	blx	r3
	
	
	printf("I am firmware version %d\r\n", FIRMWARE_VERSION);
    fef8:	2101      	movs	r1, #1
    fefa:	48a1      	ldr	r0, [pc, #644]	; (10180 <main+0x478>)
    fefc:	4c8c      	ldr	r4, [pc, #560]	; (10130 <main+0x428>)
    fefe:	47a0      	blx	r4
	printf("User : %s\r\n", mqtt_user);
    ff00:	49a0      	ldr	r1, [pc, #640]	; (10184 <main+0x47c>)
    ff02:	48a1      	ldr	r0, [pc, #644]	; (10188 <main+0x480>)
    ff04:	47a0      	blx	r4
	printf("Password : %s\r\n", mqtt_pass);
    ff06:	49a1      	ldr	r1, [pc, #644]	; (1018c <main+0x484>)
    ff08:	48a1      	ldr	r0, [pc, #644]	; (10190 <main+0x488>)
    ff0a:	47a0      	blx	r4
	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    ff0c:	2218      	movs	r2, #24
    ff0e:	2100      	movs	r1, #0
    ff10:	a816      	add	r0, sp, #88	; 0x58
    ff12:	4b8f      	ldr	r3, [pc, #572]	; (10150 <main+0x448>)
    ff14:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    ff16:	4b9f      	ldr	r3, [pc, #636]	; (10194 <main+0x48c>)
    ff18:	9316      	str	r3, [sp, #88]	; 0x58
	ret = m2m_wifi_init(&param);
    ff1a:	a816      	add	r0, sp, #88	; 0x58
    ff1c:	4b9e      	ldr	r3, [pc, #632]	; (10198 <main+0x490>)
    ff1e:	4798      	blx	r3
    ff20:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    ff22:	d003      	beq.n	ff2c <main+0x224>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    ff24:	489d      	ldr	r0, [pc, #628]	; (1019c <main+0x494>)
    ff26:	4b82      	ldr	r3, [pc, #520]	; (10130 <main+0x428>)
    ff28:	4798      	blx	r3
    ff2a:	e7fe      	b.n	ff2a <main+0x222>
		while (1) { /* Loop forever. */
		}
	}

	/* Initialize socket interface. */
	socketInit();
    ff2c:	4b9c      	ldr	r3, [pc, #624]	; (101a0 <main+0x498>)
    ff2e:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    ff30:	499c      	ldr	r1, [pc, #624]	; (101a4 <main+0x49c>)
    ff32:	489d      	ldr	r0, [pc, #628]	; (101a8 <main+0x4a0>)
    ff34:	4b9d      	ldr	r3, [pc, #628]	; (101ac <main+0x4a4>)
    ff36:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    ff38:	23ff      	movs	r3, #255	; 0xff
    ff3a:	9300      	str	r3, [sp, #0]
    ff3c:	4b9c      	ldr	r3, [pc, #624]	; (101b0 <main+0x4a8>)
    ff3e:	2202      	movs	r2, #2
    ff40:	2116      	movs	r1, #22
    ff42:	489c      	ldr	r0, [pc, #624]	; (101b4 <main+0x4ac>)
    ff44:	4c9c      	ldr	r4, [pc, #624]	; (101b8 <main+0x4b0>)
    ff46:	47a0      	blx	r4
int main(void)
{
	tstrWifiInitParam param;
	int8_t ret;
	int lastSenseFL0 = 0;
	int lastSenseFL1 = 0;
    ff48:	2400      	movs	r4, #0

int main(void)
{
	tstrWifiInitParam param;
	int8_t ret;
	int lastSenseFL0 = 0;
    ff4a:	0025      	movs	r5, r4
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    ff4c:	4f8a      	ldr	r7, [pc, #552]	; (10178 <main+0x470>)
    ff4e:	3780      	adds	r7, #128	; 0x80
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
			MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);

	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    ff50:	2000      	movs	r0, #0
    ff52:	4b9a      	ldr	r3, [pc, #616]	; (101bc <main+0x4b4>)
    ff54:	4798      	blx	r3
		/* Try to read user input from USART. */
		usart_read_job(&cdc_uart_module, &uart_ch_buffer);
    ff56:	499a      	ldr	r1, [pc, #616]	; (101c0 <main+0x4b8>)
    ff58:	485d      	ldr	r0, [pc, #372]	; (100d0 <main+0x3c8>)
    ff5a:	4b9a      	ldr	r3, [pc, #616]	; (101c4 <main+0x4bc>)
    ff5c:	4798      	blx	r3
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    ff5e:	486b      	ldr	r0, [pc, #428]	; (1010c <main+0x404>)
    ff60:	4b99      	ldr	r3, [pc, #612]	; (101c8 <main+0x4c0>)
    ff62:	4798      	blx	r3
    ff64:	6a3a      	ldr	r2, [r7, #32]
    ff66:	2380      	movs	r3, #128	; 0x80
    ff68:	03db      	lsls	r3, r3, #15
    ff6a:	401a      	ands	r2, r3
		/* Checks the USART buffer. */
		//check_usart_buffer(topic);
		int sensedFL0 = !port_pin_get_input_level(FL0);
    ff6c:	4251      	negs	r1, r2
    ff6e:	4151      	adcs	r1, r2
    ff70:	9102      	str	r1, [sp, #8]
    ff72:	6a38      	ldr	r0, [r7, #32]
    ff74:	2380      	movs	r3, #128	; 0x80
    ff76:	041b      	lsls	r3, r3, #16
    ff78:	4003      	ands	r3, r0
		int sensedFL1 = !port_pin_get_input_level(FL1);
    ff7a:	425e      	negs	r6, r3
    ff7c:	415e      	adcs	r6, r3
    ff7e:	9603      	str	r6, [sp, #12]
    ff80:	46b0      	mov	r8, r6
		
		if (sensedFL1 && sensedFL0) {
    ff82:	2b00      	cmp	r3, #0
    ff84:	d109      	bne.n	ff9a <main+0x292>
    ff86:	2a00      	cmp	r2, #0
    ff88:	d000      	beq.n	ff8c <main+0x284>
    ff8a:	e23d      	b.n	10408 <main+0x700>
			drain = true;
    ff8c:	2001      	movs	r0, #1
    ff8e:	4a8f      	ldr	r2, [pc, #572]	; (101cc <main+0x4c4>)
    ff90:	7010      	strb	r0, [r2, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    ff92:	2220      	movs	r2, #32
    ff94:	4878      	ldr	r0, [pc, #480]	; (10178 <main+0x470>)
    ff96:	6182      	str	r2, [r0, #24]
    ff98:	e002      	b.n	ffa0 <main+0x298>
			port_pin_set_output_level(RELAY, true);
		}
		if (sensedFL0) {
    ff9a:	2a00      	cmp	r2, #0
    ff9c:	d000      	beq.n	ffa0 <main+0x298>
    ff9e:	e23c      	b.n	1041a <main+0x712>
    ffa0:	2280      	movs	r2, #128	; 0x80
    ffa2:	00d2      	lsls	r2, r2, #3
    ffa4:	61ba      	str	r2, [r7, #24]
    ffa6:	e005      	b.n	ffb4 <main+0x2ac>
			port_pin_set_output_level(LED_0_PIN, true);
		}
		else {
			port_pin_set_output_level(LED_0_PIN, false);
			if (drain) {
				drain = false;
    ffa8:	2000      	movs	r0, #0
    ffaa:	4a88      	ldr	r2, [pc, #544]	; (101cc <main+0x4c4>)
    ffac:	7010      	strb	r0, [r2, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    ffae:	2220      	movs	r2, #32
    ffb0:	4871      	ldr	r0, [pc, #452]	; (10178 <main+0x470>)
    ffb2:	6142      	str	r2, [r0, #20]
				port_pin_set_output_level(RELAY, false);
			}
		}
		if (sensedFL1) {
    ffb4:	2b00      	cmp	r3, #0
    ffb6:	d103      	bne.n	ffc0 <main+0x2b8>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    ffb8:	2380      	movs	r3, #128	; 0x80
    ffba:	011b      	lsls	r3, r3, #4
    ffbc:	61bb      	str	r3, [r7, #24]
    ffbe:	e002      	b.n	ffc6 <main+0x2be>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    ffc0:	2380      	movs	r3, #128	; 0x80
    ffc2:	011b      	lsls	r3, r3, #4
    ffc4:	617b      	str	r3, [r7, #20]
		else {
			port_pin_set_output_level(LED_1_PIN, true);
		}
		*/
		
		if (sensedFL0 != lastSenseFL0) {
    ffc6:	428d      	cmp	r5, r1
    ffc8:	d014      	beq.n	fff4 <main+0x2ec>
			sprintf(pub_text, "%d", sensedFL0);
    ffca:	4d81      	ldr	r5, [pc, #516]	; (101d0 <main+0x4c8>)
    ffcc:	9e02      	ldr	r6, [sp, #8]
    ffce:	0032      	movs	r2, r6
    ffd0:	4980      	ldr	r1, [pc, #512]	; (101d4 <main+0x4cc>)
    ffd2:	0028      	movs	r0, r5
    ffd4:	4b80      	ldr	r3, [pc, #512]	; (101d8 <main+0x4d0>)
    ffd6:	4798      	blx	r3
			printf("Sensed FL0: %d\r\n", sensedFL0);
    ffd8:	0031      	movs	r1, r6
    ffda:	4880      	ldr	r0, [pc, #512]	; (101dc <main+0x4d4>)
    ffdc:	4b54      	ldr	r3, [pc, #336]	; (10130 <main+0x428>)
    ffde:	4798      	blx	r3
			mqtt_publish(&mqtt_inst, FL0_TOPIC, pub_text, 8, QOS, 1);
    ffe0:	2301      	movs	r3, #1
    ffe2:	9301      	str	r3, [sp, #4]
    ffe4:	3301      	adds	r3, #1
    ffe6:	9300      	str	r3, [sp, #0]
    ffe8:	3306      	adds	r3, #6
    ffea:	002a      	movs	r2, r5
    ffec:	497c      	ldr	r1, [pc, #496]	; (101e0 <main+0x4d8>)
    ffee:	484d      	ldr	r0, [pc, #308]	; (10124 <main+0x41c>)
    fff0:	4d7c      	ldr	r5, [pc, #496]	; (101e4 <main+0x4dc>)
    fff2:	47a8      	blx	r5
			lastSenseFL0 = sensedFL0;
		}
		if (sensedFL1 != lastSenseFL1) {
    fff4:	4544      	cmp	r4, r8
    fff6:	d014      	beq.n	10022 <main+0x31a>
			sprintf(pub_text, "%d", sensedFL1);
    fff8:	4c75      	ldr	r4, [pc, #468]	; (101d0 <main+0x4c8>)
    fffa:	9d03      	ldr	r5, [sp, #12]
    fffc:	002a      	movs	r2, r5
    fffe:	4975      	ldr	r1, [pc, #468]	; (101d4 <main+0x4cc>)
   10000:	0020      	movs	r0, r4
   10002:	4b75      	ldr	r3, [pc, #468]	; (101d8 <main+0x4d0>)
   10004:	4798      	blx	r3
			printf("Sensed FL1: %d\r\n", sensedFL1);
   10006:	0029      	movs	r1, r5
   10008:	4877      	ldr	r0, [pc, #476]	; (101e8 <main+0x4e0>)
   1000a:	4b49      	ldr	r3, [pc, #292]	; (10130 <main+0x428>)
   1000c:	4798      	blx	r3
			mqtt_publish(&mqtt_inst, FL1_TOPIC, pub_text, 8, QOS, 1);
   1000e:	2301      	movs	r3, #1
   10010:	9301      	str	r3, [sp, #4]
   10012:	3301      	adds	r3, #1
   10014:	9300      	str	r3, [sp, #0]
   10016:	3306      	adds	r3, #6
   10018:	0022      	movs	r2, r4
   1001a:	4974      	ldr	r1, [pc, #464]	; (101ec <main+0x4e4>)
   1001c:	4841      	ldr	r0, [pc, #260]	; (10124 <main+0x41c>)
   1001e:	4c71      	ldr	r4, [pc, #452]	; (101e4 <main+0x4dc>)
   10020:	47a0      	blx	r4
			lastSenseFL1 = sensedFL1;
		}	
		delay_ms(50);
   10022:	2032      	movs	r0, #50	; 0x32
   10024:	4b72      	ldr	r3, [pc, #456]	; (101f0 <main+0x4e8>)
   10026:	4798      	blx	r3
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
   10028:	4b53      	ldr	r3, [pc, #332]	; (10178 <main+0x470>)
   1002a:	6a1b      	ldr	r3, [r3, #32]
		if (port_pin_get_input_level(B1) == false) {
   1002c:	065b      	lsls	r3, r3, #25
   1002e:	d430      	bmi.n	10092 <main+0x38a>
   10030:	6a3b      	ldr	r3, [r7, #32]
			else {
				port_pin_set_output_level(RELAY, true);
			}
			delay_ms(300);*/
			
			int sensedFL0 = !port_pin_get_input_level(FL0);
   10032:	0d9b      	lsrs	r3, r3, #22
   10034:	2401      	movs	r4, #1
   10036:	0025      	movs	r5, r4
   10038:	439d      	bics	r5, r3
   1003a:	6a3b      	ldr	r3, [r7, #32]
			int sensedFL1 = !port_pin_get_input_level(FL1);
   1003c:	0ddb      	lsrs	r3, r3, #23
   1003e:	0022      	movs	r2, r4
   10040:	439a      	bics	r2, r3
   10042:	0016      	movs	r6, r2
			sprintf(pub_text, "%d", sensedFL0);
   10044:	002a      	movs	r2, r5
   10046:	4963      	ldr	r1, [pc, #396]	; (101d4 <main+0x4cc>)
   10048:	4861      	ldr	r0, [pc, #388]	; (101d0 <main+0x4c8>)
   1004a:	4b63      	ldr	r3, [pc, #396]	; (101d8 <main+0x4d0>)
   1004c:	469a      	mov	sl, r3
   1004e:	4798      	blx	r3
			printf("Sensed FL0: %d\r\n", sensedFL0);
   10050:	0029      	movs	r1, r5
   10052:	4862      	ldr	r0, [pc, #392]	; (101dc <main+0x4d4>)
   10054:	4b36      	ldr	r3, [pc, #216]	; (10130 <main+0x428>)
   10056:	469b      	mov	fp, r3
   10058:	4798      	blx	r3
			mqtt_publish(&mqtt_inst, FL0_TOPIC, pub_text, 8, QOS, 1);
   1005a:	9401      	str	r4, [sp, #4]
   1005c:	2302      	movs	r3, #2
   1005e:	4699      	mov	r9, r3
   10060:	9300      	str	r3, [sp, #0]
   10062:	3306      	adds	r3, #6
   10064:	4a5a      	ldr	r2, [pc, #360]	; (101d0 <main+0x4c8>)
   10066:	495e      	ldr	r1, [pc, #376]	; (101e0 <main+0x4d8>)
   10068:	482e      	ldr	r0, [pc, #184]	; (10124 <main+0x41c>)
   1006a:	4d5e      	ldr	r5, [pc, #376]	; (101e4 <main+0x4dc>)
   1006c:	47a8      	blx	r5
			sprintf(pub_text, "%d", sensedFL1);
   1006e:	0032      	movs	r2, r6
   10070:	4958      	ldr	r1, [pc, #352]	; (101d4 <main+0x4cc>)
   10072:	4857      	ldr	r0, [pc, #348]	; (101d0 <main+0x4c8>)
   10074:	47d0      	blx	sl
			printf("Sensed FL1: %d\r\n", sensedFL1);
   10076:	0031      	movs	r1, r6
   10078:	485b      	ldr	r0, [pc, #364]	; (101e8 <main+0x4e0>)
   1007a:	47d8      	blx	fp
			mqtt_publish(&mqtt_inst, FL1_TOPIC, pub_text, 8, QOS, 1);
   1007c:	9401      	str	r4, [sp, #4]
   1007e:	464b      	mov	r3, r9
   10080:	9300      	str	r3, [sp, #0]
   10082:	3306      	adds	r3, #6
   10084:	4a52      	ldr	r2, [pc, #328]	; (101d0 <main+0x4c8>)
   10086:	4959      	ldr	r1, [pc, #356]	; (101ec <main+0x4e4>)
   10088:	4826      	ldr	r0, [pc, #152]	; (10124 <main+0x41c>)
   1008a:	47a8      	blx	r5
			delay_ms(50);
   1008c:	2032      	movs	r0, #50	; 0x32
   1008e:	4b58      	ldr	r3, [pc, #352]	; (101f0 <main+0x4e8>)
   10090:	4798      	blx	r3
   10092:	9d02      	ldr	r5, [sp, #8]
   10094:	9c03      	ldr	r4, [sp, #12]
			//write_firmware = true;
		}
		
		if (write_firmware) {
   10096:	4b57      	ldr	r3, [pc, #348]	; (101f4 <main+0x4ec>)
   10098:	781b      	ldrb	r3, [r3, #0]
   1009a:	2b00      	cmp	r3, #0
   1009c:	d100      	bne.n	100a0 <main+0x398>
   1009e:	e757      	b.n	ff50 <main+0x248>
			printf("Write_firmware was true\r\n");
   100a0:	4855      	ldr	r0, [pc, #340]	; (101f8 <main+0x4f0>)
   100a2:	4b56      	ldr	r3, [pc, #344]	; (101fc <main+0x4f4>)
   100a4:	4798      	blx	r3
			socketDeinit();
   100a6:	4b56      	ldr	r3, [pc, #344]	; (10200 <main+0x4f8>)
   100a8:	4798      	blx	r3
			mqtt_deinit(&mqtt_inst);
   100aa:	481e      	ldr	r0, [pc, #120]	; (10124 <main+0x41c>)
   100ac:	4b55      	ldr	r3, [pc, #340]	; (10204 <main+0x4fc>)
   100ae:	4798      	blx	r3
			ret = m2m_wifi_deinit(&param);
   100b0:	a816      	add	r0, sp, #88	; 0x58
   100b2:	4b55      	ldr	r3, [pc, #340]	; (10208 <main+0x500>)
   100b4:	4798      	blx	r3
   100b6:	1e01      	subs	r1, r0, #0
			if (M2M_SUCCESS != ret) {
   100b8:	d100      	bne.n	100bc <main+0x3b4>
   100ba:	e0a9      	b.n	10210 <main+0x508>
				printf("main: m2m_wifi_deinit call error!(%d)\r\n", ret);
   100bc:	4853      	ldr	r0, [pc, #332]	; (1020c <main+0x504>)
   100be:	4b1c      	ldr	r3, [pc, #112]	; (10130 <main+0x428>)
   100c0:	4798      	blx	r3
   100c2:	e7fe      	b.n	100c2 <main+0x3ba>
   100c4:	0000da21 	.word	0x0000da21
   100c8:	00160002 	.word	0x00160002
   100cc:	00150003 	.word	0x00150003
   100d0:	20000120 	.word	0x20000120
   100d4:	20000464 	.word	0x20000464
   100d8:	0000f661 	.word	0x0000f661
   100dc:	20000460 	.word	0x20000460
   100e0:	0000f635 	.word	0x0000f635
   100e4:	2000045c 	.word	0x2000045c
   100e8:	42001400 	.word	0x42001400
   100ec:	0000ccad 	.word	0x0000ccad
   100f0:	2000007c 	.word	0x2000007c
   100f4:	000119f5 	.word	0x000119f5
   100f8:	0000f495 	.word	0x0000f495
   100fc:	0000d0d9 	.word	0x0000d0d9
   10100:	0000c63d 	.word	0x0000c63d
   10104:	e000e100 	.word	0xe000e100
   10108:	0000f2ed 	.word	0x0000f2ed
   1010c:	20000c74 	.word	0x20000c74
   10110:	0000f2f9 	.word	0x0000f2f9
   10114:	0000f3a5 	.word	0x0000f3a5
   10118:	0001059d 	.word	0x0001059d
   1011c:	20000164 	.word	0x20000164
   10120:	0000075b 	.word	0x0000075b
   10124:	200001e4 	.word	0x200001e4
   10128:	000105c1 	.word	0x000105c1
   1012c:	000147a8 	.word	0x000147a8
   10130:	0001189d 	.word	0x0001189d
   10134:	0000f679 	.word	0x0000f679
   10138:	00010691 	.word	0x00010691
   1013c:	000147dc 	.word	0x000147dc
   10140:	00008b35 	.word	0x00008b35
   10144:	20000154 	.word	0x20000154
   10148:	41004000 	.word	0x41004000
   1014c:	0000bfb9 	.word	0x0000bfb9
   10150:	00011755 	.word	0x00011755
   10154:	0001d4c0 	.word	0x0001d4c0
   10158:	00100002 	.word	0x00100002
   1015c:	00120002 	.word	0x00120002
   10160:	00130002 	.word	0x00130002
   10164:	20000db4 	.word	0x20000db4
   10168:	42000c00 	.word	0x42000c00
   1016c:	0000c6c9 	.word	0x0000c6c9
   10170:	20000c6c 	.word	0x20000c6c
   10174:	0000c251 	.word	0x0000c251
   10178:	41004400 	.word	0x41004400
   1017c:	0000f9d1 	.word	0x0000f9d1
   10180:	00014810 	.word	0x00014810
   10184:	2000000c 	.word	0x2000000c
   10188:	0001482c 	.word	0x0001482c
   1018c:	20000014 	.word	0x20000014
   10190:	00014838 	.word	0x00014838
   10194:	0000f59d 	.word	0x0000f59d
   10198:	00009a85 	.word	0x00009a85
   1019c:	00014848 	.word	0x00014848
   101a0:	0000b699 	.word	0x0000b699
   101a4:	0000f585 	.word	0x0000f585
   101a8:	0000f591 	.word	0x0000f591
   101ac:	0000b719 	.word	0x0000b719
   101b0:	00014410 	.word	0x00014410
   101b4:	0001441c 	.word	0x0001441c
   101b8:	00009e61 	.word	0x00009e61
   101bc:	00009bd1 	.word	0x00009bd1
   101c0:	20000160 	.word	0x20000160
   101c4:	0000d0f1 	.word	0x0000d0f1
   101c8:	0000f43d 	.word	0x0000f43d
   101cc:	200002a0 	.word	0x200002a0
   101d0:	20000260 	.word	0x20000260
   101d4:	00014544 	.word	0x00014544
   101d8:	00011b69 	.word	0x00011b69
   101dc:	00014870 	.word	0x00014870
   101e0:	0001456c 	.word	0x0001456c
   101e4:	00010ab9 	.word	0x00010ab9
   101e8:	00014884 	.word	0x00014884
   101ec:	00014594 	.word	0x00014594
   101f0:	00008aad 	.word	0x00008aad
   101f4:	20000258 	.word	0x20000258
   101f8:	00014898 	.word	0x00014898
   101fc:	000119bd 	.word	0x000119bd
   10200:	0000b6dd 	.word	0x0000b6dd
   10204:	0001064d 	.word	0x0001064d
   10208:	00009bb5 	.word	0x00009bb5
   1020c:	000148b4 	.word	0x000148b4
static void configure_http_client(void)
{
	struct http_client_config httpc_conf;
	int ret;

	http_client_get_config_defaults(&httpc_conf);
   10210:	a806      	add	r0, sp, #24
   10212:	4b86      	ldr	r3, [pc, #536]	; (1042c <main+0x724>)
   10214:	4798      	blx	r3

	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   10216:	2380      	movs	r3, #128	; 0x80
   10218:	00db      	lsls	r3, r3, #3
   1021a:	930a      	str	r3, [sp, #40]	; 0x28
	httpc_conf.timer_inst = &swt_module_inst;
   1021c:	4b84      	ldr	r3, [pc, #528]	; (10430 <main+0x728>)
   1021e:	9307      	str	r3, [sp, #28]

	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   10220:	a906      	add	r1, sp, #24
   10222:	4884      	ldr	r0, [pc, #528]	; (10434 <main+0x72c>)
   10224:	4b84      	ldr	r3, [pc, #528]	; (10438 <main+0x730>)
   10226:	4798      	blx	r3
   10228:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
   1022a:	da03      	bge.n	10234 <main+0x52c>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   1022c:	4883      	ldr	r0, [pc, #524]	; (1043c <main+0x734>)
   1022e:	4b84      	ldr	r3, [pc, #528]	; (10440 <main+0x738>)
   10230:	4798      	blx	r3
   10232:	e7fe      	b.n	10232 <main+0x52a>
		while (1) {
		} // Loop forever
	}

	http_client_register_callback(&http_client_module_inst, http_client_callback);
   10234:	4983      	ldr	r1, [pc, #524]	; (10444 <main+0x73c>)
   10236:	487f      	ldr	r0, [pc, #508]	; (10434 <main+0x72c>)
   10238:	4b83      	ldr	r3, [pc, #524]	; (10448 <main+0x740>)
   1023a:	4798      	blx	r3
				while (1) { /* Loop forever. */
				}
			}
			/* ~~~~~~~~~~~~~~~~Begin HTTP client init~~~~~~~~~~~~~~~~~~*/
			configure_http_client();
			param.pfAppWifiCb = wifi_cb;
   1023c:	4b83      	ldr	r3, [pc, #524]	; (1044c <main+0x744>)
   1023e:	9316      	str	r3, [sp, #88]	; 0x58
			ret = m2m_wifi_init(&param);
   10240:	a816      	add	r0, sp, #88	; 0x58
   10242:	4b83      	ldr	r3, [pc, #524]	; (10450 <main+0x748>)
   10244:	4798      	blx	r3
   10246:	1e01      	subs	r1, r0, #0
			if (M2M_SUCCESS != ret) {
   10248:	d003      	beq.n	10252 <main+0x54a>
				printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   1024a:	4882      	ldr	r0, [pc, #520]	; (10454 <main+0x74c>)
   1024c:	4b7c      	ldr	r3, [pc, #496]	; (10440 <main+0x738>)
   1024e:	4798      	blx	r3
   10250:	e7fe      	b.n	10250 <main+0x548>
				while (1) {
				}
			}
			
			socketInit();
   10252:	4b81      	ldr	r3, [pc, #516]	; (10458 <main+0x750>)
   10254:	4798      	blx	r3
			registerSocketCallback(socket_cb, resolve_cb);
   10256:	4981      	ldr	r1, [pc, #516]	; (1045c <main+0x754>)
   10258:	4881      	ldr	r0, [pc, #516]	; (10460 <main+0x758>)
   1025a:	4b82      	ldr	r3, [pc, #520]	; (10464 <main+0x75c>)
   1025c:	4798      	blx	r3
			printf("Survived http client setup\r\n");
   1025e:	4882      	ldr	r0, [pc, #520]	; (10468 <main+0x760>)
   10260:	4b82      	ldr	r3, [pc, #520]	; (1046c <main+0x764>)
   10262:	4798      	blx	r3
}

static Firmware_Status_t getFWStat()
{
	status_code_genare_t error_code;
	uint8_t read_buffer[NVMCTRL_PAGE_SIZE]={0};
   10264:	2240      	movs	r2, #64	; 0x40
   10266:	2100      	movs	r1, #0
   10268:	a806      	add	r0, sp, #24
   1026a:	4b81      	ldr	r3, [pc, #516]	; (10470 <main+0x768>)
   1026c:	4798      	blx	r3
	do
	{
		error_code = nvm_read_buffer(FW_STAT_ADDRESS, read_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   1026e:	25fe      	movs	r5, #254	; 0xfe
   10270:	01ed      	lsls	r5, r5, #7
   10272:	4c80      	ldr	r4, [pc, #512]	; (10474 <main+0x76c>)
   10274:	2240      	movs	r2, #64	; 0x40
   10276:	a906      	add	r1, sp, #24
   10278:	0028      	movs	r0, r5
   1027a:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
   1027c:	2805      	cmp	r0, #5
   1027e:	d0f9      	beq.n	10274 <main+0x56c>
	Firmware_Status_t thisFW;
	thisFW.signature[0]			= read_buffer[0];
	thisFW.signature[1]			= read_buffer[1];
	thisFW.signature[2]			= read_buffer[2];
	thisFW.signature[3]			= read_buffer[3];
	thisFW.executing_image		= read_buffer[4];
   10280:	ab06      	add	r3, sp, #24
   10282:	791b      	ldrb	r3, [r3, #4]
   10284:	4698      	mov	r8, r3
			Firmware_Status_t fw_status = getFWStat();
			if (fw_status.executing_image == 1) {
				fw_status.downloaded_image = 2;
			}
			else {
				fw_status.downloaded_image = 1;
   10286:	1e5d      	subs	r5, r3, #1
   10288:	426a      	negs	r2, r5
   1028a:	416a      	adcs	r2, r5
   1028c:	1c55      	adds	r5, r2, #1
			}
			printf("Executing image: %d, DL to: %d\r\n", fw_status.executing_image, fw_status.downloaded_image);
   1028e:	002a      	movs	r2, r5
   10290:	4641      	mov	r1, r8
   10292:	4879      	ldr	r0, [pc, #484]	; (10478 <main+0x770>)
   10294:	4b6a      	ldr	r3, [pc, #424]	; (10440 <main+0x738>)
   10296:	4699      	mov	r9, r3
   10298:	4798      	blx	r3
			firstCRC=true;
   1029a:	2201      	movs	r2, #1
   1029c:	4b77      	ldr	r3, [pc, #476]	; (1047c <main+0x774>)
   1029e:	701a      	strb	r2, [r3, #0]
	http_client_register_callback(&http_client_module_inst, http_client_callback);
}

static void download_firmware(unsigned int slot)
{
	flash_addr = 0x40000 * slot; //Starting addr on flash where downloaded file is stored
   102a0:	4e77      	ldr	r6, [pc, #476]	; (10480 <main+0x778>)
   102a2:	04ab      	lsls	r3, r5, #18
   102a4:	6033      	str	r3, [r6, #0]
	at25dfx_chip_wake(&at25dfx_chip);
   102a6:	4c77      	ldr	r4, [pc, #476]	; (10484 <main+0x77c>)
   102a8:	0020      	movs	r0, r4
   102aa:	4b77      	ldr	r3, [pc, #476]	; (10488 <main+0x780>)
   102ac:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
   102ae:	0020      	movs	r0, r4
   102b0:	4b76      	ldr	r3, [pc, #472]	; (1048c <main+0x784>)
   102b2:	4798      	blx	r3
		// Handle missing or non-responsive device
	}
	
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
   102b4:	2100      	movs	r1, #0
   102b6:	0020      	movs	r0, r4
   102b8:	4b75      	ldr	r3, [pc, #468]	; (10490 <main+0x788>)
   102ba:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr, AT25DFX_BLOCK_SIZE_64KB);	// erase block
   102bc:	2202      	movs	r2, #2
   102be:	6831      	ldr	r1, [r6, #0]
   102c0:	0020      	movs	r0, r4
   102c2:	4f74      	ldr	r7, [pc, #464]	; (10494 <main+0x78c>)
   102c4:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x10000, AT25DFX_BLOCK_SIZE_64KB);
   102c6:	6833      	ldr	r3, [r6, #0]
   102c8:	2280      	movs	r2, #128	; 0x80
   102ca:	0252      	lsls	r2, r2, #9
   102cc:	4694      	mov	ip, r2
   102ce:	4463      	add	r3, ip
   102d0:	0019      	movs	r1, r3
   102d2:	2202      	movs	r2, #2
   102d4:	0020      	movs	r0, r4
   102d6:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x20000, AT25DFX_BLOCK_SIZE_64KB);
   102d8:	6833      	ldr	r3, [r6, #0]
   102da:	2280      	movs	r2, #128	; 0x80
   102dc:	0292      	lsls	r2, r2, #10
   102de:	4694      	mov	ip, r2
   102e0:	4463      	add	r3, ip
   102e2:	0019      	movs	r1, r3
   102e4:	2202      	movs	r2, #2
   102e6:	0020      	movs	r0, r4
   102e8:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x30000, AT25DFX_BLOCK_SIZE_64KB);
   102ea:	6831      	ldr	r1, [r6, #0]
   102ec:	23c0      	movs	r3, #192	; 0xc0
   102ee:	029b      	lsls	r3, r3, #10
   102f0:	469c      	mov	ip, r3
   102f2:	4461      	add	r1, ip
   102f4:	2202      	movs	r2, #2
   102f6:	0020      	movs	r0, r4
   102f8:	47b8      	blx	r7
	
	/* Connect to router and download stuff and store it in flash */
	printf("download_firmware: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   102fa:	4c67      	ldr	r4, [pc, #412]	; (10498 <main+0x790>)
   102fc:	0021      	movs	r1, r4
   102fe:	4867      	ldr	r0, [pc, #412]	; (1049c <main+0x794>)
   10300:	47c8      	blx	r9
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   10302:	23ff      	movs	r3, #255	; 0xff
   10304:	9300      	str	r3, [sp, #0]
   10306:	4b66      	ldr	r3, [pc, #408]	; (104a0 <main+0x798>)
   10308:	2202      	movs	r2, #2
   1030a:	2116      	movs	r1, #22
   1030c:	0020      	movs	r0, r4
   1030e:	4c65      	ldr	r4, [pc, #404]	; (104a4 <main+0x79c>)
   10310:	47a0      	blx	r4
	down_state |= mask;
}

static inline bool is_state_set(download_state mask)
{
	return ((down_state & mask) != 0);
   10312:	4b65      	ldr	r3, [pc, #404]	; (104a8 <main+0x7a0>)
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x30000, AT25DFX_BLOCK_SIZE_64KB);
	
	/* Connect to router and download stuff and store it in flash */
	printf("download_firmware: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   10314:	781a      	ldrb	r2, [r3, #0]
   10316:	2330      	movs	r3, #48	; 0x30
   10318:	421a      	tst	r2, r3
   1031a:	d10b      	bne.n	10334 <main+0x62c>
		m2m_wifi_handle_events(NULL);
   1031c:	4f63      	ldr	r7, [pc, #396]	; (104ac <main+0x7a4>)
		sw_timer_task(&swt_module_inst);
   1031e:	4e44      	ldr	r6, [pc, #272]	; (10430 <main+0x728>)
   10320:	4c63      	ldr	r4, [pc, #396]	; (104b0 <main+0x7a8>)
	
	/* Connect to router and download stuff and store it in flash */
	printf("download_firmware: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
		m2m_wifi_handle_events(NULL);
   10322:	2000      	movs	r0, #0
   10324:	47b8      	blx	r7
		sw_timer_task(&swt_module_inst);
   10326:	0030      	movs	r0, r6
   10328:	47a0      	blx	r4
	down_state |= mask;
}

static inline bool is_state_set(download_state mask)
{
	return ((down_state & mask) != 0);
   1032a:	4b5f      	ldr	r3, [pc, #380]	; (104a8 <main+0x7a0>)
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x30000, AT25DFX_BLOCK_SIZE_64KB);
	
	/* Connect to router and download stuff and store it in flash */
	printf("download_firmware: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1032c:	781b      	ldrb	r3, [r3, #0]
   1032e:	2230      	movs	r2, #48	; 0x30
   10330:	421a      	tst	r2, r3
   10332:	d0f6      	beq.n	10322 <main+0x61a>
		m2m_wifi_handle_events(NULL);
		sw_timer_task(&swt_module_inst);
	}
	printf("download_firmware: done.\r\n");
   10334:	485f      	ldr	r0, [pc, #380]	; (104b4 <main+0x7ac>)
   10336:	4b4d      	ldr	r3, [pc, #308]	; (1046c <main+0x764>)
   10338:	4798      	blx	r3
	printf("Calculated CRC: %x\r\n", (uint32_t)crcChecker);
   1033a:	4b5f      	ldr	r3, [pc, #380]	; (104b8 <main+0x7b0>)
   1033c:	6819      	ldr	r1, [r3, #0]
   1033e:	485f      	ldr	r0, [pc, #380]	; (104bc <main+0x7b4>)
   10340:	4b3f      	ldr	r3, [pc, #252]	; (10440 <main+0x738>)
   10342:	4798      	blx	r3
	down_state = NOT_READY;
}

static void clear_state(download_state mask)
{
	down_state &= ~mask;
   10344:	4c58      	ldr	r4, [pc, #352]	; (104a8 <main+0x7a0>)
   10346:	7823      	ldrb	r3, [r4, #0]
   10348:	223c      	movs	r2, #60	; 0x3c
   1034a:	4393      	bics	r3, r2
   1034c:	7023      	strb	r3, [r4, #0]
	}
	printf("download_firmware: done.\r\n");
	printf("Calculated CRC: %x\r\n", (uint32_t)crcChecker);
	
	clear_state(COMPLETED|DOWNLOADING|GET_REQUESTED|CANCELED);
	download_CRC = true;
   1034e:	3a3b      	subs	r2, #59	; 0x3b
   10350:	4b5b      	ldr	r3, [pc, #364]	; (104c0 <main+0x7b8>)
   10352:	701a      	strb	r2, [r3, #0]
	start_download();
   10354:	4b5b      	ldr	r3, [pc, #364]	; (104c4 <main+0x7bc>)
   10356:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   10358:	7822      	ldrb	r2, [r4, #0]
   1035a:	2330      	movs	r3, #48	; 0x30
   1035c:	421a      	tst	r2, r3
   1035e:	d10b      	bne.n	10378 <main+0x670>
		m2m_wifi_handle_events(NULL);
   10360:	4f52      	ldr	r7, [pc, #328]	; (104ac <main+0x7a4>)
		sw_timer_task(&swt_module_inst);
   10362:	4e33      	ldr	r6, [pc, #204]	; (10430 <main+0x728>)
   10364:	4c52      	ldr	r4, [pc, #328]	; (104b0 <main+0x7a8>)
	
	clear_state(COMPLETED|DOWNLOADING|GET_REQUESTED|CANCELED);
	download_CRC = true;
	start_download();
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
		m2m_wifi_handle_events(NULL);
   10366:	2000      	movs	r0, #0
   10368:	47b8      	blx	r7
		sw_timer_task(&swt_module_inst);
   1036a:	0030      	movs	r0, r6
   1036c:	47a0      	blx	r4
	down_state |= mask;
}

static inline bool is_state_set(download_state mask)
{
	return ((down_state & mask) != 0);
   1036e:	4b4e      	ldr	r3, [pc, #312]	; (104a8 <main+0x7a0>)
	printf("Calculated CRC: %x\r\n", (uint32_t)crcChecker);
	
	clear_state(COMPLETED|DOWNLOADING|GET_REQUESTED|CANCELED);
	download_CRC = true;
	start_download();
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   10370:	781b      	ldrb	r3, [r3, #0]
   10372:	2230      	movs	r2, #48	; 0x30
   10374:	421a      	tst	r2, r3
   10376:	d0f6      	beq.n	10366 <main+0x65e>
		m2m_wifi_handle_events(NULL);
		sw_timer_task(&swt_module_inst);
	}
	
	download_CRC = false;
   10378:	2200      	movs	r2, #0
   1037a:	4b51      	ldr	r3, [pc, #324]	; (104c0 <main+0x7b8>)
   1037c:	701a      	strb	r2, [r3, #0]
				fw_status.downloaded_image = 1;
			}
			printf("Executing image: %d, DL to: %d\r\n", fw_status.executing_image, fw_status.downloaded_image);
			firstCRC=true;
			download_firmware(fw_status.downloaded_image);
			printf("\n\rMain: Done downloading firmware and CRC\n\r");
   1037e:	4852      	ldr	r0, [pc, #328]	; (104c8 <main+0x7c0>)
   10380:	4b2f      	ldr	r3, [pc, #188]	; (10440 <main+0x738>)
   10382:	4798      	blx	r3
			if (dlCRC == crcChecker){
   10384:	4b51      	ldr	r3, [pc, #324]	; (104cc <main+0x7c4>)
   10386:	681a      	ldr	r2, [r3, #0]
   10388:	4b4b      	ldr	r3, [pc, #300]	; (104b8 <main+0x7b0>)
   1038a:	681b      	ldr	r3, [r3, #0]
   1038c:	429a      	cmp	r2, r3
   1038e:	d130      	bne.n	103f2 <main+0x6ea>
				printf("\n\rMain: CRC MATCHED! starting firmware upgrade. \n\r");
   10390:	484f      	ldr	r0, [pc, #316]	; (104d0 <main+0x7c8>)
   10392:	4b2b      	ldr	r3, [pc, #172]	; (10440 <main+0x738>)
   10394:	4798      	blx	r3
				*(uint32_t*)fw_status.signature = (uint32_t)crcChecker; //replace with checksum of downloaded image
   10396:	4b48      	ldr	r3, [pc, #288]	; (104b8 <main+0x7b0>)
   10398:	681b      	ldr	r3, [r3, #0]
   1039a:	0a1a      	lsrs	r2, r3, #8
   1039c:	0c1f      	lsrs	r7, r3, #16
   1039e:	9304      	str	r3, [sp, #16]
   103a0:	b2d9      	uxtb	r1, r3
   103a2:	468a      	mov	sl, r1
   103a4:	b2d2      	uxtb	r2, r2
   103a6:	4691      	mov	r9, r2
   103a8:	b2ff      	uxtb	r7, r7
   103aa:	0e1e      	lsrs	r6, r3, #24
	//return *(Firmware_Status_t*)FW_STAT_ADDRESS;	// return the firmware status
}

static void writeFWStat(Firmware_Status_t thisFW)
{
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE]={0};
   103ac:	ac06      	add	r4, sp, #24
   103ae:	2240      	movs	r2, #64	; 0x40
   103b0:	2100      	movs	r1, #0
   103b2:	0020      	movs	r0, r4
   103b4:	4b2e      	ldr	r3, [pc, #184]	; (10470 <main+0x768>)
   103b6:	4798      	blx	r3
	page_buffer[0] = thisFW.signature[0];
   103b8:	4653      	mov	r3, sl
   103ba:	7023      	strb	r3, [r4, #0]
	page_buffer[1] = thisFW.signature[1];
   103bc:	464b      	mov	r3, r9
   103be:	7063      	strb	r3, [r4, #1]
	page_buffer[2] = thisFW.signature[2];
   103c0:	70a7      	strb	r7, [r4, #2]
	page_buffer[3] = thisFW.signature[3];
   103c2:	70e6      	strb	r6, [r4, #3]
	page_buffer[4] = thisFW.executing_image;
   103c4:	4643      	mov	r3, r8
   103c6:	7123      	strb	r3, [r4, #4]
	page_buffer[5] = thisFW.downloaded_image;
   103c8:	7165      	strb	r5, [r4, #5]
	page_buffer[6] = thisFW.writenew_image;
   103ca:	2301      	movs	r3, #1
   103cc:	71a3      	strb	r3, [r4, #6]
	page_buffer[7] = 0;
	
	status_code_genare_t error_code;
	do
	{
		error_code = nvm_erase_row(FW_STAT_ADDRESS);			// Erase FW stat row
   103ce:	25fe      	movs	r5, #254	; 0xfe
   103d0:	01ed      	lsls	r5, r5, #7
   103d2:	4c40      	ldr	r4, [pc, #256]	; (104d4 <main+0x7cc>)
   103d4:	0028      	movs	r0, r5
   103d6:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
   103d8:	2805      	cmp	r0, #5
   103da:	d0fb      	beq.n	103d4 <main+0x6cc>
	
	do
	{
		error_code = nvm_write_buffer(FW_STAT_ADDRESS, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   103dc:	25fe      	movs	r5, #254	; 0xfe
   103de:	01ed      	lsls	r5, r5, #7
   103e0:	2440      	movs	r4, #64	; 0x40
   103e2:	0022      	movs	r2, r4
   103e4:	a906      	add	r1, sp, #24
   103e6:	0028      	movs	r0, r5
   103e8:	4b3b      	ldr	r3, [pc, #236]	; (104d8 <main+0x7d0>)
   103ea:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
   103ec:	2805      	cmp	r0, #5
   103ee:	d0f8      	beq.n	103e2 <main+0x6da>
   103f0:	e002      	b.n	103f8 <main+0x6f0>
				*(uint32_t*)fw_status.signature = (uint32_t)crcChecker; //replace with checksum of downloaded image
				fw_status.writenew_image = 1;  // write image flag
				writeFWStat(fw_status);
			} 
			else {
				printf("\n\r Main: CRC Check Fail!\n\r");
   103f2:	483a      	ldr	r0, [pc, #232]	; (104dc <main+0x7d4>)
   103f4:	4b12      	ldr	r3, [pc, #72]	; (10440 <main+0x738>)
   103f6:	4798      	blx	r3
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   103f8:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   103fc:	4a38      	ldr	r2, [pc, #224]	; (104e0 <main+0x7d8>)
   103fe:	4b39      	ldr	r3, [pc, #228]	; (104e4 <main+0x7dc>)
   10400:	60da      	str	r2, [r3, #12]
   10402:	f3bf 8f4f 	dsb	sy
   10406:	e7fe      	b.n	10406 <main+0x6fe>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
   10408:	2280      	movs	r2, #128	; 0x80
   1040a:	00d2      	lsls	r2, r2, #3
   1040c:	617a      	str	r2, [r7, #20]
		if (sensedFL0) {
			port_pin_set_output_level(LED_0_PIN, true);
		}
		else {
			port_pin_set_output_level(LED_0_PIN, false);
			if (drain) {
   1040e:	4a36      	ldr	r2, [pc, #216]	; (104e8 <main+0x7e0>)
   10410:	7812      	ldrb	r2, [r2, #0]
   10412:	2a00      	cmp	r2, #0
   10414:	d000      	beq.n	10418 <main+0x710>
   10416:	e5c7      	b.n	ffa8 <main+0x2a0>
   10418:	e5ce      	b.n	ffb8 <main+0x2b0>
   1041a:	2280      	movs	r2, #128	; 0x80
   1041c:	00d2      	lsls	r2, r2, #3
   1041e:	617a      	str	r2, [r7, #20]
   10420:	4a31      	ldr	r2, [pc, #196]	; (104e8 <main+0x7e0>)
   10422:	7812      	ldrb	r2, [r2, #0]
   10424:	2a00      	cmp	r2, #0
   10426:	d100      	bne.n	1042a <main+0x722>
   10428:	e5ca      	b.n	ffc0 <main+0x2b8>
   1042a:	e5bd      	b.n	ffa8 <main+0x2a0>
   1042c:	0000e2cd 	.word	0x0000e2cd
   10430:	20000c74 	.word	0x20000c74
   10434:	20000ccc 	.word	0x20000ccc
   10438:	0000e2f5 	.word	0x0000e2f5
   1043c:	000148dc 	.word	0x000148dc
   10440:	0001189d 	.word	0x0001189d
   10444:	0000fa7d 	.word	0x0000fa7d
   10448:	0000e3a9 	.word	0x0000e3a9
   1044c:	0000f919 	.word	0x0000f919
   10450:	00009a85 	.word	0x00009a85
   10454:	00014924 	.word	0x00014924
   10458:	0000b699 	.word	0x0000b699
   1045c:	0000f4a9 	.word	0x0000f4a9
   10460:	0000f4e5 	.word	0x0000f4e5
   10464:	0000b719 	.word	0x0000b719
   10468:	00014950 	.word	0x00014950
   1046c:	000119bd 	.word	0x000119bd
   10470:	00011755 	.word	0x00011755
   10474:	0000c189 	.word	0x0000c189
   10478:	0001496c 	.word	0x0001496c
   1047c:	20000011 	.word	0x20000011
   10480:	20000468 	.word	0x20000468
   10484:	20000c6c 	.word	0x20000c6c
   10488:	000089e1 	.word	0x000089e1
   1048c:	00008115 	.word	0x00008115
   10490:	00008865 	.word	0x00008865
   10494:	0000864d 	.word	0x0000864d
   10498:	0001441c 	.word	0x0001441c
   1049c:	00014990 	.word	0x00014990
   104a0:	00014410 	.word	0x00014410
   104a4:	00009e61 	.word	0x00009e61
   104a8:	20000154 	.word	0x20000154
   104ac:	00009bd1 	.word	0x00009bd1
   104b0:	0000f43d 	.word	0x0000f43d
   104b4:	000149c4 	.word	0x000149c4
   104b8:	20000df0 	.word	0x20000df0
   104bc:	000149e0 	.word	0x000149e0
   104c0:	20000162 	.word	0x20000162
   104c4:	0000f4f1 	.word	0x0000f4f1
   104c8:	000149f8 	.word	0x000149f8
   104cc:	20000df4 	.word	0x20000df4
   104d0:	00014a24 	.word	0x00014a24
   104d4:	0000c1f5 	.word	0x0000c1f5
   104d8:	0000c0e5 	.word	0x0000c0e5
   104dc:	00014a58 	.word	0x00014a58
   104e0:	05fa0004 	.word	0x05fa0004
   104e4:	e000ed00 	.word	0xe000ed00
   104e8:	200002a0 	.word	0x200002a0

000104ec <_hwerr_to_stderr>:
   104ec:	1c03      	adds	r3, r0, #0
   104ee:	300e      	adds	r0, #14
   104f0:	b500      	push	{lr}
   104f2:	280e      	cmp	r0, #14
   104f4:	d819      	bhi.n	1052a <_hwerr_to_stderr+0x3e>
   104f6:	f000 ff23 	bl	11340 <__gnu_thumb1_case_uqi>
   104fa:	1416      	.short	0x1416
   104fc:	1b181012 	.word	0x1b181012
   10500:	180c0e18 	.word	0x180c0e18
   10504:	1d0a0e0e 	.word	0x1d0a0e0e
   10508:	08          	.byte	0x08
   10509:	00          	.byte	0x00
   1050a:	2000      	movs	r0, #0
   1050c:	e014      	b.n	10538 <_hwerr_to_stderr+0x4c>
   1050e:	2070      	movs	r0, #112	; 0x70
   10510:	e011      	b.n	10536 <_hwerr_to_stderr+0x4a>
   10512:	2016      	movs	r0, #22
   10514:	e00f      	b.n	10536 <_hwerr_to_stderr+0x4a>
   10516:	200c      	movs	r0, #12
   10518:	e00d      	b.n	10536 <_hwerr_to_stderr+0x4a>
   1051a:	2079      	movs	r0, #121	; 0x79
   1051c:	e00b      	b.n	10536 <_hwerr_to_stderr+0x4a>
   1051e:	2068      	movs	r0, #104	; 0x68
   10520:	e009      	b.n	10536 <_hwerr_to_stderr+0x4a>
   10522:	200b      	movs	r0, #11
   10524:	e007      	b.n	10536 <_hwerr_to_stderr+0x4a>
   10526:	2010      	movs	r0, #16
   10528:	e005      	b.n	10536 <_hwerr_to_stderr+0x4a>
   1052a:	2000      	movs	r0, #0
   1052c:	4283      	cmp	r3, r0
   1052e:	da03      	bge.n	10538 <_hwerr_to_stderr+0x4c>
   10530:	2005      	movs	r0, #5
   10532:	e000      	b.n	10536 <_hwerr_to_stderr+0x4a>
   10534:	2002      	movs	r0, #2
   10536:	4240      	negs	r0, r0
   10538:	bd00      	pop	{pc}
	...

0001053c <_mqtt_send_wait>:
   1053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1053e:	1c04      	adds	r4, r0, #0
   10540:	3443      	adds	r4, #67	; 0x43
   10542:	7823      	ldrb	r3, [r4, #0]
   10544:	1c05      	adds	r5, r0, #0
   10546:	07d8      	lsls	r0, r3, #31
   10548:	d51c      	bpl.n	10584 <_mqtt_send_wait+0x48>
   1054a:	2604      	movs	r6, #4
   1054c:	4333      	orrs	r3, r6
   1054e:	7023      	strb	r3, [r4, #0]
   10550:	2002      	movs	r0, #2
   10552:	5628      	ldrsb	r0, [r5, r0]
   10554:	b292      	uxth	r2, r2
   10556:	2300      	movs	r3, #0
   10558:	4f0c      	ldr	r7, [pc, #48]	; (1058c <_mqtt_send_wait+0x50>)
   1055a:	47b8      	blx	r7
   1055c:	2800      	cmp	r0, #0
   1055e:	da05      	bge.n	1056c <_mqtt_send_wait+0x30>
   10560:	7823      	ldrb	r3, [r4, #0]
   10562:	43b3      	bics	r3, r6
   10564:	7023      	strb	r3, [r4, #0]
   10566:	4b0a      	ldr	r3, [pc, #40]	; (10590 <_mqtt_send_wait+0x54>)
   10568:	4798      	blx	r3
   1056a:	e00d      	b.n	10588 <_mqtt_send_wait+0x4c>
   1056c:	7822      	ldrb	r2, [r4, #0]
   1056e:	2314      	movs	r3, #20
   10570:	4013      	ands	r3, r2
   10572:	2000      	movs	r0, #0
   10574:	2b04      	cmp	r3, #4
   10576:	d107      	bne.n	10588 <_mqtt_send_wait+0x4c>
   10578:	4b06      	ldr	r3, [pc, #24]	; (10594 <_mqtt_send_wait+0x58>)
   1057a:	4798      	blx	r3
   1057c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   1057e:	4b06      	ldr	r3, [pc, #24]	; (10598 <_mqtt_send_wait+0x5c>)
   10580:	4798      	blx	r3
   10582:	e7f3      	b.n	1056c <_mqtt_send_wait+0x30>
   10584:	2001      	movs	r0, #1
   10586:	4240      	negs	r0, r0
   10588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1058a:	46c0      	nop			; (mov r8, r8)
   1058c:	0000b941 	.word	0x0000b941
   10590:	000104ed 	.word	0x000104ed
   10594:	00009bd1 	.word	0x00009bd1
   10598:	0000f43d 	.word	0x0000f43d

0001059c <mqtt_get_config_defaults>:
   1059c:	4b07      	ldr	r3, [pc, #28]	; (105bc <mqtt_get_config_defaults+0x20>)
   1059e:	2240      	movs	r2, #64	; 0x40
   105a0:	8003      	strh	r3, [r0, #0]
   105a2:	2396      	movs	r3, #150	; 0x96
   105a4:	009b      	lsls	r3, r3, #2
   105a6:	8103      	strh	r3, [r0, #8]
   105a8:	6102      	str	r2, [r0, #16]
   105aa:	2300      	movs	r3, #0
   105ac:	2220      	movs	r2, #32
   105ae:	7083      	strb	r3, [r0, #2]
   105b0:	6043      	str	r3, [r0, #4]
   105b2:	60c3      	str	r3, [r0, #12]
   105b4:	6142      	str	r2, [r0, #20]
   105b6:	7603      	strb	r3, [r0, #24]
   105b8:	4770      	bx	lr
   105ba:	46c0      	nop			; (mov r8, r8)
   105bc:	0000075b 	.word	0x0000075b

000105c0 <mqtt_init>:
   105c0:	b538      	push	{r3, r4, r5, lr}
   105c2:	1c04      	adds	r4, r0, #0
   105c4:	1c0d      	adds	r5, r1, #0
   105c6:	2800      	cmp	r0, #0
   105c8:	d030      	beq.n	1062c <mqtt_init+0x6c>
   105ca:	2900      	cmp	r1, #0
   105cc:	d02e      	beq.n	1062c <mqtt_init+0x6c>
   105ce:	690b      	ldr	r3, [r1, #16]
   105d0:	2b00      	cmp	r3, #0
   105d2:	d02b      	beq.n	1062c <mqtt_init+0x6c>
   105d4:	684b      	ldr	r3, [r1, #4]
   105d6:	2b00      	cmp	r3, #0
   105d8:	d028      	beq.n	1062c <mqtt_init+0x6c>
   105da:	2100      	movs	r1, #0
   105dc:	2274      	movs	r2, #116	; 0x74
   105de:	4b16      	ldr	r3, [pc, #88]	; (10638 <mqtt_init+0x78>)
   105e0:	4798      	blx	r3
   105e2:	1c20      	adds	r0, r4, #0
   105e4:	4b15      	ldr	r3, [pc, #84]	; (1063c <mqtt_init+0x7c>)
   105e6:	3058      	adds	r0, #88	; 0x58
   105e8:	1c29      	adds	r1, r5, #0
   105ea:	221c      	movs	r2, #28
   105ec:	4798      	blx	r3
   105ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
   105f0:	2b00      	cmp	r3, #0
   105f2:	d10b      	bne.n	1060c <mqtt_init+0x4c>
   105f4:	6928      	ldr	r0, [r5, #16]
   105f6:	4b12      	ldr	r3, [pc, #72]	; (10640 <mqtt_init+0x80>)
   105f8:	4798      	blx	r3
   105fa:	6660      	str	r0, [r4, #100]	; 0x64
   105fc:	2800      	cmp	r0, #0
   105fe:	d017      	beq.n	10630 <mqtt_init+0x70>
   10600:	1c23      	adds	r3, r4, #0
   10602:	3343      	adds	r3, #67	; 0x43
   10604:	781a      	ldrb	r2, [r3, #0]
   10606:	2120      	movs	r1, #32
   10608:	430a      	orrs	r2, r1
   1060a:	701a      	strb	r2, [r3, #0]
   1060c:	892a      	ldrh	r2, [r5, #8]
   1060e:	23fa      	movs	r3, #250	; 0xfa
   10610:	005b      	lsls	r3, r3, #1
   10612:	4353      	muls	r3, r2
   10614:	6868      	ldr	r0, [r5, #4]
   10616:	490b      	ldr	r1, [pc, #44]	; (10644 <mqtt_init+0x84>)
   10618:	1c22      	adds	r2, r4, #0
   1061a:	4d0b      	ldr	r5, [pc, #44]	; (10648 <mqtt_init+0x88>)
   1061c:	47a8      	blx	r5
   1061e:	1c03      	adds	r3, r0, #0
   10620:	6520      	str	r0, [r4, #80]	; 0x50
   10622:	2000      	movs	r0, #0
   10624:	4283      	cmp	r3, r0
   10626:	da05      	bge.n	10634 <mqtt_init+0x74>
   10628:	201c      	movs	r0, #28
   1062a:	e002      	b.n	10632 <mqtt_init+0x72>
   1062c:	2016      	movs	r0, #22
   1062e:	e000      	b.n	10632 <mqtt_init+0x72>
   10630:	200c      	movs	r0, #12
   10632:	4240      	negs	r0, r0
   10634:	bd38      	pop	{r3, r4, r5, pc}
   10636:	46c0      	nop			; (mov r8, r8)
   10638:	00011755 	.word	0x00011755
   1063c:	00011719 	.word	0x00011719
   10640:	000116f1 	.word	0x000116f1
   10644:	00010e0d 	.word	0x00010e0d
   10648:	0000f3b9 	.word	0x0000f3b9

0001064c <mqtt_deinit>:
   1064c:	b510      	push	{r4, lr}
   1064e:	1e04      	subs	r4, r0, #0
   10650:	d014      	beq.n	1067c <mqtt_deinit+0x30>
   10652:	6e40      	ldr	r0, [r0, #100]	; 0x64
   10654:	2800      	cmp	r0, #0
   10656:	d008      	beq.n	1066a <mqtt_deinit+0x1e>
   10658:	1c23      	adds	r3, r4, #0
   1065a:	3343      	adds	r3, #67	; 0x43
   1065c:	781b      	ldrb	r3, [r3, #0]
   1065e:	069a      	lsls	r2, r3, #26
   10660:	d503      	bpl.n	1066a <mqtt_deinit+0x1e>
   10662:	4b09      	ldr	r3, [pc, #36]	; (10688 <mqtt_deinit+0x3c>)
   10664:	4798      	blx	r3
   10666:	2300      	movs	r3, #0
   10668:	6663      	str	r3, [r4, #100]	; 0x64
   1066a:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1066c:	2900      	cmp	r1, #0
   1066e:	db08      	blt.n	10682 <mqtt_deinit+0x36>
   10670:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   10672:	2800      	cmp	r0, #0
   10674:	d006      	beq.n	10684 <mqtt_deinit+0x38>
   10676:	4b05      	ldr	r3, [pc, #20]	; (1068c <mqtt_deinit+0x40>)
   10678:	4798      	blx	r3
   1067a:	e002      	b.n	10682 <mqtt_deinit+0x36>
   1067c:	2016      	movs	r0, #22
   1067e:	4240      	negs	r0, r0
   10680:	e000      	b.n	10684 <mqtt_deinit+0x38>
   10682:	2000      	movs	r0, #0
   10684:	bd10      	pop	{r4, pc}
   10686:	46c0      	nop			; (mov r8, r8)
   10688:	00011705 	.word	0x00011705
   1068c:	0000f3f1 	.word	0x0000f3f1

00010690 <mqtt_register_callback>:
   10690:	2800      	cmp	r0, #0
   10692:	d002      	beq.n	1069a <mqtt_register_callback+0xa>
   10694:	6541      	str	r1, [r0, #84]	; 0x54
   10696:	2000      	movs	r0, #0
   10698:	e001      	b.n	1069e <mqtt_register_callback+0xe>
   1069a:	2016      	movs	r0, #22
   1069c:	4240      	negs	r0, r0
   1069e:	4770      	bx	lr

000106a0 <mqtt_socket_resolve_handler>:
   106a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   106a2:	1c06      	adds	r6, r0, #0
   106a4:	b085      	sub	sp, #20
   106a6:	1c0f      	adds	r7, r1, #0
   106a8:	2400      	movs	r4, #0
   106aa:	4b0f      	ldr	r3, [pc, #60]	; (106e8 <mqtt_socket_resolve_handler+0x48>)
   106ac:	58e5      	ldr	r5, [r4, r3]
   106ae:	2d00      	cmp	r5, #0
   106b0:	d015      	beq.n	106de <mqtt_socket_resolve_handler+0x3e>
   106b2:	1ce9      	adds	r1, r5, #3
   106b4:	1c30      	adds	r0, r6, #0
   106b6:	4b0d      	ldr	r3, [pc, #52]	; (106ec <mqtt_socket_resolve_handler+0x4c>)
   106b8:	4798      	blx	r3
   106ba:	2800      	cmp	r0, #0
   106bc:	d10f      	bne.n	106de <mqtt_socket_resolve_handler+0x3e>
   106be:	466a      	mov	r2, sp
   106c0:	2302      	movs	r3, #2
   106c2:	8013      	strh	r3, [r2, #0]
   106c4:	1c2b      	adds	r3, r5, #0
   106c6:	3358      	adds	r3, #88	; 0x58
   106c8:	881b      	ldrh	r3, [r3, #0]
   106ca:	9701      	str	r7, [sp, #4]
   106cc:	ba5b      	rev16	r3, r3
   106ce:	8053      	strh	r3, [r2, #2]
   106d0:	2002      	movs	r0, #2
   106d2:	5628      	ldrsb	r0, [r5, r0]
   106d4:	4669      	mov	r1, sp
   106d6:	2210      	movs	r2, #16
   106d8:	4b05      	ldr	r3, [pc, #20]	; (106f0 <mqtt_socket_resolve_handler+0x50>)
   106da:	4798      	blx	r3
   106dc:	e002      	b.n	106e4 <mqtt_socket_resolve_handler+0x44>
   106de:	3404      	adds	r4, #4
   106e0:	2c1c      	cmp	r4, #28
   106e2:	d1e2      	bne.n	106aa <mqtt_socket_resolve_handler+0xa>
   106e4:	b005      	add	sp, #20
   106e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106e8:	200002a4 	.word	0x200002a4
   106ec:	00011bad 	.word	0x00011bad
   106f0:	0000b8b1 	.word	0x0000b8b1

000106f4 <mqtt_connect>:
   106f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   106f6:	1c04      	adds	r4, r0, #0
   106f8:	b089      	sub	sp, #36	; 0x24
   106fa:	1c0d      	adds	r5, r1, #0
   106fc:	2800      	cmp	r0, #0
   106fe:	d051      	beq.n	107a4 <mqtt_connect+0xb0>
   10700:	2900      	cmp	r1, #0
   10702:	d04f      	beq.n	107a4 <mqtt_connect+0xb0>
   10704:	1c08      	adds	r0, r1, #0
   10706:	4b39      	ldr	r3, [pc, #228]	; (107ec <mqtt_connect+0xf8>)
   10708:	4798      	blx	r3
   1070a:	2840      	cmp	r0, #64	; 0x40
   1070c:	d84c      	bhi.n	107a8 <mqtt_connect+0xb4>
   1070e:	1c21      	adds	r1, r4, #0
   10710:	3143      	adds	r1, #67	; 0x43
   10712:	780b      	ldrb	r3, [r1, #0]
   10714:	9101      	str	r1, [sp, #4]
   10716:	07db      	lsls	r3, r3, #31
   10718:	0fd9      	lsrs	r1, r3, #31
   1071a:	466a      	mov	r2, sp
   1071c:	b2ce      	uxtb	r6, r1
   1071e:	1ce0      	adds	r0, r4, #3
   10720:	7211      	strb	r1, [r2, #8]
   10722:	2e00      	cmp	r6, #0
   10724:	d142      	bne.n	107ac <mqtt_connect+0xb8>
   10726:	2701      	movs	r7, #1
   10728:	1c29      	adds	r1, r5, #0
   1072a:	4b31      	ldr	r3, [pc, #196]	; (107f0 <mqtt_connect+0xfc>)
   1072c:	8027      	strh	r7, [r4, #0]
   1072e:	4798      	blx	r3
   10730:	9a01      	ldr	r2, [sp, #4]
   10732:	2002      	movs	r0, #2
   10734:	7813      	ldrb	r3, [r2, #0]
   10736:	9901      	ldr	r1, [sp, #4]
   10738:	43bb      	bics	r3, r7
   1073a:	4383      	bics	r3, r0
   1073c:	22e3      	movs	r2, #227	; 0xe3
   1073e:	4013      	ands	r3, r2
   10740:	466a      	mov	r2, sp
   10742:	700b      	strb	r3, [r1, #0]
   10744:	7a12      	ldrb	r2, [r2, #8]
   10746:	1c23      	adds	r3, r4, #0
   10748:	3348      	adds	r3, #72	; 0x48
   1074a:	6466      	str	r6, [r4, #68]	; 0x44
   1074c:	701a      	strb	r2, [r3, #0]
   1074e:	7c9a      	ldrb	r2, [r3, #18]
   10750:	805e      	strh	r6, [r3, #2]
   10752:	1e53      	subs	r3, r2, #1
   10754:	419a      	sbcs	r2, r3
   10756:	b2d2      	uxtb	r2, r2
   10758:	1c39      	adds	r1, r7, #0
   1075a:	4b26      	ldr	r3, [pc, #152]	; (107f4 <mqtt_connect+0x100>)
   1075c:	4798      	blx	r3
   1075e:	70a0      	strb	r0, [r4, #2]
   10760:	2800      	cmp	r0, #0
   10762:	db25      	blt.n	107b0 <mqtt_connect+0xbc>
   10764:	4b24      	ldr	r3, [pc, #144]	; (107f8 <mqtt_connect+0x104>)
   10766:	0080      	lsls	r0, r0, #2
   10768:	50c4      	str	r4, [r0, r3]
   1076a:	1c2b      	adds	r3, r5, #0
   1076c:	781f      	ldrb	r7, [r3, #0]
   1076e:	2f00      	cmp	r7, #0
   10770:	d026      	beq.n	107c0 <mqtt_connect+0xcc>
   10772:	2220      	movs	r2, #32
   10774:	1c39      	adds	r1, r7, #0
   10776:	4391      	bics	r1, r2
   10778:	1c0a      	adds	r2, r1, #0
   1077a:	3a41      	subs	r2, #65	; 0x41
   1077c:	b2d2      	uxtb	r2, r2
   1077e:	3301      	adds	r3, #1
   10780:	2a05      	cmp	r2, #5
   10782:	d90d      	bls.n	107a0 <mqtt_connect+0xac>
   10784:	2f3a      	cmp	r7, #58	; 0x3a
   10786:	d00b      	beq.n	107a0 <mqtt_connect+0xac>
   10788:	2f2f      	cmp	r7, #47	; 0x2f
   1078a:	d009      	beq.n	107a0 <mqtt_connect+0xac>
   1078c:	2f2e      	cmp	r7, #46	; 0x2e
   1078e:	d102      	bne.n	10796 <mqtt_connect+0xa2>
   10790:	2e00      	cmp	r6, #0
   10792:	d0eb      	beq.n	1076c <mqtt_connect+0x78>
   10794:	e00f      	b.n	107b6 <mqtt_connect+0xc2>
   10796:	2230      	movs	r2, #48	; 0x30
   10798:	4017      	ands	r7, r2
   1079a:	4297      	cmp	r7, r2
   1079c:	d0e6      	beq.n	1076c <mqtt_connect+0x78>
   1079e:	e00a      	b.n	107b6 <mqtt_connect+0xc2>
   107a0:	2601      	movs	r6, #1
   107a2:	e7e3      	b.n	1076c <mqtt_connect+0x78>
   107a4:	2016      	movs	r0, #22
   107a6:	e004      	b.n	107b2 <mqtt_connect+0xbe>
   107a8:	205b      	movs	r0, #91	; 0x5b
   107aa:	e002      	b.n	107b2 <mqtt_connect+0xbe>
   107ac:	2078      	movs	r0, #120	; 0x78
   107ae:	e000      	b.n	107b2 <mqtt_connect+0xbe>
   107b0:	201c      	movs	r0, #28
   107b2:	4240      	negs	r0, r0
   107b4:	e017      	b.n	107e6 <mqtt_connect+0xf2>
   107b6:	1c28      	adds	r0, r5, #0
   107b8:	4b10      	ldr	r3, [pc, #64]	; (107fc <mqtt_connect+0x108>)
   107ba:	4798      	blx	r3
   107bc:	2000      	movs	r0, #0
   107be:	e012      	b.n	107e6 <mqtt_connect+0xf2>
   107c0:	466a      	mov	r2, sp
   107c2:	2302      	movs	r3, #2
   107c4:	8213      	strh	r3, [r2, #16]
   107c6:	1c23      	adds	r3, r4, #0
   107c8:	3358      	adds	r3, #88	; 0x58
   107ca:	881b      	ldrh	r3, [r3, #0]
   107cc:	1c28      	adds	r0, r5, #0
   107ce:	ba5b      	rev16	r3, r3
   107d0:	8253      	strh	r3, [r2, #18]
   107d2:	4b0b      	ldr	r3, [pc, #44]	; (10800 <mqtt_connect+0x10c>)
   107d4:	4798      	blx	r3
   107d6:	9005      	str	r0, [sp, #20]
   107d8:	2002      	movs	r0, #2
   107da:	5620      	ldrsb	r0, [r4, r0]
   107dc:	a904      	add	r1, sp, #16
   107de:	2210      	movs	r2, #16
   107e0:	4b08      	ldr	r3, [pc, #32]	; (10804 <mqtt_connect+0x110>)
   107e2:	4798      	blx	r3
   107e4:	1c38      	adds	r0, r7, #0
   107e6:	b009      	add	sp, #36	; 0x24
   107e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107ea:	46c0      	nop			; (mov r8, r8)
   107ec:	00011c0b 	.word	0x00011c0b
   107f0:	00011bc1 	.word	0x00011bc1
   107f4:	0000b72d 	.word	0x0000b72d
   107f8:	200002a4 	.word	0x200002a4
   107fc:	0000bb75 	.word	0x0000bb75
   10800:	0000bb09 	.word	0x0000bb09
   10804:	0000b8b1 	.word	0x0000b8b1

00010808 <mqtt_connect_broker>:
   10808:	b5f0      	push	{r4, r5, r6, r7, lr}
   1080a:	b095      	sub	sp, #84	; 0x54
   1080c:	af02      	add	r7, sp, #8
   1080e:	617b      	str	r3, [r7, #20]
   10810:	1c3b      	adds	r3, r7, #0
   10812:	3370      	adds	r3, #112	; 0x70
   10814:	781b      	ldrb	r3, [r3, #0]
   10816:	1c05      	adds	r5, r0, #0
   10818:	60fb      	str	r3, [r7, #12]
   1081a:	1c3b      	adds	r3, r7, #0
   1081c:	3374      	adds	r3, #116	; 0x74
   1081e:	781b      	ldrb	r3, [r3, #0]
   10820:	6139      	str	r1, [r7, #16]
   10822:	61fa      	str	r2, [r7, #28]
   10824:	60bb      	str	r3, [r7, #8]
   10826:	2800      	cmp	r0, #0
   10828:	d101      	bne.n	1082e <mqtt_connect_broker+0x26>
   1082a:	2016      	movs	r0, #22
   1082c:	e129      	b.n	10a82 <mqtt_connect_broker+0x27a>
   1082e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   10830:	4668      	mov	r0, sp
   10832:	3307      	adds	r3, #7
   10834:	08db      	lsrs	r3, r3, #3
   10836:	00db      	lsls	r3, r3, #3
   10838:	1ac0      	subs	r0, r0, r3
   1083a:	4685      	mov	sp, r0
   1083c:	ac02      	add	r4, sp, #8
   1083e:	607c      	str	r4, [r7, #4]
   10840:	6e3c      	ldr	r4, [r7, #96]	; 0x60
   10842:	2c00      	cmp	r4, #0
   10844:	d0f1      	beq.n	1082a <mqtt_connect_broker+0x22>
   10846:	1c2b      	adds	r3, r5, #0
   10848:	3343      	adds	r3, #67	; 0x43
   1084a:	781b      	ldrb	r3, [r3, #0]
   1084c:	07d8      	lsls	r0, r3, #31
   1084e:	d400      	bmi.n	10852 <mqtt_connect_broker+0x4a>
   10850:	e112      	b.n	10a78 <mqtt_connect_broker+0x270>
   10852:	079a      	lsls	r2, r3, #30
   10854:	d500      	bpl.n	10858 <mqtt_connect_broker+0x50>
   10856:	e111      	b.n	10a7c <mqtt_connect_broker+0x274>
   10858:	071c      	lsls	r4, r3, #28
   1085a:	d40b      	bmi.n	10874 <mqtt_connect_broker+0x6c>
   1085c:	4e8b      	ldr	r6, [pc, #556]	; (10a8c <mqtt_connect_broker+0x284>)
   1085e:	6e38      	ldr	r0, [r7, #96]	; 0x60
   10860:	47b0      	blx	r6
   10862:	1c03      	adds	r3, r0, #0
   10864:	61b8      	str	r0, [r7, #24]
   10866:	69f8      	ldr	r0, [r7, #28]
   10868:	330e      	adds	r3, #14
   1086a:	1c34      	adds	r4, r6, #0
   1086c:	2800      	cmp	r0, #0
   1086e:	d113      	bne.n	10898 <mqtt_connect_broker+0x90>
   10870:	1c1e      	adds	r6, r3, #0
   10872:	e01d      	b.n	108b0 <mqtt_connect_broker+0xa8>
   10874:	1c2b      	adds	r3, r5, #0
   10876:	3370      	adds	r3, #112	; 0x70
   10878:	781b      	ldrb	r3, [r3, #0]
   1087a:	2b00      	cmp	r3, #0
   1087c:	d000      	beq.n	10880 <mqtt_connect_broker+0x78>
   1087e:	e0ff      	b.n	10a80 <mqtt_connect_broker+0x278>
   10880:	1c2b      	adds	r3, r5, #0
   10882:	3343      	adds	r3, #67	; 0x43
   10884:	781b      	ldrb	r3, [r3, #0]
   10886:	071a      	lsls	r2, r3, #28
   10888:	d5e8      	bpl.n	1085c <mqtt_connect_broker+0x54>
   1088a:	4b81      	ldr	r3, [pc, #516]	; (10a90 <mqtt_connect_broker+0x288>)
   1088c:	2000      	movs	r0, #0
   1088e:	4798      	blx	r3
   10890:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   10892:	4b80      	ldr	r3, [pc, #512]	; (10a94 <mqtt_connect_broker+0x28c>)
   10894:	4798      	blx	r3
   10896:	e7f3      	b.n	10880 <mqtt_connect_broker+0x78>
   10898:	69f8      	ldr	r0, [r7, #28]
   1089a:	47b0      	blx	r6
   1089c:	69be      	ldr	r6, [r7, #24]
   1089e:	697b      	ldr	r3, [r7, #20]
   108a0:	3610      	adds	r6, #16
   108a2:	1836      	adds	r6, r6, r0
   108a4:	2b00      	cmp	r3, #0
   108a6:	d003      	beq.n	108b0 <mqtt_connect_broker+0xa8>
   108a8:	1c18      	adds	r0, r3, #0
   108aa:	47a0      	blx	r4
   108ac:	3602      	adds	r6, #2
   108ae:	1836      	adds	r6, r6, r0
   108b0:	6e78      	ldr	r0, [r7, #100]	; 0x64
   108b2:	2800      	cmp	r0, #0
   108b4:	d007      	beq.n	108c6 <mqtt_connect_broker+0xbe>
   108b6:	47a0      	blx	r4
   108b8:	3602      	adds	r6, #2
   108ba:	6efc      	ldr	r4, [r7, #108]	; 0x6c
   108bc:	1830      	adds	r0, r6, r0
   108be:	1906      	adds	r6, r0, r4
   108c0:	2c00      	cmp	r4, #0
   108c2:	d100      	bne.n	108c6 <mqtt_connect_broker+0xbe>
   108c4:	1c06      	adds	r6, r0, #0
   108c6:	69fc      	ldr	r4, [r7, #28]
   108c8:	2c00      	cmp	r4, #0
   108ca:	d006      	beq.n	108da <mqtt_connect_broker+0xd2>
   108cc:	24c0      	movs	r4, #192	; 0xc0
   108ce:	61bc      	str	r4, [r7, #24]
   108d0:	697c      	ldr	r4, [r7, #20]
   108d2:	2c00      	cmp	r4, #0
   108d4:	d103      	bne.n	108de <mqtt_connect_broker+0xd6>
   108d6:	2480      	movs	r4, #128	; 0x80
   108d8:	e000      	b.n	108dc <mqtt_connect_broker+0xd4>
   108da:	69fc      	ldr	r4, [r7, #28]
   108dc:	61bc      	str	r4, [r7, #24]
   108de:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   108e0:	2c00      	cmp	r4, #0
   108e2:	d00f      	beq.n	10904 <mqtt_connect_broker+0xfc>
   108e4:	68bc      	ldr	r4, [r7, #8]
   108e6:	2c00      	cmp	r4, #0
   108e8:	d003      	beq.n	108f2 <mqtt_connect_broker+0xea>
   108ea:	69bc      	ldr	r4, [r7, #24]
   108ec:	2320      	movs	r3, #32
   108ee:	431c      	orrs	r4, r3
   108f0:	61bc      	str	r4, [r7, #24]
   108f2:	68fc      	ldr	r4, [r7, #12]
   108f4:	2303      	movs	r3, #3
   108f6:	4023      	ands	r3, r4
   108f8:	00db      	lsls	r3, r3, #3
   108fa:	69bc      	ldr	r4, [r7, #24]
   108fc:	2204      	movs	r2, #4
   108fe:	4313      	orrs	r3, r2
   10900:	431c      	orrs	r4, r3
   10902:	61bc      	str	r4, [r7, #24]
   10904:	693c      	ldr	r4, [r7, #16]
   10906:	2c00      	cmp	r4, #0
   10908:	d003      	beq.n	10912 <mqtt_connect_broker+0x10a>
   1090a:	69bc      	ldr	r4, [r7, #24]
   1090c:	2302      	movs	r3, #2
   1090e:	431c      	orrs	r4, r3
   10910:	61bc      	str	r4, [r7, #24]
   10912:	1c2b      	adds	r3, r5, #0
   10914:	3343      	adds	r3, #67	; 0x43
   10916:	781a      	ldrb	r2, [r3, #0]
   10918:	2108      	movs	r1, #8
   1091a:	430a      	orrs	r2, r1
   1091c:	701a      	strb	r2, [r3, #0]
   1091e:	1c38      	adds	r0, r7, #0
   10920:	9500      	str	r5, [sp, #0]
   10922:	3020      	adds	r0, #32
   10924:	6879      	ldr	r1, [r7, #4]
   10926:	4b5c      	ldr	r3, [pc, #368]	; (10a98 <mqtt_connect_broker+0x290>)
   10928:	6eea      	ldr	r2, [r5, #108]	; 0x6c
   1092a:	4c5c      	ldr	r4, [pc, #368]	; (10a9c <mqtt_connect_broker+0x294>)
   1092c:	47a0      	blx	r4
   1092e:	1c38      	adds	r0, r7, #0
   10930:	3020      	adds	r0, #32
   10932:	2110      	movs	r1, #16
   10934:	4b5a      	ldr	r3, [pc, #360]	; (10aa0 <mqtt_connect_broker+0x298>)
   10936:	4798      	blx	r3
   10938:	2e80      	cmp	r6, #128	; 0x80
   1093a:	dd09      	ble.n	10950 <mqtt_connect_broker+0x148>
   1093c:	2180      	movs	r1, #128	; 0x80
   1093e:	4249      	negs	r1, r1
   10940:	4331      	orrs	r1, r6
   10942:	1c38      	adds	r0, r7, #0
   10944:	b249      	sxtb	r1, r1
   10946:	3020      	adds	r0, #32
   10948:	4c55      	ldr	r4, [pc, #340]	; (10aa0 <mqtt_connect_broker+0x298>)
   1094a:	47a0      	blx	r4
   1094c:	11f6      	asrs	r6, r6, #7
   1094e:	e7f3      	b.n	10938 <mqtt_connect_broker+0x130>
   10950:	4b54      	ldr	r3, [pc, #336]	; (10aa4 <mqtt_connect_broker+0x29c>)
   10952:	401e      	ands	r6, r3
   10954:	d504      	bpl.n	10960 <mqtt_connect_broker+0x158>
   10956:	2380      	movs	r3, #128	; 0x80
   10958:	3e01      	subs	r6, #1
   1095a:	425b      	negs	r3, r3
   1095c:	431e      	orrs	r6, r3
   1095e:	3601      	adds	r6, #1
   10960:	1c38      	adds	r0, r7, #0
   10962:	b271      	sxtb	r1, r6
   10964:	3020      	adds	r0, #32
   10966:	4c4e      	ldr	r4, [pc, #312]	; (10aa0 <mqtt_connect_broker+0x298>)
   10968:	47a0      	blx	r4
   1096a:	1c38      	adds	r0, r7, #0
   1096c:	4c4e      	ldr	r4, [pc, #312]	; (10aa8 <mqtt_connect_broker+0x2a0>)
   1096e:	3020      	adds	r0, #32
   10970:	2106      	movs	r1, #6
   10972:	47a0      	blx	r4
   10974:	1c38      	adds	r0, r7, #0
   10976:	4b4d      	ldr	r3, [pc, #308]	; (10aac <mqtt_connect_broker+0x2a4>)
   10978:	3020      	adds	r0, #32
   1097a:	494d      	ldr	r1, [pc, #308]	; (10ab0 <mqtt_connect_broker+0x2a8>)
   1097c:	2206      	movs	r2, #6
   1097e:	4798      	blx	r3
   10980:	1c38      	adds	r0, r7, #0
   10982:	3020      	adds	r0, #32
   10984:	2103      	movs	r1, #3
   10986:	4a46      	ldr	r2, [pc, #280]	; (10aa0 <mqtt_connect_broker+0x298>)
   10988:	4790      	blx	r2
   1098a:	69bb      	ldr	r3, [r7, #24]
   1098c:	1c38      	adds	r0, r7, #0
   1098e:	4a44      	ldr	r2, [pc, #272]	; (10aa0 <mqtt_connect_broker+0x298>)
   10990:	b259      	sxtb	r1, r3
   10992:	3020      	adds	r0, #32
   10994:	4790      	blx	r2
   10996:	1c2b      	adds	r3, r5, #0
   10998:	3360      	adds	r3, #96	; 0x60
   1099a:	2000      	movs	r0, #0
   1099c:	5e19      	ldrsh	r1, [r3, r0]
   1099e:	1c38      	adds	r0, r7, #0
   109a0:	3020      	adds	r0, #32
   109a2:	47a0      	blx	r4
   109a4:	4e39      	ldr	r6, [pc, #228]	; (10a8c <mqtt_connect_broker+0x284>)
   109a6:	6e38      	ldr	r0, [r7, #96]	; 0x60
   109a8:	47b0      	blx	r6
   109aa:	b201      	sxth	r1, r0
   109ac:	1c38      	adds	r0, r7, #0
   109ae:	3020      	adds	r0, #32
   109b0:	47a0      	blx	r4
   109b2:	6e38      	ldr	r0, [r7, #96]	; 0x60
   109b4:	47b0      	blx	r6
   109b6:	1c02      	adds	r2, r0, #0
   109b8:	1c38      	adds	r0, r7, #0
   109ba:	3020      	adds	r0, #32
   109bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
   109be:	4b3b      	ldr	r3, [pc, #236]	; (10aac <mqtt_connect_broker+0x2a4>)
   109c0:	4798      	blx	r3
   109c2:	6e78      	ldr	r0, [r7, #100]	; 0x64
   109c4:	2800      	cmp	r0, #0
   109c6:	d015      	beq.n	109f4 <mqtt_connect_broker+0x1ec>
   109c8:	47b0      	blx	r6
   109ca:	b201      	sxth	r1, r0
   109cc:	1c38      	adds	r0, r7, #0
   109ce:	3020      	adds	r0, #32
   109d0:	47a0      	blx	r4
   109d2:	6e78      	ldr	r0, [r7, #100]	; 0x64
   109d4:	47b0      	blx	r6
   109d6:	1c02      	adds	r2, r0, #0
   109d8:	1c38      	adds	r0, r7, #0
   109da:	4c34      	ldr	r4, [pc, #208]	; (10aac <mqtt_connect_broker+0x2a4>)
   109dc:	3020      	adds	r0, #32
   109de:	6e79      	ldr	r1, [r7, #100]	; 0x64
   109e0:	47a0      	blx	r4
   109e2:	6ebc      	ldr	r4, [r7, #104]	; 0x68
   109e4:	2c00      	cmp	r4, #0
   109e6:	d005      	beq.n	109f4 <mqtt_connect_broker+0x1ec>
   109e8:	1c38      	adds	r0, r7, #0
   109ea:	1c21      	adds	r1, r4, #0
   109ec:	3020      	adds	r0, #32
   109ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   109f0:	4c2e      	ldr	r4, [pc, #184]	; (10aac <mqtt_connect_broker+0x2a4>)
   109f2:	47a0      	blx	r4
   109f4:	69fc      	ldr	r4, [r7, #28]
   109f6:	2c00      	cmp	r4, #0
   109f8:	d01f      	beq.n	10a3a <mqtt_connect_broker+0x232>
   109fa:	4e24      	ldr	r6, [pc, #144]	; (10a8c <mqtt_connect_broker+0x284>)
   109fc:	1c20      	adds	r0, r4, #0
   109fe:	47b0      	blx	r6
   10a00:	b201      	sxth	r1, r0
   10a02:	1c38      	adds	r0, r7, #0
   10a04:	3020      	adds	r0, #32
   10a06:	4c28      	ldr	r4, [pc, #160]	; (10aa8 <mqtt_connect_broker+0x2a0>)
   10a08:	47a0      	blx	r4
   10a0a:	69f8      	ldr	r0, [r7, #28]
   10a0c:	47b0      	blx	r6
   10a0e:	1c02      	adds	r2, r0, #0
   10a10:	1c38      	adds	r0, r7, #0
   10a12:	3020      	adds	r0, #32
   10a14:	69f9      	ldr	r1, [r7, #28]
   10a16:	4c25      	ldr	r4, [pc, #148]	; (10aac <mqtt_connect_broker+0x2a4>)
   10a18:	47a0      	blx	r4
   10a1a:	6978      	ldr	r0, [r7, #20]
   10a1c:	2800      	cmp	r0, #0
   10a1e:	d00c      	beq.n	10a3a <mqtt_connect_broker+0x232>
   10a20:	47b0      	blx	r6
   10a22:	b201      	sxth	r1, r0
   10a24:	1c38      	adds	r0, r7, #0
   10a26:	4a20      	ldr	r2, [pc, #128]	; (10aa8 <mqtt_connect_broker+0x2a0>)
   10a28:	3020      	adds	r0, #32
   10a2a:	4790      	blx	r2
   10a2c:	6978      	ldr	r0, [r7, #20]
   10a2e:	47b0      	blx	r6
   10a30:	1c02      	adds	r2, r0, #0
   10a32:	1c38      	adds	r0, r7, #0
   10a34:	3020      	adds	r0, #32
   10a36:	6979      	ldr	r1, [r7, #20]
   10a38:	47a0      	blx	r4
   10a3a:	1c38      	adds	r0, r7, #0
   10a3c:	1c2c      	adds	r4, r5, #0
   10a3e:	3020      	adds	r0, #32
   10a40:	4b1c      	ldr	r3, [pc, #112]	; (10ab4 <mqtt_connect_broker+0x2ac>)
   10a42:	3443      	adds	r4, #67	; 0x43
   10a44:	4798      	blx	r3
   10a46:	7821      	ldrb	r1, [r4, #0]
   10a48:	0789      	lsls	r1, r1, #30
   10a4a:	0fc9      	lsrs	r1, r1, #31
   10a4c:	2901      	cmp	r1, #1
   10a4e:	d10b      	bne.n	10a68 <mqtt_connect_broker+0x260>
   10a50:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   10a52:	2a00      	cmp	r2, #0
   10a54:	d108      	bne.n	10a68 <mqtt_connect_broker+0x260>
   10a56:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   10a58:	2b00      	cmp	r3, #0
   10a5a:	d005      	beq.n	10a68 <mqtt_connect_broker+0x260>
   10a5c:	2034      	movs	r0, #52	; 0x34
   10a5e:	55c2      	strb	r2, [r0, r7]
   10a60:	1c3a      	adds	r2, r7, #0
   10a62:	1c28      	adds	r0, r5, #0
   10a64:	3234      	adds	r2, #52	; 0x34
   10a66:	4798      	blx	r3
   10a68:	7823      	ldrb	r3, [r4, #0]
   10a6a:	2202      	movs	r2, #2
   10a6c:	4313      	orrs	r3, r2
   10a6e:	2208      	movs	r2, #8
   10a70:	4393      	bics	r3, r2
   10a72:	7023      	strb	r3, [r4, #0]
   10a74:	2000      	movs	r0, #0
   10a76:	e005      	b.n	10a84 <mqtt_connect_broker+0x27c>
   10a78:	2080      	movs	r0, #128	; 0x80
   10a7a:	e002      	b.n	10a82 <mqtt_connect_broker+0x27a>
   10a7c:	2078      	movs	r0, #120	; 0x78
   10a7e:	e000      	b.n	10a82 <mqtt_connect_broker+0x27a>
   10a80:	200b      	movs	r0, #11
   10a82:	4240      	negs	r0, r0
   10a84:	46bd      	mov	sp, r7
   10a86:	b013      	add	sp, #76	; 0x4c
   10a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a8a:	46c0      	nop			; (mov r8, r8)
   10a8c:	00011c0b 	.word	0x00011c0b
   10a90:	00009bd1 	.word	0x00009bd1
   10a94:	0000f43d 	.word	0x0000f43d
   10a98:	0001053d 	.word	0x0001053d
   10a9c:	0000f255 	.word	0x0000f255
   10aa0:	0000f27d 	.word	0x0000f27d
   10aa4:	8000007f 	.word	0x8000007f
   10aa8:	0000f2a1 	.word	0x0000f2a1
   10aac:	0000f2b9 	.word	0x0000f2b9
   10ab0:	00014a74 	.word	0x00014a74
   10ab4:	0000f265 	.word	0x0000f265

00010ab8 <mqtt_publish>:
   10ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10aba:	b093      	sub	sp, #76	; 0x4c
   10abc:	af02      	add	r7, sp, #8
   10abe:	60fb      	str	r3, [r7, #12]
   10ac0:	1c3b      	adds	r3, r7, #0
   10ac2:	3358      	adds	r3, #88	; 0x58
   10ac4:	781b      	ldrb	r3, [r3, #0]
   10ac6:	1c04      	adds	r4, r0, #0
   10ac8:	613b      	str	r3, [r7, #16]
   10aca:	1c3b      	adds	r3, r7, #0
   10acc:	335c      	adds	r3, #92	; 0x5c
   10ace:	781b      	ldrb	r3, [r3, #0]
   10ad0:	6179      	str	r1, [r7, #20]
   10ad2:	60ba      	str	r2, [r7, #8]
   10ad4:	607b      	str	r3, [r7, #4]
   10ad6:	2800      	cmp	r0, #0
   10ad8:	d101      	bne.n	10ade <mqtt_publish+0x26>
   10ada:	2516      	movs	r5, #22
   10adc:	e0a7      	b.n	10c2e <mqtt_publish+0x176>
   10ade:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   10ae0:	466a      	mov	r2, sp
   10ae2:	3307      	adds	r3, #7
   10ae4:	08db      	lsrs	r3, r3, #3
   10ae6:	00db      	lsls	r3, r3, #3
   10ae8:	1ad2      	subs	r2, r2, r3
   10aea:	697b      	ldr	r3, [r7, #20]
   10aec:	4695      	mov	sp, r2
   10aee:	ae02      	add	r6, sp, #8
   10af0:	2b00      	cmp	r3, #0
   10af2:	d0f2      	beq.n	10ada <mqtt_publish+0x22>
   10af4:	693a      	ldr	r2, [r7, #16]
   10af6:	2a02      	cmp	r2, #2
   10af8:	d8ef      	bhi.n	10ada <mqtt_publish+0x22>
   10afa:	1c05      	adds	r5, r0, #0
   10afc:	3543      	adds	r5, #67	; 0x43
   10afe:	782b      	ldrb	r3, [r5, #0]
   10b00:	079a      	lsls	r2, r3, #30
   10b02:	d400      	bmi.n	10b06 <mqtt_publish+0x4e>
   10b04:	e090      	b.n	10c28 <mqtt_publish+0x170>
   10b06:	071a      	lsls	r2, r3, #28
   10b08:	d40a      	bmi.n	10b20 <mqtt_publish+0x68>
   10b0a:	4b4b      	ldr	r3, [pc, #300]	; (10c38 <mqtt_publish+0x180>)
   10b0c:	6978      	ldr	r0, [r7, #20]
   10b0e:	4798      	blx	r3
   10b10:	68fd      	ldr	r5, [r7, #12]
   10b12:	693b      	ldr	r3, [r7, #16]
   10b14:	3502      	adds	r5, #2
   10b16:	182d      	adds	r5, r5, r0
   10b18:	2b00      	cmp	r3, #0
   10b1a:	d011      	beq.n	10b40 <mqtt_publish+0x88>
   10b1c:	3502      	adds	r5, #2
   10b1e:	e00f      	b.n	10b40 <mqtt_publish+0x88>
   10b20:	1c03      	adds	r3, r0, #0
   10b22:	3370      	adds	r3, #112	; 0x70
   10b24:	781b      	ldrb	r3, [r3, #0]
   10b26:	2b00      	cmp	r3, #0
   10b28:	d000      	beq.n	10b2c <mqtt_publish+0x74>
   10b2a:	e07f      	b.n	10c2c <mqtt_publish+0x174>
   10b2c:	782b      	ldrb	r3, [r5, #0]
   10b2e:	071a      	lsls	r2, r3, #28
   10b30:	d5eb      	bpl.n	10b0a <mqtt_publish+0x52>
   10b32:	4b42      	ldr	r3, [pc, #264]	; (10c3c <mqtt_publish+0x184>)
   10b34:	2000      	movs	r0, #0
   10b36:	4798      	blx	r3
   10b38:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   10b3a:	4b41      	ldr	r3, [pc, #260]	; (10c40 <mqtt_publish+0x188>)
   10b3c:	4798      	blx	r3
   10b3e:	e7f5      	b.n	10b2c <mqtt_publish+0x74>
   10b40:	1c23      	adds	r3, r4, #0
   10b42:	3343      	adds	r3, #67	; 0x43
   10b44:	781a      	ldrb	r2, [r3, #0]
   10b46:	2108      	movs	r1, #8
   10b48:	430a      	orrs	r2, r1
   10b4a:	701a      	strb	r2, [r3, #0]
   10b4c:	1c38      	adds	r0, r7, #0
   10b4e:	9400      	str	r4, [sp, #0]
   10b50:	1c31      	adds	r1, r6, #0
   10b52:	302c      	adds	r0, #44	; 0x2c
   10b54:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   10b56:	4b3b      	ldr	r3, [pc, #236]	; (10c44 <mqtt_publish+0x18c>)
   10b58:	4e3b      	ldr	r6, [pc, #236]	; (10c48 <mqtt_publish+0x190>)
   10b5a:	47b0      	blx	r6
   10b5c:	687b      	ldr	r3, [r7, #4]
   10b5e:	2101      	movs	r1, #1
   10b60:	4019      	ands	r1, r3
   10b62:	2330      	movs	r3, #48	; 0x30
   10b64:	4319      	orrs	r1, r3
   10b66:	693b      	ldr	r3, [r7, #16]
   10b68:	1c38      	adds	r0, r7, #0
   10b6a:	005a      	lsls	r2, r3, #1
   10b6c:	2306      	movs	r3, #6
   10b6e:	4013      	ands	r3, r2
   10b70:	4319      	orrs	r1, r3
   10b72:	302c      	adds	r0, #44	; 0x2c
   10b74:	4b35      	ldr	r3, [pc, #212]	; (10c4c <mqtt_publish+0x194>)
   10b76:	4798      	blx	r3
   10b78:	4b34      	ldr	r3, [pc, #208]	; (10c4c <mqtt_publish+0x194>)
   10b7a:	2d80      	cmp	r5, #128	; 0x80
   10b7c:	dd08      	ble.n	10b90 <mqtt_publish+0xd8>
   10b7e:	2180      	movs	r1, #128	; 0x80
   10b80:	4249      	negs	r1, r1
   10b82:	4329      	orrs	r1, r5
   10b84:	1c38      	adds	r0, r7, #0
   10b86:	b249      	sxtb	r1, r1
   10b88:	302c      	adds	r0, #44	; 0x2c
   10b8a:	4798      	blx	r3
   10b8c:	11ed      	asrs	r5, r5, #7
   10b8e:	e7f3      	b.n	10b78 <mqtt_publish+0xc0>
   10b90:	4a2f      	ldr	r2, [pc, #188]	; (10c50 <mqtt_publish+0x198>)
   10b92:	4015      	ands	r5, r2
   10b94:	d504      	bpl.n	10ba0 <mqtt_publish+0xe8>
   10b96:	2280      	movs	r2, #128	; 0x80
   10b98:	3d01      	subs	r5, #1
   10b9a:	4252      	negs	r2, r2
   10b9c:	4315      	orrs	r5, r2
   10b9e:	3501      	adds	r5, #1
   10ba0:	1c38      	adds	r0, r7, #0
   10ba2:	b269      	sxtb	r1, r5
   10ba4:	302c      	adds	r0, #44	; 0x2c
   10ba6:	4798      	blx	r3
   10ba8:	4e23      	ldr	r6, [pc, #140]	; (10c38 <mqtt_publish+0x180>)
   10baa:	6978      	ldr	r0, [r7, #20]
   10bac:	47b0      	blx	r6
   10bae:	b201      	sxth	r1, r0
   10bb0:	1c38      	adds	r0, r7, #0
   10bb2:	302c      	adds	r0, #44	; 0x2c
   10bb4:	4d27      	ldr	r5, [pc, #156]	; (10c54 <mqtt_publish+0x19c>)
   10bb6:	47a8      	blx	r5
   10bb8:	6978      	ldr	r0, [r7, #20]
   10bba:	47b0      	blx	r6
   10bbc:	1c02      	adds	r2, r0, #0
   10bbe:	1c38      	adds	r0, r7, #0
   10bc0:	302c      	adds	r0, #44	; 0x2c
   10bc2:	6979      	ldr	r1, [r7, #20]
   10bc4:	4e24      	ldr	r6, [pc, #144]	; (10c58 <mqtt_publish+0x1a0>)
   10bc6:	47b0      	blx	r6
   10bc8:	693a      	ldr	r2, [r7, #16]
   10bca:	2a00      	cmp	r2, #0
   10bcc:	d006      	beq.n	10bdc <mqtt_publish+0x124>
   10bce:	8821      	ldrh	r1, [r4, #0]
   10bd0:	1c38      	adds	r0, r7, #0
   10bd2:	1c4b      	adds	r3, r1, #1
   10bd4:	8023      	strh	r3, [r4, #0]
   10bd6:	b209      	sxth	r1, r1
   10bd8:	302c      	adds	r0, #44	; 0x2c
   10bda:	47a8      	blx	r5
   10bdc:	8823      	ldrh	r3, [r4, #0]
   10bde:	2b00      	cmp	r3, #0
   10be0:	d101      	bne.n	10be6 <mqtt_publish+0x12e>
   10be2:	2301      	movs	r3, #1
   10be4:	8023      	strh	r3, [r4, #0]
   10be6:	68bb      	ldr	r3, [r7, #8]
   10be8:	2b00      	cmp	r3, #0
   10bea:	d006      	beq.n	10bfa <mqtt_publish+0x142>
   10bec:	68fa      	ldr	r2, [r7, #12]
   10bee:	2a00      	cmp	r2, #0
   10bf0:	d003      	beq.n	10bfa <mqtt_publish+0x142>
   10bf2:	1c38      	adds	r0, r7, #0
   10bf4:	302c      	adds	r0, #44	; 0x2c
   10bf6:	1c19      	adds	r1, r3, #0
   10bf8:	47b0      	blx	r6
   10bfa:	1c38      	adds	r0, r7, #0
   10bfc:	4b17      	ldr	r3, [pc, #92]	; (10c5c <mqtt_publish+0x1a4>)
   10bfe:	302c      	adds	r0, #44	; 0x2c
   10c00:	4798      	blx	r3
   10c02:	1c23      	adds	r3, r4, #0
   10c04:	3343      	adds	r3, #67	; 0x43
   10c06:	781a      	ldrb	r2, [r3, #0]
   10c08:	2108      	movs	r1, #8
   10c0a:	438a      	bics	r2, r1
   10c0c:	701a      	strb	r2, [r3, #0]
   10c0e:	693b      	ldr	r3, [r7, #16]
   10c10:	2500      	movs	r5, #0
   10c12:	42ab      	cmp	r3, r5
   10c14:	d10c      	bne.n	10c30 <mqtt_publish+0x178>
   10c16:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10c18:	42ab      	cmp	r3, r5
   10c1a:	d009      	beq.n	10c30 <mqtt_publish+0x178>
   10c1c:	1c3a      	adds	r2, r7, #0
   10c1e:	1c20      	adds	r0, r4, #0
   10c20:	2102      	movs	r1, #2
   10c22:	3218      	adds	r2, #24
   10c24:	4798      	blx	r3
   10c26:	e003      	b.n	10c30 <mqtt_publish+0x178>
   10c28:	2580      	movs	r5, #128	; 0x80
   10c2a:	e000      	b.n	10c2e <mqtt_publish+0x176>
   10c2c:	250b      	movs	r5, #11
   10c2e:	426d      	negs	r5, r5
   10c30:	1c28      	adds	r0, r5, #0
   10c32:	46bd      	mov	sp, r7
   10c34:	b011      	add	sp, #68	; 0x44
   10c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c38:	00011c0b 	.word	0x00011c0b
   10c3c:	00009bd1 	.word	0x00009bd1
   10c40:	0000f43d 	.word	0x0000f43d
   10c44:	0001053d 	.word	0x0001053d
   10c48:	0000f255 	.word	0x0000f255
   10c4c:	0000f27d 	.word	0x0000f27d
   10c50:	8000007f 	.word	0x8000007f
   10c54:	0000f2a1 	.word	0x0000f2a1
   10c58:	0000f2b9 	.word	0x0000f2b9
   10c5c:	0000f265 	.word	0x0000f265

00010c60 <mqtt_subscribe>:
   10c60:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c62:	b08d      	sub	sp, #52	; 0x34
   10c64:	af02      	add	r7, sp, #8
   10c66:	1c04      	adds	r4, r0, #0
   10c68:	60b9      	str	r1, [r7, #8]
   10c6a:	607a      	str	r2, [r7, #4]
   10c6c:	d101      	bne.n	10c72 <mqtt_subscribe+0x12>
   10c6e:	2016      	movs	r0, #22
   10c70:	e086      	b.n	10d80 <mqtt_subscribe+0x120>
   10c72:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   10c74:	466a      	mov	r2, sp
   10c76:	3307      	adds	r3, #7
   10c78:	08db      	lsrs	r3, r3, #3
   10c7a:	00db      	lsls	r3, r3, #3
   10c7c:	1ad2      	subs	r2, r2, r3
   10c7e:	4695      	mov	sp, r2
   10c80:	ad02      	add	r5, sp, #8
   10c82:	603d      	str	r5, [r7, #0]
   10c84:	68bd      	ldr	r5, [r7, #8]
   10c86:	2d00      	cmp	r5, #0
   10c88:	d0f1      	beq.n	10c6e <mqtt_subscribe+0xe>
   10c8a:	687d      	ldr	r5, [r7, #4]
   10c8c:	2d02      	cmp	r5, #2
   10c8e:	d8ee      	bhi.n	10c6e <mqtt_subscribe+0xe>
   10c90:	1c05      	adds	r5, r0, #0
   10c92:	3543      	adds	r5, #67	; 0x43
   10c94:	782b      	ldrb	r3, [r5, #0]
   10c96:	079a      	lsls	r2, r3, #30
   10c98:	d56f      	bpl.n	10d7a <mqtt_subscribe+0x11a>
   10c9a:	071a      	lsls	r2, r3, #28
   10c9c:	d41a      	bmi.n	10cd4 <mqtt_subscribe+0x74>
   10c9e:	68b8      	ldr	r0, [r7, #8]
   10ca0:	4d39      	ldr	r5, [pc, #228]	; (10d88 <mqtt_subscribe+0x128>)
   10ca2:	47a8      	blx	r5
   10ca4:	1c25      	adds	r5, r4, #0
   10ca6:	3543      	adds	r5, #67	; 0x43
   10ca8:	782b      	ldrb	r3, [r5, #0]
   10caa:	2208      	movs	r2, #8
   10cac:	4313      	orrs	r3, r2
   10cae:	702b      	strb	r3, [r5, #0]
   10cb0:	60fd      	str	r5, [r7, #12]
   10cb2:	1d46      	adds	r6, r0, #5
   10cb4:	9400      	str	r4, [sp, #0]
   10cb6:	1c38      	adds	r0, r7, #0
   10cb8:	3014      	adds	r0, #20
   10cba:	6839      	ldr	r1, [r7, #0]
   10cbc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   10cbe:	4b33      	ldr	r3, [pc, #204]	; (10d8c <mqtt_subscribe+0x12c>)
   10cc0:	4d33      	ldr	r5, [pc, #204]	; (10d90 <mqtt_subscribe+0x130>)
   10cc2:	47a8      	blx	r5
   10cc4:	1c38      	adds	r0, r7, #0
   10cc6:	217e      	movs	r1, #126	; 0x7e
   10cc8:	3014      	adds	r0, #20
   10cca:	4249      	negs	r1, r1
   10ccc:	4b31      	ldr	r3, [pc, #196]	; (10d94 <mqtt_subscribe+0x134>)
   10cce:	4798      	blx	r3
   10cd0:	4d2d      	ldr	r5, [pc, #180]	; (10d88 <mqtt_subscribe+0x128>)
   10cd2:	e00e      	b.n	10cf2 <mqtt_subscribe+0x92>
   10cd4:	1c03      	adds	r3, r0, #0
   10cd6:	3370      	adds	r3, #112	; 0x70
   10cd8:	781b      	ldrb	r3, [r3, #0]
   10cda:	2b00      	cmp	r3, #0
   10cdc:	d14f      	bne.n	10d7e <mqtt_subscribe+0x11e>
   10cde:	782b      	ldrb	r3, [r5, #0]
   10ce0:	071a      	lsls	r2, r3, #28
   10ce2:	d5dc      	bpl.n	10c9e <mqtt_subscribe+0x3e>
   10ce4:	4b2c      	ldr	r3, [pc, #176]	; (10d98 <mqtt_subscribe+0x138>)
   10ce6:	2000      	movs	r0, #0
   10ce8:	4798      	blx	r3
   10cea:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   10cec:	4b2b      	ldr	r3, [pc, #172]	; (10d9c <mqtt_subscribe+0x13c>)
   10cee:	4798      	blx	r3
   10cf0:	e7f5      	b.n	10cde <mqtt_subscribe+0x7e>
   10cf2:	4b28      	ldr	r3, [pc, #160]	; (10d94 <mqtt_subscribe+0x134>)
   10cf4:	2e80      	cmp	r6, #128	; 0x80
   10cf6:	dd08      	ble.n	10d0a <mqtt_subscribe+0xaa>
   10cf8:	2180      	movs	r1, #128	; 0x80
   10cfa:	4249      	negs	r1, r1
   10cfc:	4331      	orrs	r1, r6
   10cfe:	1c38      	adds	r0, r7, #0
   10d00:	b249      	sxtb	r1, r1
   10d02:	3014      	adds	r0, #20
   10d04:	4798      	blx	r3
   10d06:	11f6      	asrs	r6, r6, #7
   10d08:	e7f3      	b.n	10cf2 <mqtt_subscribe+0x92>
   10d0a:	4925      	ldr	r1, [pc, #148]	; (10da0 <mqtt_subscribe+0x140>)
   10d0c:	4031      	ands	r1, r6
   10d0e:	d504      	bpl.n	10d1a <mqtt_subscribe+0xba>
   10d10:	2280      	movs	r2, #128	; 0x80
   10d12:	3901      	subs	r1, #1
   10d14:	4252      	negs	r2, r2
   10d16:	4311      	orrs	r1, r2
   10d18:	3101      	adds	r1, #1
   10d1a:	1c38      	adds	r0, r7, #0
   10d1c:	b249      	sxtb	r1, r1
   10d1e:	3014      	adds	r0, #20
   10d20:	4798      	blx	r3
   10d22:	8821      	ldrh	r1, [r4, #0]
   10d24:	1c38      	adds	r0, r7, #0
   10d26:	1c4b      	adds	r3, r1, #1
   10d28:	8023      	strh	r3, [r4, #0]
   10d2a:	b209      	sxth	r1, r1
   10d2c:	3014      	adds	r0, #20
   10d2e:	4e1d      	ldr	r6, [pc, #116]	; (10da4 <mqtt_subscribe+0x144>)
   10d30:	47b0      	blx	r6
   10d32:	8823      	ldrh	r3, [r4, #0]
   10d34:	2b00      	cmp	r3, #0
   10d36:	d101      	bne.n	10d3c <mqtt_subscribe+0xdc>
   10d38:	2301      	movs	r3, #1
   10d3a:	8023      	strh	r3, [r4, #0]
   10d3c:	68b8      	ldr	r0, [r7, #8]
   10d3e:	47a8      	blx	r5
   10d40:	b201      	sxth	r1, r0
   10d42:	1c38      	adds	r0, r7, #0
   10d44:	3014      	adds	r0, #20
   10d46:	47b0      	blx	r6
   10d48:	68b8      	ldr	r0, [r7, #8]
   10d4a:	47a8      	blx	r5
   10d4c:	1c02      	adds	r2, r0, #0
   10d4e:	1c38      	adds	r0, r7, #0
   10d50:	3014      	adds	r0, #20
   10d52:	68b9      	ldr	r1, [r7, #8]
   10d54:	4b14      	ldr	r3, [pc, #80]	; (10da8 <mqtt_subscribe+0x148>)
   10d56:	4798      	blx	r3
   10d58:	687d      	ldr	r5, [r7, #4]
   10d5a:	1c38      	adds	r0, r7, #0
   10d5c:	b269      	sxtb	r1, r5
   10d5e:	3014      	adds	r0, #20
   10d60:	4b0c      	ldr	r3, [pc, #48]	; (10d94 <mqtt_subscribe+0x134>)
   10d62:	4798      	blx	r3
   10d64:	1c38      	adds	r0, r7, #0
   10d66:	3014      	adds	r0, #20
   10d68:	4b10      	ldr	r3, [pc, #64]	; (10dac <mqtt_subscribe+0x14c>)
   10d6a:	4798      	blx	r3
   10d6c:	68fd      	ldr	r5, [r7, #12]
   10d6e:	2208      	movs	r2, #8
   10d70:	782b      	ldrb	r3, [r5, #0]
   10d72:	2000      	movs	r0, #0
   10d74:	4393      	bics	r3, r2
   10d76:	702b      	strb	r3, [r5, #0]
   10d78:	e003      	b.n	10d82 <mqtt_subscribe+0x122>
   10d7a:	2080      	movs	r0, #128	; 0x80
   10d7c:	e000      	b.n	10d80 <mqtt_subscribe+0x120>
   10d7e:	200b      	movs	r0, #11
   10d80:	4240      	negs	r0, r0
   10d82:	46bd      	mov	sp, r7
   10d84:	b00b      	add	sp, #44	; 0x2c
   10d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d88:	00011c0b 	.word	0x00011c0b
   10d8c:	0001053d 	.word	0x0001053d
   10d90:	0000f255 	.word	0x0000f255
   10d94:	0000f27d 	.word	0x0000f27d
   10d98:	00009bd1 	.word	0x00009bd1
   10d9c:	0000f43d 	.word	0x0000f43d
   10da0:	8000007f 	.word	0x8000007f
   10da4:	0000f2a1 	.word	0x0000f2a1
   10da8:	0000f2b9 	.word	0x0000f2b9
   10dac:	0000f265 	.word	0x0000f265

00010db0 <_mqtt_ping>:
   10db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10db2:	23c0      	movs	r3, #192	; 0xc0
   10db4:	a901      	add	r1, sp, #4
   10db6:	2500      	movs	r5, #0
   10db8:	700b      	strb	r3, [r1, #0]
   10dba:	704d      	strb	r5, [r1, #1]
   10dbc:	42a8      	cmp	r0, r5
   10dbe:	d019      	beq.n	10df4 <_mqtt_ping+0x44>
   10dc0:	1c04      	adds	r4, r0, #0
   10dc2:	3443      	adds	r4, #67	; 0x43
   10dc4:	7823      	ldrb	r3, [r4, #0]
   10dc6:	079a      	lsls	r2, r3, #30
   10dc8:	d516      	bpl.n	10df8 <_mqtt_ping+0x48>
   10dca:	071a      	lsls	r2, r3, #28
   10dcc:	d416      	bmi.n	10dfc <_mqtt_ping+0x4c>
   10dce:	2608      	movs	r6, #8
   10dd0:	4333      	orrs	r3, r6
   10dd2:	7023      	strb	r3, [r4, #0]
   10dd4:	7880      	ldrb	r0, [r0, #2]
   10dd6:	1c2b      	adds	r3, r5, #0
   10dd8:	b240      	sxtb	r0, r0
   10dda:	2202      	movs	r2, #2
   10ddc:	4f09      	ldr	r7, [pc, #36]	; (10e04 <_mqtt_ping+0x54>)
   10dde:	47b8      	blx	r7
   10de0:	1c2b      	adds	r3, r5, #0
   10de2:	42a8      	cmp	r0, r5
   10de4:	da0c      	bge.n	10e00 <_mqtt_ping+0x50>
   10de6:	7823      	ldrb	r3, [r4, #0]
   10de8:	43b3      	bics	r3, r6
   10dea:	7023      	strb	r3, [r4, #0]
   10dec:	4b06      	ldr	r3, [pc, #24]	; (10e08 <_mqtt_ping+0x58>)
   10dee:	4798      	blx	r3
   10df0:	1c03      	adds	r3, r0, #0
   10df2:	e005      	b.n	10e00 <_mqtt_ping+0x50>
   10df4:	2316      	movs	r3, #22
   10df6:	e002      	b.n	10dfe <_mqtt_ping+0x4e>
   10df8:	2380      	movs	r3, #128	; 0x80
   10dfa:	e000      	b.n	10dfe <_mqtt_ping+0x4e>
   10dfc:	230b      	movs	r3, #11
   10dfe:	425b      	negs	r3, r3
   10e00:	1c18      	adds	r0, r3, #0
   10e02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10e04:	0000b941 	.word	0x0000b941
   10e08:	000104ed 	.word	0x000104ed

00010e0c <mqtt_timer_callback>:
   10e0c:	b570      	push	{r4, r5, r6, lr}
   10e0e:	1c05      	adds	r5, r0, #0
   10e10:	b086      	sub	sp, #24
   10e12:	1c0e      	adds	r6, r1, #0
   10e14:	1c14      	adds	r4, r2, #0
   10e16:	2800      	cmp	r0, #0
   10e18:	d012      	beq.n	10e40 <mqtt_timer_callback+0x34>
   10e1a:	2a00      	cmp	r2, #0
   10e1c:	d010      	beq.n	10e40 <mqtt_timer_callback+0x34>
   10e1e:	1c10      	adds	r0, r2, #0
   10e20:	4b08      	ldr	r3, [pc, #32]	; (10e44 <mqtt_timer_callback+0x38>)
   10e22:	4798      	blx	r3
   10e24:	2800      	cmp	r0, #0
   10e26:	da04      	bge.n	10e32 <mqtt_timer_callback+0x26>
   10e28:	1c28      	adds	r0, r5, #0
   10e2a:	1c31      	adds	r1, r6, #0
   10e2c:	2200      	movs	r2, #0
   10e2e:	4b06      	ldr	r3, [pc, #24]	; (10e48 <mqtt_timer_callback+0x3c>)
   10e30:	e005      	b.n	10e3e <mqtt_timer_callback+0x32>
   10e32:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10e34:	2b00      	cmp	r3, #0
   10e36:	d003      	beq.n	10e40 <mqtt_timer_callback+0x34>
   10e38:	1c20      	adds	r0, r4, #0
   10e3a:	2107      	movs	r1, #7
   10e3c:	aa01      	add	r2, sp, #4
   10e3e:	4798      	blx	r3
   10e40:	b006      	add	sp, #24
   10e42:	bd70      	pop	{r4, r5, r6, pc}
   10e44:	00010db1 	.word	0x00010db1
   10e48:	0000f401 	.word	0x0000f401

00010e4c <_mqtt_puback>:
   10e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10e4e:	2302      	movs	r3, #2
   10e50:	ac01      	add	r4, sp, #4
   10e52:	2700      	movs	r7, #0
   10e54:	7063      	strb	r3, [r4, #1]
   10e56:	42b8      	cmp	r0, r7
   10e58:	d01e      	beq.n	10e98 <_mqtt_puback+0x4c>
   10e5a:	1c05      	adds	r5, r0, #0
   10e5c:	3543      	adds	r5, #67	; 0x43
   10e5e:	782b      	ldrb	r3, [r5, #0]
   10e60:	079e      	lsls	r6, r3, #30
   10e62:	d51b      	bpl.n	10e9c <_mqtt_puback+0x50>
   10e64:	071e      	lsls	r6, r3, #28
   10e66:	d41b      	bmi.n	10ea0 <_mqtt_puback+0x54>
   10e68:	2608      	movs	r6, #8
   10e6a:	4333      	orrs	r3, r6
   10e6c:	702b      	strb	r3, [r5, #0]
   10e6e:	7880      	ldrb	r0, [r0, #2]
   10e70:	7021      	strb	r1, [r4, #0]
   10e72:	0a11      	lsrs	r1, r2, #8
   10e74:	70a1      	strb	r1, [r4, #2]
   10e76:	70e2      	strb	r2, [r4, #3]
   10e78:	1c21      	adds	r1, r4, #0
   10e7a:	1c3b      	adds	r3, r7, #0
   10e7c:	b240      	sxtb	r0, r0
   10e7e:	2204      	movs	r2, #4
   10e80:	4c09      	ldr	r4, [pc, #36]	; (10ea8 <_mqtt_puback+0x5c>)
   10e82:	47a0      	blx	r4
   10e84:	1c3b      	adds	r3, r7, #0
   10e86:	42b8      	cmp	r0, r7
   10e88:	da0c      	bge.n	10ea4 <_mqtt_puback+0x58>
   10e8a:	782b      	ldrb	r3, [r5, #0]
   10e8c:	43b3      	bics	r3, r6
   10e8e:	702b      	strb	r3, [r5, #0]
   10e90:	4b06      	ldr	r3, [pc, #24]	; (10eac <_mqtt_puback+0x60>)
   10e92:	4798      	blx	r3
   10e94:	1c03      	adds	r3, r0, #0
   10e96:	e005      	b.n	10ea4 <_mqtt_puback+0x58>
   10e98:	2316      	movs	r3, #22
   10e9a:	e002      	b.n	10ea2 <_mqtt_puback+0x56>
   10e9c:	2380      	movs	r3, #128	; 0x80
   10e9e:	e000      	b.n	10ea2 <_mqtt_puback+0x56>
   10ea0:	230b      	movs	r3, #11
   10ea2:	425b      	negs	r3, r3
   10ea4:	1c18      	adds	r0, r3, #0
   10ea6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10ea8:	0000b941 	.word	0x0000b941
   10eac:	000104ed 	.word	0x000104ed

00010eb0 <mqtt_clear_conn>:
   10eb0:	b530      	push	{r4, r5, lr}
   10eb2:	1c04      	adds	r4, r0, #0
   10eb4:	b087      	sub	sp, #28
   10eb6:	2800      	cmp	r0, #0
   10eb8:	d01c      	beq.n	10ef4 <mqtt_clear_conn+0x44>
   10eba:	2002      	movs	r0, #2
   10ebc:	4b0e      	ldr	r3, [pc, #56]	; (10ef8 <mqtt_clear_conn+0x48>)
   10ebe:	5620      	ldrsb	r0, [r4, r0]
   10ec0:	4798      	blx	r3
   10ec2:	1c23      	adds	r3, r4, #0
   10ec4:	3343      	adds	r3, #67	; 0x43
   10ec6:	781a      	ldrb	r2, [r3, #0]
   10ec8:	21fc      	movs	r1, #252	; 0xfc
   10eca:	0795      	lsls	r5, r2, #30
   10ecc:	400a      	ands	r2, r1
   10ece:	701a      	strb	r2, [r3, #0]
   10ed0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   10ed2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   10ed4:	9301      	str	r3, [sp, #4]
   10ed6:	2300      	movs	r3, #0
   10ed8:	64e3      	str	r3, [r4, #76]	; 0x4c
   10eda:	6d21      	ldr	r1, [r4, #80]	; 0x50
   10edc:	4b07      	ldr	r3, [pc, #28]	; (10efc <mqtt_clear_conn+0x4c>)
   10ede:	4798      	blx	r3
   10ee0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10ee2:	0fed      	lsrs	r5, r5, #31
   10ee4:	2b00      	cmp	r3, #0
   10ee6:	d005      	beq.n	10ef4 <mqtt_clear_conn+0x44>
   10ee8:	2d00      	cmp	r5, #0
   10eea:	d003      	beq.n	10ef4 <mqtt_clear_conn+0x44>
   10eec:	1c20      	adds	r0, r4, #0
   10eee:	2105      	movs	r1, #5
   10ef0:	aa01      	add	r2, sp, #4
   10ef2:	4798      	blx	r3
   10ef4:	b007      	add	sp, #28
   10ef6:	bd30      	pop	{r4, r5, pc}
   10ef8:	0000ba6d 	.word	0x0000ba6d
   10efc:	0000f42d 	.word	0x0000f42d

00010f00 <mqtt_disconnect>:
   10f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10f02:	23e0      	movs	r3, #224	; 0xe0
   10f04:	ae01      	add	r6, sp, #4
   10f06:	2700      	movs	r7, #0
   10f08:	1c05      	adds	r5, r0, #0
   10f0a:	7033      	strb	r3, [r6, #0]
   10f0c:	7077      	strb	r7, [r6, #1]
   10f0e:	42b8      	cmp	r0, r7
   10f10:	d036      	beq.n	10f80 <mqtt_disconnect+0x80>
   10f12:	1c04      	adds	r4, r0, #0
   10f14:	3443      	adds	r4, #67	; 0x43
   10f16:	7823      	ldrb	r3, [r4, #0]
   10f18:	079a      	lsls	r2, r3, #30
   10f1a:	d533      	bpl.n	10f84 <mqtt_disconnect+0x84>
   10f1c:	42b9      	cmp	r1, r7
   10f1e:	d12b      	bne.n	10f78 <mqtt_disconnect+0x78>
   10f20:	071a      	lsls	r2, r3, #28
   10f22:	d414      	bmi.n	10f4e <mqtt_disconnect+0x4e>
   10f24:	7823      	ldrb	r3, [r4, #0]
   10f26:	2210      	movs	r2, #16
   10f28:	4313      	orrs	r3, r2
   10f2a:	2708      	movs	r7, #8
   10f2c:	433b      	orrs	r3, r7
   10f2e:	7023      	strb	r3, [r4, #0]
   10f30:	2002      	movs	r0, #2
   10f32:	5628      	ldrsb	r0, [r5, r0]
   10f34:	1c31      	adds	r1, r6, #0
   10f36:	2202      	movs	r2, #2
   10f38:	2300      	movs	r3, #0
   10f3a:	4d15      	ldr	r5, [pc, #84]	; (10f90 <mqtt_disconnect+0x90>)
   10f3c:	47a8      	blx	r5
   10f3e:	2800      	cmp	r0, #0
   10f40:	da14      	bge.n	10f6c <mqtt_disconnect+0x6c>
   10f42:	7823      	ldrb	r3, [r4, #0]
   10f44:	43bb      	bics	r3, r7
   10f46:	7023      	strb	r3, [r4, #0]
   10f48:	4b12      	ldr	r3, [pc, #72]	; (10f94 <mqtt_disconnect+0x94>)
   10f4a:	4798      	blx	r3
   10f4c:	e01e      	b.n	10f8c <mqtt_disconnect+0x8c>
   10f4e:	1c03      	adds	r3, r0, #0
   10f50:	3370      	adds	r3, #112	; 0x70
   10f52:	781b      	ldrb	r3, [r3, #0]
   10f54:	2b00      	cmp	r3, #0
   10f56:	d117      	bne.n	10f88 <mqtt_disconnect+0x88>
   10f58:	7823      	ldrb	r3, [r4, #0]
   10f5a:	071a      	lsls	r2, r3, #28
   10f5c:	d5e2      	bpl.n	10f24 <mqtt_disconnect+0x24>
   10f5e:	4b0e      	ldr	r3, [pc, #56]	; (10f98 <mqtt_disconnect+0x98>)
   10f60:	2000      	movs	r0, #0
   10f62:	4798      	blx	r3
   10f64:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   10f66:	4b0d      	ldr	r3, [pc, #52]	; (10f9c <mqtt_disconnect+0x9c>)
   10f68:	4798      	blx	r3
   10f6a:	e7f5      	b.n	10f58 <mqtt_disconnect+0x58>
   10f6c:	7823      	ldrb	r3, [r4, #0]
   10f6e:	2202      	movs	r2, #2
   10f70:	4393      	bics	r3, r2
   10f72:	7023      	strb	r3, [r4, #0]
   10f74:	2000      	movs	r0, #0
   10f76:	e009      	b.n	10f8c <mqtt_disconnect+0x8c>
   10f78:	4b09      	ldr	r3, [pc, #36]	; (10fa0 <mqtt_disconnect+0xa0>)
   10f7a:	4798      	blx	r3
   10f7c:	1c38      	adds	r0, r7, #0
   10f7e:	e005      	b.n	10f8c <mqtt_disconnect+0x8c>
   10f80:	2016      	movs	r0, #22
   10f82:	e002      	b.n	10f8a <mqtt_disconnect+0x8a>
   10f84:	2080      	movs	r0, #128	; 0x80
   10f86:	e000      	b.n	10f8a <mqtt_disconnect+0x8a>
   10f88:	200b      	movs	r0, #11
   10f8a:	4240      	negs	r0, r0
   10f8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10f8e:	46c0      	nop			; (mov r8, r8)
   10f90:	0000b941 	.word	0x0000b941
   10f94:	000104ed 	.word	0x000104ed
   10f98:	00009bd1 	.word	0x00009bd1
   10f9c:	0000f43d 	.word	0x0000f43d
   10fa0:	00010eb1 	.word	0x00010eb1

00010fa4 <_mqtt_recv_handler>:
   10fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fa6:	1c04      	adds	r4, r0, #0
   10fa8:	6e40      	ldr	r0, [r0, #100]	; 0x64
   10faa:	230f      	movs	r3, #15
   10fac:	7802      	ldrb	r2, [r0, #0]
   10fae:	b087      	sub	sp, #28
   10fb0:	1c15      	adds	r5, r2, #0
   10fb2:	439d      	bics	r5, r3
   10fb4:	2d50      	cmp	r5, #80	; 0x50
   10fb6:	d100      	bne.n	10fba <_mqtt_recv_handler+0x16>
   10fb8:	e098      	b.n	110ec <_mqtt_recv_handler+0x148>
   10fba:	d808      	bhi.n	10fce <_mqtt_recv_handler+0x2a>
   10fbc:	2d30      	cmp	r5, #48	; 0x30
   10fbe:	d03f      	beq.n	11040 <_mqtt_recv_handler+0x9c>
   10fc0:	2d40      	cmp	r5, #64	; 0x40
   10fc2:	d100      	bne.n	10fc6 <_mqtt_recv_handler+0x22>
   10fc4:	e0b3      	b.n	1112e <_mqtt_recv_handler+0x18a>
   10fc6:	2d20      	cmp	r5, #32
   10fc8:	d000      	beq.n	10fcc <_mqtt_recv_handler+0x28>
   10fca:	e0c3      	b.n	11154 <_mqtt_recv_handler+0x1b0>
   10fcc:	e00e      	b.n	10fec <_mqtt_recv_handler+0x48>
   10fce:	2d70      	cmp	r5, #112	; 0x70
   10fd0:	d100      	bne.n	10fd4 <_mqtt_recv_handler+0x30>
   10fd2:	e0ac      	b.n	1112e <_mqtt_recv_handler+0x18a>
   10fd4:	d803      	bhi.n	10fde <_mqtt_recv_handler+0x3a>
   10fd6:	2d60      	cmp	r5, #96	; 0x60
   10fd8:	d100      	bne.n	10fdc <_mqtt_recv_handler+0x38>
   10fda:	e096      	b.n	1110a <_mqtt_recv_handler+0x166>
   10fdc:	e0ba      	b.n	11154 <_mqtt_recv_handler+0x1b0>
   10fde:	2d90      	cmp	r5, #144	; 0x90
   10fe0:	d100      	bne.n	10fe4 <_mqtt_recv_handler+0x40>
   10fe2:	e0aa      	b.n	1113a <_mqtt_recv_handler+0x196>
   10fe4:	2db0      	cmp	r5, #176	; 0xb0
   10fe6:	d100      	bne.n	10fea <_mqtt_recv_handler+0x46>
   10fe8:	e0ad      	b.n	11146 <_mqtt_recv_handler+0x1a2>
   10fea:	e0b3      	b.n	11154 <_mqtt_recv_handler+0x1b0>
   10fec:	aa01      	add	r2, sp, #4
   10fee:	2303      	movs	r3, #3
   10ff0:	2901      	cmp	r1, #1
   10ff2:	d900      	bls.n	10ff6 <_mqtt_recv_handler+0x52>
   10ff4:	78c3      	ldrb	r3, [r0, #3]
   10ff6:	7013      	strb	r3, [r2, #0]
   10ff8:	7813      	ldrb	r3, [r2, #0]
   10ffa:	2b00      	cmp	r3, #0
   10ffc:	d00d      	beq.n	1101a <_mqtt_recv_handler+0x76>
   10ffe:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11000:	2b00      	cmp	r3, #0
   11002:	d002      	beq.n	1100a <_mqtt_recv_handler+0x66>
   11004:	1c20      	adds	r0, r4, #0
   11006:	2101      	movs	r1, #1
   11008:	4798      	blx	r3
   1100a:	236f      	movs	r3, #111	; 0x6f
   1100c:	425b      	negs	r3, r3
   1100e:	64e3      	str	r3, [r4, #76]	; 0x4c
   11010:	1c20      	adds	r0, r4, #0
   11012:	2100      	movs	r1, #0
   11014:	4b50      	ldr	r3, [pc, #320]	; (11158 <_mqtt_recv_handler+0x1b4>)
   11016:	4798      	blx	r3
   11018:	e09c      	b.n	11154 <_mqtt_recv_handler+0x1b0>
   1101a:	1c23      	adds	r3, r4, #0
   1101c:	3343      	adds	r3, #67	; 0x43
   1101e:	7819      	ldrb	r1, [r3, #0]
   11020:	0789      	lsls	r1, r1, #30
   11022:	0fc9      	lsrs	r1, r1, #31
   11024:	d105      	bne.n	11032 <_mqtt_recv_handler+0x8e>
   11026:	781a      	ldrb	r2, [r3, #0]
   11028:	64e1      	str	r1, [r4, #76]	; 0x4c
   1102a:	2102      	movs	r1, #2
   1102c:	430a      	orrs	r2, r1
   1102e:	701a      	strb	r2, [r3, #0]
   11030:	e090      	b.n	11154 <_mqtt_recv_handler+0x1b0>
   11032:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11034:	2b00      	cmp	r3, #0
   11036:	d100      	bne.n	1103a <_mqtt_recv_handler+0x96>
   11038:	e08c      	b.n	11154 <_mqtt_recv_handler+0x1b0>
   1103a:	1c20      	adds	r0, r4, #0
   1103c:	2101      	movs	r1, #1
   1103e:	e088      	b.n	11152 <_mqtt_recv_handler+0x1ae>
   11040:	ad01      	add	r5, sp, #4
   11042:	0713      	lsls	r3, r2, #28
   11044:	7c2a      	ldrb	r2, [r5, #16]
   11046:	0fdb      	lsrs	r3, r3, #31
   11048:	2604      	movs	r6, #4
   1104a:	009b      	lsls	r3, r3, #2
   1104c:	43b2      	bics	r2, r6
   1104e:	431a      	orrs	r2, r3
   11050:	742a      	strb	r2, [r5, #16]
   11052:	7807      	ldrb	r7, [r0, #0]
   11054:	2303      	movs	r3, #3
   11056:	b2d2      	uxtb	r2, r2
   11058:	087f      	lsrs	r7, r7, #1
   1105a:	439a      	bics	r2, r3
   1105c:	401f      	ands	r7, r3
   1105e:	1c13      	adds	r3, r2, #0
   11060:	433b      	orrs	r3, r7
   11062:	742b      	strb	r3, [r5, #16]
   11064:	1c43      	adds	r3, r0, #1
   11066:	7818      	ldrb	r0, [r3, #0]
   11068:	1c5a      	adds	r2, r3, #1
   1106a:	287f      	cmp	r0, #127	; 0x7f
   1106c:	d901      	bls.n	11072 <_mqtt_recv_handler+0xce>
   1106e:	1c13      	adds	r3, r2, #0
   11070:	e7f9      	b.n	11066 <_mqtt_recv_handler+0xc2>
   11072:	7858      	ldrb	r0, [r3, #1]
   11074:	789e      	ldrb	r6, [r3, #2]
   11076:	0200      	lsls	r0, r0, #8
   11078:	4330      	orrs	r0, r6
   1107a:	3303      	adds	r3, #3
   1107c:	2600      	movs	r6, #0
   1107e:	6068      	str	r0, [r5, #4]
   11080:	9301      	str	r3, [sp, #4]
   11082:	1818      	adds	r0, r3, r0
   11084:	42b7      	cmp	r7, r6
   11086:	d004      	beq.n	11092 <_mqtt_recv_handler+0xee>
   11088:	7806      	ldrb	r6, [r0, #0]
   1108a:	7843      	ldrb	r3, [r0, #1]
   1108c:	0236      	lsls	r6, r6, #8
   1108e:	431e      	orrs	r6, r3
   11090:	3002      	adds	r0, #2
   11092:	1851      	adds	r1, r2, r1
   11094:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11096:	60a8      	str	r0, [r5, #8]
   11098:	1a08      	subs	r0, r1, r0
   1109a:	60e8      	str	r0, [r5, #12]
   1109c:	2b00      	cmp	r3, #0
   1109e:	d003      	beq.n	110a8 <_mqtt_recv_handler+0x104>
   110a0:	1c20      	adds	r0, r4, #0
   110a2:	2106      	movs	r1, #6
   110a4:	1c2a      	adds	r2, r5, #0
   110a6:	4798      	blx	r3
   110a8:	7c2b      	ldrb	r3, [r5, #16]
   110aa:	079b      	lsls	r3, r3, #30
   110ac:	0f9b      	lsrs	r3, r3, #30
   110ae:	2b01      	cmp	r3, #1
   110b0:	d10b      	bne.n	110ca <_mqtt_recv_handler+0x126>
   110b2:	b2b6      	uxth	r6, r6
   110b4:	1c20      	adds	r0, r4, #0
   110b6:	2140      	movs	r1, #64	; 0x40
   110b8:	1c32      	adds	r2, r6, #0
   110ba:	4b28      	ldr	r3, [pc, #160]	; (1115c <_mqtt_recv_handler+0x1b8>)
   110bc:	4798      	blx	r3
   110be:	2800      	cmp	r0, #0
   110c0:	d048      	beq.n	11154 <_mqtt_recv_handler+0x1b0>
   110c2:	1c23      	adds	r3, r4, #0
   110c4:	3348      	adds	r3, #72	; 0x48
   110c6:	2240      	movs	r2, #64	; 0x40
   110c8:	e00c      	b.n	110e4 <_mqtt_recv_handler+0x140>
   110ca:	2b02      	cmp	r3, #2
   110cc:	d142      	bne.n	11154 <_mqtt_recv_handler+0x1b0>
   110ce:	b2b6      	uxth	r6, r6
   110d0:	1c20      	adds	r0, r4, #0
   110d2:	2150      	movs	r1, #80	; 0x50
   110d4:	1c32      	adds	r2, r6, #0
   110d6:	4b21      	ldr	r3, [pc, #132]	; (1115c <_mqtt_recv_handler+0x1b8>)
   110d8:	4798      	blx	r3
   110da:	2800      	cmp	r0, #0
   110dc:	d03a      	beq.n	11154 <_mqtt_recv_handler+0x1b0>
   110de:	1c23      	adds	r3, r4, #0
   110e0:	3348      	adds	r3, #72	; 0x48
   110e2:	2250      	movs	r2, #80	; 0x50
   110e4:	344a      	adds	r4, #74	; 0x4a
   110e6:	701a      	strb	r2, [r3, #0]
   110e8:	8026      	strh	r6, [r4, #0]
   110ea:	e033      	b.n	11154 <_mqtt_recv_handler+0x1b0>
   110ec:	7885      	ldrb	r5, [r0, #2]
   110ee:	78c3      	ldrb	r3, [r0, #3]
   110f0:	022d      	lsls	r5, r5, #8
   110f2:	431d      	orrs	r5, r3
   110f4:	1c20      	adds	r0, r4, #0
   110f6:	2162      	movs	r1, #98	; 0x62
   110f8:	1c2a      	adds	r2, r5, #0
   110fa:	4b18      	ldr	r3, [pc, #96]	; (1115c <_mqtt_recv_handler+0x1b8>)
   110fc:	4798      	blx	r3
   110fe:	2800      	cmp	r0, #0
   11100:	d028      	beq.n	11154 <_mqtt_recv_handler+0x1b0>
   11102:	1c23      	adds	r3, r4, #0
   11104:	3348      	adds	r3, #72	; 0x48
   11106:	2260      	movs	r2, #96	; 0x60
   11108:	e00d      	b.n	11126 <_mqtt_recv_handler+0x182>
   1110a:	7885      	ldrb	r5, [r0, #2]
   1110c:	78c3      	ldrb	r3, [r0, #3]
   1110e:	022d      	lsls	r5, r5, #8
   11110:	431d      	orrs	r5, r3
   11112:	1c20      	adds	r0, r4, #0
   11114:	2170      	movs	r1, #112	; 0x70
   11116:	1c2a      	adds	r2, r5, #0
   11118:	4b10      	ldr	r3, [pc, #64]	; (1115c <_mqtt_recv_handler+0x1b8>)
   1111a:	4798      	blx	r3
   1111c:	2800      	cmp	r0, #0
   1111e:	d019      	beq.n	11154 <_mqtt_recv_handler+0x1b0>
   11120:	1c23      	adds	r3, r4, #0
   11122:	3348      	adds	r3, #72	; 0x48
   11124:	2270      	movs	r2, #112	; 0x70
   11126:	344a      	adds	r4, #74	; 0x4a
   11128:	701a      	strb	r2, [r3, #0]
   1112a:	8025      	strh	r5, [r4, #0]
   1112c:	e012      	b.n	11154 <_mqtt_recv_handler+0x1b0>
   1112e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11130:	2b00      	cmp	r3, #0
   11132:	d00f      	beq.n	11154 <_mqtt_recv_handler+0x1b0>
   11134:	1c20      	adds	r0, r4, #0
   11136:	2102      	movs	r1, #2
   11138:	e00a      	b.n	11150 <_mqtt_recv_handler+0x1ac>
   1113a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1113c:	2b00      	cmp	r3, #0
   1113e:	d009      	beq.n	11154 <_mqtt_recv_handler+0x1b0>
   11140:	1c20      	adds	r0, r4, #0
   11142:	2103      	movs	r1, #3
   11144:	e004      	b.n	11150 <_mqtt_recv_handler+0x1ac>
   11146:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11148:	2b00      	cmp	r3, #0
   1114a:	d003      	beq.n	11154 <_mqtt_recv_handler+0x1b0>
   1114c:	1c20      	adds	r0, r4, #0
   1114e:	2104      	movs	r1, #4
   11150:	aa01      	add	r2, sp, #4
   11152:	4798      	blx	r3
   11154:	b007      	add	sp, #28
   11156:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11158:	00010f01 	.word	0x00010f01
   1115c:	00010e4d 	.word	0x00010e4d

00011160 <mqtt_recv_packet>:
   11160:	b538      	push	{r3, r4, r5, lr}
   11162:	1e04      	subs	r4, r0, #0
   11164:	d017      	beq.n	11196 <mqtt_recv_packet+0x36>
   11166:	6c42      	ldr	r2, [r0, #68]	; 0x44
   11168:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1116a:	429a      	cmp	r2, r3
   1116c:	d906      	bls.n	1117c <mqtt_recv_packet+0x1c>
   1116e:	238b      	movs	r3, #139	; 0x8b
   11170:	425b      	negs	r3, r3
   11172:	64c3      	str	r3, [r0, #76]	; 0x4c
   11174:	2100      	movs	r1, #0
   11176:	4b08      	ldr	r3, [pc, #32]	; (11198 <mqtt_recv_packet+0x38>)
   11178:	4798      	blx	r3
   1117a:	e00c      	b.n	11196 <mqtt_recv_packet+0x36>
   1117c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1117e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11180:	2002      	movs	r0, #2
   11182:	1899      	adds	r1, r3, r2
   11184:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   11186:	5620      	ldrsb	r0, [r4, r0]
   11188:	1a9a      	subs	r2, r3, r2
   1118a:	b292      	uxth	r2, r2
   1118c:	2300      	movs	r3, #0
   1118e:	4d03      	ldr	r5, [pc, #12]	; (1119c <mqtt_recv_packet+0x3c>)
   11190:	47a8      	blx	r5
   11192:	2800      	cmp	r0, #0
   11194:	d1f2      	bne.n	1117c <mqtt_recv_packet+0x1c>
   11196:	bd38      	pop	{r3, r4, r5, pc}
   11198:	00010f01 	.word	0x00010f01
   1119c:	0000b9d9 	.word	0x0000b9d9

000111a0 <mqtt_recved_packet>:
   111a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   111a2:	1e04      	subs	r4, r0, #0
   111a4:	d042      	beq.n	1122c <mqtt_recved_packet+0x8c>
   111a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   111a8:	6e67      	ldr	r7, [r4, #100]	; 0x64
   111aa:	18ca      	adds	r2, r1, r3
   111ac:	2301      	movs	r3, #1
   111ae:	9701      	str	r7, [sp, #4]
   111b0:	6462      	str	r2, [r4, #68]	; 0x44
   111b2:	2600      	movs	r6, #0
   111b4:	1c1d      	adds	r5, r3, #0
   111b6:	42a9      	cmp	r1, r5
   111b8:	dc03      	bgt.n	111c2 <mqtt_recved_packet+0x22>
   111ba:	1c20      	adds	r0, r4, #0
   111bc:	4b1c      	ldr	r3, [pc, #112]	; (11230 <mqtt_recved_packet+0x90>)
   111be:	4798      	blx	r3
   111c0:	e034      	b.n	1122c <mqtt_recved_packet+0x8c>
   111c2:	9f01      	ldr	r7, [sp, #4]
   111c4:	5d78      	ldrb	r0, [r7, r5]
   111c6:	01df      	lsls	r7, r3, #7
   111c8:	46bc      	mov	ip, r7
   111ca:	2d03      	cmp	r5, #3
   111cc:	d101      	bne.n	111d2 <mqtt_recved_packet+0x32>
   111ce:	234d      	movs	r3, #77	; 0x4d
   111d0:	e00e      	b.n	111f0 <mqtt_recved_packet+0x50>
   111d2:	277f      	movs	r7, #127	; 0x7f
   111d4:	4007      	ands	r7, r0
   111d6:	437b      	muls	r3, r7
   111d8:	b240      	sxtb	r0, r0
   111da:	3501      	adds	r5, #1
   111dc:	18f6      	adds	r6, r6, r3
   111de:	2800      	cmp	r0, #0
   111e0:	da01      	bge.n	111e6 <mqtt_recved_packet+0x46>
   111e2:	4663      	mov	r3, ip
   111e4:	e7e7      	b.n	111b6 <mqtt_recved_packet+0x16>
   111e6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   111e8:	19af      	adds	r7, r5, r6
   111ea:	429f      	cmp	r7, r3
   111ec:	d907      	bls.n	111fe <mqtt_recved_packet+0x5e>
   111ee:	238b      	movs	r3, #139	; 0x8b
   111f0:	425b      	negs	r3, r3
   111f2:	64e3      	str	r3, [r4, #76]	; 0x4c
   111f4:	1c20      	adds	r0, r4, #0
   111f6:	2100      	movs	r1, #0
   111f8:	4b0e      	ldr	r3, [pc, #56]	; (11234 <mqtt_recved_packet+0x94>)
   111fa:	4798      	blx	r3
   111fc:	e016      	b.n	1122c <mqtt_recved_packet+0x8c>
   111fe:	42ba      	cmp	r2, r7
   11200:	d314      	bcc.n	1122c <mqtt_recved_packet+0x8c>
   11202:	4b0d      	ldr	r3, [pc, #52]	; (11238 <mqtt_recved_packet+0x98>)
   11204:	1c20      	adds	r0, r4, #0
   11206:	1c31      	adds	r1, r6, #0
   11208:	4798      	blx	r3
   1120a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1120c:	42bb      	cmp	r3, r7
   1120e:	d102      	bne.n	11216 <mqtt_recved_packet+0x76>
   11210:	2300      	movs	r3, #0
   11212:	6463      	str	r3, [r4, #68]	; 0x44
   11214:	e00a      	b.n	1122c <mqtt_recved_packet+0x8c>
   11216:	1b9e      	subs	r6, r3, r6
   11218:	9b01      	ldr	r3, [sp, #4]
   1121a:	1b75      	subs	r5, r6, r5
   1121c:	19d9      	adds	r1, r3, r7
   1121e:	1c18      	adds	r0, r3, #0
   11220:	1c2a      	adds	r2, r5, #0
   11222:	4b06      	ldr	r3, [pc, #24]	; (1123c <mqtt_recved_packet+0x9c>)
   11224:	4798      	blx	r3
   11226:	6465      	str	r5, [r4, #68]	; 0x44
   11228:	2100      	movs	r1, #0
   1122a:	e7bc      	b.n	111a6 <mqtt_recved_packet+0x6>
   1122c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1122e:	46c0      	nop			; (mov r8, r8)
   11230:	00011161 	.word	0x00011161
   11234:	00010f01 	.word	0x00010f01
   11238:	00010fa5 	.word	0x00010fa5
   1123c:	0001172b 	.word	0x0001172b

00011240 <mqtt_socket_event_handler>:
   11240:	b570      	push	{r4, r5, r6, lr}
   11242:	4d37      	ldr	r5, [pc, #220]	; (11320 <mqtt_socket_event_handler+0xe0>)
   11244:	0086      	lsls	r6, r0, #2
   11246:	5974      	ldr	r4, [r6, r5]
   11248:	b086      	sub	sp, #24
   1124a:	2c00      	cmp	r4, #0
   1124c:	d066      	beq.n	1131c <mqtt_socket_event_handler+0xdc>
   1124e:	2906      	cmp	r1, #6
   11250:	d02b      	beq.n	112aa <mqtt_socket_event_handler+0x6a>
   11252:	2907      	cmp	r1, #7
   11254:	d039      	beq.n	112ca <mqtt_socket_event_handler+0x8a>
   11256:	2905      	cmp	r1, #5
   11258:	d160      	bne.n	1131c <mqtt_socket_event_handler+0xdc>
   1125a:	2001      	movs	r0, #1
   1125c:	5610      	ldrsb	r0, [r2, r0]
   1125e:	4b31      	ldr	r3, [pc, #196]	; (11324 <mqtt_socket_event_handler+0xe4>)
   11260:	4798      	blx	r3
   11262:	9001      	str	r0, [sp, #4]
   11264:	2800      	cmp	r0, #0
   11266:	da06      	bge.n	11276 <mqtt_socket_event_handler+0x36>
   11268:	2002      	movs	r0, #2
   1126a:	4b2f      	ldr	r3, [pc, #188]	; (11328 <mqtt_socket_event_handler+0xe8>)
   1126c:	5620      	ldrsb	r0, [r4, r0]
   1126e:	4798      	blx	r3
   11270:	2300      	movs	r3, #0
   11272:	5173      	str	r3, [r6, r5]
   11274:	e011      	b.n	1129a <mqtt_socket_event_handler+0x5a>
   11276:	1c23      	adds	r3, r4, #0
   11278:	3343      	adds	r3, #67	; 0x43
   1127a:	781a      	ldrb	r2, [r3, #0]
   1127c:	2101      	movs	r1, #1
   1127e:	430a      	orrs	r2, r1
   11280:	701a      	strb	r2, [r3, #0]
   11282:	331d      	adds	r3, #29
   11284:	881b      	ldrh	r3, [r3, #0]
   11286:	2b00      	cmp	r3, #0
   11288:	d004      	beq.n	11294 <mqtt_socket_event_handler+0x54>
   1128a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   1128c:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1128e:	2200      	movs	r2, #0
   11290:	4b26      	ldr	r3, [pc, #152]	; (1132c <mqtt_socket_event_handler+0xec>)
   11292:	4798      	blx	r3
   11294:	1c20      	adds	r0, r4, #0
   11296:	4b26      	ldr	r3, [pc, #152]	; (11330 <mqtt_socket_event_handler+0xf0>)
   11298:	4798      	blx	r3
   1129a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1129c:	2b00      	cmp	r3, #0
   1129e:	d03d      	beq.n	1131c <mqtt_socket_event_handler+0xdc>
   112a0:	1c20      	adds	r0, r4, #0
   112a2:	2100      	movs	r1, #0
   112a4:	aa01      	add	r2, sp, #4
   112a6:	4798      	blx	r3
   112a8:	e038      	b.n	1131c <mqtt_socket_event_handler+0xdc>
   112aa:	2304      	movs	r3, #4
   112ac:	5ed1      	ldrsh	r1, [r2, r3]
   112ae:	2900      	cmp	r1, #0
   112b0:	dd03      	ble.n	112ba <mqtt_socket_event_handler+0x7a>
   112b2:	1c20      	adds	r0, r4, #0
   112b4:	4b1f      	ldr	r3, [pc, #124]	; (11334 <mqtt_socket_event_handler+0xf4>)
   112b6:	4798      	blx	r3
   112b8:	e003      	b.n	112c2 <mqtt_socket_event_handler+0x82>
   112ba:	1c0b      	adds	r3, r1, #0
   112bc:	1c08      	adds	r0, r1, #0
   112be:	330d      	adds	r3, #13
   112c0:	d11a      	bne.n	112f8 <mqtt_socket_event_handler+0xb8>
   112c2:	4b1b      	ldr	r3, [pc, #108]	; (11330 <mqtt_socket_event_handler+0xf0>)
   112c4:	1c20      	adds	r0, r4, #0
   112c6:	4798      	blx	r3
   112c8:	e028      	b.n	1131c <mqtt_socket_event_handler+0xdc>
   112ca:	1c23      	adds	r3, r4, #0
   112cc:	3343      	adds	r3, #67	; 0x43
   112ce:	8810      	ldrh	r0, [r2, #0]
   112d0:	781a      	ldrb	r2, [r3, #0]
   112d2:	0751      	lsls	r1, r2, #29
   112d4:	d402      	bmi.n	112dc <mqtt_socket_event_handler+0x9c>
   112d6:	2108      	movs	r1, #8
   112d8:	438a      	bics	r2, r1
   112da:	701a      	strb	r2, [r3, #0]
   112dc:	781a      	ldrb	r2, [r3, #0]
   112de:	2104      	movs	r1, #4
   112e0:	438a      	bics	r2, r1
   112e2:	701a      	strb	r2, [r3, #0]
   112e4:	06d3      	lsls	r3, r2, #27
   112e6:	0fde      	lsrs	r6, r3, #31
   112e8:	b200      	sxth	r0, r0
   112ea:	2b00      	cmp	r3, #0
   112ec:	db02      	blt.n	112f4 <mqtt_socket_event_handler+0xb4>
   112ee:	2800      	cmp	r0, #0
   112f0:	da08      	bge.n	11304 <mqtt_socket_event_handler+0xc4>
   112f2:	e001      	b.n	112f8 <mqtt_socket_event_handler+0xb8>
   112f4:	2800      	cmp	r0, #0
   112f6:	da02      	bge.n	112fe <mqtt_socket_event_handler+0xbe>
   112f8:	4b0a      	ldr	r3, [pc, #40]	; (11324 <mqtt_socket_event_handler+0xe4>)
   112fa:	4798      	blx	r3
   112fc:	64e0      	str	r0, [r4, #76]	; 0x4c
   112fe:	1c20      	adds	r0, r4, #0
   11300:	4b0d      	ldr	r3, [pc, #52]	; (11338 <mqtt_socket_event_handler+0xf8>)
   11302:	e7e0      	b.n	112c6 <mqtt_socket_event_handler+0x86>
   11304:	1c25      	adds	r5, r4, #0
   11306:	3548      	adds	r5, #72	; 0x48
   11308:	7829      	ldrb	r1, [r5, #0]
   1130a:	2900      	cmp	r1, #0
   1130c:	d006      	beq.n	1131c <mqtt_socket_event_handler+0xdc>
   1130e:	1c23      	adds	r3, r4, #0
   11310:	334a      	adds	r3, #74	; 0x4a
   11312:	881a      	ldrh	r2, [r3, #0]
   11314:	1c20      	adds	r0, r4, #0
   11316:	4b09      	ldr	r3, [pc, #36]	; (1133c <mqtt_socket_event_handler+0xfc>)
   11318:	4798      	blx	r3
   1131a:	702e      	strb	r6, [r5, #0]
   1131c:	b006      	add	sp, #24
   1131e:	bd70      	pop	{r4, r5, r6, pc}
   11320:	200002a4 	.word	0x200002a4
   11324:	000104ed 	.word	0x000104ed
   11328:	0000ba6d 	.word	0x0000ba6d
   1132c:	0000f401 	.word	0x0000f401
   11330:	00011161 	.word	0x00011161
   11334:	000111a1 	.word	0x000111a1
   11338:	00010eb1 	.word	0x00010eb1
   1133c:	00010e4d 	.word	0x00010e4d

00011340 <__gnu_thumb1_case_uqi>:
   11340:	b402      	push	{r1}
   11342:	4671      	mov	r1, lr
   11344:	0849      	lsrs	r1, r1, #1
   11346:	0049      	lsls	r1, r1, #1
   11348:	5c09      	ldrb	r1, [r1, r0]
   1134a:	0049      	lsls	r1, r1, #1
   1134c:	448e      	add	lr, r1
   1134e:	bc02      	pop	{r1}
   11350:	4770      	bx	lr
   11352:	46c0      	nop			; (mov r8, r8)

00011354 <__aeabi_uidiv>:
   11354:	2200      	movs	r2, #0
   11356:	0843      	lsrs	r3, r0, #1
   11358:	428b      	cmp	r3, r1
   1135a:	d374      	bcc.n	11446 <__aeabi_uidiv+0xf2>
   1135c:	0903      	lsrs	r3, r0, #4
   1135e:	428b      	cmp	r3, r1
   11360:	d35f      	bcc.n	11422 <__aeabi_uidiv+0xce>
   11362:	0a03      	lsrs	r3, r0, #8
   11364:	428b      	cmp	r3, r1
   11366:	d344      	bcc.n	113f2 <__aeabi_uidiv+0x9e>
   11368:	0b03      	lsrs	r3, r0, #12
   1136a:	428b      	cmp	r3, r1
   1136c:	d328      	bcc.n	113c0 <__aeabi_uidiv+0x6c>
   1136e:	0c03      	lsrs	r3, r0, #16
   11370:	428b      	cmp	r3, r1
   11372:	d30d      	bcc.n	11390 <__aeabi_uidiv+0x3c>
   11374:	22ff      	movs	r2, #255	; 0xff
   11376:	0209      	lsls	r1, r1, #8
   11378:	ba12      	rev	r2, r2
   1137a:	0c03      	lsrs	r3, r0, #16
   1137c:	428b      	cmp	r3, r1
   1137e:	d302      	bcc.n	11386 <__aeabi_uidiv+0x32>
   11380:	1212      	asrs	r2, r2, #8
   11382:	0209      	lsls	r1, r1, #8
   11384:	d065      	beq.n	11452 <__aeabi_uidiv+0xfe>
   11386:	0b03      	lsrs	r3, r0, #12
   11388:	428b      	cmp	r3, r1
   1138a:	d319      	bcc.n	113c0 <__aeabi_uidiv+0x6c>
   1138c:	e000      	b.n	11390 <__aeabi_uidiv+0x3c>
   1138e:	0a09      	lsrs	r1, r1, #8
   11390:	0bc3      	lsrs	r3, r0, #15
   11392:	428b      	cmp	r3, r1
   11394:	d301      	bcc.n	1139a <__aeabi_uidiv+0x46>
   11396:	03cb      	lsls	r3, r1, #15
   11398:	1ac0      	subs	r0, r0, r3
   1139a:	4152      	adcs	r2, r2
   1139c:	0b83      	lsrs	r3, r0, #14
   1139e:	428b      	cmp	r3, r1
   113a0:	d301      	bcc.n	113a6 <__aeabi_uidiv+0x52>
   113a2:	038b      	lsls	r3, r1, #14
   113a4:	1ac0      	subs	r0, r0, r3
   113a6:	4152      	adcs	r2, r2
   113a8:	0b43      	lsrs	r3, r0, #13
   113aa:	428b      	cmp	r3, r1
   113ac:	d301      	bcc.n	113b2 <__aeabi_uidiv+0x5e>
   113ae:	034b      	lsls	r3, r1, #13
   113b0:	1ac0      	subs	r0, r0, r3
   113b2:	4152      	adcs	r2, r2
   113b4:	0b03      	lsrs	r3, r0, #12
   113b6:	428b      	cmp	r3, r1
   113b8:	d301      	bcc.n	113be <__aeabi_uidiv+0x6a>
   113ba:	030b      	lsls	r3, r1, #12
   113bc:	1ac0      	subs	r0, r0, r3
   113be:	4152      	adcs	r2, r2
   113c0:	0ac3      	lsrs	r3, r0, #11
   113c2:	428b      	cmp	r3, r1
   113c4:	d301      	bcc.n	113ca <__aeabi_uidiv+0x76>
   113c6:	02cb      	lsls	r3, r1, #11
   113c8:	1ac0      	subs	r0, r0, r3
   113ca:	4152      	adcs	r2, r2
   113cc:	0a83      	lsrs	r3, r0, #10
   113ce:	428b      	cmp	r3, r1
   113d0:	d301      	bcc.n	113d6 <__aeabi_uidiv+0x82>
   113d2:	028b      	lsls	r3, r1, #10
   113d4:	1ac0      	subs	r0, r0, r3
   113d6:	4152      	adcs	r2, r2
   113d8:	0a43      	lsrs	r3, r0, #9
   113da:	428b      	cmp	r3, r1
   113dc:	d301      	bcc.n	113e2 <__aeabi_uidiv+0x8e>
   113de:	024b      	lsls	r3, r1, #9
   113e0:	1ac0      	subs	r0, r0, r3
   113e2:	4152      	adcs	r2, r2
   113e4:	0a03      	lsrs	r3, r0, #8
   113e6:	428b      	cmp	r3, r1
   113e8:	d301      	bcc.n	113ee <__aeabi_uidiv+0x9a>
   113ea:	020b      	lsls	r3, r1, #8
   113ec:	1ac0      	subs	r0, r0, r3
   113ee:	4152      	adcs	r2, r2
   113f0:	d2cd      	bcs.n	1138e <__aeabi_uidiv+0x3a>
   113f2:	09c3      	lsrs	r3, r0, #7
   113f4:	428b      	cmp	r3, r1
   113f6:	d301      	bcc.n	113fc <__aeabi_uidiv+0xa8>
   113f8:	01cb      	lsls	r3, r1, #7
   113fa:	1ac0      	subs	r0, r0, r3
   113fc:	4152      	adcs	r2, r2
   113fe:	0983      	lsrs	r3, r0, #6
   11400:	428b      	cmp	r3, r1
   11402:	d301      	bcc.n	11408 <__aeabi_uidiv+0xb4>
   11404:	018b      	lsls	r3, r1, #6
   11406:	1ac0      	subs	r0, r0, r3
   11408:	4152      	adcs	r2, r2
   1140a:	0943      	lsrs	r3, r0, #5
   1140c:	428b      	cmp	r3, r1
   1140e:	d301      	bcc.n	11414 <__aeabi_uidiv+0xc0>
   11410:	014b      	lsls	r3, r1, #5
   11412:	1ac0      	subs	r0, r0, r3
   11414:	4152      	adcs	r2, r2
   11416:	0903      	lsrs	r3, r0, #4
   11418:	428b      	cmp	r3, r1
   1141a:	d301      	bcc.n	11420 <__aeabi_uidiv+0xcc>
   1141c:	010b      	lsls	r3, r1, #4
   1141e:	1ac0      	subs	r0, r0, r3
   11420:	4152      	adcs	r2, r2
   11422:	08c3      	lsrs	r3, r0, #3
   11424:	428b      	cmp	r3, r1
   11426:	d301      	bcc.n	1142c <__aeabi_uidiv+0xd8>
   11428:	00cb      	lsls	r3, r1, #3
   1142a:	1ac0      	subs	r0, r0, r3
   1142c:	4152      	adcs	r2, r2
   1142e:	0883      	lsrs	r3, r0, #2
   11430:	428b      	cmp	r3, r1
   11432:	d301      	bcc.n	11438 <__aeabi_uidiv+0xe4>
   11434:	008b      	lsls	r3, r1, #2
   11436:	1ac0      	subs	r0, r0, r3
   11438:	4152      	adcs	r2, r2
   1143a:	0843      	lsrs	r3, r0, #1
   1143c:	428b      	cmp	r3, r1
   1143e:	d301      	bcc.n	11444 <__aeabi_uidiv+0xf0>
   11440:	004b      	lsls	r3, r1, #1
   11442:	1ac0      	subs	r0, r0, r3
   11444:	4152      	adcs	r2, r2
   11446:	1a41      	subs	r1, r0, r1
   11448:	d200      	bcs.n	1144c <__aeabi_uidiv+0xf8>
   1144a:	4601      	mov	r1, r0
   1144c:	4152      	adcs	r2, r2
   1144e:	4610      	mov	r0, r2
   11450:	4770      	bx	lr
   11452:	e7ff      	b.n	11454 <__aeabi_uidiv+0x100>
   11454:	b501      	push	{r0, lr}
   11456:	2000      	movs	r0, #0
   11458:	f000 f8f0 	bl	1163c <__aeabi_idiv0>
   1145c:	bd02      	pop	{r1, pc}
   1145e:	46c0      	nop			; (mov r8, r8)

00011460 <__aeabi_uidivmod>:
   11460:	2900      	cmp	r1, #0
   11462:	d0f7      	beq.n	11454 <__aeabi_uidiv+0x100>
   11464:	e776      	b.n	11354 <__aeabi_uidiv>
   11466:	4770      	bx	lr

00011468 <__aeabi_idiv>:
   11468:	4603      	mov	r3, r0
   1146a:	430b      	orrs	r3, r1
   1146c:	d47f      	bmi.n	1156e <__aeabi_idiv+0x106>
   1146e:	2200      	movs	r2, #0
   11470:	0843      	lsrs	r3, r0, #1
   11472:	428b      	cmp	r3, r1
   11474:	d374      	bcc.n	11560 <__aeabi_idiv+0xf8>
   11476:	0903      	lsrs	r3, r0, #4
   11478:	428b      	cmp	r3, r1
   1147a:	d35f      	bcc.n	1153c <__aeabi_idiv+0xd4>
   1147c:	0a03      	lsrs	r3, r0, #8
   1147e:	428b      	cmp	r3, r1
   11480:	d344      	bcc.n	1150c <__aeabi_idiv+0xa4>
   11482:	0b03      	lsrs	r3, r0, #12
   11484:	428b      	cmp	r3, r1
   11486:	d328      	bcc.n	114da <__aeabi_idiv+0x72>
   11488:	0c03      	lsrs	r3, r0, #16
   1148a:	428b      	cmp	r3, r1
   1148c:	d30d      	bcc.n	114aa <__aeabi_idiv+0x42>
   1148e:	22ff      	movs	r2, #255	; 0xff
   11490:	0209      	lsls	r1, r1, #8
   11492:	ba12      	rev	r2, r2
   11494:	0c03      	lsrs	r3, r0, #16
   11496:	428b      	cmp	r3, r1
   11498:	d302      	bcc.n	114a0 <__aeabi_idiv+0x38>
   1149a:	1212      	asrs	r2, r2, #8
   1149c:	0209      	lsls	r1, r1, #8
   1149e:	d065      	beq.n	1156c <__aeabi_idiv+0x104>
   114a0:	0b03      	lsrs	r3, r0, #12
   114a2:	428b      	cmp	r3, r1
   114a4:	d319      	bcc.n	114da <__aeabi_idiv+0x72>
   114a6:	e000      	b.n	114aa <__aeabi_idiv+0x42>
   114a8:	0a09      	lsrs	r1, r1, #8
   114aa:	0bc3      	lsrs	r3, r0, #15
   114ac:	428b      	cmp	r3, r1
   114ae:	d301      	bcc.n	114b4 <__aeabi_idiv+0x4c>
   114b0:	03cb      	lsls	r3, r1, #15
   114b2:	1ac0      	subs	r0, r0, r3
   114b4:	4152      	adcs	r2, r2
   114b6:	0b83      	lsrs	r3, r0, #14
   114b8:	428b      	cmp	r3, r1
   114ba:	d301      	bcc.n	114c0 <__aeabi_idiv+0x58>
   114bc:	038b      	lsls	r3, r1, #14
   114be:	1ac0      	subs	r0, r0, r3
   114c0:	4152      	adcs	r2, r2
   114c2:	0b43      	lsrs	r3, r0, #13
   114c4:	428b      	cmp	r3, r1
   114c6:	d301      	bcc.n	114cc <__aeabi_idiv+0x64>
   114c8:	034b      	lsls	r3, r1, #13
   114ca:	1ac0      	subs	r0, r0, r3
   114cc:	4152      	adcs	r2, r2
   114ce:	0b03      	lsrs	r3, r0, #12
   114d0:	428b      	cmp	r3, r1
   114d2:	d301      	bcc.n	114d8 <__aeabi_idiv+0x70>
   114d4:	030b      	lsls	r3, r1, #12
   114d6:	1ac0      	subs	r0, r0, r3
   114d8:	4152      	adcs	r2, r2
   114da:	0ac3      	lsrs	r3, r0, #11
   114dc:	428b      	cmp	r3, r1
   114de:	d301      	bcc.n	114e4 <__aeabi_idiv+0x7c>
   114e0:	02cb      	lsls	r3, r1, #11
   114e2:	1ac0      	subs	r0, r0, r3
   114e4:	4152      	adcs	r2, r2
   114e6:	0a83      	lsrs	r3, r0, #10
   114e8:	428b      	cmp	r3, r1
   114ea:	d301      	bcc.n	114f0 <__aeabi_idiv+0x88>
   114ec:	028b      	lsls	r3, r1, #10
   114ee:	1ac0      	subs	r0, r0, r3
   114f0:	4152      	adcs	r2, r2
   114f2:	0a43      	lsrs	r3, r0, #9
   114f4:	428b      	cmp	r3, r1
   114f6:	d301      	bcc.n	114fc <__aeabi_idiv+0x94>
   114f8:	024b      	lsls	r3, r1, #9
   114fa:	1ac0      	subs	r0, r0, r3
   114fc:	4152      	adcs	r2, r2
   114fe:	0a03      	lsrs	r3, r0, #8
   11500:	428b      	cmp	r3, r1
   11502:	d301      	bcc.n	11508 <__aeabi_idiv+0xa0>
   11504:	020b      	lsls	r3, r1, #8
   11506:	1ac0      	subs	r0, r0, r3
   11508:	4152      	adcs	r2, r2
   1150a:	d2cd      	bcs.n	114a8 <__aeabi_idiv+0x40>
   1150c:	09c3      	lsrs	r3, r0, #7
   1150e:	428b      	cmp	r3, r1
   11510:	d301      	bcc.n	11516 <__aeabi_idiv+0xae>
   11512:	01cb      	lsls	r3, r1, #7
   11514:	1ac0      	subs	r0, r0, r3
   11516:	4152      	adcs	r2, r2
   11518:	0983      	lsrs	r3, r0, #6
   1151a:	428b      	cmp	r3, r1
   1151c:	d301      	bcc.n	11522 <__aeabi_idiv+0xba>
   1151e:	018b      	lsls	r3, r1, #6
   11520:	1ac0      	subs	r0, r0, r3
   11522:	4152      	adcs	r2, r2
   11524:	0943      	lsrs	r3, r0, #5
   11526:	428b      	cmp	r3, r1
   11528:	d301      	bcc.n	1152e <__aeabi_idiv+0xc6>
   1152a:	014b      	lsls	r3, r1, #5
   1152c:	1ac0      	subs	r0, r0, r3
   1152e:	4152      	adcs	r2, r2
   11530:	0903      	lsrs	r3, r0, #4
   11532:	428b      	cmp	r3, r1
   11534:	d301      	bcc.n	1153a <__aeabi_idiv+0xd2>
   11536:	010b      	lsls	r3, r1, #4
   11538:	1ac0      	subs	r0, r0, r3
   1153a:	4152      	adcs	r2, r2
   1153c:	08c3      	lsrs	r3, r0, #3
   1153e:	428b      	cmp	r3, r1
   11540:	d301      	bcc.n	11546 <__aeabi_idiv+0xde>
   11542:	00cb      	lsls	r3, r1, #3
   11544:	1ac0      	subs	r0, r0, r3
   11546:	4152      	adcs	r2, r2
   11548:	0883      	lsrs	r3, r0, #2
   1154a:	428b      	cmp	r3, r1
   1154c:	d301      	bcc.n	11552 <__aeabi_idiv+0xea>
   1154e:	008b      	lsls	r3, r1, #2
   11550:	1ac0      	subs	r0, r0, r3
   11552:	4152      	adcs	r2, r2
   11554:	0843      	lsrs	r3, r0, #1
   11556:	428b      	cmp	r3, r1
   11558:	d301      	bcc.n	1155e <__aeabi_idiv+0xf6>
   1155a:	004b      	lsls	r3, r1, #1
   1155c:	1ac0      	subs	r0, r0, r3
   1155e:	4152      	adcs	r2, r2
   11560:	1a41      	subs	r1, r0, r1
   11562:	d200      	bcs.n	11566 <__aeabi_idiv+0xfe>
   11564:	4601      	mov	r1, r0
   11566:	4152      	adcs	r2, r2
   11568:	4610      	mov	r0, r2
   1156a:	4770      	bx	lr
   1156c:	e05d      	b.n	1162a <__aeabi_idiv+0x1c2>
   1156e:	0fca      	lsrs	r2, r1, #31
   11570:	d000      	beq.n	11574 <__aeabi_idiv+0x10c>
   11572:	4249      	negs	r1, r1
   11574:	1003      	asrs	r3, r0, #32
   11576:	d300      	bcc.n	1157a <__aeabi_idiv+0x112>
   11578:	4240      	negs	r0, r0
   1157a:	4053      	eors	r3, r2
   1157c:	2200      	movs	r2, #0
   1157e:	469c      	mov	ip, r3
   11580:	0903      	lsrs	r3, r0, #4
   11582:	428b      	cmp	r3, r1
   11584:	d32d      	bcc.n	115e2 <__aeabi_idiv+0x17a>
   11586:	0a03      	lsrs	r3, r0, #8
   11588:	428b      	cmp	r3, r1
   1158a:	d312      	bcc.n	115b2 <__aeabi_idiv+0x14a>
   1158c:	22fc      	movs	r2, #252	; 0xfc
   1158e:	0189      	lsls	r1, r1, #6
   11590:	ba12      	rev	r2, r2
   11592:	0a03      	lsrs	r3, r0, #8
   11594:	428b      	cmp	r3, r1
   11596:	d30c      	bcc.n	115b2 <__aeabi_idiv+0x14a>
   11598:	0189      	lsls	r1, r1, #6
   1159a:	1192      	asrs	r2, r2, #6
   1159c:	428b      	cmp	r3, r1
   1159e:	d308      	bcc.n	115b2 <__aeabi_idiv+0x14a>
   115a0:	0189      	lsls	r1, r1, #6
   115a2:	1192      	asrs	r2, r2, #6
   115a4:	428b      	cmp	r3, r1
   115a6:	d304      	bcc.n	115b2 <__aeabi_idiv+0x14a>
   115a8:	0189      	lsls	r1, r1, #6
   115aa:	d03a      	beq.n	11622 <__aeabi_idiv+0x1ba>
   115ac:	1192      	asrs	r2, r2, #6
   115ae:	e000      	b.n	115b2 <__aeabi_idiv+0x14a>
   115b0:	0989      	lsrs	r1, r1, #6
   115b2:	09c3      	lsrs	r3, r0, #7
   115b4:	428b      	cmp	r3, r1
   115b6:	d301      	bcc.n	115bc <__aeabi_idiv+0x154>
   115b8:	01cb      	lsls	r3, r1, #7
   115ba:	1ac0      	subs	r0, r0, r3
   115bc:	4152      	adcs	r2, r2
   115be:	0983      	lsrs	r3, r0, #6
   115c0:	428b      	cmp	r3, r1
   115c2:	d301      	bcc.n	115c8 <__aeabi_idiv+0x160>
   115c4:	018b      	lsls	r3, r1, #6
   115c6:	1ac0      	subs	r0, r0, r3
   115c8:	4152      	adcs	r2, r2
   115ca:	0943      	lsrs	r3, r0, #5
   115cc:	428b      	cmp	r3, r1
   115ce:	d301      	bcc.n	115d4 <__aeabi_idiv+0x16c>
   115d0:	014b      	lsls	r3, r1, #5
   115d2:	1ac0      	subs	r0, r0, r3
   115d4:	4152      	adcs	r2, r2
   115d6:	0903      	lsrs	r3, r0, #4
   115d8:	428b      	cmp	r3, r1
   115da:	d301      	bcc.n	115e0 <__aeabi_idiv+0x178>
   115dc:	010b      	lsls	r3, r1, #4
   115de:	1ac0      	subs	r0, r0, r3
   115e0:	4152      	adcs	r2, r2
   115e2:	08c3      	lsrs	r3, r0, #3
   115e4:	428b      	cmp	r3, r1
   115e6:	d301      	bcc.n	115ec <__aeabi_idiv+0x184>
   115e8:	00cb      	lsls	r3, r1, #3
   115ea:	1ac0      	subs	r0, r0, r3
   115ec:	4152      	adcs	r2, r2
   115ee:	0883      	lsrs	r3, r0, #2
   115f0:	428b      	cmp	r3, r1
   115f2:	d301      	bcc.n	115f8 <__aeabi_idiv+0x190>
   115f4:	008b      	lsls	r3, r1, #2
   115f6:	1ac0      	subs	r0, r0, r3
   115f8:	4152      	adcs	r2, r2
   115fa:	d2d9      	bcs.n	115b0 <__aeabi_idiv+0x148>
   115fc:	0843      	lsrs	r3, r0, #1
   115fe:	428b      	cmp	r3, r1
   11600:	d301      	bcc.n	11606 <__aeabi_idiv+0x19e>
   11602:	004b      	lsls	r3, r1, #1
   11604:	1ac0      	subs	r0, r0, r3
   11606:	4152      	adcs	r2, r2
   11608:	1a41      	subs	r1, r0, r1
   1160a:	d200      	bcs.n	1160e <__aeabi_idiv+0x1a6>
   1160c:	4601      	mov	r1, r0
   1160e:	4663      	mov	r3, ip
   11610:	4152      	adcs	r2, r2
   11612:	105b      	asrs	r3, r3, #1
   11614:	4610      	mov	r0, r2
   11616:	d301      	bcc.n	1161c <__aeabi_idiv+0x1b4>
   11618:	4240      	negs	r0, r0
   1161a:	2b00      	cmp	r3, #0
   1161c:	d500      	bpl.n	11620 <__aeabi_idiv+0x1b8>
   1161e:	4249      	negs	r1, r1
   11620:	4770      	bx	lr
   11622:	4663      	mov	r3, ip
   11624:	105b      	asrs	r3, r3, #1
   11626:	d300      	bcc.n	1162a <__aeabi_idiv+0x1c2>
   11628:	4240      	negs	r0, r0
   1162a:	b501      	push	{r0, lr}
   1162c:	2000      	movs	r0, #0
   1162e:	f000 f805 	bl	1163c <__aeabi_idiv0>
   11632:	bd02      	pop	{r1, pc}

00011634 <__aeabi_idivmod>:
   11634:	2900      	cmp	r1, #0
   11636:	d0f8      	beq.n	1162a <__aeabi_idiv+0x1c2>
   11638:	e716      	b.n	11468 <__aeabi_idiv>
   1163a:	4770      	bx	lr

0001163c <__aeabi_idiv0>:
   1163c:	4770      	bx	lr
   1163e:	46c0      	nop			; (mov r8, r8)

00011640 <__aeabi_lmul>:
   11640:	b5f0      	push	{r4, r5, r6, r7, lr}
   11642:	464f      	mov	r7, r9
   11644:	4646      	mov	r6, r8
   11646:	b4c0      	push	{r6, r7}
   11648:	0416      	lsls	r6, r2, #16
   1164a:	0c36      	lsrs	r6, r6, #16
   1164c:	4699      	mov	r9, r3
   1164e:	0033      	movs	r3, r6
   11650:	0405      	lsls	r5, r0, #16
   11652:	0c2c      	lsrs	r4, r5, #16
   11654:	0c07      	lsrs	r7, r0, #16
   11656:	0c15      	lsrs	r5, r2, #16
   11658:	4363      	muls	r3, r4
   1165a:	437e      	muls	r6, r7
   1165c:	436f      	muls	r7, r5
   1165e:	4365      	muls	r5, r4
   11660:	0c1c      	lsrs	r4, r3, #16
   11662:	19ad      	adds	r5, r5, r6
   11664:	1964      	adds	r4, r4, r5
   11666:	469c      	mov	ip, r3
   11668:	42a6      	cmp	r6, r4
   1166a:	d903      	bls.n	11674 <__aeabi_lmul+0x34>
   1166c:	2380      	movs	r3, #128	; 0x80
   1166e:	025b      	lsls	r3, r3, #9
   11670:	4698      	mov	r8, r3
   11672:	4447      	add	r7, r8
   11674:	4663      	mov	r3, ip
   11676:	0c25      	lsrs	r5, r4, #16
   11678:	19ef      	adds	r7, r5, r7
   1167a:	041d      	lsls	r5, r3, #16
   1167c:	464b      	mov	r3, r9
   1167e:	434a      	muls	r2, r1
   11680:	4343      	muls	r3, r0
   11682:	0c2d      	lsrs	r5, r5, #16
   11684:	0424      	lsls	r4, r4, #16
   11686:	1964      	adds	r4, r4, r5
   11688:	1899      	adds	r1, r3, r2
   1168a:	19c9      	adds	r1, r1, r7
   1168c:	0020      	movs	r0, r4
   1168e:	bc0c      	pop	{r2, r3}
   11690:	4690      	mov	r8, r2
   11692:	4699      	mov	r9, r3
   11694:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11696:	46c0      	nop			; (mov r8, r8)

00011698 <atoi>:
   11698:	b510      	push	{r4, lr}
   1169a:	220a      	movs	r2, #10
   1169c:	2100      	movs	r1, #0
   1169e:	f000 fb7b 	bl	11d98 <strtol>
   116a2:	bd10      	pop	{r4, pc}

000116a4 <__libc_init_array>:
   116a4:	4b0e      	ldr	r3, [pc, #56]	; (116e0 <__libc_init_array+0x3c>)
   116a6:	b570      	push	{r4, r5, r6, lr}
   116a8:	2500      	movs	r5, #0
   116aa:	001e      	movs	r6, r3
   116ac:	4c0d      	ldr	r4, [pc, #52]	; (116e4 <__libc_init_array+0x40>)
   116ae:	1ae4      	subs	r4, r4, r3
   116b0:	10a4      	asrs	r4, r4, #2
   116b2:	42a5      	cmp	r5, r4
   116b4:	d004      	beq.n	116c0 <__libc_init_array+0x1c>
   116b6:	00ab      	lsls	r3, r5, #2
   116b8:	58f3      	ldr	r3, [r6, r3]
   116ba:	4798      	blx	r3
   116bc:	3501      	adds	r5, #1
   116be:	e7f8      	b.n	116b2 <__libc_init_array+0xe>
   116c0:	f003 faac 	bl	14c1c <_init>
   116c4:	4b08      	ldr	r3, [pc, #32]	; (116e8 <__libc_init_array+0x44>)
   116c6:	2500      	movs	r5, #0
   116c8:	001e      	movs	r6, r3
   116ca:	4c08      	ldr	r4, [pc, #32]	; (116ec <__libc_init_array+0x48>)
   116cc:	1ae4      	subs	r4, r4, r3
   116ce:	10a4      	asrs	r4, r4, #2
   116d0:	42a5      	cmp	r5, r4
   116d2:	d004      	beq.n	116de <__libc_init_array+0x3a>
   116d4:	00ab      	lsls	r3, r5, #2
   116d6:	58f3      	ldr	r3, [r6, r3]
   116d8:	4798      	blx	r3
   116da:	3501      	adds	r5, #1
   116dc:	e7f8      	b.n	116d0 <__libc_init_array+0x2c>
   116de:	bd70      	pop	{r4, r5, r6, pc}
   116e0:	00014c28 	.word	0x00014c28
   116e4:	00014c28 	.word	0x00014c28
   116e8:	00014c28 	.word	0x00014c28
   116ec:	00014c2c 	.word	0x00014c2c

000116f0 <malloc>:
   116f0:	b510      	push	{r4, lr}
   116f2:	4b03      	ldr	r3, [pc, #12]	; (11700 <malloc+0x10>)
   116f4:	0001      	movs	r1, r0
   116f6:	6818      	ldr	r0, [r3, #0]
   116f8:	f000 f87a 	bl	117f0 <_malloc_r>
   116fc:	bd10      	pop	{r4, pc}
   116fe:	46c0      	nop			; (mov r8, r8)
   11700:	2000007c 	.word	0x2000007c

00011704 <free>:
   11704:	b510      	push	{r4, lr}
   11706:	4b03      	ldr	r3, [pc, #12]	; (11714 <free+0x10>)
   11708:	0001      	movs	r1, r0
   1170a:	6818      	ldr	r0, [r3, #0]
   1170c:	f000 f82a 	bl	11764 <_free_r>
   11710:	bd10      	pop	{r4, pc}
   11712:	46c0      	nop			; (mov r8, r8)
   11714:	2000007c 	.word	0x2000007c

00011718 <memcpy>:
   11718:	2300      	movs	r3, #0
   1171a:	b510      	push	{r4, lr}
   1171c:	429a      	cmp	r2, r3
   1171e:	d003      	beq.n	11728 <memcpy+0x10>
   11720:	5ccc      	ldrb	r4, [r1, r3]
   11722:	54c4      	strb	r4, [r0, r3]
   11724:	3301      	adds	r3, #1
   11726:	e7f9      	b.n	1171c <memcpy+0x4>
   11728:	bd10      	pop	{r4, pc}

0001172a <memmove>:
   1172a:	b510      	push	{r4, lr}
   1172c:	4288      	cmp	r0, r1
   1172e:	d902      	bls.n	11736 <memmove+0xc>
   11730:	188b      	adds	r3, r1, r2
   11732:	4298      	cmp	r0, r3
   11734:	d301      	bcc.n	1173a <memmove+0x10>
   11736:	2300      	movs	r3, #0
   11738:	e005      	b.n	11746 <memmove+0x1c>
   1173a:	1a9b      	subs	r3, r3, r2
   1173c:	3a01      	subs	r2, #1
   1173e:	d308      	bcc.n	11752 <memmove+0x28>
   11740:	5c99      	ldrb	r1, [r3, r2]
   11742:	5481      	strb	r1, [r0, r2]
   11744:	e7fa      	b.n	1173c <memmove+0x12>
   11746:	4293      	cmp	r3, r2
   11748:	d003      	beq.n	11752 <memmove+0x28>
   1174a:	5ccc      	ldrb	r4, [r1, r3]
   1174c:	54c4      	strb	r4, [r0, r3]
   1174e:	3301      	adds	r3, #1
   11750:	e7f9      	b.n	11746 <memmove+0x1c>
   11752:	bd10      	pop	{r4, pc}

00011754 <memset>:
   11754:	0003      	movs	r3, r0
   11756:	1882      	adds	r2, r0, r2
   11758:	4293      	cmp	r3, r2
   1175a:	d002      	beq.n	11762 <memset+0xe>
   1175c:	7019      	strb	r1, [r3, #0]
   1175e:	3301      	adds	r3, #1
   11760:	e7fa      	b.n	11758 <memset+0x4>
   11762:	4770      	bx	lr

00011764 <_free_r>:
   11764:	b530      	push	{r4, r5, lr}
   11766:	2900      	cmp	r1, #0
   11768:	d03e      	beq.n	117e8 <_free_r+0x84>
   1176a:	3904      	subs	r1, #4
   1176c:	680b      	ldr	r3, [r1, #0]
   1176e:	2b00      	cmp	r3, #0
   11770:	da00      	bge.n	11774 <_free_r+0x10>
   11772:	18c9      	adds	r1, r1, r3
   11774:	4a1d      	ldr	r2, [pc, #116]	; (117ec <_free_r+0x88>)
   11776:	6813      	ldr	r3, [r2, #0]
   11778:	0014      	movs	r4, r2
   1177a:	2b00      	cmp	r3, #0
   1177c:	d102      	bne.n	11784 <_free_r+0x20>
   1177e:	604b      	str	r3, [r1, #4]
   11780:	6011      	str	r1, [r2, #0]
   11782:	e031      	b.n	117e8 <_free_r+0x84>
   11784:	428b      	cmp	r3, r1
   11786:	d90d      	bls.n	117a4 <_free_r+0x40>
   11788:	680a      	ldr	r2, [r1, #0]
   1178a:	1888      	adds	r0, r1, r2
   1178c:	4283      	cmp	r3, r0
   1178e:	d103      	bne.n	11798 <_free_r+0x34>
   11790:	6818      	ldr	r0, [r3, #0]
   11792:	685b      	ldr	r3, [r3, #4]
   11794:	1882      	adds	r2, r0, r2
   11796:	600a      	str	r2, [r1, #0]
   11798:	604b      	str	r3, [r1, #4]
   1179a:	6021      	str	r1, [r4, #0]
   1179c:	e024      	b.n	117e8 <_free_r+0x84>
   1179e:	428a      	cmp	r2, r1
   117a0:	d803      	bhi.n	117aa <_free_r+0x46>
   117a2:	0013      	movs	r3, r2
   117a4:	685a      	ldr	r2, [r3, #4]
   117a6:	2a00      	cmp	r2, #0
   117a8:	d1f9      	bne.n	1179e <_free_r+0x3a>
   117aa:	681d      	ldr	r5, [r3, #0]
   117ac:	195c      	adds	r4, r3, r5
   117ae:	428c      	cmp	r4, r1
   117b0:	d10b      	bne.n	117ca <_free_r+0x66>
   117b2:	6809      	ldr	r1, [r1, #0]
   117b4:	1869      	adds	r1, r5, r1
   117b6:	1858      	adds	r0, r3, r1
   117b8:	6019      	str	r1, [r3, #0]
   117ba:	4282      	cmp	r2, r0
   117bc:	d114      	bne.n	117e8 <_free_r+0x84>
   117be:	6810      	ldr	r0, [r2, #0]
   117c0:	6852      	ldr	r2, [r2, #4]
   117c2:	1841      	adds	r1, r0, r1
   117c4:	6019      	str	r1, [r3, #0]
   117c6:	605a      	str	r2, [r3, #4]
   117c8:	e00e      	b.n	117e8 <_free_r+0x84>
   117ca:	428c      	cmp	r4, r1
   117cc:	d902      	bls.n	117d4 <_free_r+0x70>
   117ce:	230c      	movs	r3, #12
   117d0:	6003      	str	r3, [r0, #0]
   117d2:	e009      	b.n	117e8 <_free_r+0x84>
   117d4:	6808      	ldr	r0, [r1, #0]
   117d6:	180c      	adds	r4, r1, r0
   117d8:	42a2      	cmp	r2, r4
   117da:	d103      	bne.n	117e4 <_free_r+0x80>
   117dc:	6814      	ldr	r4, [r2, #0]
   117de:	6852      	ldr	r2, [r2, #4]
   117e0:	1820      	adds	r0, r4, r0
   117e2:	6008      	str	r0, [r1, #0]
   117e4:	604a      	str	r2, [r1, #4]
   117e6:	6059      	str	r1, [r3, #4]
   117e8:	bd30      	pop	{r4, r5, pc}
   117ea:	46c0      	nop			; (mov r8, r8)
   117ec:	200002c4 	.word	0x200002c4

000117f0 <_malloc_r>:
   117f0:	2303      	movs	r3, #3
   117f2:	b570      	push	{r4, r5, r6, lr}
   117f4:	1ccd      	adds	r5, r1, #3
   117f6:	439d      	bics	r5, r3
   117f8:	3508      	adds	r5, #8
   117fa:	0006      	movs	r6, r0
   117fc:	2d0c      	cmp	r5, #12
   117fe:	d201      	bcs.n	11804 <_malloc_r+0x14>
   11800:	250c      	movs	r5, #12
   11802:	e005      	b.n	11810 <_malloc_r+0x20>
   11804:	2d00      	cmp	r5, #0
   11806:	da03      	bge.n	11810 <_malloc_r+0x20>
   11808:	230c      	movs	r3, #12
   1180a:	2000      	movs	r0, #0
   1180c:	6033      	str	r3, [r6, #0]
   1180e:	e040      	b.n	11892 <_malloc_r+0xa2>
   11810:	42a9      	cmp	r1, r5
   11812:	d8f9      	bhi.n	11808 <_malloc_r+0x18>
   11814:	4b1f      	ldr	r3, [pc, #124]	; (11894 <_malloc_r+0xa4>)
   11816:	681c      	ldr	r4, [r3, #0]
   11818:	001a      	movs	r2, r3
   1181a:	0021      	movs	r1, r4
   1181c:	2900      	cmp	r1, #0
   1181e:	d013      	beq.n	11848 <_malloc_r+0x58>
   11820:	680b      	ldr	r3, [r1, #0]
   11822:	1b5b      	subs	r3, r3, r5
   11824:	d40d      	bmi.n	11842 <_malloc_r+0x52>
   11826:	2b0b      	cmp	r3, #11
   11828:	d902      	bls.n	11830 <_malloc_r+0x40>
   1182a:	600b      	str	r3, [r1, #0]
   1182c:	18cc      	adds	r4, r1, r3
   1182e:	e01e      	b.n	1186e <_malloc_r+0x7e>
   11830:	428c      	cmp	r4, r1
   11832:	d102      	bne.n	1183a <_malloc_r+0x4a>
   11834:	6863      	ldr	r3, [r4, #4]
   11836:	6013      	str	r3, [r2, #0]
   11838:	e01a      	b.n	11870 <_malloc_r+0x80>
   1183a:	684b      	ldr	r3, [r1, #4]
   1183c:	6063      	str	r3, [r4, #4]
   1183e:	000c      	movs	r4, r1
   11840:	e016      	b.n	11870 <_malloc_r+0x80>
   11842:	000c      	movs	r4, r1
   11844:	6849      	ldr	r1, [r1, #4]
   11846:	e7e9      	b.n	1181c <_malloc_r+0x2c>
   11848:	4c13      	ldr	r4, [pc, #76]	; (11898 <_malloc_r+0xa8>)
   1184a:	6823      	ldr	r3, [r4, #0]
   1184c:	2b00      	cmp	r3, #0
   1184e:	d103      	bne.n	11858 <_malloc_r+0x68>
   11850:	0030      	movs	r0, r6
   11852:	f000 f8bd 	bl	119d0 <_sbrk_r>
   11856:	6020      	str	r0, [r4, #0]
   11858:	0029      	movs	r1, r5
   1185a:	0030      	movs	r0, r6
   1185c:	f000 f8b8 	bl	119d0 <_sbrk_r>
   11860:	1c43      	adds	r3, r0, #1
   11862:	d0d1      	beq.n	11808 <_malloc_r+0x18>
   11864:	2303      	movs	r3, #3
   11866:	1cc4      	adds	r4, r0, #3
   11868:	439c      	bics	r4, r3
   1186a:	42a0      	cmp	r0, r4
   1186c:	d10a      	bne.n	11884 <_malloc_r+0x94>
   1186e:	6025      	str	r5, [r4, #0]
   11870:	0020      	movs	r0, r4
   11872:	2207      	movs	r2, #7
   11874:	300b      	adds	r0, #11
   11876:	1d23      	adds	r3, r4, #4
   11878:	4390      	bics	r0, r2
   1187a:	1ac3      	subs	r3, r0, r3
   1187c:	d009      	beq.n	11892 <_malloc_r+0xa2>
   1187e:	425a      	negs	r2, r3
   11880:	50e2      	str	r2, [r4, r3]
   11882:	e006      	b.n	11892 <_malloc_r+0xa2>
   11884:	1a21      	subs	r1, r4, r0
   11886:	0030      	movs	r0, r6
   11888:	f000 f8a2 	bl	119d0 <_sbrk_r>
   1188c:	1c43      	adds	r3, r0, #1
   1188e:	d1ee      	bne.n	1186e <_malloc_r+0x7e>
   11890:	e7ba      	b.n	11808 <_malloc_r+0x18>
   11892:	bd70      	pop	{r4, r5, r6, pc}
   11894:	200002c4 	.word	0x200002c4
   11898:	200002c0 	.word	0x200002c0

0001189c <iprintf>:
   1189c:	b40f      	push	{r0, r1, r2, r3}
   1189e:	4b0b      	ldr	r3, [pc, #44]	; (118cc <iprintf+0x30>)
   118a0:	b513      	push	{r0, r1, r4, lr}
   118a2:	681c      	ldr	r4, [r3, #0]
   118a4:	2c00      	cmp	r4, #0
   118a6:	d005      	beq.n	118b4 <iprintf+0x18>
   118a8:	69a3      	ldr	r3, [r4, #24]
   118aa:	2b00      	cmp	r3, #0
   118ac:	d102      	bne.n	118b4 <iprintf+0x18>
   118ae:	0020      	movs	r0, r4
   118b0:	f000 fc40 	bl	12134 <__sinit>
   118b4:	ab05      	add	r3, sp, #20
   118b6:	9a04      	ldr	r2, [sp, #16]
   118b8:	68a1      	ldr	r1, [r4, #8]
   118ba:	0020      	movs	r0, r4
   118bc:	9301      	str	r3, [sp, #4]
   118be:	f000 feb9 	bl	12634 <_vfiprintf_r>
   118c2:	bc16      	pop	{r1, r2, r4}
   118c4:	bc08      	pop	{r3}
   118c6:	b004      	add	sp, #16
   118c8:	4718      	bx	r3
   118ca:	46c0      	nop			; (mov r8, r8)
   118cc:	2000007c 	.word	0x2000007c

000118d0 <putchar>:
   118d0:	4b08      	ldr	r3, [pc, #32]	; (118f4 <putchar+0x24>)
   118d2:	b570      	push	{r4, r5, r6, lr}
   118d4:	681c      	ldr	r4, [r3, #0]
   118d6:	0005      	movs	r5, r0
   118d8:	2c00      	cmp	r4, #0
   118da:	d005      	beq.n	118e8 <putchar+0x18>
   118dc:	69a3      	ldr	r3, [r4, #24]
   118de:	2b00      	cmp	r3, #0
   118e0:	d102      	bne.n	118e8 <putchar+0x18>
   118e2:	0020      	movs	r0, r4
   118e4:	f000 fc26 	bl	12134 <__sinit>
   118e8:	0029      	movs	r1, r5
   118ea:	68a2      	ldr	r2, [r4, #8]
   118ec:	0020      	movs	r0, r4
   118ee:	f001 f94d 	bl	12b8c <_putc_r>
   118f2:	bd70      	pop	{r4, r5, r6, pc}
   118f4:	2000007c 	.word	0x2000007c

000118f8 <_puts_r>:
   118f8:	b570      	push	{r4, r5, r6, lr}
   118fa:	0005      	movs	r5, r0
   118fc:	000e      	movs	r6, r1
   118fe:	2800      	cmp	r0, #0
   11900:	d004      	beq.n	1190c <_puts_r+0x14>
   11902:	6983      	ldr	r3, [r0, #24]
   11904:	2b00      	cmp	r3, #0
   11906:	d101      	bne.n	1190c <_puts_r+0x14>
   11908:	f000 fc14 	bl	12134 <__sinit>
   1190c:	69ab      	ldr	r3, [r5, #24]
   1190e:	68ac      	ldr	r4, [r5, #8]
   11910:	2b00      	cmp	r3, #0
   11912:	d102      	bne.n	1191a <_puts_r+0x22>
   11914:	0028      	movs	r0, r5
   11916:	f000 fc0d 	bl	12134 <__sinit>
   1191a:	4b25      	ldr	r3, [pc, #148]	; (119b0 <_puts_r+0xb8>)
   1191c:	429c      	cmp	r4, r3
   1191e:	d101      	bne.n	11924 <_puts_r+0x2c>
   11920:	686c      	ldr	r4, [r5, #4]
   11922:	e008      	b.n	11936 <_puts_r+0x3e>
   11924:	4b23      	ldr	r3, [pc, #140]	; (119b4 <_puts_r+0xbc>)
   11926:	429c      	cmp	r4, r3
   11928:	d101      	bne.n	1192e <_puts_r+0x36>
   1192a:	68ac      	ldr	r4, [r5, #8]
   1192c:	e003      	b.n	11936 <_puts_r+0x3e>
   1192e:	4b22      	ldr	r3, [pc, #136]	; (119b8 <_puts_r+0xc0>)
   11930:	429c      	cmp	r4, r3
   11932:	d100      	bne.n	11936 <_puts_r+0x3e>
   11934:	68ec      	ldr	r4, [r5, #12]
   11936:	89a3      	ldrh	r3, [r4, #12]
   11938:	071b      	lsls	r3, r3, #28
   1193a:	d502      	bpl.n	11942 <_puts_r+0x4a>
   1193c:	6923      	ldr	r3, [r4, #16]
   1193e:	2b00      	cmp	r3, #0
   11940:	d111      	bne.n	11966 <_puts_r+0x6e>
   11942:	0021      	movs	r1, r4
   11944:	0028      	movs	r0, r5
   11946:	f000 fa8b 	bl	11e60 <__swsetup_r>
   1194a:	2800      	cmp	r0, #0
   1194c:	d00b      	beq.n	11966 <_puts_r+0x6e>
   1194e:	2001      	movs	r0, #1
   11950:	4240      	negs	r0, r0
   11952:	e02b      	b.n	119ac <_puts_r+0xb4>
   11954:	3b01      	subs	r3, #1
   11956:	3601      	adds	r6, #1
   11958:	60a3      	str	r3, [r4, #8]
   1195a:	2b00      	cmp	r3, #0
   1195c:	db08      	blt.n	11970 <_puts_r+0x78>
   1195e:	6823      	ldr	r3, [r4, #0]
   11960:	1c5a      	adds	r2, r3, #1
   11962:	6022      	str	r2, [r4, #0]
   11964:	7019      	strb	r1, [r3, #0]
   11966:	7831      	ldrb	r1, [r6, #0]
   11968:	68a3      	ldr	r3, [r4, #8]
   1196a:	2900      	cmp	r1, #0
   1196c:	d1f2      	bne.n	11954 <_puts_r+0x5c>
   1196e:	e00b      	b.n	11988 <_puts_r+0x90>
   11970:	69a2      	ldr	r2, [r4, #24]
   11972:	4293      	cmp	r3, r2
   11974:	db01      	blt.n	1197a <_puts_r+0x82>
   11976:	290a      	cmp	r1, #10
   11978:	d1f1      	bne.n	1195e <_puts_r+0x66>
   1197a:	0022      	movs	r2, r4
   1197c:	0028      	movs	r0, r5
   1197e:	f000 fa17 	bl	11db0 <__swbuf_r>
   11982:	1c43      	adds	r3, r0, #1
   11984:	d1ef      	bne.n	11966 <_puts_r+0x6e>
   11986:	e7e2      	b.n	1194e <_puts_r+0x56>
   11988:	3b01      	subs	r3, #1
   1198a:	60a3      	str	r3, [r4, #8]
   1198c:	2b00      	cmp	r3, #0
   1198e:	da08      	bge.n	119a2 <_puts_r+0xaa>
   11990:	0022      	movs	r2, r4
   11992:	310a      	adds	r1, #10
   11994:	0028      	movs	r0, r5
   11996:	f000 fa0b 	bl	11db0 <__swbuf_r>
   1199a:	1c43      	adds	r3, r0, #1
   1199c:	d0d7      	beq.n	1194e <_puts_r+0x56>
   1199e:	200a      	movs	r0, #10
   119a0:	e004      	b.n	119ac <_puts_r+0xb4>
   119a2:	200a      	movs	r0, #10
   119a4:	6823      	ldr	r3, [r4, #0]
   119a6:	1c5a      	adds	r2, r3, #1
   119a8:	6022      	str	r2, [r4, #0]
   119aa:	7018      	strb	r0, [r3, #0]
   119ac:	bd70      	pop	{r4, r5, r6, pc}
   119ae:	46c0      	nop			; (mov r8, r8)
   119b0:	00014b88 	.word	0x00014b88
   119b4:	00014ba8 	.word	0x00014ba8
   119b8:	00014bc8 	.word	0x00014bc8

000119bc <puts>:
   119bc:	b510      	push	{r4, lr}
   119be:	4b03      	ldr	r3, [pc, #12]	; (119cc <puts+0x10>)
   119c0:	0001      	movs	r1, r0
   119c2:	6818      	ldr	r0, [r3, #0]
   119c4:	f7ff ff98 	bl	118f8 <_puts_r>
   119c8:	bd10      	pop	{r4, pc}
   119ca:	46c0      	nop			; (mov r8, r8)
   119cc:	2000007c 	.word	0x2000007c

000119d0 <_sbrk_r>:
   119d0:	2300      	movs	r3, #0
   119d2:	b570      	push	{r4, r5, r6, lr}
   119d4:	4c06      	ldr	r4, [pc, #24]	; (119f0 <_sbrk_r+0x20>)
   119d6:	0005      	movs	r5, r0
   119d8:	0008      	movs	r0, r1
   119da:	6023      	str	r3, [r4, #0]
   119dc:	f7fc fc1e 	bl	e21c <_sbrk>
   119e0:	1c43      	adds	r3, r0, #1
   119e2:	d103      	bne.n	119ec <_sbrk_r+0x1c>
   119e4:	6823      	ldr	r3, [r4, #0]
   119e6:	2b00      	cmp	r3, #0
   119e8:	d000      	beq.n	119ec <_sbrk_r+0x1c>
   119ea:	602b      	str	r3, [r5, #0]
   119ec:	bd70      	pop	{r4, r5, r6, pc}
   119ee:	46c0      	nop			; (mov r8, r8)
   119f0:	20000dfc 	.word	0x20000dfc

000119f4 <setbuf>:
   119f4:	424a      	negs	r2, r1
   119f6:	414a      	adcs	r2, r1
   119f8:	2380      	movs	r3, #128	; 0x80
   119fa:	b510      	push	{r4, lr}
   119fc:	0052      	lsls	r2, r2, #1
   119fe:	00db      	lsls	r3, r3, #3
   11a00:	f000 f802 	bl	11a08 <setvbuf>
   11a04:	bd10      	pop	{r4, pc}
	...

00011a08 <setvbuf>:
   11a08:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a0a:	001d      	movs	r5, r3
   11a0c:	4b51      	ldr	r3, [pc, #324]	; (11b54 <setvbuf+0x14c>)
   11a0e:	b085      	sub	sp, #20
   11a10:	681e      	ldr	r6, [r3, #0]
   11a12:	0004      	movs	r4, r0
   11a14:	000f      	movs	r7, r1
   11a16:	9200      	str	r2, [sp, #0]
   11a18:	2e00      	cmp	r6, #0
   11a1a:	d005      	beq.n	11a28 <setvbuf+0x20>
   11a1c:	69b3      	ldr	r3, [r6, #24]
   11a1e:	2b00      	cmp	r3, #0
   11a20:	d102      	bne.n	11a28 <setvbuf+0x20>
   11a22:	0030      	movs	r0, r6
   11a24:	f000 fb86 	bl	12134 <__sinit>
   11a28:	4b4b      	ldr	r3, [pc, #300]	; (11b58 <setvbuf+0x150>)
   11a2a:	429c      	cmp	r4, r3
   11a2c:	d101      	bne.n	11a32 <setvbuf+0x2a>
   11a2e:	6874      	ldr	r4, [r6, #4]
   11a30:	e008      	b.n	11a44 <setvbuf+0x3c>
   11a32:	4b4a      	ldr	r3, [pc, #296]	; (11b5c <setvbuf+0x154>)
   11a34:	429c      	cmp	r4, r3
   11a36:	d101      	bne.n	11a3c <setvbuf+0x34>
   11a38:	68b4      	ldr	r4, [r6, #8]
   11a3a:	e003      	b.n	11a44 <setvbuf+0x3c>
   11a3c:	4b48      	ldr	r3, [pc, #288]	; (11b60 <setvbuf+0x158>)
   11a3e:	429c      	cmp	r4, r3
   11a40:	d100      	bne.n	11a44 <setvbuf+0x3c>
   11a42:	68f4      	ldr	r4, [r6, #12]
   11a44:	9b00      	ldr	r3, [sp, #0]
   11a46:	2b02      	cmp	r3, #2
   11a48:	d005      	beq.n	11a56 <setvbuf+0x4e>
   11a4a:	2b01      	cmp	r3, #1
   11a4c:	d900      	bls.n	11a50 <setvbuf+0x48>
   11a4e:	e07c      	b.n	11b4a <setvbuf+0x142>
   11a50:	2d00      	cmp	r5, #0
   11a52:	da00      	bge.n	11a56 <setvbuf+0x4e>
   11a54:	e079      	b.n	11b4a <setvbuf+0x142>
   11a56:	0021      	movs	r1, r4
   11a58:	0030      	movs	r0, r6
   11a5a:	f000 fafd 	bl	12058 <_fflush_r>
   11a5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11a60:	2900      	cmp	r1, #0
   11a62:	d008      	beq.n	11a76 <setvbuf+0x6e>
   11a64:	0023      	movs	r3, r4
   11a66:	3344      	adds	r3, #68	; 0x44
   11a68:	4299      	cmp	r1, r3
   11a6a:	d002      	beq.n	11a72 <setvbuf+0x6a>
   11a6c:	0030      	movs	r0, r6
   11a6e:	f7ff fe79 	bl	11764 <_free_r>
   11a72:	2300      	movs	r3, #0
   11a74:	6363      	str	r3, [r4, #52]	; 0x34
   11a76:	2300      	movs	r3, #0
   11a78:	61a3      	str	r3, [r4, #24]
   11a7a:	6063      	str	r3, [r4, #4]
   11a7c:	89a3      	ldrh	r3, [r4, #12]
   11a7e:	061b      	lsls	r3, r3, #24
   11a80:	d503      	bpl.n	11a8a <setvbuf+0x82>
   11a82:	6921      	ldr	r1, [r4, #16]
   11a84:	0030      	movs	r0, r6
   11a86:	f7ff fe6d 	bl	11764 <_free_r>
   11a8a:	89a2      	ldrh	r2, [r4, #12]
   11a8c:	4b35      	ldr	r3, [pc, #212]	; (11b64 <setvbuf+0x15c>)
   11a8e:	4013      	ands	r3, r2
   11a90:	81a3      	strh	r3, [r4, #12]
   11a92:	9b00      	ldr	r3, [sp, #0]
   11a94:	2b02      	cmp	r3, #2
   11a96:	d021      	beq.n	11adc <setvbuf+0xd4>
   11a98:	ab03      	add	r3, sp, #12
   11a9a:	aa02      	add	r2, sp, #8
   11a9c:	0021      	movs	r1, r4
   11a9e:	0030      	movs	r0, r6
   11aa0:	f000 fbdc 	bl	1225c <__swhatbuf_r>
   11aa4:	89a3      	ldrh	r3, [r4, #12]
   11aa6:	4318      	orrs	r0, r3
   11aa8:	81a0      	strh	r0, [r4, #12]
   11aaa:	2d00      	cmp	r5, #0
   11aac:	d101      	bne.n	11ab2 <setvbuf+0xaa>
   11aae:	9d02      	ldr	r5, [sp, #8]
   11ab0:	e001      	b.n	11ab6 <setvbuf+0xae>
   11ab2:	2f00      	cmp	r7, #0
   11ab4:	d125      	bne.n	11b02 <setvbuf+0xfa>
   11ab6:	0028      	movs	r0, r5
   11ab8:	f7ff fe1a 	bl	116f0 <malloc>
   11abc:	9501      	str	r5, [sp, #4]
   11abe:	1e07      	subs	r7, r0, #0
   11ac0:	d11a      	bne.n	11af8 <setvbuf+0xf0>
   11ac2:	9b02      	ldr	r3, [sp, #8]
   11ac4:	9301      	str	r3, [sp, #4]
   11ac6:	42ab      	cmp	r3, r5
   11ac8:	d102      	bne.n	11ad0 <setvbuf+0xc8>
   11aca:	2001      	movs	r0, #1
   11acc:	4240      	negs	r0, r0
   11ace:	e006      	b.n	11ade <setvbuf+0xd6>
   11ad0:	9801      	ldr	r0, [sp, #4]
   11ad2:	f7ff fe0d 	bl	116f0 <malloc>
   11ad6:	1e07      	subs	r7, r0, #0
   11ad8:	d10e      	bne.n	11af8 <setvbuf+0xf0>
   11ada:	e7f6      	b.n	11aca <setvbuf+0xc2>
   11adc:	2000      	movs	r0, #0
   11ade:	2202      	movs	r2, #2
   11ae0:	89a3      	ldrh	r3, [r4, #12]
   11ae2:	4313      	orrs	r3, r2
   11ae4:	81a3      	strh	r3, [r4, #12]
   11ae6:	2300      	movs	r3, #0
   11ae8:	60a3      	str	r3, [r4, #8]
   11aea:	0023      	movs	r3, r4
   11aec:	3347      	adds	r3, #71	; 0x47
   11aee:	6023      	str	r3, [r4, #0]
   11af0:	6123      	str	r3, [r4, #16]
   11af2:	2301      	movs	r3, #1
   11af4:	6163      	str	r3, [r4, #20]
   11af6:	e02a      	b.n	11b4e <setvbuf+0x146>
   11af8:	2280      	movs	r2, #128	; 0x80
   11afa:	89a3      	ldrh	r3, [r4, #12]
   11afc:	9d01      	ldr	r5, [sp, #4]
   11afe:	4313      	orrs	r3, r2
   11b00:	81a3      	strh	r3, [r4, #12]
   11b02:	69b3      	ldr	r3, [r6, #24]
   11b04:	2b00      	cmp	r3, #0
   11b06:	d102      	bne.n	11b0e <setvbuf+0x106>
   11b08:	0030      	movs	r0, r6
   11b0a:	f000 fb13 	bl	12134 <__sinit>
   11b0e:	9b00      	ldr	r3, [sp, #0]
   11b10:	2b01      	cmp	r3, #1
   11b12:	d103      	bne.n	11b1c <setvbuf+0x114>
   11b14:	89a3      	ldrh	r3, [r4, #12]
   11b16:	9a00      	ldr	r2, [sp, #0]
   11b18:	431a      	orrs	r2, r3
   11b1a:	81a2      	strh	r2, [r4, #12]
   11b1c:	2308      	movs	r3, #8
   11b1e:	89a2      	ldrh	r2, [r4, #12]
   11b20:	6027      	str	r7, [r4, #0]
   11b22:	4013      	ands	r3, r2
   11b24:	6127      	str	r7, [r4, #16]
   11b26:	6165      	str	r5, [r4, #20]
   11b28:	1e18      	subs	r0, r3, #0
   11b2a:	d00c      	beq.n	11b46 <setvbuf+0x13e>
   11b2c:	2301      	movs	r3, #1
   11b2e:	401a      	ands	r2, r3
   11b30:	2300      	movs	r3, #0
   11b32:	1e10      	subs	r0, r2, #0
   11b34:	4298      	cmp	r0, r3
   11b36:	d004      	beq.n	11b42 <setvbuf+0x13a>
   11b38:	426d      	negs	r5, r5
   11b3a:	60a3      	str	r3, [r4, #8]
   11b3c:	61a5      	str	r5, [r4, #24]
   11b3e:	0018      	movs	r0, r3
   11b40:	e005      	b.n	11b4e <setvbuf+0x146>
   11b42:	60a5      	str	r5, [r4, #8]
   11b44:	e003      	b.n	11b4e <setvbuf+0x146>
   11b46:	60a3      	str	r3, [r4, #8]
   11b48:	e001      	b.n	11b4e <setvbuf+0x146>
   11b4a:	2001      	movs	r0, #1
   11b4c:	4240      	negs	r0, r0
   11b4e:	b005      	add	sp, #20
   11b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b52:	46c0      	nop			; (mov r8, r8)
   11b54:	2000007c 	.word	0x2000007c
   11b58:	00014b88 	.word	0x00014b88
   11b5c:	00014ba8 	.word	0x00014ba8
   11b60:	00014bc8 	.word	0x00014bc8
   11b64:	fffff35c 	.word	0xfffff35c

00011b68 <siprintf>:
   11b68:	b40e      	push	{r1, r2, r3}
   11b6a:	b510      	push	{r4, lr}
   11b6c:	b09d      	sub	sp, #116	; 0x74
   11b6e:	a902      	add	r1, sp, #8
   11b70:	9002      	str	r0, [sp, #8]
   11b72:	6108      	str	r0, [r1, #16]
   11b74:	480b      	ldr	r0, [pc, #44]	; (11ba4 <siprintf+0x3c>)
   11b76:	2482      	movs	r4, #130	; 0x82
   11b78:	6088      	str	r0, [r1, #8]
   11b7a:	6148      	str	r0, [r1, #20]
   11b7c:	2001      	movs	r0, #1
   11b7e:	4240      	negs	r0, r0
   11b80:	ab1f      	add	r3, sp, #124	; 0x7c
   11b82:	81c8      	strh	r0, [r1, #14]
   11b84:	4808      	ldr	r0, [pc, #32]	; (11ba8 <siprintf+0x40>)
   11b86:	cb04      	ldmia	r3!, {r2}
   11b88:	00a4      	lsls	r4, r4, #2
   11b8a:	6800      	ldr	r0, [r0, #0]
   11b8c:	9301      	str	r3, [sp, #4]
   11b8e:	818c      	strh	r4, [r1, #12]
   11b90:	f000 fc2a 	bl	123e8 <_svfiprintf_r>
   11b94:	2300      	movs	r3, #0
   11b96:	9a02      	ldr	r2, [sp, #8]
   11b98:	7013      	strb	r3, [r2, #0]
   11b9a:	b01d      	add	sp, #116	; 0x74
   11b9c:	bc10      	pop	{r4}
   11b9e:	bc08      	pop	{r3}
   11ba0:	b003      	add	sp, #12
   11ba2:	4718      	bx	r3
   11ba4:	7fffffff 	.word	0x7fffffff
   11ba8:	2000007c 	.word	0x2000007c

00011bac <strcmp>:
   11bac:	7802      	ldrb	r2, [r0, #0]
   11bae:	780b      	ldrb	r3, [r1, #0]
   11bb0:	2a00      	cmp	r2, #0
   11bb2:	d003      	beq.n	11bbc <strcmp+0x10>
   11bb4:	3001      	adds	r0, #1
   11bb6:	3101      	adds	r1, #1
   11bb8:	429a      	cmp	r2, r3
   11bba:	d0f7      	beq.n	11bac <strcmp>
   11bbc:	1ad0      	subs	r0, r2, r3
   11bbe:	4770      	bx	lr

00011bc0 <strcpy>:
   11bc0:	1c03      	adds	r3, r0, #0
   11bc2:	780a      	ldrb	r2, [r1, #0]
   11bc4:	3101      	adds	r1, #1
   11bc6:	701a      	strb	r2, [r3, #0]
   11bc8:	3301      	adds	r3, #1
   11bca:	2a00      	cmp	r2, #0
   11bcc:	d1f9      	bne.n	11bc2 <strcpy+0x2>
   11bce:	4770      	bx	lr

00011bd0 <strdup>:
   11bd0:	b510      	push	{r4, lr}
   11bd2:	4b03      	ldr	r3, [pc, #12]	; (11be0 <strdup+0x10>)
   11bd4:	0001      	movs	r1, r0
   11bd6:	6818      	ldr	r0, [r3, #0]
   11bd8:	f000 f804 	bl	11be4 <_strdup_r>
   11bdc:	bd10      	pop	{r4, pc}
   11bde:	46c0      	nop			; (mov r8, r8)
   11be0:	2000007c 	.word	0x2000007c

00011be4 <_strdup_r>:
   11be4:	b570      	push	{r4, r5, r6, lr}
   11be6:	0005      	movs	r5, r0
   11be8:	0008      	movs	r0, r1
   11bea:	000e      	movs	r6, r1
   11bec:	f000 f80d 	bl	11c0a <strlen>
   11bf0:	1c44      	adds	r4, r0, #1
   11bf2:	0021      	movs	r1, r4
   11bf4:	0028      	movs	r0, r5
   11bf6:	f7ff fdfb 	bl	117f0 <_malloc_r>
   11bfa:	1e05      	subs	r5, r0, #0
   11bfc:	d003      	beq.n	11c06 <_strdup_r+0x22>
   11bfe:	0022      	movs	r2, r4
   11c00:	0031      	movs	r1, r6
   11c02:	f7ff fd89 	bl	11718 <memcpy>
   11c06:	0028      	movs	r0, r5
   11c08:	bd70      	pop	{r4, r5, r6, pc}

00011c0a <strlen>:
   11c0a:	2300      	movs	r3, #0
   11c0c:	5cc2      	ldrb	r2, [r0, r3]
   11c0e:	3301      	adds	r3, #1
   11c10:	2a00      	cmp	r2, #0
   11c12:	d1fb      	bne.n	11c0c <strlen+0x2>
   11c14:	1e58      	subs	r0, r3, #1
   11c16:	4770      	bx	lr

00011c18 <strncmp>:
   11c18:	2300      	movs	r3, #0
   11c1a:	b530      	push	{r4, r5, lr}
   11c1c:	429a      	cmp	r2, r3
   11c1e:	d00b      	beq.n	11c38 <strncmp+0x20>
   11c20:	3a01      	subs	r2, #1
   11c22:	5cc4      	ldrb	r4, [r0, r3]
   11c24:	5ccd      	ldrb	r5, [r1, r3]
   11c26:	42ac      	cmp	r4, r5
   11c28:	d105      	bne.n	11c36 <strncmp+0x1e>
   11c2a:	429a      	cmp	r2, r3
   11c2c:	d002      	beq.n	11c34 <strncmp+0x1c>
   11c2e:	3301      	adds	r3, #1
   11c30:	2c00      	cmp	r4, #0
   11c32:	d1f6      	bne.n	11c22 <strncmp+0xa>
   11c34:	0025      	movs	r5, r4
   11c36:	1b63      	subs	r3, r4, r5
   11c38:	0018      	movs	r0, r3
   11c3a:	bd30      	pop	{r4, r5, pc}

00011c3c <strstr>:
   11c3c:	b510      	push	{r4, lr}
   11c3e:	7803      	ldrb	r3, [r0, #0]
   11c40:	0002      	movs	r2, r0
   11c42:	2b00      	cmp	r3, #0
   11c44:	d105      	bne.n	11c52 <strstr+0x16>
   11c46:	7809      	ldrb	r1, [r1, #0]
   11c48:	0018      	movs	r0, r3
   11c4a:	2900      	cmp	r1, #0
   11c4c:	d00d      	beq.n	11c6a <strstr+0x2e>
   11c4e:	e00f      	b.n	11c70 <strstr+0x34>
   11c50:	3201      	adds	r2, #1
   11c52:	7813      	ldrb	r3, [r2, #0]
   11c54:	2b00      	cmp	r3, #0
   11c56:	d00a      	beq.n	11c6e <strstr+0x32>
   11c58:	2300      	movs	r3, #0
   11c5a:	5cc8      	ldrb	r0, [r1, r3]
   11c5c:	2800      	cmp	r0, #0
   11c5e:	d004      	beq.n	11c6a <strstr+0x2e>
   11c60:	5cd4      	ldrb	r4, [r2, r3]
   11c62:	4284      	cmp	r4, r0
   11c64:	d1f4      	bne.n	11c50 <strstr+0x14>
   11c66:	3301      	adds	r3, #1
   11c68:	e7f7      	b.n	11c5a <strstr+0x1e>
   11c6a:	0010      	movs	r0, r2
   11c6c:	e000      	b.n	11c70 <strstr+0x34>
   11c6e:	0018      	movs	r0, r3
   11c70:	bd10      	pop	{r4, pc}
	...

00011c74 <_strtol_r>:
   11c74:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c76:	001e      	movs	r6, r3
   11c78:	4b45      	ldr	r3, [pc, #276]	; (11d90 <_strtol_r+0x11c>)
   11c7a:	b087      	sub	sp, #28
   11c7c:	681b      	ldr	r3, [r3, #0]
   11c7e:	9201      	str	r2, [sp, #4]
   11c80:	9302      	str	r3, [sp, #8]
   11c82:	2208      	movs	r2, #8
   11c84:	000b      	movs	r3, r1
   11c86:	9005      	str	r0, [sp, #20]
   11c88:	9103      	str	r1, [sp, #12]
   11c8a:	781c      	ldrb	r4, [r3, #0]
   11c8c:	9902      	ldr	r1, [sp, #8]
   11c8e:	1c5d      	adds	r5, r3, #1
   11c90:	1909      	adds	r1, r1, r4
   11c92:	7848      	ldrb	r0, [r1, #1]
   11c94:	4010      	ands	r0, r2
   11c96:	d001      	beq.n	11c9c <_strtol_r+0x28>
   11c98:	002b      	movs	r3, r5
   11c9a:	e7f6      	b.n	11c8a <_strtol_r+0x16>
   11c9c:	2c2d      	cmp	r4, #45	; 0x2d
   11c9e:	d104      	bne.n	11caa <_strtol_r+0x36>
   11ca0:	1c9d      	adds	r5, r3, #2
   11ca2:	785c      	ldrb	r4, [r3, #1]
   11ca4:	2301      	movs	r3, #1
   11ca6:	9300      	str	r3, [sp, #0]
   11ca8:	e004      	b.n	11cb4 <_strtol_r+0x40>
   11caa:	9000      	str	r0, [sp, #0]
   11cac:	2c2b      	cmp	r4, #43	; 0x2b
   11cae:	d101      	bne.n	11cb4 <_strtol_r+0x40>
   11cb0:	785c      	ldrb	r4, [r3, #1]
   11cb2:	1c9d      	adds	r5, r3, #2
   11cb4:	2e00      	cmp	r6, #0
   11cb6:	d002      	beq.n	11cbe <_strtol_r+0x4a>
   11cb8:	2e10      	cmp	r6, #16
   11cba:	d10a      	bne.n	11cd2 <_strtol_r+0x5e>
   11cbc:	e062      	b.n	11d84 <_strtol_r+0x110>
   11cbe:	2c30      	cmp	r4, #48	; 0x30
   11cc0:	d15e      	bne.n	11d80 <_strtol_r+0x10c>
   11cc2:	2220      	movs	r2, #32
   11cc4:	782b      	ldrb	r3, [r5, #0]
   11cc6:	4393      	bics	r3, r2
   11cc8:	2b58      	cmp	r3, #88	; 0x58
   11cca:	d154      	bne.n	11d76 <_strtol_r+0x102>
   11ccc:	2610      	movs	r6, #16
   11cce:	786c      	ldrb	r4, [r5, #1]
   11cd0:	3502      	adds	r5, #2
   11cd2:	9f00      	ldr	r7, [sp, #0]
   11cd4:	0031      	movs	r1, r6
   11cd6:	1e7b      	subs	r3, r7, #1
   11cd8:	419f      	sbcs	r7, r3
   11cda:	4b2e      	ldr	r3, [pc, #184]	; (11d94 <_strtol_r+0x120>)
   11cdc:	18ff      	adds	r7, r7, r3
   11cde:	0038      	movs	r0, r7
   11ce0:	f7ff fbbe 	bl	11460 <__aeabi_uidivmod>
   11ce4:	0038      	movs	r0, r7
   11ce6:	9104      	str	r1, [sp, #16]
   11ce8:	0031      	movs	r1, r6
   11cea:	f7ff fb33 	bl	11354 <__aeabi_uidiv>
   11cee:	2300      	movs	r3, #0
   11cf0:	2203      	movs	r2, #3
   11cf2:	0007      	movs	r7, r0
   11cf4:	4694      	mov	ip, r2
   11cf6:	0018      	movs	r0, r3
   11cf8:	9a02      	ldr	r2, [sp, #8]
   11cfa:	1912      	adds	r2, r2, r4
   11cfc:	7851      	ldrb	r1, [r2, #1]
   11cfe:	2204      	movs	r2, #4
   11d00:	4211      	tst	r1, r2
   11d02:	d001      	beq.n	11d08 <_strtol_r+0x94>
   11d04:	3c30      	subs	r4, #48	; 0x30
   11d06:	e007      	b.n	11d18 <_strtol_r+0xa4>
   11d08:	4662      	mov	r2, ip
   11d0a:	4011      	ands	r1, r2
   11d0c:	d017      	beq.n	11d3e <_strtol_r+0xca>
   11d0e:	2237      	movs	r2, #55	; 0x37
   11d10:	2901      	cmp	r1, #1
   11d12:	d000      	beq.n	11d16 <_strtol_r+0xa2>
   11d14:	3220      	adds	r2, #32
   11d16:	1aa4      	subs	r4, r4, r2
   11d18:	42a6      	cmp	r6, r4
   11d1a:	dd10      	ble.n	11d3e <_strtol_r+0xca>
   11d1c:	1c5a      	adds	r2, r3, #1
   11d1e:	d00b      	beq.n	11d38 <_strtol_r+0xc4>
   11d20:	42b8      	cmp	r0, r7
   11d22:	d807      	bhi.n	11d34 <_strtol_r+0xc0>
   11d24:	d102      	bne.n	11d2c <_strtol_r+0xb8>
   11d26:	9b04      	ldr	r3, [sp, #16]
   11d28:	429c      	cmp	r4, r3
   11d2a:	dc03      	bgt.n	11d34 <_strtol_r+0xc0>
   11d2c:	4370      	muls	r0, r6
   11d2e:	2301      	movs	r3, #1
   11d30:	1820      	adds	r0, r4, r0
   11d32:	e001      	b.n	11d38 <_strtol_r+0xc4>
   11d34:	2301      	movs	r3, #1
   11d36:	425b      	negs	r3, r3
   11d38:	782c      	ldrb	r4, [r5, #0]
   11d3a:	3501      	adds	r5, #1
   11d3c:	e7dc      	b.n	11cf8 <_strtol_r+0x84>
   11d3e:	1c5a      	adds	r2, r3, #1
   11d40:	d10b      	bne.n	11d5a <_strtol_r+0xe6>
   11d42:	9800      	ldr	r0, [sp, #0]
   11d44:	9a05      	ldr	r2, [sp, #20]
   11d46:	1e43      	subs	r3, r0, #1
   11d48:	4198      	sbcs	r0, r3
   11d4a:	4b12      	ldr	r3, [pc, #72]	; (11d94 <_strtol_r+0x120>)
   11d4c:	18c0      	adds	r0, r0, r3
   11d4e:	2322      	movs	r3, #34	; 0x22
   11d50:	6013      	str	r3, [r2, #0]
   11d52:	9b01      	ldr	r3, [sp, #4]
   11d54:	2b00      	cmp	r3, #0
   11d56:	d10a      	bne.n	11d6e <_strtol_r+0xfa>
   11d58:	e017      	b.n	11d8a <_strtol_r+0x116>
   11d5a:	9a00      	ldr	r2, [sp, #0]
   11d5c:	2a00      	cmp	r2, #0
   11d5e:	d000      	beq.n	11d62 <_strtol_r+0xee>
   11d60:	4240      	negs	r0, r0
   11d62:	9a01      	ldr	r2, [sp, #4]
   11d64:	2a00      	cmp	r2, #0
   11d66:	d010      	beq.n	11d8a <_strtol_r+0x116>
   11d68:	9a03      	ldr	r2, [sp, #12]
   11d6a:	2b00      	cmp	r3, #0
   11d6c:	d000      	beq.n	11d70 <_strtol_r+0xfc>
   11d6e:	1e6a      	subs	r2, r5, #1
   11d70:	9b01      	ldr	r3, [sp, #4]
   11d72:	601a      	str	r2, [r3, #0]
   11d74:	e009      	b.n	11d8a <_strtol_r+0x116>
   11d76:	2430      	movs	r4, #48	; 0x30
   11d78:	2e00      	cmp	r6, #0
   11d7a:	d1aa      	bne.n	11cd2 <_strtol_r+0x5e>
   11d7c:	2608      	movs	r6, #8
   11d7e:	e7a8      	b.n	11cd2 <_strtol_r+0x5e>
   11d80:	260a      	movs	r6, #10
   11d82:	e7a6      	b.n	11cd2 <_strtol_r+0x5e>
   11d84:	2c30      	cmp	r4, #48	; 0x30
   11d86:	d09c      	beq.n	11cc2 <_strtol_r+0x4e>
   11d88:	e7a3      	b.n	11cd2 <_strtol_r+0x5e>
   11d8a:	b007      	add	sp, #28
   11d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d8e:	46c0      	nop			; (mov r8, r8)
   11d90:	20000080 	.word	0x20000080
   11d94:	7fffffff 	.word	0x7fffffff

00011d98 <strtol>:
   11d98:	b510      	push	{r4, lr}
   11d9a:	0013      	movs	r3, r2
   11d9c:	000a      	movs	r2, r1
   11d9e:	0001      	movs	r1, r0
   11da0:	4802      	ldr	r0, [pc, #8]	; (11dac <strtol+0x14>)
   11da2:	6800      	ldr	r0, [r0, #0]
   11da4:	f7ff ff66 	bl	11c74 <_strtol_r>
   11da8:	bd10      	pop	{r4, pc}
   11daa:	46c0      	nop			; (mov r8, r8)
   11dac:	2000007c 	.word	0x2000007c

00011db0 <__swbuf_r>:
   11db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11db2:	0005      	movs	r5, r0
   11db4:	000f      	movs	r7, r1
   11db6:	0014      	movs	r4, r2
   11db8:	2800      	cmp	r0, #0
   11dba:	d004      	beq.n	11dc6 <__swbuf_r+0x16>
   11dbc:	6983      	ldr	r3, [r0, #24]
   11dbe:	2b00      	cmp	r3, #0
   11dc0:	d101      	bne.n	11dc6 <__swbuf_r+0x16>
   11dc2:	f000 f9b7 	bl	12134 <__sinit>
   11dc6:	4b23      	ldr	r3, [pc, #140]	; (11e54 <__swbuf_r+0xa4>)
   11dc8:	429c      	cmp	r4, r3
   11dca:	d101      	bne.n	11dd0 <__swbuf_r+0x20>
   11dcc:	686c      	ldr	r4, [r5, #4]
   11dce:	e008      	b.n	11de2 <__swbuf_r+0x32>
   11dd0:	4b21      	ldr	r3, [pc, #132]	; (11e58 <__swbuf_r+0xa8>)
   11dd2:	429c      	cmp	r4, r3
   11dd4:	d101      	bne.n	11dda <__swbuf_r+0x2a>
   11dd6:	68ac      	ldr	r4, [r5, #8]
   11dd8:	e003      	b.n	11de2 <__swbuf_r+0x32>
   11dda:	4b20      	ldr	r3, [pc, #128]	; (11e5c <__swbuf_r+0xac>)
   11ddc:	429c      	cmp	r4, r3
   11dde:	d100      	bne.n	11de2 <__swbuf_r+0x32>
   11de0:	68ec      	ldr	r4, [r5, #12]
   11de2:	69a3      	ldr	r3, [r4, #24]
   11de4:	60a3      	str	r3, [r4, #8]
   11de6:	89a3      	ldrh	r3, [r4, #12]
   11de8:	071b      	lsls	r3, r3, #28
   11dea:	d50a      	bpl.n	11e02 <__swbuf_r+0x52>
   11dec:	6923      	ldr	r3, [r4, #16]
   11dee:	2b00      	cmp	r3, #0
   11df0:	d007      	beq.n	11e02 <__swbuf_r+0x52>
   11df2:	6823      	ldr	r3, [r4, #0]
   11df4:	6922      	ldr	r2, [r4, #16]
   11df6:	b2fe      	uxtb	r6, r7
   11df8:	1a98      	subs	r0, r3, r2
   11dfa:	6963      	ldr	r3, [r4, #20]
   11dfc:	4298      	cmp	r0, r3
   11dfe:	db0f      	blt.n	11e20 <__swbuf_r+0x70>
   11e00:	e008      	b.n	11e14 <__swbuf_r+0x64>
   11e02:	0021      	movs	r1, r4
   11e04:	0028      	movs	r0, r5
   11e06:	f000 f82b 	bl	11e60 <__swsetup_r>
   11e0a:	2800      	cmp	r0, #0
   11e0c:	d0f1      	beq.n	11df2 <__swbuf_r+0x42>
   11e0e:	2001      	movs	r0, #1
   11e10:	4240      	negs	r0, r0
   11e12:	e01d      	b.n	11e50 <__swbuf_r+0xa0>
   11e14:	0021      	movs	r1, r4
   11e16:	0028      	movs	r0, r5
   11e18:	f000 f91e 	bl	12058 <_fflush_r>
   11e1c:	2800      	cmp	r0, #0
   11e1e:	d1f6      	bne.n	11e0e <__swbuf_r+0x5e>
   11e20:	68a3      	ldr	r3, [r4, #8]
   11e22:	3001      	adds	r0, #1
   11e24:	3b01      	subs	r3, #1
   11e26:	60a3      	str	r3, [r4, #8]
   11e28:	6823      	ldr	r3, [r4, #0]
   11e2a:	1c5a      	adds	r2, r3, #1
   11e2c:	6022      	str	r2, [r4, #0]
   11e2e:	701f      	strb	r7, [r3, #0]
   11e30:	6963      	ldr	r3, [r4, #20]
   11e32:	4298      	cmp	r0, r3
   11e34:	d005      	beq.n	11e42 <__swbuf_r+0x92>
   11e36:	89a3      	ldrh	r3, [r4, #12]
   11e38:	0030      	movs	r0, r6
   11e3a:	07db      	lsls	r3, r3, #31
   11e3c:	d508      	bpl.n	11e50 <__swbuf_r+0xa0>
   11e3e:	2e0a      	cmp	r6, #10
   11e40:	d106      	bne.n	11e50 <__swbuf_r+0xa0>
   11e42:	0021      	movs	r1, r4
   11e44:	0028      	movs	r0, r5
   11e46:	f000 f907 	bl	12058 <_fflush_r>
   11e4a:	2800      	cmp	r0, #0
   11e4c:	d1df      	bne.n	11e0e <__swbuf_r+0x5e>
   11e4e:	0030      	movs	r0, r6
   11e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e52:	46c0      	nop			; (mov r8, r8)
   11e54:	00014b88 	.word	0x00014b88
   11e58:	00014ba8 	.word	0x00014ba8
   11e5c:	00014bc8 	.word	0x00014bc8

00011e60 <__swsetup_r>:
   11e60:	4b36      	ldr	r3, [pc, #216]	; (11f3c <__swsetup_r+0xdc>)
   11e62:	b570      	push	{r4, r5, r6, lr}
   11e64:	681d      	ldr	r5, [r3, #0]
   11e66:	0006      	movs	r6, r0
   11e68:	000c      	movs	r4, r1
   11e6a:	2d00      	cmp	r5, #0
   11e6c:	d005      	beq.n	11e7a <__swsetup_r+0x1a>
   11e6e:	69ab      	ldr	r3, [r5, #24]
   11e70:	2b00      	cmp	r3, #0
   11e72:	d102      	bne.n	11e7a <__swsetup_r+0x1a>
   11e74:	0028      	movs	r0, r5
   11e76:	f000 f95d 	bl	12134 <__sinit>
   11e7a:	4b31      	ldr	r3, [pc, #196]	; (11f40 <__swsetup_r+0xe0>)
   11e7c:	429c      	cmp	r4, r3
   11e7e:	d101      	bne.n	11e84 <__swsetup_r+0x24>
   11e80:	686c      	ldr	r4, [r5, #4]
   11e82:	e008      	b.n	11e96 <__swsetup_r+0x36>
   11e84:	4b2f      	ldr	r3, [pc, #188]	; (11f44 <__swsetup_r+0xe4>)
   11e86:	429c      	cmp	r4, r3
   11e88:	d101      	bne.n	11e8e <__swsetup_r+0x2e>
   11e8a:	68ac      	ldr	r4, [r5, #8]
   11e8c:	e003      	b.n	11e96 <__swsetup_r+0x36>
   11e8e:	4b2e      	ldr	r3, [pc, #184]	; (11f48 <__swsetup_r+0xe8>)
   11e90:	429c      	cmp	r4, r3
   11e92:	d100      	bne.n	11e96 <__swsetup_r+0x36>
   11e94:	68ec      	ldr	r4, [r5, #12]
   11e96:	220c      	movs	r2, #12
   11e98:	5ea3      	ldrsh	r3, [r4, r2]
   11e9a:	b29a      	uxth	r2, r3
   11e9c:	0711      	lsls	r1, r2, #28
   11e9e:	d423      	bmi.n	11ee8 <__swsetup_r+0x88>
   11ea0:	06d1      	lsls	r1, r2, #27
   11ea2:	d407      	bmi.n	11eb4 <__swsetup_r+0x54>
   11ea4:	2209      	movs	r2, #9
   11ea6:	2001      	movs	r0, #1
   11ea8:	6032      	str	r2, [r6, #0]
   11eaa:	3237      	adds	r2, #55	; 0x37
   11eac:	4313      	orrs	r3, r2
   11eae:	81a3      	strh	r3, [r4, #12]
   11eb0:	4240      	negs	r0, r0
   11eb2:	e042      	b.n	11f3a <__swsetup_r+0xda>
   11eb4:	0753      	lsls	r3, r2, #29
   11eb6:	d513      	bpl.n	11ee0 <__swsetup_r+0x80>
   11eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11eba:	2900      	cmp	r1, #0
   11ebc:	d008      	beq.n	11ed0 <__swsetup_r+0x70>
   11ebe:	0023      	movs	r3, r4
   11ec0:	3344      	adds	r3, #68	; 0x44
   11ec2:	4299      	cmp	r1, r3
   11ec4:	d002      	beq.n	11ecc <__swsetup_r+0x6c>
   11ec6:	0030      	movs	r0, r6
   11ec8:	f7ff fc4c 	bl	11764 <_free_r>
   11ecc:	2300      	movs	r3, #0
   11ece:	6363      	str	r3, [r4, #52]	; 0x34
   11ed0:	2224      	movs	r2, #36	; 0x24
   11ed2:	89a3      	ldrh	r3, [r4, #12]
   11ed4:	4393      	bics	r3, r2
   11ed6:	81a3      	strh	r3, [r4, #12]
   11ed8:	2300      	movs	r3, #0
   11eda:	6063      	str	r3, [r4, #4]
   11edc:	6923      	ldr	r3, [r4, #16]
   11ede:	6023      	str	r3, [r4, #0]
   11ee0:	2208      	movs	r2, #8
   11ee2:	89a3      	ldrh	r3, [r4, #12]
   11ee4:	4313      	orrs	r3, r2
   11ee6:	81a3      	strh	r3, [r4, #12]
   11ee8:	6923      	ldr	r3, [r4, #16]
   11eea:	2b00      	cmp	r3, #0
   11eec:	d10b      	bne.n	11f06 <__swsetup_r+0xa6>
   11eee:	23a0      	movs	r3, #160	; 0xa0
   11ef0:	89a2      	ldrh	r2, [r4, #12]
   11ef2:	009b      	lsls	r3, r3, #2
   11ef4:	4013      	ands	r3, r2
   11ef6:	2280      	movs	r2, #128	; 0x80
   11ef8:	0092      	lsls	r2, r2, #2
   11efa:	4293      	cmp	r3, r2
   11efc:	d003      	beq.n	11f06 <__swsetup_r+0xa6>
   11efe:	0021      	movs	r1, r4
   11f00:	0030      	movs	r0, r6
   11f02:	f000 f9d1 	bl	122a8 <__smakebuf_r>
   11f06:	2301      	movs	r3, #1
   11f08:	89a2      	ldrh	r2, [r4, #12]
   11f0a:	4013      	ands	r3, r2
   11f0c:	d005      	beq.n	11f1a <__swsetup_r+0xba>
   11f0e:	2300      	movs	r3, #0
   11f10:	60a3      	str	r3, [r4, #8]
   11f12:	6963      	ldr	r3, [r4, #20]
   11f14:	425b      	negs	r3, r3
   11f16:	61a3      	str	r3, [r4, #24]
   11f18:	e003      	b.n	11f22 <__swsetup_r+0xc2>
   11f1a:	0792      	lsls	r2, r2, #30
   11f1c:	d400      	bmi.n	11f20 <__swsetup_r+0xc0>
   11f1e:	6963      	ldr	r3, [r4, #20]
   11f20:	60a3      	str	r3, [r4, #8]
   11f22:	2000      	movs	r0, #0
   11f24:	6923      	ldr	r3, [r4, #16]
   11f26:	4283      	cmp	r3, r0
   11f28:	d107      	bne.n	11f3a <__swsetup_r+0xda>
   11f2a:	220c      	movs	r2, #12
   11f2c:	5ea3      	ldrsh	r3, [r4, r2]
   11f2e:	061a      	lsls	r2, r3, #24
   11f30:	d503      	bpl.n	11f3a <__swsetup_r+0xda>
   11f32:	2240      	movs	r2, #64	; 0x40
   11f34:	4313      	orrs	r3, r2
   11f36:	81a3      	strh	r3, [r4, #12]
   11f38:	3801      	subs	r0, #1
   11f3a:	bd70      	pop	{r4, r5, r6, pc}
   11f3c:	2000007c 	.word	0x2000007c
   11f40:	00014b88 	.word	0x00014b88
   11f44:	00014ba8 	.word	0x00014ba8
   11f48:	00014bc8 	.word	0x00014bc8

00011f4c <__sflush_r>:
   11f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11f4e:	898a      	ldrh	r2, [r1, #12]
   11f50:	0005      	movs	r5, r0
   11f52:	000c      	movs	r4, r1
   11f54:	0713      	lsls	r3, r2, #28
   11f56:	d45a      	bmi.n	1200e <__sflush_r+0xc2>
   11f58:	684b      	ldr	r3, [r1, #4]
   11f5a:	2b00      	cmp	r3, #0
   11f5c:	dc02      	bgt.n	11f64 <__sflush_r+0x18>
   11f5e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   11f60:	2b00      	cmp	r3, #0
   11f62:	dd19      	ble.n	11f98 <__sflush_r+0x4c>
   11f64:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   11f66:	2f00      	cmp	r7, #0
   11f68:	d016      	beq.n	11f98 <__sflush_r+0x4c>
   11f6a:	2300      	movs	r3, #0
   11f6c:	682e      	ldr	r6, [r5, #0]
   11f6e:	602b      	str	r3, [r5, #0]
   11f70:	2380      	movs	r3, #128	; 0x80
   11f72:	015b      	lsls	r3, r3, #5
   11f74:	401a      	ands	r2, r3
   11f76:	d001      	beq.n	11f7c <__sflush_r+0x30>
   11f78:	6d60      	ldr	r0, [r4, #84]	; 0x54
   11f7a:	e014      	b.n	11fa6 <__sflush_r+0x5a>
   11f7c:	2301      	movs	r3, #1
   11f7e:	6a21      	ldr	r1, [r4, #32]
   11f80:	0028      	movs	r0, r5
   11f82:	47b8      	blx	r7
   11f84:	1c43      	adds	r3, r0, #1
   11f86:	d10e      	bne.n	11fa6 <__sflush_r+0x5a>
   11f88:	682b      	ldr	r3, [r5, #0]
   11f8a:	2b00      	cmp	r3, #0
   11f8c:	d00b      	beq.n	11fa6 <__sflush_r+0x5a>
   11f8e:	2b1d      	cmp	r3, #29
   11f90:	d001      	beq.n	11f96 <__sflush_r+0x4a>
   11f92:	2b16      	cmp	r3, #22
   11f94:	d102      	bne.n	11f9c <__sflush_r+0x50>
   11f96:	602e      	str	r6, [r5, #0]
   11f98:	2000      	movs	r0, #0
   11f9a:	e05a      	b.n	12052 <__sflush_r+0x106>
   11f9c:	2240      	movs	r2, #64	; 0x40
   11f9e:	89a3      	ldrh	r3, [r4, #12]
   11fa0:	4313      	orrs	r3, r2
   11fa2:	81a3      	strh	r3, [r4, #12]
   11fa4:	e055      	b.n	12052 <__sflush_r+0x106>
   11fa6:	89a3      	ldrh	r3, [r4, #12]
   11fa8:	075b      	lsls	r3, r3, #29
   11faa:	d506      	bpl.n	11fba <__sflush_r+0x6e>
   11fac:	6863      	ldr	r3, [r4, #4]
   11fae:	1ac0      	subs	r0, r0, r3
   11fb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11fb2:	2b00      	cmp	r3, #0
   11fb4:	d001      	beq.n	11fba <__sflush_r+0x6e>
   11fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   11fb8:	1ac0      	subs	r0, r0, r3
   11fba:	2300      	movs	r3, #0
   11fbc:	0002      	movs	r2, r0
   11fbe:	6a21      	ldr	r1, [r4, #32]
   11fc0:	0028      	movs	r0, r5
   11fc2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   11fc4:	47b8      	blx	r7
   11fc6:	89a3      	ldrh	r3, [r4, #12]
   11fc8:	1c42      	adds	r2, r0, #1
   11fca:	d106      	bne.n	11fda <__sflush_r+0x8e>
   11fcc:	6829      	ldr	r1, [r5, #0]
   11fce:	291d      	cmp	r1, #29
   11fd0:	d83a      	bhi.n	12048 <__sflush_r+0xfc>
   11fd2:	4a20      	ldr	r2, [pc, #128]	; (12054 <__sflush_r+0x108>)
   11fd4:	40ca      	lsrs	r2, r1
   11fd6:	07d2      	lsls	r2, r2, #31
   11fd8:	d536      	bpl.n	12048 <__sflush_r+0xfc>
   11fda:	2200      	movs	r2, #0
   11fdc:	6062      	str	r2, [r4, #4]
   11fde:	6922      	ldr	r2, [r4, #16]
   11fe0:	6022      	str	r2, [r4, #0]
   11fe2:	04db      	lsls	r3, r3, #19
   11fe4:	d505      	bpl.n	11ff2 <__sflush_r+0xa6>
   11fe6:	1c43      	adds	r3, r0, #1
   11fe8:	d102      	bne.n	11ff0 <__sflush_r+0xa4>
   11fea:	682b      	ldr	r3, [r5, #0]
   11fec:	2b00      	cmp	r3, #0
   11fee:	d100      	bne.n	11ff2 <__sflush_r+0xa6>
   11ff0:	6560      	str	r0, [r4, #84]	; 0x54
   11ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11ff4:	602e      	str	r6, [r5, #0]
   11ff6:	2900      	cmp	r1, #0
   11ff8:	d0ce      	beq.n	11f98 <__sflush_r+0x4c>
   11ffa:	0023      	movs	r3, r4
   11ffc:	3344      	adds	r3, #68	; 0x44
   11ffe:	4299      	cmp	r1, r3
   12000:	d002      	beq.n	12008 <__sflush_r+0xbc>
   12002:	0028      	movs	r0, r5
   12004:	f7ff fbae 	bl	11764 <_free_r>
   12008:	2000      	movs	r0, #0
   1200a:	6360      	str	r0, [r4, #52]	; 0x34
   1200c:	e021      	b.n	12052 <__sflush_r+0x106>
   1200e:	690f      	ldr	r7, [r1, #16]
   12010:	2f00      	cmp	r7, #0
   12012:	d0c1      	beq.n	11f98 <__sflush_r+0x4c>
   12014:	680b      	ldr	r3, [r1, #0]
   12016:	600f      	str	r7, [r1, #0]
   12018:	1bdb      	subs	r3, r3, r7
   1201a:	9301      	str	r3, [sp, #4]
   1201c:	2300      	movs	r3, #0
   1201e:	0792      	lsls	r2, r2, #30
   12020:	d100      	bne.n	12024 <__sflush_r+0xd8>
   12022:	694b      	ldr	r3, [r1, #20]
   12024:	60a3      	str	r3, [r4, #8]
   12026:	e003      	b.n	12030 <__sflush_r+0xe4>
   12028:	9b01      	ldr	r3, [sp, #4]
   1202a:	183f      	adds	r7, r7, r0
   1202c:	1a1b      	subs	r3, r3, r0
   1202e:	9301      	str	r3, [sp, #4]
   12030:	9b01      	ldr	r3, [sp, #4]
   12032:	2b00      	cmp	r3, #0
   12034:	ddb0      	ble.n	11f98 <__sflush_r+0x4c>
   12036:	9b01      	ldr	r3, [sp, #4]
   12038:	003a      	movs	r2, r7
   1203a:	6a21      	ldr	r1, [r4, #32]
   1203c:	0028      	movs	r0, r5
   1203e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   12040:	47b0      	blx	r6
   12042:	2800      	cmp	r0, #0
   12044:	dcf0      	bgt.n	12028 <__sflush_r+0xdc>
   12046:	89a3      	ldrh	r3, [r4, #12]
   12048:	2240      	movs	r2, #64	; 0x40
   1204a:	2001      	movs	r0, #1
   1204c:	4313      	orrs	r3, r2
   1204e:	81a3      	strh	r3, [r4, #12]
   12050:	4240      	negs	r0, r0
   12052:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12054:	20400001 	.word	0x20400001

00012058 <_fflush_r>:
   12058:	690b      	ldr	r3, [r1, #16]
   1205a:	b570      	push	{r4, r5, r6, lr}
   1205c:	0005      	movs	r5, r0
   1205e:	000c      	movs	r4, r1
   12060:	2b00      	cmp	r3, #0
   12062:	d101      	bne.n	12068 <_fflush_r+0x10>
   12064:	2000      	movs	r0, #0
   12066:	e01c      	b.n	120a2 <_fflush_r+0x4a>
   12068:	2800      	cmp	r0, #0
   1206a:	d004      	beq.n	12076 <_fflush_r+0x1e>
   1206c:	6983      	ldr	r3, [r0, #24]
   1206e:	2b00      	cmp	r3, #0
   12070:	d101      	bne.n	12076 <_fflush_r+0x1e>
   12072:	f000 f85f 	bl	12134 <__sinit>
   12076:	4b0b      	ldr	r3, [pc, #44]	; (120a4 <_fflush_r+0x4c>)
   12078:	429c      	cmp	r4, r3
   1207a:	d101      	bne.n	12080 <_fflush_r+0x28>
   1207c:	686c      	ldr	r4, [r5, #4]
   1207e:	e008      	b.n	12092 <_fflush_r+0x3a>
   12080:	4b09      	ldr	r3, [pc, #36]	; (120a8 <_fflush_r+0x50>)
   12082:	429c      	cmp	r4, r3
   12084:	d101      	bne.n	1208a <_fflush_r+0x32>
   12086:	68ac      	ldr	r4, [r5, #8]
   12088:	e003      	b.n	12092 <_fflush_r+0x3a>
   1208a:	4b08      	ldr	r3, [pc, #32]	; (120ac <_fflush_r+0x54>)
   1208c:	429c      	cmp	r4, r3
   1208e:	d100      	bne.n	12092 <_fflush_r+0x3a>
   12090:	68ec      	ldr	r4, [r5, #12]
   12092:	220c      	movs	r2, #12
   12094:	5ea3      	ldrsh	r3, [r4, r2]
   12096:	2b00      	cmp	r3, #0
   12098:	d0e4      	beq.n	12064 <_fflush_r+0xc>
   1209a:	0021      	movs	r1, r4
   1209c:	0028      	movs	r0, r5
   1209e:	f7ff ff55 	bl	11f4c <__sflush_r>
   120a2:	bd70      	pop	{r4, r5, r6, pc}
   120a4:	00014b88 	.word	0x00014b88
   120a8:	00014ba8 	.word	0x00014ba8
   120ac:	00014bc8 	.word	0x00014bc8

000120b0 <_cleanup_r>:
   120b0:	b510      	push	{r4, lr}
   120b2:	4902      	ldr	r1, [pc, #8]	; (120bc <_cleanup_r+0xc>)
   120b4:	f000 f8b0 	bl	12218 <_fwalk_reent>
   120b8:	bd10      	pop	{r4, pc}
   120ba:	46c0      	nop			; (mov r8, r8)
   120bc:	00012059 	.word	0x00012059

000120c0 <std.isra.0>:
   120c0:	2300      	movs	r3, #0
   120c2:	b510      	push	{r4, lr}
   120c4:	0004      	movs	r4, r0
   120c6:	6003      	str	r3, [r0, #0]
   120c8:	6043      	str	r3, [r0, #4]
   120ca:	6083      	str	r3, [r0, #8]
   120cc:	8181      	strh	r1, [r0, #12]
   120ce:	6643      	str	r3, [r0, #100]	; 0x64
   120d0:	81c2      	strh	r2, [r0, #14]
   120d2:	6103      	str	r3, [r0, #16]
   120d4:	6143      	str	r3, [r0, #20]
   120d6:	6183      	str	r3, [r0, #24]
   120d8:	0019      	movs	r1, r3
   120da:	2208      	movs	r2, #8
   120dc:	305c      	adds	r0, #92	; 0x5c
   120de:	f7ff fb39 	bl	11754 <memset>
   120e2:	4b05      	ldr	r3, [pc, #20]	; (120f8 <std.isra.0+0x38>)
   120e4:	6224      	str	r4, [r4, #32]
   120e6:	6263      	str	r3, [r4, #36]	; 0x24
   120e8:	4b04      	ldr	r3, [pc, #16]	; (120fc <std.isra.0+0x3c>)
   120ea:	62a3      	str	r3, [r4, #40]	; 0x28
   120ec:	4b04      	ldr	r3, [pc, #16]	; (12100 <std.isra.0+0x40>)
   120ee:	62e3      	str	r3, [r4, #44]	; 0x2c
   120f0:	4b04      	ldr	r3, [pc, #16]	; (12104 <std.isra.0+0x44>)
   120f2:	6323      	str	r3, [r4, #48]	; 0x30
   120f4:	bd10      	pop	{r4, pc}
   120f6:	46c0      	nop			; (mov r8, r8)
   120f8:	00012bf9 	.word	0x00012bf9
   120fc:	00012c21 	.word	0x00012c21
   12100:	00012c59 	.word	0x00012c59
   12104:	00012c85 	.word	0x00012c85

00012108 <__sfmoreglue>:
   12108:	b570      	push	{r4, r5, r6, lr}
   1210a:	2568      	movs	r5, #104	; 0x68
   1210c:	1e4b      	subs	r3, r1, #1
   1210e:	435d      	muls	r5, r3
   12110:	000e      	movs	r6, r1
   12112:	0029      	movs	r1, r5
   12114:	3174      	adds	r1, #116	; 0x74
   12116:	f7ff fb6b 	bl	117f0 <_malloc_r>
   1211a:	1e04      	subs	r4, r0, #0
   1211c:	d008      	beq.n	12130 <__sfmoreglue+0x28>
   1211e:	2100      	movs	r1, #0
   12120:	002a      	movs	r2, r5
   12122:	6001      	str	r1, [r0, #0]
   12124:	6046      	str	r6, [r0, #4]
   12126:	300c      	adds	r0, #12
   12128:	60a0      	str	r0, [r4, #8]
   1212a:	3268      	adds	r2, #104	; 0x68
   1212c:	f7ff fb12 	bl	11754 <memset>
   12130:	0020      	movs	r0, r4
   12132:	bd70      	pop	{r4, r5, r6, pc}

00012134 <__sinit>:
   12134:	6983      	ldr	r3, [r0, #24]
   12136:	b513      	push	{r0, r1, r4, lr}
   12138:	0004      	movs	r4, r0
   1213a:	2b00      	cmp	r3, #0
   1213c:	d128      	bne.n	12190 <__sinit+0x5c>
   1213e:	6483      	str	r3, [r0, #72]	; 0x48
   12140:	64c3      	str	r3, [r0, #76]	; 0x4c
   12142:	6503      	str	r3, [r0, #80]	; 0x50
   12144:	4b13      	ldr	r3, [pc, #76]	; (12194 <__sinit+0x60>)
   12146:	4a14      	ldr	r2, [pc, #80]	; (12198 <__sinit+0x64>)
   12148:	681b      	ldr	r3, [r3, #0]
   1214a:	6282      	str	r2, [r0, #40]	; 0x28
   1214c:	9301      	str	r3, [sp, #4]
   1214e:	4298      	cmp	r0, r3
   12150:	d101      	bne.n	12156 <__sinit+0x22>
   12152:	2301      	movs	r3, #1
   12154:	6183      	str	r3, [r0, #24]
   12156:	0020      	movs	r0, r4
   12158:	f000 f820 	bl	1219c <__sfp>
   1215c:	6060      	str	r0, [r4, #4]
   1215e:	0020      	movs	r0, r4
   12160:	f000 f81c 	bl	1219c <__sfp>
   12164:	60a0      	str	r0, [r4, #8]
   12166:	0020      	movs	r0, r4
   12168:	f000 f818 	bl	1219c <__sfp>
   1216c:	2200      	movs	r2, #0
   1216e:	60e0      	str	r0, [r4, #12]
   12170:	2104      	movs	r1, #4
   12172:	6860      	ldr	r0, [r4, #4]
   12174:	f7ff ffa4 	bl	120c0 <std.isra.0>
   12178:	2201      	movs	r2, #1
   1217a:	2109      	movs	r1, #9
   1217c:	68a0      	ldr	r0, [r4, #8]
   1217e:	f7ff ff9f 	bl	120c0 <std.isra.0>
   12182:	2202      	movs	r2, #2
   12184:	2112      	movs	r1, #18
   12186:	68e0      	ldr	r0, [r4, #12]
   12188:	f7ff ff9a 	bl	120c0 <std.isra.0>
   1218c:	2301      	movs	r3, #1
   1218e:	61a3      	str	r3, [r4, #24]
   12190:	bd13      	pop	{r0, r1, r4, pc}
   12192:	46c0      	nop			; (mov r8, r8)
   12194:	00014a80 	.word	0x00014a80
   12198:	000120b1 	.word	0x000120b1

0001219c <__sfp>:
   1219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1219e:	4b1d      	ldr	r3, [pc, #116]	; (12214 <__sfp+0x78>)
   121a0:	0006      	movs	r6, r0
   121a2:	681d      	ldr	r5, [r3, #0]
   121a4:	69ab      	ldr	r3, [r5, #24]
   121a6:	2b00      	cmp	r3, #0
   121a8:	d102      	bne.n	121b0 <__sfp+0x14>
   121aa:	0028      	movs	r0, r5
   121ac:	f7ff ffc2 	bl	12134 <__sinit>
   121b0:	3548      	adds	r5, #72	; 0x48
   121b2:	68ac      	ldr	r4, [r5, #8]
   121b4:	686b      	ldr	r3, [r5, #4]
   121b6:	3b01      	subs	r3, #1
   121b8:	d405      	bmi.n	121c6 <__sfp+0x2a>
   121ba:	220c      	movs	r2, #12
   121bc:	5ea7      	ldrsh	r7, [r4, r2]
   121be:	2f00      	cmp	r7, #0
   121c0:	d010      	beq.n	121e4 <__sfp+0x48>
   121c2:	3468      	adds	r4, #104	; 0x68
   121c4:	e7f7      	b.n	121b6 <__sfp+0x1a>
   121c6:	682b      	ldr	r3, [r5, #0]
   121c8:	2b00      	cmp	r3, #0
   121ca:	d001      	beq.n	121d0 <__sfp+0x34>
   121cc:	682d      	ldr	r5, [r5, #0]
   121ce:	e7f0      	b.n	121b2 <__sfp+0x16>
   121d0:	2104      	movs	r1, #4
   121d2:	0030      	movs	r0, r6
   121d4:	f7ff ff98 	bl	12108 <__sfmoreglue>
   121d8:	6028      	str	r0, [r5, #0]
   121da:	2800      	cmp	r0, #0
   121dc:	d1f6      	bne.n	121cc <__sfp+0x30>
   121de:	230c      	movs	r3, #12
   121e0:	6033      	str	r3, [r6, #0]
   121e2:	e016      	b.n	12212 <__sfp+0x76>
   121e4:	2301      	movs	r3, #1
   121e6:	0020      	movs	r0, r4
   121e8:	425b      	negs	r3, r3
   121ea:	81e3      	strh	r3, [r4, #14]
   121ec:	3302      	adds	r3, #2
   121ee:	81a3      	strh	r3, [r4, #12]
   121f0:	6667      	str	r7, [r4, #100]	; 0x64
   121f2:	6027      	str	r7, [r4, #0]
   121f4:	60a7      	str	r7, [r4, #8]
   121f6:	6067      	str	r7, [r4, #4]
   121f8:	6127      	str	r7, [r4, #16]
   121fa:	6167      	str	r7, [r4, #20]
   121fc:	61a7      	str	r7, [r4, #24]
   121fe:	305c      	adds	r0, #92	; 0x5c
   12200:	2208      	movs	r2, #8
   12202:	0039      	movs	r1, r7
   12204:	f7ff faa6 	bl	11754 <memset>
   12208:	0020      	movs	r0, r4
   1220a:	6367      	str	r7, [r4, #52]	; 0x34
   1220c:	63a7      	str	r7, [r4, #56]	; 0x38
   1220e:	64a7      	str	r7, [r4, #72]	; 0x48
   12210:	64e7      	str	r7, [r4, #76]	; 0x4c
   12212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12214:	00014a80 	.word	0x00014a80

00012218 <_fwalk_reent>:
   12218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1221a:	0004      	movs	r4, r0
   1221c:	0007      	movs	r7, r0
   1221e:	2600      	movs	r6, #0
   12220:	9101      	str	r1, [sp, #4]
   12222:	3448      	adds	r4, #72	; 0x48
   12224:	2c00      	cmp	r4, #0
   12226:	d016      	beq.n	12256 <_fwalk_reent+0x3e>
   12228:	6863      	ldr	r3, [r4, #4]
   1222a:	68a5      	ldr	r5, [r4, #8]
   1222c:	9300      	str	r3, [sp, #0]
   1222e:	9b00      	ldr	r3, [sp, #0]
   12230:	3b01      	subs	r3, #1
   12232:	9300      	str	r3, [sp, #0]
   12234:	d40d      	bmi.n	12252 <_fwalk_reent+0x3a>
   12236:	89ab      	ldrh	r3, [r5, #12]
   12238:	2b01      	cmp	r3, #1
   1223a:	d908      	bls.n	1224e <_fwalk_reent+0x36>
   1223c:	220e      	movs	r2, #14
   1223e:	5eab      	ldrsh	r3, [r5, r2]
   12240:	3301      	adds	r3, #1
   12242:	d004      	beq.n	1224e <_fwalk_reent+0x36>
   12244:	0029      	movs	r1, r5
   12246:	0038      	movs	r0, r7
   12248:	9b01      	ldr	r3, [sp, #4]
   1224a:	4798      	blx	r3
   1224c:	4306      	orrs	r6, r0
   1224e:	3568      	adds	r5, #104	; 0x68
   12250:	e7ed      	b.n	1222e <_fwalk_reent+0x16>
   12252:	6824      	ldr	r4, [r4, #0]
   12254:	e7e6      	b.n	12224 <_fwalk_reent+0xc>
   12256:	0030      	movs	r0, r6
   12258:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0001225c <__swhatbuf_r>:
   1225c:	b570      	push	{r4, r5, r6, lr}
   1225e:	000e      	movs	r6, r1
   12260:	001d      	movs	r5, r3
   12262:	230e      	movs	r3, #14
   12264:	5ec9      	ldrsh	r1, [r1, r3]
   12266:	b090      	sub	sp, #64	; 0x40
   12268:	0014      	movs	r4, r2
   1226a:	2900      	cmp	r1, #0
   1226c:	da06      	bge.n	1227c <__swhatbuf_r+0x20>
   1226e:	2300      	movs	r3, #0
   12270:	602b      	str	r3, [r5, #0]
   12272:	89b3      	ldrh	r3, [r6, #12]
   12274:	061b      	lsls	r3, r3, #24
   12276:	d50f      	bpl.n	12298 <__swhatbuf_r+0x3c>
   12278:	2340      	movs	r3, #64	; 0x40
   1227a:	e00f      	b.n	1229c <__swhatbuf_r+0x40>
   1227c:	aa01      	add	r2, sp, #4
   1227e:	f000 fd2d 	bl	12cdc <_fstat_r>
   12282:	2800      	cmp	r0, #0
   12284:	dbf3      	blt.n	1226e <__swhatbuf_r+0x12>
   12286:	23f0      	movs	r3, #240	; 0xf0
   12288:	9a02      	ldr	r2, [sp, #8]
   1228a:	021b      	lsls	r3, r3, #8
   1228c:	4013      	ands	r3, r2
   1228e:	4a05      	ldr	r2, [pc, #20]	; (122a4 <__swhatbuf_r+0x48>)
   12290:	189b      	adds	r3, r3, r2
   12292:	425a      	negs	r2, r3
   12294:	4153      	adcs	r3, r2
   12296:	602b      	str	r3, [r5, #0]
   12298:	2380      	movs	r3, #128	; 0x80
   1229a:	00db      	lsls	r3, r3, #3
   1229c:	2000      	movs	r0, #0
   1229e:	6023      	str	r3, [r4, #0]
   122a0:	b010      	add	sp, #64	; 0x40
   122a2:	bd70      	pop	{r4, r5, r6, pc}
   122a4:	ffffe000 	.word	0xffffe000

000122a8 <__smakebuf_r>:
   122a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   122aa:	2602      	movs	r6, #2
   122ac:	898b      	ldrh	r3, [r1, #12]
   122ae:	0005      	movs	r5, r0
   122b0:	000c      	movs	r4, r1
   122b2:	4233      	tst	r3, r6
   122b4:	d110      	bne.n	122d8 <__smakebuf_r+0x30>
   122b6:	ab01      	add	r3, sp, #4
   122b8:	466a      	mov	r2, sp
   122ba:	f7ff ffcf 	bl	1225c <__swhatbuf_r>
   122be:	9900      	ldr	r1, [sp, #0]
   122c0:	0007      	movs	r7, r0
   122c2:	0028      	movs	r0, r5
   122c4:	f7ff fa94 	bl	117f0 <_malloc_r>
   122c8:	2800      	cmp	r0, #0
   122ca:	d10c      	bne.n	122e6 <__smakebuf_r+0x3e>
   122cc:	220c      	movs	r2, #12
   122ce:	5ea3      	ldrsh	r3, [r4, r2]
   122d0:	059a      	lsls	r2, r3, #22
   122d2:	d423      	bmi.n	1231c <__smakebuf_r+0x74>
   122d4:	4333      	orrs	r3, r6
   122d6:	81a3      	strh	r3, [r4, #12]
   122d8:	0023      	movs	r3, r4
   122da:	3347      	adds	r3, #71	; 0x47
   122dc:	6023      	str	r3, [r4, #0]
   122de:	6123      	str	r3, [r4, #16]
   122e0:	2301      	movs	r3, #1
   122e2:	6163      	str	r3, [r4, #20]
   122e4:	e01a      	b.n	1231c <__smakebuf_r+0x74>
   122e6:	2280      	movs	r2, #128	; 0x80
   122e8:	4b0d      	ldr	r3, [pc, #52]	; (12320 <__smakebuf_r+0x78>)
   122ea:	62ab      	str	r3, [r5, #40]	; 0x28
   122ec:	89a3      	ldrh	r3, [r4, #12]
   122ee:	6020      	str	r0, [r4, #0]
   122f0:	4313      	orrs	r3, r2
   122f2:	81a3      	strh	r3, [r4, #12]
   122f4:	9b00      	ldr	r3, [sp, #0]
   122f6:	6120      	str	r0, [r4, #16]
   122f8:	6163      	str	r3, [r4, #20]
   122fa:	9b01      	ldr	r3, [sp, #4]
   122fc:	2b00      	cmp	r3, #0
   122fe:	d00a      	beq.n	12316 <__smakebuf_r+0x6e>
   12300:	230e      	movs	r3, #14
   12302:	5ee1      	ldrsh	r1, [r4, r3]
   12304:	0028      	movs	r0, r5
   12306:	f000 fcfb 	bl	12d00 <_isatty_r>
   1230a:	2800      	cmp	r0, #0
   1230c:	d003      	beq.n	12316 <__smakebuf_r+0x6e>
   1230e:	2201      	movs	r2, #1
   12310:	89a3      	ldrh	r3, [r4, #12]
   12312:	4313      	orrs	r3, r2
   12314:	81a3      	strh	r3, [r4, #12]
   12316:	89a3      	ldrh	r3, [r4, #12]
   12318:	431f      	orrs	r7, r3
   1231a:	81a7      	strh	r7, [r4, #12]
   1231c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1231e:	46c0      	nop			; (mov r8, r8)
   12320:	000120b1 	.word	0x000120b1

00012324 <__ssputs_r>:
   12324:	b5f0      	push	{r4, r5, r6, r7, lr}
   12326:	688e      	ldr	r6, [r1, #8]
   12328:	b085      	sub	sp, #20
   1232a:	0007      	movs	r7, r0
   1232c:	000c      	movs	r4, r1
   1232e:	9203      	str	r2, [sp, #12]
   12330:	9301      	str	r3, [sp, #4]
   12332:	429e      	cmp	r6, r3
   12334:	d843      	bhi.n	123be <__ssputs_r+0x9a>
   12336:	2390      	movs	r3, #144	; 0x90
   12338:	898a      	ldrh	r2, [r1, #12]
   1233a:	00db      	lsls	r3, r3, #3
   1233c:	421a      	tst	r2, r3
   1233e:	d03e      	beq.n	123be <__ssputs_r+0x9a>
   12340:	2503      	movs	r5, #3
   12342:	6909      	ldr	r1, [r1, #16]
   12344:	6823      	ldr	r3, [r4, #0]
   12346:	9801      	ldr	r0, [sp, #4]
   12348:	1a5b      	subs	r3, r3, r1
   1234a:	9302      	str	r3, [sp, #8]
   1234c:	6963      	ldr	r3, [r4, #20]
   1234e:	435d      	muls	r5, r3
   12350:	0feb      	lsrs	r3, r5, #31
   12352:	195d      	adds	r5, r3, r5
   12354:	9b02      	ldr	r3, [sp, #8]
   12356:	106d      	asrs	r5, r5, #1
   12358:	3301      	adds	r3, #1
   1235a:	181b      	adds	r3, r3, r0
   1235c:	42ab      	cmp	r3, r5
   1235e:	d900      	bls.n	12362 <__ssputs_r+0x3e>
   12360:	001d      	movs	r5, r3
   12362:	0553      	lsls	r3, r2, #21
   12364:	d510      	bpl.n	12388 <__ssputs_r+0x64>
   12366:	0029      	movs	r1, r5
   12368:	0038      	movs	r0, r7
   1236a:	f7ff fa41 	bl	117f0 <_malloc_r>
   1236e:	1e06      	subs	r6, r0, #0
   12370:	d014      	beq.n	1239c <__ssputs_r+0x78>
   12372:	9a02      	ldr	r2, [sp, #8]
   12374:	6921      	ldr	r1, [r4, #16]
   12376:	f7ff f9cf 	bl	11718 <memcpy>
   1237a:	89a2      	ldrh	r2, [r4, #12]
   1237c:	4b19      	ldr	r3, [pc, #100]	; (123e4 <__ssputs_r+0xc0>)
   1237e:	4013      	ands	r3, r2
   12380:	2280      	movs	r2, #128	; 0x80
   12382:	4313      	orrs	r3, r2
   12384:	81a3      	strh	r3, [r4, #12]
   12386:	e012      	b.n	123ae <__ssputs_r+0x8a>
   12388:	002a      	movs	r2, r5
   1238a:	0038      	movs	r0, r7
   1238c:	f000 fce9 	bl	12d62 <_realloc_r>
   12390:	1e06      	subs	r6, r0, #0
   12392:	d10c      	bne.n	123ae <__ssputs_r+0x8a>
   12394:	6921      	ldr	r1, [r4, #16]
   12396:	0038      	movs	r0, r7
   12398:	f7ff f9e4 	bl	11764 <_free_r>
   1239c:	230c      	movs	r3, #12
   1239e:	2240      	movs	r2, #64	; 0x40
   123a0:	2001      	movs	r0, #1
   123a2:	603b      	str	r3, [r7, #0]
   123a4:	89a3      	ldrh	r3, [r4, #12]
   123a6:	4240      	negs	r0, r0
   123a8:	4313      	orrs	r3, r2
   123aa:	81a3      	strh	r3, [r4, #12]
   123ac:	e017      	b.n	123de <__ssputs_r+0xba>
   123ae:	9b02      	ldr	r3, [sp, #8]
   123b0:	6126      	str	r6, [r4, #16]
   123b2:	18f6      	adds	r6, r6, r3
   123b4:	6026      	str	r6, [r4, #0]
   123b6:	6165      	str	r5, [r4, #20]
   123b8:	9e01      	ldr	r6, [sp, #4]
   123ba:	1aed      	subs	r5, r5, r3
   123bc:	60a5      	str	r5, [r4, #8]
   123be:	9b01      	ldr	r3, [sp, #4]
   123c0:	42b3      	cmp	r3, r6
   123c2:	d200      	bcs.n	123c6 <__ssputs_r+0xa2>
   123c4:	001e      	movs	r6, r3
   123c6:	0032      	movs	r2, r6
   123c8:	9903      	ldr	r1, [sp, #12]
   123ca:	6820      	ldr	r0, [r4, #0]
   123cc:	f7ff f9ad 	bl	1172a <memmove>
   123d0:	2000      	movs	r0, #0
   123d2:	68a3      	ldr	r3, [r4, #8]
   123d4:	1b9b      	subs	r3, r3, r6
   123d6:	60a3      	str	r3, [r4, #8]
   123d8:	6823      	ldr	r3, [r4, #0]
   123da:	199e      	adds	r6, r3, r6
   123dc:	6026      	str	r6, [r4, #0]
   123de:	b005      	add	sp, #20
   123e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   123e2:	46c0      	nop			; (mov r8, r8)
   123e4:	fffffb7f 	.word	0xfffffb7f

000123e8 <_svfiprintf_r>:
   123e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   123ea:	b09f      	sub	sp, #124	; 0x7c
   123ec:	9002      	str	r0, [sp, #8]
   123ee:	9305      	str	r3, [sp, #20]
   123f0:	898b      	ldrh	r3, [r1, #12]
   123f2:	000f      	movs	r7, r1
   123f4:	0016      	movs	r6, r2
   123f6:	061b      	lsls	r3, r3, #24
   123f8:	d510      	bpl.n	1241c <_svfiprintf_r+0x34>
   123fa:	690b      	ldr	r3, [r1, #16]
   123fc:	2b00      	cmp	r3, #0
   123fe:	d10d      	bne.n	1241c <_svfiprintf_r+0x34>
   12400:	2140      	movs	r1, #64	; 0x40
   12402:	f7ff f9f5 	bl	117f0 <_malloc_r>
   12406:	6038      	str	r0, [r7, #0]
   12408:	6138      	str	r0, [r7, #16]
   1240a:	2800      	cmp	r0, #0
   1240c:	d104      	bne.n	12418 <_svfiprintf_r+0x30>
   1240e:	230c      	movs	r3, #12
   12410:	9a02      	ldr	r2, [sp, #8]
   12412:	3801      	subs	r0, #1
   12414:	6013      	str	r3, [r2, #0]
   12416:	e0d8      	b.n	125ca <_svfiprintf_r+0x1e2>
   12418:	2340      	movs	r3, #64	; 0x40
   1241a:	617b      	str	r3, [r7, #20]
   1241c:	2300      	movs	r3, #0
   1241e:	ad06      	add	r5, sp, #24
   12420:	616b      	str	r3, [r5, #20]
   12422:	3320      	adds	r3, #32
   12424:	766b      	strb	r3, [r5, #25]
   12426:	3310      	adds	r3, #16
   12428:	76ab      	strb	r3, [r5, #26]
   1242a:	0034      	movs	r4, r6
   1242c:	7823      	ldrb	r3, [r4, #0]
   1242e:	2b00      	cmp	r3, #0
   12430:	d103      	bne.n	1243a <_svfiprintf_r+0x52>
   12432:	1ba3      	subs	r3, r4, r6
   12434:	9304      	str	r3, [sp, #16]
   12436:	d012      	beq.n	1245e <_svfiprintf_r+0x76>
   12438:	e003      	b.n	12442 <_svfiprintf_r+0x5a>
   1243a:	2b25      	cmp	r3, #37	; 0x25
   1243c:	d0f9      	beq.n	12432 <_svfiprintf_r+0x4a>
   1243e:	3401      	adds	r4, #1
   12440:	e7f4      	b.n	1242c <_svfiprintf_r+0x44>
   12442:	1ba3      	subs	r3, r4, r6
   12444:	0032      	movs	r2, r6
   12446:	0039      	movs	r1, r7
   12448:	9802      	ldr	r0, [sp, #8]
   1244a:	f7ff ff6b 	bl	12324 <__ssputs_r>
   1244e:	1c43      	adds	r3, r0, #1
   12450:	d100      	bne.n	12454 <_svfiprintf_r+0x6c>
   12452:	e0b4      	b.n	125be <_svfiprintf_r+0x1d6>
   12454:	696a      	ldr	r2, [r5, #20]
   12456:	9b04      	ldr	r3, [sp, #16]
   12458:	4694      	mov	ip, r2
   1245a:	4463      	add	r3, ip
   1245c:	616b      	str	r3, [r5, #20]
   1245e:	7823      	ldrb	r3, [r4, #0]
   12460:	2b00      	cmp	r3, #0
   12462:	d100      	bne.n	12466 <_svfiprintf_r+0x7e>
   12464:	e0ab      	b.n	125be <_svfiprintf_r+0x1d6>
   12466:	2201      	movs	r2, #1
   12468:	2300      	movs	r3, #0
   1246a:	4252      	negs	r2, r2
   1246c:	606a      	str	r2, [r5, #4]
   1246e:	a902      	add	r1, sp, #8
   12470:	3254      	adds	r2, #84	; 0x54
   12472:	1852      	adds	r2, r2, r1
   12474:	3401      	adds	r4, #1
   12476:	602b      	str	r3, [r5, #0]
   12478:	60eb      	str	r3, [r5, #12]
   1247a:	60ab      	str	r3, [r5, #8]
   1247c:	7013      	strb	r3, [r2, #0]
   1247e:	65ab      	str	r3, [r5, #88]	; 0x58
   12480:	4e53      	ldr	r6, [pc, #332]	; (125d0 <_svfiprintf_r+0x1e8>)
   12482:	7821      	ldrb	r1, [r4, #0]
   12484:	2205      	movs	r2, #5
   12486:	0030      	movs	r0, r6
   12488:	f000 fc60 	bl	12d4c <memchr>
   1248c:	2800      	cmp	r0, #0
   1248e:	d007      	beq.n	124a0 <_svfiprintf_r+0xb8>
   12490:	2301      	movs	r3, #1
   12492:	1b80      	subs	r0, r0, r6
   12494:	4083      	lsls	r3, r0
   12496:	682a      	ldr	r2, [r5, #0]
   12498:	3401      	adds	r4, #1
   1249a:	4313      	orrs	r3, r2
   1249c:	602b      	str	r3, [r5, #0]
   1249e:	e7ef      	b.n	12480 <_svfiprintf_r+0x98>
   124a0:	682b      	ldr	r3, [r5, #0]
   124a2:	06da      	lsls	r2, r3, #27
   124a4:	d504      	bpl.n	124b0 <_svfiprintf_r+0xc8>
   124a6:	2253      	movs	r2, #83	; 0x53
   124a8:	2120      	movs	r1, #32
   124aa:	a802      	add	r0, sp, #8
   124ac:	1812      	adds	r2, r2, r0
   124ae:	7011      	strb	r1, [r2, #0]
   124b0:	071a      	lsls	r2, r3, #28
   124b2:	d504      	bpl.n	124be <_svfiprintf_r+0xd6>
   124b4:	2253      	movs	r2, #83	; 0x53
   124b6:	212b      	movs	r1, #43	; 0x2b
   124b8:	a802      	add	r0, sp, #8
   124ba:	1812      	adds	r2, r2, r0
   124bc:	7011      	strb	r1, [r2, #0]
   124be:	7822      	ldrb	r2, [r4, #0]
   124c0:	2a2a      	cmp	r2, #42	; 0x2a
   124c2:	d003      	beq.n	124cc <_svfiprintf_r+0xe4>
   124c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   124c6:	2000      	movs	r0, #0
   124c8:	210a      	movs	r1, #10
   124ca:	e00e      	b.n	124ea <_svfiprintf_r+0x102>
   124cc:	9a05      	ldr	r2, [sp, #20]
   124ce:	1d11      	adds	r1, r2, #4
   124d0:	6812      	ldr	r2, [r2, #0]
   124d2:	9105      	str	r1, [sp, #20]
   124d4:	2a00      	cmp	r2, #0
   124d6:	db01      	blt.n	124dc <_svfiprintf_r+0xf4>
   124d8:	9209      	str	r2, [sp, #36]	; 0x24
   124da:	e004      	b.n	124e6 <_svfiprintf_r+0xfe>
   124dc:	4252      	negs	r2, r2
   124de:	60ea      	str	r2, [r5, #12]
   124e0:	2202      	movs	r2, #2
   124e2:	4313      	orrs	r3, r2
   124e4:	602b      	str	r3, [r5, #0]
   124e6:	3401      	adds	r4, #1
   124e8:	e00b      	b.n	12502 <_svfiprintf_r+0x11a>
   124ea:	7822      	ldrb	r2, [r4, #0]
   124ec:	3a30      	subs	r2, #48	; 0x30
   124ee:	2a09      	cmp	r2, #9
   124f0:	d804      	bhi.n	124fc <_svfiprintf_r+0x114>
   124f2:	434b      	muls	r3, r1
   124f4:	3401      	adds	r4, #1
   124f6:	189b      	adds	r3, r3, r2
   124f8:	2001      	movs	r0, #1
   124fa:	e7f6      	b.n	124ea <_svfiprintf_r+0x102>
   124fc:	2800      	cmp	r0, #0
   124fe:	d000      	beq.n	12502 <_svfiprintf_r+0x11a>
   12500:	9309      	str	r3, [sp, #36]	; 0x24
   12502:	7823      	ldrb	r3, [r4, #0]
   12504:	2b2e      	cmp	r3, #46	; 0x2e
   12506:	d11e      	bne.n	12546 <_svfiprintf_r+0x15e>
   12508:	7863      	ldrb	r3, [r4, #1]
   1250a:	2b2a      	cmp	r3, #42	; 0x2a
   1250c:	d10a      	bne.n	12524 <_svfiprintf_r+0x13c>
   1250e:	9b05      	ldr	r3, [sp, #20]
   12510:	3402      	adds	r4, #2
   12512:	1d1a      	adds	r2, r3, #4
   12514:	681b      	ldr	r3, [r3, #0]
   12516:	9205      	str	r2, [sp, #20]
   12518:	2b00      	cmp	r3, #0
   1251a:	da01      	bge.n	12520 <_svfiprintf_r+0x138>
   1251c:	2301      	movs	r3, #1
   1251e:	425b      	negs	r3, r3
   12520:	9307      	str	r3, [sp, #28]
   12522:	e010      	b.n	12546 <_svfiprintf_r+0x15e>
   12524:	2300      	movs	r3, #0
   12526:	200a      	movs	r0, #10
   12528:	001a      	movs	r2, r3
   1252a:	3401      	adds	r4, #1
   1252c:	606b      	str	r3, [r5, #4]
   1252e:	7821      	ldrb	r1, [r4, #0]
   12530:	3930      	subs	r1, #48	; 0x30
   12532:	2909      	cmp	r1, #9
   12534:	d804      	bhi.n	12540 <_svfiprintf_r+0x158>
   12536:	4342      	muls	r2, r0
   12538:	3401      	adds	r4, #1
   1253a:	1852      	adds	r2, r2, r1
   1253c:	2301      	movs	r3, #1
   1253e:	e7f6      	b.n	1252e <_svfiprintf_r+0x146>
   12540:	2b00      	cmp	r3, #0
   12542:	d000      	beq.n	12546 <_svfiprintf_r+0x15e>
   12544:	9207      	str	r2, [sp, #28]
   12546:	4e23      	ldr	r6, [pc, #140]	; (125d4 <_svfiprintf_r+0x1ec>)
   12548:	7821      	ldrb	r1, [r4, #0]
   1254a:	2203      	movs	r2, #3
   1254c:	0030      	movs	r0, r6
   1254e:	f000 fbfd 	bl	12d4c <memchr>
   12552:	2800      	cmp	r0, #0
   12554:	d006      	beq.n	12564 <_svfiprintf_r+0x17c>
   12556:	2340      	movs	r3, #64	; 0x40
   12558:	1b80      	subs	r0, r0, r6
   1255a:	4083      	lsls	r3, r0
   1255c:	682a      	ldr	r2, [r5, #0]
   1255e:	3401      	adds	r4, #1
   12560:	4313      	orrs	r3, r2
   12562:	602b      	str	r3, [r5, #0]
   12564:	7821      	ldrb	r1, [r4, #0]
   12566:	2206      	movs	r2, #6
   12568:	481b      	ldr	r0, [pc, #108]	; (125d8 <_svfiprintf_r+0x1f0>)
   1256a:	1c66      	adds	r6, r4, #1
   1256c:	7629      	strb	r1, [r5, #24]
   1256e:	f000 fbed 	bl	12d4c <memchr>
   12572:	2800      	cmp	r0, #0
   12574:	d012      	beq.n	1259c <_svfiprintf_r+0x1b4>
   12576:	4b19      	ldr	r3, [pc, #100]	; (125dc <_svfiprintf_r+0x1f4>)
   12578:	2b00      	cmp	r3, #0
   1257a:	d106      	bne.n	1258a <_svfiprintf_r+0x1a2>
   1257c:	2207      	movs	r2, #7
   1257e:	9b05      	ldr	r3, [sp, #20]
   12580:	3307      	adds	r3, #7
   12582:	4393      	bics	r3, r2
   12584:	3308      	adds	r3, #8
   12586:	9305      	str	r3, [sp, #20]
   12588:	e014      	b.n	125b4 <_svfiprintf_r+0x1cc>
   1258a:	ab05      	add	r3, sp, #20
   1258c:	9300      	str	r3, [sp, #0]
   1258e:	003a      	movs	r2, r7
   12590:	4b13      	ldr	r3, [pc, #76]	; (125e0 <_svfiprintf_r+0x1f8>)
   12592:	0029      	movs	r1, r5
   12594:	9802      	ldr	r0, [sp, #8]
   12596:	e000      	b.n	1259a <_svfiprintf_r+0x1b2>
   12598:	bf00      	nop
   1259a:	e007      	b.n	125ac <_svfiprintf_r+0x1c4>
   1259c:	ab05      	add	r3, sp, #20
   1259e:	9300      	str	r3, [sp, #0]
   125a0:	003a      	movs	r2, r7
   125a2:	4b0f      	ldr	r3, [pc, #60]	; (125e0 <_svfiprintf_r+0x1f8>)
   125a4:	0029      	movs	r1, r5
   125a6:	9802      	ldr	r0, [sp, #8]
   125a8:	f000 f9ce 	bl	12948 <_printf_i>
   125ac:	9003      	str	r0, [sp, #12]
   125ae:	9b03      	ldr	r3, [sp, #12]
   125b0:	3301      	adds	r3, #1
   125b2:	d004      	beq.n	125be <_svfiprintf_r+0x1d6>
   125b4:	696b      	ldr	r3, [r5, #20]
   125b6:	9a03      	ldr	r2, [sp, #12]
   125b8:	189b      	adds	r3, r3, r2
   125ba:	616b      	str	r3, [r5, #20]
   125bc:	e735      	b.n	1242a <_svfiprintf_r+0x42>
   125be:	89bb      	ldrh	r3, [r7, #12]
   125c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   125c2:	065b      	lsls	r3, r3, #25
   125c4:	d501      	bpl.n	125ca <_svfiprintf_r+0x1e2>
   125c6:	2001      	movs	r0, #1
   125c8:	4240      	negs	r0, r0
   125ca:	b01f      	add	sp, #124	; 0x7c
   125cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   125ce:	46c0      	nop			; (mov r8, r8)
   125d0:	00014be8 	.word	0x00014be8
   125d4:	00014bee 	.word	0x00014bee
   125d8:	00014bf2 	.word	0x00014bf2
   125dc:	00000000 	.word	0x00000000
   125e0:	00012325 	.word	0x00012325

000125e4 <__sfputc_r>:
   125e4:	6893      	ldr	r3, [r2, #8]
   125e6:	b510      	push	{r4, lr}
   125e8:	3b01      	subs	r3, #1
   125ea:	6093      	str	r3, [r2, #8]
   125ec:	2b00      	cmp	r3, #0
   125ee:	da05      	bge.n	125fc <__sfputc_r+0x18>
   125f0:	6994      	ldr	r4, [r2, #24]
   125f2:	42a3      	cmp	r3, r4
   125f4:	db08      	blt.n	12608 <__sfputc_r+0x24>
   125f6:	b2cb      	uxtb	r3, r1
   125f8:	2b0a      	cmp	r3, #10
   125fa:	d005      	beq.n	12608 <__sfputc_r+0x24>
   125fc:	6813      	ldr	r3, [r2, #0]
   125fe:	1c58      	adds	r0, r3, #1
   12600:	6010      	str	r0, [r2, #0]
   12602:	7019      	strb	r1, [r3, #0]
   12604:	b2c8      	uxtb	r0, r1
   12606:	e001      	b.n	1260c <__sfputc_r+0x28>
   12608:	f7ff fbd2 	bl	11db0 <__swbuf_r>
   1260c:	bd10      	pop	{r4, pc}

0001260e <__sfputs_r>:
   1260e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12610:	0006      	movs	r6, r0
   12612:	000f      	movs	r7, r1
   12614:	0014      	movs	r4, r2
   12616:	18d5      	adds	r5, r2, r3
   12618:	42ac      	cmp	r4, r5
   1261a:	d008      	beq.n	1262e <__sfputs_r+0x20>
   1261c:	7821      	ldrb	r1, [r4, #0]
   1261e:	003a      	movs	r2, r7
   12620:	0030      	movs	r0, r6
   12622:	f7ff ffdf 	bl	125e4 <__sfputc_r>
   12626:	3401      	adds	r4, #1
   12628:	1c43      	adds	r3, r0, #1
   1262a:	d1f5      	bne.n	12618 <__sfputs_r+0xa>
   1262c:	e000      	b.n	12630 <__sfputs_r+0x22>
   1262e:	2000      	movs	r0, #0
   12630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00012634 <_vfiprintf_r>:
   12634:	b5f0      	push	{r4, r5, r6, r7, lr}
   12636:	b09f      	sub	sp, #124	; 0x7c
   12638:	0006      	movs	r6, r0
   1263a:	000f      	movs	r7, r1
   1263c:	9202      	str	r2, [sp, #8]
   1263e:	9305      	str	r3, [sp, #20]
   12640:	2800      	cmp	r0, #0
   12642:	d004      	beq.n	1264e <_vfiprintf_r+0x1a>
   12644:	6983      	ldr	r3, [r0, #24]
   12646:	2b00      	cmp	r3, #0
   12648:	d101      	bne.n	1264e <_vfiprintf_r+0x1a>
   1264a:	f7ff fd73 	bl	12134 <__sinit>
   1264e:	4b7f      	ldr	r3, [pc, #508]	; (1284c <_vfiprintf_r+0x218>)
   12650:	429f      	cmp	r7, r3
   12652:	d101      	bne.n	12658 <_vfiprintf_r+0x24>
   12654:	6877      	ldr	r7, [r6, #4]
   12656:	e008      	b.n	1266a <_vfiprintf_r+0x36>
   12658:	4b7d      	ldr	r3, [pc, #500]	; (12850 <_vfiprintf_r+0x21c>)
   1265a:	429f      	cmp	r7, r3
   1265c:	d101      	bne.n	12662 <_vfiprintf_r+0x2e>
   1265e:	68b7      	ldr	r7, [r6, #8]
   12660:	e003      	b.n	1266a <_vfiprintf_r+0x36>
   12662:	4b7c      	ldr	r3, [pc, #496]	; (12854 <_vfiprintf_r+0x220>)
   12664:	429f      	cmp	r7, r3
   12666:	d100      	bne.n	1266a <_vfiprintf_r+0x36>
   12668:	68f7      	ldr	r7, [r6, #12]
   1266a:	89bb      	ldrh	r3, [r7, #12]
   1266c:	071b      	lsls	r3, r3, #28
   1266e:	d50a      	bpl.n	12686 <_vfiprintf_r+0x52>
   12670:	693b      	ldr	r3, [r7, #16]
   12672:	2b00      	cmp	r3, #0
   12674:	d007      	beq.n	12686 <_vfiprintf_r+0x52>
   12676:	2300      	movs	r3, #0
   12678:	ad06      	add	r5, sp, #24
   1267a:	616b      	str	r3, [r5, #20]
   1267c:	3320      	adds	r3, #32
   1267e:	766b      	strb	r3, [r5, #25]
   12680:	3310      	adds	r3, #16
   12682:	76ab      	strb	r3, [r5, #26]
   12684:	e03d      	b.n	12702 <_vfiprintf_r+0xce>
   12686:	0039      	movs	r1, r7
   12688:	0030      	movs	r0, r6
   1268a:	f7ff fbe9 	bl	11e60 <__swsetup_r>
   1268e:	2800      	cmp	r0, #0
   12690:	d0f1      	beq.n	12676 <_vfiprintf_r+0x42>
   12692:	2001      	movs	r0, #1
   12694:	4240      	negs	r0, r0
   12696:	e0d6      	b.n	12846 <_vfiprintf_r+0x212>
   12698:	9a05      	ldr	r2, [sp, #20]
   1269a:	1d11      	adds	r1, r2, #4
   1269c:	6812      	ldr	r2, [r2, #0]
   1269e:	9105      	str	r1, [sp, #20]
   126a0:	2a00      	cmp	r2, #0
   126a2:	da00      	bge.n	126a6 <_vfiprintf_r+0x72>
   126a4:	e07f      	b.n	127a6 <_vfiprintf_r+0x172>
   126a6:	9209      	str	r2, [sp, #36]	; 0x24
   126a8:	3401      	adds	r4, #1
   126aa:	7823      	ldrb	r3, [r4, #0]
   126ac:	2b2e      	cmp	r3, #46	; 0x2e
   126ae:	d100      	bne.n	126b2 <_vfiprintf_r+0x7e>
   126b0:	e08d      	b.n	127ce <_vfiprintf_r+0x19a>
   126b2:	7821      	ldrb	r1, [r4, #0]
   126b4:	2203      	movs	r2, #3
   126b6:	4868      	ldr	r0, [pc, #416]	; (12858 <_vfiprintf_r+0x224>)
   126b8:	f000 fb48 	bl	12d4c <memchr>
   126bc:	2800      	cmp	r0, #0
   126be:	d007      	beq.n	126d0 <_vfiprintf_r+0x9c>
   126c0:	4b65      	ldr	r3, [pc, #404]	; (12858 <_vfiprintf_r+0x224>)
   126c2:	682a      	ldr	r2, [r5, #0]
   126c4:	1ac0      	subs	r0, r0, r3
   126c6:	2340      	movs	r3, #64	; 0x40
   126c8:	4083      	lsls	r3, r0
   126ca:	4313      	orrs	r3, r2
   126cc:	602b      	str	r3, [r5, #0]
   126ce:	3401      	adds	r4, #1
   126d0:	7821      	ldrb	r1, [r4, #0]
   126d2:	1c63      	adds	r3, r4, #1
   126d4:	2206      	movs	r2, #6
   126d6:	4861      	ldr	r0, [pc, #388]	; (1285c <_vfiprintf_r+0x228>)
   126d8:	9302      	str	r3, [sp, #8]
   126da:	7629      	strb	r1, [r5, #24]
   126dc:	f000 fb36 	bl	12d4c <memchr>
   126e0:	2800      	cmp	r0, #0
   126e2:	d100      	bne.n	126e6 <_vfiprintf_r+0xb2>
   126e4:	e09d      	b.n	12822 <_vfiprintf_r+0x1ee>
   126e6:	4b5e      	ldr	r3, [pc, #376]	; (12860 <_vfiprintf_r+0x22c>)
   126e8:	2b00      	cmp	r3, #0
   126ea:	d000      	beq.n	126ee <_vfiprintf_r+0xba>
   126ec:	e090      	b.n	12810 <_vfiprintf_r+0x1dc>
   126ee:	2207      	movs	r2, #7
   126f0:	9b05      	ldr	r3, [sp, #20]
   126f2:	3307      	adds	r3, #7
   126f4:	4393      	bics	r3, r2
   126f6:	3308      	adds	r3, #8
   126f8:	9305      	str	r3, [sp, #20]
   126fa:	696b      	ldr	r3, [r5, #20]
   126fc:	9a03      	ldr	r2, [sp, #12]
   126fe:	189b      	adds	r3, r3, r2
   12700:	616b      	str	r3, [r5, #20]
   12702:	9c02      	ldr	r4, [sp, #8]
   12704:	7823      	ldrb	r3, [r4, #0]
   12706:	2b00      	cmp	r3, #0
   12708:	d104      	bne.n	12714 <_vfiprintf_r+0xe0>
   1270a:	9b02      	ldr	r3, [sp, #8]
   1270c:	1ae3      	subs	r3, r4, r3
   1270e:	9304      	str	r3, [sp, #16]
   12710:	d012      	beq.n	12738 <_vfiprintf_r+0x104>
   12712:	e003      	b.n	1271c <_vfiprintf_r+0xe8>
   12714:	2b25      	cmp	r3, #37	; 0x25
   12716:	d0f8      	beq.n	1270a <_vfiprintf_r+0xd6>
   12718:	3401      	adds	r4, #1
   1271a:	e7f3      	b.n	12704 <_vfiprintf_r+0xd0>
   1271c:	9b04      	ldr	r3, [sp, #16]
   1271e:	9a02      	ldr	r2, [sp, #8]
   12720:	0039      	movs	r1, r7
   12722:	0030      	movs	r0, r6
   12724:	f7ff ff73 	bl	1260e <__sfputs_r>
   12728:	1c43      	adds	r3, r0, #1
   1272a:	d100      	bne.n	1272e <_vfiprintf_r+0xfa>
   1272c:	e086      	b.n	1283c <_vfiprintf_r+0x208>
   1272e:	696a      	ldr	r2, [r5, #20]
   12730:	9b04      	ldr	r3, [sp, #16]
   12732:	4694      	mov	ip, r2
   12734:	4463      	add	r3, ip
   12736:	616b      	str	r3, [r5, #20]
   12738:	7823      	ldrb	r3, [r4, #0]
   1273a:	2b00      	cmp	r3, #0
   1273c:	d07e      	beq.n	1283c <_vfiprintf_r+0x208>
   1273e:	2201      	movs	r2, #1
   12740:	2300      	movs	r3, #0
   12742:	4252      	negs	r2, r2
   12744:	606a      	str	r2, [r5, #4]
   12746:	a902      	add	r1, sp, #8
   12748:	3254      	adds	r2, #84	; 0x54
   1274a:	1852      	adds	r2, r2, r1
   1274c:	3401      	adds	r4, #1
   1274e:	602b      	str	r3, [r5, #0]
   12750:	60eb      	str	r3, [r5, #12]
   12752:	60ab      	str	r3, [r5, #8]
   12754:	7013      	strb	r3, [r2, #0]
   12756:	65ab      	str	r3, [r5, #88]	; 0x58
   12758:	7821      	ldrb	r1, [r4, #0]
   1275a:	2205      	movs	r2, #5
   1275c:	4841      	ldr	r0, [pc, #260]	; (12864 <_vfiprintf_r+0x230>)
   1275e:	f000 faf5 	bl	12d4c <memchr>
   12762:	2800      	cmp	r0, #0
   12764:	d008      	beq.n	12778 <_vfiprintf_r+0x144>
   12766:	4b3f      	ldr	r3, [pc, #252]	; (12864 <_vfiprintf_r+0x230>)
   12768:	682a      	ldr	r2, [r5, #0]
   1276a:	1ac0      	subs	r0, r0, r3
   1276c:	2301      	movs	r3, #1
   1276e:	4083      	lsls	r3, r0
   12770:	4313      	orrs	r3, r2
   12772:	602b      	str	r3, [r5, #0]
   12774:	3401      	adds	r4, #1
   12776:	e7ef      	b.n	12758 <_vfiprintf_r+0x124>
   12778:	682b      	ldr	r3, [r5, #0]
   1277a:	06da      	lsls	r2, r3, #27
   1277c:	d504      	bpl.n	12788 <_vfiprintf_r+0x154>
   1277e:	2253      	movs	r2, #83	; 0x53
   12780:	2120      	movs	r1, #32
   12782:	a802      	add	r0, sp, #8
   12784:	1812      	adds	r2, r2, r0
   12786:	7011      	strb	r1, [r2, #0]
   12788:	071a      	lsls	r2, r3, #28
   1278a:	d504      	bpl.n	12796 <_vfiprintf_r+0x162>
   1278c:	2253      	movs	r2, #83	; 0x53
   1278e:	212b      	movs	r1, #43	; 0x2b
   12790:	a802      	add	r0, sp, #8
   12792:	1812      	adds	r2, r2, r0
   12794:	7011      	strb	r1, [r2, #0]
   12796:	7822      	ldrb	r2, [r4, #0]
   12798:	2a2a      	cmp	r2, #42	; 0x2a
   1279a:	d100      	bne.n	1279e <_vfiprintf_r+0x16a>
   1279c:	e77c      	b.n	12698 <_vfiprintf_r+0x64>
   1279e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   127a0:	2000      	movs	r0, #0
   127a2:	210a      	movs	r1, #10
   127a4:	e005      	b.n	127b2 <_vfiprintf_r+0x17e>
   127a6:	4252      	negs	r2, r2
   127a8:	60ea      	str	r2, [r5, #12]
   127aa:	2202      	movs	r2, #2
   127ac:	4313      	orrs	r3, r2
   127ae:	602b      	str	r3, [r5, #0]
   127b0:	e77a      	b.n	126a8 <_vfiprintf_r+0x74>
   127b2:	7822      	ldrb	r2, [r4, #0]
   127b4:	3a30      	subs	r2, #48	; 0x30
   127b6:	2a09      	cmp	r2, #9
   127b8:	d804      	bhi.n	127c4 <_vfiprintf_r+0x190>
   127ba:	434b      	muls	r3, r1
   127bc:	3401      	adds	r4, #1
   127be:	189b      	adds	r3, r3, r2
   127c0:	2001      	movs	r0, #1
   127c2:	e7f6      	b.n	127b2 <_vfiprintf_r+0x17e>
   127c4:	2800      	cmp	r0, #0
   127c6:	d100      	bne.n	127ca <_vfiprintf_r+0x196>
   127c8:	e76f      	b.n	126aa <_vfiprintf_r+0x76>
   127ca:	9309      	str	r3, [sp, #36]	; 0x24
   127cc:	e76d      	b.n	126aa <_vfiprintf_r+0x76>
   127ce:	7863      	ldrb	r3, [r4, #1]
   127d0:	2b2a      	cmp	r3, #42	; 0x2a
   127d2:	d10a      	bne.n	127ea <_vfiprintf_r+0x1b6>
   127d4:	9b05      	ldr	r3, [sp, #20]
   127d6:	3402      	adds	r4, #2
   127d8:	1d1a      	adds	r2, r3, #4
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	9205      	str	r2, [sp, #20]
   127de:	2b00      	cmp	r3, #0
   127e0:	da01      	bge.n	127e6 <_vfiprintf_r+0x1b2>
   127e2:	2301      	movs	r3, #1
   127e4:	425b      	negs	r3, r3
   127e6:	9307      	str	r3, [sp, #28]
   127e8:	e763      	b.n	126b2 <_vfiprintf_r+0x7e>
   127ea:	2300      	movs	r3, #0
   127ec:	200a      	movs	r0, #10
   127ee:	001a      	movs	r2, r3
   127f0:	3401      	adds	r4, #1
   127f2:	606b      	str	r3, [r5, #4]
   127f4:	7821      	ldrb	r1, [r4, #0]
   127f6:	3930      	subs	r1, #48	; 0x30
   127f8:	2909      	cmp	r1, #9
   127fa:	d804      	bhi.n	12806 <_vfiprintf_r+0x1d2>
   127fc:	4342      	muls	r2, r0
   127fe:	3401      	adds	r4, #1
   12800:	1852      	adds	r2, r2, r1
   12802:	2301      	movs	r3, #1
   12804:	e7f6      	b.n	127f4 <_vfiprintf_r+0x1c0>
   12806:	2b00      	cmp	r3, #0
   12808:	d100      	bne.n	1280c <_vfiprintf_r+0x1d8>
   1280a:	e752      	b.n	126b2 <_vfiprintf_r+0x7e>
   1280c:	9207      	str	r2, [sp, #28]
   1280e:	e750      	b.n	126b2 <_vfiprintf_r+0x7e>
   12810:	ab05      	add	r3, sp, #20
   12812:	9300      	str	r3, [sp, #0]
   12814:	003a      	movs	r2, r7
   12816:	4b14      	ldr	r3, [pc, #80]	; (12868 <_vfiprintf_r+0x234>)
   12818:	0029      	movs	r1, r5
   1281a:	0030      	movs	r0, r6
   1281c:	e000      	b.n	12820 <_vfiprintf_r+0x1ec>
   1281e:	bf00      	nop
   12820:	e007      	b.n	12832 <_vfiprintf_r+0x1fe>
   12822:	ab05      	add	r3, sp, #20
   12824:	9300      	str	r3, [sp, #0]
   12826:	003a      	movs	r2, r7
   12828:	4b0f      	ldr	r3, [pc, #60]	; (12868 <_vfiprintf_r+0x234>)
   1282a:	0029      	movs	r1, r5
   1282c:	0030      	movs	r0, r6
   1282e:	f000 f88b 	bl	12948 <_printf_i>
   12832:	9003      	str	r0, [sp, #12]
   12834:	9b03      	ldr	r3, [sp, #12]
   12836:	3301      	adds	r3, #1
   12838:	d000      	beq.n	1283c <_vfiprintf_r+0x208>
   1283a:	e75e      	b.n	126fa <_vfiprintf_r+0xc6>
   1283c:	89bb      	ldrh	r3, [r7, #12]
   1283e:	065b      	lsls	r3, r3, #25
   12840:	d500      	bpl.n	12844 <_vfiprintf_r+0x210>
   12842:	e726      	b.n	12692 <_vfiprintf_r+0x5e>
   12844:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12846:	b01f      	add	sp, #124	; 0x7c
   12848:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1284a:	46c0      	nop			; (mov r8, r8)
   1284c:	00014b88 	.word	0x00014b88
   12850:	00014ba8 	.word	0x00014ba8
   12854:	00014bc8 	.word	0x00014bc8
   12858:	00014bee 	.word	0x00014bee
   1285c:	00014bf2 	.word	0x00014bf2
   12860:	00000000 	.word	0x00000000
   12864:	00014be8 	.word	0x00014be8
   12868:	0001260f 	.word	0x0001260f

0001286c <_printf_common>:
   1286c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1286e:	0017      	movs	r7, r2
   12870:	9301      	str	r3, [sp, #4]
   12872:	688a      	ldr	r2, [r1, #8]
   12874:	690b      	ldr	r3, [r1, #16]
   12876:	9000      	str	r0, [sp, #0]
   12878:	000c      	movs	r4, r1
   1287a:	4293      	cmp	r3, r2
   1287c:	da00      	bge.n	12880 <_printf_common+0x14>
   1287e:	0013      	movs	r3, r2
   12880:	0022      	movs	r2, r4
   12882:	603b      	str	r3, [r7, #0]
   12884:	3243      	adds	r2, #67	; 0x43
   12886:	7812      	ldrb	r2, [r2, #0]
   12888:	2a00      	cmp	r2, #0
   1288a:	d001      	beq.n	12890 <_printf_common+0x24>
   1288c:	3301      	adds	r3, #1
   1288e:	603b      	str	r3, [r7, #0]
   12890:	6823      	ldr	r3, [r4, #0]
   12892:	069b      	lsls	r3, r3, #26
   12894:	d502      	bpl.n	1289c <_printf_common+0x30>
   12896:	683b      	ldr	r3, [r7, #0]
   12898:	3302      	adds	r3, #2
   1289a:	603b      	str	r3, [r7, #0]
   1289c:	2506      	movs	r5, #6
   1289e:	6823      	ldr	r3, [r4, #0]
   128a0:	401d      	ands	r5, r3
   128a2:	d01e      	beq.n	128e2 <_printf_common+0x76>
   128a4:	0023      	movs	r3, r4
   128a6:	3343      	adds	r3, #67	; 0x43
   128a8:	781b      	ldrb	r3, [r3, #0]
   128aa:	1e5a      	subs	r2, r3, #1
   128ac:	4193      	sbcs	r3, r2
   128ae:	6822      	ldr	r2, [r4, #0]
   128b0:	0692      	lsls	r2, r2, #26
   128b2:	d51c      	bpl.n	128ee <_printf_common+0x82>
   128b4:	2030      	movs	r0, #48	; 0x30
   128b6:	18e1      	adds	r1, r4, r3
   128b8:	3143      	adds	r1, #67	; 0x43
   128ba:	7008      	strb	r0, [r1, #0]
   128bc:	0021      	movs	r1, r4
   128be:	1c5a      	adds	r2, r3, #1
   128c0:	3145      	adds	r1, #69	; 0x45
   128c2:	7809      	ldrb	r1, [r1, #0]
   128c4:	18a2      	adds	r2, r4, r2
   128c6:	3243      	adds	r2, #67	; 0x43
   128c8:	3302      	adds	r3, #2
   128ca:	7011      	strb	r1, [r2, #0]
   128cc:	e00f      	b.n	128ee <_printf_common+0x82>
   128ce:	0022      	movs	r2, r4
   128d0:	2301      	movs	r3, #1
   128d2:	3219      	adds	r2, #25
   128d4:	9901      	ldr	r1, [sp, #4]
   128d6:	9800      	ldr	r0, [sp, #0]
   128d8:	9e08      	ldr	r6, [sp, #32]
   128da:	47b0      	blx	r6
   128dc:	1c43      	adds	r3, r0, #1
   128de:	d00e      	beq.n	128fe <_printf_common+0x92>
   128e0:	3501      	adds	r5, #1
   128e2:	68e3      	ldr	r3, [r4, #12]
   128e4:	683a      	ldr	r2, [r7, #0]
   128e6:	1a9b      	subs	r3, r3, r2
   128e8:	429d      	cmp	r5, r3
   128ea:	dbf0      	blt.n	128ce <_printf_common+0x62>
   128ec:	e7da      	b.n	128a4 <_printf_common+0x38>
   128ee:	0022      	movs	r2, r4
   128f0:	9901      	ldr	r1, [sp, #4]
   128f2:	3243      	adds	r2, #67	; 0x43
   128f4:	9800      	ldr	r0, [sp, #0]
   128f6:	9d08      	ldr	r5, [sp, #32]
   128f8:	47a8      	blx	r5
   128fa:	1c43      	adds	r3, r0, #1
   128fc:	d102      	bne.n	12904 <_printf_common+0x98>
   128fe:	2001      	movs	r0, #1
   12900:	4240      	negs	r0, r0
   12902:	e020      	b.n	12946 <_printf_common+0xda>
   12904:	2306      	movs	r3, #6
   12906:	6820      	ldr	r0, [r4, #0]
   12908:	68e1      	ldr	r1, [r4, #12]
   1290a:	683a      	ldr	r2, [r7, #0]
   1290c:	4003      	ands	r3, r0
   1290e:	2500      	movs	r5, #0
   12910:	2b04      	cmp	r3, #4
   12912:	d103      	bne.n	1291c <_printf_common+0xb0>
   12914:	1a8d      	subs	r5, r1, r2
   12916:	43eb      	mvns	r3, r5
   12918:	17db      	asrs	r3, r3, #31
   1291a:	401d      	ands	r5, r3
   1291c:	68a3      	ldr	r3, [r4, #8]
   1291e:	6922      	ldr	r2, [r4, #16]
   12920:	4293      	cmp	r3, r2
   12922:	dd01      	ble.n	12928 <_printf_common+0xbc>
   12924:	1a9b      	subs	r3, r3, r2
   12926:	18ed      	adds	r5, r5, r3
   12928:	2700      	movs	r7, #0
   1292a:	42bd      	cmp	r5, r7
   1292c:	d00a      	beq.n	12944 <_printf_common+0xd8>
   1292e:	0022      	movs	r2, r4
   12930:	2301      	movs	r3, #1
   12932:	321a      	adds	r2, #26
   12934:	9901      	ldr	r1, [sp, #4]
   12936:	9800      	ldr	r0, [sp, #0]
   12938:	9e08      	ldr	r6, [sp, #32]
   1293a:	47b0      	blx	r6
   1293c:	1c43      	adds	r3, r0, #1
   1293e:	d0de      	beq.n	128fe <_printf_common+0x92>
   12940:	3701      	adds	r7, #1
   12942:	e7f2      	b.n	1292a <_printf_common+0xbe>
   12944:	2000      	movs	r0, #0
   12946:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00012948 <_printf_i>:
   12948:	b5f0      	push	{r4, r5, r6, r7, lr}
   1294a:	b08b      	sub	sp, #44	; 0x2c
   1294c:	9206      	str	r2, [sp, #24]
   1294e:	000a      	movs	r2, r1
   12950:	3243      	adds	r2, #67	; 0x43
   12952:	9307      	str	r3, [sp, #28]
   12954:	9005      	str	r0, [sp, #20]
   12956:	9204      	str	r2, [sp, #16]
   12958:	7e0a      	ldrb	r2, [r1, #24]
   1295a:	000c      	movs	r4, r1
   1295c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1295e:	2a6e      	cmp	r2, #110	; 0x6e
   12960:	d100      	bne.n	12964 <_printf_i+0x1c>
   12962:	e0ab      	b.n	12abc <_printf_i+0x174>
   12964:	d811      	bhi.n	1298a <_printf_i+0x42>
   12966:	2a63      	cmp	r2, #99	; 0x63
   12968:	d022      	beq.n	129b0 <_printf_i+0x68>
   1296a:	d809      	bhi.n	12980 <_printf_i+0x38>
   1296c:	2a00      	cmp	r2, #0
   1296e:	d100      	bne.n	12972 <_printf_i+0x2a>
   12970:	e0b5      	b.n	12ade <_printf_i+0x196>
   12972:	2a58      	cmp	r2, #88	; 0x58
   12974:	d000      	beq.n	12978 <_printf_i+0x30>
   12976:	e0c5      	b.n	12b04 <_printf_i+0x1bc>
   12978:	3145      	adds	r1, #69	; 0x45
   1297a:	700a      	strb	r2, [r1, #0]
   1297c:	4a81      	ldr	r2, [pc, #516]	; (12b84 <_printf_i+0x23c>)
   1297e:	e04f      	b.n	12a20 <_printf_i+0xd8>
   12980:	2a64      	cmp	r2, #100	; 0x64
   12982:	d01d      	beq.n	129c0 <_printf_i+0x78>
   12984:	2a69      	cmp	r2, #105	; 0x69
   12986:	d01b      	beq.n	129c0 <_printf_i+0x78>
   12988:	e0bc      	b.n	12b04 <_printf_i+0x1bc>
   1298a:	2a73      	cmp	r2, #115	; 0x73
   1298c:	d100      	bne.n	12990 <_printf_i+0x48>
   1298e:	e0aa      	b.n	12ae6 <_printf_i+0x19e>
   12990:	d809      	bhi.n	129a6 <_printf_i+0x5e>
   12992:	2a6f      	cmp	r2, #111	; 0x6f
   12994:	d029      	beq.n	129ea <_printf_i+0xa2>
   12996:	2a70      	cmp	r2, #112	; 0x70
   12998:	d000      	beq.n	1299c <_printf_i+0x54>
   1299a:	e0b3      	b.n	12b04 <_printf_i+0x1bc>
   1299c:	2220      	movs	r2, #32
   1299e:	6809      	ldr	r1, [r1, #0]
   129a0:	430a      	orrs	r2, r1
   129a2:	6022      	str	r2, [r4, #0]
   129a4:	e037      	b.n	12a16 <_printf_i+0xce>
   129a6:	2a75      	cmp	r2, #117	; 0x75
   129a8:	d01f      	beq.n	129ea <_printf_i+0xa2>
   129aa:	2a78      	cmp	r2, #120	; 0x78
   129ac:	d033      	beq.n	12a16 <_printf_i+0xce>
   129ae:	e0a9      	b.n	12b04 <_printf_i+0x1bc>
   129b0:	000e      	movs	r6, r1
   129b2:	681a      	ldr	r2, [r3, #0]
   129b4:	3642      	adds	r6, #66	; 0x42
   129b6:	1d11      	adds	r1, r2, #4
   129b8:	6019      	str	r1, [r3, #0]
   129ba:	6813      	ldr	r3, [r2, #0]
   129bc:	7033      	strb	r3, [r6, #0]
   129be:	e0a4      	b.n	12b0a <_printf_i+0x1c2>
   129c0:	6821      	ldr	r1, [r4, #0]
   129c2:	681a      	ldr	r2, [r3, #0]
   129c4:	0608      	lsls	r0, r1, #24
   129c6:	d406      	bmi.n	129d6 <_printf_i+0x8e>
   129c8:	0649      	lsls	r1, r1, #25
   129ca:	d504      	bpl.n	129d6 <_printf_i+0x8e>
   129cc:	1d11      	adds	r1, r2, #4
   129ce:	6019      	str	r1, [r3, #0]
   129d0:	2300      	movs	r3, #0
   129d2:	5ed5      	ldrsh	r5, [r2, r3]
   129d4:	e002      	b.n	129dc <_printf_i+0x94>
   129d6:	1d11      	adds	r1, r2, #4
   129d8:	6019      	str	r1, [r3, #0]
   129da:	6815      	ldr	r5, [r2, #0]
   129dc:	2d00      	cmp	r5, #0
   129de:	da3b      	bge.n	12a58 <_printf_i+0x110>
   129e0:	232d      	movs	r3, #45	; 0x2d
   129e2:	9a04      	ldr	r2, [sp, #16]
   129e4:	426d      	negs	r5, r5
   129e6:	7013      	strb	r3, [r2, #0]
   129e8:	e036      	b.n	12a58 <_printf_i+0x110>
   129ea:	6821      	ldr	r1, [r4, #0]
   129ec:	681a      	ldr	r2, [r3, #0]
   129ee:	0608      	lsls	r0, r1, #24
   129f0:	d406      	bmi.n	12a00 <_printf_i+0xb8>
   129f2:	0649      	lsls	r1, r1, #25
   129f4:	d504      	bpl.n	12a00 <_printf_i+0xb8>
   129f6:	6815      	ldr	r5, [r2, #0]
   129f8:	1d11      	adds	r1, r2, #4
   129fa:	6019      	str	r1, [r3, #0]
   129fc:	b2ad      	uxth	r5, r5
   129fe:	e002      	b.n	12a06 <_printf_i+0xbe>
   12a00:	1d11      	adds	r1, r2, #4
   12a02:	6019      	str	r1, [r3, #0]
   12a04:	6815      	ldr	r5, [r2, #0]
   12a06:	4b5f      	ldr	r3, [pc, #380]	; (12b84 <_printf_i+0x23c>)
   12a08:	7e22      	ldrb	r2, [r4, #24]
   12a0a:	9303      	str	r3, [sp, #12]
   12a0c:	2708      	movs	r7, #8
   12a0e:	2a6f      	cmp	r2, #111	; 0x6f
   12a10:	d01d      	beq.n	12a4e <_printf_i+0x106>
   12a12:	270a      	movs	r7, #10
   12a14:	e01b      	b.n	12a4e <_printf_i+0x106>
   12a16:	0022      	movs	r2, r4
   12a18:	2178      	movs	r1, #120	; 0x78
   12a1a:	3245      	adds	r2, #69	; 0x45
   12a1c:	7011      	strb	r1, [r2, #0]
   12a1e:	4a5a      	ldr	r2, [pc, #360]	; (12b88 <_printf_i+0x240>)
   12a20:	6819      	ldr	r1, [r3, #0]
   12a22:	9203      	str	r2, [sp, #12]
   12a24:	1d08      	adds	r0, r1, #4
   12a26:	6822      	ldr	r2, [r4, #0]
   12a28:	6018      	str	r0, [r3, #0]
   12a2a:	680d      	ldr	r5, [r1, #0]
   12a2c:	0610      	lsls	r0, r2, #24
   12a2e:	d402      	bmi.n	12a36 <_printf_i+0xee>
   12a30:	0650      	lsls	r0, r2, #25
   12a32:	d500      	bpl.n	12a36 <_printf_i+0xee>
   12a34:	b2ad      	uxth	r5, r5
   12a36:	07d3      	lsls	r3, r2, #31
   12a38:	d502      	bpl.n	12a40 <_printf_i+0xf8>
   12a3a:	2320      	movs	r3, #32
   12a3c:	431a      	orrs	r2, r3
   12a3e:	6022      	str	r2, [r4, #0]
   12a40:	2710      	movs	r7, #16
   12a42:	2d00      	cmp	r5, #0
   12a44:	d103      	bne.n	12a4e <_printf_i+0x106>
   12a46:	2320      	movs	r3, #32
   12a48:	6822      	ldr	r2, [r4, #0]
   12a4a:	439a      	bics	r2, r3
   12a4c:	6022      	str	r2, [r4, #0]
   12a4e:	0023      	movs	r3, r4
   12a50:	2200      	movs	r2, #0
   12a52:	3343      	adds	r3, #67	; 0x43
   12a54:	701a      	strb	r2, [r3, #0]
   12a56:	e002      	b.n	12a5e <_printf_i+0x116>
   12a58:	270a      	movs	r7, #10
   12a5a:	4b4a      	ldr	r3, [pc, #296]	; (12b84 <_printf_i+0x23c>)
   12a5c:	9303      	str	r3, [sp, #12]
   12a5e:	6863      	ldr	r3, [r4, #4]
   12a60:	60a3      	str	r3, [r4, #8]
   12a62:	2b00      	cmp	r3, #0
   12a64:	db09      	blt.n	12a7a <_printf_i+0x132>
   12a66:	2204      	movs	r2, #4
   12a68:	6821      	ldr	r1, [r4, #0]
   12a6a:	4391      	bics	r1, r2
   12a6c:	6021      	str	r1, [r4, #0]
   12a6e:	2d00      	cmp	r5, #0
   12a70:	d105      	bne.n	12a7e <_printf_i+0x136>
   12a72:	9e04      	ldr	r6, [sp, #16]
   12a74:	2b00      	cmp	r3, #0
   12a76:	d011      	beq.n	12a9c <_printf_i+0x154>
   12a78:	e07b      	b.n	12b72 <_printf_i+0x22a>
   12a7a:	2d00      	cmp	r5, #0
   12a7c:	d079      	beq.n	12b72 <_printf_i+0x22a>
   12a7e:	9e04      	ldr	r6, [sp, #16]
   12a80:	0028      	movs	r0, r5
   12a82:	0039      	movs	r1, r7
   12a84:	f7fe fcec 	bl	11460 <__aeabi_uidivmod>
   12a88:	9b03      	ldr	r3, [sp, #12]
   12a8a:	3e01      	subs	r6, #1
   12a8c:	5c5b      	ldrb	r3, [r3, r1]
   12a8e:	0028      	movs	r0, r5
   12a90:	7033      	strb	r3, [r6, #0]
   12a92:	0039      	movs	r1, r7
   12a94:	f7fe fc5e 	bl	11354 <__aeabi_uidiv>
   12a98:	1e05      	subs	r5, r0, #0
   12a9a:	d1f1      	bne.n	12a80 <_printf_i+0x138>
   12a9c:	2f08      	cmp	r7, #8
   12a9e:	d109      	bne.n	12ab4 <_printf_i+0x16c>
   12aa0:	6823      	ldr	r3, [r4, #0]
   12aa2:	07db      	lsls	r3, r3, #31
   12aa4:	d506      	bpl.n	12ab4 <_printf_i+0x16c>
   12aa6:	6863      	ldr	r3, [r4, #4]
   12aa8:	6922      	ldr	r2, [r4, #16]
   12aaa:	4293      	cmp	r3, r2
   12aac:	dc02      	bgt.n	12ab4 <_printf_i+0x16c>
   12aae:	2330      	movs	r3, #48	; 0x30
   12ab0:	3e01      	subs	r6, #1
   12ab2:	7033      	strb	r3, [r6, #0]
   12ab4:	9b04      	ldr	r3, [sp, #16]
   12ab6:	1b9b      	subs	r3, r3, r6
   12ab8:	6123      	str	r3, [r4, #16]
   12aba:	e02b      	b.n	12b14 <_printf_i+0x1cc>
   12abc:	6809      	ldr	r1, [r1, #0]
   12abe:	681a      	ldr	r2, [r3, #0]
   12ac0:	0608      	lsls	r0, r1, #24
   12ac2:	d407      	bmi.n	12ad4 <_printf_i+0x18c>
   12ac4:	0649      	lsls	r1, r1, #25
   12ac6:	d505      	bpl.n	12ad4 <_printf_i+0x18c>
   12ac8:	1d11      	adds	r1, r2, #4
   12aca:	6019      	str	r1, [r3, #0]
   12acc:	6813      	ldr	r3, [r2, #0]
   12ace:	8aa2      	ldrh	r2, [r4, #20]
   12ad0:	801a      	strh	r2, [r3, #0]
   12ad2:	e004      	b.n	12ade <_printf_i+0x196>
   12ad4:	1d11      	adds	r1, r2, #4
   12ad6:	6019      	str	r1, [r3, #0]
   12ad8:	6813      	ldr	r3, [r2, #0]
   12ada:	6962      	ldr	r2, [r4, #20]
   12adc:	601a      	str	r2, [r3, #0]
   12ade:	2300      	movs	r3, #0
   12ae0:	9e04      	ldr	r6, [sp, #16]
   12ae2:	6123      	str	r3, [r4, #16]
   12ae4:	e016      	b.n	12b14 <_printf_i+0x1cc>
   12ae6:	681a      	ldr	r2, [r3, #0]
   12ae8:	1d11      	adds	r1, r2, #4
   12aea:	6019      	str	r1, [r3, #0]
   12aec:	6816      	ldr	r6, [r2, #0]
   12aee:	2100      	movs	r1, #0
   12af0:	6862      	ldr	r2, [r4, #4]
   12af2:	0030      	movs	r0, r6
   12af4:	f000 f92a 	bl	12d4c <memchr>
   12af8:	2800      	cmp	r0, #0
   12afa:	d001      	beq.n	12b00 <_printf_i+0x1b8>
   12afc:	1b80      	subs	r0, r0, r6
   12afe:	6060      	str	r0, [r4, #4]
   12b00:	6863      	ldr	r3, [r4, #4]
   12b02:	e003      	b.n	12b0c <_printf_i+0x1c4>
   12b04:	0026      	movs	r6, r4
   12b06:	3642      	adds	r6, #66	; 0x42
   12b08:	7032      	strb	r2, [r6, #0]
   12b0a:	2301      	movs	r3, #1
   12b0c:	6123      	str	r3, [r4, #16]
   12b0e:	2300      	movs	r3, #0
   12b10:	9a04      	ldr	r2, [sp, #16]
   12b12:	7013      	strb	r3, [r2, #0]
   12b14:	9b07      	ldr	r3, [sp, #28]
   12b16:	aa09      	add	r2, sp, #36	; 0x24
   12b18:	9300      	str	r3, [sp, #0]
   12b1a:	0021      	movs	r1, r4
   12b1c:	9b06      	ldr	r3, [sp, #24]
   12b1e:	9805      	ldr	r0, [sp, #20]
   12b20:	f7ff fea4 	bl	1286c <_printf_common>
   12b24:	1c43      	adds	r3, r0, #1
   12b26:	d102      	bne.n	12b2e <_printf_i+0x1e6>
   12b28:	2001      	movs	r0, #1
   12b2a:	4240      	negs	r0, r0
   12b2c:	e027      	b.n	12b7e <_printf_i+0x236>
   12b2e:	6923      	ldr	r3, [r4, #16]
   12b30:	0032      	movs	r2, r6
   12b32:	9906      	ldr	r1, [sp, #24]
   12b34:	9805      	ldr	r0, [sp, #20]
   12b36:	9d07      	ldr	r5, [sp, #28]
   12b38:	47a8      	blx	r5
   12b3a:	1c43      	adds	r3, r0, #1
   12b3c:	d0f4      	beq.n	12b28 <_printf_i+0x1e0>
   12b3e:	6823      	ldr	r3, [r4, #0]
   12b40:	2500      	movs	r5, #0
   12b42:	079b      	lsls	r3, r3, #30
   12b44:	d40f      	bmi.n	12b66 <_printf_i+0x21e>
   12b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12b48:	68e0      	ldr	r0, [r4, #12]
   12b4a:	4298      	cmp	r0, r3
   12b4c:	da17      	bge.n	12b7e <_printf_i+0x236>
   12b4e:	0018      	movs	r0, r3
   12b50:	e015      	b.n	12b7e <_printf_i+0x236>
   12b52:	0022      	movs	r2, r4
   12b54:	2301      	movs	r3, #1
   12b56:	3219      	adds	r2, #25
   12b58:	9906      	ldr	r1, [sp, #24]
   12b5a:	9805      	ldr	r0, [sp, #20]
   12b5c:	9e07      	ldr	r6, [sp, #28]
   12b5e:	47b0      	blx	r6
   12b60:	1c43      	adds	r3, r0, #1
   12b62:	d0e1      	beq.n	12b28 <_printf_i+0x1e0>
   12b64:	3501      	adds	r5, #1
   12b66:	68e3      	ldr	r3, [r4, #12]
   12b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12b6a:	1a9b      	subs	r3, r3, r2
   12b6c:	429d      	cmp	r5, r3
   12b6e:	dbf0      	blt.n	12b52 <_printf_i+0x20a>
   12b70:	e7e9      	b.n	12b46 <_printf_i+0x1fe>
   12b72:	0026      	movs	r6, r4
   12b74:	9b03      	ldr	r3, [sp, #12]
   12b76:	3642      	adds	r6, #66	; 0x42
   12b78:	781b      	ldrb	r3, [r3, #0]
   12b7a:	7033      	strb	r3, [r6, #0]
   12b7c:	e78e      	b.n	12a9c <_printf_i+0x154>
   12b7e:	b00b      	add	sp, #44	; 0x2c
   12b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	00014bf9 	.word	0x00014bf9
   12b88:	00014c0a 	.word	0x00014c0a

00012b8c <_putc_r>:
   12b8c:	b570      	push	{r4, r5, r6, lr}
   12b8e:	0006      	movs	r6, r0
   12b90:	000d      	movs	r5, r1
   12b92:	0014      	movs	r4, r2
   12b94:	2800      	cmp	r0, #0
   12b96:	d004      	beq.n	12ba2 <_putc_r+0x16>
   12b98:	6983      	ldr	r3, [r0, #24]
   12b9a:	2b00      	cmp	r3, #0
   12b9c:	d101      	bne.n	12ba2 <_putc_r+0x16>
   12b9e:	f7ff fac9 	bl	12134 <__sinit>
   12ba2:	4b12      	ldr	r3, [pc, #72]	; (12bec <_putc_r+0x60>)
   12ba4:	429c      	cmp	r4, r3
   12ba6:	d101      	bne.n	12bac <_putc_r+0x20>
   12ba8:	6874      	ldr	r4, [r6, #4]
   12baa:	e008      	b.n	12bbe <_putc_r+0x32>
   12bac:	4b10      	ldr	r3, [pc, #64]	; (12bf0 <_putc_r+0x64>)
   12bae:	429c      	cmp	r4, r3
   12bb0:	d101      	bne.n	12bb6 <_putc_r+0x2a>
   12bb2:	68b4      	ldr	r4, [r6, #8]
   12bb4:	e003      	b.n	12bbe <_putc_r+0x32>
   12bb6:	4b0f      	ldr	r3, [pc, #60]	; (12bf4 <_putc_r+0x68>)
   12bb8:	429c      	cmp	r4, r3
   12bba:	d100      	bne.n	12bbe <_putc_r+0x32>
   12bbc:	68f4      	ldr	r4, [r6, #12]
   12bbe:	68a3      	ldr	r3, [r4, #8]
   12bc0:	3b01      	subs	r3, #1
   12bc2:	60a3      	str	r3, [r4, #8]
   12bc4:	2b00      	cmp	r3, #0
   12bc6:	da05      	bge.n	12bd4 <_putc_r+0x48>
   12bc8:	69a2      	ldr	r2, [r4, #24]
   12bca:	4293      	cmp	r3, r2
   12bcc:	db08      	blt.n	12be0 <_putc_r+0x54>
   12bce:	b2eb      	uxtb	r3, r5
   12bd0:	2b0a      	cmp	r3, #10
   12bd2:	d005      	beq.n	12be0 <_putc_r+0x54>
   12bd4:	6823      	ldr	r3, [r4, #0]
   12bd6:	b2e8      	uxtb	r0, r5
   12bd8:	1c5a      	adds	r2, r3, #1
   12bda:	6022      	str	r2, [r4, #0]
   12bdc:	701d      	strb	r5, [r3, #0]
   12bde:	e004      	b.n	12bea <_putc_r+0x5e>
   12be0:	0022      	movs	r2, r4
   12be2:	0029      	movs	r1, r5
   12be4:	0030      	movs	r0, r6
   12be6:	f7ff f8e3 	bl	11db0 <__swbuf_r>
   12bea:	bd70      	pop	{r4, r5, r6, pc}
   12bec:	00014b88 	.word	0x00014b88
   12bf0:	00014ba8 	.word	0x00014ba8
   12bf4:	00014bc8 	.word	0x00014bc8

00012bf8 <__sread>:
   12bf8:	b570      	push	{r4, r5, r6, lr}
   12bfa:	000c      	movs	r4, r1
   12bfc:	250e      	movs	r5, #14
   12bfe:	5f49      	ldrsh	r1, [r1, r5]
   12c00:	f000 f8d6 	bl	12db0 <_read_r>
   12c04:	2800      	cmp	r0, #0
   12c06:	db03      	blt.n	12c10 <__sread+0x18>
   12c08:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12c0a:	181b      	adds	r3, r3, r0
   12c0c:	6563      	str	r3, [r4, #84]	; 0x54
   12c0e:	e003      	b.n	12c18 <__sread+0x20>
   12c10:	89a2      	ldrh	r2, [r4, #12]
   12c12:	4b02      	ldr	r3, [pc, #8]	; (12c1c <__sread+0x24>)
   12c14:	4013      	ands	r3, r2
   12c16:	81a3      	strh	r3, [r4, #12]
   12c18:	bd70      	pop	{r4, r5, r6, pc}
   12c1a:	46c0      	nop			; (mov r8, r8)
   12c1c:	ffffefff 	.word	0xffffefff

00012c20 <__swrite>:
   12c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c22:	001f      	movs	r7, r3
   12c24:	898b      	ldrh	r3, [r1, #12]
   12c26:	0005      	movs	r5, r0
   12c28:	000c      	movs	r4, r1
   12c2a:	0016      	movs	r6, r2
   12c2c:	05db      	lsls	r3, r3, #23
   12c2e:	d505      	bpl.n	12c3c <__swrite+0x1c>
   12c30:	230e      	movs	r3, #14
   12c32:	5ec9      	ldrsh	r1, [r1, r3]
   12c34:	2200      	movs	r2, #0
   12c36:	2302      	movs	r3, #2
   12c38:	f000 f874 	bl	12d24 <_lseek_r>
   12c3c:	89a2      	ldrh	r2, [r4, #12]
   12c3e:	4b05      	ldr	r3, [pc, #20]	; (12c54 <__swrite+0x34>)
   12c40:	0028      	movs	r0, r5
   12c42:	4013      	ands	r3, r2
   12c44:	81a3      	strh	r3, [r4, #12]
   12c46:	0032      	movs	r2, r6
   12c48:	230e      	movs	r3, #14
   12c4a:	5ee1      	ldrsh	r1, [r4, r3]
   12c4c:	003b      	movs	r3, r7
   12c4e:	f000 f81f 	bl	12c90 <_write_r>
   12c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c54:	ffffefff 	.word	0xffffefff

00012c58 <__sseek>:
   12c58:	b570      	push	{r4, r5, r6, lr}
   12c5a:	000c      	movs	r4, r1
   12c5c:	250e      	movs	r5, #14
   12c5e:	5f49      	ldrsh	r1, [r1, r5]
   12c60:	f000 f860 	bl	12d24 <_lseek_r>
   12c64:	89a3      	ldrh	r3, [r4, #12]
   12c66:	1c42      	adds	r2, r0, #1
   12c68:	d103      	bne.n	12c72 <__sseek+0x1a>
   12c6a:	4a05      	ldr	r2, [pc, #20]	; (12c80 <__sseek+0x28>)
   12c6c:	4013      	ands	r3, r2
   12c6e:	81a3      	strh	r3, [r4, #12]
   12c70:	e004      	b.n	12c7c <__sseek+0x24>
   12c72:	2280      	movs	r2, #128	; 0x80
   12c74:	0152      	lsls	r2, r2, #5
   12c76:	4313      	orrs	r3, r2
   12c78:	81a3      	strh	r3, [r4, #12]
   12c7a:	6560      	str	r0, [r4, #84]	; 0x54
   12c7c:	bd70      	pop	{r4, r5, r6, pc}
   12c7e:	46c0      	nop			; (mov r8, r8)
   12c80:	ffffefff 	.word	0xffffefff

00012c84 <__sclose>:
   12c84:	b510      	push	{r4, lr}
   12c86:	230e      	movs	r3, #14
   12c88:	5ec9      	ldrsh	r1, [r1, r3]
   12c8a:	f000 f815 	bl	12cb8 <_close_r>
   12c8e:	bd10      	pop	{r4, pc}

00012c90 <_write_r>:
   12c90:	b570      	push	{r4, r5, r6, lr}
   12c92:	0005      	movs	r5, r0
   12c94:	0008      	movs	r0, r1
   12c96:	0011      	movs	r1, r2
   12c98:	2200      	movs	r2, #0
   12c9a:	4c06      	ldr	r4, [pc, #24]	; (12cb4 <_write_r+0x24>)
   12c9c:	6022      	str	r2, [r4, #0]
   12c9e:	001a      	movs	r2, r3
   12ca0:	f7fb fa94 	bl	e1cc <_write>
   12ca4:	1c43      	adds	r3, r0, #1
   12ca6:	d103      	bne.n	12cb0 <_write_r+0x20>
   12ca8:	6823      	ldr	r3, [r4, #0]
   12caa:	2b00      	cmp	r3, #0
   12cac:	d000      	beq.n	12cb0 <_write_r+0x20>
   12cae:	602b      	str	r3, [r5, #0]
   12cb0:	bd70      	pop	{r4, r5, r6, pc}
   12cb2:	46c0      	nop			; (mov r8, r8)
   12cb4:	20000dfc 	.word	0x20000dfc

00012cb8 <_close_r>:
   12cb8:	2300      	movs	r3, #0
   12cba:	b570      	push	{r4, r5, r6, lr}
   12cbc:	4c06      	ldr	r4, [pc, #24]	; (12cd8 <_close_r+0x20>)
   12cbe:	0005      	movs	r5, r0
   12cc0:	0008      	movs	r0, r1
   12cc2:	6023      	str	r3, [r4, #0]
   12cc4:	f7fb fabc 	bl	e240 <_close>
   12cc8:	1c43      	adds	r3, r0, #1
   12cca:	d103      	bne.n	12cd4 <_close_r+0x1c>
   12ccc:	6823      	ldr	r3, [r4, #0]
   12cce:	2b00      	cmp	r3, #0
   12cd0:	d000      	beq.n	12cd4 <_close_r+0x1c>
   12cd2:	602b      	str	r3, [r5, #0]
   12cd4:	bd70      	pop	{r4, r5, r6, pc}
   12cd6:	46c0      	nop			; (mov r8, r8)
   12cd8:	20000dfc 	.word	0x20000dfc

00012cdc <_fstat_r>:
   12cdc:	2300      	movs	r3, #0
   12cde:	b570      	push	{r4, r5, r6, lr}
   12ce0:	4c06      	ldr	r4, [pc, #24]	; (12cfc <_fstat_r+0x20>)
   12ce2:	0005      	movs	r5, r0
   12ce4:	0008      	movs	r0, r1
   12ce6:	0011      	movs	r1, r2
   12ce8:	6023      	str	r3, [r4, #0]
   12cea:	f7fb faad 	bl	e248 <_fstat>
   12cee:	1c43      	adds	r3, r0, #1
   12cf0:	d103      	bne.n	12cfa <_fstat_r+0x1e>
   12cf2:	6823      	ldr	r3, [r4, #0]
   12cf4:	2b00      	cmp	r3, #0
   12cf6:	d000      	beq.n	12cfa <_fstat_r+0x1e>
   12cf8:	602b      	str	r3, [r5, #0]
   12cfa:	bd70      	pop	{r4, r5, r6, pc}
   12cfc:	20000dfc 	.word	0x20000dfc

00012d00 <_isatty_r>:
   12d00:	2300      	movs	r3, #0
   12d02:	b570      	push	{r4, r5, r6, lr}
   12d04:	4c06      	ldr	r4, [pc, #24]	; (12d20 <_isatty_r+0x20>)
   12d06:	0005      	movs	r5, r0
   12d08:	0008      	movs	r0, r1
   12d0a:	6023      	str	r3, [r4, #0]
   12d0c:	f7fb faa2 	bl	e254 <_isatty>
   12d10:	1c43      	adds	r3, r0, #1
   12d12:	d103      	bne.n	12d1c <_isatty_r+0x1c>
   12d14:	6823      	ldr	r3, [r4, #0]
   12d16:	2b00      	cmp	r3, #0
   12d18:	d000      	beq.n	12d1c <_isatty_r+0x1c>
   12d1a:	602b      	str	r3, [r5, #0]
   12d1c:	bd70      	pop	{r4, r5, r6, pc}
   12d1e:	46c0      	nop			; (mov r8, r8)
   12d20:	20000dfc 	.word	0x20000dfc

00012d24 <_lseek_r>:
   12d24:	b570      	push	{r4, r5, r6, lr}
   12d26:	0005      	movs	r5, r0
   12d28:	0008      	movs	r0, r1
   12d2a:	0011      	movs	r1, r2
   12d2c:	2200      	movs	r2, #0
   12d2e:	4c06      	ldr	r4, [pc, #24]	; (12d48 <_lseek_r+0x24>)
   12d30:	6022      	str	r2, [r4, #0]
   12d32:	001a      	movs	r2, r3
   12d34:	f7fb fa90 	bl	e258 <_lseek>
   12d38:	1c43      	adds	r3, r0, #1
   12d3a:	d103      	bne.n	12d44 <_lseek_r+0x20>
   12d3c:	6823      	ldr	r3, [r4, #0]
   12d3e:	2b00      	cmp	r3, #0
   12d40:	d000      	beq.n	12d44 <_lseek_r+0x20>
   12d42:	602b      	str	r3, [r5, #0]
   12d44:	bd70      	pop	{r4, r5, r6, pc}
   12d46:	46c0      	nop			; (mov r8, r8)
   12d48:	20000dfc 	.word	0x20000dfc

00012d4c <memchr>:
   12d4c:	b2c9      	uxtb	r1, r1
   12d4e:	1882      	adds	r2, r0, r2
   12d50:	4290      	cmp	r0, r2
   12d52:	d004      	beq.n	12d5e <memchr+0x12>
   12d54:	7803      	ldrb	r3, [r0, #0]
   12d56:	428b      	cmp	r3, r1
   12d58:	d002      	beq.n	12d60 <memchr+0x14>
   12d5a:	3001      	adds	r0, #1
   12d5c:	e7f8      	b.n	12d50 <memchr+0x4>
   12d5e:	2000      	movs	r0, #0
   12d60:	4770      	bx	lr

00012d62 <_realloc_r>:
   12d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d64:	0006      	movs	r6, r0
   12d66:	000c      	movs	r4, r1
   12d68:	0015      	movs	r5, r2
   12d6a:	2900      	cmp	r1, #0
   12d6c:	d104      	bne.n	12d78 <_realloc_r+0x16>
   12d6e:	0011      	movs	r1, r2
   12d70:	f7fe fd3e 	bl	117f0 <_malloc_r>
   12d74:	0004      	movs	r4, r0
   12d76:	e018      	b.n	12daa <_realloc_r+0x48>
   12d78:	2a00      	cmp	r2, #0
   12d7a:	d103      	bne.n	12d84 <_realloc_r+0x22>
   12d7c:	f7fe fcf2 	bl	11764 <_free_r>
   12d80:	002c      	movs	r4, r5
   12d82:	e012      	b.n	12daa <_realloc_r+0x48>
   12d84:	f000 f828 	bl	12dd8 <_malloc_usable_size_r>
   12d88:	4285      	cmp	r5, r0
   12d8a:	d90e      	bls.n	12daa <_realloc_r+0x48>
   12d8c:	0029      	movs	r1, r5
   12d8e:	0030      	movs	r0, r6
   12d90:	f7fe fd2e 	bl	117f0 <_malloc_r>
   12d94:	1e07      	subs	r7, r0, #0
   12d96:	d007      	beq.n	12da8 <_realloc_r+0x46>
   12d98:	0021      	movs	r1, r4
   12d9a:	002a      	movs	r2, r5
   12d9c:	f7fe fcbc 	bl	11718 <memcpy>
   12da0:	0021      	movs	r1, r4
   12da2:	0030      	movs	r0, r6
   12da4:	f7fe fcde 	bl	11764 <_free_r>
   12da8:	003c      	movs	r4, r7
   12daa:	0020      	movs	r0, r4
   12dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00012db0 <_read_r>:
   12db0:	b570      	push	{r4, r5, r6, lr}
   12db2:	0005      	movs	r5, r0
   12db4:	0008      	movs	r0, r1
   12db6:	0011      	movs	r1, r2
   12db8:	2200      	movs	r2, #0
   12dba:	4c06      	ldr	r4, [pc, #24]	; (12dd4 <_read_r+0x24>)
   12dbc:	6022      	str	r2, [r4, #0]
   12dbe:	001a      	movs	r2, r3
   12dc0:	f7fb f9e4 	bl	e18c <_read>
   12dc4:	1c43      	adds	r3, r0, #1
   12dc6:	d103      	bne.n	12dd0 <_read_r+0x20>
   12dc8:	6823      	ldr	r3, [r4, #0]
   12dca:	2b00      	cmp	r3, #0
   12dcc:	d000      	beq.n	12dd0 <_read_r+0x20>
   12dce:	602b      	str	r3, [r5, #0]
   12dd0:	bd70      	pop	{r4, r5, r6, pc}
   12dd2:	46c0      	nop			; (mov r8, r8)
   12dd4:	20000dfc 	.word	0x20000dfc

00012dd8 <_malloc_usable_size_r>:
   12dd8:	1f0b      	subs	r3, r1, #4
   12dda:	681a      	ldr	r2, [r3, #0]
   12ddc:	1f10      	subs	r0, r2, #4
   12dde:	2a00      	cmp	r2, #0
   12de0:	da04      	bge.n	12dec <_malloc_usable_size_r+0x14>
   12de2:	1889      	adds	r1, r1, r2
   12de4:	3904      	subs	r1, #4
   12de6:	680b      	ldr	r3, [r1, #0]
   12de8:	18d0      	adds	r0, r2, r3
   12dea:	3804      	subs	r0, #4
   12dec:	4770      	bx	lr
   12dee:	0000      	movs	r0, r0
   12df0:	000081c6 	.word	0x000081c6
   12df4:	0000819e 	.word	0x0000819e
   12df8:	000081a2 	.word	0x000081a2
   12dfc:	000081a6 	.word	0x000081a6
   12e00:	000081aa 	.word	0x000081aa
   12e04:	000081ae 	.word	0x000081ae
   12e08:	000081b2 	.word	0x000081b2
   12e0c:	000081b6 	.word	0x000081b6
   12e10:	000081ba 	.word	0x000081ba
   12e14:	000081be 	.word	0x000081be
   12e18:	00000100 	.word	0x00000100
   12e1c:	0000826e 	.word	0x0000826e
   12e20:	00008246 	.word	0x00008246
   12e24:	0000824c 	.word	0x0000824c
   12e28:	00008252 	.word	0x00008252
   12e2c:	00008252 	.word	0x00008252
   12e30:	00008258 	.word	0x00008258
   12e34:	00008258 	.word	0x00008258
   12e38:	00008258 	.word	0x00008258
   12e3c:	0000825e 	.word	0x0000825e
   12e40:	00008264 	.word	0x00008264
   12e44:	0000868a 	.word	0x0000868a
   12e48:	00008666 	.word	0x00008666
   12e4c:	0000866c 	.word	0x0000866c
   12e50:	00008672 	.word	0x00008672
   12e54:	00008672 	.word	0x00008672
   12e58:	00008678 	.word	0x00008678
   12e5c:	00008678 	.word	0x00008678
   12e60:	00008678 	.word	0x00008678
   12e64:	0000867e 	.word	0x0000867e
   12e68:	00008684 	.word	0x00008684

00012e6c <__FUNCTION__.14217>:
   12e6c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   12e7c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   12e8c:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   12e9c:	6320746c 0000646d 00009778 00009748     lt cmd..x...H...
   12eac:	00009740 00009758 00009750 00009770     @...X...P...p...
   12ebc:	00009760 00009768                       `...h...

00012ec4 <__FUNCTION__.13096>:
   12ec4:	5f666968 65636572 00657669              hif_receive.

00012ed0 <__FUNCTION__.13112>:
   12ed0:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   12ee0:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   12ef0:	20676e69 6e776f64 002e2e2e 46494828     ing down....(HIF
   12f00:	69614629 6f74206c 6b617720 74207075     )Fail to wakup t
   12f10:	63206568 00706968 66696828 49572029     he chip.(hif) WI
   12f20:	485f4946 5f54534f 5f564352 4c525443     FI_HOST_RCV_CTRL
   12f30:	6220315f 66207375 006c6961 66696828     _1 bus fail.(hif
   12f40:	64612029 73657264 75622073 61662073     ) address bus fa
   12f50:	00006c69 66696828 6f432029 70757272     il..(hif) Corrup
   12f60:	20646574 6b636170 53207465 20657a69     ted packet Size 
   12f70:	7525203d 204c3c20 7525203d 2047202c     = %u <L = %u, G 
   12f80:	7525203d 504f202c 25203d20 3e583230     = %u, OP = %02X>
   12f90:	0000000a 49464957 6c616320 6361626c     ....WIFI callbac
   12fa0:	7369206b 746f6e20 67657220 65747369     k is not registe
   12fb0:	00646572 6b6f6353 63207465 626c6c61     red.Scoket callb
   12fc0:	206b6361 6e207369 7220746f 73696765     ack is not regis
   12fd0:	65726574 00000064 2061744f 6c6c6163     tered...Ota call
   12fe0:	6b636162 20736920 20746f6e 69676572     back is not regi
   12ff0:	72657473 00006465 70797243 63206f74     stered..Crypto c
   13000:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   13010:	73696765 65726574 00000064 6d676953     egistered...Sigm
   13020:	61632061 61626c6c 69206b63 6f6e2073     a callback is no
   13030:	65722074 74736967 64657265 00000000     t registered....
   13040:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
   13050:	2070756f 00004449 66696828 6f682029     oup ID..(hif) ho
   13060:	61207473 64207070 276e6469 65732074     st app didn't se
   13070:	58522074 6e6f4420 253c2065 253c3e75     t RX Done <%u><%
   13080:	000a3e58 66696828 72572029 20676e6f     X>..(hif) Wrong 
   13090:	657a6953 00000000 66696828 61462029     Size....(hif) Fa
   130a0:	2065736c 65746e69 70757272 6c252074     lse interrupt %l
   130b0:	00000078 66696828 61462029 74206c69     x...(hif) Fail t
   130c0:	6552206f 69206461 7265746e 74707572     o Read interrupt
   130d0:	67657220 00000000 46494828 61462029      reg....(HIF) Fa
   130e0:	74206c69 6168206f 656c646e 746e6920     il to handle int
   130f0:	75727265 25207470 72742064 67412079     errupt %d try Ag
   13100:	2e6e6961 00000a2e 66696820 6365725f     ain..... hif_rec
   13110:	65766965 6e49203a 696c6176 72612064     eive: Invalid ar
   13120:	656d7567 0000746e 20505041 75716552     gument..APP Requ
   13130:	65747365 69532064 6920657a 616c2073     ested Size is la
   13140:	72656772 61687420 6874206e 65722065     rger than the re
   13150:	65766963 75622064 72656666 7a697320     cived buffer siz
   13160:	253c2065 253c3e75 0a3e756c 00000000     e <%u><%lu>.....
   13170:	20505041 75716552 65747365 64412064     APP Requested Ad
   13180:	73657264 65622073 646e6f79 65687420     dress beyond the
   13190:	63657220 64657669 66756220 20726566      recived buffer 
   131a0:	72646461 20737365 20646e61 676e656c     address and leng
   131b0:	00006874 20705247 6425203f 0000000a     th..GRp ? %d....

000131c0 <__FUNCTION__.13068>:
   131c0:	5f666968 646e6573 00000000              hif_send....

000131cc <__FUNCTION__.13078>:
   131cc:	5f666968 00727369                       hif_isr.

000131d4 <__FUNCTION__.13084>:
   131d4:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

000131e4 <__FUNCTION__.13076>:
   131e4:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

000131f4 <__FUNCTION__.13047>:
   131f4:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00013200 <__FUNCTION__.13104>:
   13200:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   13210:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   13220:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   13230:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   13240:	2064656e 000a6425 41564e49 2044494c     ned %d..INVALID 
   13250:	4e494f50 00524554 41564e49 2044494c     POINTER.INVALID 
   13260:	44495353 00000000 41564e49 2044494c     SSID....INVALID 
   13270:	00004843 41564e49 2044494c 50434844     CH..INVALID DHCP
   13280:	52455320 20524556 00005049 41564e49      SERVER IP..INVA
   13290:	2044494c 2059454b 45444e49 00000058     LID KEY INDEX...
   132a0:	41564e49 2044494c 2059454b 49525453     INVALID KEY STRI
   132b0:	5320474e 00455a49 41564e49 2044494c     NG SIZE.INVALID 
   132c0:	2059454b 455a4953 00000000 41564e49     KEY SIZE....INVA
   132d0:	2044494c 20415057 2059454b 455a4953     LID WPA KEY SIZE
   132e0:	00000000 41564e49 2044494c 48545541     ....INVALID AUTH
   132f0:	49544e45 49544143 4d204e4f 0045444f     ENTICATION MODE.
   13300:	6d726946 65726177 72657620 3a202020     Firmware ver   :
   13310:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
   13320:	0a752520 00000000 6d726946 65726177      %u.....Firmware
   13330:	69754220 2520646c 69542073 2520656d      Build %s Time %
   13340:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
   13350:	69726420 20726576 20726576 7525203a      driver ver : %u
   13360:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
   13370:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
   13380:	313a3132 39303a30 00000000 20727041     21:10:09....Apr 
   13390:	32203232 00373130 76697244 62207265     22 2017.Driver b
   133a0:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
   133b0:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
   133c0:	65562065 6f697372 0000006e 2079654b     e Version...Key 
   133d0:	6e207369 7620746f 64696c61 00000000     is not valid....
   133e0:	61766e49 2064696c 0079654b 44495353     Invalid Key.SSID
   133f0:	4e454c20 564e4920 44494c41 00000000      LEN INVALID....
   13400:	49204843 4c41564e 00004449 61766e49     CH INVALID..Inva
   13410:	2064696c 20706557 2079656b 65646e69     lid Wep key inde
   13420:	64252078 0000000a 61766e49 2064696c     x %d....Invalid 
   13430:	20706557 2079656b 676e656c 25206874     Wep key length %
   13440:	00000a64 6f636e49 63657272 53502074     d...Incorrect PS
   13450:	656b204b 656c2079 6874676e 00000000     K key length....
   13460:	65646e75 656e6966 65732064 79742063     undefined sec ty
   13470:	00006570 41564e49 2044494c 6f206f4e     pe..INVALID No o
   13480:	63732066 73206e61 73746f6c 64252021     f scan slots! %d
   13490:	0000000a 41564e49 2044494c 6e616373     ....INVALID scan
   134a0:	6f6c7320 69742074 2021656d 000a6425      slot time! %d..
   134b0:	41564e49 2044494c 6f206f4e 72702066     INVALID No of pr
   134c0:	2065626f 75716572 73747365 72657020     obe requests per
   134d0:	61637320 6c73206e 2520746f 00000a64      scan slot %d...
   134e0:	41564e49 2044494c 49535352 72687420     INVALID RSSI thr
   134f0:	6f687365 2520646c 000a2064 5f53505f     eshold %d .._PS_
   13500:	56524553 205f5245 6e207369 6420746f     SERVER_ is not d
   13510:	6e696665 00006465 7473694c 63206e65     efined..Listen c
   13520:	6e6e6168 73206c65 6c756f68 6e6f2064     hannel should on
   13530:	6220796c 324d2065 49575f4d 435f4946     ly be M2M_WIFI_C
   13540:	2f315f48 31312f36 00000020 45574f50     H_1/6/11 ...POWE
   13550:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
   13560:	2044494c 414d4f44 4e204e49 00454d41     LID DOMAIN NAME.
   13570:	474e5250 66754220 20726566 65637865     PRNG Buffer exce
   13580:	64656465 78616d20 6d756d69 7a697320     eded maximum siz
   13590:	64252065 20726f20 4c4c554e 66754220     e %d or NULL Buf
   135a0:	0a726566 00000000 20737542 6f727265     fer.....Bus erro
   135b0:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   135c0:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   135d0:	20656874 70696863 00000000 76697244     the chip....Driv
   135e0:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   135f0:	000a786c 6c696166 74206465 6564206f     lx..failed to de
   13600:	696e692d 6c616974 00657a69              -initialize.

0001360c <__FUNCTION__.12959>:
   1360c:	70696863 6965645f 0074696e              chip_deinit.

00013618 <__FUNCTION__.12910>:
   13618:	70696863 6b61775f 00000065 696d6e5b     chip_wake...[nmi
   13628:	61747320 3a5d7472 69616620 6e69206c      start]: fail in
   13638:	62207469 00007375 70696843 20444920     it bus..Chip ID 
   13648:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   13658:	6e65206f 656c6261 746e6920 75727265     o enable interru
   13668:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   13678:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   13688:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   13698:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   136a8:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   136b8:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   136c8:	75622074 00000073                       t bus...

000136d0 <__FUNCTION__.12957>:
   136d0:	645f6d6e 695f7672 0074696e              nm_drv_init.

000136dc <__FUNCTION__.12964>:
   136dc:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   136ec:	0000a738 0000a738 0000a768 0000a6ea     8...8...h.......
   136fc:	0000a70e 0000a71c 0000a74e 0000a74e     ........N...N...
   1370c:	0000a796 0000a6da 0000a7f8 0000a7f8     ................
   1371c:	0000a7f8 0000a7f8 0000a72a cac4c9c3     ........*.......

0001372c <__FUNCTION__.12310>:
   1372c:	5f697073 61746164 6972775f 00006574     spi_data_write..

0001373c <__FUNCTION__.12263>:
   1373c:	5f697073 00646d63                       spi_cmd.

00013744 <__FUNCTION__.12270>:
   13744:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00013754 <__FUNCTION__.12322>:
   13754:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00013764 <__FUNCTION__.12379>:
   13764:	735f6d6e 695f6970 0074696e              nm_spi_init.

00013770 <__FUNCTION__.12333>:
   13770:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00013780 <__FUNCTION__.12279>:
   13780:	5f697073 5f646d63 00707372 696d6e5b     spi_cmd_rsp.[nmi
   13790:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   137a0:	72772064 2c657469 73756220 72726520     d write, bus err
   137b0:	2e2e726f 0000002e 696d6e5b 69707320     or......[nmi spi
   137c0:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   137d0:	6e6f7073 72206573 2c646165 73756220     sponse read, bus
   137e0:	72726520 2e2e726f 0000002e 696d6e5b      error......[nmi
   137f0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   13800:	72206174 6f707365 2065736e 64616572     ta response read
   13810:	7562202c 72652073 2e726f72 00002e2e     , bus error.....
   13820:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13830:	61642064 72206174 6f707365 2065736e     d data response 
   13840:	64616572 282e2e2e 78323025 00000a29     read...(%02x)...
   13850:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13860:	61642064 62206174 6b636f6c 61657220     d data block rea
   13870:	62202c64 65207375 726f7272 002e2e2e     d, bus error....
   13880:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13890:	61642064 62206174 6b636f6c 63726320     d data block crc
   138a0:	61657220 62202c64 65207375 726f7272      read, bus error
   138b0:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   138c0:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   138d0:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
   138e0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   138f0:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   13900:	74697277 65722065 25282067 29783830     write reg (%08x)
   13910:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
   13920:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   13930:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   13940:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   13950:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
   13960:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13970:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   13980:	64616572 67657220 30252820 2e297838     read reg (%08x).
   13990:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   139a0:	656c6961 61642064 72206174 2e646165     ailed data read.
   139b0:	00002e2e 65736552 6e612074 65722064     ....Reset and re
   139c0:	20797274 25206425 000a786c 696d6e5b     try %d %lx..[nmi
   139d0:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   139e0:	6e726574 72206c61 20646165 746f7270     ternal read prot
   139f0:	6c6f636f 74697720 52432068 6e6f2043     ocol with CRC on
   13a00:	6572202c 69727974 7720676e 20687469     , retyring with 
   13a10:	20435243 2e66666f 00002e2e 696d6e5b     CRC off.....[nmi
   13a20:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   13a30:	6e726574 72206c61 20646165 746f7270     ternal read prot
   13a40:	6c6f636f 002e2e2e 696d6e5b 69707320     ocol....[nmi spi
   13a50:	46203a5d 656c6961 6e692064 6e726574     ]: Failed intern
   13a60:	77206c61 65746972 6f727020 6f636f74     al write protoco
   13a70:	6572206c 2e2e2e67 00000000 696d6e5b     l reg.......[nmi
   13a80:	69707320 46203a5d 206c6961 20646d63      spi]: Fail cmd 
   13a90:	64616572 69686320 64692070 002e2e2e     read chip id....
   13aa0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13ab0:	6d632064 72202c64 20646165 636f6c62     d cmd, read bloc
   13ac0:	2528206b 29783830 0a2e2e2e 00000000     k (%08x)........
   13ad0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13ae0:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   13af0:	64616572 6f6c6220 28206b63 78383025     read block (%08x
   13b00:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
   13b10:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   13b20:	61746164 61657220 2e2e2e64 00000000     data read.......
   13b30:	65736552 6e612074 65722064 20797274     Reset and retry 
   13b40:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
   13b50:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   13b60:	77202c64 65746972 6f6c6220 28206b63     d, write block (
   13b70:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   13b80:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
   13b90:	7220646d 6f707365 2c65736e 69727720     md response, wri
   13ba0:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
   13bb0:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13bc0:	656c6961 61642064 62206174 6b636f6c     ailed data block
   13bd0:	646d6320 69727720 202c6574 20737562      cmd write, bus 
   13be0:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
   13bf0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   13c00:	62206174 6b636f6c 69727720 202c6574     ta block write, 
   13c10:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   13c20:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13c30:	61642064 62206174 6b636f6c 63726320     d data block crc
   13c40:	69727720 202c6574 20737562 6f727265      write, bus erro
   13c50:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   13c60:	46203a5d 656c6961 75622064 72652073     ]: Failed bus er
   13c70:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   13c80:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   13c90:	6f707365 2065736e 64616572 7825202c     esponse read, %x
   13ca0:	20782520 000a7825 696d6e5b 69707320      %x %x..[nmi spi
   13cb0:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   13cc0:	61746164 69727720 2e2e6574 0000002e     data write......

00013cd0 <__FUNCTION__.12345>:
   13cd0:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00013ce0 <__FUNCTION__.12295>:
   13ce0:	5f697073 61746164 6165725f 00000064     spi_data_read...

00013cf0 <crc7_syndrome_table>:
   13cf0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   13d00:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   13d10:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   13d20:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   13d30:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   13d40:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   13d50:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   13d60:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   13d70:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   13d80:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   13d90:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   13da0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   13db0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   13dc0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   13dd0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   13de0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

00013df0 <__FUNCTION__.12358>:
   13df0:	735f6d6e 725f6970 00646165 52524528     nm_spi_read.(ERR
   13e00:	75432952 6e657272 253c2074 000a3e64     R)Current <%d>..
   13e10:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   13e20:	4449206e 25203d20 000a0d64 6b636f53     n ID = %d...Sock
   13e30:	206f7420 656c6564 3c206574 0a3e6425      to delete <%d>.
   13e40:	00000000 20494e53 65637845 20736465     ....SNI Exceeds 
   13e50:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
   13e60:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
   13e70:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
   13e80:	204c5353 6b636f53 00007465 0000c0ae     SSL Socket......
   13e90:	0000c0ae 0000c0a4 0000c0ae 0000c0a4     ................
   13ea0:	0000c08a 0000c08a 0000c0ae 0000c0ae     ................
   13eb0:	0000c0ae 0000c0ae 0000c0ae 0000c0ae     ................
   13ec0:	0000c0ae 0000c0ae 0000c0ae 0000c0ae     ................
   13ed0:	0000c0ae 0000c0ae 0000c0ae 0000c0ae     ................
   13ee0:	0000c0ae 0000c0ae 0000c0ae 0000c0ae     ................
   13ef0:	0000c0ae 0000c0ae 0000c0ae 0000c0ae     ................
   13f00:	0000c0ae 0000c0ae 0000c0ae 0000c0ae     ................
   13f10:	0000c0ae 0000c0ae 0000c0ae 0000c0ae     ................
   13f20:	0000c0ae 0000c0ae 0000c0ae 0000c0ae     ................
   13f30:	0000c0ae 0000c0ae 0000c0ae 0000c0ae     ................
   13f40:	0000c0ae 0000c0ae 0000c0ae 0000c0ae     ................
   13f50:	0000c0ae 0000c0ae 0000c0ae 0000c0ae     ................
   13f60:	0000c0ae 0000c0ae 0000c0ae 0000c0ae     ................
   13f70:	0000c0ae 0000c0ae 0000c0ae 0000c0ae     ................
   13f80:	0000c0ae 0000c0ae 0000c0ae 0000c0a4     ................
   13f90:	0000c0a4 0000c0b6 0000c0b6 0000c0b6     ................
   13fa0:	0000c0b6 42000800 42000c00 42001000     .......B...B...B
   13fb0:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
   13fc0:	00000e0d 0000d29e 0000d29a 0000d29a     ................
   13fd0:	0000d2f8 0000d2f8 0000d2b2 0000d2a4     ................
   13fe0:	0000d2b8 0000d2e6 0000d4e0 0000d4c0     ................
   13ff0:	0000d4c0 0000d54c 0000d4d2 0000d4ee     ....L...........
   14000:	0000d4c4 0000d4fc 0000d53c              ........<...

0001400c <_tcc_gclk_ids>:
   1400c:	001b1a1a                                ....

00014010 <_tcc_apbcmasks>:
   14010:	00000100 00000200 00000400              ............

0001401c <_tcc_maxs>:
   1401c:	00ffffff 00ffffff 0000ffff              ............

00014028 <_tcc_cc_nums>:
   14028:	00020204                                ....

0001402c <_tcc_ow_nums>:
   1402c:	00020408                                ....

00014030 <_tcc_intflag>:
   14030:	00000001 00000002 00000004 00000008     ................
   14040:	00001000 00002000 00004000 00008000     ..... ...@......
   14050:	00010000 00020000 00040000 00080000     ................

00014060 <tcc_interrupt_vectors.12452>:
   14060:	0011100f 0000f0fe 0000f0f8 0000f0f2     ................
   14070:	0000f0ec 0000f104 0000f10c 0000f104     ................
   14080:	0000f0e6 0000f0e0 0000f104 0000f0da     ................
   14090:	0000f0da 0000f0d4 0000f0ce 0000f10c     ................
   140a0:	0000f19c 0000f196 0000f190 0000f18a     ................
   140b0:	0000f1a2 0000f1aa 0000f1a2 0000f184     ................
   140c0:	0000f17e 0000f1a2 0000f178 0000f178     ~.......x...x...
   140d0:	0000f172 0000f16c 0000f1aa 0000f20a     r...l...........
   140e0:	0000f204 0000f1fe 0000f1f8 0000f210     ................
   140f0:	0000f210 0000f210 0000f1f2 0000f1ec     ................
   14100:	0000f210 0000f1e6 0000f1e6 0000f1e0     ................
   14110:	0000f1da 33323130 37363534 62613938     ....0123456789ab
   14120:	66656463 656d7461 2e312f6c 00322e30     cdefatmel/1.0.2.
   14130:	20544547 00000000 54534f50 00000020     GET ....POST ...
   14140:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   14150:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   14160:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   14170:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   14180:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
   14190:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   141a0:	00000000 65636341 452d7470 646f636e     ....Accept-Encod
   141b0:	3a676e69 000a0d20 65636341 432d7470     ing: ...Accept-C
   141c0:	73726168 203a7465 2d667475 000a0d38     harset: utf-8...
   141d0:	6e617254 72656673 636e452d 6e69646f     Transfer-Encodin
   141e0:	63203a67 6b6e7568 0a0d6465 00000000     g: chunked......
   141f0:	00007525 746e6f43 2d746e65 676e654c     %u..Content-Leng
   14200:	203a6874 00000000 70747468 002f2f3a     th: ....http://.
   14210:	70747468 2f2f3a73 00000000 6e617254     https://....Tran
   14220:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   14230:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   14240:	50545448 0000002f 00000d31 42002000     HTTP/...1.... .B
   14250:	42002400 42002800 0000fa94 0000fa9c     .$.B.(.B........
   14260:	0000faae 0000fb10 0000fc6e              ........n...

0001426c <main_mqtt_broker>:
   1426c:	322e3639 372e3534 33312e37 00000035     96.245.77.135...
   1427c:	6f736572 5f65766c 203a6263 49207325     resolve_cb: %s I
   1428c:	64612050 73657264 73692073 2e642520     P address is %d.
   1429c:	252e6425 64252e64 0a0d0a0d 00000000     %d.%d.%d........
   142ac:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   142bc:	462d6957 73692069 746f6e20 6e6f6320     Wi-Fi is not con
   142cc:	7463656e 0d2e6465 00000000 72617473     nected......star
   142dc:	6f645f74 6f6c6e77 203a6461 75716572     t_download: requ
   142ec:	20747365 73207369 20746e65 65726c61     est is sent alre
   142fc:	2e796461 0000000d 72617473 6f645f74     ady.....start_do
   1430c:	6f6c6e77 203a6461 6e6e7572 20676e69     wnload: running 
   1431c:	6e776f64 64616f6c 726c6120 79646165     download already
   1432c:	00000d2e 72617473 6f645f74 6f6c6e77     ....start_downlo
   1433c:	203a6461 646e6573 20676e69 50545448     ad: sending HTTP
   1434c:	71657220 74736575 0d2e2e2e 00000000      request........
   1435c:	70747468 2f2f3a73 2e777777 73616573     https://www.seas
   1436c:	6570752e 652e6e6e 7e2f7564 69707372     .upenn.edu/~rspi
   1437c:	2f726563 622e5746 00006e69 72617473     cer/FW.bin..star
   1438c:	6f645f74 6f6c6e77 43206461 203a4352     t_download CRC: 
   1439c:	646e6573 20676e69 50545448 71657220     sending HTTP req
   143ac:	74736575 0d2e2e2e 00000000 70747468     uest........http
   143bc:	2f2f3a73 2e777777 73616573 6570752e     s://www.seas.upe
   143cc:	652e6e6e 7e2f7564 69707372 2f726563     nn.edu/~rspicer/
   143dc:	435f5746 622e4352 00006e69 462d6957     FW_CRC.bin..Wi-F
   143ec:	6f632069 63656e6e 0d646574 00000000     i connected.....
   143fc:	462d6957 69642069 6e6f6373 7463656e     Wi-Fi disconnect
   1440c:	000d6465 656b6163 73736f62 00000000     ed..cakeboss....
   1441c:	796f7254 41646e41 49646562 6568546e     TroyAndAbedInThe
   1442c:	65646f4d 0000006d 462d6957 50492069     Modem...Wi-Fi IP
   1443c:	20736920 252e7525 75252e75 0d75252e      is %u.%u.%u.%u.
   1444c:	0000000a 6e6e6f43 20746365 6c696166     ....Connect fail
   1445c:	206f7420 76726573 25287265 20212973      to server(%s)! 
   1446c:	72746572 74692079 74756120 74616d6f     retry it automat
   1447c:	6c616369 0d2e796c 0000000a 69797254     ically......Tryi
   1448c:	7420676e 7573206f 2e2e2e62 0000000d     ng to sub.......
   1449c:	74616863 00000000 75746361 726f7461     chat....actuator
   144ac:	00000000 72677075 00656461 736e6573     ....upgrade.sens
   144bc:	306c6665 00000000 736e6573 316c6665     efl0....sensefl1
   144cc:	00000000 73627553 70697263 6e6f6974     ....Subscription
   144dc:	6f632073 656c706d 2e646574 0000000d     s completed.....
   144ec:	5454514d 6f726220 2072656b 6c636564     MQTT broker decl
   144fc:	20656e69 72756f79 63636120 21737365     ine your access!
   1450c:	72726520 6320726f 2065646f 0a0d6425      error code %d..
   1451c:	00000000 203e3e20 00000000 3e207325     .... >> ....%s >
   1452c:	0000203e 72677055 20656461 75716572     > ..Upgrade requ
   1453c:	65747365 00000d64 00006425 736e6553     ested...%d..Sens
   1454c:	4620726f 7220304c 65757165 64657473     or FL0 requested
   1455c:	6553203a 6465736e 0d642520 0000000a     : Sensed %d.....
   1456c:	00306c66 736e6553 4620726f 7220314c     fl0.Sensor FL1 r
   1457c:	65757165 64657473 6553203a 6465736e     equested: Sensed
   1458c:	0d642520 0000000a 00316c66 5454514d      %d.....fl1.MQTT
   1459c:	73696420 6e6e6f63 65746365 00000d64      disconnected...
   145ac:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   145bc:	4f435f49 43454e4e 0d444554 00000000     I_CONNECTED.....
   145cc:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   145dc:	49445f49 4e4f4353 5443454e 000d4445     I_DISCONNECTED..
   145ec:	69666977 3a62635f 20504920 72646461     wifi_cb: IP addr
   145fc:	20737365 25207369 75252e75 2e75252e     ess is %u.%u.%u.
   1460c:	0a0d7525 00000000 70696843 64696420     %u......Chip did
   1461c:	7720746e 20656b61 0000000d 70747468     nt wake ....http
   1462c:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   1463c:	5448203a 63205054 6e65696c 6f732074     : HTTP client so
   1464c:	74656b63 6e6f6320 7463656e 0d2e6465     cket connected..
   1465c:	00000000 70747468 696c635f 5f746e65     ....http_client_
   1466c:	6c6c6163 6b636162 6572203a 73657571     callback: reques
   1467c:	6f632074 656c706d 2e646574 0000000d     t completed.....
   1468c:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   1469c:	6b636162 6572203a 76696563 72206465     back: received r
   146ac:	6f707365 2065736e 64207525 20617461     esponse %u data 
   146bc:	657a6973 0d752520 0000000a 6c6c6143     size %u.....Call
   146cc:	6b636162 5243203a 6f642043 6f6c6e77     back: CRC downlo
   146dc:	2e2e6461 2e2e2e2e 0000000d 65636552     ad..........Rece
   146ec:	64657669 0d782520 0000000a 70747468     ived %x.....http
   146fc:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   1470c:	5548435f 44454b4e 54414420 72203a41     _CHUNKED DATA: r
   1471c:	69656365 20646576 70736572 65736e6f     eceived response
   1472c:	74616420 69732061 2520657a 000a0d75      data size %u...
   1473c:	73726946 6c622074 206b636f 676e656c     First block leng
   1474c:	25206874 52432064 25203a43 000a0d75     th %d CRC: %u...
   1475c:	636f6c42 656c206b 6874676e 20642520     Block length %d 
   1476c:	3a435243 0d752520 0000000a 70747468     CRC: %u.....http
   1477c:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   1478c:	6964203a 6e6f6373 7463656e 206e6f69     : disconnection 
   1479c:	73616572 253a6e6f 000a0d64 5454514d     reason:%d...MQTT
   147ac:	696e6920 6c616974 74617a69 206e6f69      initialization 
   147bc:	6c696166 202e6465 6f727245 6f632072     failed. Error co
   147cc:	69206564 25282073 0a0d2964 00000000     de is (%d)......
   147dc:	5454514d 67657220 65747369 61632072     MQTT register ca
   147ec:	61626c6c 66206b63 656c6961 45202e64     llback failed. E
   147fc:	726f7272 646f6320 73692065 64252820     rror code is (%d
   1480c:	000a0d29 6d612049 72696620 7261776d     )...I am firmwar
   1481c:	65762065 6f697372 6425206e 00000a0d     e version %d....
   1482c:	72657355 25203a20 000a0d73 73736150     User : %s...Pass
   1483c:	64726f77 25203a20 000a0d73 6e69616d     word : %s...main
   1484c:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   1485c:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
   1486c:	0000000a 736e6553 46206465 203a304c     ....Sensed FL0: 
   1487c:	0a0d6425 00000000 736e6553 46206465     %d......Sensed F
   1488c:	203a314c 0a0d6425 00000000 74697257     L1: %d......Writ
   1489c:	69665f65 61776d72 77206572 74207361     e_firmware was t
   148ac:	0d657572 00000000 6e69616d 326d203a     rue.....main: m2
   148bc:	69775f6d 645f6966 696e6965 61632074     m_wifi_deinit ca
   148cc:	65206c6c 726f7272 64252821 000a0d29     ll error!(%d)...
   148dc:	666e6f63 72756769 74685f65 635f7074     configure_http_c
   148ec:	6e65696c 48203a74 20505454 65696c63     lient: HTTP clie
   148fc:	6920746e 6974696e 7a696c61 6f697461     nt initializatio
   1490c:	6166206e 64656c69 72282021 25207365     n failed! (res %
   1491c:	0a0d2964 00000000 6e69616d 326d203a     d)......main: m2
   1492c:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
   1493c:	72726520 2021726f 73657228 29642520      error! (res %d)
   1494c:	00000a0d 76727553 64657669 74746820     ....Survived htt
   1495c:	6c632070 746e6569 74657320 000d7075     p client setup..
   1496c:	63657845 6e697475 6d692067 3a656761     Executing image:
   1497c:	2c642520 204c4420 203a6f74 0a0d6425      %d, DL to: %d..
   1498c:	00000000 6e776f64 64616f6c 7269665f     ....download_fir
   1499c:	7261776d 63203a65 656e6e6f 6e697463     mware: connectin
   149ac:	6f742067 46695720 50412069 2e732520     g to WiFi AP %s.
   149bc:	0a0d2e2e 00000000 6e776f64 64616f6c     ........download
   149cc:	7269665f 7261776d 64203a65 2e656e6f     _firmware: done.
   149dc:	0000000d 636c6143 74616c75 43206465     ....Calculated C
   149ec:	203a4352 0a0d7825 00000000 614d0d0a     RC: %x........Ma
   149fc:	203a6e69 656e6f44 776f6420 616f6c6e     in: Done downloa
   14a0c:	676e6964 72696620 7261776d 6e612065     ding firmware an
   14a1c:	52432064 000d0a43 614d0d0a 203a6e69     d CRC.....Main: 
   14a2c:	20435243 4354414d 21444548 61747320     CRC MATCHED! sta
   14a3c:	6e697472 69662067 61776d72 75206572     rting firmware u
   14a4c:	61726770 202e6564 00000d0a 4d200d0a     pgrade. ...... M
   14a5c:	3a6e6961 43524320 65684320 46206b63     ain: CRC Check F
   14a6c:	216c6961 00000d0a 7349514d 43007064     ail!....MQIsdp.C
   14a7c:	00000000                                ....

00014a80 <_global_impure_ptr>:
   14a80:	2000001c                                ... 

00014a84 <_ctype_>:
   14a84:	20202000 20202020 28282020 20282828     .         ((((( 
   14a94:	20202020 20202020 20202020 20202020                     
   14aa4:	10108820 10101010 10101010 10101010      ...............
   14ab4:	04040410 04040404 10040404 10101010     ................
   14ac4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   14ad4:	01010101 01010101 01010101 10101010     ................
   14ae4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   14af4:	02020202 02020202 02020202 10101010     ................
   14b04:	00000020 00000000 00000000 00000000      ...............
	...

00014b88 <__sf_fake_stdin>:
	...

00014ba8 <__sf_fake_stdout>:
	...

00014bc8 <__sf_fake_stderr>:
	...
   14be8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   14bf8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   14c08:	31300046 35343332 39383736 64636261     F.0123456789abcd
   14c18:	00006665                                ef..

00014c1c <_init>:
   14c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c1e:	46c0      	nop			; (mov r8, r8)
   14c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14c22:	bc08      	pop	{r3}
   14c24:	469e      	mov	lr, r3
   14c26:	4770      	bx	lr

00014c28 <__init_array_start>:
   14c28:	000080dd 	.word	0x000080dd

00014c2c <_fini>:
   14c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c2e:	46c0      	nop			; (mov r8, r8)
   14c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14c32:	bc08      	pop	{r3}
   14c34:	469e      	mov	lr, r3
   14c36:	4770      	bx	lr

00014c38 <__fini_array_start>:
   14c38:	000080b5 	.word	0x000080b5
