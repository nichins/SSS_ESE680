
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ca94  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001ec  20000000  00014a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000db4  200001ec  00014c80  000201ec  2**2
                  ALLOC
  3 .stack        00002000  20000fa0  00015a34  000201ec  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
  6 .debug_info   00067aec  00000000  00000000  000202de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008b8a  00000000  00000000  00087dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00019c26  00000000  00000000  00090954  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f68  00000000  00000000  000aa57a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001b40  00000000  00000000  000ab4e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00023452  00000000  00000000  000ad022  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001f216  00000000  00000000  000d0474  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00096f71  00000000  00000000  000ef68a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003748  00000000  00000000  001865fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <exception_table>:
    8000:	a0 2f 00 20 21 e1 00 00 1d e1 00 00 1d e1 00 00     ./. !...........
	...
    802c:	1d e1 00 00 00 00 00 00 00 00 00 00 1d e1 00 00     ................
    803c:	1d e1 00 00 1d e1 00 00 1d e1 00 00 1d e1 00 00     ................
    804c:	1d e1 00 00 9d be 00 00 1d e1 00 00 1d e1 00 00     ................
    805c:	1d e1 00 00 1d e1 00 00 a1 c6 00 00 b1 c6 00 00     ................
    806c:	c1 c6 00 00 d1 c6 00 00 e1 c6 00 00 f1 c6 00 00     ................
    807c:	ed e0 00 00 fd e0 00 00 0d e1 00 00 1d e1 00 00     ................
    808c:	1d e1 00 00 1d e1 00 00 00 00 00 00 00 00 00 00     ................
    809c:	1d e1 00 00 1d e1 00 00 1d e1 00 00 1d e1 00 00     ................
    80ac:	1d e1 00 00 00 00 00 00                             ........

000080b4 <__do_global_dtors_aux>:
    80b4:	b510      	push	{r4, lr}
    80b6:	4c06      	ldr	r4, [pc, #24]	; (80d0 <__do_global_dtors_aux+0x1c>)
    80b8:	7823      	ldrb	r3, [r4, #0]
    80ba:	2b00      	cmp	r3, #0
    80bc:	d107      	bne.n	80ce <__do_global_dtors_aux+0x1a>
    80be:	4b05      	ldr	r3, [pc, #20]	; (80d4 <__do_global_dtors_aux+0x20>)
    80c0:	2b00      	cmp	r3, #0
    80c2:	d002      	beq.n	80ca <__do_global_dtors_aux+0x16>
    80c4:	4804      	ldr	r0, [pc, #16]	; (80d8 <__do_global_dtors_aux+0x24>)
    80c6:	e000      	b.n	80ca <__do_global_dtors_aux+0x16>
    80c8:	bf00      	nop
    80ca:	2301      	movs	r3, #1
    80cc:	7023      	strb	r3, [r4, #0]
    80ce:	bd10      	pop	{r4, pc}
    80d0:	200001ec 	.word	0x200001ec
    80d4:	00000000 	.word	0x00000000
    80d8:	00014a94 	.word	0x00014a94

000080dc <frame_dummy>:
    80dc:	4b08      	ldr	r3, [pc, #32]	; (8100 <frame_dummy+0x24>)
    80de:	b510      	push	{r4, lr}
    80e0:	2b00      	cmp	r3, #0
    80e2:	d003      	beq.n	80ec <frame_dummy+0x10>
    80e4:	4907      	ldr	r1, [pc, #28]	; (8104 <frame_dummy+0x28>)
    80e6:	4808      	ldr	r0, [pc, #32]	; (8108 <frame_dummy+0x2c>)
    80e8:	e000      	b.n	80ec <frame_dummy+0x10>
    80ea:	bf00      	nop
    80ec:	4807      	ldr	r0, [pc, #28]	; (810c <frame_dummy+0x30>)
    80ee:	6803      	ldr	r3, [r0, #0]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d100      	bne.n	80f6 <frame_dummy+0x1a>
    80f4:	bd10      	pop	{r4, pc}
    80f6:	4b06      	ldr	r3, [pc, #24]	; (8110 <frame_dummy+0x34>)
    80f8:	2b00      	cmp	r3, #0
    80fa:	d0fb      	beq.n	80f4 <frame_dummy+0x18>
    80fc:	4798      	blx	r3
    80fe:	e7f9      	b.n	80f4 <frame_dummy+0x18>
    8100:	00000000 	.word	0x00000000
    8104:	200001f0 	.word	0x200001f0
    8108:	00014a94 	.word	0x00014a94
    810c:	00014a94 	.word	0x00014a94
    8110:	00000000 	.word	0x00000000

00008114 <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    8114:	b530      	push	{r4, r5, lr}
    8116:	b085      	sub	sp, #20
    8118:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    811a:	2300      	movs	r3, #0
    811c:	9303      	str	r3, [sp, #12]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    811e:	6805      	ldr	r5, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    8120:	4b2f      	ldr	r3, [pc, #188]	; (81e0 <at25dfx_chip_check_presence+0xcc>)
    8122:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
    8124:	792b      	ldrb	r3, [r5, #4]
    8126:	2b00      	cmp	r3, #0
    8128:	d156      	bne.n	81d8 <at25dfx_chip_check_presence+0xc4>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
    812a:	3301      	adds	r3, #1
    812c:	712b      	strb	r3, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    812e:	4b2d      	ldr	r3, [pc, #180]	; (81e4 <at25dfx_chip_check_presence+0xd0>)
    8130:	4798      	blx	r3
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    8132:	229f      	movs	r2, #159	; 0x9f
    8134:	ab01      	add	r3, sp, #4
    8136:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    8138:	7962      	ldrb	r2, [r4, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    813a:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    813c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    813e:	2900      	cmp	r1, #0
    8140:	d104      	bne.n	814c <at25dfx_chip_check_presence+0x38>
		return &(ports[port_index]->Group[group_index]);
    8142:	0953      	lsrs	r3, r2, #5
    8144:	01db      	lsls	r3, r3, #7
    8146:	4928      	ldr	r1, [pc, #160]	; (81e8 <at25dfx_chip_check_presence+0xd4>)
    8148:	468c      	mov	ip, r1
    814a:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    814c:	211f      	movs	r1, #31
    814e:	4011      	ands	r1, r2
    8150:	2201      	movs	r2, #1
    8152:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8154:	615a      	str	r2, [r3, #20]
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    8156:	2201      	movs	r2, #1
    8158:	a901      	add	r1, sp, #4
    815a:	6820      	ldr	r0, [r4, #0]
    815c:	4b23      	ldr	r3, [pc, #140]	; (81ec <at25dfx_chip_check_presence+0xd8>)
    815e:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    8160:	2300      	movs	r3, #0
    8162:	2203      	movs	r2, #3
    8164:	a903      	add	r1, sp, #12
    8166:	6820      	ldr	r0, [r4, #0]
    8168:	4d21      	ldr	r5, [pc, #132]	; (81f0 <at25dfx_chip_check_presence+0xdc>)
    816a:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    816c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    816e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8170:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8172:	2900      	cmp	r1, #0
    8174:	d104      	bne.n	8180 <at25dfx_chip_check_presence+0x6c>
		return &(ports[port_index]->Group[group_index]);
    8176:	0953      	lsrs	r3, r2, #5
    8178:	01db      	lsls	r3, r3, #7
    817a:	491b      	ldr	r1, [pc, #108]	; (81e8 <at25dfx_chip_check_presence+0xd4>)
    817c:	468c      	mov	ip, r1
    817e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8180:	211f      	movs	r1, #31
    8182:	4011      	ands	r1, r2
    8184:	2201      	movs	r2, #1
    8186:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    8188:	619a      	str	r2, [r3, #24]
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
	module->locked = false;
    818a:	2300      	movs	r3, #0
    818c:	6822      	ldr	r2, [r4, #0]
    818e:	7113      	strb	r3, [r2, #4]
	switch (type) {
    8190:	7923      	ldrb	r3, [r4, #4]
    8192:	2b09      	cmp	r3, #9
    8194:	d815      	bhi.n	81c2 <at25dfx_chip_check_presence+0xae>
    8196:	009b      	lsls	r3, r3, #2
    8198:	4a16      	ldr	r2, [pc, #88]	; (81f4 <at25dfx_chip_check_presence+0xe0>)
    819a:	58d3      	ldr	r3, [r2, r3]
    819c:	469f      	mov	pc, r3
		return 0x00431f;
    819e:	4b16      	ldr	r3, [pc, #88]	; (81f8 <at25dfx_chip_check_presence+0xe4>)
    81a0:	e012      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>
		return 0x01441f;
    81a2:	4b16      	ldr	r3, [pc, #88]	; (81fc <at25dfx_chip_check_presence+0xe8>)
    81a4:	e010      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>
		return 0x02451f;
    81a6:	4b16      	ldr	r3, [pc, #88]	; (8200 <at25dfx_chip_check_presence+0xec>)
    81a8:	e00e      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>
		return 0x01451f;
    81aa:	4b16      	ldr	r3, [pc, #88]	; (8204 <at25dfx_chip_check_presence+0xf0>)
    81ac:	e00c      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>
		return 0x02461f;
    81ae:	4b16      	ldr	r3, [pc, #88]	; (8208 <at25dfx_chip_check_presence+0xf4>)
    81b0:	e00a      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>
		return 0x03461f;
    81b2:	4b16      	ldr	r3, [pc, #88]	; (820c <at25dfx_chip_check_presence+0xf8>)
    81b4:	e008      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>
		return 0x00861f;
    81b6:	4b16      	ldr	r3, [pc, #88]	; (8210 <at25dfx_chip_check_presence+0xfc>)
    81b8:	e006      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>
		return 0x01471f;
    81ba:	4b16      	ldr	r3, [pc, #88]	; (8214 <at25dfx_chip_check_presence+0x100>)
    81bc:	e004      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>
		return 0x00481f;
    81be:	4b16      	ldr	r3, [pc, #88]	; (8218 <at25dfx_chip_check_presence+0x104>)
    81c0:	e002      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>
		return 0;
    81c2:	2300      	movs	r3, #0
    81c4:	e000      	b.n	81c8 <at25dfx_chip_check_presence+0xb4>
		return 0x00651f;
    81c6:	4b15      	ldr	r3, [pc, #84]	; (821c <at25dfx_chip_check_presence+0x108>)

	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	if (id == _at25dfx_get_device_id(chip->type)) {
    81c8:	9a03      	ldr	r2, [sp, #12]
    81ca:	429a      	cmp	r2, r3
    81cc:	d002      	beq.n	81d4 <at25dfx_chip_check_presence+0xc0>
		return STATUS_OK;
	} else {
		return STATUS_ERR_NOT_FOUND;
    81ce:	2014      	movs	r0, #20
	}
}
    81d0:	b005      	add	sp, #20
    81d2:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
    81d4:	2000      	movs	r0, #0
    81d6:	e7fb      	b.n	81d0 <at25dfx_chip_check_presence+0xbc>
    81d8:	4b02      	ldr	r3, [pc, #8]	; (81e4 <at25dfx_chip_check_presence+0xd0>)
    81da:	4798      	blx	r3
		return status;
    81dc:	2005      	movs	r0, #5
    81de:	e7f7      	b.n	81d0 <at25dfx_chip_check_presence+0xbc>
    81e0:	0000bdc1 	.word	0x0000bdc1
    81e4:	0000be01 	.word	0x0000be01
    81e8:	41004400 	.word	0x41004400
    81ec:	0000caa1 	.word	0x0000caa1
    81f0:	0000c8d9 	.word	0x0000c8d9
    81f4:	00012e5c 	.word	0x00012e5c
    81f8:	0000431f 	.word	0x0000431f
    81fc:	0001441f 	.word	0x0001441f
    8200:	0002451f 	.word	0x0002451f
    8204:	0001451f 	.word	0x0001451f
    8208:	0002461f 	.word	0x0002461f
    820c:	0003461f 	.word	0x0003461f
    8210:	0000861f 	.word	0x0000861f
    8214:	0001471f 	.word	0x0001471f
    8218:	0000481f 	.word	0x0000481f
    821c:	0000651f 	.word	0x0000651f

00008220 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    8220:	b5f0      	push	{r4, r5, r6, r7, lr}
    8222:	46de      	mov	lr, fp
    8224:	4657      	mov	r7, sl
    8226:	464e      	mov	r6, r9
    8228:	4645      	mov	r5, r8
    822a:	b5e0      	push	{r5, r6, r7, lr}
    822c:	b085      	sub	sp, #20
    822e:	0005      	movs	r5, r0
    8230:	000e      	movs	r6, r1
    8232:	9201      	str	r2, [sp, #4]
    8234:	001f      	movs	r7, r3

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    8236:	185a      	adds	r2, r3, r1
	switch (type) {
    8238:	7903      	ldrb	r3, [r0, #4]
    823a:	2b09      	cmp	r3, #9
    823c:	d815      	bhi.n	826a <at25dfx_chip_write_buffer+0x4a>
    823e:	009b      	lsls	r3, r3, #2
    8240:	49ae      	ldr	r1, [pc, #696]	; (84fc <at25dfx_chip_write_buffer+0x2dc>)
    8242:	58cb      	ldr	r3, [r1, r3]
    8244:	469f      	mov	pc, r3
		return 256 * 1024UL;
    8246:	2380      	movs	r3, #128	; 0x80
    8248:	02db      	lsls	r3, r3, #11
    824a:	e012      	b.n	8272 <at25dfx_chip_write_buffer+0x52>
		return 512 * 1024UL;
    824c:	2380      	movs	r3, #128	; 0x80
    824e:	031b      	lsls	r3, r3, #12
    8250:	e00f      	b.n	8272 <at25dfx_chip_write_buffer+0x52>
		return 1024 * 1024UL;
    8252:	2380      	movs	r3, #128	; 0x80
    8254:	035b      	lsls	r3, r3, #13
    8256:	e00c      	b.n	8272 <at25dfx_chip_write_buffer+0x52>
		return 2048 * 1024UL;
    8258:	2380      	movs	r3, #128	; 0x80
    825a:	039b      	lsls	r3, r3, #14
    825c:	e009      	b.n	8272 <at25dfx_chip_write_buffer+0x52>
		return 4096 * 1024UL;
    825e:	2380      	movs	r3, #128	; 0x80
    8260:	03db      	lsls	r3, r3, #15
    8262:	e006      	b.n	8272 <at25dfx_chip_write_buffer+0x52>
		return 8192 * 1024UL;
    8264:	2380      	movs	r3, #128	; 0x80
    8266:	041b      	lsls	r3, r3, #16
    8268:	e003      	b.n	8272 <at25dfx_chip_write_buffer+0x52>
		return 0;
    826a:	2300      	movs	r3, #0
    826c:	e001      	b.n	8272 <at25dfx_chip_write_buffer+0x52>
		return 64 * 1024UL;
    826e:	2380      	movs	r3, #128	; 0x80
    8270:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
    8272:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    8274:	429a      	cmp	r2, r3
    8276:	d906      	bls.n	8286 <at25dfx_chip_write_buffer+0x66>
	}

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    8278:	b005      	add	sp, #20
    827a:	bc3c      	pop	{r2, r3, r4, r5}
    827c:	4690      	mov	r8, r2
    827e:	4699      	mov	r9, r3
    8280:	46a2      	mov	sl, r4
    8282:	46ab      	mov	fp, r5
    8284:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    8286:	682c      	ldr	r4, [r5, #0]
	cpu_irq_enter_critical();
    8288:	4b9d      	ldr	r3, [pc, #628]	; (8500 <at25dfx_chip_write_buffer+0x2e0>)
    828a:	4798      	blx	r3
	if (module->locked) {
    828c:	7923      	ldrb	r3, [r4, #4]
    828e:	2b00      	cmp	r3, #0
    8290:	d000      	beq.n	8294 <at25dfx_chip_write_buffer+0x74>
    8292:	e12e      	b.n	84f2 <at25dfx_chip_write_buffer+0x2d2>
		module->locked = true;
    8294:	3301      	adds	r3, #1
    8296:	7123      	strb	r3, [r4, #4]
	cpu_irq_leave_critical();
    8298:	4b9a      	ldr	r3, [pc, #616]	; (8504 <at25dfx_chip_write_buffer+0x2e4>)
    829a:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    829c:	2306      	movs	r3, #6
    829e:	aa02      	add	r2, sp, #8
    82a0:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    82a2:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    82a4:	09d1      	lsrs	r1, r2, #7
		return NULL;
    82a6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    82a8:	2900      	cmp	r1, #0
    82aa:	d104      	bne.n	82b6 <at25dfx_chip_write_buffer+0x96>
		return &(ports[port_index]->Group[group_index]);
    82ac:	0953      	lsrs	r3, r2, #5
    82ae:	01db      	lsls	r3, r3, #7
    82b0:	4995      	ldr	r1, [pc, #596]	; (8508 <at25dfx_chip_write_buffer+0x2e8>)
    82b2:	468c      	mov	ip, r1
    82b4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    82b6:	211f      	movs	r1, #31
    82b8:	4011      	ands	r1, r2
    82ba:	2201      	movs	r2, #1
    82bc:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    82be:	615a      	str	r2, [r3, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    82c0:	2201      	movs	r2, #1
    82c2:	a902      	add	r1, sp, #8
    82c4:	6828      	ldr	r0, [r5, #0]
    82c6:	4b91      	ldr	r3, [pc, #580]	; (850c <at25dfx_chip_write_buffer+0x2ec>)
    82c8:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    82ca:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    82cc:	09d1      	lsrs	r1, r2, #7
		return NULL;
    82ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    82d0:	2900      	cmp	r1, #0
    82d2:	d104      	bne.n	82de <at25dfx_chip_write_buffer+0xbe>
		return &(ports[port_index]->Group[group_index]);
    82d4:	0953      	lsrs	r3, r2, #5
    82d6:	01db      	lsls	r3, r3, #7
    82d8:	498b      	ldr	r1, [pc, #556]	; (8508 <at25dfx_chip_write_buffer+0x2e8>)
    82da:	468c      	mov	ip, r1
    82dc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    82de:	211f      	movs	r1, #31
    82e0:	4011      	ands	r1, r2
    82e2:	2201      	movs	r2, #1
    82e4:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    82e6:	619a      	str	r2, [r3, #24]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    82e8:	22ff      	movs	r2, #255	; 0xff
    82ea:	4032      	ands	r2, r6
    82ec:	2380      	movs	r3, #128	; 0x80
    82ee:	005b      	lsls	r3, r3, #1
    82f0:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
    82f2:	1c1a      	adds	r2, r3, #0
    82f4:	b29b      	uxth	r3, r3
    82f6:	42bb      	cmp	r3, r7
    82f8:	d900      	bls.n	82fc <at25dfx_chip_write_buffer+0xdc>
    82fa:	1c3a      	adds	r2, r7, #0
    82fc:	b293      	uxth	r3, r2
    82fe:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
    8300:	2302      	movs	r3, #2
    8302:	aa02      	add	r2, sp, #8
    8304:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    8306:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    8308:	0a33      	lsrs	r3, r6, #8
    830a:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    830c:	0c33      	lsrs	r3, r6, #16
    830e:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    8310:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    8312:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8314:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8316:	2900      	cmp	r1, #0
    8318:	d104      	bne.n	8324 <at25dfx_chip_write_buffer+0x104>
		return &(ports[port_index]->Group[group_index]);
    831a:	0953      	lsrs	r3, r2, #5
    831c:	01db      	lsls	r3, r3, #7
    831e:	497a      	ldr	r1, [pc, #488]	; (8508 <at25dfx_chip_write_buffer+0x2e8>)
    8320:	468c      	mov	ip, r1
    8322:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8324:	211f      	movs	r1, #31
    8326:	4011      	ands	r1, r2
    8328:	2201      	movs	r2, #1
    832a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    832c:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    832e:	2204      	movs	r2, #4
    8330:	a902      	add	r1, sp, #8
    8332:	6828      	ldr	r0, [r5, #0]
    8334:	4b75      	ldr	r3, [pc, #468]	; (850c <at25dfx_chip_write_buffer+0x2ec>)
    8336:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
    8338:	4653      	mov	r3, sl
    833a:	2b00      	cmp	r3, #0
    833c:	d145      	bne.n	83ca <at25dfx_chip_write_buffer+0x1aa>
	port_pin_set_output_level(chip->cs_pin, true);
    833e:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    8340:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8342:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8344:	2900      	cmp	r1, #0
    8346:	d104      	bne.n	8352 <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
    8348:	0953      	lsrs	r3, r2, #5
    834a:	01db      	lsls	r3, r3, #7
    834c:	496e      	ldr	r1, [pc, #440]	; (8508 <at25dfx_chip_write_buffer+0x2e8>)
    834e:	468c      	mov	ip, r1
    8350:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8352:	211f      	movs	r1, #31
    8354:	4011      	ands	r1, r2
    8356:	2201      	movs	r2, #1
    8358:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    835a:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    835c:	682b      	ldr	r3, [r5, #0]
    835e:	6819      	ldr	r1, [r3, #0]
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    8360:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8362:	7e0b      	ldrb	r3, [r1, #24]
    8364:	4213      	tst	r3, r2
    8366:	d0fc      	beq.n	8362 <at25dfx_chip_write_buffer+0x142>
	port_pin_set_output_level(chip->cs_pin, false);
    8368:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    836a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    836c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    836e:	2900      	cmp	r1, #0
    8370:	d104      	bne.n	837c <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
    8372:	0953      	lsrs	r3, r2, #5
    8374:	01db      	lsls	r3, r3, #7
    8376:	4964      	ldr	r1, [pc, #400]	; (8508 <at25dfx_chip_write_buffer+0x2e8>)
    8378:	468c      	mov	ip, r1
    837a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    837c:	211f      	movs	r1, #31
    837e:	4011      	ands	r1, r2
    8380:	2201      	movs	r2, #1
    8382:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    8384:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8386:	682b      	ldr	r3, [r5, #0]
    8388:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    838a:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    838c:	07d2      	lsls	r2, r2, #31
    838e:	d501      	bpl.n	8394 <at25dfx_chip_write_buffer+0x174>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8390:	2205      	movs	r2, #5
    8392:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    8394:	6828      	ldr	r0, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8396:	6802      	ldr	r2, [r0, #0]
    8398:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    839a:	7e13      	ldrb	r3, [r2, #24]
    839c:	420b      	tst	r3, r1
    839e:	d0fc      	beq.n	839a <at25dfx_chip_write_buffer+0x17a>
    83a0:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    83a2:	2400      	movs	r4, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    83a4:	075b      	lsls	r3, r3, #29
    83a6:	d509      	bpl.n	83bc <at25dfx_chip_write_buffer+0x19c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    83a8:	8b53      	ldrh	r3, [r2, #26]
    83aa:	075b      	lsls	r3, r3, #29
    83ac:	d501      	bpl.n	83b2 <at25dfx_chip_write_buffer+0x192>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    83ae:	2304      	movs	r3, #4
    83b0:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    83b2:	7983      	ldrb	r3, [r0, #6]
    83b4:	2b01      	cmp	r3, #1
    83b6:	d00e      	beq.n	83d6 <at25dfx_chip_write_buffer+0x1b6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    83b8:	6a94      	ldr	r4, [r2, #40]	; 0x28
    83ba:	b2e4      	uxtb	r4, r4

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    83bc:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    83be:	2300      	movs	r3, #0
    83c0:	4698      	mov	r8, r3
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    83c2:	2004      	movs	r0, #4
    83c4:	46b4      	mov	ip, r6
    83c6:	002e      	movs	r6, r5
    83c8:	e010      	b.n	83ec <at25dfx_chip_write_buffer+0x1cc>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    83ca:	4652      	mov	r2, sl
    83cc:	9901      	ldr	r1, [sp, #4]
    83ce:	6828      	ldr	r0, [r5, #0]
    83d0:	4b4e      	ldr	r3, [pc, #312]	; (850c <at25dfx_chip_write_buffer+0x2ec>)
    83d2:	4798      	blx	r3
    83d4:	e7b3      	b.n	833e <at25dfx_chip_write_buffer+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    83d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    83d8:	05db      	lsls	r3, r3, #23
    83da:	0ddc      	lsrs	r4, r3, #23
    83dc:	e7ee      	b.n	83bc <at25dfx_chip_write_buffer+0x19c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    83de:	79ab      	ldrb	r3, [r5, #6]
    83e0:	2b01      	cmp	r3, #1
    83e2:	d01a      	beq.n	841a <at25dfx_chip_write_buffer+0x1fa>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    83e4:	6a94      	ldr	r4, [r2, #40]	; 0x28
    83e6:	b2e4      	uxtb	r4, r4
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    83e8:	4221      	tst	r1, r4
    83ea:	d01a      	beq.n	8422 <at25dfx_chip_write_buffer+0x202>
	SercomSpi *const spi_module = &(module->hw->SPI);
    83ec:	6833      	ldr	r3, [r6, #0]
    83ee:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    83f0:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    83f2:	420b      	tst	r3, r1
    83f4:	d0fc      	beq.n	83f0 <at25dfx_chip_write_buffer+0x1d0>
    83f6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    83f8:	420b      	tst	r3, r1
    83fa:	d001      	beq.n	8400 <at25dfx_chip_write_buffer+0x1e0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    83fc:	4643      	mov	r3, r8
    83fe:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    8400:	6835      	ldr	r5, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8402:	682a      	ldr	r2, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8404:	7e13      	ldrb	r3, [r2, #24]
    8406:	4203      	tst	r3, r0
    8408:	d0fc      	beq.n	8404 <at25dfx_chip_write_buffer+0x1e4>
    840a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    840c:	4203      	tst	r3, r0
    840e:	d0eb      	beq.n	83e8 <at25dfx_chip_write_buffer+0x1c8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8410:	8b53      	ldrh	r3, [r2, #26]
    8412:	4203      	tst	r3, r0
    8414:	d0e3      	beq.n	83de <at25dfx_chip_write_buffer+0x1be>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8416:	8350      	strh	r0, [r2, #26]
    8418:	e7e1      	b.n	83de <at25dfx_chip_write_buffer+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    841a:	6a94      	ldr	r4, [r2, #40]	; 0x28
    841c:	05e4      	lsls	r4, r4, #23
    841e:	0de4      	lsrs	r4, r4, #23
    8420:	e7e2      	b.n	83e8 <at25dfx_chip_write_buffer+0x1c8>
    8422:	0035      	movs	r5, r6
    8424:	4666      	mov	r6, ip
	port_pin_set_output_level(chip->cs_pin, true);
    8426:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    8428:	09d1      	lsrs	r1, r2, #7
		return NULL;
    842a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    842c:	2900      	cmp	r1, #0
    842e:	d104      	bne.n	843a <at25dfx_chip_write_buffer+0x21a>
		return &(ports[port_index]->Group[group_index]);
    8430:	0953      	lsrs	r3, r2, #5
    8432:	01db      	lsls	r3, r3, #7
    8434:	4934      	ldr	r1, [pc, #208]	; (8508 <at25dfx_chip_write_buffer+0x2e8>)
    8436:	468c      	mov	ip, r1
    8438:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    843a:	211f      	movs	r1, #31
    843c:	4011      	ands	r1, r2
    843e:	2201      	movs	r2, #1
    8440:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    8442:	619a      	str	r2, [r3, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
    8444:	2010      	movs	r0, #16
	if (status_reg & AT25DFX_STATUS_ERROR) {
    8446:	06a3      	lsls	r3, r4, #26
    8448:	d44f      	bmi.n	84ea <at25dfx_chip_write_buffer+0x2ca>
	length -= cmd.length;
    844a:	4653      	mov	r3, sl
    844c:	1aff      	subs	r7, r7, r3
    844e:	b2bb      	uxth	r3, r7
    8450:	0019      	movs	r1, r3
	while (length && (status == STATUS_OK)) {
    8452:	9a01      	ldr	r2, [sp, #4]
    8454:	4691      	mov	r9, r2
	}
	return STATUS_OK;
    8456:	2000      	movs	r0, #0
    8458:	2b00      	cmp	r3, #0
    845a:	d046      	beq.n	84ea <at25dfx_chip_write_buffer+0x2ca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    845c:	231f      	movs	r3, #31
    845e:	469b      	mov	fp, r3
    8460:	2401      	movs	r4, #1
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    8462:	4b2a      	ldr	r3, [pc, #168]	; (850c <at25dfx_chip_write_buffer+0x2ec>)
    8464:	4698      	mov	r8, r3
    8466:	4653      	mov	r3, sl
    8468:	9301      	str	r3, [sp, #4]
    846a:	468a      	mov	sl, r1
    846c:	e058      	b.n	8520 <at25dfx_chip_write_buffer+0x300>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    846e:	001a      	movs	r2, r3
    8470:	4649      	mov	r1, r9
    8472:	6828      	ldr	r0, [r5, #0]
    8474:	4b25      	ldr	r3, [pc, #148]	; (850c <at25dfx_chip_write_buffer+0x2ec>)
    8476:	4798      	blx	r3
    8478:	e0a4      	b.n	85c4 <at25dfx_chip_write_buffer+0x3a4>
    847a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    847c:	05c0      	lsls	r0, r0, #23
    847e:	0dc0      	lsrs	r0, r0, #23
    8480:	e0e1      	b.n	8646 <at25dfx_chip_write_buffer+0x426>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8482:	79bb      	ldrb	r3, [r7, #6]
    8484:	2b01      	cmp	r3, #1
    8486:	d01a      	beq.n	84be <at25dfx_chip_write_buffer+0x29e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8488:	6a90      	ldr	r0, [r2, #40]	; 0x28
    848a:	b2c0      	uxtb	r0, r0
	} while (status_reg & AT25DFX_STATUS_BUSY);
    848c:	4204      	tst	r4, r0
    848e:	d01a      	beq.n	84c6 <at25dfx_chip_write_buffer+0x2a6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8490:	682b      	ldr	r3, [r5, #0]
    8492:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8494:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    8496:	4223      	tst	r3, r4
    8498:	d0fc      	beq.n	8494 <at25dfx_chip_write_buffer+0x274>
    849a:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    849c:	4223      	tst	r3, r4
    849e:	d001      	beq.n	84a4 <at25dfx_chip_write_buffer+0x284>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    84a0:	2300      	movs	r3, #0
    84a2:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    84a4:	682f      	ldr	r7, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    84a6:	683a      	ldr	r2, [r7, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    84a8:	7e13      	ldrb	r3, [r2, #24]
    84aa:	420b      	tst	r3, r1
    84ac:	d0fc      	beq.n	84a8 <at25dfx_chip_write_buffer+0x288>
    84ae:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    84b0:	420b      	tst	r3, r1
    84b2:	d0eb      	beq.n	848c <at25dfx_chip_write_buffer+0x26c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    84b4:	8b53      	ldrh	r3, [r2, #26]
    84b6:	420b      	tst	r3, r1
    84b8:	d0e3      	beq.n	8482 <at25dfx_chip_write_buffer+0x262>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    84ba:	8351      	strh	r1, [r2, #26]
    84bc:	e7e1      	b.n	8482 <at25dfx_chip_write_buffer+0x262>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    84be:	6a90      	ldr	r0, [r2, #40]	; 0x28
    84c0:	05c0      	lsls	r0, r0, #23
    84c2:	0dc0      	lsrs	r0, r0, #23
    84c4:	e7e2      	b.n	848c <at25dfx_chip_write_buffer+0x26c>
	port_pin_set_output_level(chip->cs_pin, true);
    84c6:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    84c8:	09d9      	lsrs	r1, r3, #7
		return NULL;
    84ca:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    84cc:	2900      	cmp	r1, #0
    84ce:	d104      	bne.n	84da <at25dfx_chip_write_buffer+0x2ba>
		return &(ports[port_index]->Group[group_index]);
    84d0:	095a      	lsrs	r2, r3, #5
    84d2:	01d2      	lsls	r2, r2, #7
    84d4:	490c      	ldr	r1, [pc, #48]	; (8508 <at25dfx_chip_write_buffer+0x2e8>)
    84d6:	468c      	mov	ip, r1
    84d8:	4462      	add	r2, ip
    84da:	4659      	mov	r1, fp
    84dc:	400b      	ands	r3, r1
    84de:	0021      	movs	r1, r4
    84e0:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    84e2:	6191      	str	r1, [r2, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    84e4:	0683      	lsls	r3, r0, #26
    84e6:	d513      	bpl.n	8510 <at25dfx_chip_write_buffer+0x2f0>
		return STATUS_ERR_IO;
    84e8:	2010      	movs	r0, #16
	_at25dfx_spi_unlock(chip->spi);
    84ea:	682b      	ldr	r3, [r5, #0]
	module->locked = false;
    84ec:	2200      	movs	r2, #0
    84ee:	711a      	strb	r2, [r3, #4]
	return status;
    84f0:	e6c2      	b.n	8278 <at25dfx_chip_write_buffer+0x58>
    84f2:	4b04      	ldr	r3, [pc, #16]	; (8504 <at25dfx_chip_write_buffer+0x2e4>)
    84f4:	4798      	blx	r3
		return status;
    84f6:	2005      	movs	r0, #5
    84f8:	e6be      	b.n	8278 <at25dfx_chip_write_buffer+0x58>
    84fa:	46c0      	nop			; (mov r8, r8)
    84fc:	00012e88 	.word	0x00012e88
    8500:	0000bdc1 	.word	0x0000bdc1
    8504:	0000be01 	.word	0x0000be01
    8508:	41004400 	.word	0x41004400
    850c:	0000caa1 	.word	0x0000caa1
		length -= cmd.length;
    8510:	4653      	mov	r3, sl
    8512:	9a01      	ldr	r2, [sp, #4]
    8514:	1a9b      	subs	r3, r3, r2
    8516:	b29b      	uxth	r3, r3
    8518:	469a      	mov	sl, r3
	while (length && (status == STATUS_OK)) {
    851a:	2b00      	cmp	r3, #0
    851c:	d100      	bne.n	8520 <at25dfx_chip_write_buffer+0x300>
    851e:	e094      	b.n	864a <at25dfx_chip_write_buffer+0x42a>
	cmd_buffer[0] = cmd.opcode;
    8520:	ab02      	add	r3, sp, #8
    8522:	2206      	movs	r2, #6
    8524:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    8526:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    8528:	09d9      	lsrs	r1, r3, #7
		return NULL;
    852a:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    852c:	2900      	cmp	r1, #0
    852e:	d104      	bne.n	853a <at25dfx_chip_write_buffer+0x31a>
		return &(ports[port_index]->Group[group_index]);
    8530:	095a      	lsrs	r2, r3, #5
    8532:	01d2      	lsls	r2, r2, #7
    8534:	4946      	ldr	r1, [pc, #280]	; (8650 <at25dfx_chip_write_buffer+0x430>)
    8536:	468c      	mov	ip, r1
    8538:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    853a:	4659      	mov	r1, fp
    853c:	400b      	ands	r3, r1
    853e:	0021      	movs	r1, r4
    8540:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    8542:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    8544:	0022      	movs	r2, r4
    8546:	a902      	add	r1, sp, #8
    8548:	6828      	ldr	r0, [r5, #0]
    854a:	47c0      	blx	r8
	port_pin_set_output_level(chip->cs_pin, true);
    854c:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    854e:	09d9      	lsrs	r1, r3, #7
		return NULL;
    8550:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    8552:	2900      	cmp	r1, #0
    8554:	d104      	bne.n	8560 <at25dfx_chip_write_buffer+0x340>
		return &(ports[port_index]->Group[group_index]);
    8556:	095a      	lsrs	r2, r3, #5
    8558:	01d2      	lsls	r2, r2, #7
    855a:	493d      	ldr	r1, [pc, #244]	; (8650 <at25dfx_chip_write_buffer+0x430>)
    855c:	468c      	mov	ip, r1
    855e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8560:	4659      	mov	r1, fp
    8562:	400b      	ands	r3, r1
    8564:	0021      	movs	r1, r4
    8566:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    8568:	6191      	str	r1, [r2, #24]
		cmd.address += cmd.length;
    856a:	9a01      	ldr	r2, [sp, #4]
    856c:	4694      	mov	ip, r2
    856e:	4466      	add	r6, ip
		cmd.data.tx += cmd.length;
    8570:	44e1      	add	r9, ip
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    8572:	4657      	mov	r7, sl
    8574:	2380      	movs	r3, #128	; 0x80
    8576:	005b      	lsls	r3, r3, #1
    8578:	459a      	cmp	sl, r3
    857a:	d901      	bls.n	8580 <at25dfx_chip_write_buffer+0x360>
    857c:	4b35      	ldr	r3, [pc, #212]	; (8654 <at25dfx_chip_write_buffer+0x434>)
    857e:	881f      	ldrh	r7, [r3, #0]
    8580:	b2bb      	uxth	r3, r7
    8582:	9301      	str	r3, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
    8584:	2302      	movs	r3, #2
    8586:	aa02      	add	r2, sp, #8
    8588:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    858a:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    858c:	0a33      	lsrs	r3, r6, #8
    858e:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    8590:	0c33      	lsrs	r3, r6, #16
    8592:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    8594:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    8596:	09d9      	lsrs	r1, r3, #7
		return NULL;
    8598:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    859a:	2900      	cmp	r1, #0
    859c:	d104      	bne.n	85a8 <at25dfx_chip_write_buffer+0x388>
		return &(ports[port_index]->Group[group_index]);
    859e:	095a      	lsrs	r2, r3, #5
    85a0:	01d2      	lsls	r2, r2, #7
    85a2:	492b      	ldr	r1, [pc, #172]	; (8650 <at25dfx_chip_write_buffer+0x430>)
    85a4:	468c      	mov	ip, r1
    85a6:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    85a8:	4659      	mov	r1, fp
    85aa:	400b      	ands	r3, r1
    85ac:	0021      	movs	r1, r4
    85ae:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    85b0:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    85b2:	2204      	movs	r2, #4
    85b4:	a902      	add	r1, sp, #8
    85b6:	6828      	ldr	r0, [r5, #0]
    85b8:	4b27      	ldr	r3, [pc, #156]	; (8658 <at25dfx_chip_write_buffer+0x438>)
    85ba:	4798      	blx	r3
	if (cmd.length) {
    85bc:	9b01      	ldr	r3, [sp, #4]
    85be:	2b00      	cmp	r3, #0
    85c0:	d000      	beq.n	85c4 <at25dfx_chip_write_buffer+0x3a4>
    85c2:	e754      	b.n	846e <at25dfx_chip_write_buffer+0x24e>
	port_pin_set_output_level(chip->cs_pin, true);
    85c4:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    85c6:	09d9      	lsrs	r1, r3, #7
		return NULL;
    85c8:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    85ca:	2900      	cmp	r1, #0
    85cc:	d104      	bne.n	85d8 <at25dfx_chip_write_buffer+0x3b8>
		return &(ports[port_index]->Group[group_index]);
    85ce:	095a      	lsrs	r2, r3, #5
    85d0:	01d2      	lsls	r2, r2, #7
    85d2:	491f      	ldr	r1, [pc, #124]	; (8650 <at25dfx_chip_write_buffer+0x430>)
    85d4:	468c      	mov	ip, r1
    85d6:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    85d8:	4659      	mov	r1, fp
    85da:	400b      	ands	r3, r1
    85dc:	0021      	movs	r1, r4
    85de:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    85e0:	6191      	str	r1, [r2, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    85e2:	682b      	ldr	r3, [r5, #0]
    85e4:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    85e6:	7e13      	ldrb	r3, [r2, #24]
	while (!spi_is_ready_to_write(chip->spi)) {
    85e8:	4223      	tst	r3, r4
    85ea:	d0fc      	beq.n	85e6 <at25dfx_chip_write_buffer+0x3c6>
	port_pin_set_output_level(chip->cs_pin, false);
    85ec:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    85ee:	09d9      	lsrs	r1, r3, #7
		return NULL;
    85f0:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    85f2:	2900      	cmp	r1, #0
    85f4:	d104      	bne.n	8600 <at25dfx_chip_write_buffer+0x3e0>
		return &(ports[port_index]->Group[group_index]);
    85f6:	095a      	lsrs	r2, r3, #5
    85f8:	01d2      	lsls	r2, r2, #7
    85fa:	4915      	ldr	r1, [pc, #84]	; (8650 <at25dfx_chip_write_buffer+0x430>)
    85fc:	468c      	mov	ip, r1
    85fe:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8600:	4659      	mov	r1, fp
    8602:	400b      	ands	r3, r1
    8604:	0021      	movs	r1, r4
    8606:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    8608:	6151      	str	r1, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    860a:	682b      	ldr	r3, [r5, #0]
    860c:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    860e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    8610:	4222      	tst	r2, r4
    8612:	d001      	beq.n	8618 <at25dfx_chip_write_buffer+0x3f8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8614:	2205      	movs	r2, #5
    8616:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    8618:	682b      	ldr	r3, [r5, #0]
    861a:	469c      	mov	ip, r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    861c:	681a      	ldr	r2, [r3, #0]
    861e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8620:	7e13      	ldrb	r3, [r2, #24]
    8622:	420b      	tst	r3, r1
    8624:	d0fc      	beq.n	8620 <at25dfx_chip_write_buffer+0x400>
    8626:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    8628:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    862a:	075b      	lsls	r3, r3, #29
    862c:	d50b      	bpl.n	8646 <at25dfx_chip_write_buffer+0x426>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    862e:	8b53      	ldrh	r3, [r2, #26]
    8630:	075b      	lsls	r3, r3, #29
    8632:	d501      	bpl.n	8638 <at25dfx_chip_write_buffer+0x418>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8634:	2304      	movs	r3, #4
    8636:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8638:	4663      	mov	r3, ip
    863a:	799b      	ldrb	r3, [r3, #6]
    863c:	2b01      	cmp	r3, #1
    863e:	d100      	bne.n	8642 <at25dfx_chip_write_buffer+0x422>
    8640:	e71b      	b.n	847a <at25dfx_chip_write_buffer+0x25a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8642:	6a90      	ldr	r0, [r2, #40]	; 0x28
    8644:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_read(chip->spi)) {
    8646:	2104      	movs	r1, #4
    8648:	e722      	b.n	8490 <at25dfx_chip_write_buffer+0x270>
	return STATUS_OK;
    864a:	2000      	movs	r0, #0
    864c:	e74d      	b.n	84ea <at25dfx_chip_write_buffer+0x2ca>
    864e:	46c0      	nop			; (mov r8, r8)
    8650:	41004400 	.word	0x41004400
    8654:	00012e84 	.word	0x00012e84
    8658:	0000caa1 	.word	0x0000caa1

0000865c <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    865c:	b5f0      	push	{r4, r5, r6, r7, lr}
    865e:	b083      	sub	sp, #12
    8660:	0004      	movs	r4, r0
    8662:	000e      	movs	r6, r1
    8664:	0015      	movs	r5, r2
	switch (type) {
    8666:	7903      	ldrb	r3, [r0, #4]
    8668:	2b09      	cmp	r3, #9
    866a:	d900      	bls.n	866e <at25dfx_chip_erase_block+0x12>
    866c:	e0f2      	b.n	8854 <at25dfx_chip_erase_block+0x1f8>
    866e:	009b      	lsls	r3, r3, #2
    8670:	4a7b      	ldr	r2, [pc, #492]	; (8860 <at25dfx_chip_erase_block+0x204>)
    8672:	58d3      	ldr	r3, [r2, r3]
    8674:	469f      	mov	pc, r3
		return 256 * 1024UL;
    8676:	2380      	movs	r3, #128	; 0x80
    8678:	02db      	lsls	r3, r3, #11
    867a:	e010      	b.n	869e <at25dfx_chip_erase_block+0x42>
		return 512 * 1024UL;
    867c:	2380      	movs	r3, #128	; 0x80
    867e:	031b      	lsls	r3, r3, #12
    8680:	e00d      	b.n	869e <at25dfx_chip_erase_block+0x42>
		return 1024 * 1024UL;
    8682:	2380      	movs	r3, #128	; 0x80
    8684:	035b      	lsls	r3, r3, #13
    8686:	e00a      	b.n	869e <at25dfx_chip_erase_block+0x42>
		return 2048 * 1024UL;
    8688:	2380      	movs	r3, #128	; 0x80
    868a:	039b      	lsls	r3, r3, #14
    868c:	e007      	b.n	869e <at25dfx_chip_erase_block+0x42>
		return 4096 * 1024UL;
    868e:	2380      	movs	r3, #128	; 0x80
    8690:	03db      	lsls	r3, r3, #15
    8692:	e004      	b.n	869e <at25dfx_chip_erase_block+0x42>
		return 8192 * 1024UL;
    8694:	2380      	movs	r3, #128	; 0x80
    8696:	041b      	lsls	r3, r3, #16
    8698:	e001      	b.n	869e <at25dfx_chip_erase_block+0x42>
		return 64 * 1024UL;
    869a:	2380      	movs	r3, #128	; 0x80
    869c:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
    869e:	2017      	movs	r0, #23
	if (address >= _at25dfx_get_device_size(chip->type)) {
    86a0:	42b3      	cmp	r3, r6
    86a2:	d801      	bhi.n	86a8 <at25dfx_chip_erase_block+0x4c>
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    86a4:	b003      	add	sp, #12
    86a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    86a8:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
    86aa:	4b6e      	ldr	r3, [pc, #440]	; (8864 <at25dfx_chip_erase_block+0x208>)
    86ac:	4798      	blx	r3
	if (module->locked) {
    86ae:	793b      	ldrb	r3, [r7, #4]
    86b0:	2b00      	cmp	r3, #0
    86b2:	d000      	beq.n	86b6 <at25dfx_chip_erase_block+0x5a>
    86b4:	e0d0      	b.n	8858 <at25dfx_chip_erase_block+0x1fc>
		module->locked = true;
    86b6:	3301      	adds	r3, #1
    86b8:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
    86ba:	4b6b      	ldr	r3, [pc, #428]	; (8868 <at25dfx_chip_erase_block+0x20c>)
    86bc:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    86be:	2306      	movs	r3, #6
    86c0:	466a      	mov	r2, sp
    86c2:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    86c4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    86c6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    86c8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    86ca:	2900      	cmp	r1, #0
    86cc:	d104      	bne.n	86d8 <at25dfx_chip_erase_block+0x7c>
		return &(ports[port_index]->Group[group_index]);
    86ce:	0953      	lsrs	r3, r2, #5
    86d0:	01db      	lsls	r3, r3, #7
    86d2:	4966      	ldr	r1, [pc, #408]	; (886c <at25dfx_chip_erase_block+0x210>)
    86d4:	468c      	mov	ip, r1
    86d6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    86d8:	211f      	movs	r1, #31
    86da:	4011      	ands	r1, r2
    86dc:	2201      	movs	r2, #1
    86de:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    86e0:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    86e2:	2201      	movs	r2, #1
    86e4:	4669      	mov	r1, sp
    86e6:	6820      	ldr	r0, [r4, #0]
    86e8:	4b61      	ldr	r3, [pc, #388]	; (8870 <at25dfx_chip_erase_block+0x214>)
    86ea:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    86ec:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    86ee:	09d1      	lsrs	r1, r2, #7
		return NULL;
    86f0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    86f2:	2900      	cmp	r1, #0
    86f4:	d104      	bne.n	8700 <at25dfx_chip_erase_block+0xa4>
		return &(ports[port_index]->Group[group_index]);
    86f6:	0953      	lsrs	r3, r2, #5
    86f8:	01db      	lsls	r3, r3, #7
    86fa:	495c      	ldr	r1, [pc, #368]	; (886c <at25dfx_chip_erase_block+0x210>)
    86fc:	468c      	mov	ip, r1
    86fe:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8700:	211f      	movs	r1, #31
    8702:	4011      	ands	r1, r2
    8704:	2201      	movs	r2, #1
    8706:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    8708:	619a      	str	r2, [r3, #24]
	switch (block_size) {
    870a:	2d01      	cmp	r5, #1
    870c:	d006      	beq.n	871c <at25dfx_chip_erase_block+0xc0>
    870e:	2d00      	cmp	r5, #0
    8710:	d063      	beq.n	87da <at25dfx_chip_erase_block+0x17e>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    8712:	23d8      	movs	r3, #216	; 0xd8
	switch (block_size) {
    8714:	2d02      	cmp	r5, #2
    8716:	d002      	beq.n	871e <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = (enum at25dfx_command_opcode)0;
    8718:	2300      	movs	r3, #0
    871a:	e000      	b.n	871e <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    871c:	2352      	movs	r3, #82	; 0x52
	cmd_buffer[0] = cmd.opcode;
    871e:	466a      	mov	r2, sp
    8720:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    8722:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    8724:	0a33      	lsrs	r3, r6, #8
    8726:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    8728:	0c36      	lsrs	r6, r6, #16
    872a:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    872c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    872e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8730:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8732:	2900      	cmp	r1, #0
    8734:	d104      	bne.n	8740 <at25dfx_chip_erase_block+0xe4>
		return &(ports[port_index]->Group[group_index]);
    8736:	0953      	lsrs	r3, r2, #5
    8738:	01db      	lsls	r3, r3, #7
    873a:	494c      	ldr	r1, [pc, #304]	; (886c <at25dfx_chip_erase_block+0x210>)
    873c:	468c      	mov	ip, r1
    873e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8740:	211f      	movs	r1, #31
    8742:	4011      	ands	r1, r2
    8744:	2201      	movs	r2, #1
    8746:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    8748:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    874a:	2204      	movs	r2, #4
    874c:	4669      	mov	r1, sp
    874e:	6820      	ldr	r0, [r4, #0]
    8750:	4b47      	ldr	r3, [pc, #284]	; (8870 <at25dfx_chip_erase_block+0x214>)
    8752:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    8754:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    8756:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8758:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    875a:	2900      	cmp	r1, #0
    875c:	d104      	bne.n	8768 <at25dfx_chip_erase_block+0x10c>
		return &(ports[port_index]->Group[group_index]);
    875e:	0953      	lsrs	r3, r2, #5
    8760:	01db      	lsls	r3, r3, #7
    8762:	4942      	ldr	r1, [pc, #264]	; (886c <at25dfx_chip_erase_block+0x210>)
    8764:	468c      	mov	ip, r1
    8766:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8768:	211f      	movs	r1, #31
    876a:	4011      	ands	r1, r2
    876c:	2201      	movs	r2, #1
    876e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    8770:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8772:	6823      	ldr	r3, [r4, #0]
    8774:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
    8776:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8778:	7e0b      	ldrb	r3, [r1, #24]
    877a:	4213      	tst	r3, r2
    877c:	d0fc      	beq.n	8778 <at25dfx_chip_erase_block+0x11c>
	port_pin_set_output_level(chip->cs_pin, false);
    877e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    8780:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8782:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8784:	2900      	cmp	r1, #0
    8786:	d104      	bne.n	8792 <at25dfx_chip_erase_block+0x136>
		return &(ports[port_index]->Group[group_index]);
    8788:	0953      	lsrs	r3, r2, #5
    878a:	01db      	lsls	r3, r3, #7
    878c:	4937      	ldr	r1, [pc, #220]	; (886c <at25dfx_chip_erase_block+0x210>)
    878e:	468c      	mov	ip, r1
    8790:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8792:	211f      	movs	r1, #31
    8794:	4011      	ands	r1, r2
    8796:	2201      	movs	r2, #1
    8798:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    879a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    879c:	6823      	ldr	r3, [r4, #0]
    879e:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    87a0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    87a2:	07d2      	lsls	r2, r2, #31
    87a4:	d501      	bpl.n	87aa <at25dfx_chip_erase_block+0x14e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    87a6:	2205      	movs	r2, #5
    87a8:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    87aa:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    87ac:	6802      	ldr	r2, [r0, #0]
    87ae:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    87b0:	7e13      	ldrb	r3, [r2, #24]
    87b2:	420b      	tst	r3, r1
    87b4:	d0fc      	beq.n	87b0 <at25dfx_chip_erase_block+0x154>
    87b6:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    87b8:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    87ba:	075b      	lsls	r3, r3, #29
    87bc:	d509      	bpl.n	87d2 <at25dfx_chip_erase_block+0x176>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    87be:	8b53      	ldrh	r3, [r2, #26]
    87c0:	075b      	lsls	r3, r3, #29
    87c2:	d501      	bpl.n	87c8 <at25dfx_chip_erase_block+0x16c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    87c4:	2304      	movs	r3, #4
    87c6:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    87c8:	7983      	ldrb	r3, [r0, #6]
    87ca:	2b01      	cmp	r3, #1
    87cc:	d007      	beq.n	87de <at25dfx_chip_erase_block+0x182>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    87ce:	6a95      	ldr	r5, [r2, #40]	; 0x28
    87d0:	b2ed      	uxtb	r5, r5
		while (!spi_is_ready_to_write(chip->spi)) {
    87d2:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    87d4:	2700      	movs	r7, #0
		while (!spi_is_ready_to_read(chip->spi)) {
    87d6:	2004      	movs	r0, #4
    87d8:	e00c      	b.n	87f4 <at25dfx_chip_erase_block+0x198>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    87da:	2320      	movs	r3, #32
    87dc:	e79f      	b.n	871e <at25dfx_chip_erase_block+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    87de:	6a95      	ldr	r5, [r2, #40]	; 0x28
    87e0:	05ed      	lsls	r5, r5, #23
    87e2:	0ded      	lsrs	r5, r5, #23
    87e4:	e7f5      	b.n	87d2 <at25dfx_chip_erase_block+0x176>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    87e6:	79b3      	ldrb	r3, [r6, #6]
    87e8:	2b01      	cmp	r3, #1
    87ea:	d019      	beq.n	8820 <at25dfx_chip_erase_block+0x1c4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    87ec:	6a95      	ldr	r5, [r2, #40]	; 0x28
    87ee:	b2ed      	uxtb	r5, r5
	} while (status_reg & AT25DFX_STATUS_BUSY);
    87f0:	4229      	tst	r1, r5
    87f2:	d019      	beq.n	8828 <at25dfx_chip_erase_block+0x1cc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    87f4:	6823      	ldr	r3, [r4, #0]
    87f6:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    87f8:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    87fa:	420b      	tst	r3, r1
    87fc:	d0fc      	beq.n	87f8 <at25dfx_chip_erase_block+0x19c>
    87fe:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    8800:	420b      	tst	r3, r1
    8802:	d000      	beq.n	8806 <at25dfx_chip_erase_block+0x1aa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8804:	6297      	str	r7, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    8806:	6826      	ldr	r6, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8808:	6832      	ldr	r2, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    880a:	7e13      	ldrb	r3, [r2, #24]
    880c:	4203      	tst	r3, r0
    880e:	d0fc      	beq.n	880a <at25dfx_chip_erase_block+0x1ae>
    8810:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    8812:	4203      	tst	r3, r0
    8814:	d0ec      	beq.n	87f0 <at25dfx_chip_erase_block+0x194>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8816:	8b53      	ldrh	r3, [r2, #26]
    8818:	4203      	tst	r3, r0
    881a:	d0e4      	beq.n	87e6 <at25dfx_chip_erase_block+0x18a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    881c:	8350      	strh	r0, [r2, #26]
    881e:	e7e2      	b.n	87e6 <at25dfx_chip_erase_block+0x18a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8820:	6a95      	ldr	r5, [r2, #40]	; 0x28
    8822:	05ed      	lsls	r5, r5, #23
    8824:	0ded      	lsrs	r5, r5, #23
    8826:	e7e3      	b.n	87f0 <at25dfx_chip_erase_block+0x194>
	port_pin_set_output_level(chip->cs_pin, true);
    8828:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    882a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    882c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    882e:	2900      	cmp	r1, #0
    8830:	d104      	bne.n	883c <at25dfx_chip_erase_block+0x1e0>
		return &(ports[port_index]->Group[group_index]);
    8832:	0953      	lsrs	r3, r2, #5
    8834:	01db      	lsls	r3, r3, #7
    8836:	490d      	ldr	r1, [pc, #52]	; (886c <at25dfx_chip_erase_block+0x210>)
    8838:	468c      	mov	ip, r1
    883a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    883c:	211f      	movs	r1, #31
    883e:	4011      	ands	r1, r2
    8840:	2201      	movs	r2, #1
    8842:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    8844:	619a      	str	r2, [r3, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    8846:	06a8      	lsls	r0, r5, #26
	return STATUS_OK;
    8848:	0fc0      	lsrs	r0, r0, #31
    884a:	0100      	lsls	r0, r0, #4
	_at25dfx_spi_unlock(chip->spi);
    884c:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    884e:	2200      	movs	r2, #0
    8850:	711a      	strb	r2, [r3, #4]
	return status;
    8852:	e727      	b.n	86a4 <at25dfx_chip_erase_block+0x48>
		return STATUS_ERR_INVALID_ARG;
    8854:	2017      	movs	r0, #23
    8856:	e725      	b.n	86a4 <at25dfx_chip_erase_block+0x48>
    8858:	4b03      	ldr	r3, [pc, #12]	; (8868 <at25dfx_chip_erase_block+0x20c>)
    885a:	4798      	blx	r3
		return status;
    885c:	2005      	movs	r0, #5
    885e:	e721      	b.n	86a4 <at25dfx_chip_erase_block+0x48>
    8860:	00012eb0 	.word	0x00012eb0
    8864:	0000bdc1 	.word	0x0000bdc1
    8868:	0000be01 	.word	0x0000be01
    886c:	41004400 	.word	0x41004400
    8870:	0000caa1 	.word	0x0000caa1

00008874 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
    8874:	b570      	push	{r4, r5, r6, lr}
    8876:	b082      	sub	sp, #8
    8878:	0004      	movs	r4, r0
    887a:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    887c:	6806      	ldr	r6, [r0, #0]
	cpu_irq_enter_critical();
    887e:	4b35      	ldr	r3, [pc, #212]	; (8954 <at25dfx_chip_set_global_sector_protect+0xe0>)
    8880:	4798      	blx	r3
	if (module->locked) {
    8882:	7933      	ldrb	r3, [r6, #4]
    8884:	2b00      	cmp	r3, #0
    8886:	d160      	bne.n	894a <at25dfx_chip_set_global_sector_protect+0xd6>
		module->locked = true;
    8888:	3301      	adds	r3, #1
    888a:	7133      	strb	r3, [r6, #4]
	cpu_irq_leave_critical();
    888c:	4b32      	ldr	r3, [pc, #200]	; (8958 <at25dfx_chip_set_global_sector_protect+0xe4>)
    888e:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    8890:	2306      	movs	r3, #6
    8892:	466a      	mov	r2, sp
    8894:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    8896:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    8898:	09d1      	lsrs	r1, r2, #7
		return NULL;
    889a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    889c:	2900      	cmp	r1, #0
    889e:	d104      	bne.n	88aa <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
    88a0:	0953      	lsrs	r3, r2, #5
    88a2:	01db      	lsls	r3, r3, #7
    88a4:	492d      	ldr	r1, [pc, #180]	; (895c <at25dfx_chip_set_global_sector_protect+0xe8>)
    88a6:	468c      	mov	ip, r1
    88a8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    88aa:	211f      	movs	r1, #31
    88ac:	4011      	ands	r1, r2
    88ae:	2201      	movs	r2, #1
    88b0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    88b2:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    88b4:	2201      	movs	r2, #1
    88b6:	4669      	mov	r1, sp
    88b8:	6820      	ldr	r0, [r4, #0]
    88ba:	4b29      	ldr	r3, [pc, #164]	; (8960 <at25dfx_chip_set_global_sector_protect+0xec>)
    88bc:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    88be:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    88c0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    88c2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    88c4:	2900      	cmp	r1, #0
    88c6:	d104      	bne.n	88d2 <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
    88c8:	0953      	lsrs	r3, r2, #5
    88ca:	01db      	lsls	r3, r3, #7
    88cc:	4923      	ldr	r1, [pc, #140]	; (895c <at25dfx_chip_set_global_sector_protect+0xe8>)
    88ce:	468c      	mov	ip, r1
    88d0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    88d2:	211f      	movs	r1, #31
    88d4:	4011      	ands	r1, r2
    88d6:	2201      	movs	r2, #1
    88d8:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    88da:	619a      	str	r2, [r3, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
    88dc:	233c      	movs	r3, #60	; 0x3c
    88de:	1e6a      	subs	r2, r5, #1
    88e0:	4195      	sbcs	r5, r2
    88e2:	426d      	negs	r5, r5
    88e4:	402b      	ands	r3, r5
    88e6:	466a      	mov	r2, sp
    88e8:	71d3      	strb	r3, [r2, #7]
	cmd_buffer[0] = cmd.opcode;
    88ea:	2301      	movs	r3, #1
    88ec:	466a      	mov	r2, sp
    88ee:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    88f0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    88f2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    88f4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    88f6:	2900      	cmp	r1, #0
    88f8:	d104      	bne.n	8904 <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
    88fa:	0953      	lsrs	r3, r2, #5
    88fc:	01db      	lsls	r3, r3, #7
    88fe:	4917      	ldr	r1, [pc, #92]	; (895c <at25dfx_chip_set_global_sector_protect+0xe8>)
    8900:	468c      	mov	ip, r1
    8902:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8904:	211f      	movs	r1, #31
    8906:	4011      	ands	r1, r2
    8908:	2201      	movs	r2, #1
    890a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    890c:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    890e:	2201      	movs	r2, #1
    8910:	4669      	mov	r1, sp
    8912:	6820      	ldr	r0, [r4, #0]
    8914:	4d12      	ldr	r5, [pc, #72]	; (8960 <at25dfx_chip_set_global_sector_protect+0xec>)
    8916:	47a8      	blx	r5
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    8918:	2201      	movs	r2, #1
    891a:	466b      	mov	r3, sp
    891c:	1dd9      	adds	r1, r3, #7
    891e:	6820      	ldr	r0, [r4, #0]
    8920:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    8922:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    8924:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8926:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8928:	2900      	cmp	r1, #0
    892a:	d104      	bne.n	8936 <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
    892c:	0953      	lsrs	r3, r2, #5
    892e:	01db      	lsls	r3, r3, #7
    8930:	490a      	ldr	r1, [pc, #40]	; (895c <at25dfx_chip_set_global_sector_protect+0xe8>)
    8932:	468c      	mov	ip, r1
    8934:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8936:	211f      	movs	r1, #31
    8938:	4011      	ands	r1, r2
    893a:	2201      	movs	r2, #1
    893c:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    893e:	619a      	str	r2, [r3, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    8940:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    8942:	2200      	movs	r2, #0
    8944:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    8946:	2000      	movs	r0, #0
    8948:	e002      	b.n	8950 <at25dfx_chip_set_global_sector_protect+0xdc>
    894a:	4b03      	ldr	r3, [pc, #12]	; (8958 <at25dfx_chip_set_global_sector_protect+0xe4>)
    894c:	4798      	blx	r3
		return status;
    894e:	2005      	movs	r0, #5
}
    8950:	b002      	add	sp, #8
    8952:	bd70      	pop	{r4, r5, r6, pc}
    8954:	0000bdc1 	.word	0x0000bdc1
    8958:	0000be01 	.word	0x0000be01
    895c:	41004400 	.word	0x41004400
    8960:	0000caa1 	.word	0x0000caa1

00008964 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    8964:	b530      	push	{r4, r5, lr}
    8966:	b083      	sub	sp, #12
    8968:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    896a:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    896c:	4b1c      	ldr	r3, [pc, #112]	; (89e0 <at25dfx_chip_sleep+0x7c>)
    896e:	4798      	blx	r3
	if (module->locked) {
    8970:	792b      	ldrb	r3, [r5, #4]
    8972:	2b00      	cmp	r3, #0
    8974:	d12e      	bne.n	89d4 <at25dfx_chip_sleep+0x70>
		module->locked = true;
    8976:	3301      	adds	r3, #1
    8978:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    897a:	4b1a      	ldr	r3, [pc, #104]	; (89e4 <at25dfx_chip_sleep+0x80>)
    897c:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    897e:	23b9      	movs	r3, #185	; 0xb9
    8980:	466a      	mov	r2, sp
    8982:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    8984:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    8986:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8988:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    898a:	2900      	cmp	r1, #0
    898c:	d104      	bne.n	8998 <at25dfx_chip_sleep+0x34>
		return &(ports[port_index]->Group[group_index]);
    898e:	0953      	lsrs	r3, r2, #5
    8990:	01db      	lsls	r3, r3, #7
    8992:	4915      	ldr	r1, [pc, #84]	; (89e8 <at25dfx_chip_sleep+0x84>)
    8994:	468c      	mov	ip, r1
    8996:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8998:	211f      	movs	r1, #31
    899a:	4011      	ands	r1, r2
    899c:	2201      	movs	r2, #1
    899e:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    89a0:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    89a2:	2201      	movs	r2, #1
    89a4:	4669      	mov	r1, sp
    89a6:	6820      	ldr	r0, [r4, #0]
    89a8:	4b10      	ldr	r3, [pc, #64]	; (89ec <at25dfx_chip_sleep+0x88>)
    89aa:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    89ac:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    89ae:	09d1      	lsrs	r1, r2, #7
		return NULL;
    89b0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    89b2:	2900      	cmp	r1, #0
    89b4:	d104      	bne.n	89c0 <at25dfx_chip_sleep+0x5c>
		return &(ports[port_index]->Group[group_index]);
    89b6:	0953      	lsrs	r3, r2, #5
    89b8:	01db      	lsls	r3, r3, #7
    89ba:	490b      	ldr	r1, [pc, #44]	; (89e8 <at25dfx_chip_sleep+0x84>)
    89bc:	468c      	mov	ip, r1
    89be:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    89c0:	211f      	movs	r1, #31
    89c2:	4011      	ands	r1, r2
    89c4:	2201      	movs	r2, #1
    89c6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    89c8:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    89ca:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    89cc:	2200      	movs	r2, #0
    89ce:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    89d0:	2000      	movs	r0, #0
    89d2:	e002      	b.n	89da <at25dfx_chip_sleep+0x76>
    89d4:	4b03      	ldr	r3, [pc, #12]	; (89e4 <at25dfx_chip_sleep+0x80>)
    89d6:	4798      	blx	r3
		return status;
    89d8:	2005      	movs	r0, #5
}
    89da:	b003      	add	sp, #12
    89dc:	bd30      	pop	{r4, r5, pc}
    89de:	46c0      	nop			; (mov r8, r8)
    89e0:	0000bdc1 	.word	0x0000bdc1
    89e4:	0000be01 	.word	0x0000be01
    89e8:	41004400 	.word	0x41004400
    89ec:	0000caa1 	.word	0x0000caa1

000089f0 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    89f0:	b530      	push	{r4, r5, lr}
    89f2:	b083      	sub	sp, #12
    89f4:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    89f6:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    89f8:	4b1c      	ldr	r3, [pc, #112]	; (8a6c <at25dfx_chip_wake+0x7c>)
    89fa:	4798      	blx	r3
	if (module->locked) {
    89fc:	792b      	ldrb	r3, [r5, #4]
    89fe:	2b00      	cmp	r3, #0
    8a00:	d12e      	bne.n	8a60 <at25dfx_chip_wake+0x70>
		module->locked = true;
    8a02:	3301      	adds	r3, #1
    8a04:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    8a06:	4b1a      	ldr	r3, [pc, #104]	; (8a70 <at25dfx_chip_wake+0x80>)
    8a08:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    8a0a:	23ab      	movs	r3, #171	; 0xab
    8a0c:	466a      	mov	r2, sp
    8a0e:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    8a10:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    8a12:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8a14:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8a16:	2900      	cmp	r1, #0
    8a18:	d104      	bne.n	8a24 <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
    8a1a:	0953      	lsrs	r3, r2, #5
    8a1c:	01db      	lsls	r3, r3, #7
    8a1e:	4915      	ldr	r1, [pc, #84]	; (8a74 <at25dfx_chip_wake+0x84>)
    8a20:	468c      	mov	ip, r1
    8a22:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8a24:	211f      	movs	r1, #31
    8a26:	4011      	ands	r1, r2
    8a28:	2201      	movs	r2, #1
    8a2a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    8a2c:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    8a2e:	2201      	movs	r2, #1
    8a30:	4669      	mov	r1, sp
    8a32:	6820      	ldr	r0, [r4, #0]
    8a34:	4b10      	ldr	r3, [pc, #64]	; (8a78 <at25dfx_chip_wake+0x88>)
    8a36:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    8a38:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    8a3a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8a3c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8a3e:	2900      	cmp	r1, #0
    8a40:	d104      	bne.n	8a4c <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
    8a42:	0953      	lsrs	r3, r2, #5
    8a44:	01db      	lsls	r3, r3, #7
    8a46:	490b      	ldr	r1, [pc, #44]	; (8a74 <at25dfx_chip_wake+0x84>)
    8a48:	468c      	mov	ip, r1
    8a4a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8a4c:	211f      	movs	r1, #31
    8a4e:	4011      	ands	r1, r2
    8a50:	2201      	movs	r2, #1
    8a52:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    8a54:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    8a56:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    8a58:	2200      	movs	r2, #0
    8a5a:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    8a5c:	2000      	movs	r0, #0
    8a5e:	e002      	b.n	8a66 <at25dfx_chip_wake+0x76>
    8a60:	4b03      	ldr	r3, [pc, #12]	; (8a70 <at25dfx_chip_wake+0x80>)
    8a62:	4798      	blx	r3
		return status;
    8a64:	2005      	movs	r0, #5
    8a66:	b003      	add	sp, #12
    8a68:	bd30      	pop	{r4, r5, pc}
    8a6a:	46c0      	nop			; (mov r8, r8)
    8a6c:	0000bdc1 	.word	0x0000bdc1
    8a70:	0000be01 	.word	0x0000be01
    8a74:	41004400 	.word	0x41004400
    8a78:	0000caa1 	.word	0x0000caa1

00008a7c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    8a7c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    8a7e:	2000      	movs	r0, #0
    8a80:	4b08      	ldr	r3, [pc, #32]	; (8aa4 <delay_init+0x28>)
    8a82:	4798      	blx	r3
    8a84:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    8a86:	4c08      	ldr	r4, [pc, #32]	; (8aa8 <delay_init+0x2c>)
    8a88:	21fa      	movs	r1, #250	; 0xfa
    8a8a:	0089      	lsls	r1, r1, #2
    8a8c:	47a0      	blx	r4
    8a8e:	4b07      	ldr	r3, [pc, #28]	; (8aac <delay_init+0x30>)
    8a90:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    8a92:	4907      	ldr	r1, [pc, #28]	; (8ab0 <delay_init+0x34>)
    8a94:	0028      	movs	r0, r5
    8a96:	47a0      	blx	r4
    8a98:	4b06      	ldr	r3, [pc, #24]	; (8ab4 <delay_init+0x38>)
    8a9a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    8a9c:	2205      	movs	r2, #5
    8a9e:	4b06      	ldr	r3, [pc, #24]	; (8ab8 <delay_init+0x3c>)
    8aa0:	601a      	str	r2, [r3, #0]
}
    8aa2:	bd70      	pop	{r4, r5, r6, pc}
    8aa4:	0000d855 	.word	0x0000d855
    8aa8:	00011315 	.word	0x00011315
    8aac:	20000000 	.word	0x20000000
    8ab0:	000f4240 	.word	0x000f4240
    8ab4:	20000004 	.word	0x20000004
    8ab8:	e000e010 	.word	0xe000e010

00008abc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    8abc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    8abe:	4b08      	ldr	r3, [pc, #32]	; (8ae0 <delay_cycles_ms+0x24>)
    8ac0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    8ac2:	4a08      	ldr	r2, [pc, #32]	; (8ae4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    8ac4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    8ac6:	2180      	movs	r1, #128	; 0x80
    8ac8:	0249      	lsls	r1, r1, #9
	while (n--) {
    8aca:	3801      	subs	r0, #1
    8acc:	d307      	bcc.n	8ade <delay_cycles_ms+0x22>
	if (n > 0) {
    8ace:	2c00      	cmp	r4, #0
    8ad0:	d0fb      	beq.n	8aca <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    8ad2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    8ad4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    8ad6:	6813      	ldr	r3, [r2, #0]
    8ad8:	420b      	tst	r3, r1
    8ada:	d0fc      	beq.n	8ad6 <delay_cycles_ms+0x1a>
    8adc:	e7f5      	b.n	8aca <delay_cycles_ms+0xe>
	}
}
    8ade:	bd30      	pop	{r4, r5, pc}
    8ae0:	20000000 	.word	0x20000000
    8ae4:	e000e010 	.word	0xe000e010

00008ae8 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    8ae8:	b510      	push	{r4, lr}
	if (gpfIsr) {
    8aea:	4b03      	ldr	r3, [pc, #12]	; (8af8 <chip_isr+0x10>)
    8aec:	681b      	ldr	r3, [r3, #0]
    8aee:	2b00      	cmp	r3, #0
    8af0:	d000      	beq.n	8af4 <chip_isr+0xc>
		gpfIsr();
    8af2:	4798      	blx	r3
	}
}
    8af4:	bd10      	pop	{r4, pc}
    8af6:	46c0      	nop			; (mov r8, r8)
    8af8:	20000208 	.word	0x20000208

00008afc <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    8afc:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    8afe:	1e44      	subs	r4, r0, #1
    8b00:	2800      	cmp	r0, #0
    8b02:	d004      	beq.n	8b0e <nm_bsp_sleep+0x12>
		delay_ms(1);
    8b04:	4d02      	ldr	r5, [pc, #8]	; (8b10 <nm_bsp_sleep+0x14>)
    8b06:	2001      	movs	r0, #1
    8b08:	47a8      	blx	r5
	while (u32TimeMsec--) {
    8b0a:	3c01      	subs	r4, #1
    8b0c:	d2fb      	bcs.n	8b06 <nm_bsp_sleep+0xa>
	}
}
    8b0e:	bd70      	pop	{r4, r5, r6, pc}
    8b10:	00008abd 	.word	0x00008abd

00008b14 <nm_bsp_reset>:
{
    8b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		port_base->OUTCLR.reg = pin_mask;
    8b16:	4c08      	ldr	r4, [pc, #32]	; (8b38 <nm_bsp_reset+0x24>)
    8b18:	2780      	movs	r7, #128	; 0x80
    8b1a:	057f      	lsls	r7, r7, #21
    8b1c:	6167      	str	r7, [r4, #20]
    8b1e:	2680      	movs	r6, #128	; 0x80
    8b20:	0536      	lsls	r6, r6, #20
    8b22:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
    8b24:	2064      	movs	r0, #100	; 0x64
    8b26:	4d05      	ldr	r5, [pc, #20]	; (8b3c <nm_bsp_reset+0x28>)
    8b28:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    8b2a:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(100);
    8b2c:	2064      	movs	r0, #100	; 0x64
    8b2e:	47a8      	blx	r5
    8b30:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
    8b32:	2064      	movs	r0, #100	; 0x64
    8b34:	47a8      	blx	r5
}
    8b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b38:	41004400 	.word	0x41004400
    8b3c:	00008afd 	.word	0x00008afd

00008b40 <nm_bsp_init>:
{
    8b40:	b570      	push	{r4, r5, r6, lr}
    8b42:	b082      	sub	sp, #8
	gpfIsr = NULL;
    8b44:	2300      	movs	r3, #0
    8b46:	4a16      	ldr	r2, [pc, #88]	; (8ba0 <nm_bsp_init+0x60>)
    8b48:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    8b4a:	ac01      	add	r4, sp, #4
    8b4c:	2501      	movs	r5, #1
    8b4e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    8b50:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    8b52:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    8b54:	0021      	movs	r1, r4
    8b56:	201b      	movs	r0, #27
    8b58:	4e12      	ldr	r6, [pc, #72]	; (8ba4 <nm_bsp_init+0x64>)
    8b5a:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    8b5c:	0021      	movs	r1, r4
    8b5e:	201c      	movs	r0, #28
    8b60:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    8b62:	0021      	movs	r1, r4
    8b64:	2028      	movs	r0, #40	; 0x28
    8b66:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    8b68:	4b0f      	ldr	r3, [pc, #60]	; (8ba8 <nm_bsp_init+0x68>)
    8b6a:	2280      	movs	r2, #128	; 0x80
    8b6c:	0552      	lsls	r2, r2, #21
    8b6e:	615a      	str	r2, [r3, #20]
    8b70:	2280      	movs	r2, #128	; 0x80
    8b72:	0512      	lsls	r2, r2, #20
    8b74:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    8b76:	4b0d      	ldr	r3, [pc, #52]	; (8bac <nm_bsp_init+0x6c>)
    8b78:	681b      	ldr	r3, [r3, #0]
    8b7a:	421d      	tst	r5, r3
    8b7c:	d003      	beq.n	8b86 <nm_bsp_init+0x46>
    8b7e:	4b0b      	ldr	r3, [pc, #44]	; (8bac <nm_bsp_init+0x6c>)
    8b80:	681b      	ldr	r3, [r3, #0]
    8b82:	079b      	lsls	r3, r3, #30
    8b84:	d401      	bmi.n	8b8a <nm_bsp_init+0x4a>
	    delay_init();
    8b86:	4b0a      	ldr	r3, [pc, #40]	; (8bb0 <nm_bsp_init+0x70>)
    8b88:	4798      	blx	r3
	nm_bsp_reset();
    8b8a:	4b0a      	ldr	r3, [pc, #40]	; (8bb4 <nm_bsp_init+0x74>)
    8b8c:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    8b8e:	2201      	movs	r2, #1
    8b90:	4b09      	ldr	r3, [pc, #36]	; (8bb8 <nm_bsp_init+0x78>)
    8b92:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    8b94:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    8b98:	b662      	cpsie	i
}
    8b9a:	2000      	movs	r0, #0
    8b9c:	b002      	add	sp, #8
    8b9e:	bd70      	pop	{r4, r5, r6, pc}
    8ba0:	20000208 	.word	0x20000208
    8ba4:	0000c299 	.word	0x0000c299
    8ba8:	41004400 	.word	0x41004400
    8bac:	e000e010 	.word	0xe000e010
    8bb0:	00008a7d 	.word	0x00008a7d
    8bb4:	00008b15 	.word	0x00008b15
    8bb8:	2000000a 	.word	0x2000000a

00008bbc <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    8bbc:	b510      	push	{r4, lr}
    8bbe:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    8bc0:	4b0e      	ldr	r3, [pc, #56]	; (8bfc <nm_bsp_register_isr+0x40>)
    8bc2:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    8bc4:	ac01      	add	r4, sp, #4
    8bc6:	0020      	movs	r0, r4
    8bc8:	4b0d      	ldr	r3, [pc, #52]	; (8c00 <nm_bsp_register_isr+0x44>)
    8bca:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    8bcc:	2329      	movs	r3, #41	; 0x29
    8bce:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    8bd0:	2300      	movs	r3, #0
    8bd2:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    8bd4:	3301      	adds	r3, #1
    8bd6:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    8bd8:	3301      	adds	r3, #1
    8bda:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    8bdc:	0021      	movs	r1, r4
    8bde:	2009      	movs	r0, #9
    8be0:	4b08      	ldr	r3, [pc, #32]	; (8c04 <nm_bsp_register_isr+0x48>)
    8be2:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    8be4:	2200      	movs	r2, #0
    8be6:	2109      	movs	r1, #9
    8be8:	4807      	ldr	r0, [pc, #28]	; (8c08 <nm_bsp_register_isr+0x4c>)
    8bea:	4b08      	ldr	r3, [pc, #32]	; (8c0c <nm_bsp_register_isr+0x50>)
    8bec:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    8bee:	2100      	movs	r1, #0
    8bf0:	2009      	movs	r0, #9
    8bf2:	4b07      	ldr	r3, [pc, #28]	; (8c10 <nm_bsp_register_isr+0x54>)
    8bf4:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    8bf6:	b004      	add	sp, #16
    8bf8:	bd10      	pop	{r4, pc}
    8bfa:	46c0      	nop			; (mov r8, r8)
    8bfc:	20000208 	.word	0x20000208
    8c00:	0000bf75 	.word	0x0000bf75
    8c04:	0000bf89 	.word	0x0000bf89
    8c08:	00008ae9 	.word	0x00008ae9
    8c0c:	0000be31 	.word	0x0000be31
    8c10:	0000be5d 	.word	0x0000be5d

00008c14 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    8c14:	b510      	push	{r4, lr}
	if (u8Enable) {
    8c16:	2800      	cmp	r0, #0
    8c18:	d104      	bne.n	8c24 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    8c1a:	2100      	movs	r1, #0
    8c1c:	2009      	movs	r0, #9
    8c1e:	4b04      	ldr	r3, [pc, #16]	; (8c30 <nm_bsp_interrupt_ctrl+0x1c>)
    8c20:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    8c22:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    8c24:	2100      	movs	r1, #0
    8c26:	2009      	movs	r0, #9
    8c28:	4b02      	ldr	r3, [pc, #8]	; (8c34 <nm_bsp_interrupt_ctrl+0x20>)
    8c2a:	4798      	blx	r3
    8c2c:	e7f9      	b.n	8c22 <nm_bsp_interrupt_ctrl+0xe>
    8c2e:	46c0      	nop			; (mov r8, r8)
    8c30:	0000be7d 	.word	0x0000be7d
    8c34:	0000be5d 	.word	0x0000be5d

00008c38 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    8c38:	b530      	push	{r4, r5, lr}
    8c3a:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    8c3c:	4c30      	ldr	r4, [pc, #192]	; (8d00 <nm_bus_init+0xc8>)
    8c3e:	230e      	movs	r3, #14
    8c40:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    8c42:	2300      	movs	r3, #0
    8c44:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    8c46:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    8c48:	a901      	add	r1, sp, #4
    8c4a:	2201      	movs	r2, #1
    8c4c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    8c4e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    8c50:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    8c52:	200e      	movs	r0, #14
    8c54:	4b2b      	ldr	r3, [pc, #172]	; (8d04 <nm_bus_init+0xcc>)
    8c56:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    8c58:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    8c5a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    8c5c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    8c5e:	2900      	cmp	r1, #0
    8c60:	d104      	bne.n	8c6c <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    8c62:	0953      	lsrs	r3, r2, #5
    8c64:	01db      	lsls	r3, r3, #7
    8c66:	4928      	ldr	r1, [pc, #160]	; (8d08 <nm_bus_init+0xd0>)
    8c68:	468c      	mov	ip, r1
    8c6a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8c6c:	211f      	movs	r1, #31
    8c6e:	4011      	ands	r1, r2
    8c70:	2201      	movs	r2, #1
    8c72:	0010      	movs	r0, r2
    8c74:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    8c76:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    8c78:	ac02      	add	r4, sp, #8
    8c7a:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    8c7c:	2300      	movs	r3, #0
    8c7e:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    8c80:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    8c82:	21c0      	movs	r1, #192	; 0xc0
    8c84:	0389      	lsls	r1, r1, #14
    8c86:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    8c88:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    8c8a:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    8c8c:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    8c8e:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    8c90:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    8c92:	3223      	adds	r2, #35	; 0x23
    8c94:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    8c96:	3a18      	subs	r2, #24
    8c98:	2100      	movs	r1, #0
    8c9a:	a808      	add	r0, sp, #32
    8c9c:	4b1b      	ldr	r3, [pc, #108]	; (8d0c <nm_bus_init+0xd4>)
    8c9e:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    8ca0:	4b1b      	ldr	r3, [pc, #108]	; (8d10 <nm_bus_init+0xd8>)
    8ca2:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    8ca4:	4b1b      	ldr	r3, [pc, #108]	; (8d14 <nm_bus_init+0xdc>)
    8ca6:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    8ca8:	2301      	movs	r3, #1
    8caa:	425b      	negs	r3, r3
    8cac:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    8cae:	4b1a      	ldr	r3, [pc, #104]	; (8d18 <nm_bus_init+0xe0>)
    8cb0:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    8cb2:	4b1a      	ldr	r3, [pc, #104]	; (8d1c <nm_bus_init+0xe4>)
    8cb4:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    8cb6:	0022      	movs	r2, r4
    8cb8:	4919      	ldr	r1, [pc, #100]	; (8d20 <nm_bus_init+0xe8>)
    8cba:	481a      	ldr	r0, [pc, #104]	; (8d24 <nm_bus_init+0xec>)
    8cbc:	4b1a      	ldr	r3, [pc, #104]	; (8d28 <nm_bus_init+0xf0>)
    8cbe:	4798      	blx	r3
    8cc0:	2800      	cmp	r0, #0
    8cc2:	d11a      	bne.n	8cfa <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8cc4:	4d17      	ldr	r5, [pc, #92]	; (8d24 <nm_bus_init+0xec>)
    8cc6:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8cc8:	0020      	movs	r0, r4
    8cca:	4b18      	ldr	r3, [pc, #96]	; (8d2c <nm_bus_init+0xf4>)
    8ccc:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8cce:	231f      	movs	r3, #31
    8cd0:	4018      	ands	r0, r3
    8cd2:	3b1e      	subs	r3, #30
    8cd4:	4083      	lsls	r3, r0
    8cd6:	4a16      	ldr	r2, [pc, #88]	; (8d30 <nm_bus_init+0xf8>)
    8cd8:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8cda:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    8cdc:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    8cde:	2b00      	cmp	r3, #0
    8ce0:	d1fc      	bne.n	8cdc <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    8ce2:	6823      	ldr	r3, [r4, #0]
    8ce4:	2202      	movs	r2, #2
    8ce6:	4313      	orrs	r3, r2
    8ce8:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    8cea:	4b12      	ldr	r3, [pc, #72]	; (8d34 <nm_bus_init+0xfc>)
    8cec:	4798      	blx	r3
	nm_bsp_sleep(1);
    8cee:	2001      	movs	r0, #1
    8cf0:	4b11      	ldr	r3, [pc, #68]	; (8d38 <nm_bus_init+0x100>)
    8cf2:	4798      	blx	r3
#endif
	return result;
    8cf4:	2000      	movs	r0, #0
}
    8cf6:	b011      	add	sp, #68	; 0x44
    8cf8:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    8cfa:	2006      	movs	r0, #6
    8cfc:	4240      	negs	r0, r0
    8cfe:	e7fa      	b.n	8cf6 <nm_bus_init+0xbe>
    8d00:	20000468 	.word	0x20000468
    8d04:	0000c299 	.word	0x0000c299
    8d08:	41004400 	.word	0x41004400
    8d0c:	00011707 	.word	0x00011707
    8d10:	000c0002 	.word	0x000c0002
    8d14:	000d0002 	.word	0x000d0002
    8d18:	000f0002 	.word	0x000f0002
    8d1c:	00b71b00 	.word	0x00b71b00
    8d20:	42001000 	.word	0x42001000
    8d24:	2000046c 	.word	0x2000046c
    8d28:	0000c701 	.word	0x0000c701
    8d2c:	0000c671 	.word	0x0000c671
    8d30:	e000e100 	.word	0xe000e100
    8d34:	00008b15 	.word	0x00008b15
    8d38:	00008afd 	.word	0x00008afd

00008d3c <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    8d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d3e:	46de      	mov	lr, fp
    8d40:	4657      	mov	r7, sl
    8d42:	464e      	mov	r6, r9
    8d44:	4645      	mov	r5, r8
    8d46:	b5e0      	push	{r5, r6, r7, lr}
    8d48:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    8d4a:	2803      	cmp	r0, #3
    8d4c:	d000      	beq.n	8d50 <nm_bus_ioctl+0x14>
    8d4e:	e075      	b.n	8e3c <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    8d50:	680e      	ldr	r6, [r1, #0]
    8d52:	684d      	ldr	r5, [r1, #4]
    8d54:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    8d56:	2200      	movs	r2, #0
    8d58:	466b      	mov	r3, sp
    8d5a:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    8d5c:	2d00      	cmp	r5, #0
    8d5e:	d027      	beq.n	8db0 <nm_bus_ioctl+0x74>
    8d60:	2c00      	cmp	r4, #0
    8d62:	d065      	beq.n	8e30 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    8d64:	2e00      	cmp	r6, #0
    8d66:	d100      	bne.n	8d6a <nm_bus_ioctl+0x2e>
    8d68:	e077      	b.n	8e5a <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    8d6a:	2300      	movs	r3, #0
    8d6c:	4698      	mov	r8, r3
    8d6e:	2300      	movs	r3, #0
    8d70:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    8d72:	2201      	movs	r2, #1
    8d74:	493b      	ldr	r1, [pc, #236]	; (8e64 <nm_bus_ioctl+0x128>)
    8d76:	483c      	ldr	r0, [pc, #240]	; (8e68 <nm_bus_ioctl+0x12c>)
    8d78:	4b3c      	ldr	r3, [pc, #240]	; (8e6c <nm_bus_ioctl+0x130>)
    8d7a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    8d7c:	4b3a      	ldr	r3, [pc, #232]	; (8e68 <nm_bus_ioctl+0x12c>)
    8d7e:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    8d80:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    8d82:	2204      	movs	r2, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8d84:	4699      	mov	r9, r3
			pu8Miso++;
    8d86:	4659      	mov	r1, fp
    8d88:	424b      	negs	r3, r1
    8d8a:	4159      	adcs	r1, r3
    8d8c:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    8d8e:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8d90:	4653      	mov	r3, sl
    8d92:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8d94:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    8d96:	4239      	tst	r1, r7
    8d98:	d0fc      	beq.n	8d94 <nm_bus_ioctl+0x58>
    8d9a:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    8d9c:	4239      	tst	r1, r7
    8d9e:	d0fc      	beq.n	8d9a <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8da0:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8da2:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    8da4:	4211      	tst	r1, r2
    8da6:	d0fc      	beq.n	8da2 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8da8:	4649      	mov	r1, r9
    8daa:	7989      	ldrb	r1, [r1, #6]
    8dac:	468c      	mov	ip, r1
    8dae:	e011      	b.n	8dd4 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    8db0:	2e00      	cmp	r6, #0
    8db2:	d03a      	beq.n	8e2a <nm_bus_ioctl+0xee>
    8db4:	2c00      	cmp	r4, #0
    8db6:	d03e      	beq.n	8e36 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    8db8:	2300      	movs	r3, #0
    8dba:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    8dbc:	3301      	adds	r3, #1
    8dbe:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    8dc0:	466b      	mov	r3, sp
    8dc2:	1ddd      	adds	r5, r3, #7
    8dc4:	e7d5      	b.n	8d72 <nm_bus_ioctl+0x36>
    8dc6:	4660      	mov	r0, ip
    8dc8:	2801      	cmp	r0, #1
    8dca:	d00d      	beq.n	8de8 <nm_bus_ioctl+0xac>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8dcc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8dce:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    8dd0:	2900      	cmp	r1, #0
    8dd2:	d00d      	beq.n	8df0 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8dd4:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    8dd6:	4211      	tst	r1, r2
    8dd8:	d0fc      	beq.n	8dd4 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8dda:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    8ddc:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8dde:	4210      	tst	r0, r2
    8de0:	d0f1      	beq.n	8dc6 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8de2:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    8de4:	311e      	adds	r1, #30
    8de6:	e7ee      	b.n	8dc6 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8de8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8dea:	05c0      	lsls	r0, r0, #23
    8dec:	0dc0      	lsrs	r0, r0, #23
    8dee:	e7ef      	b.n	8dd0 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    8df0:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    8df2:	3c01      	subs	r4, #1
    8df4:	b2a4      	uxth	r4, r4
			pu8Miso++;
    8df6:	445d      	add	r5, fp
			pu8Mosi++;
    8df8:	4643      	mov	r3, r8
    8dfa:	4259      	negs	r1, r3
    8dfc:	414b      	adcs	r3, r1
    8dfe:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    8e00:	2c00      	cmp	r4, #0
    8e02:	d1c4      	bne.n	8d8e <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8e04:	4b18      	ldr	r3, [pc, #96]	; (8e68 <nm_bus_ioctl+0x12c>)
    8e06:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    8e08:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    8e0a:	7e0b      	ldrb	r3, [r1, #24]
    8e0c:	4213      	tst	r3, r2
    8e0e:	d0fc      	beq.n	8e0a <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    8e10:	2200      	movs	r2, #0
    8e12:	4914      	ldr	r1, [pc, #80]	; (8e64 <nm_bus_ioctl+0x128>)
    8e14:	4814      	ldr	r0, [pc, #80]	; (8e68 <nm_bus_ioctl+0x12c>)
    8e16:	4b15      	ldr	r3, [pc, #84]	; (8e6c <nm_bus_ioctl+0x130>)
    8e18:	4798      	blx	r3
	return M2M_SUCCESS;
    8e1a:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    8e1c:	b003      	add	sp, #12
    8e1e:	bc3c      	pop	{r2, r3, r4, r5}
    8e20:	4690      	mov	r8, r2
    8e22:	4699      	mov	r9, r3
    8e24:	46a2      	mov	sl, r4
    8e26:	46ab      	mov	fp, r5
    8e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    8e2a:	200f      	movs	r0, #15
    8e2c:	4240      	negs	r0, r0
    8e2e:	e7f5      	b.n	8e1c <nm_bus_ioctl+0xe0>
    8e30:	200f      	movs	r0, #15
    8e32:	4240      	negs	r0, r0
    8e34:	e7f2      	b.n	8e1c <nm_bus_ioctl+0xe0>
    8e36:	200f      	movs	r0, #15
    8e38:	4240      	negs	r0, r0
		break;
    8e3a:	e7ef      	b.n	8e1c <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    8e3c:	220e      	movs	r2, #14
    8e3e:	32ff      	adds	r2, #255	; 0xff
    8e40:	490b      	ldr	r1, [pc, #44]	; (8e70 <nm_bus_ioctl+0x134>)
    8e42:	480c      	ldr	r0, [pc, #48]	; (8e74 <nm_bus_ioctl+0x138>)
    8e44:	4b0c      	ldr	r3, [pc, #48]	; (8e78 <nm_bus_ioctl+0x13c>)
    8e46:	4798      	blx	r3
    8e48:	480c      	ldr	r0, [pc, #48]	; (8e7c <nm_bus_ioctl+0x140>)
    8e4a:	4b0d      	ldr	r3, [pc, #52]	; (8e80 <nm_bus_ioctl+0x144>)
    8e4c:	4798      	blx	r3
    8e4e:	200d      	movs	r0, #13
    8e50:	4b0c      	ldr	r3, [pc, #48]	; (8e84 <nm_bus_ioctl+0x148>)
    8e52:	4798      	blx	r3
			s8Ret = -1;
    8e54:	2001      	movs	r0, #1
    8e56:	4240      	negs	r0, r0
	return s8Ret;
    8e58:	e7e0      	b.n	8e1c <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    8e5a:	2301      	movs	r3, #1
    8e5c:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    8e5e:	466b      	mov	r3, sp
    8e60:	1dde      	adds	r6, r3, #7
    8e62:	e784      	b.n	8d6e <nm_bus_ioctl+0x32>
    8e64:	20000468 	.word	0x20000468
    8e68:	2000046c 	.word	0x2000046c
    8e6c:	0000c9ad 	.word	0x0000c9ad
    8e70:	00012ed8 	.word	0x00012ed8
    8e74:	00012ee8 	.word	0x00012ee8
    8e78:	00011869 	.word	0x00011869
    8e7c:	00012efc 	.word	0x00012efc
    8e80:	00011985 	.word	0x00011985
    8e84:	0001189d 	.word	0x0001189d

00008e88 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    8e88:	b530      	push	{r4, r5, lr}
    8e8a:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    8e8c:	ab01      	add	r3, sp, #4
    8e8e:	2200      	movs	r2, #0
    8e90:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    8e92:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    8e94:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8e96:	4d13      	ldr	r5, [pc, #76]	; (8ee4 <nm_bus_deinit+0x5c>)
    8e98:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    8e9a:	0020      	movs	r0, r4
    8e9c:	4b12      	ldr	r3, [pc, #72]	; (8ee8 <nm_bus_deinit+0x60>)
    8e9e:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8ea0:	231f      	movs	r3, #31
    8ea2:	4018      	ands	r0, r3
    8ea4:	3b1e      	subs	r3, #30
    8ea6:	4083      	lsls	r3, r0
    8ea8:	2280      	movs	r2, #128	; 0x80
    8eaa:	4910      	ldr	r1, [pc, #64]	; (8eec <nm_bus_deinit+0x64>)
    8eac:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8eae:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    8eb0:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    8eb2:	2b00      	cmp	r3, #0
    8eb4:	d1fc      	bne.n	8eb0 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    8eb6:	338f      	adds	r3, #143	; 0x8f
    8eb8:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    8eba:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    8ebc:	6823      	ldr	r3, [r4, #0]
    8ebe:	2202      	movs	r2, #2
    8ec0:	4393      	bics	r3, r2
    8ec2:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    8ec4:	a901      	add	r1, sp, #4
    8ec6:	200c      	movs	r0, #12
    8ec8:	4c09      	ldr	r4, [pc, #36]	; (8ef0 <nm_bus_deinit+0x68>)
    8eca:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    8ecc:	a901      	add	r1, sp, #4
    8ece:	200f      	movs	r0, #15
    8ed0:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    8ed2:	a901      	add	r1, sp, #4
    8ed4:	200d      	movs	r0, #13
    8ed6:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    8ed8:	a901      	add	r1, sp, #4
    8eda:	200e      	movs	r0, #14
    8edc:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    8ede:	2000      	movs	r0, #0
    8ee0:	b003      	add	sp, #12
    8ee2:	bd30      	pop	{r4, r5, pc}
    8ee4:	2000046c 	.word	0x2000046c
    8ee8:	0000c671 	.word	0x0000c671
    8eec:	e000e100 	.word	0xe000e100
    8ef0:	0000c299 	.word	0x0000c299

00008ef4 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    8ef4:	2a00      	cmp	r2, #0
    8ef6:	d006      	beq.n	8f06 <m2m_memcpy+0x12>
    8ef8:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    8efa:	780b      	ldrb	r3, [r1, #0]
    8efc:	7003      	strb	r3, [r0, #0]
		pDst++;
    8efe:	3001      	adds	r0, #1
		pSrc++;
    8f00:	3101      	adds	r1, #1
	}while(--sz);
    8f02:	4290      	cmp	r0, r2
    8f04:	d1f9      	bne.n	8efa <m2m_memcpy+0x6>
}
    8f06:	4770      	bx	lr

00008f08 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    8f08:	2a00      	cmp	r2, #0
    8f0a:	d004      	beq.n	8f16 <m2m_memset+0xe>
    8f0c:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    8f0e:	7001      	strb	r1, [r0, #0]
		pBuf++;
    8f10:	3001      	adds	r0, #1
	}while(--sz);
    8f12:	4290      	cmp	r0, r2
    8f14:	d1fb      	bne.n	8f0e <m2m_memset+0x6>
}
    8f16:	4770      	bx	lr

00008f18 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    8f18:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    8f1a:	7802      	ldrb	r2, [r0, #0]
    8f1c:	2a00      	cmp	r2, #0
    8f1e:	d007      	beq.n	8f30 <m2m_strlen+0x18>
    8f20:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    8f22:	3001      	adds	r0, #1
    8f24:	b280      	uxth	r0, r0
		pcStr++;
    8f26:	3301      	adds	r3, #1
	while(*pcStr)
    8f28:	781a      	ldrb	r2, [r3, #0]
    8f2a:	2a00      	cmp	r2, #0
    8f2c:	d1f9      	bne.n	8f22 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    8f2e:	4770      	bx	lr
	uint16	u16StrLen = 0;
    8f30:	2000      	movs	r0, #0
    8f32:	e7fc      	b.n	8f2e <m2m_strlen+0x16>

00008f34 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    8f34:	4a02      	ldr	r2, [pc, #8]	; (8f40 <isr+0xc>)
    8f36:	78d3      	ldrb	r3, [r2, #3]
    8f38:	3301      	adds	r3, #1
    8f3a:	b2db      	uxtb	r3, r3
    8f3c:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    8f3e:	4770      	bx	lr
    8f40:	200004a8 	.word	0x200004a8

00008f44 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    8f44:	4770      	bx	lr
	...

00008f48 <hif_set_rx_done>:
{
    8f48:	b500      	push	{lr}
    8f4a:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    8f4c:	2200      	movs	r2, #0
    8f4e:	4b0a      	ldr	r3, [pc, #40]	; (8f78 <hif_set_rx_done+0x30>)
    8f50:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    8f52:	2001      	movs	r0, #1
    8f54:	4b09      	ldr	r3, [pc, #36]	; (8f7c <hif_set_rx_done+0x34>)
    8f56:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    8f58:	a901      	add	r1, sp, #4
    8f5a:	4809      	ldr	r0, [pc, #36]	; (8f80 <hif_set_rx_done+0x38>)
    8f5c:	4b09      	ldr	r3, [pc, #36]	; (8f84 <hif_set_rx_done+0x3c>)
    8f5e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    8f60:	2800      	cmp	r0, #0
    8f62:	d001      	beq.n	8f68 <hif_set_rx_done+0x20>
}
    8f64:	b003      	add	sp, #12
    8f66:	bd00      	pop	{pc}
	reg |= NBIT1;
    8f68:	2102      	movs	r1, #2
    8f6a:	9b01      	ldr	r3, [sp, #4]
    8f6c:	4319      	orrs	r1, r3
    8f6e:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    8f70:	4803      	ldr	r0, [pc, #12]	; (8f80 <hif_set_rx_done+0x38>)
    8f72:	4b05      	ldr	r3, [pc, #20]	; (8f88 <hif_set_rx_done+0x40>)
    8f74:	4798      	blx	r3
    8f76:	e7f5      	b.n	8f64 <hif_set_rx_done+0x1c>
    8f78:	200004a8 	.word	0x200004a8
    8f7c:	00008c15 	.word	0x00008c15
    8f80:	00001070 	.word	0x00001070
    8f84:	0000a391 	.word	0x0000a391
    8f88:	0000a39d 	.word	0x0000a39d

00008f8c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    8f8c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    8f8e:	4b0c      	ldr	r3, [pc, #48]	; (8fc0 <hif_chip_wake+0x34>)
    8f90:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    8f92:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    8f94:	2b00      	cmp	r3, #0
    8f96:	d10d      	bne.n	8fb4 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    8f98:	4b09      	ldr	r3, [pc, #36]	; (8fc0 <hif_chip_wake+0x34>)
    8f9a:	785b      	ldrb	r3, [r3, #1]
    8f9c:	2b00      	cmp	r3, #0
    8f9e:	d103      	bne.n	8fa8 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    8fa0:	4b07      	ldr	r3, [pc, #28]	; (8fc0 <hif_chip_wake+0x34>)
    8fa2:	781b      	ldrb	r3, [r3, #0]
    8fa4:	2b00      	cmp	r3, #0
    8fa6:	d106      	bne.n	8fb6 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    8fa8:	4a05      	ldr	r2, [pc, #20]	; (8fc0 <hif_chip_wake+0x34>)
    8faa:	7853      	ldrb	r3, [r2, #1]
    8fac:	3301      	adds	r3, #1
    8fae:	b2db      	uxtb	r3, r3
    8fb0:	7053      	strb	r3, [r2, #1]
    8fb2:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    8fb4:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    8fb6:	4b03      	ldr	r3, [pc, #12]	; (8fc4 <hif_chip_wake+0x38>)
    8fb8:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    8fba:	2800      	cmp	r0, #0
    8fbc:	d0f4      	beq.n	8fa8 <hif_chip_wake+0x1c>
    8fbe:	e7f9      	b.n	8fb4 <hif_chip_wake+0x28>
    8fc0:	200004a8 	.word	0x200004a8
    8fc4:	0000a079 	.word	0x0000a079

00008fc8 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    8fc8:	4b05      	ldr	r3, [pc, #20]	; (8fe0 <hif_chip_sleep_sc+0x18>)
    8fca:	785b      	ldrb	r3, [r3, #1]
    8fcc:	2b00      	cmp	r3, #0
    8fce:	d004      	beq.n	8fda <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    8fd0:	4a03      	ldr	r2, [pc, #12]	; (8fe0 <hif_chip_sleep_sc+0x18>)
    8fd2:	7853      	ldrb	r3, [r2, #1]
    8fd4:	3b01      	subs	r3, #1
    8fd6:	b2db      	uxtb	r3, r3
    8fd8:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    8fda:	2000      	movs	r0, #0
    8fdc:	4770      	bx	lr
    8fde:	46c0      	nop			; (mov r8, r8)
    8fe0:	200004a8 	.word	0x200004a8

00008fe4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    8fe4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    8fe6:	4b0b      	ldr	r3, [pc, #44]	; (9014 <hif_chip_sleep+0x30>)
    8fe8:	785b      	ldrb	r3, [r3, #1]
    8fea:	2b00      	cmp	r3, #0
    8fec:	d004      	beq.n	8ff8 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    8fee:	4a09      	ldr	r2, [pc, #36]	; (9014 <hif_chip_sleep+0x30>)
    8ff0:	7853      	ldrb	r3, [r2, #1]
    8ff2:	3b01      	subs	r3, #1
    8ff4:	b2db      	uxtb	r3, r3
    8ff6:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    8ff8:	4b06      	ldr	r3, [pc, #24]	; (9014 <hif_chip_sleep+0x30>)
    8ffa:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    8ffc:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    8ffe:	2b00      	cmp	r3, #0
    9000:	d103      	bne.n	900a <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    9002:	4b04      	ldr	r3, [pc, #16]	; (9014 <hif_chip_sleep+0x30>)
    9004:	781b      	ldrb	r3, [r3, #0]
    9006:	2b00      	cmp	r3, #0
    9008:	d100      	bne.n	900c <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    900a:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    900c:	4b02      	ldr	r3, [pc, #8]	; (9018 <hif_chip_sleep+0x34>)
    900e:	4798      	blx	r3
    9010:	e7fb      	b.n	900a <hif_chip_sleep+0x26>
    9012:	46c0      	nop			; (mov r8, r8)
    9014:	200004a8 	.word	0x200004a8
    9018:	0000a011 	.word	0x0000a011

0000901c <hif_deinit>:
*    @param [in]	arg
*				Pointer to the arguments.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_deinit(void * arg)
{
    901c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    901e:	4b05      	ldr	r3, [pc, #20]	; (9034 <hif_deinit+0x18>)
    9020:	4798      	blx	r3
    9022:	0004      	movs	r4, r0
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    9024:	2228      	movs	r2, #40	; 0x28
    9026:	2100      	movs	r1, #0
    9028:	4803      	ldr	r0, [pc, #12]	; (9038 <hif_deinit+0x1c>)
    902a:	4b04      	ldr	r3, [pc, #16]	; (903c <hif_deinit+0x20>)
    902c:	4798      	blx	r3
	return ret;
}
    902e:	0020      	movs	r0, r4
    9030:	bd10      	pop	{r4, pc}
    9032:	46c0      	nop			; (mov r8, r8)
    9034:	00008f8d 	.word	0x00008f8d
    9038:	200004a8 	.word	0x200004a8
    903c:	00008f09 	.word	0x00008f09

00009040 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    9040:	b5f0      	push	{r4, r5, r6, r7, lr}
    9042:	46de      	mov	lr, fp
    9044:	4657      	mov	r7, sl
    9046:	b580      	push	{r7, lr}
    9048:	b089      	sub	sp, #36	; 0x24
    904a:	4683      	mov	fp, r0
    904c:	468a      	mov	sl, r1
    904e:	9201      	str	r2, [sp, #4]
    9050:	9300      	str	r3, [sp, #0]
    9052:	ab10      	add	r3, sp, #64	; 0x40
    9054:	cb80      	ldmia	r3!, {r7}
    9056:	881e      	ldrh	r6, [r3, #0]
    9058:	ab12      	add	r3, sp, #72	; 0x48
    905a:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    905c:	227f      	movs	r2, #127	; 0x7f
    905e:	400a      	ands	r2, r1
    9060:	ab07      	add	r3, sp, #28
    9062:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    9064:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    9066:	2208      	movs	r2, #8
    9068:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    906a:	2f00      	cmp	r7, #0
    906c:	d03d      	beq.n	90ea <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    906e:	885a      	ldrh	r2, [r3, #2]
    9070:	1992      	adds	r2, r2, r6
    9072:	18aa      	adds	r2, r5, r2
    9074:	b292      	uxth	r2, r2
    9076:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    9078:	4b69      	ldr	r3, [pc, #420]	; (9220 <hif_send+0x1e0>)
    907a:	4798      	blx	r3
    907c:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    907e:	d000      	beq.n	9082 <hif_send+0x42>
    9080:	e0c1      	b.n	9206 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    9082:	2300      	movs	r3, #0
    9084:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    9086:	aa02      	add	r2, sp, #8
    9088:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    908a:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    908c:	9b04      	ldr	r3, [sp, #16]
    908e:	465a      	mov	r2, fp
    9090:	431a      	orrs	r2, r3
    9092:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    9094:	9a04      	ldr	r2, [sp, #16]
    9096:	4653      	mov	r3, sl
    9098:	021b      	lsls	r3, r3, #8
    909a:	4313      	orrs	r3, r2
    909c:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    909e:	ab07      	add	r3, sp, #28
    90a0:	885b      	ldrh	r3, [r3, #2]
    90a2:	9a04      	ldr	r2, [sp, #16]
    90a4:	041b      	lsls	r3, r3, #16
    90a6:	4313      	orrs	r3, r2
    90a8:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    90aa:	9904      	ldr	r1, [sp, #16]
    90ac:	485d      	ldr	r0, [pc, #372]	; (9224 <hif_send+0x1e4>)
    90ae:	4b5e      	ldr	r3, [pc, #376]	; (9228 <hif_send+0x1e8>)
    90b0:	4798      	blx	r3
    90b2:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    90b4:	d157      	bne.n	9166 <hif_send+0x126>

		reg = 0UL;
    90b6:	2300      	movs	r3, #0
    90b8:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    90ba:	9b04      	ldr	r3, [sp, #16]
    90bc:	2202      	movs	r2, #2
    90be:	4313      	orrs	r3, r2
    90c0:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    90c2:	9904      	ldr	r1, [sp, #16]
    90c4:	4859      	ldr	r0, [pc, #356]	; (922c <hif_send+0x1ec>)
    90c6:	4b58      	ldr	r3, [pc, #352]	; (9228 <hif_send+0x1e8>)
    90c8:	4798      	blx	r3
    90ca:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    90cc:	d14b      	bne.n	9166 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    90ce:	2200      	movs	r2, #0
    90d0:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    90d2:	ab02      	add	r3, sp, #8
    90d4:	80da      	strh	r2, [r3, #6]
    90d6:	3306      	adds	r3, #6
    90d8:	881b      	ldrh	r3, [r3, #0]
    90da:	b29b      	uxth	r3, r3
    90dc:	4a54      	ldr	r2, [pc, #336]	; (9230 <hif_send+0x1f0>)
    90de:	4293      	cmp	r3, r2
    90e0:	d849      	bhi.n	9176 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    90e2:	4c54      	ldr	r4, [pc, #336]	; (9234 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    90e4:	4b54      	ldr	r3, [pc, #336]	; (9238 <hif_send+0x1f8>)
    90e6:	469a      	mov	sl, r3
    90e8:	e017      	b.n	911a <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    90ea:	ab07      	add	r3, sp, #28
    90ec:	885a      	ldrh	r2, [r3, #2]
    90ee:	9900      	ldr	r1, [sp, #0]
    90f0:	468c      	mov	ip, r1
    90f2:	4462      	add	r2, ip
    90f4:	b292      	uxth	r2, r2
    90f6:	805a      	strh	r2, [r3, #2]
    90f8:	e7be      	b.n	9078 <hif_send+0x38>
				nm_bsp_sleep(1);
    90fa:	2001      	movs	r0, #1
    90fc:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    90fe:	9b04      	ldr	r3, [sp, #16]
    9100:	079b      	lsls	r3, r3, #30
    9102:	d528      	bpl.n	9156 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    9104:	ab02      	add	r3, sp, #8
    9106:	88da      	ldrh	r2, [r3, #6]
    9108:	3201      	adds	r2, #1
    910a:	b292      	uxth	r2, r2
    910c:	80da      	strh	r2, [r3, #6]
    910e:	3306      	adds	r3, #6
    9110:	881b      	ldrh	r3, [r3, #0]
    9112:	b29b      	uxth	r3, r3
    9114:	4a46      	ldr	r2, [pc, #280]	; (9230 <hif_send+0x1f0>)
    9116:	4293      	cmp	r3, r2
    9118:	d82d      	bhi.n	9176 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    911a:	a904      	add	r1, sp, #16
    911c:	4843      	ldr	r0, [pc, #268]	; (922c <hif_send+0x1ec>)
    911e:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    9120:	2800      	cmp	r0, #0
    9122:	d128      	bne.n	9176 <hif_send+0x136>
			if(cnt >= 500) {
    9124:	ab02      	add	r3, sp, #8
    9126:	3306      	adds	r3, #6
    9128:	881b      	ldrh	r3, [r3, #0]
    912a:	b29b      	uxth	r3, r3
    912c:	22f4      	movs	r2, #244	; 0xf4
    912e:	32ff      	adds	r2, #255	; 0xff
    9130:	4293      	cmp	r3, r2
    9132:	d9e4      	bls.n	90fe <hif_send+0xbe>
				if(cnt < 501) {
    9134:	ab02      	add	r3, sp, #8
    9136:	3306      	adds	r3, #6
    9138:	881b      	ldrh	r3, [r3, #0]
    913a:	b29b      	uxth	r3, r3
    913c:	3201      	adds	r2, #1
    913e:	4293      	cmp	r3, r2
    9140:	d8db      	bhi.n	90fa <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    9142:	483e      	ldr	r0, [pc, #248]	; (923c <hif_send+0x1fc>)
    9144:	4b3e      	ldr	r3, [pc, #248]	; (9240 <hif_send+0x200>)
    9146:	4798      	blx	r3
    9148:	483e      	ldr	r0, [pc, #248]	; (9244 <hif_send+0x204>)
    914a:	4b3f      	ldr	r3, [pc, #252]	; (9248 <hif_send+0x208>)
    914c:	4798      	blx	r3
    914e:	200d      	movs	r0, #13
    9150:	4b3e      	ldr	r3, [pc, #248]	; (924c <hif_send+0x20c>)
    9152:	4798      	blx	r3
    9154:	e7d1      	b.n	90fa <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    9156:	a905      	add	r1, sp, #20
    9158:	483d      	ldr	r0, [pc, #244]	; (9250 <hif_send+0x210>)
    915a:	4b36      	ldr	r3, [pc, #216]	; (9234 <hif_send+0x1f4>)
    915c:	4798      	blx	r3
    915e:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    9160:	d009      	beq.n	9176 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    9162:	2300      	movs	r3, #0
    9164:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    9166:	4b3b      	ldr	r3, [pc, #236]	; (9254 <hif_send+0x214>)
    9168:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    916a:	0020      	movs	r0, r4
    916c:	b009      	add	sp, #36	; 0x24
    916e:	bc0c      	pop	{r2, r3}
    9170:	4692      	mov	sl, r2
    9172:	469b      	mov	fp, r3
    9174:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    9176:	9b05      	ldr	r3, [sp, #20]
    9178:	2b00      	cmp	r3, #0
    917a:	d03f      	beq.n	91fc <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    917c:	9b05      	ldr	r3, [sp, #20]
    917e:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    9180:	a907      	add	r1, sp, #28
    9182:	884b      	ldrh	r3, [r1, #2]
    9184:	b29b      	uxth	r3, r3
    9186:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    9188:	9806      	ldr	r0, [sp, #24]
    918a:	2208      	movs	r2, #8
    918c:	4b32      	ldr	r3, [pc, #200]	; (9258 <hif_send+0x218>)
    918e:	4798      	blx	r3
    9190:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    9192:	d1e8      	bne.n	9166 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    9194:	9b06      	ldr	r3, [sp, #24]
    9196:	3308      	adds	r3, #8
    9198:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    919a:	9b01      	ldr	r3, [sp, #4]
    919c:	2b00      	cmp	r3, #0
    919e:	d00b      	beq.n	91b8 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    91a0:	9806      	ldr	r0, [sp, #24]
    91a2:	9a00      	ldr	r2, [sp, #0]
    91a4:	0019      	movs	r1, r3
    91a6:	4b2c      	ldr	r3, [pc, #176]	; (9258 <hif_send+0x218>)
    91a8:	4798      	blx	r3
    91aa:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    91ac:	d1db      	bne.n	9166 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    91ae:	9b06      	ldr	r3, [sp, #24]
    91b0:	9a00      	ldr	r2, [sp, #0]
    91b2:	4694      	mov	ip, r2
    91b4:	4463      	add	r3, ip
    91b6:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    91b8:	2f00      	cmp	r7, #0
    91ba:	d00e      	beq.n	91da <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    91bc:	9b06      	ldr	r3, [sp, #24]
    91be:	9a00      	ldr	r2, [sp, #0]
    91c0:	1aad      	subs	r5, r5, r2
    91c2:	18ed      	adds	r5, r5, r3
    91c4:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    91c6:	9806      	ldr	r0, [sp, #24]
    91c8:	0032      	movs	r2, r6
    91ca:	0039      	movs	r1, r7
    91cc:	4b22      	ldr	r3, [pc, #136]	; (9258 <hif_send+0x218>)
    91ce:	4798      	blx	r3
    91d0:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    91d2:	d1c8      	bne.n	9166 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    91d4:	9b06      	ldr	r3, [sp, #24]
    91d6:	18f3      	adds	r3, r6, r3
    91d8:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    91da:	9b05      	ldr	r3, [sp, #20]
    91dc:	009b      	lsls	r3, r3, #2
    91de:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    91e0:	9b04      	ldr	r3, [sp, #16]
    91e2:	2202      	movs	r2, #2
    91e4:	4313      	orrs	r3, r2
    91e6:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    91e8:	9904      	ldr	r1, [sp, #16]
    91ea:	481c      	ldr	r0, [pc, #112]	; (925c <hif_send+0x21c>)
    91ec:	4b0e      	ldr	r3, [pc, #56]	; (9228 <hif_send+0x1e8>)
    91ee:	4798      	blx	r3
    91f0:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    91f2:	d1b8      	bne.n	9166 <hif_send+0x126>
 	ret = hif_chip_sleep();
    91f4:	4b1a      	ldr	r3, [pc, #104]	; (9260 <hif_send+0x220>)
    91f6:	4798      	blx	r3
    91f8:	0004      	movs	r4, r0
	return ret;
    91fa:	e7b6      	b.n	916a <hif_send+0x12a>
			ret = hif_chip_sleep();
    91fc:	4b18      	ldr	r3, [pc, #96]	; (9260 <hif_send+0x220>)
    91fe:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    9200:	2403      	movs	r4, #3
    9202:	4264      	negs	r4, r4
			goto ERR2;
    9204:	e7b1      	b.n	916a <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    9206:	22cb      	movs	r2, #203	; 0xcb
    9208:	0052      	lsls	r2, r2, #1
    920a:	4916      	ldr	r1, [pc, #88]	; (9264 <hif_send+0x224>)
    920c:	4816      	ldr	r0, [pc, #88]	; (9268 <hif_send+0x228>)
    920e:	4b0c      	ldr	r3, [pc, #48]	; (9240 <hif_send+0x200>)
    9210:	4798      	blx	r3
    9212:	4816      	ldr	r0, [pc, #88]	; (926c <hif_send+0x22c>)
    9214:	4b0c      	ldr	r3, [pc, #48]	; (9248 <hif_send+0x208>)
    9216:	4798      	blx	r3
    9218:	200d      	movs	r0, #13
    921a:	4b0c      	ldr	r3, [pc, #48]	; (924c <hif_send+0x20c>)
    921c:	4798      	blx	r3
		goto ERR2;
    921e:	e7a4      	b.n	916a <hif_send+0x12a>
    9220:	00008f8d 	.word	0x00008f8d
    9224:	0000108c 	.word	0x0000108c
    9228:	0000a39d 	.word	0x0000a39d
    922c:	00001078 	.word	0x00001078
    9230:	000003e7 	.word	0x000003e7
    9234:	0000a391 	.word	0x0000a391
    9238:	00008afd 	.word	0x00008afd
    923c:	00013218 	.word	0x00013218
    9240:	00011869 	.word	0x00011869
    9244:	00013224 	.word	0x00013224
    9248:	00011985 	.word	0x00011985
    924c:	0001189d 	.word	0x0001189d
    9250:	00150400 	.word	0x00150400
    9254:	00008fc9 	.word	0x00008fc9
    9258:	0000a411 	.word	0x0000a411
    925c:	0000106c 	.word	0x0000106c
    9260:	00008fe5 	.word	0x00008fe5
    9264:	00012f30 	.word	0x00012f30
    9268:	00012ee8 	.word	0x00012ee8
    926c:	00013234 	.word	0x00013234

00009270 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    9270:	b5f0      	push	{r4, r5, r6, r7, lr}
    9272:	46ce      	mov	lr, r9
    9274:	4647      	mov	r7, r8
    9276:	b580      	push	{r7, lr}
    9278:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    927a:	4bcf      	ldr	r3, [pc, #828]	; (95b8 <hif_handle_isr+0x348>)
    927c:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    927e:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    9280:	e080      	b.n	9384 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    9282:	4bcd      	ldr	r3, [pc, #820]	; (95b8 <hif_handle_isr+0x348>)
    9284:	9a05      	ldr	r2, [sp, #20]
    9286:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    9288:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    928a:	af04      	add	r7, sp, #16
    928c:	2204      	movs	r2, #4
    928e:	0039      	movs	r1, r7
    9290:	9805      	ldr	r0, [sp, #20]
    9292:	4bca      	ldr	r3, [pc, #808]	; (95bc <hif_handle_isr+0x34c>)
    9294:	4798      	blx	r3
    9296:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    9298:	887b      	ldrh	r3, [r7, #2]
    929a:	b29b      	uxth	r3, r3
    929c:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    929e:	2800      	cmp	r0, #0
    92a0:	d133      	bne.n	930a <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    92a2:	ab04      	add	r3, sp, #16
    92a4:	885b      	ldrh	r3, [r3, #2]
    92a6:	b29b      	uxth	r3, r3
    92a8:	429d      	cmp	r5, r3
    92aa:	d004      	beq.n	92b6 <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    92ac:	ab04      	add	r3, sp, #16
    92ae:	885b      	ldrh	r3, [r3, #2]
    92b0:	1aeb      	subs	r3, r5, r3
    92b2:	2b04      	cmp	r3, #4
    92b4:	dc39      	bgt.n	932a <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    92b6:	ab04      	add	r3, sp, #16
    92b8:	781b      	ldrb	r3, [r3, #0]
    92ba:	2b01      	cmp	r3, #1
    92bc:	d04e      	beq.n	935c <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    92be:	ab04      	add	r3, sp, #16
    92c0:	781b      	ldrb	r3, [r3, #0]
    92c2:	2b02      	cmp	r3, #2
    92c4:	d078      	beq.n	93b8 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    92c6:	ab04      	add	r3, sp, #16
    92c8:	781b      	ldrb	r3, [r3, #0]
    92ca:	2b04      	cmp	r3, #4
    92cc:	d100      	bne.n	92d0 <hif_handle_isr+0x60>
    92ce:	e090      	b.n	93f2 <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    92d0:	ab04      	add	r3, sp, #16
    92d2:	781b      	ldrb	r3, [r3, #0]
    92d4:	2b06      	cmp	r3, #6
    92d6:	d100      	bne.n	92da <hif_handle_isr+0x6a>
    92d8:	e0a8      	b.n	942c <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    92da:	ab04      	add	r3, sp, #16
    92dc:	781b      	ldrb	r3, [r3, #0]
    92de:	2b07      	cmp	r3, #7
    92e0:	d100      	bne.n	92e4 <hif_handle_isr+0x74>
    92e2:	e0bf      	b.n	9464 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    92e4:	ab04      	add	r3, sp, #16
    92e6:	781b      	ldrb	r3, [r3, #0]
    92e8:	2b05      	cmp	r3, #5
    92ea:	d100      	bne.n	92ee <hif_handle_isr+0x7e>
    92ec:	e0d6      	b.n	949c <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    92ee:	4ab4      	ldr	r2, [pc, #720]	; (95c0 <hif_handle_isr+0x350>)
    92f0:	49b4      	ldr	r1, [pc, #720]	; (95c4 <hif_handle_isr+0x354>)
    92f2:	48b5      	ldr	r0, [pc, #724]	; (95c8 <hif_handle_isr+0x358>)
    92f4:	4bb5      	ldr	r3, [pc, #724]	; (95cc <hif_handle_isr+0x35c>)
    92f6:	4798      	blx	r3
    92f8:	48b5      	ldr	r0, [pc, #724]	; (95d0 <hif_handle_isr+0x360>)
    92fa:	4bb6      	ldr	r3, [pc, #728]	; (95d4 <hif_handle_isr+0x364>)
    92fc:	4798      	blx	r3
    92fe:	200d      	movs	r0, #13
    9300:	4bb5      	ldr	r3, [pc, #724]	; (95d8 <hif_handle_isr+0x368>)
    9302:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    9304:	2406      	movs	r4, #6
    9306:	4264      	negs	r4, r4
    9308:	e116      	b.n	9538 <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    930a:	22d2      	movs	r2, #210	; 0xd2
    930c:	32ff      	adds	r2, #255	; 0xff
    930e:	49ad      	ldr	r1, [pc, #692]	; (95c4 <hif_handle_isr+0x354>)
    9310:	48ad      	ldr	r0, [pc, #692]	; (95c8 <hif_handle_isr+0x358>)
    9312:	4bae      	ldr	r3, [pc, #696]	; (95cc <hif_handle_isr+0x35c>)
    9314:	4798      	blx	r3
    9316:	48b1      	ldr	r0, [pc, #708]	; (95dc <hif_handle_isr+0x36c>)
    9318:	4bae      	ldr	r3, [pc, #696]	; (95d4 <hif_handle_isr+0x364>)
    931a:	4798      	blx	r3
    931c:	200d      	movs	r0, #13
    931e:	4bae      	ldr	r3, [pc, #696]	; (95d8 <hif_handle_isr+0x368>)
    9320:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    9322:	2001      	movs	r0, #1
    9324:	4bae      	ldr	r3, [pc, #696]	; (95e0 <hif_handle_isr+0x370>)
    9326:	4798      	blx	r3
    9328:	e106      	b.n	9538 <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    932a:	22ed      	movs	r2, #237	; 0xed
    932c:	0052      	lsls	r2, r2, #1
    932e:	49a5      	ldr	r1, [pc, #660]	; (95c4 <hif_handle_isr+0x354>)
    9330:	48a5      	ldr	r0, [pc, #660]	; (95c8 <hif_handle_isr+0x358>)
    9332:	4ca6      	ldr	r4, [pc, #664]	; (95cc <hif_handle_isr+0x35c>)
    9334:	47a0      	blx	r4
    9336:	a904      	add	r1, sp, #16
    9338:	884a      	ldrh	r2, [r1, #2]
    933a:	b292      	uxth	r2, r2
    933c:	780b      	ldrb	r3, [r1, #0]
    933e:	b2db      	uxtb	r3, r3
    9340:	7849      	ldrb	r1, [r1, #1]
    9342:	9100      	str	r1, [sp, #0]
    9344:	0029      	movs	r1, r5
    9346:	48a7      	ldr	r0, [pc, #668]	; (95e4 <hif_handle_isr+0x374>)
    9348:	47a0      	blx	r4
    934a:	200d      	movs	r0, #13
    934c:	4ba2      	ldr	r3, [pc, #648]	; (95d8 <hif_handle_isr+0x368>)
    934e:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    9350:	2001      	movs	r0, #1
    9352:	4ba3      	ldr	r3, [pc, #652]	; (95e0 <hif_handle_isr+0x370>)
    9354:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    9356:	2406      	movs	r4, #6
    9358:	4264      	negs	r4, r4
    935a:	e0ed      	b.n	9538 <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    935c:	4b96      	ldr	r3, [pc, #600]	; (95b8 <hif_handle_isr+0x348>)
    935e:	68db      	ldr	r3, [r3, #12]
    9360:	2b00      	cmp	r3, #0
    9362:	d01c      	beq.n	939e <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9364:	4b94      	ldr	r3, [pc, #592]	; (95b8 <hif_handle_isr+0x348>)
    9366:	68db      	ldr	r3, [r3, #12]
    9368:	aa04      	add	r2, sp, #16
    936a:	7850      	ldrb	r0, [r2, #1]
    936c:	b2c0      	uxtb	r0, r0
    936e:	8851      	ldrh	r1, [r2, #2]
    9370:	9a05      	ldr	r2, [sp, #20]
    9372:	3208      	adds	r2, #8
    9374:	3908      	subs	r1, #8
    9376:	b289      	uxth	r1, r1
    9378:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    937a:	4b8f      	ldr	r3, [pc, #572]	; (95b8 <hif_handle_isr+0x348>)
    937c:	789b      	ldrb	r3, [r3, #2]
    937e:	2b00      	cmp	r3, #0
    9380:	d000      	beq.n	9384 <hif_handle_isr+0x114>
    9382:	e09c      	b.n	94be <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    9384:	4643      	mov	r3, r8
    9386:	78db      	ldrb	r3, [r3, #3]
    9388:	2b00      	cmp	r3, #0
    938a:	d100      	bne.n	938e <hif_handle_isr+0x11e>
    938c:	e158      	b.n	9640 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    938e:	464b      	mov	r3, r9
    9390:	78db      	ldrb	r3, [r3, #3]
    9392:	3b01      	subs	r3, #1
    9394:	b2db      	uxtb	r3, r3
    9396:	464a      	mov	r2, r9
    9398:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    939a:	4e93      	ldr	r6, [pc, #588]	; (95e8 <hif_handle_isr+0x378>)
    939c:	e0d7      	b.n	954e <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    939e:	22f3      	movs	r2, #243	; 0xf3
    93a0:	0052      	lsls	r2, r2, #1
    93a2:	4988      	ldr	r1, [pc, #544]	; (95c4 <hif_handle_isr+0x354>)
    93a4:	4888      	ldr	r0, [pc, #544]	; (95c8 <hif_handle_isr+0x358>)
    93a6:	4b89      	ldr	r3, [pc, #548]	; (95cc <hif_handle_isr+0x35c>)
    93a8:	4798      	blx	r3
    93aa:	4890      	ldr	r0, [pc, #576]	; (95ec <hif_handle_isr+0x37c>)
    93ac:	4b89      	ldr	r3, [pc, #548]	; (95d4 <hif_handle_isr+0x364>)
    93ae:	4798      	blx	r3
    93b0:	200d      	movs	r0, #13
    93b2:	4b89      	ldr	r3, [pc, #548]	; (95d8 <hif_handle_isr+0x368>)
    93b4:	4798      	blx	r3
    93b6:	e7e0      	b.n	937a <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    93b8:	4b7f      	ldr	r3, [pc, #508]	; (95b8 <hif_handle_isr+0x348>)
    93ba:	691b      	ldr	r3, [r3, #16]
    93bc:	2b00      	cmp	r3, #0
    93be:	d00b      	beq.n	93d8 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    93c0:	4b7d      	ldr	r3, [pc, #500]	; (95b8 <hif_handle_isr+0x348>)
    93c2:	691b      	ldr	r3, [r3, #16]
    93c4:	aa04      	add	r2, sp, #16
    93c6:	7850      	ldrb	r0, [r2, #1]
    93c8:	b2c0      	uxtb	r0, r0
    93ca:	8851      	ldrh	r1, [r2, #2]
    93cc:	9a05      	ldr	r2, [sp, #20]
    93ce:	3208      	adds	r2, #8
    93d0:	3908      	subs	r1, #8
    93d2:	b289      	uxth	r1, r1
    93d4:	4798      	blx	r3
    93d6:	e7d0      	b.n	937a <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    93d8:	22f7      	movs	r2, #247	; 0xf7
    93da:	0052      	lsls	r2, r2, #1
    93dc:	4979      	ldr	r1, [pc, #484]	; (95c4 <hif_handle_isr+0x354>)
    93de:	487a      	ldr	r0, [pc, #488]	; (95c8 <hif_handle_isr+0x358>)
    93e0:	4b7a      	ldr	r3, [pc, #488]	; (95cc <hif_handle_isr+0x35c>)
    93e2:	4798      	blx	r3
    93e4:	4882      	ldr	r0, [pc, #520]	; (95f0 <hif_handle_isr+0x380>)
    93e6:	4b7b      	ldr	r3, [pc, #492]	; (95d4 <hif_handle_isr+0x364>)
    93e8:	4798      	blx	r3
    93ea:	200d      	movs	r0, #13
    93ec:	4b7a      	ldr	r3, [pc, #488]	; (95d8 <hif_handle_isr+0x368>)
    93ee:	4798      	blx	r3
    93f0:	e7c3      	b.n	937a <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    93f2:	4b71      	ldr	r3, [pc, #452]	; (95b8 <hif_handle_isr+0x348>)
    93f4:	695b      	ldr	r3, [r3, #20]
    93f6:	2b00      	cmp	r3, #0
    93f8:	d00b      	beq.n	9412 <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    93fa:	4b6f      	ldr	r3, [pc, #444]	; (95b8 <hif_handle_isr+0x348>)
    93fc:	695b      	ldr	r3, [r3, #20]
    93fe:	aa04      	add	r2, sp, #16
    9400:	7850      	ldrb	r0, [r2, #1]
    9402:	b2c0      	uxtb	r0, r0
    9404:	8851      	ldrh	r1, [r2, #2]
    9406:	9a05      	ldr	r2, [sp, #20]
    9408:	3208      	adds	r2, #8
    940a:	3908      	subs	r1, #8
    940c:	b289      	uxth	r1, r1
    940e:	4798      	blx	r3
    9410:	e7b3      	b.n	937a <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    9412:	22fb      	movs	r2, #251	; 0xfb
    9414:	0052      	lsls	r2, r2, #1
    9416:	496b      	ldr	r1, [pc, #428]	; (95c4 <hif_handle_isr+0x354>)
    9418:	486b      	ldr	r0, [pc, #428]	; (95c8 <hif_handle_isr+0x358>)
    941a:	4b6c      	ldr	r3, [pc, #432]	; (95cc <hif_handle_isr+0x35c>)
    941c:	4798      	blx	r3
    941e:	4875      	ldr	r0, [pc, #468]	; (95f4 <hif_handle_isr+0x384>)
    9420:	4b6c      	ldr	r3, [pc, #432]	; (95d4 <hif_handle_isr+0x364>)
    9422:	4798      	blx	r3
    9424:	200d      	movs	r0, #13
    9426:	4b6c      	ldr	r3, [pc, #432]	; (95d8 <hif_handle_isr+0x368>)
    9428:	4798      	blx	r3
    942a:	e7a6      	b.n	937a <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    942c:	4b62      	ldr	r3, [pc, #392]	; (95b8 <hif_handle_isr+0x348>)
    942e:	6a1b      	ldr	r3, [r3, #32]
    9430:	2b00      	cmp	r3, #0
    9432:	d00b      	beq.n	944c <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9434:	4b60      	ldr	r3, [pc, #384]	; (95b8 <hif_handle_isr+0x348>)
    9436:	6a1b      	ldr	r3, [r3, #32]
    9438:	aa04      	add	r2, sp, #16
    943a:	7850      	ldrb	r0, [r2, #1]
    943c:	b2c0      	uxtb	r0, r0
    943e:	8851      	ldrh	r1, [r2, #2]
    9440:	9a05      	ldr	r2, [sp, #20]
    9442:	3208      	adds	r2, #8
    9444:	3908      	subs	r1, #8
    9446:	b289      	uxth	r1, r1
    9448:	4798      	blx	r3
    944a:	e796      	b.n	937a <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    944c:	4a6a      	ldr	r2, [pc, #424]	; (95f8 <hif_handle_isr+0x388>)
    944e:	495d      	ldr	r1, [pc, #372]	; (95c4 <hif_handle_isr+0x354>)
    9450:	485d      	ldr	r0, [pc, #372]	; (95c8 <hif_handle_isr+0x358>)
    9452:	4b5e      	ldr	r3, [pc, #376]	; (95cc <hif_handle_isr+0x35c>)
    9454:	4798      	blx	r3
    9456:	4869      	ldr	r0, [pc, #420]	; (95fc <hif_handle_isr+0x38c>)
    9458:	4b5e      	ldr	r3, [pc, #376]	; (95d4 <hif_handle_isr+0x364>)
    945a:	4798      	blx	r3
    945c:	200d      	movs	r0, #13
    945e:	4b5e      	ldr	r3, [pc, #376]	; (95d8 <hif_handle_isr+0x368>)
    9460:	4798      	blx	r3
    9462:	e78a      	b.n	937a <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    9464:	4b54      	ldr	r3, [pc, #336]	; (95b8 <hif_handle_isr+0x348>)
    9466:	699b      	ldr	r3, [r3, #24]
    9468:	2b00      	cmp	r3, #0
    946a:	d00b      	beq.n	9484 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    946c:	4b52      	ldr	r3, [pc, #328]	; (95b8 <hif_handle_isr+0x348>)
    946e:	699b      	ldr	r3, [r3, #24]
    9470:	aa04      	add	r2, sp, #16
    9472:	7850      	ldrb	r0, [r2, #1]
    9474:	b2c0      	uxtb	r0, r0
    9476:	8851      	ldrh	r1, [r2, #2]
    9478:	9a05      	ldr	r2, [sp, #20]
    947a:	3208      	adds	r2, #8
    947c:	3908      	subs	r1, #8
    947e:	b289      	uxth	r1, r1
    9480:	4798      	blx	r3
    9482:	e77a      	b.n	937a <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    9484:	4a5e      	ldr	r2, [pc, #376]	; (9600 <hif_handle_isr+0x390>)
    9486:	494f      	ldr	r1, [pc, #316]	; (95c4 <hif_handle_isr+0x354>)
    9488:	484f      	ldr	r0, [pc, #316]	; (95c8 <hif_handle_isr+0x358>)
    948a:	4b50      	ldr	r3, [pc, #320]	; (95cc <hif_handle_isr+0x35c>)
    948c:	4798      	blx	r3
    948e:	485d      	ldr	r0, [pc, #372]	; (9604 <hif_handle_isr+0x394>)
    9490:	4b50      	ldr	r3, [pc, #320]	; (95d4 <hif_handle_isr+0x364>)
    9492:	4798      	blx	r3
    9494:	200d      	movs	r0, #13
    9496:	4b50      	ldr	r3, [pc, #320]	; (95d8 <hif_handle_isr+0x368>)
    9498:	4798      	blx	r3
    949a:	e76e      	b.n	937a <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    949c:	4b46      	ldr	r3, [pc, #280]	; (95b8 <hif_handle_isr+0x348>)
    949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    94a0:	2b00      	cmp	r3, #0
    94a2:	d100      	bne.n	94a6 <hif_handle_isr+0x236>
    94a4:	e769      	b.n	937a <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    94a6:	4b44      	ldr	r3, [pc, #272]	; (95b8 <hif_handle_isr+0x348>)
    94a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    94aa:	aa04      	add	r2, sp, #16
    94ac:	7850      	ldrb	r0, [r2, #1]
    94ae:	b2c0      	uxtb	r0, r0
    94b0:	8851      	ldrh	r1, [r2, #2]
    94b2:	9a05      	ldr	r2, [sp, #20]
    94b4:	3208      	adds	r2, #8
    94b6:	3908      	subs	r1, #8
    94b8:	b289      	uxth	r1, r1
    94ba:	4798      	blx	r3
    94bc:	e75d      	b.n	937a <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    94be:	4a52      	ldr	r2, [pc, #328]	; (9608 <hif_handle_isr+0x398>)
    94c0:	4940      	ldr	r1, [pc, #256]	; (95c4 <hif_handle_isr+0x354>)
    94c2:	4841      	ldr	r0, [pc, #260]	; (95c8 <hif_handle_isr+0x358>)
    94c4:	4c41      	ldr	r4, [pc, #260]	; (95cc <hif_handle_isr+0x35c>)
    94c6:	47a0      	blx	r4
    94c8:	ab04      	add	r3, sp, #16
    94ca:	7819      	ldrb	r1, [r3, #0]
    94cc:	b2c9      	uxtb	r1, r1
    94ce:	785a      	ldrb	r2, [r3, #1]
    94d0:	b2d2      	uxtb	r2, r2
    94d2:	484e      	ldr	r0, [pc, #312]	; (960c <hif_handle_isr+0x39c>)
    94d4:	47a0      	blx	r4
    94d6:	200d      	movs	r0, #13
    94d8:	4b3f      	ldr	r3, [pc, #252]	; (95d8 <hif_handle_isr+0x368>)
    94da:	4798      	blx	r3
					ret = hif_set_rx_done();
    94dc:	4b4c      	ldr	r3, [pc, #304]	; (9610 <hif_handle_isr+0x3a0>)
    94de:	4798      	blx	r3
    94e0:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    94e2:	d129      	bne.n	9538 <hif_handle_isr+0x2c8>
    94e4:	e74e      	b.n	9384 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    94e6:	2287      	movs	r2, #135	; 0x87
    94e8:	0092      	lsls	r2, r2, #2
    94ea:	4936      	ldr	r1, [pc, #216]	; (95c4 <hif_handle_isr+0x354>)
    94ec:	4836      	ldr	r0, [pc, #216]	; (95c8 <hif_handle_isr+0x358>)
    94ee:	4b37      	ldr	r3, [pc, #220]	; (95cc <hif_handle_isr+0x35c>)
    94f0:	4798      	blx	r3
    94f2:	4848      	ldr	r0, [pc, #288]	; (9614 <hif_handle_isr+0x3a4>)
    94f4:	4b37      	ldr	r3, [pc, #220]	; (95d4 <hif_handle_isr+0x364>)
    94f6:	4798      	blx	r3
    94f8:	200d      	movs	r0, #13
    94fa:	4b37      	ldr	r3, [pc, #220]	; (95d8 <hif_handle_isr+0x368>)
    94fc:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    94fe:	2402      	movs	r4, #2
    9500:	4264      	negs	r4, r4
    9502:	e019      	b.n	9538 <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    9504:	2289      	movs	r2, #137	; 0x89
    9506:	0092      	lsls	r2, r2, #2
    9508:	492e      	ldr	r1, [pc, #184]	; (95c4 <hif_handle_isr+0x354>)
    950a:	482f      	ldr	r0, [pc, #188]	; (95c8 <hif_handle_isr+0x358>)
    950c:	4c2f      	ldr	r4, [pc, #188]	; (95cc <hif_handle_isr+0x35c>)
    950e:	47a0      	blx	r4
    9510:	9903      	ldr	r1, [sp, #12]
    9512:	4841      	ldr	r0, [pc, #260]	; (9618 <hif_handle_isr+0x3a8>)
    9514:	47a0      	blx	r4
    9516:	200d      	movs	r0, #13
    9518:	4b2f      	ldr	r3, [pc, #188]	; (95d8 <hif_handle_isr+0x368>)
    951a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    951c:	240c      	movs	r4, #12
    951e:	4264      	negs	r4, r4
    9520:	e00a      	b.n	9538 <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    9522:	4a3e      	ldr	r2, [pc, #248]	; (961c <hif_handle_isr+0x3ac>)
    9524:	4927      	ldr	r1, [pc, #156]	; (95c4 <hif_handle_isr+0x354>)
    9526:	4828      	ldr	r0, [pc, #160]	; (95c8 <hif_handle_isr+0x358>)
    9528:	4b28      	ldr	r3, [pc, #160]	; (95cc <hif_handle_isr+0x35c>)
    952a:	4798      	blx	r3
    952c:	483c      	ldr	r0, [pc, #240]	; (9620 <hif_handle_isr+0x3b0>)
    952e:	4b29      	ldr	r3, [pc, #164]	; (95d4 <hif_handle_isr+0x364>)
    9530:	4798      	blx	r3
    9532:	200d      	movs	r0, #13
    9534:	4b28      	ldr	r3, [pc, #160]	; (95d8 <hif_handle_isr+0x368>)
    9536:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    9538:	4a3a      	ldr	r2, [pc, #232]	; (9624 <hif_handle_isr+0x3b4>)
    953a:	493b      	ldr	r1, [pc, #236]	; (9628 <hif_handle_isr+0x3b8>)
    953c:	4822      	ldr	r0, [pc, #136]	; (95c8 <hif_handle_isr+0x358>)
    953e:	4f23      	ldr	r7, [pc, #140]	; (95cc <hif_handle_isr+0x35c>)
    9540:	47b8      	blx	r7
    9542:	0021      	movs	r1, r4
    9544:	4839      	ldr	r0, [pc, #228]	; (962c <hif_handle_isr+0x3bc>)
    9546:	47b8      	blx	r7
    9548:	200d      	movs	r0, #13
    954a:	4b23      	ldr	r3, [pc, #140]	; (95d8 <hif_handle_isr+0x368>)
    954c:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    954e:	a903      	add	r1, sp, #12
    9550:	4837      	ldr	r0, [pc, #220]	; (9630 <hif_handle_isr+0x3c0>)
    9552:	47b0      	blx	r6
    9554:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    9556:	d1e4      	bne.n	9522 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    9558:	9b03      	ldr	r3, [sp, #12]
    955a:	07db      	lsls	r3, r3, #31
    955c:	d5d2      	bpl.n	9504 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    955e:	2000      	movs	r0, #0
    9560:	4b1f      	ldr	r3, [pc, #124]	; (95e0 <hif_handle_isr+0x370>)
    9562:	4798      	blx	r3
			reg &= ~NBIT0;
    9564:	2301      	movs	r3, #1
    9566:	9903      	ldr	r1, [sp, #12]
    9568:	4399      	bics	r1, r3
    956a:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    956c:	4830      	ldr	r0, [pc, #192]	; (9630 <hif_handle_isr+0x3c0>)
    956e:	4b31      	ldr	r3, [pc, #196]	; (9634 <hif_handle_isr+0x3c4>)
    9570:	4798      	blx	r3
    9572:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    9574:	d1e0      	bne.n	9538 <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    9576:	2201      	movs	r2, #1
    9578:	4b0f      	ldr	r3, [pc, #60]	; (95b8 <hif_handle_isr+0x348>)
    957a:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    957c:	9b03      	ldr	r3, [sp, #12]
    957e:	049d      	lsls	r5, r3, #18
    9580:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    9582:	d0b0      	beq.n	94e6 <hif_handle_isr+0x276>
				uint32 address = 0;
    9584:	2300      	movs	r3, #0
    9586:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    9588:	a905      	add	r1, sp, #20
    958a:	482b      	ldr	r0, [pc, #172]	; (9638 <hif_handle_isr+0x3c8>)
    958c:	4b16      	ldr	r3, [pc, #88]	; (95e8 <hif_handle_isr+0x378>)
    958e:	4798      	blx	r3
    9590:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    9592:	d100      	bne.n	9596 <hif_handle_isr+0x326>
    9594:	e675      	b.n	9282 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    9596:	22c8      	movs	r2, #200	; 0xc8
    9598:	32ff      	adds	r2, #255	; 0xff
    959a:	490a      	ldr	r1, [pc, #40]	; (95c4 <hif_handle_isr+0x354>)
    959c:	480a      	ldr	r0, [pc, #40]	; (95c8 <hif_handle_isr+0x358>)
    959e:	4b0b      	ldr	r3, [pc, #44]	; (95cc <hif_handle_isr+0x35c>)
    95a0:	4798      	blx	r3
    95a2:	4826      	ldr	r0, [pc, #152]	; (963c <hif_handle_isr+0x3cc>)
    95a4:	4b0b      	ldr	r3, [pc, #44]	; (95d4 <hif_handle_isr+0x364>)
    95a6:	4798      	blx	r3
    95a8:	200d      	movs	r0, #13
    95aa:	4b0b      	ldr	r3, [pc, #44]	; (95d8 <hif_handle_isr+0x368>)
    95ac:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    95ae:	2001      	movs	r0, #1
    95b0:	4b0b      	ldr	r3, [pc, #44]	; (95e0 <hif_handle_isr+0x370>)
    95b2:	4798      	blx	r3
    95b4:	e7c0      	b.n	9538 <hif_handle_isr+0x2c8>
    95b6:	46c0      	nop			; (mov r8, r8)
    95b8:	200004a8 	.word	0x200004a8
    95bc:	0000a3a9 	.word	0x0000a3a9
    95c0:	0000020f 	.word	0x0000020f
    95c4:	00012f3c 	.word	0x00012f3c
    95c8:	00012ee8 	.word	0x00012ee8
    95cc:	00011869 	.word	0x00011869
    95d0:	00013098 	.word	0x00013098
    95d4:	00011985 	.word	0x00011985
    95d8:	0001189d 	.word	0x0001189d
    95dc:	00012f94 	.word	0x00012f94
    95e0:	00008c15 	.word	0x00008c15
    95e4:	00012fac 	.word	0x00012fac
    95e8:	0000a391 	.word	0x0000a391
    95ec:	00012fec 	.word	0x00012fec
    95f0:	0001300c 	.word	0x0001300c
    95f4:	00013030 	.word	0x00013030
    95f8:	000001ff 	.word	0x000001ff
    95fc:	00013050 	.word	0x00013050
    9600:	00000206 	.word	0x00000206
    9604:	00013074 	.word	0x00013074
    9608:	00000215 	.word	0x00000215
    960c:	000130b0 	.word	0x000130b0
    9610:	00008f49 	.word	0x00008f49
    9614:	000130dc 	.word	0x000130dc
    9618:	000130f0 	.word	0x000130f0
    961c:	0000022d 	.word	0x0000022d
    9620:	0001310c 	.word	0x0001310c
    9624:	0000024a 	.word	0x0000024a
    9628:	00012f44 	.word	0x00012f44
    962c:	00013130 	.word	0x00013130
    9630:	00001070 	.word	0x00001070
    9634:	0000a39d 	.word	0x0000a39d
    9638:	00001084 	.word	0x00001084
    963c:	00012f70 	.word	0x00012f70
			}
		}
	}

	return ret;
}
    9640:	2000      	movs	r0, #0
    9642:	b007      	add	sp, #28
    9644:	bc0c      	pop	{r2, r3}
    9646:	4690      	mov	r8, r2
    9648:	4699      	mov	r9, r3
    964a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000964c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    964c:	b570      	push	{r4, r5, r6, lr}
    964e:	0014      	movs	r4, r2
    9650:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    9652:	2800      	cmp	r0, #0
    9654:	d003      	beq.n	965e <hif_receive+0x12>
    9656:	2900      	cmp	r1, #0
    9658:	d001      	beq.n	965e <hif_receive+0x12>
    965a:	2a00      	cmp	r2, #0
    965c:	d112      	bne.n	9684 <hif_receive+0x38>
	{
		if(isDone)
    965e:	2d00      	cmp	r5, #0
    9660:	d002      	beq.n	9668 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    9662:	4b27      	ldr	r3, [pc, #156]	; (9700 <hif_receive+0xb4>)
    9664:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    9666:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    9668:	4a26      	ldr	r2, [pc, #152]	; (9704 <hif_receive+0xb8>)
    966a:	4927      	ldr	r1, [pc, #156]	; (9708 <hif_receive+0xbc>)
    966c:	4827      	ldr	r0, [pc, #156]	; (970c <hif_receive+0xc0>)
    966e:	4b28      	ldr	r3, [pc, #160]	; (9710 <hif_receive+0xc4>)
    9670:	4798      	blx	r3
    9672:	4828      	ldr	r0, [pc, #160]	; (9714 <hif_receive+0xc8>)
    9674:	4b28      	ldr	r3, [pc, #160]	; (9718 <hif_receive+0xcc>)
    9676:	4798      	blx	r3
    9678:	200d      	movs	r0, #13
    967a:	4b28      	ldr	r3, [pc, #160]	; (971c <hif_receive+0xd0>)
    967c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    967e:	200c      	movs	r0, #12
    9680:	4240      	negs	r0, r0
    9682:	e7f0      	b.n	9666 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    9684:	4b26      	ldr	r3, [pc, #152]	; (9720 <hif_receive+0xd4>)
    9686:	689b      	ldr	r3, [r3, #8]
    9688:	429a      	cmp	r2, r3
    968a:	d81a      	bhi.n	96c2 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    968c:	4b24      	ldr	r3, [pc, #144]	; (9720 <hif_receive+0xd4>)
    968e:	685b      	ldr	r3, [r3, #4]
    9690:	4298      	cmp	r0, r3
    9692:	d326      	bcc.n	96e2 <hif_receive+0x96>
    9694:	1886      	adds	r6, r0, r2
    9696:	4a22      	ldr	r2, [pc, #136]	; (9720 <hif_receive+0xd4>)
    9698:	6853      	ldr	r3, [r2, #4]
    969a:	6892      	ldr	r2, [r2, #8]
    969c:	189b      	adds	r3, r3, r2
    969e:	429e      	cmp	r6, r3
    96a0:	d81f      	bhi.n	96e2 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    96a2:	0022      	movs	r2, r4
    96a4:	4b1f      	ldr	r3, [pc, #124]	; (9724 <hif_receive+0xd8>)
    96a6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    96a8:	2800      	cmp	r0, #0
    96aa:	d1dc      	bne.n	9666 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    96ac:	4a1c      	ldr	r2, [pc, #112]	; (9720 <hif_receive+0xd4>)
    96ae:	6853      	ldr	r3, [r2, #4]
    96b0:	6892      	ldr	r2, [r2, #8]
    96b2:	189b      	adds	r3, r3, r2
    96b4:	429e      	cmp	r6, r3
    96b6:	d001      	beq.n	96bc <hif_receive+0x70>
    96b8:	2d00      	cmp	r5, #0
    96ba:	d0d4      	beq.n	9666 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    96bc:	4b10      	ldr	r3, [pc, #64]	; (9700 <hif_receive+0xb4>)
    96be:	4798      	blx	r3
    96c0:	e7d1      	b.n	9666 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    96c2:	4a19      	ldr	r2, [pc, #100]	; (9728 <hif_receive+0xdc>)
    96c4:	4910      	ldr	r1, [pc, #64]	; (9708 <hif_receive+0xbc>)
    96c6:	4811      	ldr	r0, [pc, #68]	; (970c <hif_receive+0xc0>)
    96c8:	4d11      	ldr	r5, [pc, #68]	; (9710 <hif_receive+0xc4>)
    96ca:	47a8      	blx	r5
    96cc:	4b14      	ldr	r3, [pc, #80]	; (9720 <hif_receive+0xd4>)
    96ce:	689a      	ldr	r2, [r3, #8]
    96d0:	0021      	movs	r1, r4
    96d2:	4816      	ldr	r0, [pc, #88]	; (972c <hif_receive+0xe0>)
    96d4:	47a8      	blx	r5
    96d6:	200d      	movs	r0, #13
    96d8:	4b10      	ldr	r3, [pc, #64]	; (971c <hif_receive+0xd0>)
    96da:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    96dc:	200c      	movs	r0, #12
    96de:	4240      	negs	r0, r0
		goto ERR1;
    96e0:	e7c1      	b.n	9666 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    96e2:	4a13      	ldr	r2, [pc, #76]	; (9730 <hif_receive+0xe4>)
    96e4:	4908      	ldr	r1, [pc, #32]	; (9708 <hif_receive+0xbc>)
    96e6:	4809      	ldr	r0, [pc, #36]	; (970c <hif_receive+0xc0>)
    96e8:	4b09      	ldr	r3, [pc, #36]	; (9710 <hif_receive+0xc4>)
    96ea:	4798      	blx	r3
    96ec:	4811      	ldr	r0, [pc, #68]	; (9734 <hif_receive+0xe8>)
    96ee:	4b0a      	ldr	r3, [pc, #40]	; (9718 <hif_receive+0xcc>)
    96f0:	4798      	blx	r3
    96f2:	200d      	movs	r0, #13
    96f4:	4b09      	ldr	r3, [pc, #36]	; (971c <hif_receive+0xd0>)
    96f6:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    96f8:	200c      	movs	r0, #12
    96fa:	4240      	negs	r0, r0
		goto ERR1;
    96fc:	e7b3      	b.n	9666 <hif_receive+0x1a>
    96fe:	46c0      	nop			; (mov r8, r8)
    9700:	00008f49 	.word	0x00008f49
    9704:	0000026b 	.word	0x0000026b
    9708:	00012f54 	.word	0x00012f54
    970c:	00012ee8 	.word	0x00012ee8
    9710:	00011869 	.word	0x00011869
    9714:	00013160 	.word	0x00013160
    9718:	00011985 	.word	0x00011985
    971c:	0001189d 	.word	0x0001189d
    9720:	200004a8 	.word	0x200004a8
    9724:	0000a3a9 	.word	0x0000a3a9
    9728:	00000273 	.word	0x00000273
    972c:	00013180 	.word	0x00013180
    9730:	00000279 	.word	0x00000279
    9734:	000131c8 	.word	0x000131c8

00009738 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    9738:	b570      	push	{r4, r5, r6, lr}
    973a:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    973c:	2807      	cmp	r0, #7
    973e:	d81f      	bhi.n	9780 <hif_register_cb+0x48>
    9740:	0083      	lsls	r3, r0, #2
    9742:	4a16      	ldr	r2, [pc, #88]	; (979c <hif_register_cb+0x64>)
    9744:	58d3      	ldr	r3, [r2, r3]
    9746:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    9748:	4b15      	ldr	r3, [pc, #84]	; (97a0 <hif_register_cb+0x68>)
    974a:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    974c:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    974e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    9750:	4b13      	ldr	r3, [pc, #76]	; (97a0 <hif_register_cb+0x68>)
    9752:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    9754:	2000      	movs	r0, #0
			break;
    9756:	e7fa      	b.n	974e <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    9758:	4b11      	ldr	r3, [pc, #68]	; (97a0 <hif_register_cb+0x68>)
    975a:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    975c:	2000      	movs	r0, #0
			break;
    975e:	e7f6      	b.n	974e <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    9760:	4b0f      	ldr	r3, [pc, #60]	; (97a0 <hif_register_cb+0x68>)
    9762:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    9764:	2000      	movs	r0, #0
			break;
    9766:	e7f2      	b.n	974e <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    9768:	4b0d      	ldr	r3, [pc, #52]	; (97a0 <hif_register_cb+0x68>)
    976a:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    976c:	2000      	movs	r0, #0
			break;
    976e:	e7ee      	b.n	974e <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    9770:	4b0b      	ldr	r3, [pc, #44]	; (97a0 <hif_register_cb+0x68>)
    9772:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    9774:	2000      	movs	r0, #0
			break;
    9776:	e7ea      	b.n	974e <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    9778:	4b09      	ldr	r3, [pc, #36]	; (97a0 <hif_register_cb+0x68>)
    977a:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    977c:	2000      	movs	r0, #0
			break;
    977e:	e7e6      	b.n	974e <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    9780:	4a08      	ldr	r2, [pc, #32]	; (97a4 <hif_register_cb+0x6c>)
    9782:	4909      	ldr	r1, [pc, #36]	; (97a8 <hif_register_cb+0x70>)
    9784:	4809      	ldr	r0, [pc, #36]	; (97ac <hif_register_cb+0x74>)
    9786:	4d0a      	ldr	r5, [pc, #40]	; (97b0 <hif_register_cb+0x78>)
    9788:	47a8      	blx	r5
    978a:	0021      	movs	r1, r4
    978c:	4809      	ldr	r0, [pc, #36]	; (97b4 <hif_register_cb+0x7c>)
    978e:	47a8      	blx	r5
    9790:	200d      	movs	r0, #13
    9792:	4b09      	ldr	r3, [pc, #36]	; (97b8 <hif_register_cb+0x80>)
    9794:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9796:	200c      	movs	r0, #12
    9798:	4240      	negs	r0, r0
			break;
    979a:	e7d8      	b.n	974e <hif_register_cb+0x16>
    979c:	00012f10 	.word	0x00012f10
    97a0:	200004a8 	.word	0x200004a8
    97a4:	000002b1 	.word	0x000002b1
    97a8:	00012f60 	.word	0x00012f60
    97ac:	00012ee8 	.word	0x00012ee8
    97b0:	00011869 	.word	0x00011869
    97b4:	0001320c 	.word	0x0001320c
    97b8:	0001189d 	.word	0x0001189d

000097bc <hif_init>:
{
    97bc:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    97be:	2228      	movs	r2, #40	; 0x28
    97c0:	2100      	movs	r1, #0
    97c2:	4806      	ldr	r0, [pc, #24]	; (97dc <hif_init+0x20>)
    97c4:	4b06      	ldr	r3, [pc, #24]	; (97e0 <hif_init+0x24>)
    97c6:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    97c8:	4806      	ldr	r0, [pc, #24]	; (97e4 <hif_init+0x28>)
    97ca:	4b07      	ldr	r3, [pc, #28]	; (97e8 <hif_init+0x2c>)
    97cc:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    97ce:	4907      	ldr	r1, [pc, #28]	; (97ec <hif_init+0x30>)
    97d0:	2003      	movs	r0, #3
    97d2:	4b07      	ldr	r3, [pc, #28]	; (97f0 <hif_init+0x34>)
    97d4:	4798      	blx	r3
}
    97d6:	2000      	movs	r0, #0
    97d8:	bd10      	pop	{r4, pc}
    97da:	46c0      	nop			; (mov r8, r8)
    97dc:	200004a8 	.word	0x200004a8
    97e0:	00008f09 	.word	0x00008f09
    97e4:	00008f35 	.word	0x00008f35
    97e8:	00008bbd 	.word	0x00008bbd
    97ec:	00008f45 	.word	0x00008f45
    97f0:	00009739 	.word	0x00009739

000097f4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    97f4:	b530      	push	{r4, r5, lr}
    97f6:	b09f      	sub	sp, #124	; 0x7c
    97f8:	0004      	movs	r4, r0
    97fa:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    97fc:	282c      	cmp	r0, #44	; 0x2c
    97fe:	d02f      	beq.n	9860 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    9800:	281b      	cmp	r0, #27
    9802:	d03d      	beq.n	9880 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    9804:	2806      	cmp	r0, #6
    9806:	d04b      	beq.n	98a0 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    9808:	280e      	cmp	r0, #14
    980a:	d027      	beq.n	985c <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    980c:	2832      	cmp	r0, #50	; 0x32
    980e:	d057      	beq.n	98c0 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    9810:	282f      	cmp	r0, #47	; 0x2f
    9812:	d065      	beq.n	98e0 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    9814:	2834      	cmp	r0, #52	; 0x34
    9816:	d100      	bne.n	981a <m2m_wifi_cb+0x26>
    9818:	e077      	b.n	990a <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    981a:	2811      	cmp	r0, #17
    981c:	d100      	bne.n	9820 <m2m_wifi_cb+0x2c>
    981e:	e096      	b.n	994e <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    9820:	2813      	cmp	r0, #19
    9822:	d100      	bne.n	9826 <m2m_wifi_cb+0x32>
    9824:	e0ac      	b.n	9980 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    9826:	2804      	cmp	r0, #4
    9828:	d100      	bne.n	982c <m2m_wifi_cb+0x38>
    982a:	e0bb      	b.n	99a4 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    982c:	2865      	cmp	r0, #101	; 0x65
    982e:	d100      	bne.n	9832 <m2m_wifi_cb+0x3e>
    9830:	e0ca      	b.n	99c8 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    9832:	2809      	cmp	r0, #9
    9834:	d100      	bne.n	9838 <m2m_wifi_cb+0x44>
    9836:	e0d9      	b.n	99ec <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    9838:	282a      	cmp	r0, #42	; 0x2a
    983a:	d100      	bne.n	983e <m2m_wifi_cb+0x4a>
    983c:	e0e8      	b.n	9a10 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    983e:	2820      	cmp	r0, #32
    9840:	d100      	bne.n	9844 <m2m_wifi_cb+0x50>
    9842:	e0f7      	b.n	9a34 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    9844:	2292      	movs	r2, #146	; 0x92
    9846:	0052      	lsls	r2, r2, #1
    9848:	4989      	ldr	r1, [pc, #548]	; (9a70 <m2m_wifi_cb+0x27c>)
    984a:	488a      	ldr	r0, [pc, #552]	; (9a74 <m2m_wifi_cb+0x280>)
    984c:	4d8a      	ldr	r5, [pc, #552]	; (9a78 <m2m_wifi_cb+0x284>)
    984e:	47a8      	blx	r5
    9850:	0021      	movs	r1, r4
    9852:	488a      	ldr	r0, [pc, #552]	; (9a7c <m2m_wifi_cb+0x288>)
    9854:	47a8      	blx	r5
    9856:	200d      	movs	r0, #13
    9858:	4b89      	ldr	r3, [pc, #548]	; (9a80 <m2m_wifi_cb+0x28c>)
    985a:	4798      	blx	r3
	}
}
    985c:	b01f      	add	sp, #124	; 0x7c
    985e:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    9860:	2300      	movs	r3, #0
    9862:	2204      	movs	r2, #4
    9864:	a903      	add	r1, sp, #12
    9866:	0028      	movs	r0, r5
    9868:	4c86      	ldr	r4, [pc, #536]	; (9a84 <m2m_wifi_cb+0x290>)
    986a:	47a0      	blx	r4
    986c:	2800      	cmp	r0, #0
    986e:	d1f5      	bne.n	985c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    9870:	4b85      	ldr	r3, [pc, #532]	; (9a88 <m2m_wifi_cb+0x294>)
    9872:	681b      	ldr	r3, [r3, #0]
    9874:	2b00      	cmp	r3, #0
    9876:	d0f1      	beq.n	985c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    9878:	a903      	add	r1, sp, #12
    987a:	302c      	adds	r0, #44	; 0x2c
    987c:	4798      	blx	r3
    987e:	e7ed      	b.n	985c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    9880:	2300      	movs	r3, #0
    9882:	2208      	movs	r2, #8
    9884:	a903      	add	r1, sp, #12
    9886:	0028      	movs	r0, r5
    9888:	4c7e      	ldr	r4, [pc, #504]	; (9a84 <m2m_wifi_cb+0x290>)
    988a:	47a0      	blx	r4
    988c:	2800      	cmp	r0, #0
    988e:	d1e5      	bne.n	985c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    9890:	4b7d      	ldr	r3, [pc, #500]	; (9a88 <m2m_wifi_cb+0x294>)
    9892:	681b      	ldr	r3, [r3, #0]
    9894:	2b00      	cmp	r3, #0
    9896:	d0e1      	beq.n	985c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    9898:	a903      	add	r1, sp, #12
    989a:	301b      	adds	r0, #27
    989c:	4798      	blx	r3
    989e:	e7dd      	b.n	985c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    98a0:	2301      	movs	r3, #1
    98a2:	2230      	movs	r2, #48	; 0x30
    98a4:	a903      	add	r1, sp, #12
    98a6:	0028      	movs	r0, r5
    98a8:	4c76      	ldr	r4, [pc, #472]	; (9a84 <m2m_wifi_cb+0x290>)
    98aa:	47a0      	blx	r4
    98ac:	2800      	cmp	r0, #0
    98ae:	d1d5      	bne.n	985c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    98b0:	4b75      	ldr	r3, [pc, #468]	; (9a88 <m2m_wifi_cb+0x294>)
    98b2:	681b      	ldr	r3, [r3, #0]
    98b4:	2b00      	cmp	r3, #0
    98b6:	d0d1      	beq.n	985c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    98b8:	a903      	add	r1, sp, #12
    98ba:	3006      	adds	r0, #6
    98bc:	4798      	blx	r3
    98be:	e7cd      	b.n	985c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    98c0:	2300      	movs	r3, #0
    98c2:	2214      	movs	r2, #20
    98c4:	a903      	add	r1, sp, #12
    98c6:	0028      	movs	r0, r5
    98c8:	4c6e      	ldr	r4, [pc, #440]	; (9a84 <m2m_wifi_cb+0x290>)
    98ca:	47a0      	blx	r4
    98cc:	2800      	cmp	r0, #0
    98ce:	d1c5      	bne.n	985c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    98d0:	4b6d      	ldr	r3, [pc, #436]	; (9a88 <m2m_wifi_cb+0x294>)
    98d2:	681b      	ldr	r3, [r3, #0]
    98d4:	2b00      	cmp	r3, #0
    98d6:	d0c1      	beq.n	985c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    98d8:	a903      	add	r1, sp, #12
    98da:	3032      	adds	r0, #50	; 0x32
    98dc:	4798      	blx	r3
    98de:	e7bd      	b.n	985c <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    98e0:	2264      	movs	r2, #100	; 0x64
    98e2:	2100      	movs	r1, #0
    98e4:	a803      	add	r0, sp, #12
    98e6:	4b69      	ldr	r3, [pc, #420]	; (9a8c <m2m_wifi_cb+0x298>)
    98e8:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    98ea:	2300      	movs	r3, #0
    98ec:	2264      	movs	r2, #100	; 0x64
    98ee:	a903      	add	r1, sp, #12
    98f0:	0028      	movs	r0, r5
    98f2:	4c64      	ldr	r4, [pc, #400]	; (9a84 <m2m_wifi_cb+0x290>)
    98f4:	47a0      	blx	r4
    98f6:	2800      	cmp	r0, #0
    98f8:	d1b0      	bne.n	985c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    98fa:	4b63      	ldr	r3, [pc, #396]	; (9a88 <m2m_wifi_cb+0x294>)
    98fc:	681b      	ldr	r3, [r3, #0]
    98fe:	2b00      	cmp	r3, #0
    9900:	d0ac      	beq.n	985c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    9902:	a903      	add	r1, sp, #12
    9904:	302f      	adds	r0, #47	; 0x2f
    9906:	4798      	blx	r3
    9908:	e7a8      	b.n	985c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    990a:	2300      	movs	r3, #0
    990c:	2204      	movs	r2, #4
    990e:	a903      	add	r1, sp, #12
    9910:	0028      	movs	r0, r5
    9912:	4c5c      	ldr	r4, [pc, #368]	; (9a84 <m2m_wifi_cb+0x290>)
    9914:	47a0      	blx	r4
    9916:	2800      	cmp	r0, #0
    9918:	d1a0      	bne.n	985c <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    991a:	485d      	ldr	r0, [pc, #372]	; (9a90 <m2m_wifi_cb+0x29c>)
    991c:	4d56      	ldr	r5, [pc, #344]	; (9a78 <m2m_wifi_cb+0x284>)
    991e:	47a8      	blx	r5
    9920:	9c03      	ldr	r4, [sp, #12]
    9922:	0a23      	lsrs	r3, r4, #8
    9924:	20ff      	movs	r0, #255	; 0xff
    9926:	4003      	ands	r3, r0
    9928:	0c22      	lsrs	r2, r4, #16
    992a:	4002      	ands	r2, r0
    992c:	0e21      	lsrs	r1, r4, #24
    992e:	4020      	ands	r0, r4
    9930:	9000      	str	r0, [sp, #0]
    9932:	4858      	ldr	r0, [pc, #352]	; (9a94 <m2m_wifi_cb+0x2a0>)
    9934:	47a8      	blx	r5
    9936:	200d      	movs	r0, #13
    9938:	4b51      	ldr	r3, [pc, #324]	; (9a80 <m2m_wifi_cb+0x28c>)
    993a:	4798      	blx	r3
			if (gpfAppWifiCb)
    993c:	4b52      	ldr	r3, [pc, #328]	; (9a88 <m2m_wifi_cb+0x294>)
    993e:	681b      	ldr	r3, [r3, #0]
    9940:	2b00      	cmp	r3, #0
    9942:	d100      	bne.n	9946 <m2m_wifi_cb+0x152>
    9944:	e78a      	b.n	985c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    9946:	2100      	movs	r1, #0
    9948:	2034      	movs	r0, #52	; 0x34
    994a:	4798      	blx	r3
    994c:	e786      	b.n	985c <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    994e:	2200      	movs	r2, #0
    9950:	4b51      	ldr	r3, [pc, #324]	; (9a98 <m2m_wifi_cb+0x2a4>)
    9952:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    9954:	2300      	movs	r3, #0
    9956:	3204      	adds	r2, #4
    9958:	a903      	add	r1, sp, #12
    995a:	0028      	movs	r0, r5
    995c:	4c49      	ldr	r4, [pc, #292]	; (9a84 <m2m_wifi_cb+0x290>)
    995e:	47a0      	blx	r4
    9960:	2800      	cmp	r0, #0
    9962:	d000      	beq.n	9966 <m2m_wifi_cb+0x172>
    9964:	e77a      	b.n	985c <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    9966:	ab03      	add	r3, sp, #12
    9968:	781a      	ldrb	r2, [r3, #0]
    996a:	4b4c      	ldr	r3, [pc, #304]	; (9a9c <m2m_wifi_cb+0x2a8>)
    996c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    996e:	4b46      	ldr	r3, [pc, #280]	; (9a88 <m2m_wifi_cb+0x294>)
    9970:	681b      	ldr	r3, [r3, #0]
    9972:	2b00      	cmp	r3, #0
    9974:	d100      	bne.n	9978 <m2m_wifi_cb+0x184>
    9976:	e771      	b.n	985c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    9978:	a903      	add	r1, sp, #12
    997a:	3011      	adds	r0, #17
    997c:	4798      	blx	r3
    997e:	e76d      	b.n	985c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    9980:	2300      	movs	r3, #0
    9982:	222c      	movs	r2, #44	; 0x2c
    9984:	a903      	add	r1, sp, #12
    9986:	0028      	movs	r0, r5
    9988:	4c3e      	ldr	r4, [pc, #248]	; (9a84 <m2m_wifi_cb+0x290>)
    998a:	47a0      	blx	r4
    998c:	2800      	cmp	r0, #0
    998e:	d000      	beq.n	9992 <m2m_wifi_cb+0x19e>
    9990:	e764      	b.n	985c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    9992:	4b3d      	ldr	r3, [pc, #244]	; (9a88 <m2m_wifi_cb+0x294>)
    9994:	681b      	ldr	r3, [r3, #0]
    9996:	2b00      	cmp	r3, #0
    9998:	d100      	bne.n	999c <m2m_wifi_cb+0x1a8>
    999a:	e75f      	b.n	985c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    999c:	a903      	add	r1, sp, #12
    999e:	3013      	adds	r0, #19
    99a0:	4798      	blx	r3
    99a2:	e75b      	b.n	985c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    99a4:	2300      	movs	r3, #0
    99a6:	2204      	movs	r2, #4
    99a8:	a91c      	add	r1, sp, #112	; 0x70
    99aa:	0028      	movs	r0, r5
    99ac:	4c35      	ldr	r4, [pc, #212]	; (9a84 <m2m_wifi_cb+0x290>)
    99ae:	47a0      	blx	r4
    99b0:	2800      	cmp	r0, #0
    99b2:	d000      	beq.n	99b6 <m2m_wifi_cb+0x1c2>
    99b4:	e752      	b.n	985c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    99b6:	4b34      	ldr	r3, [pc, #208]	; (9a88 <m2m_wifi_cb+0x294>)
    99b8:	681b      	ldr	r3, [r3, #0]
    99ba:	2b00      	cmp	r3, #0
    99bc:	d100      	bne.n	99c0 <m2m_wifi_cb+0x1cc>
    99be:	e74d      	b.n	985c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    99c0:	a91c      	add	r1, sp, #112	; 0x70
    99c2:	3004      	adds	r0, #4
    99c4:	4798      	blx	r3
    99c6:	e749      	b.n	985c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    99c8:	2300      	movs	r3, #0
    99ca:	2204      	movs	r2, #4
    99cc:	a91c      	add	r1, sp, #112	; 0x70
    99ce:	0028      	movs	r0, r5
    99d0:	4c2c      	ldr	r4, [pc, #176]	; (9a84 <m2m_wifi_cb+0x290>)
    99d2:	47a0      	blx	r4
    99d4:	2800      	cmp	r0, #0
    99d6:	d000      	beq.n	99da <m2m_wifi_cb+0x1e6>
    99d8:	e740      	b.n	985c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    99da:	4b2b      	ldr	r3, [pc, #172]	; (9a88 <m2m_wifi_cb+0x294>)
    99dc:	681b      	ldr	r3, [r3, #0]
    99de:	2b00      	cmp	r3, #0
    99e0:	d100      	bne.n	99e4 <m2m_wifi_cb+0x1f0>
    99e2:	e73b      	b.n	985c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    99e4:	a91c      	add	r1, sp, #112	; 0x70
    99e6:	3065      	adds	r0, #101	; 0x65
    99e8:	4798      	blx	r3
    99ea:	e737      	b.n	985c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    99ec:	2301      	movs	r3, #1
    99ee:	2264      	movs	r2, #100	; 0x64
    99f0:	a903      	add	r1, sp, #12
    99f2:	0028      	movs	r0, r5
    99f4:	4c23      	ldr	r4, [pc, #140]	; (9a84 <m2m_wifi_cb+0x290>)
    99f6:	47a0      	blx	r4
    99f8:	2800      	cmp	r0, #0
    99fa:	d000      	beq.n	99fe <m2m_wifi_cb+0x20a>
    99fc:	e72e      	b.n	985c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    99fe:	4b22      	ldr	r3, [pc, #136]	; (9a88 <m2m_wifi_cb+0x294>)
    9a00:	681b      	ldr	r3, [r3, #0]
    9a02:	2b00      	cmp	r3, #0
    9a04:	d100      	bne.n	9a08 <m2m_wifi_cb+0x214>
    9a06:	e729      	b.n	985c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    9a08:	a903      	add	r1, sp, #12
    9a0a:	3009      	adds	r0, #9
    9a0c:	4798      	blx	r3
    9a0e:	e725      	b.n	985c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    9a10:	2301      	movs	r3, #1
    9a12:	2204      	movs	r2, #4
    9a14:	a903      	add	r1, sp, #12
    9a16:	0028      	movs	r0, r5
    9a18:	4c1a      	ldr	r4, [pc, #104]	; (9a84 <m2m_wifi_cb+0x290>)
    9a1a:	47a0      	blx	r4
    9a1c:	2800      	cmp	r0, #0
    9a1e:	d000      	beq.n	9a22 <m2m_wifi_cb+0x22e>
    9a20:	e71c      	b.n	985c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    9a22:	4b19      	ldr	r3, [pc, #100]	; (9a88 <m2m_wifi_cb+0x294>)
    9a24:	681b      	ldr	r3, [r3, #0]
    9a26:	2b00      	cmp	r3, #0
    9a28:	d100      	bne.n	9a2c <m2m_wifi_cb+0x238>
    9a2a:	e717      	b.n	985c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    9a2c:	a903      	add	r1, sp, #12
    9a2e:	302a      	adds	r0, #42	; 0x2a
    9a30:	4798      	blx	r3
    9a32:	e713      	b.n	985c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    9a34:	2300      	movs	r3, #0
    9a36:	2208      	movs	r2, #8
    9a38:	a903      	add	r1, sp, #12
    9a3a:	0028      	movs	r0, r5
    9a3c:	4c11      	ldr	r4, [pc, #68]	; (9a84 <m2m_wifi_cb+0x290>)
    9a3e:	47a0      	blx	r4
    9a40:	2800      	cmp	r0, #0
    9a42:	d000      	beq.n	9a46 <m2m_wifi_cb+0x252>
    9a44:	e70a      	b.n	985c <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    9a46:	ab03      	add	r3, sp, #12
    9a48:	889a      	ldrh	r2, [r3, #4]
    9a4a:	0028      	movs	r0, r5
    9a4c:	3008      	adds	r0, #8
    9a4e:	2301      	movs	r3, #1
    9a50:	9903      	ldr	r1, [sp, #12]
    9a52:	4c0c      	ldr	r4, [pc, #48]	; (9a84 <m2m_wifi_cb+0x290>)
    9a54:	47a0      	blx	r4
    9a56:	2800      	cmp	r0, #0
    9a58:	d000      	beq.n	9a5c <m2m_wifi_cb+0x268>
    9a5a:	e6ff      	b.n	985c <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    9a5c:	4b0a      	ldr	r3, [pc, #40]	; (9a88 <m2m_wifi_cb+0x294>)
    9a5e:	681b      	ldr	r3, [r3, #0]
    9a60:	2b00      	cmp	r3, #0
    9a62:	d100      	bne.n	9a66 <m2m_wifi_cb+0x272>
    9a64:	e6fa      	b.n	985c <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    9a66:	a903      	add	r1, sp, #12
    9a68:	3020      	adds	r0, #32
    9a6a:	4798      	blx	r3
    9a6c:	e6f6      	b.n	985c <m2m_wifi_cb+0x68>
    9a6e:	46c0      	nop			; (mov r8, r8)
    9a70:	00013250 	.word	0x00013250
    9a74:	00012ee8 	.word	0x00012ee8
    9a78:	00011869 	.word	0x00011869
    9a7c:	000132a0 	.word	0x000132a0
    9a80:	0001189d 	.word	0x0001189d
    9a84:	0000964d 	.word	0x0000964d
    9a88:	2000020c 	.word	0x2000020c
    9a8c:	00008f09 	.word	0x00008f09
    9a90:	00013218 	.word	0x00013218
    9a94:	00013280 	.word	0x00013280
    9a98:	20000211 	.word	0x20000211
    9a9c:	20000210 	.word	0x20000210

00009aa0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    9aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9aa2:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    9aa4:	2201      	movs	r2, #1
    9aa6:	230f      	movs	r3, #15
    9aa8:	446b      	add	r3, sp
    9aaa:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    9aac:	2800      	cmp	r0, #0
    9aae:	d061      	beq.n	9b74 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    9ab0:	6802      	ldr	r2, [r0, #0]
    9ab2:	4b32      	ldr	r3, [pc, #200]	; (9b7c <m2m_wifi_init+0xdc>)
    9ab4:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    9ab6:	2200      	movs	r2, #0
    9ab8:	4b31      	ldr	r3, [pc, #196]	; (9b80 <m2m_wifi_init+0xe0>)
    9aba:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    9abc:	200f      	movs	r0, #15
    9abe:	4468      	add	r0, sp
    9ac0:	4b30      	ldr	r3, [pc, #192]	; (9b84 <m2m_wifi_init+0xe4>)
    9ac2:	4798      	blx	r3
    9ac4:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    9ac6:	d002      	beq.n	9ace <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    9ac8:	0020      	movs	r0, r4
    9aca:	b00f      	add	sp, #60	; 0x3c
    9acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    9ace:	2000      	movs	r0, #0
    9ad0:	4b2d      	ldr	r3, [pc, #180]	; (9b88 <m2m_wifi_init+0xe8>)
    9ad2:	4798      	blx	r3
    9ad4:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    9ad6:	d149      	bne.n	9b6c <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    9ad8:	492c      	ldr	r1, [pc, #176]	; (9b8c <m2m_wifi_init+0xec>)
    9ada:	2001      	movs	r0, #1
    9adc:	4b2c      	ldr	r3, [pc, #176]	; (9b90 <m2m_wifi_init+0xf0>)
    9ade:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    9ae0:	ae04      	add	r6, sp, #16
    9ae2:	0030      	movs	r0, r6
    9ae4:	4b2b      	ldr	r3, [pc, #172]	; (9b94 <m2m_wifi_init+0xf4>)
    9ae6:	4798      	blx	r3
    9ae8:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    9aea:	482b      	ldr	r0, [pc, #172]	; (9b98 <m2m_wifi_init+0xf8>)
    9aec:	4d2b      	ldr	r5, [pc, #172]	; (9b9c <m2m_wifi_init+0xfc>)
    9aee:	47a8      	blx	r5
    9af0:	79b3      	ldrb	r3, [r6, #6]
    9af2:	7972      	ldrb	r2, [r6, #5]
    9af4:	7931      	ldrb	r1, [r6, #4]
    9af6:	8c30      	ldrh	r0, [r6, #32]
    9af8:	9000      	str	r0, [sp, #0]
    9afa:	4829      	ldr	r0, [pc, #164]	; (9ba0 <m2m_wifi_init+0x100>)
    9afc:	47a8      	blx	r5
    9afe:	200d      	movs	r0, #13
    9b00:	4f28      	ldr	r7, [pc, #160]	; (9ba4 <m2m_wifi_init+0x104>)
    9b02:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    9b04:	4824      	ldr	r0, [pc, #144]	; (9b98 <m2m_wifi_init+0xf8>)
    9b06:	47a8      	blx	r5
    9b08:	2226      	movs	r2, #38	; 0x26
    9b0a:	446a      	add	r2, sp
    9b0c:	211a      	movs	r1, #26
    9b0e:	4469      	add	r1, sp
    9b10:	4825      	ldr	r0, [pc, #148]	; (9ba8 <m2m_wifi_init+0x108>)
    9b12:	47a8      	blx	r5
    9b14:	200d      	movs	r0, #13
    9b16:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    9b18:	481f      	ldr	r0, [pc, #124]	; (9b98 <m2m_wifi_init+0xf8>)
    9b1a:	47a8      	blx	r5
    9b1c:	7a73      	ldrb	r3, [r6, #9]
    9b1e:	7a32      	ldrb	r2, [r6, #8]
    9b20:	79f1      	ldrb	r1, [r6, #7]
    9b22:	4822      	ldr	r0, [pc, #136]	; (9bac <m2m_wifi_init+0x10c>)
    9b24:	47a8      	blx	r5
    9b26:	200d      	movs	r0, #13
    9b28:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    9b2a:	481b      	ldr	r0, [pc, #108]	; (9b98 <m2m_wifi_init+0xf8>)
    9b2c:	47a8      	blx	r5
    9b2e:	2302      	movs	r3, #2
    9b30:	2205      	movs	r2, #5
    9b32:	2113      	movs	r1, #19
    9b34:	481e      	ldr	r0, [pc, #120]	; (9bb0 <m2m_wifi_init+0x110>)
    9b36:	47a8      	blx	r5
    9b38:	200d      	movs	r0, #13
    9b3a:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    9b3c:	4816      	ldr	r0, [pc, #88]	; (9b98 <m2m_wifi_init+0xf8>)
    9b3e:	47a8      	blx	r5
    9b40:	4a1c      	ldr	r2, [pc, #112]	; (9bb4 <m2m_wifi_init+0x114>)
    9b42:	491d      	ldr	r1, [pc, #116]	; (9bb8 <m2m_wifi_init+0x118>)
    9b44:	481d      	ldr	r0, [pc, #116]	; (9bbc <m2m_wifi_init+0x11c>)
    9b46:	47a8      	blx	r5
    9b48:	200d      	movs	r0, #13
    9b4a:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    9b4c:	0023      	movs	r3, r4
    9b4e:	330d      	adds	r3, #13
    9b50:	d1ba      	bne.n	9ac8 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    9b52:	22e8      	movs	r2, #232	; 0xe8
    9b54:	32ff      	adds	r2, #255	; 0xff
    9b56:	491a      	ldr	r1, [pc, #104]	; (9bc0 <m2m_wifi_init+0x120>)
    9b58:	481a      	ldr	r0, [pc, #104]	; (9bc4 <m2m_wifi_init+0x124>)
    9b5a:	4b10      	ldr	r3, [pc, #64]	; (9b9c <m2m_wifi_init+0xfc>)
    9b5c:	4798      	blx	r3
    9b5e:	481a      	ldr	r0, [pc, #104]	; (9bc8 <m2m_wifi_init+0x128>)
    9b60:	4b1a      	ldr	r3, [pc, #104]	; (9bcc <m2m_wifi_init+0x12c>)
    9b62:	4798      	blx	r3
    9b64:	200d      	movs	r0, #13
    9b66:	4b0f      	ldr	r3, [pc, #60]	; (9ba4 <m2m_wifi_init+0x104>)
    9b68:	4798      	blx	r3
    9b6a:	e7ad      	b.n	9ac8 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    9b6c:	2000      	movs	r0, #0
    9b6e:	4b18      	ldr	r3, [pc, #96]	; (9bd0 <m2m_wifi_init+0x130>)
    9b70:	4798      	blx	r3
    9b72:	e7a9      	b.n	9ac8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    9b74:	240c      	movs	r4, #12
    9b76:	4264      	negs	r4, r4
    9b78:	e7a6      	b.n	9ac8 <m2m_wifi_init+0x28>
    9b7a:	46c0      	nop			; (mov r8, r8)
    9b7c:	2000020c 	.word	0x2000020c
    9b80:	20000211 	.word	0x20000211
    9b84:	0000a55d 	.word	0x0000a55d
    9b88:	000097bd 	.word	0x000097bd
    9b8c:	000097f5 	.word	0x000097f5
    9b90:	00009739 	.word	0x00009739
    9b94:	0000a479 	.word	0x0000a479
    9b98:	00013218 	.word	0x00013218
    9b9c:	00011869 	.word	0x00011869
    9ba0:	0001335c 	.word	0x0001335c
    9ba4:	0001189d 	.word	0x0001189d
    9ba8:	00013384 	.word	0x00013384
    9bac:	000133a0 	.word	0x000133a0
    9bb0:	000133c4 	.word	0x000133c4
    9bb4:	000133dc 	.word	0x000133dc
    9bb8:	000133e8 	.word	0x000133e8
    9bbc:	000133f4 	.word	0x000133f4
    9bc0:	0001325c 	.word	0x0001325c
    9bc4:	00012ee8 	.word	0x00012ee8
    9bc8:	0001340c 	.word	0x0001340c
    9bcc:	00011985 	.word	0x00011985
    9bd0:	0000a631 	.word	0x0000a631

00009bd4 <m2m_wifi_deinit>:

sint8  m2m_wifi_deinit(void * arg)
{
    9bd4:	b510      	push	{r4, lr}

	hif_deinit(NULL);
    9bd6:	2000      	movs	r0, #0
    9bd8:	4b03      	ldr	r3, [pc, #12]	; (9be8 <m2m_wifi_deinit+0x14>)
    9bda:	4798      	blx	r3

	nm_drv_deinit(NULL);
    9bdc:	2000      	movs	r0, #0
    9bde:	4b03      	ldr	r3, [pc, #12]	; (9bec <m2m_wifi_deinit+0x18>)
    9be0:	4798      	blx	r3

	return M2M_SUCCESS;
}
    9be2:	2000      	movs	r0, #0
    9be4:	bd10      	pop	{r4, pc}
    9be6:	46c0      	nop			; (mov r8, r8)
    9be8:	0000901d 	.word	0x0000901d
    9bec:	0000a631 	.word	0x0000a631

00009bf0 <m2m_wifi_handle_events>:


sint8 m2m_wifi_handle_events(void * arg)
{
    9bf0:	b510      	push	{r4, lr}
	return hif_handle_isr();
    9bf2:	4b01      	ldr	r3, [pc, #4]	; (9bf8 <m2m_wifi_handle_events+0x8>)
    9bf4:	4798      	blx	r3
}
    9bf6:	bd10      	pop	{r4, pc}
    9bf8:	00009271 	.word	0x00009271

00009bfc <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    9bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bfe:	46ce      	mov	lr, r9
    9c00:	4647      	mov	r7, r8
    9c02:	b580      	push	{r7, lr}
    9c04:	b0a3      	sub	sp, #140	; 0x8c
    9c06:	9005      	str	r0, [sp, #20]
    9c08:	000c      	movs	r4, r1
    9c0a:	0015      	movs	r5, r2
    9c0c:	001f      	movs	r7, r3
    9c0e:	ab2a      	add	r3, sp, #168	; 0xa8
    9c10:	881b      	ldrh	r3, [r3, #0]
    9c12:	4699      	mov	r9, r3
    9c14:	ab2b      	add	r3, sp, #172	; 0xac
    9c16:	781b      	ldrb	r3, [r3, #0]
    9c18:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    9c1a:	2a01      	cmp	r2, #1
    9c1c:	d003      	beq.n	9c26 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    9c1e:	2f00      	cmp	r7, #0
    9c20:	d040      	beq.n	9ca4 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    9c22:	2a02      	cmp	r2, #2
    9c24:	d04c      	beq.n	9cc0 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    9c26:	1e63      	subs	r3, r4, #1
    9c28:	2b1f      	cmp	r3, #31
    9c2a:	d900      	bls.n	9c2e <m2m_wifi_connect_sc+0x32>
    9c2c:	e078      	b.n	9d20 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    9c2e:	464b      	mov	r3, r9
    9c30:	3b01      	subs	r3, #1
    9c32:	b29b      	uxth	r3, r3
    9c34:	2b0d      	cmp	r3, #13
    9c36:	d903      	bls.n	9c40 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    9c38:	464b      	mov	r3, r9
    9c3a:	2bff      	cmp	r3, #255	; 0xff
    9c3c:	d000      	beq.n	9c40 <m2m_wifi_connect_sc+0x44>
    9c3e:	e07d      	b.n	9d3c <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    9c40:	ae07      	add	r6, sp, #28
    9c42:	0022      	movs	r2, r4
    9c44:	9905      	ldr	r1, [sp, #20]
    9c46:	205a      	movs	r0, #90	; 0x5a
    9c48:	ab02      	add	r3, sp, #8
    9c4a:	469c      	mov	ip, r3
    9c4c:	4460      	add	r0, ip
    9c4e:	4b78      	ldr	r3, [pc, #480]	; (9e30 <m2m_wifi_connect_sc+0x234>)
    9c50:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    9c52:	1934      	adds	r4, r6, r4
    9c54:	3446      	adds	r4, #70	; 0x46
    9c56:	2300      	movs	r3, #0
    9c58:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    9c5a:	3344      	adds	r3, #68	; 0x44
    9c5c:	464a      	mov	r2, r9
    9c5e:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    9c60:	4643      	mov	r3, r8
    9c62:	1e5a      	subs	r2, r3, #1
    9c64:	4193      	sbcs	r3, r2
    9c66:	2267      	movs	r2, #103	; 0x67
    9c68:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    9c6a:	2341      	movs	r3, #65	; 0x41
    9c6c:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    9c6e:	2d03      	cmp	r5, #3
    9c70:	d100      	bne.n	9c74 <m2m_wifi_connect_sc+0x78>
    9c72:	e072      	b.n	9d5a <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    9c74:	2d02      	cmp	r5, #2
    9c76:	d100      	bne.n	9c7a <m2m_wifi_connect_sc+0x7e>
    9c78:	e0ab      	b.n	9dd2 <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    9c7a:	2d04      	cmp	r5, #4
    9c7c:	d100      	bne.n	9c80 <m2m_wifi_connect_sc+0x84>
    9c7e:	e0c3      	b.n	9e08 <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    9c80:	2d01      	cmp	r5, #1
    9c82:	d000      	beq.n	9c86 <m2m_wifi_connect_sc+0x8a>
    9c84:	e0c6      	b.n	9e14 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    9c86:	2300      	movs	r3, #0
    9c88:	9302      	str	r3, [sp, #8]
    9c8a:	9301      	str	r3, [sp, #4]
    9c8c:	9300      	str	r3, [sp, #0]
    9c8e:	336c      	adds	r3, #108	; 0x6c
    9c90:	aa07      	add	r2, sp, #28
    9c92:	2128      	movs	r1, #40	; 0x28
    9c94:	2001      	movs	r0, #1
    9c96:	4c67      	ldr	r4, [pc, #412]	; (9e34 <m2m_wifi_connect_sc+0x238>)
    9c98:	47a0      	blx	r4

ERR1:
	return ret;
}
    9c9a:	b023      	add	sp, #140	; 0x8c
    9c9c:	bc0c      	pop	{r2, r3}
    9c9e:	4690      	mov	r8, r2
    9ca0:	4699      	mov	r9, r3
    9ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    9ca4:	4a64      	ldr	r2, [pc, #400]	; (9e38 <m2m_wifi_connect_sc+0x23c>)
    9ca6:	4965      	ldr	r1, [pc, #404]	; (9e3c <m2m_wifi_connect_sc+0x240>)
    9ca8:	4865      	ldr	r0, [pc, #404]	; (9e40 <m2m_wifi_connect_sc+0x244>)
    9caa:	4b66      	ldr	r3, [pc, #408]	; (9e44 <m2m_wifi_connect_sc+0x248>)
    9cac:	4798      	blx	r3
    9cae:	4866      	ldr	r0, [pc, #408]	; (9e48 <m2m_wifi_connect_sc+0x24c>)
    9cb0:	4b66      	ldr	r3, [pc, #408]	; (9e4c <m2m_wifi_connect_sc+0x250>)
    9cb2:	4798      	blx	r3
    9cb4:	200d      	movs	r0, #13
    9cb6:	4b66      	ldr	r3, [pc, #408]	; (9e50 <m2m_wifi_connect_sc+0x254>)
    9cb8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9cba:	200c      	movs	r0, #12
    9cbc:	4240      	negs	r0, r0
			goto ERR1;
    9cbe:	e7ec      	b.n	9c9a <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    9cc0:	0038      	movs	r0, r7
    9cc2:	4b64      	ldr	r3, [pc, #400]	; (9e54 <m2m_wifi_connect_sc+0x258>)
    9cc4:	4798      	blx	r3
    9cc6:	2840      	cmp	r0, #64	; 0x40
    9cc8:	d1ad      	bne.n	9c26 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    9cca:	783b      	ldrb	r3, [r7, #0]
    9ccc:	001a      	movs	r2, r3
    9cce:	3a30      	subs	r2, #48	; 0x30
    9cd0:	2a36      	cmp	r2, #54	; 0x36
    9cd2:	d817      	bhi.n	9d04 <m2m_wifi_connect_sc+0x108>
    9cd4:	3a0a      	subs	r2, #10
    9cd6:	2a06      	cmp	r2, #6
    9cd8:	d914      	bls.n	9d04 <m2m_wifi_connect_sc+0x108>
    9cda:	3b47      	subs	r3, #71	; 0x47
    9cdc:	2b19      	cmp	r3, #25
    9cde:	d911      	bls.n	9d04 <m2m_wifi_connect_sc+0x108>
    9ce0:	1c7a      	adds	r2, r7, #1
    9ce2:	0038      	movs	r0, r7
    9ce4:	3040      	adds	r0, #64	; 0x40
    9ce6:	7813      	ldrb	r3, [r2, #0]
    9ce8:	0019      	movs	r1, r3
    9cea:	3930      	subs	r1, #48	; 0x30
    9cec:	2936      	cmp	r1, #54	; 0x36
    9cee:	d809      	bhi.n	9d04 <m2m_wifi_connect_sc+0x108>
    9cf0:	390a      	subs	r1, #10
    9cf2:	2906      	cmp	r1, #6
    9cf4:	d906      	bls.n	9d04 <m2m_wifi_connect_sc+0x108>
    9cf6:	3b47      	subs	r3, #71	; 0x47
    9cf8:	2b19      	cmp	r3, #25
    9cfa:	d903      	bls.n	9d04 <m2m_wifi_connect_sc+0x108>
    9cfc:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    9cfe:	4282      	cmp	r2, r0
    9d00:	d1f1      	bne.n	9ce6 <m2m_wifi_connect_sc+0xea>
    9d02:	e790      	b.n	9c26 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    9d04:	4a54      	ldr	r2, [pc, #336]	; (9e58 <m2m_wifi_connect_sc+0x25c>)
    9d06:	494d      	ldr	r1, [pc, #308]	; (9e3c <m2m_wifi_connect_sc+0x240>)
    9d08:	484d      	ldr	r0, [pc, #308]	; (9e40 <m2m_wifi_connect_sc+0x244>)
    9d0a:	4b4e      	ldr	r3, [pc, #312]	; (9e44 <m2m_wifi_connect_sc+0x248>)
    9d0c:	4798      	blx	r3
    9d0e:	4853      	ldr	r0, [pc, #332]	; (9e5c <m2m_wifi_connect_sc+0x260>)
    9d10:	4b4e      	ldr	r3, [pc, #312]	; (9e4c <m2m_wifi_connect_sc+0x250>)
    9d12:	4798      	blx	r3
    9d14:	200d      	movs	r0, #13
    9d16:	4b4e      	ldr	r3, [pc, #312]	; (9e50 <m2m_wifi_connect_sc+0x254>)
    9d18:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    9d1a:	200c      	movs	r0, #12
    9d1c:	4240      	negs	r0, r0
					goto ERR1;
    9d1e:	e7bc      	b.n	9c9a <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    9d20:	4a4f      	ldr	r2, [pc, #316]	; (9e60 <m2m_wifi_connect_sc+0x264>)
    9d22:	4946      	ldr	r1, [pc, #280]	; (9e3c <m2m_wifi_connect_sc+0x240>)
    9d24:	4846      	ldr	r0, [pc, #280]	; (9e40 <m2m_wifi_connect_sc+0x244>)
    9d26:	4b47      	ldr	r3, [pc, #284]	; (9e44 <m2m_wifi_connect_sc+0x248>)
    9d28:	4798      	blx	r3
    9d2a:	484e      	ldr	r0, [pc, #312]	; (9e64 <m2m_wifi_connect_sc+0x268>)
    9d2c:	4b47      	ldr	r3, [pc, #284]	; (9e4c <m2m_wifi_connect_sc+0x250>)
    9d2e:	4798      	blx	r3
    9d30:	200d      	movs	r0, #13
    9d32:	4b47      	ldr	r3, [pc, #284]	; (9e50 <m2m_wifi_connect_sc+0x254>)
    9d34:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    9d36:	200c      	movs	r0, #12
    9d38:	4240      	negs	r0, r0
		goto ERR1;
    9d3a:	e7ae      	b.n	9c9a <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    9d3c:	228d      	movs	r2, #141	; 0x8d
    9d3e:	0092      	lsls	r2, r2, #2
    9d40:	493e      	ldr	r1, [pc, #248]	; (9e3c <m2m_wifi_connect_sc+0x240>)
    9d42:	483f      	ldr	r0, [pc, #252]	; (9e40 <m2m_wifi_connect_sc+0x244>)
    9d44:	4b3f      	ldr	r3, [pc, #252]	; (9e44 <m2m_wifi_connect_sc+0x248>)
    9d46:	4798      	blx	r3
    9d48:	4847      	ldr	r0, [pc, #284]	; (9e68 <m2m_wifi_connect_sc+0x26c>)
    9d4a:	4b40      	ldr	r3, [pc, #256]	; (9e4c <m2m_wifi_connect_sc+0x250>)
    9d4c:	4798      	blx	r3
    9d4e:	200d      	movs	r0, #13
    9d50:	4b3f      	ldr	r3, [pc, #252]	; (9e50 <m2m_wifi_connect_sc+0x254>)
    9d52:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9d54:	200c      	movs	r0, #12
    9d56:	4240      	negs	r0, r0
			goto ERR1;
    9d58:	e79f      	b.n	9c9a <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    9d5a:	783b      	ldrb	r3, [r7, #0]
    9d5c:	3b01      	subs	r3, #1
    9d5e:	b2db      	uxtb	r3, r3
    9d60:	aa07      	add	r2, sp, #28
    9d62:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    9d64:	2b03      	cmp	r3, #3
    9d66:	d817      	bhi.n	9d98 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    9d68:	787a      	ldrb	r2, [r7, #1]
    9d6a:	1e51      	subs	r1, r2, #1
    9d6c:	ab07      	add	r3, sp, #28
    9d6e:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    9d70:	2310      	movs	r3, #16
    9d72:	0011      	movs	r1, r2
    9d74:	4399      	bics	r1, r3
    9d76:	290b      	cmp	r1, #11
    9d78:	d01d      	beq.n	9db6 <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    9d7a:	4a3c      	ldr	r2, [pc, #240]	; (9e6c <m2m_wifi_connect_sc+0x270>)
    9d7c:	492f      	ldr	r1, [pc, #188]	; (9e3c <m2m_wifi_connect_sc+0x240>)
    9d7e:	4830      	ldr	r0, [pc, #192]	; (9e40 <m2m_wifi_connect_sc+0x244>)
    9d80:	4c30      	ldr	r4, [pc, #192]	; (9e44 <m2m_wifi_connect_sc+0x248>)
    9d82:	47a0      	blx	r4
    9d84:	ab07      	add	r3, sp, #28
    9d86:	7859      	ldrb	r1, [r3, #1]
    9d88:	4839      	ldr	r0, [pc, #228]	; (9e70 <m2m_wifi_connect_sc+0x274>)
    9d8a:	47a0      	blx	r4
    9d8c:	200d      	movs	r0, #13
    9d8e:	4b30      	ldr	r3, [pc, #192]	; (9e50 <m2m_wifi_connect_sc+0x254>)
    9d90:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9d92:	200c      	movs	r0, #12
    9d94:	4240      	negs	r0, r0
			goto ERR1;
    9d96:	e780      	b.n	9c9a <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    9d98:	4a36      	ldr	r2, [pc, #216]	; (9e74 <m2m_wifi_connect_sc+0x278>)
    9d9a:	4928      	ldr	r1, [pc, #160]	; (9e3c <m2m_wifi_connect_sc+0x240>)
    9d9c:	4828      	ldr	r0, [pc, #160]	; (9e40 <m2m_wifi_connect_sc+0x244>)
    9d9e:	4c29      	ldr	r4, [pc, #164]	; (9e44 <m2m_wifi_connect_sc+0x248>)
    9da0:	47a0      	blx	r4
    9da2:	ab07      	add	r3, sp, #28
    9da4:	7819      	ldrb	r1, [r3, #0]
    9da6:	4834      	ldr	r0, [pc, #208]	; (9e78 <m2m_wifi_connect_sc+0x27c>)
    9da8:	47a0      	blx	r4
    9daa:	200d      	movs	r0, #13
    9dac:	4b28      	ldr	r3, [pc, #160]	; (9e50 <m2m_wifi_connect_sc+0x254>)
    9dae:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9db0:	200c      	movs	r0, #12
    9db2:	4240      	negs	r0, r0
			goto ERR1;
    9db4:	e771      	b.n	9c9a <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    9db6:	1cb9      	adds	r1, r7, #2
    9db8:	2016      	movs	r0, #22
    9dba:	ab02      	add	r3, sp, #8
    9dbc:	469c      	mov	ip, r3
    9dbe:	4460      	add	r0, ip
    9dc0:	4b1b      	ldr	r3, [pc, #108]	; (9e30 <m2m_wifi_connect_sc+0x234>)
    9dc2:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    9dc4:	787b      	ldrb	r3, [r7, #1]
    9dc6:	aa07      	add	r2, sp, #28
    9dc8:	4694      	mov	ip, r2
    9dca:	4463      	add	r3, ip
    9dcc:	2200      	movs	r2, #0
    9dce:	709a      	strb	r2, [r3, #2]
    9dd0:	e759      	b.n	9c86 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    9dd2:	0038      	movs	r0, r7
    9dd4:	4b1f      	ldr	r3, [pc, #124]	; (9e54 <m2m_wifi_connect_sc+0x258>)
    9dd6:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    9dd8:	1e43      	subs	r3, r0, #1
    9dda:	b29b      	uxth	r3, r3
    9ddc:	2b3f      	cmp	r3, #63	; 0x3f
    9dde:	d805      	bhi.n	9dec <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    9de0:	1c42      	adds	r2, r0, #1
    9de2:	0039      	movs	r1, r7
    9de4:	a807      	add	r0, sp, #28
    9de6:	4b12      	ldr	r3, [pc, #72]	; (9e30 <m2m_wifi_connect_sc+0x234>)
    9de8:	4798      	blx	r3
    9dea:	e74c      	b.n	9c86 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    9dec:	4a23      	ldr	r2, [pc, #140]	; (9e7c <m2m_wifi_connect_sc+0x280>)
    9dee:	4913      	ldr	r1, [pc, #76]	; (9e3c <m2m_wifi_connect_sc+0x240>)
    9df0:	4813      	ldr	r0, [pc, #76]	; (9e40 <m2m_wifi_connect_sc+0x244>)
    9df2:	4b14      	ldr	r3, [pc, #80]	; (9e44 <m2m_wifi_connect_sc+0x248>)
    9df4:	4798      	blx	r3
    9df6:	4822      	ldr	r0, [pc, #136]	; (9e80 <m2m_wifi_connect_sc+0x284>)
    9df8:	4b14      	ldr	r3, [pc, #80]	; (9e4c <m2m_wifi_connect_sc+0x250>)
    9dfa:	4798      	blx	r3
    9dfc:	200d      	movs	r0, #13
    9dfe:	4b14      	ldr	r3, [pc, #80]	; (9e50 <m2m_wifi_connect_sc+0x254>)
    9e00:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9e02:	200c      	movs	r0, #12
    9e04:	4240      	negs	r0, r0
			goto ERR1;
    9e06:	e748      	b.n	9c9a <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    9e08:	223e      	movs	r2, #62	; 0x3e
    9e0a:	0039      	movs	r1, r7
    9e0c:	a807      	add	r0, sp, #28
    9e0e:	4b08      	ldr	r3, [pc, #32]	; (9e30 <m2m_wifi_connect_sc+0x234>)
    9e10:	4798      	blx	r3
    9e12:	e738      	b.n	9c86 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    9e14:	4a1b      	ldr	r2, [pc, #108]	; (9e84 <m2m_wifi_connect_sc+0x288>)
    9e16:	4909      	ldr	r1, [pc, #36]	; (9e3c <m2m_wifi_connect_sc+0x240>)
    9e18:	4809      	ldr	r0, [pc, #36]	; (9e40 <m2m_wifi_connect_sc+0x244>)
    9e1a:	4b0a      	ldr	r3, [pc, #40]	; (9e44 <m2m_wifi_connect_sc+0x248>)
    9e1c:	4798      	blx	r3
    9e1e:	481a      	ldr	r0, [pc, #104]	; (9e88 <m2m_wifi_connect_sc+0x28c>)
    9e20:	4b0a      	ldr	r3, [pc, #40]	; (9e4c <m2m_wifi_connect_sc+0x250>)
    9e22:	4798      	blx	r3
    9e24:	200d      	movs	r0, #13
    9e26:	4b0a      	ldr	r3, [pc, #40]	; (9e50 <m2m_wifi_connect_sc+0x254>)
    9e28:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    9e2a:	200c      	movs	r0, #12
    9e2c:	4240      	negs	r0, r0
		goto ERR1;
    9e2e:	e734      	b.n	9c9a <m2m_wifi_connect_sc+0x9e>
    9e30:	00008ef5 	.word	0x00008ef5
    9e34:	00009041 	.word	0x00009041
    9e38:	00000215 	.word	0x00000215
    9e3c:	0001326c 	.word	0x0001326c
    9e40:	00012ee8 	.word	0x00012ee8
    9e44:	00011869 	.word	0x00011869
    9e48:	000132b4 	.word	0x000132b4
    9e4c:	00011985 	.word	0x00011985
    9e50:	0001189d 	.word	0x0001189d
    9e54:	00008f19 	.word	0x00008f19
    9e58:	00000221 	.word	0x00000221
    9e5c:	000132c8 	.word	0x000132c8
    9e60:	0000022b 	.word	0x0000022b
    9e64:	000132d4 	.word	0x000132d4
    9e68:	000132e8 	.word	0x000132e8
    9e6c:	00000252 	.word	0x00000252
    9e70:	00013310 	.word	0x00013310
    9e74:	0000024b 	.word	0x0000024b
    9e78:	000132f4 	.word	0x000132f4
    9e7c:	00000261 	.word	0x00000261
    9e80:	0001332c 	.word	0x0001332c
    9e84:	00000271 	.word	0x00000271
    9e88:	00013348 	.word	0x00013348

00009e8c <m2m_wifi_connect>:
{
    9e8c:	b530      	push	{r4, r5, lr}
    9e8e:	b083      	sub	sp, #12
    9e90:	ac06      	add	r4, sp, #24
    9e92:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    9e94:	2500      	movs	r5, #0
    9e96:	9501      	str	r5, [sp, #4]
    9e98:	9400      	str	r4, [sp, #0]
    9e9a:	4c02      	ldr	r4, [pc, #8]	; (9ea4 <m2m_wifi_connect+0x18>)
    9e9c:	47a0      	blx	r4
}
    9e9e:	b003      	add	sp, #12
    9ea0:	bd30      	pop	{r4, r5, pc}
    9ea2:	46c0      	nop			; (mov r8, r8)
    9ea4:	00009bfd 	.word	0x00009bfd

00009ea8 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    9ea8:	2000      	movs	r0, #0
    9eaa:	4770      	bx	lr

00009eac <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    9eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    9eae:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    9eb0:	2580      	movs	r5, #128	; 0x80
    9eb2:	006d      	lsls	r5, r5, #1
    9eb4:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    9eb6:	24a5      	movs	r4, #165	; 0xa5
    9eb8:	0164      	lsls	r4, r4, #5
    9eba:	4f08      	ldr	r7, [pc, #32]	; (9edc <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    9ebc:	4e08      	ldr	r6, [pc, #32]	; (9ee0 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    9ebe:	0029      	movs	r1, r5
    9ec0:	0020      	movs	r0, r4
    9ec2:	47b8      	blx	r7
			uint32 reg = 0;
    9ec4:	2300      	movs	r3, #0
    9ec6:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    9ec8:	a901      	add	r1, sp, #4
    9eca:	0020      	movs	r0, r4
    9ecc:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    9ece:	2800      	cmp	r0, #0
    9ed0:	d1f5      	bne.n	9ebe <chip_apply_conf+0x12>
				if(reg == val32)
    9ed2:	9b01      	ldr	r3, [sp, #4]
    9ed4:	429d      	cmp	r5, r3
    9ed6:	d1f2      	bne.n	9ebe <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    9ed8:	b003      	add	sp, #12
    9eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9edc:	0000a39d 	.word	0x0000a39d
    9ee0:	0000a391 	.word	0x0000a391

00009ee4 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    9ee4:	b500      	push	{lr}
    9ee6:	b083      	sub	sp, #12
	uint32 reg = 0;
    9ee8:	2300      	movs	r3, #0
    9eea:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    9eec:	a901      	add	r1, sp, #4
    9eee:	4811      	ldr	r0, [pc, #68]	; (9f34 <enable_interrupts+0x50>)
    9ef0:	4b11      	ldr	r3, [pc, #68]	; (9f38 <enable_interrupts+0x54>)
    9ef2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    9ef4:	2800      	cmp	r0, #0
    9ef6:	d001      	beq.n	9efc <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    9ef8:	b003      	add	sp, #12
    9efa:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    9efc:	2180      	movs	r1, #128	; 0x80
    9efe:	0049      	lsls	r1, r1, #1
    9f00:	9b01      	ldr	r3, [sp, #4]
    9f02:	4319      	orrs	r1, r3
    9f04:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    9f06:	480b      	ldr	r0, [pc, #44]	; (9f34 <enable_interrupts+0x50>)
    9f08:	4b0c      	ldr	r3, [pc, #48]	; (9f3c <enable_interrupts+0x58>)
    9f0a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    9f0c:	2800      	cmp	r0, #0
    9f0e:	d1f3      	bne.n	9ef8 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    9f10:	a901      	add	r1, sp, #4
    9f12:	20d0      	movs	r0, #208	; 0xd0
    9f14:	0140      	lsls	r0, r0, #5
    9f16:	4b08      	ldr	r3, [pc, #32]	; (9f38 <enable_interrupts+0x54>)
    9f18:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    9f1a:	2800      	cmp	r0, #0
    9f1c:	d1ec      	bne.n	9ef8 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    9f1e:	2180      	movs	r1, #128	; 0x80
    9f20:	0249      	lsls	r1, r1, #9
    9f22:	9b01      	ldr	r3, [sp, #4]
    9f24:	4319      	orrs	r1, r3
    9f26:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    9f28:	20d0      	movs	r0, #208	; 0xd0
    9f2a:	0140      	lsls	r0, r0, #5
    9f2c:	4b03      	ldr	r3, [pc, #12]	; (9f3c <enable_interrupts+0x58>)
    9f2e:	4798      	blx	r3
    9f30:	e7e2      	b.n	9ef8 <enable_interrupts+0x14>
    9f32:	46c0      	nop			; (mov r8, r8)
    9f34:	00001408 	.word	0x00001408
    9f38:	0000a391 	.word	0x0000a391
    9f3c:	0000a39d 	.word	0x0000a39d

00009f40 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    9f40:	b510      	push	{r4, lr}
    9f42:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    9f44:	4b28      	ldr	r3, [pc, #160]	; (9fe8 <nmi_get_chipid+0xa8>)
    9f46:	681c      	ldr	r4, [r3, #0]
    9f48:	2c00      	cmp	r4, #0
    9f4a:	d004      	beq.n	9f56 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    9f4c:	4b26      	ldr	r3, [pc, #152]	; (9fe8 <nmi_get_chipid+0xa8>)
    9f4e:	681c      	ldr	r4, [r3, #0]
}
    9f50:	0020      	movs	r0, r4
    9f52:	b002      	add	sp, #8
    9f54:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    9f56:	0019      	movs	r1, r3
    9f58:	2080      	movs	r0, #128	; 0x80
    9f5a:	0140      	lsls	r0, r0, #5
    9f5c:	4b23      	ldr	r3, [pc, #140]	; (9fec <nmi_get_chipid+0xac>)
    9f5e:	4798      	blx	r3
    9f60:	2800      	cmp	r0, #0
    9f62:	d003      	beq.n	9f6c <nmi_get_chipid+0x2c>
			chipid = 0;
    9f64:	2200      	movs	r2, #0
    9f66:	4b20      	ldr	r3, [pc, #128]	; (9fe8 <nmi_get_chipid+0xa8>)
    9f68:	601a      	str	r2, [r3, #0]
			return 0;
    9f6a:	e7f1      	b.n	9f50 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    9f6c:	a901      	add	r1, sp, #4
    9f6e:	4820      	ldr	r0, [pc, #128]	; (9ff0 <nmi_get_chipid+0xb0>)
    9f70:	4b1e      	ldr	r3, [pc, #120]	; (9fec <nmi_get_chipid+0xac>)
    9f72:	4798      	blx	r3
    9f74:	2800      	cmp	r0, #0
    9f76:	d003      	beq.n	9f80 <nmi_get_chipid+0x40>
			chipid = 0;
    9f78:	2200      	movs	r2, #0
    9f7a:	4b1b      	ldr	r3, [pc, #108]	; (9fe8 <nmi_get_chipid+0xa8>)
    9f7c:	601a      	str	r2, [r3, #0]
			return 0;
    9f7e:	e7e7      	b.n	9f50 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    9f80:	4b19      	ldr	r3, [pc, #100]	; (9fe8 <nmi_get_chipid+0xa8>)
    9f82:	681b      	ldr	r3, [r3, #0]
    9f84:	4a1b      	ldr	r2, [pc, #108]	; (9ff4 <nmi_get_chipid+0xb4>)
    9f86:	4293      	cmp	r3, r2
    9f88:	d00e      	beq.n	9fa8 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    9f8a:	4a1b      	ldr	r2, [pc, #108]	; (9ff8 <nmi_get_chipid+0xb8>)
    9f8c:	4293      	cmp	r3, r2
    9f8e:	d012      	beq.n	9fb6 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    9f90:	4a1a      	ldr	r2, [pc, #104]	; (9ffc <nmi_get_chipid+0xbc>)
    9f92:	4293      	cmp	r3, r2
    9f94:	d01c      	beq.n	9fd0 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    9f96:	4914      	ldr	r1, [pc, #80]	; (9fe8 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    9f98:	4a19      	ldr	r2, [pc, #100]	; (a000 <nmi_get_chipid+0xc0>)
    9f9a:	680b      	ldr	r3, [r1, #0]
    9f9c:	401a      	ands	r2, r3
		chipid |= 0x050000;
    9f9e:	23a0      	movs	r3, #160	; 0xa0
    9fa0:	02db      	lsls	r3, r3, #11
    9fa2:	4313      	orrs	r3, r2
    9fa4:	600b      	str	r3, [r1, #0]
    9fa6:	e7d1      	b.n	9f4c <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    9fa8:	9b01      	ldr	r3, [sp, #4]
    9faa:	2b01      	cmp	r3, #1
    9fac:	d0f3      	beq.n	9f96 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    9fae:	4a15      	ldr	r2, [pc, #84]	; (a004 <nmi_get_chipid+0xc4>)
    9fb0:	4b0d      	ldr	r3, [pc, #52]	; (9fe8 <nmi_get_chipid+0xa8>)
    9fb2:	601a      	str	r2, [r3, #0]
    9fb4:	e7ef      	b.n	9f96 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    9fb6:	9b01      	ldr	r3, [sp, #4]
    9fb8:	2b03      	cmp	r3, #3
    9fba:	d0ec      	beq.n	9f96 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    9fbc:	2b04      	cmp	r3, #4
    9fbe:	d003      	beq.n	9fc8 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    9fc0:	4a11      	ldr	r2, [pc, #68]	; (a008 <nmi_get_chipid+0xc8>)
    9fc2:	4b09      	ldr	r3, [pc, #36]	; (9fe8 <nmi_get_chipid+0xa8>)
    9fc4:	601a      	str	r2, [r3, #0]
    9fc6:	e7e6      	b.n	9f96 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    9fc8:	4a10      	ldr	r2, [pc, #64]	; (a00c <nmi_get_chipid+0xcc>)
    9fca:	4b07      	ldr	r3, [pc, #28]	; (9fe8 <nmi_get_chipid+0xa8>)
    9fcc:	601a      	str	r2, [r3, #0]
    9fce:	e7e2      	b.n	9f96 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    9fd0:	4905      	ldr	r1, [pc, #20]	; (9fe8 <nmi_get_chipid+0xa8>)
    9fd2:	20ec      	movs	r0, #236	; 0xec
    9fd4:	0380      	lsls	r0, r0, #14
    9fd6:	4b05      	ldr	r3, [pc, #20]	; (9fec <nmi_get_chipid+0xac>)
    9fd8:	4798      	blx	r3
    9fda:	2800      	cmp	r0, #0
    9fdc:	d0db      	beq.n	9f96 <nmi_get_chipid+0x56>
			chipid = 0;
    9fde:	2200      	movs	r2, #0
    9fe0:	4b01      	ldr	r3, [pc, #4]	; (9fe8 <nmi_get_chipid+0xa8>)
    9fe2:	601a      	str	r2, [r3, #0]
			return 0;
    9fe4:	e7b4      	b.n	9f50 <nmi_get_chipid+0x10>
    9fe6:	46c0      	nop			; (mov r8, r8)
    9fe8:	20000214 	.word	0x20000214
    9fec:	0000a391 	.word	0x0000a391
    9ff0:	000013f4 	.word	0x000013f4
    9ff4:	001002a0 	.word	0x001002a0
    9ff8:	001002b0 	.word	0x001002b0
    9ffc:	001000f0 	.word	0x001000f0
    a000:	fff0ffff 	.word	0xfff0ffff
    a004:	001002a1 	.word	0x001002a1
    a008:	001002b2 	.word	0x001002b2
    a00c:	001002b1 	.word	0x001002b1

0000a010 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    a010:	b530      	push	{r4, r5, lr}
    a012:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    a014:	4c16      	ldr	r4, [pc, #88]	; (a070 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    a016:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    a018:	a901      	add	r1, sp, #4
    a01a:	2010      	movs	r0, #16
    a01c:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    a01e:	2800      	cmp	r0, #0
    a020:	d11c      	bne.n	a05c <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    a022:	9b01      	ldr	r3, [sp, #4]
    a024:	422b      	tst	r3, r5
    a026:	d1f7      	bne.n	a018 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    a028:	a901      	add	r1, sp, #4
    a02a:	3001      	adds	r0, #1
    a02c:	4b10      	ldr	r3, [pc, #64]	; (a070 <chip_sleep+0x60>)
    a02e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    a030:	2800      	cmp	r0, #0
    a032:	d113      	bne.n	a05c <chip_sleep+0x4c>
	if(reg & NBIT1)
    a034:	9901      	ldr	r1, [sp, #4]
    a036:	078b      	lsls	r3, r1, #30
    a038:	d507      	bpl.n	a04a <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    a03a:	2302      	movs	r3, #2
    a03c:	4399      	bics	r1, r3
    a03e:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    a040:	3001      	adds	r0, #1
    a042:	4b0c      	ldr	r3, [pc, #48]	; (a074 <chip_sleep+0x64>)
    a044:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    a046:	2800      	cmp	r0, #0
    a048:	d108      	bne.n	a05c <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    a04a:	a901      	add	r1, sp, #4
    a04c:	200b      	movs	r0, #11
    a04e:	4b08      	ldr	r3, [pc, #32]	; (a070 <chip_sleep+0x60>)
    a050:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    a052:	2800      	cmp	r0, #0
    a054:	d102      	bne.n	a05c <chip_sleep+0x4c>
	if(reg & NBIT0)
    a056:	9901      	ldr	r1, [sp, #4]
    a058:	07cb      	lsls	r3, r1, #31
    a05a:	d401      	bmi.n	a060 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    a05c:	b003      	add	sp, #12
    a05e:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    a060:	2301      	movs	r3, #1
    a062:	4399      	bics	r1, r3
    a064:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    a066:	300b      	adds	r0, #11
    a068:	4b02      	ldr	r3, [pc, #8]	; (a074 <chip_sleep+0x64>)
    a06a:	4798      	blx	r3
    a06c:	e7f6      	b.n	a05c <chip_sleep+0x4c>
    a06e:	46c0      	nop			; (mov r8, r8)
    a070:	0000a391 	.word	0x0000a391
    a074:	0000a39d 	.word	0x0000a39d

0000a078 <chip_wake>:
sint8 chip_wake(void)
{
    a078:	b5f0      	push	{r4, r5, r6, r7, lr}
    a07a:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    a07c:	2300      	movs	r3, #0
    a07e:	9301      	str	r3, [sp, #4]
    a080:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    a082:	a901      	add	r1, sp, #4
    a084:	200b      	movs	r0, #11
    a086:	4b28      	ldr	r3, [pc, #160]	; (a128 <chip_wake+0xb0>)
    a088:	4798      	blx	r3
    a08a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a08c:	d130      	bne.n	a0f0 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    a08e:	9901      	ldr	r1, [sp, #4]
    a090:	07cb      	lsls	r3, r1, #31
    a092:	d406      	bmi.n	a0a2 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    a094:	2301      	movs	r3, #1
    a096:	4319      	orrs	r1, r3
    a098:	200b      	movs	r0, #11
    a09a:	4b24      	ldr	r3, [pc, #144]	; (a12c <chip_wake+0xb4>)
    a09c:	4798      	blx	r3
    a09e:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a0a0:	d126      	bne.n	a0f0 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    a0a2:	a901      	add	r1, sp, #4
    a0a4:	2001      	movs	r0, #1
    a0a6:	4b20      	ldr	r3, [pc, #128]	; (a128 <chip_wake+0xb0>)
    a0a8:	4798      	blx	r3
    a0aa:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a0ac:	d120      	bne.n	a0f0 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    a0ae:	9901      	ldr	r1, [sp, #4]
    a0b0:	078b      	lsls	r3, r1, #30
    a0b2:	d520      	bpl.n	a0f6 <chip_wake+0x7e>
{
    a0b4:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    a0b6:	4f1c      	ldr	r7, [pc, #112]	; (a128 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    a0b8:	4e1d      	ldr	r6, [pc, #116]	; (a130 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    a0ba:	4669      	mov	r1, sp
    a0bc:	200f      	movs	r0, #15
    a0be:	47b8      	blx	r7
    a0c0:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    a0c2:	d120      	bne.n	a106 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    a0c4:	9b00      	ldr	r3, [sp, #0]
    a0c6:	075b      	lsls	r3, r3, #29
    a0c8:	d42b      	bmi.n	a122 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    a0ca:	2002      	movs	r0, #2
    a0cc:	47b0      	blx	r6
    a0ce:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    a0d0:	2d00      	cmp	r5, #0
    a0d2:	d1f2      	bne.n	a0ba <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    a0d4:	22af      	movs	r2, #175	; 0xaf
    a0d6:	0052      	lsls	r2, r2, #1
    a0d8:	4916      	ldr	r1, [pc, #88]	; (a134 <chip_wake+0xbc>)
    a0da:	4817      	ldr	r0, [pc, #92]	; (a138 <chip_wake+0xc0>)
    a0dc:	4b17      	ldr	r3, [pc, #92]	; (a13c <chip_wake+0xc4>)
    a0de:	4798      	blx	r3
    a0e0:	4817      	ldr	r0, [pc, #92]	; (a140 <chip_wake+0xc8>)
    a0e2:	4b18      	ldr	r3, [pc, #96]	; (a144 <chip_wake+0xcc>)
    a0e4:	4798      	blx	r3
    a0e6:	200d      	movs	r0, #13
    a0e8:	4b17      	ldr	r3, [pc, #92]	; (a148 <chip_wake+0xd0>)
    a0ea:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    a0ec:	2404      	movs	r4, #4
    a0ee:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    a0f0:	0020      	movs	r0, r4
    a0f2:	b003      	add	sp, #12
    a0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    a0f6:	2302      	movs	r3, #2
    a0f8:	4319      	orrs	r1, r3
    a0fa:	2001      	movs	r0, #1
    a0fc:	4b0b      	ldr	r3, [pc, #44]	; (a12c <chip_wake+0xb4>)
    a0fe:	4798      	blx	r3
    a100:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    a102:	d0d7      	beq.n	a0b4 <chip_wake+0x3c>
    a104:	e7f4      	b.n	a0f0 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    a106:	22aa      	movs	r2, #170	; 0xaa
    a108:	0052      	lsls	r2, r2, #1
    a10a:	490a      	ldr	r1, [pc, #40]	; (a134 <chip_wake+0xbc>)
    a10c:	480a      	ldr	r0, [pc, #40]	; (a138 <chip_wake+0xc0>)
    a10e:	4d0b      	ldr	r5, [pc, #44]	; (a13c <chip_wake+0xc4>)
    a110:	47a8      	blx	r5
    a112:	9a00      	ldr	r2, [sp, #0]
    a114:	0021      	movs	r1, r4
    a116:	480d      	ldr	r0, [pc, #52]	; (a14c <chip_wake+0xd4>)
    a118:	47a8      	blx	r5
    a11a:	200d      	movs	r0, #13
    a11c:	4b0a      	ldr	r3, [pc, #40]	; (a148 <chip_wake+0xd0>)
    a11e:	4798      	blx	r3
			goto _WAKE_EXIT;
    a120:	e7e6      	b.n	a0f0 <chip_wake+0x78>
	nm_bus_reset();
    a122:	4b0b      	ldr	r3, [pc, #44]	; (a150 <chip_wake+0xd8>)
    a124:	4798      	blx	r3
    a126:	e7e3      	b.n	a0f0 <chip_wake+0x78>
    a128:	0000a391 	.word	0x0000a391
    a12c:	0000a39d 	.word	0x0000a39d
    a130:	00008afd 	.word	0x00008afd
    a134:	00013428 	.word	0x00013428
    a138:	00012ee8 	.word	0x00012ee8
    a13c:	00011869 	.word	0x00011869
    a140:	00013470 	.word	0x00013470
    a144:	00011985 	.word	0x00011985
    a148:	0001189d 	.word	0x0001189d
    a14c:	00013458 	.word	0x00013458
    a150:	0000a379 	.word	0x0000a379

0000a154 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    a154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a156:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    a158:	4d2d      	ldr	r5, [pc, #180]	; (a210 <wait_for_bootrom+0xbc>)
    a15a:	4c2e      	ldr	r4, [pc, #184]	; (a214 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    a15c:	4e2e      	ldr	r6, [pc, #184]	; (a218 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    a15e:	0028      	movs	r0, r5
    a160:	47a0      	blx	r4
		if (reg & 0x80000000) {
    a162:	2800      	cmp	r0, #0
    a164:	db02      	blt.n	a16c <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    a166:	2001      	movs	r0, #1
    a168:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    a16a:	e7f8      	b.n	a15e <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    a16c:	482b      	ldr	r0, [pc, #172]	; (a21c <wait_for_bootrom+0xc8>)
    a16e:	4b29      	ldr	r3, [pc, #164]	; (a214 <wait_for_bootrom+0xc0>)
    a170:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    a172:	07c3      	lsls	r3, r0, #31
    a174:	d409      	bmi.n	a18a <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    a176:	4e28      	ldr	r6, [pc, #160]	; (a218 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    a178:	4c29      	ldr	r4, [pc, #164]	; (a220 <wait_for_bootrom+0xcc>)
    a17a:	4d26      	ldr	r5, [pc, #152]	; (a214 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    a17c:	2001      	movs	r0, #1
    a17e:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    a180:	0020      	movs	r0, r4
    a182:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    a184:	4b27      	ldr	r3, [pc, #156]	; (a224 <wait_for_bootrom+0xd0>)
    a186:	4298      	cmp	r0, r3
    a188:	d1f8      	bne.n	a17c <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    a18a:	2f02      	cmp	r7, #2
    a18c:	d021      	beq.n	a1d2 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    a18e:	2f03      	cmp	r7, #3
    a190:	d029      	beq.n	a1e6 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    a192:	2f04      	cmp	r7, #4
    a194:	d030      	beq.n	a1f8 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    a196:	4924      	ldr	r1, [pc, #144]	; (a228 <wait_for_bootrom+0xd4>)
    a198:	4824      	ldr	r0, [pc, #144]	; (a22c <wait_for_bootrom+0xd8>)
    a19a:	4b25      	ldr	r3, [pc, #148]	; (a230 <wait_for_bootrom+0xdc>)
    a19c:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    a19e:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    a1a0:	4b24      	ldr	r3, [pc, #144]	; (a234 <wait_for_bootrom+0xe0>)
    a1a2:	4798      	blx	r3
    a1a4:	0500      	lsls	r0, r0, #20
    a1a6:	0d00      	lsrs	r0, r0, #20
    a1a8:	4b23      	ldr	r3, [pc, #140]	; (a238 <wait_for_bootrom+0xe4>)
    a1aa:	4298      	cmp	r0, r3
    a1ac:	d82a      	bhi.n	a204 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    a1ae:	0020      	movs	r0, r4
    a1b0:	4b22      	ldr	r3, [pc, #136]	; (a23c <wait_for_bootrom+0xe8>)
    a1b2:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    a1b4:	4822      	ldr	r0, [pc, #136]	; (a240 <wait_for_bootrom+0xec>)
    a1b6:	4c23      	ldr	r4, [pc, #140]	; (a244 <wait_for_bootrom+0xf0>)
    a1b8:	47a0      	blx	r4
    a1ba:	491b      	ldr	r1, [pc, #108]	; (a228 <wait_for_bootrom+0xd4>)
    a1bc:	4822      	ldr	r0, [pc, #136]	; (a248 <wait_for_bootrom+0xf4>)
    a1be:	47a0      	blx	r4
    a1c0:	200d      	movs	r0, #13
    a1c2:	4b22      	ldr	r3, [pc, #136]	; (a24c <wait_for_bootrom+0xf8>)
    a1c4:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    a1c6:	4922      	ldr	r1, [pc, #136]	; (a250 <wait_for_bootrom+0xfc>)
    a1c8:	4815      	ldr	r0, [pc, #84]	; (a220 <wait_for_bootrom+0xcc>)
    a1ca:	4b19      	ldr	r3, [pc, #100]	; (a230 <wait_for_bootrom+0xdc>)
    a1cc:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    a1ce:	2000      	movs	r0, #0
    a1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    a1d2:	4920      	ldr	r1, [pc, #128]	; (a254 <wait_for_bootrom+0x100>)
    a1d4:	4820      	ldr	r0, [pc, #128]	; (a258 <wait_for_bootrom+0x104>)
    a1d6:	4c16      	ldr	r4, [pc, #88]	; (a230 <wait_for_bootrom+0xdc>)
    a1d8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    a1da:	2180      	movs	r1, #128	; 0x80
    a1dc:	0349      	lsls	r1, r1, #13
    a1de:	4813      	ldr	r0, [pc, #76]	; (a22c <wait_for_bootrom+0xd8>)
    a1e0:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    a1e2:	2400      	movs	r4, #0
    a1e4:	e7dc      	b.n	a1a0 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    a1e6:	491b      	ldr	r1, [pc, #108]	; (a254 <wait_for_bootrom+0x100>)
    a1e8:	481b      	ldr	r0, [pc, #108]	; (a258 <wait_for_bootrom+0x104>)
    a1ea:	4c11      	ldr	r4, [pc, #68]	; (a230 <wait_for_bootrom+0xdc>)
    a1ec:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    a1ee:	2100      	movs	r1, #0
    a1f0:	480e      	ldr	r0, [pc, #56]	; (a22c <wait_for_bootrom+0xd8>)
    a1f2:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    a1f4:	2400      	movs	r4, #0
    a1f6:	e7d3      	b.n	a1a0 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    a1f8:	490b      	ldr	r1, [pc, #44]	; (a228 <wait_for_bootrom+0xd4>)
    a1fa:	480c      	ldr	r0, [pc, #48]	; (a22c <wait_for_bootrom+0xd8>)
    a1fc:	4b0c      	ldr	r3, [pc, #48]	; (a230 <wait_for_bootrom+0xdc>)
    a1fe:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    a200:	2480      	movs	r4, #128	; 0x80
    a202:	e7cd      	b.n	a1a0 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    a204:	2002      	movs	r0, #2
    a206:	4320      	orrs	r0, r4
    a208:	4b0c      	ldr	r3, [pc, #48]	; (a23c <wait_for_bootrom+0xe8>)
    a20a:	4798      	blx	r3
    a20c:	e7d2      	b.n	a1b4 <wait_for_bootrom+0x60>
    a20e:	46c0      	nop			; (mov r8, r8)
    a210:	00001014 	.word	0x00001014
    a214:	0000a385 	.word	0x0000a385
    a218:	00008afd 	.word	0x00008afd
    a21c:	000207bc 	.word	0x000207bc
    a220:	000c000c 	.word	0x000c000c
    a224:	10add09e 	.word	0x10add09e
    a228:	13521352 	.word	0x13521352
    a22c:	0000108c 	.word	0x0000108c
    a230:	0000a39d 	.word	0x0000a39d
    a234:	00009f41 	.word	0x00009f41
    a238:	0000039f 	.word	0x0000039f
    a23c:	00009ead 	.word	0x00009ead
    a240:	00013218 	.word	0x00013218
    a244:	00011869 	.word	0x00011869
    a248:	0001348c 	.word	0x0001348c
    a24c:	0001189d 	.word	0x0001189d
    a250:	ef522f61 	.word	0xef522f61
    a254:	3c1cd57d 	.word	0x3c1cd57d
    a258:	000207ac 	.word	0x000207ac

0000a25c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    a25c:	b570      	push	{r4, r5, r6, lr}
    a25e:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    a260:	4b15      	ldr	r3, [pc, #84]	; (a2b8 <wait_for_firmware_start+0x5c>)
    a262:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    a264:	4b15      	ldr	r3, [pc, #84]	; (a2bc <wait_for_firmware_start+0x60>)
    a266:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    a268:	3802      	subs	r0, #2
    a26a:	2801      	cmp	r0, #1
    a26c:	d911      	bls.n	a292 <wait_for_firmware_start+0x36>
{
    a26e:	2401      	movs	r4, #1
    a270:	4264      	negs	r4, r4
    a272:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    a274:	4e12      	ldr	r6, [pc, #72]	; (a2c0 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    a276:	4d13      	ldr	r5, [pc, #76]	; (a2c4 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    a278:	9b00      	ldr	r3, [sp, #0]
    a27a:	4298      	cmp	r0, r3
    a27c:	d00e      	beq.n	a29c <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    a27e:	2002      	movs	r0, #2
    a280:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    a282:	9801      	ldr	r0, [sp, #4]
    a284:	47a8      	blx	r5
    a286:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    a288:	2c00      	cmp	r4, #0
    a28a:	d1f5      	bne.n	a278 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    a28c:	2005      	movs	r0, #5
    a28e:	4240      	negs	r0, r0
    a290:	e009      	b.n	a2a6 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    a292:	4b0d      	ldr	r3, [pc, #52]	; (a2c8 <wait_for_firmware_start+0x6c>)
    a294:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    a296:	4b0d      	ldr	r3, [pc, #52]	; (a2cc <wait_for_firmware_start+0x70>)
    a298:	9300      	str	r3, [sp, #0]
    a29a:	e7e8      	b.n	a26e <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    a29c:	9a00      	ldr	r2, [sp, #0]
    a29e:	4b07      	ldr	r3, [pc, #28]	; (a2bc <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    a2a0:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    a2a2:	429a      	cmp	r2, r3
    a2a4:	d001      	beq.n	a2aa <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    a2a6:	b002      	add	sp, #8
    a2a8:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    a2aa:	2100      	movs	r1, #0
    a2ac:	4802      	ldr	r0, [pc, #8]	; (a2b8 <wait_for_firmware_start+0x5c>)
    a2ae:	4b08      	ldr	r3, [pc, #32]	; (a2d0 <wait_for_firmware_start+0x74>)
    a2b0:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    a2b2:	2000      	movs	r0, #0
    a2b4:	e7f7      	b.n	a2a6 <wait_for_firmware_start+0x4a>
    a2b6:	46c0      	nop			; (mov r8, r8)
    a2b8:	0000108c 	.word	0x0000108c
    a2bc:	02532636 	.word	0x02532636
    a2c0:	00008afd 	.word	0x00008afd
    a2c4:	0000a385 	.word	0x0000a385
    a2c8:	000207ac 	.word	0x000207ac
    a2cc:	d75dc1c3 	.word	0xd75dc1c3
    a2d0:	0000a39d 	.word	0x0000a39d

0000a2d4 <chip_deinit>:

sint8 chip_deinit(void)
{
    a2d4:	b510      	push	{r4, lr}
    a2d6:	b082      	sub	sp, #8
	uint32 reg = 0;
    a2d8:	2300      	movs	r3, #0
    a2da:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    a2dc:	a901      	add	r1, sp, #4
    a2de:	20a0      	movs	r0, #160	; 0xa0
    a2e0:	0140      	lsls	r0, r0, #5
    a2e2:	4b14      	ldr	r3, [pc, #80]	; (a334 <chip_deinit+0x60>)
    a2e4:	4798      	blx	r3
    a2e6:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    a2e8:	d115      	bne.n	a316 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    a2ea:	4913      	ldr	r1, [pc, #76]	; (a338 <chip_deinit+0x64>)
    a2ec:	9b01      	ldr	r3, [sp, #4]
    a2ee:	4019      	ands	r1, r3
    a2f0:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    a2f2:	20a0      	movs	r0, #160	; 0xa0
    a2f4:	0140      	lsls	r0, r0, #5
    a2f6:	4b11      	ldr	r3, [pc, #68]	; (a33c <chip_deinit+0x68>)
    a2f8:	4798      	blx	r3
    a2fa:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    a2fc:	d016      	beq.n	a32c <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    a2fe:	4a10      	ldr	r2, [pc, #64]	; (a340 <chip_deinit+0x6c>)
    a300:	4910      	ldr	r1, [pc, #64]	; (a344 <chip_deinit+0x70>)
    a302:	4811      	ldr	r0, [pc, #68]	; (a348 <chip_deinit+0x74>)
    a304:	4b11      	ldr	r3, [pc, #68]	; (a34c <chip_deinit+0x78>)
    a306:	4798      	blx	r3
    a308:	4811      	ldr	r0, [pc, #68]	; (a350 <chip_deinit+0x7c>)
    a30a:	4b12      	ldr	r3, [pc, #72]	; (a354 <chip_deinit+0x80>)
    a30c:	4798      	blx	r3
    a30e:	200d      	movs	r0, #13
    a310:	4b11      	ldr	r3, [pc, #68]	; (a358 <chip_deinit+0x84>)
    a312:	4798      	blx	r3
		goto ERR1;
    a314:	e00a      	b.n	a32c <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    a316:	4a11      	ldr	r2, [pc, #68]	; (a35c <chip_deinit+0x88>)
    a318:	490a      	ldr	r1, [pc, #40]	; (a344 <chip_deinit+0x70>)
    a31a:	480b      	ldr	r0, [pc, #44]	; (a348 <chip_deinit+0x74>)
    a31c:	4b0b      	ldr	r3, [pc, #44]	; (a34c <chip_deinit+0x78>)
    a31e:	4798      	blx	r3
    a320:	480b      	ldr	r0, [pc, #44]	; (a350 <chip_deinit+0x7c>)
    a322:	4b0c      	ldr	r3, [pc, #48]	; (a354 <chip_deinit+0x80>)
    a324:	4798      	blx	r3
    a326:	200d      	movs	r0, #13
    a328:	4b0b      	ldr	r3, [pc, #44]	; (a358 <chip_deinit+0x84>)
    a32a:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    a32c:	0020      	movs	r0, r4
    a32e:	b002      	add	sp, #8
    a330:	bd10      	pop	{r4, pc}
    a332:	46c0      	nop			; (mov r8, r8)
    a334:	0000a391 	.word	0x0000a391
    a338:	fffffbff 	.word	0xfffffbff
    a33c:	0000a39d 	.word	0x0000a39d
    a340:	0000020b 	.word	0x0000020b
    a344:	00013434 	.word	0x00013434
    a348:	00012ee8 	.word	0x00012ee8
    a34c:	00011869 	.word	0x00011869
    a350:	00013440 	.word	0x00013440
    a354:	00011985 	.word	0x00011985
    a358:	0001189d 	.word	0x0001189d
    a35c:	00000205 	.word	0x00000205

0000a360 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    a360:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    a362:	4b01      	ldr	r3, [pc, #4]	; (a368 <nm_bus_iface_init+0x8>)
    a364:	4798      	blx	r3
	return ret;
}
    a366:	bd10      	pop	{r4, pc}
    a368:	00008c39 	.word	0x00008c39

0000a36c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    a36c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    a36e:	4b01      	ldr	r3, [pc, #4]	; (a374 <nm_bus_iface_deinit+0x8>)
    a370:	4798      	blx	r3

	return ret;
}
    a372:	bd10      	pop	{r4, pc}
    a374:	00008e89 	.word	0x00008e89

0000a378 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    a378:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    a37a:	4b01      	ldr	r3, [pc, #4]	; (a380 <nm_bus_reset+0x8>)
    a37c:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    a37e:	bd10      	pop	{r4, pc}
    a380:	0000ad29 	.word	0x0000ad29

0000a384 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    a384:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    a386:	4b01      	ldr	r3, [pc, #4]	; (a38c <nm_read_reg+0x8>)
    a388:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    a38a:	bd10      	pop	{r4, pc}
    a38c:	0000ad61 	.word	0x0000ad61

0000a390 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    a390:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    a392:	4b01      	ldr	r3, [pc, #4]	; (a398 <nm_read_reg_with_ret+0x8>)
    a394:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    a396:	bd10      	pop	{r4, pc}
    a398:	0000ad75 	.word	0x0000ad75

0000a39c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    a39c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    a39e:	4b01      	ldr	r3, [pc, #4]	; (a3a4 <nm_write_reg+0x8>)
    a3a0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    a3a2:	bd10      	pop	{r4, pc}
    a3a4:	0000ad8d 	.word	0x0000ad8d

0000a3a8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    a3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3aa:	46d6      	mov	lr, sl
    a3ac:	464f      	mov	r7, r9
    a3ae:	4646      	mov	r6, r8
    a3b0:	b5c0      	push	{r6, r7, lr}
    a3b2:	b082      	sub	sp, #8
    a3b4:	4680      	mov	r8, r0
    a3b6:	4689      	mov	r9, r1
    a3b8:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    a3ba:	4b13      	ldr	r3, [pc, #76]	; (a408 <nm_read_block+0x60>)
    a3bc:	881f      	ldrh	r7, [r3, #0]
    a3be:	3f08      	subs	r7, #8
    a3c0:	b2bb      	uxth	r3, r7
    a3c2:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    a3c4:	001e      	movs	r6, r3
    a3c6:	0004      	movs	r4, r0
    a3c8:	429a      	cmp	r2, r3
    a3ca:	d91a      	bls.n	a402 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    a3cc:	4b0f      	ldr	r3, [pc, #60]	; (a40c <nm_read_block+0x64>)
    a3ce:	469a      	mov	sl, r3
    a3d0:	1a37      	subs	r7, r6, r0
    a3d2:	4643      	mov	r3, r8
    a3d4:	1ae1      	subs	r1, r4, r3
    a3d6:	4449      	add	r1, r9
    a3d8:	9a01      	ldr	r2, [sp, #4]
    a3da:	0020      	movs	r0, r4
    a3dc:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    a3de:	2800      	cmp	r0, #0
    a3e0:	d109      	bne.n	a3f6 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    a3e2:	1bad      	subs	r5, r5, r6
    a3e4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    a3e6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    a3e8:	42b5      	cmp	r5, r6
    a3ea:	d8f2      	bhi.n	a3d2 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    a3ec:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    a3ee:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    a3f0:	0020      	movs	r0, r4
    a3f2:	4b06      	ldr	r3, [pc, #24]	; (a40c <nm_read_block+0x64>)
    a3f4:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    a3f6:	b002      	add	sp, #8
    a3f8:	bc1c      	pop	{r2, r3, r4}
    a3fa:	4690      	mov	r8, r2
    a3fc:	4699      	mov	r9, r3
    a3fe:	46a2      	mov	sl, r4
    a400:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    a402:	2100      	movs	r1, #0
    a404:	e7f2      	b.n	a3ec <nm_read_block+0x44>
    a406:	46c0      	nop			; (mov r8, r8)
    a408:	20000008 	.word	0x20000008
    a40c:	0000aed1 	.word	0x0000aed1

0000a410 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    a410:	b5f0      	push	{r4, r5, r6, r7, lr}
    a412:	46d6      	mov	lr, sl
    a414:	464f      	mov	r7, r9
    a416:	4646      	mov	r6, r8
    a418:	b5c0      	push	{r6, r7, lr}
    a41a:	b082      	sub	sp, #8
    a41c:	4680      	mov	r8, r0
    a41e:	4689      	mov	r9, r1
    a420:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    a422:	4b13      	ldr	r3, [pc, #76]	; (a470 <nm_write_block+0x60>)
    a424:	881f      	ldrh	r7, [r3, #0]
    a426:	3f08      	subs	r7, #8
    a428:	b2bb      	uxth	r3, r7
    a42a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    a42c:	001e      	movs	r6, r3
    a42e:	0004      	movs	r4, r0
    a430:	429a      	cmp	r2, r3
    a432:	d91a      	bls.n	a46a <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    a434:	4b0f      	ldr	r3, [pc, #60]	; (a474 <nm_write_block+0x64>)
    a436:	469a      	mov	sl, r3
    a438:	1a37      	subs	r7, r6, r0
    a43a:	4643      	mov	r3, r8
    a43c:	1ae1      	subs	r1, r4, r3
    a43e:	4449      	add	r1, r9
    a440:	9a01      	ldr	r2, [sp, #4]
    a442:	0020      	movs	r0, r4
    a444:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    a446:	2800      	cmp	r0, #0
    a448:	d109      	bne.n	a45e <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    a44a:	1bad      	subs	r5, r5, r6
    a44c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    a44e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    a450:	42b5      	cmp	r5, r6
    a452:	d8f2      	bhi.n	a43a <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    a454:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    a456:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    a458:	0020      	movs	r0, r4
    a45a:	4b06      	ldr	r3, [pc, #24]	; (a474 <nm_write_block+0x64>)
    a45c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    a45e:	b002      	add	sp, #8
    a460:	bc1c      	pop	{r2, r3, r4}
    a462:	4690      	mov	r8, r2
    a464:	4699      	mov	r9, r3
    a466:	46a2      	mov	sl, r4
    a468:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    a46a:	2100      	movs	r1, #0
    a46c:	e7f2      	b.n	a454 <nm_write_block+0x44>
    a46e:	46c0      	nop			; (mov r8, r8)
    a470:	20000008 	.word	0x20000008
    a474:	0000b02d 	.word	0x0000b02d

0000a478 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    a478:	b570      	push	{r4, r5, r6, lr}
    a47a:	b084      	sub	sp, #16
    a47c:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    a47e:	2300      	movs	r3, #0
    a480:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    a482:	2208      	movs	r2, #8
    a484:	2100      	movs	r1, #0
    a486:	a801      	add	r0, sp, #4
    a488:	4b2d      	ldr	r3, [pc, #180]	; (a540 <nm_get_firmware_full_info+0xc8>)
    a48a:	4798      	blx	r3
	if (pstrRev != NULL)
    a48c:	2c00      	cmp	r4, #0
    a48e:	d044      	beq.n	a51a <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    a490:	2228      	movs	r2, #40	; 0x28
    a492:	2100      	movs	r1, #0
    a494:	0020      	movs	r0, r4
    a496:	4b2b      	ldr	r3, [pc, #172]	; (a544 <nm_get_firmware_full_info+0xcc>)
    a498:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    a49a:	a903      	add	r1, sp, #12
    a49c:	482a      	ldr	r0, [pc, #168]	; (a548 <nm_get_firmware_full_info+0xd0>)
    a49e:	4b2b      	ldr	r3, [pc, #172]	; (a54c <nm_get_firmware_full_info+0xd4>)
    a4a0:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    a4a2:	2800      	cmp	r0, #0
    a4a4:	d13a      	bne.n	a51c <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    a4a6:	9b03      	ldr	r3, [sp, #12]
    a4a8:	2b00      	cmp	r3, #0
    a4aa:	d039      	beq.n	a520 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    a4ac:	20c0      	movs	r0, #192	; 0xc0
    a4ae:	0280      	lsls	r0, r0, #10
    a4b0:	4318      	orrs	r0, r3
    a4b2:	2208      	movs	r2, #8
    a4b4:	a901      	add	r1, sp, #4
    a4b6:	4b26      	ldr	r3, [pc, #152]	; (a550 <nm_get_firmware_full_info+0xd8>)
    a4b8:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    a4ba:	2800      	cmp	r0, #0
    a4bc:	d12e      	bne.n	a51c <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    a4be:	9b02      	ldr	r3, [sp, #8]
    a4c0:	0418      	lsls	r0, r3, #16
    a4c2:	0c00      	lsrs	r0, r0, #16
    a4c4:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    a4c6:	d02e      	beq.n	a526 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    a4c8:	23c0      	movs	r3, #192	; 0xc0
    a4ca:	029b      	lsls	r3, r3, #10
    a4cc:	4318      	orrs	r0, r3
    a4ce:	2228      	movs	r2, #40	; 0x28
    a4d0:	0021      	movs	r1, r4
    a4d2:	4b1f      	ldr	r3, [pc, #124]	; (a550 <nm_get_firmware_full_info+0xd8>)
    a4d4:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    a4d6:	2800      	cmp	r0, #0
    a4d8:	d120      	bne.n	a51c <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    a4da:	7921      	ldrb	r1, [r4, #4]
    a4dc:	0209      	lsls	r1, r1, #8
    a4de:	79a2      	ldrb	r2, [r4, #6]
    a4e0:	230f      	movs	r3, #15
    a4e2:	401a      	ands	r2, r3
    a4e4:	430a      	orrs	r2, r1
    a4e6:	7961      	ldrb	r1, [r4, #5]
    a4e8:	0109      	lsls	r1, r1, #4
    a4ea:	25ff      	movs	r5, #255	; 0xff
    a4ec:	4029      	ands	r1, r5
    a4ee:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    a4f0:	79e1      	ldrb	r1, [r4, #7]
    a4f2:	0209      	lsls	r1, r1, #8
    a4f4:	7a66      	ldrb	r6, [r4, #9]
    a4f6:	4033      	ands	r3, r6
    a4f8:	430b      	orrs	r3, r1
    a4fa:	7a21      	ldrb	r1, [r4, #8]
    a4fc:	0109      	lsls	r1, r1, #4
    a4fe:	400d      	ands	r5, r1
    a500:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    a502:	2a00      	cmp	r2, #0
    a504:	d012      	beq.n	a52c <nm_get_firmware_full_info+0xb4>
    a506:	2b00      	cmp	r3, #0
    a508:	d013      	beq.n	a532 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    a50a:	4912      	ldr	r1, [pc, #72]	; (a554 <nm_get_firmware_full_info+0xdc>)
    a50c:	428b      	cmp	r3, r1
    a50e:	d813      	bhi.n	a538 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    a510:	4b11      	ldr	r3, [pc, #68]	; (a558 <nm_get_firmware_full_info+0xe0>)
    a512:	429a      	cmp	r2, r3
    a514:	d802      	bhi.n	a51c <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    a516:	380d      	subs	r0, #13
    a518:	e000      	b.n	a51c <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    a51a:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    a51c:	b004      	add	sp, #16
    a51e:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    a520:	200c      	movs	r0, #12
    a522:	4240      	negs	r0, r0
    a524:	e7fa      	b.n	a51c <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    a526:	200c      	movs	r0, #12
    a528:	4240      	negs	r0, r0
    a52a:	e7f7      	b.n	a51c <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    a52c:	200c      	movs	r0, #12
    a52e:	4240      	negs	r0, r0
    a530:	e7f4      	b.n	a51c <nm_get_firmware_full_info+0xa4>
    a532:	200c      	movs	r0, #12
    a534:	4240      	negs	r0, r0
    a536:	e7f1      	b.n	a51c <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    a538:	200d      	movs	r0, #13
    a53a:	4240      	negs	r0, r0
    a53c:	e7ee      	b.n	a51c <nm_get_firmware_full_info+0xa4>
    a53e:	46c0      	nop			; (mov r8, r8)
    a540:	00011707 	.word	0x00011707
    a544:	00008f09 	.word	0x00008f09
    a548:	000c0008 	.word	0x000c0008
    a54c:	0000a391 	.word	0x0000a391
    a550:	0000a3a9 	.word	0x0000a3a9
    a554:	00001352 	.word	0x00001352
    a558:	00001351 	.word	0x00001351

0000a55c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    a55c:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    a55e:	2800      	cmp	r0, #0
    a560:	d037      	beq.n	a5d2 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    a562:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    a564:	1e6b      	subs	r3, r5, #1
    a566:	2b03      	cmp	r3, #3
    a568:	d900      	bls.n	a56c <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    a56a:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    a56c:	2000      	movs	r0, #0
    a56e:	4b20      	ldr	r3, [pc, #128]	; (a5f0 <nm_drv_init+0x94>)
    a570:	4798      	blx	r3
    a572:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a574:	d12f      	bne.n	a5d6 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    a576:	481f      	ldr	r0, [pc, #124]	; (a5f4 <nm_drv_init+0x98>)
    a578:	4c1f      	ldr	r4, [pc, #124]	; (a5f8 <nm_drv_init+0x9c>)
    a57a:	47a0      	blx	r4
    a57c:	4b1f      	ldr	r3, [pc, #124]	; (a5fc <nm_drv_init+0xa0>)
    a57e:	4798      	blx	r3
    a580:	0001      	movs	r1, r0
    a582:	481f      	ldr	r0, [pc, #124]	; (a600 <nm_drv_init+0xa4>)
    a584:	47a0      	blx	r4
    a586:	200d      	movs	r0, #13
    a588:	4b1e      	ldr	r3, [pc, #120]	; (a604 <nm_drv_init+0xa8>)
    a58a:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    a58c:	4b1e      	ldr	r3, [pc, #120]	; (a608 <nm_drv_init+0xac>)
    a58e:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    a590:	0028      	movs	r0, r5
    a592:	4b1e      	ldr	r3, [pc, #120]	; (a60c <nm_drv_init+0xb0>)
    a594:	4798      	blx	r3
    a596:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a598:	d117      	bne.n	a5ca <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    a59a:	0028      	movs	r0, r5
    a59c:	4b1c      	ldr	r3, [pc, #112]	; (a610 <nm_drv_init+0xb4>)
    a59e:	4798      	blx	r3
    a5a0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a5a2:	d112      	bne.n	a5ca <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    a5a4:	3d02      	subs	r5, #2
    a5a6:	2d01      	cmp	r5, #1
    a5a8:	d911      	bls.n	a5ce <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    a5aa:	4b1a      	ldr	r3, [pc, #104]	; (a614 <nm_drv_init+0xb8>)
    a5ac:	4798      	blx	r3
    a5ae:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a5b0:	d00d      	beq.n	a5ce <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    a5b2:	2256      	movs	r2, #86	; 0x56
    a5b4:	32ff      	adds	r2, #255	; 0xff
    a5b6:	4918      	ldr	r1, [pc, #96]	; (a618 <nm_drv_init+0xbc>)
    a5b8:	4818      	ldr	r0, [pc, #96]	; (a61c <nm_drv_init+0xc0>)
    a5ba:	4b0f      	ldr	r3, [pc, #60]	; (a5f8 <nm_drv_init+0x9c>)
    a5bc:	4798      	blx	r3
    a5be:	4818      	ldr	r0, [pc, #96]	; (a620 <nm_drv_init+0xc4>)
    a5c0:	4b18      	ldr	r3, [pc, #96]	; (a624 <nm_drv_init+0xc8>)
    a5c2:	4798      	blx	r3
    a5c4:	200d      	movs	r0, #13
    a5c6:	4b0f      	ldr	r3, [pc, #60]	; (a604 <nm_drv_init+0xa8>)
    a5c8:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    a5ca:	4b17      	ldr	r3, [pc, #92]	; (a628 <nm_drv_init+0xcc>)
    a5cc:	4798      	blx	r3
ERR1:
	return ret;
}
    a5ce:	0020      	movs	r0, r4
    a5d0:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    a5d2:	2501      	movs	r5, #1
    a5d4:	e7ca      	b.n	a56c <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    a5d6:	2228      	movs	r2, #40	; 0x28
    a5d8:	32ff      	adds	r2, #255	; 0xff
    a5da:	490f      	ldr	r1, [pc, #60]	; (a618 <nm_drv_init+0xbc>)
    a5dc:	480f      	ldr	r0, [pc, #60]	; (a61c <nm_drv_init+0xc0>)
    a5de:	4b06      	ldr	r3, [pc, #24]	; (a5f8 <nm_drv_init+0x9c>)
    a5e0:	4798      	blx	r3
    a5e2:	4812      	ldr	r0, [pc, #72]	; (a62c <nm_drv_init+0xd0>)
    a5e4:	4b0f      	ldr	r3, [pc, #60]	; (a624 <nm_drv_init+0xc8>)
    a5e6:	4798      	blx	r3
    a5e8:	200d      	movs	r0, #13
    a5ea:	4b06      	ldr	r3, [pc, #24]	; (a604 <nm_drv_init+0xa8>)
    a5ec:	4798      	blx	r3
		goto ERR1;
    a5ee:	e7ee      	b.n	a5ce <nm_drv_init+0x72>
    a5f0:	0000a361 	.word	0x0000a361
    a5f4:	00013218 	.word	0x00013218
    a5f8:	00011869 	.word	0x00011869
    a5fc:	00009f41 	.word	0x00009f41
    a600:	0001355c 	.word	0x0001355c
    a604:	0001189d 	.word	0x0001189d
    a608:	0000ada5 	.word	0x0000ada5
    a60c:	0000a155 	.word	0x0000a155
    a610:	0000a25d 	.word	0x0000a25d
    a614:	00009ee5 	.word	0x00009ee5
    a618:	000134a4 	.word	0x000134a4
    a61c:	00012ee8 	.word	0x00012ee8
    a620:	00013520 	.word	0x00013520
    a624:	00011985 	.word	0x00011985
    a628:	0000a36d 	.word	0x0000a36d
    a62c:	00013540 	.word	0x00013540

0000a630 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    a630:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    a632:	4b1c      	ldr	r3, [pc, #112]	; (a6a4 <nm_drv_deinit+0x74>)
    a634:	4798      	blx	r3
    a636:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a638:	d10b      	bne.n	a652 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    a63a:	2000      	movs	r0, #0
    a63c:	4b1a      	ldr	r3, [pc, #104]	; (a6a8 <nm_drv_deinit+0x78>)
    a63e:	4798      	blx	r3
    a640:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a642:	d114      	bne.n	a66e <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    a644:	4b19      	ldr	r3, [pc, #100]	; (a6ac <nm_drv_deinit+0x7c>)
    a646:	4798      	blx	r3
    a648:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a64a:	d11d      	bne.n	a688 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    a64c:	4b18      	ldr	r3, [pc, #96]	; (a6b0 <nm_drv_deinit+0x80>)
    a64e:	4798      	blx	r3
    a650:	e00b      	b.n	a66a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    a652:	22b6      	movs	r2, #182	; 0xb6
    a654:	0052      	lsls	r2, r2, #1
    a656:	4917      	ldr	r1, [pc, #92]	; (a6b4 <nm_drv_deinit+0x84>)
    a658:	4817      	ldr	r0, [pc, #92]	; (a6b8 <nm_drv_deinit+0x88>)
    a65a:	4b18      	ldr	r3, [pc, #96]	; (a6bc <nm_drv_deinit+0x8c>)
    a65c:	4798      	blx	r3
    a65e:	4818      	ldr	r0, [pc, #96]	; (a6c0 <nm_drv_deinit+0x90>)
    a660:	4b18      	ldr	r3, [pc, #96]	; (a6c4 <nm_drv_deinit+0x94>)
    a662:	4798      	blx	r3
    a664:	200d      	movs	r0, #13
    a666:	4b18      	ldr	r3, [pc, #96]	; (a6c8 <nm_drv_deinit+0x98>)
    a668:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    a66a:	0020      	movs	r0, r4
    a66c:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    a66e:	2274      	movs	r2, #116	; 0x74
    a670:	32ff      	adds	r2, #255	; 0xff
    a672:	4910      	ldr	r1, [pc, #64]	; (a6b4 <nm_drv_deinit+0x84>)
    a674:	4810      	ldr	r0, [pc, #64]	; (a6b8 <nm_drv_deinit+0x88>)
    a676:	4b11      	ldr	r3, [pc, #68]	; (a6bc <nm_drv_deinit+0x8c>)
    a678:	4798      	blx	r3
    a67a:	4814      	ldr	r0, [pc, #80]	; (a6cc <nm_drv_deinit+0x9c>)
    a67c:	4b11      	ldr	r3, [pc, #68]	; (a6c4 <nm_drv_deinit+0x94>)
    a67e:	4798      	blx	r3
    a680:	200d      	movs	r0, #13
    a682:	4b11      	ldr	r3, [pc, #68]	; (a6c8 <nm_drv_deinit+0x98>)
    a684:	4798      	blx	r3
		goto ERR1;
    a686:	e7f0      	b.n	a66a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    a688:	227a      	movs	r2, #122	; 0x7a
    a68a:	32ff      	adds	r2, #255	; 0xff
    a68c:	4909      	ldr	r1, [pc, #36]	; (a6b4 <nm_drv_deinit+0x84>)
    a68e:	480a      	ldr	r0, [pc, #40]	; (a6b8 <nm_drv_deinit+0x88>)
    a690:	4b0a      	ldr	r3, [pc, #40]	; (a6bc <nm_drv_deinit+0x8c>)
    a692:	4798      	blx	r3
    a694:	480e      	ldr	r0, [pc, #56]	; (a6d0 <nm_drv_deinit+0xa0>)
    a696:	4b0b      	ldr	r3, [pc, #44]	; (a6c4 <nm_drv_deinit+0x94>)
    a698:	4798      	blx	r3
    a69a:	200d      	movs	r0, #13
    a69c:	4b0a      	ldr	r3, [pc, #40]	; (a6c8 <nm_drv_deinit+0x98>)
    a69e:	4798      	blx	r3
		goto ERR1;
    a6a0:	e7e3      	b.n	a66a <nm_drv_deinit+0x3a>
    a6a2:	46c0      	nop			; (mov r8, r8)
    a6a4:	0000a2d5 	.word	0x0000a2d5
    a6a8:	0000bc01 	.word	0x0000bc01
    a6ac:	0000a36d 	.word	0x0000a36d
    a6b0:	0000ad51 	.word	0x0000ad51
    a6b4:	000134b0 	.word	0x000134b0
    a6b8:	00012ee8 	.word	0x00012ee8
    a6bc:	00011869 	.word	0x00011869
    a6c0:	000134c0 	.word	0x000134c0
    a6c4:	00011985 	.word	0x00011985
    a6c8:	0001189d 	.word	0x0001189d
    a6cc:	000134e0 	.word	0x000134e0
    a6d0:	00013504 	.word	0x00013504

0000a6d4 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    a6d4:	b500      	push	{lr}
    a6d6:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    a6d8:	ab01      	add	r3, sp, #4
    a6da:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    a6dc:	2200      	movs	r2, #0
    a6de:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    a6e0:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    a6e2:	0019      	movs	r1, r3
    a6e4:	2003      	movs	r0, #3
    a6e6:	4b02      	ldr	r3, [pc, #8]	; (a6f0 <nmi_spi_write+0x1c>)
    a6e8:	4798      	blx	r3
}
    a6ea:	b005      	add	sp, #20
    a6ec:	bd00      	pop	{pc}
    a6ee:	46c0      	nop			; (mov r8, r8)
    a6f0:	00008d3d 	.word	0x00008d3d

0000a6f4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    a6f4:	b570      	push	{r4, r5, r6, lr}
    a6f6:	b084      	sub	sp, #16
    a6f8:	ac08      	add	r4, sp, #32
    a6fa:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    a6fc:	ac01      	add	r4, sp, #4
    a6fe:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    a700:	303f      	adds	r0, #63	; 0x3f
    a702:	b2c4      	uxtb	r4, r0
    a704:	2c0e      	cmp	r4, #14
    a706:	d900      	bls.n	a70a <spi_cmd+0x16>
    a708:	e084      	b.n	a814 <spi_cmd+0x120>
    a70a:	00a0      	lsls	r0, r4, #2
    a70c:	4c4f      	ldr	r4, [pc, #316]	; (a84c <spi_cmd+0x158>)
    a70e:	5820      	ldr	r0, [r4, r0]
    a710:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    a712:	ab01      	add	r3, sp, #4
    a714:	0c0a      	lsrs	r2, r1, #16
    a716:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    a718:	0a0a      	lsrs	r2, r1, #8
    a71a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    a71c:	70d9      	strb	r1, [r3, #3]
		len = 5;
    a71e:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    a720:	4b4b      	ldr	r3, [pc, #300]	; (a850 <spi_cmd+0x15c>)
    a722:	781b      	ldrb	r3, [r3, #0]
    a724:	2b00      	cmp	r3, #0
    a726:	d077      	beq.n	a818 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    a728:	3901      	subs	r1, #1
    a72a:	b2c9      	uxtb	r1, r1
    a72c:	e083      	b.n	a836 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    a72e:	0a0b      	lsrs	r3, r1, #8
    a730:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    a732:	2d00      	cmp	r5, #0
    a734:	d107      	bne.n	a746 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    a736:	aa01      	add	r2, sp, #4
    a738:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    a73a:	ab01      	add	r3, sp, #4
    a73c:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    a73e:	2200      	movs	r2, #0
    a740:	70da      	strb	r2, [r3, #3]
		len = 5;
    a742:	2105      	movs	r1, #5
		break;
    a744:	e7ec      	b.n	a720 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    a746:	2280      	movs	r2, #128	; 0x80
    a748:	4252      	negs	r2, r2
    a74a:	4313      	orrs	r3, r2
    a74c:	aa01      	add	r2, sp, #4
    a74e:	7053      	strb	r3, [r2, #1]
    a750:	e7f3      	b.n	a73a <spi_cmd+0x46>
		bc[1] = 0x00;
    a752:	ab01      	add	r3, sp, #4
    a754:	2200      	movs	r2, #0
    a756:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    a758:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    a75a:	70da      	strb	r2, [r3, #3]
		len = 5;
    a75c:	2105      	movs	r1, #5
		break;
    a75e:	e7df      	b.n	a720 <spi_cmd+0x2c>
		bc[1] = 0x00;
    a760:	ab01      	add	r3, sp, #4
    a762:	2200      	movs	r2, #0
    a764:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    a766:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    a768:	70da      	strb	r2, [r3, #3]
		len = 5;
    a76a:	2105      	movs	r1, #5
		break;
    a76c:	e7d8      	b.n	a720 <spi_cmd+0x2c>
		bc[1] = 0xff;
    a76e:	ab01      	add	r3, sp, #4
    a770:	22ff      	movs	r2, #255	; 0xff
    a772:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    a774:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    a776:	70da      	strb	r2, [r3, #3]
		len = 5;
    a778:	2105      	movs	r1, #5
		break;
    a77a:	e7d1      	b.n	a720 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    a77c:	aa01      	add	r2, sp, #4
    a77e:	0c08      	lsrs	r0, r1, #16
    a780:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    a782:	0a08      	lsrs	r0, r1, #8
    a784:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    a786:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    a788:	0a19      	lsrs	r1, r3, #8
    a78a:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    a78c:	7153      	strb	r3, [r2, #5]
		len = 7;
    a78e:	2107      	movs	r1, #7
		break;
    a790:	e7c6      	b.n	a720 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    a792:	aa01      	add	r2, sp, #4
    a794:	0c08      	lsrs	r0, r1, #16
    a796:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    a798:	0a08      	lsrs	r0, r1, #8
    a79a:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    a79c:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    a79e:	0c19      	lsrs	r1, r3, #16
    a7a0:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    a7a2:	0a19      	lsrs	r1, r3, #8
    a7a4:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    a7a6:	7193      	strb	r3, [r2, #6]
		len = 8;
    a7a8:	2108      	movs	r1, #8
		break;
    a7aa:	e7b9      	b.n	a720 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    a7ac:	0a0b      	lsrs	r3, r1, #8
    a7ae:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    a7b0:	2d00      	cmp	r5, #0
    a7b2:	d10c      	bne.n	a7ce <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    a7b4:	a801      	add	r0, sp, #4
    a7b6:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    a7b8:	ab01      	add	r3, sp, #4
    a7ba:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    a7bc:	0e11      	lsrs	r1, r2, #24
    a7be:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    a7c0:	0c11      	lsrs	r1, r2, #16
    a7c2:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    a7c4:	0a11      	lsrs	r1, r2, #8
    a7c6:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    a7c8:	719a      	strb	r2, [r3, #6]
		len = 8;
    a7ca:	2108      	movs	r1, #8
		break;
    a7cc:	e7a8      	b.n	a720 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    a7ce:	2080      	movs	r0, #128	; 0x80
    a7d0:	4240      	negs	r0, r0
    a7d2:	4303      	orrs	r3, r0
    a7d4:	a801      	add	r0, sp, #4
    a7d6:	7043      	strb	r3, [r0, #1]
    a7d8:	e7ee      	b.n	a7b8 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    a7da:	ab01      	add	r3, sp, #4
    a7dc:	0c08      	lsrs	r0, r1, #16
    a7de:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    a7e0:	0a08      	lsrs	r0, r1, #8
    a7e2:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    a7e4:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    a7e6:	0e11      	lsrs	r1, r2, #24
    a7e8:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    a7ea:	0c11      	lsrs	r1, r2, #16
    a7ec:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    a7ee:	0a11      	lsrs	r1, r2, #8
    a7f0:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    a7f2:	71da      	strb	r2, [r3, #7]
		len = 9;
    a7f4:	2109      	movs	r1, #9
		break;
    a7f6:	e793      	b.n	a720 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    a7f8:	2228      	movs	r2, #40	; 0x28
    a7fa:	32ff      	adds	r2, #255	; 0xff
    a7fc:	4915      	ldr	r1, [pc, #84]	; (a854 <spi_cmd+0x160>)
    a7fe:	4816      	ldr	r0, [pc, #88]	; (a858 <spi_cmd+0x164>)
    a800:	4b16      	ldr	r3, [pc, #88]	; (a85c <spi_cmd+0x168>)
    a802:	4798      	blx	r3
    a804:	4816      	ldr	r0, [pc, #88]	; (a860 <spi_cmd+0x16c>)
    a806:	4b17      	ldr	r3, [pc, #92]	; (a864 <spi_cmd+0x170>)
    a808:	4798      	blx	r3
    a80a:	200d      	movs	r0, #13
    a80c:	4b16      	ldr	r3, [pc, #88]	; (a868 <spi_cmd+0x174>)
    a80e:	4798      	blx	r3
			result = N_FAIL;
    a810:	2300      	movs	r3, #0
    a812:	e017      	b.n	a844 <spi_cmd+0x150>
	switch (cmd) {
    a814:	2300      	movs	r3, #0
    a816:	e015      	b.n	a844 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    a818:	1e4e      	subs	r6, r1, #1
    a81a:	aa01      	add	r2, sp, #4
    a81c:	1995      	adds	r5, r2, r6
    a81e:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    a820:	4c12      	ldr	r4, [pc, #72]	; (a86c <spi_cmd+0x178>)
    a822:	005b      	lsls	r3, r3, #1
    a824:	7810      	ldrb	r0, [r2, #0]
    a826:	4043      	eors	r3, r0
    a828:	5ce3      	ldrb	r3, [r4, r3]
    a82a:	3201      	adds	r2, #1
	while (len--)
    a82c:	42aa      	cmp	r2, r5
    a82e:	d1f8      	bne.n	a822 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    a830:	005b      	lsls	r3, r3, #1
    a832:	aa01      	add	r2, sp, #4
    a834:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    a836:	b289      	uxth	r1, r1
    a838:	a801      	add	r0, sp, #4
    a83a:	4b0d      	ldr	r3, [pc, #52]	; (a870 <spi_cmd+0x17c>)
    a83c:	4798      	blx	r3
    a83e:	2301      	movs	r3, #1
    a840:	2800      	cmp	r0, #0
    a842:	d1d9      	bne.n	a7f8 <spi_cmd+0x104>
		}
	}

	return result;
}
    a844:	0018      	movs	r0, r3
    a846:	b004      	add	sp, #16
    a848:	bd70      	pop	{r4, r5, r6, pc}
    a84a:	46c0      	nop			; (mov r8, r8)
    a84c:	0001356c 	.word	0x0001356c
    a850:	20000218 	.word	0x20000218
    a854:	000135ac 	.word	0x000135ac
    a858:	00012ee8 	.word	0x00012ee8
    a85c:	00011869 	.word	0x00011869
    a860:	00013a3c 	.word	0x00013a3c
    a864:	00011985 	.word	0x00011985
    a868:	0001189d 	.word	0x0001189d
    a86c:	00013638 	.word	0x00013638
    a870:	0000a6d5 	.word	0x0000a6d5

0000a874 <nmi_spi_read>:
{
    a874:	b500      	push	{lr}
    a876:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    a878:	ab01      	add	r3, sp, #4
    a87a:	2200      	movs	r2, #0
    a87c:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    a87e:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    a880:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    a882:	0019      	movs	r1, r3
    a884:	2003      	movs	r0, #3
    a886:	4b02      	ldr	r3, [pc, #8]	; (a890 <nmi_spi_read+0x1c>)
    a888:	4798      	blx	r3
}
    a88a:	b005      	add	sp, #20
    a88c:	bd00      	pop	{pc}
    a88e:	46c0      	nop			; (mov r8, r8)
    a890:	00008d3d 	.word	0x00008d3d

0000a894 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    a894:	b5f0      	push	{r4, r5, r6, r7, lr}
    a896:	46c6      	mov	lr, r8
    a898:	b500      	push	{lr}
    a89a:	b082      	sub	sp, #8
    a89c:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    a89e:	28cf      	cmp	r0, #207	; 0xcf
    a8a0:	d02b      	beq.n	a8fa <spi_cmd_rsp+0x66>
    a8a2:	0003      	movs	r3, r0
    a8a4:	333b      	adds	r3, #59	; 0x3b
    a8a6:	b2db      	uxtb	r3, r3
    a8a8:	2b01      	cmp	r3, #1
    a8aa:	d926      	bls.n	a8fa <spi_cmd_rsp+0x66>
{
    a8ac:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    a8ae:	466b      	mov	r3, sp
    a8b0:	1dde      	adds	r6, r3, #7
    a8b2:	4b26      	ldr	r3, [pc, #152]	; (a94c <spi_cmd_rsp+0xb8>)
    a8b4:	4698      	mov	r8, r3
    a8b6:	2101      	movs	r1, #1
    a8b8:	0030      	movs	r0, r6
    a8ba:	47c0      	blx	r8
    a8bc:	1e05      	subs	r5, r0, #0
    a8be:	d125      	bne.n	a90c <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    a8c0:	7833      	ldrb	r3, [r6, #0]
    a8c2:	42bb      	cmp	r3, r7
    a8c4:	d030      	beq.n	a928 <spi_cmd_rsp+0x94>
    a8c6:	3c01      	subs	r4, #1
    a8c8:	b2e4      	uxtb	r4, r4
    a8ca:	2c00      	cmp	r4, #0
    a8cc:	d1f3      	bne.n	a8b6 <spi_cmd_rsp+0x22>
    a8ce:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    a8d0:	466b      	mov	r3, sp
    a8d2:	1dde      	adds	r6, r3, #7
    a8d4:	4f1d      	ldr	r7, [pc, #116]	; (a94c <spi_cmd_rsp+0xb8>)
    a8d6:	2101      	movs	r1, #1
    a8d8:	0030      	movs	r0, r6
    a8da:	47b8      	blx	r7
    a8dc:	2800      	cmp	r0, #0
    a8de:	d125      	bne.n	a92c <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    a8e0:	7833      	ldrb	r3, [r6, #0]
    a8e2:	2b00      	cmp	r3, #0
    a8e4:	d02f      	beq.n	a946 <spi_cmd_rsp+0xb2>
    a8e6:	3c01      	subs	r4, #1
    a8e8:	b2e4      	uxtb	r4, r4
    a8ea:	2c00      	cmp	r4, #0
    a8ec:	d1f3      	bne.n	a8d6 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    a8ee:	2501      	movs	r5, #1

_fail_:

	return result;
}
    a8f0:	0028      	movs	r0, r5
    a8f2:	b002      	add	sp, #8
    a8f4:	bc04      	pop	{r2}
    a8f6:	4690      	mov	r8, r2
    a8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    a8fa:	2101      	movs	r1, #1
    a8fc:	466b      	mov	r3, sp
    a8fe:	1dd8      	adds	r0, r3, #7
    a900:	4b12      	ldr	r3, [pc, #72]	; (a94c <spi_cmd_rsp+0xb8>)
    a902:	4798      	blx	r3
			result = N_FAIL;
    a904:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    a906:	2800      	cmp	r0, #0
    a908:	d0d0      	beq.n	a8ac <spi_cmd_rsp+0x18>
    a90a:	e7f1      	b.n	a8f0 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    a90c:	22b1      	movs	r2, #177	; 0xb1
    a90e:	0052      	lsls	r2, r2, #1
    a910:	490f      	ldr	r1, [pc, #60]	; (a950 <spi_cmd_rsp+0xbc>)
    a912:	4810      	ldr	r0, [pc, #64]	; (a954 <spi_cmd_rsp+0xc0>)
    a914:	4b10      	ldr	r3, [pc, #64]	; (a958 <spi_cmd_rsp+0xc4>)
    a916:	4798      	blx	r3
    a918:	4810      	ldr	r0, [pc, #64]	; (a95c <spi_cmd_rsp+0xc8>)
    a91a:	4b11      	ldr	r3, [pc, #68]	; (a960 <spi_cmd_rsp+0xcc>)
    a91c:	4798      	blx	r3
    a91e:	200d      	movs	r0, #13
    a920:	4b10      	ldr	r3, [pc, #64]	; (a964 <spi_cmd_rsp+0xd0>)
    a922:	4798      	blx	r3
			result = N_FAIL;
    a924:	2500      	movs	r5, #0
			goto _fail_;
    a926:	e7e3      	b.n	a8f0 <spi_cmd_rsp+0x5c>
    a928:	240b      	movs	r4, #11
    a92a:	e7d1      	b.n	a8d0 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    a92c:	22b8      	movs	r2, #184	; 0xb8
    a92e:	0052      	lsls	r2, r2, #1
    a930:	4907      	ldr	r1, [pc, #28]	; (a950 <spi_cmd_rsp+0xbc>)
    a932:	4808      	ldr	r0, [pc, #32]	; (a954 <spi_cmd_rsp+0xc0>)
    a934:	4b08      	ldr	r3, [pc, #32]	; (a958 <spi_cmd_rsp+0xc4>)
    a936:	4798      	blx	r3
    a938:	4808      	ldr	r0, [pc, #32]	; (a95c <spi_cmd_rsp+0xc8>)
    a93a:	4b09      	ldr	r3, [pc, #36]	; (a960 <spi_cmd_rsp+0xcc>)
    a93c:	4798      	blx	r3
    a93e:	200d      	movs	r0, #13
    a940:	4b08      	ldr	r3, [pc, #32]	; (a964 <spi_cmd_rsp+0xd0>)
    a942:	4798      	blx	r3
			goto _fail_;
    a944:	e7d4      	b.n	a8f0 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    a946:	2501      	movs	r5, #1
    a948:	e7d2      	b.n	a8f0 <spi_cmd_rsp+0x5c>
    a94a:	46c0      	nop			; (mov r8, r8)
    a94c:	0000a875 	.word	0x0000a875
    a950:	000135c4 	.word	0x000135c4
    a954:	00012ee8 	.word	0x00012ee8
    a958:	00011869 	.word	0x00011869
    a95c:	00013a68 	.word	0x00013a68
    a960:	00011985 	.word	0x00011985
    a964:	0001189d 	.word	0x0001189d

0000a968 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    a968:	b5f0      	push	{r4, r5, r6, r7, lr}
    a96a:	46de      	mov	lr, fp
    a96c:	4657      	mov	r7, sl
    a96e:	464e      	mov	r6, r9
    a970:	4645      	mov	r5, r8
    a972:	b5e0      	push	{r5, r6, r7, lr}
    a974:	b087      	sub	sp, #28
    a976:	9001      	str	r0, [sp, #4]
    a978:	4689      	mov	r9, r1
    a97a:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    a97c:	2300      	movs	r3, #0
    a97e:	469a      	mov	sl, r3
    a980:	2380      	movs	r3, #128	; 0x80
    a982:	019b      	lsls	r3, r3, #6
    a984:	469b      	mov	fp, r3
    a986:	466a      	mov	r2, sp
    a988:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    a98a:	4b3b      	ldr	r3, [pc, #236]	; (aa78 <spi_data_read+0x110>)
    a98c:	4698      	mov	r8, r3
    a98e:	e02e      	b.n	a9ee <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    a990:	4a3a      	ldr	r2, [pc, #232]	; (aa7c <spi_data_read+0x114>)
    a992:	493b      	ldr	r1, [pc, #236]	; (aa80 <spi_data_read+0x118>)
    a994:	483b      	ldr	r0, [pc, #236]	; (aa84 <spi_data_read+0x11c>)
    a996:	4b3c      	ldr	r3, [pc, #240]	; (aa88 <spi_data_read+0x120>)
    a998:	4798      	blx	r3
    a99a:	483c      	ldr	r0, [pc, #240]	; (aa8c <spi_data_read+0x124>)
    a99c:	4b3c      	ldr	r3, [pc, #240]	; (aa90 <spi_data_read+0x128>)
    a99e:	4798      	blx	r3
    a9a0:	200d      	movs	r0, #13
    a9a2:	4b3c      	ldr	r3, [pc, #240]	; (aa94 <spi_data_read+0x12c>)
    a9a4:	4798      	blx	r3
    a9a6:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    a9a8:	0028      	movs	r0, r5
    a9aa:	b007      	add	sp, #28
    a9ac:	bc3c      	pop	{r2, r3, r4, r5}
    a9ae:	4690      	mov	r8, r2
    a9b0:	4699      	mov	r9, r3
    a9b2:	46a2      	mov	sl, r4
    a9b4:	46ab      	mov	fp, r5
    a9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    a9b8:	2c00      	cmp	r4, #0
    a9ba:	dd2e      	ble.n	aa1a <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    a9bc:	9b01      	ldr	r3, [sp, #4]
    a9be:	4453      	add	r3, sl
    a9c0:	0018      	movs	r0, r3
    a9c2:	0039      	movs	r1, r7
    a9c4:	4b2c      	ldr	r3, [pc, #176]	; (aa78 <spi_data_read+0x110>)
    a9c6:	4798      	blx	r3
    a9c8:	1e04      	subs	r4, r0, #0
    a9ca:	d133      	bne.n	aa34 <spi_data_read+0xcc>
		if(!clockless)
    a9cc:	9b02      	ldr	r3, [sp, #8]
    a9ce:	2b00      	cmp	r3, #0
    a9d0:	d103      	bne.n	a9da <spi_data_read+0x72>
			if (!gu8Crc_off) {
    a9d2:	4b31      	ldr	r3, [pc, #196]	; (aa98 <spi_data_read+0x130>)
    a9d4:	781b      	ldrb	r3, [r3, #0]
    a9d6:	2b00      	cmp	r3, #0
    a9d8:	d039      	beq.n	aa4e <spi_data_read+0xe6>
		ix += nbytes;
    a9da:	4653      	mov	r3, sl
    a9dc:	18fb      	adds	r3, r7, r3
    a9de:	b21b      	sxth	r3, r3
    a9e0:	469a      	mov	sl, r3
		sz -= nbytes;
    a9e2:	464b      	mov	r3, r9
    a9e4:	1bdf      	subs	r7, r3, r7
    a9e6:	b2bb      	uxth	r3, r7
    a9e8:	4699      	mov	r9, r3
	} while (sz);
    a9ea:	2b00      	cmp	r3, #0
    a9ec:	d042      	beq.n	aa74 <spi_data_read+0x10c>
    a9ee:	464f      	mov	r7, r9
    a9f0:	45d9      	cmp	r9, fp
    a9f2:	d901      	bls.n	a9f8 <spi_data_read+0x90>
    a9f4:	466b      	mov	r3, sp
    a9f6:	89df      	ldrh	r7, [r3, #14]
    a9f8:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    a9fa:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    a9fc:	ab04      	add	r3, sp, #16
    a9fe:	1cde      	adds	r6, r3, #3
    aa00:	2101      	movs	r1, #1
    aa02:	0030      	movs	r0, r6
    aa04:	47c0      	blx	r8
    aa06:	1e05      	subs	r5, r0, #0
    aa08:	d1c2      	bne.n	a990 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    aa0a:	7833      	ldrb	r3, [r6, #0]
    aa0c:	091b      	lsrs	r3, r3, #4
    aa0e:	2b0f      	cmp	r3, #15
    aa10:	d0d2      	beq.n	a9b8 <spi_data_read+0x50>
    aa12:	3c01      	subs	r4, #1
    aa14:	b224      	sxth	r4, r4
		} while (retry--);
    aa16:	1c63      	adds	r3, r4, #1
    aa18:	d1f2      	bne.n	aa00 <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    aa1a:	4a20      	ldr	r2, [pc, #128]	; (aa9c <spi_data_read+0x134>)
    aa1c:	4918      	ldr	r1, [pc, #96]	; (aa80 <spi_data_read+0x118>)
    aa1e:	4819      	ldr	r0, [pc, #100]	; (aa84 <spi_data_read+0x11c>)
    aa20:	4c19      	ldr	r4, [pc, #100]	; (aa88 <spi_data_read+0x120>)
    aa22:	47a0      	blx	r4
    aa24:	ab04      	add	r3, sp, #16
    aa26:	78d9      	ldrb	r1, [r3, #3]
    aa28:	481d      	ldr	r0, [pc, #116]	; (aaa0 <spi_data_read+0x138>)
    aa2a:	47a0      	blx	r4
    aa2c:	200d      	movs	r0, #13
    aa2e:	4b19      	ldr	r3, [pc, #100]	; (aa94 <spi_data_read+0x12c>)
    aa30:	4798      	blx	r3
			break;
    aa32:	e7b9      	b.n	a9a8 <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    aa34:	22c5      	movs	r2, #197	; 0xc5
    aa36:	0092      	lsls	r2, r2, #2
    aa38:	4911      	ldr	r1, [pc, #68]	; (aa80 <spi_data_read+0x118>)
    aa3a:	4812      	ldr	r0, [pc, #72]	; (aa84 <spi_data_read+0x11c>)
    aa3c:	4b12      	ldr	r3, [pc, #72]	; (aa88 <spi_data_read+0x120>)
    aa3e:	4798      	blx	r3
    aa40:	4818      	ldr	r0, [pc, #96]	; (aaa4 <spi_data_read+0x13c>)
    aa42:	4b13      	ldr	r3, [pc, #76]	; (aa90 <spi_data_read+0x128>)
    aa44:	4798      	blx	r3
    aa46:	200d      	movs	r0, #13
    aa48:	4b12      	ldr	r3, [pc, #72]	; (aa94 <spi_data_read+0x12c>)
    aa4a:	4798      	blx	r3
			break;
    aa4c:	e7ac      	b.n	a9a8 <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    aa4e:	2102      	movs	r1, #2
    aa50:	a805      	add	r0, sp, #20
    aa52:	4b09      	ldr	r3, [pc, #36]	; (aa78 <spi_data_read+0x110>)
    aa54:	4798      	blx	r3
    aa56:	2800      	cmp	r0, #0
    aa58:	d0bf      	beq.n	a9da <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    aa5a:	4a13      	ldr	r2, [pc, #76]	; (aaa8 <spi_data_read+0x140>)
    aa5c:	4908      	ldr	r1, [pc, #32]	; (aa80 <spi_data_read+0x118>)
    aa5e:	4809      	ldr	r0, [pc, #36]	; (aa84 <spi_data_read+0x11c>)
    aa60:	4b09      	ldr	r3, [pc, #36]	; (aa88 <spi_data_read+0x120>)
    aa62:	4798      	blx	r3
    aa64:	4811      	ldr	r0, [pc, #68]	; (aaac <spi_data_read+0x144>)
    aa66:	4b0a      	ldr	r3, [pc, #40]	; (aa90 <spi_data_read+0x128>)
    aa68:	4798      	blx	r3
    aa6a:	200d      	movs	r0, #13
    aa6c:	4b09      	ldr	r3, [pc, #36]	; (aa94 <spi_data_read+0x12c>)
    aa6e:	4798      	blx	r3
					result = N_FAIL;
    aa70:	0025      	movs	r5, r4
					break;
    aa72:	e799      	b.n	a9a8 <spi_data_read+0x40>
    aa74:	2501      	movs	r5, #1
    aa76:	e797      	b.n	a9a8 <spi_data_read+0x40>
    aa78:	0000a875 	.word	0x0000a875
    aa7c:	000002ff 	.word	0x000002ff
    aa80:	000135d0 	.word	0x000135d0
    aa84:	00012ee8 	.word	0x00012ee8
    aa88:	00011869 	.word	0x00011869
    aa8c:	00013a9c 	.word	0x00013a9c
    aa90:	00011985 	.word	0x00011985
    aa94:	0001189d 	.word	0x0001189d
    aa98:	20000218 	.word	0x20000218
    aa9c:	0000030b 	.word	0x0000030b
    aaa0:	00013ad0 	.word	0x00013ad0
    aaa4:	00013b00 	.word	0x00013b00
    aaa8:	0000031f 	.word	0x0000031f
    aaac:	00013b30 	.word	0x00013b30

0000aab0 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    aab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    aab2:	46d6      	mov	lr, sl
    aab4:	464f      	mov	r7, r9
    aab6:	4646      	mov	r6, r8
    aab8:	b5c0      	push	{r6, r7, lr}
    aaba:	b086      	sub	sp, #24
    aabc:	9003      	str	r0, [sp, #12]
    aabe:	9104      	str	r1, [sp, #16]
    aac0:	2830      	cmp	r0, #48	; 0x30
    aac2:	d80f      	bhi.n	aae4 <spi_write_reg+0x34>
    aac4:	4b30      	ldr	r3, [pc, #192]	; (ab88 <spi_write_reg+0xd8>)
    aac6:	781f      	ldrb	r7, [r3, #0]
    aac8:	b2fb      	uxtb	r3, r7
    aaca:	9305      	str	r3, [sp, #20]
    aacc:	2300      	movs	r3, #0
    aace:	2230      	movs	r2, #48	; 0x30
    aad0:	9903      	ldr	r1, [sp, #12]
    aad2:	428a      	cmp	r2, r1
    aad4:	415b      	adcs	r3, r3
    aad6:	b2db      	uxtb	r3, r3
    aad8:	469a      	mov	sl, r3
    aada:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    aadc:	4b2b      	ldr	r3, [pc, #172]	; (ab8c <spi_write_reg+0xdc>)
    aade:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    aae0:	46d1      	mov	r9, sl
    aae2:	e033      	b.n	ab4c <spi_write_reg+0x9c>
    aae4:	4b2a      	ldr	r3, [pc, #168]	; (ab90 <spi_write_reg+0xe0>)
    aae6:	781f      	ldrb	r7, [r3, #0]
    aae8:	e7ee      	b.n	aac8 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    aaea:	9805      	ldr	r0, [sp, #20]
    aaec:	4b29      	ldr	r3, [pc, #164]	; (ab94 <spi_write_reg+0xe4>)
    aaee:	4798      	blx	r3
    aaf0:	0004      	movs	r4, r0
	if (result != N_OK) {
    aaf2:	2801      	cmp	r0, #1
    aaf4:	d041      	beq.n	ab7a <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    aaf6:	22e7      	movs	r2, #231	; 0xe7
    aaf8:	0092      	lsls	r2, r2, #2
    aafa:	4927      	ldr	r1, [pc, #156]	; (ab98 <spi_write_reg+0xe8>)
    aafc:	4827      	ldr	r0, [pc, #156]	; (ab9c <spi_write_reg+0xec>)
    aafe:	4e28      	ldr	r6, [pc, #160]	; (aba0 <spi_write_reg+0xf0>)
    ab00:	47b0      	blx	r6
    ab02:	9903      	ldr	r1, [sp, #12]
    ab04:	4827      	ldr	r0, [pc, #156]	; (aba4 <spi_write_reg+0xf4>)
    ab06:	47b0      	blx	r6
    ab08:	200d      	movs	r0, #13
    ab0a:	4b27      	ldr	r3, [pc, #156]	; (aba8 <spi_write_reg+0xf8>)
    ab0c:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    ab0e:	2001      	movs	r0, #1
    ab10:	4e26      	ldr	r6, [pc, #152]	; (abac <spi_write_reg+0xfc>)
    ab12:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ab14:	2300      	movs	r3, #0
    ab16:	9300      	str	r3, [sp, #0]
    ab18:	2200      	movs	r2, #0
    ab1a:	2100      	movs	r1, #0
    ab1c:	20cf      	movs	r0, #207	; 0xcf
    ab1e:	4f1b      	ldr	r7, [pc, #108]	; (ab8c <spi_write_reg+0xdc>)
    ab20:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    ab22:	20cf      	movs	r0, #207	; 0xcf
    ab24:	4b1b      	ldr	r3, [pc, #108]	; (ab94 <spi_write_reg+0xe4>)
    ab26:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    ab28:	4a21      	ldr	r2, [pc, #132]	; (abb0 <spi_write_reg+0x100>)
    ab2a:	491b      	ldr	r1, [pc, #108]	; (ab98 <spi_write_reg+0xe8>)
    ab2c:	481b      	ldr	r0, [pc, #108]	; (ab9c <spi_write_reg+0xec>)
    ab2e:	4f1c      	ldr	r7, [pc, #112]	; (aba0 <spi_write_reg+0xf0>)
    ab30:	47b8      	blx	r7
    ab32:	9b04      	ldr	r3, [sp, #16]
    ab34:	9a03      	ldr	r2, [sp, #12]
    ab36:	0029      	movs	r1, r5
    ab38:	481e      	ldr	r0, [pc, #120]	; (abb4 <spi_write_reg+0x104>)
    ab3a:	47b8      	blx	r7
    ab3c:	200d      	movs	r0, #13
    ab3e:	4b1a      	ldr	r3, [pc, #104]	; (aba8 <spi_write_reg+0xf8>)
    ab40:	4798      	blx	r3
		nm_bsp_sleep(1);
    ab42:	2001      	movs	r0, #1
    ab44:	47b0      	blx	r6
    ab46:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    ab48:	2d00      	cmp	r5, #0
    ab4a:	d016      	beq.n	ab7a <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    ab4c:	464b      	mov	r3, r9
    ab4e:	9300      	str	r3, [sp, #0]
    ab50:	2304      	movs	r3, #4
    ab52:	9a04      	ldr	r2, [sp, #16]
    ab54:	9f03      	ldr	r7, [sp, #12]
    ab56:	0039      	movs	r1, r7
    ab58:	9805      	ldr	r0, [sp, #20]
    ab5a:	47c0      	blx	r8
    ab5c:	0004      	movs	r4, r0
	if (result != N_OK) {
    ab5e:	2801      	cmp	r0, #1
    ab60:	d0c3      	beq.n	aaea <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    ab62:	4a15      	ldr	r2, [pc, #84]	; (abb8 <spi_write_reg+0x108>)
    ab64:	490c      	ldr	r1, [pc, #48]	; (ab98 <spi_write_reg+0xe8>)
    ab66:	480d      	ldr	r0, [pc, #52]	; (ab9c <spi_write_reg+0xec>)
    ab68:	4e0d      	ldr	r6, [pc, #52]	; (aba0 <spi_write_reg+0xf0>)
    ab6a:	47b0      	blx	r6
    ab6c:	0039      	movs	r1, r7
    ab6e:	4813      	ldr	r0, [pc, #76]	; (abbc <spi_write_reg+0x10c>)
    ab70:	47b0      	blx	r6
    ab72:	200d      	movs	r0, #13
    ab74:	4b0c      	ldr	r3, [pc, #48]	; (aba8 <spi_write_reg+0xf8>)
    ab76:	4798      	blx	r3
		goto _FAIL_;
    ab78:	e7c9      	b.n	ab0e <spi_write_reg+0x5e>
	}

	return result;
}
    ab7a:	0020      	movs	r0, r4
    ab7c:	b006      	add	sp, #24
    ab7e:	bc1c      	pop	{r2, r3, r4}
    ab80:	4690      	mov	r8, r2
    ab82:	4699      	mov	r9, r3
    ab84:	46a2      	mov	sl, r4
    ab86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab88:	000135a8 	.word	0x000135a8
    ab8c:	0000a6f5 	.word	0x0000a6f5
    ab90:	000135a9 	.word	0x000135a9
    ab94:	0000a895 	.word	0x0000a895
    ab98:	000135f0 	.word	0x000135f0
    ab9c:	00012ee8 	.word	0x00012ee8
    aba0:	00011869 	.word	0x00011869
    aba4:	00013c28 	.word	0x00013c28
    aba8:	0001189d 	.word	0x0001189d
    abac:	00008afd 	.word	0x00008afd
    abb0:	000003af 	.word	0x000003af
    abb4:	00013c60 	.word	0x00013c60
    abb8:	00000396 	.word	0x00000396
    abbc:	00013bfc 	.word	0x00013bfc

0000abc0 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    abc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    abc2:	46de      	mov	lr, fp
    abc4:	4657      	mov	r7, sl
    abc6:	464e      	mov	r6, r9
    abc8:	4645      	mov	r5, r8
    abca:	b5e0      	push	{r5, r6, r7, lr}
    abcc:	b087      	sub	sp, #28
    abce:	9002      	str	r0, [sp, #8]
    abd0:	468b      	mov	fp, r1
    abd2:	28ff      	cmp	r0, #255	; 0xff
    abd4:	d80f      	bhi.n	abf6 <spi_read_reg+0x36>
    abd6:	4b41      	ldr	r3, [pc, #260]	; (acdc <spi_read_reg+0x11c>)
    abd8:	781f      	ldrb	r7, [r3, #0]
    abda:	b2fb      	uxtb	r3, r7
    abdc:	9303      	str	r3, [sp, #12]
    abde:	2300      	movs	r3, #0
    abe0:	22ff      	movs	r2, #255	; 0xff
    abe2:	9902      	ldr	r1, [sp, #8]
    abe4:	428a      	cmp	r2, r1
    abe6:	415b      	adcs	r3, r3
    abe8:	b2db      	uxtb	r3, r3
    abea:	469a      	mov	sl, r3
    abec:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    abee:	4b3c      	ldr	r3, [pc, #240]	; (ace0 <spi_read_reg+0x120>)
    abf0:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    abf2:	46d1      	mov	r9, sl
    abf4:	e031      	b.n	ac5a <spi_read_reg+0x9a>
    abf6:	4b3b      	ldr	r3, [pc, #236]	; (ace4 <spi_read_reg+0x124>)
    abf8:	781f      	ldrb	r7, [r3, #0]
    abfa:	e7ee      	b.n	abda <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    abfc:	9803      	ldr	r0, [sp, #12]
    abfe:	4b3a      	ldr	r3, [pc, #232]	; (ace8 <spi_read_reg+0x128>)
    ac00:	4798      	blx	r3
    ac02:	0004      	movs	r4, r0
	if (result != N_OK) {
    ac04:	2801      	cmp	r0, #1
    ac06:	d03f      	beq.n	ac88 <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    ac08:	4a38      	ldr	r2, [pc, #224]	; (acec <spi_read_reg+0x12c>)
    ac0a:	4939      	ldr	r1, [pc, #228]	; (acf0 <spi_read_reg+0x130>)
    ac0c:	4839      	ldr	r0, [pc, #228]	; (acf4 <spi_read_reg+0x134>)
    ac0e:	4e3a      	ldr	r6, [pc, #232]	; (acf8 <spi_read_reg+0x138>)
    ac10:	47b0      	blx	r6
    ac12:	9902      	ldr	r1, [sp, #8]
    ac14:	4839      	ldr	r0, [pc, #228]	; (acfc <spi_read_reg+0x13c>)
    ac16:	47b0      	blx	r6
    ac18:	200d      	movs	r0, #13
    ac1a:	4b39      	ldr	r3, [pc, #228]	; (ad00 <spi_read_reg+0x140>)
    ac1c:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    ac1e:	2001      	movs	r0, #1
    ac20:	4e38      	ldr	r6, [pc, #224]	; (ad04 <spi_read_reg+0x144>)
    ac22:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ac24:	2300      	movs	r3, #0
    ac26:	9300      	str	r3, [sp, #0]
    ac28:	2200      	movs	r2, #0
    ac2a:	2100      	movs	r1, #0
    ac2c:	20cf      	movs	r0, #207	; 0xcf
    ac2e:	4f2c      	ldr	r7, [pc, #176]	; (ace0 <spi_read_reg+0x120>)
    ac30:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    ac32:	20cf      	movs	r0, #207	; 0xcf
    ac34:	4b2c      	ldr	r3, [pc, #176]	; (ace8 <spi_read_reg+0x128>)
    ac36:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    ac38:	4a33      	ldr	r2, [pc, #204]	; (ad08 <spi_read_reg+0x148>)
    ac3a:	492d      	ldr	r1, [pc, #180]	; (acf0 <spi_read_reg+0x130>)
    ac3c:	482d      	ldr	r0, [pc, #180]	; (acf4 <spi_read_reg+0x134>)
    ac3e:	4f2e      	ldr	r7, [pc, #184]	; (acf8 <spi_read_reg+0x138>)
    ac40:	47b8      	blx	r7
    ac42:	9a02      	ldr	r2, [sp, #8]
    ac44:	0029      	movs	r1, r5
    ac46:	4831      	ldr	r0, [pc, #196]	; (ad0c <spi_read_reg+0x14c>)
    ac48:	47b8      	blx	r7
    ac4a:	200d      	movs	r0, #13
    ac4c:	4b2c      	ldr	r3, [pc, #176]	; (ad00 <spi_read_reg+0x140>)
    ac4e:	4798      	blx	r3
		nm_bsp_sleep(1);
    ac50:	2001      	movs	r0, #1
    ac52:	47b0      	blx	r6
    ac54:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    ac56:	2d00      	cmp	r5, #0
    ac58:	d037      	beq.n	acca <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    ac5a:	464b      	mov	r3, r9
    ac5c:	9300      	str	r3, [sp, #0]
    ac5e:	2304      	movs	r3, #4
    ac60:	2200      	movs	r2, #0
    ac62:	9f02      	ldr	r7, [sp, #8]
    ac64:	0039      	movs	r1, r7
    ac66:	9803      	ldr	r0, [sp, #12]
    ac68:	47c0      	blx	r8
    ac6a:	0004      	movs	r4, r0
	if (result != N_OK) {
    ac6c:	2801      	cmp	r0, #1
    ac6e:	d0c5      	beq.n	abfc <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    ac70:	4a27      	ldr	r2, [pc, #156]	; (ad10 <spi_read_reg+0x150>)
    ac72:	491f      	ldr	r1, [pc, #124]	; (acf0 <spi_read_reg+0x130>)
    ac74:	481f      	ldr	r0, [pc, #124]	; (acf4 <spi_read_reg+0x134>)
    ac76:	4e20      	ldr	r6, [pc, #128]	; (acf8 <spi_read_reg+0x138>)
    ac78:	47b0      	blx	r6
    ac7a:	0039      	movs	r1, r7
    ac7c:	4825      	ldr	r0, [pc, #148]	; (ad14 <spi_read_reg+0x154>)
    ac7e:	47b0      	blx	r6
    ac80:	200d      	movs	r0, #13
    ac82:	4b1f      	ldr	r3, [pc, #124]	; (ad00 <spi_read_reg+0x140>)
    ac84:	4798      	blx	r3
		goto _FAIL_;
    ac86:	e7ca      	b.n	ac1e <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    ac88:	464a      	mov	r2, r9
    ac8a:	2104      	movs	r1, #4
    ac8c:	a805      	add	r0, sp, #20
    ac8e:	4b22      	ldr	r3, [pc, #136]	; (ad18 <spi_read_reg+0x158>)
    ac90:	4798      	blx	r3
    ac92:	0004      	movs	r4, r0
	if (result != N_OK) {
    ac94:	2801      	cmp	r0, #1
    ac96:	d00b      	beq.n	acb0 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    ac98:	4a20      	ldr	r2, [pc, #128]	; (ad1c <spi_read_reg+0x15c>)
    ac9a:	4915      	ldr	r1, [pc, #84]	; (acf0 <spi_read_reg+0x130>)
    ac9c:	4815      	ldr	r0, [pc, #84]	; (acf4 <spi_read_reg+0x134>)
    ac9e:	4b16      	ldr	r3, [pc, #88]	; (acf8 <spi_read_reg+0x138>)
    aca0:	4798      	blx	r3
    aca2:	481f      	ldr	r0, [pc, #124]	; (ad20 <spi_read_reg+0x160>)
    aca4:	4b1f      	ldr	r3, [pc, #124]	; (ad24 <spi_read_reg+0x164>)
    aca6:	4798      	blx	r3
    aca8:	200d      	movs	r0, #13
    acaa:	4b15      	ldr	r3, [pc, #84]	; (ad00 <spi_read_reg+0x140>)
    acac:	4798      	blx	r3
		goto _FAIL_;
    acae:	e7b6      	b.n	ac1e <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    acb0:	aa05      	add	r2, sp, #20
    acb2:	7853      	ldrb	r3, [r2, #1]
    acb4:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    acb6:	7891      	ldrb	r1, [r2, #2]
    acb8:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    acba:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    acbc:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    acbe:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    acc0:	78d2      	ldrb	r2, [r2, #3]
    acc2:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    acc4:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    acc6:	465a      	mov	r2, fp
    acc8:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    acca:	0020      	movs	r0, r4
    accc:	b007      	add	sp, #28
    acce:	bc3c      	pop	{r2, r3, r4, r5}
    acd0:	4690      	mov	r8, r2
    acd2:	4699      	mov	r9, r3
    acd4:	46a2      	mov	sl, r4
    acd6:	46ab      	mov	fp, r5
    acd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    acda:	46c0      	nop			; (mov r8, r8)
    acdc:	000135aa 	.word	0x000135aa
    ace0:	0000a6f5 	.word	0x0000a6f5
    ace4:	000135ab 	.word	0x000135ab
    ace8:	0000a895 	.word	0x0000a895
    acec:	0000041d 	.word	0x0000041d
    acf0:	00013610 	.word	0x00013610
    acf4:	00012ee8 	.word	0x00012ee8
    acf8:	00011869 	.word	0x00011869
    acfc:	00013b90 	.word	0x00013b90
    ad00:	0001189d 	.word	0x0001189d
    ad04:	00008afd 	.word	0x00008afd
    ad08:	0000043c 	.word	0x0000043c
    ad0c:	00013be4 	.word	0x00013be4
    ad10:	00000417 	.word	0x00000417
    ad14:	00013b64 	.word	0x00013b64
    ad18:	0000a969 	.word	0x0000a969
    ad1c:	00000424 	.word	0x00000424
    ad20:	00013bc4 	.word	0x00013bc4
    ad24:	00011985 	.word	0x00011985

0000ad28 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    ad28:	b510      	push	{r4, lr}
    ad2a:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ad2c:	2300      	movs	r3, #0
    ad2e:	9300      	str	r3, [sp, #0]
    ad30:	2200      	movs	r2, #0
    ad32:	2100      	movs	r1, #0
    ad34:	20cf      	movs	r0, #207	; 0xcf
    ad36:	4c04      	ldr	r4, [pc, #16]	; (ad48 <nm_spi_reset+0x20>)
    ad38:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    ad3a:	20cf      	movs	r0, #207	; 0xcf
    ad3c:	4b03      	ldr	r3, [pc, #12]	; (ad4c <nm_spi_reset+0x24>)
    ad3e:	4798      	blx	r3
	return M2M_SUCCESS;
}
    ad40:	2000      	movs	r0, #0
    ad42:	b002      	add	sp, #8
    ad44:	bd10      	pop	{r4, pc}
    ad46:	46c0      	nop			; (mov r8, r8)
    ad48:	0000a6f5 	.word	0x0000a6f5
    ad4c:	0000a895 	.word	0x0000a895

0000ad50 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    ad50:	2200      	movs	r2, #0
    ad52:	4b02      	ldr	r3, [pc, #8]	; (ad5c <nm_spi_deinit+0xc>)
    ad54:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    ad56:	2000      	movs	r0, #0
    ad58:	4770      	bx	lr
    ad5a:	46c0      	nop			; (mov r8, r8)
    ad5c:	20000218 	.word	0x20000218

0000ad60 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    ad60:	b500      	push	{lr}
    ad62:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    ad64:	a901      	add	r1, sp, #4
    ad66:	4b02      	ldr	r3, [pc, #8]	; (ad70 <nm_spi_read_reg+0x10>)
    ad68:	4798      	blx	r3

	return u32Val;
}
    ad6a:	9801      	ldr	r0, [sp, #4]
    ad6c:	b003      	add	sp, #12
    ad6e:	bd00      	pop	{pc}
    ad70:	0000abc1 	.word	0x0000abc1

0000ad74 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    ad74:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    ad76:	4b04      	ldr	r3, [pc, #16]	; (ad88 <nm_spi_read_reg_with_ret+0x14>)
    ad78:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ad7a:	2300      	movs	r3, #0
    ad7c:	2801      	cmp	r0, #1
    ad7e:	d101      	bne.n	ad84 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    ad80:	0018      	movs	r0, r3
    ad82:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    ad84:	3b06      	subs	r3, #6
    ad86:	e7fb      	b.n	ad80 <nm_spi_read_reg_with_ret+0xc>
    ad88:	0000abc1 	.word	0x0000abc1

0000ad8c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    ad8c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    ad8e:	4b04      	ldr	r3, [pc, #16]	; (ada0 <nm_spi_write_reg+0x14>)
    ad90:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ad92:	2300      	movs	r3, #0
    ad94:	2801      	cmp	r0, #1
    ad96:	d101      	bne.n	ad9c <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    ad98:	0018      	movs	r0, r3
    ad9a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    ad9c:	3b06      	subs	r3, #6
    ad9e:	e7fb      	b.n	ad98 <nm_spi_write_reg+0xc>
    ada0:	0000aab1 	.word	0x0000aab1

0000ada4 <nm_spi_init>:
{
    ada4:	b510      	push	{r4, lr}
    ada6:	b082      	sub	sp, #8
	uint32 reg = 0;
    ada8:	2300      	movs	r3, #0
    adaa:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    adac:	4a35      	ldr	r2, [pc, #212]	; (ae84 <nm_spi_init+0xe0>)
    adae:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    adb0:	4669      	mov	r1, sp
    adb2:	4835      	ldr	r0, [pc, #212]	; (ae88 <nm_spi_init+0xe4>)
    adb4:	4b35      	ldr	r3, [pc, #212]	; (ae8c <nm_spi_init+0xe8>)
    adb6:	4798      	blx	r3
    adb8:	2800      	cmp	r0, #0
    adba:	d028      	beq.n	ae0e <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    adbc:	4b31      	ldr	r3, [pc, #196]	; (ae84 <nm_spi_init+0xe0>)
    adbe:	781b      	ldrb	r3, [r3, #0]
    adc0:	2b00      	cmp	r3, #0
    adc2:	d10d      	bne.n	ade0 <nm_spi_init+0x3c>
		reg &= ~0x70;
    adc4:	337c      	adds	r3, #124	; 0x7c
    adc6:	9900      	ldr	r1, [sp, #0]
    adc8:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    adca:	3b2c      	subs	r3, #44	; 0x2c
    adcc:	4319      	orrs	r1, r3
    adce:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    add0:	482d      	ldr	r0, [pc, #180]	; (ae88 <nm_spi_init+0xe4>)
    add2:	4b2f      	ldr	r3, [pc, #188]	; (ae90 <nm_spi_init+0xec>)
    add4:	4798      	blx	r3
    add6:	1e04      	subs	r4, r0, #0
    add8:	d039      	beq.n	ae4e <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    adda:	2201      	movs	r2, #1
    addc:	4b29      	ldr	r3, [pc, #164]	; (ae84 <nm_spi_init+0xe0>)
    adde:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    ade0:	a901      	add	r1, sp, #4
    ade2:	2080      	movs	r0, #128	; 0x80
    ade4:	0140      	lsls	r0, r0, #5
    ade6:	4b29      	ldr	r3, [pc, #164]	; (ae8c <nm_spi_init+0xe8>)
    ade8:	4798      	blx	r3
    adea:	2800      	cmp	r0, #0
    adec:	d03b      	beq.n	ae66 <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    adee:	4c26      	ldr	r4, [pc, #152]	; (ae88 <nm_spi_init+0xe4>)
    adf0:	0020      	movs	r0, r4
    adf2:	4b28      	ldr	r3, [pc, #160]	; (ae94 <nm_spi_init+0xf0>)
    adf4:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    adf6:	2370      	movs	r3, #112	; 0x70
    adf8:	0001      	movs	r1, r0
    adfa:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    adfc:	2050      	movs	r0, #80	; 0x50
    adfe:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    ae00:	0020      	movs	r0, r4
    ae02:	4b25      	ldr	r3, [pc, #148]	; (ae98 <nm_spi_init+0xf4>)
    ae04:	4798      	blx	r3
	return M2M_SUCCESS;
    ae06:	2400      	movs	r4, #0
}
    ae08:	0020      	movs	r0, r4
    ae0a:	b002      	add	sp, #8
    ae0c:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    ae0e:	2201      	movs	r2, #1
    ae10:	4b1c      	ldr	r3, [pc, #112]	; (ae84 <nm_spi_init+0xe0>)
    ae12:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    ae14:	4a21      	ldr	r2, [pc, #132]	; (ae9c <nm_spi_init+0xf8>)
    ae16:	4922      	ldr	r1, [pc, #136]	; (aea0 <nm_spi_init+0xfc>)
    ae18:	4822      	ldr	r0, [pc, #136]	; (aea4 <nm_spi_init+0x100>)
    ae1a:	4b23      	ldr	r3, [pc, #140]	; (aea8 <nm_spi_init+0x104>)
    ae1c:	4798      	blx	r3
    ae1e:	4823      	ldr	r0, [pc, #140]	; (aeac <nm_spi_init+0x108>)
    ae20:	4b23      	ldr	r3, [pc, #140]	; (aeb0 <nm_spi_init+0x10c>)
    ae22:	4798      	blx	r3
    ae24:	200d      	movs	r0, #13
    ae26:	4b23      	ldr	r3, [pc, #140]	; (aeb4 <nm_spi_init+0x110>)
    ae28:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    ae2a:	4669      	mov	r1, sp
    ae2c:	4816      	ldr	r0, [pc, #88]	; (ae88 <nm_spi_init+0xe4>)
    ae2e:	4b17      	ldr	r3, [pc, #92]	; (ae8c <nm_spi_init+0xe8>)
    ae30:	4798      	blx	r3
    ae32:	1e04      	subs	r4, r0, #0
    ae34:	d1c2      	bne.n	adbc <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    ae36:	4a20      	ldr	r2, [pc, #128]	; (aeb8 <nm_spi_init+0x114>)
    ae38:	4919      	ldr	r1, [pc, #100]	; (aea0 <nm_spi_init+0xfc>)
    ae3a:	481a      	ldr	r0, [pc, #104]	; (aea4 <nm_spi_init+0x100>)
    ae3c:	4b1a      	ldr	r3, [pc, #104]	; (aea8 <nm_spi_init+0x104>)
    ae3e:	4798      	blx	r3
    ae40:	481e      	ldr	r0, [pc, #120]	; (aebc <nm_spi_init+0x118>)
    ae42:	4b1b      	ldr	r3, [pc, #108]	; (aeb0 <nm_spi_init+0x10c>)
    ae44:	4798      	blx	r3
    ae46:	200d      	movs	r0, #13
    ae48:	4b1a      	ldr	r3, [pc, #104]	; (aeb4 <nm_spi_init+0x110>)
    ae4a:	4798      	blx	r3
			return 0;
    ae4c:	e7dc      	b.n	ae08 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    ae4e:	4a1c      	ldr	r2, [pc, #112]	; (aec0 <nm_spi_init+0x11c>)
    ae50:	4913      	ldr	r1, [pc, #76]	; (aea0 <nm_spi_init+0xfc>)
    ae52:	4814      	ldr	r0, [pc, #80]	; (aea4 <nm_spi_init+0x100>)
    ae54:	4b14      	ldr	r3, [pc, #80]	; (aea8 <nm_spi_init+0x104>)
    ae56:	4798      	blx	r3
    ae58:	481a      	ldr	r0, [pc, #104]	; (aec4 <nm_spi_init+0x120>)
    ae5a:	4b15      	ldr	r3, [pc, #84]	; (aeb0 <nm_spi_init+0x10c>)
    ae5c:	4798      	blx	r3
    ae5e:	200d      	movs	r0, #13
    ae60:	4b14      	ldr	r3, [pc, #80]	; (aeb4 <nm_spi_init+0x110>)
    ae62:	4798      	blx	r3
			return 0;
    ae64:	e7d0      	b.n	ae08 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    ae66:	4a18      	ldr	r2, [pc, #96]	; (aec8 <nm_spi_init+0x124>)
    ae68:	490d      	ldr	r1, [pc, #52]	; (aea0 <nm_spi_init+0xfc>)
    ae6a:	480e      	ldr	r0, [pc, #56]	; (aea4 <nm_spi_init+0x100>)
    ae6c:	4b0e      	ldr	r3, [pc, #56]	; (aea8 <nm_spi_init+0x104>)
    ae6e:	4798      	blx	r3
    ae70:	4816      	ldr	r0, [pc, #88]	; (aecc <nm_spi_init+0x128>)
    ae72:	4b0f      	ldr	r3, [pc, #60]	; (aeb0 <nm_spi_init+0x10c>)
    ae74:	4798      	blx	r3
    ae76:	200d      	movs	r0, #13
    ae78:	4b0e      	ldr	r3, [pc, #56]	; (aeb4 <nm_spi_init+0x110>)
    ae7a:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    ae7c:	2406      	movs	r4, #6
    ae7e:	4264      	negs	r4, r4
    ae80:	e7c2      	b.n	ae08 <nm_spi_init+0x64>
    ae82:	46c0      	nop			; (mov r8, r8)
    ae84:	20000218 	.word	0x20000218
    ae88:	0000e824 	.word	0x0000e824
    ae8c:	0000abc1 	.word	0x0000abc1
    ae90:	0000aab1 	.word	0x0000aab1
    ae94:	0000ad61 	.word	0x0000ad61
    ae98:	0000ad8d 	.word	0x0000ad8d
    ae9c:	000004c7 	.word	0x000004c7
    aea0:	0001362c 	.word	0x0001362c
    aea4:	00012ee8 	.word	0x00012ee8
    aea8:	00011869 	.word	0x00011869
    aeac:	00013738 	.word	0x00013738
    aeb0:	00011985 	.word	0x00011985
    aeb4:	0001189d 	.word	0x0001189d
    aeb8:	000004ca 	.word	0x000004ca
    aebc:	00013788 	.word	0x00013788
    aec0:	000004d4 	.word	0x000004d4
    aec4:	000137b4 	.word	0x000137b4
    aec8:	000004de 	.word	0x000004de
    aecc:	000137e8 	.word	0x000137e8

0000aed0 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    aed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    aed2:	46de      	mov	lr, fp
    aed4:	4657      	mov	r7, sl
    aed6:	464e      	mov	r6, r9
    aed8:	4645      	mov	r5, r8
    aeda:	b5e0      	push	{r5, r6, r7, lr}
    aedc:	b087      	sub	sp, #28
    aede:	9002      	str	r0, [sp, #8]
    aee0:	9103      	str	r1, [sp, #12]
    aee2:	0016      	movs	r6, r2
    aee4:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    aee6:	2300      	movs	r3, #0
    aee8:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    aeea:	2400      	movs	r4, #0
    aeec:	4b3e      	ldr	r3, [pc, #248]	; (afe8 <nm_spi_read_block+0x118>)
    aeee:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    aef0:	46a9      	mov	r9, r5
    aef2:	e037      	b.n	af64 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    aef4:	2301      	movs	r3, #1
    aef6:	469b      	mov	fp, r3
		size = 2;
    aef8:	3601      	adds	r6, #1
    aefa:	e035      	b.n	af68 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    aefc:	20c8      	movs	r0, #200	; 0xc8
    aefe:	4b3b      	ldr	r3, [pc, #236]	; (afec <nm_spi_read_block+0x11c>)
    af00:	4798      	blx	r3
	if (result != N_OK) {
    af02:	2801      	cmp	r0, #1
    af04:	d045      	beq.n	af92 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    af06:	4a3a      	ldr	r2, [pc, #232]	; (aff0 <nm_spi_read_block+0x120>)
    af08:	493a      	ldr	r1, [pc, #232]	; (aff4 <nm_spi_read_block+0x124>)
    af0a:	483b      	ldr	r0, [pc, #236]	; (aff8 <nm_spi_read_block+0x128>)
    af0c:	4f3b      	ldr	r7, [pc, #236]	; (affc <nm_spi_read_block+0x12c>)
    af0e:	47b8      	blx	r7
    af10:	9902      	ldr	r1, [sp, #8]
    af12:	483b      	ldr	r0, [pc, #236]	; (b000 <nm_spi_read_block+0x130>)
    af14:	47b8      	blx	r7
    af16:	200d      	movs	r0, #13
    af18:	4b3a      	ldr	r3, [pc, #232]	; (b004 <nm_spi_read_block+0x134>)
    af1a:	4798      	blx	r3
		nm_bsp_sleep(1);
    af1c:	2001      	movs	r0, #1
    af1e:	4f3a      	ldr	r7, [pc, #232]	; (b008 <nm_spi_read_block+0x138>)
    af20:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    af22:	9400      	str	r4, [sp, #0]
    af24:	0023      	movs	r3, r4
    af26:	0022      	movs	r2, r4
    af28:	0021      	movs	r1, r4
    af2a:	20cf      	movs	r0, #207	; 0xcf
    af2c:	4d2e      	ldr	r5, [pc, #184]	; (afe8 <nm_spi_read_block+0x118>)
    af2e:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    af30:	20cf      	movs	r0, #207	; 0xcf
    af32:	4b2e      	ldr	r3, [pc, #184]	; (afec <nm_spi_read_block+0x11c>)
    af34:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    af36:	4a35      	ldr	r2, [pc, #212]	; (b00c <nm_spi_read_block+0x13c>)
    af38:	492e      	ldr	r1, [pc, #184]	; (aff4 <nm_spi_read_block+0x124>)
    af3a:	482f      	ldr	r0, [pc, #188]	; (aff8 <nm_spi_read_block+0x128>)
    af3c:	4b2f      	ldr	r3, [pc, #188]	; (affc <nm_spi_read_block+0x12c>)
    af3e:	469a      	mov	sl, r3
    af40:	4798      	blx	r3
    af42:	0033      	movs	r3, r6
    af44:	9a02      	ldr	r2, [sp, #8]
    af46:	4649      	mov	r1, r9
    af48:	4831      	ldr	r0, [pc, #196]	; (b010 <nm_spi_read_block+0x140>)
    af4a:	47d0      	blx	sl
    af4c:	200d      	movs	r0, #13
    af4e:	4b2d      	ldr	r3, [pc, #180]	; (b004 <nm_spi_read_block+0x134>)
    af50:	4798      	blx	r3
		nm_bsp_sleep(1);
    af52:	2001      	movs	r0, #1
    af54:	47b8      	blx	r7
    af56:	2301      	movs	r3, #1
    af58:	425b      	negs	r3, r3
    af5a:	469c      	mov	ip, r3
    af5c:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    af5e:	464b      	mov	r3, r9
    af60:	2b00      	cmp	r3, #0
    af62:	d038      	beq.n	afd6 <nm_spi_read_block+0x106>
	if (size == 1)
    af64:	2e01      	cmp	r6, #1
    af66:	d0c5      	beq.n	aef4 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    af68:	9400      	str	r4, [sp, #0]
    af6a:	0033      	movs	r3, r6
    af6c:	0022      	movs	r2, r4
    af6e:	9d02      	ldr	r5, [sp, #8]
    af70:	0029      	movs	r1, r5
    af72:	20c8      	movs	r0, #200	; 0xc8
    af74:	47c0      	blx	r8
	if (result != N_OK) {
    af76:	2801      	cmp	r0, #1
    af78:	d0c0      	beq.n	aefc <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    af7a:	4a26      	ldr	r2, [pc, #152]	; (b014 <nm_spi_read_block+0x144>)
    af7c:	491d      	ldr	r1, [pc, #116]	; (aff4 <nm_spi_read_block+0x124>)
    af7e:	481e      	ldr	r0, [pc, #120]	; (aff8 <nm_spi_read_block+0x128>)
    af80:	4f1e      	ldr	r7, [pc, #120]	; (affc <nm_spi_read_block+0x12c>)
    af82:	47b8      	blx	r7
    af84:	0029      	movs	r1, r5
    af86:	4824      	ldr	r0, [pc, #144]	; (b018 <nm_spi_read_block+0x148>)
    af88:	47b8      	blx	r7
    af8a:	200d      	movs	r0, #13
    af8c:	4b1d      	ldr	r3, [pc, #116]	; (b004 <nm_spi_read_block+0x134>)
    af8e:	4798      	blx	r3
    af90:	e7c4      	b.n	af1c <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    af92:	465b      	mov	r3, fp
    af94:	2b00      	cmp	r3, #0
    af96:	d016      	beq.n	afc6 <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    af98:	af05      	add	r7, sp, #20
    af9a:	0022      	movs	r2, r4
    af9c:	0031      	movs	r1, r6
    af9e:	0038      	movs	r0, r7
    afa0:	4b1e      	ldr	r3, [pc, #120]	; (b01c <nm_spi_read_block+0x14c>)
    afa2:	4798      	blx	r3
		buf[0] = tmp[0];
    afa4:	783b      	ldrb	r3, [r7, #0]
    afa6:	9a03      	ldr	r2, [sp, #12]
    afa8:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    afaa:	2801      	cmp	r0, #1
    afac:	d011      	beq.n	afd2 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    afae:	4a1c      	ldr	r2, [pc, #112]	; (b020 <nm_spi_read_block+0x150>)
    afb0:	4910      	ldr	r1, [pc, #64]	; (aff4 <nm_spi_read_block+0x124>)
    afb2:	4811      	ldr	r0, [pc, #68]	; (aff8 <nm_spi_read_block+0x128>)
    afb4:	4b11      	ldr	r3, [pc, #68]	; (affc <nm_spi_read_block+0x12c>)
    afb6:	4798      	blx	r3
    afb8:	481a      	ldr	r0, [pc, #104]	; (b024 <nm_spi_read_block+0x154>)
    afba:	4b1b      	ldr	r3, [pc, #108]	; (b028 <nm_spi_read_block+0x158>)
    afbc:	4798      	blx	r3
    afbe:	200d      	movs	r0, #13
    afc0:	4b10      	ldr	r3, [pc, #64]	; (b004 <nm_spi_read_block+0x134>)
    afc2:	4798      	blx	r3
    afc4:	e7aa      	b.n	af1c <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    afc6:	0022      	movs	r2, r4
    afc8:	0031      	movs	r1, r6
    afca:	9803      	ldr	r0, [sp, #12]
    afcc:	4b13      	ldr	r3, [pc, #76]	; (b01c <nm_spi_read_block+0x14c>)
    afce:	4798      	blx	r3
    afd0:	e7eb      	b.n	afaa <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    afd2:	2000      	movs	r0, #0
    afd4:	e001      	b.n	afda <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    afd6:	2006      	movs	r0, #6
    afd8:	4240      	negs	r0, r0

	return s8Ret;
}
    afda:	b007      	add	sp, #28
    afdc:	bc3c      	pop	{r2, r3, r4, r5}
    afde:	4690      	mov	r8, r2
    afe0:	4699      	mov	r9, r3
    afe2:	46a2      	mov	sl, r4
    afe4:	46ab      	mov	fp, r5
    afe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    afe8:	0000a6f5 	.word	0x0000a6f5
    afec:	0000a895 	.word	0x0000a895
    aff0:	00000463 	.word	0x00000463
    aff4:	00013620 	.word	0x00013620
    aff8:	00012ee8 	.word	0x00012ee8
    affc:	00011869 	.word	0x00011869
    b000:	0001383c 	.word	0x0001383c
    b004:	0001189d 	.word	0x0001189d
    b008:	00008afd 	.word	0x00008afd
    b00c:	00000484 	.word	0x00000484
    b010:	0001389c 	.word	0x0001389c
    b014:	0000045d 	.word	0x0000045d
    b018:	0001380c 	.word	0x0001380c
    b01c:	0000a969 	.word	0x0000a969
    b020:	00000473 	.word	0x00000473
    b024:	00013874 	.word	0x00013874
    b028:	00011985 	.word	0x00011985

0000b02c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    b02c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b02e:	46de      	mov	lr, fp
    b030:	4647      	mov	r7, r8
    b032:	b580      	push	{r7, lr}
    b034:	b089      	sub	sp, #36	; 0x24
    b036:	9004      	str	r0, [sp, #16]
    b038:	468b      	mov	fp, r1
    b03a:	9203      	str	r2, [sp, #12]
    b03c:	260a      	movs	r6, #10
    b03e:	2780      	movs	r7, #128	; 0x80
    b040:	01bf      	lsls	r7, r7, #6
    b042:	466b      	mov	r3, sp
    b044:	82df      	strh	r7, [r3, #22]
    b046:	0035      	movs	r5, r6
    b048:	e02d      	b.n	b0a6 <nm_spi_write_block+0x7a>
		size = 2;
    b04a:	3301      	adds	r3, #1
    b04c:	9303      	str	r3, [sp, #12]
    b04e:	e02d      	b.n	b0ac <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    b050:	4a83      	ldr	r2, [pc, #524]	; (b260 <nm_spi_write_block+0x234>)
    b052:	4984      	ldr	r1, [pc, #528]	; (b264 <nm_spi_write_block+0x238>)
    b054:	4884      	ldr	r0, [pc, #528]	; (b268 <nm_spi_write_block+0x23c>)
    b056:	4c85      	ldr	r4, [pc, #532]	; (b26c <nm_spi_write_block+0x240>)
    b058:	47a0      	blx	r4
    b05a:	0031      	movs	r1, r6
    b05c:	4884      	ldr	r0, [pc, #528]	; (b270 <nm_spi_write_block+0x244>)
    b05e:	47a0      	blx	r4
    b060:	200d      	movs	r0, #13
    b062:	4b84      	ldr	r3, [pc, #528]	; (b274 <nm_spi_write_block+0x248>)
    b064:	4798      	blx	r3
		nm_bsp_sleep(1);
    b066:	2001      	movs	r0, #1
    b068:	4c83      	ldr	r4, [pc, #524]	; (b278 <nm_spi_write_block+0x24c>)
    b06a:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    b06c:	2300      	movs	r3, #0
    b06e:	9300      	str	r3, [sp, #0]
    b070:	2200      	movs	r2, #0
    b072:	2100      	movs	r1, #0
    b074:	20cf      	movs	r0, #207	; 0xcf
    b076:	4e81      	ldr	r6, [pc, #516]	; (b27c <nm_spi_write_block+0x250>)
    b078:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    b07a:	20cf      	movs	r0, #207	; 0xcf
    b07c:	4b80      	ldr	r3, [pc, #512]	; (b280 <nm_spi_write_block+0x254>)
    b07e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    b080:	4a80      	ldr	r2, [pc, #512]	; (b284 <nm_spi_write_block+0x258>)
    b082:	4978      	ldr	r1, [pc, #480]	; (b264 <nm_spi_write_block+0x238>)
    b084:	4878      	ldr	r0, [pc, #480]	; (b268 <nm_spi_write_block+0x23c>)
    b086:	4e79      	ldr	r6, [pc, #484]	; (b26c <nm_spi_write_block+0x240>)
    b088:	47b0      	blx	r6
    b08a:	9b03      	ldr	r3, [sp, #12]
    b08c:	9a04      	ldr	r2, [sp, #16]
    b08e:	0029      	movs	r1, r5
    b090:	487d      	ldr	r0, [pc, #500]	; (b288 <nm_spi_write_block+0x25c>)
    b092:	47b0      	blx	r6
    b094:	200d      	movs	r0, #13
    b096:	4b77      	ldr	r3, [pc, #476]	; (b274 <nm_spi_write_block+0x248>)
    b098:	4798      	blx	r3
		nm_bsp_sleep(1);
    b09a:	2001      	movs	r0, #1
    b09c:	47a0      	blx	r4
    b09e:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    b0a0:	2d00      	cmp	r5, #0
    b0a2:	d100      	bne.n	b0a6 <nm_spi_write_block+0x7a>
    b0a4:	e0d5      	b.n	b252 <nm_spi_write_block+0x226>
	if (size == 1)
    b0a6:	9b03      	ldr	r3, [sp, #12]
    b0a8:	2b01      	cmp	r3, #1
    b0aa:	d0ce      	beq.n	b04a <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    b0ac:	2300      	movs	r3, #0
    b0ae:	9300      	str	r3, [sp, #0]
    b0b0:	9b03      	ldr	r3, [sp, #12]
    b0b2:	2200      	movs	r2, #0
    b0b4:	9e04      	ldr	r6, [sp, #16]
    b0b6:	0031      	movs	r1, r6
    b0b8:	20c7      	movs	r0, #199	; 0xc7
    b0ba:	4c70      	ldr	r4, [pc, #448]	; (b27c <nm_spi_write_block+0x250>)
    b0bc:	47a0      	blx	r4
	if (result != N_OK) {
    b0be:	2801      	cmp	r0, #1
    b0c0:	d1c6      	bne.n	b050 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    b0c2:	20c7      	movs	r0, #199	; 0xc7
    b0c4:	4b6e      	ldr	r3, [pc, #440]	; (b280 <nm_spi_write_block+0x254>)
    b0c6:	4798      	blx	r3
	if (result != N_OK) {
    b0c8:	2801      	cmp	r0, #1
    b0ca:	d00c      	beq.n	b0e6 <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    b0cc:	22f4      	movs	r2, #244	; 0xf4
    b0ce:	0092      	lsls	r2, r2, #2
    b0d0:	4964      	ldr	r1, [pc, #400]	; (b264 <nm_spi_write_block+0x238>)
    b0d2:	4865      	ldr	r0, [pc, #404]	; (b268 <nm_spi_write_block+0x23c>)
    b0d4:	4c65      	ldr	r4, [pc, #404]	; (b26c <nm_spi_write_block+0x240>)
    b0d6:	47a0      	blx	r4
    b0d8:	9904      	ldr	r1, [sp, #16]
    b0da:	486c      	ldr	r0, [pc, #432]	; (b28c <nm_spi_write_block+0x260>)
    b0dc:	47a0      	blx	r4
    b0de:	200d      	movs	r0, #13
    b0e0:	4b64      	ldr	r3, [pc, #400]	; (b274 <nm_spi_write_block+0x248>)
    b0e2:	4798      	blx	r3
    b0e4:	e7bf      	b.n	b066 <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    b0e6:	2200      	movs	r2, #0
    b0e8:	ab07      	add	r3, sp, #28
    b0ea:	801a      	strh	r2, [r3, #0]
    b0ec:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    b0ee:	2600      	movs	r6, #0
				order = 0x1;
    b0f0:	46a8      	mov	r8, r5
    b0f2:	0035      	movs	r5, r6
    b0f4:	0026      	movs	r6, r4
    b0f6:	e021      	b.n	b13c <nm_spi_write_block+0x110>
				order = 0x2;
    b0f8:	2300      	movs	r3, #0
    b0fa:	42b7      	cmp	r7, r6
    b0fc:	415b      	adcs	r3, r3
    b0fe:	3302      	adds	r3, #2
		cmd |= order;
    b100:	200b      	movs	r0, #11
    b102:	aa04      	add	r2, sp, #16
    b104:	4694      	mov	ip, r2
    b106:	4460      	add	r0, ip
    b108:	2210      	movs	r2, #16
    b10a:	4252      	negs	r2, r2
    b10c:	4313      	orrs	r3, r2
    b10e:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    b110:	2101      	movs	r1, #1
    b112:	4b5f      	ldr	r3, [pc, #380]	; (b290 <nm_spi_write_block+0x264>)
    b114:	4798      	blx	r3
    b116:	2800      	cmp	r0, #0
    b118:	d11d      	bne.n	b156 <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    b11a:	465b      	mov	r3, fp
    b11c:	1958      	adds	r0, r3, r5
    b11e:	0021      	movs	r1, r4
    b120:	4b5b      	ldr	r3, [pc, #364]	; (b290 <nm_spi_write_block+0x264>)
    b122:	4798      	blx	r3
    b124:	2800      	cmp	r0, #0
    b126:	d130      	bne.n	b18a <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    b128:	4b5a      	ldr	r3, [pc, #360]	; (b294 <nm_spi_write_block+0x268>)
    b12a:	781b      	ldrb	r3, [r3, #0]
    b12c:	2b00      	cmp	r3, #0
    b12e:	d039      	beq.n	b1a4 <nm_spi_write_block+0x178>
		ix += nbytes;
    b130:	1965      	adds	r5, r4, r5
    b132:	b22d      	sxth	r5, r5
		sz -= nbytes;
    b134:	1b36      	subs	r6, r6, r4
    b136:	b2b6      	uxth	r6, r6
	} while (sz);
    b138:	2e00      	cmp	r6, #0
    b13a:	d053      	beq.n	b1e4 <nm_spi_write_block+0x1b8>
    b13c:	1c34      	adds	r4, r6, #0
    b13e:	42be      	cmp	r6, r7
    b140:	d901      	bls.n	b146 <nm_spi_write_block+0x11a>
    b142:	466b      	mov	r3, sp
    b144:	8adc      	ldrh	r4, [r3, #22]
    b146:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    b148:	2d00      	cmp	r5, #0
    b14a:	d1d5      	bne.n	b0f8 <nm_spi_write_block+0xcc>
				order = 0x3;
    b14c:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    b14e:	42be      	cmp	r6, r7
    b150:	d9d6      	bls.n	b100 <nm_spi_write_block+0xd4>
				order = 0x1;
    b152:	3b02      	subs	r3, #2
    b154:	e7d4      	b.n	b100 <nm_spi_write_block+0xd4>
    b156:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    b158:	22d4      	movs	r2, #212	; 0xd4
    b15a:	0092      	lsls	r2, r2, #2
    b15c:	494e      	ldr	r1, [pc, #312]	; (b298 <nm_spi_write_block+0x26c>)
    b15e:	4842      	ldr	r0, [pc, #264]	; (b268 <nm_spi_write_block+0x23c>)
    b160:	4b42      	ldr	r3, [pc, #264]	; (b26c <nm_spi_write_block+0x240>)
    b162:	4798      	blx	r3
    b164:	484d      	ldr	r0, [pc, #308]	; (b29c <nm_spi_write_block+0x270>)
    b166:	4b4e      	ldr	r3, [pc, #312]	; (b2a0 <nm_spi_write_block+0x274>)
    b168:	4798      	blx	r3
    b16a:	200d      	movs	r0, #13
    b16c:	4b41      	ldr	r3, [pc, #260]	; (b274 <nm_spi_write_block+0x248>)
    b16e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    b170:	22f8      	movs	r2, #248	; 0xf8
    b172:	0092      	lsls	r2, r2, #2
    b174:	493b      	ldr	r1, [pc, #236]	; (b264 <nm_spi_write_block+0x238>)
    b176:	483c      	ldr	r0, [pc, #240]	; (b268 <nm_spi_write_block+0x23c>)
    b178:	4b3c      	ldr	r3, [pc, #240]	; (b26c <nm_spi_write_block+0x240>)
    b17a:	4798      	blx	r3
    b17c:	4849      	ldr	r0, [pc, #292]	; (b2a4 <nm_spi_write_block+0x278>)
    b17e:	4b48      	ldr	r3, [pc, #288]	; (b2a0 <nm_spi_write_block+0x274>)
    b180:	4798      	blx	r3
    b182:	200d      	movs	r0, #13
    b184:	4b3b      	ldr	r3, [pc, #236]	; (b274 <nm_spi_write_block+0x248>)
    b186:	4798      	blx	r3
    b188:	e76d      	b.n	b066 <nm_spi_write_block+0x3a>
    b18a:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    b18c:	4a46      	ldr	r2, [pc, #280]	; (b2a8 <nm_spi_write_block+0x27c>)
    b18e:	4942      	ldr	r1, [pc, #264]	; (b298 <nm_spi_write_block+0x26c>)
    b190:	4835      	ldr	r0, [pc, #212]	; (b268 <nm_spi_write_block+0x23c>)
    b192:	4b36      	ldr	r3, [pc, #216]	; (b26c <nm_spi_write_block+0x240>)
    b194:	4798      	blx	r3
    b196:	4845      	ldr	r0, [pc, #276]	; (b2ac <nm_spi_write_block+0x280>)
    b198:	4b41      	ldr	r3, [pc, #260]	; (b2a0 <nm_spi_write_block+0x274>)
    b19a:	4798      	blx	r3
    b19c:	200d      	movs	r0, #13
    b19e:	4b35      	ldr	r3, [pc, #212]	; (b274 <nm_spi_write_block+0x248>)
    b1a0:	4798      	blx	r3
    b1a2:	e7e5      	b.n	b170 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    b1a4:	2102      	movs	r1, #2
    b1a6:	a807      	add	r0, sp, #28
    b1a8:	4b39      	ldr	r3, [pc, #228]	; (b290 <nm_spi_write_block+0x264>)
    b1aa:	4798      	blx	r3
    b1ac:	2800      	cmp	r0, #0
    b1ae:	d0bf      	beq.n	b130 <nm_spi_write_block+0x104>
    b1b0:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    b1b2:	4a3f      	ldr	r2, [pc, #252]	; (b2b0 <nm_spi_write_block+0x284>)
    b1b4:	4938      	ldr	r1, [pc, #224]	; (b298 <nm_spi_write_block+0x26c>)
    b1b6:	482c      	ldr	r0, [pc, #176]	; (b268 <nm_spi_write_block+0x23c>)
    b1b8:	4b2c      	ldr	r3, [pc, #176]	; (b26c <nm_spi_write_block+0x240>)
    b1ba:	4798      	blx	r3
    b1bc:	483d      	ldr	r0, [pc, #244]	; (b2b4 <nm_spi_write_block+0x288>)
    b1be:	4b38      	ldr	r3, [pc, #224]	; (b2a0 <nm_spi_write_block+0x274>)
    b1c0:	4798      	blx	r3
    b1c2:	200d      	movs	r0, #13
    b1c4:	4b2b      	ldr	r3, [pc, #172]	; (b274 <nm_spi_write_block+0x248>)
    b1c6:	4798      	blx	r3
    b1c8:	e7d2      	b.n	b170 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    b1ca:	223c      	movs	r2, #60	; 0x3c
    b1cc:	32ff      	adds	r2, #255	; 0xff
    b1ce:	493a      	ldr	r1, [pc, #232]	; (b2b8 <nm_spi_write_block+0x28c>)
    b1d0:	4825      	ldr	r0, [pc, #148]	; (b268 <nm_spi_write_block+0x23c>)
    b1d2:	4b26      	ldr	r3, [pc, #152]	; (b26c <nm_spi_write_block+0x240>)
    b1d4:	4798      	blx	r3
    b1d6:	4839      	ldr	r0, [pc, #228]	; (b2bc <nm_spi_write_block+0x290>)
    b1d8:	4b31      	ldr	r3, [pc, #196]	; (b2a0 <nm_spi_write_block+0x274>)
    b1da:	4798      	blx	r3
    b1dc:	200d      	movs	r0, #13
    b1de:	4b25      	ldr	r3, [pc, #148]	; (b274 <nm_spi_write_block+0x248>)
    b1e0:	4798      	blx	r3
    b1e2:	e027      	b.n	b234 <nm_spi_write_block+0x208>
    b1e4:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    b1e6:	4b2b      	ldr	r3, [pc, #172]	; (b294 <nm_spi_write_block+0x268>)
    b1e8:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    b1ea:	1e63      	subs	r3, r4, #1
    b1ec:	419c      	sbcs	r4, r3
    b1ee:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    b1f0:	b2a1      	uxth	r1, r4
    b1f2:	a807      	add	r0, sp, #28
    b1f4:	4b32      	ldr	r3, [pc, #200]	; (b2c0 <nm_spi_write_block+0x294>)
    b1f6:	4798      	blx	r3
    b1f8:	2800      	cmp	r0, #0
    b1fa:	d1e6      	bne.n	b1ca <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    b1fc:	ab08      	add	r3, sp, #32
    b1fe:	191b      	adds	r3, r3, r4
    b200:	3b05      	subs	r3, #5
    b202:	781b      	ldrb	r3, [r3, #0]
    b204:	2b00      	cmp	r3, #0
    b206:	d106      	bne.n	b216 <nm_spi_write_block+0x1ea>
    b208:	ab08      	add	r3, sp, #32
    b20a:	469c      	mov	ip, r3
    b20c:	4464      	add	r4, ip
    b20e:	3c06      	subs	r4, #6
    b210:	7823      	ldrb	r3, [r4, #0]
    b212:	2bc3      	cmp	r3, #195	; 0xc3
    b214:	d01b      	beq.n	b24e <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    b216:	22a1      	movs	r2, #161	; 0xa1
    b218:	0052      	lsls	r2, r2, #1
    b21a:	4927      	ldr	r1, [pc, #156]	; (b2b8 <nm_spi_write_block+0x28c>)
    b21c:	4812      	ldr	r0, [pc, #72]	; (b268 <nm_spi_write_block+0x23c>)
    b21e:	4c13      	ldr	r4, [pc, #76]	; (b26c <nm_spi_write_block+0x240>)
    b220:	47a0      	blx	r4
    b222:	a907      	add	r1, sp, #28
    b224:	788b      	ldrb	r3, [r1, #2]
    b226:	784a      	ldrb	r2, [r1, #1]
    b228:	7809      	ldrb	r1, [r1, #0]
    b22a:	4826      	ldr	r0, [pc, #152]	; (b2c4 <nm_spi_write_block+0x298>)
    b22c:	47a0      	blx	r4
    b22e:	200d      	movs	r0, #13
    b230:	4b10      	ldr	r3, [pc, #64]	; (b274 <nm_spi_write_block+0x248>)
    b232:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    b234:	22fa      	movs	r2, #250	; 0xfa
    b236:	0092      	lsls	r2, r2, #2
    b238:	490a      	ldr	r1, [pc, #40]	; (b264 <nm_spi_write_block+0x238>)
    b23a:	480b      	ldr	r0, [pc, #44]	; (b268 <nm_spi_write_block+0x23c>)
    b23c:	4b0b      	ldr	r3, [pc, #44]	; (b26c <nm_spi_write_block+0x240>)
    b23e:	4798      	blx	r3
    b240:	4818      	ldr	r0, [pc, #96]	; (b2a4 <nm_spi_write_block+0x278>)
    b242:	4b17      	ldr	r3, [pc, #92]	; (b2a0 <nm_spi_write_block+0x274>)
    b244:	4798      	blx	r3
    b246:	200d      	movs	r0, #13
    b248:	4b0a      	ldr	r3, [pc, #40]	; (b274 <nm_spi_write_block+0x248>)
    b24a:	4798      	blx	r3
    b24c:	e70b      	b.n	b066 <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    b24e:	2000      	movs	r0, #0
    b250:	e001      	b.n	b256 <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    b252:	2006      	movs	r0, #6
    b254:	4240      	negs	r0, r0

	return s8Ret;
}
    b256:	b009      	add	sp, #36	; 0x24
    b258:	bc0c      	pop	{r2, r3}
    b25a:	4690      	mov	r8, r2
    b25c:	469b      	mov	fp, r3
    b25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b260:	000003ca 	.word	0x000003ca
    b264:	00013600 	.word	0x00013600
    b268:	00012ee8 	.word	0x00012ee8
    b26c:	00011869 	.word	0x00011869
    b270:	000138b8 	.word	0x000138b8
    b274:	0001189d 	.word	0x0001189d
    b278:	00008afd 	.word	0x00008afd
    b27c:	0000a6f5 	.word	0x0000a6f5
    b280:	0000a895 	.word	0x0000a895
    b284:	000003f2 	.word	0x000003f2
    b288:	0001389c 	.word	0x0001389c
    b28c:	000138e8 	.word	0x000138e8
    b290:	0000a6d5 	.word	0x0000a6d5
    b294:	20000218 	.word	0x20000218
    b298:	000135e0 	.word	0x000135e0
    b29c:	00013920 	.word	0x00013920
    b2a0:	00011985 	.word	0x00011985
    b2a4:	00013a14 	.word	0x00013a14
    b2a8:	00000359 	.word	0x00000359
    b2ac:	00013958 	.word	0x00013958
    b2b0:	00000363 	.word	0x00000363
    b2b4:	0001398c 	.word	0x0001398c
    b2b8:	000135b4 	.word	0x000135b4
    b2bc:	000139c4 	.word	0x000139c4
    b2c0:	0000a875 	.word	0x0000a875
    b2c4:	000139e4 	.word	0x000139e4

0000b2c8 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    b2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2ca:	46de      	mov	lr, fp
    b2cc:	4657      	mov	r7, sl
    b2ce:	464e      	mov	r6, r9
    b2d0:	4645      	mov	r5, r8
    b2d2:	b5e0      	push	{r5, r6, r7, lr}
    b2d4:	b085      	sub	sp, #20
    b2d6:	9001      	str	r0, [sp, #4]
    b2d8:	000e      	movs	r6, r1
    b2da:	9202      	str	r2, [sp, #8]
    b2dc:	001d      	movs	r5, r3
    b2de:	ab0e      	add	r3, sp, #56	; 0x38
    b2e0:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    b2e2:	2c00      	cmp	r4, #0
    b2e4:	d064      	beq.n	b3b0 <Socket_ReadSocketData+0xe8>
    b2e6:	0103      	lsls	r3, r0, #4
    b2e8:	4935      	ldr	r1, [pc, #212]	; (b3c0 <Socket_ReadSocketData+0xf8>)
    b2ea:	585b      	ldr	r3, [r3, r1]
    b2ec:	2b00      	cmp	r3, #0
    b2ee:	d05f      	beq.n	b3b0 <Socket_ReadSocketData+0xe8>
    b2f0:	0101      	lsls	r1, r0, #4
    b2f2:	4b33      	ldr	r3, [pc, #204]	; (b3c0 <Socket_ReadSocketData+0xf8>)
    b2f4:	185b      	adds	r3, r3, r1
    b2f6:	889b      	ldrh	r3, [r3, #4]
    b2f8:	b29b      	uxth	r3, r3
    b2fa:	2b00      	cmp	r3, #0
    b2fc:	d058      	beq.n	b3b0 <Socket_ReadSocketData+0xe8>
    b2fe:	4b30      	ldr	r3, [pc, #192]	; (b3c0 <Socket_ReadSocketData+0xf8>)
    b300:	185b      	adds	r3, r3, r1
    b302:	7a9b      	ldrb	r3, [r3, #10]
    b304:	2b01      	cmp	r3, #1
    b306:	d153      	bne.n	b3b0 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    b308:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    b30a:	4b2d      	ldr	r3, [pc, #180]	; (b3c0 <Socket_ReadSocketData+0xf8>)
    b30c:	469b      	mov	fp, r3
    b30e:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    b310:	465b      	mov	r3, fp
    b312:	220a      	movs	r2, #10
    b314:	4690      	mov	r8, r2
    b316:	44d8      	add	r8, fp
    b318:	468a      	mov	sl, r1
    b31a:	9500      	str	r5, [sp, #0]
    b31c:	9303      	str	r3, [sp, #12]
    b31e:	e015      	b.n	b34c <Socket_ReadSocketData+0x84>
    b320:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    b322:	2301      	movs	r3, #1
    b324:	e01c      	b.n	b360 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    b326:	3301      	adds	r3, #1
    b328:	2200      	movs	r2, #0
    b32a:	2100      	movs	r1, #0
    b32c:	2000      	movs	r0, #0
    b32e:	4c25      	ldr	r4, [pc, #148]	; (b3c4 <Socket_ReadSocketData+0xfc>)
    b330:	47a0      	blx	r4
    b332:	e03d      	b.n	b3b0 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    b334:	4824      	ldr	r0, [pc, #144]	; (b3c8 <Socket_ReadSocketData+0x100>)
    b336:	4d25      	ldr	r5, [pc, #148]	; (b3cc <Socket_ReadSocketData+0x104>)
    b338:	47a8      	blx	r5
    b33a:	0021      	movs	r1, r4
    b33c:	4824      	ldr	r0, [pc, #144]	; (b3d0 <Socket_ReadSocketData+0x108>)
    b33e:	47a8      	blx	r5
    b340:	200d      	movs	r0, #13
    b342:	4b24      	ldr	r3, [pc, #144]	; (b3d4 <Socket_ReadSocketData+0x10c>)
    b344:	4798      	blx	r3
				break;
    b346:	e033      	b.n	b3b0 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    b348:	2c00      	cmp	r4, #0
    b34a:	d031      	beq.n	b3b0 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    b34c:	465b      	mov	r3, fp
    b34e:	889b      	ldrh	r3, [r3, #4]
    b350:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    b352:	b21b      	sxth	r3, r3
    b354:	2b00      	cmp	r3, #0
    b356:	dde3      	ble.n	b320 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    b358:	9b03      	ldr	r3, [sp, #12]
    b35a:	889d      	ldrh	r5, [r3, #4]
    b35c:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    b35e:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    b360:	4a17      	ldr	r2, [pc, #92]	; (b3c0 <Socket_ReadSocketData+0xf8>)
    b362:	4651      	mov	r1, sl
    b364:	5889      	ldr	r1, [r1, r2]
    b366:	002a      	movs	r2, r5
    b368:	9800      	ldr	r0, [sp, #0]
    b36a:	4f16      	ldr	r7, [pc, #88]	; (b3c4 <Socket_ReadSocketData+0xfc>)
    b36c:	47b8      	blx	r7
    b36e:	2800      	cmp	r0, #0
    b370:	d1e0      	bne.n	b334 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    b372:	4b13      	ldr	r3, [pc, #76]	; (b3c0 <Socket_ReadSocketData+0xf8>)
    b374:	4652      	mov	r2, sl
    b376:	58d3      	ldr	r3, [r2, r3]
    b378:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    b37a:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    b37c:	88f3      	ldrh	r3, [r6, #6]
    b37e:	1b5b      	subs	r3, r3, r5
    b380:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    b382:	4b15      	ldr	r3, [pc, #84]	; (b3d8 <Socket_ReadSocketData+0x110>)
    b384:	681b      	ldr	r3, [r3, #0]
    b386:	2b00      	cmp	r3, #0
    b388:	d005      	beq.n	b396 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    b38a:	4b13      	ldr	r3, [pc, #76]	; (b3d8 <Socket_ReadSocketData+0x110>)
    b38c:	681b      	ldr	r3, [r3, #0]
    b38e:	0032      	movs	r2, r6
    b390:	9902      	ldr	r1, [sp, #8]
    b392:	9801      	ldr	r0, [sp, #4]
    b394:	4798      	blx	r3
				u16ReadCount -= u16Read;
    b396:	1b64      	subs	r4, r4, r5
    b398:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    b39a:	9b00      	ldr	r3, [sp, #0]
    b39c:	469c      	mov	ip, r3
    b39e:	44ac      	add	ip, r5
    b3a0:	4663      	mov	r3, ip
    b3a2:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    b3a4:	4643      	mov	r3, r8
    b3a6:	781b      	ldrb	r3, [r3, #0]
    b3a8:	2b00      	cmp	r3, #0
    b3aa:	d1cd      	bne.n	b348 <Socket_ReadSocketData+0x80>
    b3ac:	2c00      	cmp	r4, #0
    b3ae:	d1ba      	bne.n	b326 <Socket_ReadSocketData+0x5e>
	}
}
    b3b0:	b005      	add	sp, #20
    b3b2:	bc3c      	pop	{r2, r3, r4, r5}
    b3b4:	4690      	mov	r8, r2
    b3b6:	4699      	mov	r9, r3
    b3b8:	46a2      	mov	sl, r4
    b3ba:	46ab      	mov	fp, r5
    b3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3be:	46c0      	nop			; (mov r8, r8)
    b3c0:	200004d4 	.word	0x200004d4
    b3c4:	0000964d 	.word	0x0000964d
    b3c8:	00013218 	.word	0x00013218
    b3cc:	00011869 	.word	0x00011869
    b3d0:	00013c7c 	.word	0x00013c7c
    b3d4:	0001189d 	.word	0x0001189d
    b3d8:	20000584 	.word	0x20000584

0000b3dc <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    b3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3de:	46d6      	mov	lr, sl
    b3e0:	464f      	mov	r7, r9
    b3e2:	4646      	mov	r6, r8
    b3e4:	b5c0      	push	{r6, r7, lr}
    b3e6:	b09a      	sub	sp, #104	; 0x68
    b3e8:	000d      	movs	r5, r1
    b3ea:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    b3ec:	2841      	cmp	r0, #65	; 0x41
    b3ee:	d039      	beq.n	b464 <m2m_ip_cb+0x88>
    b3f0:	2854      	cmp	r0, #84	; 0x54
    b3f2:	d037      	beq.n	b464 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    b3f4:	2842      	cmp	r0, #66	; 0x42
    b3f6:	d053      	beq.n	b4a0 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    b3f8:	2843      	cmp	r0, #67	; 0x43
    b3fa:	d06a      	beq.n	b4d2 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    b3fc:	2844      	cmp	r0, #68	; 0x44
    b3fe:	d100      	bne.n	b402 <m2m_ip_cb+0x26>
    b400:	e0af      	b.n	b562 <m2m_ip_cb+0x186>
    b402:	284b      	cmp	r0, #75	; 0x4b
    b404:	d100      	bne.n	b408 <m2m_ip_cb+0x2c>
    b406:	e0ac      	b.n	b562 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    b408:	284a      	cmp	r0, #74	; 0x4a
    b40a:	d100      	bne.n	b40e <m2m_ip_cb+0x32>
    b40c:	e0cf      	b.n	b5ae <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    b40e:	2846      	cmp	r0, #70	; 0x46
    b410:	d100      	bne.n	b414 <m2m_ip_cb+0x38>
    b412:	e0e5      	b.n	b5e0 <m2m_ip_cb+0x204>
    b414:	2848      	cmp	r0, #72	; 0x48
    b416:	d100      	bne.n	b41a <m2m_ip_cb+0x3e>
    b418:	e10e      	b.n	b638 <m2m_ip_cb+0x25c>
    b41a:	284d      	cmp	r0, #77	; 0x4d
    b41c:	d100      	bne.n	b420 <m2m_ip_cb+0x44>
    b41e:	e0dc      	b.n	b5da <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    b420:	2845      	cmp	r0, #69	; 0x45
    b422:	d100      	bne.n	b426 <m2m_ip_cb+0x4a>
    b424:	e12c      	b.n	b680 <m2m_ip_cb+0x2a4>
    b426:	2847      	cmp	r0, #71	; 0x47
    b428:	d100      	bne.n	b42c <m2m_ip_cb+0x50>
    b42a:	e14d      	b.n	b6c8 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    b42c:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    b42e:	284c      	cmp	r0, #76	; 0x4c
    b430:	d100      	bne.n	b434 <m2m_ip_cb+0x58>
    b432:	e126      	b.n	b682 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    b434:	2852      	cmp	r0, #82	; 0x52
    b436:	d12d      	bne.n	b494 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    b438:	2301      	movs	r3, #1
    b43a:	2214      	movs	r2, #20
    b43c:	a909      	add	r1, sp, #36	; 0x24
    b43e:	0020      	movs	r0, r4
    b440:	4ca2      	ldr	r4, [pc, #648]	; (b6cc <m2m_ip_cb+0x2f0>)
    b442:	47a0      	blx	r4
    b444:	2800      	cmp	r0, #0
    b446:	d125      	bne.n	b494 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    b448:	4ba1      	ldr	r3, [pc, #644]	; (b6d0 <m2m_ip_cb+0x2f4>)
    b44a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b44c:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    b44e:	681b      	ldr	r3, [r3, #0]
    b450:	2b00      	cmp	r3, #0
    b452:	d01f      	beq.n	b494 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    b454:	4b9e      	ldr	r3, [pc, #632]	; (b6d0 <m2m_ip_cb+0x2f4>)
    b456:	681c      	ldr	r4, [r3, #0]
    b458:	ab09      	add	r3, sp, #36	; 0x24
    b45a:	7c1a      	ldrb	r2, [r3, #16]
    b45c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b45e:	9809      	ldr	r0, [sp, #36]	; 0x24
    b460:	47a0      	blx	r4
			}
		}
	}
}
    b462:	e017      	b.n	b494 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    b464:	2300      	movs	r3, #0
    b466:	2204      	movs	r2, #4
    b468:	a909      	add	r1, sp, #36	; 0x24
    b46a:	0020      	movs	r0, r4
    b46c:	4c97      	ldr	r4, [pc, #604]	; (b6cc <m2m_ip_cb+0x2f0>)
    b46e:	47a0      	blx	r4
    b470:	2800      	cmp	r0, #0
    b472:	d10f      	bne.n	b494 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    b474:	ab09      	add	r3, sp, #36	; 0x24
    b476:	785a      	ldrb	r2, [r3, #1]
    b478:	ab05      	add	r3, sp, #20
    b47a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    b47c:	4b95      	ldr	r3, [pc, #596]	; (b6d4 <m2m_ip_cb+0x2f8>)
    b47e:	681b      	ldr	r3, [r3, #0]
    b480:	2b00      	cmp	r3, #0
    b482:	d007      	beq.n	b494 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    b484:	4b93      	ldr	r3, [pc, #588]	; (b6d4 <m2m_ip_cb+0x2f8>)
    b486:	681b      	ldr	r3, [r3, #0]
    b488:	aa09      	add	r2, sp, #36	; 0x24
    b48a:	2000      	movs	r0, #0
    b48c:	5610      	ldrsb	r0, [r2, r0]
    b48e:	aa05      	add	r2, sp, #20
    b490:	2101      	movs	r1, #1
    b492:	4798      	blx	r3
}
    b494:	b01a      	add	sp, #104	; 0x68
    b496:	bc1c      	pop	{r2, r3, r4}
    b498:	4690      	mov	r8, r2
    b49a:	4699      	mov	r9, r3
    b49c:	46a2      	mov	sl, r4
    b49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    b4a0:	2300      	movs	r3, #0
    b4a2:	2204      	movs	r2, #4
    b4a4:	a909      	add	r1, sp, #36	; 0x24
    b4a6:	0020      	movs	r0, r4
    b4a8:	4c88      	ldr	r4, [pc, #544]	; (b6cc <m2m_ip_cb+0x2f0>)
    b4aa:	47a0      	blx	r4
    b4ac:	2800      	cmp	r0, #0
    b4ae:	d1f1      	bne.n	b494 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    b4b0:	ab09      	add	r3, sp, #36	; 0x24
    b4b2:	785a      	ldrb	r2, [r3, #1]
    b4b4:	ab05      	add	r3, sp, #20
    b4b6:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    b4b8:	4b86      	ldr	r3, [pc, #536]	; (b6d4 <m2m_ip_cb+0x2f8>)
    b4ba:	681b      	ldr	r3, [r3, #0]
    b4bc:	2b00      	cmp	r3, #0
    b4be:	d0e9      	beq.n	b494 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    b4c0:	4b84      	ldr	r3, [pc, #528]	; (b6d4 <m2m_ip_cb+0x2f8>)
    b4c2:	681b      	ldr	r3, [r3, #0]
    b4c4:	aa09      	add	r2, sp, #36	; 0x24
    b4c6:	2000      	movs	r0, #0
    b4c8:	5610      	ldrsb	r0, [r2, r0]
    b4ca:	aa05      	add	r2, sp, #20
    b4cc:	2102      	movs	r1, #2
    b4ce:	4798      	blx	r3
    b4d0:	e7e0      	b.n	b494 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    b4d2:	2300      	movs	r3, #0
    b4d4:	220c      	movs	r2, #12
    b4d6:	a905      	add	r1, sp, #20
    b4d8:	0020      	movs	r0, r4
    b4da:	4c7c      	ldr	r4, [pc, #496]	; (b6cc <m2m_ip_cb+0x2f0>)
    b4dc:	47a0      	blx	r4
    b4de:	2800      	cmp	r0, #0
    b4e0:	d1d8      	bne.n	b494 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    b4e2:	ab05      	add	r3, sp, #20
    b4e4:	2209      	movs	r2, #9
    b4e6:	569a      	ldrsb	r2, [r3, r2]
    b4e8:	2a00      	cmp	r2, #0
    b4ea:	db24      	blt.n	b536 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    b4ec:	0018      	movs	r0, r3
    b4ee:	2108      	movs	r1, #8
    b4f0:	5659      	ldrsb	r1, [r3, r1]
    b4f2:	4b79      	ldr	r3, [pc, #484]	; (b6d8 <m2m_ip_cb+0x2fc>)
    b4f4:	0109      	lsls	r1, r1, #4
    b4f6:	1859      	adds	r1, r3, r1
    b4f8:	7ac9      	ldrb	r1, [r1, #11]
    b4fa:	b2c9      	uxtb	r1, r1
    b4fc:	0114      	lsls	r4, r2, #4
    b4fe:	191b      	adds	r3, r3, r4
    b500:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    b502:	2101      	movs	r1, #1
    b504:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    b506:	8941      	ldrh	r1, [r0, #10]
    b508:	3908      	subs	r1, #8
    b50a:	b289      	uxth	r1, r1
    b50c:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    b50e:	4973      	ldr	r1, [pc, #460]	; (b6dc <m2m_ip_cb+0x300>)
    b510:	880b      	ldrh	r3, [r1, #0]
    b512:	3301      	adds	r3, #1
    b514:	b29b      	uxth	r3, r3
    b516:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    b518:	880b      	ldrh	r3, [r1, #0]
    b51a:	b29b      	uxth	r3, r3
    b51c:	2b00      	cmp	r3, #0
    b51e:	d103      	bne.n	b528 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    b520:	880b      	ldrh	r3, [r1, #0]
    b522:	3301      	adds	r3, #1
    b524:	b29b      	uxth	r3, r3
    b526:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    b528:	4b6c      	ldr	r3, [pc, #432]	; (b6dc <m2m_ip_cb+0x300>)
    b52a:	8819      	ldrh	r1, [r3, #0]
    b52c:	b289      	uxth	r1, r1
    b52e:	0110      	lsls	r0, r2, #4
    b530:	4b69      	ldr	r3, [pc, #420]	; (b6d8 <m2m_ip_cb+0x2fc>)
    b532:	181b      	adds	r3, r3, r0
    b534:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    b536:	ab09      	add	r3, sp, #36	; 0x24
    b538:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    b53a:	2202      	movs	r2, #2
    b53c:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    b53e:	aa05      	add	r2, sp, #20
    b540:	8851      	ldrh	r1, [r2, #2]
    b542:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    b544:	9a06      	ldr	r2, [sp, #24]
    b546:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    b548:	4b62      	ldr	r3, [pc, #392]	; (b6d4 <m2m_ip_cb+0x2f8>)
    b54a:	681b      	ldr	r3, [r3, #0]
    b54c:	2b00      	cmp	r3, #0
    b54e:	d0a1      	beq.n	b494 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    b550:	4b60      	ldr	r3, [pc, #384]	; (b6d4 <m2m_ip_cb+0x2f8>)
    b552:	681b      	ldr	r3, [r3, #0]
    b554:	aa05      	add	r2, sp, #20
    b556:	2008      	movs	r0, #8
    b558:	5610      	ldrsb	r0, [r2, r0]
    b55a:	aa09      	add	r2, sp, #36	; 0x24
    b55c:	2104      	movs	r1, #4
    b55e:	4798      	blx	r3
    b560:	e798      	b.n	b494 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    b562:	2300      	movs	r3, #0
    b564:	2204      	movs	r2, #4
    b566:	a909      	add	r1, sp, #36	; 0x24
    b568:	0020      	movs	r0, r4
    b56a:	4c58      	ldr	r4, [pc, #352]	; (b6cc <m2m_ip_cb+0x2f0>)
    b56c:	47a0      	blx	r4
    b56e:	2800      	cmp	r0, #0
    b570:	d000      	beq.n	b574 <m2m_ip_cb+0x198>
    b572:	e78f      	b.n	b494 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    b574:	ab09      	add	r3, sp, #36	; 0x24
    b576:	2000      	movs	r0, #0
    b578:	5618      	ldrsb	r0, [r3, r0]
    b57a:	aa05      	add	r2, sp, #20
    b57c:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    b57e:	785b      	ldrb	r3, [r3, #1]
    b580:	b25b      	sxtb	r3, r3
    b582:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    b584:	2b00      	cmp	r3, #0
    b586:	d107      	bne.n	b598 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    b588:	ab09      	add	r3, sp, #36	; 0x24
    b58a:	885b      	ldrh	r3, [r3, #2]
    b58c:	3b08      	subs	r3, #8
    b58e:	b29b      	uxth	r3, r3
    b590:	0101      	lsls	r1, r0, #4
    b592:	4a51      	ldr	r2, [pc, #324]	; (b6d8 <m2m_ip_cb+0x2fc>)
    b594:	1852      	adds	r2, r2, r1
    b596:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    b598:	4b4e      	ldr	r3, [pc, #312]	; (b6d4 <m2m_ip_cb+0x2f8>)
    b59a:	681b      	ldr	r3, [r3, #0]
    b59c:	2b00      	cmp	r3, #0
    b59e:	d100      	bne.n	b5a2 <m2m_ip_cb+0x1c6>
    b5a0:	e778      	b.n	b494 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    b5a2:	4b4c      	ldr	r3, [pc, #304]	; (b6d4 <m2m_ip_cb+0x2f8>)
    b5a4:	681b      	ldr	r3, [r3, #0]
    b5a6:	aa05      	add	r2, sp, #20
    b5a8:	2105      	movs	r1, #5
    b5aa:	4798      	blx	r3
	{
    b5ac:	e772      	b.n	b494 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    b5ae:	2300      	movs	r3, #0
    b5b0:	2244      	movs	r2, #68	; 0x44
    b5b2:	a909      	add	r1, sp, #36	; 0x24
    b5b4:	0020      	movs	r0, r4
    b5b6:	4c45      	ldr	r4, [pc, #276]	; (b6cc <m2m_ip_cb+0x2f0>)
    b5b8:	47a0      	blx	r4
    b5ba:	2800      	cmp	r0, #0
    b5bc:	d000      	beq.n	b5c0 <m2m_ip_cb+0x1e4>
    b5be:	e769      	b.n	b494 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    b5c0:	4b47      	ldr	r3, [pc, #284]	; (b6e0 <m2m_ip_cb+0x304>)
    b5c2:	681b      	ldr	r3, [r3, #0]
    b5c4:	2b00      	cmp	r3, #0
    b5c6:	d100      	bne.n	b5ca <m2m_ip_cb+0x1ee>
    b5c8:	e764      	b.n	b494 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    b5ca:	4b45      	ldr	r3, [pc, #276]	; (b6e0 <m2m_ip_cb+0x304>)
    b5cc:	681b      	ldr	r3, [r3, #0]
    b5ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
    b5d0:	9203      	str	r2, [sp, #12]
    b5d2:	0011      	movs	r1, r2
    b5d4:	a809      	add	r0, sp, #36	; 0x24
    b5d6:	4798      	blx	r3
    b5d8:	e75c      	b.n	b494 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    b5da:	2306      	movs	r3, #6
    b5dc:	469a      	mov	sl, r3
    b5de:	e001      	b.n	b5e4 <m2m_ip_cb+0x208>
    b5e0:	2306      	movs	r3, #6
    b5e2:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    b5e4:	2300      	movs	r3, #0
    b5e6:	2210      	movs	r2, #16
    b5e8:	a905      	add	r1, sp, #20
    b5ea:	0020      	movs	r0, r4
    b5ec:	4f37      	ldr	r7, [pc, #220]	; (b6cc <m2m_ip_cb+0x2f0>)
    b5ee:	47b8      	blx	r7
    b5f0:	2800      	cmp	r0, #0
    b5f2:	d000      	beq.n	b5f6 <m2m_ip_cb+0x21a>
    b5f4:	e74e      	b.n	b494 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    b5f6:	aa05      	add	r2, sp, #20
    b5f8:	200c      	movs	r0, #12
    b5fa:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    b5fc:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    b5fe:	0107      	lsls	r7, r0, #4
    b600:	4935      	ldr	r1, [pc, #212]	; (b6d8 <m2m_ip_cb+0x2fc>)
    b602:	19c9      	adds	r1, r1, r7
    b604:	2700      	movs	r7, #0
    b606:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    b608:	2608      	movs	r6, #8
    b60a:	5f97      	ldrsh	r7, [r2, r6]
    b60c:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    b60e:	8957      	ldrh	r7, [r2, #10]
    b610:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    b612:	af09      	add	r7, sp, #36	; 0x24
    b614:	8856      	ldrh	r6, [r2, #2]
    b616:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    b618:	9a06      	ldr	r2, [sp, #24]
    b61a:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    b61c:	88ca      	ldrh	r2, [r1, #6]
    b61e:	b292      	uxth	r2, r2
    b620:	4293      	cmp	r3, r2
    b622:	d00c      	beq.n	b63e <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    b624:	2d10      	cmp	r5, #16
    b626:	d800      	bhi.n	b62a <m2m_ip_cb+0x24e>
    b628:	e734      	b.n	b494 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    b62a:	2301      	movs	r3, #1
    b62c:	2200      	movs	r2, #0
    b62e:	2100      	movs	r1, #0
    b630:	2000      	movs	r0, #0
    b632:	4c26      	ldr	r4, [pc, #152]	; (b6cc <m2m_ip_cb+0x2f0>)
    b634:	47a0      	blx	r4
	{
    b636:	e72d      	b.n	b494 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    b638:	2309      	movs	r3, #9
    b63a:	469a      	mov	sl, r3
    b63c:	e7d2      	b.n	b5e4 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    b63e:	4643      	mov	r3, r8
    b640:	2b00      	cmp	r3, #0
    b642:	dd01      	ble.n	b648 <m2m_ip_cb+0x26c>
    b644:	45a8      	cmp	r8, r5
    b646:	db0f      	blt.n	b668 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    b648:	ab09      	add	r3, sp, #36	; 0x24
    b64a:	4642      	mov	r2, r8
    b64c:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    b64e:	2300      	movs	r3, #0
    b650:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    b652:	4b20      	ldr	r3, [pc, #128]	; (b6d4 <m2m_ip_cb+0x2f8>)
    b654:	681b      	ldr	r3, [r3, #0]
    b656:	2b00      	cmp	r3, #0
    b658:	d100      	bne.n	b65c <m2m_ip_cb+0x280>
    b65a:	e71b      	b.n	b494 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    b65c:	4b1d      	ldr	r3, [pc, #116]	; (b6d4 <m2m_ip_cb+0x2f8>)
    b65e:	681b      	ldr	r3, [r3, #0]
    b660:	aa09      	add	r2, sp, #36	; 0x24
    b662:	4651      	mov	r1, sl
    b664:	4798      	blx	r3
    b666:	e715      	b.n	b494 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    b668:	0023      	movs	r3, r4
    b66a:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    b66c:	4642      	mov	r2, r8
    b66e:	4669      	mov	r1, sp
    b670:	818a      	strh	r2, [r1, #12]
    b672:	898a      	ldrh	r2, [r1, #12]
    b674:	9200      	str	r2, [sp, #0]
    b676:	4652      	mov	r2, sl
    b678:	0039      	movs	r1, r7
    b67a:	4c1a      	ldr	r4, [pc, #104]	; (b6e4 <m2m_ip_cb+0x308>)
    b67c:	47a0      	blx	r4
    b67e:	e709      	b.n	b494 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    b680:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    b682:	2300      	movs	r3, #0
    b684:	2208      	movs	r2, #8
    b686:	a909      	add	r1, sp, #36	; 0x24
    b688:	0020      	movs	r0, r4
    b68a:	4c10      	ldr	r4, [pc, #64]	; (b6cc <m2m_ip_cb+0x2f0>)
    b68c:	47a0      	blx	r4
    b68e:	2800      	cmp	r0, #0
    b690:	d000      	beq.n	b694 <m2m_ip_cb+0x2b8>
    b692:	e6ff      	b.n	b494 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    b694:	ab09      	add	r3, sp, #36	; 0x24
    b696:	2000      	movs	r0, #0
    b698:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    b69a:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    b69c:	8859      	ldrh	r1, [r3, #2]
    b69e:	ab05      	add	r3, sp, #20
    b6a0:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    b6a2:	0101      	lsls	r1, r0, #4
    b6a4:	4b0c      	ldr	r3, [pc, #48]	; (b6d8 <m2m_ip_cb+0x2fc>)
    b6a6:	185b      	adds	r3, r3, r1
    b6a8:	88db      	ldrh	r3, [r3, #6]
    b6aa:	b29b      	uxth	r3, r3
    b6ac:	429a      	cmp	r2, r3
    b6ae:	d000      	beq.n	b6b2 <m2m_ip_cb+0x2d6>
    b6b0:	e6f0      	b.n	b494 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    b6b2:	4b08      	ldr	r3, [pc, #32]	; (b6d4 <m2m_ip_cb+0x2f8>)
    b6b4:	681b      	ldr	r3, [r3, #0]
    b6b6:	2b00      	cmp	r3, #0
    b6b8:	d100      	bne.n	b6bc <m2m_ip_cb+0x2e0>
    b6ba:	e6eb      	b.n	b494 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    b6bc:	4b05      	ldr	r3, [pc, #20]	; (b6d4 <m2m_ip_cb+0x2f8>)
    b6be:	681b      	ldr	r3, [r3, #0]
    b6c0:	aa05      	add	r2, sp, #20
    b6c2:	0029      	movs	r1, r5
    b6c4:	4798      	blx	r3
	{
    b6c6:	e6e5      	b.n	b494 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    b6c8:	2508      	movs	r5, #8
    b6ca:	e7da      	b.n	b682 <m2m_ip_cb+0x2a6>
    b6cc:	0000964d 	.word	0x0000964d
    b6d0:	20000588 	.word	0x20000588
    b6d4:	20000584 	.word	0x20000584
    b6d8:	200004d4 	.word	0x200004d4
    b6dc:	2000021a 	.word	0x2000021a
    b6e0:	2000058c 	.word	0x2000058c
    b6e4:	0000b2c9 	.word	0x0000b2c9

0000b6e8 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    b6e8:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    b6ea:	4b0a      	ldr	r3, [pc, #40]	; (b714 <socketInit+0x2c>)
    b6ec:	781b      	ldrb	r3, [r3, #0]
    b6ee:	2b00      	cmp	r3, #0
    b6f0:	d000      	beq.n	b6f4 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    b6f2:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    b6f4:	22b0      	movs	r2, #176	; 0xb0
    b6f6:	2100      	movs	r1, #0
    b6f8:	4807      	ldr	r0, [pc, #28]	; (b718 <socketInit+0x30>)
    b6fa:	4b08      	ldr	r3, [pc, #32]	; (b71c <socketInit+0x34>)
    b6fc:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    b6fe:	4908      	ldr	r1, [pc, #32]	; (b720 <socketInit+0x38>)
    b700:	2002      	movs	r0, #2
    b702:	4b08      	ldr	r3, [pc, #32]	; (b724 <socketInit+0x3c>)
    b704:	4798      	blx	r3
		gbSocketInit	= 1;
    b706:	2201      	movs	r2, #1
    b708:	4b02      	ldr	r3, [pc, #8]	; (b714 <socketInit+0x2c>)
    b70a:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    b70c:	2200      	movs	r2, #0
    b70e:	4b06      	ldr	r3, [pc, #24]	; (b728 <socketInit+0x40>)
    b710:	801a      	strh	r2, [r3, #0]
}
    b712:	e7ee      	b.n	b6f2 <socketInit+0xa>
    b714:	20000219 	.word	0x20000219
    b718:	200004d4 	.word	0x200004d4
    b71c:	00008f09 	.word	0x00008f09
    b720:	0000b3dd 	.word	0x0000b3dd
    b724:	00009739 	.word	0x00009739
    b728:	2000021a 	.word	0x2000021a

0000b72c <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    b72c:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    b72e:	22b0      	movs	r2, #176	; 0xb0
    b730:	2100      	movs	r1, #0
    b732:	4807      	ldr	r0, [pc, #28]	; (b750 <socketDeinit+0x24>)
    b734:	4b07      	ldr	r3, [pc, #28]	; (b754 <socketDeinit+0x28>)
    b736:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    b738:	2100      	movs	r1, #0
    b73a:	2002      	movs	r0, #2
    b73c:	4b06      	ldr	r3, [pc, #24]	; (b758 <socketDeinit+0x2c>)
    b73e:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    b740:	2300      	movs	r3, #0
    b742:	4a06      	ldr	r2, [pc, #24]	; (b75c <socketDeinit+0x30>)
    b744:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    b746:	4a06      	ldr	r2, [pc, #24]	; (b760 <socketDeinit+0x34>)
    b748:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    b74a:	4a06      	ldr	r2, [pc, #24]	; (b764 <socketDeinit+0x38>)
    b74c:	7013      	strb	r3, [r2, #0]
}
    b74e:	bd10      	pop	{r4, pc}
    b750:	200004d4 	.word	0x200004d4
    b754:	00008f09 	.word	0x00008f09
    b758:	00009739 	.word	0x00009739
    b75c:	20000584 	.word	0x20000584
    b760:	2000058c 	.word	0x2000058c
    b764:	20000219 	.word	0x20000219

0000b768 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    b768:	4b02      	ldr	r3, [pc, #8]	; (b774 <registerSocketCallback+0xc>)
    b76a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    b76c:	4b02      	ldr	r3, [pc, #8]	; (b778 <registerSocketCallback+0x10>)
    b76e:	6019      	str	r1, [r3, #0]
}
    b770:	4770      	bx	lr
    b772:	46c0      	nop			; (mov r8, r8)
    b774:	20000584 	.word	0x20000584
    b778:	2000058c 	.word	0x2000058c

0000b77c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    b77c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b77e:	46d6      	mov	lr, sl
    b780:	4647      	mov	r7, r8
    b782:	b580      	push	{r7, lr}
    b784:	b089      	sub	sp, #36	; 0x24
    b786:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    b788:	2802      	cmp	r0, #2
    b78a:	d000      	beq.n	b78e <socket+0x12>
    b78c:	e09c      	b.n	b8c8 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    b78e:	2901      	cmp	r1, #1
    b790:	d00a      	beq.n	b7a8 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    b792:	2902      	cmp	r1, #2
    b794:	d100      	bne.n	b798 <socket+0x1c>
    b796:	e070      	b.n	b87a <socket+0xfe>
	SOCKET					sock = -1;
    b798:	2501      	movs	r5, #1
    b79a:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    b79c:	0028      	movs	r0, r5
    b79e:	b009      	add	sp, #36	; 0x24
    b7a0:	bc0c      	pop	{r2, r3}
    b7a2:	4690      	mov	r8, r2
    b7a4:	469a      	mov	sl, r3
    b7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    b7a8:	4c49      	ldr	r4, [pc, #292]	; (b8d0 <socket+0x154>)
    b7aa:	7827      	ldrb	r7, [r4, #0]
    b7ac:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    b7ae:	7826      	ldrb	r6, [r4, #0]
    b7b0:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    b7b2:	7820      	ldrb	r0, [r4, #0]
    b7b4:	3001      	adds	r0, #1
    b7b6:	3106      	adds	r1, #6
    b7b8:	4b46      	ldr	r3, [pc, #280]	; (b8d4 <socket+0x158>)
    b7ba:	4798      	blx	r3
    b7bc:	b2c9      	uxtb	r1, r1
    b7be:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    b7c0:	0132      	lsls	r2, r6, #4
    b7c2:	4b45      	ldr	r3, [pc, #276]	; (b8d8 <socket+0x15c>)
    b7c4:	189b      	adds	r3, r3, r2
    b7c6:	7a9b      	ldrb	r3, [r3, #10]
    b7c8:	2506      	movs	r5, #6
    b7ca:	2b00      	cmp	r3, #0
    b7cc:	d018      	beq.n	b800 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    b7ce:	4e40      	ldr	r6, [pc, #256]	; (b8d0 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    b7d0:	4b40      	ldr	r3, [pc, #256]	; (b8d4 <socket+0x158>)
    b7d2:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    b7d4:	4b40      	ldr	r3, [pc, #256]	; (b8d8 <socket+0x15c>)
    b7d6:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    b7d8:	7837      	ldrb	r7, [r6, #0]
    b7da:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    b7dc:	7834      	ldrb	r4, [r6, #0]
    b7de:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    b7e0:	7830      	ldrb	r0, [r6, #0]
    b7e2:	3001      	adds	r0, #1
    b7e4:	2107      	movs	r1, #7
    b7e6:	47d0      	blx	sl
    b7e8:	b2c9      	uxtb	r1, r1
    b7ea:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    b7ec:	0123      	lsls	r3, r4, #4
    b7ee:	4443      	add	r3, r8
    b7f0:	7a9b      	ldrb	r3, [r3, #10]
    b7f2:	2b00      	cmp	r3, #0
    b7f4:	d007      	beq.n	b806 <socket+0x8a>
    b7f6:	3d01      	subs	r5, #1
    b7f8:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    b7fa:	2d00      	cmp	r5, #0
    b7fc:	d1ec      	bne.n	b7d8 <socket+0x5c>
    b7fe:	e7cb      	b.n	b798 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    b800:	4b35      	ldr	r3, [pc, #212]	; (b8d8 <socket+0x15c>)
    b802:	18d4      	adds	r4, r2, r3
    b804:	e002      	b.n	b80c <socket+0x90>
    b806:	0124      	lsls	r4, r4, #4
    b808:	4b33      	ldr	r3, [pc, #204]	; (b8d8 <socket+0x15c>)
    b80a:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    b80c:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    b80e:	2d00      	cmp	r5, #0
    b810:	dbc4      	blt.n	b79c <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    b812:	2210      	movs	r2, #16
    b814:	2100      	movs	r1, #0
    b816:	0020      	movs	r0, r4
    b818:	4b30      	ldr	r3, [pc, #192]	; (b8dc <socket+0x160>)
    b81a:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    b81c:	2301      	movs	r3, #1
    b81e:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    b820:	4a2f      	ldr	r2, [pc, #188]	; (b8e0 <socket+0x164>)
    b822:	8813      	ldrh	r3, [r2, #0]
    b824:	3301      	adds	r3, #1
    b826:	b29b      	uxth	r3, r3
    b828:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    b82a:	8813      	ldrh	r3, [r2, #0]
    b82c:	b29b      	uxth	r3, r3
    b82e:	2b00      	cmp	r3, #0
    b830:	d103      	bne.n	b83a <socket+0xbe>
				++gu16SessionID;
    b832:	8813      	ldrh	r3, [r2, #0]
    b834:	3301      	adds	r3, #1
    b836:	b29b      	uxth	r3, r3
    b838:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    b83a:	4e29      	ldr	r6, [pc, #164]	; (b8e0 <socket+0x164>)
    b83c:	8833      	ldrh	r3, [r6, #0]
    b83e:	b29b      	uxth	r3, r3
    b840:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    b842:	4828      	ldr	r0, [pc, #160]	; (b8e4 <socket+0x168>)
    b844:	4f28      	ldr	r7, [pc, #160]	; (b8e8 <socket+0x16c>)
    b846:	47b8      	blx	r7
    b848:	8832      	ldrh	r2, [r6, #0]
    b84a:	b292      	uxth	r2, r2
    b84c:	0029      	movs	r1, r5
    b84e:	4827      	ldr	r0, [pc, #156]	; (b8ec <socket+0x170>)
    b850:	47b8      	blx	r7
    b852:	200d      	movs	r0, #13
    b854:	4b26      	ldr	r3, [pc, #152]	; (b8f0 <socket+0x174>)
    b856:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    b858:	9b05      	ldr	r3, [sp, #20]
    b85a:	07db      	lsls	r3, r3, #31
    b85c:	d59e      	bpl.n	b79c <socket+0x20>
				strSSLCreate.sslSock = sock;
    b85e:	aa07      	add	r2, sp, #28
    b860:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    b862:	2321      	movs	r3, #33	; 0x21
    b864:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    b866:	2300      	movs	r3, #0
    b868:	9302      	str	r3, [sp, #8]
    b86a:	9301      	str	r3, [sp, #4]
    b86c:	9300      	str	r3, [sp, #0]
    b86e:	3304      	adds	r3, #4
    b870:	2150      	movs	r1, #80	; 0x50
    b872:	2002      	movs	r0, #2
    b874:	4c1f      	ldr	r4, [pc, #124]	; (b8f4 <socket+0x178>)
    b876:	47a0      	blx	r4
    b878:	e790      	b.n	b79c <socket+0x20>
				u8SockID		= u8NextUdpSock;
    b87a:	4b1f      	ldr	r3, [pc, #124]	; (b8f8 <socket+0x17c>)
    b87c:	781d      	ldrb	r5, [r3, #0]
    b87e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    b880:	781c      	ldrb	r4, [r3, #0]
    b882:	0124      	lsls	r4, r4, #4
    b884:	4a1d      	ldr	r2, [pc, #116]	; (b8fc <socket+0x180>)
    b886:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    b888:	7819      	ldrb	r1, [r3, #0]
    b88a:	3101      	adds	r1, #1
    b88c:	2203      	movs	r2, #3
    b88e:	400a      	ands	r2, r1
    b890:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    b892:	7aa3      	ldrb	r3, [r4, #10]
    b894:	2b00      	cmp	r3, #0
    b896:	d014      	beq.n	b8c2 <socket+0x146>
    b898:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    b89a:	4917      	ldr	r1, [pc, #92]	; (b8f8 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    b89c:	4f17      	ldr	r7, [pc, #92]	; (b8fc <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    b89e:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    b8a0:	780d      	ldrb	r5, [r1, #0]
    b8a2:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    b8a4:	780c      	ldrb	r4, [r1, #0]
    b8a6:	0124      	lsls	r4, r4, #4
    b8a8:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    b8aa:	780b      	ldrb	r3, [r1, #0]
    b8ac:	3301      	adds	r3, #1
    b8ae:	4003      	ands	r3, r0
    b8b0:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    b8b2:	7aa3      	ldrb	r3, [r4, #10]
    b8b4:	2b00      	cmp	r3, #0
    b8b6:	d004      	beq.n	b8c2 <socket+0x146>
    b8b8:	3a01      	subs	r2, #1
    b8ba:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    b8bc:	2a00      	cmp	r2, #0
    b8be:	d1ef      	bne.n	b8a0 <socket+0x124>
    b8c0:	e76a      	b.n	b798 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    b8c2:	3507      	adds	r5, #7
    b8c4:	b26d      	sxtb	r5, r5
					break;
    b8c6:	e7a2      	b.n	b80e <socket+0x92>
	SOCKET					sock = -1;
    b8c8:	2501      	movs	r5, #1
    b8ca:	426d      	negs	r5, r5
    b8cc:	e766      	b.n	b79c <socket+0x20>
    b8ce:	46c0      	nop			; (mov r8, r8)
    b8d0:	2000021c 	.word	0x2000021c
    b8d4:	000115f5 	.word	0x000115f5
    b8d8:	200004d4 	.word	0x200004d4
    b8dc:	00008f09 	.word	0x00008f09
    b8e0:	2000021a 	.word	0x2000021a
    b8e4:	00013218 	.word	0x00013218
    b8e8:	00011869 	.word	0x00011869
    b8ec:	00013ca8 	.word	0x00013ca8
    b8f0:	0001189d 	.word	0x0001189d
    b8f4:	00009041 	.word	0x00009041
    b8f8:	2000021d 	.word	0x2000021d
    b8fc:	20000544 	.word	0x20000544

0000b900 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    b900:	b570      	push	{r4, r5, r6, lr}
    b902:	b088      	sub	sp, #32
    b904:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    b906:	db30      	blt.n	b96a <connect+0x6a>
    b908:	2900      	cmp	r1, #0
    b90a:	d031      	beq.n	b970 <connect+0x70>
    b90c:	0100      	lsls	r0, r0, #4
    b90e:	4b1d      	ldr	r3, [pc, #116]	; (b984 <connect+0x84>)
    b910:	181b      	adds	r3, r3, r0
    b912:	7a9b      	ldrb	r3, [r3, #10]
    b914:	2b01      	cmp	r3, #1
    b916:	d12e      	bne.n	b976 <connect+0x76>
    b918:	2a00      	cmp	r2, #0
    b91a:	d02f      	beq.n	b97c <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    b91c:	4b19      	ldr	r3, [pc, #100]	; (b984 <connect+0x84>)
    b91e:	181b      	adds	r3, r3, r0
    b920:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    b922:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    b924:	07db      	lsls	r3, r3, #31
    b926:	d505      	bpl.n	b934 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    b928:	4b16      	ldr	r3, [pc, #88]	; (b984 <connect+0x84>)
    b92a:	181b      	adds	r3, r3, r0
    b92c:	7ada      	ldrb	r2, [r3, #11]
    b92e:	ab05      	add	r3, sp, #20
    b930:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    b932:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    b934:	ad05      	add	r5, sp, #20
    b936:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    b938:	2208      	movs	r2, #8
    b93a:	0028      	movs	r0, r5
    b93c:	4b12      	ldr	r3, [pc, #72]	; (b988 <connect+0x88>)
    b93e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    b940:	0124      	lsls	r4, r4, #4
    b942:	4b10      	ldr	r3, [pc, #64]	; (b984 <connect+0x84>)
    b944:	191c      	adds	r4, r3, r4
    b946:	88e3      	ldrh	r3, [r4, #6]
    b948:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    b94a:	2300      	movs	r3, #0
    b94c:	9302      	str	r3, [sp, #8]
    b94e:	9301      	str	r3, [sp, #4]
    b950:	9300      	str	r3, [sp, #0]
    b952:	330c      	adds	r3, #12
    b954:	002a      	movs	r2, r5
    b956:	0031      	movs	r1, r6
    b958:	2002      	movs	r0, #2
    b95a:	4c0c      	ldr	r4, [pc, #48]	; (b98c <connect+0x8c>)
    b95c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    b95e:	2800      	cmp	r0, #0
    b960:	d001      	beq.n	b966 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    b962:	2009      	movs	r0, #9
    b964:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    b966:	b008      	add	sp, #32
    b968:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    b96a:	2006      	movs	r0, #6
    b96c:	4240      	negs	r0, r0
    b96e:	e7fa      	b.n	b966 <connect+0x66>
    b970:	2006      	movs	r0, #6
    b972:	4240      	negs	r0, r0
    b974:	e7f7      	b.n	b966 <connect+0x66>
    b976:	2006      	movs	r0, #6
    b978:	4240      	negs	r0, r0
    b97a:	e7f4      	b.n	b966 <connect+0x66>
    b97c:	2006      	movs	r0, #6
    b97e:	4240      	negs	r0, r0
    b980:	e7f1      	b.n	b966 <connect+0x66>
    b982:	46c0      	nop			; (mov r8, r8)
    b984:	200004d4 	.word	0x200004d4
    b988:	00008ef5 	.word	0x00008ef5
    b98c:	00009041 	.word	0x00009041

0000b990 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    b990:	b530      	push	{r4, r5, lr}
    b992:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    b994:	2800      	cmp	r0, #0
    b996:	db36      	blt.n	ba06 <send+0x76>
    b998:	2900      	cmp	r1, #0
    b99a:	d037      	beq.n	ba0c <send+0x7c>
    b99c:	23af      	movs	r3, #175	; 0xaf
    b99e:	00db      	lsls	r3, r3, #3
    b9a0:	429a      	cmp	r2, r3
    b9a2:	d836      	bhi.n	ba12 <send+0x82>
    b9a4:	0104      	lsls	r4, r0, #4
    b9a6:	4b1e      	ldr	r3, [pc, #120]	; (ba20 <send+0x90>)
    b9a8:	191b      	adds	r3, r3, r4
    b9aa:	7a9b      	ldrb	r3, [r3, #10]
    b9ac:	2b01      	cmp	r3, #1
    b9ae:	d133      	bne.n	ba18 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    b9b0:	ab04      	add	r3, sp, #16
    b9b2:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    b9b4:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    b9b6:	0025      	movs	r5, r4
    b9b8:	4c19      	ldr	r4, [pc, #100]	; (ba20 <send+0x90>)
    b9ba:	1964      	adds	r4, r4, r5
    b9bc:	88e4      	ldrh	r4, [r4, #6]
    b9be:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    b9c0:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    b9c2:	2806      	cmp	r0, #6
    b9c4:	dd00      	ble.n	b9c8 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    b9c6:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    b9c8:	0104      	lsls	r4, r0, #4
    b9ca:	4b15      	ldr	r3, [pc, #84]	; (ba20 <send+0x90>)
    b9cc:	191b      	adds	r3, r3, r4
    b9ce:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    b9d0:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    b9d2:	07e4      	lsls	r4, r4, #31
    b9d4:	d505      	bpl.n	b9e2 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    b9d6:	0100      	lsls	r0, r0, #4
    b9d8:	4b11      	ldr	r3, [pc, #68]	; (ba20 <send+0x90>)
    b9da:	1818      	adds	r0, r3, r0
    b9dc:	8905      	ldrh	r5, [r0, #8]
    b9de:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    b9e0:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    b9e2:	2080      	movs	r0, #128	; 0x80
    b9e4:	4318      	orrs	r0, r3
    b9e6:	9502      	str	r5, [sp, #8]
    b9e8:	9201      	str	r2, [sp, #4]
    b9ea:	9100      	str	r1, [sp, #0]
    b9ec:	2310      	movs	r3, #16
    b9ee:	aa04      	add	r2, sp, #16
    b9f0:	0001      	movs	r1, r0
    b9f2:	2002      	movs	r0, #2
    b9f4:	4c0b      	ldr	r4, [pc, #44]	; (ba24 <send+0x94>)
    b9f6:	47a0      	blx	r4
    b9f8:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    b9fa:	2800      	cmp	r0, #0
    b9fc:	d000      	beq.n	ba00 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    b9fe:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    ba00:	0018      	movs	r0, r3
    ba02:	b009      	add	sp, #36	; 0x24
    ba04:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    ba06:	2306      	movs	r3, #6
    ba08:	425b      	negs	r3, r3
    ba0a:	e7f9      	b.n	ba00 <send+0x70>
    ba0c:	2306      	movs	r3, #6
    ba0e:	425b      	negs	r3, r3
    ba10:	e7f6      	b.n	ba00 <send+0x70>
    ba12:	2306      	movs	r3, #6
    ba14:	425b      	negs	r3, r3
    ba16:	e7f3      	b.n	ba00 <send+0x70>
    ba18:	2306      	movs	r3, #6
    ba1a:	425b      	negs	r3, r3
    ba1c:	e7f0      	b.n	ba00 <send+0x70>
    ba1e:	46c0      	nop			; (mov r8, r8)
    ba20:	200004d4 	.word	0x200004d4
    ba24:	00009041 	.word	0x00009041

0000ba28 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    ba28:	b530      	push	{r4, r5, lr}
    ba2a:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    ba2c:	2800      	cmp	r0, #0
    ba2e:	db34      	blt.n	ba9a <recv+0x72>
    ba30:	2900      	cmp	r1, #0
    ba32:	d035      	beq.n	baa0 <recv+0x78>
    ba34:	2a00      	cmp	r2, #0
    ba36:	d036      	beq.n	baa6 <recv+0x7e>
    ba38:	0105      	lsls	r5, r0, #4
    ba3a:	4c1e      	ldr	r4, [pc, #120]	; (bab4 <recv+0x8c>)
    ba3c:	1964      	adds	r4, r4, r5
    ba3e:	7aa4      	ldrb	r4, [r4, #10]
    ba40:	2c01      	cmp	r4, #1
    ba42:	d133      	bne.n	baac <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    ba44:	4c1b      	ldr	r4, [pc, #108]	; (bab4 <recv+0x8c>)
    ba46:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    ba48:	1964      	adds	r4, r4, r5
    ba4a:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    ba4c:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    ba4e:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    ba50:	2900      	cmp	r1, #0
    ba52:	d11d      	bne.n	ba90 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    ba54:	2101      	movs	r1, #1
    ba56:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    ba58:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    ba5a:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    ba5c:	07d2      	lsls	r2, r2, #31
    ba5e:	d500      	bpl.n	ba62 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    ba60:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    ba62:	2b00      	cmp	r3, #0
    ba64:	d117      	bne.n	ba96 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    ba66:	3b01      	subs	r3, #1
    ba68:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    ba6a:	aa04      	add	r2, sp, #16
    ba6c:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    ba6e:	0100      	lsls	r0, r0, #4
    ba70:	4b10      	ldr	r3, [pc, #64]	; (bab4 <recv+0x8c>)
    ba72:	1818      	adds	r0, r3, r0
    ba74:	88c3      	ldrh	r3, [r0, #6]
    ba76:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    ba78:	2300      	movs	r3, #0
    ba7a:	9302      	str	r3, [sp, #8]
    ba7c:	9301      	str	r3, [sp, #4]
    ba7e:	9300      	str	r3, [sp, #0]
    ba80:	3308      	adds	r3, #8
    ba82:	2002      	movs	r0, #2
    ba84:	4c0c      	ldr	r4, [pc, #48]	; (bab8 <recv+0x90>)
    ba86:	47a0      	blx	r4
    ba88:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    ba8a:	2800      	cmp	r0, #0
    ba8c:	d000      	beq.n	ba90 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    ba8e:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    ba90:	0010      	movs	r0, r2
    ba92:	b007      	add	sp, #28
    ba94:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    ba96:	9304      	str	r3, [sp, #16]
    ba98:	e7e7      	b.n	ba6a <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    ba9a:	2206      	movs	r2, #6
    ba9c:	4252      	negs	r2, r2
    ba9e:	e7f7      	b.n	ba90 <recv+0x68>
    baa0:	2206      	movs	r2, #6
    baa2:	4252      	negs	r2, r2
    baa4:	e7f4      	b.n	ba90 <recv+0x68>
    baa6:	2206      	movs	r2, #6
    baa8:	4252      	negs	r2, r2
    baaa:	e7f1      	b.n	ba90 <recv+0x68>
    baac:	2206      	movs	r2, #6
    baae:	4252      	negs	r2, r2
    bab0:	e7ee      	b.n	ba90 <recv+0x68>
    bab2:	46c0      	nop			; (mov r8, r8)
    bab4:	200004d4 	.word	0x200004d4
    bab8:	00009041 	.word	0x00009041

0000babc <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    babc:	b530      	push	{r4, r5, lr}
    babe:	b087      	sub	sp, #28
    bac0:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    bac2:	481e      	ldr	r0, [pc, #120]	; (bb3c <close+0x80>)
    bac4:	4d1e      	ldr	r5, [pc, #120]	; (bb40 <close+0x84>)
    bac6:	47a8      	blx	r5
    bac8:	0021      	movs	r1, r4
    baca:	481e      	ldr	r0, [pc, #120]	; (bb44 <close+0x88>)
    bacc:	47a8      	blx	r5
    bace:	200d      	movs	r0, #13
    bad0:	4b1d      	ldr	r3, [pc, #116]	; (bb48 <close+0x8c>)
    bad2:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    bad4:	2c00      	cmp	r4, #0
    bad6:	db2a      	blt.n	bb2e <close+0x72>
    bad8:	0122      	lsls	r2, r4, #4
    bada:	4b1c      	ldr	r3, [pc, #112]	; (bb4c <close+0x90>)
    badc:	189b      	adds	r3, r3, r2
    bade:	7a9b      	ldrb	r3, [r3, #10]
    bae0:	2b01      	cmp	r3, #1
    bae2:	d127      	bne.n	bb34 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    bae4:	a905      	add	r1, sp, #20
    bae6:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    bae8:	4b18      	ldr	r3, [pc, #96]	; (bb4c <close+0x90>)
    baea:	189b      	adds	r3, r3, r2
    baec:	88da      	ldrh	r2, [r3, #6]
    baee:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    baf0:	2200      	movs	r2, #0
    baf2:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    baf4:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    baf6:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    baf8:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    bafa:	07db      	lsls	r3, r3, #31
    bafc:	d500      	bpl.n	bb00 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    bafe:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    bb00:	2300      	movs	r3, #0
    bb02:	9302      	str	r3, [sp, #8]
    bb04:	9301      	str	r3, [sp, #4]
    bb06:	9300      	str	r3, [sp, #0]
    bb08:	3304      	adds	r3, #4
    bb0a:	aa05      	add	r2, sp, #20
    bb0c:	2002      	movs	r0, #2
    bb0e:	4d10      	ldr	r5, [pc, #64]	; (bb50 <close+0x94>)
    bb10:	47a8      	blx	r5
    bb12:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    bb14:	d001      	beq.n	bb1a <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    bb16:	2509      	movs	r5, #9
    bb18:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    bb1a:	0124      	lsls	r4, r4, #4
    bb1c:	480b      	ldr	r0, [pc, #44]	; (bb4c <close+0x90>)
    bb1e:	1820      	adds	r0, r4, r0
    bb20:	2210      	movs	r2, #16
    bb22:	2100      	movs	r1, #0
    bb24:	4b0b      	ldr	r3, [pc, #44]	; (bb54 <close+0x98>)
    bb26:	4798      	blx	r3
	}
	return s8Ret;
}
    bb28:	0028      	movs	r0, r5
    bb2a:	b007      	add	sp, #28
    bb2c:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    bb2e:	2506      	movs	r5, #6
    bb30:	426d      	negs	r5, r5
    bb32:	e7f9      	b.n	bb28 <close+0x6c>
    bb34:	2506      	movs	r5, #6
    bb36:	426d      	negs	r5, r5
    bb38:	e7f6      	b.n	bb28 <close+0x6c>
    bb3a:	46c0      	nop			; (mov r8, r8)
    bb3c:	00013218 	.word	0x00013218
    bb40:	00011869 	.word	0x00011869
    bb44:	00013c90 	.word	0x00013c90
    bb48:	0001189d 	.word	0x0001189d
    bb4c:	200004d4 	.word	0x200004d4
    bb50:	00009041 	.word	0x00009041
    bb54:	00008f09 	.word	0x00008f09

0000bb58 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    bb58:	b570      	push	{r4, r5, r6, lr}
    bb5a:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    bb5c:	2300      	movs	r3, #0
    bb5e:	9301      	str	r3, [sp, #4]
    bb60:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    bb62:	2100      	movs	r1, #0
    bb64:	7802      	ldrb	r2, [r0, #0]
    bb66:	1c44      	adds	r4, r0, #1
    bb68:	3005      	adds	r0, #5
    bb6a:	000b      	movs	r3, r1
    bb6c:	e009      	b.n	bb82 <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    bb6e:	009d      	lsls	r5, r3, #2
    bb70:	195b      	adds	r3, r3, r5
    bb72:	005b      	lsls	r3, r3, #1
    bb74:	189b      	adds	r3, r3, r2
    bb76:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    bb78:	0022      	movs	r2, r4
    bb7a:	3401      	adds	r4, #1
			if(j > 4)
    bb7c:	42a0      	cmp	r0, r4
    bb7e:	d00a      	beq.n	bb96 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    bb80:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    bb82:	2a2e      	cmp	r2, #46	; 0x2e
    bb84:	d00a      	beq.n	bb9c <nmi_inet_addr+0x44>
    bb86:	2a00      	cmp	r2, #0
    bb88:	d00c      	beq.n	bba4 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    bb8a:	3a30      	subs	r2, #48	; 0x30
    bb8c:	b2d2      	uxtb	r2, r2
    bb8e:	2a09      	cmp	r2, #9
    bb90:	d9ed      	bls.n	bb6e <nmi_inet_addr+0x16>
				return 0;
    bb92:	2000      	movs	r0, #0
    bb94:	e000      	b.n	bb98 <nmi_inet_addr+0x40>
				return 0;
    bb96:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    bb98:	b002      	add	sp, #8
    bb9a:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    bb9c:	466a      	mov	r2, sp
    bb9e:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    bba0:	0020      	movs	r0, r4
    bba2:	e002      	b.n	bbaa <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    bba4:	466a      	mov	r2, sp
    bba6:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    bba8:	0020      	movs	r0, r4
    bbaa:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    bbac:	2e04      	cmp	r6, #4
    bbae:	d1d9      	bne.n	bb64 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    bbb0:	2204      	movs	r2, #4
    bbb2:	4669      	mov	r1, sp
    bbb4:	a801      	add	r0, sp, #4
    bbb6:	4b02      	ldr	r3, [pc, #8]	; (bbc0 <nmi_inet_addr+0x68>)
    bbb8:	4798      	blx	r3
	return u32IP;
    bbba:	9801      	ldr	r0, [sp, #4]
    bbbc:	e7ec      	b.n	bb98 <nmi_inet_addr+0x40>
    bbbe:	46c0      	nop			; (mov r8, r8)
    bbc0:	00008ef5 	.word	0x00008ef5

0000bbc4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    bbc4:	b510      	push	{r4, lr}
    bbc6:	b084      	sub	sp, #16
    bbc8:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    bbca:	4b0b      	ldr	r3, [pc, #44]	; (bbf8 <gethostbyname+0x34>)
    bbcc:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    bbce:	b2c3      	uxtb	r3, r0
    bbd0:	2b40      	cmp	r3, #64	; 0x40
    bbd2:	d80d      	bhi.n	bbf0 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    bbd4:	23ff      	movs	r3, #255	; 0xff
    bbd6:	4003      	ands	r3, r0
    bbd8:	3301      	adds	r3, #1
    bbda:	2200      	movs	r2, #0
    bbdc:	9202      	str	r2, [sp, #8]
    bbde:	9201      	str	r2, [sp, #4]
    bbe0:	9200      	str	r2, [sp, #0]
    bbe2:	0022      	movs	r2, r4
    bbe4:	214a      	movs	r1, #74	; 0x4a
    bbe6:	2002      	movs	r0, #2
    bbe8:	4c04      	ldr	r4, [pc, #16]	; (bbfc <gethostbyname+0x38>)
    bbea:	47a0      	blx	r4
	}
	return s8Err;
}
    bbec:	b004      	add	sp, #16
    bbee:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    bbf0:	2006      	movs	r0, #6
    bbf2:	4240      	negs	r0, r0
    bbf4:	e7fa      	b.n	bbec <gethostbyname+0x28>
    bbf6:	46c0      	nop			; (mov r8, r8)
    bbf8:	00008f19 	.word	0x00008f19
    bbfc:	00009041 	.word	0x00009041

0000bc00 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    bc00:	b570      	push	{r4, r5, r6, lr}
    bc02:	b082      	sub	sp, #8
    bc04:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    bc06:	4b2a      	ldr	r3, [pc, #168]	; (bcb0 <spi_flash_enable+0xb0>)
    bc08:	4798      	blx	r3
    bc0a:	0500      	lsls	r0, r0, #20
    bc0c:	0d00      	lsrs	r0, r0, #20
    bc0e:	4b29      	ldr	r3, [pc, #164]	; (bcb4 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    bc10:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    bc12:	4298      	cmp	r0, r3
    bc14:	d802      	bhi.n	bc1c <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    bc16:	0028      	movs	r0, r5
    bc18:	b002      	add	sp, #8
    bc1a:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    bc1c:	a901      	add	r1, sp, #4
    bc1e:	4826      	ldr	r0, [pc, #152]	; (bcb8 <spi_flash_enable+0xb8>)
    bc20:	4b26      	ldr	r3, [pc, #152]	; (bcbc <spi_flash_enable+0xbc>)
    bc22:	4798      	blx	r3
    bc24:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    bc26:	d1f6      	bne.n	bc16 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    bc28:	4b25      	ldr	r3, [pc, #148]	; (bcc0 <spi_flash_enable+0xc0>)
    bc2a:	9a01      	ldr	r2, [sp, #4]
    bc2c:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    bc2e:	4925      	ldr	r1, [pc, #148]	; (bcc4 <spi_flash_enable+0xc4>)
    bc30:	4319      	orrs	r1, r3
    bc32:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    bc34:	4820      	ldr	r0, [pc, #128]	; (bcb8 <spi_flash_enable+0xb8>)
    bc36:	4b24      	ldr	r3, [pc, #144]	; (bcc8 <spi_flash_enable+0xc8>)
    bc38:	4798      	blx	r3
		if(enable) {
    bc3a:	2c00      	cmp	r4, #0
    bc3c:	d020      	beq.n	bc80 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    bc3e:	2100      	movs	r1, #0
    bc40:	4822      	ldr	r0, [pc, #136]	; (bccc <spi_flash_enable+0xcc>)
    bc42:	4c21      	ldr	r4, [pc, #132]	; (bcc8 <spi_flash_enable+0xc8>)
    bc44:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    bc46:	21ab      	movs	r1, #171	; 0xab
    bc48:	4821      	ldr	r0, [pc, #132]	; (bcd0 <spi_flash_enable+0xd0>)
    bc4a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    bc4c:	2101      	movs	r1, #1
    bc4e:	4821      	ldr	r0, [pc, #132]	; (bcd4 <spi_flash_enable+0xd4>)
    bc50:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    bc52:	2100      	movs	r1, #0
    bc54:	4820      	ldr	r0, [pc, #128]	; (bcd8 <spi_flash_enable+0xd8>)
    bc56:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    bc58:	2181      	movs	r1, #129	; 0x81
    bc5a:	4820      	ldr	r0, [pc, #128]	; (bcdc <spi_flash_enable+0xdc>)
    bc5c:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    bc5e:	4e20      	ldr	r6, [pc, #128]	; (bce0 <spi_flash_enable+0xe0>)
    bc60:	4c20      	ldr	r4, [pc, #128]	; (bce4 <spi_flash_enable+0xe4>)
    bc62:	0030      	movs	r0, r6
    bc64:	47a0      	blx	r4
    bc66:	2801      	cmp	r0, #1
    bc68:	d1fb      	bne.n	bc62 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    bc6a:	4b15      	ldr	r3, [pc, #84]	; (bcc0 <spi_flash_enable+0xc0>)
    bc6c:	9a01      	ldr	r2, [sp, #4]
    bc6e:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    bc70:	2180      	movs	r1, #128	; 0x80
    bc72:	0249      	lsls	r1, r1, #9
    bc74:	4319      	orrs	r1, r3
    bc76:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    bc78:	480f      	ldr	r0, [pc, #60]	; (bcb8 <spi_flash_enable+0xb8>)
    bc7a:	4b13      	ldr	r3, [pc, #76]	; (bcc8 <spi_flash_enable+0xc8>)
    bc7c:	4798      	blx	r3
    bc7e:	e7ca      	b.n	bc16 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    bc80:	2100      	movs	r1, #0
    bc82:	4812      	ldr	r0, [pc, #72]	; (bccc <spi_flash_enable+0xcc>)
    bc84:	4c10      	ldr	r4, [pc, #64]	; (bcc8 <spi_flash_enable+0xc8>)
    bc86:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    bc88:	21b9      	movs	r1, #185	; 0xb9
    bc8a:	4811      	ldr	r0, [pc, #68]	; (bcd0 <spi_flash_enable+0xd0>)
    bc8c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    bc8e:	2101      	movs	r1, #1
    bc90:	4810      	ldr	r0, [pc, #64]	; (bcd4 <spi_flash_enable+0xd4>)
    bc92:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    bc94:	2100      	movs	r1, #0
    bc96:	4810      	ldr	r0, [pc, #64]	; (bcd8 <spi_flash_enable+0xd8>)
    bc98:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    bc9a:	2181      	movs	r1, #129	; 0x81
    bc9c:	480f      	ldr	r0, [pc, #60]	; (bcdc <spi_flash_enable+0xdc>)
    bc9e:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    bca0:	4e0f      	ldr	r6, [pc, #60]	; (bce0 <spi_flash_enable+0xe0>)
    bca2:	4c10      	ldr	r4, [pc, #64]	; (bce4 <spi_flash_enable+0xe4>)
    bca4:	0030      	movs	r0, r6
    bca6:	47a0      	blx	r4
    bca8:	2801      	cmp	r0, #1
    bcaa:	d1fb      	bne.n	bca4 <spi_flash_enable+0xa4>
    bcac:	e7dd      	b.n	bc6a <spi_flash_enable+0x6a>
    bcae:	46c0      	nop			; (mov r8, r8)
    bcb0:	00009f41 	.word	0x00009f41
    bcb4:	0000039f 	.word	0x0000039f
    bcb8:	00001410 	.word	0x00001410
    bcbc:	0000a391 	.word	0x0000a391
    bcc0:	f8888fff 	.word	0xf8888fff
    bcc4:	01111000 	.word	0x01111000
    bcc8:	0000a39d 	.word	0x0000a39d
    bccc:	00010208 	.word	0x00010208
    bcd0:	0001020c 	.word	0x0001020c
    bcd4:	00010214 	.word	0x00010214
    bcd8:	0001021c 	.word	0x0001021c
    bcdc:	00010204 	.word	0x00010204
    bce0:	00010218 	.word	0x00010218
    bce4:	0000a385 	.word	0x0000a385

0000bce8 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    bce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcea:	46c6      	mov	lr, r8
    bcec:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    bcee:	2303      	movs	r3, #3
    bcf0:	0007      	movs	r7, r0
    bcf2:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    bcf4:	6813      	ldr	r3, [r2, #0]
    bcf6:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    bcf8:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    bcfa:	2903      	cmp	r1, #3
    bcfc:	d902      	bls.n	bd04 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    bcfe:	4244      	negs	r4, r0
    bd00:	2003      	movs	r0, #3
    bd02:	4004      	ands	r4, r0
	}

	if (temp_length) {
    bd04:	2c00      	cmp	r4, #0
    bd06:	d016      	beq.n	bd36 <crc32_recalculate+0x4e>
		length -= temp_length;
    bd08:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    bd0a:	1d3e      	adds	r6, r7, #4
    bd0c:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    bd0e:	00e0      	lsls	r0, r4, #3
    bd10:	4240      	negs	r0, r0
    bd12:	3020      	adds	r0, #32
    bd14:	40c5      	lsrs	r5, r0
	crc ^= data;
    bd16:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    bd18:	00e0      	lsls	r0, r4, #3
    bd1a:	d019      	beq.n	bd50 <crc32_recalculate+0x68>
		if (crc & 1) {
    bd1c:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    bd1e:	4d27      	ldr	r5, [pc, #156]	; (bdbc <crc32_recalculate+0xd4>)
    bd20:	e003      	b.n	bd2a <crc32_recalculate+0x42>
			crc >>= 1;
    bd22:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    bd24:	3801      	subs	r0, #1
    bd26:	2800      	cmp	r0, #0
    bd28:	d004      	beq.n	bd34 <crc32_recalculate+0x4c>
		if (crc & 1) {
    bd2a:	421c      	tst	r4, r3
    bd2c:	d0f9      	beq.n	bd22 <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    bd2e:	085b      	lsrs	r3, r3, #1
    bd30:	406b      	eors	r3, r5
    bd32:	e7f7      	b.n	bd24 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    bd34:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    bd36:	2003      	movs	r0, #3
    bd38:	000c      	movs	r4, r1
    bd3a:	4384      	bics	r4, r0

	if (temp_length) {
    bd3c:	d01e      	beq.n	bd7c <crc32_recalculate+0x94>
		length -= temp_length;
    bd3e:	1b08      	subs	r0, r1, r4
    bd40:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    bd42:	0889      	lsrs	r1, r1, #2
    bd44:	4688      	mov	r8, r1
    bd46:	003e      	movs	r6, r7
    bd48:	000d      	movs	r5, r1
		if (crc & 1) {
    bd4a:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    bd4c:	4c1b      	ldr	r4, [pc, #108]	; (bdbc <crc32_recalculate+0xd4>)

		while (temp_length--) {
    bd4e:	e00b      	b.n	bd68 <crc32_recalculate+0x80>
		word = *(word_ptr++);
    bd50:	0037      	movs	r7, r6
    bd52:	e7f0      	b.n	bd36 <crc32_recalculate+0x4e>
			crc >>= 1;
    bd54:	085b      	lsrs	r3, r3, #1
    bd56:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    bd58:	2900      	cmp	r1, #0
    bd5a:	d004      	beq.n	bd66 <crc32_recalculate+0x7e>
		if (crc & 1) {
    bd5c:	4218      	tst	r0, r3
    bd5e:	d0f9      	beq.n	bd54 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    bd60:	085b      	lsrs	r3, r3, #1
    bd62:	4063      	eors	r3, r4
    bd64:	e7f7      	b.n	bd56 <crc32_recalculate+0x6e>
    bd66:	3604      	adds	r6, #4
		while (temp_length--) {
    bd68:	3d01      	subs	r5, #1
    bd6a:	d303      	bcc.n	bd74 <crc32_recalculate+0x8c>
	crc ^= data;
    bd6c:	6831      	ldr	r1, [r6, #0]
    bd6e:	404b      	eors	r3, r1
    bd70:	2120      	movs	r1, #32
    bd72:	e7f3      	b.n	bd5c <crc32_recalculate+0x74>
    bd74:	4641      	mov	r1, r8
    bd76:	0089      	lsls	r1, r1, #2
    bd78:	187f      	adds	r7, r7, r1
		length -= temp_length;
    bd7a:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    bd7c:	2900      	cmp	r1, #0
    bd7e:	d017      	beq.n	bdb0 <crc32_recalculate+0xc8>
		word = *word_ptr;
    bd80:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    bd82:	00c8      	lsls	r0, r1, #3
    bd84:	4240      	negs	r0, r0
    bd86:	3020      	adds	r0, #32
    bd88:	2501      	movs	r5, #1
    bd8a:	426d      	negs	r5, r5
    bd8c:	40c5      	lsrs	r5, r0
    bd8e:	0028      	movs	r0, r5
    bd90:	4020      	ands	r0, r4
	crc ^= data;
    bd92:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    bd94:	00c9      	lsls	r1, r1, #3
    bd96:	d00b      	beq.n	bdb0 <crc32_recalculate+0xc8>
		if (crc & 1) {
    bd98:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    bd9a:	4c08      	ldr	r4, [pc, #32]	; (bdbc <crc32_recalculate+0xd4>)
    bd9c:	e003      	b.n	bda6 <crc32_recalculate+0xbe>
			crc >>= 1;
    bd9e:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    bda0:	3901      	subs	r1, #1
    bda2:	2900      	cmp	r1, #0
    bda4:	d004      	beq.n	bdb0 <crc32_recalculate+0xc8>
		if (crc & 1) {
    bda6:	4218      	tst	r0, r3
    bda8:	d0f9      	beq.n	bd9e <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    bdaa:	085b      	lsrs	r3, r3, #1
    bdac:	4063      	eors	r3, r4
    bdae:	e7f7      	b.n	bda0 <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    bdb0:	43db      	mvns	r3, r3
    bdb2:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    bdb4:	2000      	movs	r0, #0
    bdb6:	bc04      	pop	{r2}
    bdb8:	4690      	mov	r8, r2
    bdba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bdbc:	edb88320 	.word	0xedb88320

0000bdc0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    bdc0:	4b0c      	ldr	r3, [pc, #48]	; (bdf4 <cpu_irq_enter_critical+0x34>)
    bdc2:	681b      	ldr	r3, [r3, #0]
    bdc4:	2b00      	cmp	r3, #0
    bdc6:	d106      	bne.n	bdd6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    bdc8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    bdcc:	2b00      	cmp	r3, #0
    bdce:	d007      	beq.n	bde0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    bdd0:	2200      	movs	r2, #0
    bdd2:	4b09      	ldr	r3, [pc, #36]	; (bdf8 <cpu_irq_enter_critical+0x38>)
    bdd4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    bdd6:	4a07      	ldr	r2, [pc, #28]	; (bdf4 <cpu_irq_enter_critical+0x34>)
    bdd8:	6813      	ldr	r3, [r2, #0]
    bdda:	3301      	adds	r3, #1
    bddc:	6013      	str	r3, [r2, #0]
}
    bdde:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    bde0:	b672      	cpsid	i
    bde2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    bde6:	2200      	movs	r2, #0
    bde8:	4b04      	ldr	r3, [pc, #16]	; (bdfc <cpu_irq_enter_critical+0x3c>)
    bdea:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    bdec:	3201      	adds	r2, #1
    bdee:	4b02      	ldr	r3, [pc, #8]	; (bdf8 <cpu_irq_enter_critical+0x38>)
    bdf0:	701a      	strb	r2, [r3, #0]
    bdf2:	e7f0      	b.n	bdd6 <cpu_irq_enter_critical+0x16>
    bdf4:	20000220 	.word	0x20000220
    bdf8:	20000224 	.word	0x20000224
    bdfc:	2000000a 	.word	0x2000000a

0000be00 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    be00:	4b08      	ldr	r3, [pc, #32]	; (be24 <cpu_irq_leave_critical+0x24>)
    be02:	681a      	ldr	r2, [r3, #0]
    be04:	3a01      	subs	r2, #1
    be06:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    be08:	681b      	ldr	r3, [r3, #0]
    be0a:	2b00      	cmp	r3, #0
    be0c:	d109      	bne.n	be22 <cpu_irq_leave_critical+0x22>
    be0e:	4b06      	ldr	r3, [pc, #24]	; (be28 <cpu_irq_leave_critical+0x28>)
    be10:	781b      	ldrb	r3, [r3, #0]
    be12:	2b00      	cmp	r3, #0
    be14:	d005      	beq.n	be22 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    be16:	2201      	movs	r2, #1
    be18:	4b04      	ldr	r3, [pc, #16]	; (be2c <cpu_irq_leave_critical+0x2c>)
    be1a:	701a      	strb	r2, [r3, #0]
    be1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    be20:	b662      	cpsie	i
	}
}
    be22:	4770      	bx	lr
    be24:	20000220 	.word	0x20000220
    be28:	20000224 	.word	0x20000224
    be2c:	2000000a 	.word	0x2000000a

0000be30 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    be30:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    be32:	2a00      	cmp	r2, #0
    be34:	d001      	beq.n	be3a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    be36:	0018      	movs	r0, r3
    be38:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    be3a:	008b      	lsls	r3, r1, #2
    be3c:	4a06      	ldr	r2, [pc, #24]	; (be58 <extint_register_callback+0x28>)
    be3e:	589b      	ldr	r3, [r3, r2]
    be40:	2b00      	cmp	r3, #0
    be42:	d003      	beq.n	be4c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    be44:	4283      	cmp	r3, r0
    be46:	d005      	beq.n	be54 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    be48:	231d      	movs	r3, #29
    be4a:	e7f4      	b.n	be36 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    be4c:	0089      	lsls	r1, r1, #2
    be4e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    be50:	2300      	movs	r3, #0
    be52:	e7f0      	b.n	be36 <extint_register_callback+0x6>
		return STATUS_OK;
    be54:	2300      	movs	r3, #0
    be56:	e7ee      	b.n	be36 <extint_register_callback+0x6>
    be58:	20000594 	.word	0x20000594

0000be5c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    be5c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    be5e:	2900      	cmp	r1, #0
    be60:	d001      	beq.n	be66 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    be62:	0018      	movs	r0, r3
    be64:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    be66:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    be68:	281f      	cmp	r0, #31
    be6a:	d800      	bhi.n	be6e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    be6c:	4a02      	ldr	r2, [pc, #8]	; (be78 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    be6e:	2301      	movs	r3, #1
    be70:	4083      	lsls	r3, r0
    be72:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    be74:	2300      	movs	r3, #0
    be76:	e7f4      	b.n	be62 <extint_chan_enable_callback+0x6>
    be78:	40001800 	.word	0x40001800

0000be7c <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    be7c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    be7e:	2900      	cmp	r1, #0
    be80:	d001      	beq.n	be86 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    be82:	0018      	movs	r0, r3
    be84:	4770      	bx	lr
		return NULL;
    be86:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    be88:	281f      	cmp	r0, #31
    be8a:	d800      	bhi.n	be8e <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    be8c:	4a02      	ldr	r2, [pc, #8]	; (be98 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    be8e:	2301      	movs	r3, #1
    be90:	4083      	lsls	r3, r0
    be92:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    be94:	2300      	movs	r3, #0
    be96:	e7f4      	b.n	be82 <extint_chan_disable_callback+0x6>
    be98:	40001800 	.word	0x40001800

0000be9c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    be9c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    be9e:	2200      	movs	r2, #0
    bea0:	4b10      	ldr	r3, [pc, #64]	; (bee4 <EIC_Handler+0x48>)
    bea2:	701a      	strb	r2, [r3, #0]
    bea4:	2300      	movs	r3, #0
    bea6:	4910      	ldr	r1, [pc, #64]	; (bee8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    bea8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    beaa:	4e10      	ldr	r6, [pc, #64]	; (beec <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    beac:	4c0d      	ldr	r4, [pc, #52]	; (bee4 <EIC_Handler+0x48>)
    beae:	e00a      	b.n	bec6 <EIC_Handler+0x2a>
		return eics[eic_index];
    beb0:	490d      	ldr	r1, [pc, #52]	; (bee8 <EIC_Handler+0x4c>)
    beb2:	e008      	b.n	bec6 <EIC_Handler+0x2a>
    beb4:	7823      	ldrb	r3, [r4, #0]
    beb6:	3301      	adds	r3, #1
    beb8:	b2db      	uxtb	r3, r3
    beba:	7023      	strb	r3, [r4, #0]
    bebc:	2b0f      	cmp	r3, #15
    bebe:	d810      	bhi.n	bee2 <EIC_Handler+0x46>
		return NULL;
    bec0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    bec2:	2b1f      	cmp	r3, #31
    bec4:	d9f4      	bls.n	beb0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    bec6:	0028      	movs	r0, r5
    bec8:	4018      	ands	r0, r3
    beca:	2201      	movs	r2, #1
    becc:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    bece:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    bed0:	4210      	tst	r0, r2
    bed2:	d0ef      	beq.n	beb4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    bed4:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    bed6:	009b      	lsls	r3, r3, #2
    bed8:	599b      	ldr	r3, [r3, r6]
    beda:	2b00      	cmp	r3, #0
    bedc:	d0ea      	beq.n	beb4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    bede:	4798      	blx	r3
    bee0:	e7e8      	b.n	beb4 <EIC_Handler+0x18>
			}
		}
	}
}
    bee2:	bd70      	pop	{r4, r5, r6, pc}
    bee4:	20000590 	.word	0x20000590
    bee8:	40001800 	.word	0x40001800
    beec:	20000594 	.word	0x20000594

0000bef0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    bef0:	4a04      	ldr	r2, [pc, #16]	; (bf04 <_extint_enable+0x14>)
    bef2:	7813      	ldrb	r3, [r2, #0]
    bef4:	2102      	movs	r1, #2
    bef6:	430b      	orrs	r3, r1
    bef8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    befa:	7853      	ldrb	r3, [r2, #1]
    befc:	b25b      	sxtb	r3, r3
    befe:	2b00      	cmp	r3, #0
    bf00:	dbfb      	blt.n	befa <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    bf02:	4770      	bx	lr
    bf04:	40001800 	.word	0x40001800

0000bf08 <_system_extint_init>:
{
    bf08:	b500      	push	{lr}
    bf0a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    bf0c:	4a12      	ldr	r2, [pc, #72]	; (bf58 <_system_extint_init+0x50>)
    bf0e:	6993      	ldr	r3, [r2, #24]
    bf10:	2140      	movs	r1, #64	; 0x40
    bf12:	430b      	orrs	r3, r1
    bf14:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    bf16:	a901      	add	r1, sp, #4
    bf18:	2300      	movs	r3, #0
    bf1a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    bf1c:	2005      	movs	r0, #5
    bf1e:	4b0f      	ldr	r3, [pc, #60]	; (bf5c <_system_extint_init+0x54>)
    bf20:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    bf22:	2005      	movs	r0, #5
    bf24:	4b0e      	ldr	r3, [pc, #56]	; (bf60 <_system_extint_init+0x58>)
    bf26:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    bf28:	4a0e      	ldr	r2, [pc, #56]	; (bf64 <_system_extint_init+0x5c>)
    bf2a:	7813      	ldrb	r3, [r2, #0]
    bf2c:	2101      	movs	r1, #1
    bf2e:	430b      	orrs	r3, r1
    bf30:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    bf32:	7853      	ldrb	r3, [r2, #1]
    bf34:	b25b      	sxtb	r3, r3
    bf36:	2b00      	cmp	r3, #0
    bf38:	dbfb      	blt.n	bf32 <_system_extint_init+0x2a>
    bf3a:	4b0b      	ldr	r3, [pc, #44]	; (bf68 <_system_extint_init+0x60>)
    bf3c:	0019      	movs	r1, r3
    bf3e:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    bf40:	2200      	movs	r2, #0
    bf42:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    bf44:	4299      	cmp	r1, r3
    bf46:	d1fc      	bne.n	bf42 <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    bf48:	2210      	movs	r2, #16
    bf4a:	4b08      	ldr	r3, [pc, #32]	; (bf6c <_system_extint_init+0x64>)
    bf4c:	601a      	str	r2, [r3, #0]
	_extint_enable();
    bf4e:	4b08      	ldr	r3, [pc, #32]	; (bf70 <_system_extint_init+0x68>)
    bf50:	4798      	blx	r3
}
    bf52:	b003      	add	sp, #12
    bf54:	bd00      	pop	{pc}
    bf56:	46c0      	nop			; (mov r8, r8)
    bf58:	40000400 	.word	0x40000400
    bf5c:	0000d96d 	.word	0x0000d96d
    bf60:	0000d8e1 	.word	0x0000d8e1
    bf64:	40001800 	.word	0x40001800
    bf68:	20000594 	.word	0x20000594
    bf6c:	e000e100 	.word	0xe000e100
    bf70:	0000bef1 	.word	0x0000bef1

0000bf74 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    bf74:	2300      	movs	r3, #0
    bf76:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    bf78:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    bf7a:	2201      	movs	r2, #1
    bf7c:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    bf7e:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    bf80:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    bf82:	3302      	adds	r3, #2
    bf84:	72c3      	strb	r3, [r0, #11]
}
    bf86:	4770      	bx	lr

0000bf88 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    bf88:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf8a:	b083      	sub	sp, #12
    bf8c:	0005      	movs	r5, r0
    bf8e:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    bf90:	a901      	add	r1, sp, #4
    bf92:	2300      	movs	r3, #0
    bf94:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    bf96:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    bf98:	7923      	ldrb	r3, [r4, #4]
    bf9a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    bf9c:	7a23      	ldrb	r3, [r4, #8]
    bf9e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    bfa0:	7820      	ldrb	r0, [r4, #0]
    bfa2:	4b15      	ldr	r3, [pc, #84]	; (bff8 <extint_chan_set_config+0x70>)
    bfa4:	4798      	blx	r3
		return NULL;
    bfa6:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    bfa8:	2d1f      	cmp	r5, #31
    bfaa:	d800      	bhi.n	bfae <extint_chan_set_config+0x26>
		return eics[eic_index];
    bfac:	4813      	ldr	r0, [pc, #76]	; (bffc <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    bfae:	2207      	movs	r2, #7
    bfb0:	402a      	ands	r2, r5
    bfb2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    bfb4:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    bfb6:	7aa3      	ldrb	r3, [r4, #10]
    bfb8:	2b00      	cmp	r3, #0
    bfba:	d001      	beq.n	bfc0 <extint_chan_set_config+0x38>
    bfbc:	2308      	movs	r3, #8
    bfbe:	431f      	orrs	r7, r3
    bfc0:	08eb      	lsrs	r3, r5, #3
    bfc2:	009b      	lsls	r3, r3, #2
    bfc4:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    bfc6:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    bfc8:	260f      	movs	r6, #15
    bfca:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    bfcc:	43b1      	bics	r1, r6
			(new_config << config_pos);
    bfce:	4097      	lsls	r7, r2
    bfd0:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    bfd2:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    bfd4:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    bfd6:	7a63      	ldrb	r3, [r4, #9]
    bfd8:	2b00      	cmp	r3, #0
    bfda:	d106      	bne.n	bfea <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    bfdc:	6943      	ldr	r3, [r0, #20]
    bfde:	2201      	movs	r2, #1
    bfe0:	40aa      	lsls	r2, r5
    bfe2:	4393      	bics	r3, r2
    bfe4:	6143      	str	r3, [r0, #20]
	}
}
    bfe6:	b003      	add	sp, #12
    bfe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    bfea:	6942      	ldr	r2, [r0, #20]
    bfec:	2301      	movs	r3, #1
    bfee:	40ab      	lsls	r3, r5
    bff0:	4313      	orrs	r3, r2
    bff2:	6143      	str	r3, [r0, #20]
    bff4:	e7f7      	b.n	bfe6 <extint_chan_set_config+0x5e>
    bff6:	46c0      	nop			; (mov r8, r8)
    bff8:	0000da65 	.word	0x0000da65
    bffc:	40001800 	.word	0x40001800

0000c000 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    c000:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    c002:	4a1e      	ldr	r2, [pc, #120]	; (c07c <nvm_set_config+0x7c>)
    c004:	69d3      	ldr	r3, [r2, #28]
    c006:	2104      	movs	r1, #4
    c008:	430b      	orrs	r3, r1
    c00a:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    c00c:	4b1c      	ldr	r3, [pc, #112]	; (c080 <nvm_set_config+0x80>)
    c00e:	2220      	movs	r2, #32
    c010:	32ff      	adds	r2, #255	; 0xff
    c012:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    c014:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    c016:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    c018:	07d2      	lsls	r2, r2, #31
    c01a:	d401      	bmi.n	c020 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    c01c:	0018      	movs	r0, r3
    c01e:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    c020:	7803      	ldrb	r3, [r0, #0]
    c022:	021b      	lsls	r3, r3, #8
    c024:	22c0      	movs	r2, #192	; 0xc0
    c026:	0092      	lsls	r2, r2, #2
    c028:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    c02a:	7841      	ldrb	r1, [r0, #1]
    c02c:	01c9      	lsls	r1, r1, #7
    c02e:	22ff      	movs	r2, #255	; 0xff
    c030:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    c032:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    c034:	7881      	ldrb	r1, [r0, #2]
    c036:	0049      	lsls	r1, r1, #1
    c038:	221e      	movs	r2, #30
    c03a:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    c03c:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    c03e:	78c2      	ldrb	r2, [r0, #3]
    c040:	0492      	lsls	r2, r2, #18
    c042:	2180      	movs	r1, #128	; 0x80
    c044:	02c9      	lsls	r1, r1, #11
    c046:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    c048:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    c04a:	7902      	ldrb	r2, [r0, #4]
    c04c:	0412      	lsls	r2, r2, #16
    c04e:	21c0      	movs	r1, #192	; 0xc0
    c050:	0289      	lsls	r1, r1, #10
    c052:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    c054:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    c056:	4a0a      	ldr	r2, [pc, #40]	; (c080 <nvm_set_config+0x80>)
    c058:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    c05a:	6893      	ldr	r3, [r2, #8]
    c05c:	035b      	lsls	r3, r3, #13
    c05e:	0f5b      	lsrs	r3, r3, #29
    c060:	4908      	ldr	r1, [pc, #32]	; (c084 <nvm_set_config+0x84>)
    c062:	2408      	movs	r4, #8
    c064:	409c      	lsls	r4, r3
    c066:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    c068:	6893      	ldr	r3, [r2, #8]
    c06a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    c06c:	7843      	ldrb	r3, [r0, #1]
    c06e:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    c070:	8b13      	ldrh	r3, [r2, #24]
    c072:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    c074:	0fdb      	lsrs	r3, r3, #31
    c076:	011b      	lsls	r3, r3, #4
    c078:	e7d0      	b.n	c01c <nvm_set_config+0x1c>
    c07a:	46c0      	nop			; (mov r8, r8)
    c07c:	40000400 	.word	0x40000400
    c080:	41004000 	.word	0x41004000
    c084:	20000228 	.word	0x20000228

0000c088 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    c088:	b530      	push	{r4, r5, lr}
    c08a:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    c08c:	4a22      	ldr	r2, [pc, #136]	; (c118 <nvm_execute_command+0x90>)
    c08e:	8810      	ldrh	r0, [r2, #0]
    c090:	8853      	ldrh	r3, [r2, #2]
    c092:	4343      	muls	r3, r0
    c094:	428b      	cmp	r3, r1
    c096:	d206      	bcs.n	c0a6 <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    c098:	2280      	movs	r2, #128	; 0x80
    c09a:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    c09c:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    c09e:	4b1f      	ldr	r3, [pc, #124]	; (c11c <nvm_execute_command+0x94>)
    c0a0:	18cb      	adds	r3, r1, r3
    c0a2:	4293      	cmp	r3, r2
    c0a4:	d80e      	bhi.n	c0c4 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    c0a6:	4b1e      	ldr	r3, [pc, #120]	; (c120 <nvm_execute_command+0x98>)
    c0a8:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    c0aa:	2280      	movs	r2, #128	; 0x80
    c0ac:	02d2      	lsls	r2, r2, #11
    c0ae:	432a      	orrs	r2, r5
    c0b0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    c0b2:	2220      	movs	r2, #32
    c0b4:	32ff      	adds	r2, #255	; 0xff
    c0b6:	831a      	strh	r2, [r3, #24]
    c0b8:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    c0ba:	07db      	lsls	r3, r3, #31
    c0bc:	d403      	bmi.n	c0c6 <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    c0be:	4b18      	ldr	r3, [pc, #96]	; (c120 <nvm_execute_command+0x98>)
    c0c0:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    c0c2:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    c0c4:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    c0c6:	2c45      	cmp	r4, #69	; 0x45
    c0c8:	d822      	bhi.n	c110 <nvm_execute_command+0x88>
    c0ca:	00a3      	lsls	r3, r4, #2
    c0cc:	4a15      	ldr	r2, [pc, #84]	; (c124 <nvm_execute_command+0x9c>)
    c0ce:	58d3      	ldr	r3, [r2, r3]
    c0d0:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    c0d2:	4b13      	ldr	r3, [pc, #76]	; (c120 <nvm_execute_command+0x98>)
    c0d4:	8b1b      	ldrh	r3, [r3, #24]
    c0d6:	05db      	lsls	r3, r3, #23
    c0d8:	d503      	bpl.n	c0e2 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    c0da:	4b11      	ldr	r3, [pc, #68]	; (c120 <nvm_execute_command+0x98>)
    c0dc:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    c0de:	2010      	movs	r0, #16
    c0e0:	e7f0      	b.n	c0c4 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    c0e2:	0889      	lsrs	r1, r1, #2
    c0e4:	0049      	lsls	r1, r1, #1
    c0e6:	4b0e      	ldr	r3, [pc, #56]	; (c120 <nvm_execute_command+0x98>)
    c0e8:	61d9      	str	r1, [r3, #28]
			break;
    c0ea:	e003      	b.n	c0f4 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    c0ec:	0889      	lsrs	r1, r1, #2
    c0ee:	0049      	lsls	r1, r1, #1
    c0f0:	4b0b      	ldr	r3, [pc, #44]	; (c120 <nvm_execute_command+0x98>)
    c0f2:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    c0f4:	20a5      	movs	r0, #165	; 0xa5
    c0f6:	0200      	lsls	r0, r0, #8
    c0f8:	4304      	orrs	r4, r0
    c0fa:	4b09      	ldr	r3, [pc, #36]	; (c120 <nvm_execute_command+0x98>)
    c0fc:	801c      	strh	r4, [r3, #0]
    c0fe:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    c100:	2201      	movs	r2, #1
    c102:	7d0b      	ldrb	r3, [r1, #20]
    c104:	4213      	tst	r3, r2
    c106:	d0fc      	beq.n	c102 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    c108:	4b05      	ldr	r3, [pc, #20]	; (c120 <nvm_execute_command+0x98>)
    c10a:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    c10c:	2000      	movs	r0, #0
    c10e:	e7d9      	b.n	c0c4 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    c110:	4b03      	ldr	r3, [pc, #12]	; (c120 <nvm_execute_command+0x98>)
    c112:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    c114:	2017      	movs	r0, #23
    c116:	e7d5      	b.n	c0c4 <nvm_execute_command+0x3c>
    c118:	20000228 	.word	0x20000228
    c11c:	ff7fc000 	.word	0xff7fc000
    c120:	41004000 	.word	0x41004000
    c124:	00013cc4 	.word	0x00013cc4

0000c128 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    c128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    c12a:	4b25      	ldr	r3, [pc, #148]	; (c1c0 <nvm_write_buffer+0x98>)
    c12c:	881d      	ldrh	r5, [r3, #0]
    c12e:	885b      	ldrh	r3, [r3, #2]
    c130:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    c132:	2418      	movs	r4, #24
	if (destination_address >
    c134:	4283      	cmp	r3, r0
    c136:	d201      	bcs.n	c13c <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    c138:	0020      	movs	r0, r4
    c13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    c13c:	1e6b      	subs	r3, r5, #1
    c13e:	4218      	tst	r0, r3
    c140:	d1fa      	bne.n	c138 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    c142:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    c144:	4295      	cmp	r5, r2
    c146:	d3f7      	bcc.n	c138 <nvm_write_buffer+0x10>
    c148:	4b1e      	ldr	r3, [pc, #120]	; (c1c4 <nvm_write_buffer+0x9c>)
    c14a:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    c14c:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    c14e:	07db      	lsls	r3, r3, #31
    c150:	d5f2      	bpl.n	c138 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    c152:	4c1d      	ldr	r4, [pc, #116]	; (c1c8 <nvm_write_buffer+0xa0>)
    c154:	4b1b      	ldr	r3, [pc, #108]	; (c1c4 <nvm_write_buffer+0x9c>)
    c156:	801c      	strh	r4, [r3, #0]
    c158:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    c15a:	2401      	movs	r4, #1
    c15c:	7d2b      	ldrb	r3, [r5, #20]
    c15e:	4223      	tst	r3, r4
    c160:	d0fc      	beq.n	c15c <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    c162:	2420      	movs	r4, #32
    c164:	34ff      	adds	r4, #255	; 0xff
    c166:	4b17      	ldr	r3, [pc, #92]	; (c1c4 <nvm_write_buffer+0x9c>)
    c168:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    c16a:	2a00      	cmp	r2, #0
    c16c:	d022      	beq.n	c1b4 <nvm_write_buffer+0x8c>
    c16e:	2301      	movs	r3, #1
    c170:	0005      	movs	r5, r0
    c172:	439d      	bics	r5, r3
    c174:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    c176:	1e57      	subs	r7, r2, #1
    c178:	e009      	b.n	c18e <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    c17a:	18ce      	adds	r6, r1, r3
    c17c:	7876      	ldrb	r6, [r6, #1]
    c17e:	0236      	lsls	r6, r6, #8
    c180:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    c182:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    c184:	3302      	adds	r3, #2
    c186:	b29b      	uxth	r3, r3
    c188:	3502      	adds	r5, #2
    c18a:	429a      	cmp	r2, r3
    c18c:	d904      	bls.n	c198 <nvm_write_buffer+0x70>
		data = buffer[i];
    c18e:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    c190:	42bb      	cmp	r3, r7
    c192:	dbf2      	blt.n	c17a <nvm_write_buffer+0x52>
		data = buffer[i];
    c194:	b2a4      	uxth	r4, r4
    c196:	e7f4      	b.n	c182 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    c198:	4b09      	ldr	r3, [pc, #36]	; (c1c0 <nvm_write_buffer+0x98>)
    c19a:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    c19c:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    c19e:	2b00      	cmp	r3, #0
    c1a0:	d1ca      	bne.n	c138 <nvm_write_buffer+0x10>
    c1a2:	2a3f      	cmp	r2, #63	; 0x3f
    c1a4:	d8c8      	bhi.n	c138 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    c1a6:	2200      	movs	r2, #0
    c1a8:	0001      	movs	r1, r0
    c1aa:	2004      	movs	r0, #4
    c1ac:	4b07      	ldr	r3, [pc, #28]	; (c1cc <nvm_write_buffer+0xa4>)
    c1ae:	4798      	blx	r3
    c1b0:	0004      	movs	r4, r0
    c1b2:	e7c1      	b.n	c138 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    c1b4:	4b02      	ldr	r3, [pc, #8]	; (c1c0 <nvm_write_buffer+0x98>)
    c1b6:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    c1b8:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    c1ba:	2b00      	cmp	r3, #0
    c1bc:	d0f3      	beq.n	c1a6 <nvm_write_buffer+0x7e>
    c1be:	e7bb      	b.n	c138 <nvm_write_buffer+0x10>
    c1c0:	20000228 	.word	0x20000228
    c1c4:	41004000 	.word	0x41004000
    c1c8:	ffffa544 	.word	0xffffa544
    c1cc:	0000c089 	.word	0x0000c089

0000c1d0 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    c1d0:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    c1d2:	4b18      	ldr	r3, [pc, #96]	; (c234 <nvm_read_buffer+0x64>)
    c1d4:	881d      	ldrh	r5, [r3, #0]
    c1d6:	885b      	ldrh	r3, [r3, #2]
    c1d8:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    c1da:	2418      	movs	r4, #24
	if (source_address >
    c1dc:	4283      	cmp	r3, r0
    c1de:	d201      	bcs.n	c1e4 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    c1e0:	0020      	movs	r0, r4
    c1e2:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    c1e4:	1e6b      	subs	r3, r5, #1
    c1e6:	4218      	tst	r0, r3
    c1e8:	d1fa      	bne.n	c1e0 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    c1ea:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    c1ec:	4295      	cmp	r5, r2
    c1ee:	d3f7      	bcc.n	c1e0 <nvm_read_buffer+0x10>
    c1f0:	4b11      	ldr	r3, [pc, #68]	; (c238 <nvm_read_buffer+0x68>)
    c1f2:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    c1f4:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    c1f6:	07db      	lsls	r3, r3, #31
    c1f8:	d5f2      	bpl.n	c1e0 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    c1fa:	2420      	movs	r4, #32
    c1fc:	34ff      	adds	r4, #255	; 0xff
    c1fe:	4b0e      	ldr	r3, [pc, #56]	; (c238 <nvm_read_buffer+0x68>)
    c200:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    c202:	2a00      	cmp	r2, #0
    c204:	d014      	beq.n	c230 <nvm_read_buffer+0x60>
    c206:	2301      	movs	r3, #1
    c208:	4398      	bics	r0, r3
    c20a:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    c20c:	1e56      	subs	r6, r2, #1
    c20e:	e004      	b.n	c21a <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    c210:	3302      	adds	r3, #2
    c212:	b29b      	uxth	r3, r3
    c214:	3002      	adds	r0, #2
    c216:	429a      	cmp	r2, r3
    c218:	d908      	bls.n	c22c <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    c21a:	8804      	ldrh	r4, [r0, #0]
    c21c:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    c21e:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    c220:	42b3      	cmp	r3, r6
    c222:	daf5      	bge.n	c210 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    c224:	18cd      	adds	r5, r1, r3
    c226:	0a24      	lsrs	r4, r4, #8
    c228:	706c      	strb	r4, [r5, #1]
    c22a:	e7f1      	b.n	c210 <nvm_read_buffer+0x40>
	return STATUS_OK;
    c22c:	2400      	movs	r4, #0
    c22e:	e7d7      	b.n	c1e0 <nvm_read_buffer+0x10>
    c230:	2400      	movs	r4, #0
    c232:	e7d5      	b.n	c1e0 <nvm_read_buffer+0x10>
    c234:	20000228 	.word	0x20000228
    c238:	41004000 	.word	0x41004000

0000c23c <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    c23c:	4b13      	ldr	r3, [pc, #76]	; (c28c <nvm_erase_row+0x50>)
    c23e:	881a      	ldrh	r2, [r3, #0]
    c240:	885b      	ldrh	r3, [r3, #2]
    c242:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    c244:	2118      	movs	r1, #24
	if (row_address >
    c246:	4283      	cmp	r3, r0
    c248:	d201      	bcs.n	c24e <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    c24a:	0008      	movs	r0, r1
    c24c:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    c24e:	0092      	lsls	r2, r2, #2
    c250:	3a01      	subs	r2, #1
    c252:	4210      	tst	r0, r2
    c254:	d1f9      	bne.n	c24a <nvm_erase_row+0xe>
    c256:	4b0e      	ldr	r3, [pc, #56]	; (c290 <nvm_erase_row+0x54>)
    c258:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    c25a:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    c25c:	07db      	lsls	r3, r3, #31
    c25e:	d5f4      	bpl.n	c24a <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    c260:	4b0b      	ldr	r3, [pc, #44]	; (c290 <nvm_erase_row+0x54>)
    c262:	2220      	movs	r2, #32
    c264:	32ff      	adds	r2, #255	; 0xff
    c266:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    c268:	0880      	lsrs	r0, r0, #2
    c26a:	0040      	lsls	r0, r0, #1
    c26c:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    c26e:	4a09      	ldr	r2, [pc, #36]	; (c294 <nvm_erase_row+0x58>)
    c270:	801a      	strh	r2, [r3, #0]
    c272:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    c274:	2201      	movs	r2, #1
    c276:	7d0b      	ldrb	r3, [r1, #20]
    c278:	4213      	tst	r3, r2
    c27a:	d0fc      	beq.n	c276 <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    c27c:	4b04      	ldr	r3, [pc, #16]	; (c290 <nvm_erase_row+0x54>)
    c27e:	8b19      	ldrh	r1, [r3, #24]
    c280:	201c      	movs	r0, #28
    c282:	4001      	ands	r1, r0
	return STATUS_OK;
    c284:	1e48      	subs	r0, r1, #1
    c286:	4181      	sbcs	r1, r0
    c288:	0089      	lsls	r1, r1, #2
    c28a:	e7de      	b.n	c24a <nvm_erase_row+0xe>
    c28c:	20000228 	.word	0x20000228
    c290:	41004000 	.word	0x41004000
    c294:	ffffa502 	.word	0xffffa502

0000c298 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    c298:	b500      	push	{lr}
    c29a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    c29c:	ab01      	add	r3, sp, #4
    c29e:	2280      	movs	r2, #128	; 0x80
    c2a0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    c2a2:	780a      	ldrb	r2, [r1, #0]
    c2a4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    c2a6:	784a      	ldrb	r2, [r1, #1]
    c2a8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    c2aa:	788a      	ldrb	r2, [r1, #2]
    c2ac:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    c2ae:	0019      	movs	r1, r3
    c2b0:	4b01      	ldr	r3, [pc, #4]	; (c2b8 <port_pin_set_config+0x20>)
    c2b2:	4798      	blx	r3
}
    c2b4:	b003      	add	sp, #12
    c2b6:	bd00      	pop	{pc}
    c2b8:	0000da65 	.word	0x0000da65

0000c2bc <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    c2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2be:	46de      	mov	lr, fp
    c2c0:	4657      	mov	r7, sl
    c2c2:	464e      	mov	r6, r9
    c2c4:	4645      	mov	r5, r8
    c2c6:	b5e0      	push	{r5, r6, r7, lr}
    c2c8:	b087      	sub	sp, #28
    c2ca:	4680      	mov	r8, r0
    c2cc:	9104      	str	r1, [sp, #16]
    c2ce:	0016      	movs	r6, r2
    c2d0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    c2d2:	2200      	movs	r2, #0
    c2d4:	2300      	movs	r3, #0
    c2d6:	2100      	movs	r1, #0
    c2d8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    c2da:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    c2dc:	2001      	movs	r0, #1
    c2de:	0021      	movs	r1, r4
    c2e0:	9600      	str	r6, [sp, #0]
    c2e2:	9701      	str	r7, [sp, #4]
    c2e4:	465c      	mov	r4, fp
    c2e6:	9403      	str	r4, [sp, #12]
    c2e8:	4644      	mov	r4, r8
    c2ea:	9405      	str	r4, [sp, #20]
    c2ec:	e013      	b.n	c316 <long_division+0x5a>
    c2ee:	2420      	movs	r4, #32
    c2f0:	1a64      	subs	r4, r4, r1
    c2f2:	0005      	movs	r5, r0
    c2f4:	40e5      	lsrs	r5, r4
    c2f6:	46a8      	mov	r8, r5
    c2f8:	e014      	b.n	c324 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    c2fa:	9c00      	ldr	r4, [sp, #0]
    c2fc:	9d01      	ldr	r5, [sp, #4]
    c2fe:	1b12      	subs	r2, r2, r4
    c300:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    c302:	465c      	mov	r4, fp
    c304:	464d      	mov	r5, r9
    c306:	432c      	orrs	r4, r5
    c308:	46a3      	mov	fp, r4
    c30a:	9c03      	ldr	r4, [sp, #12]
    c30c:	4645      	mov	r5, r8
    c30e:	432c      	orrs	r4, r5
    c310:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    c312:	3901      	subs	r1, #1
    c314:	d325      	bcc.n	c362 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    c316:	2420      	movs	r4, #32
    c318:	4264      	negs	r4, r4
    c31a:	190c      	adds	r4, r1, r4
    c31c:	d4e7      	bmi.n	c2ee <long_division+0x32>
    c31e:	0005      	movs	r5, r0
    c320:	40a5      	lsls	r5, r4
    c322:	46a8      	mov	r8, r5
    c324:	0004      	movs	r4, r0
    c326:	408c      	lsls	r4, r1
    c328:	46a1      	mov	r9, r4
		r = r << 1;
    c32a:	1892      	adds	r2, r2, r2
    c32c:	415b      	adcs	r3, r3
    c32e:	0014      	movs	r4, r2
    c330:	001d      	movs	r5, r3
		if (n & bit_shift) {
    c332:	9e05      	ldr	r6, [sp, #20]
    c334:	464f      	mov	r7, r9
    c336:	403e      	ands	r6, r7
    c338:	46b4      	mov	ip, r6
    c33a:	9e04      	ldr	r6, [sp, #16]
    c33c:	4647      	mov	r7, r8
    c33e:	403e      	ands	r6, r7
    c340:	46b2      	mov	sl, r6
    c342:	4666      	mov	r6, ip
    c344:	4657      	mov	r7, sl
    c346:	433e      	orrs	r6, r7
    c348:	d003      	beq.n	c352 <long_division+0x96>
			r |= 0x01;
    c34a:	0006      	movs	r6, r0
    c34c:	4326      	orrs	r6, r4
    c34e:	0032      	movs	r2, r6
    c350:	002b      	movs	r3, r5
		if (r >= d) {
    c352:	9c00      	ldr	r4, [sp, #0]
    c354:	9d01      	ldr	r5, [sp, #4]
    c356:	429d      	cmp	r5, r3
    c358:	d8db      	bhi.n	c312 <long_division+0x56>
    c35a:	d1ce      	bne.n	c2fa <long_division+0x3e>
    c35c:	4294      	cmp	r4, r2
    c35e:	d8d8      	bhi.n	c312 <long_division+0x56>
    c360:	e7cb      	b.n	c2fa <long_division+0x3e>
    c362:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    c364:	4658      	mov	r0, fp
    c366:	0019      	movs	r1, r3
    c368:	b007      	add	sp, #28
    c36a:	bc3c      	pop	{r2, r3, r4, r5}
    c36c:	4690      	mov	r8, r2
    c36e:	4699      	mov	r9, r3
    c370:	46a2      	mov	sl, r4
    c372:	46ab      	mov	fp, r5
    c374:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c376 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    c376:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    c378:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    c37a:	2340      	movs	r3, #64	; 0x40
    c37c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    c37e:	4281      	cmp	r1, r0
    c380:	d202      	bcs.n	c388 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    c382:	0018      	movs	r0, r3
    c384:	bd10      	pop	{r4, pc}
		baud_calculated++;
    c386:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    c388:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    c38a:	1c63      	adds	r3, r4, #1
    c38c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    c38e:	4288      	cmp	r0, r1
    c390:	d9f9      	bls.n	c386 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    c392:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    c394:	2cff      	cmp	r4, #255	; 0xff
    c396:	d8f4      	bhi.n	c382 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    c398:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    c39a:	2300      	movs	r3, #0
    c39c:	e7f1      	b.n	c382 <_sercom_get_sync_baud_val+0xc>
	...

0000c3a0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    c3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3a2:	b083      	sub	sp, #12
    c3a4:	000f      	movs	r7, r1
    c3a6:	0016      	movs	r6, r2
    c3a8:	aa08      	add	r2, sp, #32
    c3aa:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    c3ac:	0004      	movs	r4, r0
    c3ae:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    c3b0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    c3b2:	42bc      	cmp	r4, r7
    c3b4:	d902      	bls.n	c3bc <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    c3b6:	0010      	movs	r0, r2
    c3b8:	b003      	add	sp, #12
    c3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    c3bc:	2b00      	cmp	r3, #0
    c3be:	d114      	bne.n	c3ea <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    c3c0:	0002      	movs	r2, r0
    c3c2:	0008      	movs	r0, r1
    c3c4:	2100      	movs	r1, #0
    c3c6:	4c19      	ldr	r4, [pc, #100]	; (c42c <_sercom_get_async_baud_val+0x8c>)
    c3c8:	47a0      	blx	r4
    c3ca:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    c3cc:	003a      	movs	r2, r7
    c3ce:	2300      	movs	r3, #0
    c3d0:	2000      	movs	r0, #0
    c3d2:	4c17      	ldr	r4, [pc, #92]	; (c430 <_sercom_get_async_baud_val+0x90>)
    c3d4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    c3d6:	2200      	movs	r2, #0
    c3d8:	2301      	movs	r3, #1
    c3da:	1a12      	subs	r2, r2, r0
    c3dc:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    c3de:	0c12      	lsrs	r2, r2, #16
    c3e0:	041b      	lsls	r3, r3, #16
    c3e2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    c3e4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    c3e6:	2200      	movs	r2, #0
    c3e8:	e7e5      	b.n	c3b6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    c3ea:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    c3ec:	2b01      	cmp	r3, #1
    c3ee:	d1f9      	bne.n	c3e4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    c3f0:	000a      	movs	r2, r1
    c3f2:	2300      	movs	r3, #0
    c3f4:	2100      	movs	r1, #0
    c3f6:	4c0d      	ldr	r4, [pc, #52]	; (c42c <_sercom_get_async_baud_val+0x8c>)
    c3f8:	47a0      	blx	r4
    c3fa:	0002      	movs	r2, r0
    c3fc:	000b      	movs	r3, r1
    c3fe:	9200      	str	r2, [sp, #0]
    c400:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    c402:	0038      	movs	r0, r7
    c404:	2100      	movs	r1, #0
    c406:	4c0a      	ldr	r4, [pc, #40]	; (c430 <_sercom_get_async_baud_val+0x90>)
    c408:	47a0      	blx	r4
    c40a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    c40c:	2380      	movs	r3, #128	; 0x80
    c40e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    c410:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    c412:	4298      	cmp	r0, r3
    c414:	d8cf      	bhi.n	c3b6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    c416:	0f79      	lsrs	r1, r7, #29
    c418:	00f8      	lsls	r0, r7, #3
    c41a:	9a00      	ldr	r2, [sp, #0]
    c41c:	9b01      	ldr	r3, [sp, #4]
    c41e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    c420:	00ea      	lsls	r2, r5, #3
    c422:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    c424:	b2d2      	uxtb	r2, r2
    c426:	0352      	lsls	r2, r2, #13
    c428:	432a      	orrs	r2, r5
    c42a:	e7db      	b.n	c3e4 <_sercom_get_async_baud_val+0x44>
    c42c:	00011601 	.word	0x00011601
    c430:	0000c2bd 	.word	0x0000c2bd

0000c434 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    c434:	b510      	push	{r4, lr}
    c436:	b082      	sub	sp, #8
    c438:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    c43a:	4b0e      	ldr	r3, [pc, #56]	; (c474 <sercom_set_gclk_generator+0x40>)
    c43c:	781b      	ldrb	r3, [r3, #0]
    c43e:	2b00      	cmp	r3, #0
    c440:	d007      	beq.n	c452 <sercom_set_gclk_generator+0x1e>
    c442:	2900      	cmp	r1, #0
    c444:	d105      	bne.n	c452 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    c446:	4b0b      	ldr	r3, [pc, #44]	; (c474 <sercom_set_gclk_generator+0x40>)
    c448:	785b      	ldrb	r3, [r3, #1]
    c44a:	4283      	cmp	r3, r0
    c44c:	d010      	beq.n	c470 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    c44e:	201d      	movs	r0, #29
    c450:	e00c      	b.n	c46c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    c452:	a901      	add	r1, sp, #4
    c454:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    c456:	2013      	movs	r0, #19
    c458:	4b07      	ldr	r3, [pc, #28]	; (c478 <sercom_set_gclk_generator+0x44>)
    c45a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    c45c:	2013      	movs	r0, #19
    c45e:	4b07      	ldr	r3, [pc, #28]	; (c47c <sercom_set_gclk_generator+0x48>)
    c460:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    c462:	4b04      	ldr	r3, [pc, #16]	; (c474 <sercom_set_gclk_generator+0x40>)
    c464:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    c466:	2201      	movs	r2, #1
    c468:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    c46a:	2000      	movs	r0, #0
}
    c46c:	b002      	add	sp, #8
    c46e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    c470:	2000      	movs	r0, #0
    c472:	e7fb      	b.n	c46c <sercom_set_gclk_generator+0x38>
    c474:	20000230 	.word	0x20000230
    c478:	0000d96d 	.word	0x0000d96d
    c47c:	0000d8e1 	.word	0x0000d8e1

0000c480 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    c480:	4b40      	ldr	r3, [pc, #256]	; (c584 <_sercom_get_default_pad+0x104>)
    c482:	4298      	cmp	r0, r3
    c484:	d031      	beq.n	c4ea <_sercom_get_default_pad+0x6a>
    c486:	d90a      	bls.n	c49e <_sercom_get_default_pad+0x1e>
    c488:	4b3f      	ldr	r3, [pc, #252]	; (c588 <_sercom_get_default_pad+0x108>)
    c48a:	4298      	cmp	r0, r3
    c48c:	d04d      	beq.n	c52a <_sercom_get_default_pad+0xaa>
    c48e:	4b3f      	ldr	r3, [pc, #252]	; (c58c <_sercom_get_default_pad+0x10c>)
    c490:	4298      	cmp	r0, r3
    c492:	d05a      	beq.n	c54a <_sercom_get_default_pad+0xca>
    c494:	4b3e      	ldr	r3, [pc, #248]	; (c590 <_sercom_get_default_pad+0x110>)
    c496:	4298      	cmp	r0, r3
    c498:	d037      	beq.n	c50a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    c49a:	2000      	movs	r0, #0
}
    c49c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    c49e:	4b3d      	ldr	r3, [pc, #244]	; (c594 <_sercom_get_default_pad+0x114>)
    c4a0:	4298      	cmp	r0, r3
    c4a2:	d00c      	beq.n	c4be <_sercom_get_default_pad+0x3e>
    c4a4:	4b3c      	ldr	r3, [pc, #240]	; (c598 <_sercom_get_default_pad+0x118>)
    c4a6:	4298      	cmp	r0, r3
    c4a8:	d1f7      	bne.n	c49a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c4aa:	2901      	cmp	r1, #1
    c4ac:	d017      	beq.n	c4de <_sercom_get_default_pad+0x5e>
    c4ae:	2900      	cmp	r1, #0
    c4b0:	d05d      	beq.n	c56e <_sercom_get_default_pad+0xee>
    c4b2:	2902      	cmp	r1, #2
    c4b4:	d015      	beq.n	c4e2 <_sercom_get_default_pad+0x62>
    c4b6:	2903      	cmp	r1, #3
    c4b8:	d015      	beq.n	c4e6 <_sercom_get_default_pad+0x66>
	return 0;
    c4ba:	2000      	movs	r0, #0
    c4bc:	e7ee      	b.n	c49c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c4be:	2901      	cmp	r1, #1
    c4c0:	d007      	beq.n	c4d2 <_sercom_get_default_pad+0x52>
    c4c2:	2900      	cmp	r1, #0
    c4c4:	d051      	beq.n	c56a <_sercom_get_default_pad+0xea>
    c4c6:	2902      	cmp	r1, #2
    c4c8:	d005      	beq.n	c4d6 <_sercom_get_default_pad+0x56>
    c4ca:	2903      	cmp	r1, #3
    c4cc:	d005      	beq.n	c4da <_sercom_get_default_pad+0x5a>
	return 0;
    c4ce:	2000      	movs	r0, #0
    c4d0:	e7e4      	b.n	c49c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c4d2:	4832      	ldr	r0, [pc, #200]	; (c59c <_sercom_get_default_pad+0x11c>)
    c4d4:	e7e2      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c4d6:	4832      	ldr	r0, [pc, #200]	; (c5a0 <_sercom_get_default_pad+0x120>)
    c4d8:	e7e0      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c4da:	4832      	ldr	r0, [pc, #200]	; (c5a4 <_sercom_get_default_pad+0x124>)
    c4dc:	e7de      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c4de:	4832      	ldr	r0, [pc, #200]	; (c5a8 <_sercom_get_default_pad+0x128>)
    c4e0:	e7dc      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c4e2:	4832      	ldr	r0, [pc, #200]	; (c5ac <_sercom_get_default_pad+0x12c>)
    c4e4:	e7da      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c4e6:	4832      	ldr	r0, [pc, #200]	; (c5b0 <_sercom_get_default_pad+0x130>)
    c4e8:	e7d8      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c4ea:	2901      	cmp	r1, #1
    c4ec:	d007      	beq.n	c4fe <_sercom_get_default_pad+0x7e>
    c4ee:	2900      	cmp	r1, #0
    c4f0:	d03f      	beq.n	c572 <_sercom_get_default_pad+0xf2>
    c4f2:	2902      	cmp	r1, #2
    c4f4:	d005      	beq.n	c502 <_sercom_get_default_pad+0x82>
    c4f6:	2903      	cmp	r1, #3
    c4f8:	d005      	beq.n	c506 <_sercom_get_default_pad+0x86>
	return 0;
    c4fa:	2000      	movs	r0, #0
    c4fc:	e7ce      	b.n	c49c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c4fe:	482d      	ldr	r0, [pc, #180]	; (c5b4 <_sercom_get_default_pad+0x134>)
    c500:	e7cc      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c502:	482d      	ldr	r0, [pc, #180]	; (c5b8 <_sercom_get_default_pad+0x138>)
    c504:	e7ca      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c506:	482d      	ldr	r0, [pc, #180]	; (c5bc <_sercom_get_default_pad+0x13c>)
    c508:	e7c8      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c50a:	2901      	cmp	r1, #1
    c50c:	d007      	beq.n	c51e <_sercom_get_default_pad+0x9e>
    c50e:	2900      	cmp	r1, #0
    c510:	d031      	beq.n	c576 <_sercom_get_default_pad+0xf6>
    c512:	2902      	cmp	r1, #2
    c514:	d005      	beq.n	c522 <_sercom_get_default_pad+0xa2>
    c516:	2903      	cmp	r1, #3
    c518:	d005      	beq.n	c526 <_sercom_get_default_pad+0xa6>
	return 0;
    c51a:	2000      	movs	r0, #0
    c51c:	e7be      	b.n	c49c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c51e:	4828      	ldr	r0, [pc, #160]	; (c5c0 <_sercom_get_default_pad+0x140>)
    c520:	e7bc      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c522:	4828      	ldr	r0, [pc, #160]	; (c5c4 <_sercom_get_default_pad+0x144>)
    c524:	e7ba      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c526:	4828      	ldr	r0, [pc, #160]	; (c5c8 <_sercom_get_default_pad+0x148>)
    c528:	e7b8      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c52a:	2901      	cmp	r1, #1
    c52c:	d007      	beq.n	c53e <_sercom_get_default_pad+0xbe>
    c52e:	2900      	cmp	r1, #0
    c530:	d023      	beq.n	c57a <_sercom_get_default_pad+0xfa>
    c532:	2902      	cmp	r1, #2
    c534:	d005      	beq.n	c542 <_sercom_get_default_pad+0xc2>
    c536:	2903      	cmp	r1, #3
    c538:	d005      	beq.n	c546 <_sercom_get_default_pad+0xc6>
	return 0;
    c53a:	2000      	movs	r0, #0
    c53c:	e7ae      	b.n	c49c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c53e:	4823      	ldr	r0, [pc, #140]	; (c5cc <_sercom_get_default_pad+0x14c>)
    c540:	e7ac      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c542:	4823      	ldr	r0, [pc, #140]	; (c5d0 <_sercom_get_default_pad+0x150>)
    c544:	e7aa      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c546:	4823      	ldr	r0, [pc, #140]	; (c5d4 <_sercom_get_default_pad+0x154>)
    c548:	e7a8      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c54a:	2901      	cmp	r1, #1
    c54c:	d007      	beq.n	c55e <_sercom_get_default_pad+0xde>
    c54e:	2900      	cmp	r1, #0
    c550:	d015      	beq.n	c57e <_sercom_get_default_pad+0xfe>
    c552:	2902      	cmp	r1, #2
    c554:	d005      	beq.n	c562 <_sercom_get_default_pad+0xe2>
    c556:	2903      	cmp	r1, #3
    c558:	d005      	beq.n	c566 <_sercom_get_default_pad+0xe6>
	return 0;
    c55a:	2000      	movs	r0, #0
    c55c:	e79e      	b.n	c49c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    c55e:	481e      	ldr	r0, [pc, #120]	; (c5d8 <_sercom_get_default_pad+0x158>)
    c560:	e79c      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c562:	481e      	ldr	r0, [pc, #120]	; (c5dc <_sercom_get_default_pad+0x15c>)
    c564:	e79a      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c566:	481e      	ldr	r0, [pc, #120]	; (c5e0 <_sercom_get_default_pad+0x160>)
    c568:	e798      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c56a:	481e      	ldr	r0, [pc, #120]	; (c5e4 <_sercom_get_default_pad+0x164>)
    c56c:	e796      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c56e:	2003      	movs	r0, #3
    c570:	e794      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c572:	481d      	ldr	r0, [pc, #116]	; (c5e8 <_sercom_get_default_pad+0x168>)
    c574:	e792      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c576:	481d      	ldr	r0, [pc, #116]	; (c5ec <_sercom_get_default_pad+0x16c>)
    c578:	e790      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c57a:	481d      	ldr	r0, [pc, #116]	; (c5f0 <_sercom_get_default_pad+0x170>)
    c57c:	e78e      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c57e:	481d      	ldr	r0, [pc, #116]	; (c5f4 <_sercom_get_default_pad+0x174>)
    c580:	e78c      	b.n	c49c <_sercom_get_default_pad+0x1c>
    c582:	46c0      	nop			; (mov r8, r8)
    c584:	42001000 	.word	0x42001000
    c588:	42001800 	.word	0x42001800
    c58c:	42001c00 	.word	0x42001c00
    c590:	42001400 	.word	0x42001400
    c594:	42000800 	.word	0x42000800
    c598:	42000c00 	.word	0x42000c00
    c59c:	00050003 	.word	0x00050003
    c5a0:	00060003 	.word	0x00060003
    c5a4:	00070003 	.word	0x00070003
    c5a8:	00010003 	.word	0x00010003
    c5ac:	001e0003 	.word	0x001e0003
    c5b0:	001f0003 	.word	0x001f0003
    c5b4:	00090003 	.word	0x00090003
    c5b8:	000a0003 	.word	0x000a0003
    c5bc:	000b0003 	.word	0x000b0003
    c5c0:	00110003 	.word	0x00110003
    c5c4:	00120003 	.word	0x00120003
    c5c8:	00130003 	.word	0x00130003
    c5cc:	000d0003 	.word	0x000d0003
    c5d0:	000e0003 	.word	0x000e0003
    c5d4:	000f0003 	.word	0x000f0003
    c5d8:	00170003 	.word	0x00170003
    c5dc:	00180003 	.word	0x00180003
    c5e0:	00190003 	.word	0x00190003
    c5e4:	00040003 	.word	0x00040003
    c5e8:	00080003 	.word	0x00080003
    c5ec:	00100003 	.word	0x00100003
    c5f0:	000c0003 	.word	0x000c0003
    c5f4:	00160003 	.word	0x00160003

0000c5f8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    c5f8:	b530      	push	{r4, r5, lr}
    c5fa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    c5fc:	4b0b      	ldr	r3, [pc, #44]	; (c62c <_sercom_get_sercom_inst_index+0x34>)
    c5fe:	466a      	mov	r2, sp
    c600:	cb32      	ldmia	r3!, {r1, r4, r5}
    c602:	c232      	stmia	r2!, {r1, r4, r5}
    c604:	cb32      	ldmia	r3!, {r1, r4, r5}
    c606:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    c608:	9b00      	ldr	r3, [sp, #0]
    c60a:	4283      	cmp	r3, r0
    c60c:	d00b      	beq.n	c626 <_sercom_get_sercom_inst_index+0x2e>
    c60e:	2301      	movs	r3, #1
    c610:	009a      	lsls	r2, r3, #2
    c612:	4669      	mov	r1, sp
    c614:	5852      	ldr	r2, [r2, r1]
    c616:	4282      	cmp	r2, r0
    c618:	d006      	beq.n	c628 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    c61a:	3301      	adds	r3, #1
    c61c:	2b06      	cmp	r3, #6
    c61e:	d1f7      	bne.n	c610 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    c620:	2000      	movs	r0, #0
}
    c622:	b007      	add	sp, #28
    c624:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    c626:	2300      	movs	r3, #0
			return i;
    c628:	b2d8      	uxtb	r0, r3
    c62a:	e7fa      	b.n	c622 <_sercom_get_sercom_inst_index+0x2a>
    c62c:	00013ddc 	.word	0x00013ddc

0000c630 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    c630:	4770      	bx	lr
	...

0000c634 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    c634:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    c636:	4b0a      	ldr	r3, [pc, #40]	; (c660 <_sercom_set_handler+0x2c>)
    c638:	781b      	ldrb	r3, [r3, #0]
    c63a:	2b00      	cmp	r3, #0
    c63c:	d10c      	bne.n	c658 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    c63e:	4f09      	ldr	r7, [pc, #36]	; (c664 <_sercom_set_handler+0x30>)
    c640:	4e09      	ldr	r6, [pc, #36]	; (c668 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    c642:	4d0a      	ldr	r5, [pc, #40]	; (c66c <_sercom_set_handler+0x38>)
    c644:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    c646:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    c648:	195a      	adds	r2, r3, r5
    c64a:	6014      	str	r4, [r2, #0]
    c64c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    c64e:	2b18      	cmp	r3, #24
    c650:	d1f9      	bne.n	c646 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    c652:	2201      	movs	r2, #1
    c654:	4b02      	ldr	r3, [pc, #8]	; (c660 <_sercom_set_handler+0x2c>)
    c656:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    c658:	0080      	lsls	r0, r0, #2
    c65a:	4b02      	ldr	r3, [pc, #8]	; (c664 <_sercom_set_handler+0x30>)
    c65c:	50c1      	str	r1, [r0, r3]
}
    c65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c660:	20000232 	.word	0x20000232
    c664:	20000234 	.word	0x20000234
    c668:	0000c631 	.word	0x0000c631
    c66c:	200005d4 	.word	0x200005d4

0000c670 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    c670:	b500      	push	{lr}
    c672:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    c674:	2309      	movs	r3, #9
    c676:	466a      	mov	r2, sp
    c678:	7013      	strb	r3, [r2, #0]
    c67a:	3301      	adds	r3, #1
    c67c:	7053      	strb	r3, [r2, #1]
    c67e:	3301      	adds	r3, #1
    c680:	7093      	strb	r3, [r2, #2]
    c682:	3301      	adds	r3, #1
    c684:	70d3      	strb	r3, [r2, #3]
    c686:	3301      	adds	r3, #1
    c688:	7113      	strb	r3, [r2, #4]
    c68a:	3301      	adds	r3, #1
    c68c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    c68e:	4b03      	ldr	r3, [pc, #12]	; (c69c <_sercom_get_interrupt_vector+0x2c>)
    c690:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    c692:	466b      	mov	r3, sp
    c694:	5618      	ldrsb	r0, [r3, r0]
}
    c696:	b003      	add	sp, #12
    c698:	bd00      	pop	{pc}
    c69a:	46c0      	nop			; (mov r8, r8)
    c69c:	0000c5f9 	.word	0x0000c5f9

0000c6a0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    c6a0:	b510      	push	{r4, lr}
    c6a2:	4b02      	ldr	r3, [pc, #8]	; (c6ac <SERCOM0_Handler+0xc>)
    c6a4:	681b      	ldr	r3, [r3, #0]
    c6a6:	2000      	movs	r0, #0
    c6a8:	4798      	blx	r3
    c6aa:	bd10      	pop	{r4, pc}
    c6ac:	20000234 	.word	0x20000234

0000c6b0 <SERCOM1_Handler>:
    c6b0:	b510      	push	{r4, lr}
    c6b2:	4b02      	ldr	r3, [pc, #8]	; (c6bc <SERCOM1_Handler+0xc>)
    c6b4:	685b      	ldr	r3, [r3, #4]
    c6b6:	2001      	movs	r0, #1
    c6b8:	4798      	blx	r3
    c6ba:	bd10      	pop	{r4, pc}
    c6bc:	20000234 	.word	0x20000234

0000c6c0 <SERCOM2_Handler>:
    c6c0:	b510      	push	{r4, lr}
    c6c2:	4b02      	ldr	r3, [pc, #8]	; (c6cc <SERCOM2_Handler+0xc>)
    c6c4:	689b      	ldr	r3, [r3, #8]
    c6c6:	2002      	movs	r0, #2
    c6c8:	4798      	blx	r3
    c6ca:	bd10      	pop	{r4, pc}
    c6cc:	20000234 	.word	0x20000234

0000c6d0 <SERCOM3_Handler>:
    c6d0:	b510      	push	{r4, lr}
    c6d2:	4b02      	ldr	r3, [pc, #8]	; (c6dc <SERCOM3_Handler+0xc>)
    c6d4:	68db      	ldr	r3, [r3, #12]
    c6d6:	2003      	movs	r0, #3
    c6d8:	4798      	blx	r3
    c6da:	bd10      	pop	{r4, pc}
    c6dc:	20000234 	.word	0x20000234

0000c6e0 <SERCOM4_Handler>:
    c6e0:	b510      	push	{r4, lr}
    c6e2:	4b02      	ldr	r3, [pc, #8]	; (c6ec <SERCOM4_Handler+0xc>)
    c6e4:	691b      	ldr	r3, [r3, #16]
    c6e6:	2004      	movs	r0, #4
    c6e8:	4798      	blx	r3
    c6ea:	bd10      	pop	{r4, pc}
    c6ec:	20000234 	.word	0x20000234

0000c6f0 <SERCOM5_Handler>:
    c6f0:	b510      	push	{r4, lr}
    c6f2:	4b02      	ldr	r3, [pc, #8]	; (c6fc <SERCOM5_Handler+0xc>)
    c6f4:	695b      	ldr	r3, [r3, #20]
    c6f6:	2005      	movs	r0, #5
    c6f8:	4798      	blx	r3
    c6fa:	bd10      	pop	{r4, pc}
    c6fc:	20000234 	.word	0x20000234

0000c700 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    c700:	b5f0      	push	{r4, r5, r6, r7, lr}
    c702:	b08b      	sub	sp, #44	; 0x2c
    c704:	0005      	movs	r5, r0
    c706:	000c      	movs	r4, r1
    c708:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    c70a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    c70c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    c70e:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    c710:	079b      	lsls	r3, r3, #30
    c712:	d501      	bpl.n	c718 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    c714:	b00b      	add	sp, #44	; 0x2c
    c716:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    c718:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    c71a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    c71c:	07db      	lsls	r3, r3, #31
    c71e:	d4f9      	bmi.n	c714 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    c720:	0008      	movs	r0, r1
    c722:	4b60      	ldr	r3, [pc, #384]	; (c8a4 <spi_init+0x1a4>)
    c724:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    c726:	4a60      	ldr	r2, [pc, #384]	; (c8a8 <spi_init+0x1a8>)
    c728:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    c72a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    c72c:	2301      	movs	r3, #1
    c72e:	40bb      	lsls	r3, r7
    c730:	430b      	orrs	r3, r1
    c732:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    c734:	a909      	add	r1, sp, #36	; 0x24
    c736:	2724      	movs	r7, #36	; 0x24
    c738:	5df3      	ldrb	r3, [r6, r7]
    c73a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    c73c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    c73e:	b2c3      	uxtb	r3, r0
    c740:	9301      	str	r3, [sp, #4]
    c742:	0018      	movs	r0, r3
    c744:	4b59      	ldr	r3, [pc, #356]	; (c8ac <spi_init+0x1ac>)
    c746:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    c748:	9801      	ldr	r0, [sp, #4]
    c74a:	4b59      	ldr	r3, [pc, #356]	; (c8b0 <spi_init+0x1b0>)
    c74c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    c74e:	5df0      	ldrb	r0, [r6, r7]
    c750:	2100      	movs	r1, #0
    c752:	4b58      	ldr	r3, [pc, #352]	; (c8b4 <spi_init+0x1b4>)
    c754:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    c756:	7833      	ldrb	r3, [r6, #0]
    c758:	2b01      	cmp	r3, #1
    c75a:	d038      	beq.n	c7ce <spi_init+0xce>
    c75c:	002b      	movs	r3, r5
    c75e:	330c      	adds	r3, #12
    c760:	0029      	movs	r1, r5
    c762:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    c764:	2200      	movs	r2, #0
    c766:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    c768:	428b      	cmp	r3, r1
    c76a:	d1fc      	bne.n	c766 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    c76c:	2300      	movs	r3, #0
    c76e:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    c770:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    c772:	2400      	movs	r4, #0
    c774:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    c776:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    c778:	3336      	adds	r3, #54	; 0x36
    c77a:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    c77c:	3301      	adds	r3, #1
    c77e:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    c780:	3301      	adds	r3, #1
    c782:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    c784:	3b35      	subs	r3, #53	; 0x35
    c786:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    c788:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    c78a:	6828      	ldr	r0, [r5, #0]
    c78c:	4b45      	ldr	r3, [pc, #276]	; (c8a4 <spi_init+0x1a4>)
    c78e:	4798      	blx	r3
    c790:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    c792:	4949      	ldr	r1, [pc, #292]	; (c8b8 <spi_init+0x1b8>)
    c794:	4b49      	ldr	r3, [pc, #292]	; (c8bc <spi_init+0x1bc>)
    c796:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    c798:	00bf      	lsls	r7, r7, #2
    c79a:	4b49      	ldr	r3, [pc, #292]	; (c8c0 <spi_init+0x1c0>)
    c79c:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    c79e:	682f      	ldr	r7, [r5, #0]
    c7a0:	ab04      	add	r3, sp, #16
    c7a2:	2280      	movs	r2, #128	; 0x80
    c7a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    c7a6:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    c7a8:	3a7f      	subs	r2, #127	; 0x7f
    c7aa:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    c7ac:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    c7ae:	7833      	ldrb	r3, [r6, #0]
    c7b0:	2b00      	cmp	r3, #0
    c7b2:	d102      	bne.n	c7ba <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    c7b4:	2200      	movs	r2, #0
    c7b6:	ab04      	add	r3, sp, #16
    c7b8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    c7ba:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    c7bc:	9305      	str	r3, [sp, #20]
    c7be:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    c7c0:	9306      	str	r3, [sp, #24]
    c7c2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    c7c4:	9307      	str	r3, [sp, #28]
    c7c6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    c7c8:	9308      	str	r3, [sp, #32]
    c7ca:	2400      	movs	r4, #0
    c7cc:	e00b      	b.n	c7e6 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    c7ce:	6823      	ldr	r3, [r4, #0]
    c7d0:	220c      	movs	r2, #12
    c7d2:	4313      	orrs	r3, r2
    c7d4:	6023      	str	r3, [r4, #0]
    c7d6:	e7c1      	b.n	c75c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    c7d8:	0038      	movs	r0, r7
    c7da:	4b3a      	ldr	r3, [pc, #232]	; (c8c4 <spi_init+0x1c4>)
    c7dc:	4798      	blx	r3
    c7de:	e00a      	b.n	c7f6 <spi_init+0xf6>
    c7e0:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    c7e2:	2c04      	cmp	r4, #4
    c7e4:	d010      	beq.n	c808 <spi_init+0x108>
    c7e6:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    c7e8:	00a3      	lsls	r3, r4, #2
    c7ea:	aa02      	add	r2, sp, #8
    c7ec:	200c      	movs	r0, #12
    c7ee:	1812      	adds	r2, r2, r0
    c7f0:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    c7f2:	2800      	cmp	r0, #0
    c7f4:	d0f0      	beq.n	c7d8 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    c7f6:	1c43      	adds	r3, r0, #1
    c7f8:	d0f2      	beq.n	c7e0 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    c7fa:	a904      	add	r1, sp, #16
    c7fc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    c7fe:	0c00      	lsrs	r0, r0, #16
    c800:	b2c0      	uxtb	r0, r0
    c802:	4b31      	ldr	r3, [pc, #196]	; (c8c8 <spi_init+0x1c8>)
    c804:	4798      	blx	r3
    c806:	e7eb      	b.n	c7e0 <spi_init+0xe0>
	module->mode             = config->mode;
    c808:	7833      	ldrb	r3, [r6, #0]
    c80a:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    c80c:	7c33      	ldrb	r3, [r6, #16]
    c80e:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    c810:	7cb3      	ldrb	r3, [r6, #18]
    c812:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    c814:	7d33      	ldrb	r3, [r6, #20]
    c816:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    c818:	2200      	movs	r2, #0
    c81a:	ab02      	add	r3, sp, #8
    c81c:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    c81e:	7833      	ldrb	r3, [r6, #0]
    c820:	2b01      	cmp	r3, #1
    c822:	d028      	beq.n	c876 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    c824:	6873      	ldr	r3, [r6, #4]
    c826:	68b2      	ldr	r2, [r6, #8]
    c828:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    c82a:	68f2      	ldr	r2, [r6, #12]
    c82c:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    c82e:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    c830:	7c72      	ldrb	r2, [r6, #17]
    c832:	2a00      	cmp	r2, #0
    c834:	d103      	bne.n	c83e <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    c836:	4a25      	ldr	r2, [pc, #148]	; (c8cc <spi_init+0x1cc>)
    c838:	7892      	ldrb	r2, [r2, #2]
    c83a:	0792      	lsls	r2, r2, #30
    c83c:	d501      	bpl.n	c842 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    c83e:	2280      	movs	r2, #128	; 0x80
    c840:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    c842:	7cb2      	ldrb	r2, [r6, #18]
    c844:	2a00      	cmp	r2, #0
    c846:	d002      	beq.n	c84e <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    c848:	2280      	movs	r2, #128	; 0x80
    c84a:	0292      	lsls	r2, r2, #10
    c84c:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    c84e:	7cf2      	ldrb	r2, [r6, #19]
    c850:	2a00      	cmp	r2, #0
    c852:	d002      	beq.n	c85a <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    c854:	2280      	movs	r2, #128	; 0x80
    c856:	0092      	lsls	r2, r2, #2
    c858:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    c85a:	7d32      	ldrb	r2, [r6, #20]
    c85c:	2a00      	cmp	r2, #0
    c85e:	d002      	beq.n	c866 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    c860:	2280      	movs	r2, #128	; 0x80
    c862:	0192      	lsls	r2, r2, #6
    c864:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    c866:	683a      	ldr	r2, [r7, #0]
    c868:	4313      	orrs	r3, r2
    c86a:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    c86c:	687b      	ldr	r3, [r7, #4]
    c86e:	430b      	orrs	r3, r1
    c870:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    c872:	2000      	movs	r0, #0
    c874:	e74e      	b.n	c714 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    c876:	6828      	ldr	r0, [r5, #0]
    c878:	4b0a      	ldr	r3, [pc, #40]	; (c8a4 <spi_init+0x1a4>)
    c87a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    c87c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    c87e:	b2c0      	uxtb	r0, r0
    c880:	4b13      	ldr	r3, [pc, #76]	; (c8d0 <spi_init+0x1d0>)
    c882:	4798      	blx	r3
    c884:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    c886:	ab02      	add	r3, sp, #8
    c888:	1d9a      	adds	r2, r3, #6
    c88a:	69b0      	ldr	r0, [r6, #24]
    c88c:	4b11      	ldr	r3, [pc, #68]	; (c8d4 <spi_init+0x1d4>)
    c88e:	4798      	blx	r3
    c890:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    c892:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    c894:	2b00      	cmp	r3, #0
    c896:	d000      	beq.n	c89a <spi_init+0x19a>
    c898:	e73c      	b.n	c714 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    c89a:	ab02      	add	r3, sp, #8
    c89c:	3306      	adds	r3, #6
    c89e:	781b      	ldrb	r3, [r3, #0]
    c8a0:	733b      	strb	r3, [r7, #12]
    c8a2:	e7bf      	b.n	c824 <spi_init+0x124>
    c8a4:	0000c5f9 	.word	0x0000c5f9
    c8a8:	40000400 	.word	0x40000400
    c8ac:	0000d96d 	.word	0x0000d96d
    c8b0:	0000d8e1 	.word	0x0000d8e1
    c8b4:	0000c435 	.word	0x0000c435
    c8b8:	0000cb6d 	.word	0x0000cb6d
    c8bc:	0000c635 	.word	0x0000c635
    c8c0:	200005d4 	.word	0x200005d4
    c8c4:	0000c481 	.word	0x0000c481
    c8c8:	0000da65 	.word	0x0000da65
    c8cc:	41002000 	.word	0x41002000
    c8d0:	0000d989 	.word	0x0000d989
    c8d4:	0000c377 	.word	0x0000c377

0000c8d8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    c8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8da:	46d6      	mov	lr, sl
    c8dc:	4647      	mov	r7, r8
    c8de:	b580      	push	{r7, lr}
    c8e0:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    c8e2:	2438      	movs	r4, #56	; 0x38
    c8e4:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    c8e6:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    c8e8:	2d05      	cmp	r5, #5
    c8ea:	d002      	beq.n	c8f2 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    c8ec:	3412      	adds	r4, #18
	if (length == 0) {
    c8ee:	2a00      	cmp	r2, #0
    c8f0:	d105      	bne.n	c8fe <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    c8f2:	0020      	movs	r0, r4
    c8f4:	b003      	add	sp, #12
    c8f6:	bc0c      	pop	{r2, r3}
    c8f8:	4690      	mov	r8, r2
    c8fa:	469a      	mov	sl, r3
    c8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    c8fe:	79c4      	ldrb	r4, [r0, #7]
    c900:	2c00      	cmp	r4, #0
    c902:	d144      	bne.n	c98e <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    c904:	341c      	adds	r4, #28
    c906:	e7f4      	b.n	c8f2 <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    c908:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c90a:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    c90c:	423c      	tst	r4, r7
    c90e:	d0fc      	beq.n	c90a <spi_read_buffer_wait+0x32>
    c910:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    c912:	423c      	tst	r4, r7
    c914:	d01a      	beq.n	c94c <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c916:	4644      	mov	r4, r8
    c918:	62ac      	str	r4, [r5, #40]	; 0x28
    c91a:	e017      	b.n	c94c <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c91c:	7984      	ldrb	r4, [r0, #6]
    c91e:	2c01      	cmp	r4, #1
    c920:	d026      	beq.n	c970 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    c922:	6aad      	ldr	r5, [r5, #40]	; 0x28
    c924:	b2ec      	uxtb	r4, r5
    c926:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    c928:	9c01      	ldr	r4, [sp, #4]
    c92a:	2c00      	cmp	r4, #0
    c92c:	d13a      	bne.n	c9a4 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    c92e:	1c75      	adds	r5, r6, #1
    c930:	b2ad      	uxth	r5, r5
    c932:	4664      	mov	r4, ip
    c934:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    c936:	7984      	ldrb	r4, [r0, #6]
    c938:	2c01      	cmp	r4, #1
    c93a:	d01e      	beq.n	c97a <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    c93c:	002e      	movs	r6, r5
	while (length--) {
    c93e:	3a01      	subs	r2, #1
    c940:	b292      	uxth	r2, r2
    c942:	4552      	cmp	r2, sl
    c944:	d01f      	beq.n	c986 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    c946:	7944      	ldrb	r4, [r0, #5]
    c948:	2c01      	cmp	r4, #1
    c94a:	d0dd      	beq.n	c908 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    c94c:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    c94e:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    c950:	421c      	tst	r4, r3
    c952:	d0fc      	beq.n	c94e <spi_read_buffer_wait+0x76>
    c954:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    c956:	421c      	tst	r4, r3
    c958:	d017      	beq.n	c98a <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c95a:	8b6c      	ldrh	r4, [r5, #26]
    c95c:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    c95e:	2400      	movs	r4, #0
    c960:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    c962:	4664      	mov	r4, ip
    c964:	421c      	tst	r4, r3
    c966:	d0d9      	beq.n	c91c <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    c968:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    c96a:	241e      	movs	r4, #30
    c96c:	9401      	str	r4, [sp, #4]
    c96e:	e7d5      	b.n	c91c <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    c970:	6aac      	ldr	r4, [r5, #40]	; 0x28
    c972:	05e4      	lsls	r4, r4, #23
    c974:	0de4      	lsrs	r4, r4, #23
    c976:	46a4      	mov	ip, r4
    c978:	e7d6      	b.n	c928 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    c97a:	3602      	adds	r6, #2
    c97c:	b2b6      	uxth	r6, r6
    c97e:	4664      	mov	r4, ip
    c980:	0a24      	lsrs	r4, r4, #8
    c982:	554c      	strb	r4, [r1, r5]
    c984:	e7db      	b.n	c93e <spi_read_buffer_wait+0x66>
    c986:	9c01      	ldr	r4, [sp, #4]
    c988:	e7b3      	b.n	c8f2 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    c98a:	2410      	movs	r4, #16
    c98c:	e7b1      	b.n	c8f2 <spi_read_buffer_wait+0x1a>
	while (length--) {
    c98e:	3a01      	subs	r2, #1
    c990:	b292      	uxth	r2, r2
    c992:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    c994:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    c996:	05db      	lsls	r3, r3, #23
    c998:	0ddb      	lsrs	r3, r3, #23
    c99a:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    c99c:	2304      	movs	r3, #4
	while (length--) {
    c99e:	4c02      	ldr	r4, [pc, #8]	; (c9a8 <spi_read_buffer_wait+0xd0>)
    c9a0:	46a2      	mov	sl, r4
    c9a2:	e7d0      	b.n	c946 <spi_read_buffer_wait+0x6e>
    c9a4:	9c01      	ldr	r4, [sp, #4]
    c9a6:	e7a4      	b.n	c8f2 <spi_read_buffer_wait+0x1a>
    c9a8:	0000ffff 	.word	0x0000ffff

0000c9ac <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    c9ac:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    c9ae:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    c9b0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    c9b2:	2c01      	cmp	r4, #1
    c9b4:	d001      	beq.n	c9ba <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    c9b6:	0018      	movs	r0, r3
    c9b8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    c9ba:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    c9bc:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    c9be:	2c00      	cmp	r4, #0
    c9c0:	d1f9      	bne.n	c9b6 <spi_select_slave+0xa>
		if (select) {
    c9c2:	2a00      	cmp	r2, #0
    c9c4:	d058      	beq.n	ca78 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    c9c6:	784b      	ldrb	r3, [r1, #1]
    c9c8:	2b00      	cmp	r3, #0
    c9ca:	d044      	beq.n	ca56 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    c9cc:	6803      	ldr	r3, [r0, #0]
    c9ce:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    c9d0:	07db      	lsls	r3, r3, #31
    c9d2:	d410      	bmi.n	c9f6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    c9d4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    c9d6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    c9d8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c9da:	2900      	cmp	r1, #0
    c9dc:	d104      	bne.n	c9e8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    c9de:	0953      	lsrs	r3, r2, #5
    c9e0:	01db      	lsls	r3, r3, #7
    c9e2:	492e      	ldr	r1, [pc, #184]	; (ca9c <spi_select_slave+0xf0>)
    c9e4:	468c      	mov	ip, r1
    c9e6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c9e8:	211f      	movs	r1, #31
    c9ea:	4011      	ands	r1, r2
    c9ec:	2201      	movs	r2, #1
    c9ee:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    c9f0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    c9f2:	2305      	movs	r3, #5
    c9f4:	e7df      	b.n	c9b6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    c9f6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    c9f8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    c9fa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    c9fc:	2c00      	cmp	r4, #0
    c9fe:	d104      	bne.n	ca0a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    ca00:	0953      	lsrs	r3, r2, #5
    ca02:	01db      	lsls	r3, r3, #7
    ca04:	4c25      	ldr	r4, [pc, #148]	; (ca9c <spi_select_slave+0xf0>)
    ca06:	46a4      	mov	ip, r4
    ca08:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ca0a:	241f      	movs	r4, #31
    ca0c:	4014      	ands	r4, r2
    ca0e:	2201      	movs	r2, #1
    ca10:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    ca12:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    ca14:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ca16:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    ca18:	07d2      	lsls	r2, r2, #31
    ca1a:	d501      	bpl.n	ca20 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ca1c:	788a      	ldrb	r2, [r1, #2]
    ca1e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    ca20:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    ca22:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    ca24:	2a00      	cmp	r2, #0
    ca26:	d1c6      	bne.n	c9b6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ca28:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    ca2a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ca2c:	7e13      	ldrb	r3, [r2, #24]
    ca2e:	420b      	tst	r3, r1
    ca30:	d0fc      	beq.n	ca2c <spi_select_slave+0x80>
    ca32:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    ca34:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    ca36:	0749      	lsls	r1, r1, #29
    ca38:	d5bd      	bpl.n	c9b6 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ca3a:	8b53      	ldrh	r3, [r2, #26]
    ca3c:	075b      	lsls	r3, r3, #29
    ca3e:	d501      	bpl.n	ca44 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ca40:	2304      	movs	r3, #4
    ca42:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ca44:	7983      	ldrb	r3, [r0, #6]
    ca46:	2b01      	cmp	r3, #1
    ca48:	d002      	beq.n	ca50 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ca4a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ca4c:	2300      	movs	r3, #0
    ca4e:	e7b2      	b.n	c9b6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    ca50:	6a93      	ldr	r3, [r2, #40]	; 0x28
    ca52:	2300      	movs	r3, #0
    ca54:	e7af      	b.n	c9b6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    ca56:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    ca58:	09d1      	lsrs	r1, r2, #7
		return NULL;
    ca5a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    ca5c:	2900      	cmp	r1, #0
    ca5e:	d104      	bne.n	ca6a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    ca60:	0953      	lsrs	r3, r2, #5
    ca62:	01db      	lsls	r3, r3, #7
    ca64:	490d      	ldr	r1, [pc, #52]	; (ca9c <spi_select_slave+0xf0>)
    ca66:	468c      	mov	ip, r1
    ca68:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ca6a:	211f      	movs	r1, #31
    ca6c:	4011      	ands	r1, r2
    ca6e:	2201      	movs	r2, #1
    ca70:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    ca72:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    ca74:	2300      	movs	r3, #0
    ca76:	e79e      	b.n	c9b6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    ca78:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    ca7a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    ca7c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    ca7e:	2900      	cmp	r1, #0
    ca80:	d104      	bne.n	ca8c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    ca82:	0953      	lsrs	r3, r2, #5
    ca84:	01db      	lsls	r3, r3, #7
    ca86:	4905      	ldr	r1, [pc, #20]	; (ca9c <spi_select_slave+0xf0>)
    ca88:	468c      	mov	ip, r1
    ca8a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ca8c:	211f      	movs	r1, #31
    ca8e:	4011      	ands	r1, r2
    ca90:	2201      	movs	r2, #1
    ca92:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    ca94:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    ca96:	2300      	movs	r3, #0
    ca98:	e78d      	b.n	c9b6 <spi_select_slave+0xa>
    ca9a:	46c0      	nop			; (mov r8, r8)
    ca9c:	41004400 	.word	0x41004400

0000caa0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    caa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    caa2:	46de      	mov	lr, fp
    caa4:	4657      	mov	r7, sl
    caa6:	464e      	mov	r6, r9
    caa8:	4645      	mov	r5, r8
    caaa:	b5e0      	push	{r5, r6, r7, lr}
    caac:	b083      	sub	sp, #12
    caae:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    cab0:	2338      	movs	r3, #56	; 0x38
    cab2:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    cab4:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    cab6:	2c05      	cmp	r4, #5
    cab8:	d002      	beq.n	cac0 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    caba:	3312      	adds	r3, #18
	if (length == 0) {
    cabc:	2a00      	cmp	r2, #0
    cabe:	d14b      	bne.n	cb58 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    cac0:	0018      	movs	r0, r3
    cac2:	b003      	add	sp, #12
    cac4:	bc3c      	pop	{r2, r3, r4, r5}
    cac6:	4690      	mov	r8, r2
    cac8:	4699      	mov	r9, r3
    caca:	46a2      	mov	sl, r4
    cacc:	46ab      	mov	fp, r5
    cace:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    cad0:	3702      	adds	r7, #2
    cad2:	b2bf      	uxth	r7, r7
    cad4:	4641      	mov	r1, r8
    cad6:	4653      	mov	r3, sl
    cad8:	5c59      	ldrb	r1, [r3, r1]
    cada:	0209      	lsls	r1, r1, #8
    cadc:	465b      	mov	r3, fp
    cade:	430b      	orrs	r3, r1
    cae0:	e018      	b.n	cb14 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cae2:	7983      	ldrb	r3, [r0, #6]
    cae4:	2b01      	cmp	r3, #1
    cae6:	d02a      	beq.n	cb3e <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    cae8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    caea:	3e01      	subs	r6, #1
    caec:	b2b6      	uxth	r6, r6
    caee:	4566      	cmp	r6, ip
    caf0:	d027      	beq.n	cb42 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    caf2:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    caf4:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    caf6:	4223      	tst	r3, r4
    caf8:	d0fc      	beq.n	caf4 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    cafa:	1c7b      	adds	r3, r7, #1
    cafc:	b29b      	uxth	r3, r3
    cafe:	4698      	mov	r8, r3
    cb00:	4653      	mov	r3, sl
    cb02:	5ddb      	ldrb	r3, [r3, r7]
    cb04:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cb06:	7981      	ldrb	r1, [r0, #6]
    cb08:	2901      	cmp	r1, #1
    cb0a:	d0e1      	beq.n	cad0 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    cb0c:	4669      	mov	r1, sp
    cb0e:	80cb      	strh	r3, [r1, #6]
    cb10:	88cb      	ldrh	r3, [r1, #6]
    cb12:	4647      	mov	r7, r8
    cb14:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    cb16:	4221      	tst	r1, r4
    cb18:	d002      	beq.n	cb20 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    cb1a:	05db      	lsls	r3, r3, #23
    cb1c:	0ddb      	lsrs	r3, r3, #23
    cb1e:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    cb20:	79c3      	ldrb	r3, [r0, #7]
    cb22:	2b00      	cmp	r3, #0
    cb24:	d0e1      	beq.n	caea <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    cb26:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    cb28:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    cb2a:	422b      	tst	r3, r5
    cb2c:	d0fc      	beq.n	cb28 <spi_write_buffer_wait+0x88>
    cb2e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    cb30:	422b      	tst	r3, r5
    cb32:	d0da      	beq.n	caea <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cb34:	8b53      	ldrh	r3, [r2, #26]
    cb36:	422b      	tst	r3, r5
    cb38:	d0d3      	beq.n	cae2 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cb3a:	8355      	strh	r5, [r2, #26]
    cb3c:	e7d1      	b.n	cae2 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    cb3e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    cb40:	e7d3      	b.n	caea <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    cb42:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    cb44:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    cb46:	2a01      	cmp	r2, #1
    cb48:	d1ba      	bne.n	cac0 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    cb4a:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    cb4c:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    cb4e:	7e0b      	ldrb	r3, [r1, #24]
    cb50:	4213      	tst	r3, r2
    cb52:	d0fc      	beq.n	cb4e <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    cb54:	2300      	movs	r3, #0
    cb56:	e7b3      	b.n	cac0 <spi_write_buffer_wait+0x20>
	while (length--) {
    cb58:	3a01      	subs	r2, #1
    cb5a:	b296      	uxth	r6, r2
    cb5c:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    cb5e:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    cb60:	2504      	movs	r5, #4
	while (length--) {
    cb62:	4b01      	ldr	r3, [pc, #4]	; (cb68 <spi_write_buffer_wait+0xc8>)
    cb64:	469c      	mov	ip, r3
    cb66:	e7c4      	b.n	caf2 <spi_write_buffer_wait+0x52>
    cb68:	0000ffff 	.word	0x0000ffff

0000cb6c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    cb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    cb6e:	0080      	lsls	r0, r0, #2
    cb70:	4b70      	ldr	r3, [pc, #448]	; (cd34 <_spi_interrupt_handler+0x1c8>)
    cb72:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    cb74:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    cb76:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    cb78:	5ce7      	ldrb	r7, [r4, r3]
    cb7a:	2236      	movs	r2, #54	; 0x36
    cb7c:	5ca2      	ldrb	r2, [r4, r2]
    cb7e:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    cb80:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    cb82:	7db5      	ldrb	r5, [r6, #22]
    cb84:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    cb86:	07eb      	lsls	r3, r5, #31
    cb88:	d502      	bpl.n	cb90 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    cb8a:	7963      	ldrb	r3, [r4, #5]
    cb8c:	2b01      	cmp	r3, #1
    cb8e:	d01e      	beq.n	cbce <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    cb90:	076b      	lsls	r3, r5, #29
    cb92:	d511      	bpl.n	cbb8 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    cb94:	8b73      	ldrh	r3, [r6, #26]
    cb96:	075b      	lsls	r3, r3, #29
    cb98:	d55a      	bpl.n	cc50 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    cb9a:	7a63      	ldrb	r3, [r4, #9]
    cb9c:	2b01      	cmp	r3, #1
    cb9e:	d008      	beq.n	cbb2 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    cba0:	221e      	movs	r2, #30
    cba2:	2338      	movs	r3, #56	; 0x38
    cba4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    cba6:	3b35      	subs	r3, #53	; 0x35
    cba8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    cbaa:	3302      	adds	r3, #2
    cbac:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    cbae:	073b      	lsls	r3, r7, #28
    cbb0:	d44a      	bmi.n	cc48 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    cbb2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    cbb4:	2304      	movs	r3, #4
    cbb6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    cbb8:	07ab      	lsls	r3, r5, #30
    cbba:	d503      	bpl.n	cbc4 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    cbbc:	7963      	ldrb	r3, [r4, #5]
    cbbe:	2b01      	cmp	r3, #1
    cbc0:	d100      	bne.n	cbc4 <_spi_interrupt_handler+0x58>
    cbc2:	e097      	b.n	ccf4 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    cbc4:	b26d      	sxtb	r5, r5
    cbc6:	2d00      	cmp	r5, #0
    cbc8:	da00      	bge.n	cbcc <_spi_interrupt_handler+0x60>
    cbca:	e0a9      	b.n	cd20 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    cbcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    cbce:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    cbd0:	2b00      	cmp	r3, #0
    cbd2:	d022      	beq.n	cc1a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    cbd4:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    cbd6:	2b00      	cmp	r3, #0
    cbd8:	d0da      	beq.n	cb90 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    cbda:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    cbdc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    cbde:	7813      	ldrb	r3, [r2, #0]
    cbe0:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    cbe2:	1c50      	adds	r0, r2, #1
    cbe4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cbe6:	79a0      	ldrb	r0, [r4, #6]
    cbe8:	2801      	cmp	r0, #1
    cbea:	d027      	beq.n	cc3c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    cbec:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    cbee:	05db      	lsls	r3, r3, #23
    cbf0:	0ddb      	lsrs	r3, r3, #23
    cbf2:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    cbf4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    cbf6:	3b01      	subs	r3, #1
    cbf8:	b29b      	uxth	r3, r3
    cbfa:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    cbfc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    cbfe:	b29b      	uxth	r3, r3
    cc00:	2b00      	cmp	r3, #0
    cc02:	d1c5      	bne.n	cb90 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    cc04:	3301      	adds	r3, #1
    cc06:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    cc08:	7a63      	ldrb	r3, [r4, #9]
    cc0a:	2b01      	cmp	r3, #1
    cc0c:	d1c0      	bne.n	cb90 <_spi_interrupt_handler+0x24>
    cc0e:	79e3      	ldrb	r3, [r4, #7]
    cc10:	2b00      	cmp	r3, #0
    cc12:	d1bd      	bne.n	cb90 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    cc14:	3302      	adds	r3, #2
    cc16:	75b3      	strb	r3, [r6, #22]
    cc18:	e7ba      	b.n	cb90 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    cc1a:	4b47      	ldr	r3, [pc, #284]	; (cd38 <_spi_interrupt_handler+0x1cc>)
    cc1c:	881b      	ldrh	r3, [r3, #0]
    cc1e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    cc20:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    cc22:	3b01      	subs	r3, #1
    cc24:	b29b      	uxth	r3, r3
    cc26:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    cc28:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    cc2a:	b29b      	uxth	r3, r3
    cc2c:	2b00      	cmp	r3, #0
    cc2e:	d101      	bne.n	cc34 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    cc30:	3301      	adds	r3, #1
    cc32:	7533      	strb	r3, [r6, #20]
		if (0
    cc34:	7963      	ldrb	r3, [r4, #5]
    cc36:	2b01      	cmp	r3, #1
    cc38:	d0cc      	beq.n	cbd4 <_spi_interrupt_handler+0x68>
    cc3a:	e7a9      	b.n	cb90 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    cc3c:	7850      	ldrb	r0, [r2, #1]
    cc3e:	0200      	lsls	r0, r0, #8
    cc40:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    cc42:	3202      	adds	r2, #2
    cc44:	62e2      	str	r2, [r4, #44]	; 0x2c
    cc46:	e7d2      	b.n	cbee <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    cc48:	0020      	movs	r0, r4
    cc4a:	69a3      	ldr	r3, [r4, #24]
    cc4c:	4798      	blx	r3
    cc4e:	e7b0      	b.n	cbb2 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    cc50:	7a63      	ldrb	r3, [r4, #9]
    cc52:	2b01      	cmp	r3, #1
    cc54:	d028      	beq.n	cca8 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    cc56:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    cc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    cc5a:	05db      	lsls	r3, r3, #23
    cc5c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    cc5e:	b2da      	uxtb	r2, r3
    cc60:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    cc62:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    cc64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    cc66:	1c51      	adds	r1, r2, #1
    cc68:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    cc6a:	79a1      	ldrb	r1, [r4, #6]
    cc6c:	2901      	cmp	r1, #1
    cc6e:	d034      	beq.n	ccda <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    cc70:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    cc72:	3b01      	subs	r3, #1
    cc74:	b29b      	uxth	r3, r3
    cc76:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    cc78:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    cc7a:	b29b      	uxth	r3, r3
    cc7c:	2b00      	cmp	r3, #0
    cc7e:	d000      	beq.n	cc82 <_spi_interrupt_handler+0x116>
    cc80:	e79a      	b.n	cbb8 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    cc82:	2200      	movs	r2, #0
    cc84:	3338      	adds	r3, #56	; 0x38
    cc86:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    cc88:	3b34      	subs	r3, #52	; 0x34
    cc8a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    cc8c:	7a63      	ldrb	r3, [r4, #9]
    cc8e:	2b02      	cmp	r3, #2
    cc90:	d029      	beq.n	cce6 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    cc92:	7a63      	ldrb	r3, [r4, #9]
    cc94:	2b00      	cmp	r3, #0
    cc96:	d000      	beq.n	cc9a <_spi_interrupt_handler+0x12e>
    cc98:	e78e      	b.n	cbb8 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    cc9a:	07bb      	lsls	r3, r7, #30
    cc9c:	d400      	bmi.n	cca0 <_spi_interrupt_handler+0x134>
    cc9e:	e78b      	b.n	cbb8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    cca0:	0020      	movs	r0, r4
    cca2:	6923      	ldr	r3, [r4, #16]
    cca4:	4798      	blx	r3
    cca6:	e787      	b.n	cbb8 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    cca8:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    ccaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    ccac:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    ccae:	3b01      	subs	r3, #1
    ccb0:	b29b      	uxth	r3, r3
    ccb2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    ccb4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    ccb6:	b29b      	uxth	r3, r3
    ccb8:	2b00      	cmp	r3, #0
    ccba:	d000      	beq.n	ccbe <_spi_interrupt_handler+0x152>
    ccbc:	e77c      	b.n	cbb8 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    ccbe:	3304      	adds	r3, #4
    ccc0:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    ccc2:	2200      	movs	r2, #0
    ccc4:	3334      	adds	r3, #52	; 0x34
    ccc6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    ccc8:	3b35      	subs	r3, #53	; 0x35
    ccca:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    cccc:	07fb      	lsls	r3, r7, #31
    ccce:	d400      	bmi.n	ccd2 <_spi_interrupt_handler+0x166>
    ccd0:	e772      	b.n	cbb8 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    ccd2:	0020      	movs	r0, r4
    ccd4:	68e3      	ldr	r3, [r4, #12]
    ccd6:	4798      	blx	r3
    ccd8:	e76e      	b.n	cbb8 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    ccda:	0a1b      	lsrs	r3, r3, #8
    ccdc:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    ccde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cce0:	3301      	adds	r3, #1
    cce2:	62a3      	str	r3, [r4, #40]	; 0x28
    cce4:	e7c4      	b.n	cc70 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    cce6:	077b      	lsls	r3, r7, #29
    cce8:	d400      	bmi.n	ccec <_spi_interrupt_handler+0x180>
    ccea:	e765      	b.n	cbb8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    ccec:	0020      	movs	r0, r4
    ccee:	6963      	ldr	r3, [r4, #20]
    ccf0:	4798      	blx	r3
    ccf2:	e761      	b.n	cbb8 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    ccf4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    ccf6:	2b01      	cmp	r3, #1
    ccf8:	d000      	beq.n	ccfc <_spi_interrupt_handler+0x190>
    ccfa:	e763      	b.n	cbc4 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    ccfc:	79e3      	ldrb	r3, [r4, #7]
    ccfe:	2b00      	cmp	r3, #0
    cd00:	d000      	beq.n	cd04 <_spi_interrupt_handler+0x198>
    cd02:	e75f      	b.n	cbc4 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    cd04:	3302      	adds	r3, #2
    cd06:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    cd08:	3301      	adds	r3, #1
    cd0a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    cd0c:	2200      	movs	r2, #0
    cd0e:	3335      	adds	r3, #53	; 0x35
    cd10:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    cd12:	07fb      	lsls	r3, r7, #31
    cd14:	d400      	bmi.n	cd18 <_spi_interrupt_handler+0x1ac>
    cd16:	e755      	b.n	cbc4 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    cd18:	0020      	movs	r0, r4
    cd1a:	68e3      	ldr	r3, [r4, #12]
    cd1c:	4798      	blx	r3
    cd1e:	e751      	b.n	cbc4 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    cd20:	2380      	movs	r3, #128	; 0x80
    cd22:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    cd24:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    cd26:	067b      	lsls	r3, r7, #25
    cd28:	d400      	bmi.n	cd2c <_spi_interrupt_handler+0x1c0>
    cd2a:	e74f      	b.n	cbcc <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    cd2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cd2e:	0020      	movs	r0, r4
    cd30:	4798      	blx	r3
}
    cd32:	e74b      	b.n	cbcc <_spi_interrupt_handler+0x60>
    cd34:	200005d4 	.word	0x200005d4
    cd38:	200005ec 	.word	0x200005ec

0000cd3c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    cd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd3e:	46de      	mov	lr, fp
    cd40:	4657      	mov	r7, sl
    cd42:	464e      	mov	r6, r9
    cd44:	4645      	mov	r5, r8
    cd46:	b5e0      	push	{r5, r6, r7, lr}
    cd48:	b091      	sub	sp, #68	; 0x44
    cd4a:	0005      	movs	r5, r0
    cd4c:	000c      	movs	r4, r1
    cd4e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    cd50:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    cd52:	0008      	movs	r0, r1
    cd54:	4bbc      	ldr	r3, [pc, #752]	; (d048 <usart_init+0x30c>)
    cd56:	4798      	blx	r3
    cd58:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    cd5a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    cd5c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    cd5e:	07db      	lsls	r3, r3, #31
    cd60:	d506      	bpl.n	cd70 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    cd62:	b011      	add	sp, #68	; 0x44
    cd64:	bc3c      	pop	{r2, r3, r4, r5}
    cd66:	4690      	mov	r8, r2
    cd68:	4699      	mov	r9, r3
    cd6a:	46a2      	mov	sl, r4
    cd6c:	46ab      	mov	fp, r5
    cd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    cd70:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    cd72:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    cd74:	079b      	lsls	r3, r3, #30
    cd76:	d4f4      	bmi.n	cd62 <usart_init+0x26>
    cd78:	49b4      	ldr	r1, [pc, #720]	; (d04c <usart_init+0x310>)
    cd7a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    cd7c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    cd7e:	2301      	movs	r3, #1
    cd80:	40bb      	lsls	r3, r7
    cd82:	4303      	orrs	r3, r0
    cd84:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    cd86:	a90f      	add	r1, sp, #60	; 0x3c
    cd88:	272d      	movs	r7, #45	; 0x2d
    cd8a:	5df3      	ldrb	r3, [r6, r7]
    cd8c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    cd8e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    cd90:	b2d3      	uxtb	r3, r2
    cd92:	9302      	str	r3, [sp, #8]
    cd94:	0018      	movs	r0, r3
    cd96:	4bae      	ldr	r3, [pc, #696]	; (d050 <usart_init+0x314>)
    cd98:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    cd9a:	9802      	ldr	r0, [sp, #8]
    cd9c:	4bad      	ldr	r3, [pc, #692]	; (d054 <usart_init+0x318>)
    cd9e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    cda0:	5df0      	ldrb	r0, [r6, r7]
    cda2:	2100      	movs	r1, #0
    cda4:	4bac      	ldr	r3, [pc, #688]	; (d058 <usart_init+0x31c>)
    cda6:	4798      	blx	r3
	module->character_size = config->character_size;
    cda8:	7af3      	ldrb	r3, [r6, #11]
    cdaa:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    cdac:	2324      	movs	r3, #36	; 0x24
    cdae:	5cf3      	ldrb	r3, [r6, r3]
    cdb0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    cdb2:	2325      	movs	r3, #37	; 0x25
    cdb4:	5cf3      	ldrb	r3, [r6, r3]
    cdb6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    cdb8:	7ef3      	ldrb	r3, [r6, #27]
    cdba:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    cdbc:	7f33      	ldrb	r3, [r6, #28]
    cdbe:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    cdc0:	682b      	ldr	r3, [r5, #0]
    cdc2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    cdc4:	0018      	movs	r0, r3
    cdc6:	4ba0      	ldr	r3, [pc, #640]	; (d048 <usart_init+0x30c>)
    cdc8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    cdca:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    cdcc:	2200      	movs	r2, #0
    cdce:	230e      	movs	r3, #14
    cdd0:	a906      	add	r1, sp, #24
    cdd2:	468c      	mov	ip, r1
    cdd4:	4463      	add	r3, ip
    cdd6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    cdd8:	8a32      	ldrh	r2, [r6, #16]
    cdda:	9202      	str	r2, [sp, #8]
    cddc:	2380      	movs	r3, #128	; 0x80
    cdde:	01db      	lsls	r3, r3, #7
    cde0:	429a      	cmp	r2, r3
    cde2:	d100      	bne.n	cde6 <usart_init+0xaa>
    cde4:	e09e      	b.n	cf24 <usart_init+0x1e8>
    cde6:	d90f      	bls.n	ce08 <usart_init+0xcc>
    cde8:	23c0      	movs	r3, #192	; 0xc0
    cdea:	01db      	lsls	r3, r3, #7
    cdec:	9a02      	ldr	r2, [sp, #8]
    cdee:	429a      	cmp	r2, r3
    cdf0:	d100      	bne.n	cdf4 <usart_init+0xb8>
    cdf2:	e092      	b.n	cf1a <usart_init+0x1de>
    cdf4:	2380      	movs	r3, #128	; 0x80
    cdf6:	021b      	lsls	r3, r3, #8
    cdf8:	429a      	cmp	r2, r3
    cdfa:	d000      	beq.n	cdfe <usart_init+0xc2>
    cdfc:	e11f      	b.n	d03e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    cdfe:	2303      	movs	r3, #3
    ce00:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    ce02:	2300      	movs	r3, #0
    ce04:	9307      	str	r3, [sp, #28]
    ce06:	e008      	b.n	ce1a <usart_init+0xde>
	switch (config->sample_rate) {
    ce08:	2380      	movs	r3, #128	; 0x80
    ce0a:	019b      	lsls	r3, r3, #6
    ce0c:	429a      	cmp	r2, r3
    ce0e:	d000      	beq.n	ce12 <usart_init+0xd6>
    ce10:	e115      	b.n	d03e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    ce12:	2310      	movs	r3, #16
    ce14:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    ce16:	3b0f      	subs	r3, #15
    ce18:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    ce1a:	6833      	ldr	r3, [r6, #0]
    ce1c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    ce1e:	68f3      	ldr	r3, [r6, #12]
    ce20:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    ce22:	6973      	ldr	r3, [r6, #20]
    ce24:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    ce26:	7e33      	ldrb	r3, [r6, #24]
    ce28:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    ce2a:	2326      	movs	r3, #38	; 0x26
    ce2c:	5cf3      	ldrb	r3, [r6, r3]
    ce2e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    ce30:	6873      	ldr	r3, [r6, #4]
    ce32:	4699      	mov	r9, r3
	switch (transfer_mode)
    ce34:	2b00      	cmp	r3, #0
    ce36:	d100      	bne.n	ce3a <usart_init+0xfe>
    ce38:	e0a0      	b.n	cf7c <usart_init+0x240>
    ce3a:	2380      	movs	r3, #128	; 0x80
    ce3c:	055b      	lsls	r3, r3, #21
    ce3e:	4599      	cmp	r9, r3
    ce40:	d100      	bne.n	ce44 <usart_init+0x108>
    ce42:	e084      	b.n	cf4e <usart_init+0x212>
	if(config->encoding_format_enable) {
    ce44:	7e73      	ldrb	r3, [r6, #25]
    ce46:	2b00      	cmp	r3, #0
    ce48:	d002      	beq.n	ce50 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    ce4a:	7eb3      	ldrb	r3, [r6, #26]
    ce4c:	4642      	mov	r2, r8
    ce4e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    ce50:	682a      	ldr	r2, [r5, #0]
    ce52:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    ce54:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    ce56:	2b00      	cmp	r3, #0
    ce58:	d1fc      	bne.n	ce54 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    ce5a:	330e      	adds	r3, #14
    ce5c:	aa06      	add	r2, sp, #24
    ce5e:	4694      	mov	ip, r2
    ce60:	4463      	add	r3, ip
    ce62:	881b      	ldrh	r3, [r3, #0]
    ce64:	4642      	mov	r2, r8
    ce66:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    ce68:	9b05      	ldr	r3, [sp, #20]
    ce6a:	9a03      	ldr	r2, [sp, #12]
    ce6c:	4313      	orrs	r3, r2
    ce6e:	9a04      	ldr	r2, [sp, #16]
    ce70:	4313      	orrs	r3, r2
    ce72:	464a      	mov	r2, r9
    ce74:	4313      	orrs	r3, r2
    ce76:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    ce78:	465b      	mov	r3, fp
    ce7a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    ce7c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    ce7e:	4653      	mov	r3, sl
    ce80:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    ce82:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    ce84:	2327      	movs	r3, #39	; 0x27
    ce86:	5cf3      	ldrb	r3, [r6, r3]
    ce88:	2b00      	cmp	r3, #0
    ce8a:	d101      	bne.n	ce90 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    ce8c:	3304      	adds	r3, #4
    ce8e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    ce90:	7e73      	ldrb	r3, [r6, #25]
    ce92:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    ce94:	7f32      	ldrb	r2, [r6, #28]
    ce96:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    ce98:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    ce9a:	7f72      	ldrb	r2, [r6, #29]
    ce9c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    ce9e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    cea0:	2224      	movs	r2, #36	; 0x24
    cea2:	5cb2      	ldrb	r2, [r6, r2]
    cea4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    cea6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    cea8:	2225      	movs	r2, #37	; 0x25
    ceaa:	5cb2      	ldrb	r2, [r6, r2]
    ceac:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    ceae:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    ceb0:	7ab1      	ldrb	r1, [r6, #10]
    ceb2:	7af2      	ldrb	r2, [r6, #11]
    ceb4:	4311      	orrs	r1, r2
    ceb6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    ceb8:	8933      	ldrh	r3, [r6, #8]
    ceba:	2bff      	cmp	r3, #255	; 0xff
    cebc:	d100      	bne.n	cec0 <usart_init+0x184>
    cebe:	e081      	b.n	cfc4 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    cec0:	2280      	movs	r2, #128	; 0x80
    cec2:	0452      	lsls	r2, r2, #17
    cec4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    cec6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    cec8:	232c      	movs	r3, #44	; 0x2c
    ceca:	5cf3      	ldrb	r3, [r6, r3]
    cecc:	2b00      	cmp	r3, #0
    cece:	d103      	bne.n	ced8 <usart_init+0x19c>
    ced0:	4b62      	ldr	r3, [pc, #392]	; (d05c <usart_init+0x320>)
    ced2:	789b      	ldrb	r3, [r3, #2]
    ced4:	079b      	lsls	r3, r3, #30
    ced6:	d501      	bpl.n	cedc <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    ced8:	2380      	movs	r3, #128	; 0x80
    ceda:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    cedc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    cede:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    cee0:	2b00      	cmp	r3, #0
    cee2:	d1fc      	bne.n	cede <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    cee4:	4643      	mov	r3, r8
    cee6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    cee8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    ceea:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    ceec:	2b00      	cmp	r3, #0
    ceee:	d1fc      	bne.n	ceea <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    cef0:	4643      	mov	r3, r8
    cef2:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    cef4:	ab0e      	add	r3, sp, #56	; 0x38
    cef6:	2280      	movs	r2, #128	; 0x80
    cef8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    cefa:	2200      	movs	r2, #0
    cefc:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    cefe:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    cf00:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    cf02:	6b33      	ldr	r3, [r6, #48]	; 0x30
    cf04:	930a      	str	r3, [sp, #40]	; 0x28
    cf06:	6b73      	ldr	r3, [r6, #52]	; 0x34
    cf08:	930b      	str	r3, [sp, #44]	; 0x2c
    cf0a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    cf0c:	930c      	str	r3, [sp, #48]	; 0x30
    cf0e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    cf10:	9302      	str	r3, [sp, #8]
    cf12:	930d      	str	r3, [sp, #52]	; 0x34
    cf14:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    cf16:	ae0a      	add	r6, sp, #40	; 0x28
    cf18:	e063      	b.n	cfe2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    cf1a:	2308      	movs	r3, #8
    cf1c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    cf1e:	3b07      	subs	r3, #7
    cf20:	9307      	str	r3, [sp, #28]
    cf22:	e77a      	b.n	ce1a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    cf24:	6833      	ldr	r3, [r6, #0]
    cf26:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    cf28:	68f3      	ldr	r3, [r6, #12]
    cf2a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    cf2c:	6973      	ldr	r3, [r6, #20]
    cf2e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    cf30:	7e33      	ldrb	r3, [r6, #24]
    cf32:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    cf34:	2326      	movs	r3, #38	; 0x26
    cf36:	5cf3      	ldrb	r3, [r6, r3]
    cf38:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    cf3a:	6873      	ldr	r3, [r6, #4]
    cf3c:	4699      	mov	r9, r3
	switch (transfer_mode)
    cf3e:	2b00      	cmp	r3, #0
    cf40:	d018      	beq.n	cf74 <usart_init+0x238>
    cf42:	2380      	movs	r3, #128	; 0x80
    cf44:	055b      	lsls	r3, r3, #21
    cf46:	4599      	cmp	r9, r3
    cf48:	d001      	beq.n	cf4e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    cf4a:	2000      	movs	r0, #0
    cf4c:	e025      	b.n	cf9a <usart_init+0x25e>
			if (!config->use_external_clock) {
    cf4e:	2327      	movs	r3, #39	; 0x27
    cf50:	5cf3      	ldrb	r3, [r6, r3]
    cf52:	2b00      	cmp	r3, #0
    cf54:	d000      	beq.n	cf58 <usart_init+0x21c>
    cf56:	e775      	b.n	ce44 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    cf58:	6a33      	ldr	r3, [r6, #32]
    cf5a:	001f      	movs	r7, r3
    cf5c:	b2c0      	uxtb	r0, r0
    cf5e:	4b40      	ldr	r3, [pc, #256]	; (d060 <usart_init+0x324>)
    cf60:	4798      	blx	r3
    cf62:	0001      	movs	r1, r0
    cf64:	220e      	movs	r2, #14
    cf66:	ab06      	add	r3, sp, #24
    cf68:	469c      	mov	ip, r3
    cf6a:	4462      	add	r2, ip
    cf6c:	0038      	movs	r0, r7
    cf6e:	4b3d      	ldr	r3, [pc, #244]	; (d064 <usart_init+0x328>)
    cf70:	4798      	blx	r3
    cf72:	e012      	b.n	cf9a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    cf74:	2308      	movs	r3, #8
    cf76:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    cf78:	2300      	movs	r3, #0
    cf7a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    cf7c:	2327      	movs	r3, #39	; 0x27
    cf7e:	5cf3      	ldrb	r3, [r6, r3]
    cf80:	2b00      	cmp	r3, #0
    cf82:	d00e      	beq.n	cfa2 <usart_init+0x266>
				status_code =
    cf84:	9b06      	ldr	r3, [sp, #24]
    cf86:	9300      	str	r3, [sp, #0]
    cf88:	9b07      	ldr	r3, [sp, #28]
    cf8a:	220e      	movs	r2, #14
    cf8c:	a906      	add	r1, sp, #24
    cf8e:	468c      	mov	ip, r1
    cf90:	4462      	add	r2, ip
    cf92:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    cf94:	6a30      	ldr	r0, [r6, #32]
    cf96:	4f34      	ldr	r7, [pc, #208]	; (d068 <usart_init+0x32c>)
    cf98:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    cf9a:	2800      	cmp	r0, #0
    cf9c:	d000      	beq.n	cfa0 <usart_init+0x264>
    cf9e:	e6e0      	b.n	cd62 <usart_init+0x26>
    cfa0:	e750      	b.n	ce44 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    cfa2:	6a33      	ldr	r3, [r6, #32]
    cfa4:	001f      	movs	r7, r3
    cfa6:	b2c0      	uxtb	r0, r0
    cfa8:	4b2d      	ldr	r3, [pc, #180]	; (d060 <usart_init+0x324>)
    cfaa:	4798      	blx	r3
    cfac:	0001      	movs	r1, r0
				status_code =
    cfae:	9b06      	ldr	r3, [sp, #24]
    cfb0:	9300      	str	r3, [sp, #0]
    cfb2:	9b07      	ldr	r3, [sp, #28]
    cfb4:	220e      	movs	r2, #14
    cfb6:	a806      	add	r0, sp, #24
    cfb8:	4684      	mov	ip, r0
    cfba:	4462      	add	r2, ip
    cfbc:	0038      	movs	r0, r7
    cfbe:	4f2a      	ldr	r7, [pc, #168]	; (d068 <usart_init+0x32c>)
    cfc0:	47b8      	blx	r7
    cfc2:	e7ea      	b.n	cf9a <usart_init+0x25e>
		if(config->lin_slave_enable) {
    cfc4:	7ef3      	ldrb	r3, [r6, #27]
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	d100      	bne.n	cfcc <usart_init+0x290>
    cfca:	e77d      	b.n	cec8 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    cfcc:	2380      	movs	r3, #128	; 0x80
    cfce:	04db      	lsls	r3, r3, #19
    cfd0:	431f      	orrs	r7, r3
    cfd2:	e779      	b.n	cec8 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    cfd4:	0020      	movs	r0, r4
    cfd6:	4b25      	ldr	r3, [pc, #148]	; (d06c <usart_init+0x330>)
    cfd8:	4798      	blx	r3
    cfda:	e007      	b.n	cfec <usart_init+0x2b0>
    cfdc:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    cfde:	2f04      	cmp	r7, #4
    cfe0:	d00d      	beq.n	cffe <usart_init+0x2c2>
    cfe2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    cfe4:	00bb      	lsls	r3, r7, #2
    cfe6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    cfe8:	2800      	cmp	r0, #0
    cfea:	d0f3      	beq.n	cfd4 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    cfec:	1c43      	adds	r3, r0, #1
    cfee:	d0f5      	beq.n	cfdc <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    cff0:	a90e      	add	r1, sp, #56	; 0x38
    cff2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    cff4:	0c00      	lsrs	r0, r0, #16
    cff6:	b2c0      	uxtb	r0, r0
    cff8:	4b1d      	ldr	r3, [pc, #116]	; (d070 <usart_init+0x334>)
    cffa:	4798      	blx	r3
    cffc:	e7ee      	b.n	cfdc <usart_init+0x2a0>
		module->callback[i]            = NULL;
    cffe:	2300      	movs	r3, #0
    d000:	60eb      	str	r3, [r5, #12]
    d002:	612b      	str	r3, [r5, #16]
    d004:	616b      	str	r3, [r5, #20]
    d006:	61ab      	str	r3, [r5, #24]
    d008:	61eb      	str	r3, [r5, #28]
    d00a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    d00c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    d00e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    d010:	2200      	movs	r2, #0
    d012:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    d014:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    d016:	3330      	adds	r3, #48	; 0x30
    d018:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    d01a:	3301      	adds	r3, #1
    d01c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    d01e:	3301      	adds	r3, #1
    d020:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    d022:	3301      	adds	r3, #1
    d024:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    d026:	6828      	ldr	r0, [r5, #0]
    d028:	4b07      	ldr	r3, [pc, #28]	; (d048 <usart_init+0x30c>)
    d02a:	4798      	blx	r3
    d02c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    d02e:	4911      	ldr	r1, [pc, #68]	; (d074 <usart_init+0x338>)
    d030:	4b11      	ldr	r3, [pc, #68]	; (d078 <usart_init+0x33c>)
    d032:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    d034:	00a4      	lsls	r4, r4, #2
    d036:	4b11      	ldr	r3, [pc, #68]	; (d07c <usart_init+0x340>)
    d038:	50e5      	str	r5, [r4, r3]
	return status_code;
    d03a:	2000      	movs	r0, #0
    d03c:	e691      	b.n	cd62 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    d03e:	2310      	movs	r3, #16
    d040:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    d042:	2300      	movs	r3, #0
    d044:	9307      	str	r3, [sp, #28]
    d046:	e6e8      	b.n	ce1a <usart_init+0xde>
    d048:	0000c5f9 	.word	0x0000c5f9
    d04c:	40000400 	.word	0x40000400
    d050:	0000d96d 	.word	0x0000d96d
    d054:	0000d8e1 	.word	0x0000d8e1
    d058:	0000c435 	.word	0x0000c435
    d05c:	41002000 	.word	0x41002000
    d060:	0000d989 	.word	0x0000d989
    d064:	0000c377 	.word	0x0000c377
    d068:	0000c3a1 	.word	0x0000c3a1
    d06c:	0000c481 	.word	0x0000c481
    d070:	0000da65 	.word	0x0000da65
    d074:	0000d195 	.word	0x0000d195
    d078:	0000c635 	.word	0x0000c635
    d07c:	200005d4 	.word	0x200005d4

0000d080 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    d080:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    d082:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    d084:	2a00      	cmp	r2, #0
    d086:	d101      	bne.n	d08c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    d088:	0018      	movs	r0, r3
    d08a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    d08c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    d08e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    d090:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    d092:	2a00      	cmp	r2, #0
    d094:	d1f8      	bne.n	d088 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    d096:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    d098:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    d09a:	2a00      	cmp	r2, #0
    d09c:	d1fc      	bne.n	d098 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    d09e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    d0a0:	2102      	movs	r1, #2
    d0a2:	7e1a      	ldrb	r2, [r3, #24]
    d0a4:	420a      	tst	r2, r1
    d0a6:	d0fc      	beq.n	d0a2 <usart_write_wait+0x22>
	return STATUS_OK;
    d0a8:	2300      	movs	r3, #0
    d0aa:	e7ed      	b.n	d088 <usart_write_wait+0x8>

0000d0ac <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    d0ac:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    d0ae:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    d0b0:	2a00      	cmp	r2, #0
    d0b2:	d101      	bne.n	d0b8 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    d0b4:	0018      	movs	r0, r3
    d0b6:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    d0b8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    d0ba:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    d0bc:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    d0be:	2a00      	cmp	r2, #0
    d0c0:	d1f8      	bne.n	d0b4 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    d0c2:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    d0c4:	7e10      	ldrb	r0, [r2, #24]
    d0c6:	0740      	lsls	r0, r0, #29
    d0c8:	d5f4      	bpl.n	d0b4 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    d0ca:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    d0cc:	2b00      	cmp	r3, #0
    d0ce:	d1fc      	bne.n	d0ca <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    d0d0:	8b53      	ldrh	r3, [r2, #26]
    d0d2:	b2db      	uxtb	r3, r3
	if (error_code) {
    d0d4:	0698      	lsls	r0, r3, #26
    d0d6:	d01d      	beq.n	d114 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    d0d8:	0798      	lsls	r0, r3, #30
    d0da:	d503      	bpl.n	d0e4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    d0dc:	2302      	movs	r3, #2
    d0de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    d0e0:	3318      	adds	r3, #24
    d0e2:	e7e7      	b.n	d0b4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    d0e4:	0758      	lsls	r0, r3, #29
    d0e6:	d503      	bpl.n	d0f0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    d0e8:	2304      	movs	r3, #4
    d0ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    d0ec:	331a      	adds	r3, #26
    d0ee:	e7e1      	b.n	d0b4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    d0f0:	07d8      	lsls	r0, r3, #31
    d0f2:	d503      	bpl.n	d0fc <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    d0f4:	2301      	movs	r3, #1
    d0f6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    d0f8:	3312      	adds	r3, #18
    d0fa:	e7db      	b.n	d0b4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    d0fc:	06d8      	lsls	r0, r3, #27
    d0fe:	d503      	bpl.n	d108 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    d100:	2310      	movs	r3, #16
    d102:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    d104:	3332      	adds	r3, #50	; 0x32
    d106:	e7d5      	b.n	d0b4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    d108:	069b      	lsls	r3, r3, #26
    d10a:	d503      	bpl.n	d114 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    d10c:	2320      	movs	r3, #32
    d10e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    d110:	3321      	adds	r3, #33	; 0x21
    d112:	e7cf      	b.n	d0b4 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    d114:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    d116:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    d118:	2300      	movs	r3, #0
    d11a:	e7cb      	b.n	d0b4 <usart_read_wait+0x8>

0000d11c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    d11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d11e:	0004      	movs	r4, r0
    d120:	000d      	movs	r5, r1
    d122:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    d124:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    d126:	4b0f      	ldr	r3, [pc, #60]	; (d164 <_usart_read_buffer+0x48>)
    d128:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    d12a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    d12c:	b29b      	uxth	r3, r3
    d12e:	2b00      	cmp	r3, #0
    d130:	d003      	beq.n	d13a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    d132:	4b0d      	ldr	r3, [pc, #52]	; (d168 <_usart_read_buffer+0x4c>)
    d134:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    d136:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    d138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    d13a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    d13c:	4b0a      	ldr	r3, [pc, #40]	; (d168 <_usart_read_buffer+0x4c>)
    d13e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    d140:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    d142:	2205      	movs	r2, #5
    d144:	2332      	movs	r3, #50	; 0x32
    d146:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    d148:	3b2e      	subs	r3, #46	; 0x2e
    d14a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    d14c:	7a23      	ldrb	r3, [r4, #8]
    d14e:	2b00      	cmp	r3, #0
    d150:	d001      	beq.n	d156 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    d152:	2320      	movs	r3, #32
    d154:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    d156:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    d158:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    d15a:	2b00      	cmp	r3, #0
    d15c:	d0ec      	beq.n	d138 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    d15e:	2308      	movs	r3, #8
    d160:	75bb      	strb	r3, [r7, #22]
    d162:	e7e9      	b.n	d138 <_usart_read_buffer+0x1c>
    d164:	0000bdc1 	.word	0x0000bdc1
    d168:	0000be01 	.word	0x0000be01

0000d16c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    d16c:	1c93      	adds	r3, r2, #2
    d16e:	009b      	lsls	r3, r3, #2
    d170:	18c3      	adds	r3, r0, r3
    d172:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    d174:	2130      	movs	r1, #48	; 0x30
    d176:	2301      	movs	r3, #1
    d178:	4093      	lsls	r3, r2
    d17a:	001a      	movs	r2, r3
    d17c:	5c43      	ldrb	r3, [r0, r1]
    d17e:	4313      	orrs	r3, r2
    d180:	5443      	strb	r3, [r0, r1]
}
    d182:	4770      	bx	lr

0000d184 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    d184:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    d186:	2201      	movs	r2, #1
    d188:	4b01      	ldr	r3, [pc, #4]	; (d190 <usart_read_job+0xc>)
    d18a:	4798      	blx	r3
}
    d18c:	bd10      	pop	{r4, pc}
    d18e:	46c0      	nop			; (mov r8, r8)
    d190:	0000d11d 	.word	0x0000d11d

0000d194 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    d196:	0080      	lsls	r0, r0, #2
    d198:	4b62      	ldr	r3, [pc, #392]	; (d324 <_usart_interrupt_handler+0x190>)
    d19a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    d19c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    d19e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    d1a0:	2b00      	cmp	r3, #0
    d1a2:	d1fc      	bne.n	d19e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    d1a4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    d1a6:	7da6      	ldrb	r6, [r4, #22]
    d1a8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    d1aa:	2330      	movs	r3, #48	; 0x30
    d1ac:	5ceb      	ldrb	r3, [r5, r3]
    d1ae:	2231      	movs	r2, #49	; 0x31
    d1b0:	5caf      	ldrb	r7, [r5, r2]
    d1b2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    d1b4:	07f3      	lsls	r3, r6, #31
    d1b6:	d522      	bpl.n	d1fe <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    d1b8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    d1ba:	b29b      	uxth	r3, r3
    d1bc:	2b00      	cmp	r3, #0
    d1be:	d01c      	beq.n	d1fa <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    d1c0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    d1c2:	7813      	ldrb	r3, [r2, #0]
    d1c4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    d1c6:	1c51      	adds	r1, r2, #1
    d1c8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    d1ca:	7969      	ldrb	r1, [r5, #5]
    d1cc:	2901      	cmp	r1, #1
    d1ce:	d00e      	beq.n	d1ee <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    d1d0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    d1d2:	05db      	lsls	r3, r3, #23
    d1d4:	0ddb      	lsrs	r3, r3, #23
    d1d6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    d1d8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    d1da:	3b01      	subs	r3, #1
    d1dc:	b29b      	uxth	r3, r3
    d1de:	85eb      	strh	r3, [r5, #46]	; 0x2e
    d1e0:	2b00      	cmp	r3, #0
    d1e2:	d10c      	bne.n	d1fe <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    d1e4:	3301      	adds	r3, #1
    d1e6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    d1e8:	3301      	adds	r3, #1
    d1ea:	75a3      	strb	r3, [r4, #22]
    d1ec:	e007      	b.n	d1fe <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    d1ee:	7851      	ldrb	r1, [r2, #1]
    d1f0:	0209      	lsls	r1, r1, #8
    d1f2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    d1f4:	3202      	adds	r2, #2
    d1f6:	62aa      	str	r2, [r5, #40]	; 0x28
    d1f8:	e7eb      	b.n	d1d2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    d1fa:	2301      	movs	r3, #1
    d1fc:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    d1fe:	07b3      	lsls	r3, r6, #30
    d200:	d506      	bpl.n	d210 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    d202:	2302      	movs	r3, #2
    d204:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    d206:	2200      	movs	r2, #0
    d208:	3331      	adds	r3, #49	; 0x31
    d20a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    d20c:	07fb      	lsls	r3, r7, #31
    d20e:	d41a      	bmi.n	d246 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    d210:	0773      	lsls	r3, r6, #29
    d212:	d565      	bpl.n	d2e0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    d214:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    d216:	b29b      	uxth	r3, r3
    d218:	2b00      	cmp	r3, #0
    d21a:	d05f      	beq.n	d2dc <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    d21c:	8b63      	ldrh	r3, [r4, #26]
    d21e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    d220:	071a      	lsls	r2, r3, #28
    d222:	d414      	bmi.n	d24e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    d224:	223f      	movs	r2, #63	; 0x3f
    d226:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    d228:	2b00      	cmp	r3, #0
    d22a:	d034      	beq.n	d296 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    d22c:	079a      	lsls	r2, r3, #30
    d22e:	d511      	bpl.n	d254 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    d230:	221a      	movs	r2, #26
    d232:	2332      	movs	r3, #50	; 0x32
    d234:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    d236:	3b30      	subs	r3, #48	; 0x30
    d238:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    d23a:	077b      	lsls	r3, r7, #29
    d23c:	d550      	bpl.n	d2e0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    d23e:	0028      	movs	r0, r5
    d240:	696b      	ldr	r3, [r5, #20]
    d242:	4798      	blx	r3
    d244:	e04c      	b.n	d2e0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    d246:	0028      	movs	r0, r5
    d248:	68eb      	ldr	r3, [r5, #12]
    d24a:	4798      	blx	r3
    d24c:	e7e0      	b.n	d210 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    d24e:	2237      	movs	r2, #55	; 0x37
    d250:	4013      	ands	r3, r2
    d252:	e7e9      	b.n	d228 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    d254:	075a      	lsls	r2, r3, #29
    d256:	d505      	bpl.n	d264 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    d258:	221e      	movs	r2, #30
    d25a:	2332      	movs	r3, #50	; 0x32
    d25c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    d25e:	3b2e      	subs	r3, #46	; 0x2e
    d260:	8363      	strh	r3, [r4, #26]
    d262:	e7ea      	b.n	d23a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    d264:	07da      	lsls	r2, r3, #31
    d266:	d505      	bpl.n	d274 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    d268:	2213      	movs	r2, #19
    d26a:	2332      	movs	r3, #50	; 0x32
    d26c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    d26e:	3b31      	subs	r3, #49	; 0x31
    d270:	8363      	strh	r3, [r4, #26]
    d272:	e7e2      	b.n	d23a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    d274:	06da      	lsls	r2, r3, #27
    d276:	d505      	bpl.n	d284 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    d278:	2242      	movs	r2, #66	; 0x42
    d27a:	2332      	movs	r3, #50	; 0x32
    d27c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    d27e:	3b22      	subs	r3, #34	; 0x22
    d280:	8363      	strh	r3, [r4, #26]
    d282:	e7da      	b.n	d23a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    d284:	2220      	movs	r2, #32
    d286:	421a      	tst	r2, r3
    d288:	d0d7      	beq.n	d23a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    d28a:	3221      	adds	r2, #33	; 0x21
    d28c:	2332      	movs	r3, #50	; 0x32
    d28e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    d290:	3b12      	subs	r3, #18
    d292:	8363      	strh	r3, [r4, #26]
    d294:	e7d1      	b.n	d23a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    d296:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    d298:	05db      	lsls	r3, r3, #23
    d29a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    d29c:	b2da      	uxtb	r2, r3
    d29e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    d2a0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    d2a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    d2a4:	1c51      	adds	r1, r2, #1
    d2a6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    d2a8:	7969      	ldrb	r1, [r5, #5]
    d2aa:	2901      	cmp	r1, #1
    d2ac:	d010      	beq.n	d2d0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    d2ae:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    d2b0:	3b01      	subs	r3, #1
    d2b2:	b29b      	uxth	r3, r3
    d2b4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	d112      	bne.n	d2e0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    d2ba:	3304      	adds	r3, #4
    d2bc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    d2be:	2200      	movs	r2, #0
    d2c0:	332e      	adds	r3, #46	; 0x2e
    d2c2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    d2c4:	07bb      	lsls	r3, r7, #30
    d2c6:	d50b      	bpl.n	d2e0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    d2c8:	0028      	movs	r0, r5
    d2ca:	692b      	ldr	r3, [r5, #16]
    d2cc:	4798      	blx	r3
    d2ce:	e007      	b.n	d2e0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    d2d0:	0a1b      	lsrs	r3, r3, #8
    d2d2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    d2d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d2d6:	3301      	adds	r3, #1
    d2d8:	626b      	str	r3, [r5, #36]	; 0x24
    d2da:	e7e8      	b.n	d2ae <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    d2dc:	2304      	movs	r3, #4
    d2de:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    d2e0:	06f3      	lsls	r3, r6, #27
    d2e2:	d504      	bpl.n	d2ee <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    d2e4:	2310      	movs	r3, #16
    d2e6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    d2e8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    d2ea:	06fb      	lsls	r3, r7, #27
    d2ec:	d40e      	bmi.n	d30c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    d2ee:	06b3      	lsls	r3, r6, #26
    d2f0:	d504      	bpl.n	d2fc <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    d2f2:	2320      	movs	r3, #32
    d2f4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    d2f6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    d2f8:	073b      	lsls	r3, r7, #28
    d2fa:	d40b      	bmi.n	d314 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    d2fc:	0733      	lsls	r3, r6, #28
    d2fe:	d504      	bpl.n	d30a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    d300:	2308      	movs	r3, #8
    d302:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    d304:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    d306:	06bb      	lsls	r3, r7, #26
    d308:	d408      	bmi.n	d31c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    d30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    d30c:	0028      	movs	r0, r5
    d30e:	69eb      	ldr	r3, [r5, #28]
    d310:	4798      	blx	r3
    d312:	e7ec      	b.n	d2ee <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    d314:	0028      	movs	r0, r5
    d316:	69ab      	ldr	r3, [r5, #24]
    d318:	4798      	blx	r3
    d31a:	e7ef      	b.n	d2fc <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    d31c:	6a2b      	ldr	r3, [r5, #32]
    d31e:	0028      	movs	r0, r5
    d320:	4798      	blx	r3
}
    d322:	e7f2      	b.n	d30a <_usart_interrupt_handler+0x176>
    d324:	200005d4 	.word	0x200005d4

0000d328 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    d328:	b510      	push	{r4, lr}
	switch (clock_source) {
    d32a:	2808      	cmp	r0, #8
    d32c:	d803      	bhi.n	d336 <system_clock_source_get_hz+0xe>
    d32e:	0080      	lsls	r0, r0, #2
    d330:	4b1b      	ldr	r3, [pc, #108]	; (d3a0 <system_clock_source_get_hz+0x78>)
    d332:	581b      	ldr	r3, [r3, r0]
    d334:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    d336:	2000      	movs	r0, #0
    d338:	e030      	b.n	d39c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    d33a:	4b1a      	ldr	r3, [pc, #104]	; (d3a4 <system_clock_source_get_hz+0x7c>)
    d33c:	6918      	ldr	r0, [r3, #16]
    d33e:	e02d      	b.n	d39c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    d340:	4b19      	ldr	r3, [pc, #100]	; (d3a8 <system_clock_source_get_hz+0x80>)
    d342:	6a1b      	ldr	r3, [r3, #32]
    d344:	059b      	lsls	r3, r3, #22
    d346:	0f9b      	lsrs	r3, r3, #30
    d348:	4818      	ldr	r0, [pc, #96]	; (d3ac <system_clock_source_get_hz+0x84>)
    d34a:	40d8      	lsrs	r0, r3
    d34c:	e026      	b.n	d39c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    d34e:	4b15      	ldr	r3, [pc, #84]	; (d3a4 <system_clock_source_get_hz+0x7c>)
    d350:	6958      	ldr	r0, [r3, #20]
    d352:	e023      	b.n	d39c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    d354:	4b13      	ldr	r3, [pc, #76]	; (d3a4 <system_clock_source_get_hz+0x7c>)
    d356:	681b      	ldr	r3, [r3, #0]
			return 0;
    d358:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    d35a:	079b      	lsls	r3, r3, #30
    d35c:	d51e      	bpl.n	d39c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    d35e:	4912      	ldr	r1, [pc, #72]	; (d3a8 <system_clock_source_get_hz+0x80>)
    d360:	2210      	movs	r2, #16
    d362:	68cb      	ldr	r3, [r1, #12]
    d364:	421a      	tst	r2, r3
    d366:	d0fc      	beq.n	d362 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    d368:	4b0e      	ldr	r3, [pc, #56]	; (d3a4 <system_clock_source_get_hz+0x7c>)
    d36a:	681b      	ldr	r3, [r3, #0]
    d36c:	075b      	lsls	r3, r3, #29
    d36e:	d401      	bmi.n	d374 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    d370:	480f      	ldr	r0, [pc, #60]	; (d3b0 <system_clock_source_get_hz+0x88>)
    d372:	e013      	b.n	d39c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    d374:	2000      	movs	r0, #0
    d376:	4b0f      	ldr	r3, [pc, #60]	; (d3b4 <system_clock_source_get_hz+0x8c>)
    d378:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    d37a:	4b0a      	ldr	r3, [pc, #40]	; (d3a4 <system_clock_source_get_hz+0x7c>)
    d37c:	689b      	ldr	r3, [r3, #8]
    d37e:	041b      	lsls	r3, r3, #16
    d380:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    d382:	4358      	muls	r0, r3
    d384:	e00a      	b.n	d39c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    d386:	2350      	movs	r3, #80	; 0x50
    d388:	4a07      	ldr	r2, [pc, #28]	; (d3a8 <system_clock_source_get_hz+0x80>)
    d38a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    d38c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    d38e:	075b      	lsls	r3, r3, #29
    d390:	d504      	bpl.n	d39c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    d392:	4b04      	ldr	r3, [pc, #16]	; (d3a4 <system_clock_source_get_hz+0x7c>)
    d394:	68d8      	ldr	r0, [r3, #12]
    d396:	e001      	b.n	d39c <system_clock_source_get_hz+0x74>
		return 32768UL;
    d398:	2080      	movs	r0, #128	; 0x80
    d39a:	0200      	lsls	r0, r0, #8
	}
}
    d39c:	bd10      	pop	{r4, pc}
    d39e:	46c0      	nop			; (mov r8, r8)
    d3a0:	00013df4 	.word	0x00013df4
    d3a4:	2000024c 	.word	0x2000024c
    d3a8:	40000800 	.word	0x40000800
    d3ac:	007a1200 	.word	0x007a1200
    d3b0:	02dc6c00 	.word	0x02dc6c00
    d3b4:	0000d989 	.word	0x0000d989

0000d3b8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    d3b8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    d3ba:	490c      	ldr	r1, [pc, #48]	; (d3ec <system_clock_source_osc8m_set_config+0x34>)
    d3bc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    d3be:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    d3c0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    d3c2:	7840      	ldrb	r0, [r0, #1]
    d3c4:	2201      	movs	r2, #1
    d3c6:	4010      	ands	r0, r2
    d3c8:	0180      	lsls	r0, r0, #6
    d3ca:	2640      	movs	r6, #64	; 0x40
    d3cc:	43b3      	bics	r3, r6
    d3ce:	4303      	orrs	r3, r0
    d3d0:	402a      	ands	r2, r5
    d3d2:	01d2      	lsls	r2, r2, #7
    d3d4:	2080      	movs	r0, #128	; 0x80
    d3d6:	4383      	bics	r3, r0
    d3d8:	4313      	orrs	r3, r2
    d3da:	2203      	movs	r2, #3
    d3dc:	4022      	ands	r2, r4
    d3de:	0212      	lsls	r2, r2, #8
    d3e0:	4803      	ldr	r0, [pc, #12]	; (d3f0 <system_clock_source_osc8m_set_config+0x38>)
    d3e2:	4003      	ands	r3, r0
    d3e4:	4313      	orrs	r3, r2
    d3e6:	620b      	str	r3, [r1, #32]
}
    d3e8:	bd70      	pop	{r4, r5, r6, pc}
    d3ea:	46c0      	nop			; (mov r8, r8)
    d3ec:	40000800 	.word	0x40000800
    d3f0:	fffffcff 	.word	0xfffffcff

0000d3f4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    d3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3f6:	46de      	mov	lr, fp
    d3f8:	4657      	mov	r7, sl
    d3fa:	464e      	mov	r6, r9
    d3fc:	4645      	mov	r5, r8
    d3fe:	b5e0      	push	{r5, r6, r7, lr}
    d400:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    d402:	4b26      	ldr	r3, [pc, #152]	; (d49c <system_clock_source_xosc32k_set_config+0xa8>)
    d404:	469b      	mov	fp, r3
    d406:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    d408:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    d40a:	7800      	ldrb	r0, [r0, #0]
    d40c:	4242      	negs	r2, r0
    d40e:	4142      	adcs	r2, r0
    d410:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    d412:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    d414:	78ca      	ldrb	r2, [r1, #3]
    d416:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    d418:	790a      	ldrb	r2, [r1, #4]
    d41a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    d41c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    d41e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    d420:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    d422:	688a      	ldr	r2, [r1, #8]
    d424:	491e      	ldr	r1, [pc, #120]	; (d4a0 <system_clock_source_xosc32k_set_config+0xac>)
    d426:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    d428:	2101      	movs	r1, #1
    d42a:	464a      	mov	r2, r9
    d42c:	0092      	lsls	r2, r2, #2
    d42e:	4691      	mov	r9, r2
    d430:	2204      	movs	r2, #4
    d432:	4393      	bics	r3, r2
    d434:	464a      	mov	r2, r9
    d436:	4313      	orrs	r3, r2
    d438:	4642      	mov	r2, r8
    d43a:	400a      	ands	r2, r1
    d43c:	00d2      	lsls	r2, r2, #3
    d43e:	4690      	mov	r8, r2
    d440:	2208      	movs	r2, #8
    d442:	4393      	bics	r3, r2
    d444:	4642      	mov	r2, r8
    d446:	4313      	orrs	r3, r2
    d448:	4662      	mov	r2, ip
    d44a:	400a      	ands	r2, r1
    d44c:	0112      	lsls	r2, r2, #4
    d44e:	4694      	mov	ip, r2
    d450:	2210      	movs	r2, #16
    d452:	4393      	bics	r3, r2
    d454:	4662      	mov	r2, ip
    d456:	4313      	orrs	r3, r2
    d458:	4008      	ands	r0, r1
    d45a:	0140      	lsls	r0, r0, #5
    d45c:	2220      	movs	r2, #32
    d45e:	4393      	bics	r3, r2
    d460:	4303      	orrs	r3, r0
    d462:	400f      	ands	r7, r1
    d464:	01bf      	lsls	r7, r7, #6
    d466:	2040      	movs	r0, #64	; 0x40
    d468:	4383      	bics	r3, r0
    d46a:	433b      	orrs	r3, r7
    d46c:	400e      	ands	r6, r1
    d46e:	01f6      	lsls	r6, r6, #7
    d470:	3040      	adds	r0, #64	; 0x40
    d472:	4383      	bics	r3, r0
    d474:	4333      	orrs	r3, r6
    d476:	3879      	subs	r0, #121	; 0x79
    d478:	4005      	ands	r5, r0
    d47a:	022d      	lsls	r5, r5, #8
    d47c:	4809      	ldr	r0, [pc, #36]	; (d4a4 <system_clock_source_xosc32k_set_config+0xb0>)
    d47e:	4003      	ands	r3, r0
    d480:	432b      	orrs	r3, r5
    d482:	4021      	ands	r1, r4
    d484:	0309      	lsls	r1, r1, #12
    d486:	4808      	ldr	r0, [pc, #32]	; (d4a8 <system_clock_source_xosc32k_set_config+0xb4>)
    d488:	4003      	ands	r3, r0
    d48a:	430b      	orrs	r3, r1
    d48c:	465a      	mov	r2, fp
    d48e:	8293      	strh	r3, [r2, #20]
}
    d490:	bc3c      	pop	{r2, r3, r4, r5}
    d492:	4690      	mov	r8, r2
    d494:	4699      	mov	r9, r3
    d496:	46a2      	mov	sl, r4
    d498:	46ab      	mov	fp, r5
    d49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d49c:	40000800 	.word	0x40000800
    d4a0:	2000024c 	.word	0x2000024c
    d4a4:	fffff8ff 	.word	0xfffff8ff
    d4a8:	ffffefff 	.word	0xffffefff

0000d4ac <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    d4ac:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    d4ae:	7a03      	ldrb	r3, [r0, #8]
    d4b0:	069b      	lsls	r3, r3, #26
    d4b2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    d4b4:	8942      	ldrh	r2, [r0, #10]
    d4b6:	0592      	lsls	r2, r2, #22
    d4b8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    d4ba:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    d4bc:	4918      	ldr	r1, [pc, #96]	; (d520 <system_clock_source_dfll_set_config+0x74>)
    d4be:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    d4c0:	7983      	ldrb	r3, [r0, #6]
    d4c2:	79c2      	ldrb	r2, [r0, #7]
    d4c4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    d4c6:	8842      	ldrh	r2, [r0, #2]
    d4c8:	8884      	ldrh	r4, [r0, #4]
    d4ca:	4322      	orrs	r2, r4
    d4cc:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    d4ce:	7842      	ldrb	r2, [r0, #1]
    d4d0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    d4d2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    d4d4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    d4d6:	7803      	ldrb	r3, [r0, #0]
    d4d8:	2b04      	cmp	r3, #4
    d4da:	d011      	beq.n	d500 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    d4dc:	2b20      	cmp	r3, #32
    d4de:	d10e      	bne.n	d4fe <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    d4e0:	7b03      	ldrb	r3, [r0, #12]
    d4e2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    d4e4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    d4e6:	4313      	orrs	r3, r2
    d4e8:	89c2      	ldrh	r2, [r0, #14]
    d4ea:	0412      	lsls	r2, r2, #16
    d4ec:	490d      	ldr	r1, [pc, #52]	; (d524 <system_clock_source_dfll_set_config+0x78>)
    d4ee:	400a      	ands	r2, r1
    d4f0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    d4f2:	4a0b      	ldr	r2, [pc, #44]	; (d520 <system_clock_source_dfll_set_config+0x74>)
    d4f4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    d4f6:	6811      	ldr	r1, [r2, #0]
    d4f8:	4b0b      	ldr	r3, [pc, #44]	; (d528 <system_clock_source_dfll_set_config+0x7c>)
    d4fa:	430b      	orrs	r3, r1
    d4fc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    d4fe:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    d500:	7b03      	ldrb	r3, [r0, #12]
    d502:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    d504:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    d506:	4313      	orrs	r3, r2
    d508:	89c2      	ldrh	r2, [r0, #14]
    d50a:	0412      	lsls	r2, r2, #16
    d50c:	4905      	ldr	r1, [pc, #20]	; (d524 <system_clock_source_dfll_set_config+0x78>)
    d50e:	400a      	ands	r2, r1
    d510:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    d512:	4a03      	ldr	r2, [pc, #12]	; (d520 <system_clock_source_dfll_set_config+0x74>)
    d514:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    d516:	6813      	ldr	r3, [r2, #0]
    d518:	2104      	movs	r1, #4
    d51a:	430b      	orrs	r3, r1
    d51c:	6013      	str	r3, [r2, #0]
    d51e:	e7ee      	b.n	d4fe <system_clock_source_dfll_set_config+0x52>
    d520:	2000024c 	.word	0x2000024c
    d524:	03ff0000 	.word	0x03ff0000
    d528:	00000424 	.word	0x00000424

0000d52c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    d52c:	2808      	cmp	r0, #8
    d52e:	d803      	bhi.n	d538 <system_clock_source_enable+0xc>
    d530:	0080      	lsls	r0, r0, #2
    d532:	4b25      	ldr	r3, [pc, #148]	; (d5c8 <system_clock_source_enable+0x9c>)
    d534:	581b      	ldr	r3, [r3, r0]
    d536:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    d538:	2017      	movs	r0, #23
    d53a:	e044      	b.n	d5c6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    d53c:	4a23      	ldr	r2, [pc, #140]	; (d5cc <system_clock_source_enable+0xa0>)
    d53e:	6a13      	ldr	r3, [r2, #32]
    d540:	2102      	movs	r1, #2
    d542:	430b      	orrs	r3, r1
    d544:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    d546:	2000      	movs	r0, #0
    d548:	e03d      	b.n	d5c6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    d54a:	4a20      	ldr	r2, [pc, #128]	; (d5cc <system_clock_source_enable+0xa0>)
    d54c:	6993      	ldr	r3, [r2, #24]
    d54e:	2102      	movs	r1, #2
    d550:	430b      	orrs	r3, r1
    d552:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    d554:	2000      	movs	r0, #0
		break;
    d556:	e036      	b.n	d5c6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    d558:	4a1c      	ldr	r2, [pc, #112]	; (d5cc <system_clock_source_enable+0xa0>)
    d55a:	8a13      	ldrh	r3, [r2, #16]
    d55c:	2102      	movs	r1, #2
    d55e:	430b      	orrs	r3, r1
    d560:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    d562:	2000      	movs	r0, #0
		break;
    d564:	e02f      	b.n	d5c6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    d566:	4a19      	ldr	r2, [pc, #100]	; (d5cc <system_clock_source_enable+0xa0>)
    d568:	8a93      	ldrh	r3, [r2, #20]
    d56a:	2102      	movs	r1, #2
    d56c:	430b      	orrs	r3, r1
    d56e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    d570:	2000      	movs	r0, #0
		break;
    d572:	e028      	b.n	d5c6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    d574:	4916      	ldr	r1, [pc, #88]	; (d5d0 <system_clock_source_enable+0xa4>)
    d576:	680b      	ldr	r3, [r1, #0]
    d578:	2202      	movs	r2, #2
    d57a:	4313      	orrs	r3, r2
    d57c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    d57e:	4b13      	ldr	r3, [pc, #76]	; (d5cc <system_clock_source_enable+0xa0>)
    d580:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    d582:	0019      	movs	r1, r3
    d584:	320e      	adds	r2, #14
    d586:	68cb      	ldr	r3, [r1, #12]
    d588:	421a      	tst	r2, r3
    d58a:	d0fc      	beq.n	d586 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    d58c:	4a10      	ldr	r2, [pc, #64]	; (d5d0 <system_clock_source_enable+0xa4>)
    d58e:	6891      	ldr	r1, [r2, #8]
    d590:	4b0e      	ldr	r3, [pc, #56]	; (d5cc <system_clock_source_enable+0xa0>)
    d592:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    d594:	6852      	ldr	r2, [r2, #4]
    d596:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    d598:	2200      	movs	r2, #0
    d59a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    d59c:	0019      	movs	r1, r3
    d59e:	3210      	adds	r2, #16
    d5a0:	68cb      	ldr	r3, [r1, #12]
    d5a2:	421a      	tst	r2, r3
    d5a4:	d0fc      	beq.n	d5a0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    d5a6:	4b0a      	ldr	r3, [pc, #40]	; (d5d0 <system_clock_source_enable+0xa4>)
    d5a8:	681b      	ldr	r3, [r3, #0]
    d5aa:	b29b      	uxth	r3, r3
    d5ac:	4a07      	ldr	r2, [pc, #28]	; (d5cc <system_clock_source_enable+0xa0>)
    d5ae:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    d5b0:	2000      	movs	r0, #0
    d5b2:	e008      	b.n	d5c6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    d5b4:	4905      	ldr	r1, [pc, #20]	; (d5cc <system_clock_source_enable+0xa0>)
    d5b6:	2244      	movs	r2, #68	; 0x44
    d5b8:	5c8b      	ldrb	r3, [r1, r2]
    d5ba:	2002      	movs	r0, #2
    d5bc:	4303      	orrs	r3, r0
    d5be:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    d5c0:	2000      	movs	r0, #0
		break;
    d5c2:	e000      	b.n	d5c6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    d5c4:	2000      	movs	r0, #0
}
    d5c6:	4770      	bx	lr
    d5c8:	00013e18 	.word	0x00013e18
    d5cc:	40000800 	.word	0x40000800
    d5d0:	2000024c 	.word	0x2000024c

0000d5d4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    d5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5d6:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    d5d8:	22c2      	movs	r2, #194	; 0xc2
    d5da:	00d2      	lsls	r2, r2, #3
    d5dc:	4b47      	ldr	r3, [pc, #284]	; (d6fc <system_clock_init+0x128>)
    d5de:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    d5e0:	4a47      	ldr	r2, [pc, #284]	; (d700 <system_clock_init+0x12c>)
    d5e2:	6853      	ldr	r3, [r2, #4]
    d5e4:	211e      	movs	r1, #30
    d5e6:	438b      	bics	r3, r1
    d5e8:	391a      	subs	r1, #26
    d5ea:	430b      	orrs	r3, r1
    d5ec:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    d5ee:	2202      	movs	r2, #2
    d5f0:	ab01      	add	r3, sp, #4
    d5f2:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    d5f4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    d5f6:	4d43      	ldr	r5, [pc, #268]	; (d704 <system_clock_init+0x130>)
    d5f8:	b2e0      	uxtb	r0, r4
    d5fa:	a901      	add	r1, sp, #4
    d5fc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    d5fe:	3401      	adds	r4, #1
    d600:	2c25      	cmp	r4, #37	; 0x25
    d602:	d1f9      	bne.n	d5f8 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    d604:	a80a      	add	r0, sp, #40	; 0x28
    d606:	2300      	movs	r3, #0
    d608:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    d60a:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    d60c:	2280      	movs	r2, #128	; 0x80
    d60e:	0212      	lsls	r2, r2, #8
    d610:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    d612:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    d614:	2201      	movs	r2, #1
    d616:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    d618:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    d61a:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    d61c:	3202      	adds	r2, #2
    d61e:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    d620:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    d622:	4b39      	ldr	r3, [pc, #228]	; (d708 <system_clock_init+0x134>)
    d624:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    d626:	2005      	movs	r0, #5
    d628:	4b38      	ldr	r3, [pc, #224]	; (d70c <system_clock_init+0x138>)
    d62a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    d62c:	4933      	ldr	r1, [pc, #204]	; (d6fc <system_clock_init+0x128>)
    d62e:	2202      	movs	r2, #2
    d630:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    d632:	421a      	tst	r2, r3
    d634:	d0fc      	beq.n	d630 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    d636:	4a31      	ldr	r2, [pc, #196]	; (d6fc <system_clock_init+0x128>)
    d638:	8a93      	ldrh	r3, [r2, #20]
    d63a:	2180      	movs	r1, #128	; 0x80
    d63c:	430b      	orrs	r3, r1
    d63e:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    d640:	ab05      	add	r3, sp, #20
    d642:	2100      	movs	r1, #0
    d644:	2200      	movs	r2, #0
    d646:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    d648:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    d64a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    d64c:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    d64e:	313f      	adds	r1, #63	; 0x3f
    d650:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    d652:	393b      	subs	r1, #59	; 0x3b
    d654:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    d656:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    d658:	4b2d      	ldr	r3, [pc, #180]	; (d710 <system_clock_init+0x13c>)
    d65a:	681b      	ldr	r3, [r3, #0]
    d65c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    d65e:	2b3f      	cmp	r3, #63	; 0x3f
    d660:	d04a      	beq.n	d6f8 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    d662:	a805      	add	r0, sp, #20
    d664:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    d666:	4b2b      	ldr	r3, [pc, #172]	; (d714 <system_clock_init+0x140>)
    d668:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    d66a:	2307      	movs	r3, #7
    d66c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    d66e:	3338      	adds	r3, #56	; 0x38
    d670:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    d672:	4b29      	ldr	r3, [pc, #164]	; (d718 <system_clock_init+0x144>)
    d674:	4798      	blx	r3
	config->run_in_standby  = false;
    d676:	a804      	add	r0, sp, #16
    d678:	2500      	movs	r5, #0
    d67a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    d67c:	2601      	movs	r6, #1
    d67e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    d680:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    d682:	4b26      	ldr	r3, [pc, #152]	; (d71c <system_clock_init+0x148>)
    d684:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    d686:	2006      	movs	r0, #6
    d688:	4f20      	ldr	r7, [pc, #128]	; (d70c <system_clock_init+0x138>)
    d68a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    d68c:	4b24      	ldr	r3, [pc, #144]	; (d720 <system_clock_init+0x14c>)
    d68e:	4798      	blx	r3
	config->division_factor    = 1;
    d690:	ac01      	add	r4, sp, #4
    d692:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    d694:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    d696:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    d698:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    d69a:	2305      	movs	r3, #5
    d69c:	7023      	strb	r3, [r4, #0]
    d69e:	0021      	movs	r1, r4
    d6a0:	2001      	movs	r0, #1
    d6a2:	4b20      	ldr	r3, [pc, #128]	; (d724 <system_clock_init+0x150>)
    d6a4:	4798      	blx	r3
    d6a6:	2001      	movs	r0, #1
    d6a8:	4b1f      	ldr	r3, [pc, #124]	; (d728 <system_clock_init+0x154>)
    d6aa:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    d6ac:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    d6ae:	0021      	movs	r1, r4
    d6b0:	2000      	movs	r0, #0
    d6b2:	4b14      	ldr	r3, [pc, #80]	; (d704 <system_clock_init+0x130>)
    d6b4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    d6b6:	2000      	movs	r0, #0
    d6b8:	4b1c      	ldr	r3, [pc, #112]	; (d72c <system_clock_init+0x158>)
    d6ba:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    d6bc:	2007      	movs	r0, #7
    d6be:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    d6c0:	490e      	ldr	r1, [pc, #56]	; (d6fc <system_clock_init+0x128>)
    d6c2:	22d0      	movs	r2, #208	; 0xd0
    d6c4:	68cb      	ldr	r3, [r1, #12]
    d6c6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    d6c8:	2bd0      	cmp	r3, #208	; 0xd0
    d6ca:	d1fb      	bne.n	d6c4 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    d6cc:	4a18      	ldr	r2, [pc, #96]	; (d730 <system_clock_init+0x15c>)
    d6ce:	2300      	movs	r3, #0
    d6d0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    d6d2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    d6d4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    d6d6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    d6d8:	a901      	add	r1, sp, #4
    d6da:	2201      	movs	r2, #1
    d6dc:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    d6de:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    d6e0:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    d6e2:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    d6e4:	3307      	adds	r3, #7
    d6e6:	700b      	strb	r3, [r1, #0]
    d6e8:	2000      	movs	r0, #0
    d6ea:	4b0e      	ldr	r3, [pc, #56]	; (d724 <system_clock_init+0x150>)
    d6ec:	4798      	blx	r3
    d6ee:	2000      	movs	r0, #0
    d6f0:	4b0d      	ldr	r3, [pc, #52]	; (d728 <system_clock_init+0x154>)
    d6f2:	4798      	blx	r3
#endif
}
    d6f4:	b00f      	add	sp, #60	; 0x3c
    d6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    d6f8:	3b20      	subs	r3, #32
    d6fa:	e7b2      	b.n	d662 <system_clock_init+0x8e>
    d6fc:	40000800 	.word	0x40000800
    d700:	41004000 	.word	0x41004000
    d704:	0000d96d 	.word	0x0000d96d
    d708:	0000d3f5 	.word	0x0000d3f5
    d70c:	0000d52d 	.word	0x0000d52d
    d710:	00806024 	.word	0x00806024
    d714:	000005b9 	.word	0x000005b9
    d718:	0000d4ad 	.word	0x0000d4ad
    d71c:	0000d3b9 	.word	0x0000d3b9
    d720:	0000d735 	.word	0x0000d735
    d724:	0000d759 	.word	0x0000d759
    d728:	0000d811 	.word	0x0000d811
    d72c:	0000d8e1 	.word	0x0000d8e1
    d730:	40000400 	.word	0x40000400

0000d734 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    d734:	4a06      	ldr	r2, [pc, #24]	; (d750 <system_gclk_init+0x1c>)
    d736:	6993      	ldr	r3, [r2, #24]
    d738:	2108      	movs	r1, #8
    d73a:	430b      	orrs	r3, r1
    d73c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    d73e:	2201      	movs	r2, #1
    d740:	4b04      	ldr	r3, [pc, #16]	; (d754 <system_gclk_init+0x20>)
    d742:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    d744:	0019      	movs	r1, r3
    d746:	780b      	ldrb	r3, [r1, #0]
    d748:	4213      	tst	r3, r2
    d74a:	d1fc      	bne.n	d746 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    d74c:	4770      	bx	lr
    d74e:	46c0      	nop			; (mov r8, r8)
    d750:	40000400 	.word	0x40000400
    d754:	40000c00 	.word	0x40000c00

0000d758 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    d758:	b570      	push	{r4, r5, r6, lr}
    d75a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    d75c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    d75e:	780d      	ldrb	r5, [r1, #0]
    d760:	022d      	lsls	r5, r5, #8
    d762:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    d764:	784b      	ldrb	r3, [r1, #1]
    d766:	2b00      	cmp	r3, #0
    d768:	d002      	beq.n	d770 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    d76a:	2380      	movs	r3, #128	; 0x80
    d76c:	02db      	lsls	r3, r3, #11
    d76e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    d770:	7a4b      	ldrb	r3, [r1, #9]
    d772:	2b00      	cmp	r3, #0
    d774:	d002      	beq.n	d77c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    d776:	2380      	movs	r3, #128	; 0x80
    d778:	031b      	lsls	r3, r3, #12
    d77a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    d77c:	6848      	ldr	r0, [r1, #4]
    d77e:	2801      	cmp	r0, #1
    d780:	d910      	bls.n	d7a4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    d782:	1e43      	subs	r3, r0, #1
    d784:	4218      	tst	r0, r3
    d786:	d134      	bne.n	d7f2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    d788:	2802      	cmp	r0, #2
    d78a:	d930      	bls.n	d7ee <system_gclk_gen_set_config+0x96>
    d78c:	2302      	movs	r3, #2
    d78e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    d790:	3201      	adds	r2, #1
						mask <<= 1) {
    d792:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    d794:	4298      	cmp	r0, r3
    d796:	d8fb      	bhi.n	d790 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    d798:	0212      	lsls	r2, r2, #8
    d79a:	4332      	orrs	r2, r6
    d79c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    d79e:	2380      	movs	r3, #128	; 0x80
    d7a0:	035b      	lsls	r3, r3, #13
    d7a2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    d7a4:	7a0b      	ldrb	r3, [r1, #8]
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	d002      	beq.n	d7b0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    d7aa:	2380      	movs	r3, #128	; 0x80
    d7ac:	039b      	lsls	r3, r3, #14
    d7ae:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d7b0:	4a13      	ldr	r2, [pc, #76]	; (d800 <system_gclk_gen_set_config+0xa8>)
    d7b2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    d7b4:	b25b      	sxtb	r3, r3
    d7b6:	2b00      	cmp	r3, #0
    d7b8:	dbfb      	blt.n	d7b2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    d7ba:	4b12      	ldr	r3, [pc, #72]	; (d804 <system_gclk_gen_set_config+0xac>)
    d7bc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    d7be:	4b12      	ldr	r3, [pc, #72]	; (d808 <system_gclk_gen_set_config+0xb0>)
    d7c0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d7c2:	4a0f      	ldr	r2, [pc, #60]	; (d800 <system_gclk_gen_set_config+0xa8>)
    d7c4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    d7c6:	b25b      	sxtb	r3, r3
    d7c8:	2b00      	cmp	r3, #0
    d7ca:	dbfb      	blt.n	d7c4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    d7cc:	4b0c      	ldr	r3, [pc, #48]	; (d800 <system_gclk_gen_set_config+0xa8>)
    d7ce:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d7d0:	001a      	movs	r2, r3
    d7d2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    d7d4:	b25b      	sxtb	r3, r3
    d7d6:	2b00      	cmp	r3, #0
    d7d8:	dbfb      	blt.n	d7d2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    d7da:	4a09      	ldr	r2, [pc, #36]	; (d800 <system_gclk_gen_set_config+0xa8>)
    d7dc:	6853      	ldr	r3, [r2, #4]
    d7de:	2180      	movs	r1, #128	; 0x80
    d7e0:	0249      	lsls	r1, r1, #9
    d7e2:	400b      	ands	r3, r1
    d7e4:	431d      	orrs	r5, r3
    d7e6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    d7e8:	4b08      	ldr	r3, [pc, #32]	; (d80c <system_gclk_gen_set_config+0xb4>)
    d7ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    d7ec:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    d7ee:	2200      	movs	r2, #0
    d7f0:	e7d2      	b.n	d798 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    d7f2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    d7f4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    d7f6:	2380      	movs	r3, #128	; 0x80
    d7f8:	029b      	lsls	r3, r3, #10
    d7fa:	431d      	orrs	r5, r3
    d7fc:	e7d2      	b.n	d7a4 <system_gclk_gen_set_config+0x4c>
    d7fe:	46c0      	nop			; (mov r8, r8)
    d800:	40000c00 	.word	0x40000c00
    d804:	0000bdc1 	.word	0x0000bdc1
    d808:	40000c08 	.word	0x40000c08
    d80c:	0000be01 	.word	0x0000be01

0000d810 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    d810:	b510      	push	{r4, lr}
    d812:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d814:	4a0b      	ldr	r2, [pc, #44]	; (d844 <system_gclk_gen_enable+0x34>)
    d816:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    d818:	b25b      	sxtb	r3, r3
    d81a:	2b00      	cmp	r3, #0
    d81c:	dbfb      	blt.n	d816 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    d81e:	4b0a      	ldr	r3, [pc, #40]	; (d848 <system_gclk_gen_enable+0x38>)
    d820:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    d822:	4b0a      	ldr	r3, [pc, #40]	; (d84c <system_gclk_gen_enable+0x3c>)
    d824:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d826:	4a07      	ldr	r2, [pc, #28]	; (d844 <system_gclk_gen_enable+0x34>)
    d828:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    d82a:	b25b      	sxtb	r3, r3
    d82c:	2b00      	cmp	r3, #0
    d82e:	dbfb      	blt.n	d828 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    d830:	4a04      	ldr	r2, [pc, #16]	; (d844 <system_gclk_gen_enable+0x34>)
    d832:	6851      	ldr	r1, [r2, #4]
    d834:	2380      	movs	r3, #128	; 0x80
    d836:	025b      	lsls	r3, r3, #9
    d838:	430b      	orrs	r3, r1
    d83a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    d83c:	4b04      	ldr	r3, [pc, #16]	; (d850 <system_gclk_gen_enable+0x40>)
    d83e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    d840:	bd10      	pop	{r4, pc}
    d842:	46c0      	nop			; (mov r8, r8)
    d844:	40000c00 	.word	0x40000c00
    d848:	0000bdc1 	.word	0x0000bdc1
    d84c:	40000c04 	.word	0x40000c04
    d850:	0000be01 	.word	0x0000be01

0000d854 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    d854:	b570      	push	{r4, r5, r6, lr}
    d856:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d858:	4a1a      	ldr	r2, [pc, #104]	; (d8c4 <system_gclk_gen_get_hz+0x70>)
    d85a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    d85c:	b25b      	sxtb	r3, r3
    d85e:	2b00      	cmp	r3, #0
    d860:	dbfb      	blt.n	d85a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    d862:	4b19      	ldr	r3, [pc, #100]	; (d8c8 <system_gclk_gen_get_hz+0x74>)
    d864:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    d866:	4b19      	ldr	r3, [pc, #100]	; (d8cc <system_gclk_gen_get_hz+0x78>)
    d868:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d86a:	4a16      	ldr	r2, [pc, #88]	; (d8c4 <system_gclk_gen_get_hz+0x70>)
    d86c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    d86e:	b25b      	sxtb	r3, r3
    d870:	2b00      	cmp	r3, #0
    d872:	dbfb      	blt.n	d86c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    d874:	4e13      	ldr	r6, [pc, #76]	; (d8c4 <system_gclk_gen_get_hz+0x70>)
    d876:	6870      	ldr	r0, [r6, #4]
    d878:	04c0      	lsls	r0, r0, #19
    d87a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    d87c:	4b14      	ldr	r3, [pc, #80]	; (d8d0 <system_gclk_gen_get_hz+0x7c>)
    d87e:	4798      	blx	r3
    d880:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    d882:	4b12      	ldr	r3, [pc, #72]	; (d8cc <system_gclk_gen_get_hz+0x78>)
    d884:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    d886:	6876      	ldr	r6, [r6, #4]
    d888:	02f6      	lsls	r6, r6, #11
    d88a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    d88c:	4b11      	ldr	r3, [pc, #68]	; (d8d4 <system_gclk_gen_get_hz+0x80>)
    d88e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d890:	4a0c      	ldr	r2, [pc, #48]	; (d8c4 <system_gclk_gen_get_hz+0x70>)
    d892:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    d894:	b25b      	sxtb	r3, r3
    d896:	2b00      	cmp	r3, #0
    d898:	dbfb      	blt.n	d892 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    d89a:	4b0a      	ldr	r3, [pc, #40]	; (d8c4 <system_gclk_gen_get_hz+0x70>)
    d89c:	689c      	ldr	r4, [r3, #8]
    d89e:	0224      	lsls	r4, r4, #8
    d8a0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    d8a2:	4b0d      	ldr	r3, [pc, #52]	; (d8d8 <system_gclk_gen_get_hz+0x84>)
    d8a4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    d8a6:	2e00      	cmp	r6, #0
    d8a8:	d107      	bne.n	d8ba <system_gclk_gen_get_hz+0x66>
    d8aa:	2c01      	cmp	r4, #1
    d8ac:	d907      	bls.n	d8be <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    d8ae:	0021      	movs	r1, r4
    d8b0:	0028      	movs	r0, r5
    d8b2:	4b0a      	ldr	r3, [pc, #40]	; (d8dc <system_gclk_gen_get_hz+0x88>)
    d8b4:	4798      	blx	r3
    d8b6:	0005      	movs	r5, r0
    d8b8:	e001      	b.n	d8be <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    d8ba:	3401      	adds	r4, #1
    d8bc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    d8be:	0028      	movs	r0, r5
    d8c0:	bd70      	pop	{r4, r5, r6, pc}
    d8c2:	46c0      	nop			; (mov r8, r8)
    d8c4:	40000c00 	.word	0x40000c00
    d8c8:	0000bdc1 	.word	0x0000bdc1
    d8cc:	40000c04 	.word	0x40000c04
    d8d0:	0000d329 	.word	0x0000d329
    d8d4:	40000c08 	.word	0x40000c08
    d8d8:	0000be01 	.word	0x0000be01
    d8dc:	00011315 	.word	0x00011315

0000d8e0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    d8e0:	b510      	push	{r4, lr}
    d8e2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    d8e4:	4b06      	ldr	r3, [pc, #24]	; (d900 <system_gclk_chan_enable+0x20>)
    d8e6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    d8e8:	4b06      	ldr	r3, [pc, #24]	; (d904 <system_gclk_chan_enable+0x24>)
    d8ea:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    d8ec:	4a06      	ldr	r2, [pc, #24]	; (d908 <system_gclk_chan_enable+0x28>)
    d8ee:	8853      	ldrh	r3, [r2, #2]
    d8f0:	2180      	movs	r1, #128	; 0x80
    d8f2:	01c9      	lsls	r1, r1, #7
    d8f4:	430b      	orrs	r3, r1
    d8f6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    d8f8:	4b04      	ldr	r3, [pc, #16]	; (d90c <system_gclk_chan_enable+0x2c>)
    d8fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    d8fc:	bd10      	pop	{r4, pc}
    d8fe:	46c0      	nop			; (mov r8, r8)
    d900:	0000bdc1 	.word	0x0000bdc1
    d904:	40000c02 	.word	0x40000c02
    d908:	40000c00 	.word	0x40000c00
    d90c:	0000be01 	.word	0x0000be01

0000d910 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    d910:	b510      	push	{r4, lr}
    d912:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    d914:	4b0f      	ldr	r3, [pc, #60]	; (d954 <system_gclk_chan_disable+0x44>)
    d916:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    d918:	4b0f      	ldr	r3, [pc, #60]	; (d958 <system_gclk_chan_disable+0x48>)
    d91a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    d91c:	4a0f      	ldr	r2, [pc, #60]	; (d95c <system_gclk_chan_disable+0x4c>)
    d91e:	8853      	ldrh	r3, [r2, #2]
    d920:	051b      	lsls	r3, r3, #20
    d922:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    d924:	8853      	ldrh	r3, [r2, #2]
    d926:	490e      	ldr	r1, [pc, #56]	; (d960 <system_gclk_chan_disable+0x50>)
    d928:	400b      	ands	r3, r1
    d92a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    d92c:	8853      	ldrh	r3, [r2, #2]
    d92e:	490d      	ldr	r1, [pc, #52]	; (d964 <system_gclk_chan_disable+0x54>)
    d930:	400b      	ands	r3, r1
    d932:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    d934:	0011      	movs	r1, r2
    d936:	2280      	movs	r2, #128	; 0x80
    d938:	01d2      	lsls	r2, r2, #7
    d93a:	884b      	ldrh	r3, [r1, #2]
    d93c:	4213      	tst	r3, r2
    d93e:	d1fc      	bne.n	d93a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    d940:	4906      	ldr	r1, [pc, #24]	; (d95c <system_gclk_chan_disable+0x4c>)
    d942:	884a      	ldrh	r2, [r1, #2]
    d944:	0203      	lsls	r3, r0, #8
    d946:	4806      	ldr	r0, [pc, #24]	; (d960 <system_gclk_chan_disable+0x50>)
    d948:	4002      	ands	r2, r0
    d94a:	4313      	orrs	r3, r2
    d94c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    d94e:	4b06      	ldr	r3, [pc, #24]	; (d968 <system_gclk_chan_disable+0x58>)
    d950:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    d952:	bd10      	pop	{r4, pc}
    d954:	0000bdc1 	.word	0x0000bdc1
    d958:	40000c02 	.word	0x40000c02
    d95c:	40000c00 	.word	0x40000c00
    d960:	fffff0ff 	.word	0xfffff0ff
    d964:	ffffbfff 	.word	0xffffbfff
    d968:	0000be01 	.word	0x0000be01

0000d96c <system_gclk_chan_set_config>:
{
    d96c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    d96e:	780c      	ldrb	r4, [r1, #0]
    d970:	0224      	lsls	r4, r4, #8
    d972:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    d974:	4b02      	ldr	r3, [pc, #8]	; (d980 <system_gclk_chan_set_config+0x14>)
    d976:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    d978:	b2a4      	uxth	r4, r4
    d97a:	4b02      	ldr	r3, [pc, #8]	; (d984 <system_gclk_chan_set_config+0x18>)
    d97c:	805c      	strh	r4, [r3, #2]
}
    d97e:	bd10      	pop	{r4, pc}
    d980:	0000d911 	.word	0x0000d911
    d984:	40000c00 	.word	0x40000c00

0000d988 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    d988:	b510      	push	{r4, lr}
    d98a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    d98c:	4b06      	ldr	r3, [pc, #24]	; (d9a8 <system_gclk_chan_get_hz+0x20>)
    d98e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    d990:	4b06      	ldr	r3, [pc, #24]	; (d9ac <system_gclk_chan_get_hz+0x24>)
    d992:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    d994:	4b06      	ldr	r3, [pc, #24]	; (d9b0 <system_gclk_chan_get_hz+0x28>)
    d996:	885c      	ldrh	r4, [r3, #2]
    d998:	0524      	lsls	r4, r4, #20
    d99a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    d99c:	4b05      	ldr	r3, [pc, #20]	; (d9b4 <system_gclk_chan_get_hz+0x2c>)
    d99e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    d9a0:	0020      	movs	r0, r4
    d9a2:	4b05      	ldr	r3, [pc, #20]	; (d9b8 <system_gclk_chan_get_hz+0x30>)
    d9a4:	4798      	blx	r3
}
    d9a6:	bd10      	pop	{r4, pc}
    d9a8:	0000bdc1 	.word	0x0000bdc1
    d9ac:	40000c02 	.word	0x40000c02
    d9b0:	40000c00 	.word	0x40000c00
    d9b4:	0000be01 	.word	0x0000be01
    d9b8:	0000d855 	.word	0x0000d855

0000d9bc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    d9bc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    d9be:	78d3      	ldrb	r3, [r2, #3]
    d9c0:	2b00      	cmp	r3, #0
    d9c2:	d135      	bne.n	da30 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    d9c4:	7813      	ldrb	r3, [r2, #0]
    d9c6:	2b80      	cmp	r3, #128	; 0x80
    d9c8:	d029      	beq.n	da1e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    d9ca:	061b      	lsls	r3, r3, #24
    d9cc:	2480      	movs	r4, #128	; 0x80
    d9ce:	0264      	lsls	r4, r4, #9
    d9d0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    d9d2:	7854      	ldrb	r4, [r2, #1]
    d9d4:	2502      	movs	r5, #2
    d9d6:	43ac      	bics	r4, r5
    d9d8:	d106      	bne.n	d9e8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    d9da:	7894      	ldrb	r4, [r2, #2]
    d9dc:	2c00      	cmp	r4, #0
    d9de:	d120      	bne.n	da22 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    d9e0:	2480      	movs	r4, #128	; 0x80
    d9e2:	02a4      	lsls	r4, r4, #10
    d9e4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    d9e6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    d9e8:	7854      	ldrb	r4, [r2, #1]
    d9ea:	3c01      	subs	r4, #1
    d9ec:	2c01      	cmp	r4, #1
    d9ee:	d91c      	bls.n	da2a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    d9f0:	040d      	lsls	r5, r1, #16
    d9f2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    d9f4:	24a0      	movs	r4, #160	; 0xa0
    d9f6:	05e4      	lsls	r4, r4, #23
    d9f8:	432c      	orrs	r4, r5
    d9fa:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    d9fc:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    d9fe:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    da00:	24d0      	movs	r4, #208	; 0xd0
    da02:	0624      	lsls	r4, r4, #24
    da04:	432c      	orrs	r4, r5
    da06:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    da08:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    da0a:	78d4      	ldrb	r4, [r2, #3]
    da0c:	2c00      	cmp	r4, #0
    da0e:	d122      	bne.n	da56 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    da10:	035b      	lsls	r3, r3, #13
    da12:	d51c      	bpl.n	da4e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    da14:	7893      	ldrb	r3, [r2, #2]
    da16:	2b01      	cmp	r3, #1
    da18:	d01e      	beq.n	da58 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    da1a:	6141      	str	r1, [r0, #20]
    da1c:	e017      	b.n	da4e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    da1e:	2300      	movs	r3, #0
    da20:	e7d7      	b.n	d9d2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    da22:	24c0      	movs	r4, #192	; 0xc0
    da24:	02e4      	lsls	r4, r4, #11
    da26:	4323      	orrs	r3, r4
    da28:	e7dd      	b.n	d9e6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    da2a:	4c0d      	ldr	r4, [pc, #52]	; (da60 <_system_pinmux_config+0xa4>)
    da2c:	4023      	ands	r3, r4
    da2e:	e7df      	b.n	d9f0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    da30:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    da32:	040c      	lsls	r4, r1, #16
    da34:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    da36:	23a0      	movs	r3, #160	; 0xa0
    da38:	05db      	lsls	r3, r3, #23
    da3a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    da3c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    da3e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    da40:	23d0      	movs	r3, #208	; 0xd0
    da42:	061b      	lsls	r3, r3, #24
    da44:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    da46:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    da48:	78d3      	ldrb	r3, [r2, #3]
    da4a:	2b00      	cmp	r3, #0
    da4c:	d103      	bne.n	da56 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    da4e:	7853      	ldrb	r3, [r2, #1]
    da50:	3b01      	subs	r3, #1
    da52:	2b01      	cmp	r3, #1
    da54:	d902      	bls.n	da5c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    da56:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    da58:	6181      	str	r1, [r0, #24]
    da5a:	e7f8      	b.n	da4e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    da5c:	6081      	str	r1, [r0, #8]
}
    da5e:	e7fa      	b.n	da56 <_system_pinmux_config+0x9a>
    da60:	fffbffff 	.word	0xfffbffff

0000da64 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    da64:	b510      	push	{r4, lr}
    da66:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    da68:	09c1      	lsrs	r1, r0, #7
		return NULL;
    da6a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    da6c:	2900      	cmp	r1, #0
    da6e:	d104      	bne.n	da7a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    da70:	0943      	lsrs	r3, r0, #5
    da72:	01db      	lsls	r3, r3, #7
    da74:	4905      	ldr	r1, [pc, #20]	; (da8c <system_pinmux_pin_set_config+0x28>)
    da76:	468c      	mov	ip, r1
    da78:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    da7a:	241f      	movs	r4, #31
    da7c:	4020      	ands	r0, r4
    da7e:	2101      	movs	r1, #1
    da80:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    da82:	0018      	movs	r0, r3
    da84:	4b02      	ldr	r3, [pc, #8]	; (da90 <system_pinmux_pin_set_config+0x2c>)
    da86:	4798      	blx	r3
}
    da88:	bd10      	pop	{r4, pc}
    da8a:	46c0      	nop			; (mov r8, r8)
    da8c:	41004400 	.word	0x41004400
    da90:	0000d9bd 	.word	0x0000d9bd

0000da94 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    da94:	4770      	bx	lr
	...

0000da98 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    da98:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    da9a:	4b04      	ldr	r3, [pc, #16]	; (daac <system_init+0x14>)
    da9c:	4798      	blx	r3

	/* Initialize board hardware */
	//system_board_init();

	/* Initialize EVSYS hardware */
	_system_events_init();
    da9e:	4b04      	ldr	r3, [pc, #16]	; (dab0 <system_init+0x18>)
    daa0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    daa2:	4b04      	ldr	r3, [pc, #16]	; (dab4 <system_init+0x1c>)
    daa4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    daa6:	4b04      	ldr	r3, [pc, #16]	; (dab8 <system_init+0x20>)
    daa8:	4798      	blx	r3
}
    daaa:	bd10      	pop	{r4, pc}
    daac:	0000d5d5 	.word	0x0000d5d5
    dab0:	0000da95 	.word	0x0000da95
    dab4:	0000bf09 	.word	0x0000bf09
    dab8:	0000da95 	.word	0x0000da95

0000dabc <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    dabc:	4b09      	ldr	r3, [pc, #36]	; (dae4 <_tcc_get_inst_index+0x28>)
    dabe:	4298      	cmp	r0, r3
    dac0:	d00c      	beq.n	dadc <_tcc_get_inst_index+0x20>
    dac2:	4b09      	ldr	r3, [pc, #36]	; (dae8 <_tcc_get_inst_index+0x2c>)
    dac4:	4298      	cmp	r0, r3
    dac6:	d007      	beq.n	dad8 <_tcc_get_inst_index+0x1c>
    dac8:	4a08      	ldr	r2, [pc, #32]	; (daec <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    daca:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    dacc:	4290      	cmp	r0, r2
    dace:	d001      	beq.n	dad4 <_tcc_get_inst_index+0x18>
}
    dad0:	0018      	movs	r0, r3
    dad2:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    dad4:	3302      	adds	r3, #2
    dad6:	e002      	b.n	dade <_tcc_get_inst_index+0x22>
    dad8:	2301      	movs	r3, #1
    dada:	e000      	b.n	dade <_tcc_get_inst_index+0x22>
    dadc:	2300      	movs	r3, #0
			return i;
    dade:	b2db      	uxtb	r3, r3
    dae0:	e7f6      	b.n	dad0 <_tcc_get_inst_index+0x14>
    dae2:	46c0      	nop			; (mov r8, r8)
    dae4:	42002000 	.word	0x42002000
    dae8:	42002400 	.word	0x42002400
    daec:	42002800 	.word	0x42002800

0000daf0 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    daf0:	b510      	push	{r4, lr}
    daf2:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    daf4:	0008      	movs	r0, r1
    daf6:	4b4f      	ldr	r3, [pc, #316]	; (dc34 <tcc_get_config_defaults+0x144>)
    daf8:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    dafa:	2300      	movs	r3, #0
    dafc:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    dafe:	0080      	lsls	r0, r0, #2
    db00:	4a4d      	ldr	r2, [pc, #308]	; (dc38 <tcc_get_config_defaults+0x148>)
    db02:	5882      	ldr	r2, [r0, r2]
    db04:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    db06:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    db08:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    db0a:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    db0c:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    db0e:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    db10:	61e3      	str	r3, [r4, #28]
    db12:	6223      	str	r3, [r4, #32]
    db14:	6263      	str	r3, [r4, #36]	; 0x24
    db16:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    db18:	7523      	strb	r3, [r4, #20]
    db1a:	7563      	strb	r3, [r4, #21]
    db1c:	75a3      	strb	r3, [r4, #22]
    db1e:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    db20:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    db22:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    db24:	7423      	strb	r3, [r4, #16]
    db26:	7463      	strb	r3, [r4, #17]
    db28:	74a3      	strb	r3, [r4, #18]
    db2a:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    db2c:	222c      	movs	r2, #44	; 0x2c
    db2e:	54a3      	strb	r3, [r4, r2]
    db30:	3201      	adds	r2, #1
    db32:	54a3      	strb	r3, [r4, r2]
    db34:	3201      	adds	r2, #1
    db36:	54a3      	strb	r3, [r4, r2]
    db38:	3201      	adds	r2, #1
    db3a:	54a3      	strb	r3, [r4, r2]
    db3c:	3201      	adds	r2, #1
    db3e:	54a3      	strb	r3, [r4, r2]
    db40:	3201      	adds	r2, #1
    db42:	54a3      	strb	r3, [r4, r2]
    db44:	3201      	adds	r2, #1
    db46:	54a3      	strb	r3, [r4, r2]
    db48:	3201      	adds	r2, #1
    db4a:	54a3      	strb	r3, [r4, r2]
    db4c:	3201      	adds	r2, #1
    db4e:	54a3      	strb	r3, [r4, r2]
    db50:	3201      	adds	r2, #1
    db52:	54a3      	strb	r3, [r4, r2]
    db54:	3201      	adds	r2, #1
    db56:	54a3      	strb	r3, [r4, r2]
    db58:	3201      	adds	r2, #1
    db5a:	54a3      	strb	r3, [r4, r2]
    db5c:	3201      	adds	r2, #1
    db5e:	54a3      	strb	r3, [r4, r2]
    db60:	3201      	adds	r2, #1
    db62:	54a3      	strb	r3, [r4, r2]
    db64:	3201      	adds	r2, #1
    db66:	54a3      	strb	r3, [r4, r2]
    db68:	3201      	adds	r2, #1
    db6a:	54a3      	strb	r3, [r4, r2]
    db6c:	3201      	adds	r2, #1
    db6e:	54a3      	strb	r3, [r4, r2]
    db70:	3201      	adds	r2, #1
    db72:	54a3      	strb	r3, [r4, r2]
    db74:	3201      	adds	r2, #1
    db76:	54a3      	strb	r3, [r4, r2]
    db78:	3201      	adds	r2, #1
    db7a:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    db7c:	3201      	adds	r2, #1
    db7e:	54a3      	strb	r3, [r4, r2]
    db80:	3201      	adds	r2, #1
    db82:	54a3      	strb	r3, [r4, r2]
    db84:	3201      	adds	r2, #1
    db86:	54a3      	strb	r3, [r4, r2]
    db88:	3201      	adds	r2, #1
    db8a:	54a3      	strb	r3, [r4, r2]
    db8c:	3201      	adds	r2, #1
    db8e:	54a3      	strb	r3, [r4, r2]
    db90:	3201      	adds	r2, #1
    db92:	54a3      	strb	r3, [r4, r2]
    db94:	3201      	adds	r2, #1
    db96:	54a3      	strb	r3, [r4, r2]
    db98:	3201      	adds	r2, #1
    db9a:	54a3      	strb	r3, [r4, r2]
    db9c:	3201      	adds	r2, #1
    db9e:	54a3      	strb	r3, [r4, r2]
    dba0:	3201      	adds	r2, #1
    dba2:	54a3      	strb	r3, [r4, r2]
    dba4:	3201      	adds	r2, #1
    dba6:	54a3      	strb	r3, [r4, r2]
    dba8:	3201      	adds	r2, #1
    dbaa:	54a3      	strb	r3, [r4, r2]
    dbac:	3201      	adds	r2, #1
    dbae:	54a3      	strb	r3, [r4, r2]
    dbb0:	3201      	adds	r2, #1
    dbb2:	54a3      	strb	r3, [r4, r2]
    dbb4:	3201      	adds	r2, #1
    dbb6:	54a3      	strb	r3, [r4, r2]
    dbb8:	3201      	adds	r2, #1
    dbba:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    dbbc:	3201      	adds	r2, #1
    dbbe:	54a3      	strb	r3, [r4, r2]
    dbc0:	3201      	adds	r2, #1
    dbc2:	54a3      	strb	r3, [r4, r2]
    dbc4:	3201      	adds	r2, #1
    dbc6:	54a3      	strb	r3, [r4, r2]
    dbc8:	3201      	adds	r2, #1
    dbca:	54a3      	strb	r3, [r4, r2]
    dbcc:	3201      	adds	r2, #1
    dbce:	54a3      	strb	r3, [r4, r2]
    dbd0:	3201      	adds	r2, #1
    dbd2:	54a3      	strb	r3, [r4, r2]
    dbd4:	3201      	adds	r2, #1
    dbd6:	54a3      	strb	r3, [r4, r2]
    dbd8:	3201      	adds	r2, #1
    dbda:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    dbdc:	3241      	adds	r2, #65	; 0x41
    dbde:	54a3      	strb	r3, [r4, r2]
    dbe0:	65a3      	str	r3, [r4, #88]	; 0x58
    dbe2:	67a3      	str	r3, [r4, #120]	; 0x78
    dbe4:	3201      	adds	r2, #1
    dbe6:	54a3      	strb	r3, [r4, r2]
    dbe8:	65e3      	str	r3, [r4, #92]	; 0x5c
    dbea:	67e3      	str	r3, [r4, #124]	; 0x7c
    dbec:	3201      	adds	r2, #1
    dbee:	54a3      	strb	r3, [r4, r2]
    dbf0:	6623      	str	r3, [r4, #96]	; 0x60
    dbf2:	3a1a      	subs	r2, #26
    dbf4:	50a3      	str	r3, [r4, r2]
    dbf6:	321b      	adds	r2, #27
    dbf8:	54a3      	strb	r3, [r4, r2]
    dbfa:	6663      	str	r3, [r4, #100]	; 0x64
    dbfc:	3a17      	subs	r2, #23
    dbfe:	50a3      	str	r3, [r4, r2]
    dc00:	3218      	adds	r2, #24
    dc02:	54a3      	strb	r3, [r4, r2]
    dc04:	66a3      	str	r3, [r4, #104]	; 0x68
    dc06:	3a14      	subs	r2, #20
    dc08:	50a3      	str	r3, [r4, r2]
    dc0a:	3215      	adds	r2, #21
    dc0c:	54a3      	strb	r3, [r4, r2]
    dc0e:	66e3      	str	r3, [r4, #108]	; 0x6c
    dc10:	3a11      	subs	r2, #17
    dc12:	50a3      	str	r3, [r4, r2]
    dc14:	3212      	adds	r2, #18
    dc16:	54a3      	strb	r3, [r4, r2]
    dc18:	6723      	str	r3, [r4, #112]	; 0x70
    dc1a:	3a0e      	subs	r2, #14
    dc1c:	50a3      	str	r3, [r4, r2]
    dc1e:	320f      	adds	r2, #15
    dc20:	54a3      	strb	r3, [r4, r2]
    dc22:	6763      	str	r3, [r4, #116]	; 0x74
    dc24:	3a0b      	subs	r2, #11
    dc26:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    dc28:	2101      	movs	r1, #1
    dc2a:	320c      	adds	r2, #12
    dc2c:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    dc2e:	3201      	adds	r2, #1
    dc30:	54a3      	strb	r3, [r4, r2]
}
    dc32:	bd10      	pop	{r4, pc}
    dc34:	0000dabd 	.word	0x0000dabd
    dc38:	00013e50 	.word	0x00013e50

0000dc3c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    dc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc3e:	46de      	mov	lr, fp
    dc40:	4657      	mov	r7, sl
    dc42:	464e      	mov	r6, r9
    dc44:	4645      	mov	r5, r8
    dc46:	b5e0      	push	{r5, r6, r7, lr}
    dc48:	b091      	sub	sp, #68	; 0x44
    dc4a:	9001      	str	r0, [sp, #4]
    dc4c:	000c      	movs	r4, r1
    dc4e:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    dc50:	0008      	movs	r0, r1
    dc52:	4bc3      	ldr	r3, [pc, #780]	; (df60 <tcc_init+0x324>)
    dc54:	4798      	blx	r3
    dc56:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    dc58:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    dc5a:	48c2      	ldr	r0, [pc, #776]	; (df64 <tcc_init+0x328>)
    dc5c:	6a02      	ldr	r2, [r0, #32]
    dc5e:	009e      	lsls	r6, r3, #2
    dc60:	4fc1      	ldr	r7, [pc, #772]	; (df68 <tcc_init+0x32c>)
    dc62:	59f7      	ldr	r7, [r6, r7]
    dc64:	433a      	orrs	r2, r7
    dc66:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    dc68:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    dc6a:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    dc6c:	0792      	lsls	r2, r2, #30
    dc6e:	d506      	bpl.n	dc7e <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    dc70:	b011      	add	sp, #68	; 0x44
    dc72:	bc3c      	pop	{r2, r3, r4, r5}
    dc74:	4690      	mov	r8, r2
    dc76:	4699      	mov	r9, r3
    dc78:	46a2      	mov	sl, r4
    dc7a:	46ab      	mov	fp, r5
    dc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    dc7e:	6822      	ldr	r2, [r4, #0]
    dc80:	2701      	movs	r7, #1
    dc82:	4017      	ands	r7, r2
    dc84:	d1f4      	bne.n	dc70 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    dc86:	48b9      	ldr	r0, [pc, #740]	; (df6c <tcc_init+0x330>)
    dc88:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    dc8a:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    dc8c:	682e      	ldr	r6, [r5, #0]
    dc8e:	42b2      	cmp	r2, r6
    dc90:	d3ee      	bcc.n	dc70 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    dc92:	686e      	ldr	r6, [r5, #4]
    dc94:	42b2      	cmp	r2, r6
    dc96:	d3eb      	bcc.n	dc70 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    dc98:	69e8      	ldr	r0, [r5, #28]
    dc9a:	4282      	cmp	r2, r0
    dc9c:	d200      	bcs.n	dca0 <tcc_init+0x64>
    dc9e:	e1b9      	b.n	e014 <tcc_init+0x3d8>
    dca0:	6a28      	ldr	r0, [r5, #32]
    dca2:	4282      	cmp	r2, r0
    dca4:	d200      	bcs.n	dca8 <tcc_init+0x6c>
    dca6:	e1b7      	b.n	e018 <tcc_init+0x3dc>
    dca8:	6a68      	ldr	r0, [r5, #36]	; 0x24
    dcaa:	4282      	cmp	r2, r0
    dcac:	d200      	bcs.n	dcb0 <tcc_init+0x74>
    dcae:	e1b5      	b.n	e01c <tcc_init+0x3e0>
    dcb0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    dcb2:	4282      	cmp	r2, r0
    dcb4:	d200      	bcs.n	dcb8 <tcc_init+0x7c>
    dcb6:	e1b3      	b.n	e020 <tcc_init+0x3e4>
    dcb8:	2298      	movs	r2, #152	; 0x98
    dcba:	4694      	mov	ip, r2
    dcbc:	44ac      	add	ip, r5
    dcbe:	4662      	mov	r2, ip
    dcc0:	9208      	str	r2, [sp, #32]
    dcc2:	2000      	movs	r0, #0
    dcc4:	e003      	b.n	dcce <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    dcc6:	3001      	adds	r0, #1
    dcc8:	3201      	adds	r2, #1
    dcca:	2808      	cmp	r0, #8
    dccc:	d008      	beq.n	dce0 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    dcce:	7816      	ldrb	r6, [r2, #0]
    dcd0:	2e00      	cmp	r6, #0
    dcd2:	d0f8      	beq.n	dcc6 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    dcd4:	4ea6      	ldr	r6, [pc, #664]	; (df70 <tcc_init+0x334>)
    dcd6:	5c76      	ldrb	r6, [r6, r1]
    dcd8:	4286      	cmp	r6, r0
    dcda:	dcf4      	bgt.n	dcc6 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    dcdc:	2017      	movs	r0, #23
    dcde:	e7c7      	b.n	dc70 <tcc_init+0x34>
    dce0:	2200      	movs	r2, #0
    dce2:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    dce4:	2080      	movs	r0, #128	; 0x80
    dce6:	0440      	lsls	r0, r0, #17
    dce8:	4684      	mov	ip, r0
    dcea:	e002      	b.n	dcf2 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    dcec:	3201      	adds	r2, #1
    dcee:	2a04      	cmp	r2, #4
    dcf0:	d00e      	beq.n	dd10 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    dcf2:	18a8      	adds	r0, r5, r2
    dcf4:	7c00      	ldrb	r0, [r0, #16]
    dcf6:	2801      	cmp	r0, #1
    dcf8:	d1f8      	bne.n	dcec <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    dcfa:	489e      	ldr	r0, [pc, #632]	; (df74 <tcc_init+0x338>)
    dcfc:	5c40      	ldrb	r0, [r0, r1]
    dcfe:	4290      	cmp	r0, r2
    dd00:	da00      	bge.n	dd04 <tcc_init+0xc8>
    dd02:	e18f      	b.n	e024 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    dd04:	4660      	mov	r0, ip
    dd06:	4090      	lsls	r0, r2
    dd08:	9e02      	ldr	r6, [sp, #8]
    dd0a:	4306      	orrs	r6, r0
    dd0c:	9602      	str	r6, [sp, #8]
    dd0e:	e7ed      	b.n	dcec <tcc_init+0xb0>
	if (config->run_in_standby) {
    dd10:	329d      	adds	r2, #157	; 0x9d
    dd12:	5caa      	ldrb	r2, [r5, r2]
    dd14:	2a00      	cmp	r2, #0
    dd16:	d004      	beq.n	dd22 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    dd18:	2280      	movs	r2, #128	; 0x80
    dd1a:	0112      	lsls	r2, r2, #4
    dd1c:	9902      	ldr	r1, [sp, #8]
    dd1e:	4311      	orrs	r1, r2
    dd20:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    dd22:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    dd24:	1e51      	subs	r1, r2, #1
    dd26:	418a      	sbcs	r2, r1
    dd28:	0092      	lsls	r2, r2, #2
    dd2a:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    dd2c:	7a6a      	ldrb	r2, [r5, #9]
    dd2e:	2a01      	cmp	r2, #1
    dd30:	d022      	beq.n	dd78 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    dd32:	4a90      	ldr	r2, [pc, #576]	; (df74 <tcc_init+0x338>)
    dd34:	5cd2      	ldrb	r2, [r2, r3]
    dd36:	0011      	movs	r1, r2
    dd38:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    dd3a:	2235      	movs	r2, #53	; 0x35
    dd3c:	5caa      	ldrb	r2, [r5, r2]
    dd3e:	428a      	cmp	r2, r1
    dd40:	d300      	bcc.n	dd44 <tcc_init+0x108>
    dd42:	e179      	b.n	e038 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    dd44:	212c      	movs	r1, #44	; 0x2c
    dd46:	5c69      	ldrb	r1, [r5, r1]
    dd48:	290f      	cmp	r1, #15
    dd4a:	d900      	bls.n	dd4e <tcc_init+0x112>
    dd4c:	e174      	b.n	e038 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    dd4e:	7b28      	ldrb	r0, [r5, #12]
    dd50:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    dd52:	7ae8      	ldrb	r0, [r5, #11]
    dd54:	900b      	str	r0, [sp, #44]	; 0x2c
    dd56:	202d      	movs	r0, #45	; 0x2d
    dd58:	4682      	mov	sl, r0
    dd5a:	44aa      	add	sl, r5
    dd5c:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    dd5e:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    dd60:	ae0e      	add	r6, sp, #56	; 0x38
    dd62:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    dd64:	26c0      	movs	r6, #192	; 0xc0
    dd66:	0136      	lsls	r6, r6, #4
    dd68:	46b1      	mov	r9, r6
    dd6a:	4684      	mov	ip, r0
    dd6c:	46a0      	mov	r8, r4
    dd6e:	0028      	movs	r0, r5
    dd70:	4655      	mov	r5, sl
    dd72:	9309      	str	r3, [sp, #36]	; 0x24
    dd74:	4682      	mov	sl, r0
    dd76:	e035      	b.n	dde4 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    dd78:	9906      	ldr	r1, [sp, #24]
    dd7a:	4311      	orrs	r1, r2
    dd7c:	9106      	str	r1, [sp, #24]
    dd7e:	e7d8      	b.n	dd32 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    dd80:	0292      	lsls	r2, r2, #10
    dd82:	464f      	mov	r7, r9
    dd84:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    dd86:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    dd88:	7919      	ldrb	r1, [r3, #4]
    dd8a:	468b      	mov	fp, r1
    dd8c:	2103      	movs	r1, #3
    dd8e:	465f      	mov	r7, fp
    dd90:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    dd92:	430a      	orrs	r2, r1
    dd94:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    dd96:	795a      	ldrb	r2, [r3, #5]
    dd98:	0152      	lsls	r2, r2, #5
    dd9a:	2160      	movs	r1, #96	; 0x60
    dd9c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    dd9e:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    dda0:	7999      	ldrb	r1, [r3, #6]
    dda2:	0209      	lsls	r1, r1, #8
    dda4:	26c0      	movs	r6, #192	; 0xc0
    dda6:	00b6      	lsls	r6, r6, #2
    dda8:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    ddaa:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    ddac:	79da      	ldrb	r2, [r3, #7]
    ddae:	0312      	lsls	r2, r2, #12
    ddb0:	21e0      	movs	r1, #224	; 0xe0
    ddb2:	01c9      	lsls	r1, r1, #7
    ddb4:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    ddb6:	4316      	orrs	r6, r2
    ddb8:	4334      	orrs	r4, r6
    ddba:	9a03      	ldr	r2, [sp, #12]
    ddbc:	4314      	orrs	r4, r2
    ddbe:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    ddc0:	4662      	mov	r2, ip
    ddc2:	9907      	ldr	r1, [sp, #28]
    ddc4:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    ddc6:	2a04      	cmp	r2, #4
    ddc8:	d02a      	beq.n	de20 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    ddca:	7c9a      	ldrb	r2, [r3, #18]
    ddcc:	9905      	ldr	r1, [sp, #20]
    ddce:	4291      	cmp	r1, r2
    ddd0:	d800      	bhi.n	ddd4 <tcc_init+0x198>
    ddd2:	e131      	b.n	e038 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    ddd4:	7a59      	ldrb	r1, [r3, #9]
    ddd6:	350a      	adds	r5, #10
    ddd8:	2304      	movs	r3, #4
    ddda:	469b      	mov	fp, r3
    dddc:	44dc      	add	ip, fp
    ddde:	290f      	cmp	r1, #15
    dde0:	d900      	bls.n	dde4 <tcc_init+0x1a8>
    dde2:	e129      	b.n	e038 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    dde4:	0609      	lsls	r1, r1, #24
    dde6:	23f0      	movs	r3, #240	; 0xf0
    dde8:	051b      	lsls	r3, r3, #20
    ddea:	4019      	ands	r1, r3
    ddec:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    ddee:	782e      	ldrb	r6, [r5, #0]
    ddf0:	0436      	lsls	r6, r6, #16
    ddf2:	20ff      	movs	r0, #255	; 0xff
    ddf4:	0400      	lsls	r0, r0, #16
    ddf6:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    ddf8:	7868      	ldrb	r0, [r5, #1]
    ddfa:	2480      	movs	r4, #128	; 0x80
    ddfc:	2800      	cmp	r0, #0
    ddfe:	d100      	bne.n	de02 <tcc_init+0x1c6>
    de00:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    de02:	7898      	ldrb	r0, [r3, #2]
    de04:	2708      	movs	r7, #8
    de06:	9703      	str	r7, [sp, #12]
    de08:	2800      	cmp	r0, #0
    de0a:	d101      	bne.n	de10 <tcc_init+0x1d4>
    de0c:	9804      	ldr	r0, [sp, #16]
    de0e:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    de10:	78d8      	ldrb	r0, [r3, #3]
    de12:	4683      	mov	fp, r0
    de14:	2010      	movs	r0, #16
    de16:	465f      	mov	r7, fp
    de18:	2f00      	cmp	r7, #0
    de1a:	d1b1      	bne.n	dd80 <tcc_init+0x144>
    de1c:	9804      	ldr	r0, [sp, #16]
    de1e:	e7af      	b.n	dd80 <tcc_init+0x144>
    de20:	4644      	mov	r4, r8
    de22:	4655      	mov	r5, sl
    de24:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    de26:	4a52      	ldr	r2, [pc, #328]	; (df70 <tcc_init+0x334>)
    de28:	5cd2      	ldrb	r2, [r2, r3]
    de2a:	4691      	mov	r9, r2
    de2c:	4651      	mov	r1, sl
    de2e:	3150      	adds	r1, #80	; 0x50
    de30:	4650      	mov	r0, sl
    de32:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    de34:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    de36:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    de38:	2601      	movs	r6, #1
    de3a:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    de3c:	2602      	movs	r6, #2
    de3e:	36ff      	adds	r6, #255	; 0xff
    de40:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    de42:	2680      	movs	r6, #128	; 0x80
    de44:	0276      	lsls	r6, r6, #9
    de46:	46b0      	mov	r8, r6
    de48:	46a4      	mov	ip, r4
    de4a:	001c      	movs	r4, r3
    de4c:	464b      	mov	r3, r9
    de4e:	e00f      	b.n	de70 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    de50:	7806      	ldrb	r6, [r0, #0]
    de52:	2e00      	cmp	r6, #0
    de54:	d007      	beq.n	de66 <tcc_init+0x22a>
			if (i >= ow_num) {
    de56:	4293      	cmp	r3, r2
    de58:	d800      	bhi.n	de5c <tcc_init+0x220>
    de5a:	e0e7      	b.n	e02c <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    de5c:	2e02      	cmp	r6, #2
    de5e:	d014      	beq.n	de8a <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    de60:	4656      	mov	r6, sl
    de62:	4096      	lsls	r6, r2
    de64:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    de66:	3201      	adds	r2, #1
    de68:	3101      	adds	r1, #1
    de6a:	3002      	adds	r0, #2
    de6c:	2a08      	cmp	r2, #8
    de6e:	d010      	beq.n	de92 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    de70:	780e      	ldrb	r6, [r1, #0]
    de72:	2e00      	cmp	r6, #0
    de74:	d0ec      	beq.n	de50 <tcc_init+0x214>
			if (i >= ow_num) {
    de76:	4293      	cmp	r3, r2
    de78:	d800      	bhi.n	de7c <tcc_init+0x240>
    de7a:	e0d5      	b.n	e028 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    de7c:	4646      	mov	r6, r8
    de7e:	4096      	lsls	r6, r2
    de80:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    de82:	7806      	ldrb	r6, [r0, #0]
    de84:	2e00      	cmp	r6, #0
    de86:	d1e9      	bne.n	de5c <tcc_init+0x220>
    de88:	e7ed      	b.n	de66 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    de8a:	465e      	mov	r6, fp
    de8c:	4096      	lsls	r6, r2
    de8e:	4337      	orrs	r7, r6
    de90:	e7e9      	b.n	de66 <tcc_init+0x22a>
    de92:	4699      	mov	r9, r3
    de94:	0023      	movs	r3, r4
    de96:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    de98:	7e6a      	ldrb	r2, [r5, #25]
    de9a:	0112      	lsls	r2, r2, #4
    de9c:	2130      	movs	r1, #48	; 0x30
    de9e:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    dea0:	7e28      	ldrb	r0, [r5, #24]
    dea2:	2207      	movs	r2, #7
    dea4:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    dea6:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    dea8:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    deaa:	2080      	movs	r0, #128	; 0x80
    deac:	0240      	lsls	r0, r0, #9
    deae:	000e      	movs	r6, r1
    deb0:	e002      	b.n	deb8 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    deb2:	3201      	adds	r2, #1
    deb4:	2a04      	cmp	r2, #4
    deb6:	d00b      	beq.n	ded0 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    deb8:	18a9      	adds	r1, r5, r2
    deba:	7d09      	ldrb	r1, [r1, #20]
    debc:	2900      	cmp	r1, #0
    debe:	d0f8      	beq.n	deb2 <tcc_init+0x276>
			if (n >= cc_num) {
    dec0:	9905      	ldr	r1, [sp, #20]
    dec2:	4291      	cmp	r1, r2
    dec4:	dc00      	bgt.n	dec8 <tcc_init+0x28c>
    dec6:	e0b3      	b.n	e030 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    dec8:	0001      	movs	r1, r0
    deca:	4091      	lsls	r1, r2
    decc:	430e      	orrs	r6, r1
    dece:	e7f0      	b.n	deb2 <tcc_init+0x276>
    ded0:	46b2      	mov	sl, r6
    ded2:	9801      	ldr	r0, [sp, #4]
    ded4:	0002      	movs	r2, r0
    ded6:	3204      	adds	r2, #4
    ded8:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    deda:	2100      	movs	r1, #0
    dedc:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    dede:	4282      	cmp	r2, r0
    dee0:	d1fc      	bne.n	dedc <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    dee2:	2200      	movs	r2, #0
    dee4:	9801      	ldr	r0, [sp, #4]
    dee6:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    dee8:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    deea:	0099      	lsls	r1, r3, #2
    deec:	4a22      	ldr	r2, [pc, #136]	; (df78 <tcc_init+0x33c>)
    deee:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    def0:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    def2:	22a0      	movs	r2, #160	; 0xa0
    def4:	5ca9      	ldrb	r1, [r5, r2]
    def6:	3a64      	subs	r2, #100	; 0x64
    def8:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    defa:	a90d      	add	r1, sp, #52	; 0x34
    defc:	7aaa      	ldrb	r2, [r5, #10]
    defe:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    df00:	4a1e      	ldr	r2, [pc, #120]	; (df7c <tcc_init+0x340>)
    df02:	5cd6      	ldrb	r6, [r2, r3]
    df04:	0030      	movs	r0, r6
    df06:	4b1e      	ldr	r3, [pc, #120]	; (df80 <tcc_init+0x344>)
    df08:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    df0a:	0030      	movs	r0, r6
    df0c:	4b1d      	ldr	r3, [pc, #116]	; (df84 <tcc_init+0x348>)
    df0e:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    df10:	464b      	mov	r3, r9
    df12:	2b00      	cmp	r3, #0
    df14:	dd3c      	ble.n	df90 <tcc_init+0x354>
    df16:	002e      	movs	r6, r5
    df18:	3658      	adds	r6, #88	; 0x58
    df1a:	3398      	adds	r3, #152	; 0x98
    df1c:	4698      	mov	r8, r3
    df1e:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    df20:	2301      	movs	r3, #1
    df22:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    df24:	46ab      	mov	fp, r5
    df26:	4645      	mov	r5, r8
    df28:	46a0      	mov	r8, r4
    df2a:	9c08      	ldr	r4, [sp, #32]
    df2c:	e003      	b.n	df36 <tcc_init+0x2fa>
    df2e:	3401      	adds	r4, #1
    df30:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    df32:	42ac      	cmp	r4, r5
    df34:	d02a      	beq.n	df8c <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    df36:	7823      	ldrb	r3, [r4, #0]
    df38:	2b00      	cmp	r3, #0
    df3a:	d0f8      	beq.n	df2e <tcc_init+0x2f2>
    df3c:	ab0c      	add	r3, sp, #48	; 0x30
    df3e:	464a      	mov	r2, r9
    df40:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    df42:	2300      	movs	r3, #0
    df44:	aa0c      	add	r2, sp, #48	; 0x30
    df46:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    df48:	0013      	movs	r3, r2
    df4a:	2220      	movs	r2, #32
    df4c:	18b2      	adds	r2, r6, r2
    df4e:	7812      	ldrb	r2, [r2, #0]
    df50:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    df52:	464a      	mov	r2, r9
    df54:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    df56:	7830      	ldrb	r0, [r6, #0]
    df58:	0019      	movs	r1, r3
    df5a:	4b0b      	ldr	r3, [pc, #44]	; (df88 <tcc_init+0x34c>)
    df5c:	4798      	blx	r3
    df5e:	e7e6      	b.n	df2e <tcc_init+0x2f2>
    df60:	0000dabd 	.word	0x0000dabd
    df64:	40000400 	.word	0x40000400
    df68:	00013e3c 	.word	0x00013e3c
    df6c:	00013e50 	.word	0x00013e50
    df70:	00013e5c 	.word	0x00013e5c
    df74:	00013e48 	.word	0x00013e48
    df78:	200005f0 	.word	0x200005f0
    df7c:	00013e4c 	.word	0x00013e4c
    df80:	0000d96d 	.word	0x0000d96d
    df84:	0000d8e1 	.word	0x0000d8e1
    df88:	0000da65 	.word	0x0000da65
    df8c:	4644      	mov	r4, r8
    df8e:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    df90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    df92:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    df94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    df96:	0212      	lsls	r2, r2, #8
    df98:	4313      	orrs	r3, r2
    df9a:	9a02      	ldr	r2, [sp, #8]
    df9c:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    df9e:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    dfa0:	2204      	movs	r2, #4
    dfa2:	68a3      	ldr	r3, [r4, #8]
    dfa4:	421a      	tst	r2, r3
    dfa6:	d1fc      	bne.n	dfa2 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    dfa8:	23ff      	movs	r3, #255	; 0xff
    dfaa:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    dfac:	2204      	movs	r2, #4
    dfae:	68a3      	ldr	r3, [r4, #8]
    dfb0:	421a      	tst	r2, r3
    dfb2:	d1fc      	bne.n	dfae <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    dfb4:	466b      	mov	r3, sp
    dfb6:	7e1b      	ldrb	r3, [r3, #24]
    dfb8:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    dfba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dfbc:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    dfbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dfc0:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    dfc2:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    dfc4:	4a1d      	ldr	r2, [pc, #116]	; (e03c <tcc_init+0x400>)
    dfc6:	68a3      	ldr	r3, [r4, #8]
    dfc8:	4213      	tst	r3, r2
    dfca:	d1fc      	bne.n	dfc6 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    dfcc:	4653      	mov	r3, sl
    dfce:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    dfd0:	2210      	movs	r2, #16
    dfd2:	68a3      	ldr	r3, [r4, #8]
    dfd4:	421a      	tst	r2, r3
    dfd6:	d1fc      	bne.n	dfd2 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    dfd8:	682b      	ldr	r3, [r5, #0]
    dfda:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    dfdc:	4a18      	ldr	r2, [pc, #96]	; (e040 <tcc_init+0x404>)
    dfde:	68a3      	ldr	r3, [r4, #8]
    dfe0:	4213      	tst	r3, r2
    dfe2:	d1fc      	bne.n	dfde <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    dfe4:	686b      	ldr	r3, [r5, #4]
    dfe6:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    dfe8:	9805      	ldr	r0, [sp, #20]
    dfea:	2800      	cmp	r0, #0
    dfec:	dd22      	ble.n	e034 <tcc_init+0x3f8>
    dfee:	351c      	adds	r5, #28
    dff0:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    dff2:	4e14      	ldr	r6, [pc, #80]	; (e044 <tcc_init+0x408>)
    dff4:	0032      	movs	r2, r6
    dff6:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    dff8:	68a3      	ldr	r3, [r4, #8]
    dffa:	421a      	tst	r2, r3
    dffc:	d1fc      	bne.n	dff8 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    dffe:	cd04      	ldmia	r5!, {r2}
    e000:	000b      	movs	r3, r1
    e002:	3310      	adds	r3, #16
    e004:	009b      	lsls	r3, r3, #2
    e006:	18e3      	adds	r3, r4, r3
    e008:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    e00a:	3101      	adds	r1, #1
    e00c:	4288      	cmp	r0, r1
    e00e:	dcf1      	bgt.n	dff4 <tcc_init+0x3b8>
	return STATUS_OK;
    e010:	2000      	movs	r0, #0
    e012:	e62d      	b.n	dc70 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    e014:	2017      	movs	r0, #23
    e016:	e62b      	b.n	dc70 <tcc_init+0x34>
    e018:	2017      	movs	r0, #23
    e01a:	e629      	b.n	dc70 <tcc_init+0x34>
    e01c:	2017      	movs	r0, #23
    e01e:	e627      	b.n	dc70 <tcc_init+0x34>
    e020:	2017      	movs	r0, #23
    e022:	e625      	b.n	dc70 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    e024:	2017      	movs	r0, #23
    e026:	e623      	b.n	dc70 <tcc_init+0x34>
			if (i >= ow_num) {
    e028:	2017      	movs	r0, #23
    e02a:	e621      	b.n	dc70 <tcc_init+0x34>
			if (i >= ow_num) {
    e02c:	2017      	movs	r0, #23
    e02e:	e61f      	b.n	dc70 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    e030:	2017      	movs	r0, #23
    e032:	e61d      	b.n	dc70 <tcc_init+0x34>
	return STATUS_OK;
    e034:	2000      	movs	r0, #0
    e036:	e61b      	b.n	dc70 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    e038:	2017      	movs	r0, #23
    e03a:	e619      	b.n	dc70 <tcc_init+0x34>
    e03c:	00020040 	.word	0x00020040
    e040:	00040080 	.word	0x00040080
    e044:	00080100 	.word	0x00080100

0000e048 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    e048:	0092      	lsls	r2, r2, #2
    e04a:	1883      	adds	r3, r0, r2
    e04c:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    e04e:	4b03      	ldr	r3, [pc, #12]	; (e05c <tcc_register_callback+0x14>)
    e050:	58d3      	ldr	r3, [r2, r3]
    e052:	6b42      	ldr	r2, [r0, #52]	; 0x34
    e054:	4313      	orrs	r3, r2
    e056:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    e058:	2000      	movs	r0, #0
    e05a:	4770      	bx	lr
    e05c:	00013e60 	.word	0x00013e60

0000e060 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    e060:	b570      	push	{r4, r5, r6, lr}
    e062:	0004      	movs	r4, r0
    e064:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    e066:	6800      	ldr	r0, [r0, #0]
    e068:	4b09      	ldr	r3, [pc, #36]	; (e090 <tcc_enable_callback+0x30>)
    e06a:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    e06c:	4b09      	ldr	r3, [pc, #36]	; (e094 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    e06e:	5c1b      	ldrb	r3, [r3, r0]
    e070:	221f      	movs	r2, #31
    e072:	401a      	ands	r2, r3
    e074:	2301      	movs	r3, #1
    e076:	4093      	lsls	r3, r2
    e078:	4a07      	ldr	r2, [pc, #28]	; (e098 <tcc_enable_callback+0x38>)
    e07a:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    e07c:	00ad      	lsls	r5, r5, #2
    e07e:	4b07      	ldr	r3, [pc, #28]	; (e09c <tcc_enable_callback+0x3c>)
    e080:	58ea      	ldr	r2, [r5, r3]
    e082:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e084:	4313      	orrs	r3, r2
    e086:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    e088:	6823      	ldr	r3, [r4, #0]
    e08a:	629a      	str	r2, [r3, #40]	; 0x28
}
    e08c:	bd70      	pop	{r4, r5, r6, pc}
    e08e:	46c0      	nop			; (mov r8, r8)
    e090:	0000dabd 	.word	0x0000dabd
    e094:	00013e90 	.word	0x00013e90
    e098:	e000e100 	.word	0xe000e100
    e09c:	00013e60 	.word	0x00013e60

0000e0a0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    e0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0a2:	46c6      	mov	lr, r8
    e0a4:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    e0a6:	0080      	lsls	r0, r0, #2
    e0a8:	4b0e      	ldr	r3, [pc, #56]	; (e0e4 <_tcc_interrupt_handler+0x44>)
    e0aa:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    e0ac:	683b      	ldr	r3, [r7, #0]
    e0ae:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    e0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e0b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e0b4:	4013      	ands	r3, r2
    e0b6:	401e      	ands	r6, r3
    e0b8:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    e0ba:	4b0b      	ldr	r3, [pc, #44]	; (e0e8 <_tcc_interrupt_handler+0x48>)
    e0bc:	4698      	mov	r8, r3
    e0be:	e002      	b.n	e0c6 <_tcc_interrupt_handler+0x26>
    e0c0:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    e0c2:	2c30      	cmp	r4, #48	; 0x30
    e0c4:	d00a      	beq.n	e0dc <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    e0c6:	4643      	mov	r3, r8
    e0c8:	58e5      	ldr	r5, [r4, r3]
    e0ca:	4235      	tst	r5, r6
    e0cc:	d0f8      	beq.n	e0c0 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    e0ce:	193b      	adds	r3, r7, r4
    e0d0:	685b      	ldr	r3, [r3, #4]
    e0d2:	0038      	movs	r0, r7
    e0d4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    e0d6:	683b      	ldr	r3, [r7, #0]
    e0d8:	62dd      	str	r5, [r3, #44]	; 0x2c
    e0da:	e7f1      	b.n	e0c0 <_tcc_interrupt_handler+0x20>
		}
	}
}
    e0dc:	bc04      	pop	{r2}
    e0de:	4690      	mov	r8, r2
    e0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0e2:	46c0      	nop			; (mov r8, r8)
    e0e4:	200005f0 	.word	0x200005f0
    e0e8:	00013e60 	.word	0x00013e60

0000e0ec <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    e0ec:	b510      	push	{r4, lr}
    e0ee:	2000      	movs	r0, #0
    e0f0:	4b01      	ldr	r3, [pc, #4]	; (e0f8 <TCC0_Handler+0xc>)
    e0f2:	4798      	blx	r3
    e0f4:	bd10      	pop	{r4, pc}
    e0f6:	46c0      	nop			; (mov r8, r8)
    e0f8:	0000e0a1 	.word	0x0000e0a1

0000e0fc <TCC1_Handler>:
    e0fc:	b510      	push	{r4, lr}
    e0fe:	2001      	movs	r0, #1
    e100:	4b01      	ldr	r3, [pc, #4]	; (e108 <TCC1_Handler+0xc>)
    e102:	4798      	blx	r3
    e104:	bd10      	pop	{r4, pc}
    e106:	46c0      	nop			; (mov r8, r8)
    e108:	0000e0a1 	.word	0x0000e0a1

0000e10c <TCC2_Handler>:
    e10c:	b510      	push	{r4, lr}
    e10e:	2002      	movs	r0, #2
    e110:	4b01      	ldr	r3, [pc, #4]	; (e118 <TCC2_Handler+0xc>)
    e112:	4798      	blx	r3
    e114:	bd10      	pop	{r4, pc}
    e116:	46c0      	nop			; (mov r8, r8)
    e118:	0000e0a1 	.word	0x0000e0a1

0000e11c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    e11c:	e7fe      	b.n	e11c <Dummy_Handler>
	...

0000e120 <Reset_Handler>:
{
    e120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    e122:	4a2a      	ldr	r2, [pc, #168]	; (e1cc <Reset_Handler+0xac>)
    e124:	4b2a      	ldr	r3, [pc, #168]	; (e1d0 <Reset_Handler+0xb0>)
    e126:	429a      	cmp	r2, r3
    e128:	d011      	beq.n	e14e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    e12a:	001a      	movs	r2, r3
    e12c:	4b29      	ldr	r3, [pc, #164]	; (e1d4 <Reset_Handler+0xb4>)
    e12e:	429a      	cmp	r2, r3
    e130:	d20d      	bcs.n	e14e <Reset_Handler+0x2e>
    e132:	4a29      	ldr	r2, [pc, #164]	; (e1d8 <Reset_Handler+0xb8>)
    e134:	3303      	adds	r3, #3
    e136:	1a9b      	subs	r3, r3, r2
    e138:	089b      	lsrs	r3, r3, #2
    e13a:	3301      	adds	r3, #1
    e13c:	009b      	lsls	r3, r3, #2
    e13e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    e140:	4823      	ldr	r0, [pc, #140]	; (e1d0 <Reset_Handler+0xb0>)
    e142:	4922      	ldr	r1, [pc, #136]	; (e1cc <Reset_Handler+0xac>)
    e144:	588c      	ldr	r4, [r1, r2]
    e146:	5084      	str	r4, [r0, r2]
    e148:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    e14a:	429a      	cmp	r2, r3
    e14c:	d1fa      	bne.n	e144 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    e14e:	4a23      	ldr	r2, [pc, #140]	; (e1dc <Reset_Handler+0xbc>)
    e150:	4b23      	ldr	r3, [pc, #140]	; (e1e0 <Reset_Handler+0xc0>)
    e152:	429a      	cmp	r2, r3
    e154:	d20a      	bcs.n	e16c <Reset_Handler+0x4c>
    e156:	43d3      	mvns	r3, r2
    e158:	4921      	ldr	r1, [pc, #132]	; (e1e0 <Reset_Handler+0xc0>)
    e15a:	185b      	adds	r3, r3, r1
    e15c:	2103      	movs	r1, #3
    e15e:	438b      	bics	r3, r1
    e160:	3304      	adds	r3, #4
    e162:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    e164:	2100      	movs	r1, #0
    e166:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    e168:	4293      	cmp	r3, r2
    e16a:	d1fc      	bne.n	e166 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    e16c:	4a1d      	ldr	r2, [pc, #116]	; (e1e4 <Reset_Handler+0xc4>)
    e16e:	21ff      	movs	r1, #255	; 0xff
    e170:	4b1d      	ldr	r3, [pc, #116]	; (e1e8 <Reset_Handler+0xc8>)
    e172:	438b      	bics	r3, r1
    e174:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    e176:	39fd      	subs	r1, #253	; 0xfd
    e178:	2390      	movs	r3, #144	; 0x90
    e17a:	005b      	lsls	r3, r3, #1
    e17c:	4a1b      	ldr	r2, [pc, #108]	; (e1ec <Reset_Handler+0xcc>)
    e17e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    e180:	4a1b      	ldr	r2, [pc, #108]	; (e1f0 <Reset_Handler+0xd0>)
    e182:	78d3      	ldrb	r3, [r2, #3]
    e184:	2503      	movs	r5, #3
    e186:	43ab      	bics	r3, r5
    e188:	2402      	movs	r4, #2
    e18a:	4323      	orrs	r3, r4
    e18c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    e18e:	78d3      	ldrb	r3, [r2, #3]
    e190:	270c      	movs	r7, #12
    e192:	43bb      	bics	r3, r7
    e194:	2608      	movs	r6, #8
    e196:	4333      	orrs	r3, r6
    e198:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    e19a:	4b16      	ldr	r3, [pc, #88]	; (e1f4 <Reset_Handler+0xd4>)
    e19c:	7b98      	ldrb	r0, [r3, #14]
    e19e:	2230      	movs	r2, #48	; 0x30
    e1a0:	4390      	bics	r0, r2
    e1a2:	2220      	movs	r2, #32
    e1a4:	4310      	orrs	r0, r2
    e1a6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    e1a8:	7b99      	ldrb	r1, [r3, #14]
    e1aa:	43b9      	bics	r1, r7
    e1ac:	4331      	orrs	r1, r6
    e1ae:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    e1b0:	7b9a      	ldrb	r2, [r3, #14]
    e1b2:	43aa      	bics	r2, r5
    e1b4:	4322      	orrs	r2, r4
    e1b6:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    e1b8:	4a0f      	ldr	r2, [pc, #60]	; (e1f8 <Reset_Handler+0xd8>)
    e1ba:	6853      	ldr	r3, [r2, #4]
    e1bc:	2180      	movs	r1, #128	; 0x80
    e1be:	430b      	orrs	r3, r1
    e1c0:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    e1c2:	4b0e      	ldr	r3, [pc, #56]	; (e1fc <Reset_Handler+0xdc>)
    e1c4:	4798      	blx	r3
        main();
    e1c6:	4b0e      	ldr	r3, [pc, #56]	; (e200 <Reset_Handler+0xe0>)
    e1c8:	4798      	blx	r3
    e1ca:	e7fe      	b.n	e1ca <Reset_Handler+0xaa>
    e1cc:	00014a94 	.word	0x00014a94
    e1d0:	20000000 	.word	0x20000000
    e1d4:	200001ec 	.word	0x200001ec
    e1d8:	20000004 	.word	0x20000004
    e1dc:	200001ec 	.word	0x200001ec
    e1e0:	20000fa0 	.word	0x20000fa0
    e1e4:	e000ed00 	.word	0xe000ed00
    e1e8:	00008000 	.word	0x00008000
    e1ec:	41007000 	.word	0x41007000
    e1f0:	41005000 	.word	0x41005000
    e1f4:	41004800 	.word	0x41004800
    e1f8:	41004000 	.word	0x41004000
    e1fc:	00011661 	.word	0x00011661
    e200:	0000fd49 	.word	0x0000fd49

0000e204 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    e204:	b5f0      	push	{r4, r5, r6, r7, lr}
    e206:	46c6      	mov	lr, r8
    e208:	b500      	push	{lr}
    e20a:	000c      	movs	r4, r1
    e20c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    e20e:	2800      	cmp	r0, #0
    e210:	d10f      	bne.n	e232 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    e212:	2a00      	cmp	r2, #0
    e214:	dd11      	ble.n	e23a <_read+0x36>
    e216:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    e218:	4e09      	ldr	r6, [pc, #36]	; (e240 <_read+0x3c>)
    e21a:	4d0a      	ldr	r5, [pc, #40]	; (e244 <_read+0x40>)
    e21c:	6830      	ldr	r0, [r6, #0]
    e21e:	0021      	movs	r1, r4
    e220:	682b      	ldr	r3, [r5, #0]
    e222:	4798      	blx	r3
		ptr++;
    e224:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    e226:	42bc      	cmp	r4, r7
    e228:	d1f8      	bne.n	e21c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    e22a:	4640      	mov	r0, r8
    e22c:	bc04      	pop	{r2}
    e22e:	4690      	mov	r8, r2
    e230:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    e232:	2301      	movs	r3, #1
    e234:	425b      	negs	r3, r3
    e236:	4698      	mov	r8, r3
    e238:	e7f7      	b.n	e22a <_read+0x26>
	for (; len > 0; --len) {
    e23a:	4680      	mov	r8, r0
    e23c:	e7f5      	b.n	e22a <_read+0x26>
    e23e:	46c0      	nop			; (mov r8, r8)
    e240:	20000604 	.word	0x20000604
    e244:	200005fc 	.word	0x200005fc

0000e248 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    e248:	b5f0      	push	{r4, r5, r6, r7, lr}
    e24a:	46c6      	mov	lr, r8
    e24c:	b500      	push	{lr}
    e24e:	000e      	movs	r6, r1
    e250:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    e252:	3801      	subs	r0, #1
    e254:	2802      	cmp	r0, #2
    e256:	d810      	bhi.n	e27a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    e258:	2a00      	cmp	r2, #0
    e25a:	d011      	beq.n	e280 <_write+0x38>
    e25c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    e25e:	4b0c      	ldr	r3, [pc, #48]	; (e290 <_write+0x48>)
    e260:	4698      	mov	r8, r3
    e262:	4f0c      	ldr	r7, [pc, #48]	; (e294 <_write+0x4c>)
    e264:	4643      	mov	r3, r8
    e266:	6818      	ldr	r0, [r3, #0]
    e268:	5d31      	ldrb	r1, [r6, r4]
    e26a:	683b      	ldr	r3, [r7, #0]
    e26c:	4798      	blx	r3
    e26e:	2800      	cmp	r0, #0
    e270:	db08      	blt.n	e284 <_write+0x3c>
			return -1;
		}
		++nChars;
    e272:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    e274:	42a5      	cmp	r5, r4
    e276:	d1f5      	bne.n	e264 <_write+0x1c>
    e278:	e006      	b.n	e288 <_write+0x40>
		return -1;
    e27a:	2401      	movs	r4, #1
    e27c:	4264      	negs	r4, r4
    e27e:	e003      	b.n	e288 <_write+0x40>
	for (; len != 0; --len) {
    e280:	0014      	movs	r4, r2
    e282:	e001      	b.n	e288 <_write+0x40>
			return -1;
    e284:	2401      	movs	r4, #1
    e286:	4264      	negs	r4, r4
	}
	return nChars;
}
    e288:	0020      	movs	r0, r4
    e28a:	bc04      	pop	{r2}
    e28c:	4690      	mov	r8, r2
    e28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e290:	20000604 	.word	0x20000604
    e294:	20000600 	.word	0x20000600

0000e298 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    e298:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    e29a:	4a06      	ldr	r2, [pc, #24]	; (e2b4 <_sbrk+0x1c>)
    e29c:	6812      	ldr	r2, [r2, #0]
    e29e:	2a00      	cmp	r2, #0
    e2a0:	d004      	beq.n	e2ac <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    e2a2:	4a04      	ldr	r2, [pc, #16]	; (e2b4 <_sbrk+0x1c>)
    e2a4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    e2a6:	18c3      	adds	r3, r0, r3
    e2a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    e2aa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    e2ac:	4902      	ldr	r1, [pc, #8]	; (e2b8 <_sbrk+0x20>)
    e2ae:	4a01      	ldr	r2, [pc, #4]	; (e2b4 <_sbrk+0x1c>)
    e2b0:	6011      	str	r1, [r2, #0]
    e2b2:	e7f6      	b.n	e2a2 <_sbrk+0xa>
    e2b4:	20000264 	.word	0x20000264
    e2b8:	20002fa0 	.word	0x20002fa0

0000e2bc <_close>:
}

extern int _close(int file)
{
	return -1;
}
    e2bc:	2001      	movs	r0, #1
    e2be:	4240      	negs	r0, r0
    e2c0:	4770      	bx	lr

0000e2c2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    e2c2:	2380      	movs	r3, #128	; 0x80
    e2c4:	019b      	lsls	r3, r3, #6
    e2c6:	604b      	str	r3, [r1, #4]

	return 0;
}
    e2c8:	2000      	movs	r0, #0
    e2ca:	4770      	bx	lr

0000e2cc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    e2cc:	2001      	movs	r0, #1
    e2ce:	4770      	bx	lr

0000e2d0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    e2d0:	2000      	movs	r0, #0
    e2d2:	4770      	bx	lr

0000e2d4 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    e2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2d6:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    e2d8:	2041      	movs	r0, #65	; 0x41
    e2da:	5c23      	ldrb	r3, [r4, r0]
    e2dc:	2501      	movs	r5, #1
    e2de:	432b      	orrs	r3, r5
    e2e0:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    e2e2:	b292      	uxth	r2, r2
    e2e4:	2000      	movs	r0, #0
    e2e6:	5620      	ldrsb	r0, [r4, r0]
    e2e8:	2300      	movs	r3, #0
    e2ea:	4d12      	ldr	r5, [pc, #72]	; (e334 <_http_client_send_wait+0x60>)
    e2ec:	47a8      	blx	r5
    e2ee:	2800      	cmp	r0, #0
    e2f0:	db16      	blt.n	e320 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    e2f2:	2341      	movs	r3, #65	; 0x41
    e2f4:	5ce3      	ldrb	r3, [r4, r3]
    e2f6:	07db      	lsls	r3, r3, #31
    e2f8:	d518      	bpl.n	e32c <_http_client_send_wait+0x58>
    e2fa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    e2fc:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    e2fe:	2b02      	cmp	r3, #2
    e300:	d917      	bls.n	e332 <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    e302:	4f0d      	ldr	r7, [pc, #52]	; (e338 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    e304:	4e0d      	ldr	r6, [pc, #52]	; (e33c <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    e306:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    e308:	2000      	movs	r0, #0
    e30a:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    e30c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    e30e:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    e310:	5d63      	ldrb	r3, [r4, r5]
    e312:	07db      	lsls	r3, r3, #31
    e314:	d50c      	bpl.n	e330 <_http_client_send_wait+0x5c>
    e316:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    e318:	2b02      	cmp	r3, #2
    e31a:	d8f5      	bhi.n	e308 <_http_client_send_wait+0x34>
	return 0;
    e31c:	2000      	movs	r0, #0
    e31e:	e008      	b.n	e332 <_http_client_send_wait+0x5e>
		module->sending = 0;
    e320:	2241      	movs	r2, #65	; 0x41
    e322:	5ca3      	ldrb	r3, [r4, r2]
    e324:	2101      	movs	r1, #1
    e326:	438b      	bics	r3, r1
    e328:	54a3      	strb	r3, [r4, r2]
		return result;
    e32a:	e002      	b.n	e332 <_http_client_send_wait+0x5e>
	return 0;
    e32c:	2000      	movs	r0, #0
    e32e:	e000      	b.n	e332 <_http_client_send_wait+0x5e>
    e330:	2000      	movs	r0, #0
}
    e332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e334:	0000b991 	.word	0x0000b991
    e338:	00009bf1 	.word	0x00009bf1
    e33c:	0000f491 	.word	0x0000f491

0000e340 <http_client_get_config_defaults>:
	config->port = 80;
    e340:	2350      	movs	r3, #80	; 0x50
    e342:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    e344:	2300      	movs	r3, #0
    e346:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    e348:	4a05      	ldr	r2, [pc, #20]	; (e360 <http_client_get_config_defaults+0x20>)
    e34a:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    e34c:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    e34e:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    e350:	3301      	adds	r3, #1
    e352:	33ff      	adds	r3, #255	; 0xff
    e354:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    e356:	3bae      	subs	r3, #174	; 0xae
    e358:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    e35a:	4b02      	ldr	r3, [pc, #8]	; (e364 <http_client_get_config_defaults+0x24>)
    e35c:	6183      	str	r3, [r0, #24]
}
    e35e:	4770      	bx	lr
    e360:	00004e20 	.word	0x00004e20
    e364:	0001405c 	.word	0x0001405c

0000e368 <http_client_init>:
{
    e368:	b570      	push	{r4, r5, r6, lr}
    e36a:	0004      	movs	r4, r0
    e36c:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    e36e:	2800      	cmp	r0, #0
    e370:	d038      	beq.n	e3e4 <http_client_init+0x7c>
    e372:	2900      	cmp	r1, #0
    e374:	d039      	beq.n	e3ea <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    e376:	690b      	ldr	r3, [r1, #16]
    e378:	2b00      	cmp	r3, #0
    e37a:	d039      	beq.n	e3f0 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    e37c:	684b      	ldr	r3, [r1, #4]
    e37e:	2b00      	cmp	r3, #0
    e380:	d039      	beq.n	e3f6 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    e382:	694b      	ldr	r3, [r1, #20]
    e384:	2b51      	cmp	r3, #81	; 0x51
    e386:	d939      	bls.n	e3fc <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    e388:	22e8      	movs	r2, #232	; 0xe8
    e38a:	2100      	movs	r1, #0
    e38c:	4b1e      	ldr	r3, [pc, #120]	; (e408 <http_client_init+0xa0>)
    e38e:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    e390:	0020      	movs	r0, r4
    e392:	3050      	adds	r0, #80	; 0x50
    e394:	221c      	movs	r2, #28
    e396:	0029      	movs	r1, r5
    e398:	4b1c      	ldr	r3, [pc, #112]	; (e40c <http_client_init+0xa4>)
    e39a:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    e39c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    e39e:	2b00      	cmp	r3, #0
    e3a0:	d008      	beq.n	e3b4 <http_client_init+0x4c>
	if (config->timeout > 0) {
    e3a2:	892b      	ldrh	r3, [r5, #8]
    e3a4:	2b00      	cmp	r3, #0
    e3a6:	d111      	bne.n	e3cc <http_client_init+0x64>
	module->req.state = STATE_INIT;
    e3a8:	2300      	movs	r3, #0
    e3aa:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    e3ac:	22d8      	movs	r2, #216	; 0xd8
    e3ae:	50a3      	str	r3, [r4, r2]
	return 0;
    e3b0:	2000      	movs	r0, #0
}
    e3b2:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    e3b4:	6928      	ldr	r0, [r5, #16]
    e3b6:	4b16      	ldr	r3, [pc, #88]	; (e410 <http_client_init+0xa8>)
    e3b8:	4798      	blx	r3
    e3ba:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    e3bc:	2800      	cmp	r0, #0
    e3be:	d020      	beq.n	e402 <http_client_init+0x9a>
		module->alloc_buffer = 1;
    e3c0:	2241      	movs	r2, #65	; 0x41
    e3c2:	5ca3      	ldrb	r3, [r4, r2]
    e3c4:	2104      	movs	r1, #4
    e3c6:	430b      	orrs	r3, r1
    e3c8:	54a3      	strb	r3, [r4, r2]
    e3ca:	e7ea      	b.n	e3a2 <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    e3cc:	6868      	ldr	r0, [r5, #4]
    e3ce:	2300      	movs	r3, #0
    e3d0:	0022      	movs	r2, r4
    e3d2:	4910      	ldr	r1, [pc, #64]	; (e414 <http_client_init+0xac>)
    e3d4:	4d10      	ldr	r5, [pc, #64]	; (e418 <http_client_init+0xb0>)
    e3d6:	47a8      	blx	r5
    e3d8:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    e3da:	2800      	cmp	r0, #0
    e3dc:	dae4      	bge.n	e3a8 <http_client_init+0x40>
			return -ENOSPC;
    e3de:	201c      	movs	r0, #28
    e3e0:	4240      	negs	r0, r0
    e3e2:	e7e6      	b.n	e3b2 <http_client_init+0x4a>
		return -EINVAL;
    e3e4:	2016      	movs	r0, #22
    e3e6:	4240      	negs	r0, r0
    e3e8:	e7e3      	b.n	e3b2 <http_client_init+0x4a>
    e3ea:	2016      	movs	r0, #22
    e3ec:	4240      	negs	r0, r0
    e3ee:	e7e0      	b.n	e3b2 <http_client_init+0x4a>
		return -EINVAL;
    e3f0:	2016      	movs	r0, #22
    e3f2:	4240      	negs	r0, r0
    e3f4:	e7dd      	b.n	e3b2 <http_client_init+0x4a>
		return -EINVAL;
    e3f6:	2016      	movs	r0, #22
    e3f8:	4240      	negs	r0, r0
    e3fa:	e7da      	b.n	e3b2 <http_client_init+0x4a>
		return -EINVAL;
    e3fc:	2016      	movs	r0, #22
    e3fe:	4240      	negs	r0, r0
    e400:	e7d7      	b.n	e3b2 <http_client_init+0x4a>
			return -ENOMEM;
    e402:	200c      	movs	r0, #12
    e404:	4240      	negs	r0, r0
    e406:	e7d4      	b.n	e3b2 <http_client_init+0x4a>
    e408:	00011707 	.word	0x00011707
    e40c:	000116d1 	.word	0x000116d1
    e410:	000116a9 	.word	0x000116a9
    e414:	0000e52d 	.word	0x0000e52d
    e418:	0000f40d 	.word	0x0000f40d

0000e41c <http_client_register_callback>:
	if (module == NULL) {
    e41c:	2800      	cmp	r0, #0
    e41e:	d002      	beq.n	e426 <http_client_register_callback+0xa>
	module->cb = callback;
    e420:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    e422:	2000      	movs	r0, #0
}
    e424:	4770      	bx	lr
		return -EINVAL;
    e426:	2016      	movs	r0, #22
    e428:	4240      	negs	r0, r0
    e42a:	e7fb      	b.n	e424 <http_client_register_callback+0x8>

0000e42c <_http_client_clear_conn>:
{
    e42c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e42e:	b085      	sub	sp, #20
    e430:	0004      	movs	r4, r0
    e432:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    e434:	23c0      	movs	r3, #192	; 0xc0
    e436:	58c3      	ldr	r3, [r0, r3]
    e438:	2b00      	cmp	r3, #0
    e43a:	d002      	beq.n	e442 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    e43c:	22c4      	movs	r2, #196	; 0xc4
    e43e:	5880      	ldr	r0, [r0, r2]
    e440:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    e442:	0020      	movs	r0, r4
    e444:	30b0      	adds	r0, #176	; 0xb0
    e446:	2218      	movs	r2, #24
    e448:	2100      	movs	r1, #0
    e44a:	4b17      	ldr	r3, [pc, #92]	; (e4a8 <_http_client_clear_conn+0x7c>)
    e44c:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    e44e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    e450:	2b00      	cmp	r3, #0
    e452:	d124      	bne.n	e49e <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    e454:	2300      	movs	r3, #0
    e456:	56e3      	ldrsb	r3, [r4, r3]
    e458:	009b      	lsls	r3, r3, #2
    e45a:	2500      	movs	r5, #0
    e45c:	4a13      	ldr	r2, [pc, #76]	; (e4ac <_http_client_clear_conn+0x80>)
    e45e:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    e460:	0020      	movs	r0, r4
    e462:	306c      	adds	r0, #108	; 0x6c
    e464:	226c      	movs	r2, #108	; 0x6c
    e466:	2100      	movs	r1, #0
    e468:	4f0f      	ldr	r7, [pc, #60]	; (e4a8 <_http_client_clear_conn+0x7c>)
    e46a:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    e46c:	0020      	movs	r0, r4
    e46e:	30d8      	adds	r0, #216	; 0xd8
    e470:	2210      	movs	r2, #16
    e472:	2100      	movs	r1, #0
    e474:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    e476:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    e478:	23d8      	movs	r3, #216	; 0xd8
    e47a:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    e47c:	2241      	movs	r2, #65	; 0x41
    e47e:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    e480:	2101      	movs	r1, #1
    e482:	438b      	bics	r3, r1
    e484:	3101      	adds	r1, #1
    e486:	438b      	bics	r3, r1
    e488:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    e48a:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    e48c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e48e:	2b00      	cmp	r3, #0
    e490:	d003      	beq.n	e49a <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    e492:	aa01      	add	r2, sp, #4
    e494:	3102      	adds	r1, #2
    e496:	0020      	movs	r0, r4
    e498:	4798      	blx	r3
}
    e49a:	b005      	add	sp, #20
    e49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    e49e:	2000      	movs	r0, #0
    e4a0:	5620      	ldrsb	r0, [r4, r0]
    e4a2:	4b03      	ldr	r3, [pc, #12]	; (e4b0 <_http_client_clear_conn+0x84>)
    e4a4:	4798      	blx	r3
    e4a6:	e7d5      	b.n	e454 <_http_client_clear_conn+0x28>
    e4a8:	00011707 	.word	0x00011707
    e4ac:	20000268 	.word	0x20000268
    e4b0:	0000babd 	.word	0x0000babd

0000e4b4 <http_client_socket_resolve_handler>:
{
    e4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4b6:	b087      	sub	sp, #28
    e4b8:	9000      	str	r0, [sp, #0]
    e4ba:	9101      	str	r1, [sp, #4]
    e4bc:	4c17      	ldr	r4, [pc, #92]	; (e51c <http_client_socket_resolve_handler+0x68>)
    e4be:	0026      	movs	r6, r4
    e4c0:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    e4c2:	4f17      	ldr	r7, [pc, #92]	; (e520 <http_client_socket_resolve_handler+0x6c>)
    e4c4:	e015      	b.n	e4f2 <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
    e4c6:	2302      	movs	r3, #2
    e4c8:	aa02      	add	r2, sp, #8
    e4ca:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    e4cc:	334e      	adds	r3, #78	; 0x4e
    e4ce:	5aeb      	ldrh	r3, [r5, r3]
    e4d0:	021a      	lsls	r2, r3, #8
    e4d2:	0a1b      	lsrs	r3, r3, #8
    e4d4:	4313      	orrs	r3, r2
    e4d6:	aa02      	add	r2, sp, #8
    e4d8:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    e4da:	9b01      	ldr	r3, [sp, #4]
    e4dc:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    e4de:	2000      	movs	r0, #0
    e4e0:	5628      	ldrsb	r0, [r5, r0]
    e4e2:	2210      	movs	r2, #16
    e4e4:	a902      	add	r1, sp, #8
    e4e6:	4b0f      	ldr	r3, [pc, #60]	; (e524 <http_client_socket_resolve_handler+0x70>)
    e4e8:	4798      	blx	r3
				return;
    e4ea:	e015      	b.n	e518 <http_client_socket_resolve_handler+0x64>
    e4ec:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    e4ee:	42b4      	cmp	r4, r6
    e4f0:	d012      	beq.n	e518 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
    e4f2:	6825      	ldr	r5, [r4, #0]
    e4f4:	2d00      	cmp	r5, #0
    e4f6:	d0f9      	beq.n	e4ec <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    e4f8:	1c69      	adds	r1, r5, #1
    e4fa:	9800      	ldr	r0, [sp, #0]
    e4fc:	47b8      	blx	r7
    e4fe:	2800      	cmp	r0, #0
    e500:	d1f4      	bne.n	e4ec <http_client_socket_resolve_handler+0x38>
    e502:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    e504:	2b01      	cmp	r3, #1
    e506:	d1f1      	bne.n	e4ec <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    e508:	9b01      	ldr	r3, [sp, #4]
    e50a:	2b00      	cmp	r3, #0
    e50c:	d1db      	bne.n	e4c6 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    e50e:	2176      	movs	r1, #118	; 0x76
    e510:	4249      	negs	r1, r1
    e512:	0028      	movs	r0, r5
    e514:	4b04      	ldr	r3, [pc, #16]	; (e528 <http_client_socket_resolve_handler+0x74>)
    e516:	4798      	blx	r3
}
    e518:	b007      	add	sp, #28
    e51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e51c:	20000268 	.word	0x20000268
    e520:	00011be5 	.word	0x00011be5
    e524:	0000b901 	.word	0x0000b901
    e528:	0000e42d 	.word	0x0000e42d

0000e52c <http_client_timer_callback>:
{
    e52c:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    e52e:	2a00      	cmp	r2, #0
    e530:	d004      	beq.n	e53c <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    e532:	213e      	movs	r1, #62	; 0x3e
    e534:	4249      	negs	r1, r1
    e536:	0010      	movs	r0, r2
    e538:	4b01      	ldr	r3, [pc, #4]	; (e540 <http_client_timer_callback+0x14>)
    e53a:	4798      	blx	r3
}
    e53c:	bd10      	pop	{r4, pc}
    e53e:	46c0      	nop			; (mov r8, r8)
    e540:	0000e42d 	.word	0x0000e42d

0000e544 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    e544:	b5f0      	push	{r4, r5, r6, r7, lr}
    e546:	46de      	mov	lr, fp
    e548:	4657      	mov	r7, sl
    e54a:	b580      	push	{r7, lr}
    e54c:	b095      	sub	sp, #84	; 0x54
    e54e:	af02      	add	r7, sp, #8
    e550:	0004      	movs	r4, r0
    e552:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    e554:	2210      	movs	r2, #16
    e556:	49b2      	ldr	r1, [pc, #712]	; (e820 <_http_client_request+0x2dc>)
    e558:	2310      	movs	r3, #16
    e55a:	2008      	movs	r0, #8
    e55c:	1838      	adds	r0, r7, r0
    e55e:	18c0      	adds	r0, r0, r3
    e560:	4bb0      	ldr	r3, [pc, #704]	; (e824 <_http_client_request+0x2e0>)
    e562:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    e564:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e566:	1dd3      	adds	r3, r2, #7
    e568:	08db      	lsrs	r3, r3, #3
    e56a:	00db      	lsls	r3, r3, #3
    e56c:	4669      	mov	r1, sp
    e56e:	1acb      	subs	r3, r1, r3
    e570:	469d      	mov	sp, r3
    e572:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    e574:	2c00      	cmp	r4, #0
    e576:	d100      	bne.n	e57a <_http_client_request+0x36>
    e578:	e1f1      	b.n	e95e <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    e57a:	2341      	movs	r3, #65	; 0x41
    e57c:	5ce3      	ldrb	r3, [r4, r3]
    e57e:	07db      	lsls	r3, r3, #31
    e580:	d500      	bpl.n	e584 <_http_client_request+0x40>
    e582:	e1ec      	b.n	e95e <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    e584:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    e586:	2b03      	cmp	r3, #3
    e588:	d004      	beq.n	e594 <_http_client_request+0x50>
    e58a:	2b04      	cmp	r3, #4
    e58c:	d100      	bne.n	e590 <_http_client_request+0x4c>
    e58e:	e120      	b.n	e7d2 <_http_client_request+0x28e>
    e590:	46dd      	mov	sp, fp
    e592:	e1e5      	b.n	e960 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    e594:	2300      	movs	r3, #0
    e596:	21cc      	movs	r1, #204	; 0xcc
    e598:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    e59a:	3104      	adds	r1, #4
    e59c:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    e59e:	9400      	str	r4, [sp, #0]
    e5a0:	4ba1      	ldr	r3, [pc, #644]	; (e828 <_http_client_request+0x2e4>)
    e5a2:	0031      	movs	r1, r6
    e5a4:	202c      	movs	r0, #44	; 0x2c
    e5a6:	2508      	movs	r5, #8
    e5a8:	46ac      	mov	ip, r5
    e5aa:	44bc      	add	ip, r7
    e5ac:	4460      	add	r0, ip
    e5ae:	4d9f      	ldr	r5, [pc, #636]	; (e82c <_http_client_request+0x2e8>)
    e5b0:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    e5b2:	23c8      	movs	r3, #200	; 0xc8
    e5b4:	5ce3      	ldrb	r3, [r4, r3]
    e5b6:	2b01      	cmp	r3, #1
    e5b8:	d100      	bne.n	e5bc <_http_client_request+0x78>
    e5ba:	e0a9      	b.n	e710 <_http_client_request+0x1cc>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    e5bc:	2b02      	cmp	r3, #2
    e5be:	d100      	bne.n	e5c2 <_http_client_request+0x7e>
    e5c0:	e0af      	b.n	e722 <_http_client_request+0x1de>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    e5c2:	2b03      	cmp	r3, #3
    e5c4:	d100      	bne.n	e5c8 <_http_client_request+0x84>
    e5c6:	e0b5      	b.n	e734 <_http_client_request+0x1f0>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    e5c8:	2b04      	cmp	r3, #4
    e5ca:	d100      	bne.n	e5ce <_http_client_request+0x8a>
    e5cc:	e0bb      	b.n	e746 <_http_client_request+0x202>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    e5ce:	2b05      	cmp	r3, #5
    e5d0:	d100      	bne.n	e5d4 <_http_client_request+0x90>
    e5d2:	e0c1      	b.n	e758 <_http_client_request+0x214>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    e5d4:	2b06      	cmp	r3, #6
    e5d6:	d100      	bne.n	e5da <_http_client_request+0x96>
    e5d8:	e0c7      	b.n	e76a <_http_client_request+0x226>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    e5da:	0025      	movs	r5, r4
    e5dc:	3570      	adds	r5, #112	; 0x70
    e5de:	0028      	movs	r0, r5
    e5e0:	4b93      	ldr	r3, [pc, #588]	; (e830 <_http_client_request+0x2ec>)
    e5e2:	469a      	mov	sl, r3
    e5e4:	4798      	blx	r3
    e5e6:	0002      	movs	r2, r0
    e5e8:	0029      	movs	r1, r5
    e5ea:	232c      	movs	r3, #44	; 0x2c
    e5ec:	2008      	movs	r0, #8
    e5ee:	1838      	adds	r0, r7, r0
    e5f0:	18c0      	adds	r0, r0, r3
    e5f2:	4d90      	ldr	r5, [pc, #576]	; (e834 <_http_client_request+0x2f0>)
    e5f4:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    e5f6:	220b      	movs	r2, #11
    e5f8:	498f      	ldr	r1, [pc, #572]	; (e838 <_http_client_request+0x2f4>)
    e5fa:	232c      	movs	r3, #44	; 0x2c
    e5fc:	2008      	movs	r0, #8
    e5fe:	1838      	adds	r0, r7, r0
    e600:	18c0      	adds	r0, r0, r3
    e602:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    e604:	220c      	movs	r2, #12
    e606:	498d      	ldr	r1, [pc, #564]	; (e83c <_http_client_request+0x2f8>)
    e608:	232c      	movs	r3, #44	; 0x2c
    e60a:	2008      	movs	r0, #8
    e60c:	1838      	adds	r0, r7, r0
    e60e:	18c0      	adds	r0, r0, r3
    e610:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    e612:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    e614:	607b      	str	r3, [r7, #4]
    e616:	0018      	movs	r0, r3
    e618:	47d0      	blx	sl
    e61a:	0002      	movs	r2, r0
    e61c:	6879      	ldr	r1, [r7, #4]
    e61e:	232c      	movs	r3, #44	; 0x2c
    e620:	2008      	movs	r0, #8
    e622:	1838      	adds	r0, r7, r0
    e624:	18c0      	adds	r0, r0, r3
    e626:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    e628:	2202      	movs	r2, #2
    e62a:	4985      	ldr	r1, [pc, #532]	; (e840 <_http_client_request+0x2fc>)
    e62c:	232c      	movs	r3, #44	; 0x2c
    e62e:	2008      	movs	r0, #8
    e630:	1838      	adds	r0, r7, r0
    e632:	18c0      	adds	r0, r0, r3
    e634:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    e636:	2206      	movs	r2, #6
    e638:	4982      	ldr	r1, [pc, #520]	; (e844 <_http_client_request+0x300>)
    e63a:	232c      	movs	r3, #44	; 0x2c
    e63c:	2008      	movs	r0, #8
    e63e:	1838      	adds	r0, r7, r0
    e640:	18c0      	adds	r0, r0, r3
    e642:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    e644:	1c63      	adds	r3, r4, #1
    e646:	607b      	str	r3, [r7, #4]
    e648:	0018      	movs	r0, r3
    e64a:	47d0      	blx	sl
    e64c:	0002      	movs	r2, r0
    e64e:	6879      	ldr	r1, [r7, #4]
    e650:	232c      	movs	r3, #44	; 0x2c
    e652:	2008      	movs	r0, #8
    e654:	1838      	adds	r0, r7, r0
    e656:	18c0      	adds	r0, r0, r3
    e658:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    e65a:	2202      	movs	r2, #2
    e65c:	4978      	ldr	r1, [pc, #480]	; (e840 <_http_client_request+0x2fc>)
    e65e:	232c      	movs	r3, #44	; 0x2c
    e660:	2008      	movs	r0, #8
    e662:	1838      	adds	r0, r7, r0
    e664:	18c0      	adds	r0, r0, r3
    e666:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    e668:	2218      	movs	r2, #24
    e66a:	4977      	ldr	r1, [pc, #476]	; (e848 <_http_client_request+0x304>)
    e66c:	232c      	movs	r3, #44	; 0x2c
    e66e:	2008      	movs	r0, #8
    e670:	1838      	adds	r0, r7, r0
    e672:	18c0      	adds	r0, r0, r3
    e674:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    e676:	2213      	movs	r2, #19
    e678:	4974      	ldr	r1, [pc, #464]	; (e84c <_http_client_request+0x308>)
    e67a:	232c      	movs	r3, #44	; 0x2c
    e67c:	2008      	movs	r0, #8
    e67e:	1838      	adds	r0, r7, r0
    e680:	18c0      	adds	r0, r0, r3
    e682:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    e684:	2217      	movs	r2, #23
    e686:	4972      	ldr	r1, [pc, #456]	; (e850 <_http_client_request+0x30c>)
    e688:	232c      	movs	r3, #44	; 0x2c
    e68a:	2008      	movs	r0, #8
    e68c:	1838      	adds	r0, r7, r0
    e68e:	18c0      	adds	r0, r0, r3
    e690:	47a8      	blx	r5

		if (entity->read != NULL) {
    e692:	0023      	movs	r3, r4
    e694:	33b0      	adds	r3, #176	; 0xb0
    e696:	68db      	ldr	r3, [r3, #12]
    e698:	2b00      	cmp	r3, #0
    e69a:	d07b      	beq.n	e794 <_http_client_request+0x250>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    e69c:	23b0      	movs	r3, #176	; 0xb0
    e69e:	5ce3      	ldrb	r3, [r4, r3]
    e6a0:	2b00      	cmp	r3, #0
    e6a2:	d16b      	bne.n	e77c <_http_client_request+0x238>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    e6a4:	0023      	movs	r3, r4
    e6a6:	33b0      	adds	r3, #176	; 0xb0
    e6a8:	689b      	ldr	r3, [r3, #8]
    e6aa:	2b00      	cmp	r3, #0
    e6ac:	d072      	beq.n	e794 <_http_client_request+0x250>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    e6ae:	0022      	movs	r2, r4
    e6b0:	32b0      	adds	r2, #176	; 0xb0
    e6b2:	6950      	ldr	r0, [r2, #20]
    e6b4:	4798      	blx	r3
    e6b6:	23cc      	movs	r3, #204	; 0xcc
    e6b8:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    e6ba:	2800      	cmp	r0, #0
    e6bc:	da00      	bge.n	e6c0 <_http_client_request+0x17c>
    e6be:	e0ac      	b.n	e81a <_http_client_request+0x2d6>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    e6c0:	0002      	movs	r2, r0
    e6c2:	4964      	ldr	r1, [pc, #400]	; (e854 <_http_client_request+0x310>)
    e6c4:	2320      	movs	r3, #32
    e6c6:	2008      	movs	r0, #8
    e6c8:	1838      	adds	r0, r7, r0
    e6ca:	18c0      	adds	r0, r0, r3
    e6cc:	4b62      	ldr	r3, [pc, #392]	; (e858 <_http_client_request+0x314>)
    e6ce:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    e6d0:	2210      	movs	r2, #16
    e6d2:	4962      	ldr	r1, [pc, #392]	; (e85c <_http_client_request+0x318>)
    e6d4:	232c      	movs	r3, #44	; 0x2c
    e6d6:	2008      	movs	r0, #8
    e6d8:	1838      	adds	r0, r7, r0
    e6da:	18c0      	adds	r0, r0, r3
    e6dc:	4d55      	ldr	r5, [pc, #340]	; (e834 <_http_client_request+0x2f0>)
    e6de:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    e6e0:	2320      	movs	r3, #32
    e6e2:	2208      	movs	r2, #8
    e6e4:	18ba      	adds	r2, r7, r2
    e6e6:	18d0      	adds	r0, r2, r3
    e6e8:	4b51      	ldr	r3, [pc, #324]	; (e830 <_http_client_request+0x2ec>)
    e6ea:	4798      	blx	r3
    e6ec:	0002      	movs	r2, r0
    e6ee:	2320      	movs	r3, #32
    e6f0:	2108      	movs	r1, #8
    e6f2:	1879      	adds	r1, r7, r1
    e6f4:	18c9      	adds	r1, r1, r3
    e6f6:	330c      	adds	r3, #12
    e6f8:	2008      	movs	r0, #8
    e6fa:	1838      	adds	r0, r7, r0
    e6fc:	18c0      	adds	r0, r0, r3
    e6fe:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    e700:	2202      	movs	r2, #2
    e702:	494f      	ldr	r1, [pc, #316]	; (e840 <_http_client_request+0x2fc>)
    e704:	232c      	movs	r3, #44	; 0x2c
    e706:	2008      	movs	r0, #8
    e708:	1838      	adds	r0, r7, r0
    e70a:	18c0      	adds	r0, r0, r3
    e70c:	47a8      	blx	r5
    e70e:	e041      	b.n	e794 <_http_client_request+0x250>
			stream_writer_send_buffer(&writer, "GET ", 4);
    e710:	2204      	movs	r2, #4
    e712:	4953      	ldr	r1, [pc, #332]	; (e860 <_http_client_request+0x31c>)
    e714:	332b      	adds	r3, #43	; 0x2b
    e716:	2008      	movs	r0, #8
    e718:	1838      	adds	r0, r7, r0
    e71a:	18c0      	adds	r0, r0, r3
    e71c:	4b45      	ldr	r3, [pc, #276]	; (e834 <_http_client_request+0x2f0>)
    e71e:	4798      	blx	r3
    e720:	e75b      	b.n	e5da <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "POST ", 5);
    e722:	2205      	movs	r2, #5
    e724:	494f      	ldr	r1, [pc, #316]	; (e864 <_http_client_request+0x320>)
    e726:	332a      	adds	r3, #42	; 0x2a
    e728:	2008      	movs	r0, #8
    e72a:	1838      	adds	r0, r7, r0
    e72c:	18c0      	adds	r0, r0, r3
    e72e:	4b41      	ldr	r3, [pc, #260]	; (e834 <_http_client_request+0x2f0>)
    e730:	4798      	blx	r3
    e732:	e752      	b.n	e5da <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    e734:	2207      	movs	r2, #7
    e736:	494c      	ldr	r1, [pc, #304]	; (e868 <_http_client_request+0x324>)
    e738:	3329      	adds	r3, #41	; 0x29
    e73a:	2008      	movs	r0, #8
    e73c:	1838      	adds	r0, r7, r0
    e73e:	18c0      	adds	r0, r0, r3
    e740:	4b3c      	ldr	r3, [pc, #240]	; (e834 <_http_client_request+0x2f0>)
    e742:	4798      	blx	r3
    e744:	e749      	b.n	e5da <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    e746:	2204      	movs	r2, #4
    e748:	4948      	ldr	r1, [pc, #288]	; (e86c <_http_client_request+0x328>)
    e74a:	3328      	adds	r3, #40	; 0x28
    e74c:	2008      	movs	r0, #8
    e74e:	1838      	adds	r0, r7, r0
    e750:	18c0      	adds	r0, r0, r3
    e752:	4b38      	ldr	r3, [pc, #224]	; (e834 <_http_client_request+0x2f0>)
    e754:	4798      	blx	r3
    e756:	e740      	b.n	e5da <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    e758:	2208      	movs	r2, #8
    e75a:	4945      	ldr	r1, [pc, #276]	; (e870 <_http_client_request+0x32c>)
    e75c:	3327      	adds	r3, #39	; 0x27
    e75e:	2008      	movs	r0, #8
    e760:	1838      	adds	r0, r7, r0
    e762:	18c0      	adds	r0, r0, r3
    e764:	4b33      	ldr	r3, [pc, #204]	; (e834 <_http_client_request+0x2f0>)
    e766:	4798      	blx	r3
    e768:	e737      	b.n	e5da <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    e76a:	2205      	movs	r2, #5
    e76c:	4941      	ldr	r1, [pc, #260]	; (e874 <_http_client_request+0x330>)
    e76e:	3326      	adds	r3, #38	; 0x26
    e770:	2008      	movs	r0, #8
    e772:	1838      	adds	r0, r7, r0
    e774:	18c0      	adds	r0, r0, r3
    e776:	4b2f      	ldr	r3, [pc, #188]	; (e834 <_http_client_request+0x2f0>)
    e778:	4798      	blx	r3
    e77a:	e72e      	b.n	e5da <_http_client_request+0x96>
				module->req.content_length = -1;
    e77c:	2201      	movs	r2, #1
    e77e:	4252      	negs	r2, r2
    e780:	23cc      	movs	r3, #204	; 0xcc
    e782:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    e784:	321d      	adds	r2, #29
    e786:	493c      	ldr	r1, [pc, #240]	; (e878 <_http_client_request+0x334>)
    e788:	3ba0      	subs	r3, #160	; 0xa0
    e78a:	2008      	movs	r0, #8
    e78c:	1838      	adds	r0, r7, r0
    e78e:	18c0      	adds	r0, r0, r3
    e790:	4b28      	ldr	r3, [pc, #160]	; (e834 <_http_client_request+0x2f0>)
    e792:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    e794:	23d4      	movs	r3, #212	; 0xd4
    e796:	58e5      	ldr	r5, [r4, r3]
    e798:	2d00      	cmp	r5, #0
    e79a:	d00a      	beq.n	e7b2 <_http_client_request+0x26e>
			stream_writer_send_buffer(&writer,
    e79c:	0028      	movs	r0, r5
    e79e:	4b24      	ldr	r3, [pc, #144]	; (e830 <_http_client_request+0x2ec>)
    e7a0:	4798      	blx	r3
    e7a2:	0002      	movs	r2, r0
    e7a4:	0029      	movs	r1, r5
    e7a6:	232c      	movs	r3, #44	; 0x2c
    e7a8:	2008      	movs	r0, #8
    e7aa:	1838      	adds	r0, r7, r0
    e7ac:	18c0      	adds	r0, r0, r3
    e7ae:	4b21      	ldr	r3, [pc, #132]	; (e834 <_http_client_request+0x2f0>)
    e7b0:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    e7b2:	2202      	movs	r2, #2
    e7b4:	4922      	ldr	r1, [pc, #136]	; (e840 <_http_client_request+0x2fc>)
    e7b6:	232c      	movs	r3, #44	; 0x2c
    e7b8:	2008      	movs	r0, #8
    e7ba:	1838      	adds	r0, r7, r0
    e7bc:	18c0      	adds	r0, r0, r3
    e7be:	4b1d      	ldr	r3, [pc, #116]	; (e834 <_http_client_request+0x2f0>)
    e7c0:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    e7c2:	232c      	movs	r3, #44	; 0x2c
    e7c4:	2208      	movs	r2, #8
    e7c6:	18ba      	adds	r2, r7, r2
    e7c8:	18d0      	adds	r0, r2, r3
    e7ca:	4b2c      	ldr	r3, [pc, #176]	; (e87c <_http_client_request+0x338>)
    e7cc:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    e7ce:	2304      	movs	r3, #4
    e7d0:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    e7d2:	23cc      	movs	r3, #204	; 0xcc
    e7d4:	58e2      	ldr	r2, [r4, r3]
    e7d6:	2a00      	cmp	r2, #0
    e7d8:	db52      	blt.n	e880 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    e7da:	dc00      	bgt.n	e7de <_http_client_request+0x29a>
    e7dc:	e0f1      	b.n	e9c2 <_http_client_request+0x47e>
    e7de:	0023      	movs	r3, r4
    e7e0:	33b0      	adds	r3, #176	; 0xb0
    e7e2:	68dd      	ldr	r5, [r3, #12]
    e7e4:	2d00      	cmp	r5, #0
    e7e6:	d100      	bne.n	e7ea <_http_client_request+0x2a6>
    e7e8:	e0eb      	b.n	e9c2 <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    e7ea:	23d0      	movs	r3, #208	; 0xd0
    e7ec:	58e3      	ldr	r3, [r4, r3]
    e7ee:	429a      	cmp	r2, r3
    e7f0:	dd00      	ble.n	e7f4 <_http_client_request+0x2b0>
    e7f2:	e0bb      	b.n	e96c <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    e7f4:	23c0      	movs	r3, #192	; 0xc0
    e7f6:	58e3      	ldr	r3, [r4, r3]
    e7f8:	2b00      	cmp	r3, #0
    e7fa:	d002      	beq.n	e802 <_http_client_request+0x2be>
					module->req.entity.close(module->req.entity.priv_data);
    e7fc:	22c4      	movs	r2, #196	; 0xc4
    e7fe:	58a0      	ldr	r0, [r4, r2]
    e800:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    e802:	2302      	movs	r3, #2
    e804:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    e806:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e808:	2b00      	cmp	r3, #0
    e80a:	d100      	bne.n	e80e <_http_client_request+0x2ca>
    e80c:	e6c0      	b.n	e590 <_http_client_request+0x4c>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    e80e:	220c      	movs	r2, #12
    e810:	18ba      	adds	r2, r7, r2
    e812:	2101      	movs	r1, #1
    e814:	0020      	movs	r0, r4
    e816:	4798      	blx	r3
    e818:	e6ba      	b.n	e590 <_http_client_request+0x4c>
					module->req.content_length = 0;
    e81a:	2200      	movs	r2, #0
    e81c:	50e2      	str	r2, [r4, r3]
    e81e:	e7b9      	b.n	e794 <_http_client_request+0x250>
    e820:	00013f44 	.word	0x00013f44
    e824:	000116d1 	.word	0x000116d1
    e828:	0000e2d5 	.word	0x0000e2d5
    e82c:	0000f2a1 	.word	0x0000f2a1
    e830:	00011c43 	.word	0x00011c43
    e834:	0000f30d 	.word	0x0000f30d
    e838:	00013fb8 	.word	0x00013fb8
    e83c:	00013fc4 	.word	0x00013fc4
    e840:	000143b4 	.word	0x000143b4
    e844:	00013fd4 	.word	0x00013fd4
    e848:	00013fdc 	.word	0x00013fdc
    e84c:	00013ff8 	.word	0x00013ff8
    e850:	0001400c 	.word	0x0001400c
    e854:	00014044 	.word	0x00014044
    e858:	00011ba1 	.word	0x00011ba1
    e85c:	00014048 	.word	0x00014048
    e860:	00013f84 	.word	0x00013f84
    e864:	00013f8c 	.word	0x00013f8c
    e868:	00013f94 	.word	0x00013f94
    e86c:	00013f9c 	.word	0x00013f9c
    e870:	00013fa4 	.word	0x00013fa4
    e874:	00013fb0 	.word	0x00013fb0
    e878:	00014024 	.word	0x00014024
    e87c:	0000f2b1 	.word	0x0000f2b1
		if (module->req.content_length < 0 && entity->read) {
    e880:	0023      	movs	r3, r4
    e882:	33b0      	adds	r3, #176	; 0xb0
    e884:	68dd      	ldr	r5, [r3, #12]
    e886:	2d00      	cmp	r5, #0
    e888:	d100      	bne.n	e88c <_http_client_request+0x348>
    e88a:	e09a      	b.n	e9c2 <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    e88c:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    e88e:	58e3      	ldr	r3, [r4, r3]
    e890:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e892:	3a07      	subs	r2, #7
    e894:	1d71      	adds	r1, r6, #5
    e896:	0020      	movs	r0, r4
    e898:	30b0      	adds	r0, #176	; 0xb0
    e89a:	6940      	ldr	r0, [r0, #20]
    e89c:	47a8      	blx	r5
    e89e:	0005      	movs	r5, r0
    e8a0:	43c3      	mvns	r3, r0
    e8a2:	17db      	asrs	r3, r3, #31
    e8a4:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    e8a6:	220a      	movs	r2, #10
    e8a8:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    e8aa:	210d      	movs	r1, #13
    e8ac:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    e8ae:	1973      	adds	r3, r6, r5
    e8b0:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    e8b2:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    e8b4:	230f      	movs	r3, #15
    e8b6:	402b      	ands	r3, r5
    e8b8:	3206      	adds	r2, #6
    e8ba:	3905      	subs	r1, #5
    e8bc:	468c      	mov	ip, r1
    e8be:	44bc      	add	ip, r7
    e8c0:	4462      	add	r2, ip
    e8c2:	5cd3      	ldrb	r3, [r2, r3]
    e8c4:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    e8c6:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    e8c8:	2d0f      	cmp	r5, #15
    e8ca:	dd0d      	ble.n	e8e8 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    e8cc:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    e8ce:	17eb      	asrs	r3, r5, #31
    e8d0:	220f      	movs	r2, #15
    e8d2:	4013      	ands	r3, r2
    e8d4:	195b      	adds	r3, r3, r5
    e8d6:	111b      	asrs	r3, r3, #4
    e8d8:	4013      	ands	r3, r2
    e8da:	3201      	adds	r2, #1
    e8dc:	2008      	movs	r0, #8
    e8de:	4684      	mov	ip, r0
    e8e0:	44bc      	add	ip, r7
    e8e2:	4462      	add	r2, ip
    e8e4:	5cd3      	ldrb	r3, [r2, r3]
    e8e6:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    e8e8:	2dff      	cmp	r5, #255	; 0xff
    e8ea:	dd0d      	ble.n	e908 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    e8ec:	17ea      	asrs	r2, r5, #31
    e8ee:	23ff      	movs	r3, #255	; 0xff
    e8f0:	4013      	ands	r3, r2
    e8f2:	195b      	adds	r3, r3, r5
    e8f4:	051b      	lsls	r3, r3, #20
    e8f6:	0f1b      	lsrs	r3, r3, #28
    e8f8:	2210      	movs	r2, #16
    e8fa:	2108      	movs	r1, #8
    e8fc:	468c      	mov	ip, r1
    e8fe:	44bc      	add	ip, r7
    e900:	4462      	add	r2, ip
    e902:	5cd3      	ldrb	r3, [r2, r3]
    e904:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    e906:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    e908:	1cca      	adds	r2, r1, #3
    e90a:	1b92      	subs	r2, r2, r6
    e90c:	1d2b      	adds	r3, r5, #4
    e90e:	18d2      	adds	r2, r2, r3
    e910:	b292      	uxth	r2, r2
    e912:	2000      	movs	r0, #0
    e914:	5620      	ldrsb	r0, [r4, r0]
    e916:	2300      	movs	r3, #0
    e918:	4e30      	ldr	r6, [pc, #192]	; (e9dc <_http_client_request+0x498>)
    e91a:	47b0      	blx	r6
    e91c:	2800      	cmp	r0, #0
    e91e:	db19      	blt.n	e954 <_http_client_request+0x410>
			module->req.sent_length += size;
    e920:	22d0      	movs	r2, #208	; 0xd0
    e922:	58a3      	ldr	r3, [r4, r2]
    e924:	195b      	adds	r3, r3, r5
    e926:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    e928:	2d00      	cmp	r5, #0
    e92a:	d000      	beq.n	e92e <_http_client_request+0x3ea>
    e92c:	e630      	b.n	e590 <_http_client_request+0x4c>
				if (module->req.entity.close) {
    e92e:	23c0      	movs	r3, #192	; 0xc0
    e930:	58e3      	ldr	r3, [r4, r3]
    e932:	2b00      	cmp	r3, #0
    e934:	d002      	beq.n	e93c <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    e936:	3a0c      	subs	r2, #12
    e938:	58a0      	ldr	r0, [r4, r2]
    e93a:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    e93c:	2302      	movs	r3, #2
    e93e:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    e940:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e942:	2b00      	cmp	r3, #0
    e944:	d100      	bne.n	e948 <_http_client_request+0x404>
    e946:	e623      	b.n	e590 <_http_client_request+0x4c>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    e948:	220c      	movs	r2, #12
    e94a:	18ba      	adds	r2, r7, r2
    e94c:	2101      	movs	r1, #1
    e94e:	0020      	movs	r0, r4
    e950:	4798      	blx	r3
    e952:	e61d      	b.n	e590 <_http_client_request+0x4c>
				_http_client_clear_conn(module, -EIO);
    e954:	2105      	movs	r1, #5
    e956:	4249      	negs	r1, r1
    e958:	0020      	movs	r0, r4
    e95a:	4b21      	ldr	r3, [pc, #132]	; (e9e0 <_http_client_request+0x49c>)
    e95c:	4798      	blx	r3
    e95e:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    e960:	46bd      	mov	sp, r7
    e962:	b013      	add	sp, #76	; 0x4c
    e964:	bc0c      	pop	{r2, r3}
    e966:	4692      	mov	sl, r2
    e968:	469b      	mov	fp, r3
    e96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    e96c:	0022      	movs	r2, r4
    e96e:	32b0      	adds	r2, #176	; 0xb0
    e970:	6950      	ldr	r0, [r2, #20]
    e972:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e974:	0031      	movs	r1, r6
    e976:	47a8      	blx	r5
			if (size < 0) {
    e978:	2800      	cmp	r0, #0
    e97a:	db16      	blt.n	e9aa <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    e97c:	23cc      	movs	r3, #204	; 0xcc
    e97e:	58e5      	ldr	r5, [r4, r3]
    e980:	3304      	adds	r3, #4
    e982:	58e3      	ldr	r3, [r4, r3]
    e984:	1aed      	subs	r5, r5, r3
    e986:	4285      	cmp	r5, r0
    e988:	dd00      	ble.n	e98c <_http_client_request+0x448>
    e98a:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    e98c:	b2aa      	uxth	r2, r5
    e98e:	2000      	movs	r0, #0
    e990:	5620      	ldrsb	r0, [r4, r0]
    e992:	2300      	movs	r3, #0
    e994:	0031      	movs	r1, r6
    e996:	4e11      	ldr	r6, [pc, #68]	; (e9dc <_http_client_request+0x498>)
    e998:	47b0      	blx	r6
    e99a:	2800      	cmp	r0, #0
    e99c:	db0b      	blt.n	e9b6 <_http_client_request+0x472>
				module->req.sent_length += size;
    e99e:	23d0      	movs	r3, #208	; 0xd0
    e9a0:	58e2      	ldr	r2, [r4, r3]
    e9a2:	4694      	mov	ip, r2
    e9a4:	4465      	add	r5, ip
    e9a6:	50e5      	str	r5, [r4, r3]
    e9a8:	e5f2      	b.n	e590 <_http_client_request+0x4c>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    e9aa:	2105      	movs	r1, #5
    e9ac:	4249      	negs	r1, r1
    e9ae:	0020      	movs	r0, r4
    e9b0:	4b0b      	ldr	r3, [pc, #44]	; (e9e0 <_http_client_request+0x49c>)
    e9b2:	4798      	blx	r3
    e9b4:	e5ec      	b.n	e590 <_http_client_request+0x4c>
					_http_client_clear_conn(module, -EIO);
    e9b6:	2105      	movs	r1, #5
    e9b8:	4249      	negs	r1, r1
    e9ba:	0020      	movs	r0, r4
    e9bc:	4b08      	ldr	r3, [pc, #32]	; (e9e0 <_http_client_request+0x49c>)
    e9be:	4798      	blx	r3
					return;
    e9c0:	e7cd      	b.n	e95e <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    e9c2:	2302      	movs	r3, #2
    e9c4:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    e9c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    e9c8:	2b00      	cmp	r3, #0
    e9ca:	d100      	bne.n	e9ce <_http_client_request+0x48a>
    e9cc:	e5e0      	b.n	e590 <_http_client_request+0x4c>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    e9ce:	220c      	movs	r2, #12
    e9d0:	18ba      	adds	r2, r7, r2
    e9d2:	2101      	movs	r1, #1
    e9d4:	0020      	movs	r0, r4
    e9d6:	4798      	blx	r3
    e9d8:	e5da      	b.n	e590 <_http_client_request+0x4c>
    e9da:	46c0      	nop			; (mov r8, r8)
    e9dc:	0000b991 	.word	0x0000b991
    e9e0:	0000e42d 	.word	0x0000e42d

0000e9e4 <http_client_send_request>:
{
    e9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9e6:	46d6      	mov	lr, sl
    e9e8:	b500      	push	{lr}
    e9ea:	b088      	sub	sp, #32
    e9ec:	0004      	movs	r4, r0
    e9ee:	000f      	movs	r7, r1
    e9f0:	4692      	mov	sl, r2
    e9f2:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    e9f4:	2800      	cmp	r0, #0
    e9f6:	d100      	bne.n	e9fa <http_client_send_request+0x16>
    e9f8:	e0d3      	b.n	eba2 <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    e9fa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    e9fc:	2b02      	cmp	r3, #2
    e9fe:	d900      	bls.n	ea02 <http_client_send_request+0x1e>
    ea00:	e0d3      	b.n	ebaa <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    ea02:	2207      	movs	r2, #7
    ea04:	4981      	ldr	r1, [pc, #516]	; (ec0c <http_client_send_request+0x228>)
    ea06:	0038      	movs	r0, r7
    ea08:	4b81      	ldr	r3, [pc, #516]	; (ec10 <http_client_send_request+0x22c>)
    ea0a:	4798      	blx	r3
		i = 7;
    ea0c:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    ea0e:	2800      	cmp	r0, #0
    ea10:	d007      	beq.n	ea22 <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    ea12:	2208      	movs	r2, #8
    ea14:	497f      	ldr	r1, [pc, #508]	; (ec14 <http_client_send_request+0x230>)
    ea16:	0038      	movs	r0, r7
    ea18:	4b7d      	ldr	r3, [pc, #500]	; (ec10 <http_client_send_request+0x22c>)
    ea1a:	4798      	blx	r3
		i = 8;
    ea1c:	4246      	negs	r6, r0
    ea1e:	4146      	adcs	r6, r0
    ea20:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    ea22:	1c63      	adds	r3, r4, #1
    ea24:	19bd      	adds	r5, r7, r6
    ea26:	9302      	str	r3, [sp, #8]
    ea28:	0018      	movs	r0, r3
    ea2a:	4b7b      	ldr	r3, [pc, #492]	; (ec18 <http_client_send_request+0x234>)
    ea2c:	4798      	blx	r3
    ea2e:	0002      	movs	r2, r0
    ea30:	0029      	movs	r1, r5
    ea32:	9802      	ldr	r0, [sp, #8]
    ea34:	4b76      	ldr	r3, [pc, #472]	; (ec10 <http_client_send_request+0x22c>)
    ea36:	4798      	blx	r3
    ea38:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    ea3a:	782b      	ldrb	r3, [r5, #0]
    ea3c:	2b00      	cmp	r3, #0
    ea3e:	d052      	beq.n	eae6 <http_client_send_request+0x102>
    ea40:	2b2f      	cmp	r3, #47	; 0x2f
    ea42:	d052      	beq.n	eaea <http_client_send_request+0x106>
    ea44:	1c71      	adds	r1, r6, #1
    ea46:	1879      	adds	r1, r7, r1
    ea48:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    ea4a:	3201      	adds	r2, #1
    ea4c:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    ea4e:	000d      	movs	r5, r1
    ea50:	780b      	ldrb	r3, [r1, #0]
    ea52:	2b00      	cmp	r3, #0
    ea54:	d002      	beq.n	ea5c <http_client_send_request+0x78>
    ea56:	3101      	adds	r1, #1
    ea58:	2b2f      	cmp	r3, #47	; 0x2f
    ea5a:	d1f6      	bne.n	ea4a <http_client_send_request+0x66>
	module->host[j] = '\0';
    ea5c:	18a2      	adds	r2, r4, r2
    ea5e:	2300      	movs	r3, #0
    ea60:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    ea62:	7863      	ldrb	r3, [r4, #1]
    ea64:	2b00      	cmp	r3, #0
    ea66:	d100      	bne.n	ea6a <http_client_send_request+0x86>
    ea68:	e0a3      	b.n	ebb2 <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    ea6a:	0028      	movs	r0, r5
    ea6c:	4b6a      	ldr	r3, [pc, #424]	; (ec18 <http_client_send_request+0x234>)
    ea6e:	4798      	blx	r3
    ea70:	283f      	cmp	r0, #63	; 0x3f
    ea72:	d900      	bls.n	ea76 <http_client_send_request+0x92>
    ea74:	e0a1      	b.n	ebba <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    ea76:	23d4      	movs	r3, #212	; 0xd4
    ea78:	58e0      	ldr	r0, [r4, r3]
    ea7a:	2800      	cmp	r0, #0
    ea7c:	d001      	beq.n	ea82 <http_client_send_request+0x9e>
		free(module->req.ext_header);
    ea7e:	4b67      	ldr	r3, [pc, #412]	; (ec1c <http_client_send_request+0x238>)
    ea80:	4798      	blx	r3
	if (ext_header != NULL) {
    ea82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ea84:	2b00      	cmp	r3, #0
    ea86:	d032      	beq.n	eaee <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    ea88:	0018      	movs	r0, r3
    ea8a:	4b65      	ldr	r3, [pc, #404]	; (ec20 <http_client_send_request+0x23c>)
    ea8c:	4798      	blx	r3
    ea8e:	23d4      	movs	r3, #212	; 0xd4
    ea90:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    ea92:	2800      	cmp	r0, #0
    ea94:	d100      	bne.n	ea98 <http_client_send_request+0xb4>
    ea96:	e094      	b.n	ebc2 <http_client_send_request+0x1de>
	module->sending = 0;
    ea98:	2241      	movs	r2, #65	; 0x41
    ea9a:	5ca3      	ldrb	r3, [r4, r2]
    ea9c:	2101      	movs	r1, #1
    ea9e:	438b      	bics	r3, r1
    eaa0:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    eaa2:	2300      	movs	r3, #0
    eaa4:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    eaa6:	782b      	ldrb	r3, [r5, #0]
    eaa8:	2b2f      	cmp	r3, #47	; 0x2f
    eaaa:	d024      	beq.n	eaf6 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    eaac:	222f      	movs	r2, #47	; 0x2f
    eaae:	2370      	movs	r3, #112	; 0x70
    eab0:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    eab2:	782b      	ldrb	r3, [r5, #0]
    eab4:	2b00      	cmp	r3, #0
    eab6:	d124      	bne.n	eb02 <http_client_send_request+0x11e>
	if (entity != NULL) {
    eab8:	9b03      	ldr	r3, [sp, #12]
    eaba:	2b00      	cmp	r3, #0
    eabc:	d027      	beq.n	eb0e <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    eabe:	0020      	movs	r0, r4
    eac0:	30b0      	adds	r0, #176	; 0xb0
    eac2:	2218      	movs	r2, #24
    eac4:	0019      	movs	r1, r3
    eac6:	4b57      	ldr	r3, [pc, #348]	; (ec24 <http_client_send_request+0x240>)
    eac8:	4798      	blx	r3
	module->req.method = method;
    eaca:	23c8      	movs	r3, #200	; 0xc8
    eacc:	4652      	mov	r2, sl
    eace:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    ead0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    ead2:	2b01      	cmp	r3, #1
    ead4:	d022      	beq.n	eb1c <http_client_send_request+0x138>
    ead6:	2b00      	cmp	r3, #0
    ead8:	d027      	beq.n	eb2a <http_client_send_request+0x146>
    eada:	2b02      	cmp	r3, #2
    eadc:	d03a      	beq.n	eb54 <http_client_send_request+0x170>
		return -EAGAIN;
    eade:	230b      	movs	r3, #11
    eae0:	425b      	negs	r3, r3
    eae2:	9301      	str	r3, [sp, #4]
    eae4:	e08d      	b.n	ec02 <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    eae6:	2200      	movs	r2, #0
    eae8:	e7b8      	b.n	ea5c <http_client_send_request+0x78>
    eaea:	2200      	movs	r2, #0
    eaec:	e7b6      	b.n	ea5c <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    eaee:	2200      	movs	r2, #0
    eaf0:	23d4      	movs	r3, #212	; 0xd4
    eaf2:	50e2      	str	r2, [r4, r3]
    eaf4:	e7d0      	b.n	ea98 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    eaf6:	0020      	movs	r0, r4
    eaf8:	3070      	adds	r0, #112	; 0x70
    eafa:	0029      	movs	r1, r5
    eafc:	4b4a      	ldr	r3, [pc, #296]	; (ec28 <http_client_send_request+0x244>)
    eafe:	4798      	blx	r3
    eb00:	e7da      	b.n	eab8 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    eb02:	0029      	movs	r1, r5
    eb04:	0020      	movs	r0, r4
    eb06:	3071      	adds	r0, #113	; 0x71
    eb08:	4b47      	ldr	r3, [pc, #284]	; (ec28 <http_client_send_request+0x244>)
    eb0a:	4798      	blx	r3
    eb0c:	e7d4      	b.n	eab8 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    eb0e:	0020      	movs	r0, r4
    eb10:	30b0      	adds	r0, #176	; 0xb0
    eb12:	2218      	movs	r2, #24
    eb14:	2100      	movs	r1, #0
    eb16:	4b45      	ldr	r3, [pc, #276]	; (ec2c <http_client_send_request+0x248>)
    eb18:	4798      	blx	r3
    eb1a:	e7d6      	b.n	eaca <http_client_send_request+0xe6>
		if (!reconnect) {
    eb1c:	9b01      	ldr	r3, [sp, #4]
    eb1e:	2b00      	cmp	r3, #0
    eb20:	d06f      	beq.n	ec02 <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    eb22:	2100      	movs	r1, #0
    eb24:	0020      	movs	r0, r4
    eb26:	4b42      	ldr	r3, [pc, #264]	; (ec30 <http_client_send_request+0x24c>)
    eb28:	4798      	blx	r3
		if (module->config.tls) {
    eb2a:	2352      	movs	r3, #82	; 0x52
    eb2c:	5ce2      	ldrb	r2, [r4, r3]
    eb2e:	1e53      	subs	r3, r2, #1
    eb30:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    eb32:	b2d2      	uxtb	r2, r2
    eb34:	2101      	movs	r1, #1
    eb36:	2002      	movs	r0, #2
    eb38:	4b3e      	ldr	r3, [pc, #248]	; (ec34 <http_client_send_request+0x250>)
    eb3a:	4798      	blx	r3
    eb3c:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    eb3e:	2800      	cmp	r0, #0
    eb40:	db43      	blt.n	ebca <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    eb42:	0080      	lsls	r0, r0, #2
    eb44:	4b3c      	ldr	r3, [pc, #240]	; (ec38 <http_client_send_request+0x254>)
    eb46:	50c4      	str	r4, [r0, r3]
    eb48:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    eb4a:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    eb4c:	2620      	movs	r6, #32
			isv6 = 1;
    eb4e:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    eb50:	2730      	movs	r7, #48	; 0x30
    eb52:	e00c      	b.n	eb6e <http_client_send_request+0x18a>
		if (!reconnect) {
    eb54:	9b01      	ldr	r3, [sp, #4]
    eb56:	2b00      	cmp	r3, #0
    eb58:	d1e3      	bne.n	eb22 <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    eb5a:	3303      	adds	r3, #3
    eb5c:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    eb5e:	0020      	movs	r0, r4
    eb60:	4b36      	ldr	r3, [pc, #216]	; (ec3c <http_client_send_request+0x258>)
    eb62:	4798      	blx	r3
			break;
    eb64:	e04d      	b.n	ec02 <http_client_send_request+0x21e>
			if (isv6) {
    eb66:	2900      	cmp	r1, #0
    eb68:	d001      	beq.n	eb6e <http_client_send_request+0x18a>
    eb6a:	e012      	b.n	eb92 <http_client_send_request+0x1ae>
			isv6 = 1;
    eb6c:	0001      	movs	r1, r0
	while (*host != '\0') {
    eb6e:	782a      	ldrb	r2, [r5, #0]
    eb70:	2a00      	cmp	r2, #0
    eb72:	d02e      	beq.n	ebd2 <http_client_send_request+0x1ee>
		ch = *host++;
    eb74:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    eb76:	0013      	movs	r3, r2
    eb78:	43b3      	bics	r3, r6
    eb7a:	3b41      	subs	r3, #65	; 0x41
    eb7c:	2b05      	cmp	r3, #5
    eb7e:	d9f5      	bls.n	eb6c <http_client_send_request+0x188>
    eb80:	2a3a      	cmp	r2, #58	; 0x3a
    eb82:	d00a      	beq.n	eb9a <http_client_send_request+0x1b6>
    eb84:	2a2f      	cmp	r2, #47	; 0x2f
    eb86:	d00a      	beq.n	eb9e <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    eb88:	2a2e      	cmp	r2, #46	; 0x2e
    eb8a:	d0ec      	beq.n	eb66 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    eb8c:	403a      	ands	r2, r7
    eb8e:	2a30      	cmp	r2, #48	; 0x30
    eb90:	d0ed      	beq.n	eb6e <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    eb92:	9802      	ldr	r0, [sp, #8]
    eb94:	4b2a      	ldr	r3, [pc, #168]	; (ec40 <http_client_send_request+0x25c>)
    eb96:	4798      	blx	r3
    eb98:	e02f      	b.n	ebfa <http_client_send_request+0x216>
			isv6 = 1;
    eb9a:	0001      	movs	r1, r0
    eb9c:	e7e7      	b.n	eb6e <http_client_send_request+0x18a>
    eb9e:	0001      	movs	r1, r0
    eba0:	e7e5      	b.n	eb6e <http_client_send_request+0x18a>
		return -EINVAL;
    eba2:	2316      	movs	r3, #22
    eba4:	425b      	negs	r3, r3
    eba6:	9301      	str	r3, [sp, #4]
    eba8:	e02b      	b.n	ec02 <http_client_send_request+0x21e>
		return -EBUSY;
    ebaa:	2310      	movs	r3, #16
    ebac:	425b      	negs	r3, r3
    ebae:	9301      	str	r3, [sp, #4]
    ebb0:	e027      	b.n	ec02 <http_client_send_request+0x21e>
		return -EINVAL;
    ebb2:	2316      	movs	r3, #22
    ebb4:	425b      	negs	r3, r3
    ebb6:	9301      	str	r3, [sp, #4]
    ebb8:	e023      	b.n	ec02 <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    ebba:	235b      	movs	r3, #91	; 0x5b
    ebbc:	425b      	negs	r3, r3
    ebbe:	9301      	str	r3, [sp, #4]
    ebc0:	e01f      	b.n	ec02 <http_client_send_request+0x21e>
			return -ENOMEM;
    ebc2:	230c      	movs	r3, #12
    ebc4:	425b      	negs	r3, r3
    ebc6:	9301      	str	r3, [sp, #4]
    ebc8:	e01b      	b.n	ec02 <http_client_send_request+0x21e>
			return -ENOSPC;
    ebca:	231c      	movs	r3, #28
    ebcc:	425b      	negs	r3, r3
    ebce:	9301      	str	r3, [sp, #4]
    ebd0:	e017      	b.n	ec02 <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    ebd2:	2302      	movs	r3, #2
    ebd4:	aa04      	add	r2, sp, #16
    ebd6:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    ebd8:	334e      	adds	r3, #78	; 0x4e
    ebda:	5ae3      	ldrh	r3, [r4, r3]
    ebdc:	021a      	lsls	r2, r3, #8
    ebde:	0a1b      	lsrs	r3, r3, #8
    ebe0:	4313      	orrs	r3, r2
    ebe2:	aa04      	add	r2, sp, #16
    ebe4:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    ebe6:	9802      	ldr	r0, [sp, #8]
    ebe8:	4b16      	ldr	r3, [pc, #88]	; (ec44 <http_client_send_request+0x260>)
    ebea:	4798      	blx	r3
    ebec:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    ebee:	2000      	movs	r0, #0
    ebf0:	5620      	ldrsb	r0, [r4, r0]
    ebf2:	2210      	movs	r2, #16
    ebf4:	a904      	add	r1, sp, #16
    ebf6:	4b14      	ldr	r3, [pc, #80]	; (ec48 <http_client_send_request+0x264>)
    ebf8:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    ebfa:	2301      	movs	r3, #1
    ebfc:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    ebfe:	2300      	movs	r3, #0
    ec00:	9301      	str	r3, [sp, #4]
}
    ec02:	9801      	ldr	r0, [sp, #4]
    ec04:	b008      	add	sp, #32
    ec06:	bc04      	pop	{r2}
    ec08:	4692      	mov	sl, r2
    ec0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec0c:	00014068 	.word	0x00014068
    ec10:	00011c51 	.word	0x00011c51
    ec14:	00014070 	.word	0x00014070
    ec18:	00011c43 	.word	0x00011c43
    ec1c:	000116bd 	.word	0x000116bd
    ec20:	00011c09 	.word	0x00011c09
    ec24:	000116d1 	.word	0x000116d1
    ec28:	00011bf9 	.word	0x00011bf9
    ec2c:	00011707 	.word	0x00011707
    ec30:	0000e42d 	.word	0x0000e42d
    ec34:	0000b77d 	.word	0x0000b77d
    ec38:	20000268 	.word	0x20000268
    ec3c:	0000e545 	.word	0x0000e545
    ec40:	0000bbc5 	.word	0x0000bbc5
    ec44:	0000bb59 	.word	0x0000bb59
    ec48:	0000b901 	.word	0x0000b901

0000ec4c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    ec4c:	b510      	push	{r4, lr}
	if (module == NULL) {
    ec4e:	2800      	cmp	r0, #0
    ec50:	d00d      	beq.n	ec6e <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    ec52:	6c41      	ldr	r1, [r0, #68]	; 0x44
    ec54:	6e02      	ldr	r2, [r0, #96]	; 0x60
    ec56:	4291      	cmp	r1, r2
    ec58:	d20a      	bcs.n	ec70 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    ec5a:	1a52      	subs	r2, r2, r1
    ec5c:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    ec5e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    ec60:	469c      	mov	ip, r3
    ec62:	4461      	add	r1, ip
	recv(module->sock,
    ec64:	7800      	ldrb	r0, [r0, #0]
    ec66:	b240      	sxtb	r0, r0
    ec68:	2300      	movs	r3, #0
    ec6a:	4c04      	ldr	r4, [pc, #16]	; (ec7c <_http_client_recv_packet+0x30>)
    ec6c:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    ec6e:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    ec70:	218b      	movs	r1, #139	; 0x8b
    ec72:	4249      	negs	r1, r1
    ec74:	4b02      	ldr	r3, [pc, #8]	; (ec80 <_http_client_recv_packet+0x34>)
    ec76:	4798      	blx	r3
		return;
    ec78:	e7f9      	b.n	ec6e <_http_client_recv_packet+0x22>
    ec7a:	46c0      	nop			; (mov r8, r8)
    ec7c:	0000ba29 	.word	0x0000ba29
    ec80:	0000e42d 	.word	0x0000e42d

0000ec84 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    ec84:	b570      	push	{r4, r5, r6, lr}
    ec86:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    ec88:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    ec8a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    ec8c:	1a5c      	subs	r4, r3, r1
    ec8e:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    ec90:	2c00      	cmp	r4, #0
    ec92:	dc02      	bgt.n	ec9a <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    ec94:	2300      	movs	r3, #0
    ec96:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    ec98:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    ec9a:	0022      	movs	r2, r4
    ec9c:	4b01      	ldr	r3, [pc, #4]	; (eca4 <_http_client_move_buffer+0x20>)
    ec9e:	4798      	blx	r3
		module->recved_size = remain;
    eca0:	646c      	str	r4, [r5, #68]	; 0x44
    eca2:	e7f9      	b.n	ec98 <_http_client_move_buffer+0x14>
    eca4:	000116e3 	.word	0x000116e3

0000eca8 <_http_client_handle_header>:
{
    eca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ecaa:	46ce      	mov	lr, r9
    ecac:	b500      	push	{lr}
    ecae:	b084      	sub	sp, #16
    ecb0:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
    ecb2:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    ecb4:	4b62      	ldr	r3, [pc, #392]	; (ee40 <_http_client_handle_header+0x198>)
    ecb6:	4699      	mov	r9, r3
    ecb8:	e049      	b.n	ed4e <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
    ecba:	0021      	movs	r1, r4
    ecbc:	0038      	movs	r0, r7
    ecbe:	4b61      	ldr	r3, [pc, #388]	; (ee44 <_http_client_handle_header+0x19c>)
    ecc0:	4798      	blx	r3
			return 0;
    ecc2:	2600      	movs	r6, #0
}
    ecc4:	0030      	movs	r0, r6
    ecc6:	b004      	add	sp, #16
    ecc8:	bc04      	pop	{r2}
    ecca:	4691      	mov	r9, r2
    eccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    ecce:	1ca1      	adds	r1, r4, #2
    ecd0:	0038      	movs	r0, r7
    ecd2:	4b5c      	ldr	r3, [pc, #368]	; (ee44 <_http_client_handle_header+0x19c>)
    ecd4:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    ecd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ecd8:	2b00      	cmp	r3, #0
    ecda:	d00a      	beq.n	ecf2 <_http_client_handle_header+0x4a>
    ecdc:	22e4      	movs	r2, #228	; 0xe4
    ecde:	5ab9      	ldrh	r1, [r7, r2]
    ece0:	2900      	cmp	r1, #0
    ece2:	d006      	beq.n	ecf2 <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
    ece4:	3a08      	subs	r2, #8
    ece6:	58b8      	ldr	r0, [r7, r2]
    ece8:	2800      	cmp	r0, #0
    ecea:	db07      	blt.n	ecfc <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    ecec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    ecee:	4290      	cmp	r0, r2
    ecf0:	dc10      	bgt.n	ed14 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
    ecf2:	2201      	movs	r2, #1
    ecf4:	23d8      	movs	r3, #216	; 0xd8
    ecf6:	50fa      	str	r2, [r7, r3]
			return 1;
    ecf8:	2601      	movs	r6, #1
    ecfa:	e7e3      	b.n	ecc4 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
    ecfc:	aa01      	add	r2, sp, #4
    ecfe:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    ed00:	2101      	movs	r1, #1
    ed02:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    ed04:	2100      	movs	r1, #0
    ed06:	20e0      	movs	r0, #224	; 0xe0
    ed08:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    ed0a:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    ed0c:	3102      	adds	r1, #2
    ed0e:	0038      	movs	r0, r7
    ed10:	4798      	blx	r3
    ed12:	e7ee      	b.n	ecf2 <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
    ed14:	aa01      	add	r2, sp, #4
    ed16:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    ed18:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    ed1a:	2100      	movs	r1, #0
    ed1c:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    ed1e:	20e0      	movs	r0, #224	; 0xe0
    ed20:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    ed22:	3102      	adds	r1, #2
    ed24:	0038      	movs	r0, r7
    ed26:	4798      	blx	r3
    ed28:	e7e3      	b.n	ecf2 <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    ed2a:	0020      	movs	r0, r4
    ed2c:	3010      	adds	r0, #16
    ed2e:	4b46      	ldr	r3, [pc, #280]	; (ee48 <_http_client_handle_header+0x1a0>)
    ed30:	4798      	blx	r3
    ed32:	23dc      	movs	r3, #220	; 0xdc
    ed34:	50f8      	str	r0, [r7, r3]
    ed36:	e009      	b.n	ed4c <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    ed38:	3201      	adds	r2, #1
    ed3a:	4295      	cmp	r5, r2
    ed3c:	d006      	beq.n	ed4c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    ed3e:	7813      	ldrb	r3, [r2, #0]
    ed40:	2b20      	cmp	r3, #32
    ed42:	d12b      	bne.n	ed9c <_http_client_handle_header+0xf4>
    ed44:	e7f8      	b.n	ed38 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
    ed46:	3a21      	subs	r2, #33	; 0x21
    ed48:	3389      	adds	r3, #137	; 0x89
    ed4a:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    ed4c:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    ed4e:	493f      	ldr	r1, [pc, #252]	; (ee4c <_http_client_handle_header+0x1a4>)
    ed50:	0020      	movs	r0, r4
    ed52:	47c8      	blx	r9
    ed54:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    ed56:	d0b0      	beq.n	ecba <_http_client_handle_header+0x12>
    ed58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    ed5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    ed5c:	4694      	mov	ip, r2
    ed5e:	4463      	add	r3, ip
    ed60:	4298      	cmp	r0, r3
    ed62:	d2aa      	bcs.n	ecba <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    ed64:	2202      	movs	r2, #2
    ed66:	4939      	ldr	r1, [pc, #228]	; (ee4c <_http_client_handle_header+0x1a4>)
    ed68:	0020      	movs	r0, r4
    ed6a:	4b39      	ldr	r3, [pc, #228]	; (ee50 <_http_client_handle_header+0x1a8>)
    ed6c:	4798      	blx	r3
    ed6e:	2800      	cmp	r0, #0
    ed70:	d0ad      	beq.n	ecce <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    ed72:	2210      	movs	r2, #16
    ed74:	4937      	ldr	r1, [pc, #220]	; (ee54 <_http_client_handle_header+0x1ac>)
    ed76:	0020      	movs	r0, r4
    ed78:	4b35      	ldr	r3, [pc, #212]	; (ee50 <_http_client_handle_header+0x1a8>)
    ed7a:	4798      	blx	r3
    ed7c:	2800      	cmp	r0, #0
    ed7e:	d0d4      	beq.n	ed2a <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    ed80:	2213      	movs	r2, #19
    ed82:	4935      	ldr	r1, [pc, #212]	; (ee58 <_http_client_handle_header+0x1b0>)
    ed84:	0020      	movs	r0, r4
    ed86:	4b32      	ldr	r3, [pc, #200]	; (ee50 <_http_client_handle_header+0x1a8>)
    ed88:	4798      	blx	r3
    ed8a:	1e06      	subs	r6, r0, #0
    ed8c:	d110      	bne.n	edb0 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    ed8e:	0022      	movs	r2, r4
    ed90:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    ed92:	4295      	cmp	r5, r2
    ed94:	d9da      	bls.n	ed4c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    ed96:	7ce3      	ldrb	r3, [r4, #19]
    ed98:	2b20      	cmp	r3, #32
    ed9a:	d0cd      	beq.n	ed38 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    ed9c:	2220      	movs	r2, #32
    ed9e:	4393      	bics	r3, r2
    eda0:	2b43      	cmp	r3, #67	; 0x43
    eda2:	d0d0      	beq.n	ed46 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
    eda4:	2186      	movs	r1, #134	; 0x86
    eda6:	4249      	negs	r1, r1
    eda8:	0038      	movs	r0, r7
    edaa:	4b2c      	ldr	r3, [pc, #176]	; (ee5c <_http_client_handle_header+0x1b4>)
    edac:	4798      	blx	r3
					return 0;
    edae:	e789      	b.n	ecc4 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    edb0:	220c      	movs	r2, #12
    edb2:	492b      	ldr	r1, [pc, #172]	; (ee60 <_http_client_handle_header+0x1b8>)
    edb4:	0020      	movs	r0, r4
    edb6:	4b26      	ldr	r3, [pc, #152]	; (ee50 <_http_client_handle_header+0x1a8>)
    edb8:	4798      	blx	r3
    edba:	2800      	cmp	r0, #0
    edbc:	d11d      	bne.n	edfa <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
    edbe:	0022      	movs	r2, r4
    edc0:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    edc2:	4295      	cmp	r5, r2
    edc4:	d9c2      	bls.n	ed4c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    edc6:	7b23      	ldrb	r3, [r4, #12]
    edc8:	2b20      	cmp	r3, #32
    edca:	d009      	beq.n	ede0 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    edcc:	2220      	movs	r2, #32
    edce:	4393      	bics	r3, r2
    edd0:	2b4b      	cmp	r3, #75	; 0x4b
    edd2:	d00c      	beq.n	edee <_http_client_handle_header+0x146>
					module->permanent = 0;
    edd4:	2241      	movs	r2, #65	; 0x41
    edd6:	5cbb      	ldrb	r3, [r7, r2]
    edd8:	2102      	movs	r1, #2
    edda:	438b      	bics	r3, r1
    eddc:	54bb      	strb	r3, [r7, r2]
    edde:	e7b5      	b.n	ed4c <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    ede0:	3201      	adds	r2, #1
    ede2:	4295      	cmp	r5, r2
    ede4:	d0b2      	beq.n	ed4c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    ede6:	7813      	ldrb	r3, [r2, #0]
    ede8:	2b20      	cmp	r3, #32
    edea:	d1ef      	bne.n	edcc <_http_client_handle_header+0x124>
    edec:	e7f8      	b.n	ede0 <_http_client_handle_header+0x138>
					module->permanent = 1;
    edee:	3221      	adds	r2, #33	; 0x21
    edf0:	5cbb      	ldrb	r3, [r7, r2]
    edf2:	2102      	movs	r1, #2
    edf4:	430b      	orrs	r3, r1
    edf6:	54bb      	strb	r3, [r7, r2]
    edf8:	e7a8      	b.n	ed4c <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    edfa:	2205      	movs	r2, #5
    edfc:	4919      	ldr	r1, [pc, #100]	; (ee64 <_http_client_handle_header+0x1bc>)
    edfe:	0020      	movs	r0, r4
    ee00:	4b13      	ldr	r3, [pc, #76]	; (ee50 <_http_client_handle_header+0x1a8>)
    ee02:	4798      	blx	r3
    ee04:	2800      	cmp	r0, #0
    ee06:	d1a1      	bne.n	ed4c <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    ee08:	0020      	movs	r0, r4
    ee0a:	3009      	adds	r0, #9
    ee0c:	4b0e      	ldr	r3, [pc, #56]	; (ee48 <_http_client_handle_header+0x1a0>)
    ee0e:	4798      	blx	r3
    ee10:	23e4      	movs	r3, #228	; 0xe4
    ee12:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    ee14:	2200      	movs	r2, #0
    ee16:	3b08      	subs	r3, #8
    ee18:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    ee1a:	7963      	ldrb	r3, [r4, #5]
    ee1c:	2b31      	cmp	r3, #49	; 0x31
    ee1e:	d802      	bhi.n	ee26 <_http_client_handle_header+0x17e>
    ee20:	79e3      	ldrb	r3, [r4, #7]
    ee22:	2b30      	cmp	r3, #48	; 0x30
    ee24:	d905      	bls.n	ee32 <_http_client_handle_header+0x18a>
				module->permanent = 1;
    ee26:	2241      	movs	r2, #65	; 0x41
    ee28:	5cbb      	ldrb	r3, [r7, r2]
    ee2a:	2102      	movs	r1, #2
    ee2c:	430b      	orrs	r3, r1
    ee2e:	54bb      	strb	r3, [r7, r2]
    ee30:	e78c      	b.n	ed4c <_http_client_handle_header+0xa4>
				module->permanent = 0;
    ee32:	2241      	movs	r2, #65	; 0x41
    ee34:	5cbb      	ldrb	r3, [r7, r2]
    ee36:	2102      	movs	r1, #2
    ee38:	438b      	bics	r3, r1
    ee3a:	54bb      	strb	r3, [r7, r2]
    ee3c:	e786      	b.n	ed4c <_http_client_handle_header+0xa4>
    ee3e:	46c0      	nop			; (mov r8, r8)
    ee40:	00011c73 	.word	0x00011c73
    ee44:	0000ec85 	.word	0x0000ec85
    ee48:	00011655 	.word	0x00011655
    ee4c:	000143b4 	.word	0x000143b4
    ee50:	00011c51 	.word	0x00011c51
    ee54:	00014048 	.word	0x00014048
    ee58:	00013f58 	.word	0x00013f58
    ee5c:	0000e42d 	.word	0x0000e42d
    ee60:	00013f6c 	.word	0x00013f6c
    ee64:	00013f7c 	.word	0x00013f7c

0000ee68 <_http_client_handle_entity>:
{
    ee68:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee6a:	46ce      	mov	lr, r9
    ee6c:	b500      	push	{lr}
    ee6e:	b086      	sub	sp, #24
    ee70:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    ee72:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    ee74:	23dc      	movs	r3, #220	; 0xdc
    ee76:	58c3      	ldr	r3, [r0, r3]
    ee78:	2b00      	cmp	r3, #0
    ee7a:	db69      	blt.n	ef50 <_http_client_handle_entity+0xe8>
    ee7c:	6e02      	ldr	r2, [r0, #96]	; 0x60
    ee7e:	4293      	cmp	r3, r2
    ee80:	dc2b      	bgt.n	eeda <_http_client_handle_entity+0x72>
	return 0;
    ee82:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    ee84:	6c62      	ldr	r2, [r4, #68]	; 0x44
    ee86:	4293      	cmp	r3, r2
    ee88:	dc4e      	bgt.n	ef28 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
    ee8a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    ee8c:	2e00      	cmp	r6, #0
    ee8e:	d003      	beq.n	ee98 <_http_client_handle_entity+0x30>
    ee90:	22e4      	movs	r2, #228	; 0xe4
    ee92:	5aa1      	ldrh	r1, [r4, r2]
    ee94:	2900      	cmp	r1, #0
    ee96:	d10e      	bne.n	eeb6 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
    ee98:	2300      	movs	r3, #0
    ee9a:	22d8      	movs	r2, #216	; 0xd8
    ee9c:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    ee9e:	320c      	adds	r2, #12
    eea0:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    eea2:	3341      	adds	r3, #65	; 0x41
    eea4:	5ce3      	ldrb	r3, [r4, r3]
    eea6:	079b      	lsls	r3, r3, #30
    eea8:	d40f      	bmi.n	eeca <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
    eeaa:	2100      	movs	r1, #0
    eeac:	0020      	movs	r0, r4
    eeae:	4b71      	ldr	r3, [pc, #452]	; (f074 <_http_client_handle_entity+0x20c>)
    eeb0:	4798      	blx	r3
	return 0;
    eeb2:	2000      	movs	r0, #0
    eeb4:	e038      	b.n	ef28 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
    eeb6:	aa03      	add	r2, sp, #12
    eeb8:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    eeba:	2100      	movs	r1, #0
    eebc:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    eebe:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    eec0:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    eec2:	3102      	adds	r1, #2
    eec4:	0020      	movs	r0, r4
    eec6:	47b0      	blx	r6
    eec8:	e7e6      	b.n	ee98 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    eeca:	23dc      	movs	r3, #220	; 0xdc
    eecc:	58e1      	ldr	r1, [r4, r3]
    eece:	1869      	adds	r1, r5, r1
    eed0:	0020      	movs	r0, r4
    eed2:	4b69      	ldr	r3, [pc, #420]	; (f078 <_http_client_handle_entity+0x210>)
    eed4:	4798      	blx	r3
				return module->recved_size;
    eed6:	6c60      	ldr	r0, [r4, #68]	; 0x44
    eed8:	e026      	b.n	ef28 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
    eeda:	6c42      	ldr	r2, [r0, #68]	; 0x44
    eedc:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    eede:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    eee0:	21e0      	movs	r1, #224	; 0xe0
    eee2:	5840      	ldr	r0, [r0, r1]
    eee4:	4684      	mov	ip, r0
    eee6:	4462      	add	r2, ip
    eee8:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    eeea:	4293      	cmp	r3, r2
    eeec:	dc20      	bgt.n	ef30 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
    eeee:	2300      	movs	r3, #0
    eef0:	22d8      	movs	r2, #216	; 0xd8
    eef2:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    eef4:	320c      	adds	r2, #12
    eef6:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    eef8:	3ae3      	subs	r2, #227	; 0xe3
    eefa:	ab03      	add	r3, sp, #12
    eefc:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    eefe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    ef00:	2b00      	cmp	r3, #0
    ef02:	d007      	beq.n	ef14 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    ef04:	ae03      	add	r6, sp, #12
    ef06:	0032      	movs	r2, r6
    ef08:	2103      	movs	r1, #3
    ef0a:	0020      	movs	r0, r4
    ef0c:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    ef0e:	7a33      	ldrb	r3, [r6, #8]
    ef10:	2b01      	cmp	r3, #1
    ef12:	d103      	bne.n	ef1c <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
    ef14:	2341      	movs	r3, #65	; 0x41
    ef16:	5ce3      	ldrb	r3, [r4, r3]
    ef18:	079b      	lsls	r3, r3, #30
    ef1a:	d510      	bpl.n	ef3e <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
    ef1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    ef1e:	18e9      	adds	r1, r5, r3
    ef20:	0020      	movs	r0, r4
    ef22:	4b55      	ldr	r3, [pc, #340]	; (f078 <_http_client_handle_entity+0x210>)
    ef24:	4798      	blx	r3
	return 0;
    ef26:	2000      	movs	r0, #0
}
    ef28:	b006      	add	sp, #24
    ef2a:	bc04      	pop	{r2}
    ef2c:	4691      	mov	r9, r2
    ef2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    ef30:	2200      	movs	r2, #0
    ef32:	ab03      	add	r3, sp, #12
    ef34:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    ef36:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    ef38:	2b00      	cmp	r3, #0
    ef3a:	d0ef      	beq.n	ef1c <_http_client_handle_entity+0xb4>
    ef3c:	e7e2      	b.n	ef04 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
    ef3e:	484f      	ldr	r0, [pc, #316]	; (f07c <_http_client_handle_entity+0x214>)
    ef40:	4b4f      	ldr	r3, [pc, #316]	; (f080 <_http_client_handle_entity+0x218>)
    ef42:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    ef44:	2100      	movs	r1, #0
    ef46:	0020      	movs	r0, r4
    ef48:	4b4a      	ldr	r3, [pc, #296]	; (f074 <_http_client_handle_entity+0x20c>)
    ef4a:	4798      	blx	r3
					return 0;
    ef4c:	2000      	movs	r0, #0
    ef4e:	e7eb      	b.n	ef28 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
    ef50:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    ef52:	2300      	movs	r3, #0
    ef54:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
    ef56:	26e0      	movs	r6, #224	; 0xe0
    ef58:	e00a      	b.n	ef70 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
    ef5a:	2341      	movs	r3, #65	; 0x41
    ef5c:	5ce3      	ldrb	r3, [r4, r3]
    ef5e:	079b      	lsls	r3, r3, #30
    ef60:	d51b      	bpl.n	ef9a <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
    ef62:	1ca9      	adds	r1, r5, #2
    ef64:	0020      	movs	r0, r4
    ef66:	4b44      	ldr	r3, [pc, #272]	; (f078 <_http_client_handle_entity+0x210>)
    ef68:	4798      	blx	r3
	} while(module->recved_size > 0);
    ef6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    ef6c:	2b00      	cmp	r3, #0
    ef6e:	d073      	beq.n	f058 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
    ef70:	59a3      	ldr	r3, [r4, r6]
    ef72:	2b00      	cmp	r3, #0
    ef74:	db30      	blt.n	efd8 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
    ef76:	d116      	bne.n	efa6 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
    ef78:	22d8      	movs	r2, #216	; 0xd8
    ef7a:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    ef7c:	320c      	adds	r2, #12
    ef7e:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    ef80:	3ae3      	subs	r2, #227	; 0xe3
    ef82:	4669      	mov	r1, sp
    ef84:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    ef86:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    ef88:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    ef8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    ef8c:	2b00      	cmp	r3, #0
    ef8e:	d0e4      	beq.n	ef5a <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    ef90:	466a      	mov	r2, sp
    ef92:	2103      	movs	r1, #3
    ef94:	0020      	movs	r0, r4
    ef96:	4798      	blx	r3
    ef98:	e7df      	b.n	ef5a <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
    ef9a:	2100      	movs	r1, #0
    ef9c:	0020      	movs	r0, r4
    ef9e:	4b35      	ldr	r3, [pc, #212]	; (f074 <_http_client_handle_entity+0x20c>)
    efa0:	4798      	blx	r3
	return 0;
    efa2:	2000      	movs	r0, #0
    efa4:	e7c0      	b.n	ef28 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
    efa6:	42bb      	cmp	r3, r7
    efa8:	dcdf      	bgt.n	ef6a <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
    efaa:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    efac:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    efae:	2300      	movs	r3, #0
    efb0:	466a      	mov	r2, sp
    efb2:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    efb4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    efb6:	2b00      	cmp	r3, #0
    efb8:	d002      	beq.n	efc0 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    efba:	2103      	movs	r1, #3
    efbc:	0020      	movs	r0, r4
    efbe:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    efc0:	59a3      	ldr	r3, [r4, r6]
    efc2:	1c99      	adds	r1, r3, #2
    efc4:	1869      	adds	r1, r5, r1
    efc6:	0020      	movs	r0, r4
    efc8:	4b2b      	ldr	r3, [pc, #172]	; (f078 <_http_client_handle_entity+0x210>)
    efca:	4798      	blx	r3
				length = (int)module->recved_size;
    efcc:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    efce:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    efd0:	2301      	movs	r3, #1
    efd2:	425b      	negs	r3, r3
    efd4:	51a3      	str	r3, [r4, r6]
    efd6:	e7c8      	b.n	ef6a <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
    efd8:	2300      	movs	r3, #0
    efda:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    efdc:	2f00      	cmp	r7, #0
    efde:	dd04      	ble.n	efea <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
    efe0:	782b      	ldrb	r3, [r5, #0]
    efe2:	2b0a      	cmp	r3, #10
    efe4:	d11c      	bne.n	f020 <_http_client_handle_entity+0x1b8>
					buffer++;
    efe6:	3501      	adds	r5, #1
					length--;
    efe8:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    efea:	59a3      	ldr	r3, [r4, r6]
    efec:	6e22      	ldr	r2, [r4, #96]	; 0x60
    efee:	4293      	cmp	r3, r2
    eff0:	dc39      	bgt.n	f066 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
    eff2:	2f00      	cmp	r7, #0
    eff4:	d1b9      	bne.n	ef6a <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
    eff6:	2201      	movs	r2, #1
    eff8:	4252      	negs	r2, r2
    effa:	23e0      	movs	r3, #224	; 0xe0
    effc:	50e2      	str	r2, [r4, r3]
    effe:	e7d0      	b.n	efa2 <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    f000:	001a      	movs	r2, r3
    f002:	3a61      	subs	r2, #97	; 0x61
    f004:	2a05      	cmp	r2, #5
    f006:	d818      	bhi.n	f03a <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    f008:	59a2      	ldr	r2, [r4, r6]
    f00a:	0112      	lsls	r2, r2, #4
    f00c:	18d3      	adds	r3, r2, r3
    f00e:	3b61      	subs	r3, #97	; 0x61
    f010:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    f012:	3501      	adds	r5, #1
    f014:	3f01      	subs	r7, #1
    f016:	2f00      	cmp	r7, #0
    f018:	d020      	beq.n	f05c <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
    f01a:	782b      	ldrb	r3, [r5, #0]
    f01c:	2b0a      	cmp	r3, #10
    f01e:	d0e2      	beq.n	efe6 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
    f020:	464a      	mov	r2, r9
    f022:	2a00      	cmp	r2, #0
    f024:	d1f5      	bne.n	f012 <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
    f026:	001a      	movs	r2, r3
    f028:	3a30      	subs	r2, #48	; 0x30
    f02a:	2a09      	cmp	r2, #9
    f02c:	d8e8      	bhi.n	f000 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    f02e:	59a2      	ldr	r2, [r4, r6]
    f030:	0112      	lsls	r2, r2, #4
    f032:	18d3      	adds	r3, r2, r3
    f034:	3b30      	subs	r3, #48	; 0x30
    f036:	51a3      	str	r3, [r4, r6]
    f038:	e7eb      	b.n	f012 <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    f03a:	001a      	movs	r2, r3
    f03c:	3a41      	subs	r2, #65	; 0x41
    f03e:	2a05      	cmp	r2, #5
    f040:	d805      	bhi.n	f04e <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    f042:	59a2      	ldr	r2, [r4, r6]
    f044:	0112      	lsls	r2, r2, #4
    f046:	18d3      	adds	r3, r2, r3
    f048:	3b41      	subs	r3, #65	; 0x41
    f04a:	51a3      	str	r3, [r4, r6]
    f04c:	e7e1      	b.n	f012 <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
    f04e:	3b3b      	subs	r3, #59	; 0x3b
    f050:	425a      	negs	r2, r3
    f052:	415a      	adcs	r2, r3
    f054:	4691      	mov	r9, r2
    f056:	e7dc      	b.n	f012 <_http_client_handle_entity+0x1aa>
	return 0;
    f058:	2000      	movs	r0, #0
    f05a:	e765      	b.n	ef28 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    f05c:	23e0      	movs	r3, #224	; 0xe0
    f05e:	58e3      	ldr	r3, [r4, r3]
    f060:	6e22      	ldr	r2, [r4, #96]	; 0x60
    f062:	4293      	cmp	r3, r2
    f064:	ddc7      	ble.n	eff6 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
    f066:	218b      	movs	r1, #139	; 0x8b
    f068:	4249      	negs	r1, r1
    f06a:	0020      	movs	r0, r4
    f06c:	4b01      	ldr	r3, [pc, #4]	; (f074 <_http_client_handle_entity+0x20c>)
    f06e:	4798      	blx	r3
    f070:	e797      	b.n	efa2 <_http_client_handle_entity+0x13a>
    f072:	46c0      	nop			; (mov r8, r8)
    f074:	0000e42d 	.word	0x0000e42d
    f078:	0000ec85 	.word	0x0000ec85
    f07c:	00013f54 	.word	0x00013f54
    f080:	00011985 	.word	0x00011985

0000f084 <_http_client_handle_response>:
{
    f084:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    f086:	23d8      	movs	r3, #216	; 0xd8
    f088:	58c3      	ldr	r3, [r0, r3]
    f08a:	2b00      	cmp	r3, #0
    f08c:	d003      	beq.n	f096 <_http_client_handle_response+0x12>
    f08e:	2b01      	cmp	r3, #1
    f090:	d004      	beq.n	f09c <_http_client_handle_response+0x18>
	return 0;
    f092:	2000      	movs	r0, #0
    f094:	e001      	b.n	f09a <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
    f096:	4b03      	ldr	r3, [pc, #12]	; (f0a4 <_http_client_handle_response+0x20>)
    f098:	4798      	blx	r3
}
    f09a:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    f09c:	4b02      	ldr	r3, [pc, #8]	; (f0a8 <_http_client_handle_response+0x24>)
    f09e:	4798      	blx	r3
    f0a0:	e7fb      	b.n	f09a <_http_client_handle_response+0x16>
    f0a2:	46c0      	nop			; (mov r8, r8)
    f0a4:	0000eca9 	.word	0x0000eca9
    f0a8:	0000ee69 	.word	0x0000ee69

0000f0ac <_http_client_recved_packet>:
{
    f0ac:	b570      	push	{r4, r5, r6, lr}
    f0ae:	0004      	movs	r4, r0
	module->recved_size += read_len;
    f0b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
    f0b2:	469c      	mov	ip, r3
    f0b4:	4461      	add	r1, ip
    f0b6:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    f0b8:	2358      	movs	r3, #88	; 0x58
    f0ba:	5ac3      	ldrh	r3, [r0, r3]
    f0bc:	2b00      	cmp	r3, #0
    f0be:	d105      	bne.n	f0cc <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
    f0c0:	4d05      	ldr	r5, [pc, #20]	; (f0d8 <_http_client_recved_packet+0x2c>)
    f0c2:	0020      	movs	r0, r4
    f0c4:	47a8      	blx	r5
    f0c6:	2800      	cmp	r0, #0
    f0c8:	d1fb      	bne.n	f0c2 <_http_client_recved_packet+0x16>
}
    f0ca:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    f0cc:	6c81      	ldr	r1, [r0, #72]	; 0x48
    f0ce:	6d40      	ldr	r0, [r0, #84]	; 0x54
    f0d0:	4b02      	ldr	r3, [pc, #8]	; (f0dc <_http_client_recved_packet+0x30>)
    f0d2:	4798      	blx	r3
    f0d4:	e7f4      	b.n	f0c0 <_http_client_recved_packet+0x14>
    f0d6:	46c0      	nop			; (mov r8, r8)
    f0d8:	0000f085 	.word	0x0000f085
    f0dc:	0000f481 	.word	0x0000f481

0000f0e0 <http_client_socket_event_handler>:
{
    f0e0:	b510      	push	{r4, lr}
    f0e2:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
    f0e4:	0080      	lsls	r0, r0, #2
    f0e6:	4b65      	ldr	r3, [pc, #404]	; (f27c <http_client_socket_event_handler+0x19c>)
    f0e8:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    f0ea:	2c00      	cmp	r4, #0
    f0ec:	d006      	beq.n	f0fc <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
    f0ee:	2906      	cmp	r1, #6
    f0f0:	d051      	beq.n	f196 <http_client_socket_event_handler+0xb6>
    f0f2:	2907      	cmp	r1, #7
    f0f4:	d100      	bne.n	f0f8 <http_client_socket_event_handler+0x18>
    f0f6:	e08a      	b.n	f20e <http_client_socket_event_handler+0x12e>
    f0f8:	2905      	cmp	r1, #5
    f0fa:	d001      	beq.n	f100 <http_client_socket_event_handler+0x20>
}
    f0fc:	b004      	add	sp, #16
    f0fe:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    f100:	2301      	movs	r3, #1
    f102:	56d3      	ldrsb	r3, [r2, r3]
    f104:	1e1a      	subs	r2, r3, #0
    f106:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    f108:	db15      	blt.n	f136 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
    f10a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    f10c:	2b00      	cmp	r3, #0
    f10e:	d003      	beq.n	f118 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    f110:	aa01      	add	r2, sp, #4
    f112:	2100      	movs	r1, #0
    f114:	0020      	movs	r0, r4
    f116:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    f118:	2303      	movs	r3, #3
    f11a:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    f11c:	3355      	adds	r3, #85	; 0x55
    f11e:	5ae2      	ldrh	r2, [r4, r3]
    f120:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    f122:	6d60      	ldr	r0, [r4, #84]	; 0x54
    f124:	4b56      	ldr	r3, [pc, #344]	; (f280 <http_client_socket_event_handler+0x1a0>)
    f126:	4798      	blx	r3
    		_http_client_recv_packet(module);
    f128:	0020      	movs	r0, r4
    f12a:	4b56      	ldr	r3, [pc, #344]	; (f284 <http_client_socket_event_handler+0x1a4>)
    f12c:	4798      	blx	r3
			_http_client_request(module);
    f12e:	0020      	movs	r0, r4
    f130:	4b55      	ldr	r3, [pc, #340]	; (f288 <http_client_socket_event_handler+0x1a8>)
    f132:	4798      	blx	r3
    f134:	e7e2      	b.n	f0fc <http_client_socket_event_handler+0x1c>
	switch (err) {
    f136:	330e      	adds	r3, #14
    f138:	b2d9      	uxtb	r1, r3
    f13a:	290e      	cmp	r1, #14
    f13c:	d81e      	bhi.n	f17c <http_client_socket_event_handler+0x9c>
    f13e:	008b      	lsls	r3, r1, #2
    f140:	4952      	ldr	r1, [pc, #328]	; (f28c <http_client_socket_event_handler+0x1ac>)
    f142:	58cb      	ldr	r3, [r1, r3]
    f144:	469f      	mov	pc, r3
			return -ENOENT;
    f146:	2102      	movs	r1, #2
    f148:	4249      	negs	r1, r1
    f14a:	e01d      	b.n	f188 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
    f14c:	2170      	movs	r1, #112	; 0x70
    f14e:	4249      	negs	r1, r1
    f150:	e01a      	b.n	f188 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    f152:	210c      	movs	r1, #12
    f154:	4249      	negs	r1, r1
    f156:	e017      	b.n	f188 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
    f158:	2116      	movs	r1, #22
    f15a:	4249      	negs	r1, r1
    f15c:	e014      	b.n	f188 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    f15e:	210c      	movs	r1, #12
    f160:	4249      	negs	r1, r1
    f162:	e011      	b.n	f188 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
    f164:	2179      	movs	r1, #121	; 0x79
    f166:	4249      	negs	r1, r1
    f168:	e00e      	b.n	f188 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
    f16a:	2168      	movs	r1, #104	; 0x68
    f16c:	4249      	negs	r1, r1
    f16e:	e00b      	b.n	f188 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
    f170:	210b      	movs	r1, #11
    f172:	4249      	negs	r1, r1
    f174:	e008      	b.n	f188 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
    f176:	2110      	movs	r1, #16
    f178:	4249      	negs	r1, r1
    f17a:	e005      	b.n	f188 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
    f17c:	2a00      	cmp	r2, #0
    f17e:	db07      	blt.n	f190 <http_client_socket_event_handler+0xb0>
			return 0;
    f180:	2100      	movs	r1, #0
    f182:	e001      	b.n	f188 <http_client_socket_event_handler+0xa8>
			return -EIO;
    f184:	2105      	movs	r1, #5
    f186:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    f188:	0020      	movs	r0, r4
    f18a:	4b41      	ldr	r3, [pc, #260]	; (f290 <http_client_socket_event_handler+0x1b0>)
    f18c:	4798      	blx	r3
    f18e:	e7b5      	b.n	f0fc <http_client_socket_event_handler+0x1c>
				return -EIO;
    f190:	2105      	movs	r1, #5
    f192:	4249      	negs	r1, r1
    f194:	e7f8      	b.n	f188 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
    f196:	2304      	movs	r3, #4
    f198:	5ed1      	ldrsh	r1, [r2, r3]
    f19a:	2900      	cmp	r1, #0
    f19c:	dd06      	ble.n	f1ac <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    f19e:	0020      	movs	r0, r4
    f1a0:	4b3c      	ldr	r3, [pc, #240]	; (f294 <http_client_socket_event_handler+0x1b4>)
    f1a2:	4798      	blx	r3
		_http_client_recv_packet(module);
    f1a4:	0020      	movs	r0, r4
    f1a6:	4b37      	ldr	r3, [pc, #220]	; (f284 <http_client_socket_event_handler+0x1a4>)
    f1a8:	4798      	blx	r3
		break;
    f1aa:	e7a7      	b.n	f0fc <http_client_socket_event_handler+0x1c>
	switch (err) {
    f1ac:	000b      	movs	r3, r1
    f1ae:	330e      	adds	r3, #14
    f1b0:	b29a      	uxth	r2, r3
    f1b2:	2a0e      	cmp	r2, #14
    f1b4:	d81e      	bhi.n	f1f4 <http_client_socket_event_handler+0x114>
    f1b6:	0093      	lsls	r3, r2, #2
    f1b8:	4a37      	ldr	r2, [pc, #220]	; (f298 <http_client_socket_event_handler+0x1b8>)
    f1ba:	58d3      	ldr	r3, [r2, r3]
    f1bc:	469f      	mov	pc, r3
			return -ENOENT;
    f1be:	2102      	movs	r1, #2
    f1c0:	4249      	negs	r1, r1
    f1c2:	e01d      	b.n	f200 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    f1c4:	2170      	movs	r1, #112	; 0x70
    f1c6:	4249      	negs	r1, r1
    f1c8:	e01a      	b.n	f200 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    f1ca:	210c      	movs	r1, #12
    f1cc:	4249      	negs	r1, r1
    f1ce:	e017      	b.n	f200 <http_client_socket_event_handler+0x120>
			return -EINVAL;
    f1d0:	2116      	movs	r1, #22
    f1d2:	4249      	negs	r1, r1
    f1d4:	e014      	b.n	f200 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    f1d6:	210c      	movs	r1, #12
    f1d8:	4249      	negs	r1, r1
    f1da:	e011      	b.n	f200 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    f1dc:	2179      	movs	r1, #121	; 0x79
    f1de:	4249      	negs	r1, r1
    f1e0:	e00e      	b.n	f200 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    f1e2:	2168      	movs	r1, #104	; 0x68
    f1e4:	4249      	negs	r1, r1
    f1e6:	e00b      	b.n	f200 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    f1e8:	210b      	movs	r1, #11
    f1ea:	4249      	negs	r1, r1
    f1ec:	e008      	b.n	f200 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    f1ee:	2110      	movs	r1, #16
    f1f0:	4249      	negs	r1, r1
    f1f2:	e005      	b.n	f200 <http_client_socket_event_handler+0x120>
			if (err < 0) {
    f1f4:	2900      	cmp	r1, #0
    f1f6:	db07      	blt.n	f208 <http_client_socket_event_handler+0x128>
			return 0;
    f1f8:	2100      	movs	r1, #0
    f1fa:	e001      	b.n	f200 <http_client_socket_event_handler+0x120>
			return -EIO;
    f1fc:	2105      	movs	r1, #5
    f1fe:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    f200:	0020      	movs	r0, r4
    f202:	4b23      	ldr	r3, [pc, #140]	; (f290 <http_client_socket_event_handler+0x1b0>)
    f204:	4798      	blx	r3
    f206:	e7cd      	b.n	f1a4 <http_client_socket_event_handler+0xc4>
				return -EIO;
    f208:	2105      	movs	r1, #5
    f20a:	4249      	negs	r1, r1
    f20c:	e7f8      	b.n	f200 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    f20e:	2300      	movs	r3, #0
    f210:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    f212:	2b00      	cmp	r3, #0
    f214:	db08      	blt.n	f228 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    f216:	0020      	movs	r0, r4
    f218:	4b1b      	ldr	r3, [pc, #108]	; (f288 <http_client_socket_event_handler+0x1a8>)
    f21a:	4798      	blx	r3
		module->sending = 0;
    f21c:	2241      	movs	r2, #65	; 0x41
    f21e:	5ca3      	ldrb	r3, [r4, r2]
    f220:	2101      	movs	r1, #1
    f222:	438b      	bics	r3, r1
    f224:	54a3      	strb	r3, [r4, r2]
    	break;
    f226:	e769      	b.n	f0fc <http_client_socket_event_handler+0x1c>
	switch (err) {
    f228:	330e      	adds	r3, #14
    f22a:	b29a      	uxth	r2, r3
    f22c:	2a0d      	cmp	r2, #13
    f22e:	d81e      	bhi.n	f26e <http_client_socket_event_handler+0x18e>
    f230:	0093      	lsls	r3, r2, #2
    f232:	4a1a      	ldr	r2, [pc, #104]	; (f29c <http_client_socket_event_handler+0x1bc>)
    f234:	58d3      	ldr	r3, [r2, r3]
    f236:	469f      	mov	pc, r3
			return -ENOENT;
    f238:	2102      	movs	r1, #2
    f23a:	4249      	negs	r1, r1
    f23c:	e019      	b.n	f272 <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    f23e:	2170      	movs	r1, #112	; 0x70
    f240:	4249      	negs	r1, r1
    f242:	e016      	b.n	f272 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    f244:	210c      	movs	r1, #12
    f246:	4249      	negs	r1, r1
    f248:	e013      	b.n	f272 <http_client_socket_event_handler+0x192>
			return -EINVAL;
    f24a:	2116      	movs	r1, #22
    f24c:	4249      	negs	r1, r1
    f24e:	e010      	b.n	f272 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    f250:	210c      	movs	r1, #12
    f252:	4249      	negs	r1, r1
    f254:	e00d      	b.n	f272 <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    f256:	2179      	movs	r1, #121	; 0x79
    f258:	4249      	negs	r1, r1
    f25a:	e00a      	b.n	f272 <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    f25c:	2168      	movs	r1, #104	; 0x68
    f25e:	4249      	negs	r1, r1
    f260:	e007      	b.n	f272 <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    f262:	210b      	movs	r1, #11
    f264:	4249      	negs	r1, r1
    f266:	e004      	b.n	f272 <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    f268:	2110      	movs	r1, #16
    f26a:	4249      	negs	r1, r1
    f26c:	e001      	b.n	f272 <http_client_socket_event_handler+0x192>
			return -EIO;
    f26e:	2105      	movs	r1, #5
    f270:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    f272:	0020      	movs	r0, r4
    f274:	4b06      	ldr	r3, [pc, #24]	; (f290 <http_client_socket_event_handler+0x1b0>)
    f276:	4798      	blx	r3
    f278:	e7d0      	b.n	f21c <http_client_socket_event_handler+0x13c>
    f27a:	46c0      	nop			; (mov r8, r8)
    f27c:	20000268 	.word	0x20000268
    f280:	0000f455 	.word	0x0000f455
    f284:	0000ec4d 	.word	0x0000ec4d
    f288:	0000e545 	.word	0x0000e545
    f28c:	00013e94 	.word	0x00013e94
    f290:	0000e42d 	.word	0x0000e42d
    f294:	0000f0ad 	.word	0x0000f0ad
    f298:	00013ed0 	.word	0x00013ed0
    f29c:	00013f0c 	.word	0x00013f0c

0000f2a0 <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    f2a0:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    f2a2:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    f2a4:	2200      	movs	r2, #0
    f2a6:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    f2a8:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    f2aa:	9b00      	ldr	r3, [sp, #0]
    f2ac:	60c3      	str	r3, [r0, #12]
}
    f2ae:	4770      	bx	lr

0000f2b0 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    f2b0:	b510      	push	{r4, lr}
    f2b2:	0004      	movs	r4, r0
	if(writer->written > 0) {
    f2b4:	6842      	ldr	r2, [r0, #4]
    f2b6:	2a00      	cmp	r2, #0
    f2b8:	d100      	bne.n	f2bc <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    f2ba:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    f2bc:	6901      	ldr	r1, [r0, #16]
    f2be:	68c0      	ldr	r0, [r0, #12]
    f2c0:	68a3      	ldr	r3, [r4, #8]
    f2c2:	4798      	blx	r3
		writer->written = 0;
    f2c4:	2300      	movs	r3, #0
    f2c6:	6063      	str	r3, [r4, #4]
}
    f2c8:	e7f7      	b.n	f2ba <stream_writer_send_remain+0xa>
	...

0000f2cc <stream_writer_send_8>:
{
    f2cc:	b570      	push	{r4, r5, r6, lr}
    f2ce:	0004      	movs	r4, r0
    f2d0:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    f2d2:	6803      	ldr	r3, [r0, #0]
    f2d4:	6842      	ldr	r2, [r0, #4]
    f2d6:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    f2d8:	2b00      	cmp	r3, #0
    f2da:	dd05      	ble.n	f2e8 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    f2dc:	6922      	ldr	r2, [r4, #16]
    f2de:	6863      	ldr	r3, [r4, #4]
    f2e0:	1c59      	adds	r1, r3, #1
    f2e2:	6061      	str	r1, [r4, #4]
    f2e4:	54d5      	strb	r5, [r2, r3]
}
    f2e6:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    f2e8:	4b01      	ldr	r3, [pc, #4]	; (f2f0 <stream_writer_send_8+0x24>)
    f2ea:	4798      	blx	r3
    f2ec:	e7f6      	b.n	f2dc <stream_writer_send_8+0x10>
    f2ee:	46c0      	nop			; (mov r8, r8)
    f2f0:	0000f2b1 	.word	0x0000f2b1

0000f2f4 <stream_writer_send_16BE>:
{
    f2f4:	b570      	push	{r4, r5, r6, lr}
    f2f6:	0006      	movs	r6, r0
    f2f8:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    f2fa:	1209      	asrs	r1, r1, #8
    f2fc:	4d02      	ldr	r5, [pc, #8]	; (f308 <stream_writer_send_16BE+0x14>)
    f2fe:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    f300:	b261      	sxtb	r1, r4
    f302:	0030      	movs	r0, r6
    f304:	47a8      	blx	r5
}
    f306:	bd70      	pop	{r4, r5, r6, pc}
    f308:	0000f2cd 	.word	0x0000f2cd

0000f30c <stream_writer_send_buffer>:
{
    f30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f30e:	0006      	movs	r6, r0
    f310:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    f312:	2a00      	cmp	r2, #0
    f314:	d008      	beq.n	f328 <stream_writer_send_buffer+0x1c>
    f316:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    f318:	4f04      	ldr	r7, [pc, #16]	; (f32c <stream_writer_send_buffer+0x20>)
    f31a:	2100      	movs	r1, #0
    f31c:	5661      	ldrsb	r1, [r4, r1]
    f31e:	0030      	movs	r0, r6
    f320:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    f322:	3401      	adds	r4, #1
    f324:	42a5      	cmp	r5, r4
    f326:	d1f8      	bne.n	f31a <stream_writer_send_buffer+0xe>
}
    f328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f32a:	46c0      	nop			; (mov r8, r8)
    f32c:	0000f2cd 	.word	0x0000f2cd

0000f330 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    f330:	4a02      	ldr	r2, [pc, #8]	; (f33c <sw_timer_tcc_callback+0xc>)
    f332:	6813      	ldr	r3, [r2, #0]
    f334:	3301      	adds	r3, #1
    f336:	6013      	str	r3, [r2, #0]
}
    f338:	4770      	bx	lr
    f33a:	46c0      	nop			; (mov r8, r8)
    f33c:	20000284 	.word	0x20000284

0000f340 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    f340:	2364      	movs	r3, #100	; 0x64
    f342:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    f344:	2300      	movs	r3, #0
    f346:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    f348:	7043      	strb	r3, [r0, #1]
}
    f34a:	4770      	bx	lr

0000f34c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    f34c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f34e:	46c6      	mov	lr, r8
    f350:	b500      	push	{lr}
    f352:	b0ac      	sub	sp, #176	; 0xb0
    f354:	000d      	movs	r5, r1
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    f356:	466e      	mov	r6, sp
    f358:	4b1d      	ldr	r3, [pc, #116]	; (f3d0 <sw_timer_init+0x84>)
    f35a:	466a      	mov	r2, sp
    f35c:	cb92      	ldmia	r3!, {r1, r4, r7}
    f35e:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    f360:	886b      	ldrh	r3, [r5, #2]
    f362:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    f364:	3014      	adds	r0, #20
    f366:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    f368:	782b      	ldrb	r3, [r5, #0]
    f36a:	009b      	lsls	r3, r3, #2
    f36c:	5999      	ldr	r1, [r3, r6]
    f36e:	0017      	movs	r7, r2
    f370:	0010      	movs	r0, r2
    f372:	4b18      	ldr	r3, [pc, #96]	; (f3d4 <sw_timer_init+0x88>)
    f374:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    f376:	2000      	movs	r0, #0
    f378:	4b17      	ldr	r3, [pc, #92]	; (f3d8 <sw_timer_init+0x8c>)
    f37a:	4798      	blx	r3
    f37c:	4b17      	ldr	r3, [pc, #92]	; (f3dc <sw_timer_init+0x90>)
    f37e:	7a1b      	ldrb	r3, [r3, #8]
    f380:	b2db      	uxtb	r3, r3
    f382:	40d8      	lsrs	r0, r3
    f384:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    f386:	8869      	ldrh	r1, [r5, #2]
    f388:	20fa      	movs	r0, #250	; 0xfa
    f38a:	0200      	lsls	r0, r0, #8
    f38c:	4b14      	ldr	r3, [pc, #80]	; (f3e0 <sw_timer_init+0x94>)
    f38e:	4798      	blx	r3
    f390:	0001      	movs	r1, r0
    f392:	4640      	mov	r0, r8
    f394:	4b13      	ldr	r3, [pc, #76]	; (f3e4 <sw_timer_init+0x98>)
    f396:	4798      	blx	r3
    f398:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    f39a:	2305      	movs	r3, #5
    f39c:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    f39e:	782b      	ldrb	r3, [r5, #0]
    f3a0:	009b      	lsls	r3, r3, #2
    f3a2:	5999      	ldr	r1, [r3, r6]
    f3a4:	003a      	movs	r2, r7
    f3a6:	0020      	movs	r0, r4
    f3a8:	4b0f      	ldr	r3, [pc, #60]	; (f3e8 <sw_timer_init+0x9c>)
    f3aa:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    f3ac:	786a      	ldrb	r2, [r5, #1]
    f3ae:	3208      	adds	r2, #8
    f3b0:	b2d2      	uxtb	r2, r2
    f3b2:	490e      	ldr	r1, [pc, #56]	; (f3ec <sw_timer_init+0xa0>)
    f3b4:	0020      	movs	r0, r4
    f3b6:	4b0e      	ldr	r3, [pc, #56]	; (f3f0 <sw_timer_init+0xa4>)
    f3b8:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    f3ba:	7869      	ldrb	r1, [r5, #1]
    f3bc:	3108      	adds	r1, #8
    f3be:	b2c9      	uxtb	r1, r1
    f3c0:	0020      	movs	r0, r4
    f3c2:	4b0c      	ldr	r3, [pc, #48]	; (f3f4 <sw_timer_init+0xa8>)
    f3c4:	4798      	blx	r3
}
    f3c6:	b02c      	add	sp, #176	; 0xb0
    f3c8:	bc04      	pop	{r2}
    f3ca:	4690      	mov	r8, r2
    f3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3ce:	46c0      	nop			; (mov r8, r8)
    f3d0:	0001407c 	.word	0x0001407c
    f3d4:	0000daf1 	.word	0x0000daf1
    f3d8:	0000d855 	.word	0x0000d855
    f3dc:	40000400 	.word	0x40000400
    f3e0:	00011429 	.word	0x00011429
    f3e4:	00011315 	.word	0x00011315
    f3e8:	0000dc3d 	.word	0x0000dc3d
    f3ec:	0000f331 	.word	0x0000f331
    f3f0:	0000e049 	.word	0x0000e049
    f3f4:	0000e061 	.word	0x0000e061

0000f3f8 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    f3f8:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    f3fa:	2102      	movs	r1, #2
    f3fc:	6893      	ldr	r3, [r2, #8]
    f3fe:	4219      	tst	r1, r3
    f400:	d1fc      	bne.n	f3fc <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    f402:	6813      	ldr	r3, [r2, #0]
    f404:	2102      	movs	r1, #2
    f406:	430b      	orrs	r3, r1
    f408:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    f40a:	4770      	bx	lr

0000f40c <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    f40c:	b570      	push	{r4, r5, r6, lr}
    f40e:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    f410:	7805      	ldrb	r5, [r0, #0]
    f412:	07e8      	lsls	r0, r5, #31
    f414:	d502      	bpl.n	f41c <sw_timer_register_callback+0x10>
			handler->used = 1;
			return index;
		}
	}

	return -1;
    f416:	2001      	movs	r0, #1
    f418:	4240      	negs	r0, r0
}
    f41a:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    f41c:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    f41e:	0029      	movs	r1, r5
    f420:	2002      	movs	r0, #2
    f422:	4381      	bics	r1, r0
    f424:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    f426:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    f428:	6d61      	ldr	r1, [r4, #84]	; 0x54
    f42a:	0018      	movs	r0, r3
    f42c:	4b04      	ldr	r3, [pc, #16]	; (f440 <sw_timer_register_callback+0x34>)
    f42e:	4798      	blx	r3
    f430:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    f432:	7823      	ldrb	r3, [r4, #0]
    f434:	2201      	movs	r2, #1
    f436:	4313      	orrs	r3, r2
    f438:	7023      	strb	r3, [r4, #0]
			return index;
    f43a:	2000      	movs	r0, #0
    f43c:	e7ed      	b.n	f41a <sw_timer_register_callback+0xe>
    f43e:	46c0      	nop			; (mov r8, r8)
    f440:	00011315 	.word	0x00011315

0000f444 <sw_timer_unregister_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->used = 0;
    f444:	008b      	lsls	r3, r1, #2
    f446:	1859      	adds	r1, r3, r1
    f448:	0089      	lsls	r1, r1, #2
    f44a:	5c0b      	ldrb	r3, [r1, r0]
    f44c:	2201      	movs	r2, #1
    f44e:	4393      	bics	r3, r2
    f450:	540b      	strb	r3, [r1, r0]
}
    f452:	4770      	bx	lr

0000f454 <sw_timer_enable_callback>:

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    f454:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    f456:	008b      	lsls	r3, r1, #2
    f458:	185d      	adds	r5, r3, r1
    f45a:	00ad      	lsls	r5, r5, #2
    f45c:	5c29      	ldrb	r1, [r5, r0]
    f45e:	2602      	movs	r6, #2
    f460:	4331      	orrs	r1, r6
    f462:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    f464:	1944      	adds	r4, r0, r5
    f466:	6d41      	ldr	r1, [r0, #84]	; 0x54
    f468:	0010      	movs	r0, r2
    f46a:	4b03      	ldr	r3, [pc, #12]	; (f478 <sw_timer_enable_callback+0x24>)
    f46c:	4798      	blx	r3
    f46e:	4b03      	ldr	r3, [pc, #12]	; (f47c <sw_timer_enable_callback+0x28>)
    f470:	681b      	ldr	r3, [r3, #0]
    f472:	18c0      	adds	r0, r0, r3
    f474:	6120      	str	r0, [r4, #16]
}
    f476:	bd70      	pop	{r4, r5, r6, pc}
    f478:	00011315 	.word	0x00011315
    f47c:	20000284 	.word	0x20000284

0000f480 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    f480:	008b      	lsls	r3, r1, #2
    f482:	1859      	adds	r1, r3, r1
    f484:	0089      	lsls	r1, r1, #2
    f486:	5c0b      	ldrb	r3, [r1, r0]
    f488:	2202      	movs	r2, #2
    f48a:	4393      	bics	r3, r2
    f48c:	540b      	strb	r3, [r1, r0]
}
    f48e:	4770      	bx	lr

0000f490 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    f490:	b570      	push	{r4, r5, r6, lr}
    f492:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    f494:	7803      	ldrb	r3, [r0, #0]
    f496:	07db      	lsls	r3, r3, #31
    f498:	d507      	bpl.n	f4aa <sw_timer_task+0x1a>
    f49a:	7803      	ldrb	r3, [r0, #0]
    f49c:	079b      	lsls	r3, r3, #30
    f49e:	d504      	bpl.n	f4aa <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    f4a0:	4b11      	ldr	r3, [pc, #68]	; (f4e8 <sw_timer_task+0x58>)
    f4a2:	681b      	ldr	r3, [r3, #0]
    f4a4:	6902      	ldr	r2, [r0, #16]
    f4a6:	1ad3      	subs	r3, r2, r3
    f4a8:	d400      	bmi.n	f4ac <sw_timer_task+0x1c>
				handler->busy = 0;
			}
		}
	}

}
    f4aa:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    f4ac:	7803      	ldrb	r3, [r0, #0]
    f4ae:	075b      	lsls	r3, r3, #29
    f4b0:	d4fb      	bmi.n	f4aa <sw_timer_task+0x1a>
				handler->busy = 1;
    f4b2:	7803      	ldrb	r3, [r0, #0]
    f4b4:	2204      	movs	r2, #4
    f4b6:	4313      	orrs	r3, r2
    f4b8:	7003      	strb	r3, [r0, #0]
				handler->callback(module_inst, index, handler->context, handler->period);
    f4ba:	68c3      	ldr	r3, [r0, #12]
    f4bc:	6882      	ldr	r2, [r0, #8]
    f4be:	2100      	movs	r1, #0
    f4c0:	6845      	ldr	r5, [r0, #4]
    f4c2:	47a8      	blx	r5
				if (handler->period > 0) {
    f4c4:	68e3      	ldr	r3, [r4, #12]
    f4c6:	2b00      	cmp	r3, #0
    f4c8:	d008      	beq.n	f4dc <sw_timer_task+0x4c>
					handler->expire_time = sw_timer_tick + handler->period;
    f4ca:	4a07      	ldr	r2, [pc, #28]	; (f4e8 <sw_timer_task+0x58>)
    f4cc:	6812      	ldr	r2, [r2, #0]
    f4ce:	18d3      	adds	r3, r2, r3
    f4d0:	6123      	str	r3, [r4, #16]
				handler->busy = 0;
    f4d2:	7823      	ldrb	r3, [r4, #0]
    f4d4:	2204      	movs	r2, #4
    f4d6:	4393      	bics	r3, r2
    f4d8:	7023      	strb	r3, [r4, #0]
}
    f4da:	e7e6      	b.n	f4aa <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    f4dc:	7823      	ldrb	r3, [r4, #0]
    f4de:	2202      	movs	r2, #2
    f4e0:	4393      	bics	r3, r2
    f4e2:	7023      	strb	r3, [r4, #0]
    f4e4:	e7f5      	b.n	f4d2 <sw_timer_task+0x42>
    f4e6:	46c0      	nop			; (mov r8, r8)
    f4e8:	20000284 	.word	0x20000284

0000f4ec <uart_callback>:
 * \brief Callback of USART input.
 */
static void uart_callback(const struct usart_module *const module)
{
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    f4ec:	4b05      	ldr	r3, [pc, #20]	; (f504 <uart_callback+0x18>)
    f4ee:	681b      	ldr	r3, [r3, #0]
    f4f0:	2b3f      	cmp	r3, #63	; 0x3f
    f4f2:	dc06      	bgt.n	f502 <uart_callback+0x16>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    f4f4:	1c59      	adds	r1, r3, #1
    f4f6:	4a03      	ldr	r2, [pc, #12]	; (f504 <uart_callback+0x18>)
    f4f8:	6011      	str	r1, [r2, #0]
    f4fa:	4a03      	ldr	r2, [pc, #12]	; (f508 <uart_callback+0x1c>)
    f4fc:	8811      	ldrh	r1, [r2, #0]
    f4fe:	4a03      	ldr	r2, [pc, #12]	; (f50c <uart_callback+0x20>)
    f500:	54d1      	strb	r1, [r2, r3]
	}
}
    f502:	4770      	bx	lr
    f504:	2000043c 	.word	0x2000043c
    f508:	20000440 	.word	0x20000440
    f50c:	200003fc 	.word	0x200003fc

0000f510 <resolve_cb>:
{
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
}

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    f510:	b570      	push	{r4, r5, r6, lr}
    f512:	b082      	sub	sp, #8
    f514:	0005      	movs	r5, r0
    f516:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    f518:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    f51a:	21ff      	movs	r1, #255	; 0xff
    f51c:	400b      	ands	r3, r1
    f51e:	000a      	movs	r2, r1
    f520:	4022      	ands	r2, r4
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    f522:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    f524:	9001      	str	r0, [sp, #4]
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    f526:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    f528:	4001      	ands	r1, r0
    f52a:	9100      	str	r1, [sp, #0]
    f52c:	0029      	movs	r1, r5
    f52e:	4804      	ldr	r0, [pc, #16]	; (f540 <resolve_cb+0x30>)
    f530:	4e04      	ldr	r6, [pc, #16]	; (f544 <resolve_cb+0x34>)
    f532:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    f534:	0021      	movs	r1, r4
    f536:	0028      	movs	r0, r5
    f538:	4b03      	ldr	r3, [pc, #12]	; (f548 <resolve_cb+0x38>)
    f53a:	4798      	blx	r3
}
    f53c:	b002      	add	sp, #8
    f53e:	bd70      	pop	{r4, r5, r6, pc}
    f540:	00014684 	.word	0x00014684
    f544:	00011869 	.word	0x00011869
    f548:	0000e4b5 	.word	0x0000e4b5

0000f54c <socket_cb>:
{
    f54c:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    f54e:	4b01      	ldr	r3, [pc, #4]	; (f554 <socket_cb+0x8>)
    f550:	4798      	blx	r3
}
    f552:	bd10      	pop	{r4, pc}
    f554:	0000f0e1 	.word	0x0000f0e1

0000f558 <start_download>:
{
    f558:	b510      	push	{r4, lr}
    f55a:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
    f55c:	4b17      	ldr	r3, [pc, #92]	; (f5bc <start_download+0x64>)
    f55e:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(WIFI_CONNECTED)) {
    f560:	079a      	lsls	r2, r3, #30
    f562:	d513      	bpl.n	f58c <start_download+0x34>
	if (is_state_set(GET_REQUESTED)) {
    f564:	075a      	lsls	r2, r3, #29
    f566:	d415      	bmi.n	f594 <start_download+0x3c>
	if (is_state_set(DOWNLOADING)) {
    f568:	071b      	lsls	r3, r3, #28
    f56a:	d417      	bmi.n	f59c <start_download+0x44>
	if(download_CRC == false){
    f56c:	4b14      	ldr	r3, [pc, #80]	; (f5c0 <start_download+0x68>)
    f56e:	781b      	ldrb	r3, [r3, #0]
    f570:	2b00      	cmp	r3, #0
    f572:	d017      	beq.n	f5a4 <start_download+0x4c>
		printf("start_download CRC: sending HTTP request...\r\n");
    f574:	4813      	ldr	r0, [pc, #76]	; (f5c4 <start_download+0x6c>)
    f576:	4b14      	ldr	r3, [pc, #80]	; (f5c8 <start_download+0x70>)
    f578:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_CRC_URL, HTTP_METHOD_GET, NULL, NULL);
    f57a:	2300      	movs	r3, #0
    f57c:	9300      	str	r3, [sp, #0]
    f57e:	2201      	movs	r2, #1
    f580:	4912      	ldr	r1, [pc, #72]	; (f5cc <start_download+0x74>)
    f582:	4813      	ldr	r0, [pc, #76]	; (f5d0 <start_download+0x78>)
    f584:	4c13      	ldr	r4, [pc, #76]	; (f5d4 <start_download+0x7c>)
    f586:	47a0      	blx	r4
}
    f588:	b002      	add	sp, #8
    f58a:	bd10      	pop	{r4, pc}
		printf("start_download: Wi-Fi is not connected.\r\n");
    f58c:	4812      	ldr	r0, [pc, #72]	; (f5d8 <start_download+0x80>)
    f58e:	4b0e      	ldr	r3, [pc, #56]	; (f5c8 <start_download+0x70>)
    f590:	4798      	blx	r3
		return;
    f592:	e7f9      	b.n	f588 <start_download+0x30>
		printf("start_download: request is sent already.\r\n");
    f594:	4811      	ldr	r0, [pc, #68]	; (f5dc <start_download+0x84>)
    f596:	4b0c      	ldr	r3, [pc, #48]	; (f5c8 <start_download+0x70>)
    f598:	4798      	blx	r3
		return;
    f59a:	e7f5      	b.n	f588 <start_download+0x30>
		printf("start_download: running download already.\r\n");
    f59c:	4810      	ldr	r0, [pc, #64]	; (f5e0 <start_download+0x88>)
    f59e:	4b0a      	ldr	r3, [pc, #40]	; (f5c8 <start_download+0x70>)
    f5a0:	4798      	blx	r3
		return;
    f5a2:	e7f1      	b.n	f588 <start_download+0x30>
		printf("start_download: sending HTTP request...\r\n");
    f5a4:	480f      	ldr	r0, [pc, #60]	; (f5e4 <start_download+0x8c>)
    f5a6:	4b08      	ldr	r3, [pc, #32]	; (f5c8 <start_download+0x70>)
    f5a8:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    f5aa:	2300      	movs	r3, #0
    f5ac:	9300      	str	r3, [sp, #0]
    f5ae:	2201      	movs	r2, #1
    f5b0:	490d      	ldr	r1, [pc, #52]	; (f5e8 <start_download+0x90>)
    f5b2:	4807      	ldr	r0, [pc, #28]	; (f5d0 <start_download+0x78>)
    f5b4:	4c07      	ldr	r4, [pc, #28]	; (f5d4 <start_download+0x7c>)
    f5b6:	47a0      	blx	r4
    f5b8:	e7e6      	b.n	f588 <start_download+0x30>
    f5ba:	46c0      	nop			; (mov r8, r8)
    f5bc:	200002bc 	.word	0x200002bc
    f5c0:	200002bd 	.word	0x200002bd
    f5c4:	00014790 	.word	0x00014790
    f5c8:	00011985 	.word	0x00011985
    f5cc:	000147c0 	.word	0x000147c0
    f5d0:	20000e6c 	.word	0x20000e6c
    f5d4:	0000e9e5 	.word	0x0000e9e5
    f5d8:	000146b4 	.word	0x000146b4
    f5dc:	000146e0 	.word	0x000146e0
    f5e0:	0001470c 	.word	0x0001470c
    f5e4:	00014738 	.word	0x00014738
    f5e8:	00014764 	.word	0x00014764

0000f5ec <socket_resolve_handler>:
{
    f5ec:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    f5ee:	4b01      	ldr	r3, [pc, #4]	; (f5f4 <socket_resolve_handler+0x8>)
    f5f0:	4798      	blx	r3
}
    f5f2:	bd10      	pop	{r4, pc}
    f5f4:	00010661 	.word	0x00010661

0000f5f8 <socket_event_handler>:
{
    f5f8:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    f5fa:	4b01      	ldr	r3, [pc, #4]	; (f600 <socket_event_handler+0x8>)
    f5fc:	4798      	blx	r3
}
    f5fe:	bd10      	pop	{r4, pc}
    f600:	00011201 	.word	0x00011201

0000f604 <wifi_callback>:
{
    f604:	b510      	push	{r4, lr}
    f606:	b082      	sub	sp, #8
	switch (msg_type) {
    f608:	282c      	cmp	r0, #44	; 0x2c
    f60a:	d003      	beq.n	f614 <wifi_callback+0x10>
    f60c:	2832      	cmp	r0, #50	; 0x32
    f60e:	d01c      	beq.n	f64a <wifi_callback+0x46>
}
    f610:	b002      	add	sp, #8
    f612:	bd10      	pop	{r4, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    f614:	780b      	ldrb	r3, [r1, #0]
    f616:	2b01      	cmp	r3, #1
    f618:	d011      	beq.n	f63e <wifi_callback+0x3a>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    f61a:	2b00      	cmp	r3, #0
    f61c:	d1f8      	bne.n	f610 <wifi_callback+0xc>
			printf("Wi-Fi disconnected\r\n");
    f61e:	4812      	ldr	r0, [pc, #72]	; (f668 <wifi_callback+0x64>)
    f620:	4b12      	ldr	r3, [pc, #72]	; (f66c <wifi_callback+0x68>)
    f622:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    f624:	23ff      	movs	r3, #255	; 0xff
    f626:	9300      	str	r3, [sp, #0]
    f628:	4b11      	ldr	r3, [pc, #68]	; (f670 <wifi_callback+0x6c>)
    f62a:	2202      	movs	r2, #2
    f62c:	210b      	movs	r1, #11
    f62e:	4811      	ldr	r0, [pc, #68]	; (f674 <wifi_callback+0x70>)
    f630:	4c11      	ldr	r4, [pc, #68]	; (f678 <wifi_callback+0x74>)
    f632:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    f634:	2101      	movs	r1, #1
    f636:	4811      	ldr	r0, [pc, #68]	; (f67c <wifi_callback+0x78>)
    f638:	4b11      	ldr	r3, [pc, #68]	; (f680 <wifi_callback+0x7c>)
    f63a:	4798      	blx	r3
    f63c:	e7e8      	b.n	f610 <wifi_callback+0xc>
			printf("Wi-Fi connected\r\n");
    f63e:	4811      	ldr	r0, [pc, #68]	; (f684 <wifi_callback+0x80>)
    f640:	4b0a      	ldr	r3, [pc, #40]	; (f66c <wifi_callback+0x68>)
    f642:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    f644:	4b10      	ldr	r3, [pc, #64]	; (f688 <wifi_callback+0x84>)
    f646:	4798      	blx	r3
    f648:	e7e2      	b.n	f610 <wifi_callback+0xc>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    f64a:	788b      	ldrb	r3, [r1, #2]
    f64c:	784a      	ldrb	r2, [r1, #1]
    f64e:	7808      	ldrb	r0, [r1, #0]
    f650:	78c9      	ldrb	r1, [r1, #3]
    f652:	9100      	str	r1, [sp, #0]
    f654:	0001      	movs	r1, r0
    f656:	480d      	ldr	r0, [pc, #52]	; (f68c <wifi_callback+0x88>)
    f658:	4c0d      	ldr	r4, [pc, #52]	; (f690 <wifi_callback+0x8c>)
    f65a:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    f65c:	490d      	ldr	r1, [pc, #52]	; (f694 <wifi_callback+0x90>)
    f65e:	4807      	ldr	r0, [pc, #28]	; (f67c <wifi_callback+0x78>)
    f660:	4b0d      	ldr	r3, [pc, #52]	; (f698 <wifi_callback+0x94>)
    f662:	4798      	blx	r3
}
    f664:	e7d4      	b.n	f610 <wifi_callback+0xc>
    f666:	46c0      	nop			; (mov r8, r8)
    f668:	00014804 	.word	0x00014804
    f66c:	00011985 	.word	0x00011985
    f670:	00014818 	.word	0x00014818
    f674:	00014824 	.word	0x00014824
    f678:	00009e8d 	.word	0x00009e8d
    f67c:	20000348 	.word	0x20000348
    f680:	00010ec1 	.word	0x00010ec1
    f684:	000147f0 	.word	0x000147f0
    f688:	00009ea9 	.word	0x00009ea9
    f68c:	00014830 	.word	0x00014830
    f690:	00011869 	.word	0x00011869
    f694:	000144dc 	.word	0x000144dc
    f698:	000106b5 	.word	0x000106b5

0000f69c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    f69c:	b570      	push	{r4, r5, r6, lr}
    f69e:	b082      	sub	sp, #8
    f6a0:	0005      	movs	r5, r0
    f6a2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    f6a4:	2200      	movs	r2, #0
    f6a6:	466b      	mov	r3, sp
    f6a8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    f6aa:	4c06      	ldr	r4, [pc, #24]	; (f6c4 <usart_serial_getchar+0x28>)
    f6ac:	466b      	mov	r3, sp
    f6ae:	1d99      	adds	r1, r3, #6
    f6b0:	0028      	movs	r0, r5
    f6b2:	47a0      	blx	r4
    f6b4:	2800      	cmp	r0, #0
    f6b6:	d1f9      	bne.n	f6ac <usart_serial_getchar+0x10>

	*c = temp;
    f6b8:	466b      	mov	r3, sp
    f6ba:	3306      	adds	r3, #6
    f6bc:	881b      	ldrh	r3, [r3, #0]
    f6be:	7033      	strb	r3, [r6, #0]
}
    f6c0:	b002      	add	sp, #8
    f6c2:	bd70      	pop	{r4, r5, r6, pc}
    f6c4:	0000d0ad 	.word	0x0000d0ad

0000f6c8 <usart_serial_putchar>:
{
    f6c8:	b570      	push	{r4, r5, r6, lr}
    f6ca:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    f6cc:	b28c      	uxth	r4, r1
    f6ce:	4e03      	ldr	r6, [pc, #12]	; (f6dc <usart_serial_putchar+0x14>)
    f6d0:	0021      	movs	r1, r4
    f6d2:	0028      	movs	r0, r5
    f6d4:	47b0      	blx	r6
    f6d6:	2800      	cmp	r0, #0
    f6d8:	d1fa      	bne.n	f6d0 <usart_serial_putchar+0x8>
}
    f6da:	bd70      	pop	{r4, r5, r6, pc}
    f6dc:	0000d081 	.word	0x0000d081

0000f6e0 <mqtt_callback>:
{
    f6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6e2:	b087      	sub	sp, #28
    f6e4:	0005      	movs	r5, r0
    f6e6:	0014      	movs	r4, r2
	switch (type) {
    f6e8:	2901      	cmp	r1, #1
    f6ea:	d100      	bne.n	f6ee <mqtt_callback+0xe>
    f6ec:	e07e      	b.n	f7ec <mqtt_callback+0x10c>
    f6ee:	dd5e      	ble.n	f7ae <mqtt_callback+0xce>
    f6f0:	2905      	cmp	r1, #5
    f6f2:	d100      	bne.n	f6f6 <mqtt_callback+0x16>
    f6f4:	e0d9      	b.n	f8aa <mqtt_callback+0x1ca>
    f6f6:	2906      	cmp	r1, #6
    f6f8:	d000      	beq.n	f6fc <mqtt_callback+0x1c>
    f6fa:	e0df      	b.n	f8bc <mqtt_callback+0x1dc>
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    f6fc:	6810      	ldr	r0, [r2, #0]
    f6fe:	2800      	cmp	r0, #0
    f700:	d100      	bne.n	f704 <mqtt_callback+0x24>
    f702:	e0db      	b.n	f8bc <mqtt_callback+0x1dc>
    f704:	6893      	ldr	r3, [r2, #8]
    f706:	2b00      	cmp	r3, #0
    f708:	d100      	bne.n	f70c <mqtt_callback+0x2c>
    f70a:	e0d7      	b.n	f8bc <mqtt_callback+0x1dc>
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC))) {
    f70c:	2204      	movs	r2, #4
    f70e:	496c      	ldr	r1, [pc, #432]	; (f8c0 <mqtt_callback+0x1e0>)
    f710:	4b6c      	ldr	r3, [pc, #432]	; (f8c4 <mqtt_callback+0x1e4>)
    f712:	4798      	blx	r3
    f714:	1e05      	subs	r5, r0, #0
    f716:	d11c      	bne.n	f752 <mqtt_callback+0x72>
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    f718:	6863      	ldr	r3, [r4, #4]
    f71a:	2b04      	cmp	r3, #4
    f71c:	dd08      	ble.n	f730 <mqtt_callback+0x50>
    f71e:	2604      	movs	r6, #4
					printf("%c", data->recv_publish.topic[i]);
    f720:	4f69      	ldr	r7, [pc, #420]	; (f8c8 <mqtt_callback+0x1e8>)
    f722:	6823      	ldr	r3, [r4, #0]
    f724:	5d98      	ldrb	r0, [r3, r6]
    f726:	47b8      	blx	r7
				for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
    f728:	3601      	adds	r6, #1
    f72a:	6863      	ldr	r3, [r4, #4]
    f72c:	42b3      	cmp	r3, r6
    f72e:	dcf8      	bgt.n	f722 <mqtt_callback+0x42>
				printf(" >> ");
    f730:	4866      	ldr	r0, [pc, #408]	; (f8cc <mqtt_callback+0x1ec>)
    f732:	4b67      	ldr	r3, [pc, #412]	; (f8d0 <mqtt_callback+0x1f0>)
    f734:	4798      	blx	r3
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f736:	68e3      	ldr	r3, [r4, #12]
    f738:	2b00      	cmp	r3, #0
    f73a:	dd07      	ble.n	f74c <mqtt_callback+0x6c>
					printf("%c", data->recv_publish.msg[i]);
    f73c:	4e62      	ldr	r6, [pc, #392]	; (f8c8 <mqtt_callback+0x1e8>)
    f73e:	68a3      	ldr	r3, [r4, #8]
    f740:	5d58      	ldrb	r0, [r3, r5]
    f742:	47b0      	blx	r6
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f744:	3501      	adds	r5, #1
    f746:	68e3      	ldr	r3, [r4, #12]
    f748:	42ab      	cmp	r3, r5
    f74a:	dcf8      	bgt.n	f73e <mqtt_callback+0x5e>
				printf("\r\n");
    f74c:	4861      	ldr	r0, [pc, #388]	; (f8d4 <mqtt_callback+0x1f4>)
    f74e:	4b62      	ldr	r3, [pc, #392]	; (f8d8 <mqtt_callback+0x1f8>)
    f750:	4798      	blx	r3
			if (!strncmp(data->recv_publish.topic, ACTUATOR_TOPIC, strlen(ACTUATOR_TOPIC)) ) {
    f752:	2208      	movs	r2, #8
    f754:	4961      	ldr	r1, [pc, #388]	; (f8dc <mqtt_callback+0x1fc>)
    f756:	6820      	ldr	r0, [r4, #0]
    f758:	4b5a      	ldr	r3, [pc, #360]	; (f8c4 <mqtt_callback+0x1e4>)
    f75a:	4798      	blx	r3
    f75c:	1e05      	subs	r5, r0, #0
    f75e:	d07d      	beq.n	f85c <mqtt_callback+0x17c>
			if (!strncmp(data->recv_publish.topic, UPGRADE_TOPIC, strlen(UPGRADE_TOPIC)) ) {
    f760:	2207      	movs	r2, #7
    f762:	495f      	ldr	r1, [pc, #380]	; (f8e0 <mqtt_callback+0x200>)
    f764:	6820      	ldr	r0, [r4, #0]
    f766:	4b57      	ldr	r3, [pc, #348]	; (f8c4 <mqtt_callback+0x1e4>)
    f768:	4798      	blx	r3
    f76a:	2800      	cmp	r0, #0
    f76c:	d100      	bne.n	f770 <mqtt_callback+0x90>
    f76e:	e095      	b.n	f89c <mqtt_callback+0x1bc>
			if (!strncmp(data->recv_publish.topic, SENSE_TOPIC, strlen(SENSE_TOPIC)) ) {
    f770:	6820      	ldr	r0, [r4, #0]
    f772:	2205      	movs	r2, #5
    f774:	495b      	ldr	r1, [pc, #364]	; (f8e4 <mqtt_callback+0x204>)
    f776:	4b53      	ldr	r3, [pc, #332]	; (f8c4 <mqtt_callback+0x1e4>)
    f778:	4798      	blx	r3
    f77a:	2800      	cmp	r0, #0
    f77c:	d000      	beq.n	f780 <mqtt_callback+0xa0>
    f77e:	e09d      	b.n	f8bc <mqtt_callback+0x1dc>
				int sensed = rand();
    f780:	4b59      	ldr	r3, [pc, #356]	; (f8e8 <mqtt_callback+0x208>)
    f782:	4798      	blx	r3
    f784:	0005      	movs	r5, r0
				sprintf(pub_text, "%d", sensed);
    f786:	4c59      	ldr	r4, [pc, #356]	; (f8ec <mqtt_callback+0x20c>)
    f788:	0002      	movs	r2, r0
    f78a:	4959      	ldr	r1, [pc, #356]	; (f8f0 <mqtt_callback+0x210>)
    f78c:	0020      	movs	r0, r4
    f78e:	4b59      	ldr	r3, [pc, #356]	; (f8f4 <mqtt_callback+0x214>)
    f790:	4798      	blx	r3
				printf("Sensor requested: Sensed %d\r\n", sensed);
    f792:	0029      	movs	r1, r5
    f794:	4858      	ldr	r0, [pc, #352]	; (f8f8 <mqtt_callback+0x218>)
    f796:	4b4e      	ldr	r3, [pc, #312]	; (f8d0 <mqtt_callback+0x1f0>)
    f798:	4798      	blx	r3
				mqtt_publish(&mqtt_inst, SENSOR_TOPIC, pub_text, 8, 1, 1);
    f79a:	2301      	movs	r3, #1
    f79c:	9301      	str	r3, [sp, #4]
    f79e:	9300      	str	r3, [sp, #0]
    f7a0:	3307      	adds	r3, #7
    f7a2:	0022      	movs	r2, r4
    f7a4:	4955      	ldr	r1, [pc, #340]	; (f8fc <mqtt_callback+0x21c>)
    f7a6:	4856      	ldr	r0, [pc, #344]	; (f900 <mqtt_callback+0x220>)
    f7a8:	4c56      	ldr	r4, [pc, #344]	; (f904 <mqtt_callback+0x224>)
    f7aa:	47a0      	blx	r4
    f7ac:	e086      	b.n	f8bc <mqtt_callback+0x1dc>
	switch (type) {
    f7ae:	2900      	cmp	r1, #0
    f7b0:	d000      	beq.n	f7b4 <mqtt_callback+0xd4>
    f7b2:	e083      	b.n	f8bc <mqtt_callback+0x1dc>
		if (data->sock_connected.result >= 0) {
    f7b4:	6813      	ldr	r3, [r2, #0]
    f7b6:	2b00      	cmp	r3, #0
    f7b8:	db0e      	blt.n	f7d8 <mqtt_callback+0xf8>
			status = mqtt_connect_broker(module_inst, 1, mqtt_user, mqtt_pass, mqtt_user, NULL, NULL, 0, 0, 0);
    f7ba:	4a53      	ldr	r2, [pc, #332]	; (f908 <mqtt_callback+0x228>)
    f7bc:	2300      	movs	r3, #0
    f7be:	9305      	str	r3, [sp, #20]
    f7c0:	9304      	str	r3, [sp, #16]
    f7c2:	9303      	str	r3, [sp, #12]
    f7c4:	9302      	str	r3, [sp, #8]
    f7c6:	9301      	str	r3, [sp, #4]
    f7c8:	9200      	str	r2, [sp, #0]
    f7ca:	4b50      	ldr	r3, [pc, #320]	; (f90c <mqtt_callback+0x22c>)
    f7cc:	2101      	movs	r1, #1
    f7ce:	4c50      	ldr	r4, [pc, #320]	; (f910 <mqtt_callback+0x230>)
    f7d0:	47a0      	blx	r4
    f7d2:	4b50      	ldr	r3, [pc, #320]	; (f914 <mqtt_callback+0x234>)
    f7d4:	6018      	str	r0, [r3, #0]
    f7d6:	e071      	b.n	f8bc <mqtt_callback+0x1dc>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    f7d8:	4c4f      	ldr	r4, [pc, #316]	; (f918 <mqtt_callback+0x238>)
    f7da:	0021      	movs	r1, r4
    f7dc:	484f      	ldr	r0, [pc, #316]	; (f91c <mqtt_callback+0x23c>)
    f7de:	4b3c      	ldr	r3, [pc, #240]	; (f8d0 <mqtt_callback+0x1f0>)
    f7e0:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    f7e2:	0021      	movs	r1, r4
    f7e4:	0028      	movs	r0, r5
    f7e6:	4b4e      	ldr	r3, [pc, #312]	; (f920 <mqtt_callback+0x240>)
    f7e8:	4798      	blx	r3
    f7ea:	e067      	b.n	f8bc <mqtt_callback+0x1dc>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    f7ec:	7811      	ldrb	r1, [r2, #0]
    f7ee:	2900      	cmp	r1, #0
    f7f0:	d130      	bne.n	f854 <mqtt_callback+0x174>
			printf("Trying to sub...\r\n");
    f7f2:	484c      	ldr	r0, [pc, #304]	; (f924 <mqtt_callback+0x244>)
    f7f4:	4c38      	ldr	r4, [pc, #224]	; (f8d8 <mqtt_callback+0x1f8>)
    f7f6:	47a0      	blx	r4
			status = mqtt_subscribe(module_inst, MAIN_CHAT_TOPIC, 2);
    f7f8:	2202      	movs	r2, #2
    f7fa:	4931      	ldr	r1, [pc, #196]	; (f8c0 <mqtt_callback+0x1e0>)
    f7fc:	0028      	movs	r0, r5
    f7fe:	4f4a      	ldr	r7, [pc, #296]	; (f928 <mqtt_callback+0x248>)
    f800:	47b8      	blx	r7
    f802:	4e44      	ldr	r6, [pc, #272]	; (f914 <mqtt_callback+0x234>)
    f804:	6030      	str	r0, [r6, #0]
			printf("Past chat sub\r\n");
    f806:	4849      	ldr	r0, [pc, #292]	; (f92c <mqtt_callback+0x24c>)
    f808:	47a0      	blx	r4
			status = mqtt_subscribe(module_inst, SENSOR_TOPIC, 2);
    f80a:	2202      	movs	r2, #2
    f80c:	493b      	ldr	r1, [pc, #236]	; (f8fc <mqtt_callback+0x21c>)
    f80e:	0028      	movs	r0, r5
    f810:	47b8      	blx	r7
    f812:	6030      	str	r0, [r6, #0]
			printf("Past sensor sub\r\n");
    f814:	4846      	ldr	r0, [pc, #280]	; (f930 <mqtt_callback+0x250>)
    f816:	47a0      	blx	r4
			status = mqtt_subscribe(module_inst, ACTUATOR_TOPIC, 2);
    f818:	2202      	movs	r2, #2
    f81a:	4930      	ldr	r1, [pc, #192]	; (f8dc <mqtt_callback+0x1fc>)
    f81c:	0028      	movs	r0, r5
    f81e:	47b8      	blx	r7
    f820:	6030      	str	r0, [r6, #0]
			printf("Past actuator sub\r\n");
    f822:	4844      	ldr	r0, [pc, #272]	; (f934 <mqtt_callback+0x254>)
    f824:	47a0      	blx	r4
			status = mqtt_subscribe(module_inst, UPGRADE_TOPIC, 2);
    f826:	2202      	movs	r2, #2
    f828:	492d      	ldr	r1, [pc, #180]	; (f8e0 <mqtt_callback+0x200>)
    f82a:	0028      	movs	r0, r5
    f82c:	47b8      	blx	r7
    f82e:	6030      	str	r0, [r6, #0]
			printf("Past upgrade sub\r\n");
    f830:	4841      	ldr	r0, [pc, #260]	; (f938 <mqtt_callback+0x258>)
    f832:	47a0      	blx	r4
			status = mqtt_subscribe(module_inst, SENSE_TOPIC, 2);
    f834:	2202      	movs	r2, #2
    f836:	492b      	ldr	r1, [pc, #172]	; (f8e4 <mqtt_callback+0x204>)
    f838:	0028      	movs	r0, r5
    f83a:	47b8      	blx	r7
    f83c:	6030      	str	r0, [r6, #0]
			printf("Past sense sub\r\n");
    f83e:	483f      	ldr	r0, [pc, #252]	; (f93c <mqtt_callback+0x25c>)
    f840:	47a0      	blx	r4
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    f842:	493f      	ldr	r1, [pc, #252]	; (f940 <mqtt_callback+0x260>)
    f844:	2231      	movs	r2, #49	; 0x31
    f846:	5c8b      	ldrb	r3, [r1, r2]
    f848:	2002      	movs	r0, #2
    f84a:	4303      	orrs	r3, r0
    f84c:	548b      	strb	r3, [r1, r2]
			printf("Preparation of the chat has been completed.\r\n");
    f84e:	483d      	ldr	r0, [pc, #244]	; (f944 <mqtt_callback+0x264>)
    f850:	47a0      	blx	r4
    f852:	e033      	b.n	f8bc <mqtt_callback+0x1dc>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    f854:	483c      	ldr	r0, [pc, #240]	; (f948 <mqtt_callback+0x268>)
    f856:	4b1e      	ldr	r3, [pc, #120]	; (f8d0 <mqtt_callback+0x1f0>)
    f858:	4798      	blx	r3
    f85a:	e02f      	b.n	f8bc <mqtt_callback+0x1dc>
				printf("%s >> ", ACTUATOR_TOPIC);
    f85c:	491f      	ldr	r1, [pc, #124]	; (f8dc <mqtt_callback+0x1fc>)
    f85e:	483b      	ldr	r0, [pc, #236]	; (f94c <mqtt_callback+0x26c>)
    f860:	4b1b      	ldr	r3, [pc, #108]	; (f8d0 <mqtt_callback+0x1f0>)
    f862:	4798      	blx	r3
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f864:	68e3      	ldr	r3, [r4, #12]
    f866:	2b00      	cmp	r3, #0
    f868:	dd07      	ble.n	f87a <mqtt_callback+0x19a>
					printf("%c", data->recv_publish.msg[i]);
    f86a:	4e17      	ldr	r6, [pc, #92]	; (f8c8 <mqtt_callback+0x1e8>)
    f86c:	68a3      	ldr	r3, [r4, #8]
    f86e:	5d58      	ldrb	r0, [r3, r5]
    f870:	47b0      	blx	r6
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f872:	3501      	adds	r5, #1
    f874:	68e3      	ldr	r3, [r4, #12]
    f876:	42ab      	cmp	r3, r5
    f878:	dcf8      	bgt.n	f86c <mqtt_callback+0x18c>
				if (data->recv_publish.msg[0] == 't') {
    f87a:	68a3      	ldr	r3, [r4, #8]
    f87c:	781b      	ldrb	r3, [r3, #0]
    f87e:	2b74      	cmp	r3, #116	; 0x74
    f880:	d007      	beq.n	f892 <mqtt_callback+0x1b2>
		port_base->OUTCLR.reg = pin_mask;
    f882:	2280      	movs	r2, #128	; 0x80
    f884:	0412      	lsls	r2, r2, #16
    f886:	4b32      	ldr	r3, [pc, #200]	; (f950 <mqtt_callback+0x270>)
    f888:	615a      	str	r2, [r3, #20]
				printf("\r\n");
    f88a:	4812      	ldr	r0, [pc, #72]	; (f8d4 <mqtt_callback+0x1f4>)
    f88c:	4b12      	ldr	r3, [pc, #72]	; (f8d8 <mqtt_callback+0x1f8>)
    f88e:	4798      	blx	r3
    f890:	e766      	b.n	f760 <mqtt_callback+0x80>
		port_base->OUTSET.reg = pin_mask;
    f892:	2280      	movs	r2, #128	; 0x80
    f894:	0412      	lsls	r2, r2, #16
    f896:	4b2e      	ldr	r3, [pc, #184]	; (f950 <mqtt_callback+0x270>)
    f898:	619a      	str	r2, [r3, #24]
    f89a:	e7f6      	b.n	f88a <mqtt_callback+0x1aa>
				printf("Upgrade requested\r\n");
    f89c:	482d      	ldr	r0, [pc, #180]	; (f954 <mqtt_callback+0x274>)
    f89e:	4b0e      	ldr	r3, [pc, #56]	; (f8d8 <mqtt_callback+0x1f8>)
    f8a0:	4798      	blx	r3
				write_firmware = true;
    f8a2:	2201      	movs	r2, #1
    f8a4:	4b2c      	ldr	r3, [pc, #176]	; (f958 <mqtt_callback+0x278>)
    f8a6:	701a      	strb	r2, [r3, #0]
    f8a8:	e762      	b.n	f770 <mqtt_callback+0x90>
		printf("MQTT disconnected\r\n");
    f8aa:	482c      	ldr	r0, [pc, #176]	; (f95c <mqtt_callback+0x27c>)
    f8ac:	4b0a      	ldr	r3, [pc, #40]	; (f8d8 <mqtt_callback+0x1f8>)
    f8ae:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    f8b0:	4923      	ldr	r1, [pc, #140]	; (f940 <mqtt_callback+0x260>)
    f8b2:	2231      	movs	r2, #49	; 0x31
    f8b4:	5c8b      	ldrb	r3, [r1, r2]
    f8b6:	2002      	movs	r0, #2
    f8b8:	4383      	bics	r3, r0
    f8ba:	548b      	strb	r3, [r1, r2]
}
    f8bc:	b007      	add	sp, #28
    f8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8c0:	0001453c 	.word	0x0001453c
    f8c4:	00011c51 	.word	0x00011c51
    f8c8:	0001189d 	.word	0x0001189d
    f8cc:	00014628 	.word	0x00014628
    f8d0:	00011869 	.word	0x00011869
    f8d4:	000148c4 	.word	0x000148c4
    f8d8:	00011985 	.word	0x00011985
    f8dc:	00014570 	.word	0x00014570
    f8e0:	00014590 	.word	0x00014590
    f8e4:	000145ac 	.word	0x000145ac
    f8e8:	00011999 	.word	0x00011999
    f8ec:	200003bc 	.word	0x200003bc
    f8f0:	0001464c 	.word	0x0001464c
    f8f4:	00011ba1 	.word	0x00011ba1
    f8f8:	00014650 	.word	0x00014650
    f8fc:	00014554 	.word	0x00014554
    f900:	20000348 	.word	0x20000348
    f904:	00010a79 	.word	0x00010a79
    f908:	20000014 	.word	0x20000014
    f90c:	2000000c 	.word	0x2000000c
    f910:	000107c9 	.word	0x000107c9
    f914:	20000f98 	.word	0x20000f98
    f918:	000144dc 	.word	0x000144dc
    f91c:	000144f0 	.word	0x000144f0
    f920:	000106b5 	.word	0x000106b5
    f924:	00014528 	.word	0x00014528
    f928:	00010c21 	.word	0x00010c21
    f92c:	00014544 	.word	0x00014544
    f930:	0001455c 	.word	0x0001455c
    f934:	0001457c 	.word	0x0001457c
    f938:	00014598 	.word	0x00014598
    f93c:	000145b4 	.word	0x000145b4
    f940:	20000288 	.word	0x20000288
    f944:	000145c4 	.word	0x000145c4
    f948:	000145f4 	.word	0x000145f4
    f94c:	00014630 	.word	0x00014630
    f950:	41004400 	.word	0x41004400
    f954:	00014638 	.word	0x00014638
    f958:	20000442 	.word	0x20000442
    f95c:	00014670 	.word	0x00014670

0000f960 <wifi_cb>:

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    f960:	b510      	push	{r4, lr}
    f962:	b082      	sub	sp, #8
	switch (u8MsgType) {
    f964:	282c      	cmp	r0, #44	; 0x2c
    f966:	d003      	beq.n	f970 <wifi_cb+0x10>
    f968:	2832      	cmp	r0, #50	; 0x32
    f96a:	d02f      	beq.n	f9cc <wifi_cb+0x6c>
			start_download();
		}
		default:
		break;
	}
}
    f96c:	b002      	add	sp, #8
    f96e:	bd10      	pop	{r4, pc}
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    f970:	780b      	ldrb	r3, [r1, #0]
    f972:	2b01      	cmp	r3, #1
    f974:	d01a      	beq.n	f9ac <wifi_cb+0x4c>
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    f976:	2b00      	cmp	r3, #0
    f978:	d1f8      	bne.n	f96c <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    f97a:	481d      	ldr	r0, [pc, #116]	; (f9f0 <wifi_cb+0x90>)
    f97c:	4b1d      	ldr	r3, [pc, #116]	; (f9f4 <wifi_cb+0x94>)
    f97e:	4798      	blx	r3
	down_state &= ~mask;
    f980:	4b1d      	ldr	r3, [pc, #116]	; (f9f8 <wifi_cb+0x98>)
    f982:	2200      	movs	r2, #0
    f984:	569a      	ldrsb	r2, [r3, r2]
    f986:	23fd      	movs	r3, #253	; 0xfd
    f988:	4013      	ands	r3, r2
				if (is_state_set(DOWNLOADING)) {
    f98a:	0719      	lsls	r1, r3, #28
    f98c:	d414      	bmi.n	f9b8 <wifi_cb+0x58>
	down_state &= ~mask;
    f98e:	4a1a      	ldr	r2, [pc, #104]	; (f9f8 <wifi_cb+0x98>)
    f990:	7013      	strb	r3, [r2, #0]
	return ((down_state & mask) != 0);
    f992:	4b19      	ldr	r3, [pc, #100]	; (f9f8 <wifi_cb+0x98>)
    f994:	781b      	ldrb	r3, [r3, #0]
				if (is_state_set(GET_REQUESTED)) {
    f996:	075a      	lsls	r2, r3, #29
    f998:	d413      	bmi.n	f9c2 <wifi_cb+0x62>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    f99a:	23ff      	movs	r3, #255	; 0xff
    f99c:	9300      	str	r3, [sp, #0]
    f99e:	4b17      	ldr	r3, [pc, #92]	; (f9fc <wifi_cb+0x9c>)
    f9a0:	2202      	movs	r2, #2
    f9a2:	210b      	movs	r1, #11
    f9a4:	4816      	ldr	r0, [pc, #88]	; (fa00 <wifi_cb+0xa0>)
    f9a6:	4c17      	ldr	r4, [pc, #92]	; (fa04 <wifi_cb+0xa4>)
    f9a8:	47a0      	blx	r4
    f9aa:	e7df      	b.n	f96c <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    f9ac:	4816      	ldr	r0, [pc, #88]	; (fa08 <wifi_cb+0xa8>)
    f9ae:	4b11      	ldr	r3, [pc, #68]	; (f9f4 <wifi_cb+0x94>)
    f9b0:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
    f9b2:	4b16      	ldr	r3, [pc, #88]	; (fa0c <wifi_cb+0xac>)
    f9b4:	4798      	blx	r3
    f9b6:	e7d9      	b.n	f96c <wifi_cb+0xc>
	down_state &= ~mask;
    f9b8:	230a      	movs	r3, #10
    f9ba:	439a      	bics	r2, r3
    f9bc:	4b0e      	ldr	r3, [pc, #56]	; (f9f8 <wifi_cb+0x98>)
    f9be:	701a      	strb	r2, [r3, #0]
    f9c0:	e7e7      	b.n	f992 <wifi_cb+0x32>
    f9c2:	2204      	movs	r2, #4
    f9c4:	4393      	bics	r3, r2
    f9c6:	4a0c      	ldr	r2, [pc, #48]	; (f9f8 <wifi_cb+0x98>)
    f9c8:	7013      	strb	r3, [r2, #0]
    f9ca:	e7e6      	b.n	f99a <wifi_cb+0x3a>
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    f9cc:	788b      	ldrb	r3, [r1, #2]
    f9ce:	784a      	ldrb	r2, [r1, #1]
    f9d0:	7808      	ldrb	r0, [r1, #0]
    f9d2:	78c9      	ldrb	r1, [r1, #3]
    f9d4:	9100      	str	r1, [sp, #0]
    f9d6:	0001      	movs	r1, r0
    f9d8:	480d      	ldr	r0, [pc, #52]	; (fa10 <wifi_cb+0xb0>)
    f9da:	4c0e      	ldr	r4, [pc, #56]	; (fa14 <wifi_cb+0xb4>)
    f9dc:	47a0      	blx	r4
	down_state |= mask;
    f9de:	4a06      	ldr	r2, [pc, #24]	; (f9f8 <wifi_cb+0x98>)
    f9e0:	7813      	ldrb	r3, [r2, #0]
    f9e2:	2102      	movs	r1, #2
    f9e4:	430b      	orrs	r3, r1
    f9e6:	7013      	strb	r3, [r2, #0]
			start_download();
    f9e8:	4b0b      	ldr	r3, [pc, #44]	; (fa18 <wifi_cb+0xb8>)
    f9ea:	4798      	blx	r3
}
    f9ec:	e7be      	b.n	f96c <wifi_cb+0xc>
    f9ee:	46c0      	nop			; (mov r8, r8)
    f9f0:	0001486c 	.word	0x0001486c
    f9f4:	00011985 	.word	0x00011985
    f9f8:	200002bc 	.word	0x200002bc
    f9fc:	00014818 	.word	0x00014818
    fa00:	00014824 	.word	0x00014824
    fa04:	00009e8d 	.word	0x00009e8d
    fa08:	0001484c 	.word	0x0001484c
    fa0c:	00009ea9 	.word	0x00009ea9
    fa10:	0001488c 	.word	0x0001488c
    fa14:	00011869 	.word	0x00011869
    fa18:	0000f559 	.word	0x0000f559

0000fa1c <configure_port_pins>:
{
    fa1c:	b570      	push	{r4, r5, r6, lr}
    fa1e:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    fa20:	ac01      	add	r4, sp, #4
    fa22:	2301      	movs	r3, #1
    fa24:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    fa26:	2600      	movs	r6, #0
    fa28:	70a6      	strb	r6, [r4, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    fa2a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
    fa2c:	0021      	movs	r1, r4
    fa2e:	2017      	movs	r0, #23
    fa30:	4d05      	ldr	r5, [pc, #20]	; (fa48 <configure_port_pins+0x2c>)
    fa32:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    fa34:	2280      	movs	r2, #128	; 0x80
    fa36:	0412      	lsls	r2, r2, #16
    fa38:	4b04      	ldr	r3, [pc, #16]	; (fa4c <configure_port_pins+0x30>)
    fa3a:	619a      	str	r2, [r3, #24]
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    fa3c:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(B1, &config_port_pin);
    fa3e:	0021      	movs	r1, r4
    fa40:	2037      	movs	r0, #55	; 0x37
    fa42:	47a8      	blx	r5
}
    fa44:	b002      	add	sp, #8
    fa46:	bd70      	pop	{r4, r5, r6, pc}
    fa48:	0000c299 	.word	0x0000c299
    fa4c:	41004400 	.word	0x41004400

0000fa50 <write_spi_flash_frm_buf>:
void write_spi_flash_frm_buf(uint32 len){
    fa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa52:	0005      	movs	r5, r0
	at25dfx_chip_wake(&at25dfx_chip);
    fa54:	4c0f      	ldr	r4, [pc, #60]	; (fa94 <write_spi_flash_frm_buf+0x44>)
    fa56:	0020      	movs	r0, r4
    fa58:	4b0f      	ldr	r3, [pc, #60]	; (fa98 <write_spi_flash_frm_buf+0x48>)
    fa5a:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    fa5c:	0020      	movs	r0, r4
    fa5e:	4b0f      	ldr	r3, [pc, #60]	; (fa9c <write_spi_flash_frm_buf+0x4c>)
    fa60:	4798      	blx	r3
    fa62:	2800      	cmp	r0, #0
    fa64:	d112      	bne.n	fa8c <write_spi_flash_frm_buf+0x3c>
	at25dfx_chip_write_buffer(&at25dfx_chip, flash_addr, http_buf + http_buf_read_ptr, len);	// write buffer
    fa66:	b2ab      	uxth	r3, r5
    fa68:	4a0d      	ldr	r2, [pc, #52]	; (faa0 <write_spi_flash_frm_buf+0x50>)
    fa6a:	6812      	ldr	r2, [r2, #0]
    fa6c:	490d      	ldr	r1, [pc, #52]	; (faa4 <write_spi_flash_frm_buf+0x54>)
    fa6e:	1852      	adds	r2, r2, r1
    fa70:	4c0d      	ldr	r4, [pc, #52]	; (faa8 <write_spi_flash_frm_buf+0x58>)
    fa72:	4e08      	ldr	r6, [pc, #32]	; (fa94 <write_spi_flash_frm_buf+0x44>)
    fa74:	6821      	ldr	r1, [r4, #0]
    fa76:	0030      	movs	r0, r6
    fa78:	4f0c      	ldr	r7, [pc, #48]	; (faac <write_spi_flash_frm_buf+0x5c>)
    fa7a:	47b8      	blx	r7
	at25dfx_chip_sleep(&at25dfx_chip);											// back to sleep
    fa7c:	0030      	movs	r0, r6
    fa7e:	4b0c      	ldr	r3, [pc, #48]	; (fab0 <write_spi_flash_frm_buf+0x60>)
    fa80:	4798      	blx	r3
	flash_addr = flash_addr + len;
    fa82:	6823      	ldr	r3, [r4, #0]
    fa84:	469c      	mov	ip, r3
    fa86:	4465      	add	r5, ip
    fa88:	6025      	str	r5, [r4, #0]
}
    fa8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("Chip didnt wake \r\n");
    fa8c:	4809      	ldr	r0, [pc, #36]	; (fab4 <write_spi_flash_frm_buf+0x64>)
    fa8e:	4b0a      	ldr	r3, [pc, #40]	; (fab8 <write_spi_flash_frm_buf+0x68>)
    fa90:	4798      	blx	r3
    fa92:	e7e8      	b.n	fa66 <write_spi_flash_frm_buf+0x16>
    fa94:	20000e0c 	.word	0x20000e0c
    fa98:	000089f1 	.word	0x000089f1
    fa9c:	00008115 	.word	0x00008115
    faa0:	200002c0 	.word	0x200002c0
    faa4:	2000060c 	.word	0x2000060c
    faa8:	20000608 	.word	0x20000608
    faac:	00008221 	.word	0x00008221
    fab0:	00008965 	.word	0x00008965
    fab4:	000148b4 	.word	0x000148b4
    fab8:	00011985 	.word	0x00011985

0000fabc <http_client_callback>:
{
    fabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fabe:	46ce      	mov	lr, r9
    fac0:	4647      	mov	r7, r8
    fac2:	b580      	push	{r7, lr}
    fac4:	0014      	movs	r4, r2
	switch (type) {
    fac6:	2904      	cmp	r1, #4
    fac8:	d806      	bhi.n	fad8 <http_client_callback+0x1c>
    faca:	0089      	lsls	r1, r1, #2
    facc:	4b86      	ldr	r3, [pc, #536]	; (fce8 <http_client_callback+0x22c>)
    face:	585b      	ldr	r3, [r3, r1]
    fad0:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
    fad2:	4886      	ldr	r0, [pc, #536]	; (fcec <http_client_callback+0x230>)
    fad4:	4b86      	ldr	r3, [pc, #536]	; (fcf0 <http_client_callback+0x234>)
    fad6:	4798      	blx	r3
}
    fad8:	bc0c      	pop	{r2, r3}
    fada:	4690      	mov	r8, r2
    fadc:	4699      	mov	r9, r3
    fade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("http_client_callback: request completed.\r\n");
    fae0:	4884      	ldr	r0, [pc, #528]	; (fcf4 <http_client_callback+0x238>)
    fae2:	4b83      	ldr	r3, [pc, #524]	; (fcf0 <http_client_callback+0x234>)
    fae4:	4798      	blx	r3
	down_state |= mask;
    fae6:	4a84      	ldr	r2, [pc, #528]	; (fcf8 <http_client_callback+0x23c>)
    fae8:	7813      	ldrb	r3, [r2, #0]
    faea:	2104      	movs	r1, #4
    faec:	430b      	orrs	r3, r1
    faee:	7013      	strb	r3, [r2, #0]
    faf0:	e7f2      	b.n	fad8 <http_client_callback+0x1c>
		printf("http_client_callback: received response %u data size %u\r\n",
    faf2:	8811      	ldrh	r1, [r2, #0]
    faf4:	6852      	ldr	r2, [r2, #4]
    faf6:	4881      	ldr	r0, [pc, #516]	; (fcfc <http_client_callback+0x240>)
    faf8:	4b81      	ldr	r3, [pc, #516]	; (fd00 <http_client_callback+0x244>)
    fafa:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    fafc:	8823      	ldrh	r3, [r4, #0]
    fafe:	2bc8      	cmp	r3, #200	; 0xc8
    fb00:	d121      	bne.n	fb46 <http_client_callback+0x8a>
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    fb02:	2380      	movs	r3, #128	; 0x80
    fb04:	00db      	lsls	r3, r3, #3
    fb06:	6862      	ldr	r2, [r4, #4]
    fb08:	429a      	cmp	r2, r3
    fb0a:	d8e5      	bhi.n	fad8 <http_client_callback+0x1c>
			printf("Callback: CRC download......\r\n");
    fb0c:	487d      	ldr	r0, [pc, #500]	; (fd04 <http_client_callback+0x248>)
    fb0e:	4b78      	ldr	r3, [pc, #480]	; (fcf0 <http_client_callback+0x234>)
    fb10:	4798      	blx	r3
			dlCRC = *(uint32_t *)data->recv_response.content;
    fb12:	68a3      	ldr	r3, [r4, #8]
    fb14:	681b      	ldr	r3, [r3, #0]
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
    fb16:	0e19      	lsrs	r1, r3, #24
                    ((dlCRC<<24)&0xff000000); // byte 0 to byte 3
    fb18:	061a      	lsls	r2, r3, #24
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
    fb1a:	4311      	orrs	r1, r2
                    ((dlCRC<<8)&0xff0000) | // move byte 1 to byte 2
    fb1c:	021a      	lsls	r2, r3, #8
    fb1e:	20ff      	movs	r0, #255	; 0xff
    fb20:	0400      	lsls	r0, r0, #16
    fb22:	4002      	ands	r2, r0
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
    fb24:	4311      	orrs	r1, r2
    fb26:	0a1b      	lsrs	r3, r3, #8
    fb28:	22ff      	movs	r2, #255	; 0xff
    fb2a:	0212      	lsls	r2, r2, #8
    fb2c:	4013      	ands	r3, r2
    fb2e:	4319      	orrs	r1, r3
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
    fb30:	4b75      	ldr	r3, [pc, #468]	; (fd08 <http_client_callback+0x24c>)
    fb32:	6019      	str	r1, [r3, #0]
			printf("Received %x\r\n", (uint32_t)dlCRC);
    fb34:	4875      	ldr	r0, [pc, #468]	; (fd0c <http_client_callback+0x250>)
    fb36:	4b72      	ldr	r3, [pc, #456]	; (fd00 <http_client_callback+0x244>)
    fb38:	4798      	blx	r3
	down_state |= mask;
    fb3a:	4a6f      	ldr	r2, [pc, #444]	; (fcf8 <http_client_callback+0x23c>)
    fb3c:	7813      	ldrb	r3, [r2, #0]
    fb3e:	2110      	movs	r1, #16
    fb40:	430b      	orrs	r3, r1
    fb42:	7013      	strb	r3, [r2, #0]
    fb44:	e7c8      	b.n	fad8 <http_client_callback+0x1c>
    fb46:	4a6c      	ldr	r2, [pc, #432]	; (fcf8 <http_client_callback+0x23c>)
    fb48:	7813      	ldrb	r3, [r2, #0]
    fb4a:	2120      	movs	r1, #32
    fb4c:	430b      	orrs	r3, r1
    fb4e:	7013      	strb	r3, [r2, #0]
    fb50:	e7c2      	b.n	fad8 <http_client_callback+0x1c>
		printf("http_client_callback_CHUNKED DATA: received response data size %u\r\n",
    fb52:	6811      	ldr	r1, [r2, #0]
    fb54:	486e      	ldr	r0, [pc, #440]	; (fd10 <http_client_callback+0x254>)
    fb56:	4b6a      	ldr	r3, [pc, #424]	; (fd00 <http_client_callback+0x244>)
    fb58:	4798      	blx	r3
		if (firstCRC) {
    fb5a:	4b6e      	ldr	r3, [pc, #440]	; (fd14 <http_client_callback+0x258>)
    fb5c:	781b      	ldrb	r3, [r3, #0]
    fb5e:	2b00      	cmp	r3, #0
    fb60:	d05a      	beq.n	fc18 <http_client_callback+0x15c>
			crc32_calculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
    fb62:	6821      	ldr	r1, [r4, #0]
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
	*crc = 0;
    fb64:	4d6c      	ldr	r5, [pc, #432]	; (fd18 <http_client_callback+0x25c>)
    fb66:	2600      	movs	r6, #0
    fb68:	602e      	str	r6, [r5, #0]

	return crc32_recalculate(data, length, crc);
    fb6a:	002a      	movs	r2, r5
    fb6c:	6860      	ldr	r0, [r4, #4]
    fb6e:	4b6b      	ldr	r3, [pc, #428]	; (fd1c <http_client_callback+0x260>)
    fb70:	4798      	blx	r3
			printf("First block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
    fb72:	682a      	ldr	r2, [r5, #0]
    fb74:	6821      	ldr	r1, [r4, #0]
    fb76:	486a      	ldr	r0, [pc, #424]	; (fd20 <http_client_callback+0x264>)
    fb78:	4b61      	ldr	r3, [pc, #388]	; (fd00 <http_client_callback+0x244>)
    fb7a:	4798      	blx	r3
			firstCRC = false;
    fb7c:	4b65      	ldr	r3, [pc, #404]	; (fd14 <http_client_callback+0x258>)
    fb7e:	701e      	strb	r6, [r3, #0]
		if (http_buf_write_ptr + data->recv_chunked_data.length > 2048){
    fb80:	6822      	ldr	r2, [r4, #0]
    fb82:	4b68      	ldr	r3, [pc, #416]	; (fd24 <http_client_callback+0x268>)
    fb84:	681d      	ldr	r5, [r3, #0]
    fb86:	1951      	adds	r1, r2, r5
    fb88:	2380      	movs	r3, #128	; 0x80
    fb8a:	011b      	lsls	r3, r3, #4
    fb8c:	4299      	cmp	r1, r3
    fb8e:	d94f      	bls.n	fc30 <http_client_callback+0x174>
			memcpy_ram2ram(http_buf + http_buf_write_ptr,data->recv_chunked_data.data,(2048-http_buf_write_ptr));
    fb90:	1b5e      	subs	r6, r3, r5
    fb92:	4b65      	ldr	r3, [pc, #404]	; (fd28 <http_client_callback+0x26c>)
    fb94:	4698      	mov	r8, r3
    fb96:	18e8      	adds	r0, r5, r3
    fb98:	0032      	movs	r2, r6
    fb9a:	6861      	ldr	r1, [r4, #4]
    fb9c:	4f63      	ldr	r7, [pc, #396]	; (fd2c <http_client_callback+0x270>)
    fb9e:	47b8      	blx	r7
    fba0:	4b63      	ldr	r3, [pc, #396]	; (fd30 <http_client_callback+0x274>)
    fba2:	469c      	mov	ip, r3
    fba4:	4465      	add	r5, ip
			memcpy_ram2ram(http_buf, data->recv_chunked_data.data + (2048-http_buf_write_ptr), data->recv_chunked_data.length-(2048-http_buf_write_ptr));
    fba6:	6823      	ldr	r3, [r4, #0]
    fba8:	18ea      	adds	r2, r5, r3
    fbaa:	6863      	ldr	r3, [r4, #4]
    fbac:	1999      	adds	r1, r3, r6
    fbae:	4640      	mov	r0, r8
    fbb0:	47b8      	blx	r7
			http_buf_write_ptr = data->recv_chunked_data.length-(2048-http_buf_write_ptr);
    fbb2:	6823      	ldr	r3, [r4, #0]
    fbb4:	469c      	mov	ip, r3
    fbb6:	4465      	add	r5, ip
    fbb8:	4b5a      	ldr	r3, [pc, #360]	; (fd24 <http_client_callback+0x268>)
    fbba:	601d      	str	r5, [r3, #0]
		if  (http_buf_write_ptr > http_buf_read_ptr){
    fbbc:	4b59      	ldr	r3, [pc, #356]	; (fd24 <http_client_callback+0x268>)
    fbbe:	681f      	ldr	r7, [r3, #0]
    fbc0:	4b5c      	ldr	r3, [pc, #368]	; (fd34 <http_client_callback+0x278>)
    fbc2:	681b      	ldr	r3, [r3, #0]
    fbc4:	429f      	cmp	r7, r3
    fbc6:	d93e      	bls.n	fc46 <http_client_callback+0x18a>
			uint8 n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
    fbc8:	1aff      	subs	r7, r7, r3
			for (int i=0 ; i<n ; i++ ){
    fbca:	043f      	lsls	r7, r7, #16
    fbcc:	0e3f      	lsrs	r7, r7, #24
    fbce:	2f00      	cmp	r7, #0
    fbd0:	dd0d      	ble.n	fbee <http_client_callback+0x132>
    fbd2:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
    fbd4:	4b58      	ldr	r3, [pc, #352]	; (fd38 <http_client_callback+0x27c>)
    fbd6:	4699      	mov	r9, r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fbd8:	4e56      	ldr	r6, [pc, #344]	; (fd34 <http_client_callback+0x278>)
				write_spi_flash_frm_buf(256);
    fbda:	2080      	movs	r0, #128	; 0x80
    fbdc:	0040      	lsls	r0, r0, #1
    fbde:	47c8      	blx	r9
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fbe0:	6833      	ldr	r3, [r6, #0]
    fbe2:	3301      	adds	r3, #1
    fbe4:	33ff      	adds	r3, #255	; 0xff
    fbe6:	6033      	str	r3, [r6, #0]
			for (int i=0 ; i<n ; i++ ){
    fbe8:	3501      	adds	r5, #1
    fbea:	42bd      	cmp	r5, r7
    fbec:	d1f5      	bne.n	fbda <http_client_callback+0x11e>
		if (data->recv_chunked_data.is_complete) {
    fbee:	7a23      	ldrb	r3, [r4, #8]
    fbf0:	2b00      	cmp	r3, #0
    fbf2:	d100      	bne.n	fbf6 <http_client_callback+0x13a>
    fbf4:	e770      	b.n	fad8 <http_client_callback+0x1c>
	down_state |= mask;
    fbf6:	4a40      	ldr	r2, [pc, #256]	; (fcf8 <http_client_callback+0x23c>)
    fbf8:	7813      	ldrb	r3, [r2, #0]
    fbfa:	2110      	movs	r1, #16
    fbfc:	430b      	orrs	r3, r1
    fbfe:	7013      	strb	r3, [r2, #0]
			if  (http_buf_write_ptr < http_buf_read_ptr){
    fc00:	4b48      	ldr	r3, [pc, #288]	; (fd24 <http_client_callback+0x268>)
    fc02:	6818      	ldr	r0, [r3, #0]
    fc04:	4b4b      	ldr	r3, [pc, #300]	; (fd34 <http_client_callback+0x278>)
    fc06:	681b      	ldr	r3, [r3, #0]
    fc08:	4298      	cmp	r0, r3
    fc0a:	d349      	bcc.n	fca0 <http_client_callback+0x1e4>
			else if(http_buf_write_ptr > http_buf_read_ptr){
    fc0c:	d800      	bhi.n	fc10 <http_client_callback+0x154>
    fc0e:	e763      	b.n	fad8 <http_client_callback+0x1c>
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
    fc10:	1ac0      	subs	r0, r0, r3
    fc12:	4b49      	ldr	r3, [pc, #292]	; (fd38 <http_client_callback+0x27c>)
    fc14:	4798      	blx	r3
    fc16:	e75f      	b.n	fad8 <http_client_callback+0x1c>
			crc32_recalculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
    fc18:	4d3f      	ldr	r5, [pc, #252]	; (fd18 <http_client_callback+0x25c>)
    fc1a:	002a      	movs	r2, r5
    fc1c:	6821      	ldr	r1, [r4, #0]
    fc1e:	6860      	ldr	r0, [r4, #4]
    fc20:	4b3e      	ldr	r3, [pc, #248]	; (fd1c <http_client_callback+0x260>)
    fc22:	4798      	blx	r3
			printf("Block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
    fc24:	682a      	ldr	r2, [r5, #0]
    fc26:	6821      	ldr	r1, [r4, #0]
    fc28:	4844      	ldr	r0, [pc, #272]	; (fd3c <http_client_callback+0x280>)
    fc2a:	4b35      	ldr	r3, [pc, #212]	; (fd00 <http_client_callback+0x244>)
    fc2c:	4798      	blx	r3
    fc2e:	e7a7      	b.n	fb80 <http_client_callback+0xc4>
			memcpy_ram2ram(http_buf + http_buf_write_ptr, data->recv_chunked_data.data, data->recv_chunked_data.length);
    fc30:	483d      	ldr	r0, [pc, #244]	; (fd28 <http_client_callback+0x26c>)
    fc32:	1828      	adds	r0, r5, r0
    fc34:	6861      	ldr	r1, [r4, #4]
    fc36:	4b3d      	ldr	r3, [pc, #244]	; (fd2c <http_client_callback+0x270>)
    fc38:	4798      	blx	r3
			http_buf_write_ptr = http_buf_write_ptr + data->recv_chunked_data.length;
    fc3a:	6823      	ldr	r3, [r4, #0]
    fc3c:	469c      	mov	ip, r3
    fc3e:	4465      	add	r5, ip
    fc40:	4b38      	ldr	r3, [pc, #224]	; (fd24 <http_client_callback+0x268>)
    fc42:	601d      	str	r5, [r3, #0]
    fc44:	e7ba      	b.n	fbbc <http_client_callback+0x100>
		else if (http_buf_write_ptr < http_buf_read_ptr){
    fc46:	429f      	cmp	r7, r3
    fc48:	d2d1      	bcs.n	fbee <http_client_callback+0x132>
			uint8 n = (2048 - http_buf_read_ptr) / 256;
    fc4a:	2780      	movs	r7, #128	; 0x80
    fc4c:	013f      	lsls	r7, r7, #4
    fc4e:	1aff      	subs	r7, r7, r3
			for (int i=0 ; i<n ; i++ ){
    fc50:	043f      	lsls	r7, r7, #16
    fc52:	0e3b      	lsrs	r3, r7, #24
    fc54:	4698      	mov	r8, r3
    fc56:	2b00      	cmp	r3, #0
    fc58:	dd0c      	ble.n	fc74 <http_client_callback+0x1b8>
    fc5a:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
    fc5c:	4e36      	ldr	r6, [pc, #216]	; (fd38 <http_client_callback+0x27c>)
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fc5e:	4f35      	ldr	r7, [pc, #212]	; (fd34 <http_client_callback+0x278>)
				write_spi_flash_frm_buf(256);
    fc60:	2080      	movs	r0, #128	; 0x80
    fc62:	0040      	lsls	r0, r0, #1
    fc64:	47b0      	blx	r6
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fc66:	683b      	ldr	r3, [r7, #0]
    fc68:	3301      	adds	r3, #1
    fc6a:	33ff      	adds	r3, #255	; 0xff
    fc6c:	603b      	str	r3, [r7, #0]
			for (int i=0 ; i<n ; i++ ){
    fc6e:	3501      	adds	r5, #1
    fc70:	45a8      	cmp	r8, r5
    fc72:	d1f5      	bne.n	fc60 <http_client_callback+0x1a4>
			http_buf_read_ptr = 0;
    fc74:	2200      	movs	r2, #0
    fc76:	4b2f      	ldr	r3, [pc, #188]	; (fd34 <http_client_callback+0x278>)
    fc78:	601a      	str	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
    fc7a:	4b2a      	ldr	r3, [pc, #168]	; (fd24 <http_client_callback+0x268>)
    fc7c:	785b      	ldrb	r3, [r3, #1]
    fc7e:	4698      	mov	r8, r3
    fc80:	2b00      	cmp	r3, #0
    fc82:	ddb4      	ble.n	fbee <http_client_callback+0x132>
    fc84:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
    fc86:	4e2c      	ldr	r6, [pc, #176]	; (fd38 <http_client_callback+0x27c>)
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fc88:	4f2a      	ldr	r7, [pc, #168]	; (fd34 <http_client_callback+0x278>)
				write_spi_flash_frm_buf(256);
    fc8a:	2080      	movs	r0, #128	; 0x80
    fc8c:	0040      	lsls	r0, r0, #1
    fc8e:	47b0      	blx	r6
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fc90:	683b      	ldr	r3, [r7, #0]
    fc92:	3301      	adds	r3, #1
    fc94:	33ff      	adds	r3, #255	; 0xff
    fc96:	603b      	str	r3, [r7, #0]
			for (int i=0 ; i<n ; i++ ){
    fc98:	3501      	adds	r5, #1
    fc9a:	4545      	cmp	r5, r8
    fc9c:	d1f5      	bne.n	fc8a <http_client_callback+0x1ce>
    fc9e:	e7a6      	b.n	fbee <http_client_callback+0x132>
				http_buf_read_ptr =0;
    fca0:	2200      	movs	r2, #0
    fca2:	4b24      	ldr	r3, [pc, #144]	; (fd34 <http_client_callback+0x278>)
    fca4:	601a      	str	r2, [r3, #0]
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
    fca6:	4b24      	ldr	r3, [pc, #144]	; (fd38 <http_client_callback+0x27c>)
    fca8:	4798      	blx	r3
    fcaa:	e715      	b.n	fad8 <http_client_callback+0x1c>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    fcac:	6811      	ldr	r1, [r2, #0]
    fcae:	4824      	ldr	r0, [pc, #144]	; (fd40 <http_client_callback+0x284>)
    fcb0:	4b13      	ldr	r3, [pc, #76]	; (fd00 <http_client_callback+0x244>)
    fcb2:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    fcb4:	6823      	ldr	r3, [r4, #0]
    fcb6:	330b      	adds	r3, #11
    fcb8:	d000      	beq.n	fcbc <http_client_callback+0x200>
    fcba:	e70d      	b.n	fad8 <http_client_callback+0x1c>
	return ((down_state & mask) != 0);
    fcbc:	4b0e      	ldr	r3, [pc, #56]	; (fcf8 <http_client_callback+0x23c>)
    fcbe:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
    fcc0:	071a      	lsls	r2, r3, #28
    fcc2:	d406      	bmi.n	fcd2 <http_client_callback+0x216>
	return ((down_state & mask) != 0);
    fcc4:	4b0c      	ldr	r3, [pc, #48]	; (fcf8 <http_client_callback+0x23c>)
    fcc6:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    fcc8:	075a      	lsls	r2, r3, #29
    fcca:	d407      	bmi.n	fcdc <http_client_callback+0x220>
			start_download();
    fccc:	4b1d      	ldr	r3, [pc, #116]	; (fd44 <http_client_callback+0x288>)
    fcce:	4798      	blx	r3
    fcd0:	e702      	b.n	fad8 <http_client_callback+0x1c>
	down_state &= ~mask;
    fcd2:	2208      	movs	r2, #8
    fcd4:	4393      	bics	r3, r2
    fcd6:	4a08      	ldr	r2, [pc, #32]	; (fcf8 <http_client_callback+0x23c>)
    fcd8:	7013      	strb	r3, [r2, #0]
    fcda:	e7f3      	b.n	fcc4 <http_client_callback+0x208>
    fcdc:	2204      	movs	r2, #4
    fcde:	4393      	bics	r3, r2
    fce0:	4a05      	ldr	r2, [pc, #20]	; (fcf8 <http_client_callback+0x23c>)
    fce2:	7013      	strb	r3, [r2, #0]
    fce4:	e7f2      	b.n	fccc <http_client_callback+0x210>
    fce6:	46c0      	nop			; (mov r8, r8)
    fce8:	00014088 	.word	0x00014088
    fcec:	0001409c 	.word	0x0001409c
    fcf0:	00011985 	.word	0x00011985
    fcf4:	000140d4 	.word	0x000140d4
    fcf8:	200002bc 	.word	0x200002bc
    fcfc:	00014100 	.word	0x00014100
    fd00:	00011869 	.word	0x00011869
    fd04:	0001413c 	.word	0x0001413c
    fd08:	20000f94 	.word	0x20000f94
    fd0c:	0001415c 	.word	0x0001415c
    fd10:	0001416c 	.word	0x0001416c
    fd14:	2000000b 	.word	0x2000000b
    fd18:	20000f90 	.word	0x20000f90
    fd1c:	0000bce9 	.word	0x0000bce9
    fd20:	000141b0 	.word	0x000141b0
    fd24:	200002c4 	.word	0x200002c4
    fd28:	2000060c 	.word	0x2000060c
    fd2c:	000116d1 	.word	0x000116d1
    fd30:	fffff800 	.word	0xfffff800
    fd34:	200002c0 	.word	0x200002c0
    fd38:	0000fa51 	.word	0x0000fa51
    fd3c:	000141d0 	.word	0x000141d0
    fd40:	000141ec 	.word	0x000141ec
    fd44:	0000f559 	.word	0x0000f559

0000fd48 <main>:
	}
	
	download_CRC = false;
}
int main(void)
{
    fd48:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd4a:	46d6      	mov	lr, sl
    fd4c:	464f      	mov	r7, r9
    fd4e:	4646      	mov	r6, r8
    fd50:	b5c0      	push	{r6, r7, lr}
    fd52:	b0ac      	sub	sp, #176	; 0xb0
	tstrWifiInitParam param;
	int8_t ret;
	char topic[strlen(MAIN_CHAT_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];
	system_init();
    fd54:	4be3      	ldr	r3, [pc, #908]	; (100e4 <main+0x39c>)
    fd56:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    fd58:	aa14      	add	r2, sp, #80	; 0x50
    fd5a:	2380      	movs	r3, #128	; 0x80
    fd5c:	05db      	lsls	r3, r3, #23
    fd5e:	9314      	str	r3, [sp, #80]	; 0x50
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    fd60:	2300      	movs	r3, #0
    fd62:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    fd64:	21ff      	movs	r1, #255	; 0xff
    fd66:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    fd68:	2100      	movs	r1, #0
    fd6a:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    fd6c:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    fd6e:	2501      	movs	r5, #1
    fd70:	2024      	movs	r0, #36	; 0x24
    fd72:	5415      	strb	r5, [r2, r0]
	config->transmitter_enable = true;
    fd74:	3001      	adds	r0, #1
    fd76:	5415      	strb	r5, [r2, r0]
	config->clock_polarity_inverted = false;
    fd78:	3001      	adds	r0, #1
    fd7a:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    fd7c:	3001      	adds	r0, #1
    fd7e:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    fd80:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    fd82:	3005      	adds	r0, #5
    fd84:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    fd86:	3001      	adds	r0, #1
    fd88:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    fd8a:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    fd8c:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    fd8e:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    fd90:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    fd92:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    fd94:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    fd96:	2313      	movs	r3, #19
    fd98:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    fd9a:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    fd9c:	23c4      	movs	r3, #196	; 0xc4
    fd9e:	039b      	lsls	r3, r3, #14
    fda0:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    fda2:	2301      	movs	r3, #1
    fda4:	425b      	negs	r3, r3
    fda6:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    fda8:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    fdaa:	4bcf      	ldr	r3, [pc, #828]	; (100e8 <main+0x3a0>)
    fdac:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    fdae:	4bcf      	ldr	r3, [pc, #828]	; (100ec <main+0x3a4>)
    fdb0:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    fdb2:	23e1      	movs	r3, #225	; 0xe1
    fdb4:	025b      	lsls	r3, r3, #9
    fdb6:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    fdb8:	4ccd      	ldr	r4, [pc, #820]	; (100f0 <main+0x3a8>)
    fdba:	4bce      	ldr	r3, [pc, #824]	; (100f4 <main+0x3ac>)
    fdbc:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    fdbe:	49ce      	ldr	r1, [pc, #824]	; (100f8 <main+0x3b0>)
    fdc0:	4bce      	ldr	r3, [pc, #824]	; (100fc <main+0x3b4>)
    fdc2:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    fdc4:	49ce      	ldr	r1, [pc, #824]	; (10100 <main+0x3b8>)
    fdc6:	4bcf      	ldr	r3, [pc, #828]	; (10104 <main+0x3bc>)
    fdc8:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    fdca:	49cf      	ldr	r1, [pc, #828]	; (10108 <main+0x3c0>)
    fdcc:	0020      	movs	r0, r4
    fdce:	4bcf      	ldr	r3, [pc, #828]	; (1010c <main+0x3c4>)
    fdd0:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    fdd2:	4fcf      	ldr	r7, [pc, #828]	; (10110 <main+0x3c8>)
    fdd4:	683b      	ldr	r3, [r7, #0]
    fdd6:	6898      	ldr	r0, [r3, #8]
    fdd8:	2100      	movs	r1, #0
    fdda:	4ece      	ldr	r6, [pc, #824]	; (10114 <main+0x3cc>)
    fddc:	47b0      	blx	r6
	setbuf(stdin, NULL);
    fdde:	683b      	ldr	r3, [r7, #0]
    fde0:	6858      	ldr	r0, [r3, #4]
    fde2:	2100      	movs	r1, #0
    fde4:	47b0      	blx	r6
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    fde6:	2201      	movs	r2, #1
    fde8:	49cb      	ldr	r1, [pc, #812]	; (10118 <main+0x3d0>)
    fdea:	0020      	movs	r0, r4
    fdec:	4bcb      	ldr	r3, [pc, #812]	; (1011c <main+0x3d4>)
    fdee:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    fdf0:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    fdf2:	0030      	movs	r0, r6
    fdf4:	4bca      	ldr	r3, [pc, #808]	; (10120 <main+0x3d8>)
    fdf6:	4798      	blx	r3
    fdf8:	231f      	movs	r3, #31
    fdfa:	4018      	ands	r0, r3
    fdfc:	4085      	lsls	r5, r0
    fdfe:	4ac9      	ldr	r2, [pc, #804]	; (10124 <main+0x3dc>)
    fe00:	6015      	str	r5, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    fe02:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    fe04:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    fe06:	2b00      	cmp	r3, #0
    fe08:	d1fc      	bne.n	fe04 <main+0xbc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    fe0a:	6833      	ldr	r3, [r6, #0]
    fe0c:	2202      	movs	r2, #2
    fe0e:	4313      	orrs	r3, r2
    fe10:	6033      	str	r3, [r6, #0]
	sw_timer_get_config_defaults(&swt_conf);
    fe12:	ac14      	add	r4, sp, #80	; 0x50
    fe14:	0020      	movs	r0, r4
    fe16:	4bc4      	ldr	r3, [pc, #784]	; (10128 <main+0x3e0>)
    fe18:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    fe1a:	4dc4      	ldr	r5, [pc, #784]	; (1012c <main+0x3e4>)
    fe1c:	0021      	movs	r1, r4
    fe1e:	0028      	movs	r0, r5
    fe20:	4bc3      	ldr	r3, [pc, #780]	; (10130 <main+0x3e8>)
    fe22:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    fe24:	0028      	movs	r0, r5
    fe26:	4bc3      	ldr	r3, [pc, #780]	; (10134 <main+0x3ec>)
    fe28:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
    fe2a:	0020      	movs	r0, r4
    fe2c:	4bc2      	ldr	r3, [pc, #776]	; (10138 <main+0x3f0>)
    fe2e:	4798      	blx	r3
	mqtt_conf.timer_inst = &swt_module_inst;
    fe30:	6065      	str	r5, [r4, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
    fe32:	4bc2      	ldr	r3, [pc, #776]	; (1013c <main+0x3f4>)
    fe34:	60e3      	str	r3, [r4, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    fe36:	2380      	movs	r3, #128	; 0x80
    fe38:	6123      	str	r3, [r4, #16]
	mqtt_conf.port = MQTT_PORT;
    fe3a:	4bc1      	ldr	r3, [pc, #772]	; (10140 <main+0x3f8>)
    fe3c:	8023      	strh	r3, [r4, #0]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    fe3e:	0021      	movs	r1, r4
    fe40:	48c0      	ldr	r0, [pc, #768]	; (10144 <main+0x3fc>)
    fe42:	4bc1      	ldr	r3, [pc, #772]	; (10148 <main+0x400>)
    fe44:	4798      	blx	r3
    fe46:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    fe48:	da00      	bge.n	fe4c <main+0x104>
    fe4a:	e090      	b.n	ff6e <main+0x226>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    fe4c:	49bf      	ldr	r1, [pc, #764]	; (1014c <main+0x404>)
    fe4e:	48bd      	ldr	r0, [pc, #756]	; (10144 <main+0x3fc>)
    fe50:	4bbf      	ldr	r3, [pc, #764]	; (10150 <main+0x408>)
    fe52:	4798      	blx	r3
    fe54:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    fe56:	da00      	bge.n	fe5a <main+0x112>
    fe58:	e08d      	b.n	ff76 <main+0x22e>
	configure_console();
	configure_timer();
	configure_mqtt();
	nm_bsp_init();
    fe5a:	4bbe      	ldr	r3, [pc, #760]	; (10154 <main+0x40c>)
    fe5c:	4798      	blx	r3
	down_state = NOT_READY;
    fe5e:	2500      	movs	r5, #0
    fe60:	4bbd      	ldr	r3, [pc, #756]	; (10158 <main+0x410>)
    fe62:	701d      	strb	r5, [r3, #0]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    fe64:	ac14      	add	r4, sp, #80	; 0x50
    fe66:	7025      	strb	r5, [r4, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    fe68:	4bbc      	ldr	r3, [pc, #752]	; (1015c <main+0x414>)
    fe6a:	685b      	ldr	r3, [r3, #4]
    fe6c:	06db      	lsls	r3, r3, #27
    fe6e:	0f1b      	lsrs	r3, r3, #28
    fe70:	70a3      	strb	r3, [r4, #2]
	config->disable_cache     = false;
    fe72:	70e5      	strb	r5, [r4, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    fe74:	7125      	strb	r5, [r4, #4]
	config.manual_page_write = false;
    fe76:	7065      	strb	r5, [r4, #1]
	nvm_set_config(&config);
    fe78:	0020      	movs	r0, r4
    fe7a:	4bb9      	ldr	r3, [pc, #740]	; (10160 <main+0x418>)
    fe7c:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    fe7e:	2601      	movs	r6, #1
    fe80:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    fe82:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    fe84:	60a5      	str	r5, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    fe86:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    fe88:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    fe8a:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
    fe8c:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
    fe8e:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    fe90:	2324      	movs	r3, #36	; 0x24
    fe92:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    fe94:	220c      	movs	r2, #12
    fe96:	2100      	movs	r1, #0
    fe98:	a81a      	add	r0, sp, #104	; 0x68
    fe9a:	4bb2      	ldr	r3, [pc, #712]	; (10164 <main+0x41c>)
    fe9c:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    fe9e:	4bb2      	ldr	r3, [pc, #712]	; (10168 <main+0x420>)
    fea0:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    fea2:	2380      	movs	r3, #128	; 0x80
    fea4:	025b      	lsls	r3, r3, #9
    fea6:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    fea8:	4bb0      	ldr	r3, [pc, #704]	; (1016c <main+0x424>)
    feaa:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    feac:	2301      	movs	r3, #1
    feae:	425b      	negs	r3, r3
    feb0:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    feb2:	4baf      	ldr	r3, [pc, #700]	; (10170 <main+0x428>)
    feb4:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    feb6:	4baf      	ldr	r3, [pc, #700]	; (10174 <main+0x42c>)
    feb8:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    feba:	4daf      	ldr	r5, [pc, #700]	; (10178 <main+0x430>)
    febc:	0022      	movs	r2, r4
    febe:	49af      	ldr	r1, [pc, #700]	; (1017c <main+0x434>)
    fec0:	0028      	movs	r0, r5
    fec2:	4baf      	ldr	r3, [pc, #700]	; (10180 <main+0x438>)
    fec4:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    fec6:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    fec8:	0020      	movs	r0, r4
    feca:	4b95      	ldr	r3, [pc, #596]	; (10120 <main+0x3d8>)
    fecc:	4798      	blx	r3
    fece:	231f      	movs	r3, #31
    fed0:	4018      	ands	r0, r3
    fed2:	4086      	lsls	r6, r0
    fed4:	4a93      	ldr	r2, [pc, #588]	; (10124 <main+0x3dc>)
    fed6:	6016      	str	r6, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    fed8:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    feda:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    fedc:	2b00      	cmp	r3, #0
    fede:	d1fc      	bne.n	feda <main+0x192>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    fee0:	6823      	ldr	r3, [r4, #0]
    fee2:	2202      	movs	r2, #2
    fee4:	4313      	orrs	r3, r2
    fee6:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
    fee8:	4ca6      	ldr	r4, [pc, #664]	; (10184 <main+0x43c>)
    feea:	2304      	movs	r3, #4
    feec:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
    feee:	3303      	adds	r3, #3
    fef0:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
    fef2:	4ba1      	ldr	r3, [pc, #644]	; (10178 <main+0x430>)
    fef4:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    fef6:	a904      	add	r1, sp, #16
    fef8:	2301      	movs	r3, #1
    fefa:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    fefc:	2200      	movs	r2, #0
    fefe:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    ff00:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    ff02:	2007      	movs	r0, #7
    ff04:	4ba0      	ldr	r3, [pc, #640]	; (10188 <main+0x440>)
    ff06:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    ff08:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    ff0a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    ff0c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    ff0e:	2900      	cmp	r1, #0
    ff10:	d104      	bne.n	ff1c <main+0x1d4>
		return &(ports[port_index]->Group[group_index]);
    ff12:	0953      	lsrs	r3, r2, #5
    ff14:	01db      	lsls	r3, r3, #7
    ff16:	499d      	ldr	r1, [pc, #628]	; (1018c <main+0x444>)
    ff18:	468c      	mov	ip, r1
    ff1a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    ff1c:	211f      	movs	r1, #31
    ff1e:	4011      	ands	r1, r2
    ff20:	2201      	movs	r2, #1
    ff22:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    ff24:	619a      	str	r2, [r3, #24]
	init_state();
	configure_nvm();
	configure_spi_flash();
	configure_port_pins();
    ff26:	4b9a      	ldr	r3, [pc, #616]	; (10190 <main+0x448>)
    ff28:	4798      	blx	r3
	
	printf("I am firmware version %d\r\n", FIRMWARE_VERSION);
    ff2a:	2101      	movs	r1, #1
    ff2c:	4899      	ldr	r0, [pc, #612]	; (10194 <main+0x44c>)
    ff2e:	4c9a      	ldr	r4, [pc, #616]	; (10198 <main+0x450>)
    ff30:	47a0      	blx	r4
	
	printf("User : %s\r\n", mqtt_user);
    ff32:	499a      	ldr	r1, [pc, #616]	; (1019c <main+0x454>)
    ff34:	489a      	ldr	r0, [pc, #616]	; (101a0 <main+0x458>)
    ff36:	47a0      	blx	r4
	printf("Password : %s\r\n", mqtt_pass);
    ff38:	499a      	ldr	r1, [pc, #616]	; (101a4 <main+0x45c>)
    ff3a:	489b      	ldr	r0, [pc, #620]	; (101a8 <main+0x460>)
    ff3c:	47a0      	blx	r4
	sprintf(topic, "%s", MAIN_CHAT_TOPIC);
    ff3e:	a914      	add	r1, sp, #80	; 0x50
    ff40:	4b9a      	ldr	r3, [pc, #616]	; (101ac <main+0x464>)
    ff42:	681a      	ldr	r2, [r3, #0]
    ff44:	9214      	str	r2, [sp, #80]	; 0x50
    ff46:	791b      	ldrb	r3, [r3, #4]
    ff48:	710b      	strb	r3, [r1, #4]
	printf("Topic : %s\r\n", topic);
    ff4a:	4899      	ldr	r0, [pc, #612]	; (101b0 <main+0x468>)
    ff4c:	47a0      	blx	r4
	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    ff4e:	2218      	movs	r2, #24
    ff50:	2100      	movs	r1, #0
    ff52:	a826      	add	r0, sp, #152	; 0x98
    ff54:	4b83      	ldr	r3, [pc, #524]	; (10164 <main+0x41c>)
    ff56:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    ff58:	4b96      	ldr	r3, [pc, #600]	; (101b4 <main+0x46c>)
    ff5a:	9326      	str	r3, [sp, #152]	; 0x98
	ret = m2m_wifi_init(&param);
    ff5c:	a826      	add	r0, sp, #152	; 0x98
    ff5e:	4b96      	ldr	r3, [pc, #600]	; (101b8 <main+0x470>)
    ff60:	4798      	blx	r3
    ff62:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    ff64:	d00b      	beq.n	ff7e <main+0x236>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    ff66:	4895      	ldr	r0, [pc, #596]	; (101bc <main+0x474>)
    ff68:	4b8b      	ldr	r3, [pc, #556]	; (10198 <main+0x450>)
    ff6a:	4798      	blx	r3
    ff6c:	e7fe      	b.n	ff6c <main+0x224>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    ff6e:	4894      	ldr	r0, [pc, #592]	; (101c0 <main+0x478>)
    ff70:	4b89      	ldr	r3, [pc, #548]	; (10198 <main+0x450>)
    ff72:	4798      	blx	r3
    ff74:	e7fe      	b.n	ff74 <main+0x22c>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    ff76:	4893      	ldr	r0, [pc, #588]	; (101c4 <main+0x47c>)
    ff78:	4b87      	ldr	r3, [pc, #540]	; (10198 <main+0x450>)
    ff7a:	4798      	blx	r3
    ff7c:	e7fe      	b.n	ff7c <main+0x234>
		while (1) { /* Loop forever. */
		}
	}

	/* Initialize socket interface. */
	socketInit();
    ff7e:	4b92      	ldr	r3, [pc, #584]	; (101c8 <main+0x480>)
    ff80:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    ff82:	4992      	ldr	r1, [pc, #584]	; (101cc <main+0x484>)
    ff84:	4892      	ldr	r0, [pc, #584]	; (101d0 <main+0x488>)
    ff86:	4b93      	ldr	r3, [pc, #588]	; (101d4 <main+0x48c>)
    ff88:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    ff8a:	23ff      	movs	r3, #255	; 0xff
    ff8c:	9300      	str	r3, [sp, #0]
    ff8e:	4b92      	ldr	r3, [pc, #584]	; (101d8 <main+0x490>)
    ff90:	2202      	movs	r2, #2
    ff92:	210b      	movs	r1, #11
    ff94:	4891      	ldr	r0, [pc, #580]	; (101dc <main+0x494>)
    ff96:	4c92      	ldr	r4, [pc, #584]	; (101e0 <main+0x498>)
    ff98:	47a0      	blx	r4
			MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);

	while (1) {
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    ff9a:	4e92      	ldr	r6, [pc, #584]	; (101e4 <main+0x49c>)
			if (uart_buffer[i] == '\n') {
    ff9c:	4d92      	ldr	r5, [pc, #584]	; (101e8 <main+0x4a0>)
    ff9e:	e02a      	b.n	fff6 <main+0x2ae>
		mqtt_publish(&mqtt_inst, topic, uart_buffer, MAIN_CHAT_BUFFER_SIZE, 0, 0);
    ffa0:	2400      	movs	r4, #0
    ffa2:	9401      	str	r4, [sp, #4]
    ffa4:	9400      	str	r4, [sp, #0]
    ffa6:	2340      	movs	r3, #64	; 0x40
    ffa8:	4a8f      	ldr	r2, [pc, #572]	; (101e8 <main+0x4a0>)
    ffaa:	a914      	add	r1, sp, #80	; 0x50
    ffac:	4865      	ldr	r0, [pc, #404]	; (10144 <main+0x3fc>)
    ffae:	4f8f      	ldr	r7, [pc, #572]	; (101ec <main+0x4a4>)
    ffb0:	47b8      	blx	r7
		uart_buffer_written = 0;
    ffb2:	4b8f      	ldr	r3, [pc, #572]	; (101f0 <main+0x4a8>)
    ffb4:	601c      	str	r4, [r3, #0]
    ffb6:	e016      	b.n	ffe6 <main+0x29e>
				mqtt_publish(&mqtt_inst, topic, uart_buffer, (i > 0 && uart_buffer[i - 1] == '\r') ? i - 1 : i, 0, 0);
    ffb8:	2c00      	cmp	r4, #0
    ffba:	dd03      	ble.n	ffc4 <main+0x27c>
    ffbc:	4a8a      	ldr	r2, [pc, #552]	; (101e8 <main+0x4a0>)
    ffbe:	5cd2      	ldrb	r2, [r2, r3]
    ffc0:	2a0d      	cmp	r2, #13
    ffc2:	d000      	beq.n	ffc6 <main+0x27e>
    ffc4:	0023      	movs	r3, r4
    ffc6:	2200      	movs	r2, #0
    ffc8:	9201      	str	r2, [sp, #4]
    ffca:	9200      	str	r2, [sp, #0]
    ffcc:	4a86      	ldr	r2, [pc, #536]	; (101e8 <main+0x4a0>)
    ffce:	a914      	add	r1, sp, #80	; 0x50
    ffd0:	485c      	ldr	r0, [pc, #368]	; (10144 <main+0x3fc>)
    ffd2:	4f86      	ldr	r7, [pc, #536]	; (101ec <main+0x4a4>)
    ffd4:	47b8      	blx	r7
				if (uart_buffer_written > i + 1) {
    ffd6:	4b86      	ldr	r3, [pc, #536]	; (101f0 <main+0x4a8>)
    ffd8:	681f      	ldr	r7, [r3, #0]
    ffda:	1c63      	adds	r3, r4, #1
    ffdc:	42bb      	cmp	r3, r7
    ffde:	db28      	blt.n	10032 <main+0x2ea>
					uart_buffer_written = 0;
    ffe0:	2200      	movs	r2, #0
    ffe2:	4b83      	ldr	r3, [pc, #524]	; (101f0 <main+0x4a8>)
    ffe4:	601a      	str	r2, [r3, #0]
	return (port_base->IN.reg & pin_mask);
    ffe6:	4b83      	ldr	r3, [pc, #524]	; (101f4 <main+0x4ac>)
    ffe8:	6a1b      	ldr	r3, [r3, #32]
		usart_read_job(&cdc_uart_module, &uart_ch_buffer);
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
		/* Checks the USART buffer. */
		check_usart_buffer(topic);
		if (port_pin_get_input_level(BUTTON_0_PIN) == false) {
    ffea:	021b      	lsls	r3, r3, #8
    ffec:	d52b      	bpl.n	10046 <main+0x2fe>
			mqtt_publish(&mqtt_inst, SENSOR_TOPIC, pub_text, 8, 1, 1);
			delay_ms(300);
			//write_firmware = true;
		}
		
		if (write_firmware) {
    ffee:	4b82      	ldr	r3, [pc, #520]	; (101f8 <main+0x4b0>)
    fff0:	781b      	ldrb	r3, [r3, #0]
    fff2:	2b00      	cmp	r3, #0
    fff4:	d142      	bne.n	1007c <main+0x334>
		m2m_wifi_handle_events(NULL);
    fff6:	2000      	movs	r0, #0
    fff8:	47b0      	blx	r6
		usart_read_job(&cdc_uart_module, &uart_ch_buffer);
    fffa:	4980      	ldr	r1, [pc, #512]	; (101fc <main+0x4b4>)
    fffc:	483c      	ldr	r0, [pc, #240]	; (100f0 <main+0x3a8>)
    fffe:	4b80      	ldr	r3, [pc, #512]	; (10200 <main+0x4b8>)
   10000:	4798      	blx	r3
		sw_timer_task(&swt_module_inst);
   10002:	484a      	ldr	r0, [pc, #296]	; (1012c <main+0x3e4>)
   10004:	4b7f      	ldr	r3, [pc, #508]	; (10204 <main+0x4bc>)
   10006:	4798      	blx	r3
	if (uart_buffer_written >= MAIN_CHAT_BUFFER_SIZE) {
   10008:	4b79      	ldr	r3, [pc, #484]	; (101f0 <main+0x4a8>)
   1000a:	6819      	ldr	r1, [r3, #0]
   1000c:	293f      	cmp	r1, #63	; 0x3f
   1000e:	dcc7      	bgt.n	ffa0 <main+0x258>
		for (i = 0; i < uart_buffer_written; i++) {
   10010:	2900      	cmp	r1, #0
   10012:	dde8      	ble.n	ffe6 <main+0x29e>
			if (uart_buffer[i] == '\n') {
   10014:	4b74      	ldr	r3, [pc, #464]	; (101e8 <main+0x4a0>)
   10016:	781b      	ldrb	r3, [r3, #0]
   10018:	2b0a      	cmp	r3, #10
   1001a:	d008      	beq.n	1002e <main+0x2e6>
   1001c:	2300      	movs	r3, #0
		for (i = 0; i < uart_buffer_written; i++) {
   1001e:	1c5c      	adds	r4, r3, #1
   10020:	42a1      	cmp	r1, r4
   10022:	d0e0      	beq.n	ffe6 <main+0x29e>
			if (uart_buffer[i] == '\n') {
   10024:	5d62      	ldrb	r2, [r4, r5]
   10026:	2a0a      	cmp	r2, #10
   10028:	d0c6      	beq.n	ffb8 <main+0x270>
		for (i = 0; i < uart_buffer_written; i++) {
   1002a:	0023      	movs	r3, r4
   1002c:	e7f7      	b.n	1001e <main+0x2d6>
			if (uart_buffer[i] == '\n') {
   1002e:	2400      	movs	r4, #0
   10030:	e7c8      	b.n	ffc4 <main+0x27c>
					memmove(uart_buffer, uart_buffer + i + 1, uart_buffer_written - i - 1);
   10032:	1b3f      	subs	r7, r7, r4
   10034:	3f01      	subs	r7, #1
   10036:	486c      	ldr	r0, [pc, #432]	; (101e8 <main+0x4a0>)
   10038:	18c1      	adds	r1, r0, r3
   1003a:	003a      	movs	r2, r7
   1003c:	4b72      	ldr	r3, [pc, #456]	; (10208 <main+0x4c0>)
   1003e:	4798      	blx	r3
					uart_buffer_written = uart_buffer_written - i - 1;
   10040:	4b6b      	ldr	r3, [pc, #428]	; (101f0 <main+0x4a8>)
   10042:	601f      	str	r7, [r3, #0]
   10044:	e7cf      	b.n	ffe6 <main+0x29e>
			int sensed = rand();
   10046:	4b71      	ldr	r3, [pc, #452]	; (1020c <main+0x4c4>)
   10048:	4798      	blx	r3
   1004a:	0007      	movs	r7, r0
			sprintf(pub_text, "%d", sensed);
   1004c:	4c70      	ldr	r4, [pc, #448]	; (10210 <main+0x4c8>)
   1004e:	0002      	movs	r2, r0
   10050:	4970      	ldr	r1, [pc, #448]	; (10214 <main+0x4cc>)
   10052:	0020      	movs	r0, r4
   10054:	4b70      	ldr	r3, [pc, #448]	; (10218 <main+0x4d0>)
   10056:	4798      	blx	r3
			printf("Sensed %d\r\n", sensed);
   10058:	0039      	movs	r1, r7
   1005a:	4870      	ldr	r0, [pc, #448]	; (1021c <main+0x4d4>)
   1005c:	4b4e      	ldr	r3, [pc, #312]	; (10198 <main+0x450>)
   1005e:	4798      	blx	r3
			mqtt_publish(&mqtt_inst, SENSOR_TOPIC, pub_text, 8, 1, 1);
   10060:	2301      	movs	r3, #1
   10062:	9301      	str	r3, [sp, #4]
   10064:	9300      	str	r3, [sp, #0]
   10066:	3307      	adds	r3, #7
   10068:	0022      	movs	r2, r4
   1006a:	496d      	ldr	r1, [pc, #436]	; (10220 <main+0x4d8>)
   1006c:	4835      	ldr	r0, [pc, #212]	; (10144 <main+0x3fc>)
   1006e:	4c5f      	ldr	r4, [pc, #380]	; (101ec <main+0x4a4>)
   10070:	47a0      	blx	r4
			delay_ms(300);
   10072:	2096      	movs	r0, #150	; 0x96
   10074:	0040      	lsls	r0, r0, #1
   10076:	4b6b      	ldr	r3, [pc, #428]	; (10224 <main+0x4dc>)
   10078:	4798      	blx	r3
   1007a:	e7b8      	b.n	ffee <main+0x2a6>
			printf("Write_firmware was true\r\n");
   1007c:	486a      	ldr	r0, [pc, #424]	; (10228 <main+0x4e0>)
   1007e:	4b6b      	ldr	r3, [pc, #428]	; (1022c <main+0x4e4>)
   10080:	4798      	blx	r3
			socketDeinit();
   10082:	4b6b      	ldr	r3, [pc, #428]	; (10230 <main+0x4e8>)
   10084:	4798      	blx	r3
			mqtt_deinit(&mqtt_inst);
   10086:	482f      	ldr	r0, [pc, #188]	; (10144 <main+0x3fc>)
   10088:	4b6a      	ldr	r3, [pc, #424]	; (10234 <main+0x4ec>)
   1008a:	4798      	blx	r3
			ret = m2m_wifi_deinit(&param);
   1008c:	a826      	add	r0, sp, #152	; 0x98
   1008e:	4b6a      	ldr	r3, [pc, #424]	; (10238 <main+0x4f0>)
   10090:	4798      	blx	r3
   10092:	1e01      	subs	r1, r0, #0
			if (M2M_SUCCESS != ret) {
   10094:	d003      	beq.n	1009e <main+0x356>
				printf("main: m2m_wifi_deinit call error!(%d)\r\n", ret);
   10096:	4869      	ldr	r0, [pc, #420]	; (1023c <main+0x4f4>)
   10098:	4b3f      	ldr	r3, [pc, #252]	; (10198 <main+0x450>)
   1009a:	4798      	blx	r3
   1009c:	e7fe      	b.n	1009c <main+0x354>
	http_client_get_config_defaults(&httpc_conf);
   1009e:	a804      	add	r0, sp, #16
   100a0:	4b67      	ldr	r3, [pc, #412]	; (10240 <main+0x4f8>)
   100a2:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   100a4:	2380      	movs	r3, #128	; 0x80
   100a6:	00db      	lsls	r3, r3, #3
   100a8:	9308      	str	r3, [sp, #32]
	httpc_conf.timer_inst = &swt_module_inst;
   100aa:	4b20      	ldr	r3, [pc, #128]	; (1012c <main+0x3e4>)
   100ac:	9305      	str	r3, [sp, #20]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   100ae:	a904      	add	r1, sp, #16
   100b0:	4864      	ldr	r0, [pc, #400]	; (10244 <main+0x4fc>)
   100b2:	4b65      	ldr	r3, [pc, #404]	; (10248 <main+0x500>)
   100b4:	4798      	blx	r3
   100b6:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
   100b8:	da03      	bge.n	100c2 <main+0x37a>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   100ba:	4864      	ldr	r0, [pc, #400]	; (1024c <main+0x504>)
   100bc:	4b36      	ldr	r3, [pc, #216]	; (10198 <main+0x450>)
   100be:	4798      	blx	r3
   100c0:	e7fe      	b.n	100c0 <main+0x378>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
   100c2:	4963      	ldr	r1, [pc, #396]	; (10250 <main+0x508>)
   100c4:	485f      	ldr	r0, [pc, #380]	; (10244 <main+0x4fc>)
   100c6:	4b63      	ldr	r3, [pc, #396]	; (10254 <main+0x50c>)
   100c8:	4798      	blx	r3
				while (1) { /* Loop forever. */
				}
			}
			/* ~~~~~~~~~~~~~~~~Begin HTTP client init~~~~~~~~~~~~~~~~~~*/
			configure_http_client();
			param.pfAppWifiCb = wifi_cb;
   100ca:	4b63      	ldr	r3, [pc, #396]	; (10258 <main+0x510>)
   100cc:	9326      	str	r3, [sp, #152]	; 0x98
			ret = m2m_wifi_init(&param);
   100ce:	a826      	add	r0, sp, #152	; 0x98
   100d0:	4b39      	ldr	r3, [pc, #228]	; (101b8 <main+0x470>)
   100d2:	4798      	blx	r3
   100d4:	1e01      	subs	r1, r0, #0
			if (M2M_SUCCESS != ret) {
   100d6:	d100      	bne.n	100da <main+0x392>
   100d8:	e0c2      	b.n	10260 <main+0x518>
				printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   100da:	4860      	ldr	r0, [pc, #384]	; (1025c <main+0x514>)
   100dc:	4b2e      	ldr	r3, [pc, #184]	; (10198 <main+0x450>)
   100de:	4798      	blx	r3
   100e0:	e7fe      	b.n	100e0 <main+0x398>
   100e2:	46c0      	nop			; (mov r8, r8)
   100e4:	0000da99 	.word	0x0000da99
   100e8:	002a0003 	.word	0x002a0003
   100ec:	002b0003 	.word	0x002b0003
   100f0:	20000288 	.word	0x20000288
   100f4:	20000604 	.word	0x20000604
   100f8:	0000f6c9 	.word	0x0000f6c9
   100fc:	20000600 	.word	0x20000600
   10100:	0000f69d 	.word	0x0000f69d
   10104:	200005fc 	.word	0x200005fc
   10108:	42001800 	.word	0x42001800
   1010c:	0000cd3d 	.word	0x0000cd3d
   10110:	2000001c 	.word	0x2000001c
   10114:	00011a35 	.word	0x00011a35
   10118:	0000f4ed 	.word	0x0000f4ed
   1011c:	0000d16d 	.word	0x0000d16d
   10120:	0000c671 	.word	0x0000c671
   10124:	e000e100 	.word	0xe000e100
   10128:	0000f341 	.word	0x0000f341
   1012c:	20000e14 	.word	0x20000e14
   10130:	0000f34d 	.word	0x0000f34d
   10134:	0000f3f9 	.word	0x0000f3f9
   10138:	0001055d 	.word	0x0001055d
   1013c:	200002c8 	.word	0x200002c8
   10140:	00004574 	.word	0x00004574
   10144:	20000348 	.word	0x20000348
   10148:	00010581 	.word	0x00010581
   1014c:	0000f6e1 	.word	0x0000f6e1
   10150:	00010651 	.word	0x00010651
   10154:	00008b41 	.word	0x00008b41
   10158:	200002bc 	.word	0x200002bc
   1015c:	41004000 	.word	0x41004000
   10160:	0000c001 	.word	0x0000c001
   10164:	00011707 	.word	0x00011707
   10168:	0001d4c0 	.word	0x0001d4c0
   1016c:	00100002 	.word	0x00100002
   10170:	00120002 	.word	0x00120002
   10174:	00130002 	.word	0x00130002
   10178:	20000f54 	.word	0x20000f54
   1017c:	42000c00 	.word	0x42000c00
   10180:	0000c701 	.word	0x0000c701
   10184:	20000e0c 	.word	0x20000e0c
   10188:	0000c299 	.word	0x0000c299
   1018c:	41004400 	.word	0x41004400
   10190:	0000fa1d 	.word	0x0000fa1d
   10194:	00014284 	.word	0x00014284
   10198:	00011869 	.word	0x00011869
   1019c:	20000014 	.word	0x20000014
   101a0:	000142a0 	.word	0x000142a0
   101a4:	2000000c 	.word	0x2000000c
   101a8:	000142ac 	.word	0x000142ac
   101ac:	0001453c 	.word	0x0001453c
   101b0:	000142bc 	.word	0x000142bc
   101b4:	0000f605 	.word	0x0000f605
   101b8:	00009aa1 	.word	0x00009aa1
   101bc:	000142cc 	.word	0x000142cc
   101c0:	0001421c 	.word	0x0001421c
   101c4:	00014250 	.word	0x00014250
   101c8:	0000b6e9 	.word	0x0000b6e9
   101cc:	0000f5ed 	.word	0x0000f5ed
   101d0:	0000f5f9 	.word	0x0000f5f9
   101d4:	0000b769 	.word	0x0000b769
   101d8:	00014818 	.word	0x00014818
   101dc:	00014824 	.word	0x00014824
   101e0:	00009e8d 	.word	0x00009e8d
   101e4:	00009bf1 	.word	0x00009bf1
   101e8:	200003fc 	.word	0x200003fc
   101ec:	00010a79 	.word	0x00010a79
   101f0:	2000043c 	.word	0x2000043c
   101f4:	41004480 	.word	0x41004480
   101f8:	20000442 	.word	0x20000442
   101fc:	20000440 	.word	0x20000440
   10200:	0000d185 	.word	0x0000d185
   10204:	0000f491 	.word	0x0000f491
   10208:	000116e3 	.word	0x000116e3
   1020c:	00011999 	.word	0x00011999
   10210:	200003bc 	.word	0x200003bc
   10214:	0001464c 	.word	0x0001464c
   10218:	00011ba1 	.word	0x00011ba1
   1021c:	000142f4 	.word	0x000142f4
   10220:	00014554 	.word	0x00014554
   10224:	00008abd 	.word	0x00008abd
   10228:	00014300 	.word	0x00014300
   1022c:	00011985 	.word	0x00011985
   10230:	0000b72d 	.word	0x0000b72d
   10234:	0001060d 	.word	0x0001060d
   10238:	00009bd5 	.word	0x00009bd5
   1023c:	0001431c 	.word	0x0001431c
   10240:	0000e341 	.word	0x0000e341
   10244:	20000e6c 	.word	0x20000e6c
   10248:	0000e369 	.word	0x0000e369
   1024c:	00014344 	.word	0x00014344
   10250:	0000fabd 	.word	0x0000fabd
   10254:	0000e41d 	.word	0x0000e41d
   10258:	0000f961 	.word	0x0000f961
   1025c:	0001438c 	.word	0x0001438c
				while (1) {
				}
			}
			
			socketInit();
   10260:	4b6c      	ldr	r3, [pc, #432]	; (10414 <main+0x6cc>)
   10262:	4798      	blx	r3
			registerSocketCallback(socket_cb, resolve_cb);
   10264:	496c      	ldr	r1, [pc, #432]	; (10418 <main+0x6d0>)
   10266:	486d      	ldr	r0, [pc, #436]	; (1041c <main+0x6d4>)
   10268:	4b6d      	ldr	r3, [pc, #436]	; (10420 <main+0x6d8>)
   1026a:	4798      	blx	r3
			printf("Survived http client setup\r\n");
   1026c:	486d      	ldr	r0, [pc, #436]	; (10424 <main+0x6dc>)
   1026e:	4b6e      	ldr	r3, [pc, #440]	; (10428 <main+0x6e0>)
   10270:	4798      	blx	r3
	uint8_t read_buffer[NVMCTRL_PAGE_SIZE]={0};
   10272:	2240      	movs	r2, #64	; 0x40
   10274:	2100      	movs	r1, #0
   10276:	a804      	add	r0, sp, #16
   10278:	4b6c      	ldr	r3, [pc, #432]	; (1042c <main+0x6e4>)
   1027a:	4798      	blx	r3
		error_code = nvm_read_buffer(FW_STAT_ADDRESS, read_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   1027c:	25fe      	movs	r5, #254	; 0xfe
   1027e:	01ed      	lsls	r5, r5, #7
   10280:	4c6b      	ldr	r4, [pc, #428]	; (10430 <main+0x6e8>)
   10282:	2240      	movs	r2, #64	; 0x40
   10284:	a904      	add	r1, sp, #16
   10286:	0028      	movs	r0, r5
   10288:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
   1028a:	2805      	cmp	r0, #5
   1028c:	d0f9      	beq.n	10282 <main+0x53a>
	thisFW.executing_image		= read_buffer[4];
   1028e:	ab04      	add	r3, sp, #16
   10290:	791b      	ldrb	r3, [r3, #4]
   10292:	4698      	mov	r8, r3
			Firmware_Status_t fw_status = getFWStat();
			if (fw_status.executing_image == 1) {
				fw_status.downloaded_image = 2;
			}
			else {
				fw_status.downloaded_image = 1;
   10294:	1e5d      	subs	r5, r3, #1
   10296:	426a      	negs	r2, r5
   10298:	416a      	adcs	r2, r5
   1029a:	1c55      	adds	r5, r2, #1
			}
			printf("Executing image: %d, DL to: %d\r\n", fw_status.executing_image, fw_status.downloaded_image);
   1029c:	002a      	movs	r2, r5
   1029e:	4641      	mov	r1, r8
   102a0:	4864      	ldr	r0, [pc, #400]	; (10434 <main+0x6ec>)
   102a2:	4b65      	ldr	r3, [pc, #404]	; (10438 <main+0x6f0>)
   102a4:	4699      	mov	r9, r3
   102a6:	4798      	blx	r3
			firstCRC=true;
   102a8:	2201      	movs	r2, #1
   102aa:	4b64      	ldr	r3, [pc, #400]	; (1043c <main+0x6f4>)
   102ac:	701a      	strb	r2, [r3, #0]
	flash_addr = 0x40000 * slot; //Starting addr on flash where downloaded file is stored
   102ae:	4e64      	ldr	r6, [pc, #400]	; (10440 <main+0x6f8>)
   102b0:	04ab      	lsls	r3, r5, #18
   102b2:	6033      	str	r3, [r6, #0]
	at25dfx_chip_wake(&at25dfx_chip);
   102b4:	4c63      	ldr	r4, [pc, #396]	; (10444 <main+0x6fc>)
   102b6:	0020      	movs	r0, r4
   102b8:	4b63      	ldr	r3, [pc, #396]	; (10448 <main+0x700>)
   102ba:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
   102bc:	0020      	movs	r0, r4
   102be:	4b63      	ldr	r3, [pc, #396]	; (1044c <main+0x704>)
   102c0:	4798      	blx	r3
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
   102c2:	2100      	movs	r1, #0
   102c4:	0020      	movs	r0, r4
   102c6:	4b62      	ldr	r3, [pc, #392]	; (10450 <main+0x708>)
   102c8:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr, AT25DFX_BLOCK_SIZE_64KB);	// erase block
   102ca:	2202      	movs	r2, #2
   102cc:	6831      	ldr	r1, [r6, #0]
   102ce:	0020      	movs	r0, r4
   102d0:	4f60      	ldr	r7, [pc, #384]	; (10454 <main+0x70c>)
   102d2:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x10000, AT25DFX_BLOCK_SIZE_64KB);
   102d4:	6833      	ldr	r3, [r6, #0]
   102d6:	2280      	movs	r2, #128	; 0x80
   102d8:	0252      	lsls	r2, r2, #9
   102da:	4694      	mov	ip, r2
   102dc:	4463      	add	r3, ip
   102de:	0019      	movs	r1, r3
   102e0:	2202      	movs	r2, #2
   102e2:	0020      	movs	r0, r4
   102e4:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x20000, AT25DFX_BLOCK_SIZE_64KB);
   102e6:	6833      	ldr	r3, [r6, #0]
   102e8:	2280      	movs	r2, #128	; 0x80
   102ea:	0292      	lsls	r2, r2, #10
   102ec:	4694      	mov	ip, r2
   102ee:	4463      	add	r3, ip
   102f0:	0019      	movs	r1, r3
   102f2:	2202      	movs	r2, #2
   102f4:	0020      	movs	r0, r4
   102f6:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x30000, AT25DFX_BLOCK_SIZE_64KB);
   102f8:	6831      	ldr	r1, [r6, #0]
   102fa:	23c0      	movs	r3, #192	; 0xc0
   102fc:	029b      	lsls	r3, r3, #10
   102fe:	469c      	mov	ip, r3
   10300:	4461      	add	r1, ip
   10302:	2202      	movs	r2, #2
   10304:	0020      	movs	r0, r4
   10306:	47b8      	blx	r7
	printf("download_firmware: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   10308:	4c53      	ldr	r4, [pc, #332]	; (10458 <main+0x710>)
   1030a:	0021      	movs	r1, r4
   1030c:	4853      	ldr	r0, [pc, #332]	; (1045c <main+0x714>)
   1030e:	47c8      	blx	r9
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   10310:	23ff      	movs	r3, #255	; 0xff
   10312:	9300      	str	r3, [sp, #0]
   10314:	4b52      	ldr	r3, [pc, #328]	; (10460 <main+0x718>)
   10316:	2202      	movs	r2, #2
   10318:	210b      	movs	r1, #11
   1031a:	0020      	movs	r0, r4
   1031c:	4c51      	ldr	r4, [pc, #324]	; (10464 <main+0x71c>)
   1031e:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   10320:	4b51      	ldr	r3, [pc, #324]	; (10468 <main+0x720>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   10322:	781a      	ldrb	r2, [r3, #0]
   10324:	2330      	movs	r3, #48	; 0x30
   10326:	421a      	tst	r2, r3
   10328:	d10b      	bne.n	10342 <main+0x5fa>
		m2m_wifi_handle_events(NULL);
   1032a:	4f50      	ldr	r7, [pc, #320]	; (1046c <main+0x724>)
		sw_timer_task(&swt_module_inst);
   1032c:	4e50      	ldr	r6, [pc, #320]	; (10470 <main+0x728>)
   1032e:	4c51      	ldr	r4, [pc, #324]	; (10474 <main+0x72c>)
		m2m_wifi_handle_events(NULL);
   10330:	2000      	movs	r0, #0
   10332:	47b8      	blx	r7
		sw_timer_task(&swt_module_inst);
   10334:	0030      	movs	r0, r6
   10336:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   10338:	4b4b      	ldr	r3, [pc, #300]	; (10468 <main+0x720>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1033a:	781b      	ldrb	r3, [r3, #0]
   1033c:	2230      	movs	r2, #48	; 0x30
   1033e:	421a      	tst	r2, r3
   10340:	d0f6      	beq.n	10330 <main+0x5e8>
	printf("download_firmware: done.\r\n");
   10342:	484d      	ldr	r0, [pc, #308]	; (10478 <main+0x730>)
   10344:	4b38      	ldr	r3, [pc, #224]	; (10428 <main+0x6e0>)
   10346:	4798      	blx	r3
	printf("Calculated CRC: %x\r\n", (uint32_t)crcChecker);
   10348:	4b4c      	ldr	r3, [pc, #304]	; (1047c <main+0x734>)
   1034a:	6819      	ldr	r1, [r3, #0]
   1034c:	484c      	ldr	r0, [pc, #304]	; (10480 <main+0x738>)
   1034e:	4b3a      	ldr	r3, [pc, #232]	; (10438 <main+0x6f0>)
   10350:	4798      	blx	r3
	down_state &= ~mask;
   10352:	4c45      	ldr	r4, [pc, #276]	; (10468 <main+0x720>)
   10354:	7823      	ldrb	r3, [r4, #0]
   10356:	223c      	movs	r2, #60	; 0x3c
   10358:	4393      	bics	r3, r2
   1035a:	7023      	strb	r3, [r4, #0]
	download_CRC = true;
   1035c:	3a3b      	subs	r2, #59	; 0x3b
   1035e:	4b49      	ldr	r3, [pc, #292]	; (10484 <main+0x73c>)
   10360:	701a      	strb	r2, [r3, #0]
	start_download();
   10362:	4b49      	ldr	r3, [pc, #292]	; (10488 <main+0x740>)
   10364:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   10366:	7822      	ldrb	r2, [r4, #0]
   10368:	2330      	movs	r3, #48	; 0x30
   1036a:	421a      	tst	r2, r3
   1036c:	d10b      	bne.n	10386 <main+0x63e>
		m2m_wifi_handle_events(NULL);
   1036e:	4f3f      	ldr	r7, [pc, #252]	; (1046c <main+0x724>)
		sw_timer_task(&swt_module_inst);
   10370:	4e3f      	ldr	r6, [pc, #252]	; (10470 <main+0x728>)
   10372:	4c40      	ldr	r4, [pc, #256]	; (10474 <main+0x72c>)
		m2m_wifi_handle_events(NULL);
   10374:	2000      	movs	r0, #0
   10376:	47b8      	blx	r7
		sw_timer_task(&swt_module_inst);
   10378:	0030      	movs	r0, r6
   1037a:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   1037c:	4b3a      	ldr	r3, [pc, #232]	; (10468 <main+0x720>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1037e:	781b      	ldrb	r3, [r3, #0]
   10380:	2230      	movs	r2, #48	; 0x30
   10382:	421a      	tst	r2, r3
   10384:	d0f6      	beq.n	10374 <main+0x62c>
	download_CRC = false;
   10386:	2200      	movs	r2, #0
   10388:	4b3e      	ldr	r3, [pc, #248]	; (10484 <main+0x73c>)
   1038a:	701a      	strb	r2, [r3, #0]
			download_firmware(fw_status.downloaded_image);
			printf("\n\rMain: Done downloading firmware and CRC\n\r");
   1038c:	483f      	ldr	r0, [pc, #252]	; (1048c <main+0x744>)
   1038e:	4b2a      	ldr	r3, [pc, #168]	; (10438 <main+0x6f0>)
   10390:	4798      	blx	r3
			if (dlCRC == crcChecker){
   10392:	4b3f      	ldr	r3, [pc, #252]	; (10490 <main+0x748>)
   10394:	681a      	ldr	r2, [r3, #0]
   10396:	4b39      	ldr	r3, [pc, #228]	; (1047c <main+0x734>)
   10398:	681b      	ldr	r3, [r3, #0]
   1039a:	429a      	cmp	r2, r3
   1039c:	d136      	bne.n	1040c <main+0x6c4>
				printf("\n\rMain: CRC MATCHED! starting firmware upgrade. \n\r");
   1039e:	483d      	ldr	r0, [pc, #244]	; (10494 <main+0x74c>)
   103a0:	4b25      	ldr	r3, [pc, #148]	; (10438 <main+0x6f0>)
   103a2:	4798      	blx	r3
				*(uint32_t*)fw_status.signature = (uint32_t)crcChecker; //replace with checksum of downloaded image
   103a4:	4b35      	ldr	r3, [pc, #212]	; (1047c <main+0x734>)
   103a6:	681e      	ldr	r6, [r3, #0]
   103a8:	0a32      	lsrs	r2, r6, #8
   103aa:	0c37      	lsrs	r7, r6, #16
   103ac:	b2f3      	uxtb	r3, r6
   103ae:	469a      	mov	sl, r3
   103b0:	b2d3      	uxtb	r3, r2
   103b2:	4699      	mov	r9, r3
   103b4:	b2ff      	uxtb	r7, r7
   103b6:	0e36      	lsrs	r6, r6, #24
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE]={0};
   103b8:	ac04      	add	r4, sp, #16
   103ba:	2240      	movs	r2, #64	; 0x40
   103bc:	2100      	movs	r1, #0
   103be:	0020      	movs	r0, r4
   103c0:	4b1a      	ldr	r3, [pc, #104]	; (1042c <main+0x6e4>)
   103c2:	4798      	blx	r3
	page_buffer[0] = thisFW.signature[0];
   103c4:	4653      	mov	r3, sl
   103c6:	7023      	strb	r3, [r4, #0]
	page_buffer[1] = thisFW.signature[1];
   103c8:	464b      	mov	r3, r9
   103ca:	7063      	strb	r3, [r4, #1]
	page_buffer[2] = thisFW.signature[2];
   103cc:	70a7      	strb	r7, [r4, #2]
	page_buffer[3] = thisFW.signature[3];
   103ce:	70e6      	strb	r6, [r4, #3]
	page_buffer[4] = thisFW.executing_image;
   103d0:	4643      	mov	r3, r8
   103d2:	7123      	strb	r3, [r4, #4]
	page_buffer[5] = thisFW.downloaded_image;
   103d4:	7165      	strb	r5, [r4, #5]
	page_buffer[6] = thisFW.writenew_image;
   103d6:	2301      	movs	r3, #1
   103d8:	71a3      	strb	r3, [r4, #6]
		error_code = nvm_erase_row(FW_STAT_ADDRESS);			// Erase FW stat row
   103da:	25fe      	movs	r5, #254	; 0xfe
   103dc:	01ed      	lsls	r5, r5, #7
   103de:	4c2e      	ldr	r4, [pc, #184]	; (10498 <main+0x750>)
   103e0:	0028      	movs	r0, r5
   103e2:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
   103e4:	2805      	cmp	r0, #5
   103e6:	d0fb      	beq.n	103e0 <main+0x698>
		error_code = nvm_write_buffer(FW_STAT_ADDRESS, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   103e8:	25fe      	movs	r5, #254	; 0xfe
   103ea:	01ed      	lsls	r5, r5, #7
   103ec:	2440      	movs	r4, #64	; 0x40
   103ee:	0022      	movs	r2, r4
   103f0:	a904      	add	r1, sp, #16
   103f2:	0028      	movs	r0, r5
   103f4:	4b29      	ldr	r3, [pc, #164]	; (1049c <main+0x754>)
   103f6:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
   103f8:	2805      	cmp	r0, #5
   103fa:	d0f8      	beq.n	103ee <main+0x6a6>
  __ASM volatile ("dsb");
   103fc:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   10400:	4a27      	ldr	r2, [pc, #156]	; (104a0 <main+0x758>)
   10402:	4b28      	ldr	r3, [pc, #160]	; (104a4 <main+0x75c>)
   10404:	60da      	str	r2, [r3, #12]
   10406:	f3bf 8f4f 	dsb	sy
   1040a:	e7fe      	b.n	1040a <main+0x6c2>
				fw_status.writenew_image = 1;  // write image flag
				writeFWStat(fw_status);
			} 
			else {
				printf("\n\r Main: CRC Check Fail!\n\r");
   1040c:	4826      	ldr	r0, [pc, #152]	; (104a8 <main+0x760>)
   1040e:	4b0a      	ldr	r3, [pc, #40]	; (10438 <main+0x6f0>)
   10410:	4798      	blx	r3
   10412:	e7f3      	b.n	103fc <main+0x6b4>
   10414:	0000b6e9 	.word	0x0000b6e9
   10418:	0000f511 	.word	0x0000f511
   1041c:	0000f54d 	.word	0x0000f54d
   10420:	0000b769 	.word	0x0000b769
   10424:	000143b8 	.word	0x000143b8
   10428:	00011985 	.word	0x00011985
   1042c:	00011707 	.word	0x00011707
   10430:	0000c1d1 	.word	0x0000c1d1
   10434:	000143d4 	.word	0x000143d4
   10438:	00011869 	.word	0x00011869
   1043c:	2000000b 	.word	0x2000000b
   10440:	20000608 	.word	0x20000608
   10444:	20000e0c 	.word	0x20000e0c
   10448:	000089f1 	.word	0x000089f1
   1044c:	00008115 	.word	0x00008115
   10450:	00008875 	.word	0x00008875
   10454:	0000865d 	.word	0x0000865d
   10458:	00014824 	.word	0x00014824
   1045c:	000143f8 	.word	0x000143f8
   10460:	00014818 	.word	0x00014818
   10464:	00009e8d 	.word	0x00009e8d
   10468:	200002bc 	.word	0x200002bc
   1046c:	00009bf1 	.word	0x00009bf1
   10470:	20000e14 	.word	0x20000e14
   10474:	0000f491 	.word	0x0000f491
   10478:	0001442c 	.word	0x0001442c
   1047c:	20000f90 	.word	0x20000f90
   10480:	00014448 	.word	0x00014448
   10484:	200002bd 	.word	0x200002bd
   10488:	0000f559 	.word	0x0000f559
   1048c:	00014460 	.word	0x00014460
   10490:	20000f94 	.word	0x20000f94
   10494:	0001448c 	.word	0x0001448c
   10498:	0000c23d 	.word	0x0000c23d
   1049c:	0000c129 	.word	0x0000c129
   104a0:	05fa0004 	.word	0x05fa0004
   104a4:	e000ed00 	.word	0xe000ed00
   104a8:	000144c0 	.word	0x000144c0

000104ac <_hwerr_to_stderr>:
   104ac:	1c03      	adds	r3, r0, #0
   104ae:	300e      	adds	r0, #14
   104b0:	b500      	push	{lr}
   104b2:	280e      	cmp	r0, #14
   104b4:	d819      	bhi.n	104ea <_hwerr_to_stderr+0x3e>
   104b6:	f000 ff23 	bl	11300 <__gnu_thumb1_case_uqi>
   104ba:	1416      	.short	0x1416
   104bc:	1b181012 	.word	0x1b181012
   104c0:	180c0e18 	.word	0x180c0e18
   104c4:	1d0a0e0e 	.word	0x1d0a0e0e
   104c8:	08          	.byte	0x08
   104c9:	00          	.byte	0x00
   104ca:	2000      	movs	r0, #0
   104cc:	e014      	b.n	104f8 <_hwerr_to_stderr+0x4c>
   104ce:	2070      	movs	r0, #112	; 0x70
   104d0:	e011      	b.n	104f6 <_hwerr_to_stderr+0x4a>
   104d2:	2016      	movs	r0, #22
   104d4:	e00f      	b.n	104f6 <_hwerr_to_stderr+0x4a>
   104d6:	200c      	movs	r0, #12
   104d8:	e00d      	b.n	104f6 <_hwerr_to_stderr+0x4a>
   104da:	2079      	movs	r0, #121	; 0x79
   104dc:	e00b      	b.n	104f6 <_hwerr_to_stderr+0x4a>
   104de:	2068      	movs	r0, #104	; 0x68
   104e0:	e009      	b.n	104f6 <_hwerr_to_stderr+0x4a>
   104e2:	200b      	movs	r0, #11
   104e4:	e007      	b.n	104f6 <_hwerr_to_stderr+0x4a>
   104e6:	2010      	movs	r0, #16
   104e8:	e005      	b.n	104f6 <_hwerr_to_stderr+0x4a>
   104ea:	2000      	movs	r0, #0
   104ec:	4283      	cmp	r3, r0
   104ee:	da03      	bge.n	104f8 <_hwerr_to_stderr+0x4c>
   104f0:	2005      	movs	r0, #5
   104f2:	e000      	b.n	104f6 <_hwerr_to_stderr+0x4a>
   104f4:	2002      	movs	r0, #2
   104f6:	4240      	negs	r0, r0
   104f8:	bd00      	pop	{pc}
	...

000104fc <_mqtt_send_wait>:
   104fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   104fe:	1c04      	adds	r4, r0, #0
   10500:	3443      	adds	r4, #67	; 0x43
   10502:	7823      	ldrb	r3, [r4, #0]
   10504:	1c05      	adds	r5, r0, #0
   10506:	07d8      	lsls	r0, r3, #31
   10508:	d51c      	bpl.n	10544 <_mqtt_send_wait+0x48>
   1050a:	2604      	movs	r6, #4
   1050c:	4333      	orrs	r3, r6
   1050e:	7023      	strb	r3, [r4, #0]
   10510:	2002      	movs	r0, #2
   10512:	5628      	ldrsb	r0, [r5, r0]
   10514:	b292      	uxth	r2, r2
   10516:	2300      	movs	r3, #0
   10518:	4f0c      	ldr	r7, [pc, #48]	; (1054c <_mqtt_send_wait+0x50>)
   1051a:	47b8      	blx	r7
   1051c:	2800      	cmp	r0, #0
   1051e:	da05      	bge.n	1052c <_mqtt_send_wait+0x30>
   10520:	7823      	ldrb	r3, [r4, #0]
   10522:	43b3      	bics	r3, r6
   10524:	7023      	strb	r3, [r4, #0]
   10526:	4b0a      	ldr	r3, [pc, #40]	; (10550 <_mqtt_send_wait+0x54>)
   10528:	4798      	blx	r3
   1052a:	e00d      	b.n	10548 <_mqtt_send_wait+0x4c>
   1052c:	7822      	ldrb	r2, [r4, #0]
   1052e:	2314      	movs	r3, #20
   10530:	4013      	ands	r3, r2
   10532:	2000      	movs	r0, #0
   10534:	2b04      	cmp	r3, #4
   10536:	d107      	bne.n	10548 <_mqtt_send_wait+0x4c>
   10538:	4b06      	ldr	r3, [pc, #24]	; (10554 <_mqtt_send_wait+0x58>)
   1053a:	4798      	blx	r3
   1053c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   1053e:	4b06      	ldr	r3, [pc, #24]	; (10558 <_mqtt_send_wait+0x5c>)
   10540:	4798      	blx	r3
   10542:	e7f3      	b.n	1052c <_mqtt_send_wait+0x30>
   10544:	2001      	movs	r0, #1
   10546:	4240      	negs	r0, r0
   10548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1054a:	46c0      	nop			; (mov r8, r8)
   1054c:	0000b991 	.word	0x0000b991
   10550:	000104ad 	.word	0x000104ad
   10554:	00009bf1 	.word	0x00009bf1
   10558:	0000f491 	.word	0x0000f491

0001055c <mqtt_get_config_defaults>:
   1055c:	4b07      	ldr	r3, [pc, #28]	; (1057c <mqtt_get_config_defaults+0x20>)
   1055e:	2240      	movs	r2, #64	; 0x40
   10560:	8003      	strh	r3, [r0, #0]
   10562:	2396      	movs	r3, #150	; 0x96
   10564:	009b      	lsls	r3, r3, #2
   10566:	8103      	strh	r3, [r0, #8]
   10568:	6102      	str	r2, [r0, #16]
   1056a:	2300      	movs	r3, #0
   1056c:	2220      	movs	r2, #32
   1056e:	7083      	strb	r3, [r0, #2]
   10570:	6043      	str	r3, [r0, #4]
   10572:	60c3      	str	r3, [r0, #12]
   10574:	6142      	str	r2, [r0, #20]
   10576:	7603      	strb	r3, [r0, #24]
   10578:	4770      	bx	lr
   1057a:	46c0      	nop			; (mov r8, r8)
   1057c:	0000075b 	.word	0x0000075b

00010580 <mqtt_init>:
   10580:	b538      	push	{r3, r4, r5, lr}
   10582:	1c04      	adds	r4, r0, #0
   10584:	1c0d      	adds	r5, r1, #0
   10586:	2800      	cmp	r0, #0
   10588:	d030      	beq.n	105ec <mqtt_init+0x6c>
   1058a:	2900      	cmp	r1, #0
   1058c:	d02e      	beq.n	105ec <mqtt_init+0x6c>
   1058e:	690b      	ldr	r3, [r1, #16]
   10590:	2b00      	cmp	r3, #0
   10592:	d02b      	beq.n	105ec <mqtt_init+0x6c>
   10594:	684b      	ldr	r3, [r1, #4]
   10596:	2b00      	cmp	r3, #0
   10598:	d028      	beq.n	105ec <mqtt_init+0x6c>
   1059a:	2100      	movs	r1, #0
   1059c:	2274      	movs	r2, #116	; 0x74
   1059e:	4b16      	ldr	r3, [pc, #88]	; (105f8 <mqtt_init+0x78>)
   105a0:	4798      	blx	r3
   105a2:	1c20      	adds	r0, r4, #0
   105a4:	4b15      	ldr	r3, [pc, #84]	; (105fc <mqtt_init+0x7c>)
   105a6:	3058      	adds	r0, #88	; 0x58
   105a8:	1c29      	adds	r1, r5, #0
   105aa:	221c      	movs	r2, #28
   105ac:	4798      	blx	r3
   105ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   105b0:	2b00      	cmp	r3, #0
   105b2:	d10b      	bne.n	105cc <mqtt_init+0x4c>
   105b4:	6928      	ldr	r0, [r5, #16]
   105b6:	4b12      	ldr	r3, [pc, #72]	; (10600 <mqtt_init+0x80>)
   105b8:	4798      	blx	r3
   105ba:	6660      	str	r0, [r4, #100]	; 0x64
   105bc:	2800      	cmp	r0, #0
   105be:	d017      	beq.n	105f0 <mqtt_init+0x70>
   105c0:	1c23      	adds	r3, r4, #0
   105c2:	3343      	adds	r3, #67	; 0x43
   105c4:	781a      	ldrb	r2, [r3, #0]
   105c6:	2120      	movs	r1, #32
   105c8:	430a      	orrs	r2, r1
   105ca:	701a      	strb	r2, [r3, #0]
   105cc:	892a      	ldrh	r2, [r5, #8]
   105ce:	23fa      	movs	r3, #250	; 0xfa
   105d0:	005b      	lsls	r3, r3, #1
   105d2:	4353      	muls	r3, r2
   105d4:	6868      	ldr	r0, [r5, #4]
   105d6:	490b      	ldr	r1, [pc, #44]	; (10604 <mqtt_init+0x84>)
   105d8:	1c22      	adds	r2, r4, #0
   105da:	4d0b      	ldr	r5, [pc, #44]	; (10608 <mqtt_init+0x88>)
   105dc:	47a8      	blx	r5
   105de:	1c03      	adds	r3, r0, #0
   105e0:	6520      	str	r0, [r4, #80]	; 0x50
   105e2:	2000      	movs	r0, #0
   105e4:	4283      	cmp	r3, r0
   105e6:	da05      	bge.n	105f4 <mqtt_init+0x74>
   105e8:	201c      	movs	r0, #28
   105ea:	e002      	b.n	105f2 <mqtt_init+0x72>
   105ec:	2016      	movs	r0, #22
   105ee:	e000      	b.n	105f2 <mqtt_init+0x72>
   105f0:	200c      	movs	r0, #12
   105f2:	4240      	negs	r0, r0
   105f4:	bd38      	pop	{r3, r4, r5, pc}
   105f6:	46c0      	nop			; (mov r8, r8)
   105f8:	00011707 	.word	0x00011707
   105fc:	000116d1 	.word	0x000116d1
   10600:	000116a9 	.word	0x000116a9
   10604:	00010dcd 	.word	0x00010dcd
   10608:	0000f40d 	.word	0x0000f40d

0001060c <mqtt_deinit>:
   1060c:	b510      	push	{r4, lr}
   1060e:	1e04      	subs	r4, r0, #0
   10610:	d014      	beq.n	1063c <mqtt_deinit+0x30>
   10612:	6e40      	ldr	r0, [r0, #100]	; 0x64
   10614:	2800      	cmp	r0, #0
   10616:	d008      	beq.n	1062a <mqtt_deinit+0x1e>
   10618:	1c23      	adds	r3, r4, #0
   1061a:	3343      	adds	r3, #67	; 0x43
   1061c:	781b      	ldrb	r3, [r3, #0]
   1061e:	069a      	lsls	r2, r3, #26
   10620:	d503      	bpl.n	1062a <mqtt_deinit+0x1e>
   10622:	4b09      	ldr	r3, [pc, #36]	; (10648 <mqtt_deinit+0x3c>)
   10624:	4798      	blx	r3
   10626:	2300      	movs	r3, #0
   10628:	6663      	str	r3, [r4, #100]	; 0x64
   1062a:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1062c:	2900      	cmp	r1, #0
   1062e:	db08      	blt.n	10642 <mqtt_deinit+0x36>
   10630:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   10632:	2800      	cmp	r0, #0
   10634:	d006      	beq.n	10644 <mqtt_deinit+0x38>
   10636:	4b05      	ldr	r3, [pc, #20]	; (1064c <mqtt_deinit+0x40>)
   10638:	4798      	blx	r3
   1063a:	e002      	b.n	10642 <mqtt_deinit+0x36>
   1063c:	2016      	movs	r0, #22
   1063e:	4240      	negs	r0, r0
   10640:	e000      	b.n	10644 <mqtt_deinit+0x38>
   10642:	2000      	movs	r0, #0
   10644:	bd10      	pop	{r4, pc}
   10646:	46c0      	nop			; (mov r8, r8)
   10648:	000116bd 	.word	0x000116bd
   1064c:	0000f445 	.word	0x0000f445

00010650 <mqtt_register_callback>:
   10650:	2800      	cmp	r0, #0
   10652:	d002      	beq.n	1065a <mqtt_register_callback+0xa>
   10654:	6541      	str	r1, [r0, #84]	; 0x54
   10656:	2000      	movs	r0, #0
   10658:	e001      	b.n	1065e <mqtt_register_callback+0xe>
   1065a:	2016      	movs	r0, #22
   1065c:	4240      	negs	r0, r0
   1065e:	4770      	bx	lr

00010660 <mqtt_socket_resolve_handler>:
   10660:	b5f0      	push	{r4, r5, r6, r7, lr}
   10662:	1c06      	adds	r6, r0, #0
   10664:	b085      	sub	sp, #20
   10666:	1c0f      	adds	r7, r1, #0
   10668:	2400      	movs	r4, #0
   1066a:	4b0f      	ldr	r3, [pc, #60]	; (106a8 <mqtt_socket_resolve_handler+0x48>)
   1066c:	58e5      	ldr	r5, [r4, r3]
   1066e:	2d00      	cmp	r5, #0
   10670:	d015      	beq.n	1069e <mqtt_socket_resolve_handler+0x3e>
   10672:	1ce9      	adds	r1, r5, #3
   10674:	1c30      	adds	r0, r6, #0
   10676:	4b0d      	ldr	r3, [pc, #52]	; (106ac <mqtt_socket_resolve_handler+0x4c>)
   10678:	4798      	blx	r3
   1067a:	2800      	cmp	r0, #0
   1067c:	d10f      	bne.n	1069e <mqtt_socket_resolve_handler+0x3e>
   1067e:	466a      	mov	r2, sp
   10680:	2302      	movs	r3, #2
   10682:	8013      	strh	r3, [r2, #0]
   10684:	1c2b      	adds	r3, r5, #0
   10686:	3358      	adds	r3, #88	; 0x58
   10688:	881b      	ldrh	r3, [r3, #0]
   1068a:	9701      	str	r7, [sp, #4]
   1068c:	ba5b      	rev16	r3, r3
   1068e:	8053      	strh	r3, [r2, #2]
   10690:	2002      	movs	r0, #2
   10692:	5628      	ldrsb	r0, [r5, r0]
   10694:	4669      	mov	r1, sp
   10696:	2210      	movs	r2, #16
   10698:	4b05      	ldr	r3, [pc, #20]	; (106b0 <mqtt_socket_resolve_handler+0x50>)
   1069a:	4798      	blx	r3
   1069c:	e002      	b.n	106a4 <mqtt_socket_resolve_handler+0x44>
   1069e:	3404      	adds	r4, #4
   106a0:	2c1c      	cmp	r4, #28
   106a2:	d1e2      	bne.n	1066a <mqtt_socket_resolve_handler+0xa>
   106a4:	b005      	add	sp, #20
   106a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106a8:	20000444 	.word	0x20000444
   106ac:	00011be5 	.word	0x00011be5
   106b0:	0000b901 	.word	0x0000b901

000106b4 <mqtt_connect>:
   106b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   106b6:	1c04      	adds	r4, r0, #0
   106b8:	b089      	sub	sp, #36	; 0x24
   106ba:	1c0d      	adds	r5, r1, #0
   106bc:	2800      	cmp	r0, #0
   106be:	d051      	beq.n	10764 <mqtt_connect+0xb0>
   106c0:	2900      	cmp	r1, #0
   106c2:	d04f      	beq.n	10764 <mqtt_connect+0xb0>
   106c4:	1c08      	adds	r0, r1, #0
   106c6:	4b39      	ldr	r3, [pc, #228]	; (107ac <mqtt_connect+0xf8>)
   106c8:	4798      	blx	r3
   106ca:	2840      	cmp	r0, #64	; 0x40
   106cc:	d84c      	bhi.n	10768 <mqtt_connect+0xb4>
   106ce:	1c21      	adds	r1, r4, #0
   106d0:	3143      	adds	r1, #67	; 0x43
   106d2:	780b      	ldrb	r3, [r1, #0]
   106d4:	9101      	str	r1, [sp, #4]
   106d6:	07db      	lsls	r3, r3, #31
   106d8:	0fd9      	lsrs	r1, r3, #31
   106da:	466a      	mov	r2, sp
   106dc:	b2ce      	uxtb	r6, r1
   106de:	1ce0      	adds	r0, r4, #3
   106e0:	7211      	strb	r1, [r2, #8]
   106e2:	2e00      	cmp	r6, #0
   106e4:	d142      	bne.n	1076c <mqtt_connect+0xb8>
   106e6:	2701      	movs	r7, #1
   106e8:	1c29      	adds	r1, r5, #0
   106ea:	4b31      	ldr	r3, [pc, #196]	; (107b0 <mqtt_connect+0xfc>)
   106ec:	8027      	strh	r7, [r4, #0]
   106ee:	4798      	blx	r3
   106f0:	9a01      	ldr	r2, [sp, #4]
   106f2:	2002      	movs	r0, #2
   106f4:	7813      	ldrb	r3, [r2, #0]
   106f6:	9901      	ldr	r1, [sp, #4]
   106f8:	43bb      	bics	r3, r7
   106fa:	4383      	bics	r3, r0
   106fc:	22e3      	movs	r2, #227	; 0xe3
   106fe:	4013      	ands	r3, r2
   10700:	466a      	mov	r2, sp
   10702:	700b      	strb	r3, [r1, #0]
   10704:	7a12      	ldrb	r2, [r2, #8]
   10706:	1c23      	adds	r3, r4, #0
   10708:	3348      	adds	r3, #72	; 0x48
   1070a:	6466      	str	r6, [r4, #68]	; 0x44
   1070c:	701a      	strb	r2, [r3, #0]
   1070e:	7c9a      	ldrb	r2, [r3, #18]
   10710:	805e      	strh	r6, [r3, #2]
   10712:	1e53      	subs	r3, r2, #1
   10714:	419a      	sbcs	r2, r3
   10716:	b2d2      	uxtb	r2, r2
   10718:	1c39      	adds	r1, r7, #0
   1071a:	4b26      	ldr	r3, [pc, #152]	; (107b4 <mqtt_connect+0x100>)
   1071c:	4798      	blx	r3
   1071e:	70a0      	strb	r0, [r4, #2]
   10720:	2800      	cmp	r0, #0
   10722:	db25      	blt.n	10770 <mqtt_connect+0xbc>
   10724:	4b24      	ldr	r3, [pc, #144]	; (107b8 <mqtt_connect+0x104>)
   10726:	0080      	lsls	r0, r0, #2
   10728:	50c4      	str	r4, [r0, r3]
   1072a:	1c2b      	adds	r3, r5, #0
   1072c:	781f      	ldrb	r7, [r3, #0]
   1072e:	2f00      	cmp	r7, #0
   10730:	d026      	beq.n	10780 <mqtt_connect+0xcc>
   10732:	2220      	movs	r2, #32
   10734:	1c39      	adds	r1, r7, #0
   10736:	4391      	bics	r1, r2
   10738:	1c0a      	adds	r2, r1, #0
   1073a:	3a41      	subs	r2, #65	; 0x41
   1073c:	b2d2      	uxtb	r2, r2
   1073e:	3301      	adds	r3, #1
   10740:	2a05      	cmp	r2, #5
   10742:	d90d      	bls.n	10760 <mqtt_connect+0xac>
   10744:	2f3a      	cmp	r7, #58	; 0x3a
   10746:	d00b      	beq.n	10760 <mqtt_connect+0xac>
   10748:	2f2f      	cmp	r7, #47	; 0x2f
   1074a:	d009      	beq.n	10760 <mqtt_connect+0xac>
   1074c:	2f2e      	cmp	r7, #46	; 0x2e
   1074e:	d102      	bne.n	10756 <mqtt_connect+0xa2>
   10750:	2e00      	cmp	r6, #0
   10752:	d0eb      	beq.n	1072c <mqtt_connect+0x78>
   10754:	e00f      	b.n	10776 <mqtt_connect+0xc2>
   10756:	2230      	movs	r2, #48	; 0x30
   10758:	4017      	ands	r7, r2
   1075a:	4297      	cmp	r7, r2
   1075c:	d0e6      	beq.n	1072c <mqtt_connect+0x78>
   1075e:	e00a      	b.n	10776 <mqtt_connect+0xc2>
   10760:	2601      	movs	r6, #1
   10762:	e7e3      	b.n	1072c <mqtt_connect+0x78>
   10764:	2016      	movs	r0, #22
   10766:	e004      	b.n	10772 <mqtt_connect+0xbe>
   10768:	205b      	movs	r0, #91	; 0x5b
   1076a:	e002      	b.n	10772 <mqtt_connect+0xbe>
   1076c:	2078      	movs	r0, #120	; 0x78
   1076e:	e000      	b.n	10772 <mqtt_connect+0xbe>
   10770:	201c      	movs	r0, #28
   10772:	4240      	negs	r0, r0
   10774:	e017      	b.n	107a6 <mqtt_connect+0xf2>
   10776:	1c28      	adds	r0, r5, #0
   10778:	4b10      	ldr	r3, [pc, #64]	; (107bc <mqtt_connect+0x108>)
   1077a:	4798      	blx	r3
   1077c:	2000      	movs	r0, #0
   1077e:	e012      	b.n	107a6 <mqtt_connect+0xf2>
   10780:	466a      	mov	r2, sp
   10782:	2302      	movs	r3, #2
   10784:	8213      	strh	r3, [r2, #16]
   10786:	1c23      	adds	r3, r4, #0
   10788:	3358      	adds	r3, #88	; 0x58
   1078a:	881b      	ldrh	r3, [r3, #0]
   1078c:	1c28      	adds	r0, r5, #0
   1078e:	ba5b      	rev16	r3, r3
   10790:	8253      	strh	r3, [r2, #18]
   10792:	4b0b      	ldr	r3, [pc, #44]	; (107c0 <mqtt_connect+0x10c>)
   10794:	4798      	blx	r3
   10796:	9005      	str	r0, [sp, #20]
   10798:	2002      	movs	r0, #2
   1079a:	5620      	ldrsb	r0, [r4, r0]
   1079c:	a904      	add	r1, sp, #16
   1079e:	2210      	movs	r2, #16
   107a0:	4b08      	ldr	r3, [pc, #32]	; (107c4 <mqtt_connect+0x110>)
   107a2:	4798      	blx	r3
   107a4:	1c38      	adds	r0, r7, #0
   107a6:	b009      	add	sp, #36	; 0x24
   107a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107aa:	46c0      	nop			; (mov r8, r8)
   107ac:	00011c43 	.word	0x00011c43
   107b0:	00011bf9 	.word	0x00011bf9
   107b4:	0000b77d 	.word	0x0000b77d
   107b8:	20000444 	.word	0x20000444
   107bc:	0000bbc5 	.word	0x0000bbc5
   107c0:	0000bb59 	.word	0x0000bb59
   107c4:	0000b901 	.word	0x0000b901

000107c8 <mqtt_connect_broker>:
   107c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   107ca:	b095      	sub	sp, #84	; 0x54
   107cc:	af02      	add	r7, sp, #8
   107ce:	617b      	str	r3, [r7, #20]
   107d0:	1c3b      	adds	r3, r7, #0
   107d2:	3370      	adds	r3, #112	; 0x70
   107d4:	781b      	ldrb	r3, [r3, #0]
   107d6:	1c05      	adds	r5, r0, #0
   107d8:	60fb      	str	r3, [r7, #12]
   107da:	1c3b      	adds	r3, r7, #0
   107dc:	3374      	adds	r3, #116	; 0x74
   107de:	781b      	ldrb	r3, [r3, #0]
   107e0:	6139      	str	r1, [r7, #16]
   107e2:	61fa      	str	r2, [r7, #28]
   107e4:	60bb      	str	r3, [r7, #8]
   107e6:	2800      	cmp	r0, #0
   107e8:	d101      	bne.n	107ee <mqtt_connect_broker+0x26>
   107ea:	2016      	movs	r0, #22
   107ec:	e129      	b.n	10a42 <mqtt_connect_broker+0x27a>
   107ee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   107f0:	4668      	mov	r0, sp
   107f2:	3307      	adds	r3, #7
   107f4:	08db      	lsrs	r3, r3, #3
   107f6:	00db      	lsls	r3, r3, #3
   107f8:	1ac0      	subs	r0, r0, r3
   107fa:	4685      	mov	sp, r0
   107fc:	ac02      	add	r4, sp, #8
   107fe:	607c      	str	r4, [r7, #4]
   10800:	6e3c      	ldr	r4, [r7, #96]	; 0x60
   10802:	2c00      	cmp	r4, #0
   10804:	d0f1      	beq.n	107ea <mqtt_connect_broker+0x22>
   10806:	1c2b      	adds	r3, r5, #0
   10808:	3343      	adds	r3, #67	; 0x43
   1080a:	781b      	ldrb	r3, [r3, #0]
   1080c:	07d8      	lsls	r0, r3, #31
   1080e:	d400      	bmi.n	10812 <mqtt_connect_broker+0x4a>
   10810:	e112      	b.n	10a38 <mqtt_connect_broker+0x270>
   10812:	079a      	lsls	r2, r3, #30
   10814:	d500      	bpl.n	10818 <mqtt_connect_broker+0x50>
   10816:	e111      	b.n	10a3c <mqtt_connect_broker+0x274>
   10818:	071c      	lsls	r4, r3, #28
   1081a:	d40b      	bmi.n	10834 <mqtt_connect_broker+0x6c>
   1081c:	4e8b      	ldr	r6, [pc, #556]	; (10a4c <mqtt_connect_broker+0x284>)
   1081e:	6e38      	ldr	r0, [r7, #96]	; 0x60
   10820:	47b0      	blx	r6
   10822:	1c03      	adds	r3, r0, #0
   10824:	61b8      	str	r0, [r7, #24]
   10826:	69f8      	ldr	r0, [r7, #28]
   10828:	330e      	adds	r3, #14
   1082a:	1c34      	adds	r4, r6, #0
   1082c:	2800      	cmp	r0, #0
   1082e:	d113      	bne.n	10858 <mqtt_connect_broker+0x90>
   10830:	1c1e      	adds	r6, r3, #0
   10832:	e01d      	b.n	10870 <mqtt_connect_broker+0xa8>
   10834:	1c2b      	adds	r3, r5, #0
   10836:	3370      	adds	r3, #112	; 0x70
   10838:	781b      	ldrb	r3, [r3, #0]
   1083a:	2b00      	cmp	r3, #0
   1083c:	d000      	beq.n	10840 <mqtt_connect_broker+0x78>
   1083e:	e0ff      	b.n	10a40 <mqtt_connect_broker+0x278>
   10840:	1c2b      	adds	r3, r5, #0
   10842:	3343      	adds	r3, #67	; 0x43
   10844:	781b      	ldrb	r3, [r3, #0]
   10846:	071a      	lsls	r2, r3, #28
   10848:	d5e8      	bpl.n	1081c <mqtt_connect_broker+0x54>
   1084a:	4b81      	ldr	r3, [pc, #516]	; (10a50 <mqtt_connect_broker+0x288>)
   1084c:	2000      	movs	r0, #0
   1084e:	4798      	blx	r3
   10850:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   10852:	4b80      	ldr	r3, [pc, #512]	; (10a54 <mqtt_connect_broker+0x28c>)
   10854:	4798      	blx	r3
   10856:	e7f3      	b.n	10840 <mqtt_connect_broker+0x78>
   10858:	69f8      	ldr	r0, [r7, #28]
   1085a:	47b0      	blx	r6
   1085c:	69be      	ldr	r6, [r7, #24]
   1085e:	697b      	ldr	r3, [r7, #20]
   10860:	3610      	adds	r6, #16
   10862:	1836      	adds	r6, r6, r0
   10864:	2b00      	cmp	r3, #0
   10866:	d003      	beq.n	10870 <mqtt_connect_broker+0xa8>
   10868:	1c18      	adds	r0, r3, #0
   1086a:	47a0      	blx	r4
   1086c:	3602      	adds	r6, #2
   1086e:	1836      	adds	r6, r6, r0
   10870:	6e78      	ldr	r0, [r7, #100]	; 0x64
   10872:	2800      	cmp	r0, #0
   10874:	d007      	beq.n	10886 <mqtt_connect_broker+0xbe>
   10876:	47a0      	blx	r4
   10878:	3602      	adds	r6, #2
   1087a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
   1087c:	1830      	adds	r0, r6, r0
   1087e:	1906      	adds	r6, r0, r4
   10880:	2c00      	cmp	r4, #0
   10882:	d100      	bne.n	10886 <mqtt_connect_broker+0xbe>
   10884:	1c06      	adds	r6, r0, #0
   10886:	69fc      	ldr	r4, [r7, #28]
   10888:	2c00      	cmp	r4, #0
   1088a:	d006      	beq.n	1089a <mqtt_connect_broker+0xd2>
   1088c:	24c0      	movs	r4, #192	; 0xc0
   1088e:	61bc      	str	r4, [r7, #24]
   10890:	697c      	ldr	r4, [r7, #20]
   10892:	2c00      	cmp	r4, #0
   10894:	d103      	bne.n	1089e <mqtt_connect_broker+0xd6>
   10896:	2480      	movs	r4, #128	; 0x80
   10898:	e000      	b.n	1089c <mqtt_connect_broker+0xd4>
   1089a:	69fc      	ldr	r4, [r7, #28]
   1089c:	61bc      	str	r4, [r7, #24]
   1089e:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   108a0:	2c00      	cmp	r4, #0
   108a2:	d00f      	beq.n	108c4 <mqtt_connect_broker+0xfc>
   108a4:	68bc      	ldr	r4, [r7, #8]
   108a6:	2c00      	cmp	r4, #0
   108a8:	d003      	beq.n	108b2 <mqtt_connect_broker+0xea>
   108aa:	69bc      	ldr	r4, [r7, #24]
   108ac:	2320      	movs	r3, #32
   108ae:	431c      	orrs	r4, r3
   108b0:	61bc      	str	r4, [r7, #24]
   108b2:	68fc      	ldr	r4, [r7, #12]
   108b4:	2303      	movs	r3, #3
   108b6:	4023      	ands	r3, r4
   108b8:	00db      	lsls	r3, r3, #3
   108ba:	69bc      	ldr	r4, [r7, #24]
   108bc:	2204      	movs	r2, #4
   108be:	4313      	orrs	r3, r2
   108c0:	431c      	orrs	r4, r3
   108c2:	61bc      	str	r4, [r7, #24]
   108c4:	693c      	ldr	r4, [r7, #16]
   108c6:	2c00      	cmp	r4, #0
   108c8:	d003      	beq.n	108d2 <mqtt_connect_broker+0x10a>
   108ca:	69bc      	ldr	r4, [r7, #24]
   108cc:	2302      	movs	r3, #2
   108ce:	431c      	orrs	r4, r3
   108d0:	61bc      	str	r4, [r7, #24]
   108d2:	1c2b      	adds	r3, r5, #0
   108d4:	3343      	adds	r3, #67	; 0x43
   108d6:	781a      	ldrb	r2, [r3, #0]
   108d8:	2108      	movs	r1, #8
   108da:	430a      	orrs	r2, r1
   108dc:	701a      	strb	r2, [r3, #0]
   108de:	1c38      	adds	r0, r7, #0
   108e0:	9500      	str	r5, [sp, #0]
   108e2:	3020      	adds	r0, #32
   108e4:	6879      	ldr	r1, [r7, #4]
   108e6:	4b5c      	ldr	r3, [pc, #368]	; (10a58 <mqtt_connect_broker+0x290>)
   108e8:	6eea      	ldr	r2, [r5, #108]	; 0x6c
   108ea:	4c5c      	ldr	r4, [pc, #368]	; (10a5c <mqtt_connect_broker+0x294>)
   108ec:	47a0      	blx	r4
   108ee:	1c38      	adds	r0, r7, #0
   108f0:	3020      	adds	r0, #32
   108f2:	2110      	movs	r1, #16
   108f4:	4b5a      	ldr	r3, [pc, #360]	; (10a60 <mqtt_connect_broker+0x298>)
   108f6:	4798      	blx	r3
   108f8:	2e80      	cmp	r6, #128	; 0x80
   108fa:	dd09      	ble.n	10910 <mqtt_connect_broker+0x148>
   108fc:	2180      	movs	r1, #128	; 0x80
   108fe:	4249      	negs	r1, r1
   10900:	4331      	orrs	r1, r6
   10902:	1c38      	adds	r0, r7, #0
   10904:	b249      	sxtb	r1, r1
   10906:	3020      	adds	r0, #32
   10908:	4c55      	ldr	r4, [pc, #340]	; (10a60 <mqtt_connect_broker+0x298>)
   1090a:	47a0      	blx	r4
   1090c:	11f6      	asrs	r6, r6, #7
   1090e:	e7f3      	b.n	108f8 <mqtt_connect_broker+0x130>
   10910:	4b54      	ldr	r3, [pc, #336]	; (10a64 <mqtt_connect_broker+0x29c>)
   10912:	401e      	ands	r6, r3
   10914:	d504      	bpl.n	10920 <mqtt_connect_broker+0x158>
   10916:	2380      	movs	r3, #128	; 0x80
   10918:	3e01      	subs	r6, #1
   1091a:	425b      	negs	r3, r3
   1091c:	431e      	orrs	r6, r3
   1091e:	3601      	adds	r6, #1
   10920:	1c38      	adds	r0, r7, #0
   10922:	b271      	sxtb	r1, r6
   10924:	3020      	adds	r0, #32
   10926:	4c4e      	ldr	r4, [pc, #312]	; (10a60 <mqtt_connect_broker+0x298>)
   10928:	47a0      	blx	r4
   1092a:	1c38      	adds	r0, r7, #0
   1092c:	4c4e      	ldr	r4, [pc, #312]	; (10a68 <mqtt_connect_broker+0x2a0>)
   1092e:	3020      	adds	r0, #32
   10930:	2106      	movs	r1, #6
   10932:	47a0      	blx	r4
   10934:	1c38      	adds	r0, r7, #0
   10936:	4b4d      	ldr	r3, [pc, #308]	; (10a6c <mqtt_connect_broker+0x2a4>)
   10938:	3020      	adds	r0, #32
   1093a:	494d      	ldr	r1, [pc, #308]	; (10a70 <mqtt_connect_broker+0x2a8>)
   1093c:	2206      	movs	r2, #6
   1093e:	4798      	blx	r3
   10940:	1c38      	adds	r0, r7, #0
   10942:	3020      	adds	r0, #32
   10944:	2103      	movs	r1, #3
   10946:	4a46      	ldr	r2, [pc, #280]	; (10a60 <mqtt_connect_broker+0x298>)
   10948:	4790      	blx	r2
   1094a:	69bb      	ldr	r3, [r7, #24]
   1094c:	1c38      	adds	r0, r7, #0
   1094e:	4a44      	ldr	r2, [pc, #272]	; (10a60 <mqtt_connect_broker+0x298>)
   10950:	b259      	sxtb	r1, r3
   10952:	3020      	adds	r0, #32
   10954:	4790      	blx	r2
   10956:	1c2b      	adds	r3, r5, #0
   10958:	3360      	adds	r3, #96	; 0x60
   1095a:	2000      	movs	r0, #0
   1095c:	5e19      	ldrsh	r1, [r3, r0]
   1095e:	1c38      	adds	r0, r7, #0
   10960:	3020      	adds	r0, #32
   10962:	47a0      	blx	r4
   10964:	4e39      	ldr	r6, [pc, #228]	; (10a4c <mqtt_connect_broker+0x284>)
   10966:	6e38      	ldr	r0, [r7, #96]	; 0x60
   10968:	47b0      	blx	r6
   1096a:	b201      	sxth	r1, r0
   1096c:	1c38      	adds	r0, r7, #0
   1096e:	3020      	adds	r0, #32
   10970:	47a0      	blx	r4
   10972:	6e38      	ldr	r0, [r7, #96]	; 0x60
   10974:	47b0      	blx	r6
   10976:	1c02      	adds	r2, r0, #0
   10978:	1c38      	adds	r0, r7, #0
   1097a:	3020      	adds	r0, #32
   1097c:	6e39      	ldr	r1, [r7, #96]	; 0x60
   1097e:	4b3b      	ldr	r3, [pc, #236]	; (10a6c <mqtt_connect_broker+0x2a4>)
   10980:	4798      	blx	r3
   10982:	6e78      	ldr	r0, [r7, #100]	; 0x64
   10984:	2800      	cmp	r0, #0
   10986:	d015      	beq.n	109b4 <mqtt_connect_broker+0x1ec>
   10988:	47b0      	blx	r6
   1098a:	b201      	sxth	r1, r0
   1098c:	1c38      	adds	r0, r7, #0
   1098e:	3020      	adds	r0, #32
   10990:	47a0      	blx	r4
   10992:	6e78      	ldr	r0, [r7, #100]	; 0x64
   10994:	47b0      	blx	r6
   10996:	1c02      	adds	r2, r0, #0
   10998:	1c38      	adds	r0, r7, #0
   1099a:	4c34      	ldr	r4, [pc, #208]	; (10a6c <mqtt_connect_broker+0x2a4>)
   1099c:	3020      	adds	r0, #32
   1099e:	6e79      	ldr	r1, [r7, #100]	; 0x64
   109a0:	47a0      	blx	r4
   109a2:	6ebc      	ldr	r4, [r7, #104]	; 0x68
   109a4:	2c00      	cmp	r4, #0
   109a6:	d005      	beq.n	109b4 <mqtt_connect_broker+0x1ec>
   109a8:	1c38      	adds	r0, r7, #0
   109aa:	1c21      	adds	r1, r4, #0
   109ac:	3020      	adds	r0, #32
   109ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   109b0:	4c2e      	ldr	r4, [pc, #184]	; (10a6c <mqtt_connect_broker+0x2a4>)
   109b2:	47a0      	blx	r4
   109b4:	69fc      	ldr	r4, [r7, #28]
   109b6:	2c00      	cmp	r4, #0
   109b8:	d01f      	beq.n	109fa <mqtt_connect_broker+0x232>
   109ba:	4e24      	ldr	r6, [pc, #144]	; (10a4c <mqtt_connect_broker+0x284>)
   109bc:	1c20      	adds	r0, r4, #0
   109be:	47b0      	blx	r6
   109c0:	b201      	sxth	r1, r0
   109c2:	1c38      	adds	r0, r7, #0
   109c4:	3020      	adds	r0, #32
   109c6:	4c28      	ldr	r4, [pc, #160]	; (10a68 <mqtt_connect_broker+0x2a0>)
   109c8:	47a0      	blx	r4
   109ca:	69f8      	ldr	r0, [r7, #28]
   109cc:	47b0      	blx	r6
   109ce:	1c02      	adds	r2, r0, #0
   109d0:	1c38      	adds	r0, r7, #0
   109d2:	3020      	adds	r0, #32
   109d4:	69f9      	ldr	r1, [r7, #28]
   109d6:	4c25      	ldr	r4, [pc, #148]	; (10a6c <mqtt_connect_broker+0x2a4>)
   109d8:	47a0      	blx	r4
   109da:	6978      	ldr	r0, [r7, #20]
   109dc:	2800      	cmp	r0, #0
   109de:	d00c      	beq.n	109fa <mqtt_connect_broker+0x232>
   109e0:	47b0      	blx	r6
   109e2:	b201      	sxth	r1, r0
   109e4:	1c38      	adds	r0, r7, #0
   109e6:	4a20      	ldr	r2, [pc, #128]	; (10a68 <mqtt_connect_broker+0x2a0>)
   109e8:	3020      	adds	r0, #32
   109ea:	4790      	blx	r2
   109ec:	6978      	ldr	r0, [r7, #20]
   109ee:	47b0      	blx	r6
   109f0:	1c02      	adds	r2, r0, #0
   109f2:	1c38      	adds	r0, r7, #0
   109f4:	3020      	adds	r0, #32
   109f6:	6979      	ldr	r1, [r7, #20]
   109f8:	47a0      	blx	r4
   109fa:	1c38      	adds	r0, r7, #0
   109fc:	1c2c      	adds	r4, r5, #0
   109fe:	3020      	adds	r0, #32
   10a00:	4b1c      	ldr	r3, [pc, #112]	; (10a74 <mqtt_connect_broker+0x2ac>)
   10a02:	3443      	adds	r4, #67	; 0x43
   10a04:	4798      	blx	r3
   10a06:	7821      	ldrb	r1, [r4, #0]
   10a08:	0789      	lsls	r1, r1, #30
   10a0a:	0fc9      	lsrs	r1, r1, #31
   10a0c:	2901      	cmp	r1, #1
   10a0e:	d10b      	bne.n	10a28 <mqtt_connect_broker+0x260>
   10a10:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   10a12:	2a00      	cmp	r2, #0
   10a14:	d108      	bne.n	10a28 <mqtt_connect_broker+0x260>
   10a16:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   10a18:	2b00      	cmp	r3, #0
   10a1a:	d005      	beq.n	10a28 <mqtt_connect_broker+0x260>
   10a1c:	2034      	movs	r0, #52	; 0x34
   10a1e:	55c2      	strb	r2, [r0, r7]
   10a20:	1c3a      	adds	r2, r7, #0
   10a22:	1c28      	adds	r0, r5, #0
   10a24:	3234      	adds	r2, #52	; 0x34
   10a26:	4798      	blx	r3
   10a28:	7823      	ldrb	r3, [r4, #0]
   10a2a:	2202      	movs	r2, #2
   10a2c:	4313      	orrs	r3, r2
   10a2e:	2208      	movs	r2, #8
   10a30:	4393      	bics	r3, r2
   10a32:	7023      	strb	r3, [r4, #0]
   10a34:	2000      	movs	r0, #0
   10a36:	e005      	b.n	10a44 <mqtt_connect_broker+0x27c>
   10a38:	2080      	movs	r0, #128	; 0x80
   10a3a:	e002      	b.n	10a42 <mqtt_connect_broker+0x27a>
   10a3c:	2078      	movs	r0, #120	; 0x78
   10a3e:	e000      	b.n	10a42 <mqtt_connect_broker+0x27a>
   10a40:	200b      	movs	r0, #11
   10a42:	4240      	negs	r0, r0
   10a44:	46bd      	mov	sp, r7
   10a46:	b013      	add	sp, #76	; 0x4c
   10a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a4a:	46c0      	nop			; (mov r8, r8)
   10a4c:	00011c43 	.word	0x00011c43
   10a50:	00009bf1 	.word	0x00009bf1
   10a54:	0000f491 	.word	0x0000f491
   10a58:	000104fd 	.word	0x000104fd
   10a5c:	0000f2a1 	.word	0x0000f2a1
   10a60:	0000f2cd 	.word	0x0000f2cd
   10a64:	8000007f 	.word	0x8000007f
   10a68:	0000f2f5 	.word	0x0000f2f5
   10a6c:	0000f30d 	.word	0x0000f30d
   10a70:	000148c8 	.word	0x000148c8
   10a74:	0000f2b1 	.word	0x0000f2b1

00010a78 <mqtt_publish>:
   10a78:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a7a:	b093      	sub	sp, #76	; 0x4c
   10a7c:	af02      	add	r7, sp, #8
   10a7e:	60fb      	str	r3, [r7, #12]
   10a80:	1c3b      	adds	r3, r7, #0
   10a82:	3358      	adds	r3, #88	; 0x58
   10a84:	781b      	ldrb	r3, [r3, #0]
   10a86:	1c04      	adds	r4, r0, #0
   10a88:	613b      	str	r3, [r7, #16]
   10a8a:	1c3b      	adds	r3, r7, #0
   10a8c:	335c      	adds	r3, #92	; 0x5c
   10a8e:	781b      	ldrb	r3, [r3, #0]
   10a90:	6179      	str	r1, [r7, #20]
   10a92:	60ba      	str	r2, [r7, #8]
   10a94:	607b      	str	r3, [r7, #4]
   10a96:	2800      	cmp	r0, #0
   10a98:	d101      	bne.n	10a9e <mqtt_publish+0x26>
   10a9a:	2516      	movs	r5, #22
   10a9c:	e0a7      	b.n	10bee <mqtt_publish+0x176>
   10a9e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   10aa0:	466a      	mov	r2, sp
   10aa2:	3307      	adds	r3, #7
   10aa4:	08db      	lsrs	r3, r3, #3
   10aa6:	00db      	lsls	r3, r3, #3
   10aa8:	1ad2      	subs	r2, r2, r3
   10aaa:	697b      	ldr	r3, [r7, #20]
   10aac:	4695      	mov	sp, r2
   10aae:	ae02      	add	r6, sp, #8
   10ab0:	2b00      	cmp	r3, #0
   10ab2:	d0f2      	beq.n	10a9a <mqtt_publish+0x22>
   10ab4:	693a      	ldr	r2, [r7, #16]
   10ab6:	2a02      	cmp	r2, #2
   10ab8:	d8ef      	bhi.n	10a9a <mqtt_publish+0x22>
   10aba:	1c05      	adds	r5, r0, #0
   10abc:	3543      	adds	r5, #67	; 0x43
   10abe:	782b      	ldrb	r3, [r5, #0]
   10ac0:	079a      	lsls	r2, r3, #30
   10ac2:	d400      	bmi.n	10ac6 <mqtt_publish+0x4e>
   10ac4:	e090      	b.n	10be8 <mqtt_publish+0x170>
   10ac6:	071a      	lsls	r2, r3, #28
   10ac8:	d40a      	bmi.n	10ae0 <mqtt_publish+0x68>
   10aca:	4b4b      	ldr	r3, [pc, #300]	; (10bf8 <mqtt_publish+0x180>)
   10acc:	6978      	ldr	r0, [r7, #20]
   10ace:	4798      	blx	r3
   10ad0:	68fd      	ldr	r5, [r7, #12]
   10ad2:	693b      	ldr	r3, [r7, #16]
   10ad4:	3502      	adds	r5, #2
   10ad6:	182d      	adds	r5, r5, r0
   10ad8:	2b00      	cmp	r3, #0
   10ada:	d011      	beq.n	10b00 <mqtt_publish+0x88>
   10adc:	3502      	adds	r5, #2
   10ade:	e00f      	b.n	10b00 <mqtt_publish+0x88>
   10ae0:	1c03      	adds	r3, r0, #0
   10ae2:	3370      	adds	r3, #112	; 0x70
   10ae4:	781b      	ldrb	r3, [r3, #0]
   10ae6:	2b00      	cmp	r3, #0
   10ae8:	d000      	beq.n	10aec <mqtt_publish+0x74>
   10aea:	e07f      	b.n	10bec <mqtt_publish+0x174>
   10aec:	782b      	ldrb	r3, [r5, #0]
   10aee:	071a      	lsls	r2, r3, #28
   10af0:	d5eb      	bpl.n	10aca <mqtt_publish+0x52>
   10af2:	4b42      	ldr	r3, [pc, #264]	; (10bfc <mqtt_publish+0x184>)
   10af4:	2000      	movs	r0, #0
   10af6:	4798      	blx	r3
   10af8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   10afa:	4b41      	ldr	r3, [pc, #260]	; (10c00 <mqtt_publish+0x188>)
   10afc:	4798      	blx	r3
   10afe:	e7f5      	b.n	10aec <mqtt_publish+0x74>
   10b00:	1c23      	adds	r3, r4, #0
   10b02:	3343      	adds	r3, #67	; 0x43
   10b04:	781a      	ldrb	r2, [r3, #0]
   10b06:	2108      	movs	r1, #8
   10b08:	430a      	orrs	r2, r1
   10b0a:	701a      	strb	r2, [r3, #0]
   10b0c:	1c38      	adds	r0, r7, #0
   10b0e:	9400      	str	r4, [sp, #0]
   10b10:	1c31      	adds	r1, r6, #0
   10b12:	302c      	adds	r0, #44	; 0x2c
   10b14:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   10b16:	4b3b      	ldr	r3, [pc, #236]	; (10c04 <mqtt_publish+0x18c>)
   10b18:	4e3b      	ldr	r6, [pc, #236]	; (10c08 <mqtt_publish+0x190>)
   10b1a:	47b0      	blx	r6
   10b1c:	687b      	ldr	r3, [r7, #4]
   10b1e:	2101      	movs	r1, #1
   10b20:	4019      	ands	r1, r3
   10b22:	2330      	movs	r3, #48	; 0x30
   10b24:	4319      	orrs	r1, r3
   10b26:	693b      	ldr	r3, [r7, #16]
   10b28:	1c38      	adds	r0, r7, #0
   10b2a:	005a      	lsls	r2, r3, #1
   10b2c:	2306      	movs	r3, #6
   10b2e:	4013      	ands	r3, r2
   10b30:	4319      	orrs	r1, r3
   10b32:	302c      	adds	r0, #44	; 0x2c
   10b34:	4b35      	ldr	r3, [pc, #212]	; (10c0c <mqtt_publish+0x194>)
   10b36:	4798      	blx	r3
   10b38:	4b34      	ldr	r3, [pc, #208]	; (10c0c <mqtt_publish+0x194>)
   10b3a:	2d80      	cmp	r5, #128	; 0x80
   10b3c:	dd08      	ble.n	10b50 <mqtt_publish+0xd8>
   10b3e:	2180      	movs	r1, #128	; 0x80
   10b40:	4249      	negs	r1, r1
   10b42:	4329      	orrs	r1, r5
   10b44:	1c38      	adds	r0, r7, #0
   10b46:	b249      	sxtb	r1, r1
   10b48:	302c      	adds	r0, #44	; 0x2c
   10b4a:	4798      	blx	r3
   10b4c:	11ed      	asrs	r5, r5, #7
   10b4e:	e7f3      	b.n	10b38 <mqtt_publish+0xc0>
   10b50:	4a2f      	ldr	r2, [pc, #188]	; (10c10 <mqtt_publish+0x198>)
   10b52:	4015      	ands	r5, r2
   10b54:	d504      	bpl.n	10b60 <mqtt_publish+0xe8>
   10b56:	2280      	movs	r2, #128	; 0x80
   10b58:	3d01      	subs	r5, #1
   10b5a:	4252      	negs	r2, r2
   10b5c:	4315      	orrs	r5, r2
   10b5e:	3501      	adds	r5, #1
   10b60:	1c38      	adds	r0, r7, #0
   10b62:	b269      	sxtb	r1, r5
   10b64:	302c      	adds	r0, #44	; 0x2c
   10b66:	4798      	blx	r3
   10b68:	4e23      	ldr	r6, [pc, #140]	; (10bf8 <mqtt_publish+0x180>)
   10b6a:	6978      	ldr	r0, [r7, #20]
   10b6c:	47b0      	blx	r6
   10b6e:	b201      	sxth	r1, r0
   10b70:	1c38      	adds	r0, r7, #0
   10b72:	302c      	adds	r0, #44	; 0x2c
   10b74:	4d27      	ldr	r5, [pc, #156]	; (10c14 <mqtt_publish+0x19c>)
   10b76:	47a8      	blx	r5
   10b78:	6978      	ldr	r0, [r7, #20]
   10b7a:	47b0      	blx	r6
   10b7c:	1c02      	adds	r2, r0, #0
   10b7e:	1c38      	adds	r0, r7, #0
   10b80:	302c      	adds	r0, #44	; 0x2c
   10b82:	6979      	ldr	r1, [r7, #20]
   10b84:	4e24      	ldr	r6, [pc, #144]	; (10c18 <mqtt_publish+0x1a0>)
   10b86:	47b0      	blx	r6
   10b88:	693a      	ldr	r2, [r7, #16]
   10b8a:	2a00      	cmp	r2, #0
   10b8c:	d006      	beq.n	10b9c <mqtt_publish+0x124>
   10b8e:	8821      	ldrh	r1, [r4, #0]
   10b90:	1c38      	adds	r0, r7, #0
   10b92:	1c4b      	adds	r3, r1, #1
   10b94:	8023      	strh	r3, [r4, #0]
   10b96:	b209      	sxth	r1, r1
   10b98:	302c      	adds	r0, #44	; 0x2c
   10b9a:	47a8      	blx	r5
   10b9c:	8823      	ldrh	r3, [r4, #0]
   10b9e:	2b00      	cmp	r3, #0
   10ba0:	d101      	bne.n	10ba6 <mqtt_publish+0x12e>
   10ba2:	2301      	movs	r3, #1
   10ba4:	8023      	strh	r3, [r4, #0]
   10ba6:	68bb      	ldr	r3, [r7, #8]
   10ba8:	2b00      	cmp	r3, #0
   10baa:	d006      	beq.n	10bba <mqtt_publish+0x142>
   10bac:	68fa      	ldr	r2, [r7, #12]
   10bae:	2a00      	cmp	r2, #0
   10bb0:	d003      	beq.n	10bba <mqtt_publish+0x142>
   10bb2:	1c38      	adds	r0, r7, #0
   10bb4:	302c      	adds	r0, #44	; 0x2c
   10bb6:	1c19      	adds	r1, r3, #0
   10bb8:	47b0      	blx	r6
   10bba:	1c38      	adds	r0, r7, #0
   10bbc:	4b17      	ldr	r3, [pc, #92]	; (10c1c <mqtt_publish+0x1a4>)
   10bbe:	302c      	adds	r0, #44	; 0x2c
   10bc0:	4798      	blx	r3
   10bc2:	1c23      	adds	r3, r4, #0
   10bc4:	3343      	adds	r3, #67	; 0x43
   10bc6:	781a      	ldrb	r2, [r3, #0]
   10bc8:	2108      	movs	r1, #8
   10bca:	438a      	bics	r2, r1
   10bcc:	701a      	strb	r2, [r3, #0]
   10bce:	693b      	ldr	r3, [r7, #16]
   10bd0:	2500      	movs	r5, #0
   10bd2:	42ab      	cmp	r3, r5
   10bd4:	d10c      	bne.n	10bf0 <mqtt_publish+0x178>
   10bd6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10bd8:	42ab      	cmp	r3, r5
   10bda:	d009      	beq.n	10bf0 <mqtt_publish+0x178>
   10bdc:	1c3a      	adds	r2, r7, #0
   10bde:	1c20      	adds	r0, r4, #0
   10be0:	2102      	movs	r1, #2
   10be2:	3218      	adds	r2, #24
   10be4:	4798      	blx	r3
   10be6:	e003      	b.n	10bf0 <mqtt_publish+0x178>
   10be8:	2580      	movs	r5, #128	; 0x80
   10bea:	e000      	b.n	10bee <mqtt_publish+0x176>
   10bec:	250b      	movs	r5, #11
   10bee:	426d      	negs	r5, r5
   10bf0:	1c28      	adds	r0, r5, #0
   10bf2:	46bd      	mov	sp, r7
   10bf4:	b011      	add	sp, #68	; 0x44
   10bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10bf8:	00011c43 	.word	0x00011c43
   10bfc:	00009bf1 	.word	0x00009bf1
   10c00:	0000f491 	.word	0x0000f491
   10c04:	000104fd 	.word	0x000104fd
   10c08:	0000f2a1 	.word	0x0000f2a1
   10c0c:	0000f2cd 	.word	0x0000f2cd
   10c10:	8000007f 	.word	0x8000007f
   10c14:	0000f2f5 	.word	0x0000f2f5
   10c18:	0000f30d 	.word	0x0000f30d
   10c1c:	0000f2b1 	.word	0x0000f2b1

00010c20 <mqtt_subscribe>:
   10c20:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c22:	b08d      	sub	sp, #52	; 0x34
   10c24:	af02      	add	r7, sp, #8
   10c26:	1c04      	adds	r4, r0, #0
   10c28:	60b9      	str	r1, [r7, #8]
   10c2a:	607a      	str	r2, [r7, #4]
   10c2c:	d101      	bne.n	10c32 <mqtt_subscribe+0x12>
   10c2e:	2016      	movs	r0, #22
   10c30:	e086      	b.n	10d40 <mqtt_subscribe+0x120>
   10c32:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   10c34:	466a      	mov	r2, sp
   10c36:	3307      	adds	r3, #7
   10c38:	08db      	lsrs	r3, r3, #3
   10c3a:	00db      	lsls	r3, r3, #3
   10c3c:	1ad2      	subs	r2, r2, r3
   10c3e:	4695      	mov	sp, r2
   10c40:	ad02      	add	r5, sp, #8
   10c42:	603d      	str	r5, [r7, #0]
   10c44:	68bd      	ldr	r5, [r7, #8]
   10c46:	2d00      	cmp	r5, #0
   10c48:	d0f1      	beq.n	10c2e <mqtt_subscribe+0xe>
   10c4a:	687d      	ldr	r5, [r7, #4]
   10c4c:	2d02      	cmp	r5, #2
   10c4e:	d8ee      	bhi.n	10c2e <mqtt_subscribe+0xe>
   10c50:	1c05      	adds	r5, r0, #0
   10c52:	3543      	adds	r5, #67	; 0x43
   10c54:	782b      	ldrb	r3, [r5, #0]
   10c56:	079a      	lsls	r2, r3, #30
   10c58:	d56f      	bpl.n	10d3a <mqtt_subscribe+0x11a>
   10c5a:	071a      	lsls	r2, r3, #28
   10c5c:	d41a      	bmi.n	10c94 <mqtt_subscribe+0x74>
   10c5e:	68b8      	ldr	r0, [r7, #8]
   10c60:	4d39      	ldr	r5, [pc, #228]	; (10d48 <mqtt_subscribe+0x128>)
   10c62:	47a8      	blx	r5
   10c64:	1c25      	adds	r5, r4, #0
   10c66:	3543      	adds	r5, #67	; 0x43
   10c68:	782b      	ldrb	r3, [r5, #0]
   10c6a:	2208      	movs	r2, #8
   10c6c:	4313      	orrs	r3, r2
   10c6e:	702b      	strb	r3, [r5, #0]
   10c70:	60fd      	str	r5, [r7, #12]
   10c72:	1d46      	adds	r6, r0, #5
   10c74:	9400      	str	r4, [sp, #0]
   10c76:	1c38      	adds	r0, r7, #0
   10c78:	3014      	adds	r0, #20
   10c7a:	6839      	ldr	r1, [r7, #0]
   10c7c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   10c7e:	4b33      	ldr	r3, [pc, #204]	; (10d4c <mqtt_subscribe+0x12c>)
   10c80:	4d33      	ldr	r5, [pc, #204]	; (10d50 <mqtt_subscribe+0x130>)
   10c82:	47a8      	blx	r5
   10c84:	1c38      	adds	r0, r7, #0
   10c86:	217e      	movs	r1, #126	; 0x7e
   10c88:	3014      	adds	r0, #20
   10c8a:	4249      	negs	r1, r1
   10c8c:	4b31      	ldr	r3, [pc, #196]	; (10d54 <mqtt_subscribe+0x134>)
   10c8e:	4798      	blx	r3
   10c90:	4d2d      	ldr	r5, [pc, #180]	; (10d48 <mqtt_subscribe+0x128>)
   10c92:	e00e      	b.n	10cb2 <mqtt_subscribe+0x92>
   10c94:	1c03      	adds	r3, r0, #0
   10c96:	3370      	adds	r3, #112	; 0x70
   10c98:	781b      	ldrb	r3, [r3, #0]
   10c9a:	2b00      	cmp	r3, #0
   10c9c:	d14f      	bne.n	10d3e <mqtt_subscribe+0x11e>
   10c9e:	782b      	ldrb	r3, [r5, #0]
   10ca0:	071a      	lsls	r2, r3, #28
   10ca2:	d5dc      	bpl.n	10c5e <mqtt_subscribe+0x3e>
   10ca4:	4b2c      	ldr	r3, [pc, #176]	; (10d58 <mqtt_subscribe+0x138>)
   10ca6:	2000      	movs	r0, #0
   10ca8:	4798      	blx	r3
   10caa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   10cac:	4b2b      	ldr	r3, [pc, #172]	; (10d5c <mqtt_subscribe+0x13c>)
   10cae:	4798      	blx	r3
   10cb0:	e7f5      	b.n	10c9e <mqtt_subscribe+0x7e>
   10cb2:	4b28      	ldr	r3, [pc, #160]	; (10d54 <mqtt_subscribe+0x134>)
   10cb4:	2e80      	cmp	r6, #128	; 0x80
   10cb6:	dd08      	ble.n	10cca <mqtt_subscribe+0xaa>
   10cb8:	2180      	movs	r1, #128	; 0x80
   10cba:	4249      	negs	r1, r1
   10cbc:	4331      	orrs	r1, r6
   10cbe:	1c38      	adds	r0, r7, #0
   10cc0:	b249      	sxtb	r1, r1
   10cc2:	3014      	adds	r0, #20
   10cc4:	4798      	blx	r3
   10cc6:	11f6      	asrs	r6, r6, #7
   10cc8:	e7f3      	b.n	10cb2 <mqtt_subscribe+0x92>
   10cca:	4925      	ldr	r1, [pc, #148]	; (10d60 <mqtt_subscribe+0x140>)
   10ccc:	4031      	ands	r1, r6
   10cce:	d504      	bpl.n	10cda <mqtt_subscribe+0xba>
   10cd0:	2280      	movs	r2, #128	; 0x80
   10cd2:	3901      	subs	r1, #1
   10cd4:	4252      	negs	r2, r2
   10cd6:	4311      	orrs	r1, r2
   10cd8:	3101      	adds	r1, #1
   10cda:	1c38      	adds	r0, r7, #0
   10cdc:	b249      	sxtb	r1, r1
   10cde:	3014      	adds	r0, #20
   10ce0:	4798      	blx	r3
   10ce2:	8821      	ldrh	r1, [r4, #0]
   10ce4:	1c38      	adds	r0, r7, #0
   10ce6:	1c4b      	adds	r3, r1, #1
   10ce8:	8023      	strh	r3, [r4, #0]
   10cea:	b209      	sxth	r1, r1
   10cec:	3014      	adds	r0, #20
   10cee:	4e1d      	ldr	r6, [pc, #116]	; (10d64 <mqtt_subscribe+0x144>)
   10cf0:	47b0      	blx	r6
   10cf2:	8823      	ldrh	r3, [r4, #0]
   10cf4:	2b00      	cmp	r3, #0
   10cf6:	d101      	bne.n	10cfc <mqtt_subscribe+0xdc>
   10cf8:	2301      	movs	r3, #1
   10cfa:	8023      	strh	r3, [r4, #0]
   10cfc:	68b8      	ldr	r0, [r7, #8]
   10cfe:	47a8      	blx	r5
   10d00:	b201      	sxth	r1, r0
   10d02:	1c38      	adds	r0, r7, #0
   10d04:	3014      	adds	r0, #20
   10d06:	47b0      	blx	r6
   10d08:	68b8      	ldr	r0, [r7, #8]
   10d0a:	47a8      	blx	r5
   10d0c:	1c02      	adds	r2, r0, #0
   10d0e:	1c38      	adds	r0, r7, #0
   10d10:	3014      	adds	r0, #20
   10d12:	68b9      	ldr	r1, [r7, #8]
   10d14:	4b14      	ldr	r3, [pc, #80]	; (10d68 <mqtt_subscribe+0x148>)
   10d16:	4798      	blx	r3
   10d18:	687d      	ldr	r5, [r7, #4]
   10d1a:	1c38      	adds	r0, r7, #0
   10d1c:	b269      	sxtb	r1, r5
   10d1e:	3014      	adds	r0, #20
   10d20:	4b0c      	ldr	r3, [pc, #48]	; (10d54 <mqtt_subscribe+0x134>)
   10d22:	4798      	blx	r3
   10d24:	1c38      	adds	r0, r7, #0
   10d26:	3014      	adds	r0, #20
   10d28:	4b10      	ldr	r3, [pc, #64]	; (10d6c <mqtt_subscribe+0x14c>)
   10d2a:	4798      	blx	r3
   10d2c:	68fd      	ldr	r5, [r7, #12]
   10d2e:	2208      	movs	r2, #8
   10d30:	782b      	ldrb	r3, [r5, #0]
   10d32:	2000      	movs	r0, #0
   10d34:	4393      	bics	r3, r2
   10d36:	702b      	strb	r3, [r5, #0]
   10d38:	e003      	b.n	10d42 <mqtt_subscribe+0x122>
   10d3a:	2080      	movs	r0, #128	; 0x80
   10d3c:	e000      	b.n	10d40 <mqtt_subscribe+0x120>
   10d3e:	200b      	movs	r0, #11
   10d40:	4240      	negs	r0, r0
   10d42:	46bd      	mov	sp, r7
   10d44:	b00b      	add	sp, #44	; 0x2c
   10d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d48:	00011c43 	.word	0x00011c43
   10d4c:	000104fd 	.word	0x000104fd
   10d50:	0000f2a1 	.word	0x0000f2a1
   10d54:	0000f2cd 	.word	0x0000f2cd
   10d58:	00009bf1 	.word	0x00009bf1
   10d5c:	0000f491 	.word	0x0000f491
   10d60:	8000007f 	.word	0x8000007f
   10d64:	0000f2f5 	.word	0x0000f2f5
   10d68:	0000f30d 	.word	0x0000f30d
   10d6c:	0000f2b1 	.word	0x0000f2b1

00010d70 <_mqtt_ping>:
   10d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10d72:	23c0      	movs	r3, #192	; 0xc0
   10d74:	a901      	add	r1, sp, #4
   10d76:	2500      	movs	r5, #0
   10d78:	700b      	strb	r3, [r1, #0]
   10d7a:	704d      	strb	r5, [r1, #1]
   10d7c:	42a8      	cmp	r0, r5
   10d7e:	d019      	beq.n	10db4 <_mqtt_ping+0x44>
   10d80:	1c04      	adds	r4, r0, #0
   10d82:	3443      	adds	r4, #67	; 0x43
   10d84:	7823      	ldrb	r3, [r4, #0]
   10d86:	079a      	lsls	r2, r3, #30
   10d88:	d516      	bpl.n	10db8 <_mqtt_ping+0x48>
   10d8a:	071a      	lsls	r2, r3, #28
   10d8c:	d416      	bmi.n	10dbc <_mqtt_ping+0x4c>
   10d8e:	2608      	movs	r6, #8
   10d90:	4333      	orrs	r3, r6
   10d92:	7023      	strb	r3, [r4, #0]
   10d94:	7880      	ldrb	r0, [r0, #2]
   10d96:	1c2b      	adds	r3, r5, #0
   10d98:	b240      	sxtb	r0, r0
   10d9a:	2202      	movs	r2, #2
   10d9c:	4f09      	ldr	r7, [pc, #36]	; (10dc4 <_mqtt_ping+0x54>)
   10d9e:	47b8      	blx	r7
   10da0:	1c2b      	adds	r3, r5, #0
   10da2:	42a8      	cmp	r0, r5
   10da4:	da0c      	bge.n	10dc0 <_mqtt_ping+0x50>
   10da6:	7823      	ldrb	r3, [r4, #0]
   10da8:	43b3      	bics	r3, r6
   10daa:	7023      	strb	r3, [r4, #0]
   10dac:	4b06      	ldr	r3, [pc, #24]	; (10dc8 <_mqtt_ping+0x58>)
   10dae:	4798      	blx	r3
   10db0:	1c03      	adds	r3, r0, #0
   10db2:	e005      	b.n	10dc0 <_mqtt_ping+0x50>
   10db4:	2316      	movs	r3, #22
   10db6:	e002      	b.n	10dbe <_mqtt_ping+0x4e>
   10db8:	2380      	movs	r3, #128	; 0x80
   10dba:	e000      	b.n	10dbe <_mqtt_ping+0x4e>
   10dbc:	230b      	movs	r3, #11
   10dbe:	425b      	negs	r3, r3
   10dc0:	1c18      	adds	r0, r3, #0
   10dc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10dc4:	0000b991 	.word	0x0000b991
   10dc8:	000104ad 	.word	0x000104ad

00010dcc <mqtt_timer_callback>:
   10dcc:	b570      	push	{r4, r5, r6, lr}
   10dce:	1c05      	adds	r5, r0, #0
   10dd0:	b086      	sub	sp, #24
   10dd2:	1c0e      	adds	r6, r1, #0
   10dd4:	1c14      	adds	r4, r2, #0
   10dd6:	2800      	cmp	r0, #0
   10dd8:	d012      	beq.n	10e00 <mqtt_timer_callback+0x34>
   10dda:	2a00      	cmp	r2, #0
   10ddc:	d010      	beq.n	10e00 <mqtt_timer_callback+0x34>
   10dde:	1c10      	adds	r0, r2, #0
   10de0:	4b08      	ldr	r3, [pc, #32]	; (10e04 <mqtt_timer_callback+0x38>)
   10de2:	4798      	blx	r3
   10de4:	2800      	cmp	r0, #0
   10de6:	da04      	bge.n	10df2 <mqtt_timer_callback+0x26>
   10de8:	1c28      	adds	r0, r5, #0
   10dea:	1c31      	adds	r1, r6, #0
   10dec:	2200      	movs	r2, #0
   10dee:	4b06      	ldr	r3, [pc, #24]	; (10e08 <mqtt_timer_callback+0x3c>)
   10df0:	e005      	b.n	10dfe <mqtt_timer_callback+0x32>
   10df2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10df4:	2b00      	cmp	r3, #0
   10df6:	d003      	beq.n	10e00 <mqtt_timer_callback+0x34>
   10df8:	1c20      	adds	r0, r4, #0
   10dfa:	2107      	movs	r1, #7
   10dfc:	aa01      	add	r2, sp, #4
   10dfe:	4798      	blx	r3
   10e00:	b006      	add	sp, #24
   10e02:	bd70      	pop	{r4, r5, r6, pc}
   10e04:	00010d71 	.word	0x00010d71
   10e08:	0000f455 	.word	0x0000f455

00010e0c <_mqtt_puback>:
   10e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10e0e:	2302      	movs	r3, #2
   10e10:	ac01      	add	r4, sp, #4
   10e12:	2700      	movs	r7, #0
   10e14:	7063      	strb	r3, [r4, #1]
   10e16:	42b8      	cmp	r0, r7
   10e18:	d01e      	beq.n	10e58 <_mqtt_puback+0x4c>
   10e1a:	1c05      	adds	r5, r0, #0
   10e1c:	3543      	adds	r5, #67	; 0x43
   10e1e:	782b      	ldrb	r3, [r5, #0]
   10e20:	079e      	lsls	r6, r3, #30
   10e22:	d51b      	bpl.n	10e5c <_mqtt_puback+0x50>
   10e24:	071e      	lsls	r6, r3, #28
   10e26:	d41b      	bmi.n	10e60 <_mqtt_puback+0x54>
   10e28:	2608      	movs	r6, #8
   10e2a:	4333      	orrs	r3, r6
   10e2c:	702b      	strb	r3, [r5, #0]
   10e2e:	7880      	ldrb	r0, [r0, #2]
   10e30:	7021      	strb	r1, [r4, #0]
   10e32:	0a11      	lsrs	r1, r2, #8
   10e34:	70a1      	strb	r1, [r4, #2]
   10e36:	70e2      	strb	r2, [r4, #3]
   10e38:	1c21      	adds	r1, r4, #0
   10e3a:	1c3b      	adds	r3, r7, #0
   10e3c:	b240      	sxtb	r0, r0
   10e3e:	2204      	movs	r2, #4
   10e40:	4c09      	ldr	r4, [pc, #36]	; (10e68 <_mqtt_puback+0x5c>)
   10e42:	47a0      	blx	r4
   10e44:	1c3b      	adds	r3, r7, #0
   10e46:	42b8      	cmp	r0, r7
   10e48:	da0c      	bge.n	10e64 <_mqtt_puback+0x58>
   10e4a:	782b      	ldrb	r3, [r5, #0]
   10e4c:	43b3      	bics	r3, r6
   10e4e:	702b      	strb	r3, [r5, #0]
   10e50:	4b06      	ldr	r3, [pc, #24]	; (10e6c <_mqtt_puback+0x60>)
   10e52:	4798      	blx	r3
   10e54:	1c03      	adds	r3, r0, #0
   10e56:	e005      	b.n	10e64 <_mqtt_puback+0x58>
   10e58:	2316      	movs	r3, #22
   10e5a:	e002      	b.n	10e62 <_mqtt_puback+0x56>
   10e5c:	2380      	movs	r3, #128	; 0x80
   10e5e:	e000      	b.n	10e62 <_mqtt_puback+0x56>
   10e60:	230b      	movs	r3, #11
   10e62:	425b      	negs	r3, r3
   10e64:	1c18      	adds	r0, r3, #0
   10e66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10e68:	0000b991 	.word	0x0000b991
   10e6c:	000104ad 	.word	0x000104ad

00010e70 <mqtt_clear_conn>:
   10e70:	b530      	push	{r4, r5, lr}
   10e72:	1c04      	adds	r4, r0, #0
   10e74:	b087      	sub	sp, #28
   10e76:	2800      	cmp	r0, #0
   10e78:	d01c      	beq.n	10eb4 <mqtt_clear_conn+0x44>
   10e7a:	2002      	movs	r0, #2
   10e7c:	4b0e      	ldr	r3, [pc, #56]	; (10eb8 <mqtt_clear_conn+0x48>)
   10e7e:	5620      	ldrsb	r0, [r4, r0]
   10e80:	4798      	blx	r3
   10e82:	1c23      	adds	r3, r4, #0
   10e84:	3343      	adds	r3, #67	; 0x43
   10e86:	781a      	ldrb	r2, [r3, #0]
   10e88:	21fc      	movs	r1, #252	; 0xfc
   10e8a:	0795      	lsls	r5, r2, #30
   10e8c:	400a      	ands	r2, r1
   10e8e:	701a      	strb	r2, [r3, #0]
   10e90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   10e92:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   10e94:	9301      	str	r3, [sp, #4]
   10e96:	2300      	movs	r3, #0
   10e98:	64e3      	str	r3, [r4, #76]	; 0x4c
   10e9a:	6d21      	ldr	r1, [r4, #80]	; 0x50
   10e9c:	4b07      	ldr	r3, [pc, #28]	; (10ebc <mqtt_clear_conn+0x4c>)
   10e9e:	4798      	blx	r3
   10ea0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10ea2:	0fed      	lsrs	r5, r5, #31
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	d005      	beq.n	10eb4 <mqtt_clear_conn+0x44>
   10ea8:	2d00      	cmp	r5, #0
   10eaa:	d003      	beq.n	10eb4 <mqtt_clear_conn+0x44>
   10eac:	1c20      	adds	r0, r4, #0
   10eae:	2105      	movs	r1, #5
   10eb0:	aa01      	add	r2, sp, #4
   10eb2:	4798      	blx	r3
   10eb4:	b007      	add	sp, #28
   10eb6:	bd30      	pop	{r4, r5, pc}
   10eb8:	0000babd 	.word	0x0000babd
   10ebc:	0000f481 	.word	0x0000f481

00010ec0 <mqtt_disconnect>:
   10ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10ec2:	23e0      	movs	r3, #224	; 0xe0
   10ec4:	ae01      	add	r6, sp, #4
   10ec6:	2700      	movs	r7, #0
   10ec8:	1c05      	adds	r5, r0, #0
   10eca:	7033      	strb	r3, [r6, #0]
   10ecc:	7077      	strb	r7, [r6, #1]
   10ece:	42b8      	cmp	r0, r7
   10ed0:	d036      	beq.n	10f40 <mqtt_disconnect+0x80>
   10ed2:	1c04      	adds	r4, r0, #0
   10ed4:	3443      	adds	r4, #67	; 0x43
   10ed6:	7823      	ldrb	r3, [r4, #0]
   10ed8:	079a      	lsls	r2, r3, #30
   10eda:	d533      	bpl.n	10f44 <mqtt_disconnect+0x84>
   10edc:	42b9      	cmp	r1, r7
   10ede:	d12b      	bne.n	10f38 <mqtt_disconnect+0x78>
   10ee0:	071a      	lsls	r2, r3, #28
   10ee2:	d414      	bmi.n	10f0e <mqtt_disconnect+0x4e>
   10ee4:	7823      	ldrb	r3, [r4, #0]
   10ee6:	2210      	movs	r2, #16
   10ee8:	4313      	orrs	r3, r2
   10eea:	2708      	movs	r7, #8
   10eec:	433b      	orrs	r3, r7
   10eee:	7023      	strb	r3, [r4, #0]
   10ef0:	2002      	movs	r0, #2
   10ef2:	5628      	ldrsb	r0, [r5, r0]
   10ef4:	1c31      	adds	r1, r6, #0
   10ef6:	2202      	movs	r2, #2
   10ef8:	2300      	movs	r3, #0
   10efa:	4d15      	ldr	r5, [pc, #84]	; (10f50 <mqtt_disconnect+0x90>)
   10efc:	47a8      	blx	r5
   10efe:	2800      	cmp	r0, #0
   10f00:	da14      	bge.n	10f2c <mqtt_disconnect+0x6c>
   10f02:	7823      	ldrb	r3, [r4, #0]
   10f04:	43bb      	bics	r3, r7
   10f06:	7023      	strb	r3, [r4, #0]
   10f08:	4b12      	ldr	r3, [pc, #72]	; (10f54 <mqtt_disconnect+0x94>)
   10f0a:	4798      	blx	r3
   10f0c:	e01e      	b.n	10f4c <mqtt_disconnect+0x8c>
   10f0e:	1c03      	adds	r3, r0, #0
   10f10:	3370      	adds	r3, #112	; 0x70
   10f12:	781b      	ldrb	r3, [r3, #0]
   10f14:	2b00      	cmp	r3, #0
   10f16:	d117      	bne.n	10f48 <mqtt_disconnect+0x88>
   10f18:	7823      	ldrb	r3, [r4, #0]
   10f1a:	071a      	lsls	r2, r3, #28
   10f1c:	d5e2      	bpl.n	10ee4 <mqtt_disconnect+0x24>
   10f1e:	4b0e      	ldr	r3, [pc, #56]	; (10f58 <mqtt_disconnect+0x98>)
   10f20:	2000      	movs	r0, #0
   10f22:	4798      	blx	r3
   10f24:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   10f26:	4b0d      	ldr	r3, [pc, #52]	; (10f5c <mqtt_disconnect+0x9c>)
   10f28:	4798      	blx	r3
   10f2a:	e7f5      	b.n	10f18 <mqtt_disconnect+0x58>
   10f2c:	7823      	ldrb	r3, [r4, #0]
   10f2e:	2202      	movs	r2, #2
   10f30:	4393      	bics	r3, r2
   10f32:	7023      	strb	r3, [r4, #0]
   10f34:	2000      	movs	r0, #0
   10f36:	e009      	b.n	10f4c <mqtt_disconnect+0x8c>
   10f38:	4b09      	ldr	r3, [pc, #36]	; (10f60 <mqtt_disconnect+0xa0>)
   10f3a:	4798      	blx	r3
   10f3c:	1c38      	adds	r0, r7, #0
   10f3e:	e005      	b.n	10f4c <mqtt_disconnect+0x8c>
   10f40:	2016      	movs	r0, #22
   10f42:	e002      	b.n	10f4a <mqtt_disconnect+0x8a>
   10f44:	2080      	movs	r0, #128	; 0x80
   10f46:	e000      	b.n	10f4a <mqtt_disconnect+0x8a>
   10f48:	200b      	movs	r0, #11
   10f4a:	4240      	negs	r0, r0
   10f4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10f4e:	46c0      	nop			; (mov r8, r8)
   10f50:	0000b991 	.word	0x0000b991
   10f54:	000104ad 	.word	0x000104ad
   10f58:	00009bf1 	.word	0x00009bf1
   10f5c:	0000f491 	.word	0x0000f491
   10f60:	00010e71 	.word	0x00010e71

00010f64 <_mqtt_recv_handler>:
   10f64:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f66:	1c04      	adds	r4, r0, #0
   10f68:	6e40      	ldr	r0, [r0, #100]	; 0x64
   10f6a:	230f      	movs	r3, #15
   10f6c:	7802      	ldrb	r2, [r0, #0]
   10f6e:	b087      	sub	sp, #28
   10f70:	1c15      	adds	r5, r2, #0
   10f72:	439d      	bics	r5, r3
   10f74:	2d50      	cmp	r5, #80	; 0x50
   10f76:	d100      	bne.n	10f7a <_mqtt_recv_handler+0x16>
   10f78:	e098      	b.n	110ac <_mqtt_recv_handler+0x148>
   10f7a:	d808      	bhi.n	10f8e <_mqtt_recv_handler+0x2a>
   10f7c:	2d30      	cmp	r5, #48	; 0x30
   10f7e:	d03f      	beq.n	11000 <_mqtt_recv_handler+0x9c>
   10f80:	2d40      	cmp	r5, #64	; 0x40
   10f82:	d100      	bne.n	10f86 <_mqtt_recv_handler+0x22>
   10f84:	e0b3      	b.n	110ee <_mqtt_recv_handler+0x18a>
   10f86:	2d20      	cmp	r5, #32
   10f88:	d000      	beq.n	10f8c <_mqtt_recv_handler+0x28>
   10f8a:	e0c3      	b.n	11114 <_mqtt_recv_handler+0x1b0>
   10f8c:	e00e      	b.n	10fac <_mqtt_recv_handler+0x48>
   10f8e:	2d70      	cmp	r5, #112	; 0x70
   10f90:	d100      	bne.n	10f94 <_mqtt_recv_handler+0x30>
   10f92:	e0ac      	b.n	110ee <_mqtt_recv_handler+0x18a>
   10f94:	d803      	bhi.n	10f9e <_mqtt_recv_handler+0x3a>
   10f96:	2d60      	cmp	r5, #96	; 0x60
   10f98:	d100      	bne.n	10f9c <_mqtt_recv_handler+0x38>
   10f9a:	e096      	b.n	110ca <_mqtt_recv_handler+0x166>
   10f9c:	e0ba      	b.n	11114 <_mqtt_recv_handler+0x1b0>
   10f9e:	2d90      	cmp	r5, #144	; 0x90
   10fa0:	d100      	bne.n	10fa4 <_mqtt_recv_handler+0x40>
   10fa2:	e0aa      	b.n	110fa <_mqtt_recv_handler+0x196>
   10fa4:	2db0      	cmp	r5, #176	; 0xb0
   10fa6:	d100      	bne.n	10faa <_mqtt_recv_handler+0x46>
   10fa8:	e0ad      	b.n	11106 <_mqtt_recv_handler+0x1a2>
   10faa:	e0b3      	b.n	11114 <_mqtt_recv_handler+0x1b0>
   10fac:	aa01      	add	r2, sp, #4
   10fae:	2303      	movs	r3, #3
   10fb0:	2901      	cmp	r1, #1
   10fb2:	d900      	bls.n	10fb6 <_mqtt_recv_handler+0x52>
   10fb4:	78c3      	ldrb	r3, [r0, #3]
   10fb6:	7013      	strb	r3, [r2, #0]
   10fb8:	7813      	ldrb	r3, [r2, #0]
   10fba:	2b00      	cmp	r3, #0
   10fbc:	d00d      	beq.n	10fda <_mqtt_recv_handler+0x76>
   10fbe:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10fc0:	2b00      	cmp	r3, #0
   10fc2:	d002      	beq.n	10fca <_mqtt_recv_handler+0x66>
   10fc4:	1c20      	adds	r0, r4, #0
   10fc6:	2101      	movs	r1, #1
   10fc8:	4798      	blx	r3
   10fca:	236f      	movs	r3, #111	; 0x6f
   10fcc:	425b      	negs	r3, r3
   10fce:	64e3      	str	r3, [r4, #76]	; 0x4c
   10fd0:	1c20      	adds	r0, r4, #0
   10fd2:	2100      	movs	r1, #0
   10fd4:	4b50      	ldr	r3, [pc, #320]	; (11118 <_mqtt_recv_handler+0x1b4>)
   10fd6:	4798      	blx	r3
   10fd8:	e09c      	b.n	11114 <_mqtt_recv_handler+0x1b0>
   10fda:	1c23      	adds	r3, r4, #0
   10fdc:	3343      	adds	r3, #67	; 0x43
   10fde:	7819      	ldrb	r1, [r3, #0]
   10fe0:	0789      	lsls	r1, r1, #30
   10fe2:	0fc9      	lsrs	r1, r1, #31
   10fe4:	d105      	bne.n	10ff2 <_mqtt_recv_handler+0x8e>
   10fe6:	781a      	ldrb	r2, [r3, #0]
   10fe8:	64e1      	str	r1, [r4, #76]	; 0x4c
   10fea:	2102      	movs	r1, #2
   10fec:	430a      	orrs	r2, r1
   10fee:	701a      	strb	r2, [r3, #0]
   10ff0:	e090      	b.n	11114 <_mqtt_recv_handler+0x1b0>
   10ff2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10ff4:	2b00      	cmp	r3, #0
   10ff6:	d100      	bne.n	10ffa <_mqtt_recv_handler+0x96>
   10ff8:	e08c      	b.n	11114 <_mqtt_recv_handler+0x1b0>
   10ffa:	1c20      	adds	r0, r4, #0
   10ffc:	2101      	movs	r1, #1
   10ffe:	e088      	b.n	11112 <_mqtt_recv_handler+0x1ae>
   11000:	ad01      	add	r5, sp, #4
   11002:	0713      	lsls	r3, r2, #28
   11004:	7c2a      	ldrb	r2, [r5, #16]
   11006:	0fdb      	lsrs	r3, r3, #31
   11008:	2604      	movs	r6, #4
   1100a:	009b      	lsls	r3, r3, #2
   1100c:	43b2      	bics	r2, r6
   1100e:	431a      	orrs	r2, r3
   11010:	742a      	strb	r2, [r5, #16]
   11012:	7807      	ldrb	r7, [r0, #0]
   11014:	2303      	movs	r3, #3
   11016:	b2d2      	uxtb	r2, r2
   11018:	087f      	lsrs	r7, r7, #1
   1101a:	439a      	bics	r2, r3
   1101c:	401f      	ands	r7, r3
   1101e:	1c13      	adds	r3, r2, #0
   11020:	433b      	orrs	r3, r7
   11022:	742b      	strb	r3, [r5, #16]
   11024:	1c43      	adds	r3, r0, #1
   11026:	7818      	ldrb	r0, [r3, #0]
   11028:	1c5a      	adds	r2, r3, #1
   1102a:	287f      	cmp	r0, #127	; 0x7f
   1102c:	d901      	bls.n	11032 <_mqtt_recv_handler+0xce>
   1102e:	1c13      	adds	r3, r2, #0
   11030:	e7f9      	b.n	11026 <_mqtt_recv_handler+0xc2>
   11032:	7858      	ldrb	r0, [r3, #1]
   11034:	789e      	ldrb	r6, [r3, #2]
   11036:	0200      	lsls	r0, r0, #8
   11038:	4330      	orrs	r0, r6
   1103a:	3303      	adds	r3, #3
   1103c:	2600      	movs	r6, #0
   1103e:	6068      	str	r0, [r5, #4]
   11040:	9301      	str	r3, [sp, #4]
   11042:	1818      	adds	r0, r3, r0
   11044:	42b7      	cmp	r7, r6
   11046:	d004      	beq.n	11052 <_mqtt_recv_handler+0xee>
   11048:	7806      	ldrb	r6, [r0, #0]
   1104a:	7843      	ldrb	r3, [r0, #1]
   1104c:	0236      	lsls	r6, r6, #8
   1104e:	431e      	orrs	r6, r3
   11050:	3002      	adds	r0, #2
   11052:	1851      	adds	r1, r2, r1
   11054:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11056:	60a8      	str	r0, [r5, #8]
   11058:	1a08      	subs	r0, r1, r0
   1105a:	60e8      	str	r0, [r5, #12]
   1105c:	2b00      	cmp	r3, #0
   1105e:	d003      	beq.n	11068 <_mqtt_recv_handler+0x104>
   11060:	1c20      	adds	r0, r4, #0
   11062:	2106      	movs	r1, #6
   11064:	1c2a      	adds	r2, r5, #0
   11066:	4798      	blx	r3
   11068:	7c2b      	ldrb	r3, [r5, #16]
   1106a:	079b      	lsls	r3, r3, #30
   1106c:	0f9b      	lsrs	r3, r3, #30
   1106e:	2b01      	cmp	r3, #1
   11070:	d10b      	bne.n	1108a <_mqtt_recv_handler+0x126>
   11072:	b2b6      	uxth	r6, r6
   11074:	1c20      	adds	r0, r4, #0
   11076:	2140      	movs	r1, #64	; 0x40
   11078:	1c32      	adds	r2, r6, #0
   1107a:	4b28      	ldr	r3, [pc, #160]	; (1111c <_mqtt_recv_handler+0x1b8>)
   1107c:	4798      	blx	r3
   1107e:	2800      	cmp	r0, #0
   11080:	d048      	beq.n	11114 <_mqtt_recv_handler+0x1b0>
   11082:	1c23      	adds	r3, r4, #0
   11084:	3348      	adds	r3, #72	; 0x48
   11086:	2240      	movs	r2, #64	; 0x40
   11088:	e00c      	b.n	110a4 <_mqtt_recv_handler+0x140>
   1108a:	2b02      	cmp	r3, #2
   1108c:	d142      	bne.n	11114 <_mqtt_recv_handler+0x1b0>
   1108e:	b2b6      	uxth	r6, r6
   11090:	1c20      	adds	r0, r4, #0
   11092:	2150      	movs	r1, #80	; 0x50
   11094:	1c32      	adds	r2, r6, #0
   11096:	4b21      	ldr	r3, [pc, #132]	; (1111c <_mqtt_recv_handler+0x1b8>)
   11098:	4798      	blx	r3
   1109a:	2800      	cmp	r0, #0
   1109c:	d03a      	beq.n	11114 <_mqtt_recv_handler+0x1b0>
   1109e:	1c23      	adds	r3, r4, #0
   110a0:	3348      	adds	r3, #72	; 0x48
   110a2:	2250      	movs	r2, #80	; 0x50
   110a4:	344a      	adds	r4, #74	; 0x4a
   110a6:	701a      	strb	r2, [r3, #0]
   110a8:	8026      	strh	r6, [r4, #0]
   110aa:	e033      	b.n	11114 <_mqtt_recv_handler+0x1b0>
   110ac:	7885      	ldrb	r5, [r0, #2]
   110ae:	78c3      	ldrb	r3, [r0, #3]
   110b0:	022d      	lsls	r5, r5, #8
   110b2:	431d      	orrs	r5, r3
   110b4:	1c20      	adds	r0, r4, #0
   110b6:	2162      	movs	r1, #98	; 0x62
   110b8:	1c2a      	adds	r2, r5, #0
   110ba:	4b18      	ldr	r3, [pc, #96]	; (1111c <_mqtt_recv_handler+0x1b8>)
   110bc:	4798      	blx	r3
   110be:	2800      	cmp	r0, #0
   110c0:	d028      	beq.n	11114 <_mqtt_recv_handler+0x1b0>
   110c2:	1c23      	adds	r3, r4, #0
   110c4:	3348      	adds	r3, #72	; 0x48
   110c6:	2260      	movs	r2, #96	; 0x60
   110c8:	e00d      	b.n	110e6 <_mqtt_recv_handler+0x182>
   110ca:	7885      	ldrb	r5, [r0, #2]
   110cc:	78c3      	ldrb	r3, [r0, #3]
   110ce:	022d      	lsls	r5, r5, #8
   110d0:	431d      	orrs	r5, r3
   110d2:	1c20      	adds	r0, r4, #0
   110d4:	2170      	movs	r1, #112	; 0x70
   110d6:	1c2a      	adds	r2, r5, #0
   110d8:	4b10      	ldr	r3, [pc, #64]	; (1111c <_mqtt_recv_handler+0x1b8>)
   110da:	4798      	blx	r3
   110dc:	2800      	cmp	r0, #0
   110de:	d019      	beq.n	11114 <_mqtt_recv_handler+0x1b0>
   110e0:	1c23      	adds	r3, r4, #0
   110e2:	3348      	adds	r3, #72	; 0x48
   110e4:	2270      	movs	r2, #112	; 0x70
   110e6:	344a      	adds	r4, #74	; 0x4a
   110e8:	701a      	strb	r2, [r3, #0]
   110ea:	8025      	strh	r5, [r4, #0]
   110ec:	e012      	b.n	11114 <_mqtt_recv_handler+0x1b0>
   110ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
   110f0:	2b00      	cmp	r3, #0
   110f2:	d00f      	beq.n	11114 <_mqtt_recv_handler+0x1b0>
   110f4:	1c20      	adds	r0, r4, #0
   110f6:	2102      	movs	r1, #2
   110f8:	e00a      	b.n	11110 <_mqtt_recv_handler+0x1ac>
   110fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
   110fc:	2b00      	cmp	r3, #0
   110fe:	d009      	beq.n	11114 <_mqtt_recv_handler+0x1b0>
   11100:	1c20      	adds	r0, r4, #0
   11102:	2103      	movs	r1, #3
   11104:	e004      	b.n	11110 <_mqtt_recv_handler+0x1ac>
   11106:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11108:	2b00      	cmp	r3, #0
   1110a:	d003      	beq.n	11114 <_mqtt_recv_handler+0x1b0>
   1110c:	1c20      	adds	r0, r4, #0
   1110e:	2104      	movs	r1, #4
   11110:	aa01      	add	r2, sp, #4
   11112:	4798      	blx	r3
   11114:	b007      	add	sp, #28
   11116:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11118:	00010ec1 	.word	0x00010ec1
   1111c:	00010e0d 	.word	0x00010e0d

00011120 <mqtt_recv_packet>:
   11120:	b538      	push	{r3, r4, r5, lr}
   11122:	1e04      	subs	r4, r0, #0
   11124:	d017      	beq.n	11156 <mqtt_recv_packet+0x36>
   11126:	6c42      	ldr	r2, [r0, #68]	; 0x44
   11128:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1112a:	429a      	cmp	r2, r3
   1112c:	d906      	bls.n	1113c <mqtt_recv_packet+0x1c>
   1112e:	238b      	movs	r3, #139	; 0x8b
   11130:	425b      	negs	r3, r3
   11132:	64c3      	str	r3, [r0, #76]	; 0x4c
   11134:	2100      	movs	r1, #0
   11136:	4b08      	ldr	r3, [pc, #32]	; (11158 <mqtt_recv_packet+0x38>)
   11138:	4798      	blx	r3
   1113a:	e00c      	b.n	11156 <mqtt_recv_packet+0x36>
   1113c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1113e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11140:	2002      	movs	r0, #2
   11142:	1899      	adds	r1, r3, r2
   11144:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   11146:	5620      	ldrsb	r0, [r4, r0]
   11148:	1a9a      	subs	r2, r3, r2
   1114a:	b292      	uxth	r2, r2
   1114c:	2300      	movs	r3, #0
   1114e:	4d03      	ldr	r5, [pc, #12]	; (1115c <mqtt_recv_packet+0x3c>)
   11150:	47a8      	blx	r5
   11152:	2800      	cmp	r0, #0
   11154:	d1f2      	bne.n	1113c <mqtt_recv_packet+0x1c>
   11156:	bd38      	pop	{r3, r4, r5, pc}
   11158:	00010ec1 	.word	0x00010ec1
   1115c:	0000ba29 	.word	0x0000ba29

00011160 <mqtt_recved_packet>:
   11160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11162:	1e04      	subs	r4, r0, #0
   11164:	d042      	beq.n	111ec <mqtt_recved_packet+0x8c>
   11166:	6c63      	ldr	r3, [r4, #68]	; 0x44
   11168:	6e67      	ldr	r7, [r4, #100]	; 0x64
   1116a:	18ca      	adds	r2, r1, r3
   1116c:	2301      	movs	r3, #1
   1116e:	9701      	str	r7, [sp, #4]
   11170:	6462      	str	r2, [r4, #68]	; 0x44
   11172:	2600      	movs	r6, #0
   11174:	1c1d      	adds	r5, r3, #0
   11176:	42a9      	cmp	r1, r5
   11178:	dc03      	bgt.n	11182 <mqtt_recved_packet+0x22>
   1117a:	1c20      	adds	r0, r4, #0
   1117c:	4b1c      	ldr	r3, [pc, #112]	; (111f0 <mqtt_recved_packet+0x90>)
   1117e:	4798      	blx	r3
   11180:	e034      	b.n	111ec <mqtt_recved_packet+0x8c>
   11182:	9f01      	ldr	r7, [sp, #4]
   11184:	5d78      	ldrb	r0, [r7, r5]
   11186:	01df      	lsls	r7, r3, #7
   11188:	46bc      	mov	ip, r7
   1118a:	2d03      	cmp	r5, #3
   1118c:	d101      	bne.n	11192 <mqtt_recved_packet+0x32>
   1118e:	234d      	movs	r3, #77	; 0x4d
   11190:	e00e      	b.n	111b0 <mqtt_recved_packet+0x50>
   11192:	277f      	movs	r7, #127	; 0x7f
   11194:	4007      	ands	r7, r0
   11196:	437b      	muls	r3, r7
   11198:	b240      	sxtb	r0, r0
   1119a:	3501      	adds	r5, #1
   1119c:	18f6      	adds	r6, r6, r3
   1119e:	2800      	cmp	r0, #0
   111a0:	da01      	bge.n	111a6 <mqtt_recved_packet+0x46>
   111a2:	4663      	mov	r3, ip
   111a4:	e7e7      	b.n	11176 <mqtt_recved_packet+0x16>
   111a6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   111a8:	19af      	adds	r7, r5, r6
   111aa:	429f      	cmp	r7, r3
   111ac:	d907      	bls.n	111be <mqtt_recved_packet+0x5e>
   111ae:	238b      	movs	r3, #139	; 0x8b
   111b0:	425b      	negs	r3, r3
   111b2:	64e3      	str	r3, [r4, #76]	; 0x4c
   111b4:	1c20      	adds	r0, r4, #0
   111b6:	2100      	movs	r1, #0
   111b8:	4b0e      	ldr	r3, [pc, #56]	; (111f4 <mqtt_recved_packet+0x94>)
   111ba:	4798      	blx	r3
   111bc:	e016      	b.n	111ec <mqtt_recved_packet+0x8c>
   111be:	42ba      	cmp	r2, r7
   111c0:	d314      	bcc.n	111ec <mqtt_recved_packet+0x8c>
   111c2:	4b0d      	ldr	r3, [pc, #52]	; (111f8 <mqtt_recved_packet+0x98>)
   111c4:	1c20      	adds	r0, r4, #0
   111c6:	1c31      	adds	r1, r6, #0
   111c8:	4798      	blx	r3
   111ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
   111cc:	42bb      	cmp	r3, r7
   111ce:	d102      	bne.n	111d6 <mqtt_recved_packet+0x76>
   111d0:	2300      	movs	r3, #0
   111d2:	6463      	str	r3, [r4, #68]	; 0x44
   111d4:	e00a      	b.n	111ec <mqtt_recved_packet+0x8c>
   111d6:	1b9e      	subs	r6, r3, r6
   111d8:	9b01      	ldr	r3, [sp, #4]
   111da:	1b75      	subs	r5, r6, r5
   111dc:	19d9      	adds	r1, r3, r7
   111de:	1c18      	adds	r0, r3, #0
   111e0:	1c2a      	adds	r2, r5, #0
   111e2:	4b06      	ldr	r3, [pc, #24]	; (111fc <mqtt_recved_packet+0x9c>)
   111e4:	4798      	blx	r3
   111e6:	6465      	str	r5, [r4, #68]	; 0x44
   111e8:	2100      	movs	r1, #0
   111ea:	e7bc      	b.n	11166 <mqtt_recved_packet+0x6>
   111ec:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   111ee:	46c0      	nop			; (mov r8, r8)
   111f0:	00011121 	.word	0x00011121
   111f4:	00010ec1 	.word	0x00010ec1
   111f8:	00010f65 	.word	0x00010f65
   111fc:	000116e3 	.word	0x000116e3

00011200 <mqtt_socket_event_handler>:
   11200:	b570      	push	{r4, r5, r6, lr}
   11202:	4d37      	ldr	r5, [pc, #220]	; (112e0 <mqtt_socket_event_handler+0xe0>)
   11204:	0086      	lsls	r6, r0, #2
   11206:	5974      	ldr	r4, [r6, r5]
   11208:	b086      	sub	sp, #24
   1120a:	2c00      	cmp	r4, #0
   1120c:	d066      	beq.n	112dc <mqtt_socket_event_handler+0xdc>
   1120e:	2906      	cmp	r1, #6
   11210:	d02b      	beq.n	1126a <mqtt_socket_event_handler+0x6a>
   11212:	2907      	cmp	r1, #7
   11214:	d039      	beq.n	1128a <mqtt_socket_event_handler+0x8a>
   11216:	2905      	cmp	r1, #5
   11218:	d160      	bne.n	112dc <mqtt_socket_event_handler+0xdc>
   1121a:	2001      	movs	r0, #1
   1121c:	5610      	ldrsb	r0, [r2, r0]
   1121e:	4b31      	ldr	r3, [pc, #196]	; (112e4 <mqtt_socket_event_handler+0xe4>)
   11220:	4798      	blx	r3
   11222:	9001      	str	r0, [sp, #4]
   11224:	2800      	cmp	r0, #0
   11226:	da06      	bge.n	11236 <mqtt_socket_event_handler+0x36>
   11228:	2002      	movs	r0, #2
   1122a:	4b2f      	ldr	r3, [pc, #188]	; (112e8 <mqtt_socket_event_handler+0xe8>)
   1122c:	5620      	ldrsb	r0, [r4, r0]
   1122e:	4798      	blx	r3
   11230:	2300      	movs	r3, #0
   11232:	5173      	str	r3, [r6, r5]
   11234:	e011      	b.n	1125a <mqtt_socket_event_handler+0x5a>
   11236:	1c23      	adds	r3, r4, #0
   11238:	3343      	adds	r3, #67	; 0x43
   1123a:	781a      	ldrb	r2, [r3, #0]
   1123c:	2101      	movs	r1, #1
   1123e:	430a      	orrs	r2, r1
   11240:	701a      	strb	r2, [r3, #0]
   11242:	331d      	adds	r3, #29
   11244:	881b      	ldrh	r3, [r3, #0]
   11246:	2b00      	cmp	r3, #0
   11248:	d004      	beq.n	11254 <mqtt_socket_event_handler+0x54>
   1124a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   1124c:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1124e:	2200      	movs	r2, #0
   11250:	4b26      	ldr	r3, [pc, #152]	; (112ec <mqtt_socket_event_handler+0xec>)
   11252:	4798      	blx	r3
   11254:	1c20      	adds	r0, r4, #0
   11256:	4b26      	ldr	r3, [pc, #152]	; (112f0 <mqtt_socket_event_handler+0xf0>)
   11258:	4798      	blx	r3
   1125a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1125c:	2b00      	cmp	r3, #0
   1125e:	d03d      	beq.n	112dc <mqtt_socket_event_handler+0xdc>
   11260:	1c20      	adds	r0, r4, #0
   11262:	2100      	movs	r1, #0
   11264:	aa01      	add	r2, sp, #4
   11266:	4798      	blx	r3
   11268:	e038      	b.n	112dc <mqtt_socket_event_handler+0xdc>
   1126a:	2304      	movs	r3, #4
   1126c:	5ed1      	ldrsh	r1, [r2, r3]
   1126e:	2900      	cmp	r1, #0
   11270:	dd03      	ble.n	1127a <mqtt_socket_event_handler+0x7a>
   11272:	1c20      	adds	r0, r4, #0
   11274:	4b1f      	ldr	r3, [pc, #124]	; (112f4 <mqtt_socket_event_handler+0xf4>)
   11276:	4798      	blx	r3
   11278:	e003      	b.n	11282 <mqtt_socket_event_handler+0x82>
   1127a:	1c0b      	adds	r3, r1, #0
   1127c:	1c08      	adds	r0, r1, #0
   1127e:	330d      	adds	r3, #13
   11280:	d11a      	bne.n	112b8 <mqtt_socket_event_handler+0xb8>
   11282:	4b1b      	ldr	r3, [pc, #108]	; (112f0 <mqtt_socket_event_handler+0xf0>)
   11284:	1c20      	adds	r0, r4, #0
   11286:	4798      	blx	r3
   11288:	e028      	b.n	112dc <mqtt_socket_event_handler+0xdc>
   1128a:	1c23      	adds	r3, r4, #0
   1128c:	3343      	adds	r3, #67	; 0x43
   1128e:	8810      	ldrh	r0, [r2, #0]
   11290:	781a      	ldrb	r2, [r3, #0]
   11292:	0751      	lsls	r1, r2, #29
   11294:	d402      	bmi.n	1129c <mqtt_socket_event_handler+0x9c>
   11296:	2108      	movs	r1, #8
   11298:	438a      	bics	r2, r1
   1129a:	701a      	strb	r2, [r3, #0]
   1129c:	781a      	ldrb	r2, [r3, #0]
   1129e:	2104      	movs	r1, #4
   112a0:	438a      	bics	r2, r1
   112a2:	701a      	strb	r2, [r3, #0]
   112a4:	06d3      	lsls	r3, r2, #27
   112a6:	0fde      	lsrs	r6, r3, #31
   112a8:	b200      	sxth	r0, r0
   112aa:	2b00      	cmp	r3, #0
   112ac:	db02      	blt.n	112b4 <mqtt_socket_event_handler+0xb4>
   112ae:	2800      	cmp	r0, #0
   112b0:	da08      	bge.n	112c4 <mqtt_socket_event_handler+0xc4>
   112b2:	e001      	b.n	112b8 <mqtt_socket_event_handler+0xb8>
   112b4:	2800      	cmp	r0, #0
   112b6:	da02      	bge.n	112be <mqtt_socket_event_handler+0xbe>
   112b8:	4b0a      	ldr	r3, [pc, #40]	; (112e4 <mqtt_socket_event_handler+0xe4>)
   112ba:	4798      	blx	r3
   112bc:	64e0      	str	r0, [r4, #76]	; 0x4c
   112be:	1c20      	adds	r0, r4, #0
   112c0:	4b0d      	ldr	r3, [pc, #52]	; (112f8 <mqtt_socket_event_handler+0xf8>)
   112c2:	e7e0      	b.n	11286 <mqtt_socket_event_handler+0x86>
   112c4:	1c25      	adds	r5, r4, #0
   112c6:	3548      	adds	r5, #72	; 0x48
   112c8:	7829      	ldrb	r1, [r5, #0]
   112ca:	2900      	cmp	r1, #0
   112cc:	d006      	beq.n	112dc <mqtt_socket_event_handler+0xdc>
   112ce:	1c23      	adds	r3, r4, #0
   112d0:	334a      	adds	r3, #74	; 0x4a
   112d2:	881a      	ldrh	r2, [r3, #0]
   112d4:	1c20      	adds	r0, r4, #0
   112d6:	4b09      	ldr	r3, [pc, #36]	; (112fc <mqtt_socket_event_handler+0xfc>)
   112d8:	4798      	blx	r3
   112da:	702e      	strb	r6, [r5, #0]
   112dc:	b006      	add	sp, #24
   112de:	bd70      	pop	{r4, r5, r6, pc}
   112e0:	20000444 	.word	0x20000444
   112e4:	000104ad 	.word	0x000104ad
   112e8:	0000babd 	.word	0x0000babd
   112ec:	0000f455 	.word	0x0000f455
   112f0:	00011121 	.word	0x00011121
   112f4:	00011161 	.word	0x00011161
   112f8:	00010e71 	.word	0x00010e71
   112fc:	00010e0d 	.word	0x00010e0d

00011300 <__gnu_thumb1_case_uqi>:
   11300:	b402      	push	{r1}
   11302:	4671      	mov	r1, lr
   11304:	0849      	lsrs	r1, r1, #1
   11306:	0049      	lsls	r1, r1, #1
   11308:	5c09      	ldrb	r1, [r1, r0]
   1130a:	0049      	lsls	r1, r1, #1
   1130c:	448e      	add	lr, r1
   1130e:	bc02      	pop	{r1}
   11310:	4770      	bx	lr
   11312:	46c0      	nop			; (mov r8, r8)

00011314 <__udivsi3>:
   11314:	2200      	movs	r2, #0
   11316:	0843      	lsrs	r3, r0, #1
   11318:	428b      	cmp	r3, r1
   1131a:	d374      	bcc.n	11406 <__udivsi3+0xf2>
   1131c:	0903      	lsrs	r3, r0, #4
   1131e:	428b      	cmp	r3, r1
   11320:	d35f      	bcc.n	113e2 <__udivsi3+0xce>
   11322:	0a03      	lsrs	r3, r0, #8
   11324:	428b      	cmp	r3, r1
   11326:	d344      	bcc.n	113b2 <__udivsi3+0x9e>
   11328:	0b03      	lsrs	r3, r0, #12
   1132a:	428b      	cmp	r3, r1
   1132c:	d328      	bcc.n	11380 <__udivsi3+0x6c>
   1132e:	0c03      	lsrs	r3, r0, #16
   11330:	428b      	cmp	r3, r1
   11332:	d30d      	bcc.n	11350 <__udivsi3+0x3c>
   11334:	22ff      	movs	r2, #255	; 0xff
   11336:	0209      	lsls	r1, r1, #8
   11338:	ba12      	rev	r2, r2
   1133a:	0c03      	lsrs	r3, r0, #16
   1133c:	428b      	cmp	r3, r1
   1133e:	d302      	bcc.n	11346 <__udivsi3+0x32>
   11340:	1212      	asrs	r2, r2, #8
   11342:	0209      	lsls	r1, r1, #8
   11344:	d065      	beq.n	11412 <__udivsi3+0xfe>
   11346:	0b03      	lsrs	r3, r0, #12
   11348:	428b      	cmp	r3, r1
   1134a:	d319      	bcc.n	11380 <__udivsi3+0x6c>
   1134c:	e000      	b.n	11350 <__udivsi3+0x3c>
   1134e:	0a09      	lsrs	r1, r1, #8
   11350:	0bc3      	lsrs	r3, r0, #15
   11352:	428b      	cmp	r3, r1
   11354:	d301      	bcc.n	1135a <__udivsi3+0x46>
   11356:	03cb      	lsls	r3, r1, #15
   11358:	1ac0      	subs	r0, r0, r3
   1135a:	4152      	adcs	r2, r2
   1135c:	0b83      	lsrs	r3, r0, #14
   1135e:	428b      	cmp	r3, r1
   11360:	d301      	bcc.n	11366 <__udivsi3+0x52>
   11362:	038b      	lsls	r3, r1, #14
   11364:	1ac0      	subs	r0, r0, r3
   11366:	4152      	adcs	r2, r2
   11368:	0b43      	lsrs	r3, r0, #13
   1136a:	428b      	cmp	r3, r1
   1136c:	d301      	bcc.n	11372 <__udivsi3+0x5e>
   1136e:	034b      	lsls	r3, r1, #13
   11370:	1ac0      	subs	r0, r0, r3
   11372:	4152      	adcs	r2, r2
   11374:	0b03      	lsrs	r3, r0, #12
   11376:	428b      	cmp	r3, r1
   11378:	d301      	bcc.n	1137e <__udivsi3+0x6a>
   1137a:	030b      	lsls	r3, r1, #12
   1137c:	1ac0      	subs	r0, r0, r3
   1137e:	4152      	adcs	r2, r2
   11380:	0ac3      	lsrs	r3, r0, #11
   11382:	428b      	cmp	r3, r1
   11384:	d301      	bcc.n	1138a <__udivsi3+0x76>
   11386:	02cb      	lsls	r3, r1, #11
   11388:	1ac0      	subs	r0, r0, r3
   1138a:	4152      	adcs	r2, r2
   1138c:	0a83      	lsrs	r3, r0, #10
   1138e:	428b      	cmp	r3, r1
   11390:	d301      	bcc.n	11396 <__udivsi3+0x82>
   11392:	028b      	lsls	r3, r1, #10
   11394:	1ac0      	subs	r0, r0, r3
   11396:	4152      	adcs	r2, r2
   11398:	0a43      	lsrs	r3, r0, #9
   1139a:	428b      	cmp	r3, r1
   1139c:	d301      	bcc.n	113a2 <__udivsi3+0x8e>
   1139e:	024b      	lsls	r3, r1, #9
   113a0:	1ac0      	subs	r0, r0, r3
   113a2:	4152      	adcs	r2, r2
   113a4:	0a03      	lsrs	r3, r0, #8
   113a6:	428b      	cmp	r3, r1
   113a8:	d301      	bcc.n	113ae <__udivsi3+0x9a>
   113aa:	020b      	lsls	r3, r1, #8
   113ac:	1ac0      	subs	r0, r0, r3
   113ae:	4152      	adcs	r2, r2
   113b0:	d2cd      	bcs.n	1134e <__udivsi3+0x3a>
   113b2:	09c3      	lsrs	r3, r0, #7
   113b4:	428b      	cmp	r3, r1
   113b6:	d301      	bcc.n	113bc <__udivsi3+0xa8>
   113b8:	01cb      	lsls	r3, r1, #7
   113ba:	1ac0      	subs	r0, r0, r3
   113bc:	4152      	adcs	r2, r2
   113be:	0983      	lsrs	r3, r0, #6
   113c0:	428b      	cmp	r3, r1
   113c2:	d301      	bcc.n	113c8 <__udivsi3+0xb4>
   113c4:	018b      	lsls	r3, r1, #6
   113c6:	1ac0      	subs	r0, r0, r3
   113c8:	4152      	adcs	r2, r2
   113ca:	0943      	lsrs	r3, r0, #5
   113cc:	428b      	cmp	r3, r1
   113ce:	d301      	bcc.n	113d4 <__udivsi3+0xc0>
   113d0:	014b      	lsls	r3, r1, #5
   113d2:	1ac0      	subs	r0, r0, r3
   113d4:	4152      	adcs	r2, r2
   113d6:	0903      	lsrs	r3, r0, #4
   113d8:	428b      	cmp	r3, r1
   113da:	d301      	bcc.n	113e0 <__udivsi3+0xcc>
   113dc:	010b      	lsls	r3, r1, #4
   113de:	1ac0      	subs	r0, r0, r3
   113e0:	4152      	adcs	r2, r2
   113e2:	08c3      	lsrs	r3, r0, #3
   113e4:	428b      	cmp	r3, r1
   113e6:	d301      	bcc.n	113ec <__udivsi3+0xd8>
   113e8:	00cb      	lsls	r3, r1, #3
   113ea:	1ac0      	subs	r0, r0, r3
   113ec:	4152      	adcs	r2, r2
   113ee:	0883      	lsrs	r3, r0, #2
   113f0:	428b      	cmp	r3, r1
   113f2:	d301      	bcc.n	113f8 <__udivsi3+0xe4>
   113f4:	008b      	lsls	r3, r1, #2
   113f6:	1ac0      	subs	r0, r0, r3
   113f8:	4152      	adcs	r2, r2
   113fa:	0843      	lsrs	r3, r0, #1
   113fc:	428b      	cmp	r3, r1
   113fe:	d301      	bcc.n	11404 <__udivsi3+0xf0>
   11400:	004b      	lsls	r3, r1, #1
   11402:	1ac0      	subs	r0, r0, r3
   11404:	4152      	adcs	r2, r2
   11406:	1a41      	subs	r1, r0, r1
   11408:	d200      	bcs.n	1140c <__udivsi3+0xf8>
   1140a:	4601      	mov	r1, r0
   1140c:	4152      	adcs	r2, r2
   1140e:	4610      	mov	r0, r2
   11410:	4770      	bx	lr
   11412:	e7ff      	b.n	11414 <__udivsi3+0x100>
   11414:	b501      	push	{r0, lr}
   11416:	2000      	movs	r0, #0
   11418:	f000 f8f0 	bl	115fc <__aeabi_idiv0>
   1141c:	bd02      	pop	{r1, pc}
   1141e:	46c0      	nop			; (mov r8, r8)

00011420 <__aeabi_uidivmod>:
   11420:	2900      	cmp	r1, #0
   11422:	d0f7      	beq.n	11414 <__udivsi3+0x100>
   11424:	e776      	b.n	11314 <__udivsi3>
   11426:	4770      	bx	lr

00011428 <__divsi3>:
   11428:	4603      	mov	r3, r0
   1142a:	430b      	orrs	r3, r1
   1142c:	d47f      	bmi.n	1152e <__divsi3+0x106>
   1142e:	2200      	movs	r2, #0
   11430:	0843      	lsrs	r3, r0, #1
   11432:	428b      	cmp	r3, r1
   11434:	d374      	bcc.n	11520 <__divsi3+0xf8>
   11436:	0903      	lsrs	r3, r0, #4
   11438:	428b      	cmp	r3, r1
   1143a:	d35f      	bcc.n	114fc <__divsi3+0xd4>
   1143c:	0a03      	lsrs	r3, r0, #8
   1143e:	428b      	cmp	r3, r1
   11440:	d344      	bcc.n	114cc <__divsi3+0xa4>
   11442:	0b03      	lsrs	r3, r0, #12
   11444:	428b      	cmp	r3, r1
   11446:	d328      	bcc.n	1149a <__divsi3+0x72>
   11448:	0c03      	lsrs	r3, r0, #16
   1144a:	428b      	cmp	r3, r1
   1144c:	d30d      	bcc.n	1146a <__divsi3+0x42>
   1144e:	22ff      	movs	r2, #255	; 0xff
   11450:	0209      	lsls	r1, r1, #8
   11452:	ba12      	rev	r2, r2
   11454:	0c03      	lsrs	r3, r0, #16
   11456:	428b      	cmp	r3, r1
   11458:	d302      	bcc.n	11460 <__divsi3+0x38>
   1145a:	1212      	asrs	r2, r2, #8
   1145c:	0209      	lsls	r1, r1, #8
   1145e:	d065      	beq.n	1152c <__divsi3+0x104>
   11460:	0b03      	lsrs	r3, r0, #12
   11462:	428b      	cmp	r3, r1
   11464:	d319      	bcc.n	1149a <__divsi3+0x72>
   11466:	e000      	b.n	1146a <__divsi3+0x42>
   11468:	0a09      	lsrs	r1, r1, #8
   1146a:	0bc3      	lsrs	r3, r0, #15
   1146c:	428b      	cmp	r3, r1
   1146e:	d301      	bcc.n	11474 <__divsi3+0x4c>
   11470:	03cb      	lsls	r3, r1, #15
   11472:	1ac0      	subs	r0, r0, r3
   11474:	4152      	adcs	r2, r2
   11476:	0b83      	lsrs	r3, r0, #14
   11478:	428b      	cmp	r3, r1
   1147a:	d301      	bcc.n	11480 <__divsi3+0x58>
   1147c:	038b      	lsls	r3, r1, #14
   1147e:	1ac0      	subs	r0, r0, r3
   11480:	4152      	adcs	r2, r2
   11482:	0b43      	lsrs	r3, r0, #13
   11484:	428b      	cmp	r3, r1
   11486:	d301      	bcc.n	1148c <__divsi3+0x64>
   11488:	034b      	lsls	r3, r1, #13
   1148a:	1ac0      	subs	r0, r0, r3
   1148c:	4152      	adcs	r2, r2
   1148e:	0b03      	lsrs	r3, r0, #12
   11490:	428b      	cmp	r3, r1
   11492:	d301      	bcc.n	11498 <__divsi3+0x70>
   11494:	030b      	lsls	r3, r1, #12
   11496:	1ac0      	subs	r0, r0, r3
   11498:	4152      	adcs	r2, r2
   1149a:	0ac3      	lsrs	r3, r0, #11
   1149c:	428b      	cmp	r3, r1
   1149e:	d301      	bcc.n	114a4 <__divsi3+0x7c>
   114a0:	02cb      	lsls	r3, r1, #11
   114a2:	1ac0      	subs	r0, r0, r3
   114a4:	4152      	adcs	r2, r2
   114a6:	0a83      	lsrs	r3, r0, #10
   114a8:	428b      	cmp	r3, r1
   114aa:	d301      	bcc.n	114b0 <__divsi3+0x88>
   114ac:	028b      	lsls	r3, r1, #10
   114ae:	1ac0      	subs	r0, r0, r3
   114b0:	4152      	adcs	r2, r2
   114b2:	0a43      	lsrs	r3, r0, #9
   114b4:	428b      	cmp	r3, r1
   114b6:	d301      	bcc.n	114bc <__divsi3+0x94>
   114b8:	024b      	lsls	r3, r1, #9
   114ba:	1ac0      	subs	r0, r0, r3
   114bc:	4152      	adcs	r2, r2
   114be:	0a03      	lsrs	r3, r0, #8
   114c0:	428b      	cmp	r3, r1
   114c2:	d301      	bcc.n	114c8 <__divsi3+0xa0>
   114c4:	020b      	lsls	r3, r1, #8
   114c6:	1ac0      	subs	r0, r0, r3
   114c8:	4152      	adcs	r2, r2
   114ca:	d2cd      	bcs.n	11468 <__divsi3+0x40>
   114cc:	09c3      	lsrs	r3, r0, #7
   114ce:	428b      	cmp	r3, r1
   114d0:	d301      	bcc.n	114d6 <__divsi3+0xae>
   114d2:	01cb      	lsls	r3, r1, #7
   114d4:	1ac0      	subs	r0, r0, r3
   114d6:	4152      	adcs	r2, r2
   114d8:	0983      	lsrs	r3, r0, #6
   114da:	428b      	cmp	r3, r1
   114dc:	d301      	bcc.n	114e2 <__divsi3+0xba>
   114de:	018b      	lsls	r3, r1, #6
   114e0:	1ac0      	subs	r0, r0, r3
   114e2:	4152      	adcs	r2, r2
   114e4:	0943      	lsrs	r3, r0, #5
   114e6:	428b      	cmp	r3, r1
   114e8:	d301      	bcc.n	114ee <__divsi3+0xc6>
   114ea:	014b      	lsls	r3, r1, #5
   114ec:	1ac0      	subs	r0, r0, r3
   114ee:	4152      	adcs	r2, r2
   114f0:	0903      	lsrs	r3, r0, #4
   114f2:	428b      	cmp	r3, r1
   114f4:	d301      	bcc.n	114fa <__divsi3+0xd2>
   114f6:	010b      	lsls	r3, r1, #4
   114f8:	1ac0      	subs	r0, r0, r3
   114fa:	4152      	adcs	r2, r2
   114fc:	08c3      	lsrs	r3, r0, #3
   114fe:	428b      	cmp	r3, r1
   11500:	d301      	bcc.n	11506 <__divsi3+0xde>
   11502:	00cb      	lsls	r3, r1, #3
   11504:	1ac0      	subs	r0, r0, r3
   11506:	4152      	adcs	r2, r2
   11508:	0883      	lsrs	r3, r0, #2
   1150a:	428b      	cmp	r3, r1
   1150c:	d301      	bcc.n	11512 <__divsi3+0xea>
   1150e:	008b      	lsls	r3, r1, #2
   11510:	1ac0      	subs	r0, r0, r3
   11512:	4152      	adcs	r2, r2
   11514:	0843      	lsrs	r3, r0, #1
   11516:	428b      	cmp	r3, r1
   11518:	d301      	bcc.n	1151e <__divsi3+0xf6>
   1151a:	004b      	lsls	r3, r1, #1
   1151c:	1ac0      	subs	r0, r0, r3
   1151e:	4152      	adcs	r2, r2
   11520:	1a41      	subs	r1, r0, r1
   11522:	d200      	bcs.n	11526 <__divsi3+0xfe>
   11524:	4601      	mov	r1, r0
   11526:	4152      	adcs	r2, r2
   11528:	4610      	mov	r0, r2
   1152a:	4770      	bx	lr
   1152c:	e05d      	b.n	115ea <__divsi3+0x1c2>
   1152e:	0fca      	lsrs	r2, r1, #31
   11530:	d000      	beq.n	11534 <__divsi3+0x10c>
   11532:	4249      	negs	r1, r1
   11534:	1003      	asrs	r3, r0, #32
   11536:	d300      	bcc.n	1153a <__divsi3+0x112>
   11538:	4240      	negs	r0, r0
   1153a:	4053      	eors	r3, r2
   1153c:	2200      	movs	r2, #0
   1153e:	469c      	mov	ip, r3
   11540:	0903      	lsrs	r3, r0, #4
   11542:	428b      	cmp	r3, r1
   11544:	d32d      	bcc.n	115a2 <__divsi3+0x17a>
   11546:	0a03      	lsrs	r3, r0, #8
   11548:	428b      	cmp	r3, r1
   1154a:	d312      	bcc.n	11572 <__divsi3+0x14a>
   1154c:	22fc      	movs	r2, #252	; 0xfc
   1154e:	0189      	lsls	r1, r1, #6
   11550:	ba12      	rev	r2, r2
   11552:	0a03      	lsrs	r3, r0, #8
   11554:	428b      	cmp	r3, r1
   11556:	d30c      	bcc.n	11572 <__divsi3+0x14a>
   11558:	0189      	lsls	r1, r1, #6
   1155a:	1192      	asrs	r2, r2, #6
   1155c:	428b      	cmp	r3, r1
   1155e:	d308      	bcc.n	11572 <__divsi3+0x14a>
   11560:	0189      	lsls	r1, r1, #6
   11562:	1192      	asrs	r2, r2, #6
   11564:	428b      	cmp	r3, r1
   11566:	d304      	bcc.n	11572 <__divsi3+0x14a>
   11568:	0189      	lsls	r1, r1, #6
   1156a:	d03a      	beq.n	115e2 <__divsi3+0x1ba>
   1156c:	1192      	asrs	r2, r2, #6
   1156e:	e000      	b.n	11572 <__divsi3+0x14a>
   11570:	0989      	lsrs	r1, r1, #6
   11572:	09c3      	lsrs	r3, r0, #7
   11574:	428b      	cmp	r3, r1
   11576:	d301      	bcc.n	1157c <__divsi3+0x154>
   11578:	01cb      	lsls	r3, r1, #7
   1157a:	1ac0      	subs	r0, r0, r3
   1157c:	4152      	adcs	r2, r2
   1157e:	0983      	lsrs	r3, r0, #6
   11580:	428b      	cmp	r3, r1
   11582:	d301      	bcc.n	11588 <__divsi3+0x160>
   11584:	018b      	lsls	r3, r1, #6
   11586:	1ac0      	subs	r0, r0, r3
   11588:	4152      	adcs	r2, r2
   1158a:	0943      	lsrs	r3, r0, #5
   1158c:	428b      	cmp	r3, r1
   1158e:	d301      	bcc.n	11594 <__divsi3+0x16c>
   11590:	014b      	lsls	r3, r1, #5
   11592:	1ac0      	subs	r0, r0, r3
   11594:	4152      	adcs	r2, r2
   11596:	0903      	lsrs	r3, r0, #4
   11598:	428b      	cmp	r3, r1
   1159a:	d301      	bcc.n	115a0 <__divsi3+0x178>
   1159c:	010b      	lsls	r3, r1, #4
   1159e:	1ac0      	subs	r0, r0, r3
   115a0:	4152      	adcs	r2, r2
   115a2:	08c3      	lsrs	r3, r0, #3
   115a4:	428b      	cmp	r3, r1
   115a6:	d301      	bcc.n	115ac <__divsi3+0x184>
   115a8:	00cb      	lsls	r3, r1, #3
   115aa:	1ac0      	subs	r0, r0, r3
   115ac:	4152      	adcs	r2, r2
   115ae:	0883      	lsrs	r3, r0, #2
   115b0:	428b      	cmp	r3, r1
   115b2:	d301      	bcc.n	115b8 <__divsi3+0x190>
   115b4:	008b      	lsls	r3, r1, #2
   115b6:	1ac0      	subs	r0, r0, r3
   115b8:	4152      	adcs	r2, r2
   115ba:	d2d9      	bcs.n	11570 <__divsi3+0x148>
   115bc:	0843      	lsrs	r3, r0, #1
   115be:	428b      	cmp	r3, r1
   115c0:	d301      	bcc.n	115c6 <__divsi3+0x19e>
   115c2:	004b      	lsls	r3, r1, #1
   115c4:	1ac0      	subs	r0, r0, r3
   115c6:	4152      	adcs	r2, r2
   115c8:	1a41      	subs	r1, r0, r1
   115ca:	d200      	bcs.n	115ce <__divsi3+0x1a6>
   115cc:	4601      	mov	r1, r0
   115ce:	4663      	mov	r3, ip
   115d0:	4152      	adcs	r2, r2
   115d2:	105b      	asrs	r3, r3, #1
   115d4:	4610      	mov	r0, r2
   115d6:	d301      	bcc.n	115dc <__divsi3+0x1b4>
   115d8:	4240      	negs	r0, r0
   115da:	2b00      	cmp	r3, #0
   115dc:	d500      	bpl.n	115e0 <__divsi3+0x1b8>
   115de:	4249      	negs	r1, r1
   115e0:	4770      	bx	lr
   115e2:	4663      	mov	r3, ip
   115e4:	105b      	asrs	r3, r3, #1
   115e6:	d300      	bcc.n	115ea <__divsi3+0x1c2>
   115e8:	4240      	negs	r0, r0
   115ea:	b501      	push	{r0, lr}
   115ec:	2000      	movs	r0, #0
   115ee:	f000 f805 	bl	115fc <__aeabi_idiv0>
   115f2:	bd02      	pop	{r1, pc}

000115f4 <__aeabi_idivmod>:
   115f4:	2900      	cmp	r1, #0
   115f6:	d0f8      	beq.n	115ea <__divsi3+0x1c2>
   115f8:	e716      	b.n	11428 <__divsi3>
   115fa:	4770      	bx	lr

000115fc <__aeabi_idiv0>:
   115fc:	4770      	bx	lr
   115fe:	46c0      	nop			; (mov r8, r8)

00011600 <__aeabi_lmul>:
   11600:	b5f0      	push	{r4, r5, r6, r7, lr}
   11602:	46ce      	mov	lr, r9
   11604:	4647      	mov	r7, r8
   11606:	0415      	lsls	r5, r2, #16
   11608:	0c2d      	lsrs	r5, r5, #16
   1160a:	002e      	movs	r6, r5
   1160c:	b580      	push	{r7, lr}
   1160e:	0407      	lsls	r7, r0, #16
   11610:	0c14      	lsrs	r4, r2, #16
   11612:	0c3f      	lsrs	r7, r7, #16
   11614:	4699      	mov	r9, r3
   11616:	0c03      	lsrs	r3, r0, #16
   11618:	437e      	muls	r6, r7
   1161a:	435d      	muls	r5, r3
   1161c:	4367      	muls	r7, r4
   1161e:	4363      	muls	r3, r4
   11620:	197f      	adds	r7, r7, r5
   11622:	0c34      	lsrs	r4, r6, #16
   11624:	19e4      	adds	r4, r4, r7
   11626:	469c      	mov	ip, r3
   11628:	42a5      	cmp	r5, r4
   1162a:	d903      	bls.n	11634 <__aeabi_lmul+0x34>
   1162c:	2380      	movs	r3, #128	; 0x80
   1162e:	025b      	lsls	r3, r3, #9
   11630:	4698      	mov	r8, r3
   11632:	44c4      	add	ip, r8
   11634:	464b      	mov	r3, r9
   11636:	4351      	muls	r1, r2
   11638:	4343      	muls	r3, r0
   1163a:	0436      	lsls	r6, r6, #16
   1163c:	0c36      	lsrs	r6, r6, #16
   1163e:	0c25      	lsrs	r5, r4, #16
   11640:	0424      	lsls	r4, r4, #16
   11642:	4465      	add	r5, ip
   11644:	19a4      	adds	r4, r4, r6
   11646:	1859      	adds	r1, r3, r1
   11648:	1949      	adds	r1, r1, r5
   1164a:	0020      	movs	r0, r4
   1164c:	bc0c      	pop	{r2, r3}
   1164e:	4690      	mov	r8, r2
   11650:	4699      	mov	r9, r3
   11652:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011654 <atoi>:
   11654:	b510      	push	{r4, lr}
   11656:	220a      	movs	r2, #10
   11658:	2100      	movs	r1, #0
   1165a:	f000 fba9 	bl	11db0 <strtol>
   1165e:	bd10      	pop	{r4, pc}

00011660 <__libc_init_array>:
   11660:	b570      	push	{r4, r5, r6, lr}
   11662:	2600      	movs	r6, #0
   11664:	4d0c      	ldr	r5, [pc, #48]	; (11698 <__libc_init_array+0x38>)
   11666:	4c0d      	ldr	r4, [pc, #52]	; (1169c <__libc_init_array+0x3c>)
   11668:	1b64      	subs	r4, r4, r5
   1166a:	10a4      	asrs	r4, r4, #2
   1166c:	42a6      	cmp	r6, r4
   1166e:	d109      	bne.n	11684 <__libc_init_array+0x24>
   11670:	2600      	movs	r6, #0
   11672:	f003 f9ff 	bl	14a74 <_init>
   11676:	4d0a      	ldr	r5, [pc, #40]	; (116a0 <__libc_init_array+0x40>)
   11678:	4c0a      	ldr	r4, [pc, #40]	; (116a4 <__libc_init_array+0x44>)
   1167a:	1b64      	subs	r4, r4, r5
   1167c:	10a4      	asrs	r4, r4, #2
   1167e:	42a6      	cmp	r6, r4
   11680:	d105      	bne.n	1168e <__libc_init_array+0x2e>
   11682:	bd70      	pop	{r4, r5, r6, pc}
   11684:	00b3      	lsls	r3, r6, #2
   11686:	58eb      	ldr	r3, [r5, r3]
   11688:	4798      	blx	r3
   1168a:	3601      	adds	r6, #1
   1168c:	e7ee      	b.n	1166c <__libc_init_array+0xc>
   1168e:	00b3      	lsls	r3, r6, #2
   11690:	58eb      	ldr	r3, [r5, r3]
   11692:	4798      	blx	r3
   11694:	3601      	adds	r6, #1
   11696:	e7f2      	b.n	1167e <__libc_init_array+0x1e>
   11698:	00014a80 	.word	0x00014a80
   1169c:	00014a80 	.word	0x00014a80
   116a0:	00014a80 	.word	0x00014a80
   116a4:	00014a84 	.word	0x00014a84

000116a8 <malloc>:
   116a8:	b510      	push	{r4, lr}
   116aa:	4b03      	ldr	r3, [pc, #12]	; (116b8 <malloc+0x10>)
   116ac:	0001      	movs	r1, r0
   116ae:	6818      	ldr	r0, [r3, #0]
   116b0:	f000 f87c 	bl	117ac <_malloc_r>
   116b4:	bd10      	pop	{r4, pc}
   116b6:	46c0      	nop			; (mov r8, r8)
   116b8:	2000001c 	.word	0x2000001c

000116bc <free>:
   116bc:	b510      	push	{r4, lr}
   116be:	4b03      	ldr	r3, [pc, #12]	; (116cc <free+0x10>)
   116c0:	0001      	movs	r1, r0
   116c2:	6818      	ldr	r0, [r3, #0]
   116c4:	f000 f828 	bl	11718 <_free_r>
   116c8:	bd10      	pop	{r4, pc}
   116ca:	46c0      	nop			; (mov r8, r8)
   116cc:	2000001c 	.word	0x2000001c

000116d0 <memcpy>:
   116d0:	2300      	movs	r3, #0
   116d2:	b510      	push	{r4, lr}
   116d4:	429a      	cmp	r2, r3
   116d6:	d100      	bne.n	116da <memcpy+0xa>
   116d8:	bd10      	pop	{r4, pc}
   116da:	5ccc      	ldrb	r4, [r1, r3]
   116dc:	54c4      	strb	r4, [r0, r3]
   116de:	3301      	adds	r3, #1
   116e0:	e7f8      	b.n	116d4 <memcpy+0x4>

000116e2 <memmove>:
   116e2:	b510      	push	{r4, lr}
   116e4:	4288      	cmp	r0, r1
   116e6:	d902      	bls.n	116ee <memmove+0xc>
   116e8:	188b      	adds	r3, r1, r2
   116ea:	4298      	cmp	r0, r3
   116ec:	d308      	bcc.n	11700 <memmove+0x1e>
   116ee:	2300      	movs	r3, #0
   116f0:	429a      	cmp	r2, r3
   116f2:	d007      	beq.n	11704 <memmove+0x22>
   116f4:	5ccc      	ldrb	r4, [r1, r3]
   116f6:	54c4      	strb	r4, [r0, r3]
   116f8:	3301      	adds	r3, #1
   116fa:	e7f9      	b.n	116f0 <memmove+0xe>
   116fc:	5c8b      	ldrb	r3, [r1, r2]
   116fe:	5483      	strb	r3, [r0, r2]
   11700:	3a01      	subs	r2, #1
   11702:	d2fb      	bcs.n	116fc <memmove+0x1a>
   11704:	bd10      	pop	{r4, pc}

00011706 <memset>:
   11706:	0003      	movs	r3, r0
   11708:	1882      	adds	r2, r0, r2
   1170a:	4293      	cmp	r3, r2
   1170c:	d100      	bne.n	11710 <memset+0xa>
   1170e:	4770      	bx	lr
   11710:	7019      	strb	r1, [r3, #0]
   11712:	3301      	adds	r3, #1
   11714:	e7f9      	b.n	1170a <memset+0x4>
	...

00011718 <_free_r>:
   11718:	b570      	push	{r4, r5, r6, lr}
   1171a:	0005      	movs	r5, r0
   1171c:	2900      	cmp	r1, #0
   1171e:	d010      	beq.n	11742 <_free_r+0x2a>
   11720:	1f0c      	subs	r4, r1, #4
   11722:	6823      	ldr	r3, [r4, #0]
   11724:	2b00      	cmp	r3, #0
   11726:	da00      	bge.n	1172a <_free_r+0x12>
   11728:	18e4      	adds	r4, r4, r3
   1172a:	0028      	movs	r0, r5
   1172c:	f000 fe28 	bl	12380 <__malloc_lock>
   11730:	4a1d      	ldr	r2, [pc, #116]	; (117a8 <_free_r+0x90>)
   11732:	6813      	ldr	r3, [r2, #0]
   11734:	2b00      	cmp	r3, #0
   11736:	d105      	bne.n	11744 <_free_r+0x2c>
   11738:	6063      	str	r3, [r4, #4]
   1173a:	6014      	str	r4, [r2, #0]
   1173c:	0028      	movs	r0, r5
   1173e:	f000 fe20 	bl	12382 <__malloc_unlock>
   11742:	bd70      	pop	{r4, r5, r6, pc}
   11744:	42a3      	cmp	r3, r4
   11746:	d909      	bls.n	1175c <_free_r+0x44>
   11748:	6821      	ldr	r1, [r4, #0]
   1174a:	1860      	adds	r0, r4, r1
   1174c:	4283      	cmp	r3, r0
   1174e:	d1f3      	bne.n	11738 <_free_r+0x20>
   11750:	6818      	ldr	r0, [r3, #0]
   11752:	685b      	ldr	r3, [r3, #4]
   11754:	1841      	adds	r1, r0, r1
   11756:	6021      	str	r1, [r4, #0]
   11758:	e7ee      	b.n	11738 <_free_r+0x20>
   1175a:	0013      	movs	r3, r2
   1175c:	685a      	ldr	r2, [r3, #4]
   1175e:	2a00      	cmp	r2, #0
   11760:	d001      	beq.n	11766 <_free_r+0x4e>
   11762:	42a2      	cmp	r2, r4
   11764:	d9f9      	bls.n	1175a <_free_r+0x42>
   11766:	6819      	ldr	r1, [r3, #0]
   11768:	1858      	adds	r0, r3, r1
   1176a:	42a0      	cmp	r0, r4
   1176c:	d10b      	bne.n	11786 <_free_r+0x6e>
   1176e:	6820      	ldr	r0, [r4, #0]
   11770:	1809      	adds	r1, r1, r0
   11772:	1858      	adds	r0, r3, r1
   11774:	6019      	str	r1, [r3, #0]
   11776:	4282      	cmp	r2, r0
   11778:	d1e0      	bne.n	1173c <_free_r+0x24>
   1177a:	6810      	ldr	r0, [r2, #0]
   1177c:	6852      	ldr	r2, [r2, #4]
   1177e:	1841      	adds	r1, r0, r1
   11780:	6019      	str	r1, [r3, #0]
   11782:	605a      	str	r2, [r3, #4]
   11784:	e7da      	b.n	1173c <_free_r+0x24>
   11786:	42a0      	cmp	r0, r4
   11788:	d902      	bls.n	11790 <_free_r+0x78>
   1178a:	230c      	movs	r3, #12
   1178c:	602b      	str	r3, [r5, #0]
   1178e:	e7d5      	b.n	1173c <_free_r+0x24>
   11790:	6821      	ldr	r1, [r4, #0]
   11792:	1860      	adds	r0, r4, r1
   11794:	4282      	cmp	r2, r0
   11796:	d103      	bne.n	117a0 <_free_r+0x88>
   11798:	6810      	ldr	r0, [r2, #0]
   1179a:	6852      	ldr	r2, [r2, #4]
   1179c:	1841      	adds	r1, r0, r1
   1179e:	6021      	str	r1, [r4, #0]
   117a0:	6062      	str	r2, [r4, #4]
   117a2:	605c      	str	r4, [r3, #4]
   117a4:	e7ca      	b.n	1173c <_free_r+0x24>
   117a6:	46c0      	nop			; (mov r8, r8)
   117a8:	20000460 	.word	0x20000460

000117ac <_malloc_r>:
   117ac:	2303      	movs	r3, #3
   117ae:	b570      	push	{r4, r5, r6, lr}
   117b0:	1ccd      	adds	r5, r1, #3
   117b2:	439d      	bics	r5, r3
   117b4:	3508      	adds	r5, #8
   117b6:	0006      	movs	r6, r0
   117b8:	2d0c      	cmp	r5, #12
   117ba:	d21e      	bcs.n	117fa <_malloc_r+0x4e>
   117bc:	250c      	movs	r5, #12
   117be:	42a9      	cmp	r1, r5
   117c0:	d81d      	bhi.n	117fe <_malloc_r+0x52>
   117c2:	0030      	movs	r0, r6
   117c4:	f000 fddc 	bl	12380 <__malloc_lock>
   117c8:	4a25      	ldr	r2, [pc, #148]	; (11860 <_malloc_r+0xb4>)
   117ca:	6814      	ldr	r4, [r2, #0]
   117cc:	0021      	movs	r1, r4
   117ce:	2900      	cmp	r1, #0
   117d0:	d119      	bne.n	11806 <_malloc_r+0x5a>
   117d2:	4c24      	ldr	r4, [pc, #144]	; (11864 <_malloc_r+0xb8>)
   117d4:	6823      	ldr	r3, [r4, #0]
   117d6:	2b00      	cmp	r3, #0
   117d8:	d103      	bne.n	117e2 <_malloc_r+0x36>
   117da:	0030      	movs	r0, r6
   117dc:	f000 f918 	bl	11a10 <_sbrk_r>
   117e0:	6020      	str	r0, [r4, #0]
   117e2:	0029      	movs	r1, r5
   117e4:	0030      	movs	r0, r6
   117e6:	f000 f913 	bl	11a10 <_sbrk_r>
   117ea:	1c43      	adds	r3, r0, #1
   117ec:	d12c      	bne.n	11848 <_malloc_r+0x9c>
   117ee:	230c      	movs	r3, #12
   117f0:	0030      	movs	r0, r6
   117f2:	6033      	str	r3, [r6, #0]
   117f4:	f000 fdc5 	bl	12382 <__malloc_unlock>
   117f8:	e003      	b.n	11802 <_malloc_r+0x56>
   117fa:	2d00      	cmp	r5, #0
   117fc:	dadf      	bge.n	117be <_malloc_r+0x12>
   117fe:	230c      	movs	r3, #12
   11800:	6033      	str	r3, [r6, #0]
   11802:	2000      	movs	r0, #0
   11804:	bd70      	pop	{r4, r5, r6, pc}
   11806:	680b      	ldr	r3, [r1, #0]
   11808:	1b5b      	subs	r3, r3, r5
   1180a:	d41a      	bmi.n	11842 <_malloc_r+0x96>
   1180c:	2b0b      	cmp	r3, #11
   1180e:	d903      	bls.n	11818 <_malloc_r+0x6c>
   11810:	600b      	str	r3, [r1, #0]
   11812:	18cc      	adds	r4, r1, r3
   11814:	6025      	str	r5, [r4, #0]
   11816:	e003      	b.n	11820 <_malloc_r+0x74>
   11818:	428c      	cmp	r4, r1
   1181a:	d10e      	bne.n	1183a <_malloc_r+0x8e>
   1181c:	6863      	ldr	r3, [r4, #4]
   1181e:	6013      	str	r3, [r2, #0]
   11820:	0030      	movs	r0, r6
   11822:	f000 fdae 	bl	12382 <__malloc_unlock>
   11826:	0020      	movs	r0, r4
   11828:	2207      	movs	r2, #7
   1182a:	300b      	adds	r0, #11
   1182c:	1d23      	adds	r3, r4, #4
   1182e:	4390      	bics	r0, r2
   11830:	1ac3      	subs	r3, r0, r3
   11832:	d0e7      	beq.n	11804 <_malloc_r+0x58>
   11834:	425a      	negs	r2, r3
   11836:	50e2      	str	r2, [r4, r3]
   11838:	e7e4      	b.n	11804 <_malloc_r+0x58>
   1183a:	684b      	ldr	r3, [r1, #4]
   1183c:	6063      	str	r3, [r4, #4]
   1183e:	000c      	movs	r4, r1
   11840:	e7ee      	b.n	11820 <_malloc_r+0x74>
   11842:	000c      	movs	r4, r1
   11844:	6849      	ldr	r1, [r1, #4]
   11846:	e7c2      	b.n	117ce <_malloc_r+0x22>
   11848:	2303      	movs	r3, #3
   1184a:	1cc4      	adds	r4, r0, #3
   1184c:	439c      	bics	r4, r3
   1184e:	42a0      	cmp	r0, r4
   11850:	d0e0      	beq.n	11814 <_malloc_r+0x68>
   11852:	1a21      	subs	r1, r4, r0
   11854:	0030      	movs	r0, r6
   11856:	f000 f8db 	bl	11a10 <_sbrk_r>
   1185a:	1c43      	adds	r3, r0, #1
   1185c:	d1da      	bne.n	11814 <_malloc_r+0x68>
   1185e:	e7c6      	b.n	117ee <_malloc_r+0x42>
   11860:	20000460 	.word	0x20000460
   11864:	20000464 	.word	0x20000464

00011868 <iprintf>:
   11868:	b40f      	push	{r0, r1, r2, r3}
   1186a:	4b0b      	ldr	r3, [pc, #44]	; (11898 <iprintf+0x30>)
   1186c:	b513      	push	{r0, r1, r4, lr}
   1186e:	681c      	ldr	r4, [r3, #0]
   11870:	2c00      	cmp	r4, #0
   11872:	d005      	beq.n	11880 <iprintf+0x18>
   11874:	69a3      	ldr	r3, [r4, #24]
   11876:	2b00      	cmp	r3, #0
   11878:	d102      	bne.n	11880 <iprintf+0x18>
   1187a:	0020      	movs	r0, r4
   1187c:	f000 fc70 	bl	12160 <__sinit>
   11880:	ab05      	add	r3, sp, #20
   11882:	9a04      	ldr	r2, [sp, #16]
   11884:	68a1      	ldr	r1, [r4, #8]
   11886:	0020      	movs	r0, r4
   11888:	9301      	str	r3, [sp, #4]
   1188a:	f000 ff09 	bl	126a0 <_vfiprintf_r>
   1188e:	bc16      	pop	{r1, r2, r4}
   11890:	bc08      	pop	{r3}
   11892:	b004      	add	sp, #16
   11894:	4718      	bx	r3
   11896:	46c0      	nop			; (mov r8, r8)
   11898:	2000001c 	.word	0x2000001c

0001189c <putchar>:
   1189c:	4b08      	ldr	r3, [pc, #32]	; (118c0 <putchar+0x24>)
   1189e:	b570      	push	{r4, r5, r6, lr}
   118a0:	681c      	ldr	r4, [r3, #0]
   118a2:	0005      	movs	r5, r0
   118a4:	2c00      	cmp	r4, #0
   118a6:	d005      	beq.n	118b4 <putchar+0x18>
   118a8:	69a3      	ldr	r3, [r4, #24]
   118aa:	2b00      	cmp	r3, #0
   118ac:	d102      	bne.n	118b4 <putchar+0x18>
   118ae:	0020      	movs	r0, r4
   118b0:	f000 fc56 	bl	12160 <__sinit>
   118b4:	0029      	movs	r1, r5
   118b6:	68a2      	ldr	r2, [r4, #8]
   118b8:	0020      	movs	r0, r4
   118ba:	f001 f995 	bl	12be8 <_putc_r>
   118be:	bd70      	pop	{r4, r5, r6, pc}
   118c0:	2000001c 	.word	0x2000001c

000118c4 <_puts_r>:
   118c4:	b570      	push	{r4, r5, r6, lr}
   118c6:	0005      	movs	r5, r0
   118c8:	000e      	movs	r6, r1
   118ca:	2800      	cmp	r0, #0
   118cc:	d004      	beq.n	118d8 <_puts_r+0x14>
   118ce:	6983      	ldr	r3, [r0, #24]
   118d0:	2b00      	cmp	r3, #0
   118d2:	d101      	bne.n	118d8 <_puts_r+0x14>
   118d4:	f000 fc44 	bl	12160 <__sinit>
   118d8:	69ab      	ldr	r3, [r5, #24]
   118da:	68ac      	ldr	r4, [r5, #8]
   118dc:	2b00      	cmp	r3, #0
   118de:	d102      	bne.n	118e6 <_puts_r+0x22>
   118e0:	0028      	movs	r0, r5
   118e2:	f000 fc3d 	bl	12160 <__sinit>
   118e6:	4b24      	ldr	r3, [pc, #144]	; (11978 <_puts_r+0xb4>)
   118e8:	429c      	cmp	r4, r3
   118ea:	d10f      	bne.n	1190c <_puts_r+0x48>
   118ec:	686c      	ldr	r4, [r5, #4]
   118ee:	89a3      	ldrh	r3, [r4, #12]
   118f0:	071b      	lsls	r3, r3, #28
   118f2:	d502      	bpl.n	118fa <_puts_r+0x36>
   118f4:	6923      	ldr	r3, [r4, #16]
   118f6:	2b00      	cmp	r3, #0
   118f8:	d120      	bne.n	1193c <_puts_r+0x78>
   118fa:	0021      	movs	r1, r4
   118fc:	0028      	movs	r0, r5
   118fe:	f000 fac1 	bl	11e84 <__swsetup_r>
   11902:	2800      	cmp	r0, #0
   11904:	d01a      	beq.n	1193c <_puts_r+0x78>
   11906:	2001      	movs	r0, #1
   11908:	4240      	negs	r0, r0
   1190a:	bd70      	pop	{r4, r5, r6, pc}
   1190c:	4b1b      	ldr	r3, [pc, #108]	; (1197c <_puts_r+0xb8>)
   1190e:	429c      	cmp	r4, r3
   11910:	d101      	bne.n	11916 <_puts_r+0x52>
   11912:	68ac      	ldr	r4, [r5, #8]
   11914:	e7eb      	b.n	118ee <_puts_r+0x2a>
   11916:	4b1a      	ldr	r3, [pc, #104]	; (11980 <_puts_r+0xbc>)
   11918:	429c      	cmp	r4, r3
   1191a:	d1e8      	bne.n	118ee <_puts_r+0x2a>
   1191c:	68ec      	ldr	r4, [r5, #12]
   1191e:	e7e6      	b.n	118ee <_puts_r+0x2a>
   11920:	3b01      	subs	r3, #1
   11922:	3601      	adds	r6, #1
   11924:	60a3      	str	r3, [r4, #8]
   11926:	2b00      	cmp	r3, #0
   11928:	da04      	bge.n	11934 <_puts_r+0x70>
   1192a:	69a2      	ldr	r2, [r4, #24]
   1192c:	4293      	cmp	r3, r2
   1192e:	db16      	blt.n	1195e <_puts_r+0x9a>
   11930:	290a      	cmp	r1, #10
   11932:	d014      	beq.n	1195e <_puts_r+0x9a>
   11934:	6823      	ldr	r3, [r4, #0]
   11936:	1c5a      	adds	r2, r3, #1
   11938:	6022      	str	r2, [r4, #0]
   1193a:	7019      	strb	r1, [r3, #0]
   1193c:	7831      	ldrb	r1, [r6, #0]
   1193e:	68a3      	ldr	r3, [r4, #8]
   11940:	2900      	cmp	r1, #0
   11942:	d1ed      	bne.n	11920 <_puts_r+0x5c>
   11944:	3b01      	subs	r3, #1
   11946:	60a3      	str	r3, [r4, #8]
   11948:	2b00      	cmp	r3, #0
   1194a:	da0f      	bge.n	1196c <_puts_r+0xa8>
   1194c:	0022      	movs	r2, r4
   1194e:	310a      	adds	r1, #10
   11950:	0028      	movs	r0, r5
   11952:	f000 fa41 	bl	11dd8 <__swbuf_r>
   11956:	1c43      	adds	r3, r0, #1
   11958:	d0d5      	beq.n	11906 <_puts_r+0x42>
   1195a:	200a      	movs	r0, #10
   1195c:	e7d5      	b.n	1190a <_puts_r+0x46>
   1195e:	0022      	movs	r2, r4
   11960:	0028      	movs	r0, r5
   11962:	f000 fa39 	bl	11dd8 <__swbuf_r>
   11966:	1c43      	adds	r3, r0, #1
   11968:	d1e8      	bne.n	1193c <_puts_r+0x78>
   1196a:	e7cc      	b.n	11906 <_puts_r+0x42>
   1196c:	200a      	movs	r0, #10
   1196e:	6823      	ldr	r3, [r4, #0]
   11970:	1c5a      	adds	r2, r3, #1
   11972:	6022      	str	r2, [r4, #0]
   11974:	7018      	strb	r0, [r3, #0]
   11976:	e7c8      	b.n	1190a <_puts_r+0x46>
   11978:	000148f4 	.word	0x000148f4
   1197c:	00014914 	.word	0x00014914
   11980:	000148d4 	.word	0x000148d4

00011984 <puts>:
   11984:	b510      	push	{r4, lr}
   11986:	4b03      	ldr	r3, [pc, #12]	; (11994 <puts+0x10>)
   11988:	0001      	movs	r1, r0
   1198a:	6818      	ldr	r0, [r3, #0]
   1198c:	f7ff ff9a 	bl	118c4 <_puts_r>
   11990:	bd10      	pop	{r4, pc}
   11992:	46c0      	nop			; (mov r8, r8)
   11994:	2000001c 	.word	0x2000001c

00011998 <rand>:
   11998:	4b15      	ldr	r3, [pc, #84]	; (119f0 <rand+0x58>)
   1199a:	b510      	push	{r4, lr}
   1199c:	681c      	ldr	r4, [r3, #0]
   1199e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   119a0:	2b00      	cmp	r3, #0
   119a2:	d115      	bne.n	119d0 <rand+0x38>
   119a4:	2018      	movs	r0, #24
   119a6:	f7ff fe7f 	bl	116a8 <malloc>
   119aa:	4b12      	ldr	r3, [pc, #72]	; (119f4 <rand+0x5c>)
   119ac:	63a0      	str	r0, [r4, #56]	; 0x38
   119ae:	8003      	strh	r3, [r0, #0]
   119b0:	4b11      	ldr	r3, [pc, #68]	; (119f8 <rand+0x60>)
   119b2:	2201      	movs	r2, #1
   119b4:	8043      	strh	r3, [r0, #2]
   119b6:	4b11      	ldr	r3, [pc, #68]	; (119fc <rand+0x64>)
   119b8:	8083      	strh	r3, [r0, #4]
   119ba:	4b11      	ldr	r3, [pc, #68]	; (11a00 <rand+0x68>)
   119bc:	80c3      	strh	r3, [r0, #6]
   119be:	4b11      	ldr	r3, [pc, #68]	; (11a04 <rand+0x6c>)
   119c0:	8103      	strh	r3, [r0, #8]
   119c2:	2305      	movs	r3, #5
   119c4:	8143      	strh	r3, [r0, #10]
   119c6:	3306      	adds	r3, #6
   119c8:	8183      	strh	r3, [r0, #12]
   119ca:	2300      	movs	r3, #0
   119cc:	6102      	str	r2, [r0, #16]
   119ce:	6143      	str	r3, [r0, #20]
   119d0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   119d2:	4a0d      	ldr	r2, [pc, #52]	; (11a08 <rand+0x70>)
   119d4:	6920      	ldr	r0, [r4, #16]
   119d6:	6961      	ldr	r1, [r4, #20]
   119d8:	4b0c      	ldr	r3, [pc, #48]	; (11a0c <rand+0x74>)
   119da:	f7ff fe11 	bl	11600 <__aeabi_lmul>
   119de:	2201      	movs	r2, #1
   119e0:	2300      	movs	r3, #0
   119e2:	1880      	adds	r0, r0, r2
   119e4:	4159      	adcs	r1, r3
   119e6:	6120      	str	r0, [r4, #16]
   119e8:	6161      	str	r1, [r4, #20]
   119ea:	0048      	lsls	r0, r1, #1
   119ec:	0840      	lsrs	r0, r0, #1
   119ee:	bd10      	pop	{r4, pc}
   119f0:	2000001c 	.word	0x2000001c
   119f4:	0000330e 	.word	0x0000330e
   119f8:	ffffabcd 	.word	0xffffabcd
   119fc:	00001234 	.word	0x00001234
   11a00:	ffffe66d 	.word	0xffffe66d
   11a04:	ffffdeec 	.word	0xffffdeec
   11a08:	4c957f2d 	.word	0x4c957f2d
   11a0c:	5851f42d 	.word	0x5851f42d

00011a10 <_sbrk_r>:
   11a10:	2300      	movs	r3, #0
   11a12:	b570      	push	{r4, r5, r6, lr}
   11a14:	4c06      	ldr	r4, [pc, #24]	; (11a30 <_sbrk_r+0x20>)
   11a16:	0005      	movs	r5, r0
   11a18:	0008      	movs	r0, r1
   11a1a:	6023      	str	r3, [r4, #0]
   11a1c:	f7fc fc3c 	bl	e298 <_sbrk>
   11a20:	1c43      	adds	r3, r0, #1
   11a22:	d103      	bne.n	11a2c <_sbrk_r+0x1c>
   11a24:	6823      	ldr	r3, [r4, #0]
   11a26:	2b00      	cmp	r3, #0
   11a28:	d000      	beq.n	11a2c <_sbrk_r+0x1c>
   11a2a:	602b      	str	r3, [r5, #0]
   11a2c:	bd70      	pop	{r4, r5, r6, pc}
   11a2e:	46c0      	nop			; (mov r8, r8)
   11a30:	20000f9c 	.word	0x20000f9c

00011a34 <setbuf>:
   11a34:	424a      	negs	r2, r1
   11a36:	414a      	adcs	r2, r1
   11a38:	2380      	movs	r3, #128	; 0x80
   11a3a:	b510      	push	{r4, lr}
   11a3c:	0052      	lsls	r2, r2, #1
   11a3e:	00db      	lsls	r3, r3, #3
   11a40:	f000 f802 	bl	11a48 <setvbuf>
   11a44:	bd10      	pop	{r4, pc}
	...

00011a48 <setvbuf>:
   11a48:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a4a:	001d      	movs	r5, r3
   11a4c:	4b4f      	ldr	r3, [pc, #316]	; (11b8c <setvbuf+0x144>)
   11a4e:	b085      	sub	sp, #20
   11a50:	681e      	ldr	r6, [r3, #0]
   11a52:	0004      	movs	r4, r0
   11a54:	000f      	movs	r7, r1
   11a56:	9200      	str	r2, [sp, #0]
   11a58:	2e00      	cmp	r6, #0
   11a5a:	d005      	beq.n	11a68 <setvbuf+0x20>
   11a5c:	69b3      	ldr	r3, [r6, #24]
   11a5e:	2b00      	cmp	r3, #0
   11a60:	d102      	bne.n	11a68 <setvbuf+0x20>
   11a62:	0030      	movs	r0, r6
   11a64:	f000 fb7c 	bl	12160 <__sinit>
   11a68:	4b49      	ldr	r3, [pc, #292]	; (11b90 <setvbuf+0x148>)
   11a6a:	429c      	cmp	r4, r3
   11a6c:	d150      	bne.n	11b10 <setvbuf+0xc8>
   11a6e:	6874      	ldr	r4, [r6, #4]
   11a70:	9b00      	ldr	r3, [sp, #0]
   11a72:	2b02      	cmp	r3, #2
   11a74:	d005      	beq.n	11a82 <setvbuf+0x3a>
   11a76:	2b01      	cmp	r3, #1
   11a78:	d900      	bls.n	11a7c <setvbuf+0x34>
   11a7a:	e084      	b.n	11b86 <setvbuf+0x13e>
   11a7c:	2d00      	cmp	r5, #0
   11a7e:	da00      	bge.n	11a82 <setvbuf+0x3a>
   11a80:	e081      	b.n	11b86 <setvbuf+0x13e>
   11a82:	0021      	movs	r1, r4
   11a84:	0030      	movs	r0, r6
   11a86:	f000 fafd 	bl	12084 <_fflush_r>
   11a8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11a8c:	2900      	cmp	r1, #0
   11a8e:	d008      	beq.n	11aa2 <setvbuf+0x5a>
   11a90:	0023      	movs	r3, r4
   11a92:	3344      	adds	r3, #68	; 0x44
   11a94:	4299      	cmp	r1, r3
   11a96:	d002      	beq.n	11a9e <setvbuf+0x56>
   11a98:	0030      	movs	r0, r6
   11a9a:	f7ff fe3d 	bl	11718 <_free_r>
   11a9e:	2300      	movs	r3, #0
   11aa0:	6363      	str	r3, [r4, #52]	; 0x34
   11aa2:	2300      	movs	r3, #0
   11aa4:	61a3      	str	r3, [r4, #24]
   11aa6:	6063      	str	r3, [r4, #4]
   11aa8:	89a3      	ldrh	r3, [r4, #12]
   11aaa:	061b      	lsls	r3, r3, #24
   11aac:	d503      	bpl.n	11ab6 <setvbuf+0x6e>
   11aae:	6921      	ldr	r1, [r4, #16]
   11ab0:	0030      	movs	r0, r6
   11ab2:	f7ff fe31 	bl	11718 <_free_r>
   11ab6:	89a3      	ldrh	r3, [r4, #12]
   11ab8:	4a36      	ldr	r2, [pc, #216]	; (11b94 <setvbuf+0x14c>)
   11aba:	4013      	ands	r3, r2
   11abc:	81a3      	strh	r3, [r4, #12]
   11abe:	9b00      	ldr	r3, [sp, #0]
   11ac0:	2b02      	cmp	r3, #2
   11ac2:	d05a      	beq.n	11b7a <setvbuf+0x132>
   11ac4:	ab03      	add	r3, sp, #12
   11ac6:	aa02      	add	r2, sp, #8
   11ac8:	0021      	movs	r1, r4
   11aca:	0030      	movs	r0, r6
   11acc:	f000 fbe0 	bl	12290 <__swhatbuf_r>
   11ad0:	89a3      	ldrh	r3, [r4, #12]
   11ad2:	4318      	orrs	r0, r3
   11ad4:	81a0      	strh	r0, [r4, #12]
   11ad6:	2d00      	cmp	r5, #0
   11ad8:	d124      	bne.n	11b24 <setvbuf+0xdc>
   11ada:	9d02      	ldr	r5, [sp, #8]
   11adc:	0028      	movs	r0, r5
   11ade:	f7ff fde3 	bl	116a8 <malloc>
   11ae2:	9501      	str	r5, [sp, #4]
   11ae4:	1e07      	subs	r7, r0, #0
   11ae6:	d142      	bne.n	11b6e <setvbuf+0x126>
   11ae8:	9b02      	ldr	r3, [sp, #8]
   11aea:	9301      	str	r3, [sp, #4]
   11aec:	42ab      	cmp	r3, r5
   11aee:	d139      	bne.n	11b64 <setvbuf+0x11c>
   11af0:	2001      	movs	r0, #1
   11af2:	4240      	negs	r0, r0
   11af4:	2302      	movs	r3, #2
   11af6:	89a2      	ldrh	r2, [r4, #12]
   11af8:	4313      	orrs	r3, r2
   11afa:	81a3      	strh	r3, [r4, #12]
   11afc:	2300      	movs	r3, #0
   11afe:	60a3      	str	r3, [r4, #8]
   11b00:	0023      	movs	r3, r4
   11b02:	3347      	adds	r3, #71	; 0x47
   11b04:	6023      	str	r3, [r4, #0]
   11b06:	6123      	str	r3, [r4, #16]
   11b08:	2301      	movs	r3, #1
   11b0a:	6163      	str	r3, [r4, #20]
   11b0c:	b005      	add	sp, #20
   11b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b10:	4b21      	ldr	r3, [pc, #132]	; (11b98 <setvbuf+0x150>)
   11b12:	429c      	cmp	r4, r3
   11b14:	d101      	bne.n	11b1a <setvbuf+0xd2>
   11b16:	68b4      	ldr	r4, [r6, #8]
   11b18:	e7aa      	b.n	11a70 <setvbuf+0x28>
   11b1a:	4b20      	ldr	r3, [pc, #128]	; (11b9c <setvbuf+0x154>)
   11b1c:	429c      	cmp	r4, r3
   11b1e:	d1a7      	bne.n	11a70 <setvbuf+0x28>
   11b20:	68f4      	ldr	r4, [r6, #12]
   11b22:	e7a5      	b.n	11a70 <setvbuf+0x28>
   11b24:	2f00      	cmp	r7, #0
   11b26:	d0d9      	beq.n	11adc <setvbuf+0x94>
   11b28:	69b3      	ldr	r3, [r6, #24]
   11b2a:	2b00      	cmp	r3, #0
   11b2c:	d102      	bne.n	11b34 <setvbuf+0xec>
   11b2e:	0030      	movs	r0, r6
   11b30:	f000 fb16 	bl	12160 <__sinit>
   11b34:	9b00      	ldr	r3, [sp, #0]
   11b36:	2b01      	cmp	r3, #1
   11b38:	d103      	bne.n	11b42 <setvbuf+0xfa>
   11b3a:	89a3      	ldrh	r3, [r4, #12]
   11b3c:	9a00      	ldr	r2, [sp, #0]
   11b3e:	431a      	orrs	r2, r3
   11b40:	81a2      	strh	r2, [r4, #12]
   11b42:	2008      	movs	r0, #8
   11b44:	89a3      	ldrh	r3, [r4, #12]
   11b46:	6027      	str	r7, [r4, #0]
   11b48:	6127      	str	r7, [r4, #16]
   11b4a:	6165      	str	r5, [r4, #20]
   11b4c:	4018      	ands	r0, r3
   11b4e:	d018      	beq.n	11b82 <setvbuf+0x13a>
   11b50:	2001      	movs	r0, #1
   11b52:	4018      	ands	r0, r3
   11b54:	2300      	movs	r3, #0
   11b56:	4298      	cmp	r0, r3
   11b58:	d011      	beq.n	11b7e <setvbuf+0x136>
   11b5a:	426d      	negs	r5, r5
   11b5c:	60a3      	str	r3, [r4, #8]
   11b5e:	61a5      	str	r5, [r4, #24]
   11b60:	0018      	movs	r0, r3
   11b62:	e7d3      	b.n	11b0c <setvbuf+0xc4>
   11b64:	9801      	ldr	r0, [sp, #4]
   11b66:	f7ff fd9f 	bl	116a8 <malloc>
   11b6a:	1e07      	subs	r7, r0, #0
   11b6c:	d0c0      	beq.n	11af0 <setvbuf+0xa8>
   11b6e:	2380      	movs	r3, #128	; 0x80
   11b70:	89a2      	ldrh	r2, [r4, #12]
   11b72:	9d01      	ldr	r5, [sp, #4]
   11b74:	4313      	orrs	r3, r2
   11b76:	81a3      	strh	r3, [r4, #12]
   11b78:	e7d6      	b.n	11b28 <setvbuf+0xe0>
   11b7a:	2000      	movs	r0, #0
   11b7c:	e7ba      	b.n	11af4 <setvbuf+0xac>
   11b7e:	60a5      	str	r5, [r4, #8]
   11b80:	e7c4      	b.n	11b0c <setvbuf+0xc4>
   11b82:	60a0      	str	r0, [r4, #8]
   11b84:	e7c2      	b.n	11b0c <setvbuf+0xc4>
   11b86:	2001      	movs	r0, #1
   11b88:	4240      	negs	r0, r0
   11b8a:	e7bf      	b.n	11b0c <setvbuf+0xc4>
   11b8c:	2000001c 	.word	0x2000001c
   11b90:	000148f4 	.word	0x000148f4
   11b94:	fffff35c 	.word	0xfffff35c
   11b98:	00014914 	.word	0x00014914
   11b9c:	000148d4 	.word	0x000148d4

00011ba0 <siprintf>:
   11ba0:	b40e      	push	{r1, r2, r3}
   11ba2:	b510      	push	{r4, lr}
   11ba4:	b09d      	sub	sp, #116	; 0x74
   11ba6:	a902      	add	r1, sp, #8
   11ba8:	9002      	str	r0, [sp, #8]
   11baa:	6108      	str	r0, [r1, #16]
   11bac:	480b      	ldr	r0, [pc, #44]	; (11bdc <siprintf+0x3c>)
   11bae:	2482      	movs	r4, #130	; 0x82
   11bb0:	6088      	str	r0, [r1, #8]
   11bb2:	6148      	str	r0, [r1, #20]
   11bb4:	2001      	movs	r0, #1
   11bb6:	4240      	negs	r0, r0
   11bb8:	ab1f      	add	r3, sp, #124	; 0x7c
   11bba:	81c8      	strh	r0, [r1, #14]
   11bbc:	4808      	ldr	r0, [pc, #32]	; (11be0 <siprintf+0x40>)
   11bbe:	cb04      	ldmia	r3!, {r2}
   11bc0:	00a4      	lsls	r4, r4, #2
   11bc2:	6800      	ldr	r0, [r0, #0]
   11bc4:	9301      	str	r3, [sp, #4]
   11bc6:	818c      	strh	r4, [r1, #12]
   11bc8:	f000 fc3e 	bl	12448 <_svfiprintf_r>
   11bcc:	2300      	movs	r3, #0
   11bce:	9a02      	ldr	r2, [sp, #8]
   11bd0:	7013      	strb	r3, [r2, #0]
   11bd2:	b01d      	add	sp, #116	; 0x74
   11bd4:	bc10      	pop	{r4}
   11bd6:	bc08      	pop	{r3}
   11bd8:	b003      	add	sp, #12
   11bda:	4718      	bx	r3
   11bdc:	7fffffff 	.word	0x7fffffff
   11be0:	2000001c 	.word	0x2000001c

00011be4 <strcmp>:
   11be4:	7802      	ldrb	r2, [r0, #0]
   11be6:	780b      	ldrb	r3, [r1, #0]
   11be8:	2a00      	cmp	r2, #0
   11bea:	d003      	beq.n	11bf4 <strcmp+0x10>
   11bec:	3001      	adds	r0, #1
   11bee:	3101      	adds	r1, #1
   11bf0:	429a      	cmp	r2, r3
   11bf2:	d0f7      	beq.n	11be4 <strcmp>
   11bf4:	1ad0      	subs	r0, r2, r3
   11bf6:	4770      	bx	lr

00011bf8 <strcpy>:
   11bf8:	1c03      	adds	r3, r0, #0
   11bfa:	780a      	ldrb	r2, [r1, #0]
   11bfc:	3101      	adds	r1, #1
   11bfe:	701a      	strb	r2, [r3, #0]
   11c00:	3301      	adds	r3, #1
   11c02:	2a00      	cmp	r2, #0
   11c04:	d1f9      	bne.n	11bfa <strcpy+0x2>
   11c06:	4770      	bx	lr

00011c08 <strdup>:
   11c08:	b510      	push	{r4, lr}
   11c0a:	4b03      	ldr	r3, [pc, #12]	; (11c18 <strdup+0x10>)
   11c0c:	0001      	movs	r1, r0
   11c0e:	6818      	ldr	r0, [r3, #0]
   11c10:	f000 f804 	bl	11c1c <_strdup_r>
   11c14:	bd10      	pop	{r4, pc}
   11c16:	46c0      	nop			; (mov r8, r8)
   11c18:	2000001c 	.word	0x2000001c

00011c1c <_strdup_r>:
   11c1c:	b570      	push	{r4, r5, r6, lr}
   11c1e:	0005      	movs	r5, r0
   11c20:	0008      	movs	r0, r1
   11c22:	000e      	movs	r6, r1
   11c24:	f000 f80d 	bl	11c42 <strlen>
   11c28:	1c44      	adds	r4, r0, #1
   11c2a:	0021      	movs	r1, r4
   11c2c:	0028      	movs	r0, r5
   11c2e:	f7ff fdbd 	bl	117ac <_malloc_r>
   11c32:	1e05      	subs	r5, r0, #0
   11c34:	d003      	beq.n	11c3e <_strdup_r+0x22>
   11c36:	0022      	movs	r2, r4
   11c38:	0031      	movs	r1, r6
   11c3a:	f7ff fd49 	bl	116d0 <memcpy>
   11c3e:	0028      	movs	r0, r5
   11c40:	bd70      	pop	{r4, r5, r6, pc}

00011c42 <strlen>:
   11c42:	2300      	movs	r3, #0
   11c44:	5cc2      	ldrb	r2, [r0, r3]
   11c46:	3301      	adds	r3, #1
   11c48:	2a00      	cmp	r2, #0
   11c4a:	d1fb      	bne.n	11c44 <strlen+0x2>
   11c4c:	1e58      	subs	r0, r3, #1
   11c4e:	4770      	bx	lr

00011c50 <strncmp>:
   11c50:	2300      	movs	r3, #0
   11c52:	b530      	push	{r4, r5, lr}
   11c54:	429a      	cmp	r2, r3
   11c56:	d00a      	beq.n	11c6e <strncmp+0x1e>
   11c58:	3a01      	subs	r2, #1
   11c5a:	5cc4      	ldrb	r4, [r0, r3]
   11c5c:	5ccd      	ldrb	r5, [r1, r3]
   11c5e:	42ac      	cmp	r4, r5
   11c60:	d104      	bne.n	11c6c <strncmp+0x1c>
   11c62:	429a      	cmp	r2, r3
   11c64:	d002      	beq.n	11c6c <strncmp+0x1c>
   11c66:	3301      	adds	r3, #1
   11c68:	2c00      	cmp	r4, #0
   11c6a:	d1f6      	bne.n	11c5a <strncmp+0xa>
   11c6c:	1b63      	subs	r3, r4, r5
   11c6e:	0018      	movs	r0, r3
   11c70:	bd30      	pop	{r4, r5, pc}

00011c72 <strstr>:
   11c72:	b510      	push	{r4, lr}
   11c74:	0002      	movs	r2, r0
   11c76:	7800      	ldrb	r0, [r0, #0]
   11c78:	2800      	cmp	r0, #0
   11c7a:	d104      	bne.n	11c86 <strstr+0x14>
   11c7c:	7809      	ldrb	r1, [r1, #0]
   11c7e:	2900      	cmp	r1, #0
   11c80:	d00d      	beq.n	11c9e <strstr+0x2c>
   11c82:	bd10      	pop	{r4, pc}
   11c84:	3201      	adds	r2, #1
   11c86:	7810      	ldrb	r0, [r2, #0]
   11c88:	2800      	cmp	r0, #0
   11c8a:	d0fa      	beq.n	11c82 <strstr+0x10>
   11c8c:	2300      	movs	r3, #0
   11c8e:	5cc8      	ldrb	r0, [r1, r3]
   11c90:	2800      	cmp	r0, #0
   11c92:	d004      	beq.n	11c9e <strstr+0x2c>
   11c94:	5cd4      	ldrb	r4, [r2, r3]
   11c96:	4284      	cmp	r4, r0
   11c98:	d1f4      	bne.n	11c84 <strstr+0x12>
   11c9a:	3301      	adds	r3, #1
   11c9c:	e7f7      	b.n	11c8e <strstr+0x1c>
   11c9e:	0010      	movs	r0, r2
   11ca0:	e7ef      	b.n	11c82 <strstr+0x10>
	...

00011ca4 <_strtol_l.isra.0>:
   11ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ca6:	001f      	movs	r7, r3
   11ca8:	000e      	movs	r6, r1
   11caa:	b087      	sub	sp, #28
   11cac:	9005      	str	r0, [sp, #20]
   11cae:	9103      	str	r1, [sp, #12]
   11cb0:	9202      	str	r2, [sp, #8]
   11cb2:	980c      	ldr	r0, [sp, #48]	; 0x30
   11cb4:	7834      	ldrb	r4, [r6, #0]
   11cb6:	f000 fae8 	bl	1228a <__locale_ctype_ptr_l>
   11cba:	2208      	movs	r2, #8
   11cbc:	1900      	adds	r0, r0, r4
   11cbe:	7843      	ldrb	r3, [r0, #1]
   11cc0:	1c75      	adds	r5, r6, #1
   11cc2:	4013      	ands	r3, r2
   11cc4:	d10c      	bne.n	11ce0 <_strtol_l.isra.0+0x3c>
   11cc6:	2c2d      	cmp	r4, #45	; 0x2d
   11cc8:	d10c      	bne.n	11ce4 <_strtol_l.isra.0+0x40>
   11cca:	3301      	adds	r3, #1
   11ccc:	782c      	ldrb	r4, [r5, #0]
   11cce:	9301      	str	r3, [sp, #4]
   11cd0:	1cb5      	adds	r5, r6, #2
   11cd2:	2f00      	cmp	r7, #0
   11cd4:	d00c      	beq.n	11cf0 <_strtol_l.isra.0+0x4c>
   11cd6:	2f10      	cmp	r7, #16
   11cd8:	d114      	bne.n	11d04 <_strtol_l.isra.0+0x60>
   11cda:	2c30      	cmp	r4, #48	; 0x30
   11cdc:	d00a      	beq.n	11cf4 <_strtol_l.isra.0+0x50>
   11cde:	e011      	b.n	11d04 <_strtol_l.isra.0+0x60>
   11ce0:	002e      	movs	r6, r5
   11ce2:	e7e6      	b.n	11cb2 <_strtol_l.isra.0+0xe>
   11ce4:	9301      	str	r3, [sp, #4]
   11ce6:	2c2b      	cmp	r4, #43	; 0x2b
   11ce8:	d1f3      	bne.n	11cd2 <_strtol_l.isra.0+0x2e>
   11cea:	782c      	ldrb	r4, [r5, #0]
   11cec:	1cb5      	adds	r5, r6, #2
   11cee:	e7f0      	b.n	11cd2 <_strtol_l.isra.0+0x2e>
   11cf0:	2c30      	cmp	r4, #48	; 0x30
   11cf2:	d12f      	bne.n	11d54 <_strtol_l.isra.0+0xb0>
   11cf4:	2220      	movs	r2, #32
   11cf6:	782b      	ldrb	r3, [r5, #0]
   11cf8:	4393      	bics	r3, r2
   11cfa:	2b58      	cmp	r3, #88	; 0x58
   11cfc:	d151      	bne.n	11da2 <_strtol_l.isra.0+0xfe>
   11cfe:	2710      	movs	r7, #16
   11d00:	786c      	ldrb	r4, [r5, #1]
   11d02:	3502      	adds	r5, #2
   11d04:	9b01      	ldr	r3, [sp, #4]
   11d06:	4a29      	ldr	r2, [pc, #164]	; (11dac <_strtol_l.isra.0+0x108>)
   11d08:	0039      	movs	r1, r7
   11d0a:	189e      	adds	r6, r3, r2
   11d0c:	0030      	movs	r0, r6
   11d0e:	f7ff fb87 	bl	11420 <__aeabi_uidivmod>
   11d12:	0030      	movs	r0, r6
   11d14:	9104      	str	r1, [sp, #16]
   11d16:	0039      	movs	r1, r7
   11d18:	f7ff fafc 	bl	11314 <__udivsi3>
   11d1c:	2101      	movs	r1, #1
   11d1e:	2300      	movs	r3, #0
   11d20:	4249      	negs	r1, r1
   11d22:	0002      	movs	r2, r0
   11d24:	468c      	mov	ip, r1
   11d26:	0018      	movs	r0, r3
   11d28:	0021      	movs	r1, r4
   11d2a:	3930      	subs	r1, #48	; 0x30
   11d2c:	2909      	cmp	r1, #9
   11d2e:	d813      	bhi.n	11d58 <_strtol_l.isra.0+0xb4>
   11d30:	000c      	movs	r4, r1
   11d32:	42a7      	cmp	r7, r4
   11d34:	dd1c      	ble.n	11d70 <_strtol_l.isra.0+0xcc>
   11d36:	1c59      	adds	r1, r3, #1
   11d38:	d009      	beq.n	11d4e <_strtol_l.isra.0+0xaa>
   11d3a:	4663      	mov	r3, ip
   11d3c:	4282      	cmp	r2, r0
   11d3e:	d306      	bcc.n	11d4e <_strtol_l.isra.0+0xaa>
   11d40:	d102      	bne.n	11d48 <_strtol_l.isra.0+0xa4>
   11d42:	9904      	ldr	r1, [sp, #16]
   11d44:	42a1      	cmp	r1, r4
   11d46:	db02      	blt.n	11d4e <_strtol_l.isra.0+0xaa>
   11d48:	2301      	movs	r3, #1
   11d4a:	4378      	muls	r0, r7
   11d4c:	1820      	adds	r0, r4, r0
   11d4e:	782c      	ldrb	r4, [r5, #0]
   11d50:	3501      	adds	r5, #1
   11d52:	e7e9      	b.n	11d28 <_strtol_l.isra.0+0x84>
   11d54:	270a      	movs	r7, #10
   11d56:	e7d5      	b.n	11d04 <_strtol_l.isra.0+0x60>
   11d58:	0021      	movs	r1, r4
   11d5a:	3941      	subs	r1, #65	; 0x41
   11d5c:	2919      	cmp	r1, #25
   11d5e:	d801      	bhi.n	11d64 <_strtol_l.isra.0+0xc0>
   11d60:	3c37      	subs	r4, #55	; 0x37
   11d62:	e7e6      	b.n	11d32 <_strtol_l.isra.0+0x8e>
   11d64:	0021      	movs	r1, r4
   11d66:	3961      	subs	r1, #97	; 0x61
   11d68:	2919      	cmp	r1, #25
   11d6a:	d801      	bhi.n	11d70 <_strtol_l.isra.0+0xcc>
   11d6c:	3c57      	subs	r4, #87	; 0x57
   11d6e:	e7e0      	b.n	11d32 <_strtol_l.isra.0+0x8e>
   11d70:	1c5a      	adds	r2, r3, #1
   11d72:	d108      	bne.n	11d86 <_strtol_l.isra.0+0xe2>
   11d74:	9a05      	ldr	r2, [sp, #20]
   11d76:	3323      	adds	r3, #35	; 0x23
   11d78:	6013      	str	r3, [r2, #0]
   11d7a:	9b02      	ldr	r3, [sp, #8]
   11d7c:	0030      	movs	r0, r6
   11d7e:	2b00      	cmp	r3, #0
   11d80:	d10b      	bne.n	11d9a <_strtol_l.isra.0+0xf6>
   11d82:	b007      	add	sp, #28
   11d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d86:	9a01      	ldr	r2, [sp, #4]
   11d88:	2a00      	cmp	r2, #0
   11d8a:	d000      	beq.n	11d8e <_strtol_l.isra.0+0xea>
   11d8c:	4240      	negs	r0, r0
   11d8e:	9a02      	ldr	r2, [sp, #8]
   11d90:	2a00      	cmp	r2, #0
   11d92:	d0f6      	beq.n	11d82 <_strtol_l.isra.0+0xde>
   11d94:	9a03      	ldr	r2, [sp, #12]
   11d96:	2b00      	cmp	r3, #0
   11d98:	d000      	beq.n	11d9c <_strtol_l.isra.0+0xf8>
   11d9a:	1e6a      	subs	r2, r5, #1
   11d9c:	9b02      	ldr	r3, [sp, #8]
   11d9e:	601a      	str	r2, [r3, #0]
   11da0:	e7ef      	b.n	11d82 <_strtol_l.isra.0+0xde>
   11da2:	2430      	movs	r4, #48	; 0x30
   11da4:	2f00      	cmp	r7, #0
   11da6:	d1ad      	bne.n	11d04 <_strtol_l.isra.0+0x60>
   11da8:	3708      	adds	r7, #8
   11daa:	e7ab      	b.n	11d04 <_strtol_l.isra.0+0x60>
   11dac:	7fffffff 	.word	0x7fffffff

00011db0 <strtol>:
   11db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11db2:	0013      	movs	r3, r2
   11db4:	4a06      	ldr	r2, [pc, #24]	; (11dd0 <strtol+0x20>)
   11db6:	0005      	movs	r5, r0
   11db8:	6810      	ldr	r0, [r2, #0]
   11dba:	6a04      	ldr	r4, [r0, #32]
   11dbc:	2c00      	cmp	r4, #0
   11dbe:	d100      	bne.n	11dc2 <strtol+0x12>
   11dc0:	4c04      	ldr	r4, [pc, #16]	; (11dd4 <strtol+0x24>)
   11dc2:	000a      	movs	r2, r1
   11dc4:	9400      	str	r4, [sp, #0]
   11dc6:	0029      	movs	r1, r5
   11dc8:	f7ff ff6c 	bl	11ca4 <_strtol_l.isra.0>
   11dcc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11dce:	46c0      	nop			; (mov r8, r8)
   11dd0:	2000001c 	.word	0x2000001c
   11dd4:	20000080 	.word	0x20000080

00011dd8 <__swbuf_r>:
   11dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11dda:	0005      	movs	r5, r0
   11ddc:	000e      	movs	r6, r1
   11dde:	0014      	movs	r4, r2
   11de0:	2800      	cmp	r0, #0
   11de2:	d004      	beq.n	11dee <__swbuf_r+0x16>
   11de4:	6983      	ldr	r3, [r0, #24]
   11de6:	2b00      	cmp	r3, #0
   11de8:	d101      	bne.n	11dee <__swbuf_r+0x16>
   11dea:	f000 f9b9 	bl	12160 <__sinit>
   11dee:	4b22      	ldr	r3, [pc, #136]	; (11e78 <__swbuf_r+0xa0>)
   11df0:	429c      	cmp	r4, r3
   11df2:	d12d      	bne.n	11e50 <__swbuf_r+0x78>
   11df4:	686c      	ldr	r4, [r5, #4]
   11df6:	69a3      	ldr	r3, [r4, #24]
   11df8:	60a3      	str	r3, [r4, #8]
   11dfa:	89a3      	ldrh	r3, [r4, #12]
   11dfc:	071b      	lsls	r3, r3, #28
   11dfe:	d531      	bpl.n	11e64 <__swbuf_r+0x8c>
   11e00:	6923      	ldr	r3, [r4, #16]
   11e02:	2b00      	cmp	r3, #0
   11e04:	d02e      	beq.n	11e64 <__swbuf_r+0x8c>
   11e06:	6823      	ldr	r3, [r4, #0]
   11e08:	6922      	ldr	r2, [r4, #16]
   11e0a:	b2f7      	uxtb	r7, r6
   11e0c:	1a98      	subs	r0, r3, r2
   11e0e:	6963      	ldr	r3, [r4, #20]
   11e10:	b2f6      	uxtb	r6, r6
   11e12:	4298      	cmp	r0, r3
   11e14:	db05      	blt.n	11e22 <__swbuf_r+0x4a>
   11e16:	0021      	movs	r1, r4
   11e18:	0028      	movs	r0, r5
   11e1a:	f000 f933 	bl	12084 <_fflush_r>
   11e1e:	2800      	cmp	r0, #0
   11e20:	d126      	bne.n	11e70 <__swbuf_r+0x98>
   11e22:	68a3      	ldr	r3, [r4, #8]
   11e24:	3001      	adds	r0, #1
   11e26:	3b01      	subs	r3, #1
   11e28:	60a3      	str	r3, [r4, #8]
   11e2a:	6823      	ldr	r3, [r4, #0]
   11e2c:	1c5a      	adds	r2, r3, #1
   11e2e:	6022      	str	r2, [r4, #0]
   11e30:	701f      	strb	r7, [r3, #0]
   11e32:	6963      	ldr	r3, [r4, #20]
   11e34:	4298      	cmp	r0, r3
   11e36:	d004      	beq.n	11e42 <__swbuf_r+0x6a>
   11e38:	89a3      	ldrh	r3, [r4, #12]
   11e3a:	07db      	lsls	r3, r3, #31
   11e3c:	d51a      	bpl.n	11e74 <__swbuf_r+0x9c>
   11e3e:	2e0a      	cmp	r6, #10
   11e40:	d118      	bne.n	11e74 <__swbuf_r+0x9c>
   11e42:	0021      	movs	r1, r4
   11e44:	0028      	movs	r0, r5
   11e46:	f000 f91d 	bl	12084 <_fflush_r>
   11e4a:	2800      	cmp	r0, #0
   11e4c:	d012      	beq.n	11e74 <__swbuf_r+0x9c>
   11e4e:	e00f      	b.n	11e70 <__swbuf_r+0x98>
   11e50:	4b0a      	ldr	r3, [pc, #40]	; (11e7c <__swbuf_r+0xa4>)
   11e52:	429c      	cmp	r4, r3
   11e54:	d101      	bne.n	11e5a <__swbuf_r+0x82>
   11e56:	68ac      	ldr	r4, [r5, #8]
   11e58:	e7cd      	b.n	11df6 <__swbuf_r+0x1e>
   11e5a:	4b09      	ldr	r3, [pc, #36]	; (11e80 <__swbuf_r+0xa8>)
   11e5c:	429c      	cmp	r4, r3
   11e5e:	d1ca      	bne.n	11df6 <__swbuf_r+0x1e>
   11e60:	68ec      	ldr	r4, [r5, #12]
   11e62:	e7c8      	b.n	11df6 <__swbuf_r+0x1e>
   11e64:	0021      	movs	r1, r4
   11e66:	0028      	movs	r0, r5
   11e68:	f000 f80c 	bl	11e84 <__swsetup_r>
   11e6c:	2800      	cmp	r0, #0
   11e6e:	d0ca      	beq.n	11e06 <__swbuf_r+0x2e>
   11e70:	2601      	movs	r6, #1
   11e72:	4276      	negs	r6, r6
   11e74:	0030      	movs	r0, r6
   11e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e78:	000148f4 	.word	0x000148f4
   11e7c:	00014914 	.word	0x00014914
   11e80:	000148d4 	.word	0x000148d4

00011e84 <__swsetup_r>:
   11e84:	4b36      	ldr	r3, [pc, #216]	; (11f60 <__swsetup_r+0xdc>)
   11e86:	b570      	push	{r4, r5, r6, lr}
   11e88:	681d      	ldr	r5, [r3, #0]
   11e8a:	0006      	movs	r6, r0
   11e8c:	000c      	movs	r4, r1
   11e8e:	2d00      	cmp	r5, #0
   11e90:	d005      	beq.n	11e9e <__swsetup_r+0x1a>
   11e92:	69ab      	ldr	r3, [r5, #24]
   11e94:	2b00      	cmp	r3, #0
   11e96:	d102      	bne.n	11e9e <__swsetup_r+0x1a>
   11e98:	0028      	movs	r0, r5
   11e9a:	f000 f961 	bl	12160 <__sinit>
   11e9e:	4b31      	ldr	r3, [pc, #196]	; (11f64 <__swsetup_r+0xe0>)
   11ea0:	429c      	cmp	r4, r3
   11ea2:	d10f      	bne.n	11ec4 <__swsetup_r+0x40>
   11ea4:	686c      	ldr	r4, [r5, #4]
   11ea6:	230c      	movs	r3, #12
   11ea8:	5ee2      	ldrsh	r2, [r4, r3]
   11eaa:	b293      	uxth	r3, r2
   11eac:	0719      	lsls	r1, r3, #28
   11eae:	d42d      	bmi.n	11f0c <__swsetup_r+0x88>
   11eb0:	06d9      	lsls	r1, r3, #27
   11eb2:	d411      	bmi.n	11ed8 <__swsetup_r+0x54>
   11eb4:	2309      	movs	r3, #9
   11eb6:	2001      	movs	r0, #1
   11eb8:	6033      	str	r3, [r6, #0]
   11eba:	3337      	adds	r3, #55	; 0x37
   11ebc:	4313      	orrs	r3, r2
   11ebe:	81a3      	strh	r3, [r4, #12]
   11ec0:	4240      	negs	r0, r0
   11ec2:	bd70      	pop	{r4, r5, r6, pc}
   11ec4:	4b28      	ldr	r3, [pc, #160]	; (11f68 <__swsetup_r+0xe4>)
   11ec6:	429c      	cmp	r4, r3
   11ec8:	d101      	bne.n	11ece <__swsetup_r+0x4a>
   11eca:	68ac      	ldr	r4, [r5, #8]
   11ecc:	e7eb      	b.n	11ea6 <__swsetup_r+0x22>
   11ece:	4b27      	ldr	r3, [pc, #156]	; (11f6c <__swsetup_r+0xe8>)
   11ed0:	429c      	cmp	r4, r3
   11ed2:	d1e8      	bne.n	11ea6 <__swsetup_r+0x22>
   11ed4:	68ec      	ldr	r4, [r5, #12]
   11ed6:	e7e6      	b.n	11ea6 <__swsetup_r+0x22>
   11ed8:	075b      	lsls	r3, r3, #29
   11eda:	d513      	bpl.n	11f04 <__swsetup_r+0x80>
   11edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11ede:	2900      	cmp	r1, #0
   11ee0:	d008      	beq.n	11ef4 <__swsetup_r+0x70>
   11ee2:	0023      	movs	r3, r4
   11ee4:	3344      	adds	r3, #68	; 0x44
   11ee6:	4299      	cmp	r1, r3
   11ee8:	d002      	beq.n	11ef0 <__swsetup_r+0x6c>
   11eea:	0030      	movs	r0, r6
   11eec:	f7ff fc14 	bl	11718 <_free_r>
   11ef0:	2300      	movs	r3, #0
   11ef2:	6363      	str	r3, [r4, #52]	; 0x34
   11ef4:	2224      	movs	r2, #36	; 0x24
   11ef6:	89a3      	ldrh	r3, [r4, #12]
   11ef8:	4393      	bics	r3, r2
   11efa:	81a3      	strh	r3, [r4, #12]
   11efc:	2300      	movs	r3, #0
   11efe:	6063      	str	r3, [r4, #4]
   11f00:	6923      	ldr	r3, [r4, #16]
   11f02:	6023      	str	r3, [r4, #0]
   11f04:	2308      	movs	r3, #8
   11f06:	89a2      	ldrh	r2, [r4, #12]
   11f08:	4313      	orrs	r3, r2
   11f0a:	81a3      	strh	r3, [r4, #12]
   11f0c:	6923      	ldr	r3, [r4, #16]
   11f0e:	2b00      	cmp	r3, #0
   11f10:	d10b      	bne.n	11f2a <__swsetup_r+0xa6>
   11f12:	21a0      	movs	r1, #160	; 0xa0
   11f14:	2280      	movs	r2, #128	; 0x80
   11f16:	89a3      	ldrh	r3, [r4, #12]
   11f18:	0089      	lsls	r1, r1, #2
   11f1a:	0092      	lsls	r2, r2, #2
   11f1c:	400b      	ands	r3, r1
   11f1e:	4293      	cmp	r3, r2
   11f20:	d003      	beq.n	11f2a <__swsetup_r+0xa6>
   11f22:	0021      	movs	r1, r4
   11f24:	0030      	movs	r0, r6
   11f26:	f000 f9db 	bl	122e0 <__smakebuf_r>
   11f2a:	2301      	movs	r3, #1
   11f2c:	89a2      	ldrh	r2, [r4, #12]
   11f2e:	4013      	ands	r3, r2
   11f30:	d011      	beq.n	11f56 <__swsetup_r+0xd2>
   11f32:	2300      	movs	r3, #0
   11f34:	60a3      	str	r3, [r4, #8]
   11f36:	6963      	ldr	r3, [r4, #20]
   11f38:	425b      	negs	r3, r3
   11f3a:	61a3      	str	r3, [r4, #24]
   11f3c:	2000      	movs	r0, #0
   11f3e:	6923      	ldr	r3, [r4, #16]
   11f40:	4283      	cmp	r3, r0
   11f42:	d1be      	bne.n	11ec2 <__swsetup_r+0x3e>
   11f44:	230c      	movs	r3, #12
   11f46:	5ee2      	ldrsh	r2, [r4, r3]
   11f48:	0613      	lsls	r3, r2, #24
   11f4a:	d5ba      	bpl.n	11ec2 <__swsetup_r+0x3e>
   11f4c:	2340      	movs	r3, #64	; 0x40
   11f4e:	4313      	orrs	r3, r2
   11f50:	81a3      	strh	r3, [r4, #12]
   11f52:	3801      	subs	r0, #1
   11f54:	e7b5      	b.n	11ec2 <__swsetup_r+0x3e>
   11f56:	0792      	lsls	r2, r2, #30
   11f58:	d400      	bmi.n	11f5c <__swsetup_r+0xd8>
   11f5a:	6963      	ldr	r3, [r4, #20]
   11f5c:	60a3      	str	r3, [r4, #8]
   11f5e:	e7ed      	b.n	11f3c <__swsetup_r+0xb8>
   11f60:	2000001c 	.word	0x2000001c
   11f64:	000148f4 	.word	0x000148f4
   11f68:	00014914 	.word	0x00014914
   11f6c:	000148d4 	.word	0x000148d4

00011f70 <__sflush_r>:
   11f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11f72:	898a      	ldrh	r2, [r1, #12]
   11f74:	0005      	movs	r5, r0
   11f76:	000c      	movs	r4, r1
   11f78:	0713      	lsls	r3, r2, #28
   11f7a:	d460      	bmi.n	1203e <__sflush_r+0xce>
   11f7c:	684b      	ldr	r3, [r1, #4]
   11f7e:	2b00      	cmp	r3, #0
   11f80:	dc04      	bgt.n	11f8c <__sflush_r+0x1c>
   11f82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   11f84:	2b00      	cmp	r3, #0
   11f86:	dc01      	bgt.n	11f8c <__sflush_r+0x1c>
   11f88:	2000      	movs	r0, #0
   11f8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11f8c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   11f8e:	2f00      	cmp	r7, #0
   11f90:	d0fa      	beq.n	11f88 <__sflush_r+0x18>
   11f92:	2300      	movs	r3, #0
   11f94:	682e      	ldr	r6, [r5, #0]
   11f96:	602b      	str	r3, [r5, #0]
   11f98:	2380      	movs	r3, #128	; 0x80
   11f9a:	015b      	lsls	r3, r3, #5
   11f9c:	401a      	ands	r2, r3
   11f9e:	d034      	beq.n	1200a <__sflush_r+0x9a>
   11fa0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   11fa2:	89a3      	ldrh	r3, [r4, #12]
   11fa4:	075b      	lsls	r3, r3, #29
   11fa6:	d506      	bpl.n	11fb6 <__sflush_r+0x46>
   11fa8:	6863      	ldr	r3, [r4, #4]
   11faa:	1ac0      	subs	r0, r0, r3
   11fac:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11fae:	2b00      	cmp	r3, #0
   11fb0:	d001      	beq.n	11fb6 <__sflush_r+0x46>
   11fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   11fb4:	1ac0      	subs	r0, r0, r3
   11fb6:	0002      	movs	r2, r0
   11fb8:	6a21      	ldr	r1, [r4, #32]
   11fba:	2300      	movs	r3, #0
   11fbc:	0028      	movs	r0, r5
   11fbe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   11fc0:	47b8      	blx	r7
   11fc2:	89a1      	ldrh	r1, [r4, #12]
   11fc4:	1c43      	adds	r3, r0, #1
   11fc6:	d106      	bne.n	11fd6 <__sflush_r+0x66>
   11fc8:	682b      	ldr	r3, [r5, #0]
   11fca:	2b1d      	cmp	r3, #29
   11fcc:	d831      	bhi.n	12032 <__sflush_r+0xc2>
   11fce:	4a2c      	ldr	r2, [pc, #176]	; (12080 <__sflush_r+0x110>)
   11fd0:	40da      	lsrs	r2, r3
   11fd2:	07d3      	lsls	r3, r2, #31
   11fd4:	d52d      	bpl.n	12032 <__sflush_r+0xc2>
   11fd6:	2300      	movs	r3, #0
   11fd8:	6063      	str	r3, [r4, #4]
   11fda:	6923      	ldr	r3, [r4, #16]
   11fdc:	6023      	str	r3, [r4, #0]
   11fde:	04cb      	lsls	r3, r1, #19
   11fe0:	d505      	bpl.n	11fee <__sflush_r+0x7e>
   11fe2:	1c43      	adds	r3, r0, #1
   11fe4:	d102      	bne.n	11fec <__sflush_r+0x7c>
   11fe6:	682b      	ldr	r3, [r5, #0]
   11fe8:	2b00      	cmp	r3, #0
   11fea:	d100      	bne.n	11fee <__sflush_r+0x7e>
   11fec:	6560      	str	r0, [r4, #84]	; 0x54
   11fee:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11ff0:	602e      	str	r6, [r5, #0]
   11ff2:	2900      	cmp	r1, #0
   11ff4:	d0c8      	beq.n	11f88 <__sflush_r+0x18>
   11ff6:	0023      	movs	r3, r4
   11ff8:	3344      	adds	r3, #68	; 0x44
   11ffa:	4299      	cmp	r1, r3
   11ffc:	d002      	beq.n	12004 <__sflush_r+0x94>
   11ffe:	0028      	movs	r0, r5
   12000:	f7ff fb8a 	bl	11718 <_free_r>
   12004:	2000      	movs	r0, #0
   12006:	6360      	str	r0, [r4, #52]	; 0x34
   12008:	e7bf      	b.n	11f8a <__sflush_r+0x1a>
   1200a:	2301      	movs	r3, #1
   1200c:	6a21      	ldr	r1, [r4, #32]
   1200e:	0028      	movs	r0, r5
   12010:	47b8      	blx	r7
   12012:	1c43      	adds	r3, r0, #1
   12014:	d1c5      	bne.n	11fa2 <__sflush_r+0x32>
   12016:	682b      	ldr	r3, [r5, #0]
   12018:	2b00      	cmp	r3, #0
   1201a:	d0c2      	beq.n	11fa2 <__sflush_r+0x32>
   1201c:	2b1d      	cmp	r3, #29
   1201e:	d001      	beq.n	12024 <__sflush_r+0xb4>
   12020:	2b16      	cmp	r3, #22
   12022:	d101      	bne.n	12028 <__sflush_r+0xb8>
   12024:	602e      	str	r6, [r5, #0]
   12026:	e7af      	b.n	11f88 <__sflush_r+0x18>
   12028:	2340      	movs	r3, #64	; 0x40
   1202a:	89a2      	ldrh	r2, [r4, #12]
   1202c:	4313      	orrs	r3, r2
   1202e:	81a3      	strh	r3, [r4, #12]
   12030:	e7ab      	b.n	11f8a <__sflush_r+0x1a>
   12032:	2340      	movs	r3, #64	; 0x40
   12034:	430b      	orrs	r3, r1
   12036:	2001      	movs	r0, #1
   12038:	81a3      	strh	r3, [r4, #12]
   1203a:	4240      	negs	r0, r0
   1203c:	e7a5      	b.n	11f8a <__sflush_r+0x1a>
   1203e:	690f      	ldr	r7, [r1, #16]
   12040:	2f00      	cmp	r7, #0
   12042:	d0a1      	beq.n	11f88 <__sflush_r+0x18>
   12044:	680b      	ldr	r3, [r1, #0]
   12046:	600f      	str	r7, [r1, #0]
   12048:	1bdb      	subs	r3, r3, r7
   1204a:	9301      	str	r3, [sp, #4]
   1204c:	2300      	movs	r3, #0
   1204e:	0792      	lsls	r2, r2, #30
   12050:	d100      	bne.n	12054 <__sflush_r+0xe4>
   12052:	694b      	ldr	r3, [r1, #20]
   12054:	60a3      	str	r3, [r4, #8]
   12056:	9b01      	ldr	r3, [sp, #4]
   12058:	2b00      	cmp	r3, #0
   1205a:	dc00      	bgt.n	1205e <__sflush_r+0xee>
   1205c:	e794      	b.n	11f88 <__sflush_r+0x18>
   1205e:	9b01      	ldr	r3, [sp, #4]
   12060:	003a      	movs	r2, r7
   12062:	6a21      	ldr	r1, [r4, #32]
   12064:	0028      	movs	r0, r5
   12066:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   12068:	47b0      	blx	r6
   1206a:	2800      	cmp	r0, #0
   1206c:	dc03      	bgt.n	12076 <__sflush_r+0x106>
   1206e:	2340      	movs	r3, #64	; 0x40
   12070:	89a2      	ldrh	r2, [r4, #12]
   12072:	4313      	orrs	r3, r2
   12074:	e7df      	b.n	12036 <__sflush_r+0xc6>
   12076:	9b01      	ldr	r3, [sp, #4]
   12078:	183f      	adds	r7, r7, r0
   1207a:	1a1b      	subs	r3, r3, r0
   1207c:	9301      	str	r3, [sp, #4]
   1207e:	e7ea      	b.n	12056 <__sflush_r+0xe6>
   12080:	20400001 	.word	0x20400001

00012084 <_fflush_r>:
   12084:	690b      	ldr	r3, [r1, #16]
   12086:	b570      	push	{r4, r5, r6, lr}
   12088:	0005      	movs	r5, r0
   1208a:	000c      	movs	r4, r1
   1208c:	2b00      	cmp	r3, #0
   1208e:	d101      	bne.n	12094 <_fflush_r+0x10>
   12090:	2000      	movs	r0, #0
   12092:	bd70      	pop	{r4, r5, r6, pc}
   12094:	2800      	cmp	r0, #0
   12096:	d004      	beq.n	120a2 <_fflush_r+0x1e>
   12098:	6983      	ldr	r3, [r0, #24]
   1209a:	2b00      	cmp	r3, #0
   1209c:	d101      	bne.n	120a2 <_fflush_r+0x1e>
   1209e:	f000 f85f 	bl	12160 <__sinit>
   120a2:	4b0b      	ldr	r3, [pc, #44]	; (120d0 <_fflush_r+0x4c>)
   120a4:	429c      	cmp	r4, r3
   120a6:	d109      	bne.n	120bc <_fflush_r+0x38>
   120a8:	686c      	ldr	r4, [r5, #4]
   120aa:	220c      	movs	r2, #12
   120ac:	5ea3      	ldrsh	r3, [r4, r2]
   120ae:	2b00      	cmp	r3, #0
   120b0:	d0ee      	beq.n	12090 <_fflush_r+0xc>
   120b2:	0021      	movs	r1, r4
   120b4:	0028      	movs	r0, r5
   120b6:	f7ff ff5b 	bl	11f70 <__sflush_r>
   120ba:	e7ea      	b.n	12092 <_fflush_r+0xe>
   120bc:	4b05      	ldr	r3, [pc, #20]	; (120d4 <_fflush_r+0x50>)
   120be:	429c      	cmp	r4, r3
   120c0:	d101      	bne.n	120c6 <_fflush_r+0x42>
   120c2:	68ac      	ldr	r4, [r5, #8]
   120c4:	e7f1      	b.n	120aa <_fflush_r+0x26>
   120c6:	4b04      	ldr	r3, [pc, #16]	; (120d8 <_fflush_r+0x54>)
   120c8:	429c      	cmp	r4, r3
   120ca:	d1ee      	bne.n	120aa <_fflush_r+0x26>
   120cc:	68ec      	ldr	r4, [r5, #12]
   120ce:	e7ec      	b.n	120aa <_fflush_r+0x26>
   120d0:	000148f4 	.word	0x000148f4
   120d4:	00014914 	.word	0x00014914
   120d8:	000148d4 	.word	0x000148d4

000120dc <_cleanup_r>:
   120dc:	b510      	push	{r4, lr}
   120de:	4902      	ldr	r1, [pc, #8]	; (120e8 <_cleanup_r+0xc>)
   120e0:	f000 f8b2 	bl	12248 <_fwalk_reent>
   120e4:	bd10      	pop	{r4, pc}
   120e6:	46c0      	nop			; (mov r8, r8)
   120e8:	00012085 	.word	0x00012085

000120ec <std.isra.0>:
   120ec:	2300      	movs	r3, #0
   120ee:	b510      	push	{r4, lr}
   120f0:	0004      	movs	r4, r0
   120f2:	6003      	str	r3, [r0, #0]
   120f4:	6043      	str	r3, [r0, #4]
   120f6:	6083      	str	r3, [r0, #8]
   120f8:	8181      	strh	r1, [r0, #12]
   120fa:	6643      	str	r3, [r0, #100]	; 0x64
   120fc:	81c2      	strh	r2, [r0, #14]
   120fe:	6103      	str	r3, [r0, #16]
   12100:	6143      	str	r3, [r0, #20]
   12102:	6183      	str	r3, [r0, #24]
   12104:	0019      	movs	r1, r3
   12106:	2208      	movs	r2, #8
   12108:	305c      	adds	r0, #92	; 0x5c
   1210a:	f7ff fafc 	bl	11706 <memset>
   1210e:	4b05      	ldr	r3, [pc, #20]	; (12124 <std.isra.0+0x38>)
   12110:	6224      	str	r4, [r4, #32]
   12112:	6263      	str	r3, [r4, #36]	; 0x24
   12114:	4b04      	ldr	r3, [pc, #16]	; (12128 <std.isra.0+0x3c>)
   12116:	62a3      	str	r3, [r4, #40]	; 0x28
   12118:	4b04      	ldr	r3, [pc, #16]	; (1212c <std.isra.0+0x40>)
   1211a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1211c:	4b04      	ldr	r3, [pc, #16]	; (12130 <std.isra.0+0x44>)
   1211e:	6323      	str	r3, [r4, #48]	; 0x30
   12120:	bd10      	pop	{r4, pc}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	00012c55 	.word	0x00012c55
   12128:	00012c7d 	.word	0x00012c7d
   1212c:	00012cb5 	.word	0x00012cb5
   12130:	00012ce1 	.word	0x00012ce1

00012134 <__sfmoreglue>:
   12134:	b570      	push	{r4, r5, r6, lr}
   12136:	2568      	movs	r5, #104	; 0x68
   12138:	1e4a      	subs	r2, r1, #1
   1213a:	4355      	muls	r5, r2
   1213c:	000e      	movs	r6, r1
   1213e:	0029      	movs	r1, r5
   12140:	3174      	adds	r1, #116	; 0x74
   12142:	f7ff fb33 	bl	117ac <_malloc_r>
   12146:	1e04      	subs	r4, r0, #0
   12148:	d008      	beq.n	1215c <__sfmoreglue+0x28>
   1214a:	2100      	movs	r1, #0
   1214c:	002a      	movs	r2, r5
   1214e:	6001      	str	r1, [r0, #0]
   12150:	6046      	str	r6, [r0, #4]
   12152:	300c      	adds	r0, #12
   12154:	60a0      	str	r0, [r4, #8]
   12156:	3268      	adds	r2, #104	; 0x68
   12158:	f7ff fad5 	bl	11706 <memset>
   1215c:	0020      	movs	r0, r4
   1215e:	bd70      	pop	{r4, r5, r6, pc}

00012160 <__sinit>:
   12160:	6983      	ldr	r3, [r0, #24]
   12162:	b513      	push	{r0, r1, r4, lr}
   12164:	0004      	movs	r4, r0
   12166:	2b00      	cmp	r3, #0
   12168:	d128      	bne.n	121bc <__sinit+0x5c>
   1216a:	6483      	str	r3, [r0, #72]	; 0x48
   1216c:	64c3      	str	r3, [r0, #76]	; 0x4c
   1216e:	6503      	str	r3, [r0, #80]	; 0x50
   12170:	4b13      	ldr	r3, [pc, #76]	; (121c0 <__sinit+0x60>)
   12172:	4a14      	ldr	r2, [pc, #80]	; (121c4 <__sinit+0x64>)
   12174:	681b      	ldr	r3, [r3, #0]
   12176:	6282      	str	r2, [r0, #40]	; 0x28
   12178:	9301      	str	r3, [sp, #4]
   1217a:	4298      	cmp	r0, r3
   1217c:	d101      	bne.n	12182 <__sinit+0x22>
   1217e:	2301      	movs	r3, #1
   12180:	6183      	str	r3, [r0, #24]
   12182:	0020      	movs	r0, r4
   12184:	f000 f820 	bl	121c8 <__sfp>
   12188:	6060      	str	r0, [r4, #4]
   1218a:	0020      	movs	r0, r4
   1218c:	f000 f81c 	bl	121c8 <__sfp>
   12190:	60a0      	str	r0, [r4, #8]
   12192:	0020      	movs	r0, r4
   12194:	f000 f818 	bl	121c8 <__sfp>
   12198:	2200      	movs	r2, #0
   1219a:	60e0      	str	r0, [r4, #12]
   1219c:	2104      	movs	r1, #4
   1219e:	6860      	ldr	r0, [r4, #4]
   121a0:	f7ff ffa4 	bl	120ec <std.isra.0>
   121a4:	2201      	movs	r2, #1
   121a6:	2109      	movs	r1, #9
   121a8:	68a0      	ldr	r0, [r4, #8]
   121aa:	f7ff ff9f 	bl	120ec <std.isra.0>
   121ae:	2202      	movs	r2, #2
   121b0:	2112      	movs	r1, #18
   121b2:	68e0      	ldr	r0, [r4, #12]
   121b4:	f7ff ff9a 	bl	120ec <std.isra.0>
   121b8:	2301      	movs	r3, #1
   121ba:	61a3      	str	r3, [r4, #24]
   121bc:	bd13      	pop	{r0, r1, r4, pc}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	000148d0 	.word	0x000148d0
   121c4:	000120dd 	.word	0x000120dd

000121c8 <__sfp>:
   121c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   121ca:	4b1e      	ldr	r3, [pc, #120]	; (12244 <__sfp+0x7c>)
   121cc:	0007      	movs	r7, r0
   121ce:	681e      	ldr	r6, [r3, #0]
   121d0:	69b3      	ldr	r3, [r6, #24]
   121d2:	2b00      	cmp	r3, #0
   121d4:	d102      	bne.n	121dc <__sfp+0x14>
   121d6:	0030      	movs	r0, r6
   121d8:	f7ff ffc2 	bl	12160 <__sinit>
   121dc:	3648      	adds	r6, #72	; 0x48
   121de:	68b4      	ldr	r4, [r6, #8]
   121e0:	6873      	ldr	r3, [r6, #4]
   121e2:	3b01      	subs	r3, #1
   121e4:	d504      	bpl.n	121f0 <__sfp+0x28>
   121e6:	6833      	ldr	r3, [r6, #0]
   121e8:	2b00      	cmp	r3, #0
   121ea:	d007      	beq.n	121fc <__sfp+0x34>
   121ec:	6836      	ldr	r6, [r6, #0]
   121ee:	e7f6      	b.n	121de <__sfp+0x16>
   121f0:	220c      	movs	r2, #12
   121f2:	5ea5      	ldrsh	r5, [r4, r2]
   121f4:	2d00      	cmp	r5, #0
   121f6:	d00d      	beq.n	12214 <__sfp+0x4c>
   121f8:	3468      	adds	r4, #104	; 0x68
   121fa:	e7f2      	b.n	121e2 <__sfp+0x1a>
   121fc:	2104      	movs	r1, #4
   121fe:	0038      	movs	r0, r7
   12200:	f7ff ff98 	bl	12134 <__sfmoreglue>
   12204:	6030      	str	r0, [r6, #0]
   12206:	2800      	cmp	r0, #0
   12208:	d1f0      	bne.n	121ec <__sfp+0x24>
   1220a:	230c      	movs	r3, #12
   1220c:	0004      	movs	r4, r0
   1220e:	603b      	str	r3, [r7, #0]
   12210:	0020      	movs	r0, r4
   12212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12214:	2301      	movs	r3, #1
   12216:	0020      	movs	r0, r4
   12218:	425b      	negs	r3, r3
   1221a:	81e3      	strh	r3, [r4, #14]
   1221c:	3302      	adds	r3, #2
   1221e:	81a3      	strh	r3, [r4, #12]
   12220:	6665      	str	r5, [r4, #100]	; 0x64
   12222:	6025      	str	r5, [r4, #0]
   12224:	60a5      	str	r5, [r4, #8]
   12226:	6065      	str	r5, [r4, #4]
   12228:	6125      	str	r5, [r4, #16]
   1222a:	6165      	str	r5, [r4, #20]
   1222c:	61a5      	str	r5, [r4, #24]
   1222e:	2208      	movs	r2, #8
   12230:	0029      	movs	r1, r5
   12232:	305c      	adds	r0, #92	; 0x5c
   12234:	f7ff fa67 	bl	11706 <memset>
   12238:	6365      	str	r5, [r4, #52]	; 0x34
   1223a:	63a5      	str	r5, [r4, #56]	; 0x38
   1223c:	64a5      	str	r5, [r4, #72]	; 0x48
   1223e:	64e5      	str	r5, [r4, #76]	; 0x4c
   12240:	e7e6      	b.n	12210 <__sfp+0x48>
   12242:	46c0      	nop			; (mov r8, r8)
   12244:	000148d0 	.word	0x000148d0

00012248 <_fwalk_reent>:
   12248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1224a:	0004      	movs	r4, r0
   1224c:	0007      	movs	r7, r0
   1224e:	2600      	movs	r6, #0
   12250:	9101      	str	r1, [sp, #4]
   12252:	3448      	adds	r4, #72	; 0x48
   12254:	2c00      	cmp	r4, #0
   12256:	d101      	bne.n	1225c <_fwalk_reent+0x14>
   12258:	0030      	movs	r0, r6
   1225a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1225c:	6863      	ldr	r3, [r4, #4]
   1225e:	68a5      	ldr	r5, [r4, #8]
   12260:	9300      	str	r3, [sp, #0]
   12262:	9b00      	ldr	r3, [sp, #0]
   12264:	3b01      	subs	r3, #1
   12266:	9300      	str	r3, [sp, #0]
   12268:	d501      	bpl.n	1226e <_fwalk_reent+0x26>
   1226a:	6824      	ldr	r4, [r4, #0]
   1226c:	e7f2      	b.n	12254 <_fwalk_reent+0xc>
   1226e:	89ab      	ldrh	r3, [r5, #12]
   12270:	2b01      	cmp	r3, #1
   12272:	d908      	bls.n	12286 <_fwalk_reent+0x3e>
   12274:	220e      	movs	r2, #14
   12276:	5eab      	ldrsh	r3, [r5, r2]
   12278:	3301      	adds	r3, #1
   1227a:	d004      	beq.n	12286 <_fwalk_reent+0x3e>
   1227c:	0029      	movs	r1, r5
   1227e:	0038      	movs	r0, r7
   12280:	9b01      	ldr	r3, [sp, #4]
   12282:	4798      	blx	r3
   12284:	4306      	orrs	r6, r0
   12286:	3568      	adds	r5, #104	; 0x68
   12288:	e7eb      	b.n	12262 <_fwalk_reent+0x1a>

0001228a <__locale_ctype_ptr_l>:
   1228a:	30ec      	adds	r0, #236	; 0xec
   1228c:	6800      	ldr	r0, [r0, #0]
   1228e:	4770      	bx	lr

00012290 <__swhatbuf_r>:
   12290:	b570      	push	{r4, r5, r6, lr}
   12292:	000e      	movs	r6, r1
   12294:	001d      	movs	r5, r3
   12296:	230e      	movs	r3, #14
   12298:	5ec9      	ldrsh	r1, [r1, r3]
   1229a:	b090      	sub	sp, #64	; 0x40
   1229c:	0014      	movs	r4, r2
   1229e:	2900      	cmp	r1, #0
   122a0:	da07      	bge.n	122b2 <__swhatbuf_r+0x22>
   122a2:	2300      	movs	r3, #0
   122a4:	602b      	str	r3, [r5, #0]
   122a6:	89b3      	ldrh	r3, [r6, #12]
   122a8:	061b      	lsls	r3, r3, #24
   122aa:	d411      	bmi.n	122d0 <__swhatbuf_r+0x40>
   122ac:	2380      	movs	r3, #128	; 0x80
   122ae:	00db      	lsls	r3, r3, #3
   122b0:	e00f      	b.n	122d2 <__swhatbuf_r+0x42>
   122b2:	aa01      	add	r2, sp, #4
   122b4:	f000 fd4c 	bl	12d50 <_fstat_r>
   122b8:	2800      	cmp	r0, #0
   122ba:	dbf2      	blt.n	122a2 <__swhatbuf_r+0x12>
   122bc:	22f0      	movs	r2, #240	; 0xf0
   122be:	9b02      	ldr	r3, [sp, #8]
   122c0:	0212      	lsls	r2, r2, #8
   122c2:	4013      	ands	r3, r2
   122c4:	4a05      	ldr	r2, [pc, #20]	; (122dc <__swhatbuf_r+0x4c>)
   122c6:	189b      	adds	r3, r3, r2
   122c8:	425a      	negs	r2, r3
   122ca:	4153      	adcs	r3, r2
   122cc:	602b      	str	r3, [r5, #0]
   122ce:	e7ed      	b.n	122ac <__swhatbuf_r+0x1c>
   122d0:	2340      	movs	r3, #64	; 0x40
   122d2:	2000      	movs	r0, #0
   122d4:	6023      	str	r3, [r4, #0]
   122d6:	b010      	add	sp, #64	; 0x40
   122d8:	bd70      	pop	{r4, r5, r6, pc}
   122da:	46c0      	nop			; (mov r8, r8)
   122dc:	ffffe000 	.word	0xffffe000

000122e0 <__smakebuf_r>:
   122e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   122e2:	2602      	movs	r6, #2
   122e4:	898b      	ldrh	r3, [r1, #12]
   122e6:	0005      	movs	r5, r0
   122e8:	000c      	movs	r4, r1
   122ea:	4233      	tst	r3, r6
   122ec:	d006      	beq.n	122fc <__smakebuf_r+0x1c>
   122ee:	0023      	movs	r3, r4
   122f0:	3347      	adds	r3, #71	; 0x47
   122f2:	6023      	str	r3, [r4, #0]
   122f4:	6123      	str	r3, [r4, #16]
   122f6:	2301      	movs	r3, #1
   122f8:	6163      	str	r3, [r4, #20]
   122fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   122fc:	ab01      	add	r3, sp, #4
   122fe:	466a      	mov	r2, sp
   12300:	f7ff ffc6 	bl	12290 <__swhatbuf_r>
   12304:	9900      	ldr	r1, [sp, #0]
   12306:	0007      	movs	r7, r0
   12308:	0028      	movs	r0, r5
   1230a:	f7ff fa4f 	bl	117ac <_malloc_r>
   1230e:	2800      	cmp	r0, #0
   12310:	d106      	bne.n	12320 <__smakebuf_r+0x40>
   12312:	220c      	movs	r2, #12
   12314:	5ea3      	ldrsh	r3, [r4, r2]
   12316:	059a      	lsls	r2, r3, #22
   12318:	d4ef      	bmi.n	122fa <__smakebuf_r+0x1a>
   1231a:	431e      	orrs	r6, r3
   1231c:	81a6      	strh	r6, [r4, #12]
   1231e:	e7e6      	b.n	122ee <__smakebuf_r+0xe>
   12320:	4b0d      	ldr	r3, [pc, #52]	; (12358 <__smakebuf_r+0x78>)
   12322:	62ab      	str	r3, [r5, #40]	; 0x28
   12324:	2380      	movs	r3, #128	; 0x80
   12326:	89a2      	ldrh	r2, [r4, #12]
   12328:	6020      	str	r0, [r4, #0]
   1232a:	4313      	orrs	r3, r2
   1232c:	81a3      	strh	r3, [r4, #12]
   1232e:	9b00      	ldr	r3, [sp, #0]
   12330:	6120      	str	r0, [r4, #16]
   12332:	6163      	str	r3, [r4, #20]
   12334:	9b01      	ldr	r3, [sp, #4]
   12336:	2b00      	cmp	r3, #0
   12338:	d00a      	beq.n	12350 <__smakebuf_r+0x70>
   1233a:	230e      	movs	r3, #14
   1233c:	5ee1      	ldrsh	r1, [r4, r3]
   1233e:	0028      	movs	r0, r5
   12340:	f000 fd18 	bl	12d74 <_isatty_r>
   12344:	2800      	cmp	r0, #0
   12346:	d003      	beq.n	12350 <__smakebuf_r+0x70>
   12348:	2301      	movs	r3, #1
   1234a:	89a2      	ldrh	r2, [r4, #12]
   1234c:	4313      	orrs	r3, r2
   1234e:	81a3      	strh	r3, [r4, #12]
   12350:	89a0      	ldrh	r0, [r4, #12]
   12352:	4338      	orrs	r0, r7
   12354:	81a0      	strh	r0, [r4, #12]
   12356:	e7d0      	b.n	122fa <__smakebuf_r+0x1a>
   12358:	000120dd 	.word	0x000120dd

0001235c <__ascii_mbtowc>:
   1235c:	b082      	sub	sp, #8
   1235e:	2900      	cmp	r1, #0
   12360:	d100      	bne.n	12364 <__ascii_mbtowc+0x8>
   12362:	a901      	add	r1, sp, #4
   12364:	1e10      	subs	r0, r2, #0
   12366:	d006      	beq.n	12376 <__ascii_mbtowc+0x1a>
   12368:	2b00      	cmp	r3, #0
   1236a:	d006      	beq.n	1237a <__ascii_mbtowc+0x1e>
   1236c:	7813      	ldrb	r3, [r2, #0]
   1236e:	600b      	str	r3, [r1, #0]
   12370:	7810      	ldrb	r0, [r2, #0]
   12372:	1e43      	subs	r3, r0, #1
   12374:	4198      	sbcs	r0, r3
   12376:	b002      	add	sp, #8
   12378:	4770      	bx	lr
   1237a:	2002      	movs	r0, #2
   1237c:	4240      	negs	r0, r0
   1237e:	e7fa      	b.n	12376 <__ascii_mbtowc+0x1a>

00012380 <__malloc_lock>:
   12380:	4770      	bx	lr

00012382 <__malloc_unlock>:
   12382:	4770      	bx	lr

00012384 <__ssputs_r>:
   12384:	b5f0      	push	{r4, r5, r6, r7, lr}
   12386:	688e      	ldr	r6, [r1, #8]
   12388:	b085      	sub	sp, #20
   1238a:	0007      	movs	r7, r0
   1238c:	000c      	movs	r4, r1
   1238e:	9203      	str	r2, [sp, #12]
   12390:	9301      	str	r3, [sp, #4]
   12392:	429e      	cmp	r6, r3
   12394:	d839      	bhi.n	1240a <__ssputs_r+0x86>
   12396:	2390      	movs	r3, #144	; 0x90
   12398:	898a      	ldrh	r2, [r1, #12]
   1239a:	00db      	lsls	r3, r3, #3
   1239c:	421a      	tst	r2, r3
   1239e:	d034      	beq.n	1240a <__ssputs_r+0x86>
   123a0:	2503      	movs	r5, #3
   123a2:	6909      	ldr	r1, [r1, #16]
   123a4:	6823      	ldr	r3, [r4, #0]
   123a6:	1a5b      	subs	r3, r3, r1
   123a8:	9302      	str	r3, [sp, #8]
   123aa:	6963      	ldr	r3, [r4, #20]
   123ac:	9802      	ldr	r0, [sp, #8]
   123ae:	435d      	muls	r5, r3
   123b0:	0feb      	lsrs	r3, r5, #31
   123b2:	195d      	adds	r5, r3, r5
   123b4:	9b01      	ldr	r3, [sp, #4]
   123b6:	106d      	asrs	r5, r5, #1
   123b8:	3301      	adds	r3, #1
   123ba:	181b      	adds	r3, r3, r0
   123bc:	42ab      	cmp	r3, r5
   123be:	d900      	bls.n	123c2 <__ssputs_r+0x3e>
   123c0:	001d      	movs	r5, r3
   123c2:	0553      	lsls	r3, r2, #21
   123c4:	d532      	bpl.n	1242c <__ssputs_r+0xa8>
   123c6:	0029      	movs	r1, r5
   123c8:	0038      	movs	r0, r7
   123ca:	f7ff f9ef 	bl	117ac <_malloc_r>
   123ce:	1e06      	subs	r6, r0, #0
   123d0:	d109      	bne.n	123e6 <__ssputs_r+0x62>
   123d2:	230c      	movs	r3, #12
   123d4:	603b      	str	r3, [r7, #0]
   123d6:	2340      	movs	r3, #64	; 0x40
   123d8:	2001      	movs	r0, #1
   123da:	89a2      	ldrh	r2, [r4, #12]
   123dc:	4240      	negs	r0, r0
   123de:	4313      	orrs	r3, r2
   123e0:	81a3      	strh	r3, [r4, #12]
   123e2:	b005      	add	sp, #20
   123e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   123e6:	9a02      	ldr	r2, [sp, #8]
   123e8:	6921      	ldr	r1, [r4, #16]
   123ea:	f7ff f971 	bl	116d0 <memcpy>
   123ee:	89a3      	ldrh	r3, [r4, #12]
   123f0:	4a14      	ldr	r2, [pc, #80]	; (12444 <__ssputs_r+0xc0>)
   123f2:	401a      	ands	r2, r3
   123f4:	2380      	movs	r3, #128	; 0x80
   123f6:	4313      	orrs	r3, r2
   123f8:	81a3      	strh	r3, [r4, #12]
   123fa:	9b02      	ldr	r3, [sp, #8]
   123fc:	6126      	str	r6, [r4, #16]
   123fe:	18f6      	adds	r6, r6, r3
   12400:	6026      	str	r6, [r4, #0]
   12402:	6165      	str	r5, [r4, #20]
   12404:	9e01      	ldr	r6, [sp, #4]
   12406:	1aed      	subs	r5, r5, r3
   12408:	60a5      	str	r5, [r4, #8]
   1240a:	9b01      	ldr	r3, [sp, #4]
   1240c:	42b3      	cmp	r3, r6
   1240e:	d200      	bcs.n	12412 <__ssputs_r+0x8e>
   12410:	001e      	movs	r6, r3
   12412:	0032      	movs	r2, r6
   12414:	9903      	ldr	r1, [sp, #12]
   12416:	6820      	ldr	r0, [r4, #0]
   12418:	f7ff f963 	bl	116e2 <memmove>
   1241c:	68a3      	ldr	r3, [r4, #8]
   1241e:	2000      	movs	r0, #0
   12420:	1b9b      	subs	r3, r3, r6
   12422:	60a3      	str	r3, [r4, #8]
   12424:	6823      	ldr	r3, [r4, #0]
   12426:	199e      	adds	r6, r3, r6
   12428:	6026      	str	r6, [r4, #0]
   1242a:	e7da      	b.n	123e2 <__ssputs_r+0x5e>
   1242c:	002a      	movs	r2, r5
   1242e:	0038      	movs	r0, r7
   12430:	f000 fcd1 	bl	12dd6 <_realloc_r>
   12434:	1e06      	subs	r6, r0, #0
   12436:	d1e0      	bne.n	123fa <__ssputs_r+0x76>
   12438:	6921      	ldr	r1, [r4, #16]
   1243a:	0038      	movs	r0, r7
   1243c:	f7ff f96c 	bl	11718 <_free_r>
   12440:	e7c7      	b.n	123d2 <__ssputs_r+0x4e>
   12442:	46c0      	nop			; (mov r8, r8)
   12444:	fffffb7f 	.word	0xfffffb7f

00012448 <_svfiprintf_r>:
   12448:	b5f0      	push	{r4, r5, r6, r7, lr}
   1244a:	b09f      	sub	sp, #124	; 0x7c
   1244c:	9002      	str	r0, [sp, #8]
   1244e:	9305      	str	r3, [sp, #20]
   12450:	898b      	ldrh	r3, [r1, #12]
   12452:	000f      	movs	r7, r1
   12454:	0016      	movs	r6, r2
   12456:	061b      	lsls	r3, r3, #24
   12458:	d511      	bpl.n	1247e <_svfiprintf_r+0x36>
   1245a:	690b      	ldr	r3, [r1, #16]
   1245c:	2b00      	cmp	r3, #0
   1245e:	d10e      	bne.n	1247e <_svfiprintf_r+0x36>
   12460:	2140      	movs	r1, #64	; 0x40
   12462:	f7ff f9a3 	bl	117ac <_malloc_r>
   12466:	6038      	str	r0, [r7, #0]
   12468:	6138      	str	r0, [r7, #16]
   1246a:	2800      	cmp	r0, #0
   1246c:	d105      	bne.n	1247a <_svfiprintf_r+0x32>
   1246e:	230c      	movs	r3, #12
   12470:	9a02      	ldr	r2, [sp, #8]
   12472:	3801      	subs	r0, #1
   12474:	6013      	str	r3, [r2, #0]
   12476:	b01f      	add	sp, #124	; 0x7c
   12478:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1247a:	2340      	movs	r3, #64	; 0x40
   1247c:	617b      	str	r3, [r7, #20]
   1247e:	2300      	movs	r3, #0
   12480:	ad06      	add	r5, sp, #24
   12482:	616b      	str	r3, [r5, #20]
   12484:	3320      	adds	r3, #32
   12486:	766b      	strb	r3, [r5, #25]
   12488:	3310      	adds	r3, #16
   1248a:	76ab      	strb	r3, [r5, #26]
   1248c:	0034      	movs	r4, r6
   1248e:	7823      	ldrb	r3, [r4, #0]
   12490:	2b00      	cmp	r3, #0
   12492:	d147      	bne.n	12524 <_svfiprintf_r+0xdc>
   12494:	1ba3      	subs	r3, r4, r6
   12496:	9304      	str	r3, [sp, #16]
   12498:	d00d      	beq.n	124b6 <_svfiprintf_r+0x6e>
   1249a:	1ba3      	subs	r3, r4, r6
   1249c:	0032      	movs	r2, r6
   1249e:	0039      	movs	r1, r7
   124a0:	9802      	ldr	r0, [sp, #8]
   124a2:	f7ff ff6f 	bl	12384 <__ssputs_r>
   124a6:	1c43      	adds	r3, r0, #1
   124a8:	d100      	bne.n	124ac <_svfiprintf_r+0x64>
   124aa:	e0b5      	b.n	12618 <_svfiprintf_r+0x1d0>
   124ac:	696a      	ldr	r2, [r5, #20]
   124ae:	9b04      	ldr	r3, [sp, #16]
   124b0:	4694      	mov	ip, r2
   124b2:	4463      	add	r3, ip
   124b4:	616b      	str	r3, [r5, #20]
   124b6:	7823      	ldrb	r3, [r4, #0]
   124b8:	2b00      	cmp	r3, #0
   124ba:	d100      	bne.n	124be <_svfiprintf_r+0x76>
   124bc:	e0ac      	b.n	12618 <_svfiprintf_r+0x1d0>
   124be:	2201      	movs	r2, #1
   124c0:	2300      	movs	r3, #0
   124c2:	4252      	negs	r2, r2
   124c4:	606a      	str	r2, [r5, #4]
   124c6:	a902      	add	r1, sp, #8
   124c8:	3254      	adds	r2, #84	; 0x54
   124ca:	1852      	adds	r2, r2, r1
   124cc:	3401      	adds	r4, #1
   124ce:	602b      	str	r3, [r5, #0]
   124d0:	60eb      	str	r3, [r5, #12]
   124d2:	60ab      	str	r3, [r5, #8]
   124d4:	7013      	strb	r3, [r2, #0]
   124d6:	65ab      	str	r3, [r5, #88]	; 0x58
   124d8:	4e58      	ldr	r6, [pc, #352]	; (1263c <_svfiprintf_r+0x1f4>)
   124da:	2205      	movs	r2, #5
   124dc:	7821      	ldrb	r1, [r4, #0]
   124de:	0030      	movs	r0, r6
   124e0:	f000 fc6e 	bl	12dc0 <memchr>
   124e4:	1c62      	adds	r2, r4, #1
   124e6:	2800      	cmp	r0, #0
   124e8:	d120      	bne.n	1252c <_svfiprintf_r+0xe4>
   124ea:	6829      	ldr	r1, [r5, #0]
   124ec:	06cb      	lsls	r3, r1, #27
   124ee:	d504      	bpl.n	124fa <_svfiprintf_r+0xb2>
   124f0:	2353      	movs	r3, #83	; 0x53
   124f2:	ae02      	add	r6, sp, #8
   124f4:	3020      	adds	r0, #32
   124f6:	199b      	adds	r3, r3, r6
   124f8:	7018      	strb	r0, [r3, #0]
   124fa:	070b      	lsls	r3, r1, #28
   124fc:	d504      	bpl.n	12508 <_svfiprintf_r+0xc0>
   124fe:	2353      	movs	r3, #83	; 0x53
   12500:	202b      	movs	r0, #43	; 0x2b
   12502:	ae02      	add	r6, sp, #8
   12504:	199b      	adds	r3, r3, r6
   12506:	7018      	strb	r0, [r3, #0]
   12508:	7823      	ldrb	r3, [r4, #0]
   1250a:	2b2a      	cmp	r3, #42	; 0x2a
   1250c:	d016      	beq.n	1253c <_svfiprintf_r+0xf4>
   1250e:	2000      	movs	r0, #0
   12510:	210a      	movs	r1, #10
   12512:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12514:	7822      	ldrb	r2, [r4, #0]
   12516:	3a30      	subs	r2, #48	; 0x30
   12518:	2a09      	cmp	r2, #9
   1251a:	d955      	bls.n	125c8 <_svfiprintf_r+0x180>
   1251c:	2800      	cmp	r0, #0
   1251e:	d015      	beq.n	1254c <_svfiprintf_r+0x104>
   12520:	9309      	str	r3, [sp, #36]	; 0x24
   12522:	e013      	b.n	1254c <_svfiprintf_r+0x104>
   12524:	2b25      	cmp	r3, #37	; 0x25
   12526:	d0b5      	beq.n	12494 <_svfiprintf_r+0x4c>
   12528:	3401      	adds	r4, #1
   1252a:	e7b0      	b.n	1248e <_svfiprintf_r+0x46>
   1252c:	2301      	movs	r3, #1
   1252e:	1b80      	subs	r0, r0, r6
   12530:	4083      	lsls	r3, r0
   12532:	6829      	ldr	r1, [r5, #0]
   12534:	0014      	movs	r4, r2
   12536:	430b      	orrs	r3, r1
   12538:	602b      	str	r3, [r5, #0]
   1253a:	e7cd      	b.n	124d8 <_svfiprintf_r+0x90>
   1253c:	9b05      	ldr	r3, [sp, #20]
   1253e:	1d18      	adds	r0, r3, #4
   12540:	681b      	ldr	r3, [r3, #0]
   12542:	9005      	str	r0, [sp, #20]
   12544:	2b00      	cmp	r3, #0
   12546:	db39      	blt.n	125bc <_svfiprintf_r+0x174>
   12548:	9309      	str	r3, [sp, #36]	; 0x24
   1254a:	0014      	movs	r4, r2
   1254c:	7823      	ldrb	r3, [r4, #0]
   1254e:	2b2e      	cmp	r3, #46	; 0x2e
   12550:	d10b      	bne.n	1256a <_svfiprintf_r+0x122>
   12552:	7863      	ldrb	r3, [r4, #1]
   12554:	1c62      	adds	r2, r4, #1
   12556:	2b2a      	cmp	r3, #42	; 0x2a
   12558:	d13e      	bne.n	125d8 <_svfiprintf_r+0x190>
   1255a:	9b05      	ldr	r3, [sp, #20]
   1255c:	3402      	adds	r4, #2
   1255e:	1d1a      	adds	r2, r3, #4
   12560:	681b      	ldr	r3, [r3, #0]
   12562:	9205      	str	r2, [sp, #20]
   12564:	2b00      	cmp	r3, #0
   12566:	db34      	blt.n	125d2 <_svfiprintf_r+0x18a>
   12568:	9307      	str	r3, [sp, #28]
   1256a:	4e35      	ldr	r6, [pc, #212]	; (12640 <_svfiprintf_r+0x1f8>)
   1256c:	7821      	ldrb	r1, [r4, #0]
   1256e:	2203      	movs	r2, #3
   12570:	0030      	movs	r0, r6
   12572:	f000 fc25 	bl	12dc0 <memchr>
   12576:	2800      	cmp	r0, #0
   12578:	d006      	beq.n	12588 <_svfiprintf_r+0x140>
   1257a:	2340      	movs	r3, #64	; 0x40
   1257c:	1b80      	subs	r0, r0, r6
   1257e:	4083      	lsls	r3, r0
   12580:	682a      	ldr	r2, [r5, #0]
   12582:	3401      	adds	r4, #1
   12584:	4313      	orrs	r3, r2
   12586:	602b      	str	r3, [r5, #0]
   12588:	7821      	ldrb	r1, [r4, #0]
   1258a:	2206      	movs	r2, #6
   1258c:	482d      	ldr	r0, [pc, #180]	; (12644 <_svfiprintf_r+0x1fc>)
   1258e:	1c66      	adds	r6, r4, #1
   12590:	7629      	strb	r1, [r5, #24]
   12592:	f000 fc15 	bl	12dc0 <memchr>
   12596:	2800      	cmp	r0, #0
   12598:	d046      	beq.n	12628 <_svfiprintf_r+0x1e0>
   1259a:	4b2b      	ldr	r3, [pc, #172]	; (12648 <_svfiprintf_r+0x200>)
   1259c:	2b00      	cmp	r3, #0
   1259e:	d12f      	bne.n	12600 <_svfiprintf_r+0x1b8>
   125a0:	6829      	ldr	r1, [r5, #0]
   125a2:	9b05      	ldr	r3, [sp, #20]
   125a4:	2207      	movs	r2, #7
   125a6:	05c9      	lsls	r1, r1, #23
   125a8:	d528      	bpl.n	125fc <_svfiprintf_r+0x1b4>
   125aa:	189b      	adds	r3, r3, r2
   125ac:	4393      	bics	r3, r2
   125ae:	3308      	adds	r3, #8
   125b0:	9305      	str	r3, [sp, #20]
   125b2:	696b      	ldr	r3, [r5, #20]
   125b4:	9a03      	ldr	r2, [sp, #12]
   125b6:	189b      	adds	r3, r3, r2
   125b8:	616b      	str	r3, [r5, #20]
   125ba:	e767      	b.n	1248c <_svfiprintf_r+0x44>
   125bc:	425b      	negs	r3, r3
   125be:	60eb      	str	r3, [r5, #12]
   125c0:	2302      	movs	r3, #2
   125c2:	430b      	orrs	r3, r1
   125c4:	602b      	str	r3, [r5, #0]
   125c6:	e7c0      	b.n	1254a <_svfiprintf_r+0x102>
   125c8:	434b      	muls	r3, r1
   125ca:	3401      	adds	r4, #1
   125cc:	189b      	adds	r3, r3, r2
   125ce:	2001      	movs	r0, #1
   125d0:	e7a0      	b.n	12514 <_svfiprintf_r+0xcc>
   125d2:	2301      	movs	r3, #1
   125d4:	425b      	negs	r3, r3
   125d6:	e7c7      	b.n	12568 <_svfiprintf_r+0x120>
   125d8:	2300      	movs	r3, #0
   125da:	0014      	movs	r4, r2
   125dc:	200a      	movs	r0, #10
   125de:	001a      	movs	r2, r3
   125e0:	606b      	str	r3, [r5, #4]
   125e2:	7821      	ldrb	r1, [r4, #0]
   125e4:	3930      	subs	r1, #48	; 0x30
   125e6:	2909      	cmp	r1, #9
   125e8:	d903      	bls.n	125f2 <_svfiprintf_r+0x1aa>
   125ea:	2b00      	cmp	r3, #0
   125ec:	d0bd      	beq.n	1256a <_svfiprintf_r+0x122>
   125ee:	9207      	str	r2, [sp, #28]
   125f0:	e7bb      	b.n	1256a <_svfiprintf_r+0x122>
   125f2:	4342      	muls	r2, r0
   125f4:	3401      	adds	r4, #1
   125f6:	1852      	adds	r2, r2, r1
   125f8:	2301      	movs	r3, #1
   125fa:	e7f2      	b.n	125e2 <_svfiprintf_r+0x19a>
   125fc:	3307      	adds	r3, #7
   125fe:	e7d5      	b.n	125ac <_svfiprintf_r+0x164>
   12600:	ab05      	add	r3, sp, #20
   12602:	9300      	str	r3, [sp, #0]
   12604:	003a      	movs	r2, r7
   12606:	4b11      	ldr	r3, [pc, #68]	; (1264c <_svfiprintf_r+0x204>)
   12608:	0029      	movs	r1, r5
   1260a:	9802      	ldr	r0, [sp, #8]
   1260c:	e000      	b.n	12610 <_svfiprintf_r+0x1c8>
   1260e:	bf00      	nop
   12610:	9003      	str	r0, [sp, #12]
   12612:	9b03      	ldr	r3, [sp, #12]
   12614:	3301      	adds	r3, #1
   12616:	d1cc      	bne.n	125b2 <_svfiprintf_r+0x16a>
   12618:	89bb      	ldrh	r3, [r7, #12]
   1261a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1261c:	065b      	lsls	r3, r3, #25
   1261e:	d400      	bmi.n	12622 <_svfiprintf_r+0x1da>
   12620:	e729      	b.n	12476 <_svfiprintf_r+0x2e>
   12622:	2001      	movs	r0, #1
   12624:	4240      	negs	r0, r0
   12626:	e726      	b.n	12476 <_svfiprintf_r+0x2e>
   12628:	ab05      	add	r3, sp, #20
   1262a:	9300      	str	r3, [sp, #0]
   1262c:	003a      	movs	r2, r7
   1262e:	4b07      	ldr	r3, [pc, #28]	; (1264c <_svfiprintf_r+0x204>)
   12630:	0029      	movs	r1, r5
   12632:	9802      	ldr	r0, [sp, #8]
   12634:	f000 f9be 	bl	129b4 <_printf_i>
   12638:	e7ea      	b.n	12610 <_svfiprintf_r+0x1c8>
   1263a:	46c0      	nop			; (mov r8, r8)
   1263c:	0001493e 	.word	0x0001493e
   12640:	00014944 	.word	0x00014944
   12644:	00014948 	.word	0x00014948
   12648:	00000000 	.word	0x00000000
   1264c:	00012385 	.word	0x00012385

00012650 <__sfputc_r>:
   12650:	6893      	ldr	r3, [r2, #8]
   12652:	b510      	push	{r4, lr}
   12654:	3b01      	subs	r3, #1
   12656:	6093      	str	r3, [r2, #8]
   12658:	2b00      	cmp	r3, #0
   1265a:	da05      	bge.n	12668 <__sfputc_r+0x18>
   1265c:	6994      	ldr	r4, [r2, #24]
   1265e:	42a3      	cmp	r3, r4
   12660:	db08      	blt.n	12674 <__sfputc_r+0x24>
   12662:	b2cb      	uxtb	r3, r1
   12664:	2b0a      	cmp	r3, #10
   12666:	d005      	beq.n	12674 <__sfputc_r+0x24>
   12668:	6813      	ldr	r3, [r2, #0]
   1266a:	1c58      	adds	r0, r3, #1
   1266c:	6010      	str	r0, [r2, #0]
   1266e:	7019      	strb	r1, [r3, #0]
   12670:	b2c8      	uxtb	r0, r1
   12672:	bd10      	pop	{r4, pc}
   12674:	f7ff fbb0 	bl	11dd8 <__swbuf_r>
   12678:	e7fb      	b.n	12672 <__sfputc_r+0x22>

0001267a <__sfputs_r>:
   1267a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1267c:	0006      	movs	r6, r0
   1267e:	000f      	movs	r7, r1
   12680:	0014      	movs	r4, r2
   12682:	18d5      	adds	r5, r2, r3
   12684:	42ac      	cmp	r4, r5
   12686:	d101      	bne.n	1268c <__sfputs_r+0x12>
   12688:	2000      	movs	r0, #0
   1268a:	e007      	b.n	1269c <__sfputs_r+0x22>
   1268c:	7821      	ldrb	r1, [r4, #0]
   1268e:	003a      	movs	r2, r7
   12690:	0030      	movs	r0, r6
   12692:	f7ff ffdd 	bl	12650 <__sfputc_r>
   12696:	3401      	adds	r4, #1
   12698:	1c43      	adds	r3, r0, #1
   1269a:	d1f3      	bne.n	12684 <__sfputs_r+0xa>
   1269c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000126a0 <_vfiprintf_r>:
   126a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   126a2:	b09f      	sub	sp, #124	; 0x7c
   126a4:	0006      	movs	r6, r0
   126a6:	000f      	movs	r7, r1
   126a8:	0014      	movs	r4, r2
   126aa:	9305      	str	r3, [sp, #20]
   126ac:	2800      	cmp	r0, #0
   126ae:	d004      	beq.n	126ba <_vfiprintf_r+0x1a>
   126b0:	6983      	ldr	r3, [r0, #24]
   126b2:	2b00      	cmp	r3, #0
   126b4:	d101      	bne.n	126ba <_vfiprintf_r+0x1a>
   126b6:	f7ff fd53 	bl	12160 <__sinit>
   126ba:	4b7f      	ldr	r3, [pc, #508]	; (128b8 <_vfiprintf_r+0x218>)
   126bc:	429f      	cmp	r7, r3
   126be:	d15c      	bne.n	1277a <_vfiprintf_r+0xda>
   126c0:	6877      	ldr	r7, [r6, #4]
   126c2:	89bb      	ldrh	r3, [r7, #12]
   126c4:	071b      	lsls	r3, r3, #28
   126c6:	d562      	bpl.n	1278e <_vfiprintf_r+0xee>
   126c8:	693b      	ldr	r3, [r7, #16]
   126ca:	2b00      	cmp	r3, #0
   126cc:	d05f      	beq.n	1278e <_vfiprintf_r+0xee>
   126ce:	2300      	movs	r3, #0
   126d0:	ad06      	add	r5, sp, #24
   126d2:	616b      	str	r3, [r5, #20]
   126d4:	3320      	adds	r3, #32
   126d6:	766b      	strb	r3, [r5, #25]
   126d8:	3310      	adds	r3, #16
   126da:	76ab      	strb	r3, [r5, #26]
   126dc:	9402      	str	r4, [sp, #8]
   126de:	9c02      	ldr	r4, [sp, #8]
   126e0:	7823      	ldrb	r3, [r4, #0]
   126e2:	2b00      	cmp	r3, #0
   126e4:	d15d      	bne.n	127a2 <_vfiprintf_r+0x102>
   126e6:	9b02      	ldr	r3, [sp, #8]
   126e8:	1ae3      	subs	r3, r4, r3
   126ea:	9304      	str	r3, [sp, #16]
   126ec:	d00d      	beq.n	1270a <_vfiprintf_r+0x6a>
   126ee:	9b04      	ldr	r3, [sp, #16]
   126f0:	9a02      	ldr	r2, [sp, #8]
   126f2:	0039      	movs	r1, r7
   126f4:	0030      	movs	r0, r6
   126f6:	f7ff ffc0 	bl	1267a <__sfputs_r>
   126fa:	1c43      	adds	r3, r0, #1
   126fc:	d100      	bne.n	12700 <_vfiprintf_r+0x60>
   126fe:	e0cc      	b.n	1289a <_vfiprintf_r+0x1fa>
   12700:	696a      	ldr	r2, [r5, #20]
   12702:	9b04      	ldr	r3, [sp, #16]
   12704:	4694      	mov	ip, r2
   12706:	4463      	add	r3, ip
   12708:	616b      	str	r3, [r5, #20]
   1270a:	7823      	ldrb	r3, [r4, #0]
   1270c:	2b00      	cmp	r3, #0
   1270e:	d100      	bne.n	12712 <_vfiprintf_r+0x72>
   12710:	e0c3      	b.n	1289a <_vfiprintf_r+0x1fa>
   12712:	2201      	movs	r2, #1
   12714:	2300      	movs	r3, #0
   12716:	4252      	negs	r2, r2
   12718:	606a      	str	r2, [r5, #4]
   1271a:	a902      	add	r1, sp, #8
   1271c:	3254      	adds	r2, #84	; 0x54
   1271e:	1852      	adds	r2, r2, r1
   12720:	3401      	adds	r4, #1
   12722:	602b      	str	r3, [r5, #0]
   12724:	60eb      	str	r3, [r5, #12]
   12726:	60ab      	str	r3, [r5, #8]
   12728:	7013      	strb	r3, [r2, #0]
   1272a:	65ab      	str	r3, [r5, #88]	; 0x58
   1272c:	7821      	ldrb	r1, [r4, #0]
   1272e:	2205      	movs	r2, #5
   12730:	4862      	ldr	r0, [pc, #392]	; (128bc <_vfiprintf_r+0x21c>)
   12732:	f000 fb45 	bl	12dc0 <memchr>
   12736:	1c63      	adds	r3, r4, #1
   12738:	469c      	mov	ip, r3
   1273a:	2800      	cmp	r0, #0
   1273c:	d135      	bne.n	127aa <_vfiprintf_r+0x10a>
   1273e:	6829      	ldr	r1, [r5, #0]
   12740:	06cb      	lsls	r3, r1, #27
   12742:	d504      	bpl.n	1274e <_vfiprintf_r+0xae>
   12744:	2353      	movs	r3, #83	; 0x53
   12746:	aa02      	add	r2, sp, #8
   12748:	3020      	adds	r0, #32
   1274a:	189b      	adds	r3, r3, r2
   1274c:	7018      	strb	r0, [r3, #0]
   1274e:	070b      	lsls	r3, r1, #28
   12750:	d504      	bpl.n	1275c <_vfiprintf_r+0xbc>
   12752:	2353      	movs	r3, #83	; 0x53
   12754:	202b      	movs	r0, #43	; 0x2b
   12756:	aa02      	add	r2, sp, #8
   12758:	189b      	adds	r3, r3, r2
   1275a:	7018      	strb	r0, [r3, #0]
   1275c:	7823      	ldrb	r3, [r4, #0]
   1275e:	2b2a      	cmp	r3, #42	; 0x2a
   12760:	d02c      	beq.n	127bc <_vfiprintf_r+0x11c>
   12762:	2000      	movs	r0, #0
   12764:	210a      	movs	r1, #10
   12766:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12768:	7822      	ldrb	r2, [r4, #0]
   1276a:	3a30      	subs	r2, #48	; 0x30
   1276c:	2a09      	cmp	r2, #9
   1276e:	d800      	bhi.n	12772 <_vfiprintf_r+0xd2>
   12770:	e06b      	b.n	1284a <_vfiprintf_r+0x1aa>
   12772:	2800      	cmp	r0, #0
   12774:	d02a      	beq.n	127cc <_vfiprintf_r+0x12c>
   12776:	9309      	str	r3, [sp, #36]	; 0x24
   12778:	e028      	b.n	127cc <_vfiprintf_r+0x12c>
   1277a:	4b51      	ldr	r3, [pc, #324]	; (128c0 <_vfiprintf_r+0x220>)
   1277c:	429f      	cmp	r7, r3
   1277e:	d101      	bne.n	12784 <_vfiprintf_r+0xe4>
   12780:	68b7      	ldr	r7, [r6, #8]
   12782:	e79e      	b.n	126c2 <_vfiprintf_r+0x22>
   12784:	4b4f      	ldr	r3, [pc, #316]	; (128c4 <_vfiprintf_r+0x224>)
   12786:	429f      	cmp	r7, r3
   12788:	d19b      	bne.n	126c2 <_vfiprintf_r+0x22>
   1278a:	68f7      	ldr	r7, [r6, #12]
   1278c:	e799      	b.n	126c2 <_vfiprintf_r+0x22>
   1278e:	0039      	movs	r1, r7
   12790:	0030      	movs	r0, r6
   12792:	f7ff fb77 	bl	11e84 <__swsetup_r>
   12796:	2800      	cmp	r0, #0
   12798:	d099      	beq.n	126ce <_vfiprintf_r+0x2e>
   1279a:	2001      	movs	r0, #1
   1279c:	4240      	negs	r0, r0
   1279e:	b01f      	add	sp, #124	; 0x7c
   127a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   127a2:	2b25      	cmp	r3, #37	; 0x25
   127a4:	d09f      	beq.n	126e6 <_vfiprintf_r+0x46>
   127a6:	3401      	adds	r4, #1
   127a8:	e79a      	b.n	126e0 <_vfiprintf_r+0x40>
   127aa:	4b44      	ldr	r3, [pc, #272]	; (128bc <_vfiprintf_r+0x21c>)
   127ac:	6829      	ldr	r1, [r5, #0]
   127ae:	1ac0      	subs	r0, r0, r3
   127b0:	2301      	movs	r3, #1
   127b2:	4083      	lsls	r3, r0
   127b4:	430b      	orrs	r3, r1
   127b6:	602b      	str	r3, [r5, #0]
   127b8:	4664      	mov	r4, ip
   127ba:	e7b7      	b.n	1272c <_vfiprintf_r+0x8c>
   127bc:	9b05      	ldr	r3, [sp, #20]
   127be:	1d18      	adds	r0, r3, #4
   127c0:	681b      	ldr	r3, [r3, #0]
   127c2:	9005      	str	r0, [sp, #20]
   127c4:	2b00      	cmp	r3, #0
   127c6:	db3a      	blt.n	1283e <_vfiprintf_r+0x19e>
   127c8:	9309      	str	r3, [sp, #36]	; 0x24
   127ca:	4664      	mov	r4, ip
   127cc:	7823      	ldrb	r3, [r4, #0]
   127ce:	2b2e      	cmp	r3, #46	; 0x2e
   127d0:	d10b      	bne.n	127ea <_vfiprintf_r+0x14a>
   127d2:	7863      	ldrb	r3, [r4, #1]
   127d4:	1c62      	adds	r2, r4, #1
   127d6:	2b2a      	cmp	r3, #42	; 0x2a
   127d8:	d13f      	bne.n	1285a <_vfiprintf_r+0x1ba>
   127da:	9b05      	ldr	r3, [sp, #20]
   127dc:	3402      	adds	r4, #2
   127de:	1d1a      	adds	r2, r3, #4
   127e0:	681b      	ldr	r3, [r3, #0]
   127e2:	9205      	str	r2, [sp, #20]
   127e4:	2b00      	cmp	r3, #0
   127e6:	db35      	blt.n	12854 <_vfiprintf_r+0x1b4>
   127e8:	9307      	str	r3, [sp, #28]
   127ea:	7821      	ldrb	r1, [r4, #0]
   127ec:	2203      	movs	r2, #3
   127ee:	4836      	ldr	r0, [pc, #216]	; (128c8 <_vfiprintf_r+0x228>)
   127f0:	f000 fae6 	bl	12dc0 <memchr>
   127f4:	2800      	cmp	r0, #0
   127f6:	d007      	beq.n	12808 <_vfiprintf_r+0x168>
   127f8:	4b33      	ldr	r3, [pc, #204]	; (128c8 <_vfiprintf_r+0x228>)
   127fa:	682a      	ldr	r2, [r5, #0]
   127fc:	1ac0      	subs	r0, r0, r3
   127fe:	2340      	movs	r3, #64	; 0x40
   12800:	4083      	lsls	r3, r0
   12802:	4313      	orrs	r3, r2
   12804:	602b      	str	r3, [r5, #0]
   12806:	3401      	adds	r4, #1
   12808:	7821      	ldrb	r1, [r4, #0]
   1280a:	1c63      	adds	r3, r4, #1
   1280c:	2206      	movs	r2, #6
   1280e:	482f      	ldr	r0, [pc, #188]	; (128cc <_vfiprintf_r+0x22c>)
   12810:	9302      	str	r3, [sp, #8]
   12812:	7629      	strb	r1, [r5, #24]
   12814:	f000 fad4 	bl	12dc0 <memchr>
   12818:	2800      	cmp	r0, #0
   1281a:	d044      	beq.n	128a6 <_vfiprintf_r+0x206>
   1281c:	4b2c      	ldr	r3, [pc, #176]	; (128d0 <_vfiprintf_r+0x230>)
   1281e:	2b00      	cmp	r3, #0
   12820:	d12f      	bne.n	12882 <_vfiprintf_r+0x1e2>
   12822:	6829      	ldr	r1, [r5, #0]
   12824:	9b05      	ldr	r3, [sp, #20]
   12826:	2207      	movs	r2, #7
   12828:	05c9      	lsls	r1, r1, #23
   1282a:	d528      	bpl.n	1287e <_vfiprintf_r+0x1de>
   1282c:	189b      	adds	r3, r3, r2
   1282e:	4393      	bics	r3, r2
   12830:	3308      	adds	r3, #8
   12832:	9305      	str	r3, [sp, #20]
   12834:	696b      	ldr	r3, [r5, #20]
   12836:	9a03      	ldr	r2, [sp, #12]
   12838:	189b      	adds	r3, r3, r2
   1283a:	616b      	str	r3, [r5, #20]
   1283c:	e74f      	b.n	126de <_vfiprintf_r+0x3e>
   1283e:	425b      	negs	r3, r3
   12840:	60eb      	str	r3, [r5, #12]
   12842:	2302      	movs	r3, #2
   12844:	430b      	orrs	r3, r1
   12846:	602b      	str	r3, [r5, #0]
   12848:	e7bf      	b.n	127ca <_vfiprintf_r+0x12a>
   1284a:	434b      	muls	r3, r1
   1284c:	3401      	adds	r4, #1
   1284e:	189b      	adds	r3, r3, r2
   12850:	2001      	movs	r0, #1
   12852:	e789      	b.n	12768 <_vfiprintf_r+0xc8>
   12854:	2301      	movs	r3, #1
   12856:	425b      	negs	r3, r3
   12858:	e7c6      	b.n	127e8 <_vfiprintf_r+0x148>
   1285a:	2300      	movs	r3, #0
   1285c:	0014      	movs	r4, r2
   1285e:	200a      	movs	r0, #10
   12860:	001a      	movs	r2, r3
   12862:	606b      	str	r3, [r5, #4]
   12864:	7821      	ldrb	r1, [r4, #0]
   12866:	3930      	subs	r1, #48	; 0x30
   12868:	2909      	cmp	r1, #9
   1286a:	d903      	bls.n	12874 <_vfiprintf_r+0x1d4>
   1286c:	2b00      	cmp	r3, #0
   1286e:	d0bc      	beq.n	127ea <_vfiprintf_r+0x14a>
   12870:	9207      	str	r2, [sp, #28]
   12872:	e7ba      	b.n	127ea <_vfiprintf_r+0x14a>
   12874:	4342      	muls	r2, r0
   12876:	3401      	adds	r4, #1
   12878:	1852      	adds	r2, r2, r1
   1287a:	2301      	movs	r3, #1
   1287c:	e7f2      	b.n	12864 <_vfiprintf_r+0x1c4>
   1287e:	3307      	adds	r3, #7
   12880:	e7d5      	b.n	1282e <_vfiprintf_r+0x18e>
   12882:	ab05      	add	r3, sp, #20
   12884:	9300      	str	r3, [sp, #0]
   12886:	003a      	movs	r2, r7
   12888:	4b12      	ldr	r3, [pc, #72]	; (128d4 <_vfiprintf_r+0x234>)
   1288a:	0029      	movs	r1, r5
   1288c:	0030      	movs	r0, r6
   1288e:	e000      	b.n	12892 <_vfiprintf_r+0x1f2>
   12890:	bf00      	nop
   12892:	9003      	str	r0, [sp, #12]
   12894:	9b03      	ldr	r3, [sp, #12]
   12896:	3301      	adds	r3, #1
   12898:	d1cc      	bne.n	12834 <_vfiprintf_r+0x194>
   1289a:	89bb      	ldrh	r3, [r7, #12]
   1289c:	065b      	lsls	r3, r3, #25
   1289e:	d500      	bpl.n	128a2 <_vfiprintf_r+0x202>
   128a0:	e77b      	b.n	1279a <_vfiprintf_r+0xfa>
   128a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   128a4:	e77b      	b.n	1279e <_vfiprintf_r+0xfe>
   128a6:	ab05      	add	r3, sp, #20
   128a8:	9300      	str	r3, [sp, #0]
   128aa:	003a      	movs	r2, r7
   128ac:	4b09      	ldr	r3, [pc, #36]	; (128d4 <_vfiprintf_r+0x234>)
   128ae:	0029      	movs	r1, r5
   128b0:	0030      	movs	r0, r6
   128b2:	f000 f87f 	bl	129b4 <_printf_i>
   128b6:	e7ec      	b.n	12892 <_vfiprintf_r+0x1f2>
   128b8:	000148f4 	.word	0x000148f4
   128bc:	0001493e 	.word	0x0001493e
   128c0:	00014914 	.word	0x00014914
   128c4:	000148d4 	.word	0x000148d4
   128c8:	00014944 	.word	0x00014944
   128cc:	00014948 	.word	0x00014948
   128d0:	00000000 	.word	0x00000000
   128d4:	0001267b 	.word	0x0001267b

000128d8 <_printf_common>:
   128d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   128da:	0015      	movs	r5, r2
   128dc:	9301      	str	r3, [sp, #4]
   128de:	688a      	ldr	r2, [r1, #8]
   128e0:	690b      	ldr	r3, [r1, #16]
   128e2:	9000      	str	r0, [sp, #0]
   128e4:	000c      	movs	r4, r1
   128e6:	4293      	cmp	r3, r2
   128e8:	da00      	bge.n	128ec <_printf_common+0x14>
   128ea:	0013      	movs	r3, r2
   128ec:	0022      	movs	r2, r4
   128ee:	602b      	str	r3, [r5, #0]
   128f0:	3243      	adds	r2, #67	; 0x43
   128f2:	7812      	ldrb	r2, [r2, #0]
   128f4:	2a00      	cmp	r2, #0
   128f6:	d001      	beq.n	128fc <_printf_common+0x24>
   128f8:	3301      	adds	r3, #1
   128fa:	602b      	str	r3, [r5, #0]
   128fc:	6823      	ldr	r3, [r4, #0]
   128fe:	069b      	lsls	r3, r3, #26
   12900:	d502      	bpl.n	12908 <_printf_common+0x30>
   12902:	682b      	ldr	r3, [r5, #0]
   12904:	3302      	adds	r3, #2
   12906:	602b      	str	r3, [r5, #0]
   12908:	2706      	movs	r7, #6
   1290a:	6823      	ldr	r3, [r4, #0]
   1290c:	401f      	ands	r7, r3
   1290e:	d027      	beq.n	12960 <_printf_common+0x88>
   12910:	0023      	movs	r3, r4
   12912:	3343      	adds	r3, #67	; 0x43
   12914:	781b      	ldrb	r3, [r3, #0]
   12916:	1e5a      	subs	r2, r3, #1
   12918:	4193      	sbcs	r3, r2
   1291a:	6822      	ldr	r2, [r4, #0]
   1291c:	0692      	lsls	r2, r2, #26
   1291e:	d430      	bmi.n	12982 <_printf_common+0xaa>
   12920:	0022      	movs	r2, r4
   12922:	9901      	ldr	r1, [sp, #4]
   12924:	3243      	adds	r2, #67	; 0x43
   12926:	9800      	ldr	r0, [sp, #0]
   12928:	9e08      	ldr	r6, [sp, #32]
   1292a:	47b0      	blx	r6
   1292c:	1c43      	adds	r3, r0, #1
   1292e:	d025      	beq.n	1297c <_printf_common+0xa4>
   12930:	2306      	movs	r3, #6
   12932:	6820      	ldr	r0, [r4, #0]
   12934:	682a      	ldr	r2, [r5, #0]
   12936:	68e1      	ldr	r1, [r4, #12]
   12938:	4003      	ands	r3, r0
   1293a:	2500      	movs	r5, #0
   1293c:	2b04      	cmp	r3, #4
   1293e:	d103      	bne.n	12948 <_printf_common+0x70>
   12940:	1a8d      	subs	r5, r1, r2
   12942:	43eb      	mvns	r3, r5
   12944:	17db      	asrs	r3, r3, #31
   12946:	401d      	ands	r5, r3
   12948:	68a3      	ldr	r3, [r4, #8]
   1294a:	6922      	ldr	r2, [r4, #16]
   1294c:	4293      	cmp	r3, r2
   1294e:	dd01      	ble.n	12954 <_printf_common+0x7c>
   12950:	1a9b      	subs	r3, r3, r2
   12952:	18ed      	adds	r5, r5, r3
   12954:	2700      	movs	r7, #0
   12956:	42bd      	cmp	r5, r7
   12958:	d120      	bne.n	1299c <_printf_common+0xc4>
   1295a:	2000      	movs	r0, #0
   1295c:	e010      	b.n	12980 <_printf_common+0xa8>
   1295e:	3701      	adds	r7, #1
   12960:	68e3      	ldr	r3, [r4, #12]
   12962:	682a      	ldr	r2, [r5, #0]
   12964:	1a9b      	subs	r3, r3, r2
   12966:	429f      	cmp	r7, r3
   12968:	dad2      	bge.n	12910 <_printf_common+0x38>
   1296a:	0022      	movs	r2, r4
   1296c:	2301      	movs	r3, #1
   1296e:	3219      	adds	r2, #25
   12970:	9901      	ldr	r1, [sp, #4]
   12972:	9800      	ldr	r0, [sp, #0]
   12974:	9e08      	ldr	r6, [sp, #32]
   12976:	47b0      	blx	r6
   12978:	1c43      	adds	r3, r0, #1
   1297a:	d1f0      	bne.n	1295e <_printf_common+0x86>
   1297c:	2001      	movs	r0, #1
   1297e:	4240      	negs	r0, r0
   12980:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12982:	2030      	movs	r0, #48	; 0x30
   12984:	18e1      	adds	r1, r4, r3
   12986:	3143      	adds	r1, #67	; 0x43
   12988:	7008      	strb	r0, [r1, #0]
   1298a:	0021      	movs	r1, r4
   1298c:	1c5a      	adds	r2, r3, #1
   1298e:	3145      	adds	r1, #69	; 0x45
   12990:	7809      	ldrb	r1, [r1, #0]
   12992:	18a2      	adds	r2, r4, r2
   12994:	3243      	adds	r2, #67	; 0x43
   12996:	3302      	adds	r3, #2
   12998:	7011      	strb	r1, [r2, #0]
   1299a:	e7c1      	b.n	12920 <_printf_common+0x48>
   1299c:	0022      	movs	r2, r4
   1299e:	2301      	movs	r3, #1
   129a0:	321a      	adds	r2, #26
   129a2:	9901      	ldr	r1, [sp, #4]
   129a4:	9800      	ldr	r0, [sp, #0]
   129a6:	9e08      	ldr	r6, [sp, #32]
   129a8:	47b0      	blx	r6
   129aa:	1c43      	adds	r3, r0, #1
   129ac:	d0e6      	beq.n	1297c <_printf_common+0xa4>
   129ae:	3701      	adds	r7, #1
   129b0:	e7d1      	b.n	12956 <_printf_common+0x7e>
	...

000129b4 <_printf_i>:
   129b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   129b6:	b08b      	sub	sp, #44	; 0x2c
   129b8:	9206      	str	r2, [sp, #24]
   129ba:	000a      	movs	r2, r1
   129bc:	3243      	adds	r2, #67	; 0x43
   129be:	9307      	str	r3, [sp, #28]
   129c0:	9005      	str	r0, [sp, #20]
   129c2:	9204      	str	r2, [sp, #16]
   129c4:	7e0a      	ldrb	r2, [r1, #24]
   129c6:	000c      	movs	r4, r1
   129c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   129ca:	2a6e      	cmp	r2, #110	; 0x6e
   129cc:	d100      	bne.n	129d0 <_printf_i+0x1c>
   129ce:	e08f      	b.n	12af0 <_printf_i+0x13c>
   129d0:	d817      	bhi.n	12a02 <_printf_i+0x4e>
   129d2:	2a63      	cmp	r2, #99	; 0x63
   129d4:	d02c      	beq.n	12a30 <_printf_i+0x7c>
   129d6:	d808      	bhi.n	129ea <_printf_i+0x36>
   129d8:	2a00      	cmp	r2, #0
   129da:	d100      	bne.n	129de <_printf_i+0x2a>
   129dc:	e099      	b.n	12b12 <_printf_i+0x15e>
   129de:	2a58      	cmp	r2, #88	; 0x58
   129e0:	d054      	beq.n	12a8c <_printf_i+0xd8>
   129e2:	0026      	movs	r6, r4
   129e4:	3642      	adds	r6, #66	; 0x42
   129e6:	7032      	strb	r2, [r6, #0]
   129e8:	e029      	b.n	12a3e <_printf_i+0x8a>
   129ea:	2a64      	cmp	r2, #100	; 0x64
   129ec:	d001      	beq.n	129f2 <_printf_i+0x3e>
   129ee:	2a69      	cmp	r2, #105	; 0x69
   129f0:	d1f7      	bne.n	129e2 <_printf_i+0x2e>
   129f2:	6821      	ldr	r1, [r4, #0]
   129f4:	681a      	ldr	r2, [r3, #0]
   129f6:	0608      	lsls	r0, r1, #24
   129f8:	d523      	bpl.n	12a42 <_printf_i+0x8e>
   129fa:	1d11      	adds	r1, r2, #4
   129fc:	6019      	str	r1, [r3, #0]
   129fe:	6815      	ldr	r5, [r2, #0]
   12a00:	e025      	b.n	12a4e <_printf_i+0x9a>
   12a02:	2a73      	cmp	r2, #115	; 0x73
   12a04:	d100      	bne.n	12a08 <_printf_i+0x54>
   12a06:	e088      	b.n	12b1a <_printf_i+0x166>
   12a08:	d808      	bhi.n	12a1c <_printf_i+0x68>
   12a0a:	2a6f      	cmp	r2, #111	; 0x6f
   12a0c:	d029      	beq.n	12a62 <_printf_i+0xae>
   12a0e:	2a70      	cmp	r2, #112	; 0x70
   12a10:	d1e7      	bne.n	129e2 <_printf_i+0x2e>
   12a12:	2220      	movs	r2, #32
   12a14:	6809      	ldr	r1, [r1, #0]
   12a16:	430a      	orrs	r2, r1
   12a18:	6022      	str	r2, [r4, #0]
   12a1a:	e003      	b.n	12a24 <_printf_i+0x70>
   12a1c:	2a75      	cmp	r2, #117	; 0x75
   12a1e:	d020      	beq.n	12a62 <_printf_i+0xae>
   12a20:	2a78      	cmp	r2, #120	; 0x78
   12a22:	d1de      	bne.n	129e2 <_printf_i+0x2e>
   12a24:	0022      	movs	r2, r4
   12a26:	2178      	movs	r1, #120	; 0x78
   12a28:	3245      	adds	r2, #69	; 0x45
   12a2a:	7011      	strb	r1, [r2, #0]
   12a2c:	4a6c      	ldr	r2, [pc, #432]	; (12be0 <_printf_i+0x22c>)
   12a2e:	e030      	b.n	12a92 <_printf_i+0xde>
   12a30:	000e      	movs	r6, r1
   12a32:	681a      	ldr	r2, [r3, #0]
   12a34:	3642      	adds	r6, #66	; 0x42
   12a36:	1d11      	adds	r1, r2, #4
   12a38:	6019      	str	r1, [r3, #0]
   12a3a:	6813      	ldr	r3, [r2, #0]
   12a3c:	7033      	strb	r3, [r6, #0]
   12a3e:	2301      	movs	r3, #1
   12a40:	e079      	b.n	12b36 <_printf_i+0x182>
   12a42:	0649      	lsls	r1, r1, #25
   12a44:	d5d9      	bpl.n	129fa <_printf_i+0x46>
   12a46:	1d11      	adds	r1, r2, #4
   12a48:	6019      	str	r1, [r3, #0]
   12a4a:	2300      	movs	r3, #0
   12a4c:	5ed5      	ldrsh	r5, [r2, r3]
   12a4e:	2d00      	cmp	r5, #0
   12a50:	da03      	bge.n	12a5a <_printf_i+0xa6>
   12a52:	232d      	movs	r3, #45	; 0x2d
   12a54:	9a04      	ldr	r2, [sp, #16]
   12a56:	426d      	negs	r5, r5
   12a58:	7013      	strb	r3, [r2, #0]
   12a5a:	4b62      	ldr	r3, [pc, #392]	; (12be4 <_printf_i+0x230>)
   12a5c:	270a      	movs	r7, #10
   12a5e:	9303      	str	r3, [sp, #12]
   12a60:	e02f      	b.n	12ac2 <_printf_i+0x10e>
   12a62:	6820      	ldr	r0, [r4, #0]
   12a64:	6819      	ldr	r1, [r3, #0]
   12a66:	0605      	lsls	r5, r0, #24
   12a68:	d503      	bpl.n	12a72 <_printf_i+0xbe>
   12a6a:	1d08      	adds	r0, r1, #4
   12a6c:	6018      	str	r0, [r3, #0]
   12a6e:	680d      	ldr	r5, [r1, #0]
   12a70:	e005      	b.n	12a7e <_printf_i+0xca>
   12a72:	0640      	lsls	r0, r0, #25
   12a74:	d5f9      	bpl.n	12a6a <_printf_i+0xb6>
   12a76:	680d      	ldr	r5, [r1, #0]
   12a78:	1d08      	adds	r0, r1, #4
   12a7a:	6018      	str	r0, [r3, #0]
   12a7c:	b2ad      	uxth	r5, r5
   12a7e:	4b59      	ldr	r3, [pc, #356]	; (12be4 <_printf_i+0x230>)
   12a80:	2708      	movs	r7, #8
   12a82:	9303      	str	r3, [sp, #12]
   12a84:	2a6f      	cmp	r2, #111	; 0x6f
   12a86:	d018      	beq.n	12aba <_printf_i+0x106>
   12a88:	270a      	movs	r7, #10
   12a8a:	e016      	b.n	12aba <_printf_i+0x106>
   12a8c:	3145      	adds	r1, #69	; 0x45
   12a8e:	700a      	strb	r2, [r1, #0]
   12a90:	4a54      	ldr	r2, [pc, #336]	; (12be4 <_printf_i+0x230>)
   12a92:	9203      	str	r2, [sp, #12]
   12a94:	681a      	ldr	r2, [r3, #0]
   12a96:	6821      	ldr	r1, [r4, #0]
   12a98:	1d10      	adds	r0, r2, #4
   12a9a:	6018      	str	r0, [r3, #0]
   12a9c:	6815      	ldr	r5, [r2, #0]
   12a9e:	0608      	lsls	r0, r1, #24
   12aa0:	d522      	bpl.n	12ae8 <_printf_i+0x134>
   12aa2:	07cb      	lsls	r3, r1, #31
   12aa4:	d502      	bpl.n	12aac <_printf_i+0xf8>
   12aa6:	2320      	movs	r3, #32
   12aa8:	4319      	orrs	r1, r3
   12aaa:	6021      	str	r1, [r4, #0]
   12aac:	2710      	movs	r7, #16
   12aae:	2d00      	cmp	r5, #0
   12ab0:	d103      	bne.n	12aba <_printf_i+0x106>
   12ab2:	2320      	movs	r3, #32
   12ab4:	6822      	ldr	r2, [r4, #0]
   12ab6:	439a      	bics	r2, r3
   12ab8:	6022      	str	r2, [r4, #0]
   12aba:	0023      	movs	r3, r4
   12abc:	2200      	movs	r2, #0
   12abe:	3343      	adds	r3, #67	; 0x43
   12ac0:	701a      	strb	r2, [r3, #0]
   12ac2:	6863      	ldr	r3, [r4, #4]
   12ac4:	60a3      	str	r3, [r4, #8]
   12ac6:	2b00      	cmp	r3, #0
   12ac8:	db5c      	blt.n	12b84 <_printf_i+0x1d0>
   12aca:	2204      	movs	r2, #4
   12acc:	6821      	ldr	r1, [r4, #0]
   12ace:	4391      	bics	r1, r2
   12ad0:	6021      	str	r1, [r4, #0]
   12ad2:	2d00      	cmp	r5, #0
   12ad4:	d158      	bne.n	12b88 <_printf_i+0x1d4>
   12ad6:	9e04      	ldr	r6, [sp, #16]
   12ad8:	2b00      	cmp	r3, #0
   12ada:	d064      	beq.n	12ba6 <_printf_i+0x1f2>
   12adc:	0026      	movs	r6, r4
   12ade:	9b03      	ldr	r3, [sp, #12]
   12ae0:	3642      	adds	r6, #66	; 0x42
   12ae2:	781b      	ldrb	r3, [r3, #0]
   12ae4:	7033      	strb	r3, [r6, #0]
   12ae6:	e05e      	b.n	12ba6 <_printf_i+0x1f2>
   12ae8:	0648      	lsls	r0, r1, #25
   12aea:	d5da      	bpl.n	12aa2 <_printf_i+0xee>
   12aec:	b2ad      	uxth	r5, r5
   12aee:	e7d8      	b.n	12aa2 <_printf_i+0xee>
   12af0:	6809      	ldr	r1, [r1, #0]
   12af2:	681a      	ldr	r2, [r3, #0]
   12af4:	0608      	lsls	r0, r1, #24
   12af6:	d505      	bpl.n	12b04 <_printf_i+0x150>
   12af8:	1d11      	adds	r1, r2, #4
   12afa:	6019      	str	r1, [r3, #0]
   12afc:	6813      	ldr	r3, [r2, #0]
   12afe:	6962      	ldr	r2, [r4, #20]
   12b00:	601a      	str	r2, [r3, #0]
   12b02:	e006      	b.n	12b12 <_printf_i+0x15e>
   12b04:	0649      	lsls	r1, r1, #25
   12b06:	d5f7      	bpl.n	12af8 <_printf_i+0x144>
   12b08:	1d11      	adds	r1, r2, #4
   12b0a:	6019      	str	r1, [r3, #0]
   12b0c:	6813      	ldr	r3, [r2, #0]
   12b0e:	8aa2      	ldrh	r2, [r4, #20]
   12b10:	801a      	strh	r2, [r3, #0]
   12b12:	2300      	movs	r3, #0
   12b14:	9e04      	ldr	r6, [sp, #16]
   12b16:	6123      	str	r3, [r4, #16]
   12b18:	e054      	b.n	12bc4 <_printf_i+0x210>
   12b1a:	681a      	ldr	r2, [r3, #0]
   12b1c:	1d11      	adds	r1, r2, #4
   12b1e:	6019      	str	r1, [r3, #0]
   12b20:	6816      	ldr	r6, [r2, #0]
   12b22:	2100      	movs	r1, #0
   12b24:	6862      	ldr	r2, [r4, #4]
   12b26:	0030      	movs	r0, r6
   12b28:	f000 f94a 	bl	12dc0 <memchr>
   12b2c:	2800      	cmp	r0, #0
   12b2e:	d001      	beq.n	12b34 <_printf_i+0x180>
   12b30:	1b80      	subs	r0, r0, r6
   12b32:	6060      	str	r0, [r4, #4]
   12b34:	6863      	ldr	r3, [r4, #4]
   12b36:	6123      	str	r3, [r4, #16]
   12b38:	2300      	movs	r3, #0
   12b3a:	9a04      	ldr	r2, [sp, #16]
   12b3c:	7013      	strb	r3, [r2, #0]
   12b3e:	e041      	b.n	12bc4 <_printf_i+0x210>
   12b40:	6923      	ldr	r3, [r4, #16]
   12b42:	0032      	movs	r2, r6
   12b44:	9906      	ldr	r1, [sp, #24]
   12b46:	9805      	ldr	r0, [sp, #20]
   12b48:	9d07      	ldr	r5, [sp, #28]
   12b4a:	47a8      	blx	r5
   12b4c:	1c43      	adds	r3, r0, #1
   12b4e:	d043      	beq.n	12bd8 <_printf_i+0x224>
   12b50:	6823      	ldr	r3, [r4, #0]
   12b52:	2500      	movs	r5, #0
   12b54:	079b      	lsls	r3, r3, #30
   12b56:	d40f      	bmi.n	12b78 <_printf_i+0x1c4>
   12b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12b5a:	68e0      	ldr	r0, [r4, #12]
   12b5c:	4298      	cmp	r0, r3
   12b5e:	da3d      	bge.n	12bdc <_printf_i+0x228>
   12b60:	0018      	movs	r0, r3
   12b62:	e03b      	b.n	12bdc <_printf_i+0x228>
   12b64:	0022      	movs	r2, r4
   12b66:	2301      	movs	r3, #1
   12b68:	3219      	adds	r2, #25
   12b6a:	9906      	ldr	r1, [sp, #24]
   12b6c:	9805      	ldr	r0, [sp, #20]
   12b6e:	9e07      	ldr	r6, [sp, #28]
   12b70:	47b0      	blx	r6
   12b72:	1c43      	adds	r3, r0, #1
   12b74:	d030      	beq.n	12bd8 <_printf_i+0x224>
   12b76:	3501      	adds	r5, #1
   12b78:	68e3      	ldr	r3, [r4, #12]
   12b7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12b7c:	1a9b      	subs	r3, r3, r2
   12b7e:	429d      	cmp	r5, r3
   12b80:	dbf0      	blt.n	12b64 <_printf_i+0x1b0>
   12b82:	e7e9      	b.n	12b58 <_printf_i+0x1a4>
   12b84:	2d00      	cmp	r5, #0
   12b86:	d0a9      	beq.n	12adc <_printf_i+0x128>
   12b88:	9e04      	ldr	r6, [sp, #16]
   12b8a:	0028      	movs	r0, r5
   12b8c:	0039      	movs	r1, r7
   12b8e:	f7fe fc47 	bl	11420 <__aeabi_uidivmod>
   12b92:	9b03      	ldr	r3, [sp, #12]
   12b94:	3e01      	subs	r6, #1
   12b96:	5c5b      	ldrb	r3, [r3, r1]
   12b98:	0028      	movs	r0, r5
   12b9a:	7033      	strb	r3, [r6, #0]
   12b9c:	0039      	movs	r1, r7
   12b9e:	f7fe fbb9 	bl	11314 <__udivsi3>
   12ba2:	1e05      	subs	r5, r0, #0
   12ba4:	d1f1      	bne.n	12b8a <_printf_i+0x1d6>
   12ba6:	2f08      	cmp	r7, #8
   12ba8:	d109      	bne.n	12bbe <_printf_i+0x20a>
   12baa:	6823      	ldr	r3, [r4, #0]
   12bac:	07db      	lsls	r3, r3, #31
   12bae:	d506      	bpl.n	12bbe <_printf_i+0x20a>
   12bb0:	6863      	ldr	r3, [r4, #4]
   12bb2:	6922      	ldr	r2, [r4, #16]
   12bb4:	4293      	cmp	r3, r2
   12bb6:	dc02      	bgt.n	12bbe <_printf_i+0x20a>
   12bb8:	2330      	movs	r3, #48	; 0x30
   12bba:	3e01      	subs	r6, #1
   12bbc:	7033      	strb	r3, [r6, #0]
   12bbe:	9b04      	ldr	r3, [sp, #16]
   12bc0:	1b9b      	subs	r3, r3, r6
   12bc2:	6123      	str	r3, [r4, #16]
   12bc4:	9b07      	ldr	r3, [sp, #28]
   12bc6:	aa09      	add	r2, sp, #36	; 0x24
   12bc8:	9300      	str	r3, [sp, #0]
   12bca:	0021      	movs	r1, r4
   12bcc:	9b06      	ldr	r3, [sp, #24]
   12bce:	9805      	ldr	r0, [sp, #20]
   12bd0:	f7ff fe82 	bl	128d8 <_printf_common>
   12bd4:	1c43      	adds	r3, r0, #1
   12bd6:	d1b3      	bne.n	12b40 <_printf_i+0x18c>
   12bd8:	2001      	movs	r0, #1
   12bda:	4240      	negs	r0, r0
   12bdc:	b00b      	add	sp, #44	; 0x2c
   12bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12be0:	00014960 	.word	0x00014960
   12be4:	0001494f 	.word	0x0001494f

00012be8 <_putc_r>:
   12be8:	b570      	push	{r4, r5, r6, lr}
   12bea:	0006      	movs	r6, r0
   12bec:	000d      	movs	r5, r1
   12bee:	0014      	movs	r4, r2
   12bf0:	2800      	cmp	r0, #0
   12bf2:	d004      	beq.n	12bfe <_putc_r+0x16>
   12bf4:	6983      	ldr	r3, [r0, #24]
   12bf6:	2b00      	cmp	r3, #0
   12bf8:	d101      	bne.n	12bfe <_putc_r+0x16>
   12bfa:	f7ff fab1 	bl	12160 <__sinit>
   12bfe:	4b12      	ldr	r3, [pc, #72]	; (12c48 <_putc_r+0x60>)
   12c00:	429c      	cmp	r4, r3
   12c02:	d111      	bne.n	12c28 <_putc_r+0x40>
   12c04:	6874      	ldr	r4, [r6, #4]
   12c06:	68a3      	ldr	r3, [r4, #8]
   12c08:	3b01      	subs	r3, #1
   12c0a:	60a3      	str	r3, [r4, #8]
   12c0c:	2b00      	cmp	r3, #0
   12c0e:	da05      	bge.n	12c1c <_putc_r+0x34>
   12c10:	69a2      	ldr	r2, [r4, #24]
   12c12:	4293      	cmp	r3, r2
   12c14:	db12      	blt.n	12c3c <_putc_r+0x54>
   12c16:	b2eb      	uxtb	r3, r5
   12c18:	2b0a      	cmp	r3, #10
   12c1a:	d00f      	beq.n	12c3c <_putc_r+0x54>
   12c1c:	6823      	ldr	r3, [r4, #0]
   12c1e:	b2e8      	uxtb	r0, r5
   12c20:	1c5a      	adds	r2, r3, #1
   12c22:	6022      	str	r2, [r4, #0]
   12c24:	701d      	strb	r5, [r3, #0]
   12c26:	bd70      	pop	{r4, r5, r6, pc}
   12c28:	4b08      	ldr	r3, [pc, #32]	; (12c4c <_putc_r+0x64>)
   12c2a:	429c      	cmp	r4, r3
   12c2c:	d101      	bne.n	12c32 <_putc_r+0x4a>
   12c2e:	68b4      	ldr	r4, [r6, #8]
   12c30:	e7e9      	b.n	12c06 <_putc_r+0x1e>
   12c32:	4b07      	ldr	r3, [pc, #28]	; (12c50 <_putc_r+0x68>)
   12c34:	429c      	cmp	r4, r3
   12c36:	d1e6      	bne.n	12c06 <_putc_r+0x1e>
   12c38:	68f4      	ldr	r4, [r6, #12]
   12c3a:	e7e4      	b.n	12c06 <_putc_r+0x1e>
   12c3c:	0022      	movs	r2, r4
   12c3e:	0029      	movs	r1, r5
   12c40:	0030      	movs	r0, r6
   12c42:	f7ff f8c9 	bl	11dd8 <__swbuf_r>
   12c46:	e7ee      	b.n	12c26 <_putc_r+0x3e>
   12c48:	000148f4 	.word	0x000148f4
   12c4c:	00014914 	.word	0x00014914
   12c50:	000148d4 	.word	0x000148d4

00012c54 <__sread>:
   12c54:	b570      	push	{r4, r5, r6, lr}
   12c56:	000c      	movs	r4, r1
   12c58:	250e      	movs	r5, #14
   12c5a:	5f49      	ldrsh	r1, [r1, r5]
   12c5c:	f000 f8e2 	bl	12e24 <_read_r>
   12c60:	2800      	cmp	r0, #0
   12c62:	db03      	blt.n	12c6c <__sread+0x18>
   12c64:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12c66:	181b      	adds	r3, r3, r0
   12c68:	6563      	str	r3, [r4, #84]	; 0x54
   12c6a:	bd70      	pop	{r4, r5, r6, pc}
   12c6c:	89a3      	ldrh	r3, [r4, #12]
   12c6e:	4a02      	ldr	r2, [pc, #8]	; (12c78 <__sread+0x24>)
   12c70:	4013      	ands	r3, r2
   12c72:	81a3      	strh	r3, [r4, #12]
   12c74:	e7f9      	b.n	12c6a <__sread+0x16>
   12c76:	46c0      	nop			; (mov r8, r8)
   12c78:	ffffefff 	.word	0xffffefff

00012c7c <__swrite>:
   12c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c7e:	001f      	movs	r7, r3
   12c80:	898b      	ldrh	r3, [r1, #12]
   12c82:	0005      	movs	r5, r0
   12c84:	000c      	movs	r4, r1
   12c86:	0016      	movs	r6, r2
   12c88:	05db      	lsls	r3, r3, #23
   12c8a:	d505      	bpl.n	12c98 <__swrite+0x1c>
   12c8c:	230e      	movs	r3, #14
   12c8e:	5ec9      	ldrsh	r1, [r1, r3]
   12c90:	2200      	movs	r2, #0
   12c92:	2302      	movs	r3, #2
   12c94:	f000 f880 	bl	12d98 <_lseek_r>
   12c98:	89a3      	ldrh	r3, [r4, #12]
   12c9a:	4a05      	ldr	r2, [pc, #20]	; (12cb0 <__swrite+0x34>)
   12c9c:	0028      	movs	r0, r5
   12c9e:	4013      	ands	r3, r2
   12ca0:	81a3      	strh	r3, [r4, #12]
   12ca2:	0032      	movs	r2, r6
   12ca4:	230e      	movs	r3, #14
   12ca6:	5ee1      	ldrsh	r1, [r4, r3]
   12ca8:	003b      	movs	r3, r7
   12caa:	f000 f82b 	bl	12d04 <_write_r>
   12cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12cb0:	ffffefff 	.word	0xffffefff

00012cb4 <__sseek>:
   12cb4:	b570      	push	{r4, r5, r6, lr}
   12cb6:	000c      	movs	r4, r1
   12cb8:	250e      	movs	r5, #14
   12cba:	5f49      	ldrsh	r1, [r1, r5]
   12cbc:	f000 f86c 	bl	12d98 <_lseek_r>
   12cc0:	89a3      	ldrh	r3, [r4, #12]
   12cc2:	1c42      	adds	r2, r0, #1
   12cc4:	d103      	bne.n	12cce <__sseek+0x1a>
   12cc6:	4a05      	ldr	r2, [pc, #20]	; (12cdc <__sseek+0x28>)
   12cc8:	4013      	ands	r3, r2
   12cca:	81a3      	strh	r3, [r4, #12]
   12ccc:	bd70      	pop	{r4, r5, r6, pc}
   12cce:	2280      	movs	r2, #128	; 0x80
   12cd0:	0152      	lsls	r2, r2, #5
   12cd2:	4313      	orrs	r3, r2
   12cd4:	81a3      	strh	r3, [r4, #12]
   12cd6:	6560      	str	r0, [r4, #84]	; 0x54
   12cd8:	e7f8      	b.n	12ccc <__sseek+0x18>
   12cda:	46c0      	nop			; (mov r8, r8)
   12cdc:	ffffefff 	.word	0xffffefff

00012ce0 <__sclose>:
   12ce0:	b510      	push	{r4, lr}
   12ce2:	230e      	movs	r3, #14
   12ce4:	5ec9      	ldrsh	r1, [r1, r3]
   12ce6:	f000 f821 	bl	12d2c <_close_r>
   12cea:	bd10      	pop	{r4, pc}

00012cec <__ascii_wctomb>:
   12cec:	1e0b      	subs	r3, r1, #0
   12cee:	d004      	beq.n	12cfa <__ascii_wctomb+0xe>
   12cf0:	2aff      	cmp	r2, #255	; 0xff
   12cf2:	d904      	bls.n	12cfe <__ascii_wctomb+0x12>
   12cf4:	238a      	movs	r3, #138	; 0x8a
   12cf6:	6003      	str	r3, [r0, #0]
   12cf8:	3b8b      	subs	r3, #139	; 0x8b
   12cfa:	0018      	movs	r0, r3
   12cfc:	4770      	bx	lr
   12cfe:	700a      	strb	r2, [r1, #0]
   12d00:	2301      	movs	r3, #1
   12d02:	e7fa      	b.n	12cfa <__ascii_wctomb+0xe>

00012d04 <_write_r>:
   12d04:	b570      	push	{r4, r5, r6, lr}
   12d06:	0005      	movs	r5, r0
   12d08:	0008      	movs	r0, r1
   12d0a:	0011      	movs	r1, r2
   12d0c:	2200      	movs	r2, #0
   12d0e:	4c06      	ldr	r4, [pc, #24]	; (12d28 <_write_r+0x24>)
   12d10:	6022      	str	r2, [r4, #0]
   12d12:	001a      	movs	r2, r3
   12d14:	f7fb fa98 	bl	e248 <_write>
   12d18:	1c43      	adds	r3, r0, #1
   12d1a:	d103      	bne.n	12d24 <_write_r+0x20>
   12d1c:	6823      	ldr	r3, [r4, #0]
   12d1e:	2b00      	cmp	r3, #0
   12d20:	d000      	beq.n	12d24 <_write_r+0x20>
   12d22:	602b      	str	r3, [r5, #0]
   12d24:	bd70      	pop	{r4, r5, r6, pc}
   12d26:	46c0      	nop			; (mov r8, r8)
   12d28:	20000f9c 	.word	0x20000f9c

00012d2c <_close_r>:
   12d2c:	2300      	movs	r3, #0
   12d2e:	b570      	push	{r4, r5, r6, lr}
   12d30:	4c06      	ldr	r4, [pc, #24]	; (12d4c <_close_r+0x20>)
   12d32:	0005      	movs	r5, r0
   12d34:	0008      	movs	r0, r1
   12d36:	6023      	str	r3, [r4, #0]
   12d38:	f7fb fac0 	bl	e2bc <_close>
   12d3c:	1c43      	adds	r3, r0, #1
   12d3e:	d103      	bne.n	12d48 <_close_r+0x1c>
   12d40:	6823      	ldr	r3, [r4, #0]
   12d42:	2b00      	cmp	r3, #0
   12d44:	d000      	beq.n	12d48 <_close_r+0x1c>
   12d46:	602b      	str	r3, [r5, #0]
   12d48:	bd70      	pop	{r4, r5, r6, pc}
   12d4a:	46c0      	nop			; (mov r8, r8)
   12d4c:	20000f9c 	.word	0x20000f9c

00012d50 <_fstat_r>:
   12d50:	2300      	movs	r3, #0
   12d52:	b570      	push	{r4, r5, r6, lr}
   12d54:	4c06      	ldr	r4, [pc, #24]	; (12d70 <_fstat_r+0x20>)
   12d56:	0005      	movs	r5, r0
   12d58:	0008      	movs	r0, r1
   12d5a:	0011      	movs	r1, r2
   12d5c:	6023      	str	r3, [r4, #0]
   12d5e:	f7fb fab0 	bl	e2c2 <_fstat>
   12d62:	1c43      	adds	r3, r0, #1
   12d64:	d103      	bne.n	12d6e <_fstat_r+0x1e>
   12d66:	6823      	ldr	r3, [r4, #0]
   12d68:	2b00      	cmp	r3, #0
   12d6a:	d000      	beq.n	12d6e <_fstat_r+0x1e>
   12d6c:	602b      	str	r3, [r5, #0]
   12d6e:	bd70      	pop	{r4, r5, r6, pc}
   12d70:	20000f9c 	.word	0x20000f9c

00012d74 <_isatty_r>:
   12d74:	2300      	movs	r3, #0
   12d76:	b570      	push	{r4, r5, r6, lr}
   12d78:	4c06      	ldr	r4, [pc, #24]	; (12d94 <_isatty_r+0x20>)
   12d7a:	0005      	movs	r5, r0
   12d7c:	0008      	movs	r0, r1
   12d7e:	6023      	str	r3, [r4, #0]
   12d80:	f7fb faa4 	bl	e2cc <_isatty>
   12d84:	1c43      	adds	r3, r0, #1
   12d86:	d103      	bne.n	12d90 <_isatty_r+0x1c>
   12d88:	6823      	ldr	r3, [r4, #0]
   12d8a:	2b00      	cmp	r3, #0
   12d8c:	d000      	beq.n	12d90 <_isatty_r+0x1c>
   12d8e:	602b      	str	r3, [r5, #0]
   12d90:	bd70      	pop	{r4, r5, r6, pc}
   12d92:	46c0      	nop			; (mov r8, r8)
   12d94:	20000f9c 	.word	0x20000f9c

00012d98 <_lseek_r>:
   12d98:	b570      	push	{r4, r5, r6, lr}
   12d9a:	0005      	movs	r5, r0
   12d9c:	0008      	movs	r0, r1
   12d9e:	0011      	movs	r1, r2
   12da0:	2200      	movs	r2, #0
   12da2:	4c06      	ldr	r4, [pc, #24]	; (12dbc <_lseek_r+0x24>)
   12da4:	6022      	str	r2, [r4, #0]
   12da6:	001a      	movs	r2, r3
   12da8:	f7fb fa92 	bl	e2d0 <_lseek>
   12dac:	1c43      	adds	r3, r0, #1
   12dae:	d103      	bne.n	12db8 <_lseek_r+0x20>
   12db0:	6823      	ldr	r3, [r4, #0]
   12db2:	2b00      	cmp	r3, #0
   12db4:	d000      	beq.n	12db8 <_lseek_r+0x20>
   12db6:	602b      	str	r3, [r5, #0]
   12db8:	bd70      	pop	{r4, r5, r6, pc}
   12dba:	46c0      	nop			; (mov r8, r8)
   12dbc:	20000f9c 	.word	0x20000f9c

00012dc0 <memchr>:
   12dc0:	b2c9      	uxtb	r1, r1
   12dc2:	1882      	adds	r2, r0, r2
   12dc4:	4290      	cmp	r0, r2
   12dc6:	d101      	bne.n	12dcc <memchr+0xc>
   12dc8:	2000      	movs	r0, #0
   12dca:	4770      	bx	lr
   12dcc:	7803      	ldrb	r3, [r0, #0]
   12dce:	428b      	cmp	r3, r1
   12dd0:	d0fb      	beq.n	12dca <memchr+0xa>
   12dd2:	3001      	adds	r0, #1
   12dd4:	e7f6      	b.n	12dc4 <memchr+0x4>

00012dd6 <_realloc_r>:
   12dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12dd8:	0007      	movs	r7, r0
   12dda:	000d      	movs	r5, r1
   12ddc:	0016      	movs	r6, r2
   12dde:	2900      	cmp	r1, #0
   12de0:	d105      	bne.n	12dee <_realloc_r+0x18>
   12de2:	0011      	movs	r1, r2
   12de4:	f7fe fce2 	bl	117ac <_malloc_r>
   12de8:	0004      	movs	r4, r0
   12dea:	0020      	movs	r0, r4
   12dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12dee:	2a00      	cmp	r2, #0
   12df0:	d103      	bne.n	12dfa <_realloc_r+0x24>
   12df2:	f7fe fc91 	bl	11718 <_free_r>
   12df6:	0034      	movs	r4, r6
   12df8:	e7f7      	b.n	12dea <_realloc_r+0x14>
   12dfa:	f000 f827 	bl	12e4c <_malloc_usable_size_r>
   12dfe:	002c      	movs	r4, r5
   12e00:	4286      	cmp	r6, r0
   12e02:	d9f2      	bls.n	12dea <_realloc_r+0x14>
   12e04:	0031      	movs	r1, r6
   12e06:	0038      	movs	r0, r7
   12e08:	f7fe fcd0 	bl	117ac <_malloc_r>
   12e0c:	1e04      	subs	r4, r0, #0
   12e0e:	d0ec      	beq.n	12dea <_realloc_r+0x14>
   12e10:	0029      	movs	r1, r5
   12e12:	0032      	movs	r2, r6
   12e14:	f7fe fc5c 	bl	116d0 <memcpy>
   12e18:	0029      	movs	r1, r5
   12e1a:	0038      	movs	r0, r7
   12e1c:	f7fe fc7c 	bl	11718 <_free_r>
   12e20:	e7e3      	b.n	12dea <_realloc_r+0x14>
	...

00012e24 <_read_r>:
   12e24:	b570      	push	{r4, r5, r6, lr}
   12e26:	0005      	movs	r5, r0
   12e28:	0008      	movs	r0, r1
   12e2a:	0011      	movs	r1, r2
   12e2c:	2200      	movs	r2, #0
   12e2e:	4c06      	ldr	r4, [pc, #24]	; (12e48 <_read_r+0x24>)
   12e30:	6022      	str	r2, [r4, #0]
   12e32:	001a      	movs	r2, r3
   12e34:	f7fb f9e6 	bl	e204 <_read>
   12e38:	1c43      	adds	r3, r0, #1
   12e3a:	d103      	bne.n	12e44 <_read_r+0x20>
   12e3c:	6823      	ldr	r3, [r4, #0]
   12e3e:	2b00      	cmp	r3, #0
   12e40:	d000      	beq.n	12e44 <_read_r+0x20>
   12e42:	602b      	str	r3, [r5, #0]
   12e44:	bd70      	pop	{r4, r5, r6, pc}
   12e46:	46c0      	nop			; (mov r8, r8)
   12e48:	20000f9c 	.word	0x20000f9c

00012e4c <_malloc_usable_size_r>:
   12e4c:	1f0b      	subs	r3, r1, #4
   12e4e:	681b      	ldr	r3, [r3, #0]
   12e50:	1f18      	subs	r0, r3, #4
   12e52:	2b00      	cmp	r3, #0
   12e54:	da01      	bge.n	12e5a <_malloc_usable_size_r+0xe>
   12e56:	580b      	ldr	r3, [r1, r0]
   12e58:	18c0      	adds	r0, r0, r3
   12e5a:	4770      	bx	lr
   12e5c:	000081c6 	.word	0x000081c6
   12e60:	0000819e 	.word	0x0000819e
   12e64:	000081a2 	.word	0x000081a2
   12e68:	000081a6 	.word	0x000081a6
   12e6c:	000081aa 	.word	0x000081aa
   12e70:	000081ae 	.word	0x000081ae
   12e74:	000081b2 	.word	0x000081b2
   12e78:	000081b6 	.word	0x000081b6
   12e7c:	000081ba 	.word	0x000081ba
   12e80:	000081be 	.word	0x000081be
   12e84:	00000100 	.word	0x00000100
   12e88:	0000826e 	.word	0x0000826e
   12e8c:	00008246 	.word	0x00008246
   12e90:	0000824c 	.word	0x0000824c
   12e94:	00008252 	.word	0x00008252
   12e98:	00008252 	.word	0x00008252
   12e9c:	00008258 	.word	0x00008258
   12ea0:	00008258 	.word	0x00008258
   12ea4:	00008258 	.word	0x00008258
   12ea8:	0000825e 	.word	0x0000825e
   12eac:	00008264 	.word	0x00008264
   12eb0:	0000869a 	.word	0x0000869a
   12eb4:	00008676 	.word	0x00008676
   12eb8:	0000867c 	.word	0x0000867c
   12ebc:	00008682 	.word	0x00008682
   12ec0:	00008682 	.word	0x00008682
   12ec4:	00008688 	.word	0x00008688
   12ec8:	00008688 	.word	0x00008688
   12ecc:	00008688 	.word	0x00008688
   12ed0:	0000868e 	.word	0x0000868e
   12ed4:	00008694 	.word	0x00008694

00012ed8 <__FUNCTION__.14220>:
   12ed8:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   12ee8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   12ef8:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   12f08:	6320746c 0000646d 00009780 00009750     lt cmd......P...
   12f18:	00009748 00009760 00009758 00009778     H...`...X...x...
   12f28:	00009768 00009770                       h...p...

00012f30 <__FUNCTION__.13058>:
   12f30:	5f666968 646e6573 00000000              hif_send....

00012f3c <__FUNCTION__.13068>:
   12f3c:	5f666968 00727369                       hif_isr.

00012f44 <__FUNCTION__.13074>:
   12f44:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00012f54 <__FUNCTION__.13086>:
   12f54:	5f666968 65636572 00657669              hif_receive.

00012f60 <__FUNCTION__.13102>:
   12f60:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   12f70:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   12f80:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   12f90:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   12fa0:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   12fb0:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   12fc0:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   12fd0:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   12fe0:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
   12ff0:	6c616320 6361626c 7369206b 746f6e20      callback is not
   13000:	67657220 65747369 00646572 6b6f6353      registered.Scok
   13010:	63207465 626c6c61 206b6361 6e207369     et callback is n
   13020:	7220746f 73696765 65726574 00000064     ot registered...
   13030:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   13040:	20746f6e 69676572 72657473 00006465     not registered..
   13050:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   13060:	6e207369 7220746f 73696765 65726574     is not registere
   13070:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
   13080:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   13090:	64657265 00000000 66696828 6e692029     ered....(hif) in
   130a0:	696c6176 72672064 2070756f 00004449     valid group ID..
   130b0:	66696828 6f682029 61207473 64207070     (hif) host app d
   130c0:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   130d0:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   130e0:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
   130f0:	66696828 61462029 2065736c 65746e69     (hif) False inte
   13100:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   13110:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
   13120:	7265746e 74707572 67657220 00000000     nterrupt reg....
   13130:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
   13140:	656c646e 746e6920 75727265 25207470     ndle interrupt %
   13150:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
   13160:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   13170:	696c6176 72612064 656d7567 0000746e     valid argument..
   13180:	20505041 75716552 65747365 69532064     APP Requested Si
   13190:	6920657a 616c2073 72656772 61687420     ze is larger tha
   131a0:	6874206e 65722065 65766963 75622064     n the recived bu
   131b0:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
   131c0:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
   131d0:	65747365 64412064 73657264 65622073     ested Address be
   131e0:	646e6f79 65687420 63657220 64657669     yond the recived
   131f0:	66756220 20726566 72646461 20737365      buffer address 
   13200:	20646e61 676e656c 00006874 20705247     and length..GRp 
   13210:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
   13220:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
   13230:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
   13240:	6b617720 74207075 63206568 00706968      wakup the chip.

00013250 <__FUNCTION__.13037>:
   13250:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0001325c <__FUNCTION__.13066>:
   1325c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0001326c <__FUNCTION__.13094>:
   1326c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   1327c:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   1328c:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   1329c:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   132ac:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   132bc:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   132cc:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   132dc:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   132ec:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   132fc:	20706557 2079656b 65646e69 64252078     Wep key index %d
   1330c:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   1331c:	2079656b 676e656c 25206874 00000a64     key length %d...
   1332c:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   1333c:	656c2079 6874676e 00000000 65646e75     y length....unde
   1334c:	656e6966 65732064 79742063 00006570     fined sec type..
   1335c:	6d726946 65726177 72657620 3a202020     Firmware ver   :
   1336c:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
   1337c:	0a752520 00000000 6d726946 65726177      %u.....Firmware
   1338c:	69754220 2520646c 69542073 2520656d      Build %s Time %
   1339c:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
   133ac:	69726420 20726576 20726576 7525203a      driver ver : %u
   133bc:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
   133cc:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
   133dc:	353a3931 36343a37 00000000 20727041     19:57:46....Apr 
   133ec:	32203332 00373130 76697244 62207265     23 2017.Driver b
   133fc:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
   1340c:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
   1341c:	65562065 6f697372 0000006e              e Version...

00013428 <__FUNCTION__.12900>:
   13428:	70696863 6b61775f 00000065              chip_wake...

00013434 <__FUNCTION__.12949>:
   13434:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   13444:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   13454:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
   13464:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
   13474:	74206465 6177206f 2070756b 20656874     ed to wakup the 
   13484:	70696863 00000000 76697244 65567265     chip....DriverVe
   13494:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

000134a4 <__FUNCTION__.12947>:
   134a4:	645f6d6e 695f7672 0074696e              nm_drv_init.

000134b0 <__FUNCTION__.12954>:
   134b0:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   134c0:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   134d0:	6965645f 2074696e 6c696166 00000000     _deinit fail....
   134e0:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   134f0:	73616c66 69642068 6c626173 61662065     flash disable fa
   13500:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   13510:	6c696166 696e6920 75622074 00000073     fail init bus...
   13520:	6c696166 74206465 6e65206f 656c6261     failed to enable
   13530:	746e6920 75727265 2e737470 0000002e      interrupts.....
   13540:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   13550:	6e69206c 62207469 00007375 70696843     l init bus..Chip
   13560:	20444920 0a786c25 00000000 0000a77c      ID %lx.....|...
   13570:	0000a77c 0000a7ac 0000a72e 0000a752     |...........R...
   13580:	0000a760 0000a792 0000a792 0000a7da     `...............
   13590:	0000a712 0000a814 0000a814 0000a814     ................
   135a0:	0000a814 0000a76e cac4c9c3              ....n.......

000135ac <__FUNCTION__.12253>:
   135ac:	5f697073 00646d63                       spi_cmd.

000135b4 <__FUNCTION__.12260>:
   135b4:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

000135c4 <__FUNCTION__.12269>:
   135c4:	5f697073 5f646d63 00707372              spi_cmd_rsp.

000135d0 <__FUNCTION__.12285>:
   135d0:	5f697073 61746164 6165725f 00000064     spi_data_read...

000135e0 <__FUNCTION__.12300>:
   135e0:	5f697073 61746164 6972775f 00006574     spi_data_write..

000135f0 <__FUNCTION__.12312>:
   135f0:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00013600 <__FUNCTION__.12323>:
   13600:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00013610 <__FUNCTION__.12335>:
   13610:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00013620 <__FUNCTION__.12348>:
   13620:	735f6d6e 725f6970 00646165              nm_spi_read.

0001362c <__FUNCTION__.12369>:
   1362c:	735f6d6e 695f6970 0074696e              nm_spi_init.

00013638 <crc7_syndrome_table>:
   13638:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   13648:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   13658:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   13668:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   13678:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   13688:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   13698:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   136a8:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   136b8:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   136c8:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   136d8:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   136e8:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   136f8:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   13708:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   13718:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   13728:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   13738:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13748:	6e692064 6e726574 72206c61 20646165     d internal read 
   13758:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   13768:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   13778:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
   13788:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13798:	6e692064 6e726574 72206c61 20646165     d internal read 
   137a8:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
   137b8:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   137c8:	6e726574 77206c61 65746972 6f727020     ternal write pro
   137d8:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
   137e8:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   137f8:	20646d63 64616572 69686320 64692070     cmd read chip id
   13808:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13818:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   13828:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   13838:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13848:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   13858:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   13868:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   13878:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   13888:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   13898:	00000000 65736552 6e612074 65722064     ....Reset and re
   138a8:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
   138b8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   138c8:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   138d8:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   138e8:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   138f8:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   13908:	69727720 62206574 6b636f6c 30252820      write block (%0
   13918:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   13928:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   13938:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   13948:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   13958:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13968:	61642064 62206174 6b636f6c 69727720     d data block wri
   13978:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   13988:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13998:	656c6961 61642064 62206174 6b636f6c     ailed data block
   139a8:	63726320 69727720 202c6574 20737562      crc write, bus 
   139b8:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
   139c8:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   139d8:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
   139e8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   139f8:	72206174 6f707365 2065736e 64616572     ta response read
   13a08:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   13a18:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   13a28:	206b636f 61746164 69727720 2e2e6574     ock data write..
   13a38:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13a48:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   13a58:	73756220 72726520 2e2e726f 0000002e      bus error......
   13a68:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13a78:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   13a88:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   13a98:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13aa8:	656c6961 61642064 72206174 6f707365     ailed data respo
   13ab8:	2065736e 64616572 7562202c 72652073     nse read, bus er
   13ac8:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   13ad8:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   13ae8:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   13af8:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   13b08:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   13b18:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   13b28:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   13b38:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   13b48:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   13b58:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   13b68:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   13b78:	72202c64 20646165 20676572 38302528     d, read reg (%08
   13b88:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   13b98:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   13ba8:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   13bb8:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   13bc8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   13bd8:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   13be8:	6e612074 65722064 20797274 25206425     t and retry %d %
   13bf8:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   13c08:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   13c18:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
   13c28:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13c38:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   13c48:	74697277 65722065 25282067 29783830     write reg (%08x)
   13c58:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
   13c68:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   13c78:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
   13c88:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
   13c98:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   13ca8:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   13cb8:	4449206e 25203d20 000a0d64 0000c110     n ID = %d.......
   13cc8:	0000c110 0000c0ec 0000c110 0000c0ec     ................
   13cd8:	0000c0d2 0000c0d2 0000c110 0000c110     ................
   13ce8:	0000c110 0000c110 0000c110 0000c110     ................
   13cf8:	0000c110 0000c110 0000c110 0000c110     ................
   13d08:	0000c110 0000c110 0000c110 0000c110     ................
   13d18:	0000c110 0000c110 0000c110 0000c110     ................
   13d28:	0000c110 0000c110 0000c110 0000c110     ................
   13d38:	0000c110 0000c110 0000c110 0000c110     ................
   13d48:	0000c110 0000c110 0000c110 0000c110     ................
   13d58:	0000c110 0000c110 0000c110 0000c110     ................
   13d68:	0000c110 0000c110 0000c110 0000c110     ................
   13d78:	0000c110 0000c110 0000c110 0000c110     ................
   13d88:	0000c110 0000c110 0000c110 0000c110     ................
   13d98:	0000c110 0000c110 0000c110 0000c110     ................
   13da8:	0000c110 0000c110 0000c110 0000c110     ................
   13db8:	0000c110 0000c110 0000c110 0000c0ec     ................
   13dc8:	0000c0ec 0000c0f4 0000c0f4 0000c0f4     ................
   13dd8:	0000c0f4 42000800 42000c00 42001000     .......B...B...B
   13de8:	42001400 42001800 42001c00 0000d33a     ...B...B...B:...
   13df8:	0000d336 0000d336 0000d398 0000d398     6...6...........
   13e08:	0000d34e 0000d340 0000d354 0000d386     N...@...T.......
   13e18:	0000d558 0000d538 0000d538 0000d5c4     X...8...8.......
   13e28:	0000d54a 0000d566 0000d53c 0000d574     J...f...<...t...
   13e38:	0000d5b4                                ....

00013e3c <_tcc_apbcmasks>:
   13e3c:	00000100 00000200 00000400              ............

00013e48 <_tcc_cc_nums>:
   13e48:	00020204                                ....

00013e4c <_tcc_gclk_ids>:
   13e4c:	001b1a1a                                ....

00013e50 <_tcc_maxs>:
   13e50:	00ffffff 00ffffff 0000ffff              ............

00013e5c <_tcc_ow_nums>:
   13e5c:	00020408                                ....

00013e60 <_tcc_intflag>:
   13e60:	00000001 00000002 00000004 00000008     ................
   13e70:	00001000 00002000 00004000 00008000     ..... ...@......
   13e80:	00010000 00020000 00040000 00080000     ................

00013e90 <tcc_interrupt_vectors.12434>:
   13e90:	0011100f 0000f176 0000f170 0000f16a     ....v...p...j...
   13ea0:	0000f164 0000f17c 0000f184 0000f17c     d...|.......|...
   13eb0:	0000f15e 0000f158 0000f17c 0000f152     ^...X...|...R...
   13ec0:	0000f152 0000f14c 0000f146 0000f184     R...L...F.......
   13ed0:	0000f1ee 0000f1e8 0000f1e2 0000f1dc     ................
   13ee0:	0000f1f4 0000f1fc 0000f1f4 0000f1d6     ................
   13ef0:	0000f1d0 0000f1f4 0000f1ca 0000f1ca     ................
   13f00:	0000f1c4 0000f1be 0000f1fc 0000f268     ............h...
   13f10:	0000f262 0000f25c 0000f256 0000f26e     b...\...V...n...
   13f20:	0000f26e 0000f26e 0000f250 0000f24a     n...n...P...J...
   13f30:	0000f26e 0000f244 0000f244 0000f23e     n...D...D...>...
   13f40:	0000f238 33323130 37363534 62613938     8...0123456789ab
   13f50:	66656463 00000d31 6e617254 72656673     cdef1...Transfer
   13f60:	636e452d 6e69646f 00203a67 6e6e6f43     -Encoding: .Conn
   13f70:	69746365 203a6e6f 00000000 50545448     ection: ....HTTP
   13f80:	0000002f 20544547 00000000 54534f50     /...GET ....POST
   13f90:	00000020 454c4544 00204554 20545550      ...DELETE .PUT 
   13fa0:	00000000 4954504f 20534e4f 00000000     ....OPTIONS ....
   13fb0:	44414548 00000020 54544820 2e312f50     HEAD ... HTTP/1.
   13fc0:	000a0d31 72657355 6567412d 203a746e     1...User-Agent: 
   13fd0:	00000000 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   13fe0:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   13ff0:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   14000:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   14010:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   14020:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   14030:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   14040:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   14050:	676e654c 203a6874 00000000 656d7461     Length: ....atme
   14060:	2e312f6c 00322e30 70747468 002f2f3a     l/1.0.2.http://.
   14070:	70747468 2f2f3a73 00000000 42002000     https://..... .B
   14080:	42002400 42002800 0000fad2 0000fae0     .$.B.(.B........
   14090:	0000faf2 0000fb52 0000fcac 70747468     ....R.......http
   140a0:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   140b0:	5448203a 63205054 6e65696c 6f732074     : HTTP client so
   140c0:	74656b63 6e6f6320 7463656e 0d2e6465     cket connected..
   140d0:	00000000 70747468 696c635f 5f746e65     ....http_client_
   140e0:	6c6c6163 6b636162 6572203a 73657571     callback: reques
   140f0:	6f632074 656c706d 2e646574 0000000d     t completed.....
   14100:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   14110:	6b636162 6572203a 76696563 72206465     back: received r
   14120:	6f707365 2065736e 64207525 20617461     esponse %u data 
   14130:	657a6973 0d752520 0000000a 6c6c6143     size %u.....Call
   14140:	6b636162 5243203a 6f642043 6f6c6e77     back: CRC downlo
   14150:	2e2e6461 2e2e2e2e 0000000d 65636552     ad..........Rece
   14160:	64657669 0d782520 0000000a 70747468     ived %x.....http
   14170:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   14180:	5548435f 44454b4e 54414420 72203a41     _CHUNKED DATA: r
   14190:	69656365 20646576 70736572 65736e6f     eceived response
   141a0:	74616420 69732061 2520657a 000a0d75      data size %u...
   141b0:	73726946 6c622074 206b636f 676e656c     First block leng
   141c0:	25206874 52432064 25203a43 000a0d75     th %d CRC: %u...
   141d0:	636f6c42 656c206b 6874676e 20642520     Block length %d 
   141e0:	3a435243 0d752520 0000000a 70747468     CRC: %u.....http
   141f0:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   14200:	6964203a 6e6f6373 7463656e 206e6f69     : disconnection 
   14210:	73616572 253a6e6f 000a0d64 5454514d     reason:%d...MQTT
   14220:	696e6920 6c616974 74617a69 206e6f69      initialization 
   14230:	6c696166 202e6465 6f727245 6f632072     failed. Error co
   14240:	69206564 25282073 0a0d2964 00000000     de is (%d)......
   14250:	5454514d 67657220 65747369 61632072     MQTT register ca
   14260:	61626c6c 66206b63 656c6961 45202e64     llback failed. E
   14270:	726f7272 646f6320 73692065 64252820     rror code is (%d
   14280:	000a0d29 6d612049 72696620 7261776d     )...I am firmwar
   14290:	65762065 6f697372 6425206e 00000a0d     e version %d....
   142a0:	72657355 25203a20 000a0d73 73736150     User : %s...Pass
   142b0:	64726f77 25203a20 000a0d73 69706f54     word : %s...Topi
   142c0:	203a2063 0a0d7325 00000000 6e69616d     c : %s......main
   142d0:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   142e0:	6c6c6163 72726520 2821726f 0d296425     call error!(%d).
   142f0:	0000000a 736e6553 25206465 000a0d64     ....Sensed %d...
   14300:	74697257 69665f65 61776d72 77206572     Write_firmware w
   14310:	74207361 0d657572 00000000 6e69616d     as true.....main
   14320:	326d203a 69775f6d 645f6966 696e6965     : m2m_wifi_deini
   14330:	61632074 65206c6c 726f7272 64252821     t call error!(%d
   14340:	000a0d29 666e6f63 72756769 74685f65     )...configure_ht
   14350:	635f7074 6e65696c 48203a74 20505454     tp_client: HTTP 
   14360:	65696c63 6920746e 6974696e 7a696c61     client initializ
   14370:	6f697461 6166206e 64656c69 72282021     ation failed! (r
   14380:	25207365 0a0d2964 00000000 6e69616d     es %d)......main
   14390:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   143a0:	6c6c6163 72726520 2021726f 73657228     call error! (res
   143b0:	29642520 00000a0d 76727553 64657669      %d)....Survived
   143c0:	74746820 6c632070 746e6569 74657320      http client set
   143d0:	000d7075 63657845 6e697475 6d692067     up..Executing im
   143e0:	3a656761 2c642520 204c4420 203a6f74     age: %d, DL to: 
   143f0:	0a0d6425 00000000 6e776f64 64616f6c     %d......download
   14400:	7269665f 7261776d 63203a65 656e6e6f     _firmware: conne
   14410:	6e697463 6f742067 46695720 50412069     cting to WiFi AP
   14420:	2e732520 0a0d2e2e 00000000 6e776f64      %s.........down
   14430:	64616f6c 7269665f 7261776d 64203a65     load_firmware: d
   14440:	2e656e6f 0000000d 636c6143 74616c75     one.....Calculat
   14450:	43206465 203a4352 0a0d7825 00000000     ed CRC: %x......
   14460:	614d0d0a 203a6e69 656e6f44 776f6420     ..Main: Done dow
   14470:	616f6c6e 676e6964 72696620 7261776d     nloading firmwar
   14480:	6e612065 52432064 000d0a43 614d0d0a     e and CRC.....Ma
   14490:	203a6e69 20435243 4354414d 21444548     in: CRC MATCHED!
   144a0:	61747320 6e697472 69662067 61776d72      starting firmwa
   144b0:	75206572 61726770 202e6564 00000d0a     re upgrade. ....
   144c0:	4d200d0a 3a6e6961 43524320 65684320     .. Main: CRC Che
   144d0:	46206b63 216c6961 00000d0a              ck Fail!....

000144dc <main_mqtt_broker>:
   144dc:	2e31316d 756f6c63 74716d64 6f632e74     m11.cloudmqtt.co
   144ec:	0000006d 6e6e6f43 20746365 6c696166     m...Connect fail
   144fc:	206f7420 76726573 25287265 20212973      to server(%s)! 
   1450c:	72746572 74692079 74756120 74616d6f     retry it automat
   1451c:	6c616369 0d2e796c 0000000a 69797254     ically......Tryi
   1452c:	7420676e 7573206f 2e2e2e62 0000000d     ng to sub.......
   1453c:	74616863 00000000 74736150 61686320     chat....Past cha
   1454c:	75732074 00000d62 736e6573 0000726f     t sub...sensor..
   1455c:	74736150 6e657320 20726f73 0d627573     Past sensor sub.
   1456c:	00000000 75746361 726f7461 00000000     ....actuator....
   1457c:	74736150 74636120 6f746175 75732072     Past actuator su
   1458c:	00000d62 72677075 00656461 74736150     b...upgrade.Past
   1459c:	67707520 65646172 62757320 0000000d      upgrade sub....
   145ac:	736e6573 00000065 74736150 6e657320     sense...Past sen
   145bc:	73206573 000d6275 70657250 74617261     se sub..Preparat
   145cc:	206e6f69 7420666f 63206568 20746168     ion of the chat 
   145dc:	20736168 6e656562 6d6f6320 74656c70     has been complet
   145ec:	0d2e6465 00000000 5454514d 6f726220     ed......MQTT bro
   145fc:	2072656b 6c636564 20656e69 72756f79     ker decline your
   1460c:	63636120 21737365 72726520 6320726f      access! error c
   1461c:	2065646f 0a0d6425 00000000 203e3e20     ode %d...... >> 
   1462c:	00000000 3e207325 0000203e 72677055     ....%s >> ..Upgr
   1463c:	20656461 75716572 65747365 00000d64     ade requested...
   1464c:	00006425 736e6553 7220726f 65757165     %d..Sensor reque
   1465c:	64657473 6553203a 6465736e 0d642520     sted: Sensed %d.
   1466c:	0000000a 5454514d 73696420 6e6e6f63     ....MQTT disconn
   1467c:	65746365 00000d64 6f736572 5f65766c     ected...resolve_
   1468c:	203a6263 49207325 64612050 73657264     cb: %s IP addres
   1469c:	73692073 2e642520 252e6425 64252e64     s is %d.%d.%d.%d
   146ac:	0a0d0a0d 00000000 72617473 6f645f74     ........start_do
   146bc:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   146cc:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   146dc:	00000000 72617473 6f645f74 6f6c6e77     ....start_downlo
   146ec:	203a6461 75716572 20747365 73207369     ad: request is s
   146fc:	20746e65 65726c61 2e796461 0000000d     ent already.....
   1470c:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   1471c:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   1472c:	726c6120 79646165 00000d2e 72617473      already....star
   1473c:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   1474c:	20676e69 50545448 71657220 74736575     ing HTTP request
   1475c:	0d2e2e2e 00000000 70747468 2f2f3a73     ........https://
   1476c:	2e777777 73616573 6570752e 652e6e6e     www.seas.upenn.e
   1477c:	7e2f7564 69707372 2f726563 622e5746     du/~rspicer/FW.b
   1478c:	00006e69 72617473 6f645f74 6f6c6e77     in..start_downlo
   1479c:	43206461 203a4352 646e6573 20676e69     ad CRC: sending 
   147ac:	50545448 71657220 74736575 0d2e2e2e     HTTP request....
   147bc:	00000000 70747468 2f2f3a73 2e777777     ....https://www.
   147cc:	73616573 6570752e 652e6e6e 7e2f7564     seas.upenn.edu/~
   147dc:	69707372 2f726563 435f5746 622e4352     rspicer/FW_CRC.b
   147ec:	00006e69 462d6957 6f632069 63656e6e     in..Wi-Fi connec
   147fc:	0d646574 00000000 462d6957 69642069     ted.....Wi-Fi di
   1480c:	6e6f6373 7463656e 000d6465 636c6557     sconnected..Welc
   1481c:	48656d6f 00006c61 732d7068 70757465     omeHal..hp-setup
   1482c:	0000312d 462d6957 50492069 20736920     -1..Wi-Fi IP is 
   1483c:	252e7525 75252e75 0d75252e 0000000a     %u.%u.%u.%u.....
   1484c:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   1485c:	4f435f49 43454e4e 0d444554 00000000     I_CONNECTED.....
   1486c:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   1487c:	49445f49 4e4f4353 5443454e 000d4445     I_DISCONNECTED..
   1488c:	69666977 3a62635f 20504920 72646461     wifi_cb: IP addr
   1489c:	20737365 25207369 75252e75 2e75252e     ess is %u.%u.%u.
   148ac:	0a0d7525 00000000 70696843 64696420     %u......Chip did
   148bc:	7720746e 20656b61 0000000d 7349514d     nt wake ....MQIs
   148cc:	00007064                                dp..

000148d0 <_global_impure_ptr>:
   148d0:	20000020                                 .. 

000148d4 <__sf_fake_stderr>:
	...

000148f4 <__sf_fake_stdin>:
	...

00014914 <__sf_fake_stdout>:
	...
   14934:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   14944:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   14954:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   14964:	37363534 62613938 66656463 20200000              456789abcdef.

00014971 <_ctype_>:
   14971:	20202000 20202020 28282020 20282828     .         ((((( 
   14981:	20202020 20202020 20202020 20202020                     
   14991:	10108820 10101010 10101010 10101010      ...............
   149a1:	04040410 04040404 10040404 10101010     ................
   149b1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   149c1:	01010101 01010101 01010101 10101010     ................
   149d1:	42421010 42424242 02020202 02020202     ..BBBBBB........
   149e1:	02020202 02020202 02020202 10101010     ................
   149f1:	00000020 00000000 00000000 00000000      ...............
	...

00014a74 <_init>:
   14a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a76:	46c0      	nop			; (mov r8, r8)
   14a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14a7a:	bc08      	pop	{r3}
   14a7c:	469e      	mov	lr, r3
   14a7e:	4770      	bx	lr

00014a80 <__init_array_start>:
   14a80:	000080dd 	.word	0x000080dd

00014a84 <_fini>:
   14a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a86:	46c0      	nop			; (mov r8, r8)
   14a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14a8a:	bc08      	pop	{r3}
   14a8c:	469e      	mov	lr, r3
   14a8e:	4770      	bx	lr

00014a90 <__fini_array_start>:
   14a90:	000080b5 	.word	0x000080b5
