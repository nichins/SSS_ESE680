
ESE680A_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045ec  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  000045ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c8  20000070  0000465c  00020070  2**2
                  ALLOC
  3 .stack        00002000  20000138  00004724  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001aee4  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023fd  00000000  00000000  0003afd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001fa7  00000000  00000000  0003d3d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000660  00000000  00000000  0003f379  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000540  00000000  00000000  0003f9d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019858  00000000  00000000  0003ff19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000bc20  00000000  00000000  00059771  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00087360  00000000  00000000  00065391  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001bb4  00000000  00000000  000ec6f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002138 	.word	0x20002138
       4:	00002745 	.word	0x00002745
       8:	0000283d 	.word	0x0000283d
       c:	0000283d 	.word	0x0000283d
	...
      2c:	0000283d 	.word	0x0000283d
	...
      38:	0000283d 	.word	0x0000283d
      3c:	0000283d 	.word	0x0000283d
      40:	0000283d 	.word	0x0000283d
      44:	0000283d 	.word	0x0000283d
      48:	0000283d 	.word	0x0000283d
      4c:	0000283d 	.word	0x0000283d
      50:	0000283d 	.word	0x0000283d
      54:	0000283d 	.word	0x0000283d
      58:	0000283d 	.word	0x0000283d
      5c:	0000283d 	.word	0x0000283d
      60:	0000283d 	.word	0x0000283d
      64:	00000d91 	.word	0x00000d91
      68:	00000da9 	.word	0x00000da9
      6c:	00000dc1 	.word	0x00000dc1
      70:	00000dd9 	.word	0x00000dd9
      74:	00000df1 	.word	0x00000df1
      78:	00000e09 	.word	0x00000e09
      7c:	0000283d 	.word	0x0000283d
      80:	0000283d 	.word	0x0000283d
      84:	0000283d 	.word	0x0000283d
      88:	0000283d 	.word	0x0000283d
      8c:	0000283d 	.word	0x0000283d
      90:	0000283d 	.word	0x0000283d
	...
      9c:	0000283d 	.word	0x0000283d
      a0:	0000283d 	.word	0x0000283d
      a4:	0000283d 	.word	0x0000283d
      a8:	0000283d 	.word	0x0000283d
      ac:	0000283d 	.word	0x0000283d
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	000045ec 	.word	0x000045ec

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	000045ec 	.word	0x000045ec
     10c:	000045ec 	.word	0x000045ec
     110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     118:	46c0      	nop			; (mov r8, r8)
     11a:	46bd      	mov	sp, r7
     11c:	bd80      	pop	{r7, pc}
     11e:	46c0      	nop			; (mov r8, r8)

00000120 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     120:	b580      	push	{r7, lr}
     122:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     124:	2000      	movs	r0, #0
     126:	4b0f      	ldr	r3, [pc, #60]	; (164 <delay_init+0x44>)
     128:	4798      	blx	r3
     12a:	0002      	movs	r2, r0
     12c:	4b0e      	ldr	r3, [pc, #56]	; (168 <delay_init+0x48>)
     12e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     130:	4b0d      	ldr	r3, [pc, #52]	; (168 <delay_init+0x48>)
     132:	6818      	ldr	r0, [r3, #0]
     134:	4b0d      	ldr	r3, [pc, #52]	; (16c <delay_init+0x4c>)
     136:	22fa      	movs	r2, #250	; 0xfa
     138:	0091      	lsls	r1, r2, #2
     13a:	4798      	blx	r3
     13c:	0003      	movs	r3, r0
     13e:	001a      	movs	r2, r3
     140:	4b09      	ldr	r3, [pc, #36]	; (168 <delay_init+0x48>)
     142:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     144:	4b08      	ldr	r3, [pc, #32]	; (168 <delay_init+0x48>)
     146:	6818      	ldr	r0, [r3, #0]
     148:	4b08      	ldr	r3, [pc, #32]	; (16c <delay_init+0x4c>)
     14a:	22fa      	movs	r2, #250	; 0xfa
     14c:	0091      	lsls	r1, r2, #2
     14e:	4798      	blx	r3
     150:	0003      	movs	r3, r0
     152:	001a      	movs	r2, r3
     154:	4b06      	ldr	r3, [pc, #24]	; (170 <delay_init+0x50>)
     156:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     158:	4b06      	ldr	r3, [pc, #24]	; (174 <delay_init+0x54>)
     15a:	2205      	movs	r2, #5
     15c:	601a      	str	r2, [r3, #0]
}
     15e:	46c0      	nop			; (mov r8, r8)
     160:	46bd      	mov	sp, r7
     162:	bd80      	pop	{r7, pc}
     164:	000022f9 	.word	0x000022f9
     168:	20000000 	.word	0x20000000
     16c:	00003095 	.word	0x00003095
     170:	20000004 	.word	0x20000004
     174:	e000e010 	.word	0xe000e010

00000178 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     178:	b580      	push	{r7, lr}
     17a:	b082      	sub	sp, #8
     17c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     17e:	4b10      	ldr	r3, [pc, #64]	; (1c0 <cpu_irq_enter_critical+0x48>)
     180:	681b      	ldr	r3, [r3, #0]
     182:	2b00      	cmp	r3, #0
     184:	d112      	bne.n	1ac <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     186:	f3ef 8310 	mrs	r3, PRIMASK
     18a:	607b      	str	r3, [r7, #4]
  return(result);
     18c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     18e:	2b00      	cmp	r3, #0
     190:	d109      	bne.n	1a6 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     192:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     194:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     198:	4b0a      	ldr	r3, [pc, #40]	; (1c4 <cpu_irq_enter_critical+0x4c>)
     19a:	2200      	movs	r2, #0
     19c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     19e:	4b0a      	ldr	r3, [pc, #40]	; (1c8 <cpu_irq_enter_critical+0x50>)
     1a0:	2201      	movs	r2, #1
     1a2:	701a      	strb	r2, [r3, #0]
     1a4:	e002      	b.n	1ac <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1a6:	4b08      	ldr	r3, [pc, #32]	; (1c8 <cpu_irq_enter_critical+0x50>)
     1a8:	2200      	movs	r2, #0
     1aa:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1ac:	4b04      	ldr	r3, [pc, #16]	; (1c0 <cpu_irq_enter_critical+0x48>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	1c5a      	adds	r2, r3, #1
     1b2:	4b03      	ldr	r3, [pc, #12]	; (1c0 <cpu_irq_enter_critical+0x48>)
     1b4:	601a      	str	r2, [r3, #0]
}
     1b6:	46c0      	nop			; (mov r8, r8)
     1b8:	46bd      	mov	sp, r7
     1ba:	b002      	add	sp, #8
     1bc:	bd80      	pop	{r7, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	2000008c 	.word	0x2000008c
     1c4:	20000008 	.word	0x20000008
     1c8:	20000090 	.word	0x20000090

000001cc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     1cc:	b580      	push	{r7, lr}
     1ce:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1d0:	4b0b      	ldr	r3, [pc, #44]	; (200 <cpu_irq_leave_critical+0x34>)
     1d2:	681b      	ldr	r3, [r3, #0]
     1d4:	1e5a      	subs	r2, r3, #1
     1d6:	4b0a      	ldr	r3, [pc, #40]	; (200 <cpu_irq_leave_critical+0x34>)
     1d8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1da:	4b09      	ldr	r3, [pc, #36]	; (200 <cpu_irq_leave_critical+0x34>)
     1dc:	681b      	ldr	r3, [r3, #0]
     1de:	2b00      	cmp	r3, #0
     1e0:	d10a      	bne.n	1f8 <cpu_irq_leave_critical+0x2c>
     1e2:	4b08      	ldr	r3, [pc, #32]	; (204 <cpu_irq_leave_critical+0x38>)
     1e4:	781b      	ldrb	r3, [r3, #0]
     1e6:	b2db      	uxtb	r3, r3
     1e8:	2b00      	cmp	r3, #0
     1ea:	d005      	beq.n	1f8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     1ec:	4b06      	ldr	r3, [pc, #24]	; (208 <cpu_irq_leave_critical+0x3c>)
     1ee:	2201      	movs	r2, #1
     1f0:	701a      	strb	r2, [r3, #0]
     1f2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     1f6:	b662      	cpsie	i
	}
}
     1f8:	46c0      	nop			; (mov r8, r8)
     1fa:	46bd      	mov	sp, r7
     1fc:	bd80      	pop	{r7, pc}
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	2000008c 	.word	0x2000008c
     204:	20000090 	.word	0x20000090
     208:	20000008 	.word	0x20000008

0000020c <nvm_is_ready>:
#endif
	fusebits[1] &= (~WDT_FUSES_EWOFFSET_Msk);
	fusebits[1] |= fb->wdt_early_warning_offset << WDT_FUSES_EWOFFSET_Pos;

	fusebits[1] &= (~WDT_FUSES_WEN_Msk);
	fusebits[1] |= fb->wdt_window_mode_enable_at_poweron << WDT_FUSES_WEN_Pos;
     20c:	b580      	push	{r7, lr}
     20e:	b082      	sub	sp, #8
     210:	af00      	add	r7, sp, #0
     212:	4b07      	ldr	r3, [pc, #28]	; (230 <nvm_is_ready+0x24>)
     214:	607b      	str	r3, [r7, #4]
     216:	687b      	ldr	r3, [r7, #4]
     218:	7d1b      	ldrb	r3, [r3, #20]
     21a:	b2db      	uxtb	r3, r3
     21c:	001a      	movs	r2, r3
     21e:	2301      	movs	r3, #1

	fusebits[1] &= (~NVMCTRL_FUSES_REGION_LOCKS_Msk);
     220:	4013      	ands	r3, r2
     222:	1e5a      	subs	r2, r3, #1
     224:	4193      	sbcs	r3, r2
     226:	b2db      	uxtb	r3, r3
     228:	0018      	movs	r0, r3
     22a:	46bd      	mov	sp, r7
     22c:	b002      	add	sp, #8
     22e:	bd80      	pop	{r7, pc}
	fusebits[1] |= fb->lockbits << NVMCTRL_FUSES_REGION_LOCKS_Pos;
     230:	41004000 	.word	0x41004000

00000234 <system_apb_clock_set_mask>:
     234:	b580      	push	{r7, lr}
     236:	b082      	sub	sp, #8
     238:	af00      	add	r7, sp, #0
     23a:	0002      	movs	r2, r0
     23c:	6039      	str	r1, [r7, #0]
     23e:	1dfb      	adds	r3, r7, #7
     240:	701a      	strb	r2, [r3, #0]
     242:	1dfb      	adds	r3, r7, #7

	fusebits[1] &= (~FUSES_BOD12_HYST_Msk);
	fusebits[1] |= fb->bod12_hysteresis << FUSES_BOD12_HYST_Pos;
#endif

	error_code = nvm_execute_command(NVM_COMMAND_ERASE_AUX_ROW,NVMCTRL_AUX0_ADDRESS,0);
     244:	781b      	ldrb	r3, [r3, #0]
     246:	2b01      	cmp	r3, #1
     248:	d00a      	beq.n	260 <system_apb_clock_set_mask+0x2c>
     24a:	2b02      	cmp	r3, #2
     24c:	d00f      	beq.n	26e <system_apb_clock_set_mask+0x3a>
     24e:	2b00      	cmp	r3, #0
     250:	d114      	bne.n	27c <system_apb_clock_set_mask+0x48>
     252:	4b0e      	ldr	r3, [pc, #56]	; (28c <system_apb_clock_set_mask+0x58>)
     254:	4a0d      	ldr	r2, [pc, #52]	; (28c <system_apb_clock_set_mask+0x58>)
     256:	6991      	ldr	r1, [r2, #24]
	if (error_code != STATUS_OK) {
     258:	683a      	ldr	r2, [r7, #0]
     25a:	430a      	orrs	r2, r1
     25c:	619a      	str	r2, [r3, #24]
     25e:	e00f      	b.n	280 <system_apb_clock_set_mask+0x4c>
     260:	4b0a      	ldr	r3, [pc, #40]	; (28c <system_apb_clock_set_mask+0x58>)
		return error_code;
     262:	4a0a      	ldr	r2, [pc, #40]	; (28c <system_apb_clock_set_mask+0x58>)
     264:	69d1      	ldr	r1, [r2, #28]
     266:	683a      	ldr	r2, [r7, #0]
     268:	430a      	orrs	r2, r1
	}

	error_code = nvm_execute_command(NVM_COMMAND_PAGE_BUFFER_CLEAR,NVMCTRL_AUX0_ADDRESS,0);
     26a:	61da      	str	r2, [r3, #28]
     26c:	e008      	b.n	280 <system_apb_clock_set_mask+0x4c>
     26e:	4b07      	ldr	r3, [pc, #28]	; (28c <system_apb_clock_set_mask+0x58>)
     270:	4a06      	ldr	r2, [pc, #24]	; (28c <system_apb_clock_set_mask+0x58>)
     272:	6a11      	ldr	r1, [r2, #32]
     274:	683a      	ldr	r2, [r7, #0]
     276:	430a      	orrs	r2, r1
     278:	621a      	str	r2, [r3, #32]
     27a:	e001      	b.n	280 <system_apb_clock_set_mask+0x4c>
     27c:	2317      	movs	r3, #23
	if (error_code != STATUS_OK) {
     27e:	e000      	b.n	282 <system_apb_clock_set_mask+0x4e>
     280:	2300      	movs	r3, #0
     282:	0018      	movs	r0, r3
     284:	46bd      	mov	sp, r7
     286:	b002      	add	sp, #8
		return error_code;
     288:	bd80      	pop	{r7, pc}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	40000400 	.word	0x40000400

00000290 <nvm_set_config>:
	}

	*((uint32_t *)NVMCTRL_AUX0_ADDRESS) = fusebits[0];
     290:	b580      	push	{r7, lr}
     292:	b084      	sub	sp, #16
     294:	af00      	add	r7, sp, #0
     296:	6078      	str	r0, [r7, #4]
     298:	4b31      	ldr	r3, [pc, #196]	; (360 <nvm_set_config+0xd0>)
    *(((uint32_t *)NVMCTRL_AUX0_ADDRESS) + 1) = fusebits[1];
     29a:	60fb      	str	r3, [r7, #12]
     29c:	2104      	movs	r1, #4
     29e:	2001      	movs	r0, #1
     2a0:	4b30      	ldr	r3, [pc, #192]	; (364 <nvm_set_config+0xd4>)
     2a2:	4798      	blx	r3

	error_code = nvm_execute_command(NVM_COMMAND_WRITE_AUX_ROW,NVMCTRL_AUX0_ADDRESS,0);
     2a4:	68fb      	ldr	r3, [r7, #12]
     2a6:	8b1b      	ldrh	r3, [r3, #24]
     2a8:	b29b      	uxth	r3, r3
     2aa:	2220      	movs	r2, #32
     2ac:	32ff      	adds	r2, #255	; 0xff
     2ae:	4313      	orrs	r3, r2
     2b0:	b29a      	uxth	r2, r3
     2b2:	68fb      	ldr	r3, [r7, #12]
     2b4:	831a      	strh	r2, [r3, #24]
     2b6:	4b2c      	ldr	r3, [pc, #176]	; (368 <nvm_set_config+0xd8>)
	if (error_code != STATUS_OK) {
     2b8:	4798      	blx	r3
     2ba:	0003      	movs	r3, r0
     2bc:	001a      	movs	r2, r3
     2be:	2301      	movs	r3, #1
     2c0:	4053      	eors	r3, r2
		return error_code;
     2c2:	b2db      	uxtb	r3, r3
     2c4:	2b00      	cmp	r3, #0
     2c6:	d001      	beq.n	2cc <nvm_set_config+0x3c>
     2c8:	2305      	movs	r3, #5
	}

	return error_code;
     2ca:	e045      	b.n	358 <nvm_set_config+0xc8>
     2cc:	687b      	ldr	r3, [r7, #4]
     2ce:	781b      	ldrb	r3, [r3, #0]
}
     2d0:	021b      	lsls	r3, r3, #8
     2d2:	001a      	movs	r2, r3
     2d4:	23c0      	movs	r3, #192	; 0xc0
     2d6:	009b      	lsls	r3, r3, #2
     2d8:	401a      	ands	r2, r3
     2da:	687b      	ldr	r3, [r7, #4]
     2dc:	785b      	ldrb	r3, [r3, #1]
     2de:	01db      	lsls	r3, r3, #7
     2e0:	0019      	movs	r1, r3
     2e2:	23ff      	movs	r3, #255	; 0xff
     2e4:	400b      	ands	r3, r1
     2e6:	431a      	orrs	r2, r3
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	789b      	ldrb	r3, [r3, #2]
     2ec:	005b      	lsls	r3, r3, #1
     2ee:	0019      	movs	r1, r3
     2f0:	231e      	movs	r3, #30
     2f2:	400b      	ands	r3, r1
     2f4:	431a      	orrs	r2, r3
     2f6:	687b      	ldr	r3, [r7, #4]
     2f8:	78db      	ldrb	r3, [r3, #3]
     2fa:	049b      	lsls	r3, r3, #18
     2fc:	0019      	movs	r1, r3
     2fe:	2380      	movs	r3, #128	; 0x80
#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     300:	02db      	lsls	r3, r3, #11
     302:	400b      	ands	r3, r1
     304:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     306:	687b      	ldr	r3, [r7, #4]
     308:	791b      	ldrb	r3, [r3, #4]
     30a:	041b      	lsls	r3, r3, #16
     30c:	0019      	movs	r1, r3
     30e:	23c0      	movs	r3, #192	; 0xc0
     310:	029b      	lsls	r3, r3, #10
     312:	400b      	ands	r3, r1
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     314:	431a      	orrs	r2, r3
		return STATUS_BUSY;
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
     316:	68fb      	ldr	r3, [r7, #12]
     318:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     31a:	68fb      	ldr	r3, [r7, #12]
     31c:	689b      	ldr	r3, [r3, #8]
     31e:	035b      	lsls	r3, r3, #13
     320:	0f5b      	lsrs	r3, r3, #29
     322:	b2db      	uxtb	r3, r3
     324:	001a      	movs	r2, r3
     326:	2308      	movs	r3, #8
     328:	4093      	lsls	r3, r2
     32a:	b29a      	uxth	r2, r3
     32c:	4b0f      	ldr	r3, [pc, #60]	; (36c <nvm_set_config+0xdc>)
     32e:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     330:	68fb      	ldr	r3, [r7, #12]
     332:	689b      	ldr	r3, [r3, #8]
     334:	b29a      	uxth	r2, r3
     336:	4b0d      	ldr	r3, [pc, #52]	; (36c <nvm_set_config+0xdc>)
     338:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     33a:	687b      	ldr	r3, [r7, #4]
     33c:	785a      	ldrb	r2, [r3, #1]
     33e:	4b0b      	ldr	r3, [pc, #44]	; (36c <nvm_set_config+0xdc>)
     340:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     342:	68fb      	ldr	r3, [r7, #12]
     344:	8b1b      	ldrh	r3, [r3, #24]
     346:	b29b      	uxth	r3, r3
     348:	001a      	movs	r2, r3
     34a:	2380      	movs	r3, #128	; 0x80
     34c:	005b      	lsls	r3, r3, #1
     34e:	4013      	ands	r3, r2
     350:	d001      	beq.n	356 <nvm_set_config+0xc6>
		return STATUS_ERR_IO;
     352:	2310      	movs	r3, #16
     354:	e000      	b.n	358 <nvm_set_config+0xc8>
	}

	return STATUS_OK;
     356:	2300      	movs	r3, #0
}
     358:	0018      	movs	r0, r3
     35a:	46bd      	mov	sp, r7
     35c:	b004      	add	sp, #16
     35e:	bd80      	pop	{r7, pc}
     360:	41004000 	.word	0x41004000
     364:	00000235 	.word	0x00000235
     368:	0000020d 	.word	0x0000020d
     36c:	20000094 	.word	0x20000094

00000370 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     370:	b580      	push	{r7, lr}
     372:	b086      	sub	sp, #24
     374:	af00      	add	r7, sp, #0
     376:	60b9      	str	r1, [r7, #8]
     378:	607a      	str	r2, [r7, #4]
     37a:	230f      	movs	r3, #15
     37c:	18fb      	adds	r3, r7, r3
     37e:	1c02      	adds	r2, r0, #0
     380:	701a      	strb	r2, [r3, #0]
	uint32_t temp;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     382:	4b38      	ldr	r3, [pc, #224]	; (464 <nvm_execute_command+0xf4>)
     384:	881b      	ldrh	r3, [r3, #0]
     386:	001a      	movs	r2, r3
     388:	4b36      	ldr	r3, [pc, #216]	; (464 <nvm_execute_command+0xf4>)
     38a:	885b      	ldrh	r3, [r3, #2]
     38c:	435a      	muls	r2, r3
     38e:	68bb      	ldr	r3, [r7, #8]
     390:	429a      	cmp	r2, r3
     392:	d209      	bcs.n	3a8 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     394:	68bb      	ldr	r3, [r7, #8]
     396:	4a34      	ldr	r2, [pc, #208]	; (468 <nvm_execute_command+0xf8>)
     398:	4293      	cmp	r3, r2
     39a:	d903      	bls.n	3a4 <nvm_execute_command+0x34>
     39c:	68bb      	ldr	r3, [r7, #8]
     39e:	4a33      	ldr	r2, [pc, #204]	; (46c <nvm_execute_command+0xfc>)
     3a0:	4293      	cmp	r3, r2
     3a2:	d901      	bls.n	3a8 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     3a4:	2318      	movs	r3, #24
     3a6:	e058      	b.n	45a <nvm_execute_command+0xea>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     3a8:	4b31      	ldr	r3, [pc, #196]	; (470 <nvm_execute_command+0x100>)
     3aa:	617b      	str	r3, [r7, #20]

	/* turn off cache before issuing flash commands */
	temp = nvm_module->CTRLB.reg;
     3ac:	697b      	ldr	r3, [r7, #20]
     3ae:	685b      	ldr	r3, [r3, #4]
     3b0:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((temp &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = temp | NVMCTRL_CTRLB_CACHEDIS;
     3b2:	693b      	ldr	r3, [r7, #16]
     3b4:	2280      	movs	r2, #128	; 0x80
     3b6:	02d2      	lsls	r2, r2, #11
     3b8:	431a      	orrs	r2, r3
     3ba:	697b      	ldr	r3, [r7, #20]
     3bc:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     3be:	697b      	ldr	r3, [r7, #20]
     3c0:	8b1b      	ldrh	r3, [r3, #24]
     3c2:	b29b      	uxth	r3, r3
     3c4:	2220      	movs	r2, #32
     3c6:	32ff      	adds	r2, #255	; 0xff
     3c8:	4313      	orrs	r3, r2
     3ca:	b29a      	uxth	r2, r3
     3cc:	697b      	ldr	r3, [r7, #20]
     3ce:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     3d0:	4b28      	ldr	r3, [pc, #160]	; (474 <nvm_execute_command+0x104>)
     3d2:	4798      	blx	r3
     3d4:	0003      	movs	r3, r0
     3d6:	001a      	movs	r2, r3
     3d8:	2301      	movs	r3, #1
     3da:	4053      	eors	r3, r2
     3dc:	b2db      	uxtb	r3, r3
     3de:	2b00      	cmp	r3, #0
     3e0:	d001      	beq.n	3e6 <nvm_execute_command+0x76>
		return STATUS_BUSY;
     3e2:	2305      	movs	r3, #5
     3e4:	e039      	b.n	45a <nvm_execute_command+0xea>
	}

	switch (command) {
     3e6:	230f      	movs	r3, #15
     3e8:	18fb      	adds	r3, r7, r3
     3ea:	781b      	ldrb	r3, [r3, #0]
     3ec:	2b45      	cmp	r3, #69	; 0x45
     3ee:	d81a      	bhi.n	426 <nvm_execute_command+0xb6>
     3f0:	009a      	lsls	r2, r3, #2
     3f2:	4b21      	ldr	r3, [pc, #132]	; (478 <nvm_execute_command+0x108>)
     3f4:	18d3      	adds	r3, r2, r3
     3f6:	681b      	ldr	r3, [r3, #0]
     3f8:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     3fa:	697b      	ldr	r3, [r7, #20]
     3fc:	8b1b      	ldrh	r3, [r3, #24]
     3fe:	b29b      	uxth	r3, r3
     400:	001a      	movs	r2, r3
     402:	2380      	movs	r3, #128	; 0x80
     404:	005b      	lsls	r3, r3, #1
     406:	4013      	ands	r3, r2
     408:	d001      	beq.n	40e <nvm_execute_command+0x9e>
				return STATUS_ERR_IO;
     40a:	2310      	movs	r3, #16
     40c:	e025      	b.n	45a <nvm_execute_command+0xea>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     40e:	68bb      	ldr	r3, [r7, #8]
     410:	089b      	lsrs	r3, r3, #2
     412:	005a      	lsls	r2, r3, #1
     414:	697b      	ldr	r3, [r7, #20]
     416:	61da      	str	r2, [r3, #28]
			break;
     418:	e008      	b.n	42c <nvm_execute_command+0xbc>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     41a:	68bb      	ldr	r3, [r7, #8]
     41c:	089b      	lsrs	r3, r3, #2
     41e:	005a      	lsls	r2, r3, #1
     420:	697b      	ldr	r3, [r7, #20]
     422:	61da      	str	r2, [r3, #28]
			break;
     424:	e002      	b.n	42c <nvm_execute_command+0xbc>
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
     426:	2317      	movs	r3, #23
     428:	e017      	b.n	45a <nvm_execute_command+0xea>
		/* Commands not requiring address */
		case NVM_COMMAND_PAGE_BUFFER_CLEAR:
		case NVM_COMMAND_SET_SECURITY_BIT:
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;
     42a:	46c0      	nop			; (mov r8, r8)
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     42c:	230f      	movs	r3, #15
     42e:	18fb      	adds	r3, r7, r3
     430:	781b      	ldrb	r3, [r3, #0]
     432:	b29b      	uxth	r3, r3
     434:	4a11      	ldr	r2, [pc, #68]	; (47c <nvm_execute_command+0x10c>)
     436:	4313      	orrs	r3, r2
     438:	b29a      	uxth	r2, r3
     43a:	697b      	ldr	r3, [r7, #20]
     43c:	801a      	strh	r2, [r3, #0]

	/* Wait for the nvm controller to become ready */
	while (!nvm_is_ready()) {
     43e:	46c0      	nop			; (mov r8, r8)
     440:	4b0c      	ldr	r3, [pc, #48]	; (474 <nvm_execute_command+0x104>)
     442:	4798      	blx	r3
     444:	0003      	movs	r3, r0
     446:	001a      	movs	r2, r3
     448:	2301      	movs	r3, #1
     44a:	4053      	eors	r3, r2
     44c:	b2db      	uxtb	r3, r3
     44e:	2b00      	cmp	r3, #0
     450:	d1f6      	bne.n	440 <nvm_execute_command+0xd0>
	}

	/* restore the setting */
	nvm_module->CTRLB.reg = temp;
     452:	697b      	ldr	r3, [r7, #20]
     454:	693a      	ldr	r2, [r7, #16]
     456:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     458:	2300      	movs	r3, #0
}
     45a:	0018      	movs	r0, r3
     45c:	46bd      	mov	sp, r7
     45e:	b006      	add	sp, #24
     460:	bd80      	pop	{r7, pc}
     462:	46c0      	nop			; (mov r8, r8)
     464:	20000094 	.word	0x20000094
     468:	00803fff 	.word	0x00803fff
     46c:	00806000 	.word	0x00806000
     470:	41004000 	.word	0x41004000
     474:	0000020d 	.word	0x0000020d
     478:	00004314 	.word	0x00004314
     47c:	ffffa500 	.word	0xffffa500

00000480 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     480:	b580      	push	{r7, lr}
     482:	b088      	sub	sp, #32
     484:	af00      	add	r7, sp, #0
     486:	60f8      	str	r0, [r7, #12]
     488:	60b9      	str	r1, [r7, #8]
     48a:	1dbb      	adds	r3, r7, #6
     48c:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     48e:	4b4c      	ldr	r3, [pc, #304]	; (5c0 <nvm_write_buffer+0x140>)
     490:	881b      	ldrh	r3, [r3, #0]
     492:	001a      	movs	r2, r3
     494:	4b4a      	ldr	r3, [pc, #296]	; (5c0 <nvm_write_buffer+0x140>)
     496:	885b      	ldrh	r3, [r3, #2]
     498:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
     49a:	68fb      	ldr	r3, [r7, #12]
     49c:	429a      	cmp	r2, r3
     49e:	d201      	bcs.n	4a4 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     4a0:	2318      	movs	r3, #24
     4a2:	e089      	b.n	5b8 <nvm_write_buffer+0x138>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     4a4:	4b46      	ldr	r3, [pc, #280]	; (5c0 <nvm_write_buffer+0x140>)
     4a6:	881b      	ldrh	r3, [r3, #0]
     4a8:	3b01      	subs	r3, #1
     4aa:	001a      	movs	r2, r3
     4ac:	68fb      	ldr	r3, [r7, #12]
     4ae:	4013      	ands	r3, r2
     4b0:	d001      	beq.n	4b6 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
     4b2:	2318      	movs	r3, #24
     4b4:	e080      	b.n	5b8 <nvm_write_buffer+0x138>
	}

	/* Check if the write length is longer than a NVM page */
	if (length > _nvm_dev.page_size) {
     4b6:	4b42      	ldr	r3, [pc, #264]	; (5c0 <nvm_write_buffer+0x140>)
     4b8:	881b      	ldrh	r3, [r3, #0]
     4ba:	1dba      	adds	r2, r7, #6
     4bc:	8812      	ldrh	r2, [r2, #0]
     4be:	429a      	cmp	r2, r3
     4c0:	d901      	bls.n	4c6 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
     4c2:	2317      	movs	r3, #23
     4c4:	e078      	b.n	5b8 <nvm_write_buffer+0x138>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     4c6:	4b3f      	ldr	r3, [pc, #252]	; (5c4 <nvm_write_buffer+0x144>)
     4c8:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     4ca:	4b3f      	ldr	r3, [pc, #252]	; (5c8 <nvm_write_buffer+0x148>)
     4cc:	4798      	blx	r3
     4ce:	0003      	movs	r3, r0
     4d0:	001a      	movs	r2, r3
     4d2:	2301      	movs	r3, #1
     4d4:	4053      	eors	r3, r2
     4d6:	b2db      	uxtb	r3, r3
     4d8:	2b00      	cmp	r3, #0
     4da:	d001      	beq.n	4e0 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
     4dc:	2305      	movs	r3, #5
     4de:	e06b      	b.n	5b8 <nvm_write_buffer+0x138>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     4e0:	697b      	ldr	r3, [r7, #20]
     4e2:	4a3a      	ldr	r2, [pc, #232]	; (5cc <nvm_write_buffer+0x14c>)
     4e4:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	4b37      	ldr	r3, [pc, #220]	; (5c8 <nvm_write_buffer+0x148>)
     4ea:	4798      	blx	r3
     4ec:	0003      	movs	r3, r0
     4ee:	001a      	movs	r2, r3
     4f0:	2301      	movs	r3, #1
     4f2:	4053      	eors	r3, r2
     4f4:	b2db      	uxtb	r3, r3
     4f6:	2b00      	cmp	r3, #0
     4f8:	d1f6      	bne.n	4e8 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     4fa:	697b      	ldr	r3, [r7, #20]
     4fc:	8b1b      	ldrh	r3, [r3, #24]
     4fe:	b29b      	uxth	r3, r3
     500:	2220      	movs	r2, #32
     502:	32ff      	adds	r2, #255	; 0xff
     504:	4313      	orrs	r3, r2
     506:	b29a      	uxth	r2, r3
     508:	697b      	ldr	r3, [r7, #20]
     50a:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
     50c:	68fb      	ldr	r3, [r7, #12]
     50e:	085b      	lsrs	r3, r3, #1
     510:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     512:	231a      	movs	r3, #26
     514:	18fb      	adds	r3, r7, r3
     516:	2200      	movs	r2, #0
     518:	801a      	strh	r2, [r3, #0]
     51a:	e032      	b.n	582 <nvm_write_buffer+0x102>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
     51c:	231a      	movs	r3, #26
     51e:	18fb      	adds	r3, r7, r3
     520:	881b      	ldrh	r3, [r3, #0]
     522:	68ba      	ldr	r2, [r7, #8]
     524:	18d3      	adds	r3, r2, r3
     526:	781a      	ldrb	r2, [r3, #0]
     528:	2318      	movs	r3, #24
     52a:	18fb      	adds	r3, r7, r3
     52c:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
     52e:	231a      	movs	r3, #26
     530:	18fb      	adds	r3, r7, r3
     532:	881a      	ldrh	r2, [r3, #0]
     534:	1dbb      	adds	r3, r7, #6
     536:	881b      	ldrh	r3, [r3, #0]
     538:	3b01      	subs	r3, #1
     53a:	429a      	cmp	r2, r3
     53c:	da11      	bge.n	562 <nvm_write_buffer+0xe2>
			data |= (buffer[i + 1] << 8);
     53e:	231a      	movs	r3, #26
     540:	18fb      	adds	r3, r7, r3
     542:	881b      	ldrh	r3, [r3, #0]
     544:	3301      	adds	r3, #1
     546:	68ba      	ldr	r2, [r7, #8]
     548:	18d3      	adds	r3, r2, r3
     54a:	781b      	ldrb	r3, [r3, #0]
     54c:	021b      	lsls	r3, r3, #8
     54e:	b21a      	sxth	r2, r3
     550:	2318      	movs	r3, #24
     552:	18fb      	adds	r3, r7, r3
     554:	2100      	movs	r1, #0
     556:	5e5b      	ldrsh	r3, [r3, r1]
     558:	4313      	orrs	r3, r2
     55a:	b21a      	sxth	r2, r3
     55c:	2318      	movs	r3, #24
     55e:	18fb      	adds	r3, r7, r3
     560:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
     562:	69fb      	ldr	r3, [r7, #28]
     564:	1c5a      	adds	r2, r3, #1
     566:	61fa      	str	r2, [r7, #28]
     568:	005b      	lsls	r3, r3, #1
     56a:	001a      	movs	r2, r3
     56c:	2318      	movs	r3, #24
     56e:	18fb      	adds	r3, r7, r3
     570:	881b      	ldrh	r3, [r3, #0]
     572:	8013      	strh	r3, [r2, #0]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     574:	231a      	movs	r3, #26
     576:	18fb      	adds	r3, r7, r3
     578:	221a      	movs	r2, #26
     57a:	18ba      	adds	r2, r7, r2
     57c:	8812      	ldrh	r2, [r2, #0]
     57e:	3202      	adds	r2, #2
     580:	801a      	strh	r2, [r3, #0]
     582:	231a      	movs	r3, #26
     584:	18fa      	adds	r2, r7, r3
     586:	1dbb      	adds	r3, r7, #6
     588:	8812      	ldrh	r2, [r2, #0]
     58a:	881b      	ldrh	r3, [r3, #0]
     58c:	429a      	cmp	r2, r3
     58e:	d3c5      	bcc.n	51c <nvm_write_buffer+0x9c>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     590:	4b0b      	ldr	r3, [pc, #44]	; (5c0 <nvm_write_buffer+0x140>)
     592:	791b      	ldrb	r3, [r3, #4]
     594:	2201      	movs	r2, #1
     596:	4053      	eors	r3, r2
     598:	b2db      	uxtb	r3, r3
     59a:	2b00      	cmp	r3, #0
     59c:	d00b      	beq.n	5b6 <nvm_write_buffer+0x136>
     59e:	1dbb      	adds	r3, r7, #6
     5a0:	881b      	ldrh	r3, [r3, #0]
     5a2:	2b3f      	cmp	r3, #63	; 0x3f
     5a4:	d807      	bhi.n	5b6 <nvm_write_buffer+0x136>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     5a6:	68fb      	ldr	r3, [r7, #12]
     5a8:	2200      	movs	r2, #0
     5aa:	0019      	movs	r1, r3
     5ac:	2004      	movs	r0, #4
     5ae:	4b08      	ldr	r3, [pc, #32]	; (5d0 <nvm_write_buffer+0x150>)
     5b0:	4798      	blx	r3
     5b2:	0003      	movs	r3, r0
     5b4:	e000      	b.n	5b8 <nvm_write_buffer+0x138>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
     5b6:	2300      	movs	r3, #0
}
     5b8:	0018      	movs	r0, r3
     5ba:	46bd      	mov	sp, r7
     5bc:	b008      	add	sp, #32
     5be:	bd80      	pop	{r7, pc}
     5c0:	20000094 	.word	0x20000094
     5c4:	41004000 	.word	0x41004000
     5c8:	0000020d 	.word	0x0000020d
     5cc:	ffffa544 	.word	0xffffa544
     5d0:	00000371 	.word	0x00000371

000005d4 <nvm_erase_row>:
 *                                 acceptable range of the NVM memory region or
 *                                 not aligned to the start of a row
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     5d4:	b580      	push	{r7, lr}
     5d6:	b084      	sub	sp, #16
     5d8:	af00      	add	r7, sp, #0
     5da:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     5dc:	4b20      	ldr	r3, [pc, #128]	; (660 <nvm_erase_row+0x8c>)
     5de:	881b      	ldrh	r3, [r3, #0]
     5e0:	001a      	movs	r2, r3
     5e2:	4b1f      	ldr	r3, [pc, #124]	; (660 <nvm_erase_row+0x8c>)
     5e4:	885b      	ldrh	r3, [r3, #2]
     5e6:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
     5e8:	687b      	ldr	r3, [r7, #4]
     5ea:	429a      	cmp	r2, r3
     5ec:	d201      	bcs.n	5f2 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     5ee:	2318      	movs	r3, #24
     5f0:	e032      	b.n	658 <nvm_erase_row+0x84>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     5f2:	4b1b      	ldr	r3, [pc, #108]	; (660 <nvm_erase_row+0x8c>)
     5f4:	881b      	ldrh	r3, [r3, #0]
     5f6:	009b      	lsls	r3, r3, #2
     5f8:	3b01      	subs	r3, #1
     5fa:	001a      	movs	r2, r3
     5fc:	687b      	ldr	r3, [r7, #4]
     5fe:	4013      	ands	r3, r2
     600:	d001      	beq.n	606 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
     602:	2318      	movs	r3, #24
     604:	e028      	b.n	658 <nvm_erase_row+0x84>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     606:	4b17      	ldr	r3, [pc, #92]	; (664 <nvm_erase_row+0x90>)
     608:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     60a:	4b17      	ldr	r3, [pc, #92]	; (668 <nvm_erase_row+0x94>)
     60c:	4798      	blx	r3
     60e:	0003      	movs	r3, r0
     610:	001a      	movs	r2, r3
     612:	2301      	movs	r3, #1
     614:	4053      	eors	r3, r2
     616:	b2db      	uxtb	r3, r3
     618:	2b00      	cmp	r3, #0
     61a:	d001      	beq.n	620 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
     61c:	2305      	movs	r3, #5
     61e:	e01b      	b.n	658 <nvm_erase_row+0x84>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
     620:	68fb      	ldr	r3, [r7, #12]
     622:	8b1b      	ldrh	r3, [r3, #24]
     624:	b29b      	uxth	r3, r3
     626:	2220      	movs	r2, #32
     628:	32ff      	adds	r2, #255	; 0xff
     62a:	4313      	orrs	r3, r2
     62c:	b29a      	uxth	r2, r3
     62e:	68fb      	ldr	r3, [r7, #12]
     630:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     632:	687b      	ldr	r3, [r7, #4]
     634:	089b      	lsrs	r3, r3, #2
     636:	005a      	lsls	r2, r3, #1
     638:	68fb      	ldr	r3, [r7, #12]
     63a:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     63c:	68fb      	ldr	r3, [r7, #12]
     63e:	4a0b      	ldr	r2, [pc, #44]	; (66c <nvm_erase_row+0x98>)
     640:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
     642:	46c0      	nop			; (mov r8, r8)
     644:	4b08      	ldr	r3, [pc, #32]	; (668 <nvm_erase_row+0x94>)
     646:	4798      	blx	r3
     648:	0003      	movs	r3, r0
     64a:	001a      	movs	r2, r3
     64c:	2301      	movs	r3, #1
     64e:	4053      	eors	r3, r2
     650:	b2db      	uxtb	r3, r3
     652:	2b00      	cmp	r3, #0
     654:	d1f6      	bne.n	644 <nvm_erase_row+0x70>
	}

	return STATUS_OK;
     656:	2300      	movs	r3, #0
}
     658:	0018      	movs	r0, r3
     65a:	46bd      	mov	sp, r7
     65c:	b004      	add	sp, #16
     65e:	bd80      	pop	{r7, pc}
     660:	20000094 	.word	0x20000094
     664:	41004000 	.word	0x41004000
     668:	0000020d 	.word	0x0000020d
     66c:	ffffa502 	.word	0xffffa502

00000670 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     670:	b580      	push	{r7, lr}
     672:	b082      	sub	sp, #8
     674:	af00      	add	r7, sp, #0
     676:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     678:	687b      	ldr	r3, [r7, #4]
     67a:	2280      	movs	r2, #128	; 0x80
     67c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     67e:	687b      	ldr	r3, [r7, #4]
     680:	2200      	movs	r2, #0
     682:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     684:	687b      	ldr	r3, [r7, #4]
     686:	2201      	movs	r2, #1
     688:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	2200      	movs	r2, #0
     68e:	70da      	strb	r2, [r3, #3]
}
     690:	46c0      	nop			; (mov r8, r8)
     692:	46bd      	mov	sp, r7
     694:	b002      	add	sp, #8
     696:	bd80      	pop	{r7, pc}

00000698 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     698:	b580      	push	{r7, lr}
     69a:	b084      	sub	sp, #16
     69c:	af00      	add	r7, sp, #0
     69e:	0002      	movs	r2, r0
     6a0:	6039      	str	r1, [r7, #0]
     6a2:	1dfb      	adds	r3, r7, #7
     6a4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     6a6:	230c      	movs	r3, #12
     6a8:	18fb      	adds	r3, r7, r3
     6aa:	0018      	movs	r0, r3
     6ac:	4b10      	ldr	r3, [pc, #64]	; (6f0 <port_pin_set_config+0x58>)
     6ae:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     6b0:	230c      	movs	r3, #12
     6b2:	18fb      	adds	r3, r7, r3
     6b4:	2280      	movs	r2, #128	; 0x80
     6b6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     6b8:	683b      	ldr	r3, [r7, #0]
     6ba:	781a      	ldrb	r2, [r3, #0]
     6bc:	230c      	movs	r3, #12
     6be:	18fb      	adds	r3, r7, r3
     6c0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     6c2:	683b      	ldr	r3, [r7, #0]
     6c4:	785a      	ldrb	r2, [r3, #1]
     6c6:	230c      	movs	r3, #12
     6c8:	18fb      	adds	r3, r7, r3
     6ca:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     6cc:	683b      	ldr	r3, [r7, #0]
     6ce:	789a      	ldrb	r2, [r3, #2]
     6d0:	230c      	movs	r3, #12
     6d2:	18fb      	adds	r3, r7, r3
     6d4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     6d6:	230c      	movs	r3, #12
     6d8:	18fa      	adds	r2, r7, r3
     6da:	1dfb      	adds	r3, r7, #7
     6dc:	781b      	ldrb	r3, [r3, #0]
     6de:	0011      	movs	r1, r2
     6e0:	0018      	movs	r0, r3
     6e2:	4b04      	ldr	r3, [pc, #16]	; (6f4 <port_pin_set_config+0x5c>)
     6e4:	4798      	blx	r3
}
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	46bd      	mov	sp, r7
     6ea:	b004      	add	sp, #16
     6ec:	bd80      	pop	{r7, pc}
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	00000671 	.word	0x00000671
     6f4:	000026bd 	.word	0x000026bd

000006f8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     6f8:	b580      	push	{r7, lr}
     6fa:	b082      	sub	sp, #8
     6fc:	af00      	add	r7, sp, #0
     6fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     700:	687b      	ldr	r3, [r7, #4]
     702:	2200      	movs	r2, #0
     704:	701a      	strb	r2, [r3, #0]
}
     706:	46c0      	nop			; (mov r8, r8)
     708:	46bd      	mov	sp, r7
     70a:	b002      	add	sp, #8
     70c:	bd80      	pop	{r7, pc}
     70e:	46c0      	nop			; (mov r8, r8)

00000710 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     710:	b5f0      	push	{r4, r5, r6, r7, lr}
     712:	b08d      	sub	sp, #52	; 0x34
     714:	af00      	add	r7, sp, #0
     716:	60b8      	str	r0, [r7, #8]
     718:	60f9      	str	r1, [r7, #12]
     71a:	603a      	str	r2, [r7, #0]
     71c:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     71e:	2300      	movs	r3, #0
     720:	2400      	movs	r4, #0
     722:	623b      	str	r3, [r7, #32]
     724:	627c      	str	r4, [r7, #36]	; 0x24
     726:	2300      	movs	r3, #0
     728:	2400      	movs	r4, #0
     72a:	61bb      	str	r3, [r7, #24]
     72c:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     72e:	233f      	movs	r3, #63	; 0x3f
     730:	62fb      	str	r3, [r7, #44]	; 0x2c
     732:	e053      	b.n	7dc <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     736:	3b20      	subs	r3, #32
     738:	2b00      	cmp	r3, #0
     73a:	db04      	blt.n	746 <long_division+0x36>
     73c:	2201      	movs	r2, #1
     73e:	409a      	lsls	r2, r3
     740:	0013      	movs	r3, r2
     742:	617b      	str	r3, [r7, #20]
     744:	e00b      	b.n	75e <long_division+0x4e>
     746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     748:	2220      	movs	r2, #32
     74a:	1ad3      	subs	r3, r2, r3
     74c:	2201      	movs	r2, #1
     74e:	40da      	lsrs	r2, r3
     750:	0013      	movs	r3, r2
     752:	2100      	movs	r1, #0
     754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     756:	4091      	lsls	r1, r2
     758:	000a      	movs	r2, r1
     75a:	4313      	orrs	r3, r2
     75c:	617b      	str	r3, [r7, #20]
     75e:	2201      	movs	r2, #1
     760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     762:	409a      	lsls	r2, r3
     764:	0013      	movs	r3, r2
     766:	613b      	str	r3, [r7, #16]

		r = r << 1;
     768:	69bb      	ldr	r3, [r7, #24]
     76a:	69fc      	ldr	r4, [r7, #28]
     76c:	18db      	adds	r3, r3, r3
     76e:	4164      	adcs	r4, r4
     770:	61bb      	str	r3, [r7, #24]
     772:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     774:	68bb      	ldr	r3, [r7, #8]
     776:	693a      	ldr	r2, [r7, #16]
     778:	401a      	ands	r2, r3
     77a:	0015      	movs	r5, r2
     77c:	68fb      	ldr	r3, [r7, #12]
     77e:	697a      	ldr	r2, [r7, #20]
     780:	401a      	ands	r2, r3
     782:	0016      	movs	r6, r2
     784:	002b      	movs	r3, r5
     786:	4333      	orrs	r3, r6
     788:	d007      	beq.n	79a <long_division+0x8a>
			r |= 0x01;
     78a:	69bb      	ldr	r3, [r7, #24]
     78c:	2201      	movs	r2, #1
     78e:	4313      	orrs	r3, r2
     790:	61bb      	str	r3, [r7, #24]
     792:	69fb      	ldr	r3, [r7, #28]
     794:	2200      	movs	r2, #0
     796:	4313      	orrs	r3, r2
     798:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     79a:	687a      	ldr	r2, [r7, #4]
     79c:	69fb      	ldr	r3, [r7, #28]
     79e:	429a      	cmp	r2, r3
     7a0:	d819      	bhi.n	7d6 <long_division+0xc6>
     7a2:	687a      	ldr	r2, [r7, #4]
     7a4:	69fb      	ldr	r3, [r7, #28]
     7a6:	429a      	cmp	r2, r3
     7a8:	d103      	bne.n	7b2 <long_division+0xa2>
     7aa:	683a      	ldr	r2, [r7, #0]
     7ac:	69bb      	ldr	r3, [r7, #24]
     7ae:	429a      	cmp	r2, r3
     7b0:	d811      	bhi.n	7d6 <long_division+0xc6>
			r = r - d;
     7b2:	69b9      	ldr	r1, [r7, #24]
     7b4:	69fa      	ldr	r2, [r7, #28]
     7b6:	683b      	ldr	r3, [r7, #0]
     7b8:	687c      	ldr	r4, [r7, #4]
     7ba:	1ac9      	subs	r1, r1, r3
     7bc:	41a2      	sbcs	r2, r4
     7be:	000b      	movs	r3, r1
     7c0:	0014      	movs	r4, r2
     7c2:	61bb      	str	r3, [r7, #24]
     7c4:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     7c6:	6a3a      	ldr	r2, [r7, #32]
     7c8:	693b      	ldr	r3, [r7, #16]
     7ca:	4313      	orrs	r3, r2
     7cc:	623b      	str	r3, [r7, #32]
     7ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     7d0:	697b      	ldr	r3, [r7, #20]
     7d2:	4313      	orrs	r3, r2
     7d4:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     7d8:	3b01      	subs	r3, #1
     7da:	62fb      	str	r3, [r7, #44]	; 0x2c
     7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     7de:	2b00      	cmp	r3, #0
     7e0:	daa8      	bge.n	734 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
     7e2:	6a3b      	ldr	r3, [r7, #32]
     7e4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     7e6:	0018      	movs	r0, r3
     7e8:	0021      	movs	r1, r4
     7ea:	46bd      	mov	sp, r7
     7ec:	b00d      	add	sp, #52	; 0x34
     7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000007f0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     7f0:	b580      	push	{r7, lr}
     7f2:	b086      	sub	sp, #24
     7f4:	af00      	add	r7, sp, #0
     7f6:	60f8      	str	r0, [r7, #12]
     7f8:	60b9      	str	r1, [r7, #8]
     7fa:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     7fc:	2316      	movs	r3, #22
     7fe:	18fb      	adds	r3, r7, r3
     800:	2200      	movs	r2, #0
     802:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     804:	68bb      	ldr	r3, [r7, #8]
     806:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     808:	68bb      	ldr	r3, [r7, #8]
     80a:	085a      	lsrs	r2, r3, #1
     80c:	68fb      	ldr	r3, [r7, #12]
     80e:	429a      	cmp	r2, r3
     810:	d201      	bcs.n	816 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     812:	2340      	movs	r3, #64	; 0x40
     814:	e026      	b.n	864 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     816:	68bb      	ldr	r3, [r7, #8]
     818:	085b      	lsrs	r3, r3, #1
     81a:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     81c:	e00a      	b.n	834 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     81e:	693a      	ldr	r2, [r7, #16]
     820:	68fb      	ldr	r3, [r7, #12]
     822:	1ad3      	subs	r3, r2, r3
     824:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     826:	2316      	movs	r3, #22
     828:	18fb      	adds	r3, r7, r3
     82a:	881a      	ldrh	r2, [r3, #0]
     82c:	2316      	movs	r3, #22
     82e:	18fb      	adds	r3, r7, r3
     830:	3201      	adds	r2, #1
     832:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     834:	693a      	ldr	r2, [r7, #16]
     836:	68fb      	ldr	r3, [r7, #12]
     838:	429a      	cmp	r2, r3
     83a:	d2f0      	bcs.n	81e <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     83c:	2316      	movs	r3, #22
     83e:	18fb      	adds	r3, r7, r3
     840:	2216      	movs	r2, #22
     842:	18ba      	adds	r2, r7, r2
     844:	8812      	ldrh	r2, [r2, #0]
     846:	3a01      	subs	r2, #1
     848:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     84a:	2316      	movs	r3, #22
     84c:	18fb      	adds	r3, r7, r3
     84e:	881b      	ldrh	r3, [r3, #0]
     850:	2bff      	cmp	r3, #255	; 0xff
     852:	d901      	bls.n	858 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     854:	2340      	movs	r3, #64	; 0x40
     856:	e005      	b.n	864 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     858:	687b      	ldr	r3, [r7, #4]
     85a:	2216      	movs	r2, #22
     85c:	18ba      	adds	r2, r7, r2
     85e:	8812      	ldrh	r2, [r2, #0]
     860:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     862:	2300      	movs	r3, #0
	}
}
     864:	0018      	movs	r0, r3
     866:	46bd      	mov	sp, r7
     868:	b006      	add	sp, #24
     86a:	bd80      	pop	{r7, pc}

0000086c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     86c:	b5f0      	push	{r4, r5, r6, r7, lr}
     86e:	b0a1      	sub	sp, #132	; 0x84
     870:	af00      	add	r7, sp, #0
     872:	64f8      	str	r0, [r7, #76]	; 0x4c
     874:	64b9      	str	r1, [r7, #72]	; 0x48
     876:	647a      	str	r2, [r7, #68]	; 0x44
     878:	2243      	movs	r2, #67	; 0x43
     87a:	18ba      	adds	r2, r7, r2
     87c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     87e:	2300      	movs	r3, #0
     880:	2400      	movs	r4, #0
     882:	673b      	str	r3, [r7, #112]	; 0x70
     884:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
     886:	2300      	movs	r3, #0
     888:	2400      	movs	r4, #0
     88a:	66bb      	str	r3, [r7, #104]	; 0x68
     88c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
     88e:	2300      	movs	r3, #0
     890:	2400      	movs	r4, #0
     892:	67bb      	str	r3, [r7, #120]	; 0x78
     894:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     896:	2300      	movs	r3, #0
     898:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     89a:	2358      	movs	r3, #88	; 0x58
     89c:	2240      	movs	r2, #64	; 0x40
     89e:	4694      	mov	ip, r2
     8a0:	44bc      	add	ip, r7
     8a2:	4463      	add	r3, ip
     8a4:	781a      	ldrb	r2, [r3, #0]
     8a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     8a8:	435a      	muls	r2, r3
     8aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     8ac:	429a      	cmp	r2, r3
     8ae:	d901      	bls.n	8b4 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8b0:	2340      	movs	r3, #64	; 0x40
     8b2:	e0b3      	b.n	a1c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     8b4:	2343      	movs	r3, #67	; 0x43
     8b6:	18fb      	adds	r3, r7, r3
     8b8:	781b      	ldrb	r3, [r3, #0]
     8ba:	2b00      	cmp	r3, #0
     8bc:	d13d      	bne.n	93a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     8be:	2358      	movs	r3, #88	; 0x58
     8c0:	2240      	movs	r2, #64	; 0x40
     8c2:	4694      	mov	ip, r2
     8c4:	44bc      	add	ip, r7
     8c6:	4463      	add	r3, ip
     8c8:	781b      	ldrb	r3, [r3, #0]
     8ca:	b2db      	uxtb	r3, r3
     8cc:	613b      	str	r3, [r7, #16]
     8ce:	2300      	movs	r3, #0
     8d0:	617b      	str	r3, [r7, #20]
     8d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     8d4:	60bb      	str	r3, [r7, #8]
     8d6:	2300      	movs	r3, #0
     8d8:	60fb      	str	r3, [r7, #12]
     8da:	4c52      	ldr	r4, [pc, #328]	; (a24 <_sercom_get_async_baud_val+0x1b8>)
     8dc:	68ba      	ldr	r2, [r7, #8]
     8de:	68fb      	ldr	r3, [r7, #12]
     8e0:	6938      	ldr	r0, [r7, #16]
     8e2:	6979      	ldr	r1, [r7, #20]
     8e4:	47a0      	blx	r4
     8e6:	0003      	movs	r3, r0
     8e8:	000c      	movs	r4, r1
     8ea:	001b      	movs	r3, r3
     8ec:	65fb      	str	r3, [r7, #92]	; 0x5c
     8ee:	2300      	movs	r3, #0
     8f0:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
     8f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     8f4:	603b      	str	r3, [r7, #0]
     8f6:	2300      	movs	r3, #0
     8f8:	607b      	str	r3, [r7, #4]
     8fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
     8fc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     8fe:	683a      	ldr	r2, [r7, #0]
     900:	687b      	ldr	r3, [r7, #4]
     902:	4c49      	ldr	r4, [pc, #292]	; (a28 <_sercom_get_async_baud_val+0x1bc>)
     904:	47a0      	blx	r4
     906:	0003      	movs	r3, r0
     908:	000c      	movs	r4, r1
     90a:	673b      	str	r3, [r7, #112]	; 0x70
     90c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
     90e:	2100      	movs	r1, #0
     910:	2201      	movs	r2, #1
     912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     914:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     916:	1ac9      	subs	r1, r1, r3
     918:	41a2      	sbcs	r2, r4
     91a:	000b      	movs	r3, r1
     91c:	0014      	movs	r4, r2
     91e:	66bb      	str	r3, [r7, #104]	; 0x68
     920:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
     922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     924:	0c1b      	lsrs	r3, r3, #16
     926:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     928:	0416      	lsls	r6, r2, #16
     92a:	431e      	orrs	r6, r3
     92c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     92e:	041d      	lsls	r5, r3, #16
     930:	0033      	movs	r3, r6
     932:	67bb      	str	r3, [r7, #120]	; 0x78
     934:	2300      	movs	r3, #0
     936:	67fb      	str	r3, [r7, #124]	; 0x7c
     938:	e06a      	b.n	a10 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     93a:	2343      	movs	r3, #67	; 0x43
     93c:	18fb      	adds	r3, r7, r3
     93e:	781b      	ldrb	r3, [r3, #0]
     940:	2b01      	cmp	r3, #1
     942:	d165      	bne.n	a10 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
     944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     946:	633b      	str	r3, [r7, #48]	; 0x30
     948:	2300      	movs	r3, #0
     94a:	637b      	str	r3, [r7, #52]	; 0x34
     94c:	2358      	movs	r3, #88	; 0x58
     94e:	2240      	movs	r2, #64	; 0x40
     950:	4694      	mov	ip, r2
     952:	44bc      	add	ip, r7
     954:	4463      	add	r3, ip
     956:	781b      	ldrb	r3, [r3, #0]
     958:	b2db      	uxtb	r3, r3
     95a:	62bb      	str	r3, [r7, #40]	; 0x28
     95c:	2300      	movs	r3, #0
     95e:	62fb      	str	r3, [r7, #44]	; 0x2c
     960:	4c30      	ldr	r4, [pc, #192]	; (a24 <_sercom_get_async_baud_val+0x1b8>)
     962:	6aba      	ldr	r2, [r7, #40]	; 0x28
     964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     966:	6b38      	ldr	r0, [r7, #48]	; 0x30
     968:	6b79      	ldr	r1, [r7, #52]	; 0x34
     96a:	47a0      	blx	r4
     96c:	0003      	movs	r3, r0
     96e:	000c      	movs	r4, r1
     970:	65bb      	str	r3, [r7, #88]	; 0x58
     972:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
     974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     976:	623b      	str	r3, [r7, #32]
     978:	2300      	movs	r3, #0
     97a:	627b      	str	r3, [r7, #36]	; 0x24
     97c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     97e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     980:	001a      	movs	r2, r3
     982:	0023      	movs	r3, r4
     984:	6a38      	ldr	r0, [r7, #32]
     986:	6a79      	ldr	r1, [r7, #36]	; 0x24
     988:	4c27      	ldr	r4, [pc, #156]	; (a28 <_sercom_get_async_baud_val+0x1bc>)
     98a:	47a0      	blx	r4
     98c:	0003      	movs	r3, r0
     98e:	000c      	movs	r4, r1
     990:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
     992:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     994:	2380      	movs	r3, #128	; 0x80
     996:	019b      	lsls	r3, r3, #6
     998:	429a      	cmp	r2, r3
     99a:	d901      	bls.n	9a0 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     99c:	2340      	movs	r3, #64	; 0x40
     99e:	e03d      	b.n	a1c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     9a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     9a2:	61bb      	str	r3, [r7, #24]
     9a4:	2300      	movs	r3, #0
     9a6:	61fb      	str	r3, [r7, #28]
     9a8:	69b9      	ldr	r1, [r7, #24]
     9aa:	69fa      	ldr	r2, [r7, #28]
     9ac:	000b      	movs	r3, r1
     9ae:	0f5b      	lsrs	r3, r3, #29
     9b0:	0010      	movs	r0, r2
     9b2:	00c0      	lsls	r0, r0, #3
     9b4:	63f8      	str	r0, [r7, #60]	; 0x3c
     9b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     9b8:	4318      	orrs	r0, r3
     9ba:	63f8      	str	r0, [r7, #60]	; 0x3c
     9bc:	000b      	movs	r3, r1
     9be:	00db      	lsls	r3, r3, #3
     9c0:	63bb      	str	r3, [r7, #56]	; 0x38
     9c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     9c4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     9c6:	001a      	movs	r2, r3
     9c8:	0023      	movs	r3, r4
     9ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     9cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     9ce:	4c16      	ldr	r4, [pc, #88]	; (a28 <_sercom_get_async_baud_val+0x1bc>)
     9d0:	47a0      	blx	r4
     9d2:	0003      	movs	r3, r0
     9d4:	000c      	movs	r4, r1
     9d6:	65bb      	str	r3, [r7, #88]	; 0x58
     9d8:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
     9da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     9dc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     9de:	b2d9      	uxtb	r1, r3
     9e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     9e2:	b2db      	uxtb	r3, r3
     9e4:	00db      	lsls	r3, r3, #3
     9e6:	b2da      	uxtb	r2, r3
     9e8:	2317      	movs	r3, #23
     9ea:	2040      	movs	r0, #64	; 0x40
     9ec:	4684      	mov	ip, r0
     9ee:	44bc      	add	ip, r7
     9f0:	4463      	add	r3, ip
     9f2:	1a8a      	subs	r2, r1, r2
     9f4:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
     9f6:	2317      	movs	r3, #23
     9f8:	2240      	movs	r2, #64	; 0x40
     9fa:	4694      	mov	ip, r2
     9fc:	44bc      	add	ip, r7
     9fe:	4463      	add	r3, ip
     a00:	781b      	ldrb	r3, [r3, #0]
     a02:	035b      	lsls	r3, r3, #13
     a04:	001a      	movs	r2, r3
     a06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     a08:	4313      	orrs	r3, r2
     a0a:	67bb      	str	r3, [r7, #120]	; 0x78
     a0c:	2300      	movs	r3, #0
     a0e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
     a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     a12:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     a14:	b29a      	uxth	r2, r3
     a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     a18:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     a1a:	2300      	movs	r3, #0
}
     a1c:	0018      	movs	r0, r3
     a1e:	46bd      	mov	sp, r7
     a20:	b021      	add	sp, #132	; 0x84
     a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a24:	000031ad 	.word	0x000031ad
     a28:	00000711 	.word	0x00000711

00000a2c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     a2c:	b580      	push	{r7, lr}
     a2e:	b084      	sub	sp, #16
     a30:	af00      	add	r7, sp, #0
     a32:	0002      	movs	r2, r0
     a34:	1dfb      	adds	r3, r7, #7
     a36:	701a      	strb	r2, [r3, #0]
     a38:	1dbb      	adds	r3, r7, #6
     a3a:	1c0a      	adds	r2, r1, #0
     a3c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     a3e:	4b1a      	ldr	r3, [pc, #104]	; (aa8 <sercom_set_gclk_generator+0x7c>)
     a40:	781b      	ldrb	r3, [r3, #0]
     a42:	2201      	movs	r2, #1
     a44:	4053      	eors	r3, r2
     a46:	b2db      	uxtb	r3, r3
     a48:	2b00      	cmp	r3, #0
     a4a:	d103      	bne.n	a54 <sercom_set_gclk_generator+0x28>
     a4c:	1dbb      	adds	r3, r7, #6
     a4e:	781b      	ldrb	r3, [r3, #0]
     a50:	2b00      	cmp	r3, #0
     a52:	d01b      	beq.n	a8c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     a54:	230c      	movs	r3, #12
     a56:	18fb      	adds	r3, r7, r3
     a58:	0018      	movs	r0, r3
     a5a:	4b14      	ldr	r3, [pc, #80]	; (aac <sercom_set_gclk_generator+0x80>)
     a5c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     a5e:	230c      	movs	r3, #12
     a60:	18fb      	adds	r3, r7, r3
     a62:	1dfa      	adds	r2, r7, #7
     a64:	7812      	ldrb	r2, [r2, #0]
     a66:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     a68:	230c      	movs	r3, #12
     a6a:	18fb      	adds	r3, r7, r3
     a6c:	0019      	movs	r1, r3
     a6e:	2013      	movs	r0, #19
     a70:	4b0f      	ldr	r3, [pc, #60]	; (ab0 <sercom_set_gclk_generator+0x84>)
     a72:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     a74:	2013      	movs	r0, #19
     a76:	4b0f      	ldr	r3, [pc, #60]	; (ab4 <sercom_set_gclk_generator+0x88>)
     a78:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     a7a:	4b0b      	ldr	r3, [pc, #44]	; (aa8 <sercom_set_gclk_generator+0x7c>)
     a7c:	1dfa      	adds	r2, r7, #7
     a7e:	7812      	ldrb	r2, [r2, #0]
     a80:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     a82:	4b09      	ldr	r3, [pc, #36]	; (aa8 <sercom_set_gclk_generator+0x7c>)
     a84:	2201      	movs	r2, #1
     a86:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     a88:	2300      	movs	r3, #0
     a8a:	e008      	b.n	a9e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     a8c:	4b06      	ldr	r3, [pc, #24]	; (aa8 <sercom_set_gclk_generator+0x7c>)
     a8e:	785b      	ldrb	r3, [r3, #1]
     a90:	1dfa      	adds	r2, r7, #7
     a92:	7812      	ldrb	r2, [r2, #0]
     a94:	429a      	cmp	r2, r3
     a96:	d101      	bne.n	a9c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     a98:	2300      	movs	r3, #0
     a9a:	e000      	b.n	a9e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     a9c:	231d      	movs	r3, #29
}
     a9e:	0018      	movs	r0, r3
     aa0:	46bd      	mov	sp, r7
     aa2:	b004      	add	sp, #16
     aa4:	bd80      	pop	{r7, pc}
     aa6:	46c0      	nop			; (mov r8, r8)
     aa8:	2000009c 	.word	0x2000009c
     aac:	000006f9 	.word	0x000006f9
     ab0:	000023d1 	.word	0x000023d1
     ab4:	00002415 	.word	0x00002415

00000ab8 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     ab8:	b580      	push	{r7, lr}
     aba:	b082      	sub	sp, #8
     abc:	af00      	add	r7, sp, #0
     abe:	6078      	str	r0, [r7, #4]
     ac0:	000a      	movs	r2, r1
     ac2:	1cfb      	adds	r3, r7, #3
     ac4:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	4a4d      	ldr	r2, [pc, #308]	; (c00 <_sercom_get_default_pad+0x148>)
     aca:	4293      	cmp	r3, r2
     acc:	d03f      	beq.n	b4e <_sercom_get_default_pad+0x96>
     ace:	4a4c      	ldr	r2, [pc, #304]	; (c00 <_sercom_get_default_pad+0x148>)
     ad0:	4293      	cmp	r3, r2
     ad2:	d806      	bhi.n	ae2 <_sercom_get_default_pad+0x2a>
     ad4:	4a4b      	ldr	r2, [pc, #300]	; (c04 <_sercom_get_default_pad+0x14c>)
     ad6:	4293      	cmp	r3, r2
     ad8:	d00f      	beq.n	afa <_sercom_get_default_pad+0x42>
     ada:	4a4b      	ldr	r2, [pc, #300]	; (c08 <_sercom_get_default_pad+0x150>)
     adc:	4293      	cmp	r3, r2
     ade:	d021      	beq.n	b24 <_sercom_get_default_pad+0x6c>
     ae0:	e089      	b.n	bf6 <_sercom_get_default_pad+0x13e>
     ae2:	4a4a      	ldr	r2, [pc, #296]	; (c0c <_sercom_get_default_pad+0x154>)
     ae4:	4293      	cmp	r3, r2
     ae6:	d100      	bne.n	aea <_sercom_get_default_pad+0x32>
     ae8:	e05b      	b.n	ba2 <_sercom_get_default_pad+0xea>
     aea:	4a49      	ldr	r2, [pc, #292]	; (c10 <_sercom_get_default_pad+0x158>)
     aec:	4293      	cmp	r3, r2
     aee:	d100      	bne.n	af2 <_sercom_get_default_pad+0x3a>
     af0:	e06c      	b.n	bcc <_sercom_get_default_pad+0x114>
     af2:	4a48      	ldr	r2, [pc, #288]	; (c14 <_sercom_get_default_pad+0x15c>)
     af4:	4293      	cmp	r3, r2
     af6:	d03f      	beq.n	b78 <_sercom_get_default_pad+0xc0>
     af8:	e07d      	b.n	bf6 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     afa:	1cfb      	adds	r3, r7, #3
     afc:	781b      	ldrb	r3, [r3, #0]
     afe:	2b01      	cmp	r3, #1
     b00:	d00a      	beq.n	b18 <_sercom_get_default_pad+0x60>
     b02:	dc02      	bgt.n	b0a <_sercom_get_default_pad+0x52>
     b04:	2b00      	cmp	r3, #0
     b06:	d005      	beq.n	b14 <_sercom_get_default_pad+0x5c>
     b08:	e075      	b.n	bf6 <_sercom_get_default_pad+0x13e>
     b0a:	2b02      	cmp	r3, #2
     b0c:	d006      	beq.n	b1c <_sercom_get_default_pad+0x64>
     b0e:	2b03      	cmp	r3, #3
     b10:	d006      	beq.n	b20 <_sercom_get_default_pad+0x68>
     b12:	e070      	b.n	bf6 <_sercom_get_default_pad+0x13e>
     b14:	4b40      	ldr	r3, [pc, #256]	; (c18 <_sercom_get_default_pad+0x160>)
     b16:	e06f      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b18:	4b40      	ldr	r3, [pc, #256]	; (c1c <_sercom_get_default_pad+0x164>)
     b1a:	e06d      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b1c:	4b40      	ldr	r3, [pc, #256]	; (c20 <_sercom_get_default_pad+0x168>)
     b1e:	e06b      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b20:	4b40      	ldr	r3, [pc, #256]	; (c24 <_sercom_get_default_pad+0x16c>)
     b22:	e069      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b24:	1cfb      	adds	r3, r7, #3
     b26:	781b      	ldrb	r3, [r3, #0]
     b28:	2b01      	cmp	r3, #1
     b2a:	d00a      	beq.n	b42 <_sercom_get_default_pad+0x8a>
     b2c:	dc02      	bgt.n	b34 <_sercom_get_default_pad+0x7c>
     b2e:	2b00      	cmp	r3, #0
     b30:	d005      	beq.n	b3e <_sercom_get_default_pad+0x86>
     b32:	e060      	b.n	bf6 <_sercom_get_default_pad+0x13e>
     b34:	2b02      	cmp	r3, #2
     b36:	d006      	beq.n	b46 <_sercom_get_default_pad+0x8e>
     b38:	2b03      	cmp	r3, #3
     b3a:	d006      	beq.n	b4a <_sercom_get_default_pad+0x92>
     b3c:	e05b      	b.n	bf6 <_sercom_get_default_pad+0x13e>
     b3e:	2303      	movs	r3, #3
     b40:	e05a      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b42:	4b39      	ldr	r3, [pc, #228]	; (c28 <_sercom_get_default_pad+0x170>)
     b44:	e058      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b46:	4b39      	ldr	r3, [pc, #228]	; (c2c <_sercom_get_default_pad+0x174>)
     b48:	e056      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b4a:	4b39      	ldr	r3, [pc, #228]	; (c30 <_sercom_get_default_pad+0x178>)
     b4c:	e054      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b4e:	1cfb      	adds	r3, r7, #3
     b50:	781b      	ldrb	r3, [r3, #0]
     b52:	2b01      	cmp	r3, #1
     b54:	d00a      	beq.n	b6c <_sercom_get_default_pad+0xb4>
     b56:	dc02      	bgt.n	b5e <_sercom_get_default_pad+0xa6>
     b58:	2b00      	cmp	r3, #0
     b5a:	d005      	beq.n	b68 <_sercom_get_default_pad+0xb0>
     b5c:	e04b      	b.n	bf6 <_sercom_get_default_pad+0x13e>
     b5e:	2b02      	cmp	r3, #2
     b60:	d006      	beq.n	b70 <_sercom_get_default_pad+0xb8>
     b62:	2b03      	cmp	r3, #3
     b64:	d006      	beq.n	b74 <_sercom_get_default_pad+0xbc>
     b66:	e046      	b.n	bf6 <_sercom_get_default_pad+0x13e>
     b68:	4b32      	ldr	r3, [pc, #200]	; (c34 <_sercom_get_default_pad+0x17c>)
     b6a:	e045      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b6c:	4b32      	ldr	r3, [pc, #200]	; (c38 <_sercom_get_default_pad+0x180>)
     b6e:	e043      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b70:	4b32      	ldr	r3, [pc, #200]	; (c3c <_sercom_get_default_pad+0x184>)
     b72:	e041      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b74:	4b32      	ldr	r3, [pc, #200]	; (c40 <_sercom_get_default_pad+0x188>)
     b76:	e03f      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b78:	1cfb      	adds	r3, r7, #3
     b7a:	781b      	ldrb	r3, [r3, #0]
     b7c:	2b01      	cmp	r3, #1
     b7e:	d00a      	beq.n	b96 <_sercom_get_default_pad+0xde>
     b80:	dc02      	bgt.n	b88 <_sercom_get_default_pad+0xd0>
     b82:	2b00      	cmp	r3, #0
     b84:	d005      	beq.n	b92 <_sercom_get_default_pad+0xda>
     b86:	e036      	b.n	bf6 <_sercom_get_default_pad+0x13e>
     b88:	2b02      	cmp	r3, #2
     b8a:	d006      	beq.n	b9a <_sercom_get_default_pad+0xe2>
     b8c:	2b03      	cmp	r3, #3
     b8e:	d006      	beq.n	b9e <_sercom_get_default_pad+0xe6>
     b90:	e031      	b.n	bf6 <_sercom_get_default_pad+0x13e>
     b92:	4b2c      	ldr	r3, [pc, #176]	; (c44 <_sercom_get_default_pad+0x18c>)
     b94:	e030      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b96:	4b2c      	ldr	r3, [pc, #176]	; (c48 <_sercom_get_default_pad+0x190>)
     b98:	e02e      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b9a:	4b2c      	ldr	r3, [pc, #176]	; (c4c <_sercom_get_default_pad+0x194>)
     b9c:	e02c      	b.n	bf8 <_sercom_get_default_pad+0x140>
     b9e:	4b2c      	ldr	r3, [pc, #176]	; (c50 <_sercom_get_default_pad+0x198>)
     ba0:	e02a      	b.n	bf8 <_sercom_get_default_pad+0x140>
     ba2:	1cfb      	adds	r3, r7, #3
     ba4:	781b      	ldrb	r3, [r3, #0]
     ba6:	2b01      	cmp	r3, #1
     ba8:	d00a      	beq.n	bc0 <_sercom_get_default_pad+0x108>
     baa:	dc02      	bgt.n	bb2 <_sercom_get_default_pad+0xfa>
     bac:	2b00      	cmp	r3, #0
     bae:	d005      	beq.n	bbc <_sercom_get_default_pad+0x104>
     bb0:	e021      	b.n	bf6 <_sercom_get_default_pad+0x13e>
     bb2:	2b02      	cmp	r3, #2
     bb4:	d006      	beq.n	bc4 <_sercom_get_default_pad+0x10c>
     bb6:	2b03      	cmp	r3, #3
     bb8:	d006      	beq.n	bc8 <_sercom_get_default_pad+0x110>
     bba:	e01c      	b.n	bf6 <_sercom_get_default_pad+0x13e>
     bbc:	4b25      	ldr	r3, [pc, #148]	; (c54 <_sercom_get_default_pad+0x19c>)
     bbe:	e01b      	b.n	bf8 <_sercom_get_default_pad+0x140>
     bc0:	4b25      	ldr	r3, [pc, #148]	; (c58 <_sercom_get_default_pad+0x1a0>)
     bc2:	e019      	b.n	bf8 <_sercom_get_default_pad+0x140>
     bc4:	4b25      	ldr	r3, [pc, #148]	; (c5c <_sercom_get_default_pad+0x1a4>)
     bc6:	e017      	b.n	bf8 <_sercom_get_default_pad+0x140>
     bc8:	4b25      	ldr	r3, [pc, #148]	; (c60 <_sercom_get_default_pad+0x1a8>)
     bca:	e015      	b.n	bf8 <_sercom_get_default_pad+0x140>
     bcc:	1cfb      	adds	r3, r7, #3
     bce:	781b      	ldrb	r3, [r3, #0]
     bd0:	2b01      	cmp	r3, #1
     bd2:	d00a      	beq.n	bea <_sercom_get_default_pad+0x132>
     bd4:	dc02      	bgt.n	bdc <_sercom_get_default_pad+0x124>
     bd6:	2b00      	cmp	r3, #0
     bd8:	d005      	beq.n	be6 <_sercom_get_default_pad+0x12e>
     bda:	e00c      	b.n	bf6 <_sercom_get_default_pad+0x13e>
     bdc:	2b02      	cmp	r3, #2
     bde:	d006      	beq.n	bee <_sercom_get_default_pad+0x136>
     be0:	2b03      	cmp	r3, #3
     be2:	d006      	beq.n	bf2 <_sercom_get_default_pad+0x13a>
     be4:	e007      	b.n	bf6 <_sercom_get_default_pad+0x13e>
     be6:	4b1f      	ldr	r3, [pc, #124]	; (c64 <_sercom_get_default_pad+0x1ac>)
     be8:	e006      	b.n	bf8 <_sercom_get_default_pad+0x140>
     bea:	4b1f      	ldr	r3, [pc, #124]	; (c68 <_sercom_get_default_pad+0x1b0>)
     bec:	e004      	b.n	bf8 <_sercom_get_default_pad+0x140>
     bee:	4b1f      	ldr	r3, [pc, #124]	; (c6c <_sercom_get_default_pad+0x1b4>)
     bf0:	e002      	b.n	bf8 <_sercom_get_default_pad+0x140>
     bf2:	4b1f      	ldr	r3, [pc, #124]	; (c70 <_sercom_get_default_pad+0x1b8>)
     bf4:	e000      	b.n	bf8 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     bf6:	2300      	movs	r3, #0
}
     bf8:	0018      	movs	r0, r3
     bfa:	46bd      	mov	sp, r7
     bfc:	b002      	add	sp, #8
     bfe:	bd80      	pop	{r7, pc}
     c00:	42001000 	.word	0x42001000
     c04:	42000800 	.word	0x42000800
     c08:	42000c00 	.word	0x42000c00
     c0c:	42001800 	.word	0x42001800
     c10:	42001c00 	.word	0x42001c00
     c14:	42001400 	.word	0x42001400
     c18:	00040003 	.word	0x00040003
     c1c:	00050003 	.word	0x00050003
     c20:	00060003 	.word	0x00060003
     c24:	00070003 	.word	0x00070003
     c28:	00010003 	.word	0x00010003
     c2c:	001e0003 	.word	0x001e0003
     c30:	001f0003 	.word	0x001f0003
     c34:	00080003 	.word	0x00080003
     c38:	00090003 	.word	0x00090003
     c3c:	000a0003 	.word	0x000a0003
     c40:	000b0003 	.word	0x000b0003
     c44:	00100003 	.word	0x00100003
     c48:	00110003 	.word	0x00110003
     c4c:	00120003 	.word	0x00120003
     c50:	00130003 	.word	0x00130003
     c54:	000c0003 	.word	0x000c0003
     c58:	000d0003 	.word	0x000d0003
     c5c:	000e0003 	.word	0x000e0003
     c60:	000f0003 	.word	0x000f0003
     c64:	00160003 	.word	0x00160003
     c68:	00170003 	.word	0x00170003
     c6c:	00180003 	.word	0x00180003
     c70:	00190003 	.word	0x00190003

00000c74 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     c74:	b590      	push	{r4, r7, lr}
     c76:	b08b      	sub	sp, #44	; 0x2c
     c78:	af00      	add	r7, sp, #0
     c7a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     c7c:	230c      	movs	r3, #12
     c7e:	18fb      	adds	r3, r7, r3
     c80:	4a0f      	ldr	r2, [pc, #60]	; (cc0 <_sercom_get_sercom_inst_index+0x4c>)
     c82:	ca13      	ldmia	r2!, {r0, r1, r4}
     c84:	c313      	stmia	r3!, {r0, r1, r4}
     c86:	ca13      	ldmia	r2!, {r0, r1, r4}
     c88:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c8a:	2300      	movs	r3, #0
     c8c:	627b      	str	r3, [r7, #36]	; 0x24
     c8e:	e00e      	b.n	cae <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     c90:	230c      	movs	r3, #12
     c92:	18fb      	adds	r3, r7, r3
     c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     c96:	0092      	lsls	r2, r2, #2
     c98:	58d3      	ldr	r3, [r2, r3]
     c9a:	1e1a      	subs	r2, r3, #0
     c9c:	687b      	ldr	r3, [r7, #4]
     c9e:	429a      	cmp	r2, r3
     ca0:	d102      	bne.n	ca8 <_sercom_get_sercom_inst_index+0x34>
			return i;
     ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ca4:	b2db      	uxtb	r3, r3
     ca6:	e006      	b.n	cb6 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     caa:	3301      	adds	r3, #1
     cac:	627b      	str	r3, [r7, #36]	; 0x24
     cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     cb0:	2b05      	cmp	r3, #5
     cb2:	d9ed      	bls.n	c90 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     cb4:	2300      	movs	r3, #0
}
     cb6:	0018      	movs	r0, r3
     cb8:	46bd      	mov	sp, r7
     cba:	b00b      	add	sp, #44	; 0x2c
     cbc:	bd90      	pop	{r4, r7, pc}
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	0000442c 	.word	0x0000442c

00000cc4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
     cc4:	b580      	push	{r7, lr}
     cc6:	b082      	sub	sp, #8
     cc8:	af00      	add	r7, sp, #0
     cca:	0002      	movs	r2, r0
     ccc:	1dfb      	adds	r3, r7, #7
     cce:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
     cd0:	46c0      	nop			; (mov r8, r8)
     cd2:	46bd      	mov	sp, r7
     cd4:	b002      	add	sp, #8
     cd6:	bd80      	pop	{r7, pc}

00000cd8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     cd8:	b580      	push	{r7, lr}
     cda:	b084      	sub	sp, #16
     cdc:	af00      	add	r7, sp, #0
     cde:	0002      	movs	r2, r0
     ce0:	6039      	str	r1, [r7, #0]
     ce2:	1dfb      	adds	r3, r7, #7
     ce4:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     ce6:	4b13      	ldr	r3, [pc, #76]	; (d34 <_sercom_set_handler+0x5c>)
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	2201      	movs	r2, #1
     cec:	4053      	eors	r3, r2
     cee:	b2db      	uxtb	r3, r3
     cf0:	2b00      	cmp	r3, #0
     cf2:	d015      	beq.n	d20 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     cf4:	2300      	movs	r3, #0
     cf6:	60fb      	str	r3, [r7, #12]
     cf8:	e00c      	b.n	d14 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     cfa:	4b0f      	ldr	r3, [pc, #60]	; (d38 <_sercom_set_handler+0x60>)
     cfc:	68fa      	ldr	r2, [r7, #12]
     cfe:	0092      	lsls	r2, r2, #2
     d00:	490e      	ldr	r1, [pc, #56]	; (d3c <_sercom_set_handler+0x64>)
     d02:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
     d04:	4b0e      	ldr	r3, [pc, #56]	; (d40 <_sercom_set_handler+0x68>)
     d06:	68fa      	ldr	r2, [r7, #12]
     d08:	0092      	lsls	r2, r2, #2
     d0a:	2100      	movs	r1, #0
     d0c:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d0e:	68fb      	ldr	r3, [r7, #12]
     d10:	3301      	adds	r3, #1
     d12:	60fb      	str	r3, [r7, #12]
     d14:	68fb      	ldr	r3, [r7, #12]
     d16:	2b05      	cmp	r3, #5
     d18:	d9ef      	bls.n	cfa <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     d1a:	4b06      	ldr	r3, [pc, #24]	; (d34 <_sercom_set_handler+0x5c>)
     d1c:	2201      	movs	r2, #1
     d1e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     d20:	1dfb      	adds	r3, r7, #7
     d22:	781a      	ldrb	r2, [r3, #0]
     d24:	4b04      	ldr	r3, [pc, #16]	; (d38 <_sercom_set_handler+0x60>)
     d26:	0092      	lsls	r2, r2, #2
     d28:	6839      	ldr	r1, [r7, #0]
     d2a:	50d1      	str	r1, [r2, r3]
}
     d2c:	46c0      	nop			; (mov r8, r8)
     d2e:	46bd      	mov	sp, r7
     d30:	b004      	add	sp, #16
     d32:	bd80      	pop	{r7, pc}
     d34:	2000009e 	.word	0x2000009e
     d38:	200000a0 	.word	0x200000a0
     d3c:	00000cc5 	.word	0x00000cc5
     d40:	200000dc 	.word	0x200000dc

00000d44 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     d44:	b590      	push	{r4, r7, lr}
     d46:	b085      	sub	sp, #20
     d48:	af00      	add	r7, sp, #0
     d4a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     d4c:	2308      	movs	r3, #8
     d4e:	18fa      	adds	r2, r7, r3
     d50:	4b0c      	ldr	r3, [pc, #48]	; (d84 <_sercom_get_interrupt_vector+0x40>)
     d52:	0010      	movs	r0, r2
     d54:	0019      	movs	r1, r3
     d56:	2306      	movs	r3, #6
     d58:	001a      	movs	r2, r3
     d5a:	4b0b      	ldr	r3, [pc, #44]	; (d88 <_sercom_get_interrupt_vector+0x44>)
     d5c:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     d5e:	230f      	movs	r3, #15
     d60:	18fc      	adds	r4, r7, r3
     d62:	687b      	ldr	r3, [r7, #4]
     d64:	0018      	movs	r0, r3
     d66:	4b09      	ldr	r3, [pc, #36]	; (d8c <_sercom_get_interrupt_vector+0x48>)
     d68:	4798      	blx	r3
     d6a:	0003      	movs	r3, r0
     d6c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     d6e:	230f      	movs	r3, #15
     d70:	18fb      	adds	r3, r7, r3
     d72:	781b      	ldrb	r3, [r3, #0]
     d74:	2208      	movs	r2, #8
     d76:	18ba      	adds	r2, r7, r2
     d78:	5cd3      	ldrb	r3, [r2, r3]
     d7a:	b25b      	sxtb	r3, r3
}
     d7c:	0018      	movs	r0, r3
     d7e:	46bd      	mov	sp, r7
     d80:	b005      	add	sp, #20
     d82:	bd90      	pop	{r4, r7, pc}
     d84:	00004444 	.word	0x00004444
     d88:	00003251 	.word	0x00003251
     d8c:	00000c75 	.word	0x00000c75

00000d90 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     d90:	b580      	push	{r7, lr}
     d92:	af00      	add	r7, sp, #0
     d94:	4b03      	ldr	r3, [pc, #12]	; (da4 <SERCOM0_Handler+0x14>)
     d96:	681b      	ldr	r3, [r3, #0]
     d98:	2000      	movs	r0, #0
     d9a:	4798      	blx	r3
     d9c:	46c0      	nop			; (mov r8, r8)
     d9e:	46bd      	mov	sp, r7
     da0:	bd80      	pop	{r7, pc}
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	200000a0 	.word	0x200000a0

00000da8 <SERCOM1_Handler>:
     da8:	b580      	push	{r7, lr}
     daa:	af00      	add	r7, sp, #0
     dac:	4b03      	ldr	r3, [pc, #12]	; (dbc <SERCOM1_Handler+0x14>)
     dae:	685b      	ldr	r3, [r3, #4]
     db0:	2001      	movs	r0, #1
     db2:	4798      	blx	r3
     db4:	46c0      	nop			; (mov r8, r8)
     db6:	46bd      	mov	sp, r7
     db8:	bd80      	pop	{r7, pc}
     dba:	46c0      	nop			; (mov r8, r8)
     dbc:	200000a0 	.word	0x200000a0

00000dc0 <SERCOM2_Handler>:
     dc0:	b580      	push	{r7, lr}
     dc2:	af00      	add	r7, sp, #0
     dc4:	4b03      	ldr	r3, [pc, #12]	; (dd4 <SERCOM2_Handler+0x14>)
     dc6:	689b      	ldr	r3, [r3, #8]
     dc8:	2002      	movs	r0, #2
     dca:	4798      	blx	r3
     dcc:	46c0      	nop			; (mov r8, r8)
     dce:	46bd      	mov	sp, r7
     dd0:	bd80      	pop	{r7, pc}
     dd2:	46c0      	nop			; (mov r8, r8)
     dd4:	200000a0 	.word	0x200000a0

00000dd8 <SERCOM3_Handler>:
     dd8:	b580      	push	{r7, lr}
     dda:	af00      	add	r7, sp, #0
     ddc:	4b03      	ldr	r3, [pc, #12]	; (dec <SERCOM3_Handler+0x14>)
     dde:	68db      	ldr	r3, [r3, #12]
     de0:	2003      	movs	r0, #3
     de2:	4798      	blx	r3
     de4:	46c0      	nop			; (mov r8, r8)
     de6:	46bd      	mov	sp, r7
     de8:	bd80      	pop	{r7, pc}
     dea:	46c0      	nop			; (mov r8, r8)
     dec:	200000a0 	.word	0x200000a0

00000df0 <SERCOM4_Handler>:
     df0:	b580      	push	{r7, lr}
     df2:	af00      	add	r7, sp, #0
     df4:	4b03      	ldr	r3, [pc, #12]	; (e04 <SERCOM4_Handler+0x14>)
     df6:	691b      	ldr	r3, [r3, #16]
     df8:	2004      	movs	r0, #4
     dfa:	4798      	blx	r3
     dfc:	46c0      	nop			; (mov r8, r8)
     dfe:	46bd      	mov	sp, r7
     e00:	bd80      	pop	{r7, pc}
     e02:	46c0      	nop			; (mov r8, r8)
     e04:	200000a0 	.word	0x200000a0

00000e08 <SERCOM5_Handler>:
     e08:	b580      	push	{r7, lr}
     e0a:	af00      	add	r7, sp, #0
     e0c:	4b03      	ldr	r3, [pc, #12]	; (e1c <SERCOM5_Handler+0x14>)
     e0e:	695b      	ldr	r3, [r3, #20]
     e10:	2005      	movs	r0, #5
     e12:	4798      	blx	r3
     e14:	46c0      	nop			; (mov r8, r8)
     e16:	46bd      	mov	sp, r7
     e18:	bd80      	pop	{r7, pc}
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	200000a0 	.word	0x200000a0

00000e20 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     e20:	b580      	push	{r7, lr}
     e22:	b082      	sub	sp, #8
     e24:	af00      	add	r7, sp, #0
     e26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     e28:	687b      	ldr	r3, [r7, #4]
     e2a:	2200      	movs	r2, #0
     e2c:	701a      	strb	r2, [r3, #0]
}
     e2e:	46c0      	nop			; (mov r8, r8)
     e30:	46bd      	mov	sp, r7
     e32:	b002      	add	sp, #8
     e34:	bd80      	pop	{r7, pc}
     e36:	46c0      	nop			; (mov r8, r8)

00000e38 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     e38:	b580      	push	{r7, lr}
     e3a:	b082      	sub	sp, #8
     e3c:	af00      	add	r7, sp, #0
     e3e:	0002      	movs	r2, r0
     e40:	6039      	str	r1, [r7, #0]
     e42:	1dfb      	adds	r3, r7, #7
     e44:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     e46:	1dfb      	adds	r3, r7, #7
     e48:	781b      	ldrb	r3, [r3, #0]
     e4a:	2b01      	cmp	r3, #1
     e4c:	d00a      	beq.n	e64 <system_apb_clock_set_mask+0x2c>
     e4e:	2b02      	cmp	r3, #2
     e50:	d00f      	beq.n	e72 <system_apb_clock_set_mask+0x3a>
     e52:	2b00      	cmp	r3, #0
     e54:	d114      	bne.n	e80 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     e56:	4b0e      	ldr	r3, [pc, #56]	; (e90 <system_apb_clock_set_mask+0x58>)
     e58:	4a0d      	ldr	r2, [pc, #52]	; (e90 <system_apb_clock_set_mask+0x58>)
     e5a:	6991      	ldr	r1, [r2, #24]
     e5c:	683a      	ldr	r2, [r7, #0]
     e5e:	430a      	orrs	r2, r1
     e60:	619a      	str	r2, [r3, #24]
			break;
     e62:	e00f      	b.n	e84 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     e64:	4b0a      	ldr	r3, [pc, #40]	; (e90 <system_apb_clock_set_mask+0x58>)
     e66:	4a0a      	ldr	r2, [pc, #40]	; (e90 <system_apb_clock_set_mask+0x58>)
     e68:	69d1      	ldr	r1, [r2, #28]
     e6a:	683a      	ldr	r2, [r7, #0]
     e6c:	430a      	orrs	r2, r1
     e6e:	61da      	str	r2, [r3, #28]
			break;
     e70:	e008      	b.n	e84 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     e72:	4b07      	ldr	r3, [pc, #28]	; (e90 <system_apb_clock_set_mask+0x58>)
     e74:	4a06      	ldr	r2, [pc, #24]	; (e90 <system_apb_clock_set_mask+0x58>)
     e76:	6a11      	ldr	r1, [r2, #32]
     e78:	683a      	ldr	r2, [r7, #0]
     e7a:	430a      	orrs	r2, r1
     e7c:	621a      	str	r2, [r3, #32]
			break;
     e7e:	e001      	b.n	e84 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     e80:	2317      	movs	r3, #23
     e82:	e000      	b.n	e86 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     e84:	2300      	movs	r3, #0
}
     e86:	0018      	movs	r0, r3
     e88:	46bd      	mov	sp, r7
     e8a:	b002      	add	sp, #8
     e8c:	bd80      	pop	{r7, pc}
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	40000400 	.word	0x40000400

00000e94 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     e94:	b580      	push	{r7, lr}
     e96:	b082      	sub	sp, #8
     e98:	af00      	add	r7, sp, #0
     e9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e9c:	687b      	ldr	r3, [r7, #4]
     e9e:	2280      	movs	r2, #128	; 0x80
     ea0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     ea2:	687b      	ldr	r3, [r7, #4]
     ea4:	2200      	movs	r2, #0
     ea6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	2201      	movs	r2, #1
     eac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     eae:	687b      	ldr	r3, [r7, #4]
     eb0:	2200      	movs	r2, #0
     eb2:	70da      	strb	r2, [r3, #3]
}
     eb4:	46c0      	nop			; (mov r8, r8)
     eb6:	46bd      	mov	sp, r7
     eb8:	b002      	add	sp, #8
     eba:	bd80      	pop	{r7, pc}

00000ebc <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     ebc:	b580      	push	{r7, lr}
     ebe:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     ec0:	4b05      	ldr	r3, [pc, #20]	; (ed8 <system_is_debugger_present+0x1c>)
     ec2:	789b      	ldrb	r3, [r3, #2]
     ec4:	b2db      	uxtb	r3, r3
     ec6:	001a      	movs	r2, r3
     ec8:	2302      	movs	r3, #2
     eca:	4013      	ands	r3, r2
     ecc:	1e5a      	subs	r2, r3, #1
     ece:	4193      	sbcs	r3, r2
     ed0:	b2db      	uxtb	r3, r3
}
     ed2:	0018      	movs	r0, r3
     ed4:	46bd      	mov	sp, r7
     ed6:	bd80      	pop	{r7, pc}
     ed8:	41002000 	.word	0x41002000

00000edc <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     edc:	b580      	push	{r7, lr}
     ede:	b084      	sub	sp, #16
     ee0:	af00      	add	r7, sp, #0
     ee2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ee4:	687b      	ldr	r3, [r7, #4]
     ee6:	681b      	ldr	r3, [r3, #0]
     ee8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     eea:	68fb      	ldr	r3, [r7, #12]
     eec:	69db      	ldr	r3, [r3, #28]
     eee:	1e5a      	subs	r2, r3, #1
     ef0:	4193      	sbcs	r3, r2
     ef2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     ef4:	0018      	movs	r0, r3
     ef6:	46bd      	mov	sp, r7
     ef8:	b004      	add	sp, #16
     efa:	bd80      	pop	{r7, pc}

00000efc <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     efc:	b580      	push	{r7, lr}
     efe:	b082      	sub	sp, #8
     f00:	af00      	add	r7, sp, #0
     f02:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f04:	46c0      	nop			; (mov r8, r8)
     f06:	687b      	ldr	r3, [r7, #4]
     f08:	0018      	movs	r0, r3
     f0a:	4b04      	ldr	r3, [pc, #16]	; (f1c <_usart_wait_for_sync+0x20>)
     f0c:	4798      	blx	r3
     f0e:	1e03      	subs	r3, r0, #0
     f10:	d1f9      	bne.n	f06 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	46bd      	mov	sp, r7
     f16:	b002      	add	sp, #8
     f18:	bd80      	pop	{r7, pc}
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	00000edd 	.word	0x00000edd

00000f20 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     f20:	b5b0      	push	{r4, r5, r7, lr}
     f22:	b08c      	sub	sp, #48	; 0x30
     f24:	af02      	add	r7, sp, #8
     f26:	6078      	str	r0, [r7, #4]
     f28:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     f2a:	687b      	ldr	r3, [r7, #4]
     f2c:	681b      	ldr	r3, [r3, #0]
     f2e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f30:	687b      	ldr	r3, [r7, #4]
     f32:	681b      	ldr	r3, [r3, #0]
     f34:	0018      	movs	r0, r3
     f36:	4bab      	ldr	r3, [pc, #684]	; (11e4 <_usart_set_config+0x2c4>)
     f38:	4798      	blx	r3
     f3a:	0003      	movs	r3, r0
     f3c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f3e:	697b      	ldr	r3, [r7, #20]
     f40:	3314      	adds	r3, #20
     f42:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
     f44:	2300      	movs	r3, #0
     f46:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
     f48:	2300      	movs	r3, #0
     f4a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     f4c:	230a      	movs	r3, #10
     f4e:	18fb      	adds	r3, r7, r3
     f50:	2200      	movs	r2, #0
     f52:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f54:	231f      	movs	r3, #31
     f56:	18fb      	adds	r3, r7, r3
     f58:	2200      	movs	r2, #0
     f5a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f5c:	231e      	movs	r3, #30
     f5e:	18fb      	adds	r3, r7, r3
     f60:	2210      	movs	r2, #16
     f62:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     f64:	683b      	ldr	r3, [r7, #0]
     f66:	8a1b      	ldrh	r3, [r3, #16]
     f68:	2280      	movs	r2, #128	; 0x80
     f6a:	01d2      	lsls	r2, r2, #7
     f6c:	4293      	cmp	r3, r2
     f6e:	d01c      	beq.n	faa <_usart_set_config+0x8a>
     f70:	2280      	movs	r2, #128	; 0x80
     f72:	01d2      	lsls	r2, r2, #7
     f74:	4293      	cmp	r3, r2
     f76:	dc06      	bgt.n	f86 <_usart_set_config+0x66>
     f78:	2b00      	cmp	r3, #0
     f7a:	d00d      	beq.n	f98 <_usart_set_config+0x78>
     f7c:	2280      	movs	r2, #128	; 0x80
     f7e:	0192      	lsls	r2, r2, #6
     f80:	4293      	cmp	r3, r2
     f82:	d024      	beq.n	fce <_usart_set_config+0xae>
     f84:	e035      	b.n	ff2 <_usart_set_config+0xd2>
     f86:	22c0      	movs	r2, #192	; 0xc0
     f88:	01d2      	lsls	r2, r2, #7
     f8a:	4293      	cmp	r3, r2
     f8c:	d028      	beq.n	fe0 <_usart_set_config+0xc0>
     f8e:	2280      	movs	r2, #128	; 0x80
     f90:	0212      	lsls	r2, r2, #8
     f92:	4293      	cmp	r3, r2
     f94:	d012      	beq.n	fbc <_usart_set_config+0x9c>
     f96:	e02c      	b.n	ff2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f98:	231f      	movs	r3, #31
     f9a:	18fb      	adds	r3, r7, r3
     f9c:	2200      	movs	r2, #0
     f9e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     fa0:	231e      	movs	r3, #30
     fa2:	18fb      	adds	r3, r7, r3
     fa4:	2210      	movs	r2, #16
     fa6:	701a      	strb	r2, [r3, #0]
			break;
     fa8:	e023      	b.n	ff2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     faa:	231f      	movs	r3, #31
     fac:	18fb      	adds	r3, r7, r3
     fae:	2200      	movs	r2, #0
     fb0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     fb2:	231e      	movs	r3, #30
     fb4:	18fb      	adds	r3, r7, r3
     fb6:	2208      	movs	r2, #8
     fb8:	701a      	strb	r2, [r3, #0]
			break;
     fba:	e01a      	b.n	ff2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     fbc:	231f      	movs	r3, #31
     fbe:	18fb      	adds	r3, r7, r3
     fc0:	2200      	movs	r2, #0
     fc2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     fc4:	231e      	movs	r3, #30
     fc6:	18fb      	adds	r3, r7, r3
     fc8:	2203      	movs	r2, #3
     fca:	701a      	strb	r2, [r3, #0]
			break;
     fcc:	e011      	b.n	ff2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     fce:	231f      	movs	r3, #31
     fd0:	18fb      	adds	r3, r7, r3
     fd2:	2201      	movs	r2, #1
     fd4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     fd6:	231e      	movs	r3, #30
     fd8:	18fb      	adds	r3, r7, r3
     fda:	2210      	movs	r2, #16
     fdc:	701a      	strb	r2, [r3, #0]
			break;
     fde:	e008      	b.n	ff2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     fe0:	231f      	movs	r3, #31
     fe2:	18fb      	adds	r3, r7, r3
     fe4:	2201      	movs	r2, #1
     fe6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     fe8:	231e      	movs	r3, #30
     fea:	18fb      	adds	r3, r7, r3
     fec:	2208      	movs	r2, #8
     fee:	701a      	strb	r2, [r3, #0]
			break;
     ff0:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ff2:	683b      	ldr	r3, [r7, #0]
     ff4:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
     ff6:	683b      	ldr	r3, [r7, #0]
     ff8:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     ffa:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ffc:	683b      	ldr	r3, [r7, #0]
     ffe:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    1000:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    1002:	683a      	ldr	r2, [r7, #0]
    1004:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1006:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1008:	683a      	ldr	r2, [r7, #0]
    100a:	7e12      	ldrb	r2, [r2, #24]
    100c:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    100e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1010:	683a      	ldr	r2, [r7, #0]
    1012:	2126      	movs	r1, #38	; 0x26
    1014:	5c52      	ldrb	r2, [r2, r1]
    1016:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1018:	4313      	orrs	r3, r2
    101a:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    101c:	231d      	movs	r3, #29
    101e:	18fb      	adds	r3, r7, r3
    1020:	2200      	movs	r2, #0
    1022:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    1024:	683b      	ldr	r3, [r7, #0]
    1026:	685b      	ldr	r3, [r3, #4]
    1028:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    102a:	68fb      	ldr	r3, [r7, #12]
    102c:	2b00      	cmp	r3, #0
    102e:	d01e      	beq.n	106e <_usart_set_config+0x14e>
    1030:	2280      	movs	r2, #128	; 0x80
    1032:	0552      	lsls	r2, r2, #21
    1034:	4293      	cmp	r3, r2
    1036:	d14f      	bne.n	10d8 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    1038:	683b      	ldr	r3, [r7, #0]
    103a:	2227      	movs	r2, #39	; 0x27
    103c:	5c9b      	ldrb	r3, [r3, r2]
    103e:	2201      	movs	r2, #1
    1040:	4053      	eors	r3, r2
    1042:	b2db      	uxtb	r3, r3
    1044:	2b00      	cmp	r3, #0
    1046:	d046      	beq.n	10d6 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1048:	683b      	ldr	r3, [r7, #0]
    104a:	6a1d      	ldr	r5, [r3, #32]
    104c:	693b      	ldr	r3, [r7, #16]
    104e:	b2db      	uxtb	r3, r3
    1050:	0018      	movs	r0, r3
    1052:	4b65      	ldr	r3, [pc, #404]	; (11e8 <_usart_set_config+0x2c8>)
    1054:	4798      	blx	r3
    1056:	0001      	movs	r1, r0
    1058:	231d      	movs	r3, #29
    105a:	18fc      	adds	r4, r7, r3
    105c:	230a      	movs	r3, #10
    105e:	18fb      	adds	r3, r7, r3
    1060:	001a      	movs	r2, r3
    1062:	0028      	movs	r0, r5
    1064:	4b61      	ldr	r3, [pc, #388]	; (11ec <_usart_set_config+0x2cc>)
    1066:	4798      	blx	r3
    1068:	0003      	movs	r3, r0
    106a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    106c:	e033      	b.n	10d6 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    106e:	683b      	ldr	r3, [r7, #0]
    1070:	2227      	movs	r2, #39	; 0x27
    1072:	5c9b      	ldrb	r3, [r3, r2]
    1074:	2b00      	cmp	r3, #0
    1076:	d014      	beq.n	10a2 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    1078:	683b      	ldr	r3, [r7, #0]
    107a:	6a18      	ldr	r0, [r3, #32]
    107c:	683b      	ldr	r3, [r7, #0]
    107e:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    1080:	231d      	movs	r3, #29
    1082:	18fc      	adds	r4, r7, r3
    1084:	231f      	movs	r3, #31
    1086:	18fb      	adds	r3, r7, r3
    1088:	781d      	ldrb	r5, [r3, #0]
    108a:	230a      	movs	r3, #10
    108c:	18fa      	adds	r2, r7, r3
    108e:	231e      	movs	r3, #30
    1090:	18fb      	adds	r3, r7, r3
    1092:	781b      	ldrb	r3, [r3, #0]
    1094:	9300      	str	r3, [sp, #0]
    1096:	002b      	movs	r3, r5
    1098:	4d55      	ldr	r5, [pc, #340]	; (11f0 <_usart_set_config+0x2d0>)
    109a:	47a8      	blx	r5
    109c:	0003      	movs	r3, r0
    109e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    10a0:	e01a      	b.n	10d8 <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    10a2:	683b      	ldr	r3, [r7, #0]
    10a4:	6a1d      	ldr	r5, [r3, #32]
    10a6:	693b      	ldr	r3, [r7, #16]
    10a8:	b2db      	uxtb	r3, r3
    10aa:	0018      	movs	r0, r3
    10ac:	4b4e      	ldr	r3, [pc, #312]	; (11e8 <_usart_set_config+0x2c8>)
    10ae:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    10b0:	231d      	movs	r3, #29
    10b2:	18fc      	adds	r4, r7, r3
    10b4:	231f      	movs	r3, #31
    10b6:	18fb      	adds	r3, r7, r3
    10b8:	7819      	ldrb	r1, [r3, #0]
    10ba:	230a      	movs	r3, #10
    10bc:	18fa      	adds	r2, r7, r3
    10be:	231e      	movs	r3, #30
    10c0:	18fb      	adds	r3, r7, r3
    10c2:	781b      	ldrb	r3, [r3, #0]
    10c4:	9300      	str	r3, [sp, #0]
    10c6:	000b      	movs	r3, r1
    10c8:	0001      	movs	r1, r0
    10ca:	0028      	movs	r0, r5
    10cc:	4d48      	ldr	r5, [pc, #288]	; (11f0 <_usart_set_config+0x2d0>)
    10ce:	47a8      	blx	r5
    10d0:	0003      	movs	r3, r0
    10d2:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    10d4:	e000      	b.n	10d8 <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    10d6:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    10d8:	231d      	movs	r3, #29
    10da:	18fb      	adds	r3, r7, r3
    10dc:	781b      	ldrb	r3, [r3, #0]
    10de:	2b00      	cmp	r3, #0
    10e0:	d003      	beq.n	10ea <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    10e2:	231d      	movs	r3, #29
    10e4:	18fb      	adds	r3, r7, r3
    10e6:	781b      	ldrb	r3, [r3, #0]
    10e8:	e077      	b.n	11da <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    10ea:	683b      	ldr	r3, [r7, #0]
    10ec:	7e5b      	ldrb	r3, [r3, #25]
    10ee:	2b00      	cmp	r3, #0
    10f0:	d003      	beq.n	10fa <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    10f2:	683b      	ldr	r3, [r7, #0]
    10f4:	7e9a      	ldrb	r2, [r3, #26]
    10f6:	69bb      	ldr	r3, [r7, #24]
    10f8:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    10fa:	687b      	ldr	r3, [r7, #4]
    10fc:	0018      	movs	r0, r3
    10fe:	4b3d      	ldr	r3, [pc, #244]	; (11f4 <_usart_set_config+0x2d4>)
    1100:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    1102:	230a      	movs	r3, #10
    1104:	18fb      	adds	r3, r7, r3
    1106:	881a      	ldrh	r2, [r3, #0]
    1108:	69bb      	ldr	r3, [r7, #24]
    110a:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    110c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    110e:	68fb      	ldr	r3, [r7, #12]
    1110:	4313      	orrs	r3, r2
    1112:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    1114:	683b      	ldr	r3, [r7, #0]
    1116:	2227      	movs	r2, #39	; 0x27
    1118:	5c9b      	ldrb	r3, [r3, r2]
    111a:	2201      	movs	r2, #1
    111c:	4053      	eors	r3, r2
    111e:	b2db      	uxtb	r3, r3
    1120:	2b00      	cmp	r3, #0
    1122:	d003      	beq.n	112c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1126:	2204      	movs	r2, #4
    1128:	4313      	orrs	r3, r2
    112a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    112c:	683b      	ldr	r3, [r7, #0]
    112e:	7e5b      	ldrb	r3, [r3, #25]
    1130:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1132:	683b      	ldr	r3, [r7, #0]
    1134:	7f1b      	ldrb	r3, [r3, #28]
    1136:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1138:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    113a:	683b      	ldr	r3, [r7, #0]
    113c:	7f5b      	ldrb	r3, [r3, #29]
    113e:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1140:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1142:	683b      	ldr	r3, [r7, #0]
    1144:	2124      	movs	r1, #36	; 0x24
    1146:	5c5b      	ldrb	r3, [r3, r1]
    1148:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    114a:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    114c:	683b      	ldr	r3, [r7, #0]
    114e:	2125      	movs	r1, #37	; 0x25
    1150:	5c5b      	ldrb	r3, [r3, r1]
    1152:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1154:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1156:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    1158:	683b      	ldr	r3, [r7, #0]
    115a:	7a9b      	ldrb	r3, [r3, #10]
    115c:	001a      	movs	r2, r3
    115e:	6a3b      	ldr	r3, [r7, #32]
    1160:	4313      	orrs	r3, r2
    1162:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    1164:	683b      	ldr	r3, [r7, #0]
    1166:	7adb      	ldrb	r3, [r3, #11]
    1168:	001a      	movs	r2, r3
    116a:	6a3b      	ldr	r3, [r7, #32]
    116c:	4313      	orrs	r3, r2
    116e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1170:	683b      	ldr	r3, [r7, #0]
    1172:	891b      	ldrh	r3, [r3, #8]
    1174:	2bff      	cmp	r3, #255	; 0xff
    1176:	d00b      	beq.n	1190 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    117a:	2280      	movs	r2, #128	; 0x80
    117c:	0452      	lsls	r2, r2, #17
    117e:	4313      	orrs	r3, r2
    1180:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    1182:	683b      	ldr	r3, [r7, #0]
    1184:	891b      	ldrh	r3, [r3, #8]
    1186:	001a      	movs	r2, r3
    1188:	6a3b      	ldr	r3, [r7, #32]
    118a:	4313      	orrs	r3, r2
    118c:	623b      	str	r3, [r7, #32]
    118e:	e008      	b.n	11a2 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1190:	683b      	ldr	r3, [r7, #0]
    1192:	7edb      	ldrb	r3, [r3, #27]
    1194:	2b00      	cmp	r3, #0
    1196:	d004      	beq.n	11a2 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    119a:	2280      	movs	r2, #128	; 0x80
    119c:	04d2      	lsls	r2, r2, #19
    119e:	4313      	orrs	r3, r2
    11a0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    11a2:	683b      	ldr	r3, [r7, #0]
    11a4:	222c      	movs	r2, #44	; 0x2c
    11a6:	5c9b      	ldrb	r3, [r3, r2]
    11a8:	2b00      	cmp	r3, #0
    11aa:	d103      	bne.n	11b4 <_usart_set_config+0x294>
    11ac:	4b12      	ldr	r3, [pc, #72]	; (11f8 <_usart_set_config+0x2d8>)
    11ae:	4798      	blx	r3
    11b0:	1e03      	subs	r3, r0, #0
    11b2:	d003      	beq.n	11bc <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    11b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11b6:	2280      	movs	r2, #128	; 0x80
    11b8:	4313      	orrs	r3, r2
    11ba:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    11bc:	687b      	ldr	r3, [r7, #4]
    11be:	0018      	movs	r0, r3
    11c0:	4b0c      	ldr	r3, [pc, #48]	; (11f4 <_usart_set_config+0x2d4>)
    11c2:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    11c4:	69bb      	ldr	r3, [r7, #24]
    11c6:	6a3a      	ldr	r2, [r7, #32]
    11c8:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    11ca:	687b      	ldr	r3, [r7, #4]
    11cc:	0018      	movs	r0, r3
    11ce:	4b09      	ldr	r3, [pc, #36]	; (11f4 <_usart_set_config+0x2d4>)
    11d0:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    11d2:	69bb      	ldr	r3, [r7, #24]
    11d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    11d6:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    11d8:	2300      	movs	r3, #0
}
    11da:	0018      	movs	r0, r3
    11dc:	46bd      	mov	sp, r7
    11de:	b00a      	add	sp, #40	; 0x28
    11e0:	bdb0      	pop	{r4, r5, r7, pc}
    11e2:	46c0      	nop			; (mov r8, r8)
    11e4:	00000c75 	.word	0x00000c75
    11e8:	000024f5 	.word	0x000024f5
    11ec:	000007f1 	.word	0x000007f1
    11f0:	0000086d 	.word	0x0000086d
    11f4:	00000efd 	.word	0x00000efd
    11f8:	00000ebd 	.word	0x00000ebd

000011fc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    11fc:	b590      	push	{r4, r7, lr}
    11fe:	b093      	sub	sp, #76	; 0x4c
    1200:	af00      	add	r7, sp, #0
    1202:	60f8      	str	r0, [r7, #12]
    1204:	60b9      	str	r1, [r7, #8]
    1206:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    1208:	233b      	movs	r3, #59	; 0x3b
    120a:	18fb      	adds	r3, r7, r3
    120c:	2200      	movs	r2, #0
    120e:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1210:	68fb      	ldr	r3, [r7, #12]
    1212:	68ba      	ldr	r2, [r7, #8]
    1214:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1216:	68fb      	ldr	r3, [r7, #12]
    1218:	681b      	ldr	r3, [r3, #0]
    121a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    121c:	68fb      	ldr	r3, [r7, #12]
    121e:	681b      	ldr	r3, [r3, #0]
    1220:	0018      	movs	r0, r3
    1222:	4b86      	ldr	r3, [pc, #536]	; (143c <usart_init+0x240>)
    1224:	4798      	blx	r3
    1226:	0003      	movs	r3, r0
    1228:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    122c:	3302      	adds	r3, #2
    122e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1232:	3314      	adds	r3, #20
    1234:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1238:	681b      	ldr	r3, [r3, #0]
    123a:	2201      	movs	r2, #1
    123c:	4013      	ands	r3, r2
    123e:	d001      	beq.n	1244 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1240:	2305      	movs	r3, #5
    1242:	e0f6      	b.n	1432 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1246:	681b      	ldr	r3, [r3, #0]
    1248:	2202      	movs	r2, #2
    124a:	4013      	ands	r3, r2
    124c:	d001      	beq.n	1252 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    124e:	231c      	movs	r3, #28
    1250:	e0ef      	b.n	1432 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1252:	2201      	movs	r2, #1
    1254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1256:	409a      	lsls	r2, r3
    1258:	0013      	movs	r3, r2
    125a:	0019      	movs	r1, r3
    125c:	2002      	movs	r0, #2
    125e:	4b78      	ldr	r3, [pc, #480]	; (1440 <usart_init+0x244>)
    1260:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1262:	2324      	movs	r3, #36	; 0x24
    1264:	18fb      	adds	r3, r7, r3
    1266:	0018      	movs	r0, r3
    1268:	4b76      	ldr	r3, [pc, #472]	; (1444 <usart_init+0x248>)
    126a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    126c:	687b      	ldr	r3, [r7, #4]
    126e:	222d      	movs	r2, #45	; 0x2d
    1270:	5c9a      	ldrb	r2, [r3, r2]
    1272:	2324      	movs	r3, #36	; 0x24
    1274:	18fb      	adds	r3, r7, r3
    1276:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1278:	6abb      	ldr	r3, [r7, #40]	; 0x28
    127a:	b2db      	uxtb	r3, r3
    127c:	2224      	movs	r2, #36	; 0x24
    127e:	18ba      	adds	r2, r7, r2
    1280:	0011      	movs	r1, r2
    1282:	0018      	movs	r0, r3
    1284:	4b70      	ldr	r3, [pc, #448]	; (1448 <usart_init+0x24c>)
    1286:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1288:	6abb      	ldr	r3, [r7, #40]	; 0x28
    128a:	b2db      	uxtb	r3, r3
    128c:	0018      	movs	r0, r3
    128e:	4b6f      	ldr	r3, [pc, #444]	; (144c <usart_init+0x250>)
    1290:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1292:	687b      	ldr	r3, [r7, #4]
    1294:	222d      	movs	r2, #45	; 0x2d
    1296:	5c9b      	ldrb	r3, [r3, r2]
    1298:	2100      	movs	r1, #0
    129a:	0018      	movs	r0, r3
    129c:	4b6c      	ldr	r3, [pc, #432]	; (1450 <usart_init+0x254>)
    129e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    12a0:	687b      	ldr	r3, [r7, #4]
    12a2:	7ada      	ldrb	r2, [r3, #11]
    12a4:	68fb      	ldr	r3, [r7, #12]
    12a6:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    12a8:	687b      	ldr	r3, [r7, #4]
    12aa:	2224      	movs	r2, #36	; 0x24
    12ac:	5c9a      	ldrb	r2, [r3, r2]
    12ae:	68fb      	ldr	r3, [r7, #12]
    12b0:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    12b2:	687b      	ldr	r3, [r7, #4]
    12b4:	2225      	movs	r2, #37	; 0x25
    12b6:	5c9a      	ldrb	r2, [r3, r2]
    12b8:	68fb      	ldr	r3, [r7, #12]
    12ba:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    12bc:	687b      	ldr	r3, [r7, #4]
    12be:	7eda      	ldrb	r2, [r3, #27]
    12c0:	68fb      	ldr	r3, [r7, #12]
    12c2:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    12c4:	687b      	ldr	r3, [r7, #4]
    12c6:	7f1a      	ldrb	r2, [r3, #28]
    12c8:	68fb      	ldr	r3, [r7, #12]
    12ca:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    12cc:	233b      	movs	r3, #59	; 0x3b
    12ce:	18fc      	adds	r4, r7, r3
    12d0:	687a      	ldr	r2, [r7, #4]
    12d2:	68fb      	ldr	r3, [r7, #12]
    12d4:	0011      	movs	r1, r2
    12d6:	0018      	movs	r0, r3
    12d8:	4b5e      	ldr	r3, [pc, #376]	; (1454 <usart_init+0x258>)
    12da:	4798      	blx	r3
    12dc:	0003      	movs	r3, r0
    12de:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    12e0:	233b      	movs	r3, #59	; 0x3b
    12e2:	18fb      	adds	r3, r7, r3
    12e4:	781b      	ldrb	r3, [r3, #0]
    12e6:	2b00      	cmp	r3, #0
    12e8:	d003      	beq.n	12f2 <usart_init+0xf6>
		return status_code;
    12ea:	233b      	movs	r3, #59	; 0x3b
    12ec:	18fb      	adds	r3, r7, r3
    12ee:	781b      	ldrb	r3, [r3, #0]
    12f0:	e09f      	b.n	1432 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    12f2:	2320      	movs	r3, #32
    12f4:	18fb      	adds	r3, r7, r3
    12f6:	0018      	movs	r0, r3
    12f8:	4b57      	ldr	r3, [pc, #348]	; (1458 <usart_init+0x25c>)
    12fa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12fc:	2320      	movs	r3, #32
    12fe:	18fb      	adds	r3, r7, r3
    1300:	2200      	movs	r2, #0
    1302:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1304:	2320      	movs	r3, #32
    1306:	18fb      	adds	r3, r7, r3
    1308:	2200      	movs	r2, #0
    130a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    130c:	687b      	ldr	r3, [r7, #4]
    130e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    1310:	2310      	movs	r3, #16
    1312:	18fb      	adds	r3, r7, r3
    1314:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    1316:	687b      	ldr	r3, [r7, #4]
    1318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    131a:	2310      	movs	r3, #16
    131c:	18fb      	adds	r3, r7, r3
    131e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    1320:	687b      	ldr	r3, [r7, #4]
    1322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    1324:	2310      	movs	r3, #16
    1326:	18fb      	adds	r3, r7, r3
    1328:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    132a:	687b      	ldr	r3, [r7, #4]
    132c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    132e:	2310      	movs	r3, #16
    1330:	18fb      	adds	r3, r7, r3
    1332:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1334:	2347      	movs	r3, #71	; 0x47
    1336:	18fb      	adds	r3, r7, r3
    1338:	2200      	movs	r2, #0
    133a:	701a      	strb	r2, [r3, #0]
    133c:	e02c      	b.n	1398 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    133e:	2347      	movs	r3, #71	; 0x47
    1340:	18fb      	adds	r3, r7, r3
    1342:	781a      	ldrb	r2, [r3, #0]
    1344:	2310      	movs	r3, #16
    1346:	18fb      	adds	r3, r7, r3
    1348:	0092      	lsls	r2, r2, #2
    134a:	58d3      	ldr	r3, [r2, r3]
    134c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    134e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1350:	2b00      	cmp	r3, #0
    1352:	d109      	bne.n	1368 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1354:	2347      	movs	r3, #71	; 0x47
    1356:	18fb      	adds	r3, r7, r3
    1358:	781a      	ldrb	r2, [r3, #0]
    135a:	68bb      	ldr	r3, [r7, #8]
    135c:	0011      	movs	r1, r2
    135e:	0018      	movs	r0, r3
    1360:	4b3e      	ldr	r3, [pc, #248]	; (145c <usart_init+0x260>)
    1362:	4798      	blx	r3
    1364:	0003      	movs	r3, r0
    1366:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    136a:	3301      	adds	r3, #1
    136c:	d00d      	beq.n	138a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    136e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1370:	b2da      	uxtb	r2, r3
    1372:	2320      	movs	r3, #32
    1374:	18fb      	adds	r3, r7, r3
    1376:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    137a:	0c1b      	lsrs	r3, r3, #16
    137c:	b2db      	uxtb	r3, r3
    137e:	2220      	movs	r2, #32
    1380:	18ba      	adds	r2, r7, r2
    1382:	0011      	movs	r1, r2
    1384:	0018      	movs	r0, r3
    1386:	4b36      	ldr	r3, [pc, #216]	; (1460 <usart_init+0x264>)
    1388:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    138a:	2347      	movs	r3, #71	; 0x47
    138c:	18fb      	adds	r3, r7, r3
    138e:	781a      	ldrb	r2, [r3, #0]
    1390:	2347      	movs	r3, #71	; 0x47
    1392:	18fb      	adds	r3, r7, r3
    1394:	3201      	adds	r2, #1
    1396:	701a      	strb	r2, [r3, #0]
    1398:	2347      	movs	r3, #71	; 0x47
    139a:	18fb      	adds	r3, r7, r3
    139c:	781b      	ldrb	r3, [r3, #0]
    139e:	2b03      	cmp	r3, #3
    13a0:	d9cd      	bls.n	133e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    13a2:	2300      	movs	r3, #0
    13a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    13a6:	e00a      	b.n	13be <usart_init+0x1c2>
		module->callback[i]            = NULL;
    13a8:	68fa      	ldr	r2, [r7, #12]
    13aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13ac:	3302      	adds	r3, #2
    13ae:	009b      	lsls	r3, r3, #2
    13b0:	18d3      	adds	r3, r2, r3
    13b2:	3304      	adds	r3, #4
    13b4:	2200      	movs	r2, #0
    13b6:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    13b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13ba:	3301      	adds	r3, #1
    13bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    13be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    13c0:	2b05      	cmp	r3, #5
    13c2:	d9f1      	bls.n	13a8 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    13c4:	68fb      	ldr	r3, [r7, #12]
    13c6:	2200      	movs	r2, #0
    13c8:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    13ca:	68fb      	ldr	r3, [r7, #12]
    13cc:	2200      	movs	r2, #0
    13ce:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    13d0:	68fb      	ldr	r3, [r7, #12]
    13d2:	2200      	movs	r2, #0
    13d4:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    13d6:	68fb      	ldr	r3, [r7, #12]
    13d8:	2200      	movs	r2, #0
    13da:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    13dc:	68fb      	ldr	r3, [r7, #12]
    13de:	2230      	movs	r2, #48	; 0x30
    13e0:	2100      	movs	r1, #0
    13e2:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    13e4:	68fb      	ldr	r3, [r7, #12]
    13e6:	2231      	movs	r2, #49	; 0x31
    13e8:	2100      	movs	r1, #0
    13ea:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    13ec:	68fb      	ldr	r3, [r7, #12]
    13ee:	2232      	movs	r2, #50	; 0x32
    13f0:	2100      	movs	r1, #0
    13f2:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    13f4:	68fb      	ldr	r3, [r7, #12]
    13f6:	2233      	movs	r2, #51	; 0x33
    13f8:	2100      	movs	r1, #0
    13fa:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    13fc:	68fb      	ldr	r3, [r7, #12]
    13fe:	681b      	ldr	r3, [r3, #0]
    1400:	2227      	movs	r2, #39	; 0x27
    1402:	18bc      	adds	r4, r7, r2
    1404:	0018      	movs	r0, r3
    1406:	4b0d      	ldr	r3, [pc, #52]	; (143c <usart_init+0x240>)
    1408:	4798      	blx	r3
    140a:	0003      	movs	r3, r0
    140c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    140e:	4a15      	ldr	r2, [pc, #84]	; (1464 <usart_init+0x268>)
    1410:	2327      	movs	r3, #39	; 0x27
    1412:	18fb      	adds	r3, r7, r3
    1414:	781b      	ldrb	r3, [r3, #0]
    1416:	0011      	movs	r1, r2
    1418:	0018      	movs	r0, r3
    141a:	4b13      	ldr	r3, [pc, #76]	; (1468 <usart_init+0x26c>)
    141c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    141e:	2327      	movs	r3, #39	; 0x27
    1420:	18fb      	adds	r3, r7, r3
    1422:	781a      	ldrb	r2, [r3, #0]
    1424:	4b11      	ldr	r3, [pc, #68]	; (146c <usart_init+0x270>)
    1426:	0092      	lsls	r2, r2, #2
    1428:	68f9      	ldr	r1, [r7, #12]
    142a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    142c:	233b      	movs	r3, #59	; 0x3b
    142e:	18fb      	adds	r3, r7, r3
    1430:	781b      	ldrb	r3, [r3, #0]
}
    1432:	0018      	movs	r0, r3
    1434:	46bd      	mov	sp, r7
    1436:	b013      	add	sp, #76	; 0x4c
    1438:	bd90      	pop	{r4, r7, pc}
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	00000c75 	.word	0x00000c75
    1440:	00000e39 	.word	0x00000e39
    1444:	00000e21 	.word	0x00000e21
    1448:	000023d1 	.word	0x000023d1
    144c:	00002415 	.word	0x00002415
    1450:	00000a2d 	.word	0x00000a2d
    1454:	00000f21 	.word	0x00000f21
    1458:	00000e95 	.word	0x00000e95
    145c:	00000ab9 	.word	0x00000ab9
    1460:	000026bd 	.word	0x000026bd
    1464:	00001605 	.word	0x00001605
    1468:	00000cd9 	.word	0x00000cd9
    146c:	200000dc 	.word	0x200000dc

00001470 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    1470:	b580      	push	{r7, lr}
    1472:	b084      	sub	sp, #16
    1474:	af00      	add	r7, sp, #0
    1476:	6078      	str	r0, [r7, #4]
    1478:	000a      	movs	r2, r1
    147a:	1cbb      	adds	r3, r7, #2
    147c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    147e:	687b      	ldr	r3, [r7, #4]
    1480:	681b      	ldr	r3, [r3, #0]
    1482:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1484:	687b      	ldr	r3, [r7, #4]
    1486:	79db      	ldrb	r3, [r3, #7]
    1488:	2201      	movs	r2, #1
    148a:	4053      	eors	r3, r2
    148c:	b2db      	uxtb	r3, r3
    148e:	2b00      	cmp	r3, #0
    1490:	d001      	beq.n	1496 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    1492:	231c      	movs	r3, #28
    1494:	e017      	b.n	14c6 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1496:	687b      	ldr	r3, [r7, #4]
    1498:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    149a:	b29b      	uxth	r3, r3
    149c:	2b00      	cmp	r3, #0
    149e:	d001      	beq.n	14a4 <usart_write_wait+0x34>
		return STATUS_BUSY;
    14a0:	2305      	movs	r3, #5
    14a2:	e010      	b.n	14c6 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    14a4:	687b      	ldr	r3, [r7, #4]
    14a6:	0018      	movs	r0, r3
    14a8:	4b09      	ldr	r3, [pc, #36]	; (14d0 <usart_write_wait+0x60>)
    14aa:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    14ac:	68fb      	ldr	r3, [r7, #12]
    14ae:	1cba      	adds	r2, r7, #2
    14b0:	8812      	ldrh	r2, [r2, #0]
    14b2:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    14b4:	46c0      	nop			; (mov r8, r8)
    14b6:	68fb      	ldr	r3, [r7, #12]
    14b8:	7e1b      	ldrb	r3, [r3, #24]
    14ba:	b2db      	uxtb	r3, r3
    14bc:	001a      	movs	r2, r3
    14be:	2302      	movs	r3, #2
    14c0:	4013      	ands	r3, r2
    14c2:	d0f8      	beq.n	14b6 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    14c4:	2300      	movs	r3, #0
}
    14c6:	0018      	movs	r0, r3
    14c8:	46bd      	mov	sp, r7
    14ca:	b004      	add	sp, #16
    14cc:	bd80      	pop	{r7, pc}
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	00000efd 	.word	0x00000efd

000014d4 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    14d4:	b580      	push	{r7, lr}
    14d6:	b084      	sub	sp, #16
    14d8:	af00      	add	r7, sp, #0
    14da:	6078      	str	r0, [r7, #4]
    14dc:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    14de:	687b      	ldr	r3, [r7, #4]
    14e0:	681b      	ldr	r3, [r3, #0]
    14e2:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    14e4:	687b      	ldr	r3, [r7, #4]
    14e6:	799b      	ldrb	r3, [r3, #6]
    14e8:	2201      	movs	r2, #1
    14ea:	4053      	eors	r3, r2
    14ec:	b2db      	uxtb	r3, r3
    14ee:	2b00      	cmp	r3, #0
    14f0:	d001      	beq.n	14f6 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    14f2:	231c      	movs	r3, #28
    14f4:	e05e      	b.n	15b4 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    14fa:	b29b      	uxth	r3, r3
    14fc:	2b00      	cmp	r3, #0
    14fe:	d001      	beq.n	1504 <usart_read_wait+0x30>
		return STATUS_BUSY;
    1500:	2305      	movs	r3, #5
    1502:	e057      	b.n	15b4 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1504:	68fb      	ldr	r3, [r7, #12]
    1506:	7e1b      	ldrb	r3, [r3, #24]
    1508:	b2db      	uxtb	r3, r3
    150a:	001a      	movs	r2, r3
    150c:	2304      	movs	r3, #4
    150e:	4013      	ands	r3, r2
    1510:	d101      	bne.n	1516 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    1512:	2305      	movs	r3, #5
    1514:	e04e      	b.n	15b4 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1516:	687b      	ldr	r3, [r7, #4]
    1518:	0018      	movs	r0, r3
    151a:	4b28      	ldr	r3, [pc, #160]	; (15bc <usart_read_wait+0xe8>)
    151c:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    151e:	68fb      	ldr	r3, [r7, #12]
    1520:	8b5b      	ldrh	r3, [r3, #26]
    1522:	b29b      	uxth	r3, r3
    1524:	b2da      	uxtb	r2, r3
    1526:	230b      	movs	r3, #11
    1528:	18fb      	adds	r3, r7, r3
    152a:	213f      	movs	r1, #63	; 0x3f
    152c:	400a      	ands	r2, r1
    152e:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1530:	230b      	movs	r3, #11
    1532:	18fb      	adds	r3, r7, r3
    1534:	781b      	ldrb	r3, [r3, #0]
    1536:	2b00      	cmp	r3, #0
    1538:	d036      	beq.n	15a8 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    153a:	230b      	movs	r3, #11
    153c:	18fb      	adds	r3, r7, r3
    153e:	781b      	ldrb	r3, [r3, #0]
    1540:	2202      	movs	r2, #2
    1542:	4013      	ands	r3, r2
    1544:	d004      	beq.n	1550 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1546:	68fb      	ldr	r3, [r7, #12]
    1548:	2202      	movs	r2, #2
    154a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    154c:	231a      	movs	r3, #26
    154e:	e031      	b.n	15b4 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1550:	230b      	movs	r3, #11
    1552:	18fb      	adds	r3, r7, r3
    1554:	781b      	ldrb	r3, [r3, #0]
    1556:	2204      	movs	r2, #4
    1558:	4013      	ands	r3, r2
    155a:	d004      	beq.n	1566 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    155c:	68fb      	ldr	r3, [r7, #12]
    155e:	2204      	movs	r2, #4
    1560:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    1562:	231e      	movs	r3, #30
    1564:	e026      	b.n	15b4 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1566:	230b      	movs	r3, #11
    1568:	18fb      	adds	r3, r7, r3
    156a:	781b      	ldrb	r3, [r3, #0]
    156c:	2201      	movs	r2, #1
    156e:	4013      	ands	r3, r2
    1570:	d004      	beq.n	157c <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1572:	68fb      	ldr	r3, [r7, #12]
    1574:	2201      	movs	r2, #1
    1576:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    1578:	2313      	movs	r3, #19
    157a:	e01b      	b.n	15b4 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    157c:	230b      	movs	r3, #11
    157e:	18fb      	adds	r3, r7, r3
    1580:	781b      	ldrb	r3, [r3, #0]
    1582:	2210      	movs	r2, #16
    1584:	4013      	ands	r3, r2
    1586:	d004      	beq.n	1592 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1588:	68fb      	ldr	r3, [r7, #12]
    158a:	2210      	movs	r2, #16
    158c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    158e:	2342      	movs	r3, #66	; 0x42
    1590:	e010      	b.n	15b4 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1592:	230b      	movs	r3, #11
    1594:	18fb      	adds	r3, r7, r3
    1596:	781b      	ldrb	r3, [r3, #0]
    1598:	2220      	movs	r2, #32
    159a:	4013      	ands	r3, r2
    159c:	d004      	beq.n	15a8 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    159e:	68fb      	ldr	r3, [r7, #12]
    15a0:	2220      	movs	r2, #32
    15a2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    15a4:	2341      	movs	r3, #65	; 0x41
    15a6:	e005      	b.n	15b4 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    15a8:	68fb      	ldr	r3, [r7, #12]
    15aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    15ac:	b29a      	uxth	r2, r3
    15ae:	683b      	ldr	r3, [r7, #0]
    15b0:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    15b2:	2300      	movs	r3, #0
}
    15b4:	0018      	movs	r0, r3
    15b6:	46bd      	mov	sp, r7
    15b8:	b004      	add	sp, #16
    15ba:	bd80      	pop	{r7, pc}
    15bc:	00000efd 	.word	0x00000efd

000015c0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    15c0:	b580      	push	{r7, lr}
    15c2:	b084      	sub	sp, #16
    15c4:	af00      	add	r7, sp, #0
    15c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    15c8:	687b      	ldr	r3, [r7, #4]
    15ca:	681b      	ldr	r3, [r3, #0]
    15cc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    15ce:	68fb      	ldr	r3, [r7, #12]
    15d0:	69db      	ldr	r3, [r3, #28]
    15d2:	1e5a      	subs	r2, r3, #1
    15d4:	4193      	sbcs	r3, r2
    15d6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    15d8:	0018      	movs	r0, r3
    15da:	46bd      	mov	sp, r7
    15dc:	b004      	add	sp, #16
    15de:	bd80      	pop	{r7, pc}

000015e0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    15e0:	b580      	push	{r7, lr}
    15e2:	b082      	sub	sp, #8
    15e4:	af00      	add	r7, sp, #0
    15e6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    15e8:	46c0      	nop			; (mov r8, r8)
    15ea:	687b      	ldr	r3, [r7, #4]
    15ec:	0018      	movs	r0, r3
    15ee:	4b04      	ldr	r3, [pc, #16]	; (1600 <_usart_wait_for_sync+0x20>)
    15f0:	4798      	blx	r3
    15f2:	1e03      	subs	r3, r0, #0
    15f4:	d1f9      	bne.n	15ea <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	46bd      	mov	sp, r7
    15fa:	b002      	add	sp, #8
    15fc:	bd80      	pop	{r7, pc}
    15fe:	46c0      	nop			; (mov r8, r8)
    1600:	000015c1 	.word	0x000015c1

00001604 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1604:	b580      	push	{r7, lr}
    1606:	b088      	sub	sp, #32
    1608:	af00      	add	r7, sp, #0
    160a:	0002      	movs	r2, r0
    160c:	1dfb      	adds	r3, r7, #7
    160e:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    1610:	1dfb      	adds	r3, r7, #7
    1612:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1614:	4ba3      	ldr	r3, [pc, #652]	; (18a4 <_usart_interrupt_handler+0x2a0>)
    1616:	0092      	lsls	r2, r2, #2
    1618:	58d3      	ldr	r3, [r2, r3]
    161a:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    161c:	69bb      	ldr	r3, [r7, #24]
    161e:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    1620:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    1622:	69bb      	ldr	r3, [r7, #24]
    1624:	0018      	movs	r0, r3
    1626:	4ba0      	ldr	r3, [pc, #640]	; (18a8 <_usart_interrupt_handler+0x2a4>)
    1628:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    162a:	697b      	ldr	r3, [r7, #20]
    162c:	7e1b      	ldrb	r3, [r3, #24]
    162e:	b2da      	uxtb	r2, r3
    1630:	2312      	movs	r3, #18
    1632:	18fb      	adds	r3, r7, r3
    1634:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    1636:	697b      	ldr	r3, [r7, #20]
    1638:	7d9b      	ldrb	r3, [r3, #22]
    163a:	b2db      	uxtb	r3, r3
    163c:	b29a      	uxth	r2, r3
    163e:	2312      	movs	r3, #18
    1640:	18fb      	adds	r3, r7, r3
    1642:	2112      	movs	r1, #18
    1644:	1879      	adds	r1, r7, r1
    1646:	8809      	ldrh	r1, [r1, #0]
    1648:	400a      	ands	r2, r1
    164a:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    164c:	69bb      	ldr	r3, [r7, #24]
    164e:	2230      	movs	r2, #48	; 0x30
    1650:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    1652:	69ba      	ldr	r2, [r7, #24]
    1654:	2131      	movs	r1, #49	; 0x31
    1656:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1658:	4013      	ands	r3, r2
    165a:	b2da      	uxtb	r2, r3
    165c:	2310      	movs	r3, #16
    165e:	18fb      	adds	r3, r7, r3
    1660:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1662:	2312      	movs	r3, #18
    1664:	18fb      	adds	r3, r7, r3
    1666:	881b      	ldrh	r3, [r3, #0]
    1668:	2201      	movs	r2, #1
    166a:	4013      	ands	r3, r2
    166c:	d044      	beq.n	16f8 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    166e:	69bb      	ldr	r3, [r7, #24]
    1670:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1672:	b29b      	uxth	r3, r3
    1674:	2b00      	cmp	r3, #0
    1676:	d03c      	beq.n	16f2 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1678:	69bb      	ldr	r3, [r7, #24]
    167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    167c:	781b      	ldrb	r3, [r3, #0]
    167e:	b2da      	uxtb	r2, r3
    1680:	231c      	movs	r3, #28
    1682:	18fb      	adds	r3, r7, r3
    1684:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1686:	69bb      	ldr	r3, [r7, #24]
    1688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    168a:	1c5a      	adds	r2, r3, #1
    168c:	69bb      	ldr	r3, [r7, #24]
    168e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1690:	69bb      	ldr	r3, [r7, #24]
    1692:	795b      	ldrb	r3, [r3, #5]
    1694:	2b01      	cmp	r3, #1
    1696:	d113      	bne.n	16c0 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1698:	69bb      	ldr	r3, [r7, #24]
    169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    169c:	781b      	ldrb	r3, [r3, #0]
    169e:	b2db      	uxtb	r3, r3
    16a0:	021b      	lsls	r3, r3, #8
    16a2:	b21a      	sxth	r2, r3
    16a4:	231c      	movs	r3, #28
    16a6:	18fb      	adds	r3, r7, r3
    16a8:	2100      	movs	r1, #0
    16aa:	5e5b      	ldrsh	r3, [r3, r1]
    16ac:	4313      	orrs	r3, r2
    16ae:	b21a      	sxth	r2, r3
    16b0:	231c      	movs	r3, #28
    16b2:	18fb      	adds	r3, r7, r3
    16b4:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    16b6:	69bb      	ldr	r3, [r7, #24]
    16b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16ba:	1c5a      	adds	r2, r3, #1
    16bc:	69bb      	ldr	r3, [r7, #24]
    16be:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    16c0:	231c      	movs	r3, #28
    16c2:	18fb      	adds	r3, r7, r3
    16c4:	881b      	ldrh	r3, [r3, #0]
    16c6:	05db      	lsls	r3, r3, #23
    16c8:	0ddb      	lsrs	r3, r3, #23
    16ca:	b29a      	uxth	r2, r3
    16cc:	697b      	ldr	r3, [r7, #20]
    16ce:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    16d0:	69bb      	ldr	r3, [r7, #24]
    16d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    16d4:	b29b      	uxth	r3, r3
    16d6:	3b01      	subs	r3, #1
    16d8:	b29b      	uxth	r3, r3
    16da:	69ba      	ldr	r2, [r7, #24]
    16dc:	1c19      	adds	r1, r3, #0
    16de:	85d1      	strh	r1, [r2, #46]	; 0x2e
    16e0:	2b00      	cmp	r3, #0
    16e2:	d109      	bne.n	16f8 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    16e4:	697b      	ldr	r3, [r7, #20]
    16e6:	2201      	movs	r2, #1
    16e8:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    16ea:	697b      	ldr	r3, [r7, #20]
    16ec:	2202      	movs	r2, #2
    16ee:	759a      	strb	r2, [r3, #22]
    16f0:	e002      	b.n	16f8 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    16f2:	697b      	ldr	r3, [r7, #20]
    16f4:	2201      	movs	r2, #1
    16f6:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    16f8:	2312      	movs	r3, #18
    16fa:	18fb      	adds	r3, r7, r3
    16fc:	881b      	ldrh	r3, [r3, #0]
    16fe:	2202      	movs	r2, #2
    1700:	4013      	ands	r3, r2
    1702:	d011      	beq.n	1728 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1704:	697b      	ldr	r3, [r7, #20]
    1706:	2202      	movs	r2, #2
    1708:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    170a:	69bb      	ldr	r3, [r7, #24]
    170c:	2233      	movs	r2, #51	; 0x33
    170e:	2100      	movs	r1, #0
    1710:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1712:	2310      	movs	r3, #16
    1714:	18fb      	adds	r3, r7, r3
    1716:	881b      	ldrh	r3, [r3, #0]
    1718:	2201      	movs	r2, #1
    171a:	4013      	ands	r3, r2
    171c:	d004      	beq.n	1728 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    171e:	69bb      	ldr	r3, [r7, #24]
    1720:	68db      	ldr	r3, [r3, #12]
    1722:	69ba      	ldr	r2, [r7, #24]
    1724:	0010      	movs	r0, r2
    1726:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1728:	2312      	movs	r3, #18
    172a:	18fb      	adds	r3, r7, r3
    172c:	881b      	ldrh	r3, [r3, #0]
    172e:	2204      	movs	r2, #4
    1730:	4013      	ands	r3, r2
    1732:	d100      	bne.n	1736 <_usart_interrupt_handler+0x132>
    1734:	e0bd      	b.n	18b2 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    1736:	69bb      	ldr	r3, [r7, #24]
    1738:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    173a:	b29b      	uxth	r3, r3
    173c:	2b00      	cmp	r3, #0
    173e:	d100      	bne.n	1742 <_usart_interrupt_handler+0x13e>
    1740:	e0b4      	b.n	18ac <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1742:	697b      	ldr	r3, [r7, #20]
    1744:	8b5b      	ldrh	r3, [r3, #26]
    1746:	b29b      	uxth	r3, r3
    1748:	b2da      	uxtb	r2, r3
    174a:	231f      	movs	r3, #31
    174c:	18fb      	adds	r3, r7, r3
    174e:	213f      	movs	r1, #63	; 0x3f
    1750:	400a      	ands	r2, r1
    1752:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1754:	231f      	movs	r3, #31
    1756:	18fb      	adds	r3, r7, r3
    1758:	781b      	ldrb	r3, [r3, #0]
    175a:	2208      	movs	r2, #8
    175c:	4013      	ands	r3, r2
    175e:	d007      	beq.n	1770 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1760:	231f      	movs	r3, #31
    1762:	18fb      	adds	r3, r7, r3
    1764:	221f      	movs	r2, #31
    1766:	18ba      	adds	r2, r7, r2
    1768:	7812      	ldrb	r2, [r2, #0]
    176a:	2108      	movs	r1, #8
    176c:	438a      	bics	r2, r1
    176e:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1770:	231f      	movs	r3, #31
    1772:	18fb      	adds	r3, r7, r3
    1774:	781b      	ldrb	r3, [r3, #0]
    1776:	2b00      	cmp	r3, #0
    1778:	d050      	beq.n	181c <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    177a:	231f      	movs	r3, #31
    177c:	18fb      	adds	r3, r7, r3
    177e:	781b      	ldrb	r3, [r3, #0]
    1780:	2202      	movs	r2, #2
    1782:	4013      	ands	r3, r2
    1784:	d007      	beq.n	1796 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1786:	69bb      	ldr	r3, [r7, #24]
    1788:	2232      	movs	r2, #50	; 0x32
    178a:	211a      	movs	r1, #26
    178c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    178e:	697b      	ldr	r3, [r7, #20]
    1790:	2202      	movs	r2, #2
    1792:	835a      	strh	r2, [r3, #26]
    1794:	e036      	b.n	1804 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1796:	231f      	movs	r3, #31
    1798:	18fb      	adds	r3, r7, r3
    179a:	781b      	ldrb	r3, [r3, #0]
    179c:	2204      	movs	r2, #4
    179e:	4013      	ands	r3, r2
    17a0:	d007      	beq.n	17b2 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    17a2:	69bb      	ldr	r3, [r7, #24]
    17a4:	2232      	movs	r2, #50	; 0x32
    17a6:	211e      	movs	r1, #30
    17a8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    17aa:	697b      	ldr	r3, [r7, #20]
    17ac:	2204      	movs	r2, #4
    17ae:	835a      	strh	r2, [r3, #26]
    17b0:	e028      	b.n	1804 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    17b2:	231f      	movs	r3, #31
    17b4:	18fb      	adds	r3, r7, r3
    17b6:	781b      	ldrb	r3, [r3, #0]
    17b8:	2201      	movs	r2, #1
    17ba:	4013      	ands	r3, r2
    17bc:	d007      	beq.n	17ce <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    17be:	69bb      	ldr	r3, [r7, #24]
    17c0:	2232      	movs	r2, #50	; 0x32
    17c2:	2113      	movs	r1, #19
    17c4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    17c6:	697b      	ldr	r3, [r7, #20]
    17c8:	2201      	movs	r2, #1
    17ca:	835a      	strh	r2, [r3, #26]
    17cc:	e01a      	b.n	1804 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    17ce:	231f      	movs	r3, #31
    17d0:	18fb      	adds	r3, r7, r3
    17d2:	781b      	ldrb	r3, [r3, #0]
    17d4:	2210      	movs	r2, #16
    17d6:	4013      	ands	r3, r2
    17d8:	d007      	beq.n	17ea <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    17da:	69bb      	ldr	r3, [r7, #24]
    17dc:	2232      	movs	r2, #50	; 0x32
    17de:	2142      	movs	r1, #66	; 0x42
    17e0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    17e2:	697b      	ldr	r3, [r7, #20]
    17e4:	2210      	movs	r2, #16
    17e6:	835a      	strh	r2, [r3, #26]
    17e8:	e00c      	b.n	1804 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    17ea:	231f      	movs	r3, #31
    17ec:	18fb      	adds	r3, r7, r3
    17ee:	781b      	ldrb	r3, [r3, #0]
    17f0:	2220      	movs	r2, #32
    17f2:	4013      	ands	r3, r2
    17f4:	d006      	beq.n	1804 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    17f6:	69bb      	ldr	r3, [r7, #24]
    17f8:	2232      	movs	r2, #50	; 0x32
    17fa:	2141      	movs	r1, #65	; 0x41
    17fc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    17fe:	697b      	ldr	r3, [r7, #20]
    1800:	2220      	movs	r2, #32
    1802:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    1804:	2310      	movs	r3, #16
    1806:	18fb      	adds	r3, r7, r3
    1808:	881b      	ldrh	r3, [r3, #0]
    180a:	2204      	movs	r2, #4
    180c:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    180e:	d050      	beq.n	18b2 <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1810:	69bb      	ldr	r3, [r7, #24]
    1812:	695b      	ldr	r3, [r3, #20]
    1814:	69ba      	ldr	r2, [r7, #24]
    1816:	0010      	movs	r0, r2
    1818:	4798      	blx	r3
    181a:	e04a      	b.n	18b2 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    181c:	697b      	ldr	r3, [r7, #20]
    181e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1820:	b29a      	uxth	r2, r3
    1822:	230e      	movs	r3, #14
    1824:	18fb      	adds	r3, r7, r3
    1826:	05d2      	lsls	r2, r2, #23
    1828:	0dd2      	lsrs	r2, r2, #23
    182a:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    182c:	69bb      	ldr	r3, [r7, #24]
    182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1830:	220e      	movs	r2, #14
    1832:	18ba      	adds	r2, r7, r2
    1834:	8812      	ldrh	r2, [r2, #0]
    1836:	b2d2      	uxtb	r2, r2
    1838:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    183a:	69bb      	ldr	r3, [r7, #24]
    183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    183e:	1c5a      	adds	r2, r3, #1
    1840:	69bb      	ldr	r3, [r7, #24]
    1842:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1844:	69bb      	ldr	r3, [r7, #24]
    1846:	795b      	ldrb	r3, [r3, #5]
    1848:	2b01      	cmp	r3, #1
    184a:	d10d      	bne.n	1868 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    184c:	69bb      	ldr	r3, [r7, #24]
    184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1850:	220e      	movs	r2, #14
    1852:	18ba      	adds	r2, r7, r2
    1854:	8812      	ldrh	r2, [r2, #0]
    1856:	0a12      	lsrs	r2, r2, #8
    1858:	b292      	uxth	r2, r2
    185a:	b2d2      	uxtb	r2, r2
    185c:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    185e:	69bb      	ldr	r3, [r7, #24]
    1860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1862:	1c5a      	adds	r2, r3, #1
    1864:	69bb      	ldr	r3, [r7, #24]
    1866:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1868:	69bb      	ldr	r3, [r7, #24]
    186a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    186c:	b29b      	uxth	r3, r3
    186e:	3b01      	subs	r3, #1
    1870:	b29b      	uxth	r3, r3
    1872:	69ba      	ldr	r2, [r7, #24]
    1874:	1c19      	adds	r1, r3, #0
    1876:	8591      	strh	r1, [r2, #44]	; 0x2c
    1878:	2b00      	cmp	r3, #0
    187a:	d11a      	bne.n	18b2 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    187c:	697b      	ldr	r3, [r7, #20]
    187e:	2204      	movs	r2, #4
    1880:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    1882:	69bb      	ldr	r3, [r7, #24]
    1884:	2232      	movs	r2, #50	; 0x32
    1886:	2100      	movs	r1, #0
    1888:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    188a:	2310      	movs	r3, #16
    188c:	18fb      	adds	r3, r7, r3
    188e:	881b      	ldrh	r3, [r3, #0]
    1890:	2202      	movs	r2, #2
    1892:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    1894:	d00d      	beq.n	18b2 <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1896:	69bb      	ldr	r3, [r7, #24]
    1898:	691b      	ldr	r3, [r3, #16]
    189a:	69ba      	ldr	r2, [r7, #24]
    189c:	0010      	movs	r0, r2
    189e:	4798      	blx	r3
    18a0:	e007      	b.n	18b2 <_usart_interrupt_handler+0x2ae>
    18a2:	46c0      	nop			; (mov r8, r8)
    18a4:	200000dc 	.word	0x200000dc
    18a8:	000015e1 	.word	0x000015e1
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    18ac:	697b      	ldr	r3, [r7, #20]
    18ae:	2204      	movs	r2, #4
    18b0:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    18b2:	2312      	movs	r3, #18
    18b4:	18fb      	adds	r3, r7, r3
    18b6:	881b      	ldrh	r3, [r3, #0]
    18b8:	2210      	movs	r2, #16
    18ba:	4013      	ands	r3, r2
    18bc:	d010      	beq.n	18e0 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    18be:	697b      	ldr	r3, [r7, #20]
    18c0:	2210      	movs	r2, #16
    18c2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    18c4:	697b      	ldr	r3, [r7, #20]
    18c6:	2210      	movs	r2, #16
    18c8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    18ca:	2310      	movs	r3, #16
    18cc:	18fb      	adds	r3, r7, r3
    18ce:	881b      	ldrh	r3, [r3, #0]
    18d0:	2210      	movs	r2, #16
    18d2:	4013      	ands	r3, r2
    18d4:	d004      	beq.n	18e0 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    18d6:	69bb      	ldr	r3, [r7, #24]
    18d8:	69db      	ldr	r3, [r3, #28]
    18da:	69ba      	ldr	r2, [r7, #24]
    18dc:	0010      	movs	r0, r2
    18de:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    18e0:	2312      	movs	r3, #18
    18e2:	18fb      	adds	r3, r7, r3
    18e4:	881b      	ldrh	r3, [r3, #0]
    18e6:	2220      	movs	r2, #32
    18e8:	4013      	ands	r3, r2
    18ea:	d010      	beq.n	190e <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    18ec:	697b      	ldr	r3, [r7, #20]
    18ee:	2220      	movs	r2, #32
    18f0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    18f2:	697b      	ldr	r3, [r7, #20]
    18f4:	2220      	movs	r2, #32
    18f6:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    18f8:	2310      	movs	r3, #16
    18fa:	18fb      	adds	r3, r7, r3
    18fc:	881b      	ldrh	r3, [r3, #0]
    18fe:	2208      	movs	r2, #8
    1900:	4013      	ands	r3, r2
    1902:	d004      	beq.n	190e <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1904:	69bb      	ldr	r3, [r7, #24]
    1906:	699b      	ldr	r3, [r3, #24]
    1908:	69ba      	ldr	r2, [r7, #24]
    190a:	0010      	movs	r0, r2
    190c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    190e:	2312      	movs	r3, #18
    1910:	18fb      	adds	r3, r7, r3
    1912:	881b      	ldrh	r3, [r3, #0]
    1914:	2208      	movs	r2, #8
    1916:	4013      	ands	r3, r2
    1918:	d010      	beq.n	193c <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    191a:	697b      	ldr	r3, [r7, #20]
    191c:	2208      	movs	r2, #8
    191e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1920:	697b      	ldr	r3, [r7, #20]
    1922:	2208      	movs	r2, #8
    1924:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1926:	2310      	movs	r3, #16
    1928:	18fb      	adds	r3, r7, r3
    192a:	881b      	ldrh	r3, [r3, #0]
    192c:	2220      	movs	r2, #32
    192e:	4013      	ands	r3, r2
    1930:	d004      	beq.n	193c <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1932:	69bb      	ldr	r3, [r7, #24]
    1934:	6a1b      	ldr	r3, [r3, #32]
    1936:	69ba      	ldr	r2, [r7, #24]
    1938:	0010      	movs	r0, r2
    193a:	4798      	blx	r3
		}
	}
#endif
}
    193c:	46c0      	nop			; (mov r8, r8)
    193e:	46bd      	mov	sp, r7
    1940:	b008      	add	sp, #32
    1942:	bd80      	pop	{r7, pc}

00001944 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    1944:	b580      	push	{r7, lr}
    1946:	b082      	sub	sp, #8
    1948:	af00      	add	r7, sp, #0
    194a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    194c:	687b      	ldr	r3, [r7, #4]
    194e:	2201      	movs	r2, #1
    1950:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    1952:	687b      	ldr	r3, [r7, #4]
    1954:	2200      	movs	r2, #0
    1956:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1958:	687b      	ldr	r3, [r7, #4]
    195a:	2206      	movs	r2, #6
    195c:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    195e:	687b      	ldr	r3, [r7, #4]
    1960:	2200      	movs	r2, #0
    1962:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    1964:	687b      	ldr	r3, [r7, #4]
    1966:	2200      	movs	r2, #0
    1968:	725a      	strb	r2, [r3, #9]
}
    196a:	46c0      	nop			; (mov r8, r8)
    196c:	46bd      	mov	sp, r7
    196e:	b002      	add	sp, #8
    1970:	bd80      	pop	{r7, pc}
    1972:	46c0      	nop			; (mov r8, r8)

00001974 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1974:	b580      	push	{r7, lr}
    1976:	b082      	sub	sp, #8
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    197c:	687b      	ldr	r3, [r7, #4]
    197e:	2200      	movs	r2, #0
    1980:	701a      	strb	r2, [r3, #0]
}
    1982:	46c0      	nop			; (mov r8, r8)
    1984:	46bd      	mov	sp, r7
    1986:	b002      	add	sp, #8
    1988:	bd80      	pop	{r7, pc}
    198a:	46c0      	nop			; (mov r8, r8)

0000198c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    198c:	b580      	push	{r7, lr}
    198e:	b082      	sub	sp, #8
    1990:	af00      	add	r7, sp, #0
    1992:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    1994:	687b      	ldr	r3, [r7, #4]
    1996:	2203      	movs	r2, #3
    1998:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    199a:	687b      	ldr	r3, [r7, #4]
    199c:	2200      	movs	r2, #0
    199e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	2201      	movs	r2, #1
    19a4:	709a      	strb	r2, [r3, #2]
}
    19a6:	46c0      	nop			; (mov r8, r8)
    19a8:	46bd      	mov	sp, r7
    19aa:	b002      	add	sp, #8
    19ac:	bd80      	pop	{r7, pc}
    19ae:	46c0      	nop			; (mov r8, r8)

000019b0 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    19b0:	b580      	push	{r7, lr}
    19b2:	b082      	sub	sp, #8
    19b4:	af00      	add	r7, sp, #0
    19b6:	0002      	movs	r2, r0
    19b8:	1dfb      	adds	r3, r7, #7
    19ba:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    19bc:	4a03      	ldr	r2, [pc, #12]	; (19cc <system_cpu_clock_set_divider+0x1c>)
    19be:	1dfb      	adds	r3, r7, #7
    19c0:	781b      	ldrb	r3, [r3, #0]
    19c2:	7213      	strb	r3, [r2, #8]
}
    19c4:	46c0      	nop			; (mov r8, r8)
    19c6:	46bd      	mov	sp, r7
    19c8:	b002      	add	sp, #8
    19ca:	bd80      	pop	{r7, pc}
    19cc:	40000400 	.word	0x40000400

000019d0 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    19d0:	b580      	push	{r7, lr}
    19d2:	b082      	sub	sp, #8
    19d4:	af00      	add	r7, sp, #0
    19d6:	0002      	movs	r2, r0
    19d8:	1dfb      	adds	r3, r7, #7
    19da:	701a      	strb	r2, [r3, #0]
    19dc:	1dbb      	adds	r3, r7, #6
    19de:	1c0a      	adds	r2, r1, #0
    19e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    19e2:	1dfb      	adds	r3, r7, #7
    19e4:	781b      	ldrb	r3, [r3, #0]
    19e6:	2b01      	cmp	r3, #1
    19e8:	d008      	beq.n	19fc <system_apb_clock_set_divider+0x2c>
    19ea:	2b02      	cmp	r3, #2
    19ec:	d00b      	beq.n	1a06 <system_apb_clock_set_divider+0x36>
    19ee:	2b00      	cmp	r3, #0
    19f0:	d10e      	bne.n	1a10 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    19f2:	4a0b      	ldr	r2, [pc, #44]	; (1a20 <system_apb_clock_set_divider+0x50>)
    19f4:	1dbb      	adds	r3, r7, #6
    19f6:	781b      	ldrb	r3, [r3, #0]
    19f8:	7253      	strb	r3, [r2, #9]
			break;
    19fa:	e00b      	b.n	1a14 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    19fc:	4a08      	ldr	r2, [pc, #32]	; (1a20 <system_apb_clock_set_divider+0x50>)
    19fe:	1dbb      	adds	r3, r7, #6
    1a00:	781b      	ldrb	r3, [r3, #0]
    1a02:	7293      	strb	r3, [r2, #10]
			break;
    1a04:	e006      	b.n	1a14 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1a06:	4a06      	ldr	r2, [pc, #24]	; (1a20 <system_apb_clock_set_divider+0x50>)
    1a08:	1dbb      	adds	r3, r7, #6
    1a0a:	781b      	ldrb	r3, [r3, #0]
    1a0c:	72d3      	strb	r3, [r2, #11]
			break;
    1a0e:	e001      	b.n	1a14 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1a10:	2317      	movs	r3, #23
    1a12:	e000      	b.n	1a16 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    1a14:	2300      	movs	r3, #0
}
    1a16:	0018      	movs	r0, r3
    1a18:	46bd      	mov	sp, r7
    1a1a:	b002      	add	sp, #8
    1a1c:	bd80      	pop	{r7, pc}
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	40000400 	.word	0x40000400

00001a24 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
    1a24:	b580      	push	{r7, lr}
    1a26:	b082      	sub	sp, #8
    1a28:	af00      	add	r7, sp, #0
    1a2a:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	2201      	movs	r2, #1
    1a30:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
    1a32:	687b      	ldr	r3, [r7, #4]
    1a34:	2200      	movs	r2, #0
    1a36:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
    1a38:	687b      	ldr	r3, [r7, #4]
    1a3a:	2200      	movs	r2, #0
    1a3c:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
    1a3e:	687b      	ldr	r3, [r7, #4]
    1a40:	2200      	movs	r2, #0
    1a42:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
    1a44:	687b      	ldr	r3, [r7, #4]
    1a46:	2200      	movs	r2, #0
    1a48:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
    1a4a:	687b      	ldr	r3, [r7, #4]
    1a4c:	4a0a      	ldr	r2, [pc, #40]	; (1a78 <system_clock_source_dpll_get_config_defaults+0x54>)
    1a4e:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
    1a50:	687b      	ldr	r3, [r7, #4]
    1a52:	2280      	movs	r2, #128	; 0x80
    1a54:	0212      	lsls	r2, r2, #8
    1a56:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
    1a58:	687b      	ldr	r3, [r7, #4]
    1a5a:	2201      	movs	r2, #1
    1a5c:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
    1a5e:	687b      	ldr	r3, [r7, #4]
    1a60:	2200      	movs	r2, #0
    1a62:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    1a64:	687b      	ldr	r3, [r7, #4]
    1a66:	2200      	movs	r2, #0
    1a68:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    1a6a:	687b      	ldr	r3, [r7, #4]
    1a6c:	2200      	movs	r2, #0
    1a6e:	749a      	strb	r2, [r3, #18]
};
    1a70:	46c0      	nop			; (mov r8, r8)
    1a72:	46bd      	mov	sp, r7
    1a74:	b002      	add	sp, #8
    1a76:	bd80      	pop	{r7, pc}
    1a78:	02dc6c00 	.word	0x02dc6c00

00001a7c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1a7c:	b580      	push	{r7, lr}
    1a7e:	b082      	sub	sp, #8
    1a80:	af00      	add	r7, sp, #0
    1a82:	0002      	movs	r2, r0
    1a84:	1dfb      	adds	r3, r7, #7
    1a86:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1a88:	4a08      	ldr	r2, [pc, #32]	; (1aac <system_flash_set_waitstates+0x30>)
    1a8a:	1dfb      	adds	r3, r7, #7
    1a8c:	781b      	ldrb	r3, [r3, #0]
    1a8e:	210f      	movs	r1, #15
    1a90:	400b      	ands	r3, r1
    1a92:	b2d9      	uxtb	r1, r3
    1a94:	6853      	ldr	r3, [r2, #4]
    1a96:	200f      	movs	r0, #15
    1a98:	4001      	ands	r1, r0
    1a9a:	0049      	lsls	r1, r1, #1
    1a9c:	201e      	movs	r0, #30
    1a9e:	4383      	bics	r3, r0
    1aa0:	430b      	orrs	r3, r1
    1aa2:	6053      	str	r3, [r2, #4]
}
    1aa4:	46c0      	nop			; (mov r8, r8)
    1aa6:	46bd      	mov	sp, r7
    1aa8:	b002      	add	sp, #8
    1aaa:	bd80      	pop	{r7, pc}
    1aac:	41004000 	.word	0x41004000

00001ab0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    1ab0:	b580      	push	{r7, lr}
    1ab2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ab4:	46c0      	nop			; (mov r8, r8)
    1ab6:	4b04      	ldr	r3, [pc, #16]	; (1ac8 <_system_dfll_wait_for_sync+0x18>)
    1ab8:	68db      	ldr	r3, [r3, #12]
    1aba:	2210      	movs	r2, #16
    1abc:	4013      	ands	r3, r2
    1abe:	d0fa      	beq.n	1ab6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    1ac0:	46c0      	nop			; (mov r8, r8)
    1ac2:	46bd      	mov	sp, r7
    1ac4:	bd80      	pop	{r7, pc}
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	40000800 	.word	0x40000800

00001acc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    1acc:	b580      	push	{r7, lr}
    1ace:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1ad0:	4b0c      	ldr	r3, [pc, #48]	; (1b04 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1ad2:	2202      	movs	r2, #2
    1ad4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1ad6:	4b0c      	ldr	r3, [pc, #48]	; (1b08 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1ad8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1ada:	4a0a      	ldr	r2, [pc, #40]	; (1b04 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1adc:	4b0b      	ldr	r3, [pc, #44]	; (1b0c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1ade:	689b      	ldr	r3, [r3, #8]
    1ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1ae2:	4a08      	ldr	r2, [pc, #32]	; (1b04 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1ae4:	4b09      	ldr	r3, [pc, #36]	; (1b0c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1ae6:	685b      	ldr	r3, [r3, #4]
    1ae8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1aea:	4b06      	ldr	r3, [pc, #24]	; (1b04 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1aec:	2200      	movs	r2, #0
    1aee:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1af0:	4b05      	ldr	r3, [pc, #20]	; (1b08 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1af2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1af4:	4a03      	ldr	r2, [pc, #12]	; (1b04 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1af6:	4b05      	ldr	r3, [pc, #20]	; (1b0c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1af8:	681b      	ldr	r3, [r3, #0]
    1afa:	b29b      	uxth	r3, r3
    1afc:	8493      	strh	r3, [r2, #36]	; 0x24
}
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	46bd      	mov	sp, r7
    1b02:	bd80      	pop	{r7, pc}
    1b04:	40000800 	.word	0x40000800
    1b08:	00001ab1 	.word	0x00001ab1
    1b0c:	200000b8 	.word	0x200000b8

00001b10 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1b10:	b580      	push	{r7, lr}
    1b12:	b082      	sub	sp, #8
    1b14:	af00      	add	r7, sp, #0
    1b16:	0002      	movs	r2, r0
    1b18:	1dfb      	adds	r3, r7, #7
    1b1a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1b1c:	1dfb      	adds	r3, r7, #7
    1b1e:	781b      	ldrb	r3, [r3, #0]
    1b20:	2b08      	cmp	r3, #8
    1b22:	d840      	bhi.n	1ba6 <system_clock_source_get_hz+0x96>
    1b24:	009a      	lsls	r2, r3, #2
    1b26:	4b22      	ldr	r3, [pc, #136]	; (1bb0 <system_clock_source_get_hz+0xa0>)
    1b28:	18d3      	adds	r3, r2, r3
    1b2a:	681b      	ldr	r3, [r3, #0]
    1b2c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1b2e:	4b21      	ldr	r3, [pc, #132]	; (1bb4 <system_clock_source_get_hz+0xa4>)
    1b30:	691b      	ldr	r3, [r3, #16]
    1b32:	e039      	b.n	1ba8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1b34:	4b20      	ldr	r3, [pc, #128]	; (1bb8 <system_clock_source_get_hz+0xa8>)
    1b36:	6a1b      	ldr	r3, [r3, #32]
    1b38:	059b      	lsls	r3, r3, #22
    1b3a:	0f9b      	lsrs	r3, r3, #30
    1b3c:	b2db      	uxtb	r3, r3
    1b3e:	001a      	movs	r2, r3
    1b40:	4b1e      	ldr	r3, [pc, #120]	; (1bbc <system_clock_source_get_hz+0xac>)
    1b42:	40d3      	lsrs	r3, r2
    1b44:	e030      	b.n	1ba8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1b46:	2380      	movs	r3, #128	; 0x80
    1b48:	021b      	lsls	r3, r3, #8
    1b4a:	e02d      	b.n	1ba8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    1b4c:	2380      	movs	r3, #128	; 0x80
    1b4e:	021b      	lsls	r3, r3, #8
    1b50:	e02a      	b.n	1ba8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1b52:	4b18      	ldr	r3, [pc, #96]	; (1bb4 <system_clock_source_get_hz+0xa4>)
    1b54:	695b      	ldr	r3, [r3, #20]
    1b56:	e027      	b.n	1ba8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1b58:	4b16      	ldr	r3, [pc, #88]	; (1bb4 <system_clock_source_get_hz+0xa4>)
    1b5a:	681b      	ldr	r3, [r3, #0]
    1b5c:	2202      	movs	r2, #2
    1b5e:	4013      	ands	r3, r2
    1b60:	d101      	bne.n	1b66 <system_clock_source_get_hz+0x56>
			return 0;
    1b62:	2300      	movs	r3, #0
    1b64:	e020      	b.n	1ba8 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    1b66:	4b16      	ldr	r3, [pc, #88]	; (1bc0 <system_clock_source_get_hz+0xb0>)
    1b68:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1b6a:	4b12      	ldr	r3, [pc, #72]	; (1bb4 <system_clock_source_get_hz+0xa4>)
    1b6c:	681b      	ldr	r3, [r3, #0]
    1b6e:	2204      	movs	r2, #4
    1b70:	4013      	ands	r3, r2
    1b72:	d009      	beq.n	1b88 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1b74:	2000      	movs	r0, #0
    1b76:	4b13      	ldr	r3, [pc, #76]	; (1bc4 <system_clock_source_get_hz+0xb4>)
    1b78:	4798      	blx	r3
    1b7a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    1b7c:	4b0d      	ldr	r3, [pc, #52]	; (1bb4 <system_clock_source_get_hz+0xa4>)
    1b7e:	689b      	ldr	r3, [r3, #8]
    1b80:	041b      	lsls	r3, r3, #16
    1b82:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1b84:	4353      	muls	r3, r2
    1b86:	e00f      	b.n	1ba8 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1b88:	4b0f      	ldr	r3, [pc, #60]	; (1bc8 <system_clock_source_get_hz+0xb8>)
    1b8a:	e00d      	b.n	1ba8 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1b8c:	4a0a      	ldr	r2, [pc, #40]	; (1bb8 <system_clock_source_get_hz+0xa8>)
    1b8e:	2350      	movs	r3, #80	; 0x50
    1b90:	5cd3      	ldrb	r3, [r2, r3]
    1b92:	b2db      	uxtb	r3, r3
    1b94:	001a      	movs	r2, r3
    1b96:	2304      	movs	r3, #4
    1b98:	4013      	ands	r3, r2
    1b9a:	d101      	bne.n	1ba0 <system_clock_source_get_hz+0x90>
			return 0;
    1b9c:	2300      	movs	r3, #0
    1b9e:	e003      	b.n	1ba8 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    1ba0:	4b04      	ldr	r3, [pc, #16]	; (1bb4 <system_clock_source_get_hz+0xa4>)
    1ba2:	68db      	ldr	r3, [r3, #12]
    1ba4:	e000      	b.n	1ba8 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    1ba6:	2300      	movs	r3, #0
	}
}
    1ba8:	0018      	movs	r0, r3
    1baa:	46bd      	mov	sp, r7
    1bac:	b002      	add	sp, #8
    1bae:	bd80      	pop	{r7, pc}
    1bb0:	0000444c 	.word	0x0000444c
    1bb4:	200000b8 	.word	0x200000b8
    1bb8:	40000800 	.word	0x40000800
    1bbc:	007a1200 	.word	0x007a1200
    1bc0:	00001ab1 	.word	0x00001ab1
    1bc4:	000024f5 	.word	0x000024f5
    1bc8:	02dc6c00 	.word	0x02dc6c00

00001bcc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1bcc:	b580      	push	{r7, lr}
    1bce:	b084      	sub	sp, #16
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1bd4:	4b1a      	ldr	r3, [pc, #104]	; (1c40 <system_clock_source_osc8m_set_config+0x74>)
    1bd6:	6a1b      	ldr	r3, [r3, #32]
    1bd8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1bda:	687b      	ldr	r3, [r7, #4]
    1bdc:	781b      	ldrb	r3, [r3, #0]
    1bde:	1c1a      	adds	r2, r3, #0
    1be0:	2303      	movs	r3, #3
    1be2:	4013      	ands	r3, r2
    1be4:	b2da      	uxtb	r2, r3
    1be6:	230d      	movs	r3, #13
    1be8:	18fb      	adds	r3, r7, r3
    1bea:	2103      	movs	r1, #3
    1bec:	400a      	ands	r2, r1
    1bee:	0010      	movs	r0, r2
    1bf0:	781a      	ldrb	r2, [r3, #0]
    1bf2:	2103      	movs	r1, #3
    1bf4:	438a      	bics	r2, r1
    1bf6:	1c11      	adds	r1, r2, #0
    1bf8:	1c02      	adds	r2, r0, #0
    1bfa:	430a      	orrs	r2, r1
    1bfc:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1bfe:	687b      	ldr	r3, [r7, #4]
    1c00:	789a      	ldrb	r2, [r3, #2]
    1c02:	230c      	movs	r3, #12
    1c04:	18fb      	adds	r3, r7, r3
    1c06:	01d0      	lsls	r0, r2, #7
    1c08:	781a      	ldrb	r2, [r3, #0]
    1c0a:	217f      	movs	r1, #127	; 0x7f
    1c0c:	400a      	ands	r2, r1
    1c0e:	1c11      	adds	r1, r2, #0
    1c10:	1c02      	adds	r2, r0, #0
    1c12:	430a      	orrs	r2, r1
    1c14:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1c16:	687b      	ldr	r3, [r7, #4]
    1c18:	785a      	ldrb	r2, [r3, #1]
    1c1a:	230c      	movs	r3, #12
    1c1c:	18fb      	adds	r3, r7, r3
    1c1e:	2101      	movs	r1, #1
    1c20:	400a      	ands	r2, r1
    1c22:	0190      	lsls	r0, r2, #6
    1c24:	781a      	ldrb	r2, [r3, #0]
    1c26:	2140      	movs	r1, #64	; 0x40
    1c28:	438a      	bics	r2, r1
    1c2a:	1c11      	adds	r1, r2, #0
    1c2c:	1c02      	adds	r2, r0, #0
    1c2e:	430a      	orrs	r2, r1
    1c30:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    1c32:	4b03      	ldr	r3, [pc, #12]	; (1c40 <system_clock_source_osc8m_set_config+0x74>)
    1c34:	68fa      	ldr	r2, [r7, #12]
    1c36:	621a      	str	r2, [r3, #32]
}
    1c38:	46c0      	nop			; (mov r8, r8)
    1c3a:	46bd      	mov	sp, r7
    1c3c:	b004      	add	sp, #16
    1c3e:	bd80      	pop	{r7, pc}
    1c40:	40000800 	.word	0x40000800

00001c44 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    1c44:	b580      	push	{r7, lr}
    1c46:	b086      	sub	sp, #24
    1c48:	af00      	add	r7, sp, #0
    1c4a:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	68db      	ldr	r3, [r3, #12]
    1c50:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    1c52:	687b      	ldr	r3, [r7, #4]
    1c54:	7d1b      	ldrb	r3, [r3, #20]
    1c56:	2b01      	cmp	r3, #1
    1c58:	d10a      	bne.n	1c70 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
    1c5a:	687b      	ldr	r3, [r7, #4]
    1c5c:	8a1b      	ldrh	r3, [r3, #16]
    1c5e:	3301      	adds	r3, #1
    1c60:	005b      	lsls	r3, r3, #1
    1c62:	001a      	movs	r2, r3
    1c64:	4b36      	ldr	r3, [pc, #216]	; (1d40 <system_clock_source_dpll_set_config+0xfc>)
    1c66:	0011      	movs	r1, r2
    1c68:	6978      	ldr	r0, [r7, #20]
    1c6a:	4798      	blx	r3
    1c6c:	0003      	movs	r3, r0
    1c6e:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	689b      	ldr	r3, [r3, #8]
    1c74:	011a      	lsls	r2, r3, #4
    1c76:	4b32      	ldr	r3, [pc, #200]	; (1d40 <system_clock_source_dpll_set_config+0xfc>)
    1c78:	6979      	ldr	r1, [r7, #20]
    1c7a:	0010      	movs	r0, r2
    1c7c:	4798      	blx	r3
    1c7e:	0003      	movs	r3, r0
    1c80:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
    1c82:	693b      	ldr	r3, [r7, #16]
    1c84:	b2da      	uxtb	r2, r3
    1c86:	230f      	movs	r3, #15
    1c88:	18fb      	adds	r3, r7, r3
    1c8a:	210f      	movs	r1, #15
    1c8c:	400a      	ands	r2, r1
    1c8e:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
    1c90:	693b      	ldr	r3, [r7, #16]
    1c92:	091b      	lsrs	r3, r3, #4
    1c94:	3b01      	subs	r3, #1
    1c96:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
    1c98:	492a      	ldr	r1, [pc, #168]	; (1d44 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    1c9a:	687b      	ldr	r3, [r7, #4]
    1c9c:	781b      	ldrb	r3, [r3, #0]
	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;

	SYSCTRL->DPLLCTRLA.reg =
    1c9e:	01db      	lsls	r3, r3, #7
    1ca0:	b2da      	uxtb	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	785b      	ldrb	r3, [r3, #1]
	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;

	SYSCTRL->DPLLCTRLA.reg =
    1ca6:	019b      	lsls	r3, r3, #6
    1ca8:	b2db      	uxtb	r3, r3
    1caa:	4313      	orrs	r3, r2
    1cac:	b2da      	uxtb	r2, r3
    1cae:	2344      	movs	r3, #68	; 0x44
    1cb0:	54ca      	strb	r2, [r1, r3]
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
    1cb2:	4b24      	ldr	r3, [pc, #144]	; (1d44 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1cb4:	220f      	movs	r2, #15
    1cb6:	18ba      	adds	r2, r7, r2
    1cb8:	7812      	ldrb	r2, [r2, #0]
    1cba:	0412      	lsls	r2, r2, #16
    1cbc:	0011      	movs	r1, r2
    1cbe:	22f0      	movs	r2, #240	; 0xf0
    1cc0:	0312      	lsls	r2, r2, #12
    1cc2:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    1cc4:	693a      	ldr	r2, [r7, #16]
    1cc6:	0512      	lsls	r2, r2, #20
    1cc8:	0d12      	lsrs	r2, r2, #20
	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1cca:	430a      	orrs	r2, r1

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
    1ccc:	649a      	str	r2, [r3, #72]	; 0x48
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
    1cce:	4b1d      	ldr	r3, [pc, #116]	; (1d44 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    1cd0:	687a      	ldr	r2, [r7, #4]
    1cd2:	8a12      	ldrh	r2, [r2, #16]
    1cd4:	0412      	lsls	r2, r2, #16
    1cd6:	0011      	movs	r1, r2
    1cd8:	4a1b      	ldr	r2, [pc, #108]	; (1d48 <system_clock_source_dpll_set_config+0x104>)
    1cda:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    1cdc:	687a      	ldr	r2, [r7, #4]
    1cde:	7892      	ldrb	r2, [r2, #2]
    1ce0:	0312      	lsls	r2, r2, #12
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    1ce2:	4311      	orrs	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    1ce4:	687a      	ldr	r2, [r7, #4]
    1ce6:	7cd2      	ldrb	r2, [r2, #19]
    1ce8:	0212      	lsls	r2, r2, #8
    1cea:	0010      	movs	r0, r2
    1cec:	22e0      	movs	r2, #224	; 0xe0
    1cee:	00d2      	lsls	r2, r2, #3
    1cf0:	4002      	ands	r2, r0
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    1cf2:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    1cf4:	687a      	ldr	r2, [r7, #4]
    1cf6:	7d12      	ldrb	r2, [r2, #20]
    1cf8:	0112      	lsls	r2, r2, #4
    1cfa:	0010      	movs	r0, r2
    1cfc:	2230      	movs	r2, #48	; 0x30
    1cfe:	4002      	ands	r2, r0
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    1d00:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    1d02:	687a      	ldr	r2, [r7, #4]
    1d04:	78d2      	ldrb	r2, [r2, #3]
    1d06:	00d2      	lsls	r2, r2, #3

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    1d08:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    1d0a:	687a      	ldr	r2, [r7, #4]
    1d0c:	7912      	ldrb	r2, [r2, #4]
    1d0e:	0092      	lsls	r2, r2, #2
	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    1d10:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    1d12:	687a      	ldr	r2, [r7, #4]
    1d14:	7c92      	ldrb	r2, [r2, #18]
    1d16:	0010      	movs	r0, r2
    1d18:	2203      	movs	r2, #3
    1d1a:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    1d1c:	430a      	orrs	r2, r1

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
    1d1e:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    1d20:	693b      	ldr	r3, [r7, #16]
    1d22:	3301      	adds	r3, #1
    1d24:	011a      	lsls	r2, r3, #4
    1d26:	230f      	movs	r3, #15
    1d28:	18fb      	adds	r3, r7, r3
    1d2a:	781b      	ldrb	r3, [r3, #0]
    1d2c:	18d3      	adds	r3, r2, r3
    1d2e:	697a      	ldr	r2, [r7, #20]
    1d30:	4353      	muls	r3, r2
    1d32:	091a      	lsrs	r2, r3, #4
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
    1d34:	4b05      	ldr	r3, [pc, #20]	; (1d4c <system_clock_source_dpll_set_config+0x108>)
    1d36:	60da      	str	r2, [r3, #12]
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
}
    1d38:	46c0      	nop			; (mov r8, r8)
    1d3a:	46bd      	mov	sp, r7
    1d3c:	b006      	add	sp, #24
    1d3e:	bd80      	pop	{r7, pc}
    1d40:	00003095 	.word	0x00003095
    1d44:	40000800 	.word	0x40000800
    1d48:	07ff0000 	.word	0x07ff0000
    1d4c:	200000b8 	.word	0x200000b8

00001d50 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1d50:	b580      	push	{r7, lr}
    1d52:	b082      	sub	sp, #8
    1d54:	af00      	add	r7, sp, #0
    1d56:	0002      	movs	r2, r0
    1d58:	1dfb      	adds	r3, r7, #7
    1d5a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    1d5c:	1dfb      	adds	r3, r7, #7
    1d5e:	781b      	ldrb	r3, [r3, #0]
    1d60:	2b08      	cmp	r3, #8
    1d62:	d83b      	bhi.n	1ddc <system_clock_source_enable+0x8c>
    1d64:	009a      	lsls	r2, r3, #2
    1d66:	4b21      	ldr	r3, [pc, #132]	; (1dec <system_clock_source_enable+0x9c>)
    1d68:	18d3      	adds	r3, r2, r3
    1d6a:	681b      	ldr	r3, [r3, #0]
    1d6c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1d6e:	4b20      	ldr	r3, [pc, #128]	; (1df0 <system_clock_source_enable+0xa0>)
    1d70:	4a1f      	ldr	r2, [pc, #124]	; (1df0 <system_clock_source_enable+0xa0>)
    1d72:	6a12      	ldr	r2, [r2, #32]
    1d74:	2102      	movs	r1, #2
    1d76:	430a      	orrs	r2, r1
    1d78:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1d7a:	2300      	movs	r3, #0
    1d7c:	e031      	b.n	1de2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1d7e:	4b1c      	ldr	r3, [pc, #112]	; (1df0 <system_clock_source_enable+0xa0>)
    1d80:	4a1b      	ldr	r2, [pc, #108]	; (1df0 <system_clock_source_enable+0xa0>)
    1d82:	6992      	ldr	r2, [r2, #24]
    1d84:	2102      	movs	r1, #2
    1d86:	430a      	orrs	r2, r1
    1d88:	619a      	str	r2, [r3, #24]
		break;
    1d8a:	e029      	b.n	1de0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1d8c:	4a18      	ldr	r2, [pc, #96]	; (1df0 <system_clock_source_enable+0xa0>)
    1d8e:	4b18      	ldr	r3, [pc, #96]	; (1df0 <system_clock_source_enable+0xa0>)
    1d90:	8a1b      	ldrh	r3, [r3, #16]
    1d92:	b29b      	uxth	r3, r3
    1d94:	2102      	movs	r1, #2
    1d96:	430b      	orrs	r3, r1
    1d98:	b29b      	uxth	r3, r3
    1d9a:	8213      	strh	r3, [r2, #16]
		break;
    1d9c:	e020      	b.n	1de0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1d9e:	4a14      	ldr	r2, [pc, #80]	; (1df0 <system_clock_source_enable+0xa0>)
    1da0:	4b13      	ldr	r3, [pc, #76]	; (1df0 <system_clock_source_enable+0xa0>)
    1da2:	8a9b      	ldrh	r3, [r3, #20]
    1da4:	b29b      	uxth	r3, r3
    1da6:	2102      	movs	r1, #2
    1da8:	430b      	orrs	r3, r1
    1daa:	b29b      	uxth	r3, r3
    1dac:	8293      	strh	r3, [r2, #20]
		break;
    1dae:	e017      	b.n	1de0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1db0:	4b10      	ldr	r3, [pc, #64]	; (1df4 <system_clock_source_enable+0xa4>)
    1db2:	681b      	ldr	r3, [r3, #0]
    1db4:	2202      	movs	r2, #2
    1db6:	431a      	orrs	r2, r3
    1db8:	4b0e      	ldr	r3, [pc, #56]	; (1df4 <system_clock_source_enable+0xa4>)
    1dba:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    1dbc:	4b0e      	ldr	r3, [pc, #56]	; (1df8 <system_clock_source_enable+0xa8>)
    1dbe:	4798      	blx	r3
		break;
    1dc0:	e00e      	b.n	1de0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1dc2:	4a0b      	ldr	r2, [pc, #44]	; (1df0 <system_clock_source_enable+0xa0>)
    1dc4:	490a      	ldr	r1, [pc, #40]	; (1df0 <system_clock_source_enable+0xa0>)
    1dc6:	2344      	movs	r3, #68	; 0x44
    1dc8:	5ccb      	ldrb	r3, [r1, r3]
    1dca:	b2db      	uxtb	r3, r3
    1dcc:	2102      	movs	r1, #2
    1dce:	430b      	orrs	r3, r1
    1dd0:	b2d9      	uxtb	r1, r3
    1dd2:	2344      	movs	r3, #68	; 0x44
    1dd4:	54d1      	strb	r1, [r2, r3]
		break;
    1dd6:	e003      	b.n	1de0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1dd8:	2300      	movs	r3, #0
    1dda:	e002      	b.n	1de2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1ddc:	2317      	movs	r3, #23
    1dde:	e000      	b.n	1de2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    1de0:	2300      	movs	r3, #0
}
    1de2:	0018      	movs	r0, r3
    1de4:	46bd      	mov	sp, r7
    1de6:	b002      	add	sp, #8
    1de8:	bd80      	pop	{r7, pc}
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	00004470 	.word	0x00004470
    1df0:	40000800 	.word	0x40000800
    1df4:	200000b8 	.word	0x200000b8
    1df8:	00001acd 	.word	0x00001acd

00001dfc <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    1dfc:	b580      	push	{r7, lr}
    1dfe:	b084      	sub	sp, #16
    1e00:	af00      	add	r7, sp, #0
    1e02:	0002      	movs	r2, r0
    1e04:	1dfb      	adds	r3, r7, #7
    1e06:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    1e08:	2300      	movs	r3, #0
    1e0a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    1e0c:	1dfb      	adds	r3, r7, #7
    1e0e:	781b      	ldrb	r3, [r3, #0]
    1e10:	2b08      	cmp	r3, #8
    1e12:	d821      	bhi.n	1e58 <system_clock_source_is_ready+0x5c>
    1e14:	009a      	lsls	r2, r3, #2
    1e16:	4b18      	ldr	r3, [pc, #96]	; (1e78 <system_clock_source_is_ready+0x7c>)
    1e18:	18d3      	adds	r3, r2, r3
    1e1a:	681b      	ldr	r3, [r3, #0]
    1e1c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    1e1e:	2308      	movs	r3, #8
    1e20:	60fb      	str	r3, [r7, #12]
		break;
    1e22:	e01b      	b.n	1e5c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    1e24:	2304      	movs	r3, #4
    1e26:	60fb      	str	r3, [r7, #12]
		break;
    1e28:	e018      	b.n	1e5c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    1e2a:	2301      	movs	r3, #1
    1e2c:	60fb      	str	r3, [r7, #12]
		break;
    1e2e:	e015      	b.n	1e5c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    1e30:	2302      	movs	r3, #2
    1e32:	60fb      	str	r3, [r7, #12]
		break;
    1e34:	e012      	b.n	1e5c <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    1e36:	2310      	movs	r3, #16
    1e38:	60fb      	str	r3, [r7, #12]
		}
		break;
    1e3a:	e00f      	b.n	1e5c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    1e3c:	4a0f      	ldr	r2, [pc, #60]	; (1e7c <system_clock_source_is_ready+0x80>)
    1e3e:	2350      	movs	r3, #80	; 0x50
    1e40:	5cd3      	ldrb	r3, [r2, r3]
    1e42:	b2db      	uxtb	r3, r3
    1e44:	001a      	movs	r2, r3
    1e46:	2303      	movs	r3, #3
    1e48:	4013      	ands	r3, r2
    1e4a:	3b03      	subs	r3, #3
    1e4c:	425a      	negs	r2, r3
    1e4e:	4153      	adcs	r3, r2
    1e50:	b2db      	uxtb	r3, r3
    1e52:	e00c      	b.n	1e6e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    1e54:	2301      	movs	r3, #1
    1e56:	e00a      	b.n	1e6e <system_clock_source_is_ready+0x72>

	default:
		return false;
    1e58:	2300      	movs	r3, #0
    1e5a:	e008      	b.n	1e6e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1e5c:	4b07      	ldr	r3, [pc, #28]	; (1e7c <system_clock_source_is_ready+0x80>)
    1e5e:	68db      	ldr	r3, [r3, #12]
    1e60:	68fa      	ldr	r2, [r7, #12]
    1e62:	401a      	ands	r2, r3
    1e64:	68fb      	ldr	r3, [r7, #12]
    1e66:	1ad3      	subs	r3, r2, r3
    1e68:	425a      	negs	r2, r3
    1e6a:	4153      	adcs	r3, r2
    1e6c:	b2db      	uxtb	r3, r3
}
    1e6e:	0018      	movs	r0, r3
    1e70:	46bd      	mov	sp, r7
    1e72:	b004      	add	sp, #16
    1e74:	bd80      	pop	{r7, pc}
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	00004494 	.word	0x00004494
    1e7c:	40000800 	.word	0x40000800

00001e80 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1e80:	b580      	push	{r7, lr}
    1e82:	b082      	sub	sp, #8
    1e84:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1e86:	003b      	movs	r3, r7
    1e88:	2202      	movs	r2, #2
    1e8a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1e8c:	2300      	movs	r3, #0
    1e8e:	607b      	str	r3, [r7, #4]
    1e90:	e009      	b.n	1ea6 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1e92:	687b      	ldr	r3, [r7, #4]
    1e94:	b2db      	uxtb	r3, r3
    1e96:	003a      	movs	r2, r7
    1e98:	0011      	movs	r1, r2
    1e9a:	0018      	movs	r0, r3
    1e9c:	4b05      	ldr	r3, [pc, #20]	; (1eb4 <_switch_peripheral_gclk+0x34>)
    1e9e:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ea0:	687b      	ldr	r3, [r7, #4]
    1ea2:	3301      	adds	r3, #1
    1ea4:	607b      	str	r3, [r7, #4]
    1ea6:	687b      	ldr	r3, [r7, #4]
    1ea8:	2b24      	cmp	r3, #36	; 0x24
    1eaa:	d9f2      	bls.n	1e92 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    1eac:	46c0      	nop			; (mov r8, r8)
    1eae:	46bd      	mov	sp, r7
    1eb0:	b002      	add	sp, #8
    1eb2:	bd80      	pop	{r7, pc}
    1eb4:	000023d1 	.word	0x000023d1

00001eb8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1eb8:	b580      	push	{r7, lr}
    1eba:	b0a6      	sub	sp, #152	; 0x98
    1ebc:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1ebe:	4b65      	ldr	r3, [pc, #404]	; (2054 <STACK_SIZE+0x54>)
    1ec0:	22c2      	movs	r2, #194	; 0xc2
    1ec2:	00d2      	lsls	r2, r2, #3
    1ec4:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    1ec6:	2001      	movs	r0, #1
    1ec8:	4b63      	ldr	r3, [pc, #396]	; (2058 <STACK_SIZE+0x58>)
    1eca:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1ecc:	4b63      	ldr	r3, [pc, #396]	; (205c <STACK_SIZE+0x5c>)
    1ece:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    1ed0:	2394      	movs	r3, #148	; 0x94
    1ed2:	18fb      	adds	r3, r7, r3
    1ed4:	0018      	movs	r0, r3
    1ed6:	4b62      	ldr	r3, [pc, #392]	; (2060 <STACK_SIZE+0x60>)
    1ed8:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1eda:	2394      	movs	r3, #148	; 0x94
    1edc:	18fb      	adds	r3, r7, r3
    1ede:	2200      	movs	r2, #0
    1ee0:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1ee2:	2394      	movs	r3, #148	; 0x94
    1ee4:	18fb      	adds	r3, r7, r3
    1ee6:	2201      	movs	r2, #1
    1ee8:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1eea:	2394      	movs	r3, #148	; 0x94
    1eec:	18fb      	adds	r3, r7, r3
    1eee:	2200      	movs	r2, #0
    1ef0:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1ef2:	2394      	movs	r3, #148	; 0x94
    1ef4:	18fb      	adds	r3, r7, r3
    1ef6:	0018      	movs	r0, r3
    1ef8:	4b5a      	ldr	r3, [pc, #360]	; (2064 <STACK_SIZE+0x64>)
    1efa:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1efc:	2006      	movs	r0, #6
    1efe:	4b5a      	ldr	r3, [pc, #360]	; (2068 <STACK_SIZE+0x68>)
    1f00:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1f02:	4b5a      	ldr	r3, [pc, #360]	; (206c <STACK_SIZE+0x6c>)
    1f04:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1f06:	2360      	movs	r3, #96	; 0x60
    1f08:	18fb      	adds	r3, r7, r3
    1f0a:	0018      	movs	r0, r3
    1f0c:	4b58      	ldr	r3, [pc, #352]	; (2070 <STACK_SIZE+0x70>)
    1f0e:	4798      	blx	r3
    1f10:	2360      	movs	r3, #96	; 0x60
    1f12:	18fb      	adds	r3, r7, r3
    1f14:	2206      	movs	r2, #6
    1f16:	701a      	strb	r2, [r3, #0]
    1f18:	2360      	movs	r3, #96	; 0x60
    1f1a:	18fb      	adds	r3, r7, r3
    1f1c:	2208      	movs	r2, #8
    1f1e:	605a      	str	r2, [r3, #4]
    1f20:	2360      	movs	r3, #96	; 0x60
    1f22:	18fb      	adds	r3, r7, r3
    1f24:	2200      	movs	r2, #0
    1f26:	721a      	strb	r2, [r3, #8]
    1f28:	2360      	movs	r3, #96	; 0x60
    1f2a:	18fb      	adds	r3, r7, r3
    1f2c:	2200      	movs	r2, #0
    1f2e:	725a      	strb	r2, [r3, #9]
    1f30:	2360      	movs	r3, #96	; 0x60
    1f32:	18fb      	adds	r3, r7, r3
    1f34:	0019      	movs	r1, r3
    1f36:	2001      	movs	r0, #1
    1f38:	4b4e      	ldr	r3, [pc, #312]	; (2074 <STACK_SIZE+0x74>)
    1f3a:	4798      	blx	r3
    1f3c:	2001      	movs	r0, #1
    1f3e:	4b4e      	ldr	r3, [pc, #312]	; (2078 <STACK_SIZE+0x78>)
    1f40:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
    1f42:	2390      	movs	r3, #144	; 0x90
    1f44:	18fb      	adds	r3, r7, r3
    1f46:	0018      	movs	r0, r3
    1f48:	4b4c      	ldr	r3, [pc, #304]	; (207c <STACK_SIZE+0x7c>)
    1f4a:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
    1f4c:	2390      	movs	r3, #144	; 0x90
    1f4e:	18fb      	adds	r3, r7, r3
    1f50:	2201      	movs	r2, #1
    1f52:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
    1f54:	2390      	movs	r3, #144	; 0x90
    1f56:	18fb      	adds	r3, r7, r3
    1f58:	0019      	movs	r1, r3
    1f5a:	2001      	movs	r0, #1
    1f5c:	4b48      	ldr	r3, [pc, #288]	; (2080 <STACK_SIZE+0x80>)
    1f5e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
    1f60:	2001      	movs	r0, #1
    1f62:	4b48      	ldr	r3, [pc, #288]	; (2084 <STACK_SIZE+0x84>)
    1f64:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
    1f66:	2378      	movs	r3, #120	; 0x78
    1f68:	18fb      	adds	r3, r7, r3
    1f6a:	0018      	movs	r0, r3
    1f6c:	4b46      	ldr	r3, [pc, #280]	; (2088 <STACK_SIZE+0x88>)
    1f6e:	4798      	blx	r3

	dpll_config.on_demand        = false;
    1f70:	2378      	movs	r3, #120	; 0x78
    1f72:	18fb      	adds	r3, r7, r3
    1f74:	2200      	movs	r2, #0
    1f76:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    1f78:	2378      	movs	r3, #120	; 0x78
    1f7a:	18fb      	adds	r3, r7, r3
    1f7c:	2200      	movs	r2, #0
    1f7e:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
    1f80:	2378      	movs	r3, #120	; 0x78
    1f82:	18fb      	adds	r3, r7, r3
    1f84:	2200      	movs	r2, #0
    1f86:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
    1f88:	2378      	movs	r3, #120	; 0x78
    1f8a:	18fb      	adds	r3, r7, r3
    1f8c:	2200      	movs	r2, #0
    1f8e:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
    1f90:	2378      	movs	r3, #120	; 0x78
    1f92:	18fb      	adds	r3, r7, r3
    1f94:	2200      	movs	r2, #0
    1f96:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
    1f98:	2378      	movs	r3, #120	; 0x78
    1f9a:	18fb      	adds	r3, r7, r3
    1f9c:	2200      	movs	r2, #0
    1f9e:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
    1fa0:	2378      	movs	r3, #120	; 0x78
    1fa2:	18fb      	adds	r3, r7, r3
    1fa4:	2200      	movs	r2, #0
    1fa6:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    1fa8:	2378      	movs	r3, #120	; 0x78
    1faa:	18fb      	adds	r3, r7, r3
    1fac:	2202      	movs	r2, #2
    1fae:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    1fb0:	2378      	movs	r3, #120	; 0x78
    1fb2:	18fb      	adds	r3, r7, r3
    1fb4:	4a35      	ldr	r2, [pc, #212]	; (208c <STACK_SIZE+0x8c>)
    1fb6:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
    1fb8:	2378      	movs	r3, #120	; 0x78
    1fba:	18fb      	adds	r3, r7, r3
    1fbc:	2201      	movs	r2, #1
    1fbe:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
    1fc0:	2378      	movs	r3, #120	; 0x78
    1fc2:	18fb      	adds	r3, r7, r3
    1fc4:	4a32      	ldr	r2, [pc, #200]	; (2090 <STACK_SIZE+0x90>)
    1fc6:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
    1fc8:	2378      	movs	r3, #120	; 0x78
    1fca:	18fb      	adds	r3, r7, r3
    1fcc:	0018      	movs	r0, r3
    1fce:	4b31      	ldr	r3, [pc, #196]	; (2094 <STACK_SIZE+0x94>)
    1fd0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    1fd2:	2008      	movs	r0, #8
    1fd4:	4b24      	ldr	r3, [pc, #144]	; (2068 <STACK_SIZE+0x68>)
    1fd6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    1fd8:	46c0      	nop			; (mov r8, r8)
    1fda:	2008      	movs	r0, #8
    1fdc:	4b2e      	ldr	r3, [pc, #184]	; (2098 <STACK_SIZE+0x98>)
    1fde:	4798      	blx	r3
    1fe0:	0003      	movs	r3, r0
    1fe2:	001a      	movs	r2, r3
    1fe4:	2301      	movs	r3, #1
    1fe6:	4053      	eors	r3, r2
    1fe8:	b2db      	uxtb	r3, r3
    1fea:	2b00      	cmp	r3, #0
    1fec:	d1f5      	bne.n	1fda <system_clock_init+0x122>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    1fee:	4919      	ldr	r1, [pc, #100]	; (2054 <STACK_SIZE+0x54>)
    1ff0:	2244      	movs	r2, #68	; 0x44
    1ff2:	5c8b      	ldrb	r3, [r1, r2]
    1ff4:	2080      	movs	r0, #128	; 0x80
    1ff6:	4240      	negs	r0, r0
    1ff8:	4303      	orrs	r3, r0
    1ffa:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    1ffc:	2000      	movs	r0, #0
    1ffe:	4b27      	ldr	r3, [pc, #156]	; (209c <STACK_SIZE+0x9c>)
    2000:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    2002:	2100      	movs	r1, #0
    2004:	2000      	movs	r0, #0
    2006:	4b26      	ldr	r3, [pc, #152]	; (20a0 <STACK_SIZE+0xa0>)
    2008:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    200a:	2100      	movs	r1, #0
    200c:	2001      	movs	r0, #1
    200e:	4b24      	ldr	r3, [pc, #144]	; (20a0 <STACK_SIZE+0xa0>)
    2010:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    2012:	2100      	movs	r1, #0
    2014:	2002      	movs	r0, #2
    2016:	4b22      	ldr	r3, [pc, #136]	; (20a0 <STACK_SIZE+0xa0>)
    2018:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    201a:	003b      	movs	r3, r7
    201c:	0018      	movs	r0, r3
    201e:	4b14      	ldr	r3, [pc, #80]	; (2070 <STACK_SIZE+0x70>)
    2020:	4798      	blx	r3
    2022:	003b      	movs	r3, r7
    2024:	2206      	movs	r2, #6
    2026:	701a      	strb	r2, [r3, #0]
    2028:	003b      	movs	r3, r7
    202a:	2201      	movs	r2, #1
    202c:	605a      	str	r2, [r3, #4]
    202e:	003b      	movs	r3, r7
    2030:	2200      	movs	r2, #0
    2032:	721a      	strb	r2, [r3, #8]
    2034:	003b      	movs	r3, r7
    2036:	2200      	movs	r2, #0
    2038:	725a      	strb	r2, [r3, #9]
    203a:	003b      	movs	r3, r7
    203c:	0019      	movs	r1, r3
    203e:	2000      	movs	r0, #0
    2040:	4b0c      	ldr	r3, [pc, #48]	; (2074 <STACK_SIZE+0x74>)
    2042:	4798      	blx	r3
    2044:	2000      	movs	r0, #0
    2046:	4b0c      	ldr	r3, [pc, #48]	; (2078 <STACK_SIZE+0x78>)
    2048:	4798      	blx	r3
#endif
}
    204a:	46c0      	nop			; (mov r8, r8)
    204c:	46bd      	mov	sp, r7
    204e:	b026      	add	sp, #152	; 0x98
    2050:	bd80      	pop	{r7, pc}
    2052:	46c0      	nop			; (mov r8, r8)
    2054:	40000800 	.word	0x40000800
    2058:	00001a7d 	.word	0x00001a7d
    205c:	00001e81 	.word	0x00001e81
    2060:	0000198d 	.word	0x0000198d
    2064:	00001bcd 	.word	0x00001bcd
    2068:	00001d51 	.word	0x00001d51
    206c:	00002149 	.word	0x00002149
    2070:	00001945 	.word	0x00001945
    2074:	00002179 	.word	0x00002179
    2078:	0000229d 	.word	0x0000229d
    207c:	00001975 	.word	0x00001975
    2080:	000023d1 	.word	0x000023d1
    2084:	00002415 	.word	0x00002415
    2088:	00001a25 	.word	0x00001a25
    208c:	000f4240 	.word	0x000f4240
    2090:	02dc6c00 	.word	0x02dc6c00
    2094:	00001c45 	.word	0x00001c45
    2098:	00001dfd 	.word	0x00001dfd
    209c:	000019b1 	.word	0x000019b1
    20a0:	000019d1 	.word	0x000019d1

000020a4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    20a4:	b580      	push	{r7, lr}
    20a6:	b082      	sub	sp, #8
    20a8:	af00      	add	r7, sp, #0
    20aa:	0002      	movs	r2, r0
    20ac:	6039      	str	r1, [r7, #0]
    20ae:	1dfb      	adds	r3, r7, #7
    20b0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    20b2:	1dfb      	adds	r3, r7, #7
    20b4:	781b      	ldrb	r3, [r3, #0]
    20b6:	2b01      	cmp	r3, #1
    20b8:	d00a      	beq.n	20d0 <system_apb_clock_set_mask+0x2c>
    20ba:	2b02      	cmp	r3, #2
    20bc:	d00f      	beq.n	20de <system_apb_clock_set_mask+0x3a>
    20be:	2b00      	cmp	r3, #0
    20c0:	d114      	bne.n	20ec <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    20c2:	4b0e      	ldr	r3, [pc, #56]	; (20fc <system_apb_clock_set_mask+0x58>)
    20c4:	4a0d      	ldr	r2, [pc, #52]	; (20fc <system_apb_clock_set_mask+0x58>)
    20c6:	6991      	ldr	r1, [r2, #24]
    20c8:	683a      	ldr	r2, [r7, #0]
    20ca:	430a      	orrs	r2, r1
    20cc:	619a      	str	r2, [r3, #24]
			break;
    20ce:	e00f      	b.n	20f0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    20d0:	4b0a      	ldr	r3, [pc, #40]	; (20fc <system_apb_clock_set_mask+0x58>)
    20d2:	4a0a      	ldr	r2, [pc, #40]	; (20fc <system_apb_clock_set_mask+0x58>)
    20d4:	69d1      	ldr	r1, [r2, #28]
    20d6:	683a      	ldr	r2, [r7, #0]
    20d8:	430a      	orrs	r2, r1
    20da:	61da      	str	r2, [r3, #28]
			break;
    20dc:	e008      	b.n	20f0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    20de:	4b07      	ldr	r3, [pc, #28]	; (20fc <system_apb_clock_set_mask+0x58>)
    20e0:	4a06      	ldr	r2, [pc, #24]	; (20fc <system_apb_clock_set_mask+0x58>)
    20e2:	6a11      	ldr	r1, [r2, #32]
    20e4:	683a      	ldr	r2, [r7, #0]
    20e6:	430a      	orrs	r2, r1
    20e8:	621a      	str	r2, [r3, #32]
			break;
    20ea:	e001      	b.n	20f0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    20ec:	2317      	movs	r3, #23
    20ee:	e000      	b.n	20f2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    20f0:	2300      	movs	r3, #0
}
    20f2:	0018      	movs	r0, r3
    20f4:	46bd      	mov	sp, r7
    20f6:	b002      	add	sp, #8
    20f8:	bd80      	pop	{r7, pc}
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	40000400 	.word	0x40000400

00002100 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    2100:	b580      	push	{r7, lr}
    2102:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    2104:	4b02      	ldr	r3, [pc, #8]	; (2110 <system_interrupt_enter_critical_section+0x10>)
    2106:	4798      	blx	r3
}
    2108:	46c0      	nop			; (mov r8, r8)
    210a:	46bd      	mov	sp, r7
    210c:	bd80      	pop	{r7, pc}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	00000179 	.word	0x00000179

00002114 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    2114:	b580      	push	{r7, lr}
    2116:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    2118:	4b02      	ldr	r3, [pc, #8]	; (2124 <system_interrupt_leave_critical_section+0x10>)
    211a:	4798      	blx	r3
}
    211c:	46c0      	nop			; (mov r8, r8)
    211e:	46bd      	mov	sp, r7
    2120:	bd80      	pop	{r7, pc}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	000001cd 	.word	0x000001cd

00002128 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    2128:	b580      	push	{r7, lr}
    212a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    212c:	4b05      	ldr	r3, [pc, #20]	; (2144 <system_gclk_is_syncing+0x1c>)
    212e:	785b      	ldrb	r3, [r3, #1]
    2130:	b2db      	uxtb	r3, r3
    2132:	b25b      	sxtb	r3, r3
    2134:	2b00      	cmp	r3, #0
    2136:	da01      	bge.n	213c <system_gclk_is_syncing+0x14>
		return true;
    2138:	2301      	movs	r3, #1
    213a:	e000      	b.n	213e <system_gclk_is_syncing+0x16>
	}

	return false;
    213c:	2300      	movs	r3, #0
}
    213e:	0018      	movs	r0, r3
    2140:	46bd      	mov	sp, r7
    2142:	bd80      	pop	{r7, pc}
    2144:	40000c00 	.word	0x40000c00

00002148 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    2148:	b580      	push	{r7, lr}
    214a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    214c:	2108      	movs	r1, #8
    214e:	2000      	movs	r0, #0
    2150:	4b07      	ldr	r3, [pc, #28]	; (2170 <system_gclk_init+0x28>)
    2152:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2154:	4b07      	ldr	r3, [pc, #28]	; (2174 <system_gclk_init+0x2c>)
    2156:	2201      	movs	r2, #1
    2158:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	4b05      	ldr	r3, [pc, #20]	; (2174 <system_gclk_init+0x2c>)
    215e:	781b      	ldrb	r3, [r3, #0]
    2160:	b2db      	uxtb	r3, r3
    2162:	001a      	movs	r2, r3
    2164:	2301      	movs	r3, #1
    2166:	4013      	ands	r3, r2
    2168:	d1f8      	bne.n	215c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    216a:	46c0      	nop			; (mov r8, r8)
    216c:	46bd      	mov	sp, r7
    216e:	bd80      	pop	{r7, pc}
    2170:	000020a5 	.word	0x000020a5
    2174:	40000c00 	.word	0x40000c00

00002178 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2178:	b580      	push	{r7, lr}
    217a:	b086      	sub	sp, #24
    217c:	af00      	add	r7, sp, #0
    217e:	0002      	movs	r2, r0
    2180:	6039      	str	r1, [r7, #0]
    2182:	1dfb      	adds	r3, r7, #7
    2184:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2186:	1dfb      	adds	r3, r7, #7
    2188:	781b      	ldrb	r3, [r3, #0]
    218a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    218c:	1dfb      	adds	r3, r7, #7
    218e:	781b      	ldrb	r3, [r3, #0]
    2190:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2192:	683b      	ldr	r3, [r7, #0]
    2194:	781b      	ldrb	r3, [r3, #0]
    2196:	021b      	lsls	r3, r3, #8
    2198:	001a      	movs	r2, r3
    219a:	697b      	ldr	r3, [r7, #20]
    219c:	4313      	orrs	r3, r2
    219e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    21a0:	683b      	ldr	r3, [r7, #0]
    21a2:	785b      	ldrb	r3, [r3, #1]
    21a4:	2b00      	cmp	r3, #0
    21a6:	d004      	beq.n	21b2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    21a8:	697b      	ldr	r3, [r7, #20]
    21aa:	2280      	movs	r2, #128	; 0x80
    21ac:	02d2      	lsls	r2, r2, #11
    21ae:	4313      	orrs	r3, r2
    21b0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    21b2:	683b      	ldr	r3, [r7, #0]
    21b4:	7a5b      	ldrb	r3, [r3, #9]
    21b6:	2b00      	cmp	r3, #0
    21b8:	d004      	beq.n	21c4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    21ba:	697b      	ldr	r3, [r7, #20]
    21bc:	2280      	movs	r2, #128	; 0x80
    21be:	0312      	lsls	r2, r2, #12
    21c0:	4313      	orrs	r3, r2
    21c2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    21c4:	683b      	ldr	r3, [r7, #0]
    21c6:	685b      	ldr	r3, [r3, #4]
    21c8:	2b01      	cmp	r3, #1
    21ca:	d92c      	bls.n	2226 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    21cc:	683b      	ldr	r3, [r7, #0]
    21ce:	685a      	ldr	r2, [r3, #4]
    21d0:	683b      	ldr	r3, [r7, #0]
    21d2:	685b      	ldr	r3, [r3, #4]
    21d4:	3b01      	subs	r3, #1
    21d6:	4013      	ands	r3, r2
    21d8:	d11a      	bne.n	2210 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    21da:	2300      	movs	r3, #0
    21dc:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    21de:	2302      	movs	r3, #2
    21e0:	60bb      	str	r3, [r7, #8]
    21e2:	e005      	b.n	21f0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    21e4:	68fb      	ldr	r3, [r7, #12]
    21e6:	3301      	adds	r3, #1
    21e8:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    21ea:	68bb      	ldr	r3, [r7, #8]
    21ec:	005b      	lsls	r3, r3, #1
    21ee:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    21f0:	683b      	ldr	r3, [r7, #0]
    21f2:	685a      	ldr	r2, [r3, #4]
    21f4:	68bb      	ldr	r3, [r7, #8]
    21f6:	429a      	cmp	r2, r3
    21f8:	d8f4      	bhi.n	21e4 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    21fa:	68fb      	ldr	r3, [r7, #12]
    21fc:	021b      	lsls	r3, r3, #8
    21fe:	693a      	ldr	r2, [r7, #16]
    2200:	4313      	orrs	r3, r2
    2202:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2204:	697b      	ldr	r3, [r7, #20]
    2206:	2280      	movs	r2, #128	; 0x80
    2208:	0352      	lsls	r2, r2, #13
    220a:	4313      	orrs	r3, r2
    220c:	617b      	str	r3, [r7, #20]
    220e:	e00a      	b.n	2226 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2210:	683b      	ldr	r3, [r7, #0]
    2212:	685b      	ldr	r3, [r3, #4]
    2214:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    2216:	693a      	ldr	r2, [r7, #16]
    2218:	4313      	orrs	r3, r2
    221a:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    221c:	697b      	ldr	r3, [r7, #20]
    221e:	2280      	movs	r2, #128	; 0x80
    2220:	0292      	lsls	r2, r2, #10
    2222:	4313      	orrs	r3, r2
    2224:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2226:	683b      	ldr	r3, [r7, #0]
    2228:	7a1b      	ldrb	r3, [r3, #8]
    222a:	2b00      	cmp	r3, #0
    222c:	d004      	beq.n	2238 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    222e:	697b      	ldr	r3, [r7, #20]
    2230:	2280      	movs	r2, #128	; 0x80
    2232:	0392      	lsls	r2, r2, #14
    2234:	4313      	orrs	r3, r2
    2236:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    2238:	46c0      	nop			; (mov r8, r8)
    223a:	4b13      	ldr	r3, [pc, #76]	; (2288 <system_gclk_gen_set_config+0x110>)
    223c:	4798      	blx	r3
    223e:	1e03      	subs	r3, r0, #0
    2240:	d1fb      	bne.n	223a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    2242:	4b12      	ldr	r3, [pc, #72]	; (228c <system_gclk_gen_set_config+0x114>)
    2244:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2246:	4a12      	ldr	r2, [pc, #72]	; (2290 <system_gclk_gen_set_config+0x118>)
    2248:	1dfb      	adds	r3, r7, #7
    224a:	781b      	ldrb	r3, [r3, #0]
    224c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	4b0d      	ldr	r3, [pc, #52]	; (2288 <system_gclk_gen_set_config+0x110>)
    2252:	4798      	blx	r3
    2254:	1e03      	subs	r3, r0, #0
    2256:	d1fb      	bne.n	2250 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2258:	4b0e      	ldr	r3, [pc, #56]	; (2294 <system_gclk_gen_set_config+0x11c>)
    225a:	693a      	ldr	r2, [r7, #16]
    225c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	4b09      	ldr	r3, [pc, #36]	; (2288 <system_gclk_gen_set_config+0x110>)
    2262:	4798      	blx	r3
    2264:	1e03      	subs	r3, r0, #0
    2266:	d1fb      	bne.n	2260 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2268:	4b0a      	ldr	r3, [pc, #40]	; (2294 <system_gclk_gen_set_config+0x11c>)
    226a:	4a0a      	ldr	r2, [pc, #40]	; (2294 <system_gclk_gen_set_config+0x11c>)
    226c:	6851      	ldr	r1, [r2, #4]
    226e:	2280      	movs	r2, #128	; 0x80
    2270:	0252      	lsls	r2, r2, #9
    2272:	4011      	ands	r1, r2
    2274:	697a      	ldr	r2, [r7, #20]
    2276:	430a      	orrs	r2, r1
    2278:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    227a:	4b07      	ldr	r3, [pc, #28]	; (2298 <system_gclk_gen_set_config+0x120>)
    227c:	4798      	blx	r3
}
    227e:	46c0      	nop			; (mov r8, r8)
    2280:	46bd      	mov	sp, r7
    2282:	b006      	add	sp, #24
    2284:	bd80      	pop	{r7, pc}
    2286:	46c0      	nop			; (mov r8, r8)
    2288:	00002129 	.word	0x00002129
    228c:	00002101 	.word	0x00002101
    2290:	40000c08 	.word	0x40000c08
    2294:	40000c00 	.word	0x40000c00
    2298:	00002115 	.word	0x00002115

0000229c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    229c:	b580      	push	{r7, lr}
    229e:	b082      	sub	sp, #8
    22a0:	af00      	add	r7, sp, #0
    22a2:	0002      	movs	r2, r0
    22a4:	1dfb      	adds	r3, r7, #7
    22a6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    22a8:	46c0      	nop			; (mov r8, r8)
    22aa:	4b0e      	ldr	r3, [pc, #56]	; (22e4 <system_gclk_gen_enable+0x48>)
    22ac:	4798      	blx	r3
    22ae:	1e03      	subs	r3, r0, #0
    22b0:	d1fb      	bne.n	22aa <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    22b2:	4b0d      	ldr	r3, [pc, #52]	; (22e8 <system_gclk_gen_enable+0x4c>)
    22b4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    22b6:	4a0d      	ldr	r2, [pc, #52]	; (22ec <system_gclk_gen_enable+0x50>)
    22b8:	1dfb      	adds	r3, r7, #7
    22ba:	781b      	ldrb	r3, [r3, #0]
    22bc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	4b08      	ldr	r3, [pc, #32]	; (22e4 <system_gclk_gen_enable+0x48>)
    22c2:	4798      	blx	r3
    22c4:	1e03      	subs	r3, r0, #0
    22c6:	d1fb      	bne.n	22c0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    22c8:	4b09      	ldr	r3, [pc, #36]	; (22f0 <system_gclk_gen_enable+0x54>)
    22ca:	4a09      	ldr	r2, [pc, #36]	; (22f0 <system_gclk_gen_enable+0x54>)
    22cc:	6852      	ldr	r2, [r2, #4]
    22ce:	2180      	movs	r1, #128	; 0x80
    22d0:	0249      	lsls	r1, r1, #9
    22d2:	430a      	orrs	r2, r1
    22d4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    22d6:	4b07      	ldr	r3, [pc, #28]	; (22f4 <system_gclk_gen_enable+0x58>)
    22d8:	4798      	blx	r3
}
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	46bd      	mov	sp, r7
    22de:	b002      	add	sp, #8
    22e0:	bd80      	pop	{r7, pc}
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	00002129 	.word	0x00002129
    22e8:	00002101 	.word	0x00002101
    22ec:	40000c04 	.word	0x40000c04
    22f0:	40000c00 	.word	0x40000c00
    22f4:	00002115 	.word	0x00002115

000022f8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    22f8:	b580      	push	{r7, lr}
    22fa:	b086      	sub	sp, #24
    22fc:	af00      	add	r7, sp, #0
    22fe:	0002      	movs	r2, r0
    2300:	1dfb      	adds	r3, r7, #7
    2302:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    2304:	46c0      	nop			; (mov r8, r8)
    2306:	4b2a      	ldr	r3, [pc, #168]	; (23b0 <system_gclk_gen_get_hz+0xb8>)
    2308:	4798      	blx	r3
    230a:	1e03      	subs	r3, r0, #0
    230c:	d1fb      	bne.n	2306 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    230e:	4b29      	ldr	r3, [pc, #164]	; (23b4 <system_gclk_gen_get_hz+0xbc>)
    2310:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2312:	4a29      	ldr	r2, [pc, #164]	; (23b8 <system_gclk_gen_get_hz+0xc0>)
    2314:	1dfb      	adds	r3, r7, #7
    2316:	781b      	ldrb	r3, [r3, #0]
    2318:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	4b24      	ldr	r3, [pc, #144]	; (23b0 <system_gclk_gen_get_hz+0xb8>)
    231e:	4798      	blx	r3
    2320:	1e03      	subs	r3, r0, #0
    2322:	d1fb      	bne.n	231c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2324:	4b25      	ldr	r3, [pc, #148]	; (23bc <system_gclk_gen_get_hz+0xc4>)
    2326:	685b      	ldr	r3, [r3, #4]
    2328:	04db      	lsls	r3, r3, #19
    232a:	0edb      	lsrs	r3, r3, #27
    232c:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    232e:	0018      	movs	r0, r3
    2330:	4b23      	ldr	r3, [pc, #140]	; (23c0 <system_gclk_gen_get_hz+0xc8>)
    2332:	4798      	blx	r3
    2334:	0003      	movs	r3, r0
    2336:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2338:	4a1f      	ldr	r2, [pc, #124]	; (23b8 <system_gclk_gen_get_hz+0xc0>)
    233a:	1dfb      	adds	r3, r7, #7
    233c:	781b      	ldrb	r3, [r3, #0]
    233e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2340:	4b1e      	ldr	r3, [pc, #120]	; (23bc <system_gclk_gen_get_hz+0xc4>)
    2342:	685b      	ldr	r3, [r3, #4]
    2344:	02db      	lsls	r3, r3, #11
    2346:	0fdb      	lsrs	r3, r3, #31
    2348:	b2da      	uxtb	r2, r3
    234a:	2313      	movs	r3, #19
    234c:	18fb      	adds	r3, r7, r3
    234e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2350:	4a1c      	ldr	r2, [pc, #112]	; (23c4 <system_gclk_gen_get_hz+0xcc>)
    2352:	1dfb      	adds	r3, r7, #7
    2354:	781b      	ldrb	r3, [r3, #0]
    2356:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    2358:	46c0      	nop			; (mov r8, r8)
    235a:	4b15      	ldr	r3, [pc, #84]	; (23b0 <system_gclk_gen_get_hz+0xb8>)
    235c:	4798      	blx	r3
    235e:	1e03      	subs	r3, r0, #0
    2360:	d1fb      	bne.n	235a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2362:	4b16      	ldr	r3, [pc, #88]	; (23bc <system_gclk_gen_get_hz+0xc4>)
    2364:	689b      	ldr	r3, [r3, #8]
    2366:	021b      	lsls	r3, r3, #8
    2368:	0c1b      	lsrs	r3, r3, #16
    236a:	b29b      	uxth	r3, r3
    236c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    236e:	4b16      	ldr	r3, [pc, #88]	; (23c8 <system_gclk_gen_get_hz+0xd0>)
    2370:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2372:	2313      	movs	r3, #19
    2374:	18fb      	adds	r3, r7, r3
    2376:	781b      	ldrb	r3, [r3, #0]
    2378:	2b00      	cmp	r3, #0
    237a:	d109      	bne.n	2390 <system_gclk_gen_get_hz+0x98>
    237c:	68fb      	ldr	r3, [r7, #12]
    237e:	2b01      	cmp	r3, #1
    2380:	d906      	bls.n	2390 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    2382:	4b12      	ldr	r3, [pc, #72]	; (23cc <system_gclk_gen_get_hz+0xd4>)
    2384:	68f9      	ldr	r1, [r7, #12]
    2386:	6978      	ldr	r0, [r7, #20]
    2388:	4798      	blx	r3
    238a:	0003      	movs	r3, r0
    238c:	617b      	str	r3, [r7, #20]
    238e:	e00a      	b.n	23a6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    2390:	2313      	movs	r3, #19
    2392:	18fb      	adds	r3, r7, r3
    2394:	781b      	ldrb	r3, [r3, #0]
    2396:	2b00      	cmp	r3, #0
    2398:	d005      	beq.n	23a6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    239a:	68fb      	ldr	r3, [r7, #12]
    239c:	3301      	adds	r3, #1
    239e:	697a      	ldr	r2, [r7, #20]
    23a0:	40da      	lsrs	r2, r3
    23a2:	0013      	movs	r3, r2
    23a4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    23a6:	697b      	ldr	r3, [r7, #20]
}
    23a8:	0018      	movs	r0, r3
    23aa:	46bd      	mov	sp, r7
    23ac:	b006      	add	sp, #24
    23ae:	bd80      	pop	{r7, pc}
    23b0:	00002129 	.word	0x00002129
    23b4:	00002101 	.word	0x00002101
    23b8:	40000c04 	.word	0x40000c04
    23bc:	40000c00 	.word	0x40000c00
    23c0:	00001b11 	.word	0x00001b11
    23c4:	40000c08 	.word	0x40000c08
    23c8:	00002115 	.word	0x00002115
    23cc:	00003095 	.word	0x00003095

000023d0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    23d0:	b580      	push	{r7, lr}
    23d2:	b084      	sub	sp, #16
    23d4:	af00      	add	r7, sp, #0
    23d6:	0002      	movs	r2, r0
    23d8:	6039      	str	r1, [r7, #0]
    23da:	1dfb      	adds	r3, r7, #7
    23dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    23de:	1dfb      	adds	r3, r7, #7
    23e0:	781b      	ldrb	r3, [r3, #0]
    23e2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    23e4:	683b      	ldr	r3, [r7, #0]
    23e6:	781b      	ldrb	r3, [r3, #0]
    23e8:	021b      	lsls	r3, r3, #8
    23ea:	001a      	movs	r2, r3
    23ec:	68fb      	ldr	r3, [r7, #12]
    23ee:	4313      	orrs	r3, r2
    23f0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    23f2:	1dfb      	adds	r3, r7, #7
    23f4:	781b      	ldrb	r3, [r3, #0]
    23f6:	0018      	movs	r0, r3
    23f8:	4b04      	ldr	r3, [pc, #16]	; (240c <system_gclk_chan_set_config+0x3c>)
    23fa:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    23fc:	4b04      	ldr	r3, [pc, #16]	; (2410 <system_gclk_chan_set_config+0x40>)
    23fe:	68fa      	ldr	r2, [r7, #12]
    2400:	b292      	uxth	r2, r2
    2402:	805a      	strh	r2, [r3, #2]
}
    2404:	46c0      	nop			; (mov r8, r8)
    2406:	46bd      	mov	sp, r7
    2408:	b004      	add	sp, #16
    240a:	bd80      	pop	{r7, pc}
    240c:	0000245d 	.word	0x0000245d
    2410:	40000c00 	.word	0x40000c00

00002414 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2414:	b580      	push	{r7, lr}
    2416:	b082      	sub	sp, #8
    2418:	af00      	add	r7, sp, #0
    241a:	0002      	movs	r2, r0
    241c:	1dfb      	adds	r3, r7, #7
    241e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2420:	4b0a      	ldr	r3, [pc, #40]	; (244c <system_gclk_chan_enable+0x38>)
    2422:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2424:	4a0a      	ldr	r2, [pc, #40]	; (2450 <system_gclk_chan_enable+0x3c>)
    2426:	1dfb      	adds	r3, r7, #7
    2428:	781b      	ldrb	r3, [r3, #0]
    242a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    242c:	4909      	ldr	r1, [pc, #36]	; (2454 <system_gclk_chan_enable+0x40>)
    242e:	4b09      	ldr	r3, [pc, #36]	; (2454 <system_gclk_chan_enable+0x40>)
    2430:	885b      	ldrh	r3, [r3, #2]
    2432:	b29b      	uxth	r3, r3
    2434:	2280      	movs	r2, #128	; 0x80
    2436:	01d2      	lsls	r2, r2, #7
    2438:	4313      	orrs	r3, r2
    243a:	b29b      	uxth	r3, r3
    243c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    243e:	4b06      	ldr	r3, [pc, #24]	; (2458 <system_gclk_chan_enable+0x44>)
    2440:	4798      	blx	r3
}
    2442:	46c0      	nop			; (mov r8, r8)
    2444:	46bd      	mov	sp, r7
    2446:	b002      	add	sp, #8
    2448:	bd80      	pop	{r7, pc}
    244a:	46c0      	nop			; (mov r8, r8)
    244c:	00002101 	.word	0x00002101
    2450:	40000c02 	.word	0x40000c02
    2454:	40000c00 	.word	0x40000c00
    2458:	00002115 	.word	0x00002115

0000245c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    245c:	b580      	push	{r7, lr}
    245e:	b084      	sub	sp, #16
    2460:	af00      	add	r7, sp, #0
    2462:	0002      	movs	r2, r0
    2464:	1dfb      	adds	r3, r7, #7
    2466:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2468:	4b1c      	ldr	r3, [pc, #112]	; (24dc <system_gclk_chan_disable+0x80>)
    246a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    246c:	4a1c      	ldr	r2, [pc, #112]	; (24e0 <system_gclk_chan_disable+0x84>)
    246e:	1dfb      	adds	r3, r7, #7
    2470:	781b      	ldrb	r3, [r3, #0]
    2472:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2474:	4b1b      	ldr	r3, [pc, #108]	; (24e4 <system_gclk_chan_disable+0x88>)
    2476:	885b      	ldrh	r3, [r3, #2]
    2478:	051b      	lsls	r3, r3, #20
    247a:	0f1b      	lsrs	r3, r3, #28
    247c:	b2db      	uxtb	r3, r3
    247e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    2480:	4a18      	ldr	r2, [pc, #96]	; (24e4 <system_gclk_chan_disable+0x88>)
    2482:	8853      	ldrh	r3, [r2, #2]
    2484:	4918      	ldr	r1, [pc, #96]	; (24e8 <system_gclk_chan_disable+0x8c>)
    2486:	400b      	ands	r3, r1
    2488:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    248a:	4a16      	ldr	r2, [pc, #88]	; (24e4 <system_gclk_chan_disable+0x88>)
    248c:	4b15      	ldr	r3, [pc, #84]	; (24e4 <system_gclk_chan_disable+0x88>)
    248e:	885b      	ldrh	r3, [r3, #2]
    2490:	b29b      	uxth	r3, r3
    2492:	4916      	ldr	r1, [pc, #88]	; (24ec <system_gclk_chan_disable+0x90>)
    2494:	400b      	ands	r3, r1
    2496:	b29b      	uxth	r3, r3
    2498:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    249a:	46c0      	nop			; (mov r8, r8)
    249c:	4b11      	ldr	r3, [pc, #68]	; (24e4 <system_gclk_chan_disable+0x88>)
    249e:	885b      	ldrh	r3, [r3, #2]
    24a0:	b29b      	uxth	r3, r3
    24a2:	001a      	movs	r2, r3
    24a4:	2380      	movs	r3, #128	; 0x80
    24a6:	01db      	lsls	r3, r3, #7
    24a8:	4013      	ands	r3, r2
    24aa:	d1f7      	bne.n	249c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    24ac:	4a0d      	ldr	r2, [pc, #52]	; (24e4 <system_gclk_chan_disable+0x88>)
    24ae:	68fb      	ldr	r3, [r7, #12]
    24b0:	b2db      	uxtb	r3, r3
    24b2:	1c19      	adds	r1, r3, #0
    24b4:	230f      	movs	r3, #15
    24b6:	400b      	ands	r3, r1
    24b8:	b2d9      	uxtb	r1, r3
    24ba:	8853      	ldrh	r3, [r2, #2]
    24bc:	1c08      	adds	r0, r1, #0
    24be:	210f      	movs	r1, #15
    24c0:	4001      	ands	r1, r0
    24c2:	0208      	lsls	r0, r1, #8
    24c4:	4908      	ldr	r1, [pc, #32]	; (24e8 <system_gclk_chan_disable+0x8c>)
    24c6:	400b      	ands	r3, r1
    24c8:	1c19      	adds	r1, r3, #0
    24ca:	1c03      	adds	r3, r0, #0
    24cc:	430b      	orrs	r3, r1
    24ce:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    24d0:	4b07      	ldr	r3, [pc, #28]	; (24f0 <system_gclk_chan_disable+0x94>)
    24d2:	4798      	blx	r3
}
    24d4:	46c0      	nop			; (mov r8, r8)
    24d6:	46bd      	mov	sp, r7
    24d8:	b004      	add	sp, #16
    24da:	bd80      	pop	{r7, pc}
    24dc:	00002101 	.word	0x00002101
    24e0:	40000c02 	.word	0x40000c02
    24e4:	40000c00 	.word	0x40000c00
    24e8:	fffff0ff 	.word	0xfffff0ff
    24ec:	ffffbfff 	.word	0xffffbfff
    24f0:	00002115 	.word	0x00002115

000024f4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    24f4:	b580      	push	{r7, lr}
    24f6:	b084      	sub	sp, #16
    24f8:	af00      	add	r7, sp, #0
    24fa:	0002      	movs	r2, r0
    24fc:	1dfb      	adds	r3, r7, #7
    24fe:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    2500:	4b0d      	ldr	r3, [pc, #52]	; (2538 <system_gclk_chan_get_hz+0x44>)
    2502:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2504:	4a0d      	ldr	r2, [pc, #52]	; (253c <system_gclk_chan_get_hz+0x48>)
    2506:	1dfb      	adds	r3, r7, #7
    2508:	781b      	ldrb	r3, [r3, #0]
    250a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    250c:	4b0c      	ldr	r3, [pc, #48]	; (2540 <system_gclk_chan_get_hz+0x4c>)
    250e:	885b      	ldrh	r3, [r3, #2]
    2510:	051b      	lsls	r3, r3, #20
    2512:	0f1b      	lsrs	r3, r3, #28
    2514:	b2da      	uxtb	r2, r3
    2516:	230f      	movs	r3, #15
    2518:	18fb      	adds	r3, r7, r3
    251a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    251c:	4b09      	ldr	r3, [pc, #36]	; (2544 <system_gclk_chan_get_hz+0x50>)
    251e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2520:	230f      	movs	r3, #15
    2522:	18fb      	adds	r3, r7, r3
    2524:	781b      	ldrb	r3, [r3, #0]
    2526:	0018      	movs	r0, r3
    2528:	4b07      	ldr	r3, [pc, #28]	; (2548 <system_gclk_chan_get_hz+0x54>)
    252a:	4798      	blx	r3
    252c:	0003      	movs	r3, r0
}
    252e:	0018      	movs	r0, r3
    2530:	46bd      	mov	sp, r7
    2532:	b004      	add	sp, #16
    2534:	bd80      	pop	{r7, pc}
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	00002101 	.word	0x00002101
    253c:	40000c02 	.word	0x40000c02
    2540:	40000c00 	.word	0x40000c00
    2544:	00002115 	.word	0x00002115
    2548:	000022f9 	.word	0x000022f9

0000254c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    254c:	b580      	push	{r7, lr}
    254e:	b084      	sub	sp, #16
    2550:	af00      	add	r7, sp, #0
    2552:	0002      	movs	r2, r0
    2554:	1dfb      	adds	r3, r7, #7
    2556:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2558:	230f      	movs	r3, #15
    255a:	18fb      	adds	r3, r7, r3
    255c:	1dfa      	adds	r2, r7, #7
    255e:	7812      	ldrb	r2, [r2, #0]
    2560:	09d2      	lsrs	r2, r2, #7
    2562:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2564:	230e      	movs	r3, #14
    2566:	18fb      	adds	r3, r7, r3
    2568:	1dfa      	adds	r2, r7, #7
    256a:	7812      	ldrb	r2, [r2, #0]
    256c:	0952      	lsrs	r2, r2, #5
    256e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2570:	4b0d      	ldr	r3, [pc, #52]	; (25a8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2572:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2574:	230f      	movs	r3, #15
    2576:	18fb      	adds	r3, r7, r3
    2578:	781b      	ldrb	r3, [r3, #0]
    257a:	2b00      	cmp	r3, #0
    257c:	d10f      	bne.n	259e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    257e:	230f      	movs	r3, #15
    2580:	18fb      	adds	r3, r7, r3
    2582:	781b      	ldrb	r3, [r3, #0]
    2584:	009b      	lsls	r3, r3, #2
    2586:	2210      	movs	r2, #16
    2588:	4694      	mov	ip, r2
    258a:	44bc      	add	ip, r7
    258c:	4463      	add	r3, ip
    258e:	3b08      	subs	r3, #8
    2590:	681a      	ldr	r2, [r3, #0]
    2592:	230e      	movs	r3, #14
    2594:	18fb      	adds	r3, r7, r3
    2596:	781b      	ldrb	r3, [r3, #0]
    2598:	01db      	lsls	r3, r3, #7
    259a:	18d3      	adds	r3, r2, r3
    259c:	e000      	b.n	25a0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    259e:	2300      	movs	r3, #0
	}
}
    25a0:	0018      	movs	r0, r3
    25a2:	46bd      	mov	sp, r7
    25a4:	b004      	add	sp, #16
    25a6:	bd80      	pop	{r7, pc}
    25a8:	41004400 	.word	0x41004400

000025ac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    25ac:	b580      	push	{r7, lr}
    25ae:	b088      	sub	sp, #32
    25b0:	af00      	add	r7, sp, #0
    25b2:	60f8      	str	r0, [r7, #12]
    25b4:	60b9      	str	r1, [r7, #8]
    25b6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    25b8:	2300      	movs	r3, #0
    25ba:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	78db      	ldrb	r3, [r3, #3]
    25c0:	2201      	movs	r2, #1
    25c2:	4053      	eors	r3, r2
    25c4:	b2db      	uxtb	r3, r3
    25c6:	2b00      	cmp	r3, #0
    25c8:	d035      	beq.n	2636 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	781b      	ldrb	r3, [r3, #0]
    25ce:	2b80      	cmp	r3, #128	; 0x80
    25d0:	d00b      	beq.n	25ea <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    25d2:	69fb      	ldr	r3, [r7, #28]
    25d4:	2280      	movs	r2, #128	; 0x80
    25d6:	0252      	lsls	r2, r2, #9
    25d8:	4313      	orrs	r3, r2
    25da:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    25dc:	687b      	ldr	r3, [r7, #4]
    25de:	781b      	ldrb	r3, [r3, #0]
    25e0:	061b      	lsls	r3, r3, #24
    25e2:	001a      	movs	r2, r3
    25e4:	69fb      	ldr	r3, [r7, #28]
    25e6:	4313      	orrs	r3, r2
    25e8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    25ea:	687b      	ldr	r3, [r7, #4]
    25ec:	785b      	ldrb	r3, [r3, #1]
    25ee:	2b00      	cmp	r3, #0
    25f0:	d003      	beq.n	25fa <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    25f6:	2b02      	cmp	r3, #2
    25f8:	d110      	bne.n	261c <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    25fa:	69fb      	ldr	r3, [r7, #28]
    25fc:	2280      	movs	r2, #128	; 0x80
    25fe:	0292      	lsls	r2, r2, #10
    2600:	4313      	orrs	r3, r2
    2602:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2604:	687b      	ldr	r3, [r7, #4]
    2606:	789b      	ldrb	r3, [r3, #2]
    2608:	2b00      	cmp	r3, #0
    260a:	d004      	beq.n	2616 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    260c:	69fb      	ldr	r3, [r7, #28]
    260e:	2280      	movs	r2, #128	; 0x80
    2610:	02d2      	lsls	r2, r2, #11
    2612:	4313      	orrs	r3, r2
    2614:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2616:	68fb      	ldr	r3, [r7, #12]
    2618:	68ba      	ldr	r2, [r7, #8]
    261a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    261c:	687b      	ldr	r3, [r7, #4]
    261e:	785b      	ldrb	r3, [r3, #1]
    2620:	2b01      	cmp	r3, #1
    2622:	d003      	beq.n	262c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    2624:	687b      	ldr	r3, [r7, #4]
    2626:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2628:	2b02      	cmp	r3, #2
    262a:	d107      	bne.n	263c <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    262c:	69fb      	ldr	r3, [r7, #28]
    262e:	4a22      	ldr	r2, [pc, #136]	; (26b8 <_system_pinmux_config+0x10c>)
    2630:	4013      	ands	r3, r2
    2632:	61fb      	str	r3, [r7, #28]
    2634:	e002      	b.n	263c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    2636:	68fb      	ldr	r3, [r7, #12]
    2638:	68ba      	ldr	r2, [r7, #8]
    263a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    263c:	68bb      	ldr	r3, [r7, #8]
    263e:	041b      	lsls	r3, r3, #16
    2640:	0c1b      	lsrs	r3, r3, #16
    2642:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2644:	68bb      	ldr	r3, [r7, #8]
    2646:	0c1b      	lsrs	r3, r3, #16
    2648:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    264a:	69ba      	ldr	r2, [r7, #24]
    264c:	69fb      	ldr	r3, [r7, #28]
    264e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2650:	22a0      	movs	r2, #160	; 0xa0
    2652:	05d2      	lsls	r2, r2, #23
    2654:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2656:	68fb      	ldr	r3, [r7, #12]
    2658:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    265a:	697a      	ldr	r2, [r7, #20]
    265c:	69fb      	ldr	r3, [r7, #28]
    265e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2660:	22d0      	movs	r2, #208	; 0xd0
    2662:	0612      	lsls	r2, r2, #24
    2664:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2666:	68fb      	ldr	r3, [r7, #12]
    2668:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    266a:	687b      	ldr	r3, [r7, #4]
    266c:	78db      	ldrb	r3, [r3, #3]
    266e:	2201      	movs	r2, #1
    2670:	4053      	eors	r3, r2
    2672:	b2db      	uxtb	r3, r3
    2674:	2b00      	cmp	r3, #0
    2676:	d01a      	beq.n	26ae <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2678:	69fa      	ldr	r2, [r7, #28]
    267a:	2380      	movs	r3, #128	; 0x80
    267c:	02db      	lsls	r3, r3, #11
    267e:	4013      	ands	r3, r2
    2680:	d00a      	beq.n	2698 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2682:	687b      	ldr	r3, [r7, #4]
    2684:	789b      	ldrb	r3, [r3, #2]
    2686:	2b01      	cmp	r3, #1
    2688:	d103      	bne.n	2692 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    268a:	68fb      	ldr	r3, [r7, #12]
    268c:	68ba      	ldr	r2, [r7, #8]
    268e:	619a      	str	r2, [r3, #24]
    2690:	e002      	b.n	2698 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    2692:	68fb      	ldr	r3, [r7, #12]
    2694:	68ba      	ldr	r2, [r7, #8]
    2696:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2698:	687b      	ldr	r3, [r7, #4]
    269a:	785b      	ldrb	r3, [r3, #1]
    269c:	2b01      	cmp	r3, #1
    269e:	d003      	beq.n	26a8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    26a0:	687b      	ldr	r3, [r7, #4]
    26a2:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    26a4:	2b02      	cmp	r3, #2
    26a6:	d102      	bne.n	26ae <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    26a8:	68fb      	ldr	r3, [r7, #12]
    26aa:	68ba      	ldr	r2, [r7, #8]
    26ac:	609a      	str	r2, [r3, #8]
		}
	}
}
    26ae:	46c0      	nop			; (mov r8, r8)
    26b0:	46bd      	mov	sp, r7
    26b2:	b008      	add	sp, #32
    26b4:	bd80      	pop	{r7, pc}
    26b6:	46c0      	nop			; (mov r8, r8)
    26b8:	fffbffff 	.word	0xfffbffff

000026bc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    26bc:	b580      	push	{r7, lr}
    26be:	b084      	sub	sp, #16
    26c0:	af00      	add	r7, sp, #0
    26c2:	0002      	movs	r2, r0
    26c4:	6039      	str	r1, [r7, #0]
    26c6:	1dfb      	adds	r3, r7, #7
    26c8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    26ca:	1dfb      	adds	r3, r7, #7
    26cc:	781b      	ldrb	r3, [r3, #0]
    26ce:	0018      	movs	r0, r3
    26d0:	4b0a      	ldr	r3, [pc, #40]	; (26fc <system_pinmux_pin_set_config+0x40>)
    26d2:	4798      	blx	r3
    26d4:	0003      	movs	r3, r0
    26d6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    26d8:	1dfb      	adds	r3, r7, #7
    26da:	781b      	ldrb	r3, [r3, #0]
    26dc:	221f      	movs	r2, #31
    26de:	4013      	ands	r3, r2
    26e0:	2201      	movs	r2, #1
    26e2:	409a      	lsls	r2, r3
    26e4:	0013      	movs	r3, r2
    26e6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    26e8:	683a      	ldr	r2, [r7, #0]
    26ea:	68b9      	ldr	r1, [r7, #8]
    26ec:	68fb      	ldr	r3, [r7, #12]
    26ee:	0018      	movs	r0, r3
    26f0:	4b03      	ldr	r3, [pc, #12]	; (2700 <system_pinmux_pin_set_config+0x44>)
    26f2:	4798      	blx	r3
}
    26f4:	46c0      	nop			; (mov r8, r8)
    26f6:	46bd      	mov	sp, r7
    26f8:	b004      	add	sp, #16
    26fa:	bd80      	pop	{r7, pc}
    26fc:	0000254d 	.word	0x0000254d
    2700:	000025ad 	.word	0x000025ad

00002704 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    2704:	b580      	push	{r7, lr}
    2706:	af00      	add	r7, sp, #0
	return;
    2708:	46c0      	nop			; (mov r8, r8)
}
    270a:	46bd      	mov	sp, r7
    270c:	bd80      	pop	{r7, pc}
    270e:	46c0      	nop			; (mov r8, r8)

00002710 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2710:	b580      	push	{r7, lr}
    2712:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2714:	4b06      	ldr	r3, [pc, #24]	; (2730 <system_init+0x20>)
    2716:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2718:	4b06      	ldr	r3, [pc, #24]	; (2734 <system_init+0x24>)
    271a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    271c:	4b06      	ldr	r3, [pc, #24]	; (2738 <system_init+0x28>)
    271e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2720:	4b06      	ldr	r3, [pc, #24]	; (273c <system_init+0x2c>)
    2722:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2724:	4b06      	ldr	r3, [pc, #24]	; (2740 <system_init+0x30>)
    2726:	4798      	blx	r3
}
    2728:	46c0      	nop			; (mov r8, r8)
    272a:	46bd      	mov	sp, r7
    272c:	bd80      	pop	{r7, pc}
    272e:	46c0      	nop			; (mov r8, r8)
    2730:	00001eb9 	.word	0x00001eb9
    2734:	00000115 	.word	0x00000115
    2738:	00002705 	.word	0x00002705
    273c:	00002705 	.word	0x00002705
    2740:	00002705 	.word	0x00002705

00002744 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2744:	b580      	push	{r7, lr}
    2746:	b082      	sub	sp, #8
    2748:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    274a:	4b2f      	ldr	r3, [pc, #188]	; (2808 <Reset_Handler+0xc4>)
    274c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    274e:	4b2f      	ldr	r3, [pc, #188]	; (280c <Reset_Handler+0xc8>)
    2750:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    2752:	687a      	ldr	r2, [r7, #4]
    2754:	683b      	ldr	r3, [r7, #0]
    2756:	429a      	cmp	r2, r3
    2758:	d00c      	beq.n	2774 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    275a:	e007      	b.n	276c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    275c:	683b      	ldr	r3, [r7, #0]
    275e:	1d1a      	adds	r2, r3, #4
    2760:	603a      	str	r2, [r7, #0]
    2762:	687a      	ldr	r2, [r7, #4]
    2764:	1d11      	adds	r1, r2, #4
    2766:	6079      	str	r1, [r7, #4]
    2768:	6812      	ldr	r2, [r2, #0]
    276a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    276c:	683a      	ldr	r2, [r7, #0]
    276e:	4b28      	ldr	r3, [pc, #160]	; (2810 <Reset_Handler+0xcc>)
    2770:	429a      	cmp	r2, r3
    2772:	d3f3      	bcc.n	275c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2774:	4b27      	ldr	r3, [pc, #156]	; (2814 <Reset_Handler+0xd0>)
    2776:	603b      	str	r3, [r7, #0]
    2778:	e004      	b.n	2784 <Reset_Handler+0x40>
                *pDest++ = 0;
    277a:	683b      	ldr	r3, [r7, #0]
    277c:	1d1a      	adds	r2, r3, #4
    277e:	603a      	str	r2, [r7, #0]
    2780:	2200      	movs	r2, #0
    2782:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2784:	683a      	ldr	r2, [r7, #0]
    2786:	4b24      	ldr	r3, [pc, #144]	; (2818 <Reset_Handler+0xd4>)
    2788:	429a      	cmp	r2, r3
    278a:	d3f6      	bcc.n	277a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    278c:	4b23      	ldr	r3, [pc, #140]	; (281c <Reset_Handler+0xd8>)
    278e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2790:	4b23      	ldr	r3, [pc, #140]	; (2820 <Reset_Handler+0xdc>)
    2792:	687a      	ldr	r2, [r7, #4]
    2794:	21ff      	movs	r1, #255	; 0xff
    2796:	438a      	bics	r2, r1
    2798:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    279a:	4a22      	ldr	r2, [pc, #136]	; (2824 <Reset_Handler+0xe0>)
    279c:	2390      	movs	r3, #144	; 0x90
    279e:	005b      	lsls	r3, r3, #1
    27a0:	2102      	movs	r1, #2
    27a2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    27a4:	4a20      	ldr	r2, [pc, #128]	; (2828 <Reset_Handler+0xe4>)
    27a6:	78d3      	ldrb	r3, [r2, #3]
    27a8:	2103      	movs	r1, #3
    27aa:	438b      	bics	r3, r1
    27ac:	1c19      	adds	r1, r3, #0
    27ae:	2302      	movs	r3, #2
    27b0:	430b      	orrs	r3, r1
    27b2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    27b4:	4a1c      	ldr	r2, [pc, #112]	; (2828 <Reset_Handler+0xe4>)
    27b6:	78d3      	ldrb	r3, [r2, #3]
    27b8:	210c      	movs	r1, #12
    27ba:	438b      	bics	r3, r1
    27bc:	1c19      	adds	r1, r3, #0
    27be:	2308      	movs	r3, #8
    27c0:	430b      	orrs	r3, r1
    27c2:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    27c4:	4a19      	ldr	r2, [pc, #100]	; (282c <Reset_Handler+0xe8>)
    27c6:	7b93      	ldrb	r3, [r2, #14]
    27c8:	2130      	movs	r1, #48	; 0x30
    27ca:	438b      	bics	r3, r1
    27cc:	1c19      	adds	r1, r3, #0
    27ce:	2320      	movs	r3, #32
    27d0:	430b      	orrs	r3, r1
    27d2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    27d4:	4a15      	ldr	r2, [pc, #84]	; (282c <Reset_Handler+0xe8>)
    27d6:	7b93      	ldrb	r3, [r2, #14]
    27d8:	210c      	movs	r1, #12
    27da:	438b      	bics	r3, r1
    27dc:	1c19      	adds	r1, r3, #0
    27de:	2308      	movs	r3, #8
    27e0:	430b      	orrs	r3, r1
    27e2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    27e4:	4a11      	ldr	r2, [pc, #68]	; (282c <Reset_Handler+0xe8>)
    27e6:	7b93      	ldrb	r3, [r2, #14]
    27e8:	2103      	movs	r1, #3
    27ea:	438b      	bics	r3, r1
    27ec:	1c19      	adds	r1, r3, #0
    27ee:	2302      	movs	r3, #2
    27f0:	430b      	orrs	r3, r1
    27f2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    27f4:	4a0e      	ldr	r2, [pc, #56]	; (2830 <Reset_Handler+0xec>)
    27f6:	6853      	ldr	r3, [r2, #4]
    27f8:	2180      	movs	r1, #128	; 0x80
    27fa:	430b      	orrs	r3, r1
    27fc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    27fe:	4b0d      	ldr	r3, [pc, #52]	; (2834 <Reset_Handler+0xf0>)
    2800:	4798      	blx	r3

        /* Branch to main function */
        main();
    2802:	4b0d      	ldr	r3, [pc, #52]	; (2838 <Reset_Handler+0xf4>)
    2804:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    2806:	e7fe      	b.n	2806 <Reset_Handler+0xc2>
    2808:	000045ec 	.word	0x000045ec
    280c:	20000000 	.word	0x20000000
    2810:	20000070 	.word	0x20000070
    2814:	20000070 	.word	0x20000070
    2818:	20000138 	.word	0x20000138
    281c:	00000000 	.word	0x00000000
    2820:	e000ed00 	.word	0xe000ed00
    2824:	41007000 	.word	0x41007000
    2828:	41005000 	.word	0x41005000
    282c:	41004800 	.word	0x41004800
    2830:	41004000 	.word	0x41004000
    2834:	00003205 	.word	0x00003205
    2838:	00002f45 	.word	0x00002f45

0000283c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    283c:	b580      	push	{r7, lr}
    283e:	af00      	add	r7, sp, #0
        while (1) {
        }
    2840:	e7fe      	b.n	2840 <Dummy_Handler+0x4>
    2842:	46c0      	nop			; (mov r8, r8)

00002844 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2844:	b580      	push	{r7, lr}
    2846:	b086      	sub	sp, #24
    2848:	af00      	add	r7, sp, #0
    284a:	60f8      	str	r0, [r7, #12]
    284c:	60b9      	str	r1, [r7, #8]
    284e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    2850:	2300      	movs	r3, #0
    2852:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    2854:	68fb      	ldr	r3, [r7, #12]
    2856:	2b00      	cmp	r3, #0
    2858:	d012      	beq.n	2880 <_read+0x3c>
		return -1;
    285a:	2301      	movs	r3, #1
    285c:	425b      	negs	r3, r3
    285e:	e013      	b.n	2888 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    2860:	4b0b      	ldr	r3, [pc, #44]	; (2890 <_read+0x4c>)
    2862:	681a      	ldr	r2, [r3, #0]
    2864:	4b0b      	ldr	r3, [pc, #44]	; (2894 <_read+0x50>)
    2866:	681b      	ldr	r3, [r3, #0]
    2868:	68b9      	ldr	r1, [r7, #8]
    286a:	0018      	movs	r0, r3
    286c:	4790      	blx	r2
		ptr++;
    286e:	68bb      	ldr	r3, [r7, #8]
    2870:	3301      	adds	r3, #1
    2872:	60bb      	str	r3, [r7, #8]
		nChars++;
    2874:	697b      	ldr	r3, [r7, #20]
    2876:	3301      	adds	r3, #1
    2878:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    287a:	687b      	ldr	r3, [r7, #4]
    287c:	3b01      	subs	r3, #1
    287e:	607b      	str	r3, [r7, #4]
    2880:	687b      	ldr	r3, [r7, #4]
    2882:	2b00      	cmp	r3, #0
    2884:	dcec      	bgt.n	2860 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    2886:	697b      	ldr	r3, [r7, #20]
}
    2888:	0018      	movs	r0, r3
    288a:	46bd      	mov	sp, r7
    288c:	b006      	add	sp, #24
    288e:	bd80      	pop	{r7, pc}
    2890:	200000f4 	.word	0x200000f4
    2894:	200000fc 	.word	0x200000fc

00002898 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2898:	b580      	push	{r7, lr}
    289a:	b086      	sub	sp, #24
    289c:	af00      	add	r7, sp, #0
    289e:	60f8      	str	r0, [r7, #12]
    28a0:	60b9      	str	r1, [r7, #8]
    28a2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    28a4:	2300      	movs	r3, #0
    28a6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    28a8:	68fb      	ldr	r3, [r7, #12]
    28aa:	2b01      	cmp	r3, #1
    28ac:	d01d      	beq.n	28ea <_write+0x52>
    28ae:	68fb      	ldr	r3, [r7, #12]
    28b0:	2b02      	cmp	r3, #2
    28b2:	d01a      	beq.n	28ea <_write+0x52>
    28b4:	68fb      	ldr	r3, [r7, #12]
    28b6:	2b03      	cmp	r3, #3
    28b8:	d017      	beq.n	28ea <_write+0x52>
		return -1;
    28ba:	2301      	movs	r3, #1
    28bc:	425b      	negs	r3, r3
    28be:	e018      	b.n	28f2 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    28c0:	4b0e      	ldr	r3, [pc, #56]	; (28fc <_write+0x64>)
    28c2:	681a      	ldr	r2, [r3, #0]
    28c4:	4b0e      	ldr	r3, [pc, #56]	; (2900 <_write+0x68>)
    28c6:	6818      	ldr	r0, [r3, #0]
    28c8:	68bb      	ldr	r3, [r7, #8]
    28ca:	1c59      	adds	r1, r3, #1
    28cc:	60b9      	str	r1, [r7, #8]
    28ce:	781b      	ldrb	r3, [r3, #0]
    28d0:	0019      	movs	r1, r3
    28d2:	4790      	blx	r2
    28d4:	1e03      	subs	r3, r0, #0
    28d6:	da02      	bge.n	28de <_write+0x46>
			return -1;
    28d8:	2301      	movs	r3, #1
    28da:	425b      	negs	r3, r3
    28dc:	e009      	b.n	28f2 <_write+0x5a>
		}
		++nChars;
    28de:	697b      	ldr	r3, [r7, #20]
    28e0:	3301      	adds	r3, #1
    28e2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    28e4:	687b      	ldr	r3, [r7, #4]
    28e6:	3b01      	subs	r3, #1
    28e8:	607b      	str	r3, [r7, #4]
    28ea:	687b      	ldr	r3, [r7, #4]
    28ec:	2b00      	cmp	r3, #0
    28ee:	d1e7      	bne.n	28c0 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    28f0:	697b      	ldr	r3, [r7, #20]
}
    28f2:	0018      	movs	r0, r3
    28f4:	46bd      	mov	sp, r7
    28f6:	b006      	add	sp, #24
    28f8:	bd80      	pop	{r7, pc}
    28fa:	46c0      	nop			; (mov r8, r8)
    28fc:	200000f8 	.word	0x200000f8
    2900:	200000fc 	.word	0x200000fc

00002904 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2904:	b580      	push	{r7, lr}
    2906:	b084      	sub	sp, #16
    2908:	af00      	add	r7, sp, #0
    290a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    290c:	4b0a      	ldr	r3, [pc, #40]	; (2938 <_sbrk+0x34>)
    290e:	681b      	ldr	r3, [r3, #0]
    2910:	2b00      	cmp	r3, #0
    2912:	d102      	bne.n	291a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    2914:	4b08      	ldr	r3, [pc, #32]	; (2938 <_sbrk+0x34>)
    2916:	4a09      	ldr	r2, [pc, #36]	; (293c <_sbrk+0x38>)
    2918:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    291a:	4b07      	ldr	r3, [pc, #28]	; (2938 <_sbrk+0x34>)
    291c:	681b      	ldr	r3, [r3, #0]
    291e:	60fb      	str	r3, [r7, #12]

	heap += incr;
    2920:	4b05      	ldr	r3, [pc, #20]	; (2938 <_sbrk+0x34>)
    2922:	681a      	ldr	r2, [r3, #0]
    2924:	687b      	ldr	r3, [r7, #4]
    2926:	18d2      	adds	r2, r2, r3
    2928:	4b03      	ldr	r3, [pc, #12]	; (2938 <_sbrk+0x34>)
    292a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    292c:	68fb      	ldr	r3, [r7, #12]
}
    292e:	0018      	movs	r0, r3
    2930:	46bd      	mov	sp, r7
    2932:	b004      	add	sp, #16
    2934:	bd80      	pop	{r7, pc}
    2936:	46c0      	nop			; (mov r8, r8)
    2938:	200000d0 	.word	0x200000d0
    293c:	20002138 	.word	0x20002138

00002940 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    2940:	b580      	push	{r7, lr}
    2942:	b082      	sub	sp, #8
    2944:	af00      	add	r7, sp, #0
    2946:	6078      	str	r0, [r7, #4]
	return -1;
    2948:	2301      	movs	r3, #1
    294a:	425b      	negs	r3, r3
}
    294c:	0018      	movs	r0, r3
    294e:	46bd      	mov	sp, r7
    2950:	b002      	add	sp, #8
    2952:	bd80      	pop	{r7, pc}

00002954 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    2954:	b580      	push	{r7, lr}
    2956:	b082      	sub	sp, #8
    2958:	af00      	add	r7, sp, #0
    295a:	6078      	str	r0, [r7, #4]
    295c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    295e:	683b      	ldr	r3, [r7, #0]
    2960:	2280      	movs	r2, #128	; 0x80
    2962:	0192      	lsls	r2, r2, #6
    2964:	605a      	str	r2, [r3, #4]

	return 0;
    2966:	2300      	movs	r3, #0
}
    2968:	0018      	movs	r0, r3
    296a:	46bd      	mov	sp, r7
    296c:	b002      	add	sp, #8
    296e:	bd80      	pop	{r7, pc}

00002970 <_isatty>:

extern int _isatty(int file)
{
    2970:	b580      	push	{r7, lr}
    2972:	b082      	sub	sp, #8
    2974:	af00      	add	r7, sp, #0
    2976:	6078      	str	r0, [r7, #4]
	return 1;
    2978:	2301      	movs	r3, #1
}
    297a:	0018      	movs	r0, r3
    297c:	46bd      	mov	sp, r7
    297e:	b002      	add	sp, #8
    2980:	bd80      	pop	{r7, pc}
    2982:	46c0      	nop			; (mov r8, r8)

00002984 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    2984:	b580      	push	{r7, lr}
    2986:	b084      	sub	sp, #16
    2988:	af00      	add	r7, sp, #0
    298a:	60f8      	str	r0, [r7, #12]
    298c:	60b9      	str	r1, [r7, #8]
    298e:	607a      	str	r2, [r7, #4]
	return 0;
    2990:	2300      	movs	r3, #0
}
    2992:	0018      	movs	r0, r3
    2994:	46bd      	mov	sp, r7
    2996:	b004      	add	sp, #16
    2998:	bd80      	pop	{r7, pc}
    299a:	46c0      	nop			; (mov r8, r8)

0000299c <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
    299c:	b580      	push	{r7, lr}
    299e:	b082      	sub	sp, #8
    29a0:	af00      	add	r7, sp, #0
    29a2:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    29a4:	687b      	ldr	r3, [r7, #4]
    29a6:	2200      	movs	r2, #0
    29a8:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    29aa:	687b      	ldr	r3, [r7, #4]
    29ac:	2201      	movs	r2, #1
    29ae:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    29b0:	4b08      	ldr	r3, [pc, #32]	; (29d4 <nvm_get_config_defaults+0x38>)
    29b2:	685b      	ldr	r3, [r3, #4]
    29b4:	06db      	lsls	r3, r3, #27
    29b6:	0f1b      	lsrs	r3, r3, #28
    29b8:	b2db      	uxtb	r3, r3
    29ba:	001a      	movs	r2, r3
    29bc:	687b      	ldr	r3, [r7, #4]
    29be:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    29c0:	687b      	ldr	r3, [r7, #4]
    29c2:	2200      	movs	r2, #0
    29c4:	70da      	strb	r2, [r3, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    29c6:	687b      	ldr	r3, [r7, #4]
    29c8:	2200      	movs	r2, #0
    29ca:	711a      	strb	r2, [r3, #4]
}
    29cc:	46c0      	nop			; (mov r8, r8)
    29ce:	46bd      	mov	sp, r7
    29d0:	b002      	add	sp, #8
    29d2:	bd80      	pop	{r7, pc}
    29d4:	41004000 	.word	0x41004000

000029d8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    29d8:	b580      	push	{r7, lr}
    29da:	b084      	sub	sp, #16
    29dc:	af00      	add	r7, sp, #0
    29de:	0002      	movs	r2, r0
    29e0:	1dfb      	adds	r3, r7, #7
    29e2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    29e4:	230f      	movs	r3, #15
    29e6:	18fb      	adds	r3, r7, r3
    29e8:	1dfa      	adds	r2, r7, #7
    29ea:	7812      	ldrb	r2, [r2, #0]
    29ec:	09d2      	lsrs	r2, r2, #7
    29ee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    29f0:	230e      	movs	r3, #14
    29f2:	18fb      	adds	r3, r7, r3
    29f4:	1dfa      	adds	r2, r7, #7
    29f6:	7812      	ldrb	r2, [r2, #0]
    29f8:	0952      	lsrs	r2, r2, #5
    29fa:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    29fc:	4b0d      	ldr	r3, [pc, #52]	; (2a34 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    29fe:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2a00:	230f      	movs	r3, #15
    2a02:	18fb      	adds	r3, r7, r3
    2a04:	781b      	ldrb	r3, [r3, #0]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d10f      	bne.n	2a2a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2a0a:	230f      	movs	r3, #15
    2a0c:	18fb      	adds	r3, r7, r3
    2a0e:	781b      	ldrb	r3, [r3, #0]
    2a10:	009b      	lsls	r3, r3, #2
    2a12:	2210      	movs	r2, #16
    2a14:	4694      	mov	ip, r2
    2a16:	44bc      	add	ip, r7
    2a18:	4463      	add	r3, ip
    2a1a:	3b08      	subs	r3, #8
    2a1c:	681a      	ldr	r2, [r3, #0]
    2a1e:	230e      	movs	r3, #14
    2a20:	18fb      	adds	r3, r7, r3
    2a22:	781b      	ldrb	r3, [r3, #0]
    2a24:	01db      	lsls	r3, r3, #7
    2a26:	18d3      	adds	r3, r2, r3
    2a28:	e000      	b.n	2a2c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2a2a:	2300      	movs	r3, #0
	}
}
    2a2c:	0018      	movs	r0, r3
    2a2e:	46bd      	mov	sp, r7
    2a30:	b004      	add	sp, #16
    2a32:	bd80      	pop	{r7, pc}
    2a34:	41004400 	.word	0x41004400

00002a38 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	b082      	sub	sp, #8
    2a3c:	af00      	add	r7, sp, #0
    2a3e:	0002      	movs	r2, r0
    2a40:	1dfb      	adds	r3, r7, #7
    2a42:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2a44:	1dfb      	adds	r3, r7, #7
    2a46:	781b      	ldrb	r3, [r3, #0]
    2a48:	0018      	movs	r0, r3
    2a4a:	4b03      	ldr	r3, [pc, #12]	; (2a58 <port_get_group_from_gpio_pin+0x20>)
    2a4c:	4798      	blx	r3
    2a4e:	0003      	movs	r3, r0
}
    2a50:	0018      	movs	r0, r3
    2a52:	46bd      	mov	sp, r7
    2a54:	b002      	add	sp, #8
    2a56:	bd80      	pop	{r7, pc}
    2a58:	000029d9 	.word	0x000029d9

00002a5c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    2a5c:	b580      	push	{r7, lr}
    2a5e:	b082      	sub	sp, #8
    2a60:	af00      	add	r7, sp, #0
    2a62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2a64:	687b      	ldr	r3, [r7, #4]
    2a66:	2200      	movs	r2, #0
    2a68:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2a6a:	687b      	ldr	r3, [r7, #4]
    2a6c:	2201      	movs	r2, #1
    2a6e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2a70:	687b      	ldr	r3, [r7, #4]
    2a72:	2200      	movs	r2, #0
    2a74:	709a      	strb	r2, [r3, #2]
}
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	46bd      	mov	sp, r7
    2a7a:	b002      	add	sp, #8
    2a7c:	bd80      	pop	{r7, pc}
    2a7e:	46c0      	nop			; (mov r8, r8)

00002a80 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    2a80:	b580      	push	{r7, lr}
    2a82:	b084      	sub	sp, #16
    2a84:	af00      	add	r7, sp, #0
    2a86:	0002      	movs	r2, r0
    2a88:	1dfb      	adds	r3, r7, #7
    2a8a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2a8c:	1dfb      	adds	r3, r7, #7
    2a8e:	781b      	ldrb	r3, [r3, #0]
    2a90:	0018      	movs	r0, r3
    2a92:	4b0b      	ldr	r3, [pc, #44]	; (2ac0 <port_pin_get_input_level+0x40>)
    2a94:	4798      	blx	r3
    2a96:	0003      	movs	r3, r0
    2a98:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2a9a:	1dfb      	adds	r3, r7, #7
    2a9c:	781b      	ldrb	r3, [r3, #0]
    2a9e:	221f      	movs	r2, #31
    2aa0:	4013      	ands	r3, r2
    2aa2:	2201      	movs	r2, #1
    2aa4:	409a      	lsls	r2, r3
    2aa6:	0013      	movs	r3, r2
    2aa8:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    2aaa:	68fb      	ldr	r3, [r7, #12]
    2aac:	6a1b      	ldr	r3, [r3, #32]
    2aae:	68ba      	ldr	r2, [r7, #8]
    2ab0:	4013      	ands	r3, r2
    2ab2:	1e5a      	subs	r2, r3, #1
    2ab4:	4193      	sbcs	r3, r2
    2ab6:	b2db      	uxtb	r3, r3
}
    2ab8:	0018      	movs	r0, r3
    2aba:	46bd      	mov	sp, r7
    2abc:	b004      	add	sp, #16
    2abe:	bd80      	pop	{r7, pc}
    2ac0:	00002a39 	.word	0x00002a39

00002ac4 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    2ac4:	b580      	push	{r7, lr}
    2ac6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    2ac8:	4b04      	ldr	r3, [pc, #16]	; (2adc <system_interrupt_enable_global+0x18>)
    2aca:	2201      	movs	r2, #1
    2acc:	701a      	strb	r2, [r3, #0]
    2ace:	f3bf 8f5f 	dmb	sy
    2ad2:	b662      	cpsie	i
}
    2ad4:	46c0      	nop			; (mov r8, r8)
    2ad6:	46bd      	mov	sp, r7
    2ad8:	bd80      	pop	{r7, pc}
    2ada:	46c0      	nop			; (mov r8, r8)
    2adc:	20000008 	.word	0x20000008

00002ae0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    2ae0:	b580      	push	{r7, lr}
    2ae2:	b082      	sub	sp, #8
    2ae4:	af00      	add	r7, sp, #0
    2ae6:	0002      	movs	r2, r0
    2ae8:	1dfb      	adds	r3, r7, #7
    2aea:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2aec:	4b06      	ldr	r3, [pc, #24]	; (2b08 <system_interrupt_enable+0x28>)
    2aee:	1dfa      	adds	r2, r7, #7
    2af0:	7812      	ldrb	r2, [r2, #0]
    2af2:	0011      	movs	r1, r2
    2af4:	221f      	movs	r2, #31
    2af6:	400a      	ands	r2, r1
    2af8:	2101      	movs	r1, #1
    2afa:	4091      	lsls	r1, r2
    2afc:	000a      	movs	r2, r1
    2afe:	601a      	str	r2, [r3, #0]
}
    2b00:	46c0      	nop			; (mov r8, r8)
    2b02:	46bd      	mov	sp, r7
    2b04:	b002      	add	sp, #8
    2b06:	bd80      	pop	{r7, pc}
    2b08:	e000e100 	.word	0xe000e100

00002b0c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	b084      	sub	sp, #16
    2b10:	af00      	add	r7, sp, #0
    2b12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2b14:	687b      	ldr	r3, [r7, #4]
    2b16:	681b      	ldr	r3, [r3, #0]
    2b18:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2b1a:	68fb      	ldr	r3, [r7, #12]
    2b1c:	69db      	ldr	r3, [r3, #28]
    2b1e:	1e5a      	subs	r2, r3, #1
    2b20:	4193      	sbcs	r3, r2
    2b22:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    2b24:	0018      	movs	r0, r3
    2b26:	46bd      	mov	sp, r7
    2b28:	b004      	add	sp, #16
    2b2a:	bd80      	pop	{r7, pc}

00002b2c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    2b2c:	b580      	push	{r7, lr}
    2b2e:	b082      	sub	sp, #8
    2b30:	af00      	add	r7, sp, #0
    2b32:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2b34:	46c0      	nop			; (mov r8, r8)
    2b36:	687b      	ldr	r3, [r7, #4]
    2b38:	0018      	movs	r0, r3
    2b3a:	4b04      	ldr	r3, [pc, #16]	; (2b4c <_usart_wait_for_sync+0x20>)
    2b3c:	4798      	blx	r3
    2b3e:	1e03      	subs	r3, r0, #0
    2b40:	d1f9      	bne.n	2b36 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	46bd      	mov	sp, r7
    2b46:	b002      	add	sp, #8
    2b48:	bd80      	pop	{r7, pc}
    2b4a:	46c0      	nop			; (mov r8, r8)
    2b4c:	00002b0d 	.word	0x00002b0d

00002b50 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    2b50:	b580      	push	{r7, lr}
    2b52:	b082      	sub	sp, #8
    2b54:	af00      	add	r7, sp, #0
    2b56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2b58:	687b      	ldr	r3, [r7, #4]
    2b5a:	2280      	movs	r2, #128	; 0x80
    2b5c:	05d2      	lsls	r2, r2, #23
    2b5e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2b60:	687b      	ldr	r3, [r7, #4]
    2b62:	2200      	movs	r2, #0
    2b64:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    2b66:	687b      	ldr	r3, [r7, #4]
    2b68:	22ff      	movs	r2, #255	; 0xff
    2b6a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    2b6c:	687b      	ldr	r3, [r7, #4]
    2b6e:	2200      	movs	r2, #0
    2b70:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2b72:	687b      	ldr	r3, [r7, #4]
    2b74:	2200      	movs	r2, #0
    2b76:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    2b78:	687b      	ldr	r3, [r7, #4]
    2b7a:	2296      	movs	r2, #150	; 0x96
    2b7c:	0192      	lsls	r2, r2, #6
    2b7e:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    2b80:	687b      	ldr	r3, [r7, #4]
    2b82:	2224      	movs	r2, #36	; 0x24
    2b84:	2101      	movs	r1, #1
    2b86:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    2b88:	687b      	ldr	r3, [r7, #4]
    2b8a:	2225      	movs	r2, #37	; 0x25
    2b8c:	2101      	movs	r1, #1
    2b8e:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    2b90:	687b      	ldr	r3, [r7, #4]
    2b92:	2226      	movs	r2, #38	; 0x26
    2b94:	2100      	movs	r1, #0
    2b96:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    2b98:	687b      	ldr	r3, [r7, #4]
    2b9a:	2227      	movs	r2, #39	; 0x27
    2b9c:	2100      	movs	r1, #0
    2b9e:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    2ba0:	687b      	ldr	r3, [r7, #4]
    2ba2:	2200      	movs	r2, #0
    2ba4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	2288      	movs	r2, #136	; 0x88
    2baa:	0352      	lsls	r2, r2, #13
    2bac:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    2bae:	687b      	ldr	r3, [r7, #4]
    2bb0:	222c      	movs	r2, #44	; 0x2c
    2bb2:	2100      	movs	r1, #0
    2bb4:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    2bb6:	687b      	ldr	r3, [r7, #4]
    2bb8:	222d      	movs	r2, #45	; 0x2d
    2bba:	2100      	movs	r1, #0
    2bbc:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	2200      	movs	r2, #0
    2bc2:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2bc4:	687b      	ldr	r3, [r7, #4]
    2bc6:	2200      	movs	r2, #0
    2bc8:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	2200      	movs	r2, #0
    2bce:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    2bd0:	687b      	ldr	r3, [r7, #4]
    2bd2:	2200      	movs	r2, #0
    2bd4:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	2200      	movs	r2, #0
    2bda:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2bdc:	687b      	ldr	r3, [r7, #4]
    2bde:	2200      	movs	r2, #0
    2be0:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2be2:	687b      	ldr	r3, [r7, #4]
    2be4:	2200      	movs	r2, #0
    2be6:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2be8:	687b      	ldr	r3, [r7, #4]
    2bea:	2200      	movs	r2, #0
    2bec:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    2bee:	687b      	ldr	r3, [r7, #4]
    2bf0:	2200      	movs	r2, #0
    2bf2:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2bf4:	687b      	ldr	r3, [r7, #4]
    2bf6:	2200      	movs	r2, #0
    2bf8:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    2bfa:	687b      	ldr	r3, [r7, #4]
    2bfc:	2213      	movs	r2, #19
    2bfe:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2c00:	687b      	ldr	r3, [r7, #4]
    2c02:	2200      	movs	r2, #0
    2c04:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	46bd      	mov	sp, r7
    2c0a:	b002      	add	sp, #8
    2c0c:	bd80      	pop	{r7, pc}
    2c0e:	46c0      	nop			; (mov r8, r8)

00002c10 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    2c10:	b580      	push	{r7, lr}
    2c12:	b084      	sub	sp, #16
    2c14:	af00      	add	r7, sp, #0
    2c16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c18:	687b      	ldr	r3, [r7, #4]
    2c1a:	681b      	ldr	r3, [r3, #0]
    2c1c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2c1e:	687b      	ldr	r3, [r7, #4]
    2c20:	681b      	ldr	r3, [r3, #0]
    2c22:	0018      	movs	r0, r3
    2c24:	4b09      	ldr	r3, [pc, #36]	; (2c4c <usart_enable+0x3c>)
    2c26:	4798      	blx	r3
    2c28:	0003      	movs	r3, r0
    2c2a:	0018      	movs	r0, r3
    2c2c:	4b08      	ldr	r3, [pc, #32]	; (2c50 <usart_enable+0x40>)
    2c2e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2c30:	687b      	ldr	r3, [r7, #4]
    2c32:	0018      	movs	r0, r3
    2c34:	4b07      	ldr	r3, [pc, #28]	; (2c54 <usart_enable+0x44>)
    2c36:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2c38:	68fb      	ldr	r3, [r7, #12]
    2c3a:	681b      	ldr	r3, [r3, #0]
    2c3c:	2202      	movs	r2, #2
    2c3e:	431a      	orrs	r2, r3
    2c40:	68fb      	ldr	r3, [r7, #12]
    2c42:	601a      	str	r2, [r3, #0]
}
    2c44:	46c0      	nop			; (mov r8, r8)
    2c46:	46bd      	mov	sp, r7
    2c48:	b004      	add	sp, #16
    2c4a:	bd80      	pop	{r7, pc}
    2c4c:	00000d45 	.word	0x00000d45
    2c50:	00002ae1 	.word	0x00002ae1
    2c54:	00002b2d 	.word	0x00002b2d

00002c58 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    2c58:	b580      	push	{r7, lr}
    2c5a:	b084      	sub	sp, #16
    2c5c:	af00      	add	r7, sp, #0
    2c5e:	60f8      	str	r0, [r7, #12]
    2c60:	60b9      	str	r1, [r7, #8]
    2c62:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2c64:	687a      	ldr	r2, [r7, #4]
    2c66:	68b9      	ldr	r1, [r7, #8]
    2c68:	68fb      	ldr	r3, [r7, #12]
    2c6a:	0018      	movs	r0, r3
    2c6c:	4b05      	ldr	r3, [pc, #20]	; (2c84 <usart_serial_init+0x2c>)
    2c6e:	4798      	blx	r3
    2c70:	1e03      	subs	r3, r0, #0
    2c72:	d101      	bne.n	2c78 <usart_serial_init+0x20>
		return true;
    2c74:	2301      	movs	r3, #1
    2c76:	e000      	b.n	2c7a <usart_serial_init+0x22>
	}
	else {
		return false;
    2c78:	2300      	movs	r3, #0
	}
}
    2c7a:	0018      	movs	r0, r3
    2c7c:	46bd      	mov	sp, r7
    2c7e:	b004      	add	sp, #16
    2c80:	bd80      	pop	{r7, pc}
    2c82:	46c0      	nop			; (mov r8, r8)
    2c84:	000011fd 	.word	0x000011fd

00002c88 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    2c88:	b580      	push	{r7, lr}
    2c8a:	b082      	sub	sp, #8
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	6078      	str	r0, [r7, #4]
    2c90:	000a      	movs	r2, r1
    2c92:	1cfb      	adds	r3, r7, #3
    2c94:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    2c96:	46c0      	nop			; (mov r8, r8)
    2c98:	1cfb      	adds	r3, r7, #3
    2c9a:	781b      	ldrb	r3, [r3, #0]
    2c9c:	b29a      	uxth	r2, r3
    2c9e:	687b      	ldr	r3, [r7, #4]
    2ca0:	0011      	movs	r1, r2
    2ca2:	0018      	movs	r0, r3
    2ca4:	4b04      	ldr	r3, [pc, #16]	; (2cb8 <usart_serial_putchar+0x30>)
    2ca6:	4798      	blx	r3
    2ca8:	1e03      	subs	r3, r0, #0
    2caa:	d1f5      	bne.n	2c98 <usart_serial_putchar+0x10>

	return STATUS_OK;
    2cac:	2300      	movs	r3, #0
}
    2cae:	0018      	movs	r0, r3
    2cb0:	46bd      	mov	sp, r7
    2cb2:	b002      	add	sp, #8
    2cb4:	bd80      	pop	{r7, pc}
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	00001471 	.word	0x00001471

00002cbc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2cbc:	b580      	push	{r7, lr}
    2cbe:	b084      	sub	sp, #16
    2cc0:	af00      	add	r7, sp, #0
    2cc2:	6078      	str	r0, [r7, #4]
    2cc4:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    2cc6:	230e      	movs	r3, #14
    2cc8:	18fb      	adds	r3, r7, r3
    2cca:	2200      	movs	r2, #0
    2ccc:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	230e      	movs	r3, #14
    2cd2:	18fa      	adds	r2, r7, r3
    2cd4:	687b      	ldr	r3, [r7, #4]
    2cd6:	0011      	movs	r1, r2
    2cd8:	0018      	movs	r0, r3
    2cda:	4b07      	ldr	r3, [pc, #28]	; (2cf8 <usart_serial_getchar+0x3c>)
    2cdc:	4798      	blx	r3
    2cde:	1e03      	subs	r3, r0, #0
    2ce0:	d1f6      	bne.n	2cd0 <usart_serial_getchar+0x14>

	*c = temp;
    2ce2:	230e      	movs	r3, #14
    2ce4:	18fb      	adds	r3, r7, r3
    2ce6:	881b      	ldrh	r3, [r3, #0]
    2ce8:	b2da      	uxtb	r2, r3
    2cea:	683b      	ldr	r3, [r7, #0]
    2cec:	701a      	strb	r2, [r3, #0]
}
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	46bd      	mov	sp, r7
    2cf2:	b004      	add	sp, #16
    2cf4:	bd80      	pop	{r7, pc}
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	000014d5 	.word	0x000014d5

00002cfc <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    2cfc:	b580      	push	{r7, lr}
    2cfe:	b084      	sub	sp, #16
    2d00:	af00      	add	r7, sp, #0
    2d02:	60f8      	str	r0, [r7, #12]
    2d04:	60b9      	str	r1, [r7, #8]
    2d06:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    2d08:	4b10      	ldr	r3, [pc, #64]	; (2d4c <stdio_serial_init+0x50>)
    2d0a:	68fa      	ldr	r2, [r7, #12]
    2d0c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2d0e:	4b10      	ldr	r3, [pc, #64]	; (2d50 <stdio_serial_init+0x54>)
    2d10:	4a10      	ldr	r2, [pc, #64]	; (2d54 <stdio_serial_init+0x58>)
    2d12:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2d14:	4b10      	ldr	r3, [pc, #64]	; (2d58 <stdio_serial_init+0x5c>)
    2d16:	4a11      	ldr	r2, [pc, #68]	; (2d5c <stdio_serial_init+0x60>)
    2d18:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    2d1a:	687a      	ldr	r2, [r7, #4]
    2d1c:	68b9      	ldr	r1, [r7, #8]
    2d1e:	68fb      	ldr	r3, [r7, #12]
    2d20:	0018      	movs	r0, r3
    2d22:	4b0f      	ldr	r3, [pc, #60]	; (2d60 <stdio_serial_init+0x64>)
    2d24:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2d26:	4b0f      	ldr	r3, [pc, #60]	; (2d64 <stdio_serial_init+0x68>)
    2d28:	681b      	ldr	r3, [r3, #0]
    2d2a:	689b      	ldr	r3, [r3, #8]
    2d2c:	2100      	movs	r1, #0
    2d2e:	0018      	movs	r0, r3
    2d30:	4b0d      	ldr	r3, [pc, #52]	; (2d68 <stdio_serial_init+0x6c>)
    2d32:	4798      	blx	r3
	setbuf(stdin, NULL);
    2d34:	4b0b      	ldr	r3, [pc, #44]	; (2d64 <stdio_serial_init+0x68>)
    2d36:	681b      	ldr	r3, [r3, #0]
    2d38:	685b      	ldr	r3, [r3, #4]
    2d3a:	2100      	movs	r1, #0
    2d3c:	0018      	movs	r0, r3
    2d3e:	4b0a      	ldr	r3, [pc, #40]	; (2d68 <stdio_serial_init+0x6c>)
    2d40:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    2d42:	46c0      	nop			; (mov r8, r8)
    2d44:	46bd      	mov	sp, r7
    2d46:	b004      	add	sp, #16
    2d48:	bd80      	pop	{r7, pc}
    2d4a:	46c0      	nop			; (mov r8, r8)
    2d4c:	200000fc 	.word	0x200000fc
    2d50:	200000f8 	.word	0x200000f8
    2d54:	00002c89 	.word	0x00002c89
    2d58:	200000f4 	.word	0x200000f4
    2d5c:	00002cbd 	.word	0x00002cbd
    2d60:	00002c59 	.word	0x00002c59
    2d64:	2000006c 	.word	0x2000006c
    2d68:	00003381 	.word	0x00003381

00002d6c <configure_console>:
#define EDBG_CDC_SERCOM_PINMUX_PAD3  PINMUX_PB11D_SERCOM4_PAD3
#define APP_START_ADDRESS			0x8000
#define FW_STAT						0x7F00
#define BOOT_PIN					PIN_PA04 //pin tied to button for stay in boot mode
static void configure_console(void)
{
    2d6c:	b580      	push	{r7, lr}
    2d6e:	b090      	sub	sp, #64	; 0x40
    2d70:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    2d72:	003b      	movs	r3, r7
    2d74:	0018      	movs	r0, r3
    2d76:	4b13      	ldr	r3, [pc, #76]	; (2dc4 <configure_console+0x58>)
    2d78:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2d7a:	003b      	movs	r3, r7
    2d7c:	22c4      	movs	r2, #196	; 0xc4
    2d7e:	0392      	lsls	r2, r2, #14
    2d80:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2d82:	003b      	movs	r3, r7
    2d84:	2201      	movs	r2, #1
    2d86:	4252      	negs	r2, r2
    2d88:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2d8a:	003b      	movs	r3, r7
    2d8c:	2201      	movs	r2, #1
    2d8e:	4252      	negs	r2, r2
    2d90:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2d92:	003b      	movs	r3, r7
    2d94:	4a0c      	ldr	r2, [pc, #48]	; (2dc8 <configure_console+0x5c>)
    2d96:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2d98:	003b      	movs	r3, r7
    2d9a:	4a0c      	ldr	r2, [pc, #48]	; (2dcc <configure_console+0x60>)
    2d9c:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    2d9e:	003b      	movs	r3, r7
    2da0:	22e1      	movs	r2, #225	; 0xe1
    2da2:	0252      	lsls	r2, r2, #9
    2da4:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
    2da6:	003a      	movs	r2, r7
    2da8:	4909      	ldr	r1, [pc, #36]	; (2dd0 <configure_console+0x64>)
    2daa:	4b0a      	ldr	r3, [pc, #40]	; (2dd4 <configure_console+0x68>)
    2dac:	0018      	movs	r0, r3
    2dae:	4b0a      	ldr	r3, [pc, #40]	; (2dd8 <configure_console+0x6c>)
    2db0:	4798      	blx	r3
	usart_enable(&usart_instance);
    2db2:	4b08      	ldr	r3, [pc, #32]	; (2dd4 <configure_console+0x68>)
    2db4:	0018      	movs	r0, r3
    2db6:	4b09      	ldr	r3, [pc, #36]	; (2ddc <configure_console+0x70>)
    2db8:	4798      	blx	r3
}
    2dba:	46c0      	nop			; (mov r8, r8)
    2dbc:	46bd      	mov	sp, r7
    2dbe:	b010      	add	sp, #64	; 0x40
    2dc0:	bd80      	pop	{r7, pc}
    2dc2:	46c0      	nop			; (mov r8, r8)
    2dc4:	00002b51 	.word	0x00002b51
    2dc8:	002a0003 	.word	0x002a0003
    2dcc:	002b0003 	.word	0x002b0003
    2dd0:	42001800 	.word	0x42001800
    2dd4:	20000100 	.word	0x20000100
    2dd8:	00002cfd 	.word	0x00002cfd
    2ddc:	00002c11 	.word	0x00002c11

00002de0 <getFWStat>:


static Firmware_Status_t getFWStat() {
    2de0:	b580      	push	{r7, lr}
    2de2:	b086      	sub	sp, #24
    2de4:	af00      	add	r7, sp, #0
    2de6:	6078      	str	r0, [r7, #4]
	Firmware_Status_t *fm_nvm = (unsigned int*)FW_STAT;			// Pointer to FW_STAT
    2de8:	23fe      	movs	r3, #254	; 0xfe
    2dea:	01db      	lsls	r3, r3, #7
    2dec:	617b      	str	r3, [r7, #20]
	Firmware_Status_t thisFW = *fm_nvm;				// Read contents of FW_STAT
    2dee:	230c      	movs	r3, #12
    2df0:	18fa      	adds	r2, r7, r3
    2df2:	697b      	ldr	r3, [r7, #20]
    2df4:	0010      	movs	r0, r2
    2df6:	0019      	movs	r1, r3
    2df8:	2307      	movs	r3, #7
    2dfa:	001a      	movs	r2, r3
    2dfc:	4b07      	ldr	r3, [pc, #28]	; (2e1c <getFWStat+0x3c>)
    2dfe:	4798      	blx	r3
	return thisFW;
    2e00:	687a      	ldr	r2, [r7, #4]
    2e02:	230c      	movs	r3, #12
    2e04:	18fb      	adds	r3, r7, r3
    2e06:	0010      	movs	r0, r2
    2e08:	0019      	movs	r1, r3
    2e0a:	2307      	movs	r3, #7
    2e0c:	001a      	movs	r2, r3
    2e0e:	4b03      	ldr	r3, [pc, #12]	; (2e1c <getFWStat+0x3c>)
    2e10:	4798      	blx	r3
}
    2e12:	6878      	ldr	r0, [r7, #4]
    2e14:	46bd      	mov	sp, r7
    2e16:	b006      	add	sp, #24
    2e18:	bd80      	pop	{r7, pc}
    2e1a:	46c0      	nop			; (mov r8, r8)
    2e1c:	00003251 	.word	0x00003251

00002e20 <writeFWStat>:

static void writeFWStat(Firmware_Status_t thisFW) {
    2e20:	b590      	push	{r4, r7, lr}
    2e22:	b095      	sub	sp, #84	; 0x54
    2e24:	af00      	add	r7, sp, #0
    2e26:	003b      	movs	r3, r7
    2e28:	6018      	str	r0, [r3, #0]
    2e2a:	6059      	str	r1, [r3, #4]
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE];
	page_buffer[0] = thisFW.signature[0];
    2e2c:	003b      	movs	r3, r7
    2e2e:	781a      	ldrb	r2, [r3, #0]
    2e30:	230c      	movs	r3, #12
    2e32:	18fb      	adds	r3, r7, r3
    2e34:	701a      	strb	r2, [r3, #0]
	page_buffer[1] = thisFW.signature[1];
    2e36:	003b      	movs	r3, r7
    2e38:	785a      	ldrb	r2, [r3, #1]
    2e3a:	230c      	movs	r3, #12
    2e3c:	18fb      	adds	r3, r7, r3
    2e3e:	705a      	strb	r2, [r3, #1]
	page_buffer[2] = thisFW.signature[2];
    2e40:	003b      	movs	r3, r7
    2e42:	789a      	ldrb	r2, [r3, #2]
    2e44:	230c      	movs	r3, #12
    2e46:	18fb      	adds	r3, r7, r3
    2e48:	709a      	strb	r2, [r3, #2]
	page_buffer[3] = thisFW.signature[3];
    2e4a:	003b      	movs	r3, r7
    2e4c:	78da      	ldrb	r2, [r3, #3]
    2e4e:	230c      	movs	r3, #12
    2e50:	18fb      	adds	r3, r7, r3
    2e52:	70da      	strb	r2, [r3, #3]
	page_buffer[4] = thisFW.executing_image;
    2e54:	003b      	movs	r3, r7
    2e56:	791a      	ldrb	r2, [r3, #4]
    2e58:	230c      	movs	r3, #12
    2e5a:	18fb      	adds	r3, r7, r3
    2e5c:	711a      	strb	r2, [r3, #4]
	page_buffer[5] = thisFW.downloaded_image;
    2e5e:	003b      	movs	r3, r7
    2e60:	795a      	ldrb	r2, [r3, #5]
    2e62:	230c      	movs	r3, #12
    2e64:	18fb      	adds	r3, r7, r3
    2e66:	715a      	strb	r2, [r3, #5]
	page_buffer[6] = thisFW.writenew_image;
    2e68:	003b      	movs	r3, r7
    2e6a:	799a      	ldrb	r2, [r3, #6]
    2e6c:	230c      	movs	r3, #12
    2e6e:	18fb      	adds	r3, r7, r3
    2e70:	719a      	strb	r2, [r3, #6]
	
	enum status_code error_code;
	do
	{
		error_code = nvm_erase_row(FW_STAT);			// Erase FW stat row
    2e72:	234f      	movs	r3, #79	; 0x4f
    2e74:	18fc      	adds	r4, r7, r3
    2e76:	23fe      	movs	r3, #254	; 0xfe
    2e78:	01db      	lsls	r3, r3, #7
    2e7a:	0018      	movs	r0, r3
    2e7c:	4b0e      	ldr	r3, [pc, #56]	; (2eb8 <writeFWStat+0x98>)
    2e7e:	4798      	blx	r3
    2e80:	0003      	movs	r3, r0
    2e82:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    2e84:	234f      	movs	r3, #79	; 0x4f
    2e86:	18fb      	adds	r3, r7, r3
    2e88:	781b      	ldrb	r3, [r3, #0]
    2e8a:	2b05      	cmp	r3, #5
    2e8c:	d0f1      	beq.n	2e72 <writeFWStat+0x52>
	
	do 
	{ 
		error_code = nvm_write_buffer(FW_STAT, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
    2e8e:	234f      	movs	r3, #79	; 0x4f
    2e90:	18fc      	adds	r4, r7, r3
    2e92:	230c      	movs	r3, #12
    2e94:	18f9      	adds	r1, r7, r3
    2e96:	23fe      	movs	r3, #254	; 0xfe
    2e98:	01db      	lsls	r3, r3, #7
    2e9a:	2240      	movs	r2, #64	; 0x40
    2e9c:	0018      	movs	r0, r3
    2e9e:	4b07      	ldr	r3, [pc, #28]	; (2ebc <writeFWStat+0x9c>)
    2ea0:	4798      	blx	r3
    2ea2:	0003      	movs	r3, r0
    2ea4:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    2ea6:	234f      	movs	r3, #79	; 0x4f
    2ea8:	18fb      	adds	r3, r7, r3
    2eaa:	781b      	ldrb	r3, [r3, #0]
    2eac:	2b05      	cmp	r3, #5
    2eae:	d0ee      	beq.n	2e8e <writeFWStat+0x6e>
}
    2eb0:	46c0      	nop			; (mov r8, r8)
    2eb2:	46bd      	mov	sp, r7
    2eb4:	b015      	add	sp, #84	; 0x54
    2eb6:	bd90      	pop	{r4, r7, pc}
    2eb8:	000005d5 	.word	0x000005d5
    2ebc:	00000481 	.word	0x00000481

00002ec0 <upgradeFW>:

static void upgradeFW(Firmware_Status_t thisFW){
    2ec0:	b580      	push	{r7, lr}
    2ec2:	b082      	sub	sp, #8
    2ec4:	af00      	add	r7, sp, #0
    2ec6:	003b      	movs	r3, r7
    2ec8:	6018      	str	r0, [r3, #0]
    2eca:	6059      	str	r1, [r3, #4]
	printf("Upgrading firmware from location %d.\n", thisFW.downloaded_image);
    2ecc:	003b      	movs	r3, r7
    2ece:	795b      	ldrb	r3, [r3, #5]
    2ed0:	001a      	movs	r2, r3
    2ed2:	4b0c      	ldr	r3, [pc, #48]	; (2f04 <upgradeFW+0x44>)
    2ed4:	0011      	movs	r1, r2
    2ed6:	0018      	movs	r0, r3
    2ed8:	4b0b      	ldr	r3, [pc, #44]	; (2f08 <upgradeFW+0x48>)
    2eda:	4798      	blx	r3
	// upgrade firmware
	thisFW.executing_image = thisFW.downloaded_image;
    2edc:	003b      	movs	r3, r7
    2ede:	795a      	ldrb	r2, [r3, #5]
    2ee0:	003b      	movs	r3, r7
    2ee2:	711a      	strb	r2, [r3, #4]
	thisFW.writenew_image = 0;
    2ee4:	003b      	movs	r3, r7
    2ee6:	2200      	movs	r2, #0
    2ee8:	719a      	strb	r2, [r3, #6]
	writeFWStat(thisFW);
    2eea:	003b      	movs	r3, r7
    2eec:	6818      	ldr	r0, [r3, #0]
    2eee:	6859      	ldr	r1, [r3, #4]
    2ef0:	4b06      	ldr	r3, [pc, #24]	; (2f0c <upgradeFW+0x4c>)
    2ef2:	4798      	blx	r3
	printf("Upgrade complete\n");
    2ef4:	4b06      	ldr	r3, [pc, #24]	; (2f10 <upgradeFW+0x50>)
    2ef6:	0018      	movs	r0, r3
    2ef8:	4b06      	ldr	r3, [pc, #24]	; (2f14 <upgradeFW+0x54>)
    2efa:	4798      	blx	r3
}
    2efc:	46c0      	nop			; (mov r8, r8)
    2efe:	46bd      	mov	sp, r7
    2f00:	b002      	add	sp, #8
    2f02:	bd80      	pop	{r7, pc}
    2f04:	000044b8 	.word	0x000044b8
    2f08:	00003275 	.word	0x00003275
    2f0c:	00002e21 	.word	0x00002e21
    2f10:	000044e0 	.word	0x000044e0
    2f14:	0000336d 	.word	0x0000336d

00002f18 <configure_nvm>:

static void configure_nvm() {
    2f18:	b580      	push	{r7, lr}
    2f1a:	b082      	sub	sp, #8
    2f1c:	af00      	add	r7, sp, #0
	struct nvm_config config;
	nvm_get_config_defaults(&config);
    2f1e:	003b      	movs	r3, r7
    2f20:	0018      	movs	r0, r3
    2f22:	4b06      	ldr	r3, [pc, #24]	; (2f3c <configure_nvm+0x24>)
    2f24:	4798      	blx	r3
	config.manual_page_write = false;
    2f26:	003b      	movs	r3, r7
    2f28:	2200      	movs	r2, #0
    2f2a:	705a      	strb	r2, [r3, #1]
	nvm_set_config(&config);
    2f2c:	003b      	movs	r3, r7
    2f2e:	0018      	movs	r0, r3
    2f30:	4b03      	ldr	r3, [pc, #12]	; (2f40 <configure_nvm+0x28>)
    2f32:	4798      	blx	r3
}
    2f34:	46c0      	nop			; (mov r8, r8)
    2f36:	46bd      	mov	sp, r7
    2f38:	b002      	add	sp, #8
    2f3a:	bd80      	pop	{r7, pc}
    2f3c:	0000299d 	.word	0x0000299d
    2f40:	00000291 	.word	0x00000291

00002f44 <main>:

int main (void)
{
    2f44:	b580      	push	{r7, lr}
    2f46:	b086      	sub	sp, #24
    2f48:	af00      	add	r7, sp, #0
	
	system_init();
    2f4a:	4b40      	ldr	r3, [pc, #256]	; (304c <main+0x108>)
    2f4c:	4798      	blx	r3
	system_interrupt_enable_global();
    2f4e:	4b40      	ldr	r3, [pc, #256]	; (3050 <main+0x10c>)
    2f50:	4798      	blx	r3
	delay_init();
    2f52:	4b40      	ldr	r3, [pc, #256]	; (3054 <main+0x110>)
    2f54:	4798      	blx	r3
	configure_console();
    2f56:	4b40      	ldr	r3, [pc, #256]	; (3058 <main+0x114>)
    2f58:	4798      	blx	r3
	configure_nvm();
    2f5a:	4b40      	ldr	r3, [pc, #256]	; (305c <main+0x118>)
    2f5c:	4798      	blx	r3
	// boot pin config
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2f5e:	230c      	movs	r3, #12
    2f60:	18fb      	adds	r3, r7, r3
    2f62:	0018      	movs	r0, r3
    2f64:	4b3e      	ldr	r3, [pc, #248]	; (3060 <main+0x11c>)
    2f66:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_INPUT;
    2f68:	230c      	movs	r3, #12
    2f6a:	18fb      	adds	r3, r7, r3
    2f6c:	2200      	movs	r2, #0
    2f6e:	701a      	strb	r2, [r3, #0]
	 port_pin_set_config(BOOT_PIN, &pin_conf);
    2f70:	230c      	movs	r3, #12
    2f72:	18fb      	adds	r3, r7, r3
    2f74:	0019      	movs	r1, r3
    2f76:	2004      	movs	r0, #4
    2f78:	4b3a      	ldr	r3, [pc, #232]	; (3064 <main+0x120>)
    2f7a:	4798      	blx	r3
	printf("Init done.\n");
    2f7c:	4b3a      	ldr	r3, [pc, #232]	; (3068 <main+0x124>)
    2f7e:	0018      	movs	r0, r3
    2f80:	4b3a      	ldr	r3, [pc, #232]	; (306c <main+0x128>)
    2f82:	4798      	blx	r3

	
	
	
	Firmware_Status_t thisFW = getFWStat();
    2f84:	1d3b      	adds	r3, r7, #4
    2f86:	0018      	movs	r0, r3
    2f88:	4b39      	ldr	r3, [pc, #228]	; (3070 <main+0x12c>)
    2f8a:	4798      	blx	r3
	if (thisFW.signature[0] == NULL) {
    2f8c:	1d3b      	adds	r3, r7, #4
    2f8e:	781b      	ldrb	r3, [r3, #0]
    2f90:	2b00      	cmp	r3, #0
    2f92:	d11d      	bne.n	2fd0 <main+0x8c>
		printf("Invalid FW stat, writing default\n");
    2f94:	4b37      	ldr	r3, [pc, #220]	; (3074 <main+0x130>)
    2f96:	0018      	movs	r0, r3
    2f98:	4b34      	ldr	r3, [pc, #208]	; (306c <main+0x128>)
    2f9a:	4798      	blx	r3
		thisFW.signature[0] = 1;
    2f9c:	1d3b      	adds	r3, r7, #4
    2f9e:	2201      	movs	r2, #1
    2fa0:	701a      	strb	r2, [r3, #0]
		thisFW.signature[1] = 2;
    2fa2:	1d3b      	adds	r3, r7, #4
    2fa4:	2202      	movs	r2, #2
    2fa6:	705a      	strb	r2, [r3, #1]
		thisFW.signature[2] = 3;
    2fa8:	1d3b      	adds	r3, r7, #4
    2faa:	2203      	movs	r2, #3
    2fac:	709a      	strb	r2, [r3, #2]
		thisFW.signature[3] = 4;
    2fae:	1d3b      	adds	r3, r7, #4
    2fb0:	2204      	movs	r2, #4
    2fb2:	70da      	strb	r2, [r3, #3]
		thisFW.executing_image = 1;
    2fb4:	1d3b      	adds	r3, r7, #4
    2fb6:	2201      	movs	r2, #1
    2fb8:	711a      	strb	r2, [r3, #4]
		thisFW.downloaded_image = 2;
    2fba:	1d3b      	adds	r3, r7, #4
    2fbc:	2202      	movs	r2, #2
    2fbe:	715a      	strb	r2, [r3, #5]
		thisFW.writenew_image = 0;
    2fc0:	1d3b      	adds	r3, r7, #4
    2fc2:	2200      	movs	r2, #0
    2fc4:	719a      	strb	r2, [r3, #6]
		writeFWStat(thisFW);
    2fc6:	1d3b      	adds	r3, r7, #4
    2fc8:	6818      	ldr	r0, [r3, #0]
    2fca:	6859      	ldr	r1, [r3, #4]
    2fcc:	4b2a      	ldr	r3, [pc, #168]	; (3078 <main+0x134>)
    2fce:	4798      	blx	r3
	//writeFWStat(thisFW);

	void (*app_code_entry)(void);
	while(1)
	{
		uint16_t n=0; uint8_t remain_in_boot = 0;
    2fd0:	2316      	movs	r3, #22
    2fd2:	18fb      	adds	r3, r7, r3
    2fd4:	2200      	movs	r2, #0
    2fd6:	801a      	strh	r2, [r3, #0]
    2fd8:	2315      	movs	r3, #21
    2fda:	18fb      	adds	r3, r7, r3
    2fdc:	2200      	movs	r2, #0
    2fde:	701a      	strb	r2, [r3, #0]
		//check if button is pressed to lock in boot
		while(n++ < 1000)
    2fe0:	e00e      	b.n	3000 <main+0xbc>
		{
			if(!port_pin_get_input_level(BOOT_PIN)) 
    2fe2:	2004      	movs	r0, #4
    2fe4:	4b25      	ldr	r3, [pc, #148]	; (307c <main+0x138>)
    2fe6:	4798      	blx	r3
    2fe8:	0003      	movs	r3, r0
    2fea:	001a      	movs	r2, r3
    2fec:	2301      	movs	r3, #1
    2fee:	4053      	eors	r3, r2
    2ff0:	b2db      	uxtb	r3, r3
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d004      	beq.n	3000 <main+0xbc>
			{
				remain_in_boot =1;
    2ff6:	2315      	movs	r3, #21
    2ff8:	18fb      	adds	r3, r7, r3
    2ffa:	2201      	movs	r2, #1
    2ffc:	701a      	strb	r2, [r3, #0]
				break;
    2ffe:	e009      	b.n	3014 <main+0xd0>
	void (*app_code_entry)(void);
	while(1)
	{
		uint16_t n=0; uint8_t remain_in_boot = 0;
		//check if button is pressed to lock in boot
		while(n++ < 1000)
    3000:	2316      	movs	r3, #22
    3002:	18fb      	adds	r3, r7, r3
    3004:	881b      	ldrh	r3, [r3, #0]
    3006:	2216      	movs	r2, #22
    3008:	18ba      	adds	r2, r7, r2
    300a:	1c59      	adds	r1, r3, #1
    300c:	8011      	strh	r1, [r2, #0]
    300e:	4a1c      	ldr	r2, [pc, #112]	; (3080 <main+0x13c>)
    3010:	4293      	cmp	r3, r2
    3012:	d9e6      	bls.n	2fe2 <main+0x9e>
				remain_in_boot =1;
				break;
			}
		}
		
		if(!remain_in_boot)
    3014:	2315      	movs	r3, #21
    3016:	18fb      	adds	r3, r7, r3
    3018:	781b      	ldrb	r3, [r3, #0]
    301a:	2b00      	cmp	r3, #0
    301c:	d1d8      	bne.n	2fd0 <main+0x8c>
		{
			// check for firmware download requested
			if(thisFW.writenew_image)
    301e:	1d3b      	adds	r3, r7, #4
    3020:	799b      	ldrb	r3, [r3, #6]
    3022:	2b00      	cmp	r3, #0
    3024:	d004      	beq.n	3030 <main+0xec>
			{
				upgradeFW(thisFW);
    3026:	1d3b      	adds	r3, r7, #4
    3028:	6818      	ldr	r0, [r3, #0]
    302a:	6859      	ldr	r1, [r3, #4]
    302c:	4b15      	ldr	r3, [pc, #84]	; (3084 <main+0x140>)
    302e:	4798      	blx	r3
			}
			
			// vector table rebasing
			SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    3030:	4b15      	ldr	r3, [pc, #84]	; (3088 <main+0x144>)
    3032:	2280      	movs	r2, #128	; 0x80
    3034:	0212      	lsls	r2, r2, #8
    3036:	609a      	str	r2, [r3, #8]

			// jump to reset handler
			app_code_entry =  (void(*)(void))(*(unsigned int*)(APP_START_ADDRESS+4));
    3038:	4b14      	ldr	r3, [pc, #80]	; (308c <main+0x148>)
    303a:	681b      	ldr	r3, [r3, #0]
    303c:	613b      	str	r3, [r7, #16]
			// jump
			printf("Starting app\n");
    303e:	4b14      	ldr	r3, [pc, #80]	; (3090 <main+0x14c>)
    3040:	0018      	movs	r0, r3
    3042:	4b0a      	ldr	r3, [pc, #40]	; (306c <main+0x128>)
    3044:	4798      	blx	r3
			app_code_entry();
    3046:	693b      	ldr	r3, [r7, #16]
    3048:	4798      	blx	r3
		}

	}
    304a:	e7c1      	b.n	2fd0 <main+0x8c>
    304c:	00002711 	.word	0x00002711
    3050:	00002ac5 	.word	0x00002ac5
    3054:	00000121 	.word	0x00000121
    3058:	00002d6d 	.word	0x00002d6d
    305c:	00002f19 	.word	0x00002f19
    3060:	00002a5d 	.word	0x00002a5d
    3064:	00000699 	.word	0x00000699
    3068:	000044f4 	.word	0x000044f4
    306c:	0000336d 	.word	0x0000336d
    3070:	00002de1 	.word	0x00002de1
    3074:	00004500 	.word	0x00004500
    3078:	00002e21 	.word	0x00002e21
    307c:	00002a81 	.word	0x00002a81
    3080:	000003e7 	.word	0x000003e7
    3084:	00002ec1 	.word	0x00002ec1
    3088:	e000ed00 	.word	0xe000ed00
    308c:	00008004 	.word	0x00008004
    3090:	00004524 	.word	0x00004524

00003094 <__aeabi_uidiv>:
    3094:	2200      	movs	r2, #0
    3096:	0843      	lsrs	r3, r0, #1
    3098:	428b      	cmp	r3, r1
    309a:	d374      	bcc.n	3186 <__aeabi_uidiv+0xf2>
    309c:	0903      	lsrs	r3, r0, #4
    309e:	428b      	cmp	r3, r1
    30a0:	d35f      	bcc.n	3162 <__aeabi_uidiv+0xce>
    30a2:	0a03      	lsrs	r3, r0, #8
    30a4:	428b      	cmp	r3, r1
    30a6:	d344      	bcc.n	3132 <__aeabi_uidiv+0x9e>
    30a8:	0b03      	lsrs	r3, r0, #12
    30aa:	428b      	cmp	r3, r1
    30ac:	d328      	bcc.n	3100 <__aeabi_uidiv+0x6c>
    30ae:	0c03      	lsrs	r3, r0, #16
    30b0:	428b      	cmp	r3, r1
    30b2:	d30d      	bcc.n	30d0 <__aeabi_uidiv+0x3c>
    30b4:	22ff      	movs	r2, #255	; 0xff
    30b6:	0209      	lsls	r1, r1, #8
    30b8:	ba12      	rev	r2, r2
    30ba:	0c03      	lsrs	r3, r0, #16
    30bc:	428b      	cmp	r3, r1
    30be:	d302      	bcc.n	30c6 <__aeabi_uidiv+0x32>
    30c0:	1212      	asrs	r2, r2, #8
    30c2:	0209      	lsls	r1, r1, #8
    30c4:	d065      	beq.n	3192 <__aeabi_uidiv+0xfe>
    30c6:	0b03      	lsrs	r3, r0, #12
    30c8:	428b      	cmp	r3, r1
    30ca:	d319      	bcc.n	3100 <__aeabi_uidiv+0x6c>
    30cc:	e000      	b.n	30d0 <__aeabi_uidiv+0x3c>
    30ce:	0a09      	lsrs	r1, r1, #8
    30d0:	0bc3      	lsrs	r3, r0, #15
    30d2:	428b      	cmp	r3, r1
    30d4:	d301      	bcc.n	30da <__aeabi_uidiv+0x46>
    30d6:	03cb      	lsls	r3, r1, #15
    30d8:	1ac0      	subs	r0, r0, r3
    30da:	4152      	adcs	r2, r2
    30dc:	0b83      	lsrs	r3, r0, #14
    30de:	428b      	cmp	r3, r1
    30e0:	d301      	bcc.n	30e6 <__aeabi_uidiv+0x52>
    30e2:	038b      	lsls	r3, r1, #14
    30e4:	1ac0      	subs	r0, r0, r3
    30e6:	4152      	adcs	r2, r2
    30e8:	0b43      	lsrs	r3, r0, #13
    30ea:	428b      	cmp	r3, r1
    30ec:	d301      	bcc.n	30f2 <__aeabi_uidiv+0x5e>
    30ee:	034b      	lsls	r3, r1, #13
    30f0:	1ac0      	subs	r0, r0, r3
    30f2:	4152      	adcs	r2, r2
    30f4:	0b03      	lsrs	r3, r0, #12
    30f6:	428b      	cmp	r3, r1
    30f8:	d301      	bcc.n	30fe <__aeabi_uidiv+0x6a>
    30fa:	030b      	lsls	r3, r1, #12
    30fc:	1ac0      	subs	r0, r0, r3
    30fe:	4152      	adcs	r2, r2
    3100:	0ac3      	lsrs	r3, r0, #11
    3102:	428b      	cmp	r3, r1
    3104:	d301      	bcc.n	310a <__aeabi_uidiv+0x76>
    3106:	02cb      	lsls	r3, r1, #11
    3108:	1ac0      	subs	r0, r0, r3
    310a:	4152      	adcs	r2, r2
    310c:	0a83      	lsrs	r3, r0, #10
    310e:	428b      	cmp	r3, r1
    3110:	d301      	bcc.n	3116 <__aeabi_uidiv+0x82>
    3112:	028b      	lsls	r3, r1, #10
    3114:	1ac0      	subs	r0, r0, r3
    3116:	4152      	adcs	r2, r2
    3118:	0a43      	lsrs	r3, r0, #9
    311a:	428b      	cmp	r3, r1
    311c:	d301      	bcc.n	3122 <__aeabi_uidiv+0x8e>
    311e:	024b      	lsls	r3, r1, #9
    3120:	1ac0      	subs	r0, r0, r3
    3122:	4152      	adcs	r2, r2
    3124:	0a03      	lsrs	r3, r0, #8
    3126:	428b      	cmp	r3, r1
    3128:	d301      	bcc.n	312e <__aeabi_uidiv+0x9a>
    312a:	020b      	lsls	r3, r1, #8
    312c:	1ac0      	subs	r0, r0, r3
    312e:	4152      	adcs	r2, r2
    3130:	d2cd      	bcs.n	30ce <__aeabi_uidiv+0x3a>
    3132:	09c3      	lsrs	r3, r0, #7
    3134:	428b      	cmp	r3, r1
    3136:	d301      	bcc.n	313c <__aeabi_uidiv+0xa8>
    3138:	01cb      	lsls	r3, r1, #7
    313a:	1ac0      	subs	r0, r0, r3
    313c:	4152      	adcs	r2, r2
    313e:	0983      	lsrs	r3, r0, #6
    3140:	428b      	cmp	r3, r1
    3142:	d301      	bcc.n	3148 <__aeabi_uidiv+0xb4>
    3144:	018b      	lsls	r3, r1, #6
    3146:	1ac0      	subs	r0, r0, r3
    3148:	4152      	adcs	r2, r2
    314a:	0943      	lsrs	r3, r0, #5
    314c:	428b      	cmp	r3, r1
    314e:	d301      	bcc.n	3154 <__aeabi_uidiv+0xc0>
    3150:	014b      	lsls	r3, r1, #5
    3152:	1ac0      	subs	r0, r0, r3
    3154:	4152      	adcs	r2, r2
    3156:	0903      	lsrs	r3, r0, #4
    3158:	428b      	cmp	r3, r1
    315a:	d301      	bcc.n	3160 <__aeabi_uidiv+0xcc>
    315c:	010b      	lsls	r3, r1, #4
    315e:	1ac0      	subs	r0, r0, r3
    3160:	4152      	adcs	r2, r2
    3162:	08c3      	lsrs	r3, r0, #3
    3164:	428b      	cmp	r3, r1
    3166:	d301      	bcc.n	316c <__aeabi_uidiv+0xd8>
    3168:	00cb      	lsls	r3, r1, #3
    316a:	1ac0      	subs	r0, r0, r3
    316c:	4152      	adcs	r2, r2
    316e:	0883      	lsrs	r3, r0, #2
    3170:	428b      	cmp	r3, r1
    3172:	d301      	bcc.n	3178 <__aeabi_uidiv+0xe4>
    3174:	008b      	lsls	r3, r1, #2
    3176:	1ac0      	subs	r0, r0, r3
    3178:	4152      	adcs	r2, r2
    317a:	0843      	lsrs	r3, r0, #1
    317c:	428b      	cmp	r3, r1
    317e:	d301      	bcc.n	3184 <__aeabi_uidiv+0xf0>
    3180:	004b      	lsls	r3, r1, #1
    3182:	1ac0      	subs	r0, r0, r3
    3184:	4152      	adcs	r2, r2
    3186:	1a41      	subs	r1, r0, r1
    3188:	d200      	bcs.n	318c <__aeabi_uidiv+0xf8>
    318a:	4601      	mov	r1, r0
    318c:	4152      	adcs	r2, r2
    318e:	4610      	mov	r0, r2
    3190:	4770      	bx	lr
    3192:	e7ff      	b.n	3194 <__aeabi_uidiv+0x100>
    3194:	b501      	push	{r0, lr}
    3196:	2000      	movs	r0, #0
    3198:	f000 f806 	bl	31a8 <__aeabi_idiv0>
    319c:	bd02      	pop	{r1, pc}
    319e:	46c0      	nop			; (mov r8, r8)

000031a0 <__aeabi_uidivmod>:
    31a0:	2900      	cmp	r1, #0
    31a2:	d0f7      	beq.n	3194 <__aeabi_uidiv+0x100>
    31a4:	e776      	b.n	3094 <__aeabi_uidiv>
    31a6:	4770      	bx	lr

000031a8 <__aeabi_idiv0>:
    31a8:	4770      	bx	lr
    31aa:	46c0      	nop			; (mov r8, r8)

000031ac <__aeabi_lmul>:
    31ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ae:	464f      	mov	r7, r9
    31b0:	4646      	mov	r6, r8
    31b2:	b4c0      	push	{r6, r7}
    31b4:	0416      	lsls	r6, r2, #16
    31b6:	0c36      	lsrs	r6, r6, #16
    31b8:	4699      	mov	r9, r3
    31ba:	0033      	movs	r3, r6
    31bc:	0405      	lsls	r5, r0, #16
    31be:	0c2c      	lsrs	r4, r5, #16
    31c0:	0c07      	lsrs	r7, r0, #16
    31c2:	0c15      	lsrs	r5, r2, #16
    31c4:	4363      	muls	r3, r4
    31c6:	437e      	muls	r6, r7
    31c8:	436f      	muls	r7, r5
    31ca:	4365      	muls	r5, r4
    31cc:	0c1c      	lsrs	r4, r3, #16
    31ce:	19ad      	adds	r5, r5, r6
    31d0:	1964      	adds	r4, r4, r5
    31d2:	469c      	mov	ip, r3
    31d4:	42a6      	cmp	r6, r4
    31d6:	d903      	bls.n	31e0 <__aeabi_lmul+0x34>
    31d8:	2380      	movs	r3, #128	; 0x80
    31da:	025b      	lsls	r3, r3, #9
    31dc:	4698      	mov	r8, r3
    31de:	4447      	add	r7, r8
    31e0:	4663      	mov	r3, ip
    31e2:	0c25      	lsrs	r5, r4, #16
    31e4:	19ef      	adds	r7, r5, r7
    31e6:	041d      	lsls	r5, r3, #16
    31e8:	464b      	mov	r3, r9
    31ea:	434a      	muls	r2, r1
    31ec:	4343      	muls	r3, r0
    31ee:	0c2d      	lsrs	r5, r5, #16
    31f0:	0424      	lsls	r4, r4, #16
    31f2:	1964      	adds	r4, r4, r5
    31f4:	1899      	adds	r1, r3, r2
    31f6:	19c9      	adds	r1, r1, r7
    31f8:	0020      	movs	r0, r4
    31fa:	bc0c      	pop	{r2, r3}
    31fc:	4690      	mov	r8, r2
    31fe:	4699      	mov	r9, r3
    3200:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3202:	46c0      	nop			; (mov r8, r8)

00003204 <__libc_init_array>:
    3204:	4b0e      	ldr	r3, [pc, #56]	; (3240 <__libc_init_array+0x3c>)
    3206:	b570      	push	{r4, r5, r6, lr}
    3208:	2500      	movs	r5, #0
    320a:	001e      	movs	r6, r3
    320c:	4c0d      	ldr	r4, [pc, #52]	; (3244 <__libc_init_array+0x40>)
    320e:	1ae4      	subs	r4, r4, r3
    3210:	10a4      	asrs	r4, r4, #2
    3212:	42a5      	cmp	r5, r4
    3214:	d004      	beq.n	3220 <__libc_init_array+0x1c>
    3216:	00ab      	lsls	r3, r5, #2
    3218:	58f3      	ldr	r3, [r6, r3]
    321a:	4798      	blx	r3
    321c:	3501      	adds	r5, #1
    321e:	e7f8      	b.n	3212 <__libc_init_array+0xe>
    3220:	f001 f9d4 	bl	45cc <_init>
    3224:	4b08      	ldr	r3, [pc, #32]	; (3248 <__libc_init_array+0x44>)
    3226:	2500      	movs	r5, #0
    3228:	001e      	movs	r6, r3
    322a:	4c08      	ldr	r4, [pc, #32]	; (324c <__libc_init_array+0x48>)
    322c:	1ae4      	subs	r4, r4, r3
    322e:	10a4      	asrs	r4, r4, #2
    3230:	42a5      	cmp	r5, r4
    3232:	d004      	beq.n	323e <__libc_init_array+0x3a>
    3234:	00ab      	lsls	r3, r5, #2
    3236:	58f3      	ldr	r3, [r6, r3]
    3238:	4798      	blx	r3
    323a:	3501      	adds	r5, #1
    323c:	e7f8      	b.n	3230 <__libc_init_array+0x2c>
    323e:	bd70      	pop	{r4, r5, r6, pc}
    3240:	000045d8 	.word	0x000045d8
    3244:	000045d8 	.word	0x000045d8
    3248:	000045d8 	.word	0x000045d8
    324c:	000045dc 	.word	0x000045dc

00003250 <memcpy>:
    3250:	2300      	movs	r3, #0
    3252:	b510      	push	{r4, lr}
    3254:	429a      	cmp	r2, r3
    3256:	d003      	beq.n	3260 <memcpy+0x10>
    3258:	5ccc      	ldrb	r4, [r1, r3]
    325a:	54c4      	strb	r4, [r0, r3]
    325c:	3301      	adds	r3, #1
    325e:	e7f9      	b.n	3254 <memcpy+0x4>
    3260:	bd10      	pop	{r4, pc}

00003262 <memset>:
    3262:	0003      	movs	r3, r0
    3264:	1882      	adds	r2, r0, r2
    3266:	4293      	cmp	r3, r2
    3268:	d002      	beq.n	3270 <memset+0xe>
    326a:	7019      	strb	r1, [r3, #0]
    326c:	3301      	adds	r3, #1
    326e:	e7fa      	b.n	3266 <memset+0x4>
    3270:	4770      	bx	lr
	...

00003274 <iprintf>:
    3274:	b40f      	push	{r0, r1, r2, r3}
    3276:	4b0b      	ldr	r3, [pc, #44]	; (32a4 <iprintf+0x30>)
    3278:	b513      	push	{r0, r1, r4, lr}
    327a:	681c      	ldr	r4, [r3, #0]
    327c:	2c00      	cmp	r4, #0
    327e:	d005      	beq.n	328c <iprintf+0x18>
    3280:	69a3      	ldr	r3, [r4, #24]
    3282:	2b00      	cmp	r3, #0
    3284:	d102      	bne.n	328c <iprintf+0x18>
    3286:	0020      	movs	r0, r4
    3288:	f000 faf6 	bl	3878 <__sinit>
    328c:	ab05      	add	r3, sp, #20
    328e:	9a04      	ldr	r2, [sp, #16]
    3290:	68a1      	ldr	r1, [r4, #8]
    3292:	0020      	movs	r0, r4
    3294:	9301      	str	r3, [sp, #4]
    3296:	f000 fcb5 	bl	3c04 <_vfiprintf_r>
    329a:	bc16      	pop	{r1, r2, r4}
    329c:	bc08      	pop	{r3}
    329e:	b004      	add	sp, #16
    32a0:	4718      	bx	r3
    32a2:	46c0      	nop			; (mov r8, r8)
    32a4:	2000006c 	.word	0x2000006c

000032a8 <_puts_r>:
    32a8:	b570      	push	{r4, r5, r6, lr}
    32aa:	0005      	movs	r5, r0
    32ac:	000e      	movs	r6, r1
    32ae:	2800      	cmp	r0, #0
    32b0:	d004      	beq.n	32bc <_puts_r+0x14>
    32b2:	6983      	ldr	r3, [r0, #24]
    32b4:	2b00      	cmp	r3, #0
    32b6:	d101      	bne.n	32bc <_puts_r+0x14>
    32b8:	f000 fade 	bl	3878 <__sinit>
    32bc:	69ab      	ldr	r3, [r5, #24]
    32be:	68ac      	ldr	r4, [r5, #8]
    32c0:	2b00      	cmp	r3, #0
    32c2:	d102      	bne.n	32ca <_puts_r+0x22>
    32c4:	0028      	movs	r0, r5
    32c6:	f000 fad7 	bl	3878 <__sinit>
    32ca:	4b25      	ldr	r3, [pc, #148]	; (3360 <_puts_r+0xb8>)
    32cc:	429c      	cmp	r4, r3
    32ce:	d101      	bne.n	32d4 <_puts_r+0x2c>
    32d0:	686c      	ldr	r4, [r5, #4]
    32d2:	e008      	b.n	32e6 <_puts_r+0x3e>
    32d4:	4b23      	ldr	r3, [pc, #140]	; (3364 <_puts_r+0xbc>)
    32d6:	429c      	cmp	r4, r3
    32d8:	d101      	bne.n	32de <_puts_r+0x36>
    32da:	68ac      	ldr	r4, [r5, #8]
    32dc:	e003      	b.n	32e6 <_puts_r+0x3e>
    32de:	4b22      	ldr	r3, [pc, #136]	; (3368 <_puts_r+0xc0>)
    32e0:	429c      	cmp	r4, r3
    32e2:	d100      	bne.n	32e6 <_puts_r+0x3e>
    32e4:	68ec      	ldr	r4, [r5, #12]
    32e6:	89a3      	ldrh	r3, [r4, #12]
    32e8:	071b      	lsls	r3, r3, #28
    32ea:	d502      	bpl.n	32f2 <_puts_r+0x4a>
    32ec:	6923      	ldr	r3, [r4, #16]
    32ee:	2b00      	cmp	r3, #0
    32f0:	d111      	bne.n	3316 <_puts_r+0x6e>
    32f2:	0021      	movs	r1, r4
    32f4:	0028      	movs	r0, r5
    32f6:	f000 f955 	bl	35a4 <__swsetup_r>
    32fa:	2800      	cmp	r0, #0
    32fc:	d00b      	beq.n	3316 <_puts_r+0x6e>
    32fe:	2001      	movs	r0, #1
    3300:	4240      	negs	r0, r0
    3302:	e02b      	b.n	335c <_puts_r+0xb4>
    3304:	3b01      	subs	r3, #1
    3306:	3601      	adds	r6, #1
    3308:	60a3      	str	r3, [r4, #8]
    330a:	2b00      	cmp	r3, #0
    330c:	db08      	blt.n	3320 <_puts_r+0x78>
    330e:	6823      	ldr	r3, [r4, #0]
    3310:	1c5a      	adds	r2, r3, #1
    3312:	6022      	str	r2, [r4, #0]
    3314:	7019      	strb	r1, [r3, #0]
    3316:	7831      	ldrb	r1, [r6, #0]
    3318:	68a3      	ldr	r3, [r4, #8]
    331a:	2900      	cmp	r1, #0
    331c:	d1f2      	bne.n	3304 <_puts_r+0x5c>
    331e:	e00b      	b.n	3338 <_puts_r+0x90>
    3320:	69a2      	ldr	r2, [r4, #24]
    3322:	4293      	cmp	r3, r2
    3324:	db01      	blt.n	332a <_puts_r+0x82>
    3326:	290a      	cmp	r1, #10
    3328:	d1f1      	bne.n	330e <_puts_r+0x66>
    332a:	0022      	movs	r2, r4
    332c:	0028      	movs	r0, r5
    332e:	f000 f8e1 	bl	34f4 <__swbuf_r>
    3332:	1c43      	adds	r3, r0, #1
    3334:	d1ef      	bne.n	3316 <_puts_r+0x6e>
    3336:	e7e2      	b.n	32fe <_puts_r+0x56>
    3338:	3b01      	subs	r3, #1
    333a:	60a3      	str	r3, [r4, #8]
    333c:	2b00      	cmp	r3, #0
    333e:	da08      	bge.n	3352 <_puts_r+0xaa>
    3340:	0022      	movs	r2, r4
    3342:	310a      	adds	r1, #10
    3344:	0028      	movs	r0, r5
    3346:	f000 f8d5 	bl	34f4 <__swbuf_r>
    334a:	1c43      	adds	r3, r0, #1
    334c:	d0d7      	beq.n	32fe <_puts_r+0x56>
    334e:	200a      	movs	r0, #10
    3350:	e004      	b.n	335c <_puts_r+0xb4>
    3352:	200a      	movs	r0, #10
    3354:	6823      	ldr	r3, [r4, #0]
    3356:	1c5a      	adds	r2, r3, #1
    3358:	6022      	str	r2, [r4, #0]
    335a:	7018      	strb	r0, [r3, #0]
    335c:	bd70      	pop	{r4, r5, r6, pc}
    335e:	46c0      	nop			; (mov r8, r8)
    3360:	00004538 	.word	0x00004538
    3364:	00004558 	.word	0x00004558
    3368:	00004578 	.word	0x00004578

0000336c <puts>:
    336c:	b510      	push	{r4, lr}
    336e:	4b03      	ldr	r3, [pc, #12]	; (337c <puts+0x10>)
    3370:	0001      	movs	r1, r0
    3372:	6818      	ldr	r0, [r3, #0]
    3374:	f7ff ff98 	bl	32a8 <_puts_r>
    3378:	bd10      	pop	{r4, pc}
    337a:	46c0      	nop			; (mov r8, r8)
    337c:	2000006c 	.word	0x2000006c

00003380 <setbuf>:
    3380:	424a      	negs	r2, r1
    3382:	414a      	adcs	r2, r1
    3384:	2380      	movs	r3, #128	; 0x80
    3386:	b510      	push	{r4, lr}
    3388:	0052      	lsls	r2, r2, #1
    338a:	00db      	lsls	r3, r3, #3
    338c:	f000 f802 	bl	3394 <setvbuf>
    3390:	bd10      	pop	{r4, pc}
	...

00003394 <setvbuf>:
    3394:	b5f0      	push	{r4, r5, r6, r7, lr}
    3396:	001d      	movs	r5, r3
    3398:	4b51      	ldr	r3, [pc, #324]	; (34e0 <setvbuf+0x14c>)
    339a:	b085      	sub	sp, #20
    339c:	681e      	ldr	r6, [r3, #0]
    339e:	0004      	movs	r4, r0
    33a0:	000f      	movs	r7, r1
    33a2:	9200      	str	r2, [sp, #0]
    33a4:	2e00      	cmp	r6, #0
    33a6:	d005      	beq.n	33b4 <setvbuf+0x20>
    33a8:	69b3      	ldr	r3, [r6, #24]
    33aa:	2b00      	cmp	r3, #0
    33ac:	d102      	bne.n	33b4 <setvbuf+0x20>
    33ae:	0030      	movs	r0, r6
    33b0:	f000 fa62 	bl	3878 <__sinit>
    33b4:	4b4b      	ldr	r3, [pc, #300]	; (34e4 <setvbuf+0x150>)
    33b6:	429c      	cmp	r4, r3
    33b8:	d101      	bne.n	33be <setvbuf+0x2a>
    33ba:	6874      	ldr	r4, [r6, #4]
    33bc:	e008      	b.n	33d0 <setvbuf+0x3c>
    33be:	4b4a      	ldr	r3, [pc, #296]	; (34e8 <setvbuf+0x154>)
    33c0:	429c      	cmp	r4, r3
    33c2:	d101      	bne.n	33c8 <setvbuf+0x34>
    33c4:	68b4      	ldr	r4, [r6, #8]
    33c6:	e003      	b.n	33d0 <setvbuf+0x3c>
    33c8:	4b48      	ldr	r3, [pc, #288]	; (34ec <setvbuf+0x158>)
    33ca:	429c      	cmp	r4, r3
    33cc:	d100      	bne.n	33d0 <setvbuf+0x3c>
    33ce:	68f4      	ldr	r4, [r6, #12]
    33d0:	9b00      	ldr	r3, [sp, #0]
    33d2:	2b02      	cmp	r3, #2
    33d4:	d005      	beq.n	33e2 <setvbuf+0x4e>
    33d6:	2b01      	cmp	r3, #1
    33d8:	d900      	bls.n	33dc <setvbuf+0x48>
    33da:	e07c      	b.n	34d6 <setvbuf+0x142>
    33dc:	2d00      	cmp	r5, #0
    33de:	da00      	bge.n	33e2 <setvbuf+0x4e>
    33e0:	e079      	b.n	34d6 <setvbuf+0x142>
    33e2:	0021      	movs	r1, r4
    33e4:	0030      	movs	r0, r6
    33e6:	f000 f9d9 	bl	379c <_fflush_r>
    33ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
    33ec:	2900      	cmp	r1, #0
    33ee:	d008      	beq.n	3402 <setvbuf+0x6e>
    33f0:	0023      	movs	r3, r4
    33f2:	3344      	adds	r3, #68	; 0x44
    33f4:	4299      	cmp	r1, r3
    33f6:	d002      	beq.n	33fe <setvbuf+0x6a>
    33f8:	0030      	movs	r0, r6
    33fa:	f000 fb3f 	bl	3a7c <_free_r>
    33fe:	2300      	movs	r3, #0
    3400:	6363      	str	r3, [r4, #52]	; 0x34
    3402:	2300      	movs	r3, #0
    3404:	61a3      	str	r3, [r4, #24]
    3406:	6063      	str	r3, [r4, #4]
    3408:	89a3      	ldrh	r3, [r4, #12]
    340a:	061b      	lsls	r3, r3, #24
    340c:	d503      	bpl.n	3416 <setvbuf+0x82>
    340e:	6921      	ldr	r1, [r4, #16]
    3410:	0030      	movs	r0, r6
    3412:	f000 fb33 	bl	3a7c <_free_r>
    3416:	89a2      	ldrh	r2, [r4, #12]
    3418:	4b35      	ldr	r3, [pc, #212]	; (34f0 <setvbuf+0x15c>)
    341a:	4013      	ands	r3, r2
    341c:	81a3      	strh	r3, [r4, #12]
    341e:	9b00      	ldr	r3, [sp, #0]
    3420:	2b02      	cmp	r3, #2
    3422:	d021      	beq.n	3468 <setvbuf+0xd4>
    3424:	ab03      	add	r3, sp, #12
    3426:	aa02      	add	r2, sp, #8
    3428:	0021      	movs	r1, r4
    342a:	0030      	movs	r0, r6
    342c:	f000 fab8 	bl	39a0 <__swhatbuf_r>
    3430:	89a3      	ldrh	r3, [r4, #12]
    3432:	4318      	orrs	r0, r3
    3434:	81a0      	strh	r0, [r4, #12]
    3436:	2d00      	cmp	r5, #0
    3438:	d101      	bne.n	343e <setvbuf+0xaa>
    343a:	9d02      	ldr	r5, [sp, #8]
    343c:	e001      	b.n	3442 <setvbuf+0xae>
    343e:	2f00      	cmp	r7, #0
    3440:	d125      	bne.n	348e <setvbuf+0xfa>
    3442:	0028      	movs	r0, r5
    3444:	f000 fb10 	bl	3a68 <malloc>
    3448:	9501      	str	r5, [sp, #4]
    344a:	1e07      	subs	r7, r0, #0
    344c:	d11a      	bne.n	3484 <setvbuf+0xf0>
    344e:	9b02      	ldr	r3, [sp, #8]
    3450:	9301      	str	r3, [sp, #4]
    3452:	42ab      	cmp	r3, r5
    3454:	d102      	bne.n	345c <setvbuf+0xc8>
    3456:	2001      	movs	r0, #1
    3458:	4240      	negs	r0, r0
    345a:	e006      	b.n	346a <setvbuf+0xd6>
    345c:	9801      	ldr	r0, [sp, #4]
    345e:	f000 fb03 	bl	3a68 <malloc>
    3462:	1e07      	subs	r7, r0, #0
    3464:	d10e      	bne.n	3484 <setvbuf+0xf0>
    3466:	e7f6      	b.n	3456 <setvbuf+0xc2>
    3468:	2000      	movs	r0, #0
    346a:	2202      	movs	r2, #2
    346c:	89a3      	ldrh	r3, [r4, #12]
    346e:	4313      	orrs	r3, r2
    3470:	81a3      	strh	r3, [r4, #12]
    3472:	2300      	movs	r3, #0
    3474:	60a3      	str	r3, [r4, #8]
    3476:	0023      	movs	r3, r4
    3478:	3347      	adds	r3, #71	; 0x47
    347a:	6023      	str	r3, [r4, #0]
    347c:	6123      	str	r3, [r4, #16]
    347e:	2301      	movs	r3, #1
    3480:	6163      	str	r3, [r4, #20]
    3482:	e02a      	b.n	34da <setvbuf+0x146>
    3484:	2280      	movs	r2, #128	; 0x80
    3486:	89a3      	ldrh	r3, [r4, #12]
    3488:	9d01      	ldr	r5, [sp, #4]
    348a:	4313      	orrs	r3, r2
    348c:	81a3      	strh	r3, [r4, #12]
    348e:	69b3      	ldr	r3, [r6, #24]
    3490:	2b00      	cmp	r3, #0
    3492:	d102      	bne.n	349a <setvbuf+0x106>
    3494:	0030      	movs	r0, r6
    3496:	f000 f9ef 	bl	3878 <__sinit>
    349a:	9b00      	ldr	r3, [sp, #0]
    349c:	2b01      	cmp	r3, #1
    349e:	d103      	bne.n	34a8 <setvbuf+0x114>
    34a0:	89a3      	ldrh	r3, [r4, #12]
    34a2:	9a00      	ldr	r2, [sp, #0]
    34a4:	431a      	orrs	r2, r3
    34a6:	81a2      	strh	r2, [r4, #12]
    34a8:	2308      	movs	r3, #8
    34aa:	89a2      	ldrh	r2, [r4, #12]
    34ac:	6027      	str	r7, [r4, #0]
    34ae:	4013      	ands	r3, r2
    34b0:	6127      	str	r7, [r4, #16]
    34b2:	6165      	str	r5, [r4, #20]
    34b4:	1e18      	subs	r0, r3, #0
    34b6:	d00c      	beq.n	34d2 <setvbuf+0x13e>
    34b8:	2301      	movs	r3, #1
    34ba:	401a      	ands	r2, r3
    34bc:	2300      	movs	r3, #0
    34be:	1e10      	subs	r0, r2, #0
    34c0:	4298      	cmp	r0, r3
    34c2:	d004      	beq.n	34ce <setvbuf+0x13a>
    34c4:	426d      	negs	r5, r5
    34c6:	60a3      	str	r3, [r4, #8]
    34c8:	61a5      	str	r5, [r4, #24]
    34ca:	0018      	movs	r0, r3
    34cc:	e005      	b.n	34da <setvbuf+0x146>
    34ce:	60a5      	str	r5, [r4, #8]
    34d0:	e003      	b.n	34da <setvbuf+0x146>
    34d2:	60a3      	str	r3, [r4, #8]
    34d4:	e001      	b.n	34da <setvbuf+0x146>
    34d6:	2001      	movs	r0, #1
    34d8:	4240      	negs	r0, r0
    34da:	b005      	add	sp, #20
    34dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34de:	46c0      	nop			; (mov r8, r8)
    34e0:	2000006c 	.word	0x2000006c
    34e4:	00004538 	.word	0x00004538
    34e8:	00004558 	.word	0x00004558
    34ec:	00004578 	.word	0x00004578
    34f0:	fffff35c 	.word	0xfffff35c

000034f4 <__swbuf_r>:
    34f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    34f6:	0005      	movs	r5, r0
    34f8:	000f      	movs	r7, r1
    34fa:	0014      	movs	r4, r2
    34fc:	2800      	cmp	r0, #0
    34fe:	d004      	beq.n	350a <__swbuf_r+0x16>
    3500:	6983      	ldr	r3, [r0, #24]
    3502:	2b00      	cmp	r3, #0
    3504:	d101      	bne.n	350a <__swbuf_r+0x16>
    3506:	f000 f9b7 	bl	3878 <__sinit>
    350a:	4b23      	ldr	r3, [pc, #140]	; (3598 <__swbuf_r+0xa4>)
    350c:	429c      	cmp	r4, r3
    350e:	d101      	bne.n	3514 <__swbuf_r+0x20>
    3510:	686c      	ldr	r4, [r5, #4]
    3512:	e008      	b.n	3526 <__swbuf_r+0x32>
    3514:	4b21      	ldr	r3, [pc, #132]	; (359c <__swbuf_r+0xa8>)
    3516:	429c      	cmp	r4, r3
    3518:	d101      	bne.n	351e <__swbuf_r+0x2a>
    351a:	68ac      	ldr	r4, [r5, #8]
    351c:	e003      	b.n	3526 <__swbuf_r+0x32>
    351e:	4b20      	ldr	r3, [pc, #128]	; (35a0 <__swbuf_r+0xac>)
    3520:	429c      	cmp	r4, r3
    3522:	d100      	bne.n	3526 <__swbuf_r+0x32>
    3524:	68ec      	ldr	r4, [r5, #12]
    3526:	69a3      	ldr	r3, [r4, #24]
    3528:	60a3      	str	r3, [r4, #8]
    352a:	89a3      	ldrh	r3, [r4, #12]
    352c:	071b      	lsls	r3, r3, #28
    352e:	d50a      	bpl.n	3546 <__swbuf_r+0x52>
    3530:	6923      	ldr	r3, [r4, #16]
    3532:	2b00      	cmp	r3, #0
    3534:	d007      	beq.n	3546 <__swbuf_r+0x52>
    3536:	6823      	ldr	r3, [r4, #0]
    3538:	6922      	ldr	r2, [r4, #16]
    353a:	b2fe      	uxtb	r6, r7
    353c:	1a98      	subs	r0, r3, r2
    353e:	6963      	ldr	r3, [r4, #20]
    3540:	4298      	cmp	r0, r3
    3542:	db0f      	blt.n	3564 <__swbuf_r+0x70>
    3544:	e008      	b.n	3558 <__swbuf_r+0x64>
    3546:	0021      	movs	r1, r4
    3548:	0028      	movs	r0, r5
    354a:	f000 f82b 	bl	35a4 <__swsetup_r>
    354e:	2800      	cmp	r0, #0
    3550:	d0f1      	beq.n	3536 <__swbuf_r+0x42>
    3552:	2001      	movs	r0, #1
    3554:	4240      	negs	r0, r0
    3556:	e01d      	b.n	3594 <__swbuf_r+0xa0>
    3558:	0021      	movs	r1, r4
    355a:	0028      	movs	r0, r5
    355c:	f000 f91e 	bl	379c <_fflush_r>
    3560:	2800      	cmp	r0, #0
    3562:	d1f6      	bne.n	3552 <__swbuf_r+0x5e>
    3564:	68a3      	ldr	r3, [r4, #8]
    3566:	3001      	adds	r0, #1
    3568:	3b01      	subs	r3, #1
    356a:	60a3      	str	r3, [r4, #8]
    356c:	6823      	ldr	r3, [r4, #0]
    356e:	1c5a      	adds	r2, r3, #1
    3570:	6022      	str	r2, [r4, #0]
    3572:	701f      	strb	r7, [r3, #0]
    3574:	6963      	ldr	r3, [r4, #20]
    3576:	4298      	cmp	r0, r3
    3578:	d005      	beq.n	3586 <__swbuf_r+0x92>
    357a:	89a3      	ldrh	r3, [r4, #12]
    357c:	0030      	movs	r0, r6
    357e:	07db      	lsls	r3, r3, #31
    3580:	d508      	bpl.n	3594 <__swbuf_r+0xa0>
    3582:	2e0a      	cmp	r6, #10
    3584:	d106      	bne.n	3594 <__swbuf_r+0xa0>
    3586:	0021      	movs	r1, r4
    3588:	0028      	movs	r0, r5
    358a:	f000 f907 	bl	379c <_fflush_r>
    358e:	2800      	cmp	r0, #0
    3590:	d1df      	bne.n	3552 <__swbuf_r+0x5e>
    3592:	0030      	movs	r0, r6
    3594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3596:	46c0      	nop			; (mov r8, r8)
    3598:	00004538 	.word	0x00004538
    359c:	00004558 	.word	0x00004558
    35a0:	00004578 	.word	0x00004578

000035a4 <__swsetup_r>:
    35a4:	4b36      	ldr	r3, [pc, #216]	; (3680 <__swsetup_r+0xdc>)
    35a6:	b570      	push	{r4, r5, r6, lr}
    35a8:	681d      	ldr	r5, [r3, #0]
    35aa:	0006      	movs	r6, r0
    35ac:	000c      	movs	r4, r1
    35ae:	2d00      	cmp	r5, #0
    35b0:	d005      	beq.n	35be <__swsetup_r+0x1a>
    35b2:	69ab      	ldr	r3, [r5, #24]
    35b4:	2b00      	cmp	r3, #0
    35b6:	d102      	bne.n	35be <__swsetup_r+0x1a>
    35b8:	0028      	movs	r0, r5
    35ba:	f000 f95d 	bl	3878 <__sinit>
    35be:	4b31      	ldr	r3, [pc, #196]	; (3684 <__swsetup_r+0xe0>)
    35c0:	429c      	cmp	r4, r3
    35c2:	d101      	bne.n	35c8 <__swsetup_r+0x24>
    35c4:	686c      	ldr	r4, [r5, #4]
    35c6:	e008      	b.n	35da <__swsetup_r+0x36>
    35c8:	4b2f      	ldr	r3, [pc, #188]	; (3688 <__swsetup_r+0xe4>)
    35ca:	429c      	cmp	r4, r3
    35cc:	d101      	bne.n	35d2 <__swsetup_r+0x2e>
    35ce:	68ac      	ldr	r4, [r5, #8]
    35d0:	e003      	b.n	35da <__swsetup_r+0x36>
    35d2:	4b2e      	ldr	r3, [pc, #184]	; (368c <__swsetup_r+0xe8>)
    35d4:	429c      	cmp	r4, r3
    35d6:	d100      	bne.n	35da <__swsetup_r+0x36>
    35d8:	68ec      	ldr	r4, [r5, #12]
    35da:	220c      	movs	r2, #12
    35dc:	5ea3      	ldrsh	r3, [r4, r2]
    35de:	b29a      	uxth	r2, r3
    35e0:	0711      	lsls	r1, r2, #28
    35e2:	d423      	bmi.n	362c <__swsetup_r+0x88>
    35e4:	06d1      	lsls	r1, r2, #27
    35e6:	d407      	bmi.n	35f8 <__swsetup_r+0x54>
    35e8:	2209      	movs	r2, #9
    35ea:	2001      	movs	r0, #1
    35ec:	6032      	str	r2, [r6, #0]
    35ee:	3237      	adds	r2, #55	; 0x37
    35f0:	4313      	orrs	r3, r2
    35f2:	81a3      	strh	r3, [r4, #12]
    35f4:	4240      	negs	r0, r0
    35f6:	e042      	b.n	367e <__swsetup_r+0xda>
    35f8:	0753      	lsls	r3, r2, #29
    35fa:	d513      	bpl.n	3624 <__swsetup_r+0x80>
    35fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    35fe:	2900      	cmp	r1, #0
    3600:	d008      	beq.n	3614 <__swsetup_r+0x70>
    3602:	0023      	movs	r3, r4
    3604:	3344      	adds	r3, #68	; 0x44
    3606:	4299      	cmp	r1, r3
    3608:	d002      	beq.n	3610 <__swsetup_r+0x6c>
    360a:	0030      	movs	r0, r6
    360c:	f000 fa36 	bl	3a7c <_free_r>
    3610:	2300      	movs	r3, #0
    3612:	6363      	str	r3, [r4, #52]	; 0x34
    3614:	2224      	movs	r2, #36	; 0x24
    3616:	89a3      	ldrh	r3, [r4, #12]
    3618:	4393      	bics	r3, r2
    361a:	81a3      	strh	r3, [r4, #12]
    361c:	2300      	movs	r3, #0
    361e:	6063      	str	r3, [r4, #4]
    3620:	6923      	ldr	r3, [r4, #16]
    3622:	6023      	str	r3, [r4, #0]
    3624:	2208      	movs	r2, #8
    3626:	89a3      	ldrh	r3, [r4, #12]
    3628:	4313      	orrs	r3, r2
    362a:	81a3      	strh	r3, [r4, #12]
    362c:	6923      	ldr	r3, [r4, #16]
    362e:	2b00      	cmp	r3, #0
    3630:	d10b      	bne.n	364a <__swsetup_r+0xa6>
    3632:	23a0      	movs	r3, #160	; 0xa0
    3634:	89a2      	ldrh	r2, [r4, #12]
    3636:	009b      	lsls	r3, r3, #2
    3638:	4013      	ands	r3, r2
    363a:	2280      	movs	r2, #128	; 0x80
    363c:	0092      	lsls	r2, r2, #2
    363e:	4293      	cmp	r3, r2
    3640:	d003      	beq.n	364a <__swsetup_r+0xa6>
    3642:	0021      	movs	r1, r4
    3644:	0030      	movs	r0, r6
    3646:	f000 f9d1 	bl	39ec <__smakebuf_r>
    364a:	2301      	movs	r3, #1
    364c:	89a2      	ldrh	r2, [r4, #12]
    364e:	4013      	ands	r3, r2
    3650:	d005      	beq.n	365e <__swsetup_r+0xba>
    3652:	2300      	movs	r3, #0
    3654:	60a3      	str	r3, [r4, #8]
    3656:	6963      	ldr	r3, [r4, #20]
    3658:	425b      	negs	r3, r3
    365a:	61a3      	str	r3, [r4, #24]
    365c:	e003      	b.n	3666 <__swsetup_r+0xc2>
    365e:	0792      	lsls	r2, r2, #30
    3660:	d400      	bmi.n	3664 <__swsetup_r+0xc0>
    3662:	6963      	ldr	r3, [r4, #20]
    3664:	60a3      	str	r3, [r4, #8]
    3666:	2000      	movs	r0, #0
    3668:	6923      	ldr	r3, [r4, #16]
    366a:	4283      	cmp	r3, r0
    366c:	d107      	bne.n	367e <__swsetup_r+0xda>
    366e:	220c      	movs	r2, #12
    3670:	5ea3      	ldrsh	r3, [r4, r2]
    3672:	061a      	lsls	r2, r3, #24
    3674:	d503      	bpl.n	367e <__swsetup_r+0xda>
    3676:	2240      	movs	r2, #64	; 0x40
    3678:	4313      	orrs	r3, r2
    367a:	81a3      	strh	r3, [r4, #12]
    367c:	3801      	subs	r0, #1
    367e:	bd70      	pop	{r4, r5, r6, pc}
    3680:	2000006c 	.word	0x2000006c
    3684:	00004538 	.word	0x00004538
    3688:	00004558 	.word	0x00004558
    368c:	00004578 	.word	0x00004578

00003690 <__sflush_r>:
    3690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3692:	898a      	ldrh	r2, [r1, #12]
    3694:	0005      	movs	r5, r0
    3696:	000c      	movs	r4, r1
    3698:	0713      	lsls	r3, r2, #28
    369a:	d45a      	bmi.n	3752 <__sflush_r+0xc2>
    369c:	684b      	ldr	r3, [r1, #4]
    369e:	2b00      	cmp	r3, #0
    36a0:	dc02      	bgt.n	36a8 <__sflush_r+0x18>
    36a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    36a4:	2b00      	cmp	r3, #0
    36a6:	dd19      	ble.n	36dc <__sflush_r+0x4c>
    36a8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    36aa:	2f00      	cmp	r7, #0
    36ac:	d016      	beq.n	36dc <__sflush_r+0x4c>
    36ae:	2300      	movs	r3, #0
    36b0:	682e      	ldr	r6, [r5, #0]
    36b2:	602b      	str	r3, [r5, #0]
    36b4:	2380      	movs	r3, #128	; 0x80
    36b6:	015b      	lsls	r3, r3, #5
    36b8:	401a      	ands	r2, r3
    36ba:	d001      	beq.n	36c0 <__sflush_r+0x30>
    36bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    36be:	e014      	b.n	36ea <__sflush_r+0x5a>
    36c0:	2301      	movs	r3, #1
    36c2:	6a21      	ldr	r1, [r4, #32]
    36c4:	0028      	movs	r0, r5
    36c6:	47b8      	blx	r7
    36c8:	1c43      	adds	r3, r0, #1
    36ca:	d10e      	bne.n	36ea <__sflush_r+0x5a>
    36cc:	682b      	ldr	r3, [r5, #0]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d00b      	beq.n	36ea <__sflush_r+0x5a>
    36d2:	2b1d      	cmp	r3, #29
    36d4:	d001      	beq.n	36da <__sflush_r+0x4a>
    36d6:	2b16      	cmp	r3, #22
    36d8:	d102      	bne.n	36e0 <__sflush_r+0x50>
    36da:	602e      	str	r6, [r5, #0]
    36dc:	2000      	movs	r0, #0
    36de:	e05a      	b.n	3796 <__sflush_r+0x106>
    36e0:	2240      	movs	r2, #64	; 0x40
    36e2:	89a3      	ldrh	r3, [r4, #12]
    36e4:	4313      	orrs	r3, r2
    36e6:	81a3      	strh	r3, [r4, #12]
    36e8:	e055      	b.n	3796 <__sflush_r+0x106>
    36ea:	89a3      	ldrh	r3, [r4, #12]
    36ec:	075b      	lsls	r3, r3, #29
    36ee:	d506      	bpl.n	36fe <__sflush_r+0x6e>
    36f0:	6863      	ldr	r3, [r4, #4]
    36f2:	1ac0      	subs	r0, r0, r3
    36f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    36f6:	2b00      	cmp	r3, #0
    36f8:	d001      	beq.n	36fe <__sflush_r+0x6e>
    36fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    36fc:	1ac0      	subs	r0, r0, r3
    36fe:	2300      	movs	r3, #0
    3700:	0002      	movs	r2, r0
    3702:	6a21      	ldr	r1, [r4, #32]
    3704:	0028      	movs	r0, r5
    3706:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3708:	47b8      	blx	r7
    370a:	89a3      	ldrh	r3, [r4, #12]
    370c:	1c42      	adds	r2, r0, #1
    370e:	d106      	bne.n	371e <__sflush_r+0x8e>
    3710:	6829      	ldr	r1, [r5, #0]
    3712:	291d      	cmp	r1, #29
    3714:	d83a      	bhi.n	378c <__sflush_r+0xfc>
    3716:	4a20      	ldr	r2, [pc, #128]	; (3798 <__sflush_r+0x108>)
    3718:	40ca      	lsrs	r2, r1
    371a:	07d2      	lsls	r2, r2, #31
    371c:	d536      	bpl.n	378c <__sflush_r+0xfc>
    371e:	2200      	movs	r2, #0
    3720:	6062      	str	r2, [r4, #4]
    3722:	6922      	ldr	r2, [r4, #16]
    3724:	6022      	str	r2, [r4, #0]
    3726:	04db      	lsls	r3, r3, #19
    3728:	d505      	bpl.n	3736 <__sflush_r+0xa6>
    372a:	1c43      	adds	r3, r0, #1
    372c:	d102      	bne.n	3734 <__sflush_r+0xa4>
    372e:	682b      	ldr	r3, [r5, #0]
    3730:	2b00      	cmp	r3, #0
    3732:	d100      	bne.n	3736 <__sflush_r+0xa6>
    3734:	6560      	str	r0, [r4, #84]	; 0x54
    3736:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3738:	602e      	str	r6, [r5, #0]
    373a:	2900      	cmp	r1, #0
    373c:	d0ce      	beq.n	36dc <__sflush_r+0x4c>
    373e:	0023      	movs	r3, r4
    3740:	3344      	adds	r3, #68	; 0x44
    3742:	4299      	cmp	r1, r3
    3744:	d002      	beq.n	374c <__sflush_r+0xbc>
    3746:	0028      	movs	r0, r5
    3748:	f000 f998 	bl	3a7c <_free_r>
    374c:	2000      	movs	r0, #0
    374e:	6360      	str	r0, [r4, #52]	; 0x34
    3750:	e021      	b.n	3796 <__sflush_r+0x106>
    3752:	690f      	ldr	r7, [r1, #16]
    3754:	2f00      	cmp	r7, #0
    3756:	d0c1      	beq.n	36dc <__sflush_r+0x4c>
    3758:	680b      	ldr	r3, [r1, #0]
    375a:	600f      	str	r7, [r1, #0]
    375c:	1bdb      	subs	r3, r3, r7
    375e:	9301      	str	r3, [sp, #4]
    3760:	2300      	movs	r3, #0
    3762:	0792      	lsls	r2, r2, #30
    3764:	d100      	bne.n	3768 <__sflush_r+0xd8>
    3766:	694b      	ldr	r3, [r1, #20]
    3768:	60a3      	str	r3, [r4, #8]
    376a:	e003      	b.n	3774 <__sflush_r+0xe4>
    376c:	9b01      	ldr	r3, [sp, #4]
    376e:	183f      	adds	r7, r7, r0
    3770:	1a1b      	subs	r3, r3, r0
    3772:	9301      	str	r3, [sp, #4]
    3774:	9b01      	ldr	r3, [sp, #4]
    3776:	2b00      	cmp	r3, #0
    3778:	ddb0      	ble.n	36dc <__sflush_r+0x4c>
    377a:	9b01      	ldr	r3, [sp, #4]
    377c:	003a      	movs	r2, r7
    377e:	6a21      	ldr	r1, [r4, #32]
    3780:	0028      	movs	r0, r5
    3782:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3784:	47b0      	blx	r6
    3786:	2800      	cmp	r0, #0
    3788:	dcf0      	bgt.n	376c <__sflush_r+0xdc>
    378a:	89a3      	ldrh	r3, [r4, #12]
    378c:	2240      	movs	r2, #64	; 0x40
    378e:	2001      	movs	r0, #1
    3790:	4313      	orrs	r3, r2
    3792:	81a3      	strh	r3, [r4, #12]
    3794:	4240      	negs	r0, r0
    3796:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3798:	20400001 	.word	0x20400001

0000379c <_fflush_r>:
    379c:	690b      	ldr	r3, [r1, #16]
    379e:	b570      	push	{r4, r5, r6, lr}
    37a0:	0005      	movs	r5, r0
    37a2:	000c      	movs	r4, r1
    37a4:	2b00      	cmp	r3, #0
    37a6:	d101      	bne.n	37ac <_fflush_r+0x10>
    37a8:	2000      	movs	r0, #0
    37aa:	e01c      	b.n	37e6 <_fflush_r+0x4a>
    37ac:	2800      	cmp	r0, #0
    37ae:	d004      	beq.n	37ba <_fflush_r+0x1e>
    37b0:	6983      	ldr	r3, [r0, #24]
    37b2:	2b00      	cmp	r3, #0
    37b4:	d101      	bne.n	37ba <_fflush_r+0x1e>
    37b6:	f000 f85f 	bl	3878 <__sinit>
    37ba:	4b0b      	ldr	r3, [pc, #44]	; (37e8 <_fflush_r+0x4c>)
    37bc:	429c      	cmp	r4, r3
    37be:	d101      	bne.n	37c4 <_fflush_r+0x28>
    37c0:	686c      	ldr	r4, [r5, #4]
    37c2:	e008      	b.n	37d6 <_fflush_r+0x3a>
    37c4:	4b09      	ldr	r3, [pc, #36]	; (37ec <_fflush_r+0x50>)
    37c6:	429c      	cmp	r4, r3
    37c8:	d101      	bne.n	37ce <_fflush_r+0x32>
    37ca:	68ac      	ldr	r4, [r5, #8]
    37cc:	e003      	b.n	37d6 <_fflush_r+0x3a>
    37ce:	4b08      	ldr	r3, [pc, #32]	; (37f0 <_fflush_r+0x54>)
    37d0:	429c      	cmp	r4, r3
    37d2:	d100      	bne.n	37d6 <_fflush_r+0x3a>
    37d4:	68ec      	ldr	r4, [r5, #12]
    37d6:	220c      	movs	r2, #12
    37d8:	5ea3      	ldrsh	r3, [r4, r2]
    37da:	2b00      	cmp	r3, #0
    37dc:	d0e4      	beq.n	37a8 <_fflush_r+0xc>
    37de:	0021      	movs	r1, r4
    37e0:	0028      	movs	r0, r5
    37e2:	f7ff ff55 	bl	3690 <__sflush_r>
    37e6:	bd70      	pop	{r4, r5, r6, pc}
    37e8:	00004538 	.word	0x00004538
    37ec:	00004558 	.word	0x00004558
    37f0:	00004578 	.word	0x00004578

000037f4 <_cleanup_r>:
    37f4:	b510      	push	{r4, lr}
    37f6:	4902      	ldr	r1, [pc, #8]	; (3800 <_cleanup_r+0xc>)
    37f8:	f000 f8b0 	bl	395c <_fwalk_reent>
    37fc:	bd10      	pop	{r4, pc}
    37fe:	46c0      	nop			; (mov r8, r8)
    3800:	0000379d 	.word	0x0000379d

00003804 <std.isra.0>:
    3804:	2300      	movs	r3, #0
    3806:	b510      	push	{r4, lr}
    3808:	0004      	movs	r4, r0
    380a:	6003      	str	r3, [r0, #0]
    380c:	6043      	str	r3, [r0, #4]
    380e:	6083      	str	r3, [r0, #8]
    3810:	8181      	strh	r1, [r0, #12]
    3812:	6643      	str	r3, [r0, #100]	; 0x64
    3814:	81c2      	strh	r2, [r0, #14]
    3816:	6103      	str	r3, [r0, #16]
    3818:	6143      	str	r3, [r0, #20]
    381a:	6183      	str	r3, [r0, #24]
    381c:	0019      	movs	r1, r3
    381e:	2208      	movs	r2, #8
    3820:	305c      	adds	r0, #92	; 0x5c
    3822:	f7ff fd1e 	bl	3262 <memset>
    3826:	4b05      	ldr	r3, [pc, #20]	; (383c <std.isra.0+0x38>)
    3828:	6224      	str	r4, [r4, #32]
    382a:	6263      	str	r3, [r4, #36]	; 0x24
    382c:	4b04      	ldr	r3, [pc, #16]	; (3840 <std.isra.0+0x3c>)
    382e:	62a3      	str	r3, [r4, #40]	; 0x28
    3830:	4b04      	ldr	r3, [pc, #16]	; (3844 <std.isra.0+0x40>)
    3832:	62e3      	str	r3, [r4, #44]	; 0x2c
    3834:	4b04      	ldr	r3, [pc, #16]	; (3848 <std.isra.0+0x44>)
    3836:	6323      	str	r3, [r4, #48]	; 0x30
    3838:	bd10      	pop	{r4, pc}
    383a:	46c0      	nop			; (mov r8, r8)
    383c:	00004181 	.word	0x00004181
    3840:	000041a9 	.word	0x000041a9
    3844:	000041e1 	.word	0x000041e1
    3848:	0000420d 	.word	0x0000420d

0000384c <__sfmoreglue>:
    384c:	b570      	push	{r4, r5, r6, lr}
    384e:	2568      	movs	r5, #104	; 0x68
    3850:	1e4b      	subs	r3, r1, #1
    3852:	435d      	muls	r5, r3
    3854:	000e      	movs	r6, r1
    3856:	0029      	movs	r1, r5
    3858:	3174      	adds	r1, #116	; 0x74
    385a:	f000 f955 	bl	3b08 <_malloc_r>
    385e:	1e04      	subs	r4, r0, #0
    3860:	d008      	beq.n	3874 <__sfmoreglue+0x28>
    3862:	2100      	movs	r1, #0
    3864:	002a      	movs	r2, r5
    3866:	6001      	str	r1, [r0, #0]
    3868:	6046      	str	r6, [r0, #4]
    386a:	300c      	adds	r0, #12
    386c:	60a0      	str	r0, [r4, #8]
    386e:	3268      	adds	r2, #104	; 0x68
    3870:	f7ff fcf7 	bl	3262 <memset>
    3874:	0020      	movs	r0, r4
    3876:	bd70      	pop	{r4, r5, r6, pc}

00003878 <__sinit>:
    3878:	6983      	ldr	r3, [r0, #24]
    387a:	b513      	push	{r0, r1, r4, lr}
    387c:	0004      	movs	r4, r0
    387e:	2b00      	cmp	r3, #0
    3880:	d128      	bne.n	38d4 <__sinit+0x5c>
    3882:	6483      	str	r3, [r0, #72]	; 0x48
    3884:	64c3      	str	r3, [r0, #76]	; 0x4c
    3886:	6503      	str	r3, [r0, #80]	; 0x50
    3888:	4b13      	ldr	r3, [pc, #76]	; (38d8 <__sinit+0x60>)
    388a:	4a14      	ldr	r2, [pc, #80]	; (38dc <__sinit+0x64>)
    388c:	681b      	ldr	r3, [r3, #0]
    388e:	6282      	str	r2, [r0, #40]	; 0x28
    3890:	9301      	str	r3, [sp, #4]
    3892:	4298      	cmp	r0, r3
    3894:	d101      	bne.n	389a <__sinit+0x22>
    3896:	2301      	movs	r3, #1
    3898:	6183      	str	r3, [r0, #24]
    389a:	0020      	movs	r0, r4
    389c:	f000 f820 	bl	38e0 <__sfp>
    38a0:	6060      	str	r0, [r4, #4]
    38a2:	0020      	movs	r0, r4
    38a4:	f000 f81c 	bl	38e0 <__sfp>
    38a8:	60a0      	str	r0, [r4, #8]
    38aa:	0020      	movs	r0, r4
    38ac:	f000 f818 	bl	38e0 <__sfp>
    38b0:	2200      	movs	r2, #0
    38b2:	60e0      	str	r0, [r4, #12]
    38b4:	2104      	movs	r1, #4
    38b6:	6860      	ldr	r0, [r4, #4]
    38b8:	f7ff ffa4 	bl	3804 <std.isra.0>
    38bc:	2201      	movs	r2, #1
    38be:	2109      	movs	r1, #9
    38c0:	68a0      	ldr	r0, [r4, #8]
    38c2:	f7ff ff9f 	bl	3804 <std.isra.0>
    38c6:	2202      	movs	r2, #2
    38c8:	2112      	movs	r1, #18
    38ca:	68e0      	ldr	r0, [r4, #12]
    38cc:	f7ff ff9a 	bl	3804 <std.isra.0>
    38d0:	2301      	movs	r3, #1
    38d2:	61a3      	str	r3, [r4, #24]
    38d4:	bd13      	pop	{r0, r1, r4, pc}
    38d6:	46c0      	nop			; (mov r8, r8)
    38d8:	00004534 	.word	0x00004534
    38dc:	000037f5 	.word	0x000037f5

000038e0 <__sfp>:
    38e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38e2:	4b1d      	ldr	r3, [pc, #116]	; (3958 <__sfp+0x78>)
    38e4:	0006      	movs	r6, r0
    38e6:	681d      	ldr	r5, [r3, #0]
    38e8:	69ab      	ldr	r3, [r5, #24]
    38ea:	2b00      	cmp	r3, #0
    38ec:	d102      	bne.n	38f4 <__sfp+0x14>
    38ee:	0028      	movs	r0, r5
    38f0:	f7ff ffc2 	bl	3878 <__sinit>
    38f4:	3548      	adds	r5, #72	; 0x48
    38f6:	68ac      	ldr	r4, [r5, #8]
    38f8:	686b      	ldr	r3, [r5, #4]
    38fa:	3b01      	subs	r3, #1
    38fc:	d405      	bmi.n	390a <__sfp+0x2a>
    38fe:	220c      	movs	r2, #12
    3900:	5ea7      	ldrsh	r7, [r4, r2]
    3902:	2f00      	cmp	r7, #0
    3904:	d010      	beq.n	3928 <__sfp+0x48>
    3906:	3468      	adds	r4, #104	; 0x68
    3908:	e7f7      	b.n	38fa <__sfp+0x1a>
    390a:	682b      	ldr	r3, [r5, #0]
    390c:	2b00      	cmp	r3, #0
    390e:	d001      	beq.n	3914 <__sfp+0x34>
    3910:	682d      	ldr	r5, [r5, #0]
    3912:	e7f0      	b.n	38f6 <__sfp+0x16>
    3914:	2104      	movs	r1, #4
    3916:	0030      	movs	r0, r6
    3918:	f7ff ff98 	bl	384c <__sfmoreglue>
    391c:	6028      	str	r0, [r5, #0]
    391e:	2800      	cmp	r0, #0
    3920:	d1f6      	bne.n	3910 <__sfp+0x30>
    3922:	230c      	movs	r3, #12
    3924:	6033      	str	r3, [r6, #0]
    3926:	e016      	b.n	3956 <__sfp+0x76>
    3928:	2301      	movs	r3, #1
    392a:	0020      	movs	r0, r4
    392c:	425b      	negs	r3, r3
    392e:	81e3      	strh	r3, [r4, #14]
    3930:	3302      	adds	r3, #2
    3932:	81a3      	strh	r3, [r4, #12]
    3934:	6667      	str	r7, [r4, #100]	; 0x64
    3936:	6027      	str	r7, [r4, #0]
    3938:	60a7      	str	r7, [r4, #8]
    393a:	6067      	str	r7, [r4, #4]
    393c:	6127      	str	r7, [r4, #16]
    393e:	6167      	str	r7, [r4, #20]
    3940:	61a7      	str	r7, [r4, #24]
    3942:	305c      	adds	r0, #92	; 0x5c
    3944:	2208      	movs	r2, #8
    3946:	0039      	movs	r1, r7
    3948:	f7ff fc8b 	bl	3262 <memset>
    394c:	0020      	movs	r0, r4
    394e:	6367      	str	r7, [r4, #52]	; 0x34
    3950:	63a7      	str	r7, [r4, #56]	; 0x38
    3952:	64a7      	str	r7, [r4, #72]	; 0x48
    3954:	64e7      	str	r7, [r4, #76]	; 0x4c
    3956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3958:	00004534 	.word	0x00004534

0000395c <_fwalk_reent>:
    395c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    395e:	0004      	movs	r4, r0
    3960:	0007      	movs	r7, r0
    3962:	2600      	movs	r6, #0
    3964:	9101      	str	r1, [sp, #4]
    3966:	3448      	adds	r4, #72	; 0x48
    3968:	2c00      	cmp	r4, #0
    396a:	d016      	beq.n	399a <_fwalk_reent+0x3e>
    396c:	6863      	ldr	r3, [r4, #4]
    396e:	68a5      	ldr	r5, [r4, #8]
    3970:	9300      	str	r3, [sp, #0]
    3972:	9b00      	ldr	r3, [sp, #0]
    3974:	3b01      	subs	r3, #1
    3976:	9300      	str	r3, [sp, #0]
    3978:	d40d      	bmi.n	3996 <_fwalk_reent+0x3a>
    397a:	89ab      	ldrh	r3, [r5, #12]
    397c:	2b01      	cmp	r3, #1
    397e:	d908      	bls.n	3992 <_fwalk_reent+0x36>
    3980:	220e      	movs	r2, #14
    3982:	5eab      	ldrsh	r3, [r5, r2]
    3984:	3301      	adds	r3, #1
    3986:	d004      	beq.n	3992 <_fwalk_reent+0x36>
    3988:	0029      	movs	r1, r5
    398a:	0038      	movs	r0, r7
    398c:	9b01      	ldr	r3, [sp, #4]
    398e:	4798      	blx	r3
    3990:	4306      	orrs	r6, r0
    3992:	3568      	adds	r5, #104	; 0x68
    3994:	e7ed      	b.n	3972 <_fwalk_reent+0x16>
    3996:	6824      	ldr	r4, [r4, #0]
    3998:	e7e6      	b.n	3968 <_fwalk_reent+0xc>
    399a:	0030      	movs	r0, r6
    399c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000039a0 <__swhatbuf_r>:
    39a0:	b570      	push	{r4, r5, r6, lr}
    39a2:	000e      	movs	r6, r1
    39a4:	001d      	movs	r5, r3
    39a6:	230e      	movs	r3, #14
    39a8:	5ec9      	ldrsh	r1, [r1, r3]
    39aa:	b090      	sub	sp, #64	; 0x40
    39ac:	0014      	movs	r4, r2
    39ae:	2900      	cmp	r1, #0
    39b0:	da06      	bge.n	39c0 <__swhatbuf_r+0x20>
    39b2:	2300      	movs	r3, #0
    39b4:	602b      	str	r3, [r5, #0]
    39b6:	89b3      	ldrh	r3, [r6, #12]
    39b8:	061b      	lsls	r3, r3, #24
    39ba:	d50f      	bpl.n	39dc <__swhatbuf_r+0x3c>
    39bc:	2340      	movs	r3, #64	; 0x40
    39be:	e00f      	b.n	39e0 <__swhatbuf_r+0x40>
    39c0:	aa01      	add	r2, sp, #4
    39c2:	f000 fc4f 	bl	4264 <_fstat_r>
    39c6:	2800      	cmp	r0, #0
    39c8:	dbf3      	blt.n	39b2 <__swhatbuf_r+0x12>
    39ca:	23f0      	movs	r3, #240	; 0xf0
    39cc:	9a02      	ldr	r2, [sp, #8]
    39ce:	021b      	lsls	r3, r3, #8
    39d0:	4013      	ands	r3, r2
    39d2:	4a05      	ldr	r2, [pc, #20]	; (39e8 <__swhatbuf_r+0x48>)
    39d4:	189b      	adds	r3, r3, r2
    39d6:	425a      	negs	r2, r3
    39d8:	4153      	adcs	r3, r2
    39da:	602b      	str	r3, [r5, #0]
    39dc:	2380      	movs	r3, #128	; 0x80
    39de:	00db      	lsls	r3, r3, #3
    39e0:	2000      	movs	r0, #0
    39e2:	6023      	str	r3, [r4, #0]
    39e4:	b010      	add	sp, #64	; 0x40
    39e6:	bd70      	pop	{r4, r5, r6, pc}
    39e8:	ffffe000 	.word	0xffffe000

000039ec <__smakebuf_r>:
    39ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    39ee:	2602      	movs	r6, #2
    39f0:	898b      	ldrh	r3, [r1, #12]
    39f2:	0005      	movs	r5, r0
    39f4:	000c      	movs	r4, r1
    39f6:	4233      	tst	r3, r6
    39f8:	d110      	bne.n	3a1c <__smakebuf_r+0x30>
    39fa:	ab01      	add	r3, sp, #4
    39fc:	466a      	mov	r2, sp
    39fe:	f7ff ffcf 	bl	39a0 <__swhatbuf_r>
    3a02:	9900      	ldr	r1, [sp, #0]
    3a04:	0007      	movs	r7, r0
    3a06:	0028      	movs	r0, r5
    3a08:	f000 f87e 	bl	3b08 <_malloc_r>
    3a0c:	2800      	cmp	r0, #0
    3a0e:	d10c      	bne.n	3a2a <__smakebuf_r+0x3e>
    3a10:	220c      	movs	r2, #12
    3a12:	5ea3      	ldrsh	r3, [r4, r2]
    3a14:	059a      	lsls	r2, r3, #22
    3a16:	d423      	bmi.n	3a60 <__smakebuf_r+0x74>
    3a18:	4333      	orrs	r3, r6
    3a1a:	81a3      	strh	r3, [r4, #12]
    3a1c:	0023      	movs	r3, r4
    3a1e:	3347      	adds	r3, #71	; 0x47
    3a20:	6023      	str	r3, [r4, #0]
    3a22:	6123      	str	r3, [r4, #16]
    3a24:	2301      	movs	r3, #1
    3a26:	6163      	str	r3, [r4, #20]
    3a28:	e01a      	b.n	3a60 <__smakebuf_r+0x74>
    3a2a:	2280      	movs	r2, #128	; 0x80
    3a2c:	4b0d      	ldr	r3, [pc, #52]	; (3a64 <__smakebuf_r+0x78>)
    3a2e:	62ab      	str	r3, [r5, #40]	; 0x28
    3a30:	89a3      	ldrh	r3, [r4, #12]
    3a32:	6020      	str	r0, [r4, #0]
    3a34:	4313      	orrs	r3, r2
    3a36:	81a3      	strh	r3, [r4, #12]
    3a38:	9b00      	ldr	r3, [sp, #0]
    3a3a:	6120      	str	r0, [r4, #16]
    3a3c:	6163      	str	r3, [r4, #20]
    3a3e:	9b01      	ldr	r3, [sp, #4]
    3a40:	2b00      	cmp	r3, #0
    3a42:	d00a      	beq.n	3a5a <__smakebuf_r+0x6e>
    3a44:	230e      	movs	r3, #14
    3a46:	5ee1      	ldrsh	r1, [r4, r3]
    3a48:	0028      	movs	r0, r5
    3a4a:	f000 fc1d 	bl	4288 <_isatty_r>
    3a4e:	2800      	cmp	r0, #0
    3a50:	d003      	beq.n	3a5a <__smakebuf_r+0x6e>
    3a52:	2201      	movs	r2, #1
    3a54:	89a3      	ldrh	r3, [r4, #12]
    3a56:	4313      	orrs	r3, r2
    3a58:	81a3      	strh	r3, [r4, #12]
    3a5a:	89a3      	ldrh	r3, [r4, #12]
    3a5c:	431f      	orrs	r7, r3
    3a5e:	81a7      	strh	r7, [r4, #12]
    3a60:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3a62:	46c0      	nop			; (mov r8, r8)
    3a64:	000037f5 	.word	0x000037f5

00003a68 <malloc>:
    3a68:	b510      	push	{r4, lr}
    3a6a:	4b03      	ldr	r3, [pc, #12]	; (3a78 <malloc+0x10>)
    3a6c:	0001      	movs	r1, r0
    3a6e:	6818      	ldr	r0, [r3, #0]
    3a70:	f000 f84a 	bl	3b08 <_malloc_r>
    3a74:	bd10      	pop	{r4, pc}
    3a76:	46c0      	nop			; (mov r8, r8)
    3a78:	2000006c 	.word	0x2000006c

00003a7c <_free_r>:
    3a7c:	b530      	push	{r4, r5, lr}
    3a7e:	2900      	cmp	r1, #0
    3a80:	d03e      	beq.n	3b00 <_free_r+0x84>
    3a82:	3904      	subs	r1, #4
    3a84:	680b      	ldr	r3, [r1, #0]
    3a86:	2b00      	cmp	r3, #0
    3a88:	da00      	bge.n	3a8c <_free_r+0x10>
    3a8a:	18c9      	adds	r1, r1, r3
    3a8c:	4a1d      	ldr	r2, [pc, #116]	; (3b04 <_free_r+0x88>)
    3a8e:	6813      	ldr	r3, [r2, #0]
    3a90:	0014      	movs	r4, r2
    3a92:	2b00      	cmp	r3, #0
    3a94:	d102      	bne.n	3a9c <_free_r+0x20>
    3a96:	604b      	str	r3, [r1, #4]
    3a98:	6011      	str	r1, [r2, #0]
    3a9a:	e031      	b.n	3b00 <_free_r+0x84>
    3a9c:	428b      	cmp	r3, r1
    3a9e:	d90d      	bls.n	3abc <_free_r+0x40>
    3aa0:	680a      	ldr	r2, [r1, #0]
    3aa2:	1888      	adds	r0, r1, r2
    3aa4:	4283      	cmp	r3, r0
    3aa6:	d103      	bne.n	3ab0 <_free_r+0x34>
    3aa8:	6818      	ldr	r0, [r3, #0]
    3aaa:	685b      	ldr	r3, [r3, #4]
    3aac:	1882      	adds	r2, r0, r2
    3aae:	600a      	str	r2, [r1, #0]
    3ab0:	604b      	str	r3, [r1, #4]
    3ab2:	6021      	str	r1, [r4, #0]
    3ab4:	e024      	b.n	3b00 <_free_r+0x84>
    3ab6:	428a      	cmp	r2, r1
    3ab8:	d803      	bhi.n	3ac2 <_free_r+0x46>
    3aba:	0013      	movs	r3, r2
    3abc:	685a      	ldr	r2, [r3, #4]
    3abe:	2a00      	cmp	r2, #0
    3ac0:	d1f9      	bne.n	3ab6 <_free_r+0x3a>
    3ac2:	681d      	ldr	r5, [r3, #0]
    3ac4:	195c      	adds	r4, r3, r5
    3ac6:	428c      	cmp	r4, r1
    3ac8:	d10b      	bne.n	3ae2 <_free_r+0x66>
    3aca:	6809      	ldr	r1, [r1, #0]
    3acc:	1869      	adds	r1, r5, r1
    3ace:	1858      	adds	r0, r3, r1
    3ad0:	6019      	str	r1, [r3, #0]
    3ad2:	4282      	cmp	r2, r0
    3ad4:	d114      	bne.n	3b00 <_free_r+0x84>
    3ad6:	6810      	ldr	r0, [r2, #0]
    3ad8:	6852      	ldr	r2, [r2, #4]
    3ada:	1841      	adds	r1, r0, r1
    3adc:	6019      	str	r1, [r3, #0]
    3ade:	605a      	str	r2, [r3, #4]
    3ae0:	e00e      	b.n	3b00 <_free_r+0x84>
    3ae2:	428c      	cmp	r4, r1
    3ae4:	d902      	bls.n	3aec <_free_r+0x70>
    3ae6:	230c      	movs	r3, #12
    3ae8:	6003      	str	r3, [r0, #0]
    3aea:	e009      	b.n	3b00 <_free_r+0x84>
    3aec:	6808      	ldr	r0, [r1, #0]
    3aee:	180c      	adds	r4, r1, r0
    3af0:	42a2      	cmp	r2, r4
    3af2:	d103      	bne.n	3afc <_free_r+0x80>
    3af4:	6814      	ldr	r4, [r2, #0]
    3af6:	6852      	ldr	r2, [r2, #4]
    3af8:	1820      	adds	r0, r4, r0
    3afa:	6008      	str	r0, [r1, #0]
    3afc:	604a      	str	r2, [r1, #4]
    3afe:	6059      	str	r1, [r3, #4]
    3b00:	bd30      	pop	{r4, r5, pc}
    3b02:	46c0      	nop			; (mov r8, r8)
    3b04:	200000d8 	.word	0x200000d8

00003b08 <_malloc_r>:
    3b08:	2303      	movs	r3, #3
    3b0a:	b570      	push	{r4, r5, r6, lr}
    3b0c:	1ccd      	adds	r5, r1, #3
    3b0e:	439d      	bics	r5, r3
    3b10:	3508      	adds	r5, #8
    3b12:	0006      	movs	r6, r0
    3b14:	2d0c      	cmp	r5, #12
    3b16:	d201      	bcs.n	3b1c <_malloc_r+0x14>
    3b18:	250c      	movs	r5, #12
    3b1a:	e005      	b.n	3b28 <_malloc_r+0x20>
    3b1c:	2d00      	cmp	r5, #0
    3b1e:	da03      	bge.n	3b28 <_malloc_r+0x20>
    3b20:	230c      	movs	r3, #12
    3b22:	2000      	movs	r0, #0
    3b24:	6033      	str	r3, [r6, #0]
    3b26:	e040      	b.n	3baa <_malloc_r+0xa2>
    3b28:	42a9      	cmp	r1, r5
    3b2a:	d8f9      	bhi.n	3b20 <_malloc_r+0x18>
    3b2c:	4b1f      	ldr	r3, [pc, #124]	; (3bac <_malloc_r+0xa4>)
    3b2e:	681c      	ldr	r4, [r3, #0]
    3b30:	001a      	movs	r2, r3
    3b32:	0021      	movs	r1, r4
    3b34:	2900      	cmp	r1, #0
    3b36:	d013      	beq.n	3b60 <_malloc_r+0x58>
    3b38:	680b      	ldr	r3, [r1, #0]
    3b3a:	1b5b      	subs	r3, r3, r5
    3b3c:	d40d      	bmi.n	3b5a <_malloc_r+0x52>
    3b3e:	2b0b      	cmp	r3, #11
    3b40:	d902      	bls.n	3b48 <_malloc_r+0x40>
    3b42:	600b      	str	r3, [r1, #0]
    3b44:	18cc      	adds	r4, r1, r3
    3b46:	e01e      	b.n	3b86 <_malloc_r+0x7e>
    3b48:	428c      	cmp	r4, r1
    3b4a:	d102      	bne.n	3b52 <_malloc_r+0x4a>
    3b4c:	6863      	ldr	r3, [r4, #4]
    3b4e:	6013      	str	r3, [r2, #0]
    3b50:	e01a      	b.n	3b88 <_malloc_r+0x80>
    3b52:	684b      	ldr	r3, [r1, #4]
    3b54:	6063      	str	r3, [r4, #4]
    3b56:	000c      	movs	r4, r1
    3b58:	e016      	b.n	3b88 <_malloc_r+0x80>
    3b5a:	000c      	movs	r4, r1
    3b5c:	6849      	ldr	r1, [r1, #4]
    3b5e:	e7e9      	b.n	3b34 <_malloc_r+0x2c>
    3b60:	4c13      	ldr	r4, [pc, #76]	; (3bb0 <_malloc_r+0xa8>)
    3b62:	6823      	ldr	r3, [r4, #0]
    3b64:	2b00      	cmp	r3, #0
    3b66:	d103      	bne.n	3b70 <_malloc_r+0x68>
    3b68:	0030      	movs	r0, r6
    3b6a:	f000 faf7 	bl	415c <_sbrk_r>
    3b6e:	6020      	str	r0, [r4, #0]
    3b70:	0029      	movs	r1, r5
    3b72:	0030      	movs	r0, r6
    3b74:	f000 faf2 	bl	415c <_sbrk_r>
    3b78:	1c43      	adds	r3, r0, #1
    3b7a:	d0d1      	beq.n	3b20 <_malloc_r+0x18>
    3b7c:	2303      	movs	r3, #3
    3b7e:	1cc4      	adds	r4, r0, #3
    3b80:	439c      	bics	r4, r3
    3b82:	42a0      	cmp	r0, r4
    3b84:	d10a      	bne.n	3b9c <_malloc_r+0x94>
    3b86:	6025      	str	r5, [r4, #0]
    3b88:	0020      	movs	r0, r4
    3b8a:	2207      	movs	r2, #7
    3b8c:	300b      	adds	r0, #11
    3b8e:	1d23      	adds	r3, r4, #4
    3b90:	4390      	bics	r0, r2
    3b92:	1ac3      	subs	r3, r0, r3
    3b94:	d009      	beq.n	3baa <_malloc_r+0xa2>
    3b96:	425a      	negs	r2, r3
    3b98:	50e2      	str	r2, [r4, r3]
    3b9a:	e006      	b.n	3baa <_malloc_r+0xa2>
    3b9c:	1a21      	subs	r1, r4, r0
    3b9e:	0030      	movs	r0, r6
    3ba0:	f000 fadc 	bl	415c <_sbrk_r>
    3ba4:	1c43      	adds	r3, r0, #1
    3ba6:	d1ee      	bne.n	3b86 <_malloc_r+0x7e>
    3ba8:	e7ba      	b.n	3b20 <_malloc_r+0x18>
    3baa:	bd70      	pop	{r4, r5, r6, pc}
    3bac:	200000d8 	.word	0x200000d8
    3bb0:	200000d4 	.word	0x200000d4

00003bb4 <__sfputc_r>:
    3bb4:	6893      	ldr	r3, [r2, #8]
    3bb6:	b510      	push	{r4, lr}
    3bb8:	3b01      	subs	r3, #1
    3bba:	6093      	str	r3, [r2, #8]
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	da05      	bge.n	3bcc <__sfputc_r+0x18>
    3bc0:	6994      	ldr	r4, [r2, #24]
    3bc2:	42a3      	cmp	r3, r4
    3bc4:	db08      	blt.n	3bd8 <__sfputc_r+0x24>
    3bc6:	b2cb      	uxtb	r3, r1
    3bc8:	2b0a      	cmp	r3, #10
    3bca:	d005      	beq.n	3bd8 <__sfputc_r+0x24>
    3bcc:	6813      	ldr	r3, [r2, #0]
    3bce:	1c58      	adds	r0, r3, #1
    3bd0:	6010      	str	r0, [r2, #0]
    3bd2:	7019      	strb	r1, [r3, #0]
    3bd4:	b2c8      	uxtb	r0, r1
    3bd6:	e001      	b.n	3bdc <__sfputc_r+0x28>
    3bd8:	f7ff fc8c 	bl	34f4 <__swbuf_r>
    3bdc:	bd10      	pop	{r4, pc}

00003bde <__sfputs_r>:
    3bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3be0:	0006      	movs	r6, r0
    3be2:	000f      	movs	r7, r1
    3be4:	0014      	movs	r4, r2
    3be6:	18d5      	adds	r5, r2, r3
    3be8:	42ac      	cmp	r4, r5
    3bea:	d008      	beq.n	3bfe <__sfputs_r+0x20>
    3bec:	7821      	ldrb	r1, [r4, #0]
    3bee:	003a      	movs	r2, r7
    3bf0:	0030      	movs	r0, r6
    3bf2:	f7ff ffdf 	bl	3bb4 <__sfputc_r>
    3bf6:	3401      	adds	r4, #1
    3bf8:	1c43      	adds	r3, r0, #1
    3bfa:	d1f5      	bne.n	3be8 <__sfputs_r+0xa>
    3bfc:	e000      	b.n	3c00 <__sfputs_r+0x22>
    3bfe:	2000      	movs	r0, #0
    3c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003c04 <_vfiprintf_r>:
    3c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c06:	b09f      	sub	sp, #124	; 0x7c
    3c08:	0006      	movs	r6, r0
    3c0a:	000f      	movs	r7, r1
    3c0c:	9202      	str	r2, [sp, #8]
    3c0e:	9305      	str	r3, [sp, #20]
    3c10:	2800      	cmp	r0, #0
    3c12:	d004      	beq.n	3c1e <_vfiprintf_r+0x1a>
    3c14:	6983      	ldr	r3, [r0, #24]
    3c16:	2b00      	cmp	r3, #0
    3c18:	d101      	bne.n	3c1e <_vfiprintf_r+0x1a>
    3c1a:	f7ff fe2d 	bl	3878 <__sinit>
    3c1e:	4b7f      	ldr	r3, [pc, #508]	; (3e1c <_vfiprintf_r+0x218>)
    3c20:	429f      	cmp	r7, r3
    3c22:	d101      	bne.n	3c28 <_vfiprintf_r+0x24>
    3c24:	6877      	ldr	r7, [r6, #4]
    3c26:	e008      	b.n	3c3a <_vfiprintf_r+0x36>
    3c28:	4b7d      	ldr	r3, [pc, #500]	; (3e20 <_vfiprintf_r+0x21c>)
    3c2a:	429f      	cmp	r7, r3
    3c2c:	d101      	bne.n	3c32 <_vfiprintf_r+0x2e>
    3c2e:	68b7      	ldr	r7, [r6, #8]
    3c30:	e003      	b.n	3c3a <_vfiprintf_r+0x36>
    3c32:	4b7c      	ldr	r3, [pc, #496]	; (3e24 <_vfiprintf_r+0x220>)
    3c34:	429f      	cmp	r7, r3
    3c36:	d100      	bne.n	3c3a <_vfiprintf_r+0x36>
    3c38:	68f7      	ldr	r7, [r6, #12]
    3c3a:	89bb      	ldrh	r3, [r7, #12]
    3c3c:	071b      	lsls	r3, r3, #28
    3c3e:	d50a      	bpl.n	3c56 <_vfiprintf_r+0x52>
    3c40:	693b      	ldr	r3, [r7, #16]
    3c42:	2b00      	cmp	r3, #0
    3c44:	d007      	beq.n	3c56 <_vfiprintf_r+0x52>
    3c46:	2300      	movs	r3, #0
    3c48:	ad06      	add	r5, sp, #24
    3c4a:	616b      	str	r3, [r5, #20]
    3c4c:	3320      	adds	r3, #32
    3c4e:	766b      	strb	r3, [r5, #25]
    3c50:	3310      	adds	r3, #16
    3c52:	76ab      	strb	r3, [r5, #26]
    3c54:	e03d      	b.n	3cd2 <_vfiprintf_r+0xce>
    3c56:	0039      	movs	r1, r7
    3c58:	0030      	movs	r0, r6
    3c5a:	f7ff fca3 	bl	35a4 <__swsetup_r>
    3c5e:	2800      	cmp	r0, #0
    3c60:	d0f1      	beq.n	3c46 <_vfiprintf_r+0x42>
    3c62:	2001      	movs	r0, #1
    3c64:	4240      	negs	r0, r0
    3c66:	e0d6      	b.n	3e16 <_vfiprintf_r+0x212>
    3c68:	9a05      	ldr	r2, [sp, #20]
    3c6a:	1d11      	adds	r1, r2, #4
    3c6c:	6812      	ldr	r2, [r2, #0]
    3c6e:	9105      	str	r1, [sp, #20]
    3c70:	2a00      	cmp	r2, #0
    3c72:	da00      	bge.n	3c76 <_vfiprintf_r+0x72>
    3c74:	e07f      	b.n	3d76 <_vfiprintf_r+0x172>
    3c76:	9209      	str	r2, [sp, #36]	; 0x24
    3c78:	3401      	adds	r4, #1
    3c7a:	7823      	ldrb	r3, [r4, #0]
    3c7c:	2b2e      	cmp	r3, #46	; 0x2e
    3c7e:	d100      	bne.n	3c82 <_vfiprintf_r+0x7e>
    3c80:	e08d      	b.n	3d9e <_vfiprintf_r+0x19a>
    3c82:	7821      	ldrb	r1, [r4, #0]
    3c84:	2203      	movs	r2, #3
    3c86:	4868      	ldr	r0, [pc, #416]	; (3e28 <_vfiprintf_r+0x224>)
    3c88:	f000 fb24 	bl	42d4 <memchr>
    3c8c:	2800      	cmp	r0, #0
    3c8e:	d007      	beq.n	3ca0 <_vfiprintf_r+0x9c>
    3c90:	4b65      	ldr	r3, [pc, #404]	; (3e28 <_vfiprintf_r+0x224>)
    3c92:	682a      	ldr	r2, [r5, #0]
    3c94:	1ac0      	subs	r0, r0, r3
    3c96:	2340      	movs	r3, #64	; 0x40
    3c98:	4083      	lsls	r3, r0
    3c9a:	4313      	orrs	r3, r2
    3c9c:	602b      	str	r3, [r5, #0]
    3c9e:	3401      	adds	r4, #1
    3ca0:	7821      	ldrb	r1, [r4, #0]
    3ca2:	1c63      	adds	r3, r4, #1
    3ca4:	2206      	movs	r2, #6
    3ca6:	4861      	ldr	r0, [pc, #388]	; (3e2c <_vfiprintf_r+0x228>)
    3ca8:	9302      	str	r3, [sp, #8]
    3caa:	7629      	strb	r1, [r5, #24]
    3cac:	f000 fb12 	bl	42d4 <memchr>
    3cb0:	2800      	cmp	r0, #0
    3cb2:	d100      	bne.n	3cb6 <_vfiprintf_r+0xb2>
    3cb4:	e09d      	b.n	3df2 <_vfiprintf_r+0x1ee>
    3cb6:	4b5e      	ldr	r3, [pc, #376]	; (3e30 <_vfiprintf_r+0x22c>)
    3cb8:	2b00      	cmp	r3, #0
    3cba:	d000      	beq.n	3cbe <_vfiprintf_r+0xba>
    3cbc:	e090      	b.n	3de0 <_vfiprintf_r+0x1dc>
    3cbe:	2207      	movs	r2, #7
    3cc0:	9b05      	ldr	r3, [sp, #20]
    3cc2:	3307      	adds	r3, #7
    3cc4:	4393      	bics	r3, r2
    3cc6:	3308      	adds	r3, #8
    3cc8:	9305      	str	r3, [sp, #20]
    3cca:	696b      	ldr	r3, [r5, #20]
    3ccc:	9a03      	ldr	r2, [sp, #12]
    3cce:	189b      	adds	r3, r3, r2
    3cd0:	616b      	str	r3, [r5, #20]
    3cd2:	9c02      	ldr	r4, [sp, #8]
    3cd4:	7823      	ldrb	r3, [r4, #0]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d104      	bne.n	3ce4 <_vfiprintf_r+0xe0>
    3cda:	9b02      	ldr	r3, [sp, #8]
    3cdc:	1ae3      	subs	r3, r4, r3
    3cde:	9304      	str	r3, [sp, #16]
    3ce0:	d012      	beq.n	3d08 <_vfiprintf_r+0x104>
    3ce2:	e003      	b.n	3cec <_vfiprintf_r+0xe8>
    3ce4:	2b25      	cmp	r3, #37	; 0x25
    3ce6:	d0f8      	beq.n	3cda <_vfiprintf_r+0xd6>
    3ce8:	3401      	adds	r4, #1
    3cea:	e7f3      	b.n	3cd4 <_vfiprintf_r+0xd0>
    3cec:	9b04      	ldr	r3, [sp, #16]
    3cee:	9a02      	ldr	r2, [sp, #8]
    3cf0:	0039      	movs	r1, r7
    3cf2:	0030      	movs	r0, r6
    3cf4:	f7ff ff73 	bl	3bde <__sfputs_r>
    3cf8:	1c43      	adds	r3, r0, #1
    3cfa:	d100      	bne.n	3cfe <_vfiprintf_r+0xfa>
    3cfc:	e086      	b.n	3e0c <_vfiprintf_r+0x208>
    3cfe:	696a      	ldr	r2, [r5, #20]
    3d00:	9b04      	ldr	r3, [sp, #16]
    3d02:	4694      	mov	ip, r2
    3d04:	4463      	add	r3, ip
    3d06:	616b      	str	r3, [r5, #20]
    3d08:	7823      	ldrb	r3, [r4, #0]
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	d07e      	beq.n	3e0c <_vfiprintf_r+0x208>
    3d0e:	2201      	movs	r2, #1
    3d10:	2300      	movs	r3, #0
    3d12:	4252      	negs	r2, r2
    3d14:	606a      	str	r2, [r5, #4]
    3d16:	a902      	add	r1, sp, #8
    3d18:	3254      	adds	r2, #84	; 0x54
    3d1a:	1852      	adds	r2, r2, r1
    3d1c:	3401      	adds	r4, #1
    3d1e:	602b      	str	r3, [r5, #0]
    3d20:	60eb      	str	r3, [r5, #12]
    3d22:	60ab      	str	r3, [r5, #8]
    3d24:	7013      	strb	r3, [r2, #0]
    3d26:	65ab      	str	r3, [r5, #88]	; 0x58
    3d28:	7821      	ldrb	r1, [r4, #0]
    3d2a:	2205      	movs	r2, #5
    3d2c:	4841      	ldr	r0, [pc, #260]	; (3e34 <_vfiprintf_r+0x230>)
    3d2e:	f000 fad1 	bl	42d4 <memchr>
    3d32:	2800      	cmp	r0, #0
    3d34:	d008      	beq.n	3d48 <_vfiprintf_r+0x144>
    3d36:	4b3f      	ldr	r3, [pc, #252]	; (3e34 <_vfiprintf_r+0x230>)
    3d38:	682a      	ldr	r2, [r5, #0]
    3d3a:	1ac0      	subs	r0, r0, r3
    3d3c:	2301      	movs	r3, #1
    3d3e:	4083      	lsls	r3, r0
    3d40:	4313      	orrs	r3, r2
    3d42:	602b      	str	r3, [r5, #0]
    3d44:	3401      	adds	r4, #1
    3d46:	e7ef      	b.n	3d28 <_vfiprintf_r+0x124>
    3d48:	682b      	ldr	r3, [r5, #0]
    3d4a:	06da      	lsls	r2, r3, #27
    3d4c:	d504      	bpl.n	3d58 <_vfiprintf_r+0x154>
    3d4e:	2253      	movs	r2, #83	; 0x53
    3d50:	2120      	movs	r1, #32
    3d52:	a802      	add	r0, sp, #8
    3d54:	1812      	adds	r2, r2, r0
    3d56:	7011      	strb	r1, [r2, #0]
    3d58:	071a      	lsls	r2, r3, #28
    3d5a:	d504      	bpl.n	3d66 <_vfiprintf_r+0x162>
    3d5c:	2253      	movs	r2, #83	; 0x53
    3d5e:	212b      	movs	r1, #43	; 0x2b
    3d60:	a802      	add	r0, sp, #8
    3d62:	1812      	adds	r2, r2, r0
    3d64:	7011      	strb	r1, [r2, #0]
    3d66:	7822      	ldrb	r2, [r4, #0]
    3d68:	2a2a      	cmp	r2, #42	; 0x2a
    3d6a:	d100      	bne.n	3d6e <_vfiprintf_r+0x16a>
    3d6c:	e77c      	b.n	3c68 <_vfiprintf_r+0x64>
    3d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3d70:	2000      	movs	r0, #0
    3d72:	210a      	movs	r1, #10
    3d74:	e005      	b.n	3d82 <_vfiprintf_r+0x17e>
    3d76:	4252      	negs	r2, r2
    3d78:	60ea      	str	r2, [r5, #12]
    3d7a:	2202      	movs	r2, #2
    3d7c:	4313      	orrs	r3, r2
    3d7e:	602b      	str	r3, [r5, #0]
    3d80:	e77a      	b.n	3c78 <_vfiprintf_r+0x74>
    3d82:	7822      	ldrb	r2, [r4, #0]
    3d84:	3a30      	subs	r2, #48	; 0x30
    3d86:	2a09      	cmp	r2, #9
    3d88:	d804      	bhi.n	3d94 <_vfiprintf_r+0x190>
    3d8a:	434b      	muls	r3, r1
    3d8c:	3401      	adds	r4, #1
    3d8e:	189b      	adds	r3, r3, r2
    3d90:	2001      	movs	r0, #1
    3d92:	e7f6      	b.n	3d82 <_vfiprintf_r+0x17e>
    3d94:	2800      	cmp	r0, #0
    3d96:	d100      	bne.n	3d9a <_vfiprintf_r+0x196>
    3d98:	e76f      	b.n	3c7a <_vfiprintf_r+0x76>
    3d9a:	9309      	str	r3, [sp, #36]	; 0x24
    3d9c:	e76d      	b.n	3c7a <_vfiprintf_r+0x76>
    3d9e:	7863      	ldrb	r3, [r4, #1]
    3da0:	2b2a      	cmp	r3, #42	; 0x2a
    3da2:	d10a      	bne.n	3dba <_vfiprintf_r+0x1b6>
    3da4:	9b05      	ldr	r3, [sp, #20]
    3da6:	3402      	adds	r4, #2
    3da8:	1d1a      	adds	r2, r3, #4
    3daa:	681b      	ldr	r3, [r3, #0]
    3dac:	9205      	str	r2, [sp, #20]
    3dae:	2b00      	cmp	r3, #0
    3db0:	da01      	bge.n	3db6 <_vfiprintf_r+0x1b2>
    3db2:	2301      	movs	r3, #1
    3db4:	425b      	negs	r3, r3
    3db6:	9307      	str	r3, [sp, #28]
    3db8:	e763      	b.n	3c82 <_vfiprintf_r+0x7e>
    3dba:	2300      	movs	r3, #0
    3dbc:	200a      	movs	r0, #10
    3dbe:	001a      	movs	r2, r3
    3dc0:	3401      	adds	r4, #1
    3dc2:	606b      	str	r3, [r5, #4]
    3dc4:	7821      	ldrb	r1, [r4, #0]
    3dc6:	3930      	subs	r1, #48	; 0x30
    3dc8:	2909      	cmp	r1, #9
    3dca:	d804      	bhi.n	3dd6 <_vfiprintf_r+0x1d2>
    3dcc:	4342      	muls	r2, r0
    3dce:	3401      	adds	r4, #1
    3dd0:	1852      	adds	r2, r2, r1
    3dd2:	2301      	movs	r3, #1
    3dd4:	e7f6      	b.n	3dc4 <_vfiprintf_r+0x1c0>
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	d100      	bne.n	3ddc <_vfiprintf_r+0x1d8>
    3dda:	e752      	b.n	3c82 <_vfiprintf_r+0x7e>
    3ddc:	9207      	str	r2, [sp, #28]
    3dde:	e750      	b.n	3c82 <_vfiprintf_r+0x7e>
    3de0:	ab05      	add	r3, sp, #20
    3de2:	9300      	str	r3, [sp, #0]
    3de4:	003a      	movs	r2, r7
    3de6:	4b14      	ldr	r3, [pc, #80]	; (3e38 <_vfiprintf_r+0x234>)
    3de8:	0029      	movs	r1, r5
    3dea:	0030      	movs	r0, r6
    3dec:	e000      	b.n	3df0 <_vfiprintf_r+0x1ec>
    3dee:	bf00      	nop
    3df0:	e007      	b.n	3e02 <_vfiprintf_r+0x1fe>
    3df2:	ab05      	add	r3, sp, #20
    3df4:	9300      	str	r3, [sp, #0]
    3df6:	003a      	movs	r2, r7
    3df8:	4b0f      	ldr	r3, [pc, #60]	; (3e38 <_vfiprintf_r+0x234>)
    3dfa:	0029      	movs	r1, r5
    3dfc:	0030      	movs	r0, r6
    3dfe:	f000 f88b 	bl	3f18 <_printf_i>
    3e02:	9003      	str	r0, [sp, #12]
    3e04:	9b03      	ldr	r3, [sp, #12]
    3e06:	3301      	adds	r3, #1
    3e08:	d000      	beq.n	3e0c <_vfiprintf_r+0x208>
    3e0a:	e75e      	b.n	3cca <_vfiprintf_r+0xc6>
    3e0c:	89bb      	ldrh	r3, [r7, #12]
    3e0e:	065b      	lsls	r3, r3, #25
    3e10:	d500      	bpl.n	3e14 <_vfiprintf_r+0x210>
    3e12:	e726      	b.n	3c62 <_vfiprintf_r+0x5e>
    3e14:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3e16:	b01f      	add	sp, #124	; 0x7c
    3e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e1a:	46c0      	nop			; (mov r8, r8)
    3e1c:	00004538 	.word	0x00004538
    3e20:	00004558 	.word	0x00004558
    3e24:	00004578 	.word	0x00004578
    3e28:	0000459e 	.word	0x0000459e
    3e2c:	000045a2 	.word	0x000045a2
    3e30:	00000000 	.word	0x00000000
    3e34:	00004598 	.word	0x00004598
    3e38:	00003bdf 	.word	0x00003bdf

00003e3c <_printf_common>:
    3e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3e3e:	0017      	movs	r7, r2
    3e40:	9301      	str	r3, [sp, #4]
    3e42:	688a      	ldr	r2, [r1, #8]
    3e44:	690b      	ldr	r3, [r1, #16]
    3e46:	9000      	str	r0, [sp, #0]
    3e48:	000c      	movs	r4, r1
    3e4a:	4293      	cmp	r3, r2
    3e4c:	da00      	bge.n	3e50 <_printf_common+0x14>
    3e4e:	0013      	movs	r3, r2
    3e50:	0022      	movs	r2, r4
    3e52:	603b      	str	r3, [r7, #0]
    3e54:	3243      	adds	r2, #67	; 0x43
    3e56:	7812      	ldrb	r2, [r2, #0]
    3e58:	2a00      	cmp	r2, #0
    3e5a:	d001      	beq.n	3e60 <_printf_common+0x24>
    3e5c:	3301      	adds	r3, #1
    3e5e:	603b      	str	r3, [r7, #0]
    3e60:	6823      	ldr	r3, [r4, #0]
    3e62:	069b      	lsls	r3, r3, #26
    3e64:	d502      	bpl.n	3e6c <_printf_common+0x30>
    3e66:	683b      	ldr	r3, [r7, #0]
    3e68:	3302      	adds	r3, #2
    3e6a:	603b      	str	r3, [r7, #0]
    3e6c:	2506      	movs	r5, #6
    3e6e:	6823      	ldr	r3, [r4, #0]
    3e70:	401d      	ands	r5, r3
    3e72:	d01e      	beq.n	3eb2 <_printf_common+0x76>
    3e74:	0023      	movs	r3, r4
    3e76:	3343      	adds	r3, #67	; 0x43
    3e78:	781b      	ldrb	r3, [r3, #0]
    3e7a:	1e5a      	subs	r2, r3, #1
    3e7c:	4193      	sbcs	r3, r2
    3e7e:	6822      	ldr	r2, [r4, #0]
    3e80:	0692      	lsls	r2, r2, #26
    3e82:	d51c      	bpl.n	3ebe <_printf_common+0x82>
    3e84:	2030      	movs	r0, #48	; 0x30
    3e86:	18e1      	adds	r1, r4, r3
    3e88:	3143      	adds	r1, #67	; 0x43
    3e8a:	7008      	strb	r0, [r1, #0]
    3e8c:	0021      	movs	r1, r4
    3e8e:	1c5a      	adds	r2, r3, #1
    3e90:	3145      	adds	r1, #69	; 0x45
    3e92:	7809      	ldrb	r1, [r1, #0]
    3e94:	18a2      	adds	r2, r4, r2
    3e96:	3243      	adds	r2, #67	; 0x43
    3e98:	3302      	adds	r3, #2
    3e9a:	7011      	strb	r1, [r2, #0]
    3e9c:	e00f      	b.n	3ebe <_printf_common+0x82>
    3e9e:	0022      	movs	r2, r4
    3ea0:	2301      	movs	r3, #1
    3ea2:	3219      	adds	r2, #25
    3ea4:	9901      	ldr	r1, [sp, #4]
    3ea6:	9800      	ldr	r0, [sp, #0]
    3ea8:	9e08      	ldr	r6, [sp, #32]
    3eaa:	47b0      	blx	r6
    3eac:	1c43      	adds	r3, r0, #1
    3eae:	d00e      	beq.n	3ece <_printf_common+0x92>
    3eb0:	3501      	adds	r5, #1
    3eb2:	68e3      	ldr	r3, [r4, #12]
    3eb4:	683a      	ldr	r2, [r7, #0]
    3eb6:	1a9b      	subs	r3, r3, r2
    3eb8:	429d      	cmp	r5, r3
    3eba:	dbf0      	blt.n	3e9e <_printf_common+0x62>
    3ebc:	e7da      	b.n	3e74 <_printf_common+0x38>
    3ebe:	0022      	movs	r2, r4
    3ec0:	9901      	ldr	r1, [sp, #4]
    3ec2:	3243      	adds	r2, #67	; 0x43
    3ec4:	9800      	ldr	r0, [sp, #0]
    3ec6:	9d08      	ldr	r5, [sp, #32]
    3ec8:	47a8      	blx	r5
    3eca:	1c43      	adds	r3, r0, #1
    3ecc:	d102      	bne.n	3ed4 <_printf_common+0x98>
    3ece:	2001      	movs	r0, #1
    3ed0:	4240      	negs	r0, r0
    3ed2:	e020      	b.n	3f16 <_printf_common+0xda>
    3ed4:	2306      	movs	r3, #6
    3ed6:	6820      	ldr	r0, [r4, #0]
    3ed8:	68e1      	ldr	r1, [r4, #12]
    3eda:	683a      	ldr	r2, [r7, #0]
    3edc:	4003      	ands	r3, r0
    3ede:	2500      	movs	r5, #0
    3ee0:	2b04      	cmp	r3, #4
    3ee2:	d103      	bne.n	3eec <_printf_common+0xb0>
    3ee4:	1a8d      	subs	r5, r1, r2
    3ee6:	43eb      	mvns	r3, r5
    3ee8:	17db      	asrs	r3, r3, #31
    3eea:	401d      	ands	r5, r3
    3eec:	68a3      	ldr	r3, [r4, #8]
    3eee:	6922      	ldr	r2, [r4, #16]
    3ef0:	4293      	cmp	r3, r2
    3ef2:	dd01      	ble.n	3ef8 <_printf_common+0xbc>
    3ef4:	1a9b      	subs	r3, r3, r2
    3ef6:	18ed      	adds	r5, r5, r3
    3ef8:	2700      	movs	r7, #0
    3efa:	42bd      	cmp	r5, r7
    3efc:	d00a      	beq.n	3f14 <_printf_common+0xd8>
    3efe:	0022      	movs	r2, r4
    3f00:	2301      	movs	r3, #1
    3f02:	321a      	adds	r2, #26
    3f04:	9901      	ldr	r1, [sp, #4]
    3f06:	9800      	ldr	r0, [sp, #0]
    3f08:	9e08      	ldr	r6, [sp, #32]
    3f0a:	47b0      	blx	r6
    3f0c:	1c43      	adds	r3, r0, #1
    3f0e:	d0de      	beq.n	3ece <_printf_common+0x92>
    3f10:	3701      	adds	r7, #1
    3f12:	e7f2      	b.n	3efa <_printf_common+0xbe>
    3f14:	2000      	movs	r0, #0
    3f16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00003f18 <_printf_i>:
    3f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f1a:	b08b      	sub	sp, #44	; 0x2c
    3f1c:	9206      	str	r2, [sp, #24]
    3f1e:	000a      	movs	r2, r1
    3f20:	3243      	adds	r2, #67	; 0x43
    3f22:	9307      	str	r3, [sp, #28]
    3f24:	9005      	str	r0, [sp, #20]
    3f26:	9204      	str	r2, [sp, #16]
    3f28:	7e0a      	ldrb	r2, [r1, #24]
    3f2a:	000c      	movs	r4, r1
    3f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3f2e:	2a6e      	cmp	r2, #110	; 0x6e
    3f30:	d100      	bne.n	3f34 <_printf_i+0x1c>
    3f32:	e0ab      	b.n	408c <_printf_i+0x174>
    3f34:	d811      	bhi.n	3f5a <_printf_i+0x42>
    3f36:	2a63      	cmp	r2, #99	; 0x63
    3f38:	d022      	beq.n	3f80 <_printf_i+0x68>
    3f3a:	d809      	bhi.n	3f50 <_printf_i+0x38>
    3f3c:	2a00      	cmp	r2, #0
    3f3e:	d100      	bne.n	3f42 <_printf_i+0x2a>
    3f40:	e0b5      	b.n	40ae <_printf_i+0x196>
    3f42:	2a58      	cmp	r2, #88	; 0x58
    3f44:	d000      	beq.n	3f48 <_printf_i+0x30>
    3f46:	e0c5      	b.n	40d4 <_printf_i+0x1bc>
    3f48:	3145      	adds	r1, #69	; 0x45
    3f4a:	700a      	strb	r2, [r1, #0]
    3f4c:	4a81      	ldr	r2, [pc, #516]	; (4154 <_printf_i+0x23c>)
    3f4e:	e04f      	b.n	3ff0 <_printf_i+0xd8>
    3f50:	2a64      	cmp	r2, #100	; 0x64
    3f52:	d01d      	beq.n	3f90 <_printf_i+0x78>
    3f54:	2a69      	cmp	r2, #105	; 0x69
    3f56:	d01b      	beq.n	3f90 <_printf_i+0x78>
    3f58:	e0bc      	b.n	40d4 <_printf_i+0x1bc>
    3f5a:	2a73      	cmp	r2, #115	; 0x73
    3f5c:	d100      	bne.n	3f60 <_printf_i+0x48>
    3f5e:	e0aa      	b.n	40b6 <_printf_i+0x19e>
    3f60:	d809      	bhi.n	3f76 <_printf_i+0x5e>
    3f62:	2a6f      	cmp	r2, #111	; 0x6f
    3f64:	d029      	beq.n	3fba <_printf_i+0xa2>
    3f66:	2a70      	cmp	r2, #112	; 0x70
    3f68:	d000      	beq.n	3f6c <_printf_i+0x54>
    3f6a:	e0b3      	b.n	40d4 <_printf_i+0x1bc>
    3f6c:	2220      	movs	r2, #32
    3f6e:	6809      	ldr	r1, [r1, #0]
    3f70:	430a      	orrs	r2, r1
    3f72:	6022      	str	r2, [r4, #0]
    3f74:	e037      	b.n	3fe6 <_printf_i+0xce>
    3f76:	2a75      	cmp	r2, #117	; 0x75
    3f78:	d01f      	beq.n	3fba <_printf_i+0xa2>
    3f7a:	2a78      	cmp	r2, #120	; 0x78
    3f7c:	d033      	beq.n	3fe6 <_printf_i+0xce>
    3f7e:	e0a9      	b.n	40d4 <_printf_i+0x1bc>
    3f80:	000e      	movs	r6, r1
    3f82:	681a      	ldr	r2, [r3, #0]
    3f84:	3642      	adds	r6, #66	; 0x42
    3f86:	1d11      	adds	r1, r2, #4
    3f88:	6019      	str	r1, [r3, #0]
    3f8a:	6813      	ldr	r3, [r2, #0]
    3f8c:	7033      	strb	r3, [r6, #0]
    3f8e:	e0a4      	b.n	40da <_printf_i+0x1c2>
    3f90:	6821      	ldr	r1, [r4, #0]
    3f92:	681a      	ldr	r2, [r3, #0]
    3f94:	0608      	lsls	r0, r1, #24
    3f96:	d406      	bmi.n	3fa6 <_printf_i+0x8e>
    3f98:	0649      	lsls	r1, r1, #25
    3f9a:	d504      	bpl.n	3fa6 <_printf_i+0x8e>
    3f9c:	1d11      	adds	r1, r2, #4
    3f9e:	6019      	str	r1, [r3, #0]
    3fa0:	2300      	movs	r3, #0
    3fa2:	5ed5      	ldrsh	r5, [r2, r3]
    3fa4:	e002      	b.n	3fac <_printf_i+0x94>
    3fa6:	1d11      	adds	r1, r2, #4
    3fa8:	6019      	str	r1, [r3, #0]
    3faa:	6815      	ldr	r5, [r2, #0]
    3fac:	2d00      	cmp	r5, #0
    3fae:	da3b      	bge.n	4028 <_printf_i+0x110>
    3fb0:	232d      	movs	r3, #45	; 0x2d
    3fb2:	9a04      	ldr	r2, [sp, #16]
    3fb4:	426d      	negs	r5, r5
    3fb6:	7013      	strb	r3, [r2, #0]
    3fb8:	e036      	b.n	4028 <_printf_i+0x110>
    3fba:	6821      	ldr	r1, [r4, #0]
    3fbc:	681a      	ldr	r2, [r3, #0]
    3fbe:	0608      	lsls	r0, r1, #24
    3fc0:	d406      	bmi.n	3fd0 <_printf_i+0xb8>
    3fc2:	0649      	lsls	r1, r1, #25
    3fc4:	d504      	bpl.n	3fd0 <_printf_i+0xb8>
    3fc6:	6815      	ldr	r5, [r2, #0]
    3fc8:	1d11      	adds	r1, r2, #4
    3fca:	6019      	str	r1, [r3, #0]
    3fcc:	b2ad      	uxth	r5, r5
    3fce:	e002      	b.n	3fd6 <_printf_i+0xbe>
    3fd0:	1d11      	adds	r1, r2, #4
    3fd2:	6019      	str	r1, [r3, #0]
    3fd4:	6815      	ldr	r5, [r2, #0]
    3fd6:	4b5f      	ldr	r3, [pc, #380]	; (4154 <_printf_i+0x23c>)
    3fd8:	7e22      	ldrb	r2, [r4, #24]
    3fda:	9303      	str	r3, [sp, #12]
    3fdc:	2708      	movs	r7, #8
    3fde:	2a6f      	cmp	r2, #111	; 0x6f
    3fe0:	d01d      	beq.n	401e <_printf_i+0x106>
    3fe2:	270a      	movs	r7, #10
    3fe4:	e01b      	b.n	401e <_printf_i+0x106>
    3fe6:	0022      	movs	r2, r4
    3fe8:	2178      	movs	r1, #120	; 0x78
    3fea:	3245      	adds	r2, #69	; 0x45
    3fec:	7011      	strb	r1, [r2, #0]
    3fee:	4a5a      	ldr	r2, [pc, #360]	; (4158 <_printf_i+0x240>)
    3ff0:	6819      	ldr	r1, [r3, #0]
    3ff2:	9203      	str	r2, [sp, #12]
    3ff4:	1d08      	adds	r0, r1, #4
    3ff6:	6822      	ldr	r2, [r4, #0]
    3ff8:	6018      	str	r0, [r3, #0]
    3ffa:	680d      	ldr	r5, [r1, #0]
    3ffc:	0610      	lsls	r0, r2, #24
    3ffe:	d402      	bmi.n	4006 <_printf_i+0xee>
    4000:	0650      	lsls	r0, r2, #25
    4002:	d500      	bpl.n	4006 <_printf_i+0xee>
    4004:	b2ad      	uxth	r5, r5
    4006:	07d3      	lsls	r3, r2, #31
    4008:	d502      	bpl.n	4010 <_printf_i+0xf8>
    400a:	2320      	movs	r3, #32
    400c:	431a      	orrs	r2, r3
    400e:	6022      	str	r2, [r4, #0]
    4010:	2710      	movs	r7, #16
    4012:	2d00      	cmp	r5, #0
    4014:	d103      	bne.n	401e <_printf_i+0x106>
    4016:	2320      	movs	r3, #32
    4018:	6822      	ldr	r2, [r4, #0]
    401a:	439a      	bics	r2, r3
    401c:	6022      	str	r2, [r4, #0]
    401e:	0023      	movs	r3, r4
    4020:	2200      	movs	r2, #0
    4022:	3343      	adds	r3, #67	; 0x43
    4024:	701a      	strb	r2, [r3, #0]
    4026:	e002      	b.n	402e <_printf_i+0x116>
    4028:	270a      	movs	r7, #10
    402a:	4b4a      	ldr	r3, [pc, #296]	; (4154 <_printf_i+0x23c>)
    402c:	9303      	str	r3, [sp, #12]
    402e:	6863      	ldr	r3, [r4, #4]
    4030:	60a3      	str	r3, [r4, #8]
    4032:	2b00      	cmp	r3, #0
    4034:	db09      	blt.n	404a <_printf_i+0x132>
    4036:	2204      	movs	r2, #4
    4038:	6821      	ldr	r1, [r4, #0]
    403a:	4391      	bics	r1, r2
    403c:	6021      	str	r1, [r4, #0]
    403e:	2d00      	cmp	r5, #0
    4040:	d105      	bne.n	404e <_printf_i+0x136>
    4042:	9e04      	ldr	r6, [sp, #16]
    4044:	2b00      	cmp	r3, #0
    4046:	d011      	beq.n	406c <_printf_i+0x154>
    4048:	e07b      	b.n	4142 <_printf_i+0x22a>
    404a:	2d00      	cmp	r5, #0
    404c:	d079      	beq.n	4142 <_printf_i+0x22a>
    404e:	9e04      	ldr	r6, [sp, #16]
    4050:	0028      	movs	r0, r5
    4052:	0039      	movs	r1, r7
    4054:	f7ff f8a4 	bl	31a0 <__aeabi_uidivmod>
    4058:	9b03      	ldr	r3, [sp, #12]
    405a:	3e01      	subs	r6, #1
    405c:	5c5b      	ldrb	r3, [r3, r1]
    405e:	0028      	movs	r0, r5
    4060:	7033      	strb	r3, [r6, #0]
    4062:	0039      	movs	r1, r7
    4064:	f7ff f816 	bl	3094 <__aeabi_uidiv>
    4068:	1e05      	subs	r5, r0, #0
    406a:	d1f1      	bne.n	4050 <_printf_i+0x138>
    406c:	2f08      	cmp	r7, #8
    406e:	d109      	bne.n	4084 <_printf_i+0x16c>
    4070:	6823      	ldr	r3, [r4, #0]
    4072:	07db      	lsls	r3, r3, #31
    4074:	d506      	bpl.n	4084 <_printf_i+0x16c>
    4076:	6863      	ldr	r3, [r4, #4]
    4078:	6922      	ldr	r2, [r4, #16]
    407a:	4293      	cmp	r3, r2
    407c:	dc02      	bgt.n	4084 <_printf_i+0x16c>
    407e:	2330      	movs	r3, #48	; 0x30
    4080:	3e01      	subs	r6, #1
    4082:	7033      	strb	r3, [r6, #0]
    4084:	9b04      	ldr	r3, [sp, #16]
    4086:	1b9b      	subs	r3, r3, r6
    4088:	6123      	str	r3, [r4, #16]
    408a:	e02b      	b.n	40e4 <_printf_i+0x1cc>
    408c:	6809      	ldr	r1, [r1, #0]
    408e:	681a      	ldr	r2, [r3, #0]
    4090:	0608      	lsls	r0, r1, #24
    4092:	d407      	bmi.n	40a4 <_printf_i+0x18c>
    4094:	0649      	lsls	r1, r1, #25
    4096:	d505      	bpl.n	40a4 <_printf_i+0x18c>
    4098:	1d11      	adds	r1, r2, #4
    409a:	6019      	str	r1, [r3, #0]
    409c:	6813      	ldr	r3, [r2, #0]
    409e:	8aa2      	ldrh	r2, [r4, #20]
    40a0:	801a      	strh	r2, [r3, #0]
    40a2:	e004      	b.n	40ae <_printf_i+0x196>
    40a4:	1d11      	adds	r1, r2, #4
    40a6:	6019      	str	r1, [r3, #0]
    40a8:	6813      	ldr	r3, [r2, #0]
    40aa:	6962      	ldr	r2, [r4, #20]
    40ac:	601a      	str	r2, [r3, #0]
    40ae:	2300      	movs	r3, #0
    40b0:	9e04      	ldr	r6, [sp, #16]
    40b2:	6123      	str	r3, [r4, #16]
    40b4:	e016      	b.n	40e4 <_printf_i+0x1cc>
    40b6:	681a      	ldr	r2, [r3, #0]
    40b8:	1d11      	adds	r1, r2, #4
    40ba:	6019      	str	r1, [r3, #0]
    40bc:	6816      	ldr	r6, [r2, #0]
    40be:	2100      	movs	r1, #0
    40c0:	6862      	ldr	r2, [r4, #4]
    40c2:	0030      	movs	r0, r6
    40c4:	f000 f906 	bl	42d4 <memchr>
    40c8:	2800      	cmp	r0, #0
    40ca:	d001      	beq.n	40d0 <_printf_i+0x1b8>
    40cc:	1b80      	subs	r0, r0, r6
    40ce:	6060      	str	r0, [r4, #4]
    40d0:	6863      	ldr	r3, [r4, #4]
    40d2:	e003      	b.n	40dc <_printf_i+0x1c4>
    40d4:	0026      	movs	r6, r4
    40d6:	3642      	adds	r6, #66	; 0x42
    40d8:	7032      	strb	r2, [r6, #0]
    40da:	2301      	movs	r3, #1
    40dc:	6123      	str	r3, [r4, #16]
    40de:	2300      	movs	r3, #0
    40e0:	9a04      	ldr	r2, [sp, #16]
    40e2:	7013      	strb	r3, [r2, #0]
    40e4:	9b07      	ldr	r3, [sp, #28]
    40e6:	aa09      	add	r2, sp, #36	; 0x24
    40e8:	9300      	str	r3, [sp, #0]
    40ea:	0021      	movs	r1, r4
    40ec:	9b06      	ldr	r3, [sp, #24]
    40ee:	9805      	ldr	r0, [sp, #20]
    40f0:	f7ff fea4 	bl	3e3c <_printf_common>
    40f4:	1c43      	adds	r3, r0, #1
    40f6:	d102      	bne.n	40fe <_printf_i+0x1e6>
    40f8:	2001      	movs	r0, #1
    40fa:	4240      	negs	r0, r0
    40fc:	e027      	b.n	414e <_printf_i+0x236>
    40fe:	6923      	ldr	r3, [r4, #16]
    4100:	0032      	movs	r2, r6
    4102:	9906      	ldr	r1, [sp, #24]
    4104:	9805      	ldr	r0, [sp, #20]
    4106:	9d07      	ldr	r5, [sp, #28]
    4108:	47a8      	blx	r5
    410a:	1c43      	adds	r3, r0, #1
    410c:	d0f4      	beq.n	40f8 <_printf_i+0x1e0>
    410e:	6823      	ldr	r3, [r4, #0]
    4110:	2500      	movs	r5, #0
    4112:	079b      	lsls	r3, r3, #30
    4114:	d40f      	bmi.n	4136 <_printf_i+0x21e>
    4116:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4118:	68e0      	ldr	r0, [r4, #12]
    411a:	4298      	cmp	r0, r3
    411c:	da17      	bge.n	414e <_printf_i+0x236>
    411e:	0018      	movs	r0, r3
    4120:	e015      	b.n	414e <_printf_i+0x236>
    4122:	0022      	movs	r2, r4
    4124:	2301      	movs	r3, #1
    4126:	3219      	adds	r2, #25
    4128:	9906      	ldr	r1, [sp, #24]
    412a:	9805      	ldr	r0, [sp, #20]
    412c:	9e07      	ldr	r6, [sp, #28]
    412e:	47b0      	blx	r6
    4130:	1c43      	adds	r3, r0, #1
    4132:	d0e1      	beq.n	40f8 <_printf_i+0x1e0>
    4134:	3501      	adds	r5, #1
    4136:	68e3      	ldr	r3, [r4, #12]
    4138:	9a09      	ldr	r2, [sp, #36]	; 0x24
    413a:	1a9b      	subs	r3, r3, r2
    413c:	429d      	cmp	r5, r3
    413e:	dbf0      	blt.n	4122 <_printf_i+0x20a>
    4140:	e7e9      	b.n	4116 <_printf_i+0x1fe>
    4142:	0026      	movs	r6, r4
    4144:	9b03      	ldr	r3, [sp, #12]
    4146:	3642      	adds	r6, #66	; 0x42
    4148:	781b      	ldrb	r3, [r3, #0]
    414a:	7033      	strb	r3, [r6, #0]
    414c:	e78e      	b.n	406c <_printf_i+0x154>
    414e:	b00b      	add	sp, #44	; 0x2c
    4150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4152:	46c0      	nop			; (mov r8, r8)
    4154:	000045a9 	.word	0x000045a9
    4158:	000045ba 	.word	0x000045ba

0000415c <_sbrk_r>:
    415c:	2300      	movs	r3, #0
    415e:	b570      	push	{r4, r5, r6, lr}
    4160:	4c06      	ldr	r4, [pc, #24]	; (417c <_sbrk_r+0x20>)
    4162:	0005      	movs	r5, r0
    4164:	0008      	movs	r0, r1
    4166:	6023      	str	r3, [r4, #0]
    4168:	f7fe fbcc 	bl	2904 <_sbrk>
    416c:	1c43      	adds	r3, r0, #1
    416e:	d103      	bne.n	4178 <_sbrk_r+0x1c>
    4170:	6823      	ldr	r3, [r4, #0]
    4172:	2b00      	cmp	r3, #0
    4174:	d000      	beq.n	4178 <_sbrk_r+0x1c>
    4176:	602b      	str	r3, [r5, #0]
    4178:	bd70      	pop	{r4, r5, r6, pc}
    417a:	46c0      	nop			; (mov r8, r8)
    417c:	20000134 	.word	0x20000134

00004180 <__sread>:
    4180:	b570      	push	{r4, r5, r6, lr}
    4182:	000c      	movs	r4, r1
    4184:	250e      	movs	r5, #14
    4186:	5f49      	ldrsh	r1, [r1, r5]
    4188:	f000 f8b0 	bl	42ec <_read_r>
    418c:	2800      	cmp	r0, #0
    418e:	db03      	blt.n	4198 <__sread+0x18>
    4190:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4192:	181b      	adds	r3, r3, r0
    4194:	6563      	str	r3, [r4, #84]	; 0x54
    4196:	e003      	b.n	41a0 <__sread+0x20>
    4198:	89a2      	ldrh	r2, [r4, #12]
    419a:	4b02      	ldr	r3, [pc, #8]	; (41a4 <__sread+0x24>)
    419c:	4013      	ands	r3, r2
    419e:	81a3      	strh	r3, [r4, #12]
    41a0:	bd70      	pop	{r4, r5, r6, pc}
    41a2:	46c0      	nop			; (mov r8, r8)
    41a4:	ffffefff 	.word	0xffffefff

000041a8 <__swrite>:
    41a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41aa:	001f      	movs	r7, r3
    41ac:	898b      	ldrh	r3, [r1, #12]
    41ae:	0005      	movs	r5, r0
    41b0:	000c      	movs	r4, r1
    41b2:	0016      	movs	r6, r2
    41b4:	05db      	lsls	r3, r3, #23
    41b6:	d505      	bpl.n	41c4 <__swrite+0x1c>
    41b8:	230e      	movs	r3, #14
    41ba:	5ec9      	ldrsh	r1, [r1, r3]
    41bc:	2200      	movs	r2, #0
    41be:	2302      	movs	r3, #2
    41c0:	f000 f874 	bl	42ac <_lseek_r>
    41c4:	89a2      	ldrh	r2, [r4, #12]
    41c6:	4b05      	ldr	r3, [pc, #20]	; (41dc <__swrite+0x34>)
    41c8:	0028      	movs	r0, r5
    41ca:	4013      	ands	r3, r2
    41cc:	81a3      	strh	r3, [r4, #12]
    41ce:	0032      	movs	r2, r6
    41d0:	230e      	movs	r3, #14
    41d2:	5ee1      	ldrsh	r1, [r4, r3]
    41d4:	003b      	movs	r3, r7
    41d6:	f000 f81f 	bl	4218 <_write_r>
    41da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41dc:	ffffefff 	.word	0xffffefff

000041e0 <__sseek>:
    41e0:	b570      	push	{r4, r5, r6, lr}
    41e2:	000c      	movs	r4, r1
    41e4:	250e      	movs	r5, #14
    41e6:	5f49      	ldrsh	r1, [r1, r5]
    41e8:	f000 f860 	bl	42ac <_lseek_r>
    41ec:	89a3      	ldrh	r3, [r4, #12]
    41ee:	1c42      	adds	r2, r0, #1
    41f0:	d103      	bne.n	41fa <__sseek+0x1a>
    41f2:	4a05      	ldr	r2, [pc, #20]	; (4208 <__sseek+0x28>)
    41f4:	4013      	ands	r3, r2
    41f6:	81a3      	strh	r3, [r4, #12]
    41f8:	e004      	b.n	4204 <__sseek+0x24>
    41fa:	2280      	movs	r2, #128	; 0x80
    41fc:	0152      	lsls	r2, r2, #5
    41fe:	4313      	orrs	r3, r2
    4200:	81a3      	strh	r3, [r4, #12]
    4202:	6560      	str	r0, [r4, #84]	; 0x54
    4204:	bd70      	pop	{r4, r5, r6, pc}
    4206:	46c0      	nop			; (mov r8, r8)
    4208:	ffffefff 	.word	0xffffefff

0000420c <__sclose>:
    420c:	b510      	push	{r4, lr}
    420e:	230e      	movs	r3, #14
    4210:	5ec9      	ldrsh	r1, [r1, r3]
    4212:	f000 f815 	bl	4240 <_close_r>
    4216:	bd10      	pop	{r4, pc}

00004218 <_write_r>:
    4218:	b570      	push	{r4, r5, r6, lr}
    421a:	0005      	movs	r5, r0
    421c:	0008      	movs	r0, r1
    421e:	0011      	movs	r1, r2
    4220:	2200      	movs	r2, #0
    4222:	4c06      	ldr	r4, [pc, #24]	; (423c <_write_r+0x24>)
    4224:	6022      	str	r2, [r4, #0]
    4226:	001a      	movs	r2, r3
    4228:	f7fe fb36 	bl	2898 <_write>
    422c:	1c43      	adds	r3, r0, #1
    422e:	d103      	bne.n	4238 <_write_r+0x20>
    4230:	6823      	ldr	r3, [r4, #0]
    4232:	2b00      	cmp	r3, #0
    4234:	d000      	beq.n	4238 <_write_r+0x20>
    4236:	602b      	str	r3, [r5, #0]
    4238:	bd70      	pop	{r4, r5, r6, pc}
    423a:	46c0      	nop			; (mov r8, r8)
    423c:	20000134 	.word	0x20000134

00004240 <_close_r>:
    4240:	2300      	movs	r3, #0
    4242:	b570      	push	{r4, r5, r6, lr}
    4244:	4c06      	ldr	r4, [pc, #24]	; (4260 <_close_r+0x20>)
    4246:	0005      	movs	r5, r0
    4248:	0008      	movs	r0, r1
    424a:	6023      	str	r3, [r4, #0]
    424c:	f7fe fb78 	bl	2940 <_close>
    4250:	1c43      	adds	r3, r0, #1
    4252:	d103      	bne.n	425c <_close_r+0x1c>
    4254:	6823      	ldr	r3, [r4, #0]
    4256:	2b00      	cmp	r3, #0
    4258:	d000      	beq.n	425c <_close_r+0x1c>
    425a:	602b      	str	r3, [r5, #0]
    425c:	bd70      	pop	{r4, r5, r6, pc}
    425e:	46c0      	nop			; (mov r8, r8)
    4260:	20000134 	.word	0x20000134

00004264 <_fstat_r>:
    4264:	2300      	movs	r3, #0
    4266:	b570      	push	{r4, r5, r6, lr}
    4268:	4c06      	ldr	r4, [pc, #24]	; (4284 <_fstat_r+0x20>)
    426a:	0005      	movs	r5, r0
    426c:	0008      	movs	r0, r1
    426e:	0011      	movs	r1, r2
    4270:	6023      	str	r3, [r4, #0]
    4272:	f7fe fb6f 	bl	2954 <_fstat>
    4276:	1c43      	adds	r3, r0, #1
    4278:	d103      	bne.n	4282 <_fstat_r+0x1e>
    427a:	6823      	ldr	r3, [r4, #0]
    427c:	2b00      	cmp	r3, #0
    427e:	d000      	beq.n	4282 <_fstat_r+0x1e>
    4280:	602b      	str	r3, [r5, #0]
    4282:	bd70      	pop	{r4, r5, r6, pc}
    4284:	20000134 	.word	0x20000134

00004288 <_isatty_r>:
    4288:	2300      	movs	r3, #0
    428a:	b570      	push	{r4, r5, r6, lr}
    428c:	4c06      	ldr	r4, [pc, #24]	; (42a8 <_isatty_r+0x20>)
    428e:	0005      	movs	r5, r0
    4290:	0008      	movs	r0, r1
    4292:	6023      	str	r3, [r4, #0]
    4294:	f7fe fb6c 	bl	2970 <_isatty>
    4298:	1c43      	adds	r3, r0, #1
    429a:	d103      	bne.n	42a4 <_isatty_r+0x1c>
    429c:	6823      	ldr	r3, [r4, #0]
    429e:	2b00      	cmp	r3, #0
    42a0:	d000      	beq.n	42a4 <_isatty_r+0x1c>
    42a2:	602b      	str	r3, [r5, #0]
    42a4:	bd70      	pop	{r4, r5, r6, pc}
    42a6:	46c0      	nop			; (mov r8, r8)
    42a8:	20000134 	.word	0x20000134

000042ac <_lseek_r>:
    42ac:	b570      	push	{r4, r5, r6, lr}
    42ae:	0005      	movs	r5, r0
    42b0:	0008      	movs	r0, r1
    42b2:	0011      	movs	r1, r2
    42b4:	2200      	movs	r2, #0
    42b6:	4c06      	ldr	r4, [pc, #24]	; (42d0 <_lseek_r+0x24>)
    42b8:	6022      	str	r2, [r4, #0]
    42ba:	001a      	movs	r2, r3
    42bc:	f7fe fb62 	bl	2984 <_lseek>
    42c0:	1c43      	adds	r3, r0, #1
    42c2:	d103      	bne.n	42cc <_lseek_r+0x20>
    42c4:	6823      	ldr	r3, [r4, #0]
    42c6:	2b00      	cmp	r3, #0
    42c8:	d000      	beq.n	42cc <_lseek_r+0x20>
    42ca:	602b      	str	r3, [r5, #0]
    42cc:	bd70      	pop	{r4, r5, r6, pc}
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	20000134 	.word	0x20000134

000042d4 <memchr>:
    42d4:	b2c9      	uxtb	r1, r1
    42d6:	1882      	adds	r2, r0, r2
    42d8:	4290      	cmp	r0, r2
    42da:	d004      	beq.n	42e6 <memchr+0x12>
    42dc:	7803      	ldrb	r3, [r0, #0]
    42de:	428b      	cmp	r3, r1
    42e0:	d002      	beq.n	42e8 <memchr+0x14>
    42e2:	3001      	adds	r0, #1
    42e4:	e7f8      	b.n	42d8 <memchr+0x4>
    42e6:	2000      	movs	r0, #0
    42e8:	4770      	bx	lr
	...

000042ec <_read_r>:
    42ec:	b570      	push	{r4, r5, r6, lr}
    42ee:	0005      	movs	r5, r0
    42f0:	0008      	movs	r0, r1
    42f2:	0011      	movs	r1, r2
    42f4:	2200      	movs	r2, #0
    42f6:	4c06      	ldr	r4, [pc, #24]	; (4310 <_read_r+0x24>)
    42f8:	6022      	str	r2, [r4, #0]
    42fa:	001a      	movs	r2, r3
    42fc:	f7fe faa2 	bl	2844 <_read>
    4300:	1c43      	adds	r3, r0, #1
    4302:	d103      	bne.n	430c <_read_r+0x20>
    4304:	6823      	ldr	r3, [r4, #0]
    4306:	2b00      	cmp	r3, #0
    4308:	d000      	beq.n	430c <_read_r+0x20>
    430a:	602b      	str	r3, [r5, #0]
    430c:	bd70      	pop	{r4, r5, r6, pc}
    430e:	46c0      	nop			; (mov r8, r8)
    4310:	20000134 	.word	0x20000134
    4314:	00000426 	.word	0x00000426
    4318:	00000426 	.word	0x00000426
    431c:	0000041a 	.word	0x0000041a
    4320:	00000426 	.word	0x00000426
    4324:	0000041a 	.word	0x0000041a
    4328:	000003fa 	.word	0x000003fa
    432c:	000003fa 	.word	0x000003fa
    4330:	00000426 	.word	0x00000426
    4334:	00000426 	.word	0x00000426
    4338:	00000426 	.word	0x00000426
    433c:	00000426 	.word	0x00000426
    4340:	00000426 	.word	0x00000426
    4344:	00000426 	.word	0x00000426
    4348:	00000426 	.word	0x00000426
    434c:	00000426 	.word	0x00000426
    4350:	00000426 	.word	0x00000426
    4354:	00000426 	.word	0x00000426
    4358:	00000426 	.word	0x00000426
    435c:	00000426 	.word	0x00000426
    4360:	00000426 	.word	0x00000426
    4364:	00000426 	.word	0x00000426
    4368:	00000426 	.word	0x00000426
    436c:	00000426 	.word	0x00000426
    4370:	00000426 	.word	0x00000426
    4374:	00000426 	.word	0x00000426
    4378:	00000426 	.word	0x00000426
    437c:	00000426 	.word	0x00000426
    4380:	00000426 	.word	0x00000426
    4384:	00000426 	.word	0x00000426
    4388:	00000426 	.word	0x00000426
    438c:	00000426 	.word	0x00000426
    4390:	00000426 	.word	0x00000426
    4394:	00000426 	.word	0x00000426
    4398:	00000426 	.word	0x00000426
    439c:	00000426 	.word	0x00000426
    43a0:	00000426 	.word	0x00000426
    43a4:	00000426 	.word	0x00000426
    43a8:	00000426 	.word	0x00000426
    43ac:	00000426 	.word	0x00000426
    43b0:	00000426 	.word	0x00000426
    43b4:	00000426 	.word	0x00000426
    43b8:	00000426 	.word	0x00000426
    43bc:	00000426 	.word	0x00000426
    43c0:	00000426 	.word	0x00000426
    43c4:	00000426 	.word	0x00000426
    43c8:	00000426 	.word	0x00000426
    43cc:	00000426 	.word	0x00000426
    43d0:	00000426 	.word	0x00000426
    43d4:	00000426 	.word	0x00000426
    43d8:	00000426 	.word	0x00000426
    43dc:	00000426 	.word	0x00000426
    43e0:	00000426 	.word	0x00000426
    43e4:	00000426 	.word	0x00000426
    43e8:	00000426 	.word	0x00000426
    43ec:	00000426 	.word	0x00000426
    43f0:	00000426 	.word	0x00000426
    43f4:	00000426 	.word	0x00000426
    43f8:	00000426 	.word	0x00000426
    43fc:	00000426 	.word	0x00000426
    4400:	00000426 	.word	0x00000426
    4404:	00000426 	.word	0x00000426
    4408:	00000426 	.word	0x00000426
    440c:	00000426 	.word	0x00000426
    4410:	00000426 	.word	0x00000426
    4414:	0000041a 	.word	0x0000041a
    4418:	0000041a 	.word	0x0000041a
    441c:	0000042a 	.word	0x0000042a
    4420:	0000042a 	.word	0x0000042a
    4424:	0000042a 	.word	0x0000042a
    4428:	0000042a 	.word	0x0000042a
    442c:	42000800 	.word	0x42000800
    4430:	42000c00 	.word	0x42000c00
    4434:	42001000 	.word	0x42001000
    4438:	42001400 	.word	0x42001400
    443c:	42001800 	.word	0x42001800
    4440:	42001c00 	.word	0x42001c00
    4444:	0c0b0a09 	.word	0x0c0b0a09
    4448:	00000e0d 	.word	0x00000e0d
    444c:	00001b2e 	.word	0x00001b2e
    4450:	00001ba6 	.word	0x00001ba6
    4454:	00001ba6 	.word	0x00001ba6
    4458:	00001b4c 	.word	0x00001b4c
    445c:	00001b46 	.word	0x00001b46
    4460:	00001b52 	.word	0x00001b52
    4464:	00001b34 	.word	0x00001b34
    4468:	00001b58 	.word	0x00001b58
    446c:	00001b8c 	.word	0x00001b8c
    4470:	00001d8c 	.word	0x00001d8c
    4474:	00001ddc 	.word	0x00001ddc
    4478:	00001ddc 	.word	0x00001ddc
    447c:	00001dd8 	.word	0x00001dd8
    4480:	00001d7e 	.word	0x00001d7e
    4484:	00001d9e 	.word	0x00001d9e
    4488:	00001d6e 	.word	0x00001d6e
    448c:	00001db0 	.word	0x00001db0
    4490:	00001dc2 	.word	0x00001dc2
    4494:	00001e2a 	.word	0x00001e2a
    4498:	00001e58 	.word	0x00001e58
    449c:	00001e58 	.word	0x00001e58
    44a0:	00001e54 	.word	0x00001e54
    44a4:	00001e24 	.word	0x00001e24
    44a8:	00001e30 	.word	0x00001e30
    44ac:	00001e1e 	.word	0x00001e1e
    44b0:	00001e36 	.word	0x00001e36
    44b4:	00001e3c 	.word	0x00001e3c
    44b8:	72677055 	.word	0x72677055
    44bc:	6e696461 	.word	0x6e696461
    44c0:	69662067 	.word	0x69662067
    44c4:	61776d72 	.word	0x61776d72
    44c8:	66206572 	.word	0x66206572
    44cc:	206d6f72 	.word	0x206d6f72
    44d0:	61636f6c 	.word	0x61636f6c
    44d4:	6e6f6974 	.word	0x6e6f6974
    44d8:	2e642520 	.word	0x2e642520
    44dc:	0000000a 	.word	0x0000000a
    44e0:	72677055 	.word	0x72677055
    44e4:	20656461 	.word	0x20656461
    44e8:	706d6f63 	.word	0x706d6f63
    44ec:	6574656c 	.word	0x6574656c
    44f0:	00000000 	.word	0x00000000
    44f4:	74696e49 	.word	0x74696e49
    44f8:	6e6f6420 	.word	0x6e6f6420
    44fc:	00002e65 	.word	0x00002e65
    4500:	61766e49 	.word	0x61766e49
    4504:	2064696c 	.word	0x2064696c
    4508:	73205746 	.word	0x73205746
    450c:	2c746174 	.word	0x2c746174
    4510:	69727720 	.word	0x69727720
    4514:	676e6974 	.word	0x676e6974
    4518:	66656420 	.word	0x66656420
    451c:	746c7561 	.word	0x746c7561
    4520:	00000000 	.word	0x00000000
    4524:	72617453 	.word	0x72617453
    4528:	676e6974 	.word	0x676e6974
    452c:	70706120 	.word	0x70706120
    4530:	00          	.byte	0x00
    4531:	43          	.byte	0x43
	...

00004534 <_global_impure_ptr>:
    4534:	0c 00 00 20                                         ... 

00004538 <__sf_fake_stdin>:
	...

00004558 <__sf_fake_stdout>:
	...

00004578 <__sf_fake_stderr>:
	...
    4598:	23 2d 30 2b 20 00 68 6c 4c 00 65 66 67 45 46 47     #-0+ .hlL.efgEFG
    45a8:	00 30 31 32 33 34 35 36 37 38 39 41 42 43 44 45     .0123456789ABCDE
    45b8:	46 00 30 31 32 33 34 35 36 37 38 39 61 62 63 64     F.0123456789abcd
    45c8:	65 66 00 00                                         ef..

000045cc <_init>:
    45cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45ce:	46c0      	nop			; (mov r8, r8)
    45d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    45d2:	bc08      	pop	{r3}
    45d4:	469e      	mov	lr, r3
    45d6:	4770      	bx	lr

000045d8 <__init_array_start>:
    45d8:	000000dd 	.word	0x000000dd

000045dc <_fini>:
    45dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45de:	46c0      	nop			; (mov r8, r8)
    45e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    45e2:	bc08      	pop	{r3}
    45e4:	469e      	mov	lr, r3
    45e6:	4770      	bx	lr

000045e8 <__fini_array_start>:
    45e8:	000000b5 	.word	0x000000b5
