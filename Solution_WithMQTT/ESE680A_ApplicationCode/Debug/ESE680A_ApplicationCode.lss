
ESE680A_ApplicationCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013988  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000094  20000000  0001b988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000e14  20000094  0001ba1c  00020094  2**2
                  ALLOC
  3 .stack        00002000  20000ea8  0001c830  00020094  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004c29f  00000000  00000000  00020186  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005ff5  00000000  00000000  0006c425  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007f20  00000000  00000000  0007241a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001668  00000000  00000000  0007a33a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001498  00000000  00000000  0007b9a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002391a  00000000  00000000  0007ce3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00021665  00000000  00000000  000a0754  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00095471  00000000  00000000  000c1db9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000057f8  00000000  00000000  0015722c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <_sfixed>:
    8000:	20002ea8 	.word	0x20002ea8
    8004:	00010d25 	.word	0x00010d25
    8008:	00010e1d 	.word	0x00010e1d
    800c:	00010e1d 	.word	0x00010e1d
	...
    802c:	00010e1d 	.word	0x00010e1d
	...
    8038:	00010e1d 	.word	0x00010e1d
    803c:	00010e1d 	.word	0x00010e1d
    8040:	00010e1d 	.word	0x00010e1d
    8044:	00010e1d 	.word	0x00010e1d
    8048:	00010e1d 	.word	0x00010e1d
    804c:	0000e311 	.word	0x0000e311
    8050:	0000de25 	.word	0x0000de25
    8054:	00010e1d 	.word	0x00010e1d
    8058:	00010e1d 	.word	0x00010e1d
    805c:	00010e1d 	.word	0x00010e1d
    8060:	00010e1d 	.word	0x00010e1d
    8064:	0001283d 	.word	0x0001283d
    8068:	00012855 	.word	0x00012855
    806c:	0001286d 	.word	0x0001286d
    8070:	00012885 	.word	0x00012885
    8074:	0001289d 	.word	0x0001289d
    8078:	000128b5 	.word	0x000128b5
    807c:	0000ef15 	.word	0x0000ef15
    8080:	0000ef29 	.word	0x0000ef29
    8084:	0000ef3d 	.word	0x0000ef3d
    8088:	00010e1d 	.word	0x00010e1d
    808c:	00010e1d 	.word	0x00010e1d
    8090:	00010e1d 	.word	0x00010e1d
	...
    809c:	00010e1d 	.word	0x00010e1d
    80a0:	00010e1d 	.word	0x00010e1d
    80a4:	00010e1d 	.word	0x00010e1d
    80a8:	00010e1d 	.word	0x00010e1d
    80ac:	00010e1d 	.word	0x00010e1d
    80b0:	00000000 	.word	0x00000000

000080b4 <__do_global_dtors_aux>:
    80b4:	b510      	push	{r4, lr}
    80b6:	4c06      	ldr	r4, [pc, #24]	; (80d0 <__do_global_dtors_aux+0x1c>)
    80b8:	7823      	ldrb	r3, [r4, #0]
    80ba:	2b00      	cmp	r3, #0
    80bc:	d107      	bne.n	80ce <__do_global_dtors_aux+0x1a>
    80be:	4b05      	ldr	r3, [pc, #20]	; (80d4 <__do_global_dtors_aux+0x20>)
    80c0:	2b00      	cmp	r3, #0
    80c2:	d002      	beq.n	80ca <__do_global_dtors_aux+0x16>
    80c4:	4804      	ldr	r0, [pc, #16]	; (80d8 <__do_global_dtors_aux+0x24>)
    80c6:	e000      	b.n	80ca <__do_global_dtors_aux+0x16>
    80c8:	bf00      	nop
    80ca:	2301      	movs	r3, #1
    80cc:	7023      	strb	r3, [r4, #0]
    80ce:	bd10      	pop	{r4, pc}
    80d0:	20000094 	.word	0x20000094
    80d4:	00000000 	.word	0x00000000
    80d8:	0001b988 	.word	0x0001b988

000080dc <frame_dummy>:
    80dc:	4b08      	ldr	r3, [pc, #32]	; (8100 <frame_dummy+0x24>)
    80de:	b510      	push	{r4, lr}
    80e0:	2b00      	cmp	r3, #0
    80e2:	d003      	beq.n	80ec <frame_dummy+0x10>
    80e4:	4907      	ldr	r1, [pc, #28]	; (8104 <frame_dummy+0x28>)
    80e6:	4808      	ldr	r0, [pc, #32]	; (8108 <frame_dummy+0x2c>)
    80e8:	e000      	b.n	80ec <frame_dummy+0x10>
    80ea:	bf00      	nop
    80ec:	4807      	ldr	r0, [pc, #28]	; (810c <frame_dummy+0x30>)
    80ee:	6803      	ldr	r3, [r0, #0]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d100      	bne.n	80f6 <frame_dummy+0x1a>
    80f4:	bd10      	pop	{r4, pc}
    80f6:	4b06      	ldr	r3, [pc, #24]	; (8110 <frame_dummy+0x34>)
    80f8:	2b00      	cmp	r3, #0
    80fa:	d0fb      	beq.n	80f4 <frame_dummy+0x18>
    80fc:	4798      	blx	r3
    80fe:	e7f9      	b.n	80f4 <frame_dummy+0x18>
    8100:	00000000 	.word	0x00000000
    8104:	20000098 	.word	0x20000098
    8108:	0001b988 	.word	0x0001b988
    810c:	0001b988 	.word	0x0001b988
    8110:	00000000 	.word	0x00000000

00008114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8114:	b580      	push	{r7, lr}
    8116:	b084      	sub	sp, #16
    8118:	af00      	add	r7, sp, #0
    811a:	0002      	movs	r2, r0
    811c:	1dfb      	adds	r3, r7, #7
    811e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8120:	230f      	movs	r3, #15
    8122:	18fb      	adds	r3, r7, r3
    8124:	1dfa      	adds	r2, r7, #7
    8126:	7812      	ldrb	r2, [r2, #0]
    8128:	09d2      	lsrs	r2, r2, #7
    812a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    812c:	230e      	movs	r3, #14
    812e:	18fb      	adds	r3, r7, r3
    8130:	1dfa      	adds	r2, r7, #7
    8132:	7812      	ldrb	r2, [r2, #0]
    8134:	0952      	lsrs	r2, r2, #5
    8136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8138:	4b0d      	ldr	r3, [pc, #52]	; (8170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    813a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    813c:	230f      	movs	r3, #15
    813e:	18fb      	adds	r3, r7, r3
    8140:	781b      	ldrb	r3, [r3, #0]
    8142:	2b00      	cmp	r3, #0
    8144:	d10f      	bne.n	8166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8146:	230f      	movs	r3, #15
    8148:	18fb      	adds	r3, r7, r3
    814a:	781b      	ldrb	r3, [r3, #0]
    814c:	009b      	lsls	r3, r3, #2
    814e:	2210      	movs	r2, #16
    8150:	4694      	mov	ip, r2
    8152:	44bc      	add	ip, r7
    8154:	4463      	add	r3, ip
    8156:	3b08      	subs	r3, #8
    8158:	681a      	ldr	r2, [r3, #0]
    815a:	230e      	movs	r3, #14
    815c:	18fb      	adds	r3, r7, r3
    815e:	781b      	ldrb	r3, [r3, #0]
    8160:	01db      	lsls	r3, r3, #7
    8162:	18d3      	adds	r3, r2, r3
    8164:	e000      	b.n	8168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    8166:	2300      	movs	r3, #0
	}
}
    8168:	0018      	movs	r0, r3
    816a:	46bd      	mov	sp, r7
    816c:	b004      	add	sp, #16
    816e:	bd80      	pop	{r7, pc}
    8170:	41004400 	.word	0x41004400

00008174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8174:	b580      	push	{r7, lr}
    8176:	b082      	sub	sp, #8
    8178:	af00      	add	r7, sp, #0
    817a:	0002      	movs	r2, r0
    817c:	1dfb      	adds	r3, r7, #7
    817e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8180:	1dfb      	adds	r3, r7, #7
    8182:	781b      	ldrb	r3, [r3, #0]
    8184:	0018      	movs	r0, r3
    8186:	4b03      	ldr	r3, [pc, #12]	; (8194 <port_get_group_from_gpio_pin+0x20>)
    8188:	4798      	blx	r3
    818a:	0003      	movs	r3, r0
}
    818c:	0018      	movs	r0, r3
    818e:	46bd      	mov	sp, r7
    8190:	b002      	add	sp, #8
    8192:	bd80      	pop	{r7, pc}
    8194:	00008115 	.word	0x00008115

00008198 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    8198:	b580      	push	{r7, lr}
    819a:	b082      	sub	sp, #8
    819c:	af00      	add	r7, sp, #0
    819e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    81a0:	687b      	ldr	r3, [r7, #4]
    81a2:	2200      	movs	r2, #0
    81a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    81a6:	687b      	ldr	r3, [r7, #4]
    81a8:	2201      	movs	r2, #1
    81aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    81ac:	687b      	ldr	r3, [r7, #4]
    81ae:	2200      	movs	r2, #0
    81b0:	709a      	strb	r2, [r3, #2]
}
    81b2:	46c0      	nop			; (mov r8, r8)
    81b4:	46bd      	mov	sp, r7
    81b6:	b002      	add	sp, #8
    81b8:	bd80      	pop	{r7, pc}
    81ba:	46c0      	nop			; (mov r8, r8)

000081bc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    81bc:	b580      	push	{r7, lr}
    81be:	b084      	sub	sp, #16
    81c0:	af00      	add	r7, sp, #0
    81c2:	0002      	movs	r2, r0
    81c4:	1dfb      	adds	r3, r7, #7
    81c6:	701a      	strb	r2, [r3, #0]
    81c8:	1dbb      	adds	r3, r7, #6
    81ca:	1c0a      	adds	r2, r1, #0
    81cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    81ce:	1dfb      	adds	r3, r7, #7
    81d0:	781b      	ldrb	r3, [r3, #0]
    81d2:	0018      	movs	r0, r3
    81d4:	4b0d      	ldr	r3, [pc, #52]	; (820c <port_pin_set_output_level+0x50>)
    81d6:	4798      	blx	r3
    81d8:	0003      	movs	r3, r0
    81da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    81dc:	1dfb      	adds	r3, r7, #7
    81de:	781b      	ldrb	r3, [r3, #0]
    81e0:	221f      	movs	r2, #31
    81e2:	4013      	ands	r3, r2
    81e4:	2201      	movs	r2, #1
    81e6:	409a      	lsls	r2, r3
    81e8:	0013      	movs	r3, r2
    81ea:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    81ec:	1dbb      	adds	r3, r7, #6
    81ee:	781b      	ldrb	r3, [r3, #0]
    81f0:	2b00      	cmp	r3, #0
    81f2:	d003      	beq.n	81fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    81f4:	68fb      	ldr	r3, [r7, #12]
    81f6:	68ba      	ldr	r2, [r7, #8]
    81f8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    81fa:	e002      	b.n	8202 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    81fc:	68fb      	ldr	r3, [r7, #12]
    81fe:	68ba      	ldr	r2, [r7, #8]
    8200:	615a      	str	r2, [r3, #20]
	}
}
    8202:	46c0      	nop			; (mov r8, r8)
    8204:	46bd      	mov	sp, r7
    8206:	b004      	add	sp, #16
    8208:	bd80      	pop	{r7, pc}
    820a:	46c0      	nop			; (mov r8, r8)
    820c:	00008175 	.word	0x00008175

00008210 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    8210:	b580      	push	{r7, lr}
    8212:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    8214:	4b04      	ldr	r3, [pc, #16]	; (8228 <system_interrupt_enable_global+0x18>)
    8216:	2201      	movs	r2, #1
    8218:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    821a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    821e:	b662      	cpsie	i
}
    8220:	46c0      	nop			; (mov r8, r8)
    8222:	46bd      	mov	sp, r7
    8224:	bd80      	pop	{r7, pc}
    8226:	46c0      	nop			; (mov r8, r8)
    8228:	2000000c 	.word	0x2000000c

0000822c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    822c:	b580      	push	{r7, lr}
    822e:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    8230:	4b04      	ldr	r3, [pc, #16]	; (8244 <chip_isr+0x18>)
    8232:	681b      	ldr	r3, [r3, #0]
    8234:	2b00      	cmp	r3, #0
    8236:	d002      	beq.n	823e <chip_isr+0x12>
		gpfIsr();
    8238:	4b02      	ldr	r3, [pc, #8]	; (8244 <chip_isr+0x18>)
    823a:	681b      	ldr	r3, [r3, #0]
    823c:	4798      	blx	r3
	}
}
    823e:	46c0      	nop			; (mov r8, r8)
    8240:	46bd      	mov	sp, r7
    8242:	bd80      	pop	{r7, pc}
    8244:	200000b0 	.word	0x200000b0

00008248 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    8248:	b580      	push	{r7, lr}
    824a:	b082      	sub	sp, #8
    824c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    824e:	1d3b      	adds	r3, r7, #4
    8250:	0018      	movs	r0, r3
    8252:	4b10      	ldr	r3, [pc, #64]	; (8294 <init_chip_pins+0x4c>)
    8254:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    8256:	1d3b      	adds	r3, r7, #4
    8258:	2201      	movs	r2, #1
    825a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    825c:	1d3b      	adds	r3, r7, #4
    825e:	0019      	movs	r1, r3
    8260:	201b      	movs	r0, #27
    8262:	4b0d      	ldr	r3, [pc, #52]	; (8298 <init_chip_pins+0x50>)
    8264:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    8266:	1d3b      	adds	r3, r7, #4
    8268:	0019      	movs	r1, r3
    826a:	201c      	movs	r0, #28
    826c:	4b0a      	ldr	r3, [pc, #40]	; (8298 <init_chip_pins+0x50>)
    826e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    8270:	1d3b      	adds	r3, r7, #4
    8272:	0019      	movs	r1, r3
    8274:	2028      	movs	r0, #40	; 0x28
    8276:	4b08      	ldr	r3, [pc, #32]	; (8298 <init_chip_pins+0x50>)
    8278:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    827a:	2100      	movs	r1, #0
    827c:	201c      	movs	r0, #28
    827e:	4b07      	ldr	r3, [pc, #28]	; (829c <init_chip_pins+0x54>)
    8280:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    8282:	2100      	movs	r1, #0
    8284:	201b      	movs	r0, #27
    8286:	4b05      	ldr	r3, [pc, #20]	; (829c <init_chip_pins+0x54>)
    8288:	4798      	blx	r3
}
    828a:	46c0      	nop			; (mov r8, r8)
    828c:	46bd      	mov	sp, r7
    828e:	b002      	add	sp, #8
    8290:	bd80      	pop	{r7, pc}
    8292:	46c0      	nop			; (mov r8, r8)
    8294:	00008199 	.word	0x00008199
    8298:	00012145 	.word	0x00012145
    829c:	000081bd 	.word	0x000081bd

000082a0 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    82a0:	b580      	push	{r7, lr}
    82a2:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    82a4:	4b0c      	ldr	r3, [pc, #48]	; (82d8 <nm_bsp_init+0x38>)
    82a6:	2200      	movs	r2, #0
    82a8:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    82aa:	4b0c      	ldr	r3, [pc, #48]	; (82dc <nm_bsp_init+0x3c>)
    82ac:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    82ae:	4b0c      	ldr	r3, [pc, #48]	; (82e0 <nm_bsp_init+0x40>)
    82b0:	681b      	ldr	r3, [r3, #0]
    82b2:	2201      	movs	r2, #1
    82b4:	4013      	ands	r3, r2
    82b6:	d004      	beq.n	82c2 <nm_bsp_init+0x22>
    82b8:	4b09      	ldr	r3, [pc, #36]	; (82e0 <nm_bsp_init+0x40>)
    82ba:	681b      	ldr	r3, [r3, #0]
    82bc:	2202      	movs	r2, #2
    82be:	4013      	ands	r3, r2
    82c0:	d101      	bne.n	82c6 <nm_bsp_init+0x26>
	    delay_init();
    82c2:	4b08      	ldr	r3, [pc, #32]	; (82e4 <nm_bsp_init+0x44>)
    82c4:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    82c6:	4b08      	ldr	r3, [pc, #32]	; (82e8 <nm_bsp_init+0x48>)
    82c8:	4798      	blx	r3

	system_interrupt_enable_global();
    82ca:	4b08      	ldr	r3, [pc, #32]	; (82ec <nm_bsp_init+0x4c>)
    82cc:	4798      	blx	r3

	return M2M_SUCCESS;
    82ce:	2300      	movs	r3, #0
}
    82d0:	0018      	movs	r0, r3
    82d2:	46bd      	mov	sp, r7
    82d4:	bd80      	pop	{r7, pc}
    82d6:	46c0      	nop			; (mov r8, r8)
    82d8:	200000b0 	.word	0x200000b0
    82dc:	00008249 	.word	0x00008249
    82e0:	e000e010 	.word	0xe000e010
    82e4:	00011b31 	.word	0x00011b31
    82e8:	000082f1 	.word	0x000082f1
    82ec:	00008211 	.word	0x00008211

000082f0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    82f0:	b580      	push	{r7, lr}
    82f2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    82f4:	2100      	movs	r1, #0
    82f6:	201c      	movs	r0, #28
    82f8:	4b0c      	ldr	r3, [pc, #48]	; (832c <nm_bsp_reset+0x3c>)
    82fa:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    82fc:	2100      	movs	r1, #0
    82fe:	201b      	movs	r0, #27
    8300:	4b0a      	ldr	r3, [pc, #40]	; (832c <nm_bsp_reset+0x3c>)
    8302:	4798      	blx	r3
	nm_bsp_sleep(100);
    8304:	2064      	movs	r0, #100	; 0x64
    8306:	4b0a      	ldr	r3, [pc, #40]	; (8330 <nm_bsp_reset+0x40>)
    8308:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    830a:	2101      	movs	r1, #1
    830c:	201c      	movs	r0, #28
    830e:	4b07      	ldr	r3, [pc, #28]	; (832c <nm_bsp_reset+0x3c>)
    8310:	4798      	blx	r3
	nm_bsp_sleep(100);
    8312:	2064      	movs	r0, #100	; 0x64
    8314:	4b06      	ldr	r3, [pc, #24]	; (8330 <nm_bsp_reset+0x40>)
    8316:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    8318:	2101      	movs	r1, #1
    831a:	201b      	movs	r0, #27
    831c:	4b03      	ldr	r3, [pc, #12]	; (832c <nm_bsp_reset+0x3c>)
    831e:	4798      	blx	r3
	nm_bsp_sleep(100);
    8320:	2064      	movs	r0, #100	; 0x64
    8322:	4b03      	ldr	r3, [pc, #12]	; (8330 <nm_bsp_reset+0x40>)
    8324:	4798      	blx	r3
}
    8326:	46c0      	nop			; (mov r8, r8)
    8328:	46bd      	mov	sp, r7
    832a:	bd80      	pop	{r7, pc}
    832c:	000081bd 	.word	0x000081bd
    8330:	00008335 	.word	0x00008335

00008334 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    8334:	b580      	push	{r7, lr}
    8336:	b082      	sub	sp, #8
    8338:	af00      	add	r7, sp, #0
    833a:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    833c:	e002      	b.n	8344 <nm_bsp_sleep+0x10>
		delay_ms(1);
    833e:	2001      	movs	r0, #1
    8340:	4b05      	ldr	r3, [pc, #20]	; (8358 <nm_bsp_sleep+0x24>)
    8342:	4798      	blx	r3
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
    8344:	687b      	ldr	r3, [r7, #4]
    8346:	1e5a      	subs	r2, r3, #1
    8348:	607a      	str	r2, [r7, #4]
    834a:	2b00      	cmp	r3, #0
    834c:	d1f7      	bne.n	833e <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
    834e:	46c0      	nop			; (mov r8, r8)
    8350:	46bd      	mov	sp, r7
    8352:	b002      	add	sp, #8
    8354:	bd80      	pop	{r7, pc}
    8356:	46c0      	nop			; (mov r8, r8)
    8358:	00011b89 	.word	0x00011b89

0000835c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    835c:	b580      	push	{r7, lr}
    835e:	b086      	sub	sp, #24
    8360:	af00      	add	r7, sp, #0
    8362:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    8364:	4b15      	ldr	r3, [pc, #84]	; (83bc <nm_bsp_register_isr+0x60>)
    8366:	687a      	ldr	r2, [r7, #4]
    8368:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    836a:	230c      	movs	r3, #12
    836c:	18fb      	adds	r3, r7, r3
    836e:	0018      	movs	r0, r3
    8370:	4b13      	ldr	r3, [pc, #76]	; (83c0 <nm_bsp_register_isr+0x64>)
    8372:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    8374:	230c      	movs	r3, #12
    8376:	18fb      	adds	r3, r7, r3
    8378:	2229      	movs	r2, #41	; 0x29
    837a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    837c:	230c      	movs	r3, #12
    837e:	18fb      	adds	r3, r7, r3
    8380:	2200      	movs	r2, #0
    8382:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    8384:	230c      	movs	r3, #12
    8386:	18fb      	adds	r3, r7, r3
    8388:	2201      	movs	r2, #1
    838a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    838c:	230c      	movs	r3, #12
    838e:	18fb      	adds	r3, r7, r3
    8390:	2202      	movs	r2, #2
    8392:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    8394:	230c      	movs	r3, #12
    8396:	18fb      	adds	r3, r7, r3
    8398:	0019      	movs	r1, r3
    839a:	2009      	movs	r0, #9
    839c:	4b09      	ldr	r3, [pc, #36]	; (83c4 <nm_bsp_register_isr+0x68>)
    839e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <nm_bsp_register_isr+0x6c>)
    83a2:	2200      	movs	r2, #0
    83a4:	2109      	movs	r1, #9
    83a6:	0018      	movs	r0, r3
    83a8:	4b08      	ldr	r3, [pc, #32]	; (83cc <nm_bsp_register_isr+0x70>)
    83aa:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    83ac:	2100      	movs	r1, #0
    83ae:	2009      	movs	r0, #9
    83b0:	4b07      	ldr	r3, [pc, #28]	; (83d0 <nm_bsp_register_isr+0x74>)
    83b2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    83b4:	46c0      	nop			; (mov r8, r8)
    83b6:	46bd      	mov	sp, r7
    83b8:	b006      	add	sp, #24
    83ba:	bd80      	pop	{r7, pc}
    83bc:	200000b0 	.word	0x200000b0
    83c0:	0000e131 	.word	0x0000e131
    83c4:	0000e165 	.word	0x0000e165
    83c8:	0000822d 	.word	0x0000822d
    83cc:	0000dd31 	.word	0x0000dd31
    83d0:	0000dd95 	.word	0x0000dd95

000083d4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    83d4:	b580      	push	{r7, lr}
    83d6:	b082      	sub	sp, #8
    83d8:	af00      	add	r7, sp, #0
    83da:	0002      	movs	r2, r0
    83dc:	1dfb      	adds	r3, r7, #7
    83de:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    83e0:	1dfb      	adds	r3, r7, #7
    83e2:	781b      	ldrb	r3, [r3, #0]
    83e4:	2b00      	cmp	r3, #0
    83e6:	d004      	beq.n	83f2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    83e8:	2100      	movs	r1, #0
    83ea:	2009      	movs	r0, #9
    83ec:	4b05      	ldr	r3, [pc, #20]	; (8404 <nm_bsp_interrupt_ctrl+0x30>)
    83ee:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    83f0:	e003      	b.n	83fa <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    83f2:	2100      	movs	r1, #0
    83f4:	2009      	movs	r0, #9
    83f6:	4b04      	ldr	r3, [pc, #16]	; (8408 <nm_bsp_interrupt_ctrl+0x34>)
    83f8:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    83fa:	46c0      	nop			; (mov r8, r8)
    83fc:	46bd      	mov	sp, r7
    83fe:	b002      	add	sp, #8
    8400:	bd80      	pop	{r7, pc}
    8402:	46c0      	nop			; (mov r8, r8)
    8404:	0000dd95 	.word	0x0000dd95
    8408:	0000dddd 	.word	0x0000dddd

0000840c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    840c:	b580      	push	{r7, lr}
    840e:	b084      	sub	sp, #16
    8410:	af00      	add	r7, sp, #0
    8412:	0002      	movs	r2, r0
    8414:	1dfb      	adds	r3, r7, #7
    8416:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8418:	230f      	movs	r3, #15
    841a:	18fb      	adds	r3, r7, r3
    841c:	1dfa      	adds	r2, r7, #7
    841e:	7812      	ldrb	r2, [r2, #0]
    8420:	09d2      	lsrs	r2, r2, #7
    8422:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8424:	230e      	movs	r3, #14
    8426:	18fb      	adds	r3, r7, r3
    8428:	1dfa      	adds	r2, r7, #7
    842a:	7812      	ldrb	r2, [r2, #0]
    842c:	0952      	lsrs	r2, r2, #5
    842e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8430:	4b0d      	ldr	r3, [pc, #52]	; (8468 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8432:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    8434:	230f      	movs	r3, #15
    8436:	18fb      	adds	r3, r7, r3
    8438:	781b      	ldrb	r3, [r3, #0]
    843a:	2b00      	cmp	r3, #0
    843c:	d10f      	bne.n	845e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    843e:	230f      	movs	r3, #15
    8440:	18fb      	adds	r3, r7, r3
    8442:	781b      	ldrb	r3, [r3, #0]
    8444:	009b      	lsls	r3, r3, #2
    8446:	2210      	movs	r2, #16
    8448:	4694      	mov	ip, r2
    844a:	44bc      	add	ip, r7
    844c:	4463      	add	r3, ip
    844e:	3b08      	subs	r3, #8
    8450:	681a      	ldr	r2, [r3, #0]
    8452:	230e      	movs	r3, #14
    8454:	18fb      	adds	r3, r7, r3
    8456:	781b      	ldrb	r3, [r3, #0]
    8458:	01db      	lsls	r3, r3, #7
    845a:	18d3      	adds	r3, r2, r3
    845c:	e000      	b.n	8460 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    845e:	2300      	movs	r3, #0
	}
}
    8460:	0018      	movs	r0, r3
    8462:	46bd      	mov	sp, r7
    8464:	b004      	add	sp, #16
    8466:	bd80      	pop	{r7, pc}
    8468:	41004400 	.word	0x41004400

0000846c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    846c:	b580      	push	{r7, lr}
    846e:	b082      	sub	sp, #8
    8470:	af00      	add	r7, sp, #0
    8472:	0002      	movs	r2, r0
    8474:	1dfb      	adds	r3, r7, #7
    8476:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8478:	1dfb      	adds	r3, r7, #7
    847a:	781b      	ldrb	r3, [r3, #0]
    847c:	0018      	movs	r0, r3
    847e:	4b03      	ldr	r3, [pc, #12]	; (848c <port_get_group_from_gpio_pin+0x20>)
    8480:	4798      	blx	r3
    8482:	0003      	movs	r3, r0
}
    8484:	0018      	movs	r0, r3
    8486:	46bd      	mov	sp, r7
    8488:	b002      	add	sp, #8
    848a:	bd80      	pop	{r7, pc}
    848c:	0000840d 	.word	0x0000840d

00008490 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    8490:	b580      	push	{r7, lr}
    8492:	b082      	sub	sp, #8
    8494:	af00      	add	r7, sp, #0
    8496:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    8498:	687b      	ldr	r3, [r7, #4]
    849a:	2200      	movs	r2, #0
    849c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    849e:	687b      	ldr	r3, [r7, #4]
    84a0:	2201      	movs	r2, #1
    84a2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    84a4:	687b      	ldr	r3, [r7, #4]
    84a6:	2200      	movs	r2, #0
    84a8:	709a      	strb	r2, [r3, #2]
}
    84aa:	46c0      	nop			; (mov r8, r8)
    84ac:	46bd      	mov	sp, r7
    84ae:	b002      	add	sp, #8
    84b0:	bd80      	pop	{r7, pc}
    84b2:	46c0      	nop			; (mov r8, r8)

000084b4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    84b4:	b580      	push	{r7, lr}
    84b6:	b084      	sub	sp, #16
    84b8:	af00      	add	r7, sp, #0
    84ba:	0002      	movs	r2, r0
    84bc:	1dfb      	adds	r3, r7, #7
    84be:	701a      	strb	r2, [r3, #0]
    84c0:	1dbb      	adds	r3, r7, #6
    84c2:	1c0a      	adds	r2, r1, #0
    84c4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    84c6:	1dfb      	adds	r3, r7, #7
    84c8:	781b      	ldrb	r3, [r3, #0]
    84ca:	0018      	movs	r0, r3
    84cc:	4b0d      	ldr	r3, [pc, #52]	; (8504 <port_pin_set_output_level+0x50>)
    84ce:	4798      	blx	r3
    84d0:	0003      	movs	r3, r0
    84d2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    84d4:	1dfb      	adds	r3, r7, #7
    84d6:	781b      	ldrb	r3, [r3, #0]
    84d8:	221f      	movs	r2, #31
    84da:	4013      	ands	r3, r2
    84dc:	2201      	movs	r2, #1
    84de:	409a      	lsls	r2, r3
    84e0:	0013      	movs	r3, r2
    84e2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    84e4:	1dbb      	adds	r3, r7, #6
    84e6:	781b      	ldrb	r3, [r3, #0]
    84e8:	2b00      	cmp	r3, #0
    84ea:	d003      	beq.n	84f4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    84ec:	68fb      	ldr	r3, [r7, #12]
    84ee:	68ba      	ldr	r2, [r7, #8]
    84f0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    84f2:	e002      	b.n	84fa <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    84f4:	68fb      	ldr	r3, [r7, #12]
    84f6:	68ba      	ldr	r2, [r7, #8]
    84f8:	615a      	str	r2, [r3, #20]
	}
}
    84fa:	46c0      	nop			; (mov r8, r8)
    84fc:	46bd      	mov	sp, r7
    84fe:	b004      	add	sp, #16
    8500:	bd80      	pop	{r7, pc}
    8502:	46c0      	nop			; (mov r8, r8)
    8504:	0000846d 	.word	0x0000846d

00008508 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    8508:	b580      	push	{r7, lr}
    850a:	b082      	sub	sp, #8
    850c:	af00      	add	r7, sp, #0
    850e:	0002      	movs	r2, r0
    8510:	1dfb      	adds	r3, r7, #7
    8512:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8514:	4b06      	ldr	r3, [pc, #24]	; (8530 <system_interrupt_enable+0x28>)
    8516:	1dfa      	adds	r2, r7, #7
    8518:	7812      	ldrb	r2, [r2, #0]
    851a:	0011      	movs	r1, r2
    851c:	221f      	movs	r2, #31
    851e:	400a      	ands	r2, r1
    8520:	2101      	movs	r1, #1
    8522:	4091      	lsls	r1, r2
    8524:	000a      	movs	r2, r1
    8526:	601a      	str	r2, [r3, #0]
}
    8528:	46c0      	nop			; (mov r8, r8)
    852a:	46bd      	mov	sp, r7
    852c:	b002      	add	sp, #8
    852e:	bd80      	pop	{r7, pc}
    8530:	e000e100 	.word	0xe000e100

00008534 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    8534:	b580      	push	{r7, lr}
    8536:	b082      	sub	sp, #8
    8538:	af00      	add	r7, sp, #0
    853a:	0002      	movs	r2, r0
    853c:	1dfb      	adds	r3, r7, #7
    853e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8540:	4a07      	ldr	r2, [pc, #28]	; (8560 <system_interrupt_disable+0x2c>)
    8542:	1dfb      	adds	r3, r7, #7
    8544:	781b      	ldrb	r3, [r3, #0]
    8546:	0019      	movs	r1, r3
    8548:	231f      	movs	r3, #31
    854a:	400b      	ands	r3, r1
    854c:	2101      	movs	r1, #1
    854e:	4099      	lsls	r1, r3
    8550:	000b      	movs	r3, r1
    8552:	0019      	movs	r1, r3
    8554:	2380      	movs	r3, #128	; 0x80
    8556:	50d1      	str	r1, [r2, r3]
}
    8558:	46c0      	nop			; (mov r8, r8)
    855a:	46bd      	mov	sp, r7
    855c:	b002      	add	sp, #8
    855e:	bd80      	pop	{r7, pc}
    8560:	e000e100 	.word	0xe000e100

00008564 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    8564:	b580      	push	{r7, lr}
    8566:	b084      	sub	sp, #16
    8568:	af00      	add	r7, sp, #0
    856a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    856c:	687b      	ldr	r3, [r7, #4]
    856e:	681b      	ldr	r3, [r3, #0]
    8570:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    8572:	68fb      	ldr	r3, [r7, #12]
    8574:	69db      	ldr	r3, [r3, #28]
    8576:	1e5a      	subs	r2, r3, #1
    8578:	4193      	sbcs	r3, r2
    857a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    857c:	0018      	movs	r0, r3
    857e:	46bd      	mov	sp, r7
    8580:	b004      	add	sp, #16
    8582:	bd80      	pop	{r7, pc}

00008584 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    8584:	b580      	push	{r7, lr}
    8586:	b082      	sub	sp, #8
    8588:	af00      	add	r7, sp, #0
    858a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    858c:	687b      	ldr	r3, [r7, #4]
    858e:	2201      	movs	r2, #1
    8590:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    8592:	687b      	ldr	r3, [r7, #4]
    8594:	2200      	movs	r2, #0
    8596:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    8598:	687b      	ldr	r3, [r7, #4]
    859a:	2200      	movs	r2, #0
    859c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    859e:	687b      	ldr	r3, [r7, #4]
    85a0:	22c0      	movs	r2, #192	; 0xc0
    85a2:	0392      	lsls	r2, r2, #14
    85a4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    85a6:	687b      	ldr	r3, [r7, #4]
    85a8:	2200      	movs	r2, #0
    85aa:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    85ac:	687b      	ldr	r3, [r7, #4]
    85ae:	2200      	movs	r2, #0
    85b0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    85b2:	687b      	ldr	r3, [r7, #4]
    85b4:	2201      	movs	r2, #1
    85b6:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    85b8:	687b      	ldr	r3, [r7, #4]
    85ba:	2201      	movs	r2, #1
    85bc:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    85be:	687b      	ldr	r3, [r7, #4]
    85c0:	2200      	movs	r2, #0
    85c2:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    85c4:	687b      	ldr	r3, [r7, #4]
    85c6:	2224      	movs	r2, #36	; 0x24
    85c8:	2100      	movs	r1, #0
    85ca:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    85cc:	687b      	ldr	r3, [r7, #4]
    85ce:	3318      	adds	r3, #24
    85d0:	220c      	movs	r2, #12
    85d2:	2100      	movs	r1, #0
    85d4:	0018      	movs	r0, r3
    85d6:	4b0a      	ldr	r3, [pc, #40]	; (8600 <spi_get_config_defaults+0x7c>)
    85d8:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    85da:	687b      	ldr	r3, [r7, #4]
    85dc:	4a09      	ldr	r2, [pc, #36]	; (8604 <spi_get_config_defaults+0x80>)
    85de:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    85e0:	687b      	ldr	r3, [r7, #4]
    85e2:	2200      	movs	r2, #0
    85e4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    85e6:	687b      	ldr	r3, [r7, #4]
    85e8:	2200      	movs	r2, #0
    85ea:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    85ec:	687b      	ldr	r3, [r7, #4]
    85ee:	2200      	movs	r2, #0
    85f0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    85f2:	687b      	ldr	r3, [r7, #4]
    85f4:	2200      	movs	r2, #0
    85f6:	635a      	str	r2, [r3, #52]	; 0x34

};
    85f8:	46c0      	nop			; (mov r8, r8)
    85fa:	46bd      	mov	sp, r7
    85fc:	b002      	add	sp, #8
    85fe:	bd80      	pop	{r7, pc}
    8600:	000184d1 	.word	0x000184d1
    8604:	000186a0 	.word	0x000186a0

00008608 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    8608:	b580      	push	{r7, lr}
    860a:	b082      	sub	sp, #8
    860c:	af00      	add	r7, sp, #0
    860e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    8610:	687b      	ldr	r3, [r7, #4]
    8612:	220a      	movs	r2, #10
    8614:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    8616:	687b      	ldr	r3, [r7, #4]
    8618:	2200      	movs	r2, #0
    861a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    861c:	687b      	ldr	r3, [r7, #4]
    861e:	2200      	movs	r2, #0
    8620:	709a      	strb	r2, [r3, #2]
}
    8622:	46c0      	nop			; (mov r8, r8)
    8624:	46bd      	mov	sp, r7
    8626:	b002      	add	sp, #8
    8628:	bd80      	pop	{r7, pc}
    862a:	46c0      	nop			; (mov r8, r8)

0000862c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    862c:	b580      	push	{r7, lr}
    862e:	b084      	sub	sp, #16
    8630:	af00      	add	r7, sp, #0
    8632:	6078      	str	r0, [r7, #4]
    8634:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    8636:	683b      	ldr	r3, [r7, #0]
    8638:	781a      	ldrb	r2, [r3, #0]
    863a:	687b      	ldr	r3, [r7, #4]
    863c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    863e:	683b      	ldr	r3, [r7, #0]
    8640:	785a      	ldrb	r2, [r3, #1]
    8642:	687b      	ldr	r3, [r7, #4]
    8644:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    8646:	683b      	ldr	r3, [r7, #0]
    8648:	789a      	ldrb	r2, [r3, #2]
    864a:	687b      	ldr	r3, [r7, #4]
    864c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    864e:	230c      	movs	r3, #12
    8650:	18fb      	adds	r3, r7, r3
    8652:	0018      	movs	r0, r3
    8654:	4b0b      	ldr	r3, [pc, #44]	; (8684 <spi_attach_slave+0x58>)
    8656:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    8658:	230c      	movs	r3, #12
    865a:	18fb      	adds	r3, r7, r3
    865c:	2201      	movs	r2, #1
    865e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    8660:	687b      	ldr	r3, [r7, #4]
    8662:	781b      	ldrb	r3, [r3, #0]
    8664:	220c      	movs	r2, #12
    8666:	18ba      	adds	r2, r7, r2
    8668:	0011      	movs	r1, r2
    866a:	0018      	movs	r0, r3
    866c:	4b06      	ldr	r3, [pc, #24]	; (8688 <spi_attach_slave+0x5c>)
    866e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    8670:	687b      	ldr	r3, [r7, #4]
    8672:	781b      	ldrb	r3, [r3, #0]
    8674:	2101      	movs	r1, #1
    8676:	0018      	movs	r0, r3
    8678:	4b04      	ldr	r3, [pc, #16]	; (868c <spi_attach_slave+0x60>)
    867a:	4798      	blx	r3
}
    867c:	46c0      	nop			; (mov r8, r8)
    867e:	46bd      	mov	sp, r7
    8680:	b004      	add	sp, #16
    8682:	bd80      	pop	{r7, pc}
    8684:	00008491 	.word	0x00008491
    8688:	00012145 	.word	0x00012145
    868c:	000084b5 	.word	0x000084b5

00008690 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    8690:	b580      	push	{r7, lr}
    8692:	b084      	sub	sp, #16
    8694:	af00      	add	r7, sp, #0
    8696:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8698:	687b      	ldr	r3, [r7, #4]
    869a:	681b      	ldr	r3, [r3, #0]
    869c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    869e:	687b      	ldr	r3, [r7, #4]
    86a0:	681b      	ldr	r3, [r3, #0]
    86a2:	0018      	movs	r0, r3
    86a4:	4b0b      	ldr	r3, [pc, #44]	; (86d4 <spi_enable+0x44>)
    86a6:	4798      	blx	r3
    86a8:	0003      	movs	r3, r0
    86aa:	0018      	movs	r0, r3
    86ac:	4b0a      	ldr	r3, [pc, #40]	; (86d8 <spi_enable+0x48>)
    86ae:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    86b0:	46c0      	nop			; (mov r8, r8)
    86b2:	687b      	ldr	r3, [r7, #4]
    86b4:	0018      	movs	r0, r3
    86b6:	4b09      	ldr	r3, [pc, #36]	; (86dc <spi_enable+0x4c>)
    86b8:	4798      	blx	r3
    86ba:	1e03      	subs	r3, r0, #0
    86bc:	d1f9      	bne.n	86b2 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    86be:	68fb      	ldr	r3, [r7, #12]
    86c0:	681b      	ldr	r3, [r3, #0]
    86c2:	2202      	movs	r2, #2
    86c4:	431a      	orrs	r2, r3
    86c6:	68fb      	ldr	r3, [r7, #12]
    86c8:	601a      	str	r2, [r3, #0]
}
    86ca:	46c0      	nop			; (mov r8, r8)
    86cc:	46bd      	mov	sp, r7
    86ce:	b004      	add	sp, #16
    86d0:	bd80      	pop	{r7, pc}
    86d2:	46c0      	nop			; (mov r8, r8)
    86d4:	000127f1 	.word	0x000127f1
    86d8:	00008509 	.word	0x00008509
    86dc:	00008565 	.word	0x00008565

000086e0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    86e0:	b580      	push	{r7, lr}
    86e2:	b084      	sub	sp, #16
    86e4:	af00      	add	r7, sp, #0
    86e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    86e8:	687b      	ldr	r3, [r7, #4]
    86ea:	681b      	ldr	r3, [r3, #0]
    86ec:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    86ee:	687b      	ldr	r3, [r7, #4]
    86f0:	681b      	ldr	r3, [r3, #0]
    86f2:	0018      	movs	r0, r3
    86f4:	4b0e      	ldr	r3, [pc, #56]	; (8730 <spi_disable+0x50>)
    86f6:	4798      	blx	r3
    86f8:	0003      	movs	r3, r0
    86fa:	0018      	movs	r0, r3
    86fc:	4b0d      	ldr	r3, [pc, #52]	; (8734 <spi_disable+0x54>)
    86fe:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    8700:	46c0      	nop			; (mov r8, r8)
    8702:	687b      	ldr	r3, [r7, #4]
    8704:	0018      	movs	r0, r3
    8706:	4b0c      	ldr	r3, [pc, #48]	; (8738 <spi_disable+0x58>)
    8708:	4798      	blx	r3
    870a:	1e03      	subs	r3, r0, #0
    870c:	d1f9      	bne.n	8702 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    870e:	68fb      	ldr	r3, [r7, #12]
    8710:	228f      	movs	r2, #143	; 0x8f
    8712:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    8714:	68fb      	ldr	r3, [r7, #12]
    8716:	228f      	movs	r2, #143	; 0x8f
    8718:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    871a:	68fb      	ldr	r3, [r7, #12]
    871c:	681b      	ldr	r3, [r3, #0]
    871e:	2202      	movs	r2, #2
    8720:	4393      	bics	r3, r2
    8722:	001a      	movs	r2, r3
    8724:	68fb      	ldr	r3, [r7, #12]
    8726:	601a      	str	r2, [r3, #0]
}
    8728:	46c0      	nop			; (mov r8, r8)
    872a:	46bd      	mov	sp, r7
    872c:	b004      	add	sp, #16
    872e:	bd80      	pop	{r7, pc}
    8730:	000127f1 	.word	0x000127f1
    8734:	00008535 	.word	0x00008535
    8738:	00008565 	.word	0x00008565

0000873c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    873c:	b580      	push	{r7, lr}
    873e:	b084      	sub	sp, #16
    8740:	af00      	add	r7, sp, #0
    8742:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8744:	687b      	ldr	r3, [r7, #4]
    8746:	681b      	ldr	r3, [r3, #0]
    8748:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    874a:	68fb      	ldr	r3, [r7, #12]
    874c:	7e1b      	ldrb	r3, [r3, #24]
    874e:	b2db      	uxtb	r3, r3
    8750:	001a      	movs	r2, r3
    8752:	2302      	movs	r3, #2
    8754:	4013      	ands	r3, r2
    8756:	1e5a      	subs	r2, r3, #1
    8758:	4193      	sbcs	r3, r2
    875a:	b2db      	uxtb	r3, r3
}
    875c:	0018      	movs	r0, r3
    875e:	46bd      	mov	sp, r7
    8760:	b004      	add	sp, #16
    8762:	bd80      	pop	{r7, pc}

00008764 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    8764:	b580      	push	{r7, lr}
    8766:	b084      	sub	sp, #16
    8768:	af00      	add	r7, sp, #0
    876a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    876c:	687b      	ldr	r3, [r7, #4]
    876e:	681b      	ldr	r3, [r3, #0]
    8770:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8772:	68fb      	ldr	r3, [r7, #12]
    8774:	7e1b      	ldrb	r3, [r3, #24]
    8776:	b2db      	uxtb	r3, r3
    8778:	001a      	movs	r2, r3
    877a:	2301      	movs	r3, #1
    877c:	4013      	ands	r3, r2
    877e:	1e5a      	subs	r2, r3, #1
    8780:	4193      	sbcs	r3, r2
    8782:	b2db      	uxtb	r3, r3
}
    8784:	0018      	movs	r0, r3
    8786:	46bd      	mov	sp, r7
    8788:	b004      	add	sp, #16
    878a:	bd80      	pop	{r7, pc}

0000878c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    878c:	b580      	push	{r7, lr}
    878e:	b084      	sub	sp, #16
    8790:	af00      	add	r7, sp, #0
    8792:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8794:	687b      	ldr	r3, [r7, #4]
    8796:	681b      	ldr	r3, [r3, #0]
    8798:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    879a:	68fb      	ldr	r3, [r7, #12]
    879c:	7e1b      	ldrb	r3, [r3, #24]
    879e:	b2db      	uxtb	r3, r3
    87a0:	001a      	movs	r2, r3
    87a2:	2304      	movs	r3, #4
    87a4:	4013      	ands	r3, r2
    87a6:	1e5a      	subs	r2, r3, #1
    87a8:	4193      	sbcs	r3, r2
    87aa:	b2db      	uxtb	r3, r3
}
    87ac:	0018      	movs	r0, r3
    87ae:	46bd      	mov	sp, r7
    87b0:	b004      	add	sp, #16
    87b2:	bd80      	pop	{r7, pc}

000087b4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    87b4:	b580      	push	{r7, lr}
    87b6:	b084      	sub	sp, #16
    87b8:	af00      	add	r7, sp, #0
    87ba:	6078      	str	r0, [r7, #4]
    87bc:	000a      	movs	r2, r1
    87be:	1cbb      	adds	r3, r7, #2
    87c0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    87c2:	687b      	ldr	r3, [r7, #4]
    87c4:	681b      	ldr	r3, [r3, #0]
    87c6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    87c8:	687b      	ldr	r3, [r7, #4]
    87ca:	0018      	movs	r0, r3
    87cc:	4b0a      	ldr	r3, [pc, #40]	; (87f8 <spi_write+0x44>)
    87ce:	4798      	blx	r3
    87d0:	0003      	movs	r3, r0
    87d2:	001a      	movs	r2, r3
    87d4:	2301      	movs	r3, #1
    87d6:	4053      	eors	r3, r2
    87d8:	b2db      	uxtb	r3, r3
    87da:	2b00      	cmp	r3, #0
    87dc:	d001      	beq.n	87e2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    87de:	2305      	movs	r3, #5
    87e0:	e006      	b.n	87f0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    87e2:	1cbb      	adds	r3, r7, #2
    87e4:	881b      	ldrh	r3, [r3, #0]
    87e6:	05db      	lsls	r3, r3, #23
    87e8:	0dda      	lsrs	r2, r3, #23
    87ea:	68fb      	ldr	r3, [r7, #12]
    87ec:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    87ee:	2300      	movs	r3, #0
}
    87f0:	0018      	movs	r0, r3
    87f2:	46bd      	mov	sp, r7
    87f4:	b004      	add	sp, #16
    87f6:	bd80      	pop	{r7, pc}
    87f8:	00008765 	.word	0x00008765

000087fc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    87fc:	b580      	push	{r7, lr}
    87fe:	b084      	sub	sp, #16
    8800:	af00      	add	r7, sp, #0
    8802:	6078      	str	r0, [r7, #4]
    8804:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8806:	687b      	ldr	r3, [r7, #4]
    8808:	681b      	ldr	r3, [r3, #0]
    880a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    880c:	687b      	ldr	r3, [r7, #4]
    880e:	0018      	movs	r0, r3
    8810:	4b1b      	ldr	r3, [pc, #108]	; (8880 <spi_read+0x84>)
    8812:	4798      	blx	r3
    8814:	0003      	movs	r3, r0
    8816:	001a      	movs	r2, r3
    8818:	2301      	movs	r3, #1
    881a:	4053      	eors	r3, r2
    881c:	b2db      	uxtb	r3, r3
    881e:	2b00      	cmp	r3, #0
    8820:	d001      	beq.n	8826 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    8822:	2310      	movs	r3, #16
    8824:	e027      	b.n	8876 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    8826:	230f      	movs	r3, #15
    8828:	18fb      	adds	r3, r7, r3
    882a:	2200      	movs	r2, #0
    882c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    882e:	68bb      	ldr	r3, [r7, #8]
    8830:	8b5b      	ldrh	r3, [r3, #26]
    8832:	b29b      	uxth	r3, r3
    8834:	001a      	movs	r2, r3
    8836:	2304      	movs	r3, #4
    8838:	4013      	ands	r3, r2
    883a:	d006      	beq.n	884a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    883c:	230f      	movs	r3, #15
    883e:	18fb      	adds	r3, r7, r3
    8840:	221e      	movs	r2, #30
    8842:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8844:	68bb      	ldr	r3, [r7, #8]
    8846:	2204      	movs	r2, #4
    8848:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    884a:	687b      	ldr	r3, [r7, #4]
    884c:	799b      	ldrb	r3, [r3, #6]
    884e:	2b01      	cmp	r3, #1
    8850:	d108      	bne.n	8864 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8852:	68bb      	ldr	r3, [r7, #8]
    8854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8856:	b29b      	uxth	r3, r3
    8858:	05db      	lsls	r3, r3, #23
    885a:	0ddb      	lsrs	r3, r3, #23
    885c:	b29a      	uxth	r2, r3
    885e:	683b      	ldr	r3, [r7, #0]
    8860:	801a      	strh	r2, [r3, #0]
    8862:	e005      	b.n	8870 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8864:	68bb      	ldr	r3, [r7, #8]
    8866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8868:	b2db      	uxtb	r3, r3
    886a:	b29a      	uxth	r2, r3
    886c:	683b      	ldr	r3, [r7, #0]
    886e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    8870:	230f      	movs	r3, #15
    8872:	18fb      	adds	r3, r7, r3
    8874:	781b      	ldrb	r3, [r3, #0]
}
    8876:	0018      	movs	r0, r3
    8878:	46bd      	mov	sp, r7
    887a:	b004      	add	sp, #16
    887c:	bd80      	pop	{r7, pc}
    887e:	46c0      	nop			; (mov r8, r8)
    8880:	0000878d 	.word	0x0000878d

00008884 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    8884:	b580      	push	{r7, lr}
    8886:	b086      	sub	sp, #24
    8888:	af00      	add	r7, sp, #0
    888a:	60f8      	str	r0, [r7, #12]
    888c:	60b9      	str	r1, [r7, #8]
    888e:	1dbb      	adds	r3, r7, #6
    8890:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    8892:	2313      	movs	r3, #19
    8894:	18fb      	adds	r3, r7, r3
    8896:	2200      	movs	r2, #0
    8898:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    889a:	2317      	movs	r3, #23
    889c:	18fb      	adds	r3, r7, r3
    889e:	2200      	movs	r2, #0
    88a0:	701a      	strb	r2, [r3, #0]
    88a2:	2316      	movs	r3, #22
    88a4:	18fb      	adds	r3, r7, r3
    88a6:	2200      	movs	r2, #0
    88a8:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    88aa:	2314      	movs	r3, #20
    88ac:	18fb      	adds	r3, r7, r3
    88ae:	2200      	movs	r2, #0
    88b0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    88b2:	2310      	movs	r3, #16
    88b4:	18fb      	adds	r3, r7, r3
    88b6:	2200      	movs	r2, #0
    88b8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    88ba:	68bb      	ldr	r3, [r7, #8]
    88bc:	2b00      	cmp	r3, #0
    88be:	d102      	bne.n	88c6 <spi_rw+0x42>
    88c0:	68fb      	ldr	r3, [r7, #12]
    88c2:	2b00      	cmp	r3, #0
    88c4:	d003      	beq.n	88ce <spi_rw+0x4a>
    88c6:	1dbb      	adds	r3, r7, #6
    88c8:	881b      	ldrh	r3, [r3, #0]
    88ca:	2b00      	cmp	r3, #0
    88cc:	d102      	bne.n	88d4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    88ce:	230f      	movs	r3, #15
    88d0:	425b      	negs	r3, r3
    88d2:	e07e      	b.n	89d2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
    88d4:	68fb      	ldr	r3, [r7, #12]
    88d6:	2b00      	cmp	r3, #0
    88d8:	d106      	bne.n	88e8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
    88da:	2313      	movs	r3, #19
    88dc:	18fb      	adds	r3, r7, r3
    88de:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    88e0:	2317      	movs	r3, #23
    88e2:	18fb      	adds	r3, r7, r3
    88e4:	2201      	movs	r2, #1
    88e6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
    88e8:	68bb      	ldr	r3, [r7, #8]
    88ea:	2b00      	cmp	r3, #0
    88ec:	d106      	bne.n	88fc <spi_rw+0x78>
		pu8Miso = &u8Dummy;
    88ee:	2313      	movs	r3, #19
    88f0:	18fb      	adds	r3, r7, r3
    88f2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    88f4:	2316      	movs	r3, #22
    88f6:	18fb      	adds	r3, r7, r3
    88f8:	2201      	movs	r2, #1
    88fa:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
    88fc:	4937      	ldr	r1, [pc, #220]	; (89dc <spi_rw+0x158>)
    88fe:	4b38      	ldr	r3, [pc, #224]	; (89e0 <spi_rw+0x15c>)
    8900:	2201      	movs	r2, #1
    8902:	0018      	movs	r0, r3
    8904:	4b37      	ldr	r3, [pc, #220]	; (89e4 <spi_rw+0x160>)
    8906:	4798      	blx	r3

	while (u16Sz) {
    8908:	e04c      	b.n	89a4 <spi_rw+0x120>
		txd_data = *pu8Mosi;
    890a:	68fb      	ldr	r3, [r7, #12]
    890c:	781a      	ldrb	r2, [r3, #0]
    890e:	2314      	movs	r3, #20
    8910:	18fb      	adds	r3, r7, r3
    8912:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    8914:	46c0      	nop			; (mov r8, r8)
    8916:	4b32      	ldr	r3, [pc, #200]	; (89e0 <spi_rw+0x15c>)
    8918:	0018      	movs	r0, r3
    891a:	4b33      	ldr	r3, [pc, #204]	; (89e8 <spi_rw+0x164>)
    891c:	4798      	blx	r3
    891e:	0003      	movs	r3, r0
    8920:	001a      	movs	r2, r3
    8922:	2301      	movs	r3, #1
    8924:	4053      	eors	r3, r2
    8926:	b2db      	uxtb	r3, r3
    8928:	2b00      	cmp	r3, #0
    892a:	d1f4      	bne.n	8916 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    892c:	46c0      	nop			; (mov r8, r8)
    892e:	2314      	movs	r3, #20
    8930:	18fb      	adds	r3, r7, r3
    8932:	881a      	ldrh	r2, [r3, #0]
    8934:	4b2a      	ldr	r3, [pc, #168]	; (89e0 <spi_rw+0x15c>)
    8936:	0011      	movs	r1, r2
    8938:	0018      	movs	r0, r3
    893a:	4b2c      	ldr	r3, [pc, #176]	; (89ec <spi_rw+0x168>)
    893c:	4798      	blx	r3
    893e:	1e03      	subs	r3, r0, #0
    8940:	d1f5      	bne.n	892e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    8942:	46c0      	nop			; (mov r8, r8)
    8944:	4b26      	ldr	r3, [pc, #152]	; (89e0 <spi_rw+0x15c>)
    8946:	0018      	movs	r0, r3
    8948:	4b29      	ldr	r3, [pc, #164]	; (89f0 <spi_rw+0x16c>)
    894a:	4798      	blx	r3
    894c:	0003      	movs	r3, r0
    894e:	001a      	movs	r2, r3
    8950:	2301      	movs	r3, #1
    8952:	4053      	eors	r3, r2
    8954:	b2db      	uxtb	r3, r3
    8956:	2b00      	cmp	r3, #0
    8958:	d1f4      	bne.n	8944 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    895a:	46c0      	nop			; (mov r8, r8)
    895c:	2310      	movs	r3, #16
    895e:	18fa      	adds	r2, r7, r3
    8960:	4b1f      	ldr	r3, [pc, #124]	; (89e0 <spi_rw+0x15c>)
    8962:	0011      	movs	r1, r2
    8964:	0018      	movs	r0, r3
    8966:	4b23      	ldr	r3, [pc, #140]	; (89f4 <spi_rw+0x170>)
    8968:	4798      	blx	r3
    896a:	1e03      	subs	r3, r0, #0
    896c:	d1f6      	bne.n	895c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
    896e:	2310      	movs	r3, #16
    8970:	18fb      	adds	r3, r7, r3
    8972:	881b      	ldrh	r3, [r3, #0]
    8974:	b2da      	uxtb	r2, r3
    8976:	68bb      	ldr	r3, [r7, #8]
    8978:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    897a:	1dbb      	adds	r3, r7, #6
    897c:	881a      	ldrh	r2, [r3, #0]
    897e:	1dbb      	adds	r3, r7, #6
    8980:	3a01      	subs	r2, #1
    8982:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    8984:	2316      	movs	r3, #22
    8986:	18fb      	adds	r3, r7, r3
    8988:	781b      	ldrb	r3, [r3, #0]
    898a:	2b00      	cmp	r3, #0
    898c:	d102      	bne.n	8994 <spi_rw+0x110>
			pu8Miso++;
    898e:	68bb      	ldr	r3, [r7, #8]
    8990:	3301      	adds	r3, #1
    8992:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    8994:	2317      	movs	r3, #23
    8996:	18fb      	adds	r3, r7, r3
    8998:	781b      	ldrb	r3, [r3, #0]
    899a:	2b00      	cmp	r3, #0
    899c:	d102      	bne.n	89a4 <spi_rw+0x120>
			pu8Mosi++;
    899e:	68fb      	ldr	r3, [r7, #12]
    89a0:	3301      	adds	r3, #1
    89a2:	60fb      	str	r3, [r7, #12]
		u8SkipMiso = 1;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    89a4:	1dbb      	adds	r3, r7, #6
    89a6:	881b      	ldrh	r3, [r3, #0]
    89a8:	2b00      	cmp	r3, #0
    89aa:	d1ae      	bne.n	890a <spi_rw+0x86>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    89ac:	46c0      	nop			; (mov r8, r8)
    89ae:	4b0c      	ldr	r3, [pc, #48]	; (89e0 <spi_rw+0x15c>)
    89b0:	0018      	movs	r0, r3
    89b2:	4b11      	ldr	r3, [pc, #68]	; (89f8 <spi_rw+0x174>)
    89b4:	4798      	blx	r3
    89b6:	0003      	movs	r3, r0
    89b8:	001a      	movs	r2, r3
    89ba:	2301      	movs	r3, #1
    89bc:	4053      	eors	r3, r2
    89be:	b2db      	uxtb	r3, r3
    89c0:	2b00      	cmp	r3, #0
    89c2:	d1f4      	bne.n	89ae <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
    89c4:	4905      	ldr	r1, [pc, #20]	; (89dc <spi_rw+0x158>)
    89c6:	4b06      	ldr	r3, [pc, #24]	; (89e0 <spi_rw+0x15c>)
    89c8:	2200      	movs	r2, #0
    89ca:	0018      	movs	r0, r3
    89cc:	4b05      	ldr	r3, [pc, #20]	; (89e4 <spi_rw+0x160>)
    89ce:	4798      	blx	r3

	return M2M_SUCCESS;
    89d0:	2300      	movs	r3, #0
}
    89d2:	0018      	movs	r0, r3
    89d4:	46bd      	mov	sp, r7
    89d6:	b006      	add	sp, #24
    89d8:	bd80      	pop	{r7, pc}
    89da:	46c0      	nop			; (mov r8, r8)
    89dc:	200002e0 	.word	0x200002e0
    89e0:	200002e4 	.word	0x200002e4
    89e4:	00013175 	.word	0x00013175
    89e8:	00008765 	.word	0x00008765
    89ec:	000087b5 	.word	0x000087b5
    89f0:	0000878d 	.word	0x0000878d
    89f4:	000087fd 	.word	0x000087fd
    89f8:	0000873d 	.word	0x0000873d

000089fc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    89fc:	b580      	push	{r7, lr}
    89fe:	b092      	sub	sp, #72	; 0x48
    8a00:	af00      	add	r7, sp, #0
    8a02:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    8a04:	2347      	movs	r3, #71	; 0x47
    8a06:	18fb      	adds	r3, r7, r3
    8a08:	2200      	movs	r2, #0
    8a0a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    8a0c:	2308      	movs	r3, #8
    8a0e:	18fb      	adds	r3, r7, r3
    8a10:	0018      	movs	r0, r3
    8a12:	4b26      	ldr	r3, [pc, #152]	; (8aac <nm_bus_init+0xb0>)
    8a14:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    8a16:	2308      	movs	r3, #8
    8a18:	18fb      	adds	r3, r7, r3
    8a1a:	220e      	movs	r2, #14
    8a1c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    8a1e:	2308      	movs	r3, #8
    8a20:	18fa      	adds	r2, r7, r3
    8a22:	4b23      	ldr	r3, [pc, #140]	; (8ab0 <nm_bus_init+0xb4>)
    8a24:	0011      	movs	r1, r2
    8a26:	0018      	movs	r0, r3
    8a28:	4b22      	ldr	r3, [pc, #136]	; (8ab4 <nm_bus_init+0xb8>)
    8a2a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    8a2c:	230c      	movs	r3, #12
    8a2e:	18fb      	adds	r3, r7, r3
    8a30:	0018      	movs	r0, r3
    8a32:	4b21      	ldr	r3, [pc, #132]	; (8ab8 <nm_bus_init+0xbc>)
    8a34:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    8a36:	230c      	movs	r3, #12
    8a38:	18fb      	adds	r3, r7, r3
    8a3a:	22c0      	movs	r2, #192	; 0xc0
    8a3c:	0392      	lsls	r2, r2, #14
    8a3e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    8a40:	230c      	movs	r3, #12
    8a42:	18fb      	adds	r3, r7, r3
    8a44:	4a1d      	ldr	r2, [pc, #116]	; (8abc <nm_bus_init+0xc0>)
    8a46:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    8a48:	230c      	movs	r3, #12
    8a4a:	18fb      	adds	r3, r7, r3
    8a4c:	4a1c      	ldr	r2, [pc, #112]	; (8ac0 <nm_bus_init+0xc4>)
    8a4e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    8a50:	230c      	movs	r3, #12
    8a52:	18fb      	adds	r3, r7, r3
    8a54:	2201      	movs	r2, #1
    8a56:	4252      	negs	r2, r2
    8a58:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    8a5a:	230c      	movs	r3, #12
    8a5c:	18fb      	adds	r3, r7, r3
    8a5e:	4a19      	ldr	r2, [pc, #100]	; (8ac4 <nm_bus_init+0xc8>)
    8a60:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    8a62:	230c      	movs	r3, #12
    8a64:	18fb      	adds	r3, r7, r3
    8a66:	2200      	movs	r2, #0
    8a68:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    8a6a:	230c      	movs	r3, #12
    8a6c:	18fb      	adds	r3, r7, r3
    8a6e:	4a16      	ldr	r2, [pc, #88]	; (8ac8 <nm_bus_init+0xcc>)
    8a70:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    8a72:	230c      	movs	r3, #12
    8a74:	18fa      	adds	r2, r7, r3
    8a76:	4915      	ldr	r1, [pc, #84]	; (8acc <nm_bus_init+0xd0>)
    8a78:	4b15      	ldr	r3, [pc, #84]	; (8ad0 <nm_bus_init+0xd4>)
    8a7a:	0018      	movs	r0, r3
    8a7c:	4b15      	ldr	r3, [pc, #84]	; (8ad4 <nm_bus_init+0xd8>)
    8a7e:	4798      	blx	r3
    8a80:	1e03      	subs	r3, r0, #0
    8a82:	d002      	beq.n	8a8a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    8a84:	2306      	movs	r3, #6
    8a86:	425b      	negs	r3, r3
    8a88:	e00c      	b.n	8aa4 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    8a8a:	4b11      	ldr	r3, [pc, #68]	; (8ad0 <nm_bus_init+0xd4>)
    8a8c:	0018      	movs	r0, r3
    8a8e:	4b12      	ldr	r3, [pc, #72]	; (8ad8 <nm_bus_init+0xdc>)
    8a90:	4798      	blx	r3

	nm_bsp_reset();
    8a92:	4b12      	ldr	r3, [pc, #72]	; (8adc <nm_bus_init+0xe0>)
    8a94:	4798      	blx	r3
	nm_bsp_sleep(1);
    8a96:	2001      	movs	r0, #1
    8a98:	4b11      	ldr	r3, [pc, #68]	; (8ae0 <nm_bus_init+0xe4>)
    8a9a:	4798      	blx	r3
#endif
	return result;
    8a9c:	2347      	movs	r3, #71	; 0x47
    8a9e:	18fb      	adds	r3, r7, r3
    8aa0:	781b      	ldrb	r3, [r3, #0]
    8aa2:	b25b      	sxtb	r3, r3
}
    8aa4:	0018      	movs	r0, r3
    8aa6:	46bd      	mov	sp, r7
    8aa8:	b012      	add	sp, #72	; 0x48
    8aaa:	bd80      	pop	{r7, pc}
    8aac:	00008609 	.word	0x00008609
    8ab0:	200002e0 	.word	0x200002e0
    8ab4:	0000862d 	.word	0x0000862d
    8ab8:	00008585 	.word	0x00008585
    8abc:	000c0002 	.word	0x000c0002
    8ac0:	000d0002 	.word	0x000d0002
    8ac4:	000f0002 	.word	0x000f0002
    8ac8:	00b71b00 	.word	0x00b71b00
    8acc:	42001000 	.word	0x42001000
    8ad0:	200002e4 	.word	0x200002e4
    8ad4:	00012e15 	.word	0x00012e15
    8ad8:	00008691 	.word	0x00008691
    8adc:	000082f1 	.word	0x000082f1
    8ae0:	00008335 	.word	0x00008335

00008ae4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    8ae4:	b590      	push	{r4, r7, lr}
    8ae6:	b085      	sub	sp, #20
    8ae8:	af00      	add	r7, sp, #0
    8aea:	0002      	movs	r2, r0
    8aec:	6039      	str	r1, [r7, #0]
    8aee:	1dfb      	adds	r3, r7, #7
    8af0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    8af2:	230f      	movs	r3, #15
    8af4:	18fb      	adds	r3, r7, r3
    8af6:	2200      	movs	r2, #0
    8af8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    8afa:	1dfb      	adds	r3, r7, #7
    8afc:	781b      	ldrb	r3, [r3, #0]
    8afe:	2b03      	cmp	r3, #3
    8b00:	d10f      	bne.n	8b22 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    8b02:	683b      	ldr	r3, [r7, #0]
    8b04:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    8b06:	68bb      	ldr	r3, [r7, #8]
    8b08:	6818      	ldr	r0, [r3, #0]
    8b0a:	68bb      	ldr	r3, [r7, #8]
    8b0c:	6859      	ldr	r1, [r3, #4]
    8b0e:	68bb      	ldr	r3, [r7, #8]
    8b10:	891b      	ldrh	r3, [r3, #8]
    8b12:	220f      	movs	r2, #15
    8b14:	18bc      	adds	r4, r7, r2
    8b16:	001a      	movs	r2, r3
    8b18:	4b10      	ldr	r3, [pc, #64]	; (8b5c <nm_bus_ioctl+0x78>)
    8b1a:	4798      	blx	r3
    8b1c:	0003      	movs	r3, r0
    8b1e:	7023      	strb	r3, [r4, #0]
		}
		break;
    8b20:	e013      	b.n	8b4a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    8b22:	230f      	movs	r3, #15
    8b24:	18fb      	adds	r3, r7, r3
    8b26:	22ff      	movs	r2, #255	; 0xff
    8b28:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    8b2a:	230e      	movs	r3, #14
    8b2c:	33ff      	adds	r3, #255	; 0xff
    8b2e:	001a      	movs	r2, r3
    8b30:	490b      	ldr	r1, [pc, #44]	; (8b60 <nm_bus_ioctl+0x7c>)
    8b32:	4b0c      	ldr	r3, [pc, #48]	; (8b64 <nm_bus_ioctl+0x80>)
    8b34:	0018      	movs	r0, r3
    8b36:	4b0c      	ldr	r3, [pc, #48]	; (8b68 <nm_bus_ioctl+0x84>)
    8b38:	4798      	blx	r3
    8b3a:	4b0c      	ldr	r3, [pc, #48]	; (8b6c <nm_bus_ioctl+0x88>)
    8b3c:	0018      	movs	r0, r3
    8b3e:	4b0c      	ldr	r3, [pc, #48]	; (8b70 <nm_bus_ioctl+0x8c>)
    8b40:	4798      	blx	r3
    8b42:	200d      	movs	r0, #13
    8b44:	4b0b      	ldr	r3, [pc, #44]	; (8b74 <nm_bus_ioctl+0x90>)
    8b46:	4798      	blx	r3
			break;
    8b48:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    8b4a:	230f      	movs	r3, #15
    8b4c:	18fb      	adds	r3, r7, r3
    8b4e:	781b      	ldrb	r3, [r3, #0]
    8b50:	b25b      	sxtb	r3, r3
}
    8b52:	0018      	movs	r0, r3
    8b54:	46bd      	mov	sp, r7
    8b56:	b005      	add	sp, #20
    8b58:	bd90      	pop	{r4, r7, pc}
    8b5a:	46c0      	nop			; (mov r8, r8)
    8b5c:	00008885 	.word	0x00008885
    8b60:	00019b94 	.word	0x00019b94
    8b64:	00019b6c 	.word	0x00019b6c
    8b68:	00018619 	.word	0x00018619
    8b6c:	00019b80 	.word	0x00019b80
    8b70:	00018739 	.word	0x00018739
    8b74:	0001864d 	.word	0x0001864d

00008b78 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    8b78:	b580      	push	{r7, lr}
    8b7a:	b082      	sub	sp, #8
    8b7c:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    8b7e:	1dfb      	adds	r3, r7, #7
    8b80:	2200      	movs	r2, #0
    8b82:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    8b84:	1d3b      	adds	r3, r7, #4
    8b86:	0018      	movs	r0, r3
    8b88:	4b13      	ldr	r3, [pc, #76]	; (8bd8 <nm_bus_deinit+0x60>)
    8b8a:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    8b8c:	1d3b      	adds	r3, r7, #4
    8b8e:	2200      	movs	r2, #0
    8b90:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    8b92:	1d3b      	adds	r3, r7, #4
    8b94:	2200      	movs	r2, #0
    8b96:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
    8b98:	4b10      	ldr	r3, [pc, #64]	; (8bdc <nm_bus_deinit+0x64>)
    8b9a:	0018      	movs	r0, r3
    8b9c:	4b10      	ldr	r3, [pc, #64]	; (8be0 <nm_bus_deinit+0x68>)
    8b9e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    8ba0:	1d3b      	adds	r3, r7, #4
    8ba2:	0019      	movs	r1, r3
    8ba4:	200c      	movs	r0, #12
    8ba6:	4b0f      	ldr	r3, [pc, #60]	; (8be4 <nm_bus_deinit+0x6c>)
    8ba8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    8baa:	1d3b      	adds	r3, r7, #4
    8bac:	0019      	movs	r1, r3
    8bae:	200f      	movs	r0, #15
    8bb0:	4b0c      	ldr	r3, [pc, #48]	; (8be4 <nm_bus_deinit+0x6c>)
    8bb2:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    8bb4:	1d3b      	adds	r3, r7, #4
    8bb6:	0019      	movs	r1, r3
    8bb8:	200d      	movs	r0, #13
    8bba:	4b0a      	ldr	r3, [pc, #40]	; (8be4 <nm_bus_deinit+0x6c>)
    8bbc:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    8bbe:	1d3b      	adds	r3, r7, #4
    8bc0:	0019      	movs	r1, r3
    8bc2:	200e      	movs	r0, #14
    8bc4:	4b07      	ldr	r3, [pc, #28]	; (8be4 <nm_bus_deinit+0x6c>)
    8bc6:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
    8bc8:	1dfb      	adds	r3, r7, #7
    8bca:	781b      	ldrb	r3, [r3, #0]
    8bcc:	b25b      	sxtb	r3, r3
}
    8bce:	0018      	movs	r0, r3
    8bd0:	46bd      	mov	sp, r7
    8bd2:	b002      	add	sp, #8
    8bd4:	bd80      	pop	{r7, pc}
    8bd6:	46c0      	nop			; (mov r8, r8)
    8bd8:	00008491 	.word	0x00008491
    8bdc:	200002e4 	.word	0x200002e4
    8be0:	000086e1 	.word	0x000086e1
    8be4:	00012145 	.word	0x00012145

00008be8 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    8be8:	b580      	push	{r7, lr}
    8bea:	b084      	sub	sp, #16
    8bec:	af00      	add	r7, sp, #0
    8bee:	60f8      	str	r0, [r7, #12]
    8bf0:	60b9      	str	r1, [r7, #8]
    8bf2:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    8bf4:	687b      	ldr	r3, [r7, #4]
    8bf6:	2b00      	cmp	r3, #0
    8bf8:	d010      	beq.n	8c1c <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    8bfa:	68bb      	ldr	r3, [r7, #8]
    8bfc:	781a      	ldrb	r2, [r3, #0]
    8bfe:	68fb      	ldr	r3, [r7, #12]
    8c00:	701a      	strb	r2, [r3, #0]
		pDst++;
    8c02:	68fb      	ldr	r3, [r7, #12]
    8c04:	3301      	adds	r3, #1
    8c06:	60fb      	str	r3, [r7, #12]
		pSrc++;
    8c08:	68bb      	ldr	r3, [r7, #8]
    8c0a:	3301      	adds	r3, #1
    8c0c:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    8c0e:	687b      	ldr	r3, [r7, #4]
    8c10:	3b01      	subs	r3, #1
    8c12:	607b      	str	r3, [r7, #4]
    8c14:	687b      	ldr	r3, [r7, #4]
    8c16:	2b00      	cmp	r3, #0
    8c18:	d1ef      	bne.n	8bfa <m2m_memcpy+0x12>
    8c1a:	e000      	b.n	8c1e <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    8c1c:	46c0      	nop			; (mov r8, r8)
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
    8c1e:	46bd      	mov	sp, r7
    8c20:	b004      	add	sp, #16
    8c22:	bd80      	pop	{r7, pc}

00008c24 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    8c24:	b580      	push	{r7, lr}
    8c26:	b084      	sub	sp, #16
    8c28:	af00      	add	r7, sp, #0
    8c2a:	60f8      	str	r0, [r7, #12]
    8c2c:	607a      	str	r2, [r7, #4]
    8c2e:	230b      	movs	r3, #11
    8c30:	18fb      	adds	r3, r7, r3
    8c32:	1c0a      	adds	r2, r1, #0
    8c34:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    8c36:	687b      	ldr	r3, [r7, #4]
    8c38:	2b00      	cmp	r3, #0
    8c3a:	d00e      	beq.n	8c5a <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    8c3c:	68fb      	ldr	r3, [r7, #12]
    8c3e:	220b      	movs	r2, #11
    8c40:	18ba      	adds	r2, r7, r2
    8c42:	7812      	ldrb	r2, [r2, #0]
    8c44:	701a      	strb	r2, [r3, #0]
		pBuf++;
    8c46:	68fb      	ldr	r3, [r7, #12]
    8c48:	3301      	adds	r3, #1
    8c4a:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    8c4c:	687b      	ldr	r3, [r7, #4]
    8c4e:	3b01      	subs	r3, #1
    8c50:	607b      	str	r3, [r7, #4]
    8c52:	687b      	ldr	r3, [r7, #4]
    8c54:	2b00      	cmp	r3, #0
    8c56:	d1f1      	bne.n	8c3c <m2m_memset+0x18>
    8c58:	e000      	b.n	8c5c <m2m_memset+0x38>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    8c5a:	46c0      	nop			; (mov r8, r8)
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
    8c5c:	46bd      	mov	sp, r7
    8c5e:	b004      	add	sp, #16
    8c60:	bd80      	pop	{r7, pc}
    8c62:	46c0      	nop			; (mov r8, r8)

00008c64 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    8c64:	b580      	push	{r7, lr}
    8c66:	b084      	sub	sp, #16
    8c68:	af00      	add	r7, sp, #0
    8c6a:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    8c6c:	230e      	movs	r3, #14
    8c6e:	18fb      	adds	r3, r7, r3
    8c70:	2200      	movs	r2, #0
    8c72:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    8c74:	e009      	b.n	8c8a <m2m_strlen+0x26>
	{
		u16StrLen ++;
    8c76:	230e      	movs	r3, #14
    8c78:	18fb      	adds	r3, r7, r3
    8c7a:	881a      	ldrh	r2, [r3, #0]
    8c7c:	230e      	movs	r3, #14
    8c7e:	18fb      	adds	r3, r7, r3
    8c80:	3201      	adds	r2, #1
    8c82:	801a      	strh	r2, [r3, #0]
		pcStr++;
    8c84:	687b      	ldr	r3, [r7, #4]
    8c86:	3301      	adds	r3, #1
    8c88:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    8c8a:	687b      	ldr	r3, [r7, #4]
    8c8c:	781b      	ldrb	r3, [r3, #0]
    8c8e:	2b00      	cmp	r3, #0
    8c90:	d1f1      	bne.n	8c76 <m2m_strlen+0x12>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    8c92:	230e      	movs	r3, #14
    8c94:	18fb      	adds	r3, r7, r3
    8c96:	881b      	ldrh	r3, [r3, #0]
}
    8c98:	0018      	movs	r0, r3
    8c9a:	46bd      	mov	sp, r7
    8c9c:	b004      	add	sp, #16
    8c9e:	bd80      	pop	{r7, pc}

00008ca0 <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
    8ca0:	b580      	push	{r7, lr}
    8ca2:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
    8ca4:	4b04      	ldr	r3, [pc, #16]	; (8cb8 <isr+0x18>)
    8ca6:	78db      	ldrb	r3, [r3, #3]
    8ca8:	b2db      	uxtb	r3, r3
    8caa:	3301      	adds	r3, #1
    8cac:	b2da      	uxtb	r2, r3
    8cae:	4b02      	ldr	r3, [pc, #8]	; (8cb8 <isr+0x18>)
    8cb0:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    8cb2:	46c0      	nop			; (mov r8, r8)
    8cb4:	46bd      	mov	sp, r7
    8cb6:	bd80      	pop	{r7, pc}
    8cb8:	20000320 	.word	0x20000320

00008cbc <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    8cbc:	b590      	push	{r4, r7, lr}
    8cbe:	b083      	sub	sp, #12
    8cc0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    8cc2:	1dfb      	adds	r3, r7, #7
    8cc4:	2200      	movs	r2, #0
    8cc6:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
    8cc8:	4b14      	ldr	r3, [pc, #80]	; (8d1c <hif_set_rx_done+0x60>)
    8cca:	2200      	movs	r2, #0
    8ccc:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    8cce:	2001      	movs	r0, #1
    8cd0:	4b13      	ldr	r3, [pc, #76]	; (8d20 <hif_set_rx_done+0x64>)
    8cd2:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    8cd4:	1dfc      	adds	r4, r7, #7
    8cd6:	003b      	movs	r3, r7
    8cd8:	4a12      	ldr	r2, [pc, #72]	; (8d24 <hif_set_rx_done+0x68>)
    8cda:	0019      	movs	r1, r3
    8cdc:	0010      	movs	r0, r2
    8cde:	4b12      	ldr	r3, [pc, #72]	; (8d28 <hif_set_rx_done+0x6c>)
    8ce0:	4798      	blx	r3
    8ce2:	0003      	movs	r3, r0
    8ce4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    8ce6:	1dfb      	adds	r3, r7, #7
    8ce8:	781b      	ldrb	r3, [r3, #0]
    8cea:	b25b      	sxtb	r3, r3
    8cec:	2b00      	cmp	r3, #0
    8cee:	d10d      	bne.n	8d0c <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
    8cf0:	683b      	ldr	r3, [r7, #0]
    8cf2:	2202      	movs	r2, #2
    8cf4:	4313      	orrs	r3, r2
    8cf6:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    8cf8:	683b      	ldr	r3, [r7, #0]
    8cfa:	1dfc      	adds	r4, r7, #7
    8cfc:	4a09      	ldr	r2, [pc, #36]	; (8d24 <hif_set_rx_done+0x68>)
    8cfe:	0019      	movs	r1, r3
    8d00:	0010      	movs	r0, r2
    8d02:	4b0a      	ldr	r3, [pc, #40]	; (8d2c <hif_set_rx_done+0x70>)
    8d04:	4798      	blx	r3
    8d06:	0003      	movs	r3, r0
    8d08:	7023      	strb	r3, [r4, #0]
    8d0a:	e000      	b.n	8d0e <hif_set_rx_done+0x52>
	gstrHifCxt.u8HifRXDone = 0;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    8d0c:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    8d0e:	1dfb      	adds	r3, r7, #7
    8d10:	781b      	ldrb	r3, [r3, #0]
    8d12:	b25b      	sxtb	r3, r3

}
    8d14:	0018      	movs	r0, r3
    8d16:	46bd      	mov	sp, r7
    8d18:	b003      	add	sp, #12
    8d1a:	bd90      	pop	{r4, r7, pc}
    8d1c:	20000320 	.word	0x20000320
    8d20:	000083d5 	.word	0x000083d5
    8d24:	00001070 	.word	0x00001070
    8d28:	0000acd5 	.word	0x0000acd5
    8d2c:	0000acf9 	.word	0x0000acf9

00008d30 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    8d30:	b580      	push	{r7, lr}
    8d32:	b082      	sub	sp, #8
    8d34:	af00      	add	r7, sp, #0
    8d36:	603a      	str	r2, [r7, #0]
    8d38:	1dfb      	adds	r3, r7, #7
    8d3a:	1c02      	adds	r2, r0, #0
    8d3c:	701a      	strb	r2, [r3, #0]
    8d3e:	1d3b      	adds	r3, r7, #4
    8d40:	1c0a      	adds	r2, r1, #0
    8d42:	801a      	strh	r2, [r3, #0]


}
    8d44:	46c0      	nop			; (mov r8, r8)
    8d46:	46bd      	mov	sp, r7
    8d48:	b002      	add	sp, #8
    8d4a:	bd80      	pop	{r7, pc}

00008d4c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    8d4c:	b590      	push	{r4, r7, lr}
    8d4e:	b083      	sub	sp, #12
    8d50:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    8d52:	1dfb      	adds	r3, r7, #7
    8d54:	2200      	movs	r2, #0
    8d56:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
    8d58:	4b16      	ldr	r3, [pc, #88]	; (8db4 <hif_chip_wake+0x68>)
    8d5a:	789b      	ldrb	r3, [r3, #2]
    8d5c:	b2db      	uxtb	r3, r3
    8d5e:	2b00      	cmp	r3, #0
    8d60:	d003      	beq.n	8d6a <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    8d62:	1dfb      	adds	r3, r7, #7
    8d64:	781b      	ldrb	r3, [r3, #0]
    8d66:	b25b      	sxtb	r3, r3
    8d68:	e01f      	b.n	8daa <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    8d6a:	4b12      	ldr	r3, [pc, #72]	; (8db4 <hif_chip_wake+0x68>)
    8d6c:	785b      	ldrb	r3, [r3, #1]
    8d6e:	b2db      	uxtb	r3, r3
    8d70:	2b00      	cmp	r3, #0
    8d72:	d10e      	bne.n	8d92 <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    8d74:	4b0f      	ldr	r3, [pc, #60]	; (8db4 <hif_chip_wake+0x68>)
    8d76:	781b      	ldrb	r3, [r3, #0]
    8d78:	b2db      	uxtb	r3, r3
    8d7a:	2b00      	cmp	r3, #0
    8d7c:	d009      	beq.n	8d92 <hif_chip_wake+0x46>
		{
			ret = chip_wake();
    8d7e:	1dfc      	adds	r4, r7, #7
    8d80:	4b0d      	ldr	r3, [pc, #52]	; (8db8 <hif_chip_wake+0x6c>)
    8d82:	4798      	blx	r3
    8d84:	0003      	movs	r3, r0
    8d86:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    8d88:	1dfb      	adds	r3, r7, #7
    8d8a:	781b      	ldrb	r3, [r3, #0]
    8d8c:	b25b      	sxtb	r3, r3
    8d8e:	2b00      	cmp	r3, #0
    8d90:	d107      	bne.n	8da2 <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    8d92:	4b08      	ldr	r3, [pc, #32]	; (8db4 <hif_chip_wake+0x68>)
    8d94:	785b      	ldrb	r3, [r3, #1]
    8d96:	b2db      	uxtb	r3, r3
    8d98:	3301      	adds	r3, #1
    8d9a:	b2da      	uxtb	r2, r3
    8d9c:	4b05      	ldr	r3, [pc, #20]	; (8db4 <hif_chip_wake+0x68>)
    8d9e:	705a      	strb	r2, [r3, #1]
    8da0:	e000      	b.n	8da4 <hif_chip_wake+0x58>
	if(gstrHifCxt.u8ChipSleep == 0)
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
		{
			ret = chip_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
    8da2:	46c0      	nop			; (mov r8, r8)
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
ERR1:
	return ret;
    8da4:	1dfb      	adds	r3, r7, #7
    8da6:	781b      	ldrb	r3, [r3, #0]
    8da8:	b25b      	sxtb	r3, r3
}
    8daa:	0018      	movs	r0, r3
    8dac:	46bd      	mov	sp, r7
    8dae:	b003      	add	sp, #12
    8db0:	bd90      	pop	{r4, r7, pc}
    8db2:	46c0      	nop			; (mov r8, r8)
    8db4:	20000320 	.word	0x20000320
    8db8:	0000a7a9 	.word	0x0000a7a9

00008dbc <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
    8dbc:	b580      	push	{r7, lr}
    8dbe:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
    8dc0:	4b07      	ldr	r3, [pc, #28]	; (8de0 <hif_chip_sleep_sc+0x24>)
    8dc2:	785b      	ldrb	r3, [r3, #1]
    8dc4:	b2db      	uxtb	r3, r3
    8dc6:	2b00      	cmp	r3, #0
    8dc8:	d006      	beq.n	8dd8 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
    8dca:	4b05      	ldr	r3, [pc, #20]	; (8de0 <hif_chip_sleep_sc+0x24>)
    8dcc:	785b      	ldrb	r3, [r3, #1]
    8dce:	b2db      	uxtb	r3, r3
    8dd0:	3b01      	subs	r3, #1
    8dd2:	b2da      	uxtb	r2, r3
    8dd4:	4b02      	ldr	r3, [pc, #8]	; (8de0 <hif_chip_sleep_sc+0x24>)
    8dd6:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
    8dd8:	2300      	movs	r3, #0
}
    8dda:	0018      	movs	r0, r3
    8ddc:	46bd      	mov	sp, r7
    8dde:	bd80      	pop	{r7, pc}
    8de0:	20000320 	.word	0x20000320

00008de4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    8de4:	b590      	push	{r4, r7, lr}
    8de6:	b083      	sub	sp, #12
    8de8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    8dea:	1dfb      	adds	r3, r7, #7
    8dec:	2200      	movs	r2, #0
    8dee:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
    8df0:	4b10      	ldr	r3, [pc, #64]	; (8e34 <hif_chip_sleep+0x50>)
    8df2:	785b      	ldrb	r3, [r3, #1]
    8df4:	b2db      	uxtb	r3, r3
    8df6:	2b00      	cmp	r3, #0
    8df8:	d006      	beq.n	8e08 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
    8dfa:	4b0e      	ldr	r3, [pc, #56]	; (8e34 <hif_chip_sleep+0x50>)
    8dfc:	785b      	ldrb	r3, [r3, #1]
    8dfe:	b2db      	uxtb	r3, r3
    8e00:	3b01      	subs	r3, #1
    8e02:	b2da      	uxtb	r2, r3
    8e04:	4b0b      	ldr	r3, [pc, #44]	; (8e34 <hif_chip_sleep+0x50>)
    8e06:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    8e08:	4b0a      	ldr	r3, [pc, #40]	; (8e34 <hif_chip_sleep+0x50>)
    8e0a:	785b      	ldrb	r3, [r3, #1]
    8e0c:	b2db      	uxtb	r3, r3
    8e0e:	2b00      	cmp	r3, #0
    8e10:	d109      	bne.n	8e26 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    8e12:	4b08      	ldr	r3, [pc, #32]	; (8e34 <hif_chip_sleep+0x50>)
    8e14:	781b      	ldrb	r3, [r3, #0]
    8e16:	b2db      	uxtb	r3, r3
    8e18:	2b00      	cmp	r3, #0
    8e1a:	d004      	beq.n	8e26 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
    8e1c:	1dfc      	adds	r4, r7, #7
    8e1e:	4b06      	ldr	r3, [pc, #24]	; (8e38 <hif_chip_sleep+0x54>)
    8e20:	4798      	blx	r3
    8e22:	0003      	movs	r3, r0
    8e24:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
    8e26:	1dfb      	adds	r3, r7, #7
    8e28:	781b      	ldrb	r3, [r3, #0]
    8e2a:	b25b      	sxtb	r3, r3
}
    8e2c:	0018      	movs	r0, r3
    8e2e:	46bd      	mov	sp, r7
    8e30:	b003      	add	sp, #12
    8e32:	bd90      	pop	{r4, r7, pc}
    8e34:	20000320 	.word	0x20000320
    8e38:	0000a6d1 	.word	0x0000a6d1

00008e3c <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    8e3c:	b580      	push	{r7, lr}
    8e3e:	b082      	sub	sp, #8
    8e40:	af00      	add	r7, sp, #0
    8e42:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    8e44:	4b09      	ldr	r3, [pc, #36]	; (8e6c <hif_init+0x30>)
    8e46:	2228      	movs	r2, #40	; 0x28
    8e48:	2100      	movs	r1, #0
    8e4a:	0018      	movs	r0, r3
    8e4c:	4b08      	ldr	r3, [pc, #32]	; (8e70 <hif_init+0x34>)
    8e4e:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    8e50:	4b08      	ldr	r3, [pc, #32]	; (8e74 <hif_init+0x38>)
    8e52:	0018      	movs	r0, r3
    8e54:	4b08      	ldr	r3, [pc, #32]	; (8e78 <hif_init+0x3c>)
    8e56:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    8e58:	4b08      	ldr	r3, [pc, #32]	; (8e7c <hif_init+0x40>)
    8e5a:	0019      	movs	r1, r3
    8e5c:	2003      	movs	r0, #3
    8e5e:	4b08      	ldr	r3, [pc, #32]	; (8e80 <hif_init+0x44>)
    8e60:	4798      	blx	r3
	return M2M_SUCCESS;
    8e62:	2300      	movs	r3, #0
}
    8e64:	0018      	movs	r0, r3
    8e66:	46bd      	mov	sp, r7
    8e68:	b002      	add	sp, #8
    8e6a:	bd80      	pop	{r7, pc}
    8e6c:	20000320 	.word	0x20000320
    8e70:	00008c25 	.word	0x00008c25
    8e74:	00008ca1 	.word	0x00008ca1
    8e78:	0000835d 	.word	0x0000835d
    8e7c:	00008d31 	.word	0x00008d31
    8e80:	0000993d 	.word	0x0000993d

00008e84 <hif_deinit>:
*    @param [in]	arg
*				Pointer to the arguments.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_deinit(void * arg)
{
    8e84:	b590      	push	{r4, r7, lr}
    8e86:	b085      	sub	sp, #20
    8e88:	af00      	add	r7, sp, #0
    8e8a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    8e8c:	230f      	movs	r3, #15
    8e8e:	18fb      	adds	r3, r7, r3
    8e90:	2200      	movs	r2, #0
    8e92:	701a      	strb	r2, [r3, #0]
	ret = hif_chip_wake();
    8e94:	230f      	movs	r3, #15
    8e96:	18fc      	adds	r4, r7, r3
    8e98:	4b08      	ldr	r3, [pc, #32]	; (8ebc <hif_deinit+0x38>)
    8e9a:	4798      	blx	r3
    8e9c:	0003      	movs	r3, r0
    8e9e:	7023      	strb	r3, [r4, #0]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    8ea0:	4b07      	ldr	r3, [pc, #28]	; (8ec0 <hif_deinit+0x3c>)
    8ea2:	2228      	movs	r2, #40	; 0x28
    8ea4:	2100      	movs	r1, #0
    8ea6:	0018      	movs	r0, r3
    8ea8:	4b06      	ldr	r3, [pc, #24]	; (8ec4 <hif_deinit+0x40>)
    8eaa:	4798      	blx	r3
	return ret;
    8eac:	230f      	movs	r3, #15
    8eae:	18fb      	adds	r3, r7, r3
    8eb0:	781b      	ldrb	r3, [r3, #0]
    8eb2:	b25b      	sxtb	r3, r3
}
    8eb4:	0018      	movs	r0, r3
    8eb6:	46bd      	mov	sp, r7
    8eb8:	b005      	add	sp, #20
    8eba:	bd90      	pop	{r4, r7, pc}
    8ebc:	00008d4d 	.word	0x00008d4d
    8ec0:	20000320 	.word	0x20000320
    8ec4:	00008c25 	.word	0x00008c25

00008ec8 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    8ec8:	b590      	push	{r4, r7, lr}
    8eca:	b089      	sub	sp, #36	; 0x24
    8ecc:	af00      	add	r7, sp, #0
    8ece:	0004      	movs	r4, r0
    8ed0:	0008      	movs	r0, r1
    8ed2:	603a      	str	r2, [r7, #0]
    8ed4:	0019      	movs	r1, r3
    8ed6:	1dfb      	adds	r3, r7, #7
    8ed8:	1c22      	adds	r2, r4, #0
    8eda:	701a      	strb	r2, [r3, #0]
    8edc:	1dbb      	adds	r3, r7, #6
    8ede:	1c02      	adds	r2, r0, #0
    8ee0:	701a      	strb	r2, [r3, #0]
    8ee2:	1d3b      	adds	r3, r7, #4
    8ee4:	1c0a      	adds	r2, r1, #0
    8ee6:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    8ee8:	231f      	movs	r3, #31
    8eea:	18fb      	adds	r3, r7, r3
    8eec:	22ff      	movs	r2, #255	; 0xff
    8eee:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    8ef0:	1dbb      	adds	r3, r7, #6
    8ef2:	781b      	ldrb	r3, [r3, #0]
    8ef4:	227f      	movs	r2, #127	; 0x7f
    8ef6:	4013      	ands	r3, r2
    8ef8:	b2da      	uxtb	r2, r3
    8efa:	2318      	movs	r3, #24
    8efc:	18fb      	adds	r3, r7, r3
    8efe:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    8f00:	2318      	movs	r3, #24
    8f02:	18fb      	adds	r3, r7, r3
    8f04:	1dfa      	adds	r2, r7, #7
    8f06:	7812      	ldrb	r2, [r2, #0]
    8f08:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    8f0a:	2318      	movs	r3, #24
    8f0c:	18fb      	adds	r3, r7, r3
    8f0e:	2208      	movs	r2, #8
    8f10:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    8f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8f14:	2b00      	cmp	r3, #0
    8f16:	d011      	beq.n	8f3c <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    8f18:	2318      	movs	r3, #24
    8f1a:	18fb      	adds	r3, r7, r3
    8f1c:	885b      	ldrh	r3, [r3, #2]
    8f1e:	b29a      	uxth	r2, r3
    8f20:	2338      	movs	r3, #56	; 0x38
    8f22:	18f9      	adds	r1, r7, r3
    8f24:	2334      	movs	r3, #52	; 0x34
    8f26:	18fb      	adds	r3, r7, r3
    8f28:	8809      	ldrh	r1, [r1, #0]
    8f2a:	881b      	ldrh	r3, [r3, #0]
    8f2c:	18cb      	adds	r3, r1, r3
    8f2e:	b29b      	uxth	r3, r3
    8f30:	18d3      	adds	r3, r2, r3
    8f32:	b29a      	uxth	r2, r3
    8f34:	2318      	movs	r3, #24
    8f36:	18fb      	adds	r3, r7, r3
    8f38:	805a      	strh	r2, [r3, #2]
    8f3a:	e00a      	b.n	8f52 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    8f3c:	2318      	movs	r3, #24
    8f3e:	18fb      	adds	r3, r7, r3
    8f40:	885b      	ldrh	r3, [r3, #2]
    8f42:	b29a      	uxth	r2, r3
    8f44:	1d3b      	adds	r3, r7, #4
    8f46:	881b      	ldrh	r3, [r3, #0]
    8f48:	18d3      	adds	r3, r2, r3
    8f4a:	b29a      	uxth	r2, r3
    8f4c:	2318      	movs	r3, #24
    8f4e:	18fb      	adds	r3, r7, r3
    8f50:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    8f52:	231f      	movs	r3, #31
    8f54:	18fc      	adds	r4, r7, r3
    8f56:	4bb0      	ldr	r3, [pc, #704]	; (9218 <hif_send+0x350>)
    8f58:	4798      	blx	r3
    8f5a:	0003      	movs	r3, r0
    8f5c:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    8f5e:	231f      	movs	r3, #31
    8f60:	18fb      	adds	r3, r7, r3
    8f62:	781b      	ldrb	r3, [r3, #0]
    8f64:	b25b      	sxtb	r3, r3
    8f66:	2b00      	cmp	r3, #0
    8f68:	d000      	beq.n	8f6c <hif_send+0xa4>
    8f6a:	e127      	b.n	91bc <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
    8f6c:	2300      	movs	r3, #0
    8f6e:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    8f70:	230e      	movs	r3, #14
    8f72:	18fb      	adds	r3, r7, r3
    8f74:	2200      	movs	r2, #0
    8f76:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    8f78:	2300      	movs	r3, #0
    8f7a:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    8f7c:	1dfb      	adds	r3, r7, #7
    8f7e:	781a      	ldrb	r2, [r3, #0]
    8f80:	697b      	ldr	r3, [r7, #20]
    8f82:	4313      	orrs	r3, r2
    8f84:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    8f86:	1dbb      	adds	r3, r7, #6
    8f88:	781b      	ldrb	r3, [r3, #0]
    8f8a:	021a      	lsls	r2, r3, #8
    8f8c:	697b      	ldr	r3, [r7, #20]
    8f8e:	4313      	orrs	r3, r2
    8f90:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    8f92:	2318      	movs	r3, #24
    8f94:	18fb      	adds	r3, r7, r3
    8f96:	885b      	ldrh	r3, [r3, #2]
    8f98:	b29b      	uxth	r3, r3
    8f9a:	041a      	lsls	r2, r3, #16
    8f9c:	697b      	ldr	r3, [r7, #20]
    8f9e:	4313      	orrs	r3, r2
    8fa0:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    8fa2:	697b      	ldr	r3, [r7, #20]
    8fa4:	221f      	movs	r2, #31
    8fa6:	18bc      	adds	r4, r7, r2
    8fa8:	4a9c      	ldr	r2, [pc, #624]	; (921c <hif_send+0x354>)
    8faa:	0019      	movs	r1, r3
    8fac:	0010      	movs	r0, r2
    8fae:	4b9c      	ldr	r3, [pc, #624]	; (9220 <hif_send+0x358>)
    8fb0:	4798      	blx	r3
    8fb2:	0003      	movs	r3, r0
    8fb4:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    8fb6:	231f      	movs	r3, #31
    8fb8:	18fb      	adds	r3, r7, r3
    8fba:	781b      	ldrb	r3, [r3, #0]
    8fbc:	b25b      	sxtb	r3, r3
    8fbe:	2b00      	cmp	r3, #0
    8fc0:	d000      	beq.n	8fc4 <hif_send+0xfc>
    8fc2:	e115      	b.n	91f0 <hif_send+0x328>

		reg = 0UL;
    8fc4:	2300      	movs	r3, #0
    8fc6:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    8fc8:	697b      	ldr	r3, [r7, #20]
    8fca:	2202      	movs	r2, #2
    8fcc:	4313      	orrs	r3, r2
    8fce:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    8fd0:	697b      	ldr	r3, [r7, #20]
    8fd2:	221f      	movs	r2, #31
    8fd4:	18bc      	adds	r4, r7, r2
    8fd6:	4a93      	ldr	r2, [pc, #588]	; (9224 <hif_send+0x35c>)
    8fd8:	0019      	movs	r1, r3
    8fda:	0010      	movs	r0, r2
    8fdc:	4b90      	ldr	r3, [pc, #576]	; (9220 <hif_send+0x358>)
    8fde:	4798      	blx	r3
    8fe0:	0003      	movs	r3, r0
    8fe2:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    8fe4:	231f      	movs	r3, #31
    8fe6:	18fb      	adds	r3, r7, r3
    8fe8:	781b      	ldrb	r3, [r3, #0]
    8fea:	b25b      	sxtb	r3, r3
    8fec:	2b00      	cmp	r3, #0
    8fee:	d000      	beq.n	8ff2 <hif_send+0x12a>
    8ff0:	e100      	b.n	91f4 <hif_send+0x32c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    8ff2:	2300      	movs	r3, #0
    8ff4:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    8ff6:	230e      	movs	r3, #14
    8ff8:	18fb      	adds	r3, r7, r3
    8ffa:	2200      	movs	r2, #0
    8ffc:	801a      	strh	r2, [r3, #0]
    8ffe:	e04f      	b.n	90a0 <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    9000:	231f      	movs	r3, #31
    9002:	18fc      	adds	r4, r7, r3
    9004:	2314      	movs	r3, #20
    9006:	18fb      	adds	r3, r7, r3
    9008:	4a86      	ldr	r2, [pc, #536]	; (9224 <hif_send+0x35c>)
    900a:	0019      	movs	r1, r3
    900c:	0010      	movs	r0, r2
    900e:	4b86      	ldr	r3, [pc, #536]	; (9228 <hif_send+0x360>)
    9010:	4798      	blx	r3
    9012:	0003      	movs	r3, r0
    9014:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    9016:	231f      	movs	r3, #31
    9018:	18fb      	adds	r3, r7, r3
    901a:	781b      	ldrb	r3, [r3, #0]
    901c:	b25b      	sxtb	r3, r3
    901e:	2b00      	cmp	r3, #0
    9020:	d146      	bne.n	90b0 <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    9022:	230e      	movs	r3, #14
    9024:	18fb      	adds	r3, r7, r3
    9026:	881b      	ldrh	r3, [r3, #0]
    9028:	b29a      	uxth	r2, r3
    902a:	23f4      	movs	r3, #244	; 0xf4
    902c:	33ff      	adds	r3, #255	; 0xff
    902e:	429a      	cmp	r2, r3
    9030:	d915      	bls.n	905e <hif_send+0x196>
				if(cnt < 501) {
    9032:	230e      	movs	r3, #14
    9034:	18fb      	adds	r3, r7, r3
    9036:	881b      	ldrh	r3, [r3, #0]
    9038:	b29a      	uxth	r2, r3
    903a:	23fa      	movs	r3, #250	; 0xfa
    903c:	005b      	lsls	r3, r3, #1
    903e:	429a      	cmp	r2, r3
    9040:	d80a      	bhi.n	9058 <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
    9042:	4b7a      	ldr	r3, [pc, #488]	; (922c <hif_send+0x364>)
    9044:	0018      	movs	r0, r3
    9046:	4b7a      	ldr	r3, [pc, #488]	; (9230 <hif_send+0x368>)
    9048:	4798      	blx	r3
    904a:	4b7a      	ldr	r3, [pc, #488]	; (9234 <hif_send+0x36c>)
    904c:	0018      	movs	r0, r3
    904e:	4b7a      	ldr	r3, [pc, #488]	; (9238 <hif_send+0x370>)
    9050:	4798      	blx	r3
    9052:	200d      	movs	r0, #13
    9054:	4b79      	ldr	r3, [pc, #484]	; (923c <hif_send+0x374>)
    9056:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    9058:	2001      	movs	r0, #1
    905a:	4b79      	ldr	r3, [pc, #484]	; (9240 <hif_send+0x378>)
    905c:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    905e:	697b      	ldr	r3, [r7, #20]
    9060:	2202      	movs	r2, #2
    9062:	4013      	ands	r3, r2
    9064:	d113      	bne.n	908e <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    9066:	231f      	movs	r3, #31
    9068:	18fc      	adds	r4, r7, r3
    906a:	2310      	movs	r3, #16
    906c:	18fb      	adds	r3, r7, r3
    906e:	4a75      	ldr	r2, [pc, #468]	; (9244 <hif_send+0x37c>)
    9070:	0019      	movs	r1, r3
    9072:	0010      	movs	r0, r2
    9074:	4b6c      	ldr	r3, [pc, #432]	; (9228 <hif_send+0x360>)
    9076:	4798      	blx	r3
    9078:	0003      	movs	r3, r0
    907a:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    907c:	231f      	movs	r3, #31
    907e:	18fb      	adds	r3, r7, r3
    9080:	781b      	ldrb	r3, [r3, #0]
    9082:	b25b      	sxtb	r3, r3
    9084:	2b00      	cmp	r3, #0
    9086:	d015      	beq.n	90b4 <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    9088:	2300      	movs	r3, #0
    908a:	613b      	str	r3, [r7, #16]
					goto ERR1;
    908c:	e0b9      	b.n	9202 <hif_send+0x33a>
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
		
		for(cnt = 0; cnt < 1000; cnt ++)
    908e:	230e      	movs	r3, #14
    9090:	18fb      	adds	r3, r7, r3
    9092:	881b      	ldrh	r3, [r3, #0]
    9094:	b29b      	uxth	r3, r3
    9096:	3301      	adds	r3, #1
    9098:	b29a      	uxth	r2, r3
    909a:	230e      	movs	r3, #14
    909c:	18fb      	adds	r3, r7, r3
    909e:	801a      	strh	r2, [r3, #0]
    90a0:	230e      	movs	r3, #14
    90a2:	18fb      	adds	r3, r7, r3
    90a4:	881b      	ldrh	r3, [r3, #0]
    90a6:	b29b      	uxth	r3, r3
    90a8:	4a67      	ldr	r2, [pc, #412]	; (9248 <hif_send+0x380>)
    90aa:	4293      	cmp	r3, r2
    90ac:	d9a8      	bls.n	9000 <hif_send+0x138>
    90ae:	e002      	b.n	90b6 <hif_send+0x1ee>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    90b0:	46c0      	nop			; (mov r8, r8)
    90b2:	e000      	b.n	90b6 <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
					goto ERR1;
				}
				/*in case of success break */
				break;
    90b4:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    90b6:	693b      	ldr	r3, [r7, #16]
    90b8:	2b00      	cmp	r3, #0
    90ba:	d100      	bne.n	90be <hif_send+0x1f6>
    90bc:	e073      	b.n	91a6 <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    90be:	693b      	ldr	r3, [r7, #16]
    90c0:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    90c2:	2318      	movs	r3, #24
    90c4:	18fb      	adds	r3, r7, r3
    90c6:	885b      	ldrh	r3, [r3, #2]
    90c8:	b29a      	uxth	r2, r3
    90ca:	2318      	movs	r3, #24
    90cc:	18fb      	adds	r3, r7, r3
    90ce:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    90d0:	68bb      	ldr	r3, [r7, #8]
    90d2:	221f      	movs	r2, #31
    90d4:	18bc      	adds	r4, r7, r2
    90d6:	2218      	movs	r2, #24
    90d8:	18b9      	adds	r1, r7, r2
    90da:	2208      	movs	r2, #8
    90dc:	0018      	movs	r0, r3
    90de:	4b5b      	ldr	r3, [pc, #364]	; (924c <hif_send+0x384>)
    90e0:	4798      	blx	r3
    90e2:	0003      	movs	r3, r0
    90e4:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    90e6:	231f      	movs	r3, #31
    90e8:	18fb      	adds	r3, r7, r3
    90ea:	781b      	ldrb	r3, [r3, #0]
    90ec:	b25b      	sxtb	r3, r3
    90ee:	2b00      	cmp	r3, #0
    90f0:	d000      	beq.n	90f4 <hif_send+0x22c>
    90f2:	e081      	b.n	91f8 <hif_send+0x330>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    90f4:	68bb      	ldr	r3, [r7, #8]
    90f6:	3308      	adds	r3, #8
    90f8:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    90fa:	683b      	ldr	r3, [r7, #0]
    90fc:	2b00      	cmp	r3, #0
    90fe:	d015      	beq.n	912c <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    9100:	68b8      	ldr	r0, [r7, #8]
    9102:	1d3b      	adds	r3, r7, #4
    9104:	881a      	ldrh	r2, [r3, #0]
    9106:	231f      	movs	r3, #31
    9108:	18fc      	adds	r4, r7, r3
    910a:	683b      	ldr	r3, [r7, #0]
    910c:	0019      	movs	r1, r3
    910e:	4b4f      	ldr	r3, [pc, #316]	; (924c <hif_send+0x384>)
    9110:	4798      	blx	r3
    9112:	0003      	movs	r3, r0
    9114:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    9116:	231f      	movs	r3, #31
    9118:	18fb      	adds	r3, r7, r3
    911a:	781b      	ldrb	r3, [r3, #0]
    911c:	b25b      	sxtb	r3, r3
    911e:	2b00      	cmp	r3, #0
    9120:	d16c      	bne.n	91fc <hif_send+0x334>
				u32CurrAddr += u16CtrlBufSize;
    9122:	1d3b      	adds	r3, r7, #4
    9124:	881a      	ldrh	r2, [r3, #0]
    9126:	68bb      	ldr	r3, [r7, #8]
    9128:	18d3      	adds	r3, r2, r3
    912a:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    912c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    912e:	2b00      	cmp	r3, #0
    9130:	d021      	beq.n	9176 <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    9132:	2338      	movs	r3, #56	; 0x38
    9134:	18fb      	adds	r3, r7, r3
    9136:	881a      	ldrh	r2, [r3, #0]
    9138:	1d3b      	adds	r3, r7, #4
    913a:	881b      	ldrh	r3, [r3, #0]
    913c:	1ad3      	subs	r3, r2, r3
    913e:	001a      	movs	r2, r3
    9140:	68bb      	ldr	r3, [r7, #8]
    9142:	18d3      	adds	r3, r2, r3
    9144:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    9146:	68b8      	ldr	r0, [r7, #8]
    9148:	2334      	movs	r3, #52	; 0x34
    914a:	18fb      	adds	r3, r7, r3
    914c:	881a      	ldrh	r2, [r3, #0]
    914e:	231f      	movs	r3, #31
    9150:	18fc      	adds	r4, r7, r3
    9152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9154:	0019      	movs	r1, r3
    9156:	4b3d      	ldr	r3, [pc, #244]	; (924c <hif_send+0x384>)
    9158:	4798      	blx	r3
    915a:	0003      	movs	r3, r0
    915c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    915e:	231f      	movs	r3, #31
    9160:	18fb      	adds	r3, r7, r3
    9162:	781b      	ldrb	r3, [r3, #0]
    9164:	b25b      	sxtb	r3, r3
    9166:	2b00      	cmp	r3, #0
    9168:	d14a      	bne.n	9200 <hif_send+0x338>
				u32CurrAddr += u16DataSize;
    916a:	2334      	movs	r3, #52	; 0x34
    916c:	18fb      	adds	r3, r7, r3
    916e:	881a      	ldrh	r2, [r3, #0]
    9170:	68bb      	ldr	r3, [r7, #8]
    9172:	18d3      	adds	r3, r2, r3
    9174:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    9176:	693b      	ldr	r3, [r7, #16]
    9178:	009b      	lsls	r3, r3, #2
    917a:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    917c:	697b      	ldr	r3, [r7, #20]
    917e:	2202      	movs	r2, #2
    9180:	4313      	orrs	r3, r2
    9182:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    9184:	697b      	ldr	r3, [r7, #20]
    9186:	221f      	movs	r2, #31
    9188:	18bc      	adds	r4, r7, r2
    918a:	4a31      	ldr	r2, [pc, #196]	; (9250 <hif_send+0x388>)
    918c:	0019      	movs	r1, r3
    918e:	0010      	movs	r0, r2
    9190:	4b23      	ldr	r3, [pc, #140]	; (9220 <hif_send+0x358>)
    9192:	4798      	blx	r3
    9194:	0003      	movs	r3, r0
    9196:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    9198:	231f      	movs	r3, #31
    919a:	18fb      	adds	r3, r7, r3
    919c:	781b      	ldrb	r3, [r3, #0]
    919e:	b25b      	sxtb	r3, r3
    91a0:	2b00      	cmp	r3, #0
    91a2:	d01a      	beq.n	91da <hif_send+0x312>
    91a4:	e02d      	b.n	9202 <hif_send+0x33a>
		}
		else
		{
			ret = hif_chip_sleep();
    91a6:	231f      	movs	r3, #31
    91a8:	18fc      	adds	r4, r7, r3
    91aa:	4b2a      	ldr	r3, [pc, #168]	; (9254 <hif_send+0x38c>)
    91ac:	4798      	blx	r3
    91ae:	0003      	movs	r3, r0
    91b0:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    91b2:	231f      	movs	r3, #31
    91b4:	18fb      	adds	r3, r7, r3
    91b6:	22fd      	movs	r2, #253	; 0xfd
    91b8:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    91ba:	e024      	b.n	9206 <hif_send+0x33e>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    91bc:	23cb      	movs	r3, #203	; 0xcb
    91be:	005a      	lsls	r2, r3, #1
    91c0:	4925      	ldr	r1, [pc, #148]	; (9258 <hif_send+0x390>)
    91c2:	4b26      	ldr	r3, [pc, #152]	; (925c <hif_send+0x394>)
    91c4:	0018      	movs	r0, r3
    91c6:	4b1a      	ldr	r3, [pc, #104]	; (9230 <hif_send+0x368>)
    91c8:	4798      	blx	r3
    91ca:	4b25      	ldr	r3, [pc, #148]	; (9260 <hif_send+0x398>)
    91cc:	0018      	movs	r0, r3
    91ce:	4b1a      	ldr	r3, [pc, #104]	; (9238 <hif_send+0x370>)
    91d0:	4798      	blx	r3
    91d2:	200d      	movs	r0, #13
    91d4:	4b19      	ldr	r3, [pc, #100]	; (923c <hif_send+0x374>)
    91d6:	4798      	blx	r3
		goto ERR2;
    91d8:	e015      	b.n	9206 <hif_send+0x33e>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    91da:	231f      	movs	r3, #31
    91dc:	18fc      	adds	r4, r7, r3
    91de:	4b1d      	ldr	r3, [pc, #116]	; (9254 <hif_send+0x38c>)
    91e0:	4798      	blx	r3
    91e2:	0003      	movs	r3, r0
    91e4:	7023      	strb	r3, [r4, #0]
	return ret;
    91e6:	231f      	movs	r3, #31
    91e8:	18fb      	adds	r3, r7, r3
    91ea:	781b      	ldrb	r3, [r3, #0]
    91ec:	b25b      	sxtb	r3, r3
    91ee:	e00e      	b.n	920e <hif_send+0x346>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    91f0:	46c0      	nop			; (mov r8, r8)
    91f2:	e006      	b.n	9202 <hif_send+0x33a>

		reg = 0UL;
		reg |= NBIT1;
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    91f4:	46c0      	nop			; (mov r8, r8)
    91f6:	e004      	b.n	9202 <hif_send+0x33a>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
			if(M2M_SUCCESS != ret) goto ERR1;
    91f8:	46c0      	nop			; (mov r8, r8)
    91fa:	e002      	b.n	9202 <hif_send+0x33a>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
			if(pu8CtrlBuf != NULL)
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    91fc:	46c0      	nop			; (mov r8, r8)
    91fe:	e000      	b.n	9202 <hif_send+0x33a>
			}
			if(pu8DataBuf != NULL)
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    9200:	46c0      	nop			; (mov r8, r8)
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    9202:	4b18      	ldr	r3, [pc, #96]	; (9264 <hif_send+0x39c>)
    9204:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    9206:	231f      	movs	r3, #31
    9208:	18fb      	adds	r3, r7, r3
    920a:	781b      	ldrb	r3, [r3, #0]
    920c:	b25b      	sxtb	r3, r3
}
    920e:	0018      	movs	r0, r3
    9210:	46bd      	mov	sp, r7
    9212:	b009      	add	sp, #36	; 0x24
    9214:	bd90      	pop	{r4, r7, pc}
    9216:	46c0      	nop			; (mov r8, r8)
    9218:	00008d4d 	.word	0x00008d4d
    921c:	0000108c 	.word	0x0000108c
    9220:	0000acf9 	.word	0x0000acf9
    9224:	00001078 	.word	0x00001078
    9228:	0000acd5 	.word	0x0000acd5
    922c:	00019ba4 	.word	0x00019ba4
    9230:	00018619 	.word	0x00018619
    9234:	00019bb0 	.word	0x00019bb0
    9238:	00018739 	.word	0x00018739
    923c:	0001864d 	.word	0x0001864d
    9240:	00008335 	.word	0x00008335
    9244:	00150400 	.word	0x00150400
    9248:	000003e7 	.word	0x000003e7
    924c:	0000ae41 	.word	0x0000ae41
    9250:	0000106c 	.word	0x0000106c
    9254:	00008de5 	.word	0x00008de5
    9258:	00019eb8 	.word	0x00019eb8
    925c:	00019bc0 	.word	0x00019bc0
    9260:	00019bd4 	.word	0x00019bd4
    9264:	00008dbd 	.word	0x00008dbd

00009268 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    9268:	b590      	push	{r4, r7, lr}
    926a:	b087      	sub	sp, #28
    926c:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    926e:	230f      	movs	r3, #15
    9270:	18fb      	adds	r3, r7, r3
    9272:	2200      	movs	r2, #0
    9274:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    9276:	230f      	movs	r3, #15
    9278:	18fc      	adds	r4, r7, r3
    927a:	2308      	movs	r3, #8
    927c:	18fb      	adds	r3, r7, r3
    927e:	4ad6      	ldr	r2, [pc, #856]	; (95d8 <hif_isr+0x370>)
    9280:	0019      	movs	r1, r3
    9282:	0010      	movs	r0, r2
    9284:	4bd5      	ldr	r3, [pc, #852]	; (95dc <hif_isr+0x374>)
    9286:	4798      	blx	r3
    9288:	0003      	movs	r3, r0
    928a:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    928c:	230f      	movs	r3, #15
    928e:	18fb      	adds	r3, r7, r3
    9290:	781b      	ldrb	r3, [r3, #0]
    9292:	b25b      	sxtb	r3, r3
    9294:	2b00      	cmp	r3, #0
    9296:	d000      	beq.n	929a <hif_isr+0x32>
    9298:	e217      	b.n	96ca <hif_isr+0x462>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    929a:	68bb      	ldr	r3, [r7, #8]
    929c:	2201      	movs	r2, #1
    929e:	4013      	ands	r3, r2
    92a0:	d100      	bne.n	92a4 <hif_isr+0x3c>
    92a2:	e1fd      	b.n	96a0 <hif_isr+0x438>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    92a4:	2000      	movs	r0, #0
    92a6:	4bce      	ldr	r3, [pc, #824]	; (95e0 <hif_isr+0x378>)
    92a8:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    92aa:	68bb      	ldr	r3, [r7, #8]
    92ac:	2201      	movs	r2, #1
    92ae:	4393      	bics	r3, r2
    92b0:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    92b2:	68bb      	ldr	r3, [r7, #8]
    92b4:	220f      	movs	r2, #15
    92b6:	18bc      	adds	r4, r7, r2
    92b8:	4ac7      	ldr	r2, [pc, #796]	; (95d8 <hif_isr+0x370>)
    92ba:	0019      	movs	r1, r3
    92bc:	0010      	movs	r0, r2
    92be:	4bc9      	ldr	r3, [pc, #804]	; (95e4 <hif_isr+0x37c>)
    92c0:	4798      	blx	r3
    92c2:	0003      	movs	r3, r0
    92c4:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    92c6:	230f      	movs	r3, #15
    92c8:	18fb      	adds	r3, r7, r3
    92ca:	781b      	ldrb	r3, [r3, #0]
    92cc:	b25b      	sxtb	r3, r3
    92ce:	2b00      	cmp	r3, #0
    92d0:	d000      	beq.n	92d4 <hif_isr+0x6c>
    92d2:	e208      	b.n	96e6 <hif_isr+0x47e>
			gstrHifCxt.u8HifRXDone = 1;
    92d4:	4bc4      	ldr	r3, [pc, #784]	; (95e8 <hif_isr+0x380>)
    92d6:	2201      	movs	r2, #1
    92d8:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    92da:	68bb      	ldr	r3, [r7, #8]
    92dc:	089b      	lsrs	r3, r3, #2
    92de:	b29a      	uxth	r2, r3
    92e0:	230c      	movs	r3, #12
    92e2:	18fb      	adds	r3, r7, r3
    92e4:	0512      	lsls	r2, r2, #20
    92e6:	0d12      	lsrs	r2, r2, #20
    92e8:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    92ea:	230c      	movs	r3, #12
    92ec:	18fb      	adds	r3, r7, r3
    92ee:	881b      	ldrh	r3, [r3, #0]
    92f0:	2b00      	cmp	r3, #0
    92f2:	d100      	bne.n	92f6 <hif_isr+0x8e>
    92f4:	e1c1      	b.n	967a <hif_isr+0x412>
				uint32 address = 0;
    92f6:	2300      	movs	r3, #0
    92f8:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    92fa:	230f      	movs	r3, #15
    92fc:	18fc      	adds	r4, r7, r3
    92fe:	003b      	movs	r3, r7
    9300:	4aba      	ldr	r2, [pc, #744]	; (95ec <hif_isr+0x384>)
    9302:	0019      	movs	r1, r3
    9304:	0010      	movs	r0, r2
    9306:	4bb5      	ldr	r3, [pc, #724]	; (95dc <hif_isr+0x374>)
    9308:	4798      	blx	r3
    930a:	0003      	movs	r3, r0
    930c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    930e:	230f      	movs	r3, #15
    9310:	18fb      	adds	r3, r7, r3
    9312:	781b      	ldrb	r3, [r3, #0]
    9314:	b25b      	sxtb	r3, r3
    9316:	2b00      	cmp	r3, #0
    9318:	d012      	beq.n	9340 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    931a:	23c8      	movs	r3, #200	; 0xc8
    931c:	33ff      	adds	r3, #255	; 0xff
    931e:	001a      	movs	r2, r3
    9320:	49b3      	ldr	r1, [pc, #716]	; (95f0 <hif_isr+0x388>)
    9322:	4bb4      	ldr	r3, [pc, #720]	; (95f4 <hif_isr+0x38c>)
    9324:	0018      	movs	r0, r3
    9326:	4bb4      	ldr	r3, [pc, #720]	; (95f8 <hif_isr+0x390>)
    9328:	4798      	blx	r3
    932a:	4bb4      	ldr	r3, [pc, #720]	; (95fc <hif_isr+0x394>)
    932c:	0018      	movs	r0, r3
    932e:	4bb4      	ldr	r3, [pc, #720]	; (9600 <hif_isr+0x398>)
    9330:	4798      	blx	r3
    9332:	200d      	movs	r0, #13
    9334:	4bb3      	ldr	r3, [pc, #716]	; (9604 <hif_isr+0x39c>)
    9336:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    9338:	2001      	movs	r0, #1
    933a:	4ba9      	ldr	r3, [pc, #676]	; (95e0 <hif_isr+0x378>)
    933c:	4798      	blx	r3
					goto ERR1;
    933e:	e1d3      	b.n	96e8 <hif_isr+0x480>
				}
				gstrHifCxt.u32RxAddr = address;
    9340:	683a      	ldr	r2, [r7, #0]
    9342:	4ba9      	ldr	r3, [pc, #676]	; (95e8 <hif_isr+0x380>)
    9344:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    9346:	230c      	movs	r3, #12
    9348:	18fb      	adds	r3, r7, r3
    934a:	881a      	ldrh	r2, [r3, #0]
    934c:	4ba6      	ldr	r3, [pc, #664]	; (95e8 <hif_isr+0x380>)
    934e:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    9350:	683b      	ldr	r3, [r7, #0]
    9352:	220f      	movs	r2, #15
    9354:	18bc      	adds	r4, r7, r2
    9356:	1d39      	adds	r1, r7, #4
    9358:	2204      	movs	r2, #4
    935a:	0018      	movs	r0, r3
    935c:	4baa      	ldr	r3, [pc, #680]	; (9608 <hif_isr+0x3a0>)
    935e:	4798      	blx	r3
    9360:	0003      	movs	r3, r0
    9362:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    9364:	1d3b      	adds	r3, r7, #4
    9366:	885b      	ldrh	r3, [r3, #2]
    9368:	b29a      	uxth	r2, r3
    936a:	1d3b      	adds	r3, r7, #4
    936c:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    936e:	230f      	movs	r3, #15
    9370:	18fb      	adds	r3, r7, r3
    9372:	781b      	ldrb	r3, [r3, #0]
    9374:	b25b      	sxtb	r3, r3
    9376:	2b00      	cmp	r3, #0
    9378:	d012      	beq.n	93a0 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    937a:	23d2      	movs	r3, #210	; 0xd2
    937c:	33ff      	adds	r3, #255	; 0xff
    937e:	001a      	movs	r2, r3
    9380:	499b      	ldr	r1, [pc, #620]	; (95f0 <hif_isr+0x388>)
    9382:	4b9c      	ldr	r3, [pc, #624]	; (95f4 <hif_isr+0x38c>)
    9384:	0018      	movs	r0, r3
    9386:	4b9c      	ldr	r3, [pc, #624]	; (95f8 <hif_isr+0x390>)
    9388:	4798      	blx	r3
    938a:	4ba0      	ldr	r3, [pc, #640]	; (960c <hif_isr+0x3a4>)
    938c:	0018      	movs	r0, r3
    938e:	4b9c      	ldr	r3, [pc, #624]	; (9600 <hif_isr+0x398>)
    9390:	4798      	blx	r3
    9392:	200d      	movs	r0, #13
    9394:	4b9b      	ldr	r3, [pc, #620]	; (9604 <hif_isr+0x39c>)
    9396:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    9398:	2001      	movs	r0, #1
    939a:	4b91      	ldr	r3, [pc, #580]	; (95e0 <hif_isr+0x378>)
    939c:	4798      	blx	r3
					goto ERR1;
    939e:	e1a3      	b.n	96e8 <hif_isr+0x480>
				}
				if(strHif.u16Length != size)
    93a0:	1d3b      	adds	r3, r7, #4
    93a2:	885b      	ldrh	r3, [r3, #2]
    93a4:	b29b      	uxth	r3, r3
    93a6:	220c      	movs	r2, #12
    93a8:	18ba      	adds	r2, r7, r2
    93aa:	8812      	ldrh	r2, [r2, #0]
    93ac:	429a      	cmp	r2, r3
    93ae:	d02d      	beq.n	940c <hif_isr+0x1a4>
				{
					if((size - strHif.u16Length) > 4)
    93b0:	230c      	movs	r3, #12
    93b2:	18fb      	adds	r3, r7, r3
    93b4:	881b      	ldrh	r3, [r3, #0]
    93b6:	1d3a      	adds	r2, r7, #4
    93b8:	8852      	ldrh	r2, [r2, #2]
    93ba:	b292      	uxth	r2, r2
    93bc:	1a9b      	subs	r3, r3, r2
    93be:	2b04      	cmp	r3, #4
    93c0:	dd24      	ble.n	940c <hif_isr+0x1a4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    93c2:	23ed      	movs	r3, #237	; 0xed
    93c4:	005a      	lsls	r2, r3, #1
    93c6:	498a      	ldr	r1, [pc, #552]	; (95f0 <hif_isr+0x388>)
    93c8:	4b8a      	ldr	r3, [pc, #552]	; (95f4 <hif_isr+0x38c>)
    93ca:	0018      	movs	r0, r3
    93cc:	4b8a      	ldr	r3, [pc, #552]	; (95f8 <hif_isr+0x390>)
    93ce:	4798      	blx	r3
    93d0:	230c      	movs	r3, #12
    93d2:	18fb      	adds	r3, r7, r3
    93d4:	8819      	ldrh	r1, [r3, #0]
    93d6:	1d3b      	adds	r3, r7, #4
    93d8:	885b      	ldrh	r3, [r3, #2]
    93da:	b29b      	uxth	r3, r3
    93dc:	001a      	movs	r2, r3
    93de:	1d3b      	adds	r3, r7, #4
    93e0:	781b      	ldrb	r3, [r3, #0]
    93e2:	b2db      	uxtb	r3, r3
    93e4:	001c      	movs	r4, r3
    93e6:	1d3b      	adds	r3, r7, #4
    93e8:	785b      	ldrb	r3, [r3, #1]
    93ea:	b2db      	uxtb	r3, r3
    93ec:	4888      	ldr	r0, [pc, #544]	; (9610 <hif_isr+0x3a8>)
    93ee:	9300      	str	r3, [sp, #0]
    93f0:	0023      	movs	r3, r4
    93f2:	4c81      	ldr	r4, [pc, #516]	; (95f8 <hif_isr+0x390>)
    93f4:	47a0      	blx	r4
    93f6:	200d      	movs	r0, #13
    93f8:	4b82      	ldr	r3, [pc, #520]	; (9604 <hif_isr+0x39c>)
    93fa:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    93fc:	2001      	movs	r0, #1
    93fe:	4b78      	ldr	r3, [pc, #480]	; (95e0 <hif_isr+0x378>)
    9400:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    9402:	230f      	movs	r3, #15
    9404:	18fb      	adds	r3, r7, r3
    9406:	22fa      	movs	r2, #250	; 0xfa
    9408:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    940a:	e16d      	b.n	96e8 <hif_isr+0x480>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    940c:	1d3b      	adds	r3, r7, #4
    940e:	781b      	ldrb	r3, [r3, #0]
    9410:	b2db      	uxtb	r3, r3
    9412:	2b01      	cmp	r3, #1
    9414:	d120      	bne.n	9458 <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    9416:	4b74      	ldr	r3, [pc, #464]	; (95e8 <hif_isr+0x380>)
    9418:	68db      	ldr	r3, [r3, #12]
    941a:	2b00      	cmp	r3, #0
    941c:	d00d      	beq.n	943a <hif_isr+0x1d2>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    941e:	4b72      	ldr	r3, [pc, #456]	; (95e8 <hif_isr+0x380>)
    9420:	68db      	ldr	r3, [r3, #12]
    9422:	1d3a      	adds	r2, r7, #4
    9424:	7852      	ldrb	r2, [r2, #1]
    9426:	b2d0      	uxtb	r0, r2
    9428:	1d3a      	adds	r2, r7, #4
    942a:	8852      	ldrh	r2, [r2, #2]
    942c:	b292      	uxth	r2, r2
    942e:	3a08      	subs	r2, #8
    9430:	b291      	uxth	r1, r2
    9432:	683a      	ldr	r2, [r7, #0]
    9434:	3208      	adds	r2, #8
    9436:	4798      	blx	r3
    9438:	e0fe      	b.n	9638 <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    943a:	23f3      	movs	r3, #243	; 0xf3
    943c:	005a      	lsls	r2, r3, #1
    943e:	496c      	ldr	r1, [pc, #432]	; (95f0 <hif_isr+0x388>)
    9440:	4b6c      	ldr	r3, [pc, #432]	; (95f4 <hif_isr+0x38c>)
    9442:	0018      	movs	r0, r3
    9444:	4b6c      	ldr	r3, [pc, #432]	; (95f8 <hif_isr+0x390>)
    9446:	4798      	blx	r3
    9448:	4b72      	ldr	r3, [pc, #456]	; (9614 <hif_isr+0x3ac>)
    944a:	0018      	movs	r0, r3
    944c:	4b6c      	ldr	r3, [pc, #432]	; (9600 <hif_isr+0x398>)
    944e:	4798      	blx	r3
    9450:	200d      	movs	r0, #13
    9452:	4b6c      	ldr	r3, [pc, #432]	; (9604 <hif_isr+0x39c>)
    9454:	4798      	blx	r3
    9456:	e0ef      	b.n	9638 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    9458:	1d3b      	adds	r3, r7, #4
    945a:	781b      	ldrb	r3, [r3, #0]
    945c:	b2db      	uxtb	r3, r3
    945e:	2b02      	cmp	r3, #2
    9460:	d120      	bne.n	94a4 <hif_isr+0x23c>
				{
					if(gstrHifCxt.pfIpCb)
    9462:	4b61      	ldr	r3, [pc, #388]	; (95e8 <hif_isr+0x380>)
    9464:	691b      	ldr	r3, [r3, #16]
    9466:	2b00      	cmp	r3, #0
    9468:	d00d      	beq.n	9486 <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    946a:	4b5f      	ldr	r3, [pc, #380]	; (95e8 <hif_isr+0x380>)
    946c:	691b      	ldr	r3, [r3, #16]
    946e:	1d3a      	adds	r2, r7, #4
    9470:	7852      	ldrb	r2, [r2, #1]
    9472:	b2d0      	uxtb	r0, r2
    9474:	1d3a      	adds	r2, r7, #4
    9476:	8852      	ldrh	r2, [r2, #2]
    9478:	b292      	uxth	r2, r2
    947a:	3a08      	subs	r2, #8
    947c:	b291      	uxth	r1, r2
    947e:	683a      	ldr	r2, [r7, #0]
    9480:	3208      	adds	r2, #8
    9482:	4798      	blx	r3
    9484:	e0d8      	b.n	9638 <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    9486:	23f7      	movs	r3, #247	; 0xf7
    9488:	005a      	lsls	r2, r3, #1
    948a:	4959      	ldr	r1, [pc, #356]	; (95f0 <hif_isr+0x388>)
    948c:	4b59      	ldr	r3, [pc, #356]	; (95f4 <hif_isr+0x38c>)
    948e:	0018      	movs	r0, r3
    9490:	4b59      	ldr	r3, [pc, #356]	; (95f8 <hif_isr+0x390>)
    9492:	4798      	blx	r3
    9494:	4b60      	ldr	r3, [pc, #384]	; (9618 <hif_isr+0x3b0>)
    9496:	0018      	movs	r0, r3
    9498:	4b59      	ldr	r3, [pc, #356]	; (9600 <hif_isr+0x398>)
    949a:	4798      	blx	r3
    949c:	200d      	movs	r0, #13
    949e:	4b59      	ldr	r3, [pc, #356]	; (9604 <hif_isr+0x39c>)
    94a0:	4798      	blx	r3
    94a2:	e0c9      	b.n	9638 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    94a4:	1d3b      	adds	r3, r7, #4
    94a6:	781b      	ldrb	r3, [r3, #0]
    94a8:	b2db      	uxtb	r3, r3
    94aa:	2b04      	cmp	r3, #4
    94ac:	d120      	bne.n	94f0 <hif_isr+0x288>
				{
					if(gstrHifCxt.pfOtaCb)
    94ae:	4b4e      	ldr	r3, [pc, #312]	; (95e8 <hif_isr+0x380>)
    94b0:	695b      	ldr	r3, [r3, #20]
    94b2:	2b00      	cmp	r3, #0
    94b4:	d00d      	beq.n	94d2 <hif_isr+0x26a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    94b6:	4b4c      	ldr	r3, [pc, #304]	; (95e8 <hif_isr+0x380>)
    94b8:	695b      	ldr	r3, [r3, #20]
    94ba:	1d3a      	adds	r2, r7, #4
    94bc:	7852      	ldrb	r2, [r2, #1]
    94be:	b2d0      	uxtb	r0, r2
    94c0:	1d3a      	adds	r2, r7, #4
    94c2:	8852      	ldrh	r2, [r2, #2]
    94c4:	b292      	uxth	r2, r2
    94c6:	3a08      	subs	r2, #8
    94c8:	b291      	uxth	r1, r2
    94ca:	683a      	ldr	r2, [r7, #0]
    94cc:	3208      	adds	r2, #8
    94ce:	4798      	blx	r3
    94d0:	e0b2      	b.n	9638 <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    94d2:	23fb      	movs	r3, #251	; 0xfb
    94d4:	005a      	lsls	r2, r3, #1
    94d6:	4946      	ldr	r1, [pc, #280]	; (95f0 <hif_isr+0x388>)
    94d8:	4b46      	ldr	r3, [pc, #280]	; (95f4 <hif_isr+0x38c>)
    94da:	0018      	movs	r0, r3
    94dc:	4b46      	ldr	r3, [pc, #280]	; (95f8 <hif_isr+0x390>)
    94de:	4798      	blx	r3
    94e0:	4b4e      	ldr	r3, [pc, #312]	; (961c <hif_isr+0x3b4>)
    94e2:	0018      	movs	r0, r3
    94e4:	4b46      	ldr	r3, [pc, #280]	; (9600 <hif_isr+0x398>)
    94e6:	4798      	blx	r3
    94e8:	200d      	movs	r0, #13
    94ea:	4b46      	ldr	r3, [pc, #280]	; (9604 <hif_isr+0x39c>)
    94ec:	4798      	blx	r3
    94ee:	e0a3      	b.n	9638 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    94f0:	1d3b      	adds	r3, r7, #4
    94f2:	781b      	ldrb	r3, [r3, #0]
    94f4:	b2db      	uxtb	r3, r3
    94f6:	2b06      	cmp	r3, #6
    94f8:	d11f      	bne.n	953a <hif_isr+0x2d2>
				{
					if(gstrHifCxt.pfCryptoCb)
    94fa:	4b3b      	ldr	r3, [pc, #236]	; (95e8 <hif_isr+0x380>)
    94fc:	6a1b      	ldr	r3, [r3, #32]
    94fe:	2b00      	cmp	r3, #0
    9500:	d00d      	beq.n	951e <hif_isr+0x2b6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9502:	4b39      	ldr	r3, [pc, #228]	; (95e8 <hif_isr+0x380>)
    9504:	6a1b      	ldr	r3, [r3, #32]
    9506:	1d3a      	adds	r2, r7, #4
    9508:	7852      	ldrb	r2, [r2, #1]
    950a:	b2d0      	uxtb	r0, r2
    950c:	1d3a      	adds	r2, r7, #4
    950e:	8852      	ldrh	r2, [r2, #2]
    9510:	b292      	uxth	r2, r2
    9512:	3a08      	subs	r2, #8
    9514:	b291      	uxth	r1, r2
    9516:	683a      	ldr	r2, [r7, #0]
    9518:	3208      	adds	r2, #8
    951a:	4798      	blx	r3
    951c:	e08c      	b.n	9638 <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    951e:	4a40      	ldr	r2, [pc, #256]	; (9620 <hif_isr+0x3b8>)
    9520:	4933      	ldr	r1, [pc, #204]	; (95f0 <hif_isr+0x388>)
    9522:	4b34      	ldr	r3, [pc, #208]	; (95f4 <hif_isr+0x38c>)
    9524:	0018      	movs	r0, r3
    9526:	4b34      	ldr	r3, [pc, #208]	; (95f8 <hif_isr+0x390>)
    9528:	4798      	blx	r3
    952a:	4b3e      	ldr	r3, [pc, #248]	; (9624 <hif_isr+0x3bc>)
    952c:	0018      	movs	r0, r3
    952e:	4b34      	ldr	r3, [pc, #208]	; (9600 <hif_isr+0x398>)
    9530:	4798      	blx	r3
    9532:	200d      	movs	r0, #13
    9534:	4b33      	ldr	r3, [pc, #204]	; (9604 <hif_isr+0x39c>)
    9536:	4798      	blx	r3
    9538:	e07e      	b.n	9638 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    953a:	1d3b      	adds	r3, r7, #4
    953c:	781b      	ldrb	r3, [r3, #0]
    953e:	b2db      	uxtb	r3, r3
    9540:	2b07      	cmp	r3, #7
    9542:	d11f      	bne.n	9584 <hif_isr+0x31c>
				{
					if(gstrHifCxt.pfSigmaCb)
    9544:	4b28      	ldr	r3, [pc, #160]	; (95e8 <hif_isr+0x380>)
    9546:	699b      	ldr	r3, [r3, #24]
    9548:	2b00      	cmp	r3, #0
    954a:	d00d      	beq.n	9568 <hif_isr+0x300>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    954c:	4b26      	ldr	r3, [pc, #152]	; (95e8 <hif_isr+0x380>)
    954e:	699b      	ldr	r3, [r3, #24]
    9550:	1d3a      	adds	r2, r7, #4
    9552:	7852      	ldrb	r2, [r2, #1]
    9554:	b2d0      	uxtb	r0, r2
    9556:	1d3a      	adds	r2, r7, #4
    9558:	8852      	ldrh	r2, [r2, #2]
    955a:	b292      	uxth	r2, r2
    955c:	3a08      	subs	r2, #8
    955e:	b291      	uxth	r1, r2
    9560:	683a      	ldr	r2, [r7, #0]
    9562:	3208      	adds	r2, #8
    9564:	4798      	blx	r3
    9566:	e067      	b.n	9638 <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    9568:	4a2f      	ldr	r2, [pc, #188]	; (9628 <hif_isr+0x3c0>)
    956a:	4921      	ldr	r1, [pc, #132]	; (95f0 <hif_isr+0x388>)
    956c:	4b21      	ldr	r3, [pc, #132]	; (95f4 <hif_isr+0x38c>)
    956e:	0018      	movs	r0, r3
    9570:	4b21      	ldr	r3, [pc, #132]	; (95f8 <hif_isr+0x390>)
    9572:	4798      	blx	r3
    9574:	4b2d      	ldr	r3, [pc, #180]	; (962c <hif_isr+0x3c4>)
    9576:	0018      	movs	r0, r3
    9578:	4b21      	ldr	r3, [pc, #132]	; (9600 <hif_isr+0x398>)
    957a:	4798      	blx	r3
    957c:	200d      	movs	r0, #13
    957e:	4b21      	ldr	r3, [pc, #132]	; (9604 <hif_isr+0x39c>)
    9580:	4798      	blx	r3
    9582:	e059      	b.n	9638 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    9584:	1d3b      	adds	r3, r7, #4
    9586:	781b      	ldrb	r3, [r3, #0]
    9588:	b2db      	uxtb	r3, r3
    958a:	2b05      	cmp	r3, #5
    958c:	d111      	bne.n	95b2 <hif_isr+0x34a>
				{
				    if(gstrHifCxt.pfSslCb)
    958e:	4b16      	ldr	r3, [pc, #88]	; (95e8 <hif_isr+0x380>)
    9590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9592:	2b00      	cmp	r3, #0
    9594:	d050      	beq.n	9638 <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9596:	4b14      	ldr	r3, [pc, #80]	; (95e8 <hif_isr+0x380>)
    9598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    959a:	1d3a      	adds	r2, r7, #4
    959c:	7852      	ldrb	r2, [r2, #1]
    959e:	b2d0      	uxtb	r0, r2
    95a0:	1d3a      	adds	r2, r7, #4
    95a2:	8852      	ldrh	r2, [r2, #2]
    95a4:	b292      	uxth	r2, r2
    95a6:	3a08      	subs	r2, #8
    95a8:	b291      	uxth	r1, r2
    95aa:	683a      	ldr	r2, [r7, #0]
    95ac:	3208      	adds	r2, #8
    95ae:	4798      	blx	r3
    95b0:	e042      	b.n	9638 <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    95b2:	4a1f      	ldr	r2, [pc, #124]	; (9630 <hif_isr+0x3c8>)
    95b4:	490e      	ldr	r1, [pc, #56]	; (95f0 <hif_isr+0x388>)
    95b6:	4b0f      	ldr	r3, [pc, #60]	; (95f4 <hif_isr+0x38c>)
    95b8:	0018      	movs	r0, r3
    95ba:	4b0f      	ldr	r3, [pc, #60]	; (95f8 <hif_isr+0x390>)
    95bc:	4798      	blx	r3
    95be:	4b1d      	ldr	r3, [pc, #116]	; (9634 <hif_isr+0x3cc>)
    95c0:	0018      	movs	r0, r3
    95c2:	4b0f      	ldr	r3, [pc, #60]	; (9600 <hif_isr+0x398>)
    95c4:	4798      	blx	r3
    95c6:	200d      	movs	r0, #13
    95c8:	4b0e      	ldr	r3, [pc, #56]	; (9604 <hif_isr+0x39c>)
    95ca:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    95cc:	230f      	movs	r3, #15
    95ce:	18fb      	adds	r3, r7, r3
    95d0:	22fa      	movs	r2, #250	; 0xfa
    95d2:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    95d4:	e088      	b.n	96e8 <hif_isr+0x480>
    95d6:	46c0      	nop			; (mov r8, r8)
    95d8:	00001070 	.word	0x00001070
    95dc:	0000acd5 	.word	0x0000acd5
    95e0:	000083d5 	.word	0x000083d5
    95e4:	0000acf9 	.word	0x0000acf9
    95e8:	20000320 	.word	0x20000320
    95ec:	00001084 	.word	0x00001084
    95f0:	00019ec4 	.word	0x00019ec4
    95f4:	00019bc0 	.word	0x00019bc0
    95f8:	00018619 	.word	0x00018619
    95fc:	00019bf0 	.word	0x00019bf0
    9600:	00018739 	.word	0x00018739
    9604:	0001864d 	.word	0x0001864d
    9608:	0000ad49 	.word	0x0000ad49
    960c:	00019c14 	.word	0x00019c14
    9610:	00019c2c 	.word	0x00019c2c
    9614:	00019c6c 	.word	0x00019c6c
    9618:	00019c8c 	.word	0x00019c8c
    961c:	00019cb0 	.word	0x00019cb0
    9620:	000001ff 	.word	0x000001ff
    9624:	00019cd0 	.word	0x00019cd0
    9628:	00000206 	.word	0x00000206
    962c:	00019cf4 	.word	0x00019cf4
    9630:	0000020f 	.word	0x0000020f
    9634:	00019d18 	.word	0x00019d18
				}
				if(gstrHifCxt.u8HifRXDone)
    9638:	4b2f      	ldr	r3, [pc, #188]	; (96f8 <hif_isr+0x490>)
    963a:	789b      	ldrb	r3, [r3, #2]
    963c:	b2db      	uxtb	r3, r3
    963e:	2b00      	cmp	r3, #0
    9640:	d052      	beq.n	96e8 <hif_isr+0x480>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    9642:	4a2e      	ldr	r2, [pc, #184]	; (96fc <hif_isr+0x494>)
    9644:	492e      	ldr	r1, [pc, #184]	; (9700 <hif_isr+0x498>)
    9646:	4b2f      	ldr	r3, [pc, #188]	; (9704 <hif_isr+0x49c>)
    9648:	0018      	movs	r0, r3
    964a:	4b2f      	ldr	r3, [pc, #188]	; (9708 <hif_isr+0x4a0>)
    964c:	4798      	blx	r3
    964e:	1d3b      	adds	r3, r7, #4
    9650:	781b      	ldrb	r3, [r3, #0]
    9652:	b2db      	uxtb	r3, r3
    9654:	0019      	movs	r1, r3
    9656:	1d3b      	adds	r3, r7, #4
    9658:	785b      	ldrb	r3, [r3, #1]
    965a:	b2db      	uxtb	r3, r3
    965c:	001a      	movs	r2, r3
    965e:	4b2b      	ldr	r3, [pc, #172]	; (970c <hif_isr+0x4a4>)
    9660:	0018      	movs	r0, r3
    9662:	4b29      	ldr	r3, [pc, #164]	; (9708 <hif_isr+0x4a0>)
    9664:	4798      	blx	r3
    9666:	200d      	movs	r0, #13
    9668:	4b29      	ldr	r3, [pc, #164]	; (9710 <hif_isr+0x4a8>)
    966a:	4798      	blx	r3
					ret = hif_set_rx_done();
    966c:	230f      	movs	r3, #15
    966e:	18fc      	adds	r4, r7, r3
    9670:	4b28      	ldr	r3, [pc, #160]	; (9714 <hif_isr+0x4ac>)
    9672:	4798      	blx	r3
    9674:	0003      	movs	r3, r0
    9676:	7023      	strb	r3, [r4, #0]
    9678:	e036      	b.n	96e8 <hif_isr+0x480>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    967a:	2387      	movs	r3, #135	; 0x87
    967c:	009a      	lsls	r2, r3, #2
    967e:	4920      	ldr	r1, [pc, #128]	; (9700 <hif_isr+0x498>)
    9680:	4b20      	ldr	r3, [pc, #128]	; (9704 <hif_isr+0x49c>)
    9682:	0018      	movs	r0, r3
    9684:	4b20      	ldr	r3, [pc, #128]	; (9708 <hif_isr+0x4a0>)
    9686:	4798      	blx	r3
    9688:	4b23      	ldr	r3, [pc, #140]	; (9718 <hif_isr+0x4b0>)
    968a:	0018      	movs	r0, r3
    968c:	4b23      	ldr	r3, [pc, #140]	; (971c <hif_isr+0x4b4>)
    968e:	4798      	blx	r3
    9690:	200d      	movs	r0, #13
    9692:	4b1f      	ldr	r3, [pc, #124]	; (9710 <hif_isr+0x4a8>)
    9694:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    9696:	230f      	movs	r3, #15
    9698:	18fb      	adds	r3, r7, r3
    969a:	22fe      	movs	r2, #254	; 0xfe
    969c:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    969e:	e023      	b.n	96e8 <hif_isr+0x480>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    96a0:	2389      	movs	r3, #137	; 0x89
    96a2:	009a      	lsls	r2, r3, #2
    96a4:	4916      	ldr	r1, [pc, #88]	; (9700 <hif_isr+0x498>)
    96a6:	4b17      	ldr	r3, [pc, #92]	; (9704 <hif_isr+0x49c>)
    96a8:	0018      	movs	r0, r3
    96aa:	4b17      	ldr	r3, [pc, #92]	; (9708 <hif_isr+0x4a0>)
    96ac:	4798      	blx	r3
    96ae:	68ba      	ldr	r2, [r7, #8]
    96b0:	4b1b      	ldr	r3, [pc, #108]	; (9720 <hif_isr+0x4b8>)
    96b2:	0011      	movs	r1, r2
    96b4:	0018      	movs	r0, r3
    96b6:	4b14      	ldr	r3, [pc, #80]	; (9708 <hif_isr+0x4a0>)
    96b8:	4798      	blx	r3
    96ba:	200d      	movs	r0, #13
    96bc:	4b14      	ldr	r3, [pc, #80]	; (9710 <hif_isr+0x4a8>)
    96be:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    96c0:	230f      	movs	r3, #15
    96c2:	18fb      	adds	r3, r7, r3
    96c4:	22f4      	movs	r2, #244	; 0xf4
    96c6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    96c8:	e00e      	b.n	96e8 <hif_isr+0x480>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    96ca:	4a16      	ldr	r2, [pc, #88]	; (9724 <hif_isr+0x4bc>)
    96cc:	490c      	ldr	r1, [pc, #48]	; (9700 <hif_isr+0x498>)
    96ce:	4b0d      	ldr	r3, [pc, #52]	; (9704 <hif_isr+0x49c>)
    96d0:	0018      	movs	r0, r3
    96d2:	4b0d      	ldr	r3, [pc, #52]	; (9708 <hif_isr+0x4a0>)
    96d4:	4798      	blx	r3
    96d6:	4b14      	ldr	r3, [pc, #80]	; (9728 <hif_isr+0x4c0>)
    96d8:	0018      	movs	r0, r3
    96da:	4b10      	ldr	r3, [pc, #64]	; (971c <hif_isr+0x4b4>)
    96dc:	4798      	blx	r3
    96de:	200d      	movs	r0, #13
    96e0:	4b0b      	ldr	r3, [pc, #44]	; (9710 <hif_isr+0x4a8>)
    96e2:	4798      	blx	r3
		goto ERR1;
    96e4:	e000      	b.n	96e8 <hif_isr+0x480>

			nm_bsp_interrupt_ctrl(0);
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    96e6:	46c0      	nop			; (mov r8, r8)
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
	}

ERR1:
	return ret;
    96e8:	230f      	movs	r3, #15
    96ea:	18fb      	adds	r3, r7, r3
    96ec:	781b      	ldrb	r3, [r3, #0]
    96ee:	b25b      	sxtb	r3, r3
}
    96f0:	0018      	movs	r0, r3
    96f2:	46bd      	mov	sp, r7
    96f4:	b005      	add	sp, #20
    96f6:	bd90      	pop	{r4, r7, pc}
    96f8:	20000320 	.word	0x20000320
    96fc:	00000215 	.word	0x00000215
    9700:	00019ec4 	.word	0x00019ec4
    9704:	00019bc0 	.word	0x00019bc0
    9708:	00018619 	.word	0x00018619
    970c:	00019d30 	.word	0x00019d30
    9710:	0001864d 	.word	0x0001864d
    9714:	00008cbd 	.word	0x00008cbd
    9718:	00019d5c 	.word	0x00019d5c
    971c:	00018739 	.word	0x00018739
    9720:	00019d70 	.word	0x00019d70
    9724:	0000022d 	.word	0x0000022d
    9728:	00019d8c 	.word	0x00019d8c

0000972c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    972c:	b590      	push	{r4, r7, lr}
    972e:	b083      	sub	sp, #12
    9730:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    9732:	1dfb      	adds	r3, r7, #7
    9734:	2200      	movs	r2, #0
    9736:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    9738:	e023      	b.n	9782 <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    973a:	4b18      	ldr	r3, [pc, #96]	; (979c <hif_handle_isr+0x70>)
    973c:	78db      	ldrb	r3, [r3, #3]
    973e:	b2db      	uxtb	r3, r3
    9740:	3b01      	subs	r3, #1
    9742:	b2da      	uxtb	r2, r3
    9744:	4b15      	ldr	r3, [pc, #84]	; (979c <hif_handle_isr+0x70>)
    9746:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    9748:	1dfc      	adds	r4, r7, #7
    974a:	4b15      	ldr	r3, [pc, #84]	; (97a0 <hif_handle_isr+0x74>)
    974c:	4798      	blx	r3
    974e:	0003      	movs	r3, r0
    9750:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    9752:	1dfb      	adds	r3, r7, #7
    9754:	781b      	ldrb	r3, [r3, #0]
    9756:	b25b      	sxtb	r3, r3
    9758:	2b00      	cmp	r3, #0
    975a:	d100      	bne.n	975e <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    975c:	e011      	b.n	9782 <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    975e:	4a11      	ldr	r2, [pc, #68]	; (97a4 <hif_handle_isr+0x78>)
    9760:	4911      	ldr	r1, [pc, #68]	; (97a8 <hif_handle_isr+0x7c>)
    9762:	4b12      	ldr	r3, [pc, #72]	; (97ac <hif_handle_isr+0x80>)
    9764:	0018      	movs	r0, r3
    9766:	4b12      	ldr	r3, [pc, #72]	; (97b0 <hif_handle_isr+0x84>)
    9768:	4798      	blx	r3
    976a:	1dfb      	adds	r3, r7, #7
    976c:	2200      	movs	r2, #0
    976e:	569a      	ldrsb	r2, [r3, r2]
    9770:	4b10      	ldr	r3, [pc, #64]	; (97b4 <hif_handle_isr+0x88>)
    9772:	0011      	movs	r1, r2
    9774:	0018      	movs	r0, r3
    9776:	4b0e      	ldr	r3, [pc, #56]	; (97b0 <hif_handle_isr+0x84>)
    9778:	4798      	blx	r3
    977a:	200d      	movs	r0, #13
    977c:	4b0e      	ldr	r3, [pc, #56]	; (97b8 <hif_handle_isr+0x8c>)
    977e:	4798      	blx	r3
			}
		}
    9780:	e7e2      	b.n	9748 <hif_handle_isr+0x1c>
*/

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    9782:	4b06      	ldr	r3, [pc, #24]	; (979c <hif_handle_isr+0x70>)
    9784:	78db      	ldrb	r3, [r3, #3]
    9786:	b2db      	uxtb	r3, r3
    9788:	2b00      	cmp	r3, #0
    978a:	d1d6      	bne.n	973a <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    978c:	1dfb      	adds	r3, r7, #7
    978e:	781b      	ldrb	r3, [r3, #0]
    9790:	b25b      	sxtb	r3, r3
}
    9792:	0018      	movs	r0, r3
    9794:	46bd      	mov	sp, r7
    9796:	b003      	add	sp, #12
    9798:	bd90      	pop	{r4, r7, pc}
    979a:	46c0      	nop			; (mov r8, r8)
    979c:	20000320 	.word	0x20000320
    97a0:	00009269 	.word	0x00009269
    97a4:	0000024a 	.word	0x0000024a
    97a8:	00019ecc 	.word	0x00019ecc
    97ac:	00019bc0 	.word	0x00019bc0
    97b0:	00018619 	.word	0x00018619
    97b4:	00019db0 	.word	0x00019db0
    97b8:	0001864d 	.word	0x0001864d

000097bc <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    97bc:	b590      	push	{r4, r7, lr}
    97be:	b087      	sub	sp, #28
    97c0:	af00      	add	r7, sp, #0
    97c2:	60f8      	str	r0, [r7, #12]
    97c4:	60b9      	str	r1, [r7, #8]
    97c6:	0019      	movs	r1, r3
    97c8:	1dbb      	adds	r3, r7, #6
    97ca:	801a      	strh	r2, [r3, #0]
    97cc:	1d7b      	adds	r3, r7, #5
    97ce:	1c0a      	adds	r2, r1, #0
    97d0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    97d2:	2317      	movs	r3, #23
    97d4:	18fb      	adds	r3, r7, r3
    97d6:	2200      	movs	r2, #0
    97d8:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    97da:	68fb      	ldr	r3, [r7, #12]
    97dc:	2b00      	cmp	r3, #0
    97de:	d006      	beq.n	97ee <hif_receive+0x32>
    97e0:	68bb      	ldr	r3, [r7, #8]
    97e2:	2b00      	cmp	r3, #0
    97e4:	d003      	beq.n	97ee <hif_receive+0x32>
    97e6:	1dbb      	adds	r3, r7, #6
    97e8:	881b      	ldrh	r3, [r3, #0]
    97ea:	2b00      	cmp	r3, #0
    97ec:	d11c      	bne.n	9828 <hif_receive+0x6c>
	{
		if(isDone)
    97ee:	1d7b      	adds	r3, r7, #5
    97f0:	781b      	ldrb	r3, [r3, #0]
    97f2:	2b00      	cmp	r3, #0
    97f4:	d006      	beq.n	9804 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    97f6:	2317      	movs	r3, #23
    97f8:	18fc      	adds	r4, r7, r3
    97fa:	4b42      	ldr	r3, [pc, #264]	; (9904 <hif_receive+0x148>)
    97fc:	4798      	blx	r3
    97fe:	0003      	movs	r3, r0
    9800:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    9802:	e077      	b.n	98f4 <hif_receive+0x138>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    9804:	2317      	movs	r3, #23
    9806:	18fb      	adds	r3, r7, r3
    9808:	22f4      	movs	r2, #244	; 0xf4
    980a:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    980c:	4a3e      	ldr	r2, [pc, #248]	; (9908 <hif_receive+0x14c>)
    980e:	493f      	ldr	r1, [pc, #252]	; (990c <hif_receive+0x150>)
    9810:	4b3f      	ldr	r3, [pc, #252]	; (9910 <hif_receive+0x154>)
    9812:	0018      	movs	r0, r3
    9814:	4b3f      	ldr	r3, [pc, #252]	; (9914 <hif_receive+0x158>)
    9816:	4798      	blx	r3
    9818:	4b3f      	ldr	r3, [pc, #252]	; (9918 <hif_receive+0x15c>)
    981a:	0018      	movs	r0, r3
    981c:	4b3f      	ldr	r3, [pc, #252]	; (991c <hif_receive+0x160>)
    981e:	4798      	blx	r3
    9820:	200d      	movs	r0, #13
    9822:	4b3f      	ldr	r3, [pc, #252]	; (9920 <hif_receive+0x164>)
    9824:	4798      	blx	r3
		}
		goto ERR1;
    9826:	e065      	b.n	98f4 <hif_receive+0x138>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    9828:	1dbb      	adds	r3, r7, #6
    982a:	881a      	ldrh	r2, [r3, #0]
    982c:	4b3d      	ldr	r3, [pc, #244]	; (9924 <hif_receive+0x168>)
    982e:	689b      	ldr	r3, [r3, #8]
    9830:	429a      	cmp	r2, r3
    9832:	d915      	bls.n	9860 <hif_receive+0xa4>
	{
		ret = M2M_ERR_FAIL;
    9834:	2317      	movs	r3, #23
    9836:	18fb      	adds	r3, r7, r3
    9838:	22f4      	movs	r2, #244	; 0xf4
    983a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    983c:	4a3a      	ldr	r2, [pc, #232]	; (9928 <hif_receive+0x16c>)
    983e:	4933      	ldr	r1, [pc, #204]	; (990c <hif_receive+0x150>)
    9840:	4b33      	ldr	r3, [pc, #204]	; (9910 <hif_receive+0x154>)
    9842:	0018      	movs	r0, r3
    9844:	4b33      	ldr	r3, [pc, #204]	; (9914 <hif_receive+0x158>)
    9846:	4798      	blx	r3
    9848:	1dbb      	adds	r3, r7, #6
    984a:	8819      	ldrh	r1, [r3, #0]
    984c:	4b35      	ldr	r3, [pc, #212]	; (9924 <hif_receive+0x168>)
    984e:	689a      	ldr	r2, [r3, #8]
    9850:	4b36      	ldr	r3, [pc, #216]	; (992c <hif_receive+0x170>)
    9852:	0018      	movs	r0, r3
    9854:	4b2f      	ldr	r3, [pc, #188]	; (9914 <hif_receive+0x158>)
    9856:	4798      	blx	r3
    9858:	200d      	movs	r0, #13
    985a:	4b31      	ldr	r3, [pc, #196]	; (9920 <hif_receive+0x164>)
    985c:	4798      	blx	r3
		goto ERR1;
    985e:	e049      	b.n	98f4 <hif_receive+0x138>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    9860:	4b30      	ldr	r3, [pc, #192]	; (9924 <hif_receive+0x168>)
    9862:	685a      	ldr	r2, [r3, #4]
    9864:	68fb      	ldr	r3, [r7, #12]
    9866:	429a      	cmp	r2, r3
    9868:	d80a      	bhi.n	9880 <hif_receive+0xc4>
    986a:	1dbb      	adds	r3, r7, #6
    986c:	881a      	ldrh	r2, [r3, #0]
    986e:	68fb      	ldr	r3, [r7, #12]
    9870:	18d2      	adds	r2, r2, r3
    9872:	4b2c      	ldr	r3, [pc, #176]	; (9924 <hif_receive+0x168>)
    9874:	6859      	ldr	r1, [r3, #4]
    9876:	4b2b      	ldr	r3, [pc, #172]	; (9924 <hif_receive+0x168>)
    9878:	689b      	ldr	r3, [r3, #8]
    987a:	18cb      	adds	r3, r1, r3
    987c:	429a      	cmp	r2, r3
    987e:	d911      	bls.n	98a4 <hif_receive+0xe8>
	{
		ret = M2M_ERR_FAIL;
    9880:	2317      	movs	r3, #23
    9882:	18fb      	adds	r3, r7, r3
    9884:	22f4      	movs	r2, #244	; 0xf4
    9886:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    9888:	4a29      	ldr	r2, [pc, #164]	; (9930 <hif_receive+0x174>)
    988a:	4920      	ldr	r1, [pc, #128]	; (990c <hif_receive+0x150>)
    988c:	4b20      	ldr	r3, [pc, #128]	; (9910 <hif_receive+0x154>)
    988e:	0018      	movs	r0, r3
    9890:	4b20      	ldr	r3, [pc, #128]	; (9914 <hif_receive+0x158>)
    9892:	4798      	blx	r3
    9894:	4b27      	ldr	r3, [pc, #156]	; (9934 <hif_receive+0x178>)
    9896:	0018      	movs	r0, r3
    9898:	4b20      	ldr	r3, [pc, #128]	; (991c <hif_receive+0x160>)
    989a:	4798      	blx	r3
    989c:	200d      	movs	r0, #13
    989e:	4b20      	ldr	r3, [pc, #128]	; (9920 <hif_receive+0x164>)
    98a0:	4798      	blx	r3
		goto ERR1;
    98a2:	e027      	b.n	98f4 <hif_receive+0x138>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    98a4:	1dbb      	adds	r3, r7, #6
    98a6:	881a      	ldrh	r2, [r3, #0]
    98a8:	2317      	movs	r3, #23
    98aa:	18fc      	adds	r4, r7, r3
    98ac:	68b9      	ldr	r1, [r7, #8]
    98ae:	68fb      	ldr	r3, [r7, #12]
    98b0:	0018      	movs	r0, r3
    98b2:	4b21      	ldr	r3, [pc, #132]	; (9938 <hif_receive+0x17c>)
    98b4:	4798      	blx	r3
    98b6:	0003      	movs	r3, r0
    98b8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    98ba:	2317      	movs	r3, #23
    98bc:	18fb      	adds	r3, r7, r3
    98be:	781b      	ldrb	r3, [r3, #0]
    98c0:	b25b      	sxtb	r3, r3
    98c2:	2b00      	cmp	r3, #0
    98c4:	d115      	bne.n	98f2 <hif_receive+0x136>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    98c6:	4b17      	ldr	r3, [pc, #92]	; (9924 <hif_receive+0x168>)
    98c8:	685a      	ldr	r2, [r3, #4]
    98ca:	4b16      	ldr	r3, [pc, #88]	; (9924 <hif_receive+0x168>)
    98cc:	689b      	ldr	r3, [r3, #8]
    98ce:	18d2      	adds	r2, r2, r3
    98d0:	1dbb      	adds	r3, r7, #6
    98d2:	8819      	ldrh	r1, [r3, #0]
    98d4:	68fb      	ldr	r3, [r7, #12]
    98d6:	18cb      	adds	r3, r1, r3
    98d8:	429a      	cmp	r2, r3
    98da:	d003      	beq.n	98e4 <hif_receive+0x128>
    98dc:	1d7b      	adds	r3, r7, #5
    98de:	781b      	ldrb	r3, [r3, #0]
    98e0:	2b00      	cmp	r3, #0
    98e2:	d007      	beq.n	98f4 <hif_receive+0x138>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    98e4:	2317      	movs	r3, #23
    98e6:	18fc      	adds	r4, r7, r3
    98e8:	4b06      	ldr	r3, [pc, #24]	; (9904 <hif_receive+0x148>)
    98ea:	4798      	blx	r3
    98ec:	0003      	movs	r3, r0
    98ee:	7023      	strb	r3, [r4, #0]
    98f0:	e000      	b.n	98f4 <hif_receive+0x138>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
    98f2:	46c0      	nop			; (mov r8, r8)
		/* set RX done */
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
    98f4:	2317      	movs	r3, #23
    98f6:	18fb      	adds	r3, r7, r3
    98f8:	781b      	ldrb	r3, [r3, #0]
    98fa:	b25b      	sxtb	r3, r3
}
    98fc:	0018      	movs	r0, r3
    98fe:	46bd      	mov	sp, r7
    9900:	b007      	add	sp, #28
    9902:	bd90      	pop	{r4, r7, pc}
    9904:	00008cbd 	.word	0x00008cbd
    9908:	0000026b 	.word	0x0000026b
    990c:	00019edc 	.word	0x00019edc
    9910:	00019bc0 	.word	0x00019bc0
    9914:	00018619 	.word	0x00018619
    9918:	00019de0 	.word	0x00019de0
    991c:	00018739 	.word	0x00018739
    9920:	0001864d 	.word	0x0001864d
    9924:	20000320 	.word	0x20000320
    9928:	00000273 	.word	0x00000273
    992c:	00019e00 	.word	0x00019e00
    9930:	00000279 	.word	0x00000279
    9934:	00019e48 	.word	0x00019e48
    9938:	0000ad49 	.word	0x0000ad49

0000993c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    993c:	b580      	push	{r7, lr}
    993e:	b084      	sub	sp, #16
    9940:	af00      	add	r7, sp, #0
    9942:	0002      	movs	r2, r0
    9944:	6039      	str	r1, [r7, #0]
    9946:	1dfb      	adds	r3, r7, #7
    9948:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    994a:	230f      	movs	r3, #15
    994c:	18fb      	adds	r3, r7, r3
    994e:	2200      	movs	r2, #0
    9950:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    9952:	1dfb      	adds	r3, r7, #7
    9954:	781b      	ldrb	r3, [r3, #0]
    9956:	2b07      	cmp	r3, #7
    9958:	d820      	bhi.n	999c <hif_register_cb+0x60>
    995a:	009a      	lsls	r2, r3, #2
    995c:	4b1e      	ldr	r3, [pc, #120]	; (99d8 <hif_register_cb+0x9c>)
    995e:	18d3      	adds	r3, r2, r3
    9960:	681b      	ldr	r3, [r3, #0]
    9962:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    9964:	4b1d      	ldr	r3, [pc, #116]	; (99dc <hif_register_cb+0xa0>)
    9966:	683a      	ldr	r2, [r7, #0]
    9968:	611a      	str	r2, [r3, #16]
			break;
    996a:	e02c      	b.n	99c6 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    996c:	4b1b      	ldr	r3, [pc, #108]	; (99dc <hif_register_cb+0xa0>)
    996e:	683a      	ldr	r2, [r7, #0]
    9970:	60da      	str	r2, [r3, #12]
			break;
    9972:	e028      	b.n	99c6 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    9974:	4b19      	ldr	r3, [pc, #100]	; (99dc <hif_register_cb+0xa0>)
    9976:	683a      	ldr	r2, [r7, #0]
    9978:	615a      	str	r2, [r3, #20]
			break;
    997a:	e024      	b.n	99c6 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    997c:	4b17      	ldr	r3, [pc, #92]	; (99dc <hif_register_cb+0xa0>)
    997e:	683a      	ldr	r2, [r7, #0]
    9980:	61da      	str	r2, [r3, #28]
			break;
    9982:	e020      	b.n	99c6 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    9984:	4b15      	ldr	r3, [pc, #84]	; (99dc <hif_register_cb+0xa0>)
    9986:	683a      	ldr	r2, [r7, #0]
    9988:	621a      	str	r2, [r3, #32]
			break;
    998a:	e01c      	b.n	99c6 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    998c:	4b13      	ldr	r3, [pc, #76]	; (99dc <hif_register_cb+0xa0>)
    998e:	683a      	ldr	r2, [r7, #0]
    9990:	619a      	str	r2, [r3, #24]
			break;
    9992:	e018      	b.n	99c6 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    9994:	4b11      	ldr	r3, [pc, #68]	; (99dc <hif_register_cb+0xa0>)
    9996:	683a      	ldr	r2, [r7, #0]
    9998:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    999a:	e014      	b.n	99c6 <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    999c:	4a10      	ldr	r2, [pc, #64]	; (99e0 <hif_register_cb+0xa4>)
    999e:	4911      	ldr	r1, [pc, #68]	; (99e4 <hif_register_cb+0xa8>)
    99a0:	4b11      	ldr	r3, [pc, #68]	; (99e8 <hif_register_cb+0xac>)
    99a2:	0018      	movs	r0, r3
    99a4:	4b11      	ldr	r3, [pc, #68]	; (99ec <hif_register_cb+0xb0>)
    99a6:	4798      	blx	r3
    99a8:	1dfb      	adds	r3, r7, #7
    99aa:	781a      	ldrb	r2, [r3, #0]
    99ac:	4b10      	ldr	r3, [pc, #64]	; (99f0 <hif_register_cb+0xb4>)
    99ae:	0011      	movs	r1, r2
    99b0:	0018      	movs	r0, r3
    99b2:	4b0e      	ldr	r3, [pc, #56]	; (99ec <hif_register_cb+0xb0>)
    99b4:	4798      	blx	r3
    99b6:	200d      	movs	r0, #13
    99b8:	4b0e      	ldr	r3, [pc, #56]	; (99f4 <hif_register_cb+0xb8>)
    99ba:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    99bc:	230f      	movs	r3, #15
    99be:	18fb      	adds	r3, r7, r3
    99c0:	22f4      	movs	r2, #244	; 0xf4
    99c2:	701a      	strb	r2, [r3, #0]
			break;
    99c4:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    99c6:	230f      	movs	r3, #15
    99c8:	18fb      	adds	r3, r7, r3
    99ca:	781b      	ldrb	r3, [r3, #0]
    99cc:	b25b      	sxtb	r3, r3
}
    99ce:	0018      	movs	r0, r3
    99d0:	46bd      	mov	sp, r7
    99d2:	b004      	add	sp, #16
    99d4:	bd80      	pop	{r7, pc}
    99d6:	46c0      	nop			; (mov r8, r8)
    99d8:	00019e98 	.word	0x00019e98
    99dc:	20000320 	.word	0x20000320
    99e0:	000002b1 	.word	0x000002b1
    99e4:	00019ee8 	.word	0x00019ee8
    99e8:	00019bc0 	.word	0x00019bc0
    99ec:	00018619 	.word	0x00018619
    99f0:	00019e8c 	.word	0x00019e8c
    99f4:	0001864d 	.word	0x0001864d

000099f8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    99f8:	b590      	push	{r4, r7, lr}
    99fa:	b0ad      	sub	sp, #180	; 0xb4
    99fc:	af02      	add	r7, sp, #8
    99fe:	603a      	str	r2, [r7, #0]
    9a00:	1dfb      	adds	r3, r7, #7
    9a02:	1c02      	adds	r2, r0, #0
    9a04:	701a      	strb	r2, [r3, #0]
    9a06:	1d3b      	adds	r3, r7, #4
    9a08:	1c0a      	adds	r2, r1, #0
    9a0a:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    9a0c:	1dfb      	adds	r3, r7, #7
    9a0e:	781b      	ldrb	r3, [r3, #0]
    9a10:	2b2c      	cmp	r3, #44	; 0x2c
    9a12:	d116      	bne.n	9a42 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    9a14:	239c      	movs	r3, #156	; 0x9c
    9a16:	18f9      	adds	r1, r7, r3
    9a18:	6838      	ldr	r0, [r7, #0]
    9a1a:	2300      	movs	r3, #0
    9a1c:	2204      	movs	r2, #4
    9a1e:	4cc8      	ldr	r4, [pc, #800]	; (9d40 <m2m_wifi_cb+0x348>)
    9a20:	47a0      	blx	r4
    9a22:	1e03      	subs	r3, r0, #0
    9a24:	d000      	beq.n	9a28 <m2m_wifi_cb+0x30>
    9a26:	e1ae      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    9a28:	4bc6      	ldr	r3, [pc, #792]	; (9d44 <m2m_wifi_cb+0x34c>)
    9a2a:	681b      	ldr	r3, [r3, #0]
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	d100      	bne.n	9a32 <m2m_wifi_cb+0x3a>
    9a30:	e1a9      	b.n	9d86 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    9a32:	4bc4      	ldr	r3, [pc, #784]	; (9d44 <m2m_wifi_cb+0x34c>)
    9a34:	681b      	ldr	r3, [r3, #0]
    9a36:	229c      	movs	r2, #156	; 0x9c
    9a38:	18ba      	adds	r2, r7, r2
    9a3a:	0011      	movs	r1, r2
    9a3c:	202c      	movs	r0, #44	; 0x2c
    9a3e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9a40:	e1a1      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    9a42:	1dfb      	adds	r3, r7, #7
    9a44:	781b      	ldrb	r3, [r3, #0]
    9a46:	2b1b      	cmp	r3, #27
    9a48:	d116      	bne.n	9a78 <m2m_wifi_cb+0x80>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    9a4a:	2394      	movs	r3, #148	; 0x94
    9a4c:	18f9      	adds	r1, r7, r3
    9a4e:	6838      	ldr	r0, [r7, #0]
    9a50:	2300      	movs	r3, #0
    9a52:	2208      	movs	r2, #8
    9a54:	4cba      	ldr	r4, [pc, #744]	; (9d40 <m2m_wifi_cb+0x348>)
    9a56:	47a0      	blx	r4
    9a58:	1e03      	subs	r3, r0, #0
    9a5a:	d000      	beq.n	9a5e <m2m_wifi_cb+0x66>
    9a5c:	e193      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    9a5e:	4bb9      	ldr	r3, [pc, #740]	; (9d44 <m2m_wifi_cb+0x34c>)
    9a60:	681b      	ldr	r3, [r3, #0]
    9a62:	2b00      	cmp	r3, #0
    9a64:	d100      	bne.n	9a68 <m2m_wifi_cb+0x70>
    9a66:	e18e      	b.n	9d86 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    9a68:	4bb6      	ldr	r3, [pc, #728]	; (9d44 <m2m_wifi_cb+0x34c>)
    9a6a:	681b      	ldr	r3, [r3, #0]
    9a6c:	2294      	movs	r2, #148	; 0x94
    9a6e:	18ba      	adds	r2, r7, r2
    9a70:	0011      	movs	r1, r2
    9a72:	201b      	movs	r0, #27
    9a74:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9a76:	e186      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    9a78:	1dfb      	adds	r3, r7, #7
    9a7a:	781b      	ldrb	r3, [r3, #0]
    9a7c:	2b06      	cmp	r3, #6
    9a7e:	d116      	bne.n	9aae <m2m_wifi_cb+0xb6>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    9a80:	2308      	movs	r3, #8
    9a82:	18f9      	adds	r1, r7, r3
    9a84:	6838      	ldr	r0, [r7, #0]
    9a86:	2301      	movs	r3, #1
    9a88:	2230      	movs	r2, #48	; 0x30
    9a8a:	4cad      	ldr	r4, [pc, #692]	; (9d40 <m2m_wifi_cb+0x348>)
    9a8c:	47a0      	blx	r4
    9a8e:	1e03      	subs	r3, r0, #0
    9a90:	d000      	beq.n	9a94 <m2m_wifi_cb+0x9c>
    9a92:	e178      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
    9a94:	4bab      	ldr	r3, [pc, #684]	; (9d44 <m2m_wifi_cb+0x34c>)
    9a96:	681b      	ldr	r3, [r3, #0]
    9a98:	2b00      	cmp	r3, #0
    9a9a:	d100      	bne.n	9a9e <m2m_wifi_cb+0xa6>
    9a9c:	e173      	b.n	9d86 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    9a9e:	4ba9      	ldr	r3, [pc, #676]	; (9d44 <m2m_wifi_cb+0x34c>)
    9aa0:	681b      	ldr	r3, [r3, #0]
    9aa2:	2208      	movs	r2, #8
    9aa4:	18ba      	adds	r2, r7, r2
    9aa6:	0011      	movs	r1, r2
    9aa8:	2006      	movs	r0, #6
    9aaa:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9aac:	e16b      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    9aae:	1dfb      	adds	r3, r7, #7
    9ab0:	781b      	ldrb	r3, [r3, #0]
    9ab2:	2b0e      	cmp	r3, #14
    9ab4:	d100      	bne.n	9ab8 <m2m_wifi_cb+0xc0>
    9ab6:	e166      	b.n	9d86 <m2m_wifi_cb+0x38e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    9ab8:	1dfb      	adds	r3, r7, #7
    9aba:	781b      	ldrb	r3, [r3, #0]
    9abc:	2b32      	cmp	r3, #50	; 0x32
    9abe:	d116      	bne.n	9aee <m2m_wifi_cb+0xf6>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    9ac0:	2380      	movs	r3, #128	; 0x80
    9ac2:	18f9      	adds	r1, r7, r3
    9ac4:	6838      	ldr	r0, [r7, #0]
    9ac6:	2300      	movs	r3, #0
    9ac8:	2214      	movs	r2, #20
    9aca:	4c9d      	ldr	r4, [pc, #628]	; (9d40 <m2m_wifi_cb+0x348>)
    9acc:	47a0      	blx	r4
    9ace:	1e03      	subs	r3, r0, #0
    9ad0:	d000      	beq.n	9ad4 <m2m_wifi_cb+0xdc>
    9ad2:	e158      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    9ad4:	4b9b      	ldr	r3, [pc, #620]	; (9d44 <m2m_wifi_cb+0x34c>)
    9ad6:	681b      	ldr	r3, [r3, #0]
    9ad8:	2b00      	cmp	r3, #0
    9ada:	d100      	bne.n	9ade <m2m_wifi_cb+0xe6>
    9adc:	e153      	b.n	9d86 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    9ade:	4b99      	ldr	r3, [pc, #612]	; (9d44 <m2m_wifi_cb+0x34c>)
    9ae0:	681b      	ldr	r3, [r3, #0]
    9ae2:	2280      	movs	r2, #128	; 0x80
    9ae4:	18ba      	adds	r2, r7, r2
    9ae6:	0011      	movs	r1, r2
    9ae8:	2032      	movs	r0, #50	; 0x32
    9aea:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9aec:	e14b      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    9aee:	1dfb      	adds	r3, r7, #7
    9af0:	781b      	ldrb	r3, [r3, #0]
    9af2:	2b2f      	cmp	r3, #47	; 0x2f
    9af4:	d11d      	bne.n	9b32 <m2m_wifi_cb+0x13a>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    9af6:	2308      	movs	r3, #8
    9af8:	18fb      	adds	r3, r7, r3
    9afa:	2264      	movs	r2, #100	; 0x64
    9afc:	2100      	movs	r1, #0
    9afe:	0018      	movs	r0, r3
    9b00:	4b91      	ldr	r3, [pc, #580]	; (9d48 <m2m_wifi_cb+0x350>)
    9b02:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    9b04:	2308      	movs	r3, #8
    9b06:	18f9      	adds	r1, r7, r3
    9b08:	6838      	ldr	r0, [r7, #0]
    9b0a:	2300      	movs	r3, #0
    9b0c:	2264      	movs	r2, #100	; 0x64
    9b0e:	4c8c      	ldr	r4, [pc, #560]	; (9d40 <m2m_wifi_cb+0x348>)
    9b10:	47a0      	blx	r4
    9b12:	1e03      	subs	r3, r0, #0
    9b14:	d000      	beq.n	9b18 <m2m_wifi_cb+0x120>
    9b16:	e136      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    9b18:	4b8a      	ldr	r3, [pc, #552]	; (9d44 <m2m_wifi_cb+0x34c>)
    9b1a:	681b      	ldr	r3, [r3, #0]
    9b1c:	2b00      	cmp	r3, #0
    9b1e:	d100      	bne.n	9b22 <m2m_wifi_cb+0x12a>
    9b20:	e131      	b.n	9d86 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    9b22:	4b88      	ldr	r3, [pc, #544]	; (9d44 <m2m_wifi_cb+0x34c>)
    9b24:	681b      	ldr	r3, [r3, #0]
    9b26:	2208      	movs	r2, #8
    9b28:	18ba      	adds	r2, r7, r2
    9b2a:	0011      	movs	r1, r2
    9b2c:	202f      	movs	r0, #47	; 0x2f
    9b2e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9b30:	e129      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    9b32:	1dfb      	adds	r3, r7, #7
    9b34:	781b      	ldrb	r3, [r3, #0]
    9b36:	2b34      	cmp	r3, #52	; 0x34
    9b38:	d132      	bne.n	9ba0 <m2m_wifi_cb+0x1a8>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    9b3a:	237c      	movs	r3, #124	; 0x7c
    9b3c:	18f9      	adds	r1, r7, r3
    9b3e:	6838      	ldr	r0, [r7, #0]
    9b40:	2300      	movs	r3, #0
    9b42:	2204      	movs	r2, #4
    9b44:	4c7e      	ldr	r4, [pc, #504]	; (9d40 <m2m_wifi_cb+0x348>)
    9b46:	47a0      	blx	r4
    9b48:	1e03      	subs	r3, r0, #0
    9b4a:	d000      	beq.n	9b4e <m2m_wifi_cb+0x156>
    9b4c:	e11b      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    9b4e:	4b7f      	ldr	r3, [pc, #508]	; (9d4c <m2m_wifi_cb+0x354>)
    9b50:	0018      	movs	r0, r3
    9b52:	4b7f      	ldr	r3, [pc, #508]	; (9d50 <m2m_wifi_cb+0x358>)
    9b54:	4798      	blx	r3
    9b56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9b58:	001a      	movs	r2, r3
    9b5a:	23ff      	movs	r3, #255	; 0xff
    9b5c:	401a      	ands	r2, r3
    9b5e:	0011      	movs	r1, r2
    9b60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9b62:	0a1b      	lsrs	r3, r3, #8
    9b64:	001a      	movs	r2, r3
    9b66:	23ff      	movs	r3, #255	; 0xff
    9b68:	401a      	ands	r2, r3
    9b6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9b6c:	0c1b      	lsrs	r3, r3, #16
    9b6e:	0018      	movs	r0, r3
    9b70:	23ff      	movs	r3, #255	; 0xff
    9b72:	4018      	ands	r0, r3
    9b74:	0004      	movs	r4, r0
    9b76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9b78:	0e1b      	lsrs	r3, r3, #24
    9b7a:	4876      	ldr	r0, [pc, #472]	; (9d54 <m2m_wifi_cb+0x35c>)
    9b7c:	9300      	str	r3, [sp, #0]
    9b7e:	0023      	movs	r3, r4
    9b80:	4c73      	ldr	r4, [pc, #460]	; (9d50 <m2m_wifi_cb+0x358>)
    9b82:	47a0      	blx	r4
    9b84:	200d      	movs	r0, #13
    9b86:	4b74      	ldr	r3, [pc, #464]	; (9d58 <m2m_wifi_cb+0x360>)
    9b88:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
    9b8a:	4b6e      	ldr	r3, [pc, #440]	; (9d44 <m2m_wifi_cb+0x34c>)
    9b8c:	681b      	ldr	r3, [r3, #0]
    9b8e:	2b00      	cmp	r3, #0
    9b90:	d100      	bne.n	9b94 <m2m_wifi_cb+0x19c>
    9b92:	e0f8      	b.n	9d86 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    9b94:	4b6b      	ldr	r3, [pc, #428]	; (9d44 <m2m_wifi_cb+0x34c>)
    9b96:	681b      	ldr	r3, [r3, #0]
    9b98:	2100      	movs	r1, #0
    9b9a:	2034      	movs	r0, #52	; 0x34
    9b9c:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9b9e:	e0f2      	b.n	9d86 <m2m_wifi_cb+0x38e>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    9ba0:	1dfb      	adds	r3, r7, #7
    9ba2:	781b      	ldrb	r3, [r3, #0]
    9ba4:	2b11      	cmp	r3, #17
    9ba6:	d11e      	bne.n	9be6 <m2m_wifi_cb+0x1ee>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    9ba8:	4b6c      	ldr	r3, [pc, #432]	; (9d5c <m2m_wifi_cb+0x364>)
    9baa:	2200      	movs	r2, #0
    9bac:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    9bae:	2378      	movs	r3, #120	; 0x78
    9bb0:	18f9      	adds	r1, r7, r3
    9bb2:	6838      	ldr	r0, [r7, #0]
    9bb4:	2300      	movs	r3, #0
    9bb6:	2204      	movs	r2, #4
    9bb8:	4c61      	ldr	r4, [pc, #388]	; (9d40 <m2m_wifi_cb+0x348>)
    9bba:	47a0      	blx	r4
    9bbc:	1e03      	subs	r3, r0, #0
    9bbe:	d000      	beq.n	9bc2 <m2m_wifi_cb+0x1ca>
    9bc0:	e0e1      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			gu8ChNum = strState.u8NumofCh;
    9bc2:	2378      	movs	r3, #120	; 0x78
    9bc4:	18fb      	adds	r3, r7, r3
    9bc6:	781a      	ldrb	r2, [r3, #0]
    9bc8:	4b65      	ldr	r3, [pc, #404]	; (9d60 <m2m_wifi_cb+0x368>)
    9bca:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    9bcc:	4b5d      	ldr	r3, [pc, #372]	; (9d44 <m2m_wifi_cb+0x34c>)
    9bce:	681b      	ldr	r3, [r3, #0]
    9bd0:	2b00      	cmp	r3, #0
    9bd2:	d100      	bne.n	9bd6 <m2m_wifi_cb+0x1de>
    9bd4:	e0d7      	b.n	9d86 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    9bd6:	4b5b      	ldr	r3, [pc, #364]	; (9d44 <m2m_wifi_cb+0x34c>)
    9bd8:	681b      	ldr	r3, [r3, #0]
    9bda:	2278      	movs	r2, #120	; 0x78
    9bdc:	18ba      	adds	r2, r7, r2
    9bde:	0011      	movs	r1, r2
    9be0:	2011      	movs	r0, #17
    9be2:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9be4:	e0cf      	b.n	9d86 <m2m_wifi_cb+0x38e>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    9be6:	1dfb      	adds	r3, r7, #7
    9be8:	781b      	ldrb	r3, [r3, #0]
    9bea:	2b13      	cmp	r3, #19
    9bec:	d116      	bne.n	9c1c <m2m_wifi_cb+0x224>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    9bee:	2308      	movs	r3, #8
    9bf0:	18f9      	adds	r1, r7, r3
    9bf2:	6838      	ldr	r0, [r7, #0]
    9bf4:	2300      	movs	r3, #0
    9bf6:	222c      	movs	r2, #44	; 0x2c
    9bf8:	4c51      	ldr	r4, [pc, #324]	; (9d40 <m2m_wifi_cb+0x348>)
    9bfa:	47a0      	blx	r4
    9bfc:	1e03      	subs	r3, r0, #0
    9bfe:	d000      	beq.n	9c02 <m2m_wifi_cb+0x20a>
    9c00:	e0c1      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    9c02:	4b50      	ldr	r3, [pc, #320]	; (9d44 <m2m_wifi_cb+0x34c>)
    9c04:	681b      	ldr	r3, [r3, #0]
    9c06:	2b00      	cmp	r3, #0
    9c08:	d100      	bne.n	9c0c <m2m_wifi_cb+0x214>
    9c0a:	e0bc      	b.n	9d86 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    9c0c:	4b4d      	ldr	r3, [pc, #308]	; (9d44 <m2m_wifi_cb+0x34c>)
    9c0e:	681b      	ldr	r3, [r3, #0]
    9c10:	2208      	movs	r2, #8
    9c12:	18ba      	adds	r2, r7, r2
    9c14:	0011      	movs	r1, r2
    9c16:	2013      	movs	r0, #19
    9c18:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9c1a:	e0b4      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    9c1c:	1dfb      	adds	r3, r7, #7
    9c1e:	781b      	ldrb	r3, [r3, #0]
    9c20:	2b04      	cmp	r3, #4
    9c22:	d116      	bne.n	9c52 <m2m_wifi_cb+0x25a>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    9c24:	23a0      	movs	r3, #160	; 0xa0
    9c26:	18f9      	adds	r1, r7, r3
    9c28:	6838      	ldr	r0, [r7, #0]
    9c2a:	2300      	movs	r3, #0
    9c2c:	2204      	movs	r2, #4
    9c2e:	4c44      	ldr	r4, [pc, #272]	; (9d40 <m2m_wifi_cb+0x348>)
    9c30:	47a0      	blx	r4
    9c32:	1e03      	subs	r3, r0, #0
    9c34:	d000      	beq.n	9c38 <m2m_wifi_cb+0x240>
    9c36:	e0a6      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    9c38:	4b42      	ldr	r3, [pc, #264]	; (9d44 <m2m_wifi_cb+0x34c>)
    9c3a:	681b      	ldr	r3, [r3, #0]
    9c3c:	2b00      	cmp	r3, #0
    9c3e:	d100      	bne.n	9c42 <m2m_wifi_cb+0x24a>
    9c40:	e0a1      	b.n	9d86 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    9c42:	4b40      	ldr	r3, [pc, #256]	; (9d44 <m2m_wifi_cb+0x34c>)
    9c44:	681b      	ldr	r3, [r3, #0]
    9c46:	22a0      	movs	r2, #160	; 0xa0
    9c48:	18ba      	adds	r2, r7, r2
    9c4a:	0011      	movs	r1, r2
    9c4c:	2004      	movs	r0, #4
    9c4e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9c50:	e099      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    9c52:	1dfb      	adds	r3, r7, #7
    9c54:	781b      	ldrb	r3, [r3, #0]
    9c56:	2b65      	cmp	r3, #101	; 0x65
    9c58:	d116      	bne.n	9c88 <m2m_wifi_cb+0x290>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    9c5a:	23a0      	movs	r3, #160	; 0xa0
    9c5c:	18f9      	adds	r1, r7, r3
    9c5e:	6838      	ldr	r0, [r7, #0]
    9c60:	2300      	movs	r3, #0
    9c62:	2204      	movs	r2, #4
    9c64:	4c36      	ldr	r4, [pc, #216]	; (9d40 <m2m_wifi_cb+0x348>)
    9c66:	47a0      	blx	r4
    9c68:	1e03      	subs	r3, r0, #0
    9c6a:	d000      	beq.n	9c6e <m2m_wifi_cb+0x276>
    9c6c:	e08b      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    9c6e:	4b35      	ldr	r3, [pc, #212]	; (9d44 <m2m_wifi_cb+0x34c>)
    9c70:	681b      	ldr	r3, [r3, #0]
    9c72:	2b00      	cmp	r3, #0
    9c74:	d100      	bne.n	9c78 <m2m_wifi_cb+0x280>
    9c76:	e086      	b.n	9d86 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    9c78:	4b32      	ldr	r3, [pc, #200]	; (9d44 <m2m_wifi_cb+0x34c>)
    9c7a:	681b      	ldr	r3, [r3, #0]
    9c7c:	22a0      	movs	r2, #160	; 0xa0
    9c7e:	18ba      	adds	r2, r7, r2
    9c80:	0011      	movs	r1, r2
    9c82:	2065      	movs	r0, #101	; 0x65
    9c84:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9c86:	e07e      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    9c88:	1dfb      	adds	r3, r7, #7
    9c8a:	781b      	ldrb	r3, [r3, #0]
    9c8c:	2b09      	cmp	r3, #9
    9c8e:	d116      	bne.n	9cbe <m2m_wifi_cb+0x2c6>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    9c90:	2308      	movs	r3, #8
    9c92:	18f9      	adds	r1, r7, r3
    9c94:	6838      	ldr	r0, [r7, #0]
    9c96:	2301      	movs	r3, #1
    9c98:	2264      	movs	r2, #100	; 0x64
    9c9a:	4c29      	ldr	r4, [pc, #164]	; (9d40 <m2m_wifi_cb+0x348>)
    9c9c:	47a0      	blx	r4
    9c9e:	1e03      	subs	r3, r0, #0
    9ca0:	d000      	beq.n	9ca4 <m2m_wifi_cb+0x2ac>
    9ca2:	e070      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
    9ca4:	4b27      	ldr	r3, [pc, #156]	; (9d44 <m2m_wifi_cb+0x34c>)
    9ca6:	681b      	ldr	r3, [r3, #0]
    9ca8:	2b00      	cmp	r3, #0
    9caa:	d100      	bne.n	9cae <m2m_wifi_cb+0x2b6>
    9cac:	e06b      	b.n	9d86 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    9cae:	4b25      	ldr	r3, [pc, #148]	; (9d44 <m2m_wifi_cb+0x34c>)
    9cb0:	681b      	ldr	r3, [r3, #0]
    9cb2:	2208      	movs	r2, #8
    9cb4:	18ba      	adds	r2, r7, r2
    9cb6:	0011      	movs	r1, r2
    9cb8:	2009      	movs	r0, #9
    9cba:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9cbc:	e063      	b.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    9cbe:	1dfb      	adds	r3, r7, #7
    9cc0:	781b      	ldrb	r3, [r3, #0]
    9cc2:	2b2a      	cmp	r3, #42	; 0x2a
    9cc4:	d114      	bne.n	9cf0 <m2m_wifi_cb+0x2f8>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    9cc6:	2374      	movs	r3, #116	; 0x74
    9cc8:	18f9      	adds	r1, r7, r3
    9cca:	6838      	ldr	r0, [r7, #0]
    9ccc:	2301      	movs	r3, #1
    9cce:	2204      	movs	r2, #4
    9cd0:	4c1b      	ldr	r4, [pc, #108]	; (9d40 <m2m_wifi_cb+0x348>)
    9cd2:	47a0      	blx	r4
    9cd4:	1e03      	subs	r3, r0, #0
    9cd6:	d156      	bne.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
    9cd8:	4b1a      	ldr	r3, [pc, #104]	; (9d44 <m2m_wifi_cb+0x34c>)
    9cda:	681b      	ldr	r3, [r3, #0]
    9cdc:	2b00      	cmp	r3, #0
    9cde:	d052      	beq.n	9d86 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    9ce0:	4b18      	ldr	r3, [pc, #96]	; (9d44 <m2m_wifi_cb+0x34c>)
    9ce2:	681b      	ldr	r3, [r3, #0]
    9ce4:	2274      	movs	r2, #116	; 0x74
    9ce6:	18ba      	adds	r2, r7, r2
    9ce8:	0011      	movs	r1, r2
    9cea:	202a      	movs	r0, #42	; 0x2a
    9cec:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9cee:	e04a      	b.n	9d86 <m2m_wifi_cb+0x38e>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    9cf0:	1dfb      	adds	r3, r7, #7
    9cf2:	781b      	ldrb	r3, [r3, #0]
    9cf4:	2b20      	cmp	r3, #32
    9cf6:	d135      	bne.n	9d64 <m2m_wifi_cb+0x36c>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    9cf8:	236c      	movs	r3, #108	; 0x6c
    9cfa:	18f9      	adds	r1, r7, r3
    9cfc:	6838      	ldr	r0, [r7, #0]
    9cfe:	2300      	movs	r3, #0
    9d00:	2208      	movs	r2, #8
    9d02:	4c0f      	ldr	r4, [pc, #60]	; (9d40 <m2m_wifi_cb+0x348>)
    9d04:	47a0      	blx	r4
    9d06:	1e03      	subs	r3, r0, #0
    9d08:	d13d      	bne.n	9d86 <m2m_wifi_cb+0x38e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    9d0a:	683b      	ldr	r3, [r7, #0]
    9d0c:	3308      	adds	r3, #8
    9d0e:	0018      	movs	r0, r3
    9d10:	236c      	movs	r3, #108	; 0x6c
    9d12:	18fb      	adds	r3, r7, r3
    9d14:	6819      	ldr	r1, [r3, #0]
    9d16:	236c      	movs	r3, #108	; 0x6c
    9d18:	18fb      	adds	r3, r7, r3
    9d1a:	889a      	ldrh	r2, [r3, #4]
    9d1c:	2301      	movs	r3, #1
    9d1e:	4c08      	ldr	r4, [pc, #32]	; (9d40 <m2m_wifi_cb+0x348>)
    9d20:	47a0      	blx	r4
    9d22:	1e03      	subs	r3, r0, #0
    9d24:	d12f      	bne.n	9d86 <m2m_wifi_cb+0x38e>
			{
				if(gpfAppWifiCb)
    9d26:	4b07      	ldr	r3, [pc, #28]	; (9d44 <m2m_wifi_cb+0x34c>)
    9d28:	681b      	ldr	r3, [r3, #0]
    9d2a:	2b00      	cmp	r3, #0
    9d2c:	d02b      	beq.n	9d86 <m2m_wifi_cb+0x38e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    9d2e:	4b05      	ldr	r3, [pc, #20]	; (9d44 <m2m_wifi_cb+0x34c>)
    9d30:	681b      	ldr	r3, [r3, #0]
    9d32:	226c      	movs	r2, #108	; 0x6c
    9d34:	18ba      	adds	r2, r7, r2
    9d36:	0011      	movs	r1, r2
    9d38:	2020      	movs	r0, #32
    9d3a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9d3c:	e023      	b.n	9d86 <m2m_wifi_cb+0x38e>
    9d3e:	46c0      	nop			; (mov r8, r8)
    9d40:	000097bd 	.word	0x000097bd
    9d44:	200000b8 	.word	0x200000b8
    9d48:	00008c25 	.word	0x00008c25
    9d4c:	00019ef8 	.word	0x00019ef8
    9d50:	00018619 	.word	0x00018619
    9d54:	00019f04 	.word	0x00019f04
    9d58:	0001864d 	.word	0x0001864d
    9d5c:	200000b5 	.word	0x200000b5
    9d60:	200000b4 	.word	0x200000b4
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    9d64:	2392      	movs	r3, #146	; 0x92
    9d66:	005a      	lsls	r2, r3, #1
    9d68:	4909      	ldr	r1, [pc, #36]	; (9d90 <m2m_wifi_cb+0x398>)
    9d6a:	4b0a      	ldr	r3, [pc, #40]	; (9d94 <m2m_wifi_cb+0x39c>)
    9d6c:	0018      	movs	r0, r3
    9d6e:	4b0a      	ldr	r3, [pc, #40]	; (9d98 <m2m_wifi_cb+0x3a0>)
    9d70:	4798      	blx	r3
    9d72:	1dfb      	adds	r3, r7, #7
    9d74:	781a      	ldrb	r2, [r3, #0]
    9d76:	4b09      	ldr	r3, [pc, #36]	; (9d9c <m2m_wifi_cb+0x3a4>)
    9d78:	0011      	movs	r1, r2
    9d7a:	0018      	movs	r0, r3
    9d7c:	4b06      	ldr	r3, [pc, #24]	; (9d98 <m2m_wifi_cb+0x3a0>)
    9d7e:	4798      	blx	r3
    9d80:	200d      	movs	r0, #13
    9d82:	4b07      	ldr	r3, [pc, #28]	; (9da0 <m2m_wifi_cb+0x3a8>)
    9d84:	4798      	blx	r3
	}
}
    9d86:	46c0      	nop			; (mov r8, r8)
    9d88:	46bd      	mov	sp, r7
    9d8a:	b02b      	add	sp, #172	; 0xac
    9d8c:	bd90      	pop	{r4, r7, pc}
    9d8e:	46c0      	nop			; (mov r8, r8)
    9d90:	0001a2ac 	.word	0x0001a2ac
    9d94:	00019f24 	.word	0x00019f24
    9d98:	00018619 	.word	0x00018619
    9d9c:	00019f38 	.word	0x00019f38
    9da0:	0001864d 	.word	0x0001864d

00009da4 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    9da4:	b590      	push	{r4, r7, lr}
    9da6:	b091      	sub	sp, #68	; 0x44
    9da8:	af02      	add	r7, sp, #8
    9daa:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    9dac:	2337      	movs	r3, #55	; 0x37
    9dae:	18fb      	adds	r3, r7, r3
    9db0:	2200      	movs	r2, #0
    9db2:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    9db4:	230b      	movs	r3, #11
    9db6:	18fb      	adds	r3, r7, r3
    9db8:	2201      	movs	r2, #1
    9dba:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    9dbc:	687b      	ldr	r3, [r7, #4]
    9dbe:	2b00      	cmp	r3, #0
    9dc0:	d104      	bne.n	9dcc <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    9dc2:	2337      	movs	r3, #55	; 0x37
    9dc4:	18fb      	adds	r3, r7, r3
    9dc6:	22f4      	movs	r2, #244	; 0xf4
    9dc8:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    9dca:	e0ad      	b.n	9f28 <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    9dcc:	687b      	ldr	r3, [r7, #4]
    9dce:	681a      	ldr	r2, [r3, #0]
    9dd0:	4b59      	ldr	r3, [pc, #356]	; (9f38 <m2m_wifi_init+0x194>)
    9dd2:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    9dd4:	4b59      	ldr	r3, [pc, #356]	; (9f3c <m2m_wifi_init+0x198>)
    9dd6:	2200      	movs	r2, #0
    9dd8:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    9dda:	2337      	movs	r3, #55	; 0x37
    9ddc:	18fc      	adds	r4, r7, r3
    9dde:	230b      	movs	r3, #11
    9de0:	18fb      	adds	r3, r7, r3
    9de2:	0018      	movs	r0, r3
    9de4:	4b56      	ldr	r3, [pc, #344]	; (9f40 <m2m_wifi_init+0x19c>)
    9de6:	4798      	blx	r3
    9de8:	0003      	movs	r3, r0
    9dea:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    9dec:	2337      	movs	r3, #55	; 0x37
    9dee:	18fb      	adds	r3, r7, r3
    9df0:	781b      	ldrb	r3, [r3, #0]
    9df2:	b25b      	sxtb	r3, r3
    9df4:	2b00      	cmp	r3, #0
    9df6:	d000      	beq.n	9dfa <m2m_wifi_init+0x56>
    9df8:	e093      	b.n	9f22 <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    9dfa:	2337      	movs	r3, #55	; 0x37
    9dfc:	18fc      	adds	r4, r7, r3
    9dfe:	2000      	movs	r0, #0
    9e00:	4b50      	ldr	r3, [pc, #320]	; (9f44 <m2m_wifi_init+0x1a0>)
    9e02:	4798      	blx	r3
    9e04:	0003      	movs	r3, r0
    9e06:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    9e08:	2337      	movs	r3, #55	; 0x37
    9e0a:	18fb      	adds	r3, r7, r3
    9e0c:	781b      	ldrb	r3, [r3, #0]
    9e0e:	b25b      	sxtb	r3, r3
    9e10:	2b00      	cmp	r3, #0
    9e12:	d000      	beq.n	9e16 <m2m_wifi_init+0x72>
    9e14:	e080      	b.n	9f18 <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    9e16:	4b4c      	ldr	r3, [pc, #304]	; (9f48 <m2m_wifi_init+0x1a4>)
    9e18:	0019      	movs	r1, r3
    9e1a:	2001      	movs	r0, #1
    9e1c:	4b4b      	ldr	r3, [pc, #300]	; (9f4c <m2m_wifi_init+0x1a8>)
    9e1e:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    9e20:	2337      	movs	r3, #55	; 0x37
    9e22:	18fc      	adds	r4, r7, r3
    9e24:	230c      	movs	r3, #12
    9e26:	18fb      	adds	r3, r7, r3
    9e28:	0018      	movs	r0, r3
    9e2a:	4b49      	ldr	r3, [pc, #292]	; (9f50 <m2m_wifi_init+0x1ac>)
    9e2c:	4798      	blx	r3
    9e2e:	0003      	movs	r3, r0
    9e30:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    9e32:	4b48      	ldr	r3, [pc, #288]	; (9f54 <m2m_wifi_init+0x1b0>)
    9e34:	0018      	movs	r0, r3
    9e36:	4b48      	ldr	r3, [pc, #288]	; (9f58 <m2m_wifi_init+0x1b4>)
    9e38:	4798      	blx	r3
    9e3a:	230c      	movs	r3, #12
    9e3c:	18fb      	adds	r3, r7, r3
    9e3e:	791b      	ldrb	r3, [r3, #4]
    9e40:	0019      	movs	r1, r3
    9e42:	230c      	movs	r3, #12
    9e44:	18fb      	adds	r3, r7, r3
    9e46:	795b      	ldrb	r3, [r3, #5]
    9e48:	001a      	movs	r2, r3
    9e4a:	230c      	movs	r3, #12
    9e4c:	18fb      	adds	r3, r7, r3
    9e4e:	799b      	ldrb	r3, [r3, #6]
    9e50:	001c      	movs	r4, r3
    9e52:	230c      	movs	r3, #12
    9e54:	18fb      	adds	r3, r7, r3
    9e56:	8c1b      	ldrh	r3, [r3, #32]
    9e58:	4840      	ldr	r0, [pc, #256]	; (9f5c <m2m_wifi_init+0x1b8>)
    9e5a:	9300      	str	r3, [sp, #0]
    9e5c:	0023      	movs	r3, r4
    9e5e:	4c3e      	ldr	r4, [pc, #248]	; (9f58 <m2m_wifi_init+0x1b4>)
    9e60:	47a0      	blx	r4
    9e62:	200d      	movs	r0, #13
    9e64:	4b3e      	ldr	r3, [pc, #248]	; (9f60 <m2m_wifi_init+0x1bc>)
    9e66:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    9e68:	4b3a      	ldr	r3, [pc, #232]	; (9f54 <m2m_wifi_init+0x1b0>)
    9e6a:	0018      	movs	r0, r3
    9e6c:	4b3a      	ldr	r3, [pc, #232]	; (9f58 <m2m_wifi_init+0x1b4>)
    9e6e:	4798      	blx	r3
    9e70:	230c      	movs	r3, #12
    9e72:	18fb      	adds	r3, r7, r3
    9e74:	3316      	adds	r3, #22
    9e76:	001a      	movs	r2, r3
    9e78:	230c      	movs	r3, #12
    9e7a:	18fb      	adds	r3, r7, r3
    9e7c:	330a      	adds	r3, #10
    9e7e:	0019      	movs	r1, r3
    9e80:	4b38      	ldr	r3, [pc, #224]	; (9f64 <m2m_wifi_init+0x1c0>)
    9e82:	0018      	movs	r0, r3
    9e84:	4b34      	ldr	r3, [pc, #208]	; (9f58 <m2m_wifi_init+0x1b4>)
    9e86:	4798      	blx	r3
    9e88:	200d      	movs	r0, #13
    9e8a:	4b35      	ldr	r3, [pc, #212]	; (9f60 <m2m_wifi_init+0x1bc>)
    9e8c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    9e8e:	4b31      	ldr	r3, [pc, #196]	; (9f54 <m2m_wifi_init+0x1b0>)
    9e90:	0018      	movs	r0, r3
    9e92:	4b31      	ldr	r3, [pc, #196]	; (9f58 <m2m_wifi_init+0x1b4>)
    9e94:	4798      	blx	r3
    9e96:	230c      	movs	r3, #12
    9e98:	18fb      	adds	r3, r7, r3
    9e9a:	79db      	ldrb	r3, [r3, #7]
    9e9c:	0019      	movs	r1, r3
    9e9e:	230c      	movs	r3, #12
    9ea0:	18fb      	adds	r3, r7, r3
    9ea2:	7a1b      	ldrb	r3, [r3, #8]
    9ea4:	001a      	movs	r2, r3
    9ea6:	230c      	movs	r3, #12
    9ea8:	18fb      	adds	r3, r7, r3
    9eaa:	7a5b      	ldrb	r3, [r3, #9]
    9eac:	482e      	ldr	r0, [pc, #184]	; (9f68 <m2m_wifi_init+0x1c4>)
    9eae:	4c2a      	ldr	r4, [pc, #168]	; (9f58 <m2m_wifi_init+0x1b4>)
    9eb0:	47a0      	blx	r4
    9eb2:	200d      	movs	r0, #13
    9eb4:	4b2a      	ldr	r3, [pc, #168]	; (9f60 <m2m_wifi_init+0x1bc>)
    9eb6:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    9eb8:	4b26      	ldr	r3, [pc, #152]	; (9f54 <m2m_wifi_init+0x1b0>)
    9eba:	0018      	movs	r0, r3
    9ebc:	4b26      	ldr	r3, [pc, #152]	; (9f58 <m2m_wifi_init+0x1b4>)
    9ebe:	4798      	blx	r3
    9ec0:	482a      	ldr	r0, [pc, #168]	; (9f6c <m2m_wifi_init+0x1c8>)
    9ec2:	2302      	movs	r3, #2
    9ec4:	2205      	movs	r2, #5
    9ec6:	2113      	movs	r1, #19
    9ec8:	4c23      	ldr	r4, [pc, #140]	; (9f58 <m2m_wifi_init+0x1b4>)
    9eca:	47a0      	blx	r4
    9ecc:	200d      	movs	r0, #13
    9ece:	4b24      	ldr	r3, [pc, #144]	; (9f60 <m2m_wifi_init+0x1bc>)
    9ed0:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    9ed2:	4b20      	ldr	r3, [pc, #128]	; (9f54 <m2m_wifi_init+0x1b0>)
    9ed4:	0018      	movs	r0, r3
    9ed6:	4b20      	ldr	r3, [pc, #128]	; (9f58 <m2m_wifi_init+0x1b4>)
    9ed8:	4798      	blx	r3
    9eda:	4a25      	ldr	r2, [pc, #148]	; (9f70 <m2m_wifi_init+0x1cc>)
    9edc:	4925      	ldr	r1, [pc, #148]	; (9f74 <m2m_wifi_init+0x1d0>)
    9ede:	4b26      	ldr	r3, [pc, #152]	; (9f78 <m2m_wifi_init+0x1d4>)
    9ee0:	0018      	movs	r0, r3
    9ee2:	4b1d      	ldr	r3, [pc, #116]	; (9f58 <m2m_wifi_init+0x1b4>)
    9ee4:	4798      	blx	r3
    9ee6:	200d      	movs	r0, #13
    9ee8:	4b1d      	ldr	r3, [pc, #116]	; (9f60 <m2m_wifi_init+0x1bc>)
    9eea:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    9eec:	2337      	movs	r3, #55	; 0x37
    9eee:	18fb      	adds	r3, r7, r3
    9ef0:	781b      	ldrb	r3, [r3, #0]
    9ef2:	b25b      	sxtb	r3, r3
    9ef4:	330d      	adds	r3, #13
    9ef6:	d116      	bne.n	9f26 <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    9ef8:	23e8      	movs	r3, #232	; 0xe8
    9efa:	33ff      	adds	r3, #255	; 0xff
    9efc:	001a      	movs	r2, r3
    9efe:	491f      	ldr	r1, [pc, #124]	; (9f7c <m2m_wifi_init+0x1d8>)
    9f00:	4b1f      	ldr	r3, [pc, #124]	; (9f80 <m2m_wifi_init+0x1dc>)
    9f02:	0018      	movs	r0, r3
    9f04:	4b14      	ldr	r3, [pc, #80]	; (9f58 <m2m_wifi_init+0x1b4>)
    9f06:	4798      	blx	r3
    9f08:	4b1e      	ldr	r3, [pc, #120]	; (9f84 <m2m_wifi_init+0x1e0>)
    9f0a:	0018      	movs	r0, r3
    9f0c:	4b1e      	ldr	r3, [pc, #120]	; (9f88 <m2m_wifi_init+0x1e4>)
    9f0e:	4798      	blx	r3
    9f10:	200d      	movs	r0, #13
    9f12:	4b13      	ldr	r3, [pc, #76]	; (9f60 <m2m_wifi_init+0x1bc>)
    9f14:	4798      	blx	r3
	}

	goto _EXIT0;
    9f16:	e006      	b.n	9f26 <m2m_wifi_init+0x182>
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
	/* Initialize host interface module */
	ret = hif_init(NULL);
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    9f18:	46c0      	nop			; (mov r8, r8)
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
    9f1a:	2000      	movs	r0, #0
    9f1c:	4b1b      	ldr	r3, [pc, #108]	; (9f8c <m2m_wifi_init+0x1e8>)
    9f1e:	4798      	blx	r3
    9f20:	e002      	b.n	9f28 <m2m_wifi_init+0x184>
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    9f22:	46c0      	nop			; (mov r8, r8)
    9f24:	e000      	b.n	9f28 <m2m_wifi_init+0x184>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
    9f26:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
    9f28:	2337      	movs	r3, #55	; 0x37
    9f2a:	18fb      	adds	r3, r7, r3
    9f2c:	781b      	ldrb	r3, [r3, #0]
    9f2e:	b25b      	sxtb	r3, r3
}
    9f30:	0018      	movs	r0, r3
    9f32:	46bd      	mov	sp, r7
    9f34:	b00f      	add	sp, #60	; 0x3c
    9f36:	bd90      	pop	{r4, r7, pc}
    9f38:	200000b8 	.word	0x200000b8
    9f3c:	200000b5 	.word	0x200000b5
    9f40:	0000b0d9 	.word	0x0000b0d9
    9f44:	00008e3d 	.word	0x00008e3d
    9f48:	000099f9 	.word	0x000099f9
    9f4c:	0000993d 	.word	0x0000993d
    9f50:	0000af0d 	.word	0x0000af0d
    9f54:	00019ef8 	.word	0x00019ef8
    9f58:	00018619 	.word	0x00018619
    9f5c:	0001a08c 	.word	0x0001a08c
    9f60:	0001864d 	.word	0x0001864d
    9f64:	0001a0b4 	.word	0x0001a0b4
    9f68:	0001a0d0 	.word	0x0001a0d0
    9f6c:	0001a0f4 	.word	0x0001a0f4
    9f70:	0001a10c 	.word	0x0001a10c
    9f74:	0001a118 	.word	0x0001a118
    9f78:	0001a124 	.word	0x0001a124
    9f7c:	0001a2b8 	.word	0x0001a2b8
    9f80:	00019f24 	.word	0x00019f24
    9f84:	0001a13c 	.word	0x0001a13c
    9f88:	00018739 	.word	0x00018739
    9f8c:	0000b26d 	.word	0x0000b26d

00009f90 <m2m_wifi_deinit>:

sint8  m2m_wifi_deinit(void * arg)
{
    9f90:	b580      	push	{r7, lr}
    9f92:	b082      	sub	sp, #8
    9f94:	af00      	add	r7, sp, #0
    9f96:	6078      	str	r0, [r7, #4]

	hif_deinit(NULL);
    9f98:	2000      	movs	r0, #0
    9f9a:	4b05      	ldr	r3, [pc, #20]	; (9fb0 <m2m_wifi_deinit+0x20>)
    9f9c:	4798      	blx	r3

	nm_drv_deinit(NULL);
    9f9e:	2000      	movs	r0, #0
    9fa0:	4b04      	ldr	r3, [pc, #16]	; (9fb4 <m2m_wifi_deinit+0x24>)
    9fa2:	4798      	blx	r3

	return M2M_SUCCESS;
    9fa4:	2300      	movs	r3, #0
}
    9fa6:	0018      	movs	r0, r3
    9fa8:	46bd      	mov	sp, r7
    9faa:	b002      	add	sp, #8
    9fac:	bd80      	pop	{r7, pc}
    9fae:	46c0      	nop			; (mov r8, r8)
    9fb0:	00008e85 	.word	0x00008e85
    9fb4:	0000b26d 	.word	0x0000b26d

00009fb8 <m2m_wifi_handle_events>:


sint8 m2m_wifi_handle_events(void * arg)
{
    9fb8:	b580      	push	{r7, lr}
    9fba:	b082      	sub	sp, #8
    9fbc:	af00      	add	r7, sp, #0
    9fbe:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    9fc0:	4b03      	ldr	r3, [pc, #12]	; (9fd0 <m2m_wifi_handle_events+0x18>)
    9fc2:	4798      	blx	r3
    9fc4:	0003      	movs	r3, r0
}
    9fc6:	0018      	movs	r0, r3
    9fc8:	46bd      	mov	sp, r7
    9fca:	b002      	add	sp, #8
    9fcc:	bd80      	pop	{r7, pc}
    9fce:	46c0      	nop			; (mov r8, r8)
    9fd0:	0000972d 	.word	0x0000972d

00009fd4 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    9fd4:	b590      	push	{r4, r7, lr}
    9fd6:	b087      	sub	sp, #28
    9fd8:	af02      	add	r7, sp, #8
    9fda:	60f8      	str	r0, [r7, #12]
    9fdc:	0008      	movs	r0, r1
    9fde:	0011      	movs	r1, r2
    9fe0:	607b      	str	r3, [r7, #4]
    9fe2:	230b      	movs	r3, #11
    9fe4:	18fb      	adds	r3, r7, r3
    9fe6:	1c02      	adds	r2, r0, #0
    9fe8:	701a      	strb	r2, [r3, #0]
    9fea:	230a      	movs	r3, #10
    9fec:	18fb      	adds	r3, r7, r3
    9fee:	1c0a      	adds	r2, r1, #0
    9ff0:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    9ff2:	687c      	ldr	r4, [r7, #4]
    9ff4:	230a      	movs	r3, #10
    9ff6:	18fb      	adds	r3, r7, r3
    9ff8:	781a      	ldrb	r2, [r3, #0]
    9ffa:	230b      	movs	r3, #11
    9ffc:	18fb      	adds	r3, r7, r3
    9ffe:	7819      	ldrb	r1, [r3, #0]
    a000:	68f8      	ldr	r0, [r7, #12]
    a002:	2300      	movs	r3, #0
    a004:	9301      	str	r3, [sp, #4]
    a006:	2320      	movs	r3, #32
    a008:	18fb      	adds	r3, r7, r3
    a00a:	881b      	ldrh	r3, [r3, #0]
    a00c:	9300      	str	r3, [sp, #0]
    a00e:	0023      	movs	r3, r4
    a010:	4c03      	ldr	r4, [pc, #12]	; (a020 <m2m_wifi_connect+0x4c>)
    a012:	47a0      	blx	r4
    a014:	0003      	movs	r3, r0
}
    a016:	0018      	movs	r0, r3
    a018:	46bd      	mov	sp, r7
    a01a:	b005      	add	sp, #20
    a01c:	bd90      	pop	{r4, r7, pc}
    a01e:	46c0      	nop			; (mov r8, r8)
    a020:	0000a025 	.word	0x0000a025

0000a024 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    a024:	b5b0      	push	{r4, r5, r7, lr}
    a026:	b0aa      	sub	sp, #168	; 0xa8
    a028:	af04      	add	r7, sp, #16
    a02a:	60f8      	str	r0, [r7, #12]
    a02c:	0008      	movs	r0, r1
    a02e:	0011      	movs	r1, r2
    a030:	607b      	str	r3, [r7, #4]
    a032:	230b      	movs	r3, #11
    a034:	18fb      	adds	r3, r7, r3
    a036:	1c02      	adds	r2, r0, #0
    a038:	701a      	strb	r2, [r3, #0]
    a03a:	230a      	movs	r3, #10
    a03c:	18fb      	adds	r3, r7, r3
    a03e:	1c0a      	adds	r2, r1, #0
    a040:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    a042:	2397      	movs	r3, #151	; 0x97
    a044:	18fb      	adds	r3, r7, r3
    a046:	2200      	movs	r2, #0
    a048:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    a04a:	230a      	movs	r3, #10
    a04c:	18fb      	adds	r3, r7, r3
    a04e:	781b      	ldrb	r3, [r3, #0]
    a050:	2b01      	cmp	r3, #1
    a052:	d100      	bne.n	a056 <m2m_wifi_connect_sc+0x32>
    a054:	e083      	b.n	a15e <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    a056:	687b      	ldr	r3, [r7, #4]
    a058:	2b00      	cmp	r3, #0
    a05a:	d111      	bne.n	a080 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    a05c:	4adb      	ldr	r2, [pc, #876]	; (a3cc <m2m_wifi_connect_sc+0x3a8>)
    a05e:	49dc      	ldr	r1, [pc, #880]	; (a3d0 <m2m_wifi_connect_sc+0x3ac>)
    a060:	4bdc      	ldr	r3, [pc, #880]	; (a3d4 <m2m_wifi_connect_sc+0x3b0>)
    a062:	0018      	movs	r0, r3
    a064:	4bdc      	ldr	r3, [pc, #880]	; (a3d8 <m2m_wifi_connect_sc+0x3b4>)
    a066:	4798      	blx	r3
    a068:	4bdc      	ldr	r3, [pc, #880]	; (a3dc <m2m_wifi_connect_sc+0x3b8>)
    a06a:	0018      	movs	r0, r3
    a06c:	4bdc      	ldr	r3, [pc, #880]	; (a3e0 <m2m_wifi_connect_sc+0x3bc>)
    a06e:	4798      	blx	r3
    a070:	200d      	movs	r0, #13
    a072:	4bdc      	ldr	r3, [pc, #880]	; (a3e4 <m2m_wifi_connect_sc+0x3c0>)
    a074:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a076:	2397      	movs	r3, #151	; 0x97
    a078:	18fb      	adds	r3, r7, r3
    a07a:	22f4      	movs	r2, #244	; 0xf4
    a07c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a07e:	e1f5      	b.n	a46c <m2m_wifi_connect_sc+0x448>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    a080:	230a      	movs	r3, #10
    a082:	18fb      	adds	r3, r7, r3
    a084:	781b      	ldrb	r3, [r3, #0]
    a086:	2b02      	cmp	r3, #2
    a088:	d169      	bne.n	a15e <m2m_wifi_connect_sc+0x13a>
    a08a:	687b      	ldr	r3, [r7, #4]
    a08c:	0018      	movs	r0, r3
    a08e:	4bd6      	ldr	r3, [pc, #856]	; (a3e8 <m2m_wifi_connect_sc+0x3c4>)
    a090:	4798      	blx	r3
    a092:	1e03      	subs	r3, r0, #0
    a094:	2b40      	cmp	r3, #64	; 0x40
    a096:	d162      	bne.n	a15e <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    a098:	2396      	movs	r3, #150	; 0x96
    a09a:	18fb      	adds	r3, r7, r3
    a09c:	2200      	movs	r2, #0
    a09e:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    a0a0:	687b      	ldr	r3, [r7, #4]
    a0a2:	2290      	movs	r2, #144	; 0x90
    a0a4:	18ba      	adds	r2, r7, r2
    a0a6:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    a0a8:	e054      	b.n	a154 <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    a0aa:	2396      	movs	r3, #150	; 0x96
    a0ac:	18fb      	adds	r3, r7, r3
    a0ae:	781b      	ldrb	r3, [r3, #0]
    a0b0:	2290      	movs	r2, #144	; 0x90
    a0b2:	18ba      	adds	r2, r7, r2
    a0b4:	6812      	ldr	r2, [r2, #0]
    a0b6:	18d3      	adds	r3, r2, r3
    a0b8:	781b      	ldrb	r3, [r3, #0]
    a0ba:	2b2f      	cmp	r3, #47	; 0x2f
    a0bc:	d931      	bls.n	a122 <m2m_wifi_connect_sc+0xfe>
    a0be:	2396      	movs	r3, #150	; 0x96
    a0c0:	18fb      	adds	r3, r7, r3
    a0c2:	781b      	ldrb	r3, [r3, #0]
    a0c4:	2290      	movs	r2, #144	; 0x90
    a0c6:	18ba      	adds	r2, r7, r2
    a0c8:	6812      	ldr	r2, [r2, #0]
    a0ca:	18d3      	adds	r3, r2, r3
    a0cc:	781b      	ldrb	r3, [r3, #0]
    a0ce:	2b39      	cmp	r3, #57	; 0x39
    a0d0:	d909      	bls.n	a0e6 <m2m_wifi_connect_sc+0xc2>
    a0d2:	2396      	movs	r3, #150	; 0x96
    a0d4:	18fb      	adds	r3, r7, r3
    a0d6:	781b      	ldrb	r3, [r3, #0]
    a0d8:	2290      	movs	r2, #144	; 0x90
    a0da:	18ba      	adds	r2, r7, r2
    a0dc:	6812      	ldr	r2, [r2, #0]
    a0de:	18d3      	adds	r3, r2, r3
    a0e0:	781b      	ldrb	r3, [r3, #0]
    a0e2:	2b40      	cmp	r3, #64	; 0x40
    a0e4:	d91d      	bls.n	a122 <m2m_wifi_connect_sc+0xfe>
    a0e6:	2396      	movs	r3, #150	; 0x96
    a0e8:	18fb      	adds	r3, r7, r3
    a0ea:	781b      	ldrb	r3, [r3, #0]
    a0ec:	2290      	movs	r2, #144	; 0x90
    a0ee:	18ba      	adds	r2, r7, r2
    a0f0:	6812      	ldr	r2, [r2, #0]
    a0f2:	18d3      	adds	r3, r2, r3
    a0f4:	781b      	ldrb	r3, [r3, #0]
    a0f6:	2b46      	cmp	r3, #70	; 0x46
    a0f8:	d909      	bls.n	a10e <m2m_wifi_connect_sc+0xea>
    a0fa:	2396      	movs	r3, #150	; 0x96
    a0fc:	18fb      	adds	r3, r7, r3
    a0fe:	781b      	ldrb	r3, [r3, #0]
    a100:	2290      	movs	r2, #144	; 0x90
    a102:	18ba      	adds	r2, r7, r2
    a104:	6812      	ldr	r2, [r2, #0]
    a106:	18d3      	adds	r3, r2, r3
    a108:	781b      	ldrb	r3, [r3, #0]
    a10a:	2b60      	cmp	r3, #96	; 0x60
    a10c:	d909      	bls.n	a122 <m2m_wifi_connect_sc+0xfe>
    a10e:	2396      	movs	r3, #150	; 0x96
    a110:	18fb      	adds	r3, r7, r3
    a112:	781b      	ldrb	r3, [r3, #0]
    a114:	2290      	movs	r2, #144	; 0x90
    a116:	18ba      	adds	r2, r7, r2
    a118:	6812      	ldr	r2, [r2, #0]
    a11a:	18d3      	adds	r3, r2, r3
    a11c:	781b      	ldrb	r3, [r3, #0]
    a11e:	2b66      	cmp	r3, #102	; 0x66
    a120:	d911      	bls.n	a146 <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    a122:	4ab2      	ldr	r2, [pc, #712]	; (a3ec <m2m_wifi_connect_sc+0x3c8>)
    a124:	49aa      	ldr	r1, [pc, #680]	; (a3d0 <m2m_wifi_connect_sc+0x3ac>)
    a126:	4bab      	ldr	r3, [pc, #684]	; (a3d4 <m2m_wifi_connect_sc+0x3b0>)
    a128:	0018      	movs	r0, r3
    a12a:	4bab      	ldr	r3, [pc, #684]	; (a3d8 <m2m_wifi_connect_sc+0x3b4>)
    a12c:	4798      	blx	r3
    a12e:	4bb0      	ldr	r3, [pc, #704]	; (a3f0 <m2m_wifi_connect_sc+0x3cc>)
    a130:	0018      	movs	r0, r3
    a132:	4bab      	ldr	r3, [pc, #684]	; (a3e0 <m2m_wifi_connect_sc+0x3bc>)
    a134:	4798      	blx	r3
    a136:	200d      	movs	r0, #13
    a138:	4baa      	ldr	r3, [pc, #680]	; (a3e4 <m2m_wifi_connect_sc+0x3c0>)
    a13a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    a13c:	2397      	movs	r3, #151	; 0x97
    a13e:	18fb      	adds	r3, r7, r3
    a140:	22f4      	movs	r2, #244	; 0xf4
    a142:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    a144:	e192      	b.n	a46c <m2m_wifi_connect_sc+0x448>
				}
				i++;
    a146:	2396      	movs	r3, #150	; 0x96
    a148:	18fb      	adds	r3, r7, r3
    a14a:	781a      	ldrb	r2, [r3, #0]
    a14c:	2396      	movs	r3, #150	; 0x96
    a14e:	18fb      	adds	r3, r7, r3
    a150:	3201      	adds	r2, #1
    a152:	701a      	strb	r2, [r3, #0]
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    a154:	2396      	movs	r3, #150	; 0x96
    a156:	18fb      	adds	r3, r7, r3
    a158:	781b      	ldrb	r3, [r3, #0]
    a15a:	2b3f      	cmp	r3, #63	; 0x3f
    a15c:	d9a5      	bls.n	a0aa <m2m_wifi_connect_sc+0x86>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    a15e:	230b      	movs	r3, #11
    a160:	18fb      	adds	r3, r7, r3
    a162:	781b      	ldrb	r3, [r3, #0]
    a164:	2b00      	cmp	r3, #0
    a166:	d004      	beq.n	a172 <m2m_wifi_connect_sc+0x14e>
    a168:	230b      	movs	r3, #11
    a16a:	18fb      	adds	r3, r7, r3
    a16c:	781b      	ldrb	r3, [r3, #0]
    a16e:	2b20      	cmp	r3, #32
    a170:	d911      	bls.n	a196 <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    a172:	4aa0      	ldr	r2, [pc, #640]	; (a3f4 <m2m_wifi_connect_sc+0x3d0>)
    a174:	4996      	ldr	r1, [pc, #600]	; (a3d0 <m2m_wifi_connect_sc+0x3ac>)
    a176:	4b97      	ldr	r3, [pc, #604]	; (a3d4 <m2m_wifi_connect_sc+0x3b0>)
    a178:	0018      	movs	r0, r3
    a17a:	4b97      	ldr	r3, [pc, #604]	; (a3d8 <m2m_wifi_connect_sc+0x3b4>)
    a17c:	4798      	blx	r3
    a17e:	4b9e      	ldr	r3, [pc, #632]	; (a3f8 <m2m_wifi_connect_sc+0x3d4>)
    a180:	0018      	movs	r0, r3
    a182:	4b97      	ldr	r3, [pc, #604]	; (a3e0 <m2m_wifi_connect_sc+0x3bc>)
    a184:	4798      	blx	r3
    a186:	200d      	movs	r0, #13
    a188:	4b96      	ldr	r3, [pc, #600]	; (a3e4 <m2m_wifi_connect_sc+0x3c0>)
    a18a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    a18c:	2397      	movs	r3, #151	; 0x97
    a18e:	18fb      	adds	r3, r7, r3
    a190:	22f4      	movs	r2, #244	; 0xf4
    a192:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    a194:	e16a      	b.n	a46c <m2m_wifi_connect_sc+0x448>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    a196:	23a8      	movs	r3, #168	; 0xa8
    a198:	18fb      	adds	r3, r7, r3
    a19a:	881b      	ldrh	r3, [r3, #0]
    a19c:	2b00      	cmp	r3, #0
    a19e:	d004      	beq.n	a1aa <m2m_wifi_connect_sc+0x186>
    a1a0:	23a8      	movs	r3, #168	; 0xa8
    a1a2:	18fb      	adds	r3, r7, r3
    a1a4:	881b      	ldrh	r3, [r3, #0]
    a1a6:	2b0e      	cmp	r3, #14
    a1a8:	d917      	bls.n	a1da <m2m_wifi_connect_sc+0x1b6>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    a1aa:	23a8      	movs	r3, #168	; 0xa8
    a1ac:	18fb      	adds	r3, r7, r3
    a1ae:	881b      	ldrh	r3, [r3, #0]
    a1b0:	2bff      	cmp	r3, #255	; 0xff
    a1b2:	d012      	beq.n	a1da <m2m_wifi_connect_sc+0x1b6>
		{
			M2M_ERR("CH INVALID\n");
    a1b4:	238d      	movs	r3, #141	; 0x8d
    a1b6:	009a      	lsls	r2, r3, #2
    a1b8:	4985      	ldr	r1, [pc, #532]	; (a3d0 <m2m_wifi_connect_sc+0x3ac>)
    a1ba:	4b86      	ldr	r3, [pc, #536]	; (a3d4 <m2m_wifi_connect_sc+0x3b0>)
    a1bc:	0018      	movs	r0, r3
    a1be:	4b86      	ldr	r3, [pc, #536]	; (a3d8 <m2m_wifi_connect_sc+0x3b4>)
    a1c0:	4798      	blx	r3
    a1c2:	4b8e      	ldr	r3, [pc, #568]	; (a3fc <m2m_wifi_connect_sc+0x3d8>)
    a1c4:	0018      	movs	r0, r3
    a1c6:	4b86      	ldr	r3, [pc, #536]	; (a3e0 <m2m_wifi_connect_sc+0x3bc>)
    a1c8:	4798      	blx	r3
    a1ca:	200d      	movs	r0, #13
    a1cc:	4b85      	ldr	r3, [pc, #532]	; (a3e4 <m2m_wifi_connect_sc+0x3c0>)
    a1ce:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a1d0:	2397      	movs	r3, #151	; 0x97
    a1d2:	18fb      	adds	r3, r7, r3
    a1d4:	22f4      	movs	r2, #244	; 0xf4
    a1d6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a1d8:	e148      	b.n	a46c <m2m_wifi_connect_sc+0x448>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    a1da:	230b      	movs	r3, #11
    a1dc:	18fb      	adds	r3, r7, r3
    a1de:	781a      	ldrb	r2, [r3, #0]
    a1e0:	68f9      	ldr	r1, [r7, #12]
    a1e2:	2314      	movs	r3, #20
    a1e4:	18fb      	adds	r3, r7, r3
    a1e6:	3346      	adds	r3, #70	; 0x46
    a1e8:	0018      	movs	r0, r3
    a1ea:	4b85      	ldr	r3, [pc, #532]	; (a400 <m2m_wifi_connect_sc+0x3dc>)
    a1ec:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    a1ee:	230b      	movs	r3, #11
    a1f0:	18fb      	adds	r3, r7, r3
    a1f2:	781b      	ldrb	r3, [r3, #0]
    a1f4:	2214      	movs	r2, #20
    a1f6:	18ba      	adds	r2, r7, r2
    a1f8:	2146      	movs	r1, #70	; 0x46
    a1fa:	18d3      	adds	r3, r2, r3
    a1fc:	185b      	adds	r3, r3, r1
    a1fe:	2200      	movs	r2, #0
    a200:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    a202:	2314      	movs	r3, #20
    a204:	18fb      	adds	r3, r7, r3
    a206:	22a8      	movs	r2, #168	; 0xa8
    a208:	18ba      	adds	r2, r7, r2
    a20a:	2144      	movs	r1, #68	; 0x44
    a20c:	8812      	ldrh	r2, [r2, #0]
    a20e:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    a210:	23ac      	movs	r3, #172	; 0xac
    a212:	18fb      	adds	r3, r7, r3
    a214:	781b      	ldrb	r3, [r3, #0]
    a216:	1e5a      	subs	r2, r3, #1
    a218:	4193      	sbcs	r3, r2
    a21a:	b2db      	uxtb	r3, r3
    a21c:	0019      	movs	r1, r3
    a21e:	2314      	movs	r3, #20
    a220:	18fb      	adds	r3, r7, r3
    a222:	2267      	movs	r2, #103	; 0x67
    a224:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    a226:	2314      	movs	r3, #20
    a228:	18fb      	adds	r3, r7, r3
    a22a:	228c      	movs	r2, #140	; 0x8c
    a22c:	18ba      	adds	r2, r7, r2
    a22e:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    a230:	238c      	movs	r3, #140	; 0x8c
    a232:	18fb      	adds	r3, r7, r3
    a234:	681b      	ldr	r3, [r3, #0]
    a236:	220a      	movs	r2, #10
    a238:	18ba      	adds	r2, r7, r2
    a23a:	2141      	movs	r1, #65	; 0x41
    a23c:	7812      	ldrb	r2, [r2, #0]
    a23e:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    a240:	230a      	movs	r3, #10
    a242:	18fb      	adds	r3, r7, r3
    a244:	781b      	ldrb	r3, [r3, #0]
    a246:	2b03      	cmp	r3, #3
    a248:	d000      	beq.n	a24c <m2m_wifi_connect_sc+0x228>
    a24a:	e07a      	b.n	a342 <m2m_wifi_connect_sc+0x31e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    a24c:	687b      	ldr	r3, [r7, #4]
    a24e:	2288      	movs	r2, #136	; 0x88
    a250:	18ba      	adds	r2, r7, r2
    a252:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    a254:	238c      	movs	r3, #140	; 0x8c
    a256:	18fb      	adds	r3, r7, r3
    a258:	681b      	ldr	r3, [r3, #0]
    a25a:	2284      	movs	r2, #132	; 0x84
    a25c:	18ba      	adds	r2, r7, r2
    a25e:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    a260:	2388      	movs	r3, #136	; 0x88
    a262:	18fb      	adds	r3, r7, r3
    a264:	681b      	ldr	r3, [r3, #0]
    a266:	781b      	ldrb	r3, [r3, #0]
    a268:	3b01      	subs	r3, #1
    a26a:	b2da      	uxtb	r2, r3
    a26c:	2384      	movs	r3, #132	; 0x84
    a26e:	18fb      	adds	r3, r7, r3
    a270:	681b      	ldr	r3, [r3, #0]
    a272:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    a274:	2384      	movs	r3, #132	; 0x84
    a276:	18fb      	adds	r3, r7, r3
    a278:	681b      	ldr	r3, [r3, #0]
    a27a:	781b      	ldrb	r3, [r3, #0]
    a27c:	2b03      	cmp	r3, #3
    a27e:	d917      	bls.n	a2b0 <m2m_wifi_connect_sc+0x28c>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    a280:	4a60      	ldr	r2, [pc, #384]	; (a404 <m2m_wifi_connect_sc+0x3e0>)
    a282:	4953      	ldr	r1, [pc, #332]	; (a3d0 <m2m_wifi_connect_sc+0x3ac>)
    a284:	4b53      	ldr	r3, [pc, #332]	; (a3d4 <m2m_wifi_connect_sc+0x3b0>)
    a286:	0018      	movs	r0, r3
    a288:	4b53      	ldr	r3, [pc, #332]	; (a3d8 <m2m_wifi_connect_sc+0x3b4>)
    a28a:	4798      	blx	r3
    a28c:	2384      	movs	r3, #132	; 0x84
    a28e:	18fb      	adds	r3, r7, r3
    a290:	681b      	ldr	r3, [r3, #0]
    a292:	781b      	ldrb	r3, [r3, #0]
    a294:	001a      	movs	r2, r3
    a296:	4b5c      	ldr	r3, [pc, #368]	; (a408 <m2m_wifi_connect_sc+0x3e4>)
    a298:	0011      	movs	r1, r2
    a29a:	0018      	movs	r0, r3
    a29c:	4b4e      	ldr	r3, [pc, #312]	; (a3d8 <m2m_wifi_connect_sc+0x3b4>)
    a29e:	4798      	blx	r3
    a2a0:	200d      	movs	r0, #13
    a2a2:	4b50      	ldr	r3, [pc, #320]	; (a3e4 <m2m_wifi_connect_sc+0x3c0>)
    a2a4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a2a6:	2397      	movs	r3, #151	; 0x97
    a2a8:	18fb      	adds	r3, r7, r3
    a2aa:	22f4      	movs	r2, #244	; 0xf4
    a2ac:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a2ae:	e0dd      	b.n	a46c <m2m_wifi_connect_sc+0x448>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    a2b0:	2388      	movs	r3, #136	; 0x88
    a2b2:	18fb      	adds	r3, r7, r3
    a2b4:	681b      	ldr	r3, [r3, #0]
    a2b6:	785b      	ldrb	r3, [r3, #1]
    a2b8:	3b01      	subs	r3, #1
    a2ba:	b2da      	uxtb	r2, r3
    a2bc:	2384      	movs	r3, #132	; 0x84
    a2be:	18fb      	adds	r3, r7, r3
    a2c0:	681b      	ldr	r3, [r3, #0]
    a2c2:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    a2c4:	2384      	movs	r3, #132	; 0x84
    a2c6:	18fb      	adds	r3, r7, r3
    a2c8:	681b      	ldr	r3, [r3, #0]
    a2ca:	785b      	ldrb	r3, [r3, #1]
    a2cc:	2b0a      	cmp	r3, #10
    a2ce:	d01d      	beq.n	a30c <m2m_wifi_connect_sc+0x2e8>
    a2d0:	2384      	movs	r3, #132	; 0x84
    a2d2:	18fb      	adds	r3, r7, r3
    a2d4:	681b      	ldr	r3, [r3, #0]
    a2d6:	785b      	ldrb	r3, [r3, #1]
    a2d8:	2b1a      	cmp	r3, #26
    a2da:	d017      	beq.n	a30c <m2m_wifi_connect_sc+0x2e8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    a2dc:	4a4b      	ldr	r2, [pc, #300]	; (a40c <m2m_wifi_connect_sc+0x3e8>)
    a2de:	493c      	ldr	r1, [pc, #240]	; (a3d0 <m2m_wifi_connect_sc+0x3ac>)
    a2e0:	4b3c      	ldr	r3, [pc, #240]	; (a3d4 <m2m_wifi_connect_sc+0x3b0>)
    a2e2:	0018      	movs	r0, r3
    a2e4:	4b3c      	ldr	r3, [pc, #240]	; (a3d8 <m2m_wifi_connect_sc+0x3b4>)
    a2e6:	4798      	blx	r3
    a2e8:	2384      	movs	r3, #132	; 0x84
    a2ea:	18fb      	adds	r3, r7, r3
    a2ec:	681b      	ldr	r3, [r3, #0]
    a2ee:	785b      	ldrb	r3, [r3, #1]
    a2f0:	001a      	movs	r2, r3
    a2f2:	4b47      	ldr	r3, [pc, #284]	; (a410 <m2m_wifi_connect_sc+0x3ec>)
    a2f4:	0011      	movs	r1, r2
    a2f6:	0018      	movs	r0, r3
    a2f8:	4b37      	ldr	r3, [pc, #220]	; (a3d8 <m2m_wifi_connect_sc+0x3b4>)
    a2fa:	4798      	blx	r3
    a2fc:	200d      	movs	r0, #13
    a2fe:	4b39      	ldr	r3, [pc, #228]	; (a3e4 <m2m_wifi_connect_sc+0x3c0>)
    a300:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a302:	2397      	movs	r3, #151	; 0x97
    a304:	18fb      	adds	r3, r7, r3
    a306:	22f4      	movs	r2, #244	; 0xf4
    a308:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a30a:	e0af      	b.n	a46c <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    a30c:	2384      	movs	r3, #132	; 0x84
    a30e:	18fb      	adds	r3, r7, r3
    a310:	681b      	ldr	r3, [r3, #0]
    a312:	1c98      	adds	r0, r3, #2
    a314:	2388      	movs	r3, #136	; 0x88
    a316:	18fb      	adds	r3, r7, r3
    a318:	681b      	ldr	r3, [r3, #0]
    a31a:	1c99      	adds	r1, r3, #2
    a31c:	2388      	movs	r3, #136	; 0x88
    a31e:	18fb      	adds	r3, r7, r3
    a320:	681b      	ldr	r3, [r3, #0]
    a322:	785b      	ldrb	r3, [r3, #1]
    a324:	001a      	movs	r2, r3
    a326:	4b36      	ldr	r3, [pc, #216]	; (a400 <m2m_wifi_connect_sc+0x3dc>)
    a328:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    a32a:	2388      	movs	r3, #136	; 0x88
    a32c:	18fb      	adds	r3, r7, r3
    a32e:	681b      	ldr	r3, [r3, #0]
    a330:	785b      	ldrb	r3, [r3, #1]
    a332:	001a      	movs	r2, r3
    a334:	2384      	movs	r3, #132	; 0x84
    a336:	18fb      	adds	r3, r7, r3
    a338:	681b      	ldr	r3, [r3, #0]
    a33a:	189b      	adds	r3, r3, r2
    a33c:	2200      	movs	r2, #0
    a33e:	709a      	strb	r2, [r3, #2]
    a340:	e083      	b.n	a44a <m2m_wifi_connect_sc+0x426>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    a342:	230a      	movs	r3, #10
    a344:	18fb      	adds	r3, r7, r3
    a346:	781b      	ldrb	r3, [r3, #0]
    a348:	2b02      	cmp	r3, #2
    a34a:	d130      	bne.n	a3ae <m2m_wifi_connect_sc+0x38a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    a34c:	2382      	movs	r3, #130	; 0x82
    a34e:	18fc      	adds	r4, r7, r3
    a350:	687b      	ldr	r3, [r7, #4]
    a352:	0018      	movs	r0, r3
    a354:	4b24      	ldr	r3, [pc, #144]	; (a3e8 <m2m_wifi_connect_sc+0x3c4>)
    a356:	4798      	blx	r3
    a358:	0003      	movs	r3, r0
    a35a:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    a35c:	2382      	movs	r3, #130	; 0x82
    a35e:	18fb      	adds	r3, r7, r3
    a360:	881b      	ldrh	r3, [r3, #0]
    a362:	2b00      	cmp	r3, #0
    a364:	d004      	beq.n	a370 <m2m_wifi_connect_sc+0x34c>
    a366:	2382      	movs	r3, #130	; 0x82
    a368:	18fb      	adds	r3, r7, r3
    a36a:	881b      	ldrh	r3, [r3, #0]
    a36c:	2b40      	cmp	r3, #64	; 0x40
    a36e:	d911      	bls.n	a394 <m2m_wifi_connect_sc+0x370>
		{
			M2M_ERR("Incorrect PSK key length\n");
    a370:	4a28      	ldr	r2, [pc, #160]	; (a414 <m2m_wifi_connect_sc+0x3f0>)
    a372:	4917      	ldr	r1, [pc, #92]	; (a3d0 <m2m_wifi_connect_sc+0x3ac>)
    a374:	4b17      	ldr	r3, [pc, #92]	; (a3d4 <m2m_wifi_connect_sc+0x3b0>)
    a376:	0018      	movs	r0, r3
    a378:	4b17      	ldr	r3, [pc, #92]	; (a3d8 <m2m_wifi_connect_sc+0x3b4>)
    a37a:	4798      	blx	r3
    a37c:	4b26      	ldr	r3, [pc, #152]	; (a418 <m2m_wifi_connect_sc+0x3f4>)
    a37e:	0018      	movs	r0, r3
    a380:	4b17      	ldr	r3, [pc, #92]	; (a3e0 <m2m_wifi_connect_sc+0x3bc>)
    a382:	4798      	blx	r3
    a384:	200d      	movs	r0, #13
    a386:	4b17      	ldr	r3, [pc, #92]	; (a3e4 <m2m_wifi_connect_sc+0x3c0>)
    a388:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a38a:	2397      	movs	r3, #151	; 0x97
    a38c:	18fb      	adds	r3, r7, r3
    a38e:	22f4      	movs	r2, #244	; 0xf4
    a390:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a392:	e06b      	b.n	a46c <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    a394:	238c      	movs	r3, #140	; 0x8c
    a396:	18fb      	adds	r3, r7, r3
    a398:	6818      	ldr	r0, [r3, #0]
    a39a:	2382      	movs	r3, #130	; 0x82
    a39c:	18fb      	adds	r3, r7, r3
    a39e:	881b      	ldrh	r3, [r3, #0]
    a3a0:	3301      	adds	r3, #1
    a3a2:	001a      	movs	r2, r3
    a3a4:	687b      	ldr	r3, [r7, #4]
    a3a6:	0019      	movs	r1, r3
    a3a8:	4b15      	ldr	r3, [pc, #84]	; (a400 <m2m_wifi_connect_sc+0x3dc>)
    a3aa:	4798      	blx	r3
    a3ac:	e04d      	b.n	a44a <m2m_wifi_connect_sc+0x426>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    a3ae:	230a      	movs	r3, #10
    a3b0:	18fb      	adds	r3, r7, r3
    a3b2:	781b      	ldrb	r3, [r3, #0]
    a3b4:	2b04      	cmp	r3, #4
    a3b6:	d131      	bne.n	a41c <m2m_wifi_connect_sc+0x3f8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    a3b8:	238c      	movs	r3, #140	; 0x8c
    a3ba:	18fb      	adds	r3, r7, r3
    a3bc:	681b      	ldr	r3, [r3, #0]
    a3be:	6879      	ldr	r1, [r7, #4]
    a3c0:	223e      	movs	r2, #62	; 0x3e
    a3c2:	0018      	movs	r0, r3
    a3c4:	4b0e      	ldr	r3, [pc, #56]	; (a400 <m2m_wifi_connect_sc+0x3dc>)
    a3c6:	4798      	blx	r3
    a3c8:	e03f      	b.n	a44a <m2m_wifi_connect_sc+0x426>
    a3ca:	46c0      	nop			; (mov r8, r8)
    a3cc:	00000215 	.word	0x00000215
    a3d0:	0001a2c8 	.word	0x0001a2c8
    a3d4:	00019f24 	.word	0x00019f24
    a3d8:	00018619 	.word	0x00018619
    a3dc:	0001a158 	.word	0x0001a158
    a3e0:	00018739 	.word	0x00018739
    a3e4:	0001864d 	.word	0x0001864d
    a3e8:	00008c65 	.word	0x00008c65
    a3ec:	00000221 	.word	0x00000221
    a3f0:	0001a16c 	.word	0x0001a16c
    a3f4:	0000022b 	.word	0x0000022b
    a3f8:	0001a178 	.word	0x0001a178
    a3fc:	0001a18c 	.word	0x0001a18c
    a400:	00008be9 	.word	0x00008be9
    a404:	0000024b 	.word	0x0000024b
    a408:	0001a198 	.word	0x0001a198
    a40c:	00000252 	.word	0x00000252
    a410:	0001a1b4 	.word	0x0001a1b4
    a414:	00000261 	.word	0x00000261
    a418:	0001a1d0 	.word	0x0001a1d0
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    a41c:	230a      	movs	r3, #10
    a41e:	18fb      	adds	r3, r7, r3
    a420:	781b      	ldrb	r3, [r3, #0]
    a422:	2b01      	cmp	r3, #1
    a424:	d011      	beq.n	a44a <m2m_wifi_connect_sc+0x426>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    a426:	4a15      	ldr	r2, [pc, #84]	; (a47c <m2m_wifi_connect_sc+0x458>)
    a428:	4915      	ldr	r1, [pc, #84]	; (a480 <m2m_wifi_connect_sc+0x45c>)
    a42a:	4b16      	ldr	r3, [pc, #88]	; (a484 <m2m_wifi_connect_sc+0x460>)
    a42c:	0018      	movs	r0, r3
    a42e:	4b16      	ldr	r3, [pc, #88]	; (a488 <m2m_wifi_connect_sc+0x464>)
    a430:	4798      	blx	r3
    a432:	4b16      	ldr	r3, [pc, #88]	; (a48c <m2m_wifi_connect_sc+0x468>)
    a434:	0018      	movs	r0, r3
    a436:	4b16      	ldr	r3, [pc, #88]	; (a490 <m2m_wifi_connect_sc+0x46c>)
    a438:	4798      	blx	r3
    a43a:	200d      	movs	r0, #13
    a43c:	4b15      	ldr	r3, [pc, #84]	; (a494 <m2m_wifi_connect_sc+0x470>)
    a43e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    a440:	2397      	movs	r3, #151	; 0x97
    a442:	18fb      	adds	r3, r7, r3
    a444:	22f4      	movs	r2, #244	; 0xf4
    a446:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    a448:	e010      	b.n	a46c <m2m_wifi_connect_sc+0x448>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    a44a:	2397      	movs	r3, #151	; 0x97
    a44c:	18fc      	adds	r4, r7, r3
    a44e:	2314      	movs	r3, #20
    a450:	18fa      	adds	r2, r7, r3
    a452:	2300      	movs	r3, #0
    a454:	9302      	str	r3, [sp, #8]
    a456:	2300      	movs	r3, #0
    a458:	9301      	str	r3, [sp, #4]
    a45a:	2300      	movs	r3, #0
    a45c:	9300      	str	r3, [sp, #0]
    a45e:	236c      	movs	r3, #108	; 0x6c
    a460:	2128      	movs	r1, #40	; 0x28
    a462:	2001      	movs	r0, #1
    a464:	4d0c      	ldr	r5, [pc, #48]	; (a498 <m2m_wifi_connect_sc+0x474>)
    a466:	47a8      	blx	r5
    a468:	0003      	movs	r3, r0
    a46a:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    a46c:	2397      	movs	r3, #151	; 0x97
    a46e:	18fb      	adds	r3, r7, r3
    a470:	781b      	ldrb	r3, [r3, #0]
    a472:	b25b      	sxtb	r3, r3
}
    a474:	0018      	movs	r0, r3
    a476:	46bd      	mov	sp, r7
    a478:	b026      	add	sp, #152	; 0x98
    a47a:	bdb0      	pop	{r4, r5, r7, pc}
    a47c:	00000271 	.word	0x00000271
    a480:	0001a2c8 	.word	0x0001a2c8
    a484:	00019f24 	.word	0x00019f24
    a488:	00018619 	.word	0x00018619
    a48c:	0001a1ec 	.word	0x0001a1ec
    a490:	00018739 	.word	0x00018739
    a494:	0001864d 	.word	0x0001864d
    a498:	00008ec9 	.word	0x00008ec9

0000a49c <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    a49c:	b580      	push	{r7, lr}
    a49e:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    a4a0:	2300      	movs	r3, #0
}
    a4a2:	0018      	movs	r0, r3
    a4a4:	46bd      	mov	sp, r7
    a4a6:	bd80      	pop	{r7, pc}

0000a4a8 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    a4a8:	b590      	push	{r4, r7, lr}
    a4aa:	b087      	sub	sp, #28
    a4ac:	af00      	add	r7, sp, #0
    a4ae:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    a4b0:	2317      	movs	r3, #23
    a4b2:	18fb      	adds	r3, r7, r3
    a4b4:	2200      	movs	r2, #0
    a4b6:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    a4b8:	687b      	ldr	r3, [r7, #4]
    a4ba:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    a4bc:	693b      	ldr	r3, [r7, #16]
    a4be:	2280      	movs	r2, #128	; 0x80
    a4c0:	0052      	lsls	r2, r2, #1
    a4c2:	4313      	orrs	r3, r2
    a4c4:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    a4c6:	693a      	ldr	r2, [r7, #16]
    a4c8:	23a5      	movs	r3, #165	; 0xa5
    a4ca:	015b      	lsls	r3, r3, #5
    a4cc:	0011      	movs	r1, r2
    a4ce:	0018      	movs	r0, r3
    a4d0:	4b12      	ldr	r3, [pc, #72]	; (a51c <chip_apply_conf+0x74>)
    a4d2:	4798      	blx	r3
		if(val32 != 0) {		
    a4d4:	693b      	ldr	r3, [r7, #16]
    a4d6:	2b00      	cmp	r3, #0
    a4d8:	d018      	beq.n	a50c <chip_apply_conf+0x64>
			uint32 reg = 0;
    a4da:	2300      	movs	r3, #0
    a4dc:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    a4de:	2317      	movs	r3, #23
    a4e0:	18fc      	adds	r4, r7, r3
    a4e2:	230c      	movs	r3, #12
    a4e4:	18fa      	adds	r2, r7, r3
    a4e6:	23a5      	movs	r3, #165	; 0xa5
    a4e8:	015b      	lsls	r3, r3, #5
    a4ea:	0011      	movs	r1, r2
    a4ec:	0018      	movs	r0, r3
    a4ee:	4b0c      	ldr	r3, [pc, #48]	; (a520 <chip_apply_conf+0x78>)
    a4f0:	4798      	blx	r3
    a4f2:	0003      	movs	r3, r0
    a4f4:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    a4f6:	2317      	movs	r3, #23
    a4f8:	18fb      	adds	r3, r7, r3
    a4fa:	781b      	ldrb	r3, [r3, #0]
    a4fc:	b25b      	sxtb	r3, r3
    a4fe:	2b00      	cmp	r3, #0
    a500:	d1e1      	bne.n	a4c6 <chip_apply_conf+0x1e>
				if(reg == val32)
    a502:	68fa      	ldr	r2, [r7, #12]
    a504:	693b      	ldr	r3, [r7, #16]
    a506:	429a      	cmp	r2, r3
    a508:	d002      	beq.n	a510 <chip_apply_conf+0x68>
					break;
			}
		} else {
			break;
		}
	} while(1);
    a50a:	e7dc      	b.n	a4c6 <chip_apply_conf+0x1e>
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
			}
		} else {
			break;
    a50c:	46c0      	nop			; (mov r8, r8)
    a50e:	e000      	b.n	a512 <chip_apply_conf+0x6a>
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
    a510:	46c0      	nop			; (mov r8, r8)
		} else {
			break;
		}
	} while(1);

	return M2M_SUCCESS;
    a512:	2300      	movs	r3, #0
}
    a514:	0018      	movs	r0, r3
    a516:	46bd      	mov	sp, r7
    a518:	b007      	add	sp, #28
    a51a:	bd90      	pop	{r4, r7, pc}
    a51c:	0000acf9 	.word	0x0000acf9
    a520:	0000acd5 	.word	0x0000acd5

0000a524 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    a524:	b590      	push	{r4, r7, lr}
    a526:	b083      	sub	sp, #12
    a528:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    a52a:	2300      	movs	r3, #0
    a52c:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    a52e:	1dfb      	adds	r3, r7, #7
    a530:	2200      	movs	r2, #0
    a532:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    a534:	1dfc      	adds	r4, r7, #7
    a536:	003b      	movs	r3, r7
    a538:	4a24      	ldr	r2, [pc, #144]	; (a5cc <enable_interrupts+0xa8>)
    a53a:	0019      	movs	r1, r3
    a53c:	0010      	movs	r0, r2
    a53e:	4b24      	ldr	r3, [pc, #144]	; (a5d0 <enable_interrupts+0xac>)
    a540:	4798      	blx	r3
    a542:	0003      	movs	r3, r0
    a544:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    a546:	1dfb      	adds	r3, r7, #7
    a548:	781b      	ldrb	r3, [r3, #0]
    a54a:	b25b      	sxtb	r3, r3
    a54c:	2b00      	cmp	r3, #0
    a54e:	d131      	bne.n	a5b4 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    a550:	683b      	ldr	r3, [r7, #0]
    a552:	2280      	movs	r2, #128	; 0x80
    a554:	0052      	lsls	r2, r2, #1
    a556:	4313      	orrs	r3, r2
    a558:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    a55a:	683b      	ldr	r3, [r7, #0]
    a55c:	1dfc      	adds	r4, r7, #7
    a55e:	4a1b      	ldr	r2, [pc, #108]	; (a5cc <enable_interrupts+0xa8>)
    a560:	0019      	movs	r1, r3
    a562:	0010      	movs	r0, r2
    a564:	4b1b      	ldr	r3, [pc, #108]	; (a5d4 <enable_interrupts+0xb0>)
    a566:	4798      	blx	r3
    a568:	0003      	movs	r3, r0
    a56a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    a56c:	1dfb      	adds	r3, r7, #7
    a56e:	781b      	ldrb	r3, [r3, #0]
    a570:	b25b      	sxtb	r3, r3
    a572:	2b00      	cmp	r3, #0
    a574:	d120      	bne.n	a5b8 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    a576:	1dfc      	adds	r4, r7, #7
    a578:	003a      	movs	r2, r7
    a57a:	23d0      	movs	r3, #208	; 0xd0
    a57c:	015b      	lsls	r3, r3, #5
    a57e:	0011      	movs	r1, r2
    a580:	0018      	movs	r0, r3
    a582:	4b13      	ldr	r3, [pc, #76]	; (a5d0 <enable_interrupts+0xac>)
    a584:	4798      	blx	r3
    a586:	0003      	movs	r3, r0
    a588:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    a58a:	1dfb      	adds	r3, r7, #7
    a58c:	781b      	ldrb	r3, [r3, #0]
    a58e:	b25b      	sxtb	r3, r3
    a590:	2b00      	cmp	r3, #0
    a592:	d113      	bne.n	a5bc <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    a594:	683b      	ldr	r3, [r7, #0]
    a596:	2280      	movs	r2, #128	; 0x80
    a598:	0252      	lsls	r2, r2, #9
    a59a:	4313      	orrs	r3, r2
    a59c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    a59e:	683a      	ldr	r2, [r7, #0]
    a5a0:	1dfc      	adds	r4, r7, #7
    a5a2:	23d0      	movs	r3, #208	; 0xd0
    a5a4:	015b      	lsls	r3, r3, #5
    a5a6:	0011      	movs	r1, r2
    a5a8:	0018      	movs	r0, r3
    a5aa:	4b0a      	ldr	r3, [pc, #40]	; (a5d4 <enable_interrupts+0xb0>)
    a5ac:	4798      	blx	r3
    a5ae:	0003      	movs	r3, r0
    a5b0:	7023      	strb	r3, [r4, #0]
    a5b2:	e004      	b.n	a5be <enable_interrupts+0x9a>
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) goto ERR1;
    a5b4:	46c0      	nop			; (mov r8, r8)
    a5b6:	e002      	b.n	a5be <enable_interrupts+0x9a>
	
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
    a5b8:	46c0      	nop			; (mov r8, r8)
    a5ba:	e000      	b.n	a5be <enable_interrupts+0x9a>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) goto ERR1;
    a5bc:	46c0      	nop			; (mov r8, r8)
	
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    a5be:	1dfb      	adds	r3, r7, #7
    a5c0:	781b      	ldrb	r3, [r3, #0]
    a5c2:	b25b      	sxtb	r3, r3
}
    a5c4:	0018      	movs	r0, r3
    a5c6:	46bd      	mov	sp, r7
    a5c8:	b003      	add	sp, #12
    a5ca:	bd90      	pop	{r4, r7, pc}
    a5cc:	00001408 	.word	0x00001408
    a5d0:	0000acd5 	.word	0x0000acd5
    a5d4:	0000acf9 	.word	0x0000acf9

0000a5d8 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    a5d8:	b580      	push	{r7, lr}
    a5da:	b082      	sub	sp, #8
    a5dc:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    a5de:	4b32      	ldr	r3, [pc, #200]	; (a6a8 <nmi_get_chipid+0xd0>)
    a5e0:	681b      	ldr	r3, [r3, #0]
    a5e2:	2b00      	cmp	r3, #0
    a5e4:	d159      	bne.n	a69a <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    a5e6:	4a30      	ldr	r2, [pc, #192]	; (a6a8 <nmi_get_chipid+0xd0>)
    a5e8:	2380      	movs	r3, #128	; 0x80
    a5ea:	015b      	lsls	r3, r3, #5
    a5ec:	0011      	movs	r1, r2
    a5ee:	0018      	movs	r0, r3
    a5f0:	4b2e      	ldr	r3, [pc, #184]	; (a6ac <nmi_get_chipid+0xd4>)
    a5f2:	4798      	blx	r3
    a5f4:	1e03      	subs	r3, r0, #0
    a5f6:	d004      	beq.n	a602 <nmi_get_chipid+0x2a>
			chipid = 0;
    a5f8:	4b2b      	ldr	r3, [pc, #172]	; (a6a8 <nmi_get_chipid+0xd0>)
    a5fa:	2200      	movs	r2, #0
    a5fc:	601a      	str	r2, [r3, #0]
			return 0;
    a5fe:	2300      	movs	r3, #0
    a600:	e04d      	b.n	a69e <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    a602:	1d3b      	adds	r3, r7, #4
    a604:	4a2a      	ldr	r2, [pc, #168]	; (a6b0 <nmi_get_chipid+0xd8>)
    a606:	0019      	movs	r1, r3
    a608:	0010      	movs	r0, r2
    a60a:	4b28      	ldr	r3, [pc, #160]	; (a6ac <nmi_get_chipid+0xd4>)
    a60c:	4798      	blx	r3
    a60e:	1e03      	subs	r3, r0, #0
    a610:	d004      	beq.n	a61c <nmi_get_chipid+0x44>
			chipid = 0;
    a612:	4b25      	ldr	r3, [pc, #148]	; (a6a8 <nmi_get_chipid+0xd0>)
    a614:	2200      	movs	r2, #0
    a616:	601a      	str	r2, [r3, #0]
			return 0;
    a618:	2300      	movs	r3, #0
    a61a:	e040      	b.n	a69e <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    a61c:	4b22      	ldr	r3, [pc, #136]	; (a6a8 <nmi_get_chipid+0xd0>)
    a61e:	681b      	ldr	r3, [r3, #0]
    a620:	4a24      	ldr	r2, [pc, #144]	; (a6b4 <nmi_get_chipid+0xdc>)
    a622:	4293      	cmp	r3, r2
    a624:	d106      	bne.n	a634 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    a626:	687b      	ldr	r3, [r7, #4]
    a628:	2b01      	cmp	r3, #1
    a62a:	d029      	beq.n	a680 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    a62c:	4b1e      	ldr	r3, [pc, #120]	; (a6a8 <nmi_get_chipid+0xd0>)
    a62e:	4a22      	ldr	r2, [pc, #136]	; (a6b8 <nmi_get_chipid+0xe0>)
    a630:	601a      	str	r2, [r3, #0]
    a632:	e025      	b.n	a680 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    a634:	4b1c      	ldr	r3, [pc, #112]	; (a6a8 <nmi_get_chipid+0xd0>)
    a636:	681b      	ldr	r3, [r3, #0]
    a638:	4a20      	ldr	r2, [pc, #128]	; (a6bc <nmi_get_chipid+0xe4>)
    a63a:	4293      	cmp	r3, r2
    a63c:	d10d      	bne.n	a65a <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    a63e:	687b      	ldr	r3, [r7, #4]
    a640:	2b03      	cmp	r3, #3
    a642:	d01d      	beq.n	a680 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    a644:	687b      	ldr	r3, [r7, #4]
    a646:	2b04      	cmp	r3, #4
    a648:	d103      	bne.n	a652 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    a64a:	4b17      	ldr	r3, [pc, #92]	; (a6a8 <nmi_get_chipid+0xd0>)
    a64c:	4a1c      	ldr	r2, [pc, #112]	; (a6c0 <nmi_get_chipid+0xe8>)
    a64e:	601a      	str	r2, [r3, #0]
    a650:	e016      	b.n	a680 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    a652:	4b15      	ldr	r3, [pc, #84]	; (a6a8 <nmi_get_chipid+0xd0>)
    a654:	4a1b      	ldr	r2, [pc, #108]	; (a6c4 <nmi_get_chipid+0xec>)
    a656:	601a      	str	r2, [r3, #0]
    a658:	e012      	b.n	a680 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    a65a:	4b13      	ldr	r3, [pc, #76]	; (a6a8 <nmi_get_chipid+0xd0>)
    a65c:	681b      	ldr	r3, [r3, #0]
    a65e:	4a1a      	ldr	r2, [pc, #104]	; (a6c8 <nmi_get_chipid+0xf0>)
    a660:	4293      	cmp	r3, r2
    a662:	d10d      	bne.n	a680 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    a664:	4a10      	ldr	r2, [pc, #64]	; (a6a8 <nmi_get_chipid+0xd0>)
    a666:	23ec      	movs	r3, #236	; 0xec
    a668:	039b      	lsls	r3, r3, #14
    a66a:	0011      	movs	r1, r2
    a66c:	0018      	movs	r0, r3
    a66e:	4b0f      	ldr	r3, [pc, #60]	; (a6ac <nmi_get_chipid+0xd4>)
    a670:	4798      	blx	r3
    a672:	1e03      	subs	r3, r0, #0
    a674:	d004      	beq.n	a680 <nmi_get_chipid+0xa8>
			chipid = 0;
    a676:	4b0c      	ldr	r3, [pc, #48]	; (a6a8 <nmi_get_chipid+0xd0>)
    a678:	2200      	movs	r2, #0
    a67a:	601a      	str	r2, [r3, #0]
			return 0;
    a67c:	2300      	movs	r3, #0
    a67e:	e00e      	b.n	a69e <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    a680:	4b09      	ldr	r3, [pc, #36]	; (a6a8 <nmi_get_chipid+0xd0>)
    a682:	681b      	ldr	r3, [r3, #0]
    a684:	4a11      	ldr	r2, [pc, #68]	; (a6cc <nmi_get_chipid+0xf4>)
    a686:	401a      	ands	r2, r3
    a688:	4b07      	ldr	r3, [pc, #28]	; (a6a8 <nmi_get_chipid+0xd0>)
    a68a:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    a68c:	4b06      	ldr	r3, [pc, #24]	; (a6a8 <nmi_get_chipid+0xd0>)
    a68e:	681b      	ldr	r3, [r3, #0]
    a690:	22a0      	movs	r2, #160	; 0xa0
    a692:	02d2      	lsls	r2, r2, #11
    a694:	431a      	orrs	r2, r3
    a696:	4b04      	ldr	r3, [pc, #16]	; (a6a8 <nmi_get_chipid+0xd0>)
    a698:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    a69a:	4b03      	ldr	r3, [pc, #12]	; (a6a8 <nmi_get_chipid+0xd0>)
    a69c:	681b      	ldr	r3, [r3, #0]
}
    a69e:	0018      	movs	r0, r3
    a6a0:	46bd      	mov	sp, r7
    a6a2:	b002      	add	sp, #8
    a6a4:	bd80      	pop	{r7, pc}
    a6a6:	46c0      	nop			; (mov r8, r8)
    a6a8:	200000bc 	.word	0x200000bc
    a6ac:	0000acd5 	.word	0x0000acd5
    a6b0:	000013f4 	.word	0x000013f4
    a6b4:	001002a0 	.word	0x001002a0
    a6b8:	001002a1 	.word	0x001002a1
    a6bc:	001002b0 	.word	0x001002b0
    a6c0:	001002b1 	.word	0x001002b1
    a6c4:	001002b2 	.word	0x001002b2
    a6c8:	001000f0 	.word	0x001000f0
    a6cc:	fff0ffff 	.word	0xfff0ffff

0000a6d0 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    a6d0:	b590      	push	{r4, r7, lr}
    a6d2:	b083      	sub	sp, #12
    a6d4:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    a6d6:	1dfb      	adds	r3, r7, #7
    a6d8:	2200      	movs	r2, #0
    a6da:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    a6dc:	1dfc      	adds	r4, r7, #7
    a6de:	003b      	movs	r3, r7
    a6e0:	0019      	movs	r1, r3
    a6e2:	2010      	movs	r0, #16
    a6e4:	4b2e      	ldr	r3, [pc, #184]	; (a7a0 <chip_sleep+0xd0>)
    a6e6:	4798      	blx	r3
    a6e8:	0003      	movs	r3, r0
    a6ea:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    a6ec:	1dfb      	adds	r3, r7, #7
    a6ee:	781b      	ldrb	r3, [r3, #0]
    a6f0:	b25b      	sxtb	r3, r3
    a6f2:	2b00      	cmp	r3, #0
    a6f4:	d145      	bne.n	a782 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    a6f6:	683b      	ldr	r3, [r7, #0]
    a6f8:	2201      	movs	r2, #1
    a6fa:	4013      	ands	r3, r2
    a6fc:	d000      	beq.n	a700 <chip_sleep+0x30>
	}
    a6fe:	e7ed      	b.n	a6dc <chip_sleep+0xc>
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    a700:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    a702:	1dfc      	adds	r4, r7, #7
    a704:	003b      	movs	r3, r7
    a706:	0019      	movs	r1, r3
    a708:	2001      	movs	r0, #1
    a70a:	4b25      	ldr	r3, [pc, #148]	; (a7a0 <chip_sleep+0xd0>)
    a70c:	4798      	blx	r3
    a70e:	0003      	movs	r3, r0
    a710:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    a712:	1dfb      	adds	r3, r7, #7
    a714:	781b      	ldrb	r3, [r3, #0]
    a716:	b25b      	sxtb	r3, r3
    a718:	2b00      	cmp	r3, #0
    a71a:	d134      	bne.n	a786 <chip_sleep+0xb6>
	if(reg & NBIT1)
    a71c:	683b      	ldr	r3, [r7, #0]
    a71e:	2202      	movs	r2, #2
    a720:	4013      	ands	r3, r2
    a722:	d010      	beq.n	a746 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    a724:	683b      	ldr	r3, [r7, #0]
    a726:	2202      	movs	r2, #2
    a728:	4393      	bics	r3, r2
    a72a:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    a72c:	683b      	ldr	r3, [r7, #0]
    a72e:	1dfc      	adds	r4, r7, #7
    a730:	0019      	movs	r1, r3
    a732:	2001      	movs	r0, #1
    a734:	4b1b      	ldr	r3, [pc, #108]	; (a7a4 <chip_sleep+0xd4>)
    a736:	4798      	blx	r3
    a738:	0003      	movs	r3, r0
    a73a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    a73c:	1dfb      	adds	r3, r7, #7
    a73e:	781b      	ldrb	r3, [r3, #0]
    a740:	b25b      	sxtb	r3, r3
    a742:	2b00      	cmp	r3, #0
    a744:	d121      	bne.n	a78a <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    a746:	1dfc      	adds	r4, r7, #7
    a748:	003b      	movs	r3, r7
    a74a:	0019      	movs	r1, r3
    a74c:	200b      	movs	r0, #11
    a74e:	4b14      	ldr	r3, [pc, #80]	; (a7a0 <chip_sleep+0xd0>)
    a750:	4798      	blx	r3
    a752:	0003      	movs	r3, r0
    a754:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    a756:	1dfb      	adds	r3, r7, #7
    a758:	781b      	ldrb	r3, [r3, #0]
    a75a:	b25b      	sxtb	r3, r3
    a75c:	2b00      	cmp	r3, #0
    a75e:	d116      	bne.n	a78e <chip_sleep+0xbe>
	if(reg & NBIT0)
    a760:	683b      	ldr	r3, [r7, #0]
    a762:	2201      	movs	r2, #1
    a764:	4013      	ands	r3, r2
    a766:	d013      	beq.n	a790 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    a768:	683b      	ldr	r3, [r7, #0]
    a76a:	2201      	movs	r2, #1
    a76c:	4393      	bics	r3, r2
    a76e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    a770:	683b      	ldr	r3, [r7, #0]
    a772:	1dfc      	adds	r4, r7, #7
    a774:	0019      	movs	r1, r3
    a776:	200b      	movs	r0, #11
    a778:	4b0a      	ldr	r3, [pc, #40]	; (a7a4 <chip_sleep+0xd4>)
    a77a:	4798      	blx	r3
    a77c:	0003      	movs	r3, r0
    a77e:	7023      	strb	r3, [r4, #0]
    a780:	e006      	b.n	a790 <chip_sleep+0xc0>
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
		if(ret != M2M_SUCCESS) goto ERR1;
    a782:	46c0      	nop			; (mov r8, r8)
    a784:	e004      	b.n	a790 <chip_sleep+0xc0>
		if((reg & NBIT0) == 0) break;
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    a786:	46c0      	nop			; (mov r8, r8)
    a788:	e002      	b.n	a790 <chip_sleep+0xc0>
	if(reg & NBIT1)
	{
		reg &=~NBIT1;
		ret = nm_write_reg(WAKE_CLK_REG, reg);
		if(ret != M2M_SUCCESS)goto ERR1;
    a78a:	46c0      	nop			; (mov r8, r8)
    a78c:	e000      	b.n	a790 <chip_sleep+0xc0>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    a78e:	46c0      	nop			; (mov r8, r8)
		ret = nm_write_reg(HOST_CORT_COMM, reg);
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    a790:	1dfb      	adds	r3, r7, #7
    a792:	781b      	ldrb	r3, [r3, #0]
    a794:	b25b      	sxtb	r3, r3
}
    a796:	0018      	movs	r0, r3
    a798:	46bd      	mov	sp, r7
    a79a:	b003      	add	sp, #12
    a79c:	bd90      	pop	{r4, r7, pc}
    a79e:	46c0      	nop			; (mov r8, r8)
    a7a0:	0000acd5 	.word	0x0000acd5
    a7a4:	0000acf9 	.word	0x0000acf9

0000a7a8 <chip_wake>:
sint8 chip_wake(void)
{
    a7a8:	b590      	push	{r4, r7, lr}
    a7aa:	b085      	sub	sp, #20
    a7ac:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    a7ae:	230f      	movs	r3, #15
    a7b0:	18fb      	adds	r3, r7, r3
    a7b2:	2200      	movs	r2, #0
    a7b4:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    a7b6:	2300      	movs	r3, #0
    a7b8:	607b      	str	r3, [r7, #4]
    a7ba:	2300      	movs	r3, #0
    a7bc:	603b      	str	r3, [r7, #0]
    a7be:	2300      	movs	r3, #0
    a7c0:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    a7c2:	230f      	movs	r3, #15
    a7c4:	18fc      	adds	r4, r7, r3
    a7c6:	1d3b      	adds	r3, r7, #4
    a7c8:	0019      	movs	r1, r3
    a7ca:	200b      	movs	r0, #11
    a7cc:	4b4c      	ldr	r3, [pc, #304]	; (a900 <chip_wake+0x158>)
    a7ce:	4798      	blx	r3
    a7d0:	0003      	movs	r3, r0
    a7d2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a7d4:	230f      	movs	r3, #15
    a7d6:	18fb      	adds	r3, r7, r3
    a7d8:	781b      	ldrb	r3, [r3, #0]
    a7da:	b25b      	sxtb	r3, r3
    a7dc:	2b00      	cmp	r3, #0
    a7de:	d000      	beq.n	a7e2 <chip_wake+0x3a>
    a7e0:	e07f      	b.n	a8e2 <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    a7e2:	687b      	ldr	r3, [r7, #4]
    a7e4:	2201      	movs	r2, #1
    a7e6:	4013      	ands	r3, r2
    a7e8:	d110      	bne.n	a80c <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    a7ea:	687b      	ldr	r3, [r7, #4]
    a7ec:	2201      	movs	r2, #1
    a7ee:	4313      	orrs	r3, r2
    a7f0:	220f      	movs	r2, #15
    a7f2:	18bc      	adds	r4, r7, r2
    a7f4:	0019      	movs	r1, r3
    a7f6:	200b      	movs	r0, #11
    a7f8:	4b42      	ldr	r3, [pc, #264]	; (a904 <chip_wake+0x15c>)
    a7fa:	4798      	blx	r3
    a7fc:	0003      	movs	r3, r0
    a7fe:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a800:	230f      	movs	r3, #15
    a802:	18fb      	adds	r3, r7, r3
    a804:	781b      	ldrb	r3, [r3, #0]
    a806:	b25b      	sxtb	r3, r3
    a808:	2b00      	cmp	r3, #0
    a80a:	d16c      	bne.n	a8e6 <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    a80c:	230f      	movs	r3, #15
    a80e:	18fc      	adds	r4, r7, r3
    a810:	1d3b      	adds	r3, r7, #4
    a812:	0019      	movs	r1, r3
    a814:	2001      	movs	r0, #1
    a816:	4b3a      	ldr	r3, [pc, #232]	; (a900 <chip_wake+0x158>)
    a818:	4798      	blx	r3
    a81a:	0003      	movs	r3, r0
    a81c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a81e:	230f      	movs	r3, #15
    a820:	18fb      	adds	r3, r7, r3
    a822:	781b      	ldrb	r3, [r3, #0]
    a824:	b25b      	sxtb	r3, r3
    a826:	2b00      	cmp	r3, #0
    a828:	d15f      	bne.n	a8ea <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    a82a:	687b      	ldr	r3, [r7, #4]
    a82c:	2202      	movs	r2, #2
    a82e:	4013      	ands	r3, r2
    a830:	d110      	bne.n	a854 <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    a832:	687b      	ldr	r3, [r7, #4]
    a834:	2202      	movs	r2, #2
    a836:	4313      	orrs	r3, r2
    a838:	220f      	movs	r2, #15
    a83a:	18bc      	adds	r4, r7, r2
    a83c:	0019      	movs	r1, r3
    a83e:	2001      	movs	r0, #1
    a840:	4b30      	ldr	r3, [pc, #192]	; (a904 <chip_wake+0x15c>)
    a842:	4798      	blx	r3
    a844:	0003      	movs	r3, r0
    a846:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    a848:	230f      	movs	r3, #15
    a84a:	18fb      	adds	r3, r7, r3
    a84c:	781b      	ldrb	r3, [r3, #0]
    a84e:	b25b      	sxtb	r3, r3
    a850:	2b00      	cmp	r3, #0
    a852:	d14c      	bne.n	a8ee <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    a854:	230f      	movs	r3, #15
    a856:	18fc      	adds	r4, r7, r3
    a858:	003b      	movs	r3, r7
    a85a:	0019      	movs	r1, r3
    a85c:	200f      	movs	r0, #15
    a85e:	4b28      	ldr	r3, [pc, #160]	; (a900 <chip_wake+0x158>)
    a860:	4798      	blx	r3
    a862:	0003      	movs	r3, r0
    a864:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    a866:	230f      	movs	r3, #15
    a868:	18fb      	adds	r3, r7, r3
    a86a:	781b      	ldrb	r3, [r3, #0]
    a86c:	b25b      	sxtb	r3, r3
    a86e:	2b00      	cmp	r3, #0
    a870:	d013      	beq.n	a89a <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    a872:	23aa      	movs	r3, #170	; 0xaa
    a874:	005a      	lsls	r2, r3, #1
    a876:	4924      	ldr	r1, [pc, #144]	; (a908 <chip_wake+0x160>)
    a878:	4b24      	ldr	r3, [pc, #144]	; (a90c <chip_wake+0x164>)
    a87a:	0018      	movs	r0, r3
    a87c:	4b24      	ldr	r3, [pc, #144]	; (a910 <chip_wake+0x168>)
    a87e:	4798      	blx	r3
    a880:	230f      	movs	r3, #15
    a882:	18fb      	adds	r3, r7, r3
    a884:	2100      	movs	r1, #0
    a886:	5659      	ldrsb	r1, [r3, r1]
    a888:	683a      	ldr	r2, [r7, #0]
    a88a:	4b22      	ldr	r3, [pc, #136]	; (a914 <chip_wake+0x16c>)
    a88c:	0018      	movs	r0, r3
    a88e:	4b20      	ldr	r3, [pc, #128]	; (a910 <chip_wake+0x168>)
    a890:	4798      	blx	r3
    a892:	200d      	movs	r0, #13
    a894:	4b20      	ldr	r3, [pc, #128]	; (a918 <chip_wake+0x170>)
    a896:	4798      	blx	r3
			goto _WAKE_EXIT;
    a898:	e02a      	b.n	a8f0 <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    a89a:	683b      	ldr	r3, [r7, #0]
    a89c:	2204      	movs	r2, #4
    a89e:	4013      	ands	r3, r2
    a8a0:	d11b      	bne.n	a8da <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    a8a2:	2002      	movs	r0, #2
    a8a4:	4b1d      	ldr	r3, [pc, #116]	; (a91c <chip_wake+0x174>)
    a8a6:	4798      	blx	r3
		trials++;
    a8a8:	68bb      	ldr	r3, [r7, #8]
    a8aa:	3301      	adds	r3, #1
    a8ac:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    a8ae:	68bb      	ldr	r3, [r7, #8]
    a8b0:	2b04      	cmp	r3, #4
    a8b2:	d9cf      	bls.n	a854 <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    a8b4:	23af      	movs	r3, #175	; 0xaf
    a8b6:	005a      	lsls	r2, r3, #1
    a8b8:	4913      	ldr	r1, [pc, #76]	; (a908 <chip_wake+0x160>)
    a8ba:	4b14      	ldr	r3, [pc, #80]	; (a90c <chip_wake+0x164>)
    a8bc:	0018      	movs	r0, r3
    a8be:	4b14      	ldr	r3, [pc, #80]	; (a910 <chip_wake+0x168>)
    a8c0:	4798      	blx	r3
    a8c2:	4b17      	ldr	r3, [pc, #92]	; (a920 <chip_wake+0x178>)
    a8c4:	0018      	movs	r0, r3
    a8c6:	4b17      	ldr	r3, [pc, #92]	; (a924 <chip_wake+0x17c>)
    a8c8:	4798      	blx	r3
    a8ca:	200d      	movs	r0, #13
    a8cc:	4b12      	ldr	r3, [pc, #72]	; (a918 <chip_wake+0x170>)
    a8ce:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    a8d0:	230f      	movs	r3, #15
    a8d2:	18fb      	adds	r3, r7, r3
    a8d4:	22fc      	movs	r2, #252	; 0xfc
    a8d6:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    a8d8:	e00a      	b.n	a8f0 <chip_wake+0x148>
		if(ret != M2M_SUCCESS) {
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
    a8da:	46c0      	nop			; (mov r8, r8)
			goto _WAKE_EXIT;
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    a8dc:	4b12      	ldr	r3, [pc, #72]	; (a928 <chip_wake+0x180>)
    a8de:	4798      	blx	r3
    a8e0:	e006      	b.n	a8f0 <chip_wake+0x148>
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a8e2:	46c0      	nop			; (mov r8, r8)
    a8e4:	e004      	b.n	a8f0 <chip_wake+0x148>
	
	if(!(reg & NBIT0))
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a8e6:	46c0      	nop			; (mov r8, r8)
    a8e8:	e002      	b.n	a8f0 <chip_wake+0x148>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a8ea:	46c0      	nop			; (mov r8, r8)
    a8ec:	e000      	b.n	a8f0 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    a8ee:	46c0      	nop			; (mov r8, r8)
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
    a8f0:	230f      	movs	r3, #15
    a8f2:	18fb      	adds	r3, r7, r3
    a8f4:	781b      	ldrb	r3, [r3, #0]
    a8f6:	b25b      	sxtb	r3, r3
}
    a8f8:	0018      	movs	r0, r3
    a8fa:	46bd      	mov	sp, r7
    a8fc:	b005      	add	sp, #20
    a8fe:	bd90      	pop	{r4, r7, pc}
    a900:	0000acd5 	.word	0x0000acd5
    a904:	0000acf9 	.word	0x0000acf9
    a908:	0001a360 	.word	0x0001a360
    a90c:	0001a2dc 	.word	0x0001a2dc
    a910:	00018619 	.word	0x00018619
    a914:	0001a2f0 	.word	0x0001a2f0
    a918:	0001864d 	.word	0x0001864d
    a91c:	00008335 	.word	0x00008335
    a920:	0001a308 	.word	0x0001a308
    a924:	00018739 	.word	0x00018739
    a928:	0000ac95 	.word	0x0000ac95

0000a92c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    a92c:	b580      	push	{r7, lr}
    a92e:	b088      	sub	sp, #32
    a930:	af00      	add	r7, sp, #0
    a932:	0002      	movs	r2, r0
    a934:	1dfb      	adds	r3, r7, #7
    a936:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    a938:	2313      	movs	r3, #19
    a93a:	18fb      	adds	r3, r7, r3
    a93c:	2200      	movs	r2, #0
    a93e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    a940:	2300      	movs	r3, #0
    a942:	61fb      	str	r3, [r7, #28]
    a944:	2300      	movs	r3, #0
    a946:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    a948:	2300      	movs	r3, #0
    a94a:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    a94c:	4b4a      	ldr	r3, [pc, #296]	; (aa78 <wait_for_bootrom+0x14c>)
    a94e:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    a950:	2300      	movs	r3, #0
    a952:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    a954:	4b49      	ldr	r3, [pc, #292]	; (aa7c <wait_for_bootrom+0x150>)
    a956:	0018      	movs	r0, r3
    a958:	4b49      	ldr	r3, [pc, #292]	; (aa80 <wait_for_bootrom+0x154>)
    a95a:	4798      	blx	r3
    a95c:	0003      	movs	r3, r0
    a95e:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    a960:	69fb      	ldr	r3, [r7, #28]
    a962:	2b00      	cmp	r3, #0
    a964:	db03      	blt.n	a96e <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    a966:	2001      	movs	r0, #1
    a968:	4b46      	ldr	r3, [pc, #280]	; (aa84 <wait_for_bootrom+0x158>)
    a96a:	4798      	blx	r3
	}
    a96c:	e7f2      	b.n	a954 <wait_for_bootrom+0x28>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
    a96e:	46c0      	nop			; (mov r8, r8)
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    a970:	4b45      	ldr	r3, [pc, #276]	; (aa88 <wait_for_bootrom+0x15c>)
    a972:	0018      	movs	r0, r3
    a974:	4b42      	ldr	r3, [pc, #264]	; (aa80 <wait_for_bootrom+0x154>)
    a976:	4798      	blx	r3
    a978:	0003      	movs	r3, r0
    a97a:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    a97c:	69fb      	ldr	r3, [r7, #28]
    a97e:	2201      	movs	r2, #1
    a980:	4013      	ands	r3, r2
    a982:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    a984:	69fb      	ldr	r3, [r7, #28]
    a986:	2b00      	cmp	r3, #0
    a988:	d112      	bne.n	a9b0 <wait_for_bootrom+0x84>
	{
		reg = 0;
    a98a:	2300      	movs	r3, #0
    a98c:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    a98e:	e00b      	b.n	a9a8 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    a990:	2001      	movs	r0, #1
    a992:	4b3c      	ldr	r3, [pc, #240]	; (aa84 <wait_for_bootrom+0x158>)
    a994:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    a996:	4b3d      	ldr	r3, [pc, #244]	; (aa8c <wait_for_bootrom+0x160>)
    a998:	0018      	movs	r0, r3
    a99a:	4b39      	ldr	r3, [pc, #228]	; (aa80 <wait_for_bootrom+0x154>)
    a99c:	4798      	blx	r3
    a99e:	0003      	movs	r3, r0
    a9a0:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    a9a2:	69bb      	ldr	r3, [r7, #24]
    a9a4:	3301      	adds	r3, #1
    a9a6:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    a9a8:	69fb      	ldr	r3, [r7, #28]
    a9aa:	4a39      	ldr	r2, [pc, #228]	; (aa90 <wait_for_bootrom+0x164>)
    a9ac:	4293      	cmp	r3, r2
    a9ae:	d1ef      	bne.n	a990 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    a9b0:	1dfb      	adds	r3, r7, #7
    a9b2:	781b      	ldrb	r3, [r3, #0]
    a9b4:	2b02      	cmp	r3, #2
    a9b6:	d10d      	bne.n	a9d4 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    a9b8:	4a36      	ldr	r2, [pc, #216]	; (aa94 <wait_for_bootrom+0x168>)
    a9ba:	4b37      	ldr	r3, [pc, #220]	; (aa98 <wait_for_bootrom+0x16c>)
    a9bc:	0011      	movs	r1, r2
    a9be:	0018      	movs	r0, r3
    a9c0:	4b36      	ldr	r3, [pc, #216]	; (aa9c <wait_for_bootrom+0x170>)
    a9c2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    a9c4:	2380      	movs	r3, #128	; 0x80
    a9c6:	035b      	lsls	r3, r3, #13
    a9c8:	4a35      	ldr	r2, [pc, #212]	; (aaa0 <wait_for_bootrom+0x174>)
    a9ca:	0019      	movs	r1, r3
    a9cc:	0010      	movs	r0, r2
    a9ce:	4b33      	ldr	r3, [pc, #204]	; (aa9c <wait_for_bootrom+0x170>)
    a9d0:	4798      	blx	r3
    a9d2:	e022      	b.n	aa1a <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    a9d4:	1dfb      	adds	r3, r7, #7
    a9d6:	781b      	ldrb	r3, [r3, #0]
    a9d8:	2b03      	cmp	r3, #3
    a9da:	d10b      	bne.n	a9f4 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    a9dc:	4a2d      	ldr	r2, [pc, #180]	; (aa94 <wait_for_bootrom+0x168>)
    a9de:	4b2e      	ldr	r3, [pc, #184]	; (aa98 <wait_for_bootrom+0x16c>)
    a9e0:	0011      	movs	r1, r2
    a9e2:	0018      	movs	r0, r3
    a9e4:	4b2d      	ldr	r3, [pc, #180]	; (aa9c <wait_for_bootrom+0x170>)
    a9e6:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    a9e8:	4b2d      	ldr	r3, [pc, #180]	; (aaa0 <wait_for_bootrom+0x174>)
    a9ea:	2100      	movs	r1, #0
    a9ec:	0018      	movs	r0, r3
    a9ee:	4b2b      	ldr	r3, [pc, #172]	; (aa9c <wait_for_bootrom+0x170>)
    a9f0:	4798      	blx	r3
    a9f2:	e012      	b.n	aa1a <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    a9f4:	1dfb      	adds	r3, r7, #7
    a9f6:	781b      	ldrb	r3, [r3, #0]
    a9f8:	2b04      	cmp	r3, #4
    a9fa:	d108      	bne.n	aa0e <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    a9fc:	2380      	movs	r3, #128	; 0x80
    a9fe:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    aa00:	68fb      	ldr	r3, [r7, #12]
    aa02:	4a27      	ldr	r2, [pc, #156]	; (aaa0 <wait_for_bootrom+0x174>)
    aa04:	0019      	movs	r1, r3
    aa06:	0010      	movs	r0, r2
    aa08:	4b24      	ldr	r3, [pc, #144]	; (aa9c <wait_for_bootrom+0x170>)
    aa0a:	4798      	blx	r3
    aa0c:	e005      	b.n	aa1a <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    aa0e:	68fb      	ldr	r3, [r7, #12]
    aa10:	4a23      	ldr	r2, [pc, #140]	; (aaa0 <wait_for_bootrom+0x174>)
    aa12:	0019      	movs	r1, r3
    aa14:	0010      	movs	r0, r2
    aa16:	4b21      	ldr	r3, [pc, #132]	; (aa9c <wait_for_bootrom+0x170>)
    aa18:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    aa1a:	4b22      	ldr	r3, [pc, #136]	; (aaa4 <wait_for_bootrom+0x178>)
    aa1c:	4798      	blx	r3
    aa1e:	0003      	movs	r3, r0
    aa20:	051b      	lsls	r3, r3, #20
    aa22:	0d1b      	lsrs	r3, r3, #20
    aa24:	4a20      	ldr	r2, [pc, #128]	; (aaa8 <wait_for_bootrom+0x17c>)
    aa26:	4293      	cmp	r3, r2
    aa28:	d906      	bls.n	aa38 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    aa2a:	697b      	ldr	r3, [r7, #20]
    aa2c:	2202      	movs	r2, #2
    aa2e:	4313      	orrs	r3, r2
    aa30:	0018      	movs	r0, r3
    aa32:	4b1e      	ldr	r3, [pc, #120]	; (aaac <wait_for_bootrom+0x180>)
    aa34:	4798      	blx	r3
    aa36:	e003      	b.n	aa40 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    aa38:	697b      	ldr	r3, [r7, #20]
    aa3a:	0018      	movs	r0, r3
    aa3c:	4b1b      	ldr	r3, [pc, #108]	; (aaac <wait_for_bootrom+0x180>)
    aa3e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    aa40:	4b1b      	ldr	r3, [pc, #108]	; (aab0 <wait_for_bootrom+0x184>)
    aa42:	0018      	movs	r0, r3
    aa44:	4b1b      	ldr	r3, [pc, #108]	; (aab4 <wait_for_bootrom+0x188>)
    aa46:	4798      	blx	r3
    aa48:	68fa      	ldr	r2, [r7, #12]
    aa4a:	4b1b      	ldr	r3, [pc, #108]	; (aab8 <wait_for_bootrom+0x18c>)
    aa4c:	0011      	movs	r1, r2
    aa4e:	0018      	movs	r0, r3
    aa50:	4b18      	ldr	r3, [pc, #96]	; (aab4 <wait_for_bootrom+0x188>)
    aa52:	4798      	blx	r3
    aa54:	200d      	movs	r0, #13
    aa56:	4b19      	ldr	r3, [pc, #100]	; (aabc <wait_for_bootrom+0x190>)
    aa58:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    aa5a:	4a19      	ldr	r2, [pc, #100]	; (aac0 <wait_for_bootrom+0x194>)
    aa5c:	4b0b      	ldr	r3, [pc, #44]	; (aa8c <wait_for_bootrom+0x160>)
    aa5e:	0011      	movs	r1, r2
    aa60:	0018      	movs	r0, r3
    aa62:	4b0e      	ldr	r3, [pc, #56]	; (aa9c <wait_for_bootrom+0x170>)
    aa64:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    aa66:	2313      	movs	r3, #19
    aa68:	18fb      	adds	r3, r7, r3
    aa6a:	781b      	ldrb	r3, [r3, #0]
    aa6c:	b25b      	sxtb	r3, r3
}
    aa6e:	0018      	movs	r0, r3
    aa70:	46bd      	mov	sp, r7
    aa72:	b008      	add	sp, #32
    aa74:	bd80      	pop	{r7, pc}
    aa76:	46c0      	nop			; (mov r8, r8)
    aa78:	13521352 	.word	0x13521352
    aa7c:	00001014 	.word	0x00001014
    aa80:	0000acb5 	.word	0x0000acb5
    aa84:	00008335 	.word	0x00008335
    aa88:	000207bc 	.word	0x000207bc
    aa8c:	000c000c 	.word	0x000c000c
    aa90:	10add09e 	.word	0x10add09e
    aa94:	3c1cd57d 	.word	0x3c1cd57d
    aa98:	000207ac 	.word	0x000207ac
    aa9c:	0000acf9 	.word	0x0000acf9
    aaa0:	0000108c 	.word	0x0000108c
    aaa4:	0000a5d9 	.word	0x0000a5d9
    aaa8:	0000039f 	.word	0x0000039f
    aaac:	0000a4a9 	.word	0x0000a4a9
    aab0:	0001a324 	.word	0x0001a324
    aab4:	00018619 	.word	0x00018619
    aab8:	0001a330 	.word	0x0001a330
    aabc:	0001864d 	.word	0x0001864d
    aac0:	ef522f61 	.word	0xef522f61

0000aac4 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    aac4:	b580      	push	{r7, lr}
    aac6:	b088      	sub	sp, #32
    aac8:	af00      	add	r7, sp, #0
    aaca:	0002      	movs	r2, r0
    aacc:	1dfb      	adds	r3, r7, #7
    aace:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    aad0:	231f      	movs	r3, #31
    aad2:	18fb      	adds	r3, r7, r3
    aad4:	2200      	movs	r2, #0
    aad6:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    aad8:	2300      	movs	r3, #0
    aada:	61bb      	str	r3, [r7, #24]
    aadc:	2300      	movs	r3, #0
    aade:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    aae0:	2301      	movs	r3, #1
    aae2:	425b      	negs	r3, r3
    aae4:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    aae6:	4b1d      	ldr	r3, [pc, #116]	; (ab5c <wait_for_firmware_start+0x98>)
    aae8:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    aaea:	4b1d      	ldr	r3, [pc, #116]	; (ab60 <wait_for_firmware_start+0x9c>)
    aaec:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    aaee:	1dfb      	adds	r3, r7, #7
    aaf0:	781b      	ldrb	r3, [r3, #0]
    aaf2:	2b02      	cmp	r3, #2
    aaf4:	d003      	beq.n	aafe <wait_for_firmware_start+0x3a>
    aaf6:	1dfb      	adds	r3, r7, #7
    aaf8:	781b      	ldrb	r3, [r3, #0]
    aafa:	2b03      	cmp	r3, #3
    aafc:	d119      	bne.n	ab32 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    aafe:	4b19      	ldr	r3, [pc, #100]	; (ab64 <wait_for_firmware_start+0xa0>)
    ab00:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    ab02:	4b19      	ldr	r3, [pc, #100]	; (ab68 <wait_for_firmware_start+0xa4>)
    ab04:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    ab06:	e014      	b.n	ab32 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    ab08:	2002      	movs	r0, #2
    ab0a:	4b18      	ldr	r3, [pc, #96]	; (ab6c <wait_for_firmware_start+0xa8>)
    ab0c:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    ab0e:	68fb      	ldr	r3, [r7, #12]
    ab10:	0018      	movs	r0, r3
    ab12:	4b17      	ldr	r3, [pc, #92]	; (ab70 <wait_for_firmware_start+0xac>)
    ab14:	4798      	blx	r3
    ab16:	0003      	movs	r3, r0
    ab18:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    ab1a:	697b      	ldr	r3, [r7, #20]
    ab1c:	3301      	adds	r3, #1
    ab1e:	617b      	str	r3, [r7, #20]
    ab20:	697a      	ldr	r2, [r7, #20]
    ab22:	693b      	ldr	r3, [r7, #16]
    ab24:	429a      	cmp	r2, r3
    ab26:	d304      	bcc.n	ab32 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    ab28:	231f      	movs	r3, #31
    ab2a:	18fb      	adds	r3, r7, r3
    ab2c:	22fb      	movs	r2, #251	; 0xfb
    ab2e:	701a      	strb	r2, [r3, #0]
			goto ERR;
    ab30:	e00c      	b.n	ab4c <wait_for_firmware_start+0x88>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    ab32:	68ba      	ldr	r2, [r7, #8]
    ab34:	69bb      	ldr	r3, [r7, #24]
    ab36:	429a      	cmp	r2, r3
    ab38:	d1e6      	bne.n	ab08 <wait_for_firmware_start+0x44>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    ab3a:	68bb      	ldr	r3, [r7, #8]
    ab3c:	4a08      	ldr	r2, [pc, #32]	; (ab60 <wait_for_firmware_start+0x9c>)
    ab3e:	4293      	cmp	r3, r2
    ab40:	d104      	bne.n	ab4c <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    ab42:	4b06      	ldr	r3, [pc, #24]	; (ab5c <wait_for_firmware_start+0x98>)
    ab44:	2100      	movs	r1, #0
    ab46:	0018      	movs	r0, r3
    ab48:	4b0a      	ldr	r3, [pc, #40]	; (ab74 <wait_for_firmware_start+0xb0>)
    ab4a:	4798      	blx	r3
	}
ERR:
	return ret;
    ab4c:	231f      	movs	r3, #31
    ab4e:	18fb      	adds	r3, r7, r3
    ab50:	781b      	ldrb	r3, [r3, #0]
    ab52:	b25b      	sxtb	r3, r3
}
    ab54:	0018      	movs	r0, r3
    ab56:	46bd      	mov	sp, r7
    ab58:	b008      	add	sp, #32
    ab5a:	bd80      	pop	{r7, pc}
    ab5c:	0000108c 	.word	0x0000108c
    ab60:	02532636 	.word	0x02532636
    ab64:	000207ac 	.word	0x000207ac
    ab68:	d75dc1c3 	.word	0xd75dc1c3
    ab6c:	00008335 	.word	0x00008335
    ab70:	0000acb5 	.word	0x0000acb5
    ab74:	0000acf9 	.word	0x0000acf9

0000ab78 <chip_deinit>:

sint8 chip_deinit(void)
{
    ab78:	b590      	push	{r4, r7, lr}
    ab7a:	b083      	sub	sp, #12
    ab7c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    ab7e:	2300      	movs	r3, #0
    ab80:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    ab82:	1dfc      	adds	r4, r7, #7
    ab84:	003a      	movs	r2, r7
    ab86:	23a0      	movs	r3, #160	; 0xa0
    ab88:	015b      	lsls	r3, r3, #5
    ab8a:	0011      	movs	r1, r2
    ab8c:	0018      	movs	r0, r3
    ab8e:	4b1f      	ldr	r3, [pc, #124]	; (ac0c <chip_deinit+0x94>)
    ab90:	4798      	blx	r3
    ab92:	0003      	movs	r3, r0
    ab94:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    ab96:	1dfb      	adds	r3, r7, #7
    ab98:	781b      	ldrb	r3, [r3, #0]
    ab9a:	b25b      	sxtb	r3, r3
    ab9c:	2b00      	cmp	r3, #0
    ab9e:	d00d      	beq.n	abbc <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    aba0:	4a1b      	ldr	r2, [pc, #108]	; (ac10 <chip_deinit+0x98>)
    aba2:	491c      	ldr	r1, [pc, #112]	; (ac14 <chip_deinit+0x9c>)
    aba4:	4b1c      	ldr	r3, [pc, #112]	; (ac18 <chip_deinit+0xa0>)
    aba6:	0018      	movs	r0, r3
    aba8:	4b1c      	ldr	r3, [pc, #112]	; (ac1c <chip_deinit+0xa4>)
    abaa:	4798      	blx	r3
    abac:	4b1c      	ldr	r3, [pc, #112]	; (ac20 <chip_deinit+0xa8>)
    abae:	0018      	movs	r0, r3
    abb0:	4b1c      	ldr	r3, [pc, #112]	; (ac24 <chip_deinit+0xac>)
    abb2:	4798      	blx	r3
    abb4:	200d      	movs	r0, #13
    abb6:	4b1c      	ldr	r3, [pc, #112]	; (ac28 <chip_deinit+0xb0>)
    abb8:	4798      	blx	r3
		goto ERR1;
    abba:	e020      	b.n	abfe <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    abbc:	683b      	ldr	r3, [r7, #0]
    abbe:	4a1b      	ldr	r2, [pc, #108]	; (ac2c <chip_deinit+0xb4>)
    abc0:	4013      	ands	r3, r2
    abc2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    abc4:	683a      	ldr	r2, [r7, #0]
    abc6:	1dfc      	adds	r4, r7, #7
    abc8:	23a0      	movs	r3, #160	; 0xa0
    abca:	015b      	lsls	r3, r3, #5
    abcc:	0011      	movs	r1, r2
    abce:	0018      	movs	r0, r3
    abd0:	4b17      	ldr	r3, [pc, #92]	; (ac30 <chip_deinit+0xb8>)
    abd2:	4798      	blx	r3
    abd4:	0003      	movs	r3, r0
    abd6:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    abd8:	1dfb      	adds	r3, r7, #7
    abda:	781b      	ldrb	r3, [r3, #0]
    abdc:	b25b      	sxtb	r3, r3
    abde:	2b00      	cmp	r3, #0
    abe0:	d00d      	beq.n	abfe <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    abe2:	4a14      	ldr	r2, [pc, #80]	; (ac34 <chip_deinit+0xbc>)
    abe4:	490b      	ldr	r1, [pc, #44]	; (ac14 <chip_deinit+0x9c>)
    abe6:	4b0c      	ldr	r3, [pc, #48]	; (ac18 <chip_deinit+0xa0>)
    abe8:	0018      	movs	r0, r3
    abea:	4b0c      	ldr	r3, [pc, #48]	; (ac1c <chip_deinit+0xa4>)
    abec:	4798      	blx	r3
    abee:	4b0c      	ldr	r3, [pc, #48]	; (ac20 <chip_deinit+0xa8>)
    abf0:	0018      	movs	r0, r3
    abf2:	4b0c      	ldr	r3, [pc, #48]	; (ac24 <chip_deinit+0xac>)
    abf4:	4798      	blx	r3
    abf6:	200d      	movs	r0, #13
    abf8:	4b0b      	ldr	r3, [pc, #44]	; (ac28 <chip_deinit+0xb0>)
    abfa:	4798      	blx	r3
		goto ERR1;
    abfc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    abfe:	1dfb      	adds	r3, r7, #7
    ac00:	781b      	ldrb	r3, [r3, #0]
    ac02:	b25b      	sxtb	r3, r3
}
    ac04:	0018      	movs	r0, r3
    ac06:	46bd      	mov	sp, r7
    ac08:	b003      	add	sp, #12
    ac0a:	bd90      	pop	{r4, r7, pc}
    ac0c:	0000acd5 	.word	0x0000acd5
    ac10:	00000205 	.word	0x00000205
    ac14:	0001a36c 	.word	0x0001a36c
    ac18:	0001a2dc 	.word	0x0001a2dc
    ac1c:	00018619 	.word	0x00018619
    ac20:	0001a348 	.word	0x0001a348
    ac24:	00018739 	.word	0x00018739
    ac28:	0001864d 	.word	0x0001864d
    ac2c:	fffffbff 	.word	0xfffffbff
    ac30:	0000acf9 	.word	0x0000acf9
    ac34:	0000020b 	.word	0x0000020b

0000ac38 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    ac38:	b590      	push	{r4, r7, lr}
    ac3a:	b085      	sub	sp, #20
    ac3c:	af00      	add	r7, sp, #0
    ac3e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    ac40:	230f      	movs	r3, #15
    ac42:	18fb      	adds	r3, r7, r3
    ac44:	2200      	movs	r2, #0
    ac46:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    ac48:	230f      	movs	r3, #15
    ac4a:	18fc      	adds	r4, r7, r3
    ac4c:	687b      	ldr	r3, [r7, #4]
    ac4e:	0018      	movs	r0, r3
    ac50:	4b05      	ldr	r3, [pc, #20]	; (ac68 <nm_bus_iface_init+0x30>)
    ac52:	4798      	blx	r3
    ac54:	0003      	movs	r3, r0
    ac56:	7023      	strb	r3, [r4, #0]
	return ret;
    ac58:	230f      	movs	r3, #15
    ac5a:	18fb      	adds	r3, r7, r3
    ac5c:	781b      	ldrb	r3, [r3, #0]
    ac5e:	b25b      	sxtb	r3, r3
}
    ac60:	0018      	movs	r0, r3
    ac62:	46bd      	mov	sp, r7
    ac64:	b005      	add	sp, #20
    ac66:	bd90      	pop	{r4, r7, pc}
    ac68:	000089fd 	.word	0x000089fd

0000ac6c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    ac6c:	b590      	push	{r4, r7, lr}
    ac6e:	b083      	sub	sp, #12
    ac70:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    ac72:	1dfb      	adds	r3, r7, #7
    ac74:	2200      	movs	r2, #0
    ac76:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    ac78:	1dfc      	adds	r4, r7, #7
    ac7a:	4b05      	ldr	r3, [pc, #20]	; (ac90 <nm_bus_iface_deinit+0x24>)
    ac7c:	4798      	blx	r3
    ac7e:	0003      	movs	r3, r0
    ac80:	7023      	strb	r3, [r4, #0]

	return ret;
    ac82:	1dfb      	adds	r3, r7, #7
    ac84:	781b      	ldrb	r3, [r3, #0]
    ac86:	b25b      	sxtb	r3, r3
}
    ac88:	0018      	movs	r0, r3
    ac8a:	46bd      	mov	sp, r7
    ac8c:	b003      	add	sp, #12
    ac8e:	bd90      	pop	{r4, r7, pc}
    ac90:	00008b79 	.word	0x00008b79

0000ac94 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    ac94:	b580      	push	{r7, lr}
    ac96:	b082      	sub	sp, #8
    ac98:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    ac9a:	1dfb      	adds	r3, r7, #7
    ac9c:	2200      	movs	r2, #0
    ac9e:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    aca0:	4b03      	ldr	r3, [pc, #12]	; (acb0 <nm_bus_reset+0x1c>)
    aca2:	4798      	blx	r3
    aca4:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    aca6:	0018      	movs	r0, r3
    aca8:	46bd      	mov	sp, r7
    acaa:	b002      	add	sp, #8
    acac:	bd80      	pop	{r7, pc}
    acae:	46c0      	nop			; (mov r8, r8)
    acb0:	0000c57d 	.word	0x0000c57d

0000acb4 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    acb4:	b580      	push	{r7, lr}
    acb6:	b082      	sub	sp, #8
    acb8:	af00      	add	r7, sp, #0
    acba:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    acbc:	687b      	ldr	r3, [r7, #4]
    acbe:	0018      	movs	r0, r3
    acc0:	4b03      	ldr	r3, [pc, #12]	; (acd0 <nm_read_reg+0x1c>)
    acc2:	4798      	blx	r3
    acc4:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    acc6:	0018      	movs	r0, r3
    acc8:	46bd      	mov	sp, r7
    acca:	b002      	add	sp, #8
    accc:	bd80      	pop	{r7, pc}
    acce:	46c0      	nop			; (mov r8, r8)
    acd0:	0000c711 	.word	0x0000c711

0000acd4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    acd4:	b580      	push	{r7, lr}
    acd6:	b082      	sub	sp, #8
    acd8:	af00      	add	r7, sp, #0
    acda:	6078      	str	r0, [r7, #4]
    acdc:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    acde:	683a      	ldr	r2, [r7, #0]
    ace0:	687b      	ldr	r3, [r7, #4]
    ace2:	0011      	movs	r1, r2
    ace4:	0018      	movs	r0, r3
    ace6:	4b03      	ldr	r3, [pc, #12]	; (acf4 <nm_read_reg_with_ret+0x20>)
    ace8:	4798      	blx	r3
    acea:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    acec:	0018      	movs	r0, r3
    acee:	46bd      	mov	sp, r7
    acf0:	b002      	add	sp, #8
    acf2:	bd80      	pop	{r7, pc}
    acf4:	0000c735 	.word	0x0000c735

0000acf8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    acf8:	b580      	push	{r7, lr}
    acfa:	b082      	sub	sp, #8
    acfc:	af00      	add	r7, sp, #0
    acfe:	6078      	str	r0, [r7, #4]
    ad00:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    ad02:	683a      	ldr	r2, [r7, #0]
    ad04:	687b      	ldr	r3, [r7, #4]
    ad06:	0011      	movs	r1, r2
    ad08:	0018      	movs	r0, r3
    ad0a:	4b03      	ldr	r3, [pc, #12]	; (ad18 <nm_write_reg+0x20>)
    ad0c:	4798      	blx	r3
    ad0e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    ad10:	0018      	movs	r0, r3
    ad12:	46bd      	mov	sp, r7
    ad14:	b002      	add	sp, #8
    ad16:	bd80      	pop	{r7, pc}
    ad18:	0000c785 	.word	0x0000c785

0000ad1c <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    ad1c:	b580      	push	{r7, lr}
    ad1e:	b084      	sub	sp, #16
    ad20:	af00      	add	r7, sp, #0
    ad22:	60f8      	str	r0, [r7, #12]
    ad24:	60b9      	str	r1, [r7, #8]
    ad26:	1dbb      	adds	r3, r7, #6
    ad28:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    ad2a:	1dbb      	adds	r3, r7, #6
    ad2c:	881a      	ldrh	r2, [r3, #0]
    ad2e:	68b9      	ldr	r1, [r7, #8]
    ad30:	68fb      	ldr	r3, [r7, #12]
    ad32:	0018      	movs	r0, r3
    ad34:	4b03      	ldr	r3, [pc, #12]	; (ad44 <p_nm_read_block+0x28>)
    ad36:	4798      	blx	r3
    ad38:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    ad3a:	0018      	movs	r0, r3
    ad3c:	46bd      	mov	sp, r7
    ad3e:	b004      	add	sp, #16
    ad40:	bd80      	pop	{r7, pc}
    ad42:	46c0      	nop			; (mov r8, r8)
    ad44:	0000c7d5 	.word	0x0000c7d5

0000ad48 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    ad48:	b580      	push	{r7, lr}
    ad4a:	b086      	sub	sp, #24
    ad4c:	af00      	add	r7, sp, #0
    ad4e:	60f8      	str	r0, [r7, #12]
    ad50:	60b9      	str	r1, [r7, #8]
    ad52:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    ad54:	4b2d      	ldr	r3, [pc, #180]	; (ae0c <nm_read_block+0xc4>)
    ad56:	881a      	ldrh	r2, [r3, #0]
    ad58:	2310      	movs	r3, #16
    ad5a:	18fb      	adds	r3, r7, r3
    ad5c:	3a08      	subs	r2, #8
    ad5e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    ad60:	2300      	movs	r3, #0
    ad62:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    ad64:	2313      	movs	r3, #19
    ad66:	18fb      	adds	r3, r7, r3
    ad68:	2200      	movs	r2, #0
    ad6a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    ad6c:	2310      	movs	r3, #16
    ad6e:	18fb      	adds	r3, r7, r3
    ad70:	881a      	ldrh	r2, [r3, #0]
    ad72:	687b      	ldr	r3, [r7, #4]
    ad74:	429a      	cmp	r2, r3
    ad76:	d313      	bcc.n	ada0 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    ad78:	68ba      	ldr	r2, [r7, #8]
    ad7a:	697b      	ldr	r3, [r7, #20]
    ad7c:	18d1      	adds	r1, r2, r3
    ad7e:	687b      	ldr	r3, [r7, #4]
    ad80:	b29a      	uxth	r2, r3
    ad82:	68fb      	ldr	r3, [r7, #12]
    ad84:	0018      	movs	r0, r3
    ad86:	4b22      	ldr	r3, [pc, #136]	; (ae10 <nm_read_block+0xc8>)
    ad88:	4798      	blx	r3
    ad8a:	0003      	movs	r3, r0
    ad8c:	b2da      	uxtb	r2, r3
    ad8e:	2313      	movs	r3, #19
    ad90:	18fb      	adds	r3, r7, r3
    ad92:	781b      	ldrb	r3, [r3, #0]
    ad94:	18d3      	adds	r3, r2, r3
    ad96:	b2da      	uxtb	r2, r3
    ad98:	2313      	movs	r3, #19
    ad9a:	18fb      	adds	r3, r7, r3
    ad9c:	701a      	strb	r2, [r3, #0]
			break;
    ad9e:	e02d      	b.n	adfc <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    ada0:	68ba      	ldr	r2, [r7, #8]
    ada2:	697b      	ldr	r3, [r7, #20]
    ada4:	18d1      	adds	r1, r2, r3
    ada6:	2310      	movs	r3, #16
    ada8:	18fb      	adds	r3, r7, r3
    adaa:	881a      	ldrh	r2, [r3, #0]
    adac:	68fb      	ldr	r3, [r7, #12]
    adae:	0018      	movs	r0, r3
    adb0:	4b17      	ldr	r3, [pc, #92]	; (ae10 <nm_read_block+0xc8>)
    adb2:	4798      	blx	r3
    adb4:	0003      	movs	r3, r0
    adb6:	b2da      	uxtb	r2, r3
    adb8:	2313      	movs	r3, #19
    adba:	18fb      	adds	r3, r7, r3
    adbc:	781b      	ldrb	r3, [r3, #0]
    adbe:	18d3      	adds	r3, r2, r3
    adc0:	b2da      	uxtb	r2, r3
    adc2:	2313      	movs	r3, #19
    adc4:	18fb      	adds	r3, r7, r3
    adc6:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    adc8:	2313      	movs	r3, #19
    adca:	18fb      	adds	r3, r7, r3
    adcc:	781b      	ldrb	r3, [r3, #0]
    adce:	b25b      	sxtb	r3, r3
    add0:	2b00      	cmp	r3, #0
    add2:	d112      	bne.n	adfa <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    add4:	2310      	movs	r3, #16
    add6:	18fb      	adds	r3, r7, r3
    add8:	881b      	ldrh	r3, [r3, #0]
    adda:	687a      	ldr	r2, [r7, #4]
    addc:	1ad3      	subs	r3, r2, r3
    adde:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    ade0:	2310      	movs	r3, #16
    ade2:	18fb      	adds	r3, r7, r3
    ade4:	881b      	ldrh	r3, [r3, #0]
    ade6:	697a      	ldr	r2, [r7, #20]
    ade8:	18d3      	adds	r3, r2, r3
    adea:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    adec:	2310      	movs	r3, #16
    adee:	18fb      	adds	r3, r7, r3
    adf0:	881b      	ldrh	r3, [r3, #0]
    adf2:	68fa      	ldr	r2, [r7, #12]
    adf4:	18d3      	adds	r3, r2, r3
    adf6:	60fb      	str	r3, [r7, #12]
		}
	}
    adf8:	e7b8      	b.n	ad6c <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    adfa:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    adfc:	2313      	movs	r3, #19
    adfe:	18fb      	adds	r3, r7, r3
    ae00:	781b      	ldrb	r3, [r3, #0]
    ae02:	b25b      	sxtb	r3, r3
}
    ae04:	0018      	movs	r0, r3
    ae06:	46bd      	mov	sp, r7
    ae08:	b006      	add	sp, #24
    ae0a:	bd80      	pop	{r7, pc}
    ae0c:	20000000 	.word	0x20000000
    ae10:	0000ad1d 	.word	0x0000ad1d

0000ae14 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    ae14:	b580      	push	{r7, lr}
    ae16:	b084      	sub	sp, #16
    ae18:	af00      	add	r7, sp, #0
    ae1a:	60f8      	str	r0, [r7, #12]
    ae1c:	60b9      	str	r1, [r7, #8]
    ae1e:	1dbb      	adds	r3, r7, #6
    ae20:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    ae22:	1dbb      	adds	r3, r7, #6
    ae24:	881a      	ldrh	r2, [r3, #0]
    ae26:	68b9      	ldr	r1, [r7, #8]
    ae28:	68fb      	ldr	r3, [r7, #12]
    ae2a:	0018      	movs	r0, r3
    ae2c:	4b03      	ldr	r3, [pc, #12]	; (ae3c <p_nm_write_block+0x28>)
    ae2e:	4798      	blx	r3
    ae30:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    ae32:	0018      	movs	r0, r3
    ae34:	46bd      	mov	sp, r7
    ae36:	b004      	add	sp, #16
    ae38:	bd80      	pop	{r7, pc}
    ae3a:	46c0      	nop			; (mov r8, r8)
    ae3c:	0000c82d 	.word	0x0000c82d

0000ae40 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    ae40:	b580      	push	{r7, lr}
    ae42:	b086      	sub	sp, #24
    ae44:	af00      	add	r7, sp, #0
    ae46:	60f8      	str	r0, [r7, #12]
    ae48:	60b9      	str	r1, [r7, #8]
    ae4a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    ae4c:	4b2d      	ldr	r3, [pc, #180]	; (af04 <nm_write_block+0xc4>)
    ae4e:	881a      	ldrh	r2, [r3, #0]
    ae50:	2310      	movs	r3, #16
    ae52:	18fb      	adds	r3, r7, r3
    ae54:	3a08      	subs	r2, #8
    ae56:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    ae58:	2300      	movs	r3, #0
    ae5a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    ae5c:	2313      	movs	r3, #19
    ae5e:	18fb      	adds	r3, r7, r3
    ae60:	2200      	movs	r2, #0
    ae62:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    ae64:	2310      	movs	r3, #16
    ae66:	18fb      	adds	r3, r7, r3
    ae68:	881a      	ldrh	r2, [r3, #0]
    ae6a:	687b      	ldr	r3, [r7, #4]
    ae6c:	429a      	cmp	r2, r3
    ae6e:	d313      	bcc.n	ae98 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    ae70:	68ba      	ldr	r2, [r7, #8]
    ae72:	697b      	ldr	r3, [r7, #20]
    ae74:	18d1      	adds	r1, r2, r3
    ae76:	687b      	ldr	r3, [r7, #4]
    ae78:	b29a      	uxth	r2, r3
    ae7a:	68fb      	ldr	r3, [r7, #12]
    ae7c:	0018      	movs	r0, r3
    ae7e:	4b22      	ldr	r3, [pc, #136]	; (af08 <nm_write_block+0xc8>)
    ae80:	4798      	blx	r3
    ae82:	0003      	movs	r3, r0
    ae84:	b2da      	uxtb	r2, r3
    ae86:	2313      	movs	r3, #19
    ae88:	18fb      	adds	r3, r7, r3
    ae8a:	781b      	ldrb	r3, [r3, #0]
    ae8c:	18d3      	adds	r3, r2, r3
    ae8e:	b2da      	uxtb	r2, r3
    ae90:	2313      	movs	r3, #19
    ae92:	18fb      	adds	r3, r7, r3
    ae94:	701a      	strb	r2, [r3, #0]
			break;
    ae96:	e02d      	b.n	aef4 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    ae98:	68ba      	ldr	r2, [r7, #8]
    ae9a:	697b      	ldr	r3, [r7, #20]
    ae9c:	18d1      	adds	r1, r2, r3
    ae9e:	2310      	movs	r3, #16
    aea0:	18fb      	adds	r3, r7, r3
    aea2:	881a      	ldrh	r2, [r3, #0]
    aea4:	68fb      	ldr	r3, [r7, #12]
    aea6:	0018      	movs	r0, r3
    aea8:	4b17      	ldr	r3, [pc, #92]	; (af08 <nm_write_block+0xc8>)
    aeaa:	4798      	blx	r3
    aeac:	0003      	movs	r3, r0
    aeae:	b2da      	uxtb	r2, r3
    aeb0:	2313      	movs	r3, #19
    aeb2:	18fb      	adds	r3, r7, r3
    aeb4:	781b      	ldrb	r3, [r3, #0]
    aeb6:	18d3      	adds	r3, r2, r3
    aeb8:	b2da      	uxtb	r2, r3
    aeba:	2313      	movs	r3, #19
    aebc:	18fb      	adds	r3, r7, r3
    aebe:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    aec0:	2313      	movs	r3, #19
    aec2:	18fb      	adds	r3, r7, r3
    aec4:	781b      	ldrb	r3, [r3, #0]
    aec6:	b25b      	sxtb	r3, r3
    aec8:	2b00      	cmp	r3, #0
    aeca:	d112      	bne.n	aef2 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    aecc:	2310      	movs	r3, #16
    aece:	18fb      	adds	r3, r7, r3
    aed0:	881b      	ldrh	r3, [r3, #0]
    aed2:	687a      	ldr	r2, [r7, #4]
    aed4:	1ad3      	subs	r3, r2, r3
    aed6:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    aed8:	2310      	movs	r3, #16
    aeda:	18fb      	adds	r3, r7, r3
    aedc:	881b      	ldrh	r3, [r3, #0]
    aede:	697a      	ldr	r2, [r7, #20]
    aee0:	18d3      	adds	r3, r2, r3
    aee2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    aee4:	2310      	movs	r3, #16
    aee6:	18fb      	adds	r3, r7, r3
    aee8:	881b      	ldrh	r3, [r3, #0]
    aeea:	68fa      	ldr	r2, [r7, #12]
    aeec:	18d3      	adds	r3, r2, r3
    aeee:	60fb      	str	r3, [r7, #12]
		}
	}
    aef0:	e7b8      	b.n	ae64 <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    aef2:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    aef4:	2313      	movs	r3, #19
    aef6:	18fb      	adds	r3, r7, r3
    aef8:	781b      	ldrb	r3, [r3, #0]
    aefa:	b25b      	sxtb	r3, r3
}
    aefc:	0018      	movs	r0, r3
    aefe:	46bd      	mov	sp, r7
    af00:	b006      	add	sp, #24
    af02:	bd80      	pop	{r7, pc}
    af04:	20000000 	.word	0x20000000
    af08:	0000ae15 	.word	0x0000ae15

0000af0c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    af0c:	b590      	push	{r4, r7, lr}
    af0e:	b089      	sub	sp, #36	; 0x24
    af10:	af00      	add	r7, sp, #0
    af12:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    af14:	2300      	movs	r3, #0
    af16:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    af18:	231f      	movs	r3, #31
    af1a:	18fb      	adds	r3, r7, r3
    af1c:	2200      	movs	r2, #0
    af1e:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    af20:	230c      	movs	r3, #12
    af22:	18fb      	adds	r3, r7, r3
    af24:	0018      	movs	r0, r3
    af26:	2308      	movs	r3, #8
    af28:	001a      	movs	r2, r3
    af2a:	2100      	movs	r1, #0
    af2c:	4b64      	ldr	r3, [pc, #400]	; (b0c0 <nm_get_firmware_full_info+0x1b4>)
    af2e:	4798      	blx	r3
	if (pstrRev != NULL)
    af30:	687b      	ldr	r3, [r7, #4]
    af32:	2b00      	cmp	r3, #0
    af34:	d100      	bne.n	af38 <nm_get_firmware_full_info+0x2c>
    af36:	e0ba      	b.n	b0ae <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    af38:	687b      	ldr	r3, [r7, #4]
    af3a:	2228      	movs	r2, #40	; 0x28
    af3c:	2100      	movs	r1, #0
    af3e:	0018      	movs	r0, r3
    af40:	4b60      	ldr	r3, [pc, #384]	; (b0c4 <nm_get_firmware_full_info+0x1b8>)
    af42:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    af44:	231f      	movs	r3, #31
    af46:	18fc      	adds	r4, r7, r3
    af48:	2314      	movs	r3, #20
    af4a:	18fb      	adds	r3, r7, r3
    af4c:	4a5e      	ldr	r2, [pc, #376]	; (b0c8 <nm_get_firmware_full_info+0x1bc>)
    af4e:	0019      	movs	r1, r3
    af50:	0010      	movs	r0, r2
    af52:	4b5e      	ldr	r3, [pc, #376]	; (b0cc <nm_get_firmware_full_info+0x1c0>)
    af54:	4798      	blx	r3
    af56:	0003      	movs	r3, r0
    af58:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    af5a:	231f      	movs	r3, #31
    af5c:	18fb      	adds	r3, r7, r3
    af5e:	781b      	ldrb	r3, [r3, #0]
    af60:	b25b      	sxtb	r3, r3
    af62:	2b00      	cmp	r3, #0
    af64:	d000      	beq.n	af68 <nm_get_firmware_full_info+0x5c>
    af66:	e0a2      	b.n	b0ae <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    af68:	697b      	ldr	r3, [r7, #20]
    af6a:	2b00      	cmp	r3, #0
    af6c:	d100      	bne.n	af70 <nm_get_firmware_full_info+0x64>
    af6e:	e09a      	b.n	b0a6 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    af70:	697b      	ldr	r3, [r7, #20]
    af72:	22c0      	movs	r2, #192	; 0xc0
    af74:	0292      	lsls	r2, r2, #10
    af76:	4313      	orrs	r3, r2
    af78:	221f      	movs	r2, #31
    af7a:	18bc      	adds	r4, r7, r2
    af7c:	220c      	movs	r2, #12
    af7e:	18b9      	adds	r1, r7, r2
    af80:	2208      	movs	r2, #8
    af82:	0018      	movs	r0, r3
    af84:	4b52      	ldr	r3, [pc, #328]	; (b0d0 <nm_get_firmware_full_info+0x1c4>)
    af86:	4798      	blx	r3
    af88:	0003      	movs	r3, r0
    af8a:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    af8c:	231f      	movs	r3, #31
    af8e:	18fb      	adds	r3, r7, r3
    af90:	781b      	ldrb	r3, [r3, #0]
    af92:	b25b      	sxtb	r3, r3
    af94:	2b00      	cmp	r3, #0
    af96:	d000      	beq.n	af9a <nm_get_firmware_full_info+0x8e>
    af98:	e089      	b.n	b0ae <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    af9a:	230c      	movs	r3, #12
    af9c:	18fb      	adds	r3, r7, r3
    af9e:	685b      	ldr	r3, [r3, #4]
    afa0:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    afa2:	697b      	ldr	r3, [r7, #20]
    afa4:	041b      	lsls	r3, r3, #16
    afa6:	0c1b      	lsrs	r3, r3, #16
    afa8:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    afaa:	697b      	ldr	r3, [r7, #20]
    afac:	2b00      	cmp	r3, #0
    afae:	d100      	bne.n	afb2 <nm_get_firmware_full_info+0xa6>
    afb0:	e074      	b.n	b09c <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    afb2:	697b      	ldr	r3, [r7, #20]
    afb4:	22c0      	movs	r2, #192	; 0xc0
    afb6:	0292      	lsls	r2, r2, #10
    afb8:	4313      	orrs	r3, r2
    afba:	221f      	movs	r2, #31
    afbc:	18bc      	adds	r4, r7, r2
    afbe:	6879      	ldr	r1, [r7, #4]
    afc0:	2228      	movs	r2, #40	; 0x28
    afc2:	0018      	movs	r0, r3
    afc4:	4b42      	ldr	r3, [pc, #264]	; (b0d0 <nm_get_firmware_full_info+0x1c4>)
    afc6:	4798      	blx	r3
    afc8:	0003      	movs	r3, r0
    afca:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    afcc:	231f      	movs	r3, #31
    afce:	18fb      	adds	r3, r7, r3
    afd0:	781b      	ldrb	r3, [r3, #0]
    afd2:	b25b      	sxtb	r3, r3
    afd4:	2b00      	cmp	r3, #0
    afd6:	d16a      	bne.n	b0ae <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    afd8:	687b      	ldr	r3, [r7, #4]
    afda:	791b      	ldrb	r3, [r3, #4]
    afdc:	021b      	lsls	r3, r3, #8
    afde:	b21a      	sxth	r2, r3
    afe0:	687b      	ldr	r3, [r7, #4]
    afe2:	795b      	ldrb	r3, [r3, #5]
    afe4:	011b      	lsls	r3, r3, #4
    afe6:	b21b      	sxth	r3, r3
    afe8:	21ff      	movs	r1, #255	; 0xff
    afea:	400b      	ands	r3, r1
    afec:	b21b      	sxth	r3, r3
    afee:	4313      	orrs	r3, r2
    aff0:	b21a      	sxth	r2, r3
    aff2:	687b      	ldr	r3, [r7, #4]
    aff4:	799b      	ldrb	r3, [r3, #6]
    aff6:	b21b      	sxth	r3, r3
    aff8:	210f      	movs	r1, #15
    affa:	400b      	ands	r3, r1
    affc:	b21b      	sxth	r3, r3
    affe:	4313      	orrs	r3, r2
    b000:	b21a      	sxth	r2, r3
    b002:	231c      	movs	r3, #28
    b004:	18fb      	adds	r3, r7, r3
    b006:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    b008:	231a      	movs	r3, #26
    b00a:	18fb      	adds	r3, r7, r3
    b00c:	4a31      	ldr	r2, [pc, #196]	; (b0d4 <nm_get_firmware_full_info+0x1c8>)
    b00e:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    b010:	687b      	ldr	r3, [r7, #4]
    b012:	79db      	ldrb	r3, [r3, #7]
    b014:	021b      	lsls	r3, r3, #8
    b016:	b21a      	sxth	r2, r3
    b018:	687b      	ldr	r3, [r7, #4]
    b01a:	7a1b      	ldrb	r3, [r3, #8]
    b01c:	011b      	lsls	r3, r3, #4
    b01e:	b21b      	sxth	r3, r3
    b020:	21ff      	movs	r1, #255	; 0xff
    b022:	400b      	ands	r3, r1
    b024:	b21b      	sxth	r3, r3
    b026:	4313      	orrs	r3, r2
    b028:	b21a      	sxth	r2, r3
    b02a:	687b      	ldr	r3, [r7, #4]
    b02c:	7a5b      	ldrb	r3, [r3, #9]
    b02e:	b21b      	sxth	r3, r3
    b030:	210f      	movs	r1, #15
    b032:	400b      	ands	r3, r1
    b034:	b21b      	sxth	r3, r3
    b036:	4313      	orrs	r3, r2
    b038:	b21a      	sxth	r2, r3
    b03a:	2318      	movs	r3, #24
    b03c:	18fb      	adds	r3, r7, r3
    b03e:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    b040:	231c      	movs	r3, #28
    b042:	18fb      	adds	r3, r7, r3
    b044:	881b      	ldrh	r3, [r3, #0]
    b046:	2b00      	cmp	r3, #0
    b048:	d009      	beq.n	b05e <nm_get_firmware_full_info+0x152>
    b04a:	2318      	movs	r3, #24
    b04c:	18fb      	adds	r3, r7, r3
    b04e:	881b      	ldrh	r3, [r3, #0]
    b050:	2b00      	cmp	r3, #0
    b052:	d004      	beq.n	b05e <nm_get_firmware_full_info+0x152>
    b054:	2318      	movs	r3, #24
    b056:	18fb      	adds	r3, r7, r3
    b058:	881b      	ldrh	r3, [r3, #0]
    b05a:	2b00      	cmp	r3, #0
    b05c:	d104      	bne.n	b068 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    b05e:	231f      	movs	r3, #31
    b060:	18fb      	adds	r3, r7, r3
    b062:	22f4      	movs	r2, #244	; 0xf4
    b064:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    b066:	e022      	b.n	b0ae <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    b068:	231a      	movs	r3, #26
    b06a:	18fa      	adds	r2, r7, r3
    b06c:	2318      	movs	r3, #24
    b06e:	18fb      	adds	r3, r7, r3
    b070:	8812      	ldrh	r2, [r2, #0]
    b072:	881b      	ldrh	r3, [r3, #0]
    b074:	429a      	cmp	r2, r3
    b076:	d204      	bcs.n	b082 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    b078:	231f      	movs	r3, #31
    b07a:	18fb      	adds	r3, r7, r3
    b07c:	22f3      	movs	r2, #243	; 0xf3
    b07e:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    b080:	e015      	b.n	b0ae <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    b082:	231a      	movs	r3, #26
    b084:	18fa      	adds	r2, r7, r3
    b086:	231c      	movs	r3, #28
    b088:	18fb      	adds	r3, r7, r3
    b08a:	8812      	ldrh	r2, [r2, #0]
    b08c:	881b      	ldrh	r3, [r3, #0]
    b08e:	429a      	cmp	r2, r3
    b090:	d90d      	bls.n	b0ae <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    b092:	231f      	movs	r3, #31
    b094:	18fb      	adds	r3, r7, r3
    b096:	22f3      	movs	r2, #243	; 0xf3
    b098:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    b09a:	e008      	b.n	b0ae <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    b09c:	231f      	movs	r3, #31
    b09e:	18fb      	adds	r3, r7, r3
    b0a0:	22f4      	movs	r2, #244	; 0xf4
    b0a2:	701a      	strb	r2, [r3, #0]
    b0a4:	e003      	b.n	b0ae <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    b0a6:	231f      	movs	r3, #31
    b0a8:	18fb      	adds	r3, r7, r3
    b0aa:	22f4      	movs	r2, #244	; 0xf4
    b0ac:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    b0ae:	231f      	movs	r3, #31
    b0b0:	18fb      	adds	r3, r7, r3
    b0b2:	781b      	ldrb	r3, [r3, #0]
    b0b4:	b25b      	sxtb	r3, r3
}
    b0b6:	0018      	movs	r0, r3
    b0b8:	46bd      	mov	sp, r7
    b0ba:	b009      	add	sp, #36	; 0x24
    b0bc:	bd90      	pop	{r4, r7, pc}
    b0be:	46c0      	nop			; (mov r8, r8)
    b0c0:	000184d1 	.word	0x000184d1
    b0c4:	00008c25 	.word	0x00008c25
    b0c8:	000c0008 	.word	0x000c0008
    b0cc:	0000acd5 	.word	0x0000acd5
    b0d0:	0000ad49 	.word	0x0000ad49
    b0d4:	00001352 	.word	0x00001352

0000b0d8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    b0d8:	b590      	push	{r4, r7, lr}
    b0da:	b085      	sub	sp, #20
    b0dc:	af00      	add	r7, sp, #0
    b0de:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    b0e0:	230f      	movs	r3, #15
    b0e2:	18fb      	adds	r3, r7, r3
    b0e4:	2200      	movs	r2, #0
    b0e6:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    b0e8:	687b      	ldr	r3, [r7, #4]
    b0ea:	2b00      	cmp	r3, #0
    b0ec:	d013      	beq.n	b116 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    b0ee:	230e      	movs	r3, #14
    b0f0:	18fb      	adds	r3, r7, r3
    b0f2:	687a      	ldr	r2, [r7, #4]
    b0f4:	7812      	ldrb	r2, [r2, #0]
    b0f6:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    b0f8:	230e      	movs	r3, #14
    b0fa:	18fb      	adds	r3, r7, r3
    b0fc:	781b      	ldrb	r3, [r3, #0]
    b0fe:	2b00      	cmp	r3, #0
    b100:	d004      	beq.n	b10c <nm_drv_init+0x34>
    b102:	230e      	movs	r3, #14
    b104:	18fb      	adds	r3, r7, r3
    b106:	781b      	ldrb	r3, [r3, #0]
    b108:	2b04      	cmp	r3, #4
    b10a:	d908      	bls.n	b11e <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    b10c:	230e      	movs	r3, #14
    b10e:	18fb      	adds	r3, r7, r3
    b110:	2201      	movs	r2, #1
    b112:	701a      	strb	r2, [r3, #0]
    b114:	e003      	b.n	b11e <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    b116:	230e      	movs	r3, #14
    b118:	18fb      	adds	r3, r7, r3
    b11a:	2201      	movs	r2, #1
    b11c:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    b11e:	230f      	movs	r3, #15
    b120:	18fc      	adds	r4, r7, r3
    b122:	2000      	movs	r0, #0
    b124:	4b41      	ldr	r3, [pc, #260]	; (b22c <nm_drv_init+0x154>)
    b126:	4798      	blx	r3
    b128:	0003      	movs	r3, r0
    b12a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b12c:	230f      	movs	r3, #15
    b12e:	18fb      	adds	r3, r7, r3
    b130:	781b      	ldrb	r3, [r3, #0]
    b132:	b25b      	sxtb	r3, r3
    b134:	2b00      	cmp	r3, #0
    b136:	d00f      	beq.n	b158 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    b138:	2328      	movs	r3, #40	; 0x28
    b13a:	33ff      	adds	r3, #255	; 0xff
    b13c:	001a      	movs	r2, r3
    b13e:	493c      	ldr	r1, [pc, #240]	; (b230 <nm_drv_init+0x158>)
    b140:	4b3c      	ldr	r3, [pc, #240]	; (b234 <nm_drv_init+0x15c>)
    b142:	0018      	movs	r0, r3
    b144:	4b3c      	ldr	r3, [pc, #240]	; (b238 <nm_drv_init+0x160>)
    b146:	4798      	blx	r3
    b148:	4b3c      	ldr	r3, [pc, #240]	; (b23c <nm_drv_init+0x164>)
    b14a:	0018      	movs	r0, r3
    b14c:	4b3c      	ldr	r3, [pc, #240]	; (b240 <nm_drv_init+0x168>)
    b14e:	4798      	blx	r3
    b150:	200d      	movs	r0, #13
    b152:	4b3c      	ldr	r3, [pc, #240]	; (b244 <nm_drv_init+0x16c>)
    b154:	4798      	blx	r3
		goto ERR1;
    b156:	e060      	b.n	b21a <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    b158:	4b3b      	ldr	r3, [pc, #236]	; (b248 <nm_drv_init+0x170>)
    b15a:	0018      	movs	r0, r3
    b15c:	4b36      	ldr	r3, [pc, #216]	; (b238 <nm_drv_init+0x160>)
    b15e:	4798      	blx	r3
    b160:	4b3a      	ldr	r3, [pc, #232]	; (b24c <nm_drv_init+0x174>)
    b162:	4798      	blx	r3
    b164:	0002      	movs	r2, r0
    b166:	4b3a      	ldr	r3, [pc, #232]	; (b250 <nm_drv_init+0x178>)
    b168:	0011      	movs	r1, r2
    b16a:	0018      	movs	r0, r3
    b16c:	4b32      	ldr	r3, [pc, #200]	; (b238 <nm_drv_init+0x160>)
    b16e:	4798      	blx	r3
    b170:	200d      	movs	r0, #13
    b172:	4b34      	ldr	r3, [pc, #208]	; (b244 <nm_drv_init+0x16c>)
    b174:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    b176:	4b37      	ldr	r3, [pc, #220]	; (b254 <nm_drv_init+0x17c>)
    b178:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    b17a:	230f      	movs	r3, #15
    b17c:	18fc      	adds	r4, r7, r3
    b17e:	230e      	movs	r3, #14
    b180:	18fb      	adds	r3, r7, r3
    b182:	781b      	ldrb	r3, [r3, #0]
    b184:	0018      	movs	r0, r3
    b186:	4b34      	ldr	r3, [pc, #208]	; (b258 <nm_drv_init+0x180>)
    b188:	4798      	blx	r3
    b18a:	0003      	movs	r3, r0
    b18c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b18e:	230f      	movs	r3, #15
    b190:	18fb      	adds	r3, r7, r3
    b192:	781b      	ldrb	r3, [r3, #0]
    b194:	b25b      	sxtb	r3, r3
    b196:	2b00      	cmp	r3, #0
    b198:	d13a      	bne.n	b210 <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    b19a:	230f      	movs	r3, #15
    b19c:	18fc      	adds	r4, r7, r3
    b19e:	230e      	movs	r3, #14
    b1a0:	18fb      	adds	r3, r7, r3
    b1a2:	781b      	ldrb	r3, [r3, #0]
    b1a4:	0018      	movs	r0, r3
    b1a6:	4b2d      	ldr	r3, [pc, #180]	; (b25c <nm_drv_init+0x184>)
    b1a8:	4798      	blx	r3
    b1aa:	0003      	movs	r3, r0
    b1ac:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b1ae:	230f      	movs	r3, #15
    b1b0:	18fb      	adds	r3, r7, r3
    b1b2:	781b      	ldrb	r3, [r3, #0]
    b1b4:	b25b      	sxtb	r3, r3
    b1b6:	2b00      	cmp	r3, #0
    b1b8:	d12c      	bne.n	b214 <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    b1ba:	230e      	movs	r3, #14
    b1bc:	18fb      	adds	r3, r7, r3
    b1be:	781b      	ldrb	r3, [r3, #0]
    b1c0:	2b02      	cmp	r3, #2
    b1c2:	d02a      	beq.n	b21a <nm_drv_init+0x142>
    b1c4:	230e      	movs	r3, #14
    b1c6:	18fb      	adds	r3, r7, r3
    b1c8:	781b      	ldrb	r3, [r3, #0]
    b1ca:	2b03      	cmp	r3, #3
    b1cc:	d025      	beq.n	b21a <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    b1ce:	230f      	movs	r3, #15
    b1d0:	18fc      	adds	r4, r7, r3
    b1d2:	4b23      	ldr	r3, [pc, #140]	; (b260 <nm_drv_init+0x188>)
    b1d4:	4798      	blx	r3
    b1d6:	0003      	movs	r3, r0
    b1d8:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b1da:	230f      	movs	r3, #15
    b1dc:	18fb      	adds	r3, r7, r3
    b1de:	781b      	ldrb	r3, [r3, #0]
    b1e0:	b25b      	sxtb	r3, r3
    b1e2:	2b00      	cmp	r3, #0
    b1e4:	d00f      	beq.n	b206 <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    b1e6:	2356      	movs	r3, #86	; 0x56
    b1e8:	33ff      	adds	r3, #255	; 0xff
    b1ea:	001a      	movs	r2, r3
    b1ec:	4910      	ldr	r1, [pc, #64]	; (b230 <nm_drv_init+0x158>)
    b1ee:	4b11      	ldr	r3, [pc, #68]	; (b234 <nm_drv_init+0x15c>)
    b1f0:	0018      	movs	r0, r3
    b1f2:	4b11      	ldr	r3, [pc, #68]	; (b238 <nm_drv_init+0x160>)
    b1f4:	4798      	blx	r3
    b1f6:	4b1b      	ldr	r3, [pc, #108]	; (b264 <nm_drv_init+0x18c>)
    b1f8:	0018      	movs	r0, r3
    b1fa:	4b11      	ldr	r3, [pc, #68]	; (b240 <nm_drv_init+0x168>)
    b1fc:	4798      	blx	r3
    b1fe:	200d      	movs	r0, #13
    b200:	4b10      	ldr	r3, [pc, #64]	; (b244 <nm_drv_init+0x16c>)
    b202:	4798      	blx	r3
		goto ERR2;
    b204:	e007      	b.n	b216 <nm_drv_init+0x13e>
	}
	return ret;
    b206:	230f      	movs	r3, #15
    b208:	18fb      	adds	r3, r7, r3
    b20a:	781b      	ldrb	r3, [r3, #0]
    b20c:	b25b      	sxtb	r3, r3
    b20e:	e008      	b.n	b222 <nm_drv_init+0x14a>
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    b210:	46c0      	nop			; (mov r8, r8)
    b212:	e000      	b.n	b216 <nm_drv_init+0x13e>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    b214:	46c0      	nop			; (mov r8, r8)
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    b216:	4b14      	ldr	r3, [pc, #80]	; (b268 <nm_drv_init+0x190>)
    b218:	4798      	blx	r3
ERR1:
	return ret;
    b21a:	230f      	movs	r3, #15
    b21c:	18fb      	adds	r3, r7, r3
    b21e:	781b      	ldrb	r3, [r3, #0]
    b220:	b25b      	sxtb	r3, r3
}
    b222:	0018      	movs	r0, r3
    b224:	46bd      	mov	sp, r7
    b226:	b005      	add	sp, #20
    b228:	bd90      	pop	{r4, r7, pc}
    b22a:	46c0      	nop			; (mov r8, r8)
    b22c:	0000ac39 	.word	0x0000ac39
    b230:	0001a444 	.word	0x0001a444
    b234:	0001a378 	.word	0x0001a378
    b238:	00018619 	.word	0x00018619
    b23c:	0001a38c 	.word	0x0001a38c
    b240:	00018739 	.word	0x00018739
    b244:	0001864d 	.word	0x0001864d
    b248:	0001a3a8 	.word	0x0001a3a8
    b24c:	0000a5d9 	.word	0x0000a5d9
    b250:	0001a3b4 	.word	0x0001a3b4
    b254:	0000c5ad 	.word	0x0000c5ad
    b258:	0000a92d 	.word	0x0000a92d
    b25c:	0000aac5 	.word	0x0000aac5
    b260:	0000a525 	.word	0x0000a525
    b264:	0001a3c4 	.word	0x0001a3c4
    b268:	0000ac6d 	.word	0x0000ac6d

0000b26c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    b26c:	b590      	push	{r4, r7, lr}
    b26e:	b085      	sub	sp, #20
    b270:	af00      	add	r7, sp, #0
    b272:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    b274:	230f      	movs	r3, #15
    b276:	18fc      	adds	r4, r7, r3
    b278:	4b2d      	ldr	r3, [pc, #180]	; (b330 <nm_drv_deinit+0xc4>)
    b27a:	4798      	blx	r3
    b27c:	0003      	movs	r3, r0
    b27e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b280:	230f      	movs	r3, #15
    b282:	18fb      	adds	r3, r7, r3
    b284:	781b      	ldrb	r3, [r3, #0]
    b286:	b25b      	sxtb	r3, r3
    b288:	2b00      	cmp	r3, #0
    b28a:	d00e      	beq.n	b2aa <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    b28c:	23b6      	movs	r3, #182	; 0xb6
    b28e:	005a      	lsls	r2, r3, #1
    b290:	4928      	ldr	r1, [pc, #160]	; (b334 <nm_drv_deinit+0xc8>)
    b292:	4b29      	ldr	r3, [pc, #164]	; (b338 <nm_drv_deinit+0xcc>)
    b294:	0018      	movs	r0, r3
    b296:	4b29      	ldr	r3, [pc, #164]	; (b33c <nm_drv_deinit+0xd0>)
    b298:	4798      	blx	r3
    b29a:	4b29      	ldr	r3, [pc, #164]	; (b340 <nm_drv_deinit+0xd4>)
    b29c:	0018      	movs	r0, r3
    b29e:	4b29      	ldr	r3, [pc, #164]	; (b344 <nm_drv_deinit+0xd8>)
    b2a0:	4798      	blx	r3
    b2a2:	200d      	movs	r0, #13
    b2a4:	4b28      	ldr	r3, [pc, #160]	; (b348 <nm_drv_deinit+0xdc>)
    b2a6:	4798      	blx	r3
		goto ERR1;
    b2a8:	e03a      	b.n	b320 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    b2aa:	230f      	movs	r3, #15
    b2ac:	18fc      	adds	r4, r7, r3
    b2ae:	2000      	movs	r0, #0
    b2b0:	4b26      	ldr	r3, [pc, #152]	; (b34c <nm_drv_deinit+0xe0>)
    b2b2:	4798      	blx	r3
    b2b4:	0003      	movs	r3, r0
    b2b6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b2b8:	230f      	movs	r3, #15
    b2ba:	18fb      	adds	r3, r7, r3
    b2bc:	781b      	ldrb	r3, [r3, #0]
    b2be:	b25b      	sxtb	r3, r3
    b2c0:	2b00      	cmp	r3, #0
    b2c2:	d00f      	beq.n	b2e4 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    b2c4:	2374      	movs	r3, #116	; 0x74
    b2c6:	33ff      	adds	r3, #255	; 0xff
    b2c8:	001a      	movs	r2, r3
    b2ca:	491a      	ldr	r1, [pc, #104]	; (b334 <nm_drv_deinit+0xc8>)
    b2cc:	4b1a      	ldr	r3, [pc, #104]	; (b338 <nm_drv_deinit+0xcc>)
    b2ce:	0018      	movs	r0, r3
    b2d0:	4b1a      	ldr	r3, [pc, #104]	; (b33c <nm_drv_deinit+0xd0>)
    b2d2:	4798      	blx	r3
    b2d4:	4b1e      	ldr	r3, [pc, #120]	; (b350 <nm_drv_deinit+0xe4>)
    b2d6:	0018      	movs	r0, r3
    b2d8:	4b1a      	ldr	r3, [pc, #104]	; (b344 <nm_drv_deinit+0xd8>)
    b2da:	4798      	blx	r3
    b2dc:	200d      	movs	r0, #13
    b2de:	4b1a      	ldr	r3, [pc, #104]	; (b348 <nm_drv_deinit+0xdc>)
    b2e0:	4798      	blx	r3
		goto ERR1;
    b2e2:	e01d      	b.n	b320 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    b2e4:	230f      	movs	r3, #15
    b2e6:	18fc      	adds	r4, r7, r3
    b2e8:	4b1a      	ldr	r3, [pc, #104]	; (b354 <nm_drv_deinit+0xe8>)
    b2ea:	4798      	blx	r3
    b2ec:	0003      	movs	r3, r0
    b2ee:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b2f0:	230f      	movs	r3, #15
    b2f2:	18fb      	adds	r3, r7, r3
    b2f4:	781b      	ldrb	r3, [r3, #0]
    b2f6:	b25b      	sxtb	r3, r3
    b2f8:	2b00      	cmp	r3, #0
    b2fa:	d00f      	beq.n	b31c <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    b2fc:	237a      	movs	r3, #122	; 0x7a
    b2fe:	33ff      	adds	r3, #255	; 0xff
    b300:	001a      	movs	r2, r3
    b302:	490c      	ldr	r1, [pc, #48]	; (b334 <nm_drv_deinit+0xc8>)
    b304:	4b0c      	ldr	r3, [pc, #48]	; (b338 <nm_drv_deinit+0xcc>)
    b306:	0018      	movs	r0, r3
    b308:	4b0c      	ldr	r3, [pc, #48]	; (b33c <nm_drv_deinit+0xd0>)
    b30a:	4798      	blx	r3
    b30c:	4b12      	ldr	r3, [pc, #72]	; (b358 <nm_drv_deinit+0xec>)
    b30e:	0018      	movs	r0, r3
    b310:	4b0c      	ldr	r3, [pc, #48]	; (b344 <nm_drv_deinit+0xd8>)
    b312:	4798      	blx	r3
    b314:	200d      	movs	r0, #13
    b316:	4b0c      	ldr	r3, [pc, #48]	; (b348 <nm_drv_deinit+0xdc>)
    b318:	4798      	blx	r3
		goto ERR1;
    b31a:	e001      	b.n	b320 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    b31c:	4b0f      	ldr	r3, [pc, #60]	; (b35c <nm_drv_deinit+0xf0>)
    b31e:	4798      	blx	r3
#endif

ERR1:
	return ret;
    b320:	230f      	movs	r3, #15
    b322:	18fb      	adds	r3, r7, r3
    b324:	781b      	ldrb	r3, [r3, #0]
    b326:	b25b      	sxtb	r3, r3
}
    b328:	0018      	movs	r0, r3
    b32a:	46bd      	mov	sp, r7
    b32c:	b005      	add	sp, #20
    b32e:	bd90      	pop	{r4, r7, pc}
    b330:	0000ab79 	.word	0x0000ab79
    b334:	0001a450 	.word	0x0001a450
    b338:	0001a378 	.word	0x0001a378
    b33c:	00018619 	.word	0x00018619
    b340:	0001a3e4 	.word	0x0001a3e4
    b344:	00018739 	.word	0x00018739
    b348:	0001864d 	.word	0x0001864d
    b34c:	0000da4d 	.word	0x0000da4d
    b350:	0001a404 	.word	0x0001a404
    b354:	0000ac6d 	.word	0x0000ac6d
    b358:	0001a428 	.word	0x0001a428
    b35c:	0000c6f9 	.word	0x0000c6f9

0000b360 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    b360:	b580      	push	{r7, lr}
    b362:	b086      	sub	sp, #24
    b364:	af00      	add	r7, sp, #0
    b366:	6078      	str	r0, [r7, #4]
    b368:	000a      	movs	r2, r1
    b36a:	1cbb      	adds	r3, r7, #2
    b36c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    b36e:	230c      	movs	r3, #12
    b370:	18fb      	adds	r3, r7, r3
    b372:	2200      	movs	r2, #0
    b374:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    b376:	230c      	movs	r3, #12
    b378:	18fb      	adds	r3, r7, r3
    b37a:	687a      	ldr	r2, [r7, #4]
    b37c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    b37e:	230c      	movs	r3, #12
    b380:	18fb      	adds	r3, r7, r3
    b382:	1cba      	adds	r2, r7, #2
    b384:	8812      	ldrh	r2, [r2, #0]
    b386:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    b388:	230c      	movs	r3, #12
    b38a:	18fb      	adds	r3, r7, r3
    b38c:	0019      	movs	r1, r3
    b38e:	2003      	movs	r0, #3
    b390:	4b03      	ldr	r3, [pc, #12]	; (b3a0 <nmi_spi_read+0x40>)
    b392:	4798      	blx	r3
    b394:	0003      	movs	r3, r0
}
    b396:	0018      	movs	r0, r3
    b398:	46bd      	mov	sp, r7
    b39a:	b006      	add	sp, #24
    b39c:	bd80      	pop	{r7, pc}
    b39e:	46c0      	nop			; (mov r8, r8)
    b3a0:	00008ae5 	.word	0x00008ae5

0000b3a4 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    b3a4:	b580      	push	{r7, lr}
    b3a6:	b086      	sub	sp, #24
    b3a8:	af00      	add	r7, sp, #0
    b3aa:	6078      	str	r0, [r7, #4]
    b3ac:	000a      	movs	r2, r1
    b3ae:	1cbb      	adds	r3, r7, #2
    b3b0:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    b3b2:	230c      	movs	r3, #12
    b3b4:	18fb      	adds	r3, r7, r3
    b3b6:	687a      	ldr	r2, [r7, #4]
    b3b8:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    b3ba:	230c      	movs	r3, #12
    b3bc:	18fb      	adds	r3, r7, r3
    b3be:	2200      	movs	r2, #0
    b3c0:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    b3c2:	230c      	movs	r3, #12
    b3c4:	18fb      	adds	r3, r7, r3
    b3c6:	1cba      	adds	r2, r7, #2
    b3c8:	8812      	ldrh	r2, [r2, #0]
    b3ca:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    b3cc:	230c      	movs	r3, #12
    b3ce:	18fb      	adds	r3, r7, r3
    b3d0:	0019      	movs	r1, r3
    b3d2:	2003      	movs	r0, #3
    b3d4:	4b03      	ldr	r3, [pc, #12]	; (b3e4 <nmi_spi_write+0x40>)
    b3d6:	4798      	blx	r3
    b3d8:	0003      	movs	r3, r0
}
    b3da:	0018      	movs	r0, r3
    b3dc:	46bd      	mov	sp, r7
    b3de:	b006      	add	sp, #24
    b3e0:	bd80      	pop	{r7, pc}
    b3e2:	46c0      	nop			; (mov r8, r8)
    b3e4:	00008ae5 	.word	0x00008ae5

0000b3e8 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    b3e8:	b580      	push	{r7, lr}
    b3ea:	b082      	sub	sp, #8
    b3ec:	af00      	add	r7, sp, #0
    b3ee:	0002      	movs	r2, r0
    b3f0:	1dfb      	adds	r3, r7, #7
    b3f2:	701a      	strb	r2, [r3, #0]
    b3f4:	1dbb      	adds	r3, r7, #6
    b3f6:	1c0a      	adds	r2, r1, #0
    b3f8:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    b3fa:	1dfb      	adds	r3, r7, #7
    b3fc:	781b      	ldrb	r3, [r3, #0]
    b3fe:	005a      	lsls	r2, r3, #1
    b400:	1dbb      	adds	r3, r7, #6
    b402:	781b      	ldrb	r3, [r3, #0]
    b404:	4053      	eors	r3, r2
    b406:	4a03      	ldr	r2, [pc, #12]	; (b414 <crc7_byte+0x2c>)
    b408:	5cd3      	ldrb	r3, [r2, r3]
}
    b40a:	0018      	movs	r0, r3
    b40c:	46bd      	mov	sp, r7
    b40e:	b002      	add	sp, #8
    b410:	bd80      	pop	{r7, pc}
    b412:	46c0      	nop			; (mov r8, r8)
    b414:	0001a460 	.word	0x0001a460

0000b418 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    b418:	b590      	push	{r4, r7, lr}
    b41a:	b085      	sub	sp, #20
    b41c:	af00      	add	r7, sp, #0
    b41e:	60b9      	str	r1, [r7, #8]
    b420:	607a      	str	r2, [r7, #4]
    b422:	230f      	movs	r3, #15
    b424:	18fb      	adds	r3, r7, r3
    b426:	1c02      	adds	r2, r0, #0
    b428:	701a      	strb	r2, [r3, #0]
	while (len--)
    b42a:	e00e      	b.n	b44a <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    b42c:	68bb      	ldr	r3, [r7, #8]
    b42e:	1c5a      	adds	r2, r3, #1
    b430:	60ba      	str	r2, [r7, #8]
    b432:	781a      	ldrb	r2, [r3, #0]
    b434:	230f      	movs	r3, #15
    b436:	18fc      	adds	r4, r7, r3
    b438:	230f      	movs	r3, #15
    b43a:	18fb      	adds	r3, r7, r3
    b43c:	781b      	ldrb	r3, [r3, #0]
    b43e:	0011      	movs	r1, r2
    b440:	0018      	movs	r0, r3
    b442:	4b08      	ldr	r3, [pc, #32]	; (b464 <crc7+0x4c>)
    b444:	4798      	blx	r3
    b446:	0003      	movs	r3, r0
    b448:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    b44a:	687b      	ldr	r3, [r7, #4]
    b44c:	1e5a      	subs	r2, r3, #1
    b44e:	607a      	str	r2, [r7, #4]
    b450:	2b00      	cmp	r3, #0
    b452:	d1eb      	bne.n	b42c <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    b454:	230f      	movs	r3, #15
    b456:	18fb      	adds	r3, r7, r3
    b458:	781b      	ldrb	r3, [r3, #0]
}
    b45a:	0018      	movs	r0, r3
    b45c:	46bd      	mov	sp, r7
    b45e:	b005      	add	sp, #20
    b460:	bd90      	pop	{r4, r7, pc}
    b462:	46c0      	nop			; (mov r8, r8)
    b464:	0000b3e9 	.word	0x0000b3e9

0000b468 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    b468:	b590      	push	{r4, r7, lr}
    b46a:	b089      	sub	sp, #36	; 0x24
    b46c:	af00      	add	r7, sp, #0
    b46e:	60b9      	str	r1, [r7, #8]
    b470:	607a      	str	r2, [r7, #4]
    b472:	603b      	str	r3, [r7, #0]
    b474:	230f      	movs	r3, #15
    b476:	18fb      	adds	r3, r7, r3
    b478:	1c02      	adds	r2, r0, #0
    b47a:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    b47c:	231f      	movs	r3, #31
    b47e:	18fb      	adds	r3, r7, r3
    b480:	2205      	movs	r2, #5
    b482:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    b484:	231e      	movs	r3, #30
    b486:	18fb      	adds	r3, r7, r3
    b488:	2201      	movs	r2, #1
    b48a:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    b48c:	2314      	movs	r3, #20
    b48e:	18fb      	adds	r3, r7, r3
    b490:	220f      	movs	r2, #15
    b492:	18ba      	adds	r2, r7, r2
    b494:	7812      	ldrb	r2, [r2, #0]
    b496:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    b498:	230f      	movs	r3, #15
    b49a:	18fb      	adds	r3, r7, r3
    b49c:	781b      	ldrb	r3, [r3, #0]
    b49e:	3bc1      	subs	r3, #193	; 0xc1
    b4a0:	2b0e      	cmp	r3, #14
    b4a2:	d900      	bls.n	b4a6 <spi_cmd+0x3e>
    b4a4:	e11b      	b.n	b6de <spi_cmd+0x276>
    b4a6:	009a      	lsls	r2, r3, #2
    b4a8:	4bb6      	ldr	r3, [pc, #728]	; (b784 <spi_cmd+0x31c>)
    b4aa:	18d3      	adds	r3, r2, r3
    b4ac:	681b      	ldr	r3, [r3, #0]
    b4ae:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    b4b0:	68bb      	ldr	r3, [r7, #8]
    b4b2:	0c1b      	lsrs	r3, r3, #16
    b4b4:	b2da      	uxtb	r2, r3
    b4b6:	2314      	movs	r3, #20
    b4b8:	18fb      	adds	r3, r7, r3
    b4ba:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b4bc:	68bb      	ldr	r3, [r7, #8]
    b4be:	0a1b      	lsrs	r3, r3, #8
    b4c0:	b2da      	uxtb	r2, r3
    b4c2:	2314      	movs	r3, #20
    b4c4:	18fb      	adds	r3, r7, r3
    b4c6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    b4c8:	68bb      	ldr	r3, [r7, #8]
    b4ca:	b2da      	uxtb	r2, r3
    b4cc:	2314      	movs	r3, #20
    b4ce:	18fb      	adds	r3, r7, r3
    b4d0:	70da      	strb	r2, [r3, #3]
		len = 5;
    b4d2:	231f      	movs	r3, #31
    b4d4:	18fb      	adds	r3, r7, r3
    b4d6:	2205      	movs	r2, #5
    b4d8:	701a      	strb	r2, [r3, #0]
		break;
    b4da:	e105      	b.n	b6e8 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    b4dc:	68bb      	ldr	r3, [r7, #8]
    b4de:	0a1b      	lsrs	r3, r3, #8
    b4e0:	b2da      	uxtb	r2, r3
    b4e2:	2314      	movs	r3, #20
    b4e4:	18fb      	adds	r3, r7, r3
    b4e6:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    b4e8:	2330      	movs	r3, #48	; 0x30
    b4ea:	18fb      	adds	r3, r7, r3
    b4ec:	781b      	ldrb	r3, [r3, #0]
    b4ee:	2b00      	cmp	r3, #0
    b4f0:	d009      	beq.n	b506 <spi_cmd+0x9e>
    b4f2:	2314      	movs	r3, #20
    b4f4:	18fb      	adds	r3, r7, r3
    b4f6:	785b      	ldrb	r3, [r3, #1]
    b4f8:	2280      	movs	r2, #128	; 0x80
    b4fa:	4252      	negs	r2, r2
    b4fc:	4313      	orrs	r3, r2
    b4fe:	b2da      	uxtb	r2, r3
    b500:	2314      	movs	r3, #20
    b502:	18fb      	adds	r3, r7, r3
    b504:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    b506:	68bb      	ldr	r3, [r7, #8]
    b508:	b2da      	uxtb	r2, r3
    b50a:	2314      	movs	r3, #20
    b50c:	18fb      	adds	r3, r7, r3
    b50e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b510:	2314      	movs	r3, #20
    b512:	18fb      	adds	r3, r7, r3
    b514:	2200      	movs	r2, #0
    b516:	70da      	strb	r2, [r3, #3]
		len = 5;
    b518:	231f      	movs	r3, #31
    b51a:	18fb      	adds	r3, r7, r3
    b51c:	2205      	movs	r2, #5
    b51e:	701a      	strb	r2, [r3, #0]
		break;
    b520:	e0e2      	b.n	b6e8 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    b522:	2314      	movs	r3, #20
    b524:	18fb      	adds	r3, r7, r3
    b526:	2200      	movs	r2, #0
    b528:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    b52a:	2314      	movs	r3, #20
    b52c:	18fb      	adds	r3, r7, r3
    b52e:	2200      	movs	r2, #0
    b530:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b532:	2314      	movs	r3, #20
    b534:	18fb      	adds	r3, r7, r3
    b536:	2200      	movs	r2, #0
    b538:	70da      	strb	r2, [r3, #3]
		len = 5;
    b53a:	231f      	movs	r3, #31
    b53c:	18fb      	adds	r3, r7, r3
    b53e:	2205      	movs	r2, #5
    b540:	701a      	strb	r2, [r3, #0]
		break;
    b542:	e0d1      	b.n	b6e8 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    b544:	2314      	movs	r3, #20
    b546:	18fb      	adds	r3, r7, r3
    b548:	2200      	movs	r2, #0
    b54a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    b54c:	2314      	movs	r3, #20
    b54e:	18fb      	adds	r3, r7, r3
    b550:	2200      	movs	r2, #0
    b552:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b554:	2314      	movs	r3, #20
    b556:	18fb      	adds	r3, r7, r3
    b558:	2200      	movs	r2, #0
    b55a:	70da      	strb	r2, [r3, #3]
		len = 5;
    b55c:	231f      	movs	r3, #31
    b55e:	18fb      	adds	r3, r7, r3
    b560:	2205      	movs	r2, #5
    b562:	701a      	strb	r2, [r3, #0]
		break;
    b564:	e0c0      	b.n	b6e8 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    b566:	2314      	movs	r3, #20
    b568:	18fb      	adds	r3, r7, r3
    b56a:	22ff      	movs	r2, #255	; 0xff
    b56c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    b56e:	2314      	movs	r3, #20
    b570:	18fb      	adds	r3, r7, r3
    b572:	22ff      	movs	r2, #255	; 0xff
    b574:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    b576:	2314      	movs	r3, #20
    b578:	18fb      	adds	r3, r7, r3
    b57a:	22ff      	movs	r2, #255	; 0xff
    b57c:	70da      	strb	r2, [r3, #3]
		len = 5;
    b57e:	231f      	movs	r3, #31
    b580:	18fb      	adds	r3, r7, r3
    b582:	2205      	movs	r2, #5
    b584:	701a      	strb	r2, [r3, #0]
		break;
    b586:	e0af      	b.n	b6e8 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    b588:	68bb      	ldr	r3, [r7, #8]
    b58a:	0c1b      	lsrs	r3, r3, #16
    b58c:	b2da      	uxtb	r2, r3
    b58e:	2314      	movs	r3, #20
    b590:	18fb      	adds	r3, r7, r3
    b592:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b594:	68bb      	ldr	r3, [r7, #8]
    b596:	0a1b      	lsrs	r3, r3, #8
    b598:	b2da      	uxtb	r2, r3
    b59a:	2314      	movs	r3, #20
    b59c:	18fb      	adds	r3, r7, r3
    b59e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    b5a0:	68bb      	ldr	r3, [r7, #8]
    b5a2:	b2da      	uxtb	r2, r3
    b5a4:	2314      	movs	r3, #20
    b5a6:	18fb      	adds	r3, r7, r3
    b5a8:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    b5aa:	683b      	ldr	r3, [r7, #0]
    b5ac:	0a1b      	lsrs	r3, r3, #8
    b5ae:	b2da      	uxtb	r2, r3
    b5b0:	2314      	movs	r3, #20
    b5b2:	18fb      	adds	r3, r7, r3
    b5b4:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    b5b6:	683b      	ldr	r3, [r7, #0]
    b5b8:	b2da      	uxtb	r2, r3
    b5ba:	2314      	movs	r3, #20
    b5bc:	18fb      	adds	r3, r7, r3
    b5be:	715a      	strb	r2, [r3, #5]
		len = 7;
    b5c0:	231f      	movs	r3, #31
    b5c2:	18fb      	adds	r3, r7, r3
    b5c4:	2207      	movs	r2, #7
    b5c6:	701a      	strb	r2, [r3, #0]
		break;
    b5c8:	e08e      	b.n	b6e8 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    b5ca:	68bb      	ldr	r3, [r7, #8]
    b5cc:	0c1b      	lsrs	r3, r3, #16
    b5ce:	b2da      	uxtb	r2, r3
    b5d0:	2314      	movs	r3, #20
    b5d2:	18fb      	adds	r3, r7, r3
    b5d4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b5d6:	68bb      	ldr	r3, [r7, #8]
    b5d8:	0a1b      	lsrs	r3, r3, #8
    b5da:	b2da      	uxtb	r2, r3
    b5dc:	2314      	movs	r3, #20
    b5de:	18fb      	adds	r3, r7, r3
    b5e0:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    b5e2:	68bb      	ldr	r3, [r7, #8]
    b5e4:	b2da      	uxtb	r2, r3
    b5e6:	2314      	movs	r3, #20
    b5e8:	18fb      	adds	r3, r7, r3
    b5ea:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    b5ec:	683b      	ldr	r3, [r7, #0]
    b5ee:	0c1b      	lsrs	r3, r3, #16
    b5f0:	b2da      	uxtb	r2, r3
    b5f2:	2314      	movs	r3, #20
    b5f4:	18fb      	adds	r3, r7, r3
    b5f6:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    b5f8:	683b      	ldr	r3, [r7, #0]
    b5fa:	0a1b      	lsrs	r3, r3, #8
    b5fc:	b2da      	uxtb	r2, r3
    b5fe:	2314      	movs	r3, #20
    b600:	18fb      	adds	r3, r7, r3
    b602:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    b604:	683b      	ldr	r3, [r7, #0]
    b606:	b2da      	uxtb	r2, r3
    b608:	2314      	movs	r3, #20
    b60a:	18fb      	adds	r3, r7, r3
    b60c:	719a      	strb	r2, [r3, #6]
		len = 8;
    b60e:	231f      	movs	r3, #31
    b610:	18fb      	adds	r3, r7, r3
    b612:	2208      	movs	r2, #8
    b614:	701a      	strb	r2, [r3, #0]
		break;
    b616:	e067      	b.n	b6e8 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    b618:	68bb      	ldr	r3, [r7, #8]
    b61a:	0a1b      	lsrs	r3, r3, #8
    b61c:	b2da      	uxtb	r2, r3
    b61e:	2314      	movs	r3, #20
    b620:	18fb      	adds	r3, r7, r3
    b622:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    b624:	2330      	movs	r3, #48	; 0x30
    b626:	18fb      	adds	r3, r7, r3
    b628:	781b      	ldrb	r3, [r3, #0]
    b62a:	2b00      	cmp	r3, #0
    b62c:	d009      	beq.n	b642 <spi_cmd+0x1da>
    b62e:	2314      	movs	r3, #20
    b630:	18fb      	adds	r3, r7, r3
    b632:	785b      	ldrb	r3, [r3, #1]
    b634:	2280      	movs	r2, #128	; 0x80
    b636:	4252      	negs	r2, r2
    b638:	4313      	orrs	r3, r2
    b63a:	b2da      	uxtb	r2, r3
    b63c:	2314      	movs	r3, #20
    b63e:	18fb      	adds	r3, r7, r3
    b640:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    b642:	68bb      	ldr	r3, [r7, #8]
    b644:	b2da      	uxtb	r2, r3
    b646:	2314      	movs	r3, #20
    b648:	18fb      	adds	r3, r7, r3
    b64a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    b64c:	687b      	ldr	r3, [r7, #4]
    b64e:	0e1b      	lsrs	r3, r3, #24
    b650:	b2da      	uxtb	r2, r3
    b652:	2314      	movs	r3, #20
    b654:	18fb      	adds	r3, r7, r3
    b656:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    b658:	687b      	ldr	r3, [r7, #4]
    b65a:	0c1b      	lsrs	r3, r3, #16
    b65c:	b2da      	uxtb	r2, r3
    b65e:	2314      	movs	r3, #20
    b660:	18fb      	adds	r3, r7, r3
    b662:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    b664:	687b      	ldr	r3, [r7, #4]
    b666:	0a1b      	lsrs	r3, r3, #8
    b668:	b2da      	uxtb	r2, r3
    b66a:	2314      	movs	r3, #20
    b66c:	18fb      	adds	r3, r7, r3
    b66e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    b670:	687b      	ldr	r3, [r7, #4]
    b672:	b2da      	uxtb	r2, r3
    b674:	2314      	movs	r3, #20
    b676:	18fb      	adds	r3, r7, r3
    b678:	719a      	strb	r2, [r3, #6]
		len = 8;
    b67a:	231f      	movs	r3, #31
    b67c:	18fb      	adds	r3, r7, r3
    b67e:	2208      	movs	r2, #8
    b680:	701a      	strb	r2, [r3, #0]
		break;
    b682:	e031      	b.n	b6e8 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    b684:	68bb      	ldr	r3, [r7, #8]
    b686:	0c1b      	lsrs	r3, r3, #16
    b688:	b2da      	uxtb	r2, r3
    b68a:	2314      	movs	r3, #20
    b68c:	18fb      	adds	r3, r7, r3
    b68e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b690:	68bb      	ldr	r3, [r7, #8]
    b692:	0a1b      	lsrs	r3, r3, #8
    b694:	b2da      	uxtb	r2, r3
    b696:	2314      	movs	r3, #20
    b698:	18fb      	adds	r3, r7, r3
    b69a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    b69c:	68bb      	ldr	r3, [r7, #8]
    b69e:	b2da      	uxtb	r2, r3
    b6a0:	2314      	movs	r3, #20
    b6a2:	18fb      	adds	r3, r7, r3
    b6a4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    b6a6:	687b      	ldr	r3, [r7, #4]
    b6a8:	0e1b      	lsrs	r3, r3, #24
    b6aa:	b2da      	uxtb	r2, r3
    b6ac:	2314      	movs	r3, #20
    b6ae:	18fb      	adds	r3, r7, r3
    b6b0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    b6b2:	687b      	ldr	r3, [r7, #4]
    b6b4:	0c1b      	lsrs	r3, r3, #16
    b6b6:	b2da      	uxtb	r2, r3
    b6b8:	2314      	movs	r3, #20
    b6ba:	18fb      	adds	r3, r7, r3
    b6bc:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    b6be:	687b      	ldr	r3, [r7, #4]
    b6c0:	0a1b      	lsrs	r3, r3, #8
    b6c2:	b2da      	uxtb	r2, r3
    b6c4:	2314      	movs	r3, #20
    b6c6:	18fb      	adds	r3, r7, r3
    b6c8:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    b6ca:	687b      	ldr	r3, [r7, #4]
    b6cc:	b2da      	uxtb	r2, r3
    b6ce:	2314      	movs	r3, #20
    b6d0:	18fb      	adds	r3, r7, r3
    b6d2:	71da      	strb	r2, [r3, #7]
		len = 9;
    b6d4:	231f      	movs	r3, #31
    b6d6:	18fb      	adds	r3, r7, r3
    b6d8:	2209      	movs	r2, #9
    b6da:	701a      	strb	r2, [r3, #0]
		break;
    b6dc:	e004      	b.n	b6e8 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    b6de:	231e      	movs	r3, #30
    b6e0:	18fb      	adds	r3, r7, r3
    b6e2:	2200      	movs	r2, #0
    b6e4:	701a      	strb	r2, [r3, #0]
		break;
    b6e6:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    b6e8:	231e      	movs	r3, #30
    b6ea:	18fb      	adds	r3, r7, r3
    b6ec:	781b      	ldrb	r3, [r3, #0]
    b6ee:	b25b      	sxtb	r3, r3
    b6f0:	2b00      	cmp	r3, #0
    b6f2:	d03f      	beq.n	b774 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    b6f4:	4b24      	ldr	r3, [pc, #144]	; (b788 <spi_cmd+0x320>)
    b6f6:	781b      	ldrb	r3, [r3, #0]
    b6f8:	2b00      	cmp	r3, #0
    b6fa:	d115      	bne.n	b728 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    b6fc:	231f      	movs	r3, #31
    b6fe:	18fb      	adds	r3, r7, r3
    b700:	781b      	ldrb	r3, [r3, #0]
    b702:	1e5c      	subs	r4, r3, #1
    b704:	231f      	movs	r3, #31
    b706:	18fb      	adds	r3, r7, r3
    b708:	781b      	ldrb	r3, [r3, #0]
    b70a:	3b01      	subs	r3, #1
    b70c:	001a      	movs	r2, r3
    b70e:	2314      	movs	r3, #20
    b710:	18fb      	adds	r3, r7, r3
    b712:	0019      	movs	r1, r3
    b714:	207f      	movs	r0, #127	; 0x7f
    b716:	4b1d      	ldr	r3, [pc, #116]	; (b78c <spi_cmd+0x324>)
    b718:	4798      	blx	r3
    b71a:	0003      	movs	r3, r0
    b71c:	18db      	adds	r3, r3, r3
    b71e:	b2da      	uxtb	r2, r3
    b720:	2314      	movs	r3, #20
    b722:	18fb      	adds	r3, r7, r3
    b724:	551a      	strb	r2, [r3, r4]
    b726:	e006      	b.n	b736 <spi_cmd+0x2ce>
		else
			len-=1;
    b728:	231f      	movs	r3, #31
    b72a:	18fb      	adds	r3, r7, r3
    b72c:	221f      	movs	r2, #31
    b72e:	18ba      	adds	r2, r7, r2
    b730:	7812      	ldrb	r2, [r2, #0]
    b732:	3a01      	subs	r2, #1
    b734:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    b736:	231f      	movs	r3, #31
    b738:	18fb      	adds	r3, r7, r3
    b73a:	781b      	ldrb	r3, [r3, #0]
    b73c:	b29a      	uxth	r2, r3
    b73e:	2314      	movs	r3, #20
    b740:	18fb      	adds	r3, r7, r3
    b742:	0011      	movs	r1, r2
    b744:	0018      	movs	r0, r3
    b746:	4b12      	ldr	r3, [pc, #72]	; (b790 <spi_cmd+0x328>)
    b748:	4798      	blx	r3
    b74a:	1e03      	subs	r3, r0, #0
    b74c:	d012      	beq.n	b774 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    b74e:	2328      	movs	r3, #40	; 0x28
    b750:	33ff      	adds	r3, #255	; 0xff
    b752:	001a      	movs	r2, r3
    b754:	490f      	ldr	r1, [pc, #60]	; (b794 <spi_cmd+0x32c>)
    b756:	4b10      	ldr	r3, [pc, #64]	; (b798 <spi_cmd+0x330>)
    b758:	0018      	movs	r0, r3
    b75a:	4b10      	ldr	r3, [pc, #64]	; (b79c <spi_cmd+0x334>)
    b75c:	4798      	blx	r3
    b75e:	4b10      	ldr	r3, [pc, #64]	; (b7a0 <spi_cmd+0x338>)
    b760:	0018      	movs	r0, r3
    b762:	4b10      	ldr	r3, [pc, #64]	; (b7a4 <spi_cmd+0x33c>)
    b764:	4798      	blx	r3
    b766:	200d      	movs	r0, #13
    b768:	4b0f      	ldr	r3, [pc, #60]	; (b7a8 <spi_cmd+0x340>)
    b76a:	4798      	blx	r3
			result = N_FAIL;
    b76c:	231e      	movs	r3, #30
    b76e:	18fb      	adds	r3, r7, r3
    b770:	2200      	movs	r2, #0
    b772:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    b774:	231e      	movs	r3, #30
    b776:	18fb      	adds	r3, r7, r3
    b778:	781b      	ldrb	r3, [r3, #0]
    b77a:	b25b      	sxtb	r3, r3
}
    b77c:	0018      	movs	r0, r3
    b77e:	46bd      	mov	sp, r7
    b780:	b009      	add	sp, #36	; 0x24
    b782:	bd90      	pop	{r4, r7, pc}
    b784:	0001aab8 	.word	0x0001aab8
    b788:	200000c0 	.word	0x200000c0
    b78c:	0000b419 	.word	0x0000b419
    b790:	0000b3a5 	.word	0x0000b3a5
    b794:	0001aaf4 	.word	0x0001aaf4
    b798:	0001a560 	.word	0x0001a560
    b79c:	00018619 	.word	0x00018619
    b7a0:	0001a574 	.word	0x0001a574
    b7a4:	00018739 	.word	0x00018739
    b7a8:	0001864d 	.word	0x0001864d

0000b7ac <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    b7ac:	b590      	push	{r4, r7, lr}
    b7ae:	b085      	sub	sp, #20
    b7b0:	af00      	add	r7, sp, #0
    b7b2:	0002      	movs	r2, r0
    b7b4:	1dfb      	adds	r3, r7, #7
    b7b6:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    b7b8:	230e      	movs	r3, #14
    b7ba:	18fb      	adds	r3, r7, r3
    b7bc:	2201      	movs	r2, #1
    b7be:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    b7c0:	4b31      	ldr	r3, [pc, #196]	; (b888 <spi_data_rsp+0xdc>)
    b7c2:	781b      	ldrb	r3, [r3, #0]
    b7c4:	2b00      	cmp	r3, #0
    b7c6:	d104      	bne.n	b7d2 <spi_data_rsp+0x26>
		len = 2;
    b7c8:	230f      	movs	r3, #15
    b7ca:	18fb      	adds	r3, r7, r3
    b7cc:	2202      	movs	r2, #2
    b7ce:	701a      	strb	r2, [r3, #0]
    b7d0:	e003      	b.n	b7da <spi_data_rsp+0x2e>
	else
		len = 3;
    b7d2:	230f      	movs	r3, #15
    b7d4:	18fb      	adds	r3, r7, r3
    b7d6:	2203      	movs	r2, #3
    b7d8:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    b7da:	230f      	movs	r3, #15
    b7dc:	18fb      	adds	r3, r7, r3
    b7de:	781b      	ldrb	r3, [r3, #0]
    b7e0:	b29a      	uxth	r2, r3
    b7e2:	2308      	movs	r3, #8
    b7e4:	18fb      	adds	r3, r7, r3
    b7e6:	0011      	movs	r1, r2
    b7e8:	0018      	movs	r0, r3
    b7ea:	4b28      	ldr	r3, [pc, #160]	; (b88c <spi_data_rsp+0xe0>)
    b7ec:	4798      	blx	r3
    b7ee:	1e03      	subs	r3, r0, #0
    b7f0:	d013      	beq.n	b81a <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    b7f2:	233c      	movs	r3, #60	; 0x3c
    b7f4:	33ff      	adds	r3, #255	; 0xff
    b7f6:	001a      	movs	r2, r3
    b7f8:	4925      	ldr	r1, [pc, #148]	; (b890 <spi_data_rsp+0xe4>)
    b7fa:	4b26      	ldr	r3, [pc, #152]	; (b894 <spi_data_rsp+0xe8>)
    b7fc:	0018      	movs	r0, r3
    b7fe:	4b26      	ldr	r3, [pc, #152]	; (b898 <spi_data_rsp+0xec>)
    b800:	4798      	blx	r3
    b802:	4b26      	ldr	r3, [pc, #152]	; (b89c <spi_data_rsp+0xf0>)
    b804:	0018      	movs	r0, r3
    b806:	4b26      	ldr	r3, [pc, #152]	; (b8a0 <spi_data_rsp+0xf4>)
    b808:	4798      	blx	r3
    b80a:	200d      	movs	r0, #13
    b80c:	4b25      	ldr	r3, [pc, #148]	; (b8a4 <spi_data_rsp+0xf8>)
    b80e:	4798      	blx	r3
		result = N_FAIL;
    b810:	230e      	movs	r3, #14
    b812:	18fb      	adds	r3, r7, r3
    b814:	2200      	movs	r2, #0
    b816:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    b818:	e02e      	b.n	b878 <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    b81a:	230f      	movs	r3, #15
    b81c:	18fb      	adds	r3, r7, r3
    b81e:	781b      	ldrb	r3, [r3, #0]
    b820:	3b01      	subs	r3, #1
    b822:	2208      	movs	r2, #8
    b824:	18ba      	adds	r2, r7, r2
    b826:	5cd3      	ldrb	r3, [r2, r3]
    b828:	2b00      	cmp	r3, #0
    b82a:	d108      	bne.n	b83e <spi_data_rsp+0x92>
    b82c:	230f      	movs	r3, #15
    b82e:	18fb      	adds	r3, r7, r3
    b830:	781b      	ldrb	r3, [r3, #0]
    b832:	3b02      	subs	r3, #2
    b834:	2208      	movs	r2, #8
    b836:	18ba      	adds	r2, r7, r2
    b838:	5cd3      	ldrb	r3, [r2, r3]
    b83a:	2bc3      	cmp	r3, #195	; 0xc3
    b83c:	d01c      	beq.n	b878 <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    b83e:	23a1      	movs	r3, #161	; 0xa1
    b840:	005a      	lsls	r2, r3, #1
    b842:	4913      	ldr	r1, [pc, #76]	; (b890 <spi_data_rsp+0xe4>)
    b844:	4b13      	ldr	r3, [pc, #76]	; (b894 <spi_data_rsp+0xe8>)
    b846:	0018      	movs	r0, r3
    b848:	4b13      	ldr	r3, [pc, #76]	; (b898 <spi_data_rsp+0xec>)
    b84a:	4798      	blx	r3
    b84c:	2308      	movs	r3, #8
    b84e:	18fb      	adds	r3, r7, r3
    b850:	781b      	ldrb	r3, [r3, #0]
    b852:	0019      	movs	r1, r3
    b854:	2308      	movs	r3, #8
    b856:	18fb      	adds	r3, r7, r3
    b858:	785b      	ldrb	r3, [r3, #1]
    b85a:	001a      	movs	r2, r3
    b85c:	2308      	movs	r3, #8
    b85e:	18fb      	adds	r3, r7, r3
    b860:	789b      	ldrb	r3, [r3, #2]
    b862:	4811      	ldr	r0, [pc, #68]	; (b8a8 <spi_data_rsp+0xfc>)
    b864:	4c0c      	ldr	r4, [pc, #48]	; (b898 <spi_data_rsp+0xec>)
    b866:	47a0      	blx	r4
    b868:	200d      	movs	r0, #13
    b86a:	4b0e      	ldr	r3, [pc, #56]	; (b8a4 <spi_data_rsp+0xf8>)
    b86c:	4798      	blx	r3
		result = N_FAIL;
    b86e:	230e      	movs	r3, #14
    b870:	18fb      	adds	r3, r7, r3
    b872:	2200      	movs	r2, #0
    b874:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    b876:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    b878:	230e      	movs	r3, #14
    b87a:	18fb      	adds	r3, r7, r3
    b87c:	781b      	ldrb	r3, [r3, #0]
    b87e:	b25b      	sxtb	r3, r3
}
    b880:	0018      	movs	r0, r3
    b882:	46bd      	mov	sp, r7
    b884:	b005      	add	sp, #20
    b886:	bd90      	pop	{r4, r7, pc}
    b888:	200000c0 	.word	0x200000c0
    b88c:	0000b361 	.word	0x0000b361
    b890:	0001aafc 	.word	0x0001aafc
    b894:	0001a560 	.word	0x0001a560
    b898:	00018619 	.word	0x00018619
    b89c:	0001a5a0 	.word	0x0001a5a0
    b8a0:	00018739 	.word	0x00018739
    b8a4:	0001864d 	.word	0x0001864d
    b8a8:	0001a5c0 	.word	0x0001a5c0

0000b8ac <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    b8ac:	b580      	push	{r7, lr}
    b8ae:	b084      	sub	sp, #16
    b8b0:	af00      	add	r7, sp, #0
    b8b2:	0002      	movs	r2, r0
    b8b4:	1dfb      	adds	r3, r7, #7
    b8b6:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    b8b8:	230f      	movs	r3, #15
    b8ba:	18fb      	adds	r3, r7, r3
    b8bc:	2201      	movs	r2, #1
    b8be:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    b8c0:	1dfb      	adds	r3, r7, #7
    b8c2:	781b      	ldrb	r3, [r3, #0]
    b8c4:	2bcf      	cmp	r3, #207	; 0xcf
    b8c6:	d007      	beq.n	b8d8 <spi_cmd_rsp+0x2c>
    b8c8:	1dfb      	adds	r3, r7, #7
    b8ca:	781b      	ldrb	r3, [r3, #0]
    b8cc:	2bc5      	cmp	r3, #197	; 0xc5
    b8ce:	d003      	beq.n	b8d8 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    b8d0:	1dfb      	adds	r3, r7, #7
    b8d2:	781b      	ldrb	r3, [r3, #0]
    b8d4:	2bc6      	cmp	r3, #198	; 0xc6
    b8d6:	d10c      	bne.n	b8f2 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b8d8:	230d      	movs	r3, #13
    b8da:	18fb      	adds	r3, r7, r3
    b8dc:	2101      	movs	r1, #1
    b8de:	0018      	movs	r0, r3
    b8e0:	4b39      	ldr	r3, [pc, #228]	; (b9c8 <spi_cmd_rsp+0x11c>)
    b8e2:	4798      	blx	r3
    b8e4:	1e03      	subs	r3, r0, #0
    b8e6:	d004      	beq.n	b8f2 <spi_cmd_rsp+0x46>
			result = N_FAIL;
    b8e8:	230f      	movs	r3, #15
    b8ea:	18fb      	adds	r3, r7, r3
    b8ec:	2200      	movs	r2, #0
    b8ee:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    b8f0:	e061      	b.n	b9b6 <spi_cmd_rsp+0x10a>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    b8f2:	230e      	movs	r3, #14
    b8f4:	18fb      	adds	r3, r7, r3
    b8f6:	220a      	movs	r2, #10
    b8f8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b8fa:	230d      	movs	r3, #13
    b8fc:	18fb      	adds	r3, r7, r3
    b8fe:	2101      	movs	r1, #1
    b900:	0018      	movs	r0, r3
    b902:	4b31      	ldr	r3, [pc, #196]	; (b9c8 <spi_cmd_rsp+0x11c>)
    b904:	4798      	blx	r3
    b906:	1e03      	subs	r3, r0, #0
    b908:	d012      	beq.n	b930 <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    b90a:	23b1      	movs	r3, #177	; 0xb1
    b90c:	005a      	lsls	r2, r3, #1
    b90e:	492f      	ldr	r1, [pc, #188]	; (b9cc <spi_cmd_rsp+0x120>)
    b910:	4b2f      	ldr	r3, [pc, #188]	; (b9d0 <spi_cmd_rsp+0x124>)
    b912:	0018      	movs	r0, r3
    b914:	4b2f      	ldr	r3, [pc, #188]	; (b9d4 <spi_cmd_rsp+0x128>)
    b916:	4798      	blx	r3
    b918:	4b2f      	ldr	r3, [pc, #188]	; (b9d8 <spi_cmd_rsp+0x12c>)
    b91a:	0018      	movs	r0, r3
    b91c:	4b2f      	ldr	r3, [pc, #188]	; (b9dc <spi_cmd_rsp+0x130>)
    b91e:	4798      	blx	r3
    b920:	200d      	movs	r0, #13
    b922:	4b2f      	ldr	r3, [pc, #188]	; (b9e0 <spi_cmd_rsp+0x134>)
    b924:	4798      	blx	r3
			result = N_FAIL;
    b926:	230f      	movs	r3, #15
    b928:	18fb      	adds	r3, r7, r3
    b92a:	2200      	movs	r2, #0
    b92c:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    b92e:	e042      	b.n	b9b6 <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    b930:	230d      	movs	r3, #13
    b932:	18fb      	adds	r3, r7, r3
    b934:	781b      	ldrb	r3, [r3, #0]
    b936:	1dfa      	adds	r2, r7, #7
    b938:	7812      	ldrb	r2, [r2, #0]
    b93a:	429a      	cmp	r2, r3
    b93c:	d00b      	beq.n	b956 <spi_cmd_rsp+0xaa>
    b93e:	230e      	movs	r3, #14
    b940:	18fb      	adds	r3, r7, r3
    b942:	781b      	ldrb	r3, [r3, #0]
    b944:	b25b      	sxtb	r3, r3
    b946:	b2da      	uxtb	r2, r3
    b948:	3a01      	subs	r2, #1
    b94a:	b2d1      	uxtb	r1, r2
    b94c:	220e      	movs	r2, #14
    b94e:	18ba      	adds	r2, r7, r2
    b950:	7011      	strb	r1, [r2, #0]
    b952:	2b00      	cmp	r3, #0
    b954:	dcd1      	bgt.n	b8fa <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    b956:	230e      	movs	r3, #14
    b958:	18fb      	adds	r3, r7, r3
    b95a:	220a      	movs	r2, #10
    b95c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b95e:	230d      	movs	r3, #13
    b960:	18fb      	adds	r3, r7, r3
    b962:	2101      	movs	r1, #1
    b964:	0018      	movs	r0, r3
    b966:	4b18      	ldr	r3, [pc, #96]	; (b9c8 <spi_cmd_rsp+0x11c>)
    b968:	4798      	blx	r3
    b96a:	1e03      	subs	r3, r0, #0
    b96c:	d012      	beq.n	b994 <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    b96e:	23b8      	movs	r3, #184	; 0xb8
    b970:	005a      	lsls	r2, r3, #1
    b972:	4916      	ldr	r1, [pc, #88]	; (b9cc <spi_cmd_rsp+0x120>)
    b974:	4b16      	ldr	r3, [pc, #88]	; (b9d0 <spi_cmd_rsp+0x124>)
    b976:	0018      	movs	r0, r3
    b978:	4b16      	ldr	r3, [pc, #88]	; (b9d4 <spi_cmd_rsp+0x128>)
    b97a:	4798      	blx	r3
    b97c:	4b16      	ldr	r3, [pc, #88]	; (b9d8 <spi_cmd_rsp+0x12c>)
    b97e:	0018      	movs	r0, r3
    b980:	4b16      	ldr	r3, [pc, #88]	; (b9dc <spi_cmd_rsp+0x130>)
    b982:	4798      	blx	r3
    b984:	200d      	movs	r0, #13
    b986:	4b16      	ldr	r3, [pc, #88]	; (b9e0 <spi_cmd_rsp+0x134>)
    b988:	4798      	blx	r3
			result = N_FAIL;
    b98a:	230f      	movs	r3, #15
    b98c:	18fb      	adds	r3, r7, r3
    b98e:	2200      	movs	r2, #0
    b990:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    b992:	e010      	b.n	b9b6 <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    b994:	230d      	movs	r3, #13
    b996:	18fb      	adds	r3, r7, r3
    b998:	781b      	ldrb	r3, [r3, #0]
    b99a:	2b00      	cmp	r3, #0
    b99c:	d00b      	beq.n	b9b6 <spi_cmd_rsp+0x10a>
    b99e:	230e      	movs	r3, #14
    b9a0:	18fb      	adds	r3, r7, r3
    b9a2:	781b      	ldrb	r3, [r3, #0]
    b9a4:	b25b      	sxtb	r3, r3
    b9a6:	b2da      	uxtb	r2, r3
    b9a8:	3a01      	subs	r2, #1
    b9aa:	b2d1      	uxtb	r1, r2
    b9ac:	220e      	movs	r2, #14
    b9ae:	18ba      	adds	r2, r7, r2
    b9b0:	7011      	strb	r1, [r2, #0]
    b9b2:	2b00      	cmp	r3, #0
    b9b4:	dcd3      	bgt.n	b95e <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    b9b6:	230f      	movs	r3, #15
    b9b8:	18fb      	adds	r3, r7, r3
    b9ba:	781b      	ldrb	r3, [r3, #0]
    b9bc:	b25b      	sxtb	r3, r3
}
    b9be:	0018      	movs	r0, r3
    b9c0:	46bd      	mov	sp, r7
    b9c2:	b004      	add	sp, #16
    b9c4:	bd80      	pop	{r7, pc}
    b9c6:	46c0      	nop			; (mov r8, r8)
    b9c8:	0000b361 	.word	0x0000b361
    b9cc:	0001ab0c 	.word	0x0001ab0c
    b9d0:	0001a560 	.word	0x0001a560
    b9d4:	00018619 	.word	0x00018619
    b9d8:	0001a5f0 	.word	0x0001a5f0
    b9dc:	00018739 	.word	0x00018739
    b9e0:	0001864d 	.word	0x0001864d

0000b9e4 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    b9e4:	b580      	push	{r7, lr}
    b9e6:	b086      	sub	sp, #24
    b9e8:	af00      	add	r7, sp, #0
    b9ea:	6078      	str	r0, [r7, #4]
    b9ec:	0008      	movs	r0, r1
    b9ee:	0011      	movs	r1, r2
    b9f0:	1cbb      	adds	r3, r7, #2
    b9f2:	1c02      	adds	r2, r0, #0
    b9f4:	801a      	strh	r2, [r3, #0]
    b9f6:	1c7b      	adds	r3, r7, #1
    b9f8:	1c0a      	adds	r2, r1, #0
    b9fa:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    b9fc:	2311      	movs	r3, #17
    b9fe:	18fb      	adds	r3, r7, r3
    ba00:	2201      	movs	r2, #1
    ba02:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    ba04:	2314      	movs	r3, #20
    ba06:	18fb      	adds	r3, r7, r3
    ba08:	2200      	movs	r2, #0
    ba0a:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    ba0c:	1cbb      	adds	r3, r7, #2
    ba0e:	881a      	ldrh	r2, [r3, #0]
    ba10:	2380      	movs	r3, #128	; 0x80
    ba12:	019b      	lsls	r3, r3, #6
    ba14:	429a      	cmp	r2, r3
    ba16:	d805      	bhi.n	ba24 <spi_data_read+0x40>
			nbytes = sz;
    ba18:	2312      	movs	r3, #18
    ba1a:	18fb      	adds	r3, r7, r3
    ba1c:	1cba      	adds	r2, r7, #2
    ba1e:	8812      	ldrh	r2, [r2, #0]
    ba20:	801a      	strh	r2, [r3, #0]
    ba22:	e004      	b.n	ba2e <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    ba24:	2312      	movs	r3, #18
    ba26:	18fb      	adds	r3, r7, r3
    ba28:	2280      	movs	r2, #128	; 0x80
    ba2a:	0192      	lsls	r2, r2, #6
    ba2c:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    ba2e:	2316      	movs	r3, #22
    ba30:	18fb      	adds	r3, r7, r3
    ba32:	220a      	movs	r2, #10
    ba34:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    ba36:	230b      	movs	r3, #11
    ba38:	18fb      	adds	r3, r7, r3
    ba3a:	2101      	movs	r1, #1
    ba3c:	0018      	movs	r0, r3
    ba3e:	4b5c      	ldr	r3, [pc, #368]	; (bbb0 <spi_data_read+0x1cc>)
    ba40:	4798      	blx	r3
    ba42:	1e03      	subs	r3, r0, #0
    ba44:	d011      	beq.n	ba6a <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    ba46:	4a5b      	ldr	r2, [pc, #364]	; (bbb4 <spi_data_read+0x1d0>)
    ba48:	495b      	ldr	r1, [pc, #364]	; (bbb8 <spi_data_read+0x1d4>)
    ba4a:	4b5c      	ldr	r3, [pc, #368]	; (bbbc <spi_data_read+0x1d8>)
    ba4c:	0018      	movs	r0, r3
    ba4e:	4b5c      	ldr	r3, [pc, #368]	; (bbc0 <spi_data_read+0x1dc>)
    ba50:	4798      	blx	r3
    ba52:	4b5c      	ldr	r3, [pc, #368]	; (bbc4 <spi_data_read+0x1e0>)
    ba54:	0018      	movs	r0, r3
    ba56:	4b5c      	ldr	r3, [pc, #368]	; (bbc8 <spi_data_read+0x1e4>)
    ba58:	4798      	blx	r3
    ba5a:	200d      	movs	r0, #13
    ba5c:	4b5b      	ldr	r3, [pc, #364]	; (bbcc <spi_data_read+0x1e8>)
    ba5e:	4798      	blx	r3
				result = N_FAIL;
    ba60:	2311      	movs	r3, #17
    ba62:	18fb      	adds	r3, r7, r3
    ba64:	2200      	movs	r2, #0
    ba66:	701a      	strb	r2, [r3, #0]
				break;
    ba68:	e017      	b.n	ba9a <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    ba6a:	230b      	movs	r3, #11
    ba6c:	18fb      	adds	r3, r7, r3
    ba6e:	781b      	ldrb	r3, [r3, #0]
    ba70:	091b      	lsrs	r3, r3, #4
    ba72:	b2db      	uxtb	r3, r3
    ba74:	001a      	movs	r2, r3
    ba76:	230f      	movs	r3, #15
    ba78:	4013      	ands	r3, r2
    ba7a:	2b0f      	cmp	r3, #15
    ba7c:	d00c      	beq.n	ba98 <spi_data_read+0xb4>
				break;
		} while (retry--);
    ba7e:	2316      	movs	r3, #22
    ba80:	18fb      	adds	r3, r7, r3
    ba82:	2200      	movs	r2, #0
    ba84:	5e9b      	ldrsh	r3, [r3, r2]
    ba86:	b29a      	uxth	r2, r3
    ba88:	3a01      	subs	r2, #1
    ba8a:	b291      	uxth	r1, r2
    ba8c:	2216      	movs	r2, #22
    ba8e:	18ba      	adds	r2, r7, r2
    ba90:	8011      	strh	r1, [r2, #0]
    ba92:	2b00      	cmp	r3, #0
    ba94:	d1cf      	bne.n	ba36 <spi_data_read+0x52>
    ba96:	e000      	b.n	ba9a <spi_data_read+0xb6>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    ba98:	46c0      	nop			; (mov r8, r8)
		} while (retry--);

		if (result == N_FAIL)
    ba9a:	2311      	movs	r3, #17
    ba9c:	18fb      	adds	r3, r7, r3
    ba9e:	781b      	ldrb	r3, [r3, #0]
    baa0:	b25b      	sxtb	r3, r3
    baa2:	2b00      	cmp	r3, #0
    baa4:	d100      	bne.n	baa8 <spi_data_read+0xc4>
    baa6:	e079      	b.n	bb9c <spi_data_read+0x1b8>
			break;

		if (retry <= 0) {
    baa8:	2316      	movs	r3, #22
    baaa:	18fb      	adds	r3, r7, r3
    baac:	2200      	movs	r2, #0
    baae:	5e9b      	ldrsh	r3, [r3, r2]
    bab0:	2b00      	cmp	r3, #0
    bab2:	dc16      	bgt.n	bae2 <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    bab4:	4a46      	ldr	r2, [pc, #280]	; (bbd0 <spi_data_read+0x1ec>)
    bab6:	4940      	ldr	r1, [pc, #256]	; (bbb8 <spi_data_read+0x1d4>)
    bab8:	4b40      	ldr	r3, [pc, #256]	; (bbbc <spi_data_read+0x1d8>)
    baba:	0018      	movs	r0, r3
    babc:	4b40      	ldr	r3, [pc, #256]	; (bbc0 <spi_data_read+0x1dc>)
    babe:	4798      	blx	r3
    bac0:	230b      	movs	r3, #11
    bac2:	18fb      	adds	r3, r7, r3
    bac4:	781b      	ldrb	r3, [r3, #0]
    bac6:	001a      	movs	r2, r3
    bac8:	4b42      	ldr	r3, [pc, #264]	; (bbd4 <spi_data_read+0x1f0>)
    baca:	0011      	movs	r1, r2
    bacc:	0018      	movs	r0, r3
    bace:	4b3c      	ldr	r3, [pc, #240]	; (bbc0 <spi_data_read+0x1dc>)
    bad0:	4798      	blx	r3
    bad2:	200d      	movs	r0, #13
    bad4:	4b3d      	ldr	r3, [pc, #244]	; (bbcc <spi_data_read+0x1e8>)
    bad6:	4798      	blx	r3
			result = N_FAIL;
    bad8:	2311      	movs	r3, #17
    bada:	18fb      	adds	r3, r7, r3
    badc:	2200      	movs	r2, #0
    bade:	701a      	strb	r2, [r3, #0]
			break;
    bae0:	e05d      	b.n	bb9e <spi_data_read+0x1ba>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    bae2:	2314      	movs	r3, #20
    bae4:	18fb      	adds	r3, r7, r3
    bae6:	2200      	movs	r2, #0
    bae8:	5e9b      	ldrsh	r3, [r3, r2]
    baea:	687a      	ldr	r2, [r7, #4]
    baec:	18d2      	adds	r2, r2, r3
    baee:	2312      	movs	r3, #18
    baf0:	18fb      	adds	r3, r7, r3
    baf2:	881b      	ldrh	r3, [r3, #0]
    baf4:	0019      	movs	r1, r3
    baf6:	0010      	movs	r0, r2
    baf8:	4b2d      	ldr	r3, [pc, #180]	; (bbb0 <spi_data_read+0x1cc>)
    bafa:	4798      	blx	r3
    bafc:	1e03      	subs	r3, r0, #0
    bafe:	d012      	beq.n	bb26 <spi_data_read+0x142>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    bb00:	23c5      	movs	r3, #197	; 0xc5
    bb02:	009a      	lsls	r2, r3, #2
    bb04:	492c      	ldr	r1, [pc, #176]	; (bbb8 <spi_data_read+0x1d4>)
    bb06:	4b2d      	ldr	r3, [pc, #180]	; (bbbc <spi_data_read+0x1d8>)
    bb08:	0018      	movs	r0, r3
    bb0a:	4b2d      	ldr	r3, [pc, #180]	; (bbc0 <spi_data_read+0x1dc>)
    bb0c:	4798      	blx	r3
    bb0e:	4b32      	ldr	r3, [pc, #200]	; (bbd8 <spi_data_read+0x1f4>)
    bb10:	0018      	movs	r0, r3
    bb12:	4b2d      	ldr	r3, [pc, #180]	; (bbc8 <spi_data_read+0x1e4>)
    bb14:	4798      	blx	r3
    bb16:	200d      	movs	r0, #13
    bb18:	4b2c      	ldr	r3, [pc, #176]	; (bbcc <spi_data_read+0x1e8>)
    bb1a:	4798      	blx	r3
			result = N_FAIL;
    bb1c:	2311      	movs	r3, #17
    bb1e:	18fb      	adds	r3, r7, r3
    bb20:	2200      	movs	r2, #0
    bb22:	701a      	strb	r2, [r3, #0]
			break;
    bb24:	e03b      	b.n	bb9e <spi_data_read+0x1ba>
		}
		if(!clockless)
    bb26:	1c7b      	adds	r3, r7, #1
    bb28:	781b      	ldrb	r3, [r3, #0]
    bb2a:	2b00      	cmp	r3, #0
    bb2c:	d11d      	bne.n	bb6a <spi_data_read+0x186>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    bb2e:	4b2b      	ldr	r3, [pc, #172]	; (bbdc <spi_data_read+0x1f8>)
    bb30:	781b      	ldrb	r3, [r3, #0]
    bb32:	2b00      	cmp	r3, #0
    bb34:	d119      	bne.n	bb6a <spi_data_read+0x186>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    bb36:	230c      	movs	r3, #12
    bb38:	18fb      	adds	r3, r7, r3
    bb3a:	2102      	movs	r1, #2
    bb3c:	0018      	movs	r0, r3
    bb3e:	4b1c      	ldr	r3, [pc, #112]	; (bbb0 <spi_data_read+0x1cc>)
    bb40:	4798      	blx	r3
    bb42:	1e03      	subs	r3, r0, #0
    bb44:	d011      	beq.n	bb6a <spi_data_read+0x186>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    bb46:	4a26      	ldr	r2, [pc, #152]	; (bbe0 <spi_data_read+0x1fc>)
    bb48:	491b      	ldr	r1, [pc, #108]	; (bbb8 <spi_data_read+0x1d4>)
    bb4a:	4b1c      	ldr	r3, [pc, #112]	; (bbbc <spi_data_read+0x1d8>)
    bb4c:	0018      	movs	r0, r3
    bb4e:	4b1c      	ldr	r3, [pc, #112]	; (bbc0 <spi_data_read+0x1dc>)
    bb50:	4798      	blx	r3
    bb52:	4b24      	ldr	r3, [pc, #144]	; (bbe4 <spi_data_read+0x200>)
    bb54:	0018      	movs	r0, r3
    bb56:	4b1c      	ldr	r3, [pc, #112]	; (bbc8 <spi_data_read+0x1e4>)
    bb58:	4798      	blx	r3
    bb5a:	200d      	movs	r0, #13
    bb5c:	4b1b      	ldr	r3, [pc, #108]	; (bbcc <spi_data_read+0x1e8>)
    bb5e:	4798      	blx	r3
					result = N_FAIL;
    bb60:	2311      	movs	r3, #17
    bb62:	18fb      	adds	r3, r7, r3
    bb64:	2200      	movs	r2, #0
    bb66:	701a      	strb	r2, [r3, #0]
					break;
    bb68:	e019      	b.n	bb9e <spi_data_read+0x1ba>
				}
			}
		}
		ix += nbytes;
    bb6a:	2314      	movs	r3, #20
    bb6c:	18fb      	adds	r3, r7, r3
    bb6e:	881a      	ldrh	r2, [r3, #0]
    bb70:	2312      	movs	r3, #18
    bb72:	18fb      	adds	r3, r7, r3
    bb74:	881b      	ldrh	r3, [r3, #0]
    bb76:	18d3      	adds	r3, r2, r3
    bb78:	b29a      	uxth	r2, r3
    bb7a:	2314      	movs	r3, #20
    bb7c:	18fb      	adds	r3, r7, r3
    bb7e:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    bb80:	2312      	movs	r3, #18
    bb82:	18fb      	adds	r3, r7, r3
    bb84:	881a      	ldrh	r2, [r3, #0]
    bb86:	1cbb      	adds	r3, r7, #2
    bb88:	1cb9      	adds	r1, r7, #2
    bb8a:	8809      	ldrh	r1, [r1, #0]
    bb8c:	1a8a      	subs	r2, r1, r2
    bb8e:	801a      	strh	r2, [r3, #0]

	} while (sz);
    bb90:	1cbb      	adds	r3, r7, #2
    bb92:	881b      	ldrh	r3, [r3, #0]
    bb94:	2b00      	cmp	r3, #0
    bb96:	d000      	beq.n	bb9a <spi_data_read+0x1b6>
    bb98:	e738      	b.n	ba0c <spi_data_read+0x28>
    bb9a:	e000      	b.n	bb9e <spi_data_read+0x1ba>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    bb9c:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    bb9e:	2311      	movs	r3, #17
    bba0:	18fb      	adds	r3, r7, r3
    bba2:	781b      	ldrb	r3, [r3, #0]
    bba4:	b25b      	sxtb	r3, r3
}
    bba6:	0018      	movs	r0, r3
    bba8:	46bd      	mov	sp, r7
    bbaa:	b006      	add	sp, #24
    bbac:	bd80      	pop	{r7, pc}
    bbae:	46c0      	nop			; (mov r8, r8)
    bbb0:	0000b361 	.word	0x0000b361
    bbb4:	000002ff 	.word	0x000002ff
    bbb8:	0001ab18 	.word	0x0001ab18
    bbbc:	0001a560 	.word	0x0001a560
    bbc0:	00018619 	.word	0x00018619
    bbc4:	0001a624 	.word	0x0001a624
    bbc8:	00018739 	.word	0x00018739
    bbcc:	0001864d 	.word	0x0001864d
    bbd0:	0000030b 	.word	0x0000030b
    bbd4:	0001a658 	.word	0x0001a658
    bbd8:	0001a688 	.word	0x0001a688
    bbdc:	200000c0 	.word	0x200000c0
    bbe0:	0000031f 	.word	0x0000031f
    bbe4:	0001a6b8 	.word	0x0001a6b8

0000bbe8 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    bbe8:	b580      	push	{r7, lr}
    bbea:	b086      	sub	sp, #24
    bbec:	af00      	add	r7, sp, #0
    bbee:	6078      	str	r0, [r7, #4]
    bbf0:	000a      	movs	r2, r1
    bbf2:	1cbb      	adds	r3, r7, #2
    bbf4:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    bbf6:	2313      	movs	r3, #19
    bbf8:	18fb      	adds	r3, r7, r3
    bbfa:	2201      	movs	r2, #1
    bbfc:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    bbfe:	230c      	movs	r3, #12
    bc00:	18fb      	adds	r3, r7, r3
    bc02:	2200      	movs	r2, #0
    bc04:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    bc06:	2316      	movs	r3, #22
    bc08:	18fb      	adds	r3, r7, r3
    bc0a:	2200      	movs	r2, #0
    bc0c:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    bc0e:	1cbb      	adds	r3, r7, #2
    bc10:	881a      	ldrh	r2, [r3, #0]
    bc12:	2380      	movs	r3, #128	; 0x80
    bc14:	019b      	lsls	r3, r3, #6
    bc16:	429a      	cmp	r2, r3
    bc18:	d805      	bhi.n	bc26 <spi_data_write+0x3e>
			nbytes = sz;
    bc1a:	2314      	movs	r3, #20
    bc1c:	18fb      	adds	r3, r7, r3
    bc1e:	1cba      	adds	r2, r7, #2
    bc20:	8812      	ldrh	r2, [r2, #0]
    bc22:	801a      	strh	r2, [r3, #0]
    bc24:	e004      	b.n	bc30 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    bc26:	2314      	movs	r3, #20
    bc28:	18fb      	adds	r3, r7, r3
    bc2a:	2280      	movs	r2, #128	; 0x80
    bc2c:	0192      	lsls	r2, r2, #6
    bc2e:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    bc30:	2311      	movs	r3, #17
    bc32:	18fb      	adds	r3, r7, r3
    bc34:	22f0      	movs	r2, #240	; 0xf0
    bc36:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    bc38:	2316      	movs	r3, #22
    bc3a:	18fb      	adds	r3, r7, r3
    bc3c:	2200      	movs	r2, #0
    bc3e:	5e9b      	ldrsh	r3, [r3, r2]
    bc40:	2b00      	cmp	r3, #0
    bc42:	d10f      	bne.n	bc64 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    bc44:	1cbb      	adds	r3, r7, #2
    bc46:	881a      	ldrh	r2, [r3, #0]
    bc48:	2380      	movs	r3, #128	; 0x80
    bc4a:	019b      	lsls	r3, r3, #6
    bc4c:	429a      	cmp	r2, r3
    bc4e:	d804      	bhi.n	bc5a <spi_data_write+0x72>
				order = 0x3;
    bc50:	2312      	movs	r3, #18
    bc52:	18fb      	adds	r3, r7, r3
    bc54:	2203      	movs	r2, #3
    bc56:	701a      	strb	r2, [r3, #0]
    bc58:	e013      	b.n	bc82 <spi_data_write+0x9a>
			else
				order = 0x1;
    bc5a:	2312      	movs	r3, #18
    bc5c:	18fb      	adds	r3, r7, r3
    bc5e:	2201      	movs	r2, #1
    bc60:	701a      	strb	r2, [r3, #0]
    bc62:	e00e      	b.n	bc82 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    bc64:	1cbb      	adds	r3, r7, #2
    bc66:	881a      	ldrh	r2, [r3, #0]
    bc68:	2380      	movs	r3, #128	; 0x80
    bc6a:	019b      	lsls	r3, r3, #6
    bc6c:	429a      	cmp	r2, r3
    bc6e:	d804      	bhi.n	bc7a <spi_data_write+0x92>
				order = 0x3;
    bc70:	2312      	movs	r3, #18
    bc72:	18fb      	adds	r3, r7, r3
    bc74:	2203      	movs	r2, #3
    bc76:	701a      	strb	r2, [r3, #0]
    bc78:	e003      	b.n	bc82 <spi_data_write+0x9a>
			else
				order = 0x2;
    bc7a:	2312      	movs	r3, #18
    bc7c:	18fb      	adds	r3, r7, r3
    bc7e:	2202      	movs	r2, #2
    bc80:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    bc82:	2311      	movs	r3, #17
    bc84:	18fb      	adds	r3, r7, r3
    bc86:	781a      	ldrb	r2, [r3, #0]
    bc88:	2312      	movs	r3, #18
    bc8a:	18fb      	adds	r3, r7, r3
    bc8c:	781b      	ldrb	r3, [r3, #0]
    bc8e:	4313      	orrs	r3, r2
    bc90:	b2da      	uxtb	r2, r3
    bc92:	2311      	movs	r3, #17
    bc94:	18fb      	adds	r3, r7, r3
    bc96:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    bc98:	2311      	movs	r3, #17
    bc9a:	18fb      	adds	r3, r7, r3
    bc9c:	2101      	movs	r1, #1
    bc9e:	0018      	movs	r0, r3
    bca0:	4b3a      	ldr	r3, [pc, #232]	; (bd8c <spi_data_write+0x1a4>)
    bca2:	4798      	blx	r3
    bca4:	1e03      	subs	r3, r0, #0
    bca6:	d012      	beq.n	bcce <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    bca8:	23d4      	movs	r3, #212	; 0xd4
    bcaa:	009a      	lsls	r2, r3, #2
    bcac:	4938      	ldr	r1, [pc, #224]	; (bd90 <spi_data_write+0x1a8>)
    bcae:	4b39      	ldr	r3, [pc, #228]	; (bd94 <spi_data_write+0x1ac>)
    bcb0:	0018      	movs	r0, r3
    bcb2:	4b39      	ldr	r3, [pc, #228]	; (bd98 <spi_data_write+0x1b0>)
    bcb4:	4798      	blx	r3
    bcb6:	4b39      	ldr	r3, [pc, #228]	; (bd9c <spi_data_write+0x1b4>)
    bcb8:	0018      	movs	r0, r3
    bcba:	4b39      	ldr	r3, [pc, #228]	; (bda0 <spi_data_write+0x1b8>)
    bcbc:	4798      	blx	r3
    bcbe:	200d      	movs	r0, #13
    bcc0:	4b38      	ldr	r3, [pc, #224]	; (bda4 <spi_data_write+0x1bc>)
    bcc2:	4798      	blx	r3
			result = N_FAIL;
    bcc4:	2313      	movs	r3, #19
    bcc6:	18fb      	adds	r3, r7, r3
    bcc8:	2200      	movs	r2, #0
    bcca:	701a      	strb	r2, [r3, #0]
			break;
    bccc:	e056      	b.n	bd7c <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    bcce:	2316      	movs	r3, #22
    bcd0:	18fb      	adds	r3, r7, r3
    bcd2:	2200      	movs	r2, #0
    bcd4:	5e9b      	ldrsh	r3, [r3, r2]
    bcd6:	687a      	ldr	r2, [r7, #4]
    bcd8:	18d2      	adds	r2, r2, r3
    bcda:	2314      	movs	r3, #20
    bcdc:	18fb      	adds	r3, r7, r3
    bcde:	881b      	ldrh	r3, [r3, #0]
    bce0:	0019      	movs	r1, r3
    bce2:	0010      	movs	r0, r2
    bce4:	4b29      	ldr	r3, [pc, #164]	; (bd8c <spi_data_write+0x1a4>)
    bce6:	4798      	blx	r3
    bce8:	1e03      	subs	r3, r0, #0
    bcea:	d011      	beq.n	bd10 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    bcec:	4a2e      	ldr	r2, [pc, #184]	; (bda8 <spi_data_write+0x1c0>)
    bcee:	4928      	ldr	r1, [pc, #160]	; (bd90 <spi_data_write+0x1a8>)
    bcf0:	4b28      	ldr	r3, [pc, #160]	; (bd94 <spi_data_write+0x1ac>)
    bcf2:	0018      	movs	r0, r3
    bcf4:	4b28      	ldr	r3, [pc, #160]	; (bd98 <spi_data_write+0x1b0>)
    bcf6:	4798      	blx	r3
    bcf8:	4b2c      	ldr	r3, [pc, #176]	; (bdac <spi_data_write+0x1c4>)
    bcfa:	0018      	movs	r0, r3
    bcfc:	4b28      	ldr	r3, [pc, #160]	; (bda0 <spi_data_write+0x1b8>)
    bcfe:	4798      	blx	r3
    bd00:	200d      	movs	r0, #13
    bd02:	4b28      	ldr	r3, [pc, #160]	; (bda4 <spi_data_write+0x1bc>)
    bd04:	4798      	blx	r3
			result = N_FAIL;
    bd06:	2313      	movs	r3, #19
    bd08:	18fb      	adds	r3, r7, r3
    bd0a:	2200      	movs	r2, #0
    bd0c:	701a      	strb	r2, [r3, #0]
			break;
    bd0e:	e035      	b.n	bd7c <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    bd10:	4b27      	ldr	r3, [pc, #156]	; (bdb0 <spi_data_write+0x1c8>)
    bd12:	781b      	ldrb	r3, [r3, #0]
    bd14:	2b00      	cmp	r3, #0
    bd16:	d119      	bne.n	bd4c <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    bd18:	230c      	movs	r3, #12
    bd1a:	18fb      	adds	r3, r7, r3
    bd1c:	2102      	movs	r1, #2
    bd1e:	0018      	movs	r0, r3
    bd20:	4b1a      	ldr	r3, [pc, #104]	; (bd8c <spi_data_write+0x1a4>)
    bd22:	4798      	blx	r3
    bd24:	1e03      	subs	r3, r0, #0
    bd26:	d011      	beq.n	bd4c <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    bd28:	4a22      	ldr	r2, [pc, #136]	; (bdb4 <spi_data_write+0x1cc>)
    bd2a:	4919      	ldr	r1, [pc, #100]	; (bd90 <spi_data_write+0x1a8>)
    bd2c:	4b19      	ldr	r3, [pc, #100]	; (bd94 <spi_data_write+0x1ac>)
    bd2e:	0018      	movs	r0, r3
    bd30:	4b19      	ldr	r3, [pc, #100]	; (bd98 <spi_data_write+0x1b0>)
    bd32:	4798      	blx	r3
    bd34:	4b20      	ldr	r3, [pc, #128]	; (bdb8 <spi_data_write+0x1d0>)
    bd36:	0018      	movs	r0, r3
    bd38:	4b19      	ldr	r3, [pc, #100]	; (bda0 <spi_data_write+0x1b8>)
    bd3a:	4798      	blx	r3
    bd3c:	200d      	movs	r0, #13
    bd3e:	4b19      	ldr	r3, [pc, #100]	; (bda4 <spi_data_write+0x1bc>)
    bd40:	4798      	blx	r3
				result = N_FAIL;
    bd42:	2313      	movs	r3, #19
    bd44:	18fb      	adds	r3, r7, r3
    bd46:	2200      	movs	r2, #0
    bd48:	701a      	strb	r2, [r3, #0]
				break;
    bd4a:	e017      	b.n	bd7c <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    bd4c:	2316      	movs	r3, #22
    bd4e:	18fb      	adds	r3, r7, r3
    bd50:	881a      	ldrh	r2, [r3, #0]
    bd52:	2314      	movs	r3, #20
    bd54:	18fb      	adds	r3, r7, r3
    bd56:	881b      	ldrh	r3, [r3, #0]
    bd58:	18d3      	adds	r3, r2, r3
    bd5a:	b29a      	uxth	r2, r3
    bd5c:	2316      	movs	r3, #22
    bd5e:	18fb      	adds	r3, r7, r3
    bd60:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    bd62:	1cbb      	adds	r3, r7, #2
    bd64:	1cb9      	adds	r1, r7, #2
    bd66:	2214      	movs	r2, #20
    bd68:	18ba      	adds	r2, r7, r2
    bd6a:	8809      	ldrh	r1, [r1, #0]
    bd6c:	8812      	ldrh	r2, [r2, #0]
    bd6e:	1a8a      	subs	r2, r1, r2
    bd70:	801a      	strh	r2, [r3, #0]
	} while (sz);
    bd72:	1cbb      	adds	r3, r7, #2
    bd74:	881b      	ldrh	r3, [r3, #0]
    bd76:	2b00      	cmp	r3, #0
    bd78:	d000      	beq.n	bd7c <spi_data_write+0x194>
    bd7a:	e748      	b.n	bc0e <spi_data_write+0x26>


	return result;
    bd7c:	2313      	movs	r3, #19
    bd7e:	18fb      	adds	r3, r7, r3
    bd80:	781b      	ldrb	r3, [r3, #0]
    bd82:	b25b      	sxtb	r3, r3
}
    bd84:	0018      	movs	r0, r3
    bd86:	46bd      	mov	sp, r7
    bd88:	b006      	add	sp, #24
    bd8a:	bd80      	pop	{r7, pc}
    bd8c:	0000b3a5 	.word	0x0000b3a5
    bd90:	0001ab28 	.word	0x0001ab28
    bd94:	0001a560 	.word	0x0001a560
    bd98:	00018619 	.word	0x00018619
    bd9c:	0001a6ec 	.word	0x0001a6ec
    bda0:	00018739 	.word	0x00018739
    bda4:	0001864d 	.word	0x0001864d
    bda8:	00000359 	.word	0x00000359
    bdac:	0001a724 	.word	0x0001a724
    bdb0:	200000c0 	.word	0x200000c0
    bdb4:	00000363 	.word	0x00000363
    bdb8:	0001a758 	.word	0x0001a758

0000bdbc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    bdbc:	b5b0      	push	{r4, r5, r7, lr}
    bdbe:	b086      	sub	sp, #24
    bdc0:	af02      	add	r7, sp, #8
    bdc2:	6078      	str	r0, [r7, #4]
    bdc4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    bdc6:	230f      	movs	r3, #15
    bdc8:	18fb      	adds	r3, r7, r3
    bdca:	220a      	movs	r2, #10
    bdcc:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    bdce:	230e      	movs	r3, #14
    bdd0:	18fb      	adds	r3, r7, r3
    bdd2:	2201      	movs	r2, #1
    bdd4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    bdd6:	230d      	movs	r3, #13
    bdd8:	18fb      	adds	r3, r7, r3
    bdda:	22c9      	movs	r2, #201	; 0xc9
    bddc:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    bdde:	230c      	movs	r3, #12
    bde0:	18fb      	adds	r3, r7, r3
    bde2:	2200      	movs	r2, #0
    bde4:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    bde6:	687b      	ldr	r3, [r7, #4]
    bde8:	2b30      	cmp	r3, #48	; 0x30
    bdea:	d808      	bhi.n	bdfe <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    bdec:	230d      	movs	r3, #13
    bdee:	18fb      	adds	r3, r7, r3
    bdf0:	22c3      	movs	r2, #195	; 0xc3
    bdf2:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    bdf4:	230c      	movs	r3, #12
    bdf6:	18fb      	adds	r3, r7, r3
    bdf8:	2201      	movs	r2, #1
    bdfa:	701a      	strb	r2, [r3, #0]
    bdfc:	e007      	b.n	be0e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    bdfe:	230d      	movs	r3, #13
    be00:	18fb      	adds	r3, r7, r3
    be02:	22c9      	movs	r2, #201	; 0xc9
    be04:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    be06:	230c      	movs	r3, #12
    be08:	18fb      	adds	r3, r7, r3
    be0a:	2200      	movs	r2, #0
    be0c:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    be0e:	230e      	movs	r3, #14
    be10:	18fc      	adds	r4, r7, r3
    be12:	683a      	ldr	r2, [r7, #0]
    be14:	6879      	ldr	r1, [r7, #4]
    be16:	230d      	movs	r3, #13
    be18:	18fb      	adds	r3, r7, r3
    be1a:	7818      	ldrb	r0, [r3, #0]
    be1c:	230c      	movs	r3, #12
    be1e:	18fb      	adds	r3, r7, r3
    be20:	781b      	ldrb	r3, [r3, #0]
    be22:	9300      	str	r3, [sp, #0]
    be24:	2304      	movs	r3, #4
    be26:	4d3c      	ldr	r5, [pc, #240]	; (bf18 <spi_write_reg+0x15c>)
    be28:	47a8      	blx	r5
    be2a:	0003      	movs	r3, r0
    be2c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    be2e:	230e      	movs	r3, #14
    be30:	18fb      	adds	r3, r7, r3
    be32:	781b      	ldrb	r3, [r3, #0]
    be34:	b25b      	sxtb	r3, r3
    be36:	2b01      	cmp	r3, #1
    be38:	d00f      	beq.n	be5a <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    be3a:	4a38      	ldr	r2, [pc, #224]	; (bf1c <spi_write_reg+0x160>)
    be3c:	4938      	ldr	r1, [pc, #224]	; (bf20 <spi_write_reg+0x164>)
    be3e:	4b39      	ldr	r3, [pc, #228]	; (bf24 <spi_write_reg+0x168>)
    be40:	0018      	movs	r0, r3
    be42:	4b39      	ldr	r3, [pc, #228]	; (bf28 <spi_write_reg+0x16c>)
    be44:	4798      	blx	r3
    be46:	687a      	ldr	r2, [r7, #4]
    be48:	4b38      	ldr	r3, [pc, #224]	; (bf2c <spi_write_reg+0x170>)
    be4a:	0011      	movs	r1, r2
    be4c:	0018      	movs	r0, r3
    be4e:	4b36      	ldr	r3, [pc, #216]	; (bf28 <spi_write_reg+0x16c>)
    be50:	4798      	blx	r3
    be52:	200d      	movs	r0, #13
    be54:	4b36      	ldr	r3, [pc, #216]	; (bf30 <spi_write_reg+0x174>)
    be56:	4798      	blx	r3
		goto _FAIL_;
    be58:	e020      	b.n	be9c <spi_write_reg+0xe0>
	}

	result = spi_cmd_rsp(cmd);
    be5a:	230e      	movs	r3, #14
    be5c:	18fc      	adds	r4, r7, r3
    be5e:	230d      	movs	r3, #13
    be60:	18fb      	adds	r3, r7, r3
    be62:	781b      	ldrb	r3, [r3, #0]
    be64:	0018      	movs	r0, r3
    be66:	4b33      	ldr	r3, [pc, #204]	; (bf34 <spi_write_reg+0x178>)
    be68:	4798      	blx	r3
    be6a:	0003      	movs	r3, r0
    be6c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    be6e:	230e      	movs	r3, #14
    be70:	18fb      	adds	r3, r7, r3
    be72:	781b      	ldrb	r3, [r3, #0]
    be74:	b25b      	sxtb	r3, r3
    be76:	2b01      	cmp	r3, #1
    be78:	d010      	beq.n	be9c <spi_write_reg+0xe0>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    be7a:	23e7      	movs	r3, #231	; 0xe7
    be7c:	009a      	lsls	r2, r3, #2
    be7e:	4928      	ldr	r1, [pc, #160]	; (bf20 <spi_write_reg+0x164>)
    be80:	4b28      	ldr	r3, [pc, #160]	; (bf24 <spi_write_reg+0x168>)
    be82:	0018      	movs	r0, r3
    be84:	4b28      	ldr	r3, [pc, #160]	; (bf28 <spi_write_reg+0x16c>)
    be86:	4798      	blx	r3
    be88:	687a      	ldr	r2, [r7, #4]
    be8a:	4b2b      	ldr	r3, [pc, #172]	; (bf38 <spi_write_reg+0x17c>)
    be8c:	0011      	movs	r1, r2
    be8e:	0018      	movs	r0, r3
    be90:	4b25      	ldr	r3, [pc, #148]	; (bf28 <spi_write_reg+0x16c>)
    be92:	4798      	blx	r3
    be94:	200d      	movs	r0, #13
    be96:	4b26      	ldr	r3, [pc, #152]	; (bf30 <spi_write_reg+0x174>)
    be98:	4798      	blx	r3
		goto _FAIL_;
    be9a:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    be9c:	230e      	movs	r3, #14
    be9e:	18fb      	adds	r3, r7, r3
    bea0:	781b      	ldrb	r3, [r3, #0]
    bea2:	b25b      	sxtb	r3, r3
    bea4:	2b01      	cmp	r3, #1
    bea6:	d02e      	beq.n	bf06 <spi_write_reg+0x14a>
	{
		nm_bsp_sleep(1);
    bea8:	2001      	movs	r0, #1
    beaa:	4b24      	ldr	r3, [pc, #144]	; (bf3c <spi_write_reg+0x180>)
    beac:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    beae:	2300      	movs	r3, #0
    beb0:	9300      	str	r3, [sp, #0]
    beb2:	2300      	movs	r3, #0
    beb4:	2200      	movs	r2, #0
    beb6:	2100      	movs	r1, #0
    beb8:	20cf      	movs	r0, #207	; 0xcf
    beba:	4c17      	ldr	r4, [pc, #92]	; (bf18 <spi_write_reg+0x15c>)
    bebc:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    bebe:	20cf      	movs	r0, #207	; 0xcf
    bec0:	4b1c      	ldr	r3, [pc, #112]	; (bf34 <spi_write_reg+0x178>)
    bec2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    bec4:	4a1e      	ldr	r2, [pc, #120]	; (bf40 <spi_write_reg+0x184>)
    bec6:	4916      	ldr	r1, [pc, #88]	; (bf20 <spi_write_reg+0x164>)
    bec8:	4b16      	ldr	r3, [pc, #88]	; (bf24 <spi_write_reg+0x168>)
    beca:	0018      	movs	r0, r3
    becc:	4b16      	ldr	r3, [pc, #88]	; (bf28 <spi_write_reg+0x16c>)
    bece:	4798      	blx	r3
    bed0:	230f      	movs	r3, #15
    bed2:	18fb      	adds	r3, r7, r3
    bed4:	7819      	ldrb	r1, [r3, #0]
    bed6:	683b      	ldr	r3, [r7, #0]
    bed8:	687a      	ldr	r2, [r7, #4]
    beda:	481a      	ldr	r0, [pc, #104]	; (bf44 <spi_write_reg+0x188>)
    bedc:	4c12      	ldr	r4, [pc, #72]	; (bf28 <spi_write_reg+0x16c>)
    bede:	47a0      	blx	r4
    bee0:	200d      	movs	r0, #13
    bee2:	4b13      	ldr	r3, [pc, #76]	; (bf30 <spi_write_reg+0x174>)
    bee4:	4798      	blx	r3
		nm_bsp_sleep(1);
    bee6:	2001      	movs	r0, #1
    bee8:	4b14      	ldr	r3, [pc, #80]	; (bf3c <spi_write_reg+0x180>)
    beea:	4798      	blx	r3
		retry--;
    beec:	230f      	movs	r3, #15
    beee:	18fb      	adds	r3, r7, r3
    bef0:	781a      	ldrb	r2, [r3, #0]
    bef2:	230f      	movs	r3, #15
    bef4:	18fb      	adds	r3, r7, r3
    bef6:	3a01      	subs	r2, #1
    bef8:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    befa:	230f      	movs	r3, #15
    befc:	18fb      	adds	r3, r7, r3
    befe:	781b      	ldrb	r3, [r3, #0]
    bf00:	2b00      	cmp	r3, #0
    bf02:	d000      	beq.n	bf06 <spi_write_reg+0x14a>
    bf04:	e76f      	b.n	bde6 <spi_write_reg+0x2a>
	}

	return result;
    bf06:	230e      	movs	r3, #14
    bf08:	18fb      	adds	r3, r7, r3
    bf0a:	781b      	ldrb	r3, [r3, #0]
    bf0c:	b25b      	sxtb	r3, r3
}
    bf0e:	0018      	movs	r0, r3
    bf10:	46bd      	mov	sp, r7
    bf12:	b004      	add	sp, #16
    bf14:	bdb0      	pop	{r4, r5, r7, pc}
    bf16:	46c0      	nop			; (mov r8, r8)
    bf18:	0000b469 	.word	0x0000b469
    bf1c:	00000396 	.word	0x00000396
    bf20:	0001ab38 	.word	0x0001ab38
    bf24:	0001a560 	.word	0x0001a560
    bf28:	00018619 	.word	0x00018619
    bf2c:	0001a790 	.word	0x0001a790
    bf30:	0001864d 	.word	0x0001864d
    bf34:	0000b8ad 	.word	0x0000b8ad
    bf38:	0001a7bc 	.word	0x0001a7bc
    bf3c:	00008335 	.word	0x00008335
    bf40:	000003af 	.word	0x000003af
    bf44:	0001a7f4 	.word	0x0001a7f4

0000bf48 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    bf48:	b5b0      	push	{r4, r5, r7, lr}
    bf4a:	b088      	sub	sp, #32
    bf4c:	af02      	add	r7, sp, #8
    bf4e:	60f8      	str	r0, [r7, #12]
    bf50:	60b9      	str	r1, [r7, #8]
    bf52:	1dbb      	adds	r3, r7, #6
    bf54:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    bf56:	2316      	movs	r3, #22
    bf58:	18fb      	adds	r3, r7, r3
    bf5a:	220a      	movs	r2, #10
    bf5c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    bf5e:	2315      	movs	r3, #21
    bf60:	18fb      	adds	r3, r7, r3
    bf62:	22c7      	movs	r2, #199	; 0xc7
    bf64:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    bf66:	1dbb      	adds	r3, r7, #6
    bf68:	881b      	ldrh	r3, [r3, #0]
    bf6a:	2b01      	cmp	r3, #1
    bf6c:	d102      	bne.n	bf74 <nm_spi_write+0x2c>
		size = 2;
    bf6e:	1dbb      	adds	r3, r7, #6
    bf70:	2202      	movs	r2, #2
    bf72:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    bf74:	1dbb      	adds	r3, r7, #6
    bf76:	881a      	ldrh	r2, [r3, #0]
    bf78:	2317      	movs	r3, #23
    bf7a:	18fc      	adds	r4, r7, r3
    bf7c:	68f9      	ldr	r1, [r7, #12]
    bf7e:	2315      	movs	r3, #21
    bf80:	18fb      	adds	r3, r7, r3
    bf82:	7818      	ldrb	r0, [r3, #0]
    bf84:	2300      	movs	r3, #0
    bf86:	9300      	str	r3, [sp, #0]
    bf88:	0013      	movs	r3, r2
    bf8a:	2200      	movs	r2, #0
    bf8c:	4d5b      	ldr	r5, [pc, #364]	; (c0fc <nm_spi_write+0x1b4>)
    bf8e:	47a8      	blx	r5
    bf90:	0003      	movs	r3, r0
    bf92:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    bf94:	2317      	movs	r3, #23
    bf96:	18fb      	adds	r3, r7, r3
    bf98:	781b      	ldrb	r3, [r3, #0]
    bf9a:	b25b      	sxtb	r3, r3
    bf9c:	2b01      	cmp	r3, #1
    bf9e:	d00f      	beq.n	bfc0 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    bfa0:	4a57      	ldr	r2, [pc, #348]	; (c100 <nm_spi_write+0x1b8>)
    bfa2:	4958      	ldr	r1, [pc, #352]	; (c104 <nm_spi_write+0x1bc>)
    bfa4:	4b58      	ldr	r3, [pc, #352]	; (c108 <nm_spi_write+0x1c0>)
    bfa6:	0018      	movs	r0, r3
    bfa8:	4b58      	ldr	r3, [pc, #352]	; (c10c <nm_spi_write+0x1c4>)
    bfaa:	4798      	blx	r3
    bfac:	68fa      	ldr	r2, [r7, #12]
    bfae:	4b58      	ldr	r3, [pc, #352]	; (c110 <nm_spi_write+0x1c8>)
    bfb0:	0011      	movs	r1, r2
    bfb2:	0018      	movs	r0, r3
    bfb4:	4b55      	ldr	r3, [pc, #340]	; (c10c <nm_spi_write+0x1c4>)
    bfb6:	4798      	blx	r3
    bfb8:	200d      	movs	r0, #13
    bfba:	4b56      	ldr	r3, [pc, #344]	; (c114 <nm_spi_write+0x1cc>)
    bfbc:	4798      	blx	r3
		goto _FAIL_;
    bfbe:	e05f      	b.n	c080 <nm_spi_write+0x138>
	}

	result = spi_cmd_rsp(cmd);
    bfc0:	2317      	movs	r3, #23
    bfc2:	18fc      	adds	r4, r7, r3
    bfc4:	2315      	movs	r3, #21
    bfc6:	18fb      	adds	r3, r7, r3
    bfc8:	781b      	ldrb	r3, [r3, #0]
    bfca:	0018      	movs	r0, r3
    bfcc:	4b52      	ldr	r3, [pc, #328]	; (c118 <nm_spi_write+0x1d0>)
    bfce:	4798      	blx	r3
    bfd0:	0003      	movs	r3, r0
    bfd2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    bfd4:	2317      	movs	r3, #23
    bfd6:	18fb      	adds	r3, r7, r3
    bfd8:	781b      	ldrb	r3, [r3, #0]
    bfda:	b25b      	sxtb	r3, r3
    bfdc:	2b01      	cmp	r3, #1
    bfde:	d010      	beq.n	c002 <nm_spi_write+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    bfe0:	23f4      	movs	r3, #244	; 0xf4
    bfe2:	009a      	lsls	r2, r3, #2
    bfe4:	4947      	ldr	r1, [pc, #284]	; (c104 <nm_spi_write+0x1bc>)
    bfe6:	4b48      	ldr	r3, [pc, #288]	; (c108 <nm_spi_write+0x1c0>)
    bfe8:	0018      	movs	r0, r3
    bfea:	4b48      	ldr	r3, [pc, #288]	; (c10c <nm_spi_write+0x1c4>)
    bfec:	4798      	blx	r3
    bfee:	68fa      	ldr	r2, [r7, #12]
    bff0:	4b4a      	ldr	r3, [pc, #296]	; (c11c <nm_spi_write+0x1d4>)
    bff2:	0011      	movs	r1, r2
    bff4:	0018      	movs	r0, r3
    bff6:	4b45      	ldr	r3, [pc, #276]	; (c10c <nm_spi_write+0x1c4>)
    bff8:	4798      	blx	r3
    bffa:	200d      	movs	r0, #13
    bffc:	4b45      	ldr	r3, [pc, #276]	; (c114 <nm_spi_write+0x1cc>)
    bffe:	4798      	blx	r3
		goto _FAIL_;
    c000:	e03e      	b.n	c080 <nm_spi_write+0x138>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    c002:	2317      	movs	r3, #23
    c004:	18fc      	adds	r4, r7, r3
    c006:	1dbb      	adds	r3, r7, #6
    c008:	881a      	ldrh	r2, [r3, #0]
    c00a:	68bb      	ldr	r3, [r7, #8]
    c00c:	0011      	movs	r1, r2
    c00e:	0018      	movs	r0, r3
    c010:	4b43      	ldr	r3, [pc, #268]	; (c120 <nm_spi_write+0x1d8>)
    c012:	4798      	blx	r3
    c014:	0003      	movs	r3, r0
    c016:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c018:	2317      	movs	r3, #23
    c01a:	18fb      	adds	r3, r7, r3
    c01c:	781b      	ldrb	r3, [r3, #0]
    c01e:	b25b      	sxtb	r3, r3
    c020:	2b01      	cmp	r3, #1
    c022:	d00e      	beq.n	c042 <nm_spi_write+0xfa>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    c024:	23f8      	movs	r3, #248	; 0xf8
    c026:	009a      	lsls	r2, r3, #2
    c028:	4936      	ldr	r1, [pc, #216]	; (c104 <nm_spi_write+0x1bc>)
    c02a:	4b37      	ldr	r3, [pc, #220]	; (c108 <nm_spi_write+0x1c0>)
    c02c:	0018      	movs	r0, r3
    c02e:	4b37      	ldr	r3, [pc, #220]	; (c10c <nm_spi_write+0x1c4>)
    c030:	4798      	blx	r3
    c032:	4b3c      	ldr	r3, [pc, #240]	; (c124 <nm_spi_write+0x1dc>)
    c034:	0018      	movs	r0, r3
    c036:	4b3c      	ldr	r3, [pc, #240]	; (c128 <nm_spi_write+0x1e0>)
    c038:	4798      	blx	r3
    c03a:	200d      	movs	r0, #13
    c03c:	4b35      	ldr	r3, [pc, #212]	; (c114 <nm_spi_write+0x1cc>)
    c03e:	4798      	blx	r3
		goto _FAIL_;
    c040:	e01e      	b.n	c080 <nm_spi_write+0x138>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    c042:	2317      	movs	r3, #23
    c044:	18fc      	adds	r4, r7, r3
    c046:	2315      	movs	r3, #21
    c048:	18fb      	adds	r3, r7, r3
    c04a:	781b      	ldrb	r3, [r3, #0]
    c04c:	0018      	movs	r0, r3
    c04e:	4b37      	ldr	r3, [pc, #220]	; (c12c <nm_spi_write+0x1e4>)
    c050:	4798      	blx	r3
    c052:	0003      	movs	r3, r0
    c054:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c056:	2317      	movs	r3, #23
    c058:	18fb      	adds	r3, r7, r3
    c05a:	781b      	ldrb	r3, [r3, #0]
    c05c:	b25b      	sxtb	r3, r3
    c05e:	2b01      	cmp	r3, #1
    c060:	d00e      	beq.n	c080 <nm_spi_write+0x138>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    c062:	23fa      	movs	r3, #250	; 0xfa
    c064:	009a      	lsls	r2, r3, #2
    c066:	4927      	ldr	r1, [pc, #156]	; (c104 <nm_spi_write+0x1bc>)
    c068:	4b27      	ldr	r3, [pc, #156]	; (c108 <nm_spi_write+0x1c0>)
    c06a:	0018      	movs	r0, r3
    c06c:	4b27      	ldr	r3, [pc, #156]	; (c10c <nm_spi_write+0x1c4>)
    c06e:	4798      	blx	r3
    c070:	4b2c      	ldr	r3, [pc, #176]	; (c124 <nm_spi_write+0x1dc>)
    c072:	0018      	movs	r0, r3
    c074:	4b2c      	ldr	r3, [pc, #176]	; (c128 <nm_spi_write+0x1e0>)
    c076:	4798      	blx	r3
    c078:	200d      	movs	r0, #13
    c07a:	4b26      	ldr	r3, [pc, #152]	; (c114 <nm_spi_write+0x1cc>)
    c07c:	4798      	blx	r3
		goto _FAIL_;
    c07e:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    c080:	2317      	movs	r3, #23
    c082:	18fb      	adds	r3, r7, r3
    c084:	781b      	ldrb	r3, [r3, #0]
    c086:	b25b      	sxtb	r3, r3
    c088:	2b01      	cmp	r3, #1
    c08a:	d02f      	beq.n	c0ec <nm_spi_write+0x1a4>
	{
		nm_bsp_sleep(1);
    c08c:	2001      	movs	r0, #1
    c08e:	4b28      	ldr	r3, [pc, #160]	; (c130 <nm_spi_write+0x1e8>)
    c090:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c092:	2300      	movs	r3, #0
    c094:	9300      	str	r3, [sp, #0]
    c096:	2300      	movs	r3, #0
    c098:	2200      	movs	r2, #0
    c09a:	2100      	movs	r1, #0
    c09c:	20cf      	movs	r0, #207	; 0xcf
    c09e:	4c17      	ldr	r4, [pc, #92]	; (c0fc <nm_spi_write+0x1b4>)
    c0a0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    c0a2:	20cf      	movs	r0, #207	; 0xcf
    c0a4:	4b1c      	ldr	r3, [pc, #112]	; (c118 <nm_spi_write+0x1d0>)
    c0a6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    c0a8:	4a22      	ldr	r2, [pc, #136]	; (c134 <nm_spi_write+0x1ec>)
    c0aa:	4916      	ldr	r1, [pc, #88]	; (c104 <nm_spi_write+0x1bc>)
    c0ac:	4b16      	ldr	r3, [pc, #88]	; (c108 <nm_spi_write+0x1c0>)
    c0ae:	0018      	movs	r0, r3
    c0b0:	4b16      	ldr	r3, [pc, #88]	; (c10c <nm_spi_write+0x1c4>)
    c0b2:	4798      	blx	r3
    c0b4:	2316      	movs	r3, #22
    c0b6:	18fb      	adds	r3, r7, r3
    c0b8:	7819      	ldrb	r1, [r3, #0]
    c0ba:	1dbb      	adds	r3, r7, #6
    c0bc:	881b      	ldrh	r3, [r3, #0]
    c0be:	68fa      	ldr	r2, [r7, #12]
    c0c0:	481d      	ldr	r0, [pc, #116]	; (c138 <nm_spi_write+0x1f0>)
    c0c2:	4c12      	ldr	r4, [pc, #72]	; (c10c <nm_spi_write+0x1c4>)
    c0c4:	47a0      	blx	r4
    c0c6:	200d      	movs	r0, #13
    c0c8:	4b12      	ldr	r3, [pc, #72]	; (c114 <nm_spi_write+0x1cc>)
    c0ca:	4798      	blx	r3
		nm_bsp_sleep(1);
    c0cc:	2001      	movs	r0, #1
    c0ce:	4b18      	ldr	r3, [pc, #96]	; (c130 <nm_spi_write+0x1e8>)
    c0d0:	4798      	blx	r3
		retry--;
    c0d2:	2316      	movs	r3, #22
    c0d4:	18fb      	adds	r3, r7, r3
    c0d6:	781a      	ldrb	r2, [r3, #0]
    c0d8:	2316      	movs	r3, #22
    c0da:	18fb      	adds	r3, r7, r3
    c0dc:	3a01      	subs	r2, #1
    c0de:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    c0e0:	2316      	movs	r3, #22
    c0e2:	18fb      	adds	r3, r7, r3
    c0e4:	781b      	ldrb	r3, [r3, #0]
    c0e6:	2b00      	cmp	r3, #0
    c0e8:	d000      	beq.n	c0ec <nm_spi_write+0x1a4>
    c0ea:	e73c      	b.n	bf66 <nm_spi_write+0x1e>
	}


	return result;
    c0ec:	2317      	movs	r3, #23
    c0ee:	18fb      	adds	r3, r7, r3
    c0f0:	781b      	ldrb	r3, [r3, #0]
    c0f2:	b25b      	sxtb	r3, r3
}
    c0f4:	0018      	movs	r0, r3
    c0f6:	46bd      	mov	sp, r7
    c0f8:	b006      	add	sp, #24
    c0fa:	bdb0      	pop	{r4, r5, r7, pc}
    c0fc:	0000b469 	.word	0x0000b469
    c100:	000003ca 	.word	0x000003ca
    c104:	0001ab48 	.word	0x0001ab48
    c108:	0001a560 	.word	0x0001a560
    c10c:	00018619 	.word	0x00018619
    c110:	0001a810 	.word	0x0001a810
    c114:	0001864d 	.word	0x0001864d
    c118:	0000b8ad 	.word	0x0000b8ad
    c11c:	0001a840 	.word	0x0001a840
    c120:	0000bbe9 	.word	0x0000bbe9
    c124:	0001a878 	.word	0x0001a878
    c128:	00018739 	.word	0x00018739
    c12c:	0000b7ad 	.word	0x0000b7ad
    c130:	00008335 	.word	0x00008335
    c134:	000003f2 	.word	0x000003f2
    c138:	0001a8a0 	.word	0x0001a8a0

0000c13c <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    c13c:	b5b0      	push	{r4, r5, r7, lr}
    c13e:	b086      	sub	sp, #24
    c140:	af02      	add	r7, sp, #8
    c142:	6078      	str	r0, [r7, #4]
    c144:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    c146:	230f      	movs	r3, #15
    c148:	18fb      	adds	r3, r7, r3
    c14a:	220a      	movs	r2, #10
    c14c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    c14e:	230e      	movs	r3, #14
    c150:	18fb      	adds	r3, r7, r3
    c152:	2201      	movs	r2, #1
    c154:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    c156:	230d      	movs	r3, #13
    c158:	18fb      	adds	r3, r7, r3
    c15a:	22ca      	movs	r2, #202	; 0xca
    c15c:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    c15e:	230c      	movs	r3, #12
    c160:	18fb      	adds	r3, r7, r3
    c162:	2200      	movs	r2, #0
    c164:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    c166:	687b      	ldr	r3, [r7, #4]
    c168:	2bff      	cmp	r3, #255	; 0xff
    c16a:	d808      	bhi.n	c17e <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    c16c:	230d      	movs	r3, #13
    c16e:	18fb      	adds	r3, r7, r3
    c170:	22c4      	movs	r2, #196	; 0xc4
    c172:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    c174:	230c      	movs	r3, #12
    c176:	18fb      	adds	r3, r7, r3
    c178:	2201      	movs	r2, #1
    c17a:	701a      	strb	r2, [r3, #0]
    c17c:	e007      	b.n	c18e <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    c17e:	230d      	movs	r3, #13
    c180:	18fb      	adds	r3, r7, r3
    c182:	22ca      	movs	r2, #202	; 0xca
    c184:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    c186:	230c      	movs	r3, #12
    c188:	18fb      	adds	r3, r7, r3
    c18a:	2200      	movs	r2, #0
    c18c:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    c18e:	230e      	movs	r3, #14
    c190:	18fc      	adds	r4, r7, r3
    c192:	6879      	ldr	r1, [r7, #4]
    c194:	230d      	movs	r3, #13
    c196:	18fb      	adds	r3, r7, r3
    c198:	7818      	ldrb	r0, [r3, #0]
    c19a:	230c      	movs	r3, #12
    c19c:	18fb      	adds	r3, r7, r3
    c19e:	781b      	ldrb	r3, [r3, #0]
    c1a0:	9300      	str	r3, [sp, #0]
    c1a2:	2304      	movs	r3, #4
    c1a4:	2200      	movs	r2, #0
    c1a6:	4d56      	ldr	r5, [pc, #344]	; (c300 <spi_read_reg+0x1c4>)
    c1a8:	47a8      	blx	r5
    c1aa:	0003      	movs	r3, r0
    c1ac:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c1ae:	230e      	movs	r3, #14
    c1b0:	18fb      	adds	r3, r7, r3
    c1b2:	781b      	ldrb	r3, [r3, #0]
    c1b4:	b25b      	sxtb	r3, r3
    c1b6:	2b01      	cmp	r3, #1
    c1b8:	d00f      	beq.n	c1da <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    c1ba:	4a52      	ldr	r2, [pc, #328]	; (c304 <spi_read_reg+0x1c8>)
    c1bc:	4952      	ldr	r1, [pc, #328]	; (c308 <spi_read_reg+0x1cc>)
    c1be:	4b53      	ldr	r3, [pc, #332]	; (c30c <spi_read_reg+0x1d0>)
    c1c0:	0018      	movs	r0, r3
    c1c2:	4b53      	ldr	r3, [pc, #332]	; (c310 <spi_read_reg+0x1d4>)
    c1c4:	4798      	blx	r3
    c1c6:	687a      	ldr	r2, [r7, #4]
    c1c8:	4b52      	ldr	r3, [pc, #328]	; (c314 <spi_read_reg+0x1d8>)
    c1ca:	0011      	movs	r1, r2
    c1cc:	0018      	movs	r0, r3
    c1ce:	4b50      	ldr	r3, [pc, #320]	; (c310 <spi_read_reg+0x1d4>)
    c1d0:	4798      	blx	r3
    c1d2:	200d      	movs	r0, #13
    c1d4:	4b50      	ldr	r3, [pc, #320]	; (c318 <spi_read_reg+0x1dc>)
    c1d6:	4798      	blx	r3
		goto _FAIL_;
    c1d8:	e055      	b.n	c286 <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    c1da:	230e      	movs	r3, #14
    c1dc:	18fc      	adds	r4, r7, r3
    c1de:	230d      	movs	r3, #13
    c1e0:	18fb      	adds	r3, r7, r3
    c1e2:	781b      	ldrb	r3, [r3, #0]
    c1e4:	0018      	movs	r0, r3
    c1e6:	4b4d      	ldr	r3, [pc, #308]	; (c31c <spi_read_reg+0x1e0>)
    c1e8:	4798      	blx	r3
    c1ea:	0003      	movs	r3, r0
    c1ec:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c1ee:	230e      	movs	r3, #14
    c1f0:	18fb      	adds	r3, r7, r3
    c1f2:	781b      	ldrb	r3, [r3, #0]
    c1f4:	b25b      	sxtb	r3, r3
    c1f6:	2b01      	cmp	r3, #1
    c1f8:	d00f      	beq.n	c21a <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    c1fa:	4a49      	ldr	r2, [pc, #292]	; (c320 <spi_read_reg+0x1e4>)
    c1fc:	4942      	ldr	r1, [pc, #264]	; (c308 <spi_read_reg+0x1cc>)
    c1fe:	4b43      	ldr	r3, [pc, #268]	; (c30c <spi_read_reg+0x1d0>)
    c200:	0018      	movs	r0, r3
    c202:	4b43      	ldr	r3, [pc, #268]	; (c310 <spi_read_reg+0x1d4>)
    c204:	4798      	blx	r3
    c206:	687a      	ldr	r2, [r7, #4]
    c208:	4b46      	ldr	r3, [pc, #280]	; (c324 <spi_read_reg+0x1e8>)
    c20a:	0011      	movs	r1, r2
    c20c:	0018      	movs	r0, r3
    c20e:	4b40      	ldr	r3, [pc, #256]	; (c310 <spi_read_reg+0x1d4>)
    c210:	4798      	blx	r3
    c212:	200d      	movs	r0, #13
    c214:	4b40      	ldr	r3, [pc, #256]	; (c318 <spi_read_reg+0x1dc>)
    c216:	4798      	blx	r3
		goto _FAIL_;
    c218:	e035      	b.n	c286 <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    c21a:	230e      	movs	r3, #14
    c21c:	18fc      	adds	r4, r7, r3
    c21e:	230c      	movs	r3, #12
    c220:	18fb      	adds	r3, r7, r3
    c222:	781a      	ldrb	r2, [r3, #0]
    c224:	2308      	movs	r3, #8
    c226:	18fb      	adds	r3, r7, r3
    c228:	2104      	movs	r1, #4
    c22a:	0018      	movs	r0, r3
    c22c:	4b3e      	ldr	r3, [pc, #248]	; (c328 <spi_read_reg+0x1ec>)
    c22e:	4798      	blx	r3
    c230:	0003      	movs	r3, r0
    c232:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c234:	230e      	movs	r3, #14
    c236:	18fb      	adds	r3, r7, r3
    c238:	781b      	ldrb	r3, [r3, #0]
    c23a:	b25b      	sxtb	r3, r3
    c23c:	2b01      	cmp	r3, #1
    c23e:	d00d      	beq.n	c25c <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    c240:	4a3a      	ldr	r2, [pc, #232]	; (c32c <spi_read_reg+0x1f0>)
    c242:	4931      	ldr	r1, [pc, #196]	; (c308 <spi_read_reg+0x1cc>)
    c244:	4b31      	ldr	r3, [pc, #196]	; (c30c <spi_read_reg+0x1d0>)
    c246:	0018      	movs	r0, r3
    c248:	4b31      	ldr	r3, [pc, #196]	; (c310 <spi_read_reg+0x1d4>)
    c24a:	4798      	blx	r3
    c24c:	4b38      	ldr	r3, [pc, #224]	; (c330 <spi_read_reg+0x1f4>)
    c24e:	0018      	movs	r0, r3
    c250:	4b38      	ldr	r3, [pc, #224]	; (c334 <spi_read_reg+0x1f8>)
    c252:	4798      	blx	r3
    c254:	200d      	movs	r0, #13
    c256:	4b30      	ldr	r3, [pc, #192]	; (c318 <spi_read_reg+0x1dc>)
    c258:	4798      	blx	r3
		goto _FAIL_;
    c25a:	e014      	b.n	c286 <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    c25c:	2308      	movs	r3, #8
    c25e:	18fb      	adds	r3, r7, r3
    c260:	781b      	ldrb	r3, [r3, #0]
    c262:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    c264:	2308      	movs	r3, #8
    c266:	18fb      	adds	r3, r7, r3
    c268:	785b      	ldrb	r3, [r3, #1]
    c26a:	021b      	lsls	r3, r3, #8
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    c26c:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    c26e:	2308      	movs	r3, #8
    c270:	18fb      	adds	r3, r7, r3
    c272:	789b      	ldrb	r3, [r3, #2]
    c274:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    c276:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    c278:	2308      	movs	r3, #8
    c27a:	18fb      	adds	r3, r7, r3
    c27c:	78db      	ldrb	r3, [r3, #3]
    c27e:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    c280:	431a      	orrs	r2, r3
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    c282:	683b      	ldr	r3, [r7, #0]
    c284:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
		
_FAIL_:
	if(result != N_OK)
    c286:	230e      	movs	r3, #14
    c288:	18fb      	adds	r3, r7, r3
    c28a:	781b      	ldrb	r3, [r3, #0]
    c28c:	b25b      	sxtb	r3, r3
    c28e:	2b01      	cmp	r3, #1
    c290:	d02e      	beq.n	c2f0 <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    c292:	2001      	movs	r0, #1
    c294:	4b28      	ldr	r3, [pc, #160]	; (c338 <spi_read_reg+0x1fc>)
    c296:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c298:	2300      	movs	r3, #0
    c29a:	9300      	str	r3, [sp, #0]
    c29c:	2300      	movs	r3, #0
    c29e:	2200      	movs	r2, #0
    c2a0:	2100      	movs	r1, #0
    c2a2:	20cf      	movs	r0, #207	; 0xcf
    c2a4:	4c16      	ldr	r4, [pc, #88]	; (c300 <spi_read_reg+0x1c4>)
    c2a6:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    c2a8:	20cf      	movs	r0, #207	; 0xcf
    c2aa:	4b1c      	ldr	r3, [pc, #112]	; (c31c <spi_read_reg+0x1e0>)
    c2ac:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    c2ae:	4a23      	ldr	r2, [pc, #140]	; (c33c <spi_read_reg+0x200>)
    c2b0:	4915      	ldr	r1, [pc, #84]	; (c308 <spi_read_reg+0x1cc>)
    c2b2:	4b16      	ldr	r3, [pc, #88]	; (c30c <spi_read_reg+0x1d0>)
    c2b4:	0018      	movs	r0, r3
    c2b6:	4b16      	ldr	r3, [pc, #88]	; (c310 <spi_read_reg+0x1d4>)
    c2b8:	4798      	blx	r3
    c2ba:	230f      	movs	r3, #15
    c2bc:	18fb      	adds	r3, r7, r3
    c2be:	7819      	ldrb	r1, [r3, #0]
    c2c0:	687a      	ldr	r2, [r7, #4]
    c2c2:	4b1f      	ldr	r3, [pc, #124]	; (c340 <spi_read_reg+0x204>)
    c2c4:	0018      	movs	r0, r3
    c2c6:	4b12      	ldr	r3, [pc, #72]	; (c310 <spi_read_reg+0x1d4>)
    c2c8:	4798      	blx	r3
    c2ca:	200d      	movs	r0, #13
    c2cc:	4b12      	ldr	r3, [pc, #72]	; (c318 <spi_read_reg+0x1dc>)
    c2ce:	4798      	blx	r3
		nm_bsp_sleep(1);
    c2d0:	2001      	movs	r0, #1
    c2d2:	4b19      	ldr	r3, [pc, #100]	; (c338 <spi_read_reg+0x1fc>)
    c2d4:	4798      	blx	r3
		retry--;
    c2d6:	230f      	movs	r3, #15
    c2d8:	18fb      	adds	r3, r7, r3
    c2da:	781a      	ldrb	r2, [r3, #0]
    c2dc:	230f      	movs	r3, #15
    c2de:	18fb      	adds	r3, r7, r3
    c2e0:	3a01      	subs	r2, #1
    c2e2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    c2e4:	230f      	movs	r3, #15
    c2e6:	18fb      	adds	r3, r7, r3
    c2e8:	781b      	ldrb	r3, [r3, #0]
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d000      	beq.n	c2f0 <spi_read_reg+0x1b4>
    c2ee:	e73a      	b.n	c166 <spi_read_reg+0x2a>
	}
		
	return result;
    c2f0:	230e      	movs	r3, #14
    c2f2:	18fb      	adds	r3, r7, r3
    c2f4:	781b      	ldrb	r3, [r3, #0]
    c2f6:	b25b      	sxtb	r3, r3
}
    c2f8:	0018      	movs	r0, r3
    c2fa:	46bd      	mov	sp, r7
    c2fc:	b004      	add	sp, #16
    c2fe:	bdb0      	pop	{r4, r5, r7, pc}
    c300:	0000b469 	.word	0x0000b469
    c304:	00000417 	.word	0x00000417
    c308:	0001ab58 	.word	0x0001ab58
    c30c:	0001a560 	.word	0x0001a560
    c310:	00018619 	.word	0x00018619
    c314:	0001a8bc 	.word	0x0001a8bc
    c318:	0001864d 	.word	0x0001864d
    c31c:	0000b8ad 	.word	0x0000b8ad
    c320:	0000041d 	.word	0x0000041d
    c324:	0001a8e8 	.word	0x0001a8e8
    c328:	0000b9e5 	.word	0x0000b9e5
    c32c:	00000424 	.word	0x00000424
    c330:	0001a91c 	.word	0x0001a91c
    c334:	00018739 	.word	0x00018739
    c338:	00008335 	.word	0x00008335
    c33c:	0000043c 	.word	0x0000043c
    c340:	0001a93c 	.word	0x0001a93c

0000c344 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    c344:	b5b0      	push	{r4, r5, r7, lr}
    c346:	b088      	sub	sp, #32
    c348:	af02      	add	r7, sp, #8
    c34a:	60f8      	str	r0, [r7, #12]
    c34c:	60b9      	str	r1, [r7, #8]
    c34e:	1dbb      	adds	r3, r7, #6
    c350:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    c352:	2314      	movs	r3, #20
    c354:	18fb      	adds	r3, r7, r3
    c356:	22c8      	movs	r2, #200	; 0xc8
    c358:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    c35a:	2316      	movs	r3, #22
    c35c:	18fb      	adds	r3, r7, r3
    c35e:	220a      	movs	r2, #10
    c360:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    c362:	2315      	movs	r3, #21
    c364:	18fb      	adds	r3, r7, r3
    c366:	2200      	movs	r2, #0
    c368:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    c36a:	1dbb      	adds	r3, r7, #6
    c36c:	881b      	ldrh	r3, [r3, #0]
    c36e:	2b01      	cmp	r3, #1
    c370:	d106      	bne.n	c380 <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    c372:	1dbb      	adds	r3, r7, #6
    c374:	2202      	movs	r2, #2
    c376:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    c378:	2315      	movs	r3, #21
    c37a:	18fb      	adds	r3, r7, r3
    c37c:	2201      	movs	r2, #1
    c37e:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    c380:	1dbb      	adds	r3, r7, #6
    c382:	881a      	ldrh	r2, [r3, #0]
    c384:	2317      	movs	r3, #23
    c386:	18fc      	adds	r4, r7, r3
    c388:	68f9      	ldr	r1, [r7, #12]
    c38a:	2314      	movs	r3, #20
    c38c:	18fb      	adds	r3, r7, r3
    c38e:	7818      	ldrb	r0, [r3, #0]
    c390:	2300      	movs	r3, #0
    c392:	9300      	str	r3, [sp, #0]
    c394:	0013      	movs	r3, r2
    c396:	2200      	movs	r2, #0
    c398:	4d56      	ldr	r5, [pc, #344]	; (c4f4 <nm_spi_read+0x1b0>)
    c39a:	47a8      	blx	r5
    c39c:	0003      	movs	r3, r0
    c39e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c3a0:	2317      	movs	r3, #23
    c3a2:	18fb      	adds	r3, r7, r3
    c3a4:	781b      	ldrb	r3, [r3, #0]
    c3a6:	b25b      	sxtb	r3, r3
    c3a8:	2b01      	cmp	r3, #1
    c3aa:	d00f      	beq.n	c3cc <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    c3ac:	4a52      	ldr	r2, [pc, #328]	; (c4f8 <nm_spi_read+0x1b4>)
    c3ae:	4953      	ldr	r1, [pc, #332]	; (c4fc <nm_spi_read+0x1b8>)
    c3b0:	4b53      	ldr	r3, [pc, #332]	; (c500 <nm_spi_read+0x1bc>)
    c3b2:	0018      	movs	r0, r3
    c3b4:	4b53      	ldr	r3, [pc, #332]	; (c504 <nm_spi_read+0x1c0>)
    c3b6:	4798      	blx	r3
    c3b8:	68fa      	ldr	r2, [r7, #12]
    c3ba:	4b53      	ldr	r3, [pc, #332]	; (c508 <nm_spi_read+0x1c4>)
    c3bc:	0011      	movs	r1, r2
    c3be:	0018      	movs	r0, r3
    c3c0:	4b50      	ldr	r3, [pc, #320]	; (c504 <nm_spi_read+0x1c0>)
    c3c2:	4798      	blx	r3
    c3c4:	200d      	movs	r0, #13
    c3c6:	4b51      	ldr	r3, [pc, #324]	; (c50c <nm_spi_read+0x1c8>)
    c3c8:	4798      	blx	r3
		goto _FAIL_;
    c3ca:	e055      	b.n	c478 <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    c3cc:	2317      	movs	r3, #23
    c3ce:	18fc      	adds	r4, r7, r3
    c3d0:	2314      	movs	r3, #20
    c3d2:	18fb      	adds	r3, r7, r3
    c3d4:	781b      	ldrb	r3, [r3, #0]
    c3d6:	0018      	movs	r0, r3
    c3d8:	4b4d      	ldr	r3, [pc, #308]	; (c510 <nm_spi_read+0x1cc>)
    c3da:	4798      	blx	r3
    c3dc:	0003      	movs	r3, r0
    c3de:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c3e0:	2317      	movs	r3, #23
    c3e2:	18fb      	adds	r3, r7, r3
    c3e4:	781b      	ldrb	r3, [r3, #0]
    c3e6:	b25b      	sxtb	r3, r3
    c3e8:	2b01      	cmp	r3, #1
    c3ea:	d00f      	beq.n	c40c <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    c3ec:	4a49      	ldr	r2, [pc, #292]	; (c514 <nm_spi_read+0x1d0>)
    c3ee:	4943      	ldr	r1, [pc, #268]	; (c4fc <nm_spi_read+0x1b8>)
    c3f0:	4b43      	ldr	r3, [pc, #268]	; (c500 <nm_spi_read+0x1bc>)
    c3f2:	0018      	movs	r0, r3
    c3f4:	4b43      	ldr	r3, [pc, #268]	; (c504 <nm_spi_read+0x1c0>)
    c3f6:	4798      	blx	r3
    c3f8:	68fa      	ldr	r2, [r7, #12]
    c3fa:	4b47      	ldr	r3, [pc, #284]	; (c518 <nm_spi_read+0x1d4>)
    c3fc:	0011      	movs	r1, r2
    c3fe:	0018      	movs	r0, r3
    c400:	4b40      	ldr	r3, [pc, #256]	; (c504 <nm_spi_read+0x1c0>)
    c402:	4798      	blx	r3
    c404:	200d      	movs	r0, #13
    c406:	4b41      	ldr	r3, [pc, #260]	; (c50c <nm_spi_read+0x1c8>)
    c408:	4798      	blx	r3
		goto _FAIL_;
    c40a:	e035      	b.n	c478 <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    c40c:	2315      	movs	r3, #21
    c40e:	18fb      	adds	r3, r7, r3
    c410:	781b      	ldrb	r3, [r3, #0]
    c412:	2b00      	cmp	r3, #0
    c414:	d011      	beq.n	c43a <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    c416:	2317      	movs	r3, #23
    c418:	18fc      	adds	r4, r7, r3
    c41a:	1dbb      	adds	r3, r7, #6
    c41c:	8819      	ldrh	r1, [r3, #0]
    c41e:	2310      	movs	r3, #16
    c420:	18fb      	adds	r3, r7, r3
    c422:	2200      	movs	r2, #0
    c424:	0018      	movs	r0, r3
    c426:	4b3d      	ldr	r3, [pc, #244]	; (c51c <nm_spi_read+0x1d8>)
    c428:	4798      	blx	r3
    c42a:	0003      	movs	r3, r0
    c42c:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    c42e:	2310      	movs	r3, #16
    c430:	18fb      	adds	r3, r7, r3
    c432:	781a      	ldrb	r2, [r3, #0]
    c434:	68bb      	ldr	r3, [r7, #8]
    c436:	701a      	strb	r2, [r3, #0]
    c438:	e00a      	b.n	c450 <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    c43a:	2317      	movs	r3, #23
    c43c:	18fc      	adds	r4, r7, r3
    c43e:	1dbb      	adds	r3, r7, #6
    c440:	8819      	ldrh	r1, [r3, #0]
    c442:	68bb      	ldr	r3, [r7, #8]
    c444:	2200      	movs	r2, #0
    c446:	0018      	movs	r0, r3
    c448:	4b34      	ldr	r3, [pc, #208]	; (c51c <nm_spi_read+0x1d8>)
    c44a:	4798      	blx	r3
    c44c:	0003      	movs	r3, r0
    c44e:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    c450:	2317      	movs	r3, #23
    c452:	18fb      	adds	r3, r7, r3
    c454:	781b      	ldrb	r3, [r3, #0]
    c456:	b25b      	sxtb	r3, r3
    c458:	2b01      	cmp	r3, #1
    c45a:	d00d      	beq.n	c478 <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    c45c:	4a30      	ldr	r2, [pc, #192]	; (c520 <nm_spi_read+0x1dc>)
    c45e:	4927      	ldr	r1, [pc, #156]	; (c4fc <nm_spi_read+0x1b8>)
    c460:	4b27      	ldr	r3, [pc, #156]	; (c500 <nm_spi_read+0x1bc>)
    c462:	0018      	movs	r0, r3
    c464:	4b27      	ldr	r3, [pc, #156]	; (c504 <nm_spi_read+0x1c0>)
    c466:	4798      	blx	r3
    c468:	4b2e      	ldr	r3, [pc, #184]	; (c524 <nm_spi_read+0x1e0>)
    c46a:	0018      	movs	r0, r3
    c46c:	4b2e      	ldr	r3, [pc, #184]	; (c528 <nm_spi_read+0x1e4>)
    c46e:	4798      	blx	r3
    c470:	200d      	movs	r0, #13
    c472:	4b26      	ldr	r3, [pc, #152]	; (c50c <nm_spi_read+0x1c8>)
    c474:	4798      	blx	r3
		goto _FAIL_;
    c476:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    c478:	2317      	movs	r3, #23
    c47a:	18fb      	adds	r3, r7, r3
    c47c:	781b      	ldrb	r3, [r3, #0]
    c47e:	b25b      	sxtb	r3, r3
    c480:	2b01      	cmp	r3, #1
    c482:	d02f      	beq.n	c4e4 <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    c484:	2001      	movs	r0, #1
    c486:	4b29      	ldr	r3, [pc, #164]	; (c52c <nm_spi_read+0x1e8>)
    c488:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c48a:	2300      	movs	r3, #0
    c48c:	9300      	str	r3, [sp, #0]
    c48e:	2300      	movs	r3, #0
    c490:	2200      	movs	r2, #0
    c492:	2100      	movs	r1, #0
    c494:	20cf      	movs	r0, #207	; 0xcf
    c496:	4c17      	ldr	r4, [pc, #92]	; (c4f4 <nm_spi_read+0x1b0>)
    c498:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    c49a:	20cf      	movs	r0, #207	; 0xcf
    c49c:	4b1c      	ldr	r3, [pc, #112]	; (c510 <nm_spi_read+0x1cc>)
    c49e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    c4a0:	4a23      	ldr	r2, [pc, #140]	; (c530 <nm_spi_read+0x1ec>)
    c4a2:	4916      	ldr	r1, [pc, #88]	; (c4fc <nm_spi_read+0x1b8>)
    c4a4:	4b16      	ldr	r3, [pc, #88]	; (c500 <nm_spi_read+0x1bc>)
    c4a6:	0018      	movs	r0, r3
    c4a8:	4b16      	ldr	r3, [pc, #88]	; (c504 <nm_spi_read+0x1c0>)
    c4aa:	4798      	blx	r3
    c4ac:	2316      	movs	r3, #22
    c4ae:	18fb      	adds	r3, r7, r3
    c4b0:	7819      	ldrb	r1, [r3, #0]
    c4b2:	1dbb      	adds	r3, r7, #6
    c4b4:	881b      	ldrh	r3, [r3, #0]
    c4b6:	68fa      	ldr	r2, [r7, #12]
    c4b8:	481e      	ldr	r0, [pc, #120]	; (c534 <nm_spi_read+0x1f0>)
    c4ba:	4c12      	ldr	r4, [pc, #72]	; (c504 <nm_spi_read+0x1c0>)
    c4bc:	47a0      	blx	r4
    c4be:	200d      	movs	r0, #13
    c4c0:	4b12      	ldr	r3, [pc, #72]	; (c50c <nm_spi_read+0x1c8>)
    c4c2:	4798      	blx	r3
		nm_bsp_sleep(1);
    c4c4:	2001      	movs	r0, #1
    c4c6:	4b19      	ldr	r3, [pc, #100]	; (c52c <nm_spi_read+0x1e8>)
    c4c8:	4798      	blx	r3
		retry--;
    c4ca:	2316      	movs	r3, #22
    c4cc:	18fb      	adds	r3, r7, r3
    c4ce:	781a      	ldrb	r2, [r3, #0]
    c4d0:	2316      	movs	r3, #22
    c4d2:	18fb      	adds	r3, r7, r3
    c4d4:	3a01      	subs	r2, #1
    c4d6:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    c4d8:	2316      	movs	r3, #22
    c4da:	18fb      	adds	r3, r7, r3
    c4dc:	781b      	ldrb	r3, [r3, #0]
    c4de:	2b00      	cmp	r3, #0
    c4e0:	d000      	beq.n	c4e4 <nm_spi_read+0x1a0>
    c4e2:	e742      	b.n	c36a <nm_spi_read+0x26>
	}

	return result;
    c4e4:	2317      	movs	r3, #23
    c4e6:	18fb      	adds	r3, r7, r3
    c4e8:	781b      	ldrb	r3, [r3, #0]
    c4ea:	b25b      	sxtb	r3, r3
}
    c4ec:	0018      	movs	r0, r3
    c4ee:	46bd      	mov	sp, r7
    c4f0:	b006      	add	sp, #24
    c4f2:	bdb0      	pop	{r4, r5, r7, pc}
    c4f4:	0000b469 	.word	0x0000b469
    c4f8:	0000045d 	.word	0x0000045d
    c4fc:	0001ab68 	.word	0x0001ab68
    c500:	0001a560 	.word	0x0001a560
    c504:	00018619 	.word	0x00018619
    c508:	0001a954 	.word	0x0001a954
    c50c:	0001864d 	.word	0x0001864d
    c510:	0000b8ad 	.word	0x0000b8ad
    c514:	00000463 	.word	0x00000463
    c518:	0001a984 	.word	0x0001a984
    c51c:	0000b9e5 	.word	0x0000b9e5
    c520:	00000473 	.word	0x00000473
    c524:	0001a9bc 	.word	0x0001a9bc
    c528:	00018739 	.word	0x00018739
    c52c:	00008335 	.word	0x00008335
    c530:	00000484 	.word	0x00000484
    c534:	0001a8a0 	.word	0x0001a8a0

0000c538 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    c538:	b580      	push	{r7, lr}
    c53a:	b082      	sub	sp, #8
    c53c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    c53e:	4b0c      	ldr	r3, [pc, #48]	; (c570 <spi_init_pkt_sz+0x38>)
    c540:	0018      	movs	r0, r3
    c542:	4b0c      	ldr	r3, [pc, #48]	; (c574 <spi_init_pkt_sz+0x3c>)
    c544:	4798      	blx	r3
    c546:	0003      	movs	r3, r0
    c548:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    c54a:	687b      	ldr	r3, [r7, #4]
    c54c:	2270      	movs	r2, #112	; 0x70
    c54e:	4393      	bics	r3, r2
    c550:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    c552:	687b      	ldr	r3, [r7, #4]
    c554:	2250      	movs	r2, #80	; 0x50
    c556:	4313      	orrs	r3, r2
    c558:	607b      	str	r3, [r7, #4]
    c55a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    c55c:	687b      	ldr	r3, [r7, #4]
    c55e:	4a04      	ldr	r2, [pc, #16]	; (c570 <spi_init_pkt_sz+0x38>)
    c560:	0019      	movs	r1, r3
    c562:	0010      	movs	r0, r2
    c564:	4b04      	ldr	r3, [pc, #16]	; (c578 <spi_init_pkt_sz+0x40>)
    c566:	4798      	blx	r3
}
    c568:	46c0      	nop			; (mov r8, r8)
    c56a:	46bd      	mov	sp, r7
    c56c:	b002      	add	sp, #8
    c56e:	bd80      	pop	{r7, pc}
    c570:	0000e824 	.word	0x0000e824
    c574:	0000c711 	.word	0x0000c711
    c578:	0000c785 	.word	0x0000c785

0000c57c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    c57c:	b590      	push	{r4, r7, lr}
    c57e:	b083      	sub	sp, #12
    c580:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c582:	2300      	movs	r3, #0
    c584:	9300      	str	r3, [sp, #0]
    c586:	2300      	movs	r3, #0
    c588:	2200      	movs	r2, #0
    c58a:	2100      	movs	r1, #0
    c58c:	20cf      	movs	r0, #207	; 0xcf
    c58e:	4c05      	ldr	r4, [pc, #20]	; (c5a4 <nm_spi_reset+0x28>)
    c590:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    c592:	20cf      	movs	r0, #207	; 0xcf
    c594:	4b04      	ldr	r3, [pc, #16]	; (c5a8 <nm_spi_reset+0x2c>)
    c596:	4798      	blx	r3
	return M2M_SUCCESS;
    c598:	2300      	movs	r3, #0
}
    c59a:	0018      	movs	r0, r3
    c59c:	46bd      	mov	sp, r7
    c59e:	b001      	add	sp, #4
    c5a0:	bd90      	pop	{r4, r7, pc}
    c5a2:	46c0      	nop			; (mov r8, r8)
    c5a4:	0000b469 	.word	0x0000b469
    c5a8:	0000b8ad 	.word	0x0000b8ad

0000c5ac <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    c5ac:	b580      	push	{r7, lr}
    c5ae:	b082      	sub	sp, #8
    c5b0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    c5b2:	2300      	movs	r3, #0
    c5b4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    c5b6:	4b3e      	ldr	r3, [pc, #248]	; (c6b0 <nm_spi_init+0x104>)
    c5b8:	2200      	movs	r2, #0
    c5ba:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    c5bc:	003b      	movs	r3, r7
    c5be:	4a3d      	ldr	r2, [pc, #244]	; (c6b4 <nm_spi_init+0x108>)
    c5c0:	0019      	movs	r1, r3
    c5c2:	0010      	movs	r0, r2
    c5c4:	4b3c      	ldr	r3, [pc, #240]	; (c6b8 <nm_spi_init+0x10c>)
    c5c6:	4798      	blx	r3
    c5c8:	1e03      	subs	r3, r0, #0
    c5ca:	d126      	bne.n	c61a <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    c5cc:	4b38      	ldr	r3, [pc, #224]	; (c6b0 <nm_spi_init+0x104>)
    c5ce:	2201      	movs	r2, #1
    c5d0:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    c5d2:	4a3a      	ldr	r2, [pc, #232]	; (c6bc <nm_spi_init+0x110>)
    c5d4:	493a      	ldr	r1, [pc, #232]	; (c6c0 <nm_spi_init+0x114>)
    c5d6:	4b3b      	ldr	r3, [pc, #236]	; (c6c4 <nm_spi_init+0x118>)
    c5d8:	0018      	movs	r0, r3
    c5da:	4b3b      	ldr	r3, [pc, #236]	; (c6c8 <nm_spi_init+0x11c>)
    c5dc:	4798      	blx	r3
    c5de:	4b3b      	ldr	r3, [pc, #236]	; (c6cc <nm_spi_init+0x120>)
    c5e0:	0018      	movs	r0, r3
    c5e2:	4b3b      	ldr	r3, [pc, #236]	; (c6d0 <nm_spi_init+0x124>)
    c5e4:	4798      	blx	r3
    c5e6:	200d      	movs	r0, #13
    c5e8:	4b3a      	ldr	r3, [pc, #232]	; (c6d4 <nm_spi_init+0x128>)
    c5ea:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    c5ec:	003b      	movs	r3, r7
    c5ee:	4a31      	ldr	r2, [pc, #196]	; (c6b4 <nm_spi_init+0x108>)
    c5f0:	0019      	movs	r1, r3
    c5f2:	0010      	movs	r0, r2
    c5f4:	4b30      	ldr	r3, [pc, #192]	; (c6b8 <nm_spi_init+0x10c>)
    c5f6:	4798      	blx	r3
    c5f8:	1e03      	subs	r3, r0, #0
    c5fa:	d10e      	bne.n	c61a <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    c5fc:	4a36      	ldr	r2, [pc, #216]	; (c6d8 <nm_spi_init+0x12c>)
    c5fe:	4930      	ldr	r1, [pc, #192]	; (c6c0 <nm_spi_init+0x114>)
    c600:	4b30      	ldr	r3, [pc, #192]	; (c6c4 <nm_spi_init+0x118>)
    c602:	0018      	movs	r0, r3
    c604:	4b30      	ldr	r3, [pc, #192]	; (c6c8 <nm_spi_init+0x11c>)
    c606:	4798      	blx	r3
    c608:	4b34      	ldr	r3, [pc, #208]	; (c6dc <nm_spi_init+0x130>)
    c60a:	0018      	movs	r0, r3
    c60c:	4b30      	ldr	r3, [pc, #192]	; (c6d0 <nm_spi_init+0x124>)
    c60e:	4798      	blx	r3
    c610:	200d      	movs	r0, #13
    c612:	4b30      	ldr	r3, [pc, #192]	; (c6d4 <nm_spi_init+0x128>)
    c614:	4798      	blx	r3
			return 0;
    c616:	2300      	movs	r3, #0
    c618:	e045      	b.n	c6a6 <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    c61a:	4b25      	ldr	r3, [pc, #148]	; (c6b0 <nm_spi_init+0x104>)
    c61c:	781b      	ldrb	r3, [r3, #0]
    c61e:	2b00      	cmp	r3, #0
    c620:	d125      	bne.n	c66e <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    c622:	683b      	ldr	r3, [r7, #0]
    c624:	220c      	movs	r2, #12
    c626:	4393      	bics	r3, r2
    c628:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    c62a:	683b      	ldr	r3, [r7, #0]
    c62c:	2270      	movs	r2, #112	; 0x70
    c62e:	4393      	bics	r3, r2
    c630:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    c632:	683b      	ldr	r3, [r7, #0]
    c634:	2250      	movs	r2, #80	; 0x50
    c636:	4313      	orrs	r3, r2
    c638:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    c63a:	683b      	ldr	r3, [r7, #0]
    c63c:	4a1d      	ldr	r2, [pc, #116]	; (c6b4 <nm_spi_init+0x108>)
    c63e:	0019      	movs	r1, r3
    c640:	0010      	movs	r0, r2
    c642:	4b27      	ldr	r3, [pc, #156]	; (c6e0 <nm_spi_init+0x134>)
    c644:	4798      	blx	r3
    c646:	1e03      	subs	r3, r0, #0
    c648:	d10e      	bne.n	c668 <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    c64a:	4a26      	ldr	r2, [pc, #152]	; (c6e4 <nm_spi_init+0x138>)
    c64c:	491c      	ldr	r1, [pc, #112]	; (c6c0 <nm_spi_init+0x114>)
    c64e:	4b1d      	ldr	r3, [pc, #116]	; (c6c4 <nm_spi_init+0x118>)
    c650:	0018      	movs	r0, r3
    c652:	4b1d      	ldr	r3, [pc, #116]	; (c6c8 <nm_spi_init+0x11c>)
    c654:	4798      	blx	r3
    c656:	4b24      	ldr	r3, [pc, #144]	; (c6e8 <nm_spi_init+0x13c>)
    c658:	0018      	movs	r0, r3
    c65a:	4b1d      	ldr	r3, [pc, #116]	; (c6d0 <nm_spi_init+0x124>)
    c65c:	4798      	blx	r3
    c65e:	200d      	movs	r0, #13
    c660:	4b1c      	ldr	r3, [pc, #112]	; (c6d4 <nm_spi_init+0x128>)
    c662:	4798      	blx	r3
			return 0;
    c664:	2300      	movs	r3, #0
    c666:	e01e      	b.n	c6a6 <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    c668:	4b11      	ldr	r3, [pc, #68]	; (c6b0 <nm_spi_init+0x104>)
    c66a:	2201      	movs	r2, #1
    c66c:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    c66e:	1d3a      	adds	r2, r7, #4
    c670:	2380      	movs	r3, #128	; 0x80
    c672:	015b      	lsls	r3, r3, #5
    c674:	0011      	movs	r1, r2
    c676:	0018      	movs	r0, r3
    c678:	4b0f      	ldr	r3, [pc, #60]	; (c6b8 <nm_spi_init+0x10c>)
    c67a:	4798      	blx	r3
    c67c:	1e03      	subs	r3, r0, #0
    c67e:	d10f      	bne.n	c6a0 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    c680:	4a1a      	ldr	r2, [pc, #104]	; (c6ec <nm_spi_init+0x140>)
    c682:	490f      	ldr	r1, [pc, #60]	; (c6c0 <nm_spi_init+0x114>)
    c684:	4b0f      	ldr	r3, [pc, #60]	; (c6c4 <nm_spi_init+0x118>)
    c686:	0018      	movs	r0, r3
    c688:	4b0f      	ldr	r3, [pc, #60]	; (c6c8 <nm_spi_init+0x11c>)
    c68a:	4798      	blx	r3
    c68c:	4b18      	ldr	r3, [pc, #96]	; (c6f0 <nm_spi_init+0x144>)
    c68e:	0018      	movs	r0, r3
    c690:	4b0f      	ldr	r3, [pc, #60]	; (c6d0 <nm_spi_init+0x124>)
    c692:	4798      	blx	r3
    c694:	200d      	movs	r0, #13
    c696:	4b0f      	ldr	r3, [pc, #60]	; (c6d4 <nm_spi_init+0x128>)
    c698:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    c69a:	2306      	movs	r3, #6
    c69c:	425b      	negs	r3, r3
    c69e:	e002      	b.n	c6a6 <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    c6a0:	4b14      	ldr	r3, [pc, #80]	; (c6f4 <nm_spi_init+0x148>)
    c6a2:	4798      	blx	r3


	return M2M_SUCCESS;
    c6a4:	2300      	movs	r3, #0
}
    c6a6:	0018      	movs	r0, r3
    c6a8:	46bd      	mov	sp, r7
    c6aa:	b002      	add	sp, #8
    c6ac:	bd80      	pop	{r7, pc}
    c6ae:	46c0      	nop			; (mov r8, r8)
    c6b0:	200000c0 	.word	0x200000c0
    c6b4:	0000e824 	.word	0x0000e824
    c6b8:	0000c13d 	.word	0x0000c13d
    c6bc:	000004c7 	.word	0x000004c7
    c6c0:	0001ab74 	.word	0x0001ab74
    c6c4:	0001a560 	.word	0x0001a560
    c6c8:	00018619 	.word	0x00018619
    c6cc:	0001a9e4 	.word	0x0001a9e4
    c6d0:	00018739 	.word	0x00018739
    c6d4:	0001864d 	.word	0x0001864d
    c6d8:	000004ca 	.word	0x000004ca
    c6dc:	0001aa34 	.word	0x0001aa34
    c6e0:	0000bdbd 	.word	0x0000bdbd
    c6e4:	000004d4 	.word	0x000004d4
    c6e8:	0001aa60 	.word	0x0001aa60
    c6ec:	000004de 	.word	0x000004de
    c6f0:	0001aa94 	.word	0x0001aa94
    c6f4:	0000c539 	.word	0x0000c539

0000c6f8 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    c6f8:	b580      	push	{r7, lr}
    c6fa:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    c6fc:	4b03      	ldr	r3, [pc, #12]	; (c70c <nm_spi_deinit+0x14>)
    c6fe:	2200      	movs	r2, #0
    c700:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    c702:	2300      	movs	r3, #0
}
    c704:	0018      	movs	r0, r3
    c706:	46bd      	mov	sp, r7
    c708:	bd80      	pop	{r7, pc}
    c70a:	46c0      	nop			; (mov r8, r8)
    c70c:	200000c0 	.word	0x200000c0

0000c710 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    c710:	b580      	push	{r7, lr}
    c712:	b084      	sub	sp, #16
    c714:	af00      	add	r7, sp, #0
    c716:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    c718:	230c      	movs	r3, #12
    c71a:	18fa      	adds	r2, r7, r3
    c71c:	687b      	ldr	r3, [r7, #4]
    c71e:	0011      	movs	r1, r2
    c720:	0018      	movs	r0, r3
    c722:	4b03      	ldr	r3, [pc, #12]	; (c730 <nm_spi_read_reg+0x20>)
    c724:	4798      	blx	r3

	return u32Val;
    c726:	68fb      	ldr	r3, [r7, #12]
}
    c728:	0018      	movs	r0, r3
    c72a:	46bd      	mov	sp, r7
    c72c:	b004      	add	sp, #16
    c72e:	bd80      	pop	{r7, pc}
    c730:	0000c13d 	.word	0x0000c13d

0000c734 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    c734:	b590      	push	{r4, r7, lr}
    c736:	b085      	sub	sp, #20
    c738:	af00      	add	r7, sp, #0
    c73a:	6078      	str	r0, [r7, #4]
    c73c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    c73e:	230f      	movs	r3, #15
    c740:	18fc      	adds	r4, r7, r3
    c742:	683a      	ldr	r2, [r7, #0]
    c744:	687b      	ldr	r3, [r7, #4]
    c746:	0011      	movs	r1, r2
    c748:	0018      	movs	r0, r3
    c74a:	4b0d      	ldr	r3, [pc, #52]	; (c780 <nm_spi_read_reg_with_ret+0x4c>)
    c74c:	4798      	blx	r3
    c74e:	0003      	movs	r3, r0
    c750:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c752:	230f      	movs	r3, #15
    c754:	18fb      	adds	r3, r7, r3
    c756:	781b      	ldrb	r3, [r3, #0]
    c758:	b25b      	sxtb	r3, r3
    c75a:	2b01      	cmp	r3, #1
    c75c:	d104      	bne.n	c768 <nm_spi_read_reg_with_ret+0x34>
    c75e:	230f      	movs	r3, #15
    c760:	18fb      	adds	r3, r7, r3
    c762:	2200      	movs	r2, #0
    c764:	701a      	strb	r2, [r3, #0]
    c766:	e003      	b.n	c770 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c768:	230f      	movs	r3, #15
    c76a:	18fb      	adds	r3, r7, r3
    c76c:	22fa      	movs	r2, #250	; 0xfa
    c76e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    c770:	230f      	movs	r3, #15
    c772:	18fb      	adds	r3, r7, r3
    c774:	781b      	ldrb	r3, [r3, #0]
    c776:	b25b      	sxtb	r3, r3
}
    c778:	0018      	movs	r0, r3
    c77a:	46bd      	mov	sp, r7
    c77c:	b005      	add	sp, #20
    c77e:	bd90      	pop	{r4, r7, pc}
    c780:	0000c13d 	.word	0x0000c13d

0000c784 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    c784:	b590      	push	{r4, r7, lr}
    c786:	b085      	sub	sp, #20
    c788:	af00      	add	r7, sp, #0
    c78a:	6078      	str	r0, [r7, #4]
    c78c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    c78e:	230f      	movs	r3, #15
    c790:	18fc      	adds	r4, r7, r3
    c792:	683a      	ldr	r2, [r7, #0]
    c794:	687b      	ldr	r3, [r7, #4]
    c796:	0011      	movs	r1, r2
    c798:	0018      	movs	r0, r3
    c79a:	4b0d      	ldr	r3, [pc, #52]	; (c7d0 <nm_spi_write_reg+0x4c>)
    c79c:	4798      	blx	r3
    c79e:	0003      	movs	r3, r0
    c7a0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c7a2:	230f      	movs	r3, #15
    c7a4:	18fb      	adds	r3, r7, r3
    c7a6:	781b      	ldrb	r3, [r3, #0]
    c7a8:	b25b      	sxtb	r3, r3
    c7aa:	2b01      	cmp	r3, #1
    c7ac:	d104      	bne.n	c7b8 <nm_spi_write_reg+0x34>
    c7ae:	230f      	movs	r3, #15
    c7b0:	18fb      	adds	r3, r7, r3
    c7b2:	2200      	movs	r2, #0
    c7b4:	701a      	strb	r2, [r3, #0]
    c7b6:	e003      	b.n	c7c0 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c7b8:	230f      	movs	r3, #15
    c7ba:	18fb      	adds	r3, r7, r3
    c7bc:	22fa      	movs	r2, #250	; 0xfa
    c7be:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    c7c0:	230f      	movs	r3, #15
    c7c2:	18fb      	adds	r3, r7, r3
    c7c4:	781b      	ldrb	r3, [r3, #0]
    c7c6:	b25b      	sxtb	r3, r3
}
    c7c8:	0018      	movs	r0, r3
    c7ca:	46bd      	mov	sp, r7
    c7cc:	b005      	add	sp, #20
    c7ce:	bd90      	pop	{r4, r7, pc}
    c7d0:	0000bdbd 	.word	0x0000bdbd

0000c7d4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    c7d4:	b590      	push	{r4, r7, lr}
    c7d6:	b087      	sub	sp, #28
    c7d8:	af00      	add	r7, sp, #0
    c7da:	60f8      	str	r0, [r7, #12]
    c7dc:	60b9      	str	r1, [r7, #8]
    c7de:	1dbb      	adds	r3, r7, #6
    c7e0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    c7e2:	2317      	movs	r3, #23
    c7e4:	18fc      	adds	r4, r7, r3
    c7e6:	1dbb      	adds	r3, r7, #6
    c7e8:	881a      	ldrh	r2, [r3, #0]
    c7ea:	68b9      	ldr	r1, [r7, #8]
    c7ec:	68fb      	ldr	r3, [r7, #12]
    c7ee:	0018      	movs	r0, r3
    c7f0:	4b0d      	ldr	r3, [pc, #52]	; (c828 <nm_spi_read_block+0x54>)
    c7f2:	4798      	blx	r3
    c7f4:	0003      	movs	r3, r0
    c7f6:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c7f8:	2317      	movs	r3, #23
    c7fa:	18fb      	adds	r3, r7, r3
    c7fc:	781b      	ldrb	r3, [r3, #0]
    c7fe:	b25b      	sxtb	r3, r3
    c800:	2b01      	cmp	r3, #1
    c802:	d104      	bne.n	c80e <nm_spi_read_block+0x3a>
    c804:	2317      	movs	r3, #23
    c806:	18fb      	adds	r3, r7, r3
    c808:	2200      	movs	r2, #0
    c80a:	701a      	strb	r2, [r3, #0]
    c80c:	e003      	b.n	c816 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c80e:	2317      	movs	r3, #23
    c810:	18fb      	adds	r3, r7, r3
    c812:	22fa      	movs	r2, #250	; 0xfa
    c814:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    c816:	2317      	movs	r3, #23
    c818:	18fb      	adds	r3, r7, r3
    c81a:	781b      	ldrb	r3, [r3, #0]
    c81c:	b25b      	sxtb	r3, r3
}
    c81e:	0018      	movs	r0, r3
    c820:	46bd      	mov	sp, r7
    c822:	b007      	add	sp, #28
    c824:	bd90      	pop	{r4, r7, pc}
    c826:	46c0      	nop			; (mov r8, r8)
    c828:	0000c345 	.word	0x0000c345

0000c82c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    c82c:	b590      	push	{r4, r7, lr}
    c82e:	b087      	sub	sp, #28
    c830:	af00      	add	r7, sp, #0
    c832:	60f8      	str	r0, [r7, #12]
    c834:	60b9      	str	r1, [r7, #8]
    c836:	1dbb      	adds	r3, r7, #6
    c838:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    c83a:	2317      	movs	r3, #23
    c83c:	18fc      	adds	r4, r7, r3
    c83e:	1dbb      	adds	r3, r7, #6
    c840:	881a      	ldrh	r2, [r3, #0]
    c842:	68b9      	ldr	r1, [r7, #8]
    c844:	68fb      	ldr	r3, [r7, #12]
    c846:	0018      	movs	r0, r3
    c848:	4b0d      	ldr	r3, [pc, #52]	; (c880 <nm_spi_write_block+0x54>)
    c84a:	4798      	blx	r3
    c84c:	0003      	movs	r3, r0
    c84e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c850:	2317      	movs	r3, #23
    c852:	18fb      	adds	r3, r7, r3
    c854:	781b      	ldrb	r3, [r3, #0]
    c856:	b25b      	sxtb	r3, r3
    c858:	2b01      	cmp	r3, #1
    c85a:	d104      	bne.n	c866 <nm_spi_write_block+0x3a>
    c85c:	2317      	movs	r3, #23
    c85e:	18fb      	adds	r3, r7, r3
    c860:	2200      	movs	r2, #0
    c862:	701a      	strb	r2, [r3, #0]
    c864:	e003      	b.n	c86e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c866:	2317      	movs	r3, #23
    c868:	18fb      	adds	r3, r7, r3
    c86a:	22fa      	movs	r2, #250	; 0xfa
    c86c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    c86e:	2317      	movs	r3, #23
    c870:	18fb      	adds	r3, r7, r3
    c872:	781b      	ldrb	r3, [r3, #0]
    c874:	b25b      	sxtb	r3, r3
}
    c876:	0018      	movs	r0, r3
    c878:	46bd      	mov	sp, r7
    c87a:	b007      	add	sp, #28
    c87c:	bd90      	pop	{r4, r7, pc}
    c87e:	46c0      	nop			; (mov r8, r8)
    c880:	0000bf49 	.word	0x0000bf49

0000c884 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    c884:	b590      	push	{r4, r7, lr}
    c886:	b089      	sub	sp, #36	; 0x24
    c888:	af00      	add	r7, sp, #0
    c88a:	60b9      	str	r1, [r7, #8]
    c88c:	0011      	movs	r1, r2
    c88e:	607b      	str	r3, [r7, #4]
    c890:	230f      	movs	r3, #15
    c892:	18fb      	adds	r3, r7, r3
    c894:	1c02      	adds	r2, r0, #0
    c896:	701a      	strb	r2, [r3, #0]
    c898:	230e      	movs	r3, #14
    c89a:	18fb      	adds	r3, r7, r3
    c89c:	1c0a      	adds	r2, r1, #0
    c89e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    c8a0:	2330      	movs	r3, #48	; 0x30
    c8a2:	18fb      	adds	r3, r7, r3
    c8a4:	881b      	ldrh	r3, [r3, #0]
    c8a6:	2b00      	cmp	r3, #0
    c8a8:	d100      	bne.n	c8ac <Socket_ReadSocketData+0x28>
    c8aa:	e0d6      	b.n	ca5a <Socket_ReadSocketData+0x1d6>
    c8ac:	230f      	movs	r3, #15
    c8ae:	18fb      	adds	r3, r7, r3
    c8b0:	2200      	movs	r2, #0
    c8b2:	569a      	ldrsb	r2, [r3, r2]
    c8b4:	4b6b      	ldr	r3, [pc, #428]	; (ca64 <Socket_ReadSocketData+0x1e0>)
    c8b6:	0112      	lsls	r2, r2, #4
    c8b8:	58d3      	ldr	r3, [r2, r3]
    c8ba:	2b00      	cmp	r3, #0
    c8bc:	d100      	bne.n	c8c0 <Socket_ReadSocketData+0x3c>
    c8be:	e0cc      	b.n	ca5a <Socket_ReadSocketData+0x1d6>
    c8c0:	230f      	movs	r3, #15
    c8c2:	18fb      	adds	r3, r7, r3
    c8c4:	781b      	ldrb	r3, [r3, #0]
    c8c6:	b25b      	sxtb	r3, r3
    c8c8:	4a66      	ldr	r2, [pc, #408]	; (ca64 <Socket_ReadSocketData+0x1e0>)
    c8ca:	011b      	lsls	r3, r3, #4
    c8cc:	18d3      	adds	r3, r2, r3
    c8ce:	3304      	adds	r3, #4
    c8d0:	881b      	ldrh	r3, [r3, #0]
    c8d2:	b29b      	uxth	r3, r3
    c8d4:	2b00      	cmp	r3, #0
    c8d6:	d100      	bne.n	c8da <Socket_ReadSocketData+0x56>
    c8d8:	e0bf      	b.n	ca5a <Socket_ReadSocketData+0x1d6>
    c8da:	230f      	movs	r3, #15
    c8dc:	18fb      	adds	r3, r7, r3
    c8de:	781b      	ldrb	r3, [r3, #0]
    c8e0:	b25b      	sxtb	r3, r3
    c8e2:	4a60      	ldr	r2, [pc, #384]	; (ca64 <Socket_ReadSocketData+0x1e0>)
    c8e4:	011b      	lsls	r3, r3, #4
    c8e6:	18d3      	adds	r3, r2, r3
    c8e8:	330a      	adds	r3, #10
    c8ea:	781b      	ldrb	r3, [r3, #0]
    c8ec:	b2db      	uxtb	r3, r3
    c8ee:	2b01      	cmp	r3, #1
    c8f0:	d000      	beq.n	c8f4 <Socket_ReadSocketData+0x70>
    c8f2:	e0b2      	b.n	ca5a <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    c8f4:	687b      	ldr	r3, [r7, #4]
    c8f6:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    c8f8:	68bb      	ldr	r3, [r7, #8]
    c8fa:	2230      	movs	r2, #48	; 0x30
    c8fc:	18ba      	adds	r2, r7, r2
    c8fe:	8812      	ldrh	r2, [r2, #0]
    c900:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    c902:	2319      	movs	r3, #25
    c904:	18fb      	adds	r3, r7, r3
    c906:	2201      	movs	r2, #1
    c908:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    c90a:	231a      	movs	r3, #26
    c90c:	18fb      	adds	r3, r7, r3
    c90e:	2230      	movs	r2, #48	; 0x30
    c910:	18ba      	adds	r2, r7, r2
    c912:	8812      	ldrh	r2, [r2, #0]
    c914:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    c916:	230f      	movs	r3, #15
    c918:	18fb      	adds	r3, r7, r3
    c91a:	781b      	ldrb	r3, [r3, #0]
    c91c:	b25b      	sxtb	r3, r3
    c91e:	4a51      	ldr	r2, [pc, #324]	; (ca64 <Socket_ReadSocketData+0x1e0>)
    c920:	011b      	lsls	r3, r3, #4
    c922:	18d3      	adds	r3, r2, r3
    c924:	3304      	adds	r3, #4
    c926:	881b      	ldrh	r3, [r3, #0]
    c928:	b29b      	uxth	r3, r3
    c92a:	221a      	movs	r2, #26
    c92c:	18ba      	adds	r2, r7, r2
    c92e:	8812      	ldrh	r2, [r2, #0]
    c930:	1ad3      	subs	r3, r2, r3
    c932:	b29a      	uxth	r2, r3
    c934:	2316      	movs	r3, #22
    c936:	18fb      	adds	r3, r7, r3
    c938:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    c93a:	2316      	movs	r3, #22
    c93c:	18fb      	adds	r3, r7, r3
    c93e:	2200      	movs	r2, #0
    c940:	5e9b      	ldrsh	r3, [r3, r2]
    c942:	2b00      	cmp	r3, #0
    c944:	dd0f      	ble.n	c966 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    c946:	2319      	movs	r3, #25
    c948:	18fb      	adds	r3, r7, r3
    c94a:	2200      	movs	r2, #0
    c94c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    c94e:	230f      	movs	r3, #15
    c950:	18fb      	adds	r3, r7, r3
    c952:	2200      	movs	r2, #0
    c954:	569a      	ldrsb	r2, [r3, r2]
    c956:	231a      	movs	r3, #26
    c958:	18fb      	adds	r3, r7, r3
    c95a:	4942      	ldr	r1, [pc, #264]	; (ca64 <Socket_ReadSocketData+0x1e0>)
    c95c:	0112      	lsls	r2, r2, #4
    c95e:	188a      	adds	r2, r1, r2
    c960:	3204      	adds	r2, #4
    c962:	8812      	ldrh	r2, [r2, #0]
    c964:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    c966:	230f      	movs	r3, #15
    c968:	18fb      	adds	r3, r7, r3
    c96a:	2200      	movs	r2, #0
    c96c:	569a      	ldrsb	r2, [r3, r2]
    c96e:	4b3d      	ldr	r3, [pc, #244]	; (ca64 <Socket_ReadSocketData+0x1e0>)
    c970:	0112      	lsls	r2, r2, #4
    c972:	58d1      	ldr	r1, [r2, r3]
    c974:	2319      	movs	r3, #25
    c976:	18fb      	adds	r3, r7, r3
    c978:	781c      	ldrb	r4, [r3, #0]
    c97a:	231a      	movs	r3, #26
    c97c:	18fb      	adds	r3, r7, r3
    c97e:	881a      	ldrh	r2, [r3, #0]
    c980:	69f8      	ldr	r0, [r7, #28]
    c982:	0023      	movs	r3, r4
    c984:	4c38      	ldr	r4, [pc, #224]	; (ca68 <Socket_ReadSocketData+0x1e4>)
    c986:	47a0      	blx	r4
    c988:	1e03      	subs	r3, r0, #0
    c98a:	d14f      	bne.n	ca2c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    c98c:	230f      	movs	r3, #15
    c98e:	18fb      	adds	r3, r7, r3
    c990:	2200      	movs	r2, #0
    c992:	569a      	ldrsb	r2, [r3, r2]
    c994:	4b33      	ldr	r3, [pc, #204]	; (ca64 <Socket_ReadSocketData+0x1e0>)
    c996:	0112      	lsls	r2, r2, #4
    c998:	58d2      	ldr	r2, [r2, r3]
    c99a:	68bb      	ldr	r3, [r7, #8]
    c99c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    c99e:	231a      	movs	r3, #26
    c9a0:	18fb      	adds	r3, r7, r3
    c9a2:	2200      	movs	r2, #0
    c9a4:	5e9a      	ldrsh	r2, [r3, r2]
    c9a6:	68bb      	ldr	r3, [r7, #8]
    c9a8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    c9aa:	68bb      	ldr	r3, [r7, #8]
    c9ac:	88da      	ldrh	r2, [r3, #6]
    c9ae:	231a      	movs	r3, #26
    c9b0:	18fb      	adds	r3, r7, r3
    c9b2:	881b      	ldrh	r3, [r3, #0]
    c9b4:	1ad3      	subs	r3, r2, r3
    c9b6:	b29a      	uxth	r2, r3
    c9b8:	68bb      	ldr	r3, [r7, #8]
    c9ba:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    c9bc:	4b2b      	ldr	r3, [pc, #172]	; (ca6c <Socket_ReadSocketData+0x1e8>)
    c9be:	681b      	ldr	r3, [r3, #0]
    c9c0:	2b00      	cmp	r3, #0
    c9c2:	d00b      	beq.n	c9dc <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    c9c4:	4b29      	ldr	r3, [pc, #164]	; (ca6c <Socket_ReadSocketData+0x1e8>)
    c9c6:	681b      	ldr	r3, [r3, #0]
    c9c8:	68bc      	ldr	r4, [r7, #8]
    c9ca:	220e      	movs	r2, #14
    c9cc:	18ba      	adds	r2, r7, r2
    c9ce:	7811      	ldrb	r1, [r2, #0]
    c9d0:	220f      	movs	r2, #15
    c9d2:	18ba      	adds	r2, r7, r2
    c9d4:	2000      	movs	r0, #0
    c9d6:	5610      	ldrsb	r0, [r2, r0]
    c9d8:	0022      	movs	r2, r4
    c9da:	4798      	blx	r3

				u16ReadCount -= u16Read;
    c9dc:	2330      	movs	r3, #48	; 0x30
    c9de:	18f9      	adds	r1, r7, r3
    c9e0:	2330      	movs	r3, #48	; 0x30
    c9e2:	18fa      	adds	r2, r7, r3
    c9e4:	231a      	movs	r3, #26
    c9e6:	18fb      	adds	r3, r7, r3
    c9e8:	8812      	ldrh	r2, [r2, #0]
    c9ea:	881b      	ldrh	r3, [r3, #0]
    c9ec:	1ad3      	subs	r3, r2, r3
    c9ee:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    c9f0:	231a      	movs	r3, #26
    c9f2:	18fb      	adds	r3, r7, r3
    c9f4:	881b      	ldrh	r3, [r3, #0]
    c9f6:	69fa      	ldr	r2, [r7, #28]
    c9f8:	18d3      	adds	r3, r2, r3
    c9fa:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    c9fc:	230f      	movs	r3, #15
    c9fe:	18fb      	adds	r3, r7, r3
    ca00:	781b      	ldrb	r3, [r3, #0]
    ca02:	b25b      	sxtb	r3, r3
    ca04:	4a17      	ldr	r2, [pc, #92]	; (ca64 <Socket_ReadSocketData+0x1e0>)
    ca06:	011b      	lsls	r3, r3, #4
    ca08:	18d3      	adds	r3, r2, r3
    ca0a:	330a      	adds	r3, #10
    ca0c:	781b      	ldrb	r3, [r3, #0]
    ca0e:	b2db      	uxtb	r3, r3
    ca10:	2b00      	cmp	r3, #0
    ca12:	d11b      	bne.n	ca4c <Socket_ReadSocketData+0x1c8>
    ca14:	2330      	movs	r3, #48	; 0x30
    ca16:	18fb      	adds	r3, r7, r3
    ca18:	881b      	ldrh	r3, [r3, #0]
    ca1a:	2b00      	cmp	r3, #0
    ca1c:	d016      	beq.n	ca4c <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    ca1e:	2301      	movs	r3, #1
    ca20:	2200      	movs	r2, #0
    ca22:	2100      	movs	r1, #0
    ca24:	2000      	movs	r0, #0
    ca26:	4c10      	ldr	r4, [pc, #64]	; (ca68 <Socket_ReadSocketData+0x1e4>)
    ca28:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    ca2a:	e016      	b.n	ca5a <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    ca2c:	4b10      	ldr	r3, [pc, #64]	; (ca70 <Socket_ReadSocketData+0x1ec>)
    ca2e:	0018      	movs	r0, r3
    ca30:	4b10      	ldr	r3, [pc, #64]	; (ca74 <Socket_ReadSocketData+0x1f0>)
    ca32:	4798      	blx	r3
    ca34:	2330      	movs	r3, #48	; 0x30
    ca36:	18fb      	adds	r3, r7, r3
    ca38:	881a      	ldrh	r2, [r3, #0]
    ca3a:	4b0f      	ldr	r3, [pc, #60]	; (ca78 <Socket_ReadSocketData+0x1f4>)
    ca3c:	0011      	movs	r1, r2
    ca3e:	0018      	movs	r0, r3
    ca40:	4b0c      	ldr	r3, [pc, #48]	; (ca74 <Socket_ReadSocketData+0x1f0>)
    ca42:	4798      	blx	r3
    ca44:	200d      	movs	r0, #13
    ca46:	4b0d      	ldr	r3, [pc, #52]	; (ca7c <Socket_ReadSocketData+0x1f8>)
    ca48:	4798      	blx	r3
				break;
    ca4a:	e006      	b.n	ca5a <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    ca4c:	2330      	movs	r3, #48	; 0x30
    ca4e:	18fb      	adds	r3, r7, r3
    ca50:	881b      	ldrh	r3, [r3, #0]
    ca52:	2b00      	cmp	r3, #0
    ca54:	d000      	beq.n	ca58 <Socket_ReadSocketData+0x1d4>
    ca56:	e754      	b.n	c902 <Socket_ReadSocketData+0x7e>
	}
}
    ca58:	e7ff      	b.n	ca5a <Socket_ReadSocketData+0x1d6>
    ca5a:	46c0      	nop			; (mov r8, r8)
    ca5c:	46bd      	mov	sp, r7
    ca5e:	b009      	add	sp, #36	; 0x24
    ca60:	bd90      	pop	{r4, r7, pc}
    ca62:	46c0      	nop			; (mov r8, r8)
    ca64:	2000034c 	.word	0x2000034c
    ca68:	000097bd 	.word	0x000097bd
    ca6c:	200003fc 	.word	0x200003fc
    ca70:	0001ab80 	.word	0x0001ab80
    ca74:	00018619 	.word	0x00018619
    ca78:	0001ab8c 	.word	0x0001ab8c
    ca7c:	0001864d 	.word	0x0001864d

0000ca80 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    ca80:	b590      	push	{r4, r7, lr}
    ca82:	b0bb      	sub	sp, #236	; 0xec
    ca84:	af02      	add	r7, sp, #8
    ca86:	603a      	str	r2, [r7, #0]
    ca88:	1dfb      	adds	r3, r7, #7
    ca8a:	1c02      	adds	r2, r0, #0
    ca8c:	701a      	strb	r2, [r3, #0]
    ca8e:	1d3b      	adds	r3, r7, #4
    ca90:	1c0a      	adds	r2, r1, #0
    ca92:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    ca94:	1dfb      	adds	r3, r7, #7
    ca96:	781b      	ldrb	r3, [r3, #0]
    ca98:	2b41      	cmp	r3, #65	; 0x41
    ca9a:	d003      	beq.n	caa4 <m2m_ip_cb+0x24>
    ca9c:	1dfb      	adds	r3, r7, #7
    ca9e:	781b      	ldrb	r3, [r3, #0]
    caa0:	2b54      	cmp	r3, #84	; 0x54
    caa2:	d120      	bne.n	cae6 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    caa4:	23cc      	movs	r3, #204	; 0xcc
    caa6:	18f9      	adds	r1, r7, r3
    caa8:	6838      	ldr	r0, [r7, #0]
    caaa:	2300      	movs	r3, #0
    caac:	2204      	movs	r2, #4
    caae:	4c98      	ldr	r4, [pc, #608]	; (cd10 <m2m_ip_cb+0x290>)
    cab0:	47a0      	blx	r4
    cab2:	1e03      	subs	r3, r0, #0
    cab4:	d000      	beq.n	cab8 <m2m_ip_cb+0x38>
    cab6:	e275      	b.n	cfa4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    cab8:	23cc      	movs	r3, #204	; 0xcc
    caba:	18fb      	adds	r3, r7, r3
    cabc:	2201      	movs	r2, #1
    cabe:	569a      	ldrsb	r2, [r3, r2]
    cac0:	23c8      	movs	r3, #200	; 0xc8
    cac2:	18fb      	adds	r3, r7, r3
    cac4:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    cac6:	4b93      	ldr	r3, [pc, #588]	; (cd14 <m2m_ip_cb+0x294>)
    cac8:	681b      	ldr	r3, [r3, #0]
    caca:	2b00      	cmp	r3, #0
    cacc:	d100      	bne.n	cad0 <m2m_ip_cb+0x50>
    cace:	e269      	b.n	cfa4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    cad0:	4b90      	ldr	r3, [pc, #576]	; (cd14 <m2m_ip_cb+0x294>)
    cad2:	681b      	ldr	r3, [r3, #0]
    cad4:	22cc      	movs	r2, #204	; 0xcc
    cad6:	18ba      	adds	r2, r7, r2
    cad8:	2000      	movs	r0, #0
    cada:	5610      	ldrsb	r0, [r2, r0]
    cadc:	22c8      	movs	r2, #200	; 0xc8
    cade:	18ba      	adds	r2, r7, r2
    cae0:	2101      	movs	r1, #1
    cae2:	4798      	blx	r3
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
	{
    cae4:	e25e      	b.n	cfa4 <m2m_ip_cb+0x524>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    cae6:	1dfb      	adds	r3, r7, #7
    cae8:	781b      	ldrb	r3, [r3, #0]
    caea:	2b42      	cmp	r3, #66	; 0x42
    caec:	d120      	bne.n	cb30 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    caee:	23c4      	movs	r3, #196	; 0xc4
    caf0:	18f9      	adds	r1, r7, r3
    caf2:	6838      	ldr	r0, [r7, #0]
    caf4:	2300      	movs	r3, #0
    caf6:	2204      	movs	r2, #4
    caf8:	4c85      	ldr	r4, [pc, #532]	; (cd10 <m2m_ip_cb+0x290>)
    cafa:	47a0      	blx	r4
    cafc:	1e03      	subs	r3, r0, #0
    cafe:	d000      	beq.n	cb02 <m2m_ip_cb+0x82>
    cb00:	e257      	b.n	cfb2 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    cb02:	23c4      	movs	r3, #196	; 0xc4
    cb04:	18fb      	adds	r3, r7, r3
    cb06:	2201      	movs	r2, #1
    cb08:	569a      	ldrsb	r2, [r3, r2]
    cb0a:	23c0      	movs	r3, #192	; 0xc0
    cb0c:	18fb      	adds	r3, r7, r3
    cb0e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    cb10:	4b80      	ldr	r3, [pc, #512]	; (cd14 <m2m_ip_cb+0x294>)
    cb12:	681b      	ldr	r3, [r3, #0]
    cb14:	2b00      	cmp	r3, #0
    cb16:	d100      	bne.n	cb1a <m2m_ip_cb+0x9a>
    cb18:	e24b      	b.n	cfb2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    cb1a:	4b7e      	ldr	r3, [pc, #504]	; (cd14 <m2m_ip_cb+0x294>)
    cb1c:	681b      	ldr	r3, [r3, #0]
    cb1e:	22c4      	movs	r2, #196	; 0xc4
    cb20:	18ba      	adds	r2, r7, r2
    cb22:	2000      	movs	r0, #0
    cb24:	5610      	ldrsb	r0, [r2, r0]
    cb26:	22c0      	movs	r2, #192	; 0xc0
    cb28:	18ba      	adds	r2, r7, r2
    cb2a:	2102      	movs	r1, #2
    cb2c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    cb2e:	e240      	b.n	cfb2 <m2m_ip_cb+0x532>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    cb30:	1dfb      	adds	r3, r7, #7
    cb32:	781b      	ldrb	r3, [r3, #0]
    cb34:	2b43      	cmp	r3, #67	; 0x43
    cb36:	d000      	beq.n	cb3a <m2m_ip_cb+0xba>
    cb38:	e086      	b.n	cc48 <m2m_ip_cb+0x1c8>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    cb3a:	23b4      	movs	r3, #180	; 0xb4
    cb3c:	18f9      	adds	r1, r7, r3
    cb3e:	6838      	ldr	r0, [r7, #0]
    cb40:	2300      	movs	r3, #0
    cb42:	220c      	movs	r2, #12
    cb44:	4c72      	ldr	r4, [pc, #456]	; (cd10 <m2m_ip_cb+0x290>)
    cb46:	47a0      	blx	r4
    cb48:	1e03      	subs	r3, r0, #0
    cb4a:	d000      	beq.n	cb4e <m2m_ip_cb+0xce>
    cb4c:	e231      	b.n	cfb2 <m2m_ip_cb+0x532>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    cb4e:	23b4      	movs	r3, #180	; 0xb4
    cb50:	18fb      	adds	r3, r7, r3
    cb52:	7a5b      	ldrb	r3, [r3, #9]
    cb54:	b25b      	sxtb	r3, r3
    cb56:	2b00      	cmp	r3, #0
    cb58:	db4f      	blt.n	cbfa <m2m_ip_cb+0x17a>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    cb5a:	23b4      	movs	r3, #180	; 0xb4
    cb5c:	18fb      	adds	r3, r7, r3
    cb5e:	7a5b      	ldrb	r3, [r3, #9]
    cb60:	b25b      	sxtb	r3, r3
    cb62:	0018      	movs	r0, r3
    cb64:	23b4      	movs	r3, #180	; 0xb4
    cb66:	18fb      	adds	r3, r7, r3
    cb68:	7a1b      	ldrb	r3, [r3, #8]
    cb6a:	b25b      	sxtb	r3, r3
    cb6c:	4a6a      	ldr	r2, [pc, #424]	; (cd18 <m2m_ip_cb+0x298>)
    cb6e:	011b      	lsls	r3, r3, #4
    cb70:	18d3      	adds	r3, r2, r3
    cb72:	330b      	adds	r3, #11
    cb74:	781b      	ldrb	r3, [r3, #0]
    cb76:	b2d9      	uxtb	r1, r3
    cb78:	4a67      	ldr	r2, [pc, #412]	; (cd18 <m2m_ip_cb+0x298>)
    cb7a:	0103      	lsls	r3, r0, #4
    cb7c:	18d3      	adds	r3, r2, r3
    cb7e:	330b      	adds	r3, #11
    cb80:	1c0a      	adds	r2, r1, #0
    cb82:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    cb84:	23b4      	movs	r3, #180	; 0xb4
    cb86:	18fb      	adds	r3, r7, r3
    cb88:	7a5b      	ldrb	r3, [r3, #9]
    cb8a:	b25b      	sxtb	r3, r3
    cb8c:	4a62      	ldr	r2, [pc, #392]	; (cd18 <m2m_ip_cb+0x298>)
    cb8e:	011b      	lsls	r3, r3, #4
    cb90:	18d3      	adds	r3, r2, r3
    cb92:	330a      	adds	r3, #10
    cb94:	2201      	movs	r2, #1
    cb96:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    cb98:	23b4      	movs	r3, #180	; 0xb4
    cb9a:	18fb      	adds	r3, r7, r3
    cb9c:	7a5b      	ldrb	r3, [r3, #9]
    cb9e:	b25b      	sxtb	r3, r3
    cba0:	0018      	movs	r0, r3
    cba2:	23b4      	movs	r3, #180	; 0xb4
    cba4:	18fb      	adds	r3, r7, r3
    cba6:	895b      	ldrh	r3, [r3, #10]
    cba8:	3b08      	subs	r3, #8
    cbaa:	b299      	uxth	r1, r3
    cbac:	4a5a      	ldr	r2, [pc, #360]	; (cd18 <m2m_ip_cb+0x298>)
    cbae:	0103      	lsls	r3, r0, #4
    cbb0:	18d3      	adds	r3, r2, r3
    cbb2:	3308      	adds	r3, #8
    cbb4:	1c0a      	adds	r2, r1, #0
    cbb6:	801a      	strh	r2, [r3, #0]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    cbb8:	4b58      	ldr	r3, [pc, #352]	; (cd1c <m2m_ip_cb+0x29c>)
    cbba:	881b      	ldrh	r3, [r3, #0]
    cbbc:	b29b      	uxth	r3, r3
    cbbe:	3301      	adds	r3, #1
    cbc0:	b29a      	uxth	r2, r3
    cbc2:	4b56      	ldr	r3, [pc, #344]	; (cd1c <m2m_ip_cb+0x29c>)
    cbc4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    cbc6:	4b55      	ldr	r3, [pc, #340]	; (cd1c <m2m_ip_cb+0x29c>)
    cbc8:	881b      	ldrh	r3, [r3, #0]
    cbca:	b29b      	uxth	r3, r3
    cbcc:	2b00      	cmp	r3, #0
    cbce:	d106      	bne.n	cbde <m2m_ip_cb+0x15e>
					++gu16SessionID;
    cbd0:	4b52      	ldr	r3, [pc, #328]	; (cd1c <m2m_ip_cb+0x29c>)
    cbd2:	881b      	ldrh	r3, [r3, #0]
    cbd4:	b29b      	uxth	r3, r3
    cbd6:	3301      	adds	r3, #1
    cbd8:	b29a      	uxth	r2, r3
    cbda:	4b50      	ldr	r3, [pc, #320]	; (cd1c <m2m_ip_cb+0x29c>)
    cbdc:	801a      	strh	r2, [r3, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    cbde:	23b4      	movs	r3, #180	; 0xb4
    cbe0:	18fb      	adds	r3, r7, r3
    cbe2:	7a5b      	ldrb	r3, [r3, #9]
    cbe4:	b25b      	sxtb	r3, r3
    cbe6:	0018      	movs	r0, r3
    cbe8:	4b4c      	ldr	r3, [pc, #304]	; (cd1c <m2m_ip_cb+0x29c>)
    cbea:	881b      	ldrh	r3, [r3, #0]
    cbec:	b299      	uxth	r1, r3
    cbee:	4a4a      	ldr	r2, [pc, #296]	; (cd18 <m2m_ip_cb+0x298>)
    cbf0:	0103      	lsls	r3, r0, #4
    cbf2:	18d3      	adds	r3, r2, r3
    cbf4:	3306      	adds	r3, #6
    cbf6:	1c0a      	adds	r2, r1, #0
    cbf8:	801a      	strh	r2, [r3, #0]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    cbfa:	23b4      	movs	r3, #180	; 0xb4
    cbfc:	18fb      	adds	r3, r7, r3
    cbfe:	2209      	movs	r2, #9
    cc00:	569a      	ldrsb	r2, [r3, r2]
    cc02:	23a0      	movs	r3, #160	; 0xa0
    cc04:	18fb      	adds	r3, r7, r3
    cc06:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    cc08:	23a0      	movs	r3, #160	; 0xa0
    cc0a:	18fb      	adds	r3, r7, r3
    cc0c:	2202      	movs	r2, #2
    cc0e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    cc10:	23b4      	movs	r3, #180	; 0xb4
    cc12:	18fb      	adds	r3, r7, r3
    cc14:	885a      	ldrh	r2, [r3, #2]
    cc16:	23a0      	movs	r3, #160	; 0xa0
    cc18:	18fb      	adds	r3, r7, r3
    cc1a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    cc1c:	23b4      	movs	r3, #180	; 0xb4
    cc1e:	18fb      	adds	r3, r7, r3
    cc20:	685a      	ldr	r2, [r3, #4]
    cc22:	23a0      	movs	r3, #160	; 0xa0
    cc24:	18fb      	adds	r3, r7, r3
    cc26:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    cc28:	4b3a      	ldr	r3, [pc, #232]	; (cd14 <m2m_ip_cb+0x294>)
    cc2a:	681b      	ldr	r3, [r3, #0]
    cc2c:	2b00      	cmp	r3, #0
    cc2e:	d100      	bne.n	cc32 <m2m_ip_cb+0x1b2>
    cc30:	e1bf      	b.n	cfb2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    cc32:	4b38      	ldr	r3, [pc, #224]	; (cd14 <m2m_ip_cb+0x294>)
    cc34:	681b      	ldr	r3, [r3, #0]
    cc36:	22b4      	movs	r2, #180	; 0xb4
    cc38:	18ba      	adds	r2, r7, r2
    cc3a:	2008      	movs	r0, #8
    cc3c:	5610      	ldrsb	r0, [r2, r0]
    cc3e:	22a0      	movs	r2, #160	; 0xa0
    cc40:	18ba      	adds	r2, r7, r2
    cc42:	2104      	movs	r1, #4
    cc44:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    cc46:	e1b4      	b.n	cfb2 <m2m_ip_cb+0x532>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    cc48:	1dfb      	adds	r3, r7, #7
    cc4a:	781b      	ldrb	r3, [r3, #0]
    cc4c:	2b44      	cmp	r3, #68	; 0x44
    cc4e:	d003      	beq.n	cc58 <m2m_ip_cb+0x1d8>
    cc50:	1dfb      	adds	r3, r7, #7
    cc52:	781b      	ldrb	r3, [r3, #0]
    cc54:	2b4b      	cmp	r3, #75	; 0x4b
    cc56:	d13d      	bne.n	ccd4 <m2m_ip_cb+0x254>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    cc58:	239c      	movs	r3, #156	; 0x9c
    cc5a:	18f9      	adds	r1, r7, r3
    cc5c:	6838      	ldr	r0, [r7, #0]
    cc5e:	2300      	movs	r3, #0
    cc60:	2204      	movs	r2, #4
    cc62:	4c2b      	ldr	r4, [pc, #172]	; (cd10 <m2m_ip_cb+0x290>)
    cc64:	47a0      	blx	r4
    cc66:	1e03      	subs	r3, r0, #0
    cc68:	d000      	beq.n	cc6c <m2m_ip_cb+0x1ec>
    cc6a:	e19d      	b.n	cfa8 <m2m_ip_cb+0x528>
		{
			strConnMsg.sock		= strConnectReply.sock;
    cc6c:	239c      	movs	r3, #156	; 0x9c
    cc6e:	18fb      	adds	r3, r7, r3
    cc70:	2200      	movs	r2, #0
    cc72:	569a      	ldrsb	r2, [r3, r2]
    cc74:	2398      	movs	r3, #152	; 0x98
    cc76:	18fb      	adds	r3, r7, r3
    cc78:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    cc7a:	239c      	movs	r3, #156	; 0x9c
    cc7c:	18fb      	adds	r3, r7, r3
    cc7e:	2201      	movs	r2, #1
    cc80:	569a      	ldrsb	r2, [r3, r2]
    cc82:	2398      	movs	r3, #152	; 0x98
    cc84:	18fb      	adds	r3, r7, r3
    cc86:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    cc88:	239c      	movs	r3, #156	; 0x9c
    cc8a:	18fb      	adds	r3, r7, r3
    cc8c:	785b      	ldrb	r3, [r3, #1]
    cc8e:	b25b      	sxtb	r3, r3
    cc90:	2b00      	cmp	r3, #0
    cc92:	d10f      	bne.n	ccb4 <m2m_ip_cb+0x234>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    cc94:	239c      	movs	r3, #156	; 0x9c
    cc96:	18fb      	adds	r3, r7, r3
    cc98:	781b      	ldrb	r3, [r3, #0]
    cc9a:	b25b      	sxtb	r3, r3
    cc9c:	0018      	movs	r0, r3
    cc9e:	239c      	movs	r3, #156	; 0x9c
    cca0:	18fb      	adds	r3, r7, r3
    cca2:	885b      	ldrh	r3, [r3, #2]
    cca4:	3b08      	subs	r3, #8
    cca6:	b299      	uxth	r1, r3
    cca8:	4a1b      	ldr	r2, [pc, #108]	; (cd18 <m2m_ip_cb+0x298>)
    ccaa:	0103      	lsls	r3, r0, #4
    ccac:	18d3      	adds	r3, r2, r3
    ccae:	3308      	adds	r3, #8
    ccb0:	1c0a      	adds	r2, r1, #0
    ccb2:	801a      	strh	r2, [r3, #0]
			}
			if(gpfAppSocketCb)
    ccb4:	4b17      	ldr	r3, [pc, #92]	; (cd14 <m2m_ip_cb+0x294>)
    ccb6:	681b      	ldr	r3, [r3, #0]
    ccb8:	2b00      	cmp	r3, #0
    ccba:	d100      	bne.n	ccbe <m2m_ip_cb+0x23e>
    ccbc:	e174      	b.n	cfa8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    ccbe:	4b15      	ldr	r3, [pc, #84]	; (cd14 <m2m_ip_cb+0x294>)
    ccc0:	681b      	ldr	r3, [r3, #0]
    ccc2:	229c      	movs	r2, #156	; 0x9c
    ccc4:	18ba      	adds	r2, r7, r2
    ccc6:	2000      	movs	r0, #0
    ccc8:	5610      	ldrsb	r0, [r2, r0]
    ccca:	2298      	movs	r2, #152	; 0x98
    cccc:	18ba      	adds	r2, r7, r2
    ccce:	2105      	movs	r1, #5
    ccd0:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    ccd2:	e169      	b.n	cfa8 <m2m_ip_cb+0x528>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    ccd4:	1dfb      	adds	r3, r7, #7
    ccd6:	781b      	ldrb	r3, [r3, #0]
    ccd8:	2b4a      	cmp	r3, #74	; 0x4a
    ccda:	d123      	bne.n	cd24 <m2m_ip_cb+0x2a4>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    ccdc:	230c      	movs	r3, #12
    ccde:	18f9      	adds	r1, r7, r3
    cce0:	6838      	ldr	r0, [r7, #0]
    cce2:	2300      	movs	r3, #0
    cce4:	2244      	movs	r2, #68	; 0x44
    cce6:	4c0a      	ldr	r4, [pc, #40]	; (cd10 <m2m_ip_cb+0x290>)
    cce8:	47a0      	blx	r4
    ccea:	1e03      	subs	r3, r0, #0
    ccec:	d000      	beq.n	ccf0 <m2m_ip_cb+0x270>
    ccee:	e160      	b.n	cfb2 <m2m_ip_cb+0x532>
		{
			if(gpfAppResolveCb)
    ccf0:	4b0b      	ldr	r3, [pc, #44]	; (cd20 <m2m_ip_cb+0x2a0>)
    ccf2:	681b      	ldr	r3, [r3, #0]
    ccf4:	2b00      	cmp	r3, #0
    ccf6:	d100      	bne.n	ccfa <m2m_ip_cb+0x27a>
    ccf8:	e15b      	b.n	cfb2 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    ccfa:	4b09      	ldr	r3, [pc, #36]	; (cd20 <m2m_ip_cb+0x2a0>)
    ccfc:	681a      	ldr	r2, [r3, #0]
    ccfe:	230c      	movs	r3, #12
    cd00:	18fb      	adds	r3, r7, r3
    cd02:	6c19      	ldr	r1, [r3, #64]	; 0x40
    cd04:	230c      	movs	r3, #12
    cd06:	18fb      	adds	r3, r7, r3
    cd08:	0018      	movs	r0, r3
    cd0a:	4790      	blx	r2
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    cd0c:	e151      	b.n	cfb2 <m2m_ip_cb+0x532>
    cd0e:	46c0      	nop			; (mov r8, r8)
    cd10:	000097bd 	.word	0x000097bd
    cd14:	200003fc 	.word	0x200003fc
    cd18:	2000034c 	.word	0x2000034c
    cd1c:	200000c2 	.word	0x200000c2
    cd20:	20000404 	.word	0x20000404
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    cd24:	1dfb      	adds	r3, r7, #7
    cd26:	781b      	ldrb	r3, [r3, #0]
    cd28:	2b46      	cmp	r3, #70	; 0x46
    cd2a:	d008      	beq.n	cd3e <m2m_ip_cb+0x2be>
    cd2c:	1dfb      	adds	r3, r7, #7
    cd2e:	781b      	ldrb	r3, [r3, #0]
    cd30:	2b48      	cmp	r3, #72	; 0x48
    cd32:	d004      	beq.n	cd3e <m2m_ip_cb+0x2be>
    cd34:	1dfb      	adds	r3, r7, #7
    cd36:	781b      	ldrb	r3, [r3, #0]
    cd38:	2b4d      	cmp	r3, #77	; 0x4d
    cd3a:	d000      	beq.n	cd3e <m2m_ip_cb+0x2be>
    cd3c:	e0b4      	b.n	cea8 <m2m_ip_cb+0x428>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    cd3e:	23df      	movs	r3, #223	; 0xdf
    cd40:	18fb      	adds	r3, r7, r3
    cd42:	2206      	movs	r2, #6
    cd44:	701a      	strb	r2, [r3, #0]
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
    cd46:	1dfb      	adds	r3, r7, #7
    cd48:	781b      	ldrb	r3, [r3, #0]
    cd4a:	2b48      	cmp	r3, #72	; 0x48
    cd4c:	d103      	bne.n	cd56 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    cd4e:	23df      	movs	r3, #223	; 0xdf
    cd50:	18fb      	adds	r3, r7, r3
    cd52:	2209      	movs	r2, #9
    cd54:	701a      	strb	r2, [r3, #0]

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
    cd56:	23d8      	movs	r3, #216	; 0xd8
    cd58:	18fb      	adds	r3, r7, r3
    cd5a:	2210      	movs	r2, #16
    cd5c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    cd5e:	23d8      	movs	r3, #216	; 0xd8
    cd60:	18fb      	adds	r3, r7, r3
    cd62:	881a      	ldrh	r2, [r3, #0]
    cd64:	2388      	movs	r3, #136	; 0x88
    cd66:	18f9      	adds	r1, r7, r3
    cd68:	6838      	ldr	r0, [r7, #0]
    cd6a:	2300      	movs	r3, #0
    cd6c:	4c93      	ldr	r4, [pc, #588]	; (cfbc <m2m_ip_cb+0x53c>)
    cd6e:	47a0      	blx	r4
    cd70:	1e03      	subs	r3, r0, #0
    cd72:	d000      	beq.n	cd76 <m2m_ip_cb+0x2f6>
    cd74:	e11a      	b.n	cfac <m2m_ip_cb+0x52c>
		{
			uint16 u16SessionID = 0;
    cd76:	23d6      	movs	r3, #214	; 0xd6
    cd78:	18fb      	adds	r3, r7, r3
    cd7a:	2200      	movs	r2, #0
    cd7c:	801a      	strh	r2, [r3, #0]

			sock			= strRecvReply.sock;
    cd7e:	23d5      	movs	r3, #213	; 0xd5
    cd80:	18fb      	adds	r3, r7, r3
    cd82:	2288      	movs	r2, #136	; 0x88
    cd84:	18ba      	adds	r2, r7, r2
    cd86:	7b12      	ldrb	r2, [r2, #12]
    cd88:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    cd8a:	23d6      	movs	r3, #214	; 0xd6
    cd8c:	18fb      	adds	r3, r7, r3
    cd8e:	2288      	movs	r2, #136	; 0x88
    cd90:	18ba      	adds	r2, r7, r2
    cd92:	89d2      	ldrh	r2, [r2, #14]
    cd94:	801a      	strh	r2, [r3, #0]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
    cd96:	23d5      	movs	r3, #213	; 0xd5
    cd98:	18fb      	adds	r3, r7, r3
    cd9a:	781b      	ldrb	r3, [r3, #0]
    cd9c:	b25b      	sxtb	r3, r3
    cd9e:	4a88      	ldr	r2, [pc, #544]	; (cfc0 <m2m_ip_cb+0x540>)
    cda0:	011b      	lsls	r3, r3, #4
    cda2:	18d3      	adds	r3, r2, r3
    cda4:	330c      	adds	r3, #12
    cda6:	2200      	movs	r2, #0
    cda8:	701a      	strb	r2, [r3, #0]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    cdaa:	23d2      	movs	r3, #210	; 0xd2
    cdac:	18fb      	adds	r3, r7, r3
    cdae:	2288      	movs	r2, #136	; 0x88
    cdb0:	18ba      	adds	r2, r7, r2
    cdb2:	8912      	ldrh	r2, [r2, #8]
    cdb4:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    cdb6:	23d0      	movs	r3, #208	; 0xd0
    cdb8:	18fb      	adds	r3, r7, r3
    cdba:	2288      	movs	r2, #136	; 0x88
    cdbc:	18ba      	adds	r2, r7, r2
    cdbe:	8952      	ldrh	r2, [r2, #10]
    cdc0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    cdc2:	2388      	movs	r3, #136	; 0x88
    cdc4:	18fb      	adds	r3, r7, r3
    cdc6:	885a      	ldrh	r2, [r3, #2]
    cdc8:	2370      	movs	r3, #112	; 0x70
    cdca:	18fb      	adds	r3, r7, r3
    cdcc:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    cdce:	2388      	movs	r3, #136	; 0x88
    cdd0:	18fb      	adds	r3, r7, r3
    cdd2:	685a      	ldr	r2, [r3, #4]
    cdd4:	2370      	movs	r3, #112	; 0x70
    cdd6:	18fb      	adds	r3, r7, r3
    cdd8:	60da      	str	r2, [r3, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    cdda:	23d5      	movs	r3, #213	; 0xd5
    cddc:	18fb      	adds	r3, r7, r3
    cdde:	781b      	ldrb	r3, [r3, #0]
    cde0:	b25b      	sxtb	r3, r3
    cde2:	4a77      	ldr	r2, [pc, #476]	; (cfc0 <m2m_ip_cb+0x540>)
    cde4:	011b      	lsls	r3, r3, #4
    cde6:	18d3      	adds	r3, r2, r3
    cde8:	3306      	adds	r3, #6
    cdea:	881b      	ldrh	r3, [r3, #0]
    cdec:	b29b      	uxth	r3, r3
    cdee:	22d6      	movs	r2, #214	; 0xd6
    cdf0:	18ba      	adds	r2, r7, r2
    cdf2:	8812      	ldrh	r2, [r2, #0]
    cdf4:	429a      	cmp	r2, r3
    cdf6:	d148      	bne.n	ce8a <m2m_ip_cb+0x40a>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    cdf8:	23d2      	movs	r3, #210	; 0xd2
    cdfa:	18fb      	adds	r3, r7, r3
    cdfc:	2200      	movs	r2, #0
    cdfe:	5e9b      	ldrsh	r3, [r3, r2]
    ce00:	2b00      	cmp	r3, #0
    ce02:	dd25      	ble.n	ce50 <m2m_ip_cb+0x3d0>
    ce04:	23d2      	movs	r3, #210	; 0xd2
    ce06:	18fb      	adds	r3, r7, r3
    ce08:	2200      	movs	r2, #0
    ce0a:	5e9a      	ldrsh	r2, [r3, r2]
    ce0c:	1d3b      	adds	r3, r7, #4
    ce0e:	881b      	ldrh	r3, [r3, #0]
    ce10:	429a      	cmp	r2, r3
    ce12:	da1d      	bge.n	ce50 <m2m_ip_cb+0x3d0>
				{
					/* Skip incoming bytes until reaching the Start of Application Data. 
					*/
					u32Address += u16DataOffset;
    ce14:	23d0      	movs	r3, #208	; 0xd0
    ce16:	18fb      	adds	r3, r7, r3
    ce18:	881b      	ldrh	r3, [r3, #0]
    ce1a:	683a      	ldr	r2, [r7, #0]
    ce1c:	18d3      	adds	r3, r2, r3
    ce1e:	603b      	str	r3, [r7, #0]

					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
    ce20:	23d8      	movs	r3, #216	; 0xd8
    ce22:	18fb      	adds	r3, r7, r3
    ce24:	22d2      	movs	r2, #210	; 0xd2
    ce26:	18ba      	adds	r2, r7, r2
    ce28:	8812      	ldrh	r2, [r2, #0]
    ce2a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    ce2c:	683c      	ldr	r4, [r7, #0]
    ce2e:	23df      	movs	r3, #223	; 0xdf
    ce30:	18fb      	adds	r3, r7, r3
    ce32:	781a      	ldrb	r2, [r3, #0]
    ce34:	2370      	movs	r3, #112	; 0x70
    ce36:	18f9      	adds	r1, r7, r3
    ce38:	23d5      	movs	r3, #213	; 0xd5
    ce3a:	18fb      	adds	r3, r7, r3
    ce3c:	2000      	movs	r0, #0
    ce3e:	5618      	ldrsb	r0, [r3, r0]
    ce40:	23d8      	movs	r3, #216	; 0xd8
    ce42:	18fb      	adds	r3, r7, r3
    ce44:	881b      	ldrh	r3, [r3, #0]
    ce46:	9300      	str	r3, [sp, #0]
    ce48:	0023      	movs	r3, r4
    ce4a:	4c5e      	ldr	r4, [pc, #376]	; (cfc4 <m2m_ip_cb+0x544>)
    ce4c:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    ce4e:	e0ad      	b.n	cfac <m2m_ip_cb+0x52c>
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    ce50:	2370      	movs	r3, #112	; 0x70
    ce52:	18fb      	adds	r3, r7, r3
    ce54:	22d2      	movs	r2, #210	; 0xd2
    ce56:	18ba      	adds	r2, r7, r2
    ce58:	8812      	ldrh	r2, [r2, #0]
    ce5a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    ce5c:	2370      	movs	r3, #112	; 0x70
    ce5e:	18fb      	adds	r3, r7, r3
    ce60:	2200      	movs	r2, #0
    ce62:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    ce64:	4b58      	ldr	r3, [pc, #352]	; (cfc8 <m2m_ip_cb+0x548>)
    ce66:	681b      	ldr	r3, [r3, #0]
    ce68:	2b00      	cmp	r3, #0
    ce6a:	d100      	bne.n	ce6e <m2m_ip_cb+0x3ee>
    ce6c:	e09e      	b.n	cfac <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    ce6e:	4b56      	ldr	r3, [pc, #344]	; (cfc8 <m2m_ip_cb+0x548>)
    ce70:	681b      	ldr	r3, [r3, #0]
    ce72:	2270      	movs	r2, #112	; 0x70
    ce74:	18bc      	adds	r4, r7, r2
    ce76:	22df      	movs	r2, #223	; 0xdf
    ce78:	18ba      	adds	r2, r7, r2
    ce7a:	7811      	ldrb	r1, [r2, #0]
    ce7c:	22d5      	movs	r2, #213	; 0xd5
    ce7e:	18ba      	adds	r2, r7, r2
    ce80:	2000      	movs	r0, #0
    ce82:	5610      	ldrsb	r0, [r2, r0]
    ce84:	0022      	movs	r2, r4
    ce86:	4798      	blx	r3
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    ce88:	e090      	b.n	cfac <m2m_ip_cb+0x52c>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    ce8a:	23d8      	movs	r3, #216	; 0xd8
    ce8c:	18fa      	adds	r2, r7, r3
    ce8e:	1d3b      	adds	r3, r7, #4
    ce90:	8812      	ldrh	r2, [r2, #0]
    ce92:	881b      	ldrh	r3, [r3, #0]
    ce94:	429a      	cmp	r2, r3
    ce96:	d300      	bcc.n	ce9a <m2m_ip_cb+0x41a>
    ce98:	e088      	b.n	cfac <m2m_ip_cb+0x52c>
				{
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    ce9a:	2301      	movs	r3, #1
    ce9c:	2200      	movs	r2, #0
    ce9e:	2100      	movs	r1, #0
    cea0:	2000      	movs	r0, #0
    cea2:	4c46      	ldr	r4, [pc, #280]	; (cfbc <m2m_ip_cb+0x53c>)
    cea4:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    cea6:	e081      	b.n	cfac <m2m_ip_cb+0x52c>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    cea8:	1dfb      	adds	r3, r7, #7
    ceaa:	781b      	ldrb	r3, [r3, #0]
    ceac:	2b45      	cmp	r3, #69	; 0x45
    ceae:	d007      	beq.n	cec0 <m2m_ip_cb+0x440>
    ceb0:	1dfb      	adds	r3, r7, #7
    ceb2:	781b      	ldrb	r3, [r3, #0]
    ceb4:	2b47      	cmp	r3, #71	; 0x47
    ceb6:	d003      	beq.n	cec0 <m2m_ip_cb+0x440>
    ceb8:	1dfb      	adds	r3, r7, #7
    ceba:	781b      	ldrb	r3, [r3, #0]
    cebc:	2b4c      	cmp	r3, #76	; 0x4c
    cebe:	d14c      	bne.n	cf5a <m2m_ip_cb+0x4da>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    cec0:	23de      	movs	r3, #222	; 0xde
    cec2:	18fb      	adds	r3, r7, r3
    cec4:	2207      	movs	r2, #7
    cec6:	701a      	strb	r2, [r3, #0]

		if(u8OpCode == SOCKET_CMD_SENDTO)
    cec8:	1dfb      	adds	r3, r7, #7
    ceca:	781b      	ldrb	r3, [r3, #0]
    cecc:	2b47      	cmp	r3, #71	; 0x47
    cece:	d103      	bne.n	ced8 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    ced0:	23de      	movs	r3, #222	; 0xde
    ced2:	18fb      	adds	r3, r7, r3
    ced4:	2208      	movs	r2, #8
    ced6:	701a      	strb	r2, [r3, #0]

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    ced8:	2364      	movs	r3, #100	; 0x64
    ceda:	18f9      	adds	r1, r7, r3
    cedc:	6838      	ldr	r0, [r7, #0]
    cede:	2300      	movs	r3, #0
    cee0:	2208      	movs	r2, #8
    cee2:	4c36      	ldr	r4, [pc, #216]	; (cfbc <m2m_ip_cb+0x53c>)
    cee4:	47a0      	blx	r4
    cee6:	1e03      	subs	r3, r0, #0
    cee8:	d162      	bne.n	cfb0 <m2m_ip_cb+0x530>
		{
			uint16 u16SessionID = 0;
    ceea:	23dc      	movs	r3, #220	; 0xdc
    ceec:	18fb      	adds	r3, r7, r3
    ceee:	2200      	movs	r2, #0
    cef0:	801a      	strh	r2, [r3, #0]
			
			sock = strReply.sock;
    cef2:	23db      	movs	r3, #219	; 0xdb
    cef4:	18fb      	adds	r3, r7, r3
    cef6:	2264      	movs	r2, #100	; 0x64
    cef8:	18ba      	adds	r2, r7, r2
    cefa:	7812      	ldrb	r2, [r2, #0]
    cefc:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    cefe:	23dc      	movs	r3, #220	; 0xdc
    cf00:	18fb      	adds	r3, r7, r3
    cf02:	2264      	movs	r2, #100	; 0x64
    cf04:	18ba      	adds	r2, r7, r2
    cf06:	8892      	ldrh	r2, [r2, #4]
    cf08:	801a      	strh	r2, [r3, #0]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    cf0a:	2364      	movs	r3, #100	; 0x64
    cf0c:	18fb      	adds	r3, r7, r3
    cf0e:	2202      	movs	r2, #2
    cf10:	5e9a      	ldrsh	r2, [r3, r2]
    cf12:	236e      	movs	r3, #110	; 0x6e
    cf14:	18fb      	adds	r3, r7, r3
    cf16:	801a      	strh	r2, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    cf18:	23db      	movs	r3, #219	; 0xdb
    cf1a:	18fb      	adds	r3, r7, r3
    cf1c:	781b      	ldrb	r3, [r3, #0]
    cf1e:	b25b      	sxtb	r3, r3
    cf20:	4a27      	ldr	r2, [pc, #156]	; (cfc0 <m2m_ip_cb+0x540>)
    cf22:	011b      	lsls	r3, r3, #4
    cf24:	18d3      	adds	r3, r2, r3
    cf26:	3306      	adds	r3, #6
    cf28:	881b      	ldrh	r3, [r3, #0]
    cf2a:	b29b      	uxth	r3, r3
    cf2c:	22dc      	movs	r2, #220	; 0xdc
    cf2e:	18ba      	adds	r2, r7, r2
    cf30:	8812      	ldrh	r2, [r2, #0]
    cf32:	429a      	cmp	r2, r3
    cf34:	d13c      	bne.n	cfb0 <m2m_ip_cb+0x530>
			{
				if(gpfAppSocketCb)
    cf36:	4b24      	ldr	r3, [pc, #144]	; (cfc8 <m2m_ip_cb+0x548>)
    cf38:	681b      	ldr	r3, [r3, #0]
    cf3a:	2b00      	cmp	r3, #0
    cf3c:	d038      	beq.n	cfb0 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    cf3e:	4b22      	ldr	r3, [pc, #136]	; (cfc8 <m2m_ip_cb+0x548>)
    cf40:	681b      	ldr	r3, [r3, #0]
    cf42:	226e      	movs	r2, #110	; 0x6e
    cf44:	18bc      	adds	r4, r7, r2
    cf46:	22de      	movs	r2, #222	; 0xde
    cf48:	18ba      	adds	r2, r7, r2
    cf4a:	7811      	ldrb	r1, [r2, #0]
    cf4c:	22db      	movs	r2, #219	; 0xdb
    cf4e:	18ba      	adds	r2, r7, r2
    cf50:	2000      	movs	r0, #0
    cf52:	5610      	ldrsb	r0, [r2, r0]
    cf54:	0022      	movs	r2, r4
    cf56:	4798      	blx	r3
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    cf58:	e02a      	b.n	cfb0 <m2m_ip_cb+0x530>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    cf5a:	1dfb      	adds	r3, r7, #7
    cf5c:	781b      	ldrb	r3, [r3, #0]
    cf5e:	2b52      	cmp	r3, #82	; 0x52
    cf60:	d127      	bne.n	cfb2 <m2m_ip_cb+0x532>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    cf62:	2350      	movs	r3, #80	; 0x50
    cf64:	18f9      	adds	r1, r7, r3
    cf66:	6838      	ldr	r0, [r7, #0]
    cf68:	2301      	movs	r3, #1
    cf6a:	2214      	movs	r2, #20
    cf6c:	4c13      	ldr	r4, [pc, #76]	; (cfbc <m2m_ip_cb+0x53c>)
    cf6e:	47a0      	blx	r4
    cf70:	1e03      	subs	r3, r0, #0
    cf72:	d11e      	bne.n	cfb2 <m2m_ip_cb+0x532>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    cf74:	2350      	movs	r3, #80	; 0x50
    cf76:	18fb      	adds	r3, r7, r3
    cf78:	685b      	ldr	r3, [r3, #4]
    cf7a:	001a      	movs	r2, r3
    cf7c:	4b13      	ldr	r3, [pc, #76]	; (cfcc <m2m_ip_cb+0x54c>)
    cf7e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    cf80:	4b12      	ldr	r3, [pc, #72]	; (cfcc <m2m_ip_cb+0x54c>)
    cf82:	681b      	ldr	r3, [r3, #0]
    cf84:	2b00      	cmp	r3, #0
    cf86:	d014      	beq.n	cfb2 <m2m_ip_cb+0x532>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    cf88:	4b10      	ldr	r3, [pc, #64]	; (cfcc <m2m_ip_cb+0x54c>)
    cf8a:	681c      	ldr	r4, [r3, #0]
    cf8c:	2350      	movs	r3, #80	; 0x50
    cf8e:	18fb      	adds	r3, r7, r3
    cf90:	6818      	ldr	r0, [r3, #0]
    cf92:	2350      	movs	r3, #80	; 0x50
    cf94:	18fb      	adds	r3, r7, r3
    cf96:	6899      	ldr	r1, [r3, #8]
    cf98:	2350      	movs	r3, #80	; 0x50
    cf9a:	18fb      	adds	r3, r7, r3
    cf9c:	7c1b      	ldrb	r3, [r3, #16]
    cf9e:	001a      	movs	r2, r3
    cfa0:	47a0      	blx	r4
			}
		}
	}
}
    cfa2:	e006      	b.n	cfb2 <m2m_ip_cb+0x532>
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
	{
    cfa4:	46c0      	nop			; (mov r8, r8)
    cfa6:	e004      	b.n	cfb2 <m2m_ip_cb+0x532>
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    cfa8:	46c0      	nop			; (mov r8, r8)
    cfaa:	e002      	b.n	cfb2 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    cfac:	46c0      	nop			; (mov r8, r8)
    cfae:	e000      	b.n	cfb2 <m2m_ip_cb+0x532>
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    cfb0:	46c0      	nop			; (mov r8, r8)
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    cfb2:	46c0      	nop			; (mov r8, r8)
    cfb4:	46bd      	mov	sp, r7
    cfb6:	b039      	add	sp, #228	; 0xe4
    cfb8:	bd90      	pop	{r4, r7, pc}
    cfba:	46c0      	nop			; (mov r8, r8)
    cfbc:	000097bd 	.word	0x000097bd
    cfc0:	2000034c 	.word	0x2000034c
    cfc4:	0000c885 	.word	0x0000c885
    cfc8:	200003fc 	.word	0x200003fc
    cfcc:	20000400 	.word	0x20000400

0000cfd0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    cfd0:	b580      	push	{r7, lr}
    cfd2:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    cfd4:	4b0c      	ldr	r3, [pc, #48]	; (d008 <socketInit+0x38>)
    cfd6:	781b      	ldrb	r3, [r3, #0]
    cfd8:	b2db      	uxtb	r3, r3
    cfda:	2b00      	cmp	r3, #0
    cfdc:	d110      	bne.n	d000 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    cfde:	4b0b      	ldr	r3, [pc, #44]	; (d00c <socketInit+0x3c>)
    cfe0:	22b0      	movs	r2, #176	; 0xb0
    cfe2:	2100      	movs	r1, #0
    cfe4:	0018      	movs	r0, r3
    cfe6:	4b0a      	ldr	r3, [pc, #40]	; (d010 <socketInit+0x40>)
    cfe8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    cfea:	4b0a      	ldr	r3, [pc, #40]	; (d014 <socketInit+0x44>)
    cfec:	0019      	movs	r1, r3
    cfee:	2002      	movs	r0, #2
    cff0:	4b09      	ldr	r3, [pc, #36]	; (d018 <socketInit+0x48>)
    cff2:	4798      	blx	r3
		gbSocketInit	= 1;
    cff4:	4b04      	ldr	r3, [pc, #16]	; (d008 <socketInit+0x38>)
    cff6:	2201      	movs	r2, #1
    cff8:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    cffa:	4b08      	ldr	r3, [pc, #32]	; (d01c <socketInit+0x4c>)
    cffc:	2200      	movs	r2, #0
    cffe:	801a      	strh	r2, [r3, #0]
	}
}
    d000:	46c0      	nop			; (mov r8, r8)
    d002:	46bd      	mov	sp, r7
    d004:	bd80      	pop	{r7, pc}
    d006:	46c0      	nop			; (mov r8, r8)
    d008:	200000c4 	.word	0x200000c4
    d00c:	2000034c 	.word	0x2000034c
    d010:	00008c25 	.word	0x00008c25
    d014:	0000ca81 	.word	0x0000ca81
    d018:	0000993d 	.word	0x0000993d
    d01c:	200000c2 	.word	0x200000c2

0000d020 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    d020:	b580      	push	{r7, lr}
    d022:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    d024:	4b0a      	ldr	r3, [pc, #40]	; (d050 <socketDeinit+0x30>)
    d026:	22b0      	movs	r2, #176	; 0xb0
    d028:	2100      	movs	r1, #0
    d02a:	0018      	movs	r0, r3
    d02c:	4b09      	ldr	r3, [pc, #36]	; (d054 <socketDeinit+0x34>)
    d02e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    d030:	2100      	movs	r1, #0
    d032:	2002      	movs	r0, #2
    d034:	4b08      	ldr	r3, [pc, #32]	; (d058 <socketDeinit+0x38>)
    d036:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    d038:	4b08      	ldr	r3, [pc, #32]	; (d05c <socketDeinit+0x3c>)
    d03a:	2200      	movs	r2, #0
    d03c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
    d03e:	4b08      	ldr	r3, [pc, #32]	; (d060 <socketDeinit+0x40>)
    d040:	2200      	movs	r2, #0
    d042:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
    d044:	4b07      	ldr	r3, [pc, #28]	; (d064 <socketDeinit+0x44>)
    d046:	2200      	movs	r2, #0
    d048:	701a      	strb	r2, [r3, #0]
}
    d04a:	46c0      	nop			; (mov r8, r8)
    d04c:	46bd      	mov	sp, r7
    d04e:	bd80      	pop	{r7, pc}
    d050:	2000034c 	.word	0x2000034c
    d054:	00008c25 	.word	0x00008c25
    d058:	0000993d 	.word	0x0000993d
    d05c:	200003fc 	.word	0x200003fc
    d060:	20000404 	.word	0x20000404
    d064:	200000c4 	.word	0x200000c4

0000d068 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    d068:	b580      	push	{r7, lr}
    d06a:	b082      	sub	sp, #8
    d06c:	af00      	add	r7, sp, #0
    d06e:	6078      	str	r0, [r7, #4]
    d070:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    d072:	4b05      	ldr	r3, [pc, #20]	; (d088 <registerSocketCallback+0x20>)
    d074:	687a      	ldr	r2, [r7, #4]
    d076:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    d078:	4b04      	ldr	r3, [pc, #16]	; (d08c <registerSocketCallback+0x24>)
    d07a:	683a      	ldr	r2, [r7, #0]
    d07c:	601a      	str	r2, [r3, #0]
}
    d07e:	46c0      	nop			; (mov r8, r8)
    d080:	46bd      	mov	sp, r7
    d082:	b002      	add	sp, #8
    d084:	bd80      	pop	{r7, pc}
    d086:	46c0      	nop			; (mov r8, r8)
    d088:	200003fc 	.word	0x200003fc
    d08c:	20000404 	.word	0x20000404

0000d090 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    d090:	b590      	push	{r4, r7, lr}
    d092:	b08d      	sub	sp, #52	; 0x34
    d094:	af04      	add	r7, sp, #16
    d096:	0004      	movs	r4, r0
    d098:	0008      	movs	r0, r1
    d09a:	0011      	movs	r1, r2
    d09c:	1dbb      	adds	r3, r7, #6
    d09e:	1c22      	adds	r2, r4, #0
    d0a0:	801a      	strh	r2, [r3, #0]
    d0a2:	1d7b      	adds	r3, r7, #5
    d0a4:	1c02      	adds	r2, r0, #0
    d0a6:	701a      	strb	r2, [r3, #0]
    d0a8:	1d3b      	adds	r3, r7, #4
    d0aa:	1c0a      	adds	r2, r1, #0
    d0ac:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    d0ae:	231f      	movs	r3, #31
    d0b0:	18fb      	adds	r3, r7, r3
    d0b2:	22ff      	movs	r2, #255	; 0xff
    d0b4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    d0b6:	1dbb      	adds	r3, r7, #6
    d0b8:	881b      	ldrh	r3, [r3, #0]
    d0ba:	2b02      	cmp	r3, #2
    d0bc:	d000      	beq.n	d0c0 <socket+0x30>
    d0be:	e0cd      	b.n	d25c <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    d0c0:	1d7b      	adds	r3, r7, #5
    d0c2:	781b      	ldrb	r3, [r3, #0]
    d0c4:	2b01      	cmp	r3, #1
    d0c6:	d135      	bne.n	d134 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    d0c8:	231e      	movs	r3, #30
    d0ca:	18fb      	adds	r3, r7, r3
    d0cc:	2200      	movs	r2, #0
    d0ce:	701a      	strb	r2, [r3, #0]
    d0d0:	e02a      	b.n	d128 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    d0d2:	2317      	movs	r3, #23
    d0d4:	18fb      	adds	r3, r7, r3
    d0d6:	4a65      	ldr	r2, [pc, #404]	; (d26c <socket+0x1dc>)
    d0d8:	7812      	ldrb	r2, [r2, #0]
    d0da:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    d0dc:	4b63      	ldr	r3, [pc, #396]	; (d26c <socket+0x1dc>)
    d0de:	781b      	ldrb	r3, [r3, #0]
    d0e0:	b2db      	uxtb	r3, r3
    d0e2:	011a      	lsls	r2, r3, #4
    d0e4:	4b62      	ldr	r3, [pc, #392]	; (d270 <socket+0x1e0>)
    d0e6:	18d3      	adds	r3, r2, r3
    d0e8:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    d0ea:	4b60      	ldr	r3, [pc, #384]	; (d26c <socket+0x1dc>)
    d0ec:	781b      	ldrb	r3, [r3, #0]
    d0ee:	b2db      	uxtb	r3, r3
    d0f0:	1c5a      	adds	r2, r3, #1
    d0f2:	4b60      	ldr	r3, [pc, #384]	; (d274 <socket+0x1e4>)
    d0f4:	2107      	movs	r1, #7
    d0f6:	0010      	movs	r0, r2
    d0f8:	4798      	blx	r3
    d0fa:	000b      	movs	r3, r1
    d0fc:	b2da      	uxtb	r2, r3
    d0fe:	4b5b      	ldr	r3, [pc, #364]	; (d26c <socket+0x1dc>)
    d100:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    d102:	69bb      	ldr	r3, [r7, #24]
    d104:	7a9b      	ldrb	r3, [r3, #10]
    d106:	b2db      	uxtb	r3, r3
    d108:	2b00      	cmp	r3, #0
    d10a:	d106      	bne.n	d11a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    d10c:	231f      	movs	r3, #31
    d10e:	18fb      	adds	r3, r7, r3
    d110:	2217      	movs	r2, #23
    d112:	18ba      	adds	r2, r7, r2
    d114:	7812      	ldrb	r2, [r2, #0]
    d116:	701a      	strb	r2, [r3, #0]
					break;
    d118:	e04c      	b.n	d1b4 <socket+0x124>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    d11a:	231e      	movs	r3, #30
    d11c:	18fb      	adds	r3, r7, r3
    d11e:	781a      	ldrb	r2, [r3, #0]
    d120:	231e      	movs	r3, #30
    d122:	18fb      	adds	r3, r7, r3
    d124:	3201      	adds	r2, #1
    d126:	701a      	strb	r2, [r3, #0]
    d128:	231e      	movs	r3, #30
    d12a:	18fb      	adds	r3, r7, r3
    d12c:	781b      	ldrb	r3, [r3, #0]
    d12e:	2b06      	cmp	r3, #6
    d130:	d9cf      	bls.n	d0d2 <socket+0x42>
    d132:	e03f      	b.n	d1b4 <socket+0x124>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    d134:	1d7b      	adds	r3, r7, #5
    d136:	781b      	ldrb	r3, [r3, #0]
    d138:	2b02      	cmp	r3, #2
    d13a:	d13b      	bne.n	d1b4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    d13c:	4b4e      	ldr	r3, [pc, #312]	; (d278 <socket+0x1e8>)
    d13e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    d140:	231e      	movs	r3, #30
    d142:	18fb      	adds	r3, r7, r3
    d144:	2200      	movs	r2, #0
    d146:	701a      	strb	r2, [r3, #0]
    d148:	e02f      	b.n	d1aa <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    d14a:	2317      	movs	r3, #23
    d14c:	18fb      	adds	r3, r7, r3
    d14e:	4a4b      	ldr	r2, [pc, #300]	; (d27c <socket+0x1ec>)
    d150:	7812      	ldrb	r2, [r2, #0]
    d152:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    d154:	4b49      	ldr	r3, [pc, #292]	; (d27c <socket+0x1ec>)
    d156:	781b      	ldrb	r3, [r3, #0]
    d158:	b2db      	uxtb	r3, r3
    d15a:	011b      	lsls	r3, r3, #4
    d15c:	693a      	ldr	r2, [r7, #16]
    d15e:	18d3      	adds	r3, r2, r3
    d160:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    d162:	4b46      	ldr	r3, [pc, #280]	; (d27c <socket+0x1ec>)
    d164:	781b      	ldrb	r3, [r3, #0]
    d166:	b2db      	uxtb	r3, r3
    d168:	3301      	adds	r3, #1
    d16a:	4a45      	ldr	r2, [pc, #276]	; (d280 <socket+0x1f0>)
    d16c:	4013      	ands	r3, r2
    d16e:	d504      	bpl.n	d17a <socket+0xea>
    d170:	3b01      	subs	r3, #1
    d172:	2204      	movs	r2, #4
    d174:	4252      	negs	r2, r2
    d176:	4313      	orrs	r3, r2
    d178:	3301      	adds	r3, #1
    d17a:	b2da      	uxtb	r2, r3
    d17c:	4b3f      	ldr	r3, [pc, #252]	; (d27c <socket+0x1ec>)
    d17e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    d180:	69bb      	ldr	r3, [r7, #24]
    d182:	7a9b      	ldrb	r3, [r3, #10]
    d184:	b2db      	uxtb	r3, r3
    d186:	2b00      	cmp	r3, #0
    d188:	d108      	bne.n	d19c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    d18a:	2317      	movs	r3, #23
    d18c:	18fb      	adds	r3, r7, r3
    d18e:	781b      	ldrb	r3, [r3, #0]
    d190:	3307      	adds	r3, #7
    d192:	b2da      	uxtb	r2, r3
    d194:	231f      	movs	r3, #31
    d196:	18fb      	adds	r3, r7, r3
    d198:	701a      	strb	r2, [r3, #0]
					break;
    d19a:	e00b      	b.n	d1b4 <socket+0x124>
			}
		}
		else if(u8Type == SOCK_DGRAM)
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    d19c:	231e      	movs	r3, #30
    d19e:	18fb      	adds	r3, r7, r3
    d1a0:	781a      	ldrb	r2, [r3, #0]
    d1a2:	231e      	movs	r3, #30
    d1a4:	18fb      	adds	r3, r7, r3
    d1a6:	3201      	adds	r2, #1
    d1a8:	701a      	strb	r2, [r3, #0]
    d1aa:	231e      	movs	r3, #30
    d1ac:	18fb      	adds	r3, r7, r3
    d1ae:	781b      	ldrb	r3, [r3, #0]
    d1b0:	2b03      	cmp	r3, #3
    d1b2:	d9ca      	bls.n	d14a <socket+0xba>
					break;
				}
			}
		}

		if(sock >= 0)
    d1b4:	231f      	movs	r3, #31
    d1b6:	18fb      	adds	r3, r7, r3
    d1b8:	781b      	ldrb	r3, [r3, #0]
    d1ba:	2b7f      	cmp	r3, #127	; 0x7f
    d1bc:	d84e      	bhi.n	d25c <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    d1be:	69bb      	ldr	r3, [r7, #24]
    d1c0:	2210      	movs	r2, #16
    d1c2:	2100      	movs	r1, #0
    d1c4:	0018      	movs	r0, r3
    d1c6:	4b2f      	ldr	r3, [pc, #188]	; (d284 <socket+0x1f4>)
    d1c8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    d1ca:	69bb      	ldr	r3, [r7, #24]
    d1cc:	2201      	movs	r2, #1
    d1ce:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    d1d0:	4b2d      	ldr	r3, [pc, #180]	; (d288 <socket+0x1f8>)
    d1d2:	881b      	ldrh	r3, [r3, #0]
    d1d4:	b29b      	uxth	r3, r3
    d1d6:	3301      	adds	r3, #1
    d1d8:	b29a      	uxth	r2, r3
    d1da:	4b2b      	ldr	r3, [pc, #172]	; (d288 <socket+0x1f8>)
    d1dc:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    d1de:	4b2a      	ldr	r3, [pc, #168]	; (d288 <socket+0x1f8>)
    d1e0:	881b      	ldrh	r3, [r3, #0]
    d1e2:	b29b      	uxth	r3, r3
    d1e4:	2b00      	cmp	r3, #0
    d1e6:	d106      	bne.n	d1f6 <socket+0x166>
				++gu16SessionID;
    d1e8:	4b27      	ldr	r3, [pc, #156]	; (d288 <socket+0x1f8>)
    d1ea:	881b      	ldrh	r3, [r3, #0]
    d1ec:	b29b      	uxth	r3, r3
    d1ee:	3301      	adds	r3, #1
    d1f0:	b29a      	uxth	r2, r3
    d1f2:	4b25      	ldr	r3, [pc, #148]	; (d288 <socket+0x1f8>)
    d1f4:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    d1f6:	4b24      	ldr	r3, [pc, #144]	; (d288 <socket+0x1f8>)
    d1f8:	881b      	ldrh	r3, [r3, #0]
    d1fa:	b29a      	uxth	r2, r3
    d1fc:	69bb      	ldr	r3, [r7, #24]
    d1fe:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    d200:	4b22      	ldr	r3, [pc, #136]	; (d28c <socket+0x1fc>)
    d202:	0018      	movs	r0, r3
    d204:	4b22      	ldr	r3, [pc, #136]	; (d290 <socket+0x200>)
    d206:	4798      	blx	r3
    d208:	231f      	movs	r3, #31
    d20a:	18fb      	adds	r3, r7, r3
    d20c:	2100      	movs	r1, #0
    d20e:	5659      	ldrsb	r1, [r3, r1]
    d210:	4b1d      	ldr	r3, [pc, #116]	; (d288 <socket+0x1f8>)
    d212:	881b      	ldrh	r3, [r3, #0]
    d214:	b29b      	uxth	r3, r3
    d216:	001a      	movs	r2, r3
    d218:	4b1e      	ldr	r3, [pc, #120]	; (d294 <socket+0x204>)
    d21a:	0018      	movs	r0, r3
    d21c:	4b1c      	ldr	r3, [pc, #112]	; (d290 <socket+0x200>)
    d21e:	4798      	blx	r3
    d220:	200d      	movs	r0, #13
    d222:	4b1d      	ldr	r3, [pc, #116]	; (d298 <socket+0x208>)
    d224:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    d226:	1d3b      	adds	r3, r7, #4
    d228:	781b      	ldrb	r3, [r3, #0]
    d22a:	2201      	movs	r2, #1
    d22c:	4013      	ands	r3, r2
    d22e:	d015      	beq.n	d25c <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    d230:	230c      	movs	r3, #12
    d232:	18fb      	adds	r3, r7, r3
    d234:	221f      	movs	r2, #31
    d236:	18ba      	adds	r2, r7, r2
    d238:	7812      	ldrb	r2, [r2, #0]
    d23a:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    d23c:	69bb      	ldr	r3, [r7, #24]
    d23e:	2221      	movs	r2, #33	; 0x21
    d240:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    d242:	230c      	movs	r3, #12
    d244:	18fa      	adds	r2, r7, r3
    d246:	2300      	movs	r3, #0
    d248:	9302      	str	r3, [sp, #8]
    d24a:	2300      	movs	r3, #0
    d24c:	9301      	str	r3, [sp, #4]
    d24e:	2300      	movs	r3, #0
    d250:	9300      	str	r3, [sp, #0]
    d252:	2304      	movs	r3, #4
    d254:	2150      	movs	r1, #80	; 0x50
    d256:	2002      	movs	r0, #2
    d258:	4c10      	ldr	r4, [pc, #64]	; (d29c <socket+0x20c>)
    d25a:	47a0      	blx	r4
			}
		}
	}
	return sock;
    d25c:	231f      	movs	r3, #31
    d25e:	18fb      	adds	r3, r7, r3
    d260:	781b      	ldrb	r3, [r3, #0]
    d262:	b25b      	sxtb	r3, r3
}
    d264:	0018      	movs	r0, r3
    d266:	46bd      	mov	sp, r7
    d268:	b009      	add	sp, #36	; 0x24
    d26a:	bd90      	pop	{r4, r7, pc}
    d26c:	200000c5 	.word	0x200000c5
    d270:	2000034c 	.word	0x2000034c
    d274:	000183b1 	.word	0x000183b1
    d278:	200003bc 	.word	0x200003bc
    d27c:	200000c6 	.word	0x200000c6
    d280:	80000003 	.word	0x80000003
    d284:	00008c25 	.word	0x00008c25
    d288:	200000c2 	.word	0x200000c2
    d28c:	0001ab80 	.word	0x0001ab80
    d290:	00018619 	.word	0x00018619
    d294:	0001aba0 	.word	0x0001aba0
    d298:	0001864d 	.word	0x0001864d
    d29c:	00008ec9 	.word	0x00008ec9

0000d2a0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    d2a0:	b5b0      	push	{r4, r5, r7, lr}
    d2a2:	b08a      	sub	sp, #40	; 0x28
    d2a4:	af04      	add	r7, sp, #16
    d2a6:	6039      	str	r1, [r7, #0]
    d2a8:	0011      	movs	r1, r2
    d2aa:	1dfb      	adds	r3, r7, #7
    d2ac:	1c02      	adds	r2, r0, #0
    d2ae:	701a      	strb	r2, [r3, #0]
    d2b0:	1dbb      	adds	r3, r7, #6
    d2b2:	1c0a      	adds	r2, r1, #0
    d2b4:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    d2b6:	2317      	movs	r3, #23
    d2b8:	18fb      	adds	r3, r7, r3
    d2ba:	22fa      	movs	r2, #250	; 0xfa
    d2bc:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    d2be:	1dfb      	adds	r3, r7, #7
    d2c0:	781b      	ldrb	r3, [r3, #0]
    d2c2:	2b7f      	cmp	r3, #127	; 0x7f
    d2c4:	d867      	bhi.n	d396 <connect+0xf6>
    d2c6:	683b      	ldr	r3, [r7, #0]
    d2c8:	2b00      	cmp	r3, #0
    d2ca:	d064      	beq.n	d396 <connect+0xf6>
    d2cc:	1dfb      	adds	r3, r7, #7
    d2ce:	781b      	ldrb	r3, [r3, #0]
    d2d0:	b25b      	sxtb	r3, r3
    d2d2:	4a35      	ldr	r2, [pc, #212]	; (d3a8 <connect+0x108>)
    d2d4:	011b      	lsls	r3, r3, #4
    d2d6:	18d3      	adds	r3, r2, r3
    d2d8:	330a      	adds	r3, #10
    d2da:	781b      	ldrb	r3, [r3, #0]
    d2dc:	b2db      	uxtb	r3, r3
    d2de:	2b01      	cmp	r3, #1
    d2e0:	d159      	bne.n	d396 <connect+0xf6>
    d2e2:	1dbb      	adds	r3, r7, #6
    d2e4:	781b      	ldrb	r3, [r3, #0]
    d2e6:	2b00      	cmp	r3, #0
    d2e8:	d055      	beq.n	d396 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    d2ea:	2316      	movs	r3, #22
    d2ec:	18fb      	adds	r3, r7, r3
    d2ee:	2244      	movs	r2, #68	; 0x44
    d2f0:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    d2f2:	1dfb      	adds	r3, r7, #7
    d2f4:	781b      	ldrb	r3, [r3, #0]
    d2f6:	b25b      	sxtb	r3, r3
    d2f8:	4a2b      	ldr	r2, [pc, #172]	; (d3a8 <connect+0x108>)
    d2fa:	011b      	lsls	r3, r3, #4
    d2fc:	18d3      	adds	r3, r2, r3
    d2fe:	330b      	adds	r3, #11
    d300:	781b      	ldrb	r3, [r3, #0]
    d302:	b2db      	uxtb	r3, r3
    d304:	001a      	movs	r2, r3
    d306:	2301      	movs	r3, #1
    d308:	4013      	ands	r3, r2
    d30a:	d00f      	beq.n	d32c <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    d30c:	2316      	movs	r3, #22
    d30e:	18fb      	adds	r3, r7, r3
    d310:	224b      	movs	r2, #75	; 0x4b
    d312:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    d314:	1dfb      	adds	r3, r7, #7
    d316:	781b      	ldrb	r3, [r3, #0]
    d318:	b25b      	sxtb	r3, r3
    d31a:	4a23      	ldr	r2, [pc, #140]	; (d3a8 <connect+0x108>)
    d31c:	011b      	lsls	r3, r3, #4
    d31e:	18d3      	adds	r3, r2, r3
    d320:	330b      	adds	r3, #11
    d322:	781b      	ldrb	r3, [r3, #0]
    d324:	b2da      	uxtb	r2, r3
    d326:	2308      	movs	r3, #8
    d328:	18fb      	adds	r3, r7, r3
    d32a:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    d32c:	2308      	movs	r3, #8
    d32e:	18fb      	adds	r3, r7, r3
    d330:	1dfa      	adds	r2, r7, #7
    d332:	7812      	ldrb	r2, [r2, #0]
    d334:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    d336:	6839      	ldr	r1, [r7, #0]
    d338:	2308      	movs	r3, #8
    d33a:	18fb      	adds	r3, r7, r3
    d33c:	2208      	movs	r2, #8
    d33e:	0018      	movs	r0, r3
    d340:	4b1a      	ldr	r3, [pc, #104]	; (d3ac <connect+0x10c>)
    d342:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    d344:	1dfb      	adds	r3, r7, #7
    d346:	781b      	ldrb	r3, [r3, #0]
    d348:	b25b      	sxtb	r3, r3
    d34a:	4a17      	ldr	r2, [pc, #92]	; (d3a8 <connect+0x108>)
    d34c:	011b      	lsls	r3, r3, #4
    d34e:	18d3      	adds	r3, r2, r3
    d350:	3306      	adds	r3, #6
    d352:	881b      	ldrh	r3, [r3, #0]
    d354:	b29a      	uxth	r2, r3
    d356:	2308      	movs	r3, #8
    d358:	18fb      	adds	r3, r7, r3
    d35a:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    d35c:	2317      	movs	r3, #23
    d35e:	18fc      	adds	r4, r7, r3
    d360:	2308      	movs	r3, #8
    d362:	18fa      	adds	r2, r7, r3
    d364:	2316      	movs	r3, #22
    d366:	18fb      	adds	r3, r7, r3
    d368:	7819      	ldrb	r1, [r3, #0]
    d36a:	2300      	movs	r3, #0
    d36c:	9302      	str	r3, [sp, #8]
    d36e:	2300      	movs	r3, #0
    d370:	9301      	str	r3, [sp, #4]
    d372:	2300      	movs	r3, #0
    d374:	9300      	str	r3, [sp, #0]
    d376:	230c      	movs	r3, #12
    d378:	2002      	movs	r0, #2
    d37a:	4d0d      	ldr	r5, [pc, #52]	; (d3b0 <connect+0x110>)
    d37c:	47a8      	blx	r5
    d37e:	0003      	movs	r3, r0
    d380:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    d382:	2317      	movs	r3, #23
    d384:	18fb      	adds	r3, r7, r3
    d386:	781b      	ldrb	r3, [r3, #0]
    d388:	b25b      	sxtb	r3, r3
    d38a:	2b00      	cmp	r3, #0
    d38c:	d003      	beq.n	d396 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    d38e:	2317      	movs	r3, #23
    d390:	18fb      	adds	r3, r7, r3
    d392:	22f7      	movs	r2, #247	; 0xf7
    d394:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    d396:	2317      	movs	r3, #23
    d398:	18fb      	adds	r3, r7, r3
    d39a:	781b      	ldrb	r3, [r3, #0]
    d39c:	b25b      	sxtb	r3, r3
}
    d39e:	0018      	movs	r0, r3
    d3a0:	46bd      	mov	sp, r7
    d3a2:	b006      	add	sp, #24
    d3a4:	bdb0      	pop	{r4, r5, r7, pc}
    d3a6:	46c0      	nop			; (mov r8, r8)
    d3a8:	2000034c 	.word	0x2000034c
    d3ac:	00008be9 	.word	0x00008be9
    d3b0:	00008ec9 	.word	0x00008ec9

0000d3b4 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    d3b4:	b590      	push	{r4, r7, lr}
    d3b6:	b08f      	sub	sp, #60	; 0x3c
    d3b8:	af04      	add	r7, sp, #16
    d3ba:	0004      	movs	r4, r0
    d3bc:	60b9      	str	r1, [r7, #8]
    d3be:	0010      	movs	r0, r2
    d3c0:	0019      	movs	r1, r3
    d3c2:	230f      	movs	r3, #15
    d3c4:	18fb      	adds	r3, r7, r3
    d3c6:	1c22      	adds	r2, r4, #0
    d3c8:	701a      	strb	r2, [r3, #0]
    d3ca:	230c      	movs	r3, #12
    d3cc:	18fb      	adds	r3, r7, r3
    d3ce:	1c02      	adds	r2, r0, #0
    d3d0:	801a      	strh	r2, [r3, #0]
    d3d2:	1dbb      	adds	r3, r7, #6
    d3d4:	1c0a      	adds	r2, r1, #0
    d3d6:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    d3d8:	2326      	movs	r3, #38	; 0x26
    d3da:	18fb      	adds	r3, r7, r3
    d3dc:	2206      	movs	r2, #6
    d3de:	4252      	negs	r2, r2
    d3e0:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    d3e2:	230f      	movs	r3, #15
    d3e4:	18fb      	adds	r3, r7, r3
    d3e6:	781b      	ldrb	r3, [r3, #0]
    d3e8:	2b7f      	cmp	r3, #127	; 0x7f
    d3ea:	d900      	bls.n	d3ee <send+0x3a>
    d3ec:	e087      	b.n	d4fe <send+0x14a>
    d3ee:	68bb      	ldr	r3, [r7, #8]
    d3f0:	2b00      	cmp	r3, #0
    d3f2:	d100      	bne.n	d3f6 <send+0x42>
    d3f4:	e083      	b.n	d4fe <send+0x14a>
    d3f6:	230c      	movs	r3, #12
    d3f8:	18fb      	adds	r3, r7, r3
    d3fa:	881a      	ldrh	r2, [r3, #0]
    d3fc:	23af      	movs	r3, #175	; 0xaf
    d3fe:	00db      	lsls	r3, r3, #3
    d400:	429a      	cmp	r2, r3
    d402:	d900      	bls.n	d406 <send+0x52>
    d404:	e07b      	b.n	d4fe <send+0x14a>
    d406:	230f      	movs	r3, #15
    d408:	18fb      	adds	r3, r7, r3
    d40a:	781b      	ldrb	r3, [r3, #0]
    d40c:	b25b      	sxtb	r3, r3
    d40e:	4a40      	ldr	r2, [pc, #256]	; (d510 <send+0x15c>)
    d410:	011b      	lsls	r3, r3, #4
    d412:	18d3      	adds	r3, r2, r3
    d414:	330a      	adds	r3, #10
    d416:	781b      	ldrb	r3, [r3, #0]
    d418:	b2db      	uxtb	r3, r3
    d41a:	2b01      	cmp	r3, #1
    d41c:	d16f      	bne.n	d4fe <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    d41e:	2323      	movs	r3, #35	; 0x23
    d420:	18fb      	adds	r3, r7, r3
    d422:	2245      	movs	r2, #69	; 0x45
    d424:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    d426:	2324      	movs	r3, #36	; 0x24
    d428:	18fb      	adds	r3, r7, r3
    d42a:	2250      	movs	r2, #80	; 0x50
    d42c:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    d42e:	2310      	movs	r3, #16
    d430:	18fb      	adds	r3, r7, r3
    d432:	220f      	movs	r2, #15
    d434:	18ba      	adds	r2, r7, r2
    d436:	7812      	ldrb	r2, [r2, #0]
    d438:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    d43a:	2310      	movs	r3, #16
    d43c:	18fb      	adds	r3, r7, r3
    d43e:	220c      	movs	r2, #12
    d440:	18ba      	adds	r2, r7, r2
    d442:	8812      	ldrh	r2, [r2, #0]
    d444:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    d446:	230f      	movs	r3, #15
    d448:	18fb      	adds	r3, r7, r3
    d44a:	781b      	ldrb	r3, [r3, #0]
    d44c:	b25b      	sxtb	r3, r3
    d44e:	4a30      	ldr	r2, [pc, #192]	; (d510 <send+0x15c>)
    d450:	011b      	lsls	r3, r3, #4
    d452:	18d3      	adds	r3, r2, r3
    d454:	3306      	adds	r3, #6
    d456:	881b      	ldrh	r3, [r3, #0]
    d458:	b29a      	uxth	r2, r3
    d45a:	2310      	movs	r3, #16
    d45c:	18fb      	adds	r3, r7, r3
    d45e:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    d460:	230f      	movs	r3, #15
    d462:	18fb      	adds	r3, r7, r3
    d464:	781b      	ldrb	r3, [r3, #0]
    d466:	b25b      	sxtb	r3, r3
    d468:	2b06      	cmp	r3, #6
    d46a:	dd03      	ble.n	d474 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    d46c:	2324      	movs	r3, #36	; 0x24
    d46e:	18fb      	adds	r3, r7, r3
    d470:	2244      	movs	r2, #68	; 0x44
    d472:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d474:	230f      	movs	r3, #15
    d476:	18fb      	adds	r3, r7, r3
    d478:	781b      	ldrb	r3, [r3, #0]
    d47a:	b25b      	sxtb	r3, r3
    d47c:	4a24      	ldr	r2, [pc, #144]	; (d510 <send+0x15c>)
    d47e:	011b      	lsls	r3, r3, #4
    d480:	18d3      	adds	r3, r2, r3
    d482:	330b      	adds	r3, #11
    d484:	781b      	ldrb	r3, [r3, #0]
    d486:	b2db      	uxtb	r3, r3
    d488:	001a      	movs	r2, r3
    d48a:	2301      	movs	r3, #1
    d48c:	4013      	ands	r3, r2
    d48e:	d00f      	beq.n	d4b0 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    d490:	2323      	movs	r3, #35	; 0x23
    d492:	18fb      	adds	r3, r7, r3
    d494:	224c      	movs	r2, #76	; 0x4c
    d496:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    d498:	230f      	movs	r3, #15
    d49a:	18fb      	adds	r3, r7, r3
    d49c:	2200      	movs	r2, #0
    d49e:	569a      	ldrsb	r2, [r3, r2]
    d4a0:	2324      	movs	r3, #36	; 0x24
    d4a2:	18fb      	adds	r3, r7, r3
    d4a4:	491a      	ldr	r1, [pc, #104]	; (d510 <send+0x15c>)
    d4a6:	0112      	lsls	r2, r2, #4
    d4a8:	188a      	adds	r2, r1, r2
    d4aa:	3208      	adds	r2, #8
    d4ac:	8812      	ldrh	r2, [r2, #0]
    d4ae:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    d4b0:	2323      	movs	r3, #35	; 0x23
    d4b2:	18fb      	adds	r3, r7, r3
    d4b4:	781b      	ldrb	r3, [r3, #0]
    d4b6:	2280      	movs	r2, #128	; 0x80
    d4b8:	4252      	negs	r2, r2
    d4ba:	4313      	orrs	r3, r2
    d4bc:	b2d9      	uxtb	r1, r3
    d4be:	2310      	movs	r3, #16
    d4c0:	18fa      	adds	r2, r7, r3
    d4c2:	2324      	movs	r3, #36	; 0x24
    d4c4:	18fb      	adds	r3, r7, r3
    d4c6:	881b      	ldrh	r3, [r3, #0]
    d4c8:	9302      	str	r3, [sp, #8]
    d4ca:	230c      	movs	r3, #12
    d4cc:	18fb      	adds	r3, r7, r3
    d4ce:	881b      	ldrh	r3, [r3, #0]
    d4d0:	9301      	str	r3, [sp, #4]
    d4d2:	68bb      	ldr	r3, [r7, #8]
    d4d4:	9300      	str	r3, [sp, #0]
    d4d6:	2310      	movs	r3, #16
    d4d8:	2002      	movs	r0, #2
    d4da:	4c0e      	ldr	r4, [pc, #56]	; (d514 <send+0x160>)
    d4dc:	47a0      	blx	r4
    d4de:	0003      	movs	r3, r0
    d4e0:	001a      	movs	r2, r3
    d4e2:	2326      	movs	r3, #38	; 0x26
    d4e4:	18fb      	adds	r3, r7, r3
    d4e6:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    d4e8:	2326      	movs	r3, #38	; 0x26
    d4ea:	18fb      	adds	r3, r7, r3
    d4ec:	2200      	movs	r2, #0
    d4ee:	5e9b      	ldrsh	r3, [r3, r2]
    d4f0:	2b00      	cmp	r3, #0
    d4f2:	d004      	beq.n	d4fe <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    d4f4:	2326      	movs	r3, #38	; 0x26
    d4f6:	18fb      	adds	r3, r7, r3
    d4f8:	220e      	movs	r2, #14
    d4fa:	4252      	negs	r2, r2
    d4fc:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    d4fe:	2326      	movs	r3, #38	; 0x26
    d500:	18fb      	adds	r3, r7, r3
    d502:	2200      	movs	r2, #0
    d504:	5e9b      	ldrsh	r3, [r3, r2]
}
    d506:	0018      	movs	r0, r3
    d508:	46bd      	mov	sp, r7
    d50a:	b00b      	add	sp, #44	; 0x2c
    d50c:	bd90      	pop	{r4, r7, pc}
    d50e:	46c0      	nop			; (mov r8, r8)
    d510:	2000034c 	.word	0x2000034c
    d514:	00008ec9 	.word	0x00008ec9

0000d518 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    d518:	b590      	push	{r4, r7, lr}
    d51a:	b08d      	sub	sp, #52	; 0x34
    d51c:	af04      	add	r7, sp, #16
    d51e:	60b9      	str	r1, [r7, #8]
    d520:	0011      	movs	r1, r2
    d522:	607b      	str	r3, [r7, #4]
    d524:	230f      	movs	r3, #15
    d526:	18fb      	adds	r3, r7, r3
    d528:	1c02      	adds	r2, r0, #0
    d52a:	701a      	strb	r2, [r3, #0]
    d52c:	230c      	movs	r3, #12
    d52e:	18fb      	adds	r3, r7, r3
    d530:	1c0a      	adds	r2, r1, #0
    d532:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    d534:	231e      	movs	r3, #30
    d536:	18fb      	adds	r3, r7, r3
    d538:	2206      	movs	r2, #6
    d53a:	4252      	negs	r2, r2
    d53c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    d53e:	230f      	movs	r3, #15
    d540:	18fb      	adds	r3, r7, r3
    d542:	781b      	ldrb	r3, [r3, #0]
    d544:	2b7f      	cmp	r3, #127	; 0x7f
    d546:	d900      	bls.n	d54a <recv+0x32>
    d548:	e099      	b.n	d67e <recv+0x166>
    d54a:	68bb      	ldr	r3, [r7, #8]
    d54c:	2b00      	cmp	r3, #0
    d54e:	d100      	bne.n	d552 <recv+0x3a>
    d550:	e095      	b.n	d67e <recv+0x166>
    d552:	230c      	movs	r3, #12
    d554:	18fb      	adds	r3, r7, r3
    d556:	881b      	ldrh	r3, [r3, #0]
    d558:	2b00      	cmp	r3, #0
    d55a:	d100      	bne.n	d55e <recv+0x46>
    d55c:	e08f      	b.n	d67e <recv+0x166>
    d55e:	230f      	movs	r3, #15
    d560:	18fb      	adds	r3, r7, r3
    d562:	781b      	ldrb	r3, [r3, #0]
    d564:	b25b      	sxtb	r3, r3
    d566:	4a4a      	ldr	r2, [pc, #296]	; (d690 <recv+0x178>)
    d568:	011b      	lsls	r3, r3, #4
    d56a:	18d3      	adds	r3, r2, r3
    d56c:	330a      	adds	r3, #10
    d56e:	781b      	ldrb	r3, [r3, #0]
    d570:	b2db      	uxtb	r3, r3
    d572:	2b01      	cmp	r3, #1
    d574:	d000      	beq.n	d578 <recv+0x60>
    d576:	e082      	b.n	d67e <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    d578:	231e      	movs	r3, #30
    d57a:	18fb      	adds	r3, r7, r3
    d57c:	2200      	movs	r2, #0
    d57e:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    d580:	230f      	movs	r3, #15
    d582:	18fb      	adds	r3, r7, r3
    d584:	2200      	movs	r2, #0
    d586:	569a      	ldrsb	r2, [r3, r2]
    d588:	4b41      	ldr	r3, [pc, #260]	; (d690 <recv+0x178>)
    d58a:	0112      	lsls	r2, r2, #4
    d58c:	68b9      	ldr	r1, [r7, #8]
    d58e:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    d590:	230f      	movs	r3, #15
    d592:	18fb      	adds	r3, r7, r3
    d594:	781b      	ldrb	r3, [r3, #0]
    d596:	b25b      	sxtb	r3, r3
    d598:	4a3d      	ldr	r2, [pc, #244]	; (d690 <recv+0x178>)
    d59a:	011b      	lsls	r3, r3, #4
    d59c:	18d3      	adds	r3, r2, r3
    d59e:	3304      	adds	r3, #4
    d5a0:	220c      	movs	r2, #12
    d5a2:	18ba      	adds	r2, r7, r2
    d5a4:	8812      	ldrh	r2, [r2, #0]
    d5a6:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    d5a8:	230f      	movs	r3, #15
    d5aa:	18fb      	adds	r3, r7, r3
    d5ac:	781b      	ldrb	r3, [r3, #0]
    d5ae:	b25b      	sxtb	r3, r3
    d5b0:	4a37      	ldr	r2, [pc, #220]	; (d690 <recv+0x178>)
    d5b2:	011b      	lsls	r3, r3, #4
    d5b4:	18d3      	adds	r3, r2, r3
    d5b6:	330c      	adds	r3, #12
    d5b8:	781b      	ldrb	r3, [r3, #0]
    d5ba:	b2db      	uxtb	r3, r3
    d5bc:	2b00      	cmp	r3, #0
    d5be:	d15e      	bne.n	d67e <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    d5c0:	231d      	movs	r3, #29
    d5c2:	18fb      	adds	r3, r7, r3
    d5c4:	2246      	movs	r2, #70	; 0x46
    d5c6:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    d5c8:	230f      	movs	r3, #15
    d5ca:	18fb      	adds	r3, r7, r3
    d5cc:	781b      	ldrb	r3, [r3, #0]
    d5ce:	b25b      	sxtb	r3, r3
    d5d0:	4a2f      	ldr	r2, [pc, #188]	; (d690 <recv+0x178>)
    d5d2:	011b      	lsls	r3, r3, #4
    d5d4:	18d3      	adds	r3, r2, r3
    d5d6:	330c      	adds	r3, #12
    d5d8:	2201      	movs	r2, #1
    d5da:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d5dc:	230f      	movs	r3, #15
    d5de:	18fb      	adds	r3, r7, r3
    d5e0:	781b      	ldrb	r3, [r3, #0]
    d5e2:	b25b      	sxtb	r3, r3
    d5e4:	4a2a      	ldr	r2, [pc, #168]	; (d690 <recv+0x178>)
    d5e6:	011b      	lsls	r3, r3, #4
    d5e8:	18d3      	adds	r3, r2, r3
    d5ea:	330b      	adds	r3, #11
    d5ec:	781b      	ldrb	r3, [r3, #0]
    d5ee:	b2db      	uxtb	r3, r3
    d5f0:	001a      	movs	r2, r3
    d5f2:	2301      	movs	r3, #1
    d5f4:	4013      	ands	r3, r2
    d5f6:	d003      	beq.n	d600 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    d5f8:	231d      	movs	r3, #29
    d5fa:	18fb      	adds	r3, r7, r3
    d5fc:	224d      	movs	r2, #77	; 0x4d
    d5fe:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    d600:	687b      	ldr	r3, [r7, #4]
    d602:	2b00      	cmp	r3, #0
    d604:	d105      	bne.n	d612 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    d606:	2314      	movs	r3, #20
    d608:	18fb      	adds	r3, r7, r3
    d60a:	2201      	movs	r2, #1
    d60c:	4252      	negs	r2, r2
    d60e:	601a      	str	r2, [r3, #0]
    d610:	e003      	b.n	d61a <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    d612:	2314      	movs	r3, #20
    d614:	18fb      	adds	r3, r7, r3
    d616:	687a      	ldr	r2, [r7, #4]
    d618:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    d61a:	2314      	movs	r3, #20
    d61c:	18fb      	adds	r3, r7, r3
    d61e:	220f      	movs	r2, #15
    d620:	18ba      	adds	r2, r7, r2
    d622:	7812      	ldrb	r2, [r2, #0]
    d624:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    d626:	230f      	movs	r3, #15
    d628:	18fb      	adds	r3, r7, r3
    d62a:	781b      	ldrb	r3, [r3, #0]
    d62c:	b25b      	sxtb	r3, r3
    d62e:	4a18      	ldr	r2, [pc, #96]	; (d690 <recv+0x178>)
    d630:	011b      	lsls	r3, r3, #4
    d632:	18d3      	adds	r3, r2, r3
    d634:	3306      	adds	r3, #6
    d636:	881b      	ldrh	r3, [r3, #0]
    d638:	b29a      	uxth	r2, r3
    d63a:	2314      	movs	r3, #20
    d63c:	18fb      	adds	r3, r7, r3
    d63e:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    d640:	2314      	movs	r3, #20
    d642:	18fa      	adds	r2, r7, r3
    d644:	231d      	movs	r3, #29
    d646:	18fb      	adds	r3, r7, r3
    d648:	7819      	ldrb	r1, [r3, #0]
    d64a:	2300      	movs	r3, #0
    d64c:	9302      	str	r3, [sp, #8]
    d64e:	2300      	movs	r3, #0
    d650:	9301      	str	r3, [sp, #4]
    d652:	2300      	movs	r3, #0
    d654:	9300      	str	r3, [sp, #0]
    d656:	2308      	movs	r3, #8
    d658:	2002      	movs	r0, #2
    d65a:	4c0e      	ldr	r4, [pc, #56]	; (d694 <recv+0x17c>)
    d65c:	47a0      	blx	r4
    d65e:	0003      	movs	r3, r0
    d660:	001a      	movs	r2, r3
    d662:	231e      	movs	r3, #30
    d664:	18fb      	adds	r3, r7, r3
    d666:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    d668:	231e      	movs	r3, #30
    d66a:	18fb      	adds	r3, r7, r3
    d66c:	2200      	movs	r2, #0
    d66e:	5e9b      	ldrsh	r3, [r3, r2]
    d670:	2b00      	cmp	r3, #0
    d672:	d004      	beq.n	d67e <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    d674:	231e      	movs	r3, #30
    d676:	18fb      	adds	r3, r7, r3
    d678:	220e      	movs	r2, #14
    d67a:	4252      	negs	r2, r2
    d67c:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    d67e:	231e      	movs	r3, #30
    d680:	18fb      	adds	r3, r7, r3
    d682:	2200      	movs	r2, #0
    d684:	5e9b      	ldrsh	r3, [r3, r2]
}
    d686:	0018      	movs	r0, r3
    d688:	46bd      	mov	sp, r7
    d68a:	b009      	add	sp, #36	; 0x24
    d68c:	bd90      	pop	{r4, r7, pc}
    d68e:	46c0      	nop			; (mov r8, r8)
    d690:	2000034c 	.word	0x2000034c
    d694:	00008ec9 	.word	0x00008ec9

0000d698 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    d698:	b5b0      	push	{r4, r5, r7, lr}
    d69a:	b088      	sub	sp, #32
    d69c:	af04      	add	r7, sp, #16
    d69e:	0002      	movs	r2, r0
    d6a0:	1dfb      	adds	r3, r7, #7
    d6a2:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    d6a4:	230f      	movs	r3, #15
    d6a6:	18fb      	adds	r3, r7, r3
    d6a8:	22fa      	movs	r2, #250	; 0xfa
    d6aa:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    d6ac:	4b42      	ldr	r3, [pc, #264]	; (d7b8 <close+0x120>)
    d6ae:	0018      	movs	r0, r3
    d6b0:	4b42      	ldr	r3, [pc, #264]	; (d7bc <close+0x124>)
    d6b2:	4798      	blx	r3
    d6b4:	1dfb      	adds	r3, r7, #7
    d6b6:	2200      	movs	r2, #0
    d6b8:	569a      	ldrsb	r2, [r3, r2]
    d6ba:	4b41      	ldr	r3, [pc, #260]	; (d7c0 <close+0x128>)
    d6bc:	0011      	movs	r1, r2
    d6be:	0018      	movs	r0, r3
    d6c0:	4b3e      	ldr	r3, [pc, #248]	; (d7bc <close+0x124>)
    d6c2:	4798      	blx	r3
    d6c4:	200d      	movs	r0, #13
    d6c6:	4b3f      	ldr	r3, [pc, #252]	; (d7c4 <close+0x12c>)
    d6c8:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    d6ca:	1dfb      	adds	r3, r7, #7
    d6cc:	781b      	ldrb	r3, [r3, #0]
    d6ce:	2b7f      	cmp	r3, #127	; 0x7f
    d6d0:	d86a      	bhi.n	d7a8 <close+0x110>
    d6d2:	1dfb      	adds	r3, r7, #7
    d6d4:	781b      	ldrb	r3, [r3, #0]
    d6d6:	b25b      	sxtb	r3, r3
    d6d8:	4a3b      	ldr	r2, [pc, #236]	; (d7c8 <close+0x130>)
    d6da:	011b      	lsls	r3, r3, #4
    d6dc:	18d3      	adds	r3, r2, r3
    d6de:	330a      	adds	r3, #10
    d6e0:	781b      	ldrb	r3, [r3, #0]
    d6e2:	b2db      	uxtb	r3, r3
    d6e4:	2b01      	cmp	r3, #1
    d6e6:	d15f      	bne.n	d7a8 <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    d6e8:	230e      	movs	r3, #14
    d6ea:	18fb      	adds	r3, r7, r3
    d6ec:	2249      	movs	r2, #73	; 0x49
    d6ee:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    d6f0:	2308      	movs	r3, #8
    d6f2:	18fb      	adds	r3, r7, r3
    d6f4:	1dfa      	adds	r2, r7, #7
    d6f6:	7812      	ldrb	r2, [r2, #0]
    d6f8:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    d6fa:	1dfb      	adds	r3, r7, #7
    d6fc:	781b      	ldrb	r3, [r3, #0]
    d6fe:	b25b      	sxtb	r3, r3
    d700:	4a31      	ldr	r2, [pc, #196]	; (d7c8 <close+0x130>)
    d702:	011b      	lsls	r3, r3, #4
    d704:	18d3      	adds	r3, r2, r3
    d706:	3306      	adds	r3, #6
    d708:	881b      	ldrh	r3, [r3, #0]
    d70a:	b29a      	uxth	r2, r3
    d70c:	2308      	movs	r3, #8
    d70e:	18fb      	adds	r3, r7, r3
    d710:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    d712:	1dfb      	adds	r3, r7, #7
    d714:	781b      	ldrb	r3, [r3, #0]
    d716:	b25b      	sxtb	r3, r3
    d718:	4a2b      	ldr	r2, [pc, #172]	; (d7c8 <close+0x130>)
    d71a:	011b      	lsls	r3, r3, #4
    d71c:	18d3      	adds	r3, r2, r3
    d71e:	330a      	adds	r3, #10
    d720:	2200      	movs	r2, #0
    d722:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    d724:	1dfb      	adds	r3, r7, #7
    d726:	781b      	ldrb	r3, [r3, #0]
    d728:	b25b      	sxtb	r3, r3
    d72a:	4a27      	ldr	r2, [pc, #156]	; (d7c8 <close+0x130>)
    d72c:	011b      	lsls	r3, r3, #4
    d72e:	18d3      	adds	r3, r2, r3
    d730:	3306      	adds	r3, #6
    d732:	2200      	movs	r2, #0
    d734:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d736:	1dfb      	adds	r3, r7, #7
    d738:	781b      	ldrb	r3, [r3, #0]
    d73a:	b25b      	sxtb	r3, r3
    d73c:	4a22      	ldr	r2, [pc, #136]	; (d7c8 <close+0x130>)
    d73e:	011b      	lsls	r3, r3, #4
    d740:	18d3      	adds	r3, r2, r3
    d742:	330b      	adds	r3, #11
    d744:	781b      	ldrb	r3, [r3, #0]
    d746:	b2db      	uxtb	r3, r3
    d748:	001a      	movs	r2, r3
    d74a:	2301      	movs	r3, #1
    d74c:	4013      	ands	r3, r2
    d74e:	d003      	beq.n	d758 <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    d750:	230e      	movs	r3, #14
    d752:	18fb      	adds	r3, r7, r3
    d754:	224e      	movs	r2, #78	; 0x4e
    d756:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    d758:	230f      	movs	r3, #15
    d75a:	18fc      	adds	r4, r7, r3
    d75c:	2308      	movs	r3, #8
    d75e:	18fa      	adds	r2, r7, r3
    d760:	230e      	movs	r3, #14
    d762:	18fb      	adds	r3, r7, r3
    d764:	7819      	ldrb	r1, [r3, #0]
    d766:	2300      	movs	r3, #0
    d768:	9302      	str	r3, [sp, #8]
    d76a:	2300      	movs	r3, #0
    d76c:	9301      	str	r3, [sp, #4]
    d76e:	2300      	movs	r3, #0
    d770:	9300      	str	r3, [sp, #0]
    d772:	2304      	movs	r3, #4
    d774:	2002      	movs	r0, #2
    d776:	4d15      	ldr	r5, [pc, #84]	; (d7cc <close+0x134>)
    d778:	47a8      	blx	r5
    d77a:	0003      	movs	r3, r0
    d77c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    d77e:	230f      	movs	r3, #15
    d780:	18fb      	adds	r3, r7, r3
    d782:	781b      	ldrb	r3, [r3, #0]
    d784:	b25b      	sxtb	r3, r3
    d786:	2b00      	cmp	r3, #0
    d788:	d003      	beq.n	d792 <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    d78a:	230f      	movs	r3, #15
    d78c:	18fb      	adds	r3, r7, r3
    d78e:	22f7      	movs	r2, #247	; 0xf7
    d790:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    d792:	1dfb      	adds	r3, r7, #7
    d794:	781b      	ldrb	r3, [r3, #0]
    d796:	b25b      	sxtb	r3, r3
    d798:	011a      	lsls	r2, r3, #4
    d79a:	4b0b      	ldr	r3, [pc, #44]	; (d7c8 <close+0x130>)
    d79c:	18d3      	adds	r3, r2, r3
    d79e:	2210      	movs	r2, #16
    d7a0:	2100      	movs	r1, #0
    d7a2:	0018      	movs	r0, r3
    d7a4:	4b0a      	ldr	r3, [pc, #40]	; (d7d0 <close+0x138>)
    d7a6:	4798      	blx	r3
	}
	return s8Ret;
    d7a8:	230f      	movs	r3, #15
    d7aa:	18fb      	adds	r3, r7, r3
    d7ac:	781b      	ldrb	r3, [r3, #0]
    d7ae:	b25b      	sxtb	r3, r3
}
    d7b0:	0018      	movs	r0, r3
    d7b2:	46bd      	mov	sp, r7
    d7b4:	b004      	add	sp, #16
    d7b6:	bdb0      	pop	{r4, r5, r7, pc}
    d7b8:	0001ab80 	.word	0x0001ab80
    d7bc:	00018619 	.word	0x00018619
    d7c0:	0001abbc 	.word	0x0001abbc
    d7c4:	0001864d 	.word	0x0001864d
    d7c8:	2000034c 	.word	0x2000034c
    d7cc:	00008ec9 	.word	0x00008ec9
    d7d0:	00008c25 	.word	0x00008c25

0000d7d4 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    d7d4:	b580      	push	{r7, lr}
    d7d6:	b086      	sub	sp, #24
    d7d8:	af00      	add	r7, sp, #0
    d7da:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
    d7dc:	2300      	movs	r3, #0
    d7de:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
    d7e0:	2317      	movs	r3, #23
    d7e2:	18fb      	adds	r3, r7, r3
    d7e4:	2200      	movs	r2, #0
    d7e6:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
    d7e8:	2316      	movs	r3, #22
    d7ea:	18fb      	adds	r3, r7, r3
    d7ec:	2200      	movs	r2, #0
    d7ee:	701a      	strb	r2, [r3, #0]
    d7f0:	e060      	b.n	d8b4 <nmi_inet_addr+0xe0>
	{
		j = 0;
    d7f2:	2315      	movs	r3, #21
    d7f4:	18fb      	adds	r3, r7, r3
    d7f6:	2200      	movs	r2, #0
    d7f8:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
    d7fa:	2314      	movs	r3, #20
    d7fc:	18fb      	adds	r3, r7, r3
    d7fe:	687a      	ldr	r2, [r7, #4]
    d800:	7812      	ldrb	r2, [r2, #0]
    d802:	701a      	strb	r2, [r3, #0]
			++j;
    d804:	2315      	movs	r3, #21
    d806:	18fb      	adds	r3, r7, r3
    d808:	2215      	movs	r2, #21
    d80a:	18ba      	adds	r2, r7, r2
    d80c:	7812      	ldrb	r2, [r2, #0]
    d80e:	3201      	adds	r2, #1
    d810:	701a      	strb	r2, [r3, #0]
			if(j > 4)
    d812:	2315      	movs	r3, #21
    d814:	18fb      	adds	r3, r7, r3
    d816:	781b      	ldrb	r3, [r3, #0]
    d818:	2b04      	cmp	r3, #4
    d81a:	d901      	bls.n	d820 <nmi_inet_addr+0x4c>
			{
				return 0;
    d81c:	2300      	movs	r3, #0
    d81e:	e057      	b.n	d8d0 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
    d820:	2314      	movs	r3, #20
    d822:	18fb      	adds	r3, r7, r3
    d824:	781b      	ldrb	r3, [r3, #0]
    d826:	2b2e      	cmp	r3, #46	; 0x2e
    d828:	d004      	beq.n	d834 <nmi_inet_addr+0x60>
    d82a:	2314      	movs	r3, #20
    d82c:	18fb      	adds	r3, r7, r3
    d82e:	781b      	ldrb	r3, [r3, #0]
    d830:	2b00      	cmp	r3, #0
    d832:	d10d      	bne.n	d850 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
    d834:	2316      	movs	r3, #22
    d836:	18fb      	adds	r3, r7, r3
    d838:	781b      	ldrb	r3, [r3, #0]
    d83a:	220c      	movs	r2, #12
    d83c:	18ba      	adds	r2, r7, r2
    d83e:	2117      	movs	r1, #23
    d840:	1879      	adds	r1, r7, r1
    d842:	7809      	ldrb	r1, [r1, #0]
    d844:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
    d846:	2317      	movs	r3, #23
    d848:	18fb      	adds	r3, r7, r3
    d84a:	2200      	movs	r2, #0
    d84c:	701a      	strb	r2, [r3, #0]
    d84e:	e01d      	b.n	d88c <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
    d850:	2314      	movs	r3, #20
    d852:	18fb      	adds	r3, r7, r3
    d854:	781b      	ldrb	r3, [r3, #0]
    d856:	2b2f      	cmp	r3, #47	; 0x2f
    d858:	d916      	bls.n	d888 <nmi_inet_addr+0xb4>
    d85a:	2314      	movs	r3, #20
    d85c:	18fb      	adds	r3, r7, r3
    d85e:	781b      	ldrb	r3, [r3, #0]
    d860:	2b39      	cmp	r3, #57	; 0x39
    d862:	d811      	bhi.n	d888 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
    d864:	2317      	movs	r3, #23
    d866:	18fb      	adds	r3, r7, r3
    d868:	781b      	ldrb	r3, [r3, #0]
    d86a:	1c1a      	adds	r2, r3, #0
    d86c:	0092      	lsls	r2, r2, #2
    d86e:	18d3      	adds	r3, r2, r3
    d870:	18db      	adds	r3, r3, r3
    d872:	b2da      	uxtb	r2, r3
    d874:	2314      	movs	r3, #20
    d876:	18fb      	adds	r3, r7, r3
    d878:	781b      	ldrb	r3, [r3, #0]
    d87a:	18d3      	adds	r3, r2, r3
    d87c:	b2da      	uxtb	r2, r3
    d87e:	2317      	movs	r3, #23
    d880:	18fb      	adds	r3, r7, r3
    d882:	3a30      	subs	r2, #48	; 0x30
    d884:	701a      	strb	r2, [r3, #0]
    d886:	e001      	b.n	d88c <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
    d888:	2300      	movs	r3, #0
    d88a:	e021      	b.n	d8d0 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
    d88c:	687b      	ldr	r3, [r7, #4]
    d88e:	3301      	adds	r3, #1
    d890:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
    d892:	2314      	movs	r3, #20
    d894:	18fb      	adds	r3, r7, r3
    d896:	781b      	ldrb	r3, [r3, #0]
    d898:	2b2e      	cmp	r3, #46	; 0x2e
    d89a:	d004      	beq.n	d8a6 <nmi_inet_addr+0xd2>
    d89c:	2314      	movs	r3, #20
    d89e:	18fb      	adds	r3, r7, r3
    d8a0:	781b      	ldrb	r3, [r3, #0]
    d8a2:	2b00      	cmp	r3, #0
    d8a4:	d1a9      	bne.n	d7fa <nmi_inet_addr+0x26>
	uint8 	c;
	uint8	i, j;

	tmp = 0;

	for(i = 0; i < 4; ++i)
    d8a6:	2316      	movs	r3, #22
    d8a8:	18fb      	adds	r3, r7, r3
    d8aa:	2216      	movs	r2, #22
    d8ac:	18ba      	adds	r2, r7, r2
    d8ae:	7812      	ldrb	r2, [r2, #0]
    d8b0:	3201      	adds	r2, #1
    d8b2:	701a      	strb	r2, [r3, #0]
    d8b4:	2316      	movs	r3, #22
    d8b6:	18fb      	adds	r3, r7, r3
    d8b8:	781b      	ldrb	r3, [r3, #0]
    d8ba:	2b03      	cmp	r3, #3
    d8bc:	d999      	bls.n	d7f2 <nmi_inet_addr+0x1e>
				return 0;
			}
			++pcIpAddr;
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    d8be:	230c      	movs	r3, #12
    d8c0:	18f9      	adds	r1, r7, r3
    d8c2:	2310      	movs	r3, #16
    d8c4:	18fb      	adds	r3, r7, r3
    d8c6:	2204      	movs	r2, #4
    d8c8:	0018      	movs	r0, r3
    d8ca:	4b03      	ldr	r3, [pc, #12]	; (d8d8 <nmi_inet_addr+0x104>)
    d8cc:	4798      	blx	r3
	return u32IP;
    d8ce:	693b      	ldr	r3, [r7, #16]
}
    d8d0:	0018      	movs	r0, r3
    d8d2:	46bd      	mov	sp, r7
    d8d4:	b006      	add	sp, #24
    d8d6:	bd80      	pop	{r7, pc}
    d8d8:	00008be9 	.word	0x00008be9

0000d8dc <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    d8dc:	b5b0      	push	{r4, r5, r7, lr}
    d8de:	b088      	sub	sp, #32
    d8e0:	af04      	add	r7, sp, #16
    d8e2:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    d8e4:	230f      	movs	r3, #15
    d8e6:	18fb      	adds	r3, r7, r3
    d8e8:	22fa      	movs	r2, #250	; 0xfa
    d8ea:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    d8ec:	687b      	ldr	r3, [r7, #4]
    d8ee:	0018      	movs	r0, r3
    d8f0:	4b14      	ldr	r3, [pc, #80]	; (d944 <gethostbyname+0x68>)
    d8f2:	4798      	blx	r3
    d8f4:	0003      	movs	r3, r0
    d8f6:	001a      	movs	r2, r3
    d8f8:	230e      	movs	r3, #14
    d8fa:	18fb      	adds	r3, r7, r3
    d8fc:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    d8fe:	230e      	movs	r3, #14
    d900:	18fb      	adds	r3, r7, r3
    d902:	781b      	ldrb	r3, [r3, #0]
    d904:	2b40      	cmp	r3, #64	; 0x40
    d906:	d815      	bhi.n	d934 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    d908:	230e      	movs	r3, #14
    d90a:	18fb      	adds	r3, r7, r3
    d90c:	781b      	ldrb	r3, [r3, #0]
    d90e:	b29b      	uxth	r3, r3
    d910:	3301      	adds	r3, #1
    d912:	b299      	uxth	r1, r3
    d914:	230f      	movs	r3, #15
    d916:	18fc      	adds	r4, r7, r3
    d918:	687a      	ldr	r2, [r7, #4]
    d91a:	2300      	movs	r3, #0
    d91c:	9302      	str	r3, [sp, #8]
    d91e:	2300      	movs	r3, #0
    d920:	9301      	str	r3, [sp, #4]
    d922:	2300      	movs	r3, #0
    d924:	9300      	str	r3, [sp, #0]
    d926:	000b      	movs	r3, r1
    d928:	214a      	movs	r1, #74	; 0x4a
    d92a:	2002      	movs	r0, #2
    d92c:	4d06      	ldr	r5, [pc, #24]	; (d948 <gethostbyname+0x6c>)
    d92e:	47a8      	blx	r5
    d930:	0003      	movs	r3, r0
    d932:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    d934:	230f      	movs	r3, #15
    d936:	18fb      	adds	r3, r7, r3
    d938:	781b      	ldrb	r3, [r3, #0]
    d93a:	b25b      	sxtb	r3, r3
}
    d93c:	0018      	movs	r0, r3
    d93e:	46bd      	mov	sp, r7
    d940:	b004      	add	sp, #16
    d942:	bdb0      	pop	{r4, r5, r7, pc}
    d944:	00008c65 	.word	0x00008c65
    d948:	00008ec9 	.word	0x00008ec9

0000d94c <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    d94c:	b580      	push	{r7, lr}
    d94e:	b082      	sub	sp, #8
    d950:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    d952:	003b      	movs	r3, r7
    d954:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    d956:	687b      	ldr	r3, [r7, #4]
    d958:	22b9      	movs	r2, #185	; 0xb9
    d95a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    d95c:	4b13      	ldr	r3, [pc, #76]	; (d9ac <spi_flash_enter_low_power_mode+0x60>)
    d95e:	2100      	movs	r1, #0
    d960:	0018      	movs	r0, r3
    d962:	4b13      	ldr	r3, [pc, #76]	; (d9b0 <spi_flash_enter_low_power_mode+0x64>)
    d964:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    d966:	687b      	ldr	r3, [r7, #4]
    d968:	781b      	ldrb	r3, [r3, #0]
    d96a:	001a      	movs	r2, r3
    d96c:	4b11      	ldr	r3, [pc, #68]	; (d9b4 <spi_flash_enter_low_power_mode+0x68>)
    d96e:	0011      	movs	r1, r2
    d970:	0018      	movs	r0, r3
    d972:	4b0f      	ldr	r3, [pc, #60]	; (d9b0 <spi_flash_enter_low_power_mode+0x64>)
    d974:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    d976:	4b10      	ldr	r3, [pc, #64]	; (d9b8 <spi_flash_enter_low_power_mode+0x6c>)
    d978:	2101      	movs	r1, #1
    d97a:	0018      	movs	r0, r3
    d97c:	4b0c      	ldr	r3, [pc, #48]	; (d9b0 <spi_flash_enter_low_power_mode+0x64>)
    d97e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    d980:	4b0e      	ldr	r3, [pc, #56]	; (d9bc <spi_flash_enter_low_power_mode+0x70>)
    d982:	2100      	movs	r1, #0
    d984:	0018      	movs	r0, r3
    d986:	4b0a      	ldr	r3, [pc, #40]	; (d9b0 <spi_flash_enter_low_power_mode+0x64>)
    d988:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    d98a:	4b0d      	ldr	r3, [pc, #52]	; (d9c0 <spi_flash_enter_low_power_mode+0x74>)
    d98c:	2181      	movs	r1, #129	; 0x81
    d98e:	0018      	movs	r0, r3
    d990:	4b07      	ldr	r3, [pc, #28]	; (d9b0 <spi_flash_enter_low_power_mode+0x64>)
    d992:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    d994:	46c0      	nop			; (mov r8, r8)
    d996:	4b0b      	ldr	r3, [pc, #44]	; (d9c4 <spi_flash_enter_low_power_mode+0x78>)
    d998:	0018      	movs	r0, r3
    d99a:	4b0b      	ldr	r3, [pc, #44]	; (d9c8 <spi_flash_enter_low_power_mode+0x7c>)
    d99c:	4798      	blx	r3
    d99e:	1e03      	subs	r3, r0, #0
    d9a0:	2b01      	cmp	r3, #1
    d9a2:	d1f8      	bne.n	d996 <spi_flash_enter_low_power_mode+0x4a>
}
    d9a4:	46c0      	nop			; (mov r8, r8)
    d9a6:	46bd      	mov	sp, r7
    d9a8:	b002      	add	sp, #8
    d9aa:	bd80      	pop	{r7, pc}
    d9ac:	00010208 	.word	0x00010208
    d9b0:	0000acf9 	.word	0x0000acf9
    d9b4:	0001020c 	.word	0x0001020c
    d9b8:	00010214 	.word	0x00010214
    d9bc:	0001021c 	.word	0x0001021c
    d9c0:	00010204 	.word	0x00010204
    d9c4:	00010218 	.word	0x00010218
    d9c8:	0000acb5 	.word	0x0000acb5

0000d9cc <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    d9cc:	b580      	push	{r7, lr}
    d9ce:	b082      	sub	sp, #8
    d9d0:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    d9d2:	003b      	movs	r3, r7
    d9d4:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    d9d6:	687b      	ldr	r3, [r7, #4]
    d9d8:	22ab      	movs	r2, #171	; 0xab
    d9da:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    d9dc:	4b13      	ldr	r3, [pc, #76]	; (da2c <spi_flash_leave_low_power_mode+0x60>)
    d9de:	2100      	movs	r1, #0
    d9e0:	0018      	movs	r0, r3
    d9e2:	4b13      	ldr	r3, [pc, #76]	; (da30 <spi_flash_leave_low_power_mode+0x64>)
    d9e4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    d9e6:	687b      	ldr	r3, [r7, #4]
    d9e8:	781b      	ldrb	r3, [r3, #0]
    d9ea:	001a      	movs	r2, r3
    d9ec:	4b11      	ldr	r3, [pc, #68]	; (da34 <spi_flash_leave_low_power_mode+0x68>)
    d9ee:	0011      	movs	r1, r2
    d9f0:	0018      	movs	r0, r3
    d9f2:	4b0f      	ldr	r3, [pc, #60]	; (da30 <spi_flash_leave_low_power_mode+0x64>)
    d9f4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    d9f6:	4b10      	ldr	r3, [pc, #64]	; (da38 <spi_flash_leave_low_power_mode+0x6c>)
    d9f8:	2101      	movs	r1, #1
    d9fa:	0018      	movs	r0, r3
    d9fc:	4b0c      	ldr	r3, [pc, #48]	; (da30 <spi_flash_leave_low_power_mode+0x64>)
    d9fe:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    da00:	4b0e      	ldr	r3, [pc, #56]	; (da3c <spi_flash_leave_low_power_mode+0x70>)
    da02:	2100      	movs	r1, #0
    da04:	0018      	movs	r0, r3
    da06:	4b0a      	ldr	r3, [pc, #40]	; (da30 <spi_flash_leave_low_power_mode+0x64>)
    da08:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    da0a:	4b0d      	ldr	r3, [pc, #52]	; (da40 <spi_flash_leave_low_power_mode+0x74>)
    da0c:	2181      	movs	r1, #129	; 0x81
    da0e:	0018      	movs	r0, r3
    da10:	4b07      	ldr	r3, [pc, #28]	; (da30 <spi_flash_leave_low_power_mode+0x64>)
    da12:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    da14:	46c0      	nop			; (mov r8, r8)
    da16:	4b0b      	ldr	r3, [pc, #44]	; (da44 <spi_flash_leave_low_power_mode+0x78>)
    da18:	0018      	movs	r0, r3
    da1a:	4b0b      	ldr	r3, [pc, #44]	; (da48 <spi_flash_leave_low_power_mode+0x7c>)
    da1c:	4798      	blx	r3
    da1e:	1e03      	subs	r3, r0, #0
    da20:	2b01      	cmp	r3, #1
    da22:	d1f8      	bne.n	da16 <spi_flash_leave_low_power_mode+0x4a>
}
    da24:	46c0      	nop			; (mov r8, r8)
    da26:	46bd      	mov	sp, r7
    da28:	b002      	add	sp, #8
    da2a:	bd80      	pop	{r7, pc}
    da2c:	00010208 	.word	0x00010208
    da30:	0000acf9 	.word	0x0000acf9
    da34:	0001020c 	.word	0x0001020c
    da38:	00010214 	.word	0x00010214
    da3c:	0001021c 	.word	0x0001021c
    da40:	00010204 	.word	0x00010204
    da44:	00010218 	.word	0x00010218
    da48:	0000acb5 	.word	0x0000acb5

0000da4c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    da4c:	b590      	push	{r4, r7, lr}
    da4e:	b085      	sub	sp, #20
    da50:	af00      	add	r7, sp, #0
    da52:	0002      	movs	r2, r0
    da54:	1dfb      	adds	r3, r7, #7
    da56:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    da58:	230f      	movs	r3, #15
    da5a:	18fb      	adds	r3, r7, r3
    da5c:	2200      	movs	r2, #0
    da5e:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    da60:	4b24      	ldr	r3, [pc, #144]	; (daf4 <spi_flash_enable+0xa8>)
    da62:	4798      	blx	r3
    da64:	0003      	movs	r3, r0
    da66:	051b      	lsls	r3, r3, #20
    da68:	0d1b      	lsrs	r3, r3, #20
    da6a:	4a23      	ldr	r2, [pc, #140]	; (daf8 <spi_flash_enable+0xac>)
    da6c:	4293      	cmp	r3, r2
    da6e:	d938      	bls.n	dae2 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    da70:	230f      	movs	r3, #15
    da72:	18fc      	adds	r4, r7, r3
    da74:	2308      	movs	r3, #8
    da76:	18fb      	adds	r3, r7, r3
    da78:	4a20      	ldr	r2, [pc, #128]	; (dafc <spi_flash_enable+0xb0>)
    da7a:	0019      	movs	r1, r3
    da7c:	0010      	movs	r0, r2
    da7e:	4b20      	ldr	r3, [pc, #128]	; (db00 <spi_flash_enable+0xb4>)
    da80:	4798      	blx	r3
    da82:	0003      	movs	r3, r0
    da84:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    da86:	230f      	movs	r3, #15
    da88:	18fb      	adds	r3, r7, r3
    da8a:	781b      	ldrb	r3, [r3, #0]
    da8c:	b25b      	sxtb	r3, r3
    da8e:	2b00      	cmp	r3, #0
    da90:	d126      	bne.n	dae0 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    da92:	68bb      	ldr	r3, [r7, #8]
    da94:	4a1b      	ldr	r2, [pc, #108]	; (db04 <spi_flash_enable+0xb8>)
    da96:	4013      	ands	r3, r2
    da98:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    da9a:	68bb      	ldr	r3, [r7, #8]
    da9c:	4a1a      	ldr	r2, [pc, #104]	; (db08 <spi_flash_enable+0xbc>)
    da9e:	4313      	orrs	r3, r2
    daa0:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    daa2:	68bb      	ldr	r3, [r7, #8]
    daa4:	4a15      	ldr	r2, [pc, #84]	; (dafc <spi_flash_enable+0xb0>)
    daa6:	0019      	movs	r1, r3
    daa8:	0010      	movs	r0, r2
    daaa:	4b18      	ldr	r3, [pc, #96]	; (db0c <spi_flash_enable+0xc0>)
    daac:	4798      	blx	r3
		if(enable) {
    daae:	1dfb      	adds	r3, r7, #7
    dab0:	781b      	ldrb	r3, [r3, #0]
    dab2:	2b00      	cmp	r3, #0
    dab4:	d002      	beq.n	dabc <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    dab6:	4b16      	ldr	r3, [pc, #88]	; (db10 <spi_flash_enable+0xc4>)
    dab8:	4798      	blx	r3
    daba:	e001      	b.n	dac0 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    dabc:	4b15      	ldr	r3, [pc, #84]	; (db14 <spi_flash_enable+0xc8>)
    dabe:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    dac0:	68bb      	ldr	r3, [r7, #8]
    dac2:	4a10      	ldr	r2, [pc, #64]	; (db04 <spi_flash_enable+0xb8>)
    dac4:	4013      	ands	r3, r2
    dac6:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    dac8:	68bb      	ldr	r3, [r7, #8]
    daca:	2280      	movs	r2, #128	; 0x80
    dacc:	0252      	lsls	r2, r2, #9
    dace:	4313      	orrs	r3, r2
    dad0:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    dad2:	68bb      	ldr	r3, [r7, #8]
    dad4:	4a09      	ldr	r2, [pc, #36]	; (dafc <spi_flash_enable+0xb0>)
    dad6:	0019      	movs	r1, r3
    dad8:	0010      	movs	r0, r2
    dada:	4b0c      	ldr	r3, [pc, #48]	; (db0c <spi_flash_enable+0xc0>)
    dadc:	4798      	blx	r3
    dade:	e000      	b.n	dae2 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
    dae0:	46c0      	nop			; (mov r8, r8)
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
    dae2:	230f      	movs	r3, #15
    dae4:	18fb      	adds	r3, r7, r3
    dae6:	781b      	ldrb	r3, [r3, #0]
    dae8:	b25b      	sxtb	r3, r3
}
    daea:	0018      	movs	r0, r3
    daec:	46bd      	mov	sp, r7
    daee:	b005      	add	sp, #20
    daf0:	bd90      	pop	{r4, r7, pc}
    daf2:	46c0      	nop			; (mov r8, r8)
    daf4:	0000a5d9 	.word	0x0000a5d9
    daf8:	0000039f 	.word	0x0000039f
    dafc:	00001410 	.word	0x00001410
    db00:	0000acd5 	.word	0x0000acd5
    db04:	f8888fff 	.word	0xf8888fff
    db08:	01111000 	.word	0x01111000
    db0c:	0000acf9 	.word	0x0000acf9
    db10:	0000d9cd 	.word	0x0000d9cd
    db14:	0000d94d 	.word	0x0000d94d

0000db18 <_crc32_recalculate_bytes_helper>:
 *
 * \attention This implementation assumes a little-endian architecture.
 */
static inline crc32_t _crc32_recalculate_bytes_helper(word_t data,
		crc32_t crc, uint_fast8_t bytes)
{
    db18:	b580      	push	{r7, lr}
    db1a:	b086      	sub	sp, #24
    db1c:	af00      	add	r7, sp, #0
    db1e:	60f8      	str	r0, [r7, #12]
    db20:	60b9      	str	r1, [r7, #8]
    db22:	607a      	str	r2, [r7, #4]
	uint_fast8_t bit;

	crc ^= data;
    db24:	68ba      	ldr	r2, [r7, #8]
    db26:	68fb      	ldr	r3, [r7, #12]
    db28:	4053      	eors	r3, r2
    db2a:	60bb      	str	r3, [r7, #8]

	for (bit = 8 * bytes; bit > 0; bit--) {
    db2c:	687b      	ldr	r3, [r7, #4]
    db2e:	00db      	lsls	r3, r3, #3
    db30:	617b      	str	r3, [r7, #20]
    db32:	e00f      	b.n	db54 <_crc32_recalculate_bytes_helper+0x3c>
		if (crc & 1) {
    db34:	68bb      	ldr	r3, [r7, #8]
    db36:	2201      	movs	r2, #1
    db38:	4013      	ands	r3, r2
    db3a:	d005      	beq.n	db48 <_crc32_recalculate_bytes_helper+0x30>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    db3c:	68bb      	ldr	r3, [r7, #8]
    db3e:	085b      	lsrs	r3, r3, #1
    db40:	4a08      	ldr	r2, [pc, #32]	; (db64 <_crc32_recalculate_bytes_helper+0x4c>)
    db42:	4053      	eors	r3, r2
    db44:	60bb      	str	r3, [r7, #8]
    db46:	e002      	b.n	db4e <_crc32_recalculate_bytes_helper+0x36>
		} else {
			crc >>= 1;
    db48:	68bb      	ldr	r3, [r7, #8]
    db4a:	085b      	lsrs	r3, r3, #1
    db4c:	60bb      	str	r3, [r7, #8]
{
	uint_fast8_t bit;

	crc ^= data;

	for (bit = 8 * bytes; bit > 0; bit--) {
    db4e:	697b      	ldr	r3, [r7, #20]
    db50:	3b01      	subs	r3, #1
    db52:	617b      	str	r3, [r7, #20]
    db54:	697b      	ldr	r3, [r7, #20]
    db56:	2b00      	cmp	r3, #0
    db58:	d1ec      	bne.n	db34 <_crc32_recalculate_bytes_helper+0x1c>
		} else {
			crc >>= 1;
		}
	}

	return crc;
    db5a:	68bb      	ldr	r3, [r7, #8]
}
    db5c:	0018      	movs	r0, r3
    db5e:	46bd      	mov	sp, r7
    db60:	b006      	add	sp, #24
    db62:	bd80      	pop	{r7, pc}
    db64:	edb88320 	.word	0xedb88320

0000db68 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    db68:	b580      	push	{r7, lr}
    db6a:	b088      	sub	sp, #32
    db6c:	af00      	add	r7, sp, #0
    db6e:	60f8      	str	r0, [r7, #12]
    db70:	60b9      	str	r1, [r7, #8]
    db72:	607a      	str	r2, [r7, #4]
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    db74:	68fb      	ldr	r3, [r7, #12]
    db76:	2203      	movs	r2, #3
    db78:	4393      	bics	r3, r2
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
	const word_t *word_ptr =
    db7a:	61fb      	str	r3, [r7, #28]
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    db7c:	687b      	ldr	r3, [r7, #4]
    db7e:	681b      	ldr	r3, [r3, #0]
    db80:	43db      	mvns	r3, r3
    db82:	617b      	str	r3, [r7, #20]
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
    db84:	68bb      	ldr	r3, [r7, #8]
    db86:	2b03      	cmp	r3, #3
    db88:	d802      	bhi.n	db90 <crc32_recalculate+0x28>
		temp_length = length;
    db8a:	68bb      	ldr	r3, [r7, #8]
    db8c:	61bb      	str	r3, [r7, #24]
    db8e:	e004      	b.n	db9a <crc32_recalculate+0x32>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    db90:	68fb      	ldr	r3, [r7, #12]
    db92:	425b      	negs	r3, r3
    db94:	2203      	movs	r2, #3
    db96:	4013      	ands	r3, r2
    db98:	61bb      	str	r3, [r7, #24]
	}

	if (temp_length) {
    db9a:	69bb      	ldr	r3, [r7, #24]
    db9c:	2b00      	cmp	r3, #0
    db9e:	d01a      	beq.n	dbd6 <crc32_recalculate+0x6e>
		length -= temp_length;
    dba0:	68ba      	ldr	r2, [r7, #8]
    dba2:	69bb      	ldr	r3, [r7, #24]
    dba4:	1ad3      	subs	r3, r2, r3
    dba6:	60bb      	str	r3, [r7, #8]

		word = *(word_ptr++);
    dba8:	69fb      	ldr	r3, [r7, #28]
    dbaa:	1d1a      	adds	r2, r3, #4
    dbac:	61fa      	str	r2, [r7, #28]
    dbae:	681b      	ldr	r3, [r3, #0]
    dbb0:	613b      	str	r3, [r7, #16]
		word >>= 8 * (WORD_SIZE - temp_length);
    dbb2:	69ba      	ldr	r2, [r7, #24]
    dbb4:	0013      	movs	r3, r2
    dbb6:	075b      	lsls	r3, r3, #29
    dbb8:	1a9b      	subs	r3, r3, r2
    dbba:	00db      	lsls	r3, r3, #3
    dbbc:	3320      	adds	r3, #32
    dbbe:	693a      	ldr	r2, [r7, #16]
    dbc0:	40da      	lsrs	r2, r3
    dbc2:	0013      	movs	r3, r2
    dbc4:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
    dbc6:	69ba      	ldr	r2, [r7, #24]
    dbc8:	6979      	ldr	r1, [r7, #20]
    dbca:	693b      	ldr	r3, [r7, #16]
    dbcc:	0018      	movs	r0, r3
    dbce:	4b24      	ldr	r3, [pc, #144]	; (dc60 <crc32_recalculate+0xf8>)
    dbd0:	4798      	blx	r3
    dbd2:	0003      	movs	r3, r0
    dbd4:	617b      	str	r3, [r7, #20]
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    dbd6:	68bb      	ldr	r3, [r7, #8]
    dbd8:	2203      	movs	r2, #3
    dbda:	4393      	bics	r3, r2
    dbdc:	61bb      	str	r3, [r7, #24]

	if (temp_length) {
    dbde:	69bb      	ldr	r3, [r7, #24]
    dbe0:	2b00      	cmp	r3, #0
    dbe2:	d019      	beq.n	dc18 <crc32_recalculate+0xb0>
		length -= temp_length;
    dbe4:	68ba      	ldr	r2, [r7, #8]
    dbe6:	69bb      	ldr	r3, [r7, #24]
    dbe8:	1ad3      	subs	r3, r2, r3
    dbea:	60bb      	str	r3, [r7, #8]
		temp_length /= WORD_SIZE;
    dbec:	69bb      	ldr	r3, [r7, #24]
    dbee:	089b      	lsrs	r3, r3, #2
    dbf0:	61bb      	str	r3, [r7, #24]

		while (temp_length--) {
    dbf2:	e00c      	b.n	dc0e <crc32_recalculate+0xa6>
			word = *(word_ptr++);
    dbf4:	69fb      	ldr	r3, [r7, #28]
    dbf6:	1d1a      	adds	r2, r3, #4
    dbf8:	61fa      	str	r2, [r7, #28]
    dbfa:	681b      	ldr	r3, [r3, #0]
    dbfc:	613b      	str	r3, [r7, #16]
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
    dbfe:	6979      	ldr	r1, [r7, #20]
    dc00:	693b      	ldr	r3, [r7, #16]
    dc02:	2204      	movs	r2, #4
    dc04:	0018      	movs	r0, r3
    dc06:	4b16      	ldr	r3, [pc, #88]	; (dc60 <crc32_recalculate+0xf8>)
    dc08:	4798      	blx	r3
    dc0a:	0003      	movs	r3, r0
    dc0c:	617b      	str	r3, [r7, #20]

	if (temp_length) {
		length -= temp_length;
		temp_length /= WORD_SIZE;

		while (temp_length--) {
    dc0e:	69bb      	ldr	r3, [r7, #24]
    dc10:	1e5a      	subs	r2, r3, #1
    dc12:	61ba      	str	r2, [r7, #24]
    dc14:	2b00      	cmp	r3, #0
    dc16:	d1ed      	bne.n	dbf4 <crc32_recalculate+0x8c>
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    dc18:	68bb      	ldr	r3, [r7, #8]
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	d016      	beq.n	dc4c <crc32_recalculate+0xe4>
		word = *word_ptr;
    dc1e:	69fb      	ldr	r3, [r7, #28]
    dc20:	681b      	ldr	r3, [r3, #0]
    dc22:	613b      	str	r3, [r7, #16]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    dc24:	68ba      	ldr	r2, [r7, #8]
    dc26:	0013      	movs	r3, r2
    dc28:	075b      	lsls	r3, r3, #29
    dc2a:	1a9b      	subs	r3, r3, r2
    dc2c:	00db      	lsls	r3, r3, #3
    dc2e:	3320      	adds	r3, #32
    dc30:	2201      	movs	r2, #1
    dc32:	4252      	negs	r2, r2
    dc34:	40da      	lsrs	r2, r3
    dc36:	693b      	ldr	r3, [r7, #16]
    dc38:	4013      	ands	r3, r2
    dc3a:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
    dc3c:	68ba      	ldr	r2, [r7, #8]
    dc3e:	6979      	ldr	r1, [r7, #20]
    dc40:	693b      	ldr	r3, [r7, #16]
    dc42:	0018      	movs	r0, r3
    dc44:	4b06      	ldr	r3, [pc, #24]	; (dc60 <crc32_recalculate+0xf8>)
    dc46:	4798      	blx	r3
    dc48:	0003      	movs	r3, r0
    dc4a:	617b      	str	r3, [r7, #20]
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    dc4c:	697b      	ldr	r3, [r7, #20]
    dc4e:	43da      	mvns	r2, r3
    dc50:	687b      	ldr	r3, [r7, #4]
    dc52:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    dc54:	2300      	movs	r3, #0
    dc56:	0018      	movs	r0, r3
    dc58:	46bd      	mov	sp, r7
    dc5a:	b008      	add	sp, #32
    dc5c:	bd80      	pop	{r7, pc}
    dc5e:	46c0      	nop			; (mov r8, r8)
    dc60:	0000db19 	.word	0x0000db19

0000dc64 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    dc64:	b580      	push	{r7, lr}
    dc66:	b084      	sub	sp, #16
    dc68:	af00      	add	r7, sp, #0
    dc6a:	0002      	movs	r2, r0
    dc6c:	1dfb      	adds	r3, r7, #7
    dc6e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    dc70:	230f      	movs	r3, #15
    dc72:	18fb      	adds	r3, r7, r3
    dc74:	1dfa      	adds	r2, r7, #7
    dc76:	7812      	ldrb	r2, [r2, #0]
    dc78:	0952      	lsrs	r2, r2, #5
    dc7a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    dc7c:	230f      	movs	r3, #15
    dc7e:	18fb      	adds	r3, r7, r3
    dc80:	781b      	ldrb	r3, [r3, #0]
    dc82:	2b00      	cmp	r3, #0
    dc84:	d10c      	bne.n	dca0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    dc86:	4b09      	ldr	r3, [pc, #36]	; (dcac <_extint_get_eic_from_channel+0x48>)
    dc88:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    dc8a:	230f      	movs	r3, #15
    dc8c:	18fb      	adds	r3, r7, r3
    dc8e:	781b      	ldrb	r3, [r3, #0]
    dc90:	009b      	lsls	r3, r3, #2
    dc92:	2210      	movs	r2, #16
    dc94:	4694      	mov	ip, r2
    dc96:	44bc      	add	ip, r7
    dc98:	4463      	add	r3, ip
    dc9a:	3b08      	subs	r3, #8
    dc9c:	681b      	ldr	r3, [r3, #0]
    dc9e:	e000      	b.n	dca2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    dca0:	2300      	movs	r3, #0
	}
}
    dca2:	0018      	movs	r0, r3
    dca4:	46bd      	mov	sp, r7
    dca6:	b004      	add	sp, #16
    dca8:	bd80      	pop	{r7, pc}
    dcaa:	46c0      	nop			; (mov r8, r8)
    dcac:	40001800 	.word	0x40001800

0000dcb0 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    dcb0:	b580      	push	{r7, lr}
    dcb2:	b084      	sub	sp, #16
    dcb4:	af00      	add	r7, sp, #0
    dcb6:	0002      	movs	r2, r0
    dcb8:	1dfb      	adds	r3, r7, #7
    dcba:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    dcbc:	1dfb      	adds	r3, r7, #7
    dcbe:	781b      	ldrb	r3, [r3, #0]
    dcc0:	0018      	movs	r0, r3
    dcc2:	4b0b      	ldr	r3, [pc, #44]	; (dcf0 <extint_chan_is_detected+0x40>)
    dcc4:	4798      	blx	r3
    dcc6:	0003      	movs	r3, r0
    dcc8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    dcca:	1dfb      	adds	r3, r7, #7
    dccc:	781b      	ldrb	r3, [r3, #0]
    dcce:	221f      	movs	r2, #31
    dcd0:	4013      	ands	r3, r2
    dcd2:	2201      	movs	r2, #1
    dcd4:	409a      	lsls	r2, r3
    dcd6:	0013      	movs	r3, r2
    dcd8:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    dcda:	68fb      	ldr	r3, [r7, #12]
    dcdc:	691b      	ldr	r3, [r3, #16]
    dcde:	68ba      	ldr	r2, [r7, #8]
    dce0:	4013      	ands	r3, r2
    dce2:	1e5a      	subs	r2, r3, #1
    dce4:	4193      	sbcs	r3, r2
    dce6:	b2db      	uxtb	r3, r3
}
    dce8:	0018      	movs	r0, r3
    dcea:	46bd      	mov	sp, r7
    dcec:	b004      	add	sp, #16
    dcee:	bd80      	pop	{r7, pc}
    dcf0:	0000dc65 	.word	0x0000dc65

0000dcf4 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    dcf4:	b580      	push	{r7, lr}
    dcf6:	b084      	sub	sp, #16
    dcf8:	af00      	add	r7, sp, #0
    dcfa:	0002      	movs	r2, r0
    dcfc:	1dfb      	adds	r3, r7, #7
    dcfe:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    dd00:	1dfb      	adds	r3, r7, #7
    dd02:	781b      	ldrb	r3, [r3, #0]
    dd04:	0018      	movs	r0, r3
    dd06:	4b09      	ldr	r3, [pc, #36]	; (dd2c <extint_chan_clear_detected+0x38>)
    dd08:	4798      	blx	r3
    dd0a:	0003      	movs	r3, r0
    dd0c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    dd0e:	1dfb      	adds	r3, r7, #7
    dd10:	781b      	ldrb	r3, [r3, #0]
    dd12:	221f      	movs	r2, #31
    dd14:	4013      	ands	r3, r2
    dd16:	2201      	movs	r2, #1
    dd18:	409a      	lsls	r2, r3
    dd1a:	0013      	movs	r3, r2
    dd1c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    dd1e:	68fb      	ldr	r3, [r7, #12]
    dd20:	68ba      	ldr	r2, [r7, #8]
    dd22:	611a      	str	r2, [r3, #16]
}
    dd24:	46c0      	nop			; (mov r8, r8)
    dd26:	46bd      	mov	sp, r7
    dd28:	b004      	add	sp, #16
    dd2a:	bd80      	pop	{r7, pc}
    dd2c:	0000dc65 	.word	0x0000dc65

0000dd30 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    dd30:	b580      	push	{r7, lr}
    dd32:	b082      	sub	sp, #8
    dd34:	af00      	add	r7, sp, #0
    dd36:	6078      	str	r0, [r7, #4]
    dd38:	0008      	movs	r0, r1
    dd3a:	0011      	movs	r1, r2
    dd3c:	1cfb      	adds	r3, r7, #3
    dd3e:	1c02      	adds	r2, r0, #0
    dd40:	701a      	strb	r2, [r3, #0]
    dd42:	1cbb      	adds	r3, r7, #2
    dd44:	1c0a      	adds	r2, r1, #0
    dd46:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    dd48:	1cbb      	adds	r3, r7, #2
    dd4a:	781b      	ldrb	r3, [r3, #0]
    dd4c:	2b00      	cmp	r3, #0
    dd4e:	d001      	beq.n	dd54 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    dd50:	2317      	movs	r3, #23
    dd52:	e019      	b.n	dd88 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    dd54:	1cfb      	adds	r3, r7, #3
    dd56:	781a      	ldrb	r2, [r3, #0]
    dd58:	4b0d      	ldr	r3, [pc, #52]	; (dd90 <extint_register_callback+0x60>)
    dd5a:	0092      	lsls	r2, r2, #2
    dd5c:	58d3      	ldr	r3, [r2, r3]
    dd5e:	2b00      	cmp	r3, #0
    dd60:	d107      	bne.n	dd72 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    dd62:	1cfb      	adds	r3, r7, #3
    dd64:	781a      	ldrb	r2, [r3, #0]
    dd66:	4b0a      	ldr	r3, [pc, #40]	; (dd90 <extint_register_callback+0x60>)
    dd68:	0092      	lsls	r2, r2, #2
    dd6a:	6879      	ldr	r1, [r7, #4]
    dd6c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    dd6e:	2300      	movs	r3, #0
    dd70:	e00a      	b.n	dd88 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    dd72:	1cfb      	adds	r3, r7, #3
    dd74:	781a      	ldrb	r2, [r3, #0]
    dd76:	4b06      	ldr	r3, [pc, #24]	; (dd90 <extint_register_callback+0x60>)
    dd78:	0092      	lsls	r2, r2, #2
    dd7a:	58d2      	ldr	r2, [r2, r3]
    dd7c:	687b      	ldr	r3, [r7, #4]
    dd7e:	429a      	cmp	r2, r3
    dd80:	d101      	bne.n	dd86 <extint_register_callback+0x56>
		return STATUS_OK;
    dd82:	2300      	movs	r3, #0
    dd84:	e000      	b.n	dd88 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    dd86:	231d      	movs	r3, #29
}
    dd88:	0018      	movs	r0, r3
    dd8a:	46bd      	mov	sp, r7
    dd8c:	b002      	add	sp, #8
    dd8e:	bd80      	pop	{r7, pc}
    dd90:	2000040c 	.word	0x2000040c

0000dd94 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    dd94:	b580      	push	{r7, lr}
    dd96:	b084      	sub	sp, #16
    dd98:	af00      	add	r7, sp, #0
    dd9a:	0002      	movs	r2, r0
    dd9c:	1dfb      	adds	r3, r7, #7
    dd9e:	701a      	strb	r2, [r3, #0]
    dda0:	1dbb      	adds	r3, r7, #6
    dda2:	1c0a      	adds	r2, r1, #0
    dda4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    dda6:	1dbb      	adds	r3, r7, #6
    dda8:	781b      	ldrb	r3, [r3, #0]
    ddaa:	2b00      	cmp	r3, #0
    ddac:	d10e      	bne.n	ddcc <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    ddae:	1dfb      	adds	r3, r7, #7
    ddb0:	781b      	ldrb	r3, [r3, #0]
    ddb2:	0018      	movs	r0, r3
    ddb4:	4b08      	ldr	r3, [pc, #32]	; (ddd8 <extint_chan_enable_callback+0x44>)
    ddb6:	4798      	blx	r3
    ddb8:	0003      	movs	r3, r0
    ddba:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    ddbc:	1dfb      	adds	r3, r7, #7
    ddbe:	781b      	ldrb	r3, [r3, #0]
    ddc0:	2201      	movs	r2, #1
    ddc2:	409a      	lsls	r2, r3
    ddc4:	68fb      	ldr	r3, [r7, #12]
    ddc6:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    ddc8:	2300      	movs	r3, #0
    ddca:	e000      	b.n	ddce <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    ddcc:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    ddce:	0018      	movs	r0, r3
    ddd0:	46bd      	mov	sp, r7
    ddd2:	b004      	add	sp, #16
    ddd4:	bd80      	pop	{r7, pc}
    ddd6:	46c0      	nop			; (mov r8, r8)
    ddd8:	0000dc65 	.word	0x0000dc65

0000dddc <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    dddc:	b580      	push	{r7, lr}
    ddde:	b084      	sub	sp, #16
    dde0:	af00      	add	r7, sp, #0
    dde2:	0002      	movs	r2, r0
    dde4:	1dfb      	adds	r3, r7, #7
    dde6:	701a      	strb	r2, [r3, #0]
    dde8:	1dbb      	adds	r3, r7, #6
    ddea:	1c0a      	adds	r2, r1, #0
    ddec:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    ddee:	1dbb      	adds	r3, r7, #6
    ddf0:	781b      	ldrb	r3, [r3, #0]
    ddf2:	2b00      	cmp	r3, #0
    ddf4:	d10e      	bne.n	de14 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    ddf6:	1dfb      	adds	r3, r7, #7
    ddf8:	781b      	ldrb	r3, [r3, #0]
    ddfa:	0018      	movs	r0, r3
    ddfc:	4b08      	ldr	r3, [pc, #32]	; (de20 <extint_chan_disable_callback+0x44>)
    ddfe:	4798      	blx	r3
    de00:	0003      	movs	r3, r0
    de02:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    de04:	1dfb      	adds	r3, r7, #7
    de06:	781b      	ldrb	r3, [r3, #0]
    de08:	2201      	movs	r2, #1
    de0a:	409a      	lsls	r2, r3
    de0c:	68fb      	ldr	r3, [r7, #12]
    de0e:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    de10:	2300      	movs	r3, #0
    de12:	e000      	b.n	de16 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    de14:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    de16:	0018      	movs	r0, r3
    de18:	46bd      	mov	sp, r7
    de1a:	b004      	add	sp, #16
    de1c:	bd80      	pop	{r7, pc}
    de1e:	46c0      	nop			; (mov r8, r8)
    de20:	0000dc65 	.word	0x0000dc65

0000de24 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    de24:	b580      	push	{r7, lr}
    de26:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    de28:	4b15      	ldr	r3, [pc, #84]	; (de80 <EIC_Handler+0x5c>)
    de2a:	2200      	movs	r2, #0
    de2c:	701a      	strb	r2, [r3, #0]
    de2e:	e020      	b.n	de72 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    de30:	4b13      	ldr	r3, [pc, #76]	; (de80 <EIC_Handler+0x5c>)
    de32:	781b      	ldrb	r3, [r3, #0]
    de34:	0018      	movs	r0, r3
    de36:	4b13      	ldr	r3, [pc, #76]	; (de84 <EIC_Handler+0x60>)
    de38:	4798      	blx	r3
    de3a:	1e03      	subs	r3, r0, #0
    de3c:	d013      	beq.n	de66 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    de3e:	4b10      	ldr	r3, [pc, #64]	; (de80 <EIC_Handler+0x5c>)
    de40:	781b      	ldrb	r3, [r3, #0]
    de42:	0018      	movs	r0, r3
    de44:	4b10      	ldr	r3, [pc, #64]	; (de88 <EIC_Handler+0x64>)
    de46:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    de48:	4b0d      	ldr	r3, [pc, #52]	; (de80 <EIC_Handler+0x5c>)
    de4a:	781b      	ldrb	r3, [r3, #0]
    de4c:	001a      	movs	r2, r3
    de4e:	4b0f      	ldr	r3, [pc, #60]	; (de8c <EIC_Handler+0x68>)
    de50:	0092      	lsls	r2, r2, #2
    de52:	58d3      	ldr	r3, [r2, r3]
    de54:	2b00      	cmp	r3, #0
    de56:	d006      	beq.n	de66 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    de58:	4b09      	ldr	r3, [pc, #36]	; (de80 <EIC_Handler+0x5c>)
    de5a:	781b      	ldrb	r3, [r3, #0]
    de5c:	001a      	movs	r2, r3
    de5e:	4b0b      	ldr	r3, [pc, #44]	; (de8c <EIC_Handler+0x68>)
    de60:	0092      	lsls	r2, r2, #2
    de62:	58d3      	ldr	r3, [r2, r3]
    de64:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    de66:	4b06      	ldr	r3, [pc, #24]	; (de80 <EIC_Handler+0x5c>)
    de68:	781b      	ldrb	r3, [r3, #0]
    de6a:	3301      	adds	r3, #1
    de6c:	b2da      	uxtb	r2, r3
    de6e:	4b04      	ldr	r3, [pc, #16]	; (de80 <EIC_Handler+0x5c>)
    de70:	701a      	strb	r2, [r3, #0]
    de72:	4b03      	ldr	r3, [pc, #12]	; (de80 <EIC_Handler+0x5c>)
    de74:	781b      	ldrb	r3, [r3, #0]
    de76:	2b0f      	cmp	r3, #15
    de78:	d9da      	bls.n	de30 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    de7a:	46c0      	nop			; (mov r8, r8)
    de7c:	46bd      	mov	sp, r7
    de7e:	bd80      	pop	{r7, pc}
    de80:	20000408 	.word	0x20000408
    de84:	0000dcb1 	.word	0x0000dcb1
    de88:	0000dcf5 	.word	0x0000dcf5
    de8c:	2000040c 	.word	0x2000040c

0000de90 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    de90:	b580      	push	{r7, lr}
    de92:	b082      	sub	sp, #8
    de94:	af00      	add	r7, sp, #0
    de96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    de98:	687b      	ldr	r3, [r7, #4]
    de9a:	2200      	movs	r2, #0
    de9c:	701a      	strb	r2, [r3, #0]
}
    de9e:	46c0      	nop			; (mov r8, r8)
    dea0:	46bd      	mov	sp, r7
    dea2:	b002      	add	sp, #8
    dea4:	bd80      	pop	{r7, pc}
    dea6:	46c0      	nop			; (mov r8, r8)

0000dea8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    dea8:	b580      	push	{r7, lr}
    deaa:	b082      	sub	sp, #8
    deac:	af00      	add	r7, sp, #0
    deae:	0002      	movs	r2, r0
    deb0:	6039      	str	r1, [r7, #0]
    deb2:	1dfb      	adds	r3, r7, #7
    deb4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    deb6:	1dfb      	adds	r3, r7, #7
    deb8:	781b      	ldrb	r3, [r3, #0]
    deba:	2b01      	cmp	r3, #1
    debc:	d00a      	beq.n	ded4 <system_apb_clock_set_mask+0x2c>
    debe:	2b02      	cmp	r3, #2
    dec0:	d00f      	beq.n	dee2 <system_apb_clock_set_mask+0x3a>
    dec2:	2b00      	cmp	r3, #0
    dec4:	d114      	bne.n	def0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    dec6:	4b0e      	ldr	r3, [pc, #56]	; (df00 <system_apb_clock_set_mask+0x58>)
    dec8:	4a0d      	ldr	r2, [pc, #52]	; (df00 <system_apb_clock_set_mask+0x58>)
    deca:	6991      	ldr	r1, [r2, #24]
    decc:	683a      	ldr	r2, [r7, #0]
    dece:	430a      	orrs	r2, r1
    ded0:	619a      	str	r2, [r3, #24]
			break;
    ded2:	e00f      	b.n	def4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    ded4:	4b0a      	ldr	r3, [pc, #40]	; (df00 <system_apb_clock_set_mask+0x58>)
    ded6:	4a0a      	ldr	r2, [pc, #40]	; (df00 <system_apb_clock_set_mask+0x58>)
    ded8:	69d1      	ldr	r1, [r2, #28]
    deda:	683a      	ldr	r2, [r7, #0]
    dedc:	430a      	orrs	r2, r1
    dede:	61da      	str	r2, [r3, #28]
			break;
    dee0:	e008      	b.n	def4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    dee2:	4b07      	ldr	r3, [pc, #28]	; (df00 <system_apb_clock_set_mask+0x58>)
    dee4:	4a06      	ldr	r2, [pc, #24]	; (df00 <system_apb_clock_set_mask+0x58>)
    dee6:	6a11      	ldr	r1, [r2, #32]
    dee8:	683a      	ldr	r2, [r7, #0]
    deea:	430a      	orrs	r2, r1
    deec:	621a      	str	r2, [r3, #32]
			break;
    deee:	e001      	b.n	def4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    def0:	2317      	movs	r3, #23
    def2:	e000      	b.n	def6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    def4:	2300      	movs	r3, #0
}
    def6:	0018      	movs	r0, r3
    def8:	46bd      	mov	sp, r7
    defa:	b002      	add	sp, #8
    defc:	bd80      	pop	{r7, pc}
    defe:	46c0      	nop			; (mov r8, r8)
    df00:	40000400 	.word	0x40000400

0000df04 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    df04:	b580      	push	{r7, lr}
    df06:	b082      	sub	sp, #8
    df08:	af00      	add	r7, sp, #0
    df0a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    df0c:	687b      	ldr	r3, [r7, #4]
    df0e:	2280      	movs	r2, #128	; 0x80
    df10:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    df12:	687b      	ldr	r3, [r7, #4]
    df14:	2200      	movs	r2, #0
    df16:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    df18:	687b      	ldr	r3, [r7, #4]
    df1a:	2201      	movs	r2, #1
    df1c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    df1e:	687b      	ldr	r3, [r7, #4]
    df20:	2200      	movs	r2, #0
    df22:	70da      	strb	r2, [r3, #3]
}
    df24:	46c0      	nop			; (mov r8, r8)
    df26:	46bd      	mov	sp, r7
    df28:	b002      	add	sp, #8
    df2a:	bd80      	pop	{r7, pc}

0000df2c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    df2c:	b580      	push	{r7, lr}
    df2e:	b082      	sub	sp, #8
    df30:	af00      	add	r7, sp, #0
    df32:	0002      	movs	r2, r0
    df34:	1dfb      	adds	r3, r7, #7
    df36:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    df38:	4b06      	ldr	r3, [pc, #24]	; (df54 <system_interrupt_enable+0x28>)
    df3a:	1dfa      	adds	r2, r7, #7
    df3c:	7812      	ldrb	r2, [r2, #0]
    df3e:	0011      	movs	r1, r2
    df40:	221f      	movs	r2, #31
    df42:	400a      	ands	r2, r1
    df44:	2101      	movs	r1, #1
    df46:	4091      	lsls	r1, r2
    df48:	000a      	movs	r2, r1
    df4a:	601a      	str	r2, [r3, #0]
}
    df4c:	46c0      	nop			; (mov r8, r8)
    df4e:	46bd      	mov	sp, r7
    df50:	b002      	add	sp, #8
    df52:	bd80      	pop	{r7, pc}
    df54:	e000e100 	.word	0xe000e100

0000df58 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    df58:	b580      	push	{r7, lr}
    df5a:	b084      	sub	sp, #16
    df5c:	af00      	add	r7, sp, #0
    df5e:	0002      	movs	r2, r0
    df60:	1dfb      	adds	r3, r7, #7
    df62:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    df64:	230f      	movs	r3, #15
    df66:	18fb      	adds	r3, r7, r3
    df68:	1dfa      	adds	r2, r7, #7
    df6a:	7812      	ldrb	r2, [r2, #0]
    df6c:	0952      	lsrs	r2, r2, #5
    df6e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    df70:	230f      	movs	r3, #15
    df72:	18fb      	adds	r3, r7, r3
    df74:	781b      	ldrb	r3, [r3, #0]
    df76:	2b00      	cmp	r3, #0
    df78:	d10c      	bne.n	df94 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    df7a:	4b09      	ldr	r3, [pc, #36]	; (dfa0 <_extint_get_eic_from_channel+0x48>)
    df7c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    df7e:	230f      	movs	r3, #15
    df80:	18fb      	adds	r3, r7, r3
    df82:	781b      	ldrb	r3, [r3, #0]
    df84:	009b      	lsls	r3, r3, #2
    df86:	2210      	movs	r2, #16
    df88:	4694      	mov	ip, r2
    df8a:	44bc      	add	ip, r7
    df8c:	4463      	add	r3, ip
    df8e:	3b08      	subs	r3, #8
    df90:	681b      	ldr	r3, [r3, #0]
    df92:	e000      	b.n	df96 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    df94:	2300      	movs	r3, #0
	}
}
    df96:	0018      	movs	r0, r3
    df98:	46bd      	mov	sp, r7
    df9a:	b004      	add	sp, #16
    df9c:	bd80      	pop	{r7, pc}
    df9e:	46c0      	nop			; (mov r8, r8)
    dfa0:	40001800 	.word	0x40001800

0000dfa4 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    dfa4:	b580      	push	{r7, lr}
    dfa6:	b082      	sub	sp, #8
    dfa8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    dfaa:	4b0f      	ldr	r3, [pc, #60]	; (dfe8 <extint_is_syncing+0x44>)
    dfac:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    dfae:	2300      	movs	r3, #0
    dfb0:	607b      	str	r3, [r7, #4]
    dfb2:	e011      	b.n	dfd8 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    dfb4:	687b      	ldr	r3, [r7, #4]
    dfb6:	009b      	lsls	r3, r3, #2
    dfb8:	2208      	movs	r2, #8
    dfba:	4694      	mov	ip, r2
    dfbc:	44bc      	add	ip, r7
    dfbe:	4463      	add	r3, ip
    dfc0:	3b08      	subs	r3, #8
    dfc2:	681b      	ldr	r3, [r3, #0]
    dfc4:	785b      	ldrb	r3, [r3, #1]
    dfc6:	b2db      	uxtb	r3, r3
    dfc8:	b25b      	sxtb	r3, r3
    dfca:	2b00      	cmp	r3, #0
    dfcc:	da01      	bge.n	dfd2 <extint_is_syncing+0x2e>
			return true;
    dfce:	2301      	movs	r3, #1
    dfd0:	e006      	b.n	dfe0 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    dfd2:	687b      	ldr	r3, [r7, #4]
    dfd4:	3301      	adds	r3, #1
    dfd6:	607b      	str	r3, [r7, #4]
    dfd8:	687b      	ldr	r3, [r7, #4]
    dfda:	2b00      	cmp	r3, #0
    dfdc:	d0ea      	beq.n	dfb4 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    dfde:	2300      	movs	r3, #0
}
    dfe0:	0018      	movs	r0, r3
    dfe2:	46bd      	mov	sp, r7
    dfe4:	b002      	add	sp, #8
    dfe6:	bd80      	pop	{r7, pc}
    dfe8:	40001800 	.word	0x40001800

0000dfec <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    dfec:	b580      	push	{r7, lr}
    dfee:	b084      	sub	sp, #16
    dff0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    dff2:	4b2d      	ldr	r3, [pc, #180]	; (e0a8 <_system_extint_init+0xbc>)
    dff4:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    dff6:	2140      	movs	r1, #64	; 0x40
    dff8:	2000      	movs	r0, #0
    dffa:	4b2c      	ldr	r3, [pc, #176]	; (e0ac <_system_extint_init+0xc0>)
    dffc:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    dffe:	003b      	movs	r3, r7
    e000:	0018      	movs	r0, r3
    e002:	4b2b      	ldr	r3, [pc, #172]	; (e0b0 <_system_extint_init+0xc4>)
    e004:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    e006:	003b      	movs	r3, r7
    e008:	2200      	movs	r2, #0
    e00a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    e00c:	003b      	movs	r3, r7
    e00e:	0019      	movs	r1, r3
    e010:	2005      	movs	r0, #5
    e012:	4b28      	ldr	r3, [pc, #160]	; (e0b4 <_system_extint_init+0xc8>)
    e014:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    e016:	2005      	movs	r0, #5
    e018:	4b27      	ldr	r3, [pc, #156]	; (e0b8 <_system_extint_init+0xcc>)
    e01a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    e01c:	2300      	movs	r3, #0
    e01e:	60fb      	str	r3, [r7, #12]
    e020:	e018      	b.n	e054 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    e022:	68fb      	ldr	r3, [r7, #12]
    e024:	009b      	lsls	r3, r3, #2
    e026:	2210      	movs	r2, #16
    e028:	4694      	mov	ip, r2
    e02a:	44bc      	add	ip, r7
    e02c:	4463      	add	r3, ip
    e02e:	3b0c      	subs	r3, #12
    e030:	681a      	ldr	r2, [r3, #0]
    e032:	68fb      	ldr	r3, [r7, #12]
    e034:	009b      	lsls	r3, r3, #2
    e036:	2110      	movs	r1, #16
    e038:	468c      	mov	ip, r1
    e03a:	44bc      	add	ip, r7
    e03c:	4463      	add	r3, ip
    e03e:	3b0c      	subs	r3, #12
    e040:	681b      	ldr	r3, [r3, #0]
    e042:	781b      	ldrb	r3, [r3, #0]
    e044:	b2db      	uxtb	r3, r3
    e046:	2101      	movs	r1, #1
    e048:	430b      	orrs	r3, r1
    e04a:	b2db      	uxtb	r3, r3
    e04c:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    e04e:	68fb      	ldr	r3, [r7, #12]
    e050:	3301      	adds	r3, #1
    e052:	60fb      	str	r3, [r7, #12]
    e054:	68fb      	ldr	r3, [r7, #12]
    e056:	2b00      	cmp	r3, #0
    e058:	d0e3      	beq.n	e022 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    e05a:	46c0      	nop			; (mov r8, r8)
    e05c:	4b17      	ldr	r3, [pc, #92]	; (e0bc <_system_extint_init+0xd0>)
    e05e:	4798      	blx	r3
    e060:	1e03      	subs	r3, r0, #0
    e062:	d1fb      	bne.n	e05c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    e064:	230b      	movs	r3, #11
    e066:	18fb      	adds	r3, r7, r3
    e068:	2200      	movs	r2, #0
    e06a:	701a      	strb	r2, [r3, #0]
    e06c:	e00d      	b.n	e08a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    e06e:	230b      	movs	r3, #11
    e070:	18fb      	adds	r3, r7, r3
    e072:	781a      	ldrb	r2, [r3, #0]
    e074:	4b12      	ldr	r3, [pc, #72]	; (e0c0 <_system_extint_init+0xd4>)
    e076:	0092      	lsls	r2, r2, #2
    e078:	2100      	movs	r1, #0
    e07a:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    e07c:	230b      	movs	r3, #11
    e07e:	18fb      	adds	r3, r7, r3
    e080:	781a      	ldrb	r2, [r3, #0]
    e082:	230b      	movs	r3, #11
    e084:	18fb      	adds	r3, r7, r3
    e086:	3201      	adds	r2, #1
    e088:	701a      	strb	r2, [r3, #0]
    e08a:	230b      	movs	r3, #11
    e08c:	18fb      	adds	r3, r7, r3
    e08e:	781b      	ldrb	r3, [r3, #0]
    e090:	2b0f      	cmp	r3, #15
    e092:	d9ec      	bls.n	e06e <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    e094:	2004      	movs	r0, #4
    e096:	4b0b      	ldr	r3, [pc, #44]	; (e0c4 <_system_extint_init+0xd8>)
    e098:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    e09a:	4b0b      	ldr	r3, [pc, #44]	; (e0c8 <_system_extint_init+0xdc>)
    e09c:	4798      	blx	r3
}
    e09e:	46c0      	nop			; (mov r8, r8)
    e0a0:	46bd      	mov	sp, r7
    e0a2:	b004      	add	sp, #16
    e0a4:	bd80      	pop	{r7, pc}
    e0a6:	46c0      	nop			; (mov r8, r8)
    e0a8:	40001800 	.word	0x40001800
    e0ac:	0000dea9 	.word	0x0000dea9
    e0b0:	0000de91 	.word	0x0000de91
    e0b4:	00015261 	.word	0x00015261
    e0b8:	000152a5 	.word	0x000152a5
    e0bc:	0000dfa5 	.word	0x0000dfa5
    e0c0:	2000040c 	.word	0x2000040c
    e0c4:	0000df2d 	.word	0x0000df2d
    e0c8:	0000e0cd 	.word	0x0000e0cd

0000e0cc <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    e0cc:	b580      	push	{r7, lr}
    e0ce:	b082      	sub	sp, #8
    e0d0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    e0d2:	4b15      	ldr	r3, [pc, #84]	; (e128 <_extint_enable+0x5c>)
    e0d4:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    e0d6:	2300      	movs	r3, #0
    e0d8:	607b      	str	r3, [r7, #4]
    e0da:	e018      	b.n	e10e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    e0dc:	687b      	ldr	r3, [r7, #4]
    e0de:	009b      	lsls	r3, r3, #2
    e0e0:	2208      	movs	r2, #8
    e0e2:	4694      	mov	ip, r2
    e0e4:	44bc      	add	ip, r7
    e0e6:	4463      	add	r3, ip
    e0e8:	3b08      	subs	r3, #8
    e0ea:	681a      	ldr	r2, [r3, #0]
    e0ec:	687b      	ldr	r3, [r7, #4]
    e0ee:	009b      	lsls	r3, r3, #2
    e0f0:	2108      	movs	r1, #8
    e0f2:	468c      	mov	ip, r1
    e0f4:	44bc      	add	ip, r7
    e0f6:	4463      	add	r3, ip
    e0f8:	3b08      	subs	r3, #8
    e0fa:	681b      	ldr	r3, [r3, #0]
    e0fc:	781b      	ldrb	r3, [r3, #0]
    e0fe:	b2db      	uxtb	r3, r3
    e100:	2102      	movs	r1, #2
    e102:	430b      	orrs	r3, r1
    e104:	b2db      	uxtb	r3, r3
    e106:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    e108:	687b      	ldr	r3, [r7, #4]
    e10a:	3301      	adds	r3, #1
    e10c:	607b      	str	r3, [r7, #4]
    e10e:	687b      	ldr	r3, [r7, #4]
    e110:	2b00      	cmp	r3, #0
    e112:	d0e3      	beq.n	e0dc <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    e114:	46c0      	nop			; (mov r8, r8)
    e116:	4b05      	ldr	r3, [pc, #20]	; (e12c <_extint_enable+0x60>)
    e118:	4798      	blx	r3
    e11a:	1e03      	subs	r3, r0, #0
    e11c:	d1fb      	bne.n	e116 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    e11e:	46c0      	nop			; (mov r8, r8)
    e120:	46bd      	mov	sp, r7
    e122:	b002      	add	sp, #8
    e124:	bd80      	pop	{r7, pc}
    e126:	46c0      	nop			; (mov r8, r8)
    e128:	40001800 	.word	0x40001800
    e12c:	0000dfa5 	.word	0x0000dfa5

0000e130 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    e130:	b580      	push	{r7, lr}
    e132:	b082      	sub	sp, #8
    e134:	af00      	add	r7, sp, #0
    e136:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    e138:	687b      	ldr	r3, [r7, #4]
    e13a:	2200      	movs	r2, #0
    e13c:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    e13e:	687b      	ldr	r3, [r7, #4]
    e140:	2200      	movs	r2, #0
    e142:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    e144:	687b      	ldr	r3, [r7, #4]
    e146:	2201      	movs	r2, #1
    e148:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    e14a:	687b      	ldr	r3, [r7, #4]
    e14c:	2201      	movs	r2, #1
    e14e:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    e150:	687b      	ldr	r3, [r7, #4]
    e152:	2200      	movs	r2, #0
    e154:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    e156:	687b      	ldr	r3, [r7, #4]
    e158:	2202      	movs	r2, #2
    e15a:	72da      	strb	r2, [r3, #11]
}
    e15c:	46c0      	nop			; (mov r8, r8)
    e15e:	46bd      	mov	sp, r7
    e160:	b002      	add	sp, #8
    e162:	bd80      	pop	{r7, pc}

0000e164 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    e164:	b580      	push	{r7, lr}
    e166:	b086      	sub	sp, #24
    e168:	af00      	add	r7, sp, #0
    e16a:	0002      	movs	r2, r0
    e16c:	6039      	str	r1, [r7, #0]
    e16e:	1dfb      	adds	r3, r7, #7
    e170:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    e172:	2308      	movs	r3, #8
    e174:	18fb      	adds	r3, r7, r3
    e176:	0018      	movs	r0, r3
    e178:	4b36      	ldr	r3, [pc, #216]	; (e254 <extint_chan_set_config+0xf0>)
    e17a:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    e17c:	683b      	ldr	r3, [r7, #0]
    e17e:	685b      	ldr	r3, [r3, #4]
    e180:	b2da      	uxtb	r2, r3
    e182:	2308      	movs	r3, #8
    e184:	18fb      	adds	r3, r7, r3
    e186:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    e188:	2308      	movs	r3, #8
    e18a:	18fb      	adds	r3, r7, r3
    e18c:	2200      	movs	r2, #0
    e18e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    e190:	683b      	ldr	r3, [r7, #0]
    e192:	7a1a      	ldrb	r2, [r3, #8]
    e194:	2308      	movs	r3, #8
    e196:	18fb      	adds	r3, r7, r3
    e198:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    e19a:	683b      	ldr	r3, [r7, #0]
    e19c:	681b      	ldr	r3, [r3, #0]
    e19e:	b2db      	uxtb	r3, r3
    e1a0:	2208      	movs	r2, #8
    e1a2:	18ba      	adds	r2, r7, r2
    e1a4:	0011      	movs	r1, r2
    e1a6:	0018      	movs	r0, r3
    e1a8:	4b2b      	ldr	r3, [pc, #172]	; (e258 <extint_chan_set_config+0xf4>)
    e1aa:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    e1ac:	1dfb      	adds	r3, r7, #7
    e1ae:	781b      	ldrb	r3, [r3, #0]
    e1b0:	0018      	movs	r0, r3
    e1b2:	4b2a      	ldr	r3, [pc, #168]	; (e25c <extint_chan_set_config+0xf8>)
    e1b4:	4798      	blx	r3
    e1b6:	0003      	movs	r3, r0
    e1b8:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    e1ba:	1dfb      	adds	r3, r7, #7
    e1bc:	781b      	ldrb	r3, [r3, #0]
    e1be:	2207      	movs	r2, #7
    e1c0:	4013      	ands	r3, r2
    e1c2:	009b      	lsls	r3, r3, #2
    e1c4:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    e1c6:	683b      	ldr	r3, [r7, #0]
    e1c8:	7adb      	ldrb	r3, [r3, #11]
    e1ca:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    e1cc:	683b      	ldr	r3, [r7, #0]
    e1ce:	7a9b      	ldrb	r3, [r3, #10]
    e1d0:	2b00      	cmp	r3, #0
    e1d2:	d003      	beq.n	e1dc <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    e1d4:	697b      	ldr	r3, [r7, #20]
    e1d6:	2208      	movs	r2, #8
    e1d8:	4313      	orrs	r3, r2
    e1da:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    e1dc:	1dfb      	adds	r3, r7, #7
    e1de:	781b      	ldrb	r3, [r3, #0]
    e1e0:	08db      	lsrs	r3, r3, #3
    e1e2:	b2db      	uxtb	r3, r3
    e1e4:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    e1e6:	1dfb      	adds	r3, r7, #7
    e1e8:	781b      	ldrb	r3, [r3, #0]
    e1ea:	08db      	lsrs	r3, r3, #3
    e1ec:	b2db      	uxtb	r3, r3
    e1ee:	001a      	movs	r2, r3
    e1f0:	693b      	ldr	r3, [r7, #16]
    e1f2:	3206      	adds	r2, #6
    e1f4:	0092      	lsls	r2, r2, #2
    e1f6:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    e1f8:	210f      	movs	r1, #15
    e1fa:	68fa      	ldr	r2, [r7, #12]
    e1fc:	4091      	lsls	r1, r2
    e1fe:	000a      	movs	r2, r1
    e200:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    e202:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    e204:	6979      	ldr	r1, [r7, #20]
    e206:	68fb      	ldr	r3, [r7, #12]
    e208:	4099      	lsls	r1, r3
    e20a:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    e20c:	431a      	orrs	r2, r3
    e20e:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    e210:	693b      	ldr	r3, [r7, #16]
    e212:	1d82      	adds	r2, r0, #6
    e214:	0092      	lsls	r2, r2, #2
    e216:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    e218:	683b      	ldr	r3, [r7, #0]
    e21a:	7a5b      	ldrb	r3, [r3, #9]
    e21c:	2b00      	cmp	r3, #0
    e21e:	d00a      	beq.n	e236 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    e220:	693b      	ldr	r3, [r7, #16]
    e222:	695a      	ldr	r2, [r3, #20]
    e224:	1dfb      	adds	r3, r7, #7
    e226:	781b      	ldrb	r3, [r3, #0]
    e228:	2101      	movs	r1, #1
    e22a:	4099      	lsls	r1, r3
    e22c:	000b      	movs	r3, r1
    e22e:	431a      	orrs	r2, r3
    e230:	693b      	ldr	r3, [r7, #16]
    e232:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    e234:	e00a      	b.n	e24c <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    e236:	693b      	ldr	r3, [r7, #16]
    e238:	695b      	ldr	r3, [r3, #20]
    e23a:	1dfa      	adds	r2, r7, #7
    e23c:	7812      	ldrb	r2, [r2, #0]
    e23e:	2101      	movs	r1, #1
    e240:	4091      	lsls	r1, r2
    e242:	000a      	movs	r2, r1
    e244:	43d2      	mvns	r2, r2
    e246:	401a      	ands	r2, r3
    e248:	693b      	ldr	r3, [r7, #16]
    e24a:	615a      	str	r2, [r3, #20]
	}
}
    e24c:	46c0      	nop			; (mov r8, r8)
    e24e:	46bd      	mov	sp, r7
    e250:	b006      	add	sp, #24
    e252:	bd80      	pop	{r7, pc}
    e254:	0000df05 	.word	0x0000df05
    e258:	0001554d 	.word	0x0001554d
    e25c:	0000df59 	.word	0x0000df59

0000e260 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    e260:	b580      	push	{r7, lr}
    e262:	b086      	sub	sp, #24
    e264:	af00      	add	r7, sp, #0
    e266:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    e268:	4b28      	ldr	r3, [pc, #160]	; (e30c <_rtc_interrupt_handler+0xac>)
    e26a:	687a      	ldr	r2, [r7, #4]
    e26c:	0092      	lsls	r2, r2, #2
    e26e:	58d3      	ldr	r3, [r2, r3]
    e270:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    e272:	697b      	ldr	r3, [r7, #20]
    e274:	681b      	ldr	r3, [r3, #0]
    e276:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    e278:	230e      	movs	r3, #14
    e27a:	18fb      	adds	r3, r7, r3
    e27c:	697a      	ldr	r2, [r7, #20]
    e27e:	8a52      	ldrh	r2, [r2, #18]
    e280:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    e282:	697b      	ldr	r3, [r7, #20]
    e284:	8a1b      	ldrh	r3, [r3, #16]
    e286:	b29a      	uxth	r2, r3
    e288:	230e      	movs	r3, #14
    e28a:	18fb      	adds	r3, r7, r3
    e28c:	210e      	movs	r1, #14
    e28e:	1879      	adds	r1, r7, r1
    e290:	8809      	ldrh	r1, [r1, #0]
    e292:	400a      	ands	r2, r1
    e294:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    e296:	693b      	ldr	r3, [r7, #16]
    e298:	7a1b      	ldrb	r3, [r3, #8]
    e29a:	b2da      	uxtb	r2, r3
    e29c:	230c      	movs	r3, #12
    e29e:	18fb      	adds	r3, r7, r3
    e2a0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    e2a2:	693b      	ldr	r3, [r7, #16]
    e2a4:	79db      	ldrb	r3, [r3, #7]
    e2a6:	b2db      	uxtb	r3, r3
    e2a8:	b29a      	uxth	r2, r3
    e2aa:	230c      	movs	r3, #12
    e2ac:	18fb      	adds	r3, r7, r3
    e2ae:	210c      	movs	r1, #12
    e2b0:	1879      	adds	r1, r7, r1
    e2b2:	8809      	ldrh	r1, [r1, #0]
    e2b4:	400a      	ands	r2, r1
    e2b6:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    e2b8:	230c      	movs	r3, #12
    e2ba:	18fb      	adds	r3, r7, r3
    e2bc:	881b      	ldrh	r3, [r3, #0]
    e2be:	2280      	movs	r2, #128	; 0x80
    e2c0:	4013      	ands	r3, r2
    e2c2:	d00c      	beq.n	e2de <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    e2c4:	230e      	movs	r3, #14
    e2c6:	18fb      	adds	r3, r7, r3
    e2c8:	881b      	ldrh	r3, [r3, #0]
    e2ca:	2202      	movs	r2, #2
    e2cc:	4013      	ands	r3, r2
    e2ce:	d002      	beq.n	e2d6 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    e2d0:	697b      	ldr	r3, [r7, #20]
    e2d2:	68db      	ldr	r3, [r3, #12]
    e2d4:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    e2d6:	693b      	ldr	r3, [r7, #16]
    e2d8:	2280      	movs	r2, #128	; 0x80
    e2da:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    e2dc:	e011      	b.n	e302 <_rtc_interrupt_handler+0xa2>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    e2de:	230c      	movs	r3, #12
    e2e0:	18fb      	adds	r3, r7, r3
    e2e2:	881b      	ldrh	r3, [r3, #0]
    e2e4:	2201      	movs	r2, #1
    e2e6:	4013      	ands	r3, r2
    e2e8:	d00b      	beq.n	e302 <_rtc_interrupt_handler+0xa2>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    e2ea:	230e      	movs	r3, #14
    e2ec:	18fb      	adds	r3, r7, r3
    e2ee:	881b      	ldrh	r3, [r3, #0]
    e2f0:	2201      	movs	r2, #1
    e2f2:	4013      	ands	r3, r2
    e2f4:	d002      	beq.n	e2fc <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    e2f6:	697b      	ldr	r3, [r7, #20]
    e2f8:	689b      	ldr	r3, [r3, #8]
    e2fa:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    e2fc:	693b      	ldr	r3, [r7, #16]
    e2fe:	2201      	movs	r2, #1
    e300:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    e302:	46c0      	nop			; (mov r8, r8)
    e304:	46bd      	mov	sp, r7
    e306:	b006      	add	sp, #24
    e308:	bd80      	pop	{r7, pc}
    e30a:	46c0      	nop			; (mov r8, r8)
    e30c:	2000044c 	.word	0x2000044c

0000e310 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    e310:	b580      	push	{r7, lr}
    e312:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    e314:	2000      	movs	r0, #0
    e316:	4b02      	ldr	r3, [pc, #8]	; (e320 <RTC_Handler+0x10>)
    e318:	4798      	blx	r3
}
    e31a:	46c0      	nop			; (mov r8, r8)
    e31c:	46bd      	mov	sp, r7
    e31e:	bd80      	pop	{r7, pc}
    e320:	0000e261 	.word	0x0000e261

0000e324 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    e324:	b580      	push	{r7, lr}
    e326:	b082      	sub	sp, #8
    e328:	af00      	add	r7, sp, #0
    e32a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    e32c:	687b      	ldr	r3, [r7, #4]
    e32e:	2200      	movs	r2, #0
    e330:	701a      	strb	r2, [r3, #0]
}
    e332:	46c0      	nop			; (mov r8, r8)
    e334:	46bd      	mov	sp, r7
    e336:	b002      	add	sp, #8
    e338:	bd80      	pop	{r7, pc}
    e33a:	46c0      	nop			; (mov r8, r8)

0000e33c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    e33c:	b580      	push	{r7, lr}
    e33e:	b082      	sub	sp, #8
    e340:	af00      	add	r7, sp, #0
    e342:	0002      	movs	r2, r0
    e344:	6039      	str	r1, [r7, #0]
    e346:	1dfb      	adds	r3, r7, #7
    e348:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    e34a:	1dfb      	adds	r3, r7, #7
    e34c:	781b      	ldrb	r3, [r3, #0]
    e34e:	2b01      	cmp	r3, #1
    e350:	d00a      	beq.n	e368 <system_apb_clock_set_mask+0x2c>
    e352:	2b02      	cmp	r3, #2
    e354:	d00f      	beq.n	e376 <system_apb_clock_set_mask+0x3a>
    e356:	2b00      	cmp	r3, #0
    e358:	d114      	bne.n	e384 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    e35a:	4b0e      	ldr	r3, [pc, #56]	; (e394 <system_apb_clock_set_mask+0x58>)
    e35c:	4a0d      	ldr	r2, [pc, #52]	; (e394 <system_apb_clock_set_mask+0x58>)
    e35e:	6991      	ldr	r1, [r2, #24]
    e360:	683a      	ldr	r2, [r7, #0]
    e362:	430a      	orrs	r2, r1
    e364:	619a      	str	r2, [r3, #24]
			break;
    e366:	e00f      	b.n	e388 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    e368:	4b0a      	ldr	r3, [pc, #40]	; (e394 <system_apb_clock_set_mask+0x58>)
    e36a:	4a0a      	ldr	r2, [pc, #40]	; (e394 <system_apb_clock_set_mask+0x58>)
    e36c:	69d1      	ldr	r1, [r2, #28]
    e36e:	683a      	ldr	r2, [r7, #0]
    e370:	430a      	orrs	r2, r1
    e372:	61da      	str	r2, [r3, #28]
			break;
    e374:	e008      	b.n	e388 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    e376:	4b07      	ldr	r3, [pc, #28]	; (e394 <system_apb_clock_set_mask+0x58>)
    e378:	4a06      	ldr	r2, [pc, #24]	; (e394 <system_apb_clock_set_mask+0x58>)
    e37a:	6a11      	ldr	r1, [r2, #32]
    e37c:	683a      	ldr	r2, [r7, #0]
    e37e:	430a      	orrs	r2, r1
    e380:	621a      	str	r2, [r3, #32]
			break;
    e382:	e001      	b.n	e388 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    e384:	2317      	movs	r3, #23
    e386:	e000      	b.n	e38a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    e388:	2300      	movs	r3, #0
}
    e38a:	0018      	movs	r0, r3
    e38c:	46bd      	mov	sp, r7
    e38e:	b002      	add	sp, #8
    e390:	bd80      	pop	{r7, pc}
    e392:	46c0      	nop			; (mov r8, r8)
    e394:	40000400 	.word	0x40000400

0000e398 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    e398:	b580      	push	{r7, lr}
    e39a:	b082      	sub	sp, #8
    e39c:	af00      	add	r7, sp, #0
    e39e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    e3a0:	687b      	ldr	r3, [r7, #4]
    e3a2:	2280      	movs	r2, #128	; 0x80
    e3a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    e3a6:	687b      	ldr	r3, [r7, #4]
    e3a8:	2200      	movs	r2, #0
    e3aa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    e3ac:	687b      	ldr	r3, [r7, #4]
    e3ae:	2201      	movs	r2, #1
    e3b0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    e3b2:	687b      	ldr	r3, [r7, #4]
    e3b4:	2200      	movs	r2, #0
    e3b6:	70da      	strb	r2, [r3, #3]
}
    e3b8:	46c0      	nop			; (mov r8, r8)
    e3ba:	46bd      	mov	sp, r7
    e3bc:	b002      	add	sp, #8
    e3be:	bd80      	pop	{r7, pc}

0000e3c0 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    e3c0:	b580      	push	{r7, lr}
    e3c2:	b084      	sub	sp, #16
    e3c4:	af00      	add	r7, sp, #0
    e3c6:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    e3c8:	2300      	movs	r3, #0
    e3ca:	60fb      	str	r3, [r7, #12]
    e3cc:	e00c      	b.n	e3e8 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    e3ce:	4b0a      	ldr	r3, [pc, #40]	; (e3f8 <_tcc_get_inst_index+0x38>)
    e3d0:	68fa      	ldr	r2, [r7, #12]
    e3d2:	0092      	lsls	r2, r2, #2
    e3d4:	58d2      	ldr	r2, [r2, r3]
    e3d6:	687b      	ldr	r3, [r7, #4]
    e3d8:	429a      	cmp	r2, r3
    e3da:	d102      	bne.n	e3e2 <_tcc_get_inst_index+0x22>
			return i;
    e3dc:	68fb      	ldr	r3, [r7, #12]
    e3de:	b2db      	uxtb	r3, r3
    e3e0:	e006      	b.n	e3f0 <_tcc_get_inst_index+0x30>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    e3e2:	68fb      	ldr	r3, [r7, #12]
    e3e4:	3301      	adds	r3, #1
    e3e6:	60fb      	str	r3, [r7, #12]
    e3e8:	68fb      	ldr	r3, [r7, #12]
    e3ea:	2b02      	cmp	r3, #2
    e3ec:	d9ef      	bls.n	e3ce <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    e3ee:	2300      	movs	r3, #0
}
    e3f0:	0018      	movs	r0, r3
    e3f2:	46bd      	mov	sp, r7
    e3f4:	b004      	add	sp, #16
    e3f6:	bd80      	pop	{r7, pc}
    e3f8:	0001ac30 	.word	0x0001ac30

0000e3fc <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    e3fc:	b590      	push	{r4, r7, lr}
    e3fe:	b085      	sub	sp, #20
    e400:	af00      	add	r7, sp, #0
    e402:	6078      	str	r0, [r7, #4]
    e404:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    e406:	230f      	movs	r3, #15
    e408:	18fc      	adds	r4, r7, r3
    e40a:	683b      	ldr	r3, [r7, #0]
    e40c:	0018      	movs	r0, r3
    e40e:	4bad      	ldr	r3, [pc, #692]	; (e6c4 <tcc_get_config_defaults+0x2c8>)
    e410:	4798      	blx	r3
    e412:	0003      	movs	r3, r0
    e414:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    e416:	687b      	ldr	r3, [r7, #4]
    e418:	2200      	movs	r2, #0
    e41a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    e41c:	230f      	movs	r3, #15
    e41e:	18fb      	adds	r3, r7, r3
    e420:	781a      	ldrb	r2, [r3, #0]
    e422:	4ba9      	ldr	r3, [pc, #676]	; (e6c8 <tcc_get_config_defaults+0x2cc>)
    e424:	0092      	lsls	r2, r2, #2
    e426:	58d2      	ldr	r2, [r2, r3]
    e428:	687b      	ldr	r3, [r7, #4]
    e42a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    e42c:	687b      	ldr	r3, [r7, #4]
    e42e:	2200      	movs	r2, #0
    e430:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    e432:	687b      	ldr	r3, [r7, #4]
    e434:	2200      	movs	r2, #0
    e436:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    e438:	687b      	ldr	r3, [r7, #4]
    e43a:	2200      	movs	r2, #0
    e43c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    e43e:	687b      	ldr	r3, [r7, #4]
    e440:	2200      	movs	r2, #0
    e442:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    e444:	687b      	ldr	r3, [r7, #4]
    e446:	2200      	movs	r2, #0
    e448:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    e44a:	687b      	ldr	r3, [r7, #4]
    e44c:	2200      	movs	r2, #0
    e44e:	61da      	str	r2, [r3, #28]
    e450:	687b      	ldr	r3, [r7, #4]
    e452:	2200      	movs	r2, #0
    e454:	621a      	str	r2, [r3, #32]
    e456:	687b      	ldr	r3, [r7, #4]
    e458:	2200      	movs	r2, #0
    e45a:	625a      	str	r2, [r3, #36]	; 0x24
    e45c:	687b      	ldr	r3, [r7, #4]
    e45e:	2200      	movs	r2, #0
    e460:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    e462:	687b      	ldr	r3, [r7, #4]
    e464:	2200      	movs	r2, #0
    e466:	751a      	strb	r2, [r3, #20]
    e468:	687b      	ldr	r3, [r7, #4]
    e46a:	2200      	movs	r2, #0
    e46c:	755a      	strb	r2, [r3, #21]
    e46e:	687b      	ldr	r3, [r7, #4]
    e470:	2200      	movs	r2, #0
    e472:	759a      	strb	r2, [r3, #22]
    e474:	687b      	ldr	r3, [r7, #4]
    e476:	2200      	movs	r2, #0
    e478:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    e47a:	687b      	ldr	r3, [r7, #4]
    e47c:	2200      	movs	r2, #0
    e47e:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    e480:	687b      	ldr	r3, [r7, #4]
    e482:	2200      	movs	r2, #0
    e484:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    e486:	687b      	ldr	r3, [r7, #4]
    e488:	2200      	movs	r2, #0
    e48a:	741a      	strb	r2, [r3, #16]
    e48c:	687b      	ldr	r3, [r7, #4]
    e48e:	2200      	movs	r2, #0
    e490:	745a      	strb	r2, [r3, #17]
    e492:	687b      	ldr	r3, [r7, #4]
    e494:	2200      	movs	r2, #0
    e496:	749a      	strb	r2, [r3, #18]
    e498:	687b      	ldr	r3, [r7, #4]
    e49a:	2200      	movs	r2, #0
    e49c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    e49e:	687b      	ldr	r3, [r7, #4]
    e4a0:	222c      	movs	r2, #44	; 0x2c
    e4a2:	2100      	movs	r1, #0
    e4a4:	5499      	strb	r1, [r3, r2]
    e4a6:	687b      	ldr	r3, [r7, #4]
    e4a8:	222d      	movs	r2, #45	; 0x2d
    e4aa:	2100      	movs	r1, #0
    e4ac:	5499      	strb	r1, [r3, r2]
    e4ae:	687b      	ldr	r3, [r7, #4]
    e4b0:	222e      	movs	r2, #46	; 0x2e
    e4b2:	2100      	movs	r1, #0
    e4b4:	5499      	strb	r1, [r3, r2]
    e4b6:	687b      	ldr	r3, [r7, #4]
    e4b8:	222f      	movs	r2, #47	; 0x2f
    e4ba:	2100      	movs	r1, #0
    e4bc:	5499      	strb	r1, [r3, r2]
    e4be:	687b      	ldr	r3, [r7, #4]
    e4c0:	2230      	movs	r2, #48	; 0x30
    e4c2:	2100      	movs	r1, #0
    e4c4:	5499      	strb	r1, [r3, r2]
    e4c6:	687b      	ldr	r3, [r7, #4]
    e4c8:	2231      	movs	r2, #49	; 0x31
    e4ca:	2100      	movs	r1, #0
    e4cc:	5499      	strb	r1, [r3, r2]
    e4ce:	687b      	ldr	r3, [r7, #4]
    e4d0:	2232      	movs	r2, #50	; 0x32
    e4d2:	2100      	movs	r1, #0
    e4d4:	5499      	strb	r1, [r3, r2]
    e4d6:	687b      	ldr	r3, [r7, #4]
    e4d8:	2233      	movs	r2, #51	; 0x33
    e4da:	2100      	movs	r1, #0
    e4dc:	5499      	strb	r1, [r3, r2]
    e4de:	687b      	ldr	r3, [r7, #4]
    e4e0:	2234      	movs	r2, #52	; 0x34
    e4e2:	2100      	movs	r1, #0
    e4e4:	5499      	strb	r1, [r3, r2]
    e4e6:	687b      	ldr	r3, [r7, #4]
    e4e8:	2235      	movs	r2, #53	; 0x35
    e4ea:	2100      	movs	r1, #0
    e4ec:	5499      	strb	r1, [r3, r2]
    e4ee:	687b      	ldr	r3, [r7, #4]
    e4f0:	2236      	movs	r2, #54	; 0x36
    e4f2:	2100      	movs	r1, #0
    e4f4:	5499      	strb	r1, [r3, r2]
    e4f6:	687b      	ldr	r3, [r7, #4]
    e4f8:	2237      	movs	r2, #55	; 0x37
    e4fa:	2100      	movs	r1, #0
    e4fc:	5499      	strb	r1, [r3, r2]
    e4fe:	687b      	ldr	r3, [r7, #4]
    e500:	2238      	movs	r2, #56	; 0x38
    e502:	2100      	movs	r1, #0
    e504:	5499      	strb	r1, [r3, r2]
    e506:	687b      	ldr	r3, [r7, #4]
    e508:	2239      	movs	r2, #57	; 0x39
    e50a:	2100      	movs	r1, #0
    e50c:	5499      	strb	r1, [r3, r2]
    e50e:	687b      	ldr	r3, [r7, #4]
    e510:	223a      	movs	r2, #58	; 0x3a
    e512:	2100      	movs	r1, #0
    e514:	5499      	strb	r1, [r3, r2]
    e516:	687b      	ldr	r3, [r7, #4]
    e518:	223b      	movs	r2, #59	; 0x3b
    e51a:	2100      	movs	r1, #0
    e51c:	5499      	strb	r1, [r3, r2]
    e51e:	687b      	ldr	r3, [r7, #4]
    e520:	223c      	movs	r2, #60	; 0x3c
    e522:	2100      	movs	r1, #0
    e524:	5499      	strb	r1, [r3, r2]
    e526:	687b      	ldr	r3, [r7, #4]
    e528:	223d      	movs	r2, #61	; 0x3d
    e52a:	2100      	movs	r1, #0
    e52c:	5499      	strb	r1, [r3, r2]
    e52e:	687b      	ldr	r3, [r7, #4]
    e530:	223e      	movs	r2, #62	; 0x3e
    e532:	2100      	movs	r1, #0
    e534:	5499      	strb	r1, [r3, r2]
    e536:	687b      	ldr	r3, [r7, #4]
    e538:	223f      	movs	r2, #63	; 0x3f
    e53a:	2100      	movs	r1, #0
    e53c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    e53e:	687b      	ldr	r3, [r7, #4]
    e540:	2240      	movs	r2, #64	; 0x40
    e542:	2100      	movs	r1, #0
    e544:	5499      	strb	r1, [r3, r2]
    e546:	687b      	ldr	r3, [r7, #4]
    e548:	2241      	movs	r2, #65	; 0x41
    e54a:	2100      	movs	r1, #0
    e54c:	5499      	strb	r1, [r3, r2]
    e54e:	687b      	ldr	r3, [r7, #4]
    e550:	2242      	movs	r2, #66	; 0x42
    e552:	2100      	movs	r1, #0
    e554:	5499      	strb	r1, [r3, r2]
    e556:	687b      	ldr	r3, [r7, #4]
    e558:	2243      	movs	r2, #67	; 0x43
    e55a:	2100      	movs	r1, #0
    e55c:	5499      	strb	r1, [r3, r2]
    e55e:	687b      	ldr	r3, [r7, #4]
    e560:	2244      	movs	r2, #68	; 0x44
    e562:	2100      	movs	r1, #0
    e564:	5499      	strb	r1, [r3, r2]
    e566:	687b      	ldr	r3, [r7, #4]
    e568:	2245      	movs	r2, #69	; 0x45
    e56a:	2100      	movs	r1, #0
    e56c:	5499      	strb	r1, [r3, r2]
    e56e:	687b      	ldr	r3, [r7, #4]
    e570:	2246      	movs	r2, #70	; 0x46
    e572:	2100      	movs	r1, #0
    e574:	5499      	strb	r1, [r3, r2]
    e576:	687b      	ldr	r3, [r7, #4]
    e578:	2247      	movs	r2, #71	; 0x47
    e57a:	2100      	movs	r1, #0
    e57c:	5499      	strb	r1, [r3, r2]
    e57e:	687b      	ldr	r3, [r7, #4]
    e580:	2248      	movs	r2, #72	; 0x48
    e582:	2100      	movs	r1, #0
    e584:	5499      	strb	r1, [r3, r2]
    e586:	687b      	ldr	r3, [r7, #4]
    e588:	2249      	movs	r2, #73	; 0x49
    e58a:	2100      	movs	r1, #0
    e58c:	5499      	strb	r1, [r3, r2]
    e58e:	687b      	ldr	r3, [r7, #4]
    e590:	224a      	movs	r2, #74	; 0x4a
    e592:	2100      	movs	r1, #0
    e594:	5499      	strb	r1, [r3, r2]
    e596:	687b      	ldr	r3, [r7, #4]
    e598:	224b      	movs	r2, #75	; 0x4b
    e59a:	2100      	movs	r1, #0
    e59c:	5499      	strb	r1, [r3, r2]
    e59e:	687b      	ldr	r3, [r7, #4]
    e5a0:	224c      	movs	r2, #76	; 0x4c
    e5a2:	2100      	movs	r1, #0
    e5a4:	5499      	strb	r1, [r3, r2]
    e5a6:	687b      	ldr	r3, [r7, #4]
    e5a8:	224d      	movs	r2, #77	; 0x4d
    e5aa:	2100      	movs	r1, #0
    e5ac:	5499      	strb	r1, [r3, r2]
    e5ae:	687b      	ldr	r3, [r7, #4]
    e5b0:	224e      	movs	r2, #78	; 0x4e
    e5b2:	2100      	movs	r1, #0
    e5b4:	5499      	strb	r1, [r3, r2]
    e5b6:	687b      	ldr	r3, [r7, #4]
    e5b8:	224f      	movs	r2, #79	; 0x4f
    e5ba:	2100      	movs	r1, #0
    e5bc:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    e5be:	687b      	ldr	r3, [r7, #4]
    e5c0:	2250      	movs	r2, #80	; 0x50
    e5c2:	2100      	movs	r1, #0
    e5c4:	5499      	strb	r1, [r3, r2]
    e5c6:	687b      	ldr	r3, [r7, #4]
    e5c8:	2251      	movs	r2, #81	; 0x51
    e5ca:	2100      	movs	r1, #0
    e5cc:	5499      	strb	r1, [r3, r2]
    e5ce:	687b      	ldr	r3, [r7, #4]
    e5d0:	2252      	movs	r2, #82	; 0x52
    e5d2:	2100      	movs	r1, #0
    e5d4:	5499      	strb	r1, [r3, r2]
    e5d6:	687b      	ldr	r3, [r7, #4]
    e5d8:	2253      	movs	r2, #83	; 0x53
    e5da:	2100      	movs	r1, #0
    e5dc:	5499      	strb	r1, [r3, r2]
    e5de:	687b      	ldr	r3, [r7, #4]
    e5e0:	2254      	movs	r2, #84	; 0x54
    e5e2:	2100      	movs	r1, #0
    e5e4:	5499      	strb	r1, [r3, r2]
    e5e6:	687b      	ldr	r3, [r7, #4]
    e5e8:	2255      	movs	r2, #85	; 0x55
    e5ea:	2100      	movs	r1, #0
    e5ec:	5499      	strb	r1, [r3, r2]
    e5ee:	687b      	ldr	r3, [r7, #4]
    e5f0:	2256      	movs	r2, #86	; 0x56
    e5f2:	2100      	movs	r1, #0
    e5f4:	5499      	strb	r1, [r3, r2]
    e5f6:	687b      	ldr	r3, [r7, #4]
    e5f8:	2257      	movs	r2, #87	; 0x57
    e5fa:	2100      	movs	r1, #0
    e5fc:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    e5fe:	687b      	ldr	r3, [r7, #4]
    e600:	2298      	movs	r2, #152	; 0x98
    e602:	2100      	movs	r1, #0
    e604:	5499      	strb	r1, [r3, r2]
    e606:	687b      	ldr	r3, [r7, #4]
    e608:	2200      	movs	r2, #0
    e60a:	659a      	str	r2, [r3, #88]	; 0x58
    e60c:	687b      	ldr	r3, [r7, #4]
    e60e:	2200      	movs	r2, #0
    e610:	679a      	str	r2, [r3, #120]	; 0x78
    e612:	687b      	ldr	r3, [r7, #4]
    e614:	2299      	movs	r2, #153	; 0x99
    e616:	2100      	movs	r1, #0
    e618:	5499      	strb	r1, [r3, r2]
    e61a:	687b      	ldr	r3, [r7, #4]
    e61c:	2200      	movs	r2, #0
    e61e:	65da      	str	r2, [r3, #92]	; 0x5c
    e620:	687b      	ldr	r3, [r7, #4]
    e622:	2200      	movs	r2, #0
    e624:	67da      	str	r2, [r3, #124]	; 0x7c
    e626:	687b      	ldr	r3, [r7, #4]
    e628:	229a      	movs	r2, #154	; 0x9a
    e62a:	2100      	movs	r1, #0
    e62c:	5499      	strb	r1, [r3, r2]
    e62e:	687b      	ldr	r3, [r7, #4]
    e630:	2200      	movs	r2, #0
    e632:	661a      	str	r2, [r3, #96]	; 0x60
    e634:	687b      	ldr	r3, [r7, #4]
    e636:	2280      	movs	r2, #128	; 0x80
    e638:	2100      	movs	r1, #0
    e63a:	5099      	str	r1, [r3, r2]
    e63c:	687b      	ldr	r3, [r7, #4]
    e63e:	229b      	movs	r2, #155	; 0x9b
    e640:	2100      	movs	r1, #0
    e642:	5499      	strb	r1, [r3, r2]
    e644:	687b      	ldr	r3, [r7, #4]
    e646:	2200      	movs	r2, #0
    e648:	665a      	str	r2, [r3, #100]	; 0x64
    e64a:	687b      	ldr	r3, [r7, #4]
    e64c:	2284      	movs	r2, #132	; 0x84
    e64e:	2100      	movs	r1, #0
    e650:	5099      	str	r1, [r3, r2]
    e652:	687b      	ldr	r3, [r7, #4]
    e654:	229c      	movs	r2, #156	; 0x9c
    e656:	2100      	movs	r1, #0
    e658:	5499      	strb	r1, [r3, r2]
    e65a:	687b      	ldr	r3, [r7, #4]
    e65c:	2200      	movs	r2, #0
    e65e:	669a      	str	r2, [r3, #104]	; 0x68
    e660:	687b      	ldr	r3, [r7, #4]
    e662:	2288      	movs	r2, #136	; 0x88
    e664:	2100      	movs	r1, #0
    e666:	5099      	str	r1, [r3, r2]
    e668:	687b      	ldr	r3, [r7, #4]
    e66a:	229d      	movs	r2, #157	; 0x9d
    e66c:	2100      	movs	r1, #0
    e66e:	5499      	strb	r1, [r3, r2]
    e670:	687b      	ldr	r3, [r7, #4]
    e672:	2200      	movs	r2, #0
    e674:	66da      	str	r2, [r3, #108]	; 0x6c
    e676:	687b      	ldr	r3, [r7, #4]
    e678:	228c      	movs	r2, #140	; 0x8c
    e67a:	2100      	movs	r1, #0
    e67c:	5099      	str	r1, [r3, r2]
    e67e:	687b      	ldr	r3, [r7, #4]
    e680:	229e      	movs	r2, #158	; 0x9e
    e682:	2100      	movs	r1, #0
    e684:	5499      	strb	r1, [r3, r2]
    e686:	687b      	ldr	r3, [r7, #4]
    e688:	2200      	movs	r2, #0
    e68a:	671a      	str	r2, [r3, #112]	; 0x70
    e68c:	687b      	ldr	r3, [r7, #4]
    e68e:	2290      	movs	r2, #144	; 0x90
    e690:	2100      	movs	r1, #0
    e692:	5099      	str	r1, [r3, r2]
    e694:	687b      	ldr	r3, [r7, #4]
    e696:	229f      	movs	r2, #159	; 0x9f
    e698:	2100      	movs	r1, #0
    e69a:	5499      	strb	r1, [r3, r2]
    e69c:	687b      	ldr	r3, [r7, #4]
    e69e:	2200      	movs	r2, #0
    e6a0:	675a      	str	r2, [r3, #116]	; 0x74
    e6a2:	687b      	ldr	r3, [r7, #4]
    e6a4:	2294      	movs	r2, #148	; 0x94
    e6a6:	2100      	movs	r1, #0
    e6a8:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    e6aa:	687b      	ldr	r3, [r7, #4]
    e6ac:	22a0      	movs	r2, #160	; 0xa0
    e6ae:	2101      	movs	r1, #1
    e6b0:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    e6b2:	687b      	ldr	r3, [r7, #4]
    e6b4:	22a1      	movs	r2, #161	; 0xa1
    e6b6:	2100      	movs	r1, #0
    e6b8:	5499      	strb	r1, [r3, r2]
}
    e6ba:	46c0      	nop			; (mov r8, r8)
    e6bc:	46bd      	mov	sp, r7
    e6be:	b005      	add	sp, #20
    e6c0:	bd90      	pop	{r4, r7, pc}
    e6c2:	46c0      	nop			; (mov r8, r8)
    e6c4:	0000e3c1 	.word	0x0000e3c1
    e6c8:	0001ac4c 	.word	0x0001ac4c

0000e6cc <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    e6cc:	b580      	push	{r7, lr}
    e6ce:	b086      	sub	sp, #24
    e6d0:	af00      	add	r7, sp, #0
    e6d2:	60b9      	str	r1, [r7, #8]
    e6d4:	607a      	str	r2, [r7, #4]
    e6d6:	230f      	movs	r3, #15
    e6d8:	18fb      	adds	r3, r7, r3
    e6da:	1c02      	adds	r2, r0, #0
    e6dc:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    e6de:	2300      	movs	r3, #0
    e6e0:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    e6e2:	2300      	movs	r3, #0
    e6e4:	613b      	str	r3, [r7, #16]
    e6e6:	e01d      	b.n	e724 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    e6e8:	68ba      	ldr	r2, [r7, #8]
    e6ea:	693b      	ldr	r3, [r7, #16]
    e6ec:	18d3      	adds	r3, r2, r3
    e6ee:	3310      	adds	r3, #16
    e6f0:	781b      	ldrb	r3, [r3, #0]
    e6f2:	2b01      	cmp	r3, #1
    e6f4:	d113      	bne.n	e71e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    e6f6:	230f      	movs	r3, #15
    e6f8:	18fb      	adds	r3, r7, r3
    e6fa:	781b      	ldrb	r3, [r3, #0]
    e6fc:	4a1b      	ldr	r2, [pc, #108]	; (e76c <_tcc_build_ctrla+0xa0>)
    e6fe:	5cd3      	ldrb	r3, [r2, r3]
    e700:	1e1a      	subs	r2, r3, #0
    e702:	693b      	ldr	r3, [r7, #16]
    e704:	429a      	cmp	r2, r3
    e706:	da01      	bge.n	e70c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    e708:	2317      	movs	r3, #23
    e70a:	e02a      	b.n	e762 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    e70c:	2380      	movs	r3, #128	; 0x80
    e70e:	045a      	lsls	r2, r3, #17
    e710:	693b      	ldr	r3, [r7, #16]
    e712:	409a      	lsls	r2, r3
    e714:	0013      	movs	r3, r2
    e716:	001a      	movs	r2, r3
    e718:	697b      	ldr	r3, [r7, #20]
    e71a:	4313      	orrs	r3, r2
    e71c:	617b      	str	r3, [r7, #20]
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    e71e:	693b      	ldr	r3, [r7, #16]
    e720:	3301      	adds	r3, #1
    e722:	613b      	str	r3, [r7, #16]
    e724:	693b      	ldr	r3, [r7, #16]
    e726:	2b03      	cmp	r3, #3
    e728:	ddde      	ble.n	e6e8 <_tcc_build_ctrla+0x1c>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    e72a:	68bb      	ldr	r3, [r7, #8]
    e72c:	22a1      	movs	r2, #161	; 0xa1
    e72e:	5c9b      	ldrb	r3, [r3, r2]
    e730:	2b00      	cmp	r3, #0
    e732:	d004      	beq.n	e73e <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    e734:	697b      	ldr	r3, [r7, #20]
    e736:	2280      	movs	r2, #128	; 0x80
    e738:	0112      	lsls	r2, r2, #4
    e73a:	4313      	orrs	r3, r2
    e73c:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    e73e:	68bb      	ldr	r3, [r7, #8]
    e740:	7b1b      	ldrb	r3, [r3, #12]
    e742:	031b      	lsls	r3, r3, #12
    e744:	001a      	movs	r2, r3
    e746:	697b      	ldr	r3, [r7, #20]
    e748:	4313      	orrs	r3, r2
    e74a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    e74c:	68bb      	ldr	r3, [r7, #8]
    e74e:	7adb      	ldrb	r3, [r3, #11]
    e750:	021b      	lsls	r3, r3, #8
    e752:	001a      	movs	r2, r3
    e754:	697b      	ldr	r3, [r7, #20]
    e756:	4313      	orrs	r3, r2
    e758:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    e75a:	687b      	ldr	r3, [r7, #4]
    e75c:	697a      	ldr	r2, [r7, #20]
    e75e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    e760:	2300      	movs	r3, #0
}
    e762:	0018      	movs	r0, r3
    e764:	46bd      	mov	sp, r7
    e766:	b006      	add	sp, #24
    e768:	bd80      	pop	{r7, pc}
    e76a:	46c0      	nop			; (mov r8, r8)
    e76c:	0001ac58 	.word	0x0001ac58

0000e770 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    e770:	b580      	push	{r7, lr}
    e772:	b086      	sub	sp, #24
    e774:	af00      	add	r7, sp, #0
    e776:	60b9      	str	r1, [r7, #8]
    e778:	607a      	str	r2, [r7, #4]
    e77a:	230f      	movs	r3, #15
    e77c:	18fb      	adds	r3, r7, r3
    e77e:	1c02      	adds	r2, r0, #0
    e780:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    e782:	2317      	movs	r3, #23
    e784:	18fb      	adds	r3, r7, r3
    e786:	2200      	movs	r2, #0
    e788:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    e78a:	68bb      	ldr	r3, [r7, #8]
    e78c:	7a1b      	ldrb	r3, [r3, #8]
    e78e:	2b00      	cmp	r3, #0
    e790:	d007      	beq.n	e7a2 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    e792:	2317      	movs	r3, #23
    e794:	18fb      	adds	r3, r7, r3
    e796:	2217      	movs	r2, #23
    e798:	18ba      	adds	r2, r7, r2
    e79a:	7812      	ldrb	r2, [r2, #0]
    e79c:	2104      	movs	r1, #4
    e79e:	430a      	orrs	r2, r1
    e7a0:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    e7a2:	68bb      	ldr	r3, [r7, #8]
    e7a4:	7a5b      	ldrb	r3, [r3, #9]
    e7a6:	2b01      	cmp	r3, #1
    e7a8:	d107      	bne.n	e7ba <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    e7aa:	2317      	movs	r3, #23
    e7ac:	18fb      	adds	r3, r7, r3
    e7ae:	2217      	movs	r2, #23
    e7b0:	18ba      	adds	r2, r7, r2
    e7b2:	7812      	ldrb	r2, [r2, #0]
    e7b4:	2101      	movs	r1, #1
    e7b6:	430a      	orrs	r2, r1
    e7b8:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    e7ba:	687b      	ldr	r3, [r7, #4]
    e7bc:	2217      	movs	r2, #23
    e7be:	18ba      	adds	r2, r7, r2
    e7c0:	7812      	ldrb	r2, [r2, #0]
    e7c2:	701a      	strb	r2, [r3, #0]
}
    e7c4:	46c0      	nop			; (mov r8, r8)
    e7c6:	46bd      	mov	sp, r7
    e7c8:	b006      	add	sp, #24
    e7ca:	bd80      	pop	{r7, pc}

0000e7cc <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    e7cc:	b580      	push	{r7, lr}
    e7ce:	b088      	sub	sp, #32
    e7d0:	af00      	add	r7, sp, #0
    e7d2:	60b9      	str	r1, [r7, #8]
    e7d4:	607a      	str	r2, [r7, #4]
    e7d6:	230f      	movs	r3, #15
    e7d8:	18fb      	adds	r3, r7, r3
    e7da:	1c02      	adds	r2, r0, #0
    e7dc:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    e7de:	230f      	movs	r3, #15
    e7e0:	18fb      	adds	r3, r7, r3
    e7e2:	781a      	ldrb	r2, [r3, #0]
    e7e4:	231b      	movs	r3, #27
    e7e6:	18fb      	adds	r3, r7, r3
    e7e8:	493e      	ldr	r1, [pc, #248]	; (e8e4 <_tcc_build_faults+0x118>)
    e7ea:	5c8a      	ldrb	r2, [r1, r2]
    e7ec:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    e7ee:	2300      	movs	r3, #0
    e7f0:	61fb      	str	r3, [r7, #28]
    e7f2:	e06e      	b.n	e8d2 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    e7f4:	69fa      	ldr	r2, [r7, #28]
    e7f6:	0013      	movs	r3, r2
    e7f8:	009b      	lsls	r3, r3, #2
    e7fa:	189b      	adds	r3, r3, r2
    e7fc:	005b      	lsls	r3, r3, #1
    e7fe:	3328      	adds	r3, #40	; 0x28
    e800:	68ba      	ldr	r2, [r7, #8]
    e802:	18d3      	adds	r3, r2, r3
    e804:	3304      	adds	r3, #4
    e806:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    e808:	697b      	ldr	r3, [r7, #20]
    e80a:	7a5b      	ldrb	r3, [r3, #9]
    e80c:	221b      	movs	r2, #27
    e80e:	18ba      	adds	r2, r7, r2
    e810:	7812      	ldrb	r2, [r2, #0]
    e812:	429a      	cmp	r2, r3
    e814:	d801      	bhi.n	e81a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    e816:	2317      	movs	r3, #23
    e818:	e05f      	b.n	e8da <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    e81a:	697b      	ldr	r3, [r7, #20]
    e81c:	781b      	ldrb	r3, [r3, #0]
    e81e:	2b0f      	cmp	r3, #15
    e820:	d901      	bls.n	e826 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    e822:	2317      	movs	r3, #23
    e824:	e059      	b.n	e8da <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    e826:	697b      	ldr	r3, [r7, #20]
    e828:	781b      	ldrb	r3, [r3, #0]
    e82a:	061b      	lsls	r3, r3, #24
    e82c:	001a      	movs	r2, r3
    e82e:	23f0      	movs	r3, #240	; 0xf0
    e830:	051b      	lsls	r3, r3, #20
    e832:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    e834:	697b      	ldr	r3, [r7, #20]
    e836:	785b      	ldrb	r3, [r3, #1]
    e838:	041b      	lsls	r3, r3, #16
    e83a:	0019      	movs	r1, r3
    e83c:	23ff      	movs	r3, #255	; 0xff
    e83e:	041b      	lsls	r3, r3, #16
    e840:	400b      	ands	r3, r1
    e842:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    e844:	697b      	ldr	r3, [r7, #20]
    e846:	789b      	ldrb	r3, [r3, #2]
    e848:	2b00      	cmp	r3, #0
    e84a:	d001      	beq.n	e850 <_tcc_build_faults+0x84>
    e84c:	2380      	movs	r3, #128	; 0x80
    e84e:	e000      	b.n	e852 <_tcc_build_faults+0x86>
    e850:	2300      	movs	r3, #0
    e852:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    e854:	697b      	ldr	r3, [r7, #20]
    e856:	78db      	ldrb	r3, [r3, #3]
    e858:	2b00      	cmp	r3, #0
    e85a:	d001      	beq.n	e860 <_tcc_build_faults+0x94>
    e85c:	2308      	movs	r3, #8
    e85e:	e000      	b.n	e862 <_tcc_build_faults+0x96>
    e860:	2300      	movs	r3, #0
    e862:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    e864:	697b      	ldr	r3, [r7, #20]
    e866:	791b      	ldrb	r3, [r3, #4]
    e868:	2b00      	cmp	r3, #0
    e86a:	d001      	beq.n	e870 <_tcc_build_faults+0xa4>
    e86c:	2310      	movs	r3, #16
    e86e:	e000      	b.n	e872 <_tcc_build_faults+0xa6>
    e870:	2300      	movs	r3, #0
    e872:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    e874:	697b      	ldr	r3, [r7, #20]
    e876:	795b      	ldrb	r3, [r3, #5]
    e878:	0019      	movs	r1, r3
    e87a:	2303      	movs	r3, #3
    e87c:	400b      	ands	r3, r1
    e87e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    e880:	697b      	ldr	r3, [r7, #20]
    e882:	799b      	ldrb	r3, [r3, #6]
    e884:	015b      	lsls	r3, r3, #5
    e886:	0019      	movs	r1, r3
    e888:	2360      	movs	r3, #96	; 0x60
    e88a:	400b      	ands	r3, r1
    e88c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    e88e:	697b      	ldr	r3, [r7, #20]
    e890:	79db      	ldrb	r3, [r3, #7]
    e892:	021b      	lsls	r3, r3, #8
    e894:	0019      	movs	r1, r3
    e896:	23c0      	movs	r3, #192	; 0xc0
    e898:	009b      	lsls	r3, r3, #2
    e89a:	400b      	ands	r3, r1
    e89c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    e89e:	697b      	ldr	r3, [r7, #20]
    e8a0:	7a1b      	ldrb	r3, [r3, #8]
    e8a2:	031b      	lsls	r3, r3, #12
    e8a4:	0019      	movs	r1, r3
    e8a6:	23e0      	movs	r3, #224	; 0xe0
    e8a8:	01db      	lsls	r3, r3, #7
    e8aa:	400b      	ands	r3, r1
    e8ac:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    e8ae:	697b      	ldr	r3, [r7, #20]
    e8b0:	7a5b      	ldrb	r3, [r3, #9]
    e8b2:	029b      	lsls	r3, r3, #10
    e8b4:	0019      	movs	r1, r3
    e8b6:	23c0      	movs	r3, #192	; 0xc0
    e8b8:	011b      	lsls	r3, r3, #4
    e8ba:	400b      	ands	r3, r1
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    e8bc:	4313      	orrs	r3, r2
    e8be:	613b      	str	r3, [r7, #16]
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    e8c0:	69fb      	ldr	r3, [r7, #28]
    e8c2:	009b      	lsls	r3, r3, #2
    e8c4:	687a      	ldr	r2, [r7, #4]
    e8c6:	18d3      	adds	r3, r2, r3
    e8c8:	693a      	ldr	r2, [r7, #16]
    e8ca:	601a      	str	r2, [r3, #0]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    e8cc:	69fb      	ldr	r3, [r7, #28]
    e8ce:	3301      	adds	r3, #1
    e8d0:	61fb      	str	r3, [r7, #28]
    e8d2:	69fb      	ldr	r3, [r7, #28]
    e8d4:	2b01      	cmp	r3, #1
    e8d6:	dd8d      	ble.n	e7f4 <_tcc_build_faults+0x28>
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
	}
	return STATUS_OK;
    e8d8:	2300      	movs	r3, #0
}
    e8da:	0018      	movs	r0, r3
    e8dc:	46bd      	mov	sp, r7
    e8de:	b008      	add	sp, #32
    e8e0:	bd80      	pop	{r7, pc}
    e8e2:	46c0      	nop			; (mov r8, r8)
    e8e4:	0001ac58 	.word	0x0001ac58

0000e8e8 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    e8e8:	b580      	push	{r7, lr}
    e8ea:	b088      	sub	sp, #32
    e8ec:	af00      	add	r7, sp, #0
    e8ee:	60b9      	str	r1, [r7, #8]
    e8f0:	607a      	str	r2, [r7, #4]
    e8f2:	230f      	movs	r3, #15
    e8f4:	18fb      	adds	r3, r7, r3
    e8f6:	1c02      	adds	r2, r0, #0
    e8f8:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    e8fa:	230f      	movs	r3, #15
    e8fc:	18fb      	adds	r3, r7, r3
    e8fe:	781a      	ldrb	r2, [r3, #0]
    e900:	2317      	movs	r3, #23
    e902:	18fb      	adds	r3, r7, r3
    e904:	492d      	ldr	r1, [pc, #180]	; (e9bc <_tcc_build_drvctrl+0xd4>)
    e906:	5c8a      	ldrb	r2, [r1, r2]
    e908:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    e90a:	2300      	movs	r3, #0
    e90c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    e90e:	2300      	movs	r3, #0
    e910:	61fb      	str	r3, [r7, #28]
    e912:	e048      	b.n	e9a6 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    e914:	68ba      	ldr	r2, [r7, #8]
    e916:	2150      	movs	r1, #80	; 0x50
    e918:	69fb      	ldr	r3, [r7, #28]
    e91a:	18d3      	adds	r3, r2, r3
    e91c:	185b      	adds	r3, r3, r1
    e91e:	781b      	ldrb	r3, [r3, #0]
    e920:	2b00      	cmp	r3, #0
    e922:	d010      	beq.n	e946 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    e924:	2317      	movs	r3, #23
    e926:	18fb      	adds	r3, r7, r3
    e928:	781a      	ldrb	r2, [r3, #0]
    e92a:	69fb      	ldr	r3, [r7, #28]
    e92c:	429a      	cmp	r2, r3
    e92e:	d801      	bhi.n	e934 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    e930:	2317      	movs	r3, #23
    e932:	e03f      	b.n	e9b4 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    e934:	2380      	movs	r3, #128	; 0x80
    e936:	025a      	lsls	r2, r3, #9
    e938:	69fb      	ldr	r3, [r7, #28]
    e93a:	409a      	lsls	r2, r3
    e93c:	0013      	movs	r3, r2
    e93e:	001a      	movs	r2, r3
    e940:	69bb      	ldr	r3, [r7, #24]
    e942:	4313      	orrs	r3, r2
    e944:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    e946:	68ba      	ldr	r2, [r7, #8]
    e948:	69fb      	ldr	r3, [r7, #28]
    e94a:	331c      	adds	r3, #28
    e94c:	005b      	lsls	r3, r3, #1
    e94e:	18d3      	adds	r3, r2, r3
    e950:	3309      	adds	r3, #9
    e952:	781b      	ldrb	r3, [r3, #0]
    e954:	2b00      	cmp	r3, #0
    e956:	d023      	beq.n	e9a0 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    e958:	2317      	movs	r3, #23
    e95a:	18fb      	adds	r3, r7, r3
    e95c:	781a      	ldrb	r2, [r3, #0]
    e95e:	69fb      	ldr	r3, [r7, #28]
    e960:	429a      	cmp	r2, r3
    e962:	d801      	bhi.n	e968 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    e964:	2317      	movs	r3, #23
    e966:	e025      	b.n	e9b4 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    e968:	68ba      	ldr	r2, [r7, #8]
    e96a:	69fb      	ldr	r3, [r7, #28]
    e96c:	331c      	adds	r3, #28
    e96e:	005b      	lsls	r3, r3, #1
    e970:	18d3      	adds	r3, r2, r3
    e972:	3309      	adds	r3, #9
    e974:	781b      	ldrb	r3, [r3, #0]
    e976:	2b02      	cmp	r3, #2
    e978:	d10a      	bne.n	e990 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    e97a:	2302      	movs	r3, #2
    e97c:	33ff      	adds	r3, #255	; 0xff
    e97e:	001a      	movs	r2, r3
    e980:	69fb      	ldr	r3, [r7, #28]
    e982:	409a      	lsls	r2, r3
    e984:	0013      	movs	r3, r2
    e986:	001a      	movs	r2, r3
    e988:	69bb      	ldr	r3, [r7, #24]
    e98a:	4313      	orrs	r3, r2
    e98c:	61bb      	str	r3, [r7, #24]
    e98e:	e007      	b.n	e9a0 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    e990:	2201      	movs	r2, #1
    e992:	69fb      	ldr	r3, [r7, #28]
    e994:	409a      	lsls	r2, r3
    e996:	0013      	movs	r3, r2
    e998:	001a      	movs	r2, r3
    e99a:	69bb      	ldr	r3, [r7, #24]
    e99c:	4313      	orrs	r3, r2
    e99e:	61bb      	str	r3, [r7, #24]
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    e9a0:	69fb      	ldr	r3, [r7, #28]
    e9a2:	3301      	adds	r3, #1
    e9a4:	61fb      	str	r3, [r7, #28]
    e9a6:	69fb      	ldr	r3, [r7, #28]
    e9a8:	2b07      	cmp	r3, #7
    e9aa:	d9b3      	bls.n	e914 <_tcc_build_drvctrl+0x2c>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
			}
		}
	}
	*value_buffer = drvctrl;
    e9ac:	687b      	ldr	r3, [r7, #4]
    e9ae:	69ba      	ldr	r2, [r7, #24]
    e9b0:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    e9b2:	2300      	movs	r3, #0
}
    e9b4:	0018      	movs	r0, r3
    e9b6:	46bd      	mov	sp, r7
    e9b8:	b008      	add	sp, #32
    e9ba:	bd80      	pop	{r7, pc}
    e9bc:	0001ac5c 	.word	0x0001ac5c

0000e9c0 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    e9c0:	b580      	push	{r7, lr}
    e9c2:	b088      	sub	sp, #32
    e9c4:	af00      	add	r7, sp, #0
    e9c6:	60b9      	str	r1, [r7, #8]
    e9c8:	607a      	str	r2, [r7, #4]
    e9ca:	230f      	movs	r3, #15
    e9cc:	18fb      	adds	r3, r7, r3
    e9ce:	1c02      	adds	r2, r0, #0
    e9d0:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    e9d2:	230f      	movs	r3, #15
    e9d4:	18fb      	adds	r3, r7, r3
    e9d6:	781a      	ldrb	r2, [r3, #0]
    e9d8:	2317      	movs	r3, #23
    e9da:	18fb      	adds	r3, r7, r3
    e9dc:	491d      	ldr	r1, [pc, #116]	; (ea54 <_tcc_build_waves+0x94>)
    e9de:	5c8a      	ldrb	r2, [r1, r2]
    e9e0:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    e9e2:	68bb      	ldr	r3, [r7, #8]
    e9e4:	3310      	adds	r3, #16
    e9e6:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    e9e8:	693b      	ldr	r3, [r7, #16]
    e9ea:	7a5b      	ldrb	r3, [r3, #9]
    e9ec:	011b      	lsls	r3, r3, #4
    e9ee:	001a      	movs	r2, r3
    e9f0:	2330      	movs	r3, #48	; 0x30
    e9f2:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    e9f4:	693b      	ldr	r3, [r7, #16]
    e9f6:	7a1b      	ldrb	r3, [r3, #8]
    e9f8:	0019      	movs	r1, r3
    e9fa:	2307      	movs	r3, #7
    e9fc:	400b      	ands	r3, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    e9fe:	4313      	orrs	r3, r2
    ea00:	61bb      	str	r3, [r7, #24]
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    ea02:	2300      	movs	r3, #0
    ea04:	61fb      	str	r3, [r7, #28]
    ea06:	e01a      	b.n	ea3e <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    ea08:	693a      	ldr	r2, [r7, #16]
    ea0a:	69fb      	ldr	r3, [r7, #28]
    ea0c:	18d3      	adds	r3, r2, r3
    ea0e:	3304      	adds	r3, #4
    ea10:	781b      	ldrb	r3, [r3, #0]
    ea12:	2b00      	cmp	r3, #0
    ea14:	d010      	beq.n	ea38 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    ea16:	2317      	movs	r3, #23
    ea18:	18fb      	adds	r3, r7, r3
    ea1a:	781a      	ldrb	r2, [r3, #0]
    ea1c:	69fb      	ldr	r3, [r7, #28]
    ea1e:	429a      	cmp	r2, r3
    ea20:	dc01      	bgt.n	ea26 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    ea22:	2317      	movs	r3, #23
    ea24:	e012      	b.n	ea4c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    ea26:	2380      	movs	r3, #128	; 0x80
    ea28:	025a      	lsls	r2, r3, #9
    ea2a:	69fb      	ldr	r3, [r7, #28]
    ea2c:	409a      	lsls	r2, r3
    ea2e:	0013      	movs	r3, r2
    ea30:	001a      	movs	r2, r3
    ea32:	69bb      	ldr	r3, [r7, #24]
    ea34:	4313      	orrs	r3, r2
    ea36:	61bb      	str	r3, [r7, #24]
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    ea38:	69fb      	ldr	r3, [r7, #28]
    ea3a:	3301      	adds	r3, #1
    ea3c:	61fb      	str	r3, [r7, #28]
    ea3e:	69fb      	ldr	r3, [r7, #28]
    ea40:	2b03      	cmp	r3, #3
    ea42:	dde1      	ble.n	ea08 <_tcc_build_waves+0x48>
			}
			wave |= (TCC_WAVE_POL0 << n);
		}
	}

	value_buffer[0] = wave;
    ea44:	687b      	ldr	r3, [r7, #4]
    ea46:	69ba      	ldr	r2, [r7, #24]
    ea48:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    ea4a:	2300      	movs	r3, #0
}
    ea4c:	0018      	movs	r0, r3
    ea4e:	46bd      	mov	sp, r7
    ea50:	b008      	add	sp, #32
    ea52:	bd80      	pop	{r7, pc}
    ea54:	0001ac58 	.word	0x0001ac58

0000ea58 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    ea58:	b590      	push	{r4, r7, lr}
    ea5a:	b091      	sub	sp, #68	; 0x44
    ea5c:	af00      	add	r7, sp, #0
    ea5e:	60f8      	str	r0, [r7, #12]
    ea60:	60b9      	str	r1, [r7, #8]
    ea62:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    ea64:	233b      	movs	r3, #59	; 0x3b
    ea66:	18fc      	adds	r4, r7, r3
    ea68:	68bb      	ldr	r3, [r7, #8]
    ea6a:	0018      	movs	r0, r3
    ea6c:	4bc4      	ldr	r3, [pc, #784]	; (ed80 <tcc_init+0x328>)
    ea6e:	4798      	blx	r3
    ea70:	0003      	movs	r3, r0
    ea72:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    ea74:	233b      	movs	r3, #59	; 0x3b
    ea76:	18fb      	adds	r3, r7, r3
    ea78:	781a      	ldrb	r2, [r3, #0]
    ea7a:	4bc2      	ldr	r3, [pc, #776]	; (ed84 <tcc_init+0x32c>)
    ea7c:	0092      	lsls	r2, r2, #2
    ea7e:	58d3      	ldr	r3, [r2, r3]
    ea80:	0019      	movs	r1, r3
    ea82:	2002      	movs	r0, #2
    ea84:	4bc0      	ldr	r3, [pc, #768]	; (ed88 <tcc_init+0x330>)
    ea86:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    ea88:	68bb      	ldr	r3, [r7, #8]
    ea8a:	681b      	ldr	r3, [r3, #0]
    ea8c:	2202      	movs	r2, #2
    ea8e:	4013      	ands	r3, r2
    ea90:	d001      	beq.n	ea96 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    ea92:	231c      	movs	r3, #28
    ea94:	e1be      	b.n	ee14 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    ea96:	68bb      	ldr	r3, [r7, #8]
    ea98:	681b      	ldr	r3, [r3, #0]
    ea9a:	2201      	movs	r2, #1
    ea9c:	4013      	ands	r3, r2
    ea9e:	d001      	beq.n	eaa4 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    eaa0:	231c      	movs	r3, #28
    eaa2:	e1b7      	b.n	ee14 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    eaa4:	233b      	movs	r3, #59	; 0x3b
    eaa6:	18fb      	adds	r3, r7, r3
    eaa8:	781a      	ldrb	r2, [r3, #0]
    eaaa:	4bb8      	ldr	r3, [pc, #736]	; (ed8c <tcc_init+0x334>)
    eaac:	0092      	lsls	r2, r2, #2
    eaae:	58d3      	ldr	r3, [r2, r3]
    eab0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    eab2:	687b      	ldr	r3, [r7, #4]
    eab4:	681a      	ldr	r2, [r3, #0]
    eab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eab8:	429a      	cmp	r2, r3
    eaba:	d804      	bhi.n	eac6 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    eabc:	687b      	ldr	r3, [r7, #4]
    eabe:	685a      	ldr	r2, [r3, #4]
    eac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eac2:	429a      	cmp	r2, r3
    eac4:	d901      	bls.n	eaca <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    eac6:	2317      	movs	r3, #23
    eac8:	e1a4      	b.n	ee14 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    eaca:	2300      	movs	r3, #0
    eacc:	63fb      	str	r3, [r7, #60]	; 0x3c
    eace:	e00e      	b.n	eaee <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    ead0:	687a      	ldr	r2, [r7, #4]
    ead2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ead4:	3306      	adds	r3, #6
    ead6:	009b      	lsls	r3, r3, #2
    ead8:	18d3      	adds	r3, r2, r3
    eada:	3304      	adds	r3, #4
    eadc:	681a      	ldr	r2, [r3, #0]
    eade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eae0:	429a      	cmp	r2, r3
    eae2:	d901      	bls.n	eae8 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    eae4:	2317      	movs	r3, #23
    eae6:	e195      	b.n	ee14 <tcc_init+0x3bc>
		) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    eae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eaea:	3301      	adds	r3, #1
    eaec:	63fb      	str	r3, [r7, #60]	; 0x3c
    eaee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eaf0:	2b03      	cmp	r3, #3
    eaf2:	dded      	ble.n	ead0 <tcc_init+0x78>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    eaf4:	2300      	movs	r3, #0
    eaf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    eaf8:	e019      	b.n	eb2e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    eafa:	687a      	ldr	r2, [r7, #4]
    eafc:	2198      	movs	r1, #152	; 0x98
    eafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eb00:	18d3      	adds	r3, r2, r3
    eb02:	185b      	adds	r3, r3, r1
    eb04:	781b      	ldrb	r3, [r3, #0]
    eb06:	2201      	movs	r2, #1
    eb08:	4053      	eors	r3, r2
    eb0a:	b2db      	uxtb	r3, r3
    eb0c:	2b00      	cmp	r3, #0
    eb0e:	d10a      	bne.n	eb26 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    eb10:	233b      	movs	r3, #59	; 0x3b
    eb12:	18fb      	adds	r3, r7, r3
    eb14:	781b      	ldrb	r3, [r3, #0]
    eb16:	4a9e      	ldr	r2, [pc, #632]	; (ed90 <tcc_init+0x338>)
    eb18:	5cd3      	ldrb	r3, [r2, r3]
    eb1a:	1e1a      	subs	r2, r3, #0
    eb1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eb1e:	429a      	cmp	r2, r3
    eb20:	dc02      	bgt.n	eb28 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    eb22:	2317      	movs	r3, #23
    eb24:	e176      	b.n	ee14 <tcc_init+0x3bc>
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
    eb26:	46c0      	nop			; (mov r8, r8)
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    eb28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eb2a:	3301      	adds	r3, #1
    eb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    eb2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eb30:	2b07      	cmp	r3, #7
    eb32:	dde2      	ble.n	eafa <tcc_init+0xa2>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    eb34:	2300      	movs	r3, #0
    eb36:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    eb38:	2333      	movs	r3, #51	; 0x33
    eb3a:	18fc      	adds	r4, r7, r3
    eb3c:	232c      	movs	r3, #44	; 0x2c
    eb3e:	18fa      	adds	r2, r7, r3
    eb40:	6879      	ldr	r1, [r7, #4]
    eb42:	233b      	movs	r3, #59	; 0x3b
    eb44:	18fb      	adds	r3, r7, r3
    eb46:	781b      	ldrb	r3, [r3, #0]
    eb48:	0018      	movs	r0, r3
    eb4a:	4b92      	ldr	r3, [pc, #584]	; (ed94 <tcc_init+0x33c>)
    eb4c:	4798      	blx	r3
    eb4e:	0003      	movs	r3, r0
    eb50:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    eb52:	2333      	movs	r3, #51	; 0x33
    eb54:	18fb      	adds	r3, r7, r3
    eb56:	781b      	ldrb	r3, [r3, #0]
    eb58:	2b00      	cmp	r3, #0
    eb5a:	d003      	beq.n	eb64 <tcc_init+0x10c>
		return status;
    eb5c:	2333      	movs	r3, #51	; 0x33
    eb5e:	18fb      	adds	r3, r7, r3
    eb60:	781b      	ldrb	r3, [r3, #0]
    eb62:	e157      	b.n	ee14 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    eb64:	232b      	movs	r3, #43	; 0x2b
    eb66:	18fa      	adds	r2, r7, r3
    eb68:	6879      	ldr	r1, [r7, #4]
    eb6a:	233b      	movs	r3, #59	; 0x3b
    eb6c:	18fb      	adds	r3, r7, r3
    eb6e:	781b      	ldrb	r3, [r3, #0]
    eb70:	0018      	movs	r0, r3
    eb72:	4b89      	ldr	r3, [pc, #548]	; (ed98 <tcc_init+0x340>)
    eb74:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    eb76:	2333      	movs	r3, #51	; 0x33
    eb78:	18fc      	adds	r4, r7, r3
    eb7a:	2320      	movs	r3, #32
    eb7c:	18fa      	adds	r2, r7, r3
    eb7e:	6879      	ldr	r1, [r7, #4]
    eb80:	233b      	movs	r3, #59	; 0x3b
    eb82:	18fb      	adds	r3, r7, r3
    eb84:	781b      	ldrb	r3, [r3, #0]
    eb86:	0018      	movs	r0, r3
    eb88:	4b84      	ldr	r3, [pc, #528]	; (ed9c <tcc_init+0x344>)
    eb8a:	4798      	blx	r3
    eb8c:	0003      	movs	r3, r0
    eb8e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    eb90:	2333      	movs	r3, #51	; 0x33
    eb92:	18fb      	adds	r3, r7, r3
    eb94:	781b      	ldrb	r3, [r3, #0]
    eb96:	2b00      	cmp	r3, #0
    eb98:	d003      	beq.n	eba2 <tcc_init+0x14a>
		return status;
    eb9a:	2333      	movs	r3, #51	; 0x33
    eb9c:	18fb      	adds	r3, r7, r3
    eb9e:	781b      	ldrb	r3, [r3, #0]
    eba0:	e138      	b.n	ee14 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    eba2:	2300      	movs	r3, #0
    eba4:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    eba6:	2333      	movs	r3, #51	; 0x33
    eba8:	18fc      	adds	r4, r7, r3
    ebaa:	231c      	movs	r3, #28
    ebac:	18fa      	adds	r2, r7, r3
    ebae:	6879      	ldr	r1, [r7, #4]
    ebb0:	233b      	movs	r3, #59	; 0x3b
    ebb2:	18fb      	adds	r3, r7, r3
    ebb4:	781b      	ldrb	r3, [r3, #0]
    ebb6:	0018      	movs	r0, r3
    ebb8:	4b79      	ldr	r3, [pc, #484]	; (eda0 <tcc_init+0x348>)
    ebba:	4798      	blx	r3
    ebbc:	0003      	movs	r3, r0
    ebbe:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    ebc0:	2333      	movs	r3, #51	; 0x33
    ebc2:	18fb      	adds	r3, r7, r3
    ebc4:	781b      	ldrb	r3, [r3, #0]
    ebc6:	2b00      	cmp	r3, #0
    ebc8:	d003      	beq.n	ebd2 <tcc_init+0x17a>
		return status;
    ebca:	2333      	movs	r3, #51	; 0x33
    ebcc:	18fb      	adds	r3, r7, r3
    ebce:	781b      	ldrb	r3, [r3, #0]
    ebd0:	e120      	b.n	ee14 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    ebd2:	2333      	movs	r3, #51	; 0x33
    ebd4:	18fc      	adds	r4, r7, r3
    ebd6:	2318      	movs	r3, #24
    ebd8:	18fa      	adds	r2, r7, r3
    ebda:	6879      	ldr	r1, [r7, #4]
    ebdc:	233b      	movs	r3, #59	; 0x3b
    ebde:	18fb      	adds	r3, r7, r3
    ebe0:	781b      	ldrb	r3, [r3, #0]
    ebe2:	0018      	movs	r0, r3
    ebe4:	4b6f      	ldr	r3, [pc, #444]	; (eda4 <tcc_init+0x34c>)
    ebe6:	4798      	blx	r3
    ebe8:	0003      	movs	r3, r0
    ebea:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    ebec:	2333      	movs	r3, #51	; 0x33
    ebee:	18fb      	adds	r3, r7, r3
    ebf0:	781b      	ldrb	r3, [r3, #0]
    ebf2:	2b00      	cmp	r3, #0
    ebf4:	d003      	beq.n	ebfe <tcc_init+0x1a6>
		return status;
    ebf6:	2333      	movs	r3, #51	; 0x33
    ebf8:	18fb      	adds	r3, r7, r3
    ebfa:	781b      	ldrb	r3, [r3, #0]
    ebfc:	e10a      	b.n	ee14 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    ebfe:	2300      	movs	r3, #0
    ec00:	63fb      	str	r3, [r7, #60]	; 0x3c
    ec02:	e009      	b.n	ec18 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    ec04:	68fa      	ldr	r2, [r7, #12]
    ec06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec08:	009b      	lsls	r3, r3, #2
    ec0a:	18d3      	adds	r3, r2, r3
    ec0c:	3304      	adds	r3, #4
    ec0e:	2200      	movs	r2, #0
    ec10:	601a      	str	r2, [r3, #0]
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    ec12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec14:	3301      	adds	r3, #1
    ec16:	63fb      	str	r3, [r7, #60]	; 0x3c
    ec18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec1a:	2b0b      	cmp	r3, #11
    ec1c:	ddf2      	ble.n	ec04 <tcc_init+0x1ac>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    ec1e:	68fb      	ldr	r3, [r7, #12]
    ec20:	2200      	movs	r2, #0
    ec22:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    ec24:	68fb      	ldr	r3, [r7, #12]
    ec26:	2200      	movs	r2, #0
    ec28:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    ec2a:	233b      	movs	r3, #59	; 0x3b
    ec2c:	18fb      	adds	r3, r7, r3
    ec2e:	781a      	ldrb	r2, [r3, #0]
    ec30:	4b5d      	ldr	r3, [pc, #372]	; (eda8 <tcc_init+0x350>)
    ec32:	0092      	lsls	r2, r2, #2
    ec34:	68f9      	ldr	r1, [r7, #12]
    ec36:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    ec38:	68fb      	ldr	r3, [r7, #12]
    ec3a:	68ba      	ldr	r2, [r7, #8]
    ec3c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    ec3e:	687b      	ldr	r3, [r7, #4]
    ec40:	22a0      	movs	r2, #160	; 0xa0
    ec42:	5c99      	ldrb	r1, [r3, r2]
    ec44:	68fb      	ldr	r3, [r7, #12]
    ec46:	223c      	movs	r2, #60	; 0x3c
    ec48:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    ec4a:	2314      	movs	r3, #20
    ec4c:	18fb      	adds	r3, r7, r3
    ec4e:	0018      	movs	r0, r3
    ec50:	4b56      	ldr	r3, [pc, #344]	; (edac <tcc_init+0x354>)
    ec52:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    ec54:	687b      	ldr	r3, [r7, #4]
    ec56:	7a9a      	ldrb	r2, [r3, #10]
    ec58:	2314      	movs	r3, #20
    ec5a:	18fb      	adds	r3, r7, r3
    ec5c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    ec5e:	233b      	movs	r3, #59	; 0x3b
    ec60:	18fb      	adds	r3, r7, r3
    ec62:	781b      	ldrb	r3, [r3, #0]
    ec64:	4a52      	ldr	r2, [pc, #328]	; (edb0 <tcc_init+0x358>)
    ec66:	5cd3      	ldrb	r3, [r2, r3]
    ec68:	2214      	movs	r2, #20
    ec6a:	18ba      	adds	r2, r7, r2
    ec6c:	0011      	movs	r1, r2
    ec6e:	0018      	movs	r0, r3
    ec70:	4b50      	ldr	r3, [pc, #320]	; (edb4 <tcc_init+0x35c>)
    ec72:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    ec74:	233b      	movs	r3, #59	; 0x3b
    ec76:	18fb      	adds	r3, r7, r3
    ec78:	781b      	ldrb	r3, [r3, #0]
    ec7a:	4a4d      	ldr	r2, [pc, #308]	; (edb0 <tcc_init+0x358>)
    ec7c:	5cd3      	ldrb	r3, [r2, r3]
    ec7e:	0018      	movs	r0, r3
    ec80:	4b4d      	ldr	r3, [pc, #308]	; (edb8 <tcc_init+0x360>)
    ec82:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    ec84:	2300      	movs	r3, #0
    ec86:	63fb      	str	r3, [r7, #60]	; 0x3c
    ec88:	e02d      	b.n	ece6 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    ec8a:	687a      	ldr	r2, [r7, #4]
    ec8c:	2198      	movs	r1, #152	; 0x98
    ec8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec90:	18d3      	adds	r3, r2, r3
    ec92:	185b      	adds	r3, r3, r1
    ec94:	781b      	ldrb	r3, [r3, #0]
    ec96:	2201      	movs	r2, #1
    ec98:	4053      	eors	r3, r2
    ec9a:	b2db      	uxtb	r3, r3
    ec9c:	2b00      	cmp	r3, #0
    ec9e:	d11e      	bne.n	ecde <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    eca0:	2310      	movs	r3, #16
    eca2:	18fb      	adds	r3, r7, r3
    eca4:	0018      	movs	r0, r3
    eca6:	4b45      	ldr	r3, [pc, #276]	; (edbc <tcc_init+0x364>)
    eca8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    ecaa:	687b      	ldr	r3, [r7, #4]
    ecac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ecae:	321e      	adds	r2, #30
    ecb0:	0092      	lsls	r2, r2, #2
    ecb2:	58d3      	ldr	r3, [r2, r3]
    ecb4:	b2da      	uxtb	r2, r3
    ecb6:	2310      	movs	r3, #16
    ecb8:	18fb      	adds	r3, r7, r3
    ecba:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    ecbc:	2310      	movs	r3, #16
    ecbe:	18fb      	adds	r3, r7, r3
    ecc0:	2201      	movs	r2, #1
    ecc2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    ecc4:	687b      	ldr	r3, [r7, #4]
    ecc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ecc8:	3216      	adds	r2, #22
    ecca:	0092      	lsls	r2, r2, #2
    eccc:	58d3      	ldr	r3, [r2, r3]
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    ecce:	b2db      	uxtb	r3, r3
    ecd0:	2210      	movs	r2, #16
    ecd2:	18ba      	adds	r2, r7, r2
    ecd4:	0011      	movs	r1, r2
    ecd6:	0018      	movs	r0, r3
    ecd8:	4b39      	ldr	r3, [pc, #228]	; (edc0 <tcc_init+0x368>)
    ecda:	4798      	blx	r3
    ecdc:	e000      	b.n	ece0 <tcc_init+0x288>

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
    ecde:	46c0      	nop			; (mov r8, r8)
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    ece0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ece2:	3301      	adds	r3, #1
    ece4:	63fb      	str	r3, [r7, #60]	; 0x3c
    ece6:	233b      	movs	r3, #59	; 0x3b
    ece8:	18fb      	adds	r3, r7, r3
    ecea:	781b      	ldrb	r3, [r3, #0]
    ecec:	4a28      	ldr	r2, [pc, #160]	; (ed90 <tcc_init+0x338>)
    ecee:	5cd3      	ldrb	r3, [r2, r3]
    ecf0:	1e1a      	subs	r2, r3, #0
    ecf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ecf4:	429a      	cmp	r2, r3
    ecf6:	dcc8      	bgt.n	ec8a <tcc_init+0x232>
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    ecf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ecfa:	68bb      	ldr	r3, [r7, #8]
    ecfc:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    ecfe:	46c0      	nop			; (mov r8, r8)
    ed00:	68bb      	ldr	r3, [r7, #8]
    ed02:	689b      	ldr	r3, [r3, #8]
    ed04:	2204      	movs	r2, #4
    ed06:	4013      	ands	r3, r2
    ed08:	d1fa      	bne.n	ed00 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    ed0a:	68bb      	ldr	r3, [r7, #8]
    ed0c:	22ff      	movs	r2, #255	; 0xff
    ed0e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    ed10:	46c0      	nop			; (mov r8, r8)
    ed12:	68bb      	ldr	r3, [r7, #8]
    ed14:	689b      	ldr	r3, [r3, #8]
    ed16:	2204      	movs	r2, #4
    ed18:	4013      	ands	r3, r2
    ed1a:	d1fa      	bne.n	ed12 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    ed1c:	232b      	movs	r3, #43	; 0x2b
    ed1e:	18fb      	adds	r3, r7, r3
    ed20:	781a      	ldrb	r2, [r3, #0]
    ed22:	68bb      	ldr	r3, [r7, #8]
    ed24:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    ed26:	2320      	movs	r3, #32
    ed28:	18fb      	adds	r3, r7, r3
    ed2a:	681a      	ldr	r2, [r3, #0]
    ed2c:	68bb      	ldr	r3, [r7, #8]
    ed2e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    ed30:	2320      	movs	r3, #32
    ed32:	18fb      	adds	r3, r7, r3
    ed34:	685a      	ldr	r2, [r3, #4]
    ed36:	68bb      	ldr	r3, [r7, #8]
    ed38:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    ed3a:	69fa      	ldr	r2, [r7, #28]
    ed3c:	68bb      	ldr	r3, [r7, #8]
    ed3e:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    ed40:	46c0      	nop			; (mov r8, r8)
    ed42:	68bb      	ldr	r3, [r7, #8]
    ed44:	689b      	ldr	r3, [r3, #8]
    ed46:	4a1f      	ldr	r2, [pc, #124]	; (edc4 <tcc_init+0x36c>)
    ed48:	4013      	ands	r3, r2
    ed4a:	d1fa      	bne.n	ed42 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    ed4c:	69ba      	ldr	r2, [r7, #24]
    ed4e:	68bb      	ldr	r3, [r7, #8]
    ed50:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    ed52:	46c0      	nop			; (mov r8, r8)
    ed54:	68bb      	ldr	r3, [r7, #8]
    ed56:	689b      	ldr	r3, [r3, #8]
    ed58:	2210      	movs	r2, #16
    ed5a:	4013      	ands	r3, r2
    ed5c:	d1fa      	bne.n	ed54 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    ed5e:	687b      	ldr	r3, [r7, #4]
    ed60:	681a      	ldr	r2, [r3, #0]
    ed62:	68bb      	ldr	r3, [r7, #8]
    ed64:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    ed66:	46c0      	nop			; (mov r8, r8)
    ed68:	68bb      	ldr	r3, [r7, #8]
    ed6a:	689b      	ldr	r3, [r3, #8]
    ed6c:	4a16      	ldr	r2, [pc, #88]	; (edc8 <tcc_init+0x370>)
    ed6e:	4013      	ands	r3, r2
    ed70:	d1fa      	bne.n	ed68 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    ed72:	687b      	ldr	r3, [r7, #4]
    ed74:	685a      	ldr	r2, [r3, #4]
    ed76:	68bb      	ldr	r3, [r7, #8]
    ed78:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    ed7a:	2300      	movs	r3, #0
    ed7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    ed7e:	e03f      	b.n	ee00 <tcc_init+0x3a8>
    ed80:	0000e3c1 	.word	0x0000e3c1
    ed84:	0001ac40 	.word	0x0001ac40
    ed88:	0000e33d 	.word	0x0000e33d
    ed8c:	0001ac4c 	.word	0x0001ac4c
    ed90:	0001ac5c 	.word	0x0001ac5c
    ed94:	0000e6cd 	.word	0x0000e6cd
    ed98:	0000e771 	.word	0x0000e771
    ed9c:	0000e7cd 	.word	0x0000e7cd
    eda0:	0000e8e9 	.word	0x0000e8e9
    eda4:	0000e9c1 	.word	0x0000e9c1
    eda8:	20000450 	.word	0x20000450
    edac:	0000e325 	.word	0x0000e325
    edb0:	0001ac3c 	.word	0x0001ac3c
    edb4:	00015261 	.word	0x00015261
    edb8:	000152a5 	.word	0x000152a5
    edbc:	0000e399 	.word	0x0000e399
    edc0:	0001554d 	.word	0x0001554d
    edc4:	00020040 	.word	0x00020040
    edc8:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    edcc:	46c0      	nop			; (mov r8, r8)
    edce:	68bb      	ldr	r3, [r7, #8]
    edd0:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    edd2:	4912      	ldr	r1, [pc, #72]	; (ee1c <tcc_init+0x3c4>)
    edd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    edd6:	4091      	lsls	r1, r2
    edd8:	000a      	movs	r2, r1
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    edda:	4013      	ands	r3, r2
    eddc:	d1f7      	bne.n	edce <tcc_init+0x376>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    edde:	687a      	ldr	r2, [r7, #4]
    ede0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ede2:	3306      	adds	r3, #6
    ede4:	009b      	lsls	r3, r3, #2
    ede6:	18d3      	adds	r3, r2, r3
    ede8:	3304      	adds	r3, #4
    edea:	681a      	ldr	r2, [r3, #0]
    edec:	68b9      	ldr	r1, [r7, #8]
    edee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    edf0:	3310      	adds	r3, #16
    edf2:	009b      	lsls	r3, r3, #2
    edf4:	18cb      	adds	r3, r1, r3
    edf6:	3304      	adds	r3, #4
    edf8:	601a      	str	r2, [r3, #0]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    edfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    edfc:	3301      	adds	r3, #1
    edfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    ee00:	233b      	movs	r3, #59	; 0x3b
    ee02:	18fb      	adds	r3, r7, r3
    ee04:	781b      	ldrb	r3, [r3, #0]
    ee06:	4a06      	ldr	r2, [pc, #24]	; (ee20 <tcc_init+0x3c8>)
    ee08:	5cd3      	ldrb	r3, [r2, r3]
    ee0a:	1e1a      	subs	r2, r3, #0
    ee0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ee0e:	429a      	cmp	r2, r3
    ee10:	dcdc      	bgt.n	edcc <tcc_init+0x374>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    ee12:	2300      	movs	r3, #0
}
    ee14:	0018      	movs	r0, r3
    ee16:	46bd      	mov	sp, r7
    ee18:	b011      	add	sp, #68	; 0x44
    ee1a:	bd90      	pop	{r4, r7, pc}
    ee1c:	00080100 	.word	0x00080100
    ee20:	0001ac58 	.word	0x0001ac58

0000ee24 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    ee24:	b580      	push	{r7, lr}
    ee26:	b082      	sub	sp, #8
    ee28:	af00      	add	r7, sp, #0
    ee2a:	0002      	movs	r2, r0
    ee2c:	1dfb      	adds	r3, r7, #7
    ee2e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ee30:	4b06      	ldr	r3, [pc, #24]	; (ee4c <system_interrupt_enable+0x28>)
    ee32:	1dfa      	adds	r2, r7, #7
    ee34:	7812      	ldrb	r2, [r2, #0]
    ee36:	0011      	movs	r1, r2
    ee38:	221f      	movs	r2, #31
    ee3a:	400a      	ands	r2, r1
    ee3c:	2101      	movs	r1, #1
    ee3e:	4091      	lsls	r1, r2
    ee40:	000a      	movs	r2, r1
    ee42:	601a      	str	r2, [r3, #0]
}
    ee44:	46c0      	nop			; (mov r8, r8)
    ee46:	46bd      	mov	sp, r7
    ee48:	b002      	add	sp, #8
    ee4a:	bd80      	pop	{r7, pc}
    ee4c:	e000e100 	.word	0xe000e100

0000ee50 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    ee50:	b580      	push	{r7, lr}
    ee52:	b082      	sub	sp, #8
    ee54:	af00      	add	r7, sp, #0
    ee56:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    ee58:	4a04      	ldr	r2, [pc, #16]	; (ee6c <_tcc_interrupt_get_interrupt_vector+0x1c>)
    ee5a:	687b      	ldr	r3, [r7, #4]
    ee5c:	18d3      	adds	r3, r2, r3
    ee5e:	781b      	ldrb	r3, [r3, #0]
    ee60:	b25b      	sxtb	r3, r3
}
    ee62:	0018      	movs	r0, r3
    ee64:	46bd      	mov	sp, r7
    ee66:	b002      	add	sp, #8
    ee68:	bd80      	pop	{r7, pc}
    ee6a:	46c0      	nop			; (mov r8, r8)
    ee6c:	20000004 	.word	0x20000004

0000ee70 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
    ee70:	b580      	push	{r7, lr}
    ee72:	b084      	sub	sp, #16
    ee74:	af00      	add	r7, sp, #0
    ee76:	60f8      	str	r0, [r7, #12]
    ee78:	60b9      	str	r1, [r7, #8]
    ee7a:	1dfb      	adds	r3, r7, #7
    ee7c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    ee7e:	1dfb      	adds	r3, r7, #7
    ee80:	781b      	ldrb	r3, [r3, #0]
    ee82:	68fa      	ldr	r2, [r7, #12]
    ee84:	009b      	lsls	r3, r3, #2
    ee86:	18d3      	adds	r3, r2, r3
    ee88:	3304      	adds	r3, #4
    ee8a:	68ba      	ldr	r2, [r7, #8]
    ee8c:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    ee8e:	68fb      	ldr	r3, [r7, #12]
    ee90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    ee92:	1dfb      	adds	r3, r7, #7
    ee94:	7819      	ldrb	r1, [r3, #0]
    ee96:	4b05      	ldr	r3, [pc, #20]	; (eeac <tcc_register_callback+0x3c>)
    ee98:	0089      	lsls	r1, r1, #2
    ee9a:	58cb      	ldr	r3, [r1, r3]
    ee9c:	431a      	orrs	r2, r3
    ee9e:	68fb      	ldr	r3, [r7, #12]
    eea0:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
    eea2:	2300      	movs	r3, #0
}
    eea4:	0018      	movs	r0, r3
    eea6:	46bd      	mov	sp, r7
    eea8:	b004      	add	sp, #16
    eeaa:	bd80      	pop	{r7, pc}
    eeac:	0001ac60 	.word	0x0001ac60

0000eeb0 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    eeb0:	b580      	push	{r7, lr}
    eeb2:	b082      	sub	sp, #8
    eeb4:	af00      	add	r7, sp, #0
    eeb6:	6078      	str	r0, [r7, #4]
    eeb8:	000a      	movs	r2, r1
    eeba:	1cfb      	adds	r3, r7, #3
    eebc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    eebe:	687b      	ldr	r3, [r7, #4]
    eec0:	681b      	ldr	r3, [r3, #0]
    eec2:	0018      	movs	r0, r3
    eec4:	4b0f      	ldr	r3, [pc, #60]	; (ef04 <tcc_enable_callback+0x54>)
    eec6:	4798      	blx	r3
    eec8:	0003      	movs	r3, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
    eeca:	0018      	movs	r0, r3
    eecc:	4b0e      	ldr	r3, [pc, #56]	; (ef08 <tcc_enable_callback+0x58>)
    eece:	4798      	blx	r3
    eed0:	0003      	movs	r3, r0
    eed2:	0018      	movs	r0, r3
    eed4:	4b0d      	ldr	r3, [pc, #52]	; (ef0c <tcc_enable_callback+0x5c>)
    eed6:	4798      	blx	r3
			_tcc_get_inst_index(module->hw)));

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    eed8:	687b      	ldr	r3, [r7, #4]
    eeda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    eedc:	1cfb      	adds	r3, r7, #3
    eede:	7819      	ldrb	r1, [r3, #0]
    eee0:	4b0b      	ldr	r3, [pc, #44]	; (ef10 <tcc_enable_callback+0x60>)
    eee2:	0089      	lsls	r1, r1, #2
    eee4:	58cb      	ldr	r3, [r1, r3]
    eee6:	431a      	orrs	r2, r3
    eee8:	687b      	ldr	r3, [r7, #4]
    eeea:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    eeec:	687b      	ldr	r3, [r7, #4]
    eeee:	681b      	ldr	r3, [r3, #0]
    eef0:	1cfa      	adds	r2, r7, #3
    eef2:	7811      	ldrb	r1, [r2, #0]
    eef4:	4a06      	ldr	r2, [pc, #24]	; (ef10 <tcc_enable_callback+0x60>)
    eef6:	0089      	lsls	r1, r1, #2
    eef8:	588a      	ldr	r2, [r1, r2]
    eefa:	629a      	str	r2, [r3, #40]	; 0x28
}
    eefc:	46c0      	nop			; (mov r8, r8)
    eefe:	46bd      	mov	sp, r7
    ef00:	b002      	add	sp, #8
    ef02:	bd80      	pop	{r7, pc}
    ef04:	0000e3c1 	.word	0x0000e3c1
    ef08:	0000ee51 	.word	0x0000ee51
    ef0c:	0000ee25 	.word	0x0000ee25
    ef10:	0001ac60 	.word	0x0001ac60

0000ef14 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    ef14:	b580      	push	{r7, lr}
    ef16:	af00      	add	r7, sp, #0
    ef18:	2000      	movs	r0, #0
    ef1a:	4b02      	ldr	r3, [pc, #8]	; (ef24 <TCC0_Handler+0x10>)
    ef1c:	4798      	blx	r3
    ef1e:	46c0      	nop			; (mov r8, r8)
    ef20:	46bd      	mov	sp, r7
    ef22:	bd80      	pop	{r7, pc}
    ef24:	0000ef51 	.word	0x0000ef51

0000ef28 <TCC1_Handler>:
    ef28:	b580      	push	{r7, lr}
    ef2a:	af00      	add	r7, sp, #0
    ef2c:	2001      	movs	r0, #1
    ef2e:	4b02      	ldr	r3, [pc, #8]	; (ef38 <TCC1_Handler+0x10>)
    ef30:	4798      	blx	r3
    ef32:	46c0      	nop			; (mov r8, r8)
    ef34:	46bd      	mov	sp, r7
    ef36:	bd80      	pop	{r7, pc}
    ef38:	0000ef51 	.word	0x0000ef51

0000ef3c <TCC2_Handler>:
    ef3c:	b580      	push	{r7, lr}
    ef3e:	af00      	add	r7, sp, #0
    ef40:	2002      	movs	r0, #2
    ef42:	4b02      	ldr	r3, [pc, #8]	; (ef4c <TCC2_Handler+0x10>)
    ef44:	4798      	blx	r3
    ef46:	46c0      	nop			; (mov r8, r8)
    ef48:	46bd      	mov	sp, r7
    ef4a:	bd80      	pop	{r7, pc}
    ef4c:	0000ef51 	.word	0x0000ef51

0000ef50 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    ef50:	b580      	push	{r7, lr}
    ef52:	b086      	sub	sp, #24
    ef54:	af00      	add	r7, sp, #0
    ef56:	0002      	movs	r2, r0
    ef58:	1dfb      	adds	r3, r7, #7
    ef5a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    ef5c:	1dfb      	adds	r3, r7, #7
    ef5e:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    ef60:	4b18      	ldr	r3, [pc, #96]	; (efc4 <_tcc_interrupt_handler+0x74>)
    ef62:	0092      	lsls	r2, r2, #2
    ef64:	58d3      	ldr	r3, [r2, r3]
    ef66:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    ef68:	693b      	ldr	r3, [r7, #16]
    ef6a:	681b      	ldr	r3, [r3, #0]
    ef6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    ef6e:	693b      	ldr	r3, [r7, #16]
    ef70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    ef72:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    ef74:	693b      	ldr	r3, [r7, #16]
    ef76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    ef78:	4013      	ands	r3, r2
    ef7a:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    ef7c:	2300      	movs	r3, #0
    ef7e:	617b      	str	r3, [r7, #20]
    ef80:	e019      	b.n	efb6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    ef82:	4b11      	ldr	r3, [pc, #68]	; (efc8 <_tcc_interrupt_handler+0x78>)
    ef84:	697a      	ldr	r2, [r7, #20]
    ef86:	0092      	lsls	r2, r2, #2
    ef88:	58d3      	ldr	r3, [r2, r3]
    ef8a:	68fa      	ldr	r2, [r7, #12]
    ef8c:	4013      	ands	r3, r2
    ef8e:	d00f      	beq.n	efb0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    ef90:	693a      	ldr	r2, [r7, #16]
    ef92:	697b      	ldr	r3, [r7, #20]
    ef94:	009b      	lsls	r3, r3, #2
    ef96:	18d3      	adds	r3, r2, r3
    ef98:	3304      	adds	r3, #4
    ef9a:	681b      	ldr	r3, [r3, #0]
    ef9c:	693a      	ldr	r2, [r7, #16]
    ef9e:	0010      	movs	r0, r2
    efa0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    efa2:	693b      	ldr	r3, [r7, #16]
    efa4:	681b      	ldr	r3, [r3, #0]
    efa6:	4a08      	ldr	r2, [pc, #32]	; (efc8 <_tcc_interrupt_handler+0x78>)
    efa8:	6979      	ldr	r1, [r7, #20]
    efaa:	0089      	lsls	r1, r1, #2
    efac:	588a      	ldr	r2, [r1, r2]
    efae:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    efb0:	697b      	ldr	r3, [r7, #20]
    efb2:	3301      	adds	r3, #1
    efb4:	617b      	str	r3, [r7, #20]
    efb6:	697b      	ldr	r3, [r7, #20]
    efb8:	2b0b      	cmp	r3, #11
    efba:	dde2      	ble.n	ef82 <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    efbc:	46c0      	nop			; (mov r8, r8)
    efbe:	46bd      	mov	sp, r7
    efc0:	b006      	add	sp, #24
    efc2:	bd80      	pop	{r7, pc}
    efc4:	20000450 	.word	0x20000450
    efc8:	0001ac60 	.word	0x0001ac60

0000efcc <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
    efcc:	b580      	push	{r7, lr}
    efce:	b082      	sub	sp, #8
    efd0:	af00      	add	r7, sp, #0
    efd2:	6078      	str	r0, [r7, #4]
	config->port = 80;
    efd4:	687b      	ldr	r3, [r7, #4]
    efd6:	2250      	movs	r2, #80	; 0x50
    efd8:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
    efda:	687b      	ldr	r3, [r7, #4]
    efdc:	2200      	movs	r2, #0
    efde:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
    efe0:	687b      	ldr	r3, [r7, #4]
    efe2:	4a0b      	ldr	r2, [pc, #44]	; (f010 <http_client_get_config_defaults+0x44>)
    efe4:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
    efe6:	687b      	ldr	r3, [r7, #4]
    efe8:	2200      	movs	r2, #0
    efea:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
    efec:	687b      	ldr	r3, [r7, #4]
    efee:	2200      	movs	r2, #0
    eff0:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
    eff2:	687b      	ldr	r3, [r7, #4]
    eff4:	2280      	movs	r2, #128	; 0x80
    eff6:	0052      	lsls	r2, r2, #1
    eff8:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    effa:	687b      	ldr	r3, [r7, #4]
    effc:	2252      	movs	r2, #82	; 0x52
    effe:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    f000:	687b      	ldr	r3, [r7, #4]
    f002:	4a04      	ldr	r2, [pc, #16]	; (f014 <http_client_get_config_defaults+0x48>)
    f004:	619a      	str	r2, [r3, #24]
}
    f006:	46c0      	nop			; (mov r8, r8)
    f008:	46bd      	mov	sp, r7
    f00a:	b002      	add	sp, #8
    f00c:	bd80      	pop	{r7, pc}
    f00e:	46c0      	nop			; (mov r8, r8)
    f010:	00004e20 	.word	0x00004e20
    f014:	0001ac90 	.word	0x0001ac90

0000f018 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
    f018:	b590      	push	{r4, r7, lr}
    f01a:	b083      	sub	sp, #12
    f01c:	af00      	add	r7, sp, #0
    f01e:	6078      	str	r0, [r7, #4]
    f020:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
    f022:	687b      	ldr	r3, [r7, #4]
    f024:	2b00      	cmp	r3, #0
    f026:	d002      	beq.n	f02e <http_client_init+0x16>
    f028:	683b      	ldr	r3, [r7, #0]
    f02a:	2b00      	cmp	r3, #0
    f02c:	d102      	bne.n	f034 <http_client_init+0x1c>
		return -EINVAL;
    f02e:	2316      	movs	r3, #22
    f030:	425b      	negs	r3, r3
    f032:	e058      	b.n	f0e6 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
    f034:	683b      	ldr	r3, [r7, #0]
    f036:	691b      	ldr	r3, [r3, #16]
    f038:	2b00      	cmp	r3, #0
    f03a:	d102      	bne.n	f042 <http_client_init+0x2a>
		return -EINVAL;
    f03c:	2316      	movs	r3, #22
    f03e:	425b      	negs	r3, r3
    f040:	e051      	b.n	f0e6 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
    f042:	683b      	ldr	r3, [r7, #0]
    f044:	685b      	ldr	r3, [r3, #4]
    f046:	2b00      	cmp	r3, #0
    f048:	d102      	bne.n	f050 <http_client_init+0x38>
		return -EINVAL;
    f04a:	2316      	movs	r3, #22
    f04c:	425b      	negs	r3, r3
    f04e:	e04a      	b.n	f0e6 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    f050:	683b      	ldr	r3, [r7, #0]
    f052:	695b      	ldr	r3, [r3, #20]
    f054:	2b51      	cmp	r3, #81	; 0x51
    f056:	d802      	bhi.n	f05e <http_client_init+0x46>
		return -EINVAL;
    f058:	2316      	movs	r3, #22
    f05a:	425b      	negs	r3, r3
    f05c:	e043      	b.n	f0e6 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
    f05e:	687b      	ldr	r3, [r7, #4]
    f060:	22e8      	movs	r2, #232	; 0xe8
    f062:	2100      	movs	r1, #0
    f064:	0018      	movs	r0, r3
    f066:	4b22      	ldr	r3, [pc, #136]	; (f0f0 <http_client_init+0xd8>)
    f068:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    f06a:	687b      	ldr	r3, [r7, #4]
    f06c:	3350      	adds	r3, #80	; 0x50
    f06e:	6839      	ldr	r1, [r7, #0]
    f070:	221c      	movs	r2, #28
    f072:	0018      	movs	r0, r3
    f074:	4b1f      	ldr	r3, [pc, #124]	; (f0f4 <http_client_init+0xdc>)
    f076:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
    f078:	687b      	ldr	r3, [r7, #4]
    f07a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    f07c:	2b00      	cmp	r3, #0
    f07e:	d115      	bne.n	f0ac <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    f080:	683b      	ldr	r3, [r7, #0]
    f082:	691b      	ldr	r3, [r3, #16]
    f084:	0018      	movs	r0, r3
    f086:	4b1c      	ldr	r3, [pc, #112]	; (f0f8 <http_client_init+0xe0>)
    f088:	4798      	blx	r3
    f08a:	0003      	movs	r3, r0
    f08c:	001a      	movs	r2, r3
    f08e:	687b      	ldr	r3, [r7, #4]
    f090:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    f092:	687b      	ldr	r3, [r7, #4]
    f094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    f096:	2b00      	cmp	r3, #0
    f098:	d102      	bne.n	f0a0 <http_client_init+0x88>
			return -ENOMEM;
    f09a:	230c      	movs	r3, #12
    f09c:	425b      	negs	r3, r3
    f09e:	e022      	b.n	f0e6 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
    f0a0:	687b      	ldr	r3, [r7, #4]
    f0a2:	2241      	movs	r2, #65	; 0x41
    f0a4:	5c99      	ldrb	r1, [r3, r2]
    f0a6:	2004      	movs	r0, #4
    f0a8:	4301      	orrs	r1, r0
    f0aa:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
    f0ac:	683b      	ldr	r3, [r7, #0]
    f0ae:	891b      	ldrh	r3, [r3, #8]
    f0b0:	2b00      	cmp	r3, #0
    f0b2:	d010      	beq.n	f0d6 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    f0b4:	683b      	ldr	r3, [r7, #0]
    f0b6:	6858      	ldr	r0, [r3, #4]
    f0b8:	687a      	ldr	r2, [r7, #4]
    f0ba:	4910      	ldr	r1, [pc, #64]	; (f0fc <http_client_init+0xe4>)
    f0bc:	2300      	movs	r3, #0
    f0be:	4c10      	ldr	r4, [pc, #64]	; (f100 <http_client_init+0xe8>)
    f0c0:	47a0      	blx	r4
    f0c2:	0002      	movs	r2, r0
    f0c4:	687b      	ldr	r3, [r7, #4]
    f0c6:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
    f0c8:	687b      	ldr	r3, [r7, #4]
    f0ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f0cc:	2b00      	cmp	r3, #0
    f0ce:	da02      	bge.n	f0d6 <http_client_init+0xbe>
			return -ENOSPC;
    f0d0:	231c      	movs	r3, #28
    f0d2:	425b      	negs	r3, r3
    f0d4:	e007      	b.n	f0e6 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
    f0d6:	687b      	ldr	r3, [r7, #4]
    f0d8:	2200      	movs	r2, #0
    f0da:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    f0dc:	687b      	ldr	r3, [r7, #4]
    f0de:	22d8      	movs	r2, #216	; 0xd8
    f0e0:	2100      	movs	r1, #0
    f0e2:	5099      	str	r1, [r3, r2]

	return 0;
    f0e4:	2300      	movs	r3, #0
}
    f0e6:	0018      	movs	r0, r3
    f0e8:	46bd      	mov	sp, r7
    f0ea:	b003      	add	sp, #12
    f0ec:	bd90      	pop	{r4, r7, pc}
    f0ee:	46c0      	nop			; (mov r8, r8)
    f0f0:	000184d1 	.word	0x000184d1
    f0f4:	00018495 	.word	0x00018495
    f0f8:	0001846d 	.word	0x0001846d
    f0fc:	0000f3c9 	.word	0x0000f3c9
    f100:	00010a91 	.word	0x00010a91

0000f104 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
    f104:	b580      	push	{r7, lr}
    f106:	b082      	sub	sp, #8
    f108:	af00      	add	r7, sp, #0
    f10a:	6078      	str	r0, [r7, #4]
    f10c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
    f10e:	687b      	ldr	r3, [r7, #4]
    f110:	2b00      	cmp	r3, #0
    f112:	d102      	bne.n	f11a <http_client_register_callback+0x16>
		return -EINVAL;
    f114:	2316      	movs	r3, #22
    f116:	425b      	negs	r3, r3
    f118:	e003      	b.n	f122 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
    f11a:	687b      	ldr	r3, [r7, #4]
    f11c:	683a      	ldr	r2, [r7, #0]
    f11e:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
    f120:	2300      	movs	r3, #0
}
    f122:	0018      	movs	r0, r3
    f124:	46bd      	mov	sp, r7
    f126:	b002      	add	sp, #8
    f128:	bd80      	pop	{r7, pc}
    f12a:	46c0      	nop			; (mov r8, r8)

0000f12c <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
    f12c:	b580      	push	{r7, lr}
    f12e:	b082      	sub	sp, #8
    f130:	af00      	add	r7, sp, #0
    f132:	6078      	str	r0, [r7, #4]
	switch (err) {
    f134:	687b      	ldr	r3, [r7, #4]
    f136:	330e      	adds	r3, #14
    f138:	2b0e      	cmp	r3, #14
    f13a:	d825      	bhi.n	f188 <_hwerr_to_stderr+0x5c>
    f13c:	009a      	lsls	r2, r3, #2
    f13e:	4b18      	ldr	r3, [pc, #96]	; (f1a0 <_hwerr_to_stderr+0x74>)
    f140:	18d3      	adds	r3, r2, r3
    f142:	681b      	ldr	r3, [r3, #0]
    f144:	469f      	mov	pc, r3
		case 0:
			return -EIO;
    f146:	2305      	movs	r3, #5
    f148:	425b      	negs	r3, r3
    f14a:	e024      	b.n	f196 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
    f14c:	2302      	movs	r3, #2
    f14e:	425b      	negs	r3, r3
    f150:	e021      	b.n	f196 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
    f152:	2370      	movs	r3, #112	; 0x70
    f154:	425b      	negs	r3, r3
    f156:	e01e      	b.n	f196 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
    f158:	230c      	movs	r3, #12
    f15a:	425b      	negs	r3, r3
    f15c:	e01b      	b.n	f196 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
    f15e:	2316      	movs	r3, #22
    f160:	425b      	negs	r3, r3
    f162:	e018      	b.n	f196 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
    f164:	230c      	movs	r3, #12
    f166:	425b      	negs	r3, r3
    f168:	e015      	b.n	f196 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
    f16a:	2305      	movs	r3, #5
    f16c:	425b      	negs	r3, r3
    f16e:	e012      	b.n	f196 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
    f170:	2379      	movs	r3, #121	; 0x79
    f172:	425b      	negs	r3, r3
    f174:	e00f      	b.n	f196 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
    f176:	2368      	movs	r3, #104	; 0x68
    f178:	425b      	negs	r3, r3
    f17a:	e00c      	b.n	f196 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
    f17c:	230b      	movs	r3, #11
    f17e:	425b      	negs	r3, r3
    f180:	e009      	b.n	f196 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
    f182:	2310      	movs	r3, #16
    f184:	425b      	negs	r3, r3
    f186:	e006      	b.n	f196 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
    f188:	687b      	ldr	r3, [r7, #4]
    f18a:	2b00      	cmp	r3, #0
    f18c:	da02      	bge.n	f194 <_hwerr_to_stderr+0x68>
				return -EIO;
    f18e:	2305      	movs	r3, #5
    f190:	425b      	negs	r3, r3
    f192:	e000      	b.n	f196 <_hwerr_to_stderr+0x6a>
			}
			return 0;
    f194:	2300      	movs	r3, #0
	}
}
    f196:	0018      	movs	r0, r3
    f198:	46bd      	mov	sp, r7
    f19a:	b002      	add	sp, #8
    f19c:	bd80      	pop	{r7, pc}
    f19e:	46c0      	nop			; (mov r8, r8)
    f1a0:	0001adcc 	.word	0x0001adcc

0000f1a4 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    f1a4:	b580      	push	{r7, lr}
    f1a6:	b08a      	sub	sp, #40	; 0x28
    f1a8:	af00      	add	r7, sp, #0
    f1aa:	603a      	str	r2, [r7, #0]
    f1ac:	1dfb      	adds	r3, r7, #7
    f1ae:	1c02      	adds	r2, r0, #0
    f1b0:	701a      	strb	r2, [r3, #0]
    f1b2:	1dbb      	adds	r3, r7, #6
    f1b4:	1c0a      	adds	r2, r1, #0
    f1b6:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
    f1b8:	1dfb      	adds	r3, r7, #7
    f1ba:	2200      	movs	r2, #0
    f1bc:	569a      	ldrsb	r2, [r3, r2]
    f1be:	4b4b      	ldr	r3, [pc, #300]	; (f2ec <http_client_socket_event_handler+0x148>)
    f1c0:	0092      	lsls	r2, r2, #2
    f1c2:	58d3      	ldr	r3, [r2, r3]
    f1c4:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
    f1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f1c8:	2b00      	cmp	r3, #0
    f1ca:	d100      	bne.n	f1ce <http_client_socket_event_handler+0x2a>
    f1cc:	e08a      	b.n	f2e4 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
    f1ce:	1dbb      	adds	r3, r7, #6
    f1d0:	781b      	ldrb	r3, [r3, #0]
    f1d2:	2b06      	cmp	r3, #6
    f1d4:	d040      	beq.n	f258 <http_client_socket_event_handler+0xb4>
    f1d6:	2b07      	cmp	r3, #7
    f1d8:	d060      	beq.n	f29c <http_client_socket_event_handler+0xf8>
    f1da:	2b05      	cmp	r3, #5
    f1dc:	d000      	beq.n	f1e0 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
    f1de:	e082      	b.n	f2e6 <http_client_socket_event_handler+0x142>
		return;
	}

	switch (msg_type) {
	case SOCKET_MSG_CONNECT:
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
    f1e0:	683b      	ldr	r3, [r7, #0]
    f1e2:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
    f1e4:	6a3b      	ldr	r3, [r7, #32]
    f1e6:	785b      	ldrb	r3, [r3, #1]
    f1e8:	b25b      	sxtb	r3, r3
    f1ea:	001a      	movs	r2, r3
    f1ec:	230c      	movs	r3, #12
    f1ee:	18fb      	adds	r3, r7, r3
    f1f0:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
    f1f2:	6a3b      	ldr	r3, [r7, #32]
    f1f4:	785b      	ldrb	r3, [r3, #1]
    f1f6:	b25b      	sxtb	r3, r3
    f1f8:	2b00      	cmp	r3, #0
    f1fa:	da0c      	bge.n	f216 <http_client_socket_event_handler+0x72>
			/* Remove reference. */
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    f1fc:	6a3b      	ldr	r3, [r7, #32]
    f1fe:	785b      	ldrb	r3, [r3, #1]
    f200:	b25b      	sxtb	r3, r3
    f202:	0018      	movs	r0, r3
    f204:	4b3a      	ldr	r3, [pc, #232]	; (f2f0 <http_client_socket_event_handler+0x14c>)
    f206:	4798      	blx	r3
    f208:	0002      	movs	r2, r0
    f20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f20c:	0011      	movs	r1, r2
    f20e:	0018      	movs	r0, r3
    f210:	4b38      	ldr	r3, [pc, #224]	; (f2f4 <http_client_socket_event_handler+0x150>)
    f212:	4798      	blx	r3
    		/* Start receive packet. */
    		_http_client_recv_packet(module);
			/* Try to check the FSM. */
			_http_client_request(module);
		}
    	break;
    f214:	e067      	b.n	f2e6 <http_client_socket_event_handler+0x142>
    	if (msg_connect->s8Error < 0) {
			/* Remove reference. */
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
		} else {
			/* Send event to callback. */
			if (module->cb != NULL) {
    f216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f21a:	2b00      	cmp	r3, #0
    f21c:	d006      	beq.n	f22c <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    f21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f222:	220c      	movs	r2, #12
    f224:	18ba      	adds	r2, r7, r2
    f226:	6a78      	ldr	r0, [r7, #36]	; 0x24
    f228:	2100      	movs	r1, #0
    f22a:	4798      	blx	r3
			}
			module->req.state = STATE_REQ_SEND_HEADER;
    f22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f22e:	2203      	movs	r2, #3
    f230:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Start timer. */
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    f232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f234:	6d58      	ldr	r0, [r3, #84]	; 0x54
    f236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f238:	6c99      	ldr	r1, [r3, #72]	; 0x48
    f23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f23c:	2258      	movs	r2, #88	; 0x58
    f23e:	5a9b      	ldrh	r3, [r3, r2]
    f240:	001a      	movs	r2, r3
    f242:	4b2d      	ldr	r3, [pc, #180]	; (f2f8 <http_client_socket_event_handler+0x154>)
    f244:	4798      	blx	r3
    		/* Start receive packet. */
    		_http_client_recv_packet(module);
    f246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f248:	0018      	movs	r0, r3
    f24a:	4b2c      	ldr	r3, [pc, #176]	; (f2fc <http_client_socket_event_handler+0x158>)
    f24c:	4798      	blx	r3
			/* Try to check the FSM. */
			_http_client_request(module);
    f24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f250:	0018      	movs	r0, r3
    f252:	4b2b      	ldr	r3, [pc, #172]	; (f300 <http_client_socket_event_handler+0x15c>)
    f254:	4798      	blx	r3
		}
    	break;
    f256:	e046      	b.n	f2e6 <http_client_socket_event_handler+0x142>
	case SOCKET_MSG_RECV:
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
    f258:	683b      	ldr	r3, [r7, #0]
    f25a:	61fb      	str	r3, [r7, #28]
    	/* Start post processing. */
    	if (msg_recv->s16BufferSize > 0) {
    f25c:	69fb      	ldr	r3, [r7, #28]
    f25e:	2204      	movs	r2, #4
    f260:	5e9b      	ldrsh	r3, [r3, r2]
    f262:	2b00      	cmp	r3, #0
    f264:	dd09      	ble.n	f27a <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    f266:	69fb      	ldr	r3, [r7, #28]
    f268:	2204      	movs	r2, #4
    f26a:	5e9b      	ldrsh	r3, [r3, r2]
    f26c:	001a      	movs	r2, r3
    f26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f270:	0011      	movs	r1, r2
    f272:	0018      	movs	r0, r3
    f274:	4b23      	ldr	r3, [pc, #140]	; (f304 <http_client_socket_event_handler+0x160>)
    f276:	4798      	blx	r3
    f278:	e00b      	b.n	f292 <http_client_socket_event_handler+0xee>
		} else {
			/* Socket was occurred errors. Close this session. */
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    f27a:	69fb      	ldr	r3, [r7, #28]
    f27c:	2204      	movs	r2, #4
    f27e:	5e9b      	ldrsh	r3, [r3, r2]
    f280:	0018      	movs	r0, r3
    f282:	4b1b      	ldr	r3, [pc, #108]	; (f2f0 <http_client_socket_event_handler+0x14c>)
    f284:	4798      	blx	r3
    f286:	0002      	movs	r2, r0
    f288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f28a:	0011      	movs	r1, r2
    f28c:	0018      	movs	r0, r3
    f28e:	4b19      	ldr	r3, [pc, #100]	; (f2f4 <http_client_socket_event_handler+0x150>)
    f290:	4798      	blx	r3
		}
		/* COntinue to receive the packet. */
		_http_client_recv_packet(module);
    f292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f294:	0018      	movs	r0, r3
    f296:	4b19      	ldr	r3, [pc, #100]	; (f2fc <http_client_socket_event_handler+0x158>)
    f298:	4798      	blx	r3
		break;
    f29a:	e024      	b.n	f2e6 <http_client_socket_event_handler+0x142>
	case SOCKET_MSG_SEND:
		send_ret = *(int16_t*)msg_data;
    f29c:	231a      	movs	r3, #26
    f29e:	18fb      	adds	r3, r7, r3
    f2a0:	683a      	ldr	r2, [r7, #0]
    f2a2:	8812      	ldrh	r2, [r2, #0]
    f2a4:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
    f2a6:	231a      	movs	r3, #26
    f2a8:	18fb      	adds	r3, r7, r3
    f2aa:	2200      	movs	r2, #0
    f2ac:	5e9b      	ldrsh	r3, [r3, r2]
    f2ae:	2b00      	cmp	r3, #0
    f2b0:	da0d      	bge.n	f2ce <http_client_socket_event_handler+0x12a>
			/* Send failed. */
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    f2b2:	231a      	movs	r3, #26
    f2b4:	18fb      	adds	r3, r7, r3
    f2b6:	2200      	movs	r2, #0
    f2b8:	5e9b      	ldrsh	r3, [r3, r2]
    f2ba:	0018      	movs	r0, r3
    f2bc:	4b0c      	ldr	r3, [pc, #48]	; (f2f0 <http_client_socket_event_handler+0x14c>)
    f2be:	4798      	blx	r3
    f2c0:	0002      	movs	r2, r0
    f2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f2c4:	0011      	movs	r1, r2
    f2c6:	0018      	movs	r0, r3
    f2c8:	4b0a      	ldr	r3, [pc, #40]	; (f2f4 <http_client_socket_event_handler+0x150>)
    f2ca:	4798      	blx	r3
    f2cc:	e003      	b.n	f2d6 <http_client_socket_event_handler+0x132>
		} else {
			/* Try to check the FSM. */
    		_http_client_request(module);
    f2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f2d0:	0018      	movs	r0, r3
    f2d2:	4b0b      	ldr	r3, [pc, #44]	; (f300 <http_client_socket_event_handler+0x15c>)
    f2d4:	4798      	blx	r3
		}
		/* Disable sending flag. */
		module->sending = 0;
    f2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f2d8:	2241      	movs	r2, #65	; 0x41
    f2da:	5c99      	ldrb	r1, [r3, r2]
    f2dc:	2001      	movs	r0, #1
    f2de:	4381      	bics	r1, r0
    f2e0:	5499      	strb	r1, [r3, r2]
    	break;
    f2e2:	e000      	b.n	f2e6 <http_client_socket_event_handler+0x142>

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
		return;
    f2e4:	46c0      	nop			; (mov r8, r8)
    	break;
	default:
		break;
	}

}
    f2e6:	46bd      	mov	sp, r7
    f2e8:	b00a      	add	sp, #40	; 0x28
    f2ea:	bd80      	pop	{r7, pc}
    f2ec:	200000c8 	.word	0x200000c8
    f2f0:	0000f12d 	.word	0x0000f12d
    f2f4:	0000f7a1 	.word	0x0000f7a1
    f2f8:	00010b4d 	.word	0x00010b4d
    f2fc:	00010011 	.word	0x00010011
    f300:	0000f8f5 	.word	0x0000f8f5
    f304:	00010075 	.word	0x00010075

0000f308 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    f308:	b580      	push	{r7, lr}
    f30a:	b088      	sub	sp, #32
    f30c:	af00      	add	r7, sp, #0
    f30e:	6078      	str	r0, [r7, #4]
    f310:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
    f312:	2300      	movs	r3, #0
    f314:	61fb      	str	r3, [r7, #28]
    f316:	e048      	b.n	f3aa <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
    f318:	4b27      	ldr	r3, [pc, #156]	; (f3b8 <http_client_socket_resolve_handler+0xb0>)
    f31a:	69fa      	ldr	r2, [r7, #28]
    f31c:	0092      	lsls	r2, r2, #2
    f31e:	58d3      	ldr	r3, [r2, r3]
    f320:	2b00      	cmp	r3, #0
    f322:	d03f      	beq.n	f3a4 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
    f324:	4b24      	ldr	r3, [pc, #144]	; (f3b8 <http_client_socket_resolve_handler+0xb0>)
    f326:	69fa      	ldr	r2, [r7, #28]
    f328:	0092      	lsls	r2, r2, #2
    f32a:	58d3      	ldr	r3, [r2, r3]
    f32c:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    f32e:	69bb      	ldr	r3, [r7, #24]
    f330:	1c5a      	adds	r2, r3, #1
    f332:	687b      	ldr	r3, [r7, #4]
    f334:	0011      	movs	r1, r2
    f336:	0018      	movs	r0, r3
    f338:	4b20      	ldr	r3, [pc, #128]	; (f3bc <http_client_socket_resolve_handler+0xb4>)
    f33a:	4798      	blx	r3
    f33c:	1e03      	subs	r3, r0, #0
    f33e:	d131      	bne.n	f3a4 <http_client_socket_resolve_handler+0x9c>
    f340:	69bb      	ldr	r3, [r7, #24]
    f342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f344:	2b01      	cmp	r3, #1
    f346:	d12d      	bne.n	f3a4 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    f348:	683b      	ldr	r3, [r7, #0]
    f34a:	2b00      	cmp	r3, #0
    f34c:	d107      	bne.n	f35e <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    f34e:	2376      	movs	r3, #118	; 0x76
    f350:	425a      	negs	r2, r3
    f352:	69bb      	ldr	r3, [r7, #24]
    f354:	0011      	movs	r1, r2
    f356:	0018      	movs	r0, r3
    f358:	4b19      	ldr	r3, [pc, #100]	; (f3c0 <http_client_socket_resolve_handler+0xb8>)
    f35a:	4798      	blx	r3
					return;
    f35c:	e028      	b.n	f3b0 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
    f35e:	2308      	movs	r3, #8
    f360:	18fb      	adds	r3, r7, r3
    f362:	2202      	movs	r2, #2
    f364:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
    f366:	69bb      	ldr	r3, [r7, #24]
    f368:	2250      	movs	r2, #80	; 0x50
    f36a:	5a9b      	ldrh	r3, [r3, r2]
    f36c:	021b      	lsls	r3, r3, #8
    f36e:	b21a      	sxth	r2, r3
    f370:	69bb      	ldr	r3, [r7, #24]
    f372:	2150      	movs	r1, #80	; 0x50
    f374:	5a5b      	ldrh	r3, [r3, r1]
    f376:	0a1b      	lsrs	r3, r3, #8
    f378:	b29b      	uxth	r3, r3
    f37a:	b21b      	sxth	r3, r3
    f37c:	4313      	orrs	r3, r2
    f37e:	b21b      	sxth	r3, r3
    f380:	b29a      	uxth	r2, r3
    f382:	2308      	movs	r3, #8
    f384:	18fb      	adds	r3, r7, r3
    f386:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
    f388:	2308      	movs	r3, #8
    f38a:	18fb      	adds	r3, r7, r3
    f38c:	683a      	ldr	r2, [r7, #0]
    f38e:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    f390:	69bb      	ldr	r3, [r7, #24]
    f392:	781b      	ldrb	r3, [r3, #0]
    f394:	b25b      	sxtb	r3, r3
    f396:	2208      	movs	r2, #8
    f398:	18b9      	adds	r1, r7, r2
    f39a:	2210      	movs	r2, #16
    f39c:	0018      	movs	r0, r3
    f39e:	4b09      	ldr	r3, [pc, #36]	; (f3c4 <http_client_socket_resolve_handler+0xbc>)
    f3a0:	4798      	blx	r3
				return;
    f3a2:	e005      	b.n	f3b0 <http_client_socket_resolve_handler+0xa8>
{
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
    f3a4:	69fb      	ldr	r3, [r7, #28]
    f3a6:	3301      	adds	r3, #1
    f3a8:	61fb      	str	r3, [r7, #28]
    f3aa:	69fb      	ldr	r3, [r7, #28]
    f3ac:	2b06      	cmp	r3, #6
    f3ae:	ddb3      	ble.n	f318 <http_client_socket_resolve_handler+0x10>
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
				return;
			}
		}
	}
}
    f3b0:	46bd      	mov	sp, r7
    f3b2:	b008      	add	sp, #32
    f3b4:	bd80      	pop	{r7, pc}
    f3b6:	46c0      	nop			; (mov r8, r8)
    f3b8:	200000c8 	.word	0x200000c8
    f3bc:	00018929 	.word	0x00018929
    f3c0:	0000f7a1 	.word	0x0000f7a1
    f3c4:	0000d2a1 	.word	0x0000d2a1

0000f3c8 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
    f3c8:	b580      	push	{r7, lr}
    f3ca:	b086      	sub	sp, #24
    f3cc:	af00      	add	r7, sp, #0
    f3ce:	60f8      	str	r0, [r7, #12]
    f3d0:	60b9      	str	r1, [r7, #8]
    f3d2:	607a      	str	r2, [r7, #4]
    f3d4:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
    f3d6:	687b      	ldr	r3, [r7, #4]
    f3d8:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
    f3da:	697b      	ldr	r3, [r7, #20]
    f3dc:	2b00      	cmp	r3, #0
    f3de:	d007      	beq.n	f3f0 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
    f3e0:	233e      	movs	r3, #62	; 0x3e
    f3e2:	425a      	negs	r2, r3
    f3e4:	697b      	ldr	r3, [r7, #20]
    f3e6:	0011      	movs	r1, r2
    f3e8:	0018      	movs	r0, r3
    f3ea:	4b03      	ldr	r3, [pc, #12]	; (f3f8 <http_client_timer_callback+0x30>)
    f3ec:	4798      	blx	r3
    f3ee:	e000      	b.n	f3f2 <http_client_timer_callback+0x2a>
{
	struct http_client_module *module_inst = (struct http_client_module *)context;

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
		return;
    f3f0:	46c0      	nop			; (mov r8, r8)
	}

	_http_client_clear_conn(module_inst, -ETIME);
}
    f3f2:	46bd      	mov	sp, r7
    f3f4:	b006      	add	sp, #24
    f3f6:	bd80      	pop	{r7, pc}
    f3f8:	0000f7a1 	.word	0x0000f7a1

0000f3fc <_is_ip>:

static int _is_ip(const char *host)
{
    f3fc:	b580      	push	{r7, lr}
    f3fe:	b084      	sub	sp, #16
    f400:	af00      	add	r7, sp, #0
    f402:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
    f404:	2300      	movs	r3, #0
    f406:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
    f408:	e03a      	b.n	f480 <_is_ip+0x84>
		ch = *host++;
    f40a:	687b      	ldr	r3, [r7, #4]
    f40c:	1c5a      	adds	r2, r3, #1
    f40e:	607a      	str	r2, [r7, #4]
    f410:	220b      	movs	r2, #11
    f412:	18ba      	adds	r2, r7, r2
    f414:	781b      	ldrb	r3, [r3, #0]
    f416:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    f418:	230b      	movs	r3, #11
    f41a:	18fb      	adds	r3, r7, r3
    f41c:	781b      	ldrb	r3, [r3, #0]
    f41e:	2b60      	cmp	r3, #96	; 0x60
    f420:	d904      	bls.n	f42c <_is_ip+0x30>
    f422:	230b      	movs	r3, #11
    f424:	18fb      	adds	r3, r7, r3
    f426:	781b      	ldrb	r3, [r3, #0]
    f428:	2b66      	cmp	r3, #102	; 0x66
    f42a:	d913      	bls.n	f454 <_is_ip+0x58>
    f42c:	230b      	movs	r3, #11
    f42e:	18fb      	adds	r3, r7, r3
    f430:	781b      	ldrb	r3, [r3, #0]
    f432:	2b40      	cmp	r3, #64	; 0x40
    f434:	d904      	bls.n	f440 <_is_ip+0x44>
    f436:	230b      	movs	r3, #11
    f438:	18fb      	adds	r3, r7, r3
    f43a:	781b      	ldrb	r3, [r3, #0]
    f43c:	2b46      	cmp	r3, #70	; 0x46
    f43e:	d909      	bls.n	f454 <_is_ip+0x58>
    f440:	230b      	movs	r3, #11
    f442:	18fb      	adds	r3, r7, r3
    f444:	781b      	ldrb	r3, [r3, #0]
    f446:	2b3a      	cmp	r3, #58	; 0x3a
    f448:	d004      	beq.n	f454 <_is_ip+0x58>
    f44a:	230b      	movs	r3, #11
    f44c:	18fb      	adds	r3, r7, r3
    f44e:	781b      	ldrb	r3, [r3, #0]
    f450:	2b2f      	cmp	r3, #47	; 0x2f
    f452:	d102      	bne.n	f45a <_is_ip+0x5e>
			isv6 = 1;
    f454:	2301      	movs	r3, #1
    f456:	60fb      	str	r3, [r7, #12]
    f458:	e012      	b.n	f480 <_is_ip+0x84>
		} else if (ch == '.') {
    f45a:	230b      	movs	r3, #11
    f45c:	18fb      	adds	r3, r7, r3
    f45e:	781b      	ldrb	r3, [r3, #0]
    f460:	2b2e      	cmp	r3, #46	; 0x2e
    f462:	d104      	bne.n	f46e <_is_ip+0x72>
			if (isv6) {
    f464:	68fb      	ldr	r3, [r7, #12]
    f466:	2b00      	cmp	r3, #0
    f468:	d00a      	beq.n	f480 <_is_ip+0x84>
				return 0;
    f46a:	2300      	movs	r3, #0
    f46c:	e00d      	b.n	f48a <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
    f46e:	230b      	movs	r3, #11
    f470:	18fb      	adds	r3, r7, r3
    f472:	781b      	ldrb	r3, [r3, #0]
    f474:	2230      	movs	r2, #48	; 0x30
    f476:	4013      	ands	r3, r2
    f478:	2b30      	cmp	r3, #48	; 0x30
    f47a:	d001      	beq.n	f480 <_is_ip+0x84>
			return 0;
    f47c:	2300      	movs	r3, #0
    f47e:	e004      	b.n	f48a <_is_ip+0x8e>
static int _is_ip(const char *host)
{
	uint32_t isv6 = 0;
	char ch;

	while (*host != '\0') {
    f480:	687b      	ldr	r3, [r7, #4]
    f482:	781b      	ldrb	r3, [r3, #0]
    f484:	2b00      	cmp	r3, #0
    f486:	d1c0      	bne.n	f40a <_is_ip+0xe>
			}
		} else if ((ch & 0x30) != 0x30) {
			return 0;
		}
	}
	return 1;
    f488:	2301      	movs	r3, #1
}
    f48a:	0018      	movs	r0, r3
    f48c:	46bd      	mov	sp, r7
    f48e:	b004      	add	sp, #16
    f490:	bd80      	pop	{r7, pc}
    f492:	46c0      	nop			; (mov r8, r8)

0000f494 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
    f494:	b5b0      	push	{r4, r5, r7, lr}
    f496:	b08e      	sub	sp, #56	; 0x38
    f498:	af00      	add	r7, sp, #0
    f49a:	60f8      	str	r0, [r7, #12]
    f49c:	60b9      	str	r1, [r7, #8]
    f49e:	603b      	str	r3, [r7, #0]
    f4a0:	1dfb      	adds	r3, r7, #7
    f4a2:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
    f4a4:	2337      	movs	r3, #55	; 0x37
    f4a6:	18fb      	adds	r3, r7, r3
    f4a8:	2200      	movs	r2, #0
    f4aa:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
    f4ac:	2300      	movs	r3, #0
    f4ae:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
    f4b0:	2300      	movs	r3, #0
    f4b2:	633b      	str	r3, [r7, #48]	; 0x30
    f4b4:	2300      	movs	r3, #0
    f4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    f4b8:	2300      	movs	r3, #0
    f4ba:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
    f4bc:	68fb      	ldr	r3, [r7, #12]
    f4be:	2b00      	cmp	r3, #0
    f4c0:	d102      	bne.n	f4c8 <http_client_send_request+0x34>
		return -EINVAL;
    f4c2:	2316      	movs	r3, #22
    f4c4:	425b      	negs	r3, r3
    f4c6:	e145      	b.n	f754 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
    f4c8:	68fb      	ldr	r3, [r7, #12]
    f4ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f4cc:	2b02      	cmp	r3, #2
    f4ce:	d902      	bls.n	f4d6 <http_client_send_request+0x42>
		return -EBUSY;
    f4d0:	2310      	movs	r3, #16
    f4d2:	425b      	negs	r3, r3
    f4d4:	e13e      	b.n	f754 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
    f4d6:	49a1      	ldr	r1, [pc, #644]	; (f75c <http_client_send_request+0x2c8>)
    f4d8:	68bb      	ldr	r3, [r7, #8]
    f4da:	2207      	movs	r2, #7
    f4dc:	0018      	movs	r0, r3
    f4de:	4ba0      	ldr	r3, [pc, #640]	; (f760 <http_client_send_request+0x2cc>)
    f4e0:	4798      	blx	r3
    f4e2:	1e03      	subs	r3, r0, #0
    f4e4:	d102      	bne.n	f4ec <http_client_send_request+0x58>
		i = 7;
    f4e6:	2307      	movs	r3, #7
    f4e8:	633b      	str	r3, [r7, #48]	; 0x30
    f4ea:	e009      	b.n	f500 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
    f4ec:	499d      	ldr	r1, [pc, #628]	; (f764 <http_client_send_request+0x2d0>)
    f4ee:	68bb      	ldr	r3, [r7, #8]
    f4f0:	2208      	movs	r2, #8
    f4f2:	0018      	movs	r0, r3
    f4f4:	4b9a      	ldr	r3, [pc, #616]	; (f760 <http_client_send_request+0x2cc>)
    f4f6:	4798      	blx	r3
    f4f8:	1e03      	subs	r3, r0, #0
    f4fa:	d101      	bne.n	f500 <http_client_send_request+0x6c>
		i = 8;
    f4fc:	2308      	movs	r3, #8
    f4fe:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    f500:	68fb      	ldr	r3, [r7, #12]
    f502:	1c5c      	adds	r4, r3, #1
    f504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f506:	68ba      	ldr	r2, [r7, #8]
    f508:	18d5      	adds	r5, r2, r3
    f50a:	68fb      	ldr	r3, [r7, #12]
    f50c:	3301      	adds	r3, #1
    f50e:	0018      	movs	r0, r3
    f510:	4b95      	ldr	r3, [pc, #596]	; (f768 <http_client_send_request+0x2d4>)
    f512:	4798      	blx	r3
    f514:	0003      	movs	r3, r0
    f516:	001a      	movs	r2, r3
    f518:	0029      	movs	r1, r5
    f51a:	0020      	movs	r0, r4
    f51c:	4b90      	ldr	r3, [pc, #576]	; (f760 <http_client_send_request+0x2cc>)
    f51e:	4798      	blx	r3
    f520:	0003      	movs	r3, r0
    f522:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
    f524:	e00d      	b.n	f542 <http_client_send_request+0xae>
		module->host[j++] = url[i];
    f526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f528:	1c5a      	adds	r2, r3, #1
    f52a:	62fa      	str	r2, [r7, #44]	; 0x2c
    f52c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    f52e:	68b9      	ldr	r1, [r7, #8]
    f530:	188a      	adds	r2, r1, r2
    f532:	7811      	ldrb	r1, [r2, #0]
    f534:	68fa      	ldr	r2, [r7, #12]
    f536:	18d3      	adds	r3, r2, r3
    f538:	1c0a      	adds	r2, r1, #0
    f53a:	705a      	strb	r2, [r3, #1]
	} else if (!strncmp(url, "https://", 8)) {
		i = 8;
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));

	for (; url[i] != '\0' && url[i] != '/'; i++) {
    f53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f53e:	3301      	adds	r3, #1
    f540:	633b      	str	r3, [r7, #48]	; 0x30
    f542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f544:	68ba      	ldr	r2, [r7, #8]
    f546:	18d3      	adds	r3, r2, r3
    f548:	781b      	ldrb	r3, [r3, #0]
    f54a:	2b00      	cmp	r3, #0
    f54c:	d005      	beq.n	f55a <http_client_send_request+0xc6>
    f54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f550:	68ba      	ldr	r2, [r7, #8]
    f552:	18d3      	adds	r3, r2, r3
    f554:	781b      	ldrb	r3, [r3, #0]
    f556:	2b2f      	cmp	r3, #47	; 0x2f
    f558:	d1e5      	bne.n	f526 <http_client_send_request+0x92>
		module->host[j++] = url[i];
	}
	module->host[j] = '\0';
    f55a:	68fa      	ldr	r2, [r7, #12]
    f55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f55e:	18d3      	adds	r3, r2, r3
    f560:	3301      	adds	r3, #1
    f562:	2200      	movs	r2, #0
    f564:	701a      	strb	r2, [r3, #0]
	uri = url + i;
    f566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f568:	68ba      	ldr	r2, [r7, #8]
    f56a:	18d3      	adds	r3, r2, r3
    f56c:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
    f56e:	68fb      	ldr	r3, [r7, #12]
    f570:	3301      	adds	r3, #1
    f572:	781b      	ldrb	r3, [r3, #0]
    f574:	2b00      	cmp	r3, #0
    f576:	d102      	bne.n	f57e <http_client_send_request+0xea>
		return -EINVAL;
    f578:	2316      	movs	r3, #22
    f57a:	425b      	negs	r3, r3
    f57c:	e0ea      	b.n	f754 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    f57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f580:	0018      	movs	r0, r3
    f582:	4b79      	ldr	r3, [pc, #484]	; (f768 <http_client_send_request+0x2d4>)
    f584:	4798      	blx	r3
    f586:	1e03      	subs	r3, r0, #0
    f588:	2b3f      	cmp	r3, #63	; 0x3f
    f58a:	d902      	bls.n	f592 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
    f58c:	235b      	movs	r3, #91	; 0x5b
    f58e:	425b      	negs	r3, r3
    f590:	e0e0      	b.n	f754 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
    f592:	68fb      	ldr	r3, [r7, #12]
    f594:	22d4      	movs	r2, #212	; 0xd4
    f596:	589b      	ldr	r3, [r3, r2]
    f598:	2b00      	cmp	r3, #0
    f59a:	d005      	beq.n	f5a8 <http_client_send_request+0x114>
		free(module->req.ext_header);
    f59c:	68fb      	ldr	r3, [r7, #12]
    f59e:	22d4      	movs	r2, #212	; 0xd4
    f5a0:	589b      	ldr	r3, [r3, r2]
    f5a2:	0018      	movs	r0, r3
    f5a4:	4b71      	ldr	r3, [pc, #452]	; (f76c <http_client_send_request+0x2d8>)
    f5a6:	4798      	blx	r3
	}
	if (ext_header != NULL) {
    f5a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f5aa:	2b00      	cmp	r3, #0
    f5ac:	d010      	beq.n	f5d0 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
    f5ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f5b0:	0018      	movs	r0, r3
    f5b2:	4b6f      	ldr	r3, [pc, #444]	; (f770 <http_client_send_request+0x2dc>)
    f5b4:	4798      	blx	r3
    f5b6:	0003      	movs	r3, r0
    f5b8:	0019      	movs	r1, r3
    f5ba:	68fb      	ldr	r3, [r7, #12]
    f5bc:	22d4      	movs	r2, #212	; 0xd4
    f5be:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
    f5c0:	68fb      	ldr	r3, [r7, #12]
    f5c2:	22d4      	movs	r2, #212	; 0xd4
    f5c4:	589b      	ldr	r3, [r3, r2]
    f5c6:	2b00      	cmp	r3, #0
    f5c8:	d106      	bne.n	f5d8 <http_client_send_request+0x144>
			return -ENOMEM;
    f5ca:	230c      	movs	r3, #12
    f5cc:	425b      	negs	r3, r3
    f5ce:	e0c1      	b.n	f754 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
    f5d0:	68fb      	ldr	r3, [r7, #12]
    f5d2:	22d4      	movs	r2, #212	; 0xd4
    f5d4:	2100      	movs	r1, #0
    f5d6:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
    f5d8:	68fb      	ldr	r3, [r7, #12]
    f5da:	2241      	movs	r2, #65	; 0x41
    f5dc:	5c99      	ldrb	r1, [r3, r2]
    f5de:	2001      	movs	r0, #1
    f5e0:	4381      	bics	r1, r0
    f5e2:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
    f5e4:	68fb      	ldr	r3, [r7, #12]
    f5e6:	2200      	movs	r2, #0
    f5e8:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
    f5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f5ec:	781b      	ldrb	r3, [r3, #0]
    f5ee:	2b2f      	cmp	r3, #47	; 0x2f
    f5f0:	d107      	bne.n	f602 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
    f5f2:	68fb      	ldr	r3, [r7, #12]
    f5f4:	3370      	adds	r3, #112	; 0x70
    f5f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f5f8:	0011      	movs	r1, r2
    f5fa:	0018      	movs	r0, r3
    f5fc:	4b5d      	ldr	r3, [pc, #372]	; (f774 <http_client_send_request+0x2e0>)
    f5fe:	4798      	blx	r3
    f600:	e00f      	b.n	f622 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
    f602:	68fb      	ldr	r3, [r7, #12]
    f604:	2270      	movs	r2, #112	; 0x70
    f606:	212f      	movs	r1, #47	; 0x2f
    f608:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
    f60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f60c:	781b      	ldrb	r3, [r3, #0]
    f60e:	2b00      	cmp	r3, #0
    f610:	d007      	beq.n	f622 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
    f612:	68fb      	ldr	r3, [r7, #12]
    f614:	3370      	adds	r3, #112	; 0x70
    f616:	3301      	adds	r3, #1
    f618:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f61a:	0011      	movs	r1, r2
    f61c:	0018      	movs	r0, r3
    f61e:	4b55      	ldr	r3, [pc, #340]	; (f774 <http_client_send_request+0x2e0>)
    f620:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
    f622:	683b      	ldr	r3, [r7, #0]
    f624:	2b00      	cmp	r3, #0
    f626:	d007      	beq.n	f638 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    f628:	68fb      	ldr	r3, [r7, #12]
    f62a:	33b0      	adds	r3, #176	; 0xb0
    f62c:	6839      	ldr	r1, [r7, #0]
    f62e:	2218      	movs	r2, #24
    f630:	0018      	movs	r0, r3
    f632:	4b51      	ldr	r3, [pc, #324]	; (f778 <http_client_send_request+0x2e4>)
    f634:	4798      	blx	r3
    f636:	e006      	b.n	f646 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    f638:	68fb      	ldr	r3, [r7, #12]
    f63a:	33b0      	adds	r3, #176	; 0xb0
    f63c:	2218      	movs	r2, #24
    f63e:	2100      	movs	r1, #0
    f640:	0018      	movs	r0, r3
    f642:	4b4e      	ldr	r3, [pc, #312]	; (f77c <http_client_send_request+0x2e8>)
    f644:	4798      	blx	r3
	}

	module->req.method = method;
    f646:	68fb      	ldr	r3, [r7, #12]
    f648:	1dfa      	adds	r2, r7, #7
    f64a:	21c8      	movs	r1, #200	; 0xc8
    f64c:	7812      	ldrb	r2, [r2, #0]
    f64e:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
    f650:	68fb      	ldr	r3, [r7, #12]
    f652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f654:	2b01      	cmp	r3, #1
    f656:	d003      	beq.n	f660 <http_client_send_request+0x1cc>
    f658:	d316      	bcc.n	f688 <http_client_send_request+0x1f4>
    f65a:	2b02      	cmp	r3, #2
    f65c:	d004      	beq.n	f668 <http_client_send_request+0x1d4>
    f65e:	e074      	b.n	f74a <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
    f660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f662:	2b00      	cmp	r3, #0
    f664:	d100      	bne.n	f668 <http_client_send_request+0x1d4>
    f666:	e073      	b.n	f750 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
    f668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f66a:	2b00      	cmp	r3, #0
    f66c:	d107      	bne.n	f67e <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
    f66e:	68fb      	ldr	r3, [r7, #12]
    f670:	2203      	movs	r2, #3
    f672:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
    f674:	68fb      	ldr	r3, [r7, #12]
    f676:	0018      	movs	r0, r3
    f678:	4b41      	ldr	r3, [pc, #260]	; (f780 <http_client_send_request+0x2ec>)
    f67a:	4798      	blx	r3
			break;
    f67c:	e069      	b.n	f752 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
    f67e:	68fb      	ldr	r3, [r7, #12]
    f680:	2100      	movs	r1, #0
    f682:	0018      	movs	r0, r3
    f684:	4b3f      	ldr	r3, [pc, #252]	; (f784 <http_client_send_request+0x2f0>)
    f686:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
    f688:	68fb      	ldr	r3, [r7, #12]
    f68a:	2252      	movs	r2, #82	; 0x52
    f68c:	5c9b      	ldrb	r3, [r3, r2]
    f68e:	2b00      	cmp	r3, #0
    f690:	d007      	beq.n	f6a2 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
    f692:	2337      	movs	r3, #55	; 0x37
    f694:	18fb      	adds	r3, r7, r3
    f696:	2237      	movs	r2, #55	; 0x37
    f698:	18ba      	adds	r2, r7, r2
    f69a:	7812      	ldrb	r2, [r2, #0]
    f69c:	2101      	movs	r1, #1
    f69e:	430a      	orrs	r2, r1
    f6a0:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    f6a2:	2337      	movs	r3, #55	; 0x37
    f6a4:	18fb      	adds	r3, r7, r3
    f6a6:	781b      	ldrb	r3, [r3, #0]
    f6a8:	001a      	movs	r2, r3
    f6aa:	2101      	movs	r1, #1
    f6ac:	2002      	movs	r0, #2
    f6ae:	4b36      	ldr	r3, [pc, #216]	; (f788 <http_client_send_request+0x2f4>)
    f6b0:	4798      	blx	r3
    f6b2:	0003      	movs	r3, r0
    f6b4:	001a      	movs	r2, r3
    f6b6:	68fb      	ldr	r3, [r7, #12]
    f6b8:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
    f6ba:	68fb      	ldr	r3, [r7, #12]
    f6bc:	781b      	ldrb	r3, [r3, #0]
    f6be:	b25b      	sxtb	r3, r3
    f6c0:	2b00      	cmp	r3, #0
    f6c2:	db3f      	blt.n	f744 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
    f6c4:	68fb      	ldr	r3, [r7, #12]
    f6c6:	781b      	ldrb	r3, [r3, #0]
    f6c8:	b25b      	sxtb	r3, r3
    f6ca:	001a      	movs	r2, r3
    f6cc:	4b2f      	ldr	r3, [pc, #188]	; (f78c <http_client_send_request+0x2f8>)
    f6ce:	0092      	lsls	r2, r2, #2
    f6d0:	68f9      	ldr	r1, [r7, #12]
    f6d2:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
    f6d4:	68fb      	ldr	r3, [r7, #12]
    f6d6:	3301      	adds	r3, #1
    f6d8:	0018      	movs	r0, r3
    f6da:	4b2d      	ldr	r3, [pc, #180]	; (f790 <http_client_send_request+0x2fc>)
    f6dc:	4798      	blx	r3
    f6de:	1e03      	subs	r3, r0, #0
    f6e0:	d027      	beq.n	f732 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
    f6e2:	2314      	movs	r3, #20
    f6e4:	18fb      	adds	r3, r7, r3
    f6e6:	2202      	movs	r2, #2
    f6e8:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
    f6ea:	68fb      	ldr	r3, [r7, #12]
    f6ec:	2250      	movs	r2, #80	; 0x50
    f6ee:	5a9b      	ldrh	r3, [r3, r2]
    f6f0:	021b      	lsls	r3, r3, #8
    f6f2:	b21a      	sxth	r2, r3
    f6f4:	68fb      	ldr	r3, [r7, #12]
    f6f6:	2150      	movs	r1, #80	; 0x50
    f6f8:	5a5b      	ldrh	r3, [r3, r1]
    f6fa:	0a1b      	lsrs	r3, r3, #8
    f6fc:	b29b      	uxth	r3, r3
    f6fe:	b21b      	sxth	r3, r3
    f700:	4313      	orrs	r3, r2
    f702:	b21b      	sxth	r3, r3
    f704:	b29a      	uxth	r2, r3
    f706:	2314      	movs	r3, #20
    f708:	18fb      	adds	r3, r7, r3
    f70a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    f70c:	68fb      	ldr	r3, [r7, #12]
    f70e:	3301      	adds	r3, #1
    f710:	0018      	movs	r0, r3
    f712:	4b20      	ldr	r3, [pc, #128]	; (f794 <http_client_send_request+0x300>)
    f714:	4798      	blx	r3
    f716:	0002      	movs	r2, r0
    f718:	2314      	movs	r3, #20
    f71a:	18fb      	adds	r3, r7, r3
    f71c:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    f71e:	68fb      	ldr	r3, [r7, #12]
    f720:	781b      	ldrb	r3, [r3, #0]
    f722:	b25b      	sxtb	r3, r3
    f724:	2214      	movs	r2, #20
    f726:	18b9      	adds	r1, r7, r2
    f728:	2210      	movs	r2, #16
    f72a:	0018      	movs	r0, r3
    f72c:	4b1a      	ldr	r3, [pc, #104]	; (f798 <http_client_send_request+0x304>)
    f72e:	4798      	blx	r3
    f730:	e004      	b.n	f73c <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
    f732:	68fb      	ldr	r3, [r7, #12]
    f734:	3301      	adds	r3, #1
    f736:	0018      	movs	r0, r3
    f738:	4b18      	ldr	r3, [pc, #96]	; (f79c <http_client_send_request+0x308>)
    f73a:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
    f73c:	68fb      	ldr	r3, [r7, #12]
    f73e:	2201      	movs	r2, #1
    f740:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
    f742:	e006      	b.n	f752 <http_client_send_request+0x2be>
			} else {
				gethostbyname((uint8*)module->host);
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
		} else {
			return -ENOSPC;
    f744:	231c      	movs	r3, #28
    f746:	425b      	negs	r3, r3
    f748:	e004      	b.n	f754 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
    f74a:	230b      	movs	r3, #11
    f74c:	425b      	negs	r3, r3
    f74e:	e001      	b.n	f754 <http_client_send_request+0x2c0>
	module->req.method = method;
	
	switch (module->req.state) {
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
			break; /* Currently try to connect to the same server. */
    f750:	46c0      	nop			; (mov r8, r8)
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
	}

	return 0;
    f752:	2300      	movs	r3, #0
}
    f754:	0018      	movs	r0, r3
    f756:	46bd      	mov	sp, r7
    f758:	b00e      	add	sp, #56	; 0x38
    f75a:	bdb0      	pop	{r4, r5, r7, pc}
    f75c:	0001ac9c 	.word	0x0001ac9c
    f760:	00018995 	.word	0x00018995
    f764:	0001aca4 	.word	0x0001aca4
    f768:	00018987 	.word	0x00018987
    f76c:	00018481 	.word	0x00018481
    f770:	0001894d 	.word	0x0001894d
    f774:	0001893d 	.word	0x0001893d
    f778:	00018495 	.word	0x00018495
    f77c:	000184d1 	.word	0x000184d1
    f780:	0000f8f5 	.word	0x0000f8f5
    f784:	0000f7a1 	.word	0x0000f7a1
    f788:	0000d091 	.word	0x0000d091
    f78c:	200000c8 	.word	0x200000c8
    f790:	0000f3fd 	.word	0x0000f3fd
    f794:	0000d7d5 	.word	0x0000d7d5
    f798:	0000d2a1 	.word	0x0000d2a1
    f79c:	0000d8dd 	.word	0x0000d8dd

0000f7a0 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
    f7a0:	b580      	push	{r7, lr}
    f7a2:	b086      	sub	sp, #24
    f7a4:	af00      	add	r7, sp, #0
    f7a6:	6078      	str	r0, [r7, #4]
    f7a8:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
    f7aa:	687b      	ldr	r3, [r7, #4]
    f7ac:	22c0      	movs	r2, #192	; 0xc0
    f7ae:	589b      	ldr	r3, [r3, r2]
    f7b0:	2b00      	cmp	r3, #0
    f7b2:	d007      	beq.n	f7c4 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
    f7b4:	687b      	ldr	r3, [r7, #4]
    f7b6:	22c0      	movs	r2, #192	; 0xc0
    f7b8:	589b      	ldr	r3, [r3, r2]
    f7ba:	687a      	ldr	r2, [r7, #4]
    f7bc:	21c4      	movs	r1, #196	; 0xc4
    f7be:	5852      	ldr	r2, [r2, r1]
    f7c0:	0010      	movs	r0, r2
    f7c2:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
    f7c4:	687b      	ldr	r3, [r7, #4]
    f7c6:	33b0      	adds	r3, #176	; 0xb0
    f7c8:	2218      	movs	r2, #24
    f7ca:	2100      	movs	r1, #0
    f7cc:	0018      	movs	r0, r3
    f7ce:	4b24      	ldr	r3, [pc, #144]	; (f860 <_http_client_clear_conn+0xc0>)
    f7d0:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    f7d2:	687b      	ldr	r3, [r7, #4]
    f7d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f7d6:	2b00      	cmp	r3, #0
    f7d8:	d005      	beq.n	f7e6 <_http_client_clear_conn+0x46>
		close(module->sock);
    f7da:	687b      	ldr	r3, [r7, #4]
    f7dc:	781b      	ldrb	r3, [r3, #0]
    f7de:	b25b      	sxtb	r3, r3
    f7e0:	0018      	movs	r0, r3
    f7e2:	4b20      	ldr	r3, [pc, #128]	; (f864 <_http_client_clear_conn+0xc4>)
    f7e4:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
    f7e6:	687b      	ldr	r3, [r7, #4]
    f7e8:	781b      	ldrb	r3, [r3, #0]
    f7ea:	b25b      	sxtb	r3, r3
    f7ec:	001a      	movs	r2, r3
    f7ee:	4b1e      	ldr	r3, [pc, #120]	; (f868 <_http_client_clear_conn+0xc8>)
    f7f0:	0092      	lsls	r2, r2, #2
    f7f2:	2100      	movs	r1, #0
    f7f4:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
    f7f6:	687b      	ldr	r3, [r7, #4]
    f7f8:	336c      	adds	r3, #108	; 0x6c
    f7fa:	226c      	movs	r2, #108	; 0x6c
    f7fc:	2100      	movs	r1, #0
    f7fe:	0018      	movs	r0, r3
    f800:	4b17      	ldr	r3, [pc, #92]	; (f860 <_http_client_clear_conn+0xc0>)
    f802:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    f804:	687b      	ldr	r3, [r7, #4]
    f806:	33d8      	adds	r3, #216	; 0xd8
    f808:	2210      	movs	r2, #16
    f80a:	2100      	movs	r1, #0
    f80c:	0018      	movs	r0, r3
    f80e:	4b14      	ldr	r3, [pc, #80]	; (f860 <_http_client_clear_conn+0xc0>)
    f810:	4798      	blx	r3
	module->req.state = STATE_INIT;
    f812:	687b      	ldr	r3, [r7, #4]
    f814:	2200      	movs	r2, #0
    f816:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    f818:	687b      	ldr	r3, [r7, #4]
    f81a:	22d8      	movs	r2, #216	; 0xd8
    f81c:	2100      	movs	r1, #0
    f81e:	5099      	str	r1, [r3, r2]

	module->sending = 0;
    f820:	687b      	ldr	r3, [r7, #4]
    f822:	2241      	movs	r2, #65	; 0x41
    f824:	5c99      	ldrb	r1, [r3, r2]
    f826:	2001      	movs	r0, #1
    f828:	4381      	bics	r1, r0
    f82a:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
    f82c:	687b      	ldr	r3, [r7, #4]
    f82e:	2241      	movs	r2, #65	; 0x41
    f830:	5c99      	ldrb	r1, [r3, r2]
    f832:	2002      	movs	r0, #2
    f834:	4381      	bics	r1, r0
    f836:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
    f838:	230c      	movs	r3, #12
    f83a:	18fb      	adds	r3, r7, r3
    f83c:	683a      	ldr	r2, [r7, #0]
    f83e:	601a      	str	r2, [r3, #0]
	if (module->cb) {
    f840:	687b      	ldr	r3, [r7, #4]
    f842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f844:	2b00      	cmp	r3, #0
    f846:	d006      	beq.n	f856 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    f848:	687b      	ldr	r3, [r7, #4]
    f84a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f84c:	220c      	movs	r2, #12
    f84e:	18ba      	adds	r2, r7, r2
    f850:	6878      	ldr	r0, [r7, #4]
    f852:	2104      	movs	r1, #4
    f854:	4798      	blx	r3
	}
}
    f856:	46c0      	nop			; (mov r8, r8)
    f858:	46bd      	mov	sp, r7
    f85a:	b006      	add	sp, #24
    f85c:	bd80      	pop	{r7, pc}
    f85e:	46c0      	nop			; (mov r8, r8)
    f860:	000184d1 	.word	0x000184d1
    f864:	0000d699 	.word	0x0000d699
    f868:	200000c8 	.word	0x200000c8

0000f86c <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    f86c:	b590      	push	{r4, r7, lr}
    f86e:	b087      	sub	sp, #28
    f870:	af00      	add	r7, sp, #0
    f872:	60f8      	str	r0, [r7, #12]
    f874:	60b9      	str	r1, [r7, #8]
    f876:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
    f878:	68fb      	ldr	r3, [r7, #12]
    f87a:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
    f87c:	697b      	ldr	r3, [r7, #20]
    f87e:	2241      	movs	r2, #65	; 0x41
    f880:	5c99      	ldrb	r1, [r3, r2]
    f882:	2001      	movs	r0, #1
    f884:	4301      	orrs	r1, r0
    f886:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    f888:	697b      	ldr	r3, [r7, #20]
    f88a:	2000      	movs	r0, #0
    f88c:	5618      	ldrsb	r0, [r3, r0]
    f88e:	687b      	ldr	r3, [r7, #4]
    f890:	b29a      	uxth	r2, r3
    f892:	68b9      	ldr	r1, [r7, #8]
    f894:	2300      	movs	r3, #0
    f896:	4c14      	ldr	r4, [pc, #80]	; (f8e8 <_http_client_send_wait+0x7c>)
    f898:	47a0      	blx	r4
    f89a:	0003      	movs	r3, r0
    f89c:	613b      	str	r3, [r7, #16]
    f89e:	693b      	ldr	r3, [r7, #16]
    f8a0:	2b00      	cmp	r3, #0
    f8a2:	da0f      	bge.n	f8c4 <_http_client_send_wait+0x58>
		module->sending = 0;
    f8a4:	697b      	ldr	r3, [r7, #20]
    f8a6:	2241      	movs	r2, #65	; 0x41
    f8a8:	5c99      	ldrb	r1, [r3, r2]
    f8aa:	2001      	movs	r0, #1
    f8ac:	4381      	bics	r1, r0
    f8ae:	5499      	strb	r1, [r3, r2]
		return result;
    f8b0:	693b      	ldr	r3, [r7, #16]
    f8b2:	e014      	b.n	f8de <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
    f8b4:	2000      	movs	r0, #0
    f8b6:	4b0d      	ldr	r3, [pc, #52]	; (f8ec <_http_client_send_wait+0x80>)
    f8b8:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
    f8ba:	697b      	ldr	r3, [r7, #20]
    f8bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    f8be:	0018      	movs	r0, r3
    f8c0:	4b0b      	ldr	r3, [pc, #44]	; (f8f0 <_http_client_send_wait+0x84>)
    f8c2:	4798      	blx	r3

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    f8c4:	697b      	ldr	r3, [r7, #20]
    f8c6:	2241      	movs	r2, #65	; 0x41
    f8c8:	5c9b      	ldrb	r3, [r3, r2]
    f8ca:	2201      	movs	r2, #1
    f8cc:	4013      	ands	r3, r2
    f8ce:	b2db      	uxtb	r3, r3
    f8d0:	2b00      	cmp	r3, #0
    f8d2:	d003      	beq.n	f8dc <_http_client_send_wait+0x70>
    f8d4:	697b      	ldr	r3, [r7, #20]
    f8d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f8d8:	2b02      	cmp	r3, #2
    f8da:	d8eb      	bhi.n	f8b4 <_http_client_send_wait+0x48>
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    f8dc:	2300      	movs	r3, #0
}
    f8de:	0018      	movs	r0, r3
    f8e0:	46bd      	mov	sp, r7
    f8e2:	b007      	add	sp, #28
    f8e4:	bd90      	pop	{r4, r7, pc}
    f8e6:	46c0      	nop			; (mov r8, r8)
    f8e8:	0000d3b5 	.word	0x0000d3b5
    f8ec:	00009fb9 	.word	0x00009fb9
    f8f0:	00010bc9 	.word	0x00010bc9

0000f8f4 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    f8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8f6:	b0a1      	sub	sp, #132	; 0x84
    f8f8:	af02      	add	r7, sp, #8
    f8fa:	61f8      	str	r0, [r7, #28]
    f8fc:	466b      	mov	r3, sp
    f8fe:	61bb      	str	r3, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    f900:	2318      	movs	r3, #24
    f902:	2218      	movs	r2, #24
    f904:	18ba      	adds	r2, r7, r2
    f906:	18d2      	adds	r2, r2, r3
    f908:	4bb8      	ldr	r3, [pc, #736]	; (fbec <_http_client_request+0x2f8>)
    f90a:	0010      	movs	r0, r2
    f90c:	0019      	movs	r1, r3
    f90e:	2310      	movs	r3, #16
    f910:	001a      	movs	r2, r3
    f912:	4bb7      	ldr	r3, [pc, #732]	; (fbf0 <_http_client_request+0x2fc>)
    f914:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    f916:	69fb      	ldr	r3, [r7, #28]
    f918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    f91a:	001a      	movs	r2, r3
    f91c:	3a01      	subs	r2, #1
    f91e:	66fa      	str	r2, [r7, #108]	; 0x6c
    f920:	60bb      	str	r3, [r7, #8]
    f922:	2200      	movs	r2, #0
    f924:	60fa      	str	r2, [r7, #12]
    f926:	68b8      	ldr	r0, [r7, #8]
    f928:	68f9      	ldr	r1, [r7, #12]
    f92a:	0002      	movs	r2, r0
    f92c:	0f52      	lsrs	r2, r2, #29
    f92e:	000e      	movs	r6, r1
    f930:	00f6      	lsls	r6, r6, #3
    f932:	617e      	str	r6, [r7, #20]
    f934:	697e      	ldr	r6, [r7, #20]
    f936:	4316      	orrs	r6, r2
    f938:	617e      	str	r6, [r7, #20]
    f93a:	0002      	movs	r2, r0
    f93c:	00d2      	lsls	r2, r2, #3
    f93e:	613a      	str	r2, [r7, #16]
    f940:	603b      	str	r3, [r7, #0]
    f942:	2200      	movs	r2, #0
    f944:	607a      	str	r2, [r7, #4]
    f946:	6838      	ldr	r0, [r7, #0]
    f948:	6879      	ldr	r1, [r7, #4]
    f94a:	0002      	movs	r2, r0
    f94c:	0f52      	lsrs	r2, r2, #29
    f94e:	000e      	movs	r6, r1
    f950:	00f5      	lsls	r5, r6, #3
    f952:	4315      	orrs	r5, r2
    f954:	0002      	movs	r2, r0
    f956:	00d4      	lsls	r4, r2, #3
    f958:	3307      	adds	r3, #7
    f95a:	08db      	lsrs	r3, r3, #3
    f95c:	00db      	lsls	r3, r3, #3
    f95e:	466a      	mov	r2, sp
    f960:	1ad3      	subs	r3, r2, r3
    f962:	469d      	mov	sp, r3
    f964:	ab02      	add	r3, sp, #8
    f966:	3300      	adds	r3, #0
    f968:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
    f96a:	69fb      	ldr	r3, [r7, #28]
    f96c:	2b00      	cmp	r3, #0
    f96e:	d100      	bne.n	f972 <_http_client_request+0x7e>
    f970:	e340      	b.n	fff4 <_http_client_request+0x700>
		return;
	}

	if (module->sending != 0) {
    f972:	69fb      	ldr	r3, [r7, #28]
    f974:	2241      	movs	r2, #65	; 0x41
    f976:	5c9b      	ldrb	r3, [r3, r2]
    f978:	2201      	movs	r2, #1
    f97a:	4013      	ands	r3, r2
    f97c:	b2db      	uxtb	r3, r3
    f97e:	2b00      	cmp	r3, #0
    f980:	d000      	beq.n	f984 <_http_client_request+0x90>
    f982:	e339      	b.n	fff8 <_http_client_request+0x704>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
    f984:	69fb      	ldr	r3, [r7, #28]
    f986:	33b0      	adds	r3, #176	; 0xb0
    f988:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
    f98a:	69fb      	ldr	r3, [r7, #28]
    f98c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f98e:	2b03      	cmp	r3, #3
    f990:	d003      	beq.n	f99a <_http_client_request+0xa6>
    f992:	2b04      	cmp	r3, #4
    f994:	d100      	bne.n	f998 <_http_client_request+0xa4>
    f996:	e1b4      	b.n	fd02 <_http_client_request+0x40e>
		}

		break;
	default:
		/* Invalid status. */
		break;
    f998:	e335      	b.n	10006 <_http_client_request+0x712>
	entity = &module->req.entity;

	switch (module->req.state) {
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    f99a:	69fb      	ldr	r3, [r7, #28]
    f99c:	22cc      	movs	r2, #204	; 0xcc
    f99e:	2100      	movs	r1, #0
    f9a0:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
    f9a2:	69fb      	ldr	r3, [r7, #28]
    f9a4:	22d0      	movs	r2, #208	; 0xd0
    f9a6:	2100      	movs	r1, #0
    f9a8:	5099      	str	r1, [r3, r2]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    f9aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    f9ac:	69fb      	ldr	r3, [r7, #28]
    f9ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    f9b0:	4c90      	ldr	r4, [pc, #576]	; (fbf4 <_http_client_request+0x300>)
    f9b2:	2334      	movs	r3, #52	; 0x34
    f9b4:	2018      	movs	r0, #24
    f9b6:	1838      	adds	r0, r7, r0
    f9b8:	18c0      	adds	r0, r0, r3
    f9ba:	69fb      	ldr	r3, [r7, #28]
    f9bc:	9300      	str	r3, [sp, #0]
    f9be:	0023      	movs	r3, r4
    f9c0:	4c8d      	ldr	r4, [pc, #564]	; (fbf8 <_http_client_request+0x304>)
    f9c2:	47a0      	blx	r4
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    f9c4:	69fb      	ldr	r3, [r7, #28]
    f9c6:	22c8      	movs	r2, #200	; 0xc8
    f9c8:	5c9b      	ldrb	r3, [r3, r2]
    f9ca:	2b01      	cmp	r3, #1
    f9cc:	d10a      	bne.n	f9e4 <_http_client_request+0xf0>
			stream_writer_send_buffer(&writer, "GET ", 4);
    f9ce:	498b      	ldr	r1, [pc, #556]	; (fbfc <_http_client_request+0x308>)
    f9d0:	2334      	movs	r3, #52	; 0x34
    f9d2:	2218      	movs	r2, #24
    f9d4:	4694      	mov	ip, r2
    f9d6:	44bc      	add	ip, r7
    f9d8:	4463      	add	r3, ip
    f9da:	2204      	movs	r2, #4
    f9dc:	0018      	movs	r0, r3
    f9de:	4b88      	ldr	r3, [pc, #544]	; (fc00 <_http_client_request+0x30c>)
    f9e0:	4798      	blx	r3
    f9e2:	e04e      	b.n	fa82 <_http_client_request+0x18e>
		} else if (module->req.method == HTTP_METHOD_POST) {
    f9e4:	69fb      	ldr	r3, [r7, #28]
    f9e6:	22c8      	movs	r2, #200	; 0xc8
    f9e8:	5c9b      	ldrb	r3, [r3, r2]
    f9ea:	2b02      	cmp	r3, #2
    f9ec:	d10a      	bne.n	fa04 <_http_client_request+0x110>
			stream_writer_send_buffer(&writer, "POST ", 5);
    f9ee:	4985      	ldr	r1, [pc, #532]	; (fc04 <_http_client_request+0x310>)
    f9f0:	2334      	movs	r3, #52	; 0x34
    f9f2:	2218      	movs	r2, #24
    f9f4:	4694      	mov	ip, r2
    f9f6:	44bc      	add	ip, r7
    f9f8:	4463      	add	r3, ip
    f9fa:	2205      	movs	r2, #5
    f9fc:	0018      	movs	r0, r3
    f9fe:	4b80      	ldr	r3, [pc, #512]	; (fc00 <_http_client_request+0x30c>)
    fa00:	4798      	blx	r3
    fa02:	e03e      	b.n	fa82 <_http_client_request+0x18e>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    fa04:	69fb      	ldr	r3, [r7, #28]
    fa06:	22c8      	movs	r2, #200	; 0xc8
    fa08:	5c9b      	ldrb	r3, [r3, r2]
    fa0a:	2b03      	cmp	r3, #3
    fa0c:	d10a      	bne.n	fa24 <_http_client_request+0x130>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    fa0e:	497e      	ldr	r1, [pc, #504]	; (fc08 <_http_client_request+0x314>)
    fa10:	2334      	movs	r3, #52	; 0x34
    fa12:	2218      	movs	r2, #24
    fa14:	4694      	mov	ip, r2
    fa16:	44bc      	add	ip, r7
    fa18:	4463      	add	r3, ip
    fa1a:	2207      	movs	r2, #7
    fa1c:	0018      	movs	r0, r3
    fa1e:	4b78      	ldr	r3, [pc, #480]	; (fc00 <_http_client_request+0x30c>)
    fa20:	4798      	blx	r3
    fa22:	e02e      	b.n	fa82 <_http_client_request+0x18e>
		} else if (module->req.method == HTTP_METHOD_PUT) {
    fa24:	69fb      	ldr	r3, [r7, #28]
    fa26:	22c8      	movs	r2, #200	; 0xc8
    fa28:	5c9b      	ldrb	r3, [r3, r2]
    fa2a:	2b04      	cmp	r3, #4
    fa2c:	d10a      	bne.n	fa44 <_http_client_request+0x150>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    fa2e:	4977      	ldr	r1, [pc, #476]	; (fc0c <_http_client_request+0x318>)
    fa30:	2334      	movs	r3, #52	; 0x34
    fa32:	2218      	movs	r2, #24
    fa34:	4694      	mov	ip, r2
    fa36:	44bc      	add	ip, r7
    fa38:	4463      	add	r3, ip
    fa3a:	2204      	movs	r2, #4
    fa3c:	0018      	movs	r0, r3
    fa3e:	4b70      	ldr	r3, [pc, #448]	; (fc00 <_http_client_request+0x30c>)
    fa40:	4798      	blx	r3
    fa42:	e01e      	b.n	fa82 <_http_client_request+0x18e>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    fa44:	69fb      	ldr	r3, [r7, #28]
    fa46:	22c8      	movs	r2, #200	; 0xc8
    fa48:	5c9b      	ldrb	r3, [r3, r2]
    fa4a:	2b05      	cmp	r3, #5
    fa4c:	d10a      	bne.n	fa64 <_http_client_request+0x170>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    fa4e:	4970      	ldr	r1, [pc, #448]	; (fc10 <_http_client_request+0x31c>)
    fa50:	2334      	movs	r3, #52	; 0x34
    fa52:	2218      	movs	r2, #24
    fa54:	4694      	mov	ip, r2
    fa56:	44bc      	add	ip, r7
    fa58:	4463      	add	r3, ip
    fa5a:	2208      	movs	r2, #8
    fa5c:	0018      	movs	r0, r3
    fa5e:	4b68      	ldr	r3, [pc, #416]	; (fc00 <_http_client_request+0x30c>)
    fa60:	4798      	blx	r3
    fa62:	e00e      	b.n	fa82 <_http_client_request+0x18e>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    fa64:	69fb      	ldr	r3, [r7, #28]
    fa66:	22c8      	movs	r2, #200	; 0xc8
    fa68:	5c9b      	ldrb	r3, [r3, r2]
    fa6a:	2b06      	cmp	r3, #6
    fa6c:	d109      	bne.n	fa82 <_http_client_request+0x18e>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    fa6e:	4969      	ldr	r1, [pc, #420]	; (fc14 <_http_client_request+0x320>)
    fa70:	2334      	movs	r3, #52	; 0x34
    fa72:	2218      	movs	r2, #24
    fa74:	4694      	mov	ip, r2
    fa76:	44bc      	add	ip, r7
    fa78:	4463      	add	r3, ip
    fa7a:	2205      	movs	r2, #5
    fa7c:	0018      	movs	r0, r3
    fa7e:	4b60      	ldr	r3, [pc, #384]	; (fc00 <_http_client_request+0x30c>)
    fa80:	4798      	blx	r3
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    fa82:	69fb      	ldr	r3, [r7, #28]
    fa84:	3370      	adds	r3, #112	; 0x70
    fa86:	001c      	movs	r4, r3
    fa88:	69fb      	ldr	r3, [r7, #28]
    fa8a:	3370      	adds	r3, #112	; 0x70
    fa8c:	0018      	movs	r0, r3
    fa8e:	4b62      	ldr	r3, [pc, #392]	; (fc18 <_http_client_request+0x324>)
    fa90:	4798      	blx	r3
    fa92:	0002      	movs	r2, r0
    fa94:	2334      	movs	r3, #52	; 0x34
    fa96:	2118      	movs	r1, #24
    fa98:	468c      	mov	ip, r1
    fa9a:	44bc      	add	ip, r7
    fa9c:	4463      	add	r3, ip
    fa9e:	0021      	movs	r1, r4
    faa0:	0018      	movs	r0, r3
    faa2:	4b57      	ldr	r3, [pc, #348]	; (fc00 <_http_client_request+0x30c>)
    faa4:	4798      	blx	r3

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    faa6:	495d      	ldr	r1, [pc, #372]	; (fc1c <_http_client_request+0x328>)
    faa8:	2334      	movs	r3, #52	; 0x34
    faaa:	2218      	movs	r2, #24
    faac:	4694      	mov	ip, r2
    faae:	44bc      	add	ip, r7
    fab0:	4463      	add	r3, ip
    fab2:	220b      	movs	r2, #11
    fab4:	0018      	movs	r0, r3
    fab6:	4b52      	ldr	r3, [pc, #328]	; (fc00 <_http_client_request+0x30c>)
    fab8:	4798      	blx	r3

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    faba:	4959      	ldr	r1, [pc, #356]	; (fc20 <_http_client_request+0x32c>)
    fabc:	2334      	movs	r3, #52	; 0x34
    fabe:	2218      	movs	r2, #24
    fac0:	4694      	mov	ip, r2
    fac2:	44bc      	add	ip, r7
    fac4:	4463      	add	r3, ip
    fac6:	220c      	movs	r2, #12
    fac8:	0018      	movs	r0, r3
    faca:	4b4d      	ldr	r3, [pc, #308]	; (fc00 <_http_client_request+0x30c>)
    facc:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    face:	69fb      	ldr	r3, [r7, #28]
    fad0:	6e9c      	ldr	r4, [r3, #104]	; 0x68
    fad2:	69fb      	ldr	r3, [r7, #28]
    fad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    fad6:	0018      	movs	r0, r3
    fad8:	4b4f      	ldr	r3, [pc, #316]	; (fc18 <_http_client_request+0x324>)
    fada:	4798      	blx	r3
    fadc:	0002      	movs	r2, r0
    fade:	2334      	movs	r3, #52	; 0x34
    fae0:	2118      	movs	r1, #24
    fae2:	468c      	mov	ip, r1
    fae4:	44bc      	add	ip, r7
    fae6:	4463      	add	r3, ip
    fae8:	0021      	movs	r1, r4
    faea:	0018      	movs	r0, r3
    faec:	4b44      	ldr	r3, [pc, #272]	; (fc00 <_http_client_request+0x30c>)
    faee:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    faf0:	494c      	ldr	r1, [pc, #304]	; (fc24 <_http_client_request+0x330>)
    faf2:	2334      	movs	r3, #52	; 0x34
    faf4:	2218      	movs	r2, #24
    faf6:	4694      	mov	ip, r2
    faf8:	44bc      	add	ip, r7
    fafa:	4463      	add	r3, ip
    fafc:	2202      	movs	r2, #2
    fafe:	0018      	movs	r0, r3
    fb00:	4b3f      	ldr	r3, [pc, #252]	; (fc00 <_http_client_request+0x30c>)
    fb02:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    fb04:	4948      	ldr	r1, [pc, #288]	; (fc28 <_http_client_request+0x334>)
    fb06:	2334      	movs	r3, #52	; 0x34
    fb08:	2218      	movs	r2, #24
    fb0a:	4694      	mov	ip, r2
    fb0c:	44bc      	add	ip, r7
    fb0e:	4463      	add	r3, ip
    fb10:	2206      	movs	r2, #6
    fb12:	0018      	movs	r0, r3
    fb14:	4b3a      	ldr	r3, [pc, #232]	; (fc00 <_http_client_request+0x30c>)
    fb16:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    fb18:	69fb      	ldr	r3, [r7, #28]
    fb1a:	1c5c      	adds	r4, r3, #1
    fb1c:	69fb      	ldr	r3, [r7, #28]
    fb1e:	3301      	adds	r3, #1
    fb20:	0018      	movs	r0, r3
    fb22:	4b3d      	ldr	r3, [pc, #244]	; (fc18 <_http_client_request+0x324>)
    fb24:	4798      	blx	r3
    fb26:	0002      	movs	r2, r0
    fb28:	2334      	movs	r3, #52	; 0x34
    fb2a:	2118      	movs	r1, #24
    fb2c:	468c      	mov	ip, r1
    fb2e:	44bc      	add	ip, r7
    fb30:	4463      	add	r3, ip
    fb32:	0021      	movs	r1, r4
    fb34:	0018      	movs	r0, r3
    fb36:	4b32      	ldr	r3, [pc, #200]	; (fc00 <_http_client_request+0x30c>)
    fb38:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    fb3a:	493a      	ldr	r1, [pc, #232]	; (fc24 <_http_client_request+0x330>)
    fb3c:	2334      	movs	r3, #52	; 0x34
    fb3e:	2218      	movs	r2, #24
    fb40:	4694      	mov	ip, r2
    fb42:	44bc      	add	ip, r7
    fb44:	4463      	add	r3, ip
    fb46:	2202      	movs	r2, #2
    fb48:	0018      	movs	r0, r3
    fb4a:	4b2d      	ldr	r3, [pc, #180]	; (fc00 <_http_client_request+0x30c>)
    fb4c:	4798      	blx	r3
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    fb4e:	4937      	ldr	r1, [pc, #220]	; (fc2c <_http_client_request+0x338>)
    fb50:	2334      	movs	r3, #52	; 0x34
    fb52:	2218      	movs	r2, #24
    fb54:	4694      	mov	ip, r2
    fb56:	44bc      	add	ip, r7
    fb58:	4463      	add	r3, ip
    fb5a:	2218      	movs	r2, #24
    fb5c:	0018      	movs	r0, r3
    fb5e:	4b28      	ldr	r3, [pc, #160]	; (fc00 <_http_client_request+0x30c>)
    fb60:	4798      	blx	r3
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    fb62:	4933      	ldr	r1, [pc, #204]	; (fc30 <_http_client_request+0x33c>)
    fb64:	2334      	movs	r3, #52	; 0x34
    fb66:	2218      	movs	r2, #24
    fb68:	4694      	mov	ip, r2
    fb6a:	44bc      	add	ip, r7
    fb6c:	4463      	add	r3, ip
    fb6e:	2213      	movs	r2, #19
    fb70:	0018      	movs	r0, r3
    fb72:	4b23      	ldr	r3, [pc, #140]	; (fc00 <_http_client_request+0x30c>)
    fb74:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    fb76:	492f      	ldr	r1, [pc, #188]	; (fc34 <_http_client_request+0x340>)
    fb78:	2334      	movs	r3, #52	; 0x34
    fb7a:	2218      	movs	r2, #24
    fb7c:	4694      	mov	ip, r2
    fb7e:	44bc      	add	ip, r7
    fb80:	4463      	add	r3, ip
    fb82:	2217      	movs	r2, #23
    fb84:	0018      	movs	r0, r3
    fb86:	4b1e      	ldr	r3, [pc, #120]	; (fc00 <_http_client_request+0x30c>)
    fb88:	4798      	blx	r3

		if (entity->read != NULL) {
    fb8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fb8c:	68db      	ldr	r3, [r3, #12]
    fb8e:	2b00      	cmp	r3, #0
    fb90:	d100      	bne.n	fb94 <_http_client_request+0x2a0>
    fb92:	e089      	b.n	fca8 <_http_client_request+0x3b4>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    fb94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fb96:	781b      	ldrb	r3, [r3, #0]
    fb98:	2b00      	cmp	r3, #0
    fb9a:	d00f      	beq.n	fbbc <_http_client_request+0x2c8>
				/* Chunked mode. */
				module->req.content_length = -1;
    fb9c:	69fb      	ldr	r3, [r7, #28]
    fb9e:	21cc      	movs	r1, #204	; 0xcc
    fba0:	2201      	movs	r2, #1
    fba2:	4252      	negs	r2, r2
    fba4:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    fba6:	4924      	ldr	r1, [pc, #144]	; (fc38 <_http_client_request+0x344>)
    fba8:	2334      	movs	r3, #52	; 0x34
    fbaa:	2218      	movs	r2, #24
    fbac:	4694      	mov	ip, r2
    fbae:	44bc      	add	ip, r7
    fbb0:	4463      	add	r3, ip
    fbb2:	221c      	movs	r2, #28
    fbb4:	0018      	movs	r0, r3
    fbb6:	4b12      	ldr	r3, [pc, #72]	; (fc00 <_http_client_request+0x30c>)
    fbb8:	4798      	blx	r3
    fbba:	e075      	b.n	fca8 <_http_client_request+0x3b4>
			} else if(entity->get_contents_length) {
    fbbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fbbe:	689b      	ldr	r3, [r3, #8]
    fbc0:	2b00      	cmp	r3, #0
    fbc2:	d071      	beq.n	fca8 <_http_client_request+0x3b4>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    fbc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fbc6:	689a      	ldr	r2, [r3, #8]
    fbc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fbca:	695b      	ldr	r3, [r3, #20]
    fbcc:	0018      	movs	r0, r3
    fbce:	4790      	blx	r2
    fbd0:	0001      	movs	r1, r0
    fbd2:	69fb      	ldr	r3, [r7, #28]
    fbd4:	22cc      	movs	r2, #204	; 0xcc
    fbd6:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
    fbd8:	69fb      	ldr	r3, [r7, #28]
    fbda:	22cc      	movs	r2, #204	; 0xcc
    fbdc:	589b      	ldr	r3, [r3, r2]
    fbde:	2b00      	cmp	r3, #0
    fbe0:	da2c      	bge.n	fc3c <_http_client_request+0x348>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
    fbe2:	69fb      	ldr	r3, [r7, #28]
    fbe4:	22cc      	movs	r2, #204	; 0xcc
    fbe6:	2100      	movs	r1, #0
    fbe8:	5099      	str	r1, [r3, r2]
    fbea:	e05d      	b.n	fca8 <_http_client_request+0x3b4>
    fbec:	0001ad8c 	.word	0x0001ad8c
    fbf0:	00018495 	.word	0x00018495
    fbf4:	0000f86d 	.word	0x0000f86d
    fbf8:	000107b9 	.word	0x000107b9
    fbfc:	0001acb0 	.word	0x0001acb0
    fc00:	00010879 	.word	0x00010879
    fc04:	0001acb8 	.word	0x0001acb8
    fc08:	0001acc0 	.word	0x0001acc0
    fc0c:	0001acc8 	.word	0x0001acc8
    fc10:	0001acd0 	.word	0x0001acd0
    fc14:	0001acdc 	.word	0x0001acdc
    fc18:	00018987 	.word	0x00018987
    fc1c:	0001ace4 	.word	0x0001ace4
    fc20:	0001acf0 	.word	0x0001acf0
    fc24:	0001ad00 	.word	0x0001ad00
    fc28:	0001ad04 	.word	0x0001ad04
    fc2c:	0001ad0c 	.word	0x0001ad0c
    fc30:	0001ad28 	.word	0x0001ad28
    fc34:	0001ad3c 	.word	0x0001ad3c
    fc38:	0001ad54 	.word	0x0001ad54
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    fc3c:	69fb      	ldr	r3, [r7, #28]
    fc3e:	22cc      	movs	r2, #204	; 0xcc
    fc40:	589b      	ldr	r3, [r3, r2]
    fc42:	001a      	movs	r2, r3
    fc44:	49e0      	ldr	r1, [pc, #896]	; (ffc8 <_http_client_request+0x6d4>)
    fc46:	2328      	movs	r3, #40	; 0x28
    fc48:	2018      	movs	r0, #24
    fc4a:	4684      	mov	ip, r0
    fc4c:	44bc      	add	ip, r7
    fc4e:	4463      	add	r3, ip
    fc50:	0018      	movs	r0, r3
    fc52:	4bde      	ldr	r3, [pc, #888]	; (ffcc <_http_client_request+0x6d8>)
    fc54:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    fc56:	49de      	ldr	r1, [pc, #888]	; (ffd0 <_http_client_request+0x6dc>)
    fc58:	2334      	movs	r3, #52	; 0x34
    fc5a:	2218      	movs	r2, #24
    fc5c:	4694      	mov	ip, r2
    fc5e:	44bc      	add	ip, r7
    fc60:	4463      	add	r3, ip
    fc62:	2210      	movs	r2, #16
    fc64:	0018      	movs	r0, r3
    fc66:	4bdb      	ldr	r3, [pc, #876]	; (ffd4 <_http_client_request+0x6e0>)
    fc68:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
    fc6a:	2328      	movs	r3, #40	; 0x28
    fc6c:	2218      	movs	r2, #24
    fc6e:	4694      	mov	ip, r2
    fc70:	44bc      	add	ip, r7
    fc72:	4463      	add	r3, ip
    fc74:	0018      	movs	r0, r3
    fc76:	4bd8      	ldr	r3, [pc, #864]	; (ffd8 <_http_client_request+0x6e4>)
    fc78:	4798      	blx	r3
    fc7a:	0002      	movs	r2, r0
    fc7c:	2328      	movs	r3, #40	; 0x28
    fc7e:	2118      	movs	r1, #24
    fc80:	1879      	adds	r1, r7, r1
    fc82:	18c9      	adds	r1, r1, r3
    fc84:	2334      	movs	r3, #52	; 0x34
    fc86:	2018      	movs	r0, #24
    fc88:	4684      	mov	ip, r0
    fc8a:	44bc      	add	ip, r7
    fc8c:	4463      	add	r3, ip
    fc8e:	0018      	movs	r0, r3
    fc90:	4bd0      	ldr	r3, [pc, #832]	; (ffd4 <_http_client_request+0x6e0>)
    fc92:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    fc94:	49d1      	ldr	r1, [pc, #836]	; (ffdc <_http_client_request+0x6e8>)
    fc96:	2334      	movs	r3, #52	; 0x34
    fc98:	2218      	movs	r2, #24
    fc9a:	4694      	mov	ip, r2
    fc9c:	44bc      	add	ip, r7
    fc9e:	4463      	add	r3, ip
    fca0:	2202      	movs	r2, #2
    fca2:	0018      	movs	r0, r3
    fca4:	4bcb      	ldr	r3, [pc, #812]	; (ffd4 <_http_client_request+0x6e0>)
    fca6:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    fca8:	69fb      	ldr	r3, [r7, #28]
    fcaa:	22d4      	movs	r2, #212	; 0xd4
    fcac:	589b      	ldr	r3, [r3, r2]
    fcae:	2b00      	cmp	r3, #0
    fcb0:	d012      	beq.n	fcd8 <_http_client_request+0x3e4>
			stream_writer_send_buffer(&writer,
				module->req.ext_header,
    fcb2:	69fb      	ldr	r3, [r7, #28]
    fcb4:	22d4      	movs	r2, #212	; 0xd4
    fcb6:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
    fcb8:	69fb      	ldr	r3, [r7, #28]
    fcba:	22d4      	movs	r2, #212	; 0xd4
    fcbc:	589b      	ldr	r3, [r3, r2]
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
				}
			}
		}
		if (module->req.ext_header != NULL ) {
			stream_writer_send_buffer(&writer,
    fcbe:	0018      	movs	r0, r3
    fcc0:	4bc5      	ldr	r3, [pc, #788]	; (ffd8 <_http_client_request+0x6e4>)
    fcc2:	4798      	blx	r3
    fcc4:	0002      	movs	r2, r0
    fcc6:	2334      	movs	r3, #52	; 0x34
    fcc8:	2118      	movs	r1, #24
    fcca:	468c      	mov	ip, r1
    fccc:	44bc      	add	ip, r7
    fcce:	4463      	add	r3, ip
    fcd0:	0021      	movs	r1, r4
    fcd2:	0018      	movs	r0, r3
    fcd4:	4bbf      	ldr	r3, [pc, #764]	; (ffd4 <_http_client_request+0x6e0>)
    fcd6:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    fcd8:	49c0      	ldr	r1, [pc, #768]	; (ffdc <_http_client_request+0x6e8>)
    fcda:	2334      	movs	r3, #52	; 0x34
    fcdc:	2218      	movs	r2, #24
    fcde:	4694      	mov	ip, r2
    fce0:	44bc      	add	ip, r7
    fce2:	4463      	add	r3, ip
    fce4:	2202      	movs	r2, #2
    fce6:	0018      	movs	r0, r3
    fce8:	4bba      	ldr	r3, [pc, #744]	; (ffd4 <_http_client_request+0x6e0>)
    fcea:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    fcec:	2334      	movs	r3, #52	; 0x34
    fcee:	2218      	movs	r2, #24
    fcf0:	4694      	mov	ip, r2
    fcf2:	44bc      	add	ip, r7
    fcf4:	4463      	add	r3, ip
    fcf6:	0018      	movs	r0, r3
    fcf8:	4bb9      	ldr	r3, [pc, #740]	; (ffe0 <_http_client_request+0x6ec>)
    fcfa:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    fcfc:	69fb      	ldr	r3, [r7, #28]
    fcfe:	2204      	movs	r2, #4
    fd00:	66da      	str	r2, [r3, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    fd02:	69fb      	ldr	r3, [r7, #28]
    fd04:	22cc      	movs	r2, #204	; 0xcc
    fd06:	589b      	ldr	r3, [r3, r2]
    fd08:	2b00      	cmp	r3, #0
    fd0a:	db00      	blt.n	fd0e <_http_client_request+0x41a>
    fd0c:	e0c6      	b.n	fe9c <_http_client_request+0x5a8>
    fd0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fd10:	68db      	ldr	r3, [r3, #12]
    fd12:	2b00      	cmp	r3, #0
    fd14:	d100      	bne.n	fd18 <_http_client_request+0x424>
    fd16:	e0c1      	b.n	fe9c <_http_client_request+0x5a8>
			/* Send chunked packet. */
			/*  Chunked header (size + \r\n) tail (\r\n) */
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    fd18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fd1a:	68dc      	ldr	r4, [r3, #12]
    fd1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fd1e:	6958      	ldr	r0, [r3, #20]
    fd20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fd22:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    fd24:	69fb      	ldr	r3, [r7, #28]
    fd26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
			/* Send chunked packet. */
			/*  Chunked header (size + \r\n) tail (\r\n) */
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    fd28:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    fd2a:	69fb      	ldr	r3, [r7, #28]
    fd2c:	22d0      	movs	r2, #208	; 0xd0
    fd2e:	589b      	ldr	r3, [r3, r2]
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
			/* Send chunked packet. */
			/*  Chunked header (size + \r\n) tail (\r\n) */
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    fd30:	002a      	movs	r2, r5
    fd32:	47a0      	blx	r4
    fd34:	0003      	movs	r3, r0
    fd36:	677b      	str	r3, [r7, #116]	; 0x74
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
			if (size < 0) {
    fd38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd3a:	2b00      	cmp	r3, #0
    fd3c:	da01      	bge.n	fd42 <_http_client_request+0x44e>
				/* If occurs problem during the operation, Close this socket. */
				size = 0;
    fd3e:	2300      	movs	r3, #0
    fd40:	677b      	str	r3, [r7, #116]	; 0x74
			}
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    fd42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fd44:	220a      	movs	r2, #10
    fd46:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    fd48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fd4a:	220d      	movs	r2, #13
    fd4c:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    fd4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd50:	3305      	adds	r3, #5
    fd52:	6eba      	ldr	r2, [r7, #104]	; 0x68
    fd54:	210d      	movs	r1, #13
    fd56:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    fd58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd5a:	3306      	adds	r3, #6
    fd5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
    fd5e:	210a      	movs	r1, #10
    fd60:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
    fd62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd64:	2b00      	cmp	r3, #0
    fd66:	db14      	blt.n	fd92 <_http_client_request+0x49e>
				ptr = buffer + 2;
    fd68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fd6a:	3302      	adds	r3, #2
    fd6c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
    fd6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd70:	4a9c      	ldr	r2, [pc, #624]	; (ffe4 <_http_client_request+0x6f0>)
    fd72:	4013      	ands	r3, r2
    fd74:	d504      	bpl.n	fd80 <_http_client_request+0x48c>
    fd76:	3b01      	subs	r3, #1
    fd78:	2210      	movs	r2, #16
    fd7a:	4252      	negs	r2, r2
    fd7c:	4313      	orrs	r3, r2
    fd7e:	3301      	adds	r3, #1
    fd80:	001a      	movs	r2, r3
    fd82:	2318      	movs	r3, #24
    fd84:	2118      	movs	r1, #24
    fd86:	468c      	mov	ip, r1
    fd88:	44bc      	add	ip, r7
    fd8a:	4463      	add	r3, ip
    fd8c:	5c9a      	ldrb	r2, [r3, r2]
    fd8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fd90:	701a      	strb	r2, [r3, #0]
			}
			if (size >= 0x10) {
    fd92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd94:	2b0f      	cmp	r3, #15
    fd96:	dd19      	ble.n	fdcc <_http_client_request+0x4d8>
				ptr = buffer + 1;
    fd98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fd9a:	3301      	adds	r3, #1
    fd9c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
    fd9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fda0:	2b00      	cmp	r3, #0
    fda2:	da00      	bge.n	fda6 <_http_client_request+0x4b2>
    fda4:	330f      	adds	r3, #15
    fda6:	111b      	asrs	r3, r3, #4
    fda8:	001a      	movs	r2, r3
    fdaa:	4b8e      	ldr	r3, [pc, #568]	; (ffe4 <_http_client_request+0x6f0>)
    fdac:	4013      	ands	r3, r2
    fdae:	d504      	bpl.n	fdba <_http_client_request+0x4c6>
    fdb0:	3b01      	subs	r3, #1
    fdb2:	2210      	movs	r2, #16
    fdb4:	4252      	negs	r2, r2
    fdb6:	4313      	orrs	r3, r2
    fdb8:	3301      	adds	r3, #1
    fdba:	001a      	movs	r2, r3
    fdbc:	2318      	movs	r3, #24
    fdbe:	2118      	movs	r1, #24
    fdc0:	468c      	mov	ip, r1
    fdc2:	44bc      	add	ip, r7
    fdc4:	4463      	add	r3, ip
    fdc6:	5c9a      	ldrb	r2, [r3, r2]
    fdc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fdca:	701a      	strb	r2, [r3, #0]
			}
			if (size >= 0x100) {
    fdcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fdce:	2bff      	cmp	r3, #255	; 0xff
    fdd0:	dd18      	ble.n	fe04 <_http_client_request+0x510>
				ptr = buffer;
    fdd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fdd4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
    fdd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fdd8:	2b00      	cmp	r3, #0
    fdda:	da00      	bge.n	fdde <_http_client_request+0x4ea>
    fddc:	33ff      	adds	r3, #255	; 0xff
    fdde:	121b      	asrs	r3, r3, #8
    fde0:	001a      	movs	r2, r3
    fde2:	4b80      	ldr	r3, [pc, #512]	; (ffe4 <_http_client_request+0x6f0>)
    fde4:	4013      	ands	r3, r2
    fde6:	d504      	bpl.n	fdf2 <_http_client_request+0x4fe>
    fde8:	3b01      	subs	r3, #1
    fdea:	2210      	movs	r2, #16
    fdec:	4252      	negs	r2, r2
    fdee:	4313      	orrs	r3, r2
    fdf0:	3301      	adds	r3, #1
    fdf2:	001a      	movs	r2, r3
    fdf4:	2318      	movs	r3, #24
    fdf6:	2118      	movs	r1, #24
    fdf8:	468c      	mov	ip, r1
    fdfa:	44bc      	add	ip, r7
    fdfc:	4463      	add	r3, ip
    fdfe:	5c9a      	ldrb	r2, [r3, r2]
    fe00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fe02:	701a      	strb	r2, [r3, #0]
			}		
			//module->sending = 1;
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    fe04:	69fb      	ldr	r3, [r7, #28]
    fe06:	2000      	movs	r0, #0
    fe08:	5618      	ldrsb	r0, [r3, r0]
    fe0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fe0c:	3303      	adds	r3, #3
    fe0e:	001a      	movs	r2, r3
    fe10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fe12:	1ad3      	subs	r3, r2, r3
    fe14:	b29a      	uxth	r2, r3
    fe16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fe18:	b29b      	uxth	r3, r3
    fe1a:	18d3      	adds	r3, r2, r3
    fe1c:	b29b      	uxth	r3, r3
    fe1e:	3304      	adds	r3, #4
    fe20:	b29a      	uxth	r2, r3
    fe22:	6f39      	ldr	r1, [r7, #112]	; 0x70
    fe24:	2300      	movs	r3, #0
    fe26:	4c70      	ldr	r4, [pc, #448]	; (ffe8 <_http_client_request+0x6f4>)
    fe28:	47a0      	blx	r4
    fe2a:	0003      	movs	r3, r0
    fe2c:	663b      	str	r3, [r7, #96]	; 0x60
    fe2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fe30:	2b00      	cmp	r3, #0
    fe32:	da07      	bge.n	fe44 <_http_client_request+0x550>
				_http_client_clear_conn(module, -EIO);
    fe34:	2305      	movs	r3, #5
    fe36:	425a      	negs	r2, r3
    fe38:	69fb      	ldr	r3, [r7, #28]
    fe3a:	0011      	movs	r1, r2
    fe3c:	0018      	movs	r0, r3
    fe3e:	4b6b      	ldr	r3, [pc, #428]	; (ffec <_http_client_request+0x6f8>)
    fe40:	4798      	blx	r3
				return;
    fe42:	e0e0      	b.n	10006 <_http_client_request+0x712>
			}

			module->req.sent_length += size;
    fe44:	69fb      	ldr	r3, [r7, #28]
    fe46:	22d0      	movs	r2, #208	; 0xd0
    fe48:	589a      	ldr	r2, [r3, r2]
    fe4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fe4c:	18d2      	adds	r2, r2, r3
    fe4e:	69fb      	ldr	r3, [r7, #28]
    fe50:	21d0      	movs	r1, #208	; 0xd0
    fe52:	505a      	str	r2, [r3, r1]

			if(size == 0) {
    fe54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fe56:	2b00      	cmp	r3, #0
    fe58:	d000      	beq.n	fe5c <_http_client_request+0x568>
    fe5a:	e0c9      	b.n	fff0 <_http_client_request+0x6fc>
				if (module->req.entity.close) {
    fe5c:	69fb      	ldr	r3, [r7, #28]
    fe5e:	22c0      	movs	r2, #192	; 0xc0
    fe60:	589b      	ldr	r3, [r3, r2]
    fe62:	2b00      	cmp	r3, #0
    fe64:	d007      	beq.n	fe76 <_http_client_request+0x582>
					module->req.entity.close(module->req.entity.priv_data);
    fe66:	69fb      	ldr	r3, [r7, #28]
    fe68:	22c0      	movs	r2, #192	; 0xc0
    fe6a:	589b      	ldr	r3, [r3, r2]
    fe6c:	69fa      	ldr	r2, [r7, #28]
    fe6e:	21c4      	movs	r1, #196	; 0xc4
    fe70:	5852      	ldr	r2, [r2, r1]
    fe72:	0010      	movs	r0, r2
    fe74:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    fe76:	69fb      	ldr	r3, [r7, #28]
    fe78:	2202      	movs	r2, #2
    fe7a:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    fe7c:	69fb      	ldr	r3, [r7, #28]
    fe7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fe80:	2b00      	cmp	r3, #0
    fe82:	d100      	bne.n	fe86 <_http_client_request+0x592>
    fe84:	e0ba      	b.n	fffc <_http_client_request+0x708>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    fe86:	69fb      	ldr	r3, [r7, #28]
    fe88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fe8a:	220c      	movs	r2, #12
    fe8c:	2118      	movs	r1, #24
    fe8e:	468c      	mov	ip, r1
    fe90:	44bc      	add	ip, r7
    fe92:	4462      	add	r2, ip
    fe94:	69f8      	ldr	r0, [r7, #28]
    fe96:	2101      	movs	r1, #1
    fe98:	4798      	blx	r3
				}
				break;
    fe9a:	e0af      	b.n	fffc <_http_client_request+0x708>
			}
		} else if (module->req.content_length > 0 && entity->read) {
    fe9c:	69fb      	ldr	r3, [r7, #28]
    fe9e:	22cc      	movs	r2, #204	; 0xcc
    fea0:	589b      	ldr	r3, [r3, r2]
    fea2:	2b00      	cmp	r3, #0
    fea4:	dc00      	bgt.n	fea8 <_http_client_request+0x5b4>
    fea6:	e07c      	b.n	ffa2 <_http_client_request+0x6ae>
    fea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    feaa:	68db      	ldr	r3, [r3, #12]
    feac:	2b00      	cmp	r3, #0
    feae:	d100      	bne.n	feb2 <_http_client_request+0x5be>
    feb0:	e077      	b.n	ffa2 <_http_client_request+0x6ae>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    feb2:	69fb      	ldr	r3, [r7, #28]
    feb4:	22d0      	movs	r2, #208	; 0xd0
    feb6:	589a      	ldr	r2, [r3, r2]
    feb8:	69fb      	ldr	r3, [r7, #28]
    feba:	21cc      	movs	r1, #204	; 0xcc
    febc:	585b      	ldr	r3, [r3, r1]
    febe:	429a      	cmp	r2, r3
    fec0:	db1f      	blt.n	ff02 <_http_client_request+0x60e>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    fec2:	69fb      	ldr	r3, [r7, #28]
    fec4:	22c0      	movs	r2, #192	; 0xc0
    fec6:	589b      	ldr	r3, [r3, r2]
    fec8:	2b00      	cmp	r3, #0
    feca:	d007      	beq.n	fedc <_http_client_request+0x5e8>
					module->req.entity.close(module->req.entity.priv_data);
    fecc:	69fb      	ldr	r3, [r7, #28]
    fece:	22c0      	movs	r2, #192	; 0xc0
    fed0:	589b      	ldr	r3, [r3, r2]
    fed2:	69fa      	ldr	r2, [r7, #28]
    fed4:	21c4      	movs	r1, #196	; 0xc4
    fed6:	5852      	ldr	r2, [r2, r1]
    fed8:	0010      	movs	r0, r2
    feda:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    fedc:	69fb      	ldr	r3, [r7, #28]
    fede:	2202      	movs	r2, #2
    fee0:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    fee2:	69fb      	ldr	r3, [r7, #28]
    fee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fee6:	2b00      	cmp	r3, #0
    fee8:	d100      	bne.n	feec <_http_client_request+0x5f8>
    feea:	e089      	b.n	10000 <_http_client_request+0x70c>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    feec:	69fb      	ldr	r3, [r7, #28]
    feee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fef0:	220c      	movs	r2, #12
    fef2:	2118      	movs	r1, #24
    fef4:	468c      	mov	ip, r1
    fef6:	44bc      	add	ip, r7
    fef8:	4462      	add	r2, ip
    fefa:	69f8      	ldr	r0, [r7, #28]
    fefc:	2101      	movs	r1, #1
    fefe:	4798      	blx	r3
				}
				break;
    ff00:	e07e      	b.n	10000 <_http_client_request+0x70c>
			}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    ff02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    ff04:	68dc      	ldr	r4, [r3, #12]
    ff06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    ff08:	6958      	ldr	r0, [r3, #20]
    ff0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    ff0c:	69fb      	ldr	r3, [r7, #28]
    ff0e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
    ff10:	69fb      	ldr	r3, [r7, #28]
    ff12:	22d0      	movs	r2, #208	; 0xd0
    ff14:	589b      	ldr	r3, [r3, r2]
    ff16:	002a      	movs	r2, r5
    ff18:	47a0      	blx	r4
    ff1a:	0003      	movs	r3, r0
    ff1c:	677b      	str	r3, [r7, #116]	; 0x74

			if (size < 0) {
    ff1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ff20:	2b00      	cmp	r3, #0
    ff22:	da0d      	bge.n	ff40 <_http_client_request+0x64c>
				/* Entity occurs errors or EOS. */
				/* Disconnect it. */
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    ff24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ff26:	2b00      	cmp	r3, #0
    ff28:	d102      	bne.n	ff30 <_http_client_request+0x63c>
    ff2a:	234d      	movs	r3, #77	; 0x4d
    ff2c:	425b      	negs	r3, r3
    ff2e:	e001      	b.n	ff34 <_http_client_request+0x640>
    ff30:	2305      	movs	r3, #5
    ff32:	425b      	negs	r3, r3
    ff34:	69fa      	ldr	r2, [r7, #28]
    ff36:	0019      	movs	r1, r3
    ff38:	0010      	movs	r0, r2
    ff3a:	4b2c      	ldr	r3, [pc, #176]	; (ffec <_http_client_request+0x6f8>)
    ff3c:	4798      	blx	r3
				}
				break;
			}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);

			if (size < 0) {
    ff3e:	e057      	b.n	fff0 <_http_client_request+0x6fc>
				/* Entity occurs errors or EOS. */
				/* Disconnect it. */
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
			} else {
				if (size > module->req.content_length - module->req.sent_length) {
    ff40:	69fb      	ldr	r3, [r7, #28]
    ff42:	22cc      	movs	r2, #204	; 0xcc
    ff44:	589a      	ldr	r2, [r3, r2]
    ff46:	69fb      	ldr	r3, [r7, #28]
    ff48:	21d0      	movs	r1, #208	; 0xd0
    ff4a:	585b      	ldr	r3, [r3, r1]
    ff4c:	1ad2      	subs	r2, r2, r3
    ff4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ff50:	429a      	cmp	r2, r3
    ff52:	da07      	bge.n	ff64 <_http_client_request+0x670>
					size = module->req.content_length - module->req.sent_length;
    ff54:	69fb      	ldr	r3, [r7, #28]
    ff56:	22cc      	movs	r2, #204	; 0xcc
    ff58:	589a      	ldr	r2, [r3, r2]
    ff5a:	69fb      	ldr	r3, [r7, #28]
    ff5c:	21d0      	movs	r1, #208	; 0xd0
    ff5e:	585b      	ldr	r3, [r3, r1]
    ff60:	1ad3      	subs	r3, r2, r3
    ff62:	677b      	str	r3, [r7, #116]	; 0x74
				}
				
				//module->sending = 1;
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    ff64:	69fb      	ldr	r3, [r7, #28]
    ff66:	2000      	movs	r0, #0
    ff68:	5618      	ldrsb	r0, [r3, r0]
    ff6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    ff6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ff6e:	b29a      	uxth	r2, r3
    ff70:	2300      	movs	r3, #0
    ff72:	4c1d      	ldr	r4, [pc, #116]	; (ffe8 <_http_client_request+0x6f4>)
    ff74:	47a0      	blx	r4
    ff76:	0003      	movs	r3, r0
    ff78:	663b      	str	r3, [r7, #96]	; 0x60
    ff7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    ff7c:	2b00      	cmp	r3, #0
    ff7e:	da07      	bge.n	ff90 <_http_client_request+0x69c>
					_http_client_clear_conn(module, -EIO);
    ff80:	2305      	movs	r3, #5
    ff82:	425a      	negs	r2, r3
    ff84:	69fb      	ldr	r3, [r7, #28]
    ff86:	0011      	movs	r1, r2
    ff88:	0018      	movs	r0, r3
    ff8a:	4b18      	ldr	r3, [pc, #96]	; (ffec <_http_client_request+0x6f8>)
    ff8c:	4798      	blx	r3
					return;
    ff8e:	e03a      	b.n	10006 <_http_client_request+0x712>
				}
				module->req.sent_length += size;
    ff90:	69fb      	ldr	r3, [r7, #28]
    ff92:	22d0      	movs	r2, #208	; 0xd0
    ff94:	589a      	ldr	r2, [r3, r2]
    ff96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ff98:	18d2      	adds	r2, r2, r3
    ff9a:	69fb      	ldr	r3, [r7, #28]
    ff9c:	21d0      	movs	r1, #208	; 0xd0
    ff9e:	505a      	str	r2, [r3, r1]
				}
				break;
			}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);

			if (size < 0) {
    ffa0:	e026      	b.n	fff0 <_http_client_request+0x6fc>
				}
				module->req.sent_length += size;
			}
		} else {
			/* Has not any entity. */
			module->req.state = STATE_SOCK_CONNECTED;
    ffa2:	69fb      	ldr	r3, [r7, #28]
    ffa4:	2202      	movs	r2, #2
    ffa6:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
    ffa8:	69fb      	ldr	r3, [r7, #28]
    ffaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ffac:	2b00      	cmp	r3, #0
    ffae:	d029      	beq.n	10004 <_http_client_request+0x710>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    ffb0:	69fb      	ldr	r3, [r7, #28]
    ffb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ffb4:	220c      	movs	r2, #12
    ffb6:	2118      	movs	r1, #24
    ffb8:	468c      	mov	ip, r1
    ffba:	44bc      	add	ip, r7
    ffbc:	4462      	add	r2, ip
    ffbe:	69f8      	ldr	r0, [r7, #28]
    ffc0:	2101      	movs	r1, #1
    ffc2:	4798      	blx	r3
			}
			break;
    ffc4:	e01e      	b.n	10004 <_http_client_request+0x710>
    ffc6:	46c0      	nop			; (mov r8, r8)
    ffc8:	0001ad74 	.word	0x0001ad74
    ffcc:	000188e5 	.word	0x000188e5
    ffd0:	0001ad78 	.word	0x0001ad78
    ffd4:	00010879 	.word	0x00010879
    ffd8:	00018987 	.word	0x00018987
    ffdc:	0001ad00 	.word	0x0001ad00
    ffe0:	000108b5 	.word	0x000108b5
    ffe4:	8000000f 	.word	0x8000000f
    ffe8:	0000d3b5 	.word	0x0000d3b5
    ffec:	0000f7a1 	.word	0x0000f7a1
		}

		break;
    fff0:	46c0      	nop			; (mov r8, r8)
    fff2:	e008      	b.n	10006 <_http_client_request+0x712>
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];

	if (module == NULL) {
		return;
    fff4:	46c0      	nop			; (mov r8, r8)
    fff6:	e006      	b.n	10006 <_http_client_request+0x712>
	}

	if (module->sending != 0) {
		/* Device is busy. */
		return;
    fff8:	46c0      	nop			; (mov r8, r8)
    fffa:	e004      	b.n	10006 <_http_client_request+0x712>
				}
				module->req.state = STATE_SOCK_CONNECTED;
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
    fffc:	46c0      	nop			; (mov r8, r8)
    fffe:	e002      	b.n	10006 <_http_client_request+0x712>
				}
				module->req.state = STATE_SOCK_CONNECTED;
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
   10000:	46c0      	nop			; (mov r8, r8)
   10002:	e000      	b.n	10006 <_http_client_request+0x712>
			/* Has not any entity. */
			module->req.state = STATE_SOCK_CONNECTED;
			if (module->cb) {
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
			}
			break;
   10004:	46c0      	nop			; (mov r8, r8)
   10006:	69bb      	ldr	r3, [r7, #24]
   10008:	469d      	mov	sp, r3
		break;
	default:
		/* Invalid status. */
		break;
	}
}
   1000a:	46bd      	mov	sp, r7
   1000c:	b01f      	add	sp, #124	; 0x7c
   1000e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010010 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   10010:	b590      	push	{r4, r7, lr}
   10012:	b083      	sub	sp, #12
   10014:	af00      	add	r7, sp, #0
   10016:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   10018:	687b      	ldr	r3, [r7, #4]
   1001a:	2b00      	cmp	r3, #0
   1001c:	d021      	beq.n	10062 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   1001e:	687b      	ldr	r3, [r7, #4]
   10020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   10022:	687b      	ldr	r3, [r7, #4]
   10024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   10026:	429a      	cmp	r2, r3
   10028:	d307      	bcc.n	1003a <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   1002a:	238b      	movs	r3, #139	; 0x8b
   1002c:	425a      	negs	r2, r3
   1002e:	687b      	ldr	r3, [r7, #4]
   10030:	0011      	movs	r1, r2
   10032:	0018      	movs	r0, r3
   10034:	4b0d      	ldr	r3, [pc, #52]	; (1006c <_http_client_recv_packet+0x5c>)
   10036:	4798      	blx	r3
		return;
   10038:	e014      	b.n	10064 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   1003a:	687b      	ldr	r3, [r7, #4]
   1003c:	2000      	movs	r0, #0
   1003e:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   10040:	687b      	ldr	r3, [r7, #4]
   10042:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   10044:	687b      	ldr	r3, [r7, #4]
   10046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   10048:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0);
   1004a:	687b      	ldr	r3, [r7, #4]
   1004c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   1004e:	b29a      	uxth	r2, r3
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0);
   10050:	687b      	ldr	r3, [r7, #4]
   10052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   10054:	b29b      	uxth	r3, r3
   10056:	1ad3      	subs	r3, r2, r3
   10058:	b29a      	uxth	r2, r3
   1005a:	2300      	movs	r3, #0
   1005c:	4c04      	ldr	r4, [pc, #16]	; (10070 <_http_client_recv_packet+0x60>)
   1005e:	47a0      	blx	r4
   10060:	e000      	b.n	10064 <_http_client_recv_packet+0x54>
}

void _http_client_recv_packet(struct http_client_module *const module)
{
	if (module == NULL) {
		return;
   10062:	46c0      	nop			; (mov r8, r8)
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0);
}
   10064:	46bd      	mov	sp, r7
   10066:	b003      	add	sp, #12
   10068:	bd90      	pop	{r4, r7, pc}
   1006a:	46c0      	nop			; (mov r8, r8)
   1006c:	0000f7a1 	.word	0x0000f7a1
   10070:	0000d519 	.word	0x0000d519

00010074 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   10074:	b580      	push	{r7, lr}
   10076:	b082      	sub	sp, #8
   10078:	af00      	add	r7, sp, #0
   1007a:	6078      	str	r0, [r7, #4]
   1007c:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   1007e:	687b      	ldr	r3, [r7, #4]
   10080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   10082:	683b      	ldr	r3, [r7, #0]
   10084:	18d2      	adds	r2, r2, r3
   10086:	687b      	ldr	r3, [r7, #4]
   10088:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   1008a:	687b      	ldr	r3, [r7, #4]
   1008c:	2258      	movs	r2, #88	; 0x58
   1008e:	5a9b      	ldrh	r3, [r3, r2]
   10090:	2b00      	cmp	r3, #0
   10092:	d007      	beq.n	100a4 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   10094:	687b      	ldr	r3, [r7, #4]
   10096:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   10098:	687b      	ldr	r3, [r7, #4]
   1009a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1009c:	0019      	movs	r1, r3
   1009e:	0010      	movs	r0, r2
   100a0:	4b06      	ldr	r3, [pc, #24]	; (100bc <_http_client_recved_packet+0x48>)
   100a2:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   100a4:	46c0      	nop			; (mov r8, r8)
   100a6:	687b      	ldr	r3, [r7, #4]
   100a8:	0018      	movs	r0, r3
   100aa:	4b05      	ldr	r3, [pc, #20]	; (100c0 <_http_client_recved_packet+0x4c>)
   100ac:	4798      	blx	r3
   100ae:	1e03      	subs	r3, r0, #0
   100b0:	d1f9      	bne.n	100a6 <_http_client_recved_packet+0x32>
}
   100b2:	46c0      	nop			; (mov r8, r8)
   100b4:	46bd      	mov	sp, r7
   100b6:	b002      	add	sp, #8
   100b8:	bd80      	pop	{r7, pc}
   100ba:	46c0      	nop			; (mov r8, r8)
   100bc:	00010b9d 	.word	0x00010b9d
   100c0:	000100c5 	.word	0x000100c5

000100c4 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   100c4:	b580      	push	{r7, lr}
   100c6:	b082      	sub	sp, #8
   100c8:	af00      	add	r7, sp, #0
   100ca:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   100cc:	687b      	ldr	r3, [r7, #4]
   100ce:	22d8      	movs	r2, #216	; 0xd8
   100d0:	589b      	ldr	r3, [r3, r2]
   100d2:	2b00      	cmp	r3, #0
   100d4:	d002      	beq.n	100dc <_http_client_handle_response+0x18>
   100d6:	2b01      	cmp	r3, #1
   100d8:	d006      	beq.n	100e8 <_http_client_handle_response+0x24>
   100da:	e00b      	b.n	100f4 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   100dc:	687b      	ldr	r3, [r7, #4]
   100de:	0018      	movs	r0, r3
   100e0:	4b07      	ldr	r3, [pc, #28]	; (10100 <_http_client_handle_response+0x3c>)
   100e2:	4798      	blx	r3
   100e4:	0003      	movs	r3, r0
   100e6:	e006      	b.n	100f6 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   100e8:	687b      	ldr	r3, [r7, #4]
   100ea:	0018      	movs	r0, r3
   100ec:	4b05      	ldr	r3, [pc, #20]	; (10104 <_http_client_handle_response+0x40>)
   100ee:	4798      	blx	r3
   100f0:	0003      	movs	r3, r0
   100f2:	e000      	b.n	100f6 <_http_client_handle_response+0x32>
	}
	return 0;
   100f4:	2300      	movs	r3, #0
}
   100f6:	0018      	movs	r0, r3
   100f8:	46bd      	mov	sp, r7
   100fa:	b002      	add	sp, #8
   100fc:	bd80      	pop	{r7, pc}
   100fe:	46c0      	nop			; (mov r8, r8)
   10100:	00010109 	.word	0x00010109
   10104:	000105c1 	.word	0x000105c1

00010108 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   10108:	b590      	push	{r4, r7, lr}
   1010a:	b08b      	sub	sp, #44	; 0x2c
   1010c:	af00      	add	r7, sp, #0
   1010e:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   10110:	687b      	ldr	r3, [r7, #4]
   10112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10114:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   10116:	4b9a      	ldr	r3, [pc, #616]	; (10380 <_http_client_handle_header+0x278>)
   10118:	681a      	ldr	r2, [r3, #0]
   1011a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1011c:	0011      	movs	r1, r2
   1011e:	0018      	movs	r0, r3
   10120:	4b98      	ldr	r3, [pc, #608]	; (10384 <_http_client_handle_header+0x27c>)
   10122:	4798      	blx	r3
   10124:	0003      	movs	r3, r0
   10126:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   10128:	69bb      	ldr	r3, [r7, #24]
   1012a:	2b00      	cmp	r3, #0
   1012c:	d007      	beq.n	1013e <_http_client_handle_header+0x36>
   1012e:	687b      	ldr	r3, [r7, #4]
   10130:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   10132:	687b      	ldr	r3, [r7, #4]
   10134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10136:	18d2      	adds	r2, r2, r3
   10138:	69bb      	ldr	r3, [r7, #24]
   1013a:	429a      	cmp	r2, r3
   1013c:	d807      	bhi.n	1014e <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   1013e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10140:	687b      	ldr	r3, [r7, #4]
   10142:	0011      	movs	r1, r2
   10144:	0018      	movs	r0, r3
   10146:	4b90      	ldr	r3, [pc, #576]	; (10388 <_http_client_handle_header+0x280>)
   10148:	4798      	blx	r3
			return 0;
   1014a:	2300      	movs	r3, #0
   1014c:	e114      	b.n	10378 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   1014e:	4b8c      	ldr	r3, [pc, #560]	; (10380 <_http_client_handle_header+0x278>)
   10150:	681c      	ldr	r4, [r3, #0]
   10152:	4b8b      	ldr	r3, [pc, #556]	; (10380 <_http_client_handle_header+0x278>)
   10154:	681b      	ldr	r3, [r3, #0]
   10156:	0018      	movs	r0, r3
   10158:	4b8c      	ldr	r3, [pc, #560]	; (1038c <_http_client_handle_header+0x284>)
   1015a:	4798      	blx	r3
   1015c:	0002      	movs	r2, r0
   1015e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10160:	0021      	movs	r1, r4
   10162:	0018      	movs	r0, r3
   10164:	4b8a      	ldr	r3, [pc, #552]	; (10390 <_http_client_handle_header+0x288>)
   10166:	4798      	blx	r3
   10168:	1e03      	subs	r3, r0, #0
   1016a:	d15d      	bne.n	10228 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   1016c:	4b84      	ldr	r3, [pc, #528]	; (10380 <_http_client_handle_header+0x278>)
   1016e:	681b      	ldr	r3, [r3, #0]
   10170:	0018      	movs	r0, r3
   10172:	4b86      	ldr	r3, [pc, #536]	; (1038c <_http_client_handle_header+0x284>)
   10174:	4798      	blx	r3
   10176:	0002      	movs	r2, r0
   10178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1017a:	189a      	adds	r2, r3, r2
   1017c:	687b      	ldr	r3, [r7, #4]
   1017e:	0011      	movs	r1, r2
   10180:	0018      	movs	r0, r3
   10182:	4b81      	ldr	r3, [pc, #516]	; (10388 <_http_client_handle_header+0x280>)
   10184:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   10186:	687b      	ldr	r3, [r7, #4]
   10188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1018a:	2b00      	cmp	r3, #0
   1018c:	d046      	beq.n	1021c <_http_client_handle_header+0x114>
   1018e:	687b      	ldr	r3, [r7, #4]
   10190:	22e4      	movs	r2, #228	; 0xe4
   10192:	5a9b      	ldrh	r3, [r3, r2]
   10194:	2b00      	cmp	r3, #0
   10196:	d041      	beq.n	1021c <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   10198:	687b      	ldr	r3, [r7, #4]
   1019a:	22dc      	movs	r2, #220	; 0xdc
   1019c:	589b      	ldr	r3, [r3, r2]
   1019e:	2b00      	cmp	r3, #0
   101a0:	da19      	bge.n	101d6 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   101a2:	687b      	ldr	r3, [r7, #4]
   101a4:	22e4      	movs	r2, #228	; 0xe4
   101a6:	5a9a      	ldrh	r2, [r3, r2]
   101a8:	230c      	movs	r3, #12
   101aa:	18fb      	adds	r3, r7, r3
   101ac:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   101ae:	230c      	movs	r3, #12
   101b0:	18fb      	adds	r3, r7, r3
   101b2:	2201      	movs	r2, #1
   101b4:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   101b6:	687b      	ldr	r3, [r7, #4]
   101b8:	22e0      	movs	r2, #224	; 0xe0
   101ba:	2100      	movs	r1, #0
   101bc:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   101be:	230c      	movs	r3, #12
   101c0:	18fb      	adds	r3, r7, r3
   101c2:	2200      	movs	r2, #0
   101c4:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   101c6:	687b      	ldr	r3, [r7, #4]
   101c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   101ca:	220c      	movs	r2, #12
   101cc:	18ba      	adds	r2, r7, r2
   101ce:	6878      	ldr	r0, [r7, #4]
   101d0:	2102      	movs	r1, #2
   101d2:	4798      	blx	r3
   101d4:	e022      	b.n	1021c <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   101d6:	687b      	ldr	r3, [r7, #4]
   101d8:	22dc      	movs	r2, #220	; 0xdc
   101da:	589a      	ldr	r2, [r3, r2]
   101dc:	687b      	ldr	r3, [r7, #4]
   101de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   101e0:	429a      	cmp	r2, r3
   101e2:	dd1b      	ble.n	1021c <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   101e4:	687b      	ldr	r3, [r7, #4]
   101e6:	22e4      	movs	r2, #228	; 0xe4
   101e8:	5a9a      	ldrh	r2, [r3, r2]
   101ea:	230c      	movs	r3, #12
   101ec:	18fb      	adds	r3, r7, r3
   101ee:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   101f0:	687b      	ldr	r3, [r7, #4]
   101f2:	22dc      	movs	r2, #220	; 0xdc
   101f4:	589b      	ldr	r3, [r3, r2]
   101f6:	001a      	movs	r2, r3
   101f8:	230c      	movs	r3, #12
   101fa:	18fb      	adds	r3, r7, r3
   101fc:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   101fe:	230c      	movs	r3, #12
   10200:	18fb      	adds	r3, r7, r3
   10202:	2200      	movs	r2, #0
   10204:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   10206:	687b      	ldr	r3, [r7, #4]
   10208:	22e0      	movs	r2, #224	; 0xe0
   1020a:	2100      	movs	r1, #0
   1020c:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1020e:	687b      	ldr	r3, [r7, #4]
   10210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10212:	220c      	movs	r2, #12
   10214:	18ba      	adds	r2, r7, r2
   10216:	6878      	ldr	r0, [r7, #4]
   10218:	2102      	movs	r1, #2
   1021a:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   1021c:	687b      	ldr	r3, [r7, #4]
   1021e:	22d8      	movs	r2, #216	; 0xd8
   10220:	2101      	movs	r1, #1
   10222:	5099      	str	r1, [r3, r2]
			return 1;
   10224:	2301      	movs	r3, #1
   10226:	e0a7      	b.n	10378 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   10228:	495a      	ldr	r1, [pc, #360]	; (10394 <_http_client_handle_header+0x28c>)
   1022a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1022c:	2210      	movs	r2, #16
   1022e:	0018      	movs	r0, r3
   10230:	4b57      	ldr	r3, [pc, #348]	; (10390 <_http_client_handle_header+0x288>)
   10232:	4798      	blx	r3
   10234:	1e03      	subs	r3, r0, #0
   10236:	d109      	bne.n	1024c <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   10238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1023a:	3310      	adds	r3, #16
   1023c:	0018      	movs	r0, r3
   1023e:	4b56      	ldr	r3, [pc, #344]	; (10398 <_http_client_handle_header+0x290>)
   10240:	4798      	blx	r3
   10242:	0001      	movs	r1, r0
   10244:	687b      	ldr	r3, [r7, #4]
   10246:	22dc      	movs	r2, #220	; 0xdc
   10248:	5099      	str	r1, [r3, r2]
   1024a:	e08b      	b.n	10364 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   1024c:	4953      	ldr	r1, [pc, #332]	; (1039c <_http_client_handle_header+0x294>)
   1024e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10250:	2213      	movs	r2, #19
   10252:	0018      	movs	r0, r3
   10254:	4b4e      	ldr	r3, [pc, #312]	; (10390 <_http_client_handle_header+0x288>)
   10256:	4798      	blx	r3
   10258:	1e03      	subs	r3, r0, #0
   1025a:	d127      	bne.n	102ac <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   1025c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1025e:	3313      	adds	r3, #19
   10260:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   10262:	e01e      	b.n	102a2 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   10264:	6a3b      	ldr	r3, [r7, #32]
   10266:	781b      	ldrb	r3, [r3, #0]
   10268:	2b20      	cmp	r3, #32
   1026a:	d103      	bne.n	10274 <_http_client_handle_header+0x16c>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1026c:	6a3b      	ldr	r3, [r7, #32]
   1026e:	3301      	adds	r3, #1
   10270:	623b      	str	r3, [r7, #32]
   10272:	e016      	b.n	102a2 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   10274:	6a3b      	ldr	r3, [r7, #32]
   10276:	781b      	ldrb	r3, [r3, #0]
   10278:	2b43      	cmp	r3, #67	; 0x43
   1027a:	d003      	beq.n	10284 <_http_client_handle_header+0x17c>
   1027c:	6a3b      	ldr	r3, [r7, #32]
   1027e:	781b      	ldrb	r3, [r3, #0]
   10280:	2b63      	cmp	r3, #99	; 0x63
   10282:	d105      	bne.n	10290 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   10284:	687b      	ldr	r3, [r7, #4]
   10286:	21cc      	movs	r1, #204	; 0xcc
   10288:	2201      	movs	r2, #1
   1028a:	4252      	negs	r2, r2
   1028c:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   1028e:	e069      	b.n	10364 <_http_client_handle_header+0x25c>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
					/* Chunked transfer */
					module->req.content_length = -1;
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
   10290:	2386      	movs	r3, #134	; 0x86
   10292:	425a      	negs	r2, r3
   10294:	687b      	ldr	r3, [r7, #4]
   10296:	0011      	movs	r1, r2
   10298:	0018      	movs	r0, r3
   1029a:	4b41      	ldr	r3, [pc, #260]	; (103a0 <_http_client_handle_header+0x298>)
   1029c:	4798      	blx	r3
					return 0;
   1029e:	2300      	movs	r3, #0
   102a0:	e06a      	b.n	10378 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
			for (; ptr_line_end > type_ptr; type_ptr++) {
   102a2:	69ba      	ldr	r2, [r7, #24]
   102a4:	6a3b      	ldr	r3, [r7, #32]
   102a6:	429a      	cmp	r2, r3
   102a8:	d8dc      	bhi.n	10264 <_http_client_handle_header+0x15c>
   102aa:	e05b      	b.n	10364 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   102ac:	493d      	ldr	r1, [pc, #244]	; (103a4 <_http_client_handle_header+0x29c>)
   102ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   102b0:	220c      	movs	r2, #12
   102b2:	0018      	movs	r0, r3
   102b4:	4b36      	ldr	r3, [pc, #216]	; (10390 <_http_client_handle_header+0x288>)
   102b6:	4798      	blx	r3
   102b8:	1e03      	subs	r3, r0, #0
   102ba:	d126      	bne.n	1030a <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   102bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   102be:	330c      	adds	r3, #12
   102c0:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   102c2:	e01d      	b.n	10300 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   102c4:	69fb      	ldr	r3, [r7, #28]
   102c6:	781b      	ldrb	r3, [r3, #0]
   102c8:	2b20      	cmp	r3, #32
   102ca:	d103      	bne.n	102d4 <_http_client_handle_header+0x1cc>
				}
				break;
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
			char *type_ptr = ptr + strlen("Connection: ");
			for (; ptr_line_end > type_ptr; type_ptr++) {
   102cc:	69fb      	ldr	r3, [r7, #28]
   102ce:	3301      	adds	r3, #1
   102d0:	61fb      	str	r3, [r7, #28]
   102d2:	e015      	b.n	10300 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   102d4:	69fb      	ldr	r3, [r7, #28]
   102d6:	781b      	ldrb	r3, [r3, #0]
   102d8:	2b4b      	cmp	r3, #75	; 0x4b
   102da:	d003      	beq.n	102e4 <_http_client_handle_header+0x1dc>
   102dc:	69fb      	ldr	r3, [r7, #28]
   102de:	781b      	ldrb	r3, [r3, #0]
   102e0:	2b6b      	cmp	r3, #107	; 0x6b
   102e2:	d106      	bne.n	102f2 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   102e4:	687b      	ldr	r3, [r7, #4]
   102e6:	2241      	movs	r2, #65	; 0x41
   102e8:	5c99      	ldrb	r1, [r3, r2]
   102ea:	2002      	movs	r0, #2
   102ec:	4301      	orrs	r1, r0
   102ee:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   102f0:	e038      	b.n	10364 <_http_client_handle_header+0x25c>
				if (*type_ptr == ' ') {
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
					module->permanent = 1;
				} else {
					module->permanent = 0;
   102f2:	687b      	ldr	r3, [r7, #4]
   102f4:	2241      	movs	r2, #65	; 0x41
   102f6:	5c99      	ldrb	r1, [r3, r2]
   102f8:	2002      	movs	r0, #2
   102fa:	4381      	bics	r1, r0
   102fc:	5499      	strb	r1, [r3, r2]
				}
				break;
   102fe:	e031      	b.n	10364 <_http_client_handle_header+0x25c>
				}
				break;
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
			char *type_ptr = ptr + strlen("Connection: ");
			for (; ptr_line_end > type_ptr; type_ptr++) {
   10300:	69ba      	ldr	r2, [r7, #24]
   10302:	69fb      	ldr	r3, [r7, #28]
   10304:	429a      	cmp	r2, r3
   10306:	d8dd      	bhi.n	102c4 <_http_client_handle_header+0x1bc>
   10308:	e02c      	b.n	10364 <_http_client_handle_header+0x25c>
				} else {
					module->permanent = 0;
				}
				break;
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   1030a:	4927      	ldr	r1, [pc, #156]	; (103a8 <_http_client_handle_header+0x2a0>)
   1030c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1030e:	2205      	movs	r2, #5
   10310:	0018      	movs	r0, r3
   10312:	4b1f      	ldr	r3, [pc, #124]	; (10390 <_http_client_handle_header+0x288>)
   10314:	4798      	blx	r3
   10316:	1e03      	subs	r3, r0, #0
   10318:	d124      	bne.n	10364 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   1031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1031c:	3309      	adds	r3, #9
   1031e:	0018      	movs	r0, r3
   10320:	4b1d      	ldr	r3, [pc, #116]	; (10398 <_http_client_handle_header+0x290>)
   10322:	4798      	blx	r3
   10324:	0003      	movs	r3, r0
   10326:	b299      	uxth	r1, r3
   10328:	687b      	ldr	r3, [r7, #4]
   1032a:	22e4      	movs	r2, #228	; 0xe4
   1032c:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   1032e:	687b      	ldr	r3, [r7, #4]
   10330:	22dc      	movs	r2, #220	; 0xdc
   10332:	2100      	movs	r1, #0
   10334:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   10336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10338:	3305      	adds	r3, #5
   1033a:	781b      	ldrb	r3, [r3, #0]
   1033c:	2b31      	cmp	r3, #49	; 0x31
   1033e:	d804      	bhi.n	1034a <_http_client_handle_header+0x242>
   10340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10342:	3307      	adds	r3, #7
   10344:	781b      	ldrb	r3, [r3, #0]
   10346:	2b30      	cmp	r3, #48	; 0x30
   10348:	d906      	bls.n	10358 <_http_client_handle_header+0x250>
				module->permanent = 1;
   1034a:	687b      	ldr	r3, [r7, #4]
   1034c:	2241      	movs	r2, #65	; 0x41
   1034e:	5c99      	ldrb	r1, [r3, r2]
   10350:	2002      	movs	r0, #2
   10352:	4301      	orrs	r1, r0
   10354:	5499      	strb	r1, [r3, r2]
   10356:	e005      	b.n	10364 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   10358:	687b      	ldr	r3, [r7, #4]
   1035a:	2241      	movs	r2, #65	; 0x41
   1035c:	5c99      	ldrb	r1, [r3, r2]
   1035e:	2002      	movs	r0, #2
   10360:	4381      	bics	r1, r0
   10362:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   10364:	4b06      	ldr	r3, [pc, #24]	; (10380 <_http_client_handle_header+0x278>)
   10366:	681b      	ldr	r3, [r3, #0]
   10368:	0018      	movs	r0, r3
   1036a:	4b08      	ldr	r3, [pc, #32]	; (1038c <_http_client_handle_header+0x284>)
   1036c:	4798      	blx	r3
   1036e:	0002      	movs	r2, r0
   10370:	69bb      	ldr	r3, [r7, #24]
   10372:	189b      	adds	r3, r3, r2
   10374:	627b      	str	r3, [r7, #36]	; 0x24
	}
   10376:	e6ce      	b.n	10116 <_http_client_handle_header+0xe>
}
   10378:	0018      	movs	r0, r3
   1037a:	46bd      	mov	sp, r7
   1037c:	b00b      	add	sp, #44	; 0x2c
   1037e:	bd90      	pop	{r4, r7, pc}
   10380:	20000008 	.word	0x20000008
   10384:	000189b9 	.word	0x000189b9
   10388:	0001076d 	.word	0x0001076d
   1038c:	00018987 	.word	0x00018987
   10390:	00018995 	.word	0x00018995
   10394:	0001ad78 	.word	0x0001ad78
   10398:	00018415 	.word	0x00018415
   1039c:	0001ad9c 	.word	0x0001ad9c
   103a0:	0000f7a1 	.word	0x0000f7a1
   103a4:	0001adb0 	.word	0x0001adb0
   103a8:	0001adc0 	.word	0x0001adc0

000103ac <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   103ac:	b580      	push	{r7, lr}
   103ae:	b088      	sub	sp, #32
   103b0:	af00      	add	r7, sp, #0
   103b2:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   103b4:	687b      	ldr	r3, [r7, #4]
   103b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   103b8:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   103ba:	2300      	movs	r3, #0
   103bc:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   103be:	687b      	ldr	r3, [r7, #4]
   103c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   103c2:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   103c4:	687b      	ldr	r3, [r7, #4]
   103c6:	22e0      	movs	r2, #224	; 0xe0
   103c8:	589b      	ldr	r3, [r3, r2]
   103ca:	2b00      	cmp	r3, #0
   103cc:	db71      	blt.n	104b2 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   103ce:	687b      	ldr	r3, [r7, #4]
   103d0:	22e0      	movs	r2, #224	; 0xe0
   103d2:	589b      	ldr	r3, [r3, r2]
   103d4:	2b00      	cmp	r3, #0
   103d6:	d134      	bne.n	10442 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   103d8:	687b      	ldr	r3, [r7, #4]
   103da:	22d8      	movs	r2, #216	; 0xd8
   103dc:	2100      	movs	r1, #0
   103de:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   103e0:	687b      	ldr	r3, [r7, #4]
   103e2:	22e4      	movs	r2, #228	; 0xe4
   103e4:	2100      	movs	r1, #0
   103e6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   103e8:	2308      	movs	r3, #8
   103ea:	18fb      	adds	r3, r7, r3
   103ec:	2201      	movs	r2, #1
   103ee:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   103f0:	2308      	movs	r3, #8
   103f2:	18fb      	adds	r3, r7, r3
   103f4:	2200      	movs	r2, #0
   103f6:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   103f8:	2308      	movs	r3, #8
   103fa:	18fb      	adds	r3, r7, r3
   103fc:	2200      	movs	r2, #0
   103fe:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   10400:	687b      	ldr	r3, [r7, #4]
   10402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10404:	2b00      	cmp	r3, #0
   10406:	d006      	beq.n	10416 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   10408:	687b      	ldr	r3, [r7, #4]
   1040a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1040c:	2208      	movs	r2, #8
   1040e:	18ba      	adds	r2, r7, r2
   10410:	6878      	ldr	r0, [r7, #4]
   10412:	2103      	movs	r1, #3
   10414:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   10416:	687b      	ldr	r3, [r7, #4]
   10418:	2241      	movs	r2, #65	; 0x41
   1041a:	5c9b      	ldrb	r3, [r3, r2]
   1041c:	2202      	movs	r2, #2
   1041e:	4013      	ands	r3, r2
   10420:	b2db      	uxtb	r3, r3
   10422:	2b00      	cmp	r3, #0
   10424:	d105      	bne.n	10432 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   10426:	687b      	ldr	r3, [r7, #4]
   10428:	2100      	movs	r1, #0
   1042a:	0018      	movs	r0, r3
   1042c:	4b62      	ldr	r3, [pc, #392]	; (105b8 <_http_client_read_chuked_entity+0x20c>)
   1042e:	4798      	blx	r3
					return;
   10430:	e0bf      	b.n	105b2 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   10432:	697b      	ldr	r3, [r7, #20]
   10434:	1c9a      	adds	r2, r3, #2
   10436:	687b      	ldr	r3, [r7, #4]
   10438:	0011      	movs	r1, r2
   1043a:	0018      	movs	r0, r3
   1043c:	4b5f      	ldr	r3, [pc, #380]	; (105bc <_http_client_read_chuked_entity+0x210>)
   1043e:	4798      	blx	r3
   10440:	e0b2      	b.n	105a8 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   10442:	687b      	ldr	r3, [r7, #4]
   10444:	22e0      	movs	r2, #224	; 0xe0
   10446:	589a      	ldr	r2, [r3, r2]
   10448:	69fb      	ldr	r3, [r7, #28]
   1044a:	429a      	cmp	r2, r3
   1044c:	dd00      	ble.n	10450 <_http_client_read_chuked_entity+0xa4>
   1044e:	e0ab      	b.n	105a8 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   10450:	687b      	ldr	r3, [r7, #4]
   10452:	22e0      	movs	r2, #224	; 0xe0
   10454:	589b      	ldr	r3, [r3, r2]
   10456:	001a      	movs	r2, r3
   10458:	2308      	movs	r3, #8
   1045a:	18fb      	adds	r3, r7, r3
   1045c:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   1045e:	2308      	movs	r3, #8
   10460:	18fb      	adds	r3, r7, r3
   10462:	697a      	ldr	r2, [r7, #20]
   10464:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   10466:	2308      	movs	r3, #8
   10468:	18fb      	adds	r3, r7, r3
   1046a:	2200      	movs	r2, #0
   1046c:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   1046e:	687b      	ldr	r3, [r7, #4]
   10470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10472:	2b00      	cmp	r3, #0
   10474:	d006      	beq.n	10484 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   10476:	687b      	ldr	r3, [r7, #4]
   10478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1047a:	2208      	movs	r2, #8
   1047c:	18ba      	adds	r2, r7, r2
   1047e:	6878      	ldr	r0, [r7, #4]
   10480:	2103      	movs	r1, #3
   10482:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   10484:	687b      	ldr	r3, [r7, #4]
   10486:	22e0      	movs	r2, #224	; 0xe0
   10488:	589b      	ldr	r3, [r3, r2]
   1048a:	3302      	adds	r3, #2
   1048c:	697a      	ldr	r2, [r7, #20]
   1048e:	18d2      	adds	r2, r2, r3
   10490:	687b      	ldr	r3, [r7, #4]
   10492:	0011      	movs	r1, r2
   10494:	0018      	movs	r0, r3
   10496:	4b49      	ldr	r3, [pc, #292]	; (105bc <_http_client_read_chuked_entity+0x210>)
   10498:	4798      	blx	r3
				length = (int)module->recved_size;
   1049a:	687b      	ldr	r3, [r7, #4]
   1049c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1049e:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   104a0:	687b      	ldr	r3, [r7, #4]
   104a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   104a4:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   104a6:	687b      	ldr	r3, [r7, #4]
   104a8:	21e0      	movs	r1, #224	; 0xe0
   104aa:	2201      	movs	r2, #1
   104ac:	4252      	negs	r2, r2
   104ae:	505a      	str	r2, [r3, r1]
   104b0:	e07a      	b.n	105a8 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   104b2:	687b      	ldr	r3, [r7, #4]
   104b4:	22e0      	movs	r2, #224	; 0xe0
   104b6:	2100      	movs	r1, #0
   104b8:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   104ba:	e05a      	b.n	10572 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   104bc:	697b      	ldr	r3, [r7, #20]
   104be:	781b      	ldrb	r3, [r3, #0]
   104c0:	2b0a      	cmp	r3, #10
   104c2:	d106      	bne.n	104d2 <_http_client_read_chuked_entity+0x126>
					buffer++;
   104c4:	697b      	ldr	r3, [r7, #20]
   104c6:	3301      	adds	r3, #1
   104c8:	617b      	str	r3, [r7, #20]
					length--;
   104ca:	69fb      	ldr	r3, [r7, #28]
   104cc:	3b01      	subs	r3, #1
   104ce:	61fb      	str	r3, [r7, #28]
					break;
   104d0:	e052      	b.n	10578 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   104d2:	69bb      	ldr	r3, [r7, #24]
   104d4:	2b00      	cmp	r3, #0
   104d6:	d145      	bne.n	10564 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   104d8:	697b      	ldr	r3, [r7, #20]
   104da:	781b      	ldrb	r3, [r3, #0]
   104dc:	2b2f      	cmp	r3, #47	; 0x2f
   104de:	d910      	bls.n	10502 <_http_client_read_chuked_entity+0x156>
   104e0:	697b      	ldr	r3, [r7, #20]
   104e2:	781b      	ldrb	r3, [r3, #0]
   104e4:	2b39      	cmp	r3, #57	; 0x39
   104e6:	d80c      	bhi.n	10502 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   104e8:	687b      	ldr	r3, [r7, #4]
   104ea:	22e0      	movs	r2, #224	; 0xe0
   104ec:	589b      	ldr	r3, [r3, r2]
   104ee:	011b      	lsls	r3, r3, #4
   104f0:	697a      	ldr	r2, [r7, #20]
   104f2:	7812      	ldrb	r2, [r2, #0]
   104f4:	189b      	adds	r3, r3, r2
   104f6:	3b30      	subs	r3, #48	; 0x30
   104f8:	001a      	movs	r2, r3
   104fa:	687b      	ldr	r3, [r7, #4]
   104fc:	21e0      	movs	r1, #224	; 0xe0
   104fe:	505a      	str	r2, [r3, r1]
   10500:	e031      	b.n	10566 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   10502:	697b      	ldr	r3, [r7, #20]
   10504:	781b      	ldrb	r3, [r3, #0]
   10506:	2b60      	cmp	r3, #96	; 0x60
   10508:	d910      	bls.n	1052c <_http_client_read_chuked_entity+0x180>
   1050a:	697b      	ldr	r3, [r7, #20]
   1050c:	781b      	ldrb	r3, [r3, #0]
   1050e:	2b66      	cmp	r3, #102	; 0x66
   10510:	d80c      	bhi.n	1052c <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   10512:	687b      	ldr	r3, [r7, #4]
   10514:	22e0      	movs	r2, #224	; 0xe0
   10516:	589b      	ldr	r3, [r3, r2]
   10518:	011b      	lsls	r3, r3, #4
   1051a:	697a      	ldr	r2, [r7, #20]
   1051c:	7812      	ldrb	r2, [r2, #0]
   1051e:	189b      	adds	r3, r3, r2
   10520:	3b61      	subs	r3, #97	; 0x61
   10522:	001a      	movs	r2, r3
   10524:	687b      	ldr	r3, [r7, #4]
   10526:	21e0      	movs	r1, #224	; 0xe0
   10528:	505a      	str	r2, [r3, r1]
   1052a:	e01c      	b.n	10566 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   1052c:	697b      	ldr	r3, [r7, #20]
   1052e:	781b      	ldrb	r3, [r3, #0]
   10530:	2b40      	cmp	r3, #64	; 0x40
   10532:	d910      	bls.n	10556 <_http_client_read_chuked_entity+0x1aa>
   10534:	697b      	ldr	r3, [r7, #20]
   10536:	781b      	ldrb	r3, [r3, #0]
   10538:	2b46      	cmp	r3, #70	; 0x46
   1053a:	d80c      	bhi.n	10556 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   1053c:	687b      	ldr	r3, [r7, #4]
   1053e:	22e0      	movs	r2, #224	; 0xe0
   10540:	589b      	ldr	r3, [r3, r2]
   10542:	011b      	lsls	r3, r3, #4
   10544:	697a      	ldr	r2, [r7, #20]
   10546:	7812      	ldrb	r2, [r2, #0]
   10548:	189b      	adds	r3, r3, r2
   1054a:	3b41      	subs	r3, #65	; 0x41
   1054c:	001a      	movs	r2, r3
   1054e:	687b      	ldr	r3, [r7, #4]
   10550:	21e0      	movs	r1, #224	; 0xe0
   10552:	505a      	str	r2, [r3, r1]
   10554:	e007      	b.n	10566 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   10556:	697b      	ldr	r3, [r7, #20]
   10558:	781b      	ldrb	r3, [r3, #0]
   1055a:	2b3b      	cmp	r3, #59	; 0x3b
   1055c:	d103      	bne.n	10566 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   1055e:	2301      	movs	r3, #1
   10560:	61bb      	str	r3, [r7, #24]
   10562:	e000      	b.n	10566 <_http_client_read_chuked_entity+0x1ba>
					buffer++;
					length--;
					break;
				}
				if (extension != 0) {
					continue;
   10564:	46c0      	nop			; (mov r8, r8)
				module->resp.read_length = -1;
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
			for (; length > 0; buffer++, length--) {
   10566:	697b      	ldr	r3, [r7, #20]
   10568:	3301      	adds	r3, #1
   1056a:	617b      	str	r3, [r7, #20]
   1056c:	69fb      	ldr	r3, [r7, #28]
   1056e:	3b01      	subs	r3, #1
   10570:	61fb      	str	r3, [r7, #28]
   10572:	69fb      	ldr	r3, [r7, #28]
   10574:	2b00      	cmp	r3, #0
   10576:	dca1      	bgt.n	104bc <_http_client_read_chuked_entity+0x110>
				} else if (*buffer == ';') {
					extension = 1;
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   10578:	687b      	ldr	r3, [r7, #4]
   1057a:	22e0      	movs	r2, #224	; 0xe0
   1057c:	589a      	ldr	r2, [r3, r2]
   1057e:	687b      	ldr	r3, [r7, #4]
   10580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   10582:	429a      	cmp	r2, r3
   10584:	dd07      	ble.n	10596 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   10586:	238b      	movs	r3, #139	; 0x8b
   10588:	425a      	negs	r2, r3
   1058a:	687b      	ldr	r3, [r7, #4]
   1058c:	0011      	movs	r1, r2
   1058e:	0018      	movs	r0, r3
   10590:	4b09      	ldr	r3, [pc, #36]	; (105b8 <_http_client_read_chuked_entity+0x20c>)
   10592:	4798      	blx	r3
				return;
   10594:	e00d      	b.n	105b2 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   10596:	69fb      	ldr	r3, [r7, #28]
   10598:	2b00      	cmp	r3, #0
   1059a:	d105      	bne.n	105a8 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   1059c:	687b      	ldr	r3, [r7, #4]
   1059e:	21e0      	movs	r1, #224	; 0xe0
   105a0:	2201      	movs	r2, #1
   105a2:	4252      	negs	r2, r2
   105a4:	505a      	str	r2, [r3, r1]
				return;
   105a6:	e004      	b.n	105b2 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   105a8:	687b      	ldr	r3, [r7, #4]
   105aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   105ac:	2b00      	cmp	r3, #0
   105ae:	d000      	beq.n	105b2 <_http_client_read_chuked_entity+0x206>
   105b0:	e708      	b.n	103c4 <_http_client_read_chuked_entity+0x18>
}
   105b2:	46bd      	mov	sp, r7
   105b4:	b008      	add	sp, #32
   105b6:	bd80      	pop	{r7, pc}
   105b8:	0000f7a1 	.word	0x0000f7a1
   105bc:	0001076d 	.word	0x0001076d

000105c0 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   105c0:	b580      	push	{r7, lr}
   105c2:	b086      	sub	sp, #24
   105c4:	af00      	add	r7, sp, #0
   105c6:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   105c8:	687b      	ldr	r3, [r7, #4]
   105ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   105cc:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   105ce:	687b      	ldr	r3, [r7, #4]
   105d0:	22dc      	movs	r2, #220	; 0xdc
   105d2:	589b      	ldr	r3, [r3, r2]
   105d4:	2b00      	cmp	r3, #0
   105d6:	db58      	blt.n	1068a <_http_client_handle_entity+0xca>
   105d8:	687b      	ldr	r3, [r7, #4]
   105da:	22dc      	movs	r2, #220	; 0xdc
   105dc:	589a      	ldr	r2, [r3, r2]
   105de:	687b      	ldr	r3, [r7, #4]
   105e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   105e2:	429a      	cmp	r2, r3
   105e4:	dc51      	bgt.n	1068a <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   105e6:	687b      	ldr	r3, [r7, #4]
   105e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   105ea:	0019      	movs	r1, r3
   105ec:	687b      	ldr	r3, [r7, #4]
   105ee:	22dc      	movs	r2, #220	; 0xdc
   105f0:	589b      	ldr	r3, [r3, r2]
   105f2:	4299      	cmp	r1, r3
   105f4:	da00      	bge.n	105f8 <_http_client_handle_entity+0x38>
   105f6:	e0a9      	b.n	1074c <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   105f8:	687b      	ldr	r3, [r7, #4]
   105fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   105fc:	2b00      	cmp	r3, #0
   105fe:	d020      	beq.n	10642 <_http_client_handle_entity+0x82>
   10600:	687b      	ldr	r3, [r7, #4]
   10602:	22e4      	movs	r2, #228	; 0xe4
   10604:	5a9b      	ldrh	r3, [r3, r2]
   10606:	2b00      	cmp	r3, #0
   10608:	d01b      	beq.n	10642 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   1060a:	687b      	ldr	r3, [r7, #4]
   1060c:	22e4      	movs	r2, #228	; 0xe4
   1060e:	5a9a      	ldrh	r2, [r3, r2]
   10610:	2308      	movs	r3, #8
   10612:	18fb      	adds	r3, r7, r3
   10614:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   10616:	2308      	movs	r3, #8
   10618:	18fb      	adds	r3, r7, r3
   1061a:	2200      	movs	r2, #0
   1061c:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   1061e:	687b      	ldr	r3, [r7, #4]
   10620:	22dc      	movs	r2, #220	; 0xdc
   10622:	589b      	ldr	r3, [r3, r2]
   10624:	001a      	movs	r2, r3
   10626:	2308      	movs	r3, #8
   10628:	18fb      	adds	r3, r7, r3
   1062a:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   1062c:	2308      	movs	r3, #8
   1062e:	18fb      	adds	r3, r7, r3
   10630:	697a      	ldr	r2, [r7, #20]
   10632:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   10634:	687b      	ldr	r3, [r7, #4]
   10636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10638:	2208      	movs	r2, #8
   1063a:	18ba      	adds	r2, r7, r2
   1063c:	6878      	ldr	r0, [r7, #4]
   1063e:	2102      	movs	r1, #2
   10640:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   10642:	687b      	ldr	r3, [r7, #4]
   10644:	22d8      	movs	r2, #216	; 0xd8
   10646:	2100      	movs	r1, #0
   10648:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   1064a:	687b      	ldr	r3, [r7, #4]
   1064c:	22e4      	movs	r2, #228	; 0xe4
   1064e:	2100      	movs	r1, #0
   10650:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   10652:	687b      	ldr	r3, [r7, #4]
   10654:	2241      	movs	r2, #65	; 0x41
   10656:	5c9b      	ldrb	r3, [r3, r2]
   10658:	2202      	movs	r2, #2
   1065a:	4013      	ands	r3, r2
   1065c:	b2db      	uxtb	r3, r3
   1065e:	2b00      	cmp	r3, #0
   10660:	d105      	bne.n	1066e <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   10662:	687b      	ldr	r3, [r7, #4]
   10664:	2100      	movs	r1, #0
   10666:	0018      	movs	r0, r3
   10668:	4b3b      	ldr	r3, [pc, #236]	; (10758 <_http_client_handle_entity+0x198>)
   1066a:	4798      	blx	r3
	union http_client_data data;
	char *buffer = module->config.recv_buffer;

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
		if ((int)module->recved_size >= module->resp.content_length) {
   1066c:	e06e      	b.n	1074c <_http_client_handle_entity+0x18c>
			
			if (module->permanent == 0) {
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   1066e:	687b      	ldr	r3, [r7, #4]
   10670:	22dc      	movs	r2, #220	; 0xdc
   10672:	589b      	ldr	r3, [r3, r2]
   10674:	001a      	movs	r2, r3
   10676:	697b      	ldr	r3, [r7, #20]
   10678:	189a      	adds	r2, r3, r2
   1067a:	687b      	ldr	r3, [r7, #4]
   1067c:	0011      	movs	r1, r2
   1067e:	0018      	movs	r0, r3
   10680:	4b36      	ldr	r3, [pc, #216]	; (1075c <_http_client_handle_entity+0x19c>)
   10682:	4798      	blx	r3
				return module->recved_size;
   10684:	687b      	ldr	r3, [r7, #4]
   10686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10688:	e061      	b.n	1074e <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   1068a:	687b      	ldr	r3, [r7, #4]
   1068c:	22dc      	movs	r2, #220	; 0xdc
   1068e:	589b      	ldr	r3, [r3, r2]
   10690:	2b00      	cmp	r3, #0
   10692:	db57      	blt.n	10744 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   10694:	687b      	ldr	r3, [r7, #4]
   10696:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   10698:	2308      	movs	r3, #8
   1069a:	18fb      	adds	r3, r7, r3
   1069c:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   1069e:	2308      	movs	r3, #8
   106a0:	18fb      	adds	r3, r7, r3
   106a2:	697a      	ldr	r2, [r7, #20]
   106a4:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   106a6:	687b      	ldr	r3, [r7, #4]
   106a8:	22e0      	movs	r2, #224	; 0xe0
   106aa:	589a      	ldr	r2, [r3, r2]
   106ac:	687b      	ldr	r3, [r7, #4]
   106ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   106b0:	18d2      	adds	r2, r2, r3
   106b2:	687b      	ldr	r3, [r7, #4]
   106b4:	21e0      	movs	r1, #224	; 0xe0
   106b6:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   106b8:	687b      	ldr	r3, [r7, #4]
   106ba:	22dc      	movs	r2, #220	; 0xdc
   106bc:	589a      	ldr	r2, [r3, r2]
   106be:	687b      	ldr	r3, [r7, #4]
   106c0:	21e0      	movs	r1, #224	; 0xe0
   106c2:	585b      	ldr	r3, [r3, r1]
   106c4:	429a      	cmp	r2, r3
   106c6:	dc0c      	bgt.n	106e2 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   106c8:	687b      	ldr	r3, [r7, #4]
   106ca:	22d8      	movs	r2, #216	; 0xd8
   106cc:	2100      	movs	r1, #0
   106ce:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   106d0:	687b      	ldr	r3, [r7, #4]
   106d2:	22e4      	movs	r2, #228	; 0xe4
   106d4:	2100      	movs	r1, #0
   106d6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   106d8:	2308      	movs	r3, #8
   106da:	18fb      	adds	r3, r7, r3
   106dc:	2201      	movs	r2, #1
   106de:	721a      	strb	r2, [r3, #8]
   106e0:	e003      	b.n	106ea <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   106e2:	2308      	movs	r3, #8
   106e4:	18fb      	adds	r3, r7, r3
   106e6:	2200      	movs	r2, #0
   106e8:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   106ea:	687b      	ldr	r3, [r7, #4]
   106ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   106ee:	2b00      	cmp	r3, #0
   106f0:	d006      	beq.n	10700 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   106f2:	687b      	ldr	r3, [r7, #4]
   106f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   106f6:	2208      	movs	r2, #8
   106f8:	18ba      	adds	r2, r7, r2
   106fa:	6878      	ldr	r0, [r7, #4]
   106fc:	2103      	movs	r1, #3
   106fe:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   10700:	2308      	movs	r3, #8
   10702:	18fb      	adds	r3, r7, r3
   10704:	7a1b      	ldrb	r3, [r3, #8]
   10706:	2b01      	cmp	r3, #1
   10708:	d112      	bne.n	10730 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   1070a:	687b      	ldr	r3, [r7, #4]
   1070c:	2241      	movs	r2, #65	; 0x41
   1070e:	5c9b      	ldrb	r3, [r3, r2]
   10710:	2202      	movs	r2, #2
   10712:	4013      	ands	r3, r2
   10714:	b2db      	uxtb	r3, r3
   10716:	2b00      	cmp	r3, #0
   10718:	d10a      	bne.n	10730 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   1071a:	4b11      	ldr	r3, [pc, #68]	; (10760 <_http_client_handle_entity+0x1a0>)
   1071c:	0018      	movs	r0, r3
   1071e:	4b11      	ldr	r3, [pc, #68]	; (10764 <_http_client_handle_entity+0x1a4>)
   10720:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   10722:	687b      	ldr	r3, [r7, #4]
   10724:	2100      	movs	r1, #0
   10726:	0018      	movs	r0, r3
   10728:	4b0b      	ldr	r3, [pc, #44]	; (10758 <_http_client_handle_entity+0x198>)
   1072a:	4798      	blx	r3
					return 0;
   1072c:	2300      	movs	r3, #0
   1072e:	e00e      	b.n	1074e <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   10730:	687b      	ldr	r3, [r7, #4]
   10732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10734:	697a      	ldr	r2, [r7, #20]
   10736:	18d2      	adds	r2, r2, r3
   10738:	687b      	ldr	r3, [r7, #4]
   1073a:	0011      	movs	r1, r2
   1073c:	0018      	movs	r0, r3
   1073e:	4b07      	ldr	r3, [pc, #28]	; (1075c <_http_client_handle_entity+0x19c>)
   10740:	4798      	blx	r3
   10742:	e003      	b.n	1074c <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   10744:	687b      	ldr	r3, [r7, #4]
   10746:	0018      	movs	r0, r3
   10748:	4b07      	ldr	r3, [pc, #28]	; (10768 <_http_client_handle_entity+0x1a8>)
   1074a:	4798      	blx	r3
		}
	}

	return 0;
   1074c:	2300      	movs	r3, #0
}
   1074e:	0018      	movs	r0, r3
   10750:	46bd      	mov	sp, r7
   10752:	b006      	add	sp, #24
   10754:	bd80      	pop	{r7, pc}
   10756:	46c0      	nop			; (mov r8, r8)
   10758:	0000f7a1 	.word	0x0000f7a1
   1075c:	0001076d 	.word	0x0001076d
   10760:	0001adc8 	.word	0x0001adc8
   10764:	00018739 	.word	0x00018739
   10768:	000103ad 	.word	0x000103ad

0001076c <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   1076c:	b580      	push	{r7, lr}
   1076e:	b084      	sub	sp, #16
   10770:	af00      	add	r7, sp, #0
   10772:	6078      	str	r0, [r7, #4]
   10774:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   10776:	687b      	ldr	r3, [r7, #4]
   10778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1077a:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   1077c:	687b      	ldr	r3, [r7, #4]
   1077e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10780:	001a      	movs	r2, r3
   10782:	683b      	ldr	r3, [r7, #0]
   10784:	1ad2      	subs	r2, r2, r3
   10786:	68fb      	ldr	r3, [r7, #12]
   10788:	18d3      	adds	r3, r2, r3
   1078a:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   1078c:	68bb      	ldr	r3, [r7, #8]
   1078e:	2b00      	cmp	r3, #0
   10790:	dd09      	ble.n	107a6 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   10792:	68ba      	ldr	r2, [r7, #8]
   10794:	6839      	ldr	r1, [r7, #0]
   10796:	68fb      	ldr	r3, [r7, #12]
   10798:	0018      	movs	r0, r3
   1079a:	4b06      	ldr	r3, [pc, #24]	; (107b4 <_http_client_move_buffer+0x48>)
   1079c:	4798      	blx	r3
		module->recved_size = remain;
   1079e:	68ba      	ldr	r2, [r7, #8]
   107a0:	687b      	ldr	r3, [r7, #4]
   107a2:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   107a4:	e002      	b.n	107ac <_http_client_move_buffer+0x40>

	if (remain > 0) {
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
   107a6:	687b      	ldr	r3, [r7, #4]
   107a8:	2200      	movs	r2, #0
   107aa:	645a      	str	r2, [r3, #68]	; 0x44
	}
}
   107ac:	46c0      	nop			; (mov r8, r8)
   107ae:	46bd      	mov	sp, r7
   107b0:	b004      	add	sp, #16
   107b2:	bd80      	pop	{r7, pc}
   107b4:	000184a7 	.word	0x000184a7

000107b8 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   107b8:	b580      	push	{r7, lr}
   107ba:	b084      	sub	sp, #16
   107bc:	af00      	add	r7, sp, #0
   107be:	60f8      	str	r0, [r7, #12]
   107c0:	60b9      	str	r1, [r7, #8]
   107c2:	607a      	str	r2, [r7, #4]
   107c4:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   107c6:	68fb      	ldr	r3, [r7, #12]
   107c8:	687a      	ldr	r2, [r7, #4]
   107ca:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   107cc:	68fb      	ldr	r3, [r7, #12]
   107ce:	68ba      	ldr	r2, [r7, #8]
   107d0:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   107d2:	68fb      	ldr	r3, [r7, #12]
   107d4:	2200      	movs	r2, #0
   107d6:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   107d8:	68fb      	ldr	r3, [r7, #12]
   107da:	683a      	ldr	r2, [r7, #0]
   107dc:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   107de:	68fb      	ldr	r3, [r7, #12]
   107e0:	69ba      	ldr	r2, [r7, #24]
   107e2:	60da      	str	r2, [r3, #12]
}
   107e4:	46c0      	nop			; (mov r8, r8)
   107e6:	46bd      	mov	sp, r7
   107e8:	b004      	add	sp, #16
   107ea:	bd80      	pop	{r7, pc}

000107ec <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   107ec:	b580      	push	{r7, lr}
   107ee:	b084      	sub	sp, #16
   107f0:	af00      	add	r7, sp, #0
   107f2:	6078      	str	r0, [r7, #4]
   107f4:	000a      	movs	r2, r1
   107f6:	1cfb      	adds	r3, r7, #3
   107f8:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   107fa:	687b      	ldr	r3, [r7, #4]
   107fc:	681a      	ldr	r2, [r3, #0]
   107fe:	687b      	ldr	r3, [r7, #4]
   10800:	685b      	ldr	r3, [r3, #4]
   10802:	1ad3      	subs	r3, r2, r3
   10804:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   10806:	68fb      	ldr	r3, [r7, #12]
   10808:	2b00      	cmp	r3, #0
   1080a:	dc03      	bgt.n	10814 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   1080c:	687b      	ldr	r3, [r7, #4]
   1080e:	0018      	movs	r0, r3
   10810:	4b08      	ldr	r3, [pc, #32]	; (10834 <stream_writer_send_8+0x48>)
   10812:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   10814:	687b      	ldr	r3, [r7, #4]
   10816:	6919      	ldr	r1, [r3, #16]
   10818:	687b      	ldr	r3, [r7, #4]
   1081a:	685b      	ldr	r3, [r3, #4]
   1081c:	1c58      	adds	r0, r3, #1
   1081e:	687a      	ldr	r2, [r7, #4]
   10820:	6050      	str	r0, [r2, #4]
   10822:	18cb      	adds	r3, r1, r3
   10824:	1cfa      	adds	r2, r7, #3
   10826:	7812      	ldrb	r2, [r2, #0]
   10828:	701a      	strb	r2, [r3, #0]
}
   1082a:	46c0      	nop			; (mov r8, r8)
   1082c:	46bd      	mov	sp, r7
   1082e:	b004      	add	sp, #16
   10830:	bd80      	pop	{r7, pc}
   10832:	46c0      	nop			; (mov r8, r8)
   10834:	000108b5 	.word	0x000108b5

00010838 <stream_writer_send_16BE>:

void stream_writer_send_16BE(struct stream_writer * writer, int16_t value)
{
   10838:	b580      	push	{r7, lr}
   1083a:	b082      	sub	sp, #8
   1083c:	af00      	add	r7, sp, #0
   1083e:	6078      	str	r0, [r7, #4]
   10840:	000a      	movs	r2, r1
   10842:	1cbb      	adds	r3, r7, #2
   10844:	801a      	strh	r2, [r3, #0]
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
   10846:	1cbb      	adds	r3, r7, #2
   10848:	2200      	movs	r2, #0
   1084a:	5e9b      	ldrsh	r3, [r3, r2]
   1084c:	121b      	asrs	r3, r3, #8
   1084e:	b21b      	sxth	r3, r3
   10850:	b25a      	sxtb	r2, r3
   10852:	687b      	ldr	r3, [r7, #4]
   10854:	0011      	movs	r1, r2
   10856:	0018      	movs	r0, r3
   10858:	4b06      	ldr	r3, [pc, #24]	; (10874 <stream_writer_send_16BE+0x3c>)
   1085a:	4798      	blx	r3
	stream_writer_send_8(writer, value & 0xFF);
   1085c:	1cbb      	adds	r3, r7, #2
   1085e:	881b      	ldrh	r3, [r3, #0]
   10860:	b25a      	sxtb	r2, r3
   10862:	687b      	ldr	r3, [r7, #4]
   10864:	0011      	movs	r1, r2
   10866:	0018      	movs	r0, r3
   10868:	4b02      	ldr	r3, [pc, #8]	; (10874 <stream_writer_send_16BE+0x3c>)
   1086a:	4798      	blx	r3
}
   1086c:	46c0      	nop			; (mov r8, r8)
   1086e:	46bd      	mov	sp, r7
   10870:	b002      	add	sp, #8
   10872:	bd80      	pop	{r7, pc}
   10874:	000107ed 	.word	0x000107ed

00010878 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   10878:	b580      	push	{r7, lr}
   1087a:	b084      	sub	sp, #16
   1087c:	af00      	add	r7, sp, #0
   1087e:	60f8      	str	r0, [r7, #12]
   10880:	60b9      	str	r1, [r7, #8]
   10882:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   10884:	e00d      	b.n	108a2 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   10886:	68bb      	ldr	r3, [r7, #8]
   10888:	781b      	ldrb	r3, [r3, #0]
   1088a:	b25a      	sxtb	r2, r3
   1088c:	68fb      	ldr	r3, [r7, #12]
   1088e:	0011      	movs	r1, r2
   10890:	0018      	movs	r0, r3
   10892:	4b07      	ldr	r3, [pc, #28]	; (108b0 <stream_writer_send_buffer+0x38>)
   10894:	4798      	blx	r3
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
	for (; length > 0; length--, buffer++) {
   10896:	687b      	ldr	r3, [r7, #4]
   10898:	3b01      	subs	r3, #1
   1089a:	607b      	str	r3, [r7, #4]
   1089c:	68bb      	ldr	r3, [r7, #8]
   1089e:	3301      	adds	r3, #1
   108a0:	60bb      	str	r3, [r7, #8]
   108a2:	687b      	ldr	r3, [r7, #4]
   108a4:	2b00      	cmp	r3, #0
   108a6:	d1ee      	bne.n	10886 <stream_writer_send_buffer+0xe>
		stream_writer_send_8(writer, *buffer);
	}
}
   108a8:	46c0      	nop			; (mov r8, r8)
   108aa:	46bd      	mov	sp, r7
   108ac:	b004      	add	sp, #16
   108ae:	bd80      	pop	{r7, pc}
   108b0:	000107ed 	.word	0x000107ed

000108b4 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   108b4:	b590      	push	{r4, r7, lr}
   108b6:	b083      	sub	sp, #12
   108b8:	af00      	add	r7, sp, #0
   108ba:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   108bc:	687b      	ldr	r3, [r7, #4]
   108be:	685b      	ldr	r3, [r3, #4]
   108c0:	2b00      	cmp	r3, #0
   108c2:	d00c      	beq.n	108de <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   108c4:	687b      	ldr	r3, [r7, #4]
   108c6:	689c      	ldr	r4, [r3, #8]
   108c8:	687b      	ldr	r3, [r7, #4]
   108ca:	68d8      	ldr	r0, [r3, #12]
   108cc:	687b      	ldr	r3, [r7, #4]
   108ce:	6919      	ldr	r1, [r3, #16]
   108d0:	687b      	ldr	r3, [r7, #4]
   108d2:	685b      	ldr	r3, [r3, #4]
   108d4:	001a      	movs	r2, r3
   108d6:	47a0      	blx	r4
		writer->written = 0;
   108d8:	687b      	ldr	r3, [r7, #4]
   108da:	2200      	movs	r2, #0
   108dc:	605a      	str	r2, [r3, #4]
	}
}
   108de:	46c0      	nop			; (mov r8, r8)
   108e0:	46bd      	mov	sp, r7
   108e2:	b003      	add	sp, #12
   108e4:	bd90      	pop	{r4, r7, pc}
   108e6:	46c0      	nop			; (mov r8, r8)

000108e8 <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
   108e8:	b580      	push	{r7, lr}
   108ea:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   108ec:	2000      	movs	r0, #0
   108ee:	4b05      	ldr	r3, [pc, #20]	; (10904 <system_cpu_clock_get_hz+0x1c>)
   108f0:	4798      	blx	r3
   108f2:	0002      	movs	r2, r0
   108f4:	4b04      	ldr	r3, [pc, #16]	; (10908 <system_cpu_clock_get_hz+0x20>)
   108f6:	7a1b      	ldrb	r3, [r3, #8]
   108f8:	b2db      	uxtb	r3, r3
   108fa:	40da      	lsrs	r2, r3
   108fc:	0013      	movs	r3, r2
}
   108fe:	0018      	movs	r0, r3
   10900:	46bd      	mov	sp, r7
   10902:	bd80      	pop	{r7, pc}
   10904:	00015189 	.word	0x00015189
   10908:	40000400 	.word	0x40000400

0001090c <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   1090c:	b580      	push	{r7, lr}
   1090e:	b084      	sub	sp, #16
   10910:	af00      	add	r7, sp, #0
   10912:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   10914:	687b      	ldr	r3, [r7, #4]
   10916:	681b      	ldr	r3, [r3, #0]
   10918:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   1091a:	46c0      	nop			; (mov r8, r8)
   1091c:	68fb      	ldr	r3, [r7, #12]
   1091e:	689b      	ldr	r3, [r3, #8]
   10920:	2202      	movs	r2, #2
   10922:	4013      	ands	r3, r2
   10924:	d1fa      	bne.n	1091c <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   10926:	68fb      	ldr	r3, [r7, #12]
   10928:	681b      	ldr	r3, [r3, #0]
   1092a:	2202      	movs	r2, #2
   1092c:	431a      	orrs	r2, r3
   1092e:	68fb      	ldr	r3, [r7, #12]
   10930:	601a      	str	r2, [r3, #0]
}
   10932:	46c0      	nop			; (mov r8, r8)
   10934:	46bd      	mov	sp, r7
   10936:	b004      	add	sp, #16
   10938:	bd80      	pop	{r7, pc}
   1093a:	46c0      	nop			; (mov r8, r8)

0001093c <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   1093c:	b580      	push	{r7, lr}
   1093e:	b082      	sub	sp, #8
   10940:	af00      	add	r7, sp, #0
   10942:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   10944:	4b04      	ldr	r3, [pc, #16]	; (10958 <sw_timer_tcc_callback+0x1c>)
   10946:	681b      	ldr	r3, [r3, #0]
   10948:	1c5a      	adds	r2, r3, #1
   1094a:	4b03      	ldr	r3, [pc, #12]	; (10958 <sw_timer_tcc_callback+0x1c>)
   1094c:	601a      	str	r2, [r3, #0]
}
   1094e:	46c0      	nop			; (mov r8, r8)
   10950:	46bd      	mov	sp, r7
   10952:	b002      	add	sp, #8
   10954:	bd80      	pop	{r7, pc}
   10956:	46c0      	nop			; (mov r8, r8)
   10958:	200000e4 	.word	0x200000e4

0001095c <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   1095c:	b580      	push	{r7, lr}
   1095e:	b082      	sub	sp, #8
   10960:	af00      	add	r7, sp, #0
   10962:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   10964:	687b      	ldr	r3, [r7, #4]
   10966:	2264      	movs	r2, #100	; 0x64
   10968:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   1096a:	687b      	ldr	r3, [r7, #4]
   1096c:	2200      	movs	r2, #0
   1096e:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   10970:	687b      	ldr	r3, [r7, #4]
   10972:	2200      	movs	r2, #0
   10974:	705a      	strb	r2, [r3, #1]
}
   10976:	46c0      	nop			; (mov r8, r8)
   10978:	46bd      	mov	sp, r7
   1097a:	b002      	add	sp, #8
   1097c:	bd80      	pop	{r7, pc}
   1097e:	46c0      	nop			; (mov r8, r8)

00010980 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   10980:	b590      	push	{r4, r7, lr}
   10982:	b0b1      	sub	sp, #196	; 0xc4
   10984:	af00      	add	r7, sp, #0
   10986:	6078      	str	r0, [r7, #4]
   10988:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   1098a:	230c      	movs	r3, #12
   1098c:	18fb      	adds	r3, r7, r3
   1098e:	4a2e      	ldr	r2, [pc, #184]	; (10a48 <sw_timer_init+0xc8>)
   10990:	ca13      	ldmia	r2!, {r0, r1, r4}
   10992:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   10994:	683b      	ldr	r3, [r7, #0]
   10996:	885b      	ldrh	r3, [r3, #2]
   10998:	001a      	movs	r2, r3
   1099a:	687b      	ldr	r3, [r7, #4]
   1099c:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   1099e:	687b      	ldr	r3, [r7, #4]
   109a0:	3314      	adds	r3, #20
   109a2:	22bc      	movs	r2, #188	; 0xbc
   109a4:	18ba      	adds	r2, r7, r2
   109a6:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   109a8:	683b      	ldr	r3, [r7, #0]
   109aa:	781b      	ldrb	r3, [r3, #0]
   109ac:	001a      	movs	r2, r3
   109ae:	230c      	movs	r3, #12
   109b0:	18fb      	adds	r3, r7, r3
   109b2:	0092      	lsls	r2, r2, #2
   109b4:	58d2      	ldr	r2, [r2, r3]
   109b6:	2318      	movs	r3, #24
   109b8:	18fb      	adds	r3, r7, r3
   109ba:	0011      	movs	r1, r2
   109bc:	0018      	movs	r0, r3
   109be:	4b23      	ldr	r3, [pc, #140]	; (10a4c <sw_timer_init+0xcc>)
   109c0:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   109c2:	4b23      	ldr	r3, [pc, #140]	; (10a50 <sw_timer_init+0xd0>)
   109c4:	4798      	blx	r3
   109c6:	0004      	movs	r4, r0
   109c8:	683b      	ldr	r3, [r7, #0]
   109ca:	885b      	ldrh	r3, [r3, #2]
   109cc:	001a      	movs	r2, r3
   109ce:	4b21      	ldr	r3, [pc, #132]	; (10a54 <sw_timer_init+0xd4>)
   109d0:	0011      	movs	r1, r2
   109d2:	22fa      	movs	r2, #250	; 0xfa
   109d4:	0210      	lsls	r0, r2, #8
   109d6:	4798      	blx	r3
   109d8:	0003      	movs	r3, r0
   109da:	001a      	movs	r2, r3
   109dc:	4b1e      	ldr	r3, [pc, #120]	; (10a58 <sw_timer_init+0xd8>)
   109de:	0011      	movs	r1, r2
   109e0:	0020      	movs	r0, r4
   109e2:	4798      	blx	r3
   109e4:	0003      	movs	r3, r0
   109e6:	001a      	movs	r2, r3
   109e8:	2318      	movs	r3, #24
   109ea:	18fb      	adds	r3, r7, r3
   109ec:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   109ee:	2318      	movs	r3, #24
   109f0:	18fb      	adds	r3, r7, r3
   109f2:	2205      	movs	r2, #5
   109f4:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   109f6:	683b      	ldr	r3, [r7, #0]
   109f8:	781b      	ldrb	r3, [r3, #0]
   109fa:	001a      	movs	r2, r3
   109fc:	230c      	movs	r3, #12
   109fe:	18fb      	adds	r3, r7, r3
   10a00:	0092      	lsls	r2, r2, #2
   10a02:	58d1      	ldr	r1, [r2, r3]
   10a04:	2318      	movs	r3, #24
   10a06:	18fa      	adds	r2, r7, r3
   10a08:	23bc      	movs	r3, #188	; 0xbc
   10a0a:	18fb      	adds	r3, r7, r3
   10a0c:	681b      	ldr	r3, [r3, #0]
   10a0e:	0018      	movs	r0, r3
   10a10:	4b12      	ldr	r3, [pc, #72]	; (10a5c <sw_timer_init+0xdc>)
   10a12:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   10a14:	683b      	ldr	r3, [r7, #0]
   10a16:	785b      	ldrb	r3, [r3, #1]
   10a18:	3308      	adds	r3, #8
   10a1a:	b2da      	uxtb	r2, r3
   10a1c:	4910      	ldr	r1, [pc, #64]	; (10a60 <sw_timer_init+0xe0>)
   10a1e:	23bc      	movs	r3, #188	; 0xbc
   10a20:	18fb      	adds	r3, r7, r3
   10a22:	681b      	ldr	r3, [r3, #0]
   10a24:	0018      	movs	r0, r3
   10a26:	4b0f      	ldr	r3, [pc, #60]	; (10a64 <sw_timer_init+0xe4>)
   10a28:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   10a2a:	683b      	ldr	r3, [r7, #0]
   10a2c:	785b      	ldrb	r3, [r3, #1]
   10a2e:	3308      	adds	r3, #8
   10a30:	b2da      	uxtb	r2, r3
   10a32:	23bc      	movs	r3, #188	; 0xbc
   10a34:	18fb      	adds	r3, r7, r3
   10a36:	681b      	ldr	r3, [r3, #0]
   10a38:	0011      	movs	r1, r2
   10a3a:	0018      	movs	r0, r3
   10a3c:	4b0a      	ldr	r3, [pc, #40]	; (10a68 <sw_timer_init+0xe8>)
   10a3e:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   10a40:	46c0      	nop			; (mov r8, r8)
   10a42:	46bd      	mov	sp, r7
   10a44:	b031      	add	sp, #196	; 0xc4
   10a46:	bd90      	pop	{r4, r7, pc}
   10a48:	0001ae08 	.word	0x0001ae08
   10a4c:	0000e3fd 	.word	0x0000e3fd
   10a50:	000108e9 	.word	0x000108e9
   10a54:	000181e5 	.word	0x000181e5
   10a58:	000180d1 	.word	0x000180d1
   10a5c:	0000ea59 	.word	0x0000ea59
   10a60:	0001093d 	.word	0x0001093d
   10a64:	0000ee71 	.word	0x0000ee71
   10a68:	0000eeb1 	.word	0x0000eeb1

00010a6c <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   10a6c:	b580      	push	{r7, lr}
   10a6e:	b084      	sub	sp, #16
   10a70:	af00      	add	r7, sp, #0
   10a72:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   10a74:	687b      	ldr	r3, [r7, #4]
   10a76:	3314      	adds	r3, #20
   10a78:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   10a7a:	68fb      	ldr	r3, [r7, #12]
   10a7c:	0018      	movs	r0, r3
   10a7e:	4b03      	ldr	r3, [pc, #12]	; (10a8c <sw_timer_enable+0x20>)
   10a80:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   10a82:	46c0      	nop			; (mov r8, r8)
   10a84:	46bd      	mov	sp, r7
   10a86:	b004      	add	sp, #16
   10a88:	bd80      	pop	{r7, pc}
   10a8a:	46c0      	nop			; (mov r8, r8)
   10a8c:	0001090d 	.word	0x0001090d

00010a90 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   10a90:	b580      	push	{r7, lr}
   10a92:	b086      	sub	sp, #24
   10a94:	af00      	add	r7, sp, #0
   10a96:	60f8      	str	r0, [r7, #12]
   10a98:	60b9      	str	r1, [r7, #8]
   10a9a:	607a      	str	r2, [r7, #4]
   10a9c:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   10a9e:	2300      	movs	r3, #0
   10aa0:	617b      	str	r3, [r7, #20]
   10aa2:	e032      	b.n	10b0a <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   10aa4:	68f9      	ldr	r1, [r7, #12]
   10aa6:	697a      	ldr	r2, [r7, #20]
   10aa8:	0013      	movs	r3, r2
   10aaa:	009b      	lsls	r3, r3, #2
   10aac:	189b      	adds	r3, r3, r2
   10aae:	009b      	lsls	r3, r3, #2
   10ab0:	5c5b      	ldrb	r3, [r3, r1]
   10ab2:	07db      	lsls	r3, r3, #31
   10ab4:	0fdb      	lsrs	r3, r3, #31
   10ab6:	b2db      	uxtb	r3, r3
   10ab8:	2b00      	cmp	r3, #0
   10aba:	d123      	bne.n	10b04 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   10abc:	697a      	ldr	r2, [r7, #20]
   10abe:	0013      	movs	r3, r2
   10ac0:	009b      	lsls	r3, r3, #2
   10ac2:	189b      	adds	r3, r3, r2
   10ac4:	009b      	lsls	r3, r3, #2
   10ac6:	68fa      	ldr	r2, [r7, #12]
   10ac8:	18d3      	adds	r3, r2, r3
   10aca:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   10acc:	693b      	ldr	r3, [r7, #16]
   10ace:	68ba      	ldr	r2, [r7, #8]
   10ad0:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   10ad2:	693b      	ldr	r3, [r7, #16]
   10ad4:	781a      	ldrb	r2, [r3, #0]
   10ad6:	2102      	movs	r1, #2
   10ad8:	438a      	bics	r2, r1
   10ada:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   10adc:	693b      	ldr	r3, [r7, #16]
   10ade:	687a      	ldr	r2, [r7, #4]
   10ae0:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   10ae2:	68fb      	ldr	r3, [r7, #12]
   10ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   10ae6:	4b0d      	ldr	r3, [pc, #52]	; (10b1c <sw_timer_register_callback+0x8c>)
   10ae8:	0011      	movs	r1, r2
   10aea:	6838      	ldr	r0, [r7, #0]
   10aec:	4798      	blx	r3
   10aee:	0003      	movs	r3, r0
   10af0:	001a      	movs	r2, r3
   10af2:	693b      	ldr	r3, [r7, #16]
   10af4:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   10af6:	693b      	ldr	r3, [r7, #16]
   10af8:	781a      	ldrb	r2, [r3, #0]
   10afa:	2101      	movs	r1, #1
   10afc:	430a      	orrs	r2, r1
   10afe:	701a      	strb	r2, [r3, #0]
			return index;
   10b00:	697b      	ldr	r3, [r7, #20]
   10b02:	e007      	b.n	10b14 <sw_timer_register_callback+0x84>
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   10b04:	697b      	ldr	r3, [r7, #20]
   10b06:	3301      	adds	r3, #1
   10b08:	617b      	str	r3, [r7, #20]
   10b0a:	697b      	ldr	r3, [r7, #20]
   10b0c:	2b00      	cmp	r3, #0
   10b0e:	ddc9      	ble.n	10aa4 <sw_timer_register_callback+0x14>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   10b10:	2301      	movs	r3, #1
   10b12:	425b      	negs	r3, r3
}
   10b14:	0018      	movs	r0, r3
   10b16:	46bd      	mov	sp, r7
   10b18:	b006      	add	sp, #24
   10b1a:	bd80      	pop	{r7, pc}
   10b1c:	000180d1 	.word	0x000180d1

00010b20 <sw_timer_unregister_callback>:

void sw_timer_unregister_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   10b20:	b580      	push	{r7, lr}
   10b22:	b084      	sub	sp, #16
   10b24:	af00      	add	r7, sp, #0
   10b26:	6078      	str	r0, [r7, #4]
   10b28:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   10b2a:	683a      	ldr	r2, [r7, #0]
   10b2c:	0013      	movs	r3, r2
   10b2e:	009b      	lsls	r3, r3, #2
   10b30:	189b      	adds	r3, r3, r2
   10b32:	009b      	lsls	r3, r3, #2
   10b34:	687a      	ldr	r2, [r7, #4]
   10b36:	18d3      	adds	r3, r2, r3
   10b38:	60fb      	str	r3, [r7, #12]

	handler->used = 0;
   10b3a:	68fb      	ldr	r3, [r7, #12]
   10b3c:	781a      	ldrb	r2, [r3, #0]
   10b3e:	2101      	movs	r1, #1
   10b40:	438a      	bics	r2, r1
   10b42:	701a      	strb	r2, [r3, #0]
}
   10b44:	46c0      	nop			; (mov r8, r8)
   10b46:	46bd      	mov	sp, r7
   10b48:	b004      	add	sp, #16
   10b4a:	bd80      	pop	{r7, pc}

00010b4c <sw_timer_enable_callback>:

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   10b4c:	b580      	push	{r7, lr}
   10b4e:	b086      	sub	sp, #24
   10b50:	af00      	add	r7, sp, #0
   10b52:	60f8      	str	r0, [r7, #12]
   10b54:	60b9      	str	r1, [r7, #8]
   10b56:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   10b58:	68ba      	ldr	r2, [r7, #8]
   10b5a:	0013      	movs	r3, r2
   10b5c:	009b      	lsls	r3, r3, #2
   10b5e:	189b      	adds	r3, r3, r2
   10b60:	009b      	lsls	r3, r3, #2
   10b62:	68fa      	ldr	r2, [r7, #12]
   10b64:	18d3      	adds	r3, r2, r3
   10b66:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   10b68:	697b      	ldr	r3, [r7, #20]
   10b6a:	781a      	ldrb	r2, [r3, #0]
   10b6c:	2102      	movs	r1, #2
   10b6e:	430a      	orrs	r2, r1
   10b70:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   10b72:	68fb      	ldr	r3, [r7, #12]
   10b74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   10b76:	4b07      	ldr	r3, [pc, #28]	; (10b94 <sw_timer_enable_callback+0x48>)
   10b78:	0011      	movs	r1, r2
   10b7a:	6878      	ldr	r0, [r7, #4]
   10b7c:	4798      	blx	r3
   10b7e:	0003      	movs	r3, r0
   10b80:	001a      	movs	r2, r3
   10b82:	4b05      	ldr	r3, [pc, #20]	; (10b98 <sw_timer_enable_callback+0x4c>)
   10b84:	681b      	ldr	r3, [r3, #0]
   10b86:	18d2      	adds	r2, r2, r3
   10b88:	697b      	ldr	r3, [r7, #20]
   10b8a:	611a      	str	r2, [r3, #16]
}
   10b8c:	46c0      	nop			; (mov r8, r8)
   10b8e:	46bd      	mov	sp, r7
   10b90:	b006      	add	sp, #24
   10b92:	bd80      	pop	{r7, pc}
   10b94:	000180d1 	.word	0x000180d1
   10b98:	200000e4 	.word	0x200000e4

00010b9c <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   10b9c:	b580      	push	{r7, lr}
   10b9e:	b084      	sub	sp, #16
   10ba0:	af00      	add	r7, sp, #0
   10ba2:	6078      	str	r0, [r7, #4]
   10ba4:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   10ba6:	683a      	ldr	r2, [r7, #0]
   10ba8:	0013      	movs	r3, r2
   10baa:	009b      	lsls	r3, r3, #2
   10bac:	189b      	adds	r3, r3, r2
   10bae:	009b      	lsls	r3, r3, #2
   10bb0:	687a      	ldr	r2, [r7, #4]
   10bb2:	18d3      	adds	r3, r2, r3
   10bb4:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   10bb6:	68fb      	ldr	r3, [r7, #12]
   10bb8:	781a      	ldrb	r2, [r3, #0]
   10bba:	2102      	movs	r1, #2
   10bbc:	438a      	bics	r2, r1
   10bbe:	701a      	strb	r2, [r3, #0]
}
   10bc0:	46c0      	nop			; (mov r8, r8)
   10bc2:	46bd      	mov	sp, r7
   10bc4:	b004      	add	sp, #16
   10bc6:	bd80      	pop	{r7, pc}

00010bc8 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   10bc8:	b590      	push	{r4, r7, lr}
   10bca:	b085      	sub	sp, #20
   10bcc:	af00      	add	r7, sp, #0
   10bce:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   10bd0:	2300      	movs	r3, #0
   10bd2:	60fb      	str	r3, [r7, #12]
   10bd4:	e053      	b.n	10c7e <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   10bd6:	6879      	ldr	r1, [r7, #4]
   10bd8:	68fa      	ldr	r2, [r7, #12]
   10bda:	0013      	movs	r3, r2
   10bdc:	009b      	lsls	r3, r3, #2
   10bde:	189b      	adds	r3, r3, r2
   10be0:	009b      	lsls	r3, r3, #2
   10be2:	5c5b      	ldrb	r3, [r3, r1]
   10be4:	07db      	lsls	r3, r3, #31
   10be6:	0fdb      	lsrs	r3, r3, #31
   10be8:	b2db      	uxtb	r3, r3
   10bea:	2b00      	cmp	r3, #0
   10bec:	d044      	beq.n	10c78 <sw_timer_task+0xb0>
   10bee:	6879      	ldr	r1, [r7, #4]
   10bf0:	68fa      	ldr	r2, [r7, #12]
   10bf2:	0013      	movs	r3, r2
   10bf4:	009b      	lsls	r3, r3, #2
   10bf6:	189b      	adds	r3, r3, r2
   10bf8:	009b      	lsls	r3, r3, #2
   10bfa:	5c5b      	ldrb	r3, [r3, r1]
   10bfc:	079b      	lsls	r3, r3, #30
   10bfe:	0fdb      	lsrs	r3, r3, #31
   10c00:	b2db      	uxtb	r3, r3
   10c02:	2b00      	cmp	r3, #0
   10c04:	d038      	beq.n	10c78 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   10c06:	68fa      	ldr	r2, [r7, #12]
   10c08:	0013      	movs	r3, r2
   10c0a:	009b      	lsls	r3, r3, #2
   10c0c:	189b      	adds	r3, r3, r2
   10c0e:	009b      	lsls	r3, r3, #2
   10c10:	687a      	ldr	r2, [r7, #4]
   10c12:	18d3      	adds	r3, r2, r3
   10c14:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   10c16:	68bb      	ldr	r3, [r7, #8]
   10c18:	691a      	ldr	r2, [r3, #16]
   10c1a:	4b1c      	ldr	r3, [pc, #112]	; (10c8c <sw_timer_task+0xc4>)
   10c1c:	681b      	ldr	r3, [r3, #0]
   10c1e:	1ad3      	subs	r3, r2, r3
   10c20:	d52a      	bpl.n	10c78 <sw_timer_task+0xb0>
   10c22:	68bb      	ldr	r3, [r7, #8]
   10c24:	781b      	ldrb	r3, [r3, #0]
   10c26:	2204      	movs	r2, #4
   10c28:	4013      	ands	r3, r2
   10c2a:	b2db      	uxtb	r3, r3
   10c2c:	2b00      	cmp	r3, #0
   10c2e:	d123      	bne.n	10c78 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   10c30:	68bb      	ldr	r3, [r7, #8]
   10c32:	781a      	ldrb	r2, [r3, #0]
   10c34:	2104      	movs	r1, #4
   10c36:	430a      	orrs	r2, r1
   10c38:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   10c3a:	68bb      	ldr	r3, [r7, #8]
   10c3c:	68db      	ldr	r3, [r3, #12]
   10c3e:	2b00      	cmp	r3, #0
   10c40:	d007      	beq.n	10c52 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   10c42:	68bb      	ldr	r3, [r7, #8]
   10c44:	68da      	ldr	r2, [r3, #12]
   10c46:	4b11      	ldr	r3, [pc, #68]	; (10c8c <sw_timer_task+0xc4>)
   10c48:	681b      	ldr	r3, [r3, #0]
   10c4a:	18d2      	adds	r2, r2, r3
   10c4c:	68bb      	ldr	r3, [r7, #8]
   10c4e:	611a      	str	r2, [r3, #16]
   10c50:	e004      	b.n	10c5c <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   10c52:	68bb      	ldr	r3, [r7, #8]
   10c54:	781a      	ldrb	r2, [r3, #0]
   10c56:	2102      	movs	r1, #2
   10c58:	438a      	bics	r2, r1
   10c5a:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   10c5c:	68bb      	ldr	r3, [r7, #8]
   10c5e:	685c      	ldr	r4, [r3, #4]
   10c60:	68bb      	ldr	r3, [r7, #8]
   10c62:	689a      	ldr	r2, [r3, #8]
   10c64:	68bb      	ldr	r3, [r7, #8]
   10c66:	68db      	ldr	r3, [r3, #12]
   10c68:	68f9      	ldr	r1, [r7, #12]
   10c6a:	6878      	ldr	r0, [r7, #4]
   10c6c:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   10c6e:	68bb      	ldr	r3, [r7, #8]
   10c70:	781a      	ldrb	r2, [r3, #0]
   10c72:	2104      	movs	r1, #4
   10c74:	438a      	bics	r2, r1
   10c76:	701a      	strb	r2, [r3, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   10c78:	68fb      	ldr	r3, [r7, #12]
   10c7a:	3301      	adds	r3, #1
   10c7c:	60fb      	str	r3, [r7, #12]
   10c7e:	68fb      	ldr	r3, [r7, #12]
   10c80:	2b00      	cmp	r3, #0
   10c82:	dda8      	ble.n	10bd6 <sw_timer_task+0xe>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   10c84:	46c0      	nop			; (mov r8, r8)
   10c86:	46bd      	mov	sp, r7
   10c88:	b005      	add	sp, #20
   10c8a:	bd90      	pop	{r4, r7, pc}
   10c8c:	200000e4 	.word	0x200000e4

00010c90 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   10c90:	b580      	push	{r7, lr}
   10c92:	b082      	sub	sp, #8
   10c94:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   10c96:	4b10      	ldr	r3, [pc, #64]	; (10cd8 <cpu_irq_enter_critical+0x48>)
   10c98:	681b      	ldr	r3, [r3, #0]
   10c9a:	2b00      	cmp	r3, #0
   10c9c:	d112      	bne.n	10cc4 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   10c9e:	f3ef 8310 	mrs	r3, PRIMASK
   10ca2:	607b      	str	r3, [r7, #4]
  return(result);
   10ca4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   10ca6:	2b00      	cmp	r3, #0
   10ca8:	d109      	bne.n	10cbe <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   10caa:	b672      	cpsid	i
   10cac:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   10cb0:	4b0a      	ldr	r3, [pc, #40]	; (10cdc <cpu_irq_enter_critical+0x4c>)
   10cb2:	2200      	movs	r2, #0
   10cb4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   10cb6:	4b0a      	ldr	r3, [pc, #40]	; (10ce0 <cpu_irq_enter_critical+0x50>)
   10cb8:	2201      	movs	r2, #1
   10cba:	701a      	strb	r2, [r3, #0]
   10cbc:	e002      	b.n	10cc4 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   10cbe:	4b08      	ldr	r3, [pc, #32]	; (10ce0 <cpu_irq_enter_critical+0x50>)
   10cc0:	2200      	movs	r2, #0
   10cc2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   10cc4:	4b04      	ldr	r3, [pc, #16]	; (10cd8 <cpu_irq_enter_critical+0x48>)
   10cc6:	681b      	ldr	r3, [r3, #0]
   10cc8:	1c5a      	adds	r2, r3, #1
   10cca:	4b03      	ldr	r3, [pc, #12]	; (10cd8 <cpu_irq_enter_critical+0x48>)
   10ccc:	601a      	str	r2, [r3, #0]
}
   10cce:	46c0      	nop			; (mov r8, r8)
   10cd0:	46bd      	mov	sp, r7
   10cd2:	b002      	add	sp, #8
   10cd4:	bd80      	pop	{r7, pc}
   10cd6:	46c0      	nop			; (mov r8, r8)
   10cd8:	200000e8 	.word	0x200000e8
   10cdc:	2000000c 	.word	0x2000000c
   10ce0:	200000ec 	.word	0x200000ec

00010ce4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   10ce4:	b580      	push	{r7, lr}
   10ce6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   10ce8:	4b0b      	ldr	r3, [pc, #44]	; (10d18 <cpu_irq_leave_critical+0x34>)
   10cea:	681b      	ldr	r3, [r3, #0]
   10cec:	1e5a      	subs	r2, r3, #1
   10cee:	4b0a      	ldr	r3, [pc, #40]	; (10d18 <cpu_irq_leave_critical+0x34>)
   10cf0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   10cf2:	4b09      	ldr	r3, [pc, #36]	; (10d18 <cpu_irq_leave_critical+0x34>)
   10cf4:	681b      	ldr	r3, [r3, #0]
   10cf6:	2b00      	cmp	r3, #0
   10cf8:	d10a      	bne.n	10d10 <cpu_irq_leave_critical+0x2c>
   10cfa:	4b08      	ldr	r3, [pc, #32]	; (10d1c <cpu_irq_leave_critical+0x38>)
   10cfc:	781b      	ldrb	r3, [r3, #0]
   10cfe:	b2db      	uxtb	r3, r3
   10d00:	2b00      	cmp	r3, #0
   10d02:	d005      	beq.n	10d10 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   10d04:	4b06      	ldr	r3, [pc, #24]	; (10d20 <cpu_irq_leave_critical+0x3c>)
   10d06:	2201      	movs	r2, #1
   10d08:	701a      	strb	r2, [r3, #0]
   10d0a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   10d0e:	b662      	cpsie	i
	}
}
   10d10:	46c0      	nop			; (mov r8, r8)
   10d12:	46bd      	mov	sp, r7
   10d14:	bd80      	pop	{r7, pc}
   10d16:	46c0      	nop			; (mov r8, r8)
   10d18:	200000e8 	.word	0x200000e8
   10d1c:	200000ec 	.word	0x200000ec
   10d20:	2000000c 	.word	0x2000000c

00010d24 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   10d24:	b580      	push	{r7, lr}
   10d26:	b082      	sub	sp, #8
   10d28:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   10d2a:	4b2f      	ldr	r3, [pc, #188]	; (10de8 <Reset_Handler+0xc4>)
   10d2c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   10d2e:	4b2f      	ldr	r3, [pc, #188]	; (10dec <Reset_Handler+0xc8>)
   10d30:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   10d32:	687a      	ldr	r2, [r7, #4]
   10d34:	683b      	ldr	r3, [r7, #0]
   10d36:	429a      	cmp	r2, r3
   10d38:	d00c      	beq.n	10d54 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   10d3a:	e007      	b.n	10d4c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   10d3c:	683b      	ldr	r3, [r7, #0]
   10d3e:	1d1a      	adds	r2, r3, #4
   10d40:	603a      	str	r2, [r7, #0]
   10d42:	687a      	ldr	r2, [r7, #4]
   10d44:	1d11      	adds	r1, r2, #4
   10d46:	6079      	str	r1, [r7, #4]
   10d48:	6812      	ldr	r2, [r2, #0]
   10d4a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
   10d4c:	683a      	ldr	r2, [r7, #0]
   10d4e:	4b28      	ldr	r3, [pc, #160]	; (10df0 <Reset_Handler+0xcc>)
   10d50:	429a      	cmp	r2, r3
   10d52:	d3f3      	bcc.n	10d3c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   10d54:	4b27      	ldr	r3, [pc, #156]	; (10df4 <Reset_Handler+0xd0>)
   10d56:	603b      	str	r3, [r7, #0]
   10d58:	e004      	b.n	10d64 <Reset_Handler+0x40>
                *pDest++ = 0;
   10d5a:	683b      	ldr	r3, [r7, #0]
   10d5c:	1d1a      	adds	r2, r3, #4
   10d5e:	603a      	str	r2, [r7, #0]
   10d60:	2200      	movs	r2, #0
   10d62:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   10d64:	683a      	ldr	r2, [r7, #0]
   10d66:	4b24      	ldr	r3, [pc, #144]	; (10df8 <Reset_Handler+0xd4>)
   10d68:	429a      	cmp	r2, r3
   10d6a:	d3f6      	bcc.n	10d5a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   10d6c:	4b23      	ldr	r3, [pc, #140]	; (10dfc <Reset_Handler+0xd8>)
   10d6e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   10d70:	4b23      	ldr	r3, [pc, #140]	; (10e00 <Reset_Handler+0xdc>)
   10d72:	687a      	ldr	r2, [r7, #4]
   10d74:	21ff      	movs	r1, #255	; 0xff
   10d76:	438a      	bics	r2, r1
   10d78:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   10d7a:	4a22      	ldr	r2, [pc, #136]	; (10e04 <Reset_Handler+0xe0>)
   10d7c:	2390      	movs	r3, #144	; 0x90
   10d7e:	005b      	lsls	r3, r3, #1
   10d80:	2102      	movs	r1, #2
   10d82:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   10d84:	4a20      	ldr	r2, [pc, #128]	; (10e08 <Reset_Handler+0xe4>)
   10d86:	78d3      	ldrb	r3, [r2, #3]
   10d88:	2103      	movs	r1, #3
   10d8a:	438b      	bics	r3, r1
   10d8c:	1c19      	adds	r1, r3, #0
   10d8e:	2302      	movs	r3, #2
   10d90:	430b      	orrs	r3, r1
   10d92:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   10d94:	4a1c      	ldr	r2, [pc, #112]	; (10e08 <Reset_Handler+0xe4>)
   10d96:	78d3      	ldrb	r3, [r2, #3]
   10d98:	210c      	movs	r1, #12
   10d9a:	438b      	bics	r3, r1
   10d9c:	1c19      	adds	r1, r3, #0
   10d9e:	2308      	movs	r3, #8
   10da0:	430b      	orrs	r3, r1
   10da2:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   10da4:	4a19      	ldr	r2, [pc, #100]	; (10e0c <Reset_Handler+0xe8>)
   10da6:	7b93      	ldrb	r3, [r2, #14]
   10da8:	2130      	movs	r1, #48	; 0x30
   10daa:	438b      	bics	r3, r1
   10dac:	1c19      	adds	r1, r3, #0
   10dae:	2320      	movs	r3, #32
   10db0:	430b      	orrs	r3, r1
   10db2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   10db4:	4a15      	ldr	r2, [pc, #84]	; (10e0c <Reset_Handler+0xe8>)
   10db6:	7b93      	ldrb	r3, [r2, #14]
   10db8:	210c      	movs	r1, #12
   10dba:	438b      	bics	r3, r1
   10dbc:	1c19      	adds	r1, r3, #0
   10dbe:	2308      	movs	r3, #8
   10dc0:	430b      	orrs	r3, r1
   10dc2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   10dc4:	4a11      	ldr	r2, [pc, #68]	; (10e0c <Reset_Handler+0xe8>)
   10dc6:	7b93      	ldrb	r3, [r2, #14]
   10dc8:	2103      	movs	r1, #3
   10dca:	438b      	bics	r3, r1
   10dcc:	1c19      	adds	r1, r3, #0
   10dce:	2302      	movs	r3, #2
   10dd0:	430b      	orrs	r3, r1
   10dd2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   10dd4:	4a0e      	ldr	r2, [pc, #56]	; (10e10 <Reset_Handler+0xec>)
   10dd6:	6853      	ldr	r3, [r2, #4]
   10dd8:	2180      	movs	r1, #128	; 0x80
   10dda:	430b      	orrs	r3, r1
   10ddc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   10dde:	4b0d      	ldr	r3, [pc, #52]	; (10e14 <Reset_Handler+0xf0>)
   10de0:	4798      	blx	r3

        /* Branch to main function */
        main();
   10de2:	4b0d      	ldr	r3, [pc, #52]	; (10e18 <Reset_Handler+0xf4>)
   10de4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   10de6:	e7fe      	b.n	10de6 <Reset_Handler+0xc2>
   10de8:	0001b988 	.word	0x0001b988
   10dec:	20000000 	.word	0x20000000
   10df0:	20000094 	.word	0x20000094
   10df4:	20000094 	.word	0x20000094
   10df8:	20000ea8 	.word	0x20000ea8
   10dfc:	00008000 	.word	0x00008000
   10e00:	e000ed00 	.word	0xe000ed00
   10e04:	41007000 	.word	0x41007000
   10e08:	41005000 	.word	0x41005000
   10e0c:	41004800 	.word	0x41004800
   10e10:	41004000 	.word	0x41004000
   10e14:	00018421 	.word	0x00018421
   10e18:	00016ebd 	.word	0x00016ebd

00010e1c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   10e1c:	b580      	push	{r7, lr}
   10e1e:	af00      	add	r7, sp, #0
        while (1) {
        }
   10e20:	e7fe      	b.n	10e20 <Dummy_Handler+0x4>
   10e22:	46c0      	nop			; (mov r8, r8)

00010e24 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   10e24:	b580      	push	{r7, lr}
   10e26:	b084      	sub	sp, #16
   10e28:	af00      	add	r7, sp, #0
   10e2a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   10e2c:	4b0a      	ldr	r3, [pc, #40]	; (10e58 <_sbrk+0x34>)
   10e2e:	681b      	ldr	r3, [r3, #0]
   10e30:	2b00      	cmp	r3, #0
   10e32:	d102      	bne.n	10e3a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   10e34:	4b08      	ldr	r3, [pc, #32]	; (10e58 <_sbrk+0x34>)
   10e36:	4a09      	ldr	r2, [pc, #36]	; (10e5c <_sbrk+0x38>)
   10e38:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   10e3a:	4b07      	ldr	r3, [pc, #28]	; (10e58 <_sbrk+0x34>)
   10e3c:	681b      	ldr	r3, [r3, #0]
   10e3e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   10e40:	4b05      	ldr	r3, [pc, #20]	; (10e58 <_sbrk+0x34>)
   10e42:	681a      	ldr	r2, [r3, #0]
   10e44:	687b      	ldr	r3, [r7, #4]
   10e46:	18d2      	adds	r2, r2, r3
   10e48:	4b03      	ldr	r3, [pc, #12]	; (10e58 <_sbrk+0x34>)
   10e4a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   10e4c:	68fb      	ldr	r3, [r7, #12]
}
   10e4e:	0018      	movs	r0, r3
   10e50:	46bd      	mov	sp, r7
   10e52:	b004      	add	sp, #16
   10e54:	bd80      	pop	{r7, pc}
   10e56:	46c0      	nop			; (mov r8, r8)
   10e58:	200000f0 	.word	0x200000f0
   10e5c:	20002ea8 	.word	0x20002ea8

00010e60 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   10e60:	b580      	push	{r7, lr}
   10e62:	b082      	sub	sp, #8
   10e64:	af00      	add	r7, sp, #0
   10e66:	6078      	str	r0, [r7, #4]
	return -1;
   10e68:	2301      	movs	r3, #1
   10e6a:	425b      	negs	r3, r3
}
   10e6c:	0018      	movs	r0, r3
   10e6e:	46bd      	mov	sp, r7
   10e70:	b002      	add	sp, #8
   10e72:	bd80      	pop	{r7, pc}

00010e74 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   10e74:	b580      	push	{r7, lr}
   10e76:	b082      	sub	sp, #8
   10e78:	af00      	add	r7, sp, #0
   10e7a:	6078      	str	r0, [r7, #4]
   10e7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   10e7e:	683b      	ldr	r3, [r7, #0]
   10e80:	2280      	movs	r2, #128	; 0x80
   10e82:	0192      	lsls	r2, r2, #6
   10e84:	605a      	str	r2, [r3, #4]

	return 0;
   10e86:	2300      	movs	r3, #0
}
   10e88:	0018      	movs	r0, r3
   10e8a:	46bd      	mov	sp, r7
   10e8c:	b002      	add	sp, #8
   10e8e:	bd80      	pop	{r7, pc}

00010e90 <_isatty>:

extern int _isatty(int file)
{
   10e90:	b580      	push	{r7, lr}
   10e92:	b082      	sub	sp, #8
   10e94:	af00      	add	r7, sp, #0
   10e96:	6078      	str	r0, [r7, #4]
	return 1;
   10e98:	2301      	movs	r3, #1
}
   10e9a:	0018      	movs	r0, r3
   10e9c:	46bd      	mov	sp, r7
   10e9e:	b002      	add	sp, #8
   10ea0:	bd80      	pop	{r7, pc}
   10ea2:	46c0      	nop			; (mov r8, r8)

00010ea4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   10ea4:	b580      	push	{r7, lr}
   10ea6:	b084      	sub	sp, #16
   10ea8:	af00      	add	r7, sp, #0
   10eaa:	60f8      	str	r0, [r7, #12]
   10eac:	60b9      	str	r1, [r7, #8]
   10eae:	607a      	str	r2, [r7, #4]
	return 0;
   10eb0:	2300      	movs	r3, #0
}
   10eb2:	0018      	movs	r0, r3
   10eb4:	46bd      	mov	sp, r7
   10eb6:	b004      	add	sp, #16
   10eb8:	bd80      	pop	{r7, pc}
   10eba:	46c0      	nop			; (mov r8, r8)

00010ebc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   10ebc:	b580      	push	{r7, lr}
   10ebe:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   10ec0:	46c0      	nop			; (mov r8, r8)
   10ec2:	46bd      	mov	sp, r7
   10ec4:	bd80      	pop	{r7, pc}
   10ec6:	46c0      	nop			; (mov r8, r8)

00010ec8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   10ec8:	b580      	push	{r7, lr}
   10eca:	b084      	sub	sp, #16
   10ecc:	af00      	add	r7, sp, #0
   10ece:	0002      	movs	r2, r0
   10ed0:	1dfb      	adds	r3, r7, #7
   10ed2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   10ed4:	230f      	movs	r3, #15
   10ed6:	18fb      	adds	r3, r7, r3
   10ed8:	1dfa      	adds	r2, r7, #7
   10eda:	7812      	ldrb	r2, [r2, #0]
   10edc:	09d2      	lsrs	r2, r2, #7
   10ede:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   10ee0:	230e      	movs	r3, #14
   10ee2:	18fb      	adds	r3, r7, r3
   10ee4:	1dfa      	adds	r2, r7, #7
   10ee6:	7812      	ldrb	r2, [r2, #0]
   10ee8:	0952      	lsrs	r2, r2, #5
   10eea:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   10eec:	4b0d      	ldr	r3, [pc, #52]	; (10f24 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   10eee:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   10ef0:	230f      	movs	r3, #15
   10ef2:	18fb      	adds	r3, r7, r3
   10ef4:	781b      	ldrb	r3, [r3, #0]
   10ef6:	2b00      	cmp	r3, #0
   10ef8:	d10f      	bne.n	10f1a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   10efa:	230f      	movs	r3, #15
   10efc:	18fb      	adds	r3, r7, r3
   10efe:	781b      	ldrb	r3, [r3, #0]
   10f00:	009b      	lsls	r3, r3, #2
   10f02:	2210      	movs	r2, #16
   10f04:	4694      	mov	ip, r2
   10f06:	44bc      	add	ip, r7
   10f08:	4463      	add	r3, ip
   10f0a:	3b08      	subs	r3, #8
   10f0c:	681a      	ldr	r2, [r3, #0]
   10f0e:	230e      	movs	r3, #14
   10f10:	18fb      	adds	r3, r7, r3
   10f12:	781b      	ldrb	r3, [r3, #0]
   10f14:	01db      	lsls	r3, r3, #7
   10f16:	18d3      	adds	r3, r2, r3
   10f18:	e000      	b.n	10f1c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   10f1a:	2300      	movs	r3, #0
	}
}
   10f1c:	0018      	movs	r0, r3
   10f1e:	46bd      	mov	sp, r7
   10f20:	b004      	add	sp, #16
   10f22:	bd80      	pop	{r7, pc}
   10f24:	41004400 	.word	0x41004400

00010f28 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   10f28:	b580      	push	{r7, lr}
   10f2a:	b082      	sub	sp, #8
   10f2c:	af00      	add	r7, sp, #0
   10f2e:	0002      	movs	r2, r0
   10f30:	1dfb      	adds	r3, r7, #7
   10f32:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   10f34:	1dfb      	adds	r3, r7, #7
   10f36:	781b      	ldrb	r3, [r3, #0]
   10f38:	0018      	movs	r0, r3
   10f3a:	4b03      	ldr	r3, [pc, #12]	; (10f48 <port_get_group_from_gpio_pin+0x20>)
   10f3c:	4798      	blx	r3
   10f3e:	0003      	movs	r3, r0
}
   10f40:	0018      	movs	r0, r3
   10f42:	46bd      	mov	sp, r7
   10f44:	b002      	add	sp, #8
   10f46:	bd80      	pop	{r7, pc}
   10f48:	00010ec9 	.word	0x00010ec9

00010f4c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   10f4c:	b580      	push	{r7, lr}
   10f4e:	b084      	sub	sp, #16
   10f50:	af00      	add	r7, sp, #0
   10f52:	0002      	movs	r2, r0
   10f54:	1dfb      	adds	r3, r7, #7
   10f56:	701a      	strb	r2, [r3, #0]
   10f58:	1dbb      	adds	r3, r7, #6
   10f5a:	1c0a      	adds	r2, r1, #0
   10f5c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   10f5e:	1dfb      	adds	r3, r7, #7
   10f60:	781b      	ldrb	r3, [r3, #0]
   10f62:	0018      	movs	r0, r3
   10f64:	4b0d      	ldr	r3, [pc, #52]	; (10f9c <port_pin_set_output_level+0x50>)
   10f66:	4798      	blx	r3
   10f68:	0003      	movs	r3, r0
   10f6a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   10f6c:	1dfb      	adds	r3, r7, #7
   10f6e:	781b      	ldrb	r3, [r3, #0]
   10f70:	221f      	movs	r2, #31
   10f72:	4013      	ands	r3, r2
   10f74:	2201      	movs	r2, #1
   10f76:	409a      	lsls	r2, r3
   10f78:	0013      	movs	r3, r2
   10f7a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   10f7c:	1dbb      	adds	r3, r7, #6
   10f7e:	781b      	ldrb	r3, [r3, #0]
   10f80:	2b00      	cmp	r3, #0
   10f82:	d003      	beq.n	10f8c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   10f84:	68fb      	ldr	r3, [r7, #12]
   10f86:	68ba      	ldr	r2, [r7, #8]
   10f88:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   10f8a:	e002      	b.n	10f92 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
   10f8c:	68fb      	ldr	r3, [r7, #12]
   10f8e:	68ba      	ldr	r2, [r7, #8]
   10f90:	615a      	str	r2, [r3, #20]
	}
}
   10f92:	46c0      	nop			; (mov r8, r8)
   10f94:	46bd      	mov	sp, r7
   10f96:	b004      	add	sp, #16
   10f98:	bd80      	pop	{r7, pc}
   10f9a:	46c0      	nop			; (mov r8, r8)
   10f9c:	00010f29 	.word	0x00010f29

00010fa0 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
   10fa0:	b580      	push	{r7, lr}
   10fa2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   10fa4:	4b02      	ldr	r3, [pc, #8]	; (10fb0 <system_interrupt_enter_critical_section+0x10>)
   10fa6:	4798      	blx	r3
}
   10fa8:	46c0      	nop			; (mov r8, r8)
   10faa:	46bd      	mov	sp, r7
   10fac:	bd80      	pop	{r7, pc}
   10fae:	46c0      	nop			; (mov r8, r8)
   10fb0:	00010c91 	.word	0x00010c91

00010fb4 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
   10fb4:	b580      	push	{r7, lr}
   10fb6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   10fb8:	4b02      	ldr	r3, [pc, #8]	; (10fc4 <system_interrupt_leave_critical_section+0x10>)
   10fba:	4798      	blx	r3
}
   10fbc:	46c0      	nop			; (mov r8, r8)
   10fbe:	46bd      	mov	sp, r7
   10fc0:	bd80      	pop	{r7, pc}
   10fc2:	46c0      	nop			; (mov r8, r8)
   10fc4:	00010ce5 	.word	0x00010ce5

00010fc8 <spi_lock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline enum status_code spi_lock(struct spi_module *const module)
{
   10fc8:	b580      	push	{r7, lr}
   10fca:	b084      	sub	sp, #16
   10fcc:	af00      	add	r7, sp, #0
   10fce:	6078      	str	r0, [r7, #4]
	enum status_code status;

	system_interrupt_enter_critical_section();
   10fd0:	4b0d      	ldr	r3, [pc, #52]	; (11008 <spi_lock+0x40>)
   10fd2:	4798      	blx	r3

	if (module->locked) {
   10fd4:	687b      	ldr	r3, [r7, #4]
   10fd6:	791b      	ldrb	r3, [r3, #4]
   10fd8:	b2db      	uxtb	r3, r3
   10fda:	2b00      	cmp	r3, #0
   10fdc:	d004      	beq.n	10fe8 <spi_lock+0x20>
		status = STATUS_BUSY;
   10fde:	230f      	movs	r3, #15
   10fe0:	18fb      	adds	r3, r7, r3
   10fe2:	2205      	movs	r2, #5
   10fe4:	701a      	strb	r2, [r3, #0]
   10fe6:	e006      	b.n	10ff6 <spi_lock+0x2e>
	} else {
		module->locked = true;
   10fe8:	687b      	ldr	r3, [r7, #4]
   10fea:	2201      	movs	r2, #1
   10fec:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
   10fee:	230f      	movs	r3, #15
   10ff0:	18fb      	adds	r3, r7, r3
   10ff2:	2200      	movs	r2, #0
   10ff4:	701a      	strb	r2, [r3, #0]
	}

	system_interrupt_leave_critical_section();
   10ff6:	4b05      	ldr	r3, [pc, #20]	; (1100c <spi_lock+0x44>)
   10ff8:	4798      	blx	r3

	return status;
   10ffa:	230f      	movs	r3, #15
   10ffc:	18fb      	adds	r3, r7, r3
   10ffe:	781b      	ldrb	r3, [r3, #0]
}
   11000:	0018      	movs	r0, r3
   11002:	46bd      	mov	sp, r7
   11004:	b004      	add	sp, #16
   11006:	bd80      	pop	{r7, pc}
   11008:	00010fa1 	.word	0x00010fa1
   1100c:	00010fb5 	.word	0x00010fb5

00011010 <spi_unlock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
   11010:	b580      	push	{r7, lr}
   11012:	b082      	sub	sp, #8
   11014:	af00      	add	r7, sp, #0
   11016:	6078      	str	r0, [r7, #4]
	module->locked = false;
   11018:	687b      	ldr	r3, [r7, #4]
   1101a:	2200      	movs	r2, #0
   1101c:	711a      	strb	r2, [r3, #4]
}
   1101e:	46c0      	nop			; (mov r8, r8)
   11020:	46bd      	mov	sp, r7
   11022:	b002      	add	sp, #8
   11024:	bd80      	pop	{r7, pc}
   11026:	46c0      	nop			; (mov r8, r8)

00011028 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   11028:	b580      	push	{r7, lr}
   1102a:	b084      	sub	sp, #16
   1102c:	af00      	add	r7, sp, #0
   1102e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   11030:	687b      	ldr	r3, [r7, #4]
   11032:	681b      	ldr	r3, [r3, #0]
   11034:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   11036:	68fb      	ldr	r3, [r7, #12]
   11038:	7e1b      	ldrb	r3, [r3, #24]
   1103a:	b2db      	uxtb	r3, r3
   1103c:	001a      	movs	r2, r3
   1103e:	2301      	movs	r3, #1
   11040:	4013      	ands	r3, r2
   11042:	1e5a      	subs	r2, r3, #1
   11044:	4193      	sbcs	r3, r2
   11046:	b2db      	uxtb	r3, r3
}
   11048:	0018      	movs	r0, r3
   1104a:	46bd      	mov	sp, r7
   1104c:	b004      	add	sp, #16
   1104e:	bd80      	pop	{r7, pc}

00011050 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   11050:	b580      	push	{r7, lr}
   11052:	b084      	sub	sp, #16
   11054:	af00      	add	r7, sp, #0
   11056:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   11058:	687b      	ldr	r3, [r7, #4]
   1105a:	681b      	ldr	r3, [r3, #0]
   1105c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1105e:	68fb      	ldr	r3, [r7, #12]
   11060:	7e1b      	ldrb	r3, [r3, #24]
   11062:	b2db      	uxtb	r3, r3
   11064:	001a      	movs	r2, r3
   11066:	2304      	movs	r3, #4
   11068:	4013      	ands	r3, r2
   1106a:	1e5a      	subs	r2, r3, #1
   1106c:	4193      	sbcs	r3, r2
   1106e:	b2db      	uxtb	r3, r3
}
   11070:	0018      	movs	r0, r3
   11072:	46bd      	mov	sp, r7
   11074:	b004      	add	sp, #16
   11076:	bd80      	pop	{r7, pc}

00011078 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   11078:	b580      	push	{r7, lr}
   1107a:	b084      	sub	sp, #16
   1107c:	af00      	add	r7, sp, #0
   1107e:	6078      	str	r0, [r7, #4]
   11080:	000a      	movs	r2, r1
   11082:	1cbb      	adds	r3, r7, #2
   11084:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   11086:	687b      	ldr	r3, [r7, #4]
   11088:	681b      	ldr	r3, [r3, #0]
   1108a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   1108c:	687b      	ldr	r3, [r7, #4]
   1108e:	0018      	movs	r0, r3
   11090:	4b0a      	ldr	r3, [pc, #40]	; (110bc <spi_write+0x44>)
   11092:	4798      	blx	r3
   11094:	0003      	movs	r3, r0
   11096:	001a      	movs	r2, r3
   11098:	2301      	movs	r3, #1
   1109a:	4053      	eors	r3, r2
   1109c:	b2db      	uxtb	r3, r3
   1109e:	2b00      	cmp	r3, #0
   110a0:	d001      	beq.n	110a6 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   110a2:	2305      	movs	r3, #5
   110a4:	e006      	b.n	110b4 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   110a6:	1cbb      	adds	r3, r7, #2
   110a8:	881b      	ldrh	r3, [r3, #0]
   110aa:	05db      	lsls	r3, r3, #23
   110ac:	0dda      	lsrs	r2, r3, #23
   110ae:	68fb      	ldr	r3, [r7, #12]
   110b0:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   110b2:	2300      	movs	r3, #0
}
   110b4:	0018      	movs	r0, r3
   110b6:	46bd      	mov	sp, r7
   110b8:	b004      	add	sp, #16
   110ba:	bd80      	pop	{r7, pc}
   110bc:	00011029 	.word	0x00011029

000110c0 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   110c0:	b580      	push	{r7, lr}
   110c2:	b084      	sub	sp, #16
   110c4:	af00      	add	r7, sp, #0
   110c6:	6078      	str	r0, [r7, #4]
   110c8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   110ca:	687b      	ldr	r3, [r7, #4]
   110cc:	681b      	ldr	r3, [r3, #0]
   110ce:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   110d0:	687b      	ldr	r3, [r7, #4]
   110d2:	0018      	movs	r0, r3
   110d4:	4b1b      	ldr	r3, [pc, #108]	; (11144 <spi_read+0x84>)
   110d6:	4798      	blx	r3
   110d8:	0003      	movs	r3, r0
   110da:	001a      	movs	r2, r3
   110dc:	2301      	movs	r3, #1
   110de:	4053      	eors	r3, r2
   110e0:	b2db      	uxtb	r3, r3
   110e2:	2b00      	cmp	r3, #0
   110e4:	d001      	beq.n	110ea <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   110e6:	2310      	movs	r3, #16
   110e8:	e027      	b.n	1113a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   110ea:	230f      	movs	r3, #15
   110ec:	18fb      	adds	r3, r7, r3
   110ee:	2200      	movs	r2, #0
   110f0:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   110f2:	68bb      	ldr	r3, [r7, #8]
   110f4:	8b5b      	ldrh	r3, [r3, #26]
   110f6:	b29b      	uxth	r3, r3
   110f8:	001a      	movs	r2, r3
   110fa:	2304      	movs	r3, #4
   110fc:	4013      	ands	r3, r2
   110fe:	d006      	beq.n	1110e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   11100:	230f      	movs	r3, #15
   11102:	18fb      	adds	r3, r7, r3
   11104:	221e      	movs	r2, #30
   11106:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   11108:	68bb      	ldr	r3, [r7, #8]
   1110a:	2204      	movs	r2, #4
   1110c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1110e:	687b      	ldr	r3, [r7, #4]
   11110:	799b      	ldrb	r3, [r3, #6]
   11112:	2b01      	cmp	r3, #1
   11114:	d108      	bne.n	11128 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   11116:	68bb      	ldr	r3, [r7, #8]
   11118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1111a:	b29b      	uxth	r3, r3
   1111c:	05db      	lsls	r3, r3, #23
   1111e:	0ddb      	lsrs	r3, r3, #23
   11120:	b29a      	uxth	r2, r3
   11122:	683b      	ldr	r3, [r7, #0]
   11124:	801a      	strh	r2, [r3, #0]
   11126:	e005      	b.n	11134 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   11128:	68bb      	ldr	r3, [r7, #8]
   1112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1112c:	b2db      	uxtb	r3, r3
   1112e:	b29a      	uxth	r2, r3
   11130:	683b      	ldr	r3, [r7, #0]
   11132:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   11134:	230f      	movs	r3, #15
   11136:	18fb      	adds	r3, r7, r3
   11138:	781b      	ldrb	r3, [r3, #0]
}
   1113a:	0018      	movs	r0, r3
   1113c:	46bd      	mov	sp, r7
   1113e:	b004      	add	sp, #16
   11140:	bd80      	pop	{r7, pc}
   11142:	46c0      	nop			; (mov r8, r8)
   11144:	00011051 	.word	0x00011051

00011148 <_at25dfx_get_device_id>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash device ID.
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
   11148:	b580      	push	{r7, lr}
   1114a:	b082      	sub	sp, #8
   1114c:	af00      	add	r7, sp, #0
   1114e:	0002      	movs	r2, r0
   11150:	1dfb      	adds	r3, r7, #7
   11152:	701a      	strb	r2, [r3, #0]
	switch (type) {
   11154:	1dfb      	adds	r3, r7, #7
   11156:	781b      	ldrb	r3, [r3, #0]
   11158:	2b09      	cmp	r3, #9
   1115a:	d818      	bhi.n	1118e <_at25dfx_get_device_id+0x46>
   1115c:	009a      	lsls	r2, r3, #2
   1115e:	4b0e      	ldr	r3, [pc, #56]	; (11198 <_at25dfx_get_device_id+0x50>)
   11160:	18d3      	adds	r3, r2, r3
   11162:	681b      	ldr	r3, [r3, #0]
   11164:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 0x00651f;
   11166:	4b0d      	ldr	r3, [pc, #52]	; (1119c <_at25dfx_get_device_id+0x54>)
   11168:	e012      	b.n	11190 <_at25dfx_get_device_id+0x48>

	case AT25DFX_021:
		return 0x00431f;
   1116a:	4b0d      	ldr	r3, [pc, #52]	; (111a0 <_at25dfx_get_device_id+0x58>)
   1116c:	e010      	b.n	11190 <_at25dfx_get_device_id+0x48>

	case AT25DFX_041A:
		return 0x01441f;
   1116e:	4b0d      	ldr	r3, [pc, #52]	; (111a4 <_at25dfx_get_device_id+0x5c>)
   11170:	e00e      	b.n	11190 <_at25dfx_get_device_id+0x48>

	case AT25DFX_081:
		return 0x02451f;
   11172:	4b0d      	ldr	r3, [pc, #52]	; (111a8 <_at25dfx_get_device_id+0x60>)
   11174:	e00c      	b.n	11190 <_at25dfx_get_device_id+0x48>

	case AT25DFX_081A:
		return 0x01451f;
   11176:	4b0d      	ldr	r3, [pc, #52]	; (111ac <_at25dfx_get_device_id+0x64>)
   11178:	e00a      	b.n	11190 <_at25dfx_get_device_id+0x48>

	case AT25DFX_161:
		return 0x02461f;
   1117a:	4b0d      	ldr	r3, [pc, #52]	; (111b0 <_at25dfx_get_device_id+0x68>)
   1117c:	e008      	b.n	11190 <_at25dfx_get_device_id+0x48>

	case AT25DFX_L161:
		return 0x03461f;
   1117e:	4b0d      	ldr	r3, [pc, #52]	; (111b4 <_at25dfx_get_device_id+0x6c>)
   11180:	e006      	b.n	11190 <_at25dfx_get_device_id+0x48>

	case AT25DFX_Q161:
		return 0x00861f;
   11182:	4b0d      	ldr	r3, [pc, #52]	; (111b8 <_at25dfx_get_device_id+0x70>)
   11184:	e004      	b.n	11190 <_at25dfx_get_device_id+0x48>

	case AT25DFX_321A:
		return 0x01471f;
   11186:	4b0d      	ldr	r3, [pc, #52]	; (111bc <_at25dfx_get_device_id+0x74>)
   11188:	e002      	b.n	11190 <_at25dfx_get_device_id+0x48>

	case AT25DFX_641:
		return 0x00481f;
   1118a:	4b0d      	ldr	r3, [pc, #52]	; (111c0 <_at25dfx_get_device_id+0x78>)
   1118c:	e000      	b.n	11190 <_at25dfx_get_device_id+0x48>

	default:
		Assert(false);
		return 0;
   1118e:	2300      	movs	r3, #0
	}
}
   11190:	0018      	movs	r0, r3
   11192:	46bd      	mov	sp, r7
   11194:	b002      	add	sp, #8
   11196:	bd80      	pop	{r7, pc}
   11198:	0001ae14 	.word	0x0001ae14
   1119c:	0000651f 	.word	0x0000651f
   111a0:	0000431f 	.word	0x0000431f
   111a4:	0001441f 	.word	0x0001441f
   111a8:	0002451f 	.word	0x0002451f
   111ac:	0001451f 	.word	0x0001451f
   111b0:	0002461f 	.word	0x0002461f
   111b4:	0003461f 	.word	0x0003461f
   111b8:	0000861f 	.word	0x0000861f
   111bc:	0001471f 	.word	0x0001471f
   111c0:	0000481f 	.word	0x0000481f

000111c4 <_at25dfx_get_device_size>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
   111c4:	b580      	push	{r7, lr}
   111c6:	b082      	sub	sp, #8
   111c8:	af00      	add	r7, sp, #0
   111ca:	0002      	movs	r2, r0
   111cc:	1dfb      	adds	r3, r7, #7
   111ce:	701a      	strb	r2, [r3, #0]
	switch (type) {
   111d0:	1dfb      	adds	r3, r7, #7
   111d2:	781b      	ldrb	r3, [r3, #0]
   111d4:	2b09      	cmp	r3, #9
   111d6:	d819      	bhi.n	1120c <_at25dfx_get_device_size+0x48>
   111d8:	009a      	lsls	r2, r3, #2
   111da:	4b0f      	ldr	r3, [pc, #60]	; (11218 <_at25dfx_get_device_size+0x54>)
   111dc:	18d3      	adds	r3, r2, r3
   111de:	681b      	ldr	r3, [r3, #0]
   111e0:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;
   111e2:	2380      	movs	r3, #128	; 0x80
   111e4:	025b      	lsls	r3, r3, #9
   111e6:	e012      	b.n	1120e <_at25dfx_get_device_size+0x4a>

	case AT25DFX_021:
		return 256 * 1024UL;
   111e8:	2380      	movs	r3, #128	; 0x80
   111ea:	02db      	lsls	r3, r3, #11
   111ec:	e00f      	b.n	1120e <_at25dfx_get_device_size+0x4a>

	case AT25DFX_041A:
		return 512 * 1024UL;
   111ee:	2380      	movs	r3, #128	; 0x80
   111f0:	031b      	lsls	r3, r3, #12
   111f2:	e00c      	b.n	1120e <_at25dfx_get_device_size+0x4a>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
   111f4:	2380      	movs	r3, #128	; 0x80
   111f6:	035b      	lsls	r3, r3, #13
   111f8:	e009      	b.n	1120e <_at25dfx_get_device_size+0x4a>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
   111fa:	2380      	movs	r3, #128	; 0x80
   111fc:	039b      	lsls	r3, r3, #14
   111fe:	e006      	b.n	1120e <_at25dfx_get_device_size+0x4a>

	case AT25DFX_321A:
		return 4096 * 1024UL;
   11200:	2380      	movs	r3, #128	; 0x80
   11202:	03db      	lsls	r3, r3, #15
   11204:	e003      	b.n	1120e <_at25dfx_get_device_size+0x4a>

	case AT25DFX_641:
		return 8192 * 1024UL;
   11206:	2380      	movs	r3, #128	; 0x80
   11208:	041b      	lsls	r3, r3, #16
   1120a:	e000      	b.n	1120e <_at25dfx_get_device_size+0x4a>

	default:
		Assert(false);
		return 0;
   1120c:	2300      	movs	r3, #0
	}
}
   1120e:	0018      	movs	r0, r3
   11210:	46bd      	mov	sp, r7
   11212:	b002      	add	sp, #8
   11214:	bd80      	pop	{r7, pc}
   11216:	46c0      	nop			; (mov r8, r8)
   11218:	0001ae3c 	.word	0x0001ae3c

0001121c <_at25dfx_chip_select>:
 * This function selects the specified chip by driving its CS line low.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
   1121c:	b580      	push	{r7, lr}
   1121e:	b082      	sub	sp, #8
   11220:	af00      	add	r7, sp, #0
   11222:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
   11224:	687b      	ldr	r3, [r7, #4]
   11226:	795b      	ldrb	r3, [r3, #5]
   11228:	2100      	movs	r1, #0
   1122a:	0018      	movs	r0, r3
   1122c:	4b02      	ldr	r3, [pc, #8]	; (11238 <_at25dfx_chip_select+0x1c>)
   1122e:	4798      	blx	r3
}
   11230:	46c0      	nop			; (mov r8, r8)
   11232:	46bd      	mov	sp, r7
   11234:	b002      	add	sp, #8
   11236:	bd80      	pop	{r7, pc}
   11238:	00010f4d 	.word	0x00010f4d

0001123c <_at25dfx_chip_deselect>:
 * This function deselects the specified chip by driving its CS line high.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
   1123c:	b580      	push	{r7, lr}
   1123e:	b082      	sub	sp, #8
   11240:	af00      	add	r7, sp, #0
   11242:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
   11244:	687b      	ldr	r3, [r7, #4]
   11246:	795b      	ldrb	r3, [r3, #5]
   11248:	2101      	movs	r1, #1
   1124a:	0018      	movs	r0, r3
   1124c:	4b02      	ldr	r3, [pc, #8]	; (11258 <_at25dfx_chip_deselect+0x1c>)
   1124e:	4798      	blx	r3
}
   11250:	46c0      	nop			; (mov r8, r8)
   11252:	46bd      	mov	sp, r7
   11254:	b002      	add	sp, #8
   11256:	bd80      	pop	{r7, pc}
   11258:	00010f4d 	.word	0x00010f4d

0001125c <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
   1125c:	b084      	sub	sp, #16
   1125e:	b5b0      	push	{r4, r5, r7, lr}
   11260:	b084      	sub	sp, #16
   11262:	af00      	add	r7, sp, #0
   11264:	6078      	str	r0, [r7, #4]
   11266:	2004      	movs	r0, #4
   11268:	2420      	movs	r4, #32
   1126a:	46a4      	mov	ip, r4
   1126c:	44bc      	add	ip, r7
   1126e:	4460      	add	r0, ip
   11270:	6001      	str	r1, [r0, #0]
   11272:	6042      	str	r2, [r0, #4]
   11274:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
   11276:	2304      	movs	r3, #4
   11278:	2220      	movs	r2, #32
   1127a:	4694      	mov	ip, r2
   1127c:	44bc      	add	ip, r7
   1127e:	4463      	add	r3, ip
   11280:	781a      	ldrb	r2, [r3, #0]
   11282:	2308      	movs	r3, #8
   11284:	18fb      	adds	r3, r7, r3
   11286:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
   11288:	2304      	movs	r3, #4
   1128a:	2220      	movs	r2, #32
   1128c:	4694      	mov	ip, r2
   1128e:	44bc      	add	ip, r7
   11290:	4463      	add	r3, ip
   11292:	785b      	ldrb	r3, [r3, #1]
   11294:	2b01      	cmp	r3, #1
   11296:	d91f      	bls.n	112d8 <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
   11298:	2304      	movs	r3, #4
   1129a:	2220      	movs	r2, #32
   1129c:	4694      	mov	ip, r2
   1129e:	44bc      	add	ip, r7
   112a0:	4463      	add	r3, ip
   112a2:	685b      	ldr	r3, [r3, #4]
   112a4:	b2da      	uxtb	r2, r3
   112a6:	2308      	movs	r3, #8
   112a8:	18fb      	adds	r3, r7, r3
   112aa:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
   112ac:	2304      	movs	r3, #4
   112ae:	2220      	movs	r2, #32
   112b0:	4694      	mov	ip, r2
   112b2:	44bc      	add	ip, r7
   112b4:	4463      	add	r3, ip
   112b6:	685b      	ldr	r3, [r3, #4]
   112b8:	0a1b      	lsrs	r3, r3, #8
   112ba:	b2da      	uxtb	r2, r3
   112bc:	2308      	movs	r3, #8
   112be:	18fb      	adds	r3, r7, r3
   112c0:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
   112c2:	2304      	movs	r3, #4
   112c4:	2220      	movs	r2, #32
   112c6:	4694      	mov	ip, r2
   112c8:	44bc      	add	ip, r7
   112ca:	4463      	add	r3, ip
   112cc:	685b      	ldr	r3, [r3, #4]
   112ce:	0c1b      	lsrs	r3, r3, #16
   112d0:	b2da      	uxtb	r2, r3
   112d2:	2308      	movs	r3, #8
   112d4:	18fb      	adds	r3, r7, r3
   112d6:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
   112d8:	687b      	ldr	r3, [r7, #4]
   112da:	0018      	movs	r0, r3
   112dc:	4b1d      	ldr	r3, [pc, #116]	; (11354 <_at25dfx_chip_issue_read_command_wait+0xf8>)
   112de:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
   112e0:	687b      	ldr	r3, [r7, #4]
   112e2:	6818      	ldr	r0, [r3, #0]
   112e4:	2304      	movs	r3, #4
   112e6:	2220      	movs	r2, #32
   112e8:	4694      	mov	ip, r2
   112ea:	44bc      	add	ip, r7
   112ec:	4463      	add	r3, ip
   112ee:	785b      	ldrb	r3, [r3, #1]
   112f0:	b29a      	uxth	r2, r3
   112f2:	230f      	movs	r3, #15
   112f4:	18fc      	adds	r4, r7, r3
   112f6:	2308      	movs	r3, #8
   112f8:	18fb      	adds	r3, r7, r3
   112fa:	0019      	movs	r1, r3
   112fc:	4b16      	ldr	r3, [pc, #88]	; (11358 <_at25dfx_chip_issue_read_command_wait+0xfc>)
   112fe:	4798      	blx	r3
   11300:	0003      	movs	r3, r0
   11302:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
   11304:	2304      	movs	r3, #4
   11306:	2220      	movs	r2, #32
   11308:	4694      	mov	ip, r2
   1130a:	44bc      	add	ip, r7
   1130c:	4463      	add	r3, ip
   1130e:	899b      	ldrh	r3, [r3, #12]
   11310:	2b00      	cmp	r3, #0
   11312:	d014      	beq.n	1133e <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
   11314:	687b      	ldr	r3, [r7, #4]
   11316:	6818      	ldr	r0, [r3, #0]
   11318:	2304      	movs	r3, #4
   1131a:	2220      	movs	r2, #32
   1131c:	4694      	mov	ip, r2
   1131e:	44bc      	add	ip, r7
   11320:	4463      	add	r3, ip
   11322:	6899      	ldr	r1, [r3, #8]
   11324:	2304      	movs	r3, #4
   11326:	2220      	movs	r2, #32
   11328:	4694      	mov	ip, r2
   1132a:	44bc      	add	ip, r7
   1132c:	4463      	add	r3, ip
   1132e:	899a      	ldrh	r2, [r3, #12]
   11330:	230f      	movs	r3, #15
   11332:	18fc      	adds	r4, r7, r3
   11334:	2300      	movs	r3, #0
   11336:	4d09      	ldr	r5, [pc, #36]	; (1135c <_at25dfx_chip_issue_read_command_wait+0x100>)
   11338:	47a8      	blx	r5
   1133a:	0003      	movs	r3, r0
   1133c:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
   1133e:	687b      	ldr	r3, [r7, #4]
   11340:	0018      	movs	r0, r3
   11342:	4b07      	ldr	r3, [pc, #28]	; (11360 <_at25dfx_chip_issue_read_command_wait+0x104>)
   11344:	4798      	blx	r3
}
   11346:	46c0      	nop			; (mov r8, r8)
   11348:	46bd      	mov	sp, r7
   1134a:	b004      	add	sp, #16
   1134c:	bcb0      	pop	{r4, r5, r7}
   1134e:	bc08      	pop	{r3}
   11350:	b004      	add	sp, #16
   11352:	4718      	bx	r3
   11354:	0001121d 	.word	0x0001121d
   11358:	00013265 	.word	0x00013265
   1135c:	00012fb9 	.word	0x00012fb9
   11360:	0001123d 	.word	0x0001123d

00011364 <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
   11364:	b084      	sub	sp, #16
   11366:	b590      	push	{r4, r7, lr}
   11368:	b085      	sub	sp, #20
   1136a:	af00      	add	r7, sp, #0
   1136c:	6078      	str	r0, [r7, #4]
   1136e:	2004      	movs	r0, #4
   11370:	2420      	movs	r4, #32
   11372:	46a4      	mov	ip, r4
   11374:	44bc      	add	ip, r7
   11376:	4460      	add	r0, ip
   11378:	6001      	str	r1, [r0, #0]
   1137a:	6042      	str	r2, [r0, #4]
   1137c:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
   1137e:	2304      	movs	r3, #4
   11380:	2220      	movs	r2, #32
   11382:	4694      	mov	ip, r2
   11384:	44bc      	add	ip, r7
   11386:	4463      	add	r3, ip
   11388:	781a      	ldrb	r2, [r3, #0]
   1138a:	2308      	movs	r3, #8
   1138c:	18fb      	adds	r3, r7, r3
   1138e:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
   11390:	2304      	movs	r3, #4
   11392:	2220      	movs	r2, #32
   11394:	4694      	mov	ip, r2
   11396:	44bc      	add	ip, r7
   11398:	4463      	add	r3, ip
   1139a:	785b      	ldrb	r3, [r3, #1]
   1139c:	2b01      	cmp	r3, #1
   1139e:	d91f      	bls.n	113e0 <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
   113a0:	2304      	movs	r3, #4
   113a2:	2220      	movs	r2, #32
   113a4:	4694      	mov	ip, r2
   113a6:	44bc      	add	ip, r7
   113a8:	4463      	add	r3, ip
   113aa:	685b      	ldr	r3, [r3, #4]
   113ac:	b2da      	uxtb	r2, r3
   113ae:	2308      	movs	r3, #8
   113b0:	18fb      	adds	r3, r7, r3
   113b2:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
   113b4:	2304      	movs	r3, #4
   113b6:	2220      	movs	r2, #32
   113b8:	4694      	mov	ip, r2
   113ba:	44bc      	add	ip, r7
   113bc:	4463      	add	r3, ip
   113be:	685b      	ldr	r3, [r3, #4]
   113c0:	0a1b      	lsrs	r3, r3, #8
   113c2:	b2da      	uxtb	r2, r3
   113c4:	2308      	movs	r3, #8
   113c6:	18fb      	adds	r3, r7, r3
   113c8:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
   113ca:	2304      	movs	r3, #4
   113cc:	2220      	movs	r2, #32
   113ce:	4694      	mov	ip, r2
   113d0:	44bc      	add	ip, r7
   113d2:	4463      	add	r3, ip
   113d4:	685b      	ldr	r3, [r3, #4]
   113d6:	0c1b      	lsrs	r3, r3, #16
   113d8:	b2da      	uxtb	r2, r3
   113da:	2308      	movs	r3, #8
   113dc:	18fb      	adds	r3, r7, r3
   113de:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
   113e0:	687b      	ldr	r3, [r7, #4]
   113e2:	0018      	movs	r0, r3
   113e4:	4b1d      	ldr	r3, [pc, #116]	; (1145c <_at25dfx_chip_issue_write_command_wait+0xf8>)
   113e6:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
   113e8:	687b      	ldr	r3, [r7, #4]
   113ea:	6818      	ldr	r0, [r3, #0]
   113ec:	2304      	movs	r3, #4
   113ee:	2220      	movs	r2, #32
   113f0:	4694      	mov	ip, r2
   113f2:	44bc      	add	ip, r7
   113f4:	4463      	add	r3, ip
   113f6:	785b      	ldrb	r3, [r3, #1]
   113f8:	b29a      	uxth	r2, r3
   113fa:	230f      	movs	r3, #15
   113fc:	18fc      	adds	r4, r7, r3
   113fe:	2308      	movs	r3, #8
   11400:	18fb      	adds	r3, r7, r3
   11402:	0019      	movs	r1, r3
   11404:	4b16      	ldr	r3, [pc, #88]	; (11460 <_at25dfx_chip_issue_write_command_wait+0xfc>)
   11406:	4798      	blx	r3
   11408:	0003      	movs	r3, r0
   1140a:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
   1140c:	2304      	movs	r3, #4
   1140e:	2220      	movs	r2, #32
   11410:	4694      	mov	ip, r2
   11412:	44bc      	add	ip, r7
   11414:	4463      	add	r3, ip
   11416:	899b      	ldrh	r3, [r3, #12]
   11418:	2b00      	cmp	r3, #0
   1141a:	d014      	beq.n	11446 <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
   1141c:	687b      	ldr	r3, [r7, #4]
   1141e:	6818      	ldr	r0, [r3, #0]
   11420:	2304      	movs	r3, #4
   11422:	2220      	movs	r2, #32
   11424:	4694      	mov	ip, r2
   11426:	44bc      	add	ip, r7
   11428:	4463      	add	r3, ip
   1142a:	6899      	ldr	r1, [r3, #8]
   1142c:	2304      	movs	r3, #4
   1142e:	2220      	movs	r2, #32
   11430:	4694      	mov	ip, r2
   11432:	44bc      	add	ip, r7
   11434:	4463      	add	r3, ip
   11436:	899b      	ldrh	r3, [r3, #12]
   11438:	220f      	movs	r2, #15
   1143a:	18bc      	adds	r4, r7, r2
   1143c:	001a      	movs	r2, r3
   1143e:	4b08      	ldr	r3, [pc, #32]	; (11460 <_at25dfx_chip_issue_write_command_wait+0xfc>)
   11440:	4798      	blx	r3
   11442:	0003      	movs	r3, r0
   11444:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
   11446:	687b      	ldr	r3, [r7, #4]
   11448:	0018      	movs	r0, r3
   1144a:	4b06      	ldr	r3, [pc, #24]	; (11464 <_at25dfx_chip_issue_write_command_wait+0x100>)
   1144c:	4798      	blx	r3
}
   1144e:	46c0      	nop			; (mov r8, r8)
   11450:	46bd      	mov	sp, r7
   11452:	b005      	add	sp, #20
   11454:	bc90      	pop	{r4, r7}
   11456:	bc08      	pop	{r3}
   11458:	b004      	add	sp, #16
   1145a:	4718      	bx	r3
   1145c:	0001121d 	.word	0x0001121d
   11460:	00013265 	.word	0x00013265
   11464:	0001123d 	.word	0x0001123d

00011468 <_at25dfx_chip_get_nonbusy_status>:
 * \retval STATUS_OK if operation succeeded.
 * \retval STATUS_ERR_IO if an error occurred.
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
   11468:	b590      	push	{r4, r7, lr}
   1146a:	b085      	sub	sp, #20
   1146c:	af00      	add	r7, sp, #0
   1146e:	6078      	str	r0, [r7, #4]
	enum status_code status;
	uint16_t status_reg = 0;
   11470:	230c      	movs	r3, #12
   11472:	18fb      	adds	r3, r7, r3
   11474:	2200      	movs	r2, #0
   11476:	801a      	strh	r2, [r3, #0]

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
   11478:	46c0      	nop			; (mov r8, r8)
   1147a:	687b      	ldr	r3, [r7, #4]
   1147c:	681b      	ldr	r3, [r3, #0]
   1147e:	0018      	movs	r0, r3
   11480:	4b3c      	ldr	r3, [pc, #240]	; (11574 <_at25dfx_chip_get_nonbusy_status+0x10c>)
   11482:	4798      	blx	r3
   11484:	0003      	movs	r3, r0
   11486:	001a      	movs	r2, r3
   11488:	2301      	movs	r3, #1
   1148a:	4053      	eors	r3, r2
   1148c:	b2db      	uxtb	r3, r3
   1148e:	2b00      	cmp	r3, #0
   11490:	d1f3      	bne.n	1147a <_at25dfx_chip_get_nonbusy_status+0x12>
	}

	_at25dfx_chip_select(chip);
   11492:	687b      	ldr	r3, [r7, #4]
   11494:	0018      	movs	r0, r3
   11496:	4b38      	ldr	r3, [pc, #224]	; (11578 <_at25dfx_chip_get_nonbusy_status+0x110>)
   11498:	4798      	blx	r3
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
   1149a:	687b      	ldr	r3, [r7, #4]
   1149c:	681b      	ldr	r3, [r3, #0]
   1149e:	220f      	movs	r2, #15
   114a0:	18bc      	adds	r4, r7, r2
   114a2:	2105      	movs	r1, #5
   114a4:	0018      	movs	r0, r3
   114a6:	4b35      	ldr	r3, [pc, #212]	; (1157c <_at25dfx_chip_get_nonbusy_status+0x114>)
   114a8:	4798      	blx	r3
   114aa:	0003      	movs	r3, r0
   114ac:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
   114ae:	46c0      	nop			; (mov r8, r8)
   114b0:	687b      	ldr	r3, [r7, #4]
   114b2:	681b      	ldr	r3, [r3, #0]
   114b4:	0018      	movs	r0, r3
   114b6:	4b32      	ldr	r3, [pc, #200]	; (11580 <_at25dfx_chip_get_nonbusy_status+0x118>)
   114b8:	4798      	blx	r3
   114ba:	0003      	movs	r3, r0
   114bc:	001a      	movs	r2, r3
   114be:	2301      	movs	r3, #1
   114c0:	4053      	eors	r3, r2
   114c2:	b2db      	uxtb	r3, r3
   114c4:	2b00      	cmp	r3, #0
   114c6:	d1f3      	bne.n	114b0 <_at25dfx_chip_get_nonbusy_status+0x48>
	}
	status = spi_read(chip->spi, &status_reg);
   114c8:	687b      	ldr	r3, [r7, #4]
   114ca:	681b      	ldr	r3, [r3, #0]
   114cc:	220f      	movs	r2, #15
   114ce:	18bc      	adds	r4, r7, r2
   114d0:	220c      	movs	r2, #12
   114d2:	18ba      	adds	r2, r7, r2
   114d4:	0011      	movs	r1, r2
   114d6:	0018      	movs	r0, r3
   114d8:	4b2a      	ldr	r3, [pc, #168]	; (11584 <_at25dfx_chip_get_nonbusy_status+0x11c>)
   114da:	4798      	blx	r3
   114dc:	0003      	movs	r3, r0
   114de:	7023      	strb	r3, [r4, #0]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
   114e0:	46c0      	nop			; (mov r8, r8)
   114e2:	687b      	ldr	r3, [r7, #4]
   114e4:	681b      	ldr	r3, [r3, #0]
   114e6:	0018      	movs	r0, r3
   114e8:	4b22      	ldr	r3, [pc, #136]	; (11574 <_at25dfx_chip_get_nonbusy_status+0x10c>)
   114ea:	4798      	blx	r3
   114ec:	0003      	movs	r3, r0
   114ee:	001a      	movs	r2, r3
   114f0:	2301      	movs	r3, #1
   114f2:	4053      	eors	r3, r2
   114f4:	b2db      	uxtb	r3, r3
   114f6:	2b00      	cmp	r3, #0
   114f8:	d1f3      	bne.n	114e2 <_at25dfx_chip_get_nonbusy_status+0x7a>
		}
		status = spi_write(chip->spi, 0);
   114fa:	687b      	ldr	r3, [r7, #4]
   114fc:	681b      	ldr	r3, [r3, #0]
   114fe:	220f      	movs	r2, #15
   11500:	18bc      	adds	r4, r7, r2
   11502:	2100      	movs	r1, #0
   11504:	0018      	movs	r0, r3
   11506:	4b1d      	ldr	r3, [pc, #116]	; (1157c <_at25dfx_chip_get_nonbusy_status+0x114>)
   11508:	4798      	blx	r3
   1150a:	0003      	movs	r3, r0
   1150c:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
   1150e:	46c0      	nop			; (mov r8, r8)
   11510:	687b      	ldr	r3, [r7, #4]
   11512:	681b      	ldr	r3, [r3, #0]
   11514:	0018      	movs	r0, r3
   11516:	4b1a      	ldr	r3, [pc, #104]	; (11580 <_at25dfx_chip_get_nonbusy_status+0x118>)
   11518:	4798      	blx	r3
   1151a:	0003      	movs	r3, r0
   1151c:	001a      	movs	r2, r3
   1151e:	2301      	movs	r3, #1
   11520:	4053      	eors	r3, r2
   11522:	b2db      	uxtb	r3, r3
   11524:	2b00      	cmp	r3, #0
   11526:	d1f3      	bne.n	11510 <_at25dfx_chip_get_nonbusy_status+0xa8>
		}
		status = spi_read(chip->spi, &status_reg);
   11528:	687b      	ldr	r3, [r7, #4]
   1152a:	681b      	ldr	r3, [r3, #0]
   1152c:	220f      	movs	r2, #15
   1152e:	18bc      	adds	r4, r7, r2
   11530:	220c      	movs	r2, #12
   11532:	18ba      	adds	r2, r7, r2
   11534:	0011      	movs	r1, r2
   11536:	0018      	movs	r0, r3
   11538:	4b12      	ldr	r3, [pc, #72]	; (11584 <_at25dfx_chip_get_nonbusy_status+0x11c>)
   1153a:	4798      	blx	r3
   1153c:	0003      	movs	r3, r0
   1153e:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
   11540:	230c      	movs	r3, #12
   11542:	18fb      	adds	r3, r7, r3
   11544:	881b      	ldrh	r3, [r3, #0]
   11546:	001a      	movs	r2, r3
   11548:	2301      	movs	r3, #1
   1154a:	4013      	ands	r3, r2
   1154c:	d1c8      	bne.n	114e0 <_at25dfx_chip_get_nonbusy_status+0x78>

	_at25dfx_chip_deselect(chip);
   1154e:	687b      	ldr	r3, [r7, #4]
   11550:	0018      	movs	r0, r3
   11552:	4b0d      	ldr	r3, [pc, #52]	; (11588 <_at25dfx_chip_get_nonbusy_status+0x120>)
   11554:	4798      	blx	r3

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
   11556:	230c      	movs	r3, #12
   11558:	18fb      	adds	r3, r7, r3
   1155a:	881b      	ldrh	r3, [r3, #0]
   1155c:	001a      	movs	r2, r3
   1155e:	2320      	movs	r3, #32
   11560:	4013      	ands	r3, r2
   11562:	d001      	beq.n	11568 <_at25dfx_chip_get_nonbusy_status+0x100>
		return STATUS_ERR_IO;
   11564:	2310      	movs	r3, #16
   11566:	e000      	b.n	1156a <_at25dfx_chip_get_nonbusy_status+0x102>
	}
	return STATUS_OK;
   11568:	2300      	movs	r3, #0
}
   1156a:	0018      	movs	r0, r3
   1156c:	46bd      	mov	sp, r7
   1156e:	b005      	add	sp, #20
   11570:	bd90      	pop	{r4, r7, pc}
   11572:	46c0      	nop			; (mov r8, r8)
   11574:	00011029 	.word	0x00011029
   11578:	0001121d 	.word	0x0001121d
   1157c:	00011079 	.word	0x00011079
   11580:	00011051 	.word	0x00011051
   11584:	000110c1 	.word	0x000110c1
   11588:	0001123d 	.word	0x0001123d

0001158c <_at25dfx_chip_enable_write>:
 * or unprotecting sectors.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_enable_write(struct at25dfx_chip_module *chip)
{
   1158c:	b590      	push	{r4, r7, lr}
   1158e:	b089      	sub	sp, #36	; 0x24
   11590:	af02      	add	r7, sp, #8
   11592:	6078      	str	r0, [r7, #4]
	struct at25dfx_command cmd;

	cmd.opcode = AT25DFX_COMMAND_WRITE_ENABLE;
   11594:	2308      	movs	r3, #8
   11596:	18fb      	adds	r3, r7, r3
   11598:	2206      	movs	r2, #6
   1159a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   1159c:	2308      	movs	r3, #8
   1159e:	18fb      	adds	r3, r7, r3
   115a0:	2201      	movs	r2, #1
   115a2:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
   115a4:	2308      	movs	r3, #8
   115a6:	18fb      	adds	r3, r7, r3
   115a8:	2200      	movs	r2, #0
   115aa:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   115ac:	2308      	movs	r3, #8
   115ae:	18fb      	adds	r3, r7, r3
   115b0:	2200      	movs	r2, #0
   115b2:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
   115b4:	2308      	movs	r3, #8
   115b6:	18fb      	adds	r3, r7, r3
   115b8:	2200      	movs	r2, #0
   115ba:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   115bc:	2308      	movs	r3, #8
   115be:	18fb      	adds	r3, r7, r3
   115c0:	6878      	ldr	r0, [r7, #4]
   115c2:	466a      	mov	r2, sp
   115c4:	68d9      	ldr	r1, [r3, #12]
   115c6:	6011      	str	r1, [r2, #0]
   115c8:	6819      	ldr	r1, [r3, #0]
   115ca:	685a      	ldr	r2, [r3, #4]
   115cc:	689b      	ldr	r3, [r3, #8]
   115ce:	4c03      	ldr	r4, [pc, #12]	; (115dc <_at25dfx_chip_enable_write+0x50>)
   115d0:	47a0      	blx	r4
}
   115d2:	46c0      	nop			; (mov r8, r8)
   115d4:	46bd      	mov	sp, r7
   115d6:	b007      	add	sp, #28
   115d8:	bd90      	pop	{r4, r7, pc}
   115da:	46c0      	nop			; (mov r8, r8)
   115dc:	00011365 	.word	0x00011365

000115e0 <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
   115e0:	b590      	push	{r4, r7, lr}
   115e2:	b08b      	sub	sp, #44	; 0x2c
   115e4:	af02      	add	r7, sp, #8
   115e6:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
   115e8:	2300      	movs	r3, #0
   115ea:	60bb      	str	r3, [r7, #8]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
   115ec:	687b      	ldr	r3, [r7, #4]
   115ee:	681b      	ldr	r3, [r3, #0]
   115f0:	221f      	movs	r2, #31
   115f2:	18bc      	adds	r4, r7, r2
   115f4:	0018      	movs	r0, r3
   115f6:	4b21      	ldr	r3, [pc, #132]	; (1167c <at25dfx_chip_check_presence+0x9c>)
   115f8:	4798      	blx	r3
   115fa:	0003      	movs	r3, r0
   115fc:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   115fe:	231f      	movs	r3, #31
   11600:	18fb      	adds	r3, r7, r3
   11602:	781b      	ldrb	r3, [r3, #0]
   11604:	2b05      	cmp	r3, #5
   11606:	d103      	bne.n	11610 <at25dfx_chip_check_presence+0x30>
		return status;
   11608:	231f      	movs	r3, #31
   1160a:	18fb      	adds	r3, r7, r3
   1160c:	781b      	ldrb	r3, [r3, #0]
   1160e:	e030      	b.n	11672 <at25dfx_chip_check_presence+0x92>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
   11610:	230c      	movs	r3, #12
   11612:	18fb      	adds	r3, r7, r3
   11614:	229f      	movs	r2, #159	; 0x9f
   11616:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   11618:	230c      	movs	r3, #12
   1161a:	18fb      	adds	r3, r7, r3
   1161c:	2201      	movs	r2, #1
   1161e:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
   11620:	230c      	movs	r3, #12
   11622:	18fb      	adds	r3, r7, r3
   11624:	2208      	movs	r2, #8
   11626:	18ba      	adds	r2, r7, r2
   11628:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
   1162a:	230c      	movs	r3, #12
   1162c:	18fb      	adds	r3, r7, r3
   1162e:	2203      	movs	r2, #3
   11630:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   11632:	230c      	movs	r3, #12
   11634:	18fb      	adds	r3, r7, r3
   11636:	2200      	movs	r2, #0
   11638:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_read_command_wait(chip, cmd);
   1163a:	230c      	movs	r3, #12
   1163c:	18fb      	adds	r3, r7, r3
   1163e:	6878      	ldr	r0, [r7, #4]
   11640:	466a      	mov	r2, sp
   11642:	68d9      	ldr	r1, [r3, #12]
   11644:	6011      	str	r1, [r2, #0]
   11646:	6819      	ldr	r1, [r3, #0]
   11648:	685a      	ldr	r2, [r3, #4]
   1164a:	689b      	ldr	r3, [r3, #8]
   1164c:	4c0c      	ldr	r4, [pc, #48]	; (11680 <at25dfx_chip_check_presence+0xa0>)
   1164e:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
   11650:	687b      	ldr	r3, [r7, #4]
   11652:	681b      	ldr	r3, [r3, #0]
   11654:	0018      	movs	r0, r3
   11656:	4b0b      	ldr	r3, [pc, #44]	; (11684 <at25dfx_chip_check_presence+0xa4>)
   11658:	4798      	blx	r3

	if (id == _at25dfx_get_device_id(chip->type)) {
   1165a:	687b      	ldr	r3, [r7, #4]
   1165c:	791b      	ldrb	r3, [r3, #4]
   1165e:	0018      	movs	r0, r3
   11660:	4b09      	ldr	r3, [pc, #36]	; (11688 <at25dfx_chip_check_presence+0xa8>)
   11662:	4798      	blx	r3
   11664:	1e02      	subs	r2, r0, #0
   11666:	68bb      	ldr	r3, [r7, #8]
   11668:	429a      	cmp	r2, r3
   1166a:	d101      	bne.n	11670 <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
   1166c:	2300      	movs	r3, #0
   1166e:	e000      	b.n	11672 <at25dfx_chip_check_presence+0x92>
	} else {
		return STATUS_ERR_NOT_FOUND;
   11670:	2314      	movs	r3, #20
	}
}
   11672:	0018      	movs	r0, r3
   11674:	46bd      	mov	sp, r7
   11676:	b009      	add	sp, #36	; 0x24
   11678:	bd90      	pop	{r4, r7, pc}
   1167a:	46c0      	nop			; (mov r8, r8)
   1167c:	00010fc9 	.word	0x00010fc9
   11680:	0001125d 	.word	0x0001125d
   11684:	00011011 	.word	0x00011011
   11688:	00011149 	.word	0x00011149

0001168c <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
   1168c:	b590      	push	{r4, r7, lr}
   1168e:	b08d      	sub	sp, #52	; 0x34
   11690:	af02      	add	r7, sp, #8
   11692:	60f8      	str	r0, [r7, #12]
   11694:	60b9      	str	r1, [r7, #8]
   11696:	607a      	str	r2, [r7, #4]
   11698:	001a      	movs	r2, r3
   1169a:	1cbb      	adds	r3, r7, #2
   1169c:	801a      	strh	r2, [r3, #0]

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
   1169e:	1cbb      	adds	r3, r7, #2
   116a0:	881a      	ldrh	r2, [r3, #0]
   116a2:	68bb      	ldr	r3, [r7, #8]
   116a4:	18d4      	adds	r4, r2, r3
   116a6:	68fb      	ldr	r3, [r7, #12]
   116a8:	791b      	ldrb	r3, [r3, #4]
   116aa:	0018      	movs	r0, r3
   116ac:	4b5b      	ldr	r3, [pc, #364]	; (1181c <at25dfx_chip_write_buffer+0x190>)
   116ae:	4798      	blx	r3
   116b0:	0003      	movs	r3, r0
   116b2:	429c      	cmp	r4, r3
   116b4:	d901      	bls.n	116ba <at25dfx_chip_write_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
   116b6:	2317      	movs	r3, #23
   116b8:	e0ab      	b.n	11812 <at25dfx_chip_write_buffer+0x186>
	}

	status = _at25dfx_spi_lock(chip->spi);
   116ba:	68fb      	ldr	r3, [r7, #12]
   116bc:	681b      	ldr	r3, [r3, #0]
   116be:	2227      	movs	r2, #39	; 0x27
   116c0:	18bc      	adds	r4, r7, r2
   116c2:	0018      	movs	r0, r3
   116c4:	4b56      	ldr	r3, [pc, #344]	; (11820 <at25dfx_chip_write_buffer+0x194>)
   116c6:	4798      	blx	r3
   116c8:	0003      	movs	r3, r0
   116ca:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   116cc:	2327      	movs	r3, #39	; 0x27
   116ce:	18fb      	adds	r3, r7, r3
   116d0:	781b      	ldrb	r3, [r3, #0]
   116d2:	2b05      	cmp	r3, #5
   116d4:	d103      	bne.n	116de <at25dfx_chip_write_buffer+0x52>
		return status;
   116d6:	2327      	movs	r3, #39	; 0x27
   116d8:	18fb      	adds	r3, r7, r3
   116da:	781b      	ldrb	r3, [r3, #0]
   116dc:	e099      	b.n	11812 <at25dfx_chip_write_buffer+0x186>
	}

	_at25dfx_chip_enable_write(chip);
   116de:	68fb      	ldr	r3, [r7, #12]
   116e0:	0018      	movs	r0, r3
   116e2:	4b50      	ldr	r3, [pc, #320]	; (11824 <at25dfx_chip_write_buffer+0x198>)
   116e4:	4798      	blx	r3

	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
   116e6:	2314      	movs	r3, #20
   116e8:	18fb      	adds	r3, r7, r3
   116ea:	2202      	movs	r2, #2
   116ec:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
   116ee:	2314      	movs	r3, #20
   116f0:	18fb      	adds	r3, r7, r3
   116f2:	2204      	movs	r2, #4
   116f4:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
   116f6:	2314      	movs	r3, #20
   116f8:	18fb      	adds	r3, r7, r3
   116fa:	68ba      	ldr	r2, [r7, #8]
   116fc:	605a      	str	r2, [r3, #4]
	cmd.data.tx = (uint8_t *)data;
   116fe:	2314      	movs	r3, #20
   11700:	18fb      	adds	r3, r7, r3
   11702:	687a      	ldr	r2, [r7, #4]
   11704:	609a      	str	r2, [r3, #8]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
   11706:	68bb      	ldr	r3, [r7, #8]
   11708:	b29b      	uxth	r3, r3
   1170a:	22ff      	movs	r2, #255	; 0xff
   1170c:	4013      	ands	r3, r2
   1170e:	b29a      	uxth	r2, r3
   11710:	2324      	movs	r3, #36	; 0x24
   11712:	18fb      	adds	r3, r7, r3
   11714:	2180      	movs	r1, #128	; 0x80
   11716:	0049      	lsls	r1, r1, #1
   11718:	1a8a      	subs	r2, r1, r2
   1171a:	801a      	strh	r2, [r3, #0]
	cmd.length = min(page_bytes, length);
   1171c:	1cbb      	adds	r3, r7, #2
   1171e:	2224      	movs	r2, #36	; 0x24
   11720:	18ba      	adds	r2, r7, r2
   11722:	8810      	ldrh	r0, [r2, #0]
   11724:	881b      	ldrh	r3, [r3, #0]
   11726:	b299      	uxth	r1, r3
   11728:	b282      	uxth	r2, r0
   1172a:	4291      	cmp	r1, r2
   1172c:	d900      	bls.n	11730 <at25dfx_chip_write_buffer+0xa4>
   1172e:	1c03      	adds	r3, r0, #0
   11730:	b29a      	uxth	r2, r3
   11732:	2314      	movs	r3, #20
   11734:	18fb      	adds	r3, r7, r3
   11736:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   11738:	2314      	movs	r3, #20
   1173a:	18fb      	adds	r3, r7, r3
   1173c:	68f8      	ldr	r0, [r7, #12]
   1173e:	466a      	mov	r2, sp
   11740:	68d9      	ldr	r1, [r3, #12]
   11742:	6011      	str	r1, [r2, #0]
   11744:	6819      	ldr	r1, [r3, #0]
   11746:	685a      	ldr	r2, [r3, #4]
   11748:	689b      	ldr	r3, [r3, #8]
   1174a:	4c37      	ldr	r4, [pc, #220]	; (11828 <at25dfx_chip_write_buffer+0x19c>)
   1174c:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
   1174e:	2327      	movs	r3, #39	; 0x27
   11750:	18fc      	adds	r4, r7, r3
   11752:	68fb      	ldr	r3, [r7, #12]
   11754:	0018      	movs	r0, r3
   11756:	4b35      	ldr	r3, [pc, #212]	; (1182c <at25dfx_chip_write_buffer+0x1a0>)
   11758:	4798      	blx	r3
   1175a:	0003      	movs	r3, r0
   1175c:	7023      	strb	r3, [r4, #0]

	length -= cmd.length;
   1175e:	2314      	movs	r3, #20
   11760:	18fb      	adds	r3, r7, r3
   11762:	899a      	ldrh	r2, [r3, #12]
   11764:	1cbb      	adds	r3, r7, #2
   11766:	1cb9      	adds	r1, r7, #2
   11768:	8809      	ldrh	r1, [r1, #0]
   1176a:	1a8a      	subs	r2, r1, r2
   1176c:	801a      	strh	r2, [r3, #0]

	while (length && (status == STATUS_OK)) {
   1176e:	e03f      	b.n	117f0 <at25dfx_chip_write_buffer+0x164>
		_at25dfx_chip_enable_write(chip);
   11770:	68fb      	ldr	r3, [r7, #12]
   11772:	0018      	movs	r0, r3
   11774:	4b2b      	ldr	r3, [pc, #172]	; (11824 <at25dfx_chip_write_buffer+0x198>)
   11776:	4798      	blx	r3

		cmd.address += cmd.length;
   11778:	2314      	movs	r3, #20
   1177a:	18fb      	adds	r3, r7, r3
   1177c:	685b      	ldr	r3, [r3, #4]
   1177e:	2214      	movs	r2, #20
   11780:	18ba      	adds	r2, r7, r2
   11782:	8992      	ldrh	r2, [r2, #12]
   11784:	189a      	adds	r2, r3, r2
   11786:	2314      	movs	r3, #20
   11788:	18fb      	adds	r3, r7, r3
   1178a:	605a      	str	r2, [r3, #4]
		cmd.data.tx += cmd.length;
   1178c:	2314      	movs	r3, #20
   1178e:	18fb      	adds	r3, r7, r3
   11790:	689b      	ldr	r3, [r3, #8]
   11792:	2214      	movs	r2, #20
   11794:	18ba      	adds	r2, r7, r2
   11796:	8992      	ldrh	r2, [r2, #12]
   11798:	189a      	adds	r2, r3, r2
   1179a:	2314      	movs	r3, #20
   1179c:	18fb      	adds	r3, r7, r3
   1179e:	609a      	str	r2, [r3, #8]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
   117a0:	1cbb      	adds	r3, r7, #2
   117a2:	881b      	ldrh	r3, [r3, #0]
   117a4:	b299      	uxth	r1, r3
   117a6:	2280      	movs	r2, #128	; 0x80
   117a8:	0052      	lsls	r2, r2, #1
   117aa:	4291      	cmp	r1, r2
   117ac:	d901      	bls.n	117b2 <at25dfx_chip_write_buffer+0x126>
   117ae:	2380      	movs	r3, #128	; 0x80
   117b0:	005b      	lsls	r3, r3, #1
   117b2:	b29a      	uxth	r2, r3
   117b4:	2314      	movs	r3, #20
   117b6:	18fb      	adds	r3, r7, r3
   117b8:	819a      	strh	r2, [r3, #12]

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
   117ba:	2314      	movs	r3, #20
   117bc:	18fb      	adds	r3, r7, r3
   117be:	68f8      	ldr	r0, [r7, #12]
   117c0:	466a      	mov	r2, sp
   117c2:	68d9      	ldr	r1, [r3, #12]
   117c4:	6011      	str	r1, [r2, #0]
   117c6:	6819      	ldr	r1, [r3, #0]
   117c8:	685a      	ldr	r2, [r3, #4]
   117ca:	689b      	ldr	r3, [r3, #8]
   117cc:	4c16      	ldr	r4, [pc, #88]	; (11828 <at25dfx_chip_write_buffer+0x19c>)
   117ce:	47a0      	blx	r4

		status = _at25dfx_chip_get_nonbusy_status(chip);
   117d0:	2327      	movs	r3, #39	; 0x27
   117d2:	18fc      	adds	r4, r7, r3
   117d4:	68fb      	ldr	r3, [r7, #12]
   117d6:	0018      	movs	r0, r3
   117d8:	4b14      	ldr	r3, [pc, #80]	; (1182c <at25dfx_chip_write_buffer+0x1a0>)
   117da:	4798      	blx	r3
   117dc:	0003      	movs	r3, r0
   117de:	7023      	strb	r3, [r4, #0]

		length -= cmd.length;
   117e0:	2314      	movs	r3, #20
   117e2:	18fb      	adds	r3, r7, r3
   117e4:	899a      	ldrh	r2, [r3, #12]
   117e6:	1cbb      	adds	r3, r7, #2
   117e8:	1cb9      	adds	r1, r7, #2
   117ea:	8809      	ldrh	r1, [r1, #0]
   117ec:	1a8a      	subs	r2, r1, r2
   117ee:	801a      	strh	r2, [r3, #0]

	status = _at25dfx_chip_get_nonbusy_status(chip);

	length -= cmd.length;

	while (length && (status == STATUS_OK)) {
   117f0:	1cbb      	adds	r3, r7, #2
   117f2:	881b      	ldrh	r3, [r3, #0]
   117f4:	2b00      	cmp	r3, #0
   117f6:	d004      	beq.n	11802 <at25dfx_chip_write_buffer+0x176>
   117f8:	2327      	movs	r3, #39	; 0x27
   117fa:	18fb      	adds	r3, r7, r3
   117fc:	781b      	ldrb	r3, [r3, #0]
   117fe:	2b00      	cmp	r3, #0
   11800:	d0b6      	beq.n	11770 <at25dfx_chip_write_buffer+0xe4>
		status = _at25dfx_chip_get_nonbusy_status(chip);

		length -= cmd.length;
	}

	_at25dfx_spi_unlock(chip->spi);
   11802:	68fb      	ldr	r3, [r7, #12]
   11804:	681b      	ldr	r3, [r3, #0]
   11806:	0018      	movs	r0, r3
   11808:	4b09      	ldr	r3, [pc, #36]	; (11830 <at25dfx_chip_write_buffer+0x1a4>)
   1180a:	4798      	blx	r3

	return status;
   1180c:	2327      	movs	r3, #39	; 0x27
   1180e:	18fb      	adds	r3, r7, r3
   11810:	781b      	ldrb	r3, [r3, #0]
}
   11812:	0018      	movs	r0, r3
   11814:	46bd      	mov	sp, r7
   11816:	b00b      	add	sp, #44	; 0x2c
   11818:	bd90      	pop	{r4, r7, pc}
   1181a:	46c0      	nop			; (mov r8, r8)
   1181c:	000111c5 	.word	0x000111c5
   11820:	00010fc9 	.word	0x00010fc9
   11824:	0001158d 	.word	0x0001158d
   11828:	00011365 	.word	0x00011365
   1182c:	00011469 	.word	0x00011469
   11830:	00011011 	.word	0x00011011

00011834 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
   11834:	b590      	push	{r4, r7, lr}
   11836:	b08d      	sub	sp, #52	; 0x34
   11838:	af02      	add	r7, sp, #8
   1183a:	60f8      	str	r0, [r7, #12]
   1183c:	60b9      	str	r1, [r7, #8]
   1183e:	1dfb      	adds	r3, r7, #7
   11840:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
   11842:	68fb      	ldr	r3, [r7, #12]
   11844:	791b      	ldrb	r3, [r3, #4]
   11846:	0018      	movs	r0, r3
   11848:	4b33      	ldr	r3, [pc, #204]	; (11918 <at25dfx_chip_erase_block+0xe4>)
   1184a:	4798      	blx	r3
   1184c:	1e02      	subs	r2, r0, #0
   1184e:	68bb      	ldr	r3, [r7, #8]
   11850:	429a      	cmp	r2, r3
   11852:	d801      	bhi.n	11858 <at25dfx_chip_erase_block+0x24>
		return STATUS_ERR_INVALID_ARG;
   11854:	2317      	movs	r3, #23
   11856:	e05b      	b.n	11910 <at25dfx_chip_erase_block+0xdc>
	}

	status = _at25dfx_spi_lock(chip->spi);
   11858:	68fb      	ldr	r3, [r7, #12]
   1185a:	681b      	ldr	r3, [r3, #0]
   1185c:	2227      	movs	r2, #39	; 0x27
   1185e:	18bc      	adds	r4, r7, r2
   11860:	0018      	movs	r0, r3
   11862:	4b2e      	ldr	r3, [pc, #184]	; (1191c <at25dfx_chip_erase_block+0xe8>)
   11864:	4798      	blx	r3
   11866:	0003      	movs	r3, r0
   11868:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   1186a:	2327      	movs	r3, #39	; 0x27
   1186c:	18fb      	adds	r3, r7, r3
   1186e:	781b      	ldrb	r3, [r3, #0]
   11870:	2b05      	cmp	r3, #5
   11872:	d103      	bne.n	1187c <at25dfx_chip_erase_block+0x48>
		return status;
   11874:	2327      	movs	r3, #39	; 0x27
   11876:	18fb      	adds	r3, r7, r3
   11878:	781b      	ldrb	r3, [r3, #0]
   1187a:	e049      	b.n	11910 <at25dfx_chip_erase_block+0xdc>
	}

	_at25dfx_chip_enable_write(chip);
   1187c:	68fb      	ldr	r3, [r7, #12]
   1187e:	0018      	movs	r0, r3
   11880:	4b27      	ldr	r3, [pc, #156]	; (11920 <at25dfx_chip_erase_block+0xec>)
   11882:	4798      	blx	r3

	switch (block_size) {
   11884:	1dfb      	adds	r3, r7, #7
   11886:	781b      	ldrb	r3, [r3, #0]
   11888:	2b01      	cmp	r3, #1
   1188a:	d008      	beq.n	1189e <at25dfx_chip_erase_block+0x6a>
   1188c:	2b02      	cmp	r3, #2
   1188e:	d00b      	beq.n	118a8 <at25dfx_chip_erase_block+0x74>
   11890:	2b00      	cmp	r3, #0
   11892:	d10e      	bne.n	118b2 <at25dfx_chip_erase_block+0x7e>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
   11894:	2314      	movs	r3, #20
   11896:	18fb      	adds	r3, r7, r3
   11898:	2220      	movs	r2, #32
   1189a:	701a      	strb	r2, [r3, #0]
		break;
   1189c:	e00d      	b.n	118ba <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
   1189e:	2314      	movs	r3, #20
   118a0:	18fb      	adds	r3, r7, r3
   118a2:	2252      	movs	r2, #82	; 0x52
   118a4:	701a      	strb	r2, [r3, #0]
		break;
   118a6:	e008      	b.n	118ba <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
   118a8:	2314      	movs	r3, #20
   118aa:	18fb      	adds	r3, r7, r3
   118ac:	22d8      	movs	r2, #216	; 0xd8
   118ae:	701a      	strb	r2, [r3, #0]
		break;
   118b0:	e003      	b.n	118ba <at25dfx_chip_erase_block+0x86>

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
   118b2:	2314      	movs	r3, #20
   118b4:	18fb      	adds	r3, r7, r3
   118b6:	2200      	movs	r2, #0
   118b8:	701a      	strb	r2, [r3, #0]
	}
	cmd.command_size = 4;
   118ba:	2314      	movs	r3, #20
   118bc:	18fb      	adds	r3, r7, r3
   118be:	2204      	movs	r2, #4
   118c0:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
   118c2:	2314      	movs	r3, #20
   118c4:	18fb      	adds	r3, r7, r3
   118c6:	68ba      	ldr	r2, [r7, #8]
   118c8:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
   118ca:	2314      	movs	r3, #20
   118cc:	18fb      	adds	r3, r7, r3
   118ce:	2200      	movs	r2, #0
   118d0:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
   118d2:	2314      	movs	r3, #20
   118d4:	18fb      	adds	r3, r7, r3
   118d6:	2200      	movs	r2, #0
   118d8:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   118da:	2314      	movs	r3, #20
   118dc:	18fb      	adds	r3, r7, r3
   118de:	68f8      	ldr	r0, [r7, #12]
   118e0:	466a      	mov	r2, sp
   118e2:	68d9      	ldr	r1, [r3, #12]
   118e4:	6011      	str	r1, [r2, #0]
   118e6:	6819      	ldr	r1, [r3, #0]
   118e8:	685a      	ldr	r2, [r3, #4]
   118ea:	689b      	ldr	r3, [r3, #8]
   118ec:	4c0d      	ldr	r4, [pc, #52]	; (11924 <at25dfx_chip_erase_block+0xf0>)
   118ee:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
   118f0:	2327      	movs	r3, #39	; 0x27
   118f2:	18fc      	adds	r4, r7, r3
   118f4:	68fb      	ldr	r3, [r7, #12]
   118f6:	0018      	movs	r0, r3
   118f8:	4b0b      	ldr	r3, [pc, #44]	; (11928 <at25dfx_chip_erase_block+0xf4>)
   118fa:	4798      	blx	r3
   118fc:	0003      	movs	r3, r0
   118fe:	7023      	strb	r3, [r4, #0]

	_at25dfx_spi_unlock(chip->spi);
   11900:	68fb      	ldr	r3, [r7, #12]
   11902:	681b      	ldr	r3, [r3, #0]
   11904:	0018      	movs	r0, r3
   11906:	4b09      	ldr	r3, [pc, #36]	; (1192c <at25dfx_chip_erase_block+0xf8>)
   11908:	4798      	blx	r3

	return status;
   1190a:	2327      	movs	r3, #39	; 0x27
   1190c:	18fb      	adds	r3, r7, r3
   1190e:	781b      	ldrb	r3, [r3, #0]
}
   11910:	0018      	movs	r0, r3
   11912:	46bd      	mov	sp, r7
   11914:	b00b      	add	sp, #44	; 0x2c
   11916:	bd90      	pop	{r4, r7, pc}
   11918:	000111c5 	.word	0x000111c5
   1191c:	00010fc9 	.word	0x00010fc9
   11920:	0001158d 	.word	0x0001158d
   11924:	00011365 	.word	0x00011365
   11928:	00011469 	.word	0x00011469
   1192c:	00011011 	.word	0x00011011

00011930 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
   11930:	b590      	push	{r4, r7, lr}
   11932:	b08b      	sub	sp, #44	; 0x2c
   11934:	af02      	add	r7, sp, #8
   11936:	6078      	str	r0, [r7, #4]
   11938:	000a      	movs	r2, r1
   1193a:	1cfb      	adds	r3, r7, #3
   1193c:	701a      	strb	r2, [r3, #0]
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
   1193e:	687b      	ldr	r3, [r7, #4]
   11940:	681b      	ldr	r3, [r3, #0]
   11942:	221f      	movs	r2, #31
   11944:	18bc      	adds	r4, r7, r2
   11946:	0018      	movs	r0, r3
   11948:	4b22      	ldr	r3, [pc, #136]	; (119d4 <at25dfx_chip_set_global_sector_protect+0xa4>)
   1194a:	4798      	blx	r3
   1194c:	0003      	movs	r3, r0
   1194e:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   11950:	231f      	movs	r3, #31
   11952:	18fb      	adds	r3, r7, r3
   11954:	781b      	ldrb	r3, [r3, #0]
   11956:	2b05      	cmp	r3, #5
   11958:	d103      	bne.n	11962 <at25dfx_chip_set_global_sector_protect+0x32>
		return status;
   1195a:	231f      	movs	r3, #31
   1195c:	18fb      	adds	r3, r7, r3
   1195e:	781b      	ldrb	r3, [r3, #0]
   11960:	e033      	b.n	119ca <at25dfx_chip_set_global_sector_protect+0x9a>
	}

	_at25dfx_chip_enable_write(chip);
   11962:	687b      	ldr	r3, [r7, #4]
   11964:	0018      	movs	r0, r3
   11966:	4b1c      	ldr	r3, [pc, #112]	; (119d8 <at25dfx_chip_set_global_sector_protect+0xa8>)
   11968:	4798      	blx	r3

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
   1196a:	1cfb      	adds	r3, r7, #3
   1196c:	781b      	ldrb	r3, [r3, #0]
   1196e:	2b00      	cmp	r3, #0
   11970:	d001      	beq.n	11976 <at25dfx_chip_set_global_sector_protect+0x46>
   11972:	223c      	movs	r2, #60	; 0x3c
   11974:	e000      	b.n	11978 <at25dfx_chip_set_global_sector_protect+0x48>
   11976:	2200      	movs	r2, #0
   11978:	230b      	movs	r3, #11
   1197a:	18fb      	adds	r3, r7, r3
   1197c:	701a      	strb	r2, [r3, #0]
	cmd.opcode = AT25DFX_COMMAND_WRITE_STATUS;
   1197e:	230c      	movs	r3, #12
   11980:	18fb      	adds	r3, r7, r3
   11982:	2201      	movs	r2, #1
   11984:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   11986:	230c      	movs	r3, #12
   11988:	18fb      	adds	r3, r7, r3
   1198a:	2201      	movs	r2, #1
   1198c:	705a      	strb	r2, [r3, #1]
	cmd.length = 1;
   1198e:	230c      	movs	r3, #12
   11990:	18fb      	adds	r3, r7, r3
   11992:	2201      	movs	r2, #1
   11994:	819a      	strh	r2, [r3, #12]
	cmd.data.tx = &temp_data;
   11996:	230c      	movs	r3, #12
   11998:	18fb      	adds	r3, r7, r3
   1199a:	220b      	movs	r2, #11
   1199c:	18ba      	adds	r2, r7, r2
   1199e:	609a      	str	r2, [r3, #8]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   119a0:	230c      	movs	r3, #12
   119a2:	18fb      	adds	r3, r7, r3
   119a4:	2200      	movs	r2, #0
   119a6:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   119a8:	230c      	movs	r3, #12
   119aa:	18fb      	adds	r3, r7, r3
   119ac:	6878      	ldr	r0, [r7, #4]
   119ae:	466a      	mov	r2, sp
   119b0:	68d9      	ldr	r1, [r3, #12]
   119b2:	6011      	str	r1, [r2, #0]
   119b4:	6819      	ldr	r1, [r3, #0]
   119b6:	685a      	ldr	r2, [r3, #4]
   119b8:	689b      	ldr	r3, [r3, #8]
   119ba:	4c08      	ldr	r4, [pc, #32]	; (119dc <at25dfx_chip_set_global_sector_protect+0xac>)
   119bc:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
   119be:	687b      	ldr	r3, [r7, #4]
   119c0:	681b      	ldr	r3, [r3, #0]
   119c2:	0018      	movs	r0, r3
   119c4:	4b06      	ldr	r3, [pc, #24]	; (119e0 <at25dfx_chip_set_global_sector_protect+0xb0>)
   119c6:	4798      	blx	r3

	return STATUS_OK;
   119c8:	2300      	movs	r3, #0
}
   119ca:	0018      	movs	r0, r3
   119cc:	46bd      	mov	sp, r7
   119ce:	b009      	add	sp, #36	; 0x24
   119d0:	bd90      	pop	{r4, r7, pc}
   119d2:	46c0      	nop			; (mov r8, r8)
   119d4:	00010fc9 	.word	0x00010fc9
   119d8:	0001158d 	.word	0x0001158d
   119dc:	00011365 	.word	0x00011365
   119e0:	00011011 	.word	0x00011011

000119e4 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
   119e4:	b590      	push	{r4, r7, lr}
   119e6:	b08b      	sub	sp, #44	; 0x2c
   119e8:	af02      	add	r7, sp, #8
   119ea:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
   119ec:	687b      	ldr	r3, [r7, #4]
   119ee:	681b      	ldr	r3, [r3, #0]
   119f0:	221f      	movs	r2, #31
   119f2:	18bc      	adds	r4, r7, r2
   119f4:	0018      	movs	r0, r3
   119f6:	4b1b      	ldr	r3, [pc, #108]	; (11a64 <at25dfx_chip_sleep+0x80>)
   119f8:	4798      	blx	r3
   119fa:	0003      	movs	r3, r0
   119fc:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   119fe:	231f      	movs	r3, #31
   11a00:	18fb      	adds	r3, r7, r3
   11a02:	781b      	ldrb	r3, [r3, #0]
   11a04:	2b05      	cmp	r3, #5
   11a06:	d103      	bne.n	11a10 <at25dfx_chip_sleep+0x2c>
		return status;
   11a08:	231f      	movs	r3, #31
   11a0a:	18fb      	adds	r3, r7, r3
   11a0c:	781b      	ldrb	r3, [r3, #0]
   11a0e:	e024      	b.n	11a5a <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
   11a10:	230c      	movs	r3, #12
   11a12:	18fb      	adds	r3, r7, r3
   11a14:	22b9      	movs	r2, #185	; 0xb9
   11a16:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   11a18:	230c      	movs	r3, #12
   11a1a:	18fb      	adds	r3, r7, r3
   11a1c:	2201      	movs	r2, #1
   11a1e:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
   11a20:	230c      	movs	r3, #12
   11a22:	18fb      	adds	r3, r7, r3
   11a24:	2200      	movs	r2, #0
   11a26:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   11a28:	230c      	movs	r3, #12
   11a2a:	18fb      	adds	r3, r7, r3
   11a2c:	2200      	movs	r2, #0
   11a2e:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
   11a30:	230c      	movs	r3, #12
   11a32:	18fb      	adds	r3, r7, r3
   11a34:	2200      	movs	r2, #0
   11a36:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   11a38:	230c      	movs	r3, #12
   11a3a:	18fb      	adds	r3, r7, r3
   11a3c:	6878      	ldr	r0, [r7, #4]
   11a3e:	466a      	mov	r2, sp
   11a40:	68d9      	ldr	r1, [r3, #12]
   11a42:	6011      	str	r1, [r2, #0]
   11a44:	6819      	ldr	r1, [r3, #0]
   11a46:	685a      	ldr	r2, [r3, #4]
   11a48:	689b      	ldr	r3, [r3, #8]
   11a4a:	4c07      	ldr	r4, [pc, #28]	; (11a68 <at25dfx_chip_sleep+0x84>)
   11a4c:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
   11a4e:	687b      	ldr	r3, [r7, #4]
   11a50:	681b      	ldr	r3, [r3, #0]
   11a52:	0018      	movs	r0, r3
   11a54:	4b05      	ldr	r3, [pc, #20]	; (11a6c <at25dfx_chip_sleep+0x88>)
   11a56:	4798      	blx	r3

	return STATUS_OK;
   11a58:	2300      	movs	r3, #0
}
   11a5a:	0018      	movs	r0, r3
   11a5c:	46bd      	mov	sp, r7
   11a5e:	b009      	add	sp, #36	; 0x24
   11a60:	bd90      	pop	{r4, r7, pc}
   11a62:	46c0      	nop			; (mov r8, r8)
   11a64:	00010fc9 	.word	0x00010fc9
   11a68:	00011365 	.word	0x00011365
   11a6c:	00011011 	.word	0x00011011

00011a70 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
   11a70:	b590      	push	{r4, r7, lr}
   11a72:	b08b      	sub	sp, #44	; 0x2c
   11a74:	af02      	add	r7, sp, #8
   11a76:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
   11a78:	687b      	ldr	r3, [r7, #4]
   11a7a:	681b      	ldr	r3, [r3, #0]
   11a7c:	221f      	movs	r2, #31
   11a7e:	18bc      	adds	r4, r7, r2
   11a80:	0018      	movs	r0, r3
   11a82:	4b1b      	ldr	r3, [pc, #108]	; (11af0 <at25dfx_chip_wake+0x80>)
   11a84:	4798      	blx	r3
   11a86:	0003      	movs	r3, r0
   11a88:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   11a8a:	231f      	movs	r3, #31
   11a8c:	18fb      	adds	r3, r7, r3
   11a8e:	781b      	ldrb	r3, [r3, #0]
   11a90:	2b05      	cmp	r3, #5
   11a92:	d103      	bne.n	11a9c <at25dfx_chip_wake+0x2c>
		return status;
   11a94:	231f      	movs	r3, #31
   11a96:	18fb      	adds	r3, r7, r3
   11a98:	781b      	ldrb	r3, [r3, #0]
   11a9a:	e024      	b.n	11ae6 <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
   11a9c:	230c      	movs	r3, #12
   11a9e:	18fb      	adds	r3, r7, r3
   11aa0:	22ab      	movs	r2, #171	; 0xab
   11aa2:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   11aa4:	230c      	movs	r3, #12
   11aa6:	18fb      	adds	r3, r7, r3
   11aa8:	2201      	movs	r2, #1
   11aaa:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
   11aac:	230c      	movs	r3, #12
   11aae:	18fb      	adds	r3, r7, r3
   11ab0:	2200      	movs	r2, #0
   11ab2:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   11ab4:	230c      	movs	r3, #12
   11ab6:	18fb      	adds	r3, r7, r3
   11ab8:	2200      	movs	r2, #0
   11aba:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
   11abc:	230c      	movs	r3, #12
   11abe:	18fb      	adds	r3, r7, r3
   11ac0:	2200      	movs	r2, #0
   11ac2:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   11ac4:	230c      	movs	r3, #12
   11ac6:	18fb      	adds	r3, r7, r3
   11ac8:	6878      	ldr	r0, [r7, #4]
   11aca:	466a      	mov	r2, sp
   11acc:	68d9      	ldr	r1, [r3, #12]
   11ace:	6011      	str	r1, [r2, #0]
   11ad0:	6819      	ldr	r1, [r3, #0]
   11ad2:	685a      	ldr	r2, [r3, #4]
   11ad4:	689b      	ldr	r3, [r3, #8]
   11ad6:	4c07      	ldr	r4, [pc, #28]	; (11af4 <at25dfx_chip_wake+0x84>)
   11ad8:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
   11ada:	687b      	ldr	r3, [r7, #4]
   11adc:	681b      	ldr	r3, [r3, #0]
   11ade:	0018      	movs	r0, r3
   11ae0:	4b05      	ldr	r3, [pc, #20]	; (11af8 <at25dfx_chip_wake+0x88>)
   11ae2:	4798      	blx	r3

	return STATUS_OK;
   11ae4:	2300      	movs	r3, #0
   11ae6:	0018      	movs	r0, r3
   11ae8:	46bd      	mov	sp, r7
   11aea:	b009      	add	sp, #36	; 0x24
   11aec:	bd90      	pop	{r4, r7, pc}
   11aee:	46c0      	nop			; (mov r8, r8)
   11af0:	00010fc9 	.word	0x00010fc9
   11af4:	00011365 	.word	0x00011365
   11af8:	00011011 	.word	0x00011011

00011afc <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   11afc:	b580      	push	{r7, lr}
   11afe:	b082      	sub	sp, #8
   11b00:	af00      	add	r7, sp, #0
   11b02:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   11b04:	687b      	ldr	r3, [r7, #4]
   11b06:	2b00      	cmp	r3, #0
   11b08:	d00c      	beq.n	11b24 <delay_cycles+0x28>
		SysTick->LOAD = n;
   11b0a:	4b08      	ldr	r3, [pc, #32]	; (11b2c <delay_cycles+0x30>)
   11b0c:	687a      	ldr	r2, [r7, #4]
   11b0e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   11b10:	4b06      	ldr	r3, [pc, #24]	; (11b2c <delay_cycles+0x30>)
   11b12:	2200      	movs	r2, #0
   11b14:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   11b16:	46c0      	nop			; (mov r8, r8)
   11b18:	4b04      	ldr	r3, [pc, #16]	; (11b2c <delay_cycles+0x30>)
   11b1a:	681a      	ldr	r2, [r3, #0]
   11b1c:	2380      	movs	r3, #128	; 0x80
   11b1e:	025b      	lsls	r3, r3, #9
   11b20:	4013      	ands	r3, r2
   11b22:	d0f9      	beq.n	11b18 <delay_cycles+0x1c>
		};
	}
}
   11b24:	46c0      	nop			; (mov r8, r8)
   11b26:	46bd      	mov	sp, r7
   11b28:	b002      	add	sp, #8
   11b2a:	bd80      	pop	{r7, pc}
   11b2c:	e000e010 	.word	0xe000e010

00011b30 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   11b30:	b580      	push	{r7, lr}
   11b32:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   11b34:	2000      	movs	r0, #0
   11b36:	4b0f      	ldr	r3, [pc, #60]	; (11b74 <delay_init+0x44>)
   11b38:	4798      	blx	r3
   11b3a:	0002      	movs	r2, r0
   11b3c:	4b0e      	ldr	r3, [pc, #56]	; (11b78 <delay_init+0x48>)
   11b3e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   11b40:	4b0d      	ldr	r3, [pc, #52]	; (11b78 <delay_init+0x48>)
   11b42:	6818      	ldr	r0, [r3, #0]
   11b44:	4b0d      	ldr	r3, [pc, #52]	; (11b7c <delay_init+0x4c>)
   11b46:	22fa      	movs	r2, #250	; 0xfa
   11b48:	0091      	lsls	r1, r2, #2
   11b4a:	4798      	blx	r3
   11b4c:	0003      	movs	r3, r0
   11b4e:	001a      	movs	r2, r3
   11b50:	4b09      	ldr	r3, [pc, #36]	; (11b78 <delay_init+0x48>)
   11b52:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   11b54:	4b08      	ldr	r3, [pc, #32]	; (11b78 <delay_init+0x48>)
   11b56:	6818      	ldr	r0, [r3, #0]
   11b58:	4b08      	ldr	r3, [pc, #32]	; (11b7c <delay_init+0x4c>)
   11b5a:	22fa      	movs	r2, #250	; 0xfa
   11b5c:	0091      	lsls	r1, r2, #2
   11b5e:	4798      	blx	r3
   11b60:	0003      	movs	r3, r0
   11b62:	001a      	movs	r2, r3
   11b64:	4b06      	ldr	r3, [pc, #24]	; (11b80 <delay_init+0x50>)
   11b66:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   11b68:	4b06      	ldr	r3, [pc, #24]	; (11b84 <delay_init+0x54>)
   11b6a:	2205      	movs	r2, #5
   11b6c:	601a      	str	r2, [r3, #0]
}
   11b6e:	46c0      	nop			; (mov r8, r8)
   11b70:	46bd      	mov	sp, r7
   11b72:	bd80      	pop	{r7, pc}
   11b74:	00015189 	.word	0x00015189
   11b78:	20000010 	.word	0x20000010
   11b7c:	000180d1 	.word	0x000180d1
   11b80:	20000014 	.word	0x20000014
   11b84:	e000e010 	.word	0xe000e010

00011b88 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   11b88:	b580      	push	{r7, lr}
   11b8a:	b082      	sub	sp, #8
   11b8c:	af00      	add	r7, sp, #0
   11b8e:	6078      	str	r0, [r7, #4]
	while (n--) {
   11b90:	e004      	b.n	11b9c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   11b92:	4b07      	ldr	r3, [pc, #28]	; (11bb0 <delay_cycles_ms+0x28>)
   11b94:	681b      	ldr	r3, [r3, #0]
   11b96:	0018      	movs	r0, r3
   11b98:	4b06      	ldr	r3, [pc, #24]	; (11bb4 <delay_cycles_ms+0x2c>)
   11b9a:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
   11b9c:	687b      	ldr	r3, [r7, #4]
   11b9e:	1e5a      	subs	r2, r3, #1
   11ba0:	607a      	str	r2, [r7, #4]
   11ba2:	2b00      	cmp	r3, #0
   11ba4:	d1f5      	bne.n	11b92 <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
   11ba6:	46c0      	nop			; (mov r8, r8)
   11ba8:	46bd      	mov	sp, r7
   11baa:	b002      	add	sp, #8
   11bac:	bd80      	pop	{r7, pc}
   11bae:	46c0      	nop			; (mov r8, r8)
   11bb0:	20000010 	.word	0x20000010
   11bb4:	00011afd 	.word	0x00011afd

00011bb8 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   11bb8:	b580      	push	{r7, lr}
   11bba:	b082      	sub	sp, #8
   11bbc:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11bbe:	4b07      	ldr	r3, [pc, #28]	; (11bdc <nvm_is_ready+0x24>)
   11bc0:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   11bc2:	687b      	ldr	r3, [r7, #4]
   11bc4:	7d1b      	ldrb	r3, [r3, #20]
   11bc6:	b2db      	uxtb	r3, r3
   11bc8:	001a      	movs	r2, r3
   11bca:	2301      	movs	r3, #1
   11bcc:	4013      	ands	r3, r2
   11bce:	1e5a      	subs	r2, r3, #1
   11bd0:	4193      	sbcs	r3, r2
   11bd2:	b2db      	uxtb	r3, r3
}
   11bd4:	0018      	movs	r0, r3
   11bd6:	46bd      	mov	sp, r7
   11bd8:	b002      	add	sp, #8
   11bda:	bd80      	pop	{r7, pc}
   11bdc:	41004000 	.word	0x41004000

00011be0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   11be0:	b580      	push	{r7, lr}
   11be2:	b082      	sub	sp, #8
   11be4:	af00      	add	r7, sp, #0
   11be6:	0002      	movs	r2, r0
   11be8:	6039      	str	r1, [r7, #0]
   11bea:	1dfb      	adds	r3, r7, #7
   11bec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   11bee:	1dfb      	adds	r3, r7, #7
   11bf0:	781b      	ldrb	r3, [r3, #0]
   11bf2:	2b01      	cmp	r3, #1
   11bf4:	d00a      	beq.n	11c0c <system_apb_clock_set_mask+0x2c>
   11bf6:	2b02      	cmp	r3, #2
   11bf8:	d00f      	beq.n	11c1a <system_apb_clock_set_mask+0x3a>
   11bfa:	2b00      	cmp	r3, #0
   11bfc:	d114      	bne.n	11c28 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   11bfe:	4b0e      	ldr	r3, [pc, #56]	; (11c38 <system_apb_clock_set_mask+0x58>)
   11c00:	4a0d      	ldr	r2, [pc, #52]	; (11c38 <system_apb_clock_set_mask+0x58>)
   11c02:	6991      	ldr	r1, [r2, #24]
   11c04:	683a      	ldr	r2, [r7, #0]
   11c06:	430a      	orrs	r2, r1
   11c08:	619a      	str	r2, [r3, #24]
			break;
   11c0a:	e00f      	b.n	11c2c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   11c0c:	4b0a      	ldr	r3, [pc, #40]	; (11c38 <system_apb_clock_set_mask+0x58>)
   11c0e:	4a0a      	ldr	r2, [pc, #40]	; (11c38 <system_apb_clock_set_mask+0x58>)
   11c10:	69d1      	ldr	r1, [r2, #28]
   11c12:	683a      	ldr	r2, [r7, #0]
   11c14:	430a      	orrs	r2, r1
   11c16:	61da      	str	r2, [r3, #28]
			break;
   11c18:	e008      	b.n	11c2c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   11c1a:	4b07      	ldr	r3, [pc, #28]	; (11c38 <system_apb_clock_set_mask+0x58>)
   11c1c:	4a06      	ldr	r2, [pc, #24]	; (11c38 <system_apb_clock_set_mask+0x58>)
   11c1e:	6a11      	ldr	r1, [r2, #32]
   11c20:	683a      	ldr	r2, [r7, #0]
   11c22:	430a      	orrs	r2, r1
   11c24:	621a      	str	r2, [r3, #32]
			break;
   11c26:	e001      	b.n	11c2c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   11c28:	2317      	movs	r3, #23
   11c2a:	e000      	b.n	11c2e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   11c2c:	2300      	movs	r3, #0
}
   11c2e:	0018      	movs	r0, r3
   11c30:	46bd      	mov	sp, r7
   11c32:	b002      	add	sp, #8
   11c34:	bd80      	pop	{r7, pc}
   11c36:	46c0      	nop			; (mov r8, r8)
   11c38:	40000400 	.word	0x40000400

00011c3c <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   11c3c:	b580      	push	{r7, lr}
   11c3e:	b084      	sub	sp, #16
   11c40:	af00      	add	r7, sp, #0
   11c42:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11c44:	4b2f      	ldr	r3, [pc, #188]	; (11d04 <nvm_set_config+0xc8>)
   11c46:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   11c48:	2104      	movs	r1, #4
   11c4a:	2001      	movs	r0, #1
   11c4c:	4b2e      	ldr	r3, [pc, #184]	; (11d08 <nvm_set_config+0xcc>)
   11c4e:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11c50:	68fb      	ldr	r3, [r7, #12]
   11c52:	2220      	movs	r2, #32
   11c54:	32ff      	adds	r2, #255	; 0xff
   11c56:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11c58:	4b2c      	ldr	r3, [pc, #176]	; (11d0c <nvm_set_config+0xd0>)
   11c5a:	4798      	blx	r3
   11c5c:	0003      	movs	r3, r0
   11c5e:	001a      	movs	r2, r3
   11c60:	2301      	movs	r3, #1
   11c62:	4053      	eors	r3, r2
   11c64:	b2db      	uxtb	r3, r3
   11c66:	2b00      	cmp	r3, #0
   11c68:	d001      	beq.n	11c6e <nvm_set_config+0x32>
		return STATUS_BUSY;
   11c6a:	2305      	movs	r3, #5
   11c6c:	e045      	b.n	11cfa <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   11c6e:	687b      	ldr	r3, [r7, #4]
   11c70:	781b      	ldrb	r3, [r3, #0]
   11c72:	021b      	lsls	r3, r3, #8
   11c74:	001a      	movs	r2, r3
   11c76:	23c0      	movs	r3, #192	; 0xc0
   11c78:	009b      	lsls	r3, r3, #2
   11c7a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   11c7c:	687b      	ldr	r3, [r7, #4]
   11c7e:	785b      	ldrb	r3, [r3, #1]
   11c80:	01db      	lsls	r3, r3, #7
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   11c82:	0019      	movs	r1, r3
   11c84:	23ff      	movs	r3, #255	; 0xff
   11c86:	400b      	ands	r3, r1
   11c88:	431a      	orrs	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   11c8a:	687b      	ldr	r3, [r7, #4]
   11c8c:	789b      	ldrb	r3, [r3, #2]
   11c8e:	005b      	lsls	r3, r3, #1
   11c90:	0019      	movs	r1, r3
   11c92:	231e      	movs	r3, #30
   11c94:	400b      	ands	r3, r1

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   11c96:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   11c98:	687b      	ldr	r3, [r7, #4]
   11c9a:	78db      	ldrb	r3, [r3, #3]
   11c9c:	049b      	lsls	r3, r3, #18
#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   11c9e:	0019      	movs	r1, r3
   11ca0:	2380      	movs	r3, #128	; 0x80
   11ca2:	02db      	lsls	r3, r3, #11
   11ca4:	400b      	ands	r3, r1
   11ca6:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   11ca8:	687b      	ldr	r3, [r7, #4]
   11caa:	791b      	ldrb	r3, [r3, #4]
   11cac:	041b      	lsls	r3, r3, #16
   11cae:	0019      	movs	r1, r3
   11cb0:	23c0      	movs	r3, #192	; 0xc0
   11cb2:	029b      	lsls	r3, r3, #10
   11cb4:	400b      	ands	r3, r1
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   11cb6:	431a      	orrs	r2, r3
		return STATUS_BUSY;
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
   11cb8:	68fb      	ldr	r3, [r7, #12]
   11cba:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   11cbc:	68fb      	ldr	r3, [r7, #12]
   11cbe:	689b      	ldr	r3, [r3, #8]
   11cc0:	035b      	lsls	r3, r3, #13
   11cc2:	0f5b      	lsrs	r3, r3, #29
   11cc4:	b2db      	uxtb	r3, r3
   11cc6:	001a      	movs	r2, r3
   11cc8:	2308      	movs	r3, #8
   11cca:	4093      	lsls	r3, r2
   11ccc:	b29a      	uxth	r2, r3
   11cce:	4b10      	ldr	r3, [pc, #64]	; (11d10 <nvm_set_config+0xd4>)
   11cd0:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   11cd2:	68fb      	ldr	r3, [r7, #12]
   11cd4:	689b      	ldr	r3, [r3, #8]
   11cd6:	b29a      	uxth	r2, r3
   11cd8:	4b0d      	ldr	r3, [pc, #52]	; (11d10 <nvm_set_config+0xd4>)
   11cda:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   11cdc:	687b      	ldr	r3, [r7, #4]
   11cde:	785a      	ldrb	r2, [r3, #1]
   11ce0:	4b0b      	ldr	r3, [pc, #44]	; (11d10 <nvm_set_config+0xd4>)
   11ce2:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   11ce4:	68fb      	ldr	r3, [r7, #12]
   11ce6:	8b1b      	ldrh	r3, [r3, #24]
   11ce8:	b29b      	uxth	r3, r3
   11cea:	001a      	movs	r2, r3
   11cec:	2380      	movs	r3, #128	; 0x80
   11cee:	005b      	lsls	r3, r3, #1
   11cf0:	4013      	ands	r3, r2
   11cf2:	d001      	beq.n	11cf8 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   11cf4:	2310      	movs	r3, #16
   11cf6:	e000      	b.n	11cfa <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   11cf8:	2300      	movs	r3, #0
}
   11cfa:	0018      	movs	r0, r3
   11cfc:	46bd      	mov	sp, r7
   11cfe:	b004      	add	sp, #16
   11d00:	bd80      	pop	{r7, pc}
   11d02:	46c0      	nop			; (mov r8, r8)
   11d04:	41004000 	.word	0x41004000
   11d08:	00011be1 	.word	0x00011be1
   11d0c:	00011bb9 	.word	0x00011bb9
   11d10:	200000f4 	.word	0x200000f4

00011d14 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   11d14:	b580      	push	{r7, lr}
   11d16:	b086      	sub	sp, #24
   11d18:	af00      	add	r7, sp, #0
   11d1a:	60b9      	str	r1, [r7, #8]
   11d1c:	607a      	str	r2, [r7, #4]
   11d1e:	230f      	movs	r3, #15
   11d20:	18fb      	adds	r3, r7, r3
   11d22:	1c02      	adds	r2, r0, #0
   11d24:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   11d26:	4b3a      	ldr	r3, [pc, #232]	; (11e10 <nvm_execute_command+0xfc>)
   11d28:	881b      	ldrh	r3, [r3, #0]
   11d2a:	001a      	movs	r2, r3
   11d2c:	4b38      	ldr	r3, [pc, #224]	; (11e10 <nvm_execute_command+0xfc>)
   11d2e:	885b      	ldrh	r3, [r3, #2]
   11d30:	435a      	muls	r2, r3
   11d32:	68bb      	ldr	r3, [r7, #8]
   11d34:	429a      	cmp	r2, r3
   11d36:	d209      	bcs.n	11d4c <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   11d38:	68bb      	ldr	r3, [r7, #8]
   11d3a:	4a36      	ldr	r2, [pc, #216]	; (11e14 <nvm_execute_command+0x100>)
   11d3c:	4293      	cmp	r3, r2
   11d3e:	d903      	bls.n	11d48 <nvm_execute_command+0x34>
   11d40:	68bb      	ldr	r3, [r7, #8]
   11d42:	4a35      	ldr	r2, [pc, #212]	; (11e18 <nvm_execute_command+0x104>)
   11d44:	4293      	cmp	r3, r2
   11d46:	d901      	bls.n	11d4c <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   11d48:	2318      	movs	r3, #24
   11d4a:	e05c      	b.n	11e06 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11d4c:	4b33      	ldr	r3, [pc, #204]	; (11e1c <nvm_execute_command+0x108>)
   11d4e:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   11d50:	697b      	ldr	r3, [r7, #20]
   11d52:	685b      	ldr	r3, [r3, #4]
   11d54:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   11d56:	693b      	ldr	r3, [r7, #16]
   11d58:	2280      	movs	r2, #128	; 0x80
   11d5a:	02d2      	lsls	r2, r2, #11
   11d5c:	431a      	orrs	r2, r3
   11d5e:	697b      	ldr	r3, [r7, #20]
   11d60:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11d62:	697b      	ldr	r3, [r7, #20]
   11d64:	2220      	movs	r2, #32
   11d66:	32ff      	adds	r2, #255	; 0xff
   11d68:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11d6a:	4b2d      	ldr	r3, [pc, #180]	; (11e20 <nvm_execute_command+0x10c>)
   11d6c:	4798      	blx	r3
   11d6e:	0003      	movs	r3, r0
   11d70:	001a      	movs	r2, r3
   11d72:	2301      	movs	r3, #1
   11d74:	4053      	eors	r3, r2
   11d76:	b2db      	uxtb	r3, r3
   11d78:	2b00      	cmp	r3, #0
   11d7a:	d004      	beq.n	11d86 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   11d7c:	697b      	ldr	r3, [r7, #20]
   11d7e:	693a      	ldr	r2, [r7, #16]
   11d80:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   11d82:	2305      	movs	r3, #5
   11d84:	e03f      	b.n	11e06 <nvm_execute_command+0xf2>
	}

	switch (command) {
   11d86:	230f      	movs	r3, #15
   11d88:	18fb      	adds	r3, r7, r3
   11d8a:	781b      	ldrb	r3, [r3, #0]
   11d8c:	2b45      	cmp	r3, #69	; 0x45
   11d8e:	d81d      	bhi.n	11dcc <nvm_execute_command+0xb8>
   11d90:	009a      	lsls	r2, r3, #2
   11d92:	4b24      	ldr	r3, [pc, #144]	; (11e24 <nvm_execute_command+0x110>)
   11d94:	18d3      	adds	r3, r2, r3
   11d96:	681b      	ldr	r3, [r3, #0]
   11d98:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   11d9a:	697b      	ldr	r3, [r7, #20]
   11d9c:	8b1b      	ldrh	r3, [r3, #24]
   11d9e:	b29b      	uxth	r3, r3
   11da0:	001a      	movs	r2, r3
   11da2:	2380      	movs	r3, #128	; 0x80
   11da4:	005b      	lsls	r3, r3, #1
   11da6:	4013      	ands	r3, r2
   11da8:	d004      	beq.n	11db4 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   11daa:	697b      	ldr	r3, [r7, #20]
   11dac:	693a      	ldr	r2, [r7, #16]
   11dae:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   11db0:	2310      	movs	r3, #16
   11db2:	e028      	b.n	11e06 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   11db4:	68bb      	ldr	r3, [r7, #8]
   11db6:	089b      	lsrs	r3, r3, #2
   11db8:	005a      	lsls	r2, r3, #1
   11dba:	697b      	ldr	r3, [r7, #20]
   11dbc:	61da      	str	r2, [r3, #28]
			break;
   11dbe:	e00b      	b.n	11dd8 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   11dc0:	68bb      	ldr	r3, [r7, #8]
   11dc2:	089b      	lsrs	r3, r3, #2
   11dc4:	005a      	lsls	r2, r3, #1
   11dc6:	697b      	ldr	r3, [r7, #20]
   11dc8:	61da      	str	r2, [r3, #28]
			break;
   11dca:	e005      	b.n	11dd8 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   11dcc:	697b      	ldr	r3, [r7, #20]
   11dce:	693a      	ldr	r2, [r7, #16]
   11dd0:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   11dd2:	2317      	movs	r3, #23
   11dd4:	e017      	b.n	11e06 <nvm_execute_command+0xf2>
		/* Commands not requiring address */
		case NVM_COMMAND_PAGE_BUFFER_CLEAR:
		case NVM_COMMAND_SET_SECURITY_BIT:
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;
   11dd6:	46c0      	nop			; (mov r8, r8)
			nvm_module->CTRLB.reg = ctrlb_bak;
			return STATUS_ERR_INVALID_ARG;
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   11dd8:	230f      	movs	r3, #15
   11dda:	18fb      	adds	r3, r7, r3
   11ddc:	781b      	ldrb	r3, [r3, #0]
   11dde:	b29b      	uxth	r3, r3
   11de0:	4a11      	ldr	r2, [pc, #68]	; (11e28 <nvm_execute_command+0x114>)
   11de2:	4313      	orrs	r3, r2
   11de4:	b29a      	uxth	r2, r3
   11de6:	697b      	ldr	r3, [r7, #20]
   11de8:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   11dea:	46c0      	nop			; (mov r8, r8)
   11dec:	4b0c      	ldr	r3, [pc, #48]	; (11e20 <nvm_execute_command+0x10c>)
   11dee:	4798      	blx	r3
   11df0:	0003      	movs	r3, r0
   11df2:	001a      	movs	r2, r3
   11df4:	2301      	movs	r3, #1
   11df6:	4053      	eors	r3, r2
   11df8:	b2db      	uxtb	r3, r3
   11dfa:	2b00      	cmp	r3, #0
   11dfc:	d1f6      	bne.n	11dec <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   11dfe:	697b      	ldr	r3, [r7, #20]
   11e00:	693a      	ldr	r2, [r7, #16]
   11e02:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   11e04:	2300      	movs	r3, #0
}
   11e06:	0018      	movs	r0, r3
   11e08:	46bd      	mov	sp, r7
   11e0a:	b006      	add	sp, #24
   11e0c:	bd80      	pop	{r7, pc}
   11e0e:	46c0      	nop			; (mov r8, r8)
   11e10:	200000f4 	.word	0x200000f4
   11e14:	00803fff 	.word	0x00803fff
   11e18:	00806000 	.word	0x00806000
   11e1c:	41004000 	.word	0x41004000
   11e20:	00011bb9 	.word	0x00011bb9
   11e24:	0001ae64 	.word	0x0001ae64
   11e28:	ffffa500 	.word	0xffffa500

00011e2c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   11e2c:	b580      	push	{r7, lr}
   11e2e:	b088      	sub	sp, #32
   11e30:	af00      	add	r7, sp, #0
   11e32:	60f8      	str	r0, [r7, #12]
   11e34:	60b9      	str	r1, [r7, #8]
   11e36:	1dbb      	adds	r3, r7, #6
   11e38:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11e3a:	4b4a      	ldr	r3, [pc, #296]	; (11f64 <nvm_write_buffer+0x138>)
   11e3c:	881b      	ldrh	r3, [r3, #0]
   11e3e:	001a      	movs	r2, r3
   11e40:	4b48      	ldr	r3, [pc, #288]	; (11f64 <nvm_write_buffer+0x138>)
   11e42:	885b      	ldrh	r3, [r3, #2]
   11e44:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
   11e46:	68fb      	ldr	r3, [r7, #12]
   11e48:	429a      	cmp	r2, r3
   11e4a:	d201      	bcs.n	11e50 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   11e4c:	2318      	movs	r3, #24
   11e4e:	e084      	b.n	11f5a <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   11e50:	4b44      	ldr	r3, [pc, #272]	; (11f64 <nvm_write_buffer+0x138>)
   11e52:	881b      	ldrh	r3, [r3, #0]
   11e54:	3b01      	subs	r3, #1
   11e56:	001a      	movs	r2, r3
   11e58:	68fb      	ldr	r3, [r7, #12]
   11e5a:	4013      	ands	r3, r2
   11e5c:	d001      	beq.n	11e62 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   11e5e:	2318      	movs	r3, #24
   11e60:	e07b      	b.n	11f5a <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   11e62:	4b40      	ldr	r3, [pc, #256]	; (11f64 <nvm_write_buffer+0x138>)
   11e64:	881b      	ldrh	r3, [r3, #0]
   11e66:	1dba      	adds	r2, r7, #6
   11e68:	8812      	ldrh	r2, [r2, #0]
   11e6a:	429a      	cmp	r2, r3
   11e6c:	d901      	bls.n	11e72 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   11e6e:	2317      	movs	r3, #23
   11e70:	e073      	b.n	11f5a <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11e72:	4b3d      	ldr	r3, [pc, #244]	; (11f68 <nvm_write_buffer+0x13c>)
   11e74:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11e76:	4b3d      	ldr	r3, [pc, #244]	; (11f6c <nvm_write_buffer+0x140>)
   11e78:	4798      	blx	r3
   11e7a:	0003      	movs	r3, r0
   11e7c:	001a      	movs	r2, r3
   11e7e:	2301      	movs	r3, #1
   11e80:	4053      	eors	r3, r2
   11e82:	b2db      	uxtb	r3, r3
   11e84:	2b00      	cmp	r3, #0
   11e86:	d001      	beq.n	11e8c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   11e88:	2305      	movs	r3, #5
   11e8a:	e066      	b.n	11f5a <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   11e8c:	697b      	ldr	r3, [r7, #20]
   11e8e:	4a38      	ldr	r2, [pc, #224]	; (11f70 <nvm_write_buffer+0x144>)
   11e90:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   11e92:	46c0      	nop			; (mov r8, r8)
   11e94:	4b35      	ldr	r3, [pc, #212]	; (11f6c <nvm_write_buffer+0x140>)
   11e96:	4798      	blx	r3
   11e98:	0003      	movs	r3, r0
   11e9a:	001a      	movs	r2, r3
   11e9c:	2301      	movs	r3, #1
   11e9e:	4053      	eors	r3, r2
   11ea0:	b2db      	uxtb	r3, r3
   11ea2:	2b00      	cmp	r3, #0
   11ea4:	d1f6      	bne.n	11e94 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11ea6:	697b      	ldr	r3, [r7, #20]
   11ea8:	2220      	movs	r2, #32
   11eaa:	32ff      	adds	r2, #255	; 0xff
   11eac:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   11eae:	68fb      	ldr	r3, [r7, #12]
   11eb0:	085b      	lsrs	r3, r3, #1
   11eb2:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11eb4:	231a      	movs	r3, #26
   11eb6:	18fb      	adds	r3, r7, r3
   11eb8:	2200      	movs	r2, #0
   11eba:	801a      	strh	r2, [r3, #0]
   11ebc:	e032      	b.n	11f24 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   11ebe:	231a      	movs	r3, #26
   11ec0:	18fb      	adds	r3, r7, r3
   11ec2:	881b      	ldrh	r3, [r3, #0]
   11ec4:	68ba      	ldr	r2, [r7, #8]
   11ec6:	18d3      	adds	r3, r2, r3
   11ec8:	781a      	ldrb	r2, [r3, #0]
   11eca:	2318      	movs	r3, #24
   11ecc:	18fb      	adds	r3, r7, r3
   11ece:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   11ed0:	231a      	movs	r3, #26
   11ed2:	18fb      	adds	r3, r7, r3
   11ed4:	881a      	ldrh	r2, [r3, #0]
   11ed6:	1dbb      	adds	r3, r7, #6
   11ed8:	881b      	ldrh	r3, [r3, #0]
   11eda:	3b01      	subs	r3, #1
   11edc:	429a      	cmp	r2, r3
   11ede:	da11      	bge.n	11f04 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   11ee0:	231a      	movs	r3, #26
   11ee2:	18fb      	adds	r3, r7, r3
   11ee4:	881b      	ldrh	r3, [r3, #0]
   11ee6:	3301      	adds	r3, #1
   11ee8:	68ba      	ldr	r2, [r7, #8]
   11eea:	18d3      	adds	r3, r2, r3
   11eec:	781b      	ldrb	r3, [r3, #0]
   11eee:	021b      	lsls	r3, r3, #8
   11ef0:	b21a      	sxth	r2, r3
   11ef2:	2318      	movs	r3, #24
   11ef4:	18fb      	adds	r3, r7, r3
   11ef6:	2100      	movs	r1, #0
   11ef8:	5e5b      	ldrsh	r3, [r3, r1]
   11efa:	4313      	orrs	r3, r2
   11efc:	b21a      	sxth	r2, r3
   11efe:	2318      	movs	r3, #24
   11f00:	18fb      	adds	r3, r7, r3
   11f02:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   11f04:	69fb      	ldr	r3, [r7, #28]
   11f06:	1c5a      	adds	r2, r3, #1
   11f08:	61fa      	str	r2, [r7, #28]
   11f0a:	005b      	lsls	r3, r3, #1
   11f0c:	001a      	movs	r2, r3
   11f0e:	2318      	movs	r3, #24
   11f10:	18fb      	adds	r3, r7, r3
   11f12:	881b      	ldrh	r3, [r3, #0]
   11f14:	8013      	strh	r3, [r2, #0]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11f16:	231a      	movs	r3, #26
   11f18:	18fb      	adds	r3, r7, r3
   11f1a:	221a      	movs	r2, #26
   11f1c:	18ba      	adds	r2, r7, r2
   11f1e:	8812      	ldrh	r2, [r2, #0]
   11f20:	3202      	adds	r2, #2
   11f22:	801a      	strh	r2, [r3, #0]
   11f24:	231a      	movs	r3, #26
   11f26:	18fa      	adds	r2, r7, r3
   11f28:	1dbb      	adds	r3, r7, #6
   11f2a:	8812      	ldrh	r2, [r2, #0]
   11f2c:	881b      	ldrh	r3, [r3, #0]
   11f2e:	429a      	cmp	r2, r3
   11f30:	d3c5      	bcc.n	11ebe <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   11f32:	4b0c      	ldr	r3, [pc, #48]	; (11f64 <nvm_write_buffer+0x138>)
   11f34:	791b      	ldrb	r3, [r3, #4]
   11f36:	2201      	movs	r2, #1
   11f38:	4053      	eors	r3, r2
   11f3a:	b2db      	uxtb	r3, r3
   11f3c:	2b00      	cmp	r3, #0
   11f3e:	d00b      	beq.n	11f58 <nvm_write_buffer+0x12c>
   11f40:	1dbb      	adds	r3, r7, #6
   11f42:	881b      	ldrh	r3, [r3, #0]
   11f44:	2b3f      	cmp	r3, #63	; 0x3f
   11f46:	d807      	bhi.n	11f58 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   11f48:	68fb      	ldr	r3, [r7, #12]
   11f4a:	2200      	movs	r2, #0
   11f4c:	0019      	movs	r1, r3
   11f4e:	2004      	movs	r0, #4
   11f50:	4b08      	ldr	r3, [pc, #32]	; (11f74 <nvm_write_buffer+0x148>)
   11f52:	4798      	blx	r3
   11f54:	0003      	movs	r3, r0
   11f56:	e000      	b.n	11f5a <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   11f58:	2300      	movs	r3, #0
}
   11f5a:	0018      	movs	r0, r3
   11f5c:	46bd      	mov	sp, r7
   11f5e:	b008      	add	sp, #32
   11f60:	bd80      	pop	{r7, pc}
   11f62:	46c0      	nop			; (mov r8, r8)
   11f64:	200000f4 	.word	0x200000f4
   11f68:	41004000 	.word	0x41004000
   11f6c:	00011bb9 	.word	0x00011bb9
   11f70:	ffffa544 	.word	0xffffa544
   11f74:	00011d15 	.word	0x00011d15

00011f78 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   11f78:	b580      	push	{r7, lr}
   11f7a:	b088      	sub	sp, #32
   11f7c:	af00      	add	r7, sp, #0
   11f7e:	60f8      	str	r0, [r7, #12]
   11f80:	60b9      	str	r1, [r7, #8]
   11f82:	1dbb      	adds	r3, r7, #6
   11f84:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11f86:	4b38      	ldr	r3, [pc, #224]	; (12068 <nvm_read_buffer+0xf0>)
   11f88:	881b      	ldrh	r3, [r3, #0]
   11f8a:	001a      	movs	r2, r3
   11f8c:	4b36      	ldr	r3, [pc, #216]	; (12068 <nvm_read_buffer+0xf0>)
   11f8e:	885b      	ldrh	r3, [r3, #2]
   11f90:	435a      	muls	r2, r3
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
	/* Check if the source address is valid */
	if (source_address >
   11f92:	68fb      	ldr	r3, [r7, #12]
   11f94:	429a      	cmp	r2, r3
   11f96:	d201      	bcs.n	11f9c <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   11f98:	2318      	movs	r3, #24
   11f9a:	e060      	b.n	1205e <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   11f9c:	4b32      	ldr	r3, [pc, #200]	; (12068 <nvm_read_buffer+0xf0>)
   11f9e:	881b      	ldrh	r3, [r3, #0]
   11fa0:	3b01      	subs	r3, #1
   11fa2:	001a      	movs	r2, r3
   11fa4:	68fb      	ldr	r3, [r7, #12]
   11fa6:	4013      	ands	r3, r2
   11fa8:	d001      	beq.n	11fae <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   11faa:	2318      	movs	r3, #24
   11fac:	e057      	b.n	1205e <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   11fae:	4b2e      	ldr	r3, [pc, #184]	; (12068 <nvm_read_buffer+0xf0>)
   11fb0:	881b      	ldrh	r3, [r3, #0]
   11fb2:	1dba      	adds	r2, r7, #6
   11fb4:	8812      	ldrh	r2, [r2, #0]
   11fb6:	429a      	cmp	r2, r3
   11fb8:	d901      	bls.n	11fbe <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   11fba:	2317      	movs	r3, #23
   11fbc:	e04f      	b.n	1205e <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11fbe:	4b2b      	ldr	r3, [pc, #172]	; (1206c <nvm_read_buffer+0xf4>)
   11fc0:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11fc2:	4b2b      	ldr	r3, [pc, #172]	; (12070 <nvm_read_buffer+0xf8>)
   11fc4:	4798      	blx	r3
   11fc6:	0003      	movs	r3, r0
   11fc8:	001a      	movs	r2, r3
   11fca:	2301      	movs	r3, #1
   11fcc:	4053      	eors	r3, r2
   11fce:	b2db      	uxtb	r3, r3
   11fd0:	2b00      	cmp	r3, #0
   11fd2:	d001      	beq.n	11fd8 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   11fd4:	2305      	movs	r3, #5
   11fd6:	e042      	b.n	1205e <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11fd8:	697b      	ldr	r3, [r7, #20]
   11fda:	2220      	movs	r2, #32
   11fdc:	32ff      	adds	r2, #255	; 0xff
   11fde:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   11fe0:	68fb      	ldr	r3, [r7, #12]
   11fe2:	085b      	lsrs	r3, r3, #1
   11fe4:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11fe6:	231a      	movs	r3, #26
   11fe8:	18fb      	adds	r3, r7, r3
   11fea:	2200      	movs	r2, #0
   11fec:	801a      	strh	r2, [r3, #0]
   11fee:	e02e      	b.n	1204e <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   11ff0:	69fb      	ldr	r3, [r7, #28]
   11ff2:	1c5a      	adds	r2, r3, #1
   11ff4:	61fa      	str	r2, [r7, #28]
   11ff6:	005b      	lsls	r3, r3, #1
   11ff8:	001a      	movs	r2, r3
   11ffa:	2312      	movs	r3, #18
   11ffc:	18fb      	adds	r3, r7, r3
   11ffe:	8812      	ldrh	r2, [r2, #0]
   12000:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   12002:	231a      	movs	r3, #26
   12004:	18fb      	adds	r3, r7, r3
   12006:	881b      	ldrh	r3, [r3, #0]
   12008:	68ba      	ldr	r2, [r7, #8]
   1200a:	18d3      	adds	r3, r2, r3
   1200c:	2212      	movs	r2, #18
   1200e:	18ba      	adds	r2, r7, r2
   12010:	8812      	ldrh	r2, [r2, #0]
   12012:	b2d2      	uxtb	r2, r2
   12014:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   12016:	231a      	movs	r3, #26
   12018:	18fb      	adds	r3, r7, r3
   1201a:	881a      	ldrh	r2, [r3, #0]
   1201c:	1dbb      	adds	r3, r7, #6
   1201e:	881b      	ldrh	r3, [r3, #0]
   12020:	3b01      	subs	r3, #1
   12022:	429a      	cmp	r2, r3
   12024:	da0c      	bge.n	12040 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   12026:	231a      	movs	r3, #26
   12028:	18fb      	adds	r3, r7, r3
   1202a:	881b      	ldrh	r3, [r3, #0]
   1202c:	3301      	adds	r3, #1
   1202e:	68ba      	ldr	r2, [r7, #8]
   12030:	18d3      	adds	r3, r2, r3
   12032:	2212      	movs	r2, #18
   12034:	18ba      	adds	r2, r7, r2
   12036:	8812      	ldrh	r2, [r2, #0]
   12038:	0a12      	lsrs	r2, r2, #8
   1203a:	b292      	uxth	r2, r2
   1203c:	b2d2      	uxtb	r2, r2
   1203e:	701a      	strb	r2, [r3, #0]

	uint32_t page_address = source_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   12040:	231a      	movs	r3, #26
   12042:	18fb      	adds	r3, r7, r3
   12044:	221a      	movs	r2, #26
   12046:	18ba      	adds	r2, r7, r2
   12048:	8812      	ldrh	r2, [r2, #0]
   1204a:	3202      	adds	r2, #2
   1204c:	801a      	strh	r2, [r3, #0]
   1204e:	231a      	movs	r3, #26
   12050:	18fa      	adds	r2, r7, r3
   12052:	1dbb      	adds	r3, r7, #6
   12054:	8812      	ldrh	r2, [r2, #0]
   12056:	881b      	ldrh	r3, [r3, #0]
   12058:	429a      	cmp	r2, r3
   1205a:	d3c9      	bcc.n	11ff0 <nvm_read_buffer+0x78>
		if (i < (length - 1)) {
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
   1205c:	2300      	movs	r3, #0
}
   1205e:	0018      	movs	r0, r3
   12060:	46bd      	mov	sp, r7
   12062:	b008      	add	sp, #32
   12064:	bd80      	pop	{r7, pc}
   12066:	46c0      	nop			; (mov r8, r8)
   12068:	200000f4 	.word	0x200000f4
   1206c:	41004000 	.word	0x41004000
   12070:	00011bb9 	.word	0x00011bb9

00012074 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   12074:	b580      	push	{r7, lr}
   12076:	b084      	sub	sp, #16
   12078:	af00      	add	r7, sp, #0
   1207a:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   1207c:	4b23      	ldr	r3, [pc, #140]	; (1210c <nvm_erase_row+0x98>)
   1207e:	881b      	ldrh	r3, [r3, #0]
   12080:	001a      	movs	r2, r3
   12082:	4b22      	ldr	r3, [pc, #136]	; (1210c <nvm_erase_row+0x98>)
   12084:	885b      	ldrh	r3, [r3, #2]
   12086:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
   12088:	687b      	ldr	r3, [r7, #4]
   1208a:	429a      	cmp	r2, r3
   1208c:	d201      	bcs.n	12092 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   1208e:	2318      	movs	r3, #24
   12090:	e037      	b.n	12102 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   12092:	4b1e      	ldr	r3, [pc, #120]	; (1210c <nvm_erase_row+0x98>)
   12094:	881b      	ldrh	r3, [r3, #0]
   12096:	009b      	lsls	r3, r3, #2
   12098:	3b01      	subs	r3, #1
   1209a:	001a      	movs	r2, r3
   1209c:	687b      	ldr	r3, [r7, #4]
   1209e:	4013      	ands	r3, r2
   120a0:	d001      	beq.n	120a6 <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   120a2:	2318      	movs	r3, #24
   120a4:	e02d      	b.n	12102 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   120a6:	4b1a      	ldr	r3, [pc, #104]	; (12110 <nvm_erase_row+0x9c>)
   120a8:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   120aa:	4b1a      	ldr	r3, [pc, #104]	; (12114 <nvm_erase_row+0xa0>)
   120ac:	4798      	blx	r3
   120ae:	0003      	movs	r3, r0
   120b0:	001a      	movs	r2, r3
   120b2:	2301      	movs	r3, #1
   120b4:	4053      	eors	r3, r2
   120b6:	b2db      	uxtb	r3, r3
   120b8:	2b00      	cmp	r3, #0
   120ba:	d001      	beq.n	120c0 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   120bc:	2305      	movs	r3, #5
   120be:	e020      	b.n	12102 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   120c0:	68fb      	ldr	r3, [r7, #12]
   120c2:	2220      	movs	r2, #32
   120c4:	32ff      	adds	r2, #255	; 0xff
   120c6:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   120c8:	687b      	ldr	r3, [r7, #4]
   120ca:	089b      	lsrs	r3, r3, #2
   120cc:	005a      	lsls	r2, r3, #1
   120ce:	68fb      	ldr	r3, [r7, #12]
   120d0:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   120d2:	68fb      	ldr	r3, [r7, #12]
   120d4:	4a10      	ldr	r2, [pc, #64]	; (12118 <nvm_erase_row+0xa4>)
   120d6:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   120d8:	46c0      	nop			; (mov r8, r8)
   120da:	4b0e      	ldr	r3, [pc, #56]	; (12114 <nvm_erase_row+0xa0>)
   120dc:	4798      	blx	r3
   120de:	0003      	movs	r3, r0
   120e0:	001a      	movs	r2, r3
   120e2:	2301      	movs	r3, #1
   120e4:	4053      	eors	r3, r2
   120e6:	b2db      	uxtb	r3, r3
   120e8:	2b00      	cmp	r3, #0
   120ea:	d1f6      	bne.n	120da <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   120ec:	68fb      	ldr	r3, [r7, #12]
   120ee:	8b1b      	ldrh	r3, [r3, #24]
   120f0:	b29b      	uxth	r3, r3
   120f2:	b2db      	uxtb	r3, r3
   120f4:	001a      	movs	r2, r3
   120f6:	231c      	movs	r3, #28
   120f8:	4013      	ands	r3, r2
   120fa:	d001      	beq.n	12100 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   120fc:	2304      	movs	r3, #4
   120fe:	e000      	b.n	12102 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   12100:	2300      	movs	r3, #0
}
   12102:	0018      	movs	r0, r3
   12104:	46bd      	mov	sp, r7
   12106:	b004      	add	sp, #16
   12108:	bd80      	pop	{r7, pc}
   1210a:	46c0      	nop			; (mov r8, r8)
   1210c:	200000f4 	.word	0x200000f4
   12110:	41004000 	.word	0x41004000
   12114:	00011bb9 	.word	0x00011bb9
   12118:	ffffa502 	.word	0xffffa502

0001211c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   1211c:	b580      	push	{r7, lr}
   1211e:	b082      	sub	sp, #8
   12120:	af00      	add	r7, sp, #0
   12122:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   12124:	687b      	ldr	r3, [r7, #4]
   12126:	2280      	movs	r2, #128	; 0x80
   12128:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1212a:	687b      	ldr	r3, [r7, #4]
   1212c:	2200      	movs	r2, #0
   1212e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   12130:	687b      	ldr	r3, [r7, #4]
   12132:	2201      	movs	r2, #1
   12134:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   12136:	687b      	ldr	r3, [r7, #4]
   12138:	2200      	movs	r2, #0
   1213a:	70da      	strb	r2, [r3, #3]
}
   1213c:	46c0      	nop			; (mov r8, r8)
   1213e:	46bd      	mov	sp, r7
   12140:	b002      	add	sp, #8
   12142:	bd80      	pop	{r7, pc}

00012144 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   12144:	b580      	push	{r7, lr}
   12146:	b084      	sub	sp, #16
   12148:	af00      	add	r7, sp, #0
   1214a:	0002      	movs	r2, r0
   1214c:	6039      	str	r1, [r7, #0]
   1214e:	1dfb      	adds	r3, r7, #7
   12150:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   12152:	230c      	movs	r3, #12
   12154:	18fb      	adds	r3, r7, r3
   12156:	0018      	movs	r0, r3
   12158:	4b10      	ldr	r3, [pc, #64]	; (1219c <port_pin_set_config+0x58>)
   1215a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   1215c:	230c      	movs	r3, #12
   1215e:	18fb      	adds	r3, r7, r3
   12160:	2280      	movs	r2, #128	; 0x80
   12162:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   12164:	683b      	ldr	r3, [r7, #0]
   12166:	781a      	ldrb	r2, [r3, #0]
   12168:	230c      	movs	r3, #12
   1216a:	18fb      	adds	r3, r7, r3
   1216c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   1216e:	683b      	ldr	r3, [r7, #0]
   12170:	785a      	ldrb	r2, [r3, #1]
   12172:	230c      	movs	r3, #12
   12174:	18fb      	adds	r3, r7, r3
   12176:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   12178:	683b      	ldr	r3, [r7, #0]
   1217a:	789a      	ldrb	r2, [r3, #2]
   1217c:	230c      	movs	r3, #12
   1217e:	18fb      	adds	r3, r7, r3
   12180:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   12182:	230c      	movs	r3, #12
   12184:	18fa      	adds	r2, r7, r3
   12186:	1dfb      	adds	r3, r7, #7
   12188:	781b      	ldrb	r3, [r3, #0]
   1218a:	0011      	movs	r1, r2
   1218c:	0018      	movs	r0, r3
   1218e:	4b04      	ldr	r3, [pc, #16]	; (121a0 <port_pin_set_config+0x5c>)
   12190:	4798      	blx	r3
}
   12192:	46c0      	nop			; (mov r8, r8)
   12194:	46bd      	mov	sp, r7
   12196:	b004      	add	sp, #16
   12198:	bd80      	pop	{r7, pc}
   1219a:	46c0      	nop			; (mov r8, r8)
   1219c:	0001211d 	.word	0x0001211d
   121a0:	0001554d 	.word	0x0001554d

000121a4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   121a4:	b580      	push	{r7, lr}
   121a6:	b082      	sub	sp, #8
   121a8:	af00      	add	r7, sp, #0
   121aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   121ac:	687b      	ldr	r3, [r7, #4]
   121ae:	2200      	movs	r2, #0
   121b0:	701a      	strb	r2, [r3, #0]
}
   121b2:	46c0      	nop			; (mov r8, r8)
   121b4:	46bd      	mov	sp, r7
   121b6:	b002      	add	sp, #8
   121b8:	bd80      	pop	{r7, pc}
   121ba:	46c0      	nop			; (mov r8, r8)

000121bc <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   121bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   121be:	b08d      	sub	sp, #52	; 0x34
   121c0:	af00      	add	r7, sp, #0
   121c2:	60b8      	str	r0, [r7, #8]
   121c4:	60f9      	str	r1, [r7, #12]
   121c6:	603a      	str	r2, [r7, #0]
   121c8:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   121ca:	2300      	movs	r3, #0
   121cc:	2400      	movs	r4, #0
   121ce:	623b      	str	r3, [r7, #32]
   121d0:	627c      	str	r4, [r7, #36]	; 0x24
   121d2:	2300      	movs	r3, #0
   121d4:	2400      	movs	r4, #0
   121d6:	61bb      	str	r3, [r7, #24]
   121d8:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   121da:	233f      	movs	r3, #63	; 0x3f
   121dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   121de:	e053      	b.n	12288 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   121e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   121e2:	3b20      	subs	r3, #32
   121e4:	2b00      	cmp	r3, #0
   121e6:	db04      	blt.n	121f2 <long_division+0x36>
   121e8:	2201      	movs	r2, #1
   121ea:	409a      	lsls	r2, r3
   121ec:	0013      	movs	r3, r2
   121ee:	617b      	str	r3, [r7, #20]
   121f0:	e00b      	b.n	1220a <long_division+0x4e>
   121f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   121f4:	2220      	movs	r2, #32
   121f6:	1ad3      	subs	r3, r2, r3
   121f8:	2201      	movs	r2, #1
   121fa:	40da      	lsrs	r2, r3
   121fc:	0013      	movs	r3, r2
   121fe:	2100      	movs	r1, #0
   12200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12202:	4091      	lsls	r1, r2
   12204:	000a      	movs	r2, r1
   12206:	4313      	orrs	r3, r2
   12208:	617b      	str	r3, [r7, #20]
   1220a:	2201      	movs	r2, #1
   1220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1220e:	409a      	lsls	r2, r3
   12210:	0013      	movs	r3, r2
   12212:	613b      	str	r3, [r7, #16]

		r = r << 1;
   12214:	69bb      	ldr	r3, [r7, #24]
   12216:	69fc      	ldr	r4, [r7, #28]
   12218:	18db      	adds	r3, r3, r3
   1221a:	4164      	adcs	r4, r4
   1221c:	61bb      	str	r3, [r7, #24]
   1221e:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   12220:	68bb      	ldr	r3, [r7, #8]
   12222:	693a      	ldr	r2, [r7, #16]
   12224:	401a      	ands	r2, r3
   12226:	0015      	movs	r5, r2
   12228:	68fb      	ldr	r3, [r7, #12]
   1222a:	697a      	ldr	r2, [r7, #20]
   1222c:	401a      	ands	r2, r3
   1222e:	0016      	movs	r6, r2
   12230:	002b      	movs	r3, r5
   12232:	4333      	orrs	r3, r6
   12234:	d007      	beq.n	12246 <long_division+0x8a>
			r |= 0x01;
   12236:	69bb      	ldr	r3, [r7, #24]
   12238:	2201      	movs	r2, #1
   1223a:	4313      	orrs	r3, r2
   1223c:	61bb      	str	r3, [r7, #24]
   1223e:	69fb      	ldr	r3, [r7, #28]
   12240:	2200      	movs	r2, #0
   12242:	4313      	orrs	r3, r2
   12244:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   12246:	687a      	ldr	r2, [r7, #4]
   12248:	69fb      	ldr	r3, [r7, #28]
   1224a:	429a      	cmp	r2, r3
   1224c:	d819      	bhi.n	12282 <long_division+0xc6>
   1224e:	687a      	ldr	r2, [r7, #4]
   12250:	69fb      	ldr	r3, [r7, #28]
   12252:	429a      	cmp	r2, r3
   12254:	d103      	bne.n	1225e <long_division+0xa2>
   12256:	683a      	ldr	r2, [r7, #0]
   12258:	69bb      	ldr	r3, [r7, #24]
   1225a:	429a      	cmp	r2, r3
   1225c:	d811      	bhi.n	12282 <long_division+0xc6>
			r = r - d;
   1225e:	69b9      	ldr	r1, [r7, #24]
   12260:	69fa      	ldr	r2, [r7, #28]
   12262:	683b      	ldr	r3, [r7, #0]
   12264:	687c      	ldr	r4, [r7, #4]
   12266:	1ac9      	subs	r1, r1, r3
   12268:	41a2      	sbcs	r2, r4
   1226a:	000b      	movs	r3, r1
   1226c:	0014      	movs	r4, r2
   1226e:	61bb      	str	r3, [r7, #24]
   12270:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   12272:	6a3a      	ldr	r2, [r7, #32]
   12274:	693b      	ldr	r3, [r7, #16]
   12276:	4313      	orrs	r3, r2
   12278:	623b      	str	r3, [r7, #32]
   1227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1227c:	697b      	ldr	r3, [r7, #20]
   1227e:	4313      	orrs	r3, r2
   12280:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
   12282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12284:	3b01      	subs	r3, #1
   12286:	62fb      	str	r3, [r7, #44]	; 0x2c
   12288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1228a:	2b00      	cmp	r3, #0
   1228c:	daa8      	bge.n	121e0 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
   1228e:	6a3b      	ldr	r3, [r7, #32]
   12290:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   12292:	0018      	movs	r0, r3
   12294:	0021      	movs	r1, r4
   12296:	46bd      	mov	sp, r7
   12298:	b00d      	add	sp, #52	; 0x34
   1229a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001229c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   1229c:	b580      	push	{r7, lr}
   1229e:	b086      	sub	sp, #24
   122a0:	af00      	add	r7, sp, #0
   122a2:	60f8      	str	r0, [r7, #12]
   122a4:	60b9      	str	r1, [r7, #8]
   122a6:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   122a8:	2316      	movs	r3, #22
   122aa:	18fb      	adds	r3, r7, r3
   122ac:	2200      	movs	r2, #0
   122ae:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   122b0:	68bb      	ldr	r3, [r7, #8]
   122b2:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   122b4:	68bb      	ldr	r3, [r7, #8]
   122b6:	085a      	lsrs	r2, r3, #1
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	429a      	cmp	r2, r3
   122bc:	d201      	bcs.n	122c2 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   122be:	2340      	movs	r3, #64	; 0x40
   122c0:	e026      	b.n	12310 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   122c2:	68bb      	ldr	r3, [r7, #8]
   122c4:	085b      	lsrs	r3, r3, #1
   122c6:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   122c8:	e00a      	b.n	122e0 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   122ca:	693a      	ldr	r2, [r7, #16]
   122cc:	68fb      	ldr	r3, [r7, #12]
   122ce:	1ad3      	subs	r3, r2, r3
   122d0:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   122d2:	2316      	movs	r3, #22
   122d4:	18fb      	adds	r3, r7, r3
   122d6:	881a      	ldrh	r2, [r3, #0]
   122d8:	2316      	movs	r3, #22
   122da:	18fb      	adds	r3, r7, r3
   122dc:	3201      	adds	r2, #1
   122de:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
   122e0:	693a      	ldr	r2, [r7, #16]
   122e2:	68fb      	ldr	r3, [r7, #12]
   122e4:	429a      	cmp	r2, r3
   122e6:	d2f0      	bcs.n	122ca <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
   122e8:	2316      	movs	r3, #22
   122ea:	18fb      	adds	r3, r7, r3
   122ec:	2216      	movs	r2, #22
   122ee:	18ba      	adds	r2, r7, r2
   122f0:	8812      	ldrh	r2, [r2, #0]
   122f2:	3a01      	subs	r2, #1
   122f4:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   122f6:	2316      	movs	r3, #22
   122f8:	18fb      	adds	r3, r7, r3
   122fa:	881b      	ldrh	r3, [r3, #0]
   122fc:	2bff      	cmp	r3, #255	; 0xff
   122fe:	d901      	bls.n	12304 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12300:	2340      	movs	r3, #64	; 0x40
   12302:	e005      	b.n	12310 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   12304:	687b      	ldr	r3, [r7, #4]
   12306:	2216      	movs	r2, #22
   12308:	18ba      	adds	r2, r7, r2
   1230a:	8812      	ldrh	r2, [r2, #0]
   1230c:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   1230e:	2300      	movs	r3, #0
	}
}
   12310:	0018      	movs	r0, r3
   12312:	46bd      	mov	sp, r7
   12314:	b006      	add	sp, #24
   12316:	bd80      	pop	{r7, pc}

00012318 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   12318:	b5f0      	push	{r4, r5, r6, r7, lr}
   1231a:	b0a1      	sub	sp, #132	; 0x84
   1231c:	af00      	add	r7, sp, #0
   1231e:	64f8      	str	r0, [r7, #76]	; 0x4c
   12320:	64b9      	str	r1, [r7, #72]	; 0x48
   12322:	647a      	str	r2, [r7, #68]	; 0x44
   12324:	2243      	movs	r2, #67	; 0x43
   12326:	18ba      	adds	r2, r7, r2
   12328:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   1232a:	2300      	movs	r3, #0
   1232c:	2400      	movs	r4, #0
   1232e:	673b      	str	r3, [r7, #112]	; 0x70
   12330:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   12332:	2300      	movs	r3, #0
   12334:	2400      	movs	r4, #0
   12336:	66bb      	str	r3, [r7, #104]	; 0x68
   12338:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   1233a:	2300      	movs	r3, #0
   1233c:	2400      	movs	r4, #0
   1233e:	67bb      	str	r3, [r7, #120]	; 0x78
   12340:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   12342:	2300      	movs	r3, #0
   12344:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   12346:	2358      	movs	r3, #88	; 0x58
   12348:	2240      	movs	r2, #64	; 0x40
   1234a:	4694      	mov	ip, r2
   1234c:	44bc      	add	ip, r7
   1234e:	4463      	add	r3, ip
   12350:	781a      	ldrb	r2, [r3, #0]
   12352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12354:	435a      	muls	r2, r3
   12356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12358:	429a      	cmp	r2, r3
   1235a:	d901      	bls.n	12360 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1235c:	2340      	movs	r3, #64	; 0x40
   1235e:	e0b3      	b.n	124c8 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   12360:	2343      	movs	r3, #67	; 0x43
   12362:	18fb      	adds	r3, r7, r3
   12364:	781b      	ldrb	r3, [r3, #0]
   12366:	2b00      	cmp	r3, #0
   12368:	d13d      	bne.n	123e6 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   1236a:	2358      	movs	r3, #88	; 0x58
   1236c:	2240      	movs	r2, #64	; 0x40
   1236e:	4694      	mov	ip, r2
   12370:	44bc      	add	ip, r7
   12372:	4463      	add	r3, ip
   12374:	781b      	ldrb	r3, [r3, #0]
   12376:	b2db      	uxtb	r3, r3
   12378:	613b      	str	r3, [r7, #16]
   1237a:	2300      	movs	r3, #0
   1237c:	617b      	str	r3, [r7, #20]
   1237e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12380:	60bb      	str	r3, [r7, #8]
   12382:	2300      	movs	r3, #0
   12384:	60fb      	str	r3, [r7, #12]
   12386:	4c52      	ldr	r4, [pc, #328]	; (124d0 <_sercom_get_async_baud_val+0x1b8>)
   12388:	68ba      	ldr	r2, [r7, #8]
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	6938      	ldr	r0, [r7, #16]
   1238e:	6979      	ldr	r1, [r7, #20]
   12390:	47a0      	blx	r4
   12392:	0003      	movs	r3, r0
   12394:	000c      	movs	r4, r1
   12396:	001b      	movs	r3, r3
   12398:	65fb      	str	r3, [r7, #92]	; 0x5c
   1239a:	2300      	movs	r3, #0
   1239c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   1239e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   123a0:	603b      	str	r3, [r7, #0]
   123a2:	2300      	movs	r3, #0
   123a4:	607b      	str	r3, [r7, #4]
   123a6:	6db8      	ldr	r0, [r7, #88]	; 0x58
   123a8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   123aa:	683a      	ldr	r2, [r7, #0]
   123ac:	687b      	ldr	r3, [r7, #4]
   123ae:	4c49      	ldr	r4, [pc, #292]	; (124d4 <_sercom_get_async_baud_val+0x1bc>)
   123b0:	47a0      	blx	r4
   123b2:	0003      	movs	r3, r0
   123b4:	000c      	movs	r4, r1
   123b6:	673b      	str	r3, [r7, #112]	; 0x70
   123b8:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   123ba:	2100      	movs	r1, #0
   123bc:	2201      	movs	r2, #1
   123be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   123c0:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   123c2:	1ac9      	subs	r1, r1, r3
   123c4:	41a2      	sbcs	r2, r4
   123c6:	000b      	movs	r3, r1
   123c8:	0014      	movs	r4, r2
   123ca:	66bb      	str	r3, [r7, #104]	; 0x68
   123cc:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   123ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   123d0:	0c1b      	lsrs	r3, r3, #16
   123d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   123d4:	0416      	lsls	r6, r2, #16
   123d6:	431e      	orrs	r6, r3
   123d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   123da:	041d      	lsls	r5, r3, #16
   123dc:	0033      	movs	r3, r6
   123de:	67bb      	str	r3, [r7, #120]	; 0x78
   123e0:	2300      	movs	r3, #0
   123e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   123e4:	e06a      	b.n	124bc <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   123e6:	2343      	movs	r3, #67	; 0x43
   123e8:	18fb      	adds	r3, r7, r3
   123ea:	781b      	ldrb	r3, [r3, #0]
   123ec:	2b01      	cmp	r3, #1
   123ee:	d165      	bne.n	124bc <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   123f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   123f2:	633b      	str	r3, [r7, #48]	; 0x30
   123f4:	2300      	movs	r3, #0
   123f6:	637b      	str	r3, [r7, #52]	; 0x34
   123f8:	2358      	movs	r3, #88	; 0x58
   123fa:	2240      	movs	r2, #64	; 0x40
   123fc:	4694      	mov	ip, r2
   123fe:	44bc      	add	ip, r7
   12400:	4463      	add	r3, ip
   12402:	781b      	ldrb	r3, [r3, #0]
   12404:	b2db      	uxtb	r3, r3
   12406:	62bb      	str	r3, [r7, #40]	; 0x28
   12408:	2300      	movs	r3, #0
   1240a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1240c:	4c30      	ldr	r4, [pc, #192]	; (124d0 <_sercom_get_async_baud_val+0x1b8>)
   1240e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12412:	6b38      	ldr	r0, [r7, #48]	; 0x30
   12414:	6b79      	ldr	r1, [r7, #52]	; 0x34
   12416:	47a0      	blx	r4
   12418:	0003      	movs	r3, r0
   1241a:	000c      	movs	r4, r1
   1241c:	65bb      	str	r3, [r7, #88]	; 0x58
   1241e:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   12420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12422:	623b      	str	r3, [r7, #32]
   12424:	2300      	movs	r3, #0
   12426:	627b      	str	r3, [r7, #36]	; 0x24
   12428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1242a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1242c:	001a      	movs	r2, r3
   1242e:	0023      	movs	r3, r4
   12430:	6a38      	ldr	r0, [r7, #32]
   12432:	6a79      	ldr	r1, [r7, #36]	; 0x24
   12434:	4c27      	ldr	r4, [pc, #156]	; (124d4 <_sercom_get_async_baud_val+0x1bc>)
   12436:	47a0      	blx	r4
   12438:	0003      	movs	r3, r0
   1243a:	000c      	movs	r4, r1
   1243c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   1243e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   12440:	2380      	movs	r3, #128	; 0x80
   12442:	019b      	lsls	r3, r3, #6
   12444:	429a      	cmp	r2, r3
   12446:	d901      	bls.n	1244c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12448:	2340      	movs	r3, #64	; 0x40
   1244a:	e03d      	b.n	124c8 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   1244c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1244e:	61bb      	str	r3, [r7, #24]
   12450:	2300      	movs	r3, #0
   12452:	61fb      	str	r3, [r7, #28]
   12454:	69b9      	ldr	r1, [r7, #24]
   12456:	69fa      	ldr	r2, [r7, #28]
   12458:	000b      	movs	r3, r1
   1245a:	0f5b      	lsrs	r3, r3, #29
   1245c:	0010      	movs	r0, r2
   1245e:	00c0      	lsls	r0, r0, #3
   12460:	63f8      	str	r0, [r7, #60]	; 0x3c
   12462:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   12464:	4318      	orrs	r0, r3
   12466:	63f8      	str	r0, [r7, #60]	; 0x3c
   12468:	000b      	movs	r3, r1
   1246a:	00db      	lsls	r3, r3, #3
   1246c:	63bb      	str	r3, [r7, #56]	; 0x38
   1246e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12470:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   12472:	001a      	movs	r2, r3
   12474:	0023      	movs	r3, r4
   12476:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   12478:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1247a:	4c16      	ldr	r4, [pc, #88]	; (124d4 <_sercom_get_async_baud_val+0x1bc>)
   1247c:	47a0      	blx	r4
   1247e:	0003      	movs	r3, r0
   12480:	000c      	movs	r4, r1
   12482:	65bb      	str	r3, [r7, #88]	; 0x58
   12484:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   12486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12488:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1248a:	b2d9      	uxtb	r1, r3
   1248c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1248e:	b2db      	uxtb	r3, r3
   12490:	00db      	lsls	r3, r3, #3
   12492:	b2da      	uxtb	r2, r3
   12494:	2317      	movs	r3, #23
   12496:	2040      	movs	r0, #64	; 0x40
   12498:	4684      	mov	ip, r0
   1249a:	44bc      	add	ip, r7
   1249c:	4463      	add	r3, ip
   1249e:	1a8a      	subs	r2, r1, r2
   124a0:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   124a2:	2317      	movs	r3, #23
   124a4:	2240      	movs	r2, #64	; 0x40
   124a6:	4694      	mov	ip, r2
   124a8:	44bc      	add	ip, r7
   124aa:	4463      	add	r3, ip
   124ac:	781b      	ldrb	r3, [r3, #0]
   124ae:	035b      	lsls	r3, r3, #13
   124b0:	001a      	movs	r2, r3
   124b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   124b4:	4313      	orrs	r3, r2
   124b6:	67bb      	str	r3, [r7, #120]	; 0x78
   124b8:	2300      	movs	r3, #0
   124ba:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   124bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   124be:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   124c0:	b29a      	uxth	r2, r3
   124c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   124c4:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   124c6:	2300      	movs	r3, #0
}
   124c8:	0018      	movs	r0, r3
   124ca:	46bd      	mov	sp, r7
   124cc:	b021      	add	sp, #132	; 0x84
   124ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   124d0:	000183bd 	.word	0x000183bd
   124d4:	000121bd 	.word	0x000121bd

000124d8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   124d8:	b580      	push	{r7, lr}
   124da:	b084      	sub	sp, #16
   124dc:	af00      	add	r7, sp, #0
   124de:	0002      	movs	r2, r0
   124e0:	1dfb      	adds	r3, r7, #7
   124e2:	701a      	strb	r2, [r3, #0]
   124e4:	1dbb      	adds	r3, r7, #6
   124e6:	1c0a      	adds	r2, r1, #0
   124e8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   124ea:	4b1a      	ldr	r3, [pc, #104]	; (12554 <sercom_set_gclk_generator+0x7c>)
   124ec:	781b      	ldrb	r3, [r3, #0]
   124ee:	2201      	movs	r2, #1
   124f0:	4053      	eors	r3, r2
   124f2:	b2db      	uxtb	r3, r3
   124f4:	2b00      	cmp	r3, #0
   124f6:	d103      	bne.n	12500 <sercom_set_gclk_generator+0x28>
   124f8:	1dbb      	adds	r3, r7, #6
   124fa:	781b      	ldrb	r3, [r3, #0]
   124fc:	2b00      	cmp	r3, #0
   124fe:	d01b      	beq.n	12538 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12500:	230c      	movs	r3, #12
   12502:	18fb      	adds	r3, r7, r3
   12504:	0018      	movs	r0, r3
   12506:	4b14      	ldr	r3, [pc, #80]	; (12558 <sercom_set_gclk_generator+0x80>)
   12508:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   1250a:	230c      	movs	r3, #12
   1250c:	18fb      	adds	r3, r7, r3
   1250e:	1dfa      	adds	r2, r7, #7
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   12514:	230c      	movs	r3, #12
   12516:	18fb      	adds	r3, r7, r3
   12518:	0019      	movs	r1, r3
   1251a:	2013      	movs	r0, #19
   1251c:	4b0f      	ldr	r3, [pc, #60]	; (1255c <sercom_set_gclk_generator+0x84>)
   1251e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   12520:	2013      	movs	r0, #19
   12522:	4b0f      	ldr	r3, [pc, #60]	; (12560 <sercom_set_gclk_generator+0x88>)
   12524:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   12526:	4b0b      	ldr	r3, [pc, #44]	; (12554 <sercom_set_gclk_generator+0x7c>)
   12528:	1dfa      	adds	r2, r7, #7
   1252a:	7812      	ldrb	r2, [r2, #0]
   1252c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   1252e:	4b09      	ldr	r3, [pc, #36]	; (12554 <sercom_set_gclk_generator+0x7c>)
   12530:	2201      	movs	r2, #1
   12532:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   12534:	2300      	movs	r3, #0
   12536:	e008      	b.n	1254a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   12538:	4b06      	ldr	r3, [pc, #24]	; (12554 <sercom_set_gclk_generator+0x7c>)
   1253a:	785b      	ldrb	r3, [r3, #1]
   1253c:	1dfa      	adds	r2, r7, #7
   1253e:	7812      	ldrb	r2, [r2, #0]
   12540:	429a      	cmp	r2, r3
   12542:	d101      	bne.n	12548 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   12544:	2300      	movs	r3, #0
   12546:	e000      	b.n	1254a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   12548:	231d      	movs	r3, #29
}
   1254a:	0018      	movs	r0, r3
   1254c:	46bd      	mov	sp, r7
   1254e:	b004      	add	sp, #16
   12550:	bd80      	pop	{r7, pc}
   12552:	46c0      	nop			; (mov r8, r8)
   12554:	200000fc 	.word	0x200000fc
   12558:	000121a5 	.word	0x000121a5
   1255c:	00015261 	.word	0x00015261
   12560:	000152a5 	.word	0x000152a5

00012564 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   12564:	b580      	push	{r7, lr}
   12566:	b082      	sub	sp, #8
   12568:	af00      	add	r7, sp, #0
   1256a:	6078      	str	r0, [r7, #4]
   1256c:	000a      	movs	r2, r1
   1256e:	1cfb      	adds	r3, r7, #3
   12570:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   12572:	687b      	ldr	r3, [r7, #4]
   12574:	4a4d      	ldr	r2, [pc, #308]	; (126ac <_sercom_get_default_pad+0x148>)
   12576:	4293      	cmp	r3, r2
   12578:	d03f      	beq.n	125fa <_sercom_get_default_pad+0x96>
   1257a:	4a4c      	ldr	r2, [pc, #304]	; (126ac <_sercom_get_default_pad+0x148>)
   1257c:	4293      	cmp	r3, r2
   1257e:	d806      	bhi.n	1258e <_sercom_get_default_pad+0x2a>
   12580:	4a4b      	ldr	r2, [pc, #300]	; (126b0 <_sercom_get_default_pad+0x14c>)
   12582:	4293      	cmp	r3, r2
   12584:	d00f      	beq.n	125a6 <_sercom_get_default_pad+0x42>
   12586:	4a4b      	ldr	r2, [pc, #300]	; (126b4 <_sercom_get_default_pad+0x150>)
   12588:	4293      	cmp	r3, r2
   1258a:	d021      	beq.n	125d0 <_sercom_get_default_pad+0x6c>
   1258c:	e089      	b.n	126a2 <_sercom_get_default_pad+0x13e>
   1258e:	4a4a      	ldr	r2, [pc, #296]	; (126b8 <_sercom_get_default_pad+0x154>)
   12590:	4293      	cmp	r3, r2
   12592:	d100      	bne.n	12596 <_sercom_get_default_pad+0x32>
   12594:	e05b      	b.n	1264e <_sercom_get_default_pad+0xea>
   12596:	4a49      	ldr	r2, [pc, #292]	; (126bc <_sercom_get_default_pad+0x158>)
   12598:	4293      	cmp	r3, r2
   1259a:	d100      	bne.n	1259e <_sercom_get_default_pad+0x3a>
   1259c:	e06c      	b.n	12678 <_sercom_get_default_pad+0x114>
   1259e:	4a48      	ldr	r2, [pc, #288]	; (126c0 <_sercom_get_default_pad+0x15c>)
   125a0:	4293      	cmp	r3, r2
   125a2:	d03f      	beq.n	12624 <_sercom_get_default_pad+0xc0>
   125a4:	e07d      	b.n	126a2 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   125a6:	1cfb      	adds	r3, r7, #3
   125a8:	781b      	ldrb	r3, [r3, #0]
   125aa:	2b01      	cmp	r3, #1
   125ac:	d00a      	beq.n	125c4 <_sercom_get_default_pad+0x60>
   125ae:	dc02      	bgt.n	125b6 <_sercom_get_default_pad+0x52>
   125b0:	2b00      	cmp	r3, #0
   125b2:	d005      	beq.n	125c0 <_sercom_get_default_pad+0x5c>
   125b4:	e075      	b.n	126a2 <_sercom_get_default_pad+0x13e>
   125b6:	2b02      	cmp	r3, #2
   125b8:	d006      	beq.n	125c8 <_sercom_get_default_pad+0x64>
   125ba:	2b03      	cmp	r3, #3
   125bc:	d006      	beq.n	125cc <_sercom_get_default_pad+0x68>
   125be:	e070      	b.n	126a2 <_sercom_get_default_pad+0x13e>
   125c0:	4b40      	ldr	r3, [pc, #256]	; (126c4 <_sercom_get_default_pad+0x160>)
   125c2:	e06f      	b.n	126a4 <_sercom_get_default_pad+0x140>
   125c4:	4b40      	ldr	r3, [pc, #256]	; (126c8 <_sercom_get_default_pad+0x164>)
   125c6:	e06d      	b.n	126a4 <_sercom_get_default_pad+0x140>
   125c8:	4b40      	ldr	r3, [pc, #256]	; (126cc <_sercom_get_default_pad+0x168>)
   125ca:	e06b      	b.n	126a4 <_sercom_get_default_pad+0x140>
   125cc:	4b40      	ldr	r3, [pc, #256]	; (126d0 <_sercom_get_default_pad+0x16c>)
   125ce:	e069      	b.n	126a4 <_sercom_get_default_pad+0x140>
   125d0:	1cfb      	adds	r3, r7, #3
   125d2:	781b      	ldrb	r3, [r3, #0]
   125d4:	2b01      	cmp	r3, #1
   125d6:	d00a      	beq.n	125ee <_sercom_get_default_pad+0x8a>
   125d8:	dc02      	bgt.n	125e0 <_sercom_get_default_pad+0x7c>
   125da:	2b00      	cmp	r3, #0
   125dc:	d005      	beq.n	125ea <_sercom_get_default_pad+0x86>
   125de:	e060      	b.n	126a2 <_sercom_get_default_pad+0x13e>
   125e0:	2b02      	cmp	r3, #2
   125e2:	d006      	beq.n	125f2 <_sercom_get_default_pad+0x8e>
   125e4:	2b03      	cmp	r3, #3
   125e6:	d006      	beq.n	125f6 <_sercom_get_default_pad+0x92>
   125e8:	e05b      	b.n	126a2 <_sercom_get_default_pad+0x13e>
   125ea:	2303      	movs	r3, #3
   125ec:	e05a      	b.n	126a4 <_sercom_get_default_pad+0x140>
   125ee:	4b39      	ldr	r3, [pc, #228]	; (126d4 <_sercom_get_default_pad+0x170>)
   125f0:	e058      	b.n	126a4 <_sercom_get_default_pad+0x140>
   125f2:	4b39      	ldr	r3, [pc, #228]	; (126d8 <_sercom_get_default_pad+0x174>)
   125f4:	e056      	b.n	126a4 <_sercom_get_default_pad+0x140>
   125f6:	4b39      	ldr	r3, [pc, #228]	; (126dc <_sercom_get_default_pad+0x178>)
   125f8:	e054      	b.n	126a4 <_sercom_get_default_pad+0x140>
   125fa:	1cfb      	adds	r3, r7, #3
   125fc:	781b      	ldrb	r3, [r3, #0]
   125fe:	2b01      	cmp	r3, #1
   12600:	d00a      	beq.n	12618 <_sercom_get_default_pad+0xb4>
   12602:	dc02      	bgt.n	1260a <_sercom_get_default_pad+0xa6>
   12604:	2b00      	cmp	r3, #0
   12606:	d005      	beq.n	12614 <_sercom_get_default_pad+0xb0>
   12608:	e04b      	b.n	126a2 <_sercom_get_default_pad+0x13e>
   1260a:	2b02      	cmp	r3, #2
   1260c:	d006      	beq.n	1261c <_sercom_get_default_pad+0xb8>
   1260e:	2b03      	cmp	r3, #3
   12610:	d006      	beq.n	12620 <_sercom_get_default_pad+0xbc>
   12612:	e046      	b.n	126a2 <_sercom_get_default_pad+0x13e>
   12614:	4b32      	ldr	r3, [pc, #200]	; (126e0 <_sercom_get_default_pad+0x17c>)
   12616:	e045      	b.n	126a4 <_sercom_get_default_pad+0x140>
   12618:	4b32      	ldr	r3, [pc, #200]	; (126e4 <_sercom_get_default_pad+0x180>)
   1261a:	e043      	b.n	126a4 <_sercom_get_default_pad+0x140>
   1261c:	4b32      	ldr	r3, [pc, #200]	; (126e8 <_sercom_get_default_pad+0x184>)
   1261e:	e041      	b.n	126a4 <_sercom_get_default_pad+0x140>
   12620:	4b32      	ldr	r3, [pc, #200]	; (126ec <_sercom_get_default_pad+0x188>)
   12622:	e03f      	b.n	126a4 <_sercom_get_default_pad+0x140>
   12624:	1cfb      	adds	r3, r7, #3
   12626:	781b      	ldrb	r3, [r3, #0]
   12628:	2b01      	cmp	r3, #1
   1262a:	d00a      	beq.n	12642 <_sercom_get_default_pad+0xde>
   1262c:	dc02      	bgt.n	12634 <_sercom_get_default_pad+0xd0>
   1262e:	2b00      	cmp	r3, #0
   12630:	d005      	beq.n	1263e <_sercom_get_default_pad+0xda>
   12632:	e036      	b.n	126a2 <_sercom_get_default_pad+0x13e>
   12634:	2b02      	cmp	r3, #2
   12636:	d006      	beq.n	12646 <_sercom_get_default_pad+0xe2>
   12638:	2b03      	cmp	r3, #3
   1263a:	d006      	beq.n	1264a <_sercom_get_default_pad+0xe6>
   1263c:	e031      	b.n	126a2 <_sercom_get_default_pad+0x13e>
   1263e:	4b2c      	ldr	r3, [pc, #176]	; (126f0 <_sercom_get_default_pad+0x18c>)
   12640:	e030      	b.n	126a4 <_sercom_get_default_pad+0x140>
   12642:	4b2c      	ldr	r3, [pc, #176]	; (126f4 <_sercom_get_default_pad+0x190>)
   12644:	e02e      	b.n	126a4 <_sercom_get_default_pad+0x140>
   12646:	4b2c      	ldr	r3, [pc, #176]	; (126f8 <_sercom_get_default_pad+0x194>)
   12648:	e02c      	b.n	126a4 <_sercom_get_default_pad+0x140>
   1264a:	4b2c      	ldr	r3, [pc, #176]	; (126fc <_sercom_get_default_pad+0x198>)
   1264c:	e02a      	b.n	126a4 <_sercom_get_default_pad+0x140>
   1264e:	1cfb      	adds	r3, r7, #3
   12650:	781b      	ldrb	r3, [r3, #0]
   12652:	2b01      	cmp	r3, #1
   12654:	d00a      	beq.n	1266c <_sercom_get_default_pad+0x108>
   12656:	dc02      	bgt.n	1265e <_sercom_get_default_pad+0xfa>
   12658:	2b00      	cmp	r3, #0
   1265a:	d005      	beq.n	12668 <_sercom_get_default_pad+0x104>
   1265c:	e021      	b.n	126a2 <_sercom_get_default_pad+0x13e>
   1265e:	2b02      	cmp	r3, #2
   12660:	d006      	beq.n	12670 <_sercom_get_default_pad+0x10c>
   12662:	2b03      	cmp	r3, #3
   12664:	d006      	beq.n	12674 <_sercom_get_default_pad+0x110>
   12666:	e01c      	b.n	126a2 <_sercom_get_default_pad+0x13e>
   12668:	4b25      	ldr	r3, [pc, #148]	; (12700 <_sercom_get_default_pad+0x19c>)
   1266a:	e01b      	b.n	126a4 <_sercom_get_default_pad+0x140>
   1266c:	4b25      	ldr	r3, [pc, #148]	; (12704 <_sercom_get_default_pad+0x1a0>)
   1266e:	e019      	b.n	126a4 <_sercom_get_default_pad+0x140>
   12670:	4b25      	ldr	r3, [pc, #148]	; (12708 <_sercom_get_default_pad+0x1a4>)
   12672:	e017      	b.n	126a4 <_sercom_get_default_pad+0x140>
   12674:	4b25      	ldr	r3, [pc, #148]	; (1270c <_sercom_get_default_pad+0x1a8>)
   12676:	e015      	b.n	126a4 <_sercom_get_default_pad+0x140>
   12678:	1cfb      	adds	r3, r7, #3
   1267a:	781b      	ldrb	r3, [r3, #0]
   1267c:	2b01      	cmp	r3, #1
   1267e:	d00a      	beq.n	12696 <_sercom_get_default_pad+0x132>
   12680:	dc02      	bgt.n	12688 <_sercom_get_default_pad+0x124>
   12682:	2b00      	cmp	r3, #0
   12684:	d005      	beq.n	12692 <_sercom_get_default_pad+0x12e>
   12686:	e00c      	b.n	126a2 <_sercom_get_default_pad+0x13e>
   12688:	2b02      	cmp	r3, #2
   1268a:	d006      	beq.n	1269a <_sercom_get_default_pad+0x136>
   1268c:	2b03      	cmp	r3, #3
   1268e:	d006      	beq.n	1269e <_sercom_get_default_pad+0x13a>
   12690:	e007      	b.n	126a2 <_sercom_get_default_pad+0x13e>
   12692:	4b1f      	ldr	r3, [pc, #124]	; (12710 <_sercom_get_default_pad+0x1ac>)
   12694:	e006      	b.n	126a4 <_sercom_get_default_pad+0x140>
   12696:	4b1f      	ldr	r3, [pc, #124]	; (12714 <_sercom_get_default_pad+0x1b0>)
   12698:	e004      	b.n	126a4 <_sercom_get_default_pad+0x140>
   1269a:	4b1f      	ldr	r3, [pc, #124]	; (12718 <_sercom_get_default_pad+0x1b4>)
   1269c:	e002      	b.n	126a4 <_sercom_get_default_pad+0x140>
   1269e:	4b1f      	ldr	r3, [pc, #124]	; (1271c <_sercom_get_default_pad+0x1b8>)
   126a0:	e000      	b.n	126a4 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   126a2:	2300      	movs	r3, #0
}
   126a4:	0018      	movs	r0, r3
   126a6:	46bd      	mov	sp, r7
   126a8:	b002      	add	sp, #8
   126aa:	bd80      	pop	{r7, pc}
   126ac:	42001000 	.word	0x42001000
   126b0:	42000800 	.word	0x42000800
   126b4:	42000c00 	.word	0x42000c00
   126b8:	42001800 	.word	0x42001800
   126bc:	42001c00 	.word	0x42001c00
   126c0:	42001400 	.word	0x42001400
   126c4:	00040003 	.word	0x00040003
   126c8:	00050003 	.word	0x00050003
   126cc:	00060003 	.word	0x00060003
   126d0:	00070003 	.word	0x00070003
   126d4:	00010003 	.word	0x00010003
   126d8:	001e0003 	.word	0x001e0003
   126dc:	001f0003 	.word	0x001f0003
   126e0:	00080003 	.word	0x00080003
   126e4:	00090003 	.word	0x00090003
   126e8:	000a0003 	.word	0x000a0003
   126ec:	000b0003 	.word	0x000b0003
   126f0:	00100003 	.word	0x00100003
   126f4:	00110003 	.word	0x00110003
   126f8:	00120003 	.word	0x00120003
   126fc:	00130003 	.word	0x00130003
   12700:	000c0003 	.word	0x000c0003
   12704:	000d0003 	.word	0x000d0003
   12708:	000e0003 	.word	0x000e0003
   1270c:	000f0003 	.word	0x000f0003
   12710:	00160003 	.word	0x00160003
   12714:	00170003 	.word	0x00170003
   12718:	00180003 	.word	0x00180003
   1271c:	00190003 	.word	0x00190003

00012720 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   12720:	b590      	push	{r4, r7, lr}
   12722:	b08b      	sub	sp, #44	; 0x2c
   12724:	af00      	add	r7, sp, #0
   12726:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   12728:	230c      	movs	r3, #12
   1272a:	18fb      	adds	r3, r7, r3
   1272c:	4a0f      	ldr	r2, [pc, #60]	; (1276c <_sercom_get_sercom_inst_index+0x4c>)
   1272e:	ca13      	ldmia	r2!, {r0, r1, r4}
   12730:	c313      	stmia	r3!, {r0, r1, r4}
   12732:	ca13      	ldmia	r2!, {r0, r1, r4}
   12734:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   12736:	2300      	movs	r3, #0
   12738:	627b      	str	r3, [r7, #36]	; 0x24
   1273a:	e00e      	b.n	1275a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   1273c:	230c      	movs	r3, #12
   1273e:	18fb      	adds	r3, r7, r3
   12740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12742:	0092      	lsls	r2, r2, #2
   12744:	58d3      	ldr	r3, [r2, r3]
   12746:	1e1a      	subs	r2, r3, #0
   12748:	687b      	ldr	r3, [r7, #4]
   1274a:	429a      	cmp	r2, r3
   1274c:	d102      	bne.n	12754 <_sercom_get_sercom_inst_index+0x34>
			return i;
   1274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12750:	b2db      	uxtb	r3, r3
   12752:	e006      	b.n	12762 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   12754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12756:	3301      	adds	r3, #1
   12758:	627b      	str	r3, [r7, #36]	; 0x24
   1275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1275c:	2b05      	cmp	r3, #5
   1275e:	d9ed      	bls.n	1273c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   12760:	2300      	movs	r3, #0
}
   12762:	0018      	movs	r0, r3
   12764:	46bd      	mov	sp, r7
   12766:	b00b      	add	sp, #44	; 0x2c
   12768:	bd90      	pop	{r4, r7, pc}
   1276a:	46c0      	nop			; (mov r8, r8)
   1276c:	0001af7c 	.word	0x0001af7c

00012770 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   12770:	b580      	push	{r7, lr}
   12772:	b082      	sub	sp, #8
   12774:	af00      	add	r7, sp, #0
   12776:	0002      	movs	r2, r0
   12778:	1dfb      	adds	r3, r7, #7
   1277a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   1277c:	46c0      	nop			; (mov r8, r8)
   1277e:	46bd      	mov	sp, r7
   12780:	b002      	add	sp, #8
   12782:	bd80      	pop	{r7, pc}

00012784 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   12784:	b580      	push	{r7, lr}
   12786:	b084      	sub	sp, #16
   12788:	af00      	add	r7, sp, #0
   1278a:	0002      	movs	r2, r0
   1278c:	6039      	str	r1, [r7, #0]
   1278e:	1dfb      	adds	r3, r7, #7
   12790:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   12792:	4b13      	ldr	r3, [pc, #76]	; (127e0 <_sercom_set_handler+0x5c>)
   12794:	781b      	ldrb	r3, [r3, #0]
   12796:	2201      	movs	r2, #1
   12798:	4053      	eors	r3, r2
   1279a:	b2db      	uxtb	r3, r3
   1279c:	2b00      	cmp	r3, #0
   1279e:	d015      	beq.n	127cc <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   127a0:	2300      	movs	r3, #0
   127a2:	60fb      	str	r3, [r7, #12]
   127a4:	e00c      	b.n	127c0 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   127a6:	4b0f      	ldr	r3, [pc, #60]	; (127e4 <_sercom_set_handler+0x60>)
   127a8:	68fa      	ldr	r2, [r7, #12]
   127aa:	0092      	lsls	r2, r2, #2
   127ac:	490e      	ldr	r1, [pc, #56]	; (127e8 <_sercom_set_handler+0x64>)
   127ae:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   127b0:	4b0e      	ldr	r3, [pc, #56]	; (127ec <_sercom_set_handler+0x68>)
   127b2:	68fa      	ldr	r2, [r7, #12]
   127b4:	0092      	lsls	r2, r2, #2
   127b6:	2100      	movs	r1, #0
   127b8:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   127ba:	68fb      	ldr	r3, [r7, #12]
   127bc:	3301      	adds	r3, #1
   127be:	60fb      	str	r3, [r7, #12]
   127c0:	68fb      	ldr	r3, [r7, #12]
   127c2:	2b05      	cmp	r3, #5
   127c4:	d9ef      	bls.n	127a6 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
   127c6:	4b06      	ldr	r3, [pc, #24]	; (127e0 <_sercom_set_handler+0x5c>)
   127c8:	2201      	movs	r2, #1
   127ca:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   127cc:	1dfb      	adds	r3, r7, #7
   127ce:	781a      	ldrb	r2, [r3, #0]
   127d0:	4b04      	ldr	r3, [pc, #16]	; (127e4 <_sercom_set_handler+0x60>)
   127d2:	0092      	lsls	r2, r2, #2
   127d4:	6839      	ldr	r1, [r7, #0]
   127d6:	50d1      	str	r1, [r2, r3]
}
   127d8:	46c0      	nop			; (mov r8, r8)
   127da:	46bd      	mov	sp, r7
   127dc:	b004      	add	sp, #16
   127de:	bd80      	pop	{r7, pc}
   127e0:	200000fe 	.word	0x200000fe
   127e4:	20000100 	.word	0x20000100
   127e8:	00012771 	.word	0x00012771
   127ec:	2000045c 	.word	0x2000045c

000127f0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   127f0:	b590      	push	{r4, r7, lr}
   127f2:	b085      	sub	sp, #20
   127f4:	af00      	add	r7, sp, #0
   127f6:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   127f8:	2308      	movs	r3, #8
   127fa:	18fa      	adds	r2, r7, r3
   127fc:	4b0c      	ldr	r3, [pc, #48]	; (12830 <_sercom_get_interrupt_vector+0x40>)
   127fe:	0010      	movs	r0, r2
   12800:	0019      	movs	r1, r3
   12802:	2306      	movs	r3, #6
   12804:	001a      	movs	r2, r3
   12806:	4b0b      	ldr	r3, [pc, #44]	; (12834 <_sercom_get_interrupt_vector+0x44>)
   12808:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   1280a:	230f      	movs	r3, #15
   1280c:	18fc      	adds	r4, r7, r3
   1280e:	687b      	ldr	r3, [r7, #4]
   12810:	0018      	movs	r0, r3
   12812:	4b09      	ldr	r3, [pc, #36]	; (12838 <_sercom_get_interrupt_vector+0x48>)
   12814:	4798      	blx	r3
   12816:	0003      	movs	r3, r0
   12818:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   1281a:	230f      	movs	r3, #15
   1281c:	18fb      	adds	r3, r7, r3
   1281e:	781b      	ldrb	r3, [r3, #0]
   12820:	2208      	movs	r2, #8
   12822:	18ba      	adds	r2, r7, r2
   12824:	5cd3      	ldrb	r3, [r2, r3]
   12826:	b25b      	sxtb	r3, r3
}
   12828:	0018      	movs	r0, r3
   1282a:	46bd      	mov	sp, r7
   1282c:	b005      	add	sp, #20
   1282e:	bd90      	pop	{r4, r7, pc}
   12830:	0001af94 	.word	0x0001af94
   12834:	00018495 	.word	0x00018495
   12838:	00012721 	.word	0x00012721

0001283c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   1283c:	b580      	push	{r7, lr}
   1283e:	af00      	add	r7, sp, #0
   12840:	4b03      	ldr	r3, [pc, #12]	; (12850 <SERCOM0_Handler+0x14>)
   12842:	681b      	ldr	r3, [r3, #0]
   12844:	2000      	movs	r0, #0
   12846:	4798      	blx	r3
   12848:	46c0      	nop			; (mov r8, r8)
   1284a:	46bd      	mov	sp, r7
   1284c:	bd80      	pop	{r7, pc}
   1284e:	46c0      	nop			; (mov r8, r8)
   12850:	20000100 	.word	0x20000100

00012854 <SERCOM1_Handler>:
   12854:	b580      	push	{r7, lr}
   12856:	af00      	add	r7, sp, #0
   12858:	4b03      	ldr	r3, [pc, #12]	; (12868 <SERCOM1_Handler+0x14>)
   1285a:	685b      	ldr	r3, [r3, #4]
   1285c:	2001      	movs	r0, #1
   1285e:	4798      	blx	r3
   12860:	46c0      	nop			; (mov r8, r8)
   12862:	46bd      	mov	sp, r7
   12864:	bd80      	pop	{r7, pc}
   12866:	46c0      	nop			; (mov r8, r8)
   12868:	20000100 	.word	0x20000100

0001286c <SERCOM2_Handler>:
   1286c:	b580      	push	{r7, lr}
   1286e:	af00      	add	r7, sp, #0
   12870:	4b03      	ldr	r3, [pc, #12]	; (12880 <SERCOM2_Handler+0x14>)
   12872:	689b      	ldr	r3, [r3, #8]
   12874:	2002      	movs	r0, #2
   12876:	4798      	blx	r3
   12878:	46c0      	nop			; (mov r8, r8)
   1287a:	46bd      	mov	sp, r7
   1287c:	bd80      	pop	{r7, pc}
   1287e:	46c0      	nop			; (mov r8, r8)
   12880:	20000100 	.word	0x20000100

00012884 <SERCOM3_Handler>:
   12884:	b580      	push	{r7, lr}
   12886:	af00      	add	r7, sp, #0
   12888:	4b03      	ldr	r3, [pc, #12]	; (12898 <SERCOM3_Handler+0x14>)
   1288a:	68db      	ldr	r3, [r3, #12]
   1288c:	2003      	movs	r0, #3
   1288e:	4798      	blx	r3
   12890:	46c0      	nop			; (mov r8, r8)
   12892:	46bd      	mov	sp, r7
   12894:	bd80      	pop	{r7, pc}
   12896:	46c0      	nop			; (mov r8, r8)
   12898:	20000100 	.word	0x20000100

0001289c <SERCOM4_Handler>:
   1289c:	b580      	push	{r7, lr}
   1289e:	af00      	add	r7, sp, #0
   128a0:	4b03      	ldr	r3, [pc, #12]	; (128b0 <SERCOM4_Handler+0x14>)
   128a2:	691b      	ldr	r3, [r3, #16]
   128a4:	2004      	movs	r0, #4
   128a6:	4798      	blx	r3
   128a8:	46c0      	nop			; (mov r8, r8)
   128aa:	46bd      	mov	sp, r7
   128ac:	bd80      	pop	{r7, pc}
   128ae:	46c0      	nop			; (mov r8, r8)
   128b0:	20000100 	.word	0x20000100

000128b4 <SERCOM5_Handler>:
   128b4:	b580      	push	{r7, lr}
   128b6:	af00      	add	r7, sp, #0
   128b8:	4b03      	ldr	r3, [pc, #12]	; (128c8 <SERCOM5_Handler+0x14>)
   128ba:	695b      	ldr	r3, [r3, #20]
   128bc:	2005      	movs	r0, #5
   128be:	4798      	blx	r3
   128c0:	46c0      	nop			; (mov r8, r8)
   128c2:	46bd      	mov	sp, r7
   128c4:	bd80      	pop	{r7, pc}
   128c6:	46c0      	nop			; (mov r8, r8)
   128c8:	20000100 	.word	0x20000100

000128cc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   128cc:	b580      	push	{r7, lr}
   128ce:	b082      	sub	sp, #8
   128d0:	af00      	add	r7, sp, #0
   128d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   128d4:	687b      	ldr	r3, [r7, #4]
   128d6:	2280      	movs	r2, #128	; 0x80
   128d8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   128da:	687b      	ldr	r3, [r7, #4]
   128dc:	2200      	movs	r2, #0
   128de:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   128e0:	687b      	ldr	r3, [r7, #4]
   128e2:	2201      	movs	r2, #1
   128e4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   128e6:	687b      	ldr	r3, [r7, #4]
   128e8:	2200      	movs	r2, #0
   128ea:	70da      	strb	r2, [r3, #3]
}
   128ec:	46c0      	nop			; (mov r8, r8)
   128ee:	46bd      	mov	sp, r7
   128f0:	b002      	add	sp, #8
   128f2:	bd80      	pop	{r7, pc}

000128f4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   128f4:	b580      	push	{r7, lr}
   128f6:	b084      	sub	sp, #16
   128f8:	af00      	add	r7, sp, #0
   128fa:	0002      	movs	r2, r0
   128fc:	1dfb      	adds	r3, r7, #7
   128fe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   12900:	230f      	movs	r3, #15
   12902:	18fb      	adds	r3, r7, r3
   12904:	1dfa      	adds	r2, r7, #7
   12906:	7812      	ldrb	r2, [r2, #0]
   12908:	09d2      	lsrs	r2, r2, #7
   1290a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1290c:	230e      	movs	r3, #14
   1290e:	18fb      	adds	r3, r7, r3
   12910:	1dfa      	adds	r2, r7, #7
   12912:	7812      	ldrb	r2, [r2, #0]
   12914:	0952      	lsrs	r2, r2, #5
   12916:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   12918:	4b0d      	ldr	r3, [pc, #52]	; (12950 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1291a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   1291c:	230f      	movs	r3, #15
   1291e:	18fb      	adds	r3, r7, r3
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b00      	cmp	r3, #0
   12924:	d10f      	bne.n	12946 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   12926:	230f      	movs	r3, #15
   12928:	18fb      	adds	r3, r7, r3
   1292a:	781b      	ldrb	r3, [r3, #0]
   1292c:	009b      	lsls	r3, r3, #2
   1292e:	2210      	movs	r2, #16
   12930:	4694      	mov	ip, r2
   12932:	44bc      	add	ip, r7
   12934:	4463      	add	r3, ip
   12936:	3b08      	subs	r3, #8
   12938:	681a      	ldr	r2, [r3, #0]
   1293a:	230e      	movs	r3, #14
   1293c:	18fb      	adds	r3, r7, r3
   1293e:	781b      	ldrb	r3, [r3, #0]
   12940:	01db      	lsls	r3, r3, #7
   12942:	18d3      	adds	r3, r2, r3
   12944:	e000      	b.n	12948 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   12946:	2300      	movs	r3, #0
	}
}
   12948:	0018      	movs	r0, r3
   1294a:	46bd      	mov	sp, r7
   1294c:	b004      	add	sp, #16
   1294e:	bd80      	pop	{r7, pc}
   12950:	41004400 	.word	0x41004400

00012954 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   12954:	b580      	push	{r7, lr}
   12956:	b082      	sub	sp, #8
   12958:	af00      	add	r7, sp, #0
   1295a:	0002      	movs	r2, r0
   1295c:	1dfb      	adds	r3, r7, #7
   1295e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   12960:	1dfb      	adds	r3, r7, #7
   12962:	781b      	ldrb	r3, [r3, #0]
   12964:	0018      	movs	r0, r3
   12966:	4b03      	ldr	r3, [pc, #12]	; (12974 <port_get_group_from_gpio_pin+0x20>)
   12968:	4798      	blx	r3
   1296a:	0003      	movs	r3, r0
}
   1296c:	0018      	movs	r0, r3
   1296e:	46bd      	mov	sp, r7
   12970:	b002      	add	sp, #8
   12972:	bd80      	pop	{r7, pc}
   12974:	000128f5 	.word	0x000128f5

00012978 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   12978:	b580      	push	{r7, lr}
   1297a:	b084      	sub	sp, #16
   1297c:	af00      	add	r7, sp, #0
   1297e:	0002      	movs	r2, r0
   12980:	1dfb      	adds	r3, r7, #7
   12982:	701a      	strb	r2, [r3, #0]
   12984:	1dbb      	adds	r3, r7, #6
   12986:	1c0a      	adds	r2, r1, #0
   12988:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1298a:	1dfb      	adds	r3, r7, #7
   1298c:	781b      	ldrb	r3, [r3, #0]
   1298e:	0018      	movs	r0, r3
   12990:	4b0d      	ldr	r3, [pc, #52]	; (129c8 <port_pin_set_output_level+0x50>)
   12992:	4798      	blx	r3
   12994:	0003      	movs	r3, r0
   12996:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12998:	1dfb      	adds	r3, r7, #7
   1299a:	781b      	ldrb	r3, [r3, #0]
   1299c:	221f      	movs	r2, #31
   1299e:	4013      	ands	r3, r2
   129a0:	2201      	movs	r2, #1
   129a2:	409a      	lsls	r2, r3
   129a4:	0013      	movs	r3, r2
   129a6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   129a8:	1dbb      	adds	r3, r7, #6
   129aa:	781b      	ldrb	r3, [r3, #0]
   129ac:	2b00      	cmp	r3, #0
   129ae:	d003      	beq.n	129b8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   129b0:	68fb      	ldr	r3, [r7, #12]
   129b2:	68ba      	ldr	r2, [r7, #8]
   129b4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   129b6:	e002      	b.n	129be <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
   129b8:	68fb      	ldr	r3, [r7, #12]
   129ba:	68ba      	ldr	r2, [r7, #8]
   129bc:	615a      	str	r2, [r3, #20]
	}
}
   129be:	46c0      	nop			; (mov r8, r8)
   129c0:	46bd      	mov	sp, r7
   129c2:	b004      	add	sp, #16
   129c4:	bd80      	pop	{r7, pc}
   129c6:	46c0      	nop			; (mov r8, r8)
   129c8:	00012955 	.word	0x00012955

000129cc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   129cc:	b580      	push	{r7, lr}
   129ce:	b082      	sub	sp, #8
   129d0:	af00      	add	r7, sp, #0
   129d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   129d4:	687b      	ldr	r3, [r7, #4]
   129d6:	2200      	movs	r2, #0
   129d8:	701a      	strb	r2, [r3, #0]
}
   129da:	46c0      	nop			; (mov r8, r8)
   129dc:	46bd      	mov	sp, r7
   129de:	b002      	add	sp, #8
   129e0:	bd80      	pop	{r7, pc}
   129e2:	46c0      	nop			; (mov r8, r8)

000129e4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   129e4:	b580      	push	{r7, lr}
   129e6:	b082      	sub	sp, #8
   129e8:	af00      	add	r7, sp, #0
   129ea:	0002      	movs	r2, r0
   129ec:	6039      	str	r1, [r7, #0]
   129ee:	1dfb      	adds	r3, r7, #7
   129f0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   129f2:	1dfb      	adds	r3, r7, #7
   129f4:	781b      	ldrb	r3, [r3, #0]
   129f6:	2b01      	cmp	r3, #1
   129f8:	d00a      	beq.n	12a10 <system_apb_clock_set_mask+0x2c>
   129fa:	2b02      	cmp	r3, #2
   129fc:	d00f      	beq.n	12a1e <system_apb_clock_set_mask+0x3a>
   129fe:	2b00      	cmp	r3, #0
   12a00:	d114      	bne.n	12a2c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   12a02:	4b0e      	ldr	r3, [pc, #56]	; (12a3c <system_apb_clock_set_mask+0x58>)
   12a04:	4a0d      	ldr	r2, [pc, #52]	; (12a3c <system_apb_clock_set_mask+0x58>)
   12a06:	6991      	ldr	r1, [r2, #24]
   12a08:	683a      	ldr	r2, [r7, #0]
   12a0a:	430a      	orrs	r2, r1
   12a0c:	619a      	str	r2, [r3, #24]
			break;
   12a0e:	e00f      	b.n	12a30 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12a10:	4b0a      	ldr	r3, [pc, #40]	; (12a3c <system_apb_clock_set_mask+0x58>)
   12a12:	4a0a      	ldr	r2, [pc, #40]	; (12a3c <system_apb_clock_set_mask+0x58>)
   12a14:	69d1      	ldr	r1, [r2, #28]
   12a16:	683a      	ldr	r2, [r7, #0]
   12a18:	430a      	orrs	r2, r1
   12a1a:	61da      	str	r2, [r3, #28]
			break;
   12a1c:	e008      	b.n	12a30 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12a1e:	4b07      	ldr	r3, [pc, #28]	; (12a3c <system_apb_clock_set_mask+0x58>)
   12a20:	4a06      	ldr	r2, [pc, #24]	; (12a3c <system_apb_clock_set_mask+0x58>)
   12a22:	6a11      	ldr	r1, [r2, #32]
   12a24:	683a      	ldr	r2, [r7, #0]
   12a26:	430a      	orrs	r2, r1
   12a28:	621a      	str	r2, [r3, #32]
			break;
   12a2a:	e001      	b.n	12a30 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12a2c:	2317      	movs	r3, #23
   12a2e:	e000      	b.n	12a32 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12a30:	2300      	movs	r3, #0
}
   12a32:	0018      	movs	r0, r3
   12a34:	46bd      	mov	sp, r7
   12a36:	b002      	add	sp, #8
   12a38:	bd80      	pop	{r7, pc}
   12a3a:	46c0      	nop			; (mov r8, r8)
   12a3c:	40000400 	.word	0x40000400

00012a40 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   12a40:	b580      	push	{r7, lr}
   12a42:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   12a44:	4b05      	ldr	r3, [pc, #20]	; (12a5c <system_is_debugger_present+0x1c>)
   12a46:	789b      	ldrb	r3, [r3, #2]
   12a48:	b2db      	uxtb	r3, r3
   12a4a:	001a      	movs	r2, r3
   12a4c:	2302      	movs	r3, #2
   12a4e:	4013      	ands	r3, r2
   12a50:	1e5a      	subs	r2, r3, #1
   12a52:	4193      	sbcs	r3, r2
   12a54:	b2db      	uxtb	r3, r3
}
   12a56:	0018      	movs	r0, r3
   12a58:	46bd      	mov	sp, r7
   12a5a:	bd80      	pop	{r7, pc}
   12a5c:	41002000 	.word	0x41002000

00012a60 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   12a60:	b580      	push	{r7, lr}
   12a62:	b084      	sub	sp, #16
   12a64:	af00      	add	r7, sp, #0
   12a66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12a68:	687b      	ldr	r3, [r7, #4]
   12a6a:	681b      	ldr	r3, [r3, #0]
   12a6c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   12a6e:	68fb      	ldr	r3, [r7, #12]
   12a70:	7e1b      	ldrb	r3, [r3, #24]
   12a72:	b2db      	uxtb	r3, r3
   12a74:	001a      	movs	r2, r3
   12a76:	2302      	movs	r3, #2
   12a78:	4013      	ands	r3, r2
   12a7a:	1e5a      	subs	r2, r3, #1
   12a7c:	4193      	sbcs	r3, r2
   12a7e:	b2db      	uxtb	r3, r3
}
   12a80:	0018      	movs	r0, r3
   12a82:	46bd      	mov	sp, r7
   12a84:	b004      	add	sp, #16
   12a86:	bd80      	pop	{r7, pc}

00012a88 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   12a88:	b580      	push	{r7, lr}
   12a8a:	b084      	sub	sp, #16
   12a8c:	af00      	add	r7, sp, #0
   12a8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12a90:	687b      	ldr	r3, [r7, #4]
   12a92:	681b      	ldr	r3, [r3, #0]
   12a94:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   12a96:	68fb      	ldr	r3, [r7, #12]
   12a98:	7e1b      	ldrb	r3, [r3, #24]
   12a9a:	b2db      	uxtb	r3, r3
   12a9c:	001a      	movs	r2, r3
   12a9e:	2301      	movs	r3, #1
   12aa0:	4013      	ands	r3, r2
   12aa2:	1e5a      	subs	r2, r3, #1
   12aa4:	4193      	sbcs	r3, r2
   12aa6:	b2db      	uxtb	r3, r3
}
   12aa8:	0018      	movs	r0, r3
   12aaa:	46bd      	mov	sp, r7
   12aac:	b004      	add	sp, #16
   12aae:	bd80      	pop	{r7, pc}

00012ab0 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   12ab0:	b580      	push	{r7, lr}
   12ab2:	b084      	sub	sp, #16
   12ab4:	af00      	add	r7, sp, #0
   12ab6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12ab8:	687b      	ldr	r3, [r7, #4]
   12aba:	681b      	ldr	r3, [r3, #0]
   12abc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   12abe:	68fb      	ldr	r3, [r7, #12]
   12ac0:	7e1b      	ldrb	r3, [r3, #24]
   12ac2:	b2db      	uxtb	r3, r3
   12ac4:	001a      	movs	r2, r3
   12ac6:	2304      	movs	r3, #4
   12ac8:	4013      	ands	r3, r2
   12aca:	1e5a      	subs	r2, r3, #1
   12acc:	4193      	sbcs	r3, r2
   12ace:	b2db      	uxtb	r3, r3
}
   12ad0:	0018      	movs	r0, r3
   12ad2:	46bd      	mov	sp, r7
   12ad4:	b004      	add	sp, #16
   12ad6:	bd80      	pop	{r7, pc}

00012ad8 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   12ad8:	b580      	push	{r7, lr}
   12ada:	b084      	sub	sp, #16
   12adc:	af00      	add	r7, sp, #0
   12ade:	6078      	str	r0, [r7, #4]
   12ae0:	000a      	movs	r2, r1
   12ae2:	1cbb      	adds	r3, r7, #2
   12ae4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12ae6:	687b      	ldr	r3, [r7, #4]
   12ae8:	681b      	ldr	r3, [r3, #0]
   12aea:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   12aec:	687b      	ldr	r3, [r7, #4]
   12aee:	0018      	movs	r0, r3
   12af0:	4b0a      	ldr	r3, [pc, #40]	; (12b1c <spi_write+0x44>)
   12af2:	4798      	blx	r3
   12af4:	0003      	movs	r3, r0
   12af6:	001a      	movs	r2, r3
   12af8:	2301      	movs	r3, #1
   12afa:	4053      	eors	r3, r2
   12afc:	b2db      	uxtb	r3, r3
   12afe:	2b00      	cmp	r3, #0
   12b00:	d001      	beq.n	12b06 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   12b02:	2305      	movs	r3, #5
   12b04:	e006      	b.n	12b14 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   12b06:	1cbb      	adds	r3, r7, #2
   12b08:	881b      	ldrh	r3, [r3, #0]
   12b0a:	05db      	lsls	r3, r3, #23
   12b0c:	0dda      	lsrs	r2, r3, #23
   12b0e:	68fb      	ldr	r3, [r7, #12]
   12b10:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   12b12:	2300      	movs	r3, #0
}
   12b14:	0018      	movs	r0, r3
   12b16:	46bd      	mov	sp, r7
   12b18:	b004      	add	sp, #16
   12b1a:	bd80      	pop	{r7, pc}
   12b1c:	00012a89 	.word	0x00012a89

00012b20 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   12b20:	b580      	push	{r7, lr}
   12b22:	b084      	sub	sp, #16
   12b24:	af00      	add	r7, sp, #0
   12b26:	6078      	str	r0, [r7, #4]
   12b28:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	681b      	ldr	r3, [r3, #0]
   12b2e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   12b30:	687b      	ldr	r3, [r7, #4]
   12b32:	0018      	movs	r0, r3
   12b34:	4b1b      	ldr	r3, [pc, #108]	; (12ba4 <spi_read+0x84>)
   12b36:	4798      	blx	r3
   12b38:	0003      	movs	r3, r0
   12b3a:	001a      	movs	r2, r3
   12b3c:	2301      	movs	r3, #1
   12b3e:	4053      	eors	r3, r2
   12b40:	b2db      	uxtb	r3, r3
   12b42:	2b00      	cmp	r3, #0
   12b44:	d001      	beq.n	12b4a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   12b46:	2310      	movs	r3, #16
   12b48:	e027      	b.n	12b9a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   12b4a:	230f      	movs	r3, #15
   12b4c:	18fb      	adds	r3, r7, r3
   12b4e:	2200      	movs	r2, #0
   12b50:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   12b52:	68bb      	ldr	r3, [r7, #8]
   12b54:	8b5b      	ldrh	r3, [r3, #26]
   12b56:	b29b      	uxth	r3, r3
   12b58:	001a      	movs	r2, r3
   12b5a:	2304      	movs	r3, #4
   12b5c:	4013      	ands	r3, r2
   12b5e:	d006      	beq.n	12b6e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   12b60:	230f      	movs	r3, #15
   12b62:	18fb      	adds	r3, r7, r3
   12b64:	221e      	movs	r2, #30
   12b66:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   12b68:	68bb      	ldr	r3, [r7, #8]
   12b6a:	2204      	movs	r2, #4
   12b6c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   12b6e:	687b      	ldr	r3, [r7, #4]
   12b70:	799b      	ldrb	r3, [r3, #6]
   12b72:	2b01      	cmp	r3, #1
   12b74:	d108      	bne.n	12b88 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   12b76:	68bb      	ldr	r3, [r7, #8]
   12b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b7a:	b29b      	uxth	r3, r3
   12b7c:	05db      	lsls	r3, r3, #23
   12b7e:	0ddb      	lsrs	r3, r3, #23
   12b80:	b29a      	uxth	r2, r3
   12b82:	683b      	ldr	r3, [r7, #0]
   12b84:	801a      	strh	r2, [r3, #0]
   12b86:	e005      	b.n	12b94 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   12b88:	68bb      	ldr	r3, [r7, #8]
   12b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b8c:	b2db      	uxtb	r3, r3
   12b8e:	b29a      	uxth	r2, r3
   12b90:	683b      	ldr	r3, [r7, #0]
   12b92:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   12b94:	230f      	movs	r3, #15
   12b96:	18fb      	adds	r3, r7, r3
   12b98:	781b      	ldrb	r3, [r3, #0]
}
   12b9a:	0018      	movs	r0, r3
   12b9c:	46bd      	mov	sp, r7
   12b9e:	b004      	add	sp, #16
   12ba0:	bd80      	pop	{r7, pc}
   12ba2:	46c0      	nop			; (mov r8, r8)
   12ba4:	00012ab1 	.word	0x00012ab1

00012ba8 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
   12ba8:	b580      	push	{r7, lr}
   12baa:	b084      	sub	sp, #16
   12bac:	af00      	add	r7, sp, #0
   12bae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12bb0:	687b      	ldr	r3, [r7, #4]
   12bb2:	681b      	ldr	r3, [r3, #0]
   12bb4:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   12bb6:	68fb      	ldr	r3, [r7, #12]
   12bb8:	2202      	movs	r2, #2
   12bba:	761a      	strb	r2, [r3, #24]
}
   12bbc:	46c0      	nop			; (mov r8, r8)
   12bbe:	46bd      	mov	sp, r7
   12bc0:	b004      	add	sp, #16
   12bc2:	bd80      	pop	{r7, pc}

00012bc4 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   12bc4:	b590      	push	{r4, r7, lr}
   12bc6:	b093      	sub	sp, #76	; 0x4c
   12bc8:	af00      	add	r7, sp, #0
   12bca:	6078      	str	r0, [r7, #4]
   12bcc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12bce:	687b      	ldr	r3, [r7, #4]
   12bd0:	681b      	ldr	r3, [r3, #0]
   12bd2:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   12bd4:	687b      	ldr	r3, [r7, #4]
   12bd6:	681b      	ldr	r3, [r3, #0]
   12bd8:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   12bda:	231c      	movs	r3, #28
   12bdc:	18fb      	adds	r3, r7, r3
   12bde:	0018      	movs	r0, r3
   12be0:	4b85      	ldr	r3, [pc, #532]	; (12df8 <_spi_set_config+0x234>)
   12be2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12be4:	231c      	movs	r3, #28
   12be6:	18fb      	adds	r3, r7, r3
   12be8:	2200      	movs	r2, #0
   12bea:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   12bec:	683b      	ldr	r3, [r7, #0]
   12bee:	781b      	ldrb	r3, [r3, #0]
   12bf0:	2b00      	cmp	r3, #0
   12bf2:	d103      	bne.n	12bfc <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   12bf4:	231c      	movs	r3, #28
   12bf6:	18fb      	adds	r3, r7, r3
   12bf8:	2200      	movs	r2, #0
   12bfa:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   12bfc:	683b      	ldr	r3, [r7, #0]
   12bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
   12c00:	230c      	movs	r3, #12
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   12c06:	683b      	ldr	r3, [r7, #0]
   12c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
   12c0a:	230c      	movs	r3, #12
   12c0c:	18fb      	adds	r3, r7, r3
   12c0e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
   12c10:	683b      	ldr	r3, [r7, #0]
   12c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
   12c14:	230c      	movs	r3, #12
   12c16:	18fb      	adds	r3, r7, r3
   12c18:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
   12c1a:	683b      	ldr	r3, [r7, #0]
   12c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
   12c1e:	230c      	movs	r3, #12
   12c20:	18fb      	adds	r3, r7, r3
   12c22:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   12c24:	2347      	movs	r3, #71	; 0x47
   12c26:	18fb      	adds	r3, r7, r3
   12c28:	2200      	movs	r2, #0
   12c2a:	701a      	strb	r2, [r3, #0]
   12c2c:	e02c      	b.n	12c88 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   12c2e:	2347      	movs	r3, #71	; 0x47
   12c30:	18fb      	adds	r3, r7, r3
   12c32:	781a      	ldrb	r2, [r3, #0]
   12c34:	230c      	movs	r3, #12
   12c36:	18fb      	adds	r3, r7, r3
   12c38:	0092      	lsls	r2, r2, #2
   12c3a:	58d3      	ldr	r3, [r2, r3]
   12c3c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   12c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12c40:	2b00      	cmp	r3, #0
   12c42:	d109      	bne.n	12c58 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   12c44:	2347      	movs	r3, #71	; 0x47
   12c46:	18fb      	adds	r3, r7, r3
   12c48:	781a      	ldrb	r2, [r3, #0]
   12c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12c4c:	0011      	movs	r1, r2
   12c4e:	0018      	movs	r0, r3
   12c50:	4b6a      	ldr	r3, [pc, #424]	; (12dfc <_spi_set_config+0x238>)
   12c52:	4798      	blx	r3
   12c54:	0003      	movs	r3, r0
   12c56:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   12c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12c5a:	3301      	adds	r3, #1
   12c5c:	d00d      	beq.n	12c7a <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   12c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12c60:	b2da      	uxtb	r2, r3
   12c62:	231c      	movs	r3, #28
   12c64:	18fb      	adds	r3, r7, r3
   12c66:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   12c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12c6a:	0c1b      	lsrs	r3, r3, #16
   12c6c:	b2db      	uxtb	r3, r3
   12c6e:	221c      	movs	r2, #28
   12c70:	18ba      	adds	r2, r7, r2
   12c72:	0011      	movs	r1, r2
   12c74:	0018      	movs	r0, r3
   12c76:	4b62      	ldr	r3, [pc, #392]	; (12e00 <_spi_set_config+0x23c>)
   12c78:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   12c7a:	2347      	movs	r3, #71	; 0x47
   12c7c:	18fb      	adds	r3, r7, r3
   12c7e:	781a      	ldrb	r2, [r3, #0]
   12c80:	2347      	movs	r3, #71	; 0x47
   12c82:	18fb      	adds	r3, r7, r3
   12c84:	3201      	adds	r2, #1
   12c86:	701a      	strb	r2, [r3, #0]
   12c88:	2347      	movs	r3, #71	; 0x47
   12c8a:	18fb      	adds	r3, r7, r3
   12c8c:	781b      	ldrb	r3, [r3, #0]
   12c8e:	2b03      	cmp	r3, #3
   12c90:	d9cd      	bls.n	12c2e <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
   12c92:	683b      	ldr	r3, [r7, #0]
   12c94:	781a      	ldrb	r2, [r3, #0]
   12c96:	687b      	ldr	r3, [r7, #4]
   12c98:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   12c9a:	683b      	ldr	r3, [r7, #0]
   12c9c:	7c1a      	ldrb	r2, [r3, #16]
   12c9e:	687b      	ldr	r3, [r7, #4]
   12ca0:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   12ca2:	683b      	ldr	r3, [r7, #0]
   12ca4:	7c9a      	ldrb	r2, [r3, #18]
   12ca6:	687b      	ldr	r3, [r7, #4]
   12ca8:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   12caa:	683b      	ldr	r3, [r7, #0]
   12cac:	7d1a      	ldrb	r2, [r3, #20]
   12cae:	687b      	ldr	r3, [r7, #4]
   12cb0:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   12cb2:	230a      	movs	r3, #10
   12cb4:	18fb      	adds	r3, r7, r3
   12cb6:	2200      	movs	r2, #0
   12cb8:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   12cba:	2300      	movs	r3, #0
   12cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   12cbe:	2300      	movs	r3, #0
   12cc0:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   12cc2:	683b      	ldr	r3, [r7, #0]
   12cc4:	781b      	ldrb	r3, [r3, #0]
   12cc6:	2b01      	cmp	r3, #1
   12cc8:	d129      	bne.n	12d1e <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   12cca:	687b      	ldr	r3, [r7, #4]
   12ccc:	681b      	ldr	r3, [r3, #0]
   12cce:	0018      	movs	r0, r3
   12cd0:	4b4c      	ldr	r3, [pc, #304]	; (12e04 <_spi_set_config+0x240>)
   12cd2:	4798      	blx	r3
   12cd4:	0003      	movs	r3, r0
   12cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   12cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12cda:	3314      	adds	r3, #20
   12cdc:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   12cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12ce0:	b2db      	uxtb	r3, r3
   12ce2:	0018      	movs	r0, r3
   12ce4:	4b48      	ldr	r3, [pc, #288]	; (12e08 <_spi_set_config+0x244>)
   12ce6:	4798      	blx	r3
   12ce8:	0003      	movs	r3, r0
   12cea:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   12cec:	683b      	ldr	r3, [r7, #0]
   12cee:	699b      	ldr	r3, [r3, #24]
   12cf0:	2223      	movs	r2, #35	; 0x23
   12cf2:	18bc      	adds	r4, r7, r2
   12cf4:	220a      	movs	r2, #10
   12cf6:	18ba      	adds	r2, r7, r2
   12cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   12cfa:	0018      	movs	r0, r3
   12cfc:	4b43      	ldr	r3, [pc, #268]	; (12e0c <_spi_set_config+0x248>)
   12cfe:	4798      	blx	r3
   12d00:	0003      	movs	r3, r0
   12d02:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   12d04:	2323      	movs	r3, #35	; 0x23
   12d06:	18fb      	adds	r3, r7, r3
   12d08:	781b      	ldrb	r3, [r3, #0]
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d001      	beq.n	12d12 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   12d0e:	2317      	movs	r3, #23
   12d10:	e06d      	b.n	12dee <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   12d12:	230a      	movs	r3, #10
   12d14:	18fb      	adds	r3, r7, r3
   12d16:	881b      	ldrh	r3, [r3, #0]
   12d18:	b2da      	uxtb	r2, r3
   12d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12d1c:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   12d1e:	683b      	ldr	r3, [r7, #0]
   12d20:	781b      	ldrb	r3, [r3, #0]
   12d22:	2b00      	cmp	r3, #0
   12d24:	d11a      	bne.n	12d5c <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
   12d26:	683b      	ldr	r3, [r7, #0]
   12d28:	699b      	ldr	r3, [r3, #24]
   12d2a:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
   12d2c:	683b      	ldr	r3, [r7, #0]
   12d2e:	8b9b      	ldrh	r3, [r3, #28]
   12d30:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
   12d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   12d36:	683a      	ldr	r2, [r7, #0]
   12d38:	7f92      	ldrb	r2, [r2, #30]
   12d3a:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
   12d3c:	683a      	ldr	r2, [r7, #0]
   12d3e:	7fd2      	ldrb	r2, [r2, #31]
   12d40:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   12d42:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
   12d44:	431a      	orrs	r2, r3
   12d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12d48:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
   12d4a:	683b      	ldr	r3, [r7, #0]
   12d4c:	2220      	movs	r2, #32
   12d4e:	5c9b      	ldrb	r3, [r3, r2]
   12d50:	2b00      	cmp	r3, #0
   12d52:	d003      	beq.n	12d5c <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
   12d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12d56:	2240      	movs	r2, #64	; 0x40
   12d58:	4313      	orrs	r3, r2
   12d5a:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   12d5c:	683b      	ldr	r3, [r7, #0]
   12d5e:	685b      	ldr	r3, [r3, #4]
   12d60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12d62:	4313      	orrs	r3, r2
   12d64:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   12d66:	683b      	ldr	r3, [r7, #0]
   12d68:	689b      	ldr	r3, [r3, #8]
   12d6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12d6c:	4313      	orrs	r3, r2
   12d6e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   12d70:	683b      	ldr	r3, [r7, #0]
   12d72:	68db      	ldr	r3, [r3, #12]
   12d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12d76:	4313      	orrs	r3, r2
   12d78:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   12d7a:	683b      	ldr	r3, [r7, #0]
   12d7c:	7c1b      	ldrb	r3, [r3, #16]
   12d7e:	001a      	movs	r2, r3
   12d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12d82:	4313      	orrs	r3, r2
   12d84:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   12d86:	683b      	ldr	r3, [r7, #0]
   12d88:	7c5b      	ldrb	r3, [r3, #17]
   12d8a:	2b00      	cmp	r3, #0
   12d8c:	d103      	bne.n	12d96 <_spi_set_config+0x1d2>
   12d8e:	4b20      	ldr	r3, [pc, #128]	; (12e10 <_spi_set_config+0x24c>)
   12d90:	4798      	blx	r3
   12d92:	1e03      	subs	r3, r0, #0
   12d94:	d003      	beq.n	12d9e <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   12d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12d98:	2280      	movs	r2, #128	; 0x80
   12d9a:	4313      	orrs	r3, r2
   12d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   12d9e:	683b      	ldr	r3, [r7, #0]
   12da0:	7c9b      	ldrb	r3, [r3, #18]
   12da2:	2b00      	cmp	r3, #0
   12da4:	d004      	beq.n	12db0 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   12da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12da8:	2280      	movs	r2, #128	; 0x80
   12daa:	0292      	lsls	r2, r2, #10
   12dac:	4313      	orrs	r3, r2
   12dae:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   12db0:	683b      	ldr	r3, [r7, #0]
   12db2:	7cdb      	ldrb	r3, [r3, #19]
   12db4:	2b00      	cmp	r3, #0
   12db6:	d004      	beq.n	12dc2 <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   12db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12dba:	2280      	movs	r2, #128	; 0x80
   12dbc:	0092      	lsls	r2, r2, #2
   12dbe:	4313      	orrs	r3, r2
   12dc0:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   12dc2:	683b      	ldr	r3, [r7, #0]
   12dc4:	7d1b      	ldrb	r3, [r3, #20]
   12dc6:	2b00      	cmp	r3, #0
   12dc8:	d004      	beq.n	12dd4 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   12dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12dcc:	2280      	movs	r2, #128	; 0x80
   12dce:	0192      	lsls	r2, r2, #6
   12dd0:	4313      	orrs	r3, r2
   12dd2:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   12dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12dd6:	681a      	ldr	r2, [r3, #0]
   12dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12dda:	431a      	orrs	r2, r3
   12ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12dde:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   12de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12de2:	685a      	ldr	r2, [r3, #4]
   12de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12de6:	431a      	orrs	r2, r3
   12de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12dea:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   12dec:	2300      	movs	r3, #0
}
   12dee:	0018      	movs	r0, r3
   12df0:	46bd      	mov	sp, r7
   12df2:	b013      	add	sp, #76	; 0x4c
   12df4:	bd90      	pop	{r4, r7, pc}
   12df6:	46c0      	nop			; (mov r8, r8)
   12df8:	000128cd 	.word	0x000128cd
   12dfc:	00012565 	.word	0x00012565
   12e00:	0001554d 	.word	0x0001554d
   12e04:	00012721 	.word	0x00012721
   12e08:	00015385 	.word	0x00015385
   12e0c:	0001229d 	.word	0x0001229d
   12e10:	00012a41 	.word	0x00012a41

00012e14 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   12e14:	b590      	push	{r4, r7, lr}
   12e16:	b08b      	sub	sp, #44	; 0x2c
   12e18:	af00      	add	r7, sp, #0
   12e1a:	60f8      	str	r0, [r7, #12]
   12e1c:	60b9      	str	r1, [r7, #8]
   12e1e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   12e20:	68fb      	ldr	r3, [r7, #12]
   12e22:	68ba      	ldr	r2, [r7, #8]
   12e24:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   12e26:	68fb      	ldr	r3, [r7, #12]
   12e28:	681b      	ldr	r3, [r3, #0]
   12e2a:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   12e2c:	6a3b      	ldr	r3, [r7, #32]
   12e2e:	681b      	ldr	r3, [r3, #0]
   12e30:	2202      	movs	r2, #2
   12e32:	4013      	ands	r3, r2
   12e34:	d001      	beq.n	12e3a <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   12e36:	231c      	movs	r3, #28
   12e38:	e0a6      	b.n	12f88 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   12e3a:	6a3b      	ldr	r3, [r7, #32]
   12e3c:	681b      	ldr	r3, [r3, #0]
   12e3e:	2201      	movs	r2, #1
   12e40:	4013      	ands	r3, r2
   12e42:	d001      	beq.n	12e48 <spi_init+0x34>
		return STATUS_BUSY;
   12e44:	2305      	movs	r3, #5
   12e46:	e09f      	b.n	12f88 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   12e48:	68fb      	ldr	r3, [r7, #12]
   12e4a:	681b      	ldr	r3, [r3, #0]
   12e4c:	0018      	movs	r0, r3
   12e4e:	4b50      	ldr	r3, [pc, #320]	; (12f90 <spi_init+0x17c>)
   12e50:	4798      	blx	r3
   12e52:	0003      	movs	r3, r0
   12e54:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   12e56:	69fb      	ldr	r3, [r7, #28]
   12e58:	3302      	adds	r3, #2
   12e5a:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   12e5c:	69fb      	ldr	r3, [r7, #28]
   12e5e:	3314      	adds	r3, #20
   12e60:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   12e62:	2201      	movs	r2, #1
   12e64:	69bb      	ldr	r3, [r7, #24]
   12e66:	409a      	lsls	r2, r3
   12e68:	0013      	movs	r3, r2
   12e6a:	0019      	movs	r1, r3
   12e6c:	2002      	movs	r0, #2
   12e6e:	4b49      	ldr	r3, [pc, #292]	; (12f94 <spi_init+0x180>)
   12e70:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12e72:	2310      	movs	r3, #16
   12e74:	18fb      	adds	r3, r7, r3
   12e76:	0018      	movs	r0, r3
   12e78:	4b47      	ldr	r3, [pc, #284]	; (12f98 <spi_init+0x184>)
   12e7a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   12e7c:	687b      	ldr	r3, [r7, #4]
   12e7e:	2224      	movs	r2, #36	; 0x24
   12e80:	5c9a      	ldrb	r2, [r3, r2]
   12e82:	2310      	movs	r3, #16
   12e84:	18fb      	adds	r3, r7, r3
   12e86:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   12e88:	697b      	ldr	r3, [r7, #20]
   12e8a:	b2db      	uxtb	r3, r3
   12e8c:	2210      	movs	r2, #16
   12e8e:	18ba      	adds	r2, r7, r2
   12e90:	0011      	movs	r1, r2
   12e92:	0018      	movs	r0, r3
   12e94:	4b41      	ldr	r3, [pc, #260]	; (12f9c <spi_init+0x188>)
   12e96:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   12e98:	697b      	ldr	r3, [r7, #20]
   12e9a:	b2db      	uxtb	r3, r3
   12e9c:	0018      	movs	r0, r3
   12e9e:	4b40      	ldr	r3, [pc, #256]	; (12fa0 <spi_init+0x18c>)
   12ea0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   12ea2:	687b      	ldr	r3, [r7, #4]
   12ea4:	2224      	movs	r2, #36	; 0x24
   12ea6:	5c9b      	ldrb	r3, [r3, r2]
   12ea8:	2100      	movs	r1, #0
   12eaa:	0018      	movs	r0, r3
   12eac:	4b3d      	ldr	r3, [pc, #244]	; (12fa4 <spi_init+0x190>)
   12eae:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   12eb0:	687b      	ldr	r3, [r7, #4]
   12eb2:	781b      	ldrb	r3, [r3, #0]
   12eb4:	2b01      	cmp	r3, #1
   12eb6:	d105      	bne.n	12ec4 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   12eb8:	6a3b      	ldr	r3, [r7, #32]
   12eba:	681b      	ldr	r3, [r3, #0]
   12ebc:	220c      	movs	r2, #12
   12ebe:	431a      	orrs	r2, r3
   12ec0:	6a3b      	ldr	r3, [r7, #32]
   12ec2:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   12ec4:	687b      	ldr	r3, [r7, #4]
   12ec6:	781b      	ldrb	r3, [r3, #0]
   12ec8:	2b00      	cmp	r3, #0
   12eca:	d105      	bne.n	12ed8 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
   12ecc:	6a3b      	ldr	r3, [r7, #32]
   12ece:	681b      	ldr	r3, [r3, #0]
   12ed0:	2208      	movs	r2, #8
   12ed2:	431a      	orrs	r2, r3
   12ed4:	6a3b      	ldr	r3, [r7, #32]
   12ed6:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   12ed8:	2327      	movs	r3, #39	; 0x27
   12eda:	18fb      	adds	r3, r7, r3
   12edc:	2200      	movs	r2, #0
   12ede:	701a      	strb	r2, [r3, #0]
   12ee0:	e010      	b.n	12f04 <spi_init+0xf0>
		module->callback[i]        = NULL;
   12ee2:	2327      	movs	r3, #39	; 0x27
   12ee4:	18fb      	adds	r3, r7, r3
   12ee6:	781b      	ldrb	r3, [r3, #0]
   12ee8:	68fa      	ldr	r2, [r7, #12]
   12eea:	3302      	adds	r3, #2
   12eec:	009b      	lsls	r3, r3, #2
   12eee:	18d3      	adds	r3, r2, r3
   12ef0:	3304      	adds	r3, #4
   12ef2:	2200      	movs	r2, #0
   12ef4:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   12ef6:	2327      	movs	r3, #39	; 0x27
   12ef8:	18fb      	adds	r3, r7, r3
   12efa:	781a      	ldrb	r2, [r3, #0]
   12efc:	2327      	movs	r3, #39	; 0x27
   12efe:	18fb      	adds	r3, r7, r3
   12f00:	3201      	adds	r2, #1
   12f02:	701a      	strb	r2, [r3, #0]
   12f04:	2327      	movs	r3, #39	; 0x27
   12f06:	18fb      	adds	r3, r7, r3
   12f08:	781b      	ldrb	r3, [r3, #0]
   12f0a:	2b06      	cmp	r3, #6
   12f0c:	d9e9      	bls.n	12ee2 <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
   12f0e:	68fb      	ldr	r3, [r7, #12]
   12f10:	2200      	movs	r2, #0
   12f12:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   12f14:	68fb      	ldr	r3, [r7, #12]
   12f16:	2200      	movs	r2, #0
   12f18:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   12f1a:	68fb      	ldr	r3, [r7, #12]
   12f1c:	2200      	movs	r2, #0
   12f1e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   12f20:	68fb      	ldr	r3, [r7, #12]
   12f22:	2200      	movs	r2, #0
   12f24:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   12f26:	68fb      	ldr	r3, [r7, #12]
   12f28:	2236      	movs	r2, #54	; 0x36
   12f2a:	2100      	movs	r1, #0
   12f2c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   12f2e:	68fb      	ldr	r3, [r7, #12]
   12f30:	2237      	movs	r2, #55	; 0x37
   12f32:	2100      	movs	r1, #0
   12f34:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   12f36:	68fb      	ldr	r3, [r7, #12]
   12f38:	2238      	movs	r2, #56	; 0x38
   12f3a:	2100      	movs	r1, #0
   12f3c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   12f3e:	68fb      	ldr	r3, [r7, #12]
   12f40:	2203      	movs	r2, #3
   12f42:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   12f44:	68fb      	ldr	r3, [r7, #12]
   12f46:	2200      	movs	r2, #0
   12f48:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   12f4a:	68fb      	ldr	r3, [r7, #12]
   12f4c:	681b      	ldr	r3, [r3, #0]
   12f4e:	2213      	movs	r2, #19
   12f50:	18bc      	adds	r4, r7, r2
   12f52:	0018      	movs	r0, r3
   12f54:	4b0e      	ldr	r3, [pc, #56]	; (12f90 <spi_init+0x17c>)
   12f56:	4798      	blx	r3
   12f58:	0003      	movs	r3, r0
   12f5a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   12f5c:	4a12      	ldr	r2, [pc, #72]	; (12fa8 <spi_init+0x194>)
   12f5e:	2313      	movs	r3, #19
   12f60:	18fb      	adds	r3, r7, r3
   12f62:	781b      	ldrb	r3, [r3, #0]
   12f64:	0011      	movs	r1, r2
   12f66:	0018      	movs	r0, r3
   12f68:	4b10      	ldr	r3, [pc, #64]	; (12fac <spi_init+0x198>)
   12f6a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   12f6c:	2313      	movs	r3, #19
   12f6e:	18fb      	adds	r3, r7, r3
   12f70:	781a      	ldrb	r2, [r3, #0]
   12f72:	4b0f      	ldr	r3, [pc, #60]	; (12fb0 <spi_init+0x19c>)
   12f74:	0092      	lsls	r2, r2, #2
   12f76:	68f9      	ldr	r1, [r7, #12]
   12f78:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   12f7a:	687a      	ldr	r2, [r7, #4]
   12f7c:	68fb      	ldr	r3, [r7, #12]
   12f7e:	0011      	movs	r1, r2
   12f80:	0018      	movs	r0, r3
   12f82:	4b0c      	ldr	r3, [pc, #48]	; (12fb4 <spi_init+0x1a0>)
   12f84:	4798      	blx	r3
   12f86:	0003      	movs	r3, r0
}
   12f88:	0018      	movs	r0, r3
   12f8a:	46bd      	mov	sp, r7
   12f8c:	b00b      	add	sp, #44	; 0x2c
   12f8e:	bd90      	pop	{r4, r7, pc}
   12f90:	00012721 	.word	0x00012721
   12f94:	000129e5 	.word	0x000129e5
   12f98:	000129cd 	.word	0x000129cd
   12f9c:	00015261 	.word	0x00015261
   12fa0:	000152a5 	.word	0x000152a5
   12fa4:	000124d9 	.word	0x000124d9
   12fa8:	000136e1 	.word	0x000136e1
   12fac:	00012785 	.word	0x00012785
   12fb0:	2000045c 	.word	0x2000045c
   12fb4:	00012bc5 	.word	0x00012bc5

00012fb8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   12fb8:	b590      	push	{r4, r7, lr}
   12fba:	b089      	sub	sp, #36	; 0x24
   12fbc:	af00      	add	r7, sp, #0
   12fbe:	60f8      	str	r0, [r7, #12]
   12fc0:	60b9      	str	r1, [r7, #8]
   12fc2:	0019      	movs	r1, r3
   12fc4:	1dbb      	adds	r3, r7, #6
   12fc6:	801a      	strh	r2, [r3, #0]
   12fc8:	1d3b      	adds	r3, r7, #4
   12fca:	1c0a      	adds	r2, r1, #0
   12fcc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   12fce:	68fb      	ldr	r3, [r7, #12]
   12fd0:	2238      	movs	r2, #56	; 0x38
   12fd2:	5c9b      	ldrb	r3, [r3, r2]
   12fd4:	b2db      	uxtb	r3, r3
   12fd6:	2b05      	cmp	r3, #5
   12fd8:	d101      	bne.n	12fde <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   12fda:	2305      	movs	r3, #5
   12fdc:	e0b8      	b.n	13150 <spi_read_buffer_wait+0x198>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   12fde:	1dbb      	adds	r3, r7, #6
   12fe0:	881b      	ldrh	r3, [r3, #0]
   12fe2:	2b00      	cmp	r3, #0
   12fe4:	d101      	bne.n	12fea <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   12fe6:	2317      	movs	r3, #23
   12fe8:	e0b2      	b.n	13150 <spi_read_buffer_wait+0x198>
	}

	if (!(module->receiver_enabled)) {
   12fea:	68fb      	ldr	r3, [r7, #12]
   12fec:	79db      	ldrb	r3, [r3, #7]
   12fee:	2201      	movs	r2, #1
   12ff0:	4053      	eors	r3, r2
   12ff2:	b2db      	uxtb	r3, r3
   12ff4:	2b00      	cmp	r3, #0
   12ff6:	d001      	beq.n	12ffc <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   12ff8:	231c      	movs	r3, #28
   12ffa:	e0a9      	b.n	13150 <spi_read_buffer_wait+0x198>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   12ffc:	68fb      	ldr	r3, [r7, #12]
   12ffe:	795b      	ldrb	r3, [r3, #5]
   13000:	2b00      	cmp	r3, #0
   13002:	d109      	bne.n	13018 <spi_read_buffer_wait+0x60>
   13004:	68fb      	ldr	r3, [r7, #12]
   13006:	0018      	movs	r0, r3
   13008:	4b53      	ldr	r3, [pc, #332]	; (13158 <spi_read_buffer_wait+0x1a0>)
   1300a:	4798      	blx	r3
   1300c:	1e03      	subs	r3, r0, #0
   1300e:	d003      	beq.n	13018 <spi_read_buffer_wait+0x60>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   13010:	68fb      	ldr	r3, [r7, #12]
   13012:	0018      	movs	r0, r3
   13014:	4b51      	ldr	r3, [pc, #324]	; (1315c <spi_read_buffer_wait+0x1a4>)
   13016:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
   13018:	231e      	movs	r3, #30
   1301a:	18fb      	adds	r3, r7, r3
   1301c:	2200      	movs	r2, #0
   1301e:	801a      	strh	r2, [r3, #0]

	while (length--) {
   13020:	e08d      	b.n	1313e <spi_read_buffer_wait+0x186>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   13022:	68fb      	ldr	r3, [r7, #12]
   13024:	795b      	ldrb	r3, [r3, #5]
   13026:	2b01      	cmp	r3, #1
   13028:	d112      	bne.n	13050 <spi_read_buffer_wait+0x98>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   1302a:	46c0      	nop			; (mov r8, r8)
   1302c:	68fb      	ldr	r3, [r7, #12]
   1302e:	0018      	movs	r0, r3
   13030:	4b4b      	ldr	r3, [pc, #300]	; (13160 <spi_read_buffer_wait+0x1a8>)
   13032:	4798      	blx	r3
   13034:	0003      	movs	r3, r0
   13036:	001a      	movs	r2, r3
   13038:	2301      	movs	r3, #1
   1303a:	4053      	eors	r3, r2
   1303c:	b2db      	uxtb	r3, r3
   1303e:	2b00      	cmp	r3, #0
   13040:	d1f4      	bne.n	1302c <spi_read_buffer_wait+0x74>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   13042:	1d3b      	adds	r3, r7, #4
   13044:	881a      	ldrh	r2, [r3, #0]
   13046:	68fb      	ldr	r3, [r7, #12]
   13048:	0011      	movs	r1, r2
   1304a:	0018      	movs	r0, r3
   1304c:	4b45      	ldr	r3, [pc, #276]	; (13164 <spi_read_buffer_wait+0x1ac>)
   1304e:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   13050:	68fb      	ldr	r3, [r7, #12]
   13052:	795b      	ldrb	r3, [r3, #5]
   13054:	2b00      	cmp	r3, #0
   13056:	d12a      	bne.n	130ae <spi_read_buffer_wait+0xf6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   13058:	2300      	movs	r3, #0
   1305a:	61bb      	str	r3, [r7, #24]
   1305c:	e008      	b.n	13070 <spi_read_buffer_wait+0xb8>
				if (spi_is_ready_to_read(module)) {
   1305e:	68fb      	ldr	r3, [r7, #12]
   13060:	0018      	movs	r0, r3
   13062:	4b41      	ldr	r3, [pc, #260]	; (13168 <spi_read_buffer_wait+0x1b0>)
   13064:	4798      	blx	r3
   13066:	1e03      	subs	r3, r0, #0
   13068:	d107      	bne.n	1307a <spi_read_buffer_wait+0xc2>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   1306a:	69bb      	ldr	r3, [r7, #24]
   1306c:	3301      	adds	r3, #1
   1306e:	61bb      	str	r3, [r7, #24]
   13070:	69bb      	ldr	r3, [r7, #24]
   13072:	4a3e      	ldr	r2, [pc, #248]	; (1316c <spi_read_buffer_wait+0x1b4>)
   13074:	4293      	cmp	r3, r2
   13076:	d9f2      	bls.n	1305e <spi_read_buffer_wait+0xa6>
   13078:	e000      	b.n	1307c <spi_read_buffer_wait+0xc4>
				if (spi_is_ready_to_read(module)) {
					break;
   1307a:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   1307c:	68fb      	ldr	r3, [r7, #12]
   1307e:	0018      	movs	r0, r3
   13080:	4b35      	ldr	r3, [pc, #212]	; (13158 <spi_read_buffer_wait+0x1a0>)
   13082:	4798      	blx	r3
   13084:	1e03      	subs	r3, r0, #0
   13086:	d005      	beq.n	13094 <spi_read_buffer_wait+0xdc>
				_spi_clear_tx_complete_flag(module);
   13088:	68fb      	ldr	r3, [r7, #12]
   1308a:	0018      	movs	r0, r3
   1308c:	4b33      	ldr	r3, [pc, #204]	; (1315c <spi_read_buffer_wait+0x1a4>)
   1308e:	4798      	blx	r3
				return STATUS_ABORTED;
   13090:	2304      	movs	r3, #4
   13092:	e05d      	b.n	13150 <spi_read_buffer_wait+0x198>
			}

			if (!spi_is_ready_to_read(module)) {
   13094:	68fb      	ldr	r3, [r7, #12]
   13096:	0018      	movs	r0, r3
   13098:	4b33      	ldr	r3, [pc, #204]	; (13168 <spi_read_buffer_wait+0x1b0>)
   1309a:	4798      	blx	r3
   1309c:	0003      	movs	r3, r0
   1309e:	001a      	movs	r2, r3
   130a0:	2301      	movs	r3, #1
   130a2:	4053      	eors	r3, r2
   130a4:	b2db      	uxtb	r3, r3
   130a6:	2b00      	cmp	r3, #0
   130a8:	d001      	beq.n	130ae <spi_read_buffer_wait+0xf6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
   130aa:	2312      	movs	r3, #18
   130ac:	e050      	b.n	13150 <spi_read_buffer_wait+0x198>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   130ae:	46c0      	nop			; (mov r8, r8)
   130b0:	68fb      	ldr	r3, [r7, #12]
   130b2:	0018      	movs	r0, r3
   130b4:	4b2c      	ldr	r3, [pc, #176]	; (13168 <spi_read_buffer_wait+0x1b0>)
   130b6:	4798      	blx	r3
   130b8:	0003      	movs	r3, r0
   130ba:	001a      	movs	r2, r3
   130bc:	2301      	movs	r3, #1
   130be:	4053      	eors	r3, r2
   130c0:	b2db      	uxtb	r3, r3
   130c2:	2b00      	cmp	r3, #0
   130c4:	d1f4      	bne.n	130b0 <spi_read_buffer_wait+0xf8>
		}

		uint16_t received_data = 0;
   130c6:	2314      	movs	r3, #20
   130c8:	18fb      	adds	r3, r7, r3
   130ca:	2200      	movs	r2, #0
   130cc:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   130ce:	2317      	movs	r3, #23
   130d0:	18fc      	adds	r4, r7, r3
   130d2:	2314      	movs	r3, #20
   130d4:	18fa      	adds	r2, r7, r3
   130d6:	68fb      	ldr	r3, [r7, #12]
   130d8:	0011      	movs	r1, r2
   130da:	0018      	movs	r0, r3
   130dc:	4b24      	ldr	r3, [pc, #144]	; (13170 <spi_read_buffer_wait+0x1b8>)
   130de:	4798      	blx	r3
   130e0:	0003      	movs	r3, r0
   130e2:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   130e4:	2317      	movs	r3, #23
   130e6:	18fb      	adds	r3, r7, r3
   130e8:	781b      	ldrb	r3, [r3, #0]
   130ea:	2b00      	cmp	r3, #0
   130ec:	d003      	beq.n	130f6 <spi_read_buffer_wait+0x13e>
			/* Overflow, abort */
			return retval;
   130ee:	2317      	movs	r3, #23
   130f0:	18fb      	adds	r3, r7, r3
   130f2:	781b      	ldrb	r3, [r3, #0]
   130f4:	e02c      	b.n	13150 <spi_read_buffer_wait+0x198>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   130f6:	231e      	movs	r3, #30
   130f8:	18fb      	adds	r3, r7, r3
   130fa:	881b      	ldrh	r3, [r3, #0]
   130fc:	221e      	movs	r2, #30
   130fe:	18ba      	adds	r2, r7, r2
   13100:	1c59      	adds	r1, r3, #1
   13102:	8011      	strh	r1, [r2, #0]
   13104:	001a      	movs	r2, r3
   13106:	68bb      	ldr	r3, [r7, #8]
   13108:	189b      	adds	r3, r3, r2
   1310a:	2214      	movs	r2, #20
   1310c:	18ba      	adds	r2, r7, r2
   1310e:	8812      	ldrh	r2, [r2, #0]
   13110:	b2d2      	uxtb	r2, r2
   13112:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   13114:	68fb      	ldr	r3, [r7, #12]
   13116:	799b      	ldrb	r3, [r3, #6]
   13118:	2b01      	cmp	r3, #1
   1311a:	d110      	bne.n	1313e <spi_read_buffer_wait+0x186>
			rx_data[rx_pos++] = (received_data >> 8);
   1311c:	231e      	movs	r3, #30
   1311e:	18fb      	adds	r3, r7, r3
   13120:	881b      	ldrh	r3, [r3, #0]
   13122:	221e      	movs	r2, #30
   13124:	18ba      	adds	r2, r7, r2
   13126:	1c59      	adds	r1, r3, #1
   13128:	8011      	strh	r1, [r2, #0]
   1312a:	001a      	movs	r2, r3
   1312c:	68bb      	ldr	r3, [r7, #8]
   1312e:	189b      	adds	r3, r3, r2
   13130:	2214      	movs	r2, #20
   13132:	18ba      	adds	r2, r7, r2
   13134:	8812      	ldrh	r2, [r2, #0]
   13136:	0a12      	lsrs	r2, r2, #8
   13138:	b292      	uxth	r2, r2
   1313a:	b2d2      	uxtb	r2, r2
   1313c:	701a      	strb	r2, [r3, #0]
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
   1313e:	1dbb      	adds	r3, r7, #6
   13140:	881b      	ldrh	r3, [r3, #0]
   13142:	1dba      	adds	r2, r7, #6
   13144:	1e59      	subs	r1, r3, #1
   13146:	8011      	strh	r1, [r2, #0]
   13148:	2b00      	cmp	r3, #0
   1314a:	d000      	beq.n	1314e <spi_read_buffer_wait+0x196>
   1314c:	e769      	b.n	13022 <spi_read_buffer_wait+0x6a>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
   1314e:	2300      	movs	r3, #0
}
   13150:	0018      	movs	r0, r3
   13152:	46bd      	mov	sp, r7
   13154:	b009      	add	sp, #36	; 0x24
   13156:	bd90      	pop	{r4, r7, pc}
   13158:	00012a61 	.word	0x00012a61
   1315c:	00012ba9 	.word	0x00012ba9
   13160:	00012a89 	.word	0x00012a89
   13164:	00012ad9 	.word	0x00012ad9
   13168:	00012ab1 	.word	0x00012ab1
   1316c:	00002710 	.word	0x00002710
   13170:	00012b21 	.word	0x00012b21

00013174 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   13174:	b580      	push	{r7, lr}
   13176:	b086      	sub	sp, #24
   13178:	af00      	add	r7, sp, #0
   1317a:	60f8      	str	r0, [r7, #12]
   1317c:	60b9      	str	r1, [r7, #8]
   1317e:	1dfb      	adds	r3, r7, #7
   13180:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   13182:	68fb      	ldr	r3, [r7, #12]
   13184:	795b      	ldrb	r3, [r3, #5]
   13186:	2b01      	cmp	r3, #1
   13188:	d001      	beq.n	1318e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   1318a:	2315      	movs	r3, #21
   1318c:	e05c      	b.n	13248 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   1318e:	68fb      	ldr	r3, [r7, #12]
   13190:	7a1b      	ldrb	r3, [r3, #8]
   13192:	2201      	movs	r2, #1
   13194:	4053      	eors	r3, r2
   13196:	b2db      	uxtb	r3, r3
   13198:	2b00      	cmp	r3, #0
   1319a:	d054      	beq.n	13246 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   1319c:	1dfb      	adds	r3, r7, #7
   1319e:	781b      	ldrb	r3, [r3, #0]
   131a0:	2b00      	cmp	r3, #0
   131a2:	d04a      	beq.n	1323a <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   131a4:	68bb      	ldr	r3, [r7, #8]
   131a6:	785b      	ldrb	r3, [r3, #1]
   131a8:	2b00      	cmp	r3, #0
   131aa:	d03f      	beq.n	1322c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   131ac:	68fb      	ldr	r3, [r7, #12]
   131ae:	0018      	movs	r0, r3
   131b0:	4b27      	ldr	r3, [pc, #156]	; (13250 <spi_select_slave+0xdc>)
   131b2:	4798      	blx	r3
   131b4:	0003      	movs	r3, r0
   131b6:	001a      	movs	r2, r3
   131b8:	2301      	movs	r3, #1
   131ba:	4053      	eors	r3, r2
   131bc:	b2db      	uxtb	r3, r3
   131be:	2b00      	cmp	r3, #0
   131c0:	d007      	beq.n	131d2 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   131c2:	68bb      	ldr	r3, [r7, #8]
   131c4:	781b      	ldrb	r3, [r3, #0]
   131c6:	2101      	movs	r1, #1
   131c8:	0018      	movs	r0, r3
   131ca:	4b22      	ldr	r3, [pc, #136]	; (13254 <spi_select_slave+0xe0>)
   131cc:	4798      	blx	r3
					return STATUS_BUSY;
   131ce:	2305      	movs	r3, #5
   131d0:	e03a      	b.n	13248 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   131d2:	68bb      	ldr	r3, [r7, #8]
   131d4:	781b      	ldrb	r3, [r3, #0]
   131d6:	2100      	movs	r1, #0
   131d8:	0018      	movs	r0, r3
   131da:	4b1e      	ldr	r3, [pc, #120]	; (13254 <spi_select_slave+0xe0>)
   131dc:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   131de:	68bb      	ldr	r3, [r7, #8]
   131e0:	789b      	ldrb	r3, [r3, #2]
   131e2:	b29a      	uxth	r2, r3
   131e4:	68fb      	ldr	r3, [r7, #12]
   131e6:	0011      	movs	r1, r2
   131e8:	0018      	movs	r0, r3
   131ea:	4b1b      	ldr	r3, [pc, #108]	; (13258 <spi_select_slave+0xe4>)
   131ec:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   131ee:	68fb      	ldr	r3, [r7, #12]
   131f0:	79db      	ldrb	r3, [r3, #7]
   131f2:	2201      	movs	r2, #1
   131f4:	4053      	eors	r3, r2
   131f6:	b2db      	uxtb	r3, r3
   131f8:	2b00      	cmp	r3, #0
   131fa:	d024      	beq.n	13246 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   131fc:	46c0      	nop			; (mov r8, r8)
   131fe:	68fb      	ldr	r3, [r7, #12]
   13200:	0018      	movs	r0, r3
   13202:	4b16      	ldr	r3, [pc, #88]	; (1325c <spi_select_slave+0xe8>)
   13204:	4798      	blx	r3
   13206:	0003      	movs	r3, r0
   13208:	001a      	movs	r2, r3
   1320a:	2301      	movs	r3, #1
   1320c:	4053      	eors	r3, r2
   1320e:	b2db      	uxtb	r3, r3
   13210:	2b00      	cmp	r3, #0
   13212:	d1f4      	bne.n	131fe <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   13214:	2316      	movs	r3, #22
   13216:	18fb      	adds	r3, r7, r3
   13218:	2200      	movs	r2, #0
   1321a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   1321c:	2316      	movs	r3, #22
   1321e:	18fa      	adds	r2, r7, r3
   13220:	68fb      	ldr	r3, [r7, #12]
   13222:	0011      	movs	r1, r2
   13224:	0018      	movs	r0, r3
   13226:	4b0e      	ldr	r3, [pc, #56]	; (13260 <spi_select_slave+0xec>)
   13228:	4798      	blx	r3
   1322a:	e00c      	b.n	13246 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   1322c:	68bb      	ldr	r3, [r7, #8]
   1322e:	781b      	ldrb	r3, [r3, #0]
   13230:	2100      	movs	r1, #0
   13232:	0018      	movs	r0, r3
   13234:	4b07      	ldr	r3, [pc, #28]	; (13254 <spi_select_slave+0xe0>)
   13236:	4798      	blx	r3
   13238:	e005      	b.n	13246 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   1323a:	68bb      	ldr	r3, [r7, #8]
   1323c:	781b      	ldrb	r3, [r3, #0]
   1323e:	2101      	movs	r1, #1
   13240:	0018      	movs	r0, r3
   13242:	4b04      	ldr	r3, [pc, #16]	; (13254 <spi_select_slave+0xe0>)
   13244:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   13246:	2300      	movs	r3, #0
}
   13248:	0018      	movs	r0, r3
   1324a:	46bd      	mov	sp, r7
   1324c:	b006      	add	sp, #24
   1324e:	bd80      	pop	{r7, pc}
   13250:	00012a89 	.word	0x00012a89
   13254:	00012979 	.word	0x00012979
   13258:	00012ad9 	.word	0x00012ad9
   1325c:	00012ab1 	.word	0x00012ab1
   13260:	00012b21 	.word	0x00012b21

00013264 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   13264:	b580      	push	{r7, lr}
   13266:	b08a      	sub	sp, #40	; 0x28
   13268:	af00      	add	r7, sp, #0
   1326a:	60f8      	str	r0, [r7, #12]
   1326c:	60b9      	str	r1, [r7, #8]
   1326e:	1dbb      	adds	r3, r7, #6
   13270:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   13272:	68fb      	ldr	r3, [r7, #12]
   13274:	2238      	movs	r2, #56	; 0x38
   13276:	5c9b      	ldrb	r3, [r3, r2]
   13278:	b2db      	uxtb	r3, r3
   1327a:	2b05      	cmp	r3, #5
   1327c:	d101      	bne.n	13282 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   1327e:	2305      	movs	r3, #5
   13280:	e170      	b.n	13564 <spi_write_buffer_wait+0x300>
	}
#  endif

	if (length == 0) {
   13282:	1dbb      	adds	r3, r7, #6
   13284:	881b      	ldrh	r3, [r3, #0]
   13286:	2b00      	cmp	r3, #0
   13288:	d101      	bne.n	1328e <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   1328a:	2317      	movs	r3, #23
   1328c:	e16a      	b.n	13564 <spi_write_buffer_wait+0x300>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   1328e:	68fb      	ldr	r3, [r7, #12]
   13290:	795b      	ldrb	r3, [r3, #5]
   13292:	2b00      	cmp	r3, #0
   13294:	d109      	bne.n	132aa <spi_write_buffer_wait+0x46>
   13296:	68fb      	ldr	r3, [r7, #12]
   13298:	0018      	movs	r0, r3
   1329a:	4bb4      	ldr	r3, [pc, #720]	; (1356c <spi_write_buffer_wait+0x308>)
   1329c:	4798      	blx	r3
   1329e:	1e03      	subs	r3, r0, #0
   132a0:	d003      	beq.n	132aa <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   132a2:	68fb      	ldr	r3, [r7, #12]
   132a4:	0018      	movs	r0, r3
   132a6:	4bb2      	ldr	r3, [pc, #712]	; (13570 <spi_write_buffer_wait+0x30c>)
   132a8:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
   132aa:	2326      	movs	r3, #38	; 0x26
   132ac:	18fb      	adds	r3, r7, r3
   132ae:	2200      	movs	r2, #0
   132b0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   132b2:	2324      	movs	r3, #36	; 0x24
   132b4:	18fb      	adds	r3, r7, r3
   132b6:	1dba      	adds	r2, r7, #6
   132b8:	8812      	ldrh	r2, [r2, #0]
   132ba:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   132bc:	e0fe      	b.n	134bc <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   132be:	68fb      	ldr	r3, [r7, #12]
   132c0:	795b      	ldrb	r3, [r3, #5]
   132c2:	2b00      	cmp	r3, #0
   132c4:	d12a      	bne.n	1331c <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   132c6:	2300      	movs	r3, #0
   132c8:	623b      	str	r3, [r7, #32]
   132ca:	e008      	b.n	132de <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
   132cc:	68fb      	ldr	r3, [r7, #12]
   132ce:	0018      	movs	r0, r3
   132d0:	4ba8      	ldr	r3, [pc, #672]	; (13574 <spi_write_buffer_wait+0x310>)
   132d2:	4798      	blx	r3
   132d4:	1e03      	subs	r3, r0, #0
   132d6:	d107      	bne.n	132e8 <spi_write_buffer_wait+0x84>
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   132d8:	6a3b      	ldr	r3, [r7, #32]
   132da:	3301      	adds	r3, #1
   132dc:	623b      	str	r3, [r7, #32]
   132de:	6a3b      	ldr	r3, [r7, #32]
   132e0:	4aa5      	ldr	r2, [pc, #660]	; (13578 <spi_write_buffer_wait+0x314>)
   132e2:	4293      	cmp	r3, r2
   132e4:	d9f2      	bls.n	132cc <spi_write_buffer_wait+0x68>
   132e6:	e000      	b.n	132ea <spi_write_buffer_wait+0x86>
				if (spi_is_ready_to_write(module)) {
					break;
   132e8:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	0018      	movs	r0, r3
   132ee:	4b9f      	ldr	r3, [pc, #636]	; (1356c <spi_write_buffer_wait+0x308>)
   132f0:	4798      	blx	r3
   132f2:	1e03      	subs	r3, r0, #0
   132f4:	d005      	beq.n	13302 <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
   132f6:	68fb      	ldr	r3, [r7, #12]
   132f8:	0018      	movs	r0, r3
   132fa:	4b9d      	ldr	r3, [pc, #628]	; (13570 <spi_write_buffer_wait+0x30c>)
   132fc:	4798      	blx	r3
				return STATUS_ABORTED;
   132fe:	2304      	movs	r3, #4
   13300:	e130      	b.n	13564 <spi_write_buffer_wait+0x300>
			}

			if (!spi_is_ready_to_write(module)) {
   13302:	68fb      	ldr	r3, [r7, #12]
   13304:	0018      	movs	r0, r3
   13306:	4b9b      	ldr	r3, [pc, #620]	; (13574 <spi_write_buffer_wait+0x310>)
   13308:	4798      	blx	r3
   1330a:	0003      	movs	r3, r0
   1330c:	001a      	movs	r2, r3
   1330e:	2301      	movs	r3, #1
   13310:	4053      	eors	r3, r2
   13312:	b2db      	uxtb	r3, r3
   13314:	2b00      	cmp	r3, #0
   13316:	d001      	beq.n	1331c <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
   13318:	2312      	movs	r3, #18
   1331a:	e123      	b.n	13564 <spi_write_buffer_wait+0x300>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   1331c:	46c0      	nop			; (mov r8, r8)
   1331e:	68fb      	ldr	r3, [r7, #12]
   13320:	0018      	movs	r0, r3
   13322:	4b94      	ldr	r3, [pc, #592]	; (13574 <spi_write_buffer_wait+0x310>)
   13324:	4798      	blx	r3
   13326:	0003      	movs	r3, r0
   13328:	001a      	movs	r2, r3
   1332a:	2301      	movs	r3, #1
   1332c:	4053      	eors	r3, r2
   1332e:	b2db      	uxtb	r3, r3
   13330:	2b00      	cmp	r3, #0
   13332:	d1f4      	bne.n	1331e <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   13334:	2326      	movs	r3, #38	; 0x26
   13336:	18fb      	adds	r3, r7, r3
   13338:	881b      	ldrh	r3, [r3, #0]
   1333a:	2226      	movs	r2, #38	; 0x26
   1333c:	18ba      	adds	r2, r7, r2
   1333e:	1c59      	adds	r1, r3, #1
   13340:	8011      	strh	r1, [r2, #0]
   13342:	001a      	movs	r2, r3
   13344:	68bb      	ldr	r3, [r7, #8]
   13346:	189b      	adds	r3, r3, r2
   13348:	781a      	ldrb	r2, [r3, #0]
   1334a:	231e      	movs	r3, #30
   1334c:	18fb      	adds	r3, r7, r3
   1334e:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   13350:	68fb      	ldr	r3, [r7, #12]
   13352:	799b      	ldrb	r3, [r3, #6]
   13354:	2b01      	cmp	r3, #1
   13356:	d115      	bne.n	13384 <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
   13358:	2326      	movs	r3, #38	; 0x26
   1335a:	18fb      	adds	r3, r7, r3
   1335c:	881b      	ldrh	r3, [r3, #0]
   1335e:	2226      	movs	r2, #38	; 0x26
   13360:	18ba      	adds	r2, r7, r2
   13362:	1c59      	adds	r1, r3, #1
   13364:	8011      	strh	r1, [r2, #0]
   13366:	001a      	movs	r2, r3
   13368:	68bb      	ldr	r3, [r7, #8]
   1336a:	189b      	adds	r3, r3, r2
   1336c:	781b      	ldrb	r3, [r3, #0]
   1336e:	021b      	lsls	r3, r3, #8
   13370:	b21a      	sxth	r2, r3
   13372:	231e      	movs	r3, #30
   13374:	18fb      	adds	r3, r7, r3
   13376:	2100      	movs	r1, #0
   13378:	5e5b      	ldrsh	r3, [r3, r1]
   1337a:	4313      	orrs	r3, r2
   1337c:	b21a      	sxth	r2, r3
   1337e:	231e      	movs	r3, #30
   13380:	18fb      	adds	r3, r7, r3
   13382:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   13384:	231e      	movs	r3, #30
   13386:	18fb      	adds	r3, r7, r3
   13388:	881a      	ldrh	r2, [r3, #0]
   1338a:	68fb      	ldr	r3, [r7, #12]
   1338c:	0011      	movs	r1, r2
   1338e:	0018      	movs	r0, r3
   13390:	4b7a      	ldr	r3, [pc, #488]	; (1357c <spi_write_buffer_wait+0x318>)
   13392:	4798      	blx	r3

		if (module->receiver_enabled) {
   13394:	68fb      	ldr	r3, [r7, #12]
   13396:	79db      	ldrb	r3, [r3, #7]
   13398:	2224      	movs	r2, #36	; 0x24
   1339a:	18ba      	adds	r2, r7, r2
   1339c:	2124      	movs	r1, #36	; 0x24
   1339e:	1879      	adds	r1, r7, r1
   133a0:	8809      	ldrh	r1, [r1, #0]
   133a2:	8011      	strh	r1, [r2, #0]
   133a4:	2b00      	cmp	r3, #0
   133a6:	d100      	bne.n	133aa <spi_write_buffer_wait+0x146>
   133a8:	e088      	b.n	134bc <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
   133aa:	68fb      	ldr	r3, [r7, #12]
   133ac:	795b      	ldrb	r3, [r3, #5]
   133ae:	2b00      	cmp	r3, #0
   133b0:	d000      	beq.n	133b4 <spi_write_buffer_wait+0x150>
   133b2:	e069      	b.n	13488 <spi_write_buffer_wait+0x224>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   133b4:	2300      	movs	r3, #0
   133b6:	61bb      	str	r3, [r7, #24]
   133b8:	e047      	b.n	1344a <spi_write_buffer_wait+0x1e6>
					if (length && spi_is_ready_to_write(module)) {
   133ba:	1dbb      	adds	r3, r7, #6
   133bc:	881b      	ldrh	r3, [r3, #0]
   133be:	2b00      	cmp	r3, #0
   133c0:	d03a      	beq.n	13438 <spi_write_buffer_wait+0x1d4>
   133c2:	68fb      	ldr	r3, [r7, #12]
   133c4:	0018      	movs	r0, r3
   133c6:	4b6b      	ldr	r3, [pc, #428]	; (13574 <spi_write_buffer_wait+0x310>)
   133c8:	4798      	blx	r3
   133ca:	1e03      	subs	r3, r0, #0
   133cc:	d034      	beq.n	13438 <spi_write_buffer_wait+0x1d4>
						data_to_send = tx_data[tx_pos++];
   133ce:	2326      	movs	r3, #38	; 0x26
   133d0:	18fb      	adds	r3, r7, r3
   133d2:	881b      	ldrh	r3, [r3, #0]
   133d4:	2226      	movs	r2, #38	; 0x26
   133d6:	18ba      	adds	r2, r7, r2
   133d8:	1c59      	adds	r1, r3, #1
   133da:	8011      	strh	r1, [r2, #0]
   133dc:	001a      	movs	r2, r3
   133de:	68bb      	ldr	r3, [r7, #8]
   133e0:	189b      	adds	r3, r3, r2
   133e2:	781a      	ldrb	r2, [r3, #0]
   133e4:	231e      	movs	r3, #30
   133e6:	18fb      	adds	r3, r7, r3
   133e8:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   133ea:	68fb      	ldr	r3, [r7, #12]
   133ec:	799b      	ldrb	r3, [r3, #6]
   133ee:	2b01      	cmp	r3, #1
   133f0:	d115      	bne.n	1341e <spi_write_buffer_wait+0x1ba>
							data_to_send |= (tx_data[tx_pos++] << 8);
   133f2:	2326      	movs	r3, #38	; 0x26
   133f4:	18fb      	adds	r3, r7, r3
   133f6:	881b      	ldrh	r3, [r3, #0]
   133f8:	2226      	movs	r2, #38	; 0x26
   133fa:	18ba      	adds	r2, r7, r2
   133fc:	1c59      	adds	r1, r3, #1
   133fe:	8011      	strh	r1, [r2, #0]
   13400:	001a      	movs	r2, r3
   13402:	68bb      	ldr	r3, [r7, #8]
   13404:	189b      	adds	r3, r3, r2
   13406:	781b      	ldrb	r3, [r3, #0]
   13408:	021b      	lsls	r3, r3, #8
   1340a:	b21a      	sxth	r2, r3
   1340c:	231e      	movs	r3, #30
   1340e:	18fb      	adds	r3, r7, r3
   13410:	2100      	movs	r1, #0
   13412:	5e5b      	ldrsh	r3, [r3, r1]
   13414:	4313      	orrs	r3, r2
   13416:	b21a      	sxth	r2, r3
   13418:	231e      	movs	r3, #30
   1341a:	18fb      	adds	r3, r7, r3
   1341c:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
   1341e:	231e      	movs	r3, #30
   13420:	18fb      	adds	r3, r7, r3
   13422:	881a      	ldrh	r2, [r3, #0]
   13424:	68fb      	ldr	r3, [r7, #12]
   13426:	0011      	movs	r1, r2
   13428:	0018      	movs	r0, r3
   1342a:	4b54      	ldr	r3, [pc, #336]	; (1357c <spi_write_buffer_wait+0x318>)
   1342c:	4798      	blx	r3
						length--;
   1342e:	1dbb      	adds	r3, r7, #6
   13430:	881a      	ldrh	r2, [r3, #0]
   13432:	1dbb      	adds	r3, r7, #6
   13434:	3a01      	subs	r2, #1
   13436:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
   13438:	68fb      	ldr	r3, [r7, #12]
   1343a:	0018      	movs	r0, r3
   1343c:	4b50      	ldr	r3, [pc, #320]	; (13580 <spi_write_buffer_wait+0x31c>)
   1343e:	4798      	blx	r3
   13440:	1e03      	subs	r3, r0, #0
   13442:	d107      	bne.n	13454 <spi_write_buffer_wait+0x1f0>

		if (module->receiver_enabled) {
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   13444:	69bb      	ldr	r3, [r7, #24]
   13446:	3301      	adds	r3, #1
   13448:	61bb      	str	r3, [r7, #24]
   1344a:	69bb      	ldr	r3, [r7, #24]
   1344c:	4a4a      	ldr	r2, [pc, #296]	; (13578 <spi_write_buffer_wait+0x314>)
   1344e:	4293      	cmp	r3, r2
   13450:	d9b3      	bls.n	133ba <spi_write_buffer_wait+0x156>
   13452:	e000      	b.n	13456 <spi_write_buffer_wait+0x1f2>
						/* Write the data to send */
						spi_write(module, data_to_send);
						length--;
					}
					if (spi_is_ready_to_read(module)) {
						break;
   13454:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
   13456:	68fb      	ldr	r3, [r7, #12]
   13458:	0018      	movs	r0, r3
   1345a:	4b44      	ldr	r3, [pc, #272]	; (1356c <spi_write_buffer_wait+0x308>)
   1345c:	4798      	blx	r3
   1345e:	1e03      	subs	r3, r0, #0
   13460:	d005      	beq.n	1346e <spi_write_buffer_wait+0x20a>
					_spi_clear_tx_complete_flag(module);
   13462:	68fb      	ldr	r3, [r7, #12]
   13464:	0018      	movs	r0, r3
   13466:	4b42      	ldr	r3, [pc, #264]	; (13570 <spi_write_buffer_wait+0x30c>)
   13468:	4798      	blx	r3
					return STATUS_ABORTED;
   1346a:	2304      	movs	r3, #4
   1346c:	e07a      	b.n	13564 <spi_write_buffer_wait+0x300>
				}

				if (!spi_is_ready_to_read(module)) {
   1346e:	68fb      	ldr	r3, [r7, #12]
   13470:	0018      	movs	r0, r3
   13472:	4b43      	ldr	r3, [pc, #268]	; (13580 <spi_write_buffer_wait+0x31c>)
   13474:	4798      	blx	r3
   13476:	0003      	movs	r3, r0
   13478:	001a      	movs	r2, r3
   1347a:	2301      	movs	r3, #1
   1347c:	4053      	eors	r3, r2
   1347e:	b2db      	uxtb	r3, r3
   13480:	2b00      	cmp	r3, #0
   13482:	d001      	beq.n	13488 <spi_write_buffer_wait+0x224>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   13484:	2312      	movs	r3, #18
   13486:	e06d      	b.n	13564 <spi_write_buffer_wait+0x300>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   13488:	46c0      	nop			; (mov r8, r8)
   1348a:	68fb      	ldr	r3, [r7, #12]
   1348c:	0018      	movs	r0, r3
   1348e:	4b3c      	ldr	r3, [pc, #240]	; (13580 <spi_write_buffer_wait+0x31c>)
   13490:	4798      	blx	r3
   13492:	0003      	movs	r3, r0
   13494:	001a      	movs	r2, r3
   13496:	2301      	movs	r3, #1
   13498:	4053      	eors	r3, r2
   1349a:	b2db      	uxtb	r3, r3
   1349c:	2b00      	cmp	r3, #0
   1349e:	d1f4      	bne.n	1348a <spi_write_buffer_wait+0x226>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   134a0:	2312      	movs	r3, #18
   134a2:	18fa      	adds	r2, r7, r3
   134a4:	68fb      	ldr	r3, [r7, #12]
   134a6:	0011      	movs	r1, r2
   134a8:	0018      	movs	r0, r3
   134aa:	4b36      	ldr	r3, [pc, #216]	; (13584 <spi_write_buffer_wait+0x320>)
   134ac:	4798      	blx	r3
			flush_length--;
   134ae:	2324      	movs	r3, #36	; 0x24
   134b0:	18fb      	adds	r3, r7, r3
   134b2:	881a      	ldrh	r2, [r3, #0]
   134b4:	2324      	movs	r3, #36	; 0x24
   134b6:	18fb      	adds	r3, r7, r3
   134b8:	3a01      	subs	r2, #1
   134ba:	801a      	strh	r2, [r3, #0]

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
   134bc:	1dbb      	adds	r3, r7, #6
   134be:	881b      	ldrh	r3, [r3, #0]
   134c0:	1dba      	adds	r2, r7, #6
   134c2:	1e59      	subs	r1, r3, #1
   134c4:	8011      	strh	r1, [r2, #0]
   134c6:	2b00      	cmp	r3, #0
   134c8:	d000      	beq.n	134cc <spi_write_buffer_wait+0x268>
   134ca:	e6f8      	b.n	132be <spi_write_buffer_wait+0x5a>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   134cc:	68fb      	ldr	r3, [r7, #12]
   134ce:	795b      	ldrb	r3, [r3, #5]
   134d0:	2b01      	cmp	r3, #1
   134d2:	d10b      	bne.n	134ec <spi_write_buffer_wait+0x288>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   134d4:	46c0      	nop			; (mov r8, r8)
   134d6:	68fb      	ldr	r3, [r7, #12]
   134d8:	0018      	movs	r0, r3
   134da:	4b24      	ldr	r3, [pc, #144]	; (1356c <spi_write_buffer_wait+0x308>)
   134dc:	4798      	blx	r3
   134de:	0003      	movs	r3, r0
   134e0:	001a      	movs	r2, r3
   134e2:	2301      	movs	r3, #1
   134e4:	4053      	eors	r3, r2
   134e6:	b2db      	uxtb	r3, r3
   134e8:	2b00      	cmp	r3, #0
   134ea:	d1f4      	bne.n	134d6 <spi_write_buffer_wait+0x272>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
   134ec:	68fb      	ldr	r3, [r7, #12]
   134ee:	795b      	ldrb	r3, [r3, #5]
   134f0:	2b00      	cmp	r3, #0
   134f2:	d136      	bne.n	13562 <spi_write_buffer_wait+0x2fe>
		if (module->receiver_enabled) {
   134f4:	68fb      	ldr	r3, [r7, #12]
   134f6:	79db      	ldrb	r3, [r3, #7]
   134f8:	2b00      	cmp	r3, #0
   134fa:	d032      	beq.n	13562 <spi_write_buffer_wait+0x2fe>
			while (flush_length) {
   134fc:	e02c      	b.n	13558 <spi_write_buffer_wait+0x2f4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   134fe:	2300      	movs	r3, #0
   13500:	617b      	str	r3, [r7, #20]
   13502:	e008      	b.n	13516 <spi_write_buffer_wait+0x2b2>
					if (spi_is_ready_to_read(module)) {
   13504:	68fb      	ldr	r3, [r7, #12]
   13506:	0018      	movs	r0, r3
   13508:	4b1d      	ldr	r3, [pc, #116]	; (13580 <spi_write_buffer_wait+0x31c>)
   1350a:	4798      	blx	r3
   1350c:	1e03      	subs	r3, r0, #0
   1350e:	d107      	bne.n	13520 <spi_write_buffer_wait+0x2bc>
#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   13510:	697b      	ldr	r3, [r7, #20]
   13512:	3301      	adds	r3, #1
   13514:	617b      	str	r3, [r7, #20]
   13516:	697b      	ldr	r3, [r7, #20]
   13518:	4a17      	ldr	r2, [pc, #92]	; (13578 <spi_write_buffer_wait+0x314>)
   1351a:	4293      	cmp	r3, r2
   1351c:	d9f2      	bls.n	13504 <spi_write_buffer_wait+0x2a0>
   1351e:	e000      	b.n	13522 <spi_write_buffer_wait+0x2be>
					if (spi_is_ready_to_read(module)) {
						break;
   13520:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
   13522:	68fb      	ldr	r3, [r7, #12]
   13524:	0018      	movs	r0, r3
   13526:	4b16      	ldr	r3, [pc, #88]	; (13580 <spi_write_buffer_wait+0x31c>)
   13528:	4798      	blx	r3
   1352a:	0003      	movs	r3, r0
   1352c:	001a      	movs	r2, r3
   1352e:	2301      	movs	r3, #1
   13530:	4053      	eors	r3, r2
   13532:	b2db      	uxtb	r3, r3
   13534:	2b00      	cmp	r3, #0
   13536:	d001      	beq.n	1353c <spi_write_buffer_wait+0x2d8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   13538:	2312      	movs	r3, #18
   1353a:	e013      	b.n	13564 <spi_write_buffer_wait+0x300>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
   1353c:	2310      	movs	r3, #16
   1353e:	18fa      	adds	r2, r7, r3
   13540:	68fb      	ldr	r3, [r7, #12]
   13542:	0011      	movs	r1, r2
   13544:	0018      	movs	r0, r3
   13546:	4b0f      	ldr	r3, [pc, #60]	; (13584 <spi_write_buffer_wait+0x320>)
   13548:	4798      	blx	r3
				flush_length--;
   1354a:	2324      	movs	r3, #36	; 0x24
   1354c:	18fb      	adds	r3, r7, r3
   1354e:	881a      	ldrh	r2, [r3, #0]
   13550:	2324      	movs	r3, #36	; 0x24
   13552:	18fb      	adds	r3, r7, r3
   13554:	3a01      	subs	r2, #1
   13556:	801a      	strh	r2, [r3, #0]
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
   13558:	2324      	movs	r3, #36	; 0x24
   1355a:	18fb      	adds	r3, r7, r3
   1355c:	881b      	ldrh	r3, [r3, #0]
   1355e:	2b00      	cmp	r3, #0
   13560:	d1cd      	bne.n	134fe <spi_write_buffer_wait+0x29a>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   13562:	2300      	movs	r3, #0
}
   13564:	0018      	movs	r0, r3
   13566:	46bd      	mov	sp, r7
   13568:	b00a      	add	sp, #40	; 0x28
   1356a:	bd80      	pop	{r7, pc}
   1356c:	00012a61 	.word	0x00012a61
   13570:	00012ba9 	.word	0x00012ba9
   13574:	00012a89 	.word	0x00012a89
   13578:	00002710 	.word	0x00002710
   1357c:	00012ad9 	.word	0x00012ad9
   13580:	00012ab1 	.word	0x00012ab1
   13584:	00012b21 	.word	0x00012b21

00013588 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   13588:	b580      	push	{r7, lr}
   1358a:	b084      	sub	sp, #16
   1358c:	af00      	add	r7, sp, #0
   1358e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   13590:	687b      	ldr	r3, [r7, #4]
   13592:	681b      	ldr	r3, [r3, #0]
   13594:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   13596:	687b      	ldr	r3, [r7, #4]
   13598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1359a:	781b      	ldrb	r3, [r3, #0]
   1359c:	b2da      	uxtb	r2, r3
   1359e:	230e      	movs	r3, #14
   135a0:	18fb      	adds	r3, r7, r3
   135a2:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   135a4:	687b      	ldr	r3, [r7, #4]
   135a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   135a8:	1c5a      	adds	r2, r3, #1
   135aa:	687b      	ldr	r3, [r7, #4]
   135ac:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   135ae:	687b      	ldr	r3, [r7, #4]
   135b0:	799b      	ldrb	r3, [r3, #6]
   135b2:	2b01      	cmp	r3, #1
   135b4:	d113      	bne.n	135de <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   135b6:	687b      	ldr	r3, [r7, #4]
   135b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   135ba:	781b      	ldrb	r3, [r3, #0]
   135bc:	b2db      	uxtb	r3, r3
   135be:	021b      	lsls	r3, r3, #8
   135c0:	b21a      	sxth	r2, r3
   135c2:	230e      	movs	r3, #14
   135c4:	18fb      	adds	r3, r7, r3
   135c6:	2100      	movs	r1, #0
   135c8:	5e5b      	ldrsh	r3, [r3, r1]
   135ca:	4313      	orrs	r3, r2
   135cc:	b21a      	sxth	r2, r3
   135ce:	230e      	movs	r3, #14
   135d0:	18fb      	adds	r3, r7, r3
   135d2:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   135d4:	687b      	ldr	r3, [r7, #4]
   135d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   135d8:	1c5a      	adds	r2, r3, #1
   135da:	687b      	ldr	r3, [r7, #4]
   135dc:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   135de:	230e      	movs	r3, #14
   135e0:	18fb      	adds	r3, r7, r3
   135e2:	881b      	ldrh	r3, [r3, #0]
   135e4:	05db      	lsls	r3, r3, #23
   135e6:	0dda      	lsrs	r2, r3, #23
   135e8:	68bb      	ldr	r3, [r7, #8]
   135ea:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   135ec:	687b      	ldr	r3, [r7, #4]
   135ee:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   135f0:	b29b      	uxth	r3, r3
   135f2:	3b01      	subs	r3, #1
   135f4:	b29a      	uxth	r2, r3
   135f6:	687b      	ldr	r3, [r7, #4]
   135f8:	869a      	strh	r2, [r3, #52]	; 0x34
}
   135fa:	46c0      	nop			; (mov r8, r8)
   135fc:	46bd      	mov	sp, r7
   135fe:	b004      	add	sp, #16
   13600:	bd80      	pop	{r7, pc}
   13602:	46c0      	nop			; (mov r8, r8)

00013604 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   13604:	b580      	push	{r7, lr}
   13606:	b084      	sub	sp, #16
   13608:	af00      	add	r7, sp, #0
   1360a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1360c:	687b      	ldr	r3, [r7, #4]
   1360e:	681b      	ldr	r3, [r3, #0]
   13610:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   13612:	4b08      	ldr	r3, [pc, #32]	; (13634 <_spi_write_dummy+0x30>)
   13614:	881b      	ldrh	r3, [r3, #0]
   13616:	001a      	movs	r2, r3
   13618:	68fb      	ldr	r3, [r7, #12]
   1361a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   1361c:	687b      	ldr	r3, [r7, #4]
   1361e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   13620:	b29b      	uxth	r3, r3
   13622:	3b01      	subs	r3, #1
   13624:	b29a      	uxth	r2, r3
   13626:	687b      	ldr	r3, [r7, #4]
   13628:	865a      	strh	r2, [r3, #50]	; 0x32
}
   1362a:	46c0      	nop			; (mov r8, r8)
   1362c:	46bd      	mov	sp, r7
   1362e:	b004      	add	sp, #16
   13630:	bd80      	pop	{r7, pc}
   13632:	46c0      	nop			; (mov r8, r8)
   13634:	20000474 	.word	0x20000474

00013638 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   13638:	b580      	push	{r7, lr}
   1363a:	b084      	sub	sp, #16
   1363c:	af00      	add	r7, sp, #0
   1363e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   13640:	687b      	ldr	r3, [r7, #4]
   13642:	681b      	ldr	r3, [r3, #0]
   13644:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   13646:	230a      	movs	r3, #10
   13648:	18fb      	adds	r3, r7, r3
   1364a:	2200      	movs	r2, #0
   1364c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   1364e:	68fb      	ldr	r3, [r7, #12]
   13650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13652:	230a      	movs	r3, #10
   13654:	18fb      	adds	r3, r7, r3
   13656:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   13658:	687b      	ldr	r3, [r7, #4]
   1365a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   1365c:	b29b      	uxth	r3, r3
   1365e:	3b01      	subs	r3, #1
   13660:	b29a      	uxth	r2, r3
   13662:	687b      	ldr	r3, [r7, #4]
   13664:	865a      	strh	r2, [r3, #50]	; 0x32
}
   13666:	46c0      	nop			; (mov r8, r8)
   13668:	46bd      	mov	sp, r7
   1366a:	b004      	add	sp, #16
   1366c:	bd80      	pop	{r7, pc}
   1366e:	46c0      	nop			; (mov r8, r8)

00013670 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   13670:	b580      	push	{r7, lr}
   13672:	b084      	sub	sp, #16
   13674:	af00      	add	r7, sp, #0
   13676:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   13678:	687b      	ldr	r3, [r7, #4]
   1367a:	681b      	ldr	r3, [r3, #0]
   1367c:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   1367e:	68fb      	ldr	r3, [r7, #12]
   13680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13682:	b29a      	uxth	r2, r3
   13684:	230a      	movs	r3, #10
   13686:	18fb      	adds	r3, r7, r3
   13688:	05d2      	lsls	r2, r2, #23
   1368a:	0dd2      	lsrs	r2, r2, #23
   1368c:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   1368e:	687b      	ldr	r3, [r7, #4]
   13690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13692:	220a      	movs	r2, #10
   13694:	18ba      	adds	r2, r7, r2
   13696:	8812      	ldrh	r2, [r2, #0]
   13698:	b2d2      	uxtb	r2, r2
   1369a:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   1369c:	687b      	ldr	r3, [r7, #4]
   1369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136a0:	1c5a      	adds	r2, r3, #1
   136a2:	687b      	ldr	r3, [r7, #4]
   136a4:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   136a6:	687b      	ldr	r3, [r7, #4]
   136a8:	799b      	ldrb	r3, [r3, #6]
   136aa:	2b01      	cmp	r3, #1
   136ac:	d10d      	bne.n	136ca <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   136ae:	687b      	ldr	r3, [r7, #4]
   136b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136b2:	220a      	movs	r2, #10
   136b4:	18ba      	adds	r2, r7, r2
   136b6:	8812      	ldrh	r2, [r2, #0]
   136b8:	0a12      	lsrs	r2, r2, #8
   136ba:	b292      	uxth	r2, r2
   136bc:	b2d2      	uxtb	r2, r2
   136be:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   136c0:	687b      	ldr	r3, [r7, #4]
   136c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   136c4:	1c5a      	adds	r2, r3, #1
   136c6:	687b      	ldr	r3, [r7, #4]
   136c8:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   136ca:	687b      	ldr	r3, [r7, #4]
   136cc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   136ce:	b29b      	uxth	r3, r3
   136d0:	3b01      	subs	r3, #1
   136d2:	b29a      	uxth	r2, r3
   136d4:	687b      	ldr	r3, [r7, #4]
   136d6:	861a      	strh	r2, [r3, #48]	; 0x30
}
   136d8:	46c0      	nop			; (mov r8, r8)
   136da:	46bd      	mov	sp, r7
   136dc:	b004      	add	sp, #16
   136de:	bd80      	pop	{r7, pc}

000136e0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   136e0:	b580      	push	{r7, lr}
   136e2:	b086      	sub	sp, #24
   136e4:	af00      	add	r7, sp, #0
   136e6:	0002      	movs	r2, r0
   136e8:	1dfb      	adds	r3, r7, #7
   136ea:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   136ec:	1dfb      	adds	r3, r7, #7
   136ee:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
   136f0:	4bb9      	ldr	r3, [pc, #740]	; (139d8 <_spi_interrupt_handler+0x2f8>)
   136f2:	0092      	lsls	r2, r2, #2
   136f4:	58d3      	ldr	r3, [r2, r3]
   136f6:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   136f8:	697b      	ldr	r3, [r7, #20]
   136fa:	681b      	ldr	r3, [r3, #0]
   136fc:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   136fe:	697b      	ldr	r3, [r7, #20]
   13700:	2237      	movs	r2, #55	; 0x37
   13702:	5c9a      	ldrb	r2, [r3, r2]
   13704:	697b      	ldr	r3, [r7, #20]
   13706:	2136      	movs	r1, #54	; 0x36
   13708:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
   1370a:	230f      	movs	r3, #15
   1370c:	18fb      	adds	r3, r7, r3
   1370e:	400a      	ands	r2, r1
   13710:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   13712:	693b      	ldr	r3, [r7, #16]
   13714:	7e1b      	ldrb	r3, [r3, #24]
   13716:	b2da      	uxtb	r2, r3
   13718:	230c      	movs	r3, #12
   1371a:	18fb      	adds	r3, r7, r3
   1371c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   1371e:	693b      	ldr	r3, [r7, #16]
   13720:	7d9b      	ldrb	r3, [r3, #22]
   13722:	b2db      	uxtb	r3, r3
   13724:	b29a      	uxth	r2, r3
   13726:	230c      	movs	r3, #12
   13728:	18fb      	adds	r3, r7, r3
   1372a:	210c      	movs	r1, #12
   1372c:	1879      	adds	r1, r7, r1
   1372e:	8809      	ldrh	r1, [r1, #0]
   13730:	400a      	ands	r2, r1
   13732:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   13734:	230c      	movs	r3, #12
   13736:	18fb      	adds	r3, r7, r3
   13738:	881b      	ldrh	r3, [r3, #0]
   1373a:	2201      	movs	r2, #1
   1373c:	4013      	ands	r3, r2
   1373e:	d041      	beq.n	137c4 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   13740:	697b      	ldr	r3, [r7, #20]
   13742:	795b      	ldrb	r3, [r3, #5]
   13744:	2b01      	cmp	r3, #1
   13746:	d110      	bne.n	1376a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   13748:	697b      	ldr	r3, [r7, #20]
   1374a:	7a5b      	ldrb	r3, [r3, #9]
   1374c:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1374e:	2b00      	cmp	r3, #0
   13750:	d10b      	bne.n	1376a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   13752:	697b      	ldr	r3, [r7, #20]
   13754:	0018      	movs	r0, r3
   13756:	4ba1      	ldr	r3, [pc, #644]	; (139dc <_spi_interrupt_handler+0x2fc>)
   13758:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   1375a:	697b      	ldr	r3, [r7, #20]
   1375c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   1375e:	b29b      	uxth	r3, r3
   13760:	2b00      	cmp	r3, #0
   13762:	d102      	bne.n	1376a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   13764:	693b      	ldr	r3, [r7, #16]
   13766:	2201      	movs	r2, #1
   13768:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   1376a:	697b      	ldr	r3, [r7, #20]
   1376c:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
   1376e:	2b01      	cmp	r3, #1
   13770:	d104      	bne.n	1377c <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
   13772:	697b      	ldr	r3, [r7, #20]
   13774:	7a5b      	ldrb	r3, [r3, #9]
   13776:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   13778:	2b00      	cmp	r3, #0
   1377a:	d108      	bne.n	1378e <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
   1377c:	697b      	ldr	r3, [r7, #20]
   1377e:	795b      	ldrb	r3, [r3, #5]
   13780:	2b00      	cmp	r3, #0
   13782:	d11f      	bne.n	137c4 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
   13784:	697b      	ldr	r3, [r7, #20]
   13786:	7a5b      	ldrb	r3, [r3, #9]
   13788:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
   1378a:	2b00      	cmp	r3, #0
   1378c:	d01a      	beq.n	137c4 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   1378e:	697b      	ldr	r3, [r7, #20]
   13790:	0018      	movs	r0, r3
   13792:	4b93      	ldr	r3, [pc, #588]	; (139e0 <_spi_interrupt_handler+0x300>)
   13794:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   13796:	697b      	ldr	r3, [r7, #20]
   13798:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   1379a:	b29b      	uxth	r3, r3
   1379c:	2b00      	cmp	r3, #0
   1379e:	d111      	bne.n	137c4 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   137a0:	693b      	ldr	r3, [r7, #16]
   137a2:	2201      	movs	r2, #1
   137a4:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   137a6:	697b      	ldr	r3, [r7, #20]
   137a8:	7a5b      	ldrb	r3, [r3, #9]
   137aa:	b2db      	uxtb	r3, r3
   137ac:	2b01      	cmp	r3, #1
   137ae:	d109      	bne.n	137c4 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
   137b0:	697b      	ldr	r3, [r7, #20]
   137b2:	79db      	ldrb	r3, [r3, #7]
   137b4:	2201      	movs	r2, #1
   137b6:	4053      	eors	r3, r2
   137b8:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
   137ba:	2b00      	cmp	r3, #0
   137bc:	d002      	beq.n	137c4 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   137be:	693b      	ldr	r3, [r7, #16]
   137c0:	2202      	movs	r2, #2
   137c2:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   137c4:	230c      	movs	r3, #12
   137c6:	18fb      	adds	r3, r7, r3
   137c8:	881b      	ldrh	r3, [r3, #0]
   137ca:	2204      	movs	r2, #4
   137cc:	4013      	ands	r3, r2
   137ce:	d100      	bne.n	137d2 <_spi_interrupt_handler+0xf2>
   137d0:	e07e      	b.n	138d0 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   137d2:	693b      	ldr	r3, [r7, #16]
   137d4:	8b5b      	ldrh	r3, [r3, #26]
   137d6:	b29b      	uxth	r3, r3
   137d8:	001a      	movs	r2, r3
   137da:	2304      	movs	r3, #4
   137dc:	4013      	ands	r3, r2
   137de:	d022      	beq.n	13826 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
   137e0:	697b      	ldr	r3, [r7, #20]
   137e2:	7a5b      	ldrb	r3, [r3, #9]
   137e4:	b2db      	uxtb	r3, r3
   137e6:	2b01      	cmp	r3, #1
   137e8:	d014      	beq.n	13814 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   137ea:	697b      	ldr	r3, [r7, #20]
   137ec:	2238      	movs	r2, #56	; 0x38
   137ee:	211e      	movs	r1, #30
   137f0:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   137f2:	697b      	ldr	r3, [r7, #20]
   137f4:	2203      	movs	r2, #3
   137f6:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   137f8:	693b      	ldr	r3, [r7, #16]
   137fa:	2205      	movs	r2, #5
   137fc:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   137fe:	230f      	movs	r3, #15
   13800:	18fb      	adds	r3, r7, r3
   13802:	781b      	ldrb	r3, [r3, #0]
   13804:	2208      	movs	r2, #8
   13806:	4013      	ands	r3, r2
   13808:	d004      	beq.n	13814 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   1380a:	697b      	ldr	r3, [r7, #20]
   1380c:	699b      	ldr	r3, [r3, #24]
   1380e:	697a      	ldr	r2, [r7, #20]
   13810:	0010      	movs	r0, r2
   13812:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   13814:	693b      	ldr	r3, [r7, #16]
   13816:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13818:	230a      	movs	r3, #10
   1381a:	18fb      	adds	r3, r7, r3
   1381c:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1381e:	693b      	ldr	r3, [r7, #16]
   13820:	2204      	movs	r2, #4
   13822:	835a      	strh	r2, [r3, #26]
   13824:	e054      	b.n	138d0 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   13826:	697b      	ldr	r3, [r7, #20]
   13828:	7a5b      	ldrb	r3, [r3, #9]
   1382a:	b2db      	uxtb	r3, r3
   1382c:	2b01      	cmp	r3, #1
   1382e:	d11e      	bne.n	1386e <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   13830:	697b      	ldr	r3, [r7, #20]
   13832:	0018      	movs	r0, r3
   13834:	4b6b      	ldr	r3, [pc, #428]	; (139e4 <_spi_interrupt_handler+0x304>)
   13836:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   13838:	697b      	ldr	r3, [r7, #20]
   1383a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   1383c:	b29b      	uxth	r3, r3
   1383e:	2b00      	cmp	r3, #0
   13840:	d146      	bne.n	138d0 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   13842:	693b      	ldr	r3, [r7, #16]
   13844:	2204      	movs	r2, #4
   13846:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   13848:	697b      	ldr	r3, [r7, #20]
   1384a:	2238      	movs	r2, #56	; 0x38
   1384c:	2100      	movs	r1, #0
   1384e:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   13850:	697b      	ldr	r3, [r7, #20]
   13852:	2203      	movs	r2, #3
   13854:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   13856:	230f      	movs	r3, #15
   13858:	18fb      	adds	r3, r7, r3
   1385a:	781b      	ldrb	r3, [r3, #0]
   1385c:	2201      	movs	r2, #1
   1385e:	4013      	ands	r3, r2
   13860:	d036      	beq.n	138d0 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   13862:	697b      	ldr	r3, [r7, #20]
   13864:	68db      	ldr	r3, [r3, #12]
   13866:	697a      	ldr	r2, [r7, #20]
   13868:	0010      	movs	r0, r2
   1386a:	4798      	blx	r3
   1386c:	e030      	b.n	138d0 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   1386e:	697b      	ldr	r3, [r7, #20]
   13870:	0018      	movs	r0, r3
   13872:	4b5d      	ldr	r3, [pc, #372]	; (139e8 <_spi_interrupt_handler+0x308>)
   13874:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   13876:	697b      	ldr	r3, [r7, #20]
   13878:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   1387a:	b29b      	uxth	r3, r3
   1387c:	2b00      	cmp	r3, #0
   1387e:	d127      	bne.n	138d0 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
   13880:	697b      	ldr	r3, [r7, #20]
   13882:	2238      	movs	r2, #56	; 0x38
   13884:	2100      	movs	r1, #0
   13886:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   13888:	693b      	ldr	r3, [r7, #16]
   1388a:	2204      	movs	r2, #4
   1388c:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   1388e:	697b      	ldr	r3, [r7, #20]
   13890:	7a5b      	ldrb	r3, [r3, #9]
   13892:	b2db      	uxtb	r3, r3
   13894:	2b02      	cmp	r3, #2
   13896:	d10b      	bne.n	138b0 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   13898:	230f      	movs	r3, #15
   1389a:	18fb      	adds	r3, r7, r3
   1389c:	781b      	ldrb	r3, [r3, #0]
   1389e:	2204      	movs	r2, #4
   138a0:	4013      	ands	r3, r2
   138a2:	d015      	beq.n	138d0 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   138a4:	697b      	ldr	r3, [r7, #20]
   138a6:	695b      	ldr	r3, [r3, #20]
   138a8:	697a      	ldr	r2, [r7, #20]
   138aa:	0010      	movs	r0, r2
   138ac:	4798      	blx	r3
   138ae:	e00f      	b.n	138d0 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   138b0:	697b      	ldr	r3, [r7, #20]
   138b2:	7a5b      	ldrb	r3, [r3, #9]
   138b4:	b2db      	uxtb	r3, r3
   138b6:	2b00      	cmp	r3, #0
   138b8:	d10a      	bne.n	138d0 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   138ba:	230f      	movs	r3, #15
   138bc:	18fb      	adds	r3, r7, r3
   138be:	781b      	ldrb	r3, [r3, #0]
   138c0:	2202      	movs	r2, #2
   138c2:	4013      	ands	r3, r2
   138c4:	d004      	beq.n	138d0 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   138c6:	697b      	ldr	r3, [r7, #20]
   138c8:	691b      	ldr	r3, [r3, #16]
   138ca:	697a      	ldr	r2, [r7, #20]
   138cc:	0010      	movs	r0, r2
   138ce:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   138d0:	230c      	movs	r3, #12
   138d2:	18fb      	adds	r3, r7, r3
   138d4:	881b      	ldrh	r3, [r3, #0]
   138d6:	2202      	movs	r2, #2
   138d8:	4013      	ands	r3, r2
   138da:	d046      	beq.n	1396a <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
   138dc:	697b      	ldr	r3, [r7, #20]
   138de:	795b      	ldrb	r3, [r3, #5]
   138e0:	2b00      	cmp	r3, #0
   138e2:	d11d      	bne.n	13920 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
   138e4:	693b      	ldr	r3, [r7, #16]
   138e6:	2207      	movs	r2, #7
   138e8:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   138ea:	693b      	ldr	r3, [r7, #16]
   138ec:	2202      	movs	r2, #2
   138ee:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
   138f0:	697b      	ldr	r3, [r7, #20]
   138f2:	2203      	movs	r2, #3
   138f4:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
   138f6:	697b      	ldr	r3, [r7, #20]
   138f8:	2200      	movs	r2, #0
   138fa:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
   138fc:	697b      	ldr	r3, [r7, #20]
   138fe:	2200      	movs	r2, #0
   13900:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
   13902:	697b      	ldr	r3, [r7, #20]
   13904:	2238      	movs	r2, #56	; 0x38
   13906:	2100      	movs	r1, #0
   13908:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
   1390a:	230f      	movs	r3, #15
   1390c:	18fb      	adds	r3, r7, r3
   1390e:	781b      	ldrb	r3, [r3, #0]
   13910:	2210      	movs	r2, #16
   13912:	4013      	ands	r3, r2
   13914:	d004      	beq.n	13920 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
   13916:	697b      	ldr	r3, [r7, #20]
   13918:	69db      	ldr	r3, [r3, #28]
   1391a:	697a      	ldr	r2, [r7, #20]
   1391c:	0010      	movs	r0, r2
   1391e:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   13920:	697b      	ldr	r3, [r7, #20]
   13922:	795b      	ldrb	r3, [r3, #5]
   13924:	2b01      	cmp	r3, #1
   13926:	d120      	bne.n	1396a <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   13928:	697b      	ldr	r3, [r7, #20]
   1392a:	7a5b      	ldrb	r3, [r3, #9]
   1392c:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   1392e:	2b01      	cmp	r3, #1
   13930:	d11b      	bne.n	1396a <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   13932:	697b      	ldr	r3, [r7, #20]
   13934:	79db      	ldrb	r3, [r3, #7]
   13936:	2201      	movs	r2, #1
   13938:	4053      	eors	r3, r2
   1393a:	b2db      	uxtb	r3, r3
   1393c:	2b00      	cmp	r3, #0
   1393e:	d014      	beq.n	1396a <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   13940:	693b      	ldr	r3, [r7, #16]
   13942:	2202      	movs	r2, #2
   13944:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   13946:	697b      	ldr	r3, [r7, #20]
   13948:	2203      	movs	r2, #3
   1394a:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   1394c:	697b      	ldr	r3, [r7, #20]
   1394e:	2238      	movs	r2, #56	; 0x38
   13950:	2100      	movs	r1, #0
   13952:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   13954:	230f      	movs	r3, #15
   13956:	18fb      	adds	r3, r7, r3
   13958:	781b      	ldrb	r3, [r3, #0]
   1395a:	2201      	movs	r2, #1
   1395c:	4013      	ands	r3, r2
   1395e:	d004      	beq.n	1396a <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   13960:	697b      	ldr	r3, [r7, #20]
   13962:	68db      	ldr	r3, [r3, #12]
   13964:	697a      	ldr	r2, [r7, #20]
   13966:	0010      	movs	r0, r2
   13968:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
   1396a:	230c      	movs	r3, #12
   1396c:	18fb      	adds	r3, r7, r3
   1396e:	881b      	ldrh	r3, [r3, #0]
   13970:	2208      	movs	r2, #8
   13972:	4013      	ands	r3, r2
   13974:	d014      	beq.n	139a0 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
   13976:	697b      	ldr	r3, [r7, #20]
   13978:	795b      	ldrb	r3, [r3, #5]
   1397a:	2b00      	cmp	r3, #0
   1397c:	d110      	bne.n	139a0 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
   1397e:	693b      	ldr	r3, [r7, #16]
   13980:	2208      	movs	r2, #8
   13982:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
   13984:	693b      	ldr	r3, [r7, #16]
   13986:	2208      	movs	r2, #8
   13988:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
   1398a:	230f      	movs	r3, #15
   1398c:	18fb      	adds	r3, r7, r3
   1398e:	781b      	ldrb	r3, [r3, #0]
   13990:	2220      	movs	r2, #32
   13992:	4013      	ands	r3, r2
   13994:	d004      	beq.n	139a0 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
   13996:	697b      	ldr	r3, [r7, #20]
   13998:	6a1b      	ldr	r3, [r3, #32]
   1399a:	697a      	ldr	r2, [r7, #20]
   1399c:	0010      	movs	r0, r2
   1399e:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   139a0:	230c      	movs	r3, #12
   139a2:	18fb      	adds	r3, r7, r3
   139a4:	881b      	ldrh	r3, [r3, #0]
   139a6:	2280      	movs	r2, #128	; 0x80
   139a8:	4013      	ands	r3, r2
   139aa:	d010      	beq.n	139ce <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   139ac:	693b      	ldr	r3, [r7, #16]
   139ae:	2280      	movs	r2, #128	; 0x80
   139b0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   139b2:	693b      	ldr	r3, [r7, #16]
   139b4:	2280      	movs	r2, #128	; 0x80
   139b6:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   139b8:	230f      	movs	r3, #15
   139ba:	18fb      	adds	r3, r7, r3
   139bc:	781b      	ldrb	r3, [r3, #0]
   139be:	2240      	movs	r2, #64	; 0x40
   139c0:	4013      	ands	r3, r2
   139c2:	d004      	beq.n	139ce <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   139c4:	697b      	ldr	r3, [r7, #20]
   139c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   139c8:	697a      	ldr	r2, [r7, #20]
   139ca:	0010      	movs	r0, r2
   139cc:	4798      	blx	r3
		}
	}
#  endif
}
   139ce:	46c0      	nop			; (mov r8, r8)
   139d0:	46bd      	mov	sp, r7
   139d2:	b006      	add	sp, #24
   139d4:	bd80      	pop	{r7, pc}
   139d6:	46c0      	nop			; (mov r8, r8)
   139d8:	2000045c 	.word	0x2000045c
   139dc:	00013605 	.word	0x00013605
   139e0:	00013589 	.word	0x00013589
   139e4:	00013639 	.word	0x00013639
   139e8:	00013671 	.word	0x00013671

000139ec <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   139ec:	b580      	push	{r7, lr}
   139ee:	b082      	sub	sp, #8
   139f0:	af00      	add	r7, sp, #0
   139f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   139f4:	687b      	ldr	r3, [r7, #4]
   139f6:	2200      	movs	r2, #0
   139f8:	701a      	strb	r2, [r3, #0]
}
   139fa:	46c0      	nop			; (mov r8, r8)
   139fc:	46bd      	mov	sp, r7
   139fe:	b002      	add	sp, #8
   13a00:	bd80      	pop	{r7, pc}
   13a02:	46c0      	nop			; (mov r8, r8)

00013a04 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   13a04:	b580      	push	{r7, lr}
   13a06:	b082      	sub	sp, #8
   13a08:	af00      	add	r7, sp, #0
   13a0a:	0002      	movs	r2, r0
   13a0c:	6039      	str	r1, [r7, #0]
   13a0e:	1dfb      	adds	r3, r7, #7
   13a10:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   13a12:	1dfb      	adds	r3, r7, #7
   13a14:	781b      	ldrb	r3, [r3, #0]
   13a16:	2b01      	cmp	r3, #1
   13a18:	d00a      	beq.n	13a30 <system_apb_clock_set_mask+0x2c>
   13a1a:	2b02      	cmp	r3, #2
   13a1c:	d00f      	beq.n	13a3e <system_apb_clock_set_mask+0x3a>
   13a1e:	2b00      	cmp	r3, #0
   13a20:	d114      	bne.n	13a4c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   13a22:	4b0e      	ldr	r3, [pc, #56]	; (13a5c <system_apb_clock_set_mask+0x58>)
   13a24:	4a0d      	ldr	r2, [pc, #52]	; (13a5c <system_apb_clock_set_mask+0x58>)
   13a26:	6991      	ldr	r1, [r2, #24]
   13a28:	683a      	ldr	r2, [r7, #0]
   13a2a:	430a      	orrs	r2, r1
   13a2c:	619a      	str	r2, [r3, #24]
			break;
   13a2e:	e00f      	b.n	13a50 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   13a30:	4b0a      	ldr	r3, [pc, #40]	; (13a5c <system_apb_clock_set_mask+0x58>)
   13a32:	4a0a      	ldr	r2, [pc, #40]	; (13a5c <system_apb_clock_set_mask+0x58>)
   13a34:	69d1      	ldr	r1, [r2, #28]
   13a36:	683a      	ldr	r2, [r7, #0]
   13a38:	430a      	orrs	r2, r1
   13a3a:	61da      	str	r2, [r3, #28]
			break;
   13a3c:	e008      	b.n	13a50 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   13a3e:	4b07      	ldr	r3, [pc, #28]	; (13a5c <system_apb_clock_set_mask+0x58>)
   13a40:	4a06      	ldr	r2, [pc, #24]	; (13a5c <system_apb_clock_set_mask+0x58>)
   13a42:	6a11      	ldr	r1, [r2, #32]
   13a44:	683a      	ldr	r2, [r7, #0]
   13a46:	430a      	orrs	r2, r1
   13a48:	621a      	str	r2, [r3, #32]
			break;
   13a4a:	e001      	b.n	13a50 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   13a4c:	2317      	movs	r3, #23
   13a4e:	e000      	b.n	13a52 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13a50:	2300      	movs	r3, #0
}
   13a52:	0018      	movs	r0, r3
   13a54:	46bd      	mov	sp, r7
   13a56:	b002      	add	sp, #8
   13a58:	bd80      	pop	{r7, pc}
   13a5a:	46c0      	nop			; (mov r8, r8)
   13a5c:	40000400 	.word	0x40000400

00013a60 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   13a60:	b580      	push	{r7, lr}
   13a62:	b082      	sub	sp, #8
   13a64:	af00      	add	r7, sp, #0
   13a66:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   13a68:	687b      	ldr	r3, [r7, #4]
   13a6a:	2280      	movs	r2, #128	; 0x80
   13a6c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13a6e:	687b      	ldr	r3, [r7, #4]
   13a70:	2200      	movs	r2, #0
   13a72:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   13a74:	687b      	ldr	r3, [r7, #4]
   13a76:	2201      	movs	r2, #1
   13a78:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   13a7a:	687b      	ldr	r3, [r7, #4]
   13a7c:	2200      	movs	r2, #0
   13a7e:	70da      	strb	r2, [r3, #3]
}
   13a80:	46c0      	nop			; (mov r8, r8)
   13a82:	46bd      	mov	sp, r7
   13a84:	b002      	add	sp, #8
   13a86:	bd80      	pop	{r7, pc}

00013a88 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   13a88:	b580      	push	{r7, lr}
   13a8a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   13a8c:	4b05      	ldr	r3, [pc, #20]	; (13aa4 <system_is_debugger_present+0x1c>)
   13a8e:	789b      	ldrb	r3, [r3, #2]
   13a90:	b2db      	uxtb	r3, r3
   13a92:	001a      	movs	r2, r3
   13a94:	2302      	movs	r3, #2
   13a96:	4013      	ands	r3, r2
   13a98:	1e5a      	subs	r2, r3, #1
   13a9a:	4193      	sbcs	r3, r2
   13a9c:	b2db      	uxtb	r3, r3
}
   13a9e:	0018      	movs	r0, r3
   13aa0:	46bd      	mov	sp, r7
   13aa2:	bd80      	pop	{r7, pc}
   13aa4:	41002000 	.word	0x41002000

00013aa8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   13aa8:	b580      	push	{r7, lr}
   13aaa:	b084      	sub	sp, #16
   13aac:	af00      	add	r7, sp, #0
   13aae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   13ab0:	687b      	ldr	r3, [r7, #4]
   13ab2:	681b      	ldr	r3, [r3, #0]
   13ab4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   13ab6:	68fb      	ldr	r3, [r7, #12]
   13ab8:	69db      	ldr	r3, [r3, #28]
   13aba:	1e5a      	subs	r2, r3, #1
   13abc:	4193      	sbcs	r3, r2
   13abe:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   13ac0:	0018      	movs	r0, r3
   13ac2:	46bd      	mov	sp, r7
   13ac4:	b004      	add	sp, #16
   13ac6:	bd80      	pop	{r7, pc}

00013ac8 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   13ac8:	b580      	push	{r7, lr}
   13aca:	b082      	sub	sp, #8
   13acc:	af00      	add	r7, sp, #0
   13ace:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   13ad0:	46c0      	nop			; (mov r8, r8)
   13ad2:	687b      	ldr	r3, [r7, #4]
   13ad4:	0018      	movs	r0, r3
   13ad6:	4b04      	ldr	r3, [pc, #16]	; (13ae8 <_usart_wait_for_sync+0x20>)
   13ad8:	4798      	blx	r3
   13ada:	1e03      	subs	r3, r0, #0
   13adc:	d1f9      	bne.n	13ad2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   13ade:	46c0      	nop			; (mov r8, r8)
   13ae0:	46bd      	mov	sp, r7
   13ae2:	b002      	add	sp, #8
   13ae4:	bd80      	pop	{r7, pc}
   13ae6:	46c0      	nop			; (mov r8, r8)
   13ae8:	00013aa9 	.word	0x00013aa9

00013aec <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   13aec:	b5b0      	push	{r4, r5, r7, lr}
   13aee:	b08c      	sub	sp, #48	; 0x30
   13af0:	af02      	add	r7, sp, #8
   13af2:	6078      	str	r0, [r7, #4]
   13af4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   13af6:	687b      	ldr	r3, [r7, #4]
   13af8:	681b      	ldr	r3, [r3, #0]
   13afa:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13afc:	687b      	ldr	r3, [r7, #4]
   13afe:	681b      	ldr	r3, [r3, #0]
   13b00:	0018      	movs	r0, r3
   13b02:	4bab      	ldr	r3, [pc, #684]	; (13db0 <_usart_set_config+0x2c4>)
   13b04:	4798      	blx	r3
   13b06:	0003      	movs	r3, r0
   13b08:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13b0a:	697b      	ldr	r3, [r7, #20]
   13b0c:	3314      	adds	r3, #20
   13b0e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   13b10:	2300      	movs	r3, #0
   13b12:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   13b14:	2300      	movs	r3, #0
   13b16:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   13b18:	230a      	movs	r3, #10
   13b1a:	18fb      	adds	r3, r7, r3
   13b1c:	2200      	movs	r2, #0
   13b1e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13b20:	231f      	movs	r3, #31
   13b22:	18fb      	adds	r3, r7, r3
   13b24:	2200      	movs	r2, #0
   13b26:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   13b28:	231e      	movs	r3, #30
   13b2a:	18fb      	adds	r3, r7, r3
   13b2c:	2210      	movs	r2, #16
   13b2e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   13b30:	683b      	ldr	r3, [r7, #0]
   13b32:	8a1b      	ldrh	r3, [r3, #16]
   13b34:	2280      	movs	r2, #128	; 0x80
   13b36:	01d2      	lsls	r2, r2, #7
   13b38:	4293      	cmp	r3, r2
   13b3a:	d01c      	beq.n	13b76 <_usart_set_config+0x8a>
   13b3c:	2280      	movs	r2, #128	; 0x80
   13b3e:	01d2      	lsls	r2, r2, #7
   13b40:	4293      	cmp	r3, r2
   13b42:	dc06      	bgt.n	13b52 <_usart_set_config+0x66>
   13b44:	2b00      	cmp	r3, #0
   13b46:	d00d      	beq.n	13b64 <_usart_set_config+0x78>
   13b48:	2280      	movs	r2, #128	; 0x80
   13b4a:	0192      	lsls	r2, r2, #6
   13b4c:	4293      	cmp	r3, r2
   13b4e:	d024      	beq.n	13b9a <_usart_set_config+0xae>
   13b50:	e035      	b.n	13bbe <_usart_set_config+0xd2>
   13b52:	22c0      	movs	r2, #192	; 0xc0
   13b54:	01d2      	lsls	r2, r2, #7
   13b56:	4293      	cmp	r3, r2
   13b58:	d028      	beq.n	13bac <_usart_set_config+0xc0>
   13b5a:	2280      	movs	r2, #128	; 0x80
   13b5c:	0212      	lsls	r2, r2, #8
   13b5e:	4293      	cmp	r3, r2
   13b60:	d012      	beq.n	13b88 <_usart_set_config+0x9c>
   13b62:	e02c      	b.n	13bbe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13b64:	231f      	movs	r3, #31
   13b66:	18fb      	adds	r3, r7, r3
   13b68:	2200      	movs	r2, #0
   13b6a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   13b6c:	231e      	movs	r3, #30
   13b6e:	18fb      	adds	r3, r7, r3
   13b70:	2210      	movs	r2, #16
   13b72:	701a      	strb	r2, [r3, #0]
			break;
   13b74:	e023      	b.n	13bbe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13b76:	231f      	movs	r3, #31
   13b78:	18fb      	adds	r3, r7, r3
   13b7a:	2200      	movs	r2, #0
   13b7c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   13b7e:	231e      	movs	r3, #30
   13b80:	18fb      	adds	r3, r7, r3
   13b82:	2208      	movs	r2, #8
   13b84:	701a      	strb	r2, [r3, #0]
			break;
   13b86:	e01a      	b.n	13bbe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13b88:	231f      	movs	r3, #31
   13b8a:	18fb      	adds	r3, r7, r3
   13b8c:	2200      	movs	r2, #0
   13b8e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   13b90:	231e      	movs	r3, #30
   13b92:	18fb      	adds	r3, r7, r3
   13b94:	2203      	movs	r2, #3
   13b96:	701a      	strb	r2, [r3, #0]
			break;
   13b98:	e011      	b.n	13bbe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   13b9a:	231f      	movs	r3, #31
   13b9c:	18fb      	adds	r3, r7, r3
   13b9e:	2201      	movs	r2, #1
   13ba0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   13ba2:	231e      	movs	r3, #30
   13ba4:	18fb      	adds	r3, r7, r3
   13ba6:	2210      	movs	r2, #16
   13ba8:	701a      	strb	r2, [r3, #0]
			break;
   13baa:	e008      	b.n	13bbe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   13bac:	231f      	movs	r3, #31
   13bae:	18fb      	adds	r3, r7, r3
   13bb0:	2201      	movs	r2, #1
   13bb2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   13bb4:	231e      	movs	r3, #30
   13bb6:	18fb      	adds	r3, r7, r3
   13bb8:	2208      	movs	r2, #8
   13bba:	701a      	strb	r2, [r3, #0]
			break;
   13bbc:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   13bbe:	683b      	ldr	r3, [r7, #0]
   13bc0:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   13bc2:	683b      	ldr	r3, [r7, #0]
   13bc4:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   13bc6:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   13bc8:	683b      	ldr	r3, [r7, #0]
   13bca:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
   13bcc:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
   13bce:	683a      	ldr	r2, [r7, #0]
   13bd0:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   13bd2:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   13bd4:	683a      	ldr	r2, [r7, #0]
   13bd6:	7e12      	ldrb	r2, [r2, #24]
   13bd8:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
   13bda:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   13bdc:	683a      	ldr	r2, [r7, #0]
   13bde:	2126      	movs	r1, #38	; 0x26
   13be0:	5c52      	ldrb	r2, [r2, r1]
   13be2:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   13be4:	4313      	orrs	r3, r2
   13be6:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
   13be8:	231d      	movs	r3, #29
   13bea:	18fb      	adds	r3, r7, r3
   13bec:	2200      	movs	r2, #0
   13bee:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   13bf0:	683b      	ldr	r3, [r7, #0]
   13bf2:	685b      	ldr	r3, [r3, #4]
   13bf4:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   13bf6:	68fb      	ldr	r3, [r7, #12]
   13bf8:	2b00      	cmp	r3, #0
   13bfa:	d01e      	beq.n	13c3a <_usart_set_config+0x14e>
   13bfc:	2280      	movs	r2, #128	; 0x80
   13bfe:	0552      	lsls	r2, r2, #21
   13c00:	4293      	cmp	r3, r2
   13c02:	d14f      	bne.n	13ca4 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   13c04:	683b      	ldr	r3, [r7, #0]
   13c06:	2227      	movs	r2, #39	; 0x27
   13c08:	5c9b      	ldrb	r3, [r3, r2]
   13c0a:	2201      	movs	r2, #1
   13c0c:	4053      	eors	r3, r2
   13c0e:	b2db      	uxtb	r3, r3
   13c10:	2b00      	cmp	r3, #0
   13c12:	d046      	beq.n	13ca2 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   13c14:	683b      	ldr	r3, [r7, #0]
   13c16:	6a1d      	ldr	r5, [r3, #32]
   13c18:	693b      	ldr	r3, [r7, #16]
   13c1a:	b2db      	uxtb	r3, r3
   13c1c:	0018      	movs	r0, r3
   13c1e:	4b65      	ldr	r3, [pc, #404]	; (13db4 <_usart_set_config+0x2c8>)
   13c20:	4798      	blx	r3
   13c22:	0001      	movs	r1, r0
   13c24:	231d      	movs	r3, #29
   13c26:	18fc      	adds	r4, r7, r3
   13c28:	230a      	movs	r3, #10
   13c2a:	18fb      	adds	r3, r7, r3
   13c2c:	001a      	movs	r2, r3
   13c2e:	0028      	movs	r0, r5
   13c30:	4b61      	ldr	r3, [pc, #388]	; (13db8 <_usart_set_config+0x2cc>)
   13c32:	4798      	blx	r3
   13c34:	0003      	movs	r3, r0
   13c36:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   13c38:	e033      	b.n	13ca2 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   13c3a:	683b      	ldr	r3, [r7, #0]
   13c3c:	2227      	movs	r2, #39	; 0x27
   13c3e:	5c9b      	ldrb	r3, [r3, r2]
   13c40:	2b00      	cmp	r3, #0
   13c42:	d014      	beq.n	13c6e <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   13c44:	683b      	ldr	r3, [r7, #0]
   13c46:	6a18      	ldr	r0, [r3, #32]
   13c48:	683b      	ldr	r3, [r7, #0]
   13c4a:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
   13c4c:	231d      	movs	r3, #29
   13c4e:	18fc      	adds	r4, r7, r3
   13c50:	231f      	movs	r3, #31
   13c52:	18fb      	adds	r3, r7, r3
   13c54:	781d      	ldrb	r5, [r3, #0]
   13c56:	230a      	movs	r3, #10
   13c58:	18fa      	adds	r2, r7, r3
   13c5a:	231e      	movs	r3, #30
   13c5c:	18fb      	adds	r3, r7, r3
   13c5e:	781b      	ldrb	r3, [r3, #0]
   13c60:	9300      	str	r3, [sp, #0]
   13c62:	002b      	movs	r3, r5
   13c64:	4d55      	ldr	r5, [pc, #340]	; (13dbc <_usart_set_config+0x2d0>)
   13c66:	47a8      	blx	r5
   13c68:	0003      	movs	r3, r0
   13c6a:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   13c6c:	e01a      	b.n	13ca4 <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   13c6e:	683b      	ldr	r3, [r7, #0]
   13c70:	6a1d      	ldr	r5, [r3, #32]
   13c72:	693b      	ldr	r3, [r7, #16]
   13c74:	b2db      	uxtb	r3, r3
   13c76:	0018      	movs	r0, r3
   13c78:	4b4e      	ldr	r3, [pc, #312]	; (13db4 <_usart_set_config+0x2c8>)
   13c7a:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
   13c7c:	231d      	movs	r3, #29
   13c7e:	18fc      	adds	r4, r7, r3
   13c80:	231f      	movs	r3, #31
   13c82:	18fb      	adds	r3, r7, r3
   13c84:	7819      	ldrb	r1, [r3, #0]
   13c86:	230a      	movs	r3, #10
   13c88:	18fa      	adds	r2, r7, r3
   13c8a:	231e      	movs	r3, #30
   13c8c:	18fb      	adds	r3, r7, r3
   13c8e:	781b      	ldrb	r3, [r3, #0]
   13c90:	9300      	str	r3, [sp, #0]
   13c92:	000b      	movs	r3, r1
   13c94:	0001      	movs	r1, r0
   13c96:	0028      	movs	r0, r5
   13c98:	4d48      	ldr	r5, [pc, #288]	; (13dbc <_usart_set_config+0x2d0>)
   13c9a:	47a8      	blx	r5
   13c9c:	0003      	movs	r3, r0
   13c9e:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   13ca0:	e000      	b.n	13ca4 <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   13ca2:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   13ca4:	231d      	movs	r3, #29
   13ca6:	18fb      	adds	r3, r7, r3
   13ca8:	781b      	ldrb	r3, [r3, #0]
   13caa:	2b00      	cmp	r3, #0
   13cac:	d003      	beq.n	13cb6 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   13cae:	231d      	movs	r3, #29
   13cb0:	18fb      	adds	r3, r7, r3
   13cb2:	781b      	ldrb	r3, [r3, #0]
   13cb4:	e077      	b.n	13da6 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   13cb6:	683b      	ldr	r3, [r7, #0]
   13cb8:	7e5b      	ldrb	r3, [r3, #25]
   13cba:	2b00      	cmp	r3, #0
   13cbc:	d003      	beq.n	13cc6 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   13cbe:	683b      	ldr	r3, [r7, #0]
   13cc0:	7e9a      	ldrb	r2, [r3, #26]
   13cc2:	69bb      	ldr	r3, [r7, #24]
   13cc4:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13cc6:	687b      	ldr	r3, [r7, #4]
   13cc8:	0018      	movs	r0, r3
   13cca:	4b3d      	ldr	r3, [pc, #244]	; (13dc0 <_usart_set_config+0x2d4>)
   13ccc:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   13cce:	230a      	movs	r3, #10
   13cd0:	18fb      	adds	r3, r7, r3
   13cd2:	881a      	ldrh	r2, [r3, #0]
   13cd4:	69bb      	ldr	r3, [r7, #24]
   13cd6:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   13cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13cda:	68fb      	ldr	r3, [r7, #12]
   13cdc:	4313      	orrs	r3, r2
   13cde:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   13ce0:	683b      	ldr	r3, [r7, #0]
   13ce2:	2227      	movs	r2, #39	; 0x27
   13ce4:	5c9b      	ldrb	r3, [r3, r2]
   13ce6:	2201      	movs	r2, #1
   13ce8:	4053      	eors	r3, r2
   13cea:	b2db      	uxtb	r3, r3
   13cec:	2b00      	cmp	r3, #0
   13cee:	d003      	beq.n	13cf8 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   13cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13cf2:	2204      	movs	r2, #4
   13cf4:	4313      	orrs	r3, r2
   13cf6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   13cf8:	683b      	ldr	r3, [r7, #0]
   13cfa:	7e5b      	ldrb	r3, [r3, #25]
   13cfc:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   13cfe:	683b      	ldr	r3, [r7, #0]
   13d00:	7f1b      	ldrb	r3, [r3, #28]
   13d02:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   13d04:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   13d06:	683b      	ldr	r3, [r7, #0]
   13d08:	7f5b      	ldrb	r3, [r3, #29]
   13d0a:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   13d0c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   13d0e:	683b      	ldr	r3, [r7, #0]
   13d10:	2124      	movs	r1, #36	; 0x24
   13d12:	5c5b      	ldrb	r3, [r3, r1]
   13d14:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   13d16:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   13d18:	683b      	ldr	r3, [r7, #0]
   13d1a:	2125      	movs	r1, #37	; 0x25
   13d1c:	5c5b      	ldrb	r3, [r3, r1]
   13d1e:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   13d20:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
   13d22:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   13d24:	683b      	ldr	r3, [r7, #0]
   13d26:	7a9b      	ldrb	r3, [r3, #10]
   13d28:	001a      	movs	r2, r3
   13d2a:	6a3b      	ldr	r3, [r7, #32]
   13d2c:	4313      	orrs	r3, r2
   13d2e:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   13d30:	683b      	ldr	r3, [r7, #0]
   13d32:	7adb      	ldrb	r3, [r3, #11]
   13d34:	001a      	movs	r2, r3
   13d36:	6a3b      	ldr	r3, [r7, #32]
   13d38:	4313      	orrs	r3, r2
   13d3a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   13d3c:	683b      	ldr	r3, [r7, #0]
   13d3e:	891b      	ldrh	r3, [r3, #8]
   13d40:	2bff      	cmp	r3, #255	; 0xff
   13d42:	d00b      	beq.n	13d5c <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   13d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13d46:	2280      	movs	r2, #128	; 0x80
   13d48:	0452      	lsls	r2, r2, #17
   13d4a:	4313      	orrs	r3, r2
   13d4c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   13d4e:	683b      	ldr	r3, [r7, #0]
   13d50:	891b      	ldrh	r3, [r3, #8]
   13d52:	001a      	movs	r2, r3
   13d54:	6a3b      	ldr	r3, [r7, #32]
   13d56:	4313      	orrs	r3, r2
   13d58:	623b      	str	r3, [r7, #32]
   13d5a:	e008      	b.n	13d6e <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   13d5c:	683b      	ldr	r3, [r7, #0]
   13d5e:	7edb      	ldrb	r3, [r3, #27]
   13d60:	2b00      	cmp	r3, #0
   13d62:	d004      	beq.n	13d6e <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   13d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13d66:	2280      	movs	r2, #128	; 0x80
   13d68:	04d2      	lsls	r2, r2, #19
   13d6a:	4313      	orrs	r3, r2
   13d6c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   13d6e:	683b      	ldr	r3, [r7, #0]
   13d70:	222c      	movs	r2, #44	; 0x2c
   13d72:	5c9b      	ldrb	r3, [r3, r2]
   13d74:	2b00      	cmp	r3, #0
   13d76:	d103      	bne.n	13d80 <_usart_set_config+0x294>
   13d78:	4b12      	ldr	r3, [pc, #72]	; (13dc4 <_usart_set_config+0x2d8>)
   13d7a:	4798      	blx	r3
   13d7c:	1e03      	subs	r3, r0, #0
   13d7e:	d003      	beq.n	13d88 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   13d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13d82:	2280      	movs	r2, #128	; 0x80
   13d84:	4313      	orrs	r3, r2
   13d86:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13d88:	687b      	ldr	r3, [r7, #4]
   13d8a:	0018      	movs	r0, r3
   13d8c:	4b0c      	ldr	r3, [pc, #48]	; (13dc0 <_usart_set_config+0x2d4>)
   13d8e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   13d90:	69bb      	ldr	r3, [r7, #24]
   13d92:	6a3a      	ldr	r2, [r7, #32]
   13d94:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13d96:	687b      	ldr	r3, [r7, #4]
   13d98:	0018      	movs	r0, r3
   13d9a:	4b09      	ldr	r3, [pc, #36]	; (13dc0 <_usart_set_config+0x2d4>)
   13d9c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   13d9e:	69bb      	ldr	r3, [r7, #24]
   13da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13da2:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   13da4:	2300      	movs	r3, #0
}
   13da6:	0018      	movs	r0, r3
   13da8:	46bd      	mov	sp, r7
   13daa:	b00a      	add	sp, #40	; 0x28
   13dac:	bdb0      	pop	{r4, r5, r7, pc}
   13dae:	46c0      	nop			; (mov r8, r8)
   13db0:	00012721 	.word	0x00012721
   13db4:	00015385 	.word	0x00015385
   13db8:	0001229d 	.word	0x0001229d
   13dbc:	00012319 	.word	0x00012319
   13dc0:	00013ac9 	.word	0x00013ac9
   13dc4:	00013a89 	.word	0x00013a89

00013dc8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   13dc8:	b590      	push	{r4, r7, lr}
   13dca:	b093      	sub	sp, #76	; 0x4c
   13dcc:	af00      	add	r7, sp, #0
   13dce:	60f8      	str	r0, [r7, #12]
   13dd0:	60b9      	str	r1, [r7, #8]
   13dd2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   13dd4:	233b      	movs	r3, #59	; 0x3b
   13dd6:	18fb      	adds	r3, r7, r3
   13dd8:	2200      	movs	r2, #0
   13dda:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   13ddc:	68fb      	ldr	r3, [r7, #12]
   13dde:	68ba      	ldr	r2, [r7, #8]
   13de0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   13de2:	68fb      	ldr	r3, [r7, #12]
   13de4:	681b      	ldr	r3, [r3, #0]
   13de6:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13de8:	68fb      	ldr	r3, [r7, #12]
   13dea:	681b      	ldr	r3, [r3, #0]
   13dec:	0018      	movs	r0, r3
   13dee:	4b86      	ldr	r3, [pc, #536]	; (14008 <usart_init+0x240>)
   13df0:	4798      	blx	r3
   13df2:	0003      	movs	r3, r0
   13df4:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   13df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13df8:	3302      	adds	r3, #2
   13dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13dfe:	3314      	adds	r3, #20
   13e00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   13e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13e04:	681b      	ldr	r3, [r3, #0]
   13e06:	2201      	movs	r2, #1
   13e08:	4013      	ands	r3, r2
   13e0a:	d001      	beq.n	13e10 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   13e0c:	2305      	movs	r3, #5
   13e0e:	e0f6      	b.n	13ffe <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   13e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13e12:	681b      	ldr	r3, [r3, #0]
   13e14:	2202      	movs	r2, #2
   13e16:	4013      	ands	r3, r2
   13e18:	d001      	beq.n	13e1e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   13e1a:	231c      	movs	r3, #28
   13e1c:	e0ef      	b.n	13ffe <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   13e1e:	2201      	movs	r2, #1
   13e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13e22:	409a      	lsls	r2, r3
   13e24:	0013      	movs	r3, r2
   13e26:	0019      	movs	r1, r3
   13e28:	2002      	movs	r0, #2
   13e2a:	4b78      	ldr	r3, [pc, #480]	; (1400c <usart_init+0x244>)
   13e2c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   13e2e:	2324      	movs	r3, #36	; 0x24
   13e30:	18fb      	adds	r3, r7, r3
   13e32:	0018      	movs	r0, r3
   13e34:	4b76      	ldr	r3, [pc, #472]	; (14010 <usart_init+0x248>)
   13e36:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   13e38:	687b      	ldr	r3, [r7, #4]
   13e3a:	222d      	movs	r2, #45	; 0x2d
   13e3c:	5c9a      	ldrb	r2, [r3, r2]
   13e3e:	2324      	movs	r3, #36	; 0x24
   13e40:	18fb      	adds	r3, r7, r3
   13e42:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   13e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13e46:	b2db      	uxtb	r3, r3
   13e48:	2224      	movs	r2, #36	; 0x24
   13e4a:	18ba      	adds	r2, r7, r2
   13e4c:	0011      	movs	r1, r2
   13e4e:	0018      	movs	r0, r3
   13e50:	4b70      	ldr	r3, [pc, #448]	; (14014 <usart_init+0x24c>)
   13e52:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   13e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13e56:	b2db      	uxtb	r3, r3
   13e58:	0018      	movs	r0, r3
   13e5a:	4b6f      	ldr	r3, [pc, #444]	; (14018 <usart_init+0x250>)
   13e5c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   13e5e:	687b      	ldr	r3, [r7, #4]
   13e60:	222d      	movs	r2, #45	; 0x2d
   13e62:	5c9b      	ldrb	r3, [r3, r2]
   13e64:	2100      	movs	r1, #0
   13e66:	0018      	movs	r0, r3
   13e68:	4b6c      	ldr	r3, [pc, #432]	; (1401c <usart_init+0x254>)
   13e6a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   13e6c:	687b      	ldr	r3, [r7, #4]
   13e6e:	7ada      	ldrb	r2, [r3, #11]
   13e70:	68fb      	ldr	r3, [r7, #12]
   13e72:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   13e74:	687b      	ldr	r3, [r7, #4]
   13e76:	2224      	movs	r2, #36	; 0x24
   13e78:	5c9a      	ldrb	r2, [r3, r2]
   13e7a:	68fb      	ldr	r3, [r7, #12]
   13e7c:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   13e7e:	687b      	ldr	r3, [r7, #4]
   13e80:	2225      	movs	r2, #37	; 0x25
   13e82:	5c9a      	ldrb	r2, [r3, r2]
   13e84:	68fb      	ldr	r3, [r7, #12]
   13e86:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   13e88:	687b      	ldr	r3, [r7, #4]
   13e8a:	7eda      	ldrb	r2, [r3, #27]
   13e8c:	68fb      	ldr	r3, [r7, #12]
   13e8e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   13e90:	687b      	ldr	r3, [r7, #4]
   13e92:	7f1a      	ldrb	r2, [r3, #28]
   13e94:	68fb      	ldr	r3, [r7, #12]
   13e96:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   13e98:	233b      	movs	r3, #59	; 0x3b
   13e9a:	18fc      	adds	r4, r7, r3
   13e9c:	687a      	ldr	r2, [r7, #4]
   13e9e:	68fb      	ldr	r3, [r7, #12]
   13ea0:	0011      	movs	r1, r2
   13ea2:	0018      	movs	r0, r3
   13ea4:	4b5e      	ldr	r3, [pc, #376]	; (14020 <usart_init+0x258>)
   13ea6:	4798      	blx	r3
   13ea8:	0003      	movs	r3, r0
   13eaa:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   13eac:	233b      	movs	r3, #59	; 0x3b
   13eae:	18fb      	adds	r3, r7, r3
   13eb0:	781b      	ldrb	r3, [r3, #0]
   13eb2:	2b00      	cmp	r3, #0
   13eb4:	d003      	beq.n	13ebe <usart_init+0xf6>
		return status_code;
   13eb6:	233b      	movs	r3, #59	; 0x3b
   13eb8:	18fb      	adds	r3, r7, r3
   13eba:	781b      	ldrb	r3, [r3, #0]
   13ebc:	e09f      	b.n	13ffe <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   13ebe:	2320      	movs	r3, #32
   13ec0:	18fb      	adds	r3, r7, r3
   13ec2:	0018      	movs	r0, r3
   13ec4:	4b57      	ldr	r3, [pc, #348]	; (14024 <usart_init+0x25c>)
   13ec6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13ec8:	2320      	movs	r3, #32
   13eca:	18fb      	adds	r3, r7, r3
   13ecc:	2200      	movs	r2, #0
   13ece:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   13ed0:	2320      	movs	r3, #32
   13ed2:	18fb      	adds	r3, r7, r3
   13ed4:	2200      	movs	r2, #0
   13ed6:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   13ed8:	687b      	ldr	r3, [r7, #4]
   13eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
   13edc:	2310      	movs	r3, #16
   13ede:	18fb      	adds	r3, r7, r3
   13ee0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   13ee2:	687b      	ldr	r3, [r7, #4]
   13ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
   13ee6:	2310      	movs	r3, #16
   13ee8:	18fb      	adds	r3, r7, r3
   13eea:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
   13eec:	687b      	ldr	r3, [r7, #4]
   13eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
   13ef0:	2310      	movs	r3, #16
   13ef2:	18fb      	adds	r3, r7, r3
   13ef4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
   13ef6:	687b      	ldr	r3, [r7, #4]
   13ef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
   13efa:	2310      	movs	r3, #16
   13efc:	18fb      	adds	r3, r7, r3
   13efe:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   13f00:	2347      	movs	r3, #71	; 0x47
   13f02:	18fb      	adds	r3, r7, r3
   13f04:	2200      	movs	r2, #0
   13f06:	701a      	strb	r2, [r3, #0]
   13f08:	e02c      	b.n	13f64 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   13f0a:	2347      	movs	r3, #71	; 0x47
   13f0c:	18fb      	adds	r3, r7, r3
   13f0e:	781a      	ldrb	r2, [r3, #0]
   13f10:	2310      	movs	r3, #16
   13f12:	18fb      	adds	r3, r7, r3
   13f14:	0092      	lsls	r2, r2, #2
   13f16:	58d3      	ldr	r3, [r2, r3]
   13f18:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   13f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13f1c:	2b00      	cmp	r3, #0
   13f1e:	d109      	bne.n	13f34 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   13f20:	2347      	movs	r3, #71	; 0x47
   13f22:	18fb      	adds	r3, r7, r3
   13f24:	781a      	ldrb	r2, [r3, #0]
   13f26:	68bb      	ldr	r3, [r7, #8]
   13f28:	0011      	movs	r1, r2
   13f2a:	0018      	movs	r0, r3
   13f2c:	4b3e      	ldr	r3, [pc, #248]	; (14028 <usart_init+0x260>)
   13f2e:	4798      	blx	r3
   13f30:	0003      	movs	r3, r0
   13f32:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   13f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13f36:	3301      	adds	r3, #1
   13f38:	d00d      	beq.n	13f56 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   13f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13f3c:	b2da      	uxtb	r2, r3
   13f3e:	2320      	movs	r3, #32
   13f40:	18fb      	adds	r3, r7, r3
   13f42:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   13f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13f46:	0c1b      	lsrs	r3, r3, #16
   13f48:	b2db      	uxtb	r3, r3
   13f4a:	2220      	movs	r2, #32
   13f4c:	18ba      	adds	r2, r7, r2
   13f4e:	0011      	movs	r1, r2
   13f50:	0018      	movs	r0, r3
   13f52:	4b36      	ldr	r3, [pc, #216]	; (1402c <usart_init+0x264>)
   13f54:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   13f56:	2347      	movs	r3, #71	; 0x47
   13f58:	18fb      	adds	r3, r7, r3
   13f5a:	781a      	ldrb	r2, [r3, #0]
   13f5c:	2347      	movs	r3, #71	; 0x47
   13f5e:	18fb      	adds	r3, r7, r3
   13f60:	3201      	adds	r2, #1
   13f62:	701a      	strb	r2, [r3, #0]
   13f64:	2347      	movs	r3, #71	; 0x47
   13f66:	18fb      	adds	r3, r7, r3
   13f68:	781b      	ldrb	r3, [r3, #0]
   13f6a:	2b03      	cmp	r3, #3
   13f6c:	d9cd      	bls.n	13f0a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   13f6e:	2300      	movs	r3, #0
   13f70:	63fb      	str	r3, [r7, #60]	; 0x3c
   13f72:	e00a      	b.n	13f8a <usart_init+0x1c2>
		module->callback[i]            = NULL;
   13f74:	68fa      	ldr	r2, [r7, #12]
   13f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13f78:	3302      	adds	r3, #2
   13f7a:	009b      	lsls	r3, r3, #2
   13f7c:	18d3      	adds	r3, r2, r3
   13f7e:	3304      	adds	r3, #4
   13f80:	2200      	movs	r2, #0
   13f82:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   13f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13f86:	3301      	adds	r3, #1
   13f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   13f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13f8c:	2b05      	cmp	r3, #5
   13f8e:	d9f1      	bls.n	13f74 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
   13f90:	68fb      	ldr	r3, [r7, #12]
   13f92:	2200      	movs	r2, #0
   13f94:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   13f96:	68fb      	ldr	r3, [r7, #12]
   13f98:	2200      	movs	r2, #0
   13f9a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   13f9c:	68fb      	ldr	r3, [r7, #12]
   13f9e:	2200      	movs	r2, #0
   13fa0:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   13fa2:	68fb      	ldr	r3, [r7, #12]
   13fa4:	2200      	movs	r2, #0
   13fa6:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   13fa8:	68fb      	ldr	r3, [r7, #12]
   13faa:	2230      	movs	r2, #48	; 0x30
   13fac:	2100      	movs	r1, #0
   13fae:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   13fb0:	68fb      	ldr	r3, [r7, #12]
   13fb2:	2231      	movs	r2, #49	; 0x31
   13fb4:	2100      	movs	r1, #0
   13fb6:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   13fb8:	68fb      	ldr	r3, [r7, #12]
   13fba:	2232      	movs	r2, #50	; 0x32
   13fbc:	2100      	movs	r1, #0
   13fbe:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   13fc0:	68fb      	ldr	r3, [r7, #12]
   13fc2:	2233      	movs	r2, #51	; 0x33
   13fc4:	2100      	movs	r1, #0
   13fc6:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   13fc8:	68fb      	ldr	r3, [r7, #12]
   13fca:	681b      	ldr	r3, [r3, #0]
   13fcc:	2227      	movs	r2, #39	; 0x27
   13fce:	18bc      	adds	r4, r7, r2
   13fd0:	0018      	movs	r0, r3
   13fd2:	4b0d      	ldr	r3, [pc, #52]	; (14008 <usart_init+0x240>)
   13fd4:	4798      	blx	r3
   13fd6:	0003      	movs	r3, r0
   13fd8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   13fda:	4a15      	ldr	r2, [pc, #84]	; (14030 <usart_init+0x268>)
   13fdc:	2327      	movs	r3, #39	; 0x27
   13fde:	18fb      	adds	r3, r7, r3
   13fe0:	781b      	ldrb	r3, [r3, #0]
   13fe2:	0011      	movs	r1, r2
   13fe4:	0018      	movs	r0, r3
   13fe6:	4b13      	ldr	r3, [pc, #76]	; (14034 <usart_init+0x26c>)
   13fe8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   13fea:	2327      	movs	r3, #39	; 0x27
   13fec:	18fb      	adds	r3, r7, r3
   13fee:	781a      	ldrb	r2, [r3, #0]
   13ff0:	4b11      	ldr	r3, [pc, #68]	; (14038 <usart_init+0x270>)
   13ff2:	0092      	lsls	r2, r2, #2
   13ff4:	68f9      	ldr	r1, [r7, #12]
   13ff6:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   13ff8:	233b      	movs	r3, #59	; 0x3b
   13ffa:	18fb      	adds	r3, r7, r3
   13ffc:	781b      	ldrb	r3, [r3, #0]
}
   13ffe:	0018      	movs	r0, r3
   14000:	46bd      	mov	sp, r7
   14002:	b013      	add	sp, #76	; 0x4c
   14004:	bd90      	pop	{r4, r7, pc}
   14006:	46c0      	nop			; (mov r8, r8)
   14008:	00012721 	.word	0x00012721
   1400c:	00013a05 	.word	0x00013a05
   14010:	000139ed 	.word	0x000139ed
   14014:	00015261 	.word	0x00015261
   14018:	000152a5 	.word	0x000152a5
   1401c:	000124d9 	.word	0x000124d9
   14020:	00013aed 	.word	0x00013aed
   14024:	00013a61 	.word	0x00013a61
   14028:	00012565 	.word	0x00012565
   1402c:	0001554d 	.word	0x0001554d
   14030:	000142dd 	.word	0x000142dd
   14034:	00012785 	.word	0x00012785
   14038:	2000045c 	.word	0x2000045c

0001403c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   1403c:	b580      	push	{r7, lr}
   1403e:	b084      	sub	sp, #16
   14040:	af00      	add	r7, sp, #0
   14042:	6078      	str	r0, [r7, #4]
   14044:	000a      	movs	r2, r1
   14046:	1cbb      	adds	r3, r7, #2
   14048:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1404a:	687b      	ldr	r3, [r7, #4]
   1404c:	681b      	ldr	r3, [r3, #0]
   1404e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   14050:	687b      	ldr	r3, [r7, #4]
   14052:	79db      	ldrb	r3, [r3, #7]
   14054:	2201      	movs	r2, #1
   14056:	4053      	eors	r3, r2
   14058:	b2db      	uxtb	r3, r3
   1405a:	2b00      	cmp	r3, #0
   1405c:	d001      	beq.n	14062 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   1405e:	231c      	movs	r3, #28
   14060:	e017      	b.n	14092 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   14062:	687b      	ldr	r3, [r7, #4]
   14064:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   14066:	b29b      	uxth	r3, r3
   14068:	2b00      	cmp	r3, #0
   1406a:	d001      	beq.n	14070 <usart_write_wait+0x34>
		return STATUS_BUSY;
   1406c:	2305      	movs	r3, #5
   1406e:	e010      	b.n	14092 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   14070:	687b      	ldr	r3, [r7, #4]
   14072:	0018      	movs	r0, r3
   14074:	4b09      	ldr	r3, [pc, #36]	; (1409c <usart_write_wait+0x60>)
   14076:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   14078:	68fb      	ldr	r3, [r7, #12]
   1407a:	1cba      	adds	r2, r7, #2
   1407c:	8812      	ldrh	r2, [r2, #0]
   1407e:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   14080:	46c0      	nop			; (mov r8, r8)
   14082:	68fb      	ldr	r3, [r7, #12]
   14084:	7e1b      	ldrb	r3, [r3, #24]
   14086:	b2db      	uxtb	r3, r3
   14088:	001a      	movs	r2, r3
   1408a:	2302      	movs	r3, #2
   1408c:	4013      	ands	r3, r2
   1408e:	d0f8      	beq.n	14082 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   14090:	2300      	movs	r3, #0
}
   14092:	0018      	movs	r0, r3
   14094:	46bd      	mov	sp, r7
   14096:	b004      	add	sp, #16
   14098:	bd80      	pop	{r7, pc}
   1409a:	46c0      	nop			; (mov r8, r8)
   1409c:	00013ac9 	.word	0x00013ac9

000140a0 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
   140a0:	b580      	push	{r7, lr}
   140a2:	b084      	sub	sp, #16
   140a4:	af00      	add	r7, sp, #0
   140a6:	6078      	str	r0, [r7, #4]
   140a8:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   140aa:	687b      	ldr	r3, [r7, #4]
   140ac:	681b      	ldr	r3, [r3, #0]
   140ae:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   140b0:	687b      	ldr	r3, [r7, #4]
   140b2:	799b      	ldrb	r3, [r3, #6]
   140b4:	2201      	movs	r2, #1
   140b6:	4053      	eors	r3, r2
   140b8:	b2db      	uxtb	r3, r3
   140ba:	2b00      	cmp	r3, #0
   140bc:	d001      	beq.n	140c2 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
   140be:	231c      	movs	r3, #28
   140c0:	e05e      	b.n	14180 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
   140c2:	687b      	ldr	r3, [r7, #4]
   140c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   140c6:	b29b      	uxth	r3, r3
   140c8:	2b00      	cmp	r3, #0
   140ca:	d001      	beq.n	140d0 <usart_read_wait+0x30>
		return STATUS_BUSY;
   140cc:	2305      	movs	r3, #5
   140ce:	e057      	b.n	14180 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
   140d0:	68fb      	ldr	r3, [r7, #12]
   140d2:	7e1b      	ldrb	r3, [r3, #24]
   140d4:	b2db      	uxtb	r3, r3
   140d6:	001a      	movs	r2, r3
   140d8:	2304      	movs	r3, #4
   140da:	4013      	ands	r3, r2
   140dc:	d101      	bne.n	140e2 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
   140de:	2305      	movs	r3, #5
   140e0:	e04e      	b.n	14180 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   140e2:	687b      	ldr	r3, [r7, #4]
   140e4:	0018      	movs	r0, r3
   140e6:	4b28      	ldr	r3, [pc, #160]	; (14188 <usart_read_wait+0xe8>)
   140e8:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   140ea:	68fb      	ldr	r3, [r7, #12]
   140ec:	8b5b      	ldrh	r3, [r3, #26]
   140ee:	b29b      	uxth	r3, r3
   140f0:	b2da      	uxtb	r2, r3
   140f2:	230b      	movs	r3, #11
   140f4:	18fb      	adds	r3, r7, r3
   140f6:	213f      	movs	r1, #63	; 0x3f
   140f8:	400a      	ands	r2, r1
   140fa:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
   140fc:	230b      	movs	r3, #11
   140fe:	18fb      	adds	r3, r7, r3
   14100:	781b      	ldrb	r3, [r3, #0]
   14102:	2b00      	cmp	r3, #0
   14104:	d036      	beq.n	14174 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
   14106:	230b      	movs	r3, #11
   14108:	18fb      	adds	r3, r7, r3
   1410a:	781b      	ldrb	r3, [r3, #0]
   1410c:	2202      	movs	r2, #2
   1410e:	4013      	ands	r3, r2
   14110:	d004      	beq.n	1411c <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   14112:	68fb      	ldr	r3, [r7, #12]
   14114:	2202      	movs	r2, #2
   14116:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
   14118:	231a      	movs	r3, #26
   1411a:	e031      	b.n	14180 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1411c:	230b      	movs	r3, #11
   1411e:	18fb      	adds	r3, r7, r3
   14120:	781b      	ldrb	r3, [r3, #0]
   14122:	2204      	movs	r2, #4
   14124:	4013      	ands	r3, r2
   14126:	d004      	beq.n	14132 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   14128:	68fb      	ldr	r3, [r7, #12]
   1412a:	2204      	movs	r2, #4
   1412c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
   1412e:	231e      	movs	r3, #30
   14130:	e026      	b.n	14180 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
   14132:	230b      	movs	r3, #11
   14134:	18fb      	adds	r3, r7, r3
   14136:	781b      	ldrb	r3, [r3, #0]
   14138:	2201      	movs	r2, #1
   1413a:	4013      	ands	r3, r2
   1413c:	d004      	beq.n	14148 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1413e:	68fb      	ldr	r3, [r7, #12]
   14140:	2201      	movs	r2, #1
   14142:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
   14144:	2313      	movs	r3, #19
   14146:	e01b      	b.n	14180 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
   14148:	230b      	movs	r3, #11
   1414a:	18fb      	adds	r3, r7, r3
   1414c:	781b      	ldrb	r3, [r3, #0]
   1414e:	2210      	movs	r2, #16
   14150:	4013      	ands	r3, r2
   14152:	d004      	beq.n	1415e <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   14154:	68fb      	ldr	r3, [r7, #12]
   14156:	2210      	movs	r2, #16
   14158:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
   1415a:	2342      	movs	r3, #66	; 0x42
   1415c:	e010      	b.n	14180 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
   1415e:	230b      	movs	r3, #11
   14160:	18fb      	adds	r3, r7, r3
   14162:	781b      	ldrb	r3, [r3, #0]
   14164:	2220      	movs	r2, #32
   14166:	4013      	ands	r3, r2
   14168:	d004      	beq.n	14174 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   1416a:	68fb      	ldr	r3, [r7, #12]
   1416c:	2220      	movs	r2, #32
   1416e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
   14170:	2341      	movs	r3, #65	; 0x41
   14172:	e005      	b.n	14180 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
   14174:	68fb      	ldr	r3, [r7, #12]
   14176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   14178:	b29a      	uxth	r2, r3
   1417a:	683b      	ldr	r3, [r7, #0]
   1417c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
   1417e:	2300      	movs	r3, #0
}
   14180:	0018      	movs	r0, r3
   14182:	46bd      	mov	sp, r7
   14184:	b004      	add	sp, #16
   14186:	bd80      	pop	{r7, pc}
   14188:	00013ac9 	.word	0x00013ac9

0001418c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
   1418c:	b580      	push	{r7, lr}
   1418e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   14190:	4b02      	ldr	r3, [pc, #8]	; (1419c <system_interrupt_enter_critical_section+0x10>)
   14192:	4798      	blx	r3
}
   14194:	46c0      	nop			; (mov r8, r8)
   14196:	46bd      	mov	sp, r7
   14198:	bd80      	pop	{r7, pc}
   1419a:	46c0      	nop			; (mov r8, r8)
   1419c:	00010c91 	.word	0x00010c91

000141a0 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
   141a0:	b580      	push	{r7, lr}
   141a2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   141a4:	4b02      	ldr	r3, [pc, #8]	; (141b0 <system_interrupt_leave_critical_section+0x10>)
   141a6:	4798      	blx	r3
}
   141a8:	46c0      	nop			; (mov r8, r8)
   141aa:	46bd      	mov	sp, r7
   141ac:	bd80      	pop	{r7, pc}
   141ae:	46c0      	nop			; (mov r8, r8)
   141b0:	00010ce5 	.word	0x00010ce5

000141b4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   141b4:	b580      	push	{r7, lr}
   141b6:	b084      	sub	sp, #16
   141b8:	af00      	add	r7, sp, #0
   141ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   141bc:	687b      	ldr	r3, [r7, #4]
   141be:	681b      	ldr	r3, [r3, #0]
   141c0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   141c2:	68fb      	ldr	r3, [r7, #12]
   141c4:	69db      	ldr	r3, [r3, #28]
   141c6:	1e5a      	subs	r2, r3, #1
   141c8:	4193      	sbcs	r3, r2
   141ca:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   141cc:	0018      	movs	r0, r3
   141ce:	46bd      	mov	sp, r7
   141d0:	b004      	add	sp, #16
   141d2:	bd80      	pop	{r7, pc}

000141d4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   141d4:	b580      	push	{r7, lr}
   141d6:	b082      	sub	sp, #8
   141d8:	af00      	add	r7, sp, #0
   141da:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   141dc:	46c0      	nop			; (mov r8, r8)
   141de:	687b      	ldr	r3, [r7, #4]
   141e0:	0018      	movs	r0, r3
   141e2:	4b04      	ldr	r3, [pc, #16]	; (141f4 <_usart_wait_for_sync+0x20>)
   141e4:	4798      	blx	r3
   141e6:	1e03      	subs	r3, r0, #0
   141e8:	d1f9      	bne.n	141de <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   141ea:	46c0      	nop			; (mov r8, r8)
   141ec:	46bd      	mov	sp, r7
   141ee:	b002      	add	sp, #8
   141f0:	bd80      	pop	{r7, pc}
   141f2:	46c0      	nop			; (mov r8, r8)
   141f4:	000141b5 	.word	0x000141b5

000141f8 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   141f8:	b580      	push	{r7, lr}
   141fa:	b086      	sub	sp, #24
   141fc:	af00      	add	r7, sp, #0
   141fe:	60f8      	str	r0, [r7, #12]
   14200:	60b9      	str	r1, [r7, #8]
   14202:	1dbb      	adds	r3, r7, #6
   14204:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   14206:	68fb      	ldr	r3, [r7, #12]
   14208:	681b      	ldr	r3, [r3, #0]
   1420a:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   1420c:	4b16      	ldr	r3, [pc, #88]	; (14268 <_usart_read_buffer+0x70>)
   1420e:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   14210:	68fb      	ldr	r3, [r7, #12]
   14212:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   14214:	b29b      	uxth	r3, r3
   14216:	2b00      	cmp	r3, #0
   14218:	d003      	beq.n	14222 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   1421a:	4b14      	ldr	r3, [pc, #80]	; (1426c <_usart_read_buffer+0x74>)
   1421c:	4798      	blx	r3
		return STATUS_BUSY;
   1421e:	2305      	movs	r3, #5
   14220:	e01e      	b.n	14260 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   14222:	68fb      	ldr	r3, [r7, #12]
   14224:	1dba      	adds	r2, r7, #6
   14226:	8812      	ldrh	r2, [r2, #0]
   14228:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   1422a:	4b10      	ldr	r3, [pc, #64]	; (1426c <_usart_read_buffer+0x74>)
   1422c:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   1422e:	68fb      	ldr	r3, [r7, #12]
   14230:	68ba      	ldr	r2, [r7, #8]
   14232:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   14234:	68fb      	ldr	r3, [r7, #12]
   14236:	2232      	movs	r2, #50	; 0x32
   14238:	2105      	movs	r1, #5
   1423a:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   1423c:	697b      	ldr	r3, [r7, #20]
   1423e:	2204      	movs	r2, #4
   14240:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   14242:	68fb      	ldr	r3, [r7, #12]
   14244:	7a1b      	ldrb	r3, [r3, #8]
   14246:	2b00      	cmp	r3, #0
   14248:	d002      	beq.n	14250 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   1424a:	697b      	ldr	r3, [r7, #20]
   1424c:	2220      	movs	r2, #32
   1424e:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   14250:	68fb      	ldr	r3, [r7, #12]
   14252:	7a5b      	ldrb	r3, [r3, #9]
   14254:	2b00      	cmp	r3, #0
   14256:	d002      	beq.n	1425e <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   14258:	697b      	ldr	r3, [r7, #20]
   1425a:	2208      	movs	r2, #8
   1425c:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   1425e:	2300      	movs	r3, #0
}
   14260:	0018      	movs	r0, r3
   14262:	46bd      	mov	sp, r7
   14264:	b006      	add	sp, #24
   14266:	bd80      	pop	{r7, pc}
   14268:	0001418d 	.word	0x0001418d
   1426c:	000141a1 	.word	0x000141a1

00014270 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   14270:	b580      	push	{r7, lr}
   14272:	b084      	sub	sp, #16
   14274:	af00      	add	r7, sp, #0
   14276:	60f8      	str	r0, [r7, #12]
   14278:	60b9      	str	r1, [r7, #8]
   1427a:	1dfb      	adds	r3, r7, #7
   1427c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1427e:	1dfb      	adds	r3, r7, #7
   14280:	781b      	ldrb	r3, [r3, #0]
   14282:	68fa      	ldr	r2, [r7, #12]
   14284:	3302      	adds	r3, #2
   14286:	009b      	lsls	r3, r3, #2
   14288:	18d3      	adds	r3, r2, r3
   1428a:	3304      	adds	r3, #4
   1428c:	68ba      	ldr	r2, [r7, #8]
   1428e:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   14290:	68fb      	ldr	r3, [r7, #12]
   14292:	2230      	movs	r2, #48	; 0x30
   14294:	5c9b      	ldrb	r3, [r3, r2]
   14296:	b25a      	sxtb	r2, r3
   14298:	1dfb      	adds	r3, r7, #7
   1429a:	781b      	ldrb	r3, [r3, #0]
   1429c:	2101      	movs	r1, #1
   1429e:	4099      	lsls	r1, r3
   142a0:	000b      	movs	r3, r1
   142a2:	b25b      	sxtb	r3, r3
   142a4:	4313      	orrs	r3, r2
   142a6:	b25b      	sxtb	r3, r3
   142a8:	b2d9      	uxtb	r1, r3
   142aa:	68fb      	ldr	r3, [r7, #12]
   142ac:	2230      	movs	r2, #48	; 0x30
   142ae:	5499      	strb	r1, [r3, r2]
}
   142b0:	46c0      	nop			; (mov r8, r8)
   142b2:	46bd      	mov	sp, r7
   142b4:	b004      	add	sp, #16
   142b6:	bd80      	pop	{r7, pc}

000142b8 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
   142b8:	b580      	push	{r7, lr}
   142ba:	b082      	sub	sp, #8
   142bc:	af00      	add	r7, sp, #0
   142be:	6078      	str	r0, [r7, #4]
   142c0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
   142c2:	6839      	ldr	r1, [r7, #0]
   142c4:	687b      	ldr	r3, [r7, #4]
   142c6:	2201      	movs	r2, #1
   142c8:	0018      	movs	r0, r3
   142ca:	4b03      	ldr	r3, [pc, #12]	; (142d8 <usart_read_job+0x20>)
   142cc:	4798      	blx	r3
   142ce:	0003      	movs	r3, r0
}
   142d0:	0018      	movs	r0, r3
   142d2:	46bd      	mov	sp, r7
   142d4:	b002      	add	sp, #8
   142d6:	bd80      	pop	{r7, pc}
   142d8:	000141f9 	.word	0x000141f9

000142dc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   142dc:	b580      	push	{r7, lr}
   142de:	b088      	sub	sp, #32
   142e0:	af00      	add	r7, sp, #0
   142e2:	0002      	movs	r2, r0
   142e4:	1dfb      	adds	r3, r7, #7
   142e6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   142e8:	1dfb      	adds	r3, r7, #7
   142ea:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   142ec:	4ba3      	ldr	r3, [pc, #652]	; (1457c <_usart_interrupt_handler+0x2a0>)
   142ee:	0092      	lsls	r2, r2, #2
   142f0:	58d3      	ldr	r3, [r2, r3]
   142f2:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   142f4:	69bb      	ldr	r3, [r7, #24]
   142f6:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
   142f8:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   142fa:	69bb      	ldr	r3, [r7, #24]
   142fc:	0018      	movs	r0, r3
   142fe:	4ba0      	ldr	r3, [pc, #640]	; (14580 <_usart_interrupt_handler+0x2a4>)
   14300:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   14302:	697b      	ldr	r3, [r7, #20]
   14304:	7e1b      	ldrb	r3, [r3, #24]
   14306:	b2da      	uxtb	r2, r3
   14308:	2312      	movs	r3, #18
   1430a:	18fb      	adds	r3, r7, r3
   1430c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   1430e:	697b      	ldr	r3, [r7, #20]
   14310:	7d9b      	ldrb	r3, [r3, #22]
   14312:	b2db      	uxtb	r3, r3
   14314:	b29a      	uxth	r2, r3
   14316:	2312      	movs	r3, #18
   14318:	18fb      	adds	r3, r7, r3
   1431a:	2112      	movs	r1, #18
   1431c:	1879      	adds	r1, r7, r1
   1431e:	8809      	ldrh	r1, [r1, #0]
   14320:	400a      	ands	r2, r1
   14322:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   14324:	69bb      	ldr	r3, [r7, #24]
   14326:	2230      	movs	r2, #48	; 0x30
   14328:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   1432a:	69ba      	ldr	r2, [r7, #24]
   1432c:	2131      	movs	r1, #49	; 0x31
   1432e:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
   14330:	4013      	ands	r3, r2
   14332:	b2da      	uxtb	r2, r3
   14334:	2310      	movs	r3, #16
   14336:	18fb      	adds	r3, r7, r3
   14338:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   1433a:	2312      	movs	r3, #18
   1433c:	18fb      	adds	r3, r7, r3
   1433e:	881b      	ldrh	r3, [r3, #0]
   14340:	2201      	movs	r2, #1
   14342:	4013      	ands	r3, r2
   14344:	d044      	beq.n	143d0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   14346:	69bb      	ldr	r3, [r7, #24]
   14348:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   1434a:	b29b      	uxth	r3, r3
   1434c:	2b00      	cmp	r3, #0
   1434e:	d03c      	beq.n	143ca <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   14350:	69bb      	ldr	r3, [r7, #24]
   14352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14354:	781b      	ldrb	r3, [r3, #0]
   14356:	b2da      	uxtb	r2, r3
   14358:	231c      	movs	r3, #28
   1435a:	18fb      	adds	r3, r7, r3
   1435c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   1435e:	69bb      	ldr	r3, [r7, #24]
   14360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14362:	1c5a      	adds	r2, r3, #1
   14364:	69bb      	ldr	r3, [r7, #24]
   14366:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   14368:	69bb      	ldr	r3, [r7, #24]
   1436a:	795b      	ldrb	r3, [r3, #5]
   1436c:	2b01      	cmp	r3, #1
   1436e:	d113      	bne.n	14398 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   14370:	69bb      	ldr	r3, [r7, #24]
   14372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14374:	781b      	ldrb	r3, [r3, #0]
   14376:	b2db      	uxtb	r3, r3
   14378:	021b      	lsls	r3, r3, #8
   1437a:	b21a      	sxth	r2, r3
   1437c:	231c      	movs	r3, #28
   1437e:	18fb      	adds	r3, r7, r3
   14380:	2100      	movs	r1, #0
   14382:	5e5b      	ldrsh	r3, [r3, r1]
   14384:	4313      	orrs	r3, r2
   14386:	b21a      	sxth	r2, r3
   14388:	231c      	movs	r3, #28
   1438a:	18fb      	adds	r3, r7, r3
   1438c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   1438e:	69bb      	ldr	r3, [r7, #24]
   14390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14392:	1c5a      	adds	r2, r3, #1
   14394:	69bb      	ldr	r3, [r7, #24]
   14396:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   14398:	231c      	movs	r3, #28
   1439a:	18fb      	adds	r3, r7, r3
   1439c:	881b      	ldrh	r3, [r3, #0]
   1439e:	05db      	lsls	r3, r3, #23
   143a0:	0ddb      	lsrs	r3, r3, #23
   143a2:	b29a      	uxth	r2, r3
   143a4:	697b      	ldr	r3, [r7, #20]
   143a6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   143a8:	69bb      	ldr	r3, [r7, #24]
   143aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   143ac:	b29b      	uxth	r3, r3
   143ae:	3b01      	subs	r3, #1
   143b0:	b29b      	uxth	r3, r3
   143b2:	69ba      	ldr	r2, [r7, #24]
   143b4:	1c19      	adds	r1, r3, #0
   143b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   143b8:	2b00      	cmp	r3, #0
   143ba:	d109      	bne.n	143d0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   143bc:	697b      	ldr	r3, [r7, #20]
   143be:	2201      	movs	r2, #1
   143c0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   143c2:	697b      	ldr	r3, [r7, #20]
   143c4:	2202      	movs	r2, #2
   143c6:	759a      	strb	r2, [r3, #22]
   143c8:	e002      	b.n	143d0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   143ca:	697b      	ldr	r3, [r7, #20]
   143cc:	2201      	movs	r2, #1
   143ce:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   143d0:	2312      	movs	r3, #18
   143d2:	18fb      	adds	r3, r7, r3
   143d4:	881b      	ldrh	r3, [r3, #0]
   143d6:	2202      	movs	r2, #2
   143d8:	4013      	ands	r3, r2
   143da:	d011      	beq.n	14400 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   143dc:	697b      	ldr	r3, [r7, #20]
   143de:	2202      	movs	r2, #2
   143e0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   143e2:	69bb      	ldr	r3, [r7, #24]
   143e4:	2233      	movs	r2, #51	; 0x33
   143e6:	2100      	movs	r1, #0
   143e8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   143ea:	2310      	movs	r3, #16
   143ec:	18fb      	adds	r3, r7, r3
   143ee:	881b      	ldrh	r3, [r3, #0]
   143f0:	2201      	movs	r2, #1
   143f2:	4013      	ands	r3, r2
   143f4:	d004      	beq.n	14400 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   143f6:	69bb      	ldr	r3, [r7, #24]
   143f8:	68db      	ldr	r3, [r3, #12]
   143fa:	69ba      	ldr	r2, [r7, #24]
   143fc:	0010      	movs	r0, r2
   143fe:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   14400:	2312      	movs	r3, #18
   14402:	18fb      	adds	r3, r7, r3
   14404:	881b      	ldrh	r3, [r3, #0]
   14406:	2204      	movs	r2, #4
   14408:	4013      	ands	r3, r2
   1440a:	d100      	bne.n	1440e <_usart_interrupt_handler+0x132>
   1440c:	e0bd      	b.n	1458a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   1440e:	69bb      	ldr	r3, [r7, #24]
   14410:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   14412:	b29b      	uxth	r3, r3
   14414:	2b00      	cmp	r3, #0
   14416:	d100      	bne.n	1441a <_usart_interrupt_handler+0x13e>
   14418:	e0b4      	b.n	14584 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1441a:	697b      	ldr	r3, [r7, #20]
   1441c:	8b5b      	ldrh	r3, [r3, #26]
   1441e:	b29b      	uxth	r3, r3
   14420:	b2da      	uxtb	r2, r3
   14422:	231f      	movs	r3, #31
   14424:	18fb      	adds	r3, r7, r3
   14426:	213f      	movs	r1, #63	; 0x3f
   14428:	400a      	ands	r2, r1
   1442a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   1442c:	231f      	movs	r3, #31
   1442e:	18fb      	adds	r3, r7, r3
   14430:	781b      	ldrb	r3, [r3, #0]
   14432:	2208      	movs	r2, #8
   14434:	4013      	ands	r3, r2
   14436:	d007      	beq.n	14448 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   14438:	231f      	movs	r3, #31
   1443a:	18fb      	adds	r3, r7, r3
   1443c:	221f      	movs	r2, #31
   1443e:	18ba      	adds	r2, r7, r2
   14440:	7812      	ldrb	r2, [r2, #0]
   14442:	2108      	movs	r1, #8
   14444:	438a      	bics	r2, r1
   14446:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   14448:	231f      	movs	r3, #31
   1444a:	18fb      	adds	r3, r7, r3
   1444c:	781b      	ldrb	r3, [r3, #0]
   1444e:	2b00      	cmp	r3, #0
   14450:	d050      	beq.n	144f4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   14452:	231f      	movs	r3, #31
   14454:	18fb      	adds	r3, r7, r3
   14456:	781b      	ldrb	r3, [r3, #0]
   14458:	2202      	movs	r2, #2
   1445a:	4013      	ands	r3, r2
   1445c:	d007      	beq.n	1446e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1445e:	69bb      	ldr	r3, [r7, #24]
   14460:	2232      	movs	r2, #50	; 0x32
   14462:	211a      	movs	r1, #26
   14464:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   14466:	697b      	ldr	r3, [r7, #20]
   14468:	2202      	movs	r2, #2
   1446a:	835a      	strh	r2, [r3, #26]
   1446c:	e036      	b.n	144dc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1446e:	231f      	movs	r3, #31
   14470:	18fb      	adds	r3, r7, r3
   14472:	781b      	ldrb	r3, [r3, #0]
   14474:	2204      	movs	r2, #4
   14476:	4013      	ands	r3, r2
   14478:	d007      	beq.n	1448a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   1447a:	69bb      	ldr	r3, [r7, #24]
   1447c:	2232      	movs	r2, #50	; 0x32
   1447e:	211e      	movs	r1, #30
   14480:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   14482:	697b      	ldr	r3, [r7, #20]
   14484:	2204      	movs	r2, #4
   14486:	835a      	strh	r2, [r3, #26]
   14488:	e028      	b.n	144dc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1448a:	231f      	movs	r3, #31
   1448c:	18fb      	adds	r3, r7, r3
   1448e:	781b      	ldrb	r3, [r3, #0]
   14490:	2201      	movs	r2, #1
   14492:	4013      	ands	r3, r2
   14494:	d007      	beq.n	144a6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   14496:	69bb      	ldr	r3, [r7, #24]
   14498:	2232      	movs	r2, #50	; 0x32
   1449a:	2113      	movs	r1, #19
   1449c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1449e:	697b      	ldr	r3, [r7, #20]
   144a0:	2201      	movs	r2, #1
   144a2:	835a      	strh	r2, [r3, #26]
   144a4:	e01a      	b.n	144dc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   144a6:	231f      	movs	r3, #31
   144a8:	18fb      	adds	r3, r7, r3
   144aa:	781b      	ldrb	r3, [r3, #0]
   144ac:	2210      	movs	r2, #16
   144ae:	4013      	ands	r3, r2
   144b0:	d007      	beq.n	144c2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   144b2:	69bb      	ldr	r3, [r7, #24]
   144b4:	2232      	movs	r2, #50	; 0x32
   144b6:	2142      	movs	r1, #66	; 0x42
   144b8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   144ba:	697b      	ldr	r3, [r7, #20]
   144bc:	2210      	movs	r2, #16
   144be:	835a      	strh	r2, [r3, #26]
   144c0:	e00c      	b.n	144dc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   144c2:	231f      	movs	r3, #31
   144c4:	18fb      	adds	r3, r7, r3
   144c6:	781b      	ldrb	r3, [r3, #0]
   144c8:	2220      	movs	r2, #32
   144ca:	4013      	ands	r3, r2
   144cc:	d006      	beq.n	144dc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   144ce:	69bb      	ldr	r3, [r7, #24]
   144d0:	2232      	movs	r2, #50	; 0x32
   144d2:	2141      	movs	r1, #65	; 0x41
   144d4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   144d6:	697b      	ldr	r3, [r7, #20]
   144d8:	2220      	movs	r2, #32
   144da:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   144dc:	2310      	movs	r3, #16
   144de:	18fb      	adds	r3, r7, r3
   144e0:	881b      	ldrh	r3, [r3, #0]
   144e2:	2204      	movs	r2, #4
   144e4:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   144e6:	d050      	beq.n	1458a <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   144e8:	69bb      	ldr	r3, [r7, #24]
   144ea:	695b      	ldr	r3, [r3, #20]
   144ec:	69ba      	ldr	r2, [r7, #24]
   144ee:	0010      	movs	r0, r2
   144f0:	4798      	blx	r3
   144f2:	e04a      	b.n	1458a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   144f4:	697b      	ldr	r3, [r7, #20]
   144f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   144f8:	b29a      	uxth	r2, r3
   144fa:	230e      	movs	r3, #14
   144fc:	18fb      	adds	r3, r7, r3
   144fe:	05d2      	lsls	r2, r2, #23
   14500:	0dd2      	lsrs	r2, r2, #23
   14502:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   14504:	69bb      	ldr	r3, [r7, #24]
   14506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14508:	220e      	movs	r2, #14
   1450a:	18ba      	adds	r2, r7, r2
   1450c:	8812      	ldrh	r2, [r2, #0]
   1450e:	b2d2      	uxtb	r2, r2
   14510:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   14512:	69bb      	ldr	r3, [r7, #24]
   14514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14516:	1c5a      	adds	r2, r3, #1
   14518:	69bb      	ldr	r3, [r7, #24]
   1451a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   1451c:	69bb      	ldr	r3, [r7, #24]
   1451e:	795b      	ldrb	r3, [r3, #5]
   14520:	2b01      	cmp	r3, #1
   14522:	d10d      	bne.n	14540 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   14524:	69bb      	ldr	r3, [r7, #24]
   14526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14528:	220e      	movs	r2, #14
   1452a:	18ba      	adds	r2, r7, r2
   1452c:	8812      	ldrh	r2, [r2, #0]
   1452e:	0a12      	lsrs	r2, r2, #8
   14530:	b292      	uxth	r2, r2
   14532:	b2d2      	uxtb	r2, r2
   14534:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   14536:	69bb      	ldr	r3, [r7, #24]
   14538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1453a:	1c5a      	adds	r2, r3, #1
   1453c:	69bb      	ldr	r3, [r7, #24]
   1453e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   14540:	69bb      	ldr	r3, [r7, #24]
   14542:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   14544:	b29b      	uxth	r3, r3
   14546:	3b01      	subs	r3, #1
   14548:	b29b      	uxth	r3, r3
   1454a:	69ba      	ldr	r2, [r7, #24]
   1454c:	1c19      	adds	r1, r3, #0
   1454e:	8591      	strh	r1, [r2, #44]	; 0x2c
   14550:	2b00      	cmp	r3, #0
   14552:	d11a      	bne.n	1458a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   14554:	697b      	ldr	r3, [r7, #20]
   14556:	2204      	movs	r2, #4
   14558:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   1455a:	69bb      	ldr	r3, [r7, #24]
   1455c:	2232      	movs	r2, #50	; 0x32
   1455e:	2100      	movs	r1, #0
   14560:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   14562:	2310      	movs	r3, #16
   14564:	18fb      	adds	r3, r7, r3
   14566:	881b      	ldrh	r3, [r3, #0]
   14568:	2202      	movs	r2, #2
   1456a:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
   1456c:	d00d      	beq.n	1458a <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   1456e:	69bb      	ldr	r3, [r7, #24]
   14570:	691b      	ldr	r3, [r3, #16]
   14572:	69ba      	ldr	r2, [r7, #24]
   14574:	0010      	movs	r0, r2
   14576:	4798      	blx	r3
   14578:	e007      	b.n	1458a <_usart_interrupt_handler+0x2ae>
   1457a:	46c0      	nop			; (mov r8, r8)
   1457c:	2000045c 	.word	0x2000045c
   14580:	000141d5 	.word	0x000141d5
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   14584:	697b      	ldr	r3, [r7, #20]
   14586:	2204      	movs	r2, #4
   14588:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   1458a:	2312      	movs	r3, #18
   1458c:	18fb      	adds	r3, r7, r3
   1458e:	881b      	ldrh	r3, [r3, #0]
   14590:	2210      	movs	r2, #16
   14592:	4013      	ands	r3, r2
   14594:	d010      	beq.n	145b8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   14596:	697b      	ldr	r3, [r7, #20]
   14598:	2210      	movs	r2, #16
   1459a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   1459c:	697b      	ldr	r3, [r7, #20]
   1459e:	2210      	movs	r2, #16
   145a0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   145a2:	2310      	movs	r3, #16
   145a4:	18fb      	adds	r3, r7, r3
   145a6:	881b      	ldrh	r3, [r3, #0]
   145a8:	2210      	movs	r2, #16
   145aa:	4013      	ands	r3, r2
   145ac:	d004      	beq.n	145b8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   145ae:	69bb      	ldr	r3, [r7, #24]
   145b0:	69db      	ldr	r3, [r3, #28]
   145b2:	69ba      	ldr	r2, [r7, #24]
   145b4:	0010      	movs	r0, r2
   145b6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   145b8:	2312      	movs	r3, #18
   145ba:	18fb      	adds	r3, r7, r3
   145bc:	881b      	ldrh	r3, [r3, #0]
   145be:	2220      	movs	r2, #32
   145c0:	4013      	ands	r3, r2
   145c2:	d010      	beq.n	145e6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   145c4:	697b      	ldr	r3, [r7, #20]
   145c6:	2220      	movs	r2, #32
   145c8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   145ca:	697b      	ldr	r3, [r7, #20]
   145cc:	2220      	movs	r2, #32
   145ce:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   145d0:	2310      	movs	r3, #16
   145d2:	18fb      	adds	r3, r7, r3
   145d4:	881b      	ldrh	r3, [r3, #0]
   145d6:	2208      	movs	r2, #8
   145d8:	4013      	ands	r3, r2
   145da:	d004      	beq.n	145e6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   145dc:	69bb      	ldr	r3, [r7, #24]
   145de:	699b      	ldr	r3, [r3, #24]
   145e0:	69ba      	ldr	r2, [r7, #24]
   145e2:	0010      	movs	r0, r2
   145e4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   145e6:	2312      	movs	r3, #18
   145e8:	18fb      	adds	r3, r7, r3
   145ea:	881b      	ldrh	r3, [r3, #0]
   145ec:	2208      	movs	r2, #8
   145ee:	4013      	ands	r3, r2
   145f0:	d010      	beq.n	14614 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   145f2:	697b      	ldr	r3, [r7, #20]
   145f4:	2208      	movs	r2, #8
   145f6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   145f8:	697b      	ldr	r3, [r7, #20]
   145fa:	2208      	movs	r2, #8
   145fc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   145fe:	2310      	movs	r3, #16
   14600:	18fb      	adds	r3, r7, r3
   14602:	881b      	ldrh	r3, [r3, #0]
   14604:	2220      	movs	r2, #32
   14606:	4013      	ands	r3, r2
   14608:	d004      	beq.n	14614 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   1460a:	69bb      	ldr	r3, [r7, #24]
   1460c:	6a1b      	ldr	r3, [r3, #32]
   1460e:	69ba      	ldr	r2, [r7, #24]
   14610:	0010      	movs	r0, r2
   14612:	4798      	blx	r3
		}
	}
#endif
}
   14614:	46c0      	nop			; (mov r8, r8)
   14616:	46bd      	mov	sp, r7
   14618:	b008      	add	sp, #32
   1461a:	bd80      	pop	{r7, pc}

0001461c <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
   1461c:	b580      	push	{r7, lr}
   1461e:	b082      	sub	sp, #8
   14620:	af00      	add	r7, sp, #0
   14622:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
   14624:	687b      	ldr	r3, [r7, #4]
   14626:	2201      	movs	r2, #1
   14628:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   1462a:	687b      	ldr	r3, [r7, #4]
   1462c:	2200      	movs	r2, #0
   1462e:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
   14630:	687b      	ldr	r3, [r7, #4]
   14632:	2206      	movs	r2, #6
   14634:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
   14636:	687b      	ldr	r3, [r7, #4]
   14638:	2200      	movs	r2, #0
   1463a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   1463c:	687b      	ldr	r3, [r7, #4]
   1463e:	2200      	movs	r2, #0
   14640:	725a      	strb	r2, [r3, #9]
}
   14642:	46c0      	nop			; (mov r8, r8)
   14644:	46bd      	mov	sp, r7
   14646:	b002      	add	sp, #8
   14648:	bd80      	pop	{r7, pc}
   1464a:	46c0      	nop			; (mov r8, r8)

0001464c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1464c:	b580      	push	{r7, lr}
   1464e:	b082      	sub	sp, #8
   14650:	af00      	add	r7, sp, #0
   14652:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   14654:	687b      	ldr	r3, [r7, #4]
   14656:	2200      	movs	r2, #0
   14658:	701a      	strb	r2, [r3, #0]
}
   1465a:	46c0      	nop			; (mov r8, r8)
   1465c:	46bd      	mov	sp, r7
   1465e:	b002      	add	sp, #8
   14660:	bd80      	pop	{r7, pc}
   14662:	46c0      	nop			; (mov r8, r8)

00014664 <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
   14664:	b580      	push	{r7, lr}
   14666:	b082      	sub	sp, #8
   14668:	af00      	add	r7, sp, #0
   1466a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   1466c:	687b      	ldr	r3, [r7, #4]
   1466e:	2200      	movs	r2, #0
   14670:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   14672:	687b      	ldr	r3, [r7, #4]
   14674:	2204      	movs	r2, #4
   14676:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   14678:	687b      	ldr	r3, [r7, #4]
   1467a:	2200      	movs	r2, #0
   1467c:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   1467e:	687b      	ldr	r3, [r7, #4]
   14680:	2280      	movs	r2, #128	; 0x80
   14682:	0212      	lsls	r2, r2, #8
   14684:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   14686:	687b      	ldr	r3, [r7, #4]
   14688:	2200      	movs	r2, #0
   1468a:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   1468c:	687b      	ldr	r3, [r7, #4]
   1468e:	2201      	movs	r2, #1
   14690:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   14692:	687b      	ldr	r3, [r7, #4]
   14694:	2200      	movs	r2, #0
   14696:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   14698:	687b      	ldr	r3, [r7, #4]
   1469a:	2201      	movs	r2, #1
   1469c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   1469e:	687b      	ldr	r3, [r7, #4]
   146a0:	2200      	movs	r2, #0
   146a2:	739a      	strb	r2, [r3, #14]
}
   146a4:	46c0      	nop			; (mov r8, r8)
   146a6:	46bd      	mov	sp, r7
   146a8:	b002      	add	sp, #8
   146aa:	bd80      	pop	{r7, pc}

000146ac <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
   146ac:	b580      	push	{r7, lr}
   146ae:	b082      	sub	sp, #8
   146b0:	af00      	add	r7, sp, #0
   146b2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   146b4:	687b      	ldr	r3, [r7, #4]
   146b6:	2203      	movs	r2, #3
   146b8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   146ba:	687b      	ldr	r3, [r7, #4]
   146bc:	2200      	movs	r2, #0
   146be:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   146c0:	687b      	ldr	r3, [r7, #4]
   146c2:	2201      	movs	r2, #1
   146c4:	709a      	strb	r2, [r3, #2]
}
   146c6:	46c0      	nop			; (mov r8, r8)
   146c8:	46bd      	mov	sp, r7
   146ca:	b002      	add	sp, #8
   146cc:	bd80      	pop	{r7, pc}
   146ce:	46c0      	nop			; (mov r8, r8)

000146d0 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
   146d0:	b580      	push	{r7, lr}
   146d2:	b082      	sub	sp, #8
   146d4:	af00      	add	r7, sp, #0
   146d6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   146d8:	687b      	ldr	r3, [r7, #4]
   146da:	2200      	movs	r2, #0
   146dc:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   146de:	687b      	ldr	r3, [r7, #4]
   146e0:	2200      	movs	r2, #0
   146e2:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   146e4:	687b      	ldr	r3, [r7, #4]
   146e6:	2200      	movs	r2, #0
   146e8:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   146ea:	687b      	ldr	r3, [r7, #4]
   146ec:	2200      	movs	r2, #0
   146ee:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   146f0:	687b      	ldr	r3, [r7, #4]
   146f2:	2200      	movs	r2, #0
   146f4:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   146f6:	687b      	ldr	r3, [r7, #4]
   146f8:	2201      	movs	r2, #1
   146fa:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   146fc:	687b      	ldr	r3, [r7, #4]
   146fe:	2207      	movs	r2, #7
   14700:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   14702:	687b      	ldr	r3, [r7, #4]
   14704:	223f      	movs	r2, #63	; 0x3f
   14706:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
   14708:	687b      	ldr	r3, [r7, #4]
   1470a:	2201      	movs	r2, #1
   1470c:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   1470e:	687b      	ldr	r3, [r7, #4]
   14710:	2201      	movs	r2, #1
   14712:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   14714:	687b      	ldr	r3, [r7, #4]
   14716:	2206      	movs	r2, #6
   14718:	821a      	strh	r2, [r3, #16]
}
   1471a:	46c0      	nop			; (mov r8, r8)
   1471c:	46bd      	mov	sp, r7
   1471e:	b002      	add	sp, #8
   14720:	bd80      	pop	{r7, pc}
   14722:	46c0      	nop			; (mov r8, r8)

00014724 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
   14724:	b580      	push	{r7, lr}
   14726:	b082      	sub	sp, #8
   14728:	af00      	add	r7, sp, #0
   1472a:	0002      	movs	r2, r0
   1472c:	1dfb      	adds	r3, r7, #7
   1472e:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
   14730:	4a03      	ldr	r2, [pc, #12]	; (14740 <system_cpu_clock_set_divider+0x1c>)
   14732:	1dfb      	adds	r3, r7, #7
   14734:	781b      	ldrb	r3, [r3, #0]
   14736:	7213      	strb	r3, [r2, #8]
}
   14738:	46c0      	nop			; (mov r8, r8)
   1473a:	46bd      	mov	sp, r7
   1473c:	b002      	add	sp, #8
   1473e:	bd80      	pop	{r7, pc}
   14740:	40000400 	.word	0x40000400

00014744 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
   14744:	b580      	push	{r7, lr}
   14746:	b082      	sub	sp, #8
   14748:	af00      	add	r7, sp, #0
   1474a:	0002      	movs	r2, r0
   1474c:	1dfb      	adds	r3, r7, #7
   1474e:	701a      	strb	r2, [r3, #0]
   14750:	1dbb      	adds	r3, r7, #6
   14752:	1c0a      	adds	r2, r1, #0
   14754:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   14756:	1dfb      	adds	r3, r7, #7
   14758:	781b      	ldrb	r3, [r3, #0]
   1475a:	2b01      	cmp	r3, #1
   1475c:	d008      	beq.n	14770 <system_apb_clock_set_divider+0x2c>
   1475e:	2b02      	cmp	r3, #2
   14760:	d00b      	beq.n	1477a <system_apb_clock_set_divider+0x36>
   14762:	2b00      	cmp	r3, #0
   14764:	d10e      	bne.n	14784 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
   14766:	4a0b      	ldr	r2, [pc, #44]	; (14794 <system_apb_clock_set_divider+0x50>)
   14768:	1dbb      	adds	r3, r7, #6
   1476a:	781b      	ldrb	r3, [r3, #0]
   1476c:	7253      	strb	r3, [r2, #9]
			break;
   1476e:	e00b      	b.n	14788 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
   14770:	4a08      	ldr	r2, [pc, #32]	; (14794 <system_apb_clock_set_divider+0x50>)
   14772:	1dbb      	adds	r3, r7, #6
   14774:	781b      	ldrb	r3, [r3, #0]
   14776:	7293      	strb	r3, [r2, #10]
			break;
   14778:	e006      	b.n	14788 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
   1477a:	4a06      	ldr	r2, [pc, #24]	; (14794 <system_apb_clock_set_divider+0x50>)
   1477c:	1dbb      	adds	r3, r7, #6
   1477e:	781b      	ldrb	r3, [r3, #0]
   14780:	72d3      	strb	r3, [r2, #11]
			break;
   14782:	e001      	b.n	14788 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   14784:	2317      	movs	r3, #23
   14786:	e000      	b.n	1478a <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
   14788:	2300      	movs	r3, #0
}
   1478a:	0018      	movs	r0, r3
   1478c:	46bd      	mov	sp, r7
   1478e:	b002      	add	sp, #8
   14790:	bd80      	pop	{r7, pc}
   14792:	46c0      	nop			; (mov r8, r8)
   14794:	40000400 	.word	0x40000400

00014798 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   14798:	b580      	push	{r7, lr}
   1479a:	b082      	sub	sp, #8
   1479c:	af00      	add	r7, sp, #0
   1479e:	0002      	movs	r2, r0
   147a0:	1dfb      	adds	r3, r7, #7
   147a2:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   147a4:	4a08      	ldr	r2, [pc, #32]	; (147c8 <system_flash_set_waitstates+0x30>)
   147a6:	1dfb      	adds	r3, r7, #7
   147a8:	781b      	ldrb	r3, [r3, #0]
   147aa:	210f      	movs	r1, #15
   147ac:	400b      	ands	r3, r1
   147ae:	b2d9      	uxtb	r1, r3
   147b0:	6853      	ldr	r3, [r2, #4]
   147b2:	200f      	movs	r0, #15
   147b4:	4001      	ands	r1, r0
   147b6:	0049      	lsls	r1, r1, #1
   147b8:	201e      	movs	r0, #30
   147ba:	4383      	bics	r3, r0
   147bc:	430b      	orrs	r3, r1
   147be:	6053      	str	r3, [r2, #4]
}
   147c0:	46c0      	nop			; (mov r8, r8)
   147c2:	46bd      	mov	sp, r7
   147c4:	b002      	add	sp, #8
   147c6:	bd80      	pop	{r7, pc}
   147c8:	41004000 	.word	0x41004000

000147cc <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   147cc:	b580      	push	{r7, lr}
   147ce:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   147d0:	46c0      	nop			; (mov r8, r8)
   147d2:	4b04      	ldr	r3, [pc, #16]	; (147e4 <_system_dfll_wait_for_sync+0x18>)
   147d4:	68db      	ldr	r3, [r3, #12]
   147d6:	2210      	movs	r2, #16
   147d8:	4013      	ands	r3, r2
   147da:	d0fa      	beq.n	147d2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   147dc:	46c0      	nop			; (mov r8, r8)
   147de:	46bd      	mov	sp, r7
   147e0:	bd80      	pop	{r7, pc}
   147e2:	46c0      	nop			; (mov r8, r8)
   147e4:	40000800 	.word	0x40000800

000147e8 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   147e8:	b580      	push	{r7, lr}
   147ea:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   147ec:	4b0c      	ldr	r3, [pc, #48]	; (14820 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   147ee:	2202      	movs	r2, #2
   147f0:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   147f2:	4b0c      	ldr	r3, [pc, #48]	; (14824 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   147f4:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   147f6:	4a0a      	ldr	r2, [pc, #40]	; (14820 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   147f8:	4b0b      	ldr	r3, [pc, #44]	; (14828 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   147fa:	689b      	ldr	r3, [r3, #8]
   147fc:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   147fe:	4a08      	ldr	r2, [pc, #32]	; (14820 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   14800:	4b09      	ldr	r3, [pc, #36]	; (14828 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   14802:	685b      	ldr	r3, [r3, #4]
   14804:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   14806:	4b06      	ldr	r3, [pc, #24]	; (14820 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   14808:	2200      	movs	r2, #0
   1480a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   1480c:	4b05      	ldr	r3, [pc, #20]	; (14824 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   1480e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   14810:	4a03      	ldr	r2, [pc, #12]	; (14820 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   14812:	4b05      	ldr	r3, [pc, #20]	; (14828 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   14814:	681b      	ldr	r3, [r3, #0]
   14816:	b29b      	uxth	r3, r3
   14818:	8493      	strh	r3, [r2, #36]	; 0x24
}
   1481a:	46c0      	nop			; (mov r8, r8)
   1481c:	46bd      	mov	sp, r7
   1481e:	bd80      	pop	{r7, pc}
   14820:	40000800 	.word	0x40000800
   14824:	000147cd 	.word	0x000147cd
   14828:	20000118 	.word	0x20000118

0001482c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   1482c:	b580      	push	{r7, lr}
   1482e:	b082      	sub	sp, #8
   14830:	af00      	add	r7, sp, #0
   14832:	0002      	movs	r2, r0
   14834:	1dfb      	adds	r3, r7, #7
   14836:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   14838:	1dfb      	adds	r3, r7, #7
   1483a:	781b      	ldrb	r3, [r3, #0]
   1483c:	2b08      	cmp	r3, #8
   1483e:	d840      	bhi.n	148c2 <system_clock_source_get_hz+0x96>
   14840:	009a      	lsls	r2, r3, #2
   14842:	4b22      	ldr	r3, [pc, #136]	; (148cc <system_clock_source_get_hz+0xa0>)
   14844:	18d3      	adds	r3, r2, r3
   14846:	681b      	ldr	r3, [r3, #0]
   14848:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   1484a:	4b21      	ldr	r3, [pc, #132]	; (148d0 <system_clock_source_get_hz+0xa4>)
   1484c:	691b      	ldr	r3, [r3, #16]
   1484e:	e039      	b.n	148c4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   14850:	4b20      	ldr	r3, [pc, #128]	; (148d4 <system_clock_source_get_hz+0xa8>)
   14852:	6a1b      	ldr	r3, [r3, #32]
   14854:	059b      	lsls	r3, r3, #22
   14856:	0f9b      	lsrs	r3, r3, #30
   14858:	b2db      	uxtb	r3, r3
   1485a:	001a      	movs	r2, r3
   1485c:	4b1e      	ldr	r3, [pc, #120]	; (148d8 <system_clock_source_get_hz+0xac>)
   1485e:	40d3      	lsrs	r3, r2
   14860:	e030      	b.n	148c4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   14862:	2380      	movs	r3, #128	; 0x80
   14864:	021b      	lsls	r3, r3, #8
   14866:	e02d      	b.n	148c4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   14868:	2380      	movs	r3, #128	; 0x80
   1486a:	021b      	lsls	r3, r3, #8
   1486c:	e02a      	b.n	148c4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   1486e:	4b18      	ldr	r3, [pc, #96]	; (148d0 <system_clock_source_get_hz+0xa4>)
   14870:	695b      	ldr	r3, [r3, #20]
   14872:	e027      	b.n	148c4 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   14874:	4b16      	ldr	r3, [pc, #88]	; (148d0 <system_clock_source_get_hz+0xa4>)
   14876:	681b      	ldr	r3, [r3, #0]
   14878:	2202      	movs	r2, #2
   1487a:	4013      	ands	r3, r2
   1487c:	d101      	bne.n	14882 <system_clock_source_get_hz+0x56>
			return 0;
   1487e:	2300      	movs	r3, #0
   14880:	e020      	b.n	148c4 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   14882:	4b16      	ldr	r3, [pc, #88]	; (148dc <system_clock_source_get_hz+0xb0>)
   14884:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
   14886:	4b12      	ldr	r3, [pc, #72]	; (148d0 <system_clock_source_get_hz+0xa4>)
   14888:	681b      	ldr	r3, [r3, #0]
   1488a:	2204      	movs	r2, #4
   1488c:	4013      	ands	r3, r2
   1488e:	d009      	beq.n	148a4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   14890:	2000      	movs	r0, #0
   14892:	4b13      	ldr	r3, [pc, #76]	; (148e0 <system_clock_source_get_hz+0xb4>)
   14894:	4798      	blx	r3
   14896:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   14898:	4b0d      	ldr	r3, [pc, #52]	; (148d0 <system_clock_source_get_hz+0xa4>)
   1489a:	689b      	ldr	r3, [r3, #8]
   1489c:	041b      	lsls	r3, r3, #16
   1489e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   148a0:	4353      	muls	r3, r2
   148a2:	e00f      	b.n	148c4 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
   148a4:	4b0f      	ldr	r3, [pc, #60]	; (148e4 <system_clock_source_get_hz+0xb8>)
   148a6:	e00d      	b.n	148c4 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   148a8:	4a0a      	ldr	r2, [pc, #40]	; (148d4 <system_clock_source_get_hz+0xa8>)
   148aa:	2350      	movs	r3, #80	; 0x50
   148ac:	5cd3      	ldrb	r3, [r2, r3]
   148ae:	b2db      	uxtb	r3, r3
   148b0:	001a      	movs	r2, r3
   148b2:	2304      	movs	r3, #4
   148b4:	4013      	ands	r3, r2
   148b6:	d101      	bne.n	148bc <system_clock_source_get_hz+0x90>
			return 0;
   148b8:	2300      	movs	r3, #0
   148ba:	e003      	b.n	148c4 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
   148bc:	4b04      	ldr	r3, [pc, #16]	; (148d0 <system_clock_source_get_hz+0xa4>)
   148be:	68db      	ldr	r3, [r3, #12]
   148c0:	e000      	b.n	148c4 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
   148c2:	2300      	movs	r3, #0
	}
}
   148c4:	0018      	movs	r0, r3
   148c6:	46bd      	mov	sp, r7
   148c8:	b002      	add	sp, #8
   148ca:	bd80      	pop	{r7, pc}
   148cc:	0001af9c 	.word	0x0001af9c
   148d0:	20000118 	.word	0x20000118
   148d4:	40000800 	.word	0x40000800
   148d8:	007a1200 	.word	0x007a1200
   148dc:	000147cd 	.word	0x000147cd
   148e0:	00015385 	.word	0x00015385
   148e4:	02dc6c00 	.word	0x02dc6c00

000148e8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   148e8:	b580      	push	{r7, lr}
   148ea:	b084      	sub	sp, #16
   148ec:	af00      	add	r7, sp, #0
   148ee:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   148f0:	4b1a      	ldr	r3, [pc, #104]	; (1495c <system_clock_source_osc8m_set_config+0x74>)
   148f2:	6a1b      	ldr	r3, [r3, #32]
   148f4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   148f6:	687b      	ldr	r3, [r7, #4]
   148f8:	781b      	ldrb	r3, [r3, #0]
   148fa:	1c1a      	adds	r2, r3, #0
   148fc:	2303      	movs	r3, #3
   148fe:	4013      	ands	r3, r2
   14900:	b2da      	uxtb	r2, r3
   14902:	230d      	movs	r3, #13
   14904:	18fb      	adds	r3, r7, r3
   14906:	2103      	movs	r1, #3
   14908:	400a      	ands	r2, r1
   1490a:	0010      	movs	r0, r2
   1490c:	781a      	ldrb	r2, [r3, #0]
   1490e:	2103      	movs	r1, #3
   14910:	438a      	bics	r2, r1
   14912:	1c11      	adds	r1, r2, #0
   14914:	1c02      	adds	r2, r0, #0
   14916:	430a      	orrs	r2, r1
   14918:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   1491a:	687b      	ldr	r3, [r7, #4]
   1491c:	789a      	ldrb	r2, [r3, #2]
   1491e:	230c      	movs	r3, #12
   14920:	18fb      	adds	r3, r7, r3
   14922:	01d0      	lsls	r0, r2, #7
   14924:	781a      	ldrb	r2, [r3, #0]
   14926:	217f      	movs	r1, #127	; 0x7f
   14928:	400a      	ands	r2, r1
   1492a:	1c11      	adds	r1, r2, #0
   1492c:	1c02      	adds	r2, r0, #0
   1492e:	430a      	orrs	r2, r1
   14930:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   14932:	687b      	ldr	r3, [r7, #4]
   14934:	785a      	ldrb	r2, [r3, #1]
   14936:	230c      	movs	r3, #12
   14938:	18fb      	adds	r3, r7, r3
   1493a:	2101      	movs	r1, #1
   1493c:	400a      	ands	r2, r1
   1493e:	0190      	lsls	r0, r2, #6
   14940:	781a      	ldrb	r2, [r3, #0]
   14942:	2140      	movs	r1, #64	; 0x40
   14944:	438a      	bics	r2, r1
   14946:	1c11      	adds	r1, r2, #0
   14948:	1c02      	adds	r2, r0, #0
   1494a:	430a      	orrs	r2, r1
   1494c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   1494e:	4b03      	ldr	r3, [pc, #12]	; (1495c <system_clock_source_osc8m_set_config+0x74>)
   14950:	68fa      	ldr	r2, [r7, #12]
   14952:	621a      	str	r2, [r3, #32]
}
   14954:	46c0      	nop			; (mov r8, r8)
   14956:	46bd      	mov	sp, r7
   14958:	b004      	add	sp, #16
   1495a:	bd80      	pop	{r7, pc}
   1495c:	40000800 	.word	0x40000800

00014960 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   14960:	b580      	push	{r7, lr}
   14962:	b084      	sub	sp, #16
   14964:	af00      	add	r7, sp, #0
   14966:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   14968:	4a43      	ldr	r2, [pc, #268]	; (14a78 <system_clock_source_xosc32k_set_config+0x118>)
   1496a:	230c      	movs	r3, #12
   1496c:	18fb      	adds	r3, r7, r3
   1496e:	8a92      	ldrh	r2, [r2, #20]
   14970:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   14972:	687b      	ldr	r3, [r7, #4]
   14974:	785b      	ldrb	r3, [r3, #1]
   14976:	1c1a      	adds	r2, r3, #0
   14978:	2307      	movs	r3, #7
   1497a:	4013      	ands	r3, r2
   1497c:	b2da      	uxtb	r2, r3
   1497e:	230c      	movs	r3, #12
   14980:	18fb      	adds	r3, r7, r3
   14982:	2107      	movs	r1, #7
   14984:	400a      	ands	r2, r1
   14986:	0010      	movs	r0, r2
   14988:	785a      	ldrb	r2, [r3, #1]
   1498a:	2107      	movs	r1, #7
   1498c:	438a      	bics	r2, r1
   1498e:	1c11      	adds	r1, r2, #0
   14990:	1c02      	adds	r2, r0, #0
   14992:	430a      	orrs	r2, r1
   14994:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   14996:	687b      	ldr	r3, [r7, #4]
   14998:	781b      	ldrb	r3, [r3, #0]
   1499a:	2b00      	cmp	r3, #0
   1499c:	d106      	bne.n	149ac <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   1499e:	230c      	movs	r3, #12
   149a0:	18fb      	adds	r3, r7, r3
   149a2:	781a      	ldrb	r2, [r3, #0]
   149a4:	2104      	movs	r1, #4
   149a6:	430a      	orrs	r2, r1
   149a8:	701a      	strb	r2, [r3, #0]
   149aa:	e005      	b.n	149b8 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   149ac:	230c      	movs	r3, #12
   149ae:	18fb      	adds	r3, r7, r3
   149b0:	781a      	ldrb	r2, [r3, #0]
   149b2:	2104      	movs	r1, #4
   149b4:	438a      	bics	r2, r1
   149b6:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   149b8:	687b      	ldr	r3, [r7, #4]
   149ba:	789a      	ldrb	r2, [r3, #2]
   149bc:	230c      	movs	r3, #12
   149be:	18fb      	adds	r3, r7, r3
   149c0:	2101      	movs	r1, #1
   149c2:	400a      	ands	r2, r1
   149c4:	0150      	lsls	r0, r2, #5
   149c6:	781a      	ldrb	r2, [r3, #0]
   149c8:	2120      	movs	r1, #32
   149ca:	438a      	bics	r2, r1
   149cc:	1c11      	adds	r1, r2, #0
   149ce:	1c02      	adds	r2, r0, #0
   149d0:	430a      	orrs	r2, r1
   149d2:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   149d4:	687b      	ldr	r3, [r7, #4]
   149d6:	78da      	ldrb	r2, [r3, #3]
   149d8:	230c      	movs	r3, #12
   149da:	18fb      	adds	r3, r7, r3
   149dc:	2101      	movs	r1, #1
   149de:	400a      	ands	r2, r1
   149e0:	0110      	lsls	r0, r2, #4
   149e2:	781a      	ldrb	r2, [r3, #0]
   149e4:	2110      	movs	r1, #16
   149e6:	438a      	bics	r2, r1
   149e8:	1c11      	adds	r1, r2, #0
   149ea:	1c02      	adds	r2, r0, #0
   149ec:	430a      	orrs	r2, r1
   149ee:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   149f0:	687b      	ldr	r3, [r7, #4]
   149f2:	791a      	ldrb	r2, [r3, #4]
   149f4:	230c      	movs	r3, #12
   149f6:	18fb      	adds	r3, r7, r3
   149f8:	2101      	movs	r1, #1
   149fa:	400a      	ands	r2, r1
   149fc:	00d0      	lsls	r0, r2, #3
   149fe:	781a      	ldrb	r2, [r3, #0]
   14a00:	2108      	movs	r1, #8
   14a02:	438a      	bics	r2, r1
   14a04:	1c11      	adds	r1, r2, #0
   14a06:	1c02      	adds	r2, r0, #0
   14a08:	430a      	orrs	r2, r1
   14a0a:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   14a0c:	687b      	ldr	r3, [r7, #4]
   14a0e:	7b5a      	ldrb	r2, [r3, #13]
   14a10:	230c      	movs	r3, #12
   14a12:	18fb      	adds	r3, r7, r3
   14a14:	01d0      	lsls	r0, r2, #7
   14a16:	781a      	ldrb	r2, [r3, #0]
   14a18:	217f      	movs	r1, #127	; 0x7f
   14a1a:	400a      	ands	r2, r1
   14a1c:	1c11      	adds	r1, r2, #0
   14a1e:	1c02      	adds	r2, r0, #0
   14a20:	430a      	orrs	r2, r1
   14a22:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   14a24:	687b      	ldr	r3, [r7, #4]
   14a26:	7b1a      	ldrb	r2, [r3, #12]
   14a28:	230c      	movs	r3, #12
   14a2a:	18fb      	adds	r3, r7, r3
   14a2c:	2101      	movs	r1, #1
   14a2e:	400a      	ands	r2, r1
   14a30:	0190      	lsls	r0, r2, #6
   14a32:	781a      	ldrb	r2, [r3, #0]
   14a34:	2140      	movs	r1, #64	; 0x40
   14a36:	438a      	bics	r2, r1
   14a38:	1c11      	adds	r1, r2, #0
   14a3a:	1c02      	adds	r2, r0, #0
   14a3c:	430a      	orrs	r2, r1
   14a3e:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   14a40:	687b      	ldr	r3, [r7, #4]
   14a42:	7b9a      	ldrb	r2, [r3, #14]
   14a44:	230c      	movs	r3, #12
   14a46:	18fb      	adds	r3, r7, r3
   14a48:	2101      	movs	r1, #1
   14a4a:	400a      	ands	r2, r1
   14a4c:	0110      	lsls	r0, r2, #4
   14a4e:	785a      	ldrb	r2, [r3, #1]
   14a50:	2110      	movs	r1, #16
   14a52:	438a      	bics	r2, r1
   14a54:	1c11      	adds	r1, r2, #0
   14a56:	1c02      	adds	r2, r0, #0
   14a58:	430a      	orrs	r2, r1
   14a5a:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   14a5c:	687b      	ldr	r3, [r7, #4]
   14a5e:	689a      	ldr	r2, [r3, #8]
   14a60:	4b06      	ldr	r3, [pc, #24]	; (14a7c <system_clock_source_xosc32k_set_config+0x11c>)
   14a62:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   14a64:	4a04      	ldr	r2, [pc, #16]	; (14a78 <system_clock_source_xosc32k_set_config+0x118>)
   14a66:	230c      	movs	r3, #12
   14a68:	18fb      	adds	r3, r7, r3
   14a6a:	881b      	ldrh	r3, [r3, #0]
   14a6c:	8293      	strh	r3, [r2, #20]
}
   14a6e:	46c0      	nop			; (mov r8, r8)
   14a70:	46bd      	mov	sp, r7
   14a72:	b004      	add	sp, #16
   14a74:	bd80      	pop	{r7, pc}
   14a76:	46c0      	nop			; (mov r8, r8)
   14a78:	40000800 	.word	0x40000800
   14a7c:	20000118 	.word	0x20000118

00014a80 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   14a80:	b580      	push	{r7, lr}
   14a82:	b082      	sub	sp, #8
   14a84:	af00      	add	r7, sp, #0
   14a86:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   14a88:	687b      	ldr	r3, [r7, #4]
   14a8a:	7a1b      	ldrb	r3, [r3, #8]
   14a8c:	029b      	lsls	r3, r3, #10
   14a8e:	041b      	lsls	r3, r3, #16
   14a90:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   14a92:	687b      	ldr	r3, [r7, #4]
   14a94:	895b      	ldrh	r3, [r3, #10]
   14a96:	059b      	lsls	r3, r3, #22
   14a98:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   14a9a:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
   14a9c:	4b2a      	ldr	r3, [pc, #168]	; (14b48 <system_clock_source_dfll_set_config+0xc8>)
   14a9e:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   14aa0:	687b      	ldr	r3, [r7, #4]
   14aa2:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   14aa4:	687b      	ldr	r3, [r7, #4]
   14aa6:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   14aa8:	4313      	orrs	r3, r2
   14aaa:	b2db      	uxtb	r3, r3
   14aac:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   14aae:	687b      	ldr	r3, [r7, #4]
   14ab0:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
   14ab2:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
   14ab4:	687a      	ldr	r2, [r7, #4]
   14ab6:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   14ab8:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   14aba:	687b      	ldr	r3, [r7, #4]
   14abc:	785b      	ldrb	r3, [r3, #1]
   14abe:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
   14ac0:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
   14ac2:	4b21      	ldr	r3, [pc, #132]	; (14b48 <system_clock_source_dfll_set_config+0xc8>)
   14ac4:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   14ac6:	687b      	ldr	r3, [r7, #4]
   14ac8:	781b      	ldrb	r3, [r3, #0]
   14aca:	2b04      	cmp	r3, #4
   14acc:	d116      	bne.n	14afc <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   14ace:	687b      	ldr	r3, [r7, #4]
   14ad0:	7b1b      	ldrb	r3, [r3, #12]
   14ad2:	069b      	lsls	r3, r3, #26
   14ad4:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   14ad6:	687b      	ldr	r3, [r7, #4]
   14ad8:	89db      	ldrh	r3, [r3, #14]
   14ada:	041b      	lsls	r3, r3, #16
   14adc:	0019      	movs	r1, r3
   14ade:	4b1b      	ldr	r3, [pc, #108]	; (14b4c <system_clock_source_dfll_set_config+0xcc>)
   14ae0:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   14ae2:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   14ae4:	687a      	ldr	r2, [r7, #4]
   14ae6:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   14ae8:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
   14aea:	4b17      	ldr	r3, [pc, #92]	; (14b48 <system_clock_source_dfll_set_config+0xc8>)
   14aec:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   14aee:	4b16      	ldr	r3, [pc, #88]	; (14b48 <system_clock_source_dfll_set_config+0xc8>)
   14af0:	681b      	ldr	r3, [r3, #0]
   14af2:	687a      	ldr	r2, [r7, #4]
   14af4:	7812      	ldrb	r2, [r2, #0]
   14af6:	431a      	orrs	r2, r3
   14af8:	4b13      	ldr	r3, [pc, #76]	; (14b48 <system_clock_source_dfll_set_config+0xc8>)
   14afa:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   14afc:	687b      	ldr	r3, [r7, #4]
   14afe:	781b      	ldrb	r3, [r3, #0]
   14b00:	2b20      	cmp	r3, #32
   14b02:	d11c      	bne.n	14b3e <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   14b04:	687b      	ldr	r3, [r7, #4]
   14b06:	7b1b      	ldrb	r3, [r3, #12]
   14b08:	069b      	lsls	r3, r3, #26
   14b0a:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   14b0c:	687b      	ldr	r3, [r7, #4]
   14b0e:	89db      	ldrh	r3, [r3, #14]
   14b10:	041b      	lsls	r3, r3, #16
   14b12:	0019      	movs	r1, r3
   14b14:	4b0d      	ldr	r3, [pc, #52]	; (14b4c <system_clock_source_dfll_set_config+0xcc>)
   14b16:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   14b18:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   14b1a:	687a      	ldr	r2, [r7, #4]
   14b1c:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   14b1e:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
   14b20:	4b09      	ldr	r3, [pc, #36]	; (14b48 <system_clock_source_dfll_set_config+0xc8>)
   14b22:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   14b24:	4b08      	ldr	r3, [pc, #32]	; (14b48 <system_clock_source_dfll_set_config+0xc8>)
   14b26:	681b      	ldr	r3, [r3, #0]
   14b28:	687a      	ldr	r2, [r7, #4]
   14b2a:	7812      	ldrb	r2, [r2, #0]
   14b2c:	2104      	movs	r1, #4
   14b2e:	430a      	orrs	r2, r1
   14b30:	b2d2      	uxtb	r2, r2
   14b32:	4313      	orrs	r3, r2
   14b34:	2280      	movs	r2, #128	; 0x80
   14b36:	00d2      	lsls	r2, r2, #3
   14b38:	431a      	orrs	r2, r3
   14b3a:	4b03      	ldr	r3, [pc, #12]	; (14b48 <system_clock_source_dfll_set_config+0xc8>)
   14b3c:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   14b3e:	46c0      	nop			; (mov r8, r8)
   14b40:	46bd      	mov	sp, r7
   14b42:	b002      	add	sp, #8
   14b44:	bd80      	pop	{r7, pc}
   14b46:	46c0      	nop			; (mov r8, r8)
   14b48:	20000118 	.word	0x20000118
   14b4c:	03ff0000 	.word	0x03ff0000

00014b50 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   14b50:	b580      	push	{r7, lr}
   14b52:	b082      	sub	sp, #8
   14b54:	af00      	add	r7, sp, #0
   14b56:	0002      	movs	r2, r0
   14b58:	1dfb      	adds	r3, r7, #7
   14b5a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   14b5c:	1dfb      	adds	r3, r7, #7
   14b5e:	781b      	ldrb	r3, [r3, #0]
   14b60:	2b08      	cmp	r3, #8
   14b62:	d83b      	bhi.n	14bdc <system_clock_source_enable+0x8c>
   14b64:	009a      	lsls	r2, r3, #2
   14b66:	4b21      	ldr	r3, [pc, #132]	; (14bec <system_clock_source_enable+0x9c>)
   14b68:	18d3      	adds	r3, r2, r3
   14b6a:	681b      	ldr	r3, [r3, #0]
   14b6c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   14b6e:	4b20      	ldr	r3, [pc, #128]	; (14bf0 <system_clock_source_enable+0xa0>)
   14b70:	4a1f      	ldr	r2, [pc, #124]	; (14bf0 <system_clock_source_enable+0xa0>)
   14b72:	6a12      	ldr	r2, [r2, #32]
   14b74:	2102      	movs	r1, #2
   14b76:	430a      	orrs	r2, r1
   14b78:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   14b7a:	2300      	movs	r3, #0
   14b7c:	e031      	b.n	14be2 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   14b7e:	4b1c      	ldr	r3, [pc, #112]	; (14bf0 <system_clock_source_enable+0xa0>)
   14b80:	4a1b      	ldr	r2, [pc, #108]	; (14bf0 <system_clock_source_enable+0xa0>)
   14b82:	6992      	ldr	r2, [r2, #24]
   14b84:	2102      	movs	r1, #2
   14b86:	430a      	orrs	r2, r1
   14b88:	619a      	str	r2, [r3, #24]
		break;
   14b8a:	e029      	b.n	14be0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   14b8c:	4a18      	ldr	r2, [pc, #96]	; (14bf0 <system_clock_source_enable+0xa0>)
   14b8e:	4b18      	ldr	r3, [pc, #96]	; (14bf0 <system_clock_source_enable+0xa0>)
   14b90:	8a1b      	ldrh	r3, [r3, #16]
   14b92:	b29b      	uxth	r3, r3
   14b94:	2102      	movs	r1, #2
   14b96:	430b      	orrs	r3, r1
   14b98:	b29b      	uxth	r3, r3
   14b9a:	8213      	strh	r3, [r2, #16]
		break;
   14b9c:	e020      	b.n	14be0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   14b9e:	4a14      	ldr	r2, [pc, #80]	; (14bf0 <system_clock_source_enable+0xa0>)
   14ba0:	4b13      	ldr	r3, [pc, #76]	; (14bf0 <system_clock_source_enable+0xa0>)
   14ba2:	8a9b      	ldrh	r3, [r3, #20]
   14ba4:	b29b      	uxth	r3, r3
   14ba6:	2102      	movs	r1, #2
   14ba8:	430b      	orrs	r3, r1
   14baa:	b29b      	uxth	r3, r3
   14bac:	8293      	strh	r3, [r2, #20]
		break;
   14bae:	e017      	b.n	14be0 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   14bb0:	4b10      	ldr	r3, [pc, #64]	; (14bf4 <system_clock_source_enable+0xa4>)
   14bb2:	681b      	ldr	r3, [r3, #0]
   14bb4:	2202      	movs	r2, #2
   14bb6:	431a      	orrs	r2, r3
   14bb8:	4b0e      	ldr	r3, [pc, #56]	; (14bf4 <system_clock_source_enable+0xa4>)
   14bba:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   14bbc:	4b0e      	ldr	r3, [pc, #56]	; (14bf8 <system_clock_source_enable+0xa8>)
   14bbe:	4798      	blx	r3
		break;
   14bc0:	e00e      	b.n	14be0 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   14bc2:	4a0b      	ldr	r2, [pc, #44]	; (14bf0 <system_clock_source_enable+0xa0>)
   14bc4:	490a      	ldr	r1, [pc, #40]	; (14bf0 <system_clock_source_enable+0xa0>)
   14bc6:	2344      	movs	r3, #68	; 0x44
   14bc8:	5ccb      	ldrb	r3, [r1, r3]
   14bca:	b2db      	uxtb	r3, r3
   14bcc:	2102      	movs	r1, #2
   14bce:	430b      	orrs	r3, r1
   14bd0:	b2d9      	uxtb	r1, r3
   14bd2:	2344      	movs	r3, #68	; 0x44
   14bd4:	54d1      	strb	r1, [r2, r3]
		break;
   14bd6:	e003      	b.n	14be0 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   14bd8:	2300      	movs	r3, #0
   14bda:	e002      	b.n	14be2 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   14bdc:	2317      	movs	r3, #23
   14bde:	e000      	b.n	14be2 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   14be0:	2300      	movs	r3, #0
}
   14be2:	0018      	movs	r0, r3
   14be4:	46bd      	mov	sp, r7
   14be6:	b002      	add	sp, #8
   14be8:	bd80      	pop	{r7, pc}
   14bea:	46c0      	nop			; (mov r8, r8)
   14bec:	0001afc0 	.word	0x0001afc0
   14bf0:	40000800 	.word	0x40000800
   14bf4:	20000118 	.word	0x20000118
   14bf8:	000147e9 	.word	0x000147e9

00014bfc <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   14bfc:	b580      	push	{r7, lr}
   14bfe:	b084      	sub	sp, #16
   14c00:	af00      	add	r7, sp, #0
   14c02:	0002      	movs	r2, r0
   14c04:	1dfb      	adds	r3, r7, #7
   14c06:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   14c08:	2300      	movs	r3, #0
   14c0a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   14c0c:	1dfb      	adds	r3, r7, #7
   14c0e:	781b      	ldrb	r3, [r3, #0]
   14c10:	2b08      	cmp	r3, #8
   14c12:	d821      	bhi.n	14c58 <system_clock_source_is_ready+0x5c>
   14c14:	009a      	lsls	r2, r3, #2
   14c16:	4b18      	ldr	r3, [pc, #96]	; (14c78 <system_clock_source_is_ready+0x7c>)
   14c18:	18d3      	adds	r3, r2, r3
   14c1a:	681b      	ldr	r3, [r3, #0]
   14c1c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   14c1e:	2308      	movs	r3, #8
   14c20:	60fb      	str	r3, [r7, #12]
		break;
   14c22:	e01b      	b.n	14c5c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   14c24:	2304      	movs	r3, #4
   14c26:	60fb      	str	r3, [r7, #12]
		break;
   14c28:	e018      	b.n	14c5c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   14c2a:	2301      	movs	r3, #1
   14c2c:	60fb      	str	r3, [r7, #12]
		break;
   14c2e:	e015      	b.n	14c5c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   14c30:	2302      	movs	r3, #2
   14c32:	60fb      	str	r3, [r7, #12]
		break;
   14c34:	e012      	b.n	14c5c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   14c36:	23d0      	movs	r3, #208	; 0xd0
   14c38:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   14c3a:	e00f      	b.n	14c5c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   14c3c:	4a0f      	ldr	r2, [pc, #60]	; (14c7c <system_clock_source_is_ready+0x80>)
   14c3e:	2350      	movs	r3, #80	; 0x50
   14c40:	5cd3      	ldrb	r3, [r2, r3]
   14c42:	b2db      	uxtb	r3, r3
   14c44:	001a      	movs	r2, r3
   14c46:	2303      	movs	r3, #3
   14c48:	4013      	ands	r3, r2
   14c4a:	3b03      	subs	r3, #3
   14c4c:	425a      	negs	r2, r3
   14c4e:	4153      	adcs	r3, r2
   14c50:	b2db      	uxtb	r3, r3
   14c52:	e00c      	b.n	14c6e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   14c54:	2301      	movs	r3, #1
   14c56:	e00a      	b.n	14c6e <system_clock_source_is_ready+0x72>

	default:
		return false;
   14c58:	2300      	movs	r3, #0
   14c5a:	e008      	b.n	14c6e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   14c5c:	4b07      	ldr	r3, [pc, #28]	; (14c7c <system_clock_source_is_ready+0x80>)
   14c5e:	68db      	ldr	r3, [r3, #12]
   14c60:	68fa      	ldr	r2, [r7, #12]
   14c62:	401a      	ands	r2, r3
   14c64:	68fb      	ldr	r3, [r7, #12]
   14c66:	1ad3      	subs	r3, r2, r3
   14c68:	425a      	negs	r2, r3
   14c6a:	4153      	adcs	r3, r2
   14c6c:	b2db      	uxtb	r3, r3
}
   14c6e:	0018      	movs	r0, r3
   14c70:	46bd      	mov	sp, r7
   14c72:	b004      	add	sp, #16
   14c74:	bd80      	pop	{r7, pc}
   14c76:	46c0      	nop			; (mov r8, r8)
   14c78:	0001afe4 	.word	0x0001afe4
   14c7c:	40000800 	.word	0x40000800

00014c80 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   14c80:	b580      	push	{r7, lr}
   14c82:	b082      	sub	sp, #8
   14c84:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   14c86:	003b      	movs	r3, r7
   14c88:	2202      	movs	r2, #2
   14c8a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   14c8c:	2300      	movs	r3, #0
   14c8e:	607b      	str	r3, [r7, #4]
   14c90:	e009      	b.n	14ca6 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   14c92:	687b      	ldr	r3, [r7, #4]
   14c94:	b2db      	uxtb	r3, r3
   14c96:	003a      	movs	r2, r7
   14c98:	0011      	movs	r1, r2
   14c9a:	0018      	movs	r0, r3
   14c9c:	4b05      	ldr	r3, [pc, #20]	; (14cb4 <_switch_peripheral_gclk+0x34>)
   14c9e:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   14ca0:	687b      	ldr	r3, [r7, #4]
   14ca2:	3301      	adds	r3, #1
   14ca4:	607b      	str	r3, [r7, #4]
   14ca6:	687b      	ldr	r3, [r7, #4]
   14ca8:	2b24      	cmp	r3, #36	; 0x24
   14caa:	d9f2      	bls.n	14c92 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
   14cac:	46c0      	nop			; (mov r8, r8)
   14cae:	46bd      	mov	sp, r7
   14cb0:	b002      	add	sp, #8
   14cb2:	bd80      	pop	{r7, pc}
   14cb4:	00015261 	.word	0x00015261

00014cb8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   14cb8:	b580      	push	{r7, lr}
   14cba:	b0aa      	sub	sp, #168	; 0xa8
   14cbc:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   14cbe:	4b87      	ldr	r3, [pc, #540]	; (14edc <system_clock_init+0x224>)
   14cc0:	22c2      	movs	r2, #194	; 0xc2
   14cc2:	00d2      	lsls	r2, r2, #3
   14cc4:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   14cc6:	2002      	movs	r0, #2
   14cc8:	4b85      	ldr	r3, [pc, #532]	; (14ee0 <system_clock_init+0x228>)
   14cca:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   14ccc:	4b85      	ldr	r3, [pc, #532]	; (14ee4 <system_clock_init+0x22c>)
   14cce:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   14cd0:	2394      	movs	r3, #148	; 0x94
   14cd2:	18fb      	adds	r3, r7, r3
   14cd4:	0018      	movs	r0, r3
   14cd6:	4b84      	ldr	r3, [pc, #528]	; (14ee8 <system_clock_init+0x230>)
   14cd8:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   14cda:	2394      	movs	r3, #148	; 0x94
   14cdc:	18fb      	adds	r3, r7, r3
   14cde:	2280      	movs	r2, #128	; 0x80
   14ce0:	0212      	lsls	r2, r2, #8
   14ce2:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   14ce4:	2394      	movs	r3, #148	; 0x94
   14ce6:	18fb      	adds	r3, r7, r3
   14ce8:	2200      	movs	r2, #0
   14cea:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   14cec:	2394      	movs	r3, #148	; 0x94
   14cee:	18fb      	adds	r3, r7, r3
   14cf0:	2203      	movs	r2, #3
   14cf2:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   14cf4:	2394      	movs	r3, #148	; 0x94
   14cf6:	18fb      	adds	r3, r7, r3
   14cf8:	2200      	movs	r2, #0
   14cfa:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   14cfc:	2394      	movs	r3, #148	; 0x94
   14cfe:	18fb      	adds	r3, r7, r3
   14d00:	2200      	movs	r2, #0
   14d02:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   14d04:	2394      	movs	r3, #148	; 0x94
   14d06:	18fb      	adds	r3, r7, r3
   14d08:	2201      	movs	r2, #1
   14d0a:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   14d0c:	2394      	movs	r3, #148	; 0x94
   14d0e:	18fb      	adds	r3, r7, r3
   14d10:	2200      	movs	r2, #0
   14d12:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   14d14:	2394      	movs	r3, #148	; 0x94
   14d16:	18fb      	adds	r3, r7, r3
   14d18:	2200      	movs	r2, #0
   14d1a:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   14d1c:	2394      	movs	r3, #148	; 0x94
   14d1e:	18fb      	adds	r3, r7, r3
   14d20:	0018      	movs	r0, r3
   14d22:	4b72      	ldr	r3, [pc, #456]	; (14eec <system_clock_init+0x234>)
   14d24:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   14d26:	2005      	movs	r0, #5
   14d28:	4b71      	ldr	r3, [pc, #452]	; (14ef0 <system_clock_init+0x238>)
   14d2a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   14d2c:	46c0      	nop			; (mov r8, r8)
   14d2e:	2005      	movs	r0, #5
   14d30:	4b70      	ldr	r3, [pc, #448]	; (14ef4 <system_clock_init+0x23c>)
   14d32:	4798      	blx	r3
   14d34:	0003      	movs	r3, r0
   14d36:	001a      	movs	r2, r3
   14d38:	2301      	movs	r3, #1
   14d3a:	4053      	eors	r3, r2
   14d3c:	b2db      	uxtb	r3, r3
   14d3e:	2b00      	cmp	r3, #0
   14d40:	d1f5      	bne.n	14d2e <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
   14d42:	4a66      	ldr	r2, [pc, #408]	; (14edc <system_clock_init+0x224>)
   14d44:	8a93      	ldrh	r3, [r2, #20]
   14d46:	2180      	movs	r1, #128	; 0x80
   14d48:	430b      	orrs	r3, r1
   14d4a:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   14d4c:	2380      	movs	r3, #128	; 0x80
   14d4e:	18fb      	adds	r3, r7, r3
   14d50:	0018      	movs	r0, r3
   14d52:	4b69      	ldr	r3, [pc, #420]	; (14ef8 <system_clock_init+0x240>)
   14d54:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   14d56:	2380      	movs	r3, #128	; 0x80
   14d58:	18fb      	adds	r3, r7, r3
   14d5a:	2204      	movs	r2, #4
   14d5c:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   14d5e:	2380      	movs	r3, #128	; 0x80
   14d60:	18fb      	adds	r3, r7, r3
   14d62:	2200      	movs	r2, #0
   14d64:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   14d66:	4b65      	ldr	r3, [pc, #404]	; (14efc <system_clock_init+0x244>)
   14d68:	681b      	ldr	r3, [r3, #0]
   14d6a:	0e9b      	lsrs	r3, r3, #26
   14d6c:	22a4      	movs	r2, #164	; 0xa4
   14d6e:	18ba      	adds	r2, r7, r2
   14d70:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   14d72:	23a4      	movs	r3, #164	; 0xa4
   14d74:	18fb      	adds	r3, r7, r3
   14d76:	681b      	ldr	r3, [r3, #0]
   14d78:	2b3f      	cmp	r3, #63	; 0x3f
   14d7a:	d103      	bne.n	14d84 <system_clock_init+0xcc>
		coarse = 0x1f;
   14d7c:	231f      	movs	r3, #31
   14d7e:	22a4      	movs	r2, #164	; 0xa4
   14d80:	18ba      	adds	r2, r7, r2
   14d82:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   14d84:	23a4      	movs	r3, #164	; 0xa4
   14d86:	18fb      	adds	r3, r7, r3
   14d88:	681b      	ldr	r3, [r3, #0]
   14d8a:	b2da      	uxtb	r2, r3
   14d8c:	2380      	movs	r3, #128	; 0x80
   14d8e:	18fb      	adds	r3, r7, r3
   14d90:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   14d92:	2380      	movs	r3, #128	; 0x80
   14d94:	18fb      	adds	r3, r7, r3
   14d96:	2200      	movs	r2, #0
   14d98:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   14d9a:	2380      	movs	r3, #128	; 0x80
   14d9c:	18fb      	adds	r3, r7, r3
   14d9e:	2200      	movs	r2, #0
   14da0:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   14da2:	2380      	movs	r3, #128	; 0x80
   14da4:	18fb      	adds	r3, r7, r3
   14da6:	2200      	movs	r2, #0
   14da8:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   14daa:	2380      	movs	r3, #128	; 0x80
   14dac:	18fb      	adds	r3, r7, r3
   14dae:	2200      	movs	r2, #0
   14db0:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   14db2:	2380      	movs	r3, #128	; 0x80
   14db4:	18fb      	adds	r3, r7, r3
   14db6:	4a52      	ldr	r2, [pc, #328]	; (14f00 <system_clock_init+0x248>)
   14db8:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   14dba:	2380      	movs	r3, #128	; 0x80
   14dbc:	18fb      	adds	r3, r7, r3
   14dbe:	2207      	movs	r2, #7
   14dc0:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   14dc2:	2380      	movs	r3, #128	; 0x80
   14dc4:	18fb      	adds	r3, r7, r3
   14dc6:	223f      	movs	r2, #63	; 0x3f
   14dc8:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   14dca:	2380      	movs	r3, #128	; 0x80
   14dcc:	18fb      	adds	r3, r7, r3
   14dce:	0018      	movs	r0, r3
   14dd0:	4b4c      	ldr	r3, [pc, #304]	; (14f04 <system_clock_init+0x24c>)
   14dd2:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   14dd4:	237c      	movs	r3, #124	; 0x7c
   14dd6:	18fb      	adds	r3, r7, r3
   14dd8:	0018      	movs	r0, r3
   14dda:	4b4b      	ldr	r3, [pc, #300]	; (14f08 <system_clock_init+0x250>)
   14ddc:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   14dde:	237c      	movs	r3, #124	; 0x7c
   14de0:	18fb      	adds	r3, r7, r3
   14de2:	2200      	movs	r2, #0
   14de4:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   14de6:	237c      	movs	r3, #124	; 0x7c
   14de8:	18fb      	adds	r3, r7, r3
   14dea:	2201      	movs	r2, #1
   14dec:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   14dee:	237c      	movs	r3, #124	; 0x7c
   14df0:	18fb      	adds	r3, r7, r3
   14df2:	2200      	movs	r2, #0
   14df4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   14df6:	237c      	movs	r3, #124	; 0x7c
   14df8:	18fb      	adds	r3, r7, r3
   14dfa:	0018      	movs	r0, r3
   14dfc:	4b43      	ldr	r3, [pc, #268]	; (14f0c <system_clock_init+0x254>)
   14dfe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   14e00:	2006      	movs	r0, #6
   14e02:	4b3b      	ldr	r3, [pc, #236]	; (14ef0 <system_clock_init+0x238>)
   14e04:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   14e06:	4b42      	ldr	r3, [pc, #264]	; (14f10 <system_clock_init+0x258>)
   14e08:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   14e0a:	2364      	movs	r3, #100	; 0x64
   14e0c:	18fb      	adds	r3, r7, r3
   14e0e:	0018      	movs	r0, r3
   14e10:	4b40      	ldr	r3, [pc, #256]	; (14f14 <system_clock_init+0x25c>)
   14e12:	4798      	blx	r3
   14e14:	2364      	movs	r3, #100	; 0x64
   14e16:	18fb      	adds	r3, r7, r3
   14e18:	2205      	movs	r2, #5
   14e1a:	701a      	strb	r2, [r3, #0]
   14e1c:	2364      	movs	r3, #100	; 0x64
   14e1e:	18fb      	adds	r3, r7, r3
   14e20:	2201      	movs	r2, #1
   14e22:	605a      	str	r2, [r3, #4]
   14e24:	2364      	movs	r3, #100	; 0x64
   14e26:	18fb      	adds	r3, r7, r3
   14e28:	2200      	movs	r2, #0
   14e2a:	721a      	strb	r2, [r3, #8]
   14e2c:	2364      	movs	r3, #100	; 0x64
   14e2e:	18fb      	adds	r3, r7, r3
   14e30:	2200      	movs	r2, #0
   14e32:	725a      	strb	r2, [r3, #9]
   14e34:	2364      	movs	r3, #100	; 0x64
   14e36:	18fb      	adds	r3, r7, r3
   14e38:	0019      	movs	r1, r3
   14e3a:	2001      	movs	r0, #1
   14e3c:	4b36      	ldr	r3, [pc, #216]	; (14f18 <system_clock_init+0x260>)
   14e3e:	4798      	blx	r3
   14e40:	2001      	movs	r0, #1
   14e42:	4b36      	ldr	r3, [pc, #216]	; (14f1c <system_clock_init+0x264>)
   14e44:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   14e46:	230c      	movs	r3, #12
   14e48:	18fb      	adds	r3, r7, r3
   14e4a:	0018      	movs	r0, r3
   14e4c:	4b34      	ldr	r3, [pc, #208]	; (14f20 <system_clock_init+0x268>)
   14e4e:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   14e50:	230c      	movs	r3, #12
   14e52:	18fb      	adds	r3, r7, r3
   14e54:	2201      	movs	r2, #1
   14e56:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   14e58:	230c      	movs	r3, #12
   14e5a:	18fb      	adds	r3, r7, r3
   14e5c:	0019      	movs	r1, r3
   14e5e:	2000      	movs	r0, #0
   14e60:	4b30      	ldr	r3, [pc, #192]	; (14f24 <system_clock_init+0x26c>)
   14e62:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   14e64:	2000      	movs	r0, #0
   14e66:	4b30      	ldr	r3, [pc, #192]	; (14f28 <system_clock_init+0x270>)
   14e68:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   14e6a:	2007      	movs	r0, #7
   14e6c:	4b20      	ldr	r3, [pc, #128]	; (14ef0 <system_clock_init+0x238>)
   14e6e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   14e70:	46c0      	nop			; (mov r8, r8)
   14e72:	2007      	movs	r0, #7
   14e74:	4b1f      	ldr	r3, [pc, #124]	; (14ef4 <system_clock_init+0x23c>)
   14e76:	4798      	blx	r3
   14e78:	0003      	movs	r3, r0
   14e7a:	001a      	movs	r2, r3
   14e7c:	2301      	movs	r3, #1
   14e7e:	4053      	eors	r3, r2
   14e80:	b2db      	uxtb	r3, r3
   14e82:	2b00      	cmp	r3, #0
   14e84:	d1f5      	bne.n	14e72 <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   14e86:	2000      	movs	r0, #0
   14e88:	4b28      	ldr	r3, [pc, #160]	; (14f2c <system_clock_init+0x274>)
   14e8a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   14e8c:	2100      	movs	r1, #0
   14e8e:	2000      	movs	r0, #0
   14e90:	4b27      	ldr	r3, [pc, #156]	; (14f30 <system_clock_init+0x278>)
   14e92:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   14e94:	2100      	movs	r1, #0
   14e96:	2001      	movs	r0, #1
   14e98:	4b25      	ldr	r3, [pc, #148]	; (14f30 <system_clock_init+0x278>)
   14e9a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   14e9c:	2100      	movs	r1, #0
   14e9e:	2002      	movs	r0, #2
   14ea0:	4b23      	ldr	r3, [pc, #140]	; (14f30 <system_clock_init+0x278>)
   14ea2:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   14ea4:	003b      	movs	r3, r7
   14ea6:	0018      	movs	r0, r3
   14ea8:	4b1a      	ldr	r3, [pc, #104]	; (14f14 <system_clock_init+0x25c>)
   14eaa:	4798      	blx	r3
   14eac:	003b      	movs	r3, r7
   14eae:	2207      	movs	r2, #7
   14eb0:	701a      	strb	r2, [r3, #0]
   14eb2:	003b      	movs	r3, r7
   14eb4:	2201      	movs	r2, #1
   14eb6:	605a      	str	r2, [r3, #4]
   14eb8:	003b      	movs	r3, r7
   14eba:	2200      	movs	r2, #0
   14ebc:	721a      	strb	r2, [r3, #8]
   14ebe:	003b      	movs	r3, r7
   14ec0:	2200      	movs	r2, #0
   14ec2:	725a      	strb	r2, [r3, #9]
   14ec4:	003b      	movs	r3, r7
   14ec6:	0019      	movs	r1, r3
   14ec8:	2000      	movs	r0, #0
   14eca:	4b13      	ldr	r3, [pc, #76]	; (14f18 <system_clock_init+0x260>)
   14ecc:	4798      	blx	r3
   14ece:	2000      	movs	r0, #0
   14ed0:	4b12      	ldr	r3, [pc, #72]	; (14f1c <system_clock_init+0x264>)
   14ed2:	4798      	blx	r3
#endif
}
   14ed4:	46c0      	nop			; (mov r8, r8)
   14ed6:	46bd      	mov	sp, r7
   14ed8:	b02a      	add	sp, #168	; 0xa8
   14eda:	bd80      	pop	{r7, pc}
   14edc:	40000800 	.word	0x40000800
   14ee0:	00014799 	.word	0x00014799
   14ee4:	00014c81 	.word	0x00014c81
   14ee8:	00014665 	.word	0x00014665
   14eec:	00014961 	.word	0x00014961
   14ef0:	00014b51 	.word	0x00014b51
   14ef4:	00014bfd 	.word	0x00014bfd
   14ef8:	000146d1 	.word	0x000146d1
   14efc:	00806024 	.word	0x00806024
   14f00:	000005b9 	.word	0x000005b9
   14f04:	00014a81 	.word	0x00014a81
   14f08:	000146ad 	.word	0x000146ad
   14f0c:	000148e9 	.word	0x000148e9
   14f10:	00014fd9 	.word	0x00014fd9
   14f14:	0001461d 	.word	0x0001461d
   14f18:	00015009 	.word	0x00015009
   14f1c:	0001512d 	.word	0x0001512d
   14f20:	0001464d 	.word	0x0001464d
   14f24:	00015261 	.word	0x00015261
   14f28:	000152a5 	.word	0x000152a5
   14f2c:	00014725 	.word	0x00014725
   14f30:	00014745 	.word	0x00014745

00014f34 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   14f34:	b580      	push	{r7, lr}
   14f36:	b082      	sub	sp, #8
   14f38:	af00      	add	r7, sp, #0
   14f3a:	0002      	movs	r2, r0
   14f3c:	6039      	str	r1, [r7, #0]
   14f3e:	1dfb      	adds	r3, r7, #7
   14f40:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   14f42:	1dfb      	adds	r3, r7, #7
   14f44:	781b      	ldrb	r3, [r3, #0]
   14f46:	2b01      	cmp	r3, #1
   14f48:	d00a      	beq.n	14f60 <system_apb_clock_set_mask+0x2c>
   14f4a:	2b02      	cmp	r3, #2
   14f4c:	d00f      	beq.n	14f6e <system_apb_clock_set_mask+0x3a>
   14f4e:	2b00      	cmp	r3, #0
   14f50:	d114      	bne.n	14f7c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   14f52:	4b0e      	ldr	r3, [pc, #56]	; (14f8c <system_apb_clock_set_mask+0x58>)
   14f54:	4a0d      	ldr	r2, [pc, #52]	; (14f8c <system_apb_clock_set_mask+0x58>)
   14f56:	6991      	ldr	r1, [r2, #24]
   14f58:	683a      	ldr	r2, [r7, #0]
   14f5a:	430a      	orrs	r2, r1
   14f5c:	619a      	str	r2, [r3, #24]
			break;
   14f5e:	e00f      	b.n	14f80 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   14f60:	4b0a      	ldr	r3, [pc, #40]	; (14f8c <system_apb_clock_set_mask+0x58>)
   14f62:	4a0a      	ldr	r2, [pc, #40]	; (14f8c <system_apb_clock_set_mask+0x58>)
   14f64:	69d1      	ldr	r1, [r2, #28]
   14f66:	683a      	ldr	r2, [r7, #0]
   14f68:	430a      	orrs	r2, r1
   14f6a:	61da      	str	r2, [r3, #28]
			break;
   14f6c:	e008      	b.n	14f80 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   14f6e:	4b07      	ldr	r3, [pc, #28]	; (14f8c <system_apb_clock_set_mask+0x58>)
   14f70:	4a06      	ldr	r2, [pc, #24]	; (14f8c <system_apb_clock_set_mask+0x58>)
   14f72:	6a11      	ldr	r1, [r2, #32]
   14f74:	683a      	ldr	r2, [r7, #0]
   14f76:	430a      	orrs	r2, r1
   14f78:	621a      	str	r2, [r3, #32]
			break;
   14f7a:	e001      	b.n	14f80 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   14f7c:	2317      	movs	r3, #23
   14f7e:	e000      	b.n	14f82 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   14f80:	2300      	movs	r3, #0
}
   14f82:	0018      	movs	r0, r3
   14f84:	46bd      	mov	sp, r7
   14f86:	b002      	add	sp, #8
   14f88:	bd80      	pop	{r7, pc}
   14f8a:	46c0      	nop			; (mov r8, r8)
   14f8c:	40000400 	.word	0x40000400

00014f90 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
   14f90:	b580      	push	{r7, lr}
   14f92:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   14f94:	4b02      	ldr	r3, [pc, #8]	; (14fa0 <system_interrupt_enter_critical_section+0x10>)
   14f96:	4798      	blx	r3
}
   14f98:	46c0      	nop			; (mov r8, r8)
   14f9a:	46bd      	mov	sp, r7
   14f9c:	bd80      	pop	{r7, pc}
   14f9e:	46c0      	nop			; (mov r8, r8)
   14fa0:	00010c91 	.word	0x00010c91

00014fa4 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
   14fa4:	b580      	push	{r7, lr}
   14fa6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   14fa8:	4b02      	ldr	r3, [pc, #8]	; (14fb4 <system_interrupt_leave_critical_section+0x10>)
   14faa:	4798      	blx	r3
}
   14fac:	46c0      	nop			; (mov r8, r8)
   14fae:	46bd      	mov	sp, r7
   14fb0:	bd80      	pop	{r7, pc}
   14fb2:	46c0      	nop			; (mov r8, r8)
   14fb4:	00010ce5 	.word	0x00010ce5

00014fb8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   14fb8:	b580      	push	{r7, lr}
   14fba:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   14fbc:	4b05      	ldr	r3, [pc, #20]	; (14fd4 <system_gclk_is_syncing+0x1c>)
   14fbe:	785b      	ldrb	r3, [r3, #1]
   14fc0:	b2db      	uxtb	r3, r3
   14fc2:	b25b      	sxtb	r3, r3
   14fc4:	2b00      	cmp	r3, #0
   14fc6:	da01      	bge.n	14fcc <system_gclk_is_syncing+0x14>
		return true;
   14fc8:	2301      	movs	r3, #1
   14fca:	e000      	b.n	14fce <system_gclk_is_syncing+0x16>
	}

	return false;
   14fcc:	2300      	movs	r3, #0
}
   14fce:	0018      	movs	r0, r3
   14fd0:	46bd      	mov	sp, r7
   14fd2:	bd80      	pop	{r7, pc}
   14fd4:	40000c00 	.word	0x40000c00

00014fd8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   14fd8:	b580      	push	{r7, lr}
   14fda:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   14fdc:	2108      	movs	r1, #8
   14fde:	2000      	movs	r0, #0
   14fe0:	4b07      	ldr	r3, [pc, #28]	; (15000 <system_gclk_init+0x28>)
   14fe2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   14fe4:	4b07      	ldr	r3, [pc, #28]	; (15004 <system_gclk_init+0x2c>)
   14fe6:	2201      	movs	r2, #1
   14fe8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   14fea:	46c0      	nop			; (mov r8, r8)
   14fec:	4b05      	ldr	r3, [pc, #20]	; (15004 <system_gclk_init+0x2c>)
   14fee:	781b      	ldrb	r3, [r3, #0]
   14ff0:	b2db      	uxtb	r3, r3
   14ff2:	001a      	movs	r2, r3
   14ff4:	2301      	movs	r3, #1
   14ff6:	4013      	ands	r3, r2
   14ff8:	d1f8      	bne.n	14fec <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   14ffa:	46c0      	nop			; (mov r8, r8)
   14ffc:	46bd      	mov	sp, r7
   14ffe:	bd80      	pop	{r7, pc}
   15000:	00014f35 	.word	0x00014f35
   15004:	40000c00 	.word	0x40000c00

00015008 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   15008:	b580      	push	{r7, lr}
   1500a:	b086      	sub	sp, #24
   1500c:	af00      	add	r7, sp, #0
   1500e:	0002      	movs	r2, r0
   15010:	6039      	str	r1, [r7, #0]
   15012:	1dfb      	adds	r3, r7, #7
   15014:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   15016:	1dfb      	adds	r3, r7, #7
   15018:	781b      	ldrb	r3, [r3, #0]
   1501a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   1501c:	1dfb      	adds	r3, r7, #7
   1501e:	781b      	ldrb	r3, [r3, #0]
   15020:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   15022:	683b      	ldr	r3, [r7, #0]
   15024:	781b      	ldrb	r3, [r3, #0]
   15026:	021b      	lsls	r3, r3, #8
   15028:	001a      	movs	r2, r3
   1502a:	697b      	ldr	r3, [r7, #20]
   1502c:	4313      	orrs	r3, r2
   1502e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   15030:	683b      	ldr	r3, [r7, #0]
   15032:	785b      	ldrb	r3, [r3, #1]
   15034:	2b00      	cmp	r3, #0
   15036:	d004      	beq.n	15042 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   15038:	697b      	ldr	r3, [r7, #20]
   1503a:	2280      	movs	r2, #128	; 0x80
   1503c:	02d2      	lsls	r2, r2, #11
   1503e:	4313      	orrs	r3, r2
   15040:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   15042:	683b      	ldr	r3, [r7, #0]
   15044:	7a5b      	ldrb	r3, [r3, #9]
   15046:	2b00      	cmp	r3, #0
   15048:	d004      	beq.n	15054 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   1504a:	697b      	ldr	r3, [r7, #20]
   1504c:	2280      	movs	r2, #128	; 0x80
   1504e:	0312      	lsls	r2, r2, #12
   15050:	4313      	orrs	r3, r2
   15052:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   15054:	683b      	ldr	r3, [r7, #0]
   15056:	685b      	ldr	r3, [r3, #4]
   15058:	2b01      	cmp	r3, #1
   1505a:	d92c      	bls.n	150b6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   1505c:	683b      	ldr	r3, [r7, #0]
   1505e:	685a      	ldr	r2, [r3, #4]
   15060:	683b      	ldr	r3, [r7, #0]
   15062:	685b      	ldr	r3, [r3, #4]
   15064:	3b01      	subs	r3, #1
   15066:	4013      	ands	r3, r2
   15068:	d11a      	bne.n	150a0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   1506a:	2300      	movs	r3, #0
   1506c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   1506e:	2302      	movs	r3, #2
   15070:	60bb      	str	r3, [r7, #8]
   15072:	e005      	b.n	15080 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   15074:	68fb      	ldr	r3, [r7, #12]
   15076:	3301      	adds	r3, #1
   15078:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
   1507a:	68bb      	ldr	r3, [r7, #8]
   1507c:	005b      	lsls	r3, r3, #1
   1507e:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   15080:	683b      	ldr	r3, [r7, #0]
   15082:	685a      	ldr	r2, [r3, #4]
   15084:	68bb      	ldr	r3, [r7, #8]
   15086:	429a      	cmp	r2, r3
   15088:	d8f4      	bhi.n	15074 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   1508a:	68fb      	ldr	r3, [r7, #12]
   1508c:	021b      	lsls	r3, r3, #8
   1508e:	693a      	ldr	r2, [r7, #16]
   15090:	4313      	orrs	r3, r2
   15092:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   15094:	697b      	ldr	r3, [r7, #20]
   15096:	2280      	movs	r2, #128	; 0x80
   15098:	0352      	lsls	r2, r2, #13
   1509a:	4313      	orrs	r3, r2
   1509c:	617b      	str	r3, [r7, #20]
   1509e:	e00a      	b.n	150b6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   150a0:	683b      	ldr	r3, [r7, #0]
   150a2:	685b      	ldr	r3, [r3, #4]
   150a4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
   150a6:	693a      	ldr	r2, [r7, #16]
   150a8:	4313      	orrs	r3, r2
   150aa:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   150ac:	697b      	ldr	r3, [r7, #20]
   150ae:	2280      	movs	r2, #128	; 0x80
   150b0:	0292      	lsls	r2, r2, #10
   150b2:	4313      	orrs	r3, r2
   150b4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   150b6:	683b      	ldr	r3, [r7, #0]
   150b8:	7a1b      	ldrb	r3, [r3, #8]
   150ba:	2b00      	cmp	r3, #0
   150bc:	d004      	beq.n	150c8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   150be:	697b      	ldr	r3, [r7, #20]
   150c0:	2280      	movs	r2, #128	; 0x80
   150c2:	0392      	lsls	r2, r2, #14
   150c4:	4313      	orrs	r3, r2
   150c6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   150c8:	46c0      	nop			; (mov r8, r8)
   150ca:	4b13      	ldr	r3, [pc, #76]	; (15118 <system_gclk_gen_set_config+0x110>)
   150cc:	4798      	blx	r3
   150ce:	1e03      	subs	r3, r0, #0
   150d0:	d1fb      	bne.n	150ca <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   150d2:	4b12      	ldr	r3, [pc, #72]	; (1511c <system_gclk_gen_set_config+0x114>)
   150d4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   150d6:	4a12      	ldr	r2, [pc, #72]	; (15120 <system_gclk_gen_set_config+0x118>)
   150d8:	1dfb      	adds	r3, r7, #7
   150da:	781b      	ldrb	r3, [r3, #0]
   150dc:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   150de:	46c0      	nop			; (mov r8, r8)
   150e0:	4b0d      	ldr	r3, [pc, #52]	; (15118 <system_gclk_gen_set_config+0x110>)
   150e2:	4798      	blx	r3
   150e4:	1e03      	subs	r3, r0, #0
   150e6:	d1fb      	bne.n	150e0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   150e8:	4b0e      	ldr	r3, [pc, #56]	; (15124 <system_gclk_gen_set_config+0x11c>)
   150ea:	693a      	ldr	r2, [r7, #16]
   150ec:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   150ee:	46c0      	nop			; (mov r8, r8)
   150f0:	4b09      	ldr	r3, [pc, #36]	; (15118 <system_gclk_gen_set_config+0x110>)
   150f2:	4798      	blx	r3
   150f4:	1e03      	subs	r3, r0, #0
   150f6:	d1fb      	bne.n	150f0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   150f8:	4b0a      	ldr	r3, [pc, #40]	; (15124 <system_gclk_gen_set_config+0x11c>)
   150fa:	4a0a      	ldr	r2, [pc, #40]	; (15124 <system_gclk_gen_set_config+0x11c>)
   150fc:	6851      	ldr	r1, [r2, #4]
   150fe:	2280      	movs	r2, #128	; 0x80
   15100:	0252      	lsls	r2, r2, #9
   15102:	4011      	ands	r1, r2
   15104:	697a      	ldr	r2, [r7, #20]
   15106:	430a      	orrs	r2, r1
   15108:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   1510a:	4b07      	ldr	r3, [pc, #28]	; (15128 <system_gclk_gen_set_config+0x120>)
   1510c:	4798      	blx	r3
}
   1510e:	46c0      	nop			; (mov r8, r8)
   15110:	46bd      	mov	sp, r7
   15112:	b006      	add	sp, #24
   15114:	bd80      	pop	{r7, pc}
   15116:	46c0      	nop			; (mov r8, r8)
   15118:	00014fb9 	.word	0x00014fb9
   1511c:	00014f91 	.word	0x00014f91
   15120:	40000c08 	.word	0x40000c08
   15124:	40000c00 	.word	0x40000c00
   15128:	00014fa5 	.word	0x00014fa5

0001512c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   1512c:	b580      	push	{r7, lr}
   1512e:	b082      	sub	sp, #8
   15130:	af00      	add	r7, sp, #0
   15132:	0002      	movs	r2, r0
   15134:	1dfb      	adds	r3, r7, #7
   15136:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   15138:	46c0      	nop			; (mov r8, r8)
   1513a:	4b0e      	ldr	r3, [pc, #56]	; (15174 <system_gclk_gen_enable+0x48>)
   1513c:	4798      	blx	r3
   1513e:	1e03      	subs	r3, r0, #0
   15140:	d1fb      	bne.n	1513a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   15142:	4b0d      	ldr	r3, [pc, #52]	; (15178 <system_gclk_gen_enable+0x4c>)
   15144:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   15146:	4a0d      	ldr	r2, [pc, #52]	; (1517c <system_gclk_gen_enable+0x50>)
   15148:	1dfb      	adds	r3, r7, #7
   1514a:	781b      	ldrb	r3, [r3, #0]
   1514c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   1514e:	46c0      	nop			; (mov r8, r8)
   15150:	4b08      	ldr	r3, [pc, #32]	; (15174 <system_gclk_gen_enable+0x48>)
   15152:	4798      	blx	r3
   15154:	1e03      	subs	r3, r0, #0
   15156:	d1fb      	bne.n	15150 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   15158:	4b09      	ldr	r3, [pc, #36]	; (15180 <system_gclk_gen_enable+0x54>)
   1515a:	4a09      	ldr	r2, [pc, #36]	; (15180 <system_gclk_gen_enable+0x54>)
   1515c:	6852      	ldr	r2, [r2, #4]
   1515e:	2180      	movs	r1, #128	; 0x80
   15160:	0249      	lsls	r1, r1, #9
   15162:	430a      	orrs	r2, r1
   15164:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   15166:	4b07      	ldr	r3, [pc, #28]	; (15184 <system_gclk_gen_enable+0x58>)
   15168:	4798      	blx	r3
}
   1516a:	46c0      	nop			; (mov r8, r8)
   1516c:	46bd      	mov	sp, r7
   1516e:	b002      	add	sp, #8
   15170:	bd80      	pop	{r7, pc}
   15172:	46c0      	nop			; (mov r8, r8)
   15174:	00014fb9 	.word	0x00014fb9
   15178:	00014f91 	.word	0x00014f91
   1517c:	40000c04 	.word	0x40000c04
   15180:	40000c00 	.word	0x40000c00
   15184:	00014fa5 	.word	0x00014fa5

00015188 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   15188:	b580      	push	{r7, lr}
   1518a:	b086      	sub	sp, #24
   1518c:	af00      	add	r7, sp, #0
   1518e:	0002      	movs	r2, r0
   15190:	1dfb      	adds	r3, r7, #7
   15192:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   15194:	46c0      	nop			; (mov r8, r8)
   15196:	4b2a      	ldr	r3, [pc, #168]	; (15240 <system_gclk_gen_get_hz+0xb8>)
   15198:	4798      	blx	r3
   1519a:	1e03      	subs	r3, r0, #0
   1519c:	d1fb      	bne.n	15196 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1519e:	4b29      	ldr	r3, [pc, #164]	; (15244 <system_gclk_gen_get_hz+0xbc>)
   151a0:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   151a2:	4a29      	ldr	r2, [pc, #164]	; (15248 <system_gclk_gen_get_hz+0xc0>)
   151a4:	1dfb      	adds	r3, r7, #7
   151a6:	781b      	ldrb	r3, [r3, #0]
   151a8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   151aa:	46c0      	nop			; (mov r8, r8)
   151ac:	4b24      	ldr	r3, [pc, #144]	; (15240 <system_gclk_gen_get_hz+0xb8>)
   151ae:	4798      	blx	r3
   151b0:	1e03      	subs	r3, r0, #0
   151b2:	d1fb      	bne.n	151ac <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   151b4:	4b25      	ldr	r3, [pc, #148]	; (1524c <system_gclk_gen_get_hz+0xc4>)
   151b6:	685b      	ldr	r3, [r3, #4]
   151b8:	04db      	lsls	r3, r3, #19
   151ba:	0edb      	lsrs	r3, r3, #27
   151bc:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
   151be:	0018      	movs	r0, r3
   151c0:	4b23      	ldr	r3, [pc, #140]	; (15250 <system_gclk_gen_get_hz+0xc8>)
   151c2:	4798      	blx	r3
   151c4:	0003      	movs	r3, r0
   151c6:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   151c8:	4a1f      	ldr	r2, [pc, #124]	; (15248 <system_gclk_gen_get_hz+0xc0>)
   151ca:	1dfb      	adds	r3, r7, #7
   151cc:	781b      	ldrb	r3, [r3, #0]
   151ce:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   151d0:	4b1e      	ldr	r3, [pc, #120]	; (1524c <system_gclk_gen_get_hz+0xc4>)
   151d2:	685b      	ldr	r3, [r3, #4]
   151d4:	02db      	lsls	r3, r3, #11
   151d6:	0fdb      	lsrs	r3, r3, #31
   151d8:	b2da      	uxtb	r2, r3
   151da:	2313      	movs	r3, #19
   151dc:	18fb      	adds	r3, r7, r3
   151de:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   151e0:	4a1c      	ldr	r2, [pc, #112]	; (15254 <system_gclk_gen_get_hz+0xcc>)
   151e2:	1dfb      	adds	r3, r7, #7
   151e4:	781b      	ldrb	r3, [r3, #0]
   151e6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   151e8:	46c0      	nop			; (mov r8, r8)
   151ea:	4b15      	ldr	r3, [pc, #84]	; (15240 <system_gclk_gen_get_hz+0xb8>)
   151ec:	4798      	blx	r3
   151ee:	1e03      	subs	r3, r0, #0
   151f0:	d1fb      	bne.n	151ea <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   151f2:	4b16      	ldr	r3, [pc, #88]	; (1524c <system_gclk_gen_get_hz+0xc4>)
   151f4:	689b      	ldr	r3, [r3, #8]
   151f6:	021b      	lsls	r3, r3, #8
   151f8:	0c1b      	lsrs	r3, r3, #16
   151fa:	b29b      	uxth	r3, r3
   151fc:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   151fe:	4b16      	ldr	r3, [pc, #88]	; (15258 <system_gclk_gen_get_hz+0xd0>)
   15200:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   15202:	2313      	movs	r3, #19
   15204:	18fb      	adds	r3, r7, r3
   15206:	781b      	ldrb	r3, [r3, #0]
   15208:	2b00      	cmp	r3, #0
   1520a:	d109      	bne.n	15220 <system_gclk_gen_get_hz+0x98>
   1520c:	68fb      	ldr	r3, [r7, #12]
   1520e:	2b01      	cmp	r3, #1
   15210:	d906      	bls.n	15220 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   15212:	4b12      	ldr	r3, [pc, #72]	; (1525c <system_gclk_gen_get_hz+0xd4>)
   15214:	68f9      	ldr	r1, [r7, #12]
   15216:	6978      	ldr	r0, [r7, #20]
   15218:	4798      	blx	r3
   1521a:	0003      	movs	r3, r0
   1521c:	617b      	str	r3, [r7, #20]
   1521e:	e00a      	b.n	15236 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   15220:	2313      	movs	r3, #19
   15222:	18fb      	adds	r3, r7, r3
   15224:	781b      	ldrb	r3, [r3, #0]
   15226:	2b00      	cmp	r3, #0
   15228:	d005      	beq.n	15236 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   1522a:	68fb      	ldr	r3, [r7, #12]
   1522c:	3301      	adds	r3, #1
   1522e:	697a      	ldr	r2, [r7, #20]
   15230:	40da      	lsrs	r2, r3
   15232:	0013      	movs	r3, r2
   15234:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   15236:	697b      	ldr	r3, [r7, #20]
}
   15238:	0018      	movs	r0, r3
   1523a:	46bd      	mov	sp, r7
   1523c:	b006      	add	sp, #24
   1523e:	bd80      	pop	{r7, pc}
   15240:	00014fb9 	.word	0x00014fb9
   15244:	00014f91 	.word	0x00014f91
   15248:	40000c04 	.word	0x40000c04
   1524c:	40000c00 	.word	0x40000c00
   15250:	0001482d 	.word	0x0001482d
   15254:	40000c08 	.word	0x40000c08
   15258:	00014fa5 	.word	0x00014fa5
   1525c:	000180d1 	.word	0x000180d1

00015260 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   15260:	b580      	push	{r7, lr}
   15262:	b084      	sub	sp, #16
   15264:	af00      	add	r7, sp, #0
   15266:	0002      	movs	r2, r0
   15268:	6039      	str	r1, [r7, #0]
   1526a:	1dfb      	adds	r3, r7, #7
   1526c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   1526e:	1dfb      	adds	r3, r7, #7
   15270:	781b      	ldrb	r3, [r3, #0]
   15272:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   15274:	683b      	ldr	r3, [r7, #0]
   15276:	781b      	ldrb	r3, [r3, #0]
   15278:	021b      	lsls	r3, r3, #8
   1527a:	001a      	movs	r2, r3
   1527c:	68fb      	ldr	r3, [r7, #12]
   1527e:	4313      	orrs	r3, r2
   15280:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   15282:	1dfb      	adds	r3, r7, #7
   15284:	781b      	ldrb	r3, [r3, #0]
   15286:	0018      	movs	r0, r3
   15288:	4b04      	ldr	r3, [pc, #16]	; (1529c <system_gclk_chan_set_config+0x3c>)
   1528a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   1528c:	4b04      	ldr	r3, [pc, #16]	; (152a0 <system_gclk_chan_set_config+0x40>)
   1528e:	68fa      	ldr	r2, [r7, #12]
   15290:	b292      	uxth	r2, r2
   15292:	805a      	strh	r2, [r3, #2]
}
   15294:	46c0      	nop			; (mov r8, r8)
   15296:	46bd      	mov	sp, r7
   15298:	b004      	add	sp, #16
   1529a:	bd80      	pop	{r7, pc}
   1529c:	000152ed 	.word	0x000152ed
   152a0:	40000c00 	.word	0x40000c00

000152a4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   152a4:	b580      	push	{r7, lr}
   152a6:	b082      	sub	sp, #8
   152a8:	af00      	add	r7, sp, #0
   152aa:	0002      	movs	r2, r0
   152ac:	1dfb      	adds	r3, r7, #7
   152ae:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   152b0:	4b0a      	ldr	r3, [pc, #40]	; (152dc <system_gclk_chan_enable+0x38>)
   152b2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   152b4:	4a0a      	ldr	r2, [pc, #40]	; (152e0 <system_gclk_chan_enable+0x3c>)
   152b6:	1dfb      	adds	r3, r7, #7
   152b8:	781b      	ldrb	r3, [r3, #0]
   152ba:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   152bc:	4909      	ldr	r1, [pc, #36]	; (152e4 <system_gclk_chan_enable+0x40>)
   152be:	4b09      	ldr	r3, [pc, #36]	; (152e4 <system_gclk_chan_enable+0x40>)
   152c0:	885b      	ldrh	r3, [r3, #2]
   152c2:	b29b      	uxth	r3, r3
   152c4:	2280      	movs	r2, #128	; 0x80
   152c6:	01d2      	lsls	r2, r2, #7
   152c8:	4313      	orrs	r3, r2
   152ca:	b29b      	uxth	r3, r3
   152cc:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   152ce:	4b06      	ldr	r3, [pc, #24]	; (152e8 <system_gclk_chan_enable+0x44>)
   152d0:	4798      	blx	r3
}
   152d2:	46c0      	nop			; (mov r8, r8)
   152d4:	46bd      	mov	sp, r7
   152d6:	b002      	add	sp, #8
   152d8:	bd80      	pop	{r7, pc}
   152da:	46c0      	nop			; (mov r8, r8)
   152dc:	00014f91 	.word	0x00014f91
   152e0:	40000c02 	.word	0x40000c02
   152e4:	40000c00 	.word	0x40000c00
   152e8:	00014fa5 	.word	0x00014fa5

000152ec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   152ec:	b580      	push	{r7, lr}
   152ee:	b084      	sub	sp, #16
   152f0:	af00      	add	r7, sp, #0
   152f2:	0002      	movs	r2, r0
   152f4:	1dfb      	adds	r3, r7, #7
   152f6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   152f8:	4b1c      	ldr	r3, [pc, #112]	; (1536c <system_gclk_chan_disable+0x80>)
   152fa:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   152fc:	4a1c      	ldr	r2, [pc, #112]	; (15370 <system_gclk_chan_disable+0x84>)
   152fe:	1dfb      	adds	r3, r7, #7
   15300:	781b      	ldrb	r3, [r3, #0]
   15302:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   15304:	4b1b      	ldr	r3, [pc, #108]	; (15374 <system_gclk_chan_disable+0x88>)
   15306:	885b      	ldrh	r3, [r3, #2]
   15308:	051b      	lsls	r3, r3, #20
   1530a:	0f1b      	lsrs	r3, r3, #28
   1530c:	b2db      	uxtb	r3, r3
   1530e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   15310:	4a18      	ldr	r2, [pc, #96]	; (15374 <system_gclk_chan_disable+0x88>)
   15312:	8853      	ldrh	r3, [r2, #2]
   15314:	4918      	ldr	r1, [pc, #96]	; (15378 <system_gclk_chan_disable+0x8c>)
   15316:	400b      	ands	r3, r1
   15318:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   1531a:	4a16      	ldr	r2, [pc, #88]	; (15374 <system_gclk_chan_disable+0x88>)
   1531c:	4b15      	ldr	r3, [pc, #84]	; (15374 <system_gclk_chan_disable+0x88>)
   1531e:	885b      	ldrh	r3, [r3, #2]
   15320:	b29b      	uxth	r3, r3
   15322:	4916      	ldr	r1, [pc, #88]	; (1537c <system_gclk_chan_disable+0x90>)
   15324:	400b      	ands	r3, r1
   15326:	b29b      	uxth	r3, r3
   15328:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   1532a:	46c0      	nop			; (mov r8, r8)
   1532c:	4b11      	ldr	r3, [pc, #68]	; (15374 <system_gclk_chan_disable+0x88>)
   1532e:	885b      	ldrh	r3, [r3, #2]
   15330:	b29b      	uxth	r3, r3
   15332:	001a      	movs	r2, r3
   15334:	2380      	movs	r3, #128	; 0x80
   15336:	01db      	lsls	r3, r3, #7
   15338:	4013      	ands	r3, r2
   1533a:	d1f7      	bne.n	1532c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1533c:	4a0d      	ldr	r2, [pc, #52]	; (15374 <system_gclk_chan_disable+0x88>)
   1533e:	68fb      	ldr	r3, [r7, #12]
   15340:	b2db      	uxtb	r3, r3
   15342:	1c19      	adds	r1, r3, #0
   15344:	230f      	movs	r3, #15
   15346:	400b      	ands	r3, r1
   15348:	b2d9      	uxtb	r1, r3
   1534a:	8853      	ldrh	r3, [r2, #2]
   1534c:	1c08      	adds	r0, r1, #0
   1534e:	210f      	movs	r1, #15
   15350:	4001      	ands	r1, r0
   15352:	0208      	lsls	r0, r1, #8
   15354:	4908      	ldr	r1, [pc, #32]	; (15378 <system_gclk_chan_disable+0x8c>)
   15356:	400b      	ands	r3, r1
   15358:	1c19      	adds	r1, r3, #0
   1535a:	1c03      	adds	r3, r0, #0
   1535c:	430b      	orrs	r3, r1
   1535e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   15360:	4b07      	ldr	r3, [pc, #28]	; (15380 <system_gclk_chan_disable+0x94>)
   15362:	4798      	blx	r3
}
   15364:	46c0      	nop			; (mov r8, r8)
   15366:	46bd      	mov	sp, r7
   15368:	b004      	add	sp, #16
   1536a:	bd80      	pop	{r7, pc}
   1536c:	00014f91 	.word	0x00014f91
   15370:	40000c02 	.word	0x40000c02
   15374:	40000c00 	.word	0x40000c00
   15378:	fffff0ff 	.word	0xfffff0ff
   1537c:	ffffbfff 	.word	0xffffbfff
   15380:	00014fa5 	.word	0x00014fa5

00015384 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   15384:	b580      	push	{r7, lr}
   15386:	b084      	sub	sp, #16
   15388:	af00      	add	r7, sp, #0
   1538a:	0002      	movs	r2, r0
   1538c:	1dfb      	adds	r3, r7, #7
   1538e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   15390:	4b0d      	ldr	r3, [pc, #52]	; (153c8 <system_gclk_chan_get_hz+0x44>)
   15392:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   15394:	4a0d      	ldr	r2, [pc, #52]	; (153cc <system_gclk_chan_get_hz+0x48>)
   15396:	1dfb      	adds	r3, r7, #7
   15398:	781b      	ldrb	r3, [r3, #0]
   1539a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   1539c:	4b0c      	ldr	r3, [pc, #48]	; (153d0 <system_gclk_chan_get_hz+0x4c>)
   1539e:	885b      	ldrh	r3, [r3, #2]
   153a0:	051b      	lsls	r3, r3, #20
   153a2:	0f1b      	lsrs	r3, r3, #28
   153a4:	b2da      	uxtb	r2, r3
   153a6:	230f      	movs	r3, #15
   153a8:	18fb      	adds	r3, r7, r3
   153aa:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   153ac:	4b09      	ldr	r3, [pc, #36]	; (153d4 <system_gclk_chan_get_hz+0x50>)
   153ae:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   153b0:	230f      	movs	r3, #15
   153b2:	18fb      	adds	r3, r7, r3
   153b4:	781b      	ldrb	r3, [r3, #0]
   153b6:	0018      	movs	r0, r3
   153b8:	4b07      	ldr	r3, [pc, #28]	; (153d8 <system_gclk_chan_get_hz+0x54>)
   153ba:	4798      	blx	r3
   153bc:	0003      	movs	r3, r0
}
   153be:	0018      	movs	r0, r3
   153c0:	46bd      	mov	sp, r7
   153c2:	b004      	add	sp, #16
   153c4:	bd80      	pop	{r7, pc}
   153c6:	46c0      	nop			; (mov r8, r8)
   153c8:	00014f91 	.word	0x00014f91
   153cc:	40000c02 	.word	0x40000c02
   153d0:	40000c00 	.word	0x40000c00
   153d4:	00014fa5 	.word	0x00014fa5
   153d8:	00015189 	.word	0x00015189

000153dc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   153dc:	b580      	push	{r7, lr}
   153de:	b084      	sub	sp, #16
   153e0:	af00      	add	r7, sp, #0
   153e2:	0002      	movs	r2, r0
   153e4:	1dfb      	adds	r3, r7, #7
   153e6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   153e8:	230f      	movs	r3, #15
   153ea:	18fb      	adds	r3, r7, r3
   153ec:	1dfa      	adds	r2, r7, #7
   153ee:	7812      	ldrb	r2, [r2, #0]
   153f0:	09d2      	lsrs	r2, r2, #7
   153f2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   153f4:	230e      	movs	r3, #14
   153f6:	18fb      	adds	r3, r7, r3
   153f8:	1dfa      	adds	r2, r7, #7
   153fa:	7812      	ldrb	r2, [r2, #0]
   153fc:	0952      	lsrs	r2, r2, #5
   153fe:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   15400:	4b0d      	ldr	r3, [pc, #52]	; (15438 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   15402:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   15404:	230f      	movs	r3, #15
   15406:	18fb      	adds	r3, r7, r3
   15408:	781b      	ldrb	r3, [r3, #0]
   1540a:	2b00      	cmp	r3, #0
   1540c:	d10f      	bne.n	1542e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1540e:	230f      	movs	r3, #15
   15410:	18fb      	adds	r3, r7, r3
   15412:	781b      	ldrb	r3, [r3, #0]
   15414:	009b      	lsls	r3, r3, #2
   15416:	2210      	movs	r2, #16
   15418:	4694      	mov	ip, r2
   1541a:	44bc      	add	ip, r7
   1541c:	4463      	add	r3, ip
   1541e:	3b08      	subs	r3, #8
   15420:	681a      	ldr	r2, [r3, #0]
   15422:	230e      	movs	r3, #14
   15424:	18fb      	adds	r3, r7, r3
   15426:	781b      	ldrb	r3, [r3, #0]
   15428:	01db      	lsls	r3, r3, #7
   1542a:	18d3      	adds	r3, r2, r3
   1542c:	e000      	b.n	15430 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   1542e:	2300      	movs	r3, #0
	}
}
   15430:	0018      	movs	r0, r3
   15432:	46bd      	mov	sp, r7
   15434:	b004      	add	sp, #16
   15436:	bd80      	pop	{r7, pc}
   15438:	41004400 	.word	0x41004400

0001543c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   1543c:	b580      	push	{r7, lr}
   1543e:	b088      	sub	sp, #32
   15440:	af00      	add	r7, sp, #0
   15442:	60f8      	str	r0, [r7, #12]
   15444:	60b9      	str	r1, [r7, #8]
   15446:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   15448:	2300      	movs	r3, #0
   1544a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   1544c:	687b      	ldr	r3, [r7, #4]
   1544e:	78db      	ldrb	r3, [r3, #3]
   15450:	2201      	movs	r2, #1
   15452:	4053      	eors	r3, r2
   15454:	b2db      	uxtb	r3, r3
   15456:	2b00      	cmp	r3, #0
   15458:	d035      	beq.n	154c6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   1545a:	687b      	ldr	r3, [r7, #4]
   1545c:	781b      	ldrb	r3, [r3, #0]
   1545e:	2b80      	cmp	r3, #128	; 0x80
   15460:	d00b      	beq.n	1547a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   15462:	69fb      	ldr	r3, [r7, #28]
   15464:	2280      	movs	r2, #128	; 0x80
   15466:	0252      	lsls	r2, r2, #9
   15468:	4313      	orrs	r3, r2
   1546a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   1546c:	687b      	ldr	r3, [r7, #4]
   1546e:	781b      	ldrb	r3, [r3, #0]
   15470:	061b      	lsls	r3, r3, #24
   15472:	001a      	movs	r2, r3
   15474:	69fb      	ldr	r3, [r7, #28]
   15476:	4313      	orrs	r3, r2
   15478:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1547a:	687b      	ldr	r3, [r7, #4]
   1547c:	785b      	ldrb	r3, [r3, #1]
   1547e:	2b00      	cmp	r3, #0
   15480:	d003      	beq.n	1548a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   15482:	687b      	ldr	r3, [r7, #4]
   15484:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   15486:	2b02      	cmp	r3, #2
   15488:	d110      	bne.n	154ac <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   1548a:	69fb      	ldr	r3, [r7, #28]
   1548c:	2280      	movs	r2, #128	; 0x80
   1548e:	0292      	lsls	r2, r2, #10
   15490:	4313      	orrs	r3, r2
   15492:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   15494:	687b      	ldr	r3, [r7, #4]
   15496:	789b      	ldrb	r3, [r3, #2]
   15498:	2b00      	cmp	r3, #0
   1549a:	d004      	beq.n	154a6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1549c:	69fb      	ldr	r3, [r7, #28]
   1549e:	2280      	movs	r2, #128	; 0x80
   154a0:	02d2      	lsls	r2, r2, #11
   154a2:	4313      	orrs	r3, r2
   154a4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   154a6:	68fb      	ldr	r3, [r7, #12]
   154a8:	68ba      	ldr	r2, [r7, #8]
   154aa:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   154ac:	687b      	ldr	r3, [r7, #4]
   154ae:	785b      	ldrb	r3, [r3, #1]
   154b0:	2b01      	cmp	r3, #1
   154b2:	d003      	beq.n	154bc <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   154b4:	687b      	ldr	r3, [r7, #4]
   154b6:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   154b8:	2b02      	cmp	r3, #2
   154ba:	d107      	bne.n	154cc <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   154bc:	69fb      	ldr	r3, [r7, #28]
   154be:	4a22      	ldr	r2, [pc, #136]	; (15548 <_system_pinmux_config+0x10c>)
   154c0:	4013      	ands	r3, r2
   154c2:	61fb      	str	r3, [r7, #28]
   154c4:	e002      	b.n	154cc <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   154c6:	68fb      	ldr	r3, [r7, #12]
   154c8:	68ba      	ldr	r2, [r7, #8]
   154ca:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   154cc:	68bb      	ldr	r3, [r7, #8]
   154ce:	041b      	lsls	r3, r3, #16
   154d0:	0c1b      	lsrs	r3, r3, #16
   154d2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   154d4:	68bb      	ldr	r3, [r7, #8]
   154d6:	0c1b      	lsrs	r3, r3, #16
   154d8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   154da:	69ba      	ldr	r2, [r7, #24]
   154dc:	69fb      	ldr	r3, [r7, #28]
   154de:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   154e0:	22a0      	movs	r2, #160	; 0xa0
   154e2:	05d2      	lsls	r2, r2, #23
   154e4:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   154e6:	68fb      	ldr	r3, [r7, #12]
   154e8:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   154ea:	697a      	ldr	r2, [r7, #20]
   154ec:	69fb      	ldr	r3, [r7, #28]
   154ee:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   154f0:	22d0      	movs	r2, #208	; 0xd0
   154f2:	0612      	lsls	r2, r2, #24
   154f4:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   154f6:	68fb      	ldr	r3, [r7, #12]
   154f8:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   154fa:	687b      	ldr	r3, [r7, #4]
   154fc:	78db      	ldrb	r3, [r3, #3]
   154fe:	2201      	movs	r2, #1
   15500:	4053      	eors	r3, r2
   15502:	b2db      	uxtb	r3, r3
   15504:	2b00      	cmp	r3, #0
   15506:	d01a      	beq.n	1553e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   15508:	69fa      	ldr	r2, [r7, #28]
   1550a:	2380      	movs	r3, #128	; 0x80
   1550c:	02db      	lsls	r3, r3, #11
   1550e:	4013      	ands	r3, r2
   15510:	d00a      	beq.n	15528 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   15512:	687b      	ldr	r3, [r7, #4]
   15514:	789b      	ldrb	r3, [r3, #2]
   15516:	2b01      	cmp	r3, #1
   15518:	d103      	bne.n	15522 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   1551a:	68fb      	ldr	r3, [r7, #12]
   1551c:	68ba      	ldr	r2, [r7, #8]
   1551e:	619a      	str	r2, [r3, #24]
   15520:	e002      	b.n	15528 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   15522:	68fb      	ldr	r3, [r7, #12]
   15524:	68ba      	ldr	r2, [r7, #8]
   15526:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   15528:	687b      	ldr	r3, [r7, #4]
   1552a:	785b      	ldrb	r3, [r3, #1]
   1552c:	2b01      	cmp	r3, #1
   1552e:	d003      	beq.n	15538 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   15530:	687b      	ldr	r3, [r7, #4]
   15532:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   15534:	2b02      	cmp	r3, #2
   15536:	d102      	bne.n	1553e <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   15538:	68fb      	ldr	r3, [r7, #12]
   1553a:	68ba      	ldr	r2, [r7, #8]
   1553c:	609a      	str	r2, [r3, #8]
		}
	}
}
   1553e:	46c0      	nop			; (mov r8, r8)
   15540:	46bd      	mov	sp, r7
   15542:	b008      	add	sp, #32
   15544:	bd80      	pop	{r7, pc}
   15546:	46c0      	nop			; (mov r8, r8)
   15548:	fffbffff 	.word	0xfffbffff

0001554c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   1554c:	b580      	push	{r7, lr}
   1554e:	b084      	sub	sp, #16
   15550:	af00      	add	r7, sp, #0
   15552:	0002      	movs	r2, r0
   15554:	6039      	str	r1, [r7, #0]
   15556:	1dfb      	adds	r3, r7, #7
   15558:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1555a:	1dfb      	adds	r3, r7, #7
   1555c:	781b      	ldrb	r3, [r3, #0]
   1555e:	0018      	movs	r0, r3
   15560:	4b0a      	ldr	r3, [pc, #40]	; (1558c <system_pinmux_pin_set_config+0x40>)
   15562:	4798      	blx	r3
   15564:	0003      	movs	r3, r0
   15566:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   15568:	1dfb      	adds	r3, r7, #7
   1556a:	781b      	ldrb	r3, [r3, #0]
   1556c:	221f      	movs	r2, #31
   1556e:	4013      	ands	r3, r2
   15570:	2201      	movs	r2, #1
   15572:	409a      	lsls	r2, r3
   15574:	0013      	movs	r3, r2
   15576:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   15578:	683a      	ldr	r2, [r7, #0]
   1557a:	68b9      	ldr	r1, [r7, #8]
   1557c:	68fb      	ldr	r3, [r7, #12]
   1557e:	0018      	movs	r0, r3
   15580:	4b03      	ldr	r3, [pc, #12]	; (15590 <system_pinmux_pin_set_config+0x44>)
   15582:	4798      	blx	r3
}
   15584:	46c0      	nop			; (mov r8, r8)
   15586:	46bd      	mov	sp, r7
   15588:	b004      	add	sp, #16
   1558a:	bd80      	pop	{r7, pc}
   1558c:	000153dd 	.word	0x000153dd
   15590:	0001543d 	.word	0x0001543d

00015594 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   15594:	b580      	push	{r7, lr}
   15596:	af00      	add	r7, sp, #0
	return;
   15598:	46c0      	nop			; (mov r8, r8)
}
   1559a:	46bd      	mov	sp, r7
   1559c:	bd80      	pop	{r7, pc}
   1559e:	46c0      	nop			; (mov r8, r8)

000155a0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   155a0:	b580      	push	{r7, lr}
   155a2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   155a4:	4b06      	ldr	r3, [pc, #24]	; (155c0 <system_init+0x20>)
   155a6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   155a8:	4b06      	ldr	r3, [pc, #24]	; (155c4 <system_init+0x24>)
   155aa:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   155ac:	4b06      	ldr	r3, [pc, #24]	; (155c8 <system_init+0x28>)
   155ae:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   155b0:	4b06      	ldr	r3, [pc, #24]	; (155cc <system_init+0x2c>)
   155b2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   155b4:	4b06      	ldr	r3, [pc, #24]	; (155d0 <system_init+0x30>)
   155b6:	4798      	blx	r3
}
   155b8:	46c0      	nop			; (mov r8, r8)
   155ba:	46bd      	mov	sp, r7
   155bc:	bd80      	pop	{r7, pc}
   155be:	46c0      	nop			; (mov r8, r8)
   155c0:	00014cb9 	.word	0x00014cb9
   155c4:	00010ebd 	.word	0x00010ebd
   155c8:	00015595 	.word	0x00015595
   155cc:	0000dfed 	.word	0x0000dfed
   155d0:	00015595 	.word	0x00015595

000155d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   155d4:	b580      	push	{r7, lr}
   155d6:	b086      	sub	sp, #24
   155d8:	af00      	add	r7, sp, #0
   155da:	60f8      	str	r0, [r7, #12]
   155dc:	60b9      	str	r1, [r7, #8]
   155de:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   155e0:	2300      	movs	r3, #0
   155e2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   155e4:	68fb      	ldr	r3, [r7, #12]
   155e6:	2b00      	cmp	r3, #0
   155e8:	d012      	beq.n	15610 <_read+0x3c>
		return -1;
   155ea:	2301      	movs	r3, #1
   155ec:	425b      	negs	r3, r3
   155ee:	e013      	b.n	15618 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   155f0:	4b0b      	ldr	r3, [pc, #44]	; (15620 <_read+0x4c>)
   155f2:	681a      	ldr	r2, [r3, #0]
   155f4:	4b0b      	ldr	r3, [pc, #44]	; (15624 <_read+0x50>)
   155f6:	681b      	ldr	r3, [r3, #0]
   155f8:	68b9      	ldr	r1, [r7, #8]
   155fa:	0018      	movs	r0, r3
   155fc:	4790      	blx	r2
		ptr++;
   155fe:	68bb      	ldr	r3, [r7, #8]
   15600:	3301      	adds	r3, #1
   15602:	60bb      	str	r3, [r7, #8]
		nChars++;
   15604:	697b      	ldr	r3, [r7, #20]
   15606:	3301      	adds	r3, #1
   15608:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   1560a:	687b      	ldr	r3, [r7, #4]
   1560c:	3b01      	subs	r3, #1
   1560e:	607b      	str	r3, [r7, #4]
   15610:	687b      	ldr	r3, [r7, #4]
   15612:	2b00      	cmp	r3, #0
   15614:	dcec      	bgt.n	155f0 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   15616:	697b      	ldr	r3, [r7, #20]
}
   15618:	0018      	movs	r0, r3
   1561a:	46bd      	mov	sp, r7
   1561c:	b006      	add	sp, #24
   1561e:	bd80      	pop	{r7, pc}
   15620:	20000478 	.word	0x20000478
   15624:	20000480 	.word	0x20000480

00015628 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   15628:	b580      	push	{r7, lr}
   1562a:	b086      	sub	sp, #24
   1562c:	af00      	add	r7, sp, #0
   1562e:	60f8      	str	r0, [r7, #12]
   15630:	60b9      	str	r1, [r7, #8]
   15632:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   15634:	2300      	movs	r3, #0
   15636:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   15638:	68fb      	ldr	r3, [r7, #12]
   1563a:	2b01      	cmp	r3, #1
   1563c:	d01d      	beq.n	1567a <_write+0x52>
   1563e:	68fb      	ldr	r3, [r7, #12]
   15640:	2b02      	cmp	r3, #2
   15642:	d01a      	beq.n	1567a <_write+0x52>
   15644:	68fb      	ldr	r3, [r7, #12]
   15646:	2b03      	cmp	r3, #3
   15648:	d017      	beq.n	1567a <_write+0x52>
		return -1;
   1564a:	2301      	movs	r3, #1
   1564c:	425b      	negs	r3, r3
   1564e:	e018      	b.n	15682 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   15650:	4b0e      	ldr	r3, [pc, #56]	; (1568c <_write+0x64>)
   15652:	681a      	ldr	r2, [r3, #0]
   15654:	4b0e      	ldr	r3, [pc, #56]	; (15690 <_write+0x68>)
   15656:	6818      	ldr	r0, [r3, #0]
   15658:	68bb      	ldr	r3, [r7, #8]
   1565a:	1c59      	adds	r1, r3, #1
   1565c:	60b9      	str	r1, [r7, #8]
   1565e:	781b      	ldrb	r3, [r3, #0]
   15660:	0019      	movs	r1, r3
   15662:	4790      	blx	r2
   15664:	1e03      	subs	r3, r0, #0
   15666:	da02      	bge.n	1566e <_write+0x46>
			return -1;
   15668:	2301      	movs	r3, #1
   1566a:	425b      	negs	r3, r3
   1566c:	e009      	b.n	15682 <_write+0x5a>
		}
		++nChars;
   1566e:	697b      	ldr	r3, [r7, #20]
   15670:	3301      	adds	r3, #1
   15672:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   15674:	687b      	ldr	r3, [r7, #4]
   15676:	3b01      	subs	r3, #1
   15678:	607b      	str	r3, [r7, #4]
   1567a:	687b      	ldr	r3, [r7, #4]
   1567c:	2b00      	cmp	r3, #0
   1567e:	d1e7      	bne.n	15650 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   15680:	697b      	ldr	r3, [r7, #20]
}
   15682:	0018      	movs	r0, r3
   15684:	46bd      	mov	sp, r7
   15686:	b006      	add	sp, #24
   15688:	bd80      	pop	{r7, pc}
   1568a:	46c0      	nop			; (mov r8, r8)
   1568c:	2000047c 	.word	0x2000047c
   15690:	20000480 	.word	0x20000480

00015694 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   15694:	b580      	push	{r7, lr}
   15696:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   15698:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   1569c:	4b02      	ldr	r3, [pc, #8]	; (156a8 <NVIC_SystemReset+0x14>)
   1569e:	4a03      	ldr	r2, [pc, #12]	; (156ac <NVIC_SystemReset+0x18>)
   156a0:	60da      	str	r2, [r3, #12]
   156a2:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   156a6:	e7fe      	b.n	156a6 <NVIC_SystemReset+0x12>
   156a8:	e000ed00 	.word	0xe000ed00
   156ac:	05fa0004 	.word	0x05fa0004

000156b0 <crc32_calculate>:
 * \note To calculate the CRC of multiple blocks, use this function first, then
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
   156b0:	b580      	push	{r7, lr}
   156b2:	b084      	sub	sp, #16
   156b4:	af00      	add	r7, sp, #0
   156b6:	60f8      	str	r0, [r7, #12]
   156b8:	60b9      	str	r1, [r7, #8]
   156ba:	607a      	str	r2, [r7, #4]
	*crc = 0;
   156bc:	687b      	ldr	r3, [r7, #4]
   156be:	2200      	movs	r2, #0
   156c0:	601a      	str	r2, [r3, #0]

	return crc32_recalculate(data, length, crc);
   156c2:	687a      	ldr	r2, [r7, #4]
   156c4:	68b9      	ldr	r1, [r7, #8]
   156c6:	68fb      	ldr	r3, [r7, #12]
   156c8:	0018      	movs	r0, r3
   156ca:	4b03      	ldr	r3, [pc, #12]	; (156d8 <crc32_calculate+0x28>)
   156cc:	4798      	blx	r3
   156ce:	0003      	movs	r3, r0
}
   156d0:	0018      	movs	r0, r3
   156d2:	46bd      	mov	sp, r7
   156d4:	b004      	add	sp, #16
   156d6:	bd80      	pop	{r7, pc}
   156d8:	0000db69 	.word	0x0000db69

000156dc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   156dc:	b580      	push	{r7, lr}
   156de:	b084      	sub	sp, #16
   156e0:	af00      	add	r7, sp, #0
   156e2:	0002      	movs	r2, r0
   156e4:	1dfb      	adds	r3, r7, #7
   156e6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   156e8:	230f      	movs	r3, #15
   156ea:	18fb      	adds	r3, r7, r3
   156ec:	1dfa      	adds	r2, r7, #7
   156ee:	7812      	ldrb	r2, [r2, #0]
   156f0:	09d2      	lsrs	r2, r2, #7
   156f2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   156f4:	230e      	movs	r3, #14
   156f6:	18fb      	adds	r3, r7, r3
   156f8:	1dfa      	adds	r2, r7, #7
   156fa:	7812      	ldrb	r2, [r2, #0]
   156fc:	0952      	lsrs	r2, r2, #5
   156fe:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   15700:	4b0d      	ldr	r3, [pc, #52]	; (15738 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   15702:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   15704:	230f      	movs	r3, #15
   15706:	18fb      	adds	r3, r7, r3
   15708:	781b      	ldrb	r3, [r3, #0]
   1570a:	2b00      	cmp	r3, #0
   1570c:	d10f      	bne.n	1572e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1570e:	230f      	movs	r3, #15
   15710:	18fb      	adds	r3, r7, r3
   15712:	781b      	ldrb	r3, [r3, #0]
   15714:	009b      	lsls	r3, r3, #2
   15716:	2210      	movs	r2, #16
   15718:	4694      	mov	ip, r2
   1571a:	44bc      	add	ip, r7
   1571c:	4463      	add	r3, ip
   1571e:	3b08      	subs	r3, #8
   15720:	681a      	ldr	r2, [r3, #0]
   15722:	230e      	movs	r3, #14
   15724:	18fb      	adds	r3, r7, r3
   15726:	781b      	ldrb	r3, [r3, #0]
   15728:	01db      	lsls	r3, r3, #7
   1572a:	18d3      	adds	r3, r2, r3
   1572c:	e000      	b.n	15730 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   1572e:	2300      	movs	r3, #0
	}
}
   15730:	0018      	movs	r0, r3
   15732:	46bd      	mov	sp, r7
   15734:	b004      	add	sp, #16
   15736:	bd80      	pop	{r7, pc}
   15738:	41004400 	.word	0x41004400

0001573c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1573c:	b580      	push	{r7, lr}
   1573e:	b082      	sub	sp, #8
   15740:	af00      	add	r7, sp, #0
   15742:	0002      	movs	r2, r0
   15744:	1dfb      	adds	r3, r7, #7
   15746:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   15748:	1dfb      	adds	r3, r7, #7
   1574a:	781b      	ldrb	r3, [r3, #0]
   1574c:	0018      	movs	r0, r3
   1574e:	4b03      	ldr	r3, [pc, #12]	; (1575c <port_get_group_from_gpio_pin+0x20>)
   15750:	4798      	blx	r3
   15752:	0003      	movs	r3, r0
}
   15754:	0018      	movs	r0, r3
   15756:	46bd      	mov	sp, r7
   15758:	b002      	add	sp, #8
   1575a:	bd80      	pop	{r7, pc}
   1575c:	000156dd 	.word	0x000156dd

00015760 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   15760:	b580      	push	{r7, lr}
   15762:	b082      	sub	sp, #8
   15764:	af00      	add	r7, sp, #0
   15766:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   15768:	687b      	ldr	r3, [r7, #4]
   1576a:	2200      	movs	r2, #0
   1576c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1576e:	687b      	ldr	r3, [r7, #4]
   15770:	2201      	movs	r2, #1
   15772:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   15774:	687b      	ldr	r3, [r7, #4]
   15776:	2200      	movs	r2, #0
   15778:	709a      	strb	r2, [r3, #2]
}
   1577a:	46c0      	nop			; (mov r8, r8)
   1577c:	46bd      	mov	sp, r7
   1577e:	b002      	add	sp, #8
   15780:	bd80      	pop	{r7, pc}
   15782:	46c0      	nop			; (mov r8, r8)

00015784 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
   15784:	b580      	push	{r7, lr}
   15786:	b084      	sub	sp, #16
   15788:	af00      	add	r7, sp, #0
   1578a:	0002      	movs	r2, r0
   1578c:	1dfb      	adds	r3, r7, #7
   1578e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   15790:	1dfb      	adds	r3, r7, #7
   15792:	781b      	ldrb	r3, [r3, #0]
   15794:	0018      	movs	r0, r3
   15796:	4b0b      	ldr	r3, [pc, #44]	; (157c4 <port_pin_get_input_level+0x40>)
   15798:	4798      	blx	r3
   1579a:	0003      	movs	r3, r0
   1579c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1579e:	1dfb      	adds	r3, r7, #7
   157a0:	781b      	ldrb	r3, [r3, #0]
   157a2:	221f      	movs	r2, #31
   157a4:	4013      	ands	r3, r2
   157a6:	2201      	movs	r2, #1
   157a8:	409a      	lsls	r2, r3
   157aa:	0013      	movs	r3, r2
   157ac:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
   157ae:	68fb      	ldr	r3, [r7, #12]
   157b0:	6a1b      	ldr	r3, [r3, #32]
   157b2:	68ba      	ldr	r2, [r7, #8]
   157b4:	4013      	ands	r3, r2
   157b6:	1e5a      	subs	r2, r3, #1
   157b8:	4193      	sbcs	r3, r2
   157ba:	b2db      	uxtb	r3, r3
}
   157bc:	0018      	movs	r0, r3
   157be:	46bd      	mov	sp, r7
   157c0:	b004      	add	sp, #16
   157c2:	bd80      	pop	{r7, pc}
   157c4:	0001573d 	.word	0x0001573d

000157c8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   157c8:	b580      	push	{r7, lr}
   157ca:	b084      	sub	sp, #16
   157cc:	af00      	add	r7, sp, #0
   157ce:	0002      	movs	r2, r0
   157d0:	1dfb      	adds	r3, r7, #7
   157d2:	701a      	strb	r2, [r3, #0]
   157d4:	1dbb      	adds	r3, r7, #6
   157d6:	1c0a      	adds	r2, r1, #0
   157d8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   157da:	1dfb      	adds	r3, r7, #7
   157dc:	781b      	ldrb	r3, [r3, #0]
   157de:	0018      	movs	r0, r3
   157e0:	4b0d      	ldr	r3, [pc, #52]	; (15818 <port_pin_set_output_level+0x50>)
   157e2:	4798      	blx	r3
   157e4:	0003      	movs	r3, r0
   157e6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   157e8:	1dfb      	adds	r3, r7, #7
   157ea:	781b      	ldrb	r3, [r3, #0]
   157ec:	221f      	movs	r2, #31
   157ee:	4013      	ands	r3, r2
   157f0:	2201      	movs	r2, #1
   157f2:	409a      	lsls	r2, r3
   157f4:	0013      	movs	r3, r2
   157f6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   157f8:	1dbb      	adds	r3, r7, #6
   157fa:	781b      	ldrb	r3, [r3, #0]
   157fc:	2b00      	cmp	r3, #0
   157fe:	d003      	beq.n	15808 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   15800:	68fb      	ldr	r3, [r7, #12]
   15802:	68ba      	ldr	r2, [r7, #8]
   15804:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   15806:	e002      	b.n	1580e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
   15808:	68fb      	ldr	r3, [r7, #12]
   1580a:	68ba      	ldr	r2, [r7, #8]
   1580c:	615a      	str	r2, [r3, #20]
	}
}
   1580e:	46c0      	nop			; (mov r8, r8)
   15810:	46bd      	mov	sp, r7
   15812:	b004      	add	sp, #16
   15814:	bd80      	pop	{r7, pc}
   15816:	46c0      	nop			; (mov r8, r8)
   15818:	0001573d 	.word	0x0001573d

0001581c <port_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
   1581c:	b580      	push	{r7, lr}
   1581e:	b084      	sub	sp, #16
   15820:	af00      	add	r7, sp, #0
   15822:	0002      	movs	r2, r0
   15824:	1dfb      	adds	r3, r7, #7
   15826:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   15828:	1dfb      	adds	r3, r7, #7
   1582a:	781b      	ldrb	r3, [r3, #0]
   1582c:	0018      	movs	r0, r3
   1582e:	4b09      	ldr	r3, [pc, #36]	; (15854 <port_pin_toggle_output_level+0x38>)
   15830:	4798      	blx	r3
   15832:	0003      	movs	r3, r0
   15834:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15836:	1dfb      	adds	r3, r7, #7
   15838:	781b      	ldrb	r3, [r3, #0]
   1583a:	221f      	movs	r2, #31
   1583c:	4013      	ands	r3, r2
   1583e:	2201      	movs	r2, #1
   15840:	409a      	lsls	r2, r3
   15842:	0013      	movs	r3, r2
   15844:	60bb      	str	r3, [r7, #8]

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
   15846:	68fb      	ldr	r3, [r7, #12]
   15848:	68ba      	ldr	r2, [r7, #8]
   1584a:	61da      	str	r2, [r3, #28]
}
   1584c:	46c0      	nop			; (mov r8, r8)
   1584e:	46bd      	mov	sp, r7
   15850:	b004      	add	sp, #16
   15852:	bd80      	pop	{r7, pc}
   15854:	0001573d 	.word	0x0001573d

00015858 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   15858:	b580      	push	{r7, lr}
   1585a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   1585c:	4b02      	ldr	r3, [pc, #8]	; (15868 <system_reset+0x10>)
   1585e:	4798      	blx	r3
}
   15860:	46c0      	nop			; (mov r8, r8)
   15862:	46bd      	mov	sp, r7
   15864:	bd80      	pop	{r7, pc}
   15866:	46c0      	nop			; (mov r8, r8)
   15868:	00015695 	.word	0x00015695

0001586c <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
   1586c:	b580      	push	{r7, lr}
   1586e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   15870:	4b04      	ldr	r3, [pc, #16]	; (15884 <system_interrupt_enable_global+0x18>)
   15872:	2201      	movs	r2, #1
   15874:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   15876:	f3bf 8f5f 	dmb	sy
   1587a:	b662      	cpsie	i
}
   1587c:	46c0      	nop			; (mov r8, r8)
   1587e:	46bd      	mov	sp, r7
   15880:	bd80      	pop	{r7, pc}
   15882:	46c0      	nop			; (mov r8, r8)
   15884:	2000000c 	.word	0x2000000c

00015888 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   15888:	b580      	push	{r7, lr}
   1588a:	b082      	sub	sp, #8
   1588c:	af00      	add	r7, sp, #0
   1588e:	0002      	movs	r2, r0
   15890:	1dfb      	adds	r3, r7, #7
   15892:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15894:	4b06      	ldr	r3, [pc, #24]	; (158b0 <system_interrupt_enable+0x28>)
   15896:	1dfa      	adds	r2, r7, #7
   15898:	7812      	ldrb	r2, [r2, #0]
   1589a:	0011      	movs	r1, r2
   1589c:	221f      	movs	r2, #31
   1589e:	400a      	ands	r2, r1
   158a0:	2101      	movs	r1, #1
   158a2:	4091      	lsls	r1, r2
   158a4:	000a      	movs	r2, r1
   158a6:	601a      	str	r2, [r3, #0]
}
   158a8:	46c0      	nop			; (mov r8, r8)
   158aa:	46bd      	mov	sp, r7
   158ac:	b002      	add	sp, #8
   158ae:	bd80      	pop	{r7, pc}
   158b0:	e000e100 	.word	0xe000e100

000158b4 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   158b4:	b580      	push	{r7, lr}
   158b6:	b084      	sub	sp, #16
   158b8:	af00      	add	r7, sp, #0
   158ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   158bc:	687b      	ldr	r3, [r7, #4]
   158be:	681b      	ldr	r3, [r3, #0]
   158c0:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   158c2:	68fb      	ldr	r3, [r7, #12]
   158c4:	69db      	ldr	r3, [r3, #28]
   158c6:	1e5a      	subs	r2, r3, #1
   158c8:	4193      	sbcs	r3, r2
   158ca:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   158cc:	0018      	movs	r0, r3
   158ce:	46bd      	mov	sp, r7
   158d0:	b004      	add	sp, #16
   158d2:	bd80      	pop	{r7, pc}

000158d4 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   158d4:	b580      	push	{r7, lr}
   158d6:	b082      	sub	sp, #8
   158d8:	af00      	add	r7, sp, #0
   158da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   158dc:	687b      	ldr	r3, [r7, #4]
   158de:	2201      	movs	r2, #1
   158e0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   158e2:	687b      	ldr	r3, [r7, #4]
   158e4:	2200      	movs	r2, #0
   158e6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   158e8:	687b      	ldr	r3, [r7, #4]
   158ea:	2200      	movs	r2, #0
   158ec:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   158ee:	687b      	ldr	r3, [r7, #4]
   158f0:	22c0      	movs	r2, #192	; 0xc0
   158f2:	0392      	lsls	r2, r2, #14
   158f4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   158f6:	687b      	ldr	r3, [r7, #4]
   158f8:	2200      	movs	r2, #0
   158fa:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   158fc:	687b      	ldr	r3, [r7, #4]
   158fe:	2200      	movs	r2, #0
   15900:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   15902:	687b      	ldr	r3, [r7, #4]
   15904:	2201      	movs	r2, #1
   15906:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   15908:	687b      	ldr	r3, [r7, #4]
   1590a:	2201      	movs	r2, #1
   1590c:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1590e:	687b      	ldr	r3, [r7, #4]
   15910:	2200      	movs	r2, #0
   15912:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   15914:	687b      	ldr	r3, [r7, #4]
   15916:	2224      	movs	r2, #36	; 0x24
   15918:	2100      	movs	r1, #0
   1591a:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1591c:	687b      	ldr	r3, [r7, #4]
   1591e:	3318      	adds	r3, #24
   15920:	220c      	movs	r2, #12
   15922:	2100      	movs	r1, #0
   15924:	0018      	movs	r0, r3
   15926:	4b0a      	ldr	r3, [pc, #40]	; (15950 <spi_get_config_defaults+0x7c>)
   15928:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1592a:	687b      	ldr	r3, [r7, #4]
   1592c:	4a09      	ldr	r2, [pc, #36]	; (15954 <spi_get_config_defaults+0x80>)
   1592e:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   15930:	687b      	ldr	r3, [r7, #4]
   15932:	2200      	movs	r2, #0
   15934:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   15936:	687b      	ldr	r3, [r7, #4]
   15938:	2200      	movs	r2, #0
   1593a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1593c:	687b      	ldr	r3, [r7, #4]
   1593e:	2200      	movs	r2, #0
   15940:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   15942:	687b      	ldr	r3, [r7, #4]
   15944:	2200      	movs	r2, #0
   15946:	635a      	str	r2, [r3, #52]	; 0x34

};
   15948:	46c0      	nop			; (mov r8, r8)
   1594a:	46bd      	mov	sp, r7
   1594c:	b002      	add	sp, #8
   1594e:	bd80      	pop	{r7, pc}
   15950:	000184d1 	.word	0x000184d1
   15954:	000186a0 	.word	0x000186a0

00015958 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   15958:	b580      	push	{r7, lr}
   1595a:	b084      	sub	sp, #16
   1595c:	af00      	add	r7, sp, #0
   1595e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   15960:	687b      	ldr	r3, [r7, #4]
   15962:	681b      	ldr	r3, [r3, #0]
   15964:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   15966:	687b      	ldr	r3, [r7, #4]
   15968:	681b      	ldr	r3, [r3, #0]
   1596a:	0018      	movs	r0, r3
   1596c:	4b0b      	ldr	r3, [pc, #44]	; (1599c <spi_enable+0x44>)
   1596e:	4798      	blx	r3
   15970:	0003      	movs	r3, r0
   15972:	0018      	movs	r0, r3
   15974:	4b0a      	ldr	r3, [pc, #40]	; (159a0 <spi_enable+0x48>)
   15976:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   15978:	46c0      	nop			; (mov r8, r8)
   1597a:	687b      	ldr	r3, [r7, #4]
   1597c:	0018      	movs	r0, r3
   1597e:	4b09      	ldr	r3, [pc, #36]	; (159a4 <spi_enable+0x4c>)
   15980:	4798      	blx	r3
   15982:	1e03      	subs	r3, r0, #0
   15984:	d1f9      	bne.n	1597a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   15986:	68fb      	ldr	r3, [r7, #12]
   15988:	681b      	ldr	r3, [r3, #0]
   1598a:	2202      	movs	r2, #2
   1598c:	431a      	orrs	r2, r3
   1598e:	68fb      	ldr	r3, [r7, #12]
   15990:	601a      	str	r2, [r3, #0]
}
   15992:	46c0      	nop			; (mov r8, r8)
   15994:	46bd      	mov	sp, r7
   15996:	b004      	add	sp, #16
   15998:	bd80      	pop	{r7, pc}
   1599a:	46c0      	nop			; (mov r8, r8)
   1599c:	000127f1 	.word	0x000127f1
   159a0:	00015889 	.word	0x00015889
   159a4:	000158b5 	.word	0x000158b5

000159a8 <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
   159a8:	b580      	push	{r7, lr}
   159aa:	b086      	sub	sp, #24
   159ac:	af00      	add	r7, sp, #0
   159ae:	60f8      	str	r0, [r7, #12]
   159b0:	60b9      	str	r1, [r7, #8]
   159b2:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
   159b4:	687b      	ldr	r3, [r7, #4]
   159b6:	781a      	ldrb	r2, [r3, #0]
   159b8:	68fb      	ldr	r3, [r7, #12]
   159ba:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
   159bc:	687b      	ldr	r3, [r7, #4]
   159be:	785a      	ldrb	r2, [r3, #1]
   159c0:	68fb      	ldr	r3, [r7, #12]
   159c2:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
   159c4:	68fb      	ldr	r3, [r7, #12]
   159c6:	68ba      	ldr	r2, [r7, #8]
   159c8:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
   159ca:	2314      	movs	r3, #20
   159cc:	18fb      	adds	r3, r7, r3
   159ce:	0018      	movs	r0, r3
   159d0:	4b0c      	ldr	r3, [pc, #48]	; (15a04 <at25dfx_chip_init+0x5c>)
   159d2:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
   159d4:	2314      	movs	r3, #20
   159d6:	18fb      	adds	r3, r7, r3
   159d8:	2201      	movs	r2, #1
   159da:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
   159dc:	68fb      	ldr	r3, [r7, #12]
   159de:	795b      	ldrb	r3, [r3, #5]
   159e0:	2214      	movs	r2, #20
   159e2:	18ba      	adds	r2, r7, r2
   159e4:	0011      	movs	r1, r2
   159e6:	0018      	movs	r0, r3
   159e8:	4b07      	ldr	r3, [pc, #28]	; (15a08 <at25dfx_chip_init+0x60>)
   159ea:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
   159ec:	68fb      	ldr	r3, [r7, #12]
   159ee:	795b      	ldrb	r3, [r3, #5]
   159f0:	2101      	movs	r1, #1
   159f2:	0018      	movs	r0, r3
   159f4:	4b05      	ldr	r3, [pc, #20]	; (15a0c <at25dfx_chip_init+0x64>)
   159f6:	4798      	blx	r3

	return STATUS_OK;
   159f8:	2300      	movs	r3, #0
}
   159fa:	0018      	movs	r0, r3
   159fc:	46bd      	mov	sp, r7
   159fe:	b006      	add	sp, #24
   15a00:	bd80      	pop	{r7, pc}
   15a02:	46c0      	nop			; (mov r8, r8)
   15a04:	00015761 	.word	0x00015761
   15a08:	00012145 	.word	0x00012145
   15a0c:	000157c9 	.word	0x000157c9

00015a10 <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
   15a10:	b580      	push	{r7, lr}
   15a12:	b082      	sub	sp, #8
   15a14:	af00      	add	r7, sp, #0
   15a16:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   15a18:	687b      	ldr	r3, [r7, #4]
   15a1a:	2200      	movs	r2, #0
   15a1c:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   15a1e:	687b      	ldr	r3, [r7, #4]
   15a20:	2201      	movs	r2, #1
   15a22:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   15a24:	4b08      	ldr	r3, [pc, #32]	; (15a48 <nvm_get_config_defaults+0x38>)
   15a26:	685b      	ldr	r3, [r3, #4]
   15a28:	06db      	lsls	r3, r3, #27
   15a2a:	0f1b      	lsrs	r3, r3, #28
   15a2c:	b2db      	uxtb	r3, r3
   15a2e:	001a      	movs	r2, r3
   15a30:	687b      	ldr	r3, [r7, #4]
   15a32:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   15a34:	687b      	ldr	r3, [r7, #4]
   15a36:	2200      	movs	r2, #0
   15a38:	70da      	strb	r2, [r3, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   15a3a:	687b      	ldr	r3, [r7, #4]
   15a3c:	2200      	movs	r2, #0
   15a3e:	711a      	strb	r2, [r3, #4]
}
   15a40:	46c0      	nop			; (mov r8, r8)
   15a42:	46bd      	mov	sp, r7
   15a44:	b002      	add	sp, #8
   15a46:	bd80      	pop	{r7, pc}
   15a48:	41004000 	.word	0x41004000

00015a4c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   15a4c:	b580      	push	{r7, lr}
   15a4e:	b084      	sub	sp, #16
   15a50:	af00      	add	r7, sp, #0
   15a52:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   15a54:	687b      	ldr	r3, [r7, #4]
   15a56:	681b      	ldr	r3, [r3, #0]
   15a58:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   15a5a:	68fb      	ldr	r3, [r7, #12]
   15a5c:	69db      	ldr	r3, [r3, #28]
   15a5e:	1e5a      	subs	r2, r3, #1
   15a60:	4193      	sbcs	r3, r2
   15a62:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   15a64:	0018      	movs	r0, r3
   15a66:	46bd      	mov	sp, r7
   15a68:	b004      	add	sp, #16
   15a6a:	bd80      	pop	{r7, pc}

00015a6c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   15a6c:	b580      	push	{r7, lr}
   15a6e:	b082      	sub	sp, #8
   15a70:	af00      	add	r7, sp, #0
   15a72:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   15a74:	46c0      	nop			; (mov r8, r8)
   15a76:	687b      	ldr	r3, [r7, #4]
   15a78:	0018      	movs	r0, r3
   15a7a:	4b04      	ldr	r3, [pc, #16]	; (15a8c <_usart_wait_for_sync+0x20>)
   15a7c:	4798      	blx	r3
   15a7e:	1e03      	subs	r3, r0, #0
   15a80:	d1f9      	bne.n	15a76 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   15a82:	46c0      	nop			; (mov r8, r8)
   15a84:	46bd      	mov	sp, r7
   15a86:	b002      	add	sp, #8
   15a88:	bd80      	pop	{r7, pc}
   15a8a:	46c0      	nop			; (mov r8, r8)
   15a8c:	00015a4d 	.word	0x00015a4d

00015a90 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   15a90:	b580      	push	{r7, lr}
   15a92:	b082      	sub	sp, #8
   15a94:	af00      	add	r7, sp, #0
   15a96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   15a98:	687b      	ldr	r3, [r7, #4]
   15a9a:	2280      	movs	r2, #128	; 0x80
   15a9c:	05d2      	lsls	r2, r2, #23
   15a9e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   15aa0:	687b      	ldr	r3, [r7, #4]
   15aa2:	2200      	movs	r2, #0
   15aa4:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   15aa6:	687b      	ldr	r3, [r7, #4]
   15aa8:	22ff      	movs	r2, #255	; 0xff
   15aaa:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   15aac:	687b      	ldr	r3, [r7, #4]
   15aae:	2200      	movs	r2, #0
   15ab0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   15ab2:	687b      	ldr	r3, [r7, #4]
   15ab4:	2200      	movs	r2, #0
   15ab6:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   15ab8:	687b      	ldr	r3, [r7, #4]
   15aba:	2296      	movs	r2, #150	; 0x96
   15abc:	0192      	lsls	r2, r2, #6
   15abe:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   15ac0:	687b      	ldr	r3, [r7, #4]
   15ac2:	2224      	movs	r2, #36	; 0x24
   15ac4:	2101      	movs	r1, #1
   15ac6:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   15ac8:	687b      	ldr	r3, [r7, #4]
   15aca:	2225      	movs	r2, #37	; 0x25
   15acc:	2101      	movs	r1, #1
   15ace:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   15ad0:	687b      	ldr	r3, [r7, #4]
   15ad2:	2226      	movs	r2, #38	; 0x26
   15ad4:	2100      	movs	r1, #0
   15ad6:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   15ad8:	687b      	ldr	r3, [r7, #4]
   15ada:	2227      	movs	r2, #39	; 0x27
   15adc:	2100      	movs	r1, #0
   15ade:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   15ae0:	687b      	ldr	r3, [r7, #4]
   15ae2:	2200      	movs	r2, #0
   15ae4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   15ae6:	687b      	ldr	r3, [r7, #4]
   15ae8:	2288      	movs	r2, #136	; 0x88
   15aea:	0352      	lsls	r2, r2, #13
   15aec:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   15aee:	687b      	ldr	r3, [r7, #4]
   15af0:	222c      	movs	r2, #44	; 0x2c
   15af2:	2100      	movs	r1, #0
   15af4:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   15af6:	687b      	ldr	r3, [r7, #4]
   15af8:	222d      	movs	r2, #45	; 0x2d
   15afa:	2100      	movs	r1, #0
   15afc:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   15afe:	687b      	ldr	r3, [r7, #4]
   15b00:	2200      	movs	r2, #0
   15b02:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   15b04:	687b      	ldr	r3, [r7, #4]
   15b06:	2200      	movs	r2, #0
   15b08:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   15b0a:	687b      	ldr	r3, [r7, #4]
   15b0c:	2200      	movs	r2, #0
   15b0e:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   15b10:	687b      	ldr	r3, [r7, #4]
   15b12:	2200      	movs	r2, #0
   15b14:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   15b16:	687b      	ldr	r3, [r7, #4]
   15b18:	2200      	movs	r2, #0
   15b1a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   15b1c:	687b      	ldr	r3, [r7, #4]
   15b1e:	2200      	movs	r2, #0
   15b20:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   15b22:	687b      	ldr	r3, [r7, #4]
   15b24:	2200      	movs	r2, #0
   15b26:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   15b28:	687b      	ldr	r3, [r7, #4]
   15b2a:	2200      	movs	r2, #0
   15b2c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   15b2e:	687b      	ldr	r3, [r7, #4]
   15b30:	2200      	movs	r2, #0
   15b32:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   15b34:	687b      	ldr	r3, [r7, #4]
   15b36:	2200      	movs	r2, #0
   15b38:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   15b3a:	687b      	ldr	r3, [r7, #4]
   15b3c:	2213      	movs	r2, #19
   15b3e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   15b40:	687b      	ldr	r3, [r7, #4]
   15b42:	2200      	movs	r2, #0
   15b44:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   15b46:	46c0      	nop			; (mov r8, r8)
   15b48:	46bd      	mov	sp, r7
   15b4a:	b002      	add	sp, #8
   15b4c:	bd80      	pop	{r7, pc}
   15b4e:	46c0      	nop			; (mov r8, r8)

00015b50 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   15b50:	b580      	push	{r7, lr}
   15b52:	b084      	sub	sp, #16
   15b54:	af00      	add	r7, sp, #0
   15b56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   15b58:	687b      	ldr	r3, [r7, #4]
   15b5a:	681b      	ldr	r3, [r3, #0]
   15b5c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   15b5e:	687b      	ldr	r3, [r7, #4]
   15b60:	681b      	ldr	r3, [r3, #0]
   15b62:	0018      	movs	r0, r3
   15b64:	4b09      	ldr	r3, [pc, #36]	; (15b8c <usart_enable+0x3c>)
   15b66:	4798      	blx	r3
   15b68:	0003      	movs	r3, r0
   15b6a:	0018      	movs	r0, r3
   15b6c:	4b08      	ldr	r3, [pc, #32]	; (15b90 <usart_enable+0x40>)
   15b6e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   15b70:	687b      	ldr	r3, [r7, #4]
   15b72:	0018      	movs	r0, r3
   15b74:	4b07      	ldr	r3, [pc, #28]	; (15b94 <usart_enable+0x44>)
   15b76:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   15b78:	68fb      	ldr	r3, [r7, #12]
   15b7a:	681b      	ldr	r3, [r3, #0]
   15b7c:	2202      	movs	r2, #2
   15b7e:	431a      	orrs	r2, r3
   15b80:	68fb      	ldr	r3, [r7, #12]
   15b82:	601a      	str	r2, [r3, #0]
}
   15b84:	46c0      	nop			; (mov r8, r8)
   15b86:	46bd      	mov	sp, r7
   15b88:	b004      	add	sp, #16
   15b8a:	bd80      	pop	{r7, pc}
   15b8c:	000127f1 	.word	0x000127f1
   15b90:	00015889 	.word	0x00015889
   15b94:	00015a6d 	.word	0x00015a6d

00015b98 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   15b98:	b580      	push	{r7, lr}
   15b9a:	b082      	sub	sp, #8
   15b9c:	af00      	add	r7, sp, #0
   15b9e:	6078      	str	r0, [r7, #4]
   15ba0:	000a      	movs	r2, r1
   15ba2:	1cfb      	adds	r3, r7, #3
   15ba4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   15ba6:	687b      	ldr	r3, [r7, #4]
   15ba8:	2231      	movs	r2, #49	; 0x31
   15baa:	5c9b      	ldrb	r3, [r3, r2]
   15bac:	b25a      	sxtb	r2, r3
   15bae:	1cfb      	adds	r3, r7, #3
   15bb0:	781b      	ldrb	r3, [r3, #0]
   15bb2:	2101      	movs	r1, #1
   15bb4:	4099      	lsls	r1, r3
   15bb6:	000b      	movs	r3, r1
   15bb8:	b25b      	sxtb	r3, r3
   15bba:	4313      	orrs	r3, r2
   15bbc:	b25b      	sxtb	r3, r3
   15bbe:	b2d9      	uxtb	r1, r3
   15bc0:	687b      	ldr	r3, [r7, #4]
   15bc2:	2231      	movs	r2, #49	; 0x31
   15bc4:	5499      	strb	r1, [r3, r2]

}
   15bc6:	46c0      	nop			; (mov r8, r8)
   15bc8:	46bd      	mov	sp, r7
   15bca:	b002      	add	sp, #8
   15bcc:	bd80      	pop	{r7, pc}
   15bce:	46c0      	nop			; (mov r8, r8)

00015bd0 <usart_disable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_disable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   15bd0:	b580      	push	{r7, lr}
   15bd2:	b082      	sub	sp, #8
   15bd4:	af00      	add	r7, sp, #0
   15bd6:	6078      	str	r0, [r7, #4]
   15bd8:	000a      	movs	r2, r1
   15bda:	1cfb      	adds	r3, r7, #3
   15bdc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
   15bde:	687b      	ldr	r3, [r7, #4]
   15be0:	2231      	movs	r2, #49	; 0x31
   15be2:	5c9b      	ldrb	r3, [r3, r2]
   15be4:	b25b      	sxtb	r3, r3
   15be6:	1cfa      	adds	r2, r7, #3
   15be8:	7812      	ldrb	r2, [r2, #0]
   15bea:	2101      	movs	r1, #1
   15bec:	4091      	lsls	r1, r2
   15bee:	000a      	movs	r2, r1
   15bf0:	b252      	sxtb	r2, r2
   15bf2:	43d2      	mvns	r2, r2
   15bf4:	b252      	sxtb	r2, r2
   15bf6:	4013      	ands	r3, r2
   15bf8:	b25b      	sxtb	r3, r3
   15bfa:	b2d9      	uxtb	r1, r3
   15bfc:	687b      	ldr	r3, [r7, #4]
   15bfe:	2231      	movs	r2, #49	; 0x31
   15c00:	5499      	strb	r1, [r3, r2]
}
   15c02:	46c0      	nop			; (mov r8, r8)
   15c04:	46bd      	mov	sp, r7
   15c06:	b002      	add	sp, #8
   15c08:	bd80      	pop	{r7, pc}
   15c0a:	46c0      	nop			; (mov r8, r8)

00015c0c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
   15c0c:	b580      	push	{r7, lr}
   15c0e:	b084      	sub	sp, #16
   15c10:	af00      	add	r7, sp, #0
   15c12:	60f8      	str	r0, [r7, #12]
   15c14:	60b9      	str	r1, [r7, #8]
   15c16:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
   15c18:	687a      	ldr	r2, [r7, #4]
   15c1a:	68b9      	ldr	r1, [r7, #8]
   15c1c:	68fb      	ldr	r3, [r7, #12]
   15c1e:	0018      	movs	r0, r3
   15c20:	4b05      	ldr	r3, [pc, #20]	; (15c38 <usart_serial_init+0x2c>)
   15c22:	4798      	blx	r3
   15c24:	1e03      	subs	r3, r0, #0
   15c26:	d101      	bne.n	15c2c <usart_serial_init+0x20>
		return true;
   15c28:	2301      	movs	r3, #1
   15c2a:	e000      	b.n	15c2e <usart_serial_init+0x22>
	}
	else {
		return false;
   15c2c:	2300      	movs	r3, #0
	}
}
   15c2e:	0018      	movs	r0, r3
   15c30:	46bd      	mov	sp, r7
   15c32:	b004      	add	sp, #16
   15c34:	bd80      	pop	{r7, pc}
   15c36:	46c0      	nop			; (mov r8, r8)
   15c38:	00013dc9 	.word	0x00013dc9

00015c3c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
   15c3c:	b580      	push	{r7, lr}
   15c3e:	b082      	sub	sp, #8
   15c40:	af00      	add	r7, sp, #0
   15c42:	6078      	str	r0, [r7, #4]
   15c44:	000a      	movs	r2, r1
   15c46:	1cfb      	adds	r3, r7, #3
   15c48:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
   15c4a:	46c0      	nop			; (mov r8, r8)
   15c4c:	1cfb      	adds	r3, r7, #3
   15c4e:	781b      	ldrb	r3, [r3, #0]
   15c50:	b29a      	uxth	r2, r3
   15c52:	687b      	ldr	r3, [r7, #4]
   15c54:	0011      	movs	r1, r2
   15c56:	0018      	movs	r0, r3
   15c58:	4b04      	ldr	r3, [pc, #16]	; (15c6c <usart_serial_putchar+0x30>)
   15c5a:	4798      	blx	r3
   15c5c:	1e03      	subs	r3, r0, #0
   15c5e:	d1f5      	bne.n	15c4c <usart_serial_putchar+0x10>

	return STATUS_OK;
   15c60:	2300      	movs	r3, #0
}
   15c62:	0018      	movs	r0, r3
   15c64:	46bd      	mov	sp, r7
   15c66:	b002      	add	sp, #8
   15c68:	bd80      	pop	{r7, pc}
   15c6a:	46c0      	nop			; (mov r8, r8)
   15c6c:	0001403d 	.word	0x0001403d

00015c70 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   15c70:	b580      	push	{r7, lr}
   15c72:	b084      	sub	sp, #16
   15c74:	af00      	add	r7, sp, #0
   15c76:	6078      	str	r0, [r7, #4]
   15c78:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
   15c7a:	230e      	movs	r3, #14
   15c7c:	18fb      	adds	r3, r7, r3
   15c7e:	2200      	movs	r2, #0
   15c80:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
   15c82:	46c0      	nop			; (mov r8, r8)
   15c84:	230e      	movs	r3, #14
   15c86:	18fa      	adds	r2, r7, r3
   15c88:	687b      	ldr	r3, [r7, #4]
   15c8a:	0011      	movs	r1, r2
   15c8c:	0018      	movs	r0, r3
   15c8e:	4b07      	ldr	r3, [pc, #28]	; (15cac <usart_serial_getchar+0x3c>)
   15c90:	4798      	blx	r3
   15c92:	1e03      	subs	r3, r0, #0
   15c94:	d1f6      	bne.n	15c84 <usart_serial_getchar+0x14>

	*c = temp;
   15c96:	230e      	movs	r3, #14
   15c98:	18fb      	adds	r3, r7, r3
   15c9a:	881b      	ldrh	r3, [r3, #0]
   15c9c:	b2da      	uxtb	r2, r3
   15c9e:	683b      	ldr	r3, [r7, #0]
   15ca0:	701a      	strb	r2, [r3, #0]
}
   15ca2:	46c0      	nop			; (mov r8, r8)
   15ca4:	46bd      	mov	sp, r7
   15ca6:	b004      	add	sp, #16
   15ca8:	bd80      	pop	{r7, pc}
   15caa:	46c0      	nop			; (mov r8, r8)
   15cac:	000140a1 	.word	0x000140a1

00015cb0 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
   15cb0:	b580      	push	{r7, lr}
   15cb2:	b084      	sub	sp, #16
   15cb4:	af00      	add	r7, sp, #0
   15cb6:	60f8      	str	r0, [r7, #12]
   15cb8:	60b9      	str	r1, [r7, #8]
   15cba:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
   15cbc:	4b10      	ldr	r3, [pc, #64]	; (15d00 <stdio_serial_init+0x50>)
   15cbe:	68fa      	ldr	r2, [r7, #12]
   15cc0:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   15cc2:	4b10      	ldr	r3, [pc, #64]	; (15d04 <stdio_serial_init+0x54>)
   15cc4:	4a10      	ldr	r2, [pc, #64]	; (15d08 <stdio_serial_init+0x58>)
   15cc6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   15cc8:	4b10      	ldr	r3, [pc, #64]	; (15d0c <stdio_serial_init+0x5c>)
   15cca:	4a11      	ldr	r2, [pc, #68]	; (15d10 <stdio_serial_init+0x60>)
   15ccc:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
   15cce:	687a      	ldr	r2, [r7, #4]
   15cd0:	68b9      	ldr	r1, [r7, #8]
   15cd2:	68fb      	ldr	r3, [r7, #12]
   15cd4:	0018      	movs	r0, r3
   15cd6:	4b0f      	ldr	r3, [pc, #60]	; (15d14 <stdio_serial_init+0x64>)
   15cd8:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   15cda:	4b0f      	ldr	r3, [pc, #60]	; (15d18 <stdio_serial_init+0x68>)
   15cdc:	681b      	ldr	r3, [r3, #0]
   15cde:	689b      	ldr	r3, [r3, #8]
   15ce0:	2100      	movs	r1, #0
   15ce2:	0018      	movs	r0, r3
   15ce4:	4b0d      	ldr	r3, [pc, #52]	; (15d1c <stdio_serial_init+0x6c>)
   15ce6:	4798      	blx	r3
	setbuf(stdin, NULL);
   15ce8:	4b0b      	ldr	r3, [pc, #44]	; (15d18 <stdio_serial_init+0x68>)
   15cea:	681b      	ldr	r3, [r3, #0]
   15cec:	685b      	ldr	r3, [r3, #4]
   15cee:	2100      	movs	r1, #0
   15cf0:	0018      	movs	r0, r3
   15cf2:	4b0a      	ldr	r3, [pc, #40]	; (15d1c <stdio_serial_init+0x6c>)
   15cf4:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
   15cf6:	46c0      	nop			; (mov r8, r8)
   15cf8:	46bd      	mov	sp, r7
   15cfa:	b004      	add	sp, #16
   15cfc:	bd80      	pop	{r7, pc}
   15cfe:	46c0      	nop			; (mov r8, r8)
   15d00:	20000480 	.word	0x20000480
   15d04:	2000047c 	.word	0x2000047c
   15d08:	00015c3d 	.word	0x00015c3d
   15d0c:	20000478 	.word	0x20000478
   15d10:	00015c71 	.word	0x00015c71
   15d14:	00015c0d 	.word	0x00015c0d
   15d18:	2000008c 	.word	0x2000008c
   15d1c:	00018771 	.word	0x00018771

00015d20 <uart_callback>:
 * \brief Callback of USART input.
 *
 * \param[in] module USART module structure.
 */
static void uart_callback(const struct usart_module *const module)
{
   15d20:	b580      	push	{r7, lr}
   15d22:	b082      	sub	sp, #8
   15d24:	af00      	add	r7, sp, #0
   15d26:	6078      	str	r0, [r7, #4]
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
   15d28:	4b08      	ldr	r3, [pc, #32]	; (15d4c <uart_callback+0x2c>)
   15d2a:	681b      	ldr	r3, [r3, #0]
   15d2c:	2b3f      	cmp	r3, #63	; 0x3f
   15d2e:	dc09      	bgt.n	15d44 <uart_callback+0x24>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
   15d30:	4b06      	ldr	r3, [pc, #24]	; (15d4c <uart_callback+0x2c>)
   15d32:	681b      	ldr	r3, [r3, #0]
   15d34:	1c59      	adds	r1, r3, #1
   15d36:	4a05      	ldr	r2, [pc, #20]	; (15d4c <uart_callback+0x2c>)
   15d38:	6011      	str	r1, [r2, #0]
   15d3a:	4a05      	ldr	r2, [pc, #20]	; (15d50 <uart_callback+0x30>)
   15d3c:	8812      	ldrh	r2, [r2, #0]
   15d3e:	b2d1      	uxtb	r1, r2
   15d40:	4a04      	ldr	r2, [pc, #16]	; (15d54 <uart_callback+0x34>)
   15d42:	54d1      	strb	r1, [r2, r3]
	}
}
   15d44:	46c0      	nop			; (mov r8, r8)
   15d46:	46bd      	mov	sp, r7
   15d48:	b002      	add	sp, #8
   15d4a:	bd80      	pop	{r7, pc}
   15d4c:	200002b4 	.word	0x200002b4
   15d50:	200002b8 	.word	0x200002b8
   15d54:	20000274 	.word	0x20000274

00015d58 <wifi_callback>:

static void wifi_callback(uint8 msg_type, void *msg_data)
{
   15d58:	b590      	push	{r4, r7, lr}
   15d5a:	b087      	sub	sp, #28
   15d5c:	af02      	add	r7, sp, #8
   15d5e:	0002      	movs	r2, r0
   15d60:	6039      	str	r1, [r7, #0]
   15d62:	1dfb      	adds	r3, r7, #7
   15d64:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiStateChanged *msg_wifi_state;
	uint8 *msg_ip_addr;

	switch (msg_type) {
   15d66:	1dfb      	adds	r3, r7, #7
   15d68:	781b      	ldrb	r3, [r3, #0]
   15d6a:	2b2c      	cmp	r3, #44	; 0x2c
   15d6c:	d002      	beq.n	15d74 <wifi_callback+0x1c>
   15d6e:	2b32      	cmp	r3, #50	; 0x32
   15d70:	d024      	beq.n	15dbc <wifi_callback+0x64>
		/* Try to connect to MQTT broker when Wi-Fi was connected. */
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
		break;

	default:
		break;
   15d72:	e040      	b.n	15df6 <wifi_callback+0x9e>
	tstrM2mWifiStateChanged *msg_wifi_state;
	uint8 *msg_ip_addr;

	switch (msg_type) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
		msg_wifi_state = (tstrM2mWifiStateChanged *)msg_data;
   15d74:	683b      	ldr	r3, [r7, #0]
   15d76:	60fb      	str	r3, [r7, #12]
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
   15d78:	68fb      	ldr	r3, [r7, #12]
   15d7a:	781b      	ldrb	r3, [r3, #0]
   15d7c:	2b01      	cmp	r3, #1
   15d7e:	d106      	bne.n	15d8e <wifi_callback+0x36>
			/* If Wi-Fi is connected. */
			printf("Wi-Fi connected\r\n");
   15d80:	4b1f      	ldr	r3, [pc, #124]	; (15e00 <wifi_callback+0xa8>)
   15d82:	0018      	movs	r0, r3
   15d84:	4b1f      	ldr	r3, [pc, #124]	; (15e04 <wifi_callback+0xac>)
   15d86:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   15d88:	4b1f      	ldr	r3, [pc, #124]	; (15e08 <wifi_callback+0xb0>)
   15d8a:	4798      	blx	r3
			/* Disconnect from MQTT broker. */
			/* Force close the MQTT connection, because cannot send a disconnect message to the broker when network is broken. */
			mqtt_disconnect(&mqtt_inst, 1);
		}

		break;
   15d8c:	e032      	b.n	15df4 <wifi_callback+0x9c>
		msg_wifi_state = (tstrM2mWifiStateChanged *)msg_data;
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
			/* If Wi-Fi is connected. */
			printf("Wi-Fi connected\r\n");
			m2m_wifi_request_dhcp_client();
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
   15d8e:	68fb      	ldr	r3, [r7, #12]
   15d90:	781b      	ldrb	r3, [r3, #0]
   15d92:	2b00      	cmp	r3, #0
   15d94:	d12e      	bne.n	15df4 <wifi_callback+0x9c>
			/* If Wi-Fi is disconnected. */
			printf("Wi-Fi disconnected\r\n");
   15d96:	4b1d      	ldr	r3, [pc, #116]	; (15e0c <wifi_callback+0xb4>)
   15d98:	0018      	movs	r0, r3
   15d9a:	4b1a      	ldr	r3, [pc, #104]	; (15e04 <wifi_callback+0xac>)
   15d9c:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   15d9e:	4a1c      	ldr	r2, [pc, #112]	; (15e10 <wifi_callback+0xb8>)
   15da0:	481c      	ldr	r0, [pc, #112]	; (15e14 <wifi_callback+0xbc>)
   15da2:	23ff      	movs	r3, #255	; 0xff
   15da4:	9300      	str	r3, [sp, #0]
   15da6:	0013      	movs	r3, r2
   15da8:	2202      	movs	r2, #2
   15daa:	2116      	movs	r1, #22
   15dac:	4c1a      	ldr	r4, [pc, #104]	; (15e18 <wifi_callback+0xc0>)
   15dae:	47a0      	blx	r4
					MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			/* Disconnect from MQTT broker. */
			/* Force close the MQTT connection, because cannot send a disconnect message to the broker when network is broken. */
			mqtt_disconnect(&mqtt_inst, 1);
   15db0:	4b1a      	ldr	r3, [pc, #104]	; (15e1c <wifi_callback+0xc4>)
   15db2:	2101      	movs	r1, #1
   15db4:	0018      	movs	r0, r3
   15db6:	4b1a      	ldr	r3, [pc, #104]	; (15e20 <wifi_callback+0xc8>)
   15db8:	4798      	blx	r3
		}

		break;
   15dba:	e01b      	b.n	15df4 <wifi_callback+0x9c>

	case M2M_WIFI_REQ_DHCP_CONF:
		msg_ip_addr = (uint8 *)msg_data;
   15dbc:	683b      	ldr	r3, [r7, #0]
   15dbe:	60bb      	str	r3, [r7, #8]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
   15dc0:	68bb      	ldr	r3, [r7, #8]
   15dc2:	781b      	ldrb	r3, [r3, #0]

		break;

	case M2M_WIFI_REQ_DHCP_CONF:
		msg_ip_addr = (uint8 *)msg_data;
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
   15dc4:	0019      	movs	r1, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
   15dc6:	68bb      	ldr	r3, [r7, #8]
   15dc8:	3301      	adds	r3, #1
   15dca:	781b      	ldrb	r3, [r3, #0]

		break;

	case M2M_WIFI_REQ_DHCP_CONF:
		msg_ip_addr = (uint8 *)msg_data;
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
   15dcc:	001a      	movs	r2, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
   15dce:	68bb      	ldr	r3, [r7, #8]
   15dd0:	3302      	adds	r3, #2
   15dd2:	781b      	ldrb	r3, [r3, #0]

		break;

	case M2M_WIFI_REQ_DHCP_CONF:
		msg_ip_addr = (uint8 *)msg_data;
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
   15dd4:	001c      	movs	r4, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
   15dd6:	68bb      	ldr	r3, [r7, #8]
   15dd8:	3303      	adds	r3, #3
   15dda:	781b      	ldrb	r3, [r3, #0]

		break;

	case M2M_WIFI_REQ_DHCP_CONF:
		msg_ip_addr = (uint8 *)msg_data;
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
   15ddc:	4811      	ldr	r0, [pc, #68]	; (15e24 <wifi_callback+0xcc>)
   15dde:	9300      	str	r3, [sp, #0]
   15de0:	0023      	movs	r3, r4
   15de2:	4c11      	ldr	r4, [pc, #68]	; (15e28 <wifi_callback+0xd0>)
   15de4:	47a0      	blx	r4
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
		/* Try to connect to MQTT broker when Wi-Fi was connected. */
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
   15de6:	4a11      	ldr	r2, [pc, #68]	; (15e2c <wifi_callback+0xd4>)
   15de8:	4b0c      	ldr	r3, [pc, #48]	; (15e1c <wifi_callback+0xc4>)
   15dea:	0011      	movs	r1, r2
   15dec:	0018      	movs	r0, r3
   15dee:	4b10      	ldr	r3, [pc, #64]	; (15e30 <wifi_callback+0xd8>)
   15df0:	4798      	blx	r3
		break;
   15df2:	e000      	b.n	15df6 <wifi_callback+0x9e>
			/* Disconnect from MQTT broker. */
			/* Force close the MQTT connection, because cannot send a disconnect message to the broker when network is broken. */
			mqtt_disconnect(&mqtt_inst, 1);
		}

		break;
   15df4:	46c0      	nop			; (mov r8, r8)
		break;

	default:
		break;
	}
}
   15df6:	46c0      	nop			; (mov r8, r8)
   15df8:	46bd      	mov	sp, r7
   15dfa:	b005      	add	sp, #20
   15dfc:	bd90      	pop	{r4, r7, pc}
   15dfe:	46c0      	nop			; (mov r8, r8)
   15e00:	0001b01c 	.word	0x0001b01c
   15e04:	00018739 	.word	0x00018739
   15e08:	0000a49d 	.word	0x0000a49d
   15e0c:	0001b030 	.word	0x0001b030
   15e10:	0001b044 	.word	0x0001b044
   15e14:	0001b050 	.word	0x0001b050
   15e18:	00009fd5 	.word	0x00009fd5
   15e1c:	20000180 	.word	0x20000180
   15e20:	00017c7d 	.word	0x00017c7d
   15e24:	0001b068 	.word	0x0001b068
   15e28:	00018619 	.word	0x00018619
   15e2c:	0001b008 	.word	0x0001b008
   15e30:	00017471 	.word	0x00017471

00015e34 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   15e34:	b580      	push	{r7, lr}
   15e36:	b082      	sub	sp, #8
   15e38:	af00      	add	r7, sp, #0
   15e3a:	603a      	str	r2, [r7, #0]
   15e3c:	1dfb      	adds	r3, r7, #7
   15e3e:	1c02      	adds	r2, r0, #0
   15e40:	701a      	strb	r2, [r3, #0]
   15e42:	1dbb      	adds	r3, r7, #6
   15e44:	1c0a      	adds	r2, r1, #0
   15e46:	701a      	strb	r2, [r3, #0]
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   15e48:	683a      	ldr	r2, [r7, #0]
   15e4a:	1dbb      	adds	r3, r7, #6
   15e4c:	7819      	ldrb	r1, [r3, #0]
   15e4e:	1dfb      	adds	r3, r7, #7
   15e50:	781b      	ldrb	r3, [r3, #0]
   15e52:	b25b      	sxtb	r3, r3
   15e54:	0018      	movs	r0, r3
   15e56:	4b03      	ldr	r3, [pc, #12]	; (15e64 <socket_event_handler+0x30>)
   15e58:	4798      	blx	r3
}
   15e5a:	46c0      	nop			; (mov r8, r8)
   15e5c:	46bd      	mov	sp, r7
   15e5e:	b002      	add	sp, #8
   15e60:	bd80      	pop	{r7, pc}
   15e62:	46c0      	nop			; (mov r8, r8)
   15e64:	00017fbd 	.word	0x00017fbd

00015e68 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   15e68:	b580      	push	{r7, lr}
   15e6a:	b082      	sub	sp, #8
   15e6c:	af00      	add	r7, sp, #0
   15e6e:	6078      	str	r0, [r7, #4]
   15e70:	6039      	str	r1, [r7, #0]
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   15e72:	683a      	ldr	r2, [r7, #0]
   15e74:	687b      	ldr	r3, [r7, #4]
   15e76:	0011      	movs	r1, r2
   15e78:	0018      	movs	r0, r3
   15e7a:	4b03      	ldr	r3, [pc, #12]	; (15e88 <socket_resolve_handler+0x20>)
   15e7c:	4798      	blx	r3
}
   15e7e:	46c0      	nop			; (mov r8, r8)
   15e80:	46bd      	mov	sp, r7
   15e82:	b002      	add	sp, #8
   15e84:	bd80      	pop	{r7, pc}
   15e86:	46c0      	nop			; (mov r8, r8)
   15e88:	0001741d 	.word	0x0001741d

00015e8c <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   15e8c:	b590      	push	{r4, r7, lr}
   15e8e:	b08f      	sub	sp, #60	; 0x3c
   15e90:	af06      	add	r7, sp, #24
   15e92:	60f8      	str	r0, [r7, #12]
   15e94:	60b9      	str	r1, [r7, #8]
   15e96:	607a      	str	r2, [r7, #4]
	switch (type) {
   15e98:	68bb      	ldr	r3, [r7, #8]
   15e9a:	2b01      	cmp	r3, #1
   15e9c:	d031      	beq.n	15f02 <mqtt_callback+0x76>
   15e9e:	dc02      	bgt.n	15ea6 <mqtt_callback+0x1a>
   15ea0:	2b00      	cmp	r3, #0
   15ea2:	d006      	beq.n	15eb2 <mqtt_callback+0x26>
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
		usart_disable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
   15ea4:	e0ef      	b.n	16086 <mqtt_callback+0x1fa>
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
	switch (type) {
   15ea6:	2b05      	cmp	r3, #5
   15ea8:	d100      	bne.n	15eac <mqtt_callback+0x20>
   15eaa:	e0e1      	b.n	16070 <mqtt_callback+0x1e4>
   15eac:	2b06      	cmp	r3, #6
   15eae:	d05f      	beq.n	15f70 <mqtt_callback+0xe4>
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
		usart_disable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
   15eb0:	e0e9      	b.n	16086 <mqtt_callback+0x1fa>
	{
		/*
		 * If connecting to broker server is complete successfully, Start sending CONNECT message of MQTT.
		 * Or else retry to connect to broker server.
		 */
		if (data->sock_connected.result >= 0) {
   15eb2:	687b      	ldr	r3, [r7, #4]
   15eb4:	681b      	ldr	r3, [r3, #0]
   15eb6:	2b00      	cmp	r3, #0
   15eb8:	db16      	blt.n	15ee8 <mqtt_callback+0x5c>
			//mqtt_connect_broker(module_inst, 1, NULL, NULL, mqtt_user, NULL, NULL, 0, 0, 0);
      status = mqtt_connect_broker(module_inst, 1, mqtt_user, mqtt_pass, mqtt_user, NULL, NULL, 0, 0, 0);
   15eba:	4975      	ldr	r1, [pc, #468]	; (16090 <mqtt_callback+0x204>)
   15ebc:	4a75      	ldr	r2, [pc, #468]	; (16094 <mqtt_callback+0x208>)
   15ebe:	68f8      	ldr	r0, [r7, #12]
   15ec0:	2300      	movs	r3, #0
   15ec2:	9305      	str	r3, [sp, #20]
   15ec4:	2300      	movs	r3, #0
   15ec6:	9304      	str	r3, [sp, #16]
   15ec8:	2300      	movs	r3, #0
   15eca:	9303      	str	r3, [sp, #12]
   15ecc:	2300      	movs	r3, #0
   15ece:	9302      	str	r3, [sp, #8]
   15ed0:	2300      	movs	r3, #0
   15ed2:	9301      	str	r3, [sp, #4]
   15ed4:	4b6f      	ldr	r3, [pc, #444]	; (16094 <mqtt_callback+0x208>)
   15ed6:	9300      	str	r3, [sp, #0]
   15ed8:	000b      	movs	r3, r1
   15eda:	2101      	movs	r1, #1
   15edc:	4c6e      	ldr	r4, [pc, #440]	; (16098 <mqtt_callback+0x20c>)
   15ede:	47a0      	blx	r4
   15ee0:	0002      	movs	r2, r0
   15ee2:	4b6e      	ldr	r3, [pc, #440]	; (1609c <mqtt_callback+0x210>)
   15ee4:	601a      	str	r2, [r3, #0]
		} else {
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
		}
	}
	break;
   15ee6:	e0ce      	b.n	16086 <mqtt_callback+0x1fa>
		 */
		if (data->sock_connected.result >= 0) {
			//mqtt_connect_broker(module_inst, 1, NULL, NULL, mqtt_user, NULL, NULL, 0, 0, 0);
      status = mqtt_connect_broker(module_inst, 1, mqtt_user, mqtt_pass, mqtt_user, NULL, NULL, 0, 0, 0);
		} else {
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   15ee8:	4a6d      	ldr	r2, [pc, #436]	; (160a0 <mqtt_callback+0x214>)
   15eea:	4b6e      	ldr	r3, [pc, #440]	; (160a4 <mqtt_callback+0x218>)
   15eec:	0011      	movs	r1, r2
   15eee:	0018      	movs	r0, r3
   15ef0:	4b6d      	ldr	r3, [pc, #436]	; (160a8 <mqtt_callback+0x21c>)
   15ef2:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   15ef4:	4a6a      	ldr	r2, [pc, #424]	; (160a0 <mqtt_callback+0x214>)
   15ef6:	68fb      	ldr	r3, [r7, #12]
   15ef8:	0011      	movs	r1, r2
   15efa:	0018      	movs	r0, r3
   15efc:	4b6b      	ldr	r3, [pc, #428]	; (160ac <mqtt_callback+0x220>)
   15efe:	4798      	blx	r3
		}
	}
	break;
   15f00:	e0c1      	b.n	16086 <mqtt_callback+0x1fa>

	case MQTT_CALLBACK_CONNECTED:
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   15f02:	687b      	ldr	r3, [r7, #4]
   15f04:	781b      	ldrb	r3, [r3, #0]
   15f06:	2b00      	cmp	r3, #0
   15f08:	d129      	bne.n	15f5e <mqtt_callback+0xd2>
			/* Subscribe chat topic. */
      delay_ms(1000);
   15f0a:	23fa      	movs	r3, #250	; 0xfa
   15f0c:	009b      	lsls	r3, r3, #2
   15f0e:	0018      	movs	r0, r3
   15f10:	4b67      	ldr	r3, [pc, #412]	; (160b0 <mqtt_callback+0x224>)
   15f12:	4798      	blx	r3
			status = mqtt_subscribe(module_inst, MAIN_CHAT_TOPIC, 1);
   15f14:	4967      	ldr	r1, [pc, #412]	; (160b4 <mqtt_callback+0x228>)
   15f16:	68fb      	ldr	r3, [r7, #12]
   15f18:	2201      	movs	r2, #1
   15f1a:	0018      	movs	r0, r3
   15f1c:	4b66      	ldr	r3, [pc, #408]	; (160b8 <mqtt_callback+0x22c>)
   15f1e:	4798      	blx	r3
   15f20:	0002      	movs	r2, r0
   15f22:	4b5e      	ldr	r3, [pc, #376]	; (1609c <mqtt_callback+0x210>)
   15f24:	601a      	str	r2, [r3, #0]
      status = mqtt_subscribe(module_inst, SENSOR_TOPIC, 1);
   15f26:	4965      	ldr	r1, [pc, #404]	; (160bc <mqtt_callback+0x230>)
   15f28:	68fb      	ldr	r3, [r7, #12]
   15f2a:	2201      	movs	r2, #1
   15f2c:	0018      	movs	r0, r3
   15f2e:	4b62      	ldr	r3, [pc, #392]	; (160b8 <mqtt_callback+0x22c>)
   15f30:	4798      	blx	r3
   15f32:	0002      	movs	r2, r0
   15f34:	4b59      	ldr	r3, [pc, #356]	; (1609c <mqtt_callback+0x210>)
   15f36:	601a      	str	r2, [r3, #0]
      status = mqtt_subscribe(module_inst, ACTUATOR_TOPIC, 1);
   15f38:	4961      	ldr	r1, [pc, #388]	; (160c0 <mqtt_callback+0x234>)
   15f3a:	68fb      	ldr	r3, [r7, #12]
   15f3c:	2201      	movs	r2, #1
   15f3e:	0018      	movs	r0, r3
   15f40:	4b5d      	ldr	r3, [pc, #372]	; (160b8 <mqtt_callback+0x22c>)
   15f42:	4798      	blx	r3
   15f44:	0002      	movs	r2, r0
   15f46:	4b55      	ldr	r3, [pc, #340]	; (1609c <mqtt_callback+0x210>)
   15f48:	601a      	str	r2, [r3, #0]
			/* Enable USART receiving callback. */
			usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   15f4a:	4b5e      	ldr	r3, [pc, #376]	; (160c4 <mqtt_callback+0x238>)
   15f4c:	2101      	movs	r1, #1
   15f4e:	0018      	movs	r0, r3
   15f50:	4b5d      	ldr	r3, [pc, #372]	; (160c8 <mqtt_callback+0x23c>)
   15f52:	4798      	blx	r3
			printf("Preparation of the chat has been completed.\r\n");
   15f54:	4b5d      	ldr	r3, [pc, #372]	; (160cc <mqtt_callback+0x240>)
   15f56:	0018      	movs	r0, r3
   15f58:	4b5d      	ldr	r3, [pc, #372]	; (160d0 <mqtt_callback+0x244>)
   15f5a:	4798      	blx	r3
		} else {
			/* Cannot connect for some reason. */
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
		}

		break;
   15f5c:	e093      	b.n	16086 <mqtt_callback+0x1fa>
			/* Enable USART receiving callback. */
			usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
			printf("Preparation of the chat has been completed.\r\n");
		} else {
			/* Cannot connect for some reason. */
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
   15f5e:	687b      	ldr	r3, [r7, #4]
   15f60:	781b      	ldrb	r3, [r3, #0]
   15f62:	001a      	movs	r2, r3
   15f64:	4b5b      	ldr	r3, [pc, #364]	; (160d4 <mqtt_callback+0x248>)
   15f66:	0011      	movs	r1, r2
   15f68:	0018      	movs	r0, r3
   15f6a:	4b4f      	ldr	r3, [pc, #316]	; (160a8 <mqtt_callback+0x21c>)
   15f6c:	4798      	blx	r3
		}

		break;
   15f6e:	e08a      	b.n	16086 <mqtt_callback+0x1fa>

	case MQTT_CALLBACK_RECV_PUBLISH:
		/* You received publish message which you had subscribed. */
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
   15f70:	687b      	ldr	r3, [r7, #4]
   15f72:	681b      	ldr	r3, [r3, #0]
   15f74:	2b00      	cmp	r3, #0
   15f76:	d100      	bne.n	15f7a <mqtt_callback+0xee>
   15f78:	e084      	b.n	16084 <mqtt_callback+0x1f8>
   15f7a:	687b      	ldr	r3, [r7, #4]
   15f7c:	689b      	ldr	r3, [r3, #8]
   15f7e:	2b00      	cmp	r3, #0
   15f80:	d100      	bne.n	15f84 <mqtt_callback+0xf8>
   15f82:	e07f      	b.n	16084 <mqtt_callback+0x1f8>
      
      
      /// Main Topic
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC)) ) {
   15f84:	687b      	ldr	r3, [r7, #4]
   15f86:	681b      	ldr	r3, [r3, #0]
   15f88:	494a      	ldr	r1, [pc, #296]	; (160b4 <mqtt_callback+0x228>)
   15f8a:	2204      	movs	r2, #4
   15f8c:	0018      	movs	r0, r3
   15f8e:	4b52      	ldr	r3, [pc, #328]	; (160d8 <mqtt_callback+0x24c>)
   15f90:	4798      	blx	r3
   15f92:	1e03      	subs	r3, r0, #0
   15f94:	d11c      	bne.n	15fd0 <mqtt_callback+0x144>
        /* Print Topic */
        printf("%s >> ", MAIN_CHAT_TOPIC);
   15f96:	4a47      	ldr	r2, [pc, #284]	; (160b4 <mqtt_callback+0x228>)
   15f98:	4b50      	ldr	r3, [pc, #320]	; (160dc <mqtt_callback+0x250>)
   15f9a:	0011      	movs	r1, r2
   15f9c:	0018      	movs	r0, r3
   15f9e:	4b42      	ldr	r3, [pc, #264]	; (160a8 <mqtt_callback+0x21c>)
   15fa0:	4798      	blx	r3
        
        /* Print message */
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
   15fa2:	2300      	movs	r3, #0
   15fa4:	61fb      	str	r3, [r7, #28]
   15fa6:	e00a      	b.n	15fbe <mqtt_callback+0x132>
          printf("%c", data->recv_publish.msg[i]);
   15fa8:	687b      	ldr	r3, [r7, #4]
   15faa:	689a      	ldr	r2, [r3, #8]
   15fac:	69fb      	ldr	r3, [r7, #28]
   15fae:	18d3      	adds	r3, r2, r3
   15fb0:	781b      	ldrb	r3, [r3, #0]
   15fb2:	0018      	movs	r0, r3
   15fb4:	4b4a      	ldr	r3, [pc, #296]	; (160e0 <mqtt_callback+0x254>)
   15fb6:	4798      	blx	r3
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC)) ) {
        /* Print Topic */
        printf("%s >> ", MAIN_CHAT_TOPIC);
        
        /* Print message */
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
   15fb8:	69fb      	ldr	r3, [r7, #28]
   15fba:	3301      	adds	r3, #1
   15fbc:	61fb      	str	r3, [r7, #28]
   15fbe:	687b      	ldr	r3, [r7, #4]
   15fc0:	68da      	ldr	r2, [r3, #12]
   15fc2:	69fb      	ldr	r3, [r7, #28]
   15fc4:	429a      	cmp	r2, r3
   15fc6:	dcef      	bgt.n	15fa8 <mqtt_callback+0x11c>
          printf("%c", data->recv_publish.msg[i]);
        }
        printf("\r\n");
   15fc8:	4b46      	ldr	r3, [pc, #280]	; (160e4 <mqtt_callback+0x258>)
   15fca:	0018      	movs	r0, r3
   15fcc:	4b40      	ldr	r3, [pc, #256]	; (160d0 <mqtt_callback+0x244>)
   15fce:	4798      	blx	r3
			}
      
      /// Sensor Topic
      if (!strncmp(data->recv_publish.topic, SENSOR_TOPIC, strlen(SENSOR_TOPIC)) ) {
   15fd0:	687b      	ldr	r3, [r7, #4]
   15fd2:	681b      	ldr	r3, [r3, #0]
   15fd4:	4939      	ldr	r1, [pc, #228]	; (160bc <mqtt_callback+0x230>)
   15fd6:	2206      	movs	r2, #6
   15fd8:	0018      	movs	r0, r3
   15fda:	4b3f      	ldr	r3, [pc, #252]	; (160d8 <mqtt_callback+0x24c>)
   15fdc:	4798      	blx	r3
   15fde:	1e03      	subs	r3, r0, #0
   15fe0:	d11c      	bne.n	1601c <mqtt_callback+0x190>
        /* Print Topic */
        printf("%s >> ", SENSOR_TOPIC);
   15fe2:	4a36      	ldr	r2, [pc, #216]	; (160bc <mqtt_callback+0x230>)
   15fe4:	4b3d      	ldr	r3, [pc, #244]	; (160dc <mqtt_callback+0x250>)
   15fe6:	0011      	movs	r1, r2
   15fe8:	0018      	movs	r0, r3
   15fea:	4b2f      	ldr	r3, [pc, #188]	; (160a8 <mqtt_callback+0x21c>)
   15fec:	4798      	blx	r3
        
        /* Print message */
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
   15fee:	2300      	movs	r3, #0
   15ff0:	61bb      	str	r3, [r7, #24]
   15ff2:	e00a      	b.n	1600a <mqtt_callback+0x17e>
          printf("%c", data->recv_publish.msg[i]);
   15ff4:	687b      	ldr	r3, [r7, #4]
   15ff6:	689a      	ldr	r2, [r3, #8]
   15ff8:	69bb      	ldr	r3, [r7, #24]
   15ffa:	18d3      	adds	r3, r2, r3
   15ffc:	781b      	ldrb	r3, [r3, #0]
   15ffe:	0018      	movs	r0, r3
   16000:	4b37      	ldr	r3, [pc, #220]	; (160e0 <mqtt_callback+0x254>)
   16002:	4798      	blx	r3
      if (!strncmp(data->recv_publish.topic, SENSOR_TOPIC, strlen(SENSOR_TOPIC)) ) {
        /* Print Topic */
        printf("%s >> ", SENSOR_TOPIC);
        
        /* Print message */
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
   16004:	69bb      	ldr	r3, [r7, #24]
   16006:	3301      	adds	r3, #1
   16008:	61bb      	str	r3, [r7, #24]
   1600a:	687b      	ldr	r3, [r7, #4]
   1600c:	68da      	ldr	r2, [r3, #12]
   1600e:	69bb      	ldr	r3, [r7, #24]
   16010:	429a      	cmp	r2, r3
   16012:	dcef      	bgt.n	15ff4 <mqtt_callback+0x168>
          printf("%c", data->recv_publish.msg[i]);
        }
        printf("\r\n");
   16014:	4b33      	ldr	r3, [pc, #204]	; (160e4 <mqtt_callback+0x258>)
   16016:	0018      	movs	r0, r3
   16018:	4b2d      	ldr	r3, [pc, #180]	; (160d0 <mqtt_callback+0x244>)
   1601a:	4798      	blx	r3
      }
      
      /// Actuator Topic
      if (!strncmp(data->recv_publish.topic, ACTUATOR_TOPIC, strlen(ACTUATOR_TOPIC)) ) {
   1601c:	687b      	ldr	r3, [r7, #4]
   1601e:	681b      	ldr	r3, [r3, #0]
   16020:	4927      	ldr	r1, [pc, #156]	; (160c0 <mqtt_callback+0x234>)
   16022:	2208      	movs	r2, #8
   16024:	0018      	movs	r0, r3
   16026:	4b2c      	ldr	r3, [pc, #176]	; (160d8 <mqtt_callback+0x24c>)
   16028:	4798      	blx	r3
   1602a:	1e03      	subs	r3, r0, #0
   1602c:	d12a      	bne.n	16084 <mqtt_callback+0x1f8>
        /* Print Topic */
        printf("%s >> ", ACTUATOR_TOPIC);
   1602e:	4a24      	ldr	r2, [pc, #144]	; (160c0 <mqtt_callback+0x234>)
   16030:	4b2a      	ldr	r3, [pc, #168]	; (160dc <mqtt_callback+0x250>)
   16032:	0011      	movs	r1, r2
   16034:	0018      	movs	r0, r3
   16036:	4b1c      	ldr	r3, [pc, #112]	; (160a8 <mqtt_callback+0x21c>)
   16038:	4798      	blx	r3
       port_pin_toggle_output_level(LED_0_PIN);
   1603a:	2017      	movs	r0, #23
   1603c:	4b2a      	ldr	r3, [pc, #168]	; (160e8 <mqtt_callback+0x25c>)
   1603e:	4798      	blx	r3
        /* Print message */
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
   16040:	2300      	movs	r3, #0
   16042:	617b      	str	r3, [r7, #20]
   16044:	e00a      	b.n	1605c <mqtt_callback+0x1d0>
          printf("%c", data->recv_publish.msg[i]);
   16046:	687b      	ldr	r3, [r7, #4]
   16048:	689a      	ldr	r2, [r3, #8]
   1604a:	697b      	ldr	r3, [r7, #20]
   1604c:	18d3      	adds	r3, r2, r3
   1604e:	781b      	ldrb	r3, [r3, #0]
   16050:	0018      	movs	r0, r3
   16052:	4b23      	ldr	r3, [pc, #140]	; (160e0 <mqtt_callback+0x254>)
   16054:	4798      	blx	r3
      if (!strncmp(data->recv_publish.topic, ACTUATOR_TOPIC, strlen(ACTUATOR_TOPIC)) ) {
        /* Print Topic */
        printf("%s >> ", ACTUATOR_TOPIC);
       port_pin_toggle_output_level(LED_0_PIN);
        /* Print message */
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
   16056:	697b      	ldr	r3, [r7, #20]
   16058:	3301      	adds	r3, #1
   1605a:	617b      	str	r3, [r7, #20]
   1605c:	687b      	ldr	r3, [r7, #4]
   1605e:	68da      	ldr	r2, [r3, #12]
   16060:	697b      	ldr	r3, [r7, #20]
   16062:	429a      	cmp	r2, r3
   16064:	dcef      	bgt.n	16046 <mqtt_callback+0x1ba>
          printf("%c", data->recv_publish.msg[i]);
        }
        printf("\r\n");
   16066:	4b1f      	ldr	r3, [pc, #124]	; (160e4 <mqtt_callback+0x258>)
   16068:	0018      	movs	r0, r3
   1606a:	4b19      	ldr	r3, [pc, #100]	; (160d0 <mqtt_callback+0x244>)
   1606c:	4798      	blx	r3
      }
      
		}

		break;
   1606e:	e009      	b.n	16084 <mqtt_callback+0x1f8>

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
   16070:	4b1e      	ldr	r3, [pc, #120]	; (160ec <mqtt_callback+0x260>)
   16072:	0018      	movs	r0, r3
   16074:	4b16      	ldr	r3, [pc, #88]	; (160d0 <mqtt_callback+0x244>)
   16076:	4798      	blx	r3
		usart_disable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   16078:	4b12      	ldr	r3, [pc, #72]	; (160c4 <mqtt_callback+0x238>)
   1607a:	2101      	movs	r1, #1
   1607c:	0018      	movs	r0, r3
   1607e:	4b1c      	ldr	r3, [pc, #112]	; (160f0 <mqtt_callback+0x264>)
   16080:	4798      	blx	r3
		break;
   16082:	e000      	b.n	16086 <mqtt_callback+0x1fa>
        printf("\r\n");
      }
      
		}

		break;
   16084:	46c0      	nop			; (mov r8, r8)
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
		usart_disable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
   16086:	46c0      	nop			; (mov r8, r8)
   16088:	46bd      	mov	sp, r7
   1608a:	b009      	add	sp, #36	; 0x24
   1608c:	bd90      	pop	{r4, r7, pc}
   1608e:	46c0      	nop			; (mov r8, r8)
   16090:	20000024 	.word	0x20000024
   16094:	2000001c 	.word	0x2000001c
   16098:	00017585 	.word	0x00017585
   1609c:	20000ea0 	.word	0x20000ea0
   160a0:	0001b008 	.word	0x0001b008
   160a4:	0001b084 	.word	0x0001b084
   160a8:	00018619 	.word	0x00018619
   160ac:	00017471 	.word	0x00017471
   160b0:	00011b89 	.word	0x00011b89
   160b4:	0001b0bc 	.word	0x0001b0bc
   160b8:	000179dd 	.word	0x000179dd
   160bc:	0001b0c4 	.word	0x0001b0c4
   160c0:	0001b0cc 	.word	0x0001b0cc
   160c4:	20000484 	.word	0x20000484
   160c8:	00015b99 	.word	0x00015b99
   160cc:	0001b0d8 	.word	0x0001b0d8
   160d0:	00018739 	.word	0x00018739
   160d4:	0001b108 	.word	0x0001b108
   160d8:	00018995 	.word	0x00018995
   160dc:	0001b13c 	.word	0x0001b13c
   160e0:	0001864d 	.word	0x0001864d
   160e4:	0001b144 	.word	0x0001b144
   160e8:	0001581d 	.word	0x0001581d
   160ec:	0001b148 	.word	0x0001b148
   160f0:	00015bd1 	.word	0x00015bd1

000160f4 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   160f4:	b580      	push	{r7, lr}
   160f6:	b088      	sub	sp, #32
   160f8:	af00      	add	r7, sp, #0
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
   160fa:	003b      	movs	r3, r7
   160fc:	0018      	movs	r0, r3
   160fe:	4b1b      	ldr	r3, [pc, #108]	; (1616c <configure_mqtt+0x78>)
   16100:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.timer_inst = &swt_module_inst_mqtt;
   16102:	003b      	movs	r3, r7
   16104:	4a1a      	ldr	r2, [pc, #104]	; (16170 <configure_mqtt+0x7c>)
   16106:	605a      	str	r2, [r3, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
   16108:	003b      	movs	r3, r7
   1610a:	4a1a      	ldr	r2, [pc, #104]	; (16174 <configure_mqtt+0x80>)
   1610c:	60da      	str	r2, [r3, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1610e:	003b      	movs	r3, r7
   16110:	2280      	movs	r2, #128	; 0x80
   16112:	611a      	str	r2, [r3, #16]
  mqtt_conf.port = MQTT_PORT;
   16114:	003b      	movs	r3, r7
   16116:	4a18      	ldr	r2, [pc, #96]	; (16178 <configure_mqtt+0x84>)
   16118:	801a      	strh	r2, [r3, #0]

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   1611a:	003a      	movs	r2, r7
   1611c:	4b17      	ldr	r3, [pc, #92]	; (1617c <configure_mqtt+0x88>)
   1611e:	0011      	movs	r1, r2
   16120:	0018      	movs	r0, r3
   16122:	4b17      	ldr	r3, [pc, #92]	; (16180 <configure_mqtt+0x8c>)
   16124:	4798      	blx	r3
   16126:	0003      	movs	r3, r0
   16128:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
   1612a:	69fb      	ldr	r3, [r7, #28]
   1612c:	2b00      	cmp	r3, #0
   1612e:	da06      	bge.n	1613e <configure_mqtt+0x4a>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
   16130:	69fa      	ldr	r2, [r7, #28]
   16132:	4b14      	ldr	r3, [pc, #80]	; (16184 <configure_mqtt+0x90>)
   16134:	0011      	movs	r1, r2
   16136:	0018      	movs	r0, r3
   16138:	4b13      	ldr	r3, [pc, #76]	; (16188 <configure_mqtt+0x94>)
   1613a:	4798      	blx	r3
		while (1) {
		}
   1613c:	e7fe      	b.n	1613c <configure_mqtt+0x48>
	}


	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   1613e:	4a13      	ldr	r2, [pc, #76]	; (1618c <configure_mqtt+0x98>)
   16140:	4b0e      	ldr	r3, [pc, #56]	; (1617c <configure_mqtt+0x88>)
   16142:	0011      	movs	r1, r2
   16144:	0018      	movs	r0, r3
   16146:	4b12      	ldr	r3, [pc, #72]	; (16190 <configure_mqtt+0x9c>)
   16148:	4798      	blx	r3
   1614a:	0003      	movs	r3, r0
   1614c:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
   1614e:	69fb      	ldr	r3, [r7, #28]
   16150:	2b00      	cmp	r3, #0
   16152:	da06      	bge.n	16162 <configure_mqtt+0x6e>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
   16154:	69fa      	ldr	r2, [r7, #28]
   16156:	4b0f      	ldr	r3, [pc, #60]	; (16194 <configure_mqtt+0xa0>)
   16158:	0011      	movs	r1, r2
   1615a:	0018      	movs	r0, r3
   1615c:	4b0a      	ldr	r3, [pc, #40]	; (16188 <configure_mqtt+0x94>)
   1615e:	4798      	blx	r3
		while (1) {
		}
   16160:	e7fe      	b.n	16160 <configure_mqtt+0x6c>
	}
}
   16162:	46c0      	nop			; (mov r8, r8)
   16164:	46bd      	mov	sp, r7
   16166:	b008      	add	sp, #32
   16168:	bd80      	pop	{r7, pc}
   1616a:	46c0      	nop			; (mov r8, r8)
   1616c:	00017319 	.word	0x00017319
   16170:	200004bc 	.word	0x200004bc
   16174:	200001f4 	.word	0x200001f4
   16178:	00004788 	.word	0x00004788
   1617c:	20000180 	.word	0x20000180
   16180:	0001733d 	.word	0x0001733d
   16184:	0001b15c 	.word	0x0001b15c
   16188:	00018619 	.word	0x00018619
   1618c:	00015e8d 	.word	0x00015e8d
   16190:	0001740d 	.word	0x0001740d
   16194:	0001b190 	.word	0x0001b190

00016198 <check_usart_buffer>:
 *
 * Finding the new line character(\n or \r\n) in the USART buffer.
 * If buffer was overflowed, Sending the buffer.
 */
static void check_usart_buffer(char *topic)
{
   16198:	b590      	push	{r4, r7, lr}
   1619a:	b087      	sub	sp, #28
   1619c:	af02      	add	r7, sp, #8
   1619e:	6078      	str	r0, [r7, #4]
	int i;

	/* Publish the input string when newline was received or input string is bigger than buffer size limit. */
	if (uart_buffer_written >= MAIN_CHAT_BUFFER_SIZE) {
   161a0:	4b30      	ldr	r3, [pc, #192]	; (16264 <check_usart_buffer+0xcc>)
   161a2:	681b      	ldr	r3, [r3, #0]
   161a4:	2b3f      	cmp	r3, #63	; 0x3f
   161a6:	dd0d      	ble.n	161c4 <check_usart_buffer+0x2c>
		mqtt_publish(&mqtt_inst, topic, uart_buffer, MAIN_CHAT_BUFFER_SIZE, 0, 0);
   161a8:	4a2f      	ldr	r2, [pc, #188]	; (16268 <check_usart_buffer+0xd0>)
   161aa:	6879      	ldr	r1, [r7, #4]
   161ac:	482f      	ldr	r0, [pc, #188]	; (1626c <check_usart_buffer+0xd4>)
   161ae:	2300      	movs	r3, #0
   161b0:	9301      	str	r3, [sp, #4]
   161b2:	2300      	movs	r3, #0
   161b4:	9300      	str	r3, [sp, #0]
   161b6:	2340      	movs	r3, #64	; 0x40
   161b8:	4c2d      	ldr	r4, [pc, #180]	; (16270 <check_usart_buffer+0xd8>)
   161ba:	47a0      	blx	r4
		uart_buffer_written = 0;
   161bc:	4b29      	ldr	r3, [pc, #164]	; (16264 <check_usart_buffer+0xcc>)
   161be:	2200      	movs	r2, #0
   161c0:	601a      	str	r2, [r3, #0]

				break;
			}
		}
	}
}
   161c2:	e04a      	b.n	1625a <check_usart_buffer+0xc2>
	/* Publish the input string when newline was received or input string is bigger than buffer size limit. */
	if (uart_buffer_written >= MAIN_CHAT_BUFFER_SIZE) {
		mqtt_publish(&mqtt_inst, topic, uart_buffer, MAIN_CHAT_BUFFER_SIZE, 0, 0);
		uart_buffer_written = 0;
	} else {
		for (i = 0; i < uart_buffer_written; i++) {
   161c4:	2300      	movs	r3, #0
   161c6:	60fb      	str	r3, [r7, #12]
   161c8:	e041      	b.n	1624e <check_usart_buffer+0xb6>
			/* Find newline character ('\n' or '\r\n') and publish the previous string . */
			if (uart_buffer[i] == '\n') {
   161ca:	4a27      	ldr	r2, [pc, #156]	; (16268 <check_usart_buffer+0xd0>)
   161cc:	68fb      	ldr	r3, [r7, #12]
   161ce:	18d3      	adds	r3, r2, r3
   161d0:	781b      	ldrb	r3, [r3, #0]
   161d2:	2b0a      	cmp	r3, #10
   161d4:	d138      	bne.n	16248 <check_usart_buffer+0xb0>
				mqtt_publish(&mqtt_inst, topic, uart_buffer, (i > 0 && uart_buffer[i - 1] == '\r') ? i - 1 : i, 0, 0);
   161d6:	68fb      	ldr	r3, [r7, #12]
   161d8:	2b00      	cmp	r3, #0
   161da:	dd09      	ble.n	161f0 <check_usart_buffer+0x58>
   161dc:	68fb      	ldr	r3, [r7, #12]
   161de:	3b01      	subs	r3, #1
   161e0:	4a21      	ldr	r2, [pc, #132]	; (16268 <check_usart_buffer+0xd0>)
   161e2:	5cd3      	ldrb	r3, [r2, r3]
   161e4:	2b0d      	cmp	r3, #13
   161e6:	d103      	bne.n	161f0 <check_usart_buffer+0x58>
   161e8:	68fb      	ldr	r3, [r7, #12]
   161ea:	3b01      	subs	r3, #1
   161ec:	001a      	movs	r2, r3
   161ee:	e000      	b.n	161f2 <check_usart_buffer+0x5a>
   161f0:	68fa      	ldr	r2, [r7, #12]
   161f2:	4c1d      	ldr	r4, [pc, #116]	; (16268 <check_usart_buffer+0xd0>)
   161f4:	6879      	ldr	r1, [r7, #4]
   161f6:	481d      	ldr	r0, [pc, #116]	; (1626c <check_usart_buffer+0xd4>)
   161f8:	2300      	movs	r3, #0
   161fa:	9301      	str	r3, [sp, #4]
   161fc:	2300      	movs	r3, #0
   161fe:	9300      	str	r3, [sp, #0]
   16200:	0013      	movs	r3, r2
   16202:	0022      	movs	r2, r4
   16204:	4c1a      	ldr	r4, [pc, #104]	; (16270 <check_usart_buffer+0xd8>)
   16206:	47a0      	blx	r4
				/* Move remain data to start of the buffer. */
				if (uart_buffer_written > i + 1) {
   16208:	68fb      	ldr	r3, [r7, #12]
   1620a:	1c5a      	adds	r2, r3, #1
   1620c:	4b15      	ldr	r3, [pc, #84]	; (16264 <check_usart_buffer+0xcc>)
   1620e:	681b      	ldr	r3, [r3, #0]
   16210:	429a      	cmp	r2, r3
   16212:	da15      	bge.n	16240 <check_usart_buffer+0xa8>
					memmove(uart_buffer, uart_buffer + i + 1, uart_buffer_written - i - 1);
   16214:	68fb      	ldr	r3, [r7, #12]
   16216:	1c5a      	adds	r2, r3, #1
   16218:	4b13      	ldr	r3, [pc, #76]	; (16268 <check_usart_buffer+0xd0>)
   1621a:	18d1      	adds	r1, r2, r3
   1621c:	4b11      	ldr	r3, [pc, #68]	; (16264 <check_usart_buffer+0xcc>)
   1621e:	681a      	ldr	r2, [r3, #0]
   16220:	68fb      	ldr	r3, [r7, #12]
   16222:	1ad3      	subs	r3, r2, r3
   16224:	3b01      	subs	r3, #1
   16226:	001a      	movs	r2, r3
   16228:	4b0f      	ldr	r3, [pc, #60]	; (16268 <check_usart_buffer+0xd0>)
   1622a:	0018      	movs	r0, r3
   1622c:	4b11      	ldr	r3, [pc, #68]	; (16274 <check_usart_buffer+0xdc>)
   1622e:	4798      	blx	r3
					uart_buffer_written = uart_buffer_written - i - 1;
   16230:	4b0c      	ldr	r3, [pc, #48]	; (16264 <check_usart_buffer+0xcc>)
   16232:	681a      	ldr	r2, [r3, #0]
   16234:	68fb      	ldr	r3, [r7, #12]
   16236:	1ad3      	subs	r3, r2, r3
   16238:	1e5a      	subs	r2, r3, #1
   1623a:	4b0a      	ldr	r3, [pc, #40]	; (16264 <check_usart_buffer+0xcc>)
   1623c:	601a      	str	r2, [r3, #0]
				} else {
					uart_buffer_written = 0;
				}

				break;
   1623e:	e00c      	b.n	1625a <check_usart_buffer+0xc2>
				/* Move remain data to start of the buffer. */
				if (uart_buffer_written > i + 1) {
					memmove(uart_buffer, uart_buffer + i + 1, uart_buffer_written - i - 1);
					uart_buffer_written = uart_buffer_written - i - 1;
				} else {
					uart_buffer_written = 0;
   16240:	4b08      	ldr	r3, [pc, #32]	; (16264 <check_usart_buffer+0xcc>)
   16242:	2200      	movs	r2, #0
   16244:	601a      	str	r2, [r3, #0]
				}

				break;
   16246:	e008      	b.n	1625a <check_usart_buffer+0xc2>
	/* Publish the input string when newline was received or input string is bigger than buffer size limit. */
	if (uart_buffer_written >= MAIN_CHAT_BUFFER_SIZE) {
		mqtt_publish(&mqtt_inst, topic, uart_buffer, MAIN_CHAT_BUFFER_SIZE, 0, 0);
		uart_buffer_written = 0;
	} else {
		for (i = 0; i < uart_buffer_written; i++) {
   16248:	68fb      	ldr	r3, [r7, #12]
   1624a:	3301      	adds	r3, #1
   1624c:	60fb      	str	r3, [r7, #12]
   1624e:	4b05      	ldr	r3, [pc, #20]	; (16264 <check_usart_buffer+0xcc>)
   16250:	681b      	ldr	r3, [r3, #0]
   16252:	68fa      	ldr	r2, [r7, #12]
   16254:	429a      	cmp	r2, r3
   16256:	dbb8      	blt.n	161ca <check_usart_buffer+0x32>

				break;
			}
		}
	}
}
   16258:	e7ff      	b.n	1625a <check_usart_buffer+0xc2>
   1625a:	46c0      	nop			; (mov r8, r8)
   1625c:	46bd      	mov	sp, r7
   1625e:	b005      	add	sp, #20
   16260:	bd90      	pop	{r4, r7, pc}
   16262:	46c0      	nop			; (mov r8, r8)
   16264:	200002b4 	.word	0x200002b4
   16268:	20000274 	.word	0x20000274
   1626c:	20000180 	.word	0x20000180
   16270:	00017835 	.word	0x00017835
   16274:	000184a7 	.word	0x000184a7

00016278 <configure_console>:

/* ~~~~~~~~~~~~~~~~~~~~~~~MQTT SETUP ENDS~~~~~~~~~~~~~~~~~~~~~~~~~~ */


static void configure_console(void)
{
   16278:	b580      	push	{r7, lr}
   1627a:	b090      	sub	sp, #64	; 0x40
   1627c:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;
	usart_get_config_defaults(&usart_conf);
   1627e:	003b      	movs	r3, r7
   16280:	0018      	movs	r0, r3
   16282:	4b16      	ldr	r3, [pc, #88]	; (162dc <configure_console+0x64>)
   16284:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   16286:	003b      	movs	r3, r7
   16288:	22c4      	movs	r2, #196	; 0xc4
   1628a:	0392      	lsls	r2, r2, #14
   1628c:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1628e:	003b      	movs	r3, r7
   16290:	2201      	movs	r2, #1
   16292:	4252      	negs	r2, r2
   16294:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   16296:	003b      	movs	r3, r7
   16298:	2201      	movs	r2, #1
   1629a:	4252      	negs	r2, r2
   1629c:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1629e:	003b      	movs	r3, r7
   162a0:	4a0f      	ldr	r2, [pc, #60]	; (162e0 <configure_console+0x68>)
   162a2:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   162a4:	003b      	movs	r3, r7
   162a6:	4a0f      	ldr	r2, [pc, #60]	; (162e4 <configure_console+0x6c>)
   162a8:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
   162aa:	003b      	movs	r3, r7
   162ac:	22e1      	movs	r2, #225	; 0xe1
   162ae:	0252      	lsls	r2, r2, #9
   162b0:	621a      	str	r2, [r3, #32]
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
   162b2:	003a      	movs	r2, r7
   162b4:	490c      	ldr	r1, [pc, #48]	; (162e8 <configure_console+0x70>)
   162b6:	4b0d      	ldr	r3, [pc, #52]	; (162ec <configure_console+0x74>)
   162b8:	0018      	movs	r0, r3
   162ba:	4b0d      	ldr	r3, [pc, #52]	; (162f0 <configure_console+0x78>)
   162bc:	4798      	blx	r3
	usart_register_callback(&usart_instance, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
   162be:	490d      	ldr	r1, [pc, #52]	; (162f4 <configure_console+0x7c>)
   162c0:	4b0a      	ldr	r3, [pc, #40]	; (162ec <configure_console+0x74>)
   162c2:	2201      	movs	r2, #1
   162c4:	0018      	movs	r0, r3
   162c6:	4b0c      	ldr	r3, [pc, #48]	; (162f8 <configure_console+0x80>)
   162c8:	4798      	blx	r3
	usart_enable(&usart_instance);
   162ca:	4b08      	ldr	r3, [pc, #32]	; (162ec <configure_console+0x74>)
   162cc:	0018      	movs	r0, r3
   162ce:	4b0b      	ldr	r3, [pc, #44]	; (162fc <configure_console+0x84>)
   162d0:	4798      	blx	r3
}
   162d2:	46c0      	nop			; (mov r8, r8)
   162d4:	46bd      	mov	sp, r7
   162d6:	b010      	add	sp, #64	; 0x40
   162d8:	bd80      	pop	{r7, pc}
   162da:	46c0      	nop			; (mov r8, r8)
   162dc:	00015a91 	.word	0x00015a91
   162e0:	002a0003 	.word	0x002a0003
   162e4:	002b0003 	.word	0x002b0003
   162e8:	42001800 	.word	0x42001800
   162ec:	20000484 	.word	0x20000484
   162f0:	00015cb1 	.word	0x00015cb1
   162f4:	00015d21 	.word	0x00015d21
   162f8:	00014271 	.word	0x00014271
   162fc:	00015b51 	.word	0x00015b51

00016300 <configure_nvm>:


static void configure_nvm()
{
   16300:	b580      	push	{r7, lr}
   16302:	b082      	sub	sp, #8
   16304:	af00      	add	r7, sp, #0
	struct nvm_config config;
	nvm_get_config_defaults(&config);
   16306:	003b      	movs	r3, r7
   16308:	0018      	movs	r0, r3
   1630a:	4b06      	ldr	r3, [pc, #24]	; (16324 <configure_nvm+0x24>)
   1630c:	4798      	blx	r3
	config.manual_page_write = false;
   1630e:	003b      	movs	r3, r7
   16310:	2200      	movs	r2, #0
   16312:	705a      	strb	r2, [r3, #1]
	nvm_set_config(&config);
   16314:	003b      	movs	r3, r7
   16316:	0018      	movs	r0, r3
   16318:	4b03      	ldr	r3, [pc, #12]	; (16328 <configure_nvm+0x28>)
   1631a:	4798      	blx	r3
}
   1631c:	46c0      	nop			; (mov r8, r8)
   1631e:	46bd      	mov	sp, r7
   16320:	b002      	add	sp, #8
   16322:	bd80      	pop	{r7, pc}
   16324:	00015a11 	.word	0x00015a11
   16328:	00011c3d 	.word	0x00011c3d

0001632c <getFWStat>:

static Firmware_Status_t getFWStat()
{
   1632c:	b590      	push	{r4, r7, lr}
   1632e:	b097      	sub	sp, #92	; 0x5c
   16330:	af00      	add	r7, sp, #0
   16332:	6078      	str	r0, [r7, #4]
	status_code_genare_t error_code;
	uint8_t read_buffer[NVMCTRL_PAGE_SIZE]={0};
   16334:	2314      	movs	r3, #20
   16336:	18fb      	adds	r3, r7, r3
   16338:	0018      	movs	r0, r3
   1633a:	2340      	movs	r3, #64	; 0x40
   1633c:	001a      	movs	r2, r3
   1633e:	2100      	movs	r1, #0
   16340:	4b27      	ldr	r3, [pc, #156]	; (163e0 <getFWStat+0xb4>)
   16342:	4798      	blx	r3
	do
	{
		error_code = nvm_read_buffer(FW_STAT_ADDRESS, read_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   16344:	2357      	movs	r3, #87	; 0x57
   16346:	18fc      	adds	r4, r7, r3
   16348:	2314      	movs	r3, #20
   1634a:	18f9      	adds	r1, r7, r3
   1634c:	23fe      	movs	r3, #254	; 0xfe
   1634e:	01db      	lsls	r3, r3, #7
   16350:	2240      	movs	r2, #64	; 0x40
   16352:	0018      	movs	r0, r3
   16354:	4b23      	ldr	r3, [pc, #140]	; (163e4 <getFWStat+0xb8>)
   16356:	4798      	blx	r3
   16358:	0003      	movs	r3, r0
   1635a:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   1635c:	2357      	movs	r3, #87	; 0x57
   1635e:	18fb      	adds	r3, r7, r3
   16360:	781b      	ldrb	r3, [r3, #0]
   16362:	2b05      	cmp	r3, #5
   16364:	d0ee      	beq.n	16344 <getFWStat+0x18>
	Firmware_Status_t thisFW;
	thisFW.signature[0]			= read_buffer[0];
   16366:	2314      	movs	r3, #20
   16368:	18fb      	adds	r3, r7, r3
   1636a:	781a      	ldrb	r2, [r3, #0]
   1636c:	230c      	movs	r3, #12
   1636e:	18fb      	adds	r3, r7, r3
   16370:	701a      	strb	r2, [r3, #0]
	thisFW.signature[1]			= read_buffer[1];
   16372:	2314      	movs	r3, #20
   16374:	18fb      	adds	r3, r7, r3
   16376:	785a      	ldrb	r2, [r3, #1]
   16378:	230c      	movs	r3, #12
   1637a:	18fb      	adds	r3, r7, r3
   1637c:	705a      	strb	r2, [r3, #1]
	thisFW.signature[2]			= read_buffer[2];
   1637e:	2314      	movs	r3, #20
   16380:	18fb      	adds	r3, r7, r3
   16382:	789a      	ldrb	r2, [r3, #2]
   16384:	230c      	movs	r3, #12
   16386:	18fb      	adds	r3, r7, r3
   16388:	709a      	strb	r2, [r3, #2]
	thisFW.signature[3]			= read_buffer[3];
   1638a:	2314      	movs	r3, #20
   1638c:	18fb      	adds	r3, r7, r3
   1638e:	78da      	ldrb	r2, [r3, #3]
   16390:	230c      	movs	r3, #12
   16392:	18fb      	adds	r3, r7, r3
   16394:	70da      	strb	r2, [r3, #3]
	thisFW.executing_image		= read_buffer[4];
   16396:	2314      	movs	r3, #20
   16398:	18fb      	adds	r3, r7, r3
   1639a:	791a      	ldrb	r2, [r3, #4]
   1639c:	230c      	movs	r3, #12
   1639e:	18fb      	adds	r3, r7, r3
   163a0:	711a      	strb	r2, [r3, #4]
	thisFW.downloaded_image		= read_buffer[5];
   163a2:	2314      	movs	r3, #20
   163a4:	18fb      	adds	r3, r7, r3
   163a6:	795a      	ldrb	r2, [r3, #5]
   163a8:	230c      	movs	r3, #12
   163aa:	18fb      	adds	r3, r7, r3
   163ac:	715a      	strb	r2, [r3, #5]
	thisFW.writenew_image		= read_buffer[6];
   163ae:	2314      	movs	r3, #20
   163b0:	18fb      	adds	r3, r7, r3
   163b2:	799a      	ldrb	r2, [r3, #6]
   163b4:	230c      	movs	r3, #12
   163b6:	18fb      	adds	r3, r7, r3
   163b8:	719a      	strb	r2, [r3, #6]
	thisFW.reset_count			= read_buffer[7];
   163ba:	2314      	movs	r3, #20
   163bc:	18fb      	adds	r3, r7, r3
   163be:	79da      	ldrb	r2, [r3, #7]
   163c0:	230c      	movs	r3, #12
   163c2:	18fb      	adds	r3, r7, r3
   163c4:	71da      	strb	r2, [r3, #7]
	return thisFW;
   163c6:	687a      	ldr	r2, [r7, #4]
   163c8:	230c      	movs	r3, #12
   163ca:	18fb      	adds	r3, r7, r3
   163cc:	0010      	movs	r0, r2
   163ce:	0019      	movs	r1, r3
   163d0:	2308      	movs	r3, #8
   163d2:	001a      	movs	r2, r3
   163d4:	4b04      	ldr	r3, [pc, #16]	; (163e8 <getFWStat+0xbc>)
   163d6:	4798      	blx	r3
	//return *(Firmware_Status_t*)FW_STAT_ADDRESS;	// return the firmware status
}
   163d8:	6878      	ldr	r0, [r7, #4]
   163da:	46bd      	mov	sp, r7
   163dc:	b017      	add	sp, #92	; 0x5c
   163de:	bd90      	pop	{r4, r7, pc}
   163e0:	000184d1 	.word	0x000184d1
   163e4:	00011f79 	.word	0x00011f79
   163e8:	00018495 	.word	0x00018495

000163ec <writeFWStat>:

static void writeFWStat(Firmware_Status_t thisFW)
{
   163ec:	b590      	push	{r4, r7, lr}
   163ee:	b095      	sub	sp, #84	; 0x54
   163f0:	af00      	add	r7, sp, #0
   163f2:	003b      	movs	r3, r7
   163f4:	6018      	str	r0, [r3, #0]
   163f6:	6059      	str	r1, [r3, #4]
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE]={0};
   163f8:	230c      	movs	r3, #12
   163fa:	18fb      	adds	r3, r7, r3
   163fc:	0018      	movs	r0, r3
   163fe:	2340      	movs	r3, #64	; 0x40
   16400:	001a      	movs	r2, r3
   16402:	2100      	movs	r1, #0
   16404:	4b25      	ldr	r3, [pc, #148]	; (1649c <writeFWStat+0xb0>)
   16406:	4798      	blx	r3
	page_buffer[0] = thisFW.signature[0];
   16408:	003b      	movs	r3, r7
   1640a:	781a      	ldrb	r2, [r3, #0]
   1640c:	230c      	movs	r3, #12
   1640e:	18fb      	adds	r3, r7, r3
   16410:	701a      	strb	r2, [r3, #0]
	page_buffer[1] = thisFW.signature[1];
   16412:	003b      	movs	r3, r7
   16414:	785a      	ldrb	r2, [r3, #1]
   16416:	230c      	movs	r3, #12
   16418:	18fb      	adds	r3, r7, r3
   1641a:	705a      	strb	r2, [r3, #1]
	page_buffer[2] = thisFW.signature[2];
   1641c:	003b      	movs	r3, r7
   1641e:	789a      	ldrb	r2, [r3, #2]
   16420:	230c      	movs	r3, #12
   16422:	18fb      	adds	r3, r7, r3
   16424:	709a      	strb	r2, [r3, #2]
	page_buffer[3] = thisFW.signature[3];
   16426:	003b      	movs	r3, r7
   16428:	78da      	ldrb	r2, [r3, #3]
   1642a:	230c      	movs	r3, #12
   1642c:	18fb      	adds	r3, r7, r3
   1642e:	70da      	strb	r2, [r3, #3]
	page_buffer[4] = thisFW.executing_image;
   16430:	003b      	movs	r3, r7
   16432:	791a      	ldrb	r2, [r3, #4]
   16434:	230c      	movs	r3, #12
   16436:	18fb      	adds	r3, r7, r3
   16438:	711a      	strb	r2, [r3, #4]
	page_buffer[5] = thisFW.downloaded_image;
   1643a:	003b      	movs	r3, r7
   1643c:	795a      	ldrb	r2, [r3, #5]
   1643e:	230c      	movs	r3, #12
   16440:	18fb      	adds	r3, r7, r3
   16442:	715a      	strb	r2, [r3, #5]
	page_buffer[6] = thisFW.writenew_image;
   16444:	003b      	movs	r3, r7
   16446:	799a      	ldrb	r2, [r3, #6]
   16448:	230c      	movs	r3, #12
   1644a:	18fb      	adds	r3, r7, r3
   1644c:	719a      	strb	r2, [r3, #6]
	page_buffer[7] = 0;
   1644e:	230c      	movs	r3, #12
   16450:	18fb      	adds	r3, r7, r3
   16452:	2200      	movs	r2, #0
   16454:	71da      	strb	r2, [r3, #7]
	
	status_code_genare_t error_code;
	do
	{
		error_code = nvm_erase_row(FW_STAT_ADDRESS);			// Erase FW stat row
   16456:	234f      	movs	r3, #79	; 0x4f
   16458:	18fc      	adds	r4, r7, r3
   1645a:	23fe      	movs	r3, #254	; 0xfe
   1645c:	01db      	lsls	r3, r3, #7
   1645e:	0018      	movs	r0, r3
   16460:	4b0f      	ldr	r3, [pc, #60]	; (164a0 <writeFWStat+0xb4>)
   16462:	4798      	blx	r3
   16464:	0003      	movs	r3, r0
   16466:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   16468:	234f      	movs	r3, #79	; 0x4f
   1646a:	18fb      	adds	r3, r7, r3
   1646c:	781b      	ldrb	r3, [r3, #0]
   1646e:	2b05      	cmp	r3, #5
   16470:	d0f1      	beq.n	16456 <writeFWStat+0x6a>
	
	do
	{
		error_code = nvm_write_buffer(FW_STAT_ADDRESS, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   16472:	234f      	movs	r3, #79	; 0x4f
   16474:	18fc      	adds	r4, r7, r3
   16476:	230c      	movs	r3, #12
   16478:	18f9      	adds	r1, r7, r3
   1647a:	23fe      	movs	r3, #254	; 0xfe
   1647c:	01db      	lsls	r3, r3, #7
   1647e:	2240      	movs	r2, #64	; 0x40
   16480:	0018      	movs	r0, r3
   16482:	4b08      	ldr	r3, [pc, #32]	; (164a4 <writeFWStat+0xb8>)
   16484:	4798      	blx	r3
   16486:	0003      	movs	r3, r0
   16488:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   1648a:	234f      	movs	r3, #79	; 0x4f
   1648c:	18fb      	adds	r3, r7, r3
   1648e:	781b      	ldrb	r3, [r3, #0]
   16490:	2b05      	cmp	r3, #5
   16492:	d0ee      	beq.n	16472 <writeFWStat+0x86>
	//uint8_t read_buffer[NVMCTRL_PAGE_SIZE]={0};
	//do
	//{
		//error_code = nvm_read_buffer(FW_STAT_ADDRESS, read_buffer, NVMCTRL_PAGE_SIZE);	
	//} while (error_code == STATUS_BUSY);
}
   16494:	46c0      	nop			; (mov r8, r8)
   16496:	46bd      	mov	sp, r7
   16498:	b015      	add	sp, #84	; 0x54
   1649a:	bd90      	pop	{r4, r7, pc}
   1649c:	000184d1 	.word	0x000184d1
   164a0:	00012075 	.word	0x00012075
   164a4:	00011e2d 	.word	0x00011e2d

000164a8 <configure_port_pins>:
void configure_port_pins(void)
{
   164a8:	b580      	push	{r7, lr}
   164aa:	b082      	sub	sp, #8
   164ac:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   164ae:	1d3b      	adds	r3, r7, #4
   164b0:	0018      	movs	r0, r3
   164b2:	4b0b      	ldr	r3, [pc, #44]	; (164e0 <configure_port_pins+0x38>)
   164b4:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   164b6:	1d3b      	adds	r3, r7, #4
   164b8:	2201      	movs	r2, #1
   164ba:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
   164bc:	1d3b      	adds	r3, r7, #4
   164be:	0019      	movs	r1, r3
   164c0:	2017      	movs	r0, #23
   164c2:	4b08      	ldr	r3, [pc, #32]	; (164e4 <configure_port_pins+0x3c>)
   164c4:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
   164c6:	1d3b      	adds	r3, r7, #4
   164c8:	2200      	movs	r2, #0
   164ca:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(B1, &config_port_pin);
   164cc:	1d3b      	adds	r3, r7, #4
   164ce:	0019      	movs	r1, r3
   164d0:	2037      	movs	r0, #55	; 0x37
   164d2:	4b04      	ldr	r3, [pc, #16]	; (164e4 <configure_port_pins+0x3c>)
   164d4:	4798      	blx	r3
}
   164d6:	46c0      	nop			; (mov r8, r8)
   164d8:	46bd      	mov	sp, r7
   164da:	b002      	add	sp, #8
   164dc:	bd80      	pop	{r7, pc}
   164de:	46c0      	nop			; (mov r8, r8)
   164e0:	00015761 	.word	0x00015761
   164e4:	00012145 	.word	0x00012145

000164e8 <configure_spi_flash>:

static void configure_spi_flash()
{
   164e8:	b580      	push	{r7, lr}
   164ea:	b090      	sub	sp, #64	; 0x40
   164ec:	af00      	add	r7, sp, #0
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	spi_get_config_defaults(&at25dfx_spi_config);
   164ee:	1d3b      	adds	r3, r7, #4
   164f0:	0018      	movs	r0, r3
   164f2:	4b19      	ldr	r3, [pc, #100]	; (16558 <configure_spi_flash+0x70>)
   164f4:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
   164f6:	1d3b      	adds	r3, r7, #4
   164f8:	4a18      	ldr	r2, [pc, #96]	; (1655c <configure_spi_flash+0x74>)
   164fa:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
   164fc:	1d3b      	adds	r3, r7, #4
   164fe:	2280      	movs	r2, #128	; 0x80
   16500:	0252      	lsls	r2, r2, #9
   16502:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
   16504:	1d3b      	adds	r3, r7, #4
   16506:	4a16      	ldr	r2, [pc, #88]	; (16560 <configure_spi_flash+0x78>)
   16508:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
   1650a:	1d3b      	adds	r3, r7, #4
   1650c:	2201      	movs	r2, #1
   1650e:	4252      	negs	r2, r2
   16510:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
   16512:	1d3b      	adds	r3, r7, #4
   16514:	4a13      	ldr	r2, [pc, #76]	; (16564 <configure_spi_flash+0x7c>)
   16516:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
   16518:	1d3b      	adds	r3, r7, #4
   1651a:	4a13      	ldr	r2, [pc, #76]	; (16568 <configure_spi_flash+0x80>)
   1651c:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
   1651e:	1d3a      	adds	r2, r7, #4
   16520:	4912      	ldr	r1, [pc, #72]	; (1656c <configure_spi_flash+0x84>)
   16522:	4b13      	ldr	r3, [pc, #76]	; (16570 <configure_spi_flash+0x88>)
   16524:	0018      	movs	r0, r3
   16526:	4b13      	ldr	r3, [pc, #76]	; (16574 <configure_spi_flash+0x8c>)
   16528:	4798      	blx	r3
	spi_enable(&at25dfx_spi);
   1652a:	4b11      	ldr	r3, [pc, #68]	; (16570 <configure_spi_flash+0x88>)
   1652c:	0018      	movs	r0, r3
   1652e:	4b12      	ldr	r3, [pc, #72]	; (16578 <configure_spi_flash+0x90>)
   16530:	4798      	blx	r3
	
	at25dfx_chip_config.type = AT25DFX_MEM_TYPE;
   16532:	233c      	movs	r3, #60	; 0x3c
   16534:	18fb      	adds	r3, r7, r3
   16536:	2204      	movs	r2, #4
   16538:	701a      	strb	r2, [r3, #0]
	at25dfx_chip_config.cs_pin = AT25DFX_CS;
   1653a:	233c      	movs	r3, #60	; 0x3c
   1653c:	18fb      	adds	r3, r7, r3
   1653e:	2207      	movs	r2, #7
   16540:	705a      	strb	r2, [r3, #1]
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
   16542:	233c      	movs	r3, #60	; 0x3c
   16544:	18fa      	adds	r2, r7, r3
   16546:	490a      	ldr	r1, [pc, #40]	; (16570 <configure_spi_flash+0x88>)
   16548:	4b0c      	ldr	r3, [pc, #48]	; (1657c <configure_spi_flash+0x94>)
   1654a:	0018      	movs	r0, r3
   1654c:	4b0c      	ldr	r3, [pc, #48]	; (16580 <configure_spi_flash+0x98>)
   1654e:	4798      	blx	r3
}
   16550:	46c0      	nop			; (mov r8, r8)
   16552:	46bd      	mov	sp, r7
   16554:	b010      	add	sp, #64	; 0x40
   16556:	bd80      	pop	{r7, pc}
   16558:	000158d5 	.word	0x000158d5
   1655c:	0001d4c0 	.word	0x0001d4c0
   16560:	00100002 	.word	0x00100002
   16564:	00120002 	.word	0x00120002
   16568:	00130002 	.word	0x00130002
   1656c:	42000c00 	.word	0x42000c00
   16570:	20000e5c 	.word	0x20000e5c
   16574:	00012e15 	.word	0x00012e15
   16578:	00015959 	.word	0x00015959
   1657c:	20000d14 	.word	0x20000d14
   16580:	000159a9 	.word	0x000159a9

00016584 <configure_timer>:

//Http downloader source code

static void configure_timer(void)
{
   16584:	b580      	push	{r7, lr}
   16586:	b082      	sub	sp, #8
   16588:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
   1658a:	1d3b      	adds	r3, r7, #4
   1658c:	0018      	movs	r0, r3
   1658e:	4b08      	ldr	r3, [pc, #32]	; (165b0 <configure_timer+0x2c>)
   16590:	4798      	blx	r3

	sw_timer_init(&swt_module_inst_mqtt, &swt_conf);
   16592:	1d3a      	adds	r2, r7, #4
   16594:	4b07      	ldr	r3, [pc, #28]	; (165b4 <configure_timer+0x30>)
   16596:	0011      	movs	r1, r2
   16598:	0018      	movs	r0, r3
   1659a:	4b07      	ldr	r3, [pc, #28]	; (165b8 <configure_timer+0x34>)
   1659c:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst_mqtt);
   1659e:	4b05      	ldr	r3, [pc, #20]	; (165b4 <configure_timer+0x30>)
   165a0:	0018      	movs	r0, r3
   165a2:	4b06      	ldr	r3, [pc, #24]	; (165bc <configure_timer+0x38>)
   165a4:	4798      	blx	r3
}
   165a6:	46c0      	nop			; (mov r8, r8)
   165a8:	46bd      	mov	sp, r7
   165aa:	b002      	add	sp, #8
   165ac:	bd80      	pop	{r7, pc}
   165ae:	46c0      	nop			; (mov r8, r8)
   165b0:	0001095d 	.word	0x0001095d
   165b4:	200004bc 	.word	0x200004bc
   165b8:	00010981 	.word	0x00010981
   165bc:	00010a6d 	.word	0x00010a6d

000165c0 <init_state>:

static void init_state(void)
{
   165c0:	b580      	push	{r7, lr}
   165c2:	af00      	add	r7, sp, #0
	down_state = NOT_READY;
   165c4:	4b02      	ldr	r3, [pc, #8]	; (165d0 <init_state+0x10>)
   165c6:	2200      	movs	r2, #0
   165c8:	701a      	strb	r2, [r3, #0]
}
   165ca:	46c0      	nop			; (mov r8, r8)
   165cc:	46bd      	mov	sp, r7
   165ce:	bd80      	pop	{r7, pc}
   165d0:	2000013c 	.word	0x2000013c

000165d4 <clear_state>:

static void clear_state(download_state mask)
{
   165d4:	b580      	push	{r7, lr}
   165d6:	b082      	sub	sp, #8
   165d8:	af00      	add	r7, sp, #0
   165da:	0002      	movs	r2, r0
   165dc:	1dfb      	adds	r3, r7, #7
   165de:	701a      	strb	r2, [r3, #0]
	down_state &= ~mask;
   165e0:	1dfb      	adds	r3, r7, #7
   165e2:	781b      	ldrb	r3, [r3, #0]
   165e4:	b25b      	sxtb	r3, r3
   165e6:	43db      	mvns	r3, r3
   165e8:	b25b      	sxtb	r3, r3
   165ea:	4a06      	ldr	r2, [pc, #24]	; (16604 <clear_state+0x30>)
   165ec:	7812      	ldrb	r2, [r2, #0]
   165ee:	b252      	sxtb	r2, r2
   165f0:	4013      	ands	r3, r2
   165f2:	b25b      	sxtb	r3, r3
   165f4:	b2da      	uxtb	r2, r3
   165f6:	4b03      	ldr	r3, [pc, #12]	; (16604 <clear_state+0x30>)
   165f8:	701a      	strb	r2, [r3, #0]
}
   165fa:	46c0      	nop			; (mov r8, r8)
   165fc:	46bd      	mov	sp, r7
   165fe:	b002      	add	sp, #8
   16600:	bd80      	pop	{r7, pc}
   16602:	46c0      	nop			; (mov r8, r8)
   16604:	2000013c 	.word	0x2000013c

00016608 <add_state>:

static void add_state(download_state mask)
{
   16608:	b580      	push	{r7, lr}
   1660a:	b082      	sub	sp, #8
   1660c:	af00      	add	r7, sp, #0
   1660e:	0002      	movs	r2, r0
   16610:	1dfb      	adds	r3, r7, #7
   16612:	701a      	strb	r2, [r3, #0]
	down_state |= mask;
   16614:	4b05      	ldr	r3, [pc, #20]	; (1662c <add_state+0x24>)
   16616:	781a      	ldrb	r2, [r3, #0]
   16618:	1dfb      	adds	r3, r7, #7
   1661a:	781b      	ldrb	r3, [r3, #0]
   1661c:	4313      	orrs	r3, r2
   1661e:	b2da      	uxtb	r2, r3
   16620:	4b02      	ldr	r3, [pc, #8]	; (1662c <add_state+0x24>)
   16622:	701a      	strb	r2, [r3, #0]
}
   16624:	46c0      	nop			; (mov r8, r8)
   16626:	46bd      	mov	sp, r7
   16628:	b002      	add	sp, #8
   1662a:	bd80      	pop	{r7, pc}
   1662c:	2000013c 	.word	0x2000013c

00016630 <is_state_set>:

static inline bool is_state_set(download_state mask)
{
   16630:	b580      	push	{r7, lr}
   16632:	b082      	sub	sp, #8
   16634:	af00      	add	r7, sp, #0
   16636:	0002      	movs	r2, r0
   16638:	1dfb      	adds	r3, r7, #7
   1663a:	701a      	strb	r2, [r3, #0]
	return ((down_state & mask) != 0);
   1663c:	4b06      	ldr	r3, [pc, #24]	; (16658 <is_state_set+0x28>)
   1663e:	781b      	ldrb	r3, [r3, #0]
   16640:	1dfa      	adds	r2, r7, #7
   16642:	7812      	ldrb	r2, [r2, #0]
   16644:	4013      	ands	r3, r2
   16646:	b2db      	uxtb	r3, r3
   16648:	1e5a      	subs	r2, r3, #1
   1664a:	4193      	sbcs	r3, r2
   1664c:	b2db      	uxtb	r3, r3
}
   1664e:	0018      	movs	r0, r3
   16650:	46bd      	mov	sp, r7
   16652:	b002      	add	sp, #8
   16654:	bd80      	pop	{r7, pc}
   16656:	46c0      	nop			; (mov r8, r8)
   16658:	2000013c 	.word	0x2000013c

0001665c <write_spi_flash_frm_buf>:

void write_spi_flash_frm_buf(uint32 len){
   1665c:	b590      	push	{r4, r7, lr}
   1665e:	b083      	sub	sp, #12
   16660:	af00      	add	r7, sp, #0
   16662:	6078      	str	r0, [r7, #4]
	at25dfx_chip_wake(&at25dfx_chip);
   16664:	4b13      	ldr	r3, [pc, #76]	; (166b4 <write_spi_flash_frm_buf+0x58>)
   16666:	0018      	movs	r0, r3
   16668:	4b13      	ldr	r3, [pc, #76]	; (166b8 <write_spi_flash_frm_buf+0x5c>)
   1666a:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
   1666c:	4b11      	ldr	r3, [pc, #68]	; (166b4 <write_spi_flash_frm_buf+0x58>)
   1666e:	0018      	movs	r0, r3
   16670:	4b12      	ldr	r3, [pc, #72]	; (166bc <write_spi_flash_frm_buf+0x60>)
   16672:	4798      	blx	r3
   16674:	1e03      	subs	r3, r0, #0
   16676:	d003      	beq.n	16680 <write_spi_flash_frm_buf+0x24>
		// Handle missing or non-responsive device
		printf("Chip didnt wake \r\n");
   16678:	4b11      	ldr	r3, [pc, #68]	; (166c0 <write_spi_flash_frm_buf+0x64>)
   1667a:	0018      	movs	r0, r3
   1667c:	4b11      	ldr	r3, [pc, #68]	; (166c4 <write_spi_flash_frm_buf+0x68>)
   1667e:	4798      	blx	r3
	}
	
	//at25dfx_chip_set_sector_protect(&at25dfx_chip, flash_addr, false);				// unprotect sector
	
	at25dfx_chip_write_buffer(&at25dfx_chip, flash_addr, http_buf + http_buf_read_ptr, len);	// write buffer
   16680:	4b11      	ldr	r3, [pc, #68]	; (166c8 <write_spi_flash_frm_buf+0x6c>)
   16682:	6819      	ldr	r1, [r3, #0]
   16684:	4b11      	ldr	r3, [pc, #68]	; (166cc <write_spi_flash_frm_buf+0x70>)
   16686:	681a      	ldr	r2, [r3, #0]
   16688:	4b11      	ldr	r3, [pc, #68]	; (166d0 <write_spi_flash_frm_buf+0x74>)
   1668a:	18d2      	adds	r2, r2, r3
   1668c:	687b      	ldr	r3, [r7, #4]
   1668e:	b29b      	uxth	r3, r3
   16690:	4808      	ldr	r0, [pc, #32]	; (166b4 <write_spi_flash_frm_buf+0x58>)
   16692:	4c10      	ldr	r4, [pc, #64]	; (166d4 <write_spi_flash_frm_buf+0x78>)
   16694:	47a0      	blx	r4
	//at25dfx_chip_read_buffer(&at25dfx_chip, flash_addr, read_buffer, len);		// read same location
	//at25dfx_chip_read_buffer(&at25dfx_chip, (flash_addr+0x0020), read_buffer, AT25DFX_BUFFER_SIZE);		// read same location
	//at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);				// protect sector
	at25dfx_chip_sleep(&at25dfx_chip);											// back to sleep
   16696:	4b07      	ldr	r3, [pc, #28]	; (166b4 <write_spi_flash_frm_buf+0x58>)
   16698:	0018      	movs	r0, r3
   1669a:	4b0f      	ldr	r3, [pc, #60]	; (166d8 <write_spi_flash_frm_buf+0x7c>)
   1669c:	4798      	blx	r3
	flash_addr = flash_addr + len;
   1669e:	4b0a      	ldr	r3, [pc, #40]	; (166c8 <write_spi_flash_frm_buf+0x6c>)
   166a0:	681a      	ldr	r2, [r3, #0]
   166a2:	687b      	ldr	r3, [r7, #4]
   166a4:	18d2      	adds	r2, r2, r3
   166a6:	4b08      	ldr	r3, [pc, #32]	; (166c8 <write_spi_flash_frm_buf+0x6c>)
   166a8:	601a      	str	r2, [r3, #0]
}
   166aa:	46c0      	nop			; (mov r8, r8)
   166ac:	46bd      	mov	sp, r7
   166ae:	b003      	add	sp, #12
   166b0:	bd90      	pop	{r4, r7, pc}
   166b2:	46c0      	nop			; (mov r8, r8)
   166b4:	20000d14 	.word	0x20000d14
   166b8:	00011a71 	.word	0x00011a71
   166bc:	000115e1 	.word	0x000115e1
   166c0:	0001b1c4 	.word	0x0001b1c4
   166c4:	00018739 	.word	0x00018739
   166c8:	200004b8 	.word	0x200004b8
   166cc:	20000138 	.word	0x20000138
   166d0:	20000514 	.word	0x20000514
   166d4:	0001168d 	.word	0x0001168d
   166d8:	000119e5 	.word	0x000119e5

000166dc <start_download>:

static void start_download(void)
{
   166dc:	b590      	push	{r4, r7, lr}
   166de:	b083      	sub	sp, #12
   166e0:	af02      	add	r7, sp, #8
	if (!is_state_set(STORAGE_READY)) {
		printf("start_download: Flash not initialized.\r\n");
		return;
	}
	*/
	if (!is_state_set(WIFI_CONNECTED)) {
   166e2:	2002      	movs	r0, #2
   166e4:	4b22      	ldr	r3, [pc, #136]	; (16770 <start_download+0x94>)
   166e6:	4798      	blx	r3
   166e8:	0003      	movs	r3, r0
   166ea:	001a      	movs	r2, r3
   166ec:	2301      	movs	r3, #1
   166ee:	4053      	eors	r3, r2
   166f0:	b2db      	uxtb	r3, r3
   166f2:	2b00      	cmp	r3, #0
   166f4:	d004      	beq.n	16700 <start_download+0x24>
		printf("start_download: Wi-Fi is not connected.\r\n");
   166f6:	4b1f      	ldr	r3, [pc, #124]	; (16774 <start_download+0x98>)
   166f8:	0018      	movs	r0, r3
   166fa:	4b1f      	ldr	r3, [pc, #124]	; (16778 <start_download+0x9c>)
   166fc:	4798      	blx	r3
		return;
   166fe:	e033      	b.n	16768 <start_download+0x8c>
	}

	if (is_state_set(GET_REQUESTED)) {
   16700:	2004      	movs	r0, #4
   16702:	4b1b      	ldr	r3, [pc, #108]	; (16770 <start_download+0x94>)
   16704:	4798      	blx	r3
   16706:	1e03      	subs	r3, r0, #0
   16708:	d004      	beq.n	16714 <start_download+0x38>
		printf("start_download: request is sent already.\r\n");
   1670a:	4b1c      	ldr	r3, [pc, #112]	; (1677c <start_download+0xa0>)
   1670c:	0018      	movs	r0, r3
   1670e:	4b1a      	ldr	r3, [pc, #104]	; (16778 <start_download+0x9c>)
   16710:	4798      	blx	r3
		return;
   16712:	e029      	b.n	16768 <start_download+0x8c>
	}

	if (is_state_set(DOWNLOADING)) {
   16714:	2008      	movs	r0, #8
   16716:	4b16      	ldr	r3, [pc, #88]	; (16770 <start_download+0x94>)
   16718:	4798      	blx	r3
   1671a:	1e03      	subs	r3, r0, #0
   1671c:	d004      	beq.n	16728 <start_download+0x4c>
		printf("start_download: running download already.\r\n");
   1671e:	4b18      	ldr	r3, [pc, #96]	; (16780 <start_download+0xa4>)
   16720:	0018      	movs	r0, r3
   16722:	4b15      	ldr	r3, [pc, #84]	; (16778 <start_download+0x9c>)
   16724:	4798      	blx	r3
		return;
   16726:	e01f      	b.n	16768 <start_download+0x8c>
	}

	/* Send the HTTP request. */
	if(download_CRC == false){
   16728:	4b16      	ldr	r3, [pc, #88]	; (16784 <start_download+0xa8>)
   1672a:	781b      	ldrb	r3, [r3, #0]
   1672c:	2201      	movs	r2, #1
   1672e:	4053      	eors	r3, r2
   16730:	b2db      	uxtb	r3, r3
   16732:	2b00      	cmp	r3, #0
   16734:	d00c      	beq.n	16750 <start_download+0x74>
		printf("start_download: sending HTTP request...\r\n");
   16736:	4b14      	ldr	r3, [pc, #80]	; (16788 <start_download+0xac>)
   16738:	0018      	movs	r0, r3
   1673a:	4b0f      	ldr	r3, [pc, #60]	; (16778 <start_download+0x9c>)
   1673c:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   1673e:	4913      	ldr	r1, [pc, #76]	; (1678c <start_download+0xb0>)
   16740:	4813      	ldr	r0, [pc, #76]	; (16790 <start_download+0xb4>)
   16742:	2300      	movs	r3, #0
   16744:	9300      	str	r3, [sp, #0]
   16746:	2300      	movs	r3, #0
   16748:	2201      	movs	r2, #1
   1674a:	4c12      	ldr	r4, [pc, #72]	; (16794 <start_download+0xb8>)
   1674c:	47a0      	blx	r4
   1674e:	e00b      	b.n	16768 <start_download+0x8c>
	} else{
		printf("start_download CRC: sending HTTP request...\r\n");
   16750:	4b11      	ldr	r3, [pc, #68]	; (16798 <start_download+0xbc>)
   16752:	0018      	movs	r0, r3
   16754:	4b08      	ldr	r3, [pc, #32]	; (16778 <start_download+0x9c>)
   16756:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_CRC_URL, HTTP_METHOD_GET, NULL, NULL);
   16758:	4910      	ldr	r1, [pc, #64]	; (1679c <start_download+0xc0>)
   1675a:	480d      	ldr	r0, [pc, #52]	; (16790 <start_download+0xb4>)
   1675c:	2300      	movs	r3, #0
   1675e:	9300      	str	r3, [sp, #0]
   16760:	2300      	movs	r3, #0
   16762:	2201      	movs	r2, #1
   16764:	4c0b      	ldr	r4, [pc, #44]	; (16794 <start_download+0xb8>)
   16766:	47a0      	blx	r4
	}
	
}
   16768:	46bd      	mov	sp, r7
   1676a:	b001      	add	sp, #4
   1676c:	bd90      	pop	{r4, r7, pc}
   1676e:	46c0      	nop			; (mov r8, r8)
   16770:	00016631 	.word	0x00016631
   16774:	0001b1d8 	.word	0x0001b1d8
   16778:	00018739 	.word	0x00018739
   1677c:	0001b204 	.word	0x0001b204
   16780:	0001b230 	.word	0x0001b230
   16784:	20000131 	.word	0x20000131
   16788:	0001b25c 	.word	0x0001b25c
   1678c:	0001b288 	.word	0x0001b288
   16790:	20000d74 	.word	0x20000d74
   16794:	0000f495 	.word	0x0000f495
   16798:	0001b2bc 	.word	0x0001b2bc
   1679c:	0001b2ec 	.word	0x0001b2ec

000167a0 <http_client_callback>:

static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   167a0:	b580      	push	{r7, lr}
   167a2:	b088      	sub	sp, #32
   167a4:	af00      	add	r7, sp, #0
   167a6:	60f8      	str	r0, [r7, #12]
   167a8:	60b9      	str	r1, [r7, #8]
   167aa:	607a      	str	r2, [r7, #4]
	switch (type) {
   167ac:	68bb      	ldr	r3, [r7, #8]
   167ae:	2b04      	cmp	r3, #4
   167b0:	d900      	bls.n	167b4 <http_client_callback+0x14>
   167b2:	e186      	b.n	16ac2 <http_client_callback+0x322>
   167b4:	68bb      	ldr	r3, [r7, #8]
   167b6:	009a      	lsls	r2, r3, #2
   167b8:	4bc3      	ldr	r3, [pc, #780]	; (16ac8 <http_client_callback+0x328>)
   167ba:	18d3      	adds	r3, r2, r3
   167bc:	681b      	ldr	r3, [r3, #0]
   167be:	469f      	mov	pc, r3
	case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
		printf("http_client_callback: HTTP client socket connected.\r\n");
   167c0:	4bc2      	ldr	r3, [pc, #776]	; (16acc <http_client_callback+0x32c>)
   167c2:	0018      	movs	r0, r3
   167c4:	4bc2      	ldr	r3, [pc, #776]	; (16ad0 <http_client_callback+0x330>)
   167c6:	4798      	blx	r3
		break;
   167c8:	e17b      	b.n	16ac2 <http_client_callback+0x322>

	case HTTP_CLIENT_CALLBACK_REQUESTED:
		printf("http_client_callback: request completed.\r\n");
   167ca:	4bc2      	ldr	r3, [pc, #776]	; (16ad4 <http_client_callback+0x334>)
   167cc:	0018      	movs	r0, r3
   167ce:	4bc0      	ldr	r3, [pc, #768]	; (16ad0 <http_client_callback+0x330>)
   167d0:	4798      	blx	r3
		add_state(GET_REQUESTED);
   167d2:	2004      	movs	r0, #4
   167d4:	4bc0      	ldr	r3, [pc, #768]	; (16ad8 <http_client_callback+0x338>)
   167d6:	4798      	blx	r3
		break;
   167d8:	e173      	b.n	16ac2 <http_client_callback+0x322>

	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
		printf("http_client_callback: received response %u data size %u\r\n",
				(unsigned int)data->recv_response.response_code,
   167da:	687b      	ldr	r3, [r7, #4]
   167dc:	881b      	ldrh	r3, [r3, #0]
		printf("http_client_callback: request completed.\r\n");
		add_state(GET_REQUESTED);
		break;

	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
		printf("http_client_callback: received response %u data size %u\r\n",
   167de:	0019      	movs	r1, r3
				(unsigned int)data->recv_response.response_code,
				(unsigned int)data->recv_response.content_length);
   167e0:	687b      	ldr	r3, [r7, #4]
   167e2:	685a      	ldr	r2, [r3, #4]
		printf("http_client_callback: request completed.\r\n");
		add_state(GET_REQUESTED);
		break;

	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
		printf("http_client_callback: received response %u data size %u\r\n",
   167e4:	4bbd      	ldr	r3, [pc, #756]	; (16adc <http_client_callback+0x33c>)
   167e6:	0018      	movs	r0, r3
   167e8:	4bbd      	ldr	r3, [pc, #756]	; (16ae0 <http_client_callback+0x340>)
   167ea:	4798      	blx	r3
				(unsigned int)data->recv_response.response_code,
				(unsigned int)data->recv_response.content_length);
		if ((unsigned int)data->recv_response.response_code == 200) {
   167ec:	687b      	ldr	r3, [r7, #4]
   167ee:	881b      	ldrh	r3, [r3, #0]
   167f0:	2bc8      	cmp	r3, #200	; 0xc8
   167f2:	d003      	beq.n	167fc <http_client_callback+0x5c>
		} 
		else {
			add_state(CANCELED);
   167f4:	2020      	movs	r0, #32
   167f6:	4bb8      	ldr	r3, [pc, #736]	; (16ad8 <http_client_callback+0x338>)
   167f8:	4798      	blx	r3
			return;
   167fa:	e162      	b.n	16ac2 <http_client_callback+0x322>
		}
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   167fc:	687b      	ldr	r3, [r7, #4]
   167fe:	685a      	ldr	r2, [r3, #4]
   16800:	2380      	movs	r3, #128	; 0x80
   16802:	00db      	lsls	r3, r3, #3
   16804:	429a      	cmp	r2, r3
   16806:	d900      	bls.n	1680a <http_client_callback+0x6a>
   16808:	e156      	b.n	16ab8 <http_client_callback+0x318>
			//***store_file_packet(data->recv_response.content, data->recv_response.content_length);
			
			//This is run only when file size < MAIN_BUFFER_MAX_SIZE which we assume never happens!
			printf("Callback: CRC download......\r\n");
   1680a:	4bb6      	ldr	r3, [pc, #728]	; (16ae4 <http_client_callback+0x344>)
   1680c:	0018      	movs	r0, r3
   1680e:	4bb0      	ldr	r3, [pc, #704]	; (16ad0 <http_client_callback+0x330>)
   16810:	4798      	blx	r3
			dlCRC = *(uint32_t *)data->recv_response.content;
   16812:	687b      	ldr	r3, [r7, #4]
   16814:	689b      	ldr	r3, [r3, #8]
   16816:	681a      	ldr	r2, [r3, #0]
   16818:	4bb3      	ldr	r3, [pc, #716]	; (16ae8 <http_client_callback+0x348>)
   1681a:	601a      	str	r2, [r3, #0]
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
   1681c:	4bb2      	ldr	r3, [pc, #712]	; (16ae8 <http_client_callback+0x348>)
   1681e:	681b      	ldr	r3, [r3, #0]
   16820:	0e1a      	lsrs	r2, r3, #24
                    ((dlCRC<<8)&0xff0000) | // move byte 1 to byte 2
   16822:	4bb1      	ldr	r3, [pc, #708]	; (16ae8 <http_client_callback+0x348>)
   16824:	681b      	ldr	r3, [r3, #0]
   16826:	0219      	lsls	r1, r3, #8
   16828:	23ff      	movs	r3, #255	; 0xff
   1682a:	041b      	lsls	r3, r3, #16
   1682c:	400b      	ands	r3, r1
			//***store_file_packet(data->recv_response.content, data->recv_response.content_length);
			
			//This is run only when file size < MAIN_BUFFER_MAX_SIZE which we assume never happens!
			printf("Callback: CRC download......\r\n");
			dlCRC = *(uint32_t *)data->recv_response.content;
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
   1682e:	431a      	orrs	r2, r3
                    ((dlCRC<<8)&0xff0000) | // move byte 1 to byte 2
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
   16830:	4bad      	ldr	r3, [pc, #692]	; (16ae8 <http_client_callback+0x348>)
   16832:	681b      	ldr	r3, [r3, #0]
   16834:	0a19      	lsrs	r1, r3, #8
   16836:	23ff      	movs	r3, #255	; 0xff
   16838:	021b      	lsls	r3, r3, #8
   1683a:	400b      	ands	r3, r1
			
			//This is run only when file size < MAIN_BUFFER_MAX_SIZE which we assume never happens!
			printf("Callback: CRC download......\r\n");
			dlCRC = *(uint32_t *)data->recv_response.content;
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
                    ((dlCRC<<8)&0xff0000) | // move byte 1 to byte 2
   1683c:	431a      	orrs	r2, r3
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
                    ((dlCRC<<24)&0xff000000); // byte 0 to byte 3
   1683e:	4baa      	ldr	r3, [pc, #680]	; (16ae8 <http_client_callback+0x348>)
   16840:	681b      	ldr	r3, [r3, #0]
   16842:	061b      	lsls	r3, r3, #24
			//This is run only when file size < MAIN_BUFFER_MAX_SIZE which we assume never happens!
			printf("Callback: CRC download......\r\n");
			dlCRC = *(uint32_t *)data->recv_response.content;
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
                    ((dlCRC<<8)&0xff0000) | // move byte 1 to byte 2
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
   16844:	431a      	orrs	r2, r3
			//***store_file_packet(data->recv_response.content, data->recv_response.content_length);
			
			//This is run only when file size < MAIN_BUFFER_MAX_SIZE which we assume never happens!
			printf("Callback: CRC download......\r\n");
			dlCRC = *(uint32_t *)data->recv_response.content;
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
   16846:	4ba8      	ldr	r3, [pc, #672]	; (16ae8 <http_client_callback+0x348>)
   16848:	601a      	str	r2, [r3, #0]
                    ((dlCRC<<8)&0xff0000) | // move byte 1 to byte 2
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
                    ((dlCRC<<24)&0xff000000); // byte 0 to byte 3
			printf("Received %x\r\n", (uint32_t)dlCRC);
   1684a:	4ba7      	ldr	r3, [pc, #668]	; (16ae8 <http_client_callback+0x348>)
   1684c:	681a      	ldr	r2, [r3, #0]
   1684e:	4ba7      	ldr	r3, [pc, #668]	; (16aec <http_client_callback+0x34c>)
   16850:	0011      	movs	r1, r2
   16852:	0018      	movs	r0, r3
   16854:	4ba2      	ldr	r3, [pc, #648]	; (16ae0 <http_client_callback+0x340>)
   16856:	4798      	blx	r3
			
			add_state(COMPLETED);
   16858:	2010      	movs	r0, #16
   1685a:	4b9f      	ldr	r3, [pc, #636]	; (16ad8 <http_client_callback+0x338>)
   1685c:	4798      	blx	r3
		}
		break;
   1685e:	e12b      	b.n	16ab8 <http_client_callback+0x318>

	case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
		printf("http_client_callback_CHUNKED DATA: received response data size %u\r\n",
				(unsigned int)data->recv_chunked_data.length);
   16860:	687b      	ldr	r3, [r7, #4]
   16862:	681a      	ldr	r2, [r3, #0]
			add_state(COMPLETED);
		}
		break;

	case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
		printf("http_client_callback_CHUNKED DATA: received response data size %u\r\n",
   16864:	4ba2      	ldr	r3, [pc, #648]	; (16af0 <http_client_callback+0x350>)
   16866:	0011      	movs	r1, r2
   16868:	0018      	movs	r0, r3
   1686a:	4b9d      	ldr	r3, [pc, #628]	; (16ae0 <http_client_callback+0x340>)
   1686c:	4798      	blx	r3
				(unsigned int)data->recv_chunked_data.length);
		// Calc CRC for this chunk
		if (firstCRC) {
   1686e:	4ba1      	ldr	r3, [pc, #644]	; (16af4 <http_client_callback+0x354>)
   16870:	781b      	ldrb	r3, [r3, #0]
   16872:	2b00      	cmp	r3, #0
   16874:	d013      	beq.n	1689e <http_client_callback+0xfe>
			crc32_calculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
   16876:	687b      	ldr	r3, [r7, #4]
   16878:	6858      	ldr	r0, [r3, #4]
   1687a:	687b      	ldr	r3, [r7, #4]
   1687c:	681b      	ldr	r3, [r3, #0]
   1687e:	4a9e      	ldr	r2, [pc, #632]	; (16af8 <http_client_callback+0x358>)
   16880:	0019      	movs	r1, r3
   16882:	4b9e      	ldr	r3, [pc, #632]	; (16afc <http_client_callback+0x35c>)
   16884:	4798      	blx	r3
			printf("First block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
   16886:	687b      	ldr	r3, [r7, #4]
   16888:	6819      	ldr	r1, [r3, #0]
   1688a:	4b9b      	ldr	r3, [pc, #620]	; (16af8 <http_client_callback+0x358>)
   1688c:	681a      	ldr	r2, [r3, #0]
   1688e:	4b9c      	ldr	r3, [pc, #624]	; (16b00 <http_client_callback+0x360>)
   16890:	0018      	movs	r0, r3
   16892:	4b93      	ldr	r3, [pc, #588]	; (16ae0 <http_client_callback+0x340>)
   16894:	4798      	blx	r3
			firstCRC = false;
   16896:	4b97      	ldr	r3, [pc, #604]	; (16af4 <http_client_callback+0x354>)
   16898:	2200      	movs	r2, #0
   1689a:	701a      	strb	r2, [r3, #0]
   1689c:	e00f      	b.n	168be <http_client_callback+0x11e>
		}
		else {
			crc32_recalculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
   1689e:	687b      	ldr	r3, [r7, #4]
   168a0:	6858      	ldr	r0, [r3, #4]
   168a2:	687b      	ldr	r3, [r7, #4]
   168a4:	681b      	ldr	r3, [r3, #0]
   168a6:	4a94      	ldr	r2, [pc, #592]	; (16af8 <http_client_callback+0x358>)
   168a8:	0019      	movs	r1, r3
   168aa:	4b96      	ldr	r3, [pc, #600]	; (16b04 <http_client_callback+0x364>)
   168ac:	4798      	blx	r3
			printf("Block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
   168ae:	687b      	ldr	r3, [r7, #4]
   168b0:	6819      	ldr	r1, [r3, #0]
   168b2:	4b91      	ldr	r3, [pc, #580]	; (16af8 <http_client_callback+0x358>)
   168b4:	681a      	ldr	r2, [r3, #0]
   168b6:	4b94      	ldr	r3, [pc, #592]	; (16b08 <http_client_callback+0x368>)
   168b8:	0018      	movs	r0, r3
   168ba:	4b89      	ldr	r3, [pc, #548]	; (16ae0 <http_client_callback+0x340>)
   168bc:	4798      	blx	r3
		}
		
		//***store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
		if (http_buf_write_ptr + data->recv_chunked_data.length > 2048){
   168be:	687b      	ldr	r3, [r7, #4]
   168c0:	681a      	ldr	r2, [r3, #0]
   168c2:	4b92      	ldr	r3, [pc, #584]	; (16b0c <http_client_callback+0x36c>)
   168c4:	681b      	ldr	r3, [r3, #0]
   168c6:	18d2      	adds	r2, r2, r3
   168c8:	2380      	movs	r3, #128	; 0x80
   168ca:	011b      	lsls	r3, r3, #4
   168cc:	429a      	cmp	r2, r3
   168ce:	d92a      	bls.n	16926 <http_client_callback+0x186>
			memcpy_ram2ram(http_buf + http_buf_write_ptr,data->recv_chunked_data.data,(2048-http_buf_write_ptr));
   168d0:	4b8e      	ldr	r3, [pc, #568]	; (16b0c <http_client_callback+0x36c>)
   168d2:	681a      	ldr	r2, [r3, #0]
   168d4:	4b8e      	ldr	r3, [pc, #568]	; (16b10 <http_client_callback+0x370>)
   168d6:	18d0      	adds	r0, r2, r3
   168d8:	687b      	ldr	r3, [r7, #4]
   168da:	6859      	ldr	r1, [r3, #4]
   168dc:	4b8b      	ldr	r3, [pc, #556]	; (16b0c <http_client_callback+0x36c>)
   168de:	681b      	ldr	r3, [r3, #0]
   168e0:	2280      	movs	r2, #128	; 0x80
   168e2:	0112      	lsls	r2, r2, #4
   168e4:	1ad3      	subs	r3, r2, r3
   168e6:	001a      	movs	r2, r3
   168e8:	4b8a      	ldr	r3, [pc, #552]	; (16b14 <http_client_callback+0x374>)
   168ea:	4798      	blx	r3
			memcpy_ram2ram(http_buf, data->recv_chunked_data.data + (2048-http_buf_write_ptr), data->recv_chunked_data.length-(2048-http_buf_write_ptr));
   168ec:	687b      	ldr	r3, [r7, #4]
   168ee:	685a      	ldr	r2, [r3, #4]
   168f0:	4b86      	ldr	r3, [pc, #536]	; (16b0c <http_client_callback+0x36c>)
   168f2:	681b      	ldr	r3, [r3, #0]
   168f4:	2180      	movs	r1, #128	; 0x80
   168f6:	0109      	lsls	r1, r1, #4
   168f8:	1acb      	subs	r3, r1, r3
   168fa:	18d1      	adds	r1, r2, r3
   168fc:	687b      	ldr	r3, [r7, #4]
   168fe:	681a      	ldr	r2, [r3, #0]
   16900:	4b82      	ldr	r3, [pc, #520]	; (16b0c <http_client_callback+0x36c>)
   16902:	681b      	ldr	r3, [r3, #0]
   16904:	18d3      	adds	r3, r2, r3
   16906:	4a84      	ldr	r2, [pc, #528]	; (16b18 <http_client_callback+0x378>)
   16908:	189a      	adds	r2, r3, r2
   1690a:	4b81      	ldr	r3, [pc, #516]	; (16b10 <http_client_callback+0x370>)
   1690c:	0018      	movs	r0, r3
   1690e:	4b81      	ldr	r3, [pc, #516]	; (16b14 <http_client_callback+0x374>)
   16910:	4798      	blx	r3
			http_buf_write_ptr = data->recv_chunked_data.length-(2048-http_buf_write_ptr);
   16912:	687b      	ldr	r3, [r7, #4]
   16914:	681a      	ldr	r2, [r3, #0]
   16916:	4b7d      	ldr	r3, [pc, #500]	; (16b0c <http_client_callback+0x36c>)
   16918:	681b      	ldr	r3, [r3, #0]
   1691a:	18d3      	adds	r3, r2, r3
   1691c:	4a7e      	ldr	r2, [pc, #504]	; (16b18 <http_client_callback+0x378>)
   1691e:	189a      	adds	r2, r3, r2
   16920:	4b7a      	ldr	r3, [pc, #488]	; (16b0c <http_client_callback+0x36c>)
   16922:	601a      	str	r2, [r3, #0]
   16924:	e011      	b.n	1694a <http_client_callback+0x1aa>
		}
		else {
			memcpy_ram2ram(http_buf + http_buf_write_ptr, data->recv_chunked_data.data, data->recv_chunked_data.length);
   16926:	4b79      	ldr	r3, [pc, #484]	; (16b0c <http_client_callback+0x36c>)
   16928:	681a      	ldr	r2, [r3, #0]
   1692a:	4b79      	ldr	r3, [pc, #484]	; (16b10 <http_client_callback+0x370>)
   1692c:	18d0      	adds	r0, r2, r3
   1692e:	687b      	ldr	r3, [r7, #4]
   16930:	6859      	ldr	r1, [r3, #4]
   16932:	687b      	ldr	r3, [r7, #4]
   16934:	681b      	ldr	r3, [r3, #0]
   16936:	001a      	movs	r2, r3
   16938:	4b76      	ldr	r3, [pc, #472]	; (16b14 <http_client_callback+0x374>)
   1693a:	4798      	blx	r3
			http_buf_write_ptr = http_buf_write_ptr + data->recv_chunked_data.length;
   1693c:	687b      	ldr	r3, [r7, #4]
   1693e:	681a      	ldr	r2, [r3, #0]
   16940:	4b72      	ldr	r3, [pc, #456]	; (16b0c <http_client_callback+0x36c>)
   16942:	681b      	ldr	r3, [r3, #0]
   16944:	18d2      	adds	r2, r2, r3
   16946:	4b71      	ldr	r3, [pc, #452]	; (16b0c <http_client_callback+0x36c>)
   16948:	601a      	str	r2, [r3, #0]
		}
		 
		if  (http_buf_write_ptr > http_buf_read_ptr){
   1694a:	4b70      	ldr	r3, [pc, #448]	; (16b0c <http_client_callback+0x36c>)
   1694c:	681a      	ldr	r2, [r3, #0]
   1694e:	4b73      	ldr	r3, [pc, #460]	; (16b1c <http_client_callback+0x37c>)
   16950:	681b      	ldr	r3, [r3, #0]
   16952:	429a      	cmp	r2, r3
   16954:	d920      	bls.n	16998 <http_client_callback+0x1f8>
			uint8 n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
   16956:	4b6d      	ldr	r3, [pc, #436]	; (16b0c <http_client_callback+0x36c>)
   16958:	681a      	ldr	r2, [r3, #0]
   1695a:	4b70      	ldr	r3, [pc, #448]	; (16b1c <http_client_callback+0x37c>)
   1695c:	681b      	ldr	r3, [r3, #0]
   1695e:	1ad3      	subs	r3, r2, r3
   16960:	0a1a      	lsrs	r2, r3, #8
   16962:	2313      	movs	r3, #19
   16964:	18fb      	adds	r3, r7, r3
   16966:	701a      	strb	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
   16968:	2300      	movs	r3, #0
   1696a:	61fb      	str	r3, [r7, #28]
   1696c:	e00d      	b.n	1698a <http_client_callback+0x1ea>
				write_spi_flash_frm_buf(256);
   1696e:	2380      	movs	r3, #128	; 0x80
   16970:	005b      	lsls	r3, r3, #1
   16972:	0018      	movs	r0, r3
   16974:	4b6a      	ldr	r3, [pc, #424]	; (16b20 <http_client_callback+0x380>)
   16976:	4798      	blx	r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
   16978:	4b68      	ldr	r3, [pc, #416]	; (16b1c <http_client_callback+0x37c>)
   1697a:	681b      	ldr	r3, [r3, #0]
   1697c:	1c5a      	adds	r2, r3, #1
   1697e:	32ff      	adds	r2, #255	; 0xff
   16980:	4b66      	ldr	r3, [pc, #408]	; (16b1c <http_client_callback+0x37c>)
   16982:	601a      	str	r2, [r3, #0]
			http_buf_write_ptr = http_buf_write_ptr + data->recv_chunked_data.length;
		}
		 
		if  (http_buf_write_ptr > http_buf_read_ptr){
			uint8 n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
   16984:	69fb      	ldr	r3, [r7, #28]
   16986:	3301      	adds	r3, #1
   16988:	61fb      	str	r3, [r7, #28]
   1698a:	2313      	movs	r3, #19
   1698c:	18fb      	adds	r3, r7, r3
   1698e:	781a      	ldrb	r2, [r3, #0]
   16990:	69fb      	ldr	r3, [r7, #28]
   16992:	429a      	cmp	r2, r3
   16994:	dceb      	bgt.n	1696e <http_client_callback+0x1ce>
   16996:	e048      	b.n	16a2a <http_client_callback+0x28a>
				write_spi_flash_frm_buf(256);
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
		}
		else if (http_buf_write_ptr < http_buf_read_ptr){
   16998:	4b5c      	ldr	r3, [pc, #368]	; (16b0c <http_client_callback+0x36c>)
   1699a:	681a      	ldr	r2, [r3, #0]
   1699c:	4b5f      	ldr	r3, [pc, #380]	; (16b1c <http_client_callback+0x37c>)
   1699e:	681b      	ldr	r3, [r3, #0]
   169a0:	429a      	cmp	r2, r3
   169a2:	d242      	bcs.n	16a2a <http_client_callback+0x28a>
			uint8 n = (2048 - http_buf_read_ptr) / 256;
   169a4:	4b5d      	ldr	r3, [pc, #372]	; (16b1c <http_client_callback+0x37c>)
   169a6:	681b      	ldr	r3, [r3, #0]
   169a8:	2280      	movs	r2, #128	; 0x80
   169aa:	0112      	lsls	r2, r2, #4
   169ac:	1ad3      	subs	r3, r2, r3
   169ae:	0a1a      	lsrs	r2, r3, #8
   169b0:	2312      	movs	r3, #18
   169b2:	18fb      	adds	r3, r7, r3
   169b4:	701a      	strb	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
   169b6:	2300      	movs	r3, #0
   169b8:	61bb      	str	r3, [r7, #24]
   169ba:	e00d      	b.n	169d8 <http_client_callback+0x238>
				write_spi_flash_frm_buf(256);
   169bc:	2380      	movs	r3, #128	; 0x80
   169be:	005b      	lsls	r3, r3, #1
   169c0:	0018      	movs	r0, r3
   169c2:	4b57      	ldr	r3, [pc, #348]	; (16b20 <http_client_callback+0x380>)
   169c4:	4798      	blx	r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
   169c6:	4b55      	ldr	r3, [pc, #340]	; (16b1c <http_client_callback+0x37c>)
   169c8:	681b      	ldr	r3, [r3, #0]
   169ca:	1c5a      	adds	r2, r3, #1
   169cc:	32ff      	adds	r2, #255	; 0xff
   169ce:	4b53      	ldr	r3, [pc, #332]	; (16b1c <http_client_callback+0x37c>)
   169d0:	601a      	str	r2, [r3, #0]
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
		}
		else if (http_buf_write_ptr < http_buf_read_ptr){
			uint8 n = (2048 - http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
   169d2:	69bb      	ldr	r3, [r7, #24]
   169d4:	3301      	adds	r3, #1
   169d6:	61bb      	str	r3, [r7, #24]
   169d8:	2312      	movs	r3, #18
   169da:	18fb      	adds	r3, r7, r3
   169dc:	781a      	ldrb	r2, [r3, #0]
   169de:	69bb      	ldr	r3, [r7, #24]
   169e0:	429a      	cmp	r2, r3
   169e2:	dceb      	bgt.n	169bc <http_client_callback+0x21c>
				write_spi_flash_frm_buf(256);
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
			http_buf_read_ptr = 0;
   169e4:	4b4d      	ldr	r3, [pc, #308]	; (16b1c <http_client_callback+0x37c>)
   169e6:	2200      	movs	r2, #0
   169e8:	601a      	str	r2, [r3, #0]
			n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
   169ea:	4b48      	ldr	r3, [pc, #288]	; (16b0c <http_client_callback+0x36c>)
   169ec:	681a      	ldr	r2, [r3, #0]
   169ee:	4b4b      	ldr	r3, [pc, #300]	; (16b1c <http_client_callback+0x37c>)
   169f0:	681b      	ldr	r3, [r3, #0]
   169f2:	1ad3      	subs	r3, r2, r3
   169f4:	0a1a      	lsrs	r2, r3, #8
   169f6:	2312      	movs	r3, #18
   169f8:	18fb      	adds	r3, r7, r3
   169fa:	701a      	strb	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
   169fc:	2300      	movs	r3, #0
   169fe:	617b      	str	r3, [r7, #20]
   16a00:	e00d      	b.n	16a1e <http_client_callback+0x27e>
				write_spi_flash_frm_buf(256);
   16a02:	2380      	movs	r3, #128	; 0x80
   16a04:	005b      	lsls	r3, r3, #1
   16a06:	0018      	movs	r0, r3
   16a08:	4b45      	ldr	r3, [pc, #276]	; (16b20 <http_client_callback+0x380>)
   16a0a:	4798      	blx	r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
   16a0c:	4b43      	ldr	r3, [pc, #268]	; (16b1c <http_client_callback+0x37c>)
   16a0e:	681b      	ldr	r3, [r3, #0]
   16a10:	1c5a      	adds	r2, r3, #1
   16a12:	32ff      	adds	r2, #255	; 0xff
   16a14:	4b41      	ldr	r3, [pc, #260]	; (16b1c <http_client_callback+0x37c>)
   16a16:	601a      	str	r2, [r3, #0]
				write_spi_flash_frm_buf(256);
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
			http_buf_read_ptr = 0;
			n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
   16a18:	697b      	ldr	r3, [r7, #20]
   16a1a:	3301      	adds	r3, #1
   16a1c:	617b      	str	r3, [r7, #20]
   16a1e:	2312      	movs	r3, #18
   16a20:	18fb      	adds	r3, r7, r3
   16a22:	781a      	ldrb	r2, [r3, #0]
   16a24:	697b      	ldr	r3, [r7, #20]
   16a26:	429a      	cmp	r2, r3
   16a28:	dceb      	bgt.n	16a02 <http_client_callback+0x262>
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
		}
		
		
		if (data->recv_chunked_data.is_complete) {
   16a2a:	687b      	ldr	r3, [r7, #4]
   16a2c:	7a1b      	ldrb	r3, [r3, #8]
   16a2e:	2b00      	cmp	r3, #0
   16a30:	d044      	beq.n	16abc <http_client_callback+0x31c>
			add_state(COMPLETED);
   16a32:	2010      	movs	r0, #16
   16a34:	4b28      	ldr	r3, [pc, #160]	; (16ad8 <http_client_callback+0x338>)
   16a36:	4798      	blx	r3
			if  (http_buf_write_ptr < http_buf_read_ptr){
   16a38:	4b34      	ldr	r3, [pc, #208]	; (16b0c <http_client_callback+0x36c>)
   16a3a:	681a      	ldr	r2, [r3, #0]
   16a3c:	4b37      	ldr	r3, [pc, #220]	; (16b1c <http_client_callback+0x37c>)
   16a3e:	681b      	ldr	r3, [r3, #0]
   16a40:	429a      	cmp	r2, r3
   16a42:	d20b      	bcs.n	16a5c <http_client_callback+0x2bc>
				http_buf_read_ptr =0;
   16a44:	4b35      	ldr	r3, [pc, #212]	; (16b1c <http_client_callback+0x37c>)
   16a46:	2200      	movs	r2, #0
   16a48:	601a      	str	r2, [r3, #0]
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
   16a4a:	4b30      	ldr	r3, [pc, #192]	; (16b0c <http_client_callback+0x36c>)
   16a4c:	681a      	ldr	r2, [r3, #0]
   16a4e:	4b33      	ldr	r3, [pc, #204]	; (16b1c <http_client_callback+0x37c>)
   16a50:	681b      	ldr	r3, [r3, #0]
   16a52:	1ad3      	subs	r3, r2, r3
   16a54:	0018      	movs	r0, r3
   16a56:	4b32      	ldr	r3, [pc, #200]	; (16b20 <http_client_callback+0x380>)
   16a58:	4798      	blx	r3
			}
			else if(http_buf_write_ptr > http_buf_read_ptr){
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
			}
		}
		break;
   16a5a:	e02f      	b.n	16abc <http_client_callback+0x31c>
			add_state(COMPLETED);
			if  (http_buf_write_ptr < http_buf_read_ptr){
				http_buf_read_ptr =0;
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
			}
			else if(http_buf_write_ptr > http_buf_read_ptr){
   16a5c:	4b2b      	ldr	r3, [pc, #172]	; (16b0c <http_client_callback+0x36c>)
   16a5e:	681a      	ldr	r2, [r3, #0]
   16a60:	4b2e      	ldr	r3, [pc, #184]	; (16b1c <http_client_callback+0x37c>)
   16a62:	681b      	ldr	r3, [r3, #0]
   16a64:	429a      	cmp	r2, r3
   16a66:	d929      	bls.n	16abc <http_client_callback+0x31c>
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
   16a68:	4b28      	ldr	r3, [pc, #160]	; (16b0c <http_client_callback+0x36c>)
   16a6a:	681a      	ldr	r2, [r3, #0]
   16a6c:	4b2b      	ldr	r3, [pc, #172]	; (16b1c <http_client_callback+0x37c>)
   16a6e:	681b      	ldr	r3, [r3, #0]
   16a70:	1ad3      	subs	r3, r2, r3
   16a72:	0018      	movs	r0, r3
   16a74:	4b2a      	ldr	r3, [pc, #168]	; (16b20 <http_client_callback+0x380>)
   16a76:	4798      	blx	r3
			}
		}
		break;
   16a78:	e020      	b.n	16abc <http_client_callback+0x31c>

	case HTTP_CLIENT_CALLBACK_DISCONNECTED:
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   16a7a:	687b      	ldr	r3, [r7, #4]
   16a7c:	681a      	ldr	r2, [r3, #0]
   16a7e:	4b29      	ldr	r3, [pc, #164]	; (16b24 <http_client_callback+0x384>)
   16a80:	0011      	movs	r1, r2
   16a82:	0018      	movs	r0, r3
   16a84:	4b16      	ldr	r3, [pc, #88]	; (16ae0 <http_client_callback+0x340>)
   16a86:	4798      	blx	r3

		/* If disconnect reason is equal to -ECONNRESET(-104),
		 * It means the server has closed the connection (timeout).
		 * This is normal operation.
		 */
		if (data->disconnected.reason == -EAGAIN) {
   16a88:	687b      	ldr	r3, [r7, #4]
   16a8a:	681b      	ldr	r3, [r3, #0]
   16a8c:	330b      	adds	r3, #11
   16a8e:	d117      	bne.n	16ac0 <http_client_callback+0x320>
			/* Server has not responded. Retry immediately. */
			if (is_state_set(DOWNLOADING)) {
   16a90:	2008      	movs	r0, #8
   16a92:	4b25      	ldr	r3, [pc, #148]	; (16b28 <http_client_callback+0x388>)
   16a94:	4798      	blx	r3
   16a96:	1e03      	subs	r3, r0, #0
   16a98:	d002      	beq.n	16aa0 <http_client_callback+0x300>
				//f_close(&file_object);
				clear_state(DOWNLOADING);
   16a9a:	2008      	movs	r0, #8
   16a9c:	4b23      	ldr	r3, [pc, #140]	; (16b2c <http_client_callback+0x38c>)
   16a9e:	4798      	blx	r3
			}

			if (is_state_set(GET_REQUESTED)) {
   16aa0:	2004      	movs	r0, #4
   16aa2:	4b21      	ldr	r3, [pc, #132]	; (16b28 <http_client_callback+0x388>)
   16aa4:	4798      	blx	r3
   16aa6:	1e03      	subs	r3, r0, #0
   16aa8:	d002      	beq.n	16ab0 <http_client_callback+0x310>
				clear_state(GET_REQUESTED);
   16aaa:	2004      	movs	r0, #4
   16aac:	4b1f      	ldr	r3, [pc, #124]	; (16b2c <http_client_callback+0x38c>)
   16aae:	4798      	blx	r3
			}

			start_download();
   16ab0:	4b1f      	ldr	r3, [pc, #124]	; (16b30 <http_client_callback+0x390>)
   16ab2:	4798      	blx	r3
		}

		break;
   16ab4:	46c0      	nop			; (mov r8, r8)
   16ab6:	e003      	b.n	16ac0 <http_client_callback+0x320>
                    ((dlCRC<<24)&0xff000000); // byte 0 to byte 3
			printf("Received %x\r\n", (uint32_t)dlCRC);
			
			add_state(COMPLETED);
		}
		break;
   16ab8:	46c0      	nop			; (mov r8, r8)
   16aba:	e002      	b.n	16ac2 <http_client_callback+0x322>
			}
			else if(http_buf_write_ptr > http_buf_read_ptr){
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
			}
		}
		break;
   16abc:	46c0      	nop			; (mov r8, r8)
   16abe:	e000      	b.n	16ac2 <http_client_callback+0x322>
			}

			start_download();
		}

		break;
   16ac0:	46c0      	nop			; (mov r8, r8)
	}
}
   16ac2:	46bd      	mov	sp, r7
   16ac4:	b008      	add	sp, #32
   16ac6:	bd80      	pop	{r7, pc}
   16ac8:	0001b7ac 	.word	0x0001b7ac
   16acc:	0001b324 	.word	0x0001b324
   16ad0:	00018739 	.word	0x00018739
   16ad4:	0001b35c 	.word	0x0001b35c
   16ad8:	00016609 	.word	0x00016609
   16adc:	0001b388 	.word	0x0001b388
   16ae0:	00018619 	.word	0x00018619
   16ae4:	0001b3c4 	.word	0x0001b3c4
   16ae8:	20000e9c 	.word	0x20000e9c
   16aec:	0001b3e4 	.word	0x0001b3e4
   16af0:	0001b3f4 	.word	0x0001b3f4
   16af4:	20000018 	.word	0x20000018
   16af8:	20000e98 	.word	0x20000e98
   16afc:	000156b1 	.word	0x000156b1
   16b00:	0001b438 	.word	0x0001b438
   16b04:	0000db69 	.word	0x0000db69
   16b08:	0001b458 	.word	0x0001b458
   16b0c:	20000134 	.word	0x20000134
   16b10:	20000514 	.word	0x20000514
   16b14:	00018495 	.word	0x00018495
   16b18:	fffff800 	.word	0xfffff800
   16b1c:	20000138 	.word	0x20000138
   16b20:	0001665d 	.word	0x0001665d
   16b24:	0001b474 	.word	0x0001b474
   16b28:	00016631 	.word	0x00016631
   16b2c:	000165d5 	.word	0x000165d5
   16b30:	000166dd 	.word	0x000166dd

00016b34 <socket_cb>:

static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   16b34:	b580      	push	{r7, lr}
   16b36:	b082      	sub	sp, #8
   16b38:	af00      	add	r7, sp, #0
   16b3a:	603a      	str	r2, [r7, #0]
   16b3c:	1dfb      	adds	r3, r7, #7
   16b3e:	1c02      	adds	r2, r0, #0
   16b40:	701a      	strb	r2, [r3, #0]
   16b42:	1dbb      	adds	r3, r7, #6
   16b44:	1c0a      	adds	r2, r1, #0
   16b46:	701a      	strb	r2, [r3, #0]
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   16b48:	683a      	ldr	r2, [r7, #0]
   16b4a:	1dbb      	adds	r3, r7, #6
   16b4c:	7819      	ldrb	r1, [r3, #0]
   16b4e:	1dfb      	adds	r3, r7, #7
   16b50:	781b      	ldrb	r3, [r3, #0]
   16b52:	b25b      	sxtb	r3, r3
   16b54:	0018      	movs	r0, r3
   16b56:	4b03      	ldr	r3, [pc, #12]	; (16b64 <socket_cb+0x30>)
   16b58:	4798      	blx	r3
}
   16b5a:	46c0      	nop			; (mov r8, r8)
   16b5c:	46bd      	mov	sp, r7
   16b5e:	b002      	add	sp, #8
   16b60:	bd80      	pop	{r7, pc}
   16b62:	46c0      	nop			; (mov r8, r8)
   16b64:	0000f1a5 	.word	0x0000f1a5

00016b68 <resolve_cb>:

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   16b68:	b5b0      	push	{r4, r5, r7, lr}
   16b6a:	b084      	sub	sp, #16
   16b6c:	af02      	add	r7, sp, #8
   16b6e:	6078      	str	r0, [r7, #4]
   16b70:	6039      	str	r1, [r7, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   16b72:	683b      	ldr	r3, [r7, #0]
   16b74:	22ff      	movs	r2, #255	; 0xff
   16b76:	4013      	ands	r3, r2
   16b78:	001c      	movs	r4, r3
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   16b7a:	683b      	ldr	r3, [r7, #0]
   16b7c:	0a1b      	lsrs	r3, r3, #8
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
}

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   16b7e:	001a      	movs	r2, r3
   16b80:	23ff      	movs	r3, #255	; 0xff
   16b82:	401a      	ands	r2, r3
   16b84:	0015      	movs	r5, r2
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   16b86:	683b      	ldr	r3, [r7, #0]
   16b88:	0c1b      	lsrs	r3, r3, #16
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
}

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   16b8a:	001a      	movs	r2, r3
   16b8c:	23ff      	movs	r3, #255	; 0xff
   16b8e:	4013      	ands	r3, r2
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   16b90:	683a      	ldr	r2, [r7, #0]
   16b92:	0e12      	lsrs	r2, r2, #24
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
}

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   16b94:	6879      	ldr	r1, [r7, #4]
   16b96:	4808      	ldr	r0, [pc, #32]	; (16bb8 <resolve_cb+0x50>)
   16b98:	9201      	str	r2, [sp, #4]
   16b9a:	9300      	str	r3, [sp, #0]
   16b9c:	002b      	movs	r3, r5
   16b9e:	0022      	movs	r2, r4
   16ba0:	4c06      	ldr	r4, [pc, #24]	; (16bbc <resolve_cb+0x54>)
   16ba2:	47a0      	blx	r4
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   16ba4:	683a      	ldr	r2, [r7, #0]
   16ba6:	687b      	ldr	r3, [r7, #4]
   16ba8:	0011      	movs	r1, r2
   16baa:	0018      	movs	r0, r3
   16bac:	4b04      	ldr	r3, [pc, #16]	; (16bc0 <resolve_cb+0x58>)
   16bae:	4798      	blx	r3
}
   16bb0:	46c0      	nop			; (mov r8, r8)
   16bb2:	46bd      	mov	sp, r7
   16bb4:	b002      	add	sp, #8
   16bb6:	bdb0      	pop	{r4, r5, r7, pc}
   16bb8:	0001b4a4 	.word	0x0001b4a4
   16bbc:	00018619 	.word	0x00018619
   16bc0:	0000f309 	.word	0x0000f309

00016bc4 <wifi_cb>:

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   16bc4:	b590      	push	{r4, r7, lr}
   16bc6:	b087      	sub	sp, #28
   16bc8:	af02      	add	r7, sp, #8
   16bca:	0002      	movs	r2, r0
   16bcc:	6039      	str	r1, [r7, #0]
   16bce:	1dfb      	adds	r3, r7, #7
   16bd0:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
   16bd2:	1dfb      	adds	r3, r7, #7
   16bd4:	781b      	ldrb	r3, [r3, #0]
   16bd6:	2b2c      	cmp	r3, #44	; 0x2c
   16bd8:	d002      	beq.n	16be0 <wifi_cb+0x1c>
   16bda:	2b32      	cmp	r3, #50	; 0x32
   16bdc:	d032      	beq.n	16c44 <wifi_cb+0x80>
			start_download();

		}

		default:
		break;
   16bde:	e04d      	b.n	16c7c <wifi_cb+0xb8>
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
		case M2M_WIFI_RESP_CON_STATE_CHANGED:
		{
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   16be0:	683b      	ldr	r3, [r7, #0]
   16be2:	60fb      	str	r3, [r7, #12]
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16be4:	68fb      	ldr	r3, [r7, #12]
   16be6:	781b      	ldrb	r3, [r3, #0]
   16be8:	2b01      	cmp	r3, #1
   16bea:	d106      	bne.n	16bfa <wifi_cb+0x36>
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16bec:	4b25      	ldr	r3, [pc, #148]	; (16c84 <wifi_cb+0xc0>)
   16bee:	0018      	movs	r0, r3
   16bf0:	4b25      	ldr	r3, [pc, #148]	; (16c88 <wifi_cb+0xc4>)
   16bf2:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
   16bf4:	4b25      	ldr	r3, [pc, #148]	; (16c8c <wifi_cb+0xc8>)
   16bf6:	4798      	blx	r3

				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
				MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}

			break;
   16bf8:	e03f      	b.n	16c7a <wifi_cb+0xb6>
		{
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
				m2m_wifi_request_dhcp_client();
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   16bfa:	68fb      	ldr	r3, [r7, #12]
   16bfc:	781b      	ldrb	r3, [r3, #0]
   16bfe:	2b00      	cmp	r3, #0
   16c00:	d13b      	bne.n	16c7a <wifi_cb+0xb6>
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   16c02:	4b23      	ldr	r3, [pc, #140]	; (16c90 <wifi_cb+0xcc>)
   16c04:	0018      	movs	r0, r3
   16c06:	4b20      	ldr	r3, [pc, #128]	; (16c88 <wifi_cb+0xc4>)
   16c08:	4798      	blx	r3
				clear_state(WIFI_CONNECTED);
   16c0a:	2002      	movs	r0, #2
   16c0c:	4b21      	ldr	r3, [pc, #132]	; (16c94 <wifi_cb+0xd0>)
   16c0e:	4798      	blx	r3
				if (is_state_set(DOWNLOADING)) {
   16c10:	2008      	movs	r0, #8
   16c12:	4b21      	ldr	r3, [pc, #132]	; (16c98 <wifi_cb+0xd4>)
   16c14:	4798      	blx	r3
   16c16:	1e03      	subs	r3, r0, #0
   16c18:	d002      	beq.n	16c20 <wifi_cb+0x5c>
					clear_state(DOWNLOADING);
   16c1a:	2008      	movs	r0, #8
   16c1c:	4b1d      	ldr	r3, [pc, #116]	; (16c94 <wifi_cb+0xd0>)
   16c1e:	4798      	blx	r3
				}

				if (is_state_set(GET_REQUESTED)) {
   16c20:	2004      	movs	r0, #4
   16c22:	4b1d      	ldr	r3, [pc, #116]	; (16c98 <wifi_cb+0xd4>)
   16c24:	4798      	blx	r3
   16c26:	1e03      	subs	r3, r0, #0
   16c28:	d002      	beq.n	16c30 <wifi_cb+0x6c>
					clear_state(GET_REQUESTED);
   16c2a:	2004      	movs	r0, #4
   16c2c:	4b19      	ldr	r3, [pc, #100]	; (16c94 <wifi_cb+0xd0>)
   16c2e:	4798      	blx	r3
				}

				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   16c30:	4a1a      	ldr	r2, [pc, #104]	; (16c9c <wifi_cb+0xd8>)
   16c32:	481b      	ldr	r0, [pc, #108]	; (16ca0 <wifi_cb+0xdc>)
   16c34:	23ff      	movs	r3, #255	; 0xff
   16c36:	9300      	str	r3, [sp, #0]
   16c38:	0013      	movs	r3, r2
   16c3a:	2202      	movs	r2, #2
   16c3c:	2116      	movs	r1, #22
   16c3e:	4c19      	ldr	r4, [pc, #100]	; (16ca4 <wifi_cb+0xe0>)
   16c40:	47a0      	blx	r4
				MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}

			break;
   16c42:	e01a      	b.n	16c7a <wifi_cb+0xb6>
		}

		case M2M_WIFI_REQ_DHCP_CONF:
		{
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   16c44:	683b      	ldr	r3, [r7, #0]
   16c46:	60bb      	str	r3, [r7, #8]
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16c48:	68bb      	ldr	r3, [r7, #8]
   16c4a:	781b      	ldrb	r3, [r3, #0]
		}

		case M2M_WIFI_REQ_DHCP_CONF:
		{
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16c4c:	0019      	movs	r1, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16c4e:	68bb      	ldr	r3, [r7, #8]
   16c50:	3301      	adds	r3, #1
   16c52:	781b      	ldrb	r3, [r3, #0]
		}

		case M2M_WIFI_REQ_DHCP_CONF:
		{
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16c54:	001a      	movs	r2, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16c56:	68bb      	ldr	r3, [r7, #8]
   16c58:	3302      	adds	r3, #2
   16c5a:	781b      	ldrb	r3, [r3, #0]
		}

		case M2M_WIFI_REQ_DHCP_CONF:
		{
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16c5c:	001c      	movs	r4, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16c5e:	68bb      	ldr	r3, [r7, #8]
   16c60:	3303      	adds	r3, #3
   16c62:	781b      	ldrb	r3, [r3, #0]
		}

		case M2M_WIFI_REQ_DHCP_CONF:
		{
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16c64:	4810      	ldr	r0, [pc, #64]	; (16ca8 <wifi_cb+0xe4>)
   16c66:	9300      	str	r3, [sp, #0]
   16c68:	0023      	movs	r3, r4
   16c6a:	4c10      	ldr	r4, [pc, #64]	; (16cac <wifi_cb+0xe8>)
   16c6c:	47a0      	blx	r4
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
			add_state(WIFI_CONNECTED);
   16c6e:	2002      	movs	r0, #2
   16c70:	4b0f      	ldr	r3, [pc, #60]	; (16cb0 <wifi_cb+0xec>)
   16c72:	4798      	blx	r3
			start_download();
   16c74:	4b0f      	ldr	r3, [pc, #60]	; (16cb4 <wifi_cb+0xf0>)
   16c76:	4798      	blx	r3

		}

		default:
		break;
   16c78:	e000      	b.n	16c7c <wifi_cb+0xb8>

				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
				MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}

			break;
   16c7a:	46c0      	nop			; (mov r8, r8)
		}

		default:
		break;
	}
}
   16c7c:	46c0      	nop			; (mov r8, r8)
   16c7e:	46bd      	mov	sp, r7
   16c80:	b005      	add	sp, #20
   16c82:	bd90      	pop	{r4, r7, pc}
   16c84:	0001b4d4 	.word	0x0001b4d4
   16c88:	00018739 	.word	0x00018739
   16c8c:	0000a49d 	.word	0x0000a49d
   16c90:	0001b4f4 	.word	0x0001b4f4
   16c94:	000165d5 	.word	0x000165d5
   16c98:	00016631 	.word	0x00016631
   16c9c:	0001b044 	.word	0x0001b044
   16ca0:	0001b050 	.word	0x0001b050
   16ca4:	00009fd5 	.word	0x00009fd5
   16ca8:	0001b514 	.word	0x0001b514
   16cac:	00018619 	.word	0x00018619
   16cb0:	00016609 	.word	0x00016609
   16cb4:	000166dd 	.word	0x000166dd

00016cb8 <configure_http_client>:

static void configure_http_client(void)
{
   16cb8:	b580      	push	{r7, lr}
   16cba:	b088      	sub	sp, #32
   16cbc:	af00      	add	r7, sp, #0
	struct http_client_config httpc_conf;
	int ret;

	http_client_get_config_defaults(&httpc_conf);
   16cbe:	003b      	movs	r3, r7
   16cc0:	0018      	movs	r0, r3
   16cc2:	4b12      	ldr	r3, [pc, #72]	; (16d0c <configure_http_client+0x54>)
   16cc4:	4798      	blx	r3

	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   16cc6:	003b      	movs	r3, r7
   16cc8:	2280      	movs	r2, #128	; 0x80
   16cca:	00d2      	lsls	r2, r2, #3
   16ccc:	611a      	str	r2, [r3, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   16cce:	003b      	movs	r3, r7
   16cd0:	4a0f      	ldr	r2, [pc, #60]	; (16d10 <configure_http_client+0x58>)
   16cd2:	605a      	str	r2, [r3, #4]

	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   16cd4:	003a      	movs	r2, r7
   16cd6:	4b0f      	ldr	r3, [pc, #60]	; (16d14 <configure_http_client+0x5c>)
   16cd8:	0011      	movs	r1, r2
   16cda:	0018      	movs	r0, r3
   16cdc:	4b0e      	ldr	r3, [pc, #56]	; (16d18 <configure_http_client+0x60>)
   16cde:	4798      	blx	r3
   16ce0:	0003      	movs	r3, r0
   16ce2:	61fb      	str	r3, [r7, #28]
	if (ret < 0) {
   16ce4:	69fb      	ldr	r3, [r7, #28]
   16ce6:	2b00      	cmp	r3, #0
   16ce8:	da06      	bge.n	16cf8 <configure_http_client+0x40>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   16cea:	69fa      	ldr	r2, [r7, #28]
   16cec:	4b0b      	ldr	r3, [pc, #44]	; (16d1c <configure_http_client+0x64>)
   16cee:	0011      	movs	r1, r2
   16cf0:	0018      	movs	r0, r3
   16cf2:	4b0b      	ldr	r3, [pc, #44]	; (16d20 <configure_http_client+0x68>)
   16cf4:	4798      	blx	r3
		while (1) {
			} // Loop forever
   16cf6:	e7fe      	b.n	16cf6 <configure_http_client+0x3e>
		}

		http_client_register_callback(&http_client_module_inst, http_client_callback);
   16cf8:	4a0a      	ldr	r2, [pc, #40]	; (16d24 <configure_http_client+0x6c>)
   16cfa:	4b06      	ldr	r3, [pc, #24]	; (16d14 <configure_http_client+0x5c>)
   16cfc:	0011      	movs	r1, r2
   16cfe:	0018      	movs	r0, r3
   16d00:	4b09      	ldr	r3, [pc, #36]	; (16d28 <configure_http_client+0x70>)
   16d02:	4798      	blx	r3
}
   16d04:	46c0      	nop			; (mov r8, r8)
   16d06:	46bd      	mov	sp, r7
   16d08:	b008      	add	sp, #32
   16d0a:	bd80      	pop	{r7, pc}
   16d0c:	0000efcd 	.word	0x0000efcd
   16d10:	20000d1c 	.word	0x20000d1c
   16d14:	20000d74 	.word	0x20000d74
   16d18:	0000f019 	.word	0x0000f019
   16d1c:	0001b53c 	.word	0x0001b53c
   16d20:	00018619 	.word	0x00018619
   16d24:	000167a1 	.word	0x000167a1
   16d28:	0000f105 	.word	0x0000f105

00016d2c <download_firmware>:

static void download_firmware(unsigned int slot)
{
   16d2c:	b590      	push	{r4, r7, lr}
   16d2e:	b085      	sub	sp, #20
   16d30:	af02      	add	r7, sp, #8
   16d32:	6078      	str	r0, [r7, #4]
	flash_addr = 0x40000 * slot; //Starting addr on flash where downloaded file is stored
   16d34:	687b      	ldr	r3, [r7, #4]
   16d36:	049a      	lsls	r2, r3, #18
   16d38:	4b4a      	ldr	r3, [pc, #296]	; (16e64 <download_firmware+0x138>)
   16d3a:	601a      	str	r2, [r3, #0]
	at25dfx_chip_wake(&at25dfx_chip);
   16d3c:	4b4a      	ldr	r3, [pc, #296]	; (16e68 <download_firmware+0x13c>)
   16d3e:	0018      	movs	r0, r3
   16d40:	4b4a      	ldr	r3, [pc, #296]	; (16e6c <download_firmware+0x140>)
   16d42:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
   16d44:	4b48      	ldr	r3, [pc, #288]	; (16e68 <download_firmware+0x13c>)
   16d46:	0018      	movs	r0, r3
   16d48:	4b49      	ldr	r3, [pc, #292]	; (16e70 <download_firmware+0x144>)
   16d4a:	4798      	blx	r3
		// Handle missing or non-responsive device
	}
	
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
   16d4c:	4b46      	ldr	r3, [pc, #280]	; (16e68 <download_firmware+0x13c>)
   16d4e:	2100      	movs	r1, #0
   16d50:	0018      	movs	r0, r3
   16d52:	4b48      	ldr	r3, [pc, #288]	; (16e74 <download_firmware+0x148>)
   16d54:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr, AT25DFX_BLOCK_SIZE_64KB);	// erase block
   16d56:	4b43      	ldr	r3, [pc, #268]	; (16e64 <download_firmware+0x138>)
   16d58:	6819      	ldr	r1, [r3, #0]
   16d5a:	4b43      	ldr	r3, [pc, #268]	; (16e68 <download_firmware+0x13c>)
   16d5c:	2202      	movs	r2, #2
   16d5e:	0018      	movs	r0, r3
   16d60:	4b45      	ldr	r3, [pc, #276]	; (16e78 <download_firmware+0x14c>)
   16d62:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x10000, AT25DFX_BLOCK_SIZE_64KB);
   16d64:	4b3f      	ldr	r3, [pc, #252]	; (16e64 <download_firmware+0x138>)
   16d66:	681b      	ldr	r3, [r3, #0]
   16d68:	2280      	movs	r2, #128	; 0x80
   16d6a:	0252      	lsls	r2, r2, #9
   16d6c:	1899      	adds	r1, r3, r2
   16d6e:	4b3e      	ldr	r3, [pc, #248]	; (16e68 <download_firmware+0x13c>)
   16d70:	2202      	movs	r2, #2
   16d72:	0018      	movs	r0, r3
   16d74:	4b40      	ldr	r3, [pc, #256]	; (16e78 <download_firmware+0x14c>)
   16d76:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x20000, AT25DFX_BLOCK_SIZE_64KB);
   16d78:	4b3a      	ldr	r3, [pc, #232]	; (16e64 <download_firmware+0x138>)
   16d7a:	681b      	ldr	r3, [r3, #0]
   16d7c:	2280      	movs	r2, #128	; 0x80
   16d7e:	0292      	lsls	r2, r2, #10
   16d80:	1899      	adds	r1, r3, r2
   16d82:	4b39      	ldr	r3, [pc, #228]	; (16e68 <download_firmware+0x13c>)
   16d84:	2202      	movs	r2, #2
   16d86:	0018      	movs	r0, r3
   16d88:	4b3b      	ldr	r3, [pc, #236]	; (16e78 <download_firmware+0x14c>)
   16d8a:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x30000, AT25DFX_BLOCK_SIZE_64KB);
   16d8c:	4b35      	ldr	r3, [pc, #212]	; (16e64 <download_firmware+0x138>)
   16d8e:	681b      	ldr	r3, [r3, #0]
   16d90:	22c0      	movs	r2, #192	; 0xc0
   16d92:	0292      	lsls	r2, r2, #10
   16d94:	1899      	adds	r1, r3, r2
   16d96:	4b34      	ldr	r3, [pc, #208]	; (16e68 <download_firmware+0x13c>)
   16d98:	2202      	movs	r2, #2
   16d9a:	0018      	movs	r0, r3
   16d9c:	4b36      	ldr	r3, [pc, #216]	; (16e78 <download_firmware+0x14c>)
   16d9e:	4798      	blx	r3
	
	/* Connect to router and download stuff and store it in flash */
	printf("download_firmware: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   16da0:	4a36      	ldr	r2, [pc, #216]	; (16e7c <download_firmware+0x150>)
   16da2:	4b37      	ldr	r3, [pc, #220]	; (16e80 <download_firmware+0x154>)
   16da4:	0011      	movs	r1, r2
   16da6:	0018      	movs	r0, r3
   16da8:	4b36      	ldr	r3, [pc, #216]	; (16e84 <download_firmware+0x158>)
   16daa:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16dac:	4a36      	ldr	r2, [pc, #216]	; (16e88 <download_firmware+0x15c>)
   16dae:	4833      	ldr	r0, [pc, #204]	; (16e7c <download_firmware+0x150>)
   16db0:	23ff      	movs	r3, #255	; 0xff
   16db2:	9300      	str	r3, [sp, #0]
   16db4:	0013      	movs	r3, r2
   16db6:	2202      	movs	r2, #2
   16db8:	2116      	movs	r1, #22
   16dba:	4c34      	ldr	r4, [pc, #208]	; (16e8c <download_firmware+0x160>)
   16dbc:	47a0      	blx	r4
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16dbe:	e006      	b.n	16dce <download_firmware+0xa2>
		m2m_wifi_handle_events(NULL);
   16dc0:	2000      	movs	r0, #0
   16dc2:	4b33      	ldr	r3, [pc, #204]	; (16e90 <download_firmware+0x164>)
   16dc4:	4798      	blx	r3
		sw_timer_task(&swt_module_inst);
   16dc6:	4b33      	ldr	r3, [pc, #204]	; (16e94 <download_firmware+0x168>)
   16dc8:	0018      	movs	r0, r3
   16dca:	4b33      	ldr	r3, [pc, #204]	; (16e98 <download_firmware+0x16c>)
   16dcc:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x30000, AT25DFX_BLOCK_SIZE_64KB);
	
	/* Connect to router and download stuff and store it in flash */
	printf("download_firmware: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16dce:	2010      	movs	r0, #16
   16dd0:	4b32      	ldr	r3, [pc, #200]	; (16e9c <download_firmware+0x170>)
   16dd2:	4798      	blx	r3
   16dd4:	0003      	movs	r3, r0
   16dd6:	001a      	movs	r2, r3
   16dd8:	2301      	movs	r3, #1
   16dda:	4053      	eors	r3, r2
   16ddc:	b2db      	uxtb	r3, r3
   16dde:	2b00      	cmp	r3, #0
   16de0:	d009      	beq.n	16df6 <download_firmware+0xca>
   16de2:	2020      	movs	r0, #32
   16de4:	4b2d      	ldr	r3, [pc, #180]	; (16e9c <download_firmware+0x170>)
   16de6:	4798      	blx	r3
   16de8:	0003      	movs	r3, r0
   16dea:	001a      	movs	r2, r3
   16dec:	2301      	movs	r3, #1
   16dee:	4053      	eors	r3, r2
   16df0:	b2db      	uxtb	r3, r3
   16df2:	2b00      	cmp	r3, #0
   16df4:	d1e4      	bne.n	16dc0 <download_firmware+0x94>
		m2m_wifi_handle_events(NULL);
		sw_timer_task(&swt_module_inst);
	}
	printf("download_firmware: done.\r\n");
   16df6:	4b2a      	ldr	r3, [pc, #168]	; (16ea0 <download_firmware+0x174>)
   16df8:	0018      	movs	r0, r3
   16dfa:	4b2a      	ldr	r3, [pc, #168]	; (16ea4 <download_firmware+0x178>)
   16dfc:	4798      	blx	r3
	printf("Calculated CRC: %x\r\n", (uint32_t)crcChecker);
   16dfe:	4b2a      	ldr	r3, [pc, #168]	; (16ea8 <download_firmware+0x17c>)
   16e00:	681a      	ldr	r2, [r3, #0]
   16e02:	4b2a      	ldr	r3, [pc, #168]	; (16eac <download_firmware+0x180>)
   16e04:	0011      	movs	r1, r2
   16e06:	0018      	movs	r0, r3
   16e08:	4b1e      	ldr	r3, [pc, #120]	; (16e84 <download_firmware+0x158>)
   16e0a:	4798      	blx	r3
	
	clear_state(COMPLETED|DOWNLOADING|GET_REQUESTED|CANCELED);
   16e0c:	203c      	movs	r0, #60	; 0x3c
   16e0e:	4b28      	ldr	r3, [pc, #160]	; (16eb0 <download_firmware+0x184>)
   16e10:	4798      	blx	r3
	download_CRC = true;
   16e12:	4b28      	ldr	r3, [pc, #160]	; (16eb4 <download_firmware+0x188>)
   16e14:	2201      	movs	r2, #1
   16e16:	701a      	strb	r2, [r3, #0]
	start_download();
   16e18:	4b27      	ldr	r3, [pc, #156]	; (16eb8 <download_firmware+0x18c>)
   16e1a:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16e1c:	e006      	b.n	16e2c <download_firmware+0x100>
		m2m_wifi_handle_events(NULL);
   16e1e:	2000      	movs	r0, #0
   16e20:	4b1b      	ldr	r3, [pc, #108]	; (16e90 <download_firmware+0x164>)
   16e22:	4798      	blx	r3
		sw_timer_task(&swt_module_inst);
   16e24:	4b1b      	ldr	r3, [pc, #108]	; (16e94 <download_firmware+0x168>)
   16e26:	0018      	movs	r0, r3
   16e28:	4b1b      	ldr	r3, [pc, #108]	; (16e98 <download_firmware+0x16c>)
   16e2a:	4798      	blx	r3
	printf("Calculated CRC: %x\r\n", (uint32_t)crcChecker);
	
	clear_state(COMPLETED|DOWNLOADING|GET_REQUESTED|CANCELED);
	download_CRC = true;
	start_download();
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16e2c:	2010      	movs	r0, #16
   16e2e:	4b1b      	ldr	r3, [pc, #108]	; (16e9c <download_firmware+0x170>)
   16e30:	4798      	blx	r3
   16e32:	0003      	movs	r3, r0
   16e34:	001a      	movs	r2, r3
   16e36:	2301      	movs	r3, #1
   16e38:	4053      	eors	r3, r2
   16e3a:	b2db      	uxtb	r3, r3
   16e3c:	2b00      	cmp	r3, #0
   16e3e:	d009      	beq.n	16e54 <download_firmware+0x128>
   16e40:	2020      	movs	r0, #32
   16e42:	4b16      	ldr	r3, [pc, #88]	; (16e9c <download_firmware+0x170>)
   16e44:	4798      	blx	r3
   16e46:	0003      	movs	r3, r0
   16e48:	001a      	movs	r2, r3
   16e4a:	2301      	movs	r3, #1
   16e4c:	4053      	eors	r3, r2
   16e4e:	b2db      	uxtb	r3, r3
   16e50:	2b00      	cmp	r3, #0
   16e52:	d1e4      	bne.n	16e1e <download_firmware+0xf2>
		m2m_wifi_handle_events(NULL);
		sw_timer_task(&swt_module_inst);
	}
	
	download_CRC = false;
   16e54:	4b17      	ldr	r3, [pc, #92]	; (16eb4 <download_firmware+0x188>)
   16e56:	2200      	movs	r2, #0
   16e58:	701a      	strb	r2, [r3, #0]
	//For debugging this shit
	//flash_addr = 0x00000;

}
   16e5a:	46c0      	nop			; (mov r8, r8)
   16e5c:	46bd      	mov	sp, r7
   16e5e:	b003      	add	sp, #12
   16e60:	bd90      	pop	{r4, r7, pc}
   16e62:	46c0      	nop			; (mov r8, r8)
   16e64:	200004b8 	.word	0x200004b8
   16e68:	20000d14 	.word	0x20000d14
   16e6c:	00011a71 	.word	0x00011a71
   16e70:	000115e1 	.word	0x000115e1
   16e74:	00011931 	.word	0x00011931
   16e78:	00011835 	.word	0x00011835
   16e7c:	0001b050 	.word	0x0001b050
   16e80:	0001b584 	.word	0x0001b584
   16e84:	00018619 	.word	0x00018619
   16e88:	0001b044 	.word	0x0001b044
   16e8c:	00009fd5 	.word	0x00009fd5
   16e90:	00009fb9 	.word	0x00009fb9
   16e94:	20000d1c 	.word	0x20000d1c
   16e98:	00010bc9 	.word	0x00010bc9
   16e9c:	00016631 	.word	0x00016631
   16ea0:	0001b5b8 	.word	0x0001b5b8
   16ea4:	00018739 	.word	0x00018739
   16ea8:	20000e98 	.word	0x20000e98
   16eac:	0001b5d4 	.word	0x0001b5d4
   16eb0:	000165d5 	.word	0x000165d5
   16eb4:	20000131 	.word	0x20000131
   16eb8:	000166dd 	.word	0x000166dd

00016ebc <main>:

int main (void)
{
   16ebc:	b590      	push	{r4, r7, lr}
   16ebe:	b08d      	sub	sp, #52	; 0x34
   16ec0:	af02      	add	r7, sp, #8
	
	tstrWifiInitParam param;
	int8_t ret;
	
	char topic[strlen(MAIN_CHAT_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];
   16ec2:	b092      	sub	sp, #72	; 0x48
   16ec4:	ab02      	add	r3, sp, #8
   16ec6:	3300      	adds	r3, #0
   16ec8:	627b      	str	r3, [r7, #36]	; 0x24
	
	
	system_init();
   16eca:	4ba0      	ldr	r3, [pc, #640]	; (1714c <main+0x290>)
   16ecc:	4798      	blx	r3
	init_state();
   16ece:	4ba0      	ldr	r3, [pc, #640]	; (17150 <main+0x294>)
   16ed0:	4798      	blx	r3
	system_interrupt_enable_global();
   16ed2:	4ba0      	ldr	r3, [pc, #640]	; (17154 <main+0x298>)
   16ed4:	4798      	blx	r3
	configure_port_pins();
   16ed6:	4ba0      	ldr	r3, [pc, #640]	; (17158 <main+0x29c>)
   16ed8:	4798      	blx	r3
	delay_init();
   16eda:	4ba0      	ldr	r3, [pc, #640]	; (1715c <main+0x2a0>)
   16edc:	4798      	blx	r3
	configure_console();
   16ede:	4ba0      	ldr	r3, [pc, #640]	; (17160 <main+0x2a4>)
   16ee0:	4798      	blx	r3
	configure_nvm();
   16ee2:	4ba0      	ldr	r3, [pc, #640]	; (17164 <main+0x2a8>)
   16ee4:	4798      	blx	r3
	configure_spi_flash();
   16ee6:	4ba0      	ldr	r3, [pc, #640]	; (17168 <main+0x2ac>)
   16ee8:	4798      	blx	r3
	configure_timer();
   16eea:	4ba0      	ldr	r3, [pc, #640]	; (1716c <main+0x2b0>)
   16eec:	4798      	blx	r3
	
	configure_mqtt();
   16eee:	4ba0      	ldr	r3, [pc, #640]	; (17170 <main+0x2b4>)
   16ef0:	4798      	blx	r3
	nm_bsp_init();
   16ef2:	4ba0      	ldr	r3, [pc, #640]	; (17174 <main+0x2b8>)
   16ef4:	4798      	blx	r3
	printf("User : %s\r\n", mqtt_user);
   16ef6:	4aa0      	ldr	r2, [pc, #640]	; (17178 <main+0x2bc>)
   16ef8:	4ba0      	ldr	r3, [pc, #640]	; (1717c <main+0x2c0>)
   16efa:	0011      	movs	r1, r2
   16efc:	0018      	movs	r0, r3
   16efe:	4ba0      	ldr	r3, [pc, #640]	; (17180 <main+0x2c4>)
   16f00:	4798      	blx	r3
	printf("Password : %s\r\n", mqtt_user);
   16f02:	4a9d      	ldr	r2, [pc, #628]	; (17178 <main+0x2bc>)
   16f04:	4b9f      	ldr	r3, [pc, #636]	; (17184 <main+0x2c8>)
   16f06:	0011      	movs	r1, r2
   16f08:	0018      	movs	r0, r3
   16f0a:	4b9d      	ldr	r3, [pc, #628]	; (17180 <main+0x2c4>)
   16f0c:	4798      	blx	r3
	sprintf(topic, "%s", MAIN_CHAT_TOPIC);
   16f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16f10:	4b9d      	ldr	r3, [pc, #628]	; (17188 <main+0x2cc>)
   16f12:	0010      	movs	r0, r2
   16f14:	0019      	movs	r1, r3
   16f16:	2305      	movs	r3, #5
   16f18:	001a      	movs	r2, r3
   16f1a:	4b9c      	ldr	r3, [pc, #624]	; (1718c <main+0x2d0>)
   16f1c:	4798      	blx	r3
	printf("Topic : %s\r\n", topic);
   16f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16f20:	4b9b      	ldr	r3, [pc, #620]	; (17190 <main+0x2d4>)
   16f22:	0011      	movs	r1, r2
   16f24:	0018      	movs	r0, r3
   16f26:	4b96      	ldr	r3, [pc, #600]	; (17180 <main+0x2c4>)
   16f28:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   16f2a:	2308      	movs	r3, #8
   16f2c:	18fb      	adds	r3, r7, r3
   16f2e:	2218      	movs	r2, #24
   16f30:	2100      	movs	r1, #0
   16f32:	0018      	movs	r0, r3
   16f34:	4b97      	ldr	r3, [pc, #604]	; (17194 <main+0x2d8>)
   16f36:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
   16f38:	2308      	movs	r3, #8
   16f3a:	18fb      	adds	r3, r7, r3
   16f3c:	4a96      	ldr	r2, [pc, #600]	; (17198 <main+0x2dc>)
   16f3e:	601a      	str	r2, [r3, #0]
	ret = m2m_wifi_init(&param);
   16f40:	2323      	movs	r3, #35	; 0x23
   16f42:	18fc      	adds	r4, r7, r3
   16f44:	2308      	movs	r3, #8
   16f46:	18fb      	adds	r3, r7, r3
   16f48:	0018      	movs	r0, r3
   16f4a:	4b94      	ldr	r3, [pc, #592]	; (1719c <main+0x2e0>)
   16f4c:	4798      	blx	r3
   16f4e:	0003      	movs	r3, r0
   16f50:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   16f52:	2323      	movs	r3, #35	; 0x23
   16f54:	18fb      	adds	r3, r7, r3
   16f56:	781b      	ldrb	r3, [r3, #0]
   16f58:	b25b      	sxtb	r3, r3
   16f5a:	2b00      	cmp	r3, #0
   16f5c:	d009      	beq.n	16f72 <main+0xb6>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
   16f5e:	2323      	movs	r3, #35	; 0x23
   16f60:	18fb      	adds	r3, r7, r3
   16f62:	2200      	movs	r2, #0
   16f64:	569a      	ldrsb	r2, [r3, r2]
   16f66:	4b8e      	ldr	r3, [pc, #568]	; (171a0 <main+0x2e4>)
   16f68:	0011      	movs	r1, r2
   16f6a:	0018      	movs	r0, r3
   16f6c:	4b84      	ldr	r3, [pc, #528]	; (17180 <main+0x2c4>)
   16f6e:	4798      	blx	r3
		while (1) { /* Loop forever. */
		}
   16f70:	e7fe      	b.n	16f70 <main+0xb4>
	}

	/* Initialize socket interface. */
	socketInit();
   16f72:	4b8c      	ldr	r3, [pc, #560]	; (171a4 <main+0x2e8>)
   16f74:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16f76:	4a8c      	ldr	r2, [pc, #560]	; (171a8 <main+0x2ec>)
   16f78:	4b8c      	ldr	r3, [pc, #560]	; (171ac <main+0x2f0>)
   16f7a:	0011      	movs	r1, r2
   16f7c:	0018      	movs	r0, r3
   16f7e:	4b8c      	ldr	r3, [pc, #560]	; (171b0 <main+0x2f4>)
   16f80:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   16f82:	4a8c      	ldr	r2, [pc, #560]	; (171b4 <main+0x2f8>)
   16f84:	488c      	ldr	r0, [pc, #560]	; (171b8 <main+0x2fc>)
   16f86:	23ff      	movs	r3, #255	; 0xff
   16f88:	9300      	str	r3, [sp, #0]
   16f8a:	0013      	movs	r3, r2
   16f8c:	2202      	movs	r2, #2
   16f8e:	2116      	movs	r1, #22
   16f90:	4c8a      	ldr	r4, [pc, #552]	; (171bc <main+0x300>)
   16f92:	47a0      	blx	r4
	MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	/* ~~~~~~~~~~~~~End MQTT init~~~~~~~~~~~~~~ */
	
	write_firmware = false; 
   16f94:	4b8a      	ldr	r3, [pc, #552]	; (171c0 <main+0x304>)
   16f96:	2200      	movs	r2, #0
   16f98:	701a      	strb	r2, [r3, #0]
	
	while (1) {
		/* Handle pending events from network controller. */
		sint8 wifiStatus = m2m_wifi_handle_events(NULL);
   16f9a:	2322      	movs	r3, #34	; 0x22
   16f9c:	18fc      	adds	r4, r7, r3
   16f9e:	2000      	movs	r0, #0
   16fa0:	4b88      	ldr	r3, [pc, #544]	; (171c4 <main+0x308>)
   16fa2:	4798      	blx	r3
   16fa4:	0003      	movs	r3, r0
   16fa6:	7023      	strb	r3, [r4, #0]
		/* Try to read user input from USART. */
		usart_read_job(&usart_instance, &uart_ch_buffer);
   16fa8:	4a87      	ldr	r2, [pc, #540]	; (171c8 <main+0x30c>)
   16faa:	4b88      	ldr	r3, [pc, #544]	; (171cc <main+0x310>)
   16fac:	0011      	movs	r1, r2
   16fae:	0018      	movs	r0, r3
   16fb0:	4b87      	ldr	r3, [pc, #540]	; (171d0 <main+0x314>)
   16fb2:	4798      	blx	r3
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst_mqtt);
   16fb4:	4b87      	ldr	r3, [pc, #540]	; (171d4 <main+0x318>)
   16fb6:	0018      	movs	r0, r3
   16fb8:	4b87      	ldr	r3, [pc, #540]	; (171d8 <main+0x31c>)
   16fba:	4798      	blx	r3
		
		if( port_pin_get_input_level(B1) != buttonLevel )
   16fbc:	2037      	movs	r0, #55	; 0x37
   16fbe:	4b87      	ldr	r3, [pc, #540]	; (171dc <main+0x320>)
   16fc0:	4798      	blx	r3
   16fc2:	0003      	movs	r3, r0
   16fc4:	001a      	movs	r2, r3
   16fc6:	4b86      	ldr	r3, [pc, #536]	; (171e0 <main+0x324>)
   16fc8:	781b      	ldrb	r3, [r3, #0]
   16fca:	429a      	cmp	r2, r3
   16fcc:	d029      	beq.n	17022 <main+0x166>
		{
			//int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain);
			buttonLevel = port_pin_get_input_level(B1);
   16fce:	2037      	movs	r0, #55	; 0x37
   16fd0:	4b82      	ldr	r3, [pc, #520]	; (171dc <main+0x320>)
   16fd2:	4798      	blx	r3
   16fd4:	0003      	movs	r3, r0
   16fd6:	001a      	movs	r2, r3
   16fd8:	4b81      	ldr	r3, [pc, #516]	; (171e0 <main+0x324>)
   16fda:	701a      	strb	r2, [r3, #0]
			printf("Button pushed\r\n");
   16fdc:	4b81      	ldr	r3, [pc, #516]	; (171e4 <main+0x328>)
   16fde:	0018      	movs	r0, r3
   16fe0:	4b81      	ldr	r3, [pc, #516]	; (171e8 <main+0x32c>)
   16fe2:	4798      	blx	r3
			sprintf(pub_text, "%d", buttonLevel);
   16fe4:	4b7e      	ldr	r3, [pc, #504]	; (171e0 <main+0x324>)
   16fe6:	781b      	ldrb	r3, [r3, #0]
   16fe8:	001a      	movs	r2, r3
   16fea:	4980      	ldr	r1, [pc, #512]	; (171ec <main+0x330>)
   16fec:	4b80      	ldr	r3, [pc, #512]	; (171f0 <main+0x334>)
   16fee:	0018      	movs	r0, r3
   16ff0:	4b80      	ldr	r3, [pc, #512]	; (171f4 <main+0x338>)
   16ff2:	4798      	blx	r3
			printf("Made it to other side of sprintf\r\n");
   16ff4:	4b80      	ldr	r3, [pc, #512]	; (171f8 <main+0x33c>)
   16ff6:	0018      	movs	r0, r3
   16ff8:	4b7b      	ldr	r3, [pc, #492]	; (171e8 <main+0x32c>)
   16ffa:	4798      	blx	r3
			mqtt_publish(&mqtt_inst, SENSOR_TOPIC, pub_text, 1, 0, 0);
   16ffc:	4a7c      	ldr	r2, [pc, #496]	; (171f0 <main+0x334>)
   16ffe:	497f      	ldr	r1, [pc, #508]	; (171fc <main+0x340>)
   17000:	487f      	ldr	r0, [pc, #508]	; (17200 <main+0x344>)
   17002:	2300      	movs	r3, #0
   17004:	9301      	str	r3, [sp, #4]
   17006:	2300      	movs	r3, #0
   17008:	9300      	str	r3, [sp, #0]
   1700a:	2301      	movs	r3, #1
   1700c:	4c7d      	ldr	r4, [pc, #500]	; (17204 <main+0x348>)
   1700e:	47a0      	blx	r4
			printf("Made it to other side of publish\r\n");
   17010:	4b7d      	ldr	r3, [pc, #500]	; (17208 <main+0x34c>)
   17012:	0018      	movs	r0, r3
   17014:	4b74      	ldr	r3, [pc, #464]	; (171e8 <main+0x32c>)
   17016:	4798      	blx	r3
			delay_ms(300);
   17018:	2396      	movs	r3, #150	; 0x96
   1701a:	005b      	lsls	r3, r3, #1
   1701c:	0018      	movs	r0, r3
   1701e:	4b7b      	ldr	r3, [pc, #492]	; (1720c <main+0x350>)
   17020:	4798      	blx	r3
		}
		/* Checks the USART buffer. */
		check_usart_buffer(MAIN_CHAT_TOPIC);
   17022:	4b59      	ldr	r3, [pc, #356]	; (17188 <main+0x2cc>)
   17024:	0018      	movs	r0, r3
   17026:	4b7a      	ldr	r3, [pc, #488]	; (17210 <main+0x354>)
   17028:	4798      	blx	r3
		
		if (write_firmware) {
   1702a:	4b65      	ldr	r3, [pc, #404]	; (171c0 <main+0x304>)
   1702c:	781b      	ldrb	r3, [r3, #0]
   1702e:	2b00      	cmp	r3, #0
   17030:	d0b3      	beq.n	16f9a <main+0xde>
			socketDeinit();
   17032:	4b78      	ldr	r3, [pc, #480]	; (17214 <main+0x358>)
   17034:	4798      	blx	r3
			mqtt_deinit(&mqtt_inst);
   17036:	4b72      	ldr	r3, [pc, #456]	; (17200 <main+0x344>)
   17038:	0018      	movs	r0, r3
   1703a:	4b77      	ldr	r3, [pc, #476]	; (17218 <main+0x35c>)
   1703c:	4798      	blx	r3
			ret = m2m_wifi_deinit(&param);
   1703e:	2323      	movs	r3, #35	; 0x23
   17040:	18fc      	adds	r4, r7, r3
   17042:	2308      	movs	r3, #8
   17044:	18fb      	adds	r3, r7, r3
   17046:	0018      	movs	r0, r3
   17048:	4b74      	ldr	r3, [pc, #464]	; (1721c <main+0x360>)
   1704a:	4798      	blx	r3
   1704c:	0003      	movs	r3, r0
   1704e:	7023      	strb	r3, [r4, #0]
			if (M2M_SUCCESS != ret) {
   17050:	2323      	movs	r3, #35	; 0x23
   17052:	18fb      	adds	r3, r7, r3
   17054:	781b      	ldrb	r3, [r3, #0]
   17056:	b25b      	sxtb	r3, r3
   17058:	2b00      	cmp	r3, #0
   1705a:	d009      	beq.n	17070 <main+0x1b4>
				printf("main: m2m_wifi_deinit call error!(%d)\r\n", ret);
   1705c:	2323      	movs	r3, #35	; 0x23
   1705e:	18fb      	adds	r3, r7, r3
   17060:	2200      	movs	r2, #0
   17062:	569a      	ldrsb	r2, [r3, r2]
   17064:	4b6e      	ldr	r3, [pc, #440]	; (17220 <main+0x364>)
   17066:	0011      	movs	r1, r2
   17068:	0018      	movs	r0, r3
   1706a:	4b45      	ldr	r3, [pc, #276]	; (17180 <main+0x2c4>)
   1706c:	4798      	blx	r3
				while (1) { /* Loop forever. */
				}
   1706e:	e7fe      	b.n	1706e <main+0x1b2>
			}
			/* ~~~~~~~~~~~~~~~~Begin HTTP client init~~~~~~~~~~~~~~~~~~*/
			configure_http_client();
   17070:	4b6c      	ldr	r3, [pc, #432]	; (17224 <main+0x368>)
   17072:	4798      	blx	r3
			
			//memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
			
			param.pfAppWifiCb = wifi_cb;
   17074:	2308      	movs	r3, #8
   17076:	18fb      	adds	r3, r7, r3
   17078:	4a6b      	ldr	r2, [pc, #428]	; (17228 <main+0x36c>)
   1707a:	601a      	str	r2, [r3, #0]
			
			ret = m2m_wifi_init(&param);
   1707c:	2323      	movs	r3, #35	; 0x23
   1707e:	18fc      	adds	r4, r7, r3
   17080:	2308      	movs	r3, #8
   17082:	18fb      	adds	r3, r7, r3
   17084:	0018      	movs	r0, r3
   17086:	4b45      	ldr	r3, [pc, #276]	; (1719c <main+0x2e0>)
   17088:	4798      	blx	r3
   1708a:	0003      	movs	r3, r0
   1708c:	7023      	strb	r3, [r4, #0]
			if (M2M_SUCCESS != ret) {
   1708e:	2323      	movs	r3, #35	; 0x23
   17090:	18fb      	adds	r3, r7, r3
   17092:	781b      	ldrb	r3, [r3, #0]
   17094:	b25b      	sxtb	r3, r3
   17096:	2b00      	cmp	r3, #0
   17098:	d009      	beq.n	170ae <main+0x1f2>
				printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   1709a:	2323      	movs	r3, #35	; 0x23
   1709c:	18fb      	adds	r3, r7, r3
   1709e:	2200      	movs	r2, #0
   170a0:	569a      	ldrsb	r2, [r3, r2]
   170a2:	4b62      	ldr	r3, [pc, #392]	; (1722c <main+0x370>)
   170a4:	0011      	movs	r1, r2
   170a6:	0018      	movs	r0, r3
   170a8:	4b35      	ldr	r3, [pc, #212]	; (17180 <main+0x2c4>)
   170aa:	4798      	blx	r3
				while (1) {
				}
   170ac:	e7fe      	b.n	170ac <main+0x1f0>
			}
			
			socketInit();
   170ae:	4b3d      	ldr	r3, [pc, #244]	; (171a4 <main+0x2e8>)
   170b0:	4798      	blx	r3
			registerSocketCallback(socket_cb, resolve_cb);
   170b2:	4a5f      	ldr	r2, [pc, #380]	; (17230 <main+0x374>)
   170b4:	4b5f      	ldr	r3, [pc, #380]	; (17234 <main+0x378>)
   170b6:	0011      	movs	r1, r2
   170b8:	0018      	movs	r0, r3
   170ba:	4b3d      	ldr	r3, [pc, #244]	; (171b0 <main+0x2f4>)
   170bc:	4798      	blx	r3
			printf("Survived http client setup\r\n");
   170be:	4b5e      	ldr	r3, [pc, #376]	; (17238 <main+0x37c>)
   170c0:	0018      	movs	r0, r3
   170c2:	4b49      	ldr	r3, [pc, #292]	; (171e8 <main+0x32c>)
   170c4:	4798      	blx	r3
			/* ~~~~~~~~~~~~~~~~End HTTP client init~~~~~~~~~~~~~~~~~~*/
			Firmware_Status_t fw_status = getFWStat();
   170c6:	003b      	movs	r3, r7
   170c8:	0018      	movs	r0, r3
   170ca:	4b5c      	ldr	r3, [pc, #368]	; (1723c <main+0x380>)
   170cc:	4798      	blx	r3
			if (fw_status.executing_image == 1) {
   170ce:	003b      	movs	r3, r7
   170d0:	791b      	ldrb	r3, [r3, #4]
   170d2:	2b01      	cmp	r3, #1
   170d4:	d103      	bne.n	170de <main+0x222>
				fw_status.downloaded_image = 2;
   170d6:	003b      	movs	r3, r7
   170d8:	2202      	movs	r2, #2
   170da:	715a      	strb	r2, [r3, #5]
   170dc:	e002      	b.n	170e4 <main+0x228>
			}
			else {
				fw_status.downloaded_image = 1;
   170de:	003b      	movs	r3, r7
   170e0:	2201      	movs	r2, #1
   170e2:	715a      	strb	r2, [r3, #5]
			}
			printf("Executing image: %d, DL to: %d\r\n", fw_status.executing_image, fw_status.downloaded_image);
   170e4:	003b      	movs	r3, r7
   170e6:	791b      	ldrb	r3, [r3, #4]
   170e8:	0019      	movs	r1, r3
   170ea:	003b      	movs	r3, r7
   170ec:	795b      	ldrb	r3, [r3, #5]
   170ee:	001a      	movs	r2, r3
   170f0:	4b53      	ldr	r3, [pc, #332]	; (17240 <main+0x384>)
   170f2:	0018      	movs	r0, r3
   170f4:	4b22      	ldr	r3, [pc, #136]	; (17180 <main+0x2c4>)
   170f6:	4798      	blx	r3
			firstCRC=true;
   170f8:	4b52      	ldr	r3, [pc, #328]	; (17244 <main+0x388>)
   170fa:	2201      	movs	r2, #1
   170fc:	701a      	strb	r2, [r3, #0]
			download_firmware(fw_status.downloaded_image);
   170fe:	003b      	movs	r3, r7
   17100:	795b      	ldrb	r3, [r3, #5]
   17102:	0018      	movs	r0, r3
   17104:	4b50      	ldr	r3, [pc, #320]	; (17248 <main+0x38c>)
   17106:	4798      	blx	r3
			printf("\n\rMain: Done downloading firmware and CRC\n\r");
   17108:	4b50      	ldr	r3, [pc, #320]	; (1724c <main+0x390>)
   1710a:	0018      	movs	r0, r3
   1710c:	4b1c      	ldr	r3, [pc, #112]	; (17180 <main+0x2c4>)
   1710e:	4798      	blx	r3
			if (dlCRC == crcChecker){
   17110:	4b4f      	ldr	r3, [pc, #316]	; (17250 <main+0x394>)
   17112:	681a      	ldr	r2, [r3, #0]
   17114:	4b4f      	ldr	r3, [pc, #316]	; (17254 <main+0x398>)
   17116:	681b      	ldr	r3, [r3, #0]
   17118:	429a      	cmp	r2, r3
   1711a:	d110      	bne.n	1713e <main+0x282>
				printf("\n\rMain: CRC MATCHED! starting firmware upgrade. \n\r");
   1711c:	4b4e      	ldr	r3, [pc, #312]	; (17258 <main+0x39c>)
   1711e:	0018      	movs	r0, r3
   17120:	4b17      	ldr	r3, [pc, #92]	; (17180 <main+0x2c4>)
   17122:	4798      	blx	r3
				*(uint32_t*)fw_status.signature = (uint32_t)crcChecker; //replace with checksum of downloaded image
   17124:	003b      	movs	r3, r7
   17126:	4a4b      	ldr	r2, [pc, #300]	; (17254 <main+0x398>)
   17128:	6812      	ldr	r2, [r2, #0]
   1712a:	601a      	str	r2, [r3, #0]
				fw_status.writenew_image = 1;  // write image flag
   1712c:	003b      	movs	r3, r7
   1712e:	2201      	movs	r2, #1
   17130:	719a      	strb	r2, [r3, #6]
				writeFWStat(fw_status);
   17132:	003b      	movs	r3, r7
   17134:	6818      	ldr	r0, [r3, #0]
   17136:	6859      	ldr	r1, [r3, #4]
   17138:	4b48      	ldr	r3, [pc, #288]	; (1725c <main+0x3a0>)
   1713a:	4798      	blx	r3
   1713c:	e003      	b.n	17146 <main+0x28a>
			} 
			else {
				printf("\n\r Main: CRC Check Fail!\n\r");
   1713e:	4b48      	ldr	r3, [pc, #288]	; (17260 <main+0x3a4>)
   17140:	0018      	movs	r0, r3
   17142:	4b0f      	ldr	r3, [pc, #60]	; (17180 <main+0x2c4>)
   17144:	4798      	blx	r3
			}
			// reset to begin writing firmware
			system_reset();
   17146:	4b47      	ldr	r3, [pc, #284]	; (17264 <main+0x3a8>)
   17148:	4798      	blx	r3
		}
	}
   1714a:	e726      	b.n	16f9a <main+0xde>
   1714c:	000155a1 	.word	0x000155a1
   17150:	000165c1 	.word	0x000165c1
   17154:	0001586d 	.word	0x0001586d
   17158:	000164a9 	.word	0x000164a9
   1715c:	00011b31 	.word	0x00011b31
   17160:	00016279 	.word	0x00016279
   17164:	00016301 	.word	0x00016301
   17168:	000164e9 	.word	0x000164e9
   1716c:	00016585 	.word	0x00016585
   17170:	000160f5 	.word	0x000160f5
   17174:	000082a1 	.word	0x000082a1
   17178:	2000001c 	.word	0x2000001c
   1717c:	0001b5ec 	.word	0x0001b5ec
   17180:	00018619 	.word	0x00018619
   17184:	0001b5f8 	.word	0x0001b5f8
   17188:	0001b0bc 	.word	0x0001b0bc
   1718c:	00018495 	.word	0x00018495
   17190:	0001b608 	.word	0x0001b608
   17194:	000184d1 	.word	0x000184d1
   17198:	00015d59 	.word	0x00015d59
   1719c:	00009da5 	.word	0x00009da5
   171a0:	0001b618 	.word	0x0001b618
   171a4:	0000cfd1 	.word	0x0000cfd1
   171a8:	00015e69 	.word	0x00015e69
   171ac:	00015e35 	.word	0x00015e35
   171b0:	0000d069 	.word	0x0000d069
   171b4:	0001b044 	.word	0x0001b044
   171b8:	0001b050 	.word	0x0001b050
   171bc:	00009fd5 	.word	0x00009fd5
   171c0:	20000130 	.word	0x20000130
   171c4:	00009fb9 	.word	0x00009fb9
   171c8:	200002b8 	.word	0x200002b8
   171cc:	20000484 	.word	0x20000484
   171d0:	000142b9 	.word	0x000142b9
   171d4:	200004bc 	.word	0x200004bc
   171d8:	00010bc9 	.word	0x00010bc9
   171dc:	00015785 	.word	0x00015785
   171e0:	20000029 	.word	0x20000029
   171e4:	0001b640 	.word	0x0001b640
   171e8:	00018739 	.word	0x00018739
   171ec:	0001b650 	.word	0x0001b650
   171f0:	20000140 	.word	0x20000140
   171f4:	000188e5 	.word	0x000188e5
   171f8:	0001b654 	.word	0x0001b654
   171fc:	0001b0c4 	.word	0x0001b0c4
   17200:	20000180 	.word	0x20000180
   17204:	00017835 	.word	0x00017835
   17208:	0001b678 	.word	0x0001b678
   1720c:	00011b89 	.word	0x00011b89
   17210:	00016199 	.word	0x00016199
   17214:	0000d021 	.word	0x0000d021
   17218:	000173c9 	.word	0x000173c9
   1721c:	00009f91 	.word	0x00009f91
   17220:	0001b69c 	.word	0x0001b69c
   17224:	00016cb9 	.word	0x00016cb9
   17228:	00016bc5 	.word	0x00016bc5
   1722c:	0001b6c4 	.word	0x0001b6c4
   17230:	00016b69 	.word	0x00016b69
   17234:	00016b35 	.word	0x00016b35
   17238:	0001b6f0 	.word	0x0001b6f0
   1723c:	0001632d 	.word	0x0001632d
   17240:	0001b70c 	.word	0x0001b70c
   17244:	20000018 	.word	0x20000018
   17248:	00016d2d 	.word	0x00016d2d
   1724c:	0001b730 	.word	0x0001b730
   17250:	20000e9c 	.word	0x20000e9c
   17254:	20000e98 	.word	0x20000e98
   17258:	0001b75c 	.word	0x0001b75c
   1725c:	000163ed 	.word	0x000163ed
   17260:	0001b790 	.word	0x0001b790
   17264:	00015859 	.word	0x00015859

00017268 <_hwerr_to_stderr>:
   17268:	1c03      	adds	r3, r0, #0
   1726a:	300e      	adds	r0, #14
   1726c:	b500      	push	{lr}
   1726e:	280e      	cmp	r0, #14
   17270:	d819      	bhi.n	172a6 <_hwerr_to_stderr+0x3e>
   17272:	f000 ff23 	bl	180bc <__gnu_thumb1_case_uqi>
   17276:	1416      	.short	0x1416
   17278:	1b181012 	.word	0x1b181012
   1727c:	180c0e18 	.word	0x180c0e18
   17280:	1d0a0e0e 	.word	0x1d0a0e0e
   17284:	08          	.byte	0x08
   17285:	00          	.byte	0x00
   17286:	2000      	movs	r0, #0
   17288:	e014      	b.n	172b4 <_hwerr_to_stderr+0x4c>
   1728a:	2070      	movs	r0, #112	; 0x70
   1728c:	e011      	b.n	172b2 <_hwerr_to_stderr+0x4a>
   1728e:	2016      	movs	r0, #22
   17290:	e00f      	b.n	172b2 <_hwerr_to_stderr+0x4a>
   17292:	200c      	movs	r0, #12
   17294:	e00d      	b.n	172b2 <_hwerr_to_stderr+0x4a>
   17296:	2079      	movs	r0, #121	; 0x79
   17298:	e00b      	b.n	172b2 <_hwerr_to_stderr+0x4a>
   1729a:	2068      	movs	r0, #104	; 0x68
   1729c:	e009      	b.n	172b2 <_hwerr_to_stderr+0x4a>
   1729e:	200b      	movs	r0, #11
   172a0:	e007      	b.n	172b2 <_hwerr_to_stderr+0x4a>
   172a2:	2010      	movs	r0, #16
   172a4:	e005      	b.n	172b2 <_hwerr_to_stderr+0x4a>
   172a6:	2000      	movs	r0, #0
   172a8:	4283      	cmp	r3, r0
   172aa:	da03      	bge.n	172b4 <_hwerr_to_stderr+0x4c>
   172ac:	2005      	movs	r0, #5
   172ae:	e000      	b.n	172b2 <_hwerr_to_stderr+0x4a>
   172b0:	2002      	movs	r0, #2
   172b2:	4240      	negs	r0, r0
   172b4:	bd00      	pop	{pc}
	...

000172b8 <_mqtt_send_wait>:
   172b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   172ba:	1c04      	adds	r4, r0, #0
   172bc:	3443      	adds	r4, #67	; 0x43
   172be:	7823      	ldrb	r3, [r4, #0]
   172c0:	1c05      	adds	r5, r0, #0
   172c2:	07d8      	lsls	r0, r3, #31
   172c4:	d51c      	bpl.n	17300 <_mqtt_send_wait+0x48>
   172c6:	2604      	movs	r6, #4
   172c8:	4333      	orrs	r3, r6
   172ca:	7023      	strb	r3, [r4, #0]
   172cc:	2002      	movs	r0, #2
   172ce:	5628      	ldrsb	r0, [r5, r0]
   172d0:	b292      	uxth	r2, r2
   172d2:	2300      	movs	r3, #0
   172d4:	4f0c      	ldr	r7, [pc, #48]	; (17308 <_mqtt_send_wait+0x50>)
   172d6:	47b8      	blx	r7
   172d8:	2800      	cmp	r0, #0
   172da:	da05      	bge.n	172e8 <_mqtt_send_wait+0x30>
   172dc:	7823      	ldrb	r3, [r4, #0]
   172de:	43b3      	bics	r3, r6
   172e0:	7023      	strb	r3, [r4, #0]
   172e2:	4b0a      	ldr	r3, [pc, #40]	; (1730c <_mqtt_send_wait+0x54>)
   172e4:	4798      	blx	r3
   172e6:	e00d      	b.n	17304 <_mqtt_send_wait+0x4c>
   172e8:	7822      	ldrb	r2, [r4, #0]
   172ea:	2314      	movs	r3, #20
   172ec:	4013      	ands	r3, r2
   172ee:	2000      	movs	r0, #0
   172f0:	2b04      	cmp	r3, #4
   172f2:	d107      	bne.n	17304 <_mqtt_send_wait+0x4c>
   172f4:	4b06      	ldr	r3, [pc, #24]	; (17310 <_mqtt_send_wait+0x58>)
   172f6:	4798      	blx	r3
   172f8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   172fa:	4b06      	ldr	r3, [pc, #24]	; (17314 <_mqtt_send_wait+0x5c>)
   172fc:	4798      	blx	r3
   172fe:	e7f3      	b.n	172e8 <_mqtt_send_wait+0x30>
   17300:	2001      	movs	r0, #1
   17302:	4240      	negs	r0, r0
   17304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17306:	46c0      	nop			; (mov r8, r8)
   17308:	0000d3b5 	.word	0x0000d3b5
   1730c:	00017269 	.word	0x00017269
   17310:	00009fb9 	.word	0x00009fb9
   17314:	00010bc9 	.word	0x00010bc9

00017318 <mqtt_get_config_defaults>:
   17318:	4b07      	ldr	r3, [pc, #28]	; (17338 <mqtt_get_config_defaults+0x20>)
   1731a:	2240      	movs	r2, #64	; 0x40
   1731c:	8003      	strh	r3, [r0, #0]
   1731e:	2396      	movs	r3, #150	; 0x96
   17320:	009b      	lsls	r3, r3, #2
   17322:	8103      	strh	r3, [r0, #8]
   17324:	6102      	str	r2, [r0, #16]
   17326:	2300      	movs	r3, #0
   17328:	2220      	movs	r2, #32
   1732a:	7083      	strb	r3, [r0, #2]
   1732c:	6043      	str	r3, [r0, #4]
   1732e:	60c3      	str	r3, [r0, #12]
   17330:	6142      	str	r2, [r0, #20]
   17332:	7603      	strb	r3, [r0, #24]
   17334:	4770      	bx	lr
   17336:	46c0      	nop			; (mov r8, r8)
   17338:	0000075b 	.word	0x0000075b

0001733c <mqtt_init>:
   1733c:	b538      	push	{r3, r4, r5, lr}
   1733e:	1c04      	adds	r4, r0, #0
   17340:	1c0d      	adds	r5, r1, #0
   17342:	2800      	cmp	r0, #0
   17344:	d030      	beq.n	173a8 <mqtt_init+0x6c>
   17346:	2900      	cmp	r1, #0
   17348:	d02e      	beq.n	173a8 <mqtt_init+0x6c>
   1734a:	690b      	ldr	r3, [r1, #16]
   1734c:	2b00      	cmp	r3, #0
   1734e:	d02b      	beq.n	173a8 <mqtt_init+0x6c>
   17350:	684b      	ldr	r3, [r1, #4]
   17352:	2b00      	cmp	r3, #0
   17354:	d028      	beq.n	173a8 <mqtt_init+0x6c>
   17356:	2100      	movs	r1, #0
   17358:	2274      	movs	r2, #116	; 0x74
   1735a:	4b16      	ldr	r3, [pc, #88]	; (173b4 <mqtt_init+0x78>)
   1735c:	4798      	blx	r3
   1735e:	1c20      	adds	r0, r4, #0
   17360:	4b15      	ldr	r3, [pc, #84]	; (173b8 <mqtt_init+0x7c>)
   17362:	3058      	adds	r0, #88	; 0x58
   17364:	1c29      	adds	r1, r5, #0
   17366:	221c      	movs	r2, #28
   17368:	4798      	blx	r3
   1736a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1736c:	2b00      	cmp	r3, #0
   1736e:	d10b      	bne.n	17388 <mqtt_init+0x4c>
   17370:	6928      	ldr	r0, [r5, #16]
   17372:	4b12      	ldr	r3, [pc, #72]	; (173bc <mqtt_init+0x80>)
   17374:	4798      	blx	r3
   17376:	6660      	str	r0, [r4, #100]	; 0x64
   17378:	2800      	cmp	r0, #0
   1737a:	d017      	beq.n	173ac <mqtt_init+0x70>
   1737c:	1c23      	adds	r3, r4, #0
   1737e:	3343      	adds	r3, #67	; 0x43
   17380:	781a      	ldrb	r2, [r3, #0]
   17382:	2120      	movs	r1, #32
   17384:	430a      	orrs	r2, r1
   17386:	701a      	strb	r2, [r3, #0]
   17388:	892a      	ldrh	r2, [r5, #8]
   1738a:	23fa      	movs	r3, #250	; 0xfa
   1738c:	005b      	lsls	r3, r3, #1
   1738e:	4353      	muls	r3, r2
   17390:	6868      	ldr	r0, [r5, #4]
   17392:	490b      	ldr	r1, [pc, #44]	; (173c0 <mqtt_init+0x84>)
   17394:	1c22      	adds	r2, r4, #0
   17396:	4d0b      	ldr	r5, [pc, #44]	; (173c4 <mqtt_init+0x88>)
   17398:	47a8      	blx	r5
   1739a:	1c03      	adds	r3, r0, #0
   1739c:	6520      	str	r0, [r4, #80]	; 0x50
   1739e:	2000      	movs	r0, #0
   173a0:	4283      	cmp	r3, r0
   173a2:	da05      	bge.n	173b0 <mqtt_init+0x74>
   173a4:	201c      	movs	r0, #28
   173a6:	e002      	b.n	173ae <mqtt_init+0x72>
   173a8:	2016      	movs	r0, #22
   173aa:	e000      	b.n	173ae <mqtt_init+0x72>
   173ac:	200c      	movs	r0, #12
   173ae:	4240      	negs	r0, r0
   173b0:	bd38      	pop	{r3, r4, r5, pc}
   173b2:	46c0      	nop			; (mov r8, r8)
   173b4:	000184d1 	.word	0x000184d1
   173b8:	00018495 	.word	0x00018495
   173bc:	0001846d 	.word	0x0001846d
   173c0:	00017b89 	.word	0x00017b89
   173c4:	00010a91 	.word	0x00010a91

000173c8 <mqtt_deinit>:
   173c8:	b510      	push	{r4, lr}
   173ca:	1e04      	subs	r4, r0, #0
   173cc:	d014      	beq.n	173f8 <mqtt_deinit+0x30>
   173ce:	6e40      	ldr	r0, [r0, #100]	; 0x64
   173d0:	2800      	cmp	r0, #0
   173d2:	d008      	beq.n	173e6 <mqtt_deinit+0x1e>
   173d4:	1c23      	adds	r3, r4, #0
   173d6:	3343      	adds	r3, #67	; 0x43
   173d8:	781b      	ldrb	r3, [r3, #0]
   173da:	069a      	lsls	r2, r3, #26
   173dc:	d503      	bpl.n	173e6 <mqtt_deinit+0x1e>
   173de:	4b09      	ldr	r3, [pc, #36]	; (17404 <mqtt_deinit+0x3c>)
   173e0:	4798      	blx	r3
   173e2:	2300      	movs	r3, #0
   173e4:	6663      	str	r3, [r4, #100]	; 0x64
   173e6:	6d21      	ldr	r1, [r4, #80]	; 0x50
   173e8:	2900      	cmp	r1, #0
   173ea:	db08      	blt.n	173fe <mqtt_deinit+0x36>
   173ec:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   173ee:	2800      	cmp	r0, #0
   173f0:	d006      	beq.n	17400 <mqtt_deinit+0x38>
   173f2:	4b05      	ldr	r3, [pc, #20]	; (17408 <mqtt_deinit+0x40>)
   173f4:	4798      	blx	r3
   173f6:	e002      	b.n	173fe <mqtt_deinit+0x36>
   173f8:	2016      	movs	r0, #22
   173fa:	4240      	negs	r0, r0
   173fc:	e000      	b.n	17400 <mqtt_deinit+0x38>
   173fe:	2000      	movs	r0, #0
   17400:	bd10      	pop	{r4, pc}
   17402:	46c0      	nop			; (mov r8, r8)
   17404:	00018481 	.word	0x00018481
   17408:	00010b21 	.word	0x00010b21

0001740c <mqtt_register_callback>:
   1740c:	2800      	cmp	r0, #0
   1740e:	d002      	beq.n	17416 <mqtt_register_callback+0xa>
   17410:	6541      	str	r1, [r0, #84]	; 0x54
   17412:	2000      	movs	r0, #0
   17414:	e001      	b.n	1741a <mqtt_register_callback+0xe>
   17416:	2016      	movs	r0, #22
   17418:	4240      	negs	r0, r0
   1741a:	4770      	bx	lr

0001741c <mqtt_socket_resolve_handler>:
   1741c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1741e:	1c06      	adds	r6, r0, #0
   17420:	b085      	sub	sp, #20
   17422:	1c0f      	adds	r7, r1, #0
   17424:	2400      	movs	r4, #0
   17426:	4b0f      	ldr	r3, [pc, #60]	; (17464 <mqtt_socket_resolve_handler+0x48>)
   17428:	58e5      	ldr	r5, [r4, r3]
   1742a:	2d00      	cmp	r5, #0
   1742c:	d015      	beq.n	1745a <mqtt_socket_resolve_handler+0x3e>
   1742e:	1ce9      	adds	r1, r5, #3
   17430:	1c30      	adds	r0, r6, #0
   17432:	4b0d      	ldr	r3, [pc, #52]	; (17468 <mqtt_socket_resolve_handler+0x4c>)
   17434:	4798      	blx	r3
   17436:	2800      	cmp	r0, #0
   17438:	d10f      	bne.n	1745a <mqtt_socket_resolve_handler+0x3e>
   1743a:	466a      	mov	r2, sp
   1743c:	2302      	movs	r3, #2
   1743e:	8013      	strh	r3, [r2, #0]
   17440:	1c2b      	adds	r3, r5, #0
   17442:	3358      	adds	r3, #88	; 0x58
   17444:	881b      	ldrh	r3, [r3, #0]
   17446:	9701      	str	r7, [sp, #4]
   17448:	ba5b      	rev16	r3, r3
   1744a:	8053      	strh	r3, [r2, #2]
   1744c:	2002      	movs	r0, #2
   1744e:	5628      	ldrsb	r0, [r5, r0]
   17450:	4669      	mov	r1, sp
   17452:	2210      	movs	r2, #16
   17454:	4b05      	ldr	r3, [pc, #20]	; (1746c <mqtt_socket_resolve_handler+0x50>)
   17456:	4798      	blx	r3
   17458:	e002      	b.n	17460 <mqtt_socket_resolve_handler+0x44>
   1745a:	3404      	adds	r4, #4
   1745c:	2c1c      	cmp	r4, #28
   1745e:	d1e2      	bne.n	17426 <mqtt_socket_resolve_handler+0xa>
   17460:	b005      	add	sp, #20
   17462:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17464:	200002bc 	.word	0x200002bc
   17468:	00018929 	.word	0x00018929
   1746c:	0000d2a1 	.word	0x0000d2a1

00017470 <mqtt_connect>:
   17470:	b5f0      	push	{r4, r5, r6, r7, lr}
   17472:	1c04      	adds	r4, r0, #0
   17474:	b089      	sub	sp, #36	; 0x24
   17476:	1c0d      	adds	r5, r1, #0
   17478:	2800      	cmp	r0, #0
   1747a:	d051      	beq.n	17520 <mqtt_connect+0xb0>
   1747c:	2900      	cmp	r1, #0
   1747e:	d04f      	beq.n	17520 <mqtt_connect+0xb0>
   17480:	1c08      	adds	r0, r1, #0
   17482:	4b39      	ldr	r3, [pc, #228]	; (17568 <mqtt_connect+0xf8>)
   17484:	4798      	blx	r3
   17486:	2840      	cmp	r0, #64	; 0x40
   17488:	d84c      	bhi.n	17524 <mqtt_connect+0xb4>
   1748a:	1c21      	adds	r1, r4, #0
   1748c:	3143      	adds	r1, #67	; 0x43
   1748e:	780b      	ldrb	r3, [r1, #0]
   17490:	9101      	str	r1, [sp, #4]
   17492:	07db      	lsls	r3, r3, #31
   17494:	0fd9      	lsrs	r1, r3, #31
   17496:	466a      	mov	r2, sp
   17498:	b2ce      	uxtb	r6, r1
   1749a:	1ce0      	adds	r0, r4, #3
   1749c:	7211      	strb	r1, [r2, #8]
   1749e:	2e00      	cmp	r6, #0
   174a0:	d142      	bne.n	17528 <mqtt_connect+0xb8>
   174a2:	2701      	movs	r7, #1
   174a4:	1c29      	adds	r1, r5, #0
   174a6:	4b31      	ldr	r3, [pc, #196]	; (1756c <mqtt_connect+0xfc>)
   174a8:	8027      	strh	r7, [r4, #0]
   174aa:	4798      	blx	r3
   174ac:	9a01      	ldr	r2, [sp, #4]
   174ae:	2002      	movs	r0, #2
   174b0:	7813      	ldrb	r3, [r2, #0]
   174b2:	9901      	ldr	r1, [sp, #4]
   174b4:	43bb      	bics	r3, r7
   174b6:	4383      	bics	r3, r0
   174b8:	22e3      	movs	r2, #227	; 0xe3
   174ba:	4013      	ands	r3, r2
   174bc:	466a      	mov	r2, sp
   174be:	700b      	strb	r3, [r1, #0]
   174c0:	7a12      	ldrb	r2, [r2, #8]
   174c2:	1c23      	adds	r3, r4, #0
   174c4:	3348      	adds	r3, #72	; 0x48
   174c6:	6466      	str	r6, [r4, #68]	; 0x44
   174c8:	701a      	strb	r2, [r3, #0]
   174ca:	7c9a      	ldrb	r2, [r3, #18]
   174cc:	805e      	strh	r6, [r3, #2]
   174ce:	1e53      	subs	r3, r2, #1
   174d0:	419a      	sbcs	r2, r3
   174d2:	b2d2      	uxtb	r2, r2
   174d4:	1c39      	adds	r1, r7, #0
   174d6:	4b26      	ldr	r3, [pc, #152]	; (17570 <mqtt_connect+0x100>)
   174d8:	4798      	blx	r3
   174da:	70a0      	strb	r0, [r4, #2]
   174dc:	2800      	cmp	r0, #0
   174de:	db25      	blt.n	1752c <mqtt_connect+0xbc>
   174e0:	4b24      	ldr	r3, [pc, #144]	; (17574 <mqtt_connect+0x104>)
   174e2:	0080      	lsls	r0, r0, #2
   174e4:	50c4      	str	r4, [r0, r3]
   174e6:	1c2b      	adds	r3, r5, #0
   174e8:	781f      	ldrb	r7, [r3, #0]
   174ea:	2f00      	cmp	r7, #0
   174ec:	d026      	beq.n	1753c <mqtt_connect+0xcc>
   174ee:	2220      	movs	r2, #32
   174f0:	1c39      	adds	r1, r7, #0
   174f2:	4391      	bics	r1, r2
   174f4:	1c0a      	adds	r2, r1, #0
   174f6:	3a41      	subs	r2, #65	; 0x41
   174f8:	b2d2      	uxtb	r2, r2
   174fa:	3301      	adds	r3, #1
   174fc:	2a05      	cmp	r2, #5
   174fe:	d90d      	bls.n	1751c <mqtt_connect+0xac>
   17500:	2f3a      	cmp	r7, #58	; 0x3a
   17502:	d00b      	beq.n	1751c <mqtt_connect+0xac>
   17504:	2f2f      	cmp	r7, #47	; 0x2f
   17506:	d009      	beq.n	1751c <mqtt_connect+0xac>
   17508:	2f2e      	cmp	r7, #46	; 0x2e
   1750a:	d102      	bne.n	17512 <mqtt_connect+0xa2>
   1750c:	2e00      	cmp	r6, #0
   1750e:	d0eb      	beq.n	174e8 <mqtt_connect+0x78>
   17510:	e00f      	b.n	17532 <mqtt_connect+0xc2>
   17512:	2230      	movs	r2, #48	; 0x30
   17514:	4017      	ands	r7, r2
   17516:	4297      	cmp	r7, r2
   17518:	d0e6      	beq.n	174e8 <mqtt_connect+0x78>
   1751a:	e00a      	b.n	17532 <mqtt_connect+0xc2>
   1751c:	2601      	movs	r6, #1
   1751e:	e7e3      	b.n	174e8 <mqtt_connect+0x78>
   17520:	2016      	movs	r0, #22
   17522:	e004      	b.n	1752e <mqtt_connect+0xbe>
   17524:	205b      	movs	r0, #91	; 0x5b
   17526:	e002      	b.n	1752e <mqtt_connect+0xbe>
   17528:	2078      	movs	r0, #120	; 0x78
   1752a:	e000      	b.n	1752e <mqtt_connect+0xbe>
   1752c:	201c      	movs	r0, #28
   1752e:	4240      	negs	r0, r0
   17530:	e017      	b.n	17562 <mqtt_connect+0xf2>
   17532:	1c28      	adds	r0, r5, #0
   17534:	4b10      	ldr	r3, [pc, #64]	; (17578 <mqtt_connect+0x108>)
   17536:	4798      	blx	r3
   17538:	2000      	movs	r0, #0
   1753a:	e012      	b.n	17562 <mqtt_connect+0xf2>
   1753c:	466a      	mov	r2, sp
   1753e:	2302      	movs	r3, #2
   17540:	8213      	strh	r3, [r2, #16]
   17542:	1c23      	adds	r3, r4, #0
   17544:	3358      	adds	r3, #88	; 0x58
   17546:	881b      	ldrh	r3, [r3, #0]
   17548:	1c28      	adds	r0, r5, #0
   1754a:	ba5b      	rev16	r3, r3
   1754c:	8253      	strh	r3, [r2, #18]
   1754e:	4b0b      	ldr	r3, [pc, #44]	; (1757c <mqtt_connect+0x10c>)
   17550:	4798      	blx	r3
   17552:	9005      	str	r0, [sp, #20]
   17554:	2002      	movs	r0, #2
   17556:	5620      	ldrsb	r0, [r4, r0]
   17558:	a904      	add	r1, sp, #16
   1755a:	2210      	movs	r2, #16
   1755c:	4b08      	ldr	r3, [pc, #32]	; (17580 <mqtt_connect+0x110>)
   1755e:	4798      	blx	r3
   17560:	1c38      	adds	r0, r7, #0
   17562:	b009      	add	sp, #36	; 0x24
   17564:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17566:	46c0      	nop			; (mov r8, r8)
   17568:	00018987 	.word	0x00018987
   1756c:	0001893d 	.word	0x0001893d
   17570:	0000d091 	.word	0x0000d091
   17574:	200002bc 	.word	0x200002bc
   17578:	0000d8dd 	.word	0x0000d8dd
   1757c:	0000d7d5 	.word	0x0000d7d5
   17580:	0000d2a1 	.word	0x0000d2a1

00017584 <mqtt_connect_broker>:
   17584:	b5f0      	push	{r4, r5, r6, r7, lr}
   17586:	b095      	sub	sp, #84	; 0x54
   17588:	af02      	add	r7, sp, #8
   1758a:	617b      	str	r3, [r7, #20]
   1758c:	1c3b      	adds	r3, r7, #0
   1758e:	3370      	adds	r3, #112	; 0x70
   17590:	781b      	ldrb	r3, [r3, #0]
   17592:	1c05      	adds	r5, r0, #0
   17594:	60fb      	str	r3, [r7, #12]
   17596:	1c3b      	adds	r3, r7, #0
   17598:	3374      	adds	r3, #116	; 0x74
   1759a:	781b      	ldrb	r3, [r3, #0]
   1759c:	6139      	str	r1, [r7, #16]
   1759e:	61fa      	str	r2, [r7, #28]
   175a0:	60bb      	str	r3, [r7, #8]
   175a2:	2800      	cmp	r0, #0
   175a4:	d101      	bne.n	175aa <mqtt_connect_broker+0x26>
   175a6:	2016      	movs	r0, #22
   175a8:	e129      	b.n	177fe <mqtt_connect_broker+0x27a>
   175aa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   175ac:	4668      	mov	r0, sp
   175ae:	3307      	adds	r3, #7
   175b0:	08db      	lsrs	r3, r3, #3
   175b2:	00db      	lsls	r3, r3, #3
   175b4:	1ac0      	subs	r0, r0, r3
   175b6:	4685      	mov	sp, r0
   175b8:	ac02      	add	r4, sp, #8
   175ba:	607c      	str	r4, [r7, #4]
   175bc:	6e3c      	ldr	r4, [r7, #96]	; 0x60
   175be:	2c00      	cmp	r4, #0
   175c0:	d0f1      	beq.n	175a6 <mqtt_connect_broker+0x22>
   175c2:	1c2b      	adds	r3, r5, #0
   175c4:	3343      	adds	r3, #67	; 0x43
   175c6:	781b      	ldrb	r3, [r3, #0]
   175c8:	07d8      	lsls	r0, r3, #31
   175ca:	d400      	bmi.n	175ce <mqtt_connect_broker+0x4a>
   175cc:	e112      	b.n	177f4 <mqtt_connect_broker+0x270>
   175ce:	079a      	lsls	r2, r3, #30
   175d0:	d500      	bpl.n	175d4 <mqtt_connect_broker+0x50>
   175d2:	e111      	b.n	177f8 <mqtt_connect_broker+0x274>
   175d4:	071c      	lsls	r4, r3, #28
   175d6:	d40b      	bmi.n	175f0 <mqtt_connect_broker+0x6c>
   175d8:	4e8b      	ldr	r6, [pc, #556]	; (17808 <mqtt_connect_broker+0x284>)
   175da:	6e38      	ldr	r0, [r7, #96]	; 0x60
   175dc:	47b0      	blx	r6
   175de:	1c03      	adds	r3, r0, #0
   175e0:	61b8      	str	r0, [r7, #24]
   175e2:	69f8      	ldr	r0, [r7, #28]
   175e4:	330e      	adds	r3, #14
   175e6:	1c34      	adds	r4, r6, #0
   175e8:	2800      	cmp	r0, #0
   175ea:	d113      	bne.n	17614 <mqtt_connect_broker+0x90>
   175ec:	1c1e      	adds	r6, r3, #0
   175ee:	e01d      	b.n	1762c <mqtt_connect_broker+0xa8>
   175f0:	1c2b      	adds	r3, r5, #0
   175f2:	3370      	adds	r3, #112	; 0x70
   175f4:	781b      	ldrb	r3, [r3, #0]
   175f6:	2b00      	cmp	r3, #0
   175f8:	d000      	beq.n	175fc <mqtt_connect_broker+0x78>
   175fa:	e0ff      	b.n	177fc <mqtt_connect_broker+0x278>
   175fc:	1c2b      	adds	r3, r5, #0
   175fe:	3343      	adds	r3, #67	; 0x43
   17600:	781b      	ldrb	r3, [r3, #0]
   17602:	071a      	lsls	r2, r3, #28
   17604:	d5e8      	bpl.n	175d8 <mqtt_connect_broker+0x54>
   17606:	4b81      	ldr	r3, [pc, #516]	; (1780c <mqtt_connect_broker+0x288>)
   17608:	2000      	movs	r0, #0
   1760a:	4798      	blx	r3
   1760c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   1760e:	4b80      	ldr	r3, [pc, #512]	; (17810 <mqtt_connect_broker+0x28c>)
   17610:	4798      	blx	r3
   17612:	e7f3      	b.n	175fc <mqtt_connect_broker+0x78>
   17614:	69f8      	ldr	r0, [r7, #28]
   17616:	47b0      	blx	r6
   17618:	69be      	ldr	r6, [r7, #24]
   1761a:	697b      	ldr	r3, [r7, #20]
   1761c:	3610      	adds	r6, #16
   1761e:	1836      	adds	r6, r6, r0
   17620:	2b00      	cmp	r3, #0
   17622:	d003      	beq.n	1762c <mqtt_connect_broker+0xa8>
   17624:	1c18      	adds	r0, r3, #0
   17626:	47a0      	blx	r4
   17628:	3602      	adds	r6, #2
   1762a:	1836      	adds	r6, r6, r0
   1762c:	6e78      	ldr	r0, [r7, #100]	; 0x64
   1762e:	2800      	cmp	r0, #0
   17630:	d007      	beq.n	17642 <mqtt_connect_broker+0xbe>
   17632:	47a0      	blx	r4
   17634:	3602      	adds	r6, #2
   17636:	6efc      	ldr	r4, [r7, #108]	; 0x6c
   17638:	1830      	adds	r0, r6, r0
   1763a:	1906      	adds	r6, r0, r4
   1763c:	2c00      	cmp	r4, #0
   1763e:	d100      	bne.n	17642 <mqtt_connect_broker+0xbe>
   17640:	1c06      	adds	r6, r0, #0
   17642:	69fc      	ldr	r4, [r7, #28]
   17644:	2c00      	cmp	r4, #0
   17646:	d006      	beq.n	17656 <mqtt_connect_broker+0xd2>
   17648:	24c0      	movs	r4, #192	; 0xc0
   1764a:	61bc      	str	r4, [r7, #24]
   1764c:	697c      	ldr	r4, [r7, #20]
   1764e:	2c00      	cmp	r4, #0
   17650:	d103      	bne.n	1765a <mqtt_connect_broker+0xd6>
   17652:	2480      	movs	r4, #128	; 0x80
   17654:	e000      	b.n	17658 <mqtt_connect_broker+0xd4>
   17656:	69fc      	ldr	r4, [r7, #28]
   17658:	61bc      	str	r4, [r7, #24]
   1765a:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   1765c:	2c00      	cmp	r4, #0
   1765e:	d00f      	beq.n	17680 <mqtt_connect_broker+0xfc>
   17660:	68bc      	ldr	r4, [r7, #8]
   17662:	2c00      	cmp	r4, #0
   17664:	d003      	beq.n	1766e <mqtt_connect_broker+0xea>
   17666:	69bc      	ldr	r4, [r7, #24]
   17668:	2320      	movs	r3, #32
   1766a:	431c      	orrs	r4, r3
   1766c:	61bc      	str	r4, [r7, #24]
   1766e:	68fc      	ldr	r4, [r7, #12]
   17670:	2303      	movs	r3, #3
   17672:	4023      	ands	r3, r4
   17674:	00db      	lsls	r3, r3, #3
   17676:	69bc      	ldr	r4, [r7, #24]
   17678:	2204      	movs	r2, #4
   1767a:	4313      	orrs	r3, r2
   1767c:	431c      	orrs	r4, r3
   1767e:	61bc      	str	r4, [r7, #24]
   17680:	693c      	ldr	r4, [r7, #16]
   17682:	2c00      	cmp	r4, #0
   17684:	d003      	beq.n	1768e <mqtt_connect_broker+0x10a>
   17686:	69bc      	ldr	r4, [r7, #24]
   17688:	2302      	movs	r3, #2
   1768a:	431c      	orrs	r4, r3
   1768c:	61bc      	str	r4, [r7, #24]
   1768e:	1c2b      	adds	r3, r5, #0
   17690:	3343      	adds	r3, #67	; 0x43
   17692:	781a      	ldrb	r2, [r3, #0]
   17694:	2108      	movs	r1, #8
   17696:	430a      	orrs	r2, r1
   17698:	701a      	strb	r2, [r3, #0]
   1769a:	1c38      	adds	r0, r7, #0
   1769c:	9500      	str	r5, [sp, #0]
   1769e:	3020      	adds	r0, #32
   176a0:	6879      	ldr	r1, [r7, #4]
   176a2:	4b5c      	ldr	r3, [pc, #368]	; (17814 <mqtt_connect_broker+0x290>)
   176a4:	6eea      	ldr	r2, [r5, #108]	; 0x6c
   176a6:	4c5c      	ldr	r4, [pc, #368]	; (17818 <mqtt_connect_broker+0x294>)
   176a8:	47a0      	blx	r4
   176aa:	1c38      	adds	r0, r7, #0
   176ac:	3020      	adds	r0, #32
   176ae:	2110      	movs	r1, #16
   176b0:	4b5a      	ldr	r3, [pc, #360]	; (1781c <mqtt_connect_broker+0x298>)
   176b2:	4798      	blx	r3
   176b4:	2e80      	cmp	r6, #128	; 0x80
   176b6:	dd09      	ble.n	176cc <mqtt_connect_broker+0x148>
   176b8:	2180      	movs	r1, #128	; 0x80
   176ba:	4249      	negs	r1, r1
   176bc:	4331      	orrs	r1, r6
   176be:	1c38      	adds	r0, r7, #0
   176c0:	b249      	sxtb	r1, r1
   176c2:	3020      	adds	r0, #32
   176c4:	4c55      	ldr	r4, [pc, #340]	; (1781c <mqtt_connect_broker+0x298>)
   176c6:	47a0      	blx	r4
   176c8:	11f6      	asrs	r6, r6, #7
   176ca:	e7f3      	b.n	176b4 <mqtt_connect_broker+0x130>
   176cc:	4b54      	ldr	r3, [pc, #336]	; (17820 <mqtt_connect_broker+0x29c>)
   176ce:	401e      	ands	r6, r3
   176d0:	d504      	bpl.n	176dc <mqtt_connect_broker+0x158>
   176d2:	2380      	movs	r3, #128	; 0x80
   176d4:	3e01      	subs	r6, #1
   176d6:	425b      	negs	r3, r3
   176d8:	431e      	orrs	r6, r3
   176da:	3601      	adds	r6, #1
   176dc:	1c38      	adds	r0, r7, #0
   176de:	b271      	sxtb	r1, r6
   176e0:	3020      	adds	r0, #32
   176e2:	4c4e      	ldr	r4, [pc, #312]	; (1781c <mqtt_connect_broker+0x298>)
   176e4:	47a0      	blx	r4
   176e6:	1c38      	adds	r0, r7, #0
   176e8:	4c4e      	ldr	r4, [pc, #312]	; (17824 <mqtt_connect_broker+0x2a0>)
   176ea:	3020      	adds	r0, #32
   176ec:	2106      	movs	r1, #6
   176ee:	47a0      	blx	r4
   176f0:	1c38      	adds	r0, r7, #0
   176f2:	4b4d      	ldr	r3, [pc, #308]	; (17828 <mqtt_connect_broker+0x2a4>)
   176f4:	3020      	adds	r0, #32
   176f6:	494d      	ldr	r1, [pc, #308]	; (1782c <mqtt_connect_broker+0x2a8>)
   176f8:	2206      	movs	r2, #6
   176fa:	4798      	blx	r3
   176fc:	1c38      	adds	r0, r7, #0
   176fe:	3020      	adds	r0, #32
   17700:	2103      	movs	r1, #3
   17702:	4a46      	ldr	r2, [pc, #280]	; (1781c <mqtt_connect_broker+0x298>)
   17704:	4790      	blx	r2
   17706:	69bb      	ldr	r3, [r7, #24]
   17708:	1c38      	adds	r0, r7, #0
   1770a:	4a44      	ldr	r2, [pc, #272]	; (1781c <mqtt_connect_broker+0x298>)
   1770c:	b259      	sxtb	r1, r3
   1770e:	3020      	adds	r0, #32
   17710:	4790      	blx	r2
   17712:	1c2b      	adds	r3, r5, #0
   17714:	3360      	adds	r3, #96	; 0x60
   17716:	2000      	movs	r0, #0
   17718:	5e19      	ldrsh	r1, [r3, r0]
   1771a:	1c38      	adds	r0, r7, #0
   1771c:	3020      	adds	r0, #32
   1771e:	47a0      	blx	r4
   17720:	4e39      	ldr	r6, [pc, #228]	; (17808 <mqtt_connect_broker+0x284>)
   17722:	6e38      	ldr	r0, [r7, #96]	; 0x60
   17724:	47b0      	blx	r6
   17726:	b201      	sxth	r1, r0
   17728:	1c38      	adds	r0, r7, #0
   1772a:	3020      	adds	r0, #32
   1772c:	47a0      	blx	r4
   1772e:	6e38      	ldr	r0, [r7, #96]	; 0x60
   17730:	47b0      	blx	r6
   17732:	1c02      	adds	r2, r0, #0
   17734:	1c38      	adds	r0, r7, #0
   17736:	3020      	adds	r0, #32
   17738:	6e39      	ldr	r1, [r7, #96]	; 0x60
   1773a:	4b3b      	ldr	r3, [pc, #236]	; (17828 <mqtt_connect_broker+0x2a4>)
   1773c:	4798      	blx	r3
   1773e:	6e78      	ldr	r0, [r7, #100]	; 0x64
   17740:	2800      	cmp	r0, #0
   17742:	d015      	beq.n	17770 <mqtt_connect_broker+0x1ec>
   17744:	47b0      	blx	r6
   17746:	b201      	sxth	r1, r0
   17748:	1c38      	adds	r0, r7, #0
   1774a:	3020      	adds	r0, #32
   1774c:	47a0      	blx	r4
   1774e:	6e78      	ldr	r0, [r7, #100]	; 0x64
   17750:	47b0      	blx	r6
   17752:	1c02      	adds	r2, r0, #0
   17754:	1c38      	adds	r0, r7, #0
   17756:	4c34      	ldr	r4, [pc, #208]	; (17828 <mqtt_connect_broker+0x2a4>)
   17758:	3020      	adds	r0, #32
   1775a:	6e79      	ldr	r1, [r7, #100]	; 0x64
   1775c:	47a0      	blx	r4
   1775e:	6ebc      	ldr	r4, [r7, #104]	; 0x68
   17760:	2c00      	cmp	r4, #0
   17762:	d005      	beq.n	17770 <mqtt_connect_broker+0x1ec>
   17764:	1c38      	adds	r0, r7, #0
   17766:	1c21      	adds	r1, r4, #0
   17768:	3020      	adds	r0, #32
   1776a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1776c:	4c2e      	ldr	r4, [pc, #184]	; (17828 <mqtt_connect_broker+0x2a4>)
   1776e:	47a0      	blx	r4
   17770:	69fc      	ldr	r4, [r7, #28]
   17772:	2c00      	cmp	r4, #0
   17774:	d01f      	beq.n	177b6 <mqtt_connect_broker+0x232>
   17776:	4e24      	ldr	r6, [pc, #144]	; (17808 <mqtt_connect_broker+0x284>)
   17778:	1c20      	adds	r0, r4, #0
   1777a:	47b0      	blx	r6
   1777c:	b201      	sxth	r1, r0
   1777e:	1c38      	adds	r0, r7, #0
   17780:	3020      	adds	r0, #32
   17782:	4c28      	ldr	r4, [pc, #160]	; (17824 <mqtt_connect_broker+0x2a0>)
   17784:	47a0      	blx	r4
   17786:	69f8      	ldr	r0, [r7, #28]
   17788:	47b0      	blx	r6
   1778a:	1c02      	adds	r2, r0, #0
   1778c:	1c38      	adds	r0, r7, #0
   1778e:	3020      	adds	r0, #32
   17790:	69f9      	ldr	r1, [r7, #28]
   17792:	4c25      	ldr	r4, [pc, #148]	; (17828 <mqtt_connect_broker+0x2a4>)
   17794:	47a0      	blx	r4
   17796:	6978      	ldr	r0, [r7, #20]
   17798:	2800      	cmp	r0, #0
   1779a:	d00c      	beq.n	177b6 <mqtt_connect_broker+0x232>
   1779c:	47b0      	blx	r6
   1779e:	b201      	sxth	r1, r0
   177a0:	1c38      	adds	r0, r7, #0
   177a2:	4a20      	ldr	r2, [pc, #128]	; (17824 <mqtt_connect_broker+0x2a0>)
   177a4:	3020      	adds	r0, #32
   177a6:	4790      	blx	r2
   177a8:	6978      	ldr	r0, [r7, #20]
   177aa:	47b0      	blx	r6
   177ac:	1c02      	adds	r2, r0, #0
   177ae:	1c38      	adds	r0, r7, #0
   177b0:	3020      	adds	r0, #32
   177b2:	6979      	ldr	r1, [r7, #20]
   177b4:	47a0      	blx	r4
   177b6:	1c38      	adds	r0, r7, #0
   177b8:	1c2c      	adds	r4, r5, #0
   177ba:	3020      	adds	r0, #32
   177bc:	4b1c      	ldr	r3, [pc, #112]	; (17830 <mqtt_connect_broker+0x2ac>)
   177be:	3443      	adds	r4, #67	; 0x43
   177c0:	4798      	blx	r3
   177c2:	7821      	ldrb	r1, [r4, #0]
   177c4:	0789      	lsls	r1, r1, #30
   177c6:	0fc9      	lsrs	r1, r1, #31
   177c8:	2901      	cmp	r1, #1
   177ca:	d10b      	bne.n	177e4 <mqtt_connect_broker+0x260>
   177cc:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   177ce:	2a00      	cmp	r2, #0
   177d0:	d108      	bne.n	177e4 <mqtt_connect_broker+0x260>
   177d2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   177d4:	2b00      	cmp	r3, #0
   177d6:	d005      	beq.n	177e4 <mqtt_connect_broker+0x260>
   177d8:	2034      	movs	r0, #52	; 0x34
   177da:	55c2      	strb	r2, [r0, r7]
   177dc:	1c3a      	adds	r2, r7, #0
   177de:	1c28      	adds	r0, r5, #0
   177e0:	3234      	adds	r2, #52	; 0x34
   177e2:	4798      	blx	r3
   177e4:	7823      	ldrb	r3, [r4, #0]
   177e6:	2202      	movs	r2, #2
   177e8:	4313      	orrs	r3, r2
   177ea:	2208      	movs	r2, #8
   177ec:	4393      	bics	r3, r2
   177ee:	7023      	strb	r3, [r4, #0]
   177f0:	2000      	movs	r0, #0
   177f2:	e005      	b.n	17800 <mqtt_connect_broker+0x27c>
   177f4:	2080      	movs	r0, #128	; 0x80
   177f6:	e002      	b.n	177fe <mqtt_connect_broker+0x27a>
   177f8:	2078      	movs	r0, #120	; 0x78
   177fa:	e000      	b.n	177fe <mqtt_connect_broker+0x27a>
   177fc:	200b      	movs	r0, #11
   177fe:	4240      	negs	r0, r0
   17800:	46bd      	mov	sp, r7
   17802:	b013      	add	sp, #76	; 0x4c
   17804:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17806:	46c0      	nop			; (mov r8, r8)
   17808:	00018987 	.word	0x00018987
   1780c:	00009fb9 	.word	0x00009fb9
   17810:	00010bc9 	.word	0x00010bc9
   17814:	000172b9 	.word	0x000172b9
   17818:	000107b9 	.word	0x000107b9
   1781c:	000107ed 	.word	0x000107ed
   17820:	8000007f 	.word	0x8000007f
   17824:	00010839 	.word	0x00010839
   17828:	00010879 	.word	0x00010879
   1782c:	0001b7c0 	.word	0x0001b7c0
   17830:	000108b5 	.word	0x000108b5

00017834 <mqtt_publish>:
   17834:	b5f0      	push	{r4, r5, r6, r7, lr}
   17836:	b093      	sub	sp, #76	; 0x4c
   17838:	af02      	add	r7, sp, #8
   1783a:	60fb      	str	r3, [r7, #12]
   1783c:	1c3b      	adds	r3, r7, #0
   1783e:	3358      	adds	r3, #88	; 0x58
   17840:	781b      	ldrb	r3, [r3, #0]
   17842:	1c04      	adds	r4, r0, #0
   17844:	613b      	str	r3, [r7, #16]
   17846:	1c3b      	adds	r3, r7, #0
   17848:	335c      	adds	r3, #92	; 0x5c
   1784a:	781b      	ldrb	r3, [r3, #0]
   1784c:	6179      	str	r1, [r7, #20]
   1784e:	60ba      	str	r2, [r7, #8]
   17850:	607b      	str	r3, [r7, #4]
   17852:	2800      	cmp	r0, #0
   17854:	d101      	bne.n	1785a <mqtt_publish+0x26>
   17856:	2516      	movs	r5, #22
   17858:	e0a7      	b.n	179aa <mqtt_publish+0x176>
   1785a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1785c:	466a      	mov	r2, sp
   1785e:	3307      	adds	r3, #7
   17860:	08db      	lsrs	r3, r3, #3
   17862:	00db      	lsls	r3, r3, #3
   17864:	1ad2      	subs	r2, r2, r3
   17866:	697b      	ldr	r3, [r7, #20]
   17868:	4695      	mov	sp, r2
   1786a:	ae02      	add	r6, sp, #8
   1786c:	2b00      	cmp	r3, #0
   1786e:	d0f2      	beq.n	17856 <mqtt_publish+0x22>
   17870:	693a      	ldr	r2, [r7, #16]
   17872:	2a02      	cmp	r2, #2
   17874:	d8ef      	bhi.n	17856 <mqtt_publish+0x22>
   17876:	1c05      	adds	r5, r0, #0
   17878:	3543      	adds	r5, #67	; 0x43
   1787a:	782b      	ldrb	r3, [r5, #0]
   1787c:	079a      	lsls	r2, r3, #30
   1787e:	d400      	bmi.n	17882 <mqtt_publish+0x4e>
   17880:	e090      	b.n	179a4 <mqtt_publish+0x170>
   17882:	071a      	lsls	r2, r3, #28
   17884:	d40a      	bmi.n	1789c <mqtt_publish+0x68>
   17886:	4b4b      	ldr	r3, [pc, #300]	; (179b4 <mqtt_publish+0x180>)
   17888:	6978      	ldr	r0, [r7, #20]
   1788a:	4798      	blx	r3
   1788c:	68fd      	ldr	r5, [r7, #12]
   1788e:	693b      	ldr	r3, [r7, #16]
   17890:	3502      	adds	r5, #2
   17892:	182d      	adds	r5, r5, r0
   17894:	2b00      	cmp	r3, #0
   17896:	d011      	beq.n	178bc <mqtt_publish+0x88>
   17898:	3502      	adds	r5, #2
   1789a:	e00f      	b.n	178bc <mqtt_publish+0x88>
   1789c:	1c03      	adds	r3, r0, #0
   1789e:	3370      	adds	r3, #112	; 0x70
   178a0:	781b      	ldrb	r3, [r3, #0]
   178a2:	2b00      	cmp	r3, #0
   178a4:	d000      	beq.n	178a8 <mqtt_publish+0x74>
   178a6:	e07f      	b.n	179a8 <mqtt_publish+0x174>
   178a8:	782b      	ldrb	r3, [r5, #0]
   178aa:	071a      	lsls	r2, r3, #28
   178ac:	d5eb      	bpl.n	17886 <mqtt_publish+0x52>
   178ae:	4b42      	ldr	r3, [pc, #264]	; (179b8 <mqtt_publish+0x184>)
   178b0:	2000      	movs	r0, #0
   178b2:	4798      	blx	r3
   178b4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   178b6:	4b41      	ldr	r3, [pc, #260]	; (179bc <mqtt_publish+0x188>)
   178b8:	4798      	blx	r3
   178ba:	e7f5      	b.n	178a8 <mqtt_publish+0x74>
   178bc:	1c23      	adds	r3, r4, #0
   178be:	3343      	adds	r3, #67	; 0x43
   178c0:	781a      	ldrb	r2, [r3, #0]
   178c2:	2108      	movs	r1, #8
   178c4:	430a      	orrs	r2, r1
   178c6:	701a      	strb	r2, [r3, #0]
   178c8:	1c38      	adds	r0, r7, #0
   178ca:	9400      	str	r4, [sp, #0]
   178cc:	1c31      	adds	r1, r6, #0
   178ce:	302c      	adds	r0, #44	; 0x2c
   178d0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   178d2:	4b3b      	ldr	r3, [pc, #236]	; (179c0 <mqtt_publish+0x18c>)
   178d4:	4e3b      	ldr	r6, [pc, #236]	; (179c4 <mqtt_publish+0x190>)
   178d6:	47b0      	blx	r6
   178d8:	687b      	ldr	r3, [r7, #4]
   178da:	2101      	movs	r1, #1
   178dc:	4019      	ands	r1, r3
   178de:	2330      	movs	r3, #48	; 0x30
   178e0:	4319      	orrs	r1, r3
   178e2:	693b      	ldr	r3, [r7, #16]
   178e4:	1c38      	adds	r0, r7, #0
   178e6:	005a      	lsls	r2, r3, #1
   178e8:	2306      	movs	r3, #6
   178ea:	4013      	ands	r3, r2
   178ec:	4319      	orrs	r1, r3
   178ee:	302c      	adds	r0, #44	; 0x2c
   178f0:	4b35      	ldr	r3, [pc, #212]	; (179c8 <mqtt_publish+0x194>)
   178f2:	4798      	blx	r3
   178f4:	4b34      	ldr	r3, [pc, #208]	; (179c8 <mqtt_publish+0x194>)
   178f6:	2d80      	cmp	r5, #128	; 0x80
   178f8:	dd08      	ble.n	1790c <mqtt_publish+0xd8>
   178fa:	2180      	movs	r1, #128	; 0x80
   178fc:	4249      	negs	r1, r1
   178fe:	4329      	orrs	r1, r5
   17900:	1c38      	adds	r0, r7, #0
   17902:	b249      	sxtb	r1, r1
   17904:	302c      	adds	r0, #44	; 0x2c
   17906:	4798      	blx	r3
   17908:	11ed      	asrs	r5, r5, #7
   1790a:	e7f3      	b.n	178f4 <mqtt_publish+0xc0>
   1790c:	4a2f      	ldr	r2, [pc, #188]	; (179cc <mqtt_publish+0x198>)
   1790e:	4015      	ands	r5, r2
   17910:	d504      	bpl.n	1791c <mqtt_publish+0xe8>
   17912:	2280      	movs	r2, #128	; 0x80
   17914:	3d01      	subs	r5, #1
   17916:	4252      	negs	r2, r2
   17918:	4315      	orrs	r5, r2
   1791a:	3501      	adds	r5, #1
   1791c:	1c38      	adds	r0, r7, #0
   1791e:	b269      	sxtb	r1, r5
   17920:	302c      	adds	r0, #44	; 0x2c
   17922:	4798      	blx	r3
   17924:	4e23      	ldr	r6, [pc, #140]	; (179b4 <mqtt_publish+0x180>)
   17926:	6978      	ldr	r0, [r7, #20]
   17928:	47b0      	blx	r6
   1792a:	b201      	sxth	r1, r0
   1792c:	1c38      	adds	r0, r7, #0
   1792e:	302c      	adds	r0, #44	; 0x2c
   17930:	4d27      	ldr	r5, [pc, #156]	; (179d0 <mqtt_publish+0x19c>)
   17932:	47a8      	blx	r5
   17934:	6978      	ldr	r0, [r7, #20]
   17936:	47b0      	blx	r6
   17938:	1c02      	adds	r2, r0, #0
   1793a:	1c38      	adds	r0, r7, #0
   1793c:	302c      	adds	r0, #44	; 0x2c
   1793e:	6979      	ldr	r1, [r7, #20]
   17940:	4e24      	ldr	r6, [pc, #144]	; (179d4 <mqtt_publish+0x1a0>)
   17942:	47b0      	blx	r6
   17944:	693a      	ldr	r2, [r7, #16]
   17946:	2a00      	cmp	r2, #0
   17948:	d006      	beq.n	17958 <mqtt_publish+0x124>
   1794a:	8821      	ldrh	r1, [r4, #0]
   1794c:	1c38      	adds	r0, r7, #0
   1794e:	1c4b      	adds	r3, r1, #1
   17950:	8023      	strh	r3, [r4, #0]
   17952:	b209      	sxth	r1, r1
   17954:	302c      	adds	r0, #44	; 0x2c
   17956:	47a8      	blx	r5
   17958:	8823      	ldrh	r3, [r4, #0]
   1795a:	2b00      	cmp	r3, #0
   1795c:	d101      	bne.n	17962 <mqtt_publish+0x12e>
   1795e:	2301      	movs	r3, #1
   17960:	8023      	strh	r3, [r4, #0]
   17962:	68bb      	ldr	r3, [r7, #8]
   17964:	2b00      	cmp	r3, #0
   17966:	d006      	beq.n	17976 <mqtt_publish+0x142>
   17968:	68fa      	ldr	r2, [r7, #12]
   1796a:	2a00      	cmp	r2, #0
   1796c:	d003      	beq.n	17976 <mqtt_publish+0x142>
   1796e:	1c38      	adds	r0, r7, #0
   17970:	302c      	adds	r0, #44	; 0x2c
   17972:	1c19      	adds	r1, r3, #0
   17974:	47b0      	blx	r6
   17976:	1c38      	adds	r0, r7, #0
   17978:	4b17      	ldr	r3, [pc, #92]	; (179d8 <mqtt_publish+0x1a4>)
   1797a:	302c      	adds	r0, #44	; 0x2c
   1797c:	4798      	blx	r3
   1797e:	1c23      	adds	r3, r4, #0
   17980:	3343      	adds	r3, #67	; 0x43
   17982:	781a      	ldrb	r2, [r3, #0]
   17984:	2108      	movs	r1, #8
   17986:	438a      	bics	r2, r1
   17988:	701a      	strb	r2, [r3, #0]
   1798a:	693b      	ldr	r3, [r7, #16]
   1798c:	2500      	movs	r5, #0
   1798e:	42ab      	cmp	r3, r5
   17990:	d10c      	bne.n	179ac <mqtt_publish+0x178>
   17992:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17994:	42ab      	cmp	r3, r5
   17996:	d009      	beq.n	179ac <mqtt_publish+0x178>
   17998:	1c3a      	adds	r2, r7, #0
   1799a:	1c20      	adds	r0, r4, #0
   1799c:	2102      	movs	r1, #2
   1799e:	3218      	adds	r2, #24
   179a0:	4798      	blx	r3
   179a2:	e003      	b.n	179ac <mqtt_publish+0x178>
   179a4:	2580      	movs	r5, #128	; 0x80
   179a6:	e000      	b.n	179aa <mqtt_publish+0x176>
   179a8:	250b      	movs	r5, #11
   179aa:	426d      	negs	r5, r5
   179ac:	1c28      	adds	r0, r5, #0
   179ae:	46bd      	mov	sp, r7
   179b0:	b011      	add	sp, #68	; 0x44
   179b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   179b4:	00018987 	.word	0x00018987
   179b8:	00009fb9 	.word	0x00009fb9
   179bc:	00010bc9 	.word	0x00010bc9
   179c0:	000172b9 	.word	0x000172b9
   179c4:	000107b9 	.word	0x000107b9
   179c8:	000107ed 	.word	0x000107ed
   179cc:	8000007f 	.word	0x8000007f
   179d0:	00010839 	.word	0x00010839
   179d4:	00010879 	.word	0x00010879
   179d8:	000108b5 	.word	0x000108b5

000179dc <mqtt_subscribe>:
   179dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   179de:	b08d      	sub	sp, #52	; 0x34
   179e0:	af02      	add	r7, sp, #8
   179e2:	1c04      	adds	r4, r0, #0
   179e4:	60b9      	str	r1, [r7, #8]
   179e6:	607a      	str	r2, [r7, #4]
   179e8:	d101      	bne.n	179ee <mqtt_subscribe+0x12>
   179ea:	2016      	movs	r0, #22
   179ec:	e086      	b.n	17afc <mqtt_subscribe+0x120>
   179ee:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   179f0:	466a      	mov	r2, sp
   179f2:	3307      	adds	r3, #7
   179f4:	08db      	lsrs	r3, r3, #3
   179f6:	00db      	lsls	r3, r3, #3
   179f8:	1ad2      	subs	r2, r2, r3
   179fa:	4695      	mov	sp, r2
   179fc:	ad02      	add	r5, sp, #8
   179fe:	603d      	str	r5, [r7, #0]
   17a00:	68bd      	ldr	r5, [r7, #8]
   17a02:	2d00      	cmp	r5, #0
   17a04:	d0f1      	beq.n	179ea <mqtt_subscribe+0xe>
   17a06:	687d      	ldr	r5, [r7, #4]
   17a08:	2d02      	cmp	r5, #2
   17a0a:	d8ee      	bhi.n	179ea <mqtt_subscribe+0xe>
   17a0c:	1c05      	adds	r5, r0, #0
   17a0e:	3543      	adds	r5, #67	; 0x43
   17a10:	782b      	ldrb	r3, [r5, #0]
   17a12:	079a      	lsls	r2, r3, #30
   17a14:	d56f      	bpl.n	17af6 <mqtt_subscribe+0x11a>
   17a16:	071a      	lsls	r2, r3, #28
   17a18:	d41a      	bmi.n	17a50 <mqtt_subscribe+0x74>
   17a1a:	68b8      	ldr	r0, [r7, #8]
   17a1c:	4d39      	ldr	r5, [pc, #228]	; (17b04 <mqtt_subscribe+0x128>)
   17a1e:	47a8      	blx	r5
   17a20:	1c25      	adds	r5, r4, #0
   17a22:	3543      	adds	r5, #67	; 0x43
   17a24:	782b      	ldrb	r3, [r5, #0]
   17a26:	2208      	movs	r2, #8
   17a28:	4313      	orrs	r3, r2
   17a2a:	702b      	strb	r3, [r5, #0]
   17a2c:	60fd      	str	r5, [r7, #12]
   17a2e:	1d46      	adds	r6, r0, #5
   17a30:	9400      	str	r4, [sp, #0]
   17a32:	1c38      	adds	r0, r7, #0
   17a34:	3014      	adds	r0, #20
   17a36:	6839      	ldr	r1, [r7, #0]
   17a38:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   17a3a:	4b33      	ldr	r3, [pc, #204]	; (17b08 <mqtt_subscribe+0x12c>)
   17a3c:	4d33      	ldr	r5, [pc, #204]	; (17b0c <mqtt_subscribe+0x130>)
   17a3e:	47a8      	blx	r5
   17a40:	1c38      	adds	r0, r7, #0
   17a42:	217e      	movs	r1, #126	; 0x7e
   17a44:	3014      	adds	r0, #20
   17a46:	4249      	negs	r1, r1
   17a48:	4b31      	ldr	r3, [pc, #196]	; (17b10 <mqtt_subscribe+0x134>)
   17a4a:	4798      	blx	r3
   17a4c:	4d2d      	ldr	r5, [pc, #180]	; (17b04 <mqtt_subscribe+0x128>)
   17a4e:	e00e      	b.n	17a6e <mqtt_subscribe+0x92>
   17a50:	1c03      	adds	r3, r0, #0
   17a52:	3370      	adds	r3, #112	; 0x70
   17a54:	781b      	ldrb	r3, [r3, #0]
   17a56:	2b00      	cmp	r3, #0
   17a58:	d14f      	bne.n	17afa <mqtt_subscribe+0x11e>
   17a5a:	782b      	ldrb	r3, [r5, #0]
   17a5c:	071a      	lsls	r2, r3, #28
   17a5e:	d5dc      	bpl.n	17a1a <mqtt_subscribe+0x3e>
   17a60:	4b2c      	ldr	r3, [pc, #176]	; (17b14 <mqtt_subscribe+0x138>)
   17a62:	2000      	movs	r0, #0
   17a64:	4798      	blx	r3
   17a66:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   17a68:	4b2b      	ldr	r3, [pc, #172]	; (17b18 <mqtt_subscribe+0x13c>)
   17a6a:	4798      	blx	r3
   17a6c:	e7f5      	b.n	17a5a <mqtt_subscribe+0x7e>
   17a6e:	4b28      	ldr	r3, [pc, #160]	; (17b10 <mqtt_subscribe+0x134>)
   17a70:	2e80      	cmp	r6, #128	; 0x80
   17a72:	dd08      	ble.n	17a86 <mqtt_subscribe+0xaa>
   17a74:	2180      	movs	r1, #128	; 0x80
   17a76:	4249      	negs	r1, r1
   17a78:	4331      	orrs	r1, r6
   17a7a:	1c38      	adds	r0, r7, #0
   17a7c:	b249      	sxtb	r1, r1
   17a7e:	3014      	adds	r0, #20
   17a80:	4798      	blx	r3
   17a82:	11f6      	asrs	r6, r6, #7
   17a84:	e7f3      	b.n	17a6e <mqtt_subscribe+0x92>
   17a86:	4925      	ldr	r1, [pc, #148]	; (17b1c <mqtt_subscribe+0x140>)
   17a88:	4031      	ands	r1, r6
   17a8a:	d504      	bpl.n	17a96 <mqtt_subscribe+0xba>
   17a8c:	2280      	movs	r2, #128	; 0x80
   17a8e:	3901      	subs	r1, #1
   17a90:	4252      	negs	r2, r2
   17a92:	4311      	orrs	r1, r2
   17a94:	3101      	adds	r1, #1
   17a96:	1c38      	adds	r0, r7, #0
   17a98:	b249      	sxtb	r1, r1
   17a9a:	3014      	adds	r0, #20
   17a9c:	4798      	blx	r3
   17a9e:	8821      	ldrh	r1, [r4, #0]
   17aa0:	1c38      	adds	r0, r7, #0
   17aa2:	1c4b      	adds	r3, r1, #1
   17aa4:	8023      	strh	r3, [r4, #0]
   17aa6:	b209      	sxth	r1, r1
   17aa8:	3014      	adds	r0, #20
   17aaa:	4e1d      	ldr	r6, [pc, #116]	; (17b20 <mqtt_subscribe+0x144>)
   17aac:	47b0      	blx	r6
   17aae:	8823      	ldrh	r3, [r4, #0]
   17ab0:	2b00      	cmp	r3, #0
   17ab2:	d101      	bne.n	17ab8 <mqtt_subscribe+0xdc>
   17ab4:	2301      	movs	r3, #1
   17ab6:	8023      	strh	r3, [r4, #0]
   17ab8:	68b8      	ldr	r0, [r7, #8]
   17aba:	47a8      	blx	r5
   17abc:	b201      	sxth	r1, r0
   17abe:	1c38      	adds	r0, r7, #0
   17ac0:	3014      	adds	r0, #20
   17ac2:	47b0      	blx	r6
   17ac4:	68b8      	ldr	r0, [r7, #8]
   17ac6:	47a8      	blx	r5
   17ac8:	1c02      	adds	r2, r0, #0
   17aca:	1c38      	adds	r0, r7, #0
   17acc:	3014      	adds	r0, #20
   17ace:	68b9      	ldr	r1, [r7, #8]
   17ad0:	4b14      	ldr	r3, [pc, #80]	; (17b24 <mqtt_subscribe+0x148>)
   17ad2:	4798      	blx	r3
   17ad4:	687d      	ldr	r5, [r7, #4]
   17ad6:	1c38      	adds	r0, r7, #0
   17ad8:	b269      	sxtb	r1, r5
   17ada:	3014      	adds	r0, #20
   17adc:	4b0c      	ldr	r3, [pc, #48]	; (17b10 <mqtt_subscribe+0x134>)
   17ade:	4798      	blx	r3
   17ae0:	1c38      	adds	r0, r7, #0
   17ae2:	3014      	adds	r0, #20
   17ae4:	4b10      	ldr	r3, [pc, #64]	; (17b28 <mqtt_subscribe+0x14c>)
   17ae6:	4798      	blx	r3
   17ae8:	68fd      	ldr	r5, [r7, #12]
   17aea:	2208      	movs	r2, #8
   17aec:	782b      	ldrb	r3, [r5, #0]
   17aee:	2000      	movs	r0, #0
   17af0:	4393      	bics	r3, r2
   17af2:	702b      	strb	r3, [r5, #0]
   17af4:	e003      	b.n	17afe <mqtt_subscribe+0x122>
   17af6:	2080      	movs	r0, #128	; 0x80
   17af8:	e000      	b.n	17afc <mqtt_subscribe+0x120>
   17afa:	200b      	movs	r0, #11
   17afc:	4240      	negs	r0, r0
   17afe:	46bd      	mov	sp, r7
   17b00:	b00b      	add	sp, #44	; 0x2c
   17b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17b04:	00018987 	.word	0x00018987
   17b08:	000172b9 	.word	0x000172b9
   17b0c:	000107b9 	.word	0x000107b9
   17b10:	000107ed 	.word	0x000107ed
   17b14:	00009fb9 	.word	0x00009fb9
   17b18:	00010bc9 	.word	0x00010bc9
   17b1c:	8000007f 	.word	0x8000007f
   17b20:	00010839 	.word	0x00010839
   17b24:	00010879 	.word	0x00010879
   17b28:	000108b5 	.word	0x000108b5

00017b2c <_mqtt_ping>:
   17b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17b2e:	23c0      	movs	r3, #192	; 0xc0
   17b30:	a901      	add	r1, sp, #4
   17b32:	2500      	movs	r5, #0
   17b34:	700b      	strb	r3, [r1, #0]
   17b36:	704d      	strb	r5, [r1, #1]
   17b38:	42a8      	cmp	r0, r5
   17b3a:	d019      	beq.n	17b70 <_mqtt_ping+0x44>
   17b3c:	1c04      	adds	r4, r0, #0
   17b3e:	3443      	adds	r4, #67	; 0x43
   17b40:	7823      	ldrb	r3, [r4, #0]
   17b42:	079a      	lsls	r2, r3, #30
   17b44:	d516      	bpl.n	17b74 <_mqtt_ping+0x48>
   17b46:	071a      	lsls	r2, r3, #28
   17b48:	d416      	bmi.n	17b78 <_mqtt_ping+0x4c>
   17b4a:	2608      	movs	r6, #8
   17b4c:	4333      	orrs	r3, r6
   17b4e:	7023      	strb	r3, [r4, #0]
   17b50:	7880      	ldrb	r0, [r0, #2]
   17b52:	1c2b      	adds	r3, r5, #0
   17b54:	b240      	sxtb	r0, r0
   17b56:	2202      	movs	r2, #2
   17b58:	4f09      	ldr	r7, [pc, #36]	; (17b80 <_mqtt_ping+0x54>)
   17b5a:	47b8      	blx	r7
   17b5c:	1c2b      	adds	r3, r5, #0
   17b5e:	42a8      	cmp	r0, r5
   17b60:	da0c      	bge.n	17b7c <_mqtt_ping+0x50>
   17b62:	7823      	ldrb	r3, [r4, #0]
   17b64:	43b3      	bics	r3, r6
   17b66:	7023      	strb	r3, [r4, #0]
   17b68:	4b06      	ldr	r3, [pc, #24]	; (17b84 <_mqtt_ping+0x58>)
   17b6a:	4798      	blx	r3
   17b6c:	1c03      	adds	r3, r0, #0
   17b6e:	e005      	b.n	17b7c <_mqtt_ping+0x50>
   17b70:	2316      	movs	r3, #22
   17b72:	e002      	b.n	17b7a <_mqtt_ping+0x4e>
   17b74:	2380      	movs	r3, #128	; 0x80
   17b76:	e000      	b.n	17b7a <_mqtt_ping+0x4e>
   17b78:	230b      	movs	r3, #11
   17b7a:	425b      	negs	r3, r3
   17b7c:	1c18      	adds	r0, r3, #0
   17b7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17b80:	0000d3b5 	.word	0x0000d3b5
   17b84:	00017269 	.word	0x00017269

00017b88 <mqtt_timer_callback>:
   17b88:	b570      	push	{r4, r5, r6, lr}
   17b8a:	1c05      	adds	r5, r0, #0
   17b8c:	b086      	sub	sp, #24
   17b8e:	1c0e      	adds	r6, r1, #0
   17b90:	1c14      	adds	r4, r2, #0
   17b92:	2800      	cmp	r0, #0
   17b94:	d012      	beq.n	17bbc <mqtt_timer_callback+0x34>
   17b96:	2a00      	cmp	r2, #0
   17b98:	d010      	beq.n	17bbc <mqtt_timer_callback+0x34>
   17b9a:	1c10      	adds	r0, r2, #0
   17b9c:	4b08      	ldr	r3, [pc, #32]	; (17bc0 <mqtt_timer_callback+0x38>)
   17b9e:	4798      	blx	r3
   17ba0:	2800      	cmp	r0, #0
   17ba2:	da04      	bge.n	17bae <mqtt_timer_callback+0x26>
   17ba4:	1c28      	adds	r0, r5, #0
   17ba6:	1c31      	adds	r1, r6, #0
   17ba8:	2200      	movs	r2, #0
   17baa:	4b06      	ldr	r3, [pc, #24]	; (17bc4 <mqtt_timer_callback+0x3c>)
   17bac:	e005      	b.n	17bba <mqtt_timer_callback+0x32>
   17bae:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17bb0:	2b00      	cmp	r3, #0
   17bb2:	d003      	beq.n	17bbc <mqtt_timer_callback+0x34>
   17bb4:	1c20      	adds	r0, r4, #0
   17bb6:	2107      	movs	r1, #7
   17bb8:	aa01      	add	r2, sp, #4
   17bba:	4798      	blx	r3
   17bbc:	b006      	add	sp, #24
   17bbe:	bd70      	pop	{r4, r5, r6, pc}
   17bc0:	00017b2d 	.word	0x00017b2d
   17bc4:	00010b4d 	.word	0x00010b4d

00017bc8 <_mqtt_puback>:
   17bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17bca:	2302      	movs	r3, #2
   17bcc:	ac01      	add	r4, sp, #4
   17bce:	2700      	movs	r7, #0
   17bd0:	7063      	strb	r3, [r4, #1]
   17bd2:	42b8      	cmp	r0, r7
   17bd4:	d01e      	beq.n	17c14 <_mqtt_puback+0x4c>
   17bd6:	1c05      	adds	r5, r0, #0
   17bd8:	3543      	adds	r5, #67	; 0x43
   17bda:	782b      	ldrb	r3, [r5, #0]
   17bdc:	079e      	lsls	r6, r3, #30
   17bde:	d51b      	bpl.n	17c18 <_mqtt_puback+0x50>
   17be0:	071e      	lsls	r6, r3, #28
   17be2:	d41b      	bmi.n	17c1c <_mqtt_puback+0x54>
   17be4:	2608      	movs	r6, #8
   17be6:	4333      	orrs	r3, r6
   17be8:	702b      	strb	r3, [r5, #0]
   17bea:	7880      	ldrb	r0, [r0, #2]
   17bec:	7021      	strb	r1, [r4, #0]
   17bee:	0a11      	lsrs	r1, r2, #8
   17bf0:	70a1      	strb	r1, [r4, #2]
   17bf2:	70e2      	strb	r2, [r4, #3]
   17bf4:	1c21      	adds	r1, r4, #0
   17bf6:	1c3b      	adds	r3, r7, #0
   17bf8:	b240      	sxtb	r0, r0
   17bfa:	2204      	movs	r2, #4
   17bfc:	4c09      	ldr	r4, [pc, #36]	; (17c24 <_mqtt_puback+0x5c>)
   17bfe:	47a0      	blx	r4
   17c00:	1c3b      	adds	r3, r7, #0
   17c02:	42b8      	cmp	r0, r7
   17c04:	da0c      	bge.n	17c20 <_mqtt_puback+0x58>
   17c06:	782b      	ldrb	r3, [r5, #0]
   17c08:	43b3      	bics	r3, r6
   17c0a:	702b      	strb	r3, [r5, #0]
   17c0c:	4b06      	ldr	r3, [pc, #24]	; (17c28 <_mqtt_puback+0x60>)
   17c0e:	4798      	blx	r3
   17c10:	1c03      	adds	r3, r0, #0
   17c12:	e005      	b.n	17c20 <_mqtt_puback+0x58>
   17c14:	2316      	movs	r3, #22
   17c16:	e002      	b.n	17c1e <_mqtt_puback+0x56>
   17c18:	2380      	movs	r3, #128	; 0x80
   17c1a:	e000      	b.n	17c1e <_mqtt_puback+0x56>
   17c1c:	230b      	movs	r3, #11
   17c1e:	425b      	negs	r3, r3
   17c20:	1c18      	adds	r0, r3, #0
   17c22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17c24:	0000d3b5 	.word	0x0000d3b5
   17c28:	00017269 	.word	0x00017269

00017c2c <mqtt_clear_conn>:
   17c2c:	b530      	push	{r4, r5, lr}
   17c2e:	1c04      	adds	r4, r0, #0
   17c30:	b087      	sub	sp, #28
   17c32:	2800      	cmp	r0, #0
   17c34:	d01c      	beq.n	17c70 <mqtt_clear_conn+0x44>
   17c36:	2002      	movs	r0, #2
   17c38:	4b0e      	ldr	r3, [pc, #56]	; (17c74 <mqtt_clear_conn+0x48>)
   17c3a:	5620      	ldrsb	r0, [r4, r0]
   17c3c:	4798      	blx	r3
   17c3e:	1c23      	adds	r3, r4, #0
   17c40:	3343      	adds	r3, #67	; 0x43
   17c42:	781a      	ldrb	r2, [r3, #0]
   17c44:	21fc      	movs	r1, #252	; 0xfc
   17c46:	0795      	lsls	r5, r2, #30
   17c48:	400a      	ands	r2, r1
   17c4a:	701a      	strb	r2, [r3, #0]
   17c4c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   17c4e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   17c50:	9301      	str	r3, [sp, #4]
   17c52:	2300      	movs	r3, #0
   17c54:	64e3      	str	r3, [r4, #76]	; 0x4c
   17c56:	6d21      	ldr	r1, [r4, #80]	; 0x50
   17c58:	4b07      	ldr	r3, [pc, #28]	; (17c78 <mqtt_clear_conn+0x4c>)
   17c5a:	4798      	blx	r3
   17c5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17c5e:	0fed      	lsrs	r5, r5, #31
   17c60:	2b00      	cmp	r3, #0
   17c62:	d005      	beq.n	17c70 <mqtt_clear_conn+0x44>
   17c64:	2d00      	cmp	r5, #0
   17c66:	d003      	beq.n	17c70 <mqtt_clear_conn+0x44>
   17c68:	1c20      	adds	r0, r4, #0
   17c6a:	2105      	movs	r1, #5
   17c6c:	aa01      	add	r2, sp, #4
   17c6e:	4798      	blx	r3
   17c70:	b007      	add	sp, #28
   17c72:	bd30      	pop	{r4, r5, pc}
   17c74:	0000d699 	.word	0x0000d699
   17c78:	00010b9d 	.word	0x00010b9d

00017c7c <mqtt_disconnect>:
   17c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17c7e:	23e0      	movs	r3, #224	; 0xe0
   17c80:	ae01      	add	r6, sp, #4
   17c82:	2700      	movs	r7, #0
   17c84:	1c05      	adds	r5, r0, #0
   17c86:	7033      	strb	r3, [r6, #0]
   17c88:	7077      	strb	r7, [r6, #1]
   17c8a:	42b8      	cmp	r0, r7
   17c8c:	d036      	beq.n	17cfc <mqtt_disconnect+0x80>
   17c8e:	1c04      	adds	r4, r0, #0
   17c90:	3443      	adds	r4, #67	; 0x43
   17c92:	7823      	ldrb	r3, [r4, #0]
   17c94:	079a      	lsls	r2, r3, #30
   17c96:	d533      	bpl.n	17d00 <mqtt_disconnect+0x84>
   17c98:	42b9      	cmp	r1, r7
   17c9a:	d12b      	bne.n	17cf4 <mqtt_disconnect+0x78>
   17c9c:	071a      	lsls	r2, r3, #28
   17c9e:	d414      	bmi.n	17cca <mqtt_disconnect+0x4e>
   17ca0:	7823      	ldrb	r3, [r4, #0]
   17ca2:	2210      	movs	r2, #16
   17ca4:	4313      	orrs	r3, r2
   17ca6:	2708      	movs	r7, #8
   17ca8:	433b      	orrs	r3, r7
   17caa:	7023      	strb	r3, [r4, #0]
   17cac:	2002      	movs	r0, #2
   17cae:	5628      	ldrsb	r0, [r5, r0]
   17cb0:	1c31      	adds	r1, r6, #0
   17cb2:	2202      	movs	r2, #2
   17cb4:	2300      	movs	r3, #0
   17cb6:	4d15      	ldr	r5, [pc, #84]	; (17d0c <mqtt_disconnect+0x90>)
   17cb8:	47a8      	blx	r5
   17cba:	2800      	cmp	r0, #0
   17cbc:	da14      	bge.n	17ce8 <mqtt_disconnect+0x6c>
   17cbe:	7823      	ldrb	r3, [r4, #0]
   17cc0:	43bb      	bics	r3, r7
   17cc2:	7023      	strb	r3, [r4, #0]
   17cc4:	4b12      	ldr	r3, [pc, #72]	; (17d10 <mqtt_disconnect+0x94>)
   17cc6:	4798      	blx	r3
   17cc8:	e01e      	b.n	17d08 <mqtt_disconnect+0x8c>
   17cca:	1c03      	adds	r3, r0, #0
   17ccc:	3370      	adds	r3, #112	; 0x70
   17cce:	781b      	ldrb	r3, [r3, #0]
   17cd0:	2b00      	cmp	r3, #0
   17cd2:	d117      	bne.n	17d04 <mqtt_disconnect+0x88>
   17cd4:	7823      	ldrb	r3, [r4, #0]
   17cd6:	071a      	lsls	r2, r3, #28
   17cd8:	d5e2      	bpl.n	17ca0 <mqtt_disconnect+0x24>
   17cda:	4b0e      	ldr	r3, [pc, #56]	; (17d14 <mqtt_disconnect+0x98>)
   17cdc:	2000      	movs	r0, #0
   17cde:	4798      	blx	r3
   17ce0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   17ce2:	4b0d      	ldr	r3, [pc, #52]	; (17d18 <mqtt_disconnect+0x9c>)
   17ce4:	4798      	blx	r3
   17ce6:	e7f5      	b.n	17cd4 <mqtt_disconnect+0x58>
   17ce8:	7823      	ldrb	r3, [r4, #0]
   17cea:	2202      	movs	r2, #2
   17cec:	4393      	bics	r3, r2
   17cee:	7023      	strb	r3, [r4, #0]
   17cf0:	2000      	movs	r0, #0
   17cf2:	e009      	b.n	17d08 <mqtt_disconnect+0x8c>
   17cf4:	4b09      	ldr	r3, [pc, #36]	; (17d1c <mqtt_disconnect+0xa0>)
   17cf6:	4798      	blx	r3
   17cf8:	1c38      	adds	r0, r7, #0
   17cfa:	e005      	b.n	17d08 <mqtt_disconnect+0x8c>
   17cfc:	2016      	movs	r0, #22
   17cfe:	e002      	b.n	17d06 <mqtt_disconnect+0x8a>
   17d00:	2080      	movs	r0, #128	; 0x80
   17d02:	e000      	b.n	17d06 <mqtt_disconnect+0x8a>
   17d04:	200b      	movs	r0, #11
   17d06:	4240      	negs	r0, r0
   17d08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17d0a:	46c0      	nop			; (mov r8, r8)
   17d0c:	0000d3b5 	.word	0x0000d3b5
   17d10:	00017269 	.word	0x00017269
   17d14:	00009fb9 	.word	0x00009fb9
   17d18:	00010bc9 	.word	0x00010bc9
   17d1c:	00017c2d 	.word	0x00017c2d

00017d20 <_mqtt_recv_handler>:
   17d20:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d22:	1c04      	adds	r4, r0, #0
   17d24:	6e40      	ldr	r0, [r0, #100]	; 0x64
   17d26:	230f      	movs	r3, #15
   17d28:	7802      	ldrb	r2, [r0, #0]
   17d2a:	b087      	sub	sp, #28
   17d2c:	1c15      	adds	r5, r2, #0
   17d2e:	439d      	bics	r5, r3
   17d30:	2d50      	cmp	r5, #80	; 0x50
   17d32:	d100      	bne.n	17d36 <_mqtt_recv_handler+0x16>
   17d34:	e098      	b.n	17e68 <_mqtt_recv_handler+0x148>
   17d36:	d808      	bhi.n	17d4a <_mqtt_recv_handler+0x2a>
   17d38:	2d30      	cmp	r5, #48	; 0x30
   17d3a:	d03f      	beq.n	17dbc <_mqtt_recv_handler+0x9c>
   17d3c:	2d40      	cmp	r5, #64	; 0x40
   17d3e:	d100      	bne.n	17d42 <_mqtt_recv_handler+0x22>
   17d40:	e0b3      	b.n	17eaa <_mqtt_recv_handler+0x18a>
   17d42:	2d20      	cmp	r5, #32
   17d44:	d000      	beq.n	17d48 <_mqtt_recv_handler+0x28>
   17d46:	e0c3      	b.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17d48:	e00e      	b.n	17d68 <_mqtt_recv_handler+0x48>
   17d4a:	2d70      	cmp	r5, #112	; 0x70
   17d4c:	d100      	bne.n	17d50 <_mqtt_recv_handler+0x30>
   17d4e:	e0ac      	b.n	17eaa <_mqtt_recv_handler+0x18a>
   17d50:	d803      	bhi.n	17d5a <_mqtt_recv_handler+0x3a>
   17d52:	2d60      	cmp	r5, #96	; 0x60
   17d54:	d100      	bne.n	17d58 <_mqtt_recv_handler+0x38>
   17d56:	e096      	b.n	17e86 <_mqtt_recv_handler+0x166>
   17d58:	e0ba      	b.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17d5a:	2d90      	cmp	r5, #144	; 0x90
   17d5c:	d100      	bne.n	17d60 <_mqtt_recv_handler+0x40>
   17d5e:	e0aa      	b.n	17eb6 <_mqtt_recv_handler+0x196>
   17d60:	2db0      	cmp	r5, #176	; 0xb0
   17d62:	d100      	bne.n	17d66 <_mqtt_recv_handler+0x46>
   17d64:	e0ad      	b.n	17ec2 <_mqtt_recv_handler+0x1a2>
   17d66:	e0b3      	b.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17d68:	aa01      	add	r2, sp, #4
   17d6a:	2303      	movs	r3, #3
   17d6c:	2901      	cmp	r1, #1
   17d6e:	d900      	bls.n	17d72 <_mqtt_recv_handler+0x52>
   17d70:	78c3      	ldrb	r3, [r0, #3]
   17d72:	7013      	strb	r3, [r2, #0]
   17d74:	7813      	ldrb	r3, [r2, #0]
   17d76:	2b00      	cmp	r3, #0
   17d78:	d00d      	beq.n	17d96 <_mqtt_recv_handler+0x76>
   17d7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17d7c:	2b00      	cmp	r3, #0
   17d7e:	d002      	beq.n	17d86 <_mqtt_recv_handler+0x66>
   17d80:	1c20      	adds	r0, r4, #0
   17d82:	2101      	movs	r1, #1
   17d84:	4798      	blx	r3
   17d86:	236f      	movs	r3, #111	; 0x6f
   17d88:	425b      	negs	r3, r3
   17d8a:	64e3      	str	r3, [r4, #76]	; 0x4c
   17d8c:	1c20      	adds	r0, r4, #0
   17d8e:	2100      	movs	r1, #0
   17d90:	4b50      	ldr	r3, [pc, #320]	; (17ed4 <_mqtt_recv_handler+0x1b4>)
   17d92:	4798      	blx	r3
   17d94:	e09c      	b.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17d96:	1c23      	adds	r3, r4, #0
   17d98:	3343      	adds	r3, #67	; 0x43
   17d9a:	7819      	ldrb	r1, [r3, #0]
   17d9c:	0789      	lsls	r1, r1, #30
   17d9e:	0fc9      	lsrs	r1, r1, #31
   17da0:	d105      	bne.n	17dae <_mqtt_recv_handler+0x8e>
   17da2:	781a      	ldrb	r2, [r3, #0]
   17da4:	64e1      	str	r1, [r4, #76]	; 0x4c
   17da6:	2102      	movs	r1, #2
   17da8:	430a      	orrs	r2, r1
   17daa:	701a      	strb	r2, [r3, #0]
   17dac:	e090      	b.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17dae:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17db0:	2b00      	cmp	r3, #0
   17db2:	d100      	bne.n	17db6 <_mqtt_recv_handler+0x96>
   17db4:	e08c      	b.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17db6:	1c20      	adds	r0, r4, #0
   17db8:	2101      	movs	r1, #1
   17dba:	e088      	b.n	17ece <_mqtt_recv_handler+0x1ae>
   17dbc:	ad01      	add	r5, sp, #4
   17dbe:	0713      	lsls	r3, r2, #28
   17dc0:	7c2a      	ldrb	r2, [r5, #16]
   17dc2:	0fdb      	lsrs	r3, r3, #31
   17dc4:	2604      	movs	r6, #4
   17dc6:	009b      	lsls	r3, r3, #2
   17dc8:	43b2      	bics	r2, r6
   17dca:	431a      	orrs	r2, r3
   17dcc:	742a      	strb	r2, [r5, #16]
   17dce:	7807      	ldrb	r7, [r0, #0]
   17dd0:	2303      	movs	r3, #3
   17dd2:	b2d2      	uxtb	r2, r2
   17dd4:	087f      	lsrs	r7, r7, #1
   17dd6:	439a      	bics	r2, r3
   17dd8:	401f      	ands	r7, r3
   17dda:	1c13      	adds	r3, r2, #0
   17ddc:	433b      	orrs	r3, r7
   17dde:	742b      	strb	r3, [r5, #16]
   17de0:	1c43      	adds	r3, r0, #1
   17de2:	7818      	ldrb	r0, [r3, #0]
   17de4:	1c5a      	adds	r2, r3, #1
   17de6:	287f      	cmp	r0, #127	; 0x7f
   17de8:	d901      	bls.n	17dee <_mqtt_recv_handler+0xce>
   17dea:	1c13      	adds	r3, r2, #0
   17dec:	e7f9      	b.n	17de2 <_mqtt_recv_handler+0xc2>
   17dee:	7858      	ldrb	r0, [r3, #1]
   17df0:	789e      	ldrb	r6, [r3, #2]
   17df2:	0200      	lsls	r0, r0, #8
   17df4:	4330      	orrs	r0, r6
   17df6:	3303      	adds	r3, #3
   17df8:	2600      	movs	r6, #0
   17dfa:	6068      	str	r0, [r5, #4]
   17dfc:	9301      	str	r3, [sp, #4]
   17dfe:	1818      	adds	r0, r3, r0
   17e00:	42b7      	cmp	r7, r6
   17e02:	d004      	beq.n	17e0e <_mqtt_recv_handler+0xee>
   17e04:	7806      	ldrb	r6, [r0, #0]
   17e06:	7843      	ldrb	r3, [r0, #1]
   17e08:	0236      	lsls	r6, r6, #8
   17e0a:	431e      	orrs	r6, r3
   17e0c:	3002      	adds	r0, #2
   17e0e:	1851      	adds	r1, r2, r1
   17e10:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17e12:	60a8      	str	r0, [r5, #8]
   17e14:	1a08      	subs	r0, r1, r0
   17e16:	60e8      	str	r0, [r5, #12]
   17e18:	2b00      	cmp	r3, #0
   17e1a:	d003      	beq.n	17e24 <_mqtt_recv_handler+0x104>
   17e1c:	1c20      	adds	r0, r4, #0
   17e1e:	2106      	movs	r1, #6
   17e20:	1c2a      	adds	r2, r5, #0
   17e22:	4798      	blx	r3
   17e24:	7c2b      	ldrb	r3, [r5, #16]
   17e26:	079b      	lsls	r3, r3, #30
   17e28:	0f9b      	lsrs	r3, r3, #30
   17e2a:	2b01      	cmp	r3, #1
   17e2c:	d10b      	bne.n	17e46 <_mqtt_recv_handler+0x126>
   17e2e:	b2b6      	uxth	r6, r6
   17e30:	1c20      	adds	r0, r4, #0
   17e32:	2140      	movs	r1, #64	; 0x40
   17e34:	1c32      	adds	r2, r6, #0
   17e36:	4b28      	ldr	r3, [pc, #160]	; (17ed8 <_mqtt_recv_handler+0x1b8>)
   17e38:	4798      	blx	r3
   17e3a:	2800      	cmp	r0, #0
   17e3c:	d048      	beq.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17e3e:	1c23      	adds	r3, r4, #0
   17e40:	3348      	adds	r3, #72	; 0x48
   17e42:	2240      	movs	r2, #64	; 0x40
   17e44:	e00c      	b.n	17e60 <_mqtt_recv_handler+0x140>
   17e46:	2b02      	cmp	r3, #2
   17e48:	d142      	bne.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17e4a:	b2b6      	uxth	r6, r6
   17e4c:	1c20      	adds	r0, r4, #0
   17e4e:	2150      	movs	r1, #80	; 0x50
   17e50:	1c32      	adds	r2, r6, #0
   17e52:	4b21      	ldr	r3, [pc, #132]	; (17ed8 <_mqtt_recv_handler+0x1b8>)
   17e54:	4798      	blx	r3
   17e56:	2800      	cmp	r0, #0
   17e58:	d03a      	beq.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17e5a:	1c23      	adds	r3, r4, #0
   17e5c:	3348      	adds	r3, #72	; 0x48
   17e5e:	2250      	movs	r2, #80	; 0x50
   17e60:	344a      	adds	r4, #74	; 0x4a
   17e62:	701a      	strb	r2, [r3, #0]
   17e64:	8026      	strh	r6, [r4, #0]
   17e66:	e033      	b.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17e68:	7885      	ldrb	r5, [r0, #2]
   17e6a:	78c3      	ldrb	r3, [r0, #3]
   17e6c:	022d      	lsls	r5, r5, #8
   17e6e:	431d      	orrs	r5, r3
   17e70:	1c20      	adds	r0, r4, #0
   17e72:	2162      	movs	r1, #98	; 0x62
   17e74:	1c2a      	adds	r2, r5, #0
   17e76:	4b18      	ldr	r3, [pc, #96]	; (17ed8 <_mqtt_recv_handler+0x1b8>)
   17e78:	4798      	blx	r3
   17e7a:	2800      	cmp	r0, #0
   17e7c:	d028      	beq.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17e7e:	1c23      	adds	r3, r4, #0
   17e80:	3348      	adds	r3, #72	; 0x48
   17e82:	2260      	movs	r2, #96	; 0x60
   17e84:	e00d      	b.n	17ea2 <_mqtt_recv_handler+0x182>
   17e86:	7885      	ldrb	r5, [r0, #2]
   17e88:	78c3      	ldrb	r3, [r0, #3]
   17e8a:	022d      	lsls	r5, r5, #8
   17e8c:	431d      	orrs	r5, r3
   17e8e:	1c20      	adds	r0, r4, #0
   17e90:	2170      	movs	r1, #112	; 0x70
   17e92:	1c2a      	adds	r2, r5, #0
   17e94:	4b10      	ldr	r3, [pc, #64]	; (17ed8 <_mqtt_recv_handler+0x1b8>)
   17e96:	4798      	blx	r3
   17e98:	2800      	cmp	r0, #0
   17e9a:	d019      	beq.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17e9c:	1c23      	adds	r3, r4, #0
   17e9e:	3348      	adds	r3, #72	; 0x48
   17ea0:	2270      	movs	r2, #112	; 0x70
   17ea2:	344a      	adds	r4, #74	; 0x4a
   17ea4:	701a      	strb	r2, [r3, #0]
   17ea6:	8025      	strh	r5, [r4, #0]
   17ea8:	e012      	b.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17eaa:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17eac:	2b00      	cmp	r3, #0
   17eae:	d00f      	beq.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17eb0:	1c20      	adds	r0, r4, #0
   17eb2:	2102      	movs	r1, #2
   17eb4:	e00a      	b.n	17ecc <_mqtt_recv_handler+0x1ac>
   17eb6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17eb8:	2b00      	cmp	r3, #0
   17eba:	d009      	beq.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17ebc:	1c20      	adds	r0, r4, #0
   17ebe:	2103      	movs	r1, #3
   17ec0:	e004      	b.n	17ecc <_mqtt_recv_handler+0x1ac>
   17ec2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   17ec4:	2b00      	cmp	r3, #0
   17ec6:	d003      	beq.n	17ed0 <_mqtt_recv_handler+0x1b0>
   17ec8:	1c20      	adds	r0, r4, #0
   17eca:	2104      	movs	r1, #4
   17ecc:	aa01      	add	r2, sp, #4
   17ece:	4798      	blx	r3
   17ed0:	b007      	add	sp, #28
   17ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17ed4:	00017c7d 	.word	0x00017c7d
   17ed8:	00017bc9 	.word	0x00017bc9

00017edc <mqtt_recv_packet>:
   17edc:	b538      	push	{r3, r4, r5, lr}
   17ede:	1e04      	subs	r4, r0, #0
   17ee0:	d017      	beq.n	17f12 <mqtt_recv_packet+0x36>
   17ee2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   17ee4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   17ee6:	429a      	cmp	r2, r3
   17ee8:	d906      	bls.n	17ef8 <mqtt_recv_packet+0x1c>
   17eea:	238b      	movs	r3, #139	; 0x8b
   17eec:	425b      	negs	r3, r3
   17eee:	64c3      	str	r3, [r0, #76]	; 0x4c
   17ef0:	2100      	movs	r1, #0
   17ef2:	4b08      	ldr	r3, [pc, #32]	; (17f14 <mqtt_recv_packet+0x38>)
   17ef4:	4798      	blx	r3
   17ef6:	e00c      	b.n	17f12 <mqtt_recv_packet+0x36>
   17ef8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   17efa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17efc:	2002      	movs	r0, #2
   17efe:	1899      	adds	r1, r3, r2
   17f00:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   17f02:	5620      	ldrsb	r0, [r4, r0]
   17f04:	1a9a      	subs	r2, r3, r2
   17f06:	b292      	uxth	r2, r2
   17f08:	2300      	movs	r3, #0
   17f0a:	4d03      	ldr	r5, [pc, #12]	; (17f18 <mqtt_recv_packet+0x3c>)
   17f0c:	47a8      	blx	r5
   17f0e:	2800      	cmp	r0, #0
   17f10:	d1f2      	bne.n	17ef8 <mqtt_recv_packet+0x1c>
   17f12:	bd38      	pop	{r3, r4, r5, pc}
   17f14:	00017c7d 	.word	0x00017c7d
   17f18:	0000d519 	.word	0x0000d519

00017f1c <mqtt_recved_packet>:
   17f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17f1e:	1e04      	subs	r4, r0, #0
   17f20:	d042      	beq.n	17fa8 <mqtt_recved_packet+0x8c>
   17f22:	6c63      	ldr	r3, [r4, #68]	; 0x44
   17f24:	6e67      	ldr	r7, [r4, #100]	; 0x64
   17f26:	18ca      	adds	r2, r1, r3
   17f28:	2301      	movs	r3, #1
   17f2a:	9701      	str	r7, [sp, #4]
   17f2c:	6462      	str	r2, [r4, #68]	; 0x44
   17f2e:	2600      	movs	r6, #0
   17f30:	1c1d      	adds	r5, r3, #0
   17f32:	42a9      	cmp	r1, r5
   17f34:	dc03      	bgt.n	17f3e <mqtt_recved_packet+0x22>
   17f36:	1c20      	adds	r0, r4, #0
   17f38:	4b1c      	ldr	r3, [pc, #112]	; (17fac <mqtt_recved_packet+0x90>)
   17f3a:	4798      	blx	r3
   17f3c:	e034      	b.n	17fa8 <mqtt_recved_packet+0x8c>
   17f3e:	9f01      	ldr	r7, [sp, #4]
   17f40:	5d78      	ldrb	r0, [r7, r5]
   17f42:	01df      	lsls	r7, r3, #7
   17f44:	46bc      	mov	ip, r7
   17f46:	2d03      	cmp	r5, #3
   17f48:	d101      	bne.n	17f4e <mqtt_recved_packet+0x32>
   17f4a:	234d      	movs	r3, #77	; 0x4d
   17f4c:	e00e      	b.n	17f6c <mqtt_recved_packet+0x50>
   17f4e:	277f      	movs	r7, #127	; 0x7f
   17f50:	4007      	ands	r7, r0
   17f52:	437b      	muls	r3, r7
   17f54:	b240      	sxtb	r0, r0
   17f56:	3501      	adds	r5, #1
   17f58:	18f6      	adds	r6, r6, r3
   17f5a:	2800      	cmp	r0, #0
   17f5c:	da01      	bge.n	17f62 <mqtt_recved_packet+0x46>
   17f5e:	4663      	mov	r3, ip
   17f60:	e7e7      	b.n	17f32 <mqtt_recved_packet+0x16>
   17f62:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   17f64:	19af      	adds	r7, r5, r6
   17f66:	429f      	cmp	r7, r3
   17f68:	d907      	bls.n	17f7a <mqtt_recved_packet+0x5e>
   17f6a:	238b      	movs	r3, #139	; 0x8b
   17f6c:	425b      	negs	r3, r3
   17f6e:	64e3      	str	r3, [r4, #76]	; 0x4c
   17f70:	1c20      	adds	r0, r4, #0
   17f72:	2100      	movs	r1, #0
   17f74:	4b0e      	ldr	r3, [pc, #56]	; (17fb0 <mqtt_recved_packet+0x94>)
   17f76:	4798      	blx	r3
   17f78:	e016      	b.n	17fa8 <mqtt_recved_packet+0x8c>
   17f7a:	42ba      	cmp	r2, r7
   17f7c:	d314      	bcc.n	17fa8 <mqtt_recved_packet+0x8c>
   17f7e:	4b0d      	ldr	r3, [pc, #52]	; (17fb4 <mqtt_recved_packet+0x98>)
   17f80:	1c20      	adds	r0, r4, #0
   17f82:	1c31      	adds	r1, r6, #0
   17f84:	4798      	blx	r3
   17f86:	6c63      	ldr	r3, [r4, #68]	; 0x44
   17f88:	42bb      	cmp	r3, r7
   17f8a:	d102      	bne.n	17f92 <mqtt_recved_packet+0x76>
   17f8c:	2300      	movs	r3, #0
   17f8e:	6463      	str	r3, [r4, #68]	; 0x44
   17f90:	e00a      	b.n	17fa8 <mqtt_recved_packet+0x8c>
   17f92:	1b9e      	subs	r6, r3, r6
   17f94:	9b01      	ldr	r3, [sp, #4]
   17f96:	1b75      	subs	r5, r6, r5
   17f98:	19d9      	adds	r1, r3, r7
   17f9a:	1c18      	adds	r0, r3, #0
   17f9c:	1c2a      	adds	r2, r5, #0
   17f9e:	4b06      	ldr	r3, [pc, #24]	; (17fb8 <mqtt_recved_packet+0x9c>)
   17fa0:	4798      	blx	r3
   17fa2:	6465      	str	r5, [r4, #68]	; 0x44
   17fa4:	2100      	movs	r1, #0
   17fa6:	e7bc      	b.n	17f22 <mqtt_recved_packet+0x6>
   17fa8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   17faa:	46c0      	nop			; (mov r8, r8)
   17fac:	00017edd 	.word	0x00017edd
   17fb0:	00017c7d 	.word	0x00017c7d
   17fb4:	00017d21 	.word	0x00017d21
   17fb8:	000184a7 	.word	0x000184a7

00017fbc <mqtt_socket_event_handler>:
   17fbc:	b570      	push	{r4, r5, r6, lr}
   17fbe:	4d37      	ldr	r5, [pc, #220]	; (1809c <mqtt_socket_event_handler+0xe0>)
   17fc0:	0086      	lsls	r6, r0, #2
   17fc2:	5974      	ldr	r4, [r6, r5]
   17fc4:	b086      	sub	sp, #24
   17fc6:	2c00      	cmp	r4, #0
   17fc8:	d066      	beq.n	18098 <mqtt_socket_event_handler+0xdc>
   17fca:	2906      	cmp	r1, #6
   17fcc:	d02b      	beq.n	18026 <mqtt_socket_event_handler+0x6a>
   17fce:	2907      	cmp	r1, #7
   17fd0:	d039      	beq.n	18046 <mqtt_socket_event_handler+0x8a>
   17fd2:	2905      	cmp	r1, #5
   17fd4:	d160      	bne.n	18098 <mqtt_socket_event_handler+0xdc>
   17fd6:	2001      	movs	r0, #1
   17fd8:	5610      	ldrsb	r0, [r2, r0]
   17fda:	4b31      	ldr	r3, [pc, #196]	; (180a0 <mqtt_socket_event_handler+0xe4>)
   17fdc:	4798      	blx	r3
   17fde:	9001      	str	r0, [sp, #4]
   17fe0:	2800      	cmp	r0, #0
   17fe2:	da06      	bge.n	17ff2 <mqtt_socket_event_handler+0x36>
   17fe4:	2002      	movs	r0, #2
   17fe6:	4b2f      	ldr	r3, [pc, #188]	; (180a4 <mqtt_socket_event_handler+0xe8>)
   17fe8:	5620      	ldrsb	r0, [r4, r0]
   17fea:	4798      	blx	r3
   17fec:	2300      	movs	r3, #0
   17fee:	5173      	str	r3, [r6, r5]
   17ff0:	e011      	b.n	18016 <mqtt_socket_event_handler+0x5a>
   17ff2:	1c23      	adds	r3, r4, #0
   17ff4:	3343      	adds	r3, #67	; 0x43
   17ff6:	781a      	ldrb	r2, [r3, #0]
   17ff8:	2101      	movs	r1, #1
   17ffa:	430a      	orrs	r2, r1
   17ffc:	701a      	strb	r2, [r3, #0]
   17ffe:	331d      	adds	r3, #29
   18000:	881b      	ldrh	r3, [r3, #0]
   18002:	2b00      	cmp	r3, #0
   18004:	d004      	beq.n	18010 <mqtt_socket_event_handler+0x54>
   18006:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   18008:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1800a:	2200      	movs	r2, #0
   1800c:	4b26      	ldr	r3, [pc, #152]	; (180a8 <mqtt_socket_event_handler+0xec>)
   1800e:	4798      	blx	r3
   18010:	1c20      	adds	r0, r4, #0
   18012:	4b26      	ldr	r3, [pc, #152]	; (180ac <mqtt_socket_event_handler+0xf0>)
   18014:	4798      	blx	r3
   18016:	6d63      	ldr	r3, [r4, #84]	; 0x54
   18018:	2b00      	cmp	r3, #0
   1801a:	d03d      	beq.n	18098 <mqtt_socket_event_handler+0xdc>
   1801c:	1c20      	adds	r0, r4, #0
   1801e:	2100      	movs	r1, #0
   18020:	aa01      	add	r2, sp, #4
   18022:	4798      	blx	r3
   18024:	e038      	b.n	18098 <mqtt_socket_event_handler+0xdc>
   18026:	2304      	movs	r3, #4
   18028:	5ed1      	ldrsh	r1, [r2, r3]
   1802a:	2900      	cmp	r1, #0
   1802c:	dd03      	ble.n	18036 <mqtt_socket_event_handler+0x7a>
   1802e:	1c20      	adds	r0, r4, #0
   18030:	4b1f      	ldr	r3, [pc, #124]	; (180b0 <mqtt_socket_event_handler+0xf4>)
   18032:	4798      	blx	r3
   18034:	e003      	b.n	1803e <mqtt_socket_event_handler+0x82>
   18036:	1c0b      	adds	r3, r1, #0
   18038:	1c08      	adds	r0, r1, #0
   1803a:	330d      	adds	r3, #13
   1803c:	d11a      	bne.n	18074 <mqtt_socket_event_handler+0xb8>
   1803e:	4b1b      	ldr	r3, [pc, #108]	; (180ac <mqtt_socket_event_handler+0xf0>)
   18040:	1c20      	adds	r0, r4, #0
   18042:	4798      	blx	r3
   18044:	e028      	b.n	18098 <mqtt_socket_event_handler+0xdc>
   18046:	1c23      	adds	r3, r4, #0
   18048:	3343      	adds	r3, #67	; 0x43
   1804a:	8810      	ldrh	r0, [r2, #0]
   1804c:	781a      	ldrb	r2, [r3, #0]
   1804e:	0751      	lsls	r1, r2, #29
   18050:	d402      	bmi.n	18058 <mqtt_socket_event_handler+0x9c>
   18052:	2108      	movs	r1, #8
   18054:	438a      	bics	r2, r1
   18056:	701a      	strb	r2, [r3, #0]
   18058:	781a      	ldrb	r2, [r3, #0]
   1805a:	2104      	movs	r1, #4
   1805c:	438a      	bics	r2, r1
   1805e:	701a      	strb	r2, [r3, #0]
   18060:	06d3      	lsls	r3, r2, #27
   18062:	0fde      	lsrs	r6, r3, #31
   18064:	b200      	sxth	r0, r0
   18066:	2b00      	cmp	r3, #0
   18068:	db02      	blt.n	18070 <mqtt_socket_event_handler+0xb4>
   1806a:	2800      	cmp	r0, #0
   1806c:	da08      	bge.n	18080 <mqtt_socket_event_handler+0xc4>
   1806e:	e001      	b.n	18074 <mqtt_socket_event_handler+0xb8>
   18070:	2800      	cmp	r0, #0
   18072:	da02      	bge.n	1807a <mqtt_socket_event_handler+0xbe>
   18074:	4b0a      	ldr	r3, [pc, #40]	; (180a0 <mqtt_socket_event_handler+0xe4>)
   18076:	4798      	blx	r3
   18078:	64e0      	str	r0, [r4, #76]	; 0x4c
   1807a:	1c20      	adds	r0, r4, #0
   1807c:	4b0d      	ldr	r3, [pc, #52]	; (180b4 <mqtt_socket_event_handler+0xf8>)
   1807e:	e7e0      	b.n	18042 <mqtt_socket_event_handler+0x86>
   18080:	1c25      	adds	r5, r4, #0
   18082:	3548      	adds	r5, #72	; 0x48
   18084:	7829      	ldrb	r1, [r5, #0]
   18086:	2900      	cmp	r1, #0
   18088:	d006      	beq.n	18098 <mqtt_socket_event_handler+0xdc>
   1808a:	1c23      	adds	r3, r4, #0
   1808c:	334a      	adds	r3, #74	; 0x4a
   1808e:	881a      	ldrh	r2, [r3, #0]
   18090:	1c20      	adds	r0, r4, #0
   18092:	4b09      	ldr	r3, [pc, #36]	; (180b8 <mqtt_socket_event_handler+0xfc>)
   18094:	4798      	blx	r3
   18096:	702e      	strb	r6, [r5, #0]
   18098:	b006      	add	sp, #24
   1809a:	bd70      	pop	{r4, r5, r6, pc}
   1809c:	200002bc 	.word	0x200002bc
   180a0:	00017269 	.word	0x00017269
   180a4:	0000d699 	.word	0x0000d699
   180a8:	00010b4d 	.word	0x00010b4d
   180ac:	00017edd 	.word	0x00017edd
   180b0:	00017f1d 	.word	0x00017f1d
   180b4:	00017c2d 	.word	0x00017c2d
   180b8:	00017bc9 	.word	0x00017bc9

000180bc <__gnu_thumb1_case_uqi>:
   180bc:	b402      	push	{r1}
   180be:	4671      	mov	r1, lr
   180c0:	0849      	lsrs	r1, r1, #1
   180c2:	0049      	lsls	r1, r1, #1
   180c4:	5c09      	ldrb	r1, [r1, r0]
   180c6:	0049      	lsls	r1, r1, #1
   180c8:	448e      	add	lr, r1
   180ca:	bc02      	pop	{r1}
   180cc:	4770      	bx	lr
   180ce:	46c0      	nop			; (mov r8, r8)

000180d0 <__aeabi_uidiv>:
   180d0:	2200      	movs	r2, #0
   180d2:	0843      	lsrs	r3, r0, #1
   180d4:	428b      	cmp	r3, r1
   180d6:	d374      	bcc.n	181c2 <__aeabi_uidiv+0xf2>
   180d8:	0903      	lsrs	r3, r0, #4
   180da:	428b      	cmp	r3, r1
   180dc:	d35f      	bcc.n	1819e <__aeabi_uidiv+0xce>
   180de:	0a03      	lsrs	r3, r0, #8
   180e0:	428b      	cmp	r3, r1
   180e2:	d344      	bcc.n	1816e <__aeabi_uidiv+0x9e>
   180e4:	0b03      	lsrs	r3, r0, #12
   180e6:	428b      	cmp	r3, r1
   180e8:	d328      	bcc.n	1813c <__aeabi_uidiv+0x6c>
   180ea:	0c03      	lsrs	r3, r0, #16
   180ec:	428b      	cmp	r3, r1
   180ee:	d30d      	bcc.n	1810c <__aeabi_uidiv+0x3c>
   180f0:	22ff      	movs	r2, #255	; 0xff
   180f2:	0209      	lsls	r1, r1, #8
   180f4:	ba12      	rev	r2, r2
   180f6:	0c03      	lsrs	r3, r0, #16
   180f8:	428b      	cmp	r3, r1
   180fa:	d302      	bcc.n	18102 <__aeabi_uidiv+0x32>
   180fc:	1212      	asrs	r2, r2, #8
   180fe:	0209      	lsls	r1, r1, #8
   18100:	d065      	beq.n	181ce <__aeabi_uidiv+0xfe>
   18102:	0b03      	lsrs	r3, r0, #12
   18104:	428b      	cmp	r3, r1
   18106:	d319      	bcc.n	1813c <__aeabi_uidiv+0x6c>
   18108:	e000      	b.n	1810c <__aeabi_uidiv+0x3c>
   1810a:	0a09      	lsrs	r1, r1, #8
   1810c:	0bc3      	lsrs	r3, r0, #15
   1810e:	428b      	cmp	r3, r1
   18110:	d301      	bcc.n	18116 <__aeabi_uidiv+0x46>
   18112:	03cb      	lsls	r3, r1, #15
   18114:	1ac0      	subs	r0, r0, r3
   18116:	4152      	adcs	r2, r2
   18118:	0b83      	lsrs	r3, r0, #14
   1811a:	428b      	cmp	r3, r1
   1811c:	d301      	bcc.n	18122 <__aeabi_uidiv+0x52>
   1811e:	038b      	lsls	r3, r1, #14
   18120:	1ac0      	subs	r0, r0, r3
   18122:	4152      	adcs	r2, r2
   18124:	0b43      	lsrs	r3, r0, #13
   18126:	428b      	cmp	r3, r1
   18128:	d301      	bcc.n	1812e <__aeabi_uidiv+0x5e>
   1812a:	034b      	lsls	r3, r1, #13
   1812c:	1ac0      	subs	r0, r0, r3
   1812e:	4152      	adcs	r2, r2
   18130:	0b03      	lsrs	r3, r0, #12
   18132:	428b      	cmp	r3, r1
   18134:	d301      	bcc.n	1813a <__aeabi_uidiv+0x6a>
   18136:	030b      	lsls	r3, r1, #12
   18138:	1ac0      	subs	r0, r0, r3
   1813a:	4152      	adcs	r2, r2
   1813c:	0ac3      	lsrs	r3, r0, #11
   1813e:	428b      	cmp	r3, r1
   18140:	d301      	bcc.n	18146 <__aeabi_uidiv+0x76>
   18142:	02cb      	lsls	r3, r1, #11
   18144:	1ac0      	subs	r0, r0, r3
   18146:	4152      	adcs	r2, r2
   18148:	0a83      	lsrs	r3, r0, #10
   1814a:	428b      	cmp	r3, r1
   1814c:	d301      	bcc.n	18152 <__aeabi_uidiv+0x82>
   1814e:	028b      	lsls	r3, r1, #10
   18150:	1ac0      	subs	r0, r0, r3
   18152:	4152      	adcs	r2, r2
   18154:	0a43      	lsrs	r3, r0, #9
   18156:	428b      	cmp	r3, r1
   18158:	d301      	bcc.n	1815e <__aeabi_uidiv+0x8e>
   1815a:	024b      	lsls	r3, r1, #9
   1815c:	1ac0      	subs	r0, r0, r3
   1815e:	4152      	adcs	r2, r2
   18160:	0a03      	lsrs	r3, r0, #8
   18162:	428b      	cmp	r3, r1
   18164:	d301      	bcc.n	1816a <__aeabi_uidiv+0x9a>
   18166:	020b      	lsls	r3, r1, #8
   18168:	1ac0      	subs	r0, r0, r3
   1816a:	4152      	adcs	r2, r2
   1816c:	d2cd      	bcs.n	1810a <__aeabi_uidiv+0x3a>
   1816e:	09c3      	lsrs	r3, r0, #7
   18170:	428b      	cmp	r3, r1
   18172:	d301      	bcc.n	18178 <__aeabi_uidiv+0xa8>
   18174:	01cb      	lsls	r3, r1, #7
   18176:	1ac0      	subs	r0, r0, r3
   18178:	4152      	adcs	r2, r2
   1817a:	0983      	lsrs	r3, r0, #6
   1817c:	428b      	cmp	r3, r1
   1817e:	d301      	bcc.n	18184 <__aeabi_uidiv+0xb4>
   18180:	018b      	lsls	r3, r1, #6
   18182:	1ac0      	subs	r0, r0, r3
   18184:	4152      	adcs	r2, r2
   18186:	0943      	lsrs	r3, r0, #5
   18188:	428b      	cmp	r3, r1
   1818a:	d301      	bcc.n	18190 <__aeabi_uidiv+0xc0>
   1818c:	014b      	lsls	r3, r1, #5
   1818e:	1ac0      	subs	r0, r0, r3
   18190:	4152      	adcs	r2, r2
   18192:	0903      	lsrs	r3, r0, #4
   18194:	428b      	cmp	r3, r1
   18196:	d301      	bcc.n	1819c <__aeabi_uidiv+0xcc>
   18198:	010b      	lsls	r3, r1, #4
   1819a:	1ac0      	subs	r0, r0, r3
   1819c:	4152      	adcs	r2, r2
   1819e:	08c3      	lsrs	r3, r0, #3
   181a0:	428b      	cmp	r3, r1
   181a2:	d301      	bcc.n	181a8 <__aeabi_uidiv+0xd8>
   181a4:	00cb      	lsls	r3, r1, #3
   181a6:	1ac0      	subs	r0, r0, r3
   181a8:	4152      	adcs	r2, r2
   181aa:	0883      	lsrs	r3, r0, #2
   181ac:	428b      	cmp	r3, r1
   181ae:	d301      	bcc.n	181b4 <__aeabi_uidiv+0xe4>
   181b0:	008b      	lsls	r3, r1, #2
   181b2:	1ac0      	subs	r0, r0, r3
   181b4:	4152      	adcs	r2, r2
   181b6:	0843      	lsrs	r3, r0, #1
   181b8:	428b      	cmp	r3, r1
   181ba:	d301      	bcc.n	181c0 <__aeabi_uidiv+0xf0>
   181bc:	004b      	lsls	r3, r1, #1
   181be:	1ac0      	subs	r0, r0, r3
   181c0:	4152      	adcs	r2, r2
   181c2:	1a41      	subs	r1, r0, r1
   181c4:	d200      	bcs.n	181c8 <__aeabi_uidiv+0xf8>
   181c6:	4601      	mov	r1, r0
   181c8:	4152      	adcs	r2, r2
   181ca:	4610      	mov	r0, r2
   181cc:	4770      	bx	lr
   181ce:	e7ff      	b.n	181d0 <__aeabi_uidiv+0x100>
   181d0:	b501      	push	{r0, lr}
   181d2:	2000      	movs	r0, #0
   181d4:	f000 f8f0 	bl	183b8 <__aeabi_idiv0>
   181d8:	bd02      	pop	{r1, pc}
   181da:	46c0      	nop			; (mov r8, r8)

000181dc <__aeabi_uidivmod>:
   181dc:	2900      	cmp	r1, #0
   181de:	d0f7      	beq.n	181d0 <__aeabi_uidiv+0x100>
   181e0:	e776      	b.n	180d0 <__aeabi_uidiv>
   181e2:	4770      	bx	lr

000181e4 <__aeabi_idiv>:
   181e4:	4603      	mov	r3, r0
   181e6:	430b      	orrs	r3, r1
   181e8:	d47f      	bmi.n	182ea <__aeabi_idiv+0x106>
   181ea:	2200      	movs	r2, #0
   181ec:	0843      	lsrs	r3, r0, #1
   181ee:	428b      	cmp	r3, r1
   181f0:	d374      	bcc.n	182dc <__aeabi_idiv+0xf8>
   181f2:	0903      	lsrs	r3, r0, #4
   181f4:	428b      	cmp	r3, r1
   181f6:	d35f      	bcc.n	182b8 <__aeabi_idiv+0xd4>
   181f8:	0a03      	lsrs	r3, r0, #8
   181fa:	428b      	cmp	r3, r1
   181fc:	d344      	bcc.n	18288 <__aeabi_idiv+0xa4>
   181fe:	0b03      	lsrs	r3, r0, #12
   18200:	428b      	cmp	r3, r1
   18202:	d328      	bcc.n	18256 <__aeabi_idiv+0x72>
   18204:	0c03      	lsrs	r3, r0, #16
   18206:	428b      	cmp	r3, r1
   18208:	d30d      	bcc.n	18226 <__aeabi_idiv+0x42>
   1820a:	22ff      	movs	r2, #255	; 0xff
   1820c:	0209      	lsls	r1, r1, #8
   1820e:	ba12      	rev	r2, r2
   18210:	0c03      	lsrs	r3, r0, #16
   18212:	428b      	cmp	r3, r1
   18214:	d302      	bcc.n	1821c <__aeabi_idiv+0x38>
   18216:	1212      	asrs	r2, r2, #8
   18218:	0209      	lsls	r1, r1, #8
   1821a:	d065      	beq.n	182e8 <__aeabi_idiv+0x104>
   1821c:	0b03      	lsrs	r3, r0, #12
   1821e:	428b      	cmp	r3, r1
   18220:	d319      	bcc.n	18256 <__aeabi_idiv+0x72>
   18222:	e000      	b.n	18226 <__aeabi_idiv+0x42>
   18224:	0a09      	lsrs	r1, r1, #8
   18226:	0bc3      	lsrs	r3, r0, #15
   18228:	428b      	cmp	r3, r1
   1822a:	d301      	bcc.n	18230 <__aeabi_idiv+0x4c>
   1822c:	03cb      	lsls	r3, r1, #15
   1822e:	1ac0      	subs	r0, r0, r3
   18230:	4152      	adcs	r2, r2
   18232:	0b83      	lsrs	r3, r0, #14
   18234:	428b      	cmp	r3, r1
   18236:	d301      	bcc.n	1823c <__aeabi_idiv+0x58>
   18238:	038b      	lsls	r3, r1, #14
   1823a:	1ac0      	subs	r0, r0, r3
   1823c:	4152      	adcs	r2, r2
   1823e:	0b43      	lsrs	r3, r0, #13
   18240:	428b      	cmp	r3, r1
   18242:	d301      	bcc.n	18248 <__aeabi_idiv+0x64>
   18244:	034b      	lsls	r3, r1, #13
   18246:	1ac0      	subs	r0, r0, r3
   18248:	4152      	adcs	r2, r2
   1824a:	0b03      	lsrs	r3, r0, #12
   1824c:	428b      	cmp	r3, r1
   1824e:	d301      	bcc.n	18254 <__aeabi_idiv+0x70>
   18250:	030b      	lsls	r3, r1, #12
   18252:	1ac0      	subs	r0, r0, r3
   18254:	4152      	adcs	r2, r2
   18256:	0ac3      	lsrs	r3, r0, #11
   18258:	428b      	cmp	r3, r1
   1825a:	d301      	bcc.n	18260 <__aeabi_idiv+0x7c>
   1825c:	02cb      	lsls	r3, r1, #11
   1825e:	1ac0      	subs	r0, r0, r3
   18260:	4152      	adcs	r2, r2
   18262:	0a83      	lsrs	r3, r0, #10
   18264:	428b      	cmp	r3, r1
   18266:	d301      	bcc.n	1826c <__aeabi_idiv+0x88>
   18268:	028b      	lsls	r3, r1, #10
   1826a:	1ac0      	subs	r0, r0, r3
   1826c:	4152      	adcs	r2, r2
   1826e:	0a43      	lsrs	r3, r0, #9
   18270:	428b      	cmp	r3, r1
   18272:	d301      	bcc.n	18278 <__aeabi_idiv+0x94>
   18274:	024b      	lsls	r3, r1, #9
   18276:	1ac0      	subs	r0, r0, r3
   18278:	4152      	adcs	r2, r2
   1827a:	0a03      	lsrs	r3, r0, #8
   1827c:	428b      	cmp	r3, r1
   1827e:	d301      	bcc.n	18284 <__aeabi_idiv+0xa0>
   18280:	020b      	lsls	r3, r1, #8
   18282:	1ac0      	subs	r0, r0, r3
   18284:	4152      	adcs	r2, r2
   18286:	d2cd      	bcs.n	18224 <__aeabi_idiv+0x40>
   18288:	09c3      	lsrs	r3, r0, #7
   1828a:	428b      	cmp	r3, r1
   1828c:	d301      	bcc.n	18292 <__aeabi_idiv+0xae>
   1828e:	01cb      	lsls	r3, r1, #7
   18290:	1ac0      	subs	r0, r0, r3
   18292:	4152      	adcs	r2, r2
   18294:	0983      	lsrs	r3, r0, #6
   18296:	428b      	cmp	r3, r1
   18298:	d301      	bcc.n	1829e <__aeabi_idiv+0xba>
   1829a:	018b      	lsls	r3, r1, #6
   1829c:	1ac0      	subs	r0, r0, r3
   1829e:	4152      	adcs	r2, r2
   182a0:	0943      	lsrs	r3, r0, #5
   182a2:	428b      	cmp	r3, r1
   182a4:	d301      	bcc.n	182aa <__aeabi_idiv+0xc6>
   182a6:	014b      	lsls	r3, r1, #5
   182a8:	1ac0      	subs	r0, r0, r3
   182aa:	4152      	adcs	r2, r2
   182ac:	0903      	lsrs	r3, r0, #4
   182ae:	428b      	cmp	r3, r1
   182b0:	d301      	bcc.n	182b6 <__aeabi_idiv+0xd2>
   182b2:	010b      	lsls	r3, r1, #4
   182b4:	1ac0      	subs	r0, r0, r3
   182b6:	4152      	adcs	r2, r2
   182b8:	08c3      	lsrs	r3, r0, #3
   182ba:	428b      	cmp	r3, r1
   182bc:	d301      	bcc.n	182c2 <__aeabi_idiv+0xde>
   182be:	00cb      	lsls	r3, r1, #3
   182c0:	1ac0      	subs	r0, r0, r3
   182c2:	4152      	adcs	r2, r2
   182c4:	0883      	lsrs	r3, r0, #2
   182c6:	428b      	cmp	r3, r1
   182c8:	d301      	bcc.n	182ce <__aeabi_idiv+0xea>
   182ca:	008b      	lsls	r3, r1, #2
   182cc:	1ac0      	subs	r0, r0, r3
   182ce:	4152      	adcs	r2, r2
   182d0:	0843      	lsrs	r3, r0, #1
   182d2:	428b      	cmp	r3, r1
   182d4:	d301      	bcc.n	182da <__aeabi_idiv+0xf6>
   182d6:	004b      	lsls	r3, r1, #1
   182d8:	1ac0      	subs	r0, r0, r3
   182da:	4152      	adcs	r2, r2
   182dc:	1a41      	subs	r1, r0, r1
   182de:	d200      	bcs.n	182e2 <__aeabi_idiv+0xfe>
   182e0:	4601      	mov	r1, r0
   182e2:	4152      	adcs	r2, r2
   182e4:	4610      	mov	r0, r2
   182e6:	4770      	bx	lr
   182e8:	e05d      	b.n	183a6 <__aeabi_idiv+0x1c2>
   182ea:	0fca      	lsrs	r2, r1, #31
   182ec:	d000      	beq.n	182f0 <__aeabi_idiv+0x10c>
   182ee:	4249      	negs	r1, r1
   182f0:	1003      	asrs	r3, r0, #32
   182f2:	d300      	bcc.n	182f6 <__aeabi_idiv+0x112>
   182f4:	4240      	negs	r0, r0
   182f6:	4053      	eors	r3, r2
   182f8:	2200      	movs	r2, #0
   182fa:	469c      	mov	ip, r3
   182fc:	0903      	lsrs	r3, r0, #4
   182fe:	428b      	cmp	r3, r1
   18300:	d32d      	bcc.n	1835e <__aeabi_idiv+0x17a>
   18302:	0a03      	lsrs	r3, r0, #8
   18304:	428b      	cmp	r3, r1
   18306:	d312      	bcc.n	1832e <__aeabi_idiv+0x14a>
   18308:	22fc      	movs	r2, #252	; 0xfc
   1830a:	0189      	lsls	r1, r1, #6
   1830c:	ba12      	rev	r2, r2
   1830e:	0a03      	lsrs	r3, r0, #8
   18310:	428b      	cmp	r3, r1
   18312:	d30c      	bcc.n	1832e <__aeabi_idiv+0x14a>
   18314:	0189      	lsls	r1, r1, #6
   18316:	1192      	asrs	r2, r2, #6
   18318:	428b      	cmp	r3, r1
   1831a:	d308      	bcc.n	1832e <__aeabi_idiv+0x14a>
   1831c:	0189      	lsls	r1, r1, #6
   1831e:	1192      	asrs	r2, r2, #6
   18320:	428b      	cmp	r3, r1
   18322:	d304      	bcc.n	1832e <__aeabi_idiv+0x14a>
   18324:	0189      	lsls	r1, r1, #6
   18326:	d03a      	beq.n	1839e <__aeabi_idiv+0x1ba>
   18328:	1192      	asrs	r2, r2, #6
   1832a:	e000      	b.n	1832e <__aeabi_idiv+0x14a>
   1832c:	0989      	lsrs	r1, r1, #6
   1832e:	09c3      	lsrs	r3, r0, #7
   18330:	428b      	cmp	r3, r1
   18332:	d301      	bcc.n	18338 <__aeabi_idiv+0x154>
   18334:	01cb      	lsls	r3, r1, #7
   18336:	1ac0      	subs	r0, r0, r3
   18338:	4152      	adcs	r2, r2
   1833a:	0983      	lsrs	r3, r0, #6
   1833c:	428b      	cmp	r3, r1
   1833e:	d301      	bcc.n	18344 <__aeabi_idiv+0x160>
   18340:	018b      	lsls	r3, r1, #6
   18342:	1ac0      	subs	r0, r0, r3
   18344:	4152      	adcs	r2, r2
   18346:	0943      	lsrs	r3, r0, #5
   18348:	428b      	cmp	r3, r1
   1834a:	d301      	bcc.n	18350 <__aeabi_idiv+0x16c>
   1834c:	014b      	lsls	r3, r1, #5
   1834e:	1ac0      	subs	r0, r0, r3
   18350:	4152      	adcs	r2, r2
   18352:	0903      	lsrs	r3, r0, #4
   18354:	428b      	cmp	r3, r1
   18356:	d301      	bcc.n	1835c <__aeabi_idiv+0x178>
   18358:	010b      	lsls	r3, r1, #4
   1835a:	1ac0      	subs	r0, r0, r3
   1835c:	4152      	adcs	r2, r2
   1835e:	08c3      	lsrs	r3, r0, #3
   18360:	428b      	cmp	r3, r1
   18362:	d301      	bcc.n	18368 <__aeabi_idiv+0x184>
   18364:	00cb      	lsls	r3, r1, #3
   18366:	1ac0      	subs	r0, r0, r3
   18368:	4152      	adcs	r2, r2
   1836a:	0883      	lsrs	r3, r0, #2
   1836c:	428b      	cmp	r3, r1
   1836e:	d301      	bcc.n	18374 <__aeabi_idiv+0x190>
   18370:	008b      	lsls	r3, r1, #2
   18372:	1ac0      	subs	r0, r0, r3
   18374:	4152      	adcs	r2, r2
   18376:	d2d9      	bcs.n	1832c <__aeabi_idiv+0x148>
   18378:	0843      	lsrs	r3, r0, #1
   1837a:	428b      	cmp	r3, r1
   1837c:	d301      	bcc.n	18382 <__aeabi_idiv+0x19e>
   1837e:	004b      	lsls	r3, r1, #1
   18380:	1ac0      	subs	r0, r0, r3
   18382:	4152      	adcs	r2, r2
   18384:	1a41      	subs	r1, r0, r1
   18386:	d200      	bcs.n	1838a <__aeabi_idiv+0x1a6>
   18388:	4601      	mov	r1, r0
   1838a:	4663      	mov	r3, ip
   1838c:	4152      	adcs	r2, r2
   1838e:	105b      	asrs	r3, r3, #1
   18390:	4610      	mov	r0, r2
   18392:	d301      	bcc.n	18398 <__aeabi_idiv+0x1b4>
   18394:	4240      	negs	r0, r0
   18396:	2b00      	cmp	r3, #0
   18398:	d500      	bpl.n	1839c <__aeabi_idiv+0x1b8>
   1839a:	4249      	negs	r1, r1
   1839c:	4770      	bx	lr
   1839e:	4663      	mov	r3, ip
   183a0:	105b      	asrs	r3, r3, #1
   183a2:	d300      	bcc.n	183a6 <__aeabi_idiv+0x1c2>
   183a4:	4240      	negs	r0, r0
   183a6:	b501      	push	{r0, lr}
   183a8:	2000      	movs	r0, #0
   183aa:	f000 f805 	bl	183b8 <__aeabi_idiv0>
   183ae:	bd02      	pop	{r1, pc}

000183b0 <__aeabi_idivmod>:
   183b0:	2900      	cmp	r1, #0
   183b2:	d0f8      	beq.n	183a6 <__aeabi_idiv+0x1c2>
   183b4:	e716      	b.n	181e4 <__aeabi_idiv>
   183b6:	4770      	bx	lr

000183b8 <__aeabi_idiv0>:
   183b8:	4770      	bx	lr
   183ba:	46c0      	nop			; (mov r8, r8)

000183bc <__aeabi_lmul>:
   183bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   183be:	464f      	mov	r7, r9
   183c0:	4646      	mov	r6, r8
   183c2:	b4c0      	push	{r6, r7}
   183c4:	0416      	lsls	r6, r2, #16
   183c6:	0c36      	lsrs	r6, r6, #16
   183c8:	4699      	mov	r9, r3
   183ca:	0033      	movs	r3, r6
   183cc:	0405      	lsls	r5, r0, #16
   183ce:	0c2c      	lsrs	r4, r5, #16
   183d0:	0c07      	lsrs	r7, r0, #16
   183d2:	0c15      	lsrs	r5, r2, #16
   183d4:	4363      	muls	r3, r4
   183d6:	437e      	muls	r6, r7
   183d8:	436f      	muls	r7, r5
   183da:	4365      	muls	r5, r4
   183dc:	0c1c      	lsrs	r4, r3, #16
   183de:	19ad      	adds	r5, r5, r6
   183e0:	1964      	adds	r4, r4, r5
   183e2:	469c      	mov	ip, r3
   183e4:	42a6      	cmp	r6, r4
   183e6:	d903      	bls.n	183f0 <__aeabi_lmul+0x34>
   183e8:	2380      	movs	r3, #128	; 0x80
   183ea:	025b      	lsls	r3, r3, #9
   183ec:	4698      	mov	r8, r3
   183ee:	4447      	add	r7, r8
   183f0:	4663      	mov	r3, ip
   183f2:	0c25      	lsrs	r5, r4, #16
   183f4:	19ef      	adds	r7, r5, r7
   183f6:	041d      	lsls	r5, r3, #16
   183f8:	464b      	mov	r3, r9
   183fa:	434a      	muls	r2, r1
   183fc:	4343      	muls	r3, r0
   183fe:	0c2d      	lsrs	r5, r5, #16
   18400:	0424      	lsls	r4, r4, #16
   18402:	1964      	adds	r4, r4, r5
   18404:	1899      	adds	r1, r3, r2
   18406:	19c9      	adds	r1, r1, r7
   18408:	0020      	movs	r0, r4
   1840a:	bc0c      	pop	{r2, r3}
   1840c:	4690      	mov	r8, r2
   1840e:	4699      	mov	r9, r3
   18410:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18412:	46c0      	nop			; (mov r8, r8)

00018414 <atoi>:
   18414:	b510      	push	{r4, lr}
   18416:	220a      	movs	r2, #10
   18418:	2100      	movs	r1, #0
   1841a:	f000 fb7b 	bl	18b14 <strtol>
   1841e:	bd10      	pop	{r4, pc}

00018420 <__libc_init_array>:
   18420:	4b0e      	ldr	r3, [pc, #56]	; (1845c <__libc_init_array+0x3c>)
   18422:	b570      	push	{r4, r5, r6, lr}
   18424:	2500      	movs	r5, #0
   18426:	001e      	movs	r6, r3
   18428:	4c0d      	ldr	r4, [pc, #52]	; (18460 <__libc_init_array+0x40>)
   1842a:	1ae4      	subs	r4, r4, r3
   1842c:	10a4      	asrs	r4, r4, #2
   1842e:	42a5      	cmp	r5, r4
   18430:	d004      	beq.n	1843c <__libc_init_array+0x1c>
   18432:	00ab      	lsls	r3, r5, #2
   18434:	58f3      	ldr	r3, [r6, r3]
   18436:	4798      	blx	r3
   18438:	3501      	adds	r5, #1
   1843a:	e7f8      	b.n	1842e <__libc_init_array+0xe>
   1843c:	f003 fa94 	bl	1b968 <_init>
   18440:	4b08      	ldr	r3, [pc, #32]	; (18464 <__libc_init_array+0x44>)
   18442:	2500      	movs	r5, #0
   18444:	001e      	movs	r6, r3
   18446:	4c08      	ldr	r4, [pc, #32]	; (18468 <__libc_init_array+0x48>)
   18448:	1ae4      	subs	r4, r4, r3
   1844a:	10a4      	asrs	r4, r4, #2
   1844c:	42a5      	cmp	r5, r4
   1844e:	d004      	beq.n	1845a <__libc_init_array+0x3a>
   18450:	00ab      	lsls	r3, r5, #2
   18452:	58f3      	ldr	r3, [r6, r3]
   18454:	4798      	blx	r3
   18456:	3501      	adds	r5, #1
   18458:	e7f8      	b.n	1844c <__libc_init_array+0x2c>
   1845a:	bd70      	pop	{r4, r5, r6, pc}
   1845c:	0001b974 	.word	0x0001b974
   18460:	0001b974 	.word	0x0001b974
   18464:	0001b974 	.word	0x0001b974
   18468:	0001b978 	.word	0x0001b978

0001846c <malloc>:
   1846c:	b510      	push	{r4, lr}
   1846e:	4b03      	ldr	r3, [pc, #12]	; (1847c <malloc+0x10>)
   18470:	0001      	movs	r1, r0
   18472:	6818      	ldr	r0, [r3, #0]
   18474:	f000 f87a 	bl	1856c <_malloc_r>
   18478:	bd10      	pop	{r4, pc}
   1847a:	46c0      	nop			; (mov r8, r8)
   1847c:	2000008c 	.word	0x2000008c

00018480 <free>:
   18480:	b510      	push	{r4, lr}
   18482:	4b03      	ldr	r3, [pc, #12]	; (18490 <free+0x10>)
   18484:	0001      	movs	r1, r0
   18486:	6818      	ldr	r0, [r3, #0]
   18488:	f000 f82a 	bl	184e0 <_free_r>
   1848c:	bd10      	pop	{r4, pc}
   1848e:	46c0      	nop			; (mov r8, r8)
   18490:	2000008c 	.word	0x2000008c

00018494 <memcpy>:
   18494:	2300      	movs	r3, #0
   18496:	b510      	push	{r4, lr}
   18498:	429a      	cmp	r2, r3
   1849a:	d003      	beq.n	184a4 <memcpy+0x10>
   1849c:	5ccc      	ldrb	r4, [r1, r3]
   1849e:	54c4      	strb	r4, [r0, r3]
   184a0:	3301      	adds	r3, #1
   184a2:	e7f9      	b.n	18498 <memcpy+0x4>
   184a4:	bd10      	pop	{r4, pc}

000184a6 <memmove>:
   184a6:	b510      	push	{r4, lr}
   184a8:	4288      	cmp	r0, r1
   184aa:	d902      	bls.n	184b2 <memmove+0xc>
   184ac:	188b      	adds	r3, r1, r2
   184ae:	4298      	cmp	r0, r3
   184b0:	d301      	bcc.n	184b6 <memmove+0x10>
   184b2:	2300      	movs	r3, #0
   184b4:	e005      	b.n	184c2 <memmove+0x1c>
   184b6:	1a9b      	subs	r3, r3, r2
   184b8:	3a01      	subs	r2, #1
   184ba:	d308      	bcc.n	184ce <memmove+0x28>
   184bc:	5c99      	ldrb	r1, [r3, r2]
   184be:	5481      	strb	r1, [r0, r2]
   184c0:	e7fa      	b.n	184b8 <memmove+0x12>
   184c2:	4293      	cmp	r3, r2
   184c4:	d003      	beq.n	184ce <memmove+0x28>
   184c6:	5ccc      	ldrb	r4, [r1, r3]
   184c8:	54c4      	strb	r4, [r0, r3]
   184ca:	3301      	adds	r3, #1
   184cc:	e7f9      	b.n	184c2 <memmove+0x1c>
   184ce:	bd10      	pop	{r4, pc}

000184d0 <memset>:
   184d0:	0003      	movs	r3, r0
   184d2:	1882      	adds	r2, r0, r2
   184d4:	4293      	cmp	r3, r2
   184d6:	d002      	beq.n	184de <memset+0xe>
   184d8:	7019      	strb	r1, [r3, #0]
   184da:	3301      	adds	r3, #1
   184dc:	e7fa      	b.n	184d4 <memset+0x4>
   184de:	4770      	bx	lr

000184e0 <_free_r>:
   184e0:	b530      	push	{r4, r5, lr}
   184e2:	2900      	cmp	r1, #0
   184e4:	d03e      	beq.n	18564 <_free_r+0x84>
   184e6:	3904      	subs	r1, #4
   184e8:	680b      	ldr	r3, [r1, #0]
   184ea:	2b00      	cmp	r3, #0
   184ec:	da00      	bge.n	184f0 <_free_r+0x10>
   184ee:	18c9      	adds	r1, r1, r3
   184f0:	4a1d      	ldr	r2, [pc, #116]	; (18568 <_free_r+0x88>)
   184f2:	6813      	ldr	r3, [r2, #0]
   184f4:	0014      	movs	r4, r2
   184f6:	2b00      	cmp	r3, #0
   184f8:	d102      	bne.n	18500 <_free_r+0x20>
   184fa:	604b      	str	r3, [r1, #4]
   184fc:	6011      	str	r1, [r2, #0]
   184fe:	e031      	b.n	18564 <_free_r+0x84>
   18500:	428b      	cmp	r3, r1
   18502:	d90d      	bls.n	18520 <_free_r+0x40>
   18504:	680a      	ldr	r2, [r1, #0]
   18506:	1888      	adds	r0, r1, r2
   18508:	4283      	cmp	r3, r0
   1850a:	d103      	bne.n	18514 <_free_r+0x34>
   1850c:	6818      	ldr	r0, [r3, #0]
   1850e:	685b      	ldr	r3, [r3, #4]
   18510:	1882      	adds	r2, r0, r2
   18512:	600a      	str	r2, [r1, #0]
   18514:	604b      	str	r3, [r1, #4]
   18516:	6021      	str	r1, [r4, #0]
   18518:	e024      	b.n	18564 <_free_r+0x84>
   1851a:	428a      	cmp	r2, r1
   1851c:	d803      	bhi.n	18526 <_free_r+0x46>
   1851e:	0013      	movs	r3, r2
   18520:	685a      	ldr	r2, [r3, #4]
   18522:	2a00      	cmp	r2, #0
   18524:	d1f9      	bne.n	1851a <_free_r+0x3a>
   18526:	681d      	ldr	r5, [r3, #0]
   18528:	195c      	adds	r4, r3, r5
   1852a:	428c      	cmp	r4, r1
   1852c:	d10b      	bne.n	18546 <_free_r+0x66>
   1852e:	6809      	ldr	r1, [r1, #0]
   18530:	1869      	adds	r1, r5, r1
   18532:	1858      	adds	r0, r3, r1
   18534:	6019      	str	r1, [r3, #0]
   18536:	4282      	cmp	r2, r0
   18538:	d114      	bne.n	18564 <_free_r+0x84>
   1853a:	6810      	ldr	r0, [r2, #0]
   1853c:	6852      	ldr	r2, [r2, #4]
   1853e:	1841      	adds	r1, r0, r1
   18540:	6019      	str	r1, [r3, #0]
   18542:	605a      	str	r2, [r3, #4]
   18544:	e00e      	b.n	18564 <_free_r+0x84>
   18546:	428c      	cmp	r4, r1
   18548:	d902      	bls.n	18550 <_free_r+0x70>
   1854a:	230c      	movs	r3, #12
   1854c:	6003      	str	r3, [r0, #0]
   1854e:	e009      	b.n	18564 <_free_r+0x84>
   18550:	6808      	ldr	r0, [r1, #0]
   18552:	180c      	adds	r4, r1, r0
   18554:	42a2      	cmp	r2, r4
   18556:	d103      	bne.n	18560 <_free_r+0x80>
   18558:	6814      	ldr	r4, [r2, #0]
   1855a:	6852      	ldr	r2, [r2, #4]
   1855c:	1820      	adds	r0, r4, r0
   1855e:	6008      	str	r0, [r1, #0]
   18560:	604a      	str	r2, [r1, #4]
   18562:	6059      	str	r1, [r3, #4]
   18564:	bd30      	pop	{r4, r5, pc}
   18566:	46c0      	nop			; (mov r8, r8)
   18568:	200002dc 	.word	0x200002dc

0001856c <_malloc_r>:
   1856c:	2303      	movs	r3, #3
   1856e:	b570      	push	{r4, r5, r6, lr}
   18570:	1ccd      	adds	r5, r1, #3
   18572:	439d      	bics	r5, r3
   18574:	3508      	adds	r5, #8
   18576:	0006      	movs	r6, r0
   18578:	2d0c      	cmp	r5, #12
   1857a:	d201      	bcs.n	18580 <_malloc_r+0x14>
   1857c:	250c      	movs	r5, #12
   1857e:	e005      	b.n	1858c <_malloc_r+0x20>
   18580:	2d00      	cmp	r5, #0
   18582:	da03      	bge.n	1858c <_malloc_r+0x20>
   18584:	230c      	movs	r3, #12
   18586:	2000      	movs	r0, #0
   18588:	6033      	str	r3, [r6, #0]
   1858a:	e040      	b.n	1860e <_malloc_r+0xa2>
   1858c:	42a9      	cmp	r1, r5
   1858e:	d8f9      	bhi.n	18584 <_malloc_r+0x18>
   18590:	4b1f      	ldr	r3, [pc, #124]	; (18610 <_malloc_r+0xa4>)
   18592:	681c      	ldr	r4, [r3, #0]
   18594:	001a      	movs	r2, r3
   18596:	0021      	movs	r1, r4
   18598:	2900      	cmp	r1, #0
   1859a:	d013      	beq.n	185c4 <_malloc_r+0x58>
   1859c:	680b      	ldr	r3, [r1, #0]
   1859e:	1b5b      	subs	r3, r3, r5
   185a0:	d40d      	bmi.n	185be <_malloc_r+0x52>
   185a2:	2b0b      	cmp	r3, #11
   185a4:	d902      	bls.n	185ac <_malloc_r+0x40>
   185a6:	600b      	str	r3, [r1, #0]
   185a8:	18cc      	adds	r4, r1, r3
   185aa:	e01e      	b.n	185ea <_malloc_r+0x7e>
   185ac:	428c      	cmp	r4, r1
   185ae:	d102      	bne.n	185b6 <_malloc_r+0x4a>
   185b0:	6863      	ldr	r3, [r4, #4]
   185b2:	6013      	str	r3, [r2, #0]
   185b4:	e01a      	b.n	185ec <_malloc_r+0x80>
   185b6:	684b      	ldr	r3, [r1, #4]
   185b8:	6063      	str	r3, [r4, #4]
   185ba:	000c      	movs	r4, r1
   185bc:	e016      	b.n	185ec <_malloc_r+0x80>
   185be:	000c      	movs	r4, r1
   185c0:	6849      	ldr	r1, [r1, #4]
   185c2:	e7e9      	b.n	18598 <_malloc_r+0x2c>
   185c4:	4c13      	ldr	r4, [pc, #76]	; (18614 <_malloc_r+0xa8>)
   185c6:	6823      	ldr	r3, [r4, #0]
   185c8:	2b00      	cmp	r3, #0
   185ca:	d103      	bne.n	185d4 <_malloc_r+0x68>
   185cc:	0030      	movs	r0, r6
   185ce:	f000 f8bd 	bl	1874c <_sbrk_r>
   185d2:	6020      	str	r0, [r4, #0]
   185d4:	0029      	movs	r1, r5
   185d6:	0030      	movs	r0, r6
   185d8:	f000 f8b8 	bl	1874c <_sbrk_r>
   185dc:	1c43      	adds	r3, r0, #1
   185de:	d0d1      	beq.n	18584 <_malloc_r+0x18>
   185e0:	2303      	movs	r3, #3
   185e2:	1cc4      	adds	r4, r0, #3
   185e4:	439c      	bics	r4, r3
   185e6:	42a0      	cmp	r0, r4
   185e8:	d10a      	bne.n	18600 <_malloc_r+0x94>
   185ea:	6025      	str	r5, [r4, #0]
   185ec:	0020      	movs	r0, r4
   185ee:	2207      	movs	r2, #7
   185f0:	300b      	adds	r0, #11
   185f2:	1d23      	adds	r3, r4, #4
   185f4:	4390      	bics	r0, r2
   185f6:	1ac3      	subs	r3, r0, r3
   185f8:	d009      	beq.n	1860e <_malloc_r+0xa2>
   185fa:	425a      	negs	r2, r3
   185fc:	50e2      	str	r2, [r4, r3]
   185fe:	e006      	b.n	1860e <_malloc_r+0xa2>
   18600:	1a21      	subs	r1, r4, r0
   18602:	0030      	movs	r0, r6
   18604:	f000 f8a2 	bl	1874c <_sbrk_r>
   18608:	1c43      	adds	r3, r0, #1
   1860a:	d1ee      	bne.n	185ea <_malloc_r+0x7e>
   1860c:	e7ba      	b.n	18584 <_malloc_r+0x18>
   1860e:	bd70      	pop	{r4, r5, r6, pc}
   18610:	200002dc 	.word	0x200002dc
   18614:	200002d8 	.word	0x200002d8

00018618 <iprintf>:
   18618:	b40f      	push	{r0, r1, r2, r3}
   1861a:	4b0b      	ldr	r3, [pc, #44]	; (18648 <iprintf+0x30>)
   1861c:	b513      	push	{r0, r1, r4, lr}
   1861e:	681c      	ldr	r4, [r3, #0]
   18620:	2c00      	cmp	r4, #0
   18622:	d005      	beq.n	18630 <iprintf+0x18>
   18624:	69a3      	ldr	r3, [r4, #24]
   18626:	2b00      	cmp	r3, #0
   18628:	d102      	bne.n	18630 <iprintf+0x18>
   1862a:	0020      	movs	r0, r4
   1862c:	f000 fc40 	bl	18eb0 <__sinit>
   18630:	ab05      	add	r3, sp, #20
   18632:	9a04      	ldr	r2, [sp, #16]
   18634:	68a1      	ldr	r1, [r4, #8]
   18636:	0020      	movs	r0, r4
   18638:	9301      	str	r3, [sp, #4]
   1863a:	f000 feb9 	bl	193b0 <_vfiprintf_r>
   1863e:	bc16      	pop	{r1, r2, r4}
   18640:	bc08      	pop	{r3}
   18642:	b004      	add	sp, #16
   18644:	4718      	bx	r3
   18646:	46c0      	nop			; (mov r8, r8)
   18648:	2000008c 	.word	0x2000008c

0001864c <putchar>:
   1864c:	4b08      	ldr	r3, [pc, #32]	; (18670 <putchar+0x24>)
   1864e:	b570      	push	{r4, r5, r6, lr}
   18650:	681c      	ldr	r4, [r3, #0]
   18652:	0005      	movs	r5, r0
   18654:	2c00      	cmp	r4, #0
   18656:	d005      	beq.n	18664 <putchar+0x18>
   18658:	69a3      	ldr	r3, [r4, #24]
   1865a:	2b00      	cmp	r3, #0
   1865c:	d102      	bne.n	18664 <putchar+0x18>
   1865e:	0020      	movs	r0, r4
   18660:	f000 fc26 	bl	18eb0 <__sinit>
   18664:	0029      	movs	r1, r5
   18666:	68a2      	ldr	r2, [r4, #8]
   18668:	0020      	movs	r0, r4
   1866a:	f001 f94d 	bl	19908 <_putc_r>
   1866e:	bd70      	pop	{r4, r5, r6, pc}
   18670:	2000008c 	.word	0x2000008c

00018674 <_puts_r>:
   18674:	b570      	push	{r4, r5, r6, lr}
   18676:	0005      	movs	r5, r0
   18678:	000e      	movs	r6, r1
   1867a:	2800      	cmp	r0, #0
   1867c:	d004      	beq.n	18688 <_puts_r+0x14>
   1867e:	6983      	ldr	r3, [r0, #24]
   18680:	2b00      	cmp	r3, #0
   18682:	d101      	bne.n	18688 <_puts_r+0x14>
   18684:	f000 fc14 	bl	18eb0 <__sinit>
   18688:	69ab      	ldr	r3, [r5, #24]
   1868a:	68ac      	ldr	r4, [r5, #8]
   1868c:	2b00      	cmp	r3, #0
   1868e:	d102      	bne.n	18696 <_puts_r+0x22>
   18690:	0028      	movs	r0, r5
   18692:	f000 fc0d 	bl	18eb0 <__sinit>
   18696:	4b25      	ldr	r3, [pc, #148]	; (1872c <_puts_r+0xb8>)
   18698:	429c      	cmp	r4, r3
   1869a:	d101      	bne.n	186a0 <_puts_r+0x2c>
   1869c:	686c      	ldr	r4, [r5, #4]
   1869e:	e008      	b.n	186b2 <_puts_r+0x3e>
   186a0:	4b23      	ldr	r3, [pc, #140]	; (18730 <_puts_r+0xbc>)
   186a2:	429c      	cmp	r4, r3
   186a4:	d101      	bne.n	186aa <_puts_r+0x36>
   186a6:	68ac      	ldr	r4, [r5, #8]
   186a8:	e003      	b.n	186b2 <_puts_r+0x3e>
   186aa:	4b22      	ldr	r3, [pc, #136]	; (18734 <_puts_r+0xc0>)
   186ac:	429c      	cmp	r4, r3
   186ae:	d100      	bne.n	186b2 <_puts_r+0x3e>
   186b0:	68ec      	ldr	r4, [r5, #12]
   186b2:	89a3      	ldrh	r3, [r4, #12]
   186b4:	071b      	lsls	r3, r3, #28
   186b6:	d502      	bpl.n	186be <_puts_r+0x4a>
   186b8:	6923      	ldr	r3, [r4, #16]
   186ba:	2b00      	cmp	r3, #0
   186bc:	d111      	bne.n	186e2 <_puts_r+0x6e>
   186be:	0021      	movs	r1, r4
   186c0:	0028      	movs	r0, r5
   186c2:	f000 fa8b 	bl	18bdc <__swsetup_r>
   186c6:	2800      	cmp	r0, #0
   186c8:	d00b      	beq.n	186e2 <_puts_r+0x6e>
   186ca:	2001      	movs	r0, #1
   186cc:	4240      	negs	r0, r0
   186ce:	e02b      	b.n	18728 <_puts_r+0xb4>
   186d0:	3b01      	subs	r3, #1
   186d2:	3601      	adds	r6, #1
   186d4:	60a3      	str	r3, [r4, #8]
   186d6:	2b00      	cmp	r3, #0
   186d8:	db08      	blt.n	186ec <_puts_r+0x78>
   186da:	6823      	ldr	r3, [r4, #0]
   186dc:	1c5a      	adds	r2, r3, #1
   186de:	6022      	str	r2, [r4, #0]
   186e0:	7019      	strb	r1, [r3, #0]
   186e2:	7831      	ldrb	r1, [r6, #0]
   186e4:	68a3      	ldr	r3, [r4, #8]
   186e6:	2900      	cmp	r1, #0
   186e8:	d1f2      	bne.n	186d0 <_puts_r+0x5c>
   186ea:	e00b      	b.n	18704 <_puts_r+0x90>
   186ec:	69a2      	ldr	r2, [r4, #24]
   186ee:	4293      	cmp	r3, r2
   186f0:	db01      	blt.n	186f6 <_puts_r+0x82>
   186f2:	290a      	cmp	r1, #10
   186f4:	d1f1      	bne.n	186da <_puts_r+0x66>
   186f6:	0022      	movs	r2, r4
   186f8:	0028      	movs	r0, r5
   186fa:	f000 fa17 	bl	18b2c <__swbuf_r>
   186fe:	1c43      	adds	r3, r0, #1
   18700:	d1ef      	bne.n	186e2 <_puts_r+0x6e>
   18702:	e7e2      	b.n	186ca <_puts_r+0x56>
   18704:	3b01      	subs	r3, #1
   18706:	60a3      	str	r3, [r4, #8]
   18708:	2b00      	cmp	r3, #0
   1870a:	da08      	bge.n	1871e <_puts_r+0xaa>
   1870c:	0022      	movs	r2, r4
   1870e:	310a      	adds	r1, #10
   18710:	0028      	movs	r0, r5
   18712:	f000 fa0b 	bl	18b2c <__swbuf_r>
   18716:	1c43      	adds	r3, r0, #1
   18718:	d0d7      	beq.n	186ca <_puts_r+0x56>
   1871a:	200a      	movs	r0, #10
   1871c:	e004      	b.n	18728 <_puts_r+0xb4>
   1871e:	200a      	movs	r0, #10
   18720:	6823      	ldr	r3, [r4, #0]
   18722:	1c5a      	adds	r2, r3, #1
   18724:	6022      	str	r2, [r4, #0]
   18726:	7018      	strb	r0, [r3, #0]
   18728:	bd70      	pop	{r4, r5, r6, pc}
   1872a:	46c0      	nop			; (mov r8, r8)
   1872c:	0001b8d4 	.word	0x0001b8d4
   18730:	0001b8f4 	.word	0x0001b8f4
   18734:	0001b914 	.word	0x0001b914

00018738 <puts>:
   18738:	b510      	push	{r4, lr}
   1873a:	4b03      	ldr	r3, [pc, #12]	; (18748 <puts+0x10>)
   1873c:	0001      	movs	r1, r0
   1873e:	6818      	ldr	r0, [r3, #0]
   18740:	f7ff ff98 	bl	18674 <_puts_r>
   18744:	bd10      	pop	{r4, pc}
   18746:	46c0      	nop			; (mov r8, r8)
   18748:	2000008c 	.word	0x2000008c

0001874c <_sbrk_r>:
   1874c:	2300      	movs	r3, #0
   1874e:	b570      	push	{r4, r5, r6, lr}
   18750:	4c06      	ldr	r4, [pc, #24]	; (1876c <_sbrk_r+0x20>)
   18752:	0005      	movs	r5, r0
   18754:	0008      	movs	r0, r1
   18756:	6023      	str	r3, [r4, #0]
   18758:	f7f8 fb64 	bl	10e24 <_sbrk>
   1875c:	1c43      	adds	r3, r0, #1
   1875e:	d103      	bne.n	18768 <_sbrk_r+0x1c>
   18760:	6823      	ldr	r3, [r4, #0]
   18762:	2b00      	cmp	r3, #0
   18764:	d000      	beq.n	18768 <_sbrk_r+0x1c>
   18766:	602b      	str	r3, [r5, #0]
   18768:	bd70      	pop	{r4, r5, r6, pc}
   1876a:	46c0      	nop			; (mov r8, r8)
   1876c:	20000ea4 	.word	0x20000ea4

00018770 <setbuf>:
   18770:	424a      	negs	r2, r1
   18772:	414a      	adcs	r2, r1
   18774:	2380      	movs	r3, #128	; 0x80
   18776:	b510      	push	{r4, lr}
   18778:	0052      	lsls	r2, r2, #1
   1877a:	00db      	lsls	r3, r3, #3
   1877c:	f000 f802 	bl	18784 <setvbuf>
   18780:	bd10      	pop	{r4, pc}
	...

00018784 <setvbuf>:
   18784:	b5f0      	push	{r4, r5, r6, r7, lr}
   18786:	001d      	movs	r5, r3
   18788:	4b51      	ldr	r3, [pc, #324]	; (188d0 <setvbuf+0x14c>)
   1878a:	b085      	sub	sp, #20
   1878c:	681e      	ldr	r6, [r3, #0]
   1878e:	0004      	movs	r4, r0
   18790:	000f      	movs	r7, r1
   18792:	9200      	str	r2, [sp, #0]
   18794:	2e00      	cmp	r6, #0
   18796:	d005      	beq.n	187a4 <setvbuf+0x20>
   18798:	69b3      	ldr	r3, [r6, #24]
   1879a:	2b00      	cmp	r3, #0
   1879c:	d102      	bne.n	187a4 <setvbuf+0x20>
   1879e:	0030      	movs	r0, r6
   187a0:	f000 fb86 	bl	18eb0 <__sinit>
   187a4:	4b4b      	ldr	r3, [pc, #300]	; (188d4 <setvbuf+0x150>)
   187a6:	429c      	cmp	r4, r3
   187a8:	d101      	bne.n	187ae <setvbuf+0x2a>
   187aa:	6874      	ldr	r4, [r6, #4]
   187ac:	e008      	b.n	187c0 <setvbuf+0x3c>
   187ae:	4b4a      	ldr	r3, [pc, #296]	; (188d8 <setvbuf+0x154>)
   187b0:	429c      	cmp	r4, r3
   187b2:	d101      	bne.n	187b8 <setvbuf+0x34>
   187b4:	68b4      	ldr	r4, [r6, #8]
   187b6:	e003      	b.n	187c0 <setvbuf+0x3c>
   187b8:	4b48      	ldr	r3, [pc, #288]	; (188dc <setvbuf+0x158>)
   187ba:	429c      	cmp	r4, r3
   187bc:	d100      	bne.n	187c0 <setvbuf+0x3c>
   187be:	68f4      	ldr	r4, [r6, #12]
   187c0:	9b00      	ldr	r3, [sp, #0]
   187c2:	2b02      	cmp	r3, #2
   187c4:	d005      	beq.n	187d2 <setvbuf+0x4e>
   187c6:	2b01      	cmp	r3, #1
   187c8:	d900      	bls.n	187cc <setvbuf+0x48>
   187ca:	e07c      	b.n	188c6 <setvbuf+0x142>
   187cc:	2d00      	cmp	r5, #0
   187ce:	da00      	bge.n	187d2 <setvbuf+0x4e>
   187d0:	e079      	b.n	188c6 <setvbuf+0x142>
   187d2:	0021      	movs	r1, r4
   187d4:	0030      	movs	r0, r6
   187d6:	f000 fafd 	bl	18dd4 <_fflush_r>
   187da:	6b61      	ldr	r1, [r4, #52]	; 0x34
   187dc:	2900      	cmp	r1, #0
   187de:	d008      	beq.n	187f2 <setvbuf+0x6e>
   187e0:	0023      	movs	r3, r4
   187e2:	3344      	adds	r3, #68	; 0x44
   187e4:	4299      	cmp	r1, r3
   187e6:	d002      	beq.n	187ee <setvbuf+0x6a>
   187e8:	0030      	movs	r0, r6
   187ea:	f7ff fe79 	bl	184e0 <_free_r>
   187ee:	2300      	movs	r3, #0
   187f0:	6363      	str	r3, [r4, #52]	; 0x34
   187f2:	2300      	movs	r3, #0
   187f4:	61a3      	str	r3, [r4, #24]
   187f6:	6063      	str	r3, [r4, #4]
   187f8:	89a3      	ldrh	r3, [r4, #12]
   187fa:	061b      	lsls	r3, r3, #24
   187fc:	d503      	bpl.n	18806 <setvbuf+0x82>
   187fe:	6921      	ldr	r1, [r4, #16]
   18800:	0030      	movs	r0, r6
   18802:	f7ff fe6d 	bl	184e0 <_free_r>
   18806:	89a2      	ldrh	r2, [r4, #12]
   18808:	4b35      	ldr	r3, [pc, #212]	; (188e0 <setvbuf+0x15c>)
   1880a:	4013      	ands	r3, r2
   1880c:	81a3      	strh	r3, [r4, #12]
   1880e:	9b00      	ldr	r3, [sp, #0]
   18810:	2b02      	cmp	r3, #2
   18812:	d021      	beq.n	18858 <setvbuf+0xd4>
   18814:	ab03      	add	r3, sp, #12
   18816:	aa02      	add	r2, sp, #8
   18818:	0021      	movs	r1, r4
   1881a:	0030      	movs	r0, r6
   1881c:	f000 fbdc 	bl	18fd8 <__swhatbuf_r>
   18820:	89a3      	ldrh	r3, [r4, #12]
   18822:	4318      	orrs	r0, r3
   18824:	81a0      	strh	r0, [r4, #12]
   18826:	2d00      	cmp	r5, #0
   18828:	d101      	bne.n	1882e <setvbuf+0xaa>
   1882a:	9d02      	ldr	r5, [sp, #8]
   1882c:	e001      	b.n	18832 <setvbuf+0xae>
   1882e:	2f00      	cmp	r7, #0
   18830:	d125      	bne.n	1887e <setvbuf+0xfa>
   18832:	0028      	movs	r0, r5
   18834:	f7ff fe1a 	bl	1846c <malloc>
   18838:	9501      	str	r5, [sp, #4]
   1883a:	1e07      	subs	r7, r0, #0
   1883c:	d11a      	bne.n	18874 <setvbuf+0xf0>
   1883e:	9b02      	ldr	r3, [sp, #8]
   18840:	9301      	str	r3, [sp, #4]
   18842:	42ab      	cmp	r3, r5
   18844:	d102      	bne.n	1884c <setvbuf+0xc8>
   18846:	2001      	movs	r0, #1
   18848:	4240      	negs	r0, r0
   1884a:	e006      	b.n	1885a <setvbuf+0xd6>
   1884c:	9801      	ldr	r0, [sp, #4]
   1884e:	f7ff fe0d 	bl	1846c <malloc>
   18852:	1e07      	subs	r7, r0, #0
   18854:	d10e      	bne.n	18874 <setvbuf+0xf0>
   18856:	e7f6      	b.n	18846 <setvbuf+0xc2>
   18858:	2000      	movs	r0, #0
   1885a:	2202      	movs	r2, #2
   1885c:	89a3      	ldrh	r3, [r4, #12]
   1885e:	4313      	orrs	r3, r2
   18860:	81a3      	strh	r3, [r4, #12]
   18862:	2300      	movs	r3, #0
   18864:	60a3      	str	r3, [r4, #8]
   18866:	0023      	movs	r3, r4
   18868:	3347      	adds	r3, #71	; 0x47
   1886a:	6023      	str	r3, [r4, #0]
   1886c:	6123      	str	r3, [r4, #16]
   1886e:	2301      	movs	r3, #1
   18870:	6163      	str	r3, [r4, #20]
   18872:	e02a      	b.n	188ca <setvbuf+0x146>
   18874:	2280      	movs	r2, #128	; 0x80
   18876:	89a3      	ldrh	r3, [r4, #12]
   18878:	9d01      	ldr	r5, [sp, #4]
   1887a:	4313      	orrs	r3, r2
   1887c:	81a3      	strh	r3, [r4, #12]
   1887e:	69b3      	ldr	r3, [r6, #24]
   18880:	2b00      	cmp	r3, #0
   18882:	d102      	bne.n	1888a <setvbuf+0x106>
   18884:	0030      	movs	r0, r6
   18886:	f000 fb13 	bl	18eb0 <__sinit>
   1888a:	9b00      	ldr	r3, [sp, #0]
   1888c:	2b01      	cmp	r3, #1
   1888e:	d103      	bne.n	18898 <setvbuf+0x114>
   18890:	89a3      	ldrh	r3, [r4, #12]
   18892:	9a00      	ldr	r2, [sp, #0]
   18894:	431a      	orrs	r2, r3
   18896:	81a2      	strh	r2, [r4, #12]
   18898:	2308      	movs	r3, #8
   1889a:	89a2      	ldrh	r2, [r4, #12]
   1889c:	6027      	str	r7, [r4, #0]
   1889e:	4013      	ands	r3, r2
   188a0:	6127      	str	r7, [r4, #16]
   188a2:	6165      	str	r5, [r4, #20]
   188a4:	1e18      	subs	r0, r3, #0
   188a6:	d00c      	beq.n	188c2 <setvbuf+0x13e>
   188a8:	2301      	movs	r3, #1
   188aa:	401a      	ands	r2, r3
   188ac:	2300      	movs	r3, #0
   188ae:	1e10      	subs	r0, r2, #0
   188b0:	4298      	cmp	r0, r3
   188b2:	d004      	beq.n	188be <setvbuf+0x13a>
   188b4:	426d      	negs	r5, r5
   188b6:	60a3      	str	r3, [r4, #8]
   188b8:	61a5      	str	r5, [r4, #24]
   188ba:	0018      	movs	r0, r3
   188bc:	e005      	b.n	188ca <setvbuf+0x146>
   188be:	60a5      	str	r5, [r4, #8]
   188c0:	e003      	b.n	188ca <setvbuf+0x146>
   188c2:	60a3      	str	r3, [r4, #8]
   188c4:	e001      	b.n	188ca <setvbuf+0x146>
   188c6:	2001      	movs	r0, #1
   188c8:	4240      	negs	r0, r0
   188ca:	b005      	add	sp, #20
   188cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   188ce:	46c0      	nop			; (mov r8, r8)
   188d0:	2000008c 	.word	0x2000008c
   188d4:	0001b8d4 	.word	0x0001b8d4
   188d8:	0001b8f4 	.word	0x0001b8f4
   188dc:	0001b914 	.word	0x0001b914
   188e0:	fffff35c 	.word	0xfffff35c

000188e4 <siprintf>:
   188e4:	b40e      	push	{r1, r2, r3}
   188e6:	b510      	push	{r4, lr}
   188e8:	b09d      	sub	sp, #116	; 0x74
   188ea:	a902      	add	r1, sp, #8
   188ec:	9002      	str	r0, [sp, #8]
   188ee:	6108      	str	r0, [r1, #16]
   188f0:	480b      	ldr	r0, [pc, #44]	; (18920 <siprintf+0x3c>)
   188f2:	2482      	movs	r4, #130	; 0x82
   188f4:	6088      	str	r0, [r1, #8]
   188f6:	6148      	str	r0, [r1, #20]
   188f8:	2001      	movs	r0, #1
   188fa:	4240      	negs	r0, r0
   188fc:	ab1f      	add	r3, sp, #124	; 0x7c
   188fe:	81c8      	strh	r0, [r1, #14]
   18900:	4808      	ldr	r0, [pc, #32]	; (18924 <siprintf+0x40>)
   18902:	cb04      	ldmia	r3!, {r2}
   18904:	00a4      	lsls	r4, r4, #2
   18906:	6800      	ldr	r0, [r0, #0]
   18908:	9301      	str	r3, [sp, #4]
   1890a:	818c      	strh	r4, [r1, #12]
   1890c:	f000 fc2a 	bl	19164 <_svfiprintf_r>
   18910:	2300      	movs	r3, #0
   18912:	9a02      	ldr	r2, [sp, #8]
   18914:	7013      	strb	r3, [r2, #0]
   18916:	b01d      	add	sp, #116	; 0x74
   18918:	bc10      	pop	{r4}
   1891a:	bc08      	pop	{r3}
   1891c:	b003      	add	sp, #12
   1891e:	4718      	bx	r3
   18920:	7fffffff 	.word	0x7fffffff
   18924:	2000008c 	.word	0x2000008c

00018928 <strcmp>:
   18928:	7802      	ldrb	r2, [r0, #0]
   1892a:	780b      	ldrb	r3, [r1, #0]
   1892c:	2a00      	cmp	r2, #0
   1892e:	d003      	beq.n	18938 <strcmp+0x10>
   18930:	3001      	adds	r0, #1
   18932:	3101      	adds	r1, #1
   18934:	429a      	cmp	r2, r3
   18936:	d0f7      	beq.n	18928 <strcmp>
   18938:	1ad0      	subs	r0, r2, r3
   1893a:	4770      	bx	lr

0001893c <strcpy>:
   1893c:	1c03      	adds	r3, r0, #0
   1893e:	780a      	ldrb	r2, [r1, #0]
   18940:	3101      	adds	r1, #1
   18942:	701a      	strb	r2, [r3, #0]
   18944:	3301      	adds	r3, #1
   18946:	2a00      	cmp	r2, #0
   18948:	d1f9      	bne.n	1893e <strcpy+0x2>
   1894a:	4770      	bx	lr

0001894c <strdup>:
   1894c:	b510      	push	{r4, lr}
   1894e:	4b03      	ldr	r3, [pc, #12]	; (1895c <strdup+0x10>)
   18950:	0001      	movs	r1, r0
   18952:	6818      	ldr	r0, [r3, #0]
   18954:	f000 f804 	bl	18960 <_strdup_r>
   18958:	bd10      	pop	{r4, pc}
   1895a:	46c0      	nop			; (mov r8, r8)
   1895c:	2000008c 	.word	0x2000008c

00018960 <_strdup_r>:
   18960:	b570      	push	{r4, r5, r6, lr}
   18962:	0005      	movs	r5, r0
   18964:	0008      	movs	r0, r1
   18966:	000e      	movs	r6, r1
   18968:	f000 f80d 	bl	18986 <strlen>
   1896c:	1c44      	adds	r4, r0, #1
   1896e:	0021      	movs	r1, r4
   18970:	0028      	movs	r0, r5
   18972:	f7ff fdfb 	bl	1856c <_malloc_r>
   18976:	1e05      	subs	r5, r0, #0
   18978:	d003      	beq.n	18982 <_strdup_r+0x22>
   1897a:	0022      	movs	r2, r4
   1897c:	0031      	movs	r1, r6
   1897e:	f7ff fd89 	bl	18494 <memcpy>
   18982:	0028      	movs	r0, r5
   18984:	bd70      	pop	{r4, r5, r6, pc}

00018986 <strlen>:
   18986:	2300      	movs	r3, #0
   18988:	5cc2      	ldrb	r2, [r0, r3]
   1898a:	3301      	adds	r3, #1
   1898c:	2a00      	cmp	r2, #0
   1898e:	d1fb      	bne.n	18988 <strlen+0x2>
   18990:	1e58      	subs	r0, r3, #1
   18992:	4770      	bx	lr

00018994 <strncmp>:
   18994:	2300      	movs	r3, #0
   18996:	b530      	push	{r4, r5, lr}
   18998:	429a      	cmp	r2, r3
   1899a:	d00b      	beq.n	189b4 <strncmp+0x20>
   1899c:	3a01      	subs	r2, #1
   1899e:	5cc4      	ldrb	r4, [r0, r3]
   189a0:	5ccd      	ldrb	r5, [r1, r3]
   189a2:	42ac      	cmp	r4, r5
   189a4:	d105      	bne.n	189b2 <strncmp+0x1e>
   189a6:	429a      	cmp	r2, r3
   189a8:	d002      	beq.n	189b0 <strncmp+0x1c>
   189aa:	3301      	adds	r3, #1
   189ac:	2c00      	cmp	r4, #0
   189ae:	d1f6      	bne.n	1899e <strncmp+0xa>
   189b0:	0025      	movs	r5, r4
   189b2:	1b63      	subs	r3, r4, r5
   189b4:	0018      	movs	r0, r3
   189b6:	bd30      	pop	{r4, r5, pc}

000189b8 <strstr>:
   189b8:	b510      	push	{r4, lr}
   189ba:	7803      	ldrb	r3, [r0, #0]
   189bc:	0002      	movs	r2, r0
   189be:	2b00      	cmp	r3, #0
   189c0:	d105      	bne.n	189ce <strstr+0x16>
   189c2:	7809      	ldrb	r1, [r1, #0]
   189c4:	0018      	movs	r0, r3
   189c6:	2900      	cmp	r1, #0
   189c8:	d00d      	beq.n	189e6 <strstr+0x2e>
   189ca:	e00f      	b.n	189ec <strstr+0x34>
   189cc:	3201      	adds	r2, #1
   189ce:	7813      	ldrb	r3, [r2, #0]
   189d0:	2b00      	cmp	r3, #0
   189d2:	d00a      	beq.n	189ea <strstr+0x32>
   189d4:	2300      	movs	r3, #0
   189d6:	5cc8      	ldrb	r0, [r1, r3]
   189d8:	2800      	cmp	r0, #0
   189da:	d004      	beq.n	189e6 <strstr+0x2e>
   189dc:	5cd4      	ldrb	r4, [r2, r3]
   189de:	4284      	cmp	r4, r0
   189e0:	d1f4      	bne.n	189cc <strstr+0x14>
   189e2:	3301      	adds	r3, #1
   189e4:	e7f7      	b.n	189d6 <strstr+0x1e>
   189e6:	0010      	movs	r0, r2
   189e8:	e000      	b.n	189ec <strstr+0x34>
   189ea:	0018      	movs	r0, r3
   189ec:	bd10      	pop	{r4, pc}
	...

000189f0 <_strtol_r>:
   189f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   189f2:	001e      	movs	r6, r3
   189f4:	4b45      	ldr	r3, [pc, #276]	; (18b0c <_strtol_r+0x11c>)
   189f6:	b087      	sub	sp, #28
   189f8:	681b      	ldr	r3, [r3, #0]
   189fa:	9201      	str	r2, [sp, #4]
   189fc:	9302      	str	r3, [sp, #8]
   189fe:	2208      	movs	r2, #8
   18a00:	000b      	movs	r3, r1
   18a02:	9005      	str	r0, [sp, #20]
   18a04:	9103      	str	r1, [sp, #12]
   18a06:	781c      	ldrb	r4, [r3, #0]
   18a08:	9902      	ldr	r1, [sp, #8]
   18a0a:	1c5d      	adds	r5, r3, #1
   18a0c:	1909      	adds	r1, r1, r4
   18a0e:	7848      	ldrb	r0, [r1, #1]
   18a10:	4010      	ands	r0, r2
   18a12:	d001      	beq.n	18a18 <_strtol_r+0x28>
   18a14:	002b      	movs	r3, r5
   18a16:	e7f6      	b.n	18a06 <_strtol_r+0x16>
   18a18:	2c2d      	cmp	r4, #45	; 0x2d
   18a1a:	d104      	bne.n	18a26 <_strtol_r+0x36>
   18a1c:	1c9d      	adds	r5, r3, #2
   18a1e:	785c      	ldrb	r4, [r3, #1]
   18a20:	2301      	movs	r3, #1
   18a22:	9300      	str	r3, [sp, #0]
   18a24:	e004      	b.n	18a30 <_strtol_r+0x40>
   18a26:	9000      	str	r0, [sp, #0]
   18a28:	2c2b      	cmp	r4, #43	; 0x2b
   18a2a:	d101      	bne.n	18a30 <_strtol_r+0x40>
   18a2c:	785c      	ldrb	r4, [r3, #1]
   18a2e:	1c9d      	adds	r5, r3, #2
   18a30:	2e00      	cmp	r6, #0
   18a32:	d002      	beq.n	18a3a <_strtol_r+0x4a>
   18a34:	2e10      	cmp	r6, #16
   18a36:	d10a      	bne.n	18a4e <_strtol_r+0x5e>
   18a38:	e062      	b.n	18b00 <_strtol_r+0x110>
   18a3a:	2c30      	cmp	r4, #48	; 0x30
   18a3c:	d15e      	bne.n	18afc <_strtol_r+0x10c>
   18a3e:	2220      	movs	r2, #32
   18a40:	782b      	ldrb	r3, [r5, #0]
   18a42:	4393      	bics	r3, r2
   18a44:	2b58      	cmp	r3, #88	; 0x58
   18a46:	d154      	bne.n	18af2 <_strtol_r+0x102>
   18a48:	2610      	movs	r6, #16
   18a4a:	786c      	ldrb	r4, [r5, #1]
   18a4c:	3502      	adds	r5, #2
   18a4e:	9f00      	ldr	r7, [sp, #0]
   18a50:	0031      	movs	r1, r6
   18a52:	1e7b      	subs	r3, r7, #1
   18a54:	419f      	sbcs	r7, r3
   18a56:	4b2e      	ldr	r3, [pc, #184]	; (18b10 <_strtol_r+0x120>)
   18a58:	18ff      	adds	r7, r7, r3
   18a5a:	0038      	movs	r0, r7
   18a5c:	f7ff fbbe 	bl	181dc <__aeabi_uidivmod>
   18a60:	0038      	movs	r0, r7
   18a62:	9104      	str	r1, [sp, #16]
   18a64:	0031      	movs	r1, r6
   18a66:	f7ff fb33 	bl	180d0 <__aeabi_uidiv>
   18a6a:	2300      	movs	r3, #0
   18a6c:	2203      	movs	r2, #3
   18a6e:	0007      	movs	r7, r0
   18a70:	4694      	mov	ip, r2
   18a72:	0018      	movs	r0, r3
   18a74:	9a02      	ldr	r2, [sp, #8]
   18a76:	1912      	adds	r2, r2, r4
   18a78:	7851      	ldrb	r1, [r2, #1]
   18a7a:	2204      	movs	r2, #4
   18a7c:	4211      	tst	r1, r2
   18a7e:	d001      	beq.n	18a84 <_strtol_r+0x94>
   18a80:	3c30      	subs	r4, #48	; 0x30
   18a82:	e007      	b.n	18a94 <_strtol_r+0xa4>
   18a84:	4662      	mov	r2, ip
   18a86:	4011      	ands	r1, r2
   18a88:	d017      	beq.n	18aba <_strtol_r+0xca>
   18a8a:	2237      	movs	r2, #55	; 0x37
   18a8c:	2901      	cmp	r1, #1
   18a8e:	d000      	beq.n	18a92 <_strtol_r+0xa2>
   18a90:	3220      	adds	r2, #32
   18a92:	1aa4      	subs	r4, r4, r2
   18a94:	42a6      	cmp	r6, r4
   18a96:	dd10      	ble.n	18aba <_strtol_r+0xca>
   18a98:	1c5a      	adds	r2, r3, #1
   18a9a:	d00b      	beq.n	18ab4 <_strtol_r+0xc4>
   18a9c:	42b8      	cmp	r0, r7
   18a9e:	d807      	bhi.n	18ab0 <_strtol_r+0xc0>
   18aa0:	d102      	bne.n	18aa8 <_strtol_r+0xb8>
   18aa2:	9b04      	ldr	r3, [sp, #16]
   18aa4:	429c      	cmp	r4, r3
   18aa6:	dc03      	bgt.n	18ab0 <_strtol_r+0xc0>
   18aa8:	4370      	muls	r0, r6
   18aaa:	2301      	movs	r3, #1
   18aac:	1820      	adds	r0, r4, r0
   18aae:	e001      	b.n	18ab4 <_strtol_r+0xc4>
   18ab0:	2301      	movs	r3, #1
   18ab2:	425b      	negs	r3, r3
   18ab4:	782c      	ldrb	r4, [r5, #0]
   18ab6:	3501      	adds	r5, #1
   18ab8:	e7dc      	b.n	18a74 <_strtol_r+0x84>
   18aba:	1c5a      	adds	r2, r3, #1
   18abc:	d10b      	bne.n	18ad6 <_strtol_r+0xe6>
   18abe:	9800      	ldr	r0, [sp, #0]
   18ac0:	9a05      	ldr	r2, [sp, #20]
   18ac2:	1e43      	subs	r3, r0, #1
   18ac4:	4198      	sbcs	r0, r3
   18ac6:	4b12      	ldr	r3, [pc, #72]	; (18b10 <_strtol_r+0x120>)
   18ac8:	18c0      	adds	r0, r0, r3
   18aca:	2322      	movs	r3, #34	; 0x22
   18acc:	6013      	str	r3, [r2, #0]
   18ace:	9b01      	ldr	r3, [sp, #4]
   18ad0:	2b00      	cmp	r3, #0
   18ad2:	d10a      	bne.n	18aea <_strtol_r+0xfa>
   18ad4:	e017      	b.n	18b06 <_strtol_r+0x116>
   18ad6:	9a00      	ldr	r2, [sp, #0]
   18ad8:	2a00      	cmp	r2, #0
   18ada:	d000      	beq.n	18ade <_strtol_r+0xee>
   18adc:	4240      	negs	r0, r0
   18ade:	9a01      	ldr	r2, [sp, #4]
   18ae0:	2a00      	cmp	r2, #0
   18ae2:	d010      	beq.n	18b06 <_strtol_r+0x116>
   18ae4:	9a03      	ldr	r2, [sp, #12]
   18ae6:	2b00      	cmp	r3, #0
   18ae8:	d000      	beq.n	18aec <_strtol_r+0xfc>
   18aea:	1e6a      	subs	r2, r5, #1
   18aec:	9b01      	ldr	r3, [sp, #4]
   18aee:	601a      	str	r2, [r3, #0]
   18af0:	e009      	b.n	18b06 <_strtol_r+0x116>
   18af2:	2430      	movs	r4, #48	; 0x30
   18af4:	2e00      	cmp	r6, #0
   18af6:	d1aa      	bne.n	18a4e <_strtol_r+0x5e>
   18af8:	2608      	movs	r6, #8
   18afa:	e7a8      	b.n	18a4e <_strtol_r+0x5e>
   18afc:	260a      	movs	r6, #10
   18afe:	e7a6      	b.n	18a4e <_strtol_r+0x5e>
   18b00:	2c30      	cmp	r4, #48	; 0x30
   18b02:	d09c      	beq.n	18a3e <_strtol_r+0x4e>
   18b04:	e7a3      	b.n	18a4e <_strtol_r+0x5e>
   18b06:	b007      	add	sp, #28
   18b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18b0a:	46c0      	nop			; (mov r8, r8)
   18b0c:	20000090 	.word	0x20000090
   18b10:	7fffffff 	.word	0x7fffffff

00018b14 <strtol>:
   18b14:	b510      	push	{r4, lr}
   18b16:	0013      	movs	r3, r2
   18b18:	000a      	movs	r2, r1
   18b1a:	0001      	movs	r1, r0
   18b1c:	4802      	ldr	r0, [pc, #8]	; (18b28 <strtol+0x14>)
   18b1e:	6800      	ldr	r0, [r0, #0]
   18b20:	f7ff ff66 	bl	189f0 <_strtol_r>
   18b24:	bd10      	pop	{r4, pc}
   18b26:	46c0      	nop			; (mov r8, r8)
   18b28:	2000008c 	.word	0x2000008c

00018b2c <__swbuf_r>:
   18b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b2e:	0005      	movs	r5, r0
   18b30:	000f      	movs	r7, r1
   18b32:	0014      	movs	r4, r2
   18b34:	2800      	cmp	r0, #0
   18b36:	d004      	beq.n	18b42 <__swbuf_r+0x16>
   18b38:	6983      	ldr	r3, [r0, #24]
   18b3a:	2b00      	cmp	r3, #0
   18b3c:	d101      	bne.n	18b42 <__swbuf_r+0x16>
   18b3e:	f000 f9b7 	bl	18eb0 <__sinit>
   18b42:	4b23      	ldr	r3, [pc, #140]	; (18bd0 <__swbuf_r+0xa4>)
   18b44:	429c      	cmp	r4, r3
   18b46:	d101      	bne.n	18b4c <__swbuf_r+0x20>
   18b48:	686c      	ldr	r4, [r5, #4]
   18b4a:	e008      	b.n	18b5e <__swbuf_r+0x32>
   18b4c:	4b21      	ldr	r3, [pc, #132]	; (18bd4 <__swbuf_r+0xa8>)
   18b4e:	429c      	cmp	r4, r3
   18b50:	d101      	bne.n	18b56 <__swbuf_r+0x2a>
   18b52:	68ac      	ldr	r4, [r5, #8]
   18b54:	e003      	b.n	18b5e <__swbuf_r+0x32>
   18b56:	4b20      	ldr	r3, [pc, #128]	; (18bd8 <__swbuf_r+0xac>)
   18b58:	429c      	cmp	r4, r3
   18b5a:	d100      	bne.n	18b5e <__swbuf_r+0x32>
   18b5c:	68ec      	ldr	r4, [r5, #12]
   18b5e:	69a3      	ldr	r3, [r4, #24]
   18b60:	60a3      	str	r3, [r4, #8]
   18b62:	89a3      	ldrh	r3, [r4, #12]
   18b64:	071b      	lsls	r3, r3, #28
   18b66:	d50a      	bpl.n	18b7e <__swbuf_r+0x52>
   18b68:	6923      	ldr	r3, [r4, #16]
   18b6a:	2b00      	cmp	r3, #0
   18b6c:	d007      	beq.n	18b7e <__swbuf_r+0x52>
   18b6e:	6823      	ldr	r3, [r4, #0]
   18b70:	6922      	ldr	r2, [r4, #16]
   18b72:	b2fe      	uxtb	r6, r7
   18b74:	1a98      	subs	r0, r3, r2
   18b76:	6963      	ldr	r3, [r4, #20]
   18b78:	4298      	cmp	r0, r3
   18b7a:	db0f      	blt.n	18b9c <__swbuf_r+0x70>
   18b7c:	e008      	b.n	18b90 <__swbuf_r+0x64>
   18b7e:	0021      	movs	r1, r4
   18b80:	0028      	movs	r0, r5
   18b82:	f000 f82b 	bl	18bdc <__swsetup_r>
   18b86:	2800      	cmp	r0, #0
   18b88:	d0f1      	beq.n	18b6e <__swbuf_r+0x42>
   18b8a:	2001      	movs	r0, #1
   18b8c:	4240      	negs	r0, r0
   18b8e:	e01d      	b.n	18bcc <__swbuf_r+0xa0>
   18b90:	0021      	movs	r1, r4
   18b92:	0028      	movs	r0, r5
   18b94:	f000 f91e 	bl	18dd4 <_fflush_r>
   18b98:	2800      	cmp	r0, #0
   18b9a:	d1f6      	bne.n	18b8a <__swbuf_r+0x5e>
   18b9c:	68a3      	ldr	r3, [r4, #8]
   18b9e:	3001      	adds	r0, #1
   18ba0:	3b01      	subs	r3, #1
   18ba2:	60a3      	str	r3, [r4, #8]
   18ba4:	6823      	ldr	r3, [r4, #0]
   18ba6:	1c5a      	adds	r2, r3, #1
   18ba8:	6022      	str	r2, [r4, #0]
   18baa:	701f      	strb	r7, [r3, #0]
   18bac:	6963      	ldr	r3, [r4, #20]
   18bae:	4298      	cmp	r0, r3
   18bb0:	d005      	beq.n	18bbe <__swbuf_r+0x92>
   18bb2:	89a3      	ldrh	r3, [r4, #12]
   18bb4:	0030      	movs	r0, r6
   18bb6:	07db      	lsls	r3, r3, #31
   18bb8:	d508      	bpl.n	18bcc <__swbuf_r+0xa0>
   18bba:	2e0a      	cmp	r6, #10
   18bbc:	d106      	bne.n	18bcc <__swbuf_r+0xa0>
   18bbe:	0021      	movs	r1, r4
   18bc0:	0028      	movs	r0, r5
   18bc2:	f000 f907 	bl	18dd4 <_fflush_r>
   18bc6:	2800      	cmp	r0, #0
   18bc8:	d1df      	bne.n	18b8a <__swbuf_r+0x5e>
   18bca:	0030      	movs	r0, r6
   18bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18bce:	46c0      	nop			; (mov r8, r8)
   18bd0:	0001b8d4 	.word	0x0001b8d4
   18bd4:	0001b8f4 	.word	0x0001b8f4
   18bd8:	0001b914 	.word	0x0001b914

00018bdc <__swsetup_r>:
   18bdc:	4b36      	ldr	r3, [pc, #216]	; (18cb8 <__swsetup_r+0xdc>)
   18bde:	b570      	push	{r4, r5, r6, lr}
   18be0:	681d      	ldr	r5, [r3, #0]
   18be2:	0006      	movs	r6, r0
   18be4:	000c      	movs	r4, r1
   18be6:	2d00      	cmp	r5, #0
   18be8:	d005      	beq.n	18bf6 <__swsetup_r+0x1a>
   18bea:	69ab      	ldr	r3, [r5, #24]
   18bec:	2b00      	cmp	r3, #0
   18bee:	d102      	bne.n	18bf6 <__swsetup_r+0x1a>
   18bf0:	0028      	movs	r0, r5
   18bf2:	f000 f95d 	bl	18eb0 <__sinit>
   18bf6:	4b31      	ldr	r3, [pc, #196]	; (18cbc <__swsetup_r+0xe0>)
   18bf8:	429c      	cmp	r4, r3
   18bfa:	d101      	bne.n	18c00 <__swsetup_r+0x24>
   18bfc:	686c      	ldr	r4, [r5, #4]
   18bfe:	e008      	b.n	18c12 <__swsetup_r+0x36>
   18c00:	4b2f      	ldr	r3, [pc, #188]	; (18cc0 <__swsetup_r+0xe4>)
   18c02:	429c      	cmp	r4, r3
   18c04:	d101      	bne.n	18c0a <__swsetup_r+0x2e>
   18c06:	68ac      	ldr	r4, [r5, #8]
   18c08:	e003      	b.n	18c12 <__swsetup_r+0x36>
   18c0a:	4b2e      	ldr	r3, [pc, #184]	; (18cc4 <__swsetup_r+0xe8>)
   18c0c:	429c      	cmp	r4, r3
   18c0e:	d100      	bne.n	18c12 <__swsetup_r+0x36>
   18c10:	68ec      	ldr	r4, [r5, #12]
   18c12:	220c      	movs	r2, #12
   18c14:	5ea3      	ldrsh	r3, [r4, r2]
   18c16:	b29a      	uxth	r2, r3
   18c18:	0711      	lsls	r1, r2, #28
   18c1a:	d423      	bmi.n	18c64 <__swsetup_r+0x88>
   18c1c:	06d1      	lsls	r1, r2, #27
   18c1e:	d407      	bmi.n	18c30 <__swsetup_r+0x54>
   18c20:	2209      	movs	r2, #9
   18c22:	2001      	movs	r0, #1
   18c24:	6032      	str	r2, [r6, #0]
   18c26:	3237      	adds	r2, #55	; 0x37
   18c28:	4313      	orrs	r3, r2
   18c2a:	81a3      	strh	r3, [r4, #12]
   18c2c:	4240      	negs	r0, r0
   18c2e:	e042      	b.n	18cb6 <__swsetup_r+0xda>
   18c30:	0753      	lsls	r3, r2, #29
   18c32:	d513      	bpl.n	18c5c <__swsetup_r+0x80>
   18c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
   18c36:	2900      	cmp	r1, #0
   18c38:	d008      	beq.n	18c4c <__swsetup_r+0x70>
   18c3a:	0023      	movs	r3, r4
   18c3c:	3344      	adds	r3, #68	; 0x44
   18c3e:	4299      	cmp	r1, r3
   18c40:	d002      	beq.n	18c48 <__swsetup_r+0x6c>
   18c42:	0030      	movs	r0, r6
   18c44:	f7ff fc4c 	bl	184e0 <_free_r>
   18c48:	2300      	movs	r3, #0
   18c4a:	6363      	str	r3, [r4, #52]	; 0x34
   18c4c:	2224      	movs	r2, #36	; 0x24
   18c4e:	89a3      	ldrh	r3, [r4, #12]
   18c50:	4393      	bics	r3, r2
   18c52:	81a3      	strh	r3, [r4, #12]
   18c54:	2300      	movs	r3, #0
   18c56:	6063      	str	r3, [r4, #4]
   18c58:	6923      	ldr	r3, [r4, #16]
   18c5a:	6023      	str	r3, [r4, #0]
   18c5c:	2208      	movs	r2, #8
   18c5e:	89a3      	ldrh	r3, [r4, #12]
   18c60:	4313      	orrs	r3, r2
   18c62:	81a3      	strh	r3, [r4, #12]
   18c64:	6923      	ldr	r3, [r4, #16]
   18c66:	2b00      	cmp	r3, #0
   18c68:	d10b      	bne.n	18c82 <__swsetup_r+0xa6>
   18c6a:	23a0      	movs	r3, #160	; 0xa0
   18c6c:	89a2      	ldrh	r2, [r4, #12]
   18c6e:	009b      	lsls	r3, r3, #2
   18c70:	4013      	ands	r3, r2
   18c72:	2280      	movs	r2, #128	; 0x80
   18c74:	0092      	lsls	r2, r2, #2
   18c76:	4293      	cmp	r3, r2
   18c78:	d003      	beq.n	18c82 <__swsetup_r+0xa6>
   18c7a:	0021      	movs	r1, r4
   18c7c:	0030      	movs	r0, r6
   18c7e:	f000 f9d1 	bl	19024 <__smakebuf_r>
   18c82:	2301      	movs	r3, #1
   18c84:	89a2      	ldrh	r2, [r4, #12]
   18c86:	4013      	ands	r3, r2
   18c88:	d005      	beq.n	18c96 <__swsetup_r+0xba>
   18c8a:	2300      	movs	r3, #0
   18c8c:	60a3      	str	r3, [r4, #8]
   18c8e:	6963      	ldr	r3, [r4, #20]
   18c90:	425b      	negs	r3, r3
   18c92:	61a3      	str	r3, [r4, #24]
   18c94:	e003      	b.n	18c9e <__swsetup_r+0xc2>
   18c96:	0792      	lsls	r2, r2, #30
   18c98:	d400      	bmi.n	18c9c <__swsetup_r+0xc0>
   18c9a:	6963      	ldr	r3, [r4, #20]
   18c9c:	60a3      	str	r3, [r4, #8]
   18c9e:	2000      	movs	r0, #0
   18ca0:	6923      	ldr	r3, [r4, #16]
   18ca2:	4283      	cmp	r3, r0
   18ca4:	d107      	bne.n	18cb6 <__swsetup_r+0xda>
   18ca6:	220c      	movs	r2, #12
   18ca8:	5ea3      	ldrsh	r3, [r4, r2]
   18caa:	061a      	lsls	r2, r3, #24
   18cac:	d503      	bpl.n	18cb6 <__swsetup_r+0xda>
   18cae:	2240      	movs	r2, #64	; 0x40
   18cb0:	4313      	orrs	r3, r2
   18cb2:	81a3      	strh	r3, [r4, #12]
   18cb4:	3801      	subs	r0, #1
   18cb6:	bd70      	pop	{r4, r5, r6, pc}
   18cb8:	2000008c 	.word	0x2000008c
   18cbc:	0001b8d4 	.word	0x0001b8d4
   18cc0:	0001b8f4 	.word	0x0001b8f4
   18cc4:	0001b914 	.word	0x0001b914

00018cc8 <__sflush_r>:
   18cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18cca:	898a      	ldrh	r2, [r1, #12]
   18ccc:	0005      	movs	r5, r0
   18cce:	000c      	movs	r4, r1
   18cd0:	0713      	lsls	r3, r2, #28
   18cd2:	d45a      	bmi.n	18d8a <__sflush_r+0xc2>
   18cd4:	684b      	ldr	r3, [r1, #4]
   18cd6:	2b00      	cmp	r3, #0
   18cd8:	dc02      	bgt.n	18ce0 <__sflush_r+0x18>
   18cda:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   18cdc:	2b00      	cmp	r3, #0
   18cde:	dd19      	ble.n	18d14 <__sflush_r+0x4c>
   18ce0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   18ce2:	2f00      	cmp	r7, #0
   18ce4:	d016      	beq.n	18d14 <__sflush_r+0x4c>
   18ce6:	2300      	movs	r3, #0
   18ce8:	682e      	ldr	r6, [r5, #0]
   18cea:	602b      	str	r3, [r5, #0]
   18cec:	2380      	movs	r3, #128	; 0x80
   18cee:	015b      	lsls	r3, r3, #5
   18cf0:	401a      	ands	r2, r3
   18cf2:	d001      	beq.n	18cf8 <__sflush_r+0x30>
   18cf4:	6d60      	ldr	r0, [r4, #84]	; 0x54
   18cf6:	e014      	b.n	18d22 <__sflush_r+0x5a>
   18cf8:	2301      	movs	r3, #1
   18cfa:	6a21      	ldr	r1, [r4, #32]
   18cfc:	0028      	movs	r0, r5
   18cfe:	47b8      	blx	r7
   18d00:	1c43      	adds	r3, r0, #1
   18d02:	d10e      	bne.n	18d22 <__sflush_r+0x5a>
   18d04:	682b      	ldr	r3, [r5, #0]
   18d06:	2b00      	cmp	r3, #0
   18d08:	d00b      	beq.n	18d22 <__sflush_r+0x5a>
   18d0a:	2b1d      	cmp	r3, #29
   18d0c:	d001      	beq.n	18d12 <__sflush_r+0x4a>
   18d0e:	2b16      	cmp	r3, #22
   18d10:	d102      	bne.n	18d18 <__sflush_r+0x50>
   18d12:	602e      	str	r6, [r5, #0]
   18d14:	2000      	movs	r0, #0
   18d16:	e05a      	b.n	18dce <__sflush_r+0x106>
   18d18:	2240      	movs	r2, #64	; 0x40
   18d1a:	89a3      	ldrh	r3, [r4, #12]
   18d1c:	4313      	orrs	r3, r2
   18d1e:	81a3      	strh	r3, [r4, #12]
   18d20:	e055      	b.n	18dce <__sflush_r+0x106>
   18d22:	89a3      	ldrh	r3, [r4, #12]
   18d24:	075b      	lsls	r3, r3, #29
   18d26:	d506      	bpl.n	18d36 <__sflush_r+0x6e>
   18d28:	6863      	ldr	r3, [r4, #4]
   18d2a:	1ac0      	subs	r0, r0, r3
   18d2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   18d2e:	2b00      	cmp	r3, #0
   18d30:	d001      	beq.n	18d36 <__sflush_r+0x6e>
   18d32:	6c23      	ldr	r3, [r4, #64]	; 0x40
   18d34:	1ac0      	subs	r0, r0, r3
   18d36:	2300      	movs	r3, #0
   18d38:	0002      	movs	r2, r0
   18d3a:	6a21      	ldr	r1, [r4, #32]
   18d3c:	0028      	movs	r0, r5
   18d3e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   18d40:	47b8      	blx	r7
   18d42:	89a3      	ldrh	r3, [r4, #12]
   18d44:	1c42      	adds	r2, r0, #1
   18d46:	d106      	bne.n	18d56 <__sflush_r+0x8e>
   18d48:	6829      	ldr	r1, [r5, #0]
   18d4a:	291d      	cmp	r1, #29
   18d4c:	d83a      	bhi.n	18dc4 <__sflush_r+0xfc>
   18d4e:	4a20      	ldr	r2, [pc, #128]	; (18dd0 <__sflush_r+0x108>)
   18d50:	40ca      	lsrs	r2, r1
   18d52:	07d2      	lsls	r2, r2, #31
   18d54:	d536      	bpl.n	18dc4 <__sflush_r+0xfc>
   18d56:	2200      	movs	r2, #0
   18d58:	6062      	str	r2, [r4, #4]
   18d5a:	6922      	ldr	r2, [r4, #16]
   18d5c:	6022      	str	r2, [r4, #0]
   18d5e:	04db      	lsls	r3, r3, #19
   18d60:	d505      	bpl.n	18d6e <__sflush_r+0xa6>
   18d62:	1c43      	adds	r3, r0, #1
   18d64:	d102      	bne.n	18d6c <__sflush_r+0xa4>
   18d66:	682b      	ldr	r3, [r5, #0]
   18d68:	2b00      	cmp	r3, #0
   18d6a:	d100      	bne.n	18d6e <__sflush_r+0xa6>
   18d6c:	6560      	str	r0, [r4, #84]	; 0x54
   18d6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   18d70:	602e      	str	r6, [r5, #0]
   18d72:	2900      	cmp	r1, #0
   18d74:	d0ce      	beq.n	18d14 <__sflush_r+0x4c>
   18d76:	0023      	movs	r3, r4
   18d78:	3344      	adds	r3, #68	; 0x44
   18d7a:	4299      	cmp	r1, r3
   18d7c:	d002      	beq.n	18d84 <__sflush_r+0xbc>
   18d7e:	0028      	movs	r0, r5
   18d80:	f7ff fbae 	bl	184e0 <_free_r>
   18d84:	2000      	movs	r0, #0
   18d86:	6360      	str	r0, [r4, #52]	; 0x34
   18d88:	e021      	b.n	18dce <__sflush_r+0x106>
   18d8a:	690f      	ldr	r7, [r1, #16]
   18d8c:	2f00      	cmp	r7, #0
   18d8e:	d0c1      	beq.n	18d14 <__sflush_r+0x4c>
   18d90:	680b      	ldr	r3, [r1, #0]
   18d92:	600f      	str	r7, [r1, #0]
   18d94:	1bdb      	subs	r3, r3, r7
   18d96:	9301      	str	r3, [sp, #4]
   18d98:	2300      	movs	r3, #0
   18d9a:	0792      	lsls	r2, r2, #30
   18d9c:	d100      	bne.n	18da0 <__sflush_r+0xd8>
   18d9e:	694b      	ldr	r3, [r1, #20]
   18da0:	60a3      	str	r3, [r4, #8]
   18da2:	e003      	b.n	18dac <__sflush_r+0xe4>
   18da4:	9b01      	ldr	r3, [sp, #4]
   18da6:	183f      	adds	r7, r7, r0
   18da8:	1a1b      	subs	r3, r3, r0
   18daa:	9301      	str	r3, [sp, #4]
   18dac:	9b01      	ldr	r3, [sp, #4]
   18dae:	2b00      	cmp	r3, #0
   18db0:	ddb0      	ble.n	18d14 <__sflush_r+0x4c>
   18db2:	9b01      	ldr	r3, [sp, #4]
   18db4:	003a      	movs	r2, r7
   18db6:	6a21      	ldr	r1, [r4, #32]
   18db8:	0028      	movs	r0, r5
   18dba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   18dbc:	47b0      	blx	r6
   18dbe:	2800      	cmp	r0, #0
   18dc0:	dcf0      	bgt.n	18da4 <__sflush_r+0xdc>
   18dc2:	89a3      	ldrh	r3, [r4, #12]
   18dc4:	2240      	movs	r2, #64	; 0x40
   18dc6:	2001      	movs	r0, #1
   18dc8:	4313      	orrs	r3, r2
   18dca:	81a3      	strh	r3, [r4, #12]
   18dcc:	4240      	negs	r0, r0
   18dce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   18dd0:	20400001 	.word	0x20400001

00018dd4 <_fflush_r>:
   18dd4:	690b      	ldr	r3, [r1, #16]
   18dd6:	b570      	push	{r4, r5, r6, lr}
   18dd8:	0005      	movs	r5, r0
   18dda:	000c      	movs	r4, r1
   18ddc:	2b00      	cmp	r3, #0
   18dde:	d101      	bne.n	18de4 <_fflush_r+0x10>
   18de0:	2000      	movs	r0, #0
   18de2:	e01c      	b.n	18e1e <_fflush_r+0x4a>
   18de4:	2800      	cmp	r0, #0
   18de6:	d004      	beq.n	18df2 <_fflush_r+0x1e>
   18de8:	6983      	ldr	r3, [r0, #24]
   18dea:	2b00      	cmp	r3, #0
   18dec:	d101      	bne.n	18df2 <_fflush_r+0x1e>
   18dee:	f000 f85f 	bl	18eb0 <__sinit>
   18df2:	4b0b      	ldr	r3, [pc, #44]	; (18e20 <_fflush_r+0x4c>)
   18df4:	429c      	cmp	r4, r3
   18df6:	d101      	bne.n	18dfc <_fflush_r+0x28>
   18df8:	686c      	ldr	r4, [r5, #4]
   18dfa:	e008      	b.n	18e0e <_fflush_r+0x3a>
   18dfc:	4b09      	ldr	r3, [pc, #36]	; (18e24 <_fflush_r+0x50>)
   18dfe:	429c      	cmp	r4, r3
   18e00:	d101      	bne.n	18e06 <_fflush_r+0x32>
   18e02:	68ac      	ldr	r4, [r5, #8]
   18e04:	e003      	b.n	18e0e <_fflush_r+0x3a>
   18e06:	4b08      	ldr	r3, [pc, #32]	; (18e28 <_fflush_r+0x54>)
   18e08:	429c      	cmp	r4, r3
   18e0a:	d100      	bne.n	18e0e <_fflush_r+0x3a>
   18e0c:	68ec      	ldr	r4, [r5, #12]
   18e0e:	220c      	movs	r2, #12
   18e10:	5ea3      	ldrsh	r3, [r4, r2]
   18e12:	2b00      	cmp	r3, #0
   18e14:	d0e4      	beq.n	18de0 <_fflush_r+0xc>
   18e16:	0021      	movs	r1, r4
   18e18:	0028      	movs	r0, r5
   18e1a:	f7ff ff55 	bl	18cc8 <__sflush_r>
   18e1e:	bd70      	pop	{r4, r5, r6, pc}
   18e20:	0001b8d4 	.word	0x0001b8d4
   18e24:	0001b8f4 	.word	0x0001b8f4
   18e28:	0001b914 	.word	0x0001b914

00018e2c <_cleanup_r>:
   18e2c:	b510      	push	{r4, lr}
   18e2e:	4902      	ldr	r1, [pc, #8]	; (18e38 <_cleanup_r+0xc>)
   18e30:	f000 f8b0 	bl	18f94 <_fwalk_reent>
   18e34:	bd10      	pop	{r4, pc}
   18e36:	46c0      	nop			; (mov r8, r8)
   18e38:	00018dd5 	.word	0x00018dd5

00018e3c <std.isra.0>:
   18e3c:	2300      	movs	r3, #0
   18e3e:	b510      	push	{r4, lr}
   18e40:	0004      	movs	r4, r0
   18e42:	6003      	str	r3, [r0, #0]
   18e44:	6043      	str	r3, [r0, #4]
   18e46:	6083      	str	r3, [r0, #8]
   18e48:	8181      	strh	r1, [r0, #12]
   18e4a:	6643      	str	r3, [r0, #100]	; 0x64
   18e4c:	81c2      	strh	r2, [r0, #14]
   18e4e:	6103      	str	r3, [r0, #16]
   18e50:	6143      	str	r3, [r0, #20]
   18e52:	6183      	str	r3, [r0, #24]
   18e54:	0019      	movs	r1, r3
   18e56:	2208      	movs	r2, #8
   18e58:	305c      	adds	r0, #92	; 0x5c
   18e5a:	f7ff fb39 	bl	184d0 <memset>
   18e5e:	4b05      	ldr	r3, [pc, #20]	; (18e74 <std.isra.0+0x38>)
   18e60:	6224      	str	r4, [r4, #32]
   18e62:	6263      	str	r3, [r4, #36]	; 0x24
   18e64:	4b04      	ldr	r3, [pc, #16]	; (18e78 <std.isra.0+0x3c>)
   18e66:	62a3      	str	r3, [r4, #40]	; 0x28
   18e68:	4b04      	ldr	r3, [pc, #16]	; (18e7c <std.isra.0+0x40>)
   18e6a:	62e3      	str	r3, [r4, #44]	; 0x2c
   18e6c:	4b04      	ldr	r3, [pc, #16]	; (18e80 <std.isra.0+0x44>)
   18e6e:	6323      	str	r3, [r4, #48]	; 0x30
   18e70:	bd10      	pop	{r4, pc}
   18e72:	46c0      	nop			; (mov r8, r8)
   18e74:	00019975 	.word	0x00019975
   18e78:	0001999d 	.word	0x0001999d
   18e7c:	000199d5 	.word	0x000199d5
   18e80:	00019a01 	.word	0x00019a01

00018e84 <__sfmoreglue>:
   18e84:	b570      	push	{r4, r5, r6, lr}
   18e86:	2568      	movs	r5, #104	; 0x68
   18e88:	1e4b      	subs	r3, r1, #1
   18e8a:	435d      	muls	r5, r3
   18e8c:	000e      	movs	r6, r1
   18e8e:	0029      	movs	r1, r5
   18e90:	3174      	adds	r1, #116	; 0x74
   18e92:	f7ff fb6b 	bl	1856c <_malloc_r>
   18e96:	1e04      	subs	r4, r0, #0
   18e98:	d008      	beq.n	18eac <__sfmoreglue+0x28>
   18e9a:	2100      	movs	r1, #0
   18e9c:	002a      	movs	r2, r5
   18e9e:	6001      	str	r1, [r0, #0]
   18ea0:	6046      	str	r6, [r0, #4]
   18ea2:	300c      	adds	r0, #12
   18ea4:	60a0      	str	r0, [r4, #8]
   18ea6:	3268      	adds	r2, #104	; 0x68
   18ea8:	f7ff fb12 	bl	184d0 <memset>
   18eac:	0020      	movs	r0, r4
   18eae:	bd70      	pop	{r4, r5, r6, pc}

00018eb0 <__sinit>:
   18eb0:	6983      	ldr	r3, [r0, #24]
   18eb2:	b513      	push	{r0, r1, r4, lr}
   18eb4:	0004      	movs	r4, r0
   18eb6:	2b00      	cmp	r3, #0
   18eb8:	d128      	bne.n	18f0c <__sinit+0x5c>
   18eba:	6483      	str	r3, [r0, #72]	; 0x48
   18ebc:	64c3      	str	r3, [r0, #76]	; 0x4c
   18ebe:	6503      	str	r3, [r0, #80]	; 0x50
   18ec0:	4b13      	ldr	r3, [pc, #76]	; (18f10 <__sinit+0x60>)
   18ec2:	4a14      	ldr	r2, [pc, #80]	; (18f14 <__sinit+0x64>)
   18ec4:	681b      	ldr	r3, [r3, #0]
   18ec6:	6282      	str	r2, [r0, #40]	; 0x28
   18ec8:	9301      	str	r3, [sp, #4]
   18eca:	4298      	cmp	r0, r3
   18ecc:	d101      	bne.n	18ed2 <__sinit+0x22>
   18ece:	2301      	movs	r3, #1
   18ed0:	6183      	str	r3, [r0, #24]
   18ed2:	0020      	movs	r0, r4
   18ed4:	f000 f820 	bl	18f18 <__sfp>
   18ed8:	6060      	str	r0, [r4, #4]
   18eda:	0020      	movs	r0, r4
   18edc:	f000 f81c 	bl	18f18 <__sfp>
   18ee0:	60a0      	str	r0, [r4, #8]
   18ee2:	0020      	movs	r0, r4
   18ee4:	f000 f818 	bl	18f18 <__sfp>
   18ee8:	2200      	movs	r2, #0
   18eea:	60e0      	str	r0, [r4, #12]
   18eec:	2104      	movs	r1, #4
   18eee:	6860      	ldr	r0, [r4, #4]
   18ef0:	f7ff ffa4 	bl	18e3c <std.isra.0>
   18ef4:	2201      	movs	r2, #1
   18ef6:	2109      	movs	r1, #9
   18ef8:	68a0      	ldr	r0, [r4, #8]
   18efa:	f7ff ff9f 	bl	18e3c <std.isra.0>
   18efe:	2202      	movs	r2, #2
   18f00:	2112      	movs	r1, #18
   18f02:	68e0      	ldr	r0, [r4, #12]
   18f04:	f7ff ff9a 	bl	18e3c <std.isra.0>
   18f08:	2301      	movs	r3, #1
   18f0a:	61a3      	str	r3, [r4, #24]
   18f0c:	bd13      	pop	{r0, r1, r4, pc}
   18f0e:	46c0      	nop			; (mov r8, r8)
   18f10:	0001b7cc 	.word	0x0001b7cc
   18f14:	00018e2d 	.word	0x00018e2d

00018f18 <__sfp>:
   18f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f1a:	4b1d      	ldr	r3, [pc, #116]	; (18f90 <__sfp+0x78>)
   18f1c:	0006      	movs	r6, r0
   18f1e:	681d      	ldr	r5, [r3, #0]
   18f20:	69ab      	ldr	r3, [r5, #24]
   18f22:	2b00      	cmp	r3, #0
   18f24:	d102      	bne.n	18f2c <__sfp+0x14>
   18f26:	0028      	movs	r0, r5
   18f28:	f7ff ffc2 	bl	18eb0 <__sinit>
   18f2c:	3548      	adds	r5, #72	; 0x48
   18f2e:	68ac      	ldr	r4, [r5, #8]
   18f30:	686b      	ldr	r3, [r5, #4]
   18f32:	3b01      	subs	r3, #1
   18f34:	d405      	bmi.n	18f42 <__sfp+0x2a>
   18f36:	220c      	movs	r2, #12
   18f38:	5ea7      	ldrsh	r7, [r4, r2]
   18f3a:	2f00      	cmp	r7, #0
   18f3c:	d010      	beq.n	18f60 <__sfp+0x48>
   18f3e:	3468      	adds	r4, #104	; 0x68
   18f40:	e7f7      	b.n	18f32 <__sfp+0x1a>
   18f42:	682b      	ldr	r3, [r5, #0]
   18f44:	2b00      	cmp	r3, #0
   18f46:	d001      	beq.n	18f4c <__sfp+0x34>
   18f48:	682d      	ldr	r5, [r5, #0]
   18f4a:	e7f0      	b.n	18f2e <__sfp+0x16>
   18f4c:	2104      	movs	r1, #4
   18f4e:	0030      	movs	r0, r6
   18f50:	f7ff ff98 	bl	18e84 <__sfmoreglue>
   18f54:	6028      	str	r0, [r5, #0]
   18f56:	2800      	cmp	r0, #0
   18f58:	d1f6      	bne.n	18f48 <__sfp+0x30>
   18f5a:	230c      	movs	r3, #12
   18f5c:	6033      	str	r3, [r6, #0]
   18f5e:	e016      	b.n	18f8e <__sfp+0x76>
   18f60:	2301      	movs	r3, #1
   18f62:	0020      	movs	r0, r4
   18f64:	425b      	negs	r3, r3
   18f66:	81e3      	strh	r3, [r4, #14]
   18f68:	3302      	adds	r3, #2
   18f6a:	81a3      	strh	r3, [r4, #12]
   18f6c:	6667      	str	r7, [r4, #100]	; 0x64
   18f6e:	6027      	str	r7, [r4, #0]
   18f70:	60a7      	str	r7, [r4, #8]
   18f72:	6067      	str	r7, [r4, #4]
   18f74:	6127      	str	r7, [r4, #16]
   18f76:	6167      	str	r7, [r4, #20]
   18f78:	61a7      	str	r7, [r4, #24]
   18f7a:	305c      	adds	r0, #92	; 0x5c
   18f7c:	2208      	movs	r2, #8
   18f7e:	0039      	movs	r1, r7
   18f80:	f7ff faa6 	bl	184d0 <memset>
   18f84:	0020      	movs	r0, r4
   18f86:	6367      	str	r7, [r4, #52]	; 0x34
   18f88:	63a7      	str	r7, [r4, #56]	; 0x38
   18f8a:	64a7      	str	r7, [r4, #72]	; 0x48
   18f8c:	64e7      	str	r7, [r4, #76]	; 0x4c
   18f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18f90:	0001b7cc 	.word	0x0001b7cc

00018f94 <_fwalk_reent>:
   18f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18f96:	0004      	movs	r4, r0
   18f98:	0007      	movs	r7, r0
   18f9a:	2600      	movs	r6, #0
   18f9c:	9101      	str	r1, [sp, #4]
   18f9e:	3448      	adds	r4, #72	; 0x48
   18fa0:	2c00      	cmp	r4, #0
   18fa2:	d016      	beq.n	18fd2 <_fwalk_reent+0x3e>
   18fa4:	6863      	ldr	r3, [r4, #4]
   18fa6:	68a5      	ldr	r5, [r4, #8]
   18fa8:	9300      	str	r3, [sp, #0]
   18faa:	9b00      	ldr	r3, [sp, #0]
   18fac:	3b01      	subs	r3, #1
   18fae:	9300      	str	r3, [sp, #0]
   18fb0:	d40d      	bmi.n	18fce <_fwalk_reent+0x3a>
   18fb2:	89ab      	ldrh	r3, [r5, #12]
   18fb4:	2b01      	cmp	r3, #1
   18fb6:	d908      	bls.n	18fca <_fwalk_reent+0x36>
   18fb8:	220e      	movs	r2, #14
   18fba:	5eab      	ldrsh	r3, [r5, r2]
   18fbc:	3301      	adds	r3, #1
   18fbe:	d004      	beq.n	18fca <_fwalk_reent+0x36>
   18fc0:	0029      	movs	r1, r5
   18fc2:	0038      	movs	r0, r7
   18fc4:	9b01      	ldr	r3, [sp, #4]
   18fc6:	4798      	blx	r3
   18fc8:	4306      	orrs	r6, r0
   18fca:	3568      	adds	r5, #104	; 0x68
   18fcc:	e7ed      	b.n	18faa <_fwalk_reent+0x16>
   18fce:	6824      	ldr	r4, [r4, #0]
   18fd0:	e7e6      	b.n	18fa0 <_fwalk_reent+0xc>
   18fd2:	0030      	movs	r0, r6
   18fd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00018fd8 <__swhatbuf_r>:
   18fd8:	b570      	push	{r4, r5, r6, lr}
   18fda:	000e      	movs	r6, r1
   18fdc:	001d      	movs	r5, r3
   18fde:	230e      	movs	r3, #14
   18fe0:	5ec9      	ldrsh	r1, [r1, r3]
   18fe2:	b090      	sub	sp, #64	; 0x40
   18fe4:	0014      	movs	r4, r2
   18fe6:	2900      	cmp	r1, #0
   18fe8:	da06      	bge.n	18ff8 <__swhatbuf_r+0x20>
   18fea:	2300      	movs	r3, #0
   18fec:	602b      	str	r3, [r5, #0]
   18fee:	89b3      	ldrh	r3, [r6, #12]
   18ff0:	061b      	lsls	r3, r3, #24
   18ff2:	d50f      	bpl.n	19014 <__swhatbuf_r+0x3c>
   18ff4:	2340      	movs	r3, #64	; 0x40
   18ff6:	e00f      	b.n	19018 <__swhatbuf_r+0x40>
   18ff8:	aa01      	add	r2, sp, #4
   18ffa:	f000 fd2d 	bl	19a58 <_fstat_r>
   18ffe:	2800      	cmp	r0, #0
   19000:	dbf3      	blt.n	18fea <__swhatbuf_r+0x12>
   19002:	23f0      	movs	r3, #240	; 0xf0
   19004:	9a02      	ldr	r2, [sp, #8]
   19006:	021b      	lsls	r3, r3, #8
   19008:	4013      	ands	r3, r2
   1900a:	4a05      	ldr	r2, [pc, #20]	; (19020 <__swhatbuf_r+0x48>)
   1900c:	189b      	adds	r3, r3, r2
   1900e:	425a      	negs	r2, r3
   19010:	4153      	adcs	r3, r2
   19012:	602b      	str	r3, [r5, #0]
   19014:	2380      	movs	r3, #128	; 0x80
   19016:	00db      	lsls	r3, r3, #3
   19018:	2000      	movs	r0, #0
   1901a:	6023      	str	r3, [r4, #0]
   1901c:	b010      	add	sp, #64	; 0x40
   1901e:	bd70      	pop	{r4, r5, r6, pc}
   19020:	ffffe000 	.word	0xffffe000

00019024 <__smakebuf_r>:
   19024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19026:	2602      	movs	r6, #2
   19028:	898b      	ldrh	r3, [r1, #12]
   1902a:	0005      	movs	r5, r0
   1902c:	000c      	movs	r4, r1
   1902e:	4233      	tst	r3, r6
   19030:	d110      	bne.n	19054 <__smakebuf_r+0x30>
   19032:	ab01      	add	r3, sp, #4
   19034:	466a      	mov	r2, sp
   19036:	f7ff ffcf 	bl	18fd8 <__swhatbuf_r>
   1903a:	9900      	ldr	r1, [sp, #0]
   1903c:	0007      	movs	r7, r0
   1903e:	0028      	movs	r0, r5
   19040:	f7ff fa94 	bl	1856c <_malloc_r>
   19044:	2800      	cmp	r0, #0
   19046:	d10c      	bne.n	19062 <__smakebuf_r+0x3e>
   19048:	220c      	movs	r2, #12
   1904a:	5ea3      	ldrsh	r3, [r4, r2]
   1904c:	059a      	lsls	r2, r3, #22
   1904e:	d423      	bmi.n	19098 <__smakebuf_r+0x74>
   19050:	4333      	orrs	r3, r6
   19052:	81a3      	strh	r3, [r4, #12]
   19054:	0023      	movs	r3, r4
   19056:	3347      	adds	r3, #71	; 0x47
   19058:	6023      	str	r3, [r4, #0]
   1905a:	6123      	str	r3, [r4, #16]
   1905c:	2301      	movs	r3, #1
   1905e:	6163      	str	r3, [r4, #20]
   19060:	e01a      	b.n	19098 <__smakebuf_r+0x74>
   19062:	2280      	movs	r2, #128	; 0x80
   19064:	4b0d      	ldr	r3, [pc, #52]	; (1909c <__smakebuf_r+0x78>)
   19066:	62ab      	str	r3, [r5, #40]	; 0x28
   19068:	89a3      	ldrh	r3, [r4, #12]
   1906a:	6020      	str	r0, [r4, #0]
   1906c:	4313      	orrs	r3, r2
   1906e:	81a3      	strh	r3, [r4, #12]
   19070:	9b00      	ldr	r3, [sp, #0]
   19072:	6120      	str	r0, [r4, #16]
   19074:	6163      	str	r3, [r4, #20]
   19076:	9b01      	ldr	r3, [sp, #4]
   19078:	2b00      	cmp	r3, #0
   1907a:	d00a      	beq.n	19092 <__smakebuf_r+0x6e>
   1907c:	230e      	movs	r3, #14
   1907e:	5ee1      	ldrsh	r1, [r4, r3]
   19080:	0028      	movs	r0, r5
   19082:	f000 fcfb 	bl	19a7c <_isatty_r>
   19086:	2800      	cmp	r0, #0
   19088:	d003      	beq.n	19092 <__smakebuf_r+0x6e>
   1908a:	2201      	movs	r2, #1
   1908c:	89a3      	ldrh	r3, [r4, #12]
   1908e:	4313      	orrs	r3, r2
   19090:	81a3      	strh	r3, [r4, #12]
   19092:	89a3      	ldrh	r3, [r4, #12]
   19094:	431f      	orrs	r7, r3
   19096:	81a7      	strh	r7, [r4, #12]
   19098:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1909a:	46c0      	nop			; (mov r8, r8)
   1909c:	00018e2d 	.word	0x00018e2d

000190a0 <__ssputs_r>:
   190a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   190a2:	688e      	ldr	r6, [r1, #8]
   190a4:	b085      	sub	sp, #20
   190a6:	0007      	movs	r7, r0
   190a8:	000c      	movs	r4, r1
   190aa:	9203      	str	r2, [sp, #12]
   190ac:	9301      	str	r3, [sp, #4]
   190ae:	429e      	cmp	r6, r3
   190b0:	d843      	bhi.n	1913a <__ssputs_r+0x9a>
   190b2:	2390      	movs	r3, #144	; 0x90
   190b4:	898a      	ldrh	r2, [r1, #12]
   190b6:	00db      	lsls	r3, r3, #3
   190b8:	421a      	tst	r2, r3
   190ba:	d03e      	beq.n	1913a <__ssputs_r+0x9a>
   190bc:	2503      	movs	r5, #3
   190be:	6909      	ldr	r1, [r1, #16]
   190c0:	6823      	ldr	r3, [r4, #0]
   190c2:	9801      	ldr	r0, [sp, #4]
   190c4:	1a5b      	subs	r3, r3, r1
   190c6:	9302      	str	r3, [sp, #8]
   190c8:	6963      	ldr	r3, [r4, #20]
   190ca:	435d      	muls	r5, r3
   190cc:	0feb      	lsrs	r3, r5, #31
   190ce:	195d      	adds	r5, r3, r5
   190d0:	9b02      	ldr	r3, [sp, #8]
   190d2:	106d      	asrs	r5, r5, #1
   190d4:	3301      	adds	r3, #1
   190d6:	181b      	adds	r3, r3, r0
   190d8:	42ab      	cmp	r3, r5
   190da:	d900      	bls.n	190de <__ssputs_r+0x3e>
   190dc:	001d      	movs	r5, r3
   190de:	0553      	lsls	r3, r2, #21
   190e0:	d510      	bpl.n	19104 <__ssputs_r+0x64>
   190e2:	0029      	movs	r1, r5
   190e4:	0038      	movs	r0, r7
   190e6:	f7ff fa41 	bl	1856c <_malloc_r>
   190ea:	1e06      	subs	r6, r0, #0
   190ec:	d014      	beq.n	19118 <__ssputs_r+0x78>
   190ee:	9a02      	ldr	r2, [sp, #8]
   190f0:	6921      	ldr	r1, [r4, #16]
   190f2:	f7ff f9cf 	bl	18494 <memcpy>
   190f6:	89a2      	ldrh	r2, [r4, #12]
   190f8:	4b19      	ldr	r3, [pc, #100]	; (19160 <__ssputs_r+0xc0>)
   190fa:	4013      	ands	r3, r2
   190fc:	2280      	movs	r2, #128	; 0x80
   190fe:	4313      	orrs	r3, r2
   19100:	81a3      	strh	r3, [r4, #12]
   19102:	e012      	b.n	1912a <__ssputs_r+0x8a>
   19104:	002a      	movs	r2, r5
   19106:	0038      	movs	r0, r7
   19108:	f000 fce9 	bl	19ade <_realloc_r>
   1910c:	1e06      	subs	r6, r0, #0
   1910e:	d10c      	bne.n	1912a <__ssputs_r+0x8a>
   19110:	6921      	ldr	r1, [r4, #16]
   19112:	0038      	movs	r0, r7
   19114:	f7ff f9e4 	bl	184e0 <_free_r>
   19118:	230c      	movs	r3, #12
   1911a:	2240      	movs	r2, #64	; 0x40
   1911c:	2001      	movs	r0, #1
   1911e:	603b      	str	r3, [r7, #0]
   19120:	89a3      	ldrh	r3, [r4, #12]
   19122:	4240      	negs	r0, r0
   19124:	4313      	orrs	r3, r2
   19126:	81a3      	strh	r3, [r4, #12]
   19128:	e017      	b.n	1915a <__ssputs_r+0xba>
   1912a:	9b02      	ldr	r3, [sp, #8]
   1912c:	6126      	str	r6, [r4, #16]
   1912e:	18f6      	adds	r6, r6, r3
   19130:	6026      	str	r6, [r4, #0]
   19132:	6165      	str	r5, [r4, #20]
   19134:	9e01      	ldr	r6, [sp, #4]
   19136:	1aed      	subs	r5, r5, r3
   19138:	60a5      	str	r5, [r4, #8]
   1913a:	9b01      	ldr	r3, [sp, #4]
   1913c:	42b3      	cmp	r3, r6
   1913e:	d200      	bcs.n	19142 <__ssputs_r+0xa2>
   19140:	001e      	movs	r6, r3
   19142:	0032      	movs	r2, r6
   19144:	9903      	ldr	r1, [sp, #12]
   19146:	6820      	ldr	r0, [r4, #0]
   19148:	f7ff f9ad 	bl	184a6 <memmove>
   1914c:	2000      	movs	r0, #0
   1914e:	68a3      	ldr	r3, [r4, #8]
   19150:	1b9b      	subs	r3, r3, r6
   19152:	60a3      	str	r3, [r4, #8]
   19154:	6823      	ldr	r3, [r4, #0]
   19156:	199e      	adds	r6, r3, r6
   19158:	6026      	str	r6, [r4, #0]
   1915a:	b005      	add	sp, #20
   1915c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1915e:	46c0      	nop			; (mov r8, r8)
   19160:	fffffb7f 	.word	0xfffffb7f

00019164 <_svfiprintf_r>:
   19164:	b5f0      	push	{r4, r5, r6, r7, lr}
   19166:	b09f      	sub	sp, #124	; 0x7c
   19168:	9002      	str	r0, [sp, #8]
   1916a:	9305      	str	r3, [sp, #20]
   1916c:	898b      	ldrh	r3, [r1, #12]
   1916e:	000f      	movs	r7, r1
   19170:	0016      	movs	r6, r2
   19172:	061b      	lsls	r3, r3, #24
   19174:	d510      	bpl.n	19198 <_svfiprintf_r+0x34>
   19176:	690b      	ldr	r3, [r1, #16]
   19178:	2b00      	cmp	r3, #0
   1917a:	d10d      	bne.n	19198 <_svfiprintf_r+0x34>
   1917c:	2140      	movs	r1, #64	; 0x40
   1917e:	f7ff f9f5 	bl	1856c <_malloc_r>
   19182:	6038      	str	r0, [r7, #0]
   19184:	6138      	str	r0, [r7, #16]
   19186:	2800      	cmp	r0, #0
   19188:	d104      	bne.n	19194 <_svfiprintf_r+0x30>
   1918a:	230c      	movs	r3, #12
   1918c:	9a02      	ldr	r2, [sp, #8]
   1918e:	3801      	subs	r0, #1
   19190:	6013      	str	r3, [r2, #0]
   19192:	e0d8      	b.n	19346 <_svfiprintf_r+0x1e2>
   19194:	2340      	movs	r3, #64	; 0x40
   19196:	617b      	str	r3, [r7, #20]
   19198:	2300      	movs	r3, #0
   1919a:	ad06      	add	r5, sp, #24
   1919c:	616b      	str	r3, [r5, #20]
   1919e:	3320      	adds	r3, #32
   191a0:	766b      	strb	r3, [r5, #25]
   191a2:	3310      	adds	r3, #16
   191a4:	76ab      	strb	r3, [r5, #26]
   191a6:	0034      	movs	r4, r6
   191a8:	7823      	ldrb	r3, [r4, #0]
   191aa:	2b00      	cmp	r3, #0
   191ac:	d103      	bne.n	191b6 <_svfiprintf_r+0x52>
   191ae:	1ba3      	subs	r3, r4, r6
   191b0:	9304      	str	r3, [sp, #16]
   191b2:	d012      	beq.n	191da <_svfiprintf_r+0x76>
   191b4:	e003      	b.n	191be <_svfiprintf_r+0x5a>
   191b6:	2b25      	cmp	r3, #37	; 0x25
   191b8:	d0f9      	beq.n	191ae <_svfiprintf_r+0x4a>
   191ba:	3401      	adds	r4, #1
   191bc:	e7f4      	b.n	191a8 <_svfiprintf_r+0x44>
   191be:	1ba3      	subs	r3, r4, r6
   191c0:	0032      	movs	r2, r6
   191c2:	0039      	movs	r1, r7
   191c4:	9802      	ldr	r0, [sp, #8]
   191c6:	f7ff ff6b 	bl	190a0 <__ssputs_r>
   191ca:	1c43      	adds	r3, r0, #1
   191cc:	d100      	bne.n	191d0 <_svfiprintf_r+0x6c>
   191ce:	e0b4      	b.n	1933a <_svfiprintf_r+0x1d6>
   191d0:	696a      	ldr	r2, [r5, #20]
   191d2:	9b04      	ldr	r3, [sp, #16]
   191d4:	4694      	mov	ip, r2
   191d6:	4463      	add	r3, ip
   191d8:	616b      	str	r3, [r5, #20]
   191da:	7823      	ldrb	r3, [r4, #0]
   191dc:	2b00      	cmp	r3, #0
   191de:	d100      	bne.n	191e2 <_svfiprintf_r+0x7e>
   191e0:	e0ab      	b.n	1933a <_svfiprintf_r+0x1d6>
   191e2:	2201      	movs	r2, #1
   191e4:	2300      	movs	r3, #0
   191e6:	4252      	negs	r2, r2
   191e8:	606a      	str	r2, [r5, #4]
   191ea:	a902      	add	r1, sp, #8
   191ec:	3254      	adds	r2, #84	; 0x54
   191ee:	1852      	adds	r2, r2, r1
   191f0:	3401      	adds	r4, #1
   191f2:	602b      	str	r3, [r5, #0]
   191f4:	60eb      	str	r3, [r5, #12]
   191f6:	60ab      	str	r3, [r5, #8]
   191f8:	7013      	strb	r3, [r2, #0]
   191fa:	65ab      	str	r3, [r5, #88]	; 0x58
   191fc:	4e53      	ldr	r6, [pc, #332]	; (1934c <_svfiprintf_r+0x1e8>)
   191fe:	7821      	ldrb	r1, [r4, #0]
   19200:	2205      	movs	r2, #5
   19202:	0030      	movs	r0, r6
   19204:	f000 fc60 	bl	19ac8 <memchr>
   19208:	2800      	cmp	r0, #0
   1920a:	d007      	beq.n	1921c <_svfiprintf_r+0xb8>
   1920c:	2301      	movs	r3, #1
   1920e:	1b80      	subs	r0, r0, r6
   19210:	4083      	lsls	r3, r0
   19212:	682a      	ldr	r2, [r5, #0]
   19214:	3401      	adds	r4, #1
   19216:	4313      	orrs	r3, r2
   19218:	602b      	str	r3, [r5, #0]
   1921a:	e7ef      	b.n	191fc <_svfiprintf_r+0x98>
   1921c:	682b      	ldr	r3, [r5, #0]
   1921e:	06da      	lsls	r2, r3, #27
   19220:	d504      	bpl.n	1922c <_svfiprintf_r+0xc8>
   19222:	2253      	movs	r2, #83	; 0x53
   19224:	2120      	movs	r1, #32
   19226:	a802      	add	r0, sp, #8
   19228:	1812      	adds	r2, r2, r0
   1922a:	7011      	strb	r1, [r2, #0]
   1922c:	071a      	lsls	r2, r3, #28
   1922e:	d504      	bpl.n	1923a <_svfiprintf_r+0xd6>
   19230:	2253      	movs	r2, #83	; 0x53
   19232:	212b      	movs	r1, #43	; 0x2b
   19234:	a802      	add	r0, sp, #8
   19236:	1812      	adds	r2, r2, r0
   19238:	7011      	strb	r1, [r2, #0]
   1923a:	7822      	ldrb	r2, [r4, #0]
   1923c:	2a2a      	cmp	r2, #42	; 0x2a
   1923e:	d003      	beq.n	19248 <_svfiprintf_r+0xe4>
   19240:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19242:	2000      	movs	r0, #0
   19244:	210a      	movs	r1, #10
   19246:	e00e      	b.n	19266 <_svfiprintf_r+0x102>
   19248:	9a05      	ldr	r2, [sp, #20]
   1924a:	1d11      	adds	r1, r2, #4
   1924c:	6812      	ldr	r2, [r2, #0]
   1924e:	9105      	str	r1, [sp, #20]
   19250:	2a00      	cmp	r2, #0
   19252:	db01      	blt.n	19258 <_svfiprintf_r+0xf4>
   19254:	9209      	str	r2, [sp, #36]	; 0x24
   19256:	e004      	b.n	19262 <_svfiprintf_r+0xfe>
   19258:	4252      	negs	r2, r2
   1925a:	60ea      	str	r2, [r5, #12]
   1925c:	2202      	movs	r2, #2
   1925e:	4313      	orrs	r3, r2
   19260:	602b      	str	r3, [r5, #0]
   19262:	3401      	adds	r4, #1
   19264:	e00b      	b.n	1927e <_svfiprintf_r+0x11a>
   19266:	7822      	ldrb	r2, [r4, #0]
   19268:	3a30      	subs	r2, #48	; 0x30
   1926a:	2a09      	cmp	r2, #9
   1926c:	d804      	bhi.n	19278 <_svfiprintf_r+0x114>
   1926e:	434b      	muls	r3, r1
   19270:	3401      	adds	r4, #1
   19272:	189b      	adds	r3, r3, r2
   19274:	2001      	movs	r0, #1
   19276:	e7f6      	b.n	19266 <_svfiprintf_r+0x102>
   19278:	2800      	cmp	r0, #0
   1927a:	d000      	beq.n	1927e <_svfiprintf_r+0x11a>
   1927c:	9309      	str	r3, [sp, #36]	; 0x24
   1927e:	7823      	ldrb	r3, [r4, #0]
   19280:	2b2e      	cmp	r3, #46	; 0x2e
   19282:	d11e      	bne.n	192c2 <_svfiprintf_r+0x15e>
   19284:	7863      	ldrb	r3, [r4, #1]
   19286:	2b2a      	cmp	r3, #42	; 0x2a
   19288:	d10a      	bne.n	192a0 <_svfiprintf_r+0x13c>
   1928a:	9b05      	ldr	r3, [sp, #20]
   1928c:	3402      	adds	r4, #2
   1928e:	1d1a      	adds	r2, r3, #4
   19290:	681b      	ldr	r3, [r3, #0]
   19292:	9205      	str	r2, [sp, #20]
   19294:	2b00      	cmp	r3, #0
   19296:	da01      	bge.n	1929c <_svfiprintf_r+0x138>
   19298:	2301      	movs	r3, #1
   1929a:	425b      	negs	r3, r3
   1929c:	9307      	str	r3, [sp, #28]
   1929e:	e010      	b.n	192c2 <_svfiprintf_r+0x15e>
   192a0:	2300      	movs	r3, #0
   192a2:	200a      	movs	r0, #10
   192a4:	001a      	movs	r2, r3
   192a6:	3401      	adds	r4, #1
   192a8:	606b      	str	r3, [r5, #4]
   192aa:	7821      	ldrb	r1, [r4, #0]
   192ac:	3930      	subs	r1, #48	; 0x30
   192ae:	2909      	cmp	r1, #9
   192b0:	d804      	bhi.n	192bc <_svfiprintf_r+0x158>
   192b2:	4342      	muls	r2, r0
   192b4:	3401      	adds	r4, #1
   192b6:	1852      	adds	r2, r2, r1
   192b8:	2301      	movs	r3, #1
   192ba:	e7f6      	b.n	192aa <_svfiprintf_r+0x146>
   192bc:	2b00      	cmp	r3, #0
   192be:	d000      	beq.n	192c2 <_svfiprintf_r+0x15e>
   192c0:	9207      	str	r2, [sp, #28]
   192c2:	4e23      	ldr	r6, [pc, #140]	; (19350 <_svfiprintf_r+0x1ec>)
   192c4:	7821      	ldrb	r1, [r4, #0]
   192c6:	2203      	movs	r2, #3
   192c8:	0030      	movs	r0, r6
   192ca:	f000 fbfd 	bl	19ac8 <memchr>
   192ce:	2800      	cmp	r0, #0
   192d0:	d006      	beq.n	192e0 <_svfiprintf_r+0x17c>
   192d2:	2340      	movs	r3, #64	; 0x40
   192d4:	1b80      	subs	r0, r0, r6
   192d6:	4083      	lsls	r3, r0
   192d8:	682a      	ldr	r2, [r5, #0]
   192da:	3401      	adds	r4, #1
   192dc:	4313      	orrs	r3, r2
   192de:	602b      	str	r3, [r5, #0]
   192e0:	7821      	ldrb	r1, [r4, #0]
   192e2:	2206      	movs	r2, #6
   192e4:	481b      	ldr	r0, [pc, #108]	; (19354 <_svfiprintf_r+0x1f0>)
   192e6:	1c66      	adds	r6, r4, #1
   192e8:	7629      	strb	r1, [r5, #24]
   192ea:	f000 fbed 	bl	19ac8 <memchr>
   192ee:	2800      	cmp	r0, #0
   192f0:	d012      	beq.n	19318 <_svfiprintf_r+0x1b4>
   192f2:	4b19      	ldr	r3, [pc, #100]	; (19358 <_svfiprintf_r+0x1f4>)
   192f4:	2b00      	cmp	r3, #0
   192f6:	d106      	bne.n	19306 <_svfiprintf_r+0x1a2>
   192f8:	2207      	movs	r2, #7
   192fa:	9b05      	ldr	r3, [sp, #20]
   192fc:	3307      	adds	r3, #7
   192fe:	4393      	bics	r3, r2
   19300:	3308      	adds	r3, #8
   19302:	9305      	str	r3, [sp, #20]
   19304:	e014      	b.n	19330 <_svfiprintf_r+0x1cc>
   19306:	ab05      	add	r3, sp, #20
   19308:	9300      	str	r3, [sp, #0]
   1930a:	003a      	movs	r2, r7
   1930c:	4b13      	ldr	r3, [pc, #76]	; (1935c <_svfiprintf_r+0x1f8>)
   1930e:	0029      	movs	r1, r5
   19310:	9802      	ldr	r0, [sp, #8]
   19312:	e000      	b.n	19316 <_svfiprintf_r+0x1b2>
   19314:	bf00      	nop
   19316:	e007      	b.n	19328 <_svfiprintf_r+0x1c4>
   19318:	ab05      	add	r3, sp, #20
   1931a:	9300      	str	r3, [sp, #0]
   1931c:	003a      	movs	r2, r7
   1931e:	4b0f      	ldr	r3, [pc, #60]	; (1935c <_svfiprintf_r+0x1f8>)
   19320:	0029      	movs	r1, r5
   19322:	9802      	ldr	r0, [sp, #8]
   19324:	f000 f9ce 	bl	196c4 <_printf_i>
   19328:	9003      	str	r0, [sp, #12]
   1932a:	9b03      	ldr	r3, [sp, #12]
   1932c:	3301      	adds	r3, #1
   1932e:	d004      	beq.n	1933a <_svfiprintf_r+0x1d6>
   19330:	696b      	ldr	r3, [r5, #20]
   19332:	9a03      	ldr	r2, [sp, #12]
   19334:	189b      	adds	r3, r3, r2
   19336:	616b      	str	r3, [r5, #20]
   19338:	e735      	b.n	191a6 <_svfiprintf_r+0x42>
   1933a:	89bb      	ldrh	r3, [r7, #12]
   1933c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1933e:	065b      	lsls	r3, r3, #25
   19340:	d501      	bpl.n	19346 <_svfiprintf_r+0x1e2>
   19342:	2001      	movs	r0, #1
   19344:	4240      	negs	r0, r0
   19346:	b01f      	add	sp, #124	; 0x7c
   19348:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1934a:	46c0      	nop			; (mov r8, r8)
   1934c:	0001b934 	.word	0x0001b934
   19350:	0001b93a 	.word	0x0001b93a
   19354:	0001b93e 	.word	0x0001b93e
   19358:	00000000 	.word	0x00000000
   1935c:	000190a1 	.word	0x000190a1

00019360 <__sfputc_r>:
   19360:	6893      	ldr	r3, [r2, #8]
   19362:	b510      	push	{r4, lr}
   19364:	3b01      	subs	r3, #1
   19366:	6093      	str	r3, [r2, #8]
   19368:	2b00      	cmp	r3, #0
   1936a:	da05      	bge.n	19378 <__sfputc_r+0x18>
   1936c:	6994      	ldr	r4, [r2, #24]
   1936e:	42a3      	cmp	r3, r4
   19370:	db08      	blt.n	19384 <__sfputc_r+0x24>
   19372:	b2cb      	uxtb	r3, r1
   19374:	2b0a      	cmp	r3, #10
   19376:	d005      	beq.n	19384 <__sfputc_r+0x24>
   19378:	6813      	ldr	r3, [r2, #0]
   1937a:	1c58      	adds	r0, r3, #1
   1937c:	6010      	str	r0, [r2, #0]
   1937e:	7019      	strb	r1, [r3, #0]
   19380:	b2c8      	uxtb	r0, r1
   19382:	e001      	b.n	19388 <__sfputc_r+0x28>
   19384:	f7ff fbd2 	bl	18b2c <__swbuf_r>
   19388:	bd10      	pop	{r4, pc}

0001938a <__sfputs_r>:
   1938a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1938c:	0006      	movs	r6, r0
   1938e:	000f      	movs	r7, r1
   19390:	0014      	movs	r4, r2
   19392:	18d5      	adds	r5, r2, r3
   19394:	42ac      	cmp	r4, r5
   19396:	d008      	beq.n	193aa <__sfputs_r+0x20>
   19398:	7821      	ldrb	r1, [r4, #0]
   1939a:	003a      	movs	r2, r7
   1939c:	0030      	movs	r0, r6
   1939e:	f7ff ffdf 	bl	19360 <__sfputc_r>
   193a2:	3401      	adds	r4, #1
   193a4:	1c43      	adds	r3, r0, #1
   193a6:	d1f5      	bne.n	19394 <__sfputs_r+0xa>
   193a8:	e000      	b.n	193ac <__sfputs_r+0x22>
   193aa:	2000      	movs	r0, #0
   193ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000193b0 <_vfiprintf_r>:
   193b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   193b2:	b09f      	sub	sp, #124	; 0x7c
   193b4:	0006      	movs	r6, r0
   193b6:	000f      	movs	r7, r1
   193b8:	9202      	str	r2, [sp, #8]
   193ba:	9305      	str	r3, [sp, #20]
   193bc:	2800      	cmp	r0, #0
   193be:	d004      	beq.n	193ca <_vfiprintf_r+0x1a>
   193c0:	6983      	ldr	r3, [r0, #24]
   193c2:	2b00      	cmp	r3, #0
   193c4:	d101      	bne.n	193ca <_vfiprintf_r+0x1a>
   193c6:	f7ff fd73 	bl	18eb0 <__sinit>
   193ca:	4b7f      	ldr	r3, [pc, #508]	; (195c8 <_vfiprintf_r+0x218>)
   193cc:	429f      	cmp	r7, r3
   193ce:	d101      	bne.n	193d4 <_vfiprintf_r+0x24>
   193d0:	6877      	ldr	r7, [r6, #4]
   193d2:	e008      	b.n	193e6 <_vfiprintf_r+0x36>
   193d4:	4b7d      	ldr	r3, [pc, #500]	; (195cc <_vfiprintf_r+0x21c>)
   193d6:	429f      	cmp	r7, r3
   193d8:	d101      	bne.n	193de <_vfiprintf_r+0x2e>
   193da:	68b7      	ldr	r7, [r6, #8]
   193dc:	e003      	b.n	193e6 <_vfiprintf_r+0x36>
   193de:	4b7c      	ldr	r3, [pc, #496]	; (195d0 <_vfiprintf_r+0x220>)
   193e0:	429f      	cmp	r7, r3
   193e2:	d100      	bne.n	193e6 <_vfiprintf_r+0x36>
   193e4:	68f7      	ldr	r7, [r6, #12]
   193e6:	89bb      	ldrh	r3, [r7, #12]
   193e8:	071b      	lsls	r3, r3, #28
   193ea:	d50a      	bpl.n	19402 <_vfiprintf_r+0x52>
   193ec:	693b      	ldr	r3, [r7, #16]
   193ee:	2b00      	cmp	r3, #0
   193f0:	d007      	beq.n	19402 <_vfiprintf_r+0x52>
   193f2:	2300      	movs	r3, #0
   193f4:	ad06      	add	r5, sp, #24
   193f6:	616b      	str	r3, [r5, #20]
   193f8:	3320      	adds	r3, #32
   193fa:	766b      	strb	r3, [r5, #25]
   193fc:	3310      	adds	r3, #16
   193fe:	76ab      	strb	r3, [r5, #26]
   19400:	e03d      	b.n	1947e <_vfiprintf_r+0xce>
   19402:	0039      	movs	r1, r7
   19404:	0030      	movs	r0, r6
   19406:	f7ff fbe9 	bl	18bdc <__swsetup_r>
   1940a:	2800      	cmp	r0, #0
   1940c:	d0f1      	beq.n	193f2 <_vfiprintf_r+0x42>
   1940e:	2001      	movs	r0, #1
   19410:	4240      	negs	r0, r0
   19412:	e0d6      	b.n	195c2 <_vfiprintf_r+0x212>
   19414:	9a05      	ldr	r2, [sp, #20]
   19416:	1d11      	adds	r1, r2, #4
   19418:	6812      	ldr	r2, [r2, #0]
   1941a:	9105      	str	r1, [sp, #20]
   1941c:	2a00      	cmp	r2, #0
   1941e:	da00      	bge.n	19422 <_vfiprintf_r+0x72>
   19420:	e07f      	b.n	19522 <_vfiprintf_r+0x172>
   19422:	9209      	str	r2, [sp, #36]	; 0x24
   19424:	3401      	adds	r4, #1
   19426:	7823      	ldrb	r3, [r4, #0]
   19428:	2b2e      	cmp	r3, #46	; 0x2e
   1942a:	d100      	bne.n	1942e <_vfiprintf_r+0x7e>
   1942c:	e08d      	b.n	1954a <_vfiprintf_r+0x19a>
   1942e:	7821      	ldrb	r1, [r4, #0]
   19430:	2203      	movs	r2, #3
   19432:	4868      	ldr	r0, [pc, #416]	; (195d4 <_vfiprintf_r+0x224>)
   19434:	f000 fb48 	bl	19ac8 <memchr>
   19438:	2800      	cmp	r0, #0
   1943a:	d007      	beq.n	1944c <_vfiprintf_r+0x9c>
   1943c:	4b65      	ldr	r3, [pc, #404]	; (195d4 <_vfiprintf_r+0x224>)
   1943e:	682a      	ldr	r2, [r5, #0]
   19440:	1ac0      	subs	r0, r0, r3
   19442:	2340      	movs	r3, #64	; 0x40
   19444:	4083      	lsls	r3, r0
   19446:	4313      	orrs	r3, r2
   19448:	602b      	str	r3, [r5, #0]
   1944a:	3401      	adds	r4, #1
   1944c:	7821      	ldrb	r1, [r4, #0]
   1944e:	1c63      	adds	r3, r4, #1
   19450:	2206      	movs	r2, #6
   19452:	4861      	ldr	r0, [pc, #388]	; (195d8 <_vfiprintf_r+0x228>)
   19454:	9302      	str	r3, [sp, #8]
   19456:	7629      	strb	r1, [r5, #24]
   19458:	f000 fb36 	bl	19ac8 <memchr>
   1945c:	2800      	cmp	r0, #0
   1945e:	d100      	bne.n	19462 <_vfiprintf_r+0xb2>
   19460:	e09d      	b.n	1959e <_vfiprintf_r+0x1ee>
   19462:	4b5e      	ldr	r3, [pc, #376]	; (195dc <_vfiprintf_r+0x22c>)
   19464:	2b00      	cmp	r3, #0
   19466:	d000      	beq.n	1946a <_vfiprintf_r+0xba>
   19468:	e090      	b.n	1958c <_vfiprintf_r+0x1dc>
   1946a:	2207      	movs	r2, #7
   1946c:	9b05      	ldr	r3, [sp, #20]
   1946e:	3307      	adds	r3, #7
   19470:	4393      	bics	r3, r2
   19472:	3308      	adds	r3, #8
   19474:	9305      	str	r3, [sp, #20]
   19476:	696b      	ldr	r3, [r5, #20]
   19478:	9a03      	ldr	r2, [sp, #12]
   1947a:	189b      	adds	r3, r3, r2
   1947c:	616b      	str	r3, [r5, #20]
   1947e:	9c02      	ldr	r4, [sp, #8]
   19480:	7823      	ldrb	r3, [r4, #0]
   19482:	2b00      	cmp	r3, #0
   19484:	d104      	bne.n	19490 <_vfiprintf_r+0xe0>
   19486:	9b02      	ldr	r3, [sp, #8]
   19488:	1ae3      	subs	r3, r4, r3
   1948a:	9304      	str	r3, [sp, #16]
   1948c:	d012      	beq.n	194b4 <_vfiprintf_r+0x104>
   1948e:	e003      	b.n	19498 <_vfiprintf_r+0xe8>
   19490:	2b25      	cmp	r3, #37	; 0x25
   19492:	d0f8      	beq.n	19486 <_vfiprintf_r+0xd6>
   19494:	3401      	adds	r4, #1
   19496:	e7f3      	b.n	19480 <_vfiprintf_r+0xd0>
   19498:	9b04      	ldr	r3, [sp, #16]
   1949a:	9a02      	ldr	r2, [sp, #8]
   1949c:	0039      	movs	r1, r7
   1949e:	0030      	movs	r0, r6
   194a0:	f7ff ff73 	bl	1938a <__sfputs_r>
   194a4:	1c43      	adds	r3, r0, #1
   194a6:	d100      	bne.n	194aa <_vfiprintf_r+0xfa>
   194a8:	e086      	b.n	195b8 <_vfiprintf_r+0x208>
   194aa:	696a      	ldr	r2, [r5, #20]
   194ac:	9b04      	ldr	r3, [sp, #16]
   194ae:	4694      	mov	ip, r2
   194b0:	4463      	add	r3, ip
   194b2:	616b      	str	r3, [r5, #20]
   194b4:	7823      	ldrb	r3, [r4, #0]
   194b6:	2b00      	cmp	r3, #0
   194b8:	d07e      	beq.n	195b8 <_vfiprintf_r+0x208>
   194ba:	2201      	movs	r2, #1
   194bc:	2300      	movs	r3, #0
   194be:	4252      	negs	r2, r2
   194c0:	606a      	str	r2, [r5, #4]
   194c2:	a902      	add	r1, sp, #8
   194c4:	3254      	adds	r2, #84	; 0x54
   194c6:	1852      	adds	r2, r2, r1
   194c8:	3401      	adds	r4, #1
   194ca:	602b      	str	r3, [r5, #0]
   194cc:	60eb      	str	r3, [r5, #12]
   194ce:	60ab      	str	r3, [r5, #8]
   194d0:	7013      	strb	r3, [r2, #0]
   194d2:	65ab      	str	r3, [r5, #88]	; 0x58
   194d4:	7821      	ldrb	r1, [r4, #0]
   194d6:	2205      	movs	r2, #5
   194d8:	4841      	ldr	r0, [pc, #260]	; (195e0 <_vfiprintf_r+0x230>)
   194da:	f000 faf5 	bl	19ac8 <memchr>
   194de:	2800      	cmp	r0, #0
   194e0:	d008      	beq.n	194f4 <_vfiprintf_r+0x144>
   194e2:	4b3f      	ldr	r3, [pc, #252]	; (195e0 <_vfiprintf_r+0x230>)
   194e4:	682a      	ldr	r2, [r5, #0]
   194e6:	1ac0      	subs	r0, r0, r3
   194e8:	2301      	movs	r3, #1
   194ea:	4083      	lsls	r3, r0
   194ec:	4313      	orrs	r3, r2
   194ee:	602b      	str	r3, [r5, #0]
   194f0:	3401      	adds	r4, #1
   194f2:	e7ef      	b.n	194d4 <_vfiprintf_r+0x124>
   194f4:	682b      	ldr	r3, [r5, #0]
   194f6:	06da      	lsls	r2, r3, #27
   194f8:	d504      	bpl.n	19504 <_vfiprintf_r+0x154>
   194fa:	2253      	movs	r2, #83	; 0x53
   194fc:	2120      	movs	r1, #32
   194fe:	a802      	add	r0, sp, #8
   19500:	1812      	adds	r2, r2, r0
   19502:	7011      	strb	r1, [r2, #0]
   19504:	071a      	lsls	r2, r3, #28
   19506:	d504      	bpl.n	19512 <_vfiprintf_r+0x162>
   19508:	2253      	movs	r2, #83	; 0x53
   1950a:	212b      	movs	r1, #43	; 0x2b
   1950c:	a802      	add	r0, sp, #8
   1950e:	1812      	adds	r2, r2, r0
   19510:	7011      	strb	r1, [r2, #0]
   19512:	7822      	ldrb	r2, [r4, #0]
   19514:	2a2a      	cmp	r2, #42	; 0x2a
   19516:	d100      	bne.n	1951a <_vfiprintf_r+0x16a>
   19518:	e77c      	b.n	19414 <_vfiprintf_r+0x64>
   1951a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1951c:	2000      	movs	r0, #0
   1951e:	210a      	movs	r1, #10
   19520:	e005      	b.n	1952e <_vfiprintf_r+0x17e>
   19522:	4252      	negs	r2, r2
   19524:	60ea      	str	r2, [r5, #12]
   19526:	2202      	movs	r2, #2
   19528:	4313      	orrs	r3, r2
   1952a:	602b      	str	r3, [r5, #0]
   1952c:	e77a      	b.n	19424 <_vfiprintf_r+0x74>
   1952e:	7822      	ldrb	r2, [r4, #0]
   19530:	3a30      	subs	r2, #48	; 0x30
   19532:	2a09      	cmp	r2, #9
   19534:	d804      	bhi.n	19540 <_vfiprintf_r+0x190>
   19536:	434b      	muls	r3, r1
   19538:	3401      	adds	r4, #1
   1953a:	189b      	adds	r3, r3, r2
   1953c:	2001      	movs	r0, #1
   1953e:	e7f6      	b.n	1952e <_vfiprintf_r+0x17e>
   19540:	2800      	cmp	r0, #0
   19542:	d100      	bne.n	19546 <_vfiprintf_r+0x196>
   19544:	e76f      	b.n	19426 <_vfiprintf_r+0x76>
   19546:	9309      	str	r3, [sp, #36]	; 0x24
   19548:	e76d      	b.n	19426 <_vfiprintf_r+0x76>
   1954a:	7863      	ldrb	r3, [r4, #1]
   1954c:	2b2a      	cmp	r3, #42	; 0x2a
   1954e:	d10a      	bne.n	19566 <_vfiprintf_r+0x1b6>
   19550:	9b05      	ldr	r3, [sp, #20]
   19552:	3402      	adds	r4, #2
   19554:	1d1a      	adds	r2, r3, #4
   19556:	681b      	ldr	r3, [r3, #0]
   19558:	9205      	str	r2, [sp, #20]
   1955a:	2b00      	cmp	r3, #0
   1955c:	da01      	bge.n	19562 <_vfiprintf_r+0x1b2>
   1955e:	2301      	movs	r3, #1
   19560:	425b      	negs	r3, r3
   19562:	9307      	str	r3, [sp, #28]
   19564:	e763      	b.n	1942e <_vfiprintf_r+0x7e>
   19566:	2300      	movs	r3, #0
   19568:	200a      	movs	r0, #10
   1956a:	001a      	movs	r2, r3
   1956c:	3401      	adds	r4, #1
   1956e:	606b      	str	r3, [r5, #4]
   19570:	7821      	ldrb	r1, [r4, #0]
   19572:	3930      	subs	r1, #48	; 0x30
   19574:	2909      	cmp	r1, #9
   19576:	d804      	bhi.n	19582 <_vfiprintf_r+0x1d2>
   19578:	4342      	muls	r2, r0
   1957a:	3401      	adds	r4, #1
   1957c:	1852      	adds	r2, r2, r1
   1957e:	2301      	movs	r3, #1
   19580:	e7f6      	b.n	19570 <_vfiprintf_r+0x1c0>
   19582:	2b00      	cmp	r3, #0
   19584:	d100      	bne.n	19588 <_vfiprintf_r+0x1d8>
   19586:	e752      	b.n	1942e <_vfiprintf_r+0x7e>
   19588:	9207      	str	r2, [sp, #28]
   1958a:	e750      	b.n	1942e <_vfiprintf_r+0x7e>
   1958c:	ab05      	add	r3, sp, #20
   1958e:	9300      	str	r3, [sp, #0]
   19590:	003a      	movs	r2, r7
   19592:	4b14      	ldr	r3, [pc, #80]	; (195e4 <_vfiprintf_r+0x234>)
   19594:	0029      	movs	r1, r5
   19596:	0030      	movs	r0, r6
   19598:	e000      	b.n	1959c <_vfiprintf_r+0x1ec>
   1959a:	bf00      	nop
   1959c:	e007      	b.n	195ae <_vfiprintf_r+0x1fe>
   1959e:	ab05      	add	r3, sp, #20
   195a0:	9300      	str	r3, [sp, #0]
   195a2:	003a      	movs	r2, r7
   195a4:	4b0f      	ldr	r3, [pc, #60]	; (195e4 <_vfiprintf_r+0x234>)
   195a6:	0029      	movs	r1, r5
   195a8:	0030      	movs	r0, r6
   195aa:	f000 f88b 	bl	196c4 <_printf_i>
   195ae:	9003      	str	r0, [sp, #12]
   195b0:	9b03      	ldr	r3, [sp, #12]
   195b2:	3301      	adds	r3, #1
   195b4:	d000      	beq.n	195b8 <_vfiprintf_r+0x208>
   195b6:	e75e      	b.n	19476 <_vfiprintf_r+0xc6>
   195b8:	89bb      	ldrh	r3, [r7, #12]
   195ba:	065b      	lsls	r3, r3, #25
   195bc:	d500      	bpl.n	195c0 <_vfiprintf_r+0x210>
   195be:	e726      	b.n	1940e <_vfiprintf_r+0x5e>
   195c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   195c2:	b01f      	add	sp, #124	; 0x7c
   195c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   195c6:	46c0      	nop			; (mov r8, r8)
   195c8:	0001b8d4 	.word	0x0001b8d4
   195cc:	0001b8f4 	.word	0x0001b8f4
   195d0:	0001b914 	.word	0x0001b914
   195d4:	0001b93a 	.word	0x0001b93a
   195d8:	0001b93e 	.word	0x0001b93e
   195dc:	00000000 	.word	0x00000000
   195e0:	0001b934 	.word	0x0001b934
   195e4:	0001938b 	.word	0x0001938b

000195e8 <_printf_common>:
   195e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   195ea:	0017      	movs	r7, r2
   195ec:	9301      	str	r3, [sp, #4]
   195ee:	688a      	ldr	r2, [r1, #8]
   195f0:	690b      	ldr	r3, [r1, #16]
   195f2:	9000      	str	r0, [sp, #0]
   195f4:	000c      	movs	r4, r1
   195f6:	4293      	cmp	r3, r2
   195f8:	da00      	bge.n	195fc <_printf_common+0x14>
   195fa:	0013      	movs	r3, r2
   195fc:	0022      	movs	r2, r4
   195fe:	603b      	str	r3, [r7, #0]
   19600:	3243      	adds	r2, #67	; 0x43
   19602:	7812      	ldrb	r2, [r2, #0]
   19604:	2a00      	cmp	r2, #0
   19606:	d001      	beq.n	1960c <_printf_common+0x24>
   19608:	3301      	adds	r3, #1
   1960a:	603b      	str	r3, [r7, #0]
   1960c:	6823      	ldr	r3, [r4, #0]
   1960e:	069b      	lsls	r3, r3, #26
   19610:	d502      	bpl.n	19618 <_printf_common+0x30>
   19612:	683b      	ldr	r3, [r7, #0]
   19614:	3302      	adds	r3, #2
   19616:	603b      	str	r3, [r7, #0]
   19618:	2506      	movs	r5, #6
   1961a:	6823      	ldr	r3, [r4, #0]
   1961c:	401d      	ands	r5, r3
   1961e:	d01e      	beq.n	1965e <_printf_common+0x76>
   19620:	0023      	movs	r3, r4
   19622:	3343      	adds	r3, #67	; 0x43
   19624:	781b      	ldrb	r3, [r3, #0]
   19626:	1e5a      	subs	r2, r3, #1
   19628:	4193      	sbcs	r3, r2
   1962a:	6822      	ldr	r2, [r4, #0]
   1962c:	0692      	lsls	r2, r2, #26
   1962e:	d51c      	bpl.n	1966a <_printf_common+0x82>
   19630:	2030      	movs	r0, #48	; 0x30
   19632:	18e1      	adds	r1, r4, r3
   19634:	3143      	adds	r1, #67	; 0x43
   19636:	7008      	strb	r0, [r1, #0]
   19638:	0021      	movs	r1, r4
   1963a:	1c5a      	adds	r2, r3, #1
   1963c:	3145      	adds	r1, #69	; 0x45
   1963e:	7809      	ldrb	r1, [r1, #0]
   19640:	18a2      	adds	r2, r4, r2
   19642:	3243      	adds	r2, #67	; 0x43
   19644:	3302      	adds	r3, #2
   19646:	7011      	strb	r1, [r2, #0]
   19648:	e00f      	b.n	1966a <_printf_common+0x82>
   1964a:	0022      	movs	r2, r4
   1964c:	2301      	movs	r3, #1
   1964e:	3219      	adds	r2, #25
   19650:	9901      	ldr	r1, [sp, #4]
   19652:	9800      	ldr	r0, [sp, #0]
   19654:	9e08      	ldr	r6, [sp, #32]
   19656:	47b0      	blx	r6
   19658:	1c43      	adds	r3, r0, #1
   1965a:	d00e      	beq.n	1967a <_printf_common+0x92>
   1965c:	3501      	adds	r5, #1
   1965e:	68e3      	ldr	r3, [r4, #12]
   19660:	683a      	ldr	r2, [r7, #0]
   19662:	1a9b      	subs	r3, r3, r2
   19664:	429d      	cmp	r5, r3
   19666:	dbf0      	blt.n	1964a <_printf_common+0x62>
   19668:	e7da      	b.n	19620 <_printf_common+0x38>
   1966a:	0022      	movs	r2, r4
   1966c:	9901      	ldr	r1, [sp, #4]
   1966e:	3243      	adds	r2, #67	; 0x43
   19670:	9800      	ldr	r0, [sp, #0]
   19672:	9d08      	ldr	r5, [sp, #32]
   19674:	47a8      	blx	r5
   19676:	1c43      	adds	r3, r0, #1
   19678:	d102      	bne.n	19680 <_printf_common+0x98>
   1967a:	2001      	movs	r0, #1
   1967c:	4240      	negs	r0, r0
   1967e:	e020      	b.n	196c2 <_printf_common+0xda>
   19680:	2306      	movs	r3, #6
   19682:	6820      	ldr	r0, [r4, #0]
   19684:	68e1      	ldr	r1, [r4, #12]
   19686:	683a      	ldr	r2, [r7, #0]
   19688:	4003      	ands	r3, r0
   1968a:	2500      	movs	r5, #0
   1968c:	2b04      	cmp	r3, #4
   1968e:	d103      	bne.n	19698 <_printf_common+0xb0>
   19690:	1a8d      	subs	r5, r1, r2
   19692:	43eb      	mvns	r3, r5
   19694:	17db      	asrs	r3, r3, #31
   19696:	401d      	ands	r5, r3
   19698:	68a3      	ldr	r3, [r4, #8]
   1969a:	6922      	ldr	r2, [r4, #16]
   1969c:	4293      	cmp	r3, r2
   1969e:	dd01      	ble.n	196a4 <_printf_common+0xbc>
   196a0:	1a9b      	subs	r3, r3, r2
   196a2:	18ed      	adds	r5, r5, r3
   196a4:	2700      	movs	r7, #0
   196a6:	42bd      	cmp	r5, r7
   196a8:	d00a      	beq.n	196c0 <_printf_common+0xd8>
   196aa:	0022      	movs	r2, r4
   196ac:	2301      	movs	r3, #1
   196ae:	321a      	adds	r2, #26
   196b0:	9901      	ldr	r1, [sp, #4]
   196b2:	9800      	ldr	r0, [sp, #0]
   196b4:	9e08      	ldr	r6, [sp, #32]
   196b6:	47b0      	blx	r6
   196b8:	1c43      	adds	r3, r0, #1
   196ba:	d0de      	beq.n	1967a <_printf_common+0x92>
   196bc:	3701      	adds	r7, #1
   196be:	e7f2      	b.n	196a6 <_printf_common+0xbe>
   196c0:	2000      	movs	r0, #0
   196c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000196c4 <_printf_i>:
   196c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   196c6:	b08b      	sub	sp, #44	; 0x2c
   196c8:	9206      	str	r2, [sp, #24]
   196ca:	000a      	movs	r2, r1
   196cc:	3243      	adds	r2, #67	; 0x43
   196ce:	9307      	str	r3, [sp, #28]
   196d0:	9005      	str	r0, [sp, #20]
   196d2:	9204      	str	r2, [sp, #16]
   196d4:	7e0a      	ldrb	r2, [r1, #24]
   196d6:	000c      	movs	r4, r1
   196d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   196da:	2a6e      	cmp	r2, #110	; 0x6e
   196dc:	d100      	bne.n	196e0 <_printf_i+0x1c>
   196de:	e0ab      	b.n	19838 <_printf_i+0x174>
   196e0:	d811      	bhi.n	19706 <_printf_i+0x42>
   196e2:	2a63      	cmp	r2, #99	; 0x63
   196e4:	d022      	beq.n	1972c <_printf_i+0x68>
   196e6:	d809      	bhi.n	196fc <_printf_i+0x38>
   196e8:	2a00      	cmp	r2, #0
   196ea:	d100      	bne.n	196ee <_printf_i+0x2a>
   196ec:	e0b5      	b.n	1985a <_printf_i+0x196>
   196ee:	2a58      	cmp	r2, #88	; 0x58
   196f0:	d000      	beq.n	196f4 <_printf_i+0x30>
   196f2:	e0c5      	b.n	19880 <_printf_i+0x1bc>
   196f4:	3145      	adds	r1, #69	; 0x45
   196f6:	700a      	strb	r2, [r1, #0]
   196f8:	4a81      	ldr	r2, [pc, #516]	; (19900 <_printf_i+0x23c>)
   196fa:	e04f      	b.n	1979c <_printf_i+0xd8>
   196fc:	2a64      	cmp	r2, #100	; 0x64
   196fe:	d01d      	beq.n	1973c <_printf_i+0x78>
   19700:	2a69      	cmp	r2, #105	; 0x69
   19702:	d01b      	beq.n	1973c <_printf_i+0x78>
   19704:	e0bc      	b.n	19880 <_printf_i+0x1bc>
   19706:	2a73      	cmp	r2, #115	; 0x73
   19708:	d100      	bne.n	1970c <_printf_i+0x48>
   1970a:	e0aa      	b.n	19862 <_printf_i+0x19e>
   1970c:	d809      	bhi.n	19722 <_printf_i+0x5e>
   1970e:	2a6f      	cmp	r2, #111	; 0x6f
   19710:	d029      	beq.n	19766 <_printf_i+0xa2>
   19712:	2a70      	cmp	r2, #112	; 0x70
   19714:	d000      	beq.n	19718 <_printf_i+0x54>
   19716:	e0b3      	b.n	19880 <_printf_i+0x1bc>
   19718:	2220      	movs	r2, #32
   1971a:	6809      	ldr	r1, [r1, #0]
   1971c:	430a      	orrs	r2, r1
   1971e:	6022      	str	r2, [r4, #0]
   19720:	e037      	b.n	19792 <_printf_i+0xce>
   19722:	2a75      	cmp	r2, #117	; 0x75
   19724:	d01f      	beq.n	19766 <_printf_i+0xa2>
   19726:	2a78      	cmp	r2, #120	; 0x78
   19728:	d033      	beq.n	19792 <_printf_i+0xce>
   1972a:	e0a9      	b.n	19880 <_printf_i+0x1bc>
   1972c:	000e      	movs	r6, r1
   1972e:	681a      	ldr	r2, [r3, #0]
   19730:	3642      	adds	r6, #66	; 0x42
   19732:	1d11      	adds	r1, r2, #4
   19734:	6019      	str	r1, [r3, #0]
   19736:	6813      	ldr	r3, [r2, #0]
   19738:	7033      	strb	r3, [r6, #0]
   1973a:	e0a4      	b.n	19886 <_printf_i+0x1c2>
   1973c:	6821      	ldr	r1, [r4, #0]
   1973e:	681a      	ldr	r2, [r3, #0]
   19740:	0608      	lsls	r0, r1, #24
   19742:	d406      	bmi.n	19752 <_printf_i+0x8e>
   19744:	0649      	lsls	r1, r1, #25
   19746:	d504      	bpl.n	19752 <_printf_i+0x8e>
   19748:	1d11      	adds	r1, r2, #4
   1974a:	6019      	str	r1, [r3, #0]
   1974c:	2300      	movs	r3, #0
   1974e:	5ed5      	ldrsh	r5, [r2, r3]
   19750:	e002      	b.n	19758 <_printf_i+0x94>
   19752:	1d11      	adds	r1, r2, #4
   19754:	6019      	str	r1, [r3, #0]
   19756:	6815      	ldr	r5, [r2, #0]
   19758:	2d00      	cmp	r5, #0
   1975a:	da3b      	bge.n	197d4 <_printf_i+0x110>
   1975c:	232d      	movs	r3, #45	; 0x2d
   1975e:	9a04      	ldr	r2, [sp, #16]
   19760:	426d      	negs	r5, r5
   19762:	7013      	strb	r3, [r2, #0]
   19764:	e036      	b.n	197d4 <_printf_i+0x110>
   19766:	6821      	ldr	r1, [r4, #0]
   19768:	681a      	ldr	r2, [r3, #0]
   1976a:	0608      	lsls	r0, r1, #24
   1976c:	d406      	bmi.n	1977c <_printf_i+0xb8>
   1976e:	0649      	lsls	r1, r1, #25
   19770:	d504      	bpl.n	1977c <_printf_i+0xb8>
   19772:	6815      	ldr	r5, [r2, #0]
   19774:	1d11      	adds	r1, r2, #4
   19776:	6019      	str	r1, [r3, #0]
   19778:	b2ad      	uxth	r5, r5
   1977a:	e002      	b.n	19782 <_printf_i+0xbe>
   1977c:	1d11      	adds	r1, r2, #4
   1977e:	6019      	str	r1, [r3, #0]
   19780:	6815      	ldr	r5, [r2, #0]
   19782:	4b5f      	ldr	r3, [pc, #380]	; (19900 <_printf_i+0x23c>)
   19784:	7e22      	ldrb	r2, [r4, #24]
   19786:	9303      	str	r3, [sp, #12]
   19788:	2708      	movs	r7, #8
   1978a:	2a6f      	cmp	r2, #111	; 0x6f
   1978c:	d01d      	beq.n	197ca <_printf_i+0x106>
   1978e:	270a      	movs	r7, #10
   19790:	e01b      	b.n	197ca <_printf_i+0x106>
   19792:	0022      	movs	r2, r4
   19794:	2178      	movs	r1, #120	; 0x78
   19796:	3245      	adds	r2, #69	; 0x45
   19798:	7011      	strb	r1, [r2, #0]
   1979a:	4a5a      	ldr	r2, [pc, #360]	; (19904 <_printf_i+0x240>)
   1979c:	6819      	ldr	r1, [r3, #0]
   1979e:	9203      	str	r2, [sp, #12]
   197a0:	1d08      	adds	r0, r1, #4
   197a2:	6822      	ldr	r2, [r4, #0]
   197a4:	6018      	str	r0, [r3, #0]
   197a6:	680d      	ldr	r5, [r1, #0]
   197a8:	0610      	lsls	r0, r2, #24
   197aa:	d402      	bmi.n	197b2 <_printf_i+0xee>
   197ac:	0650      	lsls	r0, r2, #25
   197ae:	d500      	bpl.n	197b2 <_printf_i+0xee>
   197b0:	b2ad      	uxth	r5, r5
   197b2:	07d3      	lsls	r3, r2, #31
   197b4:	d502      	bpl.n	197bc <_printf_i+0xf8>
   197b6:	2320      	movs	r3, #32
   197b8:	431a      	orrs	r2, r3
   197ba:	6022      	str	r2, [r4, #0]
   197bc:	2710      	movs	r7, #16
   197be:	2d00      	cmp	r5, #0
   197c0:	d103      	bne.n	197ca <_printf_i+0x106>
   197c2:	2320      	movs	r3, #32
   197c4:	6822      	ldr	r2, [r4, #0]
   197c6:	439a      	bics	r2, r3
   197c8:	6022      	str	r2, [r4, #0]
   197ca:	0023      	movs	r3, r4
   197cc:	2200      	movs	r2, #0
   197ce:	3343      	adds	r3, #67	; 0x43
   197d0:	701a      	strb	r2, [r3, #0]
   197d2:	e002      	b.n	197da <_printf_i+0x116>
   197d4:	270a      	movs	r7, #10
   197d6:	4b4a      	ldr	r3, [pc, #296]	; (19900 <_printf_i+0x23c>)
   197d8:	9303      	str	r3, [sp, #12]
   197da:	6863      	ldr	r3, [r4, #4]
   197dc:	60a3      	str	r3, [r4, #8]
   197de:	2b00      	cmp	r3, #0
   197e0:	db09      	blt.n	197f6 <_printf_i+0x132>
   197e2:	2204      	movs	r2, #4
   197e4:	6821      	ldr	r1, [r4, #0]
   197e6:	4391      	bics	r1, r2
   197e8:	6021      	str	r1, [r4, #0]
   197ea:	2d00      	cmp	r5, #0
   197ec:	d105      	bne.n	197fa <_printf_i+0x136>
   197ee:	9e04      	ldr	r6, [sp, #16]
   197f0:	2b00      	cmp	r3, #0
   197f2:	d011      	beq.n	19818 <_printf_i+0x154>
   197f4:	e07b      	b.n	198ee <_printf_i+0x22a>
   197f6:	2d00      	cmp	r5, #0
   197f8:	d079      	beq.n	198ee <_printf_i+0x22a>
   197fa:	9e04      	ldr	r6, [sp, #16]
   197fc:	0028      	movs	r0, r5
   197fe:	0039      	movs	r1, r7
   19800:	f7fe fcec 	bl	181dc <__aeabi_uidivmod>
   19804:	9b03      	ldr	r3, [sp, #12]
   19806:	3e01      	subs	r6, #1
   19808:	5c5b      	ldrb	r3, [r3, r1]
   1980a:	0028      	movs	r0, r5
   1980c:	7033      	strb	r3, [r6, #0]
   1980e:	0039      	movs	r1, r7
   19810:	f7fe fc5e 	bl	180d0 <__aeabi_uidiv>
   19814:	1e05      	subs	r5, r0, #0
   19816:	d1f1      	bne.n	197fc <_printf_i+0x138>
   19818:	2f08      	cmp	r7, #8
   1981a:	d109      	bne.n	19830 <_printf_i+0x16c>
   1981c:	6823      	ldr	r3, [r4, #0]
   1981e:	07db      	lsls	r3, r3, #31
   19820:	d506      	bpl.n	19830 <_printf_i+0x16c>
   19822:	6863      	ldr	r3, [r4, #4]
   19824:	6922      	ldr	r2, [r4, #16]
   19826:	4293      	cmp	r3, r2
   19828:	dc02      	bgt.n	19830 <_printf_i+0x16c>
   1982a:	2330      	movs	r3, #48	; 0x30
   1982c:	3e01      	subs	r6, #1
   1982e:	7033      	strb	r3, [r6, #0]
   19830:	9b04      	ldr	r3, [sp, #16]
   19832:	1b9b      	subs	r3, r3, r6
   19834:	6123      	str	r3, [r4, #16]
   19836:	e02b      	b.n	19890 <_printf_i+0x1cc>
   19838:	6809      	ldr	r1, [r1, #0]
   1983a:	681a      	ldr	r2, [r3, #0]
   1983c:	0608      	lsls	r0, r1, #24
   1983e:	d407      	bmi.n	19850 <_printf_i+0x18c>
   19840:	0649      	lsls	r1, r1, #25
   19842:	d505      	bpl.n	19850 <_printf_i+0x18c>
   19844:	1d11      	adds	r1, r2, #4
   19846:	6019      	str	r1, [r3, #0]
   19848:	6813      	ldr	r3, [r2, #0]
   1984a:	8aa2      	ldrh	r2, [r4, #20]
   1984c:	801a      	strh	r2, [r3, #0]
   1984e:	e004      	b.n	1985a <_printf_i+0x196>
   19850:	1d11      	adds	r1, r2, #4
   19852:	6019      	str	r1, [r3, #0]
   19854:	6813      	ldr	r3, [r2, #0]
   19856:	6962      	ldr	r2, [r4, #20]
   19858:	601a      	str	r2, [r3, #0]
   1985a:	2300      	movs	r3, #0
   1985c:	9e04      	ldr	r6, [sp, #16]
   1985e:	6123      	str	r3, [r4, #16]
   19860:	e016      	b.n	19890 <_printf_i+0x1cc>
   19862:	681a      	ldr	r2, [r3, #0]
   19864:	1d11      	adds	r1, r2, #4
   19866:	6019      	str	r1, [r3, #0]
   19868:	6816      	ldr	r6, [r2, #0]
   1986a:	2100      	movs	r1, #0
   1986c:	6862      	ldr	r2, [r4, #4]
   1986e:	0030      	movs	r0, r6
   19870:	f000 f92a 	bl	19ac8 <memchr>
   19874:	2800      	cmp	r0, #0
   19876:	d001      	beq.n	1987c <_printf_i+0x1b8>
   19878:	1b80      	subs	r0, r0, r6
   1987a:	6060      	str	r0, [r4, #4]
   1987c:	6863      	ldr	r3, [r4, #4]
   1987e:	e003      	b.n	19888 <_printf_i+0x1c4>
   19880:	0026      	movs	r6, r4
   19882:	3642      	adds	r6, #66	; 0x42
   19884:	7032      	strb	r2, [r6, #0]
   19886:	2301      	movs	r3, #1
   19888:	6123      	str	r3, [r4, #16]
   1988a:	2300      	movs	r3, #0
   1988c:	9a04      	ldr	r2, [sp, #16]
   1988e:	7013      	strb	r3, [r2, #0]
   19890:	9b07      	ldr	r3, [sp, #28]
   19892:	aa09      	add	r2, sp, #36	; 0x24
   19894:	9300      	str	r3, [sp, #0]
   19896:	0021      	movs	r1, r4
   19898:	9b06      	ldr	r3, [sp, #24]
   1989a:	9805      	ldr	r0, [sp, #20]
   1989c:	f7ff fea4 	bl	195e8 <_printf_common>
   198a0:	1c43      	adds	r3, r0, #1
   198a2:	d102      	bne.n	198aa <_printf_i+0x1e6>
   198a4:	2001      	movs	r0, #1
   198a6:	4240      	negs	r0, r0
   198a8:	e027      	b.n	198fa <_printf_i+0x236>
   198aa:	6923      	ldr	r3, [r4, #16]
   198ac:	0032      	movs	r2, r6
   198ae:	9906      	ldr	r1, [sp, #24]
   198b0:	9805      	ldr	r0, [sp, #20]
   198b2:	9d07      	ldr	r5, [sp, #28]
   198b4:	47a8      	blx	r5
   198b6:	1c43      	adds	r3, r0, #1
   198b8:	d0f4      	beq.n	198a4 <_printf_i+0x1e0>
   198ba:	6823      	ldr	r3, [r4, #0]
   198bc:	2500      	movs	r5, #0
   198be:	079b      	lsls	r3, r3, #30
   198c0:	d40f      	bmi.n	198e2 <_printf_i+0x21e>
   198c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   198c4:	68e0      	ldr	r0, [r4, #12]
   198c6:	4298      	cmp	r0, r3
   198c8:	da17      	bge.n	198fa <_printf_i+0x236>
   198ca:	0018      	movs	r0, r3
   198cc:	e015      	b.n	198fa <_printf_i+0x236>
   198ce:	0022      	movs	r2, r4
   198d0:	2301      	movs	r3, #1
   198d2:	3219      	adds	r2, #25
   198d4:	9906      	ldr	r1, [sp, #24]
   198d6:	9805      	ldr	r0, [sp, #20]
   198d8:	9e07      	ldr	r6, [sp, #28]
   198da:	47b0      	blx	r6
   198dc:	1c43      	adds	r3, r0, #1
   198de:	d0e1      	beq.n	198a4 <_printf_i+0x1e0>
   198e0:	3501      	adds	r5, #1
   198e2:	68e3      	ldr	r3, [r4, #12]
   198e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   198e6:	1a9b      	subs	r3, r3, r2
   198e8:	429d      	cmp	r5, r3
   198ea:	dbf0      	blt.n	198ce <_printf_i+0x20a>
   198ec:	e7e9      	b.n	198c2 <_printf_i+0x1fe>
   198ee:	0026      	movs	r6, r4
   198f0:	9b03      	ldr	r3, [sp, #12]
   198f2:	3642      	adds	r6, #66	; 0x42
   198f4:	781b      	ldrb	r3, [r3, #0]
   198f6:	7033      	strb	r3, [r6, #0]
   198f8:	e78e      	b.n	19818 <_printf_i+0x154>
   198fa:	b00b      	add	sp, #44	; 0x2c
   198fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   198fe:	46c0      	nop			; (mov r8, r8)
   19900:	0001b945 	.word	0x0001b945
   19904:	0001b956 	.word	0x0001b956

00019908 <_putc_r>:
   19908:	b570      	push	{r4, r5, r6, lr}
   1990a:	0006      	movs	r6, r0
   1990c:	000d      	movs	r5, r1
   1990e:	0014      	movs	r4, r2
   19910:	2800      	cmp	r0, #0
   19912:	d004      	beq.n	1991e <_putc_r+0x16>
   19914:	6983      	ldr	r3, [r0, #24]
   19916:	2b00      	cmp	r3, #0
   19918:	d101      	bne.n	1991e <_putc_r+0x16>
   1991a:	f7ff fac9 	bl	18eb0 <__sinit>
   1991e:	4b12      	ldr	r3, [pc, #72]	; (19968 <_putc_r+0x60>)
   19920:	429c      	cmp	r4, r3
   19922:	d101      	bne.n	19928 <_putc_r+0x20>
   19924:	6874      	ldr	r4, [r6, #4]
   19926:	e008      	b.n	1993a <_putc_r+0x32>
   19928:	4b10      	ldr	r3, [pc, #64]	; (1996c <_putc_r+0x64>)
   1992a:	429c      	cmp	r4, r3
   1992c:	d101      	bne.n	19932 <_putc_r+0x2a>
   1992e:	68b4      	ldr	r4, [r6, #8]
   19930:	e003      	b.n	1993a <_putc_r+0x32>
   19932:	4b0f      	ldr	r3, [pc, #60]	; (19970 <_putc_r+0x68>)
   19934:	429c      	cmp	r4, r3
   19936:	d100      	bne.n	1993a <_putc_r+0x32>
   19938:	68f4      	ldr	r4, [r6, #12]
   1993a:	68a3      	ldr	r3, [r4, #8]
   1993c:	3b01      	subs	r3, #1
   1993e:	60a3      	str	r3, [r4, #8]
   19940:	2b00      	cmp	r3, #0
   19942:	da05      	bge.n	19950 <_putc_r+0x48>
   19944:	69a2      	ldr	r2, [r4, #24]
   19946:	4293      	cmp	r3, r2
   19948:	db08      	blt.n	1995c <_putc_r+0x54>
   1994a:	b2eb      	uxtb	r3, r5
   1994c:	2b0a      	cmp	r3, #10
   1994e:	d005      	beq.n	1995c <_putc_r+0x54>
   19950:	6823      	ldr	r3, [r4, #0]
   19952:	b2e8      	uxtb	r0, r5
   19954:	1c5a      	adds	r2, r3, #1
   19956:	6022      	str	r2, [r4, #0]
   19958:	701d      	strb	r5, [r3, #0]
   1995a:	e004      	b.n	19966 <_putc_r+0x5e>
   1995c:	0022      	movs	r2, r4
   1995e:	0029      	movs	r1, r5
   19960:	0030      	movs	r0, r6
   19962:	f7ff f8e3 	bl	18b2c <__swbuf_r>
   19966:	bd70      	pop	{r4, r5, r6, pc}
   19968:	0001b8d4 	.word	0x0001b8d4
   1996c:	0001b8f4 	.word	0x0001b8f4
   19970:	0001b914 	.word	0x0001b914

00019974 <__sread>:
   19974:	b570      	push	{r4, r5, r6, lr}
   19976:	000c      	movs	r4, r1
   19978:	250e      	movs	r5, #14
   1997a:	5f49      	ldrsh	r1, [r1, r5]
   1997c:	f000 f8d6 	bl	19b2c <_read_r>
   19980:	2800      	cmp	r0, #0
   19982:	db03      	blt.n	1998c <__sread+0x18>
   19984:	6d63      	ldr	r3, [r4, #84]	; 0x54
   19986:	181b      	adds	r3, r3, r0
   19988:	6563      	str	r3, [r4, #84]	; 0x54
   1998a:	e003      	b.n	19994 <__sread+0x20>
   1998c:	89a2      	ldrh	r2, [r4, #12]
   1998e:	4b02      	ldr	r3, [pc, #8]	; (19998 <__sread+0x24>)
   19990:	4013      	ands	r3, r2
   19992:	81a3      	strh	r3, [r4, #12]
   19994:	bd70      	pop	{r4, r5, r6, pc}
   19996:	46c0      	nop			; (mov r8, r8)
   19998:	ffffefff 	.word	0xffffefff

0001999c <__swrite>:
   1999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1999e:	001f      	movs	r7, r3
   199a0:	898b      	ldrh	r3, [r1, #12]
   199a2:	0005      	movs	r5, r0
   199a4:	000c      	movs	r4, r1
   199a6:	0016      	movs	r6, r2
   199a8:	05db      	lsls	r3, r3, #23
   199aa:	d505      	bpl.n	199b8 <__swrite+0x1c>
   199ac:	230e      	movs	r3, #14
   199ae:	5ec9      	ldrsh	r1, [r1, r3]
   199b0:	2200      	movs	r2, #0
   199b2:	2302      	movs	r3, #2
   199b4:	f000 f874 	bl	19aa0 <_lseek_r>
   199b8:	89a2      	ldrh	r2, [r4, #12]
   199ba:	4b05      	ldr	r3, [pc, #20]	; (199d0 <__swrite+0x34>)
   199bc:	0028      	movs	r0, r5
   199be:	4013      	ands	r3, r2
   199c0:	81a3      	strh	r3, [r4, #12]
   199c2:	0032      	movs	r2, r6
   199c4:	230e      	movs	r3, #14
   199c6:	5ee1      	ldrsh	r1, [r4, r3]
   199c8:	003b      	movs	r3, r7
   199ca:	f000 f81f 	bl	19a0c <_write_r>
   199ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   199d0:	ffffefff 	.word	0xffffefff

000199d4 <__sseek>:
   199d4:	b570      	push	{r4, r5, r6, lr}
   199d6:	000c      	movs	r4, r1
   199d8:	250e      	movs	r5, #14
   199da:	5f49      	ldrsh	r1, [r1, r5]
   199dc:	f000 f860 	bl	19aa0 <_lseek_r>
   199e0:	89a3      	ldrh	r3, [r4, #12]
   199e2:	1c42      	adds	r2, r0, #1
   199e4:	d103      	bne.n	199ee <__sseek+0x1a>
   199e6:	4a05      	ldr	r2, [pc, #20]	; (199fc <__sseek+0x28>)
   199e8:	4013      	ands	r3, r2
   199ea:	81a3      	strh	r3, [r4, #12]
   199ec:	e004      	b.n	199f8 <__sseek+0x24>
   199ee:	2280      	movs	r2, #128	; 0x80
   199f0:	0152      	lsls	r2, r2, #5
   199f2:	4313      	orrs	r3, r2
   199f4:	81a3      	strh	r3, [r4, #12]
   199f6:	6560      	str	r0, [r4, #84]	; 0x54
   199f8:	bd70      	pop	{r4, r5, r6, pc}
   199fa:	46c0      	nop			; (mov r8, r8)
   199fc:	ffffefff 	.word	0xffffefff

00019a00 <__sclose>:
   19a00:	b510      	push	{r4, lr}
   19a02:	230e      	movs	r3, #14
   19a04:	5ec9      	ldrsh	r1, [r1, r3]
   19a06:	f000 f815 	bl	19a34 <_close_r>
   19a0a:	bd10      	pop	{r4, pc}

00019a0c <_write_r>:
   19a0c:	b570      	push	{r4, r5, r6, lr}
   19a0e:	0005      	movs	r5, r0
   19a10:	0008      	movs	r0, r1
   19a12:	0011      	movs	r1, r2
   19a14:	2200      	movs	r2, #0
   19a16:	4c06      	ldr	r4, [pc, #24]	; (19a30 <_write_r+0x24>)
   19a18:	6022      	str	r2, [r4, #0]
   19a1a:	001a      	movs	r2, r3
   19a1c:	f7fb fe04 	bl	15628 <_write>
   19a20:	1c43      	adds	r3, r0, #1
   19a22:	d103      	bne.n	19a2c <_write_r+0x20>
   19a24:	6823      	ldr	r3, [r4, #0]
   19a26:	2b00      	cmp	r3, #0
   19a28:	d000      	beq.n	19a2c <_write_r+0x20>
   19a2a:	602b      	str	r3, [r5, #0]
   19a2c:	bd70      	pop	{r4, r5, r6, pc}
   19a2e:	46c0      	nop			; (mov r8, r8)
   19a30:	20000ea4 	.word	0x20000ea4

00019a34 <_close_r>:
   19a34:	2300      	movs	r3, #0
   19a36:	b570      	push	{r4, r5, r6, lr}
   19a38:	4c06      	ldr	r4, [pc, #24]	; (19a54 <_close_r+0x20>)
   19a3a:	0005      	movs	r5, r0
   19a3c:	0008      	movs	r0, r1
   19a3e:	6023      	str	r3, [r4, #0]
   19a40:	f7f7 fa0e 	bl	10e60 <_close>
   19a44:	1c43      	adds	r3, r0, #1
   19a46:	d103      	bne.n	19a50 <_close_r+0x1c>
   19a48:	6823      	ldr	r3, [r4, #0]
   19a4a:	2b00      	cmp	r3, #0
   19a4c:	d000      	beq.n	19a50 <_close_r+0x1c>
   19a4e:	602b      	str	r3, [r5, #0]
   19a50:	bd70      	pop	{r4, r5, r6, pc}
   19a52:	46c0      	nop			; (mov r8, r8)
   19a54:	20000ea4 	.word	0x20000ea4

00019a58 <_fstat_r>:
   19a58:	2300      	movs	r3, #0
   19a5a:	b570      	push	{r4, r5, r6, lr}
   19a5c:	4c06      	ldr	r4, [pc, #24]	; (19a78 <_fstat_r+0x20>)
   19a5e:	0005      	movs	r5, r0
   19a60:	0008      	movs	r0, r1
   19a62:	0011      	movs	r1, r2
   19a64:	6023      	str	r3, [r4, #0]
   19a66:	f7f7 fa05 	bl	10e74 <_fstat>
   19a6a:	1c43      	adds	r3, r0, #1
   19a6c:	d103      	bne.n	19a76 <_fstat_r+0x1e>
   19a6e:	6823      	ldr	r3, [r4, #0]
   19a70:	2b00      	cmp	r3, #0
   19a72:	d000      	beq.n	19a76 <_fstat_r+0x1e>
   19a74:	602b      	str	r3, [r5, #0]
   19a76:	bd70      	pop	{r4, r5, r6, pc}
   19a78:	20000ea4 	.word	0x20000ea4

00019a7c <_isatty_r>:
   19a7c:	2300      	movs	r3, #0
   19a7e:	b570      	push	{r4, r5, r6, lr}
   19a80:	4c06      	ldr	r4, [pc, #24]	; (19a9c <_isatty_r+0x20>)
   19a82:	0005      	movs	r5, r0
   19a84:	0008      	movs	r0, r1
   19a86:	6023      	str	r3, [r4, #0]
   19a88:	f7f7 fa02 	bl	10e90 <_isatty>
   19a8c:	1c43      	adds	r3, r0, #1
   19a8e:	d103      	bne.n	19a98 <_isatty_r+0x1c>
   19a90:	6823      	ldr	r3, [r4, #0]
   19a92:	2b00      	cmp	r3, #0
   19a94:	d000      	beq.n	19a98 <_isatty_r+0x1c>
   19a96:	602b      	str	r3, [r5, #0]
   19a98:	bd70      	pop	{r4, r5, r6, pc}
   19a9a:	46c0      	nop			; (mov r8, r8)
   19a9c:	20000ea4 	.word	0x20000ea4

00019aa0 <_lseek_r>:
   19aa0:	b570      	push	{r4, r5, r6, lr}
   19aa2:	0005      	movs	r5, r0
   19aa4:	0008      	movs	r0, r1
   19aa6:	0011      	movs	r1, r2
   19aa8:	2200      	movs	r2, #0
   19aaa:	4c06      	ldr	r4, [pc, #24]	; (19ac4 <_lseek_r+0x24>)
   19aac:	6022      	str	r2, [r4, #0]
   19aae:	001a      	movs	r2, r3
   19ab0:	f7f7 f9f8 	bl	10ea4 <_lseek>
   19ab4:	1c43      	adds	r3, r0, #1
   19ab6:	d103      	bne.n	19ac0 <_lseek_r+0x20>
   19ab8:	6823      	ldr	r3, [r4, #0]
   19aba:	2b00      	cmp	r3, #0
   19abc:	d000      	beq.n	19ac0 <_lseek_r+0x20>
   19abe:	602b      	str	r3, [r5, #0]
   19ac0:	bd70      	pop	{r4, r5, r6, pc}
   19ac2:	46c0      	nop			; (mov r8, r8)
   19ac4:	20000ea4 	.word	0x20000ea4

00019ac8 <memchr>:
   19ac8:	b2c9      	uxtb	r1, r1
   19aca:	1882      	adds	r2, r0, r2
   19acc:	4290      	cmp	r0, r2
   19ace:	d004      	beq.n	19ada <memchr+0x12>
   19ad0:	7803      	ldrb	r3, [r0, #0]
   19ad2:	428b      	cmp	r3, r1
   19ad4:	d002      	beq.n	19adc <memchr+0x14>
   19ad6:	3001      	adds	r0, #1
   19ad8:	e7f8      	b.n	19acc <memchr+0x4>
   19ada:	2000      	movs	r0, #0
   19adc:	4770      	bx	lr

00019ade <_realloc_r>:
   19ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ae0:	0006      	movs	r6, r0
   19ae2:	000c      	movs	r4, r1
   19ae4:	0015      	movs	r5, r2
   19ae6:	2900      	cmp	r1, #0
   19ae8:	d104      	bne.n	19af4 <_realloc_r+0x16>
   19aea:	0011      	movs	r1, r2
   19aec:	f7fe fd3e 	bl	1856c <_malloc_r>
   19af0:	0004      	movs	r4, r0
   19af2:	e018      	b.n	19b26 <_realloc_r+0x48>
   19af4:	2a00      	cmp	r2, #0
   19af6:	d103      	bne.n	19b00 <_realloc_r+0x22>
   19af8:	f7fe fcf2 	bl	184e0 <_free_r>
   19afc:	002c      	movs	r4, r5
   19afe:	e012      	b.n	19b26 <_realloc_r+0x48>
   19b00:	f000 f828 	bl	19b54 <_malloc_usable_size_r>
   19b04:	4285      	cmp	r5, r0
   19b06:	d90e      	bls.n	19b26 <_realloc_r+0x48>
   19b08:	0029      	movs	r1, r5
   19b0a:	0030      	movs	r0, r6
   19b0c:	f7fe fd2e 	bl	1856c <_malloc_r>
   19b10:	1e07      	subs	r7, r0, #0
   19b12:	d007      	beq.n	19b24 <_realloc_r+0x46>
   19b14:	0021      	movs	r1, r4
   19b16:	002a      	movs	r2, r5
   19b18:	f7fe fcbc 	bl	18494 <memcpy>
   19b1c:	0021      	movs	r1, r4
   19b1e:	0030      	movs	r0, r6
   19b20:	f7fe fcde 	bl	184e0 <_free_r>
   19b24:	003c      	movs	r4, r7
   19b26:	0020      	movs	r0, r4
   19b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00019b2c <_read_r>:
   19b2c:	b570      	push	{r4, r5, r6, lr}
   19b2e:	0005      	movs	r5, r0
   19b30:	0008      	movs	r0, r1
   19b32:	0011      	movs	r1, r2
   19b34:	2200      	movs	r2, #0
   19b36:	4c06      	ldr	r4, [pc, #24]	; (19b50 <_read_r+0x24>)
   19b38:	6022      	str	r2, [r4, #0]
   19b3a:	001a      	movs	r2, r3
   19b3c:	f7fb fd4a 	bl	155d4 <_read>
   19b40:	1c43      	adds	r3, r0, #1
   19b42:	d103      	bne.n	19b4c <_read_r+0x20>
   19b44:	6823      	ldr	r3, [r4, #0]
   19b46:	2b00      	cmp	r3, #0
   19b48:	d000      	beq.n	19b4c <_read_r+0x20>
   19b4a:	602b      	str	r3, [r5, #0]
   19b4c:	bd70      	pop	{r4, r5, r6, pc}
   19b4e:	46c0      	nop			; (mov r8, r8)
   19b50:	20000ea4 	.word	0x20000ea4

00019b54 <_malloc_usable_size_r>:
   19b54:	1f0b      	subs	r3, r1, #4
   19b56:	681a      	ldr	r2, [r3, #0]
   19b58:	1f10      	subs	r0, r2, #4
   19b5a:	2a00      	cmp	r2, #0
   19b5c:	da04      	bge.n	19b68 <_malloc_usable_size_r+0x14>
   19b5e:	1889      	adds	r1, r1, r2
   19b60:	3904      	subs	r1, #4
   19b62:	680b      	ldr	r3, [r1, #0]
   19b64:	18d0      	adds	r0, r2, r3
   19b66:	3804      	subs	r0, #4
   19b68:	4770      	bx	lr
   19b6a:	0000      	movs	r0, r0
   19b6c:	50504128 	.word	0x50504128
   19b70:	52452829 	.word	0x52452829
   19b74:	255b2952 	.word	0x255b2952
   19b78:	255b5d73 	.word	0x255b5d73
   19b7c:	00005d64 	.word	0x00005d64
   19b80:	61766e69 	.word	0x61766e69
   19b84:	6564696c 	.word	0x6564696c
   19b88:	636f6920 	.word	0x636f6920
   19b8c:	6320746c 	.word	0x6320746c
   19b90:	0000646d 	.word	0x0000646d

00019b94 <__FUNCTION__.14452>:
   19b94:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   19ba4:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   19bb4:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
   19bc4:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   19bd4:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   19be4:	74207075 63206568 00706968 66696828     up the chip.(hif
   19bf4:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
   19c04:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
   19c14:	66696828 64612029 73657264 75622073     (hif) address bu
   19c24:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
   19c34:	70757272 20646574 6b636170 53207465     rrupted packet S
   19c44:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   19c54:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   19c64:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   19c74:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   19c84:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
   19c94:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   19ca4:	73696765 65726574 00000064 2061744f     egistered...Ota 
   19cb4:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
   19cc4:	69676572 72657473 00006465 70797243     registered..Cryp
   19cd4:	63206f74 626c6c61 206b6361 6e207369     to callback is n
   19ce4:	7220746f 73696765 65726574 00000064     ot registered...
   19cf4:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
   19d04:	6f6e2073 65722074 74736967 64657265     s not registered
   19d14:	00000000 66696828 6e692029 696c6176     ....(hif) invali
   19d24:	72672064 2070756f 00004449 66696828     d group ID..(hif
   19d34:	6f682029 61207473 64207070 276e6469     ) host app didn'
   19d44:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
   19d54:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
   19d64:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   19d74:	61462029 2065736c 65746e69 70757272     ) False interrup
   19d84:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   19d94:	74206c69 6552206f 69206461 7265746e     il to Read inter
   19da4:	74707572 67657220 00000000 46494828     rupt reg....(HIF
   19db4:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   19dc4:	746e6920 75727265 25207470 72742064      interrupt %d tr
   19dd4:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   19de4:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   19df4:	72612064 656d7567 0000746e 20505041     d argument..APP 
   19e04:	75716552 65747365 69532064 6920657a     Requested Size i
   19e14:	616c2073 72656772 61687420 6874206e     s larger than th
   19e24:	65722065 65766963 75622064 72656666     e recived buffer
   19e34:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
   19e44:	00000000 20505041 75716552 65747365     ....APP Requeste
   19e54:	64412064 73657264 65622073 646e6f79     d Address beyond
   19e64:	65687420 63657220 64657669 66756220      the recived buf
   19e74:	20726566 72646461 20737365 20646e61     fer address and 
   19e84:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
   19e94:	0000000a 0000999c 0000996c 00009964     ........l...d...
   19ea4:	0000997c 00009974 00009994 00009984     |...t...........
   19eb4:	0000998c                                ....

00019eb8 <__FUNCTION__.13068>:
   19eb8:	5f666968 646e6573 00000000              hif_send....

00019ec4 <__FUNCTION__.13078>:
   19ec4:	5f666968 00727369                       hif_isr.

00019ecc <__FUNCTION__.13084>:
   19ecc:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00019edc <__FUNCTION__.13096>:
   19edc:	5f666968 65636572 00657669              hif_receive.

00019ee8 <__FUNCTION__.13112>:
   19ee8:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   19ef8:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   19f08:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   19f18:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   19f28:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   19f38:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   19f48:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   19f58:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   19f68:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   19f78:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   19f88:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   19f98:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   19fa8:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
   19fb8:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
   19fc8:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
   19fd8:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
   19fe8:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   19ff8:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   1a008:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   1a018:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   1a028:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   1a038:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   1a048:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   1a058:	73747365 72657020 61637320 6c73206e     ests per scan sl
   1a068:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   1a078:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   1a088:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   1a098:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   1a0a8:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   1a0b8:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   1a0c8:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   1a0d8:	6e694d20 69726420 20726576 20726576      Min driver ver 
   1a0e8:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   1a0f8:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   1a108:	0000000a 323a3931 39343a34 00000000     ....19:24:49....
   1a118:	20727041 32203931 00373130 76697244     Apr 19 2017.Driv
   1a128:	62207265 746c6975 20746120 25097325     er built at %s.%
   1a138:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   1a148:	7277616d 65562065 6f697372 0000006e     mawre Version...
   1a158:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   1a168:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
   1a178:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
   1a188:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
   1a198:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   1a1a8:	65646e69 64252078 0000000a 61766e49     index %d....Inva
   1a1b8:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
   1a1c8:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
   1a1d8:	53502074 656b204b 656c2079 6874676e     t PSK key length
   1a1e8:	00000000 65646e75 656e6966 65732064     ....undefined se
   1a1f8:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
   1a208:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
   1a218:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
   1a228:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
   1a238:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
   1a248:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
   1a258:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   1a268:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   1a278:	66754220 20726566 65637865 64656465      Buffer exceeded
   1a288:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   1a298:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   1a2a8:	00000000                                ....

0001a2ac <__FUNCTION__.13047>:
   1a2ac:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0001a2b8 <__FUNCTION__.13076>:
   1a2b8:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0001a2c8 <__FUNCTION__.13104>:
   1a2c8:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   1a2d8:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   1a2e8:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   1a2f8:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   1a308:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   1a318:	20656874 70696863 00000000 50504128     the chip....(APP
   1a328:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
   1a338:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
   1a348:	6c696166 74206465 6564206f 696e692d     failed to de-ini
   1a358:	6c616974 00657a69                       tialize.

0001a360 <__FUNCTION__.12910>:
   1a360:	70696863 6b61775f 00000065              chip_wake...

0001a36c <__FUNCTION__.12959>:
   1a36c:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   1a37c:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1a38c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   1a39c:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   1a3ac:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   1a3bc:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   1a3cc:	6e65206f 656c6261 746e6920 75727265     o enable interru
   1a3dc:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   1a3ec:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   1a3fc:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   1a40c:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   1a41c:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   1a42c:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   1a43c:	75622074 00000073                       t bus...

0001a444 <__FUNCTION__.12957>:
   1a444:	645f6d6e 695f7672 0074696e              nm_drv_init.

0001a450 <__FUNCTION__.12964>:
   1a450:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0001a460 <crc7_syndrome_table>:
   1a460:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1a470:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1a480:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1a490:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1a4a0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   1a4b0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1a4c0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1a4d0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1a4e0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1a4f0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1a500:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1a510:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1a520:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1a530:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1a540:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1a550:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   1a560:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1a570:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   1a580:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   1a590:	73756220 72726520 2e2e726f 0000002e      bus error......
   1a5a0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a5b0:	75622064 72652073 2e726f72 00002e2e     d bus error.....
   1a5c0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a5d0:	61642064 72206174 6f707365 2065736e     d data response 
   1a5e0:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
   1a5f0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a600:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   1a610:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   1a620:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a630:	656c6961 61642064 72206174 6f707365     ailed data respo
   1a640:	2065736e 64616572 7562202c 72652073     nse read, bus er
   1a650:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   1a660:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   1a670:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   1a680:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   1a690:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1a6a0:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   1a6b0:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   1a6c0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1a6d0:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   1a6e0:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   1a6f0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1a700:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   1a710:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   1a720:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a730:	656c6961 61642064 62206174 6b636f6c     ailed data block
   1a740:	69727720 202c6574 20737562 6f727265      write, bus erro
   1a750:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   1a760:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1a770:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   1a780:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   1a790:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a7a0:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   1a7b0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1a7c0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1a7d0:	65722064 6e6f7073 202c6573 74697277     d response, writ
   1a7e0:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   1a7f0:	00000000 65736552 6e612074 65722064     ....Reset and re
   1a800:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   1a810:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1a820:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   1a830:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   1a840:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   1a850:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   1a860:	69727720 62206574 6b636f6c 30252820      write block (%0
   1a870:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   1a880:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   1a890:	61746164 69727720 2e2e6574 0000002e     data write......
   1a8a0:	65736552 6e612074 65722064 20797274     Reset and retry 
   1a8b0:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
   1a8c0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1a8d0:	72202c64 20646165 20676572 38302528     d, read reg (%08
   1a8e0:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   1a8f0:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   1a900:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   1a910:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1a920:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1a930:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   1a940:	6e612074 65722064 20797274 25206425     t and retry %d %
   1a950:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   1a960:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   1a970:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   1a980:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a990:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   1a9a0:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   1a9b0:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   1a9c0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1a9d0:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   1a9e0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1a9f0:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   1aa00:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   1aa10:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   1aa20:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   1aa30:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1aa40:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   1aa50:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   1aa60:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1aa70:	6e692064 6e726574 77206c61 65746972     d internal write
   1aa80:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   1aa90:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1aaa0:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   1aab0:	64692070 002e2e2e 0000b588 0000b588     p id............
   1aac0:	0000b618 0000b4dc 0000b522 0000b544     ........"...D...
   1aad0:	0000b5ca 0000b5ca 0000b684 0000b4b0     ................
   1aae0:	0000b6de 0000b6de 0000b6de 0000b6de     ................
   1aaf0:	0000b566                                f...

0001aaf4 <__FUNCTION__.12263>:
   1aaf4:	5f697073 00646d63                       spi_cmd.

0001aafc <__FUNCTION__.12270>:
   1aafc:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0001ab0c <__FUNCTION__.12279>:
   1ab0c:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0001ab18 <__FUNCTION__.12295>:
   1ab18:	5f697073 61746164 6165725f 00000064     spi_data_read...

0001ab28 <__FUNCTION__.12310>:
   1ab28:	5f697073 61746164 6972775f 00006574     spi_data_write..

0001ab38 <__FUNCTION__.12322>:
   1ab38:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0001ab48 <__FUNCTION__.12333>:
   1ab48:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0001ab58 <__FUNCTION__.12345>:
   1ab58:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0001ab68 <__FUNCTION__.12358>:
   1ab68:	735f6d6e 725f6970 00646165              nm_spi_read.

0001ab74 <__FUNCTION__.12379>:
   1ab74:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   1ab84:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   1ab94:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
   1aba4:	25207465 65732064 6f697373 4449206e     et %d session ID
   1abb4:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
   1abc4:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   1abd4:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1abe4:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
   1abf4:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
   1ac04:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
   1ac14:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
   1ac24:	204c5353 6b636f53 00007465              SSL Socket..

0001ac30 <tcc_modules>:
   1ac30:	42002000 42002400 42002800              . .B.$.B.(.B

0001ac3c <_tcc_gclk_ids>:
   1ac3c:	001b1a1a                                ....

0001ac40 <_tcc_apbcmasks>:
   1ac40:	00000100 00000200 00000400              ............

0001ac4c <_tcc_maxs>:
   1ac4c:	00ffffff 00ffffff 0000ffff              ............

0001ac58 <_tcc_cc_nums>:
   1ac58:	00020204                                ....

0001ac5c <_tcc_ow_nums>:
   1ac5c:	00020408                                ....

0001ac60 <_tcc_intflag>:
   1ac60:	00000001 00000002 00000004 00000008     ................
   1ac70:	00001000 00002000 00004000 00008000     ..... ...@......
   1ac80:	00010000 00020000 00040000 00080000     ................
   1ac90:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   1aca0:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   1acb0:	20544547 00000000 54534f50 00000020     GET ....POST ...
   1acc0:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   1acd0:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   1ace0:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   1acf0:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   1ad00:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   1ad10:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   1ad20:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   1ad30:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   1ad40:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   1ad50:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   1ad60:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   1ad70:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   1ad80:	676e654c 203a6874 00000000 33323130     Length: ....0123
   1ad90:	37363534 62613938 66656463 6e617254     456789abcdefTran
   1ada0:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   1adb0:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   1adc0:	50545448 0000002f 00000d31 0000f182     HTTP/...1.......
   1add0:	0000f17c 0000f176 0000f170 0000f188     |...v...p.......
   1ade0:	0000f16a 0000f188 0000f164 0000f15e     j.......d...^...
   1adf0:	0000f188 0000f158 0000f158 0000f152     ....X...X...R...
   1ae00:	0000f14c 0000f146 42002000 42002400     L...F.... .B.$.B
   1ae10:	42002800 00011166 0001116a 0001116e     .(.Bf...j...n...
   1ae20:	00011172 00011176 0001117a 0001117e     r...v...z...~...
   1ae30:	00011182 00011186 0001118a 000111e2     ................
   1ae40:	000111e8 000111ee 000111f4 000111f4     ................
   1ae50:	000111fa 000111fa 000111fa 00011200     ................
   1ae60:	00011206 00011dcc 00011dcc 00011dc0     ................
   1ae70:	00011dcc 00011dc0 00011d9a 00011d9a     ................
   1ae80:	00011dcc 00011dcc 00011dcc 00011dcc     ................
   1ae90:	00011dcc 00011dcc 00011dcc 00011dcc     ................
   1aea0:	00011dcc 00011dcc 00011dcc 00011dcc     ................
   1aeb0:	00011dcc 00011dcc 00011dcc 00011dcc     ................
   1aec0:	00011dcc 00011dcc 00011dcc 00011dcc     ................
   1aed0:	00011dcc 00011dcc 00011dcc 00011dcc     ................
   1aee0:	00011dcc 00011dcc 00011dcc 00011dcc     ................
   1aef0:	00011dcc 00011dcc 00011dcc 00011dcc     ................
   1af00:	00011dcc 00011dcc 00011dcc 00011dcc     ................
   1af10:	00011dcc 00011dcc 00011dcc 00011dcc     ................
   1af20:	00011dcc 00011dcc 00011dcc 00011dcc     ................
   1af30:	00011dcc 00011dcc 00011dcc 00011dcc     ................
   1af40:	00011dcc 00011dcc 00011dcc 00011dcc     ................
   1af50:	00011dcc 00011dcc 00011dcc 00011dcc     ................
   1af60:	00011dcc 00011dc0 00011dc0 00011dd6     ................
   1af70:	00011dd6 00011dd6 00011dd6 42000800     ...............B
   1af80:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   1af90:	42001c00 0c0b0a09 00000e0d 0001484a     ...B........JH..
   1afa0:	000148c2 000148c2 00014868 00014862     .H...H..hH..bH..
   1afb0:	0001486e 00014850 00014874 000148a8     nH..PH..tH...H..
   1afc0:	00014b8c 00014bdc 00014bdc 00014bd8     .K...K...K...K..
   1afd0:	00014b7e 00014b9e 00014b6e 00014bb0     ~K...K..nK...K..
   1afe0:	00014bc2 00014c2a 00014c58 00014c58     .K..*L..XL..XL..
   1aff0:	00014c54 00014c24 00014c30 00014c1e     TL..$L..0L...L..
   1b000:	00014c36 00014c3c                       6L..<L..

0001b008 <main_mqtt_broker>:
   1b008:	2e33316d 756f6c63 74716d64 6f632e74     m13.cloudmqtt.co
   1b018:	0000006d 462d6957 6f632069 63656e6e     m...Wi-Fi connec
   1b028:	0d646574 00000000 462d6957 69642069     ted.....Wi-Fi di
   1b038:	6e6f6373 7463656e 000d6465 656b6163     sconnected..cake
   1b048:	73736f62 00000000 53494246 45565255     boss....FBISURVE
   1b058:	414c4c49 5645434e 38304e41 00000035     ILLANCEVAN085...
   1b068:	462d6957 50492069 20736920 252e7525     Wi-Fi IP is %u.%
   1b078:	75252e75 0d75252e 0000000a 6e6e6f43     u.%u.%u.....Conn
   1b088:	20746365 6c696166 206f7420 76726573     ect fail to serv
   1b098:	25287265 20212973 72746572 74692079     er(%s)! retry it
   1b0a8:	74756120 74616d6f 6c616369 0d2e796c      automatically..
   1b0b8:	0000000a 74616863 00000000 736e6573     ....chat....sens
   1b0c8:	0000726f 75746361 726f7461 00000000     or..actuator....
   1b0d8:	70657250 74617261 206e6f69 7420666f     Preparation of t
   1b0e8:	63206568 20746168 20736168 6e656562     he chat has been
   1b0f8:	6d6f6320 74656c70 0d2e6465 00000000      completed......
   1b108:	5454514d 6f726220 2072656b 6c636564     MQTT broker decl
   1b118:	20656e69 72756f79 63636120 21737365     ine your access!
   1b128:	72726520 6320726f 2065646f 0a0d6425      error code %d..
   1b138:	00000000 3e207325 0000203e 0000000d     ....%s >> ......
   1b148:	5454514d 73696420 6e6e6f63 65746365     MQTT disconnecte
   1b158:	00000d64 5454514d 696e6920 6c616974     d...MQTT initial
   1b168:	74617a69 206e6f69 6c696166 202e6465     ization failed. 
   1b178:	6f727245 6f632072 69206564 25282073     Error code is (%
   1b188:	0a0d2964 00000000 5454514d 67657220     d)......MQTT reg
   1b198:	65747369 61632072 61626c6c 66206b63     ister callback f
   1b1a8:	656c6961 45202e64 726f7272 646f6320     ailed. Error cod
   1b1b8:	73692065 64252820 000a0d29 70696843     e is (%d)...Chip
   1b1c8:	64696420 7720746e 20656b61 0000000d      didnt wake ....
   1b1d8:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   1b1e8:	462d6957 73692069 746f6e20 6e6f6320     Wi-Fi is not con
   1b1f8:	7463656e 0d2e6465 00000000 72617473     nected......star
   1b208:	6f645f74 6f6c6e77 203a6461 75716572     t_download: requ
   1b218:	20747365 73207369 20746e65 65726c61     est is sent alre
   1b228:	2e796461 0000000d 72617473 6f645f74     ady.....start_do
   1b238:	6f6c6e77 203a6461 6e6e7572 20676e69     wnload: running 
   1b248:	6e776f64 64616f6c 726c6120 79646165     download already
   1b258:	00000d2e 72617473 6f645f74 6f6c6e77     ....start_downlo
   1b268:	203a6461 646e6573 20676e69 50545448     ad: sending HTTP
   1b278:	71657220 74736575 0d2e2e2e 00000000      request........
   1b288:	70747468 2f2f3a73 2e777777 73616573     https://www.seas
   1b298:	6570752e 652e6e6e 7e2f7564 6863696e     .upenn.edu/~nich
   1b2a8:	2f736e69 74747562 6c5f6e6f 2e326465     ins/button_led2.
   1b2b8:	006e6962 72617473 6f645f74 6f6c6e77     bin.start_downlo
   1b2c8:	43206461 203a4352 646e6573 20676e69     ad CRC: sending 
   1b2d8:	50545448 71657220 74736575 0d2e2e2e     HTTP request....
   1b2e8:	00000000 70747468 2f2f3a73 2e777777     ....https://www.
   1b2f8:	73616573 6570752e 652e6e6e 7e2f7564     seas.upenn.edu/~
   1b308:	6863696e 2f736e69 74747562 6c5f6e6f     nichins/button_l
   1b318:	5f326465 2e637263 006e6962 70747468     ed2_crc.bin.http
   1b328:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   1b338:	5448203a 63205054 6e65696c 6f732074     : HTTP client so
   1b348:	74656b63 6e6f6320 7463656e 0d2e6465     cket connected..
   1b358:	00000000 70747468 696c635f 5f746e65     ....http_client_
   1b368:	6c6c6163 6b636162 6572203a 73657571     callback: reques
   1b378:	6f632074 656c706d 2e646574 0000000d     t completed.....
   1b388:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   1b398:	6b636162 6572203a 76696563 72206465     back: received r
   1b3a8:	6f707365 2065736e 64207525 20617461     esponse %u data 
   1b3b8:	657a6973 0d752520 0000000a 6c6c6143     size %u.....Call
   1b3c8:	6b636162 5243203a 6f642043 6f6c6e77     back: CRC downlo
   1b3d8:	2e2e6461 2e2e2e2e 0000000d 65636552     ad..........Rece
   1b3e8:	64657669 0d782520 0000000a 70747468     ived %x.....http
   1b3f8:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   1b408:	5548435f 44454b4e 54414420 72203a41     _CHUNKED DATA: r
   1b418:	69656365 20646576 70736572 65736e6f     eceived response
   1b428:	74616420 69732061 2520657a 000a0d75      data size %u...
   1b438:	73726946 6c622074 206b636f 676e656c     First block leng
   1b448:	25206874 52432064 25203a43 000a0d75     th %d CRC: %u...
   1b458:	636f6c42 656c206b 6874676e 20642520     Block length %d 
   1b468:	3a435243 0d752520 0000000a 70747468     CRC: %u.....http
   1b478:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   1b488:	6964203a 6e6f6373 7463656e 206e6f69     : disconnection 
   1b498:	73616572 253a6e6f 000a0d64 6f736572     reason:%d...reso
   1b4a8:	5f65766c 203a6263 49207325 64612050     lve_cb: %s IP ad
   1b4b8:	73657264 73692073 2e642520 252e6425     dress is %d.%d.%
   1b4c8:	64252e64 0a0d0a0d 00000000 69666977     d.%d........wifi
   1b4d8:	3a62635f 4d324d20 4649575f 4f435f49     _cb: M2M_WIFI_CO
   1b4e8:	43454e4e 0d444554 00000000 69666977     NNECTED.....wifi
   1b4f8:	3a62635f 4d324d20 4649575f 49445f49     _cb: M2M_WIFI_DI
   1b508:	4e4f4353 5443454e 000d4445 69666977     SCONNECTED..wifi
   1b518:	3a62635f 20504920 72646461 20737365     _cb: IP address 
   1b528:	25207369 75252e75 2e75252e 0a0d7525     is %u.%u.%u.%u..
   1b538:	00000000 666e6f63 72756769 74685f65     ....configure_ht
   1b548:	635f7074 6e65696c 48203a74 20505454     tp_client: HTTP 
   1b558:	65696c63 6920746e 6974696e 7a696c61     client initializ
   1b568:	6f697461 6166206e 64656c69 72282021     ation failed! (r
   1b578:	25207365 0a0d2964 00000000 6e776f64     es %d)......down
   1b588:	64616f6c 7269665f 7261776d 63203a65     load_firmware: c
   1b598:	656e6e6f 6e697463 6f742067 46695720     onnecting to WiF
   1b5a8:	50412069 2e732520 0a0d2e2e 00000000     i AP %s.........
   1b5b8:	6e776f64 64616f6c 7269665f 7261776d     download_firmwar
   1b5c8:	64203a65 2e656e6f 0000000d 636c6143     e: done.....Calc
   1b5d8:	74616c75 43206465 203a4352 0a0d7825     ulated CRC: %x..
   1b5e8:	00000000 72657355 25203a20 000a0d73     ....User : %s...
   1b5f8:	73736150 64726f77 25203a20 000a0d73     Password : %s...
   1b608:	69706f54 203a2063 0a0d7325 00000000     Topic : %s......
   1b618:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   1b628:	2074696e 6c6c6163 72726520 2821726f     nit call error!(
   1b638:	0d296425 0000000a 74747542 70206e6f     %d).....Button p
   1b648:	65687375 00000d64 00006425 6564614d     ushed...%d..Made
   1b658:	20746920 6f206f74 72656874 64697320      it to other sid
   1b668:	666f2065 72707320 66746e69 0000000d     e of sprintf....
   1b678:	6564614d 20746920 6f206f74 72656874     Made it to other
   1b688:	64697320 666f2065 62757020 6873696c      side of publish
   1b698:	0000000d 6e69616d 326d203a 69775f6d     ....main: m2m_wi
   1b6a8:	645f6966 696e6965 61632074 65206c6c     fi_deinit call e
   1b6b8:	726f7272 64252821 000a0d29 6e69616d     rror!(%d)...main
   1b6c8:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   1b6d8:	6c6c6163 72726520 2021726f 73657228     call error! (res
   1b6e8:	29642520 00000a0d 76727553 64657669      %d)....Survived
   1b6f8:	74746820 6c632070 746e6569 74657320      http client set
   1b708:	000d7075 63657845 6e697475 6d692067     up..Executing im
   1b718:	3a656761 2c642520 204c4420 203a6f74     age: %d, DL to: 
   1b728:	0a0d6425 00000000 614d0d0a 203a6e69     %d........Main: 
   1b738:	656e6f44 776f6420 616f6c6e 676e6964     Done downloading
   1b748:	72696620 7261776d 6e612065 52432064      firmware and CR
   1b758:	000d0a43 614d0d0a 203a6e69 20435243     C.....Main: CRC 
   1b768:	4354414d 21444548 61747320 6e697472     MATCHED! startin
   1b778:	69662067 61776d72 75206572 61726770     g firmware upgra
   1b788:	202e6564 00000d0a 4d200d0a 3a6e6961     de. ...... Main:
   1b798:	43524320 65684320 46206b63 216c6961      CRC Check Fail!
   1b7a8:	00000d0a 000167c0 000167ca 000167da     .....g...g...g..
   1b7b8:	00016860 00016a7a 7349514d 43007064     `h..zj..MQIsdp.C
   1b7c8:	00000000                                ....

0001b7cc <_global_impure_ptr>:
   1b7cc:	2000002c                                ,.. 

0001b7d0 <_ctype_>:
   1b7d0:	20202000 20202020 28282020 20282828     .         ((((( 
   1b7e0:	20202020 20202020 20202020 20202020                     
   1b7f0:	10108820 10101010 10101010 10101010      ...............
   1b800:	04040410 04040404 10040404 10101010     ................
   1b810:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1b820:	01010101 01010101 01010101 10101010     ................
   1b830:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1b840:	02020202 02020202 02020202 10101010     ................
   1b850:	00000020 00000000 00000000 00000000      ...............
	...

0001b8d4 <__sf_fake_stdin>:
	...

0001b8f4 <__sf_fake_stdout>:
	...

0001b914 <__sf_fake_stderr>:
	...
   1b934:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   1b944:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   1b954:	31300046 35343332 39383736 64636261     F.0123456789abcd
   1b964:	00006665                                ef..

0001b968 <_init>:
   1b968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b96a:	46c0      	nop			; (mov r8, r8)
   1b96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b96e:	bc08      	pop	{r3}
   1b970:	469e      	mov	lr, r3
   1b972:	4770      	bx	lr

0001b974 <__init_array_start>:
   1b974:	000080dd 	.word	0x000080dd

0001b978 <_fini>:
   1b978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b97a:	46c0      	nop			; (mov r8, r8)
   1b97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b97e:	bc08      	pop	{r3}
   1b980:	469e      	mov	lr, r3
   1b982:	4770      	bx	lr

0001b984 <__fini_array_start>:
   1b984:	000080b5 	.word	0x000080b5
