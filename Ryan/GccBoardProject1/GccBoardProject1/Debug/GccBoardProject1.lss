
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  000007c0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  20000004  000007c4  00020004  2**2
                  ALLOC
  3 .stack        00002000  20000040  00000800  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000a1ae  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001283  00000000  00000000  0002a233  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000220  00000000  00000000  0002b4b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000001a8  00000000  00000000  0002b6d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001652b  00000000  00000000  0002b87e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000599d  00000000  00000000  00041da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00083370  00000000  00000000  00047746  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000004b4  00000000  00000000  000caab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000019c5  00000000  00000000  000caf6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	20002040 	.word	0x20002040
   4:	000005cd 	.word	0x000005cd
   8:	000005c9 	.word	0x000005c9
   c:	000005c9 	.word	0x000005c9
	...
  2c:	000005c9 	.word	0x000005c9
	...
  38:	000005c9 	.word	0x000005c9
  3c:	000005c9 	.word	0x000005c9
  40:	000005c9 	.word	0x000005c9
  44:	000005c9 	.word	0x000005c9
  48:	000005c9 	.word	0x000005c9
  4c:	000005c9 	.word	0x000005c9
  50:	000005c9 	.word	0x000005c9
  54:	000005c9 	.word	0x000005c9
  58:	000005c9 	.word	0x000005c9
  5c:	000005c9 	.word	0x000005c9
  60:	000005c9 	.word	0x000005c9
  64:	000005c9 	.word	0x000005c9
  68:	000005c9 	.word	0x000005c9
  6c:	000005c9 	.word	0x000005c9
  70:	000005c9 	.word	0x000005c9
  74:	000005c9 	.word	0x000005c9
  78:	000005c9 	.word	0x000005c9
  7c:	000005c9 	.word	0x000005c9
  80:	000005c9 	.word	0x000005c9
  84:	000005c9 	.word	0x000005c9
  88:	000005c9 	.word	0x000005c9
  8c:	000005c9 	.word	0x000005c9
  90:	000005c9 	.word	0x000005c9
	...
  9c:	000005c9 	.word	0x000005c9
  a0:	000005c9 	.word	0x000005c9
  a4:	000005c9 	.word	0x000005c9
  a8:	000005c9 	.word	0x000005c9
  ac:	000005c9 	.word	0x000005c9
  b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000004 	.word	0x20000004
  d4:	00000000 	.word	0x00000000
  d8:	000007c0 	.word	0x000007c0

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000008 	.word	0x20000008
 108:	000007c0 	.word	0x000007c0
 10c:	000007c0 	.word	0x000007c0
 110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
 114:	4770      	bx	lr
 116:	46c0      	nop			; (mov r8, r8)

00000118 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 118:	4b0c      	ldr	r3, [pc, #48]	; (14c <cpu_irq_enter_critical+0x34>)
 11a:	681b      	ldr	r3, [r3, #0]
 11c:	2b00      	cmp	r3, #0
 11e:	d110      	bne.n	142 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 120:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 124:	2b00      	cmp	r3, #0
 126:	d109      	bne.n	13c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 128:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
 12a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 12e:	2200      	movs	r2, #0
 130:	4b07      	ldr	r3, [pc, #28]	; (150 <cpu_irq_enter_critical+0x38>)
 132:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 134:	3201      	adds	r2, #1
 136:	4b07      	ldr	r3, [pc, #28]	; (154 <cpu_irq_enter_critical+0x3c>)
 138:	701a      	strb	r2, [r3, #0]
 13a:	e002      	b.n	142 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 13c:	2200      	movs	r2, #0
 13e:	4b05      	ldr	r3, [pc, #20]	; (154 <cpu_irq_enter_critical+0x3c>)
 140:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 142:	4a02      	ldr	r2, [pc, #8]	; (14c <cpu_irq_enter_critical+0x34>)
 144:	6813      	ldr	r3, [r2, #0]
 146:	3301      	adds	r3, #1
 148:	6013      	str	r3, [r2, #0]
}
 14a:	4770      	bx	lr
 14c:	20000020 	.word	0x20000020
 150:	20000000 	.word	0x20000000
 154:	20000024 	.word	0x20000024

00000158 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 158:	4b08      	ldr	r3, [pc, #32]	; (17c <cpu_irq_leave_critical+0x24>)
 15a:	681a      	ldr	r2, [r3, #0]
 15c:	3a01      	subs	r2, #1
 15e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 160:	681b      	ldr	r3, [r3, #0]
 162:	2b00      	cmp	r3, #0
 164:	d109      	bne.n	17a <cpu_irq_leave_critical+0x22>
 166:	4b06      	ldr	r3, [pc, #24]	; (180 <cpu_irq_leave_critical+0x28>)
 168:	781b      	ldrb	r3, [r3, #0]
 16a:	2b00      	cmp	r3, #0
 16c:	d005      	beq.n	17a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 16e:	2201      	movs	r2, #1
 170:	4b04      	ldr	r3, [pc, #16]	; (184 <cpu_irq_leave_critical+0x2c>)
 172:	701a      	strb	r2, [r3, #0]
 174:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 178:	b662      	cpsie	i
	}
}
 17a:	4770      	bx	lr
 17c:	20000020 	.word	0x20000020
 180:	20000024 	.word	0x20000024
 184:	20000000 	.word	0x20000000

00000188 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 188:	b500      	push	{lr}
 18a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 18c:	ab01      	add	r3, sp, #4
 18e:	2280      	movs	r2, #128	; 0x80
 190:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 192:	780a      	ldrb	r2, [r1, #0]
 194:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 196:	784a      	ldrb	r2, [r1, #1]
 198:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 19a:	788a      	ldrb	r2, [r1, #2]
 19c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 19e:	0019      	movs	r1, r3
 1a0:	4b01      	ldr	r3, [pc, #4]	; (1a8 <port_pin_set_config+0x20>)
 1a2:	4798      	blx	r3
}
 1a4:	b003      	add	sp, #12
 1a6:	bd00      	pop	{pc}
 1a8:	00000569 	.word	0x00000569

000001ac <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 1ac:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 1ae:	4c0c      	ldr	r4, [pc, #48]	; (1e0 <system_clock_source_osc8m_set_config+0x34>)
 1b0:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 1b2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 1b4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 1b6:	7842      	ldrb	r2, [r0, #1]
 1b8:	2001      	movs	r0, #1
 1ba:	4002      	ands	r2, r0
 1bc:	0192      	lsls	r2, r2, #6
 1be:	2640      	movs	r6, #64	; 0x40
 1c0:	43b3      	bics	r3, r6
 1c2:	4313      	orrs	r3, r2
 1c4:	0002      	movs	r2, r0
 1c6:	402a      	ands	r2, r5
 1c8:	01d2      	lsls	r2, r2, #7
 1ca:	307f      	adds	r0, #127	; 0x7f
 1cc:	4383      	bics	r3, r0
 1ce:	4313      	orrs	r3, r2
 1d0:	2203      	movs	r2, #3
 1d2:	400a      	ands	r2, r1
 1d4:	0212      	lsls	r2, r2, #8
 1d6:	4903      	ldr	r1, [pc, #12]	; (1e4 <system_clock_source_osc8m_set_config+0x38>)
 1d8:	400b      	ands	r3, r1
 1da:	4313      	orrs	r3, r2
 1dc:	6223      	str	r3, [r4, #32]
}
 1de:	bd70      	pop	{r4, r5, r6, pc}
 1e0:	40000800 	.word	0x40000800
 1e4:	fffffcff 	.word	0xfffffcff

000001e8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 1e8:	2808      	cmp	r0, #8
 1ea:	d803      	bhi.n	1f4 <system_clock_source_enable+0xc>
 1ec:	0080      	lsls	r0, r0, #2
 1ee:	4b25      	ldr	r3, [pc, #148]	; (284 <system_clock_source_enable+0x9c>)
 1f0:	581b      	ldr	r3, [r3, r0]
 1f2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 1f4:	2017      	movs	r0, #23
 1f6:	e044      	b.n	282 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 1f8:	4a23      	ldr	r2, [pc, #140]	; (288 <system_clock_source_enable+0xa0>)
 1fa:	6a11      	ldr	r1, [r2, #32]
 1fc:	2302      	movs	r3, #2
 1fe:	430b      	orrs	r3, r1
 200:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 202:	2000      	movs	r0, #0
 204:	e03d      	b.n	282 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 206:	4a20      	ldr	r2, [pc, #128]	; (288 <system_clock_source_enable+0xa0>)
 208:	6991      	ldr	r1, [r2, #24]
 20a:	2302      	movs	r3, #2
 20c:	430b      	orrs	r3, r1
 20e:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 210:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
 212:	e036      	b.n	282 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 214:	4a1c      	ldr	r2, [pc, #112]	; (288 <system_clock_source_enable+0xa0>)
 216:	8a11      	ldrh	r1, [r2, #16]
 218:	2302      	movs	r3, #2
 21a:	430b      	orrs	r3, r1
 21c:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 21e:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
 220:	e02f      	b.n	282 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 222:	4a19      	ldr	r2, [pc, #100]	; (288 <system_clock_source_enable+0xa0>)
 224:	8a91      	ldrh	r1, [r2, #20]
 226:	2302      	movs	r3, #2
 228:	430b      	orrs	r3, r1
 22a:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 22c:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
 22e:	e028      	b.n	282 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 230:	4916      	ldr	r1, [pc, #88]	; (28c <system_clock_source_enable+0xa4>)
 232:	680b      	ldr	r3, [r1, #0]
 234:	2202      	movs	r2, #2
 236:	4313      	orrs	r3, r2
 238:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 23a:	4b13      	ldr	r3, [pc, #76]	; (288 <system_clock_source_enable+0xa0>)
 23c:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 23e:	0019      	movs	r1, r3
 240:	320e      	adds	r2, #14
 242:	68cb      	ldr	r3, [r1, #12]
 244:	421a      	tst	r2, r3
 246:	d0fc      	beq.n	242 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 248:	4a10      	ldr	r2, [pc, #64]	; (28c <system_clock_source_enable+0xa4>)
 24a:	6891      	ldr	r1, [r2, #8]
 24c:	4b0e      	ldr	r3, [pc, #56]	; (288 <system_clock_source_enable+0xa0>)
 24e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 250:	6852      	ldr	r2, [r2, #4]
 252:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
 254:	2200      	movs	r2, #0
 256:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 258:	0019      	movs	r1, r3
 25a:	3210      	adds	r2, #16
 25c:	68cb      	ldr	r3, [r1, #12]
 25e:	421a      	tst	r2, r3
 260:	d0fc      	beq.n	25c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 262:	4b0a      	ldr	r3, [pc, #40]	; (28c <system_clock_source_enable+0xa4>)
 264:	681b      	ldr	r3, [r3, #0]
 266:	b29b      	uxth	r3, r3
 268:	4a07      	ldr	r2, [pc, #28]	; (288 <system_clock_source_enable+0xa0>)
 26a:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 26c:	2000      	movs	r0, #0
 26e:	e008      	b.n	282 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 270:	4905      	ldr	r1, [pc, #20]	; (288 <system_clock_source_enable+0xa0>)
 272:	2244      	movs	r2, #68	; 0x44
 274:	5c88      	ldrb	r0, [r1, r2]
 276:	2302      	movs	r3, #2
 278:	4303      	orrs	r3, r0
 27a:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
 27c:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
 27e:	e000      	b.n	282 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
 280:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
 282:	4770      	bx	lr
 284:	0000077c 	.word	0x0000077c
 288:	40000800 	.word	0x40000800
 28c:	20000028 	.word	0x20000028

00000290 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 290:	b530      	push	{r4, r5, lr}
 292:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 294:	22c2      	movs	r2, #194	; 0xc2
 296:	00d2      	lsls	r2, r2, #3
 298:	4b1a      	ldr	r3, [pc, #104]	; (304 <system_clock_init+0x74>)
 29a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 29c:	4a1a      	ldr	r2, [pc, #104]	; (308 <system_clock_init+0x78>)
 29e:	6853      	ldr	r3, [r2, #4]
 2a0:	211e      	movs	r1, #30
 2a2:	438b      	bics	r3, r1
 2a4:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 2a6:	2301      	movs	r3, #1
 2a8:	466a      	mov	r2, sp
 2aa:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 2ac:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 2ae:	4d17      	ldr	r5, [pc, #92]	; (30c <system_clock_init+0x7c>)
 2b0:	b2e0      	uxtb	r0, r4
 2b2:	4669      	mov	r1, sp
 2b4:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 2b6:	3401      	adds	r4, #1
 2b8:	2c25      	cmp	r4, #37	; 0x25
 2ba:	d1f9      	bne.n	2b0 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
 2bc:	a803      	add	r0, sp, #12
 2be:	2400      	movs	r4, #0
 2c0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 2c2:	2501      	movs	r5, #1
 2c4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 2c6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 2c8:	4b11      	ldr	r3, [pc, #68]	; (310 <system_clock_init+0x80>)
 2ca:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 2cc:	2006      	movs	r0, #6
 2ce:	4b11      	ldr	r3, [pc, #68]	; (314 <system_clock_init+0x84>)
 2d0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 2d2:	4b11      	ldr	r3, [pc, #68]	; (318 <system_clock_init+0x88>)
 2d4:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
 2d6:	4b11      	ldr	r3, [pc, #68]	; (31c <system_clock_init+0x8c>)
 2d8:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
 2da:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
 2dc:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
 2de:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 2e0:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 2e2:	466b      	mov	r3, sp
 2e4:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 2e6:	2306      	movs	r3, #6
 2e8:	466a      	mov	r2, sp
 2ea:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 2ec:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 2ee:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 2f0:	4669      	mov	r1, sp
 2f2:	2000      	movs	r0, #0
 2f4:	4b0a      	ldr	r3, [pc, #40]	; (320 <system_clock_init+0x90>)
 2f6:	4798      	blx	r3
 2f8:	2000      	movs	r0, #0
 2fa:	4b0a      	ldr	r3, [pc, #40]	; (324 <system_clock_init+0x94>)
 2fc:	4798      	blx	r3
#endif
}
 2fe:	b005      	add	sp, #20
 300:	bd30      	pop	{r4, r5, pc}
 302:	46c0      	nop			; (mov r8, r8)
 304:	40000800 	.word	0x40000800
 308:	41004000 	.word	0x41004000
 30c:	000004a5 	.word	0x000004a5
 310:	000001ad 	.word	0x000001ad
 314:	000001e9 	.word	0x000001e9
 318:	00000329 	.word	0x00000329
 31c:	40000400 	.word	0x40000400
 320:	0000034d 	.word	0x0000034d
 324:	00000405 	.word	0x00000405

00000328 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
 328:	4a06      	ldr	r2, [pc, #24]	; (344 <system_gclk_init+0x1c>)
 32a:	6991      	ldr	r1, [r2, #24]
 32c:	2308      	movs	r3, #8
 32e:	430b      	orrs	r3, r1
 330:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 332:	2201      	movs	r2, #1
 334:	4b04      	ldr	r3, [pc, #16]	; (348 <system_gclk_init+0x20>)
 336:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 338:	0019      	movs	r1, r3
 33a:	780b      	ldrb	r3, [r1, #0]
 33c:	4213      	tst	r3, r2
 33e:	d1fc      	bne.n	33a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 340:	4770      	bx	lr
 342:	46c0      	nop			; (mov r8, r8)
 344:	40000400 	.word	0x40000400
 348:	40000c00 	.word	0x40000c00

0000034c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 34c:	b570      	push	{r4, r5, r6, lr}
 34e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 350:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 352:	780c      	ldrb	r4, [r1, #0]
 354:	0224      	lsls	r4, r4, #8
 356:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 358:	784b      	ldrb	r3, [r1, #1]
 35a:	2b00      	cmp	r3, #0
 35c:	d002      	beq.n	364 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 35e:	2380      	movs	r3, #128	; 0x80
 360:	02db      	lsls	r3, r3, #11
 362:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 364:	7a4b      	ldrb	r3, [r1, #9]
 366:	2b00      	cmp	r3, #0
 368:	d002      	beq.n	370 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 36a:	2380      	movs	r3, #128	; 0x80
 36c:	031b      	lsls	r3, r3, #12
 36e:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 370:	6848      	ldr	r0, [r1, #4]
 372:	2801      	cmp	r0, #1
 374:	d918      	bls.n	3a8 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 376:	1e43      	subs	r3, r0, #1
 378:	4218      	tst	r0, r3
 37a:	d110      	bne.n	39e <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 37c:	2802      	cmp	r0, #2
 37e:	d906      	bls.n	38e <system_gclk_gen_set_config+0x42>
 380:	2302      	movs	r3, #2
 382:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 384:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
 386:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 388:	4298      	cmp	r0, r3
 38a:	d8fb      	bhi.n	384 <system_gclk_gen_set_config+0x38>
 38c:	e000      	b.n	390 <system_gclk_gen_set_config+0x44>
 38e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 390:	0212      	lsls	r2, r2, #8
 392:	4332      	orrs	r2, r6
 394:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 396:	2380      	movs	r3, #128	; 0x80
 398:	035b      	lsls	r3, r3, #13
 39a:	431c      	orrs	r4, r3
 39c:	e004      	b.n	3a8 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
 39e:	0205      	lsls	r5, r0, #8
 3a0:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 3a2:	2380      	movs	r3, #128	; 0x80
 3a4:	029b      	lsls	r3, r3, #10
 3a6:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 3a8:	7a0b      	ldrb	r3, [r1, #8]
 3aa:	2b00      	cmp	r3, #0
 3ac:	d002      	beq.n	3b4 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 3ae:	2380      	movs	r3, #128	; 0x80
 3b0:	039b      	lsls	r3, r3, #14
 3b2:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 3b4:	4a0f      	ldr	r2, [pc, #60]	; (3f4 <system_gclk_gen_set_config+0xa8>)
 3b6:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
 3b8:	b25b      	sxtb	r3, r3
 3ba:	2b00      	cmp	r3, #0
 3bc:	dbfb      	blt.n	3b6 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 3be:	4b0e      	ldr	r3, [pc, #56]	; (3f8 <system_gclk_gen_set_config+0xac>)
 3c0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 3c2:	4b0e      	ldr	r3, [pc, #56]	; (3fc <system_gclk_gen_set_config+0xb0>)
 3c4:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 3c6:	4a0b      	ldr	r2, [pc, #44]	; (3f4 <system_gclk_gen_set_config+0xa8>)
 3c8:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 3ca:	b25b      	sxtb	r3, r3
 3cc:	2b00      	cmp	r3, #0
 3ce:	dbfb      	blt.n	3c8 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 3d0:	4b08      	ldr	r3, [pc, #32]	; (3f4 <system_gclk_gen_set_config+0xa8>)
 3d2:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 3d4:	001a      	movs	r2, r3
 3d6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
 3d8:	b25b      	sxtb	r3, r3
 3da:	2b00      	cmp	r3, #0
 3dc:	dbfb      	blt.n	3d6 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 3de:	4a05      	ldr	r2, [pc, #20]	; (3f4 <system_gclk_gen_set_config+0xa8>)
 3e0:	6851      	ldr	r1, [r2, #4]
 3e2:	2380      	movs	r3, #128	; 0x80
 3e4:	025b      	lsls	r3, r3, #9
 3e6:	400b      	ands	r3, r1
 3e8:	431c      	orrs	r4, r3
 3ea:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 3ec:	4b04      	ldr	r3, [pc, #16]	; (400 <system_gclk_gen_set_config+0xb4>)
 3ee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 3f0:	bd70      	pop	{r4, r5, r6, pc}
 3f2:	46c0      	nop			; (mov r8, r8)
 3f4:	40000c00 	.word	0x40000c00
 3f8:	00000119 	.word	0x00000119
 3fc:	40000c08 	.word	0x40000c08
 400:	00000159 	.word	0x00000159

00000404 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 404:	b510      	push	{r4, lr}
 406:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 408:	4a0b      	ldr	r2, [pc, #44]	; (438 <system_gclk_gen_enable+0x34>)
 40a:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
 40c:	b25b      	sxtb	r3, r3
 40e:	2b00      	cmp	r3, #0
 410:	dbfb      	blt.n	40a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 412:	4b0a      	ldr	r3, [pc, #40]	; (43c <system_gclk_gen_enable+0x38>)
 414:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 416:	4b0a      	ldr	r3, [pc, #40]	; (440 <system_gclk_gen_enable+0x3c>)
 418:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 41a:	4a07      	ldr	r2, [pc, #28]	; (438 <system_gclk_gen_enable+0x34>)
 41c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
 41e:	b25b      	sxtb	r3, r3
 420:	2b00      	cmp	r3, #0
 422:	dbfb      	blt.n	41c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 424:	4a04      	ldr	r2, [pc, #16]	; (438 <system_gclk_gen_enable+0x34>)
 426:	6853      	ldr	r3, [r2, #4]
 428:	2180      	movs	r1, #128	; 0x80
 42a:	0249      	lsls	r1, r1, #9
 42c:	430b      	orrs	r3, r1
 42e:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 430:	4b04      	ldr	r3, [pc, #16]	; (444 <system_gclk_gen_enable+0x40>)
 432:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 434:	bd10      	pop	{r4, pc}
 436:	46c0      	nop			; (mov r8, r8)
 438:	40000c00 	.word	0x40000c00
 43c:	00000119 	.word	0x00000119
 440:	40000c04 	.word	0x40000c04
 444:	00000159 	.word	0x00000159

00000448 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 448:	b510      	push	{r4, lr}
 44a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 44c:	4b0f      	ldr	r3, [pc, #60]	; (48c <system_gclk_chan_disable+0x44>)
 44e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 450:	4b0f      	ldr	r3, [pc, #60]	; (490 <system_gclk_chan_disable+0x48>)
 452:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 454:	4b0f      	ldr	r3, [pc, #60]	; (494 <system_gclk_chan_disable+0x4c>)
 456:	885a      	ldrh	r2, [r3, #2]
 458:	0512      	lsls	r2, r2, #20
 45a:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 45c:	8859      	ldrh	r1, [r3, #2]
 45e:	4a0e      	ldr	r2, [pc, #56]	; (498 <system_gclk_chan_disable+0x50>)
 460:	400a      	ands	r2, r1
 462:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 464:	8859      	ldrh	r1, [r3, #2]
 466:	4a0d      	ldr	r2, [pc, #52]	; (49c <system_gclk_chan_disable+0x54>)
 468:	400a      	ands	r2, r1
 46a:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 46c:	0019      	movs	r1, r3
 46e:	2280      	movs	r2, #128	; 0x80
 470:	01d2      	lsls	r2, r2, #7
 472:	884b      	ldrh	r3, [r1, #2]
 474:	4213      	tst	r3, r2
 476:	d1fc      	bne.n	472 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 478:	4906      	ldr	r1, [pc, #24]	; (494 <system_gclk_chan_disable+0x4c>)
 47a:	884c      	ldrh	r4, [r1, #2]
 47c:	0202      	lsls	r2, r0, #8
 47e:	4b06      	ldr	r3, [pc, #24]	; (498 <system_gclk_chan_disable+0x50>)
 480:	4023      	ands	r3, r4
 482:	4313      	orrs	r3, r2
 484:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 486:	4b06      	ldr	r3, [pc, #24]	; (4a0 <system_gclk_chan_disable+0x58>)
 488:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 48a:	bd10      	pop	{r4, pc}
 48c:	00000119 	.word	0x00000119
 490:	40000c02 	.word	0x40000c02
 494:	40000c00 	.word	0x40000c00
 498:	fffff0ff 	.word	0xfffff0ff
 49c:	ffffbfff 	.word	0xffffbfff
 4a0:	00000159 	.word	0x00000159

000004a4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
 4a4:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 4a6:	780c      	ldrb	r4, [r1, #0]
 4a8:	0224      	lsls	r4, r4, #8
 4aa:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
 4ac:	4b02      	ldr	r3, [pc, #8]	; (4b8 <system_gclk_chan_set_config+0x14>)
 4ae:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 4b0:	b2a4      	uxth	r4, r4
 4b2:	4b02      	ldr	r3, [pc, #8]	; (4bc <system_gclk_chan_set_config+0x18>)
 4b4:	805c      	strh	r4, [r3, #2]
}
 4b6:	bd10      	pop	{r4, pc}
 4b8:	00000449 	.word	0x00000449
 4bc:	40000c00 	.word	0x40000c00

000004c0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 4c0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 4c2:	78d3      	ldrb	r3, [r2, #3]
 4c4:	2b00      	cmp	r3, #0
 4c6:	d11e      	bne.n	506 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 4c8:	7813      	ldrb	r3, [r2, #0]
 4ca:	2b80      	cmp	r3, #128	; 0x80
 4cc:	d004      	beq.n	4d8 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 4ce:	061b      	lsls	r3, r3, #24
 4d0:	2480      	movs	r4, #128	; 0x80
 4d2:	0264      	lsls	r4, r4, #9
 4d4:	4323      	orrs	r3, r4
 4d6:	e000      	b.n	4da <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
 4d8:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 4da:	7854      	ldrb	r4, [r2, #1]
 4dc:	2502      	movs	r5, #2
 4de:	43ac      	bics	r4, r5
 4e0:	d10a      	bne.n	4f8 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 4e2:	7894      	ldrb	r4, [r2, #2]
 4e4:	2c00      	cmp	r4, #0
 4e6:	d103      	bne.n	4f0 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
 4e8:	2480      	movs	r4, #128	; 0x80
 4ea:	02a4      	lsls	r4, r4, #10
 4ec:	4323      	orrs	r3, r4
 4ee:	e002      	b.n	4f6 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 4f0:	24c0      	movs	r4, #192	; 0xc0
 4f2:	02e4      	lsls	r4, r4, #11
 4f4:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 4f6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 4f8:	7854      	ldrb	r4, [r2, #1]
 4fa:	3c01      	subs	r4, #1
 4fc:	2c01      	cmp	r4, #1
 4fe:	d812      	bhi.n	526 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 500:	4c18      	ldr	r4, [pc, #96]	; (564 <_system_pinmux_config+0xa4>)
 502:	4023      	ands	r3, r4
 504:	e00f      	b.n	526 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
 506:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 508:	040b      	lsls	r3, r1, #16
 50a:	0c1b      	lsrs	r3, r3, #16
 50c:	24a0      	movs	r4, #160	; 0xa0
 50e:	05e4      	lsls	r4, r4, #23
 510:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 512:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 514:	0c0b      	lsrs	r3, r1, #16
 516:	24d0      	movs	r4, #208	; 0xd0
 518:	0624      	lsls	r4, r4, #24
 51a:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 51c:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 51e:	78d3      	ldrb	r3, [r2, #3]
 520:	2b00      	cmp	r3, #0
 522:	d018      	beq.n	556 <_system_pinmux_config+0x96>
 524:	e01c      	b.n	560 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 526:	040c      	lsls	r4, r1, #16
 528:	0c24      	lsrs	r4, r4, #16
 52a:	25a0      	movs	r5, #160	; 0xa0
 52c:	05ed      	lsls	r5, r5, #23
 52e:	432c      	orrs	r4, r5
 530:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 532:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 534:	0c0c      	lsrs	r4, r1, #16
 536:	25d0      	movs	r5, #208	; 0xd0
 538:	062d      	lsls	r5, r5, #24
 53a:	432c      	orrs	r4, r5
 53c:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 53e:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 540:	78d4      	ldrb	r4, [r2, #3]
 542:	2c00      	cmp	r4, #0
 544:	d10c      	bne.n	560 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 546:	035b      	lsls	r3, r3, #13
 548:	d505      	bpl.n	556 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 54a:	7893      	ldrb	r3, [r2, #2]
 54c:	2b01      	cmp	r3, #1
 54e:	d101      	bne.n	554 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
 550:	6181      	str	r1, [r0, #24]
 552:	e000      	b.n	556 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
 554:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 556:	7853      	ldrb	r3, [r2, #1]
 558:	3b01      	subs	r3, #1
 55a:	2b01      	cmp	r3, #1
 55c:	d800      	bhi.n	560 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
 55e:	6081      	str	r1, [r0, #8]
		}
	}
}
 560:	bd30      	pop	{r4, r5, pc}
 562:	46c0      	nop			; (mov r8, r8)
 564:	fffbffff 	.word	0xfffbffff

00000568 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 568:	b510      	push	{r4, lr}
 56a:	0003      	movs	r3, r0
 56c:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 56e:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 570:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 572:	2900      	cmp	r1, #0
 574:	d104      	bne.n	580 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
 576:	0958      	lsrs	r0, r3, #5
 578:	01c0      	lsls	r0, r0, #7
 57a:	4905      	ldr	r1, [pc, #20]	; (590 <system_pinmux_pin_set_config+0x28>)
 57c:	468c      	mov	ip, r1
 57e:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
 580:	211f      	movs	r1, #31
 582:	400b      	ands	r3, r1
 584:	391e      	subs	r1, #30
 586:	4099      	lsls	r1, r3
 588:	4b02      	ldr	r3, [pc, #8]	; (594 <system_pinmux_pin_set_config+0x2c>)
 58a:	4798      	blx	r3
}
 58c:	bd10      	pop	{r4, pc}
 58e:	46c0      	nop			; (mov r8, r8)
 590:	41004400 	.word	0x41004400
 594:	000004c1 	.word	0x000004c1

00000598 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 598:	4770      	bx	lr
 59a:	46c0      	nop			; (mov r8, r8)

0000059c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 59c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 59e:	4b05      	ldr	r3, [pc, #20]	; (5b4 <system_init+0x18>)
 5a0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 5a2:	4b05      	ldr	r3, [pc, #20]	; (5b8 <system_init+0x1c>)
 5a4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 5a6:	4b05      	ldr	r3, [pc, #20]	; (5bc <system_init+0x20>)
 5a8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 5aa:	4b05      	ldr	r3, [pc, #20]	; (5c0 <system_init+0x24>)
 5ac:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 5ae:	4b05      	ldr	r3, [pc, #20]	; (5c4 <system_init+0x28>)
 5b0:	4798      	blx	r3
}
 5b2:	bd10      	pop	{r4, pc}
 5b4:	00000291 	.word	0x00000291
 5b8:	00000115 	.word	0x00000115
 5bc:	00000599 	.word	0x00000599
 5c0:	00000599 	.word	0x00000599
 5c4:	00000599 	.word	0x00000599

000005c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 5c8:	e7fe      	b.n	5c8 <Dummy_Handler>
 5ca:	46c0      	nop			; (mov r8, r8)

000005cc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 5cc:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 5ce:	4b2e      	ldr	r3, [pc, #184]	; (688 <Reset_Handler+0xbc>)
 5d0:	4a2e      	ldr	r2, [pc, #184]	; (68c <Reset_Handler+0xc0>)
 5d2:	429a      	cmp	r2, r3
 5d4:	d003      	beq.n	5de <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 5d6:	4b2e      	ldr	r3, [pc, #184]	; (690 <Reset_Handler+0xc4>)
 5d8:	4a2b      	ldr	r2, [pc, #172]	; (688 <Reset_Handler+0xbc>)
 5da:	429a      	cmp	r2, r3
 5dc:	d304      	bcc.n	5e8 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 5de:	4b2d      	ldr	r3, [pc, #180]	; (694 <Reset_Handler+0xc8>)
 5e0:	4a2d      	ldr	r2, [pc, #180]	; (698 <Reset_Handler+0xcc>)
 5e2:	429a      	cmp	r2, r3
 5e4:	d310      	bcc.n	608 <Reset_Handler+0x3c>
 5e6:	e01e      	b.n	626 <Reset_Handler+0x5a>
 5e8:	4a2c      	ldr	r2, [pc, #176]	; (69c <Reset_Handler+0xd0>)
 5ea:	4b29      	ldr	r3, [pc, #164]	; (690 <Reset_Handler+0xc4>)
 5ec:	3303      	adds	r3, #3
 5ee:	1a9b      	subs	r3, r3, r2
 5f0:	089b      	lsrs	r3, r3, #2
 5f2:	3301      	adds	r3, #1
 5f4:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 5f6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 5f8:	4823      	ldr	r0, [pc, #140]	; (688 <Reset_Handler+0xbc>)
 5fa:	4924      	ldr	r1, [pc, #144]	; (68c <Reset_Handler+0xc0>)
 5fc:	588c      	ldr	r4, [r1, r2]
 5fe:	5084      	str	r4, [r0, r2]
 600:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 602:	429a      	cmp	r2, r3
 604:	d1fa      	bne.n	5fc <Reset_Handler+0x30>
 606:	e7ea      	b.n	5de <Reset_Handler+0x12>
 608:	4a25      	ldr	r2, [pc, #148]	; (6a0 <Reset_Handler+0xd4>)
 60a:	4b22      	ldr	r3, [pc, #136]	; (694 <Reset_Handler+0xc8>)
 60c:	3303      	adds	r3, #3
 60e:	1a9b      	subs	r3, r3, r2
 610:	089b      	lsrs	r3, r3, #2
 612:	3301      	adds	r3, #1
 614:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 616:	2200      	movs	r2, #0
                *pDest++ = 0;
 618:	481f      	ldr	r0, [pc, #124]	; (698 <Reset_Handler+0xcc>)
 61a:	2100      	movs	r1, #0
 61c:	1814      	adds	r4, r2, r0
 61e:	6021      	str	r1, [r4, #0]
 620:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 622:	429a      	cmp	r2, r3
 624:	d1fa      	bne.n	61c <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 626:	4a1f      	ldr	r2, [pc, #124]	; (6a4 <Reset_Handler+0xd8>)
 628:	21ff      	movs	r1, #255	; 0xff
 62a:	4b1f      	ldr	r3, [pc, #124]	; (6a8 <Reset_Handler+0xdc>)
 62c:	438b      	bics	r3, r1
 62e:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 630:	39fd      	subs	r1, #253	; 0xfd
 632:	2390      	movs	r3, #144	; 0x90
 634:	005b      	lsls	r3, r3, #1
 636:	4a1d      	ldr	r2, [pc, #116]	; (6ac <Reset_Handler+0xe0>)
 638:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 63a:	481d      	ldr	r0, [pc, #116]	; (6b0 <Reset_Handler+0xe4>)
 63c:	78c3      	ldrb	r3, [r0, #3]
 63e:	2403      	movs	r4, #3
 640:	43a3      	bics	r3, r4
 642:	2202      	movs	r2, #2
 644:	4313      	orrs	r3, r2
 646:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 648:	78c3      	ldrb	r3, [r0, #3]
 64a:	260c      	movs	r6, #12
 64c:	43b3      	bics	r3, r6
 64e:	2108      	movs	r1, #8
 650:	430b      	orrs	r3, r1
 652:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 654:	4b17      	ldr	r3, [pc, #92]	; (6b4 <Reset_Handler+0xe8>)
 656:	7b98      	ldrb	r0, [r3, #14]
 658:	2530      	movs	r5, #48	; 0x30
 65a:	43a8      	bics	r0, r5
 65c:	0005      	movs	r5, r0
 65e:	2020      	movs	r0, #32
 660:	4328      	orrs	r0, r5
 662:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 664:	7b98      	ldrb	r0, [r3, #14]
 666:	43b0      	bics	r0, r6
 668:	4301      	orrs	r1, r0
 66a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 66c:	7b99      	ldrb	r1, [r3, #14]
 66e:	43a1      	bics	r1, r4
 670:	430a      	orrs	r2, r1
 672:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 674:	4a10      	ldr	r2, [pc, #64]	; (6b8 <Reset_Handler+0xec>)
 676:	6851      	ldr	r1, [r2, #4]
 678:	2380      	movs	r3, #128	; 0x80
 67a:	430b      	orrs	r3, r1
 67c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 67e:	4b0f      	ldr	r3, [pc, #60]	; (6bc <Reset_Handler+0xf0>)
 680:	4798      	blx	r3

        /* Branch to main function */
        main();
 682:	4b0f      	ldr	r3, [pc, #60]	; (6c0 <Reset_Handler+0xf4>)
 684:	4798      	blx	r3
 686:	e7fe      	b.n	686 <Reset_Handler+0xba>
 688:	20000000 	.word	0x20000000
 68c:	000007c0 	.word	0x000007c0
 690:	20000004 	.word	0x20000004
 694:	20000040 	.word	0x20000040
 698:	20000004 	.word	0x20000004
 69c:	20000004 	.word	0x20000004
 6a0:	20000008 	.word	0x20000008
 6a4:	e000ed00 	.word	0xe000ed00
 6a8:	00000000 	.word	0x00000000
 6ac:	41007000 	.word	0x41007000
 6b0:	41005000 	.word	0x41005000
 6b4:	41004800 	.word	0x41004800
 6b8:	41004000 	.word	0x41004000
 6bc:	00000731 	.word	0x00000731
 6c0:	000006f9 	.word	0x000006f9

000006c4 <configure_port_pins>:
#define LED_1_PIN PIN_PB10
#define RELAY PIN_PA05
#define B1 PIN_PA06

void configure_port_pins(void)
{
 6c4:	b570      	push	{r4, r5, r6, lr}
 6c6:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 6c8:	ac01      	add	r4, sp, #4
 6ca:	2301      	movs	r3, #1
 6cc:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
 6ce:	2600      	movs	r6, #0
 6d0:	70a6      	strb	r6, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
 6d2:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
 6d4:	0021      	movs	r1, r4
 6d6:	202b      	movs	r0, #43	; 0x2b
 6d8:	4d06      	ldr	r5, [pc, #24]	; (6f4 <configure_port_pins+0x30>)
 6da:	47a8      	blx	r5
	port_pin_set_config(LED_1_PIN, &config_port_pin);
 6dc:	0021      	movs	r1, r4
 6de:	202a      	movs	r0, #42	; 0x2a
 6e0:	47a8      	blx	r5
	port_pin_set_config(RELAY, &config_port_pin);
 6e2:	0021      	movs	r1, r4
 6e4:	2005      	movs	r0, #5
 6e6:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
 6e8:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(B1, &config_port_pin);
 6ea:	0021      	movs	r1, r4
 6ec:	2006      	movs	r0, #6
 6ee:	47a8      	blx	r5
}
 6f0:	b002      	add	sp, #8
 6f2:	bd70      	pop	{r4, r5, r6, pc}
 6f4:	00000189 	.word	0x00000189

000006f8 <main>:

int main (void)
{
 6f8:	b510      	push	{r4, lr}
	system_init();
 6fa:	4b0a      	ldr	r3, [pc, #40]	; (724 <main+0x2c>)
 6fc:	4798      	blx	r3
	configure_port_pins();
 6fe:	4b0a      	ldr	r3, [pc, #40]	; (728 <main+0x30>)
 700:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 702:	4b0a      	ldr	r3, [pc, #40]	; (72c <main+0x34>)
 704:	001a      	movs	r2, r3
 706:	3280      	adds	r2, #128	; 0x80
 708:	2180      	movs	r1, #128	; 0x80
 70a:	00c9      	lsls	r1, r1, #3
 70c:	6191      	str	r1, [r2, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
 70e:	2220      	movs	r2, #32
 710:	615a      	str	r2, [r3, #20]
	
	port_pin_set_output_level(LED_1_PIN, true);
	port_pin_set_output_level(RELAY, false);
	while (1) {
		if (port_pin_get_input_level(B1) == true) {
 712:	2040      	movs	r0, #64	; 0x40
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 714:	2120      	movs	r1, #32
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
 716:	6a1a      	ldr	r2, [r3, #32]
 718:	4210      	tst	r0, r2
 71a:	d001      	beq.n	720 <main+0x28>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
 71c:	6159      	str	r1, [r3, #20]
 71e:	e7fa      	b.n	716 <main+0x1e>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 720:	6199      	str	r1, [r3, #24]
 722:	e7f8      	b.n	716 <main+0x1e>
 724:	0000059d 	.word	0x0000059d
 728:	000006c5 	.word	0x000006c5
 72c:	41004400 	.word	0x41004400

00000730 <__libc_init_array>:
 730:	4b0e      	ldr	r3, [pc, #56]	; (76c <__libc_init_array+0x3c>)
 732:	b570      	push	{r4, r5, r6, lr}
 734:	2500      	movs	r5, #0
 736:	001e      	movs	r6, r3
 738:	4c0d      	ldr	r4, [pc, #52]	; (770 <__libc_init_array+0x40>)
 73a:	1ae4      	subs	r4, r4, r3
 73c:	10a4      	asrs	r4, r4, #2
 73e:	42a5      	cmp	r5, r4
 740:	d004      	beq.n	74c <__libc_init_array+0x1c>
 742:	00ab      	lsls	r3, r5, #2
 744:	58f3      	ldr	r3, [r6, r3]
 746:	4798      	blx	r3
 748:	3501      	adds	r5, #1
 74a:	e7f8      	b.n	73e <__libc_init_array+0xe>
 74c:	f000 f828 	bl	7a0 <_init>
 750:	4b08      	ldr	r3, [pc, #32]	; (774 <__libc_init_array+0x44>)
 752:	2500      	movs	r5, #0
 754:	001e      	movs	r6, r3
 756:	4c08      	ldr	r4, [pc, #32]	; (778 <__libc_init_array+0x48>)
 758:	1ae4      	subs	r4, r4, r3
 75a:	10a4      	asrs	r4, r4, #2
 75c:	42a5      	cmp	r5, r4
 75e:	d004      	beq.n	76a <__libc_init_array+0x3a>
 760:	00ab      	lsls	r3, r5, #2
 762:	58f3      	ldr	r3, [r6, r3]
 764:	4798      	blx	r3
 766:	3501      	adds	r5, #1
 768:	e7f8      	b.n	75c <__libc_init_array+0x2c>
 76a:	bd70      	pop	{r4, r5, r6, pc}
 76c:	000007ac 	.word	0x000007ac
 770:	000007ac 	.word	0x000007ac
 774:	000007ac 	.word	0x000007ac
 778:	000007b0 	.word	0x000007b0
 77c:	00000214 	.word	0x00000214
 780:	000001f4 	.word	0x000001f4
 784:	000001f4 	.word	0x000001f4
 788:	00000280 	.word	0x00000280
 78c:	00000206 	.word	0x00000206
 790:	00000222 	.word	0x00000222
 794:	000001f8 	.word	0x000001f8
 798:	00000230 	.word	0x00000230
 79c:	00000270 	.word	0x00000270

000007a0 <_init>:
 7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 7a2:	46c0      	nop			; (mov r8, r8)
 7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 7a6:	bc08      	pop	{r3}
 7a8:	469e      	mov	lr, r3
 7aa:	4770      	bx	lr

000007ac <__init_array_start>:
 7ac:	000000dd 	.word	0x000000dd

000007b0 <_fini>:
 7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 7b2:	46c0      	nop			; (mov r8, r8)
 7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 7b6:	bc08      	pop	{r3}
 7b8:	469e      	mov	lr, r3
 7ba:	4770      	bx	lr

000007bc <__fini_array_start>:
 7bc:	000000b5 	.word	0x000000b5
